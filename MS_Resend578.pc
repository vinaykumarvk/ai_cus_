


   
   
   
   
   
   
   
   
   
   
   
   




#include "CO_HostStructdef.h"
EXEC SQL INCLUDE sqlca;

//main(int argc,char **argv)
int main(int argc,char **argv)//Changes done for AIX Migration
{
	DEBUG_INFO_STRUCT_H			*l_debug_info_ptr 		= NULL;
	FILE						*l_ptr_ini_file 	= NULL;
	FILE						*l_ptr_log_file 	= NULL;
	INTL_ENV_DATA_STRUCT_H	l_intl_envdatastruct_h;
	char						chr_l_inifile[PATH_LENGTH]  		= APL_NULL_STRING;
	char						chr_uname[APL_USERID_LEN]   		= APL_NULL_STRING;
	char						chr_passwd[APL_PASSWD_LEN]  		= APL_NULL_STRING;
	char						chr_custody_id_b[APL_USERID_LEN] 	 		= APL_NULL_STRING;
	char						chr_l_filename_c[FILE_NAME_LEN]  	= APL_NULL_STRING;
	char						chr_l_fnameprefix[5]  				= APL_NULL_STRING;
	char						**temp = NULL ;
	char 						chr_l_action[2]							= APL_NULL_STRING;
	char 						int_l_batch_no[6]						= APL_NULL_STRING;
	char 						chr_l_client_passed[11]				= APL_NULL_STRING;
	int 						int_num 									= 0;
	int						int_l_flg  								= 0;
	int						int_retval 								= 0;
	int						int_l_int_count 						= 0;
	char						chr_l_buf[BUFFER_LEN] 					= APL_NULL_STRING;
	struct sqlca			sqlca;

	memset(&l_intl_envdatastruct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H));
	memset(chr_l_filename_c,APL_NULL_CHAR,FILE_NAME_LEN);
	memset(chr_l_fnameprefix,APL_NULL_CHAR,5);
	memset(chr_l_action,APL_NULL_CHAR,sizeof(chr_l_action));
	memset(chr_l_client_passed,APL_NULL_CHAR,sizeof(chr_l_client_passed));
	
	sqlca.sqlcode = 0;

	
	strcpy(l_intl_envdatastruct_h.usr, argv[3]);
	strcpy(l_intl_envdatastruct_h.h_mode, argv[4]);
	strcpy(l_intl_envdatastruct_h.processtion, argv[5]);
	strcpy(l_intl_envdatastruct_h.auth_req, argv[6]);
	strcpy(l_intl_envdatastruct_h.subprocess, argv[7]);
	strcpy(l_intl_envdatastruct_h.h_process, argv[8]);
	
	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

	if ((l_ptr_ini_file = fopen(chr_l_inifile,"r")) == NULL)
		exit(-1);
	
	APL_FETCH_DB_LOGIN_DETAILS(l_ptr_ini_file,chr_custody_id_b,chr_uname,chr_passwd,APL_OUT_FILE,&l_debug_info_ptr)
	
	
	
	if (CO_Con_Db(chr_uname,chr_passwd,&l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL

	

	int_retval = CO_Rtv_RptFileName("3t",APL_LOGFILE_DESC,100,argv[5],argv,&l_ptr_log_file,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL
	}

	

	EXEC SQL COMMIT WORK;
	
	if (sqlca.sqlcode != 0)
	{
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL
	}
	
	memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
	sprintf(chr_l_buf,"MT578 Batch Resend - Greece - Remote Trading");
	
	fprintf(l_ptr_log_file,"\n");
	fprintf(l_ptr_log_file,"    		%s\n",chr_l_buf);
	fprintf(l_ptr_log_file,"    		----------------------------------\n\n");
	fprintf(l_ptr_log_file,"Work Committed after chr_logfile creation \n");

	

	if (CO_RtvSysParams(&l_debug_info_ptr) != APL_SUCCESS)
	{
		CO_ProcMonitor(l_ptr_log_file,"Unable to get system parameters - Rollback done \n",NULL,&l_intl_envdatastruct_h);
		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL	
	}

	
	
	int_retval = CO_Pro_LocRec(argv,l_ptr_log_file,&l_debug_info_ptr);
	 
	if (int_retval != APL_SUCCESS)
	{
		CO_ProcMonitor(l_ptr_log_file,"Unable to lock BATCH_IN_PROC record - Rollback done \n",NULL,&l_intl_envdatastruct_h);
		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL
	}

	

	 fprintf(l_ptr_log_file, "\n\tString split processtion called\n");
	 fprintf(l_ptr_log_file, "argv[9]=(%s)\n",argv[9]);
	 fflush(l_ptr_log_file);

	 if (APL_FAILURE == CO_SplitStr( argv[9],'|',&int_num,&temp))
	 {
		fprintf(l_ptr_log_file, "\n\tString split processtion failed\n");
		APL_GOBACK_FAIL
	 }
	
	 if(int_num == 0)
	 {
		fprintf(l_ptr_log_file, "\n\tThere were no params. Mandatory data missing\n");
		APL_GOBACK_FAIL
	 }

	 strcpy(chr_l_client_passed,temp[1]);
	 strcpy(int_l_batch_no,temp[2]);
	 strcpy(chr_l_filename_c,temp[3]);
	
	 fprintf(l_ptr_log_file,"l_account_passed=(%s), int_l_batch_no=(%s), chr_l_filename_c=(%s)\n", chr_l_client_passed,int_l_batch_no,chr_l_filename_c);
	 fflush(l_ptr_log_file);

	 if (!strlen(chr_l_filename_c))
	 {
		CO_InsertErr
		 (&l_debug_info_ptr,
		  ERR_FDFILE_NOTVALID,
		  APL_NULL_STRING,
		  APL_NULL_STRING,
		  APL_NULL_STRING,
		  __LINE__,
		  __FILE__
		 );
		
		CO_ProcMonitor(l_ptr_log_file,"No Upload File name given!!\n",&l_debug_info_ptr,&l_intl_envdatastruct_h);
      APL_GOBACK_FAIL
	 }

	

  int_retval=0;

  fprintf(l_ptr_log_file, "Calling MT578 Batch Resend Function\n");

  int_retval=Resend578forRBD(chr_l_filename_c,int_l_batch_no,chr_l_client_passed,l_ptr_log_file,&l_intl_envdatastruct_h,&l_debug_info_ptr);

  if( int_retval != APL_SUCCESS )
  {
		int_l_flg = 1;

	   CO_Mod_Batch_Status(argv,l_ptr_log_file,&l_debug_info_ptr,int_l_flg);
		
		if (CO_ChkErr(l_debug_info_ptr) == APL_SUCCESS)
		{
			CO_ProcMonitor(l_ptr_log_file,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_envdatastruct_h);
			CO_FreeErrLst(&l_debug_info_ptr);
		}
		APL_GOBACK_FAIL	
	}
	else
	{
		int_l_flg = 0;

		CO_Mod_Batch_Status(argv,l_ptr_log_file,&l_debug_info_ptr,int_l_flg);

		if (CO_ChkErr(l_debug_info_ptr) == APL_SUCCESS)
		{
			CO_ProcMonitor(l_ptr_log_file,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_envdatastruct_h);
			CO_FreeErrLst(&l_debug_info_ptr);
		}
		APL_GOBACK_SUCCESS
	}
	  
	APL_GOBACK_SUCCESS


	RETURN_SUCCESS	:
	{
		CO_ProcMonitor(l_ptr_log_file,"Exiting Main Function Successfully\n",NULL,NULL);
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);
		fclose(l_ptr_ini_file);
		exit(0);
	}

	RETURN_FAILURE	:
	{
		CO_ProcMonitor(l_ptr_log_file,"Exiting Main Function Unsuccessfully\n",NULL,NULL);
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);
		fclose(l_ptr_ini_file);
  		exit(-1);
	}
}
 




 
int Resend578forRBD(char *chr_p_filename_a,char *p_batch_no,char *p_client_passed,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_e,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
 char chr_l_refno_a[17] = APL_NULL_STRING;
 long int_l_int_count = 0;
 short i_indentity_no=0;

 EXEC SQL VAR chr_l_refno_a IS STRING;

 memset(chr_l_refno_a,APL_NULL_CHAR,sizeof(chr_l_refno_a));
 fprintf(p_ptr_log_file,"Entered processtion Resend578forRBD\n");

 EXEC SQL DECLARE CMISTXN_CUR CURSOR FOR SELECT IDENTIY_NO FROM DL_MISDEAL WHERE CLIENT=:p_client_passed
 AND PROC_NUM=:p_batch_no AND NAMEOF_FILE=:chr_p_filename_a ;
 IS_ANY_ORA_ERROR

 EXEC SQL OPEN CMISTXN_CUR;
 IS_ANY_ORA_ERROR

 for( ; ; )
 {

 	EXEC SQL FETCH CMISTXN_CUR INTO :chr_l_refno_a:i_indentity_no ;
   IS_ANY_ORA_ERROR_CURSOR

   if( APL_ZERO_RESULT_SET )
     break;
  
   if ( APL_FAILURE == GBDbInsIMSGENT("578N02",chr_l_refno_a, p_client_passed, 'Y', APL_NULL_STRING, l_debug_info_ptr))
		APL_GOBACK_FAIL
 	
	fprintf(p_ptr_log_file,"l_refno=(%s),p_client_passed=(%s)\n",chr_l_refno_a,p_client_passed);
	int_l_int_count++;
 
 } 

 EXEC SQL CLOSE CMISTXN_CUR;
 IS_ANY_ORA_ERROR 

 //fprintf(p_ptr_log_file,"Message Resend Done for %d records in cmistxn\n",int_l_int_count);Changes done for AIX Migration 
 fprintf(p_ptr_log_file,"Message Resend Done for %ld records in cmistxn\n",int_l_int_count);


 APL_GOBACK_SUCCESS
 
 RETURN_SUCCESS :
 {
  fprintf(p_ptr_log_file,"Leaving processtion Resend578forRBD successfully\n");
  CO_FreeErrLst(l_debug_info_ptr);
  return(APL_SUCCESS);
 }

 RETURN_FAILURE :
 {
	fprintf(p_ptr_log_file,"Leaving processtion Resend578forRBD with failure\n");
	CO_FreeErrLst(l_debug_info_ptr);
	return(APL_FAILURE);
 }

}

