





#include "CO_HostStructdef.h"
EXEC SQL INCLUDE SQLCA.H;



int CR_Proc_OrdExec(  	DEAL_EXECDET_STRUCT_H *p_deal_execdet_struct_h_a,
                  	ORDERDETAILS_STRUCT_H      *p_orderdetails_struct_h,
							char						*p_ora_rowid,
                  	INTL_ENV_DATA_STRUCT_H   *p_intl_envdatastruct_h,
                  	DEBUG_INFO_STRUCT_H         **l_debug_info_ptr )
{

	

	struct sqlca sqlca;	
	char 		chr_l_buf[BUFFER_LEN] 					= APL_NULL_STRING;
	char		chr_l_now[APL_DATE_LEN]				= APL_NULL_STRING;
	char		chr_l_sysdate_b[APL_DATE_LEN]			= APL_NULL_STRING;
	char		chr_l_h_checkerdt[APL_DATE_LEN]	= APL_NULL_STRING;
	char		chr_l_ord_status[APL_STATUS_LEN]	= APL_NULL_STRING;

	short		l_i_checkerdt		= 0;
	short		l_i_orderqty		= 0;
	short		l_i_execqty			= 0;

	int 		int_l_error_flag 		= APL_SUCCESS;
	int		i						= 0;

	double	l_h_orderquantity		= 0.0;
	double	l_h_execquantity			= 0.0;

	OR_EXECORDER_STRUCT_H *l_or_execorder_struct_h = NULL;
	OR_EXECORDER_STRUCT_I *l_or_execorder_struct_i = NULL;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	

	EXEC SQL VAR chr_l_h_checkerdt IS STRING;

	

	l_or_execorder_struct_h = (OR_EXECORDER_STRUCT_H *)calloc(1, sizeof(OR_EXECORDER_STRUCT_H));
	APL_MALLOC_FAIL(l_or_execorder_struct_h);
	l_or_execorder_struct_i = (OR_EXECORDER_STRUCT_I *)calloc(1, sizeof(OR_EXECORDER_STRUCT_I));
	APL_MALLOC_FAIL(l_or_execorder_struct_i);

	

   APL_IF_DEBUG
   {
      CO_ProcMonitor(   APL_OUT_FILE,
                  "Entered processtion CR_Proc_OrdExec\n",
                  NULL,
                  p_intl_envdatastruct_h );
      memset(chr_l_buf, NULL, BUFFER_LEN);
      sprintf( chr_l_buf,
               "The Account is : %s\n",
               p_deal_execdet_struct_h_a->h_dl_client );
      CO_ProcMonitor(   APL_OUT_FILE,
                  chr_l_buf,
                  NULL,
                  p_intl_envdatastruct_h );
      memset(chr_l_buf, NULL, BUFFER_LEN);
      sprintf( chr_l_buf,
               "The Order Refno is : %s\n",
               p_deal_execdet_struct_h_a->h_orderindentity_no );
      CO_ProcMonitor(   APL_OUT_FILE,
                  chr_l_buf,
                  NULL,
                  p_intl_envdatastruct_h );
      memset(chr_l_buf, NULL, BUFFER_LEN);
      sprintf( chr_l_buf,
               "The Execution Qty is : %f\n",
               p_deal_execdet_struct_h_a->h_qty );
      CO_ProcMonitor(   APL_OUT_FILE,
                  chr_l_buf,
                  NULL,
                  p_intl_envdatastruct_h );
   }

	

	

	if (APL_FAILURE == CO_RtvSysDtTime(	chr_l_now,
															l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	if ( APL_FAILURE == CO_RtvSysDt( 	chr_l_sysdate_b,
														l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL;
	}

	

	strcpy(l_or_execorder_struct_h->h_dl_client, p_deal_execdet_struct_h_a->h_dl_client);
	strcpy(l_or_execorder_struct_h->h_indentity_no, p_deal_execdet_struct_h_a->h_indentity_no);
	strcpy(l_or_execorder_struct_h->h_dlt, p_deal_execdet_struct_h_a->h_dlt);
	strcpy(l_or_execorder_struct_h->h_setldt, p_deal_execdet_struct_h_a->h_setldt);
	strcpy(l_or_execorder_struct_h->h_execdate, chr_l_now);
	strcpy(l_or_execorder_struct_h->h_access_stamp, chr_l_now);
	strcpy(l_or_execorder_struct_h->h_tax_amount, p_deal_execdet_struct_h_a->h_tax_amount);
	strcpy(l_or_execorder_struct_h->h_reset_ind, "N");
	strcpy(l_or_execorder_struct_h->h_orderindentity_no, p_deal_execdet_struct_h_a->h_orderindentity_no);

	for (i = 0; i < p_orderdetails_struct_h->h_element_cnt; i++)
	{
		l_or_execorder_struct_h->h_qty = *(p_orderdetails_struct_h->h_qty + i);
		l_or_execorder_struct_h->h_pr = *(p_orderdetails_struct_h->h_pr + i);
		l_or_execorder_struct_h->h_brokercomm = *(p_orderdetails_struct_h->h_brokercomm + i);

		l_or_execorder_struct_i->i_qty = 0;
		l_or_execorder_struct_i->i_pr = 0;
		l_or_execorder_struct_i->i_brokercomm = 0;

		EXEC SQL INSERT INTO OR_EXECORDER VALUES(:l_or_execorder_struct_h:l_or_execorder_struct_i);

		IS_ANY_ORA_ERROR_AND_DUPLICATE(	ERR_REC_EXIST,
														"Ord. Exec. Rec.",
														p_deal_execdet_struct_h_a->h_dl_client,
														p_deal_execdet_struct_h_a->h_orderindentity_no );

	}

	

	EXEC SQL SELECT checker_dt, ORD_QTY, EXEC_QTY
	INTO 	:chr_l_h_checkerdt:l_i_checkerdt,
			:l_h_orderquantity:l_i_orderqty,
			:l_h_execquantity:l_i_execqty
	FROM OR_ORDERDETAILS
	WHERE rowid = :p_ora_rowid ;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_ORD_NOTFND,
														p_deal_execdet_struct_h_a->h_dl_client,
														p_deal_execdet_struct_h_a->h_orderindentity_no,
														APL_NULL_STRING );

	if (l_h_orderquantity == l_h_execquantity + p_deal_execdet_struct_h_a->h_qty)
	{
		strcpy(chr_l_ord_status, STATUS_EXEC);
	}
	else
	{
		strcpy(chr_l_ord_status, STATUS_PART_EXEC);
	}

	if (l_i_checkerdt == -1)
	{
		EXEC SQL UPDATE OR_ORDERDETAILS
		SET 	EXEC_QTY = NVL(EXEC_QTY,0) + :p_deal_execdet_struct_h_a->h_qty,
				LAST_DL_DATE = RTRIM(:p_deal_execdet_struct_h_a->h_indentity_no),
				LAST_EXEC_DATE = RTRIM(:chr_l_now),
				ORD_STAT = RTRIM(:chr_l_ord_status),
				checker = :p_intl_envdatastruct_h->usr,
				checker_dt = RTRIM(:chr_l_now),
				access_stamp = RTRIM(:chr_l_now)
		WHERE rowid = :p_ora_rowid ;
	}
	else
	{
		EXEC SQL UPDATE OR_ORDERDETAILS
		SET 	EXEC_QTY = NVL(EXEC_QTY,0) + :p_deal_execdet_struct_h_a->h_qty,
				LAST_DL_DATE = RTRIM(:p_deal_execdet_struct_h_a->h_indentity_no),
				LAST_EXEC_DATE = RTRIM(:chr_l_now),
				ORD_STAT = RTRIM(:chr_l_ord_status),
				access_stamp = RTRIM(:chr_l_now)
		WHERE rowid = :p_ora_rowid ;
	}

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_ORD_NOTFND,
														p_deal_execdet_struct_h_a->h_dl_client,
														p_deal_execdet_struct_h_a->h_orderindentity_no,
														APL_NULL_STRING );

	
	
	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Leaving Function CR_Proc_OrdExec with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);

   RETURN_FAILURE :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Leaving Function CR_Proc_OrdExec with errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);

}


int CR_Rtv_OrdTrd( 	DEAL_EXECDET_STRUCT_H *p_deal_execdet_struct_h_a,
                  	INTL_ENV_DATA_STRUCT_H   *p_intl_envdatastruct_h,
                  	DEBUG_INFO_STRUCT_H         **l_debug_info_ptr )
{

	

	struct sqlca sqlca;	

	char 		chr_l_buf[BUFFER_LEN] 						= APL_NULL_STRING;
	char		chr_l_now[APL_DATE_LEN]					= APL_NULL_STRING;
	char		chr_l_h_brokcode_cname[CNAME_LEN_A]	= APL_NULL_STRING;
	char		chr_l_h_locrefno_a[APL_TXNREFNO_LEN]	= APL_NULL_STRING;
	char		chr_l_h_lrtrdtype[LR_DEALTYPE_LEN]	= APL_NULL_STRING;
	char		chr_l_h_instrcode_A[APL_INSTRUMENTCODE_LEN]			= APL_NULL_STRING;
	char		chr_l_h_ccycode[APL_CCYCODE_LEN]		= APL_NULL_STRING;
	char		chr_l_h_locncode_a[APL_LOCNCODE_LENGTH]	= APL_NULL_STRING;
	char		chr_l_h_regbrind[REG_BR_IND_LEN]		= APL_NULL_STRING;
	char		chr_l_h_newcode[APL_INSTRUMENTCODE_LEN]		= APL_NULL_STRING;
	char		chr_l_h_exarena[EX_ARENA_LEN]			= APL_NULL_STRING;
	
	char		chr_l_h_execdt[APL_DATE_LEN]			= APL_NULL_STRING;

	short		l_i_brokcode_cname	= 0;
	short		l_i_locrefno			= 0;
	short		l_i_lrtrdtype			= 0;
	short		l_i_instr_code				= 0;
	short		l_i_ccycode				= 0;
	short		l_i_locncode			= 0;
	short		l_i_regbrind			= 0;
	short		l_i_newcode				= 0;
	short		l_i_exarena				= 0;
	
	short		l_i_execdt				= 0;

	SYS_DL_DEAL_STRUCT_H  *l_sys_dl_deal_struct_hg = NULL;
	INTL_ENV_DATA_STRUCT_H   *l_intl_env_data_h  = NULL;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	

	EXEC SQL VAR chr_l_h_brokcode_cname 	IS STRING;
	EXEC SQL VAR chr_l_h_locrefno_a 			IS STRING;
	EXEC SQL VAR chr_l_h_lrtrdtype 		IS STRING;
	EXEC SQL VAR chr_l_h_instrcode_A				IS STRING;
	EXEC SQL VAR chr_l_h_ccycode 			IS STRING;
	EXEC SQL VAR chr_l_h_locncode_a 			IS STRING;
	EXEC SQL VAR chr_l_h_regbrind 			IS STRING;
	EXEC SQL VAR chr_l_h_newcode 			IS STRING;
	EXEC SQL VAR chr_l_h_exarena 			IS STRING;

	

	l_sys_dl_deal_struct_hg = (SYS_DL_DEAL_STRUCT_H *)calloc(1, sizeof(SYS_DL_DEAL_STRUCT_H));
	APL_MALLOC_FAIL(l_sys_dl_deal_struct_hg);
	l_intl_env_data_h = (INTL_ENV_DATA_STRUCT_H *)calloc(1, sizeof(INTL_ENV_DATA_STRUCT_H));
	APL_MALLOC_FAIL(l_intl_env_data_h);

	

   APL_IF_DEBUG
   {
      CO_ProcMonitor(   APL_OUT_FILE,
                  "Entered processtion CR_Rtv_OrdTrd\n",
                  NULL,
                  p_intl_envdatastruct_h );
      memset(chr_l_buf, NULL, BUFFER_LEN);
      sprintf( chr_l_buf,
               "The Account is : %s\n",
               p_deal_execdet_struct_h_a->h_dl_client );
      CO_ProcMonitor(   APL_OUT_FILE,
                  chr_l_buf,
                  NULL,
                  p_intl_envdatastruct_h );
      memset(chr_l_buf, NULL, BUFFER_LEN);
      sprintf( chr_l_buf,
               "The Order Refno is : %s\n",
               p_deal_execdet_struct_h_a->h_orderindentity_no );
      CO_ProcMonitor(   APL_OUT_FILE,
                  chr_l_buf,
                  NULL,
                  p_intl_envdatastruct_h );
      memset(chr_l_buf, NULL, BUFFER_LEN);
      sprintf( chr_l_buf,
               "The Execution Qty is : %f\n",
               p_deal_execdet_struct_h_a->h_qty );
      CO_ProcMonitor(   APL_OUT_FILE,
                  chr_l_buf,
                  NULL,
                  p_intl_envdatastruct_h );
   }

	

	if (APL_FAILURE == CO_RtvSysDtTime(	chr_l_now,
															l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	EXEC SQL SELECT cln_name 
	INTO :chr_l_h_brokcode_cname:l_i_brokcode_cname
	FROM MT_CLIENT
	WHERE cln_code = RTRIM(:p_deal_execdet_struct_h_a->h_domcpclt_cd);

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_ACCNOT_FND,
														p_deal_execdet_struct_h_a->h_domcpclt_cd,
														APL_NULL_STRING,
														APL_NULL_STRING);

	EXEC SQL SELECT lcl_identno, LR_DL_CLASS, instr_code, ex_arena
	INTO	:chr_l_h_locrefno_a:l_i_locrefno,
			:chr_l_h_lrtrdtype:l_i_lrtrdtype,
			:chr_l_h_instrcode_A:l_i_instr_code,
			:chr_l_h_exarena:l_i_exarena
	FROM OR_ORDERDETAILS
	WHERE client = RTRIM(:p_deal_execdet_struct_h_a->h_dl_client)
	AND	ORD_REFNO = RTRIM(:p_deal_execdet_struct_h_a->h_orderindentity_no);

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_ORD_NOTFND,
														p_deal_execdet_struct_h_a->h_dl_client,
														p_deal_execdet_struct_h_a->h_orderindentity_no,
														APL_NULL_STRING );
	
	

	EXEC SQL SELECT DISTINCT EXEC_DATE
	INTO	:chr_l_h_execdt:l_i_execdt
	FROM OR_EXECORDER 
	WHERE client = RTRIM(:p_deal_execdet_struct_h_a->h_dl_client)
	AND IDENTIY_NO	= RTRIM(:p_deal_execdet_struct_h_a->h_indentity_no)
	AND ORD_REFNO = RTRIM(:p_deal_execdet_struct_h_a->h_orderindentity_no);

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_ORD_NOTFND,
													  p_deal_execdet_struct_h_a->h_dl_client,
													  p_deal_execdet_struct_h_a->h_indentity_no,
													  p_deal_execdet_struct_h_a->h_orderindentity_no);


	EXEC SQL SELECT currency_cd, location_cd, REG_BR_IND, NEW_CD
	INTO 	:chr_l_h_ccycode:l_i_ccycode,
			:chr_l_h_locncode_a:l_i_locncode,
			:chr_l_h_regbrind:l_i_regbrind,
			:chr_l_h_newcode:l_i_newcode
	FROM MT_INSTRUMENT
	WHERE instr_code = RTRIM(:chr_l_h_instrcode_A);

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_INSTR_NOTFND,
														chr_l_h_instrcode_A,
														APL_NULL_STRING,
														APL_NULL_STRING);

	

	strcpy(l_sys_dl_deal_struct_hg->h_dl_client, p_deal_execdet_struct_h_a->h_dl_client);
	strcpy(l_sys_dl_deal_struct_hg->h_indentity_no, p_deal_execdet_struct_h_a->h_indentity_no);
	strcpy(l_sys_dl_deal_struct_hg->h_dlt, p_deal_execdet_struct_h_a->h_dlt);
	strcpy(l_sys_dl_deal_struct_hg->h_setldt, p_deal_execdet_struct_h_a->h_setldt);
	l_sys_dl_deal_struct_hg->h_pr = p_deal_execdet_struct_h_a->h_pr;
	strcpy(l_sys_dl_deal_struct_hg->h_ex_arena, chr_l_h_exarena);
	l_sys_dl_deal_struct_hg->h_amt = p_deal_execdet_struct_h_a->h_amt;
	l_sys_dl_deal_struct_hg->h_brokercomm = p_deal_execdet_struct_h_a->h_brokercomm;
	l_sys_dl_deal_struct_hg->h_stx_comm = p_deal_execdet_struct_h_a->h_stex_comm;
	l_sys_dl_deal_struct_hg->h_oth_comm = p_deal_execdet_struct_h_a->h_oth_comm;
	l_sys_dl_deal_struct_hg->h_qty = p_deal_execdet_struct_h_a->h_qty;
	strcpy(l_sys_dl_deal_struct_hg->h_domcpclt_cd, p_deal_execdet_struct_h_a->h_domcpclt_cd);
	strcpy(l_sys_dl_deal_struct_hg->h_isspotdl, p_deal_execdet_struct_h_a->h_isspotdl);
	l_sys_dl_deal_struct_hg->h_origquantity = p_deal_execdet_struct_h_a->h_qty;
	l_sys_dl_deal_struct_hg->h_origamount = p_deal_execdet_struct_h_a->h_amt;
	strcpy(l_sys_dl_deal_struct_hg->h_dlfromord, "Y");
	strcpy(l_sys_dl_deal_struct_hg->h_entry, SYSTEM_GEN_DEAL_IND);
	strcpy(l_sys_dl_deal_struct_hg->h_domcp_custodyclt, p_deal_execdet_struct_h_a->h_domcpclt_cd);
	strcpy(l_sys_dl_deal_struct_hg->h_countcltnm, chr_l_h_brokcode_cname);
	strcpy(l_sys_dl_deal_struct_hg->h_fx_reqd, p_deal_execdet_struct_h_a->h_gen_fxadv_ind);
	strcpy(l_sys_dl_deal_struct_hg->h_locindentity_no, chr_l_h_locrefno_a);
	strcpy(l_sys_dl_deal_struct_hg->h_dealcd, p_deal_execdet_struct_h_a->h_dealcd);
	strcpy(l_sys_dl_deal_struct_hg->h_instr_code, chr_l_h_instrcode_A);
	strcpy(l_sys_dl_deal_struct_hg->h_currencycode, chr_l_h_ccycode);
	strcpy(l_sys_dl_deal_struct_hg->h_classofdl, p_deal_execdet_struct_h_a->h_classofdl);
	strcpy(l_sys_dl_deal_struct_hg->h_origindentity_no, p_deal_execdet_struct_h_a->h_orderindentity_no);
	
	strcpy(l_sys_dl_deal_struct_hg->h_newdt, chr_l_h_execdt);
	strcpy(l_sys_dl_deal_struct_hg->h_maker, p_intl_envdatastruct_h->usr);
	strcpy(l_sys_dl_deal_struct_hg->h_maker_dt, chr_l_now);
	
	strcpy(l_sys_dl_deal_struct_hg->h_brkrno,p_deal_execdet_struct_h_a->h_brkrno);
	

	if (!strlen(p_deal_execdet_struct_h_a->h_confdate))
	{
		strcpy(l_sys_dl_deal_struct_hg->h_deal_status, APL_STS_AUTH);
	}
	else
	{
		strcpy(l_sys_dl_deal_struct_hg->h_deal_status, STATUS_CONF);
	}
	strcpy(l_sys_dl_deal_struct_hg->h_access_stamp, chr_l_now);
	if (l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y')
	{
		strcpy(l_sys_dl_deal_struct_hg->h_loccode, p_deal_execdet_struct_h_a->h_loccode);
	}
	if (l_mt_core_sys_params_struct_h.proc_reg_ind[0] == 'Y')
	{
		if (!strcmp(chr_l_h_regbrind, REG_INSTR_IND))
		{
			strcpy(l_sys_dl_deal_struct_hg->h_reginstr_ind, "Y");
		}
		else
		{
			strcpy(l_sys_dl_deal_struct_hg->h_reginstr_ind, "N");
		}
		strcpy(l_sys_dl_deal_struct_hg->h_pos_stat, p_deal_execdet_struct_h_a->h_pos_stat);
		strcpy(l_sys_dl_deal_struct_hg->h_ispymtlocal, p_deal_execdet_struct_h_a->h_ispymtlocal);
	}
	strcpy(l_sys_dl_deal_struct_hg->h_confdate, p_deal_execdet_struct_h_a->h_confdate);
	strcpy(l_sys_dl_deal_struct_hg->h_checker, p_intl_envdatastruct_h->usr);
	strcpy(l_sys_dl_deal_struct_hg->h_checker_dt, chr_l_now);
	if (l_i_newcode == -1)
	{
		strcpy(l_sys_dl_deal_struct_hg->h_instrconv_ind, "N");
	}
	else
	{
		strcpy(l_sys_dl_deal_struct_hg->h_instrconv_ind, "Y");
	}
	strcpy(l_sys_dl_deal_struct_hg->h_lrdltype, chr_l_h_lrtrdtype);

	

	strcpy(l_intl_env_data_h->usr, p_intl_envdatastruct_h->usr);
	strcpy(l_intl_env_data_h->h_mode, APL_FUNC_INPUT);
	strcpy(l_intl_env_data_h->processtion, p_intl_envdatastruct_h->processtion);
	strcpy(l_intl_env_data_h->auth_req, p_intl_envdatastruct_h->auth_req);
	strcpy(l_intl_env_data_h->subprocess, p_intl_envdatastruct_h->subprocess);
	strcpy(l_intl_env_data_h->h_process, p_intl_envdatastruct_h->h_process);

	

   
   
      strcpy(l_sys_dl_deal_struct_hg->h_allow_part_s,"N");
   

	if (APL_FAILURE == DL_Proc_Trd(	l_sys_dl_deal_struct_hg,
												NULL,
												l_intl_env_data_h,
												l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}
   

   if (APL_FAILURE==EI_Mod_MQData(l_sys_dl_deal_struct_hg->h_dl_client,
                                  l_sys_dl_deal_struct_hg->h_indentity_no,
											 NULL,
											 NULL,
											 "B",
                                  l_debug_info_ptr))
            {
             APL_GOBACK_FAIL
            }
	

	
	
	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Leaving Function CR_Rtv_OrdTrd with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);

   RETURN_FAILURE :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Leaving Function CR_Rtv_OrdTrd with errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);

}
