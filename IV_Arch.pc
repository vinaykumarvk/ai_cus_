/*
 *   COPYRIGHT NOTICE
 *
 *   Copyright 2016 Intellect Design Arena Limited. All rights reserved.
 *
 *    These materials are confidential and proprietary to 
 *    Intellect Design Arena Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or 
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Intellect Design Arena Limited.
 */
/*******************************************************************************
 *
 * Module Name         :         Archival
 *
 * File Name           :         IV_Arch.pc
 *
 * Description         :         
 *
 *            Version Control Block
 *
 * Date        Version       Author           Description								 RFS No.
 * ---------   --------   ---------------  -----------------						--------------
 * 19/12/2016   1.0.0.1    Prateek Singh    Re-Initiation of Archival Enhancement	ISKB_2071 (Old IsolveIds 2244 and 2469)
 * ***********************************************************************************************/



#include <IV_Control_A.h>

EXEC SQL INCLUDE sqlca;

#define FILENAME_LEN_A			80

int main(int argc,char **argv) //AIX - Warnings Removal
{
	DEBUG_INFO_STRUCT_H			*l_debug_info_ptr = NULL;
	FILE						*l_ptr_ini_file = NULL;
	FILE						*l_ptr_log_file = NULL;
	INTL_ENV_DATA_STRUCT_H	l_intl_envdatastruct_h;
	char						chr_l_inifile[FILENAME_LEN_A]   = APL_NULL_STRING;
	char						chr_uname[APL_USERID_LEN]   = APL_NULL_STRING;
	char						chr_passwd[APL_PASSWD_LEN]  = APL_NULL_STRING;
	char						chr_custody_id_b[APL_USERID_LEN]  = APL_NULL_STRING;
	int						int_l_flg = 0;
	int						int_retval = 0;
	struct sqlca			sqlca;

	memset(&l_intl_envdatastruct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H));
	
	

	strcpy(l_intl_envdatastruct_h.usr, argv[3]);
	strcpy(l_intl_envdatastruct_h.h_mode, argv[4]);
	strcpy(l_intl_envdatastruct_h.processtion, argv[5]);
	strcpy(l_intl_envdatastruct_h.auth_req, argv[6]);
	strcpy(l_intl_envdatastruct_h.subprocess, argv[7]);
	strcpy(l_intl_envdatastruct_h.h_process, argv[8]);
	
	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

	if ((l_ptr_ini_file = fopen(chr_l_inifile,"r")) == NULL)
		exit(-1);

	APL_FETCH_DB_LOGIN_DETAILS(l_ptr_ini_file,chr_custody_id_b,chr_uname,chr_passwd,APL_OUT_FILE,&l_debug_info_ptr)
	
	
	
	if (CA_DatabaseConnect(chr_uname,chr_passwd,&l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL

	

	
	

	int_retval = CO_Rtv_RptFileName("1P",APL_LOGFILE_DESC,100,argv[5],argv,&l_ptr_log_file,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL
	}

	

	EXEC SQL COMMIT WORK;
	
	if (sqlca.sqlcode != 0)
	{
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL
	}

	CO_ProcMonitor(l_ptr_log_file,"EOM - Billing Archival as on argv[2]\n",NULL,NULL);
	CO_ProcMonitor(l_ptr_log_file,"______________________________________________\n",NULL,NULL);
	
	CO_ProcMonitor(l_ptr_log_file,"Work Committed after chr_logfile creation \n",NULL,&l_intl_envdatastruct_h);

	

	if (CO_RtvSysParams(&l_debug_info_ptr) != APL_SUCCESS)
	{
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);
		
		EXEC SQL ROLLBACK WORK RELEASE;
		
		CO_ProcMonitor(l_ptr_log_file,"Unable to get system parameters - Rollback done \n",NULL,&l_intl_envdatastruct_h);
		
		APL_GOBACK_FAIL	
	}

	
	 
	int_retval = CA_LockRec(argv,l_ptr_log_file,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		EXEC SQL ROLLBACK WORK RELEASE;
		
		CO_ProcMonitor(l_ptr_log_file,"Unable to lock BATCH_IN_PROC record - Rollback done \n",NULL,&l_intl_envdatastruct_h);
		
		APL_GOBACK_FAIL
	}

	

	int_retval = IV_EOMBillArch(argv,l_ptr_log_file,&l_intl_envdatastruct_h,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		int_l_flg = 1;

	   CA_Proc_Final(argv,l_ptr_log_file,&l_debug_info_ptr,int_l_flg);
		
		if (CO_ChkErr(l_debug_info_ptr) == APL_SUCCESS)
		{
			
			CO_ProcMonitor(l_ptr_log_file,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_envdatastruct_h);
			CO_FreeErrLst(&l_debug_info_ptr);

		}

		CO_ProcMonitor(l_ptr_log_file,"FAILURE from Billing Archival program \n",NULL,&l_intl_envdatastruct_h);

		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		APL_GOBACK_FAIL	
	}
	else
	{
		int_l_flg = 0;

		CA_Proc_Final(argv,l_ptr_log_file,&l_debug_info_ptr,int_l_flg);

		if (CO_ChkErr(l_debug_info_ptr) == APL_SUCCESS)
		{
			
			CO_ProcMonitor(l_ptr_log_file,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_envdatastruct_h);
			CO_FreeErrLst(&l_debug_info_ptr);

		}

		CO_ProcMonitor(l_ptr_log_file,"SUCCESS from Billing Archival program \n",NULL,&l_intl_envdatastruct_h);

		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		APL_GOBACK_SUCCESS
	}

	RETURN_SUCCESS	: 
	{
		fclose(l_ptr_ini_file);
	   return(0);
	}

	RETURN_FAILURE	: 
	{
		fclose(l_ptr_ini_file);
  		return(-1);	
	}
}



 
int IV_EOMBillArch(char **argv,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca			sqlca;
	int						int_retval;
	char						chr_l_sys_date[APL_DATE_LEN] = APL_NULL_STRING;
	char						chr_l_archive_dt[APL_DATE_LEN] = APL_NULL_STRING;
	char						chr_l_pymt_archive_dt[APL_DATE_LEN] = APL_NULL_STRING;	/* Bageshri HB_IV_004*/
	char						chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion IV_EOMBillArch \n",NULL,p_intl_env_data_struct_h_d);

	sqlca.sqlcode = 0;

	if (CO_RtvSysDt(chr_l_sys_date,l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL
	
	//EXEC SQL SELECT TO_CHAR(TO_DATE(:chr_l_sys_date,'DD/MM/YYYY HH24:MI:SS') - :l_invoice_systemparam_struct_h.periodfor_arch,'DD/MM/YYYY HH24:MI:SS') INTO :chr_l_archive_dt FROM DUAL;//Commented and re-written by Gouse for ISKB-2469  
	EXEC SQL SELECT TO_CHAR(ADD_MONTHS(TO_DATE(:chr_l_sys_date,'DD/MM/YYYY HH24:MI:SS'),-12) - :l_invoice_systemparam_struct_h.periodfor_arch,'DD/MM/YYYY HH24:MI:SS') INTO :chr_l_archive_dt FROM DUAL;
	IS_ANY_ORA_ERROR

	
	
	CO_ProcMonitor(p_ptr_log_file,"Starting archival for IV_LEDGER",NULL,p_intl_env_data_struct_h_d);

	EXEC SQL INSERT INTO IV_ARCHLEDGER
	SELECT * FROM IV_LEDGER
	WHERE dateof_doc < :chr_l_archive_dt
	AND out_stand_amt = 0;

	IS_ANY_ORA_ERROR

	EXEC SQL DELETE IV_LEDGER
	WHERE dateof_doc < :chr_l_archive_dt
	AND out_stand_amt = 0;

	IS_ANY_ORA_ERROR
			
	sprintf(chr_l_buf,"Moved %d records to Archives",sqlca.sqlerrd[2]);
	CO_ProcMonitor(p_ptr_log_file,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
	
	sprintf(chr_l_buf,"Finished archival for IV_LEDGER");

	EXEC SQL UPDATE SYS_BATCHPROC
	SET stat_det = :chr_l_buf
	WHERE process_name = :argv[0]
	AND   proc_init = :argv[1]
	AND STARTDATE = :argv[2]
	AND status = 'started';
	
	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	

	EXEC SQL COMMIT WORK;
	IS_ANY_ORA_ERROR

	CO_ProcMonitor(p_ptr_log_file,"Finished archival for IV_LEDGER\n",NULL,p_intl_env_data_struct_h_d);

	

	int_retval = CA_LockRec(argv,p_ptr_log_file,l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
		APL_GOBACK_FAIL
	
	
	
	CO_ProcMonitor(p_ptr_log_file,"Starting archival for IV_CHEQUE",NULL,p_intl_env_data_struct_h_d);

	/* Bageshri HB_IV_004 - START */

	IF_COND_EXISTS("IV_ARCH","IV_CHEQUE")
	{
		EXEC SQL SELECT TO_CHAR(ADD_MONTHS(TO_DATE(:chr_l_sys_date,'DD/MM/YYYY HH24:MI:SS'),-3) - :l_invoice_systemparam_struct_h.periodfor_arch,'DD/MM/YYYY HH24:MI:SS') INTO :chr_l_pymt_archive_dt FROM DUAL;

		IS_ANY_ORA_ERROR

			EXEC SQL INSERT INTO IV_ARCHCHEQUE
			SELECT IV_CHEQUE.*,:chr_l_sys_date FROM IV_CHEQUE
			WHERE DATEOF_PAYMENT < :chr_l_pymt_archive_dt
			AND ((AE_DT IS NOT NULL) OR (ADJUST_ENTRY = 'Y'))
			AND   STATUS = 'A';

		IS_ANY_ORA_ERROR

			EXEC SQL DELETE IV_CHEQUE
			WHERE DATEOF_PAYMENT < :chr_l_pymt_archive_dt
			AND ((AE_DT IS NOT NULL) OR (ADJUST_ENTRY = 'Y'))
			AND   STATUS = 'A';

		IS_ANY_ORA_ERROR

			CO_ProcMonitor(p_ptr_log_file,"Archival of IV_CHEQUE having at least 3 months old payment date - Bank Specific",NULL,p_intl_env_data_struct_h_d);

	}
	else
	{
		/* Bageshri HB_IV_004 - END */

		EXEC SQL INSERT INTO IV_ARCHCHEQUE
			SELECT IV_CHEQUE.*,:chr_l_sys_date FROM IV_CHEQUE
			WHERE DATEOF_PAYMENT < :chr_l_archive_dt
			AND ((AE_DT IS NOT NULL) OR (ADJUST_ENTRY = 'Y'))
			AND   STATUS = 'A';

		IS_ANY_ORA_ERROR

			EXEC SQL DELETE IV_CHEQUE
			WHERE DATEOF_PAYMENT < :chr_l_archive_dt
			AND ((AE_DT IS NOT NULL) OR (ADJUST_ENTRY = 'Y'))
			AND   STATUS = 'A';

		IS_ANY_ORA_ERROR
	}
			
	sprintf(chr_l_buf,"Moved %d records to Archives",sqlca.sqlerrd[2]);
	CO_ProcMonitor(p_ptr_log_file,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
	
	sprintf(chr_l_buf,"Finished archival for IV_CHEQUE");

	EXEC SQL UPDATE SYS_BATCHPROC
	SET stat_det = :chr_l_buf
	WHERE process_name = :argv[0]
	AND   proc_init = :argv[1]
	AND STARTDATE = :argv[2]
	AND status = 'started';
	
	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	

	EXEC SQL COMMIT WORK;
	IS_ANY_ORA_ERROR

	CO_ProcMonitor(p_ptr_log_file,"Finished archival for IV_CHEQUE\n",NULL,p_intl_env_data_struct_h_d);

	

	int_retval = CA_LockRec(argv,p_ptr_log_file,l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
		APL_GOBACK_FAIL
	
	
	
	CO_ProcMonitor(p_ptr_log_file,"Starting archival for IV_SERV_OTH",NULL,p_intl_env_data_struct_h_d);

	EXEC SQL INSERT INTO IV_ARCHEXTRASERVICE
	SELECT IV_SERV_OTH.*,:chr_l_sys_date FROM IV_SERV_OTH
	WHERE b_upto_date < :chr_l_archive_dt
	AND   service_stat = 'A';

	IS_ANY_ORA_ERROR

	EXEC SQL DELETE IV_SERV_OTH
	WHERE b_upto_date < :chr_l_archive_dt
	AND   service_stat = 'A';

	IS_ANY_ORA_ERROR
			
	sprintf(chr_l_buf,"Moved %d records to Archives",sqlca.sqlerrd[2]);
	CO_ProcMonitor(p_ptr_log_file,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
	
	sprintf(chr_l_buf,"Finished archival for IV_SERV_OTH");

	EXEC SQL UPDATE SYS_BATCHPROC
	SET stat_det = :chr_l_buf
	WHERE process_name = :argv[0]
	AND   proc_init = :argv[1]
	AND STARTDATE = :argv[2]
	AND status = 'started';
	
	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	

	EXEC SQL COMMIT WORK;
	IS_ANY_ORA_ERROR

	CO_ProcMonitor(p_ptr_log_file,"Finished archival for IV_SERV_OTH\n",NULL,p_intl_env_data_struct_h_d);

	

	int_retval = CA_LockRec(argv,p_ptr_log_file,l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
		APL_GOBACK_FAIL
	
	
	
	CO_ProcMonitor(p_ptr_log_file,"Starting archival for IV_SERVICE_CHRG",NULL,p_intl_env_data_struct_h_d);

	EXEC SQL INSERT INTO IV_ARCHSERVICECHG
	SELECT * FROM IV_SERVICE_CHRG
	WHERE dateof_billing < :chr_l_archive_dt;

	IS_ANY_ORA_ERROR

	EXEC SQL DELETE IV_SERVICE_CHRG
	WHERE dateof_billing < :chr_l_archive_dt;

	IS_ANY_ORA_ERROR
			
	sprintf(chr_l_buf,"Moved %d records to Archives",sqlca.sqlerrd[2]);
	CO_ProcMonitor(p_ptr_log_file,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
	
	sprintf(chr_l_buf,"Finished archival for IV_SERVICE_CHRG");

	EXEC SQL UPDATE SYS_BATCHPROC
	SET stat_det = :chr_l_buf
	WHERE process_name = :argv[0]
	AND   proc_init = :argv[1]
	AND STARTDATE = :argv[2]
	AND status = 'started';
	
	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	

	EXEC SQL COMMIT WORK;
	IS_ANY_ORA_ERROR

	CO_ProcMonitor(p_ptr_log_file,"Finished archival for IV_SERVICE_CHRG\n",NULL,p_intl_env_data_struct_h_d);

	

	int_retval = CA_LockRec(argv,p_ptr_log_file,l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
		APL_GOBACK_FAIL
	
	
	
	CO_ProcMonitor(p_ptr_log_file,"Starting archival for IV_DEAL",NULL,p_intl_env_data_struct_h_d);

	EXEC SQL INSERT INTO IV_ARCHTRANSACTION
	SELECT * FROM IV_DEAL
	WHERE dateof_billing < :chr_l_archive_dt;

	IS_ANY_ORA_ERROR

	EXEC SQL DELETE IV_DEAL
	WHERE dateof_billing < :chr_l_archive_dt;

	IS_ANY_ORA_ERROR

	sprintf(chr_l_buf,"Moved %d records to Archives",sqlca.sqlerrd[2]);
	CO_ProcMonitor(p_ptr_log_file,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
	
	sprintf(chr_l_buf,"Finished archival for IV_DEAL");

	EXEC SQL UPDATE SYS_BATCHPROC
	SET stat_det = :chr_l_buf
	WHERE process_name = :argv[0]
	AND   proc_init = :argv[1]
	AND STARTDATE = :argv[2]
	AND status = 'started';
	
	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	

	EXEC SQL COMMIT WORK;
	IS_ANY_ORA_ERROR

	
	CO_ProcMonitor(p_ptr_log_file,"Starting archival for IV_DEAL_FEE",NULL,p_intl_env_data_struct_h_d);

	EXEC SQL INSERT INTO IV_DEAL_FEE_ARCH
	SELECT * FROM IV_DEAL_FEE
	WHERE dateof_billing < :chr_l_archive_dt;

	IS_ANY_ORA_ERROR

	EXEC SQL DELETE IV_DEAL_FEE
	WHERE dateof_billing < :chr_l_archive_dt;

	IS_ANY_ORA_ERROR

	sprintf(chr_l_buf,"Moved %d records to Archives",sqlca.sqlerrd[2]);
	CO_ProcMonitor(p_ptr_log_file,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
	
	sprintf(chr_l_buf,"Finished archival for IV_DEAL_FEE");

	EXEC SQL UPDATE SYS_BATCHPROC
	SET stat_det = :chr_l_buf
	WHERE process_name = :argv[0]
	AND   proc_init = :argv[1]
	AND STARTDATE = :argv[2]
	AND status = 'started';
	
	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	

	EXEC SQL COMMIT WORK;
	IS_ANY_ORA_ERROR
	


	/* EXEC SQL DELETE IV_DEAL_FEE
	WHERE dateof_billing < :chr_l_archive_dt; 

	EXEC SQL COMMIT WORK;
	IS_ANY_ORA_ERROR */
	
	CO_ProcMonitor(p_ptr_log_file,"Finished archival for IV_DEAL\n",NULL,p_intl_env_data_struct_h_d);

	

	int_retval = CA_LockRec(argv,p_ptr_log_file,l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
		APL_GOBACK_FAIL
	
	
	
	CO_ProcMonitor(p_ptr_log_file,"Starting archival for IV_EXCHANGERATE",NULL,p_intl_env_data_struct_h_d);

	EXEC SQL INSERT INTO IV_ARCHEXCHANGERATE
	SELECT * FROM IV_EXCHANGERATE
	WHERE dateof_billing < :chr_l_archive_dt;

	IS_ANY_ORA_ERROR

	EXEC SQL DELETE IV_EXCHANGERATE
	WHERE dateof_billing < :chr_l_archive_dt;

	IS_ANY_ORA_ERROR
			
	sprintf(chr_l_buf,"Moved %d records to Archives",sqlca.sqlerrd[2]);
	CO_ProcMonitor(p_ptr_log_file,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
	
	sprintf(chr_l_buf,"Finished archival for IV_EXCHANGERATE");

	EXEC SQL UPDATE SYS_BATCHPROC
	SET stat_det = :chr_l_buf
	WHERE process_name = :argv[0]
	AND   proc_init = :argv[1]
	AND STARTDATE = :argv[2]
	AND status = 'started';
	
	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	

	EXEC SQL COMMIT WORK;
	IS_ANY_ORA_ERROR

	CO_ProcMonitor(p_ptr_log_file,"Finished archival for IV_EXCHANGERATE\n",NULL,p_intl_env_data_struct_h_d);

	

	int_retval = CA_LockRec(argv,p_ptr_log_file,l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
		APL_GOBACK_FAIL
	
	
	
	CO_ProcMonitor(p_ptr_log_file,"Starting archival for IV_CLIENTHOLDING",NULL,p_intl_env_data_struct_h_d);

	EXEC SQL INSERT INTO IV_ARCHCLIENTHOLDING
	SELECT * FROM IV_CLIENTHOLDING
	WHERE dateof_billing < :chr_l_archive_dt;

	IS_ANY_ORA_ERROR

	EXEC SQL DELETE IV_CLIENTHOLDING
	WHERE dateof_billing < :chr_l_archive_dt;

	IS_ANY_ORA_ERROR
			
	sprintf(chr_l_buf,"Moved %d records to Archives",sqlca.sqlerrd[2]);
	CO_ProcMonitor(p_ptr_log_file,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
	
	sprintf(chr_l_buf,"Finished archival for IV_CLIENTHOLDING");

	EXEC SQL UPDATE SYS_BATCHPROC
	SET stat_det = :chr_l_buf
	WHERE process_name = :argv[0]
	AND   proc_init = :argv[1]
	AND STARTDATE = :argv[2]
	AND status = 'started';
	
	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	

	EXEC SQL COMMIT WORK;
	IS_ANY_ORA_ERROR

	CO_ProcMonitor(p_ptr_log_file,"Finished archival for IV_CLIENTHOLDING\n",NULL,p_intl_env_data_struct_h_d);

	

	int_retval = CA_LockRec(argv,p_ptr_log_file,l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
		APL_GOBACK_FAIL
	
	
   

   CO_ProcMonitor(p_ptr_log_file,"Starting archival for IV_OUTSTANDINGAMT",NULL,p_intl_env_data_struct_h_d);

   EXEC SQL INSERT INTO IV_ARCHOUTSTANDINGAMT
   SELECT * FROM IV_OUTSTANDINGAMT
   WHERE dateof_billing < :chr_l_archive_dt;

   IS_ANY_ORA_ERROR

   EXEC SQL DELETE IV_OUTSTANDINGAMT
   WHERE dateof_billing < :chr_l_archive_dt;

   IS_ANY_ORA_ERROR

   sprintf(chr_l_buf,"Moved %d records to Archives",sqlca.sqlerrd[2]);
   CO_ProcMonitor(p_ptr_log_file,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

   sprintf(chr_l_buf,"Finished archival for IV_OUTSTANDINGAMT");

   EXEC SQL UPDATE SYS_BATCHPROC
   SET stat_det = :chr_l_buf
   WHERE process_name = :argv[0]
   AND   proc_init = :argv[1]
   AND STARTDATE = :argv[2]
   AND status = 'started';

   IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

   

   EXEC SQL COMMIT WORK;
   IS_ANY_ORA_ERROR

   CO_ProcMonitor(p_ptr_log_file,"Finished archival for IV_OUTSTANDINGAMT\n",NULL,p_intl_env_data_struct_h_d);

   

   int_retval = CA_LockRec(argv,p_ptr_log_file,l_debug_info_ptr);

   if (int_retval != APL_SUCCESS)
      APL_GOBACK_FAIL

	





   CO_ProcMonitor(p_ptr_log_file,"Starting archival for IV_BILL",NULL,p_intl_env_data_struct_h_d);

   EXEC SQL INSERT INTO IV_ARCHBILL
   SELECT * FROM IV_BILL
   WHERE dateof_billing < :chr_l_archive_dt;

   IS_ANY_ORA_ERROR

   EXEC SQL DELETE IV_BILL
   WHERE dateof_billing < :chr_l_archive_dt;

   IS_ANY_ORA_ERROR

   sprintf(chr_l_buf,"Moved %d records to Archives",sqlca.sqlerrd[2]);
   CO_ProcMonitor(p_ptr_log_file,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

   sprintf(chr_l_buf,"Finished archival for IV_BILL");

	/* Added by Gouse for ISKB_2469 - Archival for IVDLYSAFEK - Start */

	EXEC SQL INSERT INTO IVARCHDLYSAFEK
				SELECT * FROM IVDLYSAFEK
							WHERE BILL_DT < :chr_l_archive_dt;

	IS_ANY_ORA_ERROR;

	EXEC SQL DELETE IVDLYSAFEK
				WHERE BILL_DT < :chr_l_archive_dt;

	IS_ANY_ORA_ERROR;

	sprintf(chr_l_buf,"Moved %d records to Archives",sqlca.sqlerrd[2]);
	CO_ProcMonitor(p_ptr_log_file,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
	sprintf(chr_l_buf,"Finished archival for IVDLYSAFEK");

	/* Added by Gouse for ISKB_2469 - Archival for IVDLYSAFEK - End */

   EXEC SQL UPDATE SYS_BATCHPROC
   SET stat_det = :chr_l_buf
   WHERE process_name = :argv[0]
   AND   proc_init = :argv[1]
   AND STARTDATE = :argv[2]
   AND status = 'started';

   IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

   

   EXEC SQL COMMIT WORK;
   IS_ANY_ORA_ERROR
CO_ProcMonitor(p_ptr_log_file,"Finished archival for IV_BILL\n",NULL,p_intl_env_data_struct_h_d);

   

   int_retval = CA_LockRec(argv,p_ptr_log_file,l_debug_info_ptr);

   if (int_retval != APL_SUCCESS)
      APL_GOBACK_FAIL



	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion IV_EOMBillArch successfully \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion IV_EOMBillArch with failure \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_FAILURE);
	}
}


 
int CA_LockRec(char **argv,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
short                 g_restart_data_i;

	struct sqlca					sqlca;

	EXEC SQL VAR chr_g_restart_data is string;
	sqlca.sqlcode = 0;
		
	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CA_LockRec\n",NULL,NULL);

	EXEC SQL SELECT processing_status INTO :chr_g_restart_data:g_restart_data_i
	FROM SYS_BATCHPROC
	WHERE process_name = :argv[0]
	AND   proc_init = :argv[1]
	AND STARTDATE = :argv[2]
	AND status = 'started'
	FOR UPDATE OF processing_status,status;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CA_LockRec successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CA_LockRec with failure \n",NULL,NULL);

		return(APL_FAILURE);
	}
}


 
int CA_Proc_Final(char **argv,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr,int p_flg)
{
	struct sqlca					sqlca;
	char								chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;

	sqlca.sqlcode = 0;
		
	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CA_Proc_Final\n",NULL,NULL);
	if (p_flg == 0)
	{
		

		if (CO_ChkErr(*l_debug_info_ptr) != APL_SUCCESS)
		{
			memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
			sprintf(chr_l_buf,"Finished EOM Billing Archival");

			EXEC SQL UPDATE SYS_BATCHPROC
			SET stat_det = :chr_l_buf,
				 status = 'completed'
			WHERE process_name = :argv[0]
			AND   proc_init = :argv[1]
			AND STARTDATE = :argv[2]
			AND status = 'started';
	
			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

		}

		EXEC SQL COMMIT WORK RELEASE;

		CO_ProcMonitor(p_ptr_log_file,"Work Committed \n",NULL,NULL);
	}
	else if (p_flg == 1)
	{
		EXEC SQL ROLLBACK WORK RELEASE;

		CO_ProcMonitor(p_ptr_log_file,"Rollback done \n",NULL,NULL);
	}

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CA_Proc_Final successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CA_Proc_Final with failure \n",NULL,NULL);

		return(APL_FAILURE);
	}
}


 
int CA_DatabaseConnect(char *p_username,char *p_passwd,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca					sqlca;

	sqlca.sqlcode = 0;
		
	CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CA_DatabaseConnect\n",NULL,NULL);
	
	EXEC SQL CONNECT :p_username IDENTIFIED BY :p_passwd;

	if (sqlca.sqlcode != 0)
		APL_GOBACK_FAIL

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(APL_OUT_FILE, "Leaving processtion CA_DatabaseConnect successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(APL_OUT_FILE, "Leaving processtion CA_DatabaseConnect with failure \n",NULL,NULL);

		return(APL_FAILURE);
	}
}
