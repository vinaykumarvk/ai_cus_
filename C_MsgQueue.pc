













 

EXEC SQL INCLUDE SQLCA;



#include "MS_Mq.h"
#include "Intellect_Common.h"
#include "Intellect_Interface.h"
#include "Intellect_Error.h"
#include <sys/wait.h> 

main(int argc,char **argv)
{



EXEC SQL BEGIN DECLARE SECTION;
char            chr_h_restart_data[50];
char            h_ora_rowid[APL_ROWID_LEN];
EXEC SQL VAR chr_h_restart_data IS STRING;
EXEC SQL VAR h_ora_rowid IS STRING;
short   i_ora_rowid=0,i_restart=0;

EXEC SQL END DECLARE SECTION;

struct sqlca sqlca;
int	count = 0;
FILE *chr_finifile,*l_errfile,*l_logfile;
char chr_inifile[PATH_LENGTH],chr_l_uname[APL_USERID_LEN],chr_l_passwd[APL_PASSWD_LEN],chr_custody_id_b[APL_USERID_LEN],chr_buffer[KEY_LENGTH];
DEBUG_INFO_STRUCT_H *l_debuginfo = (DEBUG_INFO_STRUCT_H *)NULL;
DEBUG_INFO_STRUCT_H **l_debug_info_ptr = NULL;
INTL_ENV_DATA_STRUCT_H p_intl_envdatastruct_h;
int int_p_funcreturnstate = 0;
char *a;
char **chr_l_param;
char chr_l_sys_date_time[APL_DATE_LEN] = {APL_NULL_STRING};
char chr_l_statinfo[61] = {APL_NULL_STRING};
memset(chr_inifile,APL_NULL_CHAR,PATH_LENGTH);
memset(chr_buffer,APL_NULL_CHAR,KEY_LENGTH);
memset(chr_l_uname,APL_NULL_CHAR,APL_USERID_LEN);
memset(chr_l_passwd,APL_NULL_CHAR,APL_PASSWD_LEN);

strcpy(p_intl_envdatastruct_h.usr,"SYSTEM");
strcpy(p_intl_envdatastruct_h.h_mode,APL_NULL_STRING);
strcpy(p_intl_envdatastruct_h.processtion,"MESSAGE QUEUE DAEMON");
strcpy(p_intl_envdatastruct_h.auth_req,APL_NULL_STRING);
strcpy(p_intl_envdatastruct_h.subprocess,APL_NULL_STRING);
strcpy(p_intl_envdatastruct_h.h_process,APL_NULL_STRING);


strcpy(chr_inifile,getenv("INTL_ROOT_PATH"));
strcat(chr_inifile,"/intl_sun.cfg");
if ( (chr_finifile = fopen(chr_inifile,"r") ) == NULL)
        APL_GOBACK_FAIL;

APL_FETCH_DB_LOGIN_DETAILS(chr_finifile, chr_custody_id_b, chr_l_uname, chr_l_passwd , APL_OUT_FILE , &l_debuginfo)   
  
  EXEC SQL CONNECT :chr_l_uname IDENTIFIED BY :chr_l_passwd;
	
	if(sqlca.sqlcode < 0)
   {
     ltoa_r(sqlca.sqlcode,chr_buffer,KEY_LENGTH-1);
     CO_InsertErr(&l_debuginfo,
			DB_ERR_NO,
			chr_buffer,
         APL_NULL_STRING,
			APL_NULL_STRING,
       	__LINE__,	
			__FILE__);
     APL_GOBACK_FAIL

   }

	
	if (argc ==1 )
	{
		  if (APL_FAILURE == CO_Rtv_RptFileName("3k", APL_LOGFILE_DESC, 100, 
							"MESSAGE QUEUE DAEMON",NULL, &l_errfile, &l_debuginfo) )
					 {
								exit(-1);
					 }

		if (APL_FAILURE == CO_Rtv_RptFileName("3l", APL_LOGFILE_DESC, 100,
                     "MESSAGE QUEUE DAEMON",NULL, &l_logfile, &l_debuginfo) )
                {
                        exit(-1);
                }

			
  }
  else
  {
		  if (APL_FAILURE == CO_Rtv_RptFileName("3k", APL_LOGFILE_DESC, 100, 
												argv[5] ,argv, &l_errfile, &l_debuginfo) )
					 {
								exit(-1);
					 }

		if (APL_FAILURE == CO_Rtv_RptFileName("3l", APL_LOGFILE_DESC, 100,
                     "MESSAGE QUEUE DAEMON",NULL, &l_logfile, &l_debuginfo) )
                {
                        exit(-1);
                }


	}
        EXEC SQL COMMIT WORK;
   if(sqlca.sqlcode < 0)
   {
     ltoa_r(sqlca.sqlcode,chr_buffer,KEY_LENGTH-1);
     CO_InsertErr(&l_debuginfo,
							DB_ERR_NO,
							chr_buffer,
                 		APL_NULL_STRING,
							APL_NULL_STRING,
                 		__LINE__,
							__FILE__);
     APL_GOBACK_FAIL

   }
       if(argc != 1)
       {
               EXEC SQL SELECT PROCESSING_STATUS , ROWID
                                INTO :chr_h_restart_data:i_restart, :h_ora_rowid:i_ora_rowid
                                FROM SYS_BATCHPROC
                                WHERE ( PROCESS_NAME = :argv[0]
                                AND PROC_INIT = :argv[1]
                                AND STARTDATE = :argv[2]
                                AND STATUS = 'started' )
                                FOR UPDATE OF PROCESSING_STATUS,STATUS;


               if (sqlca.sqlcode <0)
               {
                    fprintf(l_errfile,"Batch In Proc Table cannot be locked");
                    APL_GOBACK_FAIL
               }
          }
          else
          {
               if(APL_SUCCESS ==  EI_Proc_BatchRestart(argv[0],
                                                  argv[0],
                                                  APL_NULL_STRING,
                                                  &int_p_funcreturnstate,
                                                  &l_debuginfo,
                                                  p_intl_envdatastruct_h)) 
                {
                      if(int_p_funcreturnstate == 11 || int_p_funcreturnstate == 10)
                      {
                                EXEC SQL SELECT PROCESSING_STATUS , ROWID
                                INTO :chr_h_restart_data:i_restart, :h_ora_rowid:i_ora_rowid
                                FROM SYS_BATCHPROC
                                WHERE ( PROCESS_NAME = :argv[0]
                                AND STATUS = 'started' )
                                FOR UPDATE OF PROCESSING_STATUS,STATUS;


                                if (sqlca.sqlcode <0)
                                {
                                   fprintf(l_errfile,"Batch In Proc Table cannot be locked");
                                    APL_GOBACK_FAIL
                                 }
                       }
		       else
		       {
			 APL_GOBACK_FAIL
		       }

                }
                else
                {
                        fprintf(l_errfile,"Batch In Proc Table cannot be locked");
                        APL_GOBACK_FAIL
                }
       }
  while(1)
  {

	if( argc == 1)
	{
			  EXEC SQL SELECT PROCESSING_STATUS , ROWID
						  INTO :chr_h_restart_data:i_restart, :h_ora_rowid:i_ora_rowid

						  FROM SYS_BATCHPROC
						  WHERE ( PROCESS_NAME = :argv[0]
									 AND STATUS = 'started' )
									 FOR UPDATE OF PROCESSING_STATUS,STATUS;

	            

				 if( APL_FAILURE == CO_RtvSysDtTime(chr_l_sys_date_time, l_debug_info_ptr))
							APL_GOBACK_FAIL;
	   	    memset(chr_l_statinfo,APL_NULL_CHAR,61);
				 strcpy(chr_l_statinfo, "sleeping : ");
	   	    strcat(chr_l_statinfo, chr_l_sys_date_time);

    EXEC SQL UPDATE SYS_BATCHPROC
                                SET STAT_DET           = :chr_l_statinfo
                                WHERE   ROWID           = :h_ora_rowid;

					IS_ANY_ORA_ERROR
	}
	else
	{
               EXEC SQL SELECT PROCESSING_STATUS , ROWID
                                INTO :chr_h_restart_data:i_restart, :h_ora_rowid:i_ora_rowid
                                FROM SYS_BATCHPROC
                                WHERE ( PROCESS_NAME = :argv[0]
                                AND PROC_INIT = :argv[1]
                                AND STARTDATE = :argv[2]
                                AND STATUS = 'started' )
                                FOR UPDATE OF PROCESSING_STATUS,STATUS;

	}

    if (sqlca.sqlcode <0)
    {
        fprintf(l_errfile,"Batch In Proc Table cannot be locked");
        APL_GOBACK_FAIL
    }
     

     if(APL_FAILURE == EI_MQ_Main(&count,h_ora_rowid,chr_finifile,l_errfile,l_logfile,&l_debuginfo))
	  {
			fprintf(l_errfile,"SERIOUS ERROR OCCURRED DAEMON STOPPED\n");
			APL_GOBACK_FAIL;
	  }

	

     if (argc != 1)
         break;
     printf("sleeping");

     sleep(5);

  }
    EXEC SQL UPDATE SYS_BATCHPROC
                                SET STATUS              ='completed'
                                WHERE   ROWID           = :h_ora_rowid;

        IS_ANY_ORA_ERROR

        if (sqlca.sqlcode == 1403)
   {
      fprintf(l_errfile,"Failed to Update batch_in_proc because row_id could not be int_found \n");
      APL_GOBACK_FAIL
   }
   APL_GOBACK_SUCCESS;

RETURN_SUCCESS:

   EXEC SQL COMMIT ;
        CO_ProcMonitor(APL_OUT_FILE,"Exiting successfully  out of Message Queue main processtion\n",NULL,NULL);
        fclose(chr_finifile);
        fclose(l_errfile);
	fclose(l_logfile);
        exit(0);

RETURN_FAILURE:
   EXEC SQL ROLLBACK;
        CO_ProcMonitor(APL_OUT_FILE,"Exiting unsuccesfully out of Message Queue main processtion \n",NULL,NULL);
        fclose(chr_finifile);
        fclose(l_errfile);
	fclose(l_logfile);
        exit(-1);
}
