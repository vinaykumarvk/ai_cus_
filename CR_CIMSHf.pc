







#include "CR_Common.h"
#include "CO_HostStructdef.h"
#include "Intellect_Common.h"
#include "IV_Control_A.h"
#include <string.h>
#include "stdio_64.h"
#include <stdlib.h>
#include <math.h>
#define APL_MAXLINE_SIZE 350
EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLCA;
EXEC SQL INCLUDE SQLDA;

int main(int argc,char **argv) // AIX - Warnings removal
{
   DEBUG_INFO_STRUCT_H **l_debug_info_ptr=NULL ;
	FILE *l_finifile;
	struct sqlca sqlca;

	int i=0;
	FILE *fp = NULL;
	FILE *fp_instrument = NULL;
	FILE *fp_account = NULL;
	FILE *fp_safek = NULL;

   int int_l_retval=0;
	SYS_BATCHPROC_STRUCT_H l_sys_batchproc_struct_h;
	char chr_h_batch_in_proc_rowid[APL_ROWID_LEN];
   char chr_uname[APL_USERID_LEN] 	= APL_NULL_STRING;
   char chr_passwd[APL_PASSWD_LEN] 	= APL_NULL_STRING;
   char chr_custody_id_b[APL_USERID_LEN] 	= APL_NULL_STRING;
	char chr_l_logdir[PATH_LENGTH] 	= APL_NULL_STRING;
	char chr_l_logname[PATH_LENGTH] 	= APL_NULL_STRING;
	char chr_l_inifile[PATH_LENGTH] 	= APL_NULL_STRING;
	char chr_path[PATH_LENGTH] = APL_NULL_STRING;
	char chr_path_bak[PATH_LENGTH] = APL_NULL_STRING;
	FILE *fp_UserLog = (FILE *)NULL;
	short int int_i_batch_in_proc_rowid = 0;
	SYS_BATCHPROC_STRUCT_I l_sys_batchproc_struct_i = {0, 0, 0, 0, 0, 0};
	INTL_ENV_DATA_STRUCT_H l_intl_env_data_h;

	char chr_l_h_field1[300] = APL_NULL_STRING;
	char chr_l_h_field2[300] = APL_NULL_STRING;
	char chr_l_h_field3[300] = APL_NULL_STRING;
	char chr_l_h_field4[300] = APL_NULL_STRING;
	char     chr_l_f_buf[APL_MAXLINE_SIZE]              = APL_NULL_STRING;
	INTL_REPT_STRUCT_H           *l_intl_rept_struct_ha  =NULL;
	PRO_GSEQNUM_STRUCT_H      l_progseqnum_struct_h;
	char chr_l_h_filename[APL_REPNAME_LENGTH] = APL_NULL_STRING;

	short l_i_field1 = 0;
	short l_i_field2 = 0;
	short l_i_field3 = 0;
	short l_i_field4 = 0;

   EXEC SQL VAR chr_uname IS STRING;
   EXEC SQL VAR chr_passwd IS STRING;
	
	EXEC SQL VAR l_sys_batchproc_struct_h.process_name IS STRING;
	EXEC SQL VAR l_sys_batchproc_struct_h.start_dt IS STRING; /*Veda -- 10GM */
	EXEC SQL VAR l_sys_batchproc_struct_h.proc_init IS STRING;
	EXEC SQL VAR l_sys_batchproc_struct_h.status_ind IS STRING;
	EXEC SQL VAR l_sys_batchproc_struct_h.usr IS STRING;

   EXEC SQL VAR chr_l_h_field1 IS STRING;
   EXEC SQL VAR chr_l_h_field2 IS STRING;
   EXEC SQL VAR chr_l_h_field3 IS STRING;
   EXEC SQL VAR chr_l_h_field4 IS STRING;

	memset(l_sys_batchproc_struct_h.process_name, APL_NULL_CHAR, 41);
	memset(l_sys_batchproc_struct_h.proc_init, APL_NULL_CHAR, 41);
	memset(l_sys_batchproc_struct_h.status_ind, APL_NULL_CHAR, 11);
	memset(l_sys_batchproc_struct_h.start_dt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_sys_batchproc_struct_h.usr, APL_NULL_CHAR, APL_USERID_LEN);

   l_intl_rept_struct_ha   =(INTL_REPT_STRUCT_H *)calloc(1, sizeof(INTL_REPT_STRUCT_H));
   APL_MALLOC_FAIL(l_intl_rept_struct_ha);

	
	strcpy(l_sys_batchproc_struct_h.process_name,argv[0]);
	strcpy(l_sys_batchproc_struct_h.proc_init,argv[1]);
	strcpy(l_sys_batchproc_struct_h.start_dt,argv[2]);
	strcpy(l_sys_batchproc_struct_h.status_ind, "started");
	strcpy(l_sys_batchproc_struct_h.usr, argv[3]);
	strcpy(l_intl_env_data_h.usr,argv[3]);
	strcpy(l_intl_env_data_h.processtion,argv[5]);
	
	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

	if ( ( l_finifile=fopen(chr_l_inifile,"r") ) == NULL)
	{
		printf("\nNot able to open the intl_sun.cfg h_file\n");
		exit(-1);
	}
  	APL_FETCH_DB_LOGIN_DETAILS(l_finifile, chr_custody_id_b, chr_uname, chr_passwd ,APL_OUT_FILE,l_debug_info_ptr)
   EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;
   IS_ANY_ORA_ERROR

	EXEC SQL SELECT ROWID, PROCESS_NAME, STARTDATE, STATUS,
				PROC_INIT, PROCESSING_STATUS, USR, EOD_BOD_IND, STAT_DET
			 INTO :chr_h_batch_in_proc_rowid:int_i_batch_in_proc_rowid,
				 :l_sys_batchproc_struct_h INDICATOR :l_sys_batchproc_struct_i
			 FROM SYS_BATCHPROC
			WHERE ((PROCESS_NAME = :l_sys_batchproc_struct_h.process_name) AND
					(STARTDATE = :l_sys_batchproc_struct_h.start_dt) AND /*Veda -- 10GM */
					(STATUS = :l_sys_batchproc_struct_h.status_ind)) AND
					(PROC_INIT = :l_sys_batchproc_struct_h.proc_init)
			 FOR UPDATE OF PROCESSING_STATUS;

   IS_ANY_ORA_ERROR

	
	if(CO_ReadToken(l_finifile,"INTL_HF_PATH",chr_path,l_debug_info_ptr) == APL_FAILURE)
	{
		CO_InsertErr(l_debug_info_ptr,ERR_FILE_NOTFND, APL_NULL_STRING,
															APL_NULL_STRING,
															APL_NULL_STRING, __LINE__, __FILE__);
		APL_GOBACK_FAIL;
	}

   memset(&l_progseqnum_struct_h, NULL, sizeof(PRO_GSEQNUM_STRUCT_H));
   strcpy(l_progseqnum_struct_h.sequencename, "CIMSHOFF");
   strcpy(l_progseqnum_struct_h.seq_attrb_a, APL_NULL_STRING);
   strcpy(l_progseqnum_struct_h.seq_attrb_b, APL_NULL_STRING);
   strcpy(l_progseqnum_struct_h.seq_attrb_c, APL_NULL_STRING);
   l_progseqnum_struct_h.seq_stepby = 1;
   l_progseqnum_struct_h.seq_start = 0;
   l_progseqnum_struct_h.last_seqnum = 99999;
   l_progseqnum_struct_h.recycle_ind=RECYCLE_YES;

   int_l_retval = CO_RtvNxtSeqNum(&l_progseqnum_struct_h, l_debug_info_ptr);
   if (int_l_retval == APL_FAILURE) APL_GOBACK_FAIL

	printf("\n The chr_path name is : %s\n",chr_path); 
	strcpy(chr_path_bak,chr_path);

	if ( APL_FAILURE == CO_Rtv_RptFileName("3p", APL_LOGFILE_DESC, 100,
												argv[5], argv, &fp_UserLog,
												 l_debug_info_ptr) )
	 {
			 printf("Could not open User Log h_file.\n");
			 APL_GOBACK_FAIL
	 }

   memset(chr_l_f_buf, NULL, APL_MAXLINE_SIZE);
   sprintf(chr_l_f_buf, "The handoff h_file chr_path is : %s", chr_path);
   CO_ProcMonitor(fp_UserLog,chr_l_f_buf,NULL,NULL);

	EXEC SQL COMMIT;
	IS_ANY_ORA_ERROR

	
	if (fclose(l_finifile)) 
	{
		exit(-1);
	}

	
	if (APL_FAILURE == CO_RtvSysParams(l_debug_info_ptr))
		{
			CO_ProcMonitor(fp_UserLog, "Could not get system params", l_debug_info_ptr, NULL);
			APL_GOBACK_FAIL
		}

	EXEC SQL DECLARE account_cursor CURSOR FOR
	SELECT * FROM CIMS_ACC_VEW;
	
	if (sqlca.sqlcode != 0)
	{
			memset(chr_l_f_buf, NULL, APL_MAXLINE_SIZE);
			sprintf(chr_l_f_buf, "sqlca.sqlcode is |%d|", sqlca.sqlcode);
			CO_ProcMonitor(fp_UserLog,chr_l_f_buf,NULL,NULL);
			APL_GOBACK_FAIL
	}

	IS_ANY_ORA_ERROR;

	EXEC SQL DECLARE instrument_cursor CURSOR FOR
	SELECT * FROM DW_MTINSTRUMENT_VEW;
	
	IS_ANY_ORA_ERROR;

	EXEC SQL DECLARE safek_cursor CURSOR FOR
	SELECT * FROM DW_DLSAFEK_VEW;
	
	IS_ANY_ORA_ERROR;

	EXEC SQL OPEN account_cursor;
	if (sqlca.sqlcode != 0)
	{
			memset(chr_l_f_buf, NULL, APL_MAXLINE_SIZE);
			sprintf(chr_l_f_buf, "Error in account_cursor - sqlca.sqlcode is |%d|", sqlca.sqlcode);
			CO_ProcMonitor(fp_UserLog,chr_l_f_buf,NULL,NULL);
			APL_GOBACK_FAIL
	}
	IS_ANY_ORA_ERROR; 

	EXEC SQL OPEN instrument_cursor;
	if (sqlca.sqlcode != 0)
	{
			memset(chr_l_f_buf, NULL, APL_MAXLINE_SIZE);
			sprintf(chr_l_f_buf, "Error in instrument_cursor - sqlca.sqlcode is |%d|", sqlca.sqlcode);
			CO_ProcMonitor(fp_UserLog,chr_l_f_buf,NULL,NULL);
			APL_GOBACK_FAIL
	}
	IS_ANY_ORA_ERROR;

	EXEC SQL OPEN safek_cursor;
	if (sqlca.sqlcode != 0)
	{
			memset(chr_l_f_buf, NULL, APL_MAXLINE_SIZE);
			sprintf(chr_l_f_buf, "Error in safek_cursor - sqlca.sqlcode is |%d|", sqlca.sqlcode);
			CO_ProcMonitor(fp_UserLog,chr_l_f_buf,NULL,NULL);
			APL_GOBACK_FAIL
	}
	IS_ANY_ORA_ERROR;

	
	if (strstr(argv[9],"1"))
	{
		sprintf(chr_l_h_filename,"C_ACC.%d",int_l_retval);
		strcpy(chr_path,chr_path_bak);
		strcat(chr_path,chr_l_h_filename);
	
		memset(chr_l_f_buf, NULL, APL_MAXLINE_SIZE);
		sprintf(chr_l_f_buf, "Generating h_file :%s", chr_path);
		CO_ProcMonitor(fp_UserLog,chr_l_f_buf,NULL,NULL);

		if ((fp_account = fopen(chr_path,"w")) == NULL)
		{
			CO_ProcMonitor(fp_UserLog, "Could not open h_file CIMS_ACC.TXT for write", l_debug_info_ptr, NULL);
			printf("Could not open h_file CIMS_ACC.TXT for write \n");
			APL_GOBACK_FAIL
		}

		
		strcpy(l_intl_rept_struct_ha->report_name, chr_l_h_filename);
		strcpy(l_intl_rept_struct_ha->report_desc, APL_HOFF_FILE_DESC);
		strcpy(l_intl_rept_struct_ha->report_date, argv[2]);
		l_intl_rept_struct_ha->report_width = 100;
		strcpy(l_intl_rept_struct_ha->task_desc, l_intl_env_data_h.processtion);
		strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
		strcpy(l_intl_rept_struct_ha->usr, l_intl_env_data_h.usr);
	
		
		if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))
		{
			CO_ProcMonitor(fp_UserLog, "Could not write to common_report table", l_debug_info_ptr, NULL);
			APL_GOBACK_FAIL
		}

		for(;;)
		{
			EXEC SQL FETCH account_cursor 
				INTO 	:chr_l_h_field1:l_i_field1,
						:chr_l_h_field2:l_i_field2,
						:chr_l_h_field3:l_i_field3,
						:chr_l_h_field4:l_i_field4;
			if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != 1403))
			{
					memset(chr_l_f_buf, NULL, APL_MAXLINE_SIZE);
					sprintf(chr_l_f_buf, "Error in account_cursor - sqlca.sqlcode is |%d|", sqlca.sqlcode);
					CO_ProcMonitor(fp_UserLog,chr_l_f_buf,NULL,NULL);
					APL_GOBACK_FAIL
			}
			IS_ANY_ORA_ERROR;
	
			if(APL_ZERO_RESULT_SET)
				break;
		
			fprintf(fp_account,"%s%s%s%s\n",chr_l_h_field1,chr_l_h_field2,chr_l_h_field3,chr_l_h_field4);
		}
		fclose(fp_account);
	}

	
	if (strstr(argv[9],"2"))
	{
		sprintf(chr_l_h_filename,"C_SEC.%d",int_l_retval);
		strcpy(chr_path,chr_path_bak);
		strcat(chr_path,chr_l_h_filename);
   	memset(chr_l_f_buf, NULL, APL_MAXLINE_SIZE);
   	sprintf(chr_l_f_buf, "Generating h_file :%s", chr_path);
   	CO_ProcMonitor(fp_UserLog,chr_l_f_buf,NULL,NULL);

		if ((fp_instrument = fopen(chr_path,"w")) == NULL)
		{
			CO_ProcMonitor(fp_UserLog, "Could not open h_file CIMS_SEC.TXT for write", l_debug_info_ptr, NULL);
			printf("Could not open h_file CIMS_SEC.TXT for write \n");
			APL_GOBACK_FAIL
		}

		
		strcpy(l_intl_rept_struct_ha->report_name, chr_l_h_filename);
		strcpy(l_intl_rept_struct_ha->report_desc, APL_HOFF_FILE_DESC);
		strcpy(l_intl_rept_struct_ha->report_date, argv[2]);
		l_intl_rept_struct_ha->report_width = 100;
		strcpy(l_intl_rept_struct_ha->task_desc, l_intl_env_data_h.processtion);
		strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
		strcpy(l_intl_rept_struct_ha->usr, l_intl_env_data_h.usr);
	
		
		if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))
		{
			CO_ProcMonitor(fp_UserLog, "Could not write to common_report table", l_debug_info_ptr, NULL);
			APL_GOBACK_FAIL
		}

		for(;;)
		{
   		EXEC SQL FETCH instrument_cursor
     		 	INTO  :chr_l_h_field1:l_i_field1,
     		    	   :chr_l_h_field2:l_i_field2,
     		       	:chr_l_h_field3:l_i_field3,
     		       	:chr_l_h_field4:l_i_field4;
			if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != 1403))
			{
					memset(chr_l_f_buf, NULL, APL_MAXLINE_SIZE);
					sprintf(chr_l_f_buf, "Error in instrument_cursor - sqlca.sqlcode is |%d|", sqlca.sqlcode);
					CO_ProcMonitor(fp_UserLog,chr_l_f_buf,NULL,NULL);
					APL_GOBACK_FAIL
			}
			IS_ANY_ORA_ERROR;
	
			if(APL_ZERO_RESULT_SET)
				break;
		
			fprintf(fp_instrument,"%s%s%s%s\n",chr_l_h_field1,chr_l_h_field2,chr_l_h_field3,chr_l_h_field4);
		}
		fclose(fp_instrument);
	}

	
	if (strstr(argv[9],"3"))
	{
		sprintf(chr_l_h_filename,"C_SFK.%d",int_l_retval);
		strcpy(chr_path,chr_path_bak);
		strcat(chr_path,chr_l_h_filename);

		memset(chr_l_f_buf, NULL, APL_MAXLINE_SIZE);
		sprintf(chr_l_f_buf, "Generating h_file :%s", chr_path);
		CO_ProcMonitor(fp_UserLog,chr_l_f_buf,NULL,NULL);

		if ((fp_safek = fopen(chr_path,"w")) == NULL)
		{
			CO_ProcMonitor(fp_UserLog, "Could not open h_file CIMS_SFK.TXT for write", l_debug_info_ptr, NULL);
			printf("Could not open h_file CIMS_SFK.TXT for write \n");
			APL_GOBACK_FAIL
		}

		
		strcpy(l_intl_rept_struct_ha->report_name, chr_l_h_filename);
		strcpy(l_intl_rept_struct_ha->report_desc, APL_HOFF_FILE_DESC);
		strcpy(l_intl_rept_struct_ha->report_date, argv[2]);
		l_intl_rept_struct_ha->report_width = 100;
		strcpy(l_intl_rept_struct_ha->task_desc, l_intl_env_data_h.processtion);
		strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
		strcpy(l_intl_rept_struct_ha->usr, l_intl_env_data_h.usr);
	
		
		if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))
		{
			CO_ProcMonitor(fp_UserLog, "Could not write to common_report table", l_debug_info_ptr, NULL);
			APL_GOBACK_FAIL
		}
		for(;;)
		{
			EXEC SQL FETCH safek_cursor 
				INTO :chr_l_h_field1:l_i_field1;
			if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != 1403))
			{
					memset(chr_l_f_buf, NULL, APL_MAXLINE_SIZE);
					sprintf(chr_l_f_buf, "Error in safek_cursor - sqlca.sqlcode is |%d|", sqlca.sqlcode);
					CO_ProcMonitor(fp_UserLog,chr_l_f_buf,NULL,NULL);
					APL_GOBACK_FAIL
			}
			IS_ANY_ORA_ERROR;
	
			if(APL_ZERO_RESULT_SET)
				break;
	
			fprintf(fp_safek,"%s\n",chr_l_h_field1);
		}
		fclose(fp_safek);
	}

	
   EXEC SQL UPDATE SYS_BATCHPROC
   SET  status = 'completed'
   WHERE rowid = :chr_h_batch_in_proc_rowid; 
			
	if (!sqlca.sqlcode)
	{
		CO_ProcMonitor(fp_UserLog, "Successfully updated batch_in_proc", NULL, NULL);
	}
	if (sqlca.sqlcode != 0)
	{
		CO_ProcMonitor(fp_UserLog, "Could not update batch_in_proc", NULL, NULL);
		APL_GOBACK_FAIL
	}


   EXEC SQL COMMIT WORK RELEASE;
	if (sqlca.sqlcode)
	{
		CO_ProcMonitor(fp_UserLog, "Could not do final commit", NULL, NULL);
		APL_GOBACK_FAIL
	}

   APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
		CO_ProcMonitor(fp_UserLog, "CIMS_Handoff completed successfully", l_debug_info_ptr, &l_intl_env_data_h);
		printf("\nCIMS_Handoff completed successfully\n");
		if (sqlca.sqlcode != 0)
		 fclose(fp_UserLog); 
		exit(0);

	RETURN_FAILURE :

		CO_ProcMonitor(fp_UserLog, "CIMS_Handoff returned failure", l_debug_info_ptr, &l_intl_env_data_h);
		printf("\nCIMS_Handoff returned failure\n");
      if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
      {
         CO_ProcMonitor(fp_UserLog, "Got Errors : ", l_debug_info_ptr, &l_intl_env_data_h);
         CO_FreeErrLst(l_debug_info_ptr);
      } 


		fclose(fp_UserLog); 
		exit(1);
}

