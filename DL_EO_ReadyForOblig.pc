/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2015 Intellect Design Arena Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to 
 *    Intellect Design Arena Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or 
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Intellect Design Arena Limited.
 */
/*********************************************************************
 *
 * Module Name         : Deal Processing
 *
 * File Name           : DL_EO_ReadyForOblig.pc
 *
 * Description         : This file contains function for Mark DVP / Mark Confirm process
 *
 *           
 *
 *            Version Control Block
 *
 * Date        Version		Author               Description
 * ---------   --------	 ---------------  ---------------------------
 * 14/07/2015    1.1     Supriya/Prateek    ISKB_1493(Lien Marking/Margin Automation)
 **********************************************************************/




#include "stdio_64.h"
#include "Intellect_Common.h"
#include "BT_Common.h"
#define APL_STATUS_RC  "RC"
#define APL_STATUS_PM  "PM"
#define APL_STATUS_CC  "CC"
#define APL_DL_CLHFLG    "D"
#define APL_STATUS_START   "started"
#define APL_STATUS_OC    "OC"
#define STATUS_AUTH  "AA"
#define	APL_IND_NO "N" /*Rahul*/
#define	APL_IND_YES "Y" /*Rahul*/

EXEC SQL INCLUDE SQLCA;
#define MAIN_ARG \
{\
	int i =0;\
	for(i=0;i<argc;i++)\
	{\
		printf("Arguement [%d] = [%s]\n",i,argv[i]);\
	}\
}
int l_not_found=0;//Kotubabu-EquityFund
int Ready_For_Oblig(char   p_Exch_code[4],
		char p_settl_no[17],
		char p_client_cd[11],
		char p_instr_cd[9],
		char p_client_master[11],
		char p_trade_type[5],
		char p_clh_ind[2],
		char p_mkt_typ[4],
		char *p_user,
		FILE *p_logfile,
		DEBUG_INFO_STRUCT_H **l_debug_info_ptr,
		FILE *Early_Payin_logfile); //Kotubabu--EquityFund

char chr_g_log_buffer[801] = APL_NULL_STRING; //Added by Gouse
char chr_g_log_buf[200]= APL_NULL_STRING;// Added by Swathi for printing details about records not being picked in mark oblig when LienMark is Y

int main(int argc,char **argv)
{
	struct sqlca sqlca;
	DEBUG_INFO_STRUCT_H **l_debug_info_ptr = (DEBUG_INFO_STRUCT_H **) NULL;
	INTL_ENV_DATA_STRUCT_H l_intl_env_data_h;
	FILE                *l_logfile = (FILE *)NULL;
	char                l_Exch_code[4] = APL_NULL_STRING;
	char                l_settl_no[17] = APL_NULL_STRING;
	char                l_client_cd[11]= APL_NULL_STRING;
	char                l_instr_cd[9] = APL_NULL_STRING;
	int                 l_int_num = 0;
	char                *l_user = APL_NULL_STRING;
	char                **temp = ( char **)NULL;
	char                l_clh_ind[2] = APL_NULL_STRING;
	char                l_mkt_typ[4] =APL_NULL_STRING;
	// Added by Pankaj Deshpande for Additional Changes -Starts 
	char                l_client_master[11]= APL_NULL_STRING;
	char                l_trade_type[5]= APL_NULL_STRING;
	// Added by Pankaj Deshpande for Additional Changes -Ends 

        FILE   *Early_Payin_logfile = (FILE *)NULL;//Kotubabu-EquityFund
	EXEC SQL VAR l_Exch_code IS STRING;
	EXEC SQL VAR l_settl_no IS STRING;
	EXEC SQL VAR l_client_cd IS STRING;
	EXEC SQL VAR l_instr_cd IS STRING;
	EXEC SQL VAR l_clh_ind IS STRING;
	// Added by Pankaj Deshpande for Additional Changes -Starts 
	EXEC SQL VAR l_client_master IS STRING;
	EXEC SQL VAR l_trade_type IS STRING;
	// Added by Pankaj Deshpande for Additional Changes -Ends 
	
	
	MAIN_ARG


		/*
			l_Exch_code=(char *)calloc(1,sizeof(l_Exch_code));
			APL_MALLOC_FAIL(l_Exch_code)
			l_settl_no=(char *)calloc(1,sizeof(l_settl_no));
			APL_MALLOC_FAIL(l_settl_no)
			l_client_cd=(char *)calloc(1,sizeof(l_client_cd));
			APL_MALLOC_FAIL(l_client_cd)
			l_instr_cd=(char *)calloc(1,sizeof(l_instr_cd));
			APL_MALLOC_FAIL(l_instr_cd)
			*/


		l_user = (char *)calloc(1,sizeof(l_user));
	APL_MALLOC_FAIL(l_user)


		l_debug_info_ptr = (DEBUG_INFO_STRUCT_H **)calloc(1,sizeof(DEBUG_INFO_STRUCT_H *));


	if(CO_Get_DBConnect(l_debug_info_ptr) == APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}
	if ( CO_RtvSysParams(l_debug_info_ptr) == APL_FAILURE)
	{
		printf("Mark Obligation :Failed in CO_RtvSysParams");
		APL_GOBACK_FAIL
	}

	if (APL_FAILURE == CO_Rtv_RptFileName( "7g",
				APL_LOGFILE_DESC,
				100,
				argv[5],
				argv,
				&l_logfile,
				l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL
	}

	
	if(BT_Status_Update(argv[0],
				argv[1],
				argv[2],
				APL_STARTED_STATUS,
				l_debug_info_ptr) ==APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}


	
	if(APL_FAILURE == CO_SplitStr(argv[9],
				'|',
				&l_int_num,&temp))
	{
		CO_ProcMonitor(l_logfile, "Failure from StrSplitFn", NULL, NULL);
		APL_GOBACK_FAIL
	}

	if (l_int_num != 8)
	{
		CO_ProcMonitor(l_logfile, "Improper Number of arguments", NULL, NULL);
		APL_GOBACK_FAIL
	}

	APL_IF_DEBUG
	{
		printf("\n the no of arguments |%d|",l_int_num);
		printf("\n the arguments are |%s|",temp[0]);
		printf("\n the arguments are |%s|",temp[1]);
		printf("\n the arguments are |%s|",temp[2]);
		printf("\n the arguments are |%s|",temp[3]);
		printf("\n the arguments are |%s|",temp[4]);
		printf("\n PPD: the arguments are |%s|",temp[5]);
		printf("\n PPD: the arguments are |%s|",temp[6]);
		printf("\n PPD: the arguments are |%s|",temp[7]);
	}

	strcpy(l_client_cd,temp[0]);
	strcpy(l_instr_cd,temp[1]);
	strcpy(l_settl_no,temp[2]);
	strcpy(l_Exch_code,temp[3]);
	// Added by Pankaj Deshpande for Additional Changes -Starts 
	strcpy(l_client_master,temp[4]);
	strcpy(l_trade_type,temp[5]);
	// Added by Pankaj Deshpande for Additional Changes -Ends 
	strcpy(l_clh_ind,temp[6]);
	strcpy(l_mkt_typ,temp[7]);
	
	
	strcpy(l_intl_env_data_h.usr,    argv[3]); 
	strcpy(l_intl_env_data_h.h_mode,       argv[4]);
	strcpy(l_intl_env_data_h.processtion,  argv[5]);
	strcpy(l_intl_env_data_h.auth_req,  argv[6]);
	strcpy(l_intl_env_data_h.subprocess,   argv[7]);
	strcpy(l_intl_env_data_h.h_process,    argv[8]);
	strcpy(l_user,l_intl_env_data_h.usr); 

	/* Added By Kotubabu for Equity Fund START */
	if(strcmp(l_clh_ind,"D")==0)
	{
				if (APL_FAILURE == CO_Rtv_RptFileName( "EARLYPAYIN",
						APL_LOGFILE_DESC,
						100,
						argv[5],
						argv,
						&Early_Payin_logfile,
						l_debug_info_ptr ) )
			{
				APL_GOBACK_FAIL
			}
	}
/* Added By Kotubabu for Equity Fund END */


	if ( Ready_For_Oblig(	l_Exch_code,
				l_settl_no,
				l_client_cd,
				l_instr_cd,
				l_client_master,
				l_trade_type,
				l_clh_ind,
				l_mkt_typ,
				l_user,
				l_logfile,
				l_debug_info_ptr,Early_Payin_logfile) == APL_FAILURE ) //Kotubabu-EquityFund
	{
		CO_ProcMonitor(l_logfile, "Ready_For_Oblig returned failure", NULL, NULL);
		CO_Proc_RptClose(l_logfile, l_debug_info_ptr);
		EXEC SQL ROLLBACK WORK RELEASE; 
		APL_GOBACK_FAIL 
	}
	else
	{
		if(strcmp(l_clh_ind,"D")==0 && l_not_found ==0  ) //Kotubabu-EquityFund
		{
			fprintf(Early_Payin_logfile,"\n No Early Payin Record Found");
		}
		
		EXEC SQL UPDATE SYS_BATCHPROC
			SET  status = 'completed'
			WHERE PROCESS_NAME=:argv[0]
			AND   PROC_INIT=:argv[1]
			AND   STARTDATE=:argv[2] 
			AND   STATUS='started';

		printf("\n the date is |%s| |%s| |%s|",argv[1],argv[2],argv[0]);

		printf("\n sql code is |%d| \n",sqlca.sqlcode);

		if (sqlca.sqlcode)
		{
			CO_ProcMonitor(   l_logfile,
					"Could not update Batch_in_proc record to completed",
					NULL,
					&l_intl_env_data_h);
			CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
			APL_GOBACK_FAIL
		}

		EXEC SQL COMMIT WORK RELEASE;

		if (sqlca.sqlcode)
		{
			CO_ProcMonitor(   l_logfile,
					"Could not perform final COMMIT",
					NULL,
					&l_intl_env_data_h);
			CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
			APL_GOBACK_FAIL
		}
		CO_ProcMonitor(l_logfile, "Ready_For_Oblig returned success", NULL, NULL);//Added by Gouse for blank log file issue in KB SIT

		CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
		APL_GOBACK_SUCCESS
	} 


	/*	
		APL_GOBACK_SUCCESS


RETURN_SUCCESS	:
if(BT_Status_Completed(argv[0],
argv[1],
argv[2],
l_debug_info_ptr)	  ==  APL_FAILURE )
{
APL_GOBACK_FAIL
}
CO_Proc_RptClose(l_logfile, l_debug_info_ptr);
EXEC SQL COMMIT WORK;
if(sqlca.sqlcode != 0)APL_GOBACK_FAIL
exit(0);

RETURN_FAILURE 	: 	
CO_Proc_RptClose(l_logfile, l_debug_info_ptr);
EXEC SQL ROLLBACK WORK RELEASE;
exit(-1); */

RETURN_SUCCESS :exit(0);
RETURN_FAILURE :exit(-1);

} 

int Ready_For_Oblig(char	p_Exch_code[4],
		char p_settl_no[17],
		char p_client_cd[11],
		char p_instr_cd[9],
		char p_client_master[11],
		char p_trade_type[5],
		char p_clh_ind[2],
		char p_mkt_typ[4],
		char *p_user,
		FILE *p_logfile,
		DEBUG_INFO_STRUCT_H **l_debug_info_ptr,
		FILE *Early_Payin_logfile)//Kotubabu-EquityFund
{
	char     l_status[3]=APL_NULL_STRING;
	short    l_i_status = 0;
	char     l_c_status[3]=APL_NULL_STRING;
	short    l_i_statu = 0;
	char     l_instr_code[9] =APL_NULL_STRING;
	short    l_i_instr_code=0;
	char     l_location_cd[5]=APL_NULL_STRING;
	short    l_i_location_cd=0;
	char     l_deal_cd[2]=APL_NULL_STRING;
	short    l_i_deal_cd=0;
	double   l_qty=0;
	short    l_i_qty = 0;
	//char     l_s_status[3] = APL_NULL_STRING;
	//short    l_i_s_status = 0;
	char     l_oc_status[3] = APL_NULL_STRING;
	//short    l_i_oc_status = 0;
	char     l_chr_sys_time_stamp[APL_DATE_LEN]=APL_NULL_STRING;
	char     l_chr_sys_date[APL_DATE_LEN]=APL_NULL_STRING;
	short    l_i_access_stamp = 0;
	char  	*l_sqlstmt = (char *)NULL;
	char  	*l_sqlstmt_append = APL_NULL_STRING;
	char  	l_dl_client[11] = APL_NULL_STRING;
	short 	l_i_dl_client = 0;
	short 	l_i_dl_ref_no = 0;
	//short    l_i_checker = 0;
	char  	l_dl_ref_no[17] = APL_NULL_STRING;
	char  	l_dl_type[2] = APL_NULL_STRING;
	short  	l_i_dl_type = 0;
	char  	l_settl_no[17] = APL_NULL_STRING;
	char  	l_exch_cd[4] = APL_NULL_STRING;
	short 	l_i_settl_no = 0;
	short 	l_i_exch_cd = 0;
	char     l_contract_cd[17] = APL_NULL_STRING;
	short    l_i_contract_cd = 0;
	//char     l_cln_bcn_reqd[2] = APL_NULL_STRING;
	//short    l_i_cln_bcn_reqd = 0;
	char     l_deal_dt[APL_DATE_LEN]=APL_NULL_STRING;
	short    l_i_deal_dt = 0;
	char     l_brk_cd[11] = APL_NULL_STRING;
	short    l_i_brk_cd = 0;
        /*Kotubabu-EquityFund-Start*/
	char l_pltopl_flg[2]=APL_NULL_STRING;
	short l_i_pltopl_flg=0;
	char l_host_date[APL_DATE_LEN] = APL_NULL_STRING;
	short l_i_host_date=0;
	char l_param_value[2]=APL_NULL_STRING;
	char l_ae_stat[2] = APL_NULL_STRING;
	short l_i_ae_stat=0;
	char l_clh_flag[2] = APL_NULL_STRING;
        char l_account_no[16]=APL_NULL_STRING;
        char l_stat[30]=APL_NULL_STRING;
        double l_amt=0;
        short l_i_amt=0;
        double l_net_amt=0;
        short l_i_net_amt=0;
        /*Kotubabu-EquityFund-End*/ 
	/*Start - RegRept - Rahul*/
	char     l_sebi_reported[2] = APL_NULL_STRING; /* Rahul */
	//short    i_sebi_reported = 0; /* Rahul */
	char     no[2] = APL_NULL_STRING;
	/*End - RegRept - Rahul*/
        char l_flg[3] = APL_NULL_STRING; /*amish 21/12 */
	/* changes by amish --29/05 */

	char	l_temp_clh_flag=APL_NULL_CHAR; //Kalyan

	/*Added by Supriya/Prateek on 14072015 for ISKB_1493(Lien Marking and Margin AE Automation) -START*/
	char     hvLienReqd[2]		= APL_NULL_STRING;
	int      hvCount			= 0;
        /*Added by Supriya/Prateek on 14072015 for ISKB_1493(Lien Marking and Margin AE Automation) -END*/
    int   rs_null_count= 0; /*added by Swathi for ISKB_1493-  when mark obligation fails */  
	EXEC SQL VAR l_dl_client IS STRING;
	EXEC SQL VAR l_dl_ref_no IS STRING;
	EXEC SQL VAR l_dl_type IS STRING;
	EXEC SQL VAR l_settl_no IS STRING;
	EXEC SQL VAR l_exch_cd IS STRING;
	EXEC SQL VAR l_oc_status IS STRING;
	EXEC SQL VAR l_status IS STRING;
	EXEC SQL VAR l_instr_code IS STRING;
	EXEC SQL VAR l_deal_cd IS STRING;
	EXEC SQL VAR l_location_cd IS STRING;
	EXEC SQL VAR l_c_status IS STRING;
	EXEC SQL VAR l_deal_dt IS STRING;
	EXEC SQL VAR l_brk_cd IS STRING;
	EXEC SQL VAR l_contract_cd IS STRING;
        /*Kotubabu-EquityFund-Start*/
	EXEC SQL VAR l_pltopl_flg IS STRING;
	EXEC SQL VAR l_host_date IS STRING;
	EXEC SQL VAR l_param_value IS STRING;
	EXEC SQL VAR l_ae_stat IS STRING;
	EXEC SQL VAR l_clh_flag IS STRING;
        EXEC SQL VAR l_account_no IS STRING;
        EXEC SQL VAR l_stat IS STRING;
        /*Kotubabu-EquityFund-End*/ 
  /* CHANGES BY AMISH -- 29/05 */
	l_sqlstmt = (char *)calloc(150000,sizeof(char));
	memset(l_sqlstmt,APL_NULL_CHAR,150000);
	l_sqlstmt_append = (char *)calloc(150000,sizeof(char));
	memset(l_sqlstmt_append,APL_NULL_CHAR,150000);

	strcpy(l_c_status,APL_STATUS_CC);
	strcpy(l_dl_type,APL_DL_CLHFLG);
	strcpy(l_oc_status,APL_STATUS_OC);
	strcpy(l_flg,APL_YES_IND);/* amish - 21/12/2006 */

	CO_ProcMonitor(p_logfile, "Entered Ready_For_Oblig ", NULL, NULL);//Added by Gouse for blank log file issue in KB SIT

	if(CO_RtvSysDtTime(l_chr_sys_time_stamp,l_debug_info_ptr) !=APL_SUCCESS)
	{
		APL_GOBACK_FAIL
	}
	if(CO_RtvSysDt(l_chr_sys_date,l_debug_info_ptr) !=APL_SUCCESS)
	{
		APL_GOBACK_FAIL
	}
	if(strcmp(p_clh_ind,"D")==0)//Kotubabu-EquityFund
	{
		sprintf(chr_g_log_buffer, "Client Code,Deal Reference No,Instrument Code,Settlement No,Deal Quantity,Gross Amount,Net Amount,Client Bank Account,Accounting Entries,Early Payin Status");
		fprintf(Early_Payin_logfile,"%s",chr_g_log_buffer);

	}
	
printf(" \n MARKET TYPE [%s]", p_mkt_typ);

	if((strlen(p_client_cd) !=0) && (strlen(p_settl_no) !=0) && (strlen(p_Exch_code) !=0) && (strlen(p_instr_cd) !=0) && (strlen(p_client_master) !=0) && (strlen(p_mkt_typ) !=0))
	{
		printf("if query part");
		/* changes by amish --29/05 */
		sprintf(l_sqlstmt,"SELECT A.IDENTIY_NO,A.CLIENT,A.DEAL_STAT,A.EXCH_CODE,A.INSTR_CODE,A.LOCATION_CD,A.QTY,A.DEAL_CD,A.SETTLEMENT_NO,A.CONTRACT_CD,A.DEAL_DATE,A.DOMESTIC_CPCLT,A.PLTOPL_FLG,A.HOST_DATE,A.AMOUNT,A.NET_AMT \
				FROM \
				DL_DEAL A,MT_CLIENT B  \
				WHERE \
				A.CLIENT = '%s' AND \
				A.INSTR_CODE = '%s' AND \
				A.SETTLEMENT_NO = '%s' AND \
				A.EXCH_CODE = '%s' AND A.CLIENT = B.CLN_CODE AND B.CLN_MASTER = '%s' AND A.MKT_TYPE ='%s' ",p_client_cd,p_instr_cd,p_settl_no,p_Exch_code,p_client_master,p_mkt_typ);  
	
	}
	else
	{
		printf("else query part");
		/* Added by Pankaj Deshpande for Additional Changes - Starts */
		if(strcmp(p_client_master,APL_NULL_STRING) == 0)
			strcpy(p_client_master,"%");
		/* Added by Pankaj Deshpande for Additional Changes - Ends */
	
		memset(l_sqlstmt,APL_NULL_CHAR,150000);
		/* changes by amish --29/05 */
		sprintf(l_sqlstmt,"SELECT A.IDENTIY_NO,A.CLIENT,A.DEAL_STAT,A.EXCH_CODE,A.INSTR_CODE,A.LOCATION_CD,A.QTY,A.DEAL_CD,A.SETTLEMENT_NO,A.CONTRACT_CD,A.DEAL_DATE,A.DOMESTIC_CPCLT,A.PLTOPL_FLG,A.HOST_DATE,A.AMOUNT,A.NET_AMT \
				FROM \
				DL_DEAL A, MT_CLIENT B \
				WHERE 1>0  AND A.CLIENT = B.CLN_CODE AND B.CLN_MASTER LIKE '%s' AND A.SETTLEMENT_NO = '%s' AND A.MKT_TYPE ='%s' ", p_client_master,p_settl_no,p_mkt_typ);

		/*if(strlen(p_settl_no)!=0)
		{
			sprintf(l_sqlstmt_append," AND A.SETTLEMENT_NO = '%s'",p_settl_no);
			strcat(l_sqlstmt,l_sqlstmt_append);
			memset(l_sqlstmt_append,APL_NULL_CHAR,150000);
		}*/

		if(strlen(p_Exch_code)!=0)
		{
			sprintf(l_sqlstmt_append," AND A.EXCH_CODE = '%s' ",p_Exch_code);
			strcat(l_sqlstmt,l_sqlstmt_append);
			memset(l_sqlstmt_append,APL_NULL_CHAR,150000);
		}
		if(strlen(p_client_cd)!=0)
		{
			sprintf(l_sqlstmt_append," AND A.CLIENT = '%s' ",p_client_cd);
			strcat(l_sqlstmt,l_sqlstmt_append);
			memset(l_sqlstmt_append,APL_NULL_CHAR,150000);
		}
		if(strlen(p_instr_cd)!=0)
		{
			sprintf(l_sqlstmt_append," AND A.INSTR_CODE = '%s' ",p_instr_cd);
			strcat(l_sqlstmt,l_sqlstmt_append);
			memset(l_sqlstmt_append,APL_NULL_CHAR,150000);
		}
	}
	
	if(strcmp(p_trade_type,"BUY")==0)
	{
		sprintf(l_sqlstmt_append," AND A.DEAL_CD in ('2','4') ");
		strcat(l_sqlstmt,l_sqlstmt_append);
		memset(l_sqlstmt_append,APL_NULL_CHAR,150000);	
	}
	else if(strcmp(p_trade_type,"SELL")==0)
	{
		sprintf(l_sqlstmt_append," AND A.DEAL_CD in ('1','3') ");
		strcat(l_sqlstmt,l_sqlstmt_append);
		memset(l_sqlstmt_append,APL_NULL_CHAR,150000);
	}
	else
	{
		sprintf(l_sqlstmt_append," AND A.DEAL_CD in ('1','2','3','4') ");
		strcat(l_sqlstmt,l_sqlstmt_append);
		memset(l_sqlstmt_append,APL_NULL_CHAR,150000);
	}


	APL_IF_DEBUG
	{
			printf("\n In Function Ready_For_Oblig :: The Query is |%s|\n",l_sqlstmt);
	}

	EXEC SQL PREPARE sss FROM :l_sqlstmt;
	IS_ANY_ORA_ERROR;

		EXEC SQL DECLARE ReadyForObli CURSOR FOR sss;
	IS_ANY_ORA_ERROR;

		EXEC SQL OPEN  ReadyForObli ;
	IS_ANY_ORA_ERROR;

		for(;;)
		{
		       printf("\n Entered for loop ... ReadyForObli ");
			EXEC SQL FETCH ReadyForObli INTO :l_dl_ref_no:l_i_dl_ref_no,
				  :l_dl_client:l_i_dl_client,
				  :l_status:l_i_status,
				  :l_exch_cd:l_i_exch_cd,
				  :l_instr_code:l_i_instr_code,
				  :l_location_cd:l_i_location_cd,
				  :l_qty:l_i_qty,
				  :l_deal_cd:l_i_deal_cd,
				  :l_settl_no:l_i_settl_no,
				  :l_contract_cd:l_i_contract_cd,
				  :l_deal_dt:l_i_deal_dt,
				  :l_brk_cd:l_i_brk_cd,
				  :l_pltopl_flg:l_i_pltopl_flg,
				  :l_host_date:l_i_host_date,:l_amt:l_i_amt,:l_net_amt:l_i_net_amt; //Kotubabu-EquityFund
					/* changes by amish -29/05 */
		
			IS_ANY_ORA_ERROR
                                printf("\n beforeee APL_ZERO_RESULT_SET, rs_null_count flag is |%d|",rs_null_count);
				if (APL_ZERO_RESULT_SET)
				{
                                 printf("\n Insideee APL_ZERO_RESULT_SET,rs_null_count flag is |%d|",rs_null_count);
                                  if (rs_null_count == 0)
				                  { 
					CO_ProcMonitor(p_logfile, "No records found for Mark Obligation ", NULL, NULL);
				}
                                      break;	
                           	   
                }

                        rs_null_count = 1;
                        printf("\n STATUS [%s]",l_status);
                       printf("\n Before C/D processing.. Now set rs_null_count flag to 1..value is |%d|",rs_null_count);
			
                       printf("\n PLTOPL Flag is |%s| AND l_host_date is |%s|",l_pltopl_flg,l_host_date);		   
		if(strcmp(l_pltopl_flg,"B")==0 || strcmp(l_pltopl_flg,"C")==0 || strcmp(l_pltopl_flg,"R")==0 || strcmp(l_pltopl_flg,"G")==0) /*Kotubabu-EquityFund-Start*/
	    {
		           memset(chr_g_log_buffer, NULL, sizeof(chr_g_log_buffer));
		           sprintf(chr_g_log_buffer,"\n** Deal of client |%s|,Reference No |%s| is blocked or Released but not Authorize ***\n",l_dl_client,l_dl_ref_no);
		           fprintf(p_logfile,"%s",chr_g_log_buffer);
		           printf("\n Deal is Blocked Client |%s| reference |%s|",l_dl_client,l_dl_ref_no);
                           continue;
	    }
             if(!strcmp(l_host_date,APL_NULL_STRING)==0 || !strcmp(l_host_date,"")==0)
	     {
			   EXEC SQL SELECT DISTINCT  STATUS  into :l_ae_stat:l_i_ae_stat
 			   FROM PRO_ACCTENT  WHERE (SUBSTR(DEAL_IDENT,0,INSTR(DEAL_IDENT,'|',1,2)-1))= (SELECT CLIENT||'|'||IDENTIY_NO FROM DL_DEAL WHERE CLIENT=:l_dl_client AND IDENTIY_NO=:l_dl_ref_no) 
               AND ACC_TYPE='C';
						
	           IS_ANY_ORA_ERROR
		       if(!strcmp(l_ae_stat,APL_NULL_STRING)==0)
		       {
			     strcpy(l_clh_flag,"E");
		       }
	           printf("\n Flag is |%s| and AE_STAT is |%s|",l_clh_flag,l_ae_stat);

                if((strcmp(l_clh_flag,"E")==0) && (strcmp(l_ae_stat,"G")==0)) 
       	        {
						memset(chr_g_log_buffer, NULL, sizeof(chr_g_log_buffer));
						sprintf(chr_g_log_buffer,"\n**Accounting Entries of Deal of client |%s| and Reference No |%s| is Generated but it is is not passed \n",l_dl_client,l_dl_ref_no);
						fprintf(p_logfile,"%s",chr_g_log_buffer);
						printf("\n Accounting Entries of Deal of Client |%s| and Reference No |%s| is Generated but it is not passed ",l_dl_client,l_dl_ref_no);
						continue;
	        } 
              }
	        printf("\n CLH_FLG is %s",l_clh_flag);			
	        printf("\n l_ae_stat is %s",l_ae_stat);
               /*Kotubabu-EquityFund-End*/
			if(strcmp(p_clh_ind,"C") == 0)
			{
				if(strcmp(l_status,APL_STATUS_PM) == 0)
				{
					printf("\n The Deal Code is |%c|\n",l_deal_cd[0]);
					sprintf(chr_g_log_buffer,"\n Client=|%s| IndentiyNo=|%s| InstrCode=|%s| Quantity=|%lf| ExchangeCode=|%s| DealCode=|%s| DealDate=|%s| CLHFlag=|%s|\n",l_dl_client,l_dl_ref_no,l_instr_code,l_qty,l_exch_cd,l_deal_cd,l_deal_dt,p_clh_ind);//Added by Gouse
 					 CO_ProcMonitor(p_logfile,chr_g_log_buffer,NULL,NULL);

					 /*Rewritten by Supriya/Prateek on 14072015 for ISKB_1493(Lien Marking / Margin AE Automation) - START*/

				if(strcmp(l_deal_cd,"4") == 0)
					{
						printf("\n DETAILS - Client is |%s|,Deal Reference Number is |%s|,Deal code is |%s|",l_dl_client,l_dl_ref_no,l_deal_cd);

					 IF_COND_EXISTS("DL_ACCTENT","DL_LIEN_ACCTENT_GEN")
						{
							 hvLienReqd[0] = '\0';
							EXEC SQL SELECT GETCLIENTPARAMBYID('LIEN_MARK_REQD',:l_dl_client)
							INTO :hvLienReqd FROM DUAL;

							printf("\n Mark Confirm - Sqlcode after checking the Lien Required Flag [%d]",sqlca.sqlcode);
							printf("\n Mark Confirm - Value of hvLienReqd for client [%s] is [%s] ",l_dl_client,hvLienReqd);
							IS_ANY_ORA_ERROR;

							if(strcmp(hvLienReqd,"Y") == 0)
								{
									printf("\n Mark Confirm - Proceed For Lien Marking Check");
									hvCount = 0;

									EXEC SQL SELECT count(*) into :hvCount from dl_lien
									where client = :l_dl_client
									and ref_no = :l_dl_ref_no
									and status in ('IN','MI');

									printf("\n Mark Confirm - Sqlcode after checking the Lien Count [%d]",sqlca.sqlcode);
									printf("\n Mark Confirm - Lien Count is  :[%d]",hvCount);
							       
                                                                        if (hvCount == 0)
                                                                        {
                                                                         sprintf(chr_g_log_buf,"\n Lien Not marked for the Client=|%s|",l_dl_client);
                                                                         CO_ProcMonitor(p_logfile,chr_g_log_buf,NULL,NULL);	
                                                                        }  

                                                                  	IS_ANY_ORA_ERROR;
								}

							if(hvCount > 0 || strcmp(hvLienReqd,"Y") != 0 )
								{
									EXEC SQL UPDATE DL_DEAL SET DEAL_STAT=:l_c_status:l_i_statu,
									ACCESS_STAMP =:l_chr_sys_time_stamp:l_i_access_stamp,
									VAL_FDT = :l_chr_sys_date
									WHERE CLIENT =:l_dl_client AND
									IDENTIY_NO =:l_dl_ref_no AND
                                    DEAL_DATE= :l_deal_dt; 
                                 //added deal date check in where clause for marking obligation for given deal date
									printf("\n Mark Confirm - Sql code after Update is |%d| \n",sqlca.sqlcode);
					IS_ANY_ORA_ERROR;
					CO_ProcMonitor(p_logfile,"\n ******Record Processed Sucessfully********\n",NULL,NULL);


					if ( APL_FAILURE == DL_Mod_Posn( l_dl_client,
								l_instr_code,
								l_location_cd,
								"",
								'U',
								l_deal_cd[0],
								&l_qty,
								'D',"FREE",
								l_debug_info_ptr ) )
					{
						APL_GOBACK_FAIL;
					}
					if ( APL_FAILURE == DL_Mod_Posn( l_dl_client,
								l_instr_code,
								l_location_cd,
								"",
								'C',
								l_deal_cd[0],
								&l_qty,
								'I',"FREE",
								l_debug_info_ptr ) )
					{
						APL_GOBACK_FAIL;
					}
								}
						}
					}
					else
					{

						printf("\n ELSE - DETAILS - Client is |%s|,Deal Reference Number is |%s|,Deal code is |%s|",l_dl_client,l_dl_ref_no,l_deal_cd);

						EXEC SQL UPDATE DL_DEAL SET DEAL_STAT=:l_c_status:l_i_statu,
						ACCESS_STAMP =:l_chr_sys_time_stamp:l_i_access_stamp,
						VAL_FDT = :l_chr_sys_date
						WHERE CLIENT =:l_dl_client AND
						IDENTIY_NO =:l_dl_ref_no AND
						DEAL_DATE= :l_deal_dt;
						//added deal date check in where clause for marking obligation for given deal date
						printf("\n ELSE - Mark Confirm - Sql code after Update is |%d| \n",sqlca.sqlcode);
						IS_ANY_ORA_ERROR;
						CO_ProcMonitor(p_logfile,"\n ******Record Processed Sucessfully********\n",NULL,NULL);


						if ( APL_FAILURE == DL_Mod_Posn( l_dl_client,
												l_instr_code,
												l_location_cd,
												"",
												'U',
												l_deal_cd[0],
												&l_qty,
												'D',"FREE",
												l_debug_info_ptr ) )
								 {
						          APL_GOBACK_FAIL;
													}
						if ( APL_FAILURE == DL_Mod_Posn( l_dl_client,
												l_instr_code,
												l_location_cd,
												"",
												'C',
												l_deal_cd[0],
												&l_qty,
												'I',"FREE",
												l_debug_info_ptr ) )
													{
													APL_GOBACK_FAIL;
													}


					}
					/*Rewritten by Supriya/Prateek on 14072015 for ISKB_1493(Lien Marking / Margin AE Automation) - END*/
					 
				}
			}

			printf("\n Ready for obligation-----clh flag is |%s|\n",p_clh_ind);
			if(strcmp(p_clh_ind,"D") == 0)
			{
				EXEC SQL SELECT CLH_FLG 
						INTO :l_temp_clh_flag
						FROM DL_DEAL
						WHERE CLIENT=:l_dl_client 
						AND IDENTIY_NO=:l_dl_ref_no; 

				IS_ANY_ORA_ERROR;

				if((strcmp(l_status,APL_STATUS_RC) == 0) && l_temp_clh_flag != 'D')
				{
					sprintf(chr_g_log_buffer,"\n Client=|%s| IndentiyNo=|%s| InstrCode=|%s| Quantity=|%lf| ExchangeCode=|%s| DealCode=|%s| DealDate=|%s| CLHFlag=|%s|\n",l_dl_client,l_dl_ref_no,l_instr_code,l_qty,l_exch_cd,l_deal_cd,l_deal_dt,p_clh_ind);//Added by Gouse
                                         CO_ProcMonitor(p_logfile,chr_g_log_buffer,NULL,NULL);

					EXEC SQL UPDATE DL_DEAL SET CLH_FLG =:l_dl_type:l_i_dl_type,
						  /*
							  CHECKER =:p_user:l_i_checker,
							  CHECKER_DT =:l_chr_sys_time_stamp:l_i_access_stamp,
							  */
						  ACCESS_STAMP =:l_chr_sys_time_stamp:l_i_access_stamp,
							  STATUS = :l_flg /* status field is used to indicate the orig clearing house of deal i.e. "Y" indicate it was clh deal */
							WHERE CLIENT=:l_dl_client 
							AND IDENTIY_NO=:l_dl_ref_no; 

					printf("\n Mark DEVP - Sql code after Update is |%d| \n",sqlca.sqlcode);

					IS_ANY_ORA_ERROR;
					CO_ProcMonitor(p_logfile,"\n *************Record Processed Sucessfully******** \n",NULL,NULL);
					
					/* changes by amish --29/05 */
					/*
					EXEC SQL SELECT CLN_BCN_REQD INTO :l_cln_bcn_reqd:l_i_cln_bcn_reqd FROM MT_CLIENT
						WHERE CLN_CODE = :l_dl_client;

					IS_ANY_ORA_ERROR;
					
				
					if(sqlca.sqlcode == 0)
					{
						
						if(!strcmp(l_cln_bcn_reqd,"Y"))
						{
						*/
						
						/*Start - RegRept - Rahul*/

							EXEC SQL SELECT SEBI_REPORTED into :l_sebi_reported FROM DL_BCN 
										WHERE CONTRACT_CD = :l_contract_cd AND
													  DL_DATE = :l_deal_dt AND
													  BROKER_CD = :l_brk_cd;

						printf("\n l_sebi_reported----------------->|%s|\n",l_sebi_reported);
				printf("\n contract code== |%s| , deal date== |%s| , broker code== |%s|\n",l_contract_cd,l_deal_dt,l_brk_cd); // additional debug added by akshay for kotak 10944
		
							if (!strcmp( l_sebi_reported,"Y"))
								strcpy(no,APL_IND_YES);
							else
								strcpy(no,APL_IND_NO);

							EXEC SQL UPDATE DL_BCN SET R_SETT_CODE = 'I',
							ACCESS_STAMP =:l_chr_sys_time_stamp:l_i_access_stamp,
							R_DELAY ='P',
							R_TYPE = '15',
								SEBI_REPORTED = :no,
							CLH_FLG = 'D',
							AMEND_DT = :l_chr_sys_time_stamp:l_i_access_stamp
									  WHERE									  
									  CONTRACT_CD = :l_contract_cd AND
									  trunc(DL_DATE) = to_char(to_date(:l_deal_dt,'dd/mm/yyyy hh24:mi:ss'),'dd/mm/yyyy') AND
									  BROKER_CD = :l_brk_cd;

							IS_ANY_ORA_ERROR;
							
							
					/*Kotubabu-EquityFund-Start*/
					EXEC SQL SELECT getclientparambyid('EARLY_PAYIN_FND',:l_dl_client) into :l_param_value FROM DUAL;
			        printf("sqlca.sqlcode |%d|",sqlca.sqlcode);
			        IS_ANY_ORA_ERROR
			        printf("\n Param Value is |%s|",l_param_value);
			        printf("\n Client is |%s|",l_dl_client);
			        printf("\n Reference is  |%s|",l_dl_ref_no);

				if((!strcmp(l_host_date,APL_NULL_STRING)==0)&&(strcmp(l_param_value,"Y")==0))
				{
              EXEC SQL SELECT DISTINCT CLIENT,DECODE(STATUS,'P','PASSED','G','GENERATED','NO') into :l_account_no,:l_stat                             FROM PRO_ACCTENT  WHERE (SUBSTR(DEAL_IDENT,0,INSTR(DEAL_IDENT,'|',1,2)-1))= (SELECT CLIENT||'|'||IDENTIY_NO FROM DL_DEAL WHERE CLIENT=:l_dl_client AND IDENTIY_NO=:l_dl_ref_no) AND ACC_TYPE='C';
            	                                printf("sqlca.sqlcode |%d|",sqlca.sqlcode);
						IS_ANY_ORA_ERROR

						memset(chr_g_log_buffer, NULL, sizeof(chr_g_log_buffer));
						sprintf(chr_g_log_buffer, "\n %s,%s,%s,%s,%lf,%lf,%lf,%s,%s,%s ",l_dl_client,l_dl_ref_no,l_instr_code,l_settl_no,l_qty,l_amt,l_net_amt,l_account_no,l_stat,l_param_value);
						fprintf(Early_Payin_logfile,"%s",chr_g_log_buffer);
						EXEC SQL UPDATE DL_DEAL SET HOST_DATE='' WHERE CLIENT=:l_dl_client AND IDENTIY_NO=:l_dl_ref_no;
						IS_ANY_ORA_ERROR

						l_not_found++;
					}
				    else if(strcmp(l_param_value,"Y")==0 && strcmp(l_host_date,APL_NULL_STRING)==0)
					{
                        strcpy(l_stat,"NO");
						printf("sqlca.sqlcode |%d|",sqlca.sqlcode);
						IS_ANY_ORA_ERROR

						memset(chr_g_log_buffer, NULL, sizeof(chr_g_log_buffer));
						sprintf(chr_g_log_buffer, "\n %s,%s,%s,%s,%lf,%lf,%lf,%s,%s,%s ",l_dl_client,l_dl_ref_no,l_instr_code,l_settl_no,l_qty,l_amt,l_net_amt,l_account_no,l_stat,l_param_value);
						fprintf(Early_Payin_logfile,"%s",chr_g_log_buffer);

						l_not_found++;
					}
					memset(chr_g_log_buffer, NULL, sizeof(chr_g_log_buffer));
                    sprintf(chr_g_log_buffer," Client |%s| RFS No |%s|\n",l_dl_client,l_dl_ref_no);
				    fprintf(p_logfile,"%s",chr_g_log_buffer);
					/*Kotubabu-EquityFund-End*/
				}
			}
		}


	APL_GOBACK_SUCCESS
		RETURN_SUCCESS:
		{
			APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
		}

RETURN_FAILURE:
	{
		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
	}
}

