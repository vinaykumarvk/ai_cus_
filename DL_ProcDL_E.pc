

#include "CO_HostStructdef.h"

EXEC SQL INCLUDE SQLCA.H;





int DL_Mod_DLRegStat( DL_REGDET_STRUCT_H 		*p_dl_regdet_struct_h,
						REQDETAILS_STRUCT_H		*p_reqdetails_struct_h,
						INTL_ENV_DATA_STRUCT_H	*p_intl_env_data_struct_h,
						DEBUG_INFO_STRUCT_H			**l_debug_info_ptr )
{
	struct sqlca sqlca;
	DL_REGDET_STRUCT_I *l_dl_regdet_struct_i	 				= NULL;
	DL_DEALAUDIT_STRUCT_H *l_dl_dealaudit_struct_hb_a					= NULL;
	char 		chr_l_buf[BUFFER_LEN] 									= APL_NULL_STRING;
	char		chr_l_str_srlno[SEQ_NO_LEN]						= APL_NULL_STRING;
	char		chr_l_str_nxt_srlno[SEQ_NO_LEN]					= APL_NULL_STRING;
	char		chr_l_sysdatetime_A[APL_DATE_LEN]					= APL_NULL_STRING;
	char		chr_l_sysdate_b[APL_DATE_LEN]							= APL_NULL_STRING;
	char		chr_l_mainfuncarea[APL_MAINFUNCAREA_LEN]		= APL_NULL_STRING;
	char		chr_l_condid_a[APL_CONDID_LEN]						= APL_NULL_STRING;
	char		chr_l_tmpout_regstcode								= APL_NULL_CHAR;
	char		chr_l_tmpret_regstcode								= APL_NULL_CHAR;
	char 		chr_l_h_chld_prevreg[APL_FLAG_LENGTH]				= APL_NULL_STRING;
	char		chr_l_h_chld_manstatus[APL_FLAG_LENGTH]				= APL_NULL_STRING;
	char		chr_l_h_chld_posn_status[STATUS_POS_LEN]	= APL_NULL_STRING;
	char		chr_l_h_chld_fldupdt[FLD_UP_DATE_LEN]					= APL_NULL_STRING;
	char		chr_l_h_chld_regaudfun[APL_SUB_FUN_LEN]			= APL_NULL_STRING;
	char 		chr_l_h_prnt_access_stamp[APL_DATE_LEN]			= APL_NULL_STRING;
	char		chr_l_h_prnt_regstcode[APL_FLAG_LENGTH]				= APL_NULL_STRING;
	char		chr_l_h_prnt_posn_status[STATUS_POS_LEN]	= APL_NULL_STRING;
	char		chr_l_h_prnt_fldupdt[FLD_UP_DATE_LEN]					= APL_NULL_STRING;
	char		chr_l_h_trd_delrecdt[APL_DATE_LEN]				= APL_NULL_STRING;
	char		chr_l_h_trd_instrcode[APL_INSTRUMENTCODE_LEN]				= APL_NULL_STRING;
	char		chr_l_h_instrcode_A[APL_INSTRUMENTCODE_LEN]						= APL_NULL_STRING;
	char		chr_l_h_trd_locncode[APL_LOCNCODE_LENGTH]			= APL_NULL_STRING;
	char		chr_l_h_trd_rowid[APL_ROWID_LEN]					= APL_NULL_STRING;
	char		chr_l_h_trd_trcode[APL_FLAG_LENGTH]					= APL_NULL_STRING;
	char 		chr_l_h_trd_regstatus[APL_FLAG_LENGTH]				= APL_NULL_STRING;
	char		chr_l_h_trd_tmpoutdt[APL_DATE_LEN]				= APL_NULL_STRING;
	char		chr_l_h_trd_tmpretdt[APL_DATE_LEN]				= APL_NULL_STRING;
	char		chr_l_h_trd_trdfromord[APL_FLAG_LENGTH]				= APL_NULL_STRING;
	char		chr_l_h_trd_posn_status[STATUS_POS_LEN]		= APL_NULL_STRING;
	char		chr_l_h_trd_candropdt[APL_DATE_LEN]				= APL_NULL_STRING;
	char		chr_l_h_trd_maker[APL_USERID_LEN]					= APL_NULL_STRING;
	char		chr_l_h_trd_checker[APL_USERID_LEN]				= APL_NULL_STRING;
	char		chr_l_h_trd_checkerdt[APL_DATE_LEN]				= APL_NULL_STRING;
	char		chr_l_h_trd_domcpac[APL_CLIENT_LENGTH]				= APL_NULL_STRING;
	char		chr_l_h_trd_domcpbnkac[APL_CLIENT_LENGTH]			= APL_NULL_STRING;
	char		chr_l_h_trd_countacc[APL_COUNTACC_LEN]			= APL_NULL_STRING;  
	char		chr_l_h_trd_ccycode[APL_CCYCODE_LEN]				= APL_NULL_STRING;
	char		chr_l_h_acc_canreg[APL_FLAG_LENGTH]					= APL_NULL_STRING;
	double	l_availquantity											= 0;
	double	l_retposn 											= 0;
	double	l_round_val											= 0;
	double	l_tot_prnt_quantity										= 0;
	double	l_temp_quantityrnd										= 0;
	double	l_temp_prnt_quantity									= 0;
	double	l_temp_prnt_quantityrnd								= 0;
	double	l_h_prnt_quantity										= 0;
	double	l_h_prnt_moved_qty									= 0;
	double	l_h_prnt_manifold_qty								= 0;
	double	l_h_trd_quantity											= 0;
	double	l_h_trd_dl_completeqty									= 0;
	double	l_h_trd_complquantity									= 0;
	double 	l_h_trd_qty_lost									= 0;
	double	l_h_trd_recinto000								= 0;
	double	l_h_trd_pend_reg_qty								= 0;
	double	l_h_manifold_qty										= 0;
	double	l_h_quantitymanifldrnd									= 0;
	double	l_h_moved_qty										= 0;
	double	l_h_quantitymovedrnd									= 0;
	int		int_l_cnt													= 0;
	int		int_l_datecmp											= 0;
	int		int_l_h_nxt_srlno										= 0;
	int		int_l_prnt_srlno										= 0;
	short		l_i_nxt_srlno										= 0;
	short		int_l_condexists_A										= 0;
	short 	int_l_error_flg 										= APL_SUCCESS;
	short		l_i_chld_quantity									= 0;
	short 	l_i_chld_prevreg									= 0;
	short 	l_i_chld_manstatus								= 0;
	short 	l_i_chld_posn_status								= 0;
	short		l_i_chld_fldupdt									= 0;
	short		l_i_chld_regaudfun								= 0;
	short 	l_i_prnt_access_stamp							= 0;
	short 	l_i_prnt_regstcode								= 0;
	short 	l_i_prnt_qty										= 0;
	short 	l_i_prnt_qtymoved									= 0;
	short 	l_i_prnt_qtymanifld								= 0;
	short 	l_i_prnt_posn_status								= 0;
	short		l_i_prnt_fldupdt									= 0;
	short 	l_i_trd_delrecdt									= 0;
	short		l_i_trd_locncode									= 0;
	short		l_i_trd_instr_code										= 0;
	short		l_i_trd_trcode										= 0;
	short 	l_i_trd_regstatus									= 0;
	short		l_i_trd_qty											= 0;
	short		l_i_trd_tmpoutdt									= 0;
	short		l_i_trd_tmpretdt									= 0;
	short		l_i_trd_trdfromord								= 0;
	short		l_i_trd_rowid										= 0;
	short		l_i_trd_mcomplqty									= 0;
	short		l_i_trd_complqty									= 0;
	short		l_i_trd_pendregqty								= 0;
	short		l_i_trd_lostqty									= 0;
	short		l_i_trd_recinto000								= 0;
	short		l_i_trd_posn_status								= 0;
	short		l_i_trd_candropdt									= 0;
	short		l_i_trd_maker										= 0;
	short		l_i_trd_checker									= 0;
	short		l_i_trd_checkerdt									= 0;
	short		l_i_trd_domcpac									= 0;
	short		l_i_trd_domcpbnkac								= 0;
	short		l_i_trd_countacc									= 0;
	short		l_i_trd_ccycode									= 0;
	short		l_i_acc_canreg										= 0;
	short		l_i_instr_code											= 0;
	short		l_i_qtymanifld										= 0;
	short		l_i_qtymoved										= 0;
	short    l_ext_trd_check                           = 0;   

	char l_block_type[5] = APL_NULL_STRING;


	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR chr_l_sql_stmt[200];
	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;
	
	EXEC SQL VAR chr_l_h_chld_prevreg 		IS STRING;
	EXEC SQL VAR chr_l_h_chld_manstatus		IS STRING;
	EXEC SQL VAR chr_l_h_chld_posn_status	IS STRING;
	EXEC SQL VAR chr_l_h_chld_fldupdt			IS STRING;
	EXEC SQL VAR chr_l_h_chld_regaudfun		IS STRING;
	EXEC SQL VAR chr_l_h_prnt_regstcode		IS STRING;
	EXEC SQL VAR chr_l_h_prnt_posn_status	IS STRING;
	EXEC SQL VAR chr_l_h_prnt_fldupdt			IS STRING;
	EXEC SQL	VAR chr_l_h_prnt_access_stamp 	IS STRING;
	EXEC SQL VAR chr_l_h_trd_instrcode			IS STRING;
	EXEC SQL VAR chr_l_h_trd_locncode			IS STRING;
	EXEC SQL VAR chr_l_h_trd_trcode			IS STRING;
	EXEC SQL VAR chr_l_h_trd_regstatus		IS STRING;
	EXEC SQL VAR chr_l_h_trd_trdfromord		IS STRING;
	EXEC SQL VAR chr_l_h_trd_posn_status		IS STRING;
	EXEC SQL VAR chr_l_h_trd_delrecdt			IS STRING;
	EXEC SQL VAR chr_l_h_trd_rowid				IS STRING;
	EXEC SQL VAR chr_l_h_trd_tmpoutdt			IS STRING;
	EXEC SQL VAR chr_l_h_trd_tmpretdt			IS STRING;
	EXEC SQL VAR chr_l_h_trd_candropdt		IS STRING;
	EXEC SQL VAR chr_l_h_trd_maker				IS STRING;
	EXEC SQL VAR chr_l_h_trd_checker			IS STRING;
	EXEC SQL VAR chr_l_h_trd_checkerdt		IS STRING;
	EXEC SQL VAR chr_l_h_trd_domcpac			IS STRING;
	EXEC SQL VAR chr_l_h_trd_domcpbnkac		IS STRING;
	EXEC SQL VAR chr_l_h_trd_countacc			IS STRING;
	EXEC SQL VAR chr_l_h_trd_ccycode			IS STRING;
	EXEC SQL VAR chr_l_h_acc_canreg			IS STRING;

	

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE,
						"Entering Function DL_Mod_DLRegStat\n",
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(	chr_l_buf,
					"The Account is : %s\n",
					p_dl_regdet_struct_h->h_dl_client);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf( chr_l_buf,
					"The Reference Number is : %s\n",
					p_dl_regdet_struct_h->h_indentity_no);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(	chr_l_buf,
					"The Serial Number is : %d\n",
					p_dl_regdet_struct_h->h_srl_no);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(	chr_l_buf,
					"The Registration Code is : %s\n",
					p_dl_regdet_struct_h->h_reg_st_cd);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(	chr_l_buf,
					"The Transaction Date is : %s\n",
					p_dl_regdet_struct_h->h_txndate);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(	chr_l_buf,
					"The Quantity is : %f\n",
					p_dl_regdet_struct_h->h_qty);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(	chr_l_buf,
					"The Access Stamp is : %s\n",
					p_dl_regdet_struct_h->h_access_stamp);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(	chr_l_buf,
					"The quantity being moved is : %f\n",
					p_dl_regdet_struct_h->h_quantitymoved);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(	chr_l_buf,
					"The Manifold Quantitys is : %f\n",
					p_dl_regdet_struct_h->h_quantitymanifld);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(	chr_l_buf,
					"The Date Accounted for is : %s\n",
					p_dl_regdet_struct_h->h_dtcltfor);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(	chr_l_buf,
					"The Stamp Money Recd. PRC Date is : %s\n",
					p_dl_regdet_struct_h->h_prcsmrdate);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(	chr_l_buf,
					"The PRC Status is : %s\n",
					p_dl_regdet_struct_h->h_status_prc);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(	chr_l_buf,
					"The Settlement PRC Date is : %s\n",
					p_dl_regdet_struct_h->h_prcstldate);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(	chr_l_buf,
					"The Stamp Money Amount is : %f\n",
					p_dl_regdet_struct_h->h_smramount);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf( chr_l_buf,
					"The Number of elements is : %d\n",
					p_reqdetails_struct_h->h_element_cnt); 
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
	}

	

	if ( l_mt_core_sys_params_struct_h.proc_reg_ind[0] == 'N' )
	{
		CO_InsertErr( 	l_debug_info_ptr,
								ERR_DATA_INTEGRITY,
								"Regn. Not Supported",
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__ );
		APL_GOBACK_FAIL;
	}

	

	if (!strlen(p_dl_regdet_struct_h->h_dl_client))
	{
		APL_DATA_MISSING(	"Account",
								APL_NULL_STRING,
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	}

	if (!strlen(p_dl_regdet_struct_h->h_indentity_no))
	{
		APL_DATA_MISSING(	"Reference Number",
								APL_NULL_STRING,
								APL_NULL_STRING);
		int_l_error_flg = APL_FAILURE;
	}

	if (!strlen(p_dl_regdet_struct_h->h_reg_st_cd))
	{
		APL_DATA_MISSING(	"Reg. Status Code",
								APL_NULL_STRING,
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	}

	if (!strlen(p_dl_regdet_struct_h->h_txndate))
	{
		APL_DATA_MISSING(	"Transaction Date",
								APL_NULL_STRING,
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	}

	if (p_dl_regdet_struct_h->h_qty == 0)
	{
		APL_DATA_MISSING(	"Reg. Quantity",
								APL_NULL_STRING,
								APL_NULL_STRING ); 
		int_l_error_flg = APL_FAILURE;
	}

	

	EXEC SQL SELECT 	PREV_REG,
							STATUS,
							MAN_STAT,
							FLD_UP_DATE,
							REG_AUD_FUN
				INTO		:chr_l_h_chld_prevreg:l_i_chld_prevreg,
							:chr_l_h_chld_posn_status:l_i_chld_posn_status,
							:chr_l_h_chld_manstatus:l_i_chld_manstatus,
							:chr_l_h_chld_fldupdt:l_i_chld_fldupdt,
							:chr_l_h_chld_regaudfun:l_i_chld_regaudfun
				FROM		DL_REGCYCLE
				WHERE		REG_ST_CD = :p_dl_regdet_struct_h->h_reg_st_cd
				AND		NATION	 = :g_mt_commonsys_params_struct_h.nation_code;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_DATA_INTEGRITY,
														"Static Reg. Dtls",
														p_dl_regdet_struct_h->h_reg_st_cd,
														APL_NULL_STRING );
	
	

	if ( strlen(chr_l_h_chld_prevreg) && ( p_reqdetails_struct_h->h_element_cnt == 0 )) 
	{
		APL_DATA_MISSING( "Reg. Dtls of Parent",
								APL_NULL_STRING,
								APL_NULL_STRING);
		int_l_error_flg = APL_FAILURE;
	}

	if ( int_l_error_flg == APL_FAILURE )
	{
		APL_GOBACK_FAIL;
	}

	
		
	EXEC SQL SELECT 	DEL_REC_DATE,
							INSTR_CODE,
							LOCATION_CD,
							DEAL_CD,
							STATUS,
							QTY,
							TMP_OUT_DT,
							TMP_OUT_DATE,
							DEAL_FRM_ORD,
							STATUS_POS,
							MAKER,
							CHECKER,
							CHECKER_DT,
							DOMESTIC_CPCLT,
							DOMCP_CUSTODYCLT,
							CP_CLT,
							CURRENCY_CD,
							TOT_QTY,
							QTY_LOST,
							DL_COMPLETEQTY,
							REC_INT_000,
							ROWID 
				INTO		:chr_l_h_trd_delrecdt:l_i_trd_delrecdt,
							:chr_l_h_trd_instrcode:l_i_trd_instr_code,
							:chr_l_h_trd_locncode:l_i_trd_locncode,
							:chr_l_h_trd_trcode:l_i_trd_trcode,
							:chr_l_h_trd_regstatus:l_i_trd_regstatus,
							:l_h_trd_quantity:l_i_trd_qty,
							:chr_l_h_trd_tmpoutdt:l_i_trd_tmpoutdt,
						   :chr_l_h_trd_tmpretdt:l_i_trd_tmpretdt,
							:chr_l_h_trd_trdfromord:l_i_trd_trdfromord,
							:chr_l_h_trd_posn_status:l_i_trd_posn_status,
							:chr_l_h_trd_maker:l_i_trd_maker,
							:chr_l_h_trd_checker:l_i_trd_checker,
							:chr_l_h_trd_checkerdt:l_i_trd_checkerdt,
							:chr_l_h_trd_domcpac:l_i_trd_domcpac,
							:chr_l_h_trd_domcpbnkac:l_i_trd_domcpbnkac,
							:chr_l_h_trd_countacc:l_i_trd_countacc,
							:chr_l_h_trd_ccycode:l_i_trd_ccycode,
							:l_h_trd_complquantity:l_i_trd_complqty,
							:l_h_trd_qty_lost:l_i_trd_lostqty,
							:l_h_trd_dl_completeqty:l_i_trd_mcomplqty,
							:l_h_trd_recinto000:l_i_trd_recinto000,
							:chr_l_h_trd_rowid:l_i_trd_rowid
				FROM		DL_DEAL
				WHERE		CLIENT 	= :p_dl_regdet_struct_h->h_dl_client
				AND		IDENTIY_NO		= :p_dl_regdet_struct_h->h_indentity_no
				FOR UPDATE OF ACCESS_STAMP;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_DEAL_NF,
														p_dl_regdet_struct_h->h_dl_client,
														p_dl_regdet_struct_h->h_indentity_no,
														APL_NULL_STRING );

	

	EXEC SQL SELECT 	CLN_ALLOW_REGIND
				INTO		:chr_l_h_acc_canreg:l_i_acc_canreg
				FROM		MT_CLIENT
				WHERE		CLN_CODE = :p_dl_regdet_struct_h->h_dl_client 
				FOR UPDATE OF ACCESS_STAMP;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_ACCNOT_FND,
														p_dl_regdet_struct_h->h_dl_client,
														APL_NULL_STRING,
														APL_NULL_STRING );

	if ( l_i_trd_complqty == -1 )
	{
		l_h_trd_complquantity = 0;
	}

	if ( l_i_trd_mcomplqty == -1 )
	{
		l_h_trd_dl_completeqty = 0;
	}

	if ( l_i_trd_lostqty == -1 )
	{
		l_h_trd_qty_lost = 0;
	}

	if ( l_i_trd_recinto000 == -1 )
	{
		l_h_trd_recinto000 = 0;
	}

	

	

	if ( VAL_DELIVER_DEAL(chr_l_h_trd_trcode[0]) || chr_l_h_trd_trcode[0]=='5' || chr_l_h_trd_trcode[0]=='7')
	{
		CO_InsertErr(	l_debug_info_ptr,
								ERR_DATA_INTEGRITY,
								"Dlvr Trd - Can't Reg",
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__ );
		APL_GOBACK_FAIL;
	}

	

	if ( 	chr_l_h_acc_canreg[0] == 'N' && 
			(  p_dl_regdet_struct_h->h_reg_st_cd[0] != PEND_REG_CODE &&
				p_dl_regdet_struct_h->h_reg_st_cd[0] != DL_MARKCOMPL_REGSTCODE ) )
	{
		CO_InsertErr(	l_debug_info_ptr,
								ERR_ACCOUNT_CANT_REGSTR,
								p_dl_regdet_struct_h->h_dl_client,
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__ );
		int_l_error_flg = APL_FAILURE;
	}

	

	if ( !strcmp( chr_l_h_trd_posn_status, STATUS_POS_000 ) )
	{
		CO_InsertErr(	l_debug_info_ptr,
								ERR_DEAL_INVALID_POSNTYPE,
								STATUS_POS_000,
								"Cannot Register",
								APL_NULL_STRING,
								__LINE__,
								__FILE__ );
		int_l_error_flg = APL_FAILURE;
	}
	
	

	strcpy( chr_l_mainfuncarea, APL_NULL_STRING );
	strcpy( chr_l_condid_a, APL_NULL_STRING );
	strcpy( chr_l_mainfuncarea, "TRD_SETTLEMENT" );
	strcpy( chr_l_condid_a, "CANRECINT000" );
	int_l_condexists_A = 0;

	if ( APL_FAILURE == CO_Chk_CntryEnabled( chr_l_mainfuncarea,
														chr_l_condid_a,
														&int_l_condexists_A,
														l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL;
	}
	
	if ( int_l_condexists_A > 0 )
	{
		if ( l_h_trd_complquantity + l_h_trd_qty_lost + l_h_trd_dl_completeqty + l_h_trd_recinto000 == l_h_trd_quantity )
		{
			CO_InsertErr(	l_debug_info_ptr,
									ERR_DEAL_NOTHING_REG,
									p_dl_regdet_struct_h->h_dl_client,
									p_dl_regdet_struct_h->h_indentity_no,
									APL_NULL_STRING,
									__LINE__,
									__FILE__ );
			int_l_error_flg = APL_FAILURE;
		}
	}
	else
	{
		if ( l_h_trd_complquantity + l_h_trd_qty_lost + l_h_trd_dl_completeqty == l_h_trd_quantity )
		{
			CO_InsertErr(	l_debug_info_ptr,
									ERR_DEAL_NOTHING_REG,
									p_dl_regdet_struct_h->h_dl_client,
									p_dl_regdet_struct_h->h_indentity_no,
									APL_NULL_STRING,
									__LINE__,
									__FILE__ );
			int_l_error_flg = APL_FAILURE;
		}
	}

	

	if ( l_h_trd_quantity != p_dl_regdet_struct_h->h_qty && 
				l_mt_core_sys_params_struct_h.part_reg_ind[0] == 'N' )
	{
		CO_InsertErr(	l_debug_info_ptr,
								ERR_PARTIAL_NOTALLOWED,
								"Chld Qty != Trd Qty",
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__ );
		APL_GOBACK_FAIL;
	}
	
	

	if ( APL_FAILURE == CO_RtvSysDt( 	chr_l_sysdate_b,
														l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL;
	}

	

	int_l_datecmp = 0;

	if ( APL_FAILURE == CO_Pro_DateComp( 	chr_l_sysdate_b,
													p_dl_regdet_struct_h->h_txndate,
													&int_l_datecmp,
													l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL;
	}

	if ( int_l_datecmp > 0 )
	{
		CO_InsertErr(	l_debug_info_ptr,
								ERR_DATE_CANT_GRT_TODAY,
								p_dl_regdet_struct_h->h_txndate,
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__ );
		APL_GOBACK_FAIL;
	}

	

	if ( APL_FAILURE == DL_Chk_DLDet( p_dl_regdet_struct_h->h_dl_client,
												p_dl_regdet_struct_h->h_indentity_no,
												'Y', 'Y', 'N', 'Y', NULL, 
												'Y', NULL, NULL, l_debug_info_ptr ) )
	{
		int_l_error_flg = APL_FAILURE;
	}
	
	

	

	if (chr_l_h_trd_trdfromord[0] == 'Y')
	{
		if ( APL_FAILURE == CO_Chk_AccValid( p_dl_regdet_struct_h->h_dl_client,
													'Y', 'C', 'B', NULL, 'Y', 'N',
													'N', 'N', l_debug_info_ptr ) )
		{
			int_l_error_flg = APL_FAILURE;
		}
	}
	else
	{
		if ( APL_FAILURE == CO_Chk_AccValid( p_dl_regdet_struct_h->h_dl_client,
													'Y','C',NULL,NULL,'Y','N',
													'N','N',l_debug_info_ptr))
		{
			int_l_error_flg = APL_FAILURE;
		}
	}
	

	if ( APL_FAILURE == CO_Chk_AccValid( chr_l_h_trd_domcpac,
												'Y', 'B', NULL, NULL, 'Y', 'N',
												'N', 'N', l_debug_info_ptr ) )
	{
		int_l_error_flg = APL_FAILURE;
	}											

	

	if ( APL_FAILURE == CO_Chk_AccValid( chr_l_h_trd_domcpbnkac,
												'Y', 'B', NULL, NULL, 'Y', 'N',
												'N', 'N', l_debug_info_ptr ) )
	{
		int_l_error_flg = APL_FAILURE;
	}											

	
	
	strcpy(chr_l_mainfuncarea, "TRD_MAINT");
	strcpy(chr_l_condid_a, "EXT_TRD_CNTAC_ALWD");
	l_ext_trd_check =0;
	
	if (APL_FAILURE == CO_Chk_CntryEnabled(chr_l_mainfuncarea,
													chr_l_condid_a,
													&l_ext_trd_check,
													l_debug_info_ptr))
	{
		APL_GOBACK_FAIL;
	}
	if ((l_ext_trd_check == 0) || (strcmp(l_mt_core_sys_params_struct_h.custody_clt_cd,chr_l_h_trd_domcpac)==0))
	{
		if ( l_i_trd_countacc == 0 )
		{
			if ( APL_FAILURE == CO_Chk_AccValid( chr_l_h_trd_countacc,
														'Y', 'C', 'C', NULL, 'Y', 'N',
														'N', 'N', l_debug_info_ptr ) )
			{
				int_l_error_flg = APL_FAILURE;
			}
		}
	}
	
	

	if ( APL_FAILURE == CO_Chk_InstrValid(	chr_l_h_trd_instrcode,
												'Y', 'Y', 'N', 'N', NULL, NULL,
												l_debug_info_ptr ) )
	{
		int_l_error_flg = APL_FAILURE;
	}

	

	if ( l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y' )
	{
		if ( APL_FAILURE == MT_Chk_Loc( chr_l_h_trd_locncode,
													'Y', 'Y', 'N', 
													l_debug_info_ptr ) )
		{
			int_l_error_flg = APL_FAILURE;
		}	
	}

	

	if ( APL_FAILURE == CO_Chk_CcyValid( chr_l_h_trd_ccycode,
												'M', 'Y', l_debug_info_ptr ) )
	{
		int_l_error_flg = APL_FAILURE;
	}

	if ( int_l_error_flg == APL_FAILURE )
	{
		APL_GOBACK_FAIL;
	}

	

	if ( l_i_chld_prevreg == 0 )
	{
		EXEC SQL SELECT 	STATUS,
								FLD_UP_DATE
					INTO		:chr_l_h_prnt_posn_status:l_i_prnt_posn_status,
								:chr_l_h_prnt_fldupdt:l_i_prnt_fldupdt
					FROM		DL_REGCYCLE
					WHERE		REG_ST_CD 	= :chr_l_h_chld_prevreg
					AND		NATION		= :g_mt_commonsys_params_struct_h.nation_code;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_MAND_DATA_MISSING,
															"Static Reg. Dtls",
															chr_l_h_chld_prevreg,
															APL_NULL_STRING );
		

		if ( strcmp( chr_l_h_prnt_posn_status, chr_l_h_chld_posn_status ) ) 
		{

			
			if(CA_Rtv_Block_Type(  p_dl_regdet_struct_h->h_indentity_no,
						APL_NULL_STRING,
						chr_l_h_trd_trcode,
						l_block_type,
						l_debug_info_ptr) == APL_FAILURE)
			{
					APL_GOBACK_FAIL
			}
			if ( APL_FAILURE == DL_Proc_PosLock( p_dl_regdet_struct_h->h_dl_client,
															chr_l_h_trd_instrcode,
															chr_l_h_trd_locncode,
															chr_l_h_prnt_posn_status,l_block_type,
															l_debug_info_ptr ) )
			{
				APL_GOBACK_FAIL;
			}

			

			if ( APL_FAILURE == DL_Proc_PosCalc( 	p_dl_regdet_struct_h->h_dl_client,
															chr_l_h_trd_instrcode,
															chr_l_h_trd_locncode,
															chr_l_h_prnt_posn_status,
															APL_NULL_STRING,
															"SFK",
															&l_retposn,l_block_type,
															l_debug_info_ptr ) )
			{
				APL_GOBACK_FAIL;
			}

			

			if ( l_retposn < p_dl_regdet_struct_h->h_qty )
			{
				CO_InsertErr(	l_debug_info_ptr,
										ERR_DEAL_NENUFPOSN,
										p_dl_regdet_struct_h->h_dl_client,
										p_dl_regdet_struct_h->h_indentity_no,
										chr_l_h_prnt_posn_status,
										__LINE__,
										__FILE__ );
				APL_GOBACK_FAIL;
			}															
		}
	}

	for (int_l_cnt=0;int_l_cnt<p_reqdetails_struct_h->h_element_cnt;int_l_cnt++)
	{
		
		

		strcpy(	chr_l_str_srlno, APL_NULL_STRING);
		sprintf(	chr_l_str_srlno, "%d", *(p_reqdetails_struct_h->h_srl_no+int_l_cnt));//AIX Warning Removal

		

		int_l_prnt_srlno = *(p_reqdetails_struct_h->h_srl_no+int_l_cnt);

		EXEC SQL SELECT 	ACCESS_STAMP,
							 	REG_ST_CD,
							 	QUANTITY,
								MOVED_QTY,
								MANIFOLD_QTY
					INTO	 	:chr_l_h_prnt_access_stamp:l_i_prnt_access_stamp,
							 	:chr_l_h_prnt_regstcode:l_i_prnt_regstcode,
								:l_h_prnt_quantity:l_i_prnt_qty,
								:l_h_prnt_moved_qty:l_i_prnt_qtymoved,
								:l_h_prnt_manifold_qty:l_i_prnt_qtymanifld
					FROM	 DL_REGDET
					WHERE	 CLIENT 	= :p_dl_regdet_struct_h->h_dl_client
					AND	 IDENTIY_NO		= :p_dl_regdet_struct_h->h_indentity_no
					AND	 SRL_NO	= :int_l_prnt_srlno
					FOR UPDATE OF ACCESS_STAMP;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_REC_NOTFND,
															p_dl_regdet_struct_h->h_dl_client,
															p_dl_regdet_struct_h->h_indentity_no,
															chr_l_str_srlno );

		

		if ( l_i_prnt_qtymoved == -1 )
		{
			l_h_prnt_moved_qty = 0;
		}

		if ( l_i_prnt_qtymanifld == -1 )
		{
			l_h_prnt_manifold_qty = 0;
		}

		

		if ( strncmp(chr_l_h_prnt_access_stamp, (p_reqdetails_struct_h->h_access_stamp+(int_l_cnt * APL_DATE_LEN)), APL_DATE_LEN - 1 ))
		{
			if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
															ERR_ACCESSSTAMP_CHGD,
															p_dl_regdet_struct_h->h_dl_client,
															p_dl_regdet_struct_h->h_indentity_no,
															chr_l_str_srlno,
															__LINE__,
															__FILE__ ) )
			{
				APL_GOBACK_FAIL;
			}

			int_l_error_flg = APL_FAILURE;
		}

		

		if ( strcmp( chr_l_h_prnt_regstcode, chr_l_h_chld_prevreg ) )
		{
			if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
															ERR_DATA_INTEGRITY, 
															"Parent Reg. Status",
															APL_NULL_STRING,
															APL_NULL_STRING,
															__LINE__,
															__FILE__ ) )
			{
				APL_GOBACK_FAIL;
			}

			int_l_error_flg = APL_FAILURE;
		}	

		
							
					
		if ( MANIFOLD_REG_STAT(p_dl_regdet_struct_h->h_reg_st_cd[0]) )
		{
			l_availquantity = l_h_prnt_quantity - l_h_prnt_manifold_qty;
		}
		else
		{
			if ( l_i_chld_manstatus == 0 )
			{
				if ( l_i_trd_delrecdt == 0 )
				{
					l_availquantity = l_h_prnt_manifold_qty - l_h_prnt_moved_qty;
				}
				else if ( l_i_trd_delrecdt == -1 )
				{
					l_availquantity = l_h_prnt_quantity - l_h_prnt_moved_qty;
				}
			}
			else if ( l_i_chld_manstatus == -1 )
			{
				l_availquantity = l_h_prnt_quantity - l_h_prnt_moved_qty;
			}	
		}	

		
		
		if ( l_availquantity < *(p_reqdetails_struct_h->h_qty+int_l_cnt) )
		{
			if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
															ERR_DEAL_NENUFPOSN,
															"Parent",
															APL_NULL_STRING,
															APL_NULL_STRING,
															__LINE__,
															__FILE__ ) )
			{
				int_l_error_flg = APL_FAILURE;
			}
		}

		

		l_tot_prnt_quantity = l_tot_prnt_quantity + *(p_reqdetails_struct_h->h_qty+int_l_cnt);

	}

	

	if ( l_tot_prnt_quantity != p_dl_regdet_struct_h->h_qty && 
			p_reqdetails_struct_h->h_element_cnt > 0 )
	{
		if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
														ERR_DATA_INTEGRITY,
														"Prnt Qty != Chld Qty",
														APL_NULL_STRING,
														APL_NULL_STRING,
														__LINE__,
														__FILE__ ) )
		{
			APL_GOBACK_FAIL;
		}
		int_l_error_flg = APL_FAILURE;
	}

	if (int_l_error_flg == APL_FAILURE )
	{		
		APL_GOBACK_FAIL;
	}

	if ( APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr) )
	{
		APL_GOBACK_FAIL;
	}

	

	

	l_dl_regdet_struct_i = (DL_REGDET_STRUCT_I *)calloc(1,sizeof(DL_REGDET_STRUCT_I) );
	APL_MALLOC_FAIL(l_dl_regdet_struct_i);
	
	

	l_dl_regdet_struct_i->i_dl_client 		= 0;
	l_dl_regdet_struct_i->i_indentity_no			= 0;
	l_dl_regdet_struct_i->i_srl_no		= 0;
	l_dl_regdet_struct_i->i_reg_st_cd	 	= 0;
	l_dl_regdet_struct_i->i_txndate 			= 0;
	l_dl_regdet_struct_i->i_qty		= 0;
	l_dl_regdet_struct_i->i_access_stamp	= 0;
	l_dl_regdet_struct_i->i_quantitymoved		= -1;
	l_dl_regdet_struct_i->i_quantitymanifld		= -1;
	l_dl_regdet_struct_i->i_dtcltfor 		= -1;
	l_dl_regdet_struct_i->i_prcsmrdate 		= -1;
	l_dl_regdet_struct_i->i_status_prc 		= -1;
	l_dl_regdet_struct_i->i_prcstldate 		= -1;
	l_dl_regdet_struct_i->i_smramount			= -1;

	if ( APL_FAILURE == CO_RtvSysDtTime(	chr_l_sysdatetime_A,
															l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL;
	}

	

	EXEC SQL SELECT 	MAX(SRL_NO)
				INTO		:int_l_h_nxt_srlno:l_i_nxt_srlno
				FROM 		DL_REGDET
				WHERE 	CLIENT 	= :p_dl_regdet_struct_h->h_dl_client
				AND		IDENTIY_NO		= :p_dl_regdet_struct_h->h_indentity_no;

	IS_ANY_ORA_ERROR;

	

	if ( l_i_nxt_srlno == -1 )
	{
		p_dl_regdet_struct_h->h_srl_no = 1;
	}
	else if ( l_i_nxt_srlno == 0 )
	{
		p_dl_regdet_struct_h->h_srl_no = int_l_h_nxt_srlno + 1;
	}

	strcpy( p_dl_regdet_struct_h->h_access_stamp, chr_l_sysdatetime_A );

	

	strcpy(	chr_l_str_nxt_srlno, APL_NULL_STRING);
	sprintf(	chr_l_str_nxt_srlno, "%d", p_dl_regdet_struct_h->h_srl_no );//AIX Warning Removal

	

	CR_Proc_InstrQtyRound( p_dl_regdet_struct_h->h_qty, chr_l_h_trd_instrcode, &l_round_val,l_debug_info_ptr);

	p_dl_regdet_struct_h->h_qty = l_round_val;

	EXEC SQL INSERT INTO DL_REGDET VALUES (:p_dl_regdet_struct_h:l_dl_regdet_struct_i);

	IS_ANY_ORA_ERROR_AND_DUPLICATE(	ERR_REC_EXIST,
													p_dl_regdet_struct_h->h_dl_client,
													p_dl_regdet_struct_h->h_indentity_no,
													chr_l_str_nxt_srlno );

	
	
	for (int_l_cnt=0;int_l_cnt<p_reqdetails_struct_h->h_element_cnt;int_l_cnt++)
	{

		strcpy( chr_l_str_srlno, APL_NULL_STRING );
		sprintf( chr_l_str_srlno, "%d", *(p_reqdetails_struct_h->h_srl_no+int_l_cnt));//AIX Warning Removal

		int_l_prnt_srlno = *(p_reqdetails_struct_h->h_srl_no+int_l_cnt);

		

		l_temp_prnt_quantity = *(p_reqdetails_struct_h->h_qty + int_l_cnt);


		if ( MANIFOLD_REG_STAT(p_dl_regdet_struct_h->h_reg_st_cd[0]) )
		{
			EXEC SQL SELECT CREDIT_IND.INSTR_CODE,NVL(CR.MANIFOLD_QTY,0)
			INTO :chr_l_h_instrcode_A:l_i_instr_code,:l_h_manifold_qty:l_i_qtymanifld
			FROM DL_REGDET CR , DL_DEAL CREDIT_IND
			WHERE CR.CLIENT = :p_dl_regdet_struct_h->h_dl_client
			AND CR.IDENTIY_NO    = :p_dl_regdet_struct_h->h_indentity_no
			AND CR.CLIENT = CREDIT_IND.CLIENT
			AND CR.IDENTIY_NO = CREDIT_IND.IDENTIY_NO
			AND CR.SRL_NO = :int_l_prnt_srlno;

			IS_ANY_ORA_ERROR;

			CR_Proc_InstrQtyRound(l_h_manifold_qty+l_temp_prnt_quantity,chr_l_h_instrcode_A,&l_h_quantitymanifldrnd,l_debug_info_ptr);

			EXEC SQL UPDATE DL_REGDET 
						SET	MANIFOLD_QTY 		= :l_h_quantitymanifldrnd,
								ACCESS_STAMP	= :chr_l_sysdatetime_A
						WHERE CLIENT	= :p_dl_regdet_struct_h->h_dl_client
						AND	IDENTIY_NO		= :p_dl_regdet_struct_h->h_indentity_no
						AND	SRL_NO	= :int_l_prnt_srlno;
		}
		else
		{
			EXEC SQL SELECT CREDIT_IND.INSTR_CODE,NVL(CR.MOVED_QTY,0)
			INTO :chr_l_h_instrcode_A:l_i_instr_code,:l_h_moved_qty:l_i_qtymoved
			FROM DL_REGDET CR , DL_DEAL CREDIT_IND
			WHERE CR.CLIENT = :p_dl_regdet_struct_h->h_dl_client
			AND CR.IDENTIY_NO    = :p_dl_regdet_struct_h->h_indentity_no
			AND CR.CLIENT = CREDIT_IND.CLIENT
			AND CR.IDENTIY_NO = CREDIT_IND.IDENTIY_NO
			AND CR.SRL_NO = :int_l_prnt_srlno;

			IS_ANY_ORA_ERROR;

			CR_Proc_InstrQtyRound(l_h_moved_qty+l_temp_prnt_quantity,chr_l_h_instrcode_A,&l_h_quantitymovedrnd,l_debug_info_ptr);

			EXEC SQL UPDATE DL_REGDET 
						SET	MOVED_QTY 		= :l_h_quantitymovedrnd,
								ACCESS_STAMP	= :chr_l_sysdatetime_A
						WHERE CLIENT	= :p_dl_regdet_struct_h->h_dl_client
						AND	IDENTIY_NO		= :p_dl_regdet_struct_h->h_indentity_no
						AND	SRL_NO	= :int_l_prnt_srlno;
		}			

		IS_ANY_ORA_ERROR;

		

		CR_Proc_InstrQtyRound(l_temp_prnt_quantity,chr_l_h_instrcode_A,&l_temp_prnt_quantityrnd,l_debug_info_ptr);

		EXEC SQL INSERT INTO DL_REGPAR
					VALUES	(	:p_dl_regdet_struct_h->h_dl_client,
									:p_dl_regdet_struct_h->h_indentity_no,
									:p_dl_regdet_struct_h->h_srl_no,
									:int_l_prnt_srlno,
									:l_temp_prnt_quantityrnd );

		IS_ANY_ORA_ERROR;
	}	

	
	if(CA_Rtv_Block_Type(  p_dl_regdet_struct_h->h_indentity_no,
				APL_NULL_STRING,
				chr_l_h_trd_trcode,
				l_block_type,
				l_debug_info_ptr) == APL_FAILURE)
	{
			APL_GOBACK_FAIL
	}
	if ( strcmp( chr_l_h_prnt_posn_status, chr_l_h_chld_posn_status ) &&
						l_i_chld_prevreg == 0 )
	{
		if ( APL_FAILURE == DL_Mod_Posn(	p_dl_regdet_struct_h->h_dl_client,
														chr_l_h_trd_instrcode,
														chr_l_h_trd_locncode,
														chr_l_h_prnt_posn_status,
														'S',
														chr_l_h_trd_trcode[0],
														&p_dl_regdet_struct_h->h_qty,
														'D',l_block_type,
														l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL;
		}

		if ( APL_FAILURE == DL_Mod_Posn(	p_dl_regdet_struct_h->h_dl_client,
														chr_l_h_trd_instrcode,
														chr_l_h_trd_locncode,
														chr_l_h_chld_posn_status,
														'S',
														chr_l_h_trd_trcode[0],
														&p_dl_regdet_struct_h->h_qty,
														'I',l_block_type,
														l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL;
		}
	}

	

	if ( l_i_chld_prevreg == -1 )
	{
		strcpy( chr_l_h_chld_prevreg, APL_NULL_STRING );
	}

	if ( l_i_trd_regstatus == -1 )
	{
		strcpy( chr_l_h_trd_regstatus, APL_NULL_STRING );
	}

	l_i_trd_regstatus = 0;

	

	if ( !(MANIFOLD_REG_STAT(p_dl_regdet_struct_h->h_reg_st_cd[0]) ) ) 
	{
		chr_l_tmpout_regstcode 	= TEMP_OUTREG_CD;
		chr_l_tmpret_regstcode	= TEMP_RETREG_CD;

		EXEC SQL DECLARE l_regstat_upd_curs CURSOR FOR
					SELECT REG_ST_CD 
					FROM	 DL_REGDET
					WHERE	 CLIENT		= :p_dl_regdet_struct_h->h_dl_client
					AND	 IDENTIY_NO		= :p_dl_regdet_struct_h->h_indentity_no
					AND	 REG_ST_CD NOT IN ( :chr_l_tmpout_regstcode, :chr_l_tmpret_regstcode )
					GROUP BY REG_ST_CD
					HAVING SUM( QUANTITY - NVL(MOVED_QTY,0) ) > 0
					ORDER BY REG_ST_CD ASC;

		EXEC SQL OPEN l_regstat_upd_curs;

		IS_ANY_ORA_ERROR;
		
		

		EXEC SQL FETCH l_regstat_upd_curs 
					INTO	 :chr_l_h_trd_regstatus:l_i_trd_regstatus;

		IS_ANY_ORA_ERROR;

		EXEC SQL CLOSE l_regstat_upd_curs;

		if ( l_i_trd_regstatus == -1 )
		{
			strcpy(chr_l_h_trd_regstatus, APL_NULL_STRING);
		}
	}	

	if ( MANIFOLD_REG_STAT(p_dl_regdet_struct_h->h_reg_st_cd[0]) )
	{
		if ( TEMP_OUTREG_STAT(p_dl_regdet_struct_h->h_reg_st_cd[0]) )
		{
			strcpy( chr_l_h_trd_tmpoutdt, chr_l_sysdate_b);
			l_i_trd_tmpoutdt = 0;
		}
		else if ( TEMP_RETREG_STAT(p_dl_regdet_struct_h->h_reg_st_cd[0]) )
		{
			strcpy( chr_l_h_trd_tmpretdt, chr_l_sysdate_b);
			l_i_trd_tmpretdt = 0;
		}
	}

	

	if ( !(MANIFOLD_REG_STAT( p_dl_regdet_struct_h->h_reg_st_cd[0] )) )
	{
		if ( p_reqdetails_struct_h->h_element_cnt > 0 )
		{
			CR_Proc_InstrQtyRound(p_dl_regdet_struct_h->h_qty,chr_l_h_instrcode_A,&l_temp_quantityrnd,l_debug_info_ptr);
			p_dl_regdet_struct_h->h_qty=l_temp_quantityrnd;
//AIX Warning Removal
			strcpy((char *)chr_l_sql_stmt.arr, APL_NULL_STRING);
			sprintf((char *)chr_l_sql_stmt.arr,
						"UPDATE DL_DEAL SET %s = ( %s - :v1 ) WHERE	ROWID	= :v2",
						 chr_l_h_prnt_fldupdt, chr_l_h_prnt_fldupdt );

			chr_l_sql_stmt.len = strlen((char *)chr_l_sql_stmt.arr);
			chr_l_sql_stmt.arr[chr_l_sql_stmt.len] = '\0';
			chr_l_sql_stmt.len++;

			EXEC SQL PREPARE s FROM :chr_l_sql_stmt;

			EXEC SQL EXECUTE s USING 	:p_dl_regdet_struct_h->h_qty:l_i_chld_quantity, 
												:chr_l_h_trd_rowid:l_i_trd_rowid;

			IS_ANY_ORA_ERROR;
		}
	}

	
												
	CR_Proc_InstrQtyRound(p_dl_regdet_struct_h->h_qty,chr_l_h_instrcode_A,&l_temp_quantityrnd,l_debug_info_ptr);
	p_dl_regdet_struct_h->h_qty=l_temp_quantityrnd;
//AIX Warning Removal
	strcpy((char *)chr_l_sql_stmt.arr, APL_NULL_STRING);  //AIX-Warnings Removal 

	sprintf((char *)chr_l_sql_stmt.arr, 
			"UPDATE DL_DEAL SET %s = ( NVL(%s,0) + :v1 ) WHERE ROWID = :v2", 
			 chr_l_h_chld_fldupdt, chr_l_h_chld_fldupdt );

	chr_l_sql_stmt.len = (int)strlen((char *)chr_l_sql_stmt.arr); //AIX-Warnings Removal 
	chr_l_sql_stmt.arr[chr_l_sql_stmt.len] = '\0';
	chr_l_sql_stmt.len++;

	EXEC SQL PREPARE s FROM :chr_l_sql_stmt;

	EXEC SQL EXECUTE s USING 	:p_dl_regdet_struct_h->h_qty, 
										:chr_l_h_trd_rowid;

	IS_ANY_ORA_ERROR;

	

	EXEC SQL SELECT 	DL_COMPLETEQTY, 
							PEND_REG_QTY,
							TOT_QTY, 
							REC_INT_000,
							QTY_LOST 
				INTO		:l_h_trd_dl_completeqty:l_i_trd_mcomplqty,
							:l_h_trd_pend_reg_qty:l_i_trd_pendregqty,
							:l_h_trd_complquantity:l_i_trd_complqty,
							:l_h_trd_recinto000:l_i_trd_recinto000,
							:l_h_trd_qty_lost:l_i_trd_lostqty
				FROM		DL_DEAL
				WHERE 	ROWID = :chr_l_h_trd_rowid;

	IS_ANY_ORA_ERROR;

	if ( l_i_trd_mcomplqty == -1 )
	{
		l_h_trd_dl_completeqty = 0;
	}

	if ( l_i_trd_pendregqty == -1 )
	{
		l_h_trd_pend_reg_qty = 0;
	}

	if ( l_i_trd_complqty == -1 )
	{
		l_h_trd_complquantity = 0;
	}
	
	if ( l_i_trd_recinto000 == -1 )
	{
		l_h_trd_recinto000 = 0;
	}

	if ( l_i_trd_lostqty == -1 )
	{
		l_h_trd_qty_lost = 0;
	}

	

	strcpy( chr_l_mainfuncarea, APL_NULL_STRING );
	strcpy( chr_l_condid_a,	APL_NULL_STRING );
	strcpy( chr_l_mainfuncarea, "TRD_UPDREG" );
	strcpy( chr_l_condid_a, "POSN_STAT_VAL_FOR_MA" );
	int_l_condexists_A = 0;

	if ( APL_FAILURE == CO_Chk_CntryEnabled( chr_l_mainfuncarea,
														chr_l_condid_a,
														&int_l_condexists_A,
														l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL;
	}

	l_i_trd_candropdt = -1;

	if ( int_l_condexists_A == 0 )
	{
		if ( l_h_trd_dl_completeqty + l_h_trd_complquantity + l_h_trd_pend_reg_qty == l_h_trd_quantity ) 
		{
			if ( l_h_trd_complquantity > 0 )
			{
				strcpy(chr_l_h_trd_posn_status, STATUS_POS_003 );
				l_i_trd_posn_status = 0;
			}
			else  
			{
				strcpy(chr_l_h_trd_posn_status, STATUS_POS_001 );
				l_i_trd_posn_status = 0;
			}

			if ( l_h_trd_dl_completeqty + l_h_trd_complquantity == l_h_trd_quantity )
			{
				strcpy( chr_l_h_trd_candropdt, chr_l_sysdate_b );
				l_i_trd_candropdt = 0;
			}
		}
		else
		{
			if ( l_h_trd_qty_lost > 0 ) 
			{
				strcpy( chr_l_h_trd_posn_status, STATUS_POS_004 );
				l_i_trd_posn_status = 0;
			}
			else
			{
				strcpy( chr_l_h_trd_posn_status, STATUS_POS_002 );
				l_i_trd_posn_status = 0;
			}
		}
	}
	else
	{
		if ( l_h_trd_recinto000 + l_h_trd_dl_completeqty + l_h_trd_complquantity + l_h_trd_pend_reg_qty == l_h_trd_quantity )
		{
			if ( l_h_trd_complquantity > 0 )
			{
				strcpy( chr_l_h_trd_posn_status, STATUS_POS_003 );
				l_i_trd_posn_status = 0;
			}
			else if ( l_h_trd_dl_completeqty > 0 || l_h_trd_pend_reg_qty > 0 )
			{
				strcpy( chr_l_h_trd_posn_status, STATUS_POS_001 );
				l_i_trd_posn_status = 0;
			}
			else
			{
				strcpy( chr_l_h_trd_posn_status, STATUS_POS_000 );
				l_i_trd_posn_status = 0;
			}

			if ( l_h_trd_dl_completeqty + l_h_trd_complquantity + l_h_trd_recinto000 == l_h_trd_quantity )
			{
				strcpy( chr_l_h_trd_candropdt, chr_l_sysdate_b );
				l_i_trd_candropdt = 0;
			}
		}
		else
		{
			strcpy( chr_l_h_trd_posn_status, STATUS_POS_002 );
			l_i_trd_posn_status = 0;
		}
	}

	if ( !strcmp(chr_l_h_trd_maker, chr_l_h_trd_checker) || 
			l_i_trd_checker == -1 )
	{
		strcpy( chr_l_h_trd_checker, p_intl_env_data_struct_h->usr );
		l_i_trd_checker = 0;
		strcpy( chr_l_h_trd_checkerdt, chr_l_sysdatetime_A );
	   l_i_trd_checkerdt = 0;
	}

	EXEC SQL UPDATE DL_DEAL 
				SET	STATUS_POS 	= :chr_l_h_trd_posn_status:l_i_trd_posn_status,
						ALLOW_DROPDT		= :chr_l_h_trd_candropdt:l_i_trd_candropdt,
						CHECKER			= :chr_l_h_trd_checker:l_i_trd_checker,
						CHECKER_DT		= :chr_l_h_trd_checkerdt:l_i_trd_checkerdt,
						ACCESS_STAMP	= :chr_l_sysdatetime_A,
						STATUS		= :chr_l_h_trd_regstatus:l_i_trd_regstatus,
						LAST_REG_DATE		= :p_dl_regdet_struct_h->h_txndate,
						TMP_OUT_DT			= :chr_l_h_trd_tmpoutdt:l_i_trd_tmpoutdt,
						TMP_OUT_DATE			= :chr_l_h_trd_tmpretdt:l_i_trd_tmpretdt,
						FAILREASON_CD			= NULL,
						SUB_FAIL_CD		=NULL,
						DATEOF_MARKFAIL		= NULL
				WHERE	ROWID = :chr_l_h_trd_rowid;

	IS_ANY_ORA_ERROR;


	

	l_dl_dealaudit_struct_hb_a = (DL_DEALAUDIT_STRUCT_H *)calloc(1,sizeof(DL_DEALAUDIT_STRUCT_H));
	APL_MALLOC_FAIL(l_dl_dealaudit_struct_hb_a);

	strcpy(l_dl_dealaudit_struct_hb_a->h_dl_client, 	p_dl_regdet_struct_h->h_dl_client);
	strcpy(l_dl_dealaudit_struct_hb_a->h_indentity_no,		p_dl_regdet_struct_h->h_indentity_no);
	strcpy(l_dl_dealaudit_struct_hb_a->h_trail_for,	"T");
	strcpy(l_dl_dealaudit_struct_hb_a->h_processdetail,	p_intl_env_data_struct_h->processtion);
	strcpy(l_dl_dealaudit_struct_hb_a->h_proc_usr,		p_intl_env_data_struct_h->usr);
	strcpy(l_dl_dealaudit_struct_hb_a->h_subprocess,		chr_l_h_chld_regaudfun);
	strcpy(l_dl_dealaudit_struct_hb_a->h_logdate, 		APL_NULL_STRING);
	strcpy(l_dl_dealaudit_struct_hb_a->h_fail_cd,	APL_NULL_STRING);
	l_dl_dealaudit_struct_hb_a->h_qty = p_dl_regdet_struct_h->h_qty;
	strcpy(l_dl_dealaudit_struct_hb_a->h_dlfromord, chr_l_h_trd_trdfromord);

	if ( APL_FAILURE == CR_Mod_CLHAudTrail( l_dl_dealaudit_struct_hb_a,
													l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL;
	}
 

         if (APL_FAILURE==EI_Mod_MQData(l_dl_dealaudit_struct_hb_a->h_dl_client,  
                                        l_dl_dealaudit_struct_hb_a->h_indentity_no,   
													 NULL,
													 NULL,
													 "B",
                                         l_debug_info_ptr))  
                     APL_GOBACK_FAIL   



	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function DL_Mod_DLRegStat with Success\n",
							NULL,
							p_intl_env_data_struct_h);
		}
		APL_FREE(l_dl_regdet_struct_i);
		APL_FREE(l_dl_dealaudit_struct_hb_a);
		return(APL_SUCCESS);

	RETURN_FAILURE :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function DL_Mod_DLRegStat with Errors\n",
							NULL,
						  	p_intl_env_data_struct_h);
		}
		APL_FREE(l_dl_regdet_struct_i);
		APL_FREE(l_dl_dealaudit_struct_hb_a);
		return(APL_FAILURE);

}




int DL_Proc_DLRegStat(	DL_REGDET_STRUCT_H 		*p_dl_regdet_struct_h,
						INTL_ENV_DATA_STRUCT_H	*p_intl_env_data_struct_h,
						DEBUG_INFO_STRUCT_H			**l_debug_info_ptr )
{

	struct sqlca sqlca;
	DL_REGDET_STRUCT_H 		*l_dlregdet_struct_h			= NULL;
	DL_REGDET_STRUCT_I		*l_dl_regdet_struct_ia			= NULL;
	DL_DEALAUDIT_STRUCT_H	*l_dl_dealaudit_struct_hb_a					= NULL;
	char		chr_l_buf[BUFFER_LEN]									= APL_NULL_STRING;
	char		chr_l_sysdatetime_A[APL_DATE_LEN]					= APL_NULL_STRING;
	char		chr_l_sysdate_b[APL_DATE_LEN]							= APL_NULL_STRING;
	char		chr_l_str_srlno[SEQ_NO_LEN]						= APL_NULL_STRING;
	char 		chr_l_mainfuncarea[APL_MAINFUNCAREA_LEN]		= APL_NULL_STRING;
	char		chr_l_condid_a[APL_CONDID_LEN]						= APL_NULL_STRING;
	char		chr_l_tmpout_regstcode								= APL_NULL_CHAR;
	char		chr_l_tmpret_regstcode								= APL_NULL_CHAR;
	char		chr_l_h_chld_access_stamp[APL_DATE_LEN]			= APL_NULL_STRING;
	char		chr_l_h_chld_rowid[APL_ROWID_LEN]					= APL_NULL_STRING;
	char		chr_l_h_chld_prevreg[APL_FLAG_LENGTH]				= APL_NULL_STRING;
	char		chr_l_h_chld_fldupdt[FLD_UP_DATE_LEN]					= APL_NULL_STRING;
	char		chr_l_h_chld_posn_status[STATUS_POS_LEN]	= APL_NULL_STRING;
	char		chr_l_h_chld_regaudfun[APL_SUB_FUN_LEN]			= APL_NULL_STRING;
	char		chr_l_h_chld_regstcode[APL_FLAG_LENGTH]				= APL_NULL_STRING;
	char		chr_l_h_prnt_fldupdt[FLD_UP_DATE_LEN]					= APL_NULL_STRING;
	char		chr_l_h_prnt_posn_status[STATUS_POS_LEN]	= APL_NULL_STRING;
	char		chr_l_h_prnt_regdet_rowid[APL_DATE_LEN]			= APL_NULL_STRING;
	char		chr_l_h_trd_rowid[APL_ROWID_LEN]					= APL_NULL_STRING;
	char		chr_l_h_trd_tmpoutdt[APL_DATE_LEN]				= APL_NULL_STRING;
	char		chr_l_h_trd_tmpretdt[APL_DATE_LEN]				= APL_NULL_STRING;
	char		chr_l_h_trd_regstatus[APL_FLAG_LENGTH]				= APL_NULL_STRING;
	char		chr_l_h_trd_instrcode[APL_INSTRUMENTCODE_LEN]				= APL_NULL_STRING;
	char		chr_l_h_instrcode_A[APL_INSTRUMENTCODE_LEN]						= APL_NULL_STRING;
	char		chr_l_h_trd_locncode[APL_LOCNCODE_LENGTH]			= APL_NULL_STRING;
	char		chr_l_h_trd_trcode[APL_FLAG_LENGTH]					= APL_NULL_STRING;
	char		chr_l_h_trd_trdfromord[APL_FLAG_LENGTH]				= APL_NULL_STRING;
	char		chr_l_h_trd_lastregdt[APL_DATE_LEN]				= APL_NULL_STRING;
	char		chr_l_h_trd_posn_status[STATUS_POS_LEN]		= APL_NULL_STRING;
	char		chr_l_h_trd_domcpac[APL_CLIENT_LENGTH]				= APL_NULL_STRING;
	char		chr_l_h_trd_domcpbnkac[APL_CLIENT_LENGTH]			= APL_NULL_STRING;
	char		chr_l_h_trd_countacc[APL_COUNTACC_LEN]			= APL_NULL_STRING; 
	char		chr_l_h_trd_ccycode[APL_CCYCODE_LEN]				= APL_NULL_STRING;
	char		chr_l_h_acc_canreg[APL_FLAG_LENGTH]					= APL_NULL_STRING;
	double	l_retposn											= 0;
	double	l_availquantity											= 0;
	double	l_h_chld_qty									= 0;
	double	l_h_chld_moved_qty									= 0;
	double	l_h_chld_manifold_qty								= 0;
	double	l_h_prnt_parentquantity								= 0;
	double	l_h_trd_quantity											= 0;
	double	l_h_trd_dl_completeqty									= 0;
	double	l_h_trd_pend_reg_qty								= 0;
	double	l_h_trd_qty_lost									= 0;
	double	l_h_trd_recinto000								= 0;
	double	l_temp_quantityrnd										= 0;
	double	l_h_manifold_qty										= 0;
	double	l_h_quantitymanifldrnd									= 0;
	double	l_h_moved_qty										= 0;
	double	l_h_quantitymovedrnd									= 0;
	int		int_l_h_count_recs										= 0;
	short		l_i_chld_access_stamp							= 0;
	short		l_i_chld_rowid										= 0;
	short		l_i_chld_prevreg									= 0;
	short		l_i_chld_fldupdt									= 0;
	short		l_i_chld_posn_status 							= 0;
	short		l_i_chld_qtymoved									= 0;
	short		l_i_chld_regaudfun								= 0;
	short		l_i_chld_regstcode								= 0;
	short		l_i_chld_quantity									= 0;
	short		l_i_chld_qtymanifld								= 0;
	short		l_i_prnt_fldupdt									= 0;
	short		l_i_prnt_posn_status								= 0;
	short		l_i_prnt_parentqty								= 0;
	short		l_i_prnt_regdet_rowid							= 0;
	short		l_i_trd_rowid										= 0;
	short		l_i_trd_tmpoutdt									= 0;
	short		l_i_trd_tmpretdt									= 0;
	short		l_i_trd_regstatus									= 0;
	short		l_i_trd_qty											= 0;
	short		l_i_trd_instr_code										= 0;
	short		l_i_trd_locncode									= 0;
	short		l_i_trd_trcode										= 0;
	short		l_i_trd_trdfromord								= 0;
	short		l_i_trd_mcomplqty									= 0;
	short		l_i_trd_pendregqty								= 0;
	short		l_i_trd_lostqty									= 0;
	short		l_i_trd_recinto000								= 0;
	short		l_i_trd_lastregdt									= 0;
	short		l_i_trd_posn_status								= 0;
	short		l_i_trd_domcpac									= 0;
	short		l_i_trd_domcpbnkac								= 0;
	short		l_i_trd_countacc									= 0;
	short		l_i_trd_ccycode									= 0;
	short		l_i_acc_canreg										= 0;
	short		l_i_count_recs										= 0;
	short		int_l_error_flg											= APL_SUCCESS;
	short		int_l_condexists_A										= 0;
	short		l_i_instr_code											= 0;
	short		l_i_qtymanifld										= 0;
	short		l_i_qtymoved										= 0;
	short    l_ext_trd_check                           = 0;  
	char l_block_type[5]  = APL_NULL_STRING;

	EXEC SQL BEGIN DECLARE SECTION;
		varchar chr_l_sql_stmt[200];
	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	EXEC SQL VAR chr_l_h_chld_access_stamp	IS STRING;
	EXEC SQL VAR chr_l_h_chld_rowid			IS STRING;
	EXEC SQL VAR chr_l_h_chld_prevreg			IS STRING;
	EXEC SQL VAR chr_l_h_chld_fldupdt			IS STRING;
	EXEC SQL VAR chr_l_h_chld_posn_status	IS STRING;
	EXEC SQL VAR chr_l_h_prnt_fldupdt			IS STRING;
	EXEC SQL VAR chr_l_h_prnt_posn_status	IS STRING;
	EXEC SQL VAR chr_l_h_trd_rowid				IS STRING;
	EXEC SQL VAR chr_l_h_chld_regaudfun		IS STRING;
	EXEC SQL VAR chr_l_h_chld_regstcode		IS STRING;
	EXEC SQL VAR chr_l_h_prnt_regdet_rowid	IS STRING;
	EXEC SQL VAR chr_l_h_trd_tmpoutdt			IS STRING;
	EXEC SQL VAR chr_l_h_trd_tmpretdt			IS STRING;
	EXEC SQL VAR chr_l_h_trd_regstatus		IS STRING;
	EXEC SQL VAR chr_l_h_trd_instrcode			IS STRING;
	EXEC SQL VAR chr_l_h_trd_locncode			IS STRING;
	EXEC SQL VAR chr_l_h_trd_trcode 			IS STRING;
	EXEC SQL VAR chr_l_h_trd_trdfromord		IS STRING;
	EXEC SQL VAR chr_l_h_trd_lastregdt		IS STRING;
	EXEC SQL VAR chr_l_h_trd_posn_status		IS STRING;
	EXEC SQL VAR chr_l_h_trd_domcpac			IS STRING;
	EXEC SQL VAR chr_l_h_trd_domcpbnkac		IS STRING;
	EXEC SQL VAR chr_l_h_trd_countacc			IS STRING;
	EXEC SQL VAR chr_l_h_trd_ccycode			IS STRING;
	EXEC SQL VAR chr_l_h_acc_canreg			IS STRING;

	 

	l_dlregdet_struct_h = (DL_REGDET_STRUCT_H*)calloc(1,sizeof(DL_REGDET_STRUCT_H) );
	APL_MALLOC_FAIL(l_dlregdet_struct_h);


	l_dl_regdet_struct_ia = (DL_REGDET_STRUCT_I*)calloc(1,sizeof(DL_REGDET_STRUCT_I) );
	APL_MALLOC_FAIL(l_dl_regdet_struct_ia);

	

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE,
						"Entering Function DL_Proc_DLRegStat\n",
						NULL,
						p_intl_env_data_struct_h );
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(	chr_l_buf,
					"The Account is : %s\n",
					p_dl_regdet_struct_h->h_dl_client);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf( chr_l_buf,
					"The Reference Number is : %s\n",
					p_dl_regdet_struct_h->h_indentity_no);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(	chr_l_buf,
					"The Serial Number is : %d\n",
					p_dl_regdet_struct_h->h_srl_no);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(	chr_l_buf,
					"The Registration Code is : %s\n",
					p_dl_regdet_struct_h->h_reg_st_cd);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(	chr_l_buf,
					"The Transaction Date is : %s\n",
					p_dl_regdet_struct_h->h_txndate);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(	chr_l_buf,
					"The Quantity is : %f\n",
					p_dl_regdet_struct_h->h_qty);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(	chr_l_buf,
					"The Access Stamp is : %s\n",
					p_dl_regdet_struct_h->h_access_stamp);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(	chr_l_buf,
					"The quantity being moved is : %f\n",
					p_dl_regdet_struct_h->h_quantitymoved);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(	chr_l_buf,
					"The Manifold Quantitys is : %f\n",
					p_dl_regdet_struct_h->h_quantitymanifld);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(	chr_l_buf,
					"The Date Accounted for is : %s\n",
					p_dl_regdet_struct_h->h_dtcltfor);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(	chr_l_buf,
					"The Stamp Money Recd. PRC Date is : %s\n",
					p_dl_regdet_struct_h->h_prcsmrdate);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(	chr_l_buf,
					"The PRC Status is : %s\n",
					p_dl_regdet_struct_h->h_status_prc);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(	chr_l_buf,
					"The Settlement PRC Date is : %s\n",
					p_dl_regdet_struct_h->h_prcstldate);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(	chr_l_buf,
					"The Stamp Money Amount is : %f\n",
					p_dl_regdet_struct_h->h_smramount);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h);
	}

	

	if ( l_mt_core_sys_params_struct_h.proc_reg_ind[0] == 'N' )
	{
		CO_InsertErr( 	l_debug_info_ptr,
								ERR_DATA_INTEGRITY,
								"Regn. Not Supported",
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__ );
		APL_GOBACK_FAIL;
	}

	

	if ( !strlen( p_dl_regdet_struct_h->h_dl_client ) )
	{
		APL_DATA_MISSING(	"Account",
								APL_NULL_STRING,
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	}

	if ( !strlen( p_dl_regdet_struct_h->h_indentity_no ) )
	{
		APL_DATA_MISSING(	"Reference Number",
								APL_NULL_STRING,
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	}

	if ( !p_dl_regdet_struct_h->h_srl_no )
	{
		APL_DATA_MISSING( "Serial Number",
								APL_NULL_STRING,
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	}

	if ( !strlen(p_dl_regdet_struct_h->h_access_stamp ) )
	{
		APL_DATA_MISSING(	"Access Stamp",
								APL_NULL_STRING,
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	}

	if ( int_l_error_flg == APL_FAILURE )
	{
		APL_GOBACK_FAIL;
	}

	

	strcpy( chr_l_str_srlno, APL_NULL_STRING );
	sprintf( chr_l_str_srlno, "%d", p_dl_regdet_struct_h->h_srl_no );//AIX Warning Removal

	

	EXEC SQL SELECT 	ACCESS_STAMP,
							MOVED_QTY,
							MANIFOLD_QTY,
							QUANTITY,
							REG_ST_CD,
							ROWID
				INTO		:chr_l_h_chld_access_stamp:l_i_chld_access_stamp,
							:l_h_chld_moved_qty:l_i_chld_qtymoved,
							:l_h_chld_manifold_qty:l_i_chld_qtymanifld,
							:l_h_chld_qty:l_i_chld_quantity,
							:chr_l_h_chld_regstcode:l_i_chld_regstcode,
							:chr_l_h_chld_rowid:l_i_chld_rowid
				FROM		DL_REGDET
				WHERE		CLIENT 	= :p_dl_regdet_struct_h->h_dl_client
				AND		IDENTIY_NO		= :p_dl_regdet_struct_h->h_indentity_no
				AND		SRL_NO	= :p_dl_regdet_struct_h->h_srl_no
				FOR UPDATE OF ACCESS_STAMP;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_REC_NOTFND,
														p_dl_regdet_struct_h->h_dl_client,
														p_dl_regdet_struct_h->h_indentity_no,
														chr_l_str_srlno );

	

	if ( strcmp( p_dl_regdet_struct_h->h_access_stamp, chr_l_h_chld_access_stamp ) )
	{
		CO_InsertErr(	l_debug_info_ptr,
								ERR_ACCESSSTAMP_CHGD,
								p_dl_regdet_struct_h->h_dl_client,
								p_dl_regdet_struct_h->h_indentity_no,
								chr_l_str_srlno,
								__LINE__,
								__FILE__ );
		APL_GOBACK_FAIL;
	}

	

	if ( l_i_chld_qtymoved == -1 )
	{
		l_h_chld_moved_qty = 0;
	}

	if ( l_i_chld_qtymanifld == -1 )
	{
		l_h_chld_manifold_qty = 0;
	}
	
	if ( l_h_chld_moved_qty != 0 || l_h_chld_manifold_qty != 0 )
	{
		CO_InsertErr(	l_debug_info_ptr,
								ERR_DEAL_NO_RESET_CHLD_EXISTS,
								APL_NULL_STRING,
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__ );
		int_l_error_flg = APL_FAILURE;
	}

	if ( int_l_error_flg == APL_FAILURE )
	{
		APL_GOBACK_FAIL;
	}

	
	
	EXEC SQL SELECT 	PREV_REG,
							FLD_UP_DATE,
							STATUS,
							REG_AUD_FUN
				INTO		:chr_l_h_chld_prevreg:l_i_chld_prevreg,
							:chr_l_h_chld_fldupdt:l_i_chld_fldupdt,
							:chr_l_h_chld_posn_status:l_i_chld_posn_status,
							:chr_l_h_chld_regaudfun:l_i_chld_regaudfun
				FROM 		DL_REGCYCLE
				WHERE		REG_ST_CD	= :chr_l_h_chld_regstcode
				AND		NATION		= :g_mt_commonsys_params_struct_h.nation_code;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_REC_NOTFND,
														"Static Reg. Dtls",
														chr_l_h_chld_regstcode,
														APL_NULL_STRING );

	

	EXEC SQL SELECT 	FLD_UP_DATE,
							STATUS
				INTO		:chr_l_h_prnt_fldupdt:l_i_prnt_fldupdt,
							:chr_l_h_prnt_posn_status:l_i_prnt_posn_status
				FROM		DL_REGCYCLE
				WHERE		REG_ST_CD	= :chr_l_h_chld_prevreg
				AND		NATION		= :g_mt_commonsys_params_struct_h.nation_code;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_REC_NOTFND,
														"Static Reg. Dtls",
														chr_l_h_chld_prevreg,
														APL_NULL_STRING );


	

	EXEC SQL SELECT	INSTR_CODE,
							LOCATION_CD,
							DEAL_CD,
							TMP_OUT_DT,
							TMP_OUT_DATE,
							STATUS,
							QTY,
							DEAL_FRM_ORD,
							LAST_REG_DATE,
							STATUS_POS,
							DOMESTIC_CPCLT,
							DOMCP_CUSTODYCLT,
							CP_CLT,
							CURRENCY_CD,
							PEND_REG_QTY,
							REC_INT_000,
							ROWID
				INTO		:chr_l_h_trd_instrcode:l_i_trd_instr_code,
							:chr_l_h_trd_locncode:l_i_trd_locncode,
							:chr_l_h_trd_trcode:l_i_trd_trcode,
							:chr_l_h_trd_tmpoutdt:l_i_trd_tmpoutdt,
							:chr_l_h_trd_tmpretdt:l_i_trd_tmpretdt,
							:chr_l_h_trd_regstatus:l_i_trd_regstatus,
							:l_h_trd_quantity:l_i_trd_qty,
							:chr_l_h_trd_trdfromord:l_i_trd_trdfromord,
							:chr_l_h_trd_lastregdt:l_i_trd_lastregdt,
							:chr_l_h_trd_posn_status:l_i_trd_posn_status,
							:chr_l_h_trd_domcpac:l_i_trd_domcpac,
							:chr_l_h_trd_domcpbnkac:l_i_trd_domcpbnkac,
							:chr_l_h_trd_countacc:l_i_trd_countacc,
							:chr_l_h_trd_ccycode:l_i_trd_ccycode,
							:l_h_trd_pend_reg_qty:l_i_trd_pendregqty,
							:l_h_trd_recinto000:l_i_trd_recinto000,
							:chr_l_h_trd_rowid:l_i_trd_rowid
				FROM		DL_DEAL
				WHERE		CLIENT 	= :p_dl_regdet_struct_h->h_dl_client
				AND		IDENTIY_NO		= :p_dl_regdet_struct_h->h_indentity_no
				FOR UPDATE OF ACCESS_STAMP;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_DEAL_NF,
														p_dl_regdet_struct_h->h_dl_client,
														p_dl_regdet_struct_h->h_indentity_no,	
														APL_NULL_STRING );

	if ( l_i_trd_recinto000 == 0 )
	{
		l_h_trd_recinto000 = 0;
	}

	if ( l_i_trd_pendregqty == 0 )
	{
		l_h_trd_pend_reg_qty = 0;
	}

	

	EXEC SQL SELECT CLN_ALLOW_REGIND
				INTO		:chr_l_h_acc_canreg:l_i_acc_canreg
				FROM		MT_CLIENT
				WHERE		CLN_CODE	= :p_dl_regdet_struct_h->h_dl_client
				FOR UPDATE OF ACCESS_STAMP;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_ACCNOT_FND,
														p_dl_regdet_struct_h->h_dl_client,
														APL_NULL_STRING,
														APL_NULL_STRING );

	

	if ( chr_l_h_acc_canreg[0] == 'N' )
	{
		CO_InsertErr(	l_debug_info_ptr,
								ERR_NOTHING_RESET,
								p_dl_regdet_struct_h->h_dl_client,
								p_dl_regdet_struct_h->h_indentity_no,
								APL_NULL_STRING,
								__LINE__,
								__FILE__ );
		int_l_error_flg = APL_FAILURE;
	}

	

	if ( !strcmp( chr_l_h_trd_posn_status, STATUS_POS_000 ) )
	{
		CO_InsertErr(	l_debug_info_ptr,
								ERR_DEAL_INVALID_POSNTYPE,
								STATUS_POS_000,
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__ );
		int_l_error_flg = APL_FAILURE;
	}
	
	

	if ( l_h_trd_pend_reg_qty + l_h_trd_recinto000 == l_h_trd_quantity )
	{
		CO_InsertErr(	l_debug_info_ptr,
								ERR_NOTHING_RESET,
								p_dl_regdet_struct_h->h_dl_client,
								p_dl_regdet_struct_h->h_indentity_no,
								APL_NULL_STRING,
								__LINE__,
								__FILE__ );
		int_l_error_flg = APL_FAILURE;
	}

	

	if ( VAL_DELIVER_DEAL(chr_l_h_trd_trcode[0]) || chr_l_h_trd_trcode[0]=='5' || chr_l_h_trd_trcode[0]=='7')
	{
		CO_InsertErr(	l_debug_info_ptr,
								ERR_DATA_INTEGRITY,
								"Dlvr Trd - Can't Rst",
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__ );
		int_l_error_flg = APL_FAILURE;
	}

	if ( int_l_error_flg == APL_FAILURE )
	{
		APL_GOBACK_FAIL;
	}
								
	

	if ( APL_FAILURE == DL_Chk_DLDet( p_dl_regdet_struct_h->h_dl_client,
												p_dl_regdet_struct_h->h_indentity_no,
												'Y', 'Y', 'N', 'Y', NULL, 
												'Y', NULL, NULL, l_debug_info_ptr ) )
	{
		int_l_error_flg = APL_FAILURE;
	}
	
	

	

	if (chr_l_h_trd_trdfromord[0] == 'Y')
	{
		if ( APL_FAILURE == CO_Chk_AccValid( p_dl_regdet_struct_h->h_dl_client,
													'Y', 'C', 'B', NULL, 'Y', 'N',
													'N', 'N', l_debug_info_ptr ) )
		{
			int_l_error_flg = APL_FAILURE;
		}
	}
	else
	{
		if ( APL_FAILURE == CO_Chk_AccValid( p_dl_regdet_struct_h->h_dl_client,
													'Y', 'C', NULL, NULL, 'Y', 'N',
													'N', 'N', l_debug_info_ptr))
		{
			int_l_error_flg = APL_FAILURE;
		}
	}
	

	if ( APL_FAILURE == CO_Chk_AccValid( chr_l_h_trd_domcpac,
												'Y', 'B', NULL, NULL, 'Y', 'N',
												'N', 'N', l_debug_info_ptr ) )
	{
		int_l_error_flg = APL_FAILURE;
	}											

	

	if ( APL_FAILURE == CO_Chk_AccValid( chr_l_h_trd_domcpbnkac,
												'Y', 'B', NULL, NULL, 'Y', 'N',
												'N', 'N', l_debug_info_ptr ) )
	{
		int_l_error_flg = APL_FAILURE;
	}											

	
	
	strcpy(chr_l_mainfuncarea, "TRD_MAINT");
	strcpy(chr_l_condid_a, "EXT_TRD_CNTAC_ALWD");
	l_ext_trd_check =0;

	if (APL_FAILURE == CO_Chk_CntryEnabled(chr_l_mainfuncarea,
													chr_l_condid_a,
													&l_ext_trd_check,
													l_debug_info_ptr))
	{
		APL_GOBACK_FAIL
	}

	if((strcmp(l_mt_core_sys_params_struct_h.custody_clt_cd,chr_l_h_trd_domcpac)==0) ||(l_ext_trd_check==0))
	{
		if ( l_i_trd_countacc == 0 )
		{
			if ( APL_FAILURE == CO_Chk_AccValid( chr_l_h_trd_countacc,
														'Y', 'C', 'C', NULL, 'Y', 'N',
														'N', 'N', l_debug_info_ptr ) )
			{	
				int_l_error_flg = APL_FAILURE;
			}
		}
	}
	
	

	if ( APL_FAILURE == CO_Chk_InstrValid(	chr_l_h_trd_instrcode,
												'Y', 'Y', 'N', 'N', NULL, NULL,
												l_debug_info_ptr ) )
	{
		int_l_error_flg = APL_FAILURE;
	}

	

	if ( l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y' )
	{
		if ( APL_FAILURE == MT_Chk_Loc( chr_l_h_trd_locncode,
													'Y', 'Y', 'N', 
													l_debug_info_ptr ) )
		{
			int_l_error_flg = APL_FAILURE;
		}	
	}

	

	if ( APL_FAILURE == CO_Chk_CcyValid( chr_l_h_trd_ccycode,
												'M', 'Y', l_debug_info_ptr ) )
	{
		int_l_error_flg = APL_FAILURE;
	}

	if ( int_l_error_flg == APL_FAILURE )
	{
		APL_GOBACK_FAIL;
	}

	
	
	if ( strcmp( chr_l_h_prnt_posn_status, chr_l_h_chld_posn_status ) )
	{

		
		if(CA_Rtv_Block_Type(  p_dl_regdet_struct_h-> h_indentity_no,
					APL_NULL_STRING,
					chr_l_h_trd_trcode,
					l_block_type,
					l_debug_info_ptr) == APL_FAILURE)
		{
				APL_GOBACK_FAIL
		}
		if ( APL_FAILURE == DL_Proc_PosLock( p_dl_regdet_struct_h->h_dl_client,
														chr_l_h_trd_instrcode,
														chr_l_h_trd_locncode,
														chr_l_h_chld_posn_status,l_block_type,
														l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL;
		}

		

		if ( APL_FAILURE == DL_Proc_PosCalc( 	p_dl_regdet_struct_h->h_dl_client,
														chr_l_h_trd_instrcode,
														chr_l_h_trd_locncode,
														chr_l_h_chld_posn_status,
														APL_NULL_STRING,
														"SFK",
														&l_retposn,l_block_type,
														l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL;
		}

		

		if ( l_retposn < l_h_chld_qty )
		{
			CO_InsertErr(	l_debug_info_ptr,
									ERR_DEAL_NENUFPOSN,
									p_dl_regdet_struct_h->h_dl_client,
									p_dl_regdet_struct_h->h_indentity_no,
									chr_l_h_chld_posn_status,
									__LINE__,
									__FILE__ );
			APL_GOBACK_FAIL;
		}															
	}

	

	EXEC SQL DECLARE rst_reg_prnt_curs CURSOR FOR
	SELECT 	a.*, b.PARENT_QTY
	FROM		DL_REGDET a, DL_REGPAR b
	WHERE		b.CLIENT	= :p_dl_regdet_struct_h->h_dl_client
	AND		b.IDENTIY_NO		= :p_dl_regdet_struct_h->h_indentity_no
	AND		b.SRL_NO	= :p_dl_regdet_struct_h->h_srl_no
	AND		a.CLIENT	= :p_dl_regdet_struct_h->h_dl_client
	AND		a.IDENTIY_NO		= :p_dl_regdet_struct_h->h_indentity_no
	AND		a.SRL_NO	= b.PARENT_SRLNO
	FOR UPDATE OF ACCESS_STAMP;

	EXEC SQL OPEN rst_reg_prnt_curs;

	IS_ANY_ORA_ERROR;

	for ( ; ; )
	{
		EXEC SQL FETCH rst_reg_prnt_curs INTO :l_dlregdet_struct_h:l_dl_regdet_struct_ia, :l_h_prnt_parentquantity:l_i_prnt_parentqty;

		if ( APL_ZERO_RESULT_SET ) break;

		IS_ANY_ORA_ERROR;
		
		if ( l_dl_regdet_struct_ia->i_quantitymoved == -1 )
		{
			l_dlregdet_struct_h->h_quantitymoved = 0;
		}

		if ( l_dl_regdet_struct_ia->i_quantitymanifld == -1 )
		{
			l_dlregdet_struct_h->h_quantitymanifld = 0;
		}

		

		if ( MANIFOLD_REG_STAT(chr_l_h_chld_regstcode[0]) )
		{
			l_availquantity = l_dlregdet_struct_h->h_quantitymanifld - l_dlregdet_struct_h->h_quantitymoved;
		}
		else
		{
			l_availquantity = l_dlregdet_struct_h->h_quantitymoved;
		}

		if ( l_availquantity < l_h_prnt_parentquantity )
		{
			CO_InsertErr( 	l_debug_info_ptr,
									ERR_DEAL_NENUFPOSN,
									"Parent Reg. Rec",
									APL_NULL_STRING,
									APL_NULL_STRING,
									__LINE__,
									__FILE__ );
			int_l_error_flg = APL_FAILURE;
		}

	}

	EXEC SQL CLOSE rst_reg_prnt_curs;

	if ( int_l_error_flg == APL_FAILURE )
	{
		APL_GOBACK_FAIL;
	}

	if ( APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr) )
	{
		APL_GOBACK_FAIL;
	}

	

	

	if ( APL_FAILURE == CO_RtvSysDtTime( chr_l_sysdatetime_A,
															l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL;
	}

	

	if ( APL_FAILURE == CO_RtvSysDt(	chr_l_sysdate_b,
														l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL;
	}

	

	EXEC SQL DECLARE rst_reg_prnt_upd_curs CURSOR FOR
	SELECT 	a.*, b.PARENT_QTY, a.rowid
	FROM		DL_REGDET a, DL_REGPAR b
	WHERE		b.CLIENT	= :p_dl_regdet_struct_h->h_dl_client
	AND		b.IDENTIY_NO		= :p_dl_regdet_struct_h->h_indentity_no
	AND		b.SRL_NO	= :p_dl_regdet_struct_h->h_srl_no
	AND		a.CLIENT	= :p_dl_regdet_struct_h->h_dl_client
	AND		a.IDENTIY_NO		= :p_dl_regdet_struct_h->h_indentity_no
	AND		a.SRL_NO	= b.PARENT_SRLNO;

	EXEC SQL OPEN rst_reg_prnt_upd_curs;

	IS_ANY_ORA_ERROR;

	for ( ; ; )
	{
		EXEC SQL FETCH rst_reg_prnt_upd_curs 
					INTO 	:l_dlregdet_struct_h:l_dl_regdet_struct_ia,
							:l_h_prnt_parentquantity:l_i_prnt_parentqty, 
							:chr_l_h_prnt_regdet_rowid:l_i_prnt_regdet_rowid; 
		
		if ( APL_ZERO_RESULT_SET ) break;

		IS_ANY_ORA_ERROR;

		

		if ( MANIFOLD_REG_STAT(chr_l_h_chld_regstcode[0]) )
		{
			EXEC SQL SELECT CREDIT_IND.INSTR_CODE,NVL(CR.MANIFOLD_QTY,0)
			INTO :chr_l_h_instrcode_A:l_i_instr_code,:l_h_manifold_qty:l_i_qtymanifld
			FROM DL_REGDET CR , DL_DEAL CREDIT_IND
			WHERE CR.CLIENT = :l_dlregdet_struct_h->h_dl_client
			AND CR.IDENTIY_NO    = :l_dlregdet_struct_h->h_indentity_no
			AND CR.CLIENT = CREDIT_IND.CLIENT
			AND CR.IDENTIY_NO = CREDIT_IND.IDENTIY_NO
			AND CR.ROWID = :chr_l_h_prnt_regdet_rowid;

			IS_ANY_ORA_ERROR;

			CR_Proc_InstrQtyRound(l_h_manifold_qty,chr_l_h_instrcode_A,&l_h_quantitymanifldrnd,l_debug_info_ptr);
			CR_Proc_InstrQtyRound(l_h_prnt_parentquantity,chr_l_h_instrcode_A,&l_temp_quantityrnd,l_debug_info_ptr);
			l_h_prnt_parentquantity=l_temp_quantityrnd;
			EXEC SQL UPDATE DL_REGDET 
						SET 	MANIFOLD_QTY 		= (:l_h_quantitymanifldrnd - :l_h_prnt_parentquantity),
							 	ACCESS_STAMP 	= :chr_l_sysdatetime_A
						WHERE	ROWID				= :chr_l_h_prnt_regdet_rowid;
		}
		else
		{
			EXEC SQL SELECT CREDIT_IND.INSTR_CODE,NVL(CR.MOVED_QTY,0)
			INTO :chr_l_h_instrcode_A:l_i_instr_code,:l_h_moved_qty:l_i_qtymoved
			FROM DL_REGDET CR , DL_DEAL CREDIT_IND
			WHERE CR.CLIENT = :l_dlregdet_struct_h->h_dl_client
			AND CR.IDENTIY_NO    = :l_dlregdet_struct_h->h_indentity_no
			AND CR.CLIENT = CREDIT_IND.CLIENT
			AND CR.IDENTIY_NO = CREDIT_IND.IDENTIY_NO
			AND CR.ROWID = :chr_l_h_prnt_regdet_rowid;

			IS_ANY_ORA_ERROR;

			CR_Proc_InstrQtyRound(l_h_moved_qty,chr_l_h_instrcode_A,&l_h_quantitymovedrnd,l_debug_info_ptr);
			CR_Proc_InstrQtyRound(l_h_prnt_parentquantity,chr_l_h_instrcode_A,&l_temp_quantityrnd,l_debug_info_ptr);
			l_h_prnt_parentquantity=l_temp_quantityrnd;
			EXEC SQL UPDATE DL_REGDET 
						SET 	MOVED_QTY 		= ( :l_h_quantitymovedrnd - :l_h_prnt_parentquantity),
							 	ACCESS_STAMP	= :chr_l_sysdatetime_A
						WHERE	ROWID				= :chr_l_h_prnt_regdet_rowid;
		}

		IS_ANY_ORA_ERROR;

	}

	EXEC SQL CLOSE rst_reg_prnt_upd_curs;

	

	EXEC SQL DELETE DL_REGPAR 
				WHERE		CLIENT 	= :p_dl_regdet_struct_h->h_dl_client
				AND		IDENTIY_NO		= :p_dl_regdet_struct_h->h_indentity_no
				AND		SRL_NO	= :p_dl_regdet_struct_h->h_srl_no;

	IS_ANY_ORA_ERROR;

	

	EXEC SQL DELETE DL_REGDET 
				WHERE		ROWID 	= :chr_l_h_chld_rowid;

	IS_ANY_ORA_ERROR;

	

	

	if ( MANIFOLD_REG_STAT( chr_l_h_chld_regstcode[0] ) )
	{
		if ( TEMP_OUTREG_STAT(chr_l_h_chld_regstcode[0] ) )
		{
			EXEC SQL SELECT COUNT(*) 
						INTO :int_l_h_count_recs:l_i_count_recs
						FROM		DL_REGDET
						WHERE 	CLIENT		= :p_dl_regdet_struct_h->h_dl_client
						AND		IDENTIY_NO			= :p_dl_regdet_struct_h->h_indentity_no
						AND		REG_ST_CD	= :chr_l_h_chld_regstcode;
			
			IS_ANY_ORA_ERROR;
		
			if ( int_l_h_count_recs == 0 )
			{
				strcpy( chr_l_h_trd_tmpoutdt, APL_NULL_STRING );
				l_i_trd_tmpoutdt = -1;
			}
		}
		else if ( TEMP_RETREG_STAT( chr_l_h_chld_regstcode[0] ) )
		{
			EXEC SQL SELECT COUNT(*) 
						INTO :int_l_h_count_recs:l_i_count_recs
						FROM		DL_REGDET
						WHERE 	CLIENT		= :p_dl_regdet_struct_h->h_dl_client
						AND		IDENTIY_NO			= :p_dl_regdet_struct_h->h_indentity_no
						AND		REG_ST_CD	= :chr_l_h_chld_regstcode;
			
			IS_ANY_ORA_ERROR;
		
			if ( int_l_h_count_recs == 0 )
			{
				strcpy( chr_l_h_trd_tmpretdt, APL_NULL_STRING );
				l_i_trd_tmpretdt = -1;
			}
		}
	}

	

	if ( !(MANIFOLD_REG_STAT(chr_l_h_chld_regstcode[0]) ) ) 
	{
		chr_l_tmpout_regstcode 	= TEMP_OUTREG_CD;
		chr_l_tmpret_regstcode	= TEMP_RETREG_CD;

		EXEC SQL DECLARE l_regstat_rst_curs CURSOR FOR
					SELECT REG_ST_CD 
					FROM	 DL_REGDET
					WHERE	 CLIENT		= :p_dl_regdet_struct_h->h_dl_client
					AND	 IDENTIY_NO		= :p_dl_regdet_struct_h->h_indentity_no
					AND	 REG_ST_CD NOT IN ( :chr_l_tmpout_regstcode, :chr_l_tmpret_regstcode )
					GROUP BY REG_ST_CD
					HAVING SUM( QUANTITY - NVL(MOVED_QTY,0) ) > 0
					ORDER BY REG_ST_CD ASC;

		EXEC SQL OPEN l_regstat_rst_curs;

		IS_ANY_ORA_ERROR;
		
		

		EXEC SQL FETCH l_regstat_rst_curs 
					INTO	 :chr_l_h_trd_regstatus:l_i_trd_regstatus;

		IS_ANY_ORA_ERROR;

		EXEC SQL CLOSE l_regstat_rst_curs;

		if ( l_i_trd_regstatus == -1 )
		{
			strcpy(chr_l_h_trd_regstatus, APL_NULL_STRING);
		}
	}	

	CR_Proc_InstrQtyRound(l_h_chld_qty, chr_l_h_trd_instrcode,&l_temp_quantityrnd,l_debug_info_ptr);
	l_h_chld_qty=l_temp_quantityrnd;

	strcpy((char *)chr_l_sql_stmt.arr, APL_NULL_STRING); //AIX-Warnings Removal 
	sprintf( (char *)chr_l_sql_stmt.arr,
				"UPDATE DL_DEAL SET %s = ( %s - :v1 )  WHERE ROWID = :v2",
				chr_l_h_chld_fldupdt, chr_l_h_chld_fldupdt );

	chr_l_sql_stmt.len = strlen((char *)chr_l_sql_stmt.arr);//AIX Warning Removal
	chr_l_sql_stmt.arr[chr_l_sql_stmt.len] = '\0';
	chr_l_sql_stmt.len++;

	EXEC SQL PREPARE s from :chr_l_sql_stmt;

	EXEC SQL EXECUTE s USING 	:l_h_chld_qty,
										:chr_l_h_trd_rowid;

	IS_ANY_ORA_ERROR;

	if ( !(MANIFOLD_REG_STAT( chr_l_h_chld_regstcode[0] ) ) )
	{
		strcpy((char *)chr_l_sql_stmt.arr, APL_NULL_STRING); //AIX-Warnings Removal 
		CR_Proc_InstrQtyRound(l_h_chld_qty, chr_l_h_trd_instrcode,&l_temp_quantityrnd,l_debug_info_ptr);
		l_h_chld_qty=l_temp_quantityrnd;
		sprintf( (char *)chr_l_sql_stmt.arr, 
					"UPDATE DL_DEAL SET %s = ( NVL(%s,0) + :v1) WHERE ROWID = :v2",
					chr_l_h_prnt_fldupdt, chr_l_h_prnt_fldupdt );

		chr_l_sql_stmt.len = strlen((char *)chr_l_sql_stmt.arr); //AIX-Warnings Removal 
		chr_l_sql_stmt.arr[chr_l_sql_stmt.len] = '\0';
		chr_l_sql_stmt.len++;

		EXEC SQL PREPARE s from :chr_l_sql_stmt;

		EXEC SQL EXECUTE s USING 	:l_h_chld_qty,
											:chr_l_h_trd_rowid;

		IS_ANY_ORA_ERROR;
	}

	

	EXEC SQL SELECT 	DL_COMPLETEQTY,
							PEND_REG_QTY,
							QTY_LOST,
							REC_INT_000
				INTO		:l_h_trd_dl_completeqty:l_i_trd_mcomplqty,
							:l_h_trd_pend_reg_qty:l_i_trd_pendregqty,
							:l_h_trd_qty_lost:l_i_trd_lostqty,
							:l_h_trd_recinto000:l_i_trd_recinto000
				FROM		DL_DEAL
				WHERE		ROWID	= :chr_l_h_trd_rowid;

	IS_ANY_ORA_ERROR;

	if ( l_i_trd_mcomplqty == -1 )
	{
		l_h_trd_dl_completeqty = 0;
	}

	if ( l_i_trd_pendregqty == -1 )
	{
		l_h_trd_pend_reg_qty = 0;
	}

	if ( l_i_trd_lostqty	== -1 )
	{
		l_h_trd_qty_lost = 0;
	}

	if ( l_i_trd_recinto000 == -1 )
	{
		l_h_trd_recinto000 = 0;
	}

	

	strcpy( chr_l_mainfuncarea, APL_NULL_STRING);
	strcpy( chr_l_condid_a, APL_NULL_STRING);
	strcpy( chr_l_mainfuncarea, "TRD_RSTREG");
	strcpy( chr_l_condid_a, "POSN_STAT_VAL_FOR_MA");
	int_l_condexists_A = 0;

	if ( APL_FAILURE == CO_Chk_CntryEnabled(	chr_l_mainfuncarea,
														chr_l_condid_a,
														&int_l_condexists_A,
														l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL;
	}

	if ( int_l_condexists_A == 0 )
	{
		if ( l_h_trd_dl_completeqty + l_h_trd_pend_reg_qty == l_h_trd_quantity )
		{
			strcpy( chr_l_h_trd_lastregdt, APL_NULL_STRING );
			l_i_trd_lastregdt = -1;
			strcpy(chr_l_h_trd_posn_status, STATUS_POS_001 );
			l_i_trd_posn_status = 0;
		}
		else
		{
			if ( l_h_trd_qty_lost == 0 )
			{
				strcpy(chr_l_h_trd_posn_status, STATUS_POS_002 );
				l_i_trd_posn_status = 0;
			}
		}
	}
	else
	{
		if ( l_h_trd_dl_completeqty + l_h_trd_pend_reg_qty + l_h_trd_recinto000 == l_h_trd_quantity )
		{
			if ( l_h_trd_dl_completeqty > 0 || l_h_trd_pend_reg_qty > 0 )
			{
				strcpy( chr_l_h_trd_lastregdt, APL_NULL_STRING );
				l_i_trd_lastregdt = -1;
				strcpy(chr_l_h_trd_posn_status, STATUS_POS_001 );
				l_i_trd_posn_status = 0;
			}
			else
			{
				strcpy(chr_l_h_trd_posn_status, STATUS_POS_000 );
				l_i_trd_posn_status = 0;
			}
		}
		else
		{
			strcpy(chr_l_h_trd_posn_status, STATUS_POS_002 );
			l_i_trd_posn_status = 0;
		}
	}				

	

	EXEC SQL UPDATE DL_DEAL 
				SET	LAST_REG_DATE 		= :chr_l_h_trd_lastregdt:l_i_trd_lastregdt,
						STATUS_POS		= :chr_l_h_trd_posn_status:l_i_trd_posn_status,
						ALLOW_DROPDT		= NULL,
						STATUS		= :chr_l_h_trd_regstatus:l_i_trd_regstatus,
						ACCESS_STAMP	= :chr_l_sysdatetime_A,
						TMP_OUT_DT			= :chr_l_h_trd_tmpoutdt:l_i_trd_tmpoutdt,
						TMP_OUT_DATE			= :chr_l_h_trd_tmpretdt:l_i_trd_tmpretdt
				WHERE ROWID 			= :chr_l_h_trd_rowid;

	IS_ANY_ORA_ERROR;

	if(CA_Rtv_Block_Type(  p_dl_regdet_struct_h->h_indentity_no,
				APL_NULL_STRING,
				chr_l_h_trd_trcode,
				l_block_type,
				l_debug_info_ptr) == APL_FAILURE)
	{
			APL_GOBACK_FAIL
	}

	

	if ( strcmp( chr_l_h_prnt_posn_status, chr_l_h_chld_posn_status ) )
	{
		if ( APL_FAILURE == DL_Mod_Posn(	p_dl_regdet_struct_h->h_dl_client,
														chr_l_h_trd_instrcode,
														chr_l_h_trd_locncode,
														chr_l_h_prnt_posn_status,
														'S',
														chr_l_h_trd_trcode[0],
														&l_h_chld_qty,
														'I',l_block_type,
														l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL;
		}

		if ( APL_FAILURE == DL_Mod_Posn(	p_dl_regdet_struct_h->h_dl_client,
														chr_l_h_trd_instrcode,
														chr_l_h_trd_locncode,
														chr_l_h_chld_posn_status,
														'S',
														chr_l_h_trd_trcode[0],
														&l_h_chld_qty,
														'D',l_block_type,
														l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL;
		}
	}

	
	

	l_dl_dealaudit_struct_hb_a = (DL_DEALAUDIT_STRUCT_H *)calloc(1,sizeof(DL_DEALAUDIT_STRUCT_H));
	APL_MALLOC_FAIL(l_dl_dealaudit_struct_hb_a);

	strcpy(l_dl_dealaudit_struct_hb_a->h_dl_client, 	p_dl_regdet_struct_h->h_dl_client);
	strcpy(l_dl_dealaudit_struct_hb_a->h_indentity_no,		p_dl_regdet_struct_h->h_indentity_no);
	strcpy(l_dl_dealaudit_struct_hb_a->h_trail_for,	"T");
	strcpy(l_dl_dealaudit_struct_hb_a->h_processdetail,	p_intl_env_data_struct_h->processtion);
	strcpy(l_dl_dealaudit_struct_hb_a->h_proc_usr,		p_intl_env_data_struct_h->usr);
	strcpy(l_dl_dealaudit_struct_hb_a->h_subprocess,		chr_l_h_chld_regaudfun);
	strcpy(l_dl_dealaudit_struct_hb_a->h_logdate, 		APL_NULL_STRING);
	strcpy(l_dl_dealaudit_struct_hb_a->h_fail_cd,	APL_NULL_STRING);
	l_dl_dealaudit_struct_hb_a->h_qty = l_h_chld_qty;
	strcpy(l_dl_dealaudit_struct_hb_a->h_dlfromord, chr_l_h_trd_trdfromord);

	if ( APL_FAILURE == CR_Mod_CLHAudTrail( l_dl_dealaudit_struct_hb_a,
													l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL;
	}
   
    

         if (APL_FAILURE==EI_Mod_MQData(l_dl_dealaudit_struct_hb_a->h_dl_client,  
                                        l_dl_dealaudit_struct_hb_a->h_indentity_no,   
													 NULL,
													 NULL,
													 "B",
                                         l_debug_info_ptr))  
                     APL_GOBACK_FAIL   



	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function DL_Proc_DLRegStat with Success\n",
							NULL,
							p_intl_env_data_struct_h);
		}
		APL_FREE(l_dlregdet_struct_h);
		APL_FREE(l_dl_regdet_struct_ia);
		APL_FREE(l_dl_dealaudit_struct_hb_a);
		return(APL_SUCCESS);

	RETURN_FAILURE :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function DL_Proc_DLRegStat with Errors\n",
							NULL,
						  	p_intl_env_data_struct_h);
		}
		APL_FREE(l_dlregdet_struct_h);
		APL_FREE(l_dl_regdet_struct_ia);
		APL_FREE(l_dl_dealaudit_struct_hb_a);
		return(APL_FAILURE);

}
