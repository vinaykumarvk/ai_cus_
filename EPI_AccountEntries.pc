 /*  COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         :
 *
 * File Name         :      EPI_AccountEntries.pc
 *
 * Description         :      for Money Settlement of early payin clients
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author           Description                RFS No.
 * ---------   --------  ---------------    ------------------           ---------
 * 16/11/2023     01        Kotubabu        EPI deals money settlement
 *************************************************************************/


#include "Intellect_Common.h"
#include "BT_Common.h"
#include "DL_Interface.h"
#include "CO_IndStructdef.h"
#include "CO_Commdef.h"
#include "DL_Csd.h"
#include "CO_OthStructdef.h"
#include "string.h"

EXEC SQL INCLUDE SQLCA.H;

char     chr_g_log_buff [200];

char  chr_g_log_buffer[BUFFER_LEN] = APL_NULL_STRING;


int main(int argc, char **argv)
{

#ifdef OS_LINUX
FILE *g_logfile; 
#else
FILE* g_logfile = APL_OUT_FILE;
#endif
	struct sqlca sqlca;
  DEBUG_INFO_STRUCT_H                     *l_debug_info_ptr= NULL;
  INTL_ENV_DATA_STRUCT_H                  *p_intl_envdatastruct_h;
  DL_DEAL_SSTDET_STRUCT_H *l_deal_sstdet_struct_h;
  
    PRO_ACCTENT_PASSGL_STRUCT_H   *l_pro_acctent_passgl_struct_h = NULL;
	  PRO_ACCTENT_PASSGL_STRUCT_I   *l_pro_acctent_passgl_struct_i = NULL;

   l_debug_info_ptr = (DEBUG_INFO_STRUCT_H *)calloc(1,sizeof(DEBUG_INFO_STRUCT_H ));
   APL_MALLOC_FAIL(l_debug_info_ptr);
   memset(l_debug_info_ptr, NULL, sizeof(DEBUG_INFO_STRUCT_H));
   
   p_intl_envdatastruct_h = (INTL_ENV_DATA_STRUCT_H *)calloc(1,sizeof(INTL_ENV_DATA_STRUCT_H));
   APL_MALLOC_FAIL(p_intl_envdatastruct_h);
   memset(p_intl_envdatastruct_h, NULL, sizeof(INTL_ENV_DATA_STRUCT_H));
   
   l_deal_sstdet_struct_h = (DL_DEAL_SSTDET_STRUCT_H *)calloc(1,sizeof(DL_DEAL_SSTDET_STRUCT_H));
   APL_MALLOC_FAIL(l_deal_sstdet_struct_h);
	memset(l_deal_sstdet_struct_h, NULL, sizeof(DL_DEAL_SSTDET_STRUCT_H));
	
	l_pro_acctent_passgl_struct_h =(PRO_ACCTENT_PASSGL_STRUCT_H * )calloc( 1,sizeof(PRO_ACCTENT_PASSGL_STRUCT_H));
    APL_MALLOC_FAIL(l_pro_acctent_passgl_struct_h);
	memset(l_deal_sstdet_struct_h, NULL, sizeof(DL_DEAL_SSTDET_STRUCT_H));
	
	l_pro_acctent_passgl_struct_i =(PRO_ACCTENT_PASSGL_STRUCT_I * )calloc( 1,sizeof(PRO_ACCTENT_PASSGL_STRUCT_I));
      APL_MALLOC_FAIL(l_pro_acctent_passgl_struct_i);

	  memset(l_pro_acctent_passgl_struct_i,-1,sizeof( PRO_ACCTENT_PASSGL_STRUCT_I) );
	// query variable
	char l_str_OrderQuery[1500];
	memset(l_str_OrderQuery, APL_NULL_CHAR, 1500);
	//Var used in Split values from param string-- Shrinath
	int l_int_num = 0;
	char **temp = NULL;
	int int_num1 = 0;
	char **temp1 = NULL;
char l_chr_deal_date[APL_DATE_LEN] = APL_NULL_STRING;
char chr_l_client[11]= APL_NULL_STRING;
char chr_l_identiy_no[17]= APL_NULL_STRING;
char l_chr_exch_code[4] = APL_NULL_STRING;		
char l_chr_settl_no[16] = APL_NULL_STRING;
char l_clh_flg[2]=APL_NULL_STRING;
char chr_l_instrdt[21]= APL_NULL_STRING;
char  chr_l_mnystldt[21]= APL_NULL_STRING;
double int_l_cost = 0.0;
double int_l_brokercomm = 0.0;
double int_l_pend_regqty = 0.0;
double int_l_mrk_failqty = 0.0;
double int_l_rec_int000 = 0.0;
double int_l_compltqty = 0.0;
double int_l_delta000 = 0.0;
double int_l_delta001 = 0.0;
double int_l_delta003 = 0.0;
char chr_l_access_stamp[21]= APL_NULL_STRING;
char pro_sys_date[21]= APL_NULL_STRING;
char chr_l_deal_cd[2]= APL_NULL_STRING;
char chr_l_deal_stat[3]= APL_NULL_STRING;

short i_instrdt=0;
short i_mnystldt=0;
short i_cost=0;
short i_brokercomm=0;
short i_pend_regqty=0;
short i_mrk_failqty=0;
short i_rec_int000=0;
short i_compltqty=0;
short i_delta000=0;
short i_delta001=0;
short i_delta003=0;
short i_deal_cd=0;
short i_deal_stat=0;
      //Var to store values which are coming from  FE --Shrinath
/*Added by Anajneyulu for Early Payin Client - Start*/
short i_client_code = 0;
short i_ref_no = 0;
/*Added by Anajneyulu for Early Payin Client - End*/
	printf("in main() of EPI_MoneySetl \n");

	if(CO_Get_DBConnect(l_debug_info_ptr) == APL_FAILURE)
  {
       APL_GOBACK_FAIL
  }
  if ( CO_RtvSysParams(l_debug_info_ptr) == APL_FAILURE)
  {
       printf("\nReturned unsuccessfully from CO_RtvSysParams processtion\n");
	     APL_GOBACK_FAIL
  }

	if (CO_Rtv_RptFileName("EPI_MoneySetl",APL_LOGFILE_DESC,100,argv[5],argv,&g_logfile,l_debug_info_ptr) == APL_FAILURE)
  {
       APL_GOBACK_FAIL
  }

	if (  CO_RtvSysDt(pro_sys_date,l_debug_info_ptr) == APL_FAILURE )
			{
				APL_GOBACK_FAIL
	        }
	
	 memset(l_chr_deal_date, APL_NULL_CHAR, sizeof(APL_DATE_LEN));
	printf("\n shrinath argv  PARAMSTR-->|%s|",argv[9]);
	//Split param values-- Shrinath
	if(APL_FAILURE == CO_SplitStr(argv[9],'|', &l_int_num,&temp))
	{
		CO_ProcMonitor(g_logfile, "Failure from StrSplitFn", NULL, NULL);
		APL_GOBACK_FAIL
	}
	//EXEC SQL COMMIT
	//List all saparated values from Param Str --Shrinath
		APL_IF_DEBUG
		{
			printf("\n Total no. of arguments are |%d|", l_int_num);
			printf("\n A argument is Deal date-->|%s|", temp[0]);
		}

		//Copy temp values to selected variables
		
		strcpy(l_chr_deal_date, temp[0]);
		strcat(l_chr_deal_date," 12:00:00");
		//List all selected variable
		strcpy(p_intl_envdatastruct_h->usr,argv[3]);
    strcpy(p_intl_envdatastruct_h->h_mode, argv[4]);
    strcpy(p_intl_envdatastruct_h->processtion, argv[5]);
    strcpy(p_intl_envdatastruct_h->auth_req, argv[6]);
    strcpy(p_intl_envdatastruct_h->subprocess, argv[7]);
    strcpy(p_intl_envdatastruct_h->h_process, argv[8]);
	
	APL_IF_DEBUG
		{
			printf("\n shr usr |%s|", p_intl_envdatastruct_h->usr);
			printf("\n shr processtion-->|%s|", p_intl_envdatastruct_h->processtion);
		}

	if(BT_Status_Update(argv[0],
                      argv[1],
                      argv[2],
                      APL_STARTED_STATUS,
                      l_debug_info_ptr) ==APL_FAILURE)
        {
                APL_GOBACK_FAIL
        }
	
	fprintf(g_logfile, "Calling EPIClient_MoneySetl\n");
	fflush(g_logfile);

	//Split param values-- Shrinath
	if(APL_FAILURE == CO_SplitStr(argv[9],'|', &l_int_num,&temp))
	{
		CO_ProcMonitor(g_logfile, "Failure from StrSplitFn", NULL, NULL);
		APL_GOBACK_FAIL
	}
	/*Commented and added by Anjaneyulu for Early Payin Clients -Starts*/
	
	  /*strcpy(l_str_OrderQuery,"SELECT c.* FROM pro_acctent c, pro_gefu_accent t WHERE c.status   ='P'  AND c.module_ind='C'    AND c.proc_num =t.proc_num    AND t.clh_flg='E'    AND (t.CLIENT_CD,c.DEAL_IDENT) IN(SELECT DECODE(IV.OBLG_LVL,'SELF',DL.CLIENT,'MASTER',CL.CLN_MASTER,'GROUP',MA.CLN_MASTER),DL.CLIENT ||'|'||DL.IDENTIY_NO||'|'||DL.CLH_FLG||'|'||DL.EXCH_CODE||'|'||DL.MKT_TYPE||'|' ||DECODE(IV.OBLG_LVL,'SELF',DL.CLIENT,'MASTER',CL.CLN_MASTER,'GROUP',MA.CLN_MASTER) FROM DL_DEAL DL ,iv_clientsetup IV, MT_CLIENT CL,MT_CLIENT MA   WHERE DEAL_STAT='CC'    AND DL.client     = IV.client  AND IV.CLIENT= CL.CLN_CODE   AND CL.CLN_MASTER = MA.CLN_CODE ) order by t.proc_num");*/
	  
	//  strcpy(l_str_OrderQuery,"select CLIENT,DEAL_REF from IC_ACCOUNTING_DETAILS D, IC_ACCOUNTING_SUMMARY S where D.ACC_TYPE='EARLY_PAY' and S.BANK_RES_STATUS='S' and S.GL_RES_STATUS='S' and D.UNIQUE_REF_NO=S.UNIQUE_REF_NO AND S.MODULE=D.MODULE AND S.MODULE='IC_DEAL' AND S.BATCH_STATUS='P'");
	  //strcpy(l_str_OrderQuery,"SELECT DISTINCT D.CLIENT,  d.DEAL_REF FROM IC_ACCOUNTING_DETAILS D,  IC_ACCOUNTING_SUMMARY S,  dl_deal a WHERE D.ACC_TYPE   ='EARLY_PAY' AND A.CLIENT       = D.CLIENT AND A.INSTR_CODE   = D.INSTR_CODE AND A.IDENTIY_NO   = D.DEAL_REF AND A.DEAL_DATE    = D.DEAL_DATE AND A.DEAL_DATE = TO_DATE(%s,'DD/MM/YYYY HH24:MI:SS') AND S.GL_RES_STATUS='S' AND D.UNIQUE_REF_NO=S.UNIQUE_REF_NO AND S.MODULE       =D.MODULE AND S.MODULE       ='IC_DEAL' AND S.BATCH_STATUS ='P' AND a.DEAL_STAT    ='CC' ",l_chr_deal_date);
	  //sprintf(l_str_OrderQuery,"SELECT DISTINCT D.CLIENT,  d.DEAL_REF FROM IC_ACCOUNTING_DETAILS D,  IC_ACCOUNTING_SUMMARY S,  dl_deal a WHERE D.ACC_TYPE   ='EARLY_PAY' AND A.CLIENT       = D.CLIENT AND A.INSTR_CODE   = D.INSTR_CODE AND A.IDENTIY_NO   = D.DEAL_REF AND A.DEAL_DATE    = D.DEAL_DATE AND A.DEAL_DATE = TO_DATE('%s','DD/MM/YYYY HH24:MI:SS') AND S.GL_RES_STATUS='S' AND D.UNIQUE_REF_NO=S.UNIQUE_REF_NO AND S.MODULE       =D.MODULE AND S.MODULE       ='IC_DEAL' AND S.BATCH_STATUS ='P' AND a.DEAL_STAT    ='CC' ",l_chr_deal_date);
	/*Commented and added by Anjaneyulu for Early Payin Clients -End*/
      sprintf(l_str_OrderQuery,"SELECT DISTINCT A.CLIENT, A.IDENTIY_NO FROM PRO_ACCTENT P,DL_DEAL A WHERE (SUBSTR(P.DEAL_IDENT,0,INSTR(P.DEAL_IDENT,'|',1,2)-1)) = A.CLIENT||'|'||A.IDENTIY_NO AND P.ACC_TYPE='C' AND P.ACC_TYPE='C' AND P.STATUS='P' AND A.DEAL_DATE = TO_DATE('%s','DD/MM/YYYY HH24:MI:SS') AND a.DEAL_STAT ='CC' UNION SELECT CLIENT, IDENTIY_NO FROM DL_DEAL A WHERE host_date is not null AND DEAL_DATE = TO_DATE('%s','DD/MM/YYYY HH24:MI:SS') AND a.DEAL_STAT ='CC'  and ((A.client = (select cln_code from mt_client where cln_code=A.client and cln_type='N')) or (GETCLIENTPARAMBYID('IGNORE_AE',A.client)='Y')) and  GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.client)='Y' ",l_chr_deal_date,l_chr_deal_date);
	  
	  
	  
	  APL_IF_DEBUG
		{
			printf("\n SAJ: Order query is -->|%s|",l_str_OrderQuery);
		}

     EXEC SQL PREPARE S FROM :l_str_OrderQuery;
	 EXEC SQL DECLARE EPI_client_info CURSOR FOR S;
	 
	 EXEC SQL OPEN EPI_client_info;
     IS_ANY_ORA_ERROR

	for(;;)
	{
		memset(l_debug_info_ptr, NULL, sizeof(DEBUG_INFO_STRUCT_H));
		/*EXEC SQL FETCH EPI_client_info
				INTO :l_pro_acctent_passgl_struct_h:l_pro_acctent_passgl_struct_i;*/
				
		EXEC SQL FETCH EPI_client_info
				INTO :chr_l_client:i_client_code,:chr_l_identiy_no:i_ref_no;
			
		if(APL_ZERO_RESULT_SET)
				    {
						Alert("\n No Records Found in EPI_client_info CURSOR!\n" );
						fprintf(g_logfile,"\n No Records Found in EPI_client_info CURSOR!\n" );
						break;
				    }
		/*if (APL_FAILURE == CO_SplitStr( lul_pro_acctent_passgl_struct_h->deal_ident,
			'|',
			&int_num1,
			&temp1 ))	
		{
			fprintf(g_logfile,"Returns Unsuccessfully from CO_SplitStr\n");
			APL_GOBACK_FAIL			
		}
		
		strcpy(chr_l_client,temp1[0]);
		strcpy(chr_l_identiy_no,temp1[1]); Commented by Anjaney*/
					fprintf(g_logfile,"\n No of Values=|%d| Got values for Account=|%s| Identiy_No=|%s| \n",int_num1,chr_l_client,chr_l_identiy_no);
					Alert("\n No of Values=|%d| Got values for Account=|%s| Identiy_No=|%s| \n",int_num1,chr_l_client,chr_l_identiy_no);

					/* Added for Acct. Entr. STP - Exch. Code & Settl. No. included in Select Stmt. */
			
					EXEC SQL SELECT INSTRUMENT_DT,MONEY_SETL_DT,
									 COST,BROKERCOMM,PEND_REG_QTY,MRK_DL_FAILQTY,
									 REC_INT_000,DL_COMPLETEQTY,DELTA_000,DELTA_001,DELTA_003,
									 ACCESS_STAMP,DEAL_CD,DEAL_STAT,EXCH_CODE,SETTLEMENT_NO,CLH_FLG
									 INTO 	:chr_l_instrdt:i_instrdt,
											:chr_l_mnystldt:i_mnystldt,
											:int_l_cost:i_cost,
											:int_l_brokercomm:i_brokercomm,
											:int_l_pend_regqty:i_pend_regqty,
											:int_l_mrk_failqty:i_mrk_failqty,
											:int_l_rec_int000:i_rec_int000,
											:int_l_compltqty:i_compltqty,
											:int_l_delta000:i_delta000,
											:int_l_delta001:i_delta001,
											:int_l_delta003:i_delta003,
											:chr_l_access_stamp,
											:chr_l_deal_cd:i_deal_cd,
											:chr_l_deal_stat:i_deal_stat,
											:l_chr_exch_code,
											:l_chr_settl_no,
											:l_clh_flg
							FROM DL_DEAL
							WHERE IDENTIY_NO=:chr_l_identiy_no
							AND CLIENT=:chr_l_client
							AND DEAL_DATE =to_date(:l_chr_deal_date,'dd/mm/yyyy hh24:mi:ss');
					if(sqlca.sqlcode)
					{
						Alert("\n Error Fetching Data from Deal for  Single Settlement|%d| \n",sqlca.sqlcode);
						fprintf(g_logfile,"\n Error Fetching Data from Deal for  Single Settlement|%d| \n",sqlca.sqlcode);
					}
						
					IS_ANY_ORA_ERROR

					strcpy(l_deal_sstdet_struct_h->h_indentity_no,chr_l_identiy_no);
					strcpy(l_deal_sstdet_struct_h->h_dl_client,chr_l_client);

					strcpy(l_deal_sstdet_struct_h->h_access_stamp,chr_l_access_stamp);
					strcpy(l_deal_sstdet_struct_h->h_ispart_, "N");
					l_deal_sstdet_struct_h->h_newquantity = 0.0;
					l_deal_sstdet_struct_h->h_newamount = 0.0;
					strcpy(l_deal_sstdet_struct_h->h_newindentity_no, APL_NULL_STRING);
					
					if(i_instrdt!=-1)
					{
							strcpy(l_deal_sstdet_struct_h->h_instrdate,chr_l_instrdt);
					}
					else
					{
						strcpy(l_deal_sstdet_struct_h->h_instrdate,APL_NULL_STRING);
					}
					if(i_mnystldt!=-1)
					{
							strcpy(l_deal_sstdet_struct_h->h_moneydate,chr_l_mnystldt);
					}
					else
					{
						strcpy(l_deal_sstdet_struct_h->h_moneydate,APL_NULL_STRING);
					}
					if(i_cost!=-1)
					{
							l_deal_sstdet_struct_h->h_pr = int_l_cost;
					}
					else
					{
						l_deal_sstdet_struct_h->h_pr  = 0.0;
					}
					if(i_brokercomm!=-1)
					{
							l_deal_sstdet_struct_h->h_brokercomm = int_l_brokercomm;
					}
					else
					{
						l_deal_sstdet_struct_h->h_rec_int_000 = 0.0;
					}
					if(i_pend_regqty!=-1)
					{
							l_deal_sstdet_struct_h->h_pendregquantity = int_l_pend_regqty;
					}
					else
					{
						l_deal_sstdet_struct_h->h_pendregquantity= 0.0;
					}
					if(i_mrk_failqty!=-1)
					{
							l_deal_sstdet_struct_h->h_marktrfquantity = int_l_mrk_failqty;
					}
					else
					{
						l_deal_sstdet_struct_h->h_marktrfquantity = 0.0;
					}
					if(i_rec_int000!=-1)
					{	
						l_deal_sstdet_struct_h->h_rec_int_000 = int_l_rec_int000;
					}
					else
					{
						l_deal_sstdet_struct_h->h_rec_int_000 = 0.0;
					}
					if(i_compltqty!=-1)
					{
							l_deal_sstdet_struct_h->h_mcomplquantity = int_l_compltqty;
					}
					else
					{
						l_deal_sstdet_struct_h->h_mcomplquantity = 0.0;
					}
					if(i_delta000!=-1)
					{
							l_deal_sstdet_struct_h->h_delta_000 = int_l_delta000;
					}
					else
					{
						l_deal_sstdet_struct_h->h_delta_000 = 0.0;
					}
					if(i_delta001!=-1)
					{
							l_deal_sstdet_struct_h->h_delta_001 = int_l_delta001;
					}
					else
					{
						l_deal_sstdet_struct_h->h_delta_001 = 0.0;
					}
					if(i_delta003!=-1)
					{
							l_deal_sstdet_struct_h->h_delta_002 = int_l_delta003;
					}
					else
					{
						l_deal_sstdet_struct_h->h_delta_002 = 0.0;
					}
				
					strcpy(l_deal_sstdet_struct_h->h_moneydate,pro_sys_date);
					fprintf(g_logfile,"\n Before Calling Single Settlement Values Are: \n");
					fprintf(g_logfile,"\n Instr_dt=|%s|Mny_Dt=|%s|Cost=|%lf|Brkcomm=|%lf|PendQty=|%lf|MarkQty=|%lf|Rec_int=|%lf|ComplQty=|%lf|Delta0=|%lf|Delta1=|%lf|Delta2=|%lf|AccessStamp=|%s| chr_l_deal_cd=|%s| chr_l_deal_stat=|%s| \n",
								l_deal_sstdet_struct_h->h_instrdate,
								l_deal_sstdet_struct_h->h_moneydate,
								l_deal_sstdet_struct_h->h_pr,	
								l_deal_sstdet_struct_h->h_brokercomm,	
								l_deal_sstdet_struct_h->h_pendregquantity,
								l_deal_sstdet_struct_h->h_marktrfquantity,
								l_deal_sstdet_struct_h->h_rec_int_000,
								l_deal_sstdet_struct_h->h_mcomplquantity,
								l_deal_sstdet_struct_h->h_delta_000,
								l_deal_sstdet_struct_h->h_delta_001,
								l_deal_sstdet_struct_h->h_delta_002,
								l_deal_sstdet_struct_h->h_access_stamp,
								chr_l_deal_cd,
								chr_l_deal_stat);
/* Added by vishal  for ISHB-473 Equity Fund START*/
			Alert("\n identy no is |%s|",l_deal_sstdet_struct_h->h_indentity_no);
			Alert("\n clients is |%s|",l_deal_sstdet_struct_h->h_dl_client);
			Alert("\n Status %s, clh_flg %s",chr_l_deal_stat,l_clh_flg);
			if((!strcmp(chr_l_deal_stat,"PM")==0 && strcmp(l_clh_flg,"C")==0))
			{
				if((strcmp(chr_l_deal_cd,"4")==0 && !strcmp(chr_l_deal_stat,"MS")==0))
					{
							
						fprintf(g_logfile,"\n Actually Calling Single Settlement for Client=|%s| Indentiy_No=|%s| \n",l_deal_sstdet_struct_h->h_dl_client,l_deal_sstdet_struct_h->h_indentity_no);
						/*Alert("l_pro_acctent_passgl_struct_h->description == %s",l_pro_acctent_passgl_struct_h->description);
						Alert("l_pro_acctent_passgl_struct_h->description == %s",l_pro_acctent_passgl_struct_h->description);
						Alert("identity_no is |%s| and client is |%s|",l_deal_sstdet_struct_h->h_indentity_no,l_deal_sstdet_struct_h->h_dl_client); 
						if((strcmp(l_pro_acctent_passgl_struct_h->acc_type,"C")==0 || strcmp(l_pro_acctent_passgl_struct_h->acc_type,"G")==0))
							{*/
							Alert("\n Calling Single Settlement");
						if(APL_FAILURE == DL_Proc_DLSetlSing(  l_deal_sstdet_struct_h,
															  APL_NULL_STRING,
																p_intl_envdatastruct_h,
																l_debug_info_ptr ))
						{
							fprintf(g_logfile,"\n ***** Single Settlement Failed for Account=|%s| Indentiy_No=|%s| ***** \n",l_deal_sstdet_struct_h->h_dl_client,l_deal_sstdet_struct_h->h_indentity_no);
							CO_ProcMonitor(g_logfile,"Returned from DL_Proc_DLSetlSing() with Failure\n",l_debug_info_ptr,p_intl_envdatastruct_h);
							APL_GOBACK_FAIL
						}		
						Alert("\n After Calling Single Settlement Function \n");
							/*}
							else
							{
								Alert("\n Skipping Single settlement call for ACC_Type not C or G as Margin has been considered");
							}*/
			}
			sprintf(chr_g_log_buffer,"\n Before Updating GL Inden_Num=|%s| GL Proc_Num=|%s|\n",l_pro_acctent_passgl_struct_h->inden_num,l_pro_acctent_passgl_struct_h->proc_num);
						fprintf(g_logfile,"%s",chr_g_log_buffer);
/* Added by vishal  for ISHB-473 Equity Fund START*/						
						
					}
					else
					{
						Alert("\n Deal Already MS");
					}
	}

	EXEC SQL CLOSE EPI_client_info;
	
	APL_GOBACK_SUCCESS
	
	RETURN_SUCCESS:
	{
         memset(chr_g_log_buff, NULL, sizeof(chr_g_log_buff));
         sprintf(chr_g_log_buff,"EPIClient_MoneySetl Process Successfull\n");
        CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);

        if(BT_Status_Completed(argv[0], argv[1], argv[2], l_debug_info_ptr) == APL_FAILURE )
             APL_GOBACK_FAIL

        EXEC SQL COMMIT;
        IS_ANY_ORA_ERROR

        CO_ProcMonitor(g_logfile,"RECORD COMMITTED \n",NULL,NULL);
        fclose(g_logfile);
        exit(0);
  }
  RETURN_FAILURE:
  {
       EXEC SQL ROLLBACK;
       if (sqlca.sqlcode !=0)
       {
           fprintf(g_logfile,"T:Could Not Commit The Record\n");
       }
       fprintf(g_logfile,"EPIClient_MoneySetl exiting with Failure \n");

       if(BT_Status_Update(argv[0], argv[1], argv[2],"failed", l_debug_info_ptr) == APL_FAILURE)
           APL_GOBACK_FAIL

		   EXEC SQL COMMIT;

       fclose(g_logfile);

				exit(-1);
	}

}
