     /*Written by amit.k for HBAS_001 on 24/01/2007*/ 
     

     #include "Intellect_Common.h"
     #define MAXLENTH 4001
     EXEC SQL INCLUDE SQLCA.H;
     int main(int argc,char *argv[])
      {

       FILE *l_finifile;
       FILE *l_logfile;
       char **temp=NULL;
       
      DEBUG_INFO_STRUCT_H *l_debug_info_ptr = (DEBUG_INFO_STRUCT_H *) NULL;
       char chr_l_inifile[PATH_LENGTH] = APL_NULL_STRING;
       struct sqlca sqlca;

       char chr_uname[APL_USERID_LEN] = APL_NULL_STRING;
       char chr_custody_id_b[APL_USERID_LEN] = APL_NULL_STRING;
       char chr_passwd[APL_USERID_LEN] = APL_NULL_STRING;
        
       char proc_name[MAXLENTH] = APL_NULL_STRING;
       char proc_area[MAXLENTH] = APL_NULL_STRING;
       char environ_data[MAXLENTH] = APL_NULL_STRING;
       char proc_data[MAXLENTH] = APL_NULL_STRING;
       char user[MAXLENTH] = APL_NULL_STRING;
       char error[MAXLENTH] = APL_NULL_STRING;
    
    /* Added By shyam For EOD_HandOver on 230212 - Start */
	char chr_p_hdate[APL_DATE_LEN] =  APL_NULL_STRING;
	char chr_l_chk_system_online[2]=APL_NULL_STRING;
	char pro_sys_date[APL_DATE_LEN]= APL_NULL_STRING;
	int g_handover_flag=NULL;
	char chr_p_huser[25] =  APL_NULL_STRING;
	char chr_p_ind[3] = APL_NULL_STRING;
    char l_sysdate[20] = APL_NULL_STRING;
	char l_status[20] = APL_NULL_STRING;
	int l_dcount = 0;
	int l_counter=0;
	short l_abortflg = 0;
    /* Added By shyam For EOD_HandOver on 230212 - End */
    
      EXEC SQL BEGIN DECLARE SECTION;
          EXEC SQL VAR chr_uname IS STRING;
          EXEC SQL VAR chr_passwd IS STRING;
          EXEC SQL VAR proc_name IS STRING;
          EXEC SQL VAR proc_area IS STRING;
          EXEC SQL VAR environ_data IS STRING;
          EXEC SQL VAR proc_data IS STRING;
          EXEC SQL VAR user IS STRING;
          EXEC SQL VAR error IS STRING;
          EXEC SQL VAR chr_l_chk_system_online  IS STRING; /* Added By shyam For EOD_HandOver on 230212 */
      EXEC SQL END DECLARE SECTION;

    /* Added By shyam For EOD_HandOver on 230212 - Start*/
	memset(l_sysdate,APL_NULL_CHAR,sizeof(l_sysdate));
	memset(chr_l_chk_system_online,APL_NULL_CHAR,sizeof(chr_l_chk_system_online)); 
	memset(chr_p_huser,APL_NULL_CHAR,sizeof(chr_p_huser));
	memset(chr_p_ind,APL_NULL_CHAR,sizeof(chr_p_ind));
	memset(pro_sys_date,APL_NULL_CHAR,sizeof(pro_sys_date));
	/* Added By shyam For EOD_HandOver on 230212 - End*/
    
        strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
        strcat(chr_l_inifile,"intl_sun.cfg");
        if ( ( l_finifile = fopen(chr_l_inifile,"r") ) == NULL)
        {
              APL_GOBACK_FAIL
        }
        sqlca.sqlcode = 0;
        APL_FETCH_DB_LOGIN_DETAILS(l_finifile, chr_custody_id_b, chr_uname, chr_passwd, APL_OUT_FILE, &l_debug_info_ptr)
        IS_ANY_ORA_ERROR
        
        printf("\t********* Connecting to Database .........\n");

        EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;
        printf("\nsql code   |%d|***\n",sqlca.sqlcode); 
        IS_ANY_ORA_ERROR
        
        if (APL_FAILURE == CO_Rtv_RptFileName( "Intellect_autosys",
            APL_LOGFILE_DESC,
                 100,
                 "",
                 temp,
                 &l_logfile,
                 &l_debug_info_ptr ))
       {
       APL_GOBACK_FAIL
         }
      // printf("|%s|",argv[1]);
      if(argc==1)
      {
        printf("\n|Please enter the option to start EOD or BOD,enter E for EOD or B for BOD|\n");
     fprintf(l_logfile,"Please enter the option to start EOD or BOD,enter E for EOD or B for BOD\n");
       APL_GOBACK_FAIL
       }
         
      if(!strcmp(argv[1],"B"))
      {
      strcpy(proc_name,"PROC_BOD");
        printf("|%s|",proc_name);
      strcpy(proc_area,"PROC_BOD");
        printf("|%s|",proc_area);
      strcpy(environ_data,"USERSUPERMODEAUTFUNCTIONNAMEPROC_BODAUTHREQYSUBFUNACTIONDEBUG_FLAG1");
        printf("|%s|",environ_data);
      strcpy(proc_data,"MODEAUT");
        printf("|%s|",proc_data);
      strcpy(user,"SUPER");
        printf("|%s|",user);
      strcpy(error,"SUCCESS");
        printf("|%s|",error);
      g_handover_flag=1;	/* Added By shyam For EOD_HandOver on 230212*/
       }
     else if(!strcmp(argv[1],"E"))
      {

    /* Added By shyam For EOD_HandOver on 230212 - Start */

	printf ("\nCode Start - Added by Yog\n");

	EXEC SQL SELECT TO_CHAR(SYS_DATE,'DD/MM/YYYY') 
			INTO :pro_sys_date
			FROM PRO_SYS_DATE;
	
    IS_ANY_ORA_ERROR
    
    printf("\n pro_sys_date: |%s| \n",pro_sys_date);
	printf("\n Before Select statment: YOG \n");
	
	EXEC SQL SELECT HAND_OVER_IND
			INTO :chr_l_chk_system_online
			FROM PRO_SYS_HANDOVER
			WHERE TO_CHAR(HAND_OVER_DATE,'DD/MM/YYYY')=TO_CHAR(TO_DATE(:pro_sys_date,'DD/MM/YYYY'),'DD/MM/YYYY');

    IS_ANY_ORA_ERROR
    
	printf("\n chr_l_chk_system_online: |%s| \n",chr_l_chk_system_online);
	printf("\n Error Fetching Data from HAND_OVER_IND|%d| \n",sqlca.sqlcode);

	if(sqlca.sqlcode<0)
	{
		printf("\n Error Fetching Data from HAND_OVER_IND|%d| \n",sqlca.sqlcode);
	}    

    if (strcmp(chr_l_chk_system_online,"E")==0)
	{
		g_handover_flag=1;
	}
	else
	{			
        printf("\n Condition Filed: YOG \n");
        CO_ProcMonitor(APL_OUT_FILE, "Autosys Server Sleeping : System is Online", NULL, NULL);
        APL_GOBACK_FAIL;
    }

	/* Added By shyam For EOD_HandOver on 230212 End */
			
	  printf("\n Inside If Loop: YOG \n");
      strcpy(proc_name,"PROC_EOD");
        printf("|%s|",proc_name);
      strcpy(proc_area,"PROC_EOD");
        printf("|%s|",proc_area);
      strcpy(environ_data,"USERSUPERMODEAUTFUNCTIONNAMEPROC_EODAUTHREQYSUBFUNACTIONDEBUG_FLAG1");
        printf("|%s|",environ_data);
      strcpy(proc_data,"MODEAUT");
        printf("|%s|",proc_data);
      strcpy(user,"SUPER");
        printf("|%s|",user);
      strcpy(error,"SUCCESS");
        printf("|%s|",error);
       }
      else
      {
        printf("\n |you have entered the wrong option|\n");
     fprintf(l_logfile,"you have entered the wrong option, Please enter the option to start EOD or BOD,enter E for EOD or B for BOD\n");
       APL_GOBACK_FAIL
      }
        printf("\n1sql code   |%d|***\n",sqlca.sqlcode); 
    /* Added By shyam For EOD_HandOver on 230212 start */
    if(g_handover_flag == 1)
    {
		printf("Check Process is running before start\n");
		printf("System Date	|%s| Process Name |%s|\n",l_sysdate,proc_name);
			
		EXEC SQL SELECT STATUS
		INTO :l_status
		FROM SYS_BATCHPROC
		WHERE PROCESS_NAME like :proc_name
		AND PROC_INIT LIKE :proc_name
		AND TO_CHAR(STARTDATE,'DD/MM/YYYY')=:l_sysdate
		AND STATUS='started' 
		FOR UPDATE OF STATUS NOWAIT; 

		printf("Sqlcode for check exists |%d|\n",sqlca.sqlcode);

		if (sqlca.sqlcode == -54 )
		{	
			fprintf(l_logfile,"SAME PROCESS IS RUNNING",NULL,NULL);
			printf("Same Process is still running\n");
			APL_GOBACK_FAIL
		}
		else if(sqlca.sqlcode < 0 )
		{
			fprintf(l_logfile,"ERROR OCCURED %d\n",sqlca.sqlcode);
			APL_GOBACK_FAIL
		}
		else
		{
			printf("Before Commit\n");
			fflush(stdout);
			EXEC SQL COMMIT; 

			printf("To Commit |%d|\n",sqlca.sqlcode);

			if(sqlca.sqlcode < 0 )
			{
				fprintf(l_logfile,"ERROR OCCURED %d\n",sqlca.sqlcode);
				APL_GOBACK_FAIL
			}
			
			EXEC SQL SELECT NVL(COUNT(*),0)
			INTO :l_dcount
			FROM SYS_BATCHPROC
			WHERE PROCESS_NAME like :proc_name
			AND PROC_INIT LIKE :proc_name
			AND TO_CHAR(STARTDATE,'DD/MM/YYYY')=:l_sysdate
			AND STATUS='completed' ; 
		
			printf("Check completed process |%d|\n",sqlca.sqlcode);
			fflush(stdout);

			if (sqlca.sqlcode < 0)
			{
				fprintf(l_logfile,"ERROR OCCURED %d\n",sqlca.sqlcode);
				APL_GOBACK_FAIL
			}
			else if (l_dcount > 0 )
			{
				fprintf(l_logfile,"EOD IS ALREADY COMPLETED\n");
				APL_GOBACK_FAIL
			}
			else
			{
				printf("Process Request ....\n");
    /* Added By shyam For EOD_HandOver on 230212 end */
    
      EXEC ORACLE OPTION(CHAR_MAP=STRING);
      EXEC SQL EXECUTE
       BEGIN
         SP_INTL_BATCH(:proc_name, :proc_area, :environ_data , :proc_data, :user, :error);
       END;
     END-EXEC;
        printf("|%s|",error);
        
        printf("\n2sql code   |%d|***\n",sqlca.sqlcode); 
        IS_ANY_ORA_ERROR
    /* Added By shyam For EOD_HandOver on 230212 start */
			}
		}

		/* Check process process to complete	- Rohit	*/
		sleep(120);
		printf("wait .. keep patience\n");

		while(1)
		{
			EXEC SQL SELECT NVL(COUNT(*),0)
			INTO :l_dcount
			FROM SYS_BATCHPROC
			WHERE PROCESS_NAME like :proc_name
			AND PROC_INIT LIKE :proc_name
			AND TO_CHAR(STARTDATE,'DD/MM/YYYY')=:l_sysdate
			AND STATUS='completed' ; 
			
			printf("completed Sqlcode |%d| Count|%d|\n",sqlca.sqlcode,l_dcount);
			if (sqlca.sqlcode < 0)
			{
				fprintf(l_logfile,"ERROR OCCURED %d\n",sqlca.sqlcode);
				l_abortflg = 1;
				printf("Yog1: |%d|\n",l_abortflg);
				break;
			}
			else if (l_dcount > 0 )
			{
				fprintf(l_logfile,"EOD IS COMPLETED");
				break;
			}
			else
			{
				printf("check process abortion\n");	
				EXEC SQL SELECT NVL(COUNT(*),0)
				INTO :l_dcount
				FROM SYS_BATCHPROC
				WHERE PROCESS_NAME like :proc_name
				AND PROC_INIT LIKE :proc_name
				AND TO_CHAR(STARTDATE,'DD/MM/YYYY')=:l_sysdate
				AND (STATUS='aborted' or proc_endflg = 'Y'); 

				printf("aborted Sqlcode |%d| Count|%d|\n",sqlca.sqlcode,l_dcount);
				if (sqlca.sqlcode < 0)
				{
					fprintf(l_logfile,"ERROR OCCURED %d\n",sqlca.sqlcode);
					l_abortflg = 1;
					printf("Yog2: |%d|\n",l_abortflg);
					break;
				}
				else if (l_dcount > 0) 
				{
					fprintf(l_logfile,"EOD ABORTED");
					l_abortflg = 1;
					printf("Yog3: |%d|\n",l_abortflg);
					break;
				}
				else
				{
					printf("Check process running\n");	
					EXEC SQL SELECT STATUS
					INTO :l_status
					FROM SYS_BATCHPROC
					WHERE PROCESS_NAME like :proc_name
					AND PROC_INIT LIKE :proc_name
					AND TO_CHAR(STARTDATE,'DD/MM/YYYY')=:l_sysdate
					AND STATUS='started' 
					FOR UPDATE OF STATUS NOWAIT; 

					printf("started Sqlcode |%d| status|%s|\n",sqlca.sqlcode,l_status);
					if (sqlca.sqlcode == -54 )
					{	
						fprintf(l_logfile,"PROCESS IS RUNNING",NULL,NULL);
						printf("Process is still running\n");
						l_counter=0;
					}
					else if(sqlca.sqlcode < 0 )
					{
						fprintf(l_logfile,"ERROR OCCURED %d\n",sqlca.sqlcode);
						l_abortflg = 1;
						printf("Yog4: |%d|\n",l_abortflg);
						break;
					}
					else if (sqlca.sqlcode == 1403)
					{
						fprintf(l_logfile,"EOD NOT RUNNING..WAITING\n");
					}
					else
					{
						if ( l_counter > 10 )
						{
							fprintf(l_logfile,"EOD ABORTED\n");
							l_abortflg = 1;
							printf("Yog5: |%d|\n",l_abortflg);
							break;
						}
						l_counter++;
					}
				}
				printf("Lets Go to Sleep\n");
			}
			sleep(180);
		}

		printf("Here out of Eod/Bod Process	|%d|\n",l_abortflg);
		if(l_abortflg==0)
		{			
			printf("\n argv[1]: |%s| \n",argv[1]);
			if(!strcmp(argv[1],"B"))
			{
                strcpy(chr_p_ind,"O");
                strcat(chr_p_ind,APL_NULL_STRING);
                
                printf("chr_p_ind = |%s|\n" , chr_p_ind);
                printf("chr_p_huser = |%s|\n" , chr_p_huser);
                                    
            
                EXEC SQL SELECT TO_CHAR(SYS_DATE,'DD/MM/YYYY HH24:MI:SS') 
                INTO :pro_sys_date
                FROM PRO_SYS_DATE;
                printf("\n pro_sys_date: |%s| \n",pro_sys_date);

                IS_ANY_ORA_ERROR

                EXEC SQL INSERT INTO PRO_SYS_HANDOVER
                        VALUES(:pro_sys_date,
                               :chr_p_ind,
                               :user,
                               :pro_sys_date);

                if(sqlca.sqlcode!=0)
                {
                    printf("\n Error While Inserting data into HAND_OVER_IND|%d| \n",sqlca.sqlcode);
                }

                IS_ANY_ORA_ERROR
                EXEC SQL COMMIT WORK;
			}
			APL_GOBACK_SUCCESS
		}
		else
		{
			APL_GOBACK_FAIL
		}
    }
    else
    {
        CO_ProcMonitor(APL_OUT_FILE, "Autosys Server Sleeping : System is Online", NULL, NULL);
        APL_GOBACK_FAIL;
    }
    /* Added By shyam For EOD_HandOver on 230212 end */
    
    RETURN_SUCCESS :
     EXEC SQL COMMIT WORK RELEASE;
     fprintf(l_logfile,"Successfully Exiting the program INT_AUTOSYS\n");
     CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
     fclose(l_finifile);
     exit(APL_SUCCESS);
     
     RETURN_FAILURE :
     EXEC SQL COMMIT WORK RELEASE;

     fprintf(l_logfile,"Unsuccessfully Exiting the program INT_AUTOSYS\n");
     CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);

     fclose(l_finifile);
     exit(APL_FAILURE);
      return 0;
     }

