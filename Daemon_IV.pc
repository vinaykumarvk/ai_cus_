

   
	
   
   
   
   
   
   
   
   
   
   

#include "stdio_64.h"
#include "MS_Swift.h"
#include "IV_InterFace.h"
#include "CA_InterFace.h"
#include <unistd.h>
#include <stdlib.h>

EXEC SQL INCLUDE SQLCA;


char *chr_h_error_desc;
DEBUG_INFO_STRUCT_H **l_debug_info_ptr ;
DEBUG_INFO_STRUCT_H         *l_debug_info_struct_h_tmp=NULL; 

// AIX - Warnings
int   CO_Rtv_ErrString(DEBUG_INFO_STRUCT_H **l_debug_info_ptr,char *p_error_desc);

int main(int argc,char **argv)  //AIX-Warnings Removal
{

	
	int   CPopulateBaseNoStruct(MS_BASENO_STRUCT_H *p_ms_baseno_struct_h_a_b, char *chr_p_param_str);
	int   IV_Proc_CntrlParamPopulate(IV_CNTRL_PARAM_STRUCT_H *p_iv_cntrl_param_struct_h, char *chr_p_param_str);
	int   IV_Proc_IVAccPopulate(IV_CLIENT_STRUCT *p_iv_client_struct_b, char *chr_p_param_str);
	int   IV_Proc_CustOthPopulate(IV_CLIENT_OTHSERV_STRUCT_H *p_iv_client_othserv_struct_h, char *chr_p_param_str);
	int   IV_Proc_RowIDPtrPopulate(char *chr_ptr_rowid, char *chr_p_param_str);
	int   CO_Rtv_EnvStruct(INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,char *p_env_str);
	int   CO_Rtv_ErrStruct(char *p_error_desc,DEBUG_INFO_STRUCT_H **l_debug_info_ptr);
	int   IV_Proc_BillPayPopulate(long *p_newseqnum,IV_CLIENT_PYMT_STRUCT_H *p_iv_client_pymt_struct_h,char *chr_p_param_str);
	int   IV_Proc_BillServRDPopulate(IV_SERV_MAST_STRUCT *p_iv_serv_mast_struct_b, char *chr_p_param_str);
	int   IV_Proc_ManMsgPopulate(char *chr_startflag,long *int_msgsrno,char *corp_id[22],char *event_id[18],MS_MANMSG_STRUCT_H *p_ms_manmsg_struct_h, char *chr_p_param_str, char *p_param_str2, char *p_param_str3);
	int   IV_Proc_FtNtPopulate(CA_CANOTE_STRUCT_H *p_ca_canote_struct_h, char *chr_p_param_str);
	int   IV_Proc_AuthRDPopulate(int int_p_msgsrno, char *chr_p_msgno_a,char *chr_p_param_str);
	void  CO_Rtv_DataString(char *chr_p_str, char *p_lbl,char *p_data_value);
	void  CO_Rtv_DataDbl(char *chr_p_str, char *p_lbl,double *p_data_value);
	void  CO_Rtv_DataInt(char *chr_p_str, char *p_lbl,int *p_data_value);
	void  CO_Rtv_DataChar(char *chr_p_str, char *p_lbl,char *p_data_value);
	int Batch_Proc_MarkSuccessProcess(char *p_ora_rowid,char *p_return_value);
	int Proc_MarkFailProcess(char *p_ora_rowid, DEBUG_INFO_STRUCT_H **l_debug_info_ptr);
	int Populate_IV_CLIENTGL(IV_CLIENTGL_STRUCT_H *p_iv_clientgl_struct_h, char *chr_p_param_str);
   int   Batch_Proc_GridMarkSuccessProcess(char *p_ora_rowid,char *p_return_value,int p_seq_num,char *p_access_stamp);
	int IV_Proc_MutualFund(IV_MUTUAL_FUND_STRUCT *p_ivMutualFund_struct, char *chr_p_param_str);/* vinay */	
	int Populate_MANUAL_MESSAGE(MANUAL_MESSAGE_STRUCT_H *p_manual_message_struct_h,MS_MANMSG_STRUCT_H *p_ms_manmsg_struct_h,char *event_id,char * p_param_data,char * p_param_data2);	/* JC - RFS_MS_001 */
	
   int  Populate_IV_NRI_TDS(IV_NRI_TDS_STRUCT_H *p_iv_nri_tds_struct_h,char * p_param_data);/*ASHISH 29-03-2007	*/
	struct sqlca sqlca;
	MS_BASENO_STRUCT_H *l_ms_baseno_struct_ha_a; 
	short int_ret_val	=	0;
	IV_CNTRL_PARAM_STRUCT_H *l_iv_cntrl_param_struct_h;  
	IV_CLIENT_STRUCT *l_iv_clientstruct; 
	IV_CLIENT_OTHSERV_STRUCT_H *l_iv_client_othserv_struct_hc;  
	IV_CLIENT_PYMT_STRUCT_H *l_iv_client_pymt_struct_ha;  
	IV_SERV_MAST_STRUCT *l_ivserv_mast_struct;    
	MS_MANMSG_STRUCT_H  *l_ms_manmsg_struct_h;		
	CA_CANOTE_STRUCT_H *l_ca_canote_struct_h;
	IV_CLIENTGL_STRUCT_H *l_ivclientgl_struct;
	IV_BUCKET_TXN_STRUCT *l_ivBucketTxn_struct;
	IV_MUTUAL_FUND_STRUCT *l_ivMutualFund_struct;/* vinay kalaskar */
	MANUAL_MESSAGE_STRUCT_H *l_manual_message_struct_h;	/* JC - RFS_MS_001 */	
        IV_NRI_TDS_STRUCT_H *l_iv_nri_tds_struct_h; /*ASHISH 29-03-2007 */
	
	int l_sleep_microseconds = 0; 
	int l_sleep_seconds = 0;	
	char 	*chr_ptr_rowid; 
	int int_retstat=0;   
	int *p_newseqnum;	
	char chr_startflag[2];		
	long int_msgsrno=0;		
	char *corp_id;	
	char *event_id;	
	char *chr_p_msgno_a;		
 	int int_p_msgsrno;		
	FILE *chr_finifile;
	char chr_inifile[PATH_LENGTH],chr_l_uname[APL_USERID_LEN],chr_l_passwd[APL_PASSWD_LEN],chr_custody_id_b[APL_USERID_LEN],chr_buffer[KEY_LENGTH];
	DEBUG_INFO_STRUCT_H *l_debuginfo = (DEBUG_INFO_STRUCT_H *)NULL;
	//INTL_ENV_DATA_STRUCT_H l_intl_env_data_h;
	INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h;
char    l_data_fld_sep_str[2] = APL_NULL_STRING;
	
	char	h_ora_rowid[APL_ROWID_LEN];
	char 	chr_h_param_str_complete[12001];
	char 	chr_h_param_str[4001];
	char    chr_h_param_str2[4001] ;
	char    chr_h_param_str3[4001] ;
	char  chr_h_error_str[4000] = APL_NULL_STRING;
	char 	chr_h_env_str[2000] = APL_NULL_STRING;
	char 	chr_h_func_name[100] = APL_NULL_STRING;
	char 	chr_l_return_value[4000] = APL_NULL_STRING;
	//short i_func_param_str=0;
	short   i_ora_rowid=0;
	short   i_func_name=0;
	short   i_env_str=0;
	short   i_proc_data=0;
	short   i_param_str2=0;
	short   i_param_str3=0;
	short   i_error_str=0;

	/************** Changes made by Vedavati for 10g migration ************************/ 
	
	char  chr_l_audit_data[4000] = APL_NULL_STRING;/* HDFCGN_001 Sonali Audit*/
	char  chr_h_param_str_temp[4000] = APL_NULL_STRING;/* HDFCGN_001 Sonali Audit*/
	char  chr_l_data_key[4000] = APL_NULL_STRING;/*HDFCGN_001 Sonali Audit*/
	char  chr_h_entity_name[100] = APL_NULL_STRING;/*HDFCGN_001 Sonali Audit*/
	char  chr_h_comments[4000] = APL_NULL_STRING;/*HDFCGN_001 Sonali Audit*/

	EXEC SQL BEGIN DECLARE SECTION;
	EXEC SQL VAR h_ora_rowid IS STRING;
	EXEC SQL VAR chr_h_error_desc IS STRING;
	EXEC SQL VAR chr_h_param_str IS STRING;
	EXEC SQL VAR chr_h_param_str2 IS STRING;
	EXEC SQL VAR chr_h_param_str3 IS STRING;
	EXEC SQL VAR chr_h_error_str IS STRING;
	EXEC SQL VAR chr_h_env_str IS STRING;
	EXEC SQL VAR chr_h_func_name IS STRING;
	
	/*For Common Function Audit */
	EXEC SQL VAR chr_h_param_str_temp IS STRING;
	EXEC SQL VAR chr_l_audit_data IS STRING;
	EXEC SQL VAR chr_l_data_key IS STRING;
	EXEC SQL VAR chr_h_entity_name IS STRING;
	EXEC SQL VAR chr_h_comments IS STRING;

	EXEC SQL END DECLARE SECTION;
	memset(chr_inifile,APL_NULL_CHAR,PATH_LENGTH);
	memset(chr_buffer,APL_NULL_CHAR,KEY_LENGTH);
	memset(chr_l_uname,APL_NULL_CHAR,40);
	memset(chr_l_passwd,APL_NULL_CHAR,40);
	memset(chr_startflag, APL_NULL_CHAR,2);


   p_intlenv_data_struct_h =  (INTL_ENV_DATA_STRUCT_H *)calloc(1,sizeof(INTL_ENV_DATA_STRUCT_H));
   APL_MALLOC_FAIL(p_intlenv_data_struct_h);
   memset(p_intlenv_data_struct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H));


	if ( ( l_debug_info_struct_h_tmp = (DEBUG_INFO_STRUCT_H *)calloc(1,sizeof(DEBUG_INFO_STRUCT_H)) ) == NULL )
			 APL_GOBACK_FAIL ;

	if ( ( (l_debug_info_ptr) = (DEBUG_INFO_STRUCT_H **)calloc(1,sizeof(DEBUG_INFO_STRUCT_H *)) ) == NULL )	
			 APL_GOBACK_FAIL ;
	

	if ( argc != 2)
	{
		printf("\n Invalid sleep time for daemon ... \n ");
		APL_GOBACK_FAIL
	}
	else
	{
		printf("\n ******************  Server Started With Sleep Time :%s:****************\n",argv[1]);
		sscanf(argv[1],"%d.%d",&l_sleep_seconds,&l_sleep_microseconds);
	   l_sleep_microseconds = l_sleep_microseconds * 10000;	
	}

	strcpy(chr_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_inifile,"/intl_sun.cfg");
	if ( (chr_finifile = fopen(chr_inifile,"r") ) == NULL)
	        APL_GOBACK_FAIL;
   APL_FETCH_DB_LOGIN_DETAILS(chr_finifile, chr_custody_id_b, chr_l_uname, chr_l_passwd , APL_OUT_FILE , &l_debuginfo)
   EXEC SQL CONNECT :chr_l_uname IDENTIFIED BY :chr_l_passwd;
	if(sqlca.sqlcode != 0)                                     
   {
     ltoa_r(sqlca.sqlcode,chr_buffer,KEY_LENGTH-1);
     CO_InsertErr(&l_debuginfo,DB_ERR_NO,chr_buffer,
                 APL_NULL_STRING,APL_NULL_STRING,
                 __LINE__,__FILE__);
     APL_GOBACK_FAIL

   }

	if ( CO_RtvSysParams(l_debug_info_ptr) == APL_FAILURE)
	{
		printf("\nReturned unsuccessfully from CO_RtvSysParams processtion\n");
		APL_GOBACK_FAIL
	}

	
	printf("now here \n");

	EXEC SQL UPDATE PRO_DAEMON_STATUS SET STATUS = 1 where PROC_NAME = 'Daemon_IV';
	IS_ANY_ORA_ERROR;
sprintf(l_data_fld_sep_str,"%c",DATA_FIELD_SEPRTR);
strcat(l_data_fld_sep_str,APL_NULL_STRING);
	
	while(1)
	{
		CO_FreeErrLst(l_debug_info_ptr);	/** Biju **/
		CO_FreeErrLst(&l_debug_info_struct_h_tmp);	/** Biju **/

		/***************************************************************************
		JC - Commented - If there are unprocessed requests, Daemon should not sleep
		This code for sleep shifted from here and moved after request check query - Retrofit by Manasi for ISKB_7759 Common Issues Fixes
      		if(l_sleep_seconds != 0)
      		{
         		sleep(l_sleep_seconds);
      		}
      		usleep(l_sleep_microseconds);
		JC - Commented - If there are unprocessed requests, Daemon should not sleep - Retrofit by Manasi for ISKB_7759 Common Issues Fixes
		***************************************************************************/

		strcpy(h_ora_rowid,APL_NULL_STRING);	
		i_ora_rowid = -1;
		
		memset(chr_h_param_str ,APL_NULL_CHAR,4000);
		memset(chr_h_param_str2,APL_NULL_CHAR,4000);
		memset(chr_h_param_str3,APL_NULL_CHAR,4000);
		strcpy(chr_h_error_str,APL_NULL_STRING);
		strcpy(chr_h_env_str,APL_NULL_STRING);
		strcpy(chr_h_func_name,APL_NULL_STRING);
		strcpy(chr_l_return_value,APL_NULL_STRING);
		strcpy(chr_startflag,APL_NULL_STRING);

		/*For Common Function Audit */
		strcpy(chr_h_param_str_temp,APL_NULL_STRING);
		strcpy(chr_l_audit_data,APL_NULL_STRING);
		strcpy(chr_l_data_key,APL_NULL_STRING);
		strcpy(chr_h_error_str,APL_NULL_STRING);
		
		i_func_name=0;
		i_env_str=0;
		i_proc_data=0;
		i_param_str2=0;
		i_param_str3=0;
		i_error_str=0;

		
		
		
		EXEC SQL SELECT ROWID INTO :h_ora_rowid:i_ora_rowid from PRO_REQUEST_IV where 
		REQUEST_SEQ = (SELECT MIN(REQUEST_SEQ) FROM PRO_REQUEST_IV WHERE STATUS = '0') and rownum < 2 FOR UPDATE NOWAIT;		


		 
		
		if (sqlca.sqlcode == -54)
		{
			continue;
		}

		IS_ANY_ORA_ERROR

		if (sqlca.sqlcode == 1403)
		{
			EXEC SQL COMMIT;
			IS_ANY_ORA_ERROR;

			/***************************************************************************
			JC - Daemon should sleep only if there are unprocessed requests - Retrofit by Manasi for ISKB_7759 Common Issues Fixes */
			if(l_sleep_seconds != 0)
			{
				sleep(l_sleep_seconds);
			}
			usleep(l_sleep_microseconds);
			/* JC - Daemon should sleep only if there are unprocessed requests - Retrofit by Manasi for ISKB_7759 Common Issues Fixes
			***************************************************************************/

			continue;
		}

		
			
		EXEC SQL UPDATE PRO_REQUEST_IV SET STATUS = '1' where ROWID=:h_ora_rowid;
		IS_ANY_ORA_ERROR
		EXEC SQL COMMIT;
		IS_ANY_ORA_ERROR


		
		EXEC SQL SELECT PROC_NAME,ENVIRON_DATA,PROC_DATA,PROC_DATA_A,PROC_DATA_B,  ERROR_DET
		INTO :chr_h_func_name:i_func_name,:chr_h_env_str:i_env_str,:chr_h_param_str:i_proc_data,:chr_h_param_str2:i_param_str2,
		:chr_h_param_str3:i_param_str3,:chr_h_error_str:i_error_str 
		from PRO_REQUEST_IV where ROWID=:h_ora_rowid FOR UPDATE NOWAIT;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"CLIENT_BILL","FATAL ERR","ROWID");

		printf("param_str is %s",chr_h_param_str);
		strcat(chr_h_env_str,l_data_fld_sep_str);
		strcat(chr_h_param_str,l_data_fld_sep_str);
		strcat(chr_h_param_str2,l_data_fld_sep_str);
		strcat(chr_h_param_str3,l_data_fld_sep_str);
		strcat(chr_h_error_str,l_data_fld_sep_str);
	
		
/**
	   	p_intlenv_data_struct_h =  (INTL_ENV_DATA_STRUCT_H *)calloc(1,sizeof(INTL_ENV_DATA_STRUCT_H));
	   	APL_MALLOC_FAIL_LOC_A(p_intlenv_data_struct_h);
			Allocation Already Done Above, Only memset will do  -- Biju**/

	   	memset(p_intlenv_data_struct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H));

		int_ret_val = CO_Rtv_EnvStruct(p_intlenv_data_struct_h,chr_h_env_str);

		chr_h_error_desc =  (char *)calloc(4000,sizeof(char));
		/* APL_MALLOC_FAIL_LOC_A(chr_h_error_desc); */
/**
  		memset(chr_h_error_desc,NULL,sizeof(char));
		**/
  		memset(chr_h_error_desc,NULL,sizeof(char) * 4000);	/** changed By Biju **/

		/*For Common Function Audit */
		strcpy(chr_h_entity_name,p_intlenv_data_struct_h->processtion);
		CO_Rtv_DataString(chr_h_param_str,"COMMENTS",chr_h_comments);

		INTL_WARNING

					    /***** Changes for Audit Log , HDFCGN_001 Sonali*********/
                                            /***** Changes for 10g Migration by veda ********/

		strcpy(chr_h_param_str_temp,chr_h_param_str);

		int_ret_val = CO_PopulateAuditString(chr_h_entity_name,chr_h_param_str_temp,chr_l_audit_data,chr_l_data_key);

				/***** Changes for Audit Log, HDFCGN_001 Sonali *********/
				/*HDFCGN_001 Sonali , changed signature for audit */
		/*
		if((strcmp(chr_l_audit_data,APL_NULL_STRING)!=0) && (strcmp(chr_l_data_key,APL_NULL_STRING)!=0))
		{
		*/
		if ( APL_FAILURE==CO_Upd_AudLog_Chk_SysOnline(p_intlenv_data_struct_h,chr_l_audit_data,chr_l_data_key,chr_h_comments,l_debug_info_ptr))
			{
				Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
				APL_FREE(chr_h_error_desc);	/** Biju **/
				continue;
			}
	/*	} */
		S_NON_DCE_ERASE_DUMMY_WARNING;
		Alert("Erro Struct In Deamon |%s|",chr_h_error_str);	
		if (strlen(chr_h_error_str) != 0)
	        int_ret_val = CO_Rtv_ErrStruct(chr_h_error_str,l_debug_info_ptr);



		if (strcmp(chr_h_func_name,"wrp_I_UpdBasenoFn") == 0)
		{
			INTL_WARNING
			strcpy(chr_l_return_value,APL_NULL_STRING);
			l_ms_baseno_struct_ha_a =  (MS_BASENO_STRUCT_H *)calloc(1,sizeof(MS_BASENO_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_ms_baseno_struct_ha_a);
         memset(l_ms_baseno_struct_ha_a,NULL,sizeof(MS_BASENO_STRUCT_H));

		  

			int_ret_val = IV_Proc_BaseNoPopulate(l_ms_baseno_struct_ha_a,chr_h_param_str);
		
			if((MT_Mod_BaseNo(l_ms_baseno_struct_ha_a,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && 
				(CHECK_EXISTANCE_OF_ERROR))
       	{ 
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_BaseNo with Success\n", NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);

         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_BaseNo with Failure\n", NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);

          }
          free(l_ms_baseno_struct_ha_a);
      }
		else if (strcmp(chr_h_func_name,"wrp_BBlCtrlParamMnt") == 0) 
		{
			INTL_WARNING
	      strcpy(chr_l_return_value,APL_NULL_STRING);
		   l_iv_cntrl_param_struct_h =  (IV_CNTRL_PARAM_STRUCT_H *)calloc(1,sizeof(IV_CNTRL_PARAM_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_iv_cntrl_param_struct_h);
		   memset(l_iv_cntrl_param_struct_h,NULL,sizeof(IV_CNTRL_PARAM_STRUCT_H));

			int_ret_val = IV_Proc_CntrlParamPopulate(l_iv_cntrl_param_struct_h,chr_h_param_str);

			if((IV_Upd_ControlParamMnt(l_iv_cntrl_param_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from IV_Upd_ControlParamMnt with Success\n",NULL,p_intlenv_data_struct_h);
					strcpy(chr_l_return_value,APL_NULL_STRING);
					int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from IV_Upd_ControlParamMnt with Failure\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			free(l_iv_cntrl_param_struct_h);
		}
		else if (strcmp(chr_h_func_name,"wrp_BBlAccMnt") == 0)  
		{
			INTL_WARNING
			strcpy(chr_l_return_value,APL_NULL_STRING);
		   l_iv_clientstruct =  (IV_CLIENT_STRUCT *)calloc(1,sizeof(IV_CLIENT_STRUCT));
			APL_MALLOC_FAIL_LOC_A(l_iv_clientstruct);
		   memset(l_iv_clientstruct,NULL,sizeof(IV_CLIENT_STRUCT));

			int_ret_val = IV_Proc_IVAccPopulate(l_iv_clientstruct,chr_h_param_str);

			if((IV_AccMnt(l_iv_clientstruct,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from IV_AccMnt with Success\n",NULL,p_intlenv_data_struct_h);
					strcpy(chr_l_return_value,APL_NULL_STRING);
					int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from IV_AccMnt with Failure\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			free(l_iv_clientstruct);
		}

		/******************************** Vedavati HDFCIV_002 ******************************************/

		else if (strcmp(chr_h_func_name,"wrp_BBlAccGLMnt") == 0)  
		{
			INTL_WARNING
			strcpy(chr_l_return_value,APL_NULL_STRING);
		   l_ivclientgl_struct =  (IV_CLIENTGL_STRUCT_H *)calloc(1,sizeof(IV_CLIENTGL_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_ivclientgl_struct);
		   memset(l_ivclientgl_struct,NULL,sizeof(IV_CLIENTGL_STRUCT_H));

			int_ret_val = Populate_IV_CLIENTGL(l_ivclientgl_struct,chr_h_param_str);

			if((IV_AccMntGL(l_ivclientgl_struct,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from IV_AccMntGL with Success\n",NULL,p_intlenv_data_struct_h);
					strcpy(chr_l_return_value,APL_NULL_STRING);
					int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from IV_AccMntGL with Failure\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			free(l_ivclientgl_struct);
		}
		/*************************************************************************************/

		else if (strcmp(chr_h_func_name,"wrp_BBlOthServMnt") == 0) 
		{
			INTL_WARNING
			strcpy(chr_l_return_value,APL_NULL_STRING);
		   l_iv_client_othserv_struct_hc =  (IV_CLIENT_OTHSERV_STRUCT_H *)calloc(1,sizeof(IV_CLIENT_OTHSERV_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_iv_client_othserv_struct_hc);
		   memset(l_iv_client_othserv_struct_hc,NULL,sizeof(IV_CLIENT_OTHSERV_STRUCT_H));

			int_ret_val = IV_Proc_CustOthPopulate(l_iv_client_othserv_struct_hc,chr_h_param_str);

			if((IV_Proc_OthServMnt(l_iv_client_othserv_struct_hc,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from IV_Proc_OthServMnt with Success\n",NULL,p_intlenv_data_struct_h);
					strcpy(chr_l_return_value,APL_NULL_STRING);
					int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from IV_Proc_OthServMnt with Failure\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			 
			 CO_ProcMonitor(APL_OUT_FILE,"Before Free Area Added by Ram \n",NULL,p_intlenv_data_struct_h);
			
			/*free(l_iv_client_othserv_struct_hc);  */
		}
		else if (strcmp(chr_h_func_name,"wrp_I_UpdMsgStat") == 0)
		{
			INTL_WARNING
			strcpy(chr_l_return_value,APL_NULL_STRING);	
         
			chr_ptr_rowid=(char *)calloc(APL_ROWID_LEN,sizeof(char));
		   APL_MALLOC_FAIL_LOC_A(chr_ptr_rowid);
		   memset(chr_ptr_rowid,NULL,sizeof(char));

	     int_ret_val = IV_Proc_RowIDPtrPopulate(chr_ptr_rowid,chr_h_param_str);

      
        if(strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_REL) == 0 || strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_RSND) == 0 )
        {
		   	if((MS_Mod_MsgLogStat(chr_ptr_rowid,'P',&int_retstat,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
				{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from MS_Mod_MsgLogStat with Success\n",NULL,p_intlenv_data_struct_h);
					strcpy(chr_l_return_value,APL_NULL_STRING);
					int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
				}
				else
				{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from MS_Mod_MsgLogStat with Failure\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
				}
          } 
  			 
          else if(strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_DELETE) == 0)
          {
				if((MS_Mod_MsgLogDel(chr_ptr_rowid,&int_retstat,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
				{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from MS_Mod_MsgLogDel with Success\n",NULL,p_intlenv_data_struct_h);
					strcpy(chr_l_return_value,APL_NULL_STRING);
					int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
				}
				else
				{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from IBDbUpdIMSGLOG with Failure\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
				}
          } 
          free(chr_ptr_rowid);
		}
		else if (strcmp(chr_h_func_name,"wrp_BBlPaymentMnt")==0)
		{
			INTL_WARNING
			strcpy(chr_l_return_value,APL_NULL_STRING);
			l_iv_client_pymt_struct_ha = (IV_CLIENT_PYMT_STRUCT_H *)calloc(1,sizeof(IV_CLIENT_PYMT_STRUCT_H));
		   APL_MALLOC_FAIL_LOC_A(l_iv_client_pymt_struct_ha);
			memset(l_iv_client_pymt_struct_ha,NULL,sizeof(IV_CLIENT_PYMT_STRUCT_H));
			
			p_newseqnum = (int *)calloc(1,sizeof(int));
			APL_MALLOC_FAIL_LOC_A(p_newseqnum);
			memset(p_newseqnum,NULL,sizeof(int));

			int_ret_val = IV_Proc_BillPayPopulate((long *) p_newseqnum,l_iv_client_pymt_struct_ha,chr_h_param_str);//AIX Warning Removal
			if((IV_Proc_PymtMnt(l_iv_client_pymt_struct_ha,p_newseqnum,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
			{
		   	CO_ProcMonitor(APL_OUT_FILE,"Returned from BBlpaymentMnt with Success\n",NULL,p_intlenv_data_struct_h);
				strcpy(chr_l_return_value,APL_NULL_STRING);
			//	sprintf(chr_l_return_value,"%d", *p_newseqnum);
			/*	
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value); 
			*/	
			int_ret_val = Batch_Proc_GridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,*p_newseqnum,l_iv_client_pymt_struct_ha->bpymt_access_stamp);
			printf("return value is:|%s|\n",chr_l_return_value);	
				
			}	
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from BBlpaymentMnt with Failure\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			free(p_newseqnum);
			free(l_iv_client_pymt_struct_ha);

		}
		else if (strcmp(chr_h_func_name,"wrp_BBlServMnt") == 0)
		{
			INTL_WARNING
			strcpy(chr_l_return_value,APL_NULL_STRING);
	   	 l_ivserv_mast_struct =  (IV_SERV_MAST_STRUCT *)calloc(1,sizeof(IV_SERV_MAST_STRUCT));
		   APL_MALLOC_FAIL_LOC_A(l_ivserv_mast_struct);
	  	    memset(l_ivserv_mast_struct,NULL,sizeof(IV_SERV_MAST_STRUCT));

			 int_ret_val = IV_Proc_BillServRDPopulate(l_ivserv_mast_struct,chr_h_param_str);
			 if((IV_Proc_ServMnt(l_ivserv_mast_struct,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
		    {
				  CO_ProcMonitor(APL_OUT_FILE,"Returned from IV_Proc_ServMnt with Success\n",NULL,p_intlenv_data_struct_h);
				  strcpy(chr_l_return_value,APL_NULL_STRING);
				  int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			 }
			 else
		  	{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from IV_Proc_ServMnt with Failure\n",NULL,p_intlenv_data_struct_h);
				 int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
		    }
		    free(l_ivserv_mast_struct);
	   }
	  	else if (strcmp(chr_h_func_name,"wrp_Imanmsg")==0)
		{
		 	INTL_WARNING
			strcpy(chr_l_return_value,APL_NULL_STRING);
		 	l_ms_manmsg_struct_h =  (MS_MANMSG_STRUCT_H *)calloc(1,sizeof(MS_MANMSG_STRUCT_H));
		 	APL_MALLOC_FAIL_LOC_A(l_ms_manmsg_struct_h);
		 	memset(l_ms_manmsg_struct_h,NULL,sizeof(MS_MANMSG_STRUCT_H));

//			int_msgsrno = (long *)calloc(1,sizeof(long));
	//		APL_MALLOC_FAIL_LOC_A(int_msgsrno);
//			memset(int_msgsrno,NULL,sizeof(long));

			corp_id = (char *)calloc(22,sizeof(char));
			APL_MALLOC_FAIL_LOC_A(corp_id);
			memset(corp_id,NULL,sizeof(char));

			event_id = (char *)calloc(18,sizeof(char));
			APL_MALLOC_FAIL_LOC_A(event_id);
			memset(event_id,NULL,sizeof(char));
		 
	int_ret_val = IV_Proc_ManMsgPopulate((char *)chr_startflag,&int_msgsrno,(char **)corp_id,(char **)event_id,l_ms_manmsg_struct_h,chr_h_param_str,chr_h_param_str2,chr_h_param_str3);//AIX Warning Removal
		 	if((MS_Proc_ManMsgInit(l_ms_manmsg_struct_h,chr_startflag[0],&int_msgsrno,corp_id,event_id,l_debug_info_ptr, p_intlenv_data_struct_h) == APL_SUCCESS)&& (CHECK_EXISTANCE_OF_ERROR))
			{
		 		CO_ProcMonitor(APL_OUT_FILE,"Returned from MS_Proc_ManMsgInit with Success\n",NULL,p_intlenv_data_struct_h);
				strcpy(chr_l_return_value,APL_NULL_STRING);
				
				sprintf(chr_l_return_value,"%ld", int_msgsrno);//AIX Warning Removal
		 		int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MS_Proc_ManMsgInit with Failure\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
		 	}
		 	free(l_ms_manmsg_struct_h);
//		 	free(int_msgsrno);
		 	free(corp_id);
   		 free(event_id);
		 }
		 else if (strcmp(chr_h_func_name,"wrp_I_AuthResetDelete") == 0)
		 {
			INTL_WARNING
			strcpy(chr_l_return_value,APL_NULL_STRING);	
			chr_p_msgno_a = (char *)calloc(1,sizeof(char));
			APL_MALLOC_FAIL_LOC_A(chr_p_msgno_a);
			memset(chr_p_msgno_a,NULL,sizeof(char));


			 int_ret_val = IV_Proc_AuthRDPopulate(int_p_msgsrno,chr_p_msgno_a,chr_h_param_str);//AIX Warning Removal
			 if((MS_Proc_ManMsgAutRstDel(int_p_msgsrno,chr_p_msgno_a,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
			 { 
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MS_Proc_ManMsgAutRstDel with Success\n",NULL,p_intlenv_data_struct_h);
				strcpy(chr_l_return_value,APL_NULL_STRING);
				sprintf(chr_l_return_value, "%d", int_p_msgsrno);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MS_Proc_ManMsgAutRstDel with Failure\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			free(chr_p_msgno_a);
		}

/* JC - RFS_MS_001 -- Start */
else if (strcmp(chr_h_func_name,"wrp_Man_Msg")==0)
{
	INTL_WARNING
	strcpy(chr_l_return_value,APL_NULL_STRING);
	l_manual_message_struct_h =  (MANUAL_MESSAGE_STRUCT_H *)calloc(1,sizeof(MANUAL_MESSAGE_STRUCT_H));
	APL_MALLOC_FAIL_LOC_A(l_manual_message_struct_h);
	memset(l_manual_message_struct_h,NULL,sizeof(MANUAL_MESSAGE_STRUCT_H));

 	l_ms_manmsg_struct_h =  (MS_MANMSG_STRUCT_H *)calloc(1,sizeof(MS_MANMSG_STRUCT_H));
 	APL_MALLOC_FAIL_LOC_A(l_ms_manmsg_struct_h);
 	memset(l_ms_manmsg_struct_h,NULL,sizeof(MS_MANMSG_STRUCT_H));

	event_id = (char *)calloc(18,sizeof(char));
        APL_MALLOC_FAIL_LOC_A(event_id);
        memset(event_id,NULL,sizeof(char));

	CO_ProcMonitor(APL_OUT_FILE,"Calling Populate_MANUAL_MESSAGE\n",NULL,p_intlenv_data_struct_h);
	int_ret_val = Populate_MANUAL_MESSAGE(l_manual_message_struct_h,l_ms_manmsg_struct_h,event_id,chr_h_param_str,chr_h_param_str2);
	if((IV_ModManual_Msg(l_manual_message_struct_h,l_ms_manmsg_struct_h,event_id,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)&& (CHECK_EXISTANCE_OF_ERROR))
	{
		CO_ProcMonitor(APL_OUT_FILE,"Returned from IV_ModManual_Msg with Success\n",NULL,p_intlenv_data_struct_h);
		strcpy(chr_l_return_value,APL_NULL_STRING);

		int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
	}
	else
	{
		CO_ProcMonitor(APL_OUT_FILE,"Returned from IV_ModManual_Msg with Failure\n",NULL,p_intlenv_data_struct_h);
		int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
	}
	free(l_manual_message_struct_h);
	free(event_id);
	free(l_ms_manmsg_struct_h);
}
/* JC - RFS_MS_001 -- End */

      else if (strcmp(chr_h_func_name,"wrp_A_UpdFootNote") == 0)
      {
         INTL_WARNING
         l_ca_canote_struct_h =  (CA_CANOTE_STRUCT_H *)calloc(1,sizeof(CA_CANOTE_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_ca_canote_struct_h);
         memset(l_ca_canote_struct_h,NULL,sizeof(CA_CANOTE_STRUCT_H));

			strcpy(chr_h_param_str_complete,APL_NULL_STRING);
			strcat(chr_h_param_str_complete,chr_h_param_str);
			strcat(chr_h_param_str_complete,chr_h_param_str2);
			strcat(chr_h_param_str_complete,chr_h_param_str3);
         int_ret_val = IV_Proc_FtNtPopulate(l_ca_canote_struct_h,chr_h_param_str_complete);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling CA_Mod_FootNote\n",NULL,p_intlenv_data_struct_h);
         if(   (CA_Mod_FootNote(l_ca_canote_struct_h,
                              p_intlenv_data_struct_h,
                              l_debug_info_ptr)  == APL_SUCCESS)
            &&
               CHECK_EXISTANCE_OF_ERROR
            )
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CA_Mod_FootNote\n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CA_Mod_FootNote\n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

         free(l_ca_canote_struct_h);
      }
		    else if (strcmp(chr_h_func_name,"wrp_IVBuckTxnMnt") == 0)
	       {
	       INTL_WARNING
          strcpy(chr_l_return_value,APL_NULL_STRING);
		    l_ivBucketTxn_struct =  (IV_BUCKET_TXN_STRUCT *)calloc(1,sizeof(IV_BUCKET_TXN_STRUCT));
		    APL_MALLOC_FAIL_LOC_A(l_ivBucketTxn_struct);
		    memset(l_ivBucketTxn_struct,NULL,sizeof(IV_BUCKET_TXN_STRUCT));
				
          int_ret_val = IV_Proc_BucketTxn(l_ivBucketTxn_struct,chr_h_param_str);
          if((IV_Proc_BucketTxnMnt(l_ivBucketTxn_struct,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS))
			 {
	           CO_ProcMonitor(APL_OUT_FILE,"Returned from IV_Proc_ServMnt with Success\n",NULL,p_intlenv_data_struct_h);
	           strcpy(chr_l_return_value,APL_NULL_STRING);
              int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
           }
		      else
            {
				    CO_ProcMonitor(APL_OUT_FILE,"Returned from IV_Proc_ServMnt with Failure\n",NULL,p_intlenv_data_struct_h);
		          int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
           }
	             free(l_ivBucketTxn_struct);
       }
		 else if (strcmp(chr_h_func_name,"wrp_IVMutualFundMnt") == 0)
	    {
	       INTL_WARNING
          strcpy(chr_l_return_value,APL_NULL_STRING);
		    l_ivMutualFund_struct =(IV_MUTUAL_FUND_STRUCT *)calloc(1,sizeof(IV_MUTUAL_FUND_STRUCT));
		    APL_MALLOC_FAIL_LOC_A(l_ivMutualFund_struct);
		    memset(l_ivMutualFund_struct,NULL,sizeof(IV_MUTUAL_FUND_STRUCT));
				
          int_ret_val = IV_Proc_MutualFund(l_ivMutualFund_struct,chr_h_param_str);
          if((IV_Proc_MutualFundMnt(l_ivMutualFund_struct,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS))
			 {
	           CO_ProcMonitor(APL_OUT_FILE,"Returned from IV_Proc_MutualFundMnt with Success\n",NULL,p_intlenv_data_struct_h);
	           strcpy(chr_l_return_value,APL_NULL_STRING);
              int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
           }
		      else
            {
				    CO_ProcMonitor(APL_OUT_FILE,"Returned from IV_Proc_MutualFundMnt with Failure\n",NULL,p_intlenv_data_struct_h);
		          int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
           }
	             free(l_ivMutualFund_struct);
					 
		 }/******** vinay kalaskar *****************/
		
		
         /******************ASHISH 29-03-2007***************************/ 
          else if(strcmp(chr_h_func_name,"wrp_IV_NRI_TDS") == 0)
          {
              INTL_WARNING
              strcpy(chr_l_return_value,APL_NULL_STRING);
              l_iv_nri_tds_struct_h =(IV_NRI_TDS_STRUCT_H *)calloc(1,sizeof(IV_NRI_TDS_STRUCT_H));
                  APL_MALLOC_FAIL_LOC_A(l_iv_nri_tds_struct_h);
                  memset(l_iv_nri_tds_struct_h,NULL,sizeof(IV_NRI_TDS_STRUCT_H));
                  int_ret_val = Populate_IV_NRI_TDS(l_iv_nri_tds_struct_h,chr_h_param_str);
            if((IV_NRI_TDS_FUN(l_iv_nri_tds_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS))
            {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from IV_NRI_TDS_FUN with Success\n",NULL,p_intlenv_data_struct_h);
            strcpy(chr_l_return_value,APL_NULL_STRING);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
            }
            else
            {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from IV_NRI_TDS_FUN with Failure\n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
            }
                free(l_iv_nri_tds_struct_h);
         }
                    
          
		
       /********************ASHISH 29-03-2007 *************************/ 		
		
		
		else
     	{
				INTL_WARNING
      		int_ret_val = CO_InsertErr(l_debug_info_ptr,
                                  FUNC_NF,
                                   APL_NULL_STRING,
                                   APL_NULL_STRING,
                                   APL_NULL_STRING,
                                   __LINE__,
                                   __FILE__);
        		int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
     	}
	/**	free(p_intlenv_data_struct_h);	-- Biju **/
		free(chr_h_error_desc);
		CO_FreeErrLst(l_debug_info_ptr);
	}

   APL_GOBACK_SUCCESS;

RETURN_SUCCESS:

   EXEC SQL COMMIT ;
        CO_ProcMonitor(APL_OUT_FILE,"Exiting successfully  out of Bill Daemon\n",NULL,NULL);
        fclose(chr_finifile);
        exit(0);

RETURN_FAILURE:
   EXEC SQL ROLLBACK;
        CO_ProcMonitor(APL_OUT_FILE,"Exiting unsuccesfully out of BILL Daemon\n",l_debug_info_ptr,NULL);
        fclose(chr_finifile);
        exit(-1);
}

int Batch_Proc_MarkSuccessProcess(char *p_ora_rowid,char *p_return_value)
{
	short int_ret_val  =  0;

	EXEC SQL UPDATE PRO_REQUEST_IV set STATUS = '2',ERROR_DET='SUCCESS'||:p_return_value
	where rowid=:p_ora_rowid;
	IS_ANY_ORA_ERROR;

	EXEC SQL COMMIT ;
	IS_ANY_ORA_ERROR;

	int_ret_val = APL_SUCCESS;
	S_NON_DCE_ERASE_DUMMY_WARNING;

APL_GOBACK_SUCCESS//AIX Warning Removal
RETURN_SUCCESS :
	return(APL_SUCCESS);

RETURN_FAILURE :
	return(APL_FAILURE);
}

int Proc_MarkFailProcess(char *p_ora_rowid, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	short int_ret_val  =  0;

	EXEC SQL ROLLBACK ;
	IS_ANY_ORA_ERROR;

	int_ret_val = APL_FAILURE;

	S_NON_DCE_ERASE_DUMMY_WARNING;

	int_ret_val = CO_Rtv_ErrString(l_debug_info_ptr,chr_h_error_desc);

	if(strlen(chr_h_error_desc)>0)
	{
		EXEC SQL update  PRO_REQUEST_IV set STATUS = '3',ERROR_DET=:chr_h_error_desc
		where rowid=:p_ora_rowid;
	}
	else
	{
		EXEC SQL update  PRO_REQUEST_IV set STATUS = '2',ERROR_DET='SUCCESS'
		where rowid=:p_ora_rowid;
	}

	IS_ANY_ORA_ERROR;

	EXEC SQL COMMIT;
	IS_ANY_ORA_ERROR;

	strcpy(chr_h_error_desc,APL_NULL_STRING);

	S_NON_DCE_ERASE_DUMMY_WARNING;

APL_GOBACK_SUCCESS//AIX Warning Removal
RETURN_SUCCESS :
	return(APL_SUCCESS);

RETURN_FAILURE :
	return(APL_FAILURE);
}


int Batch_Proc_GridMarkSuccessProcess(char *p_ora_rowid,char *p_return_value,int p_seq_num,char *p_access_stamp)
{
	char l_data_fld_sep_str[2]      =     APL_NULL_STRING;
	sprintf(l_data_fld_sep_str,"%c",DATA_FIELD_SEPRTR);
	strcat(l_data_fld_sep_str,APL_NULL_STRING);
	short int_ret_val  =  0;

EXEC SQL UPDATE PRO_REQUEST_IV set STATUS = '2',ERROR_DET='SUCCESS'||:p_return_value||:l_data_fld_sep_str||:p_seq_num||:l_data_fld_sep_str||:p_access_stamp||:l_data_fld_sep_str
where rowid=:p_ora_rowid;
IS_ANY_ORA_ERROR;

CO_ProcMonitor(APL_OUT_FILE,"before commit successup\n",NULL,NULL);
EXEC SQL COMMIT ;
CO_ProcMonitor(APL_OUT_FILE,"after commit successup\n",NULL,NULL);
IS_ANY_ORA_ERROR;

int_ret_val = APL_SUCCESS;
S_NON_DCE_ERASE_DUMMY_WARNING;

APL_GOBACK_SUCCESS//AIX Warning Removal
RETURN_SUCCESS :
	return(APL_SUCCESS);

RETURN_FAILURE :
	return(APL_FAILURE);
}
