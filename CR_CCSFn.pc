














#include "stdio_64.h"
#include <time.h>
#include "Intellect_Common.h"
#include "Intellect_Error.h"
#include "CR_Common.h"
#include "CCS.h"
#include "cmqc.h"
#include "CO_HostStructdef.h"
#include "string.h"

EXEC SQL INCLUDE SQLCA;


int MS_Rtv_CCSPendTxn(DL_CCSMSG_STRUCT_H *p_dl_ccsmsg_struct_h,EI_MQ_DATA_STRUCT_H *p_ei_mq_hsn_struct_h ,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	char					chr_l_messagebuffer[MESSAGERR_LENGTH],chr_buffer[KEY_LENGTH];
	EI_MQ_DATA_STRUCT_H		l_ei_mq_data_struct_h;
	DEBUG_INFO_STRUCT_H 		*l_debuginfo = (DEBUG_INFO_STRUCT_H *)NULL;
   char    				chr_l_acc[APL_CLIENT_LENGTH];
   char    				chr_l_refno_a[APL_TXNREFNO_LEN];
	char					chr_l_reqtype[2];

	int					int_l_client_len 		   	=  	APL_CLIENT_LENGTH -1;
	int					int_l_refno_len	  			   =  	APL_TXNREFNO_LEN -1;
	int					int_l_date_len	  			   = 	   APL_DT_LEN -1;
	int					int_l_locncode_len		      = 	   APL_LOCNCODE_LENGTH -1;
   int               int_l_ccycode_len           =     APL_CCYCODE_LEN -1;
   
   int               int_l_booking_office_len     =   APL_BOOKING_OFFICE_LEN - 1; 
   int               int_l_message_type_len       =   APL_MESSAGE_TYPE_LEN - 1; 
   int               int_l_reference_len          =   11;
   int               int_l_tlc_trd_type_len       =   APL_TLC_TRD_TYPE_LEN -1;
   int               int_l_tran_code_len          =   APL_DEAL_CODE_LEN - 1;
   int               int_l_instrcode_len             =   10 ;
   int               int_l_qty_len                =   17; 
   int               int_l_amt_len                =   APL_AMT_LEN ; 
   int               int_l_sign_len               =   APL_SIGN_LEN - 1;
   int               int_l_cash_acc_len           =   APL_CASH_ACC_LEN -1;
   int               int_l_mkt_trd_type_len       =   APL_MKT_DEAL_TYPE_LEN - 1;
   int               int_l_failcode_len           =   APL_FAILCODE_LEN - 1;
   int               int_l_failcode_seq_len       =   APL_FAILCODE_SEQ_LEN ;
   int               int_l_narrative_len          =   APL_NARRATIVE_LEN -1 ;
   int               int_l_status_len             =   APL_STATUS_LEN -1;
   int               int_l_seqno_len              =   APL_SEQNO_LEN;
   int               int_l_failnote_len           =   71 - 1;
   int               int_l_depository_len         =   APL_DEPOSITORY_LEN - 1;
   int               int_l_status_qual_len        =   APL_STATUS_QUAL_LEN - 1;
   int               int_l_status_code_len        =   4;
   int               int_l_reas_qual_len          =   4;
   int               int_l_reas_code_len          =   APL_REAS_CODE_LEN - 1; 
   int               int_l_counterparty_len       =   APL_COUNTACC_LEN  - 1; 

   char              l_quantity[29];
   char              chr_l_qty_temp[18];
   char              chr_l_curramt[19];
   char              chr_l_cashaccno[14];
   char              chr_l_failcodeseq[5];
   char              int_l_sign[2];
   char              chr_l_failstatus[2] = APL_NULL_STRING;
   char              chr_l_statuscode[7] = APL_NULL_STRING;
   char              chr_l_reasonqualifier[7] = APL_NULL_STRING;
	char					int_l_temp[21]	=	APL_NULL_STRING;
	char					chr_l_temp_str[150]	=	APL_NULL_STRING;
	char					chr_l_narrative[71]	=	APL_NULL_STRING;
	char					chr_l_temp_failnote[71]	=	APL_NULL_STRING;
   char              chr_l_acc_grp[5];              
   
   sprintf(l_quantity,"%0.4f",p_dl_ccsmsg_struct_h->quantity);
	strncpy(chr_l_qty_temp,l_quantity,17);
	chr_l_qty_temp[17]= APL_NULL_CHAR;
	printf("l_qty_temp is %s\n",chr_l_qty_temp);
   sprintf(chr_l_curramt,"%.0lf",p_dl_ccsmsg_struct_h->amount);
	strcat(chr_l_curramt,".");
	strcat(chr_l_curramt,APL_NULL_STRING);
   sprintf(chr_l_failcodeseq,"%d",p_dl_ccsmsg_struct_h->failreason_index);
   strcpy(int_l_sign,p_dl_ccsmsg_struct_h->signature);
   strcpy(chr_l_statuscode,p_dl_ccsmsg_struct_h->status_cd);
   strcpy(chr_l_reasonqualifier,p_dl_ccsmsg_struct_h->reason_ql);    
   memset(chr_l_narrative,APL_NULL_CHAR,71);

  
   memset(chr_l_acc_grp,APL_NULL_CHAR,5);
   if (strlen(p_dl_ccsmsg_struct_h->client) > 0)
   {
     if (!(APL_FAILURE == MS_Rtv_CCSAccGrp(p_dl_ccsmsg_struct_h->client,&chr_l_acc_grp,l_debug_info_ptr)))
     {
       CO_Trim(chr_l_acc_grp,' ','R',chr_l_acc_grp,l_debug_info_ptr);
       if ((strcmp(chr_l_acc_grp,"FBD")==0) && strcmp(p_dl_ccsmsg_struct_h->h_cust_ext_ind,"N")==0)
       {
         strcpy(chr_l_narrative,"TURNAROUND");
       }
     }
   } 
	
	if (p_dl_ccsmsg_struct_h->amount < 0.0)
		strcpy(int_l_sign,"-");
   else
		strcpy(int_l_sign,"+");

if((strcmp(chr_l_statuscode,"PEND/F")==0) || (strcmp(chr_l_reasonqualifier,"PEND/F")==0))
{      

memset(chr_l_failstatus,APL_NULL_CHAR,2);
 EXEC SQL SELECT decode(a.access_stamp,NULL,'Y',decode(greatest(a.setl_date,to_date((trunc(a.access_stamp)+0.5),'DD/MM/YYYY hh:mi:ss')),a.setl_date,'Y','N')) INTO :chr_l_failstatus from DL_CCSPENDTXN a where a.iden_no = :p_dl_ccsmsg_struct_h->iden_no;

IS_ANY_ORA_ERROR

 	if ((strcmp(chr_l_failstatus,"Y")==0) && (strcmp(chr_l_statuscode,"PEND/F")==0))
  	{
     strcpy(chr_l_statuscode,"PEND");
  	}
 	else
  	{
    strcpy(chr_l_statuscode,"PENF");
  	}

	if ((strcmp(chr_l_failstatus,"Y")==0) && (strcmp(chr_l_reasonqualifier,"PEND/F")==0))
  	{
    strcpy(chr_l_reasonqualifier,"PEND");
  	}
	else
  	{
     strcpy(chr_l_reasonqualifier,"PENF");   
  	}

}

	memset(chr_l_messagebuffer,APL_NULL_CHAR,MESSAGERR_LENGTH);
	memset(chr_buffer,APL_NULL_CHAR,KEY_LENGTH);

	EXEC SQL VAR chr_l_messagebuffer IS STRING;


   memset(int_l_temp,APL_NULL_CHAR,21);
   strcpy(int_l_temp,p_dl_ccsmsg_struct_h->office_for_booking);
	if(APL_SUCCESS != CO_PadString(int_l_temp,'R',int_l_booking_office_len," ",l_debug_info_ptr))
   {
      sprintf(int_l_temp,"%8s", " ");
   }
	strcat(p_ei_mq_hsn_struct_h->msg, int_l_temp);

   memset(int_l_temp,APL_NULL_CHAR,21);
   strcpy(int_l_temp,p_dl_ccsmsg_struct_h->msg_class);
	if(APL_SUCCESS != CO_PadString(int_l_temp,'R',int_l_message_type_len," ",l_debug_info_ptr))
   {
        sprintf(int_l_temp,"%2s", " ");
   }

	strcat(p_ei_mq_hsn_struct_h->msg,int_l_temp);
   memset(int_l_temp,APL_NULL_CHAR,21);
   strcpy(int_l_temp,p_dl_ccsmsg_struct_h->identity);
	if(APL_SUCCESS !=  CO_PadString(int_l_temp,'R',int_l_reference_len, " ",l_debug_info_ptr))
   {
       sprintf(int_l_temp,"%11s", " ");
   }

   strcat(p_ei_mq_hsn_struct_h->msg,int_l_temp);

   memset(int_l_temp,APL_NULL_CHAR,21);
   strcpy(int_l_temp,p_dl_ccsmsg_struct_h->tlc_deal_type);
	if(APL_SUCCESS != CO_PadString(int_l_temp,'R',int_l_tlc_trd_type_len," ",l_debug_info_ptr))
   {
     sprintf(int_l_temp,"%1s", " ");
   }

	strcat(p_ei_mq_hsn_struct_h->msg,int_l_temp);

if((strcmp(p_dl_ccsmsg_struct_h->msg_class,"FC")==0) ||  (strcmp(p_dl_ccsmsg_struct_h->msg_class,"IF")==0))
     {

   memset(int_l_temp,APL_NULL_CHAR,21);
   strcpy(int_l_temp,p_dl_ccsmsg_struct_h->failreason_cd);

	if(APL_SUCCESS != CO_PadString( int_l_temp,'R',int_l_failcode_len," ",l_debug_info_ptr))

        {
          sprintf(int_l_temp,"%2s", " ");
         }

	strcat(p_ei_mq_hsn_struct_h->msg, int_l_temp);

	if(APL_SUCCESS != CO_PadString(chr_l_failcodeseq,'R',int_l_failcode_seq_len," ",l_debug_info_ptr))

        {
          sprintf(chr_l_failcodeseq,"%4s", " ");
        }

   strcat(p_ei_mq_hsn_struct_h->msg,chr_l_failcodeseq);
   memset(int_l_temp,APL_NULL_CHAR,21);
   strcpy(int_l_temp,p_dl_ccsmsg_struct_h->status_qual_ind);

	if(APL_SUCCESS != CO_PadString( int_l_temp,'R',int_l_status_qual_len," ",l_debug_info_ptr))

        {
          sprintf(int_l_temp,"%4s", " ");
        }

   strcat(p_ei_mq_hsn_struct_h->msg, int_l_temp);

	if(APL_SUCCESS != CO_PadString (chr_l_statuscode,'R',int_l_status_code_len," ",l_debug_info_ptr))

        {
          sprintf(chr_l_statuscode,"%4s", " ");
        }

   strcat(p_ei_mq_hsn_struct_h->msg,chr_l_statuscode);

	if(APL_SUCCESS != CO_PadString (chr_l_reasonqualifier,'R',int_l_reas_qual_len," ",l_debug_info_ptr))
        {
          sprintf(chr_l_reasonqualifier,"%4s", " ");
        }

   strcat(p_ei_mq_hsn_struct_h->msg,chr_l_reasonqualifier);
   memset(int_l_temp,APL_NULL_CHAR,21);
   strcpy(int_l_temp,p_dl_ccsmsg_struct_h->reason_cd);

   if(APL_SUCCESS != CO_PadString (int_l_temp,'R',int_l_reas_code_len," ",l_debug_info_ptr))
        {
          sprintf(int_l_temp,"%4s", " ");
        }

   strcat(p_ei_mq_hsn_struct_h->msg, int_l_temp);
   memset(chr_l_temp_failnote,APL_NULL_CHAR,71);
   strcpy(chr_l_temp_failnote,p_dl_ccsmsg_struct_h->fail_det);
  
	if(APL_SUCCESS != CO_PadString (chr_l_temp_failnote,'R',int_l_failnote_len," ",l_debug_info_ptr))
   {
       sprintf(chr_l_temp_failnote,"%70s", " ");
   }

   strcat(p_ei_mq_hsn_struct_h->msg,chr_l_temp_failnote);
	sprintf(chr_l_temp_str,"%140s", " ");
	chr_l_temp_str[140]='\0';
	strcat(p_ei_mq_hsn_struct_h->msg, chr_l_temp_str);

}
	
if ((strcmp(p_dl_ccsmsg_struct_h->msg_class,"T1")==0) || (strcmp(p_dl_ccsmsg_struct_h->msg_class,"T2")==0) ||  (strcmp(p_dl_ccsmsg_struct_h->msg_class,"T4")==0) || (strcmp(p_dl_ccsmsg_struct_h->msg_class,"IF")==0) ||  (strcmp(p_dl_ccsmsg_struct_h->msg_class,"IP")==0) ||  (strcmp(p_dl_ccsmsg_struct_h->msg_class,"IC")==0) ||  (strcmp(p_dl_ccsmsg_struct_h->msg_class,"IS")==0) ||  (strcmp(p_dl_ccsmsg_struct_h->msg_class,"IX")==0) )
 {
   memset(int_l_temp,APL_NULL_CHAR,21);
   

	if(p_dl_ccsmsg_struct_h->deal_code[0]=='4')
	strcpy(int_l_temp,"RP");
	if(p_dl_ccsmsg_struct_h->deal_code[0]=='3')
	strcpy(int_l_temp,"DP");
	if(p_dl_ccsmsg_struct_h->deal_code[0]=='2')
	strcpy(int_l_temp,"RF");
	if(p_dl_ccsmsg_struct_h->deal_code[0]=='1')
	strcpy(int_l_temp,"DF");
	strcat(p_ei_mq_hsn_struct_h->msg, int_l_temp);

   memset(int_l_temp,APL_NULL_CHAR,21);
   strcpy(int_l_temp,p_dl_ccsmsg_struct_h->client);
	if(APL_SUCCESS != CO_PadString (int_l_temp,'R',int_l_client_len," ",l_debug_info_ptr))
   {
      sprintf(int_l_temp,"%10s", " ");
   }

	strcat(p_ei_mq_hsn_struct_h->msg, int_l_temp);

   memset(int_l_temp,APL_NULL_CHAR,21);
   strcpy(int_l_temp,p_dl_ccsmsg_struct_h->master_clt);
	if(APL_SUCCESS != CO_PadString (int_l_temp,'R',int_l_client_len," ",l_debug_info_ptr))
   {
    	sprintf(int_l_temp,"%10s", " ");
   }

	strcat(p_ei_mq_hsn_struct_h->msg, int_l_temp);

   memset(int_l_temp,APL_NULL_CHAR,21);
   strcpy(int_l_temp,p_dl_ccsmsg_struct_h->clnt_ident);
	if(APL_SUCCESS != CO_PadString (int_l_temp,'R',int_l_refno_len," ",l_debug_info_ptr))
   {
     sprintf(int_l_temp,"%16s", " ");
   }

	strcat(p_ei_mq_hsn_struct_h->msg, int_l_temp);

   memset(int_l_temp,APL_NULL_CHAR,21);
   strcpy(int_l_temp,p_dl_ccsmsg_struct_h->brk);
	printf("reference int_len is %d\n",strlen(p_dl_ccsmsg_struct_h->brk));
	if(APL_SUCCESS != CO_PadString (int_l_temp,'R',int_l_client_len," ",l_debug_info_ptr))
   {
     sprintf(int_l_temp,"%10s", " ");
   }

	strcat(p_ei_mq_hsn_struct_h->msg, int_l_temp);
   

   printf("NARRATIVE IS : %s\n",chr_l_narrative);
   if (strlen(chr_l_narrative)>0)
   {
     strncat(chr_l_narrative,p_dl_ccsmsg_struct_h->description,60);
   }
   else
   {
     strncpy(chr_l_narrative,p_dl_ccsmsg_struct_h->description,70);
   }

	chr_l_narrative[70]='\0';
	if(APL_SUCCESS != CO_PadString (chr_l_narrative,'R',int_l_narrative_len," ",l_debug_info_ptr))
   {
     sprintf(chr_l_narrative,"%70s", " ");
   }
   printf("NARRATIVE AFTER APPENDIND IS: %s\n",chr_l_narrative);

	strcat(p_ei_mq_hsn_struct_h->msg, chr_l_narrative);

   memset(int_l_temp,APL_NULL_CHAR,21);
   strcpy(int_l_temp,p_dl_ccsmsg_struct_h->instr_code);
	if(APL_SUCCESS != CO_PadString (int_l_temp,'R',int_l_instrcode_len," ",l_debug_info_ptr))
   {
     sprintf(int_l_temp,"%10s", " ");
   }

	strcat(p_ei_mq_hsn_struct_h->msg, int_l_temp);

   memset(int_l_temp,APL_NULL_CHAR,21);
   strcpy(int_l_temp,p_dl_ccsmsg_struct_h->currency_cd);
	if(APL_SUCCESS != CO_PadString (int_l_temp,'R',int_l_ccycode_len," ",l_debug_info_ptr))
   {
      sprintf(int_l_temp,"%3s", " ");
   }

	strcat(p_ei_mq_hsn_struct_h->msg, int_l_temp);

	if(APL_SUCCESS != CO_PadString (chr_l_qty_temp,'R',int_l_qty_len," ",l_debug_info_ptr))
   {
      sprintf(chr_l_qty_temp,"%17s", " ");
   }

   strcat(p_ei_mq_hsn_struct_h->msg,chr_l_qty_temp);

   memset(int_l_temp,APL_NULL_CHAR,21);
   strcpy(int_l_temp,p_dl_ccsmsg_struct_h->currencycodecurr);
	if(APL_SUCCESS != CO_PadString (int_l_temp,'R',int_l_ccycode_len," ",l_debug_info_ptr))
   {
     sprintf(int_l_temp,"%3s", " ");
   }

	strcat(p_ei_mq_hsn_struct_h->msg, int_l_temp);

	if(APL_SUCCESS != CO_PadString (chr_l_curramt,'R',int_l_amt_len," ",l_debug_info_ptr))
   {
    sprintf(chr_l_curramt,"%19s", " ");
   }

	strcat(p_ei_mq_hsn_struct_h->msg,chr_l_curramt);

	if(APL_SUCCESS != CO_PadString (int_l_sign,'R',int_l_sign_len ," ",l_debug_info_ptr))
   {
    sprintf(int_l_sign,"%1s", " ");
    }

	strcat(p_ei_mq_hsn_struct_h->msg,int_l_sign);

   memset(int_l_temp,APL_NULL_CHAR,21);
   strcpy(int_l_temp,p_dl_ccsmsg_struct_h->gl_clt);
	if(APL_SUCCESS != CO_PadString (int_l_temp,'L',int_l_cash_acc_len,"0",l_debug_info_ptr))
        {
          sprintf(int_l_temp,"%14s", " ");
         }

	strcat(p_ei_mq_hsn_struct_h->msg,int_l_temp);

	strcat(p_ei_mq_hsn_struct_h->msg," ");	
	


	memset(int_l_temp,APL_NULL_CHAR,21);
	strcpy(int_l_temp,p_dl_ccsmsg_struct_h->deal_date);
	if(strlen(p_dl_ccsmsg_struct_h->deal_date)!=0)
	{
	if(APL_SUCCESS != CO_PadString (int_l_temp,'R',int_l_date_len," ",l_debug_info_ptr))
        {
          sprintf(int_l_temp,"%8s", " ");
         }
	}
	else
	{
		sprintf(int_l_temp,"%8s"," ");
		strcat(int_l_temp,APL_NULL_STRING);
	}
	strcat(p_ei_mq_hsn_struct_h->msg, int_l_temp); 

   memset(int_l_temp,APL_NULL_CHAR,21);
   strcpy(int_l_temp,p_dl_ccsmsg_struct_h->setl_date);
	if(APL_SUCCESS != CO_PadString (int_l_temp,'R',int_l_date_len," ",l_debug_info_ptr))
        {
          sprintf(int_l_temp,"%8s", " ");
         }

	strcat(p_ei_mq_hsn_struct_h->msg,int_l_temp);

   memset(int_l_temp,APL_NULL_CHAR,21);
   strcpy(int_l_temp,p_dl_ccsmsg_struct_h->exp_setldate);
	if(APL_SUCCESS != CO_PadString (int_l_temp,'R',int_l_date_len," ",l_debug_info_ptr))
        {
          sprintf(int_l_temp,"%8s", " ");
        }

	strcat(p_ei_mq_hsn_struct_h->msg, int_l_temp);

   memset(int_l_temp,APL_NULL_CHAR,21);
   strcpy(int_l_temp,p_dl_ccsmsg_struct_h->depo);
	if(APL_SUCCESS != CO_PadString (int_l_temp,'R',int_l_depository_len," ",l_debug_info_ptr))
        {
          sprintf(int_l_temp,"%3s", " ");
         }

	strcat(p_ei_mq_hsn_struct_h->msg, int_l_temp);
	
   memset(int_l_temp,APL_NULL_CHAR,21);
   strcpy(int_l_temp,p_dl_ccsmsg_struct_h->mkrt_dl_class);
	if(APL_SUCCESS != CO_PadString (int_l_temp,'R',int_l_mkt_trd_type_len," ",l_debug_info_ptr))

        {
          sprintf(int_l_temp,"%2s", " ");
         }

	strcat(p_ei_mq_hsn_struct_h->msg, int_l_temp);

	strcat(p_ei_mq_hsn_struct_h->msg," ");

   memset(int_l_temp,APL_NULL_CHAR,21);
   strcpy(int_l_temp,p_dl_ccsmsg_struct_h->cp_clt);
	strcat(int_l_temp,APL_NULL_CHAR);
   
	if(APL_SUCCESS != CO_PadString (int_l_temp,'R',int_l_counterparty_len," ",l_debug_info_ptr))

        {
          
          sprintf(int_l_temp,"%15s", " ");
         }

	strcat(p_ei_mq_hsn_struct_h->msg, int_l_temp);
	printf("LEN OF T1 MESSAGE |%d|\n",strlen(p_ei_mq_hsn_struct_h->msg));
}



if((strcmp(p_dl_ccsmsg_struct_h->msg_class,"SC")==0) || (strcmp(p_dl_ccsmsg_struct_h->msg_class,"SR")==0))
{
   if(APL_SUCCESS != CO_PadString (chr_l_qty_temp,'R',int_l_qty_len," ",l_debug_info_ptr))
   {
      sprintf(chr_l_qty_temp,"%17s", " ");
   }

   strcat(p_ei_mq_hsn_struct_h->msg,chr_l_qty_temp);
   memset(int_l_temp,APL_NULL_CHAR,21);
   strcpy(int_l_temp,p_dl_ccsmsg_struct_h->currency_cd);

   
	if(APL_SUCCESS != CO_PadString (int_l_temp,'R',int_l_ccycode_len," ",l_debug_info_ptr))

        {
          sprintf(int_l_temp,"%3s", " ");
        }

   strcat(p_ei_mq_hsn_struct_h->msg, int_l_temp);
	if(APL_SUCCESS != CO_PadString (chr_l_curramt,'R',int_l_amt_len," ",l_debug_info_ptr))

        {
          sprintf(chr_l_curramt,"%19s", " ");
        }

   strcat(p_ei_mq_hsn_struct_h->msg,chr_l_curramt);
	if(APL_SUCCESS != CO_PadString (int_l_sign,'R',int_l_sign_len ," ",l_debug_info_ptr))

        {
          sprintf(int_l_sign,"%1s", " ");
        }

   strcat(p_ei_mq_hsn_struct_h->msg, int_l_sign);
   memset(int_l_temp,APL_NULL_CHAR,21);
   strcpy(int_l_temp,p_dl_ccsmsg_struct_h->actual_setldt);

	if(APL_SUCCESS != CO_PadString (int_l_temp,'R',int_l_date_len," ",l_debug_info_ptr))

        {
          sprintf(int_l_temp,"%8s", " ");
        }

   strcat(p_ei_mq_hsn_struct_h->msg,int_l_temp);
}

if ((strcmp(p_dl_ccsmsg_struct_h->msg_class,"CN")==0) || (strcmp(p_dl_ccsmsg_struct_h->msg_class,"II")==0))
 {
   memset(int_l_temp,APL_NULL_CHAR,21);
   strcpy(int_l_temp,p_dl_ccsmsg_struct_h->access_stamp);

	if(APL_SUCCESS != CO_PadString (int_l_temp,'R',int_l_date_len," ",l_debug_info_ptr))

        {
          sprintf(int_l_temp,"%8s", " ");
        }

   strcat(p_ei_mq_hsn_struct_h->msg,int_l_temp);

}

strcpy(p_ei_mq_hsn_struct_h->status_ind,"S");

APL_GOBACK_SUCCESS;


   RETURN_SUCCESS :
      return(APL_SUCCESS);

   RETURN_FAILURE :
      CO_ProcMonitor(   APL_OUT_FILE,
                  "Exiting MS_Rtv_CCSPendTxn processtion with errors",
                   NULL,
                   NULL);
      return(APL_FAILURE);	
}	




int MS_Proc_CCSMsgPut(EI_MQ_DATA_STRUCT_H *p_ei_mq_hsn_struct_h,MQHCONN Hcon, MQHOBJ Hobj, FILE *chr_finifile,MQLONG *ReturnCode,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

   MQMD		md 	=	{MQMD_DEFAULT};
	MQPMO		pmo	=	{MQPMO_DEFAULT};

	MQLONG	CompCode;
	MQLONG	Reason;
	MQLONG	messlen;
	char		chr_buffer[MESSAGERR_LENGTH]				=	{APL_NULL_STRING};
	char		temp[MESSAGERR_LENGTH + 100] 		=	{APL_NULL_STRING};


	CO_ProcMonitor(APL_OUT_FILE,"Entered MS_Proc_CCSMsgPut Function",NULL,NULL);
	
	
	md.Version = MQMD_VERSION_2;
	md.Report = MQRO_NONE;
	md.MsgType = MQMT_DATAGRAM;
	md.Expiry = MQEI_UNLIMITED;
	md.Feedback = MQFB_NONE;
	md.Encoding = MQENC_NATIVE;
	md.CodedCharSetId = MQCCSI_Q_MGR;
	memcpy(md.Format,MQFMT_STRING,(size_t)MQ_FORMAT_LENGTH);
	md.Persistence = MQPER_PERSISTENT;
	strcpy(md.ReplyToQMgr,NULL);
	md.PutApplType = MQAT_UNIX;


	pmo.Version = MQPMO_VERSION_2;
	pmo.Options = MQPMO_NEW_MSG_ID + MQPMO_SYNCPOINT + MQPMO_SET_ALL_CONTEXT + MQPMO_FAIL_IF_QUIESCING;
	pmo.Context = Hobj;

	printf("Current Message is :%s\n",p_ei_mq_hsn_struct_h->msg);

	messlen = strlen(p_ei_mq_hsn_struct_h->msg);
	MQPUT(Hcon,Hobj,&md,&pmo,messlen,p_ei_mq_hsn_struct_h->msg,&CompCode,&Reason);
	if (Reason != MQRC_NONE) 
	{
		sprintf(temp,"MQ Put Message Failed with Reason h_code %ld",Reason);
      CO_ProcMonitor(APL_OUT_FILE,temp,NULL,NULL);
		memcpy(ReturnCode,&Reason,sizeof(Reason));
      APL_GOBACK_FAIL
		strcpy(temp,APL_NULL_STRING);
	}
	else
	{
		MQCMIT(Hcon,&CompCode,&Reason);
		if (Reason != MQRC_NONE)
		{
			CO_ProcMonitor(APL_OUT_FILE,"Could not commit on MQ Server",NULL,NULL);  
			MQBACK(Hcon,&CompCode,&Reason);
			if (Reason != MQRC_NONE)
			{
				CO_ProcMonitor(APL_OUT_FILE,"Could not roll back MQ Transaction",NULL,NULL);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Current MQ Transaction rolled back",NULL,NULL);
			}	
			APL_GOBACK_FAIL
		}
		else
		{
			CO_ProcMonitor(APL_OUT_FILE,"Message Successfully Delivered to Outbound Queue",NULL,NULL);
		}
	}

	APL_GOBACK_SUCCESS;

   RETURN_SUCCESS :
      return(APL_SUCCESS);

   RETURN_FAILURE :
      CO_ProcMonitor(   APL_OUT_FILE,
                  "Exiting MS_Proc_CCSMsgPut processtion with errors",
                   NULL,
                   NULL);
      return(APL_FAILURE);
}

int CO_Rtv_Str(char *p_instring,char *p_outstring,int p_start,int p_size,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	char		*chr_l_tempstr1;
	char		*chr_l_tempstr2;
	int 		int_l_count;

	chr_l_tempstr1 = (char *)calloc(p_size,sizeof(char));
	APL_MALLOC_FAIL(chr_l_tempstr1);
	chr_l_tempstr2 = (char *)calloc(p_size,sizeof(char));
	APL_MALLOC_FAIL(chr_l_tempstr2);
	
	int_l_count = p_size -1;

	strncpy(chr_l_tempstr1,p_instring+p_start,int_l_count);
	CO_Trim(chr_l_tempstr1,' ','R',chr_l_tempstr2,l_debug_info_ptr);

	memcpy(p_outstring,chr_l_tempstr2,p_size);

	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      APL_FREE(chr_l_tempstr1);
      APL_FREE(chr_l_tempstr2);
      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
		CO_ProcMonitor(APL_OUT_FILE,"Exiting unsuccessfully from  CO_Rtv_Str function",NULL,NULL);
      APL_FREE(chr_l_tempstr1);
      APL_FREE(chr_l_tempstr2);
      return(APL_FAILURE);
	}
}


int MS_Mod_CCSParam(char *p_parameters,char *p_token,char *p_value)
{
	char chr_l_parameters[APL_PARAM_LEN];

	memset(chr_l_parameters,APL_NULL_CHAR,APL_PARAM_LEN);
		
	strcpy(chr_l_parameters,p_parameters);
	strcat(chr_l_parameters,"");
	strcat(chr_l_parameters,p_token);
	strcat(chr_l_parameters,"");
	if (strcmp(p_value,NULL) != 0)
		strcat(chr_l_parameters,p_value);

	memcpy(p_parameters,chr_l_parameters,APL_PARAM_LEN);
	
	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      CO_ProcMonitor(APL_OUT_FILE,"Exiting unsuccessfully from  MS_Mod_CCSParam function",NULL,NULL);
      return(APL_FAILURE);
   }
}



int MQGetConn(char *qmanager[QUEUE_MANAGER_LEN], char *queue_name[QUEUE_LEN],MQHCONN *MQHcon,MQHOBJ *MQHobj,char *qtype)
{

   MQHCONN  Hcon;
   MQHOBJ   Hobj;
   MQLONG   O_options;
   MQLONG   OpenCode;
   MQLONG   CReason;
   MQLONG   Reason;
   MQLONG   CompCode;
   MQOD     od                            =  {MQOD_DEFAULT};
   char     chr_mtemp[100]                    =  {APL_NULL_STRING};
   char     chr_qmname[QUEUE_MANAGER_LEN]     =  {APL_NULL_STRING};


   memcpy(chr_qmname,qmanager,QUEUE_MANAGER_LEN);
   MQCONN(chr_qmname,&Hcon,&CompCode,&CReason);

   if (CompCode == MQCC_FAILED)
   {
      sprintf(chr_mtemp,"Connection to MQ Queue Manager %s Failed with reason h_code %ld",chr_qmname,CReason);
      CO_ProcMonitor(APL_OUT_FILE,chr_mtemp,NULL,NULL);
      APL_GOBACK_FAIL
   }
   else
   {
      sprintf(chr_mtemp,"Successfully connected to MQ Queue Manager %s",chr_qmname);
      CO_ProcMonitor(APL_OUT_FILE,chr_mtemp,NULL,NULL);
      strcpy(chr_mtemp,APL_NULL_STRING);
   }

   strcpy(od.ObjectName,queue_name);
	if (strcmp(qtype,"I") == 0)
   	O_options = MQOO_INPUT_AS_Q_DEF + MQOO_FAIL_IF_QUIESCING;
	else
		O_options = MQOO_OUTPUT + MQOO_FAIL_IF_QUIESCING + MQOO_SET_ALL_CONTEXT;

   MQOPEN(Hcon,&od,O_options,&Hobj,&OpenCode,&Reason);
   if (Reason != MQRC_NONE)
   {
      sprintf(chr_mtemp,"MQ Open to Queue %s Failed with reason h_code %ld",queue_name,Reason);
      CO_ProcMonitor(APL_OUT_FILE,chr_mtemp,NULL,NULL);
      APL_GOBACK_FAIL
   }
   else
   {
		if (strcmp(qtype,"I") == 0)
      	sprintf(chr_mtemp,"Successfully opened MQ Queue %s for Input",queue_name);
		else
      	sprintf(chr_mtemp,"Successfully opened MQ Queue %s for Output",queue_name);
      CO_ProcMonitor(APL_OUT_FILE,chr_mtemp,NULL,NULL);
      strcpy(chr_mtemp,APL_NULL_STRING);
   }

	memcpy(MQHcon,&Hcon,sizeof(Hcon));
   memcpy(MQHobj,&Hobj,sizeof(Hobj));

   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      CO_ProcMonitor(APL_OUT_FILE,"Exiting successfully from  MQGetConn function",NULL,NULL);
      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      CO_ProcMonitor(APL_OUT_FILE,"Exiting unsuccessfully from  MQGetConn function",NULL,NULL);
      return(APL_FAILURE);
   }

}

int MS_Mod_CCSTrail(DL_CCSMSG_STRUCT_H *p_dl_ccsmsg_struct_h,DL_DEALAUDIT_STRUCT_H *l_dl_dealaudit_struct_hd,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

char chr_l_now[21];
char chr_l_funcdesc[61];

DL_DEALAUDIT_STRUCT_I *l_dl_dealaudit_struct_i=NULL;
printf(" I AM INSIDE AUDIT TRAIL FUNCTION\n");

memset(l_dl_dealaudit_struct_hd,NULL,sizeof(DL_DEALAUDIT_STRUCT_H));

l_dl_dealaudit_struct_i = (DL_DEALAUDIT_STRUCT_I *)calloc(1,sizeof(DL_DEALAUDIT_STRUCT_I));
APL_MALLOC_FAIL(l_dl_dealaudit_struct_i);

strcpy(chr_l_funcdesc,"CCS Message send for ");
strcat(chr_l_funcdesc,p_dl_ccsmsg_struct_h->msg_class); 

if (APL_FAILURE == CO_RtvSysDtTime( chr_l_now,
                                           l_debug_info_ptr ))
           {
              APL_GOBACK_FAIL
           }
strcpy(l_dl_dealaudit_struct_hd->h_dl_client,p_dl_ccsmsg_struct_h->client);
strcpy(l_dl_dealaudit_struct_hd->h_indentity_no,p_dl_ccsmsg_struct_h->clnt_ident);
strcpy(l_dl_dealaudit_struct_hd->h_trail_for,"T");
strcpy(l_dl_dealaudit_struct_hd->h_processdetail,chr_l_funcdesc);
strcpy(l_dl_dealaudit_struct_hd->h_proc_usr,APL_USER_SYSTEM);
strcpy(l_dl_dealaudit_struct_hd->h_subprocess,APL_NULL_STRING);
strcpy(l_dl_dealaudit_struct_hd->h_logdate,chr_l_now);
strcpy(l_dl_dealaudit_struct_hd->h_fail_cd,p_dl_ccsmsg_struct_h->failreason_cd);
l_dl_dealaudit_struct_hd->h_qty = p_dl_ccsmsg_struct_h->quantity;
strcpy(l_dl_dealaudit_struct_hd->h_dlfromord,"N");
l_dl_dealaudit_struct_hd->h_subfailreas_cd = p_dl_ccsmsg_struct_h->sub_fail_cd;

CR_Proc_InstrQtyRound(p_dl_ccsmsg_struct_h->quantity,p_dl_ccsmsg_struct_h->instr_code,&l_dl_dealaudit_struct_hd->h_qty,l_debug_info_ptr);

l_dl_dealaudit_struct_i->i_dl_client = 0;
        l_dl_dealaudit_struct_i->i_indentity_no = 0;
        l_dl_dealaudit_struct_i->i_trail_for = 0;
        l_dl_dealaudit_struct_i->i_processdetail = 0;
        l_dl_dealaudit_struct_i->i_proc_usr = 0;
        l_dl_dealaudit_struct_i->i_logdate = 0;
        l_dl_dealaudit_struct_i->i_dlfromord = 0;
        l_dl_dealaudit_struct_i->i_subprocess = 0;
        l_dl_dealaudit_struct_i->i_failreas_cd = 0;
        l_dl_dealaudit_struct_i->i_qty = 0;
	if (!strlen(l_dl_dealaudit_struct_hd->h_subprocess)) l_dl_dealaudit_struct_i->i_subprocess = -1;
        if (!strlen(l_dl_dealaudit_struct_hd->h_fail_cd))
        {
                l_dl_dealaudit_struct_i->i_failreas_cd = -1;
                l_dl_dealaudit_struct_i->i_subfailreas_cd = -1;
        }


sqlca.sqlcode = 0;
EXEC SQL INSERT INTO DL_DEALAUDIT VALUES (:l_dl_dealaudit_struct_hd:l_dl_dealaudit_struct_i);

if (sqlca.sqlcode < 0)
    {
      APL_GOBACK_FAIL
    }



   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      CO_ProcMonitor(APL_OUT_FILE,"Exiting successfully from MS_Mod_CCSTrail function",NULL,NULL);
      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      CO_ProcMonitor(APL_OUT_FILE,"Exiting unsuccessfully from MS_Mod_CCSTrail function",NULL,NULL);
      return(APL_FAILURE);
   }

}

int MS_Rtv_CCSMsg(MQHCONN Hcon,MQHOBJ Hobj,FILE *chr_finifile,MQLONG *ReturnCode, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

   MQMD     md 	=	{MQMD_DEFAULT};
   MQGMO    gmo	=	{MQGMO_DEFAULT};
   MQLONG   CompCode;
   MQLONG   Reason;
   MQLONG   messlen;
   MQCHAR   chr_buffer[BUFFER_LENGTH]					=	APL_NULL_STRING;
	MQLONG	bufflen;
	char		temp[INMSG_LENGTH +100]					=	APL_NULL_STRING;
	MQLONG	l_backoutcnt;
	int		int_l_timeout =0;

   EI_MQ_INCMSG_STRUCT_H  l_ei_mq_data_struct_h;


   
	md.Version = MQMD_VERSION_2;
   md.Encoding = MQENC_NATIVE;
   md.CodedCharSetId = MQCCSI_Q_MGR;
   memcpy(md.Format,MQFMT_STRING,(size_t)MQ_FORMAT_LENGTH);


   gmo.Version = MQGMO_VERSION_2;
   gmo.MatchOptions = MQMO_NONE;
   gmo.Options =  MQGMO_SYNCPOINT + MQGMO_CONVERT + MQGMO_FAIL_IF_QUIESCING;
	CompCode = MQCC_OK;
		
	bufflen = sizeof(chr_buffer) -1;
		
   memset(&l_ei_mq_data_struct_h,NULL,sizeof(EI_MQ_INCMSG_STRUCT_H));
  	MQGET(Hcon,Hobj,&md,&gmo,bufflen,chr_buffer,&messlen,&CompCode,&Reason);
  	if (Reason != MQRC_NONE) 
  	{
     	if (Reason == MQRC_NO_MSG_AVAILABLE) 
     		CompCode = MQCC_FAILED;
		else
		{
     		sprintf(temp,"MQ Get Message failed with reason h_code %ld\n",Reason);
     		CO_ProcMonitor(APL_OUT_FILE,temp,NULL,NULL);
			memcpy(ReturnCode,&Reason,sizeof(Reason));
			APL_GOBACK_FAIL
		}
  	}
  	else
  	{
     		memcpy(l_ei_mq_data_struct_h.msg,chr_buffer,sizeof(l_ei_mq_data_struct_h.msg));
     		strcpy(l_ei_mq_data_struct_h.status_ind,"S");
			if (APL_FAILURE ==MS_Mod_CCSAdd(&l_ei_mq_data_struct_h,&int_l_timeout,l_debug_info_ptr))
			{
				MQBACK(Hcon,&CompCode,&Reason);
        		if (Reason != MQRC_NONE)
				{
					sprintf(temp,"Could not Rollback MQ Transaction. Reason h_code %ld",Reason);
           		CO_ProcMonitor(APL_OUT_FILE,temp,NULL,NULL);
				}
        		else
				{
          		CO_ProcMonitor(APL_OUT_FILE,"Current MQ Transaction rolled back",NULL,NULL);
				}
				CompCode = MQCC_FAILED;
				APL_GOBACK_FAIL
			}
			else
			{
				if(int_l_timeout==1)
				{
               
					sleep(300);
					MQBACK(Hcon,&CompCode,&Reason);
					sprintf(temp,"Could not commit Transaction on MQ Server.\n");
					CO_ProcMonitor(APL_OUT_FILE,temp,NULL,NULL);
				}
				else
				{
					MQCMIT(Hcon,&CompCode,&Reason);
					if (Reason != MQRC_NONE)
					{
						MQBACK(Hcon,&CompCode,&Reason);
						sprintf(temp,"Could not commit Transaction on MQ Server. Reason h_code %ld",Reason);
						CO_ProcMonitor(APL_OUT_FILE,temp,NULL,NULL);
					}
					else
					{
     					CO_ProcMonitor(APL_OUT_FILE,"Message successfully fetched from MQ Queue",NULL,NULL);
     					CO_ProcMonitor(APL_OUT_FILE,"Message Details...",NULL,NULL);
						printf("<%s\n>",l_ei_mq_data_struct_h.msg);
						strcpy(temp,APL_NULL_STRING);
					}
					EXEC SQL COMMIT;
					IS_ANY_ORA_ERROR
				}
			}		
	}
	
   APL_GOBACK_SUCCESS;

   RETURN_SUCCESS :
      
      return(APL_SUCCESS);

   RETURN_FAILURE :
      CO_ProcMonitor(   APL_OUT_FILE,
                  "Exiting MS_Rtv_CCSMsg Function with errors",
                   NULL,
                   NULL);
      return(APL_FAILURE);
}


int MS_Mod_CCSAdd(EI_MQ_INCMSG_STRUCT_H *p_ei_mq_hsn_struct_h,int *p_timeout,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{


char 	chr_l_param_str[4001] = APL_NULL_STRING;	
char 	chr_l_param[4001] = APL_NULL_STRING;	
char	chr_l_env_str[2001] =APL_NULL_STRING;
char	chr_l_env[2001] =APL_NULL_STRING;
char	chr_l_userid[15] =APL_NULL_STRING;
char	chr_l_err_desc[4001] =APL_NULL_STRING;
char	chr_l_h_unique_ref_num[12] =APL_NULL_STRING;
INTL_ENV_DATA_STRUCT_H   *l_intlenv_data_struct_h  = (INTL_ENV_DATA_STRUCT_H *) NULL;
short int_ret_val =0;

char chr_l_h_client_a[11] =APL_NULL_STRING;
char chr_l_h_refno_A[17] =APL_NULL_STRING;
char chr_l_h_locrefno_a[17] =APL_NULL_STRING;
char chr_l_h_brokerno[13] =APL_NULL_STRING;
char chr_l_h_access_stamp[20] =APL_NULL_STRING;
char chr_l_h_trcode_a[2] =APL_NULL_STRING;
char chr_l_h_trdt_a[20] =APL_NULL_STRING;
char chr_l_h_settledt_a[20] =APL_NULL_STRING;
char chr_l_h_typeoftrd[3] =APL_NULL_STRING;
char chr_l_h_lrtrdtype[3] =APL_NULL_STRING;
double chr_l_h_amount =0.0;
double l_h_cost=0.0;
char chr_l_h_domcpac[11] =APL_NULL_STRING;
char chr_l_h_sys_date[20] =APL_NULL_STRING;
char chr_l_func_name[30] =APL_NULL_STRING;
short i_h_account=0;
short i_h_refno=0;
short i_h_locrefno=0;
short i_h_brokerno=0;
short i_h_access_stamp=0;
short i_h_trcode=0;
short i_h_trdt=0;
short i_h_settledt=0;
short i_h_typeoftrd=0;
short i_h_lrtrdtype=0;
short i_h_amount=0;
short i_h_price=0;
short i_h_domcpac=0;

EXEC SQL BEGIN DECLARE SECTION;
EXEC SQL VAR chr_l_param_str IS STRING;
EXEC SQL VAR chr_l_env_str IS STRING;
EXEC SQL VAR chr_l_userid IS STRING;
EXEC SQL VAR chr_l_err_desc IS STRING;
EXEC SQL VAR chr_l_h_client_a IS STRING;
EXEC SQL VAR chr_l_h_refno_A IS STRING;
EXEC SQL VAR chr_l_h_locrefno_a IS STRING;
EXEC SQL VAR chr_l_h_brokerno IS STRING;
EXEC SQL VAR chr_l_h_access_stamp IS STRING;
EXEC SQL VAR chr_l_h_trcode_a IS STRING;
EXEC SQL VAR chr_l_h_trdt_a IS STRING;
EXEC SQL VAR chr_l_h_settledt_a IS STRING;
EXEC SQL VAR chr_l_h_typeoftrd IS STRING;
EXEC SQL VAR chr_l_h_lrtrdtype IS STRING;
EXEC SQL VAR chr_l_h_domcpac IS STRING;
EXEC SQL VAR chr_l_h_sys_date IS STRING;
EXEC SQL VAR chr_l_func_name IS STRING;
EXEC SQL END DECLARE SECTION;



l_intlenv_data_struct_h   =  (INTL_ENV_DATA_STRUCT_H *)calloc(1,sizeof(INTL_ENV_DATA_STRUCT_H));
   APL_MALLOC_FAIL(l_intlenv_data_struct_h);

strcpy(chr_l_userid,"CCS-IN");
strcpy(l_intlenv_data_struct_h->usr,"CCS-IN");
strcpy(l_intlenv_data_struct_h->h_mode,APL_FUNC_AUTHORISE);
strcpy(l_intlenv_data_struct_h->processtion,"Authorization Acknowlegdement - CCS");
strcpy(l_intlenv_data_struct_h->auth_req,"Y");
strcpy(l_intlenv_data_struct_h->subprocess,"ACK");
strcpy(l_intlenv_data_struct_h->h_process,"N");
strcpy(chr_l_func_name,"wrp_CBUpdTrdOthFn");

sprintf(chr_l_env_str,"%c%s%c%s",DATA_FIELD_SEPRTR,"USER", DATA_VALUE_SEPRTR,l_intlenv_data_struct_h->usr);
memset(chr_l_env,APL_NULL_CHAR,2001);
sprintf(chr_l_env,"%c%s%c%s",DATA_FIELD_SEPRTR,"MODE", DATA_VALUE_SEPRTR,l_intlenv_data_struct_h->h_mode);
strcat(chr_l_env_str,chr_l_env);
memset(chr_l_env,APL_NULL_CHAR,2001);
sprintf(chr_l_env,"%c%s%c%s",DATA_FIELD_SEPRTR,"FUNCTIONNAME", DATA_VALUE_SEPRTR,l_intlenv_data_struct_h->processtion);
strcat(chr_l_env_str,chr_l_env);
memset(chr_l_env,APL_NULL_CHAR,2001);
sprintf(chr_l_env,"%c%s%c%s",DATA_FIELD_SEPRTR,"AUTHREQ", DATA_VALUE_SEPRTR,l_intlenv_data_struct_h->auth_req);
strcat(chr_l_env_str,chr_l_env);
memset(chr_l_env,APL_NULL_CHAR,2001);
sprintf(chr_l_env,"%c%s%c%s",DATA_FIELD_SEPRTR,"SUBPROCESS", DATA_VALUE_SEPRTR,l_intlenv_data_struct_h->subprocess);
strcat(chr_l_env_str,chr_l_env);
memset(chr_l_env,APL_NULL_CHAR,2001);
sprintf(chr_l_env,"%c%s%c%s",DATA_FIELD_SEPRTR,"ACTION", DATA_VALUE_SEPRTR,l_intlenv_data_struct_h->h_process);
strcat(chr_l_env_str,chr_l_env);
strcat(chr_l_env_str,APL_NULL_STRING);

if(strlen(p_ei_mq_hsn_struct_h->msg)!=21)
{
	printf("message data length is %d <>21\n",strlen(p_ei_mq_hsn_struct_h->msg));
	APL_GOBACK_SUCCESS
}

if (APL_FAILURE == CO_RtvMachDtTime( chr_l_h_sys_date, l_debug_info_ptr ))
		APL_GOBACK_FAIL

strncpy(chr_l_h_unique_ref_num,p_ei_mq_hsn_struct_h->msg+10,11);
strcat(chr_l_h_unique_ref_num,APL_NULL_STRING);
printf("l_h_unique_ref_num is %s\n",chr_l_h_unique_ref_num);
printf("INCOMING MESSAGE FROM CCS IS <%s>",p_ei_mq_hsn_struct_h->msg);

EXEC SQL SELECT 	client,
					 	IDENTIY_NO,
						access_stamp,
						lcl_identno,
						BRK_NO,
						deal_cd,
						deal_date,
						setl_date,
						dl_class,
						LR_DL_CLASS,
						AMOUNT,
						COST,
						domestic_cpclt 
				INTO
						:chr_l_h_client_a:i_h_account,	
						:chr_l_h_refno_A:i_h_refno,
						:chr_l_h_access_stamp:i_h_access_stamp,
						:chr_l_h_locrefno_a:i_h_locrefno,
						:chr_l_h_brokerno:i_h_brokerno,
						:chr_l_h_trcode_a:i_h_trcode,
						:chr_l_h_trdt_a:i_h_trdt,
						:chr_l_h_settledt_a:i_h_settledt,
						:chr_l_h_typeoftrd:i_h_typeoftrd,
						:chr_l_h_lrtrdtype:i_h_lrtrdtype,
						:chr_l_h_amount:i_h_amount,
						:l_h_cost:i_h_price,
						:chr_l_h_domcpac:i_h_domcpac
				FROM DL_DEAL 
			  	WHERE UNIQ_IDENT_NO =:chr_l_h_unique_ref_num;			
						

IS_ANY_ORA_ERROR


sprintf(chr_l_param_str,"%c%s%c%s",DATA_FIELD_SEPRTR,"CLIENT", DATA_VALUE_SEPRTR,chr_l_h_client_a);
memset(chr_l_param,APL_NULL_CHAR,4001);
sprintf(chr_l_param,"%c%s%c%s",DATA_FIELD_SEPRTR,"IDENTIY_NO", DATA_VALUE_SEPRTR,chr_l_h_refno_A);
strcat(chr_l_param_str,chr_l_param);
memset(chr_l_param,APL_NULL_CHAR,4001);
sprintf(chr_l_param,"%c%s%c%s",DATA_FIELD_SEPRTR,"LCL_IDENTNO", DATA_VALUE_SEPRTR,APL_NULL_STRING);
strcat(chr_l_param_str,chr_l_param);
memset(chr_l_param,APL_NULL_CHAR,4001);
sprintf(chr_l_param,"%c%s%c%s",DATA_FIELD_SEPRTR,"BRK_NO", DATA_VALUE_SEPRTR,APL_NULL_STRING);
strcat(chr_l_param_str,chr_l_param);
memset(chr_l_param,APL_NULL_CHAR,4001);
sprintf(chr_l_param,"%c%s%c%s",DATA_FIELD_SEPRTR,"CLT_REQDEL_IND", DATA_VALUE_SEPRTR,"N");
strcat(chr_l_param_str,chr_l_param);
memset(chr_l_param,APL_NULL_CHAR,4001);
sprintf(chr_l_param,"%c%s%c%s",DATA_FIELD_SEPRTR,"ACCESS_STAMP", DATA_VALUE_SEPRTR,chr_l_h_access_stamp);
strcat(chr_l_param_str,chr_l_param);
memset(chr_l_param,APL_NULL_CHAR,4001);
sprintf(chr_l_param,"%c%s%c%s",DATA_FIELD_SEPRTR,"DEAL_CD", DATA_VALUE_SEPRTR,chr_l_h_trcode_a);
strcat(chr_l_param_str,chr_l_param);
memset(chr_l_param,APL_NULL_CHAR,4001);
sprintf(chr_l_param,"%c%s%c%s",DATA_FIELD_SEPRTR,"DEAL_DATE", DATA_VALUE_SEPRTR,chr_l_h_trdt_a);
strcat(chr_l_param_str,chr_l_param);
memset(chr_l_param,APL_NULL_CHAR,4001);
sprintf(chr_l_param,"%c%s%c%s",DATA_FIELD_SEPRTR,"SETL_DATE", DATA_VALUE_SEPRTR,chr_l_h_settledt_a);
strcat(chr_l_param_str,chr_l_param);
memset(chr_l_param,APL_NULL_CHAR,4001);
sprintf(chr_l_param,"%c%s%c%s",DATA_FIELD_SEPRTR,"DL_CLASS", DATA_VALUE_SEPRTR,chr_l_h_typeoftrd);
strcat(chr_l_param_str,chr_l_param);
memset(chr_l_param,APL_NULL_CHAR,4001);
sprintf(chr_l_param,"%c%s%c%s",DATA_FIELD_SEPRTR,"LR_DL_CLASS", DATA_VALUE_SEPRTR,chr_l_h_lrtrdtype);
strcat(chr_l_param_str,chr_l_param);
memset(chr_l_param,APL_NULL_CHAR,4001);
sprintf(chr_l_param,"%c%s%c%lf",DATA_FIELD_SEPRTR,"AMOUNT", DATA_VALUE_SEPRTR,chr_l_h_amount);
strcat(chr_l_param_str,chr_l_param);
memset(chr_l_param,APL_NULL_CHAR,4001);
sprintf(chr_l_param,"%c%s%c%lf",DATA_FIELD_SEPRTR,"COST", DATA_VALUE_SEPRTR,l_h_cost);
strcat(chr_l_param_str,chr_l_param);
memset(chr_l_param,APL_NULL_CHAR,4001);
sprintf(chr_l_param,"%c%s%c%s",DATA_FIELD_SEPRTR,"DOMESTIC_CPCLT", DATA_VALUE_SEPRTR,chr_l_h_domcpac);
strcat(chr_l_param_str,chr_l_param);
memset(chr_l_param,APL_NULL_CHAR,4001);
sprintf(chr_l_param,"%c%s%c%s",DATA_FIELD_SEPRTR,"CLIENT_NOTE", DATA_VALUE_SEPRTR,APL_NULL_STRING);
strcat(chr_l_param_str,chr_l_param);
memset(chr_l_param,APL_NULL_CHAR,4001);
sprintf(chr_l_param,"%c%s%c%s",DATA_FIELD_SEPRTR,"FWVALDT", DATA_VALUE_SEPRTR,APL_NULL_STRING);
strcat(chr_l_param_str,chr_l_param);
strcat(chr_l_param_str,APL_NULL_STRING);



memset(chr_l_err_desc,4001,APL_NULL_CHAR);

	 EXEC SQL CALL SP_TRADE(:chr_l_func_name, :chr_l_env_str, :chr_l_param_str, :chr_l_userid, :chr_l_err_desc);
	
	IS_ANY_ORA_ERROR



	if(strncmp(chr_l_err_desc,"4|12|",5)==0)
	{
		printf("Trade_Server Time out\n");	
		*p_timeout=1;
		APL_GOBACK_SUCCESS
	}
   else if(strncmp(chr_l_err_desc,"4|639|",5)==0)
   {
      printf("System not online \n");
      *p_timeout=1;
      APL_GOBACK_SUCCESS
   }
	else
	{
		EXEC SQL INSERT INTO DL_CCSFAILMSG(CLIENT,IDENTIY_NO,REPORT_DT,REAS,REPORT_IND) VALUES (:chr_l_h_client_a,:chr_l_h_refno_A,:chr_l_h_sys_date,:chr_l_err_desc,'N');
		printf("after inserting into ccs_fail table sqlca.sqlcode is %d\n",sqlca.sqlcode);
		IS_ANY_ORA_ERROR	
		*p_timeout=0;
	}

   RETURN_SUCCESS :
	{
      printf("Exiting MS_Mod_CCSAdd Function with success\n");
      return(APL_SUCCESS);
	}

   RETURN_FAILURE :
	{
      printf("Exiting MS_Mod_CCSAdd Function with errors\n");
      return(APL_FAILURE);
	}
}


int MS_Rtv_CCSAccGrp(char *chr_p_client,char *p_clt_grp,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   struct sqlca sqlca;
   char chr_l_acc_grp[5];
   memset(chr_l_acc_grp,APL_NULL_CHAR,5);

   printf("ACCOUNT IS %s\n",chr_p_client);
   EXEC SQL SELECT CLT_GROUP INTO :chr_l_acc_grp FROM MT_CLIENT WHERE CLIENT = RTRIM(:chr_p_client);
	IS_ANY_ORA_ERROR
   
   if(sqlca.sqlcode<0)
   {
	  printf("The sqlcode is %d\n",sqlca.sqlcode);
   }

	if (sqlca.sqlcode == 1403)
	{
		CO_ProcMonitor(APL_OUT_FILE,"Failure from processtion MS_Rtv_CCSAccGrp\n",NULL,NULL);
		APL_GOBACK_FAIL;
	}

   printf("ACCOUNT GRP IS %s\n",chr_l_acc_grp);
   strcpy(p_clt_grp,chr_l_acc_grp);

	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
		CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion MS_Rtv_CCSAccGrp successfully\n",NULL,NULL);
		return(APL_SUCCESS);
	 }
				  
   RETURN_FAILURE :
    {
		CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion MS_Rtv_CCSAccGrp with failure\n",NULL,NULL);
		return(APL_FAILURE);
	 }

 }
