
/************************************************************************************************************
 * 				COPYRIGHT NOTICE 
 *		 
 *		  
 *		   		Copyright @  2005 by Polaris Software Lab Ltd.
 *		   
 *		    		All rights reserved. 	
 *		      	No part of this document may be reproduced, stored in a retrieval system, 
 *		       	translated, transcribed, or transmitted in any form or by any means, 
 *		        	without the prior written permission of Polaris Software Lab Limited ('Polaris').
 *		         
***********************************************************************************************************/

/**********************************************************************
*                                                                    *

* Project Name        : INTELLECT CUSTODY                            *
* Module Name         : DEAL  PROCESSING                          	*
* File Name           : DFRecCommon.pc                     *
*                                                                    *
* Description         : This source file contains the common function which *
                        is used to Process the incoming message 515 and 54x  *
*                                                                    *
* Screens Used        : None
        *
* Reports Used        : None                                         *
*                                                                    *
*                                                                    *
* Notes               :                                              *
*                                                                    *
*            Version Control Block                                   *
*                                                                    *
* Date       Version     	Author               Description          *
* ---------  --------  ---------------  ---------------------------- *
*                                                                    *
* 			     1.0       Rakesh Singh    		New File                *
*                                                                    *
* List of functions   :                                              *
*                                                                    *
* Function Name          Description                                 *
* ----------------  --------------------------------------------------------------------- *
* *******************************************************************************************/



#include "stdio_64.h"
#include "string.h"
#include "CR_Common.h"
#include "Intellect_Interface.h"
#include "Intellect_Common.h"
#include "Df_Fe.h"


EXEC SQL INCLUDE SQLCA;

#define DEFORMAT_IF_DEBUG if ( 1 )
#define LINE_FOR_SWIFT_ADDR 4
//AIX Warning Removal
#ifdef APL_IF_DEBUG
#undef APL_IF_DEBUG
#endif
#define APL_IF_DEBUG if ( 1 )


 
int GetTagCount(
   MESSAGE_STRUCT   **p_message_list,
	char*            p_tag,
	char*            p_qual,
	char*            p_sequence,
	char*            p_block_no,
	int*	 	 		  p_tcount	
)
{
	long l_int_block_no_num		= 0;		
	long l_int_pcount     = 0;
	char l_str_block_no_char[11]	= APL_NULL_STRING;
	char l_str_val[71]			= APL_NULL_STRING; 
	char l_str_tag[101]			= APL_NULL_STRING;
	char l_str_qual[201]		= APL_NULL_STRING;
	char l_str_qual_first_part[10]	= APL_NULL_STRING;
	char l_str_qual_second_part[201]	= APL_NULL_STRING;
	char l_str_sequence[6]		= APL_NULL_STRING;
  	char l_str_tag_first_part[10]       = APL_NULL_STRING;
	char l_str_tag_second_part[50]      = APL_NULL_STRING;
	char l_str_temp_val[50]			=	APL_NULL_STRING;
	int  l_int_found			= 0;
	int  l_int_i  				= 0;
	struct sqlca sqlca;

	strcpy(l_str_tag, p_tag);
	strcpy(l_str_qual, p_qual);
	strcpy(l_str_sequence, p_sequence);
	
	strcpy(l_str_block_no_char, p_block_no);
  	l_int_pcount=0;
	DEFORMAT_IF_DEBUG
	{
		printf("Entered fnc Gettagcount\n");
	}
	

	l_int_i=I_GetVal(p_message_list, l_str_tag, l_str_qual, l_str_val, l_str_sequence, l_str_block_no_char);

	l_int_found = l_int_i;

	if(l_int_found)
	{

		l_int_pcount++;	
		if (strchr(l_str_block_no_char,','))
		{ 

			strcpy(l_str_temp_val, strrchr(l_str_block_no_char,','));
     		strcpy(l_str_temp_val,l_str_temp_val+1);
			
			l_str_block_no_char[strlen(l_str_block_no_char)-strlen(l_str_temp_val)]='\0';
   		DEFORMAT_IF_DEBUG
			{
				printf("the int_val of blokno %s\n",l_str_block_no_char);	
   		}
			l_int_block_no_num = atol(l_str_temp_val);
	   	l_int_block_no_num++;		

			strcat(l_str_block_no_char, ltoa( l_int_block_no_num));
			DEFORMAT_IF_DEBUG
			{
				printf("the int_val is %s",l_str_block_no_char);
			}
			l_int_i = 0;
		
			while((l_int_i = I_GetVal(p_message_list, l_str_tag, l_str_qual, l_str_val, l_str_sequence, l_str_block_no_char)) == APL_SUCCESS)
			{
				strcpy(l_str_temp_val, strrchr(l_str_block_no_char,','));
     			strcpy(l_str_temp_val,l_str_temp_val+1);

     			l_str_block_no_char[strlen(l_str_block_no_char)-strlen(l_str_temp_val)]='\0';

     	 		l_int_block_no_num = atol(l_str_temp_val);
     			l_int_block_no_num++;

     			strcat(l_str_block_no_char, ltoa( l_int_block_no_num));
				
				l_int_pcount++;
			}
			*p_tcount=l_int_pcount;
		}
		else
		{
			
			l_int_block_no_num = atol(l_str_block_no_char);
       	l_int_block_no_num++;
        	strcpy(l_str_block_no_char, ltoa(l_int_block_no_num));
        	l_int_i = 0;

        	while((l_int_i = I_GetVal(p_message_list, l_str_tag, l_str_qual, l_str_val, l_str_sequence, l_str_block_no_char)) == APL_SUCCESS)
        		{
        			l_int_block_no_num = atol(l_str_block_no_char);
        			l_int_block_no_num++;
        			strcpy(l_str_block_no_char, ltoa(l_int_block_no_num));
        			l_int_pcount++;
			}			
			*p_tcount=l_int_pcount;
		}
		
		l_int_found = l_int_pcount;
	}
	else
	{
		DEFORMAT_IF_DEBUG
		{
			printf ("not int_found in get msg_tag count\n");
		}
	}
	
	return l_int_found;

}



int I_GetTAG(
      	MESSAGE_STRUCT   **p_message_list,
			char*            p_str_tag,
			char*            p_str_qual,
			char*            p_str_sequence,
			char*		 		  p_str_block_no 
)
{
	int     l_int_found_qual = 0;

  	DEFORMAT_IF_DEBUG
  	{
 		printf("Entering Function I_GetTag\n");
	}


  	while(*p_message_list)
   {
  		if ((strcmp((*p_message_list)->qual,p_str_qual) == 0) &&
	   	(strcmp((*p_message_list)->sequence,p_str_sequence) == 0) &&
	   	(strcmp((*p_message_list)->block_no,p_str_block_no) ==0))
  		{
	  		strcpy(p_str_tag,(*p_message_list)->msg_tag);
	  		l_int_found_qual =1;
	  		break;
  		}
  		else
  		{
	  		p_message_list = &((*p_message_list)->h_next);
	  		l_int_found_qual = 0;
	  		continue;
  		}
   }

   DEFORMAT_IF_DEBUG
   {
 		printf("Leaving Function I_GetTag\n");
   }

   return l_int_found_qual;
}





int I_GetValRep(
         MESSAGE_STRUCT    **p_message_list,
         char*             msg_tag,
         char*             qual,
         char***           int_val,
         char*             sequence,
         char*             block_no
         )
{

   int   l_int_found_val   = 0;
   int   l_int_i        = 0;

   DEFORMAT_IF_DEBUG
   {
      printf("Entering Function I_GetValRep\n");
   }

   while(*p_message_list)
   {
      if ((strcmp((*p_message_list)->msg_tag,msg_tag) == 0) &&
         (strcmp((*p_message_list)->qual,qual) == 0) &&
         (strcmp((*p_message_list)->sequence,sequence) == 0)&&
         (strcmp((*p_message_list)->block_no,block_no) == 0))
      {
         *(*int_val+l_int_i) = (char *)calloc(1,strlen((*p_message_list)->int_val));
         strcpy(*(*int_val+l_int_i),(*p_message_list)->int_val);
			p_message_list = &((*p_message_list)->h_next);
         if ((strcmp((*p_message_list)->msg_tag,msg_tag) == 0) &&
         (strcmp((*p_message_list)->qual,qual) == 0) &&
         (strcmp((*p_message_list)->sequence,sequence) == 0)&&
         (strcmp((*p_message_list)->block_no,block_no) == 0))
         {
            l_int_i++;
            continue;
         }
         else
         {
            l_int_found_val = 1;
 	    		break;
         }
      }
      else
      {
         p_message_list = &((*p_message_list)->h_next);
         l_int_found_val     =       0;
         continue;
      }
   }

   DEFORMAT_IF_DEBUG
	{
      printf("Leaving Function I_GetValRep\n");
   }

   return l_int_found_val;
}

int GenerateLinklistForCMSGLINKDET( MESSAGE_STRUCT **p_message_list,
                                    CMSGLINKDET_LIST_STRUCT_H **p_cmsglinkdet_list,
                                    int p_seq_num,
                                    FILE *p_logfile)
{
	char     **l_str_stco         =       NULL; //AIX Warning Removal
	char 		l_str_refNo[70]		=			APL_NULL_STRING;
	int   	l_int_i        		= 			0;
	int		int_l_int_line				= 			0;
	int		int_l_int_count				=			0;
	char     l_str_val[70]			= 			APL_NULL_STRING;
	char 		chr_l_str_temp[6]			=			APL_NULL_STRING;
	char     chr_l_str_temp1[70]      =        APL_NULL_STRING;

	DEFORMAT_IF_DEBUG
		printf("Entered processtion GenerateLinklistForCMSGLINKDET \n");
	if (APL_SUCCESS==I_GetVal(p_message_list, ":20C:", ":SEME/", l_str_refNo, "A", "1"));
	{
	
		/*
		if (APL_FAILURE != I_GetValRep(p_message_list,":22F:",":STCO/",&l_str_stco,"E","1"))
		{
			if (GetTagCount(p_message_list,":22F:",":STCO/","E","1",&int_l_int_count) != APL_SUCCESS)
			printf("tag count %d\n",int_l_int_count);	
			for (l_int_i=0;l_int_i<int_l_int_count;l_int_i++)
			{
				memset(chr_l_str_temp,APL_NULL_CHAR,6);
				sprintf(chr_l_str_temp,"STCO%d",l_int_i+1);
				sprintf(l_str_val,"//%s",l_str_stco[l_int_i]);
				printf("the vals %s\n",l_str_val);
				I_AddRecordNodeForCMSGLINKDET(   p_cmsglinkdet_list,
														l_str_refNo,
														p_seq_num,
														"SETD",
														chr_l_str_temp,
														l_str_stco[l_int_i],
														int_l_int_line,
														int_l_int_line,
														":22F:",
														p_logfile);

			}
		}
		*/
		memset(l_str_val,APL_NULL_CHAR,70);
		if (APL_SUCCESS==I_GetVal(p_message_list, ":22F:", ":SETR/", l_str_val, "E", "1"))
		{
			sprintf(chr_l_str_temp1,"//%s",l_str_val);
			I_AddRecordNodeForCMSGLINKDET(   p_cmsglinkdet_list,
													l_str_refNo,
													p_seq_num,
													"SETD",
													"SETR",
													chr_l_str_temp1,
													int_l_int_line,
													int_l_int_line,
													":22F:",
													p_logfile);	
		}
		/*
		memset(l_str_val,APL_NULL_CHAR,70);
		if (APL_SUCCESS==I_GetVal(p_message_list, ":22F:", ":TRCA/", l_str_val, "E", "1"))
		{
			sprintf(chr_l_str_temp1,"//%s",l_str_val);
			I_AddRecordNodeForCMSGLINKDET(   p_cmsglinkdet_list,
													l_str_refNo,
													p_seq_num,
													"SETD",
													"TRCA",
													chr_l_str_temp1,
													int_l_int_line,
													int_l_int_line,
													":22F:",
													p_logfile);	
		}
		*/
		memset(l_str_val,APL_NULL_CHAR,70);
		if (APL_SUCCESS==I_GetVal(p_message_list, ":22F:", ":REGT/", l_str_val, "E", "1"))
		{
			sprintf(chr_l_str_temp1,"//%s",l_str_val);
			I_AddRecordNodeForCMSGLINKDET(   p_cmsglinkdet_list,
													l_str_refNo,
													p_seq_num,
													"SETD",
													"REGT",
													chr_l_str_temp1,
													int_l_int_line,
													int_l_int_line,
													":22F:",
													p_logfile);
		}
		/*
		memset(l_str_val,APL_NULL_CHAR,70);
		if (APL_SUCCESS==I_GetVal(p_message_list, ":22F:", ":BENE/", l_str_val, "E", "1"))
		{
			sprintf(chr_l_str_temp1,"//%s",l_str_val);
			I_AddRecordNodeForCMSGLINKDET(   p_cmsglinkdet_list,
													l_str_refNo,
													p_seq_num,
													"SETD",
													"BENE",
													chr_l_str_temp1,
													int_l_int_line,
													int_l_int_line,
													":22F:",
													p_logfile);
		}
		*/
			
		memset(l_str_val,APL_NULL_CHAR,70);
		if (APL_SUCCESS==I_GetVal(p_message_list, ":20C:", ":PREV/", l_str_val, "A1", "1,1"))
		{
			sprintf(chr_l_str_temp1,"//%s",l_str_val);
			I_AddRecordNodeForCMSGLINKDET(   p_cmsglinkdet_list,
													l_str_refNo,
													p_seq_num,
													"LINK",
													"PREV",
													chr_l_str_temp1,
													int_l_int_line,
													int_l_int_line,
													":20C:",
													p_logfile);
			
		}
		/*
		memset(l_str_val,APL_NULL_CHAR,70);
		if (APL_SUCCESS==I_GetVal(p_message_list, ":20C:", ":POOL/", l_str_val, "A1", "1,1"))
		{
			
			sprintf(chr_l_str_temp1,"//%s",l_str_val);
			I_AddRecordNodeForCMSGLINKDET(   p_cmsglinkdet_list,
													l_str_refNo,
													p_seq_num,
													"LINK",
													"POOL",
													chr_l_str_temp1,
													int_l_int_line,
													int_l_int_line,
													":20C:",
													p_logfile);
			
		}
		memset(l_str_val,APL_NULL_CHAR,70);
		if (APL_SUCCESS==I_GetVal(p_message_list, ":20C:", ":RELA/", l_str_val, "A1", "1,1"))
		{
			sprintf(chr_l_str_temp1,"//%s",l_str_val);
			I_AddRecordNodeForCMSGLINKDET(   p_cmsglinkdet_list,
													l_str_refNo,
													p_seq_num,
													"LINK",
													"RELA",
													chr_l_str_temp1,
													int_l_int_line,
													int_l_int_line,
													":20C:",
													p_logfile);
			
		}
		memset(l_str_val,APL_NULL_CHAR,70);
		if (APL_SUCCESS==I_GetVal(p_message_list, ":20C:", ":TRRF/", l_str_val, "A1", "1,1"))
		{
			sprintf(chr_l_str_temp1,"//%s",l_str_val);
			I_AddRecordNodeForCMSGLINKDET(   p_cmsglinkdet_list,
													l_str_refNo,
													p_seq_num,
													"LINK",
													"PREV",
													chr_l_str_temp1,
													int_l_int_line,
													int_l_int_line,
													":20C:",
													p_logfile);
		}	
		memset(l_str_val,APL_NULL_CHAR,70);
		if (APL_SUCCESS==I_GetVal(p_message_list, ":20C:", ":COMM/", l_str_val, "A1", "1,1"))
		{
			sprintf(chr_l_str_temp1,"//%s",l_str_val);
			I_AddRecordNodeForCMSGLINKDET(   p_cmsglinkdet_list,
													l_str_refNo,
													p_seq_num,
													"LINK",
													"COMM",
													chr_l_str_temp1,
													int_l_int_line,
													int_l_int_line,
													":20C:",
													p_logfile);
		}
				
		
		memset(l_str_val,APL_NULL_CHAR,70);
		if (APL_SUCCESS==I_GetVal(p_message_list, ":99B:", ":TOSE/", l_str_val, "A", "1"))
		{
			I_AddRecordNodeForCMSGLINKDET(   p_cmsglinkdet_list,
													l_str_refNo,
													p_seq_num,
													"GENL",
													":TOSE",
													l_str_val,
													int_l_int_line,
													int_l_int_line,
													":99B:",
													p_logfile);
		}
			
		memset(l_str_val,APL_NULL_CHAR,70);
		if (APL_SUCCESS==I_GetVal(p_message_list, ":99B:", ":SETT/", l_str_val, "A", "1"))
		{
			I_AddRecordNodeForCMSGLINKDET(   p_cmsglinkdet_list,
													l_str_refNo,
													p_seq_num,
													"GENL",
													":SETT",
													l_str_val,
													int_l_int_line,
													int_l_int_line,
													":99B:",
													p_logfile);
		}
		*/
	}
	
	
	DEFORMAT_IF_DEBUG
	{
		printf("Leaving processtion GenerateLinklistForCMSGLINKDET \n");
	}
	
  return(APL_SUCCESS);//AIX Warning Removal
	
}

int GDbInsCMSGLINKDETFN(  CMSGLINKDET_LIST_STRUCT_H **l_message_list,
                        FILE *p_logfile,
                        DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

   struct sqlca sqlca;

   char l_msgrefno[16]= APL_NULL_STRING;
   char l_seq_name[21] = APL_NULL_STRING; /** Changed from 10 to 21 ***/
   char chr_l_fld_name[50]  = APL_NULL_STRING;
   char l_fld_val[20]   = APL_NULL_STRING;
   char chr_l_tag[10]  = APL_NULL_STRING;

   EXEC SQL BEGIN DECLARE SECTION;
   EXEC SQL VAR l_msgrefno IS STRING;
   EXEC SQL VAR l_seq_name IS STRING;
   EXEC SQL VAR chr_l_fld_name IS STRING;
   EXEC SQL VAR l_fld_val  IS STRING;
   EXEC SQL VAR chr_l_tag      IS STRING;
   EXEC SQL END DECLARE SECTION;
	DEFORMAT_IF_DEBUG
	{
		printf("Entered processtion GDbInsCMSGLINKDETFN \n");
	}
	CO_ProcMonitor(p_logfile,"Entered in DL_Mod_DLLinkDetNew <DL_Mod_DLLinkDetNew>\n",NULL,NULL);
	while ( (*l_message_list) != NULL)
   {
		DEFORMAT_IF_DEBUG
			printf("in while  %d %s %s %s %s\n",(*l_message_list)->h_sequence_num,(*l_message_list)->h_sequence_name,(*l_message_list)->h_link_val,(*l_message_list)->h_link_msg_tag,(*l_message_list)->h_msg_tag);
		memset(l_seq_name,APL_NULL_CHAR,21);
      strcpy(l_seq_name,(*l_message_list)->h_sequence_name);
      strcpy(chr_l_fld_name,(*l_message_list)->h_link_val);
      strcpy(l_fld_val,(*l_message_list)->h_link_msg_tag);
      strcpy(chr_l_tag,(*l_message_list)->h_msg_tag);
      /*
		DEFORMAT_IF_DEBUG
		{
			printf("the seqnm %d %s %s %s %s %s %s        \n",(*l_message_list)->h_sequence_num,l_seq_name,chr_l_fld_name,chr_l_fld_name,l_fld_val,
			(*l_message_list)->h_msg_tag_rep_no,(*l_message_list)->h_msg_line_no,chr_l_tag);
		}
		*/
		EXEC SQL INSERT
               INTO DL_MSGLINKDET
               VALUES ( 
                        :(*l_message_list)->h_sequence_num,
                        :l_seq_name,
                        :chr_l_fld_name,
                        :l_fld_val,
                        :(*l_message_list)->h_msg_tag_rep_no,
                        :(*l_message_list)->h_msg_line_no,
                        :chr_l_tag);
		DEFORMAT_IF_DEBUG
			printf("sql code%d\n",sqlca.sqlcode);
		IS_ANY_ORA_ERROR;
      l_message_list = &((*l_message_list)->h_next);
   }

   APL_GOBACK_SUCCESS

   RETURN_SUCCESS:
   {
      CO_ProcMonitor(p_logfile,"Exiting Out Of  GDBInsCMSGLINKDETFN successfully\n", NULL, NULL);
      return(APL_SUCCESS);
   }

   RETURN_FAILURE:
   {
      CO_ProcMonitor(p_logfile, "Exiting Out Of GdbInsCMSGLINKDETFN unsuccessfully\n", NULL, NULL);
      return(APL_FAILURE);
   }

   LBL_EXIT_NO_DATA:
   {
     	CO_ProcMonitor(p_logfile, "Exiting Out Of GdbInsCMSGLINKDETFN No data int_found\n", NULL, NULL);
      return(SYS_NO_DATA);
   }

}

int I_AddRecordNodeForCMSGLINKDET ( CMSGLINKDET_LIST_STRUCT_H **message_struct_ptrptr,
                                    char  *p_msg_refno,
                                    int   p_seq_num,
                                    char  *p_seq_name,
                                    char  *p_fld_name,
                                    char  *p_fld_val,
                                    int   p_tag_rep_no,
                                    int   p_line_no,
                                    char  *p_tag,
                                    FILE  *p_logfile)
{
   CMSGLINKDET_LIST_STRUCT_H **temp = message_struct_ptrptr;
	DEFORMAT_IF_DEBUG
	{
		printf("Entered processtion I_AddRecordNodeForCMSGLINKDET \n");
	}
	CO_ProcMonitor(p_logfile,"Entered in I_AddRecordNodeForCMSGLINKDET <I_AddRecordNodeForCMSGLINKDET>\n",NULL,NULL);

   while ( (*temp) != NULL)
   {
      temp = (CMSGLINKDET_LIST_STRUCT_H **)&((*temp)->h_next);//AIX Warning Removal
   }

   (*temp) = (CMSGLINKDET_LIST_STRUCT_H *)calloc(1,sizeof(CMSGLINKDET_LIST_STRUCT_H));
	DEFORMAT_IF_DEBUG
	{	
		printf("the details are %s %s %s %d %d %s\n",p_seq_name,p_fld_name,p_fld_val,p_tag_rep_no, p_line_no,p_tag);
	}
	(*temp)->h_sequence_num = p_seq_num;
   strcpy((*temp)->h_sequence_name, p_seq_name);
   strcpy((*temp)->h_link_val, p_fld_name);
   strcpy((*temp)->h_link_msg_tag, p_fld_val);
	(*temp)->h_msg_tag_rep_no = p_tag_rep_no;
   (*temp)->h_msg_line_no = p_line_no;
   strcpy((*temp)->h_msg_tag, p_tag);
   CO_ProcMonitor(p_logfile,"Return From I_AddRecordNodeForCMSGLINKDET <I_AddRecordNodeForCMSGLINKDET>\n",NULL,NULL);
   return APL_SUCCESS;
}



int InsCmsgLinkFnforTrd(MESSAGE_STRUCT **p_message_list, char *p_str_client, char *p_str_refno, char *p_str_filename,char *p_str_msg_no,long p_lng_rpr_seqnum,char *p_message_path,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
//AIX Warning Removal
/*	DL_MSGLINK_STRUCT_H l_dl_msglink_struct_h = {APL_NULL_STRING, 0, APL_NULL_CHAR, 0, 0, 0, \
					APL_NULL_STRING, APL_NULL_STRING, APL_NULL_STRING};	*/
	DL_MSGLINK_STRUCT_H l_dl_msglink_struct_h = {APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,
                                                   APL_NULL_STRING,APL_NULL_STRING, 0,0,APL_NULL_STRING,
                                                   APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING, APL_NULL_STRING,
					APL_NULL_STRING, APL_NULL_STRING, APL_NULL_STRING};

	DL_MSGLINK_STRUCT_I l_dl_msglink_struct_i={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}; 

	int			g_int_seq_num						=	0;
	FILE			*fp_SesamIni						=	(FILE *) NULL;
	FILE			*fp_msgfile 						=	(FILE *) NULL;
	char			l_str_msg_no[4]					=	APL_NULL_STRING;
	PRO_GSEQNUM_STRUCT_H	*l_progseqnum_struct_h			=	NULL;
	char			l_str_tag[50]						=  APL_NULL_STRING;
	char        l_str_val[50]                 =  APL_NULL_STRING;
	char 			l_str_code[50]						=	APL_NULL_STRING;
	FILE  		*fl_incmsg                 	= 	(FILE *)NULL;
	char  		chr_l_str1[70]							= 	APL_NULL_STRING;
	char        chr_l_str2[ISO_LINERR_LENGTH]	      =  APL_NULL_STRING;
	char			l_str_msg[10001]					=	APL_NULL_STRING;
	
	EXEC SQL BEGIN DECLARE SECTION;
	EXEC SQL VAR l_str_val IS STRING;
	EXEC SQL VAR l_str_code IS STRING;
	EXEC SQL END DECLARE SECTION;

	memset(&l_dl_msglink_struct_h, NULL, sizeof(DL_MSGLINK_STRUCT_H));
	DEFORMAT_IF_DEBUG
	{
		printf("Entered processtion InsCmsgLinkFnforTrd \n");
	}
	/*
	if ( !strlen(p_str_client) )
	{
		APL_DATA_MISSING("Account", APL_NULL_STRING, APL_NULL_STRING)
		APL_GOBACK_FAIL
	}
   
	if ( !strlen(p_str_filename) )
	{ 
		APL_DATA_MISSING("Filename", APL_NULL_STRING, APL_NULL_STRING)
		APL_GOBACK_FAIL
	}

	if ( !strlen(p_str_refno) )
	{
		APL_DATA_MISSING("Reference no", APL_NULL_STRING, APL_NULL_STRING)
		APL_GOBACK_FAIL
	}
  	*/
	APL_IF_DEBUG
	{
		printf("Entered here in sys debug\n");
		printf("ACCOUNT is %s \n", p_str_client);
		printf("REF NO is %s \n",p_str_refno);
		printf("FILE  NAME is %s \n",p_str_filename);
	}

	strcpy(l_dl_msglink_struct_h.h_dl_client,p_str_client);
	strcpy(l_dl_msglink_struct_h.h_indentity_no,p_str_refno);

	l_progseqnum_struct_h = (PRO_GSEQNUM_STRUCT_H *)calloc(1,sizeof(PRO_GSEQNUM_STRUCT_H));
	APL_MALLOC_FAIL(l_progseqnum_struct_h);
	memset(l_progseqnum_struct_h,NULL,sizeof(PRO_GSEQNUM_STRUCT_H));
	strcpy(l_progseqnum_struct_h->sequencename , "CMSGLINK_SEQ");
	g_int_seq_num = CO_RtvNxtSeqNum(l_progseqnum_struct_h , l_debug_info_ptr);
	printf("\n TUX :  Sequence Name = |%s| No is |%d| \n",l_progseqnum_struct_h->sequencename,g_int_seq_num);//AIX Warning Removal
	if (APL_FAILURE == g_int_seq_num)
	{
		printf("Failed To Get The Next Sequence Number For CMSGLINK\n");
		APL_GOBACK_FAIL
	}

	l_dl_msglink_struct_h.h_sequence_num=g_int_seq_num;
	if(strlen(p_str_filename) > 30)
	{
		strcpy(l_dl_msglink_struct_h.h_information,APL_NULL_STRING);
	}

	else
	{
  		strcpy(l_dl_msglink_struct_h.h_information,p_str_filename);
	} 
	strcpy(l_dl_msglink_struct_h.h_description,APL_NULL_STRING);
	strcpy(l_dl_msglink_struct_h.h_psetparty,APL_NULL_STRING);
	strcpy(l_dl_msglink_struct_h.h_place_cd,APL_NULL_STRING);

	  
	strncpy(l_str_msg_no,p_str_msg_no,3);
	l_str_msg_no[3] = '\0';
	strcpy(l_dl_msglink_struct_h.h_swift_msg_no,l_str_msg_no);

	strcpy(l_dl_msglink_struct_h.h_msg_in_out_ind,"I"); 
	strcpy(p_str_refno,ltoa(g_int_seq_num));	
	if (I_GetTAG(p_message_list,l_str_tag,":PSET/","E1","1,3")==APL_SUCCESS)
	{	
		if(I_GetVal(p_message_list,l_str_tag,":PSET/",l_str_val,"E1","1,3")==APL_SUCCESS)
			strcpy(l_dl_msglink_struct_h.h_psetparty,l_str_tag);
			strcat(l_dl_msglink_struct_h.h_psetparty,":PSET//");
			strcat(l_dl_msglink_struct_h.h_psetparty,l_str_val);
			
	}
	APL_IF_DEBUG
	printf("tag , psetparty , h_msg_in_out_ind ,inden_no  swift_msg_no is %s %s %s %s %s\n",l_str_tag,l_dl_msglink_struct_h.h_psetparty,l_dl_msglink_struct_h.h_msg_in_out_ind,l_dl_msglink_struct_h.h_indentity_no,l_dl_msglink_struct_h.h_swift_msg_no);	
	memset(l_str_val,APL_NULL_CHAR,50);
	
	if(I_GetVal(p_message_list,":94B:",":TRAD/",l_str_val,"B","1")==APL_SUCCESS)
	{
				
		EXEC SQL SELECT MAP_DESC
			      INTO :l_str_code
					FROM PRO_SGENSTAT
					WHERE ((MAP_VAL = :l_str_val) AND
					(MAP_TYPE = 'PLACE_OF_TRADE') AND
					(NATION_CODE = :g_mt_commonsys_params_struct_h.nation_code));
		IS_ANY_ORA_ERROR;
		if(sqlca.sqlcode==0)
		{
			strcpy(l_dl_msglink_struct_h.h_place_cd,l_str_val);
			strcpy(l_dl_msglink_struct_h.h_description,l_str_code);
			strcat(l_dl_msglink_struct_h.h_description,APL_NULL_STRING);
		}
		else if (sqlca.sqlcode==1403)
		{
			strcpy(l_dl_msglink_struct_h.h_description,l_str_val);
			strcat(l_dl_msglink_struct_h.h_description,APL_NULL_STRING);
		}	
	}
	if (  (fl_incmsg   = fopen(p_message_path, "r" ) ) == (FILE *)NULL)
	{
		printf("Failed To Open Message File %s \n", p_str_filename);
		APL_GOBACK_SUCCESS
	}
	memset(l_str_msg,APL_NULL_CHAR,10001);	
	while (!feof(fl_incmsg))
	{
		memset(chr_l_str1,APL_NULL_CHAR,70);
		memset(chr_l_str2,APL_NULL_CHAR,ISO_LINERR_LENGTH);
		fgets(chr_l_str1,70,fl_incmsg);
		strncpy(chr_l_str2, chr_l_str1,ISO_LINERR_LENGTH - 1);
		/*strcat(chr_l_str2,APL_NULL_STRING); */
		chr_l_str2[strlen(chr_l_str2)] =APL_NULL_CHAR ;
		/*** We will only consider message till we get OTHRPRTY  ****/
		/*** TUX:  **/
		if (strstr(chr_l_str2,"OTHRPRTY") !=NULL)
		{
			printf("\n ......OTHRPRTY found ..Skipping Rest of the message ......\n");
			break;
		}
		strcat(l_str_msg, chr_l_str2);
	}
	strncpy(l_dl_msglink_struct_h.h_message_det_a,l_str_msg,2000);
	l_dl_msglink_struct_h.h_message_det_a[strlen(l_dl_msglink_struct_h.h_message_det_a)]=APL_NULL_CHAR;
	if (strlen(l_str_msg) >2000)
	{
		strncpy(l_dl_msglink_struct_h.h_message_det_b,l_str_msg+2000,2000);
		l_dl_msglink_struct_h.h_message_det_b[strlen(l_dl_msglink_struct_h.h_message_det_b)]=APL_NULL_CHAR;
	}
	if (strlen(l_str_msg) >4000)
	{
		strncpy(l_dl_msglink_struct_h.h_message_det_c,l_str_msg+4000,2000);
		l_dl_msglink_struct_h.h_message_det_c[strlen(l_dl_msglink_struct_h.h_message_det_c)]=APL_NULL_CHAR;
	}
	if (strlen(l_str_msg) >6000)
	{
		strncpy(l_dl_msglink_struct_h.h_message_det_d,l_str_msg+6000,2000);
		l_dl_msglink_struct_h.h_message_det_d[strlen(l_dl_msglink_struct_h.h_message_det_d)]=APL_NULL_CHAR;
	}
	if (strlen(l_str_msg) >8000)
	{
		strncpy(l_dl_msglink_struct_h.h_message_det_e,l_str_msg+8000,2000);
		l_dl_msglink_struct_h.h_message_det_e[strlen(l_dl_msglink_struct_h.h_message_det_e)]=APL_NULL_CHAR;
	}
	
	fclose(fl_incmsg);	
	strcat(l_dl_msglink_struct_h.h_description,APL_NULL_STRING);
	
	if (APL_FAILURE == CO_RtvMachDtTime(l_dl_msglink_struct_h.h_new_dt,l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL;
	}
   printf("new date %s\n",l_dl_msglink_struct_h.h_new_dt);  
	l_dl_msglink_struct_h.h_dlrep_sequencenum=p_lng_rpr_seqnum;
   
	if(APL_FAILURE==DL_Mod_DLLinkNew(&l_dl_msglink_struct_h,l_debug_info_ptr))
	{
		APL_GOBACK_FAIL;
	}


	APL_GOBACK_SUCCESS
   
	RETURN_SUCCESS:
	APL_IF_DEBUG
	printf("\n Exiting Out Of InsCmsgLinkFnforTrd successfully \n");
	CO_ProcMonitor(APL_OUT_FILE, "\n Exiting Out Of InsCmsgLinkFnforTrd successfully \n",NULL, NULL);
	APL_FREE(l_progseqnum_struct_h);
	return(APL_SUCCESS);

	RETURN_FAILURE:
	APL_IF_DEBUG
		printf("\n Exiting Out Of InsCmsgLinkFnforTrd with errors \n");
	CO_ProcMonitor(APL_OUT_FILE, "\n Exiting Out Of InsCmsgLinkFnforTrd unsuccessfully \n",NULL, NULL);
	APL_FREE(l_progseqnum_struct_h);
	return(APL_FAILURE);
}


