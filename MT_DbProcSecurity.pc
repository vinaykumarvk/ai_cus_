/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to 
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or 
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         :	
 *
 * File Name           :
 *
 * Description         :	
 *
 *           
 *
 *            Version Control Block
 *
 * Date        Version		Author               Description
 * ---------   --------	 ---------------  ---------------------------
 *					
 *
 *********************************************************************/

   
   
   
   
   
   
   
   
   
   
   
   




#include <CR_Header_C.h>
#include "MT_Interface.h"

EXEC SQL INCLUDE sqlca;



int CR_Mod_Sec(MT_INSTRUMENT_STRUCT_H *p_mt_instrument_struct_h_a,char *p_row_id_sec,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca 		  		sqlca;
	int     		 		  		int_retval;
	char			 		  		chr_h_sys_time_stamp[APL_DATE_LEN];
	MT_INSTRUMENT_STRUCT_I  		*l_mt_instrument_struct_ic = NULL;
	char							h_sec_stat[APL_STATUS_LEN];
	char							chr_l_buf[BUFFER_LEN];
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Mod_Sec \n",NULL,p_intl_env_data_struct_h_d);
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Security Code is %s \n",p_mt_instrument_struct_h_a->h_securitycd);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
		
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h_d->h_mode);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
	}

	

	l_mt_instrument_struct_ic = (MT_INSTRUMENT_STRUCT_I *)calloc(1,sizeof(MT_INSTRUMENT_STRUCT_I));
	APL_MALLOC_FAIL(l_mt_instrument_struct_ic)

	int_retval = CR_Chk_SecISINUnique(p_mt_instrument_struct_h_a->h_securitycd,p_mt_instrument_struct_h_a->h_sec_isin,l_debug_info_ptr);
	
	if (int_retval == APL_RECS_EXIST)
	{
		CO_InsertErr(l_debug_info_ptr,ERR_SEC_ISIN_EXISTS,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
		APL_GOBACK_FAIL
	}
	else if (int_retval == APL_FAILURE)
		APL_GOBACK_FAIL
		
	l_mt_instrument_struct_ic->i_securitycd = 0;
	l_mt_instrument_struct_ic->i_currencycode = 0;
	l_mt_instrument_struct_ic->i_nominal_val = 0;
	l_mt_instrument_struct_ic->i_regbrflag = 0;
	l_mt_instrument_struct_ic->i_allow_rf = 0;
	l_mt_instrument_struct_ic->i_allow_rvp = 0;
	l_mt_instrument_struct_ic->i_allow_df = 0;
	l_mt_instrument_struct_ic->i_allow_dvp = 0;
	l_mt_instrument_struct_ic->i_order_class = 0;
	l_mt_instrument_struct_ic->i_mother_sec_ind = 0;
	l_mt_instrument_struct_ic->i_ex_arena = 0;
	l_mt_instrument_struct_ic->i_listed_ind = 0;
	l_mt_instrument_struct_ic->i_newdt = 0;
	l_mt_instrument_struct_ic->i_threshold_qty = 0;
	l_mt_instrument_struct_ic->i_creater = 0;
	l_mt_instrument_struct_ic->i_create_dt = 0;
	l_mt_instrument_struct_ic->i_timestamp = 0;
	l_mt_instrument_struct_ic->i_total_pdcapital = 0;
	l_mt_instrument_struct_ic->i_sec_stat = 0;
	l_mt_instrument_struct_ic->i_new_issue = 0;
	l_mt_instrument_struct_ic->i_secdetail = 0;
	l_mt_instrument_struct_ic->i_sec_isin = 0;
	l_mt_instrument_struct_ic->i_tipo_inv = 0;
	l_mt_instrument_struct_ic->i_typeofsec = 0;
	l_mt_instrument_struct_ic->i_secdealcd = 0;
	l_mt_instrument_struct_ic->i_prodateype = 0;

  

	if(strlen(p_mt_instrument_struct_h_a->h_loccode) == 0)
		l_mt_instrument_struct_ic->i_loccode = -1;
	else
		l_mt_instrument_struct_ic->i_loccode = 0;
	
	if(strlen(p_mt_instrument_struct_h_a->h_newcreater) == 0)
		l_mt_instrument_struct_ic->i_newcreater = -1;
	else
		l_mt_instrument_struct_ic->i_newcreater = 0;
	
	if(strlen(p_mt_instrument_struct_h_a->h_newauthoriser) == 0)
		l_mt_instrument_struct_ic->i_newauthoriser = -1;
	else
		l_mt_instrument_struct_ic->i_newauthoriser = 0;
	
	if(strlen(p_mt_instrument_struct_h_a->h_chng_lst_flag) == 0)
		l_mt_instrument_struct_ic->i_chng_lst_flag = -1;
	else
		l_mt_instrument_struct_ic->i_chng_lst_flag = 0;
	
	if(strlen(p_mt_instrument_struct_h_a->h_cert_of_own_flag) == 0)
		l_mt_instrument_struct_ic->i_cert_of_own_flag = -1;
	else
		l_mt_instrument_struct_ic->i_cert_of_own_flag = 0;
	
	if(strlen(p_mt_instrument_struct_h_a->h_parent_sec) == 0)
		l_mt_instrument_struct_ic->i_parent_sec = -1;
	else
		l_mt_instrument_struct_ic->i_parent_sec = 0;
	
	if(strlen(p_mt_instrument_struct_h_a->h_cmp_code) == 0)
		l_mt_instrument_struct_ic->i_cmp_code = -1;
	else
		l_mt_instrument_struct_ic->i_cmp_code = 0;
	
	if(strlen(p_mt_instrument_struct_h_a->h_classcd) == 0)
		l_mt_instrument_struct_ic->i_classcd = -1;
	else
		l_mt_instrument_struct_ic->i_classcd = 0;
	
	if(strlen(p_mt_instrument_struct_h_a->h_new_cd) == 0)
		l_mt_instrument_struct_ic->i_new_cd = -1;
	else
		l_mt_instrument_struct_ic->i_new_cd = 0;

	if(strlen(p_mt_instrument_struct_h_a->h_chgsec_isin) == 0)
		l_mt_instrument_struct_ic->i_chgsec_isin = -1;
	else
		l_mt_instrument_struct_ic->i_chgsec_isin = 0;
	
	if(strlen(p_mt_instrument_struct_h_a->h_chgcreater) == 0)
		l_mt_instrument_struct_ic->i_chgcreater = -1;
	else
		l_mt_instrument_struct_ic->i_chgcreater = 0;
	
	if(strlen(p_mt_instrument_struct_h_a->h_ca_clr_name) == 0)
		l_mt_instrument_struct_ic->i_ca_clr_name = -1;
	else
		l_mt_instrument_struct_ic->i_ca_clr_name = 0;
	
	if(strlen(p_mt_instrument_struct_h_a->h_chng_cd) == 0)
		l_mt_instrument_struct_ic->i_chng_cd = -1;
	else
		l_mt_instrument_struct_ic->i_chng_cd = 0;
	
	if(strlen(p_mt_instrument_struct_h_a->h_mature_date) == 0)
		l_mt_instrument_struct_ic->i_mature_date = -1;
	else
		l_mt_instrument_struct_ic->i_mature_date = 0;
	
	if(strlen(p_mt_instrument_struct_h_a->h_interest_class) == 0)
		l_mt_instrument_struct_ic->i_interest_class = -1;
	else
		l_mt_instrument_struct_ic->i_interest_class = 0;
	
	if(p_mt_instrument_struct_h_a->h_inc_rate == 0)
		l_mt_instrument_struct_ic->i_inc_rate = -1;
	else
		l_mt_instrument_struct_ic->i_inc_rate = 0;
	
	if(strlen(p_mt_instrument_struct_h_a->h_frq_code) == 0)
		l_mt_instrument_struct_ic->i_frq_code = -1;
	else
		l_mt_instrument_struct_ic->i_frq_code = 0;
	
	if(strlen(p_mt_instrument_struct_h_a->h_int_clttyp) == 0)
		l_mt_instrument_struct_ic->i_int_clttyp = -1;
	else
		l_mt_instrument_struct_ic->i_int_clttyp = 0;
	
	if(strlen(p_mt_instrument_struct_h_a->h_lst_pymt_dt) == 0)
		l_mt_instrument_struct_ic->i_lst_pymt_dt = -1;
	else
		l_mt_instrument_struct_ic->i_lst_pymt_dt = 0;
	
	if(p_mt_instrument_struct_h_a->h_lst_inc_rate == 0)
		l_mt_instrument_struct_ic->i_lst_inc_rate = -1;
	else
		l_mt_instrument_struct_ic->i_lst_inc_rate = 0;
	
	if(strlen(p_mt_instrument_struct_h_a->h_nxt_pymt_dt) == 0)
		l_mt_instrument_struct_ic->i_nxt_pymt_dt = -1;
	else
		l_mt_instrument_struct_ic->i_nxt_pymt_dt = 0;
	
	if(strlen(p_mt_instrument_struct_h_a->h_oldlstpydate) == 0)
		l_mt_instrument_struct_ic->i_oldlstpydate = -1;
	else
		l_mt_instrument_struct_ic->i_oldlstpydate = 0;
	
	if(strlen(p_mt_instrument_struct_h_a->h_updlstpydate) == 0)
		l_mt_instrument_struct_ic->i_updlstpydate = -1;
	else
		l_mt_instrument_struct_ic->i_updlstpydate = 0;
	
	if(strlen(p_mt_instrument_struct_h_a->h_taxonmat_ind) == 0)
		l_mt_instrument_struct_ic->i_taxonmat_ind = -1;
	else
		l_mt_instrument_struct_ic->i_taxonmat_ind = 0;
	
	if(strlen(p_mt_instrument_struct_h_a->h_disct_flag) == 0)
		l_mt_instrument_struct_ic->i_disct_flag = -1;
	else
		l_mt_instrument_struct_ic->i_disct_flag = 0;
	
	if(strlen(p_mt_instrument_struct_h_a->h_ca_addrdet) == 0)
		l_mt_instrument_struct_ic->i_ca_addrdet = -1;
	else
		l_mt_instrument_struct_ic->i_ca_addrdet = 0;
	
	if(strlen(p_mt_instrument_struct_h_a->h_lrsetldt1) == 0)
		l_mt_instrument_struct_ic->i_lrsetldt1 = -1;
	else
		l_mt_instrument_struct_ic->i_lrsetldt1 = 0;
	
	if(strlen(p_mt_instrument_struct_h_a->h_lrsetldt2) == 0)
		l_mt_instrument_struct_ic->i_lrsetldt2 = -1;
	else
		l_mt_instrument_struct_ic->i_lrsetldt2 = 0;
	
	if ( strlen(p_mt_instrument_struct_h_a->h_short_clr_name) == 0 )  
		l_mt_instrument_struct_ic->i_short_clr_name = -1;
	else
		l_mt_instrument_struct_ic->i_short_clr_name = 0;

	if ( strlen(p_mt_instrument_struct_h_a->h_ipo_ind) == 0) 
		l_mt_instrument_struct_ic->i_ipo_ind = -1;
	else
		l_mt_instrument_struct_ic->i_ipo_ind = 0;

	if ( strlen(p_mt_instrument_struct_h_a->h_ipo_valid_date) == 0) 
		l_mt_instrument_struct_ic->i_ipo_valid_date = -1;
	else
		l_mt_instrument_struct_ic->i_ipo_valid_date = 0;



	if (CO_RtvSysDtTime(chr_h_sys_time_stamp, l_debug_info_ptr) != APL_SUCCESS)
	 	APL_GOBACK_FAIL

	if (strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_INPUT) == 0)
	{
   	strcpy(p_mt_instrument_struct_h_a->h_sec_stat, STATUS_UAUTH); 
    	strcpy(p_mt_instrument_struct_h_a->h_creater, p_intl_env_data_struct_h_d->usr); 
    	strcpy(p_mt_instrument_struct_h_a->h_create_dt, chr_h_sys_time_stamp); 
    	strcpy(p_mt_instrument_struct_h_a->h_authoriser, APL_NULL_STRING); 
    	strcpy(p_mt_instrument_struct_h_a->h_authoriserdt, APL_NULL_STRING); 
    	strcpy(p_mt_instrument_struct_h_a->h_timestamp, chr_h_sys_time_stamp); 
    	strcpy(p_mt_instrument_struct_h_a->h_newdt, chr_h_sys_time_stamp); 

		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL
		
		EXEC SQL INSERT INTO MT_INSTRUMENT
		VALUES(:p_mt_instrument_struct_h_a:l_mt_instrument_struct_ic
				);

		IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_REC_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
	}
	else if (strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_MODIFY) == 0)
	{
		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL

		strcpy((char *)h_sec_stat,STATUS_UAUTH);


	  
		EXEC SQL UPDATE MT_INSTRUMENT
		SET currency_cd = :p_mt_instrument_struct_h_a->h_currencycode:l_mt_instrument_struct_ic->i_currencycode,
			 location_cd = :p_mt_instrument_struct_h_a->h_loccode:l_mt_instrument_struct_ic->i_loccode,
			 NOMINAL_VAL = :p_mt_instrument_struct_h_a->h_nominal_val:l_mt_instrument_struct_ic->i_nominal_val,
			 REG_BR_IND = :p_mt_instrument_struct_h_a->h_regbrflag:l_mt_instrument_struct_ic->i_regbrflag,
			 ALLOW_RF = :p_mt_instrument_struct_h_a->h_allow_rf:l_mt_instrument_struct_ic->i_allow_rf,
			 ALLOW_RVP = :p_mt_instrument_struct_h_a->h_allow_rvp:l_mt_instrument_struct_ic->i_allow_rvp,
			 ALLOW_DF = :p_mt_instrument_struct_h_a->h_allow_df:l_mt_instrument_struct_ic->i_allow_df,
			 ALLOW_DVP = :p_mt_instrument_struct_h_a->h_allow_dvp:l_mt_instrument_struct_ic->i_allow_dvp,
			 ORD_TYPE = :p_mt_instrument_struct_h_a->h_order_class:l_mt_instrument_struct_ic->i_order_class,
			 MOTHER_SEC_IND = :p_mt_instrument_struct_h_a->h_mother_sec_ind:l_mt_instrument_struct_ic->i_mother_sec_ind,
			 ex_arena = :p_mt_instrument_struct_h_a->h_ex_arena:l_mt_instrument_struct_ic->i_ex_arena,
			 LISTED_IND = :p_mt_instrument_struct_h_a->h_listed_ind:l_mt_instrument_struct_ic->i_listed_ind,
			 THRESHOLD_QTY = :p_mt_instrument_struct_h_a->h_threshold_qty:l_mt_instrument_struct_ic->i_threshold_qty,
			 NEW_MAKER = :p_mt_instrument_struct_h_a->h_newcreater:l_mt_instrument_struct_ic->i_newcreater,
			 creater = :p_intl_env_data_struct_h_d->usr:l_mt_instrument_struct_ic->i_creater,
			 create_dt = :chr_h_sys_time_stamp:l_mt_instrument_struct_ic->i_create_dt,
			 timestamp = :chr_h_sys_time_stamp:l_mt_instrument_struct_ic->i_timestamp,
			 authoriser = NULL,
			 authorise_dt = NULL,
			 TOTAL_PDCAPITAL = :p_mt_instrument_struct_h_a->h_total_pdcapital:l_mt_instrument_struct_ic->i_total_pdcapital,
			 SEC_STAT = :h_sec_stat,
			 NEW_ISSUE = :p_mt_instrument_struct_h_a->h_new_issue:l_mt_instrument_struct_ic->i_new_issue,
			 NEW_ATHR = :p_mt_instrument_struct_h_a->h_newauthoriser:l_mt_instrument_struct_ic->i_newauthoriser,
			 CHNG_LST_IND = :p_mt_instrument_struct_h_a->h_chng_lst_flag:l_mt_instrument_struct_ic->i_chng_lst_flag,
			 CERT_OF_OWN_IND = :p_mt_instrument_struct_h_a->h_cert_of_own_flag:l_mt_instrument_struct_ic->i_cert_of_own_flag,
			 sec_det = :p_mt_instrument_struct_h_a->h_secdetail:l_mt_instrument_struct_ic->i_secdetail,
			 sec_isin = :p_mt_instrument_struct_h_a->h_sec_isin:l_mt_instrument_struct_ic->i_sec_isin,
			 TIPO_INV = :p_mt_instrument_struct_h_a->h_tipo_inv:l_mt_instrument_struct_ic->i_tipo_inv,
			 SECURITY_TYPE = :p_mt_instrument_struct_h_a->h_typeofsec:l_mt_instrument_struct_ic->i_typeofsec,
			 PARENT_SEC = :p_mt_instrument_struct_h_a->h_parent_sec:l_mt_instrument_struct_ic->i_parent_sec,
			 prod_class = :p_mt_instrument_struct_h_a->h_prodateype:l_mt_instrument_struct_ic->i_prodateype,
			 SEC_DL_CODE = :p_mt_instrument_struct_h_a->h_secdealcd:l_mt_instrument_struct_ic->i_secdealcd,
			 CMP_CODE = :p_mt_instrument_struct_h_a->h_cmp_code:l_mt_instrument_struct_ic->i_cmp_code,
			 CLASSCD = :p_mt_instrument_struct_h_a->h_classcd:l_mt_instrument_struct_ic->i_classcd,
			 NEW_CD = :p_mt_instrument_struct_h_a->h_new_cd:l_mt_instrument_struct_ic->i_new_cd,
			 CHNG_ISIN = :p_mt_instrument_struct_h_a->h_chgsec_isin:l_mt_instrument_struct_ic->i_chgsec_isin,
			 ISSUE_DATE = :p_mt_instrument_struct_h_a->h_issue_date:l_mt_instrument_struct_ic->i_issue_date,
			 CHG_MKR = :p_mt_instrument_struct_h_a->h_chgcreater:l_mt_instrument_struct_ic->i_chgcreater,
			 CA_NAME = :p_mt_instrument_struct_h_a->h_ca_clr_name:l_mt_instrument_struct_ic->i_ca_clr_name,
			 CHNG_CD = :p_mt_instrument_struct_h_a->h_chng_cd:l_mt_instrument_struct_ic->i_chng_cd,
			 DATEOF_MATURE = :p_mt_instrument_struct_h_a->h_mature_date:l_mt_instrument_struct_ic->i_mature_date,
			 INTEREST_TYPE = :p_mt_instrument_struct_h_a->h_interest_class:l_mt_instrument_struct_ic->i_interest_class,
			 EARNINGS_RATE = :p_mt_instrument_struct_h_a->h_inc_rate:l_mt_instrument_struct_ic->i_inc_rate,
			 FREQ_CODE = :p_mt_instrument_struct_h_a->h_frq_code:l_mt_instrument_struct_ic->i_frq_code,
			 CLT_CLASS = :p_mt_instrument_struct_h_a->h_int_clttyp:l_mt_instrument_struct_ic->i_int_clttyp,
			 last_pymt_date = :p_mt_instrument_struct_h_a->h_lst_pymt_dt:l_mt_instrument_struct_ic->i_lst_pymt_dt,
			 LAST_INCOM_DATE = :p_mt_instrument_struct_h_a->h_lst_inc_rate:l_mt_instrument_struct_ic->i_lst_inc_rate,
			 NEXT_PAY_DATE = :p_mt_instrument_struct_h_a->h_nxt_pymt_dt:l_mt_instrument_struct_ic->i_nxt_pymt_dt,
			 OLD_LST_PAYDT = :p_mt_instrument_struct_h_a->h_oldlstpydate:l_mt_instrument_struct_ic->i_oldlstpydate,
			 MOD_LAST_PAYDT = :p_mt_instrument_struct_h_a->h_updlstpydate:l_mt_instrument_struct_ic->i_updlstpydate,
			 TAXONMAT_IND = :p_mt_instrument_struct_h_a->h_taxonmat_ind:l_mt_instrument_struct_ic->i_taxonmat_ind,
			 DISCT_IND = :p_mt_instrument_struct_h_a->h_disct_flag:l_mt_instrument_struct_ic->i_disct_flag,
			 CA_ADDRDET = :p_mt_instrument_struct_h_a->h_ca_addrdet:l_mt_instrument_struct_ic->i_ca_addrdet,
			 MIN_FMT_DL_QTY = :p_mt_instrument_struct_h_a->h_minfmtdlquantity:l_mt_instrument_struct_ic->i_minfmtdlquantity,
			 LR_SETL_DATE_A = :p_mt_instrument_struct_h_a->h_lrsetldt1:l_mt_instrument_struct_ic->i_lrsetldt1,
			 LR_SETL_DATE_B = :p_mt_instrument_struct_h_a->h_lrsetldt2:l_mt_instrument_struct_ic->i_lrsetldt2,
			 SHRT_NAME = :p_mt_instrument_struct_h_a->h_short_clr_name:l_mt_instrument_struct_ic->i_short_clr_name,
			 IPO_IND = :p_mt_instrument_struct_h_a->h_ipo_ind:l_mt_instrument_struct_ic->i_ipo_ind,
			 VALID_IPO_DATE = :p_mt_instrument_struct_h_a->h_ipo_valid_date:l_mt_instrument_struct_ic->i_ipo_valid_date

		WHERE ROWID = :p_row_id_sec;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
	}

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		APL_FREE(l_mt_instrument_struct_ic)

		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Mod_Sec \n",NULL,p_intl_env_data_struct_h_d);
		
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		APL_FREE(l_mt_instrument_struct_ic)

		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Mod_Sec \n",NULL,p_intl_env_data_struct_h_d);
		
		return(APL_FAILURE);
	}
}



 
 int CR_Mod_SecDet(char *p_sec_code,char *p_row_id_sec,DEAL_ORD_STRUCT_H *p_deal_ord_struct_h,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca					sqlca;
	int								int_retval;
	char								h_sec_stat[APL_STATUS_LEN];
	char								chr_h_sys_time_stamp[APL_DATE_LEN];
	int								int_h_flg = 0;
	char								chr_l_buf[BUFFER_LEN];
   MT_INSTRUMENT_STRUCT_H         *l_mt_instrument_struct_ha = NULL ; 
   MT_INSTRUMENT_STRUCT_I         *l_mt_instrument_struct_ie = NULL ; 

	EXEC SQL VAR h_sec_stat IS STRING;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
   
   
   l_mt_instrument_struct_ha =(MT_INSTRUMENT_STRUCT_H *)calloc(1,sizeof(MT_INSTRUMENT_STRUCT_H));
   APL_MALLOC_FAIL(l_mt_instrument_struct_ha)

   l_mt_instrument_struct_ie =(MT_INSTRUMENT_STRUCT_I *)calloc(1,sizeof(MT_INSTRUMENT_STRUCT_I));
   APL_MALLOC_FAIL(l_mt_instrument_struct_ie)
   

   
   EXEC SQL VAR l_mt_instrument_struct_ha->h_authoriser IS STRING;
   EXEC SQL VAR l_mt_instrument_struct_ha->h_authoriserdt IS STRING;
   EXEC SQL VAR l_mt_instrument_struct_ha->h_timestamp IS STRING;
   EXEC SQL VAR l_mt_instrument_struct_ha->h_sec_stat IS STRING;
   


	sqlca.sqlcode = 0;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Mod_SecDet \n",NULL,p_intl_env_data_struct_h_d);

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Security h_code is %s \n",p_sec_code);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
		
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h_d->h_mode);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
	}

	if(CO_RtvSysDtTime(chr_h_sys_time_stamp, l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL

	if (strcmp(p_intl_env_data_struct_h_d->h_mode, APL_FUNC_DELETE) == 0)
		strcpy((char *)h_sec_stat, STATUS_DEL_UAUTH);
	else if (strcmp(p_intl_env_data_struct_h_d->h_mode, APL_FUNC_FREEZE) == 0)
		strcpy((char *)h_sec_stat, STATUS_FROZ_UAUTH);
	else
		int_h_flg = 1;

	if (int_h_flg == 0)
	{
		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL

		EXEC SQL UPDATE MT_INSTRUMENT
		SET creater = :p_intl_env_data_struct_h_d->usr,
			 create_dt = :chr_h_sys_time_stamp,
			 authoriser = NULL,
			 authorise_dt = NULL,
			 SEC_STAT = :h_sec_stat,
			 timestamp = :chr_h_sys_time_stamp
		WHERE ROWID = :p_row_id_sec;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

		APL_GOBACK_SUCCESS
	}

	if (strcmp(p_intl_env_data_struct_h_d->h_mode, APL_FUNC_RESET) == 0)
	{
		strcpy((char *)h_sec_stat, STATUS_AUTH);

		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL

		EXEC SQL UPDATE MT_INSTRUMENT
		SET authoriser = :p_intl_env_data_struct_h_d->usr,
			 authorise_dt = :chr_h_sys_time_stamp,
			 SEC_STAT = :h_sec_stat,
			 timestamp = :chr_h_sys_time_stamp
		WHERE ROWID = :p_row_id_sec;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

		APL_GOBACK_SUCCESS
	}

	if (strcmp(p_intl_env_data_struct_h_d->h_mode, APL_FUNC_UNFREEZE) == 0)
	{
		strcpy((char *)h_sec_stat, STATUS_UAUTH);

		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL
		
		EXEC SQL UPDATE MT_INSTRUMENT
		SET creater = :p_intl_env_data_struct_h_d->usr,
			 create_dt = :chr_h_sys_time_stamp,
			 authoriser = NULL,
			 authorise_dt = NULL,
			 SEC_STAT = :h_sec_stat,
			 ALLOW_RF = :p_deal_ord_struct_h->h_allow_rf,
			 ALLOW_DF = :p_deal_ord_struct_h->h_allow_df,
			 ALLOW_RVP = :p_deal_ord_struct_h->h_allow_rvp,
			 ALLOW_DVP = :p_deal_ord_struct_h->h_allow_dvp,
			 ORD_TYPE = :p_deal_ord_struct_h->h_order_class,
			 timestamp = :chr_h_sys_time_stamp
		WHERE ROWID = :p_row_id_sec;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

		APL_GOBACK_SUCCESS
	}

	if (strcmp(p_intl_env_data_struct_h_d->h_mode, APL_FUNC_AUTHORISE) == 0)
	{
		EXEC SQL SELECT SEC_STAT
		INTO :h_sec_stat
		FROM MT_INSTRUMENT
		WHERE ROWID = :p_row_id_sec;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
			
		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL

		if (strcmp(h_sec_stat, STATUS_DEL_UAUTH) == 0)
		{
		
      

         memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
         sprintf(chr_l_buf,"rowid of security which will be deleted is : %s \n",p_row_id_sec);
         CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
         CO_ProcMonitor(APL_OUT_FILE,"selecting records into structure\n",NULL,NULL);
        
         EXEC SQL SELECT * INTO :l_mt_instrument_struct_ha:l_mt_instrument_struct_ie   
                  FROM MT_INSTRUMENT
                  WHERE ROWID = :p_row_id_sec;

         memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
         sprintf(chr_l_buf,"Selected into Struct sqlca.sqlcode = %d \n",sqlca.sqlcode);
         CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);

            strcpy(l_mt_instrument_struct_ha->h_authoriser,p_intl_env_data_struct_h_d->usr);
            strcpy(l_mt_instrument_struct_ha->h_authoriserdt,chr_h_sys_time_stamp);
            strcpy(l_mt_instrument_struct_ha->h_timestamp,chr_h_sys_time_stamp);
            strcpy(l_mt_instrument_struct_ha->h_sec_stat,STATUS_DEL_AUTH);

            

         if (APL_FAILURE == EI_Mod_MQOnDelAccSec(NULL,l_mt_instrument_struct_ha,"S",l_debug_info_ptr))
            APL_GOBACK_FAIL


      

			EXEC SQL DELETE FROM MT_INSTRUMENT
			WHERE ROWID = :p_row_id_sec;

			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
			
			APL_GOBACK_SUCCESS
		}
		else if (strcmp(h_sec_stat, STATUS_FROZ_UAUTH) == 0)
		{
			strcpy((char *)h_sec_stat, STATUS_FROZ_AUTH);

			EXEC SQL UPDATE MT_INSTRUMENT
			SET authoriser = :p_intl_env_data_struct_h_d->usr,
				 authorise_dt = :chr_h_sys_time_stamp,
				 SEC_STAT = :h_sec_stat,
				 ALLOW_RF = 'N',
				 ALLOW_RVP = 'N',
				 ALLOW_DF = 'N',
				 ALLOW_DVP = 'N',
				 ORD_TYPE = 'N',
				 timestamp = :chr_h_sys_time_stamp
			WHERE ROWID = :p_row_id_sec;
			
			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

			APL_GOBACK_SUCCESS
		}
		else
		{
			strcpy((char *)h_sec_stat, STATUS_AUTH);

			EXEC SQL UPDATE MT_INSTRUMENT
			SET authoriser = :p_intl_env_data_struct_h_d->usr,
				 authorise_dt = :chr_h_sys_time_stamp,
				 SEC_STAT = :h_sec_stat,
				 timestamp = :chr_h_sys_time_stamp
			WHERE ROWID = :p_row_id_sec;
			
			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

			APL_GOBACK_SUCCESS
		}
	}

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Mod_SecDet \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Mod_SecDet \n",NULL,p_intl_env_data_struct_h_d);
		
		return(APL_FAILURE);
	}
}



 
 int CR_Chk_SecDet(MT_INSTRUMENT_STRUCT_H *p_mt_instrument_struct_h_a,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca 	sqlca;
	int			 	int_retval;
	char			 	chr_h_field_val[40];
	char			 	h_regbrflag[3];
	short				i_regbrflag;
	char			 	h_typeofsec[4];
	short				i_typeofsec;
	char			 	h_issue_date[20];
	short			 	i_issue_date;
	double		 	h_nominal_val;
	short		 		i_nominal_val;
	char				h_int_clttyp[2];
	short				i_int_clttyp;
	char				h_prodateype[3];
	short				i_prodateype;
	char				h_currencycode[4];
	short				i_currencycode;
	char				h_classcd[5];
	short				i_classcd;
	char				chr_h_mainfuncarea[APL_MAINFUNCAREA_LEN];
	char				chr_h_condid[APL_CONDID_LEN];
	short				h_CondExists;
	char				chr_itype,chr_iexist,chr_iauthorised,chr_ideleted,chr_ifrozen;
	char				chr_l_buf[BUFFER_LEN];

	EXEC SQL VAR h_regbrflag IS STRING;
	EXEC SQL VAR h_typeofsec IS STRING;
	EXEC SQL VAR h_issue_date IS STRING;
	EXEC SQL VAR h_int_clttyp IS STRING;
	EXEC SQL VAR h_prodateype IS STRING;
	EXEC SQL VAR h_currencycode IS STRING;
	EXEC SQL VAR h_classcd IS STRING;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE, "Entered processtion CR_Chk_SecDet \n",NULL,p_intl_env_data_struct_h_d);

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Security h_code is %s \n",p_mt_instrument_struct_h_a->h_securitycd);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
		
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h_d->h_mode);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
	}

	chr_itype = 'M';
	chr_iexist = 'Y';

	int_retval = CO_Chk_CcyValid(p_mt_instrument_struct_h_a->h_currencycode,chr_itype,chr_iexist,l_debug_info_ptr);
	if (int_retval != APL_SUCCESS)
		APL_GOBACK_FAIL

	int_retval = CO_Chk_CodeValid("INDUSTRY",p_mt_instrument_struct_h_a->h_secdealcd,g_mt_commonsys_params_struct_h.nation_code,l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
		APL_GOBACK_FAIL

	if (strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind,"Y") == 0)
	{
		chr_iexist = 'Y';
		chr_iauthorised = 'Y';
		chr_ideleted = 'N';

		int_retval = MT_Chk_Loc(p_mt_instrument_struct_h_a->h_loccode,chr_iexist,chr_iauthorised,chr_ideleted,l_debug_info_ptr);
		if (int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL
	}

	if (strlen(p_mt_instrument_struct_h_a->h_parent_sec) != 0)
	{
		chr_iexist = 'Y';
		chr_iauthorised = 'Y';
		chr_ideleted = 'N';
		chr_ifrozen = 'N';

		int_retval = CO_Chk_SecValid(p_mt_instrument_struct_h_a->h_parent_sec,chr_iexist,chr_iauthorised,chr_ideleted,chr_ifrozen,NULL,NULL,l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL
	}

	if (strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_MODIFY) == 0)
	{
		EXEC SQL SELECT REG_BR_IND,SECURITY_TYPE,ISSUE_DATE,NOMINAL_VAL,CLT_CLASS,prod_class,currency_cd,CLASSCD
		INTO :h_regbrflag:i_regbrflag,:h_typeofsec:i_typeofsec,:h_issue_date:i_issue_date,:h_nominal_val:i_nominal_val,:h_int_clttyp:i_int_clttyp,:h_prodateype:i_prodateype,:h_currencycode:i_currencycode,:h_classcd:i_classcd
		FROM MT_INSTRUMENT
		WHERE security_cd = :p_mt_instrument_struct_h_a->h_securitycd;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

		if ((strcmp(p_mt_instrument_struct_h_a->h_regbrflag, h_regbrflag) != 0) && 
				l_mt_core_sys_params_struct_h.proc_reg_ind[0] == 'Y' )
		{
			if ((strcmp(p_mt_instrument_struct_h_a->h_regbrflag, "BR") == 0) &&
				 (strcmp(h_regbrflag, "RG") == 0)) 
			{
				int_retval = CR_Chk_SecTrd(p_mt_instrument_struct_h_a->h_securitycd,l_debug_info_ptr);
				if (int_retval == APL_RECS_EXIST)
					CO_InsertErr(l_debug_info_ptr,ERR_TRDEXIST_CANTCHG_BR_SEC,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
				else if (int_retval == APL_FAILURE)
					APL_GOBACK_FAIL
	
				if (strcmp(l_mt_core_sys_params_struct_h.proc_reg_ind, "Y") == 0)
				{
					int_retval = CR_Chk_SecPosPosnstat(p_mt_instrument_struct_h_a->h_securitycd,l_debug_info_ptr);
					if (int_retval == APL_RECS_EXIST)
						CO_InsertErr(l_debug_info_ptr,ERR_POSNEXIST_CANTCHG_BR_SEC,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
					else if (int_retval == APL_FAILURE)
						APL_GOBACK_FAIL
				}
			}
		}
			
		strcpy(chr_h_mainfuncarea, "SEC_MAINT");
		strcpy(chr_h_condid, "CHK_CLSCODE_FOR_TR");

		int_retval = CO_Chk_CntryEnabled(chr_h_mainfuncarea,chr_h_condid,&h_CondExists,l_debug_info_ptr);
		if (int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL

		if (h_CondExists > 0)
		{
		  if ((strcmp(h_classcd, "HS") == 0) && (strcmp(h_classcd,p_mt_instrument_struct_h_a->h_classcd) != 0))
		  {
				if (strcmp(l_mt_core_sys_params_struct_h.ord_proc_ind, "Y") == 0)
				{
					int_retval = CR_Chk_SecOrd(p_mt_instrument_struct_h_a->h_securitycd,l_debug_info_ptr);
					if (int_retval == APL_RECS_EXIST)
						CO_InsertErr(l_debug_info_ptr,ERR_ORDEXIST_CANT_CLSCODE,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
					else if (int_retval == APL_FAILURE)
						APL_GOBACK_FAIL
				}
		 
			  if (strcmp(g_mt_commonsys_params_struct_h.ca_module_ind, "Y") == 0)
		  	  {	
					int_retval = CR_Chk_SecEvent(p_mt_instrument_struct_h_a->h_securitycd,l_debug_info_ptr);
					if (int_retval == APL_RECS_EXIST)
						CO_InsertErr(l_debug_info_ptr,ERR_EVNTEXIST_CANTCHG_CLSCODE,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
					else if (int_retval == APL_FAILURE)
						APL_GOBACK_FAIL
		  		}
			}
		}

		strcpy(chr_h_mainfuncarea, "SEC_MAINT");
		strcpy(chr_h_condid, "CHK_CLSCODE_FOR_RU");

		int_retval = CO_Chk_CntryEnabled(chr_h_mainfuncarea,chr_h_condid,&h_CondExists,l_debug_info_ptr);
		if (int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL

		if (h_CondExists > 0)
		{
		  if ((strcmp(h_classcd, "OTH") == 0) && (strcmp(p_mt_instrument_struct_h_a->h_classcd,"MIN") == 0))
		  {
				if (strcmp(l_mt_core_sys_params_struct_h.ord_proc_ind, "Y") == 0)
				{
					int_retval = CR_Chk_SecOrd(p_mt_instrument_struct_h_a->h_securitycd,l_debug_info_ptr);
					if (int_retval == APL_RECS_EXIST)
						CO_InsertErr(l_debug_info_ptr,ERR_ORDEXIST_CANT_CLSCODE,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
					else if (int_retval == APL_FAILURE)
						APL_GOBACK_FAIL
				}
		 
				int_retval = CR_Chk_SecPymtTrd(p_mt_instrument_struct_h_a->h_securitycd,l_debug_info_ptr);
				if (int_retval == APL_RECS_EXIST)
					CO_InsertErr(l_debug_info_ptr,ERR_PYMNTTRDEXIST_CANT_CLSCODE,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
				else if (int_retval == APL_FAILURE)
					APL_GOBACK_FAIL
			}
		}

		if (strcmp(g_mt_commonsys_params_struct_h.ca_module_ind, "Y") == 0)
		{
			if (strcmp(p_mt_instrument_struct_h_a->h_typeofsec, h_typeofsec) != 0)
			{
				int_retval = CR_Chk_SecEvent(p_mt_instrument_struct_h_a->h_securitycd,l_debug_info_ptr);
				if (int_retval == APL_RECS_EXIST)
					CO_InsertErr(l_debug_info_ptr,ERR_EVNTEXIST_CANTCHG_SECTYPE,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
				else if (int_retval == APL_FAILURE)
					APL_GOBACK_FAIL
			}

			if (strcmp(p_mt_instrument_struct_h_a->h_issue_date, h_issue_date) != 0)
			{
				int_retval = CR_Chk_SecEvent(p_mt_instrument_struct_h_a->h_securitycd,l_debug_info_ptr);
				if (int_retval == APL_RECS_EXIST)
					CO_InsertErr(l_debug_info_ptr,ERR_EVNTEXIST_CANTCHG_ISSUEDT,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
				else if (int_retval == APL_FAILURE)
					APL_GOBACK_FAIL
			}

			if (p_mt_instrument_struct_h_a->h_nominal_val != h_nominal_val)
			{
				int_retval = CR_Chk_SecEvent(p_mt_instrument_struct_h_a->h_securitycd,l_debug_info_ptr);
				if (int_retval == APL_RECS_EXIST)
					CO_InsertErr(l_debug_info_ptr,ERR_EVNTEXIST_CANTCHG_NOMVAL,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
				else if (int_retval == APL_FAILURE)
					APL_GOBACK_FAIL
			}
			
			if (strcmp(p_mt_instrument_struct_h_a->h_int_clttyp, h_int_clttyp) != 0)
			{
				int_retval = CR_Chk_SecEvent(p_mt_instrument_struct_h_a->h_securitycd,l_debug_info_ptr);
				if (int_retval == APL_RECS_EXIST)
					CO_InsertErr(l_debug_info_ptr,ERR_EVNTEXIST_CANTCHG_INTCALCTYPE,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
				else if (int_retval == APL_FAILURE)
					APL_GOBACK_FAIL
			}
		}
	
		if (strcmp(g_mt_commonsys_params_struct_h.bill_module_ind, "Y") == 0)
		{
			if (strcmp(p_mt_instrument_struct_h_a->h_prodateype, h_prodateype) != 0)
			{
				int_retval = IV_Rtv_Bill_FrmGendt_DlvDt(l_debug_info_ptr);

				if (int_retval == APL_SUCCESS)
					CO_InsertErr(l_debug_info_ptr,ERR_BTWNGENDELV_CANTCHG_PRODTYPE,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
			}
	
			if (strcmp(p_mt_instrument_struct_h_a->h_currencycode, h_currencycode) != 0)
			{
				int_retval = IV_Rtv_Bill_FrmGendt_DlvDt(l_debug_info_ptr);

				if (int_retval == APL_SUCCESS)
					CO_InsertErr(l_debug_info_ptr,ERR_BTWNGENDELV_CANTCHG_SECCCY,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
			}
		}
	}

	if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
		APL_GOBACK_FAIL

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_SecDet \n",NULL,p_intl_env_data_struct_h_d);
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_SecDet \n",NULL,p_intl_env_data_struct_h_d);
		return(APL_FAILURE);

	}
}



 
 int CR_Chk_ChldSec(char *p_sec_code, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca	sqlca;
	int				int_h_num_rows = 0;
	char				chr_l_buf[BUFFER_LEN];
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_ChldSec \n",NULL,NULL);
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Security h_code is %s \n",p_sec_code);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
	}

	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_h_num_rows
	FROM MT_INSTRUMENT
	WHERE PARENT_SEC = :p_sec_code
	AND security_cd != :p_sec_code;

	IS_ANY_ORA_ERROR

	if (int_h_num_rows > 0)
	{
		APL_GOBACK_SUCCESS
	}
	else
	{
		APL_GOBACK_FAIL
	}

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_ChldSec \n",NULL,NULL);
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_ChldSec \n",NULL,NULL);
		return(APL_FAILURE);
	}
}


 
 int CR_Chk_SecMkrChkr(char *p_sec_code,char *p_user,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	VARCHAR					h_creater[APL_USERID_LEN];
	struct sqlca			sqlca;
	char						chr_l_buf[BUFFER_LEN];
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_SecMkrChkr \n",NULL,NULL);
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Security h_code is %s \n",p_sec_code);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
		
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"User is %s \n",p_user);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
	}

	EXEC SQL SELECT creater
	INTO :h_creater
	FROM MT_INSTRUMENT
	WHERE security_cd = :p_sec_code;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	h_creater.arr[h_creater.len] = APL_NULL_CHAR;

	if (strcmp(p_user,h_creater.arr) == 0)
	{
		CO_InsertErr(l_debug_info_ptr,ERR_MAKER_CHECKER_SAME,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);

		APL_GOBACK_FAIL
	}

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccAuth \n",NULL,NULL);
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccAuth \n",NULL,NULL);
		return(APL_FAILURE);
	}
 }


int CR_Chk_SecEvent(char *p_sec_code,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;

	struct sqlca sqlca;
	int			 int_l_num_rows = 0;
	
	EXEC SQL END DECLARE SECTION;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	APL_IF_DEBUG
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_SecEvent \n",NULL,NULL);
   
   
	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows
	FROM CAEVENT
	WHERE security_cd = :p_sec_code
	AND event_status NOT IN ('SN','CP','RV','UU','FI','FE','FS','WI');
	        

	IS_ANY_ORA_ERROR

	if (int_l_num_rows == 0)
		APL_GOBACK_SUCCESS
	else
		APL_GOBACK_FAIL

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_SecEvent \n",NULL,NULL);
		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_SecEvent \n",NULL,NULL);
		if (sqlca.sqlcode == 0)
			return(APL_RECS_EXIST);
		else
			return(APL_FAILURE);
	}
}

int CR_Chk_SecTrd(char *p_sec_code,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;

	struct sqlca sqlca;
	int			 int_l_num_rows = 0;
	
	EXEC SQL END DECLARE SECTION;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	APL_IF_DEBUG
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_SecTrd \n",NULL,NULL);
	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows
	FROM DL_DEAL
	WHERE security_cd = :p_sec_code;

	IS_ANY_ORA_ERROR

	if (int_l_num_rows == 0)
		APL_GOBACK_SUCCESS
	else
		APL_GOBACK_FAIL

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_SecTrd \n",NULL,NULL);
		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_SecTrd \n",NULL,NULL);
		if (sqlca.sqlcode == 0)
			return(APL_RECS_EXIST);
		else
			return(APL_FAILURE);
	}
}	

int CR_Chk_SecPos(char *p_sec_code,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;

	struct sqlca sqlca;
	int			 int_l_num_rows = 0;
	
	EXEC SQL END DECLARE SECTION;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	APL_IF_DEBUG
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_SecPos \n",NULL,NULL);

	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows
	FROM DL_SAFEK
	WHERE security_cd = :p_sec_code;

	IS_ANY_ORA_ERROR

	if (int_l_num_rows == 0)
		APL_GOBACK_SUCCESS
	else
		APL_GOBACK_FAIL

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_SecPos \n",NULL,NULL);
		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_SecPos \n",NULL,NULL);
		if (sqlca.sqlcode == 0)
			return(APL_RECS_EXIST);
		else
			return(APL_FAILURE);
	}
}

int CR_Chk_SecPosPosnstat(char *p_sec_code,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;

	struct sqlca sqlca;
	int			 int_l_num_rows = 0;
	
	EXEC SQL END DECLARE SECTION;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	APL_IF_DEBUG
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_SecPosPosnstat \n",NULL,NULL);

	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows
	FROM DL_SAFEK
	WHERE security_cd = :p_sec_code
	AND STATUS IN ('001','002','003');

	IS_ANY_ORA_ERROR

	if (int_l_num_rows == 0)
		APL_GOBACK_SUCCESS
	else
		APL_GOBACK_FAIL

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_SecPosPosnstat \n",NULL,NULL);

		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_SecPosPosnstat \n",NULL,NULL);

		if (sqlca.sqlcode == 0)
			return(APL_RECS_EXIST);
		else
			return(APL_FAILURE);
	}
}


int CR_Chk_SecLRRpt(char *p_sec_code,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;

	struct sqlca sqlca;
	int			 int_l_num_rows = 0;
	
	EXEC SQL END DECLARE SECTION;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	APL_IF_DEBUG
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_SecLRRpt \n",NULL,NULL);

	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows
	FROM DL_LOCALREPSAFEK
	WHERE security_cd = :p_sec_code;

	IS_ANY_ORA_ERROR

	if (int_l_num_rows == 0)
		APL_GOBACK_SUCCESS
	else
		APL_GOBACK_FAIL

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_SecLRRpt \n",NULL,NULL);
		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_SecLRRpt \n",NULL,NULL);
		if (sqlca.sqlcode == 0)
			return(APL_RECS_EXIST);
		else
			return(APL_FAILURE);
	}
}

int CR_Chk_SecPymtTrd(char *p_sec_code,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;

	struct sqlca sqlca;
	int			 int_l_num_rows = 0;
	
	EXEC SQL END DECLARE SECTION;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	APL_IF_DEBUG
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_SecPymtTrd \n",NULL,NULL);

	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows
	FROM DL_DEAL
	WHERE security_cd = :p_sec_code
	AND deal_cd IN ('3','4','5','6','7','8');

	IS_ANY_ORA_ERROR

	if (int_l_num_rows == 0)
		APL_GOBACK_SUCCESS
	else
		APL_GOBACK_FAIL

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_SecPymtTrd \n",NULL,NULL);
		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_SecPymtTrd \n",NULL,NULL);

		if (sqlca.sqlcode == 0)
			return(APL_RECS_EXIST);
		else
			return(APL_FAILURE);
	}
}


int CR_Chk_SecOrd(char *p_sec_code,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;

	struct sqlca sqlca;
	int			 int_l_num_rows = 0;
	
	EXEC SQL END DECLARE SECTION;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	APL_IF_DEBUG
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_SecOrd \n",NULL,NULL);
	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows
	FROM OR_ORDERDETAILS
	WHERE security_cd = :p_sec_code;

	IS_ANY_ORA_ERROR

	if (int_l_num_rows == 0)
		APL_GOBACK_SUCCESS
	else
		APL_GOBACK_FAIL

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_SecOrd \n",NULL,NULL);

		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_SecOrd \n",NULL,NULL);
		if (sqlca.sqlcode == 0)
			return(APL_RECS_EXIST);
		else
			return(APL_FAILURE);
	}
}

int CR_Chk_SecISINUnique(char *p_sec_code,char *chr_p_isin,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;

	struct sqlca sqlca;
	int			 int_l_num_rows = 0;
	
	EXEC SQL END DECLARE SECTION;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	APL_IF_DEBUG
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_SecISINUnique \n",NULL,NULL);

	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows
	FROM MT_INSTRUMENT
	WHERE sec_isin = :chr_p_isin
	AND	security_cd != :p_sec_code;

	IS_ANY_ORA_ERROR

	if (int_l_num_rows == 0)
		APL_GOBACK_SUCCESS
	else
		APL_GOBACK_FAIL

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_SecISINUnique \n",NULL,NULL);
		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_SecISINUnique \n",NULL,NULL);

		if (sqlca.sqlcode == 0)
			return(APL_RECS_EXIST);
		else
			return(APL_FAILURE);
	}
}


 
 int CR_Chk_SecCodeUnique(char *p_sec_code,char *p_table_name,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca			sqlca;
	char						chr_l_buf[BUFFER_LEN];
	int			 			int_l_num_rows = 0;
	VARCHAR					sqlstmt[100];
	VARCHAR					h_fld_value[APL_INSTRUMENTCODE_LEN];
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_SecCodeUnique \n",NULL,NULL);
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Security h_code is %s \n",p_sec_code);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
		
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Table is %s \n",p_table_name);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
	}

	strcpy(h_fld_value.arr,p_sec_code);
	h_fld_value.len = strlen(p_sec_code);

	

	sprintf(sqlstmt.arr,"SELECT NVL(COUNT(*),0) FROM %s WHERE security_cd=:v1",p_table_name);

	sqlstmt.len = strlen(sqlstmt.arr);
	sqlstmt.arr[sqlstmt.len] = '\0';
	sqlstmt.len++;

	EXEC SQL PREPARE s FROM :sqlstmt;
	EXEC SQL DECLARE c CURSOR FOR s;
	EXEC SQL OPEN c USING :h_fld_value;
	EXEC SQL FETCH c INTO :int_l_num_rows;

	IS_ANY_ORA_ERROR

	EXEC SQL CLOSE c;

	if (int_l_num_rows == 0)
		APL_GOBACK_SUCCESS
	else
		APL_GOBACK_FAIL

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_SecCodeUnique \n",NULL,NULL);
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_SecCodeUnique \n",NULL,NULL);
		
		if (sqlca.sqlcode == 0)
			return(APL_RECS_EXIST);
		else
			return(APL_FAILURE);
	}
}
