

   
	
   
   
   
   
   
   
   
   
   
   
   

				


#include "CR_Common.h"
#include "Intellect_Interface.h"
#include "Intellect_Common.h"
#include "CO_HostStructdef.h"
#include "CO_Commdef.h"  
#include "MS_Swift.h"
#include "DL_Interface.h" 
#include "IV_Control_A.h"
#include "cmqc.h"
#include "SMP_InterFace.h"

#include <dirent.h>
#include <unistd.h>
#include <errno.h>

EXEC SQL INCLUDE SQLCA;
#define S_RESTART 10
#define S_START 11
#define S_CANNOT_EXECUTE 12
#define DEALMS_LINK_SEQ_NAME 	"CMSGLINKSEQ"

/*Commented for Linux Migration
#define	OS_UNIX */:
#define 	HEADERLINES				5
#define  SETTLEMENT 				6

#define  BUFFER_LEN            60
#define  APL_INSTRUDESC_LEN      121
#define	APL_MSGNO_LEN			8

#define  FILERR_NAMERR_LENGTH     100  
#define 	MESSAGERR_LENGTH			10001
#define	I_MSGNO_592				"592"
#define  I_REF_NO             "20"
#define I_CLI_REF_NO           "21"   
#define  I_CLIENTA	         "83A"
#define  I_CLIENTC	         "83C"
#define  I_CLIENTD	         "83D"
#define  I_INSTRU_DET		      "35B"
#define  I_QTY	               "35A"
#define  I_SETTLERR_DT          "30"
#define  I_NOTE					"72"
#define  I_AMOUNT_CCY 			"32B"
#define  I_DOMCPACC 				"87D"
#define	I_CLIENT				"83"


#define  I_DEAL_DATERR_LOC			"31P"
#define  I_INST_PARTYA        "82A" 
#define  I_INST_PARTYD        "82D" 
#define	I_INST_CLIENT			"82"
#define  I_SAFEKEEP_CLI       "83A"
#define  I_BIC_CODEA		      "87A"
#define  I_BIC_CODEC		      "87C"
#define  I_BIC_CODED		      "87D"
#define  I_COUNT_CLIA			"88A"
#define  I_COUNT_CLI			   "88"
#define  I_COUNT_CLIC		   "88C"
#define  I_COUNT_CLID			"88D"
#define  I_DELIV_INST_PARTYA  "85A"
#define  I_DELIV_INST_PARTYD  "85D"
#define  I_NO_532             "532"
#define  FX_CANCEL				"/FX/CANCEL/"
#define	I_CLI_FOR_PYMTC		"53C" 

#define I_CLI_CLASS_LEN    3
#define I_NON_PROPRIETORY  "2"
#define  I_LEN_S           20
#define  I_LEN_QTY         30
#define  I_FIRST        "0" 
#define I_GR_REM_PR                   "/TRAD/EXCH/XATS/PRIN"    
#define I_GR_REM_NPR                  "/TRAD/EXCH/XATH"         
#define  INC_PATH_LENGTH      80
#define I_INC_SLEEP_TIME   60                                  



char chr_g_isin[13] = APL_NULL_STRING; 
char chr_g_msg_no[4] = "XXX";
char chr_g_msgfile_name[31] = APL_NULL_STRING; 
char chr_g_msg_sts[4] = APL_NULL_STRING;

char chr_g_rej_reas[80] = APL_NULL_STRING;

char chr_g_sfe_refno[11]= APL_NULL_STRING; 
char chr_g_settle_dt[APL_DATE_LEN] = APL_NULL_STRING;  
char chr_g_unique_ref_num[APL_UNIQUE_REF_NUM_LEN]= APL_NULL_STRING; 
int int_g_srl_no;
char chr_g_new_msg_no[7] = APL_NULL_STRING;
char chr_g_addinfo[31];
long  int_g_seq_num = 0;
char chr_g_str_client[APL_CLIENT_LENGTH] = APL_NULL_STRING;
int   int_l_count_rep_flg				 =    0;	
	char			chr_l_tmplogfilename5[PATH_LENGTH]	= APL_NULL_STRING;
	char			chr_l_tmplogfilename2[PATH_LENGTH]	= APL_NULL_STRING;
	char			chr_l_tmplogfilename3[PATH_LENGTH]	= APL_NULL_STRING;
	char			chr_l_tmplogfilename4[PATH_LENGTH]	= APL_NULL_STRING;

#ifdef EMU_PROCESSING
	int int_g_emutransperiod = 0;
#endif
int MS_Proc_IncMsg53xRejRpt(char                   *chr_p_client,
						    char                   *chr_p_refno,
						    char                   *p_instr_code,
							 double                 p_quantity,
						    char                   *p_rej_str,
						    char                   *chr_fl_name,
							 char                   *p_mesg_body,
						    FILE                   *fl_rejectrpt,
						    DEBUG_INFO_STRUCT_H           **l_debug_info_ptr);



int MS_Proc_IncMsg53x( FILE                    *fl_incmsg,
					   char                    *p_msg_no,
					   FILE                    *fl_userlog,
					   FILE                    *p_fl_userlog,
					   char                    *chr_fl_name,
					   FILE                    *fl_53x_pendrpt,
					   FILE                    *fl_rejectrpt,
					   FILE                    *fl_repairrpt,
					   char                    *p_mesg_body,
					   INTL_ENV_DATA_STRUCT_H      *p_intlenv_data_struct_h,
					   DEBUG_INFO_STRUCT_H            **l_debug_info_ptr);

int   MS_Proc_IncMsg53xParse ( FILE                *fl_incmsg,
							 char                *chr_fl_name,
						    char                *p_msg_no,
						    char                *p_mesg_body,
						    MS_53X_STRUCT_H        *p_ms_53x_struct_h,
						    FILE                *fl_rejectrpt,
					       FILE                *fl_userlog,
					       FILE                *p_fl_userlog_a,
					       INTL_ENV_DATA_STRUCT_H  *p_intlenv_data_struct_h,
					       DEBUG_INFO_STRUCT_H        **l_debug_info_ptr);

int MS_Proc_IncMsg53xSetlRpt(char                     *chr_p_client,
							  char                     *p_ref_no,
							  char                     *p_instr_code,
							  char                     *chr_fl_name,
						     char                     *p_mesg_body,
				           double                   p_quantity,
				           FILE                     *fl_repairrpt,
			              DEBUG_INFO_STRUCT_H             **l_debug_info_ptr);



int MS_Proc_IncMsg53xSetlRptBTT( char                     *chr_p_client,
									char                     *p_ref_no,
								   char                     *p_instr_code,
								   double                    p_quantity,
								   char                     *p_cp_code,
								   char                     *p_cp_ident,
							      char                     *p_flg_settled,
							      char                     *chr_fl_name,
 							      char                     *p_mesg_body,
							      FILE                     *fl_repairrpt,
							      DEBUG_INFO_STRUCT_H             **l_debug_info_ptr);

int MS_Proc_IncMsg53xPendRpt(char                     *chr_p_client,
						  char                     *chr_p_refno,
						  char                     *p_instr_code,
					     double                   p_quantity,
					     char                     *p_pend_str,
					     char                     *chr_fl_name,
				        char                     *p_mesg_body,
				        FILE                     *fl_53x_pendrpt,
				        DEBUG_INFO_STRUCT_H             **l_debug_info_ptr);

int MS_Proc_IncMsg(FILE *p_fl_techlog, 
						  char *p_incmsgdir,
						  char *p_incmsgarchdir,
						  char *p_ora_rowid,
                    FILE *p_userlog, 
                    FILE *p_536log, 
         	        INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h,
            	     DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
		
		FILE  *fl_incmsglst              = (FILE *)NULL;
      FILE  *fl_incmsg                 = (FILE *)NULL;
      FILE  *fl_userlog                = (FILE *)NULL;
		FILE	*chr_finifile						= NULL;
		char  chr_inifile[PATH_LENGTH]			= APL_NULL_STRING;

      char  chr_fl_name[FILERR_NAMERR_LENGTH]  = APL_NULL_STRING;
      char  chr_l_fl_name[FILERR_NAMERR_LENGTH]  = APL_NULL_STRING;
      char  chr_fl_name1[FILERR_NAMERR_LENGTH]  = APL_NULL_STRING;
      char  chr_fl_name2[FILERR_NAMERR_LENGTH]  = APL_NULL_STRING;
      char  chr_l_str1[LINERR_LENGTH]        = APL_NULL_STRING;
      char  chr_l_str2[LINERR_LENGTH]        = APL_NULL_STRING;
      char  chr_l_str3[LINERR_LENGTH]        = APL_NULL_STRING;
		char	h_swift_msg_no[APL_MSGNO_LEN]		= APL_NULL_STRING;
			
		char	chr_l_msg_no[6]						= APL_NULL_STRING;		
		int	int_l_count							= 0;	
      int   i                          = 0;
      char  chr_l_validmsgfound            = APL_NULL_CHAR;
		int   int_l_ret_sys						= 0; 

		char	*b;
		FILE	*fl_cancelrpt					= (FILE *) NULL;
		FILE	*fl_rejectrpt					= (FILE *) NULL;
		char  chr_rep_str1[3]                = APL_NULL_STRING;
		char  chr_rep_desc1[41]              = APL_NULL_STRING;
		char  chr_funcdesc1[61]              = APL_NULL_STRING;
		
		char  chr_l_temp_errmsg[40]          = APL_NULL_STRING;
		
		char	chr_l_incfl[100]					= APL_NULL_STRING;
		char  chr_rep_str2[3]                = APL_NULL_STRING;
		char  chr_rep_desc2[101]              = APL_NULL_STRING;
		char  chr_funcdesc2[61]              = APL_NULL_STRING;
		char	chr_l_incmsgdir[PATH_LENGTH]	= APL_NULL_STRING;
		char	chr_l_incmsgarchdir[PATH_LENGTH]	= APL_NULL_STRING;
		char	chr_l_buf[100]						= APL_NULL_STRING;
		char	chr_l_buf1[100]						= APL_NULL_STRING;
		char	chr_l_buf2[100]						= APL_NULL_STRING;
		double   h_tot_quantity               = 0;			
		int   int_retstat                    = 0;			
		char chr_l_trd_date[7]					= APL_NULL_STRING;

		char	chr_h_batch_in_proc_progname[40]					 = APL_NULL_STRING;
		char  chr_h_batch_in_proc_startdate[APL_DATE_LEN]	= APL_NULL_STRING;	
		char  chr_h_batch_in_proc_rowid[APL_ROWID_LEN]		= APL_NULL_STRING;

		char	h_ora_rowid[APL_ROWID_LEN]							= APL_NULL_STRING;
		char	chr_l_stat_info[71]									= APL_NULL_STRING;
		char	chr_l_mesg_body[MESSAGERR_LENGTH]					= APL_NULL_STRING;
		char chr_l_temp_str1[71]										= APL_NULL_STRING;
		char chr_l_temp_str2[70]										= APL_NULL_STRING;
		MS_54X_STRUCT_H				l_ms_54x_struct_h;
	
	MS_INC_MSG_STRUCT_H			l_ms_inc_msg_struct_h;
		MS_GEN_STRUCT_H				l_ms_gen_struct_h;
		MS_REP_STRUCT_H        *h_rep_seq_struct = (MS_REP_STRUCT_H  *)NULL;
		MS_INC_LINKINFO_STRUCT_H         *h_inc_linkage_info = (MS_INC_LINKINFO_STRUCT_H *)NULL;
																									 
		MS_59X_STRUCT_H            h_59x_struct;
		int 							int_h_no_of_trd = 0;
		char     chr_l_trd_locn[APL_LOCNCODE_LENGTH]        = APL_NULL_STRING;	
		DL_MSGLINK_STRUCT_H   l_dl_msglink_struct_h;

		char     chr_h_system_date[APL_DATE_LEN] = APL_NULL_STRING;
		int      int_l_rpr_seq_num = 0;
		DL_DEALREPAIR_STRUCT_H      l_dl_dealrepair_struct_h;
      char  chr_l_rmtemp[INC_PATH_LENGTH]   = APL_NULL_STRING; 
		short	l_sfe_inc_flg					 = 	0;
		int	int_l_sferefno_count				 =		0;
		char  chr_l_reppath[PATH_LENGTH]		 = APL_NULL_STRING;
	char			chr_l_logfilename5[PATH_LENGTH]	= APL_NULL_STRING;
	char			chr_l_logfilename2[PATH_LENGTH]	= APL_NULL_STRING;
	char			chr_l_logfilename3[PATH_LENGTH]	= APL_NULL_STRING;
	char			chr_l_logfilename4[PATH_LENGTH]	= APL_NULL_STRING;
	
		char	chr_h_repair_flg[2]				 = APL_NULL_STRING;
		char	chr_h_manual_trd_flg[2]			 = APL_NULL_STRING;
		char 	*a ;


		DIR 	*dirp								=	NULL;
	   struct dirent *dp;		
		struct dirent chr_junk;
		struct dirent *l_pdp=NULL;
		FILE				*fl_repairrpt 		= (FILE *) NULL;	
		char	chr_l_inc_file						= APL_NULL_CHAR;
		short l_gr_flg                   = 0;
		char  chr_l_now[APL_DATE_LEN]			= APL_NULL_STRING;

  		FILE  *fl_53xPendRpt                = NULL;
	   short l_rus_flg                     = 0;


		PRO_GSEQNUM_STRUCT_H         *l_progseqnum_struct_h     = NULL;

	   short l_gr_536_flg                     = 0;
	   short l_537_548_flg                    = 0;
      FILE  *fl_536log                = (FILE *)NULL;
		MS_536_STRUCT_H							l_ms_536_struct_h;
		MS_537_STRUCT_H							l_ms_537_struct_h;
		char     chr_l_isetlrpt_date[APL_DATE_LEN] = APL_NULL_STRING;


		EXEC SQL BEGIN DECLARE SECTION;

		EXEC SQL VAR chr_h_batch_in_proc_rowid IS STRING;
		EXEC SQL VAR chr_l_isetlrpt_date IS STRING;
		EXEC SQL VAR l_dl_msglink_struct_h.h_new_dt IS STRING;
		EXEC SQL VAR l_dl_msglink_struct_h.h_information IS STRING;
		struct sqlca sqlca;
		
		short  int_i_batch_in_proc_rowid = 0;
		EXEC SQL END DECLARE SECTION;		

	   memset(&l_ms_54x_struct_h,NULL,sizeof(MS_54X_STRUCT_H) );
		memset (&l_ms_inc_msg_struct_h,NULL,sizeof(MS_INC_MSG_STRUCT_H));
		memset(&l_ms_gen_struct_h,NULL,sizeof(MS_GEN_STRUCT_H)); 
	   memset(&h_59x_struct,NULL,sizeof(MS_59X_STRUCT_H)); 
		memset(&l_dl_msglink_struct_h,NULL,sizeof(DL_MSGLINK_STRUCT_H));
		memset(&l_dl_dealrepair_struct_h,NULL,sizeof(DL_DEALREPAIR_STRUCT_H));
		a = (char *)calloc(LINERR_LENGTH,sizeof(char));

		 
      fl_userlog = p_userlog; 
      fl_536log = p_536log; 

		l_progseqnum_struct_h = (PRO_GSEQNUM_STRUCT_H *)calloc(1,sizeof(PRO_GSEQNUM_STRUCT_H));
		APL_MALLOC_FAIL(l_progseqnum_struct_h);
		memset(l_progseqnum_struct_h,NULL,sizeof(PRO_GSEQNUM_STRUCT_H));

		
		
		APL_IF_DEBUG
		{
			CO_ProcMonitor(p_fl_techlog, "\nInside The I_Proc_Incmsgfn\n", NULL , NULL);
		}
		strcpy(chr_l_incmsgdir, p_incmsgdir);

      strcpy(chr_l_rmtemp,chr_l_incmsgdir);
      strcat(chr_l_rmtemp,"*.tmp");
      printf("Deleting the .tmp files in the %s dir \n",chr_l_rmtemp);
      memset(chr_l_buf2, APL_NULL_CHAR , 100);
	  /*Commented by kotubabu for Linux Migration
      #ifdef OS_UNIX */
         sprintf(chr_l_buf2, "rm -f %s ", chr_l_rmtemp);
      /*#endif*/
      system(chr_l_buf2);
      printf("l_buf2 is %s\n",chr_l_buf2);

		strcpy(chr_l_incmsgarchdir, p_incmsgarchdir);
      printf("l_incfl is %s\n",chr_l_incfl);
      printf("l_incmsgdir is %s  \n",chr_l_incmsgdir);
      printf("Deleting the .tmp files in the %s dir \n",chr_l_rmtemp);
		strcpy(chr_l_incfl,chr_l_incmsgdir);
      printf("after strcpy chr_l_incfl is %s\n",chr_l_incfl);
		strcat(chr_l_incfl,"incl");
      printf(" final chr_path chr_l_incfl is %s\n",chr_l_incfl);

      if 	(	(fl_incmsglst  = fopen(chr_l_incfl, "w+" ) ) == (FILE *)NULL )
		{
			fprintf(p_fl_techlog,"Failed To Open File Containing Names of Incoming Message Files\n");
			memset(chr_l_buf2, APL_NULL_CHAR , 100);
			/*Commented by kotubabu for Linux Migration
			#ifdef OS_UNIX */
				sprintf(chr_l_buf2, "rm -f %s ", chr_l_incfl);
			/*#endif*/
			system(chr_l_buf2);
			APL_GOBACK_SUCCESS
		}
      printf(" opened h_file chr_l_incfl is %s\n",chr_l_incfl);
	


		l_rus_flg = 0;
		if (APL_FAILURE == CO_Chk_CntryEnabled(  "INCOMING_MSG",
															"PROC_53X",
															&l_rus_flg,
															l_debug_info_ptr ))
	  {
			APL_GOBACK_FAIL
	  }



		l_gr_536_flg = 0;
		if (APL_FAILURE == CO_Chk_CntryEnabled(  "INCOMING_MSG",
															"PROC_536",
															&l_gr_536_flg,
															l_debug_info_ptr ))
	  {
			APL_GOBACK_FAIL
	  }

		l_537_548_flg = 0;
		if (APL_FAILURE == CO_Chk_CntryEnabled(  "DEPO_PROCESSING",
															"PROCESS_537_548",
															&l_537_548_flg,
															l_debug_info_ptr ))
	  {
			APL_GOBACK_FAIL
	  }



		l_gr_flg = 0;
		if (APL_FAILURE == CO_Chk_CntryEnabled(  "INCOMING_MSG",
															"FILENM_CHK_NOT_REQD",
															&l_gr_flg,
															l_debug_info_ptr ))
		{
			APL_GOBACK_FAIL
		}

   	
   	if (APL_FAILURE == CO_Chk_CntryEnabled( "INCOMING_MSG",
      	                                   "SFE_MQ_INC",
         	                                 &l_sfe_inc_flg,
            	                              l_debug_info_ptr ))
      	{
        	 	APL_GOBACK_FAIL
      	}
   	

 		dirp	=	opendir(chr_l_incmsgdir);
		chr_l_inc_file	= 'F';

		l_pdp=calloc(1,sizeof(struct dirent));
		/*#ifdef OS_SUN  commented by kotubabu for Linux Migration*/
		#ifdef OS_LINUX  /*Added by kotubabu for Linux Migration*/
		while((dp=readdir(dirp)) != NULL)
      {
      	if((dp->d_name[0] != '.') &&
         	(strcmp(dp->d_name, "incl")) &&
            ((dp->d_name[0] == 'M')||(l_gr_flg)|| (l_sfe_inc_flg!=0)))
        	{
         	strcpy(chr_l_fl_name, chr_l_incmsgdir);
            strcat(chr_l_fl_name, dp->d_name);
            fprintf(fl_incmsglst, "%s\n", chr_l_fl_name);
            strcpy(chr_l_fl_name, APL_NULL_STRING);
            chr_l_inc_file  = 'T';
      	}
      }
		#else
 			while(1)
			{
				readdir_r(dirp, &chr_junk, &l_pdp);
				if (!l_pdp) break;

				if((l_pdp->d_name[0] != '.') &&
					(strcmp(l_pdp->d_name, "incl")) &&
					((l_pdp->d_name[0] == 'M')||(l_gr_flg) || (l_sfe_inc_flg!=0)))
				{
					strcpy(chr_l_fl_name, chr_l_incmsgdir);
 					strcat(chr_l_fl_name, l_pdp->d_name);
 					fprintf(fl_incmsglst, "%s\n", chr_l_fl_name);
 					strcpy(chr_l_fl_name, APL_NULL_STRING);
					chr_l_inc_file	= 'T';
				}
 			}
		#endif
		closedir(dirp);
		//free(l_pdp);
 		fflush(fl_incmsglst);
 		rewind(fl_incmsglst);
 		fflush(fl_incmsglst);
		APL_IF_DEBUG
		{
			printf("opened the h_file INCLMSGFL\n");
		}
			if ( chr_l_inc_file == 'T')
			{
				if(l_sfe_inc_flg!=0)
				{	
				

   					strcpy(chr_inifile,getenv("INTL_ROOT_PATH"));
   					strcat(chr_inifile,"/intl_sun.cfg");

 						if ( (chr_finifile = fopen(chr_inifile,"r") ) == NULL)
      	   			exit(-1);

						if (CO_ReadToken( chr_finifile,
      	     								"INTL_REP_PATH",
         	     							chr_l_reppath,
            	  							l_debug_info_ptr)  == APL_FAILURE)
    					{
       					fprintf(p_fl_techlog,"Failed To Open The Incoming Messages Directory\n");
   						APL_GOBACK_FAIL
    					}
					if(int_l_count_rep_flg!=0)
					{	
				
				      if (  (fl_cancelrpt  = fopen(chr_l_tmplogfilename5, "a")) == NULL)
      				{
							printf("l_tmplogfilename5 is %s\n",chr_l_tmplogfilename5);
         				fprintf(APL_OUT_FILE,"Failed To Open The CANC File In The Append Mode\n");
         				APL_GOBACK_FAIL
      				}	

				      if (  (fl_rejectrpt  = fopen(chr_l_tmplogfilename2, "a")) == NULL)
      				{
							printf("l_tmplogfilename2 is %s\n",chr_l_tmplogfilename2);
         				fprintf(APL_OUT_FILE,"Failed To Open The REJECT File In The Append Mode\n");
         				APL_GOBACK_FAIL
      				}	

				      if (  (fl_repairrpt  = fopen(chr_l_tmplogfilename3, "a")) == NULL)
      				{
							printf("l_tmplogfilename3 is %s\n",chr_l_tmplogfilename3);
         				fprintf(APL_OUT_FILE,"Failed To Open The Repair File In The Append Mode\n");
         				APL_GOBACK_FAIL
 		     			}	
						if (l_rus_flg)
						{
				      	if (  (fl_53xPendRpt  = fopen(chr_l_tmplogfilename4, "a")) == NULL)
      					{
							printf("l_tmplogfilename4 is %s\n",chr_l_tmplogfilename4);
         					fprintf(APL_OUT_FILE,"Failed To Open The 53x File In The Append Mode\n");
         					APL_GOBACK_FAIL
      					}	
						}
					 }
					}
			  
			  
			  
			  

			  if (APL_FAILURE == CO_RtvSysDtTime(	chr_l_now,
																	  l_debug_info_ptr ))
			  {
				  APL_GOBACK_FAIL
			  }
				fprintf(fl_userlog, "Incoming Messages Log Generated on %s \n", chr_l_now);

			
			  if((l_sfe_inc_flg==0)|| (int_l_count_rep_flg==0))
			  {
			 		
				 	strcpy(chr_rep_str1, "TC");
				 	strcpy(chr_rep_desc1,"Incoming Mesg: MT592 CANCELLATION REPORT");
				 	strcpy(chr_funcdesc1,"Trade Cancellation Report");

				 	if (APL_FAILURE == CO_Rtv_RptFileName (chr_rep_str1,
																	 chr_rep_desc1,
																	 100,
																	 chr_funcdesc1,
																	 NULL,
																	 &fl_cancelrpt,
																	 l_debug_info_ptr))
			 	 	{
				 		CO_InsertErr(  l_debug_info_ptr,
												ERR_FILE_NOTFND,
												"CancelTradeRpt",
												APL_NULL_STRING,
												APL_NULL_STRING,
												__LINE__,
											   __FILE__) ;
				 		 APL_GOBACK_FAIL
			 	 	}
			 		strcpy(chr_rep_str2 , "TR");
			 		strcpy(chr_rep_desc2,"Incoming Mesg: REJECTION OF MT592 CANCELLATION MESSAGE");
				 	strcpy(chr_funcdesc2,"Trade Cancellation Reject Report");
					 if (APL_FAILURE == CO_Rtv_RptFileName (chr_rep_str2,
																 chr_rep_desc2,
																 100,
																 chr_funcdesc2,
																 NULL,
																 &fl_rejectrpt,
																 l_debug_info_ptr))
			 		{
				 		CO_InsertErr(  l_debug_info_ptr,
												ERR_FILE_NOTFND,
												"RejCancelTradeRpt",
												APL_NULL_STRING,
												APL_NULL_STRING,
												__LINE__,
												__FILE__);
				 		APL_GOBACK_FAIL
			 		}
			  		
			  		strcpy(chr_rep_str1, "TI");
			  		strcpy(chr_rep_desc1, "Incoming Mesg - Report Repair Function ");
			  		strcpy(chr_funcdesc1, "Message Repair Report ");
			  		if (APL_FAILURE == CO_Rtv_RptFileName (chr_rep_str1,
																	 chr_rep_desc1,
																	 100,
																	 chr_funcdesc1,
																	 NULL,
																	 &fl_repairrpt,
																	 l_debug_info_ptr))
			  		{
				  		CO_InsertErr(l_debug_info_ptr,
											  ERR_FILE_NOTFND,
											  "RepairTradeRpt",
									  		  APL_NULL_STRING,
									  		  APL_NULL_STRING,
									  		  __LINE__,
									  		  __FILE__) ;
				  		APL_GOBACK_FAIL
			  		}


					if (l_rus_flg)
					{
	 					strcpy(chr_rep_str1, "TP");
	 					strcpy(chr_rep_desc1,"Incoming Mesg: PENDING MT53X SETTLEMENT MESSAGE");
	 					strcpy(chr_funcdesc1,"Pending Settlement Messages Report");

					   if (APL_FAILURE == CO_Rtv_RptFileName (chr_rep_str1,
							 										   chr_rep_desc1,
																      100,
															         chr_funcdesc1,
																		 NULL,
															 			&fl_53xPendRpt,
															 			l_debug_info_ptr))
	 					{
		 					CO_InsertErr(    l_debug_info_ptr,
								   			    ERR_FILE_NOTFND,
						      					"PendingTradeRpt",
						  			   			 APL_NULL_STRING,
		  				     			 			 APL_NULL_STRING,
							 			 			 __LINE__,
										  			 __FILE__) ;
	    					APL_GOBACK_FAIL
	 					}
					 }
				}

		  }
			if ((l_sfe_inc_flg!=0) && (int_l_count_rep_flg==0))
			{
				int_l_count_rep_flg=1;
   			if (APL_FAILURE == CO_Rtv_FileNm_From_Pointer(fl_rejectrpt,
            			                                  chr_l_reppath,
                      			                         chr_l_logfilename2) )
   		   {
      			fprintf(p_fl_techlog,"Failed To Get File Name From CO_Rtv_FileNm_From_Pointer\n");
					int_l_count_rep_flg=0;
      			APL_GOBACK_FAIL
   			}
   			sprintf(chr_l_tmplogfilename2, "%s/%s", chr_l_reppath, chr_l_logfilename2);


   			if (APL_FAILURE == CO_Rtv_FileNm_From_Pointer(fl_repairrpt,
            			                                  chr_l_reppath,
                      			                         chr_l_logfilename3) )
   		   {
      			fprintf(p_fl_techlog,"Failed To Get File Name From CO_Rtv_FileNm_From_Pointer\n");
					int_l_count_rep_flg=0;
      			APL_GOBACK_FAIL
   			}
   			sprintf(chr_l_tmplogfilename3, "%s/%s", chr_l_reppath, chr_l_logfilename3);
				
				if (l_rus_flg)
				{
   				if (APL_FAILURE == CO_Rtv_FileNm_From_Pointer(fl_53xPendRpt,
            				                                  chr_l_reppath,
                  	    			                         chr_l_logfilename4) )
   		   	{
      				fprintf(p_fl_techlog,"Failed To Get File Name From CO_Rtv_FileNm_From_Pointer\n");
						int_l_count_rep_flg=0;
      				APL_GOBACK_FAIL
   				}
   				sprintf(chr_l_tmplogfilename4, "%s/%s", chr_l_reppath, chr_l_logfilename4);
				 }
   			if (APL_FAILURE == CO_Rtv_FileNm_From_Pointer(fl_cancelrpt,
            			                                  chr_l_reppath,
                      			                         chr_l_logfilename5) )
   		   {
      			fprintf(p_fl_techlog,"Failed To Get File Name From CO_Rtv_FileNm_From_Pointer\n");
					int_l_count_rep_flg=0;
      			APL_GOBACK_FAIL
   			}
   			sprintf(chr_l_tmplogfilename5, "%s/%s", chr_l_reppath, chr_l_logfilename5);
			
			}

   	while(1)
      {
         if (feof(fl_incmsglst)) break;
          fscanf(fl_incmsglst, "%[^\n]\n",chr_fl_name);
			if (!strcmp(chr_fl_name, APL_NULL_STRING ))
			{
					  fprintf(p_fl_techlog,"NO Entries in File Containing Names of Incoming Message Files\n");
					  memset(chr_l_buf2, APL_NULL_CHAR , 100);
					  /*Commented by kotubabu for Linux Migration
					  #ifdef OS_UNIX*/
					 	  sprintf(chr_l_buf2, "rm -f %s ", chr_l_incfl);
					  /*#endif*/
					  system(chr_l_buf2);
					  APL_GOBACK_SUCCESS
			}
			
		

		if ((l_gr_flg)&&(!strcmp(chr_fl_name+(strlen(chr_fl_name)-4), ".ctl")) )
		{
				memset(chr_l_buf2, APL_NULL_CHAR , 100);
				/*Commented by kotubabu for Linux Migration
				#ifdef OS_UNIX */
					sprintf(chr_l_buf2, "cp %s %s ",chr_fl_name, chr_l_incmsgarchdir);
				/*#endif*/

				system(chr_l_buf2);

				memset(chr_l_buf2, APL_NULL_CHAR , 100);

				/*Commented by kotubabu for Linux Migration
				#ifdef OS_UNIX*/
					  sprintf(chr_l_buf2, "rm -f %s ",chr_fl_name);
			   /*#endif*/
		
				system(chr_l_buf2);
				continue;
		}

			

			strcpy(chr_fl_name2, chr_fl_name);
			strcat(chr_fl_name2, ".tmp");
			memset(chr_g_addinfo,APL_NULL_CHAR,31);
			strcpy(chr_g_addinfo,(strrchr(chr_fl_name, '/') + 1 ) ); 

			
			/*Commented by kotubabu for Linux Migration
			#ifdef OS_UNIX */
				sprintf(chr_l_buf1, "cat %s |col -b > %s",chr_fl_name, chr_fl_name2);
			/*#endif*/

			
			fprintf(p_fl_techlog,"l_buf1=(%s)\n",chr_l_buf1);
			int_l_ret_sys=0;
			int_l_ret_sys=system(chr_l_buf1);

			if( int_l_ret_sys != 0 )   
			{
				fprintf(p_fl_techlog,"Error: SYSTEM chr_command failed : int_l_ret_sys=(%d)\n",int_l_ret_sys);
			}

			if( fl_incmsg != (FILE *)NULL )
			{
				fclose(fl_incmsg);  
			}

			
         if (	(fl_incmsg   = fopen(chr_fl_name2, "r" ) ) == (FILE *)NULL)
			{
				fprintf(p_fl_techlog,"Failed To Open Message File %s \n", chr_fl_name2);
				fprintf(p_fl_techlog,"File Err no=(%d)\n",errno);
				APL_GOBACK_SUCCESS
			}

			
			strcpy(chr_g_msgfile_name,(strrchr(chr_fl_name, '/') + 1 ) );
			printf("\n chr_g_msgfile_name 1 is |%s|\n",chr_g_msgfile_name);
			strcpy(chr_g_msg_sts, "RJT"); 

			strcpy(chr_fl_name1,(strrchr(chr_fl_name2, '/') + 1 ) );			
							printf("\n chr_g_msgfile_name 7.4 is |%s|\n",chr_g_msgfile_name);

			
			
			if ((chr_fl_name1[0] == 'M')||(l_gr_flg) || (l_sfe_inc_flg!=0))
			{
				chr_l_validmsgfound = 'F';
				strcpy(chr_l_msg_no, APL_NULL_STRING);
				strcpy(chr_l_mesg_body, APL_NULL_STRING);
				int_l_sferefno_count=0;
				int_l_count=0;
				while (!feof(fl_incmsg))
				{
					

					memset(chr_l_temp_str1, APL_NULL_CHAR, 71);
					memset(chr_l_str1, APL_NULL_CHAR, LINERR_LENGTH);
           		
                     fgets(chr_l_temp_str1,70,fl_incmsg);
                     chr_l_temp_str1[strlen(chr_l_temp_str1)-1]='\0';
							if ((int_l_sferefno_count==0) && (strcmp(chr_g_sfe_refno,APL_NULL_STRING)==0) && (l_sfe_inc_flg==1))
							{
								
								memset(chr_g_sfe_refno,APL_NULL_CHAR,11);
								strncpy(chr_g_sfe_refno,chr_l_temp_str1,10);
								chr_g_sfe_refno[10] = APL_NULL_CHAR;
								printf("\n AFTER SETTING VALUE FOR chr_g_sfe_refno .......|%s|..... \n",chr_g_sfe_refno);
								int_l_sferefno_count=1;
							}
		     printf("\n ******** chr_l_temp_str1 is |%s| ****** \n",chr_l_temp_str1);
					strncpy(chr_l_str1, chr_l_temp_str1, ISO_LINERR_LENGTH - 1);
					strcat(strcat(chr_l_mesg_body, chr_l_str1), "\n");
					int_l_count++;
				
					if((l_sfe_inc_flg==1) && (int_l_count==2))		
					{
                  memset(chr_h_repair_flg,APL_NULL_CHAR,2);
                  memset(chr_h_manual_trd_flg,APL_NULL_CHAR,2);
						strcpy(chr_l_temp_str2,chr_l_temp_str1);
						strtok_r(chr_l_temp_str2,"|",&a);
						strcpy(chr_h_repair_flg,strtok_r(NULL,"|",&a));
						strtok_r(NULL,"|",&a);
						strcpy(chr_h_manual_trd_flg,strtok_r(NULL,"|",&a));
					}
					
					if (int_l_count < HEADERLINES) 
					{
   		     	 	if (  !strcmp(chr_l_str1, "-") )
      		   	{
            			fprintf(fl_userlog, "------------------------------------------------------------\n");
            			fprintf(fl_userlog, chr_l_mesg_body);
            			fprintf(fl_userlog, "------------------------------------------------------------\n");
            			fprintf(fl_userlog,"HEADER NOT IN PROPER FORMAT.MESSAGE REJECTED.\n");

							

							strcpy(chr_g_msg_sts, "RJT");
							strcpy(chr_g_settle_dt,APL_NULL_STRING);   

							if ( APL_FAILURE == MS_Mod_IncMsgSts(chr_g_msg_sts,
																"HEADER NOT IN PROPER FORMAT", 
																 chr_g_str_client, l_debug_info_ptr) )
							{
								CO_ProcMonitor(APL_OUT_FILE, 
											"Failed to insert into IINMSGRP.\n", 
											NULL, NULL);
							}

						  

						  memset(chr_l_buf2, APL_NULL_CHAR , 100);

						  /*Commented by kotubabu for Linux Migration
						  #ifdef OS_UNIX*/
							  sprintf(chr_l_buf2, "cp %s %s ",chr_fl_name, chr_l_incmsgarchdir);
						  /*#endif*/

						  system(chr_l_buf2);

						  memset(chr_l_buf2, APL_NULL_CHAR , 100);

						  /*Commented by kotubabu for Linux Migration
						  #ifdef OS_UNIX*/
							  sprintf(chr_l_buf2, "rm -f %s ",chr_fl_name);
						  /*#endif*/

						  system(chr_l_buf2);

						  memset(chr_l_buf2,APL_NULL_CHAR, 100);

						  /*Commented by kotubabu for Linux Migration
						  #ifdef OS_UNIX*/
							  sprintf(chr_l_buf2, "rm -f %s ",chr_fl_name2);
						  /*#endif*/

						  system(chr_l_buf2);

						  fclose(fl_incmsg);
	
						  
         			  if(l_sfe_inc_flg==1)
         			  {
         		      	if((!strcmp(chr_g_msg_sts,"RJT")) ||  (!strcmp(chr_g_msg_sts,"RJO")))
               			{
                      			fprintf(fl_userlog,
                           			   "HEADER LINES NOT IN PROPER FORMAT\n");
                  			if(APL_FAILURE==MS_Mod_IncMsgSts("010",
                        				                       "DUMMY ROW FOR RESP",
                              	   		                 NULL,l_debug_info_ptr))
                  			{
                      			fprintf(fl_userlog,
                           			  "Could not insert chr_rjt response in iinmsgrp table %s:%s\n",
                              			chr_g_sfe_refno,chr_g_msgfile_name);
                  			}
               			}
							}
           	   	  continue; 
           			}
					}
				
					if ((!strcmp(chr_l_msg_no,"520"))
						 	||	(!strcmp(chr_l_msg_no,"521"))
					 		||	(!strcmp(chr_l_msg_no,"522"))
					 		||	(!strcmp(chr_l_msg_no,"523")) 
					 		||	(!strcmp(chr_l_msg_no,"592"))
							|| (!strcmp(chr_l_msg_no,"540"))
							|| (!strcmp(chr_l_msg_no,"541"))
							|| (!strcmp(chr_l_msg_no,"542"))
							|| (!strcmp(chr_l_msg_no,"543"))
							|| ((l_rus_flg) 
								&& ((!strcmp(chr_l_msg_no,"530")) 
									|| (!strcmp(chr_l_msg_no,"532"))
									||(!strcmp(chr_l_msg_no,I_MSGNO_544))									
									||(!strcmp(chr_l_msg_no,I_MSGNO_546))))
							|| ((l_gr_536_flg) 
								&& (!strcmp(chr_l_msg_no,"536")))
							|| ((l_537_548_flg) 
								&& (!strcmp(chr_l_msg_no,"548")||(!strcmp(chr_l_msg_no,"537")))))
														
					{
						memset(chr_g_new_msg_no,APL_NULL_CHAR,7);
					   strcpy(chr_g_new_msg_no,chr_l_msg_no);
						chr_l_validmsgfound = 'T';
						continue;
					}

					
				  
					  for (i = 0; i< 3 ; i++)
					  {
						  chr_l_msg_no[i]    = chr_l_str1[i];
				     }
				    
				  
					
				}	
			}	
			rewind(fl_incmsg);
			fflush(fl_incmsg);

							printf("\n chr_g_msgfile_name 7.3 is |%s|\n",chr_g_msgfile_name);
			if(chr_l_validmsgfound == 'T')
			{
				if ( !strcmp(chr_l_msg_no,"520") || !strcmp(chr_l_msg_no,"521") ||
					  !strcmp(chr_l_msg_no,"522") || !strcmp(chr_l_msg_no,"523") )
				{
					strcpy(chr_g_msg_no,"52x");
				}
				else if ( !strcmp(chr_l_msg_no,"540") || !strcmp(chr_l_msg_no,"541") ||
              			!strcmp(chr_l_msg_no,"542") || !strcmp(chr_l_msg_no,"543") )
             {
                  strcpy(chr_g_msg_no,"54N");
             }
   
			 	else if ( ( l_rus_flg ) && (!strcmp(chr_l_msg_no,"530") ||
							  ! strcmp(chr_l_msg_no,"532")) )
				{
					  strcpy(chr_g_msg_no,"53x");
			 	}
			 	else if (( l_rus_flg ) && (!strcmp(chr_l_msg_no,I_MSGNO_544) ||
									! strcmp(chr_l_msg_no,I_MSGNO_546)) )
			 	{
						strcpy(chr_g_msg_no,"54S");
			 	}
  
				
				else if ((l_gr_536_flg) && (strcmp(chr_l_msg_no,"536")==0))
				{
					strcpy(chr_g_msg_no,"536");
				}
				
				
				else if ((l_537_548_flg) && ((strcmp(chr_l_msg_no,"537")==0)||(strcmp(chr_l_msg_no,"548")==0)))
				{
					strcpy(chr_g_msg_no,chr_l_msg_no);
				}
				
			else
				{
					strcpy(chr_g_msg_no,"592");
				}
			}
			else 
			{
				strcpy(chr_g_msg_no,"XXX");
			}

			
			
			if (chr_l_validmsgfound == 'F')
			{
				 fprintf(fl_userlog, "------------------------------------------------------------\n");
				 fprintf(fl_userlog, chr_l_mesg_body);
				 fprintf(fl_userlog, "------------------------------------------------------------\n");
				fprintf(fl_userlog,"Message File %s Rejected As Invalid Message Number\n",chr_fl_name); 

				strcpy(chr_g_msg_sts, "RJT");

				strcpy(chr_g_settle_dt,APL_NULL_STRING);   
				if ( APL_FAILURE == MS_Mod_IncMsgSts("RJT", "INVALID MESSAGE NUMBER", 
																chr_g_str_client, l_debug_info_ptr) )
				{
					CO_ProcMonitor(APL_OUT_FILE, "Failed to insert into IINMSGRP.\n",
								NULL, NULL);
				}

				

				memset(chr_l_buf2, APL_NULL_CHAR , 100);

				/*Commented by kotubabu for Linux Migration
				#ifdef OS_UNIX*/
					sprintf(chr_l_buf2, "cp %s %s ",chr_fl_name, chr_l_incmsgarchdir);
				/*#endif*/

				system(chr_l_buf2);

				memset(chr_l_buf2, APL_NULL_CHAR , 100);

				/*Commented by kotubabu for Linux Migration
				#ifdef OS_UNIX*/
					sprintf(chr_l_buf2, "rm -f %s ",chr_fl_name);
				/*#endif*/

				system(chr_l_buf2);

				memset(chr_l_buf2,APL_NULL_CHAR, 100);

				/*Commented by kotubabu for Linux Migration
				#ifdef OS_UNIX*/
					sprintf(chr_l_buf2, "rm -f %s ",chr_fl_name2);
				/*#endif*/

				system(chr_l_buf2);

				fclose(fl_incmsg);
			}

			if (	(chr_l_validmsgfound == 'T')
					|| (chr_l_validmsgfound == APL_NULL_CHAR )	)
			{
							printf("\n chr_g_msgfile_name 7.2 is |%s|\n",chr_g_msgfile_name);
            
            strcpy(l_progseqnum_struct_h->sequencename ,DEALMS_LINK_SEQ_NAME);
            int_g_seq_num = CO_RtvNxtSeqNum_OraSeq(l_progseqnum_struct_h , l_debug_info_ptr);
            if (APL_FAILURE == int_g_seq_num)
            {
               fprintf(fl_userlog,"Failed To Get The Next Sequence Number For CMSGLINK\n");
               APL_GOBACK_FAIL
            }
            
					strcpy(h_swift_msg_no,chr_l_msg_no);					

					
					
					if 	((!strcmp(h_swift_msg_no,I_MSGNO_520))
							|| (!strcmp(h_swift_msg_no,I_MSGNO_521))
							|| (!strcmp(h_swift_msg_no,I_MSGNO_522))
							|| (!strcmp(h_swift_msg_no,I_MSGNO_523))
						)
					{
						
						fprintf(fl_userlog,"Starting To Process 52x Message h_file %s\n",chr_fl_name);
            			fprintf(fl_userlog, "------------------------------------------------------------\n");
            			fprintf(fl_userlog, chr_l_mesg_body);
            			fprintf(fl_userlog, "------------------------------------------------------------\n");

						

               if ( !strcmp(l_mt_core_sys_params_struct_h.ord_proc_ind ,"Y") )
               {
                   if (APL_FAILURE == MS_Proc_IncMsg52xOrd(fl_incmsg,
                                                  h_swift_msg_no,
																  chr_h_repair_flg,
																  chr_h_manual_trd_flg,
                                                  fl_userlog,
                                                  p_fl_techlog,
                                                  chr_fl_name,
                                                  fl_repairrpt,
                                                  chr_l_mesg_body,
                                                  p_intlenv_data_struct_h,
                                                  l_debug_info_ptr) )
                  {
                     fprintf(fl_userlog,"Failed To Process 52x Message h_file %s\n",chr_fl_name);
                     fclose(fl_incmsg);

                     fprintf(fl_userlog,"-----------------------------------------------------------------------------------\n");
                  }
                  else
                  {
                     fprintf(fl_userlog,"Processed Message %s successfully\n",chr_fl_name);
                     fclose(fl_incmsg);
                     fprintf(fl_userlog,"-----------------------------------------------------------------------------------\n");
                  }
               }
               else
               {
			 			fprintf(fl_userlog,"Before calling MS_Proc_IncMsg52x\n");
						if (APL_FAILURE == MS_Proc_IncMsg52x(fl_incmsg,
																  h_swift_msg_no,
																  chr_h_repair_flg,
																  chr_h_manual_trd_flg,
																  fl_userlog,
																  p_fl_techlog,
																  chr_fl_name,	
																  fl_repairrpt,
																  chr_l_mesg_body,
																  p_intlenv_data_struct_h,
																  l_debug_info_ptr) )
						{
							fprintf(fl_userlog,"Failed To Process 52x Message h_file %s\n",chr_fl_name);
							fclose(fl_incmsg);

							fprintf(fl_userlog,"-----------------------------------------------------------------------------------\n");
						}
						else
						{
							fprintf(fl_userlog,"Processed Message %s successfully\n",chr_fl_name);
							fclose(fl_incmsg);
							fprintf(fl_userlog,"-----------------------------------------------------------------------------------\n");
						}
			 			fprintf(fl_userlog,"After calling MS_Proc_IncMsg52x\n");
					}
						

				

						printf("\n chr_g_msgfile_name 3 is |%s|\n",chr_g_msgfile_name);
						if ( APL_FAILURE == MS_Mod_IncMsgSts(chr_g_msg_sts,chr_g_rej_reas,chr_g_str_client, l_debug_info_ptr ))
						{
							CO_ProcMonitor(APL_OUT_FILE, 
										"Failed to insert into IINMSGRP.\n", NULL, NULL);
						}
						
                  if ((!strcmp(chr_g_msg_sts,"RJO"))||(!strcmp(chr_g_msg_sts,"RJT")))
						{
							if(((*l_debug_info_ptr) != NULL) && ((*l_debug_info_ptr)->msg != NULL))
							{
								printf("\n\n\n\nstring|%s|\n\n\n",(**l_debug_info_ptr).msg);
								
									strncpy(chr_l_temp_errmsg,(**l_debug_info_ptr).msg,39);
							}
							printf("\n chr_g_msgfile_name 4 is |%s|\n",chr_g_msgfile_name);
							if ( APL_FAILURE == MS_Mod_IncMsgSts(chr_g_msg_sts,chr_l_temp_errmsg, chr_g_str_client , l_debug_info_ptr) )
							{
								 CO_ProcMonitor(APL_OUT_FILE,"Failed to insert into IINMSGRP.\n", NULL, NULL);
							}
						}
						

						CO_ProcMonitor(p_fl_techlog, APL_NULL_STRING, l_debug_info_ptr, 
								   (INTL_ENV_DATA_STRUCT_H *)NULL);

						

						CO_FreeErrLst(l_debug_info_ptr);

						strcpy(h_ora_rowid,p_ora_rowid);
						strcpy(chr_l_stat_info,"Processed File ");				
						strncat(chr_l_stat_info,chr_fl_name,55);
						chr_l_stat_info[70]='\0';

						EXEC SQL UPDATE SYS_BATCHPROC
									SET STAT_DET = :chr_l_stat_info
						WHERE ROWID = :h_ora_rowid;
						IS_ANY_ORA_ERROR					

						

						

						memset(chr_l_buf2, APL_NULL_CHAR , 100);
                        /*Commented by kotubabu for Linux Migration						
						#ifdef OS_UNIX*/
							sprintf(chr_l_buf2, "cp %s %s ",chr_fl_name, chr_l_incmsgarchdir);
						/*#endif*/
						system(chr_l_buf2);

						

						memset(chr_l_buf2, APL_NULL_CHAR , 100);
						/*Commented by kotubabu for Linux Migration
						#ifdef OS_UNIX*/
							sprintf(chr_l_buf2, "rm -f %s ",chr_fl_name);
						/*#endif*/
						system(chr_l_buf2);

						memset(chr_l_buf2,APL_NULL_CHAR, 100);
						/*Commented by kotubabu for Linux Migration
						#ifdef OS_UNIX*/
							sprintf(chr_l_buf2, "rm -f %s ",chr_fl_name2);
						/*#endif*/
						system(chr_l_buf2);
					}																						

					
					if ((!strcmp(h_swift_msg_no,I_MSGNO_540))
                    || (!strcmp(h_swift_msg_no,I_MSGNO_541))
                    || (!strcmp(h_swift_msg_no,I_MSGNO_542))
                    || (!strcmp(h_swift_msg_no,I_MSGNO_543))
                  )
					{
							printf("\n chr_g_msgfile_name 7.1 is |%s|\n",chr_g_msgfile_name);

               
               memset(&l_ms_gen_struct_h,NULL,sizeof(MS_GEN_STRUCT_H)); 
               memset(&l_ms_54x_struct_h,NULL,sizeof(MS_54X_STRUCT_H) );
               memset (&l_ms_inc_msg_struct_h,NULL,sizeof(MS_INC_MSG_STRUCT_H));
               memset(&l_dl_msglink_struct_h,NULL,sizeof(DL_MSGLINK_STRUCT_H));

               

					
			 		fprintf(fl_userlog,"Before calling MS_Proc_IncMsg54xParse chr_g_msgfile_name is |%s|\n",chr_g_msgfile_name);
							printf("\n chr_g_msgfile_name 7.1.1 is |%s|\n",chr_g_msgfile_name);
					if(APL_FAILURE == MS_Proc_IncMsg54xParse(	fl_incmsg,
 				            	                    	h_swift_msg_no,
            				                       	&l_ms_54x_struct_h,
                                  				  	&h_rep_seq_struct,
																&h_inc_linkage_info,
                				                    	&h_tot_quantity,
                                   				 	fl_userlog,
                                    				p_fl_techlog,
                                    				&int_retstat,
																&l_ms_gen_struct_h,
                                    				p_intlenv_data_struct_h,
                                    				l_debug_info_ptr))
						{
							printf("\n chr_g_msgfile_name 7.1.2 is |%s|\n",chr_g_msgfile_name);
 					    	fprintf(fl_userlog,"Failed to Parse 54x msg\n");
					
							printf("\n chr_g_msgfile_name 5 is |%s|\n",chr_g_msgfile_name);
                  if ( APL_FAILURE == MS_Mod_IncMsgSts(chr_g_msg_sts, APL_NULL_STRING, chr_g_str_client, l_debug_info_ptr) )
                  {
                     CO_ProcMonitor(APL_OUT_FILE,
                              "Failed to insert into IINMSGRP.\n", NULL, NULL);
                  }
                  if ((!strcmp(chr_g_msg_sts,"RJO"))||(!strcmp(chr_g_msg_sts,"RJT")))
                  {
							if(*l_debug_info_ptr )	
							strncpy(chr_l_temp_errmsg,(**l_debug_info_ptr).msg,39);
							printf("\n chr_g_msgfile_name 6 is |%s|\n",chr_g_msgfile_name);
                     if ( APL_FAILURE == MS_Mod_IncMsgSts(chr_g_msg_sts,chr_l_temp_errmsg , chr_g_str_client, l_debug_info_ptr) )
                     {
                         CO_ProcMonitor(APL_OUT_FILE,"Failed to insert into IINMSGRP.\n", NULL, NULL);
                     }
                  }
                  

                  CO_ProcMonitor(p_fl_techlog, APL_NULL_STRING, l_debug_info_ptr,
                           (INTL_ENV_DATA_STRUCT_H *)NULL);

                  

                  CO_FreeErrLst(l_debug_info_ptr);

                  strcpy(h_ora_rowid,p_ora_rowid);
                  strcpy(chr_l_stat_info,"Processed File ");
                  strncat(chr_l_stat_info,chr_fl_name,55);
						chr_l_stat_info[70]='\0';

                  EXEC SQL UPDATE SYS_BATCHPROC
                           SET STAT_DET = :chr_l_stat_info
                  WHERE ROWID = :h_ora_rowid;
                  IS_ANY_ORA_ERROR

                  

                  

                  memset(chr_l_buf2, APL_NULL_CHAR , 100);
				  /*Commented by kotubabu for Linux Migration
                  #ifdef OS_UNIX*/
                     sprintf(chr_l_buf2, "cp %s %s ",chr_fl_name, chr_l_incmsgarchdir);
                  //#endif
                  system(chr_l_buf2);

                  

                  memset(chr_l_buf2, APL_NULL_CHAR , 100);
				  /*Commented by kotubabu for Linux Migration
                  #ifdef OS_UNIX*/
                     sprintf(chr_l_buf2, "rm -f %s ",chr_fl_name);
                  //#endif
                  system(chr_l_buf2);

						 memset(chr_l_buf2,APL_NULL_CHAR, 100);
						 /*Commented by kotubabu for Linux Migration
                  #ifdef OS_UNIX*/
                     sprintf(chr_l_buf2, "rm -f %s ",chr_fl_name2);
                  //#endif
                  system(chr_l_buf2);

         

			if(l_sfe_inc_flg==1)
			{
         	if ((!strcmp(chr_g_msg_no,"52x")) ||(!strcmp(chr_g_msg_no,"54N")))
         	{
            	if((!strcmp(chr_g_msg_sts,"RJT")) ||  (!strcmp(chr_g_msg_sts,"RJO")))
            	{
              	 	if(APL_FAILURE==MS_Mod_IncMsgSts("010",
                 	                             "DUMMY ROW FOR RESP",
                  	                             NULL,l_debug_info_ptr))
               	{	
                  	 fprintf(fl_userlog,
                     	      "Could not insert chr_rjt response row in iinmsgrp table %s:%s\n",
                        	   chr_g_sfe_refno,chr_g_msgfile_name);
               	}
            	}
         	}
         	else if((!strcmp(chr_g_msg_no,"592")) ||(!strcmp(chr_g_msg_no,"54C")))
         	{
            	if((!strcmp(chr_g_msg_sts,"RJT")) || (!strcmp(chr_g_msg_sts,"RJO")) || (!strcmp(chr_g_msg_sts,"RPR")))
            	{
               	if(APL_FAILURE==MS_Mod_IncMsgSts("010",
                	                              "DUMMY ROW FOR RESP",
                  	                             NULL,l_debug_info_ptr))
               	{
                  	 fprintf(fl_userlog,
                     	      "Could not insert chr_rjt response row in iinmsgrp table %s:%s\n",
                        	   chr_g_sfe_refno,chr_g_msgfile_name);
               	}
            	}
         	}
			}
         EXEC SQL COMMIT;
         IS_ANY_ORA_ERROR
         
			continue;
			}
			 		fprintf(fl_userlog,"After calling MS_Proc_IncMsg54xParse chr_g_msgfile_name is |%s|\n",chr_g_msgfile_name);
							printf("\n chr_g_msgfile_name 7.1.3 is |%s|\n",chr_g_msgfile_name);
					if(l_ms_gen_struct_h.new_ind == 1)
						{
								strcpy(chr_g_msg_no,"54N");
								strcpy(l_ms_inc_msg_struct_h.h_deal_code,l_ms_54x_struct_h.h_deal_code);
 			     				strcpy(l_ms_inc_msg_struct_h.swift_msg_no,l_ms_54x_struct_h.swift_msg_no);
      						strcpy(l_ms_inc_msg_struct_h.setl_dt,l_ms_54x_struct_h.setl_dt);
      						strcpy(l_ms_inc_msg_struct_h.indentity_no,l_ms_54x_struct_h.indentity_no);
      						strcpy(l_ms_inc_msg_struct_h.addindentity_no,l_ms_54x_struct_h.addindentity_no);
      						strcpy(l_ms_inc_msg_struct_h.dl_dt,l_ms_54x_struct_h.dl_dt);
      						strcpy(l_ms_inc_msg_struct_h.dl_loc,l_ms_54x_struct_h.dl_loc);
      						strcpy(l_ms_inc_msg_struct_h.instr_name,l_ms_54x_struct_h.instr_name);
      						strcpy(l_ms_inc_msg_struct_h.instr_code,l_ms_54x_struct_h.instr_code);
      						strcpy(l_ms_inc_msg_struct_h.inst_client,l_ms_54x_struct_h.inst_client);
      						strcpy(l_ms_inc_msg_struct_h.inst_clnt_clr_name,l_ms_54x_struct_h.inst_clnt_clr_name);
      						strcpy(l_ms_inc_msg_struct_h.cp_clt,l_ms_54x_struct_h.cp_clt);
      						strcpy(l_ms_inc_msg_struct_h.countclt_cname,l_ms_54x_struct_h.countclt_cname);
      						strcpy(l_ms_inc_msg_struct_h.domestic_cpclt,l_ms_54x_struct_h.domestic_cpclt);
      						strcpy(l_ms_inc_msg_struct_h.domcpclt_cd_cname,l_ms_54x_struct_h.domcpclt_cd_cname);
      						strcpy(l_ms_inc_msg_struct_h.clientof,l_ms_54x_struct_h.clientof);
      						strcpy(l_ms_inc_msg_struct_h.currency_code,l_ms_54x_struct_h.currency_code);
      						l_ms_inc_msg_struct_h.amount=l_ms_54x_struct_h.amount;
      						strcpy(l_ms_inc_msg_struct_h.info,l_ms_54x_struct_h.info);
      						strcpy(l_ms_inc_msg_struct_h.gl_client,l_ms_54x_struct_h.gl_client);
      						strcpy(l_ms_inc_msg_struct_h.dl_class,l_ms_54x_struct_h.dl_class);
								
								strcpy(l_ms_inc_msg_struct_h.fx_adv_ind,l_ms_54x_struct_h.fx_adv_ind);
								strcpy(l_ms_inc_msg_struct_h.partial_ind_a,l_ms_54x_struct_h.partial_ind_a);
								l_ms_inc_msg_struct_h.brokercomm=l_ms_54x_struct_h.brokercomm;
								
								l_ms_inc_msg_struct_h.count=l_ms_54x_struct_h.count;	
								strcpy(l_ms_inc_msg_struct_h.place_cd,l_ms_54x_struct_h.place_cd);	
								strcpy(l_ms_inc_msg_struct_h.description,l_ms_54x_struct_h.description);
								strcpy(l_ms_inc_msg_struct_h.psetparty,l_ms_54x_struct_h.psetparty);
								strcpy(l_ms_inc_msg_struct_h.clientof_cname,l_ms_54x_struct_h.clientof_cname);	
								
								strcpy(l_ms_inc_msg_struct_h.interprty,l_ms_54x_struct_h.interprty);
								strcpy(l_ms_inc_msg_struct_h.interprtynm,l_ms_54x_struct_h.interprtynm);
								
								
								
								strcpy(l_ms_inc_msg_struct_h.ex_arena,l_ms_54x_struct_h.ex_arena);
								
								strcpy(l_ms_inc_msg_struct_h.fxccy,l_ms_54x_struct_h.fxccy); 
								strcpy(l_ms_inc_msg_struct_h.h_rpr_ind,chr_h_repair_flg); 
								strcpy(l_ms_inc_msg_struct_h.manual_ind_dl_flg,chr_h_manual_trd_flg); 
								strcpy(l_ms_inc_msg_struct_h.lcl_identno,l_ms_54x_struct_h.lcl_identno); 
			
								strcpy(l_ms_inc_msg_struct_h.loc_chng_ind,l_ms_54x_struct_h.loc_chng_ind); 
								l_ms_inc_msg_struct_h.h_stld_loc=l_ms_54x_struct_h.h_stld_loc; 
								strcpy(l_ms_inc_msg_struct_h.h_related_indentity_no,l_ms_54x_struct_h.h_related_indentity_no); 

						 	if ( !strcmp(l_mt_core_sys_params_struct_h.ord_proc_ind ,"Y") )
               		{
                   		if (APL_FAILURE == MS_Proc_IncMsg54xOrd(fl_incmsg,
                                                  				 h_swift_msg_no,
                                                  				 fl_userlog,
                                                 				 p_fl_techlog,
                                                  				 chr_fl_name,
																				 &l_ms_inc_msg_struct_h,
																				 &h_rep_seq_struct,	
																				 &h_inc_linkage_info,	
                                                  				 fl_repairrpt,
                                                  				 chr_l_mesg_body,
                                                  				 p_intlenv_data_struct_h,
                                                  				 l_debug_info_ptr))
                  		{
                     		fprintf(fl_userlog,"Failed To Process 54x Message h_file %s\n",chr_fl_name);
                     		fclose(fl_incmsg);

 			                  fprintf(fl_userlog,"-----------------------------------------------------------------------------------\n");
                  		}
                  	else
                  		{
                     	fprintf(fl_userlog,"Processed Message %s successfully\n",chr_fl_name);
                     	fclose(fl_incmsg);
                     	fprintf(fl_userlog,"-----------------------------------------------------------------------------------\n");
                  		}
               		}
               else
               {
			 				fprintf(fl_userlog,"Before calling MS_Proc_IncMsg54x\n");
                  	if (APL_FAILURE == MS_Proc_IncMsg54x(fl_incmsg,
                                                  		h_swift_msg_no,
                                                  		fl_userlog,
                                                  		p_fl_techlog,
                                                  		chr_fl_name,
																		&l_ms_inc_msg_struct_h,
																		&h_rep_seq_struct,	
																		&h_inc_linkage_info,
                                                  		fl_repairrpt,
                                                  		chr_l_mesg_body,
																		&l_ms_gen_struct_h.no_of_dl,									
                     			                    		p_intlenv_data_struct_h,
                                                  		l_debug_info_ptr) )
                  	{
                    	 fprintf(fl_userlog,"Failed To Process 54x Message h_file %s\n",chr_fl_name);
                      fclose(fl_incmsg);

 	                    fprintf(fl_userlog,"-----------------------------------------------------------------------------------\n");
   	               }
      	            else
         	         {
            	         fprintf(fl_userlog,"Processed Message %s successfully\n",chr_fl_name);
               	      fclose(fl_incmsg);
                  	   fprintf(fl_userlog,"-----------------------------------------------------------------------------------\n");
                  	}
			 				fprintf(fl_userlog,"After calling MS_Proc_IncMsg54x\n");
               }
					APL_FREE(h_rep_seq_struct);
							printf("\n chr_g_msgfile_name 7.1.4 is |%s|\n",chr_g_msgfile_name);
				}
				else if (l_ms_gen_struct_h.canc_ind == 1)
						{
						strcpy(chr_g_msg_no,"54C");
						EXEC SQL VAR h_59x_struct.instr_isin_no IS STRING;
				  	   EXEC SQL VAR h_59x_struct.instr_name IS STRING;
						EXEC SQL VAR l_ms_gen_struct_h.h_596no1_data IS STRING;
						EXEC SQL VAR chr_l_trd_date IS STRING;

						EXEC SQL SELECT INSTR_ISIN,INSTR_NAME
                  INTO :h_59x_struct.instr_isin_no,:h_59x_struct.instr_name
                  FROM MT_INSTRUMENT
                  WHERE instr_code = RTRIM(:l_ms_54x_struct_h.instr_code);

					   
                  IS_ANY_ORA_ERROR
						
                  if(sqlca.sqlcode==1403)
                  {
                     strcpy(h_59x_struct.instr_isin_no,chr_g_isin);

                  }
                  
						CO_NewLine(h_59x_struct.instr_name);				
						 strcpy(h_59x_struct.txn_date,l_ms_54x_struct_h.setl_dt); 	
						 strcpy(h_59x_struct.can_swift_msg_no,l_ms_54x_struct_h.indentity_no);
						 strcpy(h_59x_struct.txn_indentity_no,l_ms_54x_struct_h.addindentity_no);
						 strcpy(h_59x_struct.deal_cd,l_ms_54x_struct_h.swift_msg_no);
						 strcpy(h_59x_struct.txn_clt,h_rep_seq_struct->client);
						  
						 strncpy(h_59x_struct.txn_clnt_clr_name,h_rep_seq_struct->clnt_name,35);
						 h_59x_struct.txn_clnt_clr_name[35] = APL_NULL_CHAR;
						 strcpy(h_59x_struct.dl_dt,l_ms_54x_struct_h.dl_dt);
						 strcpy(h_59x_struct.instr_class_val,l_ms_54x_struct_h.instr_code);
						 strcpy(h_59x_struct.domestic_cp,l_ms_54x_struct_h.domestic_cpclt);
						 strncpy(h_59x_struct.domcpdetail,l_ms_54x_struct_h.domcpclt_cd_cname,35);
						  
						 h_59x_struct.domcpdetail[35] = APL_NULL_CHAR;
						 strcpy(h_59x_struct.currency_value,l_ms_54x_struct_h.currency_code);		

						
						
						if (strlen(h_59x_struct.txn_date) >0)
						{
							EXEC SQL SELECT 
								TO_CHAR(TO_DATE(:h_59x_struct.txn_date,'DD/MM/YYYY HH:MI:SS'),'YYMMDD') 
								INTO :l_ms_gen_struct_h.h_596no1_data
								FROM DUAL;

							IS_ANY_ORA_ERROR
						}
						else
                  {
                     strcpy(l_ms_gen_struct_h.h_596no1_data, APL_NULL_STRING);
                  }
						if  (strlen(h_59x_struct.dl_dt) >0)
                  {	
							EXEC SQL SELECT 
								TO_CHAR(TO_DATE(:h_59x_struct.dl_dt,'DD/MM/YYYY HH:MI:SS'),'YYMMDD') 
                  		INTO :chr_l_trd_date
                  		FROM DUAL;

							IS_ANY_ORA_ERROR
						}
						else
                  {
                     strcpy(chr_l_trd_date, APL_NULL_STRING);
                  }
   					strcat(l_ms_gen_struct_h.h_596no1_data,";");
   					strcat(l_ms_gen_struct_h.h_596no1_data,chr_l_trd_date);
   					strcat(l_ms_gen_struct_h.h_596no1_data,";");
   					strcat(l_ms_gen_struct_h.h_596no1_data,h_59x_struct.instr_isin_no);
   					strcat(l_ms_gen_struct_h.h_596no1_data,";");
   					strncat(l_ms_gen_struct_h.h_596no1_data,h_59x_struct.instr_name,35);
   					strcat(l_ms_gen_struct_h.h_596no1_data,";");
   					strcat(l_ms_gen_struct_h.h_596no1_data,l_ms_gen_struct_h.h_instr_typeval); 
   					strcat(l_ms_gen_struct_h.h_596no1_data,";");
   					strcat(l_ms_gen_struct_h.h_596no1_data,h_59x_struct.domestic_cp);
   					strcat(l_ms_gen_struct_h.h_596no1_data,";");
   					strncat(l_ms_gen_struct_h.h_596no1_data,h_59x_struct.domcpdetail,35);
   					strcat(l_ms_gen_struct_h.h_596no1_data,";");
   					strcat(l_ms_gen_struct_h.h_596no1_data,l_ms_gen_struct_h.paramcurrency);
   					strcat(l_ms_gen_struct_h.h_596no1_data,";");
   					strcat(l_ms_gen_struct_h.h_596no1_data,h_59x_struct.deal_cd);
   					strcat(l_ms_gen_struct_h.h_596no1_data,";");
						strcat(l_ms_gen_struct_h.h_596no1_data,l_ms_54x_struct_h.cp_clt);
						strcat(l_ms_gen_struct_h.h_596no1_data,";");
						strncat(l_ms_gen_struct_h.h_596no1_data,l_ms_54x_struct_h.countclt_cname,35);
						strcat(l_ms_gen_struct_h.h_596no1_data,";");
						strcat(l_ms_gen_struct_h.h_596no1_data,l_ms_54x_struct_h.dl_class) ;
						strcat(l_ms_gen_struct_h.h_596no1_data,";");


			 			fprintf(fl_userlog,"Before calling MS_Proc_IncMsg54xCanc\n");
						if (APL_FAILURE == MS_Proc_IncMsg54xCanc(fl_incmsg,
                                                  chr_fl_name,
                                                  h_swift_msg_no,
                                                  fl_cancelrpt,
                                                  fl_rejectrpt,
                                                  fl_userlog,
                                                  p_fl_techlog,
																  &h_59x_struct,
                                                  l_ms_54x_struct_h.info,
																  &l_ms_gen_struct_h,
                                                  chr_l_mesg_body,
                                                  p_intlenv_data_struct_h,
                                                  l_debug_info_ptr) )
								 {
								 
								 
								 if (!strcmp(chr_g_msg_sts,"RPR"))
									 strcpy(chr_g_msg_sts,"RJT");
         	            fprintf(fl_userlog,"Failed To Process 54x Message %s\n",chr_fl_name);
            	         fprintf(fl_userlog,"---------------------------------------------------------\n");
               	      fclose(fl_incmsg);
                  		}
                  else
                  		{
                     	fprintf(fl_userlog,"Processed 54x Message %s  successfully\n",chr_fl_name);
                     	fprintf(fl_userlog,"---------------------------------------------------------\n");
                     	fclose(fl_incmsg);
                  		}
			 					fprintf(fl_userlog,"After calling MS_Proc_IncMsg54xCanc\n");
						}
					 
                   

							printf("\n chr_g_msgfile_name 7 is |%s|\n",chr_g_msgfile_name);
							printf("\n chr_g_sfe_refno 7 is |%s|\n",chr_g_sfe_refno);
                  if ( APL_FAILURE == MS_Mod_IncMsgSts(chr_g_msg_sts,chr_g_rej_reas,chr_g_str_client, l_debug_info_ptr ))
                  {
                     CO_ProcMonitor(APL_OUT_FILE,
                              "Failed to insert into IINMSGRP.\n", NULL, NULL);
                  }
                  if ((!strcmp(chr_g_msg_sts,"RJO"))||(!strcmp(chr_g_msg_sts,"RJT")))
                  {
							
							
							
							
							if(((*l_debug_info_ptr) != NULL) && ((*l_debug_info_ptr)->msg != NULL))
							{
								printf("\n ..... 1 .......");
								
								printf("\n (*l_debug_info_ptr) is |%x|\n",(*l_debug_info_ptr));
								printf("\n (*l_debug_info_ptr)msg is |%x|\n",(*l_debug_info_ptr)->msg);
								printf("\n length of (*l_debug_info_ptr).msg |%d|\n",strlen((*l_debug_info_ptr)->msg));
								printf("\n ..... 2 .......");
								printf("\n (*l_debug_info_ptr).msg |%s|\n",(*l_debug_info_ptr)->msg);
								printf("\n ..... 3 .......");
								strncpy(chr_l_temp_errmsg,(**l_debug_info_ptr).msg,38);
								printf("\n ..... 4 .......");
							} 
							printf("\n chr_g_msgfile_name 8 is |%s|\n",chr_g_msgfile_name);
                     if ( APL_FAILURE == MS_Mod_IncMsgSts(chr_g_msg_sts,chr_l_temp_errmsg , chr_g_str_client, l_debug_info_ptr) )
                     {
                         CO_ProcMonitor(APL_OUT_FILE,"Failed to insert into IINMSGRP.\n", NULL, NULL);
                     }
                  }
                  

                  CO_ProcMonitor(p_fl_techlog, APL_NULL_STRING, l_debug_info_ptr,
                           (INTL_ENV_DATA_STRUCT_H *)NULL);

                  

                  CO_FreeErrLst(l_debug_info_ptr);

                  strcpy(h_ora_rowid,p_ora_rowid);
                  strcpy(chr_l_stat_info,"Processed File ");
                  strncat(chr_l_stat_info,chr_fl_name,55);
						chr_l_stat_info[70]='\0';

                  EXEC SQL UPDATE SYS_BATCHPROC
                           SET STAT_DET = :chr_l_stat_info
                  WHERE ROWID = :h_ora_rowid;
                  IS_ANY_ORA_ERROR

                  

                  

                  memset(chr_l_buf2, APL_NULL_CHAR , 100);
				  /*Added by kotubabu for linux Migration
                  #ifdef OS_UNIX*/
                     sprintf(chr_l_buf2, "cp %s %s ",chr_fl_name, chr_l_incmsgarchdir);
                  //#endif
                  system(chr_l_buf2);

                  

                  memset(chr_l_buf2, APL_NULL_CHAR , 100);
				  /*Added by kotubabu for linux Migration
                  #ifdef OS_UNIX*/
                     sprintf(chr_l_buf2, "rm -f %s ",chr_fl_name);
                  //#endif
                  system(chr_l_buf2);

						 memset(chr_l_buf2,APL_NULL_CHAR, 100);
						 /*Added by kotubabu for linux Migration
                  #ifdef OS_UNIX*/
                     sprintf(chr_l_buf2, "rm -f %s ",chr_fl_name2);
                  //#endif
                  system(chr_l_buf2);

				}

					if (	(!strcmp(h_swift_msg_no,I_MSGNO_592))	)
					{
						
						fprintf(fl_userlog,"Started To Process 592 Message File Name :%s\n",chr_fl_name);
            			fprintf(fl_userlog, "------------------------------------------------------------\n");
            			fprintf(fl_userlog, chr_l_mesg_body);
            			fprintf(fl_userlog, "------------------------------------------------------------\n");

			 			fprintf(fl_userlog,"Before calling MS_Proc_IncMsg59x\n");
						if (APL_FAILURE == MS_Proc_IncMsg59x(fl_incmsg,
																  chr_fl_name,
																  h_swift_msg_no,
																  fl_cancelrpt,	
																  fl_rejectrpt,	  
																  fl_userlog,
																  p_fl_techlog,
																  chr_l_mesg_body,
																  p_intlenv_data_struct_h,
																  l_debug_info_ptr) )
						{
							fprintf(fl_userlog,"Failed To Process 59x Message %s\n",chr_fl_name);
							fprintf(fl_userlog,"---------------------------------------------------------\n");
							fclose(fl_incmsg);
						}
						else
						{
							fprintf(fl_userlog,"Processed 59x Message %s  successfully\n",chr_fl_name);
							fprintf(fl_userlog,"---------------------------------------------------------\n");
							fclose(fl_incmsg);
						}

						

							printf("\n chr_g_msgfile_name 9 is |%s|\n",chr_g_msgfile_name);
						if ( APL_FAILURE == MS_Mod_IncMsgSts(chr_g_msg_sts, 
																	  APL_NULL_STRING, 
																		chr_g_str_client, l_debug_info_ptr) )
						{
							CO_ProcMonitor(APL_OUT_FILE, 
										"Failed to insert into IINMSGRP.\n", NULL, NULL);
						}

						CO_ProcMonitor(p_fl_techlog, APL_NULL_STRING, l_debug_info_ptr, 
									(INTL_ENV_DATA_STRUCT_H *)NULL);

						CO_FreeErrLst(l_debug_info_ptr);

						strcpy(h_ora_rowid,p_ora_rowid);
						strcpy(chr_l_stat_info,"File Processed ");				
						strncat(chr_l_stat_info,chr_fl_name,55);
						chr_l_stat_info[70]='\0';

						EXEC SQL UPDATE SYS_BATCHPROC
									SET STAT_DET = :chr_l_stat_info
						WHERE ROWID = :h_ora_rowid;
						IS_ANY_ORA_ERROR					

						

						
						memset(chr_l_buf2, APL_NULL_CHAR , 100);
						/*Added by kotubabu for linux Migration
						#ifdef OS_UNIX*/
							sprintf(chr_l_buf2, "cp %s %s ",chr_fl_name, chr_l_incmsgarchdir);
						//#endif
						system(chr_l_buf2);

						
						memset(chr_l_buf2, APL_NULL_CHAR , 100);
						/*Added by kotubabu for linux Migration
						#ifdef OS_UNIX*/
							sprintf(chr_l_buf2, "rm -f %s ",chr_fl_name);
						//#endif
						system(chr_l_buf2);
						memset(chr_l_buf2,APL_NULL_CHAR, 100);
						/*Added by kotubabu for linux Migration
						#ifdef OS_UNIX*/
							sprintf(chr_l_buf2, "rm -f %s ",chr_fl_name2);
						//#endif
						system(chr_l_buf2);
					}



				if (     (!strcmp(h_swift_msg_no,I_MSGNO_530))
								|| (!strcmp(h_swift_msg_no,I_MSGNO_532))
								|| (!strcmp(h_swift_msg_no,I_MSGNO_544))
								|| (!strcmp(h_swift_msg_no,I_MSGNO_546))
					)
				{
				
	  			fprintf(fl_userlog,"Starting To Process 53x Message h_file %s\n",chr_fl_name);
	  			fprintf(fl_userlog, "------------------------------------------------------------\n");
				fprintf(fl_userlog, chr_l_mesg_body);
				fprintf(fl_userlog, "------------------------------------------------------------\n");

			 	fprintf(fl_userlog,"Before calling MS_Proc_IncMsg53x\n");
				if (APL_FAILURE == MS_Proc_IncMsg53x(fl_incmsg,
														  	h_swift_msg_no,
														 	fl_userlog,
															p_fl_techlog,
											 			 	chr_fl_name,
											 				fl_53xPendRpt,
															fl_rejectrpt,
								  							fl_repairrpt,
														 	chr_l_mesg_body,
															p_intlenv_data_struct_h,
			  												l_debug_info_ptr) )
  				{
	  				fprintf(fl_userlog,"Failed To Process 53x Message h_file %s\n",chr_fl_name);
	  				fclose(fl_incmsg);

				   fprintf(fl_userlog,"-----------------------------------------------------------------------------------\n");
  				}
  				else
  				{
	  				fprintf(fl_userlog,"Processed Message %s successfully\n",chr_fl_name);
	  				fclose(fl_incmsg);
				  fprintf(fl_userlog,"---------------------------------------------------------------------------------------\n");
  				}

 			


			if(*l_debug_info_ptr)	
				strncpy(chr_l_temp_errmsg,(**l_debug_info_ptr).msg,39);

							printf("\n chr_g_msgfile_name 10 is |%s|\n",chr_g_msgfile_name);
  				if ( APL_FAILURE == MS_Mod_IncMsgSts(chr_g_msg_sts ,
															 chr_l_temp_errmsg, 
														    chr_g_str_client, l_debug_info_ptr) )
  				{			
		 			CO_ProcMonitor(APL_OUT_FILE,
								 "Failed to insert into IINMSGRP.\n", NULL, NULL);
  				} 


  				CO_ProcMonitor(p_fl_techlog, APL_NULL_STRING, l_debug_info_ptr,
							 (INTL_ENV_DATA_STRUCT_H *)NULL);


 				 CO_FreeErrLst(l_debug_info_ptr);
			
  				strcpy(h_ora_rowid,p_ora_rowid);
  				strcpy(chr_l_stat_info,"Processed File ");
  				strncat(chr_l_stat_info,chr_fl_name,55);
				chr_l_stat_info[70]='\0';

  				EXEC SQL UPDATE SYS_BATCHPROC
  				SET STAT_DET = :chr_l_stat_info
				 WHERE ROWID = :h_ora_rowid;
 				IS_ANY_ORA_ERROR

 				

 				

 				memset(chr_l_buf2, APL_NULL_CHAR , 100);
				/*Added by kotubabu for linux Migration
 				#ifdef OS_UNIX*/
 				sprintf(chr_l_buf2, "cp %s %s ",chr_fl_name, chr_l_incmsgarchdir);
 				//#endif
 				system(chr_l_buf2);

				

				 memset(chr_l_buf2, APL_NULL_CHAR , 100);
				 /*Added by kotubabu for linux Migration
 				#ifdef OS_UNIX*/
 				sprintf(chr_l_buf2, "rm -f %s ",chr_fl_name);
			 	//#endif
 				system(chr_l_buf2);

 				memset(chr_l_buf2,APL_NULL_CHAR, 100);
				/*Added by kotubabu for linux Migration
 				#ifdef OS_UNIX*/
 				sprintf(chr_l_buf2, "rm -f %s ",chr_fl_name2);
 				//#endif
 				system(chr_l_buf2);
 			}
				

				
				if (strcmp(h_swift_msg_no,"536")==0)
				{
					
			
						memset(&l_ms_536_struct_h,NULL,sizeof(MS_536_STRUCT_H) );

			 			fprintf(fl_userlog,"Before calling MS_Proc_IncMsg536\n");
						if ( APL_FAILURE  == MS_Proc_IncMsg536(fl_incmsg,
      	         		                             chr_fl_name,
         	            		                       h_swift_msg_no,
            	               		                 chr_l_mesg_body,
																	  &l_ms_536_struct_h,
																	  fl_536log,
                                    					  &int_retstat,
               	                     		        p_intlenv_data_struct_h,
                     	                     		  l_debug_info_ptr ) )
         			{
         				fprintf(fl_userlog,"Failed to Process the 536 msg\n");
						   fclose(fl_incmsg);
         			}
						else
         			{
         				fprintf(fl_userlog," Processed successfully the 536 msg\n");
						   fclose(fl_incmsg);
							EXEC SQL COMMIT;
							IS_ANY_ORA_ERROR
         			}
						
			 			fprintf(fl_userlog,"After calling MS_Proc_IncMsg536\n");


						if( APL_FAILURE == DL_Proc_DFRFSetl (fl_536log,
																	  &int_retstat,
																	  p_intlenv_data_struct_h,
																	  l_debug_info_ptr ) )
						{

							fprintf(fl_userlog,
										"Unsuccessfully returned from DL_Proc_DFRFSetl processtion\n");
						}
						else
						{
							fprintf(fl_userlog,
										"Successfully returned from DL_Proc_DFRFSetl processtion\n");
						}

						
						memset(&l_dl_msglink_struct_h,NULL,sizeof(DL_MSGLINK_STRUCT_H));
         			strcpy(l_dl_msglink_struct_h.h_dl_client,APL_NULL_STRING);
         			strcpy(l_dl_msglink_struct_h.h_indentity_no,APL_NULL_STRING);
         			strcpy(l_dl_msglink_struct_h.h_msg_in_out_ind,"I");
         			strcpy(l_dl_msglink_struct_h.h_swift_msg_no,chr_g_new_msg_no);
         			if (APL_FAILURE == CO_RtvMachDtTime( l_dl_msglink_struct_h.h_new_dt, 
																				l_debug_info_ptr ))
         			{
             			APL_GOBACK_FAIL
         			}
         			strcpy(l_dl_msglink_struct_h.h_information,chr_g_addinfo);
         			l_dl_msglink_struct_h.h_sequence_num=int_g_seq_num;
         			l_dl_msglink_struct_h.h_dlrep_sequencenum=int_l_rpr_seq_num;
         			strncpy(l_dl_msglink_struct_h.h_message_det_a,chr_l_mesg_body,2000);
         			l_dl_msglink_struct_h.h_message_det_a[strlen(l_dl_msglink_struct_h.h_message_det_a)]=APL_NULL_CHAR;
         			if (strlen(chr_l_mesg_body) >2000)
         			{
            			strncpy(l_dl_msglink_struct_h.h_message_det_b,chr_l_mesg_body+2000,2000);
         				l_dl_msglink_struct_h.h_message_det_b[strlen(l_dl_msglink_struct_h.h_message_det_b)]=APL_NULL_CHAR;
         			}
         			if (strlen(chr_l_mesg_body) >4000)
         			{
            			strncpy(l_dl_msglink_struct_h.h_message_det_c,chr_l_mesg_body+4000,2000);
         				l_dl_msglink_struct_h.h_message_det_c[strlen(l_dl_msglink_struct_h.h_message_det_c)]=APL_NULL_CHAR;
         			}
         			if (strlen(chr_l_mesg_body) >6000)
         			{
            			strncpy(l_dl_msglink_struct_h.h_message_det_d,chr_l_mesg_body+6000,2000);
         				l_dl_msglink_struct_h.h_message_det_d[strlen(l_dl_msglink_struct_h.h_message_det_d)]=APL_NULL_CHAR;
         			}
         			if (strlen(chr_l_mesg_body) >8000)
         			{
            			strncpy(l_dl_msglink_struct_h.h_message_det_e,chr_l_mesg_body+8000,2000);
         				l_dl_msglink_struct_h.h_message_det_e[strlen(l_dl_msglink_struct_h.h_message_det_e)]=APL_NULL_CHAR;
         			}
          			strcpy(l_dl_msglink_struct_h.h_place_cd,APL_NULL_STRING);
          			strcpy(l_dl_msglink_struct_h.h_description,APL_NULL_STRING);
          			strcpy(l_dl_msglink_struct_h.h_psetparty,APL_NULL_STRING);
         			if(APL_FAILURE==DL_Mod_DLLinkNew(&l_dl_msglink_struct_h,l_debug_info_ptr))
         			{
            				fprintf(fl_userlog,"Failed To Insert into CMSGLINK Table\n");
         			}
						

                  
						memset(chr_l_isetlrpt_date,APL_NULL_CHAR ,APL_DATE_LEN);
						if ( APL_FAILURE == CO_RtvSysDt(chr_l_isetlrpt_date, l_debug_info_ptr) )
						{
								fprintf(fl_userlog,"Failed To Fetch System Date\n");
								APL_GOBACK_FAIL
						}

						EXEC SQL UPDATE DL_SETLRPT 
									SET REPORT_DT=:l_dl_msglink_struct_h.h_new_dt
									WHERE NAMEOF_FILE=:l_dl_msglink_struct_h.h_information
									AND REPORT_DT = :chr_l_isetlrpt_date;
						IS_ANY_ORA_ERROR

 	                

                  CO_FreeErrLst(l_debug_info_ptr);

                  strcpy(h_ora_rowid,p_ora_rowid);
                  strcpy(chr_l_stat_info,"File Processed ");
                  strncat(chr_l_stat_info,chr_fl_name,55);
                  chr_l_stat_info[70]='\0';

                  EXEC SQL UPDATE SYS_BATCHPROC
                           SET STAT_DET = :chr_l_stat_info
                  WHERE ROWID = :h_ora_rowid;
                  IS_ANY_ORA_ERROR
                  
                  memset(chr_l_buf2, APL_NULL_CHAR , 100);
				  /*Added by kotubabu for linux Migration
                  #ifdef OS_UNIX*/
                     sprintf(chr_l_buf2, "cp %s %s ",chr_fl_name, chr_l_incmsgarchdir);
                  //#endif
                  system(chr_l_buf2);

                  
                  memset(chr_l_buf2, APL_NULL_CHAR , 100);
				  /*Added by kotubabu for linux Migration
                  #ifdef OS_UNIX*/
                     sprintf(chr_l_buf2, "rm -f %s ",chr_fl_name);
                  //#endif
                  system(chr_l_buf2);
                  memset(chr_l_buf2,APL_NULL_CHAR, 100);
				  /*Added by kotubabu for linux Migration
                  #ifdef OS_UNIX*/
                     sprintf(chr_l_buf2, "rm -f %s ",chr_fl_name2);
                  //#endif
                  system(chr_l_buf2);
				}
				

				
				if ((strcmp(h_swift_msg_no,"548")==0) || (strcmp(h_swift_msg_no,"537")==0))
				{
					
			
						memset(&l_ms_537_struct_h,NULL,sizeof(MS_537_STRUCT_H) );

			 			fprintf(fl_userlog,"Before calling MS_Proc_IncMsg537\n");
						if ( APL_FAILURE  == MS_Proc_IncMsg537(fl_incmsg,
      	         		                             chr_fl_name,
         	            		                       h_swift_msg_no,
            	               		                 chr_l_mesg_body,
																	  &l_ms_537_struct_h,
																	  fl_536log,
                                    					  &int_retstat,
               	                     		        p_intlenv_data_struct_h,
                     	                     		  l_debug_info_ptr ) )
         			{
         				fprintf(fl_userlog,"Failed to Process the 537 msg\n");
						   fclose(fl_incmsg);
         			}
						else
         			{
         				fprintf(fl_userlog," Processed successfully the 537 msg\n");
						   fclose(fl_incmsg);
							EXEC SQL COMMIT;
							IS_ANY_ORA_ERROR
         			}
						
			 			fprintf(fl_userlog,"After calling MS_Proc_IncMsg537\n");


						
						memset(&l_dl_msglink_struct_h,NULL,sizeof(DL_MSGLINK_STRUCT_H));
         			strcpy(l_dl_msglink_struct_h.h_dl_client,APL_NULL_STRING);
         			strcpy(l_dl_msglink_struct_h.h_indentity_no,APL_NULL_STRING);
         			strcpy(l_dl_msglink_struct_h.h_msg_in_out_ind,"I");
         			strcpy(l_dl_msglink_struct_h.h_swift_msg_no,chr_g_new_msg_no);
         			if (APL_FAILURE == CO_RtvMachDtTime( l_dl_msglink_struct_h.h_new_dt, 
																				l_debug_info_ptr ))
         			{
             			APL_GOBACK_FAIL
         			}
         			strcpy(l_dl_msglink_struct_h.h_information,chr_g_addinfo);
         			l_dl_msglink_struct_h.h_sequence_num=int_g_seq_num;
         			l_dl_msglink_struct_h.h_dlrep_sequencenum=int_l_rpr_seq_num;
         			strncpy(l_dl_msglink_struct_h.h_message_det_a,chr_l_mesg_body,2000);
         			l_dl_msglink_struct_h.h_message_det_a[strlen(l_dl_msglink_struct_h.h_message_det_a)]=APL_NULL_CHAR;
         			if (strlen(chr_l_mesg_body) >2000)
         			{
            			strncpy(l_dl_msglink_struct_h.h_message_det_b,chr_l_mesg_body+2000,2000);
         				l_dl_msglink_struct_h.h_message_det_b[strlen(l_dl_msglink_struct_h.h_message_det_b)]=APL_NULL_CHAR;
         			}
         			if (strlen(chr_l_mesg_body) >4000)
         			{
            			strncpy(l_dl_msglink_struct_h.h_message_det_c,chr_l_mesg_body+4000,2000);
         				l_dl_msglink_struct_h.h_message_det_c[strlen(l_dl_msglink_struct_h.h_message_det_c)]=APL_NULL_CHAR;
         			}
         			if (strlen(chr_l_mesg_body) >6000)
         			{
            			strncpy(l_dl_msglink_struct_h.h_message_det_d,chr_l_mesg_body+6000,2000);
         				l_dl_msglink_struct_h.h_message_det_d[strlen(l_dl_msglink_struct_h.h_message_det_d)]=APL_NULL_CHAR;
         			}
         			if (strlen(chr_l_mesg_body) >8000)
         			{
            			strncpy(l_dl_msglink_struct_h.h_message_det_e,chr_l_mesg_body+8000,2000);
         				l_dl_msglink_struct_h.h_message_det_e[strlen(l_dl_msglink_struct_h.h_message_det_e)]=APL_NULL_CHAR;
         			}
          			strcpy(l_dl_msglink_struct_h.h_place_cd,APL_NULL_STRING);
          			strcpy(l_dl_msglink_struct_h.h_description,APL_NULL_STRING);
          			strcpy(l_dl_msglink_struct_h.h_psetparty,APL_NULL_STRING);
         			if(APL_FAILURE==DL_Mod_DLLinkNew(&l_dl_msglink_struct_h,l_debug_info_ptr))
         			{
            				fprintf(fl_userlog,"Failed To Insert into CMSGLINK Table\n");
         			}
						

                  
						memset(chr_l_isetlrpt_date,APL_NULL_CHAR ,APL_DATE_LEN);
						if ( APL_FAILURE == CO_RtvSysDt(chr_l_isetlrpt_date, l_debug_info_ptr) )
						{
								fprintf(fl_userlog,"Failed To Fetch System Date\n");
								APL_GOBACK_FAIL
						}

						EXEC SQL UPDATE DL_SETLRPT 
									SET REPORT_DT=:l_dl_msglink_struct_h.h_new_dt
									WHERE NAMEOF_FILE=:l_dl_msglink_struct_h.h_information
									AND REPORT_DT = :chr_l_isetlrpt_date;
						IS_ANY_ORA_ERROR

                  CO_FreeErrLst(l_debug_info_ptr);

                  strcpy(h_ora_rowid,p_ora_rowid);
                  strcpy(chr_l_stat_info,"File Processed ");
                  strncat(chr_l_stat_info,chr_fl_name,55);
                  chr_l_stat_info[70]='\0';

                  EXEC SQL UPDATE SYS_BATCHPROC
                           SET STAT_DET = :chr_l_stat_info
                  WHERE ROWID = :h_ora_rowid;
                  IS_ANY_ORA_ERROR
                  
                  memset(chr_l_buf2, APL_NULL_CHAR , 100);
				  /*Added by kotubabu for linux Migration
                  #ifdef OS_UNIX*/
                     sprintf(chr_l_buf2, "cp %s %s ",chr_fl_name, chr_l_incmsgarchdir);
                  //#endif
                  system(chr_l_buf2);

                  
                  memset(chr_l_buf2, APL_NULL_CHAR , 100);
				  /*Added by kotubabu for linux Migration
                  #ifdef OS_UNIX*/
                     sprintf(chr_l_buf2, "rm -f %s ",chr_fl_name);
                  //#endif
                  system(chr_l_buf2);
                  memset(chr_l_buf2,APL_NULL_CHAR, 100);
				  /*Added by kotubabu for linux Migration
                  #ifdef OS_UNIX*/
                     sprintf(chr_l_buf2, "rm -f %s ",chr_fl_name2);
                  //#endif
                  system(chr_l_buf2);
				}
				

			} 		


         

			if(l_sfe_inc_flg==1)
			{
         	if ((!strcmp(chr_g_msg_no,"52x")) ||(!strcmp(chr_g_msg_no,"54N")) || (!strcmp(chr_g_msg_no,"536")))
         	{
            	if((!strcmp(chr_g_msg_sts,"STP")) || (!strcmp(chr_g_msg_sts,"STO")) || (!strcmp(chr_g_msg_no,"536")))
            	{
               	if(APL_FAILURE==MS_Mod_IncMsgSts("030",
                 	                             "DUMMY ROW FOR RESP",
                  	                            NULL,l_debug_info_ptr))
               	{
                 	  	fprintf(fl_userlog, 
										"Could not insert chr_rjt response row in iinmsgrp table %s:%s\n",
										chr_g_sfe_refno,chr_g_msgfile_name);
               	}
            	}
            	else if((!strcmp(chr_g_msg_sts,"RJT")) ||  (!strcmp(chr_g_msg_sts,"RJO")))
            	{
               	if(APL_FAILURE==MS_Mod_IncMsgSts("010",
                  	                            "DUMMY ROW FOR RESP",
                     	                          NULL,l_debug_info_ptr))
               	{
                   	fprintf(fl_userlog, 
										"Could not insert chr_rjt response row in iinmsgrp table %s:%s\n",
										chr_g_sfe_refno,chr_g_msgfile_name);
               	}
            	}
            	else if(!strcmp(chr_g_msg_sts,"RPR"))
            	{
               	if(APL_FAILURE==MS_Mod_IncMsgSts("020",
                  	                            "DUMMY ROW FOR RESP",
                     	                          NULL,l_debug_info_ptr))
               	{
                  	 fprintf(fl_userlog, 
										"Could not insert chr_rjt response row in iinmsgrp table %s:%s\n",
										chr_g_sfe_refno,chr_g_msgfile_name);
               	}
            	}
         	}
         	else if((!strcmp(chr_g_msg_no,"592")) ||(!strcmp(chr_g_msg_no,"54C")))
         	{	
            	if((!strcmp(chr_g_msg_sts,"STP")) || (!strcmp(chr_g_msg_sts,"STO")))
            	{
               	if(APL_FAILURE==MS_Mod_IncMsgSts("040",
                  	                            "DUMMY ROW FOR RESP",
                     	                          NULL,l_debug_info_ptr))
               	{
                   	fprintf(fl_userlog, 
										"Could not insert chr_rjt response row in iinmsgrp table %s:%s\n",
										chr_g_sfe_refno,chr_g_msgfile_name);
               	}
            	}
            	else if((!strcmp(chr_g_msg_sts,"RJT")) || (!strcmp(chr_g_msg_sts,"RJO")) || (!strcmp(chr_g_msg_sts,"RPR")))
            	{
               	if(APL_FAILURE==MS_Mod_IncMsgSts("010",
                  	                            "DUMMY ROW FOR RESP",
                     	                          NULL,l_debug_info_ptr))
               	{
                   	fprintf(fl_userlog, 
										"Could not insert chr_rjt response row in iinmsgrp table %s:%s\n",
										chr_g_sfe_refno,chr_g_msgfile_name);
               	}
            	}
         	}
         	else if((!strcmp(chr_g_msg_no,"53x")) ||(!strcmp(chr_g_msg_no,"54S")))
         	{
            	if(!strcmp(chr_g_msg_sts,"STP"))
            	{
               	if(APL_FAILURE==MS_Mod_IncMsgSts("060",
                  	                            "DUMMY ROW FOR RESP",
                     	                          NULL,l_debug_info_ptr))
               	{	
                   	fprintf(fl_userlog, 
										"Could not insert chr_rjt response row in iinmsgrp table %s:%s\n",
										chr_g_sfe_refno,chr_g_msgfile_name);
               	}
            	}
            	else if((!strcmp(chr_g_msg_sts,"RJT")) || (!strcmp(chr_g_msg_sts,"PND")))
            	{
               	if(APL_FAILURE==MS_Mod_IncMsgSts("050",
                  	                            "DUMMY ROW FOR RESP",
                     	                          NULL,l_debug_info_ptr))
               	{
                   	fprintf(fl_userlog, 
										"Could not insert chr_rjt response row in iinmsgrp table %s:%s\n",
										chr_g_sfe_refno,chr_g_msgfile_name);
               	}
            	}
         	}
			}
         EXEC SQL COMMIT;
         IS_ANY_ORA_ERROR 

         

		}			

			  	
			if ( chr_l_inc_file == 'T')
			{
			 			
			 	if (APL_FAILURE == CO_Proc_RptClose(fl_cancelrpt,
												  l_debug_info_ptr) )
			 	{
				 	fprintf(p_fl_techlog,"Failed To Close The Cancellation Report File\n");
				 	APL_GOBACK_FAIL
			 	}				
				if (APL_FAILURE == CO_Proc_RptClose(fl_rejectrpt,
														 l_debug_info_ptr) )
			 	{
				 	fprintf(p_fl_techlog,"Failed To Close The Rejection Of Message Report File\n");
				 	APL_GOBACK_FAIL
			 	}				
			 	if (APL_FAILURE == CO_Proc_RptClose(fl_repairrpt,
																	l_debug_info_ptr) )
			 	{
			  		fprintf(p_fl_techlog,"Failed To Close The Repair Report File\n");
			  	APL_GOBACK_FAIL
			 	}
		
				if ( l_rus_flg )
				{
		
					if (APL_FAILURE == CO_Proc_RptClose(fl_53xPendRpt,
																 l_debug_info_ptr) )
					{
						fprintf(p_fl_techlog,"Failed To Close The 53x Pending Settlemnt Message Report File\n");
						APL_GOBACK_FAIL
					}
				}
		

		 }
		APL_GOBACK_SUCCESS

		

      RETURN_SUCCESS:
		{
				  fclose(fl_incmsglst);
				  fclose(chr_finifile);
				  fclose(fl_cancelrpt);
				  fclose(fl_rejectrpt);
				  fclose(fl_repairrpt);
				  fclose(fl_53xPendRpt);
				  fclose(fl_incmsg);
				  CO_ProcMonitor(p_fl_techlog,
							  "Exiting Out Of MS_Proc_IncMsg succesfully\n",	
							  NULL,
							  NULL);
				  return (APL_SUCCESS);
		}
      RETURN_FAILURE:
		{
				  fclose(fl_incmsglst);
				  fclose(chr_finifile);
				  fclose(fl_cancelrpt);
				  fclose(fl_rejectrpt);
				  fclose(fl_repairrpt);
				  fclose(fl_53xPendRpt);
				  fclose(fl_incmsg);
				  CO_ProcMonitor(p_fl_techlog,
							  "Exiting Out Of MS_Proc_IncMsg unsuccesfully\n",	
							  NULL,
							  NULL);
				  return (APL_FAILURE);
		}
}

	


	int	MS_Proc_IncMsg52xParse(FILE 					*fl_incmsg,
							  char					*p_msg_no,
							  MS_52X_STRUCT_H			*p_ms_inc_msg_struct_h_a,
							  MS_REP_STRUCT_H	**p_ms_rep_struct_h,	
							  double					*p_tot_qty,
							  int						*p_no_of_deal,
							  FILE					*fl_userlog,
							  FILE					*p_fl_userlog,
							  int						*int_p_retstat,
						  	  INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h,
						     DEBUG_INFO_STRUCT_H			**l_debug_info_ptr)
	{
		

		extern int MT_Chk_CashAcc(const char *p_client,const char *p_cashclient,
								 		  const char *p_ccycode_a, int *int_p_retstat,
										  DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

		
		
		char  chr_mainfuncarea[APL_MAINFUNCAREA_LEN]= APL_NULL_STRING;
		char  chr_l_condident[APL_CONDID_LEN]         = APL_NULL_STRING;
		
		char  chr_l_substr_client[APL_CLIENT_LENGTH]	= APL_NULL_STRING;
		char  chr_l_new_client[APL_CLIENT_LENGTH]   = APL_NULL_STRING;
		char  *b;
		short int_l_exist_a                          = 0;
		short int_l_jocondexists                                               = 0;	
		
      char  chr_l_str[LINERR_LENGTH]        			= APL_NULL_STRING;
      char  chr_l_str1[LINERR_LENGTH]        		= APL_NULL_STRING;
      char  chr_l_str2[LINERR_LENGTH]        		= APL_NULL_STRING;
      char  chr_l_str3[LINERR_LENGTH]        		= APL_NULL_STRING;
      char  chr_l_str4[LINERR_LENGTH]        		= APL_NULL_STRING;

		char	chr_l_typeofinstr[4]							= APL_NULL_STRING;
		char	chr_l_typeofinstr[TYPEOF_INSTR_LEN]			= APL_NULL_STRING;
		char  chr_l_clscode_a[9]                     = APL_NULL_STRING;
		double	l_nominal_value								= 0;
		double	l_finquantity								= 0;

		char  chr_h_value[LINERR_LENGTH]         		= APL_NULL_STRING;
      char  chr_h_swap_value[LINERR_LENGTH]        = APL_NULL_STRING;

      char  h_msg_tag[4]                   		= APL_NULL_STRING;
      char  chr_h_rej_str[20]              		= APL_NULL_STRING;
      char  chr_l_53x_cor_msg[2]           		= APL_NULL_STRING;
      char  chr_h_type_of_msg[2]           		= APL_NULL_STRING;
      char  chr_h_instr_txn_qty[26]          		= APL_NULL_STRING;
      char  h_setl_dt[7]            		 	= APL_NULL_STRING;
      char  chr_h_temp_settle_dt[7]        		= APL_NULL_STRING;
      char  h_instr_code[33]             		= APL_NULL_STRING;
		char	chr_l_tr_dt[7]								= APL_NULL_STRING;
		char	chr_h_tr_dt[APL_DATE_LEN]				= APL_NULL_STRING;
		char	chr_l_instr_name[LINERR_LENGTH]				= APL_NULL_STRING;
		char	chr_l_instrcode_a[APL_INSTRUMENTCODE_LEN]			= APL_NULL_STRING;
		char	h_instr_code[APL_INSTRUMENTCODE_LEN]			= APL_NULL_STRING;
		char	chr_l_isin[13]								= APL_NULL_STRING;
		char	chr_l_inst_client[APL_CLIENT_LENGTH]	= APL_NULL_STRING;
		char	chr_l_inst_cname[66]						= APL_NULL_STRING;
		char	chr_l_client_a[APL_CLIENT_LENGTH]			= APL_NULL_STRING;
		char	chr_l_cname[66]								= APL_NULL_STRING;
		char	h_qty[16]									= APL_NULL_STRING;
		char	chr_h_new_qty[16]							= APL_NULL_STRING;
		char	l_quantity[16]									= APL_NULL_STRING;
		char	chr_l_trd_qty[16]							= APL_NULL_STRING;	
		char	chr_l_bic_code[13]							= APL_NULL_STRING;
		char	chr_l_bic_code_new[13]					= APL_NULL_STRING;
		char	h_clnt_clr_name[66]								= APL_NULL_STRING;
		char	int_l_domcpac[APL_CLIENT_LENGTH]			= APL_NULL_STRING;
		char	int_l_countacc[APL_COUNTACC_LEN]		= APL_NULL_STRING; 
		char	chr_l_countacc_cname[66]					= APL_NULL_STRING;

	char chr_l_short_name[36] = APL_NULL_STRING ;
	char chr_l_tshort_name[16] = APL_NULL_STRING ;


		char	chr_l_clientof[36]						= APL_NULL_STRING;
		char	chr_l_clientof_cname[66]				= APL_NULL_STRING; 
		char	dbl_l_amount_a[16]							= APL_NULL_STRING;
		char	chr_l_new_amount[16]						= APL_NULL_STRING;
		char	chr_h_correct_msg[2]						= APL_NULL_STRING;
		char	h_info[266]								= APL_NULL_STRING;
		char  chr_h_capnote[266]                      = APL_NULL_STRING;
		char	chr_h_note_prop[21]						= APL_NULL_STRING;
		char	chr_h_note_nprop[16]						= APL_NULL_STRING;
		char chr_h_temp_refno[APL_TXNREFNO_LEN]    = APL_NULL_STRING;
		MS_52X_STRUCT_H									l_ms_52x_struct_h;
		int	int_h_no_of_trd								= 0;
	   int   a                          		= 0;
      int   i                          		= 0;
      int   int_ret                        		= 0;
      int   int_retstat                      		= 0;
		int   n = 0;
		int	int_len										= 0;
		int 	int_l_find88_flag							= 0;
		int   int_l_read85_flag                    = 0;
		int int_l_bogcode 									= 0; 
	
		#ifdef EMU_PROCESSING
         int int_l_ccy_flg                       = 0; 
      #endif

	
		int int_l_multi_ccy = 0;
		int int_l_int_multiccy_rec =0;
		short i_multiccy_rec=0;
	

		double	h_trd_quantity							= 0.0;
		char chr_l_read_line  = 'F';
		char	chr_l_read_88[APL_FLAG_LENGTH]				=	APL_NULL_STRING;
		char	h_clt_brk_all[APL_FLAG_LENGTH]					=	APL_NULL_STRING;
		char	chr_h_87_cname[66]							=	APL_NULL_STRING;
		char  chr_l_cash_acc[APL_CLIENT_LENGTH]		=  APL_NULL_STRING;
		static char chr_g_splacc[APL_CLIENT_LENGTH] = APL_NULL_STRING;
      int   int_l_remotetrade = 0;
		short	i_clt_brk_all									=	0;
		short	i_87_cname								=	0;
      short i_nominal_value                         =  0;
		short l_tr_exist								=	0;
		
		short l_gr_stp_flg                     = 0;

		EXEC SQL BEGIN DECLARE SECTION;
		EXEC SQL VAR chr_l_cash_acc IS STRING;
		EXEC SQL VAR chr_l_client_a IS STRING;
		EXEC SQL VAR chr_g_splacc IS STRING;
      EXEC SQL VAR int_l_countacc IS STRING;
      EXEC SQL VAR chr_l_countacc_cname IS STRING;
      EXEC SQL VAR chr_l_short_name IS STRING;
      EXEC SQL VAR h_info IS STRING;
      EXEC SQL VAR chr_h_capnote IS STRING;
		EXEC SQL VAR chr_l_clscode_a IS STRING; 
		EXEC SQL END DECLARE SECTION;

      memset(&l_ms_52x_struct_h,NULL,sizeof(MS_52X_STRUCT_H) );
		
		
		b              = (char   *)calloc(LINERR_LENGTH,sizeof(char));
		APL_MALLOC_FAIL(b);
		memset(chr_mainfuncarea, APL_NULL_CHAR, APL_MAINFUNCAREA_LEN);
		memset(chr_l_condident, APL_NULL_CHAR, APL_CONDID_LEN);
		memset(chr_g_splacc, APL_NULL_CHAR, APL_CLIENT_LENGTH);
		

		

		if ( !strcmp(p_msg_no,I_MSGNO_520) )
		{
			l_ms_52x_struct_h.h_deal_code[0] = DEALCD_RF;
		}
		if ( !strcmp(p_msg_no,I_MSGNO_521) )
		{
			l_ms_52x_struct_h.h_deal_code[0] = DEALCD_RVP;
		}
		if ( !strcmp(p_msg_no,I_MSGNO_522) )
		{
			l_ms_52x_struct_h.h_deal_code[0] = DEALCD_DF;
		}
		if ( !strcmp(p_msg_no,I_MSGNO_523) )
		{
			l_ms_52x_struct_h.h_deal_code[0] = DEALCD_DVP;
		}
		l_ms_52x_struct_h.h_deal_code[1]		= '\0';

		strcpy(l_ms_52x_struct_h.swift_msg_no, p_msg_no);
		
		

      
      l_gr_stp_flg = 0;
      if (APL_FAILURE == CO_Chk_CntryEnabled(  "INCOMING_MSG",
                                             "STP_CHK",
                                             &l_gr_stp_flg,
                                             l_debug_info_ptr ))
     {
         APL_GOBACK_FAIL
     }


		while (!feof(fl_incmsg))
		{
				if (chr_l_read_line == 'F')
				{
					memset(chr_l_str4,APL_NULL_CHAR,LINERR_LENGTH);
					
                     fgets(chr_l_str4,LINERR_LENGTH,fl_incmsg);
                     chr_l_str4[strlen(chr_l_str4)-1]='\0';
		     printf("\n ******** chr_l_str4 is |%s| ****** \n",chr_l_str4);
				}
				if (chr_l_str4[0] == '-')
				{
					fprintf(fl_userlog,"Encounterd End of  52x Message\n");
					break;
				}
				if (chr_l_str4[0] != ':') 
				{
               
               if(l_gr_stp_flg)
               {
                  
                  if ( (     (!strcmp(h_msg_tag,I_COUNT_CLI))
                        || (!strcmp(h_msg_tag, I_COUNT_CLIA ))
                        || (!strcmp(h_msg_tag, I_COUNT_CLID ))
                        || (!strcmp(h_msg_tag, I_COUNT_CLIC )) )
                        && ( chr_l_read_88[0] == 'Y' ) )
                  {
                     if (   (chr_h_value[0] == '/')
                         && (!strcmp(l_ms_52x_struct_h.domestic_cpclt,l_mt_core_sys_params_struct_h.custody_clt_cd) ) )
                        for (i = 0; i< 65; i++ )
                        {
                           chr_l_clientof[i] = chr_l_str4[i];
                        }
                        chr_l_clientof[35] = APL_NULL_CHAR;
                        strcpy(l_ms_52x_struct_h.clientof,chr_l_clientof);
                  }
               }
               
					continue;
					
				}	
				memset(h_info, APL_NULL_CHAR , 266);
				memset(chr_h_capnote, APL_NULL_CHAR , 266);
				memset(chr_l_str, APL_NULL_CHAR , LINERR_LENGTH);
				memset(h_msg_tag, APL_NULL_CHAR , 4);
				memset(chr_h_value, APL_NULL_CHAR, LINERR_LENGTH);
				if (APL_FAILURE == CO_Proc_SplitTokenVal ( 	chr_l_str4,
                                      	   	   h_msg_tag ,
                                         	   	chr_h_value ,
																h_info,
                                            		l_debug_info_ptr ))
           		{
              		fprintf(fl_userlog,"Failed to Split the Message Line %s\n",chr_l_str4);
						

						strcpy(chr_g_msg_sts, "RJT");

                  if ( APL_FAILURE == MS_Mod_IncMsgSts(chr_g_msg_sts,
                                            "MESSAGE LINE NOT IN PROPER FORMAT", 
															chr_g_str_client, (DEBUG_INFO_STRUCT_H **)NULL) )
                  {
                      CO_ProcMonitor(APL_OUT_FILE,
                               "Failed to insert into IINMSGRP.\n",
                               NULL, NULL);
                  }
						*int_p_retstat = IV_CRITCAL_ERROR_IND;
             		APL_GOBACK_FAIL
   	         }
					APL_IF_DEBUG
					{
 	 	    			printf("the h_msg_tag is %s\n",h_msg_tag);
			     		printf("the chr_value of chr_h_value after the call to processtion is %s\n",chr_h_value);
					}

					chr_l_read_line = 'F';

           		if (!strcmp(h_msg_tag,APL_NULL_STRING) )
  	        		{
						fprintf(fl_userlog,"MESSAGE NOT IN PROPER FORMAT. MESSAGE REJECTED\n");
     	        		fprintf(fl_userlog,"Found End of Message\n");

						strcpy(chr_g_msg_sts, "RJT");

						if ( APL_FAILURE == MS_Mod_IncMsgSts(chr_g_msg_sts, "MESSAGE CONTAINS EMPTY LINE", chr_g_str_client, (DEBUG_INFO_STRUCT_H **)NULL) )
						{
							CO_ProcMonitor(APL_OUT_FILE, 
										"Failed to insert into IINMSGRP.\n", NULL, NULL);
							*int_p_retstat = IV_CRITCAL_ERROR_IND;
							APL_GOBACK_FAIL
						}
            	}

			if ( !strcmp(h_msg_tag,I_SETTLERR_DT) )
					{
           		   
   	            memset(chr_h_temp_settle_dt,'\0',7);
						strcpy(chr_h_temp_settle_dt ,chr_h_value);
     	   	      chr_h_temp_settle_dt[6] ='\0';
	
   	           	

               	if (APL_FAILURE == CR_Proc_DecodeDt(chr_h_temp_settle_dt , 
					 												 h_setl_dt ,
                  		                             l_debug_info_ptr ) )
              		{	
              			fprintf(fl_userlog,"Failed To Decode Settle Date.\n");
							*int_p_retstat = IV_CRITCAL_ERROR_IND;
                 		APL_GOBACK_FAIL
              		}


						memset(l_ms_52x_struct_h.setl_dt, '\0', APL_DATE_LEN);
					   strcpy(l_ms_52x_struct_h.setl_dt,h_setl_dt);
						strcpy(chr_g_settle_dt,h_setl_dt);    
					} 	

		 	if (  (!strcmp(h_msg_tag,I_REF_NO)) )
					{
						memset(l_ms_52x_struct_h.indentity_no, APL_NULL_CHAR, 17);
						memset(chr_h_temp_refno,APL_NULL_CHAR , 17);
						
 						for ( i = 0; i < 16; i++ )
                  {
                     chr_h_temp_refno[i] = chr_h_value[i];
                  }

					   strcat(chr_h_temp_refno,APL_NULL_STRING);
						strcpy(l_ms_52x_struct_h.indentity_no,chr_h_temp_refno);
					}				
	
			if (	!strcmp(h_msg_tag,I_DEAL_DATERR_LOC) )
					{
         	   	
						memset(chr_l_tr_dt, APL_NULL_CHAR , 7);
						strcpy(chr_l_tr_dt,chr_h_value);
						chr_l_tr_dt[6] = '\0';
               	if (APL_FAILURE == CR_Proc_DecodeDt(	chr_l_tr_dt , 
																		chr_h_tr_dt ,
                     	                              l_debug_info_ptr ) )
               	{	
                  	fprintf(fl_userlog,"Failed To Decode Settle Date.\n");
							*int_p_retstat = IV_CRITCAL_ERROR_IND;
                  	APL_GOBACK_FAIL
               	}
						strcpy(l_ms_52x_struct_h.dl_dt,chr_h_tr_dt);
					}			 				
				
					
	  if (!strcmp(h_msg_tag,I_INSTRU_DET)	)
				{
					memset(chr_l_instr_name, APL_NULL_CHAR, LINERR_LENGTH);
					strcpy(chr_l_instr_name,chr_h_value);	
					

					strncpy(chr_l_instrcode_a,chr_l_instr_name,4);
					chr_l_instrcode_a[4] = APL_NULL_CHAR;
					
					
					if ( !strcmp(g_mt_commonsys_params_struct_h.dom_instrument,
									chr_l_instrcode_a) && ( strcmp( chr_l_instrcode_a,"INSTR_ISIN" )))				
					
					{
						for ( i = 0; i < 8 ; i++)
						{
							l_ms_52x_struct_h.instr_code[i] = chr_l_instr_name[i + 5];		
						}
						l_ms_52x_struct_h.instr_code[8] = APL_NULL_CHAR;
					}
					else if ( !strcmp(chr_l_instrcode_a,"INSTR_ISIN")	)
					{
						memset(chr_l_isin,APL_NULL_CHAR,13);
						 
						for ( i = 0; i< 12 ; i ++ )
						{
							chr_l_isin[i] = chr_l_instr_name[ i + 5 ];
						}
						APL_IF_DEBUG
						{
							printf("the chr_l_isin is (%s) \n",chr_l_isin);
						}
						if (APL_FAILURE == IV_Rtv_InstrFromISIN(chr_l_isin,
																				h_instr_code,
																				&int_retstat,
																				l_debug_info_ptr)	)
						{
							if (int_retstat == IV_CRITCAL_ERROR_IND)
							{
								fprintf(fl_userlog,"Fatal Error Encountered in INSTRUMENT TABLE \n");
								*int_p_retstat = IV_CRITCAL_ERROR_IND;
								APL_GOBACK_FAIL
							}
                  
                     else if (int_retstat == MORE_THAN_ONE_ROW_FOUND)
                     {
                        fprintf(fl_userlog,"Too many Records int_found for ISIN :%s: INSTR_CODE :%s: in INSTRUMENT TABLE \n", chr_l_isin, h_instr_code);
                        *int_p_retstat = IV_CRITCAL_ERROR_IND;
                        APL_GOBACK_FAIL
                     }
							else if (int_retstat == IV_NO_DATA_FOUND_ERR)
							{
								
								for ( i = 0 ; i < 8; i ++ )
								{
									h_instr_code[i]	= chr_h_value[ i + 8 ];
								}
								h_instr_code[8] = APL_NULL_CHAR;
							}
						}
						strcpy(l_ms_52x_struct_h.instr_code,h_instr_code);
                  
                 if(APL_FAILURE == CO_Chk_CntryEnabled("TRADE_MAINT",
                                                                "NTRD_NODLT",
                                                                 &int_l_jocondexists,
                                                                 l_debug_info_ptr))
                 {
                    APL_GOBACK_FAIL
                 }
                 if(int_l_jocondexists)
                 {
                     if ( APL_FAILURE ==
                           CR_Rtv_InstrChrVal(l_ms_52x_struct_h.instr_code, "clscode", chr_l_clscode_a, l_debug_info_ptr) )
                     {

                       
                        strcpy(chr_l_clscode_a,APL_NULL_STRING);
                     }
                     if (strcmp(chr_l_clscode_a,"NTRD") == 0)
                     {
                           if ((strcmp(p_msg_no,I_MSGNO_522) == 0 )  || (strcmp(p_msg_no,I_MSGNO_523) == 0 ))
                           {
                              CO_InsertErr(l_debug_info_ptr, ERR_DLVTRDS_NOTALLOWED, l_ms_52x_struct_h.instr_code,APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__);
                              strcpy(chr_g_msg_sts, "RPR");
                              if ( APL_FAILURE == MS_Mod_IncMsgSts("RPR", "Deliver Trades NOT ALLOWED FOR NTRD INSTR_CODES",l_ms_52x_struct_h.instr_code, NULL) )
                              {
                                 CO_ProcMonitor(APL_OUT_FILE, "Could not insert into IINMSGRP\n",NULL, NULL);
                              }
                              fprintf(fl_userlog,"Deliver Trades not allowed for NTRD Type of Instrodes \n");
                           }
                     }
                 }


						while(1)
						{
							memset(chr_l_str4, APL_NULL_CHAR , LINERR_LENGTH);
							
                     fgets(chr_l_str4,LINERR_LENGTH,fl_incmsg);
                     chr_l_str4[strlen(chr_l_str4)-1]='\0';
		     printf("\n ******** chr_l_str4 is |%s| ****** \n",chr_l_str4);
							if (chr_l_str4[0] == ':') 
							{
								chr_l_read_line = 'T';
								break;
							}
							else if (chr_l_str4[0] == '-')
							{
								chr_l_read_line = 'T';
								break;
							}
							chr_l_str4[35] = APL_NULL_CHAR;
							strcat(l_ms_52x_struct_h.instr_name ,chr_l_str4);
						}
					}	
				} 		
	 	if (		(!strcmp(h_msg_tag ,I_INST_PARTYA)) 
					  ||  (!strcmp(h_msg_tag, I_INST_PARTYD))	)
				{
					if (chr_h_value[0] == '/')
					{
						for ( i = 0; i < 10; i++ )
						{
							chr_l_inst_client[i] = chr_h_value[i + 1];		
						}

						chr_l_inst_client[10] = APL_NULL_CHAR;

						
						


					}
					else
					{
						for( i = 0; i< LINERR_LENGTH; i++)
						{
							chr_l_inst_cname[i]    = chr_h_value[i + 1];	
						}
					}
					chr_l_inst_cname[65] = APL_NULL_CHAR;
					strcpy(l_ms_52x_struct_h.inst_client,chr_l_inst_client);
					strcpy(l_ms_52x_struct_h.inst_clnt_clr_name, chr_l_inst_cname);
				} 

 		if ( !strcmp(h_msg_tag,I_QTY))
				{
					

					memset(l_quantity,APL_NULL_CHAR,16);
					memset(chr_l_trd_qty,APL_NULL_CHAR,16);
					memset(h_qty,APL_NULL_CHAR,16);
					memset(chr_h_new_qty,APL_NULL_CHAR,16);
					strcpy(l_quantity, chr_h_value);

					 
							
					for ( i =0; i < 18; i++)
					{
						h_qty[i]	 = l_quantity[i + 3];
					}
						
					h_qty[18] = APL_NULL_CHAR;

					

					if (APL_FAILURE == CO_Proc_RemoveDot(h_qty,
															chr_h_new_qty,
															l_debug_info_ptr) )
					{
						fprintf(fl_userlog,"Failed To Remove The Decimal From The Quantity\n");
						*int_p_retstat = IV_CRITCAL_ERROR_IND;
						APL_GOBACK_FAIL
					}

					

					if (APL_FAILURE == CO_Proc_ReplaceComma(	chr_h_new_qty,
																chr_l_trd_qty,
																l_debug_info_ptr) )
					{
						fprintf(fl_userlog,"Failed to Replace The Commas in Quantity\n");
						*int_p_retstat = IV_CRITCAL_ERROR_IND;
						APL_GOBACK_FAIL
					}
					n = (	strlen(chr_l_trd_qty) - 1	);
					if (	chr_l_trd_qty[n] == '.')
					{
						strcat(chr_l_trd_qty,"00");
					}

	            strncpy( chr_l_typeofinstr, chr_h_value,3 ); 

               

		      
             

               if ( !strcmp(chr_l_typeofinstr, TYPEOFINSTR_FMT) )
               {
						if ( APL_FAILURE == 
									CR_Rtv_InstrChrVal(l_ms_52x_struct_h.instr_code, "typeofinstr", 
														chr_l_typeofinstr, l_debug_info_ptr) )
						{
							
							
						   strcpy(chr_l_typeofinstr,APL_NULL_STRING);
						}

                  if ( !strcmp(chr_l_typeofinstr, TYPEOFINSTR_BOND) )
                  {
							if ( APL_FAILURE == 
										CR_Rtv_InstrNumVal(l_ms_52x_struct_h.instr_code, "nomval", 
															&l_nominal_value, l_debug_info_ptr) )
							{
								
								l_nominal_value = 1.0;
							}

							sscanf(chr_l_trd_qty, "%lf", &l_finquantity);
							l_finquantity /= l_nominal_value;
							sprintf(chr_l_trd_qty, "%lf", l_finquantity);
                  }
                }
                 

					

					if ( !strcmp(chr_l_typeofinstr, TYPEOFINSTR_BOND) )
               {
                  if ( APL_FAILURE ==
                           CR_Rtv_InstrChrVal(l_ms_52x_struct_h.instr_code, "typeofinstr",
                                          chr_l_typeofinstr, l_debug_info_ptr) )
                  {
                     
                     strcpy(chr_l_typeofinstr,APL_NULL_STRING);
                  }

                  if ( !strcmp(chr_l_typeofinstr, TYPEOFINSTR_FMT) )
                  {
                     if(APL_FAILURE == CO_Chk_CntryEnabled("INCOMING_MSG",
                                                                "BON_QTY",
                                                                 &l_tr_exist,
                                                                 l_debug_info_ptr))
                     {
                        APL_GOBACK_FAIL
                     }
                     if(l_tr_exist)
                     {
                        sscanf(chr_l_trd_qty, "%lf", &l_finquantity);
                        l_finquantity *= 1000000;
                        sprintf(chr_l_trd_qty, "%lf", l_finquantity);
                     }
                  }
					}

					

					memset(chr_l_str2, APL_NULL_CHAR , LINERR_LENGTH);
					
                     fgets(chr_l_str2,LINERR_LENGTH,fl_incmsg);
                     chr_l_str2[strlen(chr_l_str2)-1]='\0';
		     printf("\n ******** chr_l_str2 is |%s| ****** \n",chr_l_str2);
					if (APL_FAILURE == CO_Proc_SplitTokenVal ( 	chr_l_str2,
            	                         	   	   h_msg_tag ,
               	                          	   	chr_h_value ,
																	h_info,
                     	                       		l_debug_info_ptr ))
           		{
             		
							printf("Failed to Split the Message Line %s\n",chr_l_str2);

						

                  strcpy(chr_g_msg_sts, "RJT");

                  if ( APL_FAILURE == MS_Mod_IncMsgSts(chr_g_msg_sts,
                                            "MESSAGE LINE NOT IN PROPER FORMAT",
															 chr_g_str_client, (DEBUG_INFO_STRUCT_H **)NULL) )
                  {
                      CO_ProcMonitor(APL_OUT_FILE,
                               "Failed to insert into IINMSGRP.\n",
                               NULL, NULL);
                  }

						*int_p_retstat = IV_CRITCAL_ERROR_IND;
             		APL_GOBACK_FAIL
   	     		}
 					if (		(!strcmp(h_msg_tag,I_CLIENTA))	
							|| (!strcmp(h_msg_tag,I_CLIENTC))  
							|| (!strcmp(h_msg_tag,I_CLIENTD))  )  
					{
						memset(chr_l_client_a,APL_NULL_CHAR, APL_CLIENT_LENGTH );
						memset(chr_l_cname,APL_NULL_CHAR, 66 );
						if (chr_h_value[0] == '/')
						{
							for ( i = 0; i < 10; i++ )
							{
								chr_l_client_a [i] = chr_h_value[i + 1];		
							}

							
							strcat(chr_l_client_a,"\0");						
							
						  

						  
																	
							 strcpy(chr_mainfuncarea, "ORDERPROC_INCMSG");
							strcpy(chr_l_condident, "ACCT_LEN_PROCESS");
							if ( APL_FAILURE == CO_Chk_CntryEnabled(chr_mainfuncarea, chr_l_condident, &int_l_exist_a, l_debug_info_ptr) ) 
							{
								 APL_GOBACK_FAIL
							}
							
						 	memset(chr_l_new_client, APL_NULL_CHAR, APL_CLIENT_LENGTH);
							memset(chr_l_substr_client,APL_NULL_CHAR,APL_CLIENT_LENGTH);
							if ( int_l_exist_a )
							{
							  if ( strlen( chr_l_client_a ) == 9 )       
								{
									for ( i = 0; i < 6 ; i++ )
									{
										chr_l_new_client[i] = chr_l_client_a[i];
									}

								

									strcat(chr_l_new_client,"-");
									chr_l_substr_client[0] = chr_l_client_a[6] ;
									chr_l_substr_client[1] = chr_l_client_a[7] ;
									chr_l_substr_client[2] = chr_l_client_a[8] ;
									chr_l_substr_client[3] = APL_NULL_CHAR ; 
									strcat(chr_l_new_client,chr_l_substr_client);
									
									strcpy( chr_l_client_a, chr_l_new_client);
								}
								if ( ( strlen( chr_l_client_a ) == 10 ) && (chr_l_client_a[6] == ' ' ))       
                        {
                           for ( i = 0; i < 6 ; i++ )
                           {
                              chr_l_new_client[i] = chr_l_client_a[i];
                           }

                           strcat(chr_l_new_client,"-");
                           chr_l_substr_client[0] = chr_l_client_a[7] ;
                           chr_l_substr_client[1] = chr_l_client_a[8] ;
                           chr_l_substr_client[2] = chr_l_client_a[9] ;
                           chr_l_substr_client[3] = APL_NULL_CHAR ; 
                           strcat(chr_l_new_client,chr_l_substr_client);
                           strcpy( chr_l_client_a, chr_l_new_client);
                        }
							} 
							

							
						
							if (APL_FAILURE == IV_Rtv_CNameAcc(	chr_l_client_a,
																						chr_l_cname,
																						&int_retstat,
																						l_debug_info_ptr))
							{
                        if (int_retstat == MORE_THAN_ONE_ROW_FOUND)
                        {
                           fprintf(fl_userlog,"Too many records for A/c :%s: for customer Name from ACCOUNT table\n", chr_l_client_a);
                           *int_p_retstat = IV_CRITCAL_ERROR_IND;
                           APL_GOBACK_FAIL
                        }
                        else if (int_retstat == IV_CRITCAL_ERROR_IND)
								{
									CO_InsertErr(l_debug_info_ptr,
														DB_ERR_NO,
														"CACCOUNT",
														APL_NULL_STRING,
														APL_NULL_STRING,
														__LINE__,
														__FILE__);

									*int_p_retstat = IV_CRITCAL_ERROR_IND;
									APL_GOBACK_FAIL
								}
								if (int_retstat == IV_NO_DATA_FOUND_ERR)
								{
									fprintf(fl_userlog,"Failed To Select The customer Name from ACCOUNT table\n");
									
									

									CO_InsertErr(l_debug_info_ptr,
														ERR_ACCNOT_FND,
														chr_l_client_a,
														APL_NULL_STRING,
														APL_NULL_STRING,
														__LINE__,
														__FILE__);
								}
							}	
						}
						else
						{
							strcpy(chr_l_cname, chr_h_value);
						}
						

					} 		

				
(*p_ms_rep_struct_h) = (MS_REP_STRUCT_H *)realloc(*p_ms_rep_struct_h,(sizeof(MS_REP_STRUCT_H)* (int_h_no_of_trd + 1)));

                  memset((*p_ms_rep_struct_h + int_h_no_of_trd)->client , APL_NULL_CHAR , APL_CLIENT_LENGTH);
                  memset((*p_ms_rep_struct_h + int_h_no_of_trd)->clnt_name , APL_NULL_CHAR , 66);
                  (*p_ms_rep_struct_h + int_h_no_of_trd)->quantity     = 0.0;

                  (*p_ms_rep_struct_h + int_h_no_of_trd)->quantity     = atof(chr_l_trd_qty);
                  strcpy((*p_ms_rep_struct_h + int_h_no_of_trd)->client,chr_l_client_a);
						strcpy(chr_g_str_client,(*p_ms_rep_struct_h + int_h_no_of_trd)->client);     
                  chr_l_cname[65] = APL_NULL_CHAR;
                  strcpy((*p_ms_rep_struct_h + int_h_no_of_trd)->clnt_name,chr_l_cname);
                  *p_tot_qty = (*p_tot_qty) + atof(chr_l_trd_qty);

                  fprintf(fl_userlog,"The client is %s\n", (*p_ms_rep_struct_h + int_h_no_of_trd)->client);
                  fprintf(fl_userlog,"The CName is %s\n", (*p_ms_rep_struct_h + int_h_no_of_trd)->clnt_name);
                  fprintf(fl_userlog,"The quantity. is %lf\n", (*p_ms_rep_struct_h + int_h_no_of_trd)->quantity);

                  int_h_no_of_trd++;

				} 				
					
 		if (!strcmp(h_msg_tag,I_DOMCPACC))
				{
					int_l_read85_flag = 1;
					
					memset(l_ms_52x_struct_h.domestic_cpclt, NULL , APL_CLIENT_LENGTH);
					memset(l_ms_52x_struct_h.domcpclt_cd_cname, NULL ,	66 );
               memset(chr_h_swap_value, APL_NULL_CHAR, LINERR_LENGTH);
					if (chr_h_value[0] == '/')
					{
                  
                  strcpy(chr_h_swap_value,chr_h_value);
						strcpy(int_l_domcpac,strtok_r(chr_h_value,"/",&a));
						int_l_domcpac[10] = '\0';
                  strcpy(l_ms_52x_struct_h.domestic_cpclt,int_l_domcpac);
					}							
					else
					{
						strcpy(l_ms_52x_struct_h.domcpclt_cd_cname,chr_h_value);

					}
					while(1)
					{
						memset(chr_l_str4, APL_NULL_CHAR , LINERR_LENGTH);
						
                     fgets(chr_l_str4,LINERR_LENGTH,fl_incmsg);
                     chr_l_str4[strlen(chr_l_str4)-1]='\0';
		     printf("\n ******** chr_l_str4 is |%s| ****** \n",chr_l_str4);
						if (chr_l_str4[0] == ':') 
						{
							strcpy(l_ms_52x_struct_h.countclt_cname, l_ms_52x_struct_h.domcpclt_cd_cname);
							chr_l_read_line = 'T';
							break;
						}
						else if (chr_l_str4[0] == '-') 
						{
							chr_l_read_line = 'T';
							break;
						}
						else
						{
							
							strncat(l_ms_52x_struct_h.domcpclt_cd_cname ,chr_l_str4,65-strlen(l_ms_52x_struct_h.domcpclt_cd_cname));
							l_ms_52x_struct_h.domcpclt_cd_cname[65] = APL_NULL_CHAR;
						}
					}

					
				   
					
					if (!strcmp(l_ms_52x_struct_h.domestic_cpclt,l_mt_core_sys_params_struct_h.custody_clt_cd))
					{
						chr_l_read_88[0] = 'Y';
						chr_l_read_88[1] = '\0';
					}

					
				}

				

 		if (  (!strcmp(h_msg_tag,I_BIC_CODEA)) 
					)
				{
					int_l_read85_flag = 1;
					

					
					

					memset(chr_l_bic_code, APL_NULL_CHAR, 13);

					
																
               
               if (( chr_h_value[0] != '/' ) && ( chr_h_swap_value[0] != '/'))
					{
						chr_l_read_88[0] = 'Y';
						chr_l_read_88[1] = '\0';

						for (i = 0; i < 12 ;i++)
						{
							chr_l_bic_code[i] = chr_h_value[i];
						}

						chr_l_bic_code[12] = '\0';

						

						int_l_bogcode = 0;

						if ( APL_FAILURE == CO_Chk_SplVal("INCOMING_MSG", "BIC_CODE_87A", chr_l_bic_code, &int_l_bogcode, l_debug_info_ptr) )
						{
							*int_p_retstat = IV_CRITCAL_ERROR_IND;
							APL_GOBACK_FAIL
						}

						if ( int_l_bogcode )
						{
							strcpy(l_ms_52x_struct_h.dl_class, EXTERNALDEAL);
						}

						int_retstat = IV_SUCCESS;

						if (APL_FAILURE == IV_Rtv_BICCDAcc(	chr_l_bic_code,
																	l_ms_52x_struct_h.domestic_cpclt,
																	l_ms_52x_struct_h.domcpclt_cd_cname,
																	&int_retstat, l_debug_info_ptr) )
						{
							if (int_retstat == IV_NO_DATA_FOUND_ERR)
							{
								fprintf(fl_userlog,"BIC CODE %s Not Found In The System\n",chr_l_bic_code);
								CO_InsertErr(l_debug_info_ptr,
													ERR_REC_NOTFND,
													"BRK_CD",
													chr_l_bic_code,
													APL_NULL_STRING,
													__LINE__,
													__FILE__);
							}
						}
					}
					else
					{
						chr_l_read_88[0] = 'N';
						chr_l_read_88[1] = '\0';

						for (i = 0; i<11;i++ )
						{
							chr_l_bic_code[i]	= chr_h_value[i + 1];

							if (chr_h_value[i+1] == '\0')
							{
								break;
							}
						}

						chr_l_bic_code[12] = '\0';

						EXEC SQL SELECT 	CLT_BRK_ALL, CLNT_NAME
									INTO		:h_clt_brk_all:i_clt_brk_all,
												:chr_h_87_cname:i_87_cname
									FROM		MT_CLIENT
									WHERE		CLIENT = :chr_l_bic_code;

						if ( sqlca.sqlcode < 0 ) 
						{
							*int_p_retstat = IV_CRITCAL_ERROR_IND;
							IS_ANY_ORA_ERROR
						}

						if (APL_ZERO_RESULT_SET)
						{
								fprintf(fl_userlog,"Account %s Not Found In The System\n",chr_l_bic_code);
								CO_InsertErr(l_debug_info_ptr,
													ERR_ACCNOT_FND,
													chr_l_bic_code,
													APL_NULL_STRING,
													APL_NULL_STRING,
													__LINE__,
													__FILE__);
						}
						if ( h_clt_brk_all[0] == 'B' || h_clt_brk_all[0] == 'A' )
						{
							strncpy(l_ms_52x_struct_h.domestic_cpclt, chr_l_bic_code, 10);
							l_ms_52x_struct_h.domestic_cpclt[10] = '\0';
							strcpy(l_ms_52x_struct_h.domcpclt_cd_cname, chr_h_87_cname);
							if (!strcmp(chr_l_bic_code,l_mt_core_sys_params_struct_h.custody_clt_cd))
							{
								chr_l_read_88[0] = 'Y';
								chr_l_read_88[1] = '\0';
							}
							else
							{
								strcpy(l_ms_52x_struct_h.countclt_cname, chr_h_87_cname);
							}
						}
						else
						{
							strcpy(l_ms_52x_struct_h.domestic_cpclt,l_mt_core_sys_params_struct_h.custody_clt_cd);
							strncpy(l_ms_52x_struct_h.cp_clt, chr_l_bic_code, 10);
							l_ms_52x_struct_h.cp_clt[10] = '\0';
							strcpy(l_ms_52x_struct_h.countclt_cname, chr_h_87_cname);
							strcpy(chr_h_87_cname, APL_NULL_STRING);
							i_87_cname = 0;
							EXEC SQL SELECT 	CLNT_NAME
										INTO		:chr_h_87_cname:i_87_cname
										FROM		MT_CLIENT
										WHERE		CLIENT = :l_mt_core_sys_params_struct_h.custody_clt_cd;
							if ( sqlca.sqlcode < 0 ) 
							{
								*int_p_retstat = IV_CRITCAL_ERROR_IND;
								IS_ANY_ORA_ERROR
							}

							if (APL_ZERO_RESULT_SET)
							{
								fprintf(fl_userlog,"Account %s Not Found In The System\n",l_mt_core_sys_params_struct_h.custody_clt_cd);
								CO_InsertErr(l_debug_info_ptr,
													ERR_ACCNOT_FND,
													l_mt_core_sys_params_struct_h.custody_clt_cd,
													APL_NULL_STRING,
													APL_NULL_STRING,
													__LINE__,
													__FILE__);
							}
							strcpy(l_ms_52x_struct_h.domcpclt_cd_cname,chr_h_87_cname);
                     
                     l_gr_stp_flg = 0;
                     if (APL_FAILURE == CO_Chk_CntryEnabled(  "INCOMING_MSG",
                                                             "STP_CHK",
                                                            &l_gr_stp_flg,
                                                            l_debug_info_ptr ))
                     {
                        APL_GOBACK_FAIL
                     }
                     if(l_gr_stp_flg)
                     {
                     
                        CO_InsertErr(l_debug_info_ptr,
                                       ERR_INVALID_VALUE,
                                       "87A not to be Cust",
                                       APL_NULL_STRING,
                                       APL_NULL_STRING,
                                       __LINE__,
                                       __FILE__);
                     }
                     
						}
					}
				}
					
				

  	if (  (		(!strcmp(h_msg_tag,I_COUNT_CLI))
						|| (!strcmp(h_msg_tag, I_COUNT_CLIA ))
						|| (!strcmp(h_msg_tag, I_COUNT_CLID )) 
						|| (!strcmp(h_msg_tag, I_COUNT_CLIC )) )
						&& ( chr_l_read_88[0] == 'Y' ) )
			 	{
					
					
					memset(int_l_countacc, APL_NULL_CHAR , APL_COUNTACC_LEN);
					memset(chr_l_clientof, APL_NULL_CHAR , 36);
					memset(chr_l_countacc_cname, APL_NULL_CHAR , 66);
				
					int_l_find88_flag = 1;
					int_l_read85_flag = 1;
					
					 if (!strcmp(l_ms_52x_struct_h.domestic_cpclt,l_mt_core_sys_params_struct_h.custody_clt_cd) )
					{	
                 
                  l_gr_stp_flg = 0;
                  if (APL_FAILURE == CO_Chk_CntryEnabled(  "INCOMING_MSG",
                                                          "STP_CHK",
                                                          &l_gr_stp_flg,
                                                         l_debug_info_ptr ))
                  {
                     APL_GOBACK_FAIL
                  }
                  if( l_gr_stp_flg )
                  {
                     if(chr_h_value[0]!='/')
                     {
                        for (i = 0; i< 35; i++ )
                        {
                           chr_l_countacc_cname[i]  = chr_h_value[i];
                        }
                        chr_l_countacc_cname[65] = APL_NULL_CHAR;
                        strcpy(l_ms_52x_struct_h.countclt_cname,chr_l_countacc_cname);
                        
                        
                        if((!strcmp(h_msg_tag, I_COUNT_CLI ))||(!strcmp(h_msg_tag, I_COUNT_CLID ))||(!strcmp(h_msg_tag, I_COUNT_CLIA ))||(!strcmp(h_msg_tag, I_COUNT_CLIC )))
                        {
                           CO_InsertErr(l_debug_info_ptr,
                                          ERR_INVALID_VALUE,
                                          "88 should be with a /",
                                          APL_NULL_STRING,
                                          APL_NULL_STRING,
                                          __LINE__,
                                          __FILE__);

                        }
                     }
                     else
                     {
                        for (i = 0; i< 10; i++ )
                        {
                           int_l_countacc[i]  = chr_h_value[i + 1];
                        }

                        int_l_countacc[10] = APL_NULL_CHAR;

                        

                        if (APL_FAILURE ==IV_Rtv_CNameAcc( int_l_countacc,
                                                                  chr_l_countacc_cname,
                                                                  &int_retstat,
                                                                  l_debug_info_ptr) )
                        {
                        
                           if (int_retstat == MORE_THAN_ONE_ROW_FOUND)
                           {
                              fprintf(fl_userlog,"Too many records for A/c :%s: for customer Name from ACCOUNT table\n", int_l_countacc);
                                *int_p_retstat = IV_CRITCAL_ERROR_IND;
                                 APL_GOBACK_FAIL
                           }
                           else if (int_retstat == IV_CRITCAL_ERROR_IND)
                           {
                              CO_InsertErr(l_debug_info_ptr,
                                             DB_ERR_NO,
                                             "CACCOUNT",
                                             APL_NULL_STRING,
                                             APL_NULL_STRING,
                                             __LINE__,
                                             __FILE__);

                                *int_p_retstat = IV_CRITCAL_ERROR_IND;
                                 APL_GOBACK_FAIL
                           }
                           if (int_retstat == IV_NO_DATA_FOUND_ERR)
                           {
                             fprintf(fl_userlog,"Failed To Select The customer Name from ACCOUNT table\n");
                              CO_InsertErr(l_debug_info_ptr,
                                             ERR_ACCNOT_FND,
                                             int_l_countacc,
                                             APL_NULL_STRING,
                                             APL_NULL_STRING,
                                             __LINE__,
                                             __FILE__);
                           }
                        }
                        chr_l_countacc_cname[65] = APL_NULL_CHAR;
                        strcpy(l_ms_52x_struct_h.countclt_cname,chr_l_countacc_cname);
                        strcpy(l_ms_52x_struct_h.cp_clt,int_l_countacc);
                     }
                  }
                  else
                  {
						
							if  ( chr_h_value[0] == '/' ) 
							{
								for (i = 0; i< 10; i++ )
								{
									int_l_countacc[i]	= chr_h_value[i + 1];
								}

								int_l_countacc[10] = APL_NULL_CHAR;
								
                  		strcpy(chr_mainfuncarea, "ORDERPROC_INCMSG");
                  		strcpy(chr_l_condident, "ACCT_LEN_PROCESS");
                  		if ( APL_FAILURE == CO_Chk_CntryEnabled(chr_mainfuncarea, chr_l_condident, &int_l_exist_a,
                                                                                       l_debug_info_ptr) )
                    		{
                       		APL_GOBACK_FAIL
                    		}
								
								memset(chr_l_new_client, APL_NULL_CHAR, APL_CLIENT_LENGTH);
								memset(chr_l_substr_client,APL_NULL_CHAR,APL_CLIENT_LENGTH);
                       	if ( int_l_exist_a )
                      	{
                      		if ( strlen( int_l_countacc ) == 9 )
                        	{
                          		for ( i = 0; i < 6 ; i++ )
                             	{
                              	chr_l_new_client[i] = int_l_countacc[i];
                             	}
                              strcat(chr_l_new_client,"-");
                             	chr_l_substr_client[0] = int_l_countacc[6] ;
                             	chr_l_substr_client[1] = int_l_countacc[7] ;
                        		chr_l_substr_client[2] = int_l_countacc[8] ;
                             	chr_l_substr_client[3] = APL_NULL_CHAR ;
                        		strcat(chr_l_new_client,chr_l_substr_client);
                     			strcpy( int_l_countacc, chr_l_new_client);
                         	}

                           if ( ( strlen( int_l_countacc ) == 10 ) && (int_l_countacc[6] == ' ' ))
                         	{
                        		for ( i = 0; i < 6 ; i++ )
                        		{
                           		chr_l_new_client[i] = int_l_countacc[i];
                        		}
                        		strcat(chr_l_new_client,"-");
                        		chr_l_substr_client[0] = int_l_countacc[7] ;
                        		chr_l_substr_client[1] = int_l_countacc[8] ;
                        		chr_l_substr_client[2] = int_l_countacc[9] ;
                        		chr_l_substr_client[3] = APL_NULL_CHAR ;
                        		strcat(chr_l_new_client,chr_l_substr_client);
                        		strcpy( int_l_countacc, chr_l_new_client);
                         	}
                       	}	
								
		
								if (APL_FAILURE ==IV_Rtv_CNameAcc(	int_l_countacc,
																						chr_l_countacc_cname,
																						&int_retstat,
																						l_debug_info_ptr) )
								{
                        
                           if (int_retstat == MORE_THAN_ONE_ROW_FOUND)
                           {
                              fprintf(fl_userlog,"Too many records for A/c :%s: for customer Name from ACCOUNT table\n", int_l_countacc);
                              *int_p_retstat = IV_CRITCAL_ERROR_IND;
                              APL_GOBACK_FAIL
                           }
                           else if (int_retstat == IV_CRITCAL_ERROR_IND)
									{
										CO_InsertErr(l_debug_info_ptr,
														DB_ERR_NO,
														"CACCOUNT",
														APL_NULL_STRING,
														APL_NULL_STRING,
														__LINE__,
														__FILE__);

										*int_p_retstat = IV_CRITCAL_ERROR_IND;
										APL_GOBACK_FAIL
									}
									if (int_retstat == IV_NO_DATA_FOUND_ERR)
									{
										fprintf(fl_userlog,"Failed To Select The customer Name from ACCOUNT table\n");
										CO_InsertErr(l_debug_info_ptr,
															ERR_ACCNOT_FND,
															int_l_countacc,
															APL_NULL_STRING,
															APL_NULL_STRING,
															__LINE__,
															__FILE__);
									}	
								}
								chr_l_countacc_cname[65] = APL_NULL_CHAR;
								strcpy(l_ms_52x_struct_h.countclt_cname,chr_l_countacc_cname);
								strcpy(l_ms_52x_struct_h.cp_clt,int_l_countacc);
							}
							else
							{
							   
							   strcpy(chr_mainfuncarea, "INCOMING_MSG");
							   strcpy(chr_l_condident, "PROCESS_88A");
							   if ( APL_FAILURE == CO_Chk_CntryEnabled(chr_mainfuncarea, chr_l_condident, &int_l_exist_a, l_debug_info_ptr))
							      {   APL_GOBACK_FAIL  }
							   if ( (int_l_exist_a) && ( !strcmp(h_msg_tag, I_COUNT_CLIA )))
                           {
                             for (i = 0; i<12 ; i++ )
                              {
                                 chr_l_short_name[i] = chr_h_value[i];
                               }
                            strcat(chr_l_short_name,"\0");
                            if (APL_FAILURE == IV_Rtv_CntAcc(chr_l_short_name,int_l_countacc,chr_l_countacc_cname,&int_retstat,l_debug_info_ptr) )
                            {
                              if (int_retstat == IV_CRITCAL_ERROR_IND)
                                 {
                                  CO_InsertErr(l_debug_info_ptr,
                                           DB_ERR_NO,
                                           "BRK_CD",
                                           APL_NULL_STRING,
                                           APL_NULL_STRING,
                                           __LINE__,
                                           __FILE__);

                                   *int_p_retstat = IV_CRITCAL_ERROR_IND;
                                   APL_GOBACK_FAIL
                                 }     

                              if (int_retstat == IV_NO_DATA_FOUND_ERR)
                               {
                                 fprintf(fl_userlog,"Short Name with corresponding BIC CODE %s Not Found in the system\n"
,chr_l_short_name);
                                 CO_InsertErr(l_debug_info_ptr,
                                         ERR_REC_NOTFND,
                                         "BRK_CD",
                                         chr_l_short_name,
                                         APL_NULL_STRING,
                                         __LINE__,
                                         __FILE__);
                                 strncpy(chr_l_countacc_cname,chr_h_value,35);
                               }
                             }
                             strcpy(l_ms_52x_struct_h.countclt_cname,chr_l_countacc_cname);
                             strcpy(l_ms_52x_struct_h.cp_clt,int_l_countacc);
                           }
                        else {     							        
                  		CO_InsertErr(l_debug_info_ptr,
                     		                 ERR_INVALID_VALUE,
                        		              "88C/D not with A/C",
                           		           APL_NULL_STRING,
                              		        APL_NULL_STRING,
                                 		     __LINE__,
                                    		  __FILE__);
                     for (i = 0; i< 35; i++ )
                      {
                        chr_l_countacc_cname[i]  = chr_h_value[i];

                      }
                     chr_l_countacc_cname[65] = APL_NULL_CHAR;
                     strcpy(l_ms_52x_struct_h.countclt_cname,chr_l_countacc_cname);
                   	} }	
						}
					}				
					
					


						else if (chr_h_value[0] == '/')
						{	
							for ( i = 0; i < 10; i++)
							{	
								chr_l_clientof[i]		= chr_h_value[i + 1]; 	
							}
	
							chr_l_clientof[10] = APL_NULL_CHAR;
							strcpy(l_ms_52x_struct_h.clientof,chr_l_clientof);
					 	}
					 	else
						{
							for (i = 0; i< 35; i++ )
							{
								chr_l_clientof[i]	= chr_h_value[i];
							}
	
							chr_l_clientof[35] = APL_NULL_CHAR;
							strcpy(l_ms_52x_struct_h.clientof,chr_l_clientof);				
						}
					}	

   

		if (((!strcmp(h_msg_tag, I_DELIV_INST_PARTYA))||(!strcmp(h_msg_tag, I_DELIV_INST_PARTYD)))
					&&(int_l_find88_flag==0))
				{
					

				if (int_l_read85_flag==1)
				{
					
					memset(int_l_countacc, APL_NULL_CHAR , APL_COUNTACC_LEN);
					memset(chr_l_clientof, APL_NULL_CHAR , 36);
					memset(chr_l_clientof_cname, APL_NULL_CHAR , 66);
					memset(chr_l_countacc_cname, APL_NULL_CHAR , 66);
					memset(chr_l_short_name, APL_NULL_CHAR , 36);

				
               
					
               l_gr_stp_flg = 0;
               if (APL_FAILURE == CO_Chk_CntryEnabled(  "INCOMING_MSG",
                                                      "STP_CHK",
                                                      &l_gr_stp_flg,
                                                      l_debug_info_ptr ))
               {
                  APL_GOBACK_FAIL
               }

           
               if ( (!strcmp(l_ms_52x_struct_h.domestic_cpclt,l_mt_core_sys_params_struct_h.custody_clt_cd) ) )
					{
						if (chr_h_value[0] == '/')
						{
                     for (i = 0; i< 10; i++ )
                       {
                         int_l_countacc[i]  = chr_h_value[i + 1];
                       }

                     int_l_countacc[10] = '\0';
							
                  	strcpy(chr_mainfuncarea, "ORDERPROC_INCMSG");
                  	strcpy(chr_l_condident, "ACCT_LEN_PROCESS");
                  	if ( APL_FAILURE == CO_Chk_CntryEnabled(chr_mainfuncarea, chr_l_condident, &int_l_exist_a,
                                                                                       l_debug_info_ptr) )
                    	{
                       	APL_GOBACK_FAIL
                    	}
							
							memset(chr_l_new_client, APL_NULL_CHAR, APL_CLIENT_LENGTH);
							memset(chr_l_substr_client,APL_NULL_CHAR,APL_CLIENT_LENGTH);
                     if ( int_l_exist_a )
                     {
                      	if ( strlen( int_l_countacc ) == 9 )
                        {
                        	for ( i = 0; i < 6 ; i++ )
                           {
                           	chr_l_new_client[i] = int_l_countacc[i];
                           }
                           strcat(chr_l_new_client,"-");
                           chr_l_substr_client[0] = int_l_countacc[6] ;
                           chr_l_substr_client[1] = int_l_countacc[7] ;
                        	chr_l_substr_client[2] = int_l_countacc[8] ;
                           chr_l_substr_client[3] = APL_NULL_CHAR ;
                        	strcat(chr_l_new_client,chr_l_substr_client);
                     		strcpy( int_l_countacc, chr_l_new_client);
                        }

                        if ( ( strlen( int_l_countacc ) == 10 ) && (int_l_countacc[6] == ' ' ))
                        {
                        	for ( i = 0; i < 6 ; i++ )
                        	{
                           	chr_l_new_client[i] = int_l_countacc[i];
                        	}
                        	strcat(chr_l_new_client,"-");
                        	chr_l_substr_client[0] = int_l_countacc[7] ;
                        	chr_l_substr_client[1] = int_l_countacc[8] ;
                        	chr_l_substr_client[2] = int_l_countacc[9] ;
                        	chr_l_substr_client[3] = APL_NULL_CHAR ;
                        	strcat(chr_l_new_client,chr_l_substr_client);
                        	strcpy( int_l_countacc, chr_l_new_client);
                        }
                    	}

                     if (APL_FAILURE ==IV_Rtv_CNameAcc( int_l_countacc,
                                                               chr_l_countacc_cname,
                                                               &int_retstat,
                                                               l_debug_info_ptr) )
                       {
                        
                        if (int_retstat == MORE_THAN_ONE_ROW_FOUND)
                        {
                           fprintf(fl_userlog,"Too many records for A/c :%s: for customer Name from ACCOUNT table\n", int_l_countacc);
                           *int_p_retstat = IV_CRITCAL_ERROR_IND;
                           APL_GOBACK_FAIL
                        }
                        else if (int_retstat == IV_CRITCAL_ERROR_IND)
                          {
                            CO_InsertErr(l_debug_info_ptr,
                                           DB_ERR_NO,
                                           "CACCOUNT",
                                           APL_NULL_STRING,
                                           APL_NULL_STRING,
                                           __LINE__,
                                           __FILE__);

                             *int_p_retstat = IV_CRITCAL_ERROR_IND;
                             APL_GOBACK_FAIL
                           }

                         if (int_retstat == IV_NO_DATA_FOUND_ERR)
                           {
                            fprintf(fl_userlog,"Failed To Select The customer Name from ACCOUNT table\n");
                            CO_InsertErr(l_debug_info_ptr,
 	                                          ERR_ACCNOT_FND,
                                           int_l_countacc,	
  									                APL_NULL_STRING,
                                           APL_NULL_STRING,
                                           __LINE__,
                                           __FILE__);
                           }
                        }
                        strcpy(l_ms_52x_struct_h.countclt_cname,chr_l_countacc_cname);
                        strcpy(l_ms_52x_struct_h.cp_clt,int_l_countacc);
                     } 
                else
                  {
                  for (i = 0; i<12 ; i++ )
                  {
                     chr_l_short_name[i] = chr_h_value[i];
                  }
                  strcat(chr_l_short_name,"\0");
                  if (APL_FAILURE == IV_Rtv_CntAcc(chr_l_short_name,int_l_countacc,chr_l_countacc_cname,&int_retstat,l_debug_info_ptr) )
                     {
                        if (int_retstat == IV_CRITCAL_ERROR_IND)
                          {
                            CO_InsertErr(l_debug_info_ptr,
                                           DB_ERR_NO,
                                           "BRK_CD",
                                           APL_NULL_STRING,
                                           APL_NULL_STRING,
                                           __LINE__,
                                           __FILE__);

                             *int_p_retstat = IV_CRITCAL_ERROR_IND;
                             APL_GOBACK_FAIL

                           }

                        if (int_retstat == IV_NO_DATA_FOUND_ERR)
                        {
                          fprintf(fl_userlog,"Short Name with corresponding BIC CODE %s Not Found in the system\n"
,chr_l_short_name);
                          CO_InsertErr(l_debug_info_ptr,
                                         ERR_REC_NOTFND,
                                         "BRK_CD",
                                         chr_l_short_name,
                                         APL_NULL_STRING,
                                         __LINE__,
                                         __FILE__);
                         strncpy(chr_l_countacc_cname,chr_h_value,35);
                        }
                     }
                     strcpy(l_ms_52x_struct_h.countclt_cname,chr_l_countacc_cname);
                     strcpy(l_ms_52x_struct_h.cp_clt,int_l_countacc);
                  }
               }
					else if ( !strcmp(h_msg_tag, I_DELIV_INST_PARTYD) && (chr_h_value[0] != '/') )
               {
							for (i = 0; i< 35 ; i++ )
							{
								chr_l_countacc_cname[i]  = chr_h_value[i];
							}
							strcpy(l_ms_52x_struct_h.countclt_cname,chr_l_countacc_cname);
					}

		

					
					
					else if (( !strcmp(h_msg_tag, I_DELIV_INST_PARTYA) ) && (!strcmp(l_ms_52x_struct_h.domestic_cpclt,l_mt_core_sys_params_struct_h.custody_clt_cd) ) && (l_gr_stp_flg ==0))
					{
						
						for (i = 0; i<12 ; i++ )
						{
							chr_l_short_name[i] = chr_h_value[i];
						}
				
						
						if (APL_FAILURE == IV_Rtv_BICCDAcc(chr_l_short_name,int_l_countacc,chr_l_countacc_cname,&int_retstat,l_debug_info_ptr) )	
						   {
								if (int_retstat == IV_NO_DATA_FOUND_ERR)
								{
								fprintf(fl_userlog,"Short Name with corresponding BIC CODE %s Not Found in the system\n",chr_l_short_name);
								strncpy(chr_l_tshort_name,chr_l_short_name,15);
								CO_InsertErr(l_debug_info_ptr,
									ERR_REC_NOTFND,
								        "BRK_CD",
								        chr_l_tshort_name,
								        APL_NULL_STRING,
									        __LINE__,
									        __FILE__);
                                                        }
					  	   	}
                      strcpy(l_ms_52x_struct_h.countclt_cname,chr_l_countacc_cname);
                      strcpy(l_ms_52x_struct_h.cp_clt,int_l_countacc);
							 
						

						 if (chr_h_value[0] == '/')	
						 {
 		                if ( !strcmp(h_msg_tag, I_DELIV_INST_PARTYA) )
   	                {
        		              CO_InsertErr(   l_debug_info_ptr, ERR_INVALID_VALUE,
            	                           "85A have a /",
               	                        APL_NULL_STRING,
                  	                     APL_NULL_STRING,
                     	                  __LINE__,
                        	               __FILE__);
                  	}	
						}
                }
					else if ((chr_h_value[0] == '/')&&
								(!strcmp(l_ms_52x_struct_h.domestic_cpclt,l_mt_core_sys_params_struct_h.custody_clt_cd) ) )
					{
						for (i = 0; i< 10; i++ )
						{
							int_l_countacc[i]  = chr_h_value[i + 1];
						}
						int_l_countacc[10] = '\0';
						 
                  strcpy(chr_mainfuncarea, "ORDERPROC_INCMSG");
                  strcpy(chr_l_condident, "ACCT_LEN_PROCESS");
                  if ( APL_FAILURE == CO_Chk_CntryEnabled(chr_mainfuncarea, chr_l_condident, &int_l_exist_a,
                                                                                       l_debug_info_ptr) )
                  {
                  	APL_GOBACK_FAIL
                  }
						
						memset(chr_l_new_client, APL_NULL_CHAR, APL_CLIENT_LENGTH);
						memset(chr_l_substr_client,APL_NULL_CHAR,APL_CLIENT_LENGTH);	
                  if ( int_l_exist_a )
                  {
                  	if ( strlen( int_l_countacc ) == 9 )
                     {
                     	for ( i = 0; i < 6 ; i++ )
                        {
                        	chr_l_new_client[i] = int_l_countacc[i];
                        }
                        strcat(chr_l_new_client,"-");
                        chr_l_substr_client[0] = int_l_countacc[6] ;
                        chr_l_substr_client[1] = int_l_countacc[7] ;
                        chr_l_substr_client[2] = int_l_countacc[8] ;
                        chr_l_substr_client[3] = APL_NULL_CHAR ;
                        strcat(chr_l_new_client,chr_l_substr_client);
                     	strcpy( int_l_countacc, chr_l_new_client);
                   	}

                     if ( ( strlen( int_l_countacc ) == 10 ) && (int_l_countacc[6] == ' ' ))
                     {
                     	for ( i = 0; i < 6 ; i++ )
                        {
                        	chr_l_new_client[i] = int_l_countacc[i];
                        }
                        strcat(chr_l_new_client,"-");
                        chr_l_substr_client[0] = int_l_countacc[7] ;
                        chr_l_substr_client[1] = int_l_countacc[8] ;
                        chr_l_substr_client[2] = int_l_countacc[9] ;
                        chr_l_substr_client[3] = APL_NULL_CHAR ;
                        strcat(chr_l_new_client,chr_l_substr_client);
                        strcpy( int_l_countacc, chr_l_new_client);
                    	}
                	}

						if (APL_FAILURE ==IV_Rtv_CNameAcc( int_l_countacc,
																				chr_l_countacc_cname,
																				&int_retstat,
																				l_debug_info_ptr) )
						{
                  
                     if (int_retstat == MORE_THAN_ONE_ROW_FOUND)
                     {
                        fprintf(fl_userlog,"Too many records for A/c :%s: for customer Name from ACCOUNT table\n", int_l_countacc);
                        *int_p_retstat = IV_CRITCAL_ERROR_IND;
                        APL_GOBACK_FAIL
                     }
                     else if (int_retstat == IV_CRITCAL_ERROR_IND)
							{
								CO_InsertErr(l_debug_info_ptr,
													DB_ERR_NO,
													"CACCOUNT",
													APL_NULL_STRING,
													APL_NULL_STRING,
													__LINE__,
													__FILE__);

									*int_p_retstat = IV_CRITCAL_ERROR_IND;
									APL_GOBACK_FAIL
							}

							

							if (int_retstat == IV_NO_DATA_FOUND_ERR)
							{
							
								strcpy(l_ms_52x_struct_h.clientof, chr_l_clientof);	
							}
						}
						strcpy(l_ms_52x_struct_h.countclt_cname,chr_l_countacc_cname);
						strcpy(l_ms_52x_struct_h.cp_clt,int_l_countacc);

					}
					else if (!strcmp(l_ms_52x_struct_h.domestic_cpclt,l_mt_core_sys_params_struct_h.custody_clt_cd) )
					{
						for (i = 0; i< 35; i++ )
						{
							chr_l_countacc_cname[i]  = chr_h_value[i];
						}
						strcpy(l_ms_52x_struct_h.countclt_cname,chr_l_countacc_cname);
                  
                  
                  
                  
                  if(l_gr_stp_flg)
                  {
                     CO_InsertErr(   l_debug_info_ptr, ERR_INVALID_VALUE,
                                       "85 should be with a /",
                                        APL_NULL_STRING,
                                        APL_NULL_STRING,
                                        __LINE__,
                                        __FILE__);
                  }
					}
					else if (chr_h_value[0] == '/')
					{
						for ( i = 0; i < 10; i++)
						{
							chr_l_clientof[i]    = chr_h_value[i + 1];
						}
						chr_l_clientof[10] = APL_NULL_CHAR;

						if (APL_FAILURE ==IV_Rtv_CNameAcc( chr_l_clientof,
																				chr_l_clientof_cname,
																				&int_retstat,
																				l_debug_info_ptr) )
						{
                  
                     if (int_retstat == MORE_THAN_ONE_ROW_FOUND)
                     {
                        fprintf(fl_userlog,"Too many records for A/c :%s: for customer Name from ACCOUNT table\n", chr_l_clientof);
                        *int_p_retstat = IV_CRITCAL_ERROR_IND;
                        APL_GOBACK_FAIL
                     }
                     else if (int_retstat == IV_CRITCAL_ERROR_IND)
							{
								CO_InsertErr(l_debug_info_ptr,
													DB_ERR_NO,
													"CACCOUNT",
													APL_NULL_STRING,
													APL_NULL_STRING,
													__LINE__,
													__FILE__);

									*int_p_retstat = IV_CRITCAL_ERROR_IND;
									APL_GOBACK_FAIL
							}

							

							if (int_retstat == IV_NO_DATA_FOUND_ERR)
							{
							
								strcpy(l_ms_52x_struct_h.clientof, chr_l_clientof);
							}
						}
						strncpy(l_ms_52x_struct_h.clientof, chr_l_clientof_cname, 35);
						l_ms_52x_struct_h.clientof[35] = '\0';
					}
					else
					{
						for (i = 0; i< 30; i++ )
						{
							chr_l_clientof_cname[i] = chr_h_value[i];
						}

						chr_l_clientof_cname[35] = '\0';
						strncpy(l_ms_52x_struct_h.clientof,chr_l_clientof_cname,35);
						l_ms_52x_struct_h.clientof[35] = '\0';
					}
				}
				else     
				{
					strncpy(l_ms_52x_struct_h.clientof,chr_h_value,35);
					l_ms_52x_struct_h.clientof[35]='\0';
				}
				} 

		if (!strcmp(h_msg_tag,I_AMOUNT_CCY) )
				{
					
					for ( i = 0; i< 3 ; i++)
					{
						l_ms_52x_struct_h.currency_code[i]  = chr_h_value[i];
				
					}
					l_ms_52x_struct_h.currency_code[3] = APL_NULL_CHAR;

					for ( i = 0; i < 15 ; i++)
					{
						dbl_l_amount_a[i]	= chr_h_value[ i + 3 ];
					}
					dbl_l_amount_a[15] = APL_NULL_CHAR;

					

					if (APL_FAILURE == CO_Proc_RemoveDot(dbl_l_amount_a,
															chr_l_new_amount,
															l_debug_info_ptr) )
					{
						fprintf(fl_userlog,"Failed To Remove The Decimal From The Amount\n");
						*int_p_retstat = IV_CRITCAL_ERROR_IND;
						APL_GOBACK_FAIL
					}

					

					if (APL_FAILURE == CO_Proc_ReplaceComma(	chr_l_new_amount,
																dbl_l_amount_a,
																l_debug_info_ptr) )
					{
						fprintf(fl_userlog,"Failed to Replace The Commas in Amount\n");
						*int_p_retstat = IV_CRITCAL_ERROR_IND;
						APL_GOBACK_FAIL
					}
					l_ms_52x_struct_h.amount = atof(dbl_l_amount_a);
					
					
					
	          	if(APL_FAILURE == CO_Chk_CntryEnabled("SETUP_MULT_CCY",
                                                 "MULTI_CCY",
                                                  &int_l_multi_ccy,
                                                  l_debug_info_ptr))
				 	{
						APL_GOBACK_FAIL
				 	}

				 	if( int_l_multi_ccy )
				 	{    



                  EXEC SQL SELECT COUNT(*) INTO :int_l_int_multiccy_rec:i_multiccy_rec FROM DL_CASHCLT
                  WHERE CLIENT = :chr_g_str_client
                  AND CURRENCY_CD = :l_ms_52x_struct_h.CCY_CD;

						IS_ANY_ORA_ERROR

						if( int_l_int_multiccy_rec == 0 )   
						{
								CO_InsertErr(l_debug_info_ptr, ERR_INVALID_CASHACC_FORTRD, 
													l_ms_52x_struct_h.currency_code, 
													"Amount Currency", 
													APL_NULL_STRING, 
													__LINE__, __FILE__);
						
						}

				 	}

					

				}

		
		
		if  (( !strcmp(h_msg_tag, I_CLI_FOR_PYMTC) ) && (!strcmp(g_mt_commonsys_params_struct_h.nation_code,"GR"))) 
				{
					memset(chr_l_cash_acc, APL_NULL_CHAR , LINERR_LENGTH);
					if (chr_h_value[0] == '/')
					{
						strncpy(chr_l_cash_acc, chr_h_value + 1, APL_CLIENT_LENGTH);

						

						#ifdef EMU_PROCESSING
							if ( int_g_emutransperiod == 1 )
								continue;
						#endif

						for ( i = 1, a = 0; i <= APL_CLIENT_LENGTH; i++ )
						{
							if ( (chr_h_value[i] != '-') && (chr_h_value[i] != '/') )
							{
								chr_l_cash_acc[a] = chr_h_value[i];
								a++;
							}
						}

						if ( a < 10 ) 
						{
							if (APL_FAILURE == CO_PadString(chr_l_cash_acc, 'L',
																	 APL_CLIENT_LENGTH, "0",
																	 l_debug_info_ptr) )
							{
								*int_p_retstat = IV_CRITCAL_ERROR_IND;
								APL_GOBACK_FAIL
							}
						}
					}
					else
					{
						strncpy(chr_l_cash_acc, chr_h_value, APL_CLIENT_LENGTH);
						fprintf(fl_userlog,"Value int_found in  Tag 53C does not begin with '/'.\n");

						CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_FND, 
										 	chr_l_cash_acc, APL_NULL_STRING, 
										 	APL_NULL_STRING, __LINE__, __FILE__);

						continue;
					}

					int_retstat = IV_SUCCESS;

					if ( APL_FAILURE == MT_Chk_CashAcc(chr_l_client_a, chr_l_cash_acc, 
																  (char *)NULL, &int_retstat, 
																  l_debug_info_ptr) )
					{
						if ( int_retstat == IV_CRITCAL_ERROR_IND )
						{
							*int_p_retstat = int_retstat;

							APL_GOBACK_FAIL
						}
						else if ( int_retstat == IV_NO_DATA_FOUND_ERR )
						{
							fprintf(fl_userlog,"Failed To Select The Cash Account from CCASHACC table as Account Not Found in system %s\n",chr_l_cash_acc);

							CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_FND, 
										 		chr_l_cash_acc, APL_NULL_STRING, 
										 		APL_NULL_STRING, __LINE__, __FILE__);
						}
					}

					strcpy(l_ms_52x_struct_h.gl_client, chr_l_cash_acc);
				}

 	if (!strcmp(h_msg_tag,I_NOTE) )
				{
					memset(chr_l_str, APL_NULL_CHAR , LINERR_LENGTH);
					strcpy(h_info, chr_h_value);
					do
					{
						if (chr_l_str[0] == '-') break;
						strcat( h_info, chr_l_str);
						memset(chr_l_str, APL_NULL_CHAR , LINERR_LENGTH);
					} while ( fscanf(fl_incmsg, "%[^\n]\n", chr_l_str) );

               
               EXEC SQL SELECT rtrim(upper(:h_info)) INTO :chr_h_capnote FROM DUAL;

               IS_ANY_ORA_ERROR

               
               strcpy(l_ms_52x_struct_h.info,chr_h_capnote);

				} 
		} 

           
           

            EXEC SQL select LINK_TAG into :chr_g_splacc from PRO_GSSPLVAL
            where MAIN_FUN = 'INCOMING_MSG' and SUB_PROCESS = 'SMI_REMOTE' and
            NATION = :g_mt_commonsys_params_struct_h.nation_code;

            IS_ANY_ORA_ERROR

				int_l_remotetrade=0;
	          if(APL_FAILURE == CO_Chk_CntryEnabled("INCOMING_MSG",
                                                 "REMOTE_TRADE",
                                                  &int_l_remotetrade,
                                                  l_debug_info_ptr))
             {
                APL_GOBACK_FAIL
             }

             if(int_l_remotetrade)
             {
					memset(chr_h_note_prop,APL_NULL_CHAR,21);
					strncpy(chr_h_note_prop,h_info,21);

					memset(chr_h_note_nprop,APL_NULL_CHAR,15);
					strncpy(chr_h_note_nprop,h_info,15);

					strncpy(chr_l_bic_code_new,chr_l_bic_code,8);
               if( !strcmp(chr_h_note_prop,I_GR_REM_PR) && !strcmp(chr_l_bic_code_new,"XATHGRA1") )
                 strcpy(l_ms_52x_struct_h.dl_class,"50");
               if( !strcmp(chr_h_note_nprop,I_GR_REM_NPR) && !strcmp(chr_l_bic_code_new,"XATHGRA1") )
                 strcpy(l_ms_52x_struct_h.dl_class,"35");
             }
             


		

		if (strlen(l_ms_52x_struct_h.clientof) == 0)
		{
            strncpy(l_ms_52x_struct_h.clientof,l_ms_52x_struct_h.countclt_cname,35);
            l_ms_52x_struct_h.clientof[35] = '\0';
		}
      

      #ifdef EMU_PROCESSING

         if ( strlen(l_ms_52x_struct_h.currency_code) )
         {
            int_l_ccy_flg = 0;

            switch(int_g_emutransperiod)
            {
               case 0: break;

               

               case 1:
                  if ( APL_FAILURE ==
                           CO_Chk_SplVal("EMUCONV", "NCD_CCY",
                                         l_ms_52x_struct_h.currency_code,
                                         &int_l_ccy_flg, l_debug_info_ptr) )
                  {
                     *int_p_retstat = IV_CRITCAL_ERROR_IND;
                     APL_GOBACK_FAIL
                  }
                  if ( !int_l_ccy_flg )
                  {
                     CO_InsertErr(l_debug_info_ptr, ERR_DEAL_CURRENCY_NOT_ALLOWED,
                                    l_ms_52x_struct_h.currency_code,APL_NULL_STRING,
                                    APL_NULL_STRING, __LINE__, __FILE__);

                     strcpy(chr_g_msg_sts, "RPR");
                  }

                  break;

               case 2:
               case 3:
                  if ( APL_FAILURE ==
                           CO_Chk_SplVal("EMUCONV", "EMU_CCY",
                                         l_ms_52x_struct_h.currency_code,
                                         &int_l_ccy_flg, l_debug_info_ptr) )
                  {
                     *int_p_retstat = IV_CRITCAL_ERROR_IND;
                     APL_GOBACK_FAIL
                  }

                  if ( !int_l_ccy_flg )
                  {
                     CO_InsertErr(l_debug_info_ptr, ERR_DEAL_CURRENCY_NOT_ALLOWED,
                                   l_ms_52x_struct_h.currency_code,APL_NULL_STRING,
                                    APL_NULL_STRING, __LINE__, __FILE__);

                     strcpy(chr_g_msg_sts, "RPR");
                  }

                  break;

               default: break;
            }
         }

      #endif
      if ( (!strcmp(l_ms_52x_struct_h.domestic_cpclt,l_mt_core_sys_params_struct_h.custody_clt_cd) ) && (strlen(l_ms_52x_struct_h.cp_clt)==0) )
		 {
            CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_FND, "COUNTERPARTY", APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) ;
      }
	
			
		if((strcmp(l_ms_52x_struct_h.domestic_cpclt,l_mt_core_sys_params_struct_h.custody_clt_cd) ) && (strlen(l_ms_52x_struct_h.cp_clt)==0)&& (!strcmp(g_mt_commonsys_params_struct_h.nation_code,"TR")) )
		{
			strcpy(l_ms_52x_struct_h.clientof,APL_NULL_STRING);
		}

		*p_ms_inc_msg_struct_h_a = l_ms_52x_struct_h;
		*p_no_of_deal  = int_h_no_of_trd;	

		

		*int_p_retstat = IV_SUCCESS;

		APL_GOBACK_SUCCESS

		
      RETURN_SUCCESS:
		{
				  APL_IF_DEBUG
				  {
					  CO_ProcMonitor(p_fl_userlog,"Exiting out of I_52x_parsefn sucessfully\n", NULL, NULL);
				  }
				  return (APL_SUCCESS);
		}

      RETURN_FAILURE:
		{
				  APL_IF_DEBUG
				  {
					  CO_ProcMonitor(p_fl_userlog,"Exiting out of I_52x_parsefn unsucessfully\n", NULL, NULL);
				  }
				  return (APL_FAILURE);
		}
	}

	


	int MS_Proc_IncMsg52x( FILE							*fl_incmsg,
							char							*p_msg_no,
							char 							*p_repair_flg,
							char 							*p_manual_deal_flg,
							FILE							*fl_userlog,
							FILE							*p_fl_userlog,
							char							*chr_fl_name,
							FILE							*fl_repairrpt,	
							char							*p_mesg_body,
							INTL_ENV_DATA_STRUCT_H		*p_intlenv_data_struct_h,
							DEBUG_INFO_STRUCT_H				**l_debug_info_ptr)
{
		

		int MS_Proc_IncMsg52xParse(FILE              *fl_incmsg,
                       char               *p_msg_no,
                       MS_52X_STRUCT_H       *p_ms_inc_msg_struct_h_a,
                       MS_REP_STRUCT_H   **p_ms_rep_struct_h,
                       double             *p_tot_qty,
                       int                *p_no_of_deal,
                       FILE               *fl_userlog,
                       FILE               *p_fl_userlog,
                       int                *int_p_retstat,
                       INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h,
                       DEBUG_INFO_STRUCT_H       **l_debug_info_ptr);

		extern int MS_Chk_SWFTMsg(MS_INC_MSG_STRUCT_H	 p_ms_inc_msg_struct_h_a,
                       				 int                p_no_of_deal,
                       				 char               *chr_p_client,
                       				 char               *p_correct_msg,
                       				 DEBUG_INFO_STRUCT_H       **l_debug_info_ptr);
		extern int MS_Proc_SWFDLAdd(int                   p_no_of_deal,
                    				 MS_INC_MSG_STRUCT_H      *p_ms_inc_msg_struct_h_a,
                    				 MS_REP_STRUCT_H      **p_ms_rep_struct_h,
										 MS_INC_LINKINFO_STRUCT_H	  **p_ms_inc_linkinfo_struct_h,		
                    				 double                p_tot_instqty,
                    				 FILE                  *fl_userlog,
                    				 FILE                  *p_fl_userlog,
                    				 char                  *chr_fl_name,
                    				 FILE                  *fl_repairrpt,
                    				 char                  *p_mesg_body,
                    				 INTL_ENV_DATA_STRUCT_H    *p_intlenv_data_struct_h,
                    				 DEBUG_INFO_STRUCT_H          **l_debug_info_ptr);

		

		int 		int_l_dummy;
	   int 		int_retstat = 0;	
		char 		chr_h_client1[APL_CLIENT_LENGTH],chr_h_dummy_acc[APL_CLIENT_LENGTH];
		char 		h_indentity_no[APL_TXNREFNO_LEN];
		char 		h_ora_rowid[APL_ROWID_LEN];
		char 		h_fail_cd[3];
		char		chr_h_correct_msg[2]							= APL_NULL_STRING;
		char		chr_l_trdfordummyinrpr 						= 'N';
		int		int_h_no_of_trd									= 0;
		double	h_tot_quantity									= 0;
		char		h_dl_client[APL_CLIENT_LENGTH]				= APL_NULL_STRING;
		char  	chr_h_system_date[APL_DATE_LEN];
		char     chr_l_trd_locn[APL_LOCNCODE_LENGTH] 			= APL_NULL_STRING;
		
		char     chr_l_h_trd_locn[APL_LOCNCODE_LENGTH]      = APL_NULL_STRING;
		
		int 		int_l_rpr_seq_num = 0;
		DL_MSGLINK_STRUCT_H   l_dl_msglink_struct_h;
		

		int int_l_txn_type=0;
		char chr_l_unique_ref_num[APL_UNIQUE_REF_NUM_LEN]=APL_NULL_STRING;

		

		EXEC SQL BEGIN DECLARE SECTION;
		short int i_failreas_cd = 0; 
		short int int_i_dummy_acc = 0;
		
		int int_h_count				= 0;
		int int_h_count1			= 0;
		short	i_dl_client		= 0;
		short i_indentity_no			= 0;		
		short l_i_trd_locn = 0;
		EXEC SQL VAR chr_l_h_trd_locn IS STRING;
		
		struct sqlca sqlca; 
		EXEC SQL VAR h_dl_client IS STRING;
		EXEC SQL VAR chr_h_dummy_acc IS STRING;
		EXEC SQL VAR h_indentity_no IS STRING;
		EXEC SQL END DECLARE SECTION;

		DL_DEALREPAIR_STRUCT_H      l_dl_dealrepair_struct_h;
		DL_DEAL_OTH_STRUCT_H       	l_dl_deal_oth_struct_h;
		MS_52X_STRUCT_H					l_ms_52x_struct_h;
		MS_REP_STRUCT_H				*h_rep_seq_struct = (MS_REP_STRUCT_H  *)NULL;
		MS_INC_LINKINFO_STRUCT_H         *h_inc_linkage_info = (MS_INC_LINKINFO_STRUCT_H *)NULL; 
		PRO_GSEQNUM_STRUCT_H      	*l_progseqnum_struct_h     = NULL;
		MS_INC_MSG_STRUCT_H        	l_ms_inc_msg_struct_h;

		memset (&l_ms_inc_msg_struct_h,NULL,sizeof(MS_INC_MSG_STRUCT_H));
		memset(chr_h_system_date,NULL ,APL_DATE_LEN);
		memset(&l_ms_52x_struct_h, NULL ,sizeof(MS_52X_STRUCT_H) );
		memset(&l_dl_msglink_struct_h,NULL,sizeof(DL_MSGLINK_STRUCT_H));
		sqlca.sqlcode = 0L;
		

		int_retstat = IV_SUCCESS;

		if (APL_FAILURE == MS_Proc_IncMsg52xParse(fl_incmsg,
													p_msg_no,
													&l_ms_52x_struct_h,
													&h_rep_seq_struct,
													&h_tot_quantity,
													&int_h_no_of_trd,
													fl_userlog,
													p_fl_userlog,
													&int_retstat,
													p_intlenv_data_struct_h,
													l_debug_info_ptr) )
		{
			fprintf(fl_userlog,"Failed to Parse 52x msg\n");
			APL_GOBACK_FAIL
		}

		strcpy(l_ms_inc_msg_struct_h.h_deal_code,l_ms_52x_struct_h.h_deal_code);
      strcpy(l_ms_inc_msg_struct_h.swift_msg_no,l_ms_52x_struct_h.swift_msg_no);
      strcpy(l_ms_inc_msg_struct_h.setl_dt,l_ms_52x_struct_h.setl_dt);
      strcpy(l_ms_inc_msg_struct_h.indentity_no,l_ms_52x_struct_h.indentity_no);
      strcpy(l_ms_inc_msg_struct_h.addindentity_no,l_ms_52x_struct_h.addindentity_no);
      strcpy(l_ms_inc_msg_struct_h.dl_dt,l_ms_52x_struct_h.dl_dt);
      strcpy(l_ms_inc_msg_struct_h.dl_loc,l_ms_52x_struct_h.dl_loc);
      strcpy(l_ms_inc_msg_struct_h.instr_name,l_ms_52x_struct_h.instr_name);
      strcpy(l_ms_inc_msg_struct_h.instr_code,l_ms_52x_struct_h.instr_code);
      strcpy(l_ms_inc_msg_struct_h.inst_client,l_ms_52x_struct_h.inst_client);
      strcpy(l_ms_inc_msg_struct_h.inst_clnt_clr_name,l_ms_52x_struct_h.inst_clnt_clr_name);
      strcpy(l_ms_inc_msg_struct_h.cp_clt,l_ms_52x_struct_h.cp_clt);
      strcpy(l_ms_inc_msg_struct_h.countclt_cname,l_ms_52x_struct_h.countclt_cname);
      strcpy(l_ms_inc_msg_struct_h.domestic_cpclt,l_ms_52x_struct_h.domestic_cpclt);
      strcpy(l_ms_inc_msg_struct_h.domcpclt_cd_cname,l_ms_52x_struct_h.domcpclt_cd_cname);
      strcpy(l_ms_inc_msg_struct_h.clientof,l_ms_52x_struct_h.clientof);
      strcpy(l_ms_inc_msg_struct_h.currency_code,l_ms_52x_struct_h.currency_code);
      l_ms_inc_msg_struct_h.amount=l_ms_52x_struct_h.amount;
      strcpy(l_ms_inc_msg_struct_h.info,l_ms_52x_struct_h.info);
      strcpy(l_ms_inc_msg_struct_h.gl_client,l_ms_52x_struct_h.gl_client);
      strcpy(l_ms_inc_msg_struct_h.dl_class,l_ms_52x_struct_h.dl_class);
		strcpy(l_ms_inc_msg_struct_h.h_rpr_ind,p_repair_flg);
		strcpy(l_ms_inc_msg_struct_h.manual_ind_dl_flg,p_manual_deal_flg);
	

		

		if (APL_FAILURE == CO_RtvMachDtTime(chr_h_system_date, l_debug_info_ptr) )
		{
			fprintf(fl_userlog,"failed To get System Date\n");
			APL_GOBACK_FAIL
		}

		if ( APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr) ) 
		{
			fprintf(fl_repairrpt,"%9sTRADE REJECTION REPORT FOR MESSAGE FILE %s\n", " ", chr_fl_name);
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
			fprintf(fl_repairrpt,"%s\n\n", p_mesg_body);
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
			fprintf(fl_repairrpt, "%9sErrors int_found while parsing the msg. Please identify to the chr_log h_file for details.\n", " ");
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
			fflush(fl_repairrpt);

		  

			l_progseqnum_struct_h = (PRO_GSEQNUM_STRUCT_H *)calloc(1,sizeof(PRO_GSEQNUM_STRUCT_H));
			APL_MALLOC_FAIL(l_progseqnum_struct_h);
			memset(l_progseqnum_struct_h,NULL,sizeof(PRO_GSEQNUM_STRUCT_H));

		    strcpy(l_progseqnum_struct_h->sequencename ,DEAL_REPAIR_SEQNAME);	
			int_l_rpr_seq_num = CO_RtvNxtSeqNum(l_progseqnum_struct_h ,
														l_debug_info_ptr);
			if (APL_FAILURE == int_l_rpr_seq_num )
			{
				fprintf(fl_userlog,"Failed To Get The Next Sequence Number For repair sequence number\n");
				APL_GOBACK_FAIL
			}

			memset(&l_dl_dealrepair_struct_h, NULL ,sizeof(DL_DEALREPAIR_STRUCT_H) );

			l_dl_dealrepair_struct_h.h_dlrep_sequencenum = int_l_rpr_seq_num;
			strcpy(l_dl_dealrepair_struct_h.h_dl_client, h_rep_seq_struct->client);
			strcpy(l_dl_dealrepair_struct_h.h_indentity_no , l_ms_52x_struct_h.indentity_no);
			strcpy(l_dl_dealrepair_struct_h.h_dealcd,l_ms_52x_struct_h.h_deal_code);
			strcpy(l_dl_dealrepair_struct_h.h_dlt,l_ms_52x_struct_h.dl_dt);
			strcpy(l_dl_dealrepair_struct_h.h_setldt,l_ms_52x_struct_h.setl_dt);		
			strcpy(l_dl_dealrepair_struct_h.h_instr_code,l_ms_52x_struct_h.instr_code);
			strcpy(l_dl_dealrepair_struct_h.h_currencycode,l_ms_52x_struct_h.currency_code);
			strcpy(l_dl_dealrepair_struct_h.h_domcpclt_cd,l_ms_52x_struct_h.domestic_cpclt);

			if ( !strlen(l_ms_52x_struct_h.dl_class) ) 
				strcpy(l_dl_dealrepair_struct_h.h_classofdl, NORMALDEAL);
			else
				strcpy(l_dl_dealrepair_struct_h.h_classofdl, l_ms_52x_struct_h.dl_class);

			strcpy(l_dl_dealrepair_struct_h.h_maker, "SYSTEM");
			strcpy(l_dl_dealrepair_struct_h.h_maker_dt, chr_h_system_date);
			strcpy(l_dl_dealrepair_struct_h.h_newdt , chr_h_system_date);
			strcpy(l_dl_dealrepair_struct_h.h_access_stamp, chr_h_system_date);
			l_dl_dealrepair_struct_h.h_amt = l_ms_52x_struct_h.amount;
			strcpy(l_dl_dealrepair_struct_h.h_countclt,l_ms_52x_struct_h.cp_clt);
			strcpy(l_dl_dealrepair_struct_h.h_countcltnm,l_ms_52x_struct_h.countclt_cname);
			strcpy(l_dl_dealrepair_struct_h.h_clientof,l_ms_52x_struct_h.clientof);
			strcpy(l_dl_dealrepair_struct_h.h_info1, l_ms_52x_struct_h.info);
			strcpy(l_dl_dealrepair_struct_h.h_instr_name,l_ms_52x_struct_h.instr_name);
			strcpy(l_dl_dealrepair_struct_h.h_cltname,l_ms_52x_struct_h.inst_clnt_clr_name);
			strcpy(l_dl_dealrepair_struct_h.h_domesticcp_clr_name,l_ms_52x_struct_h.domcpclt_cd_cname);
			strcpy(l_dl_dealrepair_struct_h.h_deal_status ,STATUS_UAUTH);
			strcpy(l_dl_dealrepair_struct_h.h_delrecdate,APL_NULL_STRING); 
			
			if(strcmp(p_manual_deal_flg,"Y")==0)
			strcpy(l_dl_dealrepair_struct_h.h_entry ,"M");
			else
			strcpy(l_dl_dealrepair_struct_h.h_entry ,"S");
			
			

		   int_l_txn_type=SETTLEMENT;
			memset(chr_l_unique_ref_num,APL_NULL_CHAR,APL_UNIQUE_REF_NUM_LEN);
			memset(chr_g_unique_ref_num,APL_NULL_CHAR,APL_UNIQUE_REF_NUM_LEN);
      	if (MS_Rtv_RefNo_A(int_l_txn_type,chr_l_unique_ref_num,l_debug_info_ptr) == APL_FAILURE)
         {
             CO_ProcMonitor(APL_OUT_FILE,"Failure from GenUniqRefNum", NULL, p_intlenv_data_struct_h);
             APL_GOBACK_FAIL;
         }
         strcpy(l_dl_dealrepair_struct_h.h_uniq_ident_no,chr_l_unique_ref_num);
			strcpy(chr_g_unique_ref_num,chr_l_unique_ref_num);


         strcpy(l_dl_dealrepair_struct_h.h_allow_part_s,"N");

			l_dl_dealrepair_struct_h.h_qty = h_tot_quantity;

		  if (strlen(l_ms_52x_struct_h.instr_code))
		  {
			memset(chr_l_trd_locn, APL_NULL_CHAR, APL_LOCNCODE_LENGTH);

			if ( APL_FAILURE == CR_Rtv_InstrChrVal(l_ms_52x_struct_h.instr_code, "locncode", 
														  chr_l_trd_locn, l_debug_info_ptr) )
			{
 			

				
				strcpy(l_dl_dealrepair_struct_h.h_loccode ,APL_NULL_STRING);

			}
			else
			strcpy(l_dl_dealrepair_struct_h.h_loccode ,chr_l_trd_locn);
		  }

		
			memset(h_dl_client,APL_NULL_CHAR,APL_CLIENT_LENGTH);
			memset(h_indentity_no,APL_NULL_CHAR,APL_TXNREFNO_LEN);
			strcpy(h_dl_client,l_dl_dealrepair_struct_h.h_dl_client);
			strcpy(h_indentity_no,l_dl_dealrepair_struct_h.h_indentity_no);	 
		  EXEC SQL SELECT COUNT(*)
                  INTO     :int_h_count
                  FROM DL_DEAL
            WHERE CLIENT     = :h_dl_client:i_dl_client
                  AND IDENTIY_NO   = :h_indentity_no:i_indentity_no;

   IS_ANY_ORA_ERROR

   EXEC SQL SELECT COUNT(*)
                  INTO     :int_h_count1
                  FROM DL_DEALREPAIR
            WHERE CLIENT     = :h_dl_client:i_dl_client
                  AND IDENTIY_NO   = :h_indentity_no:i_indentity_no;

   IS_ANY_ORA_ERROR

	if ((int_h_count != 0) || (int_h_count1 != 0))
   {
    			fprintf(fl_userlog,"Trade for the actual client already exists.\n");
            strcpy(chr_g_msg_sts, "RJT");

            if ( APL_FAILURE == MS_Mod_IncMsgSts("RJT", "TRADE ALREADY EXISTS", chr_g_str_client, NULL) )
            {
               CO_ProcMonitor(APL_OUT_FILE, "Could not insert into IINMSGRP\n",
                         NULL, NULL);
            }

            APL_GOBACK_FAIL	
   }
	else
	{
		fprintf(fl_userlog,"Inserting Message Into TRADE REPAIR\n");
		
		int_retstat = IV_SUCCESS;

		if (APL_FAILURE == DL_Mod_TrdRprNew(l_dl_dealrepair_struct_h,
														&int_retstat,
														fl_userlog,
														l_debug_info_ptr) )
		{
			CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, "CTRADEREPAIR",
								APL_NULL_STRING, APL_NULL_STRING, 
								__LINE__, __FILE__);

			fprintf(fl_userlog,"Fatal Error In CTRADEREPAIR.\n");

			APL_GOBACK_FAIL
		}
		else
		{
			strcpy(chr_g_msg_sts, "RPR");
			strcpy(l_dl_msglink_struct_h.h_dl_client,l_dl_dealrepair_struct_h.h_dl_client);
			strcpy(l_dl_msglink_struct_h.h_indentity_no,l_dl_dealrepair_struct_h.h_indentity_no);
			strcpy(l_dl_msglink_struct_h.h_msg_in_out_ind,"I");
			strcpy(l_dl_msglink_struct_h.h_swift_msg_no,chr_g_new_msg_no);
			if (APL_FAILURE == CO_RtvMachDtTime( l_dl_msglink_struct_h.h_new_dt, l_debug_info_ptr ))
			{
				 APL_GOBACK_FAIL
			}
			strcpy(l_dl_msglink_struct_h.h_information,chr_g_addinfo);
			l_dl_msglink_struct_h.h_sequence_num=int_g_seq_num;
			l_dl_msglink_struct_h.h_dlrep_sequencenum=int_l_rpr_seq_num;
			strncpy(l_dl_msglink_struct_h.h_message_det_a,p_mesg_body,2000); 
			l_dl_msglink_struct_h.h_message_det_a[2000]=APL_NULL_CHAR;
			if (strlen(p_mesg_body) >2000)
			{
				strncpy(l_dl_msglink_struct_h.h_message_det_b,p_mesg_body+2000,2000);
				l_dl_msglink_struct_h.h_message_det_b[2000]=APL_NULL_CHAR;
			}
			if (strlen(p_mesg_body) >4000)
			{
				strncpy(l_dl_msglink_struct_h.h_message_det_c,p_mesg_body+4000,2000);
				l_dl_msglink_struct_h.h_message_det_c[2000]=APL_NULL_CHAR;
			}
			if (strlen(p_mesg_body) >6000)
			{
				strncpy(l_dl_msglink_struct_h.h_message_det_d,p_mesg_body+6000,2000);
				l_dl_msglink_struct_h.h_message_det_d[2000]=APL_NULL_CHAR;
			}
			if (strlen(p_mesg_body) >8000)
			{
				strncpy(l_dl_msglink_struct_h.h_message_det_e,p_mesg_body+8000,2000);
				l_dl_msglink_struct_h.h_message_det_e[2000]=APL_NULL_CHAR;
			}
			


          strcpy(l_dl_msglink_struct_h.h_place_cd,l_ms_inc_msg_struct_h.place_cd);
          strcpy(l_dl_msglink_struct_h.h_description,l_ms_inc_msg_struct_h.description);
          strcpy(l_dl_msglink_struct_h.h_psetparty,l_ms_inc_msg_struct_h.psetparty);



			if(APL_FAILURE==DL_Mod_DLLinkNew(&l_dl_msglink_struct_h,l_debug_info_ptr))
			{
				fprintf(fl_userlog,"Failed To Insert into CMSGLINK Table\n");
			}
		}
	}	
		APL_GOBACK_FAIL
	}

		
	
		memset(chr_h_client1, APL_NULL_CHAR, APL_CLIENT_LENGTH);
		memset(h_indentity_no, APL_NULL_CHAR, APL_TXNREFNO_LEN);

		strcpy(chr_h_client1,h_rep_seq_struct->client);
		strcpy(h_indentity_no,l_ms_52x_struct_h.indentity_no);    
		strcpy(l_dl_deal_oth_struct_h.h_dl_client,"991566");
		strcpy(l_dl_deal_oth_struct_h.h_indentity_no,h_indentity_no);
		strcpy(l_dl_deal_oth_struct_h.h_locindentity_no,"xxxxxx");
		strcpy(l_dl_deal_oth_struct_h.h_brkrno,"xxxxxx");
		strcpy(l_dl_deal_oth_struct_h.h_clt_reqdel_flag,"Y");
		int_l_dummy=0;
		memset(chr_h_dummy_acc, APL_NULL_CHAR, APL_CLIENT_LENGTH);
		strcpy(chr_h_dummy_acc,H_EURO_DUMMY_CLI);

		if (APL_FAILURE == CO_Chk_SplVal("EUROCLEAR", "ACT_ACC", chr_h_client1, 
													&int_l_dummy, l_debug_info_ptr))
		{
			APL_GOBACK_FAIL
		}

		if (int_l_dummy!=0)
		{

		

		

			if (APL_FAILURE == MS_Chk_SWFTMsg(l_ms_inc_msg_struct_h, int_h_no_of_trd,
															chr_h_dummy_acc, chr_h_correct_msg,
															l_debug_info_ptr))
			{
				if ( APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr) )
				{
					APL_GOBACK_FAIL
				}
				else
				{
					chr_l_trdfordummyinrpr = 'Y';
				}
			}
			if (!strcmp(chr_h_correct_msg,"T"))
			{
				if (APL_FAILURE == MS_Chk_SWFTMsg(l_ms_inc_msg_struct_h, int_h_no_of_trd,
																  chr_h_client1, chr_h_correct_msg,
																  l_debug_info_ptr)) 
				{
					if ( APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr) ) 
					{
						APL_GOBACK_FAIL
					}
				}

				if ( !strcmp(chr_h_correct_msg,"F") )
				{
					fprintf(fl_userlog,"Trade for the actual client already exists.\n");
					strcpy(chr_g_msg_sts, "RJT");

					if ( APL_FAILURE == MS_Mod_IncMsgSts("RJT", "TRADE FOR ACTUAL A/C ALREADY EXISTS", chr_g_str_client, NULL) )
					{
						CO_ProcMonitor(APL_OUT_FILE, "Could not insert into IINMSGRP\n",
									NULL, NULL);
					}

					APL_GOBACK_FAIL
				}

            
               

               if (APL_FAILURE == MS_Proc_SWFDLAdd( int_h_no_of_trd,
                                                 &l_ms_inc_msg_struct_h,
                                                 &h_rep_seq_struct,
                                                 &h_inc_linkage_info,
                                                 h_tot_quantity,
                                                 fl_userlog,
                                                 p_fl_userlog,
                                                 chr_fl_name,
                                                 fl_repairrpt,
                                                 p_mesg_body,
                                                 p_intlenv_data_struct_h,
                                                 l_debug_info_ptr ))
               {
                  fprintf(fl_userlog,"Failed to add the chr_new trade to the system \n");
                  APL_GOBACK_FAIL
               }

               

               

			printf("\n chr_g_msgfile_name 11 is |%s|\n",chr_g_msgfile_name);
               if ( APL_FAILURE == MS_Mod_IncMsgSts(chr_g_msg_sts, APL_NULL_STRING, chr_g_str_client, l_debug_info_ptr) )
               {
                  CO_ProcMonitor(APL_OUT_FILE, "Could not insert into IINMSGRP\n",
                           NULL, NULL);

                  

                  EXEC SQL ROLLBACK;

                  IS_ANY_ORA_ERROR

                  APL_GOBACK_FAIL
               }

               CO_ProcMonitor(fl_userlog, "Errors after AddSwfTrdFn().\n", l_debug_info_ptr, NULL);
               CO_FreeErrLst(l_debug_info_ptr);
               *l_debug_info_ptr = NULL;

               if (APL_FAILURE == DL_Rtv_TrdChrVal(chr_h_client1,
                                             l_dl_deal_oth_struct_h.h_indentity_no,
                                             "access_stamp",
                                             l_dl_deal_oth_struct_h.h_access_stamp,
                                             l_debug_info_ptr))
               {
                  

                  EXEC SQL ROLLBACK;

                  IS_ANY_ORA_ERROR

                  APL_GOBACK_FAIL
               }

            APL_GOBACK_SUCCESS

				
			}
			else if (!strcmp(chr_h_correct_msg,"F")) 
			{
				if (APL_FAILURE == MS_Chk_SWFTMsg(l_ms_inc_msg_struct_h,
															  int_h_no_of_trd,
															  chr_h_client1, 
															  chr_h_correct_msg,
															  l_debug_info_ptr))
				{
					if ( APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr) )
					{
						APL_GOBACK_FAIL
					}
				}

				if (!strcmp(chr_h_correct_msg,"F"))
				{
					fprintf(fl_userlog,"Trade for the actual client already exists.\n");
					strcpy(chr_g_msg_sts, "RJT");

					if ( APL_FAILURE == MS_Mod_IncMsgSts("RJT", "TRADE FOR ACTUAL A/C ALREADY EXISTS", chr_g_str_client, NULL) )
					{
						CO_ProcMonitor(APL_OUT_FILE, "Could not insert into IINMSGRP\n",
									NULL, NULL);
					}

					APL_GOBACK_FAIL
				}

				if ( chr_l_trdfordummyinrpr == 'Y' )
				{
					

               if (APL_FAILURE == MS_Proc_SWFDLAdd( int_h_no_of_trd,
                                                 &l_ms_inc_msg_struct_h,
                                                 &h_rep_seq_struct,
                                                 &h_inc_linkage_info,
                                                 h_tot_quantity,
                                                 fl_userlog,
                                                 p_fl_userlog,
                                                 chr_fl_name,
                                                 fl_repairrpt,
                                                 p_mesg_body,
                                                 p_intlenv_data_struct_h,
                                                 l_debug_info_ptr ))
               {
                  fprintf(fl_userlog,"Failed to add the chr_new trade to the system \n");
                  APL_GOBACK_FAIL
               }

               if ( APL_FAILURE == MS_Mod_IncMsgSts(chr_g_msg_sts, APL_NULL_STRING, chr_g_str_client, l_debug_info_ptr) )
               {
                  CO_ProcMonitor(APL_OUT_FILE, "Could not insert into IINMSGRP\n",
                           NULL, NULL);

                  EXEC SQL ROLLBACK;

                  IS_ANY_ORA_ERROR

                  APL_GOBACK_FAIL
               }

               CO_ProcMonitor(fl_userlog, "Errors after AddSwfTrdFn().\n", l_debug_info_ptr, NULL);
               CO_FreeErrLst(l_debug_info_ptr);
               *l_debug_info_ptr = NULL;

               APL_GOBACK_SUCCESS
				}
				else
				{
					

					if (APL_FAILURE == MS_Proc_SWFDLAdd( int_h_no_of_trd,
																 &l_ms_inc_msg_struct_h,
																 &h_rep_seq_struct,
																 &h_inc_linkage_info,
																 h_tot_quantity,
																 fl_userlog,
																 p_fl_userlog,
																 chr_fl_name,
																 fl_repairrpt,
																 p_mesg_body,
																 p_intlenv_data_struct_h,
																 l_debug_info_ptr ))
					{
						fprintf(fl_userlog,"Failed to add the chr_new trade to the system \n");
						APL_GOBACK_FAIL
					}

					

					

					if ( APL_FAILURE == MS_Mod_IncMsgSts(chr_g_msg_sts, APL_NULL_STRING, chr_g_str_client, l_debug_info_ptr) )
					{
						CO_ProcMonitor(APL_OUT_FILE, "Could not insert into IINMSGRP\n",
									NULL, NULL);

						

						EXEC SQL ROLLBACK;

						IS_ANY_ORA_ERROR

						APL_GOBACK_FAIL
					}

					CO_ProcMonitor(fl_userlog, "Errors after AddSwfTrdFn().\n", l_debug_info_ptr, NULL);
					CO_FreeErrLst(l_debug_info_ptr);
					*l_debug_info_ptr = NULL;

					if (APL_FAILURE == DL_Rtv_TrdChrVal(l_dl_deal_oth_struct_h.h_dl_client,
															l_dl_deal_oth_struct_h.h_indentity_no,
															"access_stamp",
															l_dl_deal_oth_struct_h.h_access_stamp,
															l_debug_info_ptr))		
					{
						

						EXEC SQL ROLLBACK;

						IS_ANY_ORA_ERROR

						APL_GOBACK_FAIL
					}

					strcpy(p_intlenv_data_struct_h->h_mode,APL_FUNC_DELETE);
					if (APL_FAILURE == DL_Proc_TrdOth(&l_dl_deal_oth_struct_h,
													 p_intlenv_data_struct_h,
													 l_debug_info_ptr) )
					{
						fprintf(fl_userlog,"Failed to delete the trade for the dummy client.\n");
						

						EXEC SQL ROLLBACK;

						IS_ANY_ORA_ERROR

						APL_GOBACK_FAIL
					}
					if (APL_FAILURE == DL_Rtv_TrdChrVal(l_dl_deal_oth_struct_h.h_dl_client,
															l_dl_deal_oth_struct_h.h_indentity_no,
															"access_stamp",
															l_dl_deal_oth_struct_h.h_access_stamp,
															l_debug_info_ptr))		
					{
						

						EXEC SQL ROLLBACK;

						IS_ANY_ORA_ERROR

						APL_GOBACK_FAIL
					}
					strcpy(p_intlenv_data_struct_h->usr,"SYSTEM1");
					strcpy(l_dl_deal_oth_struct_h.h_clt_reqdel_flag,"N");
					strcpy(p_intlenv_data_struct_h->h_mode,APL_FUNC_AUTHORISE);
					if (APL_FAILURE == DL_Proc_TrdOth(&l_dl_deal_oth_struct_h,
																 p_intlenv_data_struct_h,
																 l_debug_info_ptr) )
					{
						fprintf(fl_userlog,"Failed to authorise the deletion of the dummy client.\n");
						

						EXEC SQL ROLLBACK;

						IS_ANY_ORA_ERROR

						APL_GOBACK_FAIL
					}
				}
		}
	} 
	else 
	{
		

		if (int_h_no_of_trd == 1)
		{
			

			strcpy(h_dl_client,(h_rep_seq_struct  +  0)->client); 
		}
		else
		{
			strcpy(h_dl_client, APL_NULL_STRING);
		}
		if (APL_FAILURE == MS_Chk_SWFTMsg(l_ms_inc_msg_struct_h,
														int_h_no_of_trd,
														h_dl_client,
														 chr_h_correct_msg,
														 l_debug_info_ptr) )
		{
			

			if ( APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr) )
			{
				fprintf(fl_userlog,"InValid Swift Message. Trade Already exists in the System.\n");
				APL_GOBACK_FAIL
			}
		}

		

		if (!strcmp(chr_h_correct_msg,"T"))
		{
			if (APL_FAILURE == MS_Proc_SWFDLAdd( int_h_no_of_trd,
													  &l_ms_inc_msg_struct_h,
													  &h_rep_seq_struct,
													  &h_inc_linkage_info,	
													  h_tot_quantity,
													  fl_userlog,
													  p_fl_userlog,
													  chr_fl_name,
													  fl_repairrpt,
													  p_mesg_body,
													  p_intlenv_data_struct_h,
													  l_debug_info_ptr
														) )
			{
				fprintf(fl_userlog,"Failed to Add Trade To the system\n");
				APL_GOBACK_FAIL		
			}	
		}
		else
		{
			fprintf(fl_userlog,"Message Rejected as Trade already present in table\n");
			strcpy(chr_g_msg_sts, "RJT"); 
			if ( APL_FAILURE == MS_Mod_IncMsgSts("RJT", "TRADE ALREADY EXISTS", chr_g_str_client, NULL) )
			{
				CO_ProcMonitor(APL_OUT_FILE, "Could not insert into IINMSGRP\n",
							NULL, NULL);
			}

			APL_GOBACK_FAIL
		}

	}
		APL_GOBACK_SUCCESS

		
     		RETURN_SUCCESS:
			APL_IF_DEBUG
			{
				CO_ProcMonitor(p_fl_userlog,"Exiting out of MS_Proc_IncMsg52x sucessfully\n",
							NULL, NULL);
	
			}

			APL_FREE(l_progseqnum_struct_h);
			APL_FREE(h_rep_seq_struct);
      	return (APL_SUCCESS);

      	RETURN_FAILURE:
			APL_IF_DEBUG
			{
				CO_ProcMonitor(p_fl_userlog,
							"Exiting out of MS_Proc_IncMsg52x unsucessfully\n",
							NULL, NULL);
			}
			APL_FREE(l_progseqnum_struct_h);
			APL_FREE(h_rep_seq_struct);
      	return (APL_FAILURE);
}


	

int MS_Proc_IncMsg52xOrd(FILE							*fl_incmsg,
							char							*p_msg_no,
							char 							*p_repair_flg,
							char 							*p_manual_deal_flg,
							FILE							*fl_userlog,
							FILE							*p_fl_userlog,
							char							*chr_fl_name,
							FILE							*fl_repairrpt,	
							char							*p_mesg_body,
							INTL_ENV_DATA_STRUCT_H		*p_intlenv_data_struct_h,
							DEBUG_INFO_STRUCT_H				**l_debug_info_ptr)
{
	

	int MS_Proc_IncMsg52xParse(FILE              *fl_incmsg,
						  char               *p_msg_no,
						  MS_52X_STRUCT_H       *p_ms_inc_msg_struct_h_a,
						  MS_REP_STRUCT_H   **p_ms_rep_struct_h,
						  double             *p_tot_qty,
						  int                *p_no_of_deal,
						  FILE               *fl_userlog,
						  FILE               *p_fl_userlog,
						  int                *int_p_retstat,
						  INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h,
						  DEBUG_INFO_STRUCT_H       **l_debug_info_ptr);

	extern int MS_Proc_SWFDLAdd(int                   p_no_of_deal,
									 MS_INC_MSG_STRUCT_H      *p_ms_inc_msg_struct_h_a,
									 MS_REP_STRUCT_H      **p_ms_rep_struct_h,
									 MS_INC_LINKINFO_STRUCT_H	  **p_ms_inc_linkinfo_struct_h,	
									 double                p_tot_instqty,
									 FILE                  *fl_userlog,
									 FILE                  *p_fl_userlog,
									 char                  *chr_fl_name,
									 FILE                  *fl_repairrpt,
									 char                  *p_mesg_body,
									 INTL_ENV_DATA_STRUCT_H    *p_intlenv_data_struct_h,
									 DEBUG_INFO_STRUCT_H          **l_debug_info_ptr);

	char		chr_l_trdfromorder_found 					= NULL;
	char		chr_mainfuncarea[APL_MAINFUNCAREA_LEN]= APL_NULL_STRING;
	char		chr_l_condident[APL_CONDID_LEN]			= APL_NULL_STRING;
	char		chr_l_trcode_a[2]									= APL_NULL_STRING;
	char 		h_indentity_no[APL_TXNREFNO_LEN]				= APL_NULL_STRING;
	char 		chr_l_rowid_A[APL_ROWID_LEN]				= APL_NULL_STRING;
	int		int_h_no_of_trd									= 1;
	int		int_retstat										= 0; 
	
	int      int_l_stat_flg                          = 0;
	char     chr_l_temp_errmsg[40]                   = APL_NULL_STRING;
	
	char     chr_l_exarena[3]                        = APL_NULL_STRING;
	char  chr_l_typeofinstr[TYPEOF_INSTR_LEN]               = APL_NULL_STRING;
	char     chr_l_temp_trdsts[3]                    = APL_NULL_STRING;
	
	
	int		int_l_rpr_seq_num								= 0;
	double	h_tot_quantity									= 0;
	double	h_qty											= 0;
	double	h_amt                            = 0;
	char		h_dl_client[APL_CLIENT_LENGTH]				= APL_NULL_STRING;
	char  	chr_h_system_date[APL_DATE_LEN];
	char  	chr_h_system_datetime[APL_DATE_LEN];
	char     chr_l_verwith[26]								= APL_NULL_STRING;
	char		chr_l_locrefno[APL_TXNREFNO_LEN]			= APL_NULL_STRING;
	char		chr_l_failcode_A[3]								= APL_NULL_STRING;
	char		chr_l_ourtheir[2]								= APL_NULL_STRING;
	char		chr_l_trd_locn[APL_LOCNCODE_LENGTH]			= APL_NULL_STRING;
	short int l_process_520_522						= 0;
	short int int_l_trdfromorder_nf_ok 					= 0;
	short int int_l_condexists_A                       = 0;
	
	
	int int_l_txn_type=0;
	char chr_l_unique_ref_num[APL_UNIQUE_REF_NUM_LEN]=APL_NULL_STRING;
	


	DEAL_DET_STRUCT_H				l_deal_frmord_struct_h;
	DEAL_DET_STRUCT_H				l_deal_bttord_struct_h;
	DL_DEAL_PMTDET_STRUCT_H		l_dl_deal_pmtdet_struct_ha;
	MS_52X_STRUCT_H					l_ms_52x_struct_h;
	MS_REP_STRUCT_H				*h_rep_seq_struct = (MS_REP_STRUCT_H  *)NULL;
	MS_INC_LINKINFO_STRUCT_H         *h_inc_linkage_info = (MS_INC_LINKINFO_STRUCT_H *)NULL; 
	DL_DEALREPAIR_STRUCT_H		l_dl_dealrepair_struct_h;
	PRO_GSEQNUM_STRUCT_H			*l_progseqnum_struct_h = NULL;
	MS_INC_MSG_STRUCT_H           l_ms_inc_msg_struct_h;
	DL_MSGLINK_STRUCT_H               l_dl_msglink_struct_h;
	int int_h_count          = 0;
      int int_h_count1         = 0;
      short i_dl_client      = 0;
      short i_indentity_no        = 0;		


	EXEC SQL BEGIN DECLARE SECTION;

		struct sqlca sqlca;
	EXEC SQL END   DECLARE SECTION;

	sqlca.sqlcode = 0L;
	memset(chr_h_system_date, APL_NULL_CHAR ,APL_DATE_LEN);
	memset(chr_h_system_datetime, APL_NULL_CHAR ,APL_DATE_LEN);
	memset(&l_ms_52x_struct_h, NULL ,sizeof(MS_52X_STRUCT_H) );
	memset(&l_dl_deal_pmtdet_struct_ha, NULL, sizeof(DL_DEAL_PMTDET_STRUCT_H));
	memset(&l_deal_frmord_struct_h, NULL, sizeof(DEAL_DET_STRUCT_H));
	memset(&l_deal_bttord_struct_h, NULL, sizeof(DEAL_DET_STRUCT_H));
	memset(chr_mainfuncarea, APL_NULL_CHAR, APL_MAINFUNCAREA_LEN);
	memset(chr_l_condident, APL_NULL_CHAR, APL_CONDID_LEN);
	memset(&l_dl_dealrepair_struct_h, NULL, sizeof(DL_DEALREPAIR_STRUCT_H));
   memset (&l_ms_inc_msg_struct_h,NULL,sizeof(MS_INC_MSG_STRUCT_H));
	memset (&l_dl_msglink_struct_h,NULL,sizeof(DL_MSGLINK_STRUCT_H));

	

	int_retstat = IV_SUCCESS;

	if (APL_FAILURE == MS_Proc_IncMsg52xParse(fl_incmsg,
												p_msg_no,
												&l_ms_52x_struct_h,
												&h_rep_seq_struct,
												&h_tot_quantity,
												&int_h_no_of_trd,
												fl_userlog,
												p_fl_userlog,
												&int_retstat,
												p_intlenv_data_struct_h,
												l_debug_info_ptr) )
	{	
		fprintf(fl_userlog,"Failed to Parse 52x msg\n");
		APL_GOBACK_FAIL
	}

		strcpy(l_ms_inc_msg_struct_h.h_deal_code,l_ms_52x_struct_h.h_deal_code);
      strcpy(l_ms_inc_msg_struct_h.swift_msg_no,l_ms_52x_struct_h.swift_msg_no);
      strcpy(l_ms_inc_msg_struct_h.setl_dt,l_ms_52x_struct_h.setl_dt);
      strcpy(l_ms_inc_msg_struct_h.indentity_no,l_ms_52x_struct_h.indentity_no);
      strcpy(l_ms_inc_msg_struct_h.addindentity_no,l_ms_52x_struct_h.addindentity_no);
      strcpy(l_ms_inc_msg_struct_h.dl_dt,l_ms_52x_struct_h.dl_dt);
      strcpy(l_ms_inc_msg_struct_h.dl_loc,l_ms_52x_struct_h.dl_loc);
      strcpy(l_ms_inc_msg_struct_h.instr_name,l_ms_52x_struct_h.instr_name);
      strcpy(l_ms_inc_msg_struct_h.instr_code,l_ms_52x_struct_h.instr_code);
      strcpy(l_ms_inc_msg_struct_h.inst_client,l_ms_52x_struct_h.inst_client);
      strcpy(l_ms_inc_msg_struct_h.inst_clnt_clr_name,l_ms_52x_struct_h.inst_clnt_clr_name);
      strcpy(l_ms_inc_msg_struct_h.cp_clt,l_ms_52x_struct_h.cp_clt);
      strcpy(l_ms_inc_msg_struct_h.countclt_cname,l_ms_52x_struct_h.countclt_cname);
      strcpy(l_ms_inc_msg_struct_h.domestic_cpclt,l_ms_52x_struct_h.domestic_cpclt);
      strcpy(l_ms_inc_msg_struct_h.domcpclt_cd_cname,l_ms_52x_struct_h.domcpclt_cd_cname);
      strcpy(l_ms_inc_msg_struct_h.clientof,l_ms_52x_struct_h.clientof);
      strcpy(l_ms_inc_msg_struct_h.currency_code,l_ms_52x_struct_h.currency_code);
      l_ms_inc_msg_struct_h.amount=l_ms_52x_struct_h.amount;
      strcpy(l_ms_inc_msg_struct_h.info,l_ms_52x_struct_h.info);
      strcpy(l_ms_inc_msg_struct_h.gl_client,l_ms_52x_struct_h.gl_client);
      strcpy(l_ms_inc_msg_struct_h.dl_class,l_ms_52x_struct_h.dl_class);
      strcpy(l_ms_inc_msg_struct_h.h_rpr_ind,p_repair_flg);
      strcpy(l_ms_inc_msg_struct_h.manual_ind_dl_flg,p_manual_deal_flg);
		


	
	

	strcpy(h_dl_client,h_rep_seq_struct->client); 
	strcpy(h_indentity_no,l_ms_52x_struct_h.indentity_no); 
	h_qty=h_rep_seq_struct->quantity;
	h_amt = l_ms_52x_struct_h.amount;

	

	if ( APL_FAILURE == CO_Chk_AccValid(h_dl_client, 'Y', NULL, NULL, NULL, NULL, NULL, NULL, NULL, l_debug_info_ptr) )
	{
		fprintf(fl_userlog, "Message rejected as client was not int_found in customer database.\n");

		fprintf(fl_repairrpt,"%9sTRADE REJECTION REPORT FOR MESSAGE FILE %s\n", " ", chr_fl_name);
		fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
		fprintf(fl_repairrpt,"%s\n\n", p_mesg_body);
		fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
		fprintf(fl_repairrpt, "%9sAccount %s not int_found.\n", " ", h_dl_client);
		fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
		fprintf(fl_repairrpt, "\n");
		fflush(fl_repairrpt);

		strcpy(chr_g_msg_sts, "RJT");

		APL_GOBACK_FAIL
	}

	if (APL_FAILURE == CO_RtvSysDtTime(chr_h_system_datetime, l_debug_info_ptr) )
	{
		fprintf(fl_userlog,"Failure in CO_RtvSysDtTime().\n");
		APL_GOBACK_FAIL
	}

	sscanf(chr_h_system_datetime, "%[^ ]", chr_h_system_date);
	strcat(chr_h_system_date, APL_NULL_TIME);

	strcpy(chr_l_verwith, DEALFRMORD_VERWITH);
	strcpy(chr_l_failcode_A, DEALFRMORD_FAILCODE);

	if ( !strcmp(p_msg_no, I_MSGNO_521) || !strcmp(p_msg_no, I_MSGNO_523) )
	{
		if ( APL_FAILURE == 
						MS_Chk_DLFromOrd(&l_ms_52x_struct_h, h_dl_client, h_qty, chr_l_rowid_A, 
												&l_deal_frmord_struct_h, l_debug_info_ptr) )
		{
			

			chr_l_trdfromorder_found = 'N';
		}
		else
		{
			chr_l_trdfromorder_found = 'Y';
		}
		

		if ( chr_l_trdfromorder_found == 'Y' )
		{
			

			if ( !strcmp(l_deal_frmord_struct_h.h_deal_status, STATUS_CONF) )
			{
				

				strcpy(l_deal_frmord_struct_h.h_verfied_with, chr_l_verwith);
				strcpy(l_deal_frmord_struct_h.h_locindentity_no, h_indentity_no);

				if ( APL_FAILURE == DL_Mod_BTTDL(chr_l_rowid_A, &l_deal_frmord_struct_h, 
																chr_l_failcode_A, p_intlenv_data_struct_h, 
																l_debug_info_ptr) )
				{
					
					strcpy(chr_g_msg_sts, "RJO");
					

					EXEC SQL ROLLBACK WORK; 
					IS_ANY_ORA_ERROR

					fprintf(fl_userlog, "Message rejected as underlying trade from order not int_found.\n");
					fprintf(fl_repairrpt,"%9sTRADE REJECTION REPORT FOR MESSAGE FILE %s\n", " ", chr_fl_name);
					fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
					fprintf(fl_repairrpt,"%s\n\n", p_mesg_body);
					fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
					fprintf(fl_repairrpt, "%9s Message Rejected as Executed Trade Not Found in the System.\n", " ");
					fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
					fprintf(fl_repairrpt, "\n");
					fflush(fl_repairrpt);

					APL_GOBACK_FAIL
				}

				
				strcpy(chr_g_msg_sts, "STO");
            
				strcpy(chr_g_rej_reas,REJREAS_CONFDEAL_MOD);
            

				fprintf(fl_repairrpt, "%9sTRADE STO REPORT FOR MESSAGE FILE %s\n", " ", chr_fl_name);
				
				fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
				fprintf(fl_repairrpt,"%s\n\n", p_mesg_body);
				fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
				fprintf(fl_repairrpt, "%9sMessage Processed Successfully.\n", " ");
				fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
				fprintf(fl_repairrpt, "\n");
				fflush(fl_repairrpt);

				APL_GOBACK_SUCCESS
			}
			else if ( !strcmp(l_deal_frmord_struct_h.h_deal_status, STATUS_AUTH) )
			{
				strcpy(l_dl_deal_pmtdet_struct_ha.h_dl_client, l_deal_frmord_struct_h.h_dl_client);
				strcpy(l_dl_deal_pmtdet_struct_ha.h_indentity_no, l_deal_frmord_struct_h.h_indentity_no);
				strcpy(l_dl_deal_pmtdet_struct_ha.h_verfied_with, l_deal_frmord_struct_h.h_verfied_with);
				strcpy(l_dl_deal_pmtdet_struct_ha.h_info1, l_deal_frmord_struct_h.h_info1);
				strcpy(l_dl_deal_pmtdet_struct_ha.h_access_stamp, 
						 l_deal_frmord_struct_h.h_access_stamp);
				strcpy(l_dl_deal_pmtdet_struct_ha.h_brkrno, 
						 l_deal_frmord_struct_h.h_brkrno);
				l_dl_deal_pmtdet_struct_ha.h_diffamount = l_deal_frmord_struct_h.h_diffamount;

				strcpy(l_dl_deal_pmtdet_struct_ha.h_confdate,chr_h_system_date);
				strcpy(l_dl_deal_pmtdet_struct_ha.h_ispart_,"N");
				l_dl_deal_pmtdet_struct_ha.h_newquantity = 0;
				l_dl_deal_pmtdet_struct_ha.h_newamount = 0;
				strcpy(l_dl_deal_pmtdet_struct_ha.h_newindentity_no, APL_NULL_STRING);
				strcpy(l_dl_deal_pmtdet_struct_ha.h_newlocindentity_no, APL_NULL_STRING);
				l_dl_deal_pmtdet_struct_ha.h_grossamount = 0;

				if ( APL_FAILURE == DL_Mod_DLPmt(&l_dl_deal_pmtdet_struct_ha, 
															  p_intlenv_data_struct_h, l_debug_info_ptr) )
				{
					 CO_ProcMonitor(fl_userlog, "Returned with failure from DL_Mod_DLPmt().\n",NULL, p_intlenv_data_struct_h);
					 fprintf(fl_userlog,"Message Found With Discrepancy.\n");

					fprintf(fl_repairrpt,"%9sTRADE REJECTION REPORT FOR MESSAGE FILE %s\n", " ", chr_fl_name);
					fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
					fprintf(fl_repairrpt,"%s\n\n", p_mesg_body);
					fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
					fprintf(fl_repairrpt, "%9sTrade Found With Discrepancy.\n", " ");
					fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
					fprintf(fl_repairrpt, "\n");
					fflush(fl_repairrpt);

				
					strcpy(chr_g_msg_sts, "RJO");

					EXEC SQL ROLLBACK WORK;  
					IS_ANY_ORA_ERROR

					if ( APL_FAILURE == MS_Mod_IncMsgSts("RJO", "TRADE FOUND WITH DISCREPANCY", chr_g_str_client, NULL) )
					{
						CO_ProcMonitor(APL_OUT_FILE, "Could not insert into IINMSGRP\n", NULL, NULL);
					}
				  if ( APL_FAILURE == MS_Mod_IncMsgSts("RJO", "TRADE COULDN'T BE PREMATCHED", chr_g_str_client, NULL) )
				  {
					  CO_ProcMonitor(APL_OUT_FILE, "Could not insert into IINMSGRP\n", NULL, NULL);
					  APL_GOBACK_FAIL
				  }
				  strncpy(chr_l_temp_errmsg,(**l_debug_info_ptr).msg,39);
				  if ( APL_FAILURE == MS_Mod_IncMsgSts("RJO", chr_l_temp_errmsg, chr_g_str_client , NULL) )
				  {
					  CO_ProcMonitor(APL_OUT_FILE, "Could not insert into IINMSGRP\n", NULL, NULL);
				  }
				
				}
				
					
					

					
					if ( APL_FAILURE == DL_Rtv_TrdChrVal(h_dl_client, l_deal_frmord_struct_h.h_indentity_no, 
																  "access_stamp", 
																  l_deal_frmord_struct_h.h_access_stamp, 
																  l_debug_info_ptr) )
					{
						strcpy(chr_g_msg_sts, "RJO");

						fprintf(fl_userlog, "Message rejected as underlying trade from order not int_found.\n");
						fprintf(fl_repairrpt,"%9sTRADE REJECTION REPORT FOR MESSAGE FILE %s\n", " ", chr_fl_name);
						fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
						fprintf(fl_repairrpt,"%s\n\n", p_mesg_body);
						fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
						fprintf(fl_repairrpt, "%9s Message Rejected as Executed Trade Not Found in the System.\n", " ");
						fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
						fprintf(fl_repairrpt, "\n");
						fflush(fl_repairrpt);

						EXEC SQL ROLLBACK WORK;  
						IS_ANY_ORA_ERROR

						APL_GOBACK_FAIL
					}

					strcpy(l_deal_frmord_struct_h.h_verfied_with, chr_l_verwith);
					strcpy(l_deal_frmord_struct_h.h_locindentity_no, h_indentity_no);
					memset(chr_l_failcode_A, APL_NULL_CHAR, 26);

					if ( APL_FAILURE == DL_Mod_BTTDL(chr_l_rowid_A, &l_deal_frmord_struct_h,
																	chr_l_failcode_A, p_intlenv_data_struct_h,
																	l_debug_info_ptr) )
					{
						strcpy(chr_g_msg_sts, "RJO");

						EXEC SQL ROLLBACK WORK;  
						IS_ANY_ORA_ERROR

						fprintf(fl_userlog, "Message rejected as underlying trade from order not int_found.\n");
						fprintf(fl_repairrpt,"%9sTRADE REJECTION REPORT FOR MESSAGE FILE %s\n", " ", chr_fl_name);
						fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
						fprintf(fl_repairrpt,"%s\n\n", p_mesg_body);
						fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
						fprintf(fl_repairrpt, "%9s Message Rejected as Executed Trade Not Found in the System.\n", " ");
						fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
						fprintf(fl_repairrpt, "\n");
						fflush(fl_repairrpt);

						APL_GOBACK_FAIL
					}
            if (int_l_stat_flg == 1)
				{
					 

					if ( APL_FAILURE == MS_Mod_IncMsgSts("RJO", "MSG REJ. BUT TRD DETAILS UPDATED", chr_g_str_client, NULL) )
					{
						CO_ProcMonitor(APL_OUT_FILE, "Could not insert into IINMSGRP\n", NULL, NULL);
						APL_GOBACK_FAIL
					}
				 APL_GOBACK_SUCCESS
				 }
				 if (int_l_stat_flg == 0)
				 {
					fprintf(fl_repairrpt, "%9sTRADE STO REPORT FOR MESSAGE FILE %s\n", " ", chr_fl_name);
					fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
					fprintf(fl_repairrpt,"%s\n\n", p_mesg_body);
					fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
					fprintf(fl_repairrpt, "%9sMessage Processed Successfully.\n", " ");
					fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
					fprintf(fl_repairrpt, "\n");
					fflush(fl_repairrpt);

					strcpy(chr_g_msg_sts,"STO");

               
					strcpy(chr_g_rej_reas,DEAL_PREMATCHED);
               
					APL_GOBACK_SUCCESS 
				 }
				
				
			} 
		}
		else 
		{
			strcpy(chr_mainfuncarea, "ORDERPROC_INCMSG");
			strcpy(chr_l_condident, "TRDFROMORD_NF_OK");
			int_l_trdfromorder_nf_ok = 0;

			if ( APL_FAILURE == CO_Chk_CntryEnabled(chr_mainfuncarea, chr_l_condident, 
														&int_l_trdfromorder_nf_ok, l_debug_info_ptr) )
			{
				fprintf(fl_userlog, "Failed to check the iv_cond for processing MT521/MT523 messages in the \n");
				fprintf(fl_userlog, "event of trade from order not int_found from CNTRY_SYS_PARAMS table.\n");

				fprintf(fl_repairrpt,"%9sTRADE REJECTION REPORT FOR MESSAGE FILE %s\n", " ", chr_fl_name);
				fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
				fprintf(fl_repairrpt,"%s\n\n", p_mesg_body);
				fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
				fprintf(fl_repairrpt, "%9s Message Rejected as Executed Trade Not Found in the System.\n", " ");
				fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
				fprintf(fl_repairrpt, "\n");
				fflush(fl_repairrpt);

				strcpy(chr_g_msg_sts, "RJO");

				APL_GOBACK_FAIL
			}

			if (!int_l_trdfromorder_nf_ok) 
			{
				

				fprintf(fl_userlog, "Message rejected as underlying trade from order not int_found.\n");
				fprintf(fl_repairrpt,"%9sTRADE REJECTION REPORT FOR MESSAGE FILE %s\n", " ", chr_fl_name);
				fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
				fprintf(fl_repairrpt,"%s\n\n", p_mesg_body);
				fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
				fprintf(fl_repairrpt, "%9s Message Rejected as Executed Trade Not Found in the System.\n", " ");
				fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
				fprintf(fl_repairrpt, "\n");
				fflush(fl_repairrpt);

				strcpy(chr_g_msg_sts, "RJO");

				if ( APL_FAILURE == MS_Mod_IncMsgSts("RJO", "TRADE FROM ORDER EXEC. NOT FOUND", chr_g_str_client, NULL) )
				{
					CO_ProcMonitor(APL_OUT_FILE, "Could not insert into MS_INMSGRP\n", NULL, NULL);
					
					APL_GOBACK_FAIL
				}
          strncpy(chr_l_temp_errmsg,(**l_debug_info_ptr).msg,39);
				if( APL_FAILURE == MS_Mod_IncMsgSts("RJO",chr_l_temp_errmsg, chr_g_str_client, NULL) )
				{
					 CO_ProcMonitor(APL_OUT_FILE, "Could not insert into IINMSGRP\n", NULL, NULL);
				}
					

				APL_GOBACK_FAIL
			}

		} 
	}
	else if ( !strcmp(p_msg_no, I_MSGNO_520) || !strcmp(p_msg_no, I_MSGNO_522) )
	{
		

		strcpy(chr_mainfuncarea, "ORDERPROC_INCMSG");
		strcpy(chr_l_condident, "PROCESS_520_522");
		l_process_520_522 = 0;

		if ( APL_FAILURE == CO_Chk_CntryEnabled(chr_mainfuncarea, chr_l_condident, 
														 &l_process_520_522, l_debug_info_ptr) )
		{
			fprintf(fl_userlog, "Failed to check the iv_cond for processing MT520/MT522 messages from CNTRY_SYS_PARAMS table.\n");

			fprintf(fl_repairrpt,"%9sTRADE REJECTION REPORT FOR MESSAGE FILE %s\n", " ", chr_fl_name);
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
			fprintf(fl_repairrpt,"%s\n\n", p_mesg_body);
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
			fprintf(fl_repairrpt, "%9s Message Rejected as Executed Trade Not Found in the System.\n", " ");
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
			fprintf(fl_repairrpt, "\n");
			fflush(fl_repairrpt);

			strcpy(chr_g_msg_sts, "RJT");

			APL_GOBACK_FAIL
		}

		if ( !l_process_520_522 ) 
		{
			

			fprintf(fl_userlog, "MT520/MT522 msg encountered. Therefore, rejected.\n");
			fprintf(fl_repairrpt,"%9sTRADE REJECTION REPORT FOR MESSAGE FILE %s\n", " ", chr_fl_name);
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
			fprintf(fl_repairrpt,"%s\n\n", p_mesg_body);
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
			fprintf(fl_repairrpt, "%9s Rejecting incoming msg of type MT520/522.\n", " ");
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
			fprintf(fl_repairrpt, "\n");
			fflush(fl_repairrpt);

			strcpy(chr_g_msg_sts, "RJT");

			if ( APL_FAILURE == 
						MS_Mod_IncMsgSts("RJT", "MESSAGE TYPE MT520/MT522", chr_g_str_client, NULL) )
			{
				CO_ProcMonitor(APL_OUT_FILE, "Could not insert into IINMSGRP\n", NULL, NULL);
			}

			APL_GOBACK_SUCCESS
		}

	} 

	if ( int_l_trdfromorder_nf_ok || l_process_520_522 )
	{
		if ( APL_FAILURE == MT_Rtv_AccFldVal(h_dl_client, "ourtheir", 
														chr_l_ourtheir, l_debug_info_ptr) )
		{
			fprintf(fl_userlog, "Message rejected as underlying trade from order not int_found.\n");
			fprintf(fl_repairrpt,"%9sTRADE REJECTION REPORT FOR MESSAGE FILE %s\n", " ", chr_fl_name);
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
			fprintf(fl_repairrpt,"%s\n\n", p_mesg_body);
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
			fprintf(fl_repairrpt, "%9s Message Rejected as Executed Trade Not Found in the System.\n", " ");
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
			fprintf(fl_repairrpt, "\n");
			fflush(fl_repairrpt);

			
			strcpy(chr_g_msg_sts, "RJO");
			

			APL_GOBACK_FAIL
		}
      
		strcpy(chr_mainfuncarea, "POLAND_INCMSG");
		strcpy(chr_l_condident, "NO_SPL_CHK_BON");
		int_l_condexists_A = 0;

		if ( APL_FAILURE == CO_Chk_CntryEnabled( chr_mainfuncarea, chr_l_condident,
															&int_l_condexists_A, l_debug_info_ptr) )
		{
			APL_GOBACK_FAIL
		}

		if ( APL_FAILURE == CR_Rtv_InstrChrVal(l_ms_52x_struct_h.instr_code, "typeofinstr",
														chr_l_typeofinstr, l_debug_info_ptr) )
		{
			strcpy(chr_l_typeofinstr,APL_NULL_STRING);
		}
		if ( (!strcmp(chr_l_ourtheir, "O") && 
			  (!strcmp(p_msg_no, I_MSGNO_522) || !strcmp(p_msg_no, I_MSGNO_523)))
			|| ((!strcmp(chr_l_ourtheir, "T")) && 
			  	(!strcmp(p_msg_no, I_MSGNO_520) || !strcmp(p_msg_no, I_MSGNO_521))) 
			|| ((!strcmp(chr_l_typeofinstr,TYPEOFINSTR_BOND)) && (int_l_condexists_A > 0)))
		{
			

			if (APL_FAILURE == MS_Proc_SWFDLAdd( int_h_no_of_trd,
													  &l_ms_inc_msg_struct_h,
													  &h_rep_seq_struct,
													  &h_inc_linkage_info,	 
													  h_tot_quantity,
													  fl_userlog,
													  p_fl_userlog,
													  chr_fl_name,
													  fl_repairrpt,
													  p_mesg_body,
													  p_intlenv_data_struct_h,
													  l_debug_info_ptr) )
			{
				fprintf(fl_userlog,"Failed to create trade in the system.\n");

				APL_GOBACK_FAIL
			}

			fprintf(fl_userlog,"Trade created successfully.\n");

         
			if((!strcmp(chr_g_msg_sts,"STP"))||(!strcmp(chr_g_msg_sts,"STO")))
				{
					strcpy(chr_g_rej_reas,DEAL_GENERATED);
				}	
         

			fprintf(fl_repairrpt,"%9sTRADE chr_stp REPORT FOR MESSAGE FILE %s\n", " ", chr_fl_name);
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
			fprintf(fl_repairrpt,"%s\n\n", p_mesg_body);
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
			fprintf(fl_repairrpt, "%9sMessage Processed Successfully.\n", " ");
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
			fprintf(fl_repairrpt, "\n");
			fflush(fl_repairrpt);

			
			
					
			if( !strcmp( l_ms_52x_struct_h.domestic_cpclt, l_mt_core_sys_params_struct_h.custody_clt_cd ) )
			{
				strcpy( chr_l_exarena, EXARENA );
				EXEC SQL UPDATE DL_DEAL 
				SET EX_ARENA = :chr_l_exarena 
				WHERE CLIENT = :h_dl_client
				AND IDENTIY_NO = :h_indentity_no;

				IS_ANY_ORA_ERROR
			}
					
			

			APL_GOBACK_SUCCESS
		}

		

		memset(chr_l_rowid_A, APL_NULL_CHAR, APL_ROWID_LEN);

		if ( APL_FAILURE == MS_Chk_BTTOrd(&l_ms_52x_struct_h, h_dl_client, h_qty, 
														 chr_l_rowid_A, &l_deal_bttord_struct_h, 
														 l_debug_info_ptr) )
		{
			
			strcpy(chr_g_msg_sts, "RJO");
			

			

			fprintf(fl_userlog,"Message Rejected as Books Transfer Trade for order was not int_found.\n");

			fprintf(fl_repairrpt,"%9sTRADE REJECTION REPORT FOR MESSAGE FILE %s\n", " ", chr_fl_name);
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
			fprintf(fl_repairrpt,"%s\n\n", p_mesg_body);
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
			fprintf(fl_repairrpt, "%9sBooks Transfer Trade not int_found.\n", " ");
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
			fprintf(fl_repairrpt, "\n");
			fflush(fl_repairrpt);

			
			if ( APL_FAILURE == MS_Mod_IncMsgSts("RJO", "BOOKS TRANSFER TRADE FOR ORDER NOT FOUND", chr_g_str_client, NULL) )
			{
				CO_ProcMonitor(APL_OUT_FILE, "Could not insert into IINMSGRP\n", NULL, NULL);
			}
		 strncpy(chr_l_temp_errmsg,(**l_debug_info_ptr).msg,39);
			if ( APL_FAILURE == MS_Mod_IncMsgSts("RJO",chr_l_temp_errmsg, chr_g_str_client, NULL) )
			{
		 		CO_ProcMonitor(APL_OUT_FILE, "Could not insert into IINMSGRP\n", NULL, NULL);
			}

			APL_GOBACK_FAIL

		} 

		memset(chr_l_trcode_a, APL_NULL_CHAR, 2);


		if ( !strcmp(p_msg_no, I_MSGNO_520) )
		{
			chr_l_trcode_a[0] =  DEALCD_RF;
		}
		if ( !strcmp(p_msg_no, I_MSGNO_521) )
		{
			chr_l_trcode_a[0] =  DEALCD_RVP;
		}
		if ( !strcmp(p_msg_no, I_MSGNO_522) )
		{
			chr_l_trcode_a[0] =  DEALCD_DF;
		}
		if ( !strcmp(p_msg_no, I_MSGNO_523) )
		{
			chr_l_trcode_a[0] =  DEALCD_DVP;
		}  


		
		memset(&l_dl_deal_pmtdet_struct_ha, NULL, sizeof(DL_DEAL_PMTDET_STRUCT_H));

		strcpy(l_dl_deal_pmtdet_struct_ha.h_dl_client, h_dl_client);
		strcpy(l_dl_deal_pmtdet_struct_ha.h_indentity_no, l_deal_bttord_struct_h.h_indentity_no);
		strcpy(l_dl_deal_pmtdet_struct_ha.h_verfied_with, l_deal_bttord_struct_h.h_verfied_with);
		strcpy(l_dl_deal_pmtdet_struct_ha.h_info1, l_deal_bttord_struct_h.h_info1);
		strcpy(l_dl_deal_pmtdet_struct_ha.h_access_stamp, 
				 l_deal_bttord_struct_h.h_access_stamp);
		strcpy(l_dl_deal_pmtdet_struct_ha.h_brkrno, 
				 l_deal_bttord_struct_h.h_brkrno);
		l_dl_deal_pmtdet_struct_ha.h_diffamount = l_deal_bttord_struct_h.h_diffamount;

		strcpy(l_dl_deal_pmtdet_struct_ha.h_confdate,chr_h_system_date);
		strcpy(l_dl_deal_pmtdet_struct_ha.h_ispart_,"N");
		l_dl_deal_pmtdet_struct_ha.h_newquantity = 0;
		l_dl_deal_pmtdet_struct_ha.h_newamount = 0;
		strcpy(l_dl_deal_pmtdet_struct_ha.h_newindentity_no,APL_NULL_STRING);
		strcpy(l_dl_deal_pmtdet_struct_ha.h_newlocindentity_no,APL_NULL_STRING);
		l_dl_deal_pmtdet_struct_ha.h_grossamount = 0;
		
		int_l_stat_flg = 0;
		if ( APL_FAILURE == DL_Mod_DLPmt(&l_dl_deal_pmtdet_struct_ha, 
													  p_intlenv_data_struct_h, l_debug_info_ptr) )
		{
        int_l_stat_flg = 1; 
		  
		  CO_ProcMonitor(fl_userlog, "Errors Encountered in DL_Mod_DLPmt,: ", l_debug_info_ptr, NULL);
		  CO_ProcMonitor(p_fl_userlog, "Errors Encountered in DL_Mod_DLPmt,: ", l_debug_info_ptr, NULL);
		  
		 
		 

			 CO_ProcMonitor(fl_userlog, "Returned with failure from DL_Mod_DLPmt().\n",NULL, p_intlenv_data_struct_h);
			 fprintf(fl_userlog,"Message Found With Discrepancy.\n");

			fprintf(fl_repairrpt,"%9sTRADE REJECTION REPORT FOR MESSAGE FILE %s\n", " ", chr_fl_name);
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
			fprintf(fl_repairrpt,"%s\n\n", p_mesg_body);
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
			fprintf(fl_repairrpt, "%9sTrade Found With Discrepancy.\n", " ");
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
			fprintf(fl_repairrpt, "\n");
			fflush(fl_repairrpt);

			strcpy(chr_g_msg_sts, "RJO");

			if ( APL_FAILURE == MS_Mod_IncMsgSts("RJO", "TRADE FOUND WITH DISCREPANCY", chr_g_str_client, NULL) )
			{
				CO_ProcMonitor(APL_OUT_FILE, "Could not insert into IINMSGRP\n", NULL, NULL);
			}
			if ( APL_FAILURE == MS_Mod_IncMsgSts("RJO", "TRADE COULDN'T BE PREMATCHED", chr_g_str_client, NULL) )
			{
			  CO_ProcMonitor(APL_OUT_FILE, "Could not insert into IINMSGRP\n", NULL, NULL);
			 APL_GOBACK_FAIL
			}
		  strncpy( chr_l_temp_errmsg,(**l_debug_info_ptr).msg,39);
			if ( APL_FAILURE == MS_Mod_IncMsgSts("RJO", chr_l_temp_errmsg , chr_g_str_client, NULL) )
		 	{
				  CO_ProcMonitor(APL_OUT_FILE, "Could not insert into IINMSGRP\n", NULL, NULL);
			}

		
		}
		
			strcpy( chr_l_temp_trdsts, l_deal_bttord_struct_h.h_deal_status); 
			memset(&l_deal_bttord_struct_h, NULL, sizeof(DEAL_DET_STRUCT_H));
			strcpy(l_deal_bttord_struct_h.h_deal_status,chr_l_temp_trdsts); 
			strcpy(l_deal_bttord_struct_h.h_verfied_with, chr_l_verwith);
			strcpy(l_deal_bttord_struct_h.h_locindentity_no, h_indentity_no);
			l_deal_bttord_struct_h.h_amt = h_amt;

			if ( APL_FAILURE == DL_Mod_BTTOrd(chr_l_rowid_A, &l_deal_bttord_struct_h, 
															 chr_l_trcode_a, l_debug_info_ptr) )
			{
				strcpy(chr_g_msg_sts, "RJO");

				EXEC SQL ROLLBACK WORK;  
				IS_ANY_ORA_ERROR

				fprintf(fl_repairrpt,"%9sTRADE REJECTION REPORT FOR MESSAGE FILE %s\n", " ", chr_fl_name);
				fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
				fprintf(fl_repairrpt,"%s\n\n", p_mesg_body);
				fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
				fprintf(fl_repairrpt, "%9s Message Rejected as Executed Trade Not Found in the System.\n", " ");
				fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
				fprintf(fl_repairrpt, "\n");
				fflush(fl_repairrpt);

				APL_GOBACK_FAIL
			}
        if (int_l_stat_flg == 1)
		  {
		   

			  if ( APL_FAILURE == MS_Mod_IncMsgSts("RJO", "MSG REJ. BUT TRD DETAILS MODIFIED ", chr_g_str_client, NULL) )
			  {
				  CO_ProcMonitor(APL_OUT_FILE, "Could not insert into IINMSGRP\n", NULL, NULL);
				  APL_GOBACK_FAIL
			  }
			  APL_GOBACK_SUCCESS
		  }
		  if (int_l_stat_flg == 0)
		  {
			fprintf(fl_repairrpt, "%9sTRADE chr_stp REPORT FOR MESSAGE FILE %s\n", " ", chr_fl_name);
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
			fprintf(fl_repairrpt,"%s\n\n", p_mesg_body);
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
			fprintf(fl_repairrpt, "%9sMessage Processed Successfully.\n", " ");
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
			fprintf(fl_repairrpt, "\n");
			fflush(fl_repairrpt);

			strcpy(chr_g_msg_sts, "STO");

         
         strcpy(chr_g_rej_reas,DEAL_PREMATCHED);
         

			APL_GOBACK_SUCCESS
		}
		
		
	}

	RETURN_SUCCESS:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(p_fl_userlog,"Exiting out of MS_Proc_IncMsg52xOrd sucessfully\n",
					NULL, NULL);
	}
	EXEC SQL COMMIT;

	APL_FREE(h_rep_seq_struct);
	return APL_SUCCESS;

	RETURN_FAILURE:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(p_fl_userlog, "Exiting out of MS_Proc_IncMsg52xOrd unsucessfully\n",
					NULL, NULL);
	}
	APL_FREE(h_rep_seq_struct);
	return APL_FAILURE;
}



int   CO_Proc_SplitTokenVal( char  *chr_p_str,
 	      	       char *p_tag,
   	             char *p_value,
						 char	*p_details,
      	          DEBUG_INFO_STRUCT_H  **l_debug_info_ptr)
{


char  chr_h_str[LINERR_LENGTH]   		= APL_NULL_STRING;
char  h_msg_tag[4]             		= APL_NULL_STRING;
char  chr_h_value[LINERR_LENGTH] 	= APL_NULL_STRING;
char  chr_h_temp[LINERR_LENGTH] 	= APL_NULL_STRING;
char	h_info[LINERR_LENGTH]		= APL_NULL_STRING;	
char  *a;
int int_num									= 0;
int int_len									= 0;
char	**temp;

a = (char *)calloc(LINERR_LENGTH,sizeof(char));

memset(chr_h_str, APL_NULL_CHAR, LINERR_LENGTH);
memset(h_msg_tag, APL_NULL_CHAR, 4 );
memset(chr_h_value, APL_NULL_CHAR, LINERR_LENGTH );

strcpy(chr_h_str,chr_p_str);
APL_IF_DEBUG
{
	printf("the chr_h_str is %s\n",chr_h_str);
}



	if ( (chr_h_str[3] != ':') && (chr_h_str[4] != ':') )
	{
		APL_GOBACK_FAIL
	}

strcpy(h_msg_tag, strtok_r(chr_h_str, ":", &a));
strcpy(p_tag,h_msg_tag);
strcpy(chr_h_value, strtok_r(NULL, "\\", &a));
strcpy(chr_h_temp, chr_h_value);
APL_IF_DEBUG
{
	printf("the int_len is %d\n",strlen(chr_h_temp) );
}
int_len = strlen(chr_h_temp);
chr_h_temp[int_len - 1] = '\0';  



APL_IF_DEBUG
{
	printf("The h_msg_tag is %s\n",h_msg_tag);
	printf("the chr_h_value is %s\n",chr_h_value);
	printf("the h_info is %s\n",h_info);
}
strcpy(p_value,chr_h_value);

APL_GOBACK_SUCCESS;


		APL_GOBACK_SUCCESS
      RETURN_SUCCESS:

      return (APL_SUCCESS);

      RETURN_FAILURE:
      return (APL_FAILURE);
}

int	MS_Proc_IncMsg59xParse(FILE						*fl_incmsg,
						  char						*p_msg_no,
						  MS_59X_STRUCT_H				*p_ms_59x_struct_h,
						  int							*p_fail_reason,
						  char						*h_596no1_data,
						  FILE			   		*fl_userlog,
						  FILE			   		*p_fl_userlog,
						  INTL_ENV_DATA_STRUCT_H		*p_intlenv_data_struct_h,
						  DEBUG_INFO_STRUCT_H				**l_debug_info_ptr)
{
char	chr_l_str[LINERR_LENGTH]		= APL_NULL_STRING;
char	chr_l_str1[LINERR_LENGTH]		= APL_NULL_STRING;
char	chr_l_str2[LINERR_LENGTH]		= APL_NULL_STRING;
char	chr_l_str3[LINERR_LENGTH]		= APL_NULL_STRING;
char	chr_l_str4[LINERR_LENGTH]		= APL_NULL_STRING;
char	chr_h_can_msg_no[17]			= APL_NULL_STRING;	
char	chr_l_found_msg_no[2]			= APL_NULL_STRING;
char	chr_h_txn_ref_no[17]			= APL_NULL_STRING;
char	chr_l_found_ref[2]				= APL_NULL_STRING;
char	chr_l_found_txn_type[2]		= APL_NULL_STRING;
char	chr_l_run_seq[2]				= APL_NULL_STRING;
char	h_deal_cd[4]				= APL_NULL_STRING;
char	chr_h_txn_acc[APL_CLIENT_LENGTH]	= APL_NULL_STRING;
char	chr_h_txn_cname[36]			= APL_NULL_STRING;
char	chr_l_cust_def[2]				= APL_NULL_STRING;
char	chr_l_rep_seq[2]				= APL_NULL_STRING;	
char	chr_l_found_acc[2]				= APL_NULL_STRING;
char	chr_l_trd_dt[7]					= APL_NULL_STRING;
char	chr_h_tr_dt[APL_DATE_LEN]	= APL_NULL_STRING;
char	chr_l_txn_dt[7]					= APL_NULL_STRING;
char	chr_h_txn_dt[APL_DATE_LEN]	= APL_NULL_STRING;
char chr_h_typeofinstr_val[LINERR_LENGTH ]	= APL_NULL_STRING;
char chr_h_new_typeofinstr_val[LINERR_LENGTH ]  =   APL_NULL_STRING;
char chr_h_new_typeofinstr_val[LINERR_LENGTH ]	= APL_NULL_STRING;
char	h_instr_name[36]							= APL_NULL_STRING;
char h_domestic_cp[APL_CLIENT_LENGTH]			= APL_NULL_STRING;
char chr_h_domcpdesc[36]						= APL_NULL_STRING;
char chr_l_orderac[APL_CLIENT_LENGTH]		= APL_NULL_STRING;
char chr_l_cubk[APL_CLIENT_LENGTH]			= APL_NULL_STRING;
char chr_l_checker[APL_USERID_LEN]		= APL_NULL_STRING;
char	chr_h_ccy_value[LINERR_LENGTH]		= APL_NULL_STRING;
char	h_596_paramccy[LINERR_LENGTH]	= APL_NULL_STRING;
char	chr_h_new_ccy_value[LINERR_LENGTH]	= APL_NULL_STRING;
int	int_retstat 						= 0;
int	i 								= 0;
char	h_msg_tag[4]						= APL_NULL_STRING;
char	chr_h_value[LINERR_LENGTH]		= APL_NULL_STRING;
char	h_info[LINERR_LENGTH]		= APL_NULL_STRING;
char	chr_h_isin_no[36]				= APL_NULL_STRING;

char chr_temp_isin[13]            = APL_NULL_STRING;
int i_instr_isin                    = 0;

MS_59X_STRUCT_H				h_59x_struct;

	memset(&h_59x_struct, NULL, sizeof(MS_59X_STRUCT_H) );
	strcpy(chr_l_found_acc,"F");
	strcpy(chr_l_found_ref,"F");
	strcpy(chr_l_found_txn_type,"F");
	strcpy(chr_l_found_msg_no,"F");
	strcpy(chr_l_cust_def, "F");
	strcpy(chr_l_run_seq, "F");
	strcpy(chr_l_rep_seq,"F");
		while (!feof(fl_incmsg))
		{
				memset(chr_l_str,APL_NULL_CHAR,LINERR_LENGTH);
				
                     fgets(chr_l_str,LINERR_LENGTH,fl_incmsg);
                     chr_l_str[strlen(chr_l_str)-1]='\0';
		     printf("\n ******** chr_l_str is |%s| ****** \n",chr_l_str);
				APL_IF_DEBUG
				{
					printf("the chr_l_str is %s\n",chr_l_str);
				}
				if (chr_l_str[0] == '-')
				{
					fprintf(fl_userlog,"Encounterd End of  592 Message\n");
					break;
				}
				if (chr_l_str[0] != ':') 
				{
					continue;
					
				}
				else
				{
					memset(h_info, APL_NULL_CHAR , LINERR_LENGTH);
					memset(h_msg_tag, APL_NULL_CHAR , 4);
					memset(chr_h_value, APL_NULL_CHAR, LINERR_LENGTH);
				 	if (APL_FAILURE == CO_Proc_SplitTokenVal ( chr_l_str,
                                      	   	   h_msg_tag ,
                                         	   	chr_h_value ,
																h_info,
                                            		l_debug_info_ptr ))
           		{
              		
							printf("Failed to Split the Message Line %s\n",chr_l_str);

						

                  strcpy(chr_g_msg_sts, "RJT");

                  if ( APL_FAILURE == MS_Mod_IncMsgSts(chr_g_msg_sts,
                                            "MESSAGE LINE NOT IN PROPER FORMAT", 
															chr_g_str_client, (DEBUG_INFO_STRUCT_H **)NULL) )
                  {
                      CO_ProcMonitor(APL_OUT_FILE,
                               "Failed to insert into IINMSGRP.\n",
                               NULL, NULL);
                  }

             		APL_GOBACK_FAIL
   	         }
					APL_IF_DEBUG
					{
						printf("the chr_value returned from the split funcito is %s\n",chr_h_value);	
						printf("the msg_tag returned from the split funcito is %s\n",h_msg_tag);	
					}

					if (!strcmp(h_msg_tag,I_NOTE)) 
					{
						if (!strcmp(chr_h_value,FX_CANCEL))
						{
							*p_fail_reason = 17; 	
						}
					}

					if (!strcmp(h_msg_tag,"20") )
					{
						strcpy(chr_h_can_msg_no,chr_h_value);
						strcpy(chr_l_found_msg_no ,"T");
					}

					

					if ( !strcmp(h_msg_tag, "21") && 
						  !strcmp(chr_h_txn_ref_no, APL_NULL_STRING) )
					{
						strcpy(chr_h_txn_ref_no, chr_h_value);
						strcpy(chr_l_found_ref,"T");
					}
					if(!strcmp(h_msg_tag,"11S") )
					{
						
						strcpy(h_deal_cd, chr_h_value);
						strcpy(chr_l_found_txn_type,"T");
						memset(chr_l_str3, APL_NULL_CHAR, LINERR_LENGTH);
						
                     fgets(chr_l_str3,LINERR_LENGTH,fl_incmsg);
                     chr_l_str3[strlen(chr_l_str3)-1]='\0';
		     printf("\n ******** chr_l_str3 is |%s| ****** \n",chr_l_str3);
					
						strcpy(chr_l_txn_dt, chr_l_str3);
						chr_l_txn_dt[6]		= APL_NULL_CHAR;
               	if (APL_FAILURE == CR_Proc_DecodeDt(	chr_l_txn_dt , 
																		chr_h_txn_dt ,
                     	                              l_debug_info_ptr ) )
               	{
                  	fprintf(fl_userlog," Failed To Decode Transaction Date.\n");
                  	APL_GOBACK_FAIL
               	}
					}
					if (		(!strcmp(h_msg_tag,"83D"))
						 ||  	(!strcmp(h_msg_tag, "83A")) 
						 ||   (!strcmp(h_msg_tag, "83C"))	 )
					{
						for ( i = 0; i < 10 ; i++)
						{
							chr_h_txn_acc[i] = chr_h_value[i + 1];
						}
						memset(chr_l_str1, APL_NULL_CHAR, LINERR_LENGTH);	
						
						
						
						
						if (!strcmp(chr_l_cust_def,"F") )
						{
							strcpy(chr_l_cust_def,"T");						
						}
						else
						
						{
							strcpy(chr_l_rep_seq,"T");
						}
						strcpy(chr_l_found_acc,"T");
					}
					
					if (		(!strcmp(h_msg_tag, "31P"))
						 || 	(!strcmp(h_msg_tag, "31"))	) 
					{
						
						strcpy(chr_l_trd_dt,chr_h_value);

						chr_l_trd_dt[6] = '\0';
               	if (APL_FAILURE == CR_Proc_DecodeDt(	chr_l_trd_dt , 
																		chr_h_tr_dt ,
                     	                              l_debug_info_ptr ) )
               	{
                  	fprintf(fl_userlog," Failed To Decode Settle Date.\n");
                  	APL_GOBACK_FAIL
               	}

						strcpy(chr_g_settle_dt,chr_h_tr_dt);

						APL_IF_DEBUG
						{
							printf("the trade chr_date coming out of the decode is %s\n",chr_h_tr_dt);
						}
					}		
					
					if (	!strcmp(h_msg_tag,"35B") )
					{
						memset(chr_h_isin_no , APL_NULL_CHAR, LINERR_LENGTH);
						strcpy(chr_h_isin_no, chr_h_value);
						strcpy(h_59x_struct.instr_isin_no, chr_h_isin_no);
						memset(chr_l_str4, APL_NULL_CHAR, LINERR_LENGTH);
						
                     fgets(chr_l_str4,LINERR_LENGTH,fl_incmsg);
                     chr_l_str4[strlen(chr_l_str4)-1]='\0';
		     printf("\n ******** chr_l_str4 is |%s| ****** \n",chr_l_str4);
						chr_l_str4[35] = APL_NULL_CHAR;
						strcpy(h_instr_name, chr_l_str4);

					}
					
					if (	!strcmp(h_msg_tag,"35A") )
					{
						

						strcpy(chr_h_typeofinstr_val, chr_h_value);
						strcpy(chr_h_new_typeofinstr_val, chr_h_value);
						if (APL_FAILURE == CO_Proc_RemoveDot(chr_h_typeofinstr_val,
																chr_h_new_typeofinstr_val,
																l_debug_info_ptr) )
						{
							fprintf(fl_userlog,"Failed To Remove The Decimal From The Instrurity Type Value\n");
							APL_GOBACK_FAIL
						}
						
	
						if (APL_FAILURE == CO_Proc_ReplaceComma(	chr_h_new_typeofinstr_val,
																chr_h_typeofinstr_val,
																l_debug_info_ptr) )
						{
							fprintf(fl_userlog,"Failed to Replace The Commas in Instrurity Type Value\n");
							APL_GOBACK_FAIL
						}
					}
					if (		(!strcmp(h_msg_tag,"87D") ) 
						 || 	(!strcmp(h_msg_tag, "87") )
						 || 	(!strcmp(h_msg_tag,"87A") )	)
					{
						memset(h_domestic_cp, APL_NULL_CHAR , 12);

		


                  if(!strcmp(h_msg_tag,"87D") )
                  {
                     for ( i = 0; i< 11; i++)
                     {
                        h_domestic_cp[i]  = chr_h_value[i] ;
                     }
                     h_domestic_cp[11]=APL_NULL_CHAR;
					   }
						else
						{
							for ( i = 0; i< 10; i++)
							{
								h_domestic_cp[i]  = chr_h_value[i];
							}
							h_domestic_cp[10]=APL_NULL_CHAR;
						}
						memset(chr_l_str2, APL_NULL_CHAR, LINERR_LENGTH);
						
                     fgets(chr_l_str2,LINERR_LENGTH,fl_incmsg);
                     chr_l_str2[strlen(chr_l_str2)-1]='\0';
		     printf("\n ******** chr_l_str2 is |%s| ****** \n",chr_l_str2);
					   
                  if (chr_l_str2[0] == '-')
                  {
                     fprintf(fl_userlog,"Encounterd End of  592 Message\n");
                     break;
                  }
                  if (chr_l_str2[0] != ':')
                  {
                     strcpy(chr_h_domcpdesc , chr_l_str2);
                     continue;
                  }
                  else if(chr_l_str2[0] == ':')
                  {
                     memset(h_info, APL_NULL_CHAR , LINERR_LENGTH);
                     memset(h_msg_tag, APL_NULL_CHAR , 4);
                     memset(chr_h_value, APL_NULL_CHAR, LINERR_LENGTH);
                     if (APL_FAILURE == CO_Proc_SplitTokenVal ( chr_l_str2,
                                                   h_msg_tag ,
                                                   chr_h_value ,
                                                   h_info,
                                                   l_debug_info_ptr ))
                     {
                        
									printf("Failed to Split the Message Line %s\n",chr_l_str);
                        strcpy(chr_g_msg_sts, "RJT");

                        if ( APL_FAILURE == MS_Mod_IncMsgSts(chr_g_msg_sts,
                                               "MESSAGE LINE NOT IN PROPER FORMAT",
                                                chr_g_str_client, (DEBUG_INFO_STRUCT_H **)NULL) )
                        {
                         CO_ProcMonitor(APL_OUT_FILE,
                                  "Failed to insert into IINMSGRP.\n",
                                  NULL, NULL);
                        }
                          APL_GOBACK_FAIL
                     }
                   }
					}
					
					if (!strcmp(h_msg_tag,"32B") )
					{
						memset(chr_h_ccy_value, APL_NULL_CHAR , LINERR_LENGTH );
						strcpy(chr_h_ccy_value, chr_h_value);
						strcpy(h_596_paramccy,chr_h_ccy_value);

						if (APL_FAILURE == CO_Proc_RemoveDot(chr_h_ccy_value,
																chr_h_new_ccy_value,
																l_debug_info_ptr) )
						{
							fprintf(fl_userlog,"Failed To Remove The Decimal From The Ccy Value\n");
							APL_GOBACK_FAIL
						}

						
	
						if (APL_FAILURE == CO_Proc_ReplaceComma(	chr_h_new_ccy_value,
																chr_h_ccy_value,
																l_debug_info_ptr) )
						{
							fprintf(fl_userlog,"Failed to Replace The Commas in Ccy Value\n");
							APL_GOBACK_FAIL
						}
	
					}
				}	
		}				
		strcpy(h_59x_struct.can_swift_msg_no, chr_h_can_msg_no);
		strcpy(h_59x_struct.txn_indentity_no, chr_h_txn_ref_no);
		strcpy(h_59x_struct.deal_cd, h_deal_cd);
		strcpy(h_59x_struct.txn_date, chr_h_txn_dt);
		strcpy(h_59x_struct.currency_value, chr_h_ccy_value);
		strcpy(h_59x_struct.txn_clt, chr_h_txn_acc);
		strcpy(h_59x_struct.dl_dt, chr_h_tr_dt);
		strcpy(h_59x_struct.txn_clnt_clr_name, chr_h_txn_cname);
		strcpy(h_59x_struct.instr_name , h_instr_name);
		strcpy(h_59x_struct.domestic_cp, h_domestic_cp);
		strcpy(h_59x_struct.domcpdetail, chr_h_domcpdesc);
		strcpy(h_59x_struct.instr_class_val, chr_h_typeofinstr_val);
		if (!strcmp(chr_l_cust_def,"F") ) 
		{
			*p_fail_reason = 2;
		}	
		
		if (!strcmp(chr_l_rep_seq,"T") )
		{
			*p_fail_reason = 3;
		}

		if (		(!strcmp(chr_l_found_acc,"F")) 
			 ||	(!strcmp(chr_l_found_ref,"F"))
			 ||   (!strcmp(chr_l_found_txn_type,"F"))
			 ||   (!strcmp(chr_l_found_msg_no,"F"))
			 )
		{
			*p_fail_reason = 12;

		}
		
		if ( 	 (strcmp(h_deal_cd,"520"))
			 && (strcmp(h_deal_cd,"521"))
			 && (strcmp(h_deal_cd,"522"))
			 && (strcmp(h_deal_cd,"523"))
			)
		{
			*p_fail_reason = 13;
		}

			

		if (APL_FAILURE == MT_Rtv_Acc(chr_h_txn_acc,
													  chr_l_cubk,
													  chr_l_orderac,
													  chr_l_checker,
													  &int_retstat,
													  l_debug_info_ptr) )
		{
			if (int_retstat == IV_NO_DATA_FOUND_ERR)
			{
				*p_fail_reason = 16;

			}
		}

	*p_ms_59x_struct_h = h_59x_struct;
	
	

	strcpy(h_596no1_data,chr_l_txn_dt);
	strcat(h_596no1_data,";");
	strcat(h_596no1_data,chr_l_trd_dt);
	strcat(h_596no1_data,";");
   
   
   
   memset(chr_temp_isin,APL_NULL_CHAR,13);
   for (i_instr_isin=0;i_instr_isin < 12;i_instr_isin++)
   {
      chr_temp_isin[i_instr_isin]=h_59x_struct.instr_isin_no[i_instr_isin+5];
   }
      chr_temp_isin[12]='\0';
   
   strcat(h_596no1_data,chr_temp_isin);

	strcat(h_596no1_data,";");
	strcat(h_596no1_data,h_59x_struct.instr_name);
	strcat(h_596no1_data,";");
	
	strcat(h_596no1_data,chr_h_new_typeofinstr_val);
	strcat(h_596no1_data,";");
	strcat(h_596no1_data,h_59x_struct.domestic_cp);
	strcat(h_596no1_data,";");
	strcat(h_596no1_data,h_59x_struct.domcpdetail);
	strcat(h_596no1_data,";");
	strcat(h_596no1_data,h_596_paramccy);
	strcat(h_596no1_data,";");
	strcat(h_596no1_data,h_59x_struct.deal_cd);
	strcat(h_596no1_data,";");
	strcat(h_596no1_data,";");
	strcat(h_596no1_data,";");
	strcat(h_596no1_data,"1;"); 

	APL_GOBACK_SUCCESS
								
      RETURN_SUCCESS:
		{
				  APL_IF_DEBUG
				  {
					  CO_ProcMonitor(p_fl_userlog,"Exiting out of MS_Proc_IncMsg59xParse sucessfully\n",
								  NULL, NULL);

				  }
				  return (APL_SUCCESS);
	  	}
      RETURN_FAILURE:
		{
				  APL_IF_DEBUG
				  {
					  CO_ProcMonitor(p_fl_userlog,"Exiting out of MS_Proc_IncMsg59xParse unsucessfully\n",
								  NULL, NULL);
				  }
				  return (APL_FAILURE);
		}
}






int	MS_Chk_IncMsgCancMsg(MS_59X_STRUCT_H					*p_ms_59x_struct_h,
						int								*p_fail_reason,
						DL_DEAL_OTH_STRUCT_H			*p_ctrade_oth_struct,
						char								*p_ora_rowid,
						char								*p_upd_rep,	
						double							*p_origqty,
						double							*p_origamt,
						char								*p_tr_date,
						char								*p_loccode,
						char								*p_instr_code,
						FILE								*fl_userlog,
						FILE								*p_fl_userlog,
						INTL_ENV_DATA_STRUCT_H			*p_intlenv_data_struct_h,
						DEBUG_INFO_STRUCT_H					**l_debug_info_ptr)
{


SYS_DL_DEAL_STRUCT_H		l_sys_dl_deal_struct_ha;
char							chr_h_system_date[APL_DATE_LEN]	= APL_NULL_STRING;
char							h_ora_rowid[APL_ROWID_LEN]			= APL_NULL_STRING;
double						h_qty = 0.0;
double						h_amt = 0.0;
char							chr_h_tr_dt[APL_DATE_LEN]			= APL_NULL_STRING;
char							h_loccode[5]						= APL_NULL_STRING;
char							h_instr_code[ APL_INSTRUMENTCODE_LEN]		= APL_NULL_STRING;
int							int_retstat								= 0;
int                     int_hiscount                      = 0;
char							h_part_flg[2]					= APL_NULL_STRING;
char							chr_h_trdrowid[APL_ROWID_LEN];
int                     int_p_smieligibility_flg          = 0;
char  						chr_mainfuncarea[APL_MAINFUNCAREA_LEN]	= APL_NULL_STRING;
char  						chr_l_condident[APL_CONDID_LEN]         	= APL_NULL_STRING;
short 						int_l_cond_exists									=	0;
int 							int_l_seq_num 										= 	0;
char 							chr_h_smi_rowid[APL_ROWID_LEN]					= 	APL_NULL_STRING;
short							i_smi_rowid										=	0;
char							chr_l_unique_ref_num[APL_UNIQUE_REF_NUM_LEN]= APL_NULL_STRING;
short							i_uniq_ident_no =0;
strcpy(p_upd_rep,"F");


EXEC SQL VAR chr_h_smi_rowid IS STRING;
EXEC SQL VAR chr_l_unique_ref_num IS STRING;

memset(&l_sys_dl_deal_struct_ha , NULL , sizeof (SYS_DL_DEAL_STRUCT_H) );
memset(chr_h_trdrowid,APL_NULL_CHAR,APL_ROWID_LEN);
memset(chr_h_smi_rowid,APL_NULL_CHAR,APL_ROWID_LEN);

if (( !strcmp(p_ms_59x_struct_h->deal_cd,"520")) || (!strcmp(p_ms_59x_struct_h->deal_cd,"540")))
{
	strcpy(p_ms_59x_struct_h->txn_class ,"2");

}

if (( !strcmp(p_ms_59x_struct_h->deal_cd,"521")) || (!strcmp(p_ms_59x_struct_h->deal_cd,"541")))
{
	strcpy(p_ms_59x_struct_h->txn_class ,"4");

}
if (( !strcmp(p_ms_59x_struct_h->deal_cd,"522") ) || (!strcmp(p_ms_59x_struct_h->deal_cd,"542")))
{
	strcpy(p_ms_59x_struct_h->txn_class ,"1");

}
if (( !strcmp(p_ms_59x_struct_h->deal_cd,"523") ) || (!strcmp(p_ms_59x_struct_h->deal_cd,"543")))
{
	strcpy(p_ms_59x_struct_h->txn_class ,"3");

}

fprintf(fl_userlog,"The Transaction Type Of the Message was %s\n",p_ms_59x_struct_h->txn_class); 

if ( !strcmp(p_ms_59x_struct_h->txn_indentity_no, APL_NULL_STRING) )
{
	*p_fail_reason = 1;

}
if ( !strcmp(p_ms_59x_struct_h->txn_clt, APL_NULL_STRING) )
{
	*p_fail_reason = 2;
}
else
{
	
	printf("p_59x_struct->txn_clt is %s\n",p_ms_59x_struct_h->txn_clt); 
	printf("p_59x_struct->txn_indentity_no is %s\n",p_ms_59x_struct_h->txn_indentity_no); 
	fprintf(p_fl_userlog,"p_59x_struct->txn_clt is %s\n",p_ms_59x_struct_h->txn_clt);
	fprintf(p_fl_userlog,"p_59x_struct->txn_indentity_no is %s\n",p_ms_59x_struct_h->txn_indentity_no);	
	if (APL_FAILURE == MT_Rtv_Trd(p_ms_59x_struct_h->txn_clt,
													p_ms_59x_struct_h->txn_indentity_no,
													&l_sys_dl_deal_struct_ha,	
													chr_h_trdrowid,
													&int_retstat,
													l_debug_info_ptr) )
	{
		if (int_retstat == IV_CRITCAL_ERROR_IND)
		{
			fprintf(fl_userlog,"Fatal Error Encountered in TRADE table\n");
			APL_GOBACK_FAIL

		}
		if (int_retstat == IV_NO_DATA_FOUND_ERR)
		{
         EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_hiscount
         FROM DL_HISDEAL
         WHERE CLIENT=:p_ms_59x_struct_h->txn_clt
         AND IDENTIY_NO=:p_ms_59x_struct_h->txn_indentity_no;

         IS_ANY_ORA_ERROR

         if(int_hiscount == 0)
         {
			
			
		

			if (APL_FAILURE == MT_Rtv_TrdRpr(p_ms_59x_struct_h->txn_clt,
															p_ms_59x_struct_h->txn_indentity_no,
															h_ora_rowid,
															&h_qty,
															&h_amt,
															chr_h_tr_dt,
															h_loccode,
															h_instr_code,
															&int_retstat,
															l_debug_info_ptr) )
			{
				if (int_retstat == IV_CRITCAL_ERROR_IND)
				{
					fprintf(fl_userlog,"Fatal Error Encountered in TRADE REPAIR table\n");
					APL_GOBACK_FAIL

				}
				if (int_retstat == IV_NO_DATA_FOUND_ERR)
				{
					*p_fail_reason = 4;
					fprintf(fl_userlog,"Transaction Not int_found for Account %s and Reference Number %s in system\n",p_ms_59x_struct_h->txn_clt, p_ms_59x_struct_h->txn_indentity_no);
				}
			}
			
			
			
			*p_origqty = h_qty;
			*p_origamt = h_amt;
			strcpy(p_tr_date, chr_h_tr_dt);
			strcpy(p_loccode, h_loccode);
			strcpy(p_instr_code, h_instr_code);
			strcpy(p_upd_rep,"T");

				EXEC SQL SELECT UNIQ_IDENT_NO 
							INTO :chr_l_unique_ref_num:i_uniq_ident_no
							FROM DL_DEALREPAIR 
							WHERE CLIENT=:p_ms_59x_struct_h->txn_clt
							AND IDENTIY_NO =:p_ms_59x_struct_h->txn_indentity_no;
				IS_ANY_ORA_ERROR

				strncpy(chr_g_unique_ref_num,chr_l_unique_ref_num,11);	
				chr_g_unique_ref_num[11]=APL_NULL_CHAR;
			
			
			if (APL_FAILURE == DL_Mod_TrdRprDel(h_ora_rowid,
															&int_retstat,
															l_debug_info_ptr) )	
			{
				if (int_retstat == IV_CRITCAL_ERROR_IND)
				{
					fprintf(fl_userlog,"Fatal Error Encountered in TRADEREPAIR TABLE\n");
					APL_GOBACK_FAIL
				}
				if (int_retstat == IV_NO_DATA_FOUND_ERR)
				{
					fprintf(fl_userlog,"Transaction For Account %s And Refno %s Not Found In TRADE REPAIR Table\n",p_ms_59x_struct_h->txn_clt, p_ms_59x_struct_h->txn_indentity_no);

				}
			}
			
		}
     else if (int_hiscount > 0)
         {
				EXEC SQL SELECT UNIQ_IDENT_NO 
							INTO :chr_l_unique_ref_num:i_uniq_ident_no
							FROM DL_HISDEAL 
							WHERE CLIENT=:p_ms_59x_struct_h->txn_clt
							AND IDENTIY_NO =:p_ms_59x_struct_h->txn_indentity_no;
				IS_ANY_ORA_ERROR

				strncpy(chr_g_unique_ref_num,chr_l_unique_ref_num,11);	
				chr_g_unique_ref_num[11]=APL_NULL_CHAR;
            strcpy(p_upd_rep,"T");
            *p_fail_reason = 20;
         }
	}
}
else
{
	strncpy(chr_g_unique_ref_num,l_sys_dl_deal_struct_ha.h_uniq_ident_no,11);
	chr_g_unique_ref_num[11]=APL_NULL_CHAR;
}

	EXEC SQL SELECT rowid 
				INTO :chr_h_smi_rowid:i_smi_rowid
				FROM DL_DEAL
				WHERE CLIENT=:p_ms_59x_struct_h->txn_clt
				AND IDENTIY_NO =:p_ms_59x_struct_h->txn_indentity_no;
	IS_ANY_ORA_ERROR

  if (EI_Chk_SMIElg(l_sys_dl_deal_struct_ha.h_loccode,
                              l_sys_dl_deal_struct_ha.h_dlt,
                              l_sys_dl_deal_struct_ha.h_classofdl,
                              l_sys_dl_deal_struct_ha.h_instr_code,
                              l_sys_dl_deal_struct_ha.h_locchng_flg,
										chr_h_smi_rowid,
                              &int_p_smieligibility_flg,
                              p_intlenv_data_struct_h,
                              l_debug_info_ptr
                             ) == APL_FAILURE)
    {
       CO_ProcMonitor(APL_OUT_FILE,"Failure from SMI_CheckSMIEligibility", NULL, p_intlenv_data_struct_h);
       APL_GOBACK_FAIL;
    }	
	if (strcmp(p_upd_rep,"T") )
	{
		if ( !strcmp(l_sys_dl_deal_struct_ha.h_deal_status,STATUS_DEL_UAUTH ) )
		{
			*p_fail_reason = 8;
		}
		else if ((g_mt_commonsys_params_struct_h.ei_smi_ind[0] == 'Y') && (!strcmp(l_sys_dl_deal_struct_ha.h_deal_status,STATUS_CONF)) && (int_p_smieligibility_flg))
		{
            *p_fail_reason = 10;  
		}
      else if((g_mt_commonsys_params_struct_h.ei_smi_ind[0] == 'Y') && (int_p_smieligibility_flg))
      {
         if((!strcmp(l_sys_dl_deal_struct_ha.h_deal_status,STATUS_SMI_DELUAUTH)) || (!strcmp(l_sys_dl_deal_struct_ha.h_deal_status,STATUS_SMI_DELAUTH)))
         {
            *p_fail_reason = 30;
         }
         else if((!strcmp(l_sys_dl_deal_struct_ha.h_deal_status,APL_STATUS_SMIUNAUTH)) || (!strcmp(l_sys_dl_deal_struct_ha.h_deal_status,APL_STATUS_SMIAUTH)))
         {
            *p_fail_reason = 30;
         }
      }
		else
		{
			if ( 	 (strcmp(p_ms_59x_struct_h->txn_class ,"1") )	
				 &&  (strcmp(p_ms_59x_struct_h->txn_class ,"2") ) 	
				 && (strcmp(p_ms_59x_struct_h->txn_class ,"3") )
				 && (strcmp(p_ms_59x_struct_h->txn_class ,"4") )	
				)
			{
				*p_fail_reason = 5;

			}
			else
			{
				

				 

				
	
				if (		(strcmp(l_sys_dl_deal_struct_ha.h_instrdate,APL_NULL_STRING ))
					  ||	(strcmp(l_sys_dl_deal_struct_ha.h_moneydate, APL_NULL_STRING)) )
				{
					*p_fail_reason = 6;
				}
				else if (  		(strcmp(l_sys_dl_deal_struct_ha.h_confdate, APL_NULL_STRING))
							 && 	(!strcmp(l_mt_message_sys_params_struct_h.msg569_prematch_ind,"N") ) )
				{
					*p_fail_reason = 10;		
				}

				else if (	(strcmp(l_sys_dl_deal_struct_ha.h_delrecdate, APL_NULL_STRING))
						  )
				{
					*p_fail_reason = 9;
				}	
			}			
			

			if (APL_FAILURE == MT_Rtv_AccFldVal(l_sys_dl_deal_struct_ha.h_dl_client,
														  "partialflg",
														 	h_part_flg,
															l_debug_info_ptr) )
			{
				fprintf(fl_userlog," Account %s  not int_found in Account Table\n",l_sys_dl_deal_struct_ha.h_dl_client);
				APL_GOBACK_FAIL
			}

			if (		(!strcmp(h_part_flg ,"Y") ) 
				 &&	(l_sys_dl_deal_struct_ha.h_qty != l_sys_dl_deal_struct_ha.h_origquantity)
				 )
			{
				*p_fail_reason = 11;
			}
		} 

		

		strcpy(p_ctrade_oth_struct->h_dl_client,l_sys_dl_deal_struct_ha.h_dl_client);
		strcpy(p_ctrade_oth_struct->h_indentity_no,l_sys_dl_deal_struct_ha.h_indentity_no);
		strcpy(p_ctrade_oth_struct->h_locindentity_no,l_sys_dl_deal_struct_ha.h_locindentity_no);
		strcpy(p_ctrade_oth_struct->h_brkrno,l_sys_dl_deal_struct_ha.h_brkrno);
		strcpy(p_ctrade_oth_struct->h_clt_reqdel_flag, "Y");
		strcpy(p_ctrade_oth_struct->h_access_stamp, l_sys_dl_deal_struct_ha.h_access_stamp);

		if (!strcmp(l_sys_dl_deal_struct_ha.h_ispart_, "Y") )
		{
			*p_origamt		= l_sys_dl_deal_struct_ha.h_origamount;
			*p_origqty		= l_sys_dl_deal_struct_ha.h_origquantity;
		}
		else
		{
			*p_origqty = 0;
			*p_origamt = 0;

		}
		strcpy(p_loccode, l_sys_dl_deal_struct_ha.h_loccode);
		strcpy(p_instr_code, l_sys_dl_deal_struct_ha.h_instr_code);
		strcpy(p_tr_date, l_sys_dl_deal_struct_ha.h_dlt);
	} 
} 

strcpy(p_ora_rowid, chr_h_trdrowid);

	APL_GOBACK_SUCCESS
								
      RETURN_SUCCESS:
		APL_IF_DEBUG
		{
			CO_ProcMonitor(p_fl_userlog,"Exiting out of MS_Chk_IncMsgCancMsg sucessfully\n",
						NULL, NULL);

		}
      return (APL_SUCCESS);
      RETURN_FAILURE:
		APL_IF_DEBUG
		{
			CO_ProcMonitor(p_fl_userlog,"Exiting out of MS_Chk_IncMsgCancMsg unsucessfully\n",
						NULL, NULL);
		}
      return (APL_FAILURE);

}

int	MS_Proc_IncMsgTrdCancRpt(FILE		*fl_cancelrpt,
							   char		*chr_fl_name,
								char		*chr_p_client,
								char		*chr_p_refno,
								double	*p_origqty,
								double	*p_origamt,
								char		*p_dealdate,
								char		*p_instr_code,
								char		*p_loccode,
								char		*p_mesg_body,
								DEBUG_INFO_STRUCT_H	**l_debug_info_ptr	
								)
{

	fprintf(fl_cancelrpt,"%9sTRADE CANCELLATION REPORT FOR MESSAGE FILE %s \n"," ",chr_fl_name);
	fprintf(fl_cancelrpt,"%9s-------------------------------------------------------------\n"," ");
	fprintf(fl_cancelrpt, "%s", p_mesg_body);
	fprintf(fl_cancelrpt,"%9s-------------------------------------------------------------\n"," ");
	fprintf(fl_cancelrpt,"%9sTHE FOLLOWING TRADES WERE CANCELLED FROM THE SYSTEM\n\n"," ");
	fprintf(fl_cancelrpt,"%12sACCOUNT	   : %s\n"," ",chr_p_client);
	fprintf(fl_cancelrpt,"%12sREFERENCE NO : %s\n"," ",chr_p_refno);
	fprintf(fl_cancelrpt,"%12sTRADE DATE   : %s\n"," ",p_dealdate);
	fprintf(fl_cancelrpt,"%12sINSTRUMENT CODE: %s\n"," ",p_instr_code);
	
	
	if (!strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind,"Y") )
	{
		fprintf(fl_cancelrpt,"%12sLOCATION		: %s\n"," ",p_loccode);

	}

	APL_GOBACK_SUCCESS
	
      RETURN_SUCCESS:
		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE,"Exiting out of MS_Proc_IncMsgTrdCancRpt sucessfully\n",
						NULL, NULL);

		}
      return (APL_SUCCESS);

      RETURN_FAILURE:
		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE,"Exiting out of I_AddcancelTxnRpt unsucessfully\n",
						NULL, NULL);
		}
      return (APL_FAILURE);
}

int	MS_Proc_IncMsgRejRpt(FILE	*fl_rejectrpt,
							char	*chr_fl_name,
							char	*p_can_msg_no,
							int	 p_fail_reason,
							char	*p_mesg_body,
							DEBUG_INFO_STRUCT_H	**l_debug_info_ptr)
{

	char	chr_h_rej_str[100]	= APL_NULL_STRING;
	
	fprintf(fl_rejectrpt,"%9sTRADE REJECTION REPORT FOR MESSAGE FILE %s \n"," ",chr_fl_name);
	fprintf(fl_rejectrpt,"%9s---------------------------------------------------------------------------\n"," ");
	fprintf(fl_rejectrpt, "%s", p_mesg_body);
	fprintf(fl_rejectrpt,"%9s---------------------------------------------------------------------------\n"," ");

	
	fprintf(fl_rejectrpt,"%9sTHE DETAILS OF THE REJECTED MESSAGE ARE AS FOLLOWS\n"," ");
	
	fprintf(fl_rejectrpt,"%12sMESSAGE REFERENCE NUMBER	: %s\n"," ",p_can_msg_no);

	if (p_fail_reason == 1)
	{
		strcpy(chr_h_rej_str, "NO TRANSACTION REFERENCE NUMBER");
	}
	else if (p_fail_reason == 2)
	{
		strcpy(chr_h_rej_str, "NO ACCOUNT CODE");
	}
	else if (p_fail_reason == 3)
	{
		strcpy(chr_h_rej_str, "REPEATING SEQUENCE");
	}
	else if (p_fail_reason == 4)
	{
		strcpy(chr_h_rej_str, "TRANSACTION NOT FOUND");
	}
	else if (	(p_fail_reason == 5) || (p_fail_reason == 13)	)
	{
		strcpy(chr_h_rej_str, "TRANSACTION DOES NOT MATCH");
	}
	else if (p_fail_reason == 6)
	{
		strcpy(chr_h_rej_str, "TRANSACTION IN SETTLED STATUS");
	}
	else if (p_fail_reason == 7)
	{
		strcpy(chr_h_rej_str, "PROCESSING DATE IS GREATER THAN SETTLEMENT DATE");
	}
	else if (p_fail_reason == 8)
	{
		strcpy(chr_h_rej_str, "TRANSACTION ALREADY CANCELLED");
	}
	else if (p_fail_reason == 9)
	{
		strcpy(chr_h_rej_str, "MANIFOLD ALREADY PRINTED FOR THIS TRADE");
	}
	else if (p_fail_reason == 10)
	{
		strcpy(chr_h_rej_str, "TRANSACTION ALREADY CONFIRMED");
	}
	else if (p_fail_reason == 11)
	{
		strcpy(chr_h_rej_str, "TRADE PARTIALLY CONFIRMED");
	}
	else if (p_fail_reason == 12)
	{
		strcpy(chr_h_rej_str, "MANDATORY FIELDS ARE MISSING");
	}
	else if (p_fail_reason == 14)
	{
		strcpy(chr_h_rej_str, "ADDRESS NOT INPUT FOR THIS CUSTOMER");
	}
	else if (p_fail_reason == 15)
	{
		strcpy(chr_h_rej_str, "MESSAGE PRIORITY SET TO 9 FOR THIS CUSTOMER");
	}
	else if (p_fail_reason == 16)
	{
		strcpy(chr_h_rej_str, "ACCOUNT DOES NOT EXIST IN THE SYSTEM");
	}
	else if (p_fail_reason == 17) 
	{
		sprintf(chr_h_rej_str, "TAG-72 CONTAINS %s ",FX_CANCEL);
	}
	else if (p_fail_reason == 20) 
	{
		sprintf(chr_h_rej_str, "TRANSACTION FOUND IN HISTORY");
	}
   else if (p_fail_reason == 30)
   {
      sprintf(chr_h_rej_str, "AWAITING SMI APPROVAL");
   }

	fprintf(fl_rejectrpt,"%12sREJECTION REASON : %s\n"," ",chr_h_rej_str);
	fprintf(fl_rejectrpt,"%9s---------------------------------------------------------------------------\n\n\n"," ");

	if ( APL_FAILURE == MS_Mod_IncMsgSts("RJT", chr_h_rej_str, chr_g_str_client, NULL) )
	{
		CO_ProcMonitor(APL_OUT_FILE, "Failed to insert into IINMSGRP.\n", NULL, NULL);
		APL_GOBACK_FAIL
	}

	APL_GOBACK_SUCCESS
	
      RETURN_SUCCESS:
		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE,"Exiting out of MS_Proc_IncMsgRejRpt sucessfully\n",
						NULL, NULL);

		}
      return (APL_SUCCESS);

      RETURN_FAILURE:
		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE,"Exiting out of MS_Proc_IncMsgRejRpt unsucessfully\n", NULL, NULL);
		}
      return (APL_FAILURE);
}

int MS_Proc_IncMsg59x( FILE							*fl_incmsg,
						char							*chr_fl_name,
						char							*p_msg_no,
						FILE							*fl_cancelrpt,
						FILE							*fl_rejectrpt,
						FILE							*fl_userlog,
						FILE							*p_fl_userlog,
						char							*p_mesg_body,
						INTL_ENV_DATA_STRUCT_H		*p_intlenv_data_struct_h,
						DEBUG_INFO_STRUCT_H				**l_debug_info_ptr)
{
char	chr_h_correct_msg[2]		= APL_NULL_STRING;
int	int_h_no_of_trd				= 0;
int	int_h_fail_reason			= 0;
DL_DEAL_OTH_STRUCT_H			l_dl_deal_oth_struct_h;
MS_59X_STRUCT_H					h_59x_struct;
char chr_fail_reason[3]  =    APL_NULL_STRING;
	char                 chr_rep_str1[3]                    = APL_NULL_STRING;
   char                 chr_rep1_desc1[41]                 = APL_NULL_STRING;
   char                 chr_funcdesc1[61]                  = APL_NULL_STRING;
	char                 chr_rep_str2[3]                    = APL_NULL_STRING;
   char                 chr_rep1_desc2[41]                 = APL_NULL_STRING;
   char                 chr_funcdesc2[61]                  = APL_NULL_STRING;
	char						chr_h_upd_rep[2]						 = APL_NULL_STRING;	
	char						h_instr_code[APL_INSTRUMENTCODE_LEN]		 = APL_NULL_STRING;
	char						chr_h_tr_dt[APL_DATE_LEN]			 = APL_NULL_STRING;
	double					h_origamount = 0.0;
	double					h_origquantity = 0.0;	
	char						h_loccode[5]						 = APL_NULL_STRING;	
	char						chr_h_param_str[PARAM_STR_LEN]		 = APL_NULL_STRING;
	char						h_ora_rowid[APL_ROWID_LEN]			 = APL_NULL_STRING;
	memset(&l_dl_deal_oth_struct_h , NULL , sizeof(DL_DEAL_OTH_STRUCT_H) );
	memset(&h_59x_struct, NULL , sizeof(MS_59X_STRUCT_H) );
		
	memset(chr_h_param_str, APL_NULL_CHAR ,PARAM_STR_LEN);

		if (APL_FAILURE == MS_Proc_IncMsg59xParse(fl_incmsg,
													p_msg_no,
													&h_59x_struct,
													&int_h_fail_reason,
													chr_h_param_str,
													fl_userlog,
													p_fl_userlog,
													p_intlenv_data_struct_h,
													l_debug_info_ptr) )
		{
			fprintf(fl_userlog,"Failed to Parse 59x msg\n");
			APL_GOBACK_FAIL
		}
		
		
		
		if (int_h_fail_reason == 0)
		{
			if (APL_FAILURE == MS_Chk_IncMsgCancMsg(&h_59x_struct,
													 &int_h_fail_reason,
													 &l_dl_deal_oth_struct_h,
													 h_ora_rowid,
													 chr_h_upd_rep,
													 &h_origquantity,
													 &h_origamount,
													 chr_h_tr_dt,
													 h_loccode,
													 h_instr_code,	 
													 fl_userlog,
													 p_fl_userlog,
													 p_intlenv_data_struct_h,
													 l_debug_info_ptr) )			
			{
				fprintf(fl_userlog,"Failed to Validate Message\n");
				APL_GOBACK_FAIL
			}

		}
		
		

		if (	(int_h_fail_reason  == 0 ) 
			 ||(int_h_fail_reason  == 7 ) )
		{
			if (strcmp(chr_h_upd_rep	,"T")) 
			{
				fprintf(fl_userlog,"Trade With Reference Number :%s To Be Marked For Deletion\n",h_59x_struct.txn_indentity_no);

				strcpy(p_intlenv_data_struct_h->h_mode, APL_FUNC_DELETE);
				strcpy(p_intlenv_data_struct_h->usr,"SYSTEM");
				strcpy(p_intlenv_data_struct_h->subprocess, CUST_DEL_IND);
				strcpy(p_intlenv_data_struct_h->processtion, "Trade Cancel");
				strcpy(p_intlenv_data_struct_h->auth_req,"Y");
				strcpy(l_dl_deal_oth_struct_h.h_custinfo,h_59x_struct.can_swift_msg_no);

				

				
				if (APL_FAILURE == DL_Proc_TrdOth(&l_dl_deal_oth_struct_h,
															p_intlenv_data_struct_h,
															l_debug_info_ptr) )
				{
					
					if (APL_FAILURE == CO_ProcMonitor(fl_rejectrpt,
														 "ERRORS WHILE DELETING TRADE",
														 l_debug_info_ptr,
														 NULL) )
					{
						fprintf(fl_userlog,"Failed To Write The Errors Returned While Generating Trade To Rejction report\n");
						APL_GOBACK_FAIL	
					}
					fprintf(fl_userlog,"Failed To Update The Trade\n");
					APL_GOBACK_FAIL
				}
			}	
			
			if (APL_FAILURE == MS_Proc_IncMsgTrdCancRpt( fl_cancelrpt,
															  chr_fl_name,	
															  h_59x_struct.txn_clt,	
															  h_59x_struct.txn_indentity_no,	
															  &h_origquantity,
															  &h_origamount,
															  chr_h_tr_dt,
															  h_instr_code,
															  h_loccode,
														   	p_mesg_body,
															  l_debug_info_ptr	) )
			{
				fprintf(fl_userlog,"Failed To Print The Trade cancellation Report\n");
				APL_GOBACK_FAIL	
			}					
			fprintf(fl_userlog,"Printed the Trade Cancellation Report \n");
			
			
			strcpy(chr_g_msg_sts,"STP");
			
			if ( APL_FAILURE == MS_Mod_IncMsgSts("STP", APL_NULL_STRING, 
															chr_g_str_client, l_debug_info_ptr) )
			{
				CO_ProcMonitor(APL_OUT_FILE, "Failed to insert into IINMSGRP.\n",
							NULL, NULL);

				APL_GOBACK_FAIL
			}
		}
		else if (	(int_h_fail_reason ==	4 )
			 		|| (int_h_fail_reason == 6)
			 		|| (int_h_fail_reason == 8)
			 		|| (int_h_fail_reason == 9) 
			 		|| (int_h_fail_reason == 10)
					|| (int_h_fail_reason == 20))
		{
			
			
					
			
			fprintf(fl_userlog,"The Transaction Was not Found in Trade And  Repair \n");
			fprintf(fl_userlog,"About to Send a Minus 596 Message\n");

			if (int_h_fail_reason == 4)	
			{
				
				sprintf(chr_fail_reason,"%d",int_h_fail_reason);
				strcat(chr_h_param_str,chr_fail_reason);
				strcat(chr_h_param_str,";");
				strcat(chr_h_param_str,h_59x_struct.can_swift_msg_no);
				strcat(chr_h_param_str,";");
				if (APL_FAILURE == GBDbInsIMSGENT("596N01",
															 h_59x_struct.txn_indentity_no,
															 h_59x_struct.txn_clt,
															 'Y',
															 chr_h_param_str,
															 l_debug_info_ptr) )
				{
					fprintf(fl_userlog,"Failed To Insert into IMSGENT table\n");
					APL_GOBACK_FAIL
				}
				fprintf(fl_userlog,"Sending a 596NO1 Message\n");
			}
			else
			{
				
				memset(chr_h_param_str, APL_NULL_CHAR ,PARAM_STR_LEN);
				fprintf(fl_userlog,"The Transaction Was Found in Trade or Repair\n");
				
				strcpy(chr_h_param_str,h_59x_struct.deal_cd);
				strcat(chr_h_param_str,";");
				sprintf(chr_fail_reason,"%d",int_h_fail_reason);
				strcat(chr_h_param_str,chr_fail_reason);
				strcat(chr_h_param_str,";");
				strcat(chr_h_param_str,h_59x_struct.can_swift_msg_no);
				strcat(chr_h_param_str,";");
				if (APL_FAILURE == GBDbInsIMSGENT("596N02",
															 h_59x_struct.txn_indentity_no,
															 h_59x_struct.txn_clt,
															 'Y',
															 chr_h_param_str,
															 l_debug_info_ptr) )
				{
					fprintf(fl_userlog,"Failed To Insert into IMSGENT table\n");
					APL_GOBACK_FAIL
				}
				fprintf(fl_userlog,"Sending a Outgoing 596NO2 Message\n");
			}

			
			if (APL_FAILURE == MS_Proc_IncMsgRejRpt( fl_rejectrpt,
														  chr_fl_name,	
														  h_59x_struct.can_swift_msg_no,
														  int_h_fail_reason,
														  p_mesg_body,
														  l_debug_info_ptr) )
			{
				fprintf(fl_userlog,"Failed To Print The REJECTION OF TRANSACTION REPORT \n");
				APL_GOBACK_FAIL
			}
			fprintf(fl_userlog,"Printed The Trade Rejection Report\n");

		}
		else if ( 	(int_h_fail_reason == 1 )
				  ||  (int_h_fail_reason == 2 )
				  ||	(int_h_fail_reason == 3)
				  ||	(int_h_fail_reason == 5)
				  ||	(int_h_fail_reason == 13)
				  ||  (int_h_fail_reason == 11)
				  ||	(int_h_fail_reason == 12)
				  ||	(int_h_fail_reason == 14)
				  ||	(int_h_fail_reason == 15)   
				  ||	(int_h_fail_reason == 16)  
				  ||	(int_h_fail_reason == 17)	  
				  ||  (int_h_fail_reason == 30))
		{
			

			fprintf(fl_userlog,"Message Rejected. See the Rejection Report for Reasons of Rejection.\n"); 

			if (APL_FAILURE == MS_Proc_IncMsgRejRpt( fl_rejectrpt,
														  chr_fl_name,	
														  h_59x_struct.can_swift_msg_no,
														  int_h_fail_reason,
														  p_mesg_body,
														  l_debug_info_ptr) )
			{
				fprintf(fl_userlog,"Failed To Print The REJECTION OF TRANSACTION REPORT \n");
				APL_GOBACK_FAIL
			}
		}

		APL_GOBACK_SUCCESS

      RETURN_SUCCESS:
		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE,"Exiting out of MS_Proc_IncMsg59x sucessfully\n",
						NULL, NULL);

		}
      return (APL_SUCCESS);
      RETURN_FAILURE:
		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE,"Exiting out of MS_Proc_IncMsg59x unsucessfully\n",
						NULL, NULL);
		}
      return (APL_FAILURE);
}



main (int argc,char **argv)
{
   
extern int MS_Rtv_IncMsg(MQHCONN,MQHOBJ,FILE *,FILE *,MQLONG *,char *,DEBUG_INFO_STRUCT_H **);
extern int MQGetConn(char *, char *, MQHCONN *, MQHOBJ *,char *);

   struct               sqlca sqlca;
   DEBUG_INFO_STRUCT_H         **l_debug_info_ptr     = NULL;
	DEBUG_INFO_STRUCT_H			*l_debug_info_struct	 = NULL;
   INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h  = (INTL_ENV_DATA_STRUCT_H *) NULL;

   int         int_retval                    	= 0;
   int         i                          = 0;
   	/* Added by kotubabu for Linux Migration -Start*/
    #ifdef OS_LINUX
    FILE        *fl_log                		= (FILE *) NULL;
    FILE        *SesamIni                  = (FILE *) NULL;
    FILE        *chr_finifile                  = (FILE *) NULL;
    #else
    FILE *fl_log = APL_OUT_FILE;
	FILE *SesamIni = APL_OUT_FILE;
	FILE *chr_finifile = APL_OUT_FILE;
    #endif
    #ifdef OS_LINUX
     fl_log = APL_OUT_FILE;
	 SesamIni = APL_OUT_FILE;
	 chr_finifile = APL_OUT_FILE;
    #endif
   /* Added by kotubabu for Linux Migration-End*/
   char        chr_inifile[PATH_LENGTH]       = APL_NULL_STRING;
   char        chr_l_sys_date[APL_DATE_LEN]   = APL_NULL_STRING;
   char        chr_l_sys_date_time[APL_DATE_LEN]   = APL_NULL_STRING;
	char        chr_logfile[PATH_LENGTH]			= APL_NULL_STRING;
   char        chr_uname[APL_USERID_LEN];
   char        chr_passwd[APL_PASSWD_LEN];
	char			chr_custody_id_b[APL_USERID_LEN]		= APL_NULL_STRING;	
	char			chr_l_incmsgdir[PATH_LENGTH]		= APL_NULL_STRING;
	char			chr_l_incmsgarchdir[PATH_LENGTH]	= APL_NULL_STRING;
	char			chr_l_logfilename[PATH_LENGTH]	= APL_NULL_STRING;
	char			chr_l_logfilename1[PATH_LENGTH]= APL_NULL_STRING;
	char			chr_l_tmplogfilename[PATH_LENGTH]	= APL_NULL_STRING;
	char			chr_l_tmplogfilename1[PATH_LENGTH]	= APL_NULL_STRING;
	char			chr_h_restart_data[51]					= APL_NULL_STRING;
	char			h_ora_rowid[APL_ROWID_LEN]			= APL_NULL_STRING;
	short			i_restart_info						= 0;
	short			i_ora_rowid								= 0;
	int			int_l_return_status 				= 0;
	char			chr_l_statinfo[61]							= APL_NULL_STRING;
	
	short 			l_sfe_inc_flg							=	0;
   int int_l_count1 = 0;
   float flt_l_sleep_interval = 0.25;
   char chr_buffer[KEY_LENGTH];
   char  chr_l_mqname_common[48]                  = APL_NULL_STRING;
   short    i_mqname_common =0;
   char  chr_l_reply_q_common[48]                  = APL_NULL_STRING;
   short    i_reply_q_common =0;
	char chr_mtemp[100] = APL_NULL_STRING;
		/* Added by kotubabu for Linux Migration -Start*/
    #ifdef OS_LINUX
	FILE        *fl_userlog                = (FILE *) NULL;
    #else
    FILE *fl_userlog = APL_OUT_FILE;
    #endif
   /* Added by kotubabu for Linux Migration-End*/
 	struct timespec interval,int_remainder;

	
   MQHCONN  Hcon;
   MQHOBJ   Hobj;
   MQLONG   CompCode;
   MQLONG   Reason;
   char     chr_qmname[QUEUE_MANAGER_LEN]        =  APL_NULL_STRING;
   char     queue_name[QUEUE_LEN]                 =  APL_NULL_STRING;
   char     chr_qname1[QUEUE_LEN]                =  APL_NULL_STRING;
   int      int_h_resp_count                     =  0;
   MQHCONN  Hcon_reply;
   MQHOBJ   Hobj_reply;
   MQLONG   Reason_reply;
   MQLONG   CompCode_reply;

	
	
	char			chr_l_536logfilename[PATH_LENGTH]= APL_NULL_STRING;
	char			chr_l_536tmplogfilename[PATH_LENGTH]	= APL_NULL_STRING;
   FILE        *fl_536log                		= (FILE *) NULL;
	

	short l_online_check_flg=0; 
	char chr_l_chk_system_online[2]=APL_NULL_STRING; 

   EXEC SQL BEGIN DECLARE SECTION;
	EXEC SQL VAR chr_h_restart_data IS STRING;
	EXEC SQL VAR h_ora_rowid IS STRING;
   EXEC SQL VAR chr_uname   IS STRING;
	EXEC SQL VAR chr_passwd  IS STRING;
	EXEC SQL VAR chr_l_chk_system_online  IS STRING; 
   EXEC SQL END DECLARE SECTION;

	

	p_intlenv_data_struct_h   =  (INTL_ENV_DATA_STRUCT_H	*)calloc(1,sizeof(INTL_ENV_DATA_STRUCT_H));
   APL_MALLOC_FAIL(p_intlenv_data_struct_h);

	
	l_debug_info_struct = (DEBUG_INFO_STRUCT_H *)calloc(1,sizeof(DEBUG_INFO_STRUCT_H));
	l_debug_info_ptr		 = &l_debug_info_struct; 

   

	interval.tv_sec = 0.0;
	memset(chr_mtemp,APL_NULL_CHAR,100);
	memset(chr_l_chk_system_online,APL_NULL_CHAR,sizeof(chr_l_chk_system_online)); 

   strcpy(chr_inifile,getenv("INTL_ROOT_PATH"));
   strcat(chr_inifile,"/intl_sun.cfg");

   if ( (chr_finifile = fopen(chr_inifile,"r") ) == NULL)
         exit(-1);

	if (APL_FAILURE == 	CO_ReadToken(chr_finifile, 
						  						"INTL_LOG_PATH",
						   					chr_logfile,
												l_debug_info_ptr) )
	{
		APL_GOBACK_FAIL
   }

	APL_FETCH_DB_LOGIN_DETAILS(chr_finifile, chr_custody_id_b, chr_uname, chr_passwd,APL_OUT_FILE, l_debug_info_ptr)
	EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;
	IS_ANY_ORA_ERROR

	if (APL_FAILURE == CO_Rtv_RptFileName("4d",
													APL_LOGFILE_DESC,
													100,
													"INCOMING_MESSAGES",
													NULL,
													&fl_log,
													l_debug_info_ptr) )
	{
		exit(-1);
	}

	

   if (APL_FAILURE == CO_Rtv_RptFileName("4D",
                                      APL_LOGFILE_DESC,
                                      100,
                                      "INCOMING_MESSAGES",
                                      NULL,
                                      &fl_userlog,
                                      l_debug_info_ptr) )
  {
     exit(-1);
  }
	


	

   if (APL_FAILURE == CO_Rtv_RptFileName("4H",
                                      APL_LOGFILE_DESC,
                                      100,
                                      "INCOMING_MESSAGES MT 536",
                                      NULL,
                                      &fl_536log,
                                      l_debug_info_ptr) )
  {
     exit(-1);
  }
	

	EXEC SQL COMMIT;
	IS_ANY_ORA_ERROR
	

	strcpy(p_intlenv_data_struct_h->usr,"SYSTEM");
	strcpy(p_intlenv_data_struct_h->processtion,"INCOMING_MESSAGES");

	if (APL_SUCCESS == EI_Proc_BatchRestart("I_INC",
												 "I_INC",
												 NULL,
												 &int_l_return_status,
												 l_debug_info_ptr,
												 p_intlenv_data_struct_h))
	{
		if (int_l_return_status == S_RESTART |int_l_return_status == S_START)
		{
			EXEC SQL SELECT PROCESSING_STATUS,ROWID
						INTO 	:chr_h_restart_data:i_restart_info,:h_ora_rowid:i_ora_rowid
						FROM SYS_BATCHPROC
						WHERE PROCESS_NAME = 'I_INC'
							AND STATUS = 'started'
							FOR UPDATE OF PROCESSING_STATUS,STATUS;

							IS_ANY_ORA_ERROR
		}
		else if (int_l_return_status == S_CANNOT_EXECUTE)
		{
			CO_ProcMonitor(fl_log,
						"Batch Table Cannot be Locked as Copy Of The Daemon Is Still Running",
						NULL, NULL);
			APL_GOBACK_FAIL
		}
	}
	else
	{
		CO_ProcMonitor(fl_log,"Batch Table Cannot Be locked",NULL,NULL);
		APL_GOBACK_FAIL
	}

	

	if (APL_FAILURE == CO_Rtv_FileNm_From_Pointer(fl_log,
															chr_logfile,
															chr_l_logfilename) )
	{
		fprintf(fl_log,"Failed To Get File Name From CO_Rtv_FileNm_From_Pointer\n");
		APL_GOBACK_FAIL
	}
	
	sprintf(chr_l_tmplogfilename, "%s/%s", chr_logfile, chr_l_logfilename);

	if (APL_FAILURE == CO_Rtv_FileNm_From_Pointer(fl_userlog,
															chr_logfile,
															chr_l_logfilename1) )
	{
		fprintf(fl_log,"Failed To Get File Name From CO_Rtv_FileNm_From_Pointer\n");
		APL_GOBACK_FAIL
	}
	sprintf(chr_l_tmplogfilename1, "%s/%s", chr_logfile, chr_l_logfilename1);


	
   if (APL_FAILURE == CO_Rtv_FileNm_From_Pointer(fl_536log,
                                             chr_logfile,
                                             chr_l_536logfilename) )
   {
      fprintf(fl_log,"Failed To Get File Name From CO_Rtv_FileNm_From_Pointer\n");
      APL_GOBACK_FAIL
   }
   sprintf(chr_l_536tmplogfilename, "%s/%s", chr_logfile, chr_l_536logfilename);
	

    

    if (  APL_FAILURE == CO_RtvSysParams(l_debug_info_ptr)   )
    {
      APL_GOBACK_FAIL
    }

	

	strcpy(p_intlenv_data_struct_h->usr, "SYSTEM");

	
	if (CO_ReadToken( chr_finifile,
							"INTL_MS_INC_PATH",
							chr_l_incmsgdir,
							l_debug_info_ptr)  == APL_FAILURE)
	{
		fprintf(fl_log,"Failed To Open The Incoming Messages Directory\n");
      APL_GOBACK_FAIL
	}
	if (CO_ReadToken( chr_finifile,
							"INTL_MSINC_ARC_PATH",
							chr_l_incmsgarchdir,
							l_debug_info_ptr)  == APL_FAILURE)
	{
		fprintf(fl_log,"Failed To Open The Incoming Messages Archival Directory\n");
      APL_GOBACK_FAIL
	} 


	
   if (APL_FAILURE == CO_Chk_CntryEnabled( "INCOMING_MSG",
                                         "SFE_MQ_INC",
                                          &l_sfe_inc_flg,
                                          l_debug_info_ptr ))
      {
         APL_GOBACK_FAIL
      }
	if(l_sfe_inc_flg==1)
	{
   	if (CO_ReadToken(chr_finifile,"INTL_EI_MQ_ADM",chr_qmname,l_debug_info_ptr) == APL_FAILURE)
      	APL_GOBACK_FAIL
   	if(!strlen(chr_qmname))
      	APL_GOBACK_FAIL
	}
	

	fclose(chr_finifile);

	
	if (APL_FAILURE == CO_Chk_CntryEnabled(  "INCOMING_MSG",
														"ONLINE_CHECK",
														&l_online_check_flg,
														l_debug_info_ptr   ))
	{
		APL_GOBACK_FAIL
	}
	

	
	if(l_sfe_inc_flg==1)
	{
      EXEC SQL SELECT QUEUE_NAME ,RPLY_QUEUE_NAME
           INTO :chr_l_mqname_common:i_mqname_common , :chr_l_reply_q_common:i_reply_q_common
           FROM PRO_MQNAMES
           WHERE nation_code=:g_mt_commonsys_params_struct_h.nation_code
           AND EVENT_CLASS ='I';
       IS_ANY_ORA_ERROR;

       if(sqlca.sqlcode==1403)
       {
         printf("Queue name for the country not int_found\n");
         APL_GOBACK_FAIL
       }
      strcpy(queue_name,chr_l_mqname_common);
      strcpy(chr_qname1,chr_l_reply_q_common);
   	if(!strlen(queue_name))
      	APL_GOBACK_FAIL

	   if(!strlen(chr_qname1))
   	   APL_GOBACK_FAIL
   	if (MQGetConn(chr_qmname,queue_name,&Hcon,&Hobj,"I") == APL_FAILURE)
		{
			fprintf(fl_log,"MQGetConn for incoming queue failed\n ");		
      	APL_GOBACK_FAIL
		}

	   if (MQGetConn(chr_qmname,chr_qname1,&Hcon_reply,&Hobj_reply,"O") == APL_FAILURE)
		{
			fprintf(fl_log,"MQGetConn for reply queue failed \n");		
      	APL_GOBACK_FAIL
		}

   	CO_ProcMonitor(fl_log,"I_INC deamon started......\n",NULL,NULL);
   	int_l_count1 = 0;

   	while(1)
   	{
			
			if ( l_online_check_flg )
			{
				EXEC SQL SELECT EOD_IND INTO :chr_l_chk_system_online FROM PRO_SYS_DATE;
				IS_ANY_ORA_ERROR

				if ( strcmp(chr_l_chk_system_online,"O") )
				{
					CO_ProcMonitor(APL_OUT_FILE, "Incoming Daemon Sleeping : System Not Online", NULL, NULL);
					sleep(5*I_INC_SLEEP_TIME); 
					continue;
				}
			}
			

      	sqlca.sqlcode = 0;
					
         	   if (APL_FAILURE == MS_Rtv_IncMsg(Hcon,Hobj,chr_finifile,
																  fl_log,&Reason,chr_l_incmsgdir,&l_debug_info_ptr))
          		{
               	if (int_l_count1 >= 5)
               	{
                  	CO_ProcMonitor(fl_log,"Error...Ending Incoming Message daemon process\n\n",
										NULL,NULL);
                  	APL_GOBACK_FAIL
               	}

	               if ((Reason == MQRC_CONNECTION_BROKEN) 
							|| (Reason == MQRC_HCONN_ERROR) 
							|| (Reason == MQRC_HOBJ_ERROR))
               	{
                  	MQCLOSE(Hcon,&Hobj,MQCO_NONE,&CompCode,&Reason);
                  	{
                     	sprintf(chr_mtemp,"MQ Close ended with reason %ld",Reason);
                     	CO_ProcMonitor(fl_log,chr_mtemp,NULL,NULL);
                  	}
                  	MQDISC(&Hcon,&CompCode,&Reason);
                  	{
                     	sprintf(chr_mtemp,"MQ Disc ended with reason %ld",Reason);
                     	CO_ProcMonitor(fl_log,chr_mtemp,NULL,NULL);
                  	}
                  	sleep(10);
                  	CO_ProcMonitor(fl_log,"Attempting to reconnect to MQ Server...",NULL,NULL);
                  	if (MQGetConn(chr_qmname,queue_name,&Hcon,&Hobj,"I") == APL_FAILURE)
                     	APL_GOBACK_FAIL
              		}
               	else
               	{
                  	int_l_count1 += 1;
                  	if (flt_l_sleep_interval >= 1.0)
                  	{
                     	CO_ProcMonitor(fl_log,"Sleeping ...",NULL,NULL);
                     	sleep((int)flt_l_sleep_interval);
                  	}
                  	else
                  	{
                     	CO_ProcMonitor(fl_log,"Sleeping ...",NULL,NULL);
                     	nanosleep(&interval,&int_remainder);
                  	}
               	}
            	}
            	else
            	{
               	int_l_count1 = 0;
            	}

		#ifdef EMU_PROCESSING
			memset(chr_l_sys_date, APL_NULL_CHAR, APL_DATE_LEN);

			if ( APL_FAILURE == CO_RtvSysDt(chr_l_sys_date, l_debug_info_ptr) )
			{
				fprintf(fl_log,"Failed To Fetch System Date\n");
				APL_GOBACK_FAIL
			}

			if ( APL_FAILURE == 
							CO_Chk_EMU_Period(chr_l_sys_date, &int_g_emutransperiod, l_debug_info_ptr) )
			{	
				fprintf(fl_log,"CM_ChkEMUPeriod() returned failure.\n");
				APL_GOBACK_FAIL
			}
		#endif

   	
		APL_IF_DEBUG
		{
 			printf("before calling the processtion \n");
		}
			if ( APL_FAILURE == MS_Rtv_IncMsgSrlNo(l_debug_info_ptr) )
			{
				CO_ProcMonitor(APL_OUT_FILE, "Failed to get chr_new serial number.\n", 
							NULL, NULL);

				APL_GOBACK_FAIL
			}
	
 			if (APL_FAILURE == MS_Proc_IncMsg(fl_log,
														  chr_l_incmsgdir,
														  chr_l_incmsgarchdir,
														  h_ora_rowid,
                                         	  fl_userlog,
														  fl_536log,
         	   	                       	  p_intlenv_data_struct_h,
            	   	                    	  l_debug_info_ptr ) )
      	{
         	fprintf(fl_log, "The processtion MS_Proc_IncMsg returned a failure\n");
				fclose(fl_log);
				fclose(fl_userlog);
				fclose(fl_536log);
         	EXEC SQL ROLLBACK ;
				IS_ANY_ORA_ERROR
      	}
      	else
      	{
         	fprintf(fl_log, "The processtion I_IncMsgFn returned a success\n");
         	EXEC SQL COMMIT ;
				IS_ANY_ORA_ERROR

         	if(APL_FAILURE==MS_Proc_RespMsg(Hcon_reply,Hobj_reply,fl_log,Reason_reply,l_debug_info_ptr))
         	{
           		fprintf(fl_log,"Could Not Put msg into the response queue reason %s\n",
										Reason_reply);
         	  	if ((Reason_reply == MQRC_CONNECTION_BROKEN) 
						|| (Reason_reply == MQRC_HCONN_ERROR) 
						|| (Reason_reply == MQRC_HOBJ_ERROR))
           		{
            		   MQCLOSE(Hcon_reply,&Hobj_reply,MQCO_NONE,&CompCode_reply,&Reason_reply);
               		{
                  		fprintf(fl_log,"MQ Close ended with reason %ld",Reason_reply);
               		}
               		MQDISC(&Hcon_reply,&CompCode_reply,&Reason_reply);
               		{
                  		fprintf(fl_log,"MQ Disc ended with reason %ld",Reason_reply);
               		}
               		sleep(10);
               		CO_ProcMonitor(APL_OUT_FILE,
                  		      "Attempting to reconnect to MQ Server for ACK...",
                     		   NULL,NULL);
               		if (MQGetConn(chr_qmname,chr_qname1,&Hcon_reply,&Hobj_reply,"O") == APL_FAILURE)
                  		APL_GOBACK_FAIL
           		}
            	else
            	{
               	   sprintf(fl_log,
                  	        "MQ Put Failed Daemon ending with reason %ld",
                     	     Reason_reply);
                  	CO_ProcMonitor(APL_OUT_FILE,chr_mtemp,NULL,NULL);
                  	APL_GOBACK_FAIL
            	}
         	}
				else
				{
			         EXEC SQL UPDATE SYS_BATCHPROC
                  SET STAT_DET = stat_det
                  WHERE   ROWID = :h_ora_rowid;
						IS_ANY_ORA_ERROR;

				} 
				fclose(fl_log); 
				fclose(fl_userlog); 
				fclose(fl_536log);
      	}
		
			if (	(fl_log  = fopen(chr_l_tmplogfilename, "a")) == NULL)
			{
				fprintf(APL_OUT_FILE,"Failed To Open The Log File In The Append Mode\n");
				APL_GOBACK_FAIL	
			} 

			if (	(fl_userlog  = fopen(chr_l_tmplogfilename1, "a")) == NULL)
			{
				fprintf(APL_OUT_FILE,"Failed To Open The Log File In The Append Mode\n");
				APL_GOBACK_FAIL	
			} 
			if (	(fl_536log  = fopen(chr_l_536tmplogfilename, "a")) == NULL)
			{
				fprintf(APL_OUT_FILE,"Failed To Open The Log File In The Append Mode\n");
				APL_GOBACK_FAIL	
			} 

		}
	}
	else
	{
   	

 	  #ifdef EMU_PROCESSING
   	   memset(chr_l_sys_date, APL_NULL_CHAR, APL_DATE_LEN);

 	      if ( APL_FAILURE == CO_RtvSysDt(chr_l_sys_date, l_debug_info_ptr) )
   	   {
         	fprintf(fl_log,"Failed To Fetch System Date\n");
         	APL_GOBACK_FAIL
      	}

 	      if ( APL_FAILURE ==
    	              CO_Chk_EMU_Period(chr_l_sys_date, &int_g_emutransperiod, l_debug_info_ptr) )
      	{
         	fprintf(fl_log,"CM_ChkEMUPeriod() returned failure.\n");
         	APL_GOBACK_FAIL
      	}
   	#endif

 	  
   	APL_IF_DEBUG
   	{
      	printf("before calling the processtion \n");
   	}
   	while(1)
   	{
			
			if ( l_online_check_flg )
			{
				EXEC SQL SELECT EOD_IND INTO :chr_l_chk_system_online FROM PRO_SYS_DATE;
				IS_ANY_ORA_ERROR

				if ( strcmp(chr_l_chk_system_online,"O") )
				{
					CO_ProcMonitor(APL_OUT_FILE, "Incoming Daemon Sleeping : System Not Online", NULL, NULL);
					sleep(5*I_INC_SLEEP_TIME); 
					continue;
				}
			}
			

      	if ( APL_FAILURE == MS_Rtv_IncMsgSrlNo(l_debug_info_ptr) )
      	{
         	CO_ProcMonitor(APL_OUT_FILE, "Failed to get chr_new serial number.\n",
           	       NULL, NULL);

 	        APL_GOBACK_FAIL
   	   }
      	if (APL_FAILURE == MS_Proc_IncMsg(fl_log,
         	                                chr_l_incmsgdir,
            	                             chr_l_incmsgarchdir,
               	                          h_ora_rowid,
                                            fl_userlog,
														  fl_536log,
                  	                       p_intlenv_data_struct_h,
                     	                    l_debug_info_ptr ) )
      	{
         	fprintf(fl_log, "The processtion MS_Proc_IncMsg returned a failure\n");
         	fclose(fl_log);
         	fclose(fl_userlog);
         	fclose(fl_536log);
         	EXEC SQL ROLLBACK ;
         	IS_ANY_ORA_ERROR
      	}
      	else
      	{
         	fprintf(fl_log, "The processtion I_IncMsgFn returned a success\n");
         	fclose(fl_log);
         	fclose(fl_userlog);
         	fclose(fl_536log);
         	EXEC SQL COMMIT ;
         	IS_ANY_ORA_ERROR
      	}
      	if (  (fl_log  = fopen(chr_l_tmplogfilename, "a")) == NULL)
      	{
        	 	fprintf(APL_OUT_FILE,"Failed To Open The Log File In The Append Mode\n");
         	APL_GOBACK_FAIL
      	}
      	if (  (fl_userlog  = fopen(chr_l_tmplogfilename1, "a")) == NULL)
      	{
        	 	fprintf(APL_OUT_FILE,"Failed To Open The Log File In The Append Mode\n");
         	APL_GOBACK_FAIL
      	}
      	if (  (fl_536log  = fopen(chr_l_536tmplogfilename, "a")) == NULL)
      	{
        	 	fprintf(APL_OUT_FILE,"Failed To Open The Log File In The Append Mode\n");
         	APL_GOBACK_FAIL
      	}

 	     
	
   	   if( APL_FAILURE == CO_RtvSysDtTime(chr_l_sys_date_time, l_debug_info_ptr))
      	   APL_GOBACK_FAIL;
      	memset(chr_l_statinfo,APL_NULL_CHAR,61);
      	strcpy(chr_l_statinfo, "sleeping : ");
      	strcat(chr_l_statinfo, chr_l_sys_date_time);

	      EXEC SQL UPDATE SYS_BATCHPROC
   	            SET STAT_DET = :chr_l_statinfo
      	         WHERE   ROWID = :h_ora_rowid;
	
   	   
      	fprintf(APL_OUT_FILE,
         	     "Waiting for h_next batch of incoming messages ...\n");
      	sleep(I_INC_SLEEP_TIME);
   	}
	}

	fclose(fl_log);
	fclose(fl_userlog);
	fclose(fl_536log); 

	APL_GOBACK_SUCCESS;

   

   RETURN_SUCCESS:
	fclose(chr_finifile);
	EXEC SQL COMMIT;
	if(l_sfe_inc_flg==1)
	{
   	MQCLOSE(Hcon,&Hobj,MQCO_NONE,&CompCode,&Reason);
   	MQDISC(&Hcon,&CompCode,&Reason);
   	MQCLOSE(Hcon_reply,&Hobj_reply,MQCO_NONE,&CompCode_reply,&Reason_reply);
   	MQDISC(&Hcon_reply,&CompCode_reply,&Reason_reply);
	}
	
   return (APL_SUCCESS);

   RETURN_FAILURE:
	fclose(chr_finifile);
	EXEC SQL COMMIT;
	if(l_sfe_inc_flg==1)
	{
   	MQCLOSE(Hcon,&Hobj,MQCO_NONE,&CompCode,&Reason);
   	MQDISC(&Hcon,&CompCode,&Reason);
   	MQCLOSE(Hcon_reply,&Hobj_reply,MQCO_NONE,&CompCode_reply,&Reason_reply);
   	MQDISC(&Hcon_reply,&CompCode_reply,&Reason_reply);
	}
	 
   return (APL_FAILURE);

}



int	CO_Proc_RemoveDot(char   *p_quantity,
					  char	*p_newqty,		
					  DEBUG_INFO_STRUCT_H	**l_debug_info_ptr)
{

while (*p_quantity)
{
   if (*p_quantity != '.')
   {
         *p_newqty++ = *p_quantity;
   }
   p_quantity++;
   *p_newqty = '\0';

}

	APL_GOBACK_SUCCESS

	
      RETURN_SUCCESS:
		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE,"Exiting out of I_RemdecFn sucessfully\n",
						NULL, NULL);
		}
      return (APL_SUCCESS);
      RETURN_FAILURE:
		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE,"Exiting out of I_RemdecFn unsucessfully\n",
						NULL, NULL);
		}
      return (APL_FAILURE);
}



int	CO_Proc_ReplaceComma(char	*p_quantity,
						 char	*p_newqty,
						 DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
while (*p_quantity)
{
   if (*p_quantity != ',')
   {
         *p_newqty++ = *p_quantity;
   }
   else if (*p_quantity == ',')
   {
         *p_newqty++ = '.';
   }
   p_quantity++;
   *p_newqty = '\0';
}

APL_GOBACK_SUCCESS
	
      RETURN_SUCCESS:
		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE,"Exiting out of CO_Proc_ReplaceComma sucessfully\n",
						NULL, NULL);
		}
      return (APL_SUCCESS);
      RETURN_FAILURE:
		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE,"Exiting out of I_RepComaFn unsucessfully\n",
						NULL, NULL);
		}
      return (APL_FAILURE);
}







int MS_Proc_IncMsg53x( FILE                    *fl_incmsg,
                  char                    *p_msg_no,
                  FILE                    *fl_userlog,
                  FILE                    *p_fl_userlog,
                  char                    *chr_fl_name,
                  FILE                    *fl_53x_pendrpt,
                  FILE                    *fl_rejectrpt,
                  FILE                    *fl_repairrpt,
                  char                    *p_mesg_body,
                  INTL_ENV_DATA_STRUCT_H      *p_intlenv_data_struct_h,
                  DEBUG_INFO_STRUCT_H            **l_debug_info_ptr)
{
			char  chr_l_vtb_client[APL_CLIENT_LENGTH]      = APL_NULL_STRING;
			char	chr_l_cp_acc[APL_CLIENT_LENGTH]				= APL_NULL_STRING;
			char	chr_l_cp_refno[APL_TXNREFNO_LEN]			= APL_NULL_STRING;
			char	chr_l_flg_settled[2]							= APL_NULL_STRING;
			char	chr_l_rej_str[100]								= APL_NULL_STRING;
			char	chr_l_pend_str[100]						 	= APL_NULL_STRING;
			char	chr_l_instrcode_a[APL_INSTRUMENTCODE_LEN]				= APL_NULL_STRING;
			char	chr_l_trcode_a[APL_FLAG_LENGTH]            	= APL_NULL_STRING;
			char	chr_l_typeoftrd[DEALTYPE_LEN_A]				= APL_NULL_STRING;
			char	int_l_domcpac[APL_CLIENT_LENGTH]				= APL_NULL_STRING;
			
			char	int_l_countacc[APL_COUNTACC_LEN]			= APL_NULL_STRING;
			char	chr_l_acc_class[I_CLI_CLASS_LEN]			= APL_NULL_STRING;
			char	*chr_l_srnstr									= APL_NULL_STRING;		
			char  chr_l_strqty[26]								= APL_NULL_STRING;
			int int_l_retval = 0;
			int int_l_len_srn = 0;

         MS_53X_STRUCT_H               l_ms_53x_struct_h;

			DL_DEAL_SSTDET_STRUCT_H  l_deal_sstdet_struct_h;


         memset(&l_ms_53x_struct_h, NULL ,sizeof(MS_53X_STRUCT_H) );
			memset(&l_deal_sstdet_struct_h, NULL, sizeof(DL_DEAL_SSTDET_STRUCT_H));
			

			
			if((strcmp(p_msg_no,"530")==0)|| (strcmp(p_msg_no,"532")==0))
			{
         	if ( APL_FAILURE  == MS_Proc_IncMsg53xParse(fl_incmsg,
															  chr_fl_name,
               	                             p_msg_no,
															  p_mesg_body,
                     	                       &l_ms_53x_struct_h,
																fl_rejectrpt,
                           	                 fl_userlog,
                              	              p_fl_userlog,
                                 	           p_intlenv_data_struct_h,
                                    	        l_debug_info_ptr ) )
         	{
            	fprintf(fl_userlog,"Failed to Parse 53x msg\n");
            	APL_GOBACK_FAIL
         	}
			}
			else if ((strcmp(p_msg_no,"544")==0)|| (strcmp(p_msg_no,"546")==0))
			{
			 	fprintf(fl_userlog,"Before calling MS_Proc_IncMsg54SParse\n");
            if ( APL_FAILURE  == MS_Proc_IncMsg54SParse(fl_incmsg,
                                               chr_fl_name,
                                               p_msg_no,
                                               p_mesg_body,
                                               &l_ms_53x_struct_h,
                                               fl_rejectrpt,
                                               fl_userlog,
                                               p_fl_userlog,
                                               p_intlenv_data_struct_h,
                                               l_debug_info_ptr ) )
            {
               fprintf(fl_userlog,"Failed to Parse 54S msg\n");
               APL_GOBACK_FAIL
            }
			 	fprintf(fl_userlog,"After calling MS_Proc_IncMsg54SParse\n");
			}


			
			   
			
		if (APL_FAILURE == MS_Chk_Msg53x(&l_ms_53x_struct_h,
													  &l_deal_sstdet_struct_h,
													  &chr_l_instrcode_a,	
													  &chr_l_typeoftrd,
													  &chr_l_trcode_a,
													  &int_l_domcpac,
													  &int_l_countacc,
													  chr_fl_name,
													  p_mesg_body,
													  fl_rejectrpt,
													  fl_53x_pendrpt,
													  fl_userlog,
													  l_debug_info_ptr) )
		{
			fprintf(fl_userlog,"Failed to Validate 53x msg\n");
			APL_GOBACK_FAIL
		}

		if (APL_FAILURE == MS_Rtv_AccClass((char *)l_deal_sstdet_struct_h.h_dl_client,
													&chr_l_acc_class,
													l_debug_info_ptr) )
		{
			fprintf(fl_userlog,"Failed to retrieve client class\n");
			strcpy(chr_l_rej_str,"Failed to retrieve client class");
			strcpy(chr_g_msg_sts, "RJT");
         if (APL_FAILURE == MS_Proc_IncMsg53xRejRpt((char *)l_deal_sstdet_struct_h.h_dl_client,
                                               l_ms_53x_struct_h.indentity_no,
                                               chr_l_instrcode_a,
                                               l_ms_53x_struct_h.quantity,
                                               chr_l_rej_str,
                                               chr_fl_name,
                                               p_mesg_body,
                                               fl_rejectrpt,
                                               l_debug_info_ptr) )
            {
               fprintf(fl_userlog,"Failed to Write to 53x Reject Report\n");
               APL_GOBACK_FAIL
            }


			APL_GOBACK_FAIL
		}

		

		if (!strcmp(chr_l_acc_class,I_NON_PROPRIETORY) )
		{
			
			

			if (APL_FAILURE == DL_Rtv_RegNoQty((char *)l_deal_sstdet_struct_h.h_dl_client,
														  l_ms_53x_struct_h.indentity_no,
														  &chr_l_srnstr,
														  l_debug_info_ptr) )

			{
				fprintf(fl_userlog,"Failed to retrieve  SRN \n");
            strcpy(chr_l_rej_str,"Failed to retrieve  SRN");
            strcpy(chr_g_msg_sts, "RJT");
            if (APL_FAILURE == MS_Proc_IncMsg53xRejRpt((char *)l_deal_sstdet_struct_h.h_dl_client,
                                               l_ms_53x_struct_h.indentity_no,
                                               chr_l_instrcode_a,
                                               l_ms_53x_struct_h.quantity,
                                               chr_l_rej_str,
                                               chr_fl_name,
                                               p_mesg_body,
                                               fl_rejectrpt,
                                               l_debug_info_ptr) )
            {
               fprintf(fl_userlog,"Failed to Write to 53x Reject Report\n");
               APL_GOBACK_FAIL
            }
            APL_GOBACK_FAIL

         }	

			if(!strcmp(chr_l_srnstr,APL_NULL_STRING) ) 
			{
					
				if (APL_FAILURE == MS_Rtv_RgNoInstrCode(chr_l_instrcode_a,
														 &chr_l_srnstr,
														 l_debug_info_ptr) )
				{
					fprintf(fl_userlog,"Failed to retrieve Default SRN \n");
         		strcpy(chr_l_rej_str,"Failed to retrieve Default SRN");
         		strcpy(chr_g_msg_sts, "RJT");
         		if (APL_FAILURE == MS_Proc_IncMsg53xRejRpt((char *)l_deal_sstdet_struct_h.h_dl_client,
                                               l_ms_53x_struct_h.indentity_no,
                                               chr_l_instrcode_a,
                                               l_ms_53x_struct_h.quantity,
                                               chr_l_rej_str,
                                               chr_fl_name,
                                               p_mesg_body,
                                               fl_rejectrpt,
                                               l_debug_info_ptr) )
            	{
               	fprintf(fl_userlog,"Failed to Write to 53x Reject Report\n");
               	APL_GOBACK_FAIL
            	}
					APL_GOBACK_FAIL

         	}

					sprintf(chr_l_strqty,"%.04lf",l_ms_53x_struct_h.quantity);
					strcat(chr_l_srnstr,":");
					strcat(chr_l_srnstr,chr_l_strqty);
					strcat(chr_l_srnstr,";");
			}
			

			int_l_retval = DL_Proc_DLSetlRRMMSing(  &l_deal_sstdet_struct_h,
                                        APL_NULL_STRING,
														chr_l_srnstr,
                                       p_intlenv_data_struct_h,
                                      l_debug_info_ptr );
		}
			
		else 
		{
					
				int_l_retval = DL_Proc_DLSetlSing(  &l_deal_sstdet_struct_h,  
                                          APL_NULL_STRING, 
                                          p_intlenv_data_struct_h, 
                                          l_debug_info_ptr );
		}
	
		if (int_l_retval == APL_FAILURE )
		{
			fprintf(fl_userlog,"Failed to Settle 53x Trade msg\n");
			
			strncpy(chr_l_rej_str,(**l_debug_info_ptr).msg,39);
			strcpy(chr_g_msg_sts, "RJT");
         if (APL_FAILURE == MS_Proc_IncMsg53xRejRpt((char *)l_deal_sstdet_struct_h.h_dl_client,
                                               l_ms_53x_struct_h.indentity_no,
                                               chr_l_instrcode_a,
                                               l_ms_53x_struct_h.quantity,
                                               chr_l_rej_str,                    
															  chr_fl_name,
															  p_mesg_body,
                                               fl_rejectrpt,           
                                               l_debug_info_ptr) ) 
         {
         	fprintf(fl_userlog,"Failed to Write to 53x Reject Report\n");   
            APL_GOBACK_FAIL
         } 

			APL_GOBACK_FAIL
		}
		
		if ((!strcmp(chr_l_typeoftrd ,DL_BOOKTRF_IND)) || (!strcmp(chr_l_typeoftrd ,INTRAFIRM) ))
		{
			
					if (APL_FAILURE == MS_Rtv_53xCpRef(l_deal_sstdet_struct_h,
															 l_ms_53x_struct_h.quantity,
															 chr_l_trcode_a,
															 int_l_domcpac,
															 int_l_countacc,
															 &chr_l_cp_acc,
															 &chr_l_cp_refno,
															 &chr_l_flg_settled,
															 l_debug_info_ptr) )
					{
            		fprintf(fl_userlog,"Failed to retrieve CP identity Number for the BTT Trade\n");
            		APL_GOBACK_FAIL
         		}
					 
					 if ( APL_FAILURE == MS_Proc_IncMsg53xSetlRptBTT((char *)l_deal_sstdet_struct_h.h_dl_client,
																				 l_ms_53x_struct_h.indentity_no,
																				 chr_l_instrcode_a,
																				 l_ms_53x_struct_h.quantity,
																				 chr_l_cp_acc,
																				 chr_l_cp_refno,
																				 chr_l_flg_settled,
																				 chr_fl_name,
																				 p_mesg_body,
																				 fl_repairrpt,
                                                 				 l_debug_info_ptr) )	
					
					{
            		fprintf(fl_userlog,"Failed to Write to BTT Settle Rpt\n");
            		APL_GOBACK_FAIL
         		}										
					strcpy(chr_g_msg_sts,"STP");
               fprintf(fl_userlog,"Printed the BTT Settlement Report \n");

			}
			else 
			{
				if ( APL_FAILURE == MS_Proc_IncMsg53xSetlRpt((char *)l_deal_sstdet_struct_h.h_dl_client,
                                                      l_ms_53x_struct_h.indentity_no,
                                                      chr_l_instrcode_a,
																		chr_fl_name,
																		p_mesg_body,
                                                      l_ms_53x_struct_h.quantity,
                                                      fl_repairrpt,
                                                      l_debug_info_ptr) )  
               
               {  
                  fprintf(fl_userlog,"Failed to Write to  Settle Rpt\n");                                   
                  APL_GOBACK_FAIL                                       
               }

					strcpy(chr_g_msg_sts,"STP");
					fprintf(fl_userlog,"Printed the Trade Settlement Report \n");
			}
		

		
         RETURN_SUCCESS:
			APL_FREE(chr_l_srnstr);
         APL_IF_DEBUG
         {
            CO_ProcMonitor(p_fl_userlog,"Exiting out of MS_Proc_IncMsg53x sucessfully\n",
                     NULL, NULL);

         }
         return (APL_SUCCESS);

         RETURN_FAILURE:
			APL_FREE(chr_l_srnstr);
         APL_IF_DEBUG
         {	
            CO_ProcMonitor(p_fl_userlog,
                     "Exiting out of MS_Proc_IncMsg53x unsucessfully\n",
                     NULL, NULL);
         }
         return (APL_FAILURE);
}	









int   MS_Proc_IncMsg53xParse ( FILE                *fl_incmsg,
							 char						*chr_fl_name,
                      char                *p_msg_no,
							 char                *p_mesg_body,
                      MS_53X_STRUCT_H        *p_ms_53x_struct_h,
							 FILE                *fl_rejectrpt,
                      FILE                *fl_userlog,
                      FILE                *p_fl_userlog_a,
                      INTL_ENV_DATA_STRUCT_H  *p_intlenv_data_struct_h,
                      DEBUG_INFO_STRUCT_H        **l_debug_info_ptr)

{
   char  chr_l_str[LINERR_LENGTH]       = APL_NULL_STRING;
   char  chr_l_str4[LINERR_LENGTH]      = APL_NULL_STRING;
   char  h_msg_tag[4]                 = APL_NULL_STRING;
   char  chr_h_value[LINERR_LENGTH]             = APL_NULL_STRING;
   char  h_info[266]                      = APL_NULL_STRING;
   char  h_setl_dt[7]                   = APL_NULL_STRING;
   char  chr_h_temp_settle_dt[7]              = APL_NULL_STRING;
	char  chr_l_vtb_client[APL_CLIENT_LENGTH]   = APL_NULL_STRING;
	char  chr_l_instr_name[LINERR_LENGTH]           = APL_NULL_STRING;
	char  chr_l_instrcode_a[APL_INSTRUMENTCODE_LEN]         = APL_NULL_STRING;
	char  chr_l_typeofinstr[TYPEOF_INSTR_LEN]         = APL_NULL_STRING;
   char  h_instr_code[APL_INSTRUMENTCODE_LEN]         = APL_NULL_STRING;
	char  chr_l_isin[13]                       = APL_NULL_STRING;
	char  h_qty[16]                        = APL_NULL_STRING;
   char  chr_h_new_qty[16]                    = APL_NULL_STRING;
   char  l_quantity[16]                        = APL_NULL_STRING;
   char  chr_l_trd_qty[16]                    = APL_NULL_STRING;
	int   i                                = 0;
	int   n 											= 0;
	int 	int_retstat									= 0;
	double   l_nominal_value                      = 0.0;
   double   l_finquantity                      = 0.0;
	char  chr_l_typeofinstr[4]                     = APL_NULL_STRING;
	char chr_l_read_line  = 'F';
	char chr_l_rej_str[100] 							= APL_NULL_STRING;
	int  int_l_flg_rej									= 0;
	int  int_l_flg_qty_found							= 0;
	char chr_l_str_first[2]                 = APL_NULL_STRING; 
   
   int j                                  = 0;
   int int_lflag                              = 0;
	short l_russia_flg								=	0;



   MS_53X_STRUCT_H                           l_ms_53x_struct_h;


	EXEC SQL BEGIN DECLARE SECTION;
   EXEC SQL VAR chr_l_vtb_client IS STRING;
   EXEC SQL END DECLARE SECTION;

   memset(&l_ms_53x_struct_h,NULL,sizeof(MS_53X_STRUCT_H) );

   strcpy(l_ms_53x_struct_h.swift_msg_no, p_msg_no);
	int_l_flg_rej = 0;
	int_l_flg_qty_found = 0;

	

      while (!feof(fl_incmsg))
      {
            if (chr_l_read_line == 'F')
            {
               memset(chr_l_str4,APL_NULL_CHAR,LINERR_LENGTH);
               
                     fgets(chr_l_str4,LINERR_LENGTH,fl_incmsg);
                     chr_l_str4[strlen(chr_l_str4)-1]='\0';
		     printf("\n ******** chr_l_str4 is |%s| ****** \n",chr_l_str4);
            }
            if (chr_l_str4[0] == '-')
            {
               fprintf(fl_userlog,"Encounterd End of  53x Message\n");
               break;
            }
            if (chr_l_str4[0] != ':')
            {
               continue;
               
            }
            memset(h_info, APL_NULL_CHAR , 266);
            memset(chr_l_str, APL_NULL_CHAR , LINERR_LENGTH);
            memset(h_msg_tag, APL_NULL_CHAR , 4);
            memset(chr_h_value, APL_NULL_CHAR, LINERR_LENGTH);
            if (APL_FAILURE == CO_Proc_SplitTokenVal (    chr_l_str4,
                                                h_msg_tag ,
                                                chr_h_value ,
                                                h_info,
                                                l_debug_info_ptr ))
            {
                  fprintf(fl_userlog,"Failed to Split the Message Line %s\n",chr_l_str4);

                  strcpy(chr_g_msg_sts, "RJT");

                  if ( APL_FAILURE == MS_Mod_IncMsgSts(chr_g_msg_sts,
                                            "MESSAGE LINE NOT IN PROPER FORMAT", 
															chr_g_str_client, (DEBUG_INFO_STRUCT_H **)NULL) )
                  {
                      CO_ProcMonitor(APL_OUT_FILE,
                               "Failed to insert into IINMSGRP.\n",
                               NULL, NULL);
                  }
                  
                  APL_GOBACK_FAIL
               }
               APL_IF_DEBUG
               {
                  printf("the h_msg_tag is %s\n",h_msg_tag);
                  printf("the chr_value of chr_h_value after the call to processtion is %s\n",chr_h_value);
               }

               chr_l_read_line = 'F';
					
					if (!strcmp(h_msg_tag,APL_NULL_STRING) )
               {
                  fprintf(fl_userlog,"MESSAGE NOT IN PROPER FORMAT. MESSAGE REJECTED\n");
                  fprintf(fl_userlog,"Found End of Message\n");

                  strcpy(chr_g_msg_sts, "RJT");

                  if ( APL_FAILURE == MS_Mod_IncMsgSts(chr_g_msg_sts, "MESSAGE CONTAINS EMPTY LINE", chr_g_str_client, (DEBUG_INFO_STRUCT_H **)NULL) )
                  {
                     CO_ProcMonitor(APL_OUT_FILE,
                              "Failed to insert into IINMSGRP.\n", NULL, NULL);
                     APL_GOBACK_FAIL
                  }
               }


                if (  (!strcmp(h_msg_tag,I_REF_NO)) && (int_l_flg_rej == 0 )  )
               {
                  memset(l_ms_53x_struct_h.rel_indentity_no, '\0', 17);
                  strcpy(l_ms_53x_struct_h.rel_indentity_no,chr_h_value);
               }

					 if (  (!strcmp(h_msg_tag,I_CLI_REF_NO))  && (int_l_flg_rej == 0 )) 
               {
                  memset(l_ms_53x_struct_h.indentity_no, '\0', 17);
                  strcpy(l_ms_53x_struct_h.indentity_no,chr_h_value);
               }


					 if ( (!strcmp(h_msg_tag,I_CLIENTA))
                         || (!strcmp(h_msg_tag,I_CLIENTC))
                         || (!strcmp(h_msg_tag,I_CLIENTD))  && (int_l_flg_rej == 0 )  )
               {
                  memset(chr_l_vtb_client,APL_NULL_CHAR, APL_CLIENT_LENGTH );

                  for ( i = 0; i < 10; i++ )
                  {
                     chr_l_vtb_client [i] = chr_h_value[i + 1];
                  }

                  chr_l_vtb_client[i] = APL_NULL_CHAR;
	
					l_russia_flg=0;
					
     				 if (APL_FAILURE == CO_Chk_CntryEnabled(  "INCOMING_MSG",
               		         	      	               "REMOVE_ZERO_VTBACC",
                     		      		                  &l_russia_flg,
                           	            				     l_debug_info_ptr ))
    				 {
        						 APL_GOBACK_FAIL
    				 }
			
					if (l_russia_flg)
					{
                  
                  
                  if (chr_l_vtb_client[0] == '0')
                  {
                        memset(chr_l_vtb_client,APL_NULL_CHAR, APL_CLIENT_LENGTH );
                        j =0;
                        int_lflag =0;
                        for ( i = 0; i < 10; i++ )
                        {
                           if ( chr_h_value[i+1] != '0' || int_lflag )
                              {
                                chr_l_vtb_client[j] = chr_h_value[i+1];
                                int_lflag = 1;
                                j++;
                              }
                        }
                        chr_l_vtb_client[i] = APL_NULL_CHAR;
                  }
					}

                  

                  strcpy(l_ms_53x_struct_h.vtb_client,chr_l_vtb_client);

               }

		 if (!strcmp(h_msg_tag,I_INSTRU_DET)  && (int_l_flg_rej == 0 ) )
            {
               memset(chr_l_instr_name, APL_NULL_CHAR, LINERR_LENGTH);
               strcpy(chr_l_instr_name,chr_h_value);
               

               strncpy(chr_l_instrcode_a,chr_l_instr_name,4);
               chr_l_instrcode_a[4] = APL_NULL_CHAR;
               if ( !strcmp(g_mt_commonsys_params_struct_h.dom_instrument,
                           chr_l_instrcode_a) && ( strcmp( chr_l_instrcode_a,"INSTR_ISIN" )))
               {
                  for ( i = 0; i < 8 ; i++)
                  {
                     l_ms_53x_struct_h.instr_code[i] = chr_l_instr_name[i + 5];
                  }
                  l_ms_53x_struct_h.instr_code[8] = APL_NULL_CHAR;
               }
               else if ( !strcmp(chr_l_instrcode_a,"INSTR_ISIN")  )
               {
                  memset(chr_l_isin,APL_NULL_CHAR,13);
                  
                  for ( i = 0; i< 12 ; i ++ )
                  {
                     chr_l_isin[i] = chr_l_instr_name[ i + 5 ];
                  }
                  APL_IF_DEBUG
                  {
                     printf("the chr_l_isin is (%s) \n",chr_l_isin);
                  }
                  if (APL_FAILURE == IV_Rtv_InstrFromISIN(chr_l_isin,
                                                            h_instr_code,
                                                            &int_retstat,
                                                            l_debug_info_ptr)  )
                  {
                     if (int_retstat == IV_CRITCAL_ERROR_IND)
                     {
                        fprintf(fl_userlog,"Fatal Error Encountered in INSTRUMENT TABLE \n");
								strcpy(chr_g_msg_sts, "RJT");
                        APL_GOBACK_FAIL
                     }
                     if (int_retstat == IV_NO_DATA_FOUND_ERR)
                     {
                        
                        for ( i = 0 ; i < 8; i ++ )
                        {
                           h_instr_code[i] = chr_h_value[ i + 8 ];
                        }
                        h_instr_code[8] = APL_NULL_CHAR;
                     }
                  }
                  strcpy(l_ms_53x_struct_h.instr_code,h_instr_code);
                  while(1)
                  {
                     memset(chr_l_str4, APL_NULL_CHAR , LINERR_LENGTH);
                     
                     fgets(chr_l_str4,LINERR_LENGTH,fl_incmsg);
                     chr_l_str4[strlen(chr_l_str4)-1]='\0';
		     printf("\n ******** chr_l_str4 is |%s| ****** \n",chr_l_str4);
                     if (chr_l_str4[0] == ':')
                     {
                        chr_l_read_line = 'T';
                        break;
                     }
                     else if (chr_l_str4[0] == '-')
                     {
                        chr_l_read_line = 'T';
                        break;
                     }
                     chr_l_str4[35] = APL_NULL_CHAR;
                     strcat(l_ms_53x_struct_h.instr_name ,chr_l_str4);
                  }
               }  
            }     

             if ( !strcmp(h_msg_tag,I_QTY)  && (int_l_flg_rej == 0 ))
            {
               

               memset(l_quantity,APL_NULL_CHAR,16);
               memset(chr_l_trd_qty,APL_NULL_CHAR,16);
               memset(h_qty,APL_NULL_CHAR,16);
               memset(chr_h_new_qty,APL_NULL_CHAR,16);
               strcpy(l_quantity, chr_h_value);
					if (strcmp(chr_h_value,APL_NULL_STRING) )
					{
						 int_l_flg_qty_found = 1;
					}
					else
					{
						int_l_flg_qty_found=0;
					}	
               

               for ( i =0; i < 18; i++)
               {
                  h_qty[i]  = l_quantity[i + 3];
               }
                
               h_qty[18] = APL_NULL_CHAR;

					

               if (APL_FAILURE == CO_Proc_RemoveDot(h_qty,
                                             chr_h_new_qty,
                                             l_debug_info_ptr) )
               {
                  fprintf(fl_userlog,"Failed To Remove The Decimal From The Quantity\n");
						strcpy(chr_g_msg_sts, "RJT");
                  APL_GOBACK_FAIL
               }

               

               if (APL_FAILURE == CO_Proc_ReplaceComma( chr_h_new_qty,
                                                chr_l_trd_qty,
                                                l_debug_info_ptr) )
               {
                  fprintf(fl_userlog,"Failed to Replace The Commas in Quantity\n");
						strcpy(chr_g_msg_sts, "RJT");
                  APL_GOBACK_FAIL
               }
               n = ( strlen(chr_l_trd_qty) - 1   );
               if (  chr_l_trd_qty[n] == '.')
               {
                  strcat(chr_l_trd_qty,"00");
               }

               strncpy( chr_l_typeofinstr, chr_h_value,3 ); 

                if ( !strcmp(chr_l_typeofinstr, TYPEOFINSTR_FMT) )
               {
                  if ( APL_FAILURE ==
                           CR_Rtv_InstrChrVal(l_ms_53x_struct_h.instr_code, "typeofinstr",
                                          chr_l_typeofinstr, l_debug_info_ptr) )
                  {
                     strcpy(chr_g_msg_sts, "RJT"); 
							APL_GOBACK_FAIL
                  }

                  if ( !strcmp(chr_l_typeofinstr, TYPEOFINSTR_BOND) )
                  {
                     if ( APL_FAILURE ==
                              CR_Rtv_InstrNumVal(l_ms_53x_struct_h.instr_code, "nomval",
                                             &l_nominal_value, l_debug_info_ptr) )
                     {
                        strcpy(chr_g_msg_sts, "RJT"); 
								APL_GOBACK_FAIL
                     }

                     sscanf(chr_l_trd_qty, "%lf", &l_finquantity);
                     l_finquantity /= l_nominal_value;
                     sprintf(chr_l_trd_qty, "%lf", l_finquantity);
                  }
                }
					 l_ms_53x_struct_h.quantity = 0.0;

					if (!strcmp(chr_l_trd_qty,APL_NULL_STRING) || (int_l_flg_qty_found == 0 ) )
               {
                  strcpy(chr_l_rej_str,"NO QUANTITY FOUND IN MESSAGE");
                  int_l_flg_rej = 1;
               }
                l_ms_53x_struct_h.quantity = atof(chr_l_trd_qty);
               } 

					   if ( !strcmp(h_msg_tag,I_SETTLERR_DT)   && (int_l_flg_rej == 0 ))
               {
                  
                  memset(chr_h_temp_settle_dt,'\0',7);
                  strcpy(chr_h_temp_settle_dt ,chr_h_value);
                  chr_h_temp_settle_dt[6] ='\0';

						if (!strcmp(chr_h_temp_settle_dt,APL_NULL_STRING))
						{
							strcpy(chr_l_rej_str,"SETTLEMENT DATE NOT FOUND IN MESSAGE");
							int_l_flg_rej = 1;
						}
						else
						{
                  	if (APL_FAILURE == CR_Proc_DecodeDt(chr_h_temp_settle_dt ,
                                                     h_setl_dt ,
                                                     l_debug_info_ptr ) )
                  	{
                     	fprintf(fl_userlog,"Failed To Decode Settle Date.\n");
								strcpy(chr_g_msg_sts, "RJT");		
                     	APL_GOBACK_FAIL
                  	}

                  	memset(l_ms_53x_struct_h.setl_date, '\0', APL_DATE_LEN);
                  	strcpy(l_ms_53x_struct_h.setl_date,h_setl_dt);
						}
               }

		}
		
		if (!strcmp(l_ms_53x_struct_h.vtb_client,APL_NULL_STRING) )
      {
      	strcpy(chr_l_rej_str,"CUSTOMER VTB ACCOUNT NOT FOUND IN MESSAGE");
         int_l_flg_rej = 1;
      }
		else if (!strcmp(l_ms_53x_struct_h.indentity_no,APL_NULL_STRING) )
      {
         strcpy(chr_l_rej_str,"TRANSACTION REF NO. NOT FOUND IN MESSAGE");
         int_l_flg_rej = 1;
      }
		

      else if (!strcmp(l_ms_53x_struct_h.setl_date,APL_NULL_STRING) )
      {
      	strcpy(chr_l_rej_str,"SETTLEMENT DATE NOT FOUND IN MESSAGE");
         int_l_flg_rej = 1;
      }
		else if (int_l_flg_qty_found == 0 )
		{
			strcpy(chr_l_rej_str,"QUANTITY NOT FOUND IN THE MESSAGE");
			int_l_flg_rej = 1;
		}

      if (int_l_flg_rej == 1) 
		{
       	fprintf(fl_userlog,chr_l_rej_str);
         fprintf(fl_userlog,"\n");
         fprintf(fl_userlog,"MESSAGE REJECTED\n");

         strcpy(chr_g_msg_sts, "RJT");

         if (APL_FAILURE == MS_Proc_IncMsg53xRejRpt(NULL,
                                              NULL,
                                              NULL,
                                              NULL,
                                              chr_l_rej_str,
                                              chr_fl_name,
                                              p_mesg_body,
                                              fl_rejectrpt,
                                              l_debug_info_ptr) )
         {
         	fprintf(fl_userlog,"Failed to Write to 53x Reject Report\n");
            APL_GOBACK_FAIL
         }


			APL_GOBACK_FAIL
      }
      memcpy(p_ms_53x_struct_h,&l_ms_53x_struct_h,sizeof(MS_53X_STRUCT_H) );
		
		APL_GOBACK_SUCCESS

      RETURN_SUCCESS:
      APL_IF_DEBUG
      {
         CO_ProcMonitor(APL_OUT_FILE,"Exiting out of MS_Proc_IncMsg53xParse successfully\n",
               NULL, NULL);

      }
      return (APL_SUCCESS);

      RETURN_FAILURE:
      APL_IF_DEBUG
      {
        CO_ProcMonitor(APL_OUT_FILE,"Exiting out of MS_Proc_IncMsg53xParse unsucessfully\n", NULL, NULL);
      }
      return (APL_FAILURE);
}




int MS_Proc_IncMsg53xSetlRpt(char							*chr_p_client,
                       char                     *p_ref_no,
                       char	                  *p_instr_code,
							  char							*chr_fl_name,
							  char							*p_mesg_body,
                       double                   p_quantity,
                       FILE                     *fl_53xsettlerpt,
                       DEBUG_INFO_STRUCT_H             **l_debug_info_ptr) 
{	
	 	fprintf(fl_53xsettlerpt,"%9sREPORT FOR  TRADES AUTO SETTLED  MESSAGE FILE %s \n"," ",chr_fl_name);
   	fprintf(fl_53xsettlerpt,"%9s---------------------------------------------------------------------------\n"," ");
   	fprintf(fl_53xsettlerpt, "%s", p_mesg_body);
   	fprintf(fl_53xsettlerpt,"%9s---------------------------------------------------------------------------\n"," ");	

   	fprintf(fl_53xsettlerpt,"%12s Account          : %s\n"," ",chr_p_client);
   	fprintf(fl_53xsettlerpt,"%12s Refno            : %s\n"," ",p_ref_no);
   	fprintf(fl_53xsettlerpt,"%12s Instrurity         : %s\n"," ",p_instr_code);
   	fprintf(fl_53xsettlerpt,"%12s Qty              : %lf\n"," ",p_quantity);
   	fprintf(fl_53xsettlerpt,"%9s---------------------------------------------------------------------------\n"," ");
		fprintf(fl_53xsettlerpt, "%9sMessage Processed Successfully.\n", " ");
   	fprintf(fl_53xsettlerpt,"%9s---------------------------------------------------------------------------\n"," ");
   	fprintf(fl_53xsettlerpt, "\n");	
	
	
		APL_GOBACK_SUCCESS

    	RETURN_SUCCESS:
    	APL_IF_DEBUG
    	{
      	CO_ProcMonitor(APL_OUT_FILE,"Exiting out of MS_Proc_IncMsg53xSetlRpt successfully\n",
               NULL, NULL);

     	}
     	return (APL_SUCCESS);

     	RETURN_FAILURE:
     	APL_IF_DEBUG
     	{
        CO_ProcMonitor(APL_OUT_FILE,"Exiting out of MS_Proc_IncMsg53xSetlRpt unsucessfully\n", NULL, NULL);
     	}
     	return (APL_FAILURE);
}




int MS_Proc_IncMsg53xSetlRptBTT(	char                     *chr_p_client,
                       	  	char                     *p_ref_no,
                          	char                     *p_instr_code,
                       		double                    p_quantity,
									char							 *p_cp_code,
									char							 *p_cp_ident,
									char							 *p_flg_settled,
									char							 *chr_fl_name,
									char							 *p_mesg_body,
                       		FILE                     *fl_53x_settlerpt,
                       		DEBUG_INFO_STRUCT_H             **l_debug_info_ptr) 
{

	fprintf(fl_53x_settlerpt,"%9sREPORT FOR INTERNAL TRANSFER TRADES SETTLED MESSAGE FILE %s \n"," ",chr_fl_name);
   fprintf(fl_53x_settlerpt,"%9s---------------------------------------------------------------------------\n"," ");
   fprintf(fl_53x_settlerpt, "%s", p_mesg_body);
   fprintf(fl_53x_settlerpt,"%9s---------------------------------------------------------------------------\n"," ");

   fprintf(fl_53x_settlerpt,"%9sTHE DETAILS OF THE INTERNAL TRANSFER SETTLEMENT MESSAGE ARE AS FOLLOWS\n"," ");
   fprintf(fl_53x_settlerpt,"%12s Account  			: %s\n"," ",chr_p_client);
   fprintf(fl_53x_settlerpt,"%12s Refno    			: %s\n"," ",p_ref_no);
   fprintf(fl_53x_settlerpt,"%12s Instrurity 			: %s\n"," ",p_instr_code);
   fprintf(fl_53x_settlerpt,"%12s Qty      			: %lf\n"," ",p_quantity);
	fprintf(fl_53x_settlerpt,"%12s Counterparty		: %s\n"," ",p_cp_code);
	fprintf(fl_53x_settlerpt,"%12s CP Trade Refno. 	: %s\n"," ",p_cp_ident);
	fprintf(fl_53x_settlerpt,"%12s Settled(Y/N) 		: %s\n"," ",p_flg_settled);
	fprintf(fl_53x_settlerpt,"%9s---------------------------------------------------------------------------\n"," ");
	fprintf(fl_53x_settlerpt, "%9sMessage Processed Successfully.\n", " ");
	fprintf(fl_53x_settlerpt, "%9s---------------------------------------------------------------------------\n"," ");
   fprintf(fl_53x_settlerpt, "\n");

	 APL_GOBACK_SUCCESS
 
    RETURN_SUCCESS:
    APL_IF_DEBUG
    {
    	CO_ProcMonitor(APL_OUT_FILE,"Exiting out of MS_Proc_IncMsg53xSetlRptBTT successfully\n",
               NULL, NULL);

     }
     return (APL_SUCCESS);

     RETURN_FAILURE:
     APL_IF_DEBUG
     {
        CO_ProcMonitor(APL_OUT_FILE,"Exiting out of MS_Proc_IncMsg53xSetlRptBTT unsucessfully\n", NULL, NULL);
     }
     return (APL_FAILURE);

}


int MS_Proc_IncMsg53xPendRpt(char							*chr_p_client,
                    char                     *chr_p_refno,
                    char                     *p_instr_code,
                    double                   p_quantity,
                    char                     *p_pend_str,
						  char							*chr_fl_name,
						  char							*p_mesg_body,
                    FILE							*fl_53x_pendrpt,
                    DEBUG_INFO_STRUCT_H             **l_debug_info_ptr) 
{

	char  chr_h_rej_str[100] = APL_NULL_STRING;
  
   fprintf(fl_53x_pendrpt,"%9sTRADE PENDING REPORT FOR SETTLEMENT MESSAGE FILE %s \n"," ",chr_fl_name);
   fprintf(fl_53x_pendrpt,"%9s---------------------------------------------------------------------------\n"," ");
   fprintf(fl_53x_pendrpt, "%s", p_mesg_body);
   fprintf(fl_53x_pendrpt,"%9s---------------------------------------------------------------------------\n"," ");

   fprintf(fl_53x_pendrpt,"%9sTHE DETAILS OF THE PENDING SETTLEMENT MESSAGE ARE AS FOLLOWS\n"," ");
	fprintf(fl_53x_pendrpt,"%12s Account          : %s\n"," ",chr_p_client);
   fprintf(fl_53x_pendrpt,"%12s Refno            : %s\n"," ",chr_p_refno);
   fprintf(fl_53x_pendrpt,"%12s Instrurity         : %s\n"," ",p_instr_code);
   fprintf(fl_53x_pendrpt,"%12s Qty              : %lf\n"," ",p_quantity);
	fprintf(fl_53x_pendrpt,"%12s Reason	 : %s\n"," ",p_pend_str);
	fprintf(fl_53x_pendrpt,"%9s---------------------------------------------------------------------------\n"," ");
	fprintf(fl_53x_pendrpt, "\n");


	if ( APL_FAILURE == MS_Mod_IncMsgSts("PND", p_pend_str, chr_g_str_client, NULL) )
   {
      CO_ProcMonitor(APL_OUT_FILE, "Failed to insert into IINMSGRP.\n", NULL, NULL);
      APL_GOBACK_FAIL
   }

   APL_GOBACK_SUCCESS
  
      RETURN_SUCCESS:
      APL_IF_DEBUG
      {
         CO_ProcMonitor(APL_OUT_FILE,"Exiting out of MS_Proc_IncMsg53xPendRpt successfully\n",
                  NULL, NULL);

      }
      return (APL_SUCCESS);

      RETURN_FAILURE:
      APL_IF_DEBUG
      {
         CO_ProcMonitor(APL_OUT_FILE,"Exiting out of MS_Proc_IncMsg53xPendRpt unsucessfully\n", NULL, NULL);
      }
      return (APL_FAILURE);
	 
}





int MS_Proc_IncMsg53xRejRpt(char							*chr_p_client,
                      char                   *chr_p_refno,
                      char                   *p_instr_code,
                      double                 p_quantity,
                      char                   *p_rej_str,
							 char							*chr_fl_name,
							 char							*p_mesg_body,
                      FILE                   *fl_rejectrpt,
                      DEBUG_INFO_STRUCT_H           **l_debug_info_ptr)
{

   
	
	char chr_l_rej_str[81] = APL_NULL_STRING;
 	strcpy(chr_l_rej_str,p_rej_str);
 
   fprintf(fl_rejectrpt,"%9sTRADE REJECTION REPORT FOR SETTLEMENT MESSAGE FILE %s \n"," ",chr_fl_name);
   fprintf(fl_rejectrpt,"%9s---------------------------------------------------------------------------\n"," ");
   fprintf(fl_rejectrpt, "%s", p_mesg_body);
   fprintf(fl_rejectrpt,"%9s---------------------------------------------------------------------------\n"," ");

   fprintf(fl_rejectrpt,"%9sTHE DETAILS OF THE REJECTED SETTLEMENT MESSAGE ARE AS FOLLOWS\n"," ");
	fprintf(fl_rejectrpt,"%12s Account          : %s\n"," ",chr_p_client);
   fprintf(fl_rejectrpt,"%12s Refno            : %s\n"," ",chr_p_refno);
   fprintf(fl_rejectrpt,"%12s Instrurity         : %s\n"," ",p_instr_code);
   fprintf(fl_rejectrpt,"%12s Qty              : %lf\n"," ",p_quantity);
	fprintf(fl_rejectrpt,"%12sReason      : %s\n"," ",p_rej_str);
	
		fflush(fl_rejectrpt);

	if ( APL_FAILURE == MS_Mod_IncMsgSts("RJT",chr_l_rej_str, chr_g_str_client, NULL) )
   {
      CO_ProcMonitor(APL_OUT_FILE, "Failed to insert into IINMSGRP.\n", NULL, NULL);
      APL_GOBACK_FAIL
   }

   APL_GOBACK_SUCCESS
  
      RETURN_SUCCESS:
      APL_IF_DEBUG
      {
         CO_ProcMonitor(APL_OUT_FILE,"Exiting out of MS_Proc_IncMsg53xRejRpt sucessfully\n",
                  NULL, NULL);

      }
      return (APL_SUCCESS);

      RETURN_FAILURE:
      APL_IF_DEBUG
      {
         CO_ProcMonitor(APL_OUT_FILE,"Exiting out of MS_Proc_IncMsg53xRejRpt unsucessfully\n", NULL, NULL);
      }
      return (APL_FAILURE);	

}




int MS_Rtv_IncMsg(MQHCONN Hcon1,MQHOBJ Hobj1,FILE *chr_finifile,FILE *p_logfile, MQLONG *ReturnCode, char *p_incmsgdir, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

   MQMD     md    =  {MQMD_DEFAULT};
   MQGMO    gmo   =  {MQGMO_DEFAULT};
   MQLONG   CompCode;
   MQLONG   Reason;
   MQLONG   messlen;
   MQCHAR   chr_buffer[MAXSWIFTLENISO15022]               =  APL_NULL_STRING;
   MQLONG   bufflen;
   MQLONG   l_backoutcnt;

   FILE *fl_sfeinc   = ( FILE *) NULL;

   char     chr_l_sferefnofile[PATH_LENGTH]            =  APL_NULL_STRING;
   char     chr_l_next_numstr[PATH_LENGTH]          =  APL_NULL_STRING;
   int      int_l_next_number =0;
   int i = 0;
	char		chr_l_sferefno[11] = APL_NULL_STRING;

   char temp[9550] = APL_NULL_STRING;
   EI_MQ_INC_STRUCT_H  l_ei_mq_data_struct_h;

   memset(&l_ei_mq_data_struct_h,NULL,sizeof(EI_MQ_INC_STRUCT_H));
   memset(chr_l_sferefno,NULL,11);
	memset(chr_g_unique_ref_num,APL_NULL_CHAR,APL_UNIQUE_REF_NUM_LEN);

   CO_ProcMonitor(APL_OUT_FILE,"Entered EI_MQ_INC_STRUCT_H Function",NULL,NULL);

   
   md.Version = MQMD_VERSION_2;
   md.Encoding = MQENC_NATIVE;
   md.CodedCharSetId = MQCCSI_Q_MGR;
   memcpy(md.Format,MQFMT_STRING,(size_t)MQ_FORMAT_LENGTH);

   gmo.Version = MQGMO_VERSION_2;
   gmo.MatchOptions = MQMO_NONE;
   gmo.Options =  MQGMO_SYNCPOINT + MQGMO_CONVERT + MQGMO_FAIL_IF_QUIESCING;

   CompCode = MQCC_OK;

   bufflen = sizeof(chr_buffer) -1;

   strcpy(chr_l_sferefnofile,p_incmsgdir);

   MQGET(Hcon1,Hobj1,&md,&gmo,bufflen,chr_buffer,&messlen,&CompCode,&Reason);
   if (Reason != MQRC_NONE)
   {
      if (Reason == MQRC_NO_MSG_AVAILABLE)
		{
		  sleep(I_INC_SLEEP_TIME);
        CompCode = MQCC_FAILED;
		}
      else
      {
         sprintf(temp,"MQ Get Message failed with reason h_code %ld\n",Reason);
         CO_ProcMonitor(APL_OUT_FILE,temp,NULL,NULL);
         memcpy(ReturnCode,&Reason,sizeof(Reason));
         APL_GOBACK_FAIL
      }
   }
   else
   {
      l_backoutcnt = md.BackoutCount;
      if (l_backoutcnt <= 10)
      {
         memcpy(l_ei_mq_data_struct_h.msg,chr_buffer,sizeof(l_ei_mq_data_struct_h.msg));
         
         for (i=0;i<=9;i++)
			{
				if(l_ei_mq_data_struct_h.msg[i]!='\n')
            	
            	chr_l_sferefno[i] = l_ei_mq_data_struct_h.msg[i]; 
				else
					break;
			}
			
			strcpy(l_ei_mq_data_struct_h.sfeindentity_no,chr_l_sferefno);
			printf("l_messagedata.sfeindentity_no is %s\n",l_ei_mq_data_struct_h.sfeindentity_no);
			
				memset(chr_g_sfe_refno,APL_NULL_CHAR,11);
         strcpy(chr_g_sfe_refno,l_ei_mq_data_struct_h.sfeindentity_no);
			printf("g_sferefno is %s\n",chr_g_sfe_refno);

            EXEC SQL SELECT INC_FILE_NAME.NEXTVAL into :int_l_next_number FROM DUAL ;
            IS_ANY_ORA_ERROR
            sprintf(chr_l_next_numstr,"%d",int_l_next_number);
            strcat(chr_l_sferefnofile,chr_l_next_numstr);
            strcat(chr_l_sferefnofile,".RCV");
            strcpy(chr_g_msgfile_name,(strrchr(chr_l_sferefnofile, '/') + 1 ) );
			printf("\n chr_g_msgfile_name 2 is |%s|\n",chr_g_msgfile_name);

         if    (( fl_sfeinc = fopen(chr_l_sferefnofile, "w+") ) == (FILE *) NULL)
         {
            CO_ProcMonitor(p_logfile,"Unable to open sfeinc h_file \n",NULL,NULL);
            MQBACK(Hcon1,&CompCode,&Reason);
            if (Reason != MQRC_NONE)
            {
               sprintf(temp,"Could not Rollback MQ Transaction. Reason h_code %ld",Reason);
               CO_ProcMonitor(p_logfile,temp,NULL,NULL);
            }
            else
            {
               CO_ProcMonitor(p_logfile,"Current MQ Transaction rolled back",NULL,NULL);
            }
            CompCode = MQCC_FAILED;
            APL_GOBACK_FAIL
         }
         else
         {
            MQCMIT(Hcon1,&CompCode,&Reason);
            if (Reason != MQRC_NONE)
            {
               MQBACK(Hcon1,&CompCode,&Reason);
               if (Reason != MQRC_NONE)
               {
                  fprintf(p_logfile,"Could not roll back MQ Transaction\n");
               }
               else
               {
                  fprintf(p_logfile,"Current MQ Transaction rolled back\n");
               }
               sprintf(temp,"Could not commit Transaction on MQ Server. Reason h_code %ld",Reason);
               CO_ProcMonitor(p_logfile,temp,NULL,NULL);
               APL_GOBACK_FAIL
            }
            else
            {
               CO_ProcMonitor(APL_OUT_FILE,"Message successfully fetched from MQ Queue",NULL,NULL);
               
               fprintf(fl_sfeinc,"%s\n\n",l_ei_mq_data_struct_h.msg);
               fclose(fl_sfeinc);
            }
         }
      }
      else
      {
         memcpy(l_ei_mq_data_struct_h.msg,chr_buffer,sizeof(l_ei_mq_data_struct_h.msg));
         sprintf(temp,"<%s>",l_ei_mq_data_struct_h.msg); 
         CO_ProcMonitor(p_logfile,temp,NULL,NULL);
         strcpy(temp,APL_NULL_STRING);
         MQCMIT(Hcon1,&CompCode,&Reason);
         if (Reason != MQRC_NONE)
         {
               fprintf(p_logfile,"Could not COMMIT  MQ Transaction\n");
         }
         else
         {
               fprintf(p_logfile,"Current MQ Transaction Committed with backcount>10\n");
         }
         APL_GOBACK_FAIL
      }
   }

   APL_GOBACK_SUCCESS;

   RETURN_SUCCESS :
      fclose(fl_sfeinc); 
      CO_ProcMonitor(   p_logfile,
                  "Exiting MS_Rtv_IncMsg Function with success",
                   NULL,
                   NULL);
      return(APL_SUCCESS);

   RETURN_FAILURE :
      fclose(fl_sfeinc); 
      CO_ProcMonitor(   p_logfile,
                  "Exiting MS_Rtv_IncMsg Function with errors",
                   NULL,
                   NULL);
      return(APL_FAILURE);
}


int MS_Proc_RespMsg(MQHCONN Hcon2,MQHOBJ Hobj2,FILE *p_logfile, MQLONG *ReturnCode,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	
   MQLONG   CompCode;
   MQLONG   Reason;
   MQLONG   messlen;
   char     chr_buffer[50]          	               =  APL_NULL_STRING;
   MQMD     md = {MQMD_DEFAULT};
   MQPMO    pmo = {MQPMO_DEFAULT};
   char     h_sfe_indentity_no[11]   	               =  APL_NULL_STRING;
   char     chr_h_sfe_refno_old[11]   	            =  APL_NULL_STRING;
   short    i_sfe_indentity_no   		                  =  0;
   char     h_res_str[50]                        =  APL_NULL_STRING;
   char     h_message_stat[4]                        =  APL_NULL_STRING;
   short    i_message_stat 		                     =  0;
   char     chr_h_msg_sts1[3]                       =  APL_NULL_STRING;
   char     chr_h_temp_str[11]                      =  APL_NULL_STRING;

   EXEC SQL BEGIN DECLARE SECTION;
   EXEC SQL VAR h_sfe_indentity_no IS STRING;
   EXEC SQL VAR chr_h_sfe_refno_old IS STRING;
   EXEC SQL END DECLARE SECTION;


   EXEC SQL DECLARE inc_resp_cursor CURSOR FOR
   SELECT SFE_IDENTITY_NO,MESSAGE_STAT FROM MS_INMSGRP
   WHERE SWIFT_MSG_NO='RES'
   AND REPORT_IND='Y'
   AND LENGTH(MESSAGE_STAT)= 3 ;

   IS_ANY_ORA_ERROR;

   EXEC SQL OPEN inc_resp_cursor;
   IS_ANY_ORA_ERROR;

   for(;;)
   {
      md.Version = MQMD_VERSION_2;
      md.Report = MQRO_NONE;
      md.MsgType = MQMT_DATAGRAM;
      md.Expiry = MQEI_UNLIMITED;
      md.Feedback = MQFB_NONE;
      md.Encoding = MQENC_NATIVE;
      md.CodedCharSetId = MQCCSI_Q_MGR;
      md.Priority = 0;
      md.Persistence = MQPER_PERSISTENT;
      strcpy(md.ReplyToQMgr,NULL);
      md.PutApplType = MQAT_UNIX;

      pmo.Version = MQPMO_VERSION_2;
      pmo.Options = MQPMO_NEW_MSG_ID
                  + MQPMO_SYNCPOINT
                  + MQPMO_SET_ALL_CONTEXT
                  + MQPMO_FAIL_IF_QUIESCING;
      pmo.Context = Hobj2;

      EXEC SQL FETCH inc_resp_cursor into :h_sfe_indentity_no:i_sfe_indentity_no,:h_message_stat:i_message_stat;
      IS_ANY_ORA_ERROR;

      if (sqlca.sqlcode==1403)
         break;
		
		strncpy(chr_h_msg_sts1,h_message_stat,2);	
		strcpy(chr_h_sfe_refno_old,h_sfe_indentity_no);
   if(strlen(h_sfe_indentity_no)  <  10)
   {
      memset(chr_h_temp_str,APL_NULL_CHAR,11);
		if(APL_FAILURE == CO_PadString(h_sfe_indentity_no,'L',10,"0",l_debug_info_ptr))
		{
         fprintf(p_logfile,"Could not Format the response string failed in lpad chr_func\n");
         APL_GOBACK_FAIL;
		}

   }
		printf("SFE REFNO IS %s\n",h_sfe_indentity_no);
		

		sprintf(h_res_str,"%s0000%s%15s%.11s",chr_h_msg_sts1,h_sfe_indentity_no," ",chr_g_unique_ref_num); 
		printf("H_RESSTR is %s\n",h_res_str);

      strcpy(chr_buffer,h_res_str);
      messlen=strlen(chr_buffer);

      memcpy(md.Format,MQFMT_STRING,(size_t)MQ_FORMAT_LENGTH);
      memcpy(md.MsgId, MQMI_NONE, sizeof(md.MsgId) );
      memcpy(md.CorrelId,MQCI_NONE, sizeof(md.CorrelId) );

      MQPUT(Hcon2,
             Hobj2,
             &md,
             &pmo,
             messlen,
             chr_buffer,
             &CompCode,
             &Reason);
      if (Reason != MQRC_NONE)
      {
         printf("MQPUT Failed \n");
         fprintf(p_logfile,"Error...in MQPUT Reason %ld\n\n",Reason);
         APL_GOBACK_FAIL;
      }
      else
      {
         MQCMIT(Hcon2,&CompCode,&Reason);
         if (Reason != MQRC_NONE)
         {
            fprintf(p_logfile,"Could Not Commit For Acknowledgement with reason %s\n",Reason);
            MQBACK(Hcon2,&CompCode,&Reason);
            if (Reason != MQRC_NONE)
            {
               fprintf(p_logfile,"Could Not Rollback Acknowledgement reason %s\n",Reason);
            }
            else
            {
               fprintf(p_logfile,"Rollback Acknowledgement successful %s\n",Reason);
            }
         }
         else
         {
            fprintf(p_logfile,"Record Committed For Acknowledgement with reason %s\n",Reason);
            EXEC SQL UPDATE  MS_INMSGRP
                     SET MESSAGE_STAT= substr(MESSAGE_STAT,1,2)
                     WHERE SWIFT_MSG_NO='RES'
                     AND SFE_IDENTITY_NO=:chr_h_sfe_refno_old;
            IS_ANY_ORA_ERROR;
         }
      }
   }
   EXEC SQL CLOSE inc_resp_cursor;
   IS_ANY_ORA_ERROR
   EXEC SQL COMMIT;
   IS_ANY_ORA_ERROR
	memset(chr_g_unique_ref_num,APL_NULL_CHAR,APL_UNIQUE_REF_NUM_LEN);
	

   RETURN_SUCCESS :
      CO_ProcMonitor(   p_logfile,
                  "Exiting MS_Proc_RespMsg Function with success",
                   NULL,
                   NULL);
      return(APL_SUCCESS);

   RETURN_FAILURE :
      CO_ProcMonitor(   p_logfile,
                  "Exiting MS_Proc_RespMsg Function with errors",
                   NULL,
                   NULL);
      return(APL_FAILURE);

}
