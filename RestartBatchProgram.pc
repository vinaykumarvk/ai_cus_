


   
   
   
   
   
   
   
   
   
   
   
   




#include "stdio_64.h" 
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>
#include "Prog_Common.h"
#include "CR_Common.h"
#include <ctype.h>

#define S_RESTART 10
#define S_START 11
#define S_CANNOT_EXECUTE 12
#define S_CONFLICT 13
#define S_PREDECESSOR 14
#define ERROR_LENGTH 200 
#define S_NOTGOTLOCK sqlca.sqlcode==-54
#define EOD_SCH_PROG "CM_EodScheduler"
#define BOD_SHEDULE_CONTROLLER "CM_BodScheduler"


EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

char						chr_inifile[PATH_LENGTH];
/* Added by kotubabu for Linux Migration -Start*/
#ifdef OS_LINUX
FILE*						chr_finifile=NULL;
#else
FILE *chr_finifile = APL_OUT_FILE;
#endif
/* Added by kotubabu for Linux Migration-End*/
extern	char						chr_db_id[APL_USERID_LEN];
extern	char						chr_db_pwd[APL_USERID_LEN];
int g_int_dummy_var = 0; /* Changes done by Sana for Connection Time-out */

int CO_Pro_MarkAbort( INTL_ENV_DATA_STRUCT_H *p_intl_env_datastruct_h,
							DEBUG_INFO_STRUCT_H  **l_debug_info_ptr)
{
	char 	chr_l_rowid_A[APL_ROWID_LEN] = APL_NULL_STRING;
	int   int_h_process_id =0;
	short i_process_id =0;
	int	int_l_exitcode;
	int	int_exit_code;

	
	EXEC SQL DECLARE ChkAbortCur
	CURSOR  FOR
	SELECT rowid,PROC_ID
	FROM SYS_BATCHPROC
	WHERE (STATUS='started') AND 
	(PROC_ENDFLG <> 'Y') AND   
	( (EOD_BOD_IND NOT IN ('E','B')) OR (EOD_BOD_IND IS NULL) );
	IS_ANY_ORA_ERROR


	
	EXEC SQL OPEN ChkAbortCur;
	IS_ANY_ORA_ERROR
	
	for (;;)
	{
		
		strcpy(chr_l_rowid_A,APL_NULL_STRING);
		int_h_process_id = 0;
		i_process_id = 0;

		
		EXEC SQL FETCH ChkAbortCur
		INTO :chr_l_rowid_A,:int_h_process_id:i_process_id;
		IS_ANY_ORA_ERROR_CURSOR

		
		
		if ( i_process_id == -1 )
		{
			continue;
		}
		
		

		
		 

		if ( waitpid(int_h_process_id,&int_exit_code,WNOHANG) <= 0)
			continue;
		else
		{
			
			if(WIFEXITED(int_exit_code)) {
				int_l_exitcode=WEXITSTATUS(int_exit_code);
				if(int_l_exitcode!=0){
					
					EXEC SQL UPDATE SYS_BATCHPROC
						SET PROC_ENDFLG='Y'
						WHERE rowid=:chr_l_rowid_A; 
					IS_ANY_ORA_ERROR
				} 
			}
			if(WIFSIGNALED(int_exit_code)) {
					
					EXEC SQL UPDATE SYS_BATCHPROC
						SET PROC_ENDFLG='Y'
							WHERE rowid=:chr_l_rowid_A;
					IS_ANY_ORA_ERROR
				}

		}
		

	}
	EXEC SQL COMMIT;
	IS_ANY_ORA_ERROR
	RETURN_SUCCESS:
	{
		return APL_SUCCESS;
	}
	RETURN_FAILURE:
	{
		return APL_FAILURE;
	}
}

int	CO_GetDbCon(DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL CONNECT :chr_db_id IDENTIFIED BY :chr_db_pwd;
	IS_ANY_ORA_ERROR

	RETURN_SUCCESS:
	{
		return APL_SUCCESS;
	}
	RETURN_FAILURE:
	{
		return APL_FAILURE;
	}
}


static int CO_Pro_ChkConflicts(char **p_conflictprograms,
										char *p_sysdate,
										int *p_status_ind,
										DEBUG_INFO_STRUCT_H **l_debug_info_ptr,
										INTL_ENV_DATA_STRUCT_H *p_intl_env_datastruct_h) 
{
	int int_h_count,i;
	int int_l_noconflicts;
	char chr_errmsg[ERROR_LENGTH];
	*p_status_ind=1;

	for(i=0;p_conflictprograms[i];i++) 
	{
		EXEC SQL SELECT NVL(count(*),0) INTO :int_h_count
			FROM SYS_BATCHPROC
				WHERE PROCESS_NAME=:p_conflictprograms[i] 
				AND STATUS='started'
				AND TO_CHAR(TO_DATE(START_DATE),'ddmmyy')=TO_CHAR(TO_DATE(:p_sysdate),'ddmmyy');
		IS_ANY_ORA_ERROR

		
		if(int_h_count) 
			break;
	}

	
	if(p_conflictprograms[i])
	{
		sprintf(chr_errmsg,"Conflict program %s running\n",p_conflictprograms[i]);
		CO_ProcMonitor(APL_OUT_FILE,chr_errmsg,NULL,p_intl_env_datastruct_h);
		*p_status_ind=0;
		APL_GOBACK_SUCCESS
	}
RETURN_SUCCESS:
{
	return APL_SUCCESS;
}
RETURN_FAILURE:
{
	return APL_FAILURE;
}
}




static int CO_Pro_ChkPredecessors(char **p_predecessorprograms,
											 char *p_sysdate,
											 int *p_status_ind,
											 DEBUG_INFO_STRUCT_H **l_debug_info_ptr,
											 INTL_ENV_DATA_STRUCT_H *p_intl_env_datastruct_h) {
	int int_h_count;
	int i;
	char chr_errmsg[ERROR_LENGTH];

	*p_status_ind=1;
	for(i=0;p_predecessorprograms[i];i++) 
	{
		EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_h_count
			FROM SYS_BATCHPROC
				WHERE PROCESS_NAME=:p_predecessorprograms[i]
				AND TO_CHAR(TO_DATE(START_DATE),'ddmmyy')=TO_CHAR(TO_DATE(:p_sysdate),'ddmmyy')
				  AND STATUS='completed';
		IS_ANY_ORA_ERROR

		if(!int_h_count) 
			break;
	}

	if(p_predecessorprograms[i])
	{
		sprintf(chr_errmsg,"PRE_PROCESS %s not executed\n",p_predecessorprograms[i]);
		CO_ProcMonitor(APL_OUT_FILE,chr_errmsg,NULL,p_intl_env_datastruct_h);
		*p_status_ind=0;
		APL_GOBACK_SUCCESS
	}

RETURN_SUCCESS:
{
	return APL_SUCCESS;
}
RETURN_FAILURE:
{
	return APL_FAILURE;
}
}



static int CO_Pro_ChkAborted(char *p_programname,
									  char *chr_p_key_a,
									  char *p_sysdate,
									  int *p_status_ind,
									  DEBUG_INFO_STRUCT_H **l_debug_info_ptr,
									  INTL_ENV_DATA_STRUCT_H *p_intl_env_datastruct_h) {
	*p_status_ind=1;
	
	EXEC SQL SELECT * 
		FROM SYS_BATCHPROC
			WHERE PROCESS_NAME=:p_programname
			  AND PROC_INIT	  =:chr_p_key_a
			  AND STATUS  ='started'
				AND TO_CHAR(TO_DATE(START_DATE),'ddmmyy')=TO_CHAR(TO_DATE(:p_sysdate),'ddmmyy')
			  FOR UPDATE OF STATUS NOWAIT;
	if(S_NOTGOTLOCK) {
		printf("A copy of program running\n");
		*p_status_ind=0;
		APL_GOBACK_SUCCESS
		}
	IS_ANY_ORA_ERROR			
RETURN_SUCCESS:
{
	return APL_SUCCESS;
}
RETURN_FAILURE:
{
	return APL_FAILURE;
}

}



static int CO_Pro_ChkDuplicate(char *p_programname,
									  	 char *chr_p_key_a,
										 char *p_sysdate,
										 int *p_status_ind,
										 DEBUG_INFO_STRUCT_H **l_debug_info_ptr,
										 INTL_ENV_DATA_STRUCT_H *p_intl_env_datastruct_h) 
{
	int int_h_count;
	int int_funcreturnstatus;
	char chr_errmsg[ERROR_LENGTH];
	*p_status_ind=1;

	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_h_count
		FROM SYS_BATCHPROC 
			WHERE 	PROCESS_NAME=:p_programname
				  AND	PROC_INIT	  =:chr_p_key_a
				AND TO_CHAR(TO_DATE(START_DATE),'ddmmyy')=TO_CHAR(TO_DATE(:p_sysdate),'ddmmyy')
				  AND STATUS ='started';
	IS_ANY_ORA_ERROR

	if(int_h_count>1) 
	{
	 
		sprintf(chr_errmsg,"Duplicate entry for process %s\n",p_programname);
		CO_ProcMonitor(APL_OUT_FILE,chr_errmsg,NULL,p_intl_env_datastruct_h);
		*p_status_ind=S_CANNOT_EXECUTE;
		APL_GOBACK_SUCCESS
	}

	if(int_h_count==0) {
		*p_status_ind=S_START;
		APL_GOBACK_SUCCESS
		}

	if(CO_Pro_ChkAborted(p_programname,
								chr_p_key_a,
								p_sysdate,
								&int_funcreturnstatus,
								l_debug_info_ptr,
								p_intl_env_datastruct_h)==APL_SUCCESS){
		if(int_funcreturnstatus)
		*p_status_ind=S_RESTART;
		else
		*p_status_ind=S_CANNOT_EXECUTE;
		APL_GOBACK_SUCCESS
		}
APL_GOBACK_FAIL 
RETURN_SUCCESS:
{
	return APL_SUCCESS;
}

RETURN_FAILURE:
{
	return APL_FAILURE;
}
}

static void CO_Pro_FreeArray(char **freeThis) {
int i;
printf("Calling from FreeArray\n");
for(i=0;freeThis[i];i++)
	free(freeThis[i]);
free(freeThis);
				
}




int CO_Pro_BatchRestart(rpc_binding_handle_t IDL_handle,
							char *p_progname,
						  char *chr_p_key_a,
						  char *p_funcparam,
						  int *int_p_funcreturnstate,
						  DEBUG_INFO_STRUCT_H **l_debug_info_ptr,
						  INTL_ENV_DATA_STRUCT_H *p_intl_env_datastruct_h)
{
	short i_restartDataInd;
	int int_l_created;
	int int_h_progcount;
	char *chr_tempchar;
	char chr_h_checkthisprogram[PATH_LENGTH];
	int int_l_chpid;
	int int_l_status;
	int int_deleteit;
	char chr_errmsg[ERROR_LENGTH];
	int i;
	int int_l_howtostart;
	char chr_l_predecessor[PATH_LENGTH],chr_l_conflict[PATH_LENGTH];
	short l_predecessorInd,l_conflictInd;
	char chr_l_sysdate_a[APL_DATE_LEN];
	char **chr_l_predecessorarray;
	char **chr_l_conflictarray;
	int int_funcreturnstatus;
	int int_returnflag;
	char chr_sesamexecdir[PATH_LENGTH];
   INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h;

	p_intlenv_data_struct_h = p_intl_env_datastruct_h;
	chr_l_predecessorarray=chr_l_conflictarray=NULL;
	EXEC SQL VAR chr_l_predecessor IS STRING;
	EXEC SQL VAR chr_l_conflict IS STRING;
	EXEC SQL VAR chr_h_checkthisprogram IS STRING;
	int_deleteit=0;

	if ( CO_ChkClientAuth(IDL_handle,l_debug_info_ptr) != APL_SUCCESS)
		return(APL_FAILURE);
		
	if((chr_tempchar=getenv("INTL_ROOT_PATH"))==NULL) 
		return(APL_FAILURE);
	sprintf(chr_inifile,"%s/intl_sun.cfg",chr_tempchar);
	if((chr_finifile=fopen(chr_inifile,"r"))==NULL)
		return(APL_FAILURE);

	
	if(!strcmp(p_progname, EOD_SCH_PROG) || !strcmp(p_progname, BOD_SHEDULE_CONTROLLER)  || (APL_IS_ONLINE))
	{
			  if(CO_RtvSysDtTime(chr_l_sysdate_a,l_debug_info_ptr)==APL_SUCCESS)
				  fprintf(APL_OUT_FILE,"The sysDate is %s\n",chr_l_sysdate_a);
			  else{
				  sprintf(chr_errmsg,"Could not get date");
				  CO_ProcMonitor(APL_OUT_FILE,chr_errmsg,NULL,p_intl_env_datastruct_h);
				  APL_GOBACK_FAIL
				  }

			  
			  if ( CO_Pro_MarkAbort(p_intl_env_datastruct_h,l_debug_info_ptr) == APL_FAILURE )
			  {
				  CO_ProcMonitor(APL_OUT_FILE,"Encountered l_debuglist while marking processes aborted",l_debug_info_ptr,p_intl_env_datastruct_h);
				  APL_GOBACK_FAIL
			  }

		  

			  int_funcreturnstatus=CO_Pro_ChkDuplicate(p_progname,
														  chr_p_key_a,
														  chr_l_sysdate_a,
														  &int_l_howtostart,
														  l_debug_info_ptr,
														  p_intl_env_datastruct_h);
			  int_l_created=0;
			  if(int_funcreturnstatus==APL_FAILURE) {
				  APL_GOBACK_FAIL
				  }
			  *int_p_funcreturnstate=S_RESTART;

			  if(int_l_howtostart==S_CANNOT_EXECUTE) 
			  {
				  sprintf(chr_errmsg,"A copy of program still running");
				  CO_ProcMonitor(APL_OUT_FILE,chr_errmsg,NULL,p_intl_env_datastruct_h);
				  *int_p_funcreturnstate=S_CANNOT_EXECUTE;
				  int_deleteit=1;
				  APL_GOBACK_SUCCESS
			  }

			  if(int_l_howtostart==S_START) {
				  *int_p_funcreturnstate=S_START;
				  EXEC SQL INSERT INTO SYS_BATCHPROC (PROCESS_NAME,PROC_INIT,STATUS,START_DATE,USR)
					  VALUES(:p_progname,:chr_p_key_a,'started',:chr_l_sysdate_a,:p_intl_env_datastruct_h->usr);
				  IS_ANY_ORA_ERROR


				  EXEC SQL COMMIT;
				  IS_ANY_ORA_ERROR
				  
					 EXEC SQL SELECT * FROM SYS_BATCHPROC
						 WHERE PROCESS_NAME=:p_progname
						 AND 	PROC_INIT	  =:chr_p_key_a
						 AND	STATUS  ='started'
						 AND 	START_DATE=:chr_l_sysdate_a
						 FOR UPDATE OF STATUS,PROCESSING_STATUS NOWAIT;
				  if(S_NOTGOTLOCK) {
					  CO_ProcMonitor(APL_OUT_FILE,"A copy of program running",NULL,p_intl_env_datastruct_h);
					  *int_p_funcreturnstate=S_CANNOT_EXECUTE;
					  int_deleteit=0;
					  APL_GOBACK_SUCCESS
					  }

						 int_l_created=1;
				  }


			  EXEC SQL SELECT NVL(COUNT(PRE_PROCESS),0) INTO :int_h_progcount
				  FROM SYS_BATCH_CNTRL
					  WHERE PROCESS_NAME=:p_progname;
			  IS_ANY_ORA_ERROR


			  chr_l_predecessorarray=(char **)(malloc(sizeof(char *)*(int_h_progcount+1)));
			  APL_MALLOC_FAIL(chr_l_predecessorarray)
		  


			  for(i=0;i<int_h_progcount+1;i++)
				  chr_l_predecessorarray[i]=NULL;
			  chr_l_predecessorarray[int_h_progcount]=NULL;

			  EXEC SQL DECLARE predCursor CURSOR FOR
				  SELECT PRE_PROCESS
					  FROM SYS_BATCH_CNTRL
						  WHERE PROCESS_NAME=:p_progname;
			  IS_ANY_ORA_ERROR

			  EXEC SQL OPEN predCursor;
			  IS_ANY_ORA_ERROR

			  for(i=0;i<int_h_progcount;i++) {
				  EXEC SQL FETCH predCursor INTO :chr_h_checkthisprogram;
				  IS_ANY_ORA_ERROR_CURSOR
				  chr_l_predecessorarray[i]=(char *)(malloc(sizeof(char *)*(strlen(chr_h_checkthisprogram)+1)));
				  APL_MALLOC_FAIL(chr_l_predecessorarray[i])
		  
				  strcpy(chr_l_predecessorarray[i],chr_h_checkthisprogram);
				  }


			  chr_l_predecessorarray[int_h_progcount]=NULL;

			  EXEC SQL CLOSE predCursor;
			  IS_ANY_ORA_ERROR
		  #ifdef SYS_DEBUG
			  for(i=0;chr_l_predecessorarray[i];i++)
				  printf("%s\n",chr_l_predecessorarray[i]);
		  #endif

			  EXEC SQL SELECT NVL(COUNT(MISMATCH),0) INTO :int_h_progcount
				  FROM SYS_BATCH_CNTRL
					  WHERE PROCESS_NAME=:p_progname;
			  IS_ANY_ORA_ERROR


			  chr_l_conflictarray=(char **)(malloc(sizeof(char *)*(int_h_progcount+1)));
			  APL_MALLOC_FAIL(chr_l_conflictarray)

		  

			  for(i=0;i<int_h_progcount;i++)
				  chr_l_conflictarray[i]=NULL;
			  chr_l_conflictarray[int_h_progcount]=NULL;

			  EXEC SQL DECLARE confCursor CURSOR FOR
				  SELECT MISMATCH
					  FROM SYS_BATCH_CNTRL
						  WHERE PROCESS_NAME=:p_progname;
			  IS_ANY_ORA_ERROR

			  EXEC SQL OPEN confCursor;

			  IS_ANY_ORA_ERROR
			  for(i=0;i<int_h_progcount;i++) {
				  EXEC SQL FETCH confCursor INTO :chr_h_checkthisprogram;
			  IS_ANY_ORA_ERROR
				  chr_l_conflictarray[i]=(char *)(malloc(sizeof(char *)*(strlen(chr_h_checkthisprogram)+1)));
				  APL_MALLOC_FAIL(chr_l_conflictarray[i])
		  
				  strcpy(chr_l_conflictarray[i],chr_h_checkthisprogram);
				  }


			  chr_l_conflictarray[int_h_progcount]=NULL;

			  EXEC SQL CLOSE predCursor;
			  IS_ANY_ORA_ERROR

		  #ifdef SYS_DEBUG
			  for(i=0;chr_l_conflictarray[i];i++)
				  printf("%s\n",chr_l_conflictarray[i]);
		  #endif

			  int_funcreturnstatus=CO_Pro_ChkConflicts(chr_l_conflictarray,
																chr_l_sysdate_a,
																&int_returnflag,
																l_debug_info_ptr,
																p_intl_env_datastruct_h);
			  if(int_funcreturnstatus==APL_FAILURE)
				  APL_GOBACK_FAIL

			  if(!int_returnflag)
			  {
				  sprintf(chr_errmsg,"Conflict program running\n");
				  CO_ProcMonitor(APL_OUT_FILE,chr_errmsg,NULL,p_intl_env_datastruct_h);
				  *int_p_funcreturnstate= S_CONFLICT;
				  int_deleteit=1;
					APL_GOBACK_SUCCESS
			  }
			  
			  int_funcreturnstatus=CO_Pro_ChkPredecessors(chr_l_predecessorarray,
																	chr_l_sysdate_a,
																	&int_returnflag,
																	l_debug_info_ptr,
																	p_intl_env_datastruct_h);
			  if(int_funcreturnstatus==APL_FAILURE)
				  APL_GOBACK_FAIL
			  if(!int_returnflag)
			  {
				  sprintf(chr_errmsg,"PRE_PROCESS not executed as yet\n");
				  CO_ProcMonitor(APL_OUT_FILE,chr_errmsg,NULL,p_intl_env_datastruct_h);
				  *int_p_funcreturnstate=S_PREDECESSOR;
				  int_deleteit=1;
				  APL_GOBACK_SUCCESS
			  }
			  if ( CO_ReadToken(chr_finifile,"INTL_PROG_PATH",chr_sesamexecdir,l_debug_info_ptr)
					  == APL_FAILURE)
				  APL_GOBACK_FAIL

				/* Changes done by Sana for Connection Time-out [start] */
				EXEC SQL SELECT 1 into :g_int_dummy_var FROM DUAL;
				IS_ANY_ORA_ERROR;
				/* Changes done by Sana for Connection Time-out [end] */

				waitpid(-1,NULL,WNOHANG);


			  if((int_l_chpid=fork())==-1) 
			  {
				  fprintf(APL_OUT_FILE,"Cannot fork");
				  APL_GOBACK_FAIL
			  }
			  if(int_l_chpid) 
			  {
				  

			  EXEC SQL VAR chr_l_sysdate_a IS STRING;
			  EXEC SQL VAR p_intl_env_datastruct_h->processtion IS STRING;

			  EXEC SQL UPDATE SYS_BATCHPROC
				  SET PROC_ID=:int_l_chpid,
						PROC_ENDFLG='N',
						START_DATE=:chr_l_sysdate_a,
						PROCESS_DESC=:p_intl_env_datastruct_h->processtion,
						USR=:p_intl_env_datastruct_h->usr
				  WHERE PROCESS_NAME=:p_progname
				  AND	PROC_INIT	  =:chr_p_key_a
				  AND TO_CHAR(TO_DATE(START_DATE),'ddmmyy')=TO_CHAR(TO_DATE(:chr_l_sysdate_a),'ddmmyy')
				  AND	STATUS='started';
			  IS_ANY_ORA_ERROR

			  

			  EXEC SQL INSERT INTO AUDIT_LOG
			  VALUES (	:p_intl_env_datastruct_h->usr,
						  :p_intl_env_datastruct_h->h_mode,
						  :p_intl_env_datastruct_h->processtion,
						  :p_intl_env_datastruct_h->auth_req,
						  :p_intl_env_datastruct_h->subprocess,
						  :p_intl_env_datastruct_h->h_process,
						  :chr_l_sysdate_a,
						  NULL );
			  IS_ANY_ORA_ERROR

			  if(int_l_howtostart==S_START) {
					  sprintf(chr_errmsg,"Successfully started %s",p_progname);
					  CO_ProcMonitor(APL_OUT_FILE,chr_errmsg,NULL,p_intl_env_datastruct_h);
					  EXEC SQL COMMIT;
			  IS_ANY_ORA_ERROR
					  }
				  else {
					  sprintf(chr_errmsg,"Successfully restarted %s",p_progname);
					  CO_ProcMonitor(APL_OUT_FILE,chr_errmsg,NULL,p_intl_env_datastruct_h);
					  }
				  APL_GOBACK_SUCCESS
			  }
			  else 
			  {
				  
				  strcat(chr_sesamexecdir,p_progname);
		  
				  execlp(chr_sesamexecdir,
							p_progname,
							chr_p_key_a,
							chr_l_sysdate_a,
							p_intl_env_datastruct_h->usr,
							p_intl_env_datastruct_h->h_mode,
							p_intl_env_datastruct_h->processtion,
							p_intl_env_datastruct_h->auth_req,
							p_intl_env_datastruct_h->subprocess,
							p_intl_env_datastruct_h->h_process,
							p_funcparam,
							NULL);
				  sprintf(chr_errmsg,"Could not execute the program %s",p_progname);
				  CO_ProcMonitor(APL_OUT_FILE,chr_errmsg,NULL,p_intl_env_datastruct_h);
				  int_l_created=0;
					  exit(-1);
			  }
	}
	else
	{
		
		APL_GOBACK_FAIL;

	}




RETURN_SUCCESS:	
{
	fclose(chr_finifile);
	printf("In the return block\n");
	 if(chr_l_predecessorarray) 
		CO_Pro_FreeArray(chr_l_predecessorarray);
	 if(chr_l_conflictarray) 
		CO_Pro_FreeArray(chr_l_conflictarray);
	printf("Returned from FreeArrays\n");
	printf("Going to commit\n");
	fflush(stdout); 
	EXEC SQL COMMIT ;
	printf("Returning from BatchRestart\n");
   return APL_SUCCESS;
}

RETURN_FAILURE:
{
	if(chr_l_predecessorarray) 
		CO_Pro_FreeArray(chr_l_predecessorarray);
	if(chr_l_conflictarray) 
		CO_Pro_FreeArray(chr_l_conflictarray);
	if(int_l_created) {
		EXEC SQL DELETE SYS_BATCHPROC
			WHERE PROCESS_NAME=:p_progname
			AND 	PROC_INIT	  =:chr_p_key_a
			AND	STATUS  ='started'
			AND 	START_DATE=:chr_l_sysdate_a;
		EXEC SQL COMMIT;
	}
	CO_ProcMonitor(APL_OUT_FILE,NULL,l_debug_info_ptr,p_intl_env_datastruct_h);
	EXEC SQL COMMIT ;
	fclose(chr_finifile);
	return APL_FAILURE;
	}
} 


int DL_Pro_AutoBrkSetl(rpc_binding_handle_t IDL_handle,
											char *p_progname,
											char *chr_p_key_a,
											char *p_funcparam,
											int *int_p_funcreturnstate,
											char       *p_file_name,
											FILE_TYPE      p_file_type,
											pipe_type      p_data,
											DEBUG_INFO_STRUCT_H   **l_debug_info_ptr,
											INTL_ENV_DATA_STRUCT_H *p_intl_env_datastruct_h)
{

	short i_restartDataInd;
	int int_l_created;
	int int_h_progcount;
	char chr_h_checkthisprogram[PATH_LENGTH];
	int int_l_chpid;
	int int_l_status;
	int int_deleteit;
	char chr_errmsg[ERROR_LENGTH];
	int i = 0;
	int int_l_howtostart;
	char chr_l_predecessor[PATH_LENGTH],chr_l_conflict[PATH_LENGTH];
	short l_predecessorInd,l_conflictInd;
	char chr_l_sysdate_a[APL_DATE_LEN];
	char **chr_l_predecessorarray;
	char **chr_l_conflictarray;
	int int_funcreturnstatus;
	int int_returnflag;
	char chr_sesamexecdir[PATH_LENGTH];
	INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h;
	
	char	chr_inifile [PATH_LENGTH],chr_my_report [PATH_LENGTH],page_buff [APL_PAGE_SIZE];
	FILE	*chr_finifile,*f_my_report;
	int element_count;

	char * chr_cur_ptr;
	char *upp_file_name=(char *)calloc(1,strlen(p_file_name)+1);
	char *orig_file_name=(char *)calloc(1,strlen(p_file_name)+1);

	p_intlenv_data_struct_h = p_intl_env_datastruct_h;
	chr_l_predecessorarray=chr_l_conflictarray=NULL;

	EXEC SQL VAR chr_l_predecessor IS STRING;
	EXEC SQL VAR chr_l_conflict IS STRING;
	EXEC SQL VAR chr_h_checkthisprogram IS STRING;
	int_deleteit=0;



	if ( CO_ChkClientAuth(IDL_handle,l_debug_info_ptr) == APL_FAILURE )
		APL_GOBACK_FAIL

	
	strcpy(chr_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_inifile,"/intl_sun.cfg");

	if((chr_finifile=fopen(chr_inifile,"r"))==NULL)
		APL_GOBACK_FAIL



	if(!strcmp(p_progname, EOD_SCH_PROG) || !strcmp(p_progname, BOD_SHEDULE_CONTROLLER) || (APL_IS_ONLINE))
	{
		if(CO_RtvSysDtTime(chr_l_sysdate_a,l_debug_info_ptr)==APL_SUCCESS)
		{
			fprintf(APL_OUT_FILE,"The sysDate is %s\n",chr_l_sysdate_a);
		}
		else
		{
			sprintf(chr_errmsg,"Could not get date");
			CO_ProcMonitor(APL_OUT_FILE,chr_errmsg,NULL,p_intl_env_datastruct_h);
			APL_GOBACK_FAIL
		}

	
		if ( CO_Pro_MarkAbort(p_intl_env_datastruct_h,l_debug_info_ptr) == APL_FAILURE )
		{
			CO_ProcMonitor(APL_OUT_FILE,"Encountered l_debuglist while marking processes aborted",l_debug_info_ptr,p_intl_env_datastruct_h);
			APL_GOBACK_FAIL
		}


	

		int_funcreturnstatus=CO_Pro_ChkDuplicate(p_progname,
														chr_p_key_a,
														chr_l_sysdate_a,
														&int_l_howtostart,
														l_debug_info_ptr,
														p_intl_env_datastruct_h);

		int_l_created=0;
	
		if(int_funcreturnstatus==APL_FAILURE)
			APL_GOBACK_FAIL

		*int_p_funcreturnstate=S_RESTART;

		if(int_l_howtostart==S_CANNOT_EXECUTE)
		{
			sprintf(chr_errmsg,"A copy of program still running");
			CO_ProcMonitor(APL_OUT_FILE,chr_errmsg,NULL,p_intl_env_datastruct_h);
			*int_p_funcreturnstate=S_CANNOT_EXECUTE;
			int_deleteit=1;
			APL_GOBACK_SUCCESS
		}

		if(int_l_howtostart==S_START)
		{
			*int_p_funcreturnstate=S_START;
			EXEC SQL INSERT INTO SYS_BATCHPROC (PROCESS_NAME,PROC_INIT,STATUS,START_DATE,USR)
			VALUES(:p_progname,:chr_p_key_a,'started',:chr_l_sysdate_a,:p_intl_env_datastruct_h->usr);
			IS_ANY_ORA_ERROR

			EXEC SQL COMMIT;
			IS_ANY_ORA_ERROR

	 	

			EXEC SQL SELECT * FROM SYS_BATCHPROC
			WHERE PROCESS_NAME=:p_progname
			AND  PROC_INIT     =:chr_p_key_a
			AND  STATUS  ='started'
			AND  START_DATE=:chr_l_sysdate_a
			FOR UPDATE OF STATUS,PROCESSING_STATUS NOWAIT;

			if(S_NOTGOTLOCK)
			{
				CO_ProcMonitor(APL_OUT_FILE,"A copy of program running",NULL,p_intl_env_datastruct_h);
				*int_p_funcreturnstate=S_CANNOT_EXECUTE;
				int_deleteit=0;
				APL_GOBACK_SUCCESS
			}

			int_l_created=1;
		}

		EXEC SQL SELECT NVL(COUNT(PRE_PROCESS),0) INTO :int_h_progcount
		FROM SYS_BATCH_CNTRL
		WHERE PROCESS_NAME=:p_progname;

		IS_ANY_ORA_ERROR

		chr_l_predecessorarray=(char **)(malloc(sizeof(char *)*(int_h_progcount+1)));
		APL_MALLOC_FAIL(chr_l_predecessorarray)

		for(i=0;i<int_h_progcount+1;i++)
			chr_l_predecessorarray[i]=NULL;
		

		chr_l_predecessorarray[int_h_progcount]=NULL;

		EXEC SQL DECLARE pred_Cursor CURSOR FOR
		SELECT PRE_PROCESS
		FROM SYS_BATCH_CNTRL
		WHERE PROCESS_NAME=:p_progname;

		IS_ANY_ORA_ERROR

		EXEC SQL OPEN pred_Cursor;
		IS_ANY_ORA_ERROR

		for(i=0;i<int_h_progcount;i++)
		{
			EXEC SQL FETCH pred_Cursor INTO :chr_h_checkthisprogram;
			IS_ANY_ORA_ERROR_CURSOR
			chr_l_predecessorarray[i]=(char *)(malloc(sizeof(char *)*(strlen(chr_h_checkthisprogram)+1)));
			APL_MALLOC_FAIL(chr_l_predecessorarray[i])
			strcpy(chr_l_predecessorarray[i],chr_h_checkthisprogram);
		}

		chr_l_predecessorarray[int_h_progcount]=NULL;

		EXEC SQL CLOSE pred_Cursor;
		IS_ANY_ORA_ERROR

		#ifdef SYS_DEBUG
			for(i=0;chr_l_predecessorarray[i];i++)
				printf("%s\n",chr_l_predecessorarray[i]);
		#endif

		EXEC SQL SELECT NVL(COUNT(MISMATCH),0) INTO :int_h_progcount
		FROM SYS_BATCH_CNTRL
		WHERE PROCESS_NAME=:p_progname;

		IS_ANY_ORA_ERROR

		chr_l_conflictarray=(char **)(malloc(sizeof(char *)*(int_h_progcount+1)));

		APL_MALLOC_FAIL(chr_l_conflictarray)

		for(i=0;i<int_h_progcount;i++)
			chr_l_conflictarray[i]=NULL;

		chr_l_conflictarray[int_h_progcount]=NULL;

		EXEC SQL DECLARE conf_Cursor CURSOR FOR
		SELECT MISMATCH FROM SYS_BATCH_CNTRL
		WHERE PROCESS_NAME=:p_progname;

		IS_ANY_ORA_ERROR

		EXEC SQL OPEN conf_Cursor;
		IS_ANY_ORA_ERROR

		for(i=0;i<int_h_progcount;i++)
		{
			EXEC SQL FETCH conf_Cursor INTO :chr_h_checkthisprogram;
			IS_ANY_ORA_ERROR
			chr_l_conflictarray[i]=(char *)(malloc(sizeof(char *)*(strlen(chr_h_checkthisprogram)+1)));
			APL_MALLOC_FAIL(chr_l_conflictarray[i])
			strcpy(chr_l_conflictarray[i],chr_h_checkthisprogram);
		}

		chr_l_conflictarray[int_h_progcount]=NULL;

		EXEC SQL CLOSE pred_Cursor;
		IS_ANY_ORA_ERROR

		#ifdef SYS_DEBUG
			for(i=0;chr_l_conflictarray[i];i++)
				printf("%s\n",chr_l_conflictarray[i]);
		#endif

		int_funcreturnstatus=CO_Pro_ChkConflicts(	chr_l_conflictarray,
															chr_l_sysdate_a,
															&int_returnflag,
															l_debug_info_ptr,
															p_intl_env_datastruct_h);
	
		if(int_funcreturnstatus==APL_FAILURE)
			APL_GOBACK_FAIL

		if(!int_returnflag)
		{
			sprintf(chr_errmsg,"A Conflict program is running\n");
			CO_ProcMonitor(APL_OUT_FILE,chr_errmsg,NULL,p_intl_env_datastruct_h);
			*int_p_funcreturnstate= S_CONFLICT;
			int_deleteit=1;

			APL_GOBACK_SUCCESS
		}

		int_funcreturnstatus=CO_Pro_ChkPredecessors(	chr_l_predecessorarray,
																chr_l_sysdate_a,
																&int_returnflag,
																l_debug_info_ptr,
																p_intl_env_datastruct_h);

		if(int_funcreturnstatus==APL_FAILURE)
			APL_GOBACK_FAIL

		if(!int_returnflag)
		{
			sprintf(chr_errmsg,"PRE_PROCESS not executed as yet\n");
			CO_ProcMonitor(APL_OUT_FILE,chr_errmsg,NULL,p_intl_env_datastruct_h);
			*int_p_funcreturnstate=S_PREDECESSOR;
			int_deleteit=1;
			APL_GOBACK_SUCCESS
		}

	
		if(p_funcparam[0] == 'U') 
		{
			#ifdef SYS_DEBUG
				printf("Starting h_file upload\n");
			#endif

			switch ( p_file_type)
			{
				case h_typeof_upldfile:
				{
					if ( CO_ReadToken(chr_finifile,"INTL_UPL_PATH",chr_my_report,l_debug_info_ptr) == APL_FAILURE)
						APL_GOBACK_FAIL

					break;
				}

				default :
				{
					APL_GOBACK_FAIL
				}
			}

			

			strcpy(orig_file_name,p_file_name);
			for (chr_cur_ptr=orig_file_name;chr_cur_ptr <orig_file_name+strlen(orig_file_name);chr_cur_ptr++)
			{
				if ( islower(*chr_cur_ptr) )
				{
					upp_file_name[i]=_toupper(*chr_cur_ptr);
				}
				else
				{
					upp_file_name[i]=*chr_cur_ptr;
				}
				i++;
			}

			if ( ( f_my_report=fopen(strcat(chr_my_report,upp_file_name),"w") ) == NULL)
			{
				CO_InsertErr(l_debug_info_ptr, ERR_FILE_NOTFND, p_file_name,NULL, NULL, __LINE__, __FILE__);
				APL_GOBACK_FAIL
			}

			#ifdef SYS_DEBUG
				printf("going to start h_file upload\n");
			#endif

			while (true)
			{
				(p_data.pull)(p_data.state, page_buff, APL_PAGE_SIZE, &element_count);
				if (element_count == 0) break;
				fwrite(page_buff, sizeof(char), element_count, f_my_report);
			}

			fclose(f_my_report);

		} 

		if ( CO_ReadToken(chr_finifile,"INTL_PROG_PATH",chr_sesamexecdir,l_debug_info_ptr) == APL_FAILURE)
			APL_GOBACK_FAIL

		/* Changes done by Sana for Connection Time-out [start] */
		EXEC SQL SELECT 1 into :g_int_dummy_var FROM DUAL;
		IS_ANY_ORA_ERROR;
		/* Changes done by Sana for Connection Time-out [end] */
		
		waitpid(-1,NULL,WNOHANG);
	
		if((int_l_chpid=fork())==-1)
		{
			fprintf(APL_OUT_FILE,"Cannot fork");
			APL_GOBACK_FAIL
		}

		if(int_l_chpid)
		{
			EXEC SQL VAR chr_l_sysdate_a IS STRING;
			EXEC SQL VAR p_intl_env_datastruct_h->processtion IS STRING;

			EXEC SQL UPDATE SYS_BATCHPROC
			SET PROC_ID=:int_l_chpid,
			PROC_ENDFLG='N',
			START_DATE=:chr_l_sysdate_a,
			PROCESS_DESC=:p_intl_env_datastruct_h->processtion,
			USR=:p_intl_env_datastruct_h->usr
			WHERE PROCESS_NAME=:p_progname
			AND PROC_INIT     =:chr_p_key_a
			AND TO_CHAR(TO_DATE(START_DATE),'ddmmyy')=TO_CHAR(TO_DATE(:chr_l_sysdate_a),'ddmmyy')
			AND STATUS='started';

			IS_ANY_ORA_ERROR

			

			EXEC SQL INSERT INTO AUDIT_LOG
			VALUES (	:p_intl_env_datastruct_h->usr,
						:p_intl_env_datastruct_h->h_mode,
						:p_intl_env_datastruct_h->processtion,
						:p_intl_env_datastruct_h->auth_req,
						:p_intl_env_datastruct_h->subprocess,
						:p_intl_env_datastruct_h->h_process,
						:chr_l_sysdate_a,
						NULL );
			IS_ANY_ORA_ERROR

			if(int_l_howtostart==S_START)
			{
				sprintf(chr_errmsg,"Successfully started %s",p_progname);
				CO_ProcMonitor(APL_OUT_FILE,chr_errmsg,NULL,p_intl_env_datastruct_h);
				EXEC SQL COMMIT;
				IS_ANY_ORA_ERROR
			}
			else
			{
				sprintf(chr_errmsg,"Successfully restarted %s",p_progname);
				CO_ProcMonitor(APL_OUT_FILE,chr_errmsg,NULL,p_intl_env_datastruct_h);
			}

			APL_GOBACK_SUCCESS
		}
		else
		{
			
			strcat(chr_sesamexecdir,p_progname);
			#ifdef SYS_DEBUG
				printf("The program is at %s\n",p_progname);
			#endif
			execlp(chr_sesamexecdir,
					p_progname,
					chr_p_key_a,
					chr_l_sysdate_a,
					p_intl_env_datastruct_h->usr,
					p_intl_env_datastruct_h->h_mode,
					p_intl_env_datastruct_h->processtion,
					p_intl_env_datastruct_h->auth_req,
					p_intl_env_datastruct_h->subprocess,
					p_intl_env_datastruct_h->h_process,
					p_funcparam,
					NULL);
			sprintf(chr_errmsg,"Could not execute the program %s",p_progname);
			CO_ProcMonitor(APL_OUT_FILE,chr_errmsg,NULL,p_intl_env_datastruct_h);
			int_l_created=0;
			exit(-1);
		} 
	}
	else
	{
		
		CO_ProcMonitor(APL_OUT_FILE,"System not in ONLINE",NULL,p_intl_env_datastruct_h);
		APL_GOBACK_FAIL
	}

	RETURN_SUCCESS:
	{
		fclose(chr_finifile);
		printf("In the return block\n");
		if(chr_l_predecessorarray)
			CO_Pro_FreeArray(chr_l_predecessorarray);
	
		if(chr_l_conflictarray)
			CO_Pro_FreeArray(chr_l_conflictarray);

		printf("Returned from FreeArrays\n");
		printf("Going to commit\n");
		fflush(stdout);
		EXEC SQL COMMIT ;
		printf("Returning successfully from DL_Pro_AutoBrkSetl\n");
		return APL_SUCCESS;
	}

	RETURN_FAILURE:
	{
		if(chr_l_predecessorarray)
			CO_Pro_FreeArray(chr_l_predecessorarray);
		
		if(chr_l_conflictarray)
			CO_Pro_FreeArray(chr_l_conflictarray);
		
		if(int_l_created)
		{
			EXEC SQL DELETE SYS_BATCHPROC
			WHERE PROCESS_NAME=:p_progname
			AND   PROC_INIT     =:chr_p_key_a
			AND   STATUS  ='started'
			AND   START_DATE=:chr_l_sysdate_a;
			EXEC SQL COMMIT;
		}

		CO_ProcMonitor(APL_OUT_FILE,NULL,l_debug_info_ptr,p_intl_env_datastruct_h);
		EXEC SQL COMMIT ;
		fclose(chr_finifile);
		return APL_FAILURE;
	}

}

