/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to 
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or 
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         :			Maintenance
 *
 * File Name           :			RtvInstrFldVal.pc
 *
 * Description         :			This file contains functions which retrieves
 *											data for Instrument depending on 
 *											Fields in Instrument.
 *
 *           
 *
 *            Version Control Block
 *
 * Date        Version		Author          Description			RFS No.
 * ---------   --------	 ---------------  -------------------  ------------
 * 10/10/2005	 1.0			Smita Bhat			New File				HDFCMT_003	
 *
 *********************************************************************/

#include <CO_HostStructdef.h>

EXEC SQL INCLUDE sqlca;

/******************************************************************************************
 *                                                                                        *
 * Function Name         : CR_Rtv_InstrChrVal                                             *
 *                                                                                        *
 * Description           : This Function accepts Instrument Code, Link Value, 				*
 *                         and debug pointer.                                             *
 *                         returns Success/Failure depending upon validn.                 *
 *                                                                                        *
 *                                                                                        *
 * Parameter                  Type                       Mode     Description             *
 * ------------               --------                   -----    ---------------         *
 * p_instr_code               char *                     I        Instrument Code Value   *
 *                                                                		                  *
 * p_link_val	               char *                     I        Field to be selected    *
 *                                                                			               *
 * p_field_val	               char *                     I       	Value selected from 		* 
 *                                                                Table 		            *
 * l_debug_info_ptr     DEBUG_INFO_STRUCT_H ** I                  Debug Info Structure    *
 *                                                                                        *
 * Return Values        :                                                                 *
 *                                                                                        *
 *  APL_SUCCESS  - SUCCESS                                                                *
 *  APL_FAILURE  - FAILURE                                                                *
 *  p_field_value - Field Value selected
 *                                                                                        *
 ******************************************************************************************/ 
int CR_Rtv_InstrChrVal(	char *p_instr_code,
								char *p_link_val,
								char *p_field_val,
								DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;

	struct sqlca		sqlca;
	char					chr_h_field_val[100];
	short					i_field_val;
	char					chr_l_buf[BUFFER_LEN];

	EXEC SQL VAR chr_h_field_val IS STRING;
	
	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE	:my_ctx_local;
	#endif

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Rtv_InstrChrVal \n",NULL,NULL);
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Instrument h_code is |%s| \n",p_instr_code);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
		
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Field name is |%s| \n",p_link_val);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
	}

	memset(chr_h_field_val,APL_NULL_CHAR,sizeof(chr_h_field_val));

	if (strcmp(p_link_val, "ROWID") == 0)
	{
		EXEC SQL SELECT ROWID
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE instr_code = RTRIM(:p_instr_code)
		FOR UPDATE OF access_stamp;
	}

	if (strcmp(p_link_val, "FEROWID") == 0)
	{
		EXEC SQL SELECT ROWID
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE instr_code = RTRIM(:p_instr_code);
	}

	if (strcmp(p_link_val, "regbrind") == 0)
	{
		EXEC SQL SELECT REG_BR_IND
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE instr_code = RTRIM(:p_instr_code);
	}
	
	if (strcmp(p_link_val, "typeofinstr") == 0)
	{
		EXEC SQL SELECT INSTR_TYPE
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE instr_code = RTRIM(:p_instr_code);
	}
	
	if (strcmp(p_link_val, "issue_dt") == 0)
	{
		EXEC SQL SELECT ISSUE_DATE
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE instr_code = RTRIM(:p_instr_code);
	}
	
	if (strcmp(p_link_val, "locncode") == 0)
	{
		EXEC SQL SELECT LOCATION_CD
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE instr_code = RTRIM(:p_instr_code);
	}
	
	if (strcmp(p_link_val, "int_acctyp") == 0)
	{
		EXEC SQL SELECT INT_ACCTYP
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE instr_code = RTRIM(:p_instr_code);
	}
	
	if (strcmp(p_link_val, "prodtype") == 0)
	{
		EXEC SQL SELECT prod_class
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE instr_code = RTRIM(:p_instr_code);
	}
	
	if (strcmp(p_link_val, "ccycode") == 0)
	{
		EXEC SQL SELECT currency_cd
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE instr_code = RTRIM(:p_instr_code);
	}
	
	if (strcmp(p_link_val, "instr_parent") == 0)
	{
		EXEC SQL SELECT INSTR_PARENT
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE instr_code = RTRIM(:p_instr_code);
	}
	
	if (strcmp(p_link_val, "clscode") == 0)
	{
		EXEC SQL SELECT CLASSCD
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE instr_code = RTRIM(:p_instr_code);
	}
	
	if (strcmp(p_link_val, "access_stamp") == 0)
	{
		EXEC SQL SELECT ACCESS_STAMP
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE instr_code = RTRIM(:p_instr_code);
	}
	
	if (strcmp(p_link_val, "listedflg") == 0)
	{
		EXEC SQL SELECT LISTED_IND
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE instr_code = RTRIM(:p_instr_code);
	}
	if (strcmp(p_link_val, "allowdf") == 0)
	{
		EXEC SQL SELECT ALLOW_DF
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE instr_code = RTRIM(:p_instr_code);
	}
	if (strcmp(p_link_val, "allowrf") == 0)
	{
		EXEC SQL SELECT ALLOW_RF
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE instr_code = RTRIM(:p_instr_code);
	}
	if (strcmp(p_link_val, "allowdvp") == 0)
	{
		EXEC SQL SELECT ALLOW_DVP
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE instr_code = RTRIM(:p_instr_code);
	}
	if (strcmp(p_link_val, "allowrvp") == 0)
	{
		EXEC SQL SELECT ALLOW_RVP
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE instr_code = RTRIM(:p_instr_code);
	}
	
	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"INSTRUMENT",APL_NULL_STRING,APL_NULL_STRING)

	if (i_field_val == -1)
		strcpy((char *)p_field_val, APL_NULL_STRING);
	else	
		strcpy((char *)p_field_val, chr_h_field_val);

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Rtv_InstrChrVal With Success\n",NULL,NULL);
		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Rtv_InstrChrVal With Errors\n",NULL,NULL);
		return(APL_FAILURE);
	}
}

/******************************************************************************************
 *                                                                                        *
 * Function Name         : CR_Rtv_InstrNumVal                                             *
 *                                                                                        *
 * Description           : This Function Accepts Instrument Code, Indicator Value         *
 *                         and debug pointer.                                             *
 *                         returns Success/Failure depending upon validn.                 *
 *                                                                                        *
 *                                                                                        *
 * Parameter                  Type                       Mode     Description             *
 * ------------               --------                   -----    ---------------         *
 * p_instr_code                char *                     I       Instrument Code         *
 *                                                                		                  *
 * p_ind       			       char *                     I       Indicator Value         *
 *                                                                			               *
 * int_p_retval                double *                   I       Return Value   			*
 *																														*
 * l_debug_info_ptr     DEBUG_INFO_STRUCT_H ** I                  Debug Info Structure    *
 *                                                                                        *
 * Return Values        :                                                                 *
 *                                                                                        *
 *  APL_SUCCESS  - SUCCESS                                                                *
 *  APL_FAILURE  - FAILURE                                                                *
 *  int_p_retval - Return Value
 *                                                                                        *
 ******************************************************************************************/

int CR_Rtv_InstrNumVal(		char *p_instr_code, 
									char *p_ind, 	
									double *int_p_retval, 
									DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca sqlca;
	char         chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	char         chr_h_field_val[100];
	short			 i_field_val;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
								"Entered Function CR_Rtv_InstrNumVal\n",
								NULL,
								NULL);
		
		memset( chr_l_buf, NULL, BUFFER_LEN );
		
		sprintf(		chr_l_buf, 
						"The Instrument is : |%s|\n", p_instr_code);

		CO_ProcMonitor(	APL_OUT_FILE, 
								chr_l_buf,	
								NULL,
								NULL);

		memset( chr_l_buf, NULL, BUFFER_LEN );

		sprintf(		chr_l_buf, 
						"The Indicator is : |%s|\n", p_ind);

		CO_ProcMonitor(	APL_OUT_FILE, 
								chr_l_buf,	
								NULL,
								NULL);
	}

	sqlca.sqlcode = 0;

	if (!strcmp(p_ind, "nomval"))
		EXEC SQL SELECT NOMINAL_VALUE INTO :int_p_retval 
		FROM MT_INSTRUMENT 
		WHERE instr_code = RTRIM(:p_instr_code);

	if (sqlca.sqlcode != -1405)
  { // AIX - Warnings
		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_INSTR_NOTFND,
															p_instr_code,
															APL_NULL_STRING,
															APL_NULL_STRING);
  }
	
	if (strcmp(p_ind, "min_fmt_dl_qty") == 0)
	{
		EXEC SQL SELECT NVL(MIN_FMT_DL_QTY,0) 
		INTO :int_p_retval
		FROM MT_INSTRUMENT 
		WHERE instr_code = RTRIM(:p_instr_code);

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_INSTR_NOTFND,p_instr_code,APL_NULL_STRING,APL_NULL_STRING)

	}

	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Rtv_InstrNumVal with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);
 
   RETURN_FAILURE :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Rtv_InstrNumVal with errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);

}
