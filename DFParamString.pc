/************************************************************************************************************
*                 COPYRIGHT NOTICE
*   
*   
*                 Copyright @  2005 by Polaris Software Lab Ltd.
*   
*                 All rights reserved.
*                 No part of this document may be reproduced, stored in a retrieval system,
*                 translated, transcribed, or transmitted in any form or by any means,
*                 without the prior written permission of Polaris Software Lab Limited ('Polaris').
*          
* ***********************************************************************************************************/

/**********************************************************************
* *                                                                    *
*
* * Project Name        : INTELLECT CUSTODY                            *
* * Module Name         : DEAL  PROCESSING                             *
* * File Name           : DFParamString.pc                                  *
* *                                                                    *
* * Description         : This source file contains the function which *
*                         is used to process 54x and 515 and creates paramstring              *
*                         *                                                                    *
*                         * Screens Used        : None
*
* Reports Used        : None                                         *
*                                                                    *
*                                                                    *
* Notes               :                                              *
*                                                                    *
*            Version Control Block                                   *
*                                                                    *
* Date       Version       Author               Description          *
* ---------  --------  ---------------  ---------------------------- *
*                                                                    *
*             1.0                            New File                *
*                                                                    *
* List of functions   :                                              *
*                                                                    *
* Function Name          Description                                 *
* ------------------------------------------------------------------ *
	                        

************************************************************************************************************/ /* Extra / character removed for AIX Migration Changes*/

  
#include "string.h"
#include "CR_Common.h"
#include "Intellect_Interface.h"
#include "Intellect_Common.h"
#include "Df_Fe.h"

EXEC SQL INCLUDE SQLCA;

#define DEFORMAT_IF_DEBUG if ( 1 )
#define SETL_TYPE_MSG 6 
//AIX Warning Removal - Unused variables commented in the file
 //AIX-Warnings Removal
extern char g_addr_frm[] ;
extern char g_addr_to[];
int SeparateData(char *, char, char *, char *);	 //AIX -change	
int DynamicQuery(char *p_insql, char *p_opstr, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	
	printf("In dynamic qry%s\n",p_insql);
	short i_result = 0;

        EXEC SQL BEGIN DECLARE SECTION;
        char l_result[200] = APL_NULL_STRING;
        EXEC SQL VAR l_result IS STRING;
        EXEC SQL END DECLARE SECTION;

        memset(l_result, '\0', 200);

        EXEC SQL PREPARE sql_stmt FROM :p_insql;
	EXEC SQL DECLARE sql_cur CURSOR FOR sql_stmt;
        EXEC SQL OPEN sql_cur;
	IS_ANY_ORA_ERROR
        
	EXEC SQL FETCH sql_cur into :l_result:i_result;
        IS_ANY_ORA_ERROR
	
	strcpy(p_opstr, l_result);
        
	EXEC SQL CLOSE sql_cur;
	IS_ANY_ORA_ERROR
        
	printf("The output is %s\n", l_result);
	APL_GOBACK_SUCCESS


RETURN_SUCCESS:
	return APL_SUCCESS;

RETURN_FAILURE:
	return APL_FAILURE;
}



int CConcatValDescriptn(
char            *chr_p_val,
char            *p_description,
char            *p_ret_value
)
{
	char        l_description[8001]      = APL_NULL_STRING;
  	char        *l_description1          = APL_NULL_STRING;
	char        l_istr[8001]             = APL_NULL_STRING;


	DEFORMAT_IF_DEBUG
        {
      		printf("\n\n Entering CConcatValDescriptn function");
      		printf("\n\n Value is : | %s | Description is | %s |",chr_p_val,p_description);
   	}

        strcpy(l_istr, chr_p_val);
        strcpy(l_description,p_description);

        while(strstr(l_description,"\r") !=APL_NULL_CHAR)
        {
                strtok_r(l_description,"\r",&l_description1);
                strcat(l_description,l_description1);
                printf("\n\n Description1is | %s |",l_description1);
        }

        while(strstr(l_description,"\n") !=APL_NULL_CHAR)
        {
                strtok_r(l_description,"\n",&l_description1);
                strcat(l_description,l_description1);
        }
        strcat(l_istr,l_description);


        printf("\n\nValue is || %s || ",l_istr);

        if(strlen(l_istr)==0)
                APL_GOBACK_FAIL

        strcpy(p_ret_value, l_istr);
        APL_GOBACK_SUCCESS

RETURN_SUCCESS:
        DEFORMAT_IF_DEBUG
        {
                printf("\n\n Exiting CConcatValDescriptn processtion with Success");
        }
        return APL_SUCCESS;

RETURN_FAILURE:
        DEFORMAT_IF_DEBUG
        {
                printf("\n\n Exiting CConcatValDescriptn processtion with Failure");
        }
        return APL_FAILURE;
}


int CatData_STATIC(char *chr_p_str, char *p_lbl, char* chr_p_val)
{
    	char int_l_temp[2000] = APL_NULL_STRING;


	DEFORMAT_IF_DEBUG
    	{
		printf("Entering CatData_STATIC processtion\n");
    	}	


	strcpy(int_l_temp, APL_NULL_STRING);
    	sprintf(int_l_temp, "%c%s%c%s", DATA_FIELD_SEPRTR, p_lbl,DATA_VALUE_SEPRTR, chr_p_val);
	strcat(chr_p_str, int_l_temp);

    	DEFORMAT_IF_DEBUG
	{
		printf("Leaving CatData_STATIC processtion\n");
    	}	

	return APL_SUCCESS;
}

int CatData_MAPVAL(char *chr_p_str, char *p_msg_name, MESSAGE_STRUCT **p_message_list, 
char *p_lbl, char* p_tag, char* p_qual, char* p_sequence, char *p_block_no, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	int  i				= 0;
	char chr_l_val[71]			= APL_NULL_STRING;
	//char chr_l_param_val[11]		= APL_NULL_STRING;
	char int_l_temp[100] 		= APL_NULL_STRING;
	char l_qual[201]		= APL_NULL_STRING;
	char l_qual_first_part[10]	= APL_NULL_STRING;
	char l_qual_second_part[201]	= APL_NULL_STRING;
	char l_code[11]	 	        = APL_NULL_STRING;
   char chr_l_tag[101]              	= APL_NULL_STRING;
	char l_tag_first_part[10]       = APL_NULL_STRING;
	char l_tag_second_part[101]     = APL_NULL_STRING;
	char l_block_no[11]		= APL_NULL_STRING;
	char l_msg_name[7]		= APL_NULL_STRING; 
	int	l_int_ret		= 0;	
	char p = '$';	
	char *pp;
/*	char *p1;
	char *p2;
*/	
	EXEC SQL BEGIN DECLARE SECTION;

	struct sqlca sqlca;
	EXEC SQL VAR l_code IS STRING;
	EXEC SQL VAR l_msg_name IS STRING;

	EXEC SQL END DECLARE SECTION;
	printf("\n MEssage  Name = |%s | ",p_msg_name);
	strcpy(l_qual, p_qual);
	strcpy(chr_l_val,APL_NULL_STRING);
	strcpy(l_code,APL_NULL_STRING);
	strcpy(chr_l_tag, p_tag);
	strcpy(l_block_no, p_block_no);
	strcpy(l_msg_name, p_msg_name);

	

	if(strchr(l_qual, '$') != NULL)
	{
		while(strchr(l_qual, '$') != NULL)
		{
			strcpy(pp, chr_l_tag);
			
			/*l_int_ret = SeparateData(pp, &p, p1, p2);*/  
			l_int_ret = SeparateData(l_qual, '$', l_qual_first_part, l_qual_second_part);		
			//l_int_ret = SeparateData(chr_l_tag, &p, l_tag_first_part, l_tag_second_part);  //AIX Warning Removal
			l_int_ret = SeparateData(chr_l_tag, p, l_tag_first_part, l_tag_second_part);  

			//if(i = I_GetVal(p_message_list, l_tag_first_part, l_qual_first_part, chr_l_val, p_sequence, l_block_no) == 1)//AIX Warning Removal
			if((i = I_GetVal(p_message_list, l_tag_first_part, l_qual_first_part, chr_l_val, p_sequence, l_block_no)) == 1)
				break;
			strcpy(l_qual, l_qual_second_part);
			strcpy(chr_l_tag, l_tag_second_part);
		}
								
		if(i == 0)
		{
			I_GetVal(p_message_list, chr_l_tag,l_qual,chr_l_val,p_sequence, l_block_no);	
		}
	}
	else
	{
	       I_GetVal(p_message_list, p_tag, l_qual, chr_l_val, p_sequence, l_block_no);
	}

	
	EXEC SQL SELECT proc_data_val INTO :l_code FROM dfcodemap WHERE h_code=:chr_l_val and swift_msg_no = :l_msg_name;
	IS_ANY_ORA_ERROR

	strcpy(int_l_temp,APL_NULL_STRING);
	sprintf(int_l_temp,"%c%s%c%s",DATA_FIELD_SEPRTR,p_lbl,DATA_VALUE_SEPRTR,l_code);
	strcat(chr_p_str,int_l_temp);

	APL_GOBACK_SUCCESS

RETURN_SUCCESS:
	return APL_SUCCESS;

RETURN_FAILURE:
	return APL_FAILURE;
}


int CatData_DIRECT(char *chr_p_str, MESSAGE_STRUCT **p_message_list, char *p_lbl,
 char* p_tag, char* p_qual, char* p_sequence, char *p_block_no, char *chr_fmt, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	int  i				= 0;
	char chr_l_val[71]			= APL_NULL_STRING;
	char l_val_result[71]		= APL_NULL_STRING;
	char l_first_lbl[70]		= APL_NULL_STRING;
	char l_second_lbl[70]		= APL_NULL_STRING;
	char l_first_part[70]		= APL_NULL_STRING;
        char l_first_part_result[70]    = APL_NULL_STRING;
	char l_first_part_1[70]		= APL_NULL_STRING;
	char l_first_part_2[70]		= APL_NULL_STRING;
	char l_second_part[70]		= APL_NULL_STRING;
	char l_second_part_result[70]   = APL_NULL_STRING;
	char l_second_part_1[70]	= APL_NULL_STRING;
	char l_second_part_2[70]	= APL_NULL_STRING;
	char int_l_temp[1000] 		= APL_NULL_STRING;
	char l_qual[201]		= APL_NULL_STRING;
	char l_qual_first_part[10]	= APL_NULL_STRING;
	char l_qual_second_part[201]	= APL_NULL_STRING;
	char l_first_quantity_val[30]	= APL_NULL_STRING; 
	char l_second_quantity_val[30]	= APL_NULL_STRING;
        char chr_l_tag[101]        	        = APL_NULL_STRING;
	char l_tag_first_part[10]       = APL_NULL_STRING;
	char l_tag_second_part[101]     = APL_NULL_STRING;
	char l_val_typ[51]		= APL_NULL_STRING;
	char l_val_typ_first_part[3]	= APL_NULL_STRING;
	char l_val_typ_second_part[51]	= APL_NULL_STRING;
	char l_block_no[51]		= APL_NULL_STRING;
	char l_temp_cur[3]              = APL_NULL_STRING;
        char l_temp_ql[5]               = APL_NULL_STRING;
        char l_first_account_val[30]    = APL_NULL_STRING;
        char l_second_account_val[30]   = APL_NULL_STRING;
	char l_description[8001]	= APL_NULL_STRING;
	char l_ret_val[8001]		= APL_NULL_STRING;
	char l_nominal_val[25]		= APL_NULL_STRING;
	char l_isin_val[13]		= APL_NULL_STRING;
	char l_data_temp_str[100]	= APL_NULL_STRING;
	float l_data_result		= 0.0;
       	int	l_int_ret		= 0;
	
	EXEC SQL BEGIN DECLARE SECTION;

        struct sqlca sqlca;

        EXEC SQL VAR l_first_part IS STRING;
        EXEC SQL VAR l_first_part_result IS STRING;
        EXEC SQL VAR l_second_part IS STRING;
        EXEC SQL VAR l_second_part_result IS STRING;
	EXEC SQL VAR chr_l_val IS STRING;
	EXEC SQL VAR l_val_result IS STRING;		
	EXEC SQL VAR l_nominal_val IS STRING;
	EXEC SQL VAR l_isin_val IS STRING;

        EXEC SQL END DECLARE SECTION;

        DEFORMAT_IF_DEBUG
	{
		printf("Entering CatData_DIRECT processtion\n");
	}


	strcpy(chr_l_val,APL_NULL_STRING);
	strcpy(int_l_temp,APL_NULL_STRING);
	strcpy(l_first_lbl,APL_NULL_STRING);
	strcpy(l_second_lbl,APL_NULL_STRING);
	strcpy(l_first_part,APL_NULL_STRING);
	strcpy(l_first_part_1,APL_NULL_STRING);
	strcpy(l_first_part_2,APL_NULL_STRING);
	strcpy(l_second_part,APL_NULL_STRING);
	strcpy(l_second_part_1,APL_NULL_STRING);
	strcpy(l_second_part_2,APL_NULL_STRING);
	strcpy(l_first_part_result, APL_NULL_STRING);
	strcpy(l_second_part_result, APL_NULL_STRING);
	strcpy(l_val_result, APL_NULL_STRING);
	strcpy(l_description, APL_NULL_STRING);
	strcpy(l_ret_val, APL_NULL_STRING);

	strcpy(l_qual, p_qual);
	strcpy(chr_l_tag, p_tag);
	strcpy(l_val_typ, chr_fmt);
	strcpy(l_block_no, p_block_no);

	
	
	if(strchr(l_qual, '$') != NULL)
	{
		while(strchr(l_qual, '$') != NULL)
		{
			l_int_ret = SeparateData(l_qual, '$', l_qual_first_part, l_qual_second_part);
			l_int_ret = SeparateData(chr_l_tag, '$', l_tag_first_part, l_tag_second_part);
			l_int_ret = SeparateData(l_val_typ, '$', l_val_typ_first_part, l_val_typ_second_part); 
			if (strlen(l_block_no)==0)
				i = I_LocateVal(p_message_list,l_tag_first_part,l_qual_first_part,chr_l_val,p_sequence);
			else
				i = I_GetVal(p_message_list, l_tag_first_part, l_qual_first_part, chr_l_val, p_sequence, l_block_no);
			if (i==1)
			{
				strcpy(l_qual, l_qual_first_part);
				strcpy(chr_l_tag, l_tag_first_part);
				strcpy(l_val_typ, l_val_typ_first_part);
				break;
			}
			strcpy(l_qual, l_qual_second_part);
			strcpy(chr_l_tag, l_tag_second_part);
			strcpy(l_val_typ, l_val_typ_second_part);
		}

		if(i == 0)
		{
			if (strlen(l_block_no)==0)
				i = I_LocateVal(p_message_list,chr_l_tag,l_qual,chr_l_val,p_sequence);
			else
				i = I_GetVal(p_message_list,chr_l_tag,l_qual,chr_l_val,p_sequence, l_block_no);	
		}
	}
	else
	{
			if (strlen(l_block_no)==0)
				i = I_LocateVal(p_message_list,chr_l_tag,l_qual,chr_l_val,p_sequence);
			else
	      	i = I_GetVal(p_message_list, chr_l_tag, l_qual, chr_l_val, p_sequence, l_block_no);
	}
	

	strcpy(chr_fmt, l_val_typ);
	
	DEFORMAT_IF_DEBUG
	{
		printf("The qual : %s, msg_tag : %s, seq : %s, int_val :%s, blcono : %s\n , val_typ: %s", l_qual, chr_l_tag, p_sequence, chr_l_val, l_block_no, chr_fmt);
	}
	

	if ( strcmp(chr_fmt,"ST") == 0 )
	{
		sprintf(int_l_temp,"%c%s%c%s",DATA_FIELD_SEPRTR,p_lbl,DATA_VALUE_SEPRTR,chr_l_val);
	}
	else if ( strcmp(chr_fmt,"DD") == 0)
	{
		if (strchr(p_lbl,'/') != NULL)   
		{	
			i = SeparateData (p_lbl,'/',l_first_lbl,l_second_lbl);
			i = SeparateData (chr_l_val,'/',l_first_part,l_second_part); 

			DEFORMAT_IF_DEBUG
			{			
				printf("\n ************* Inside slash lbl is |%s|, int_val is |%s| *****\n",p_lbl,chr_l_val);
				printf("\n ************* Inside slash lbl_1 is |%s|, lbl_2 is |%s| *****\n",l_first_lbl,l_second_lbl);
				printf("\n ************* Inside slash val_1 is |%s|, val_2 is |%s| *****\n",l_first_part,l_second_part);
			}
			
			/*Changes done by Tushar for ISKB_9944 for Swift 541 because 98C tag does not support date/time format Starts*/
					if(strlen(l_first_part) > 8 || strlen(l_second_part) > 8)
					{
						EXEC SQL SELECT SUBSTR(:l_first_part,1,8),SUBSTR(:l_second_part,1,8) into :l_first_part,:l_second_part from DUAL;
						IS_ANY_ORA_ERROR
					}
			/*Changes done by Tushar for ISKB_9944 for Swift 541 because 98C tag does not support date/time format Ends*/
					
			strcat(l_first_part, "120000");
			strcat(l_second_part, "120000");
			EXEC SQL SELECT TO_CHAR(TO_DATE(:l_first_part, 'yyyymmddhh24miss')) into :l_first_part_result from dual;
			IS_ANY_ORA_ERROR
			EXEC SQL SELECT TO_CHAR(TO_DATE(:l_second_part, 'yyyymmddhh24miss')) into :l_second_part_result from dual;
			IS_ANY_ORA_ERROR
			sprintf(int_l_temp, "%c%s%c%s%c%s%c%s", DATA_FIELD_SEPRTR, l_first_lbl, DATA_VALUE_SEPRTR, l_first_part_result, DATA_FIELD_SEPRTR, l_second_lbl, DATA_VALUE_SEPRTR,l_second_part_result); 
	     
     		}
     		else
     		{
			if(strcmp(chr_l_val, APL_NULL_STRING))
			{
					/*Changes done by Tushar for ISKB_9944 for Swift 541 because 98C tag does not support date/time format Starts*/
					if(strlen(chr_l_val) > 8)
					{
						EXEC SQL SELECT SUBSTR(:chr_l_val,1,8) into :chr_l_val from DUAL;
						IS_ANY_ORA_ERROR
					}
					/*Changes done by Tushar for ISKB_9944 for Swift 541 because 98C tag does not support date/time format Ends*/
					
              		strcat(chr_l_val, "120000");			
	      			EXEC SQL SELECT TO_CHAR(TO_DATE(:chr_l_val, 'yyyymmddhh24miss')) into :l_val_result from dual;
	      			IS_ANY_ORA_ERROR
			}
			else
			{
				strcpy(l_val_result, chr_l_val);	
			}

			sprintf(int_l_temp, "%c%s%c%s",DATA_FIELD_SEPRTR,p_lbl,DATA_VALUE_SEPRTR,l_val_result);
   		}
	}
   else if ( strcmp(chr_fmt,"DT") == 0)
   {
		DEFORMAT_IF_DEBUG	
		{
	      		printf("\n ************* Inside DT lbl is |%s|, int_val is |%s| *****\n",p_lbl,chr_l_val); 
		}

		if (strchr(p_lbl,'/') != NULL)   
		{	
		      	i = SeparateData (p_lbl,'/',l_first_lbl,l_second_lbl);
      		   i = SeparateData (chr_l_val,'/',l_first_part,l_second_part);

	      	      DEFORMAT_IF_DEBUG
	     	      {
		     		printf("\n ************* Inside slash lbl is |%s|, int_val is |%s| *****\n",p_lbl,chr_l_val);
		     		printf("\n ************* Inside slash lbl_1 is |%s|, lbl_2 is |%s| *****\n",l_first_lbl,l_second_lbl);
			        printf("\n ************* Inside slash val_1 is |%s|, val_2 is |%s| *****\n",l_first_part,l_second_part);
	              }	
	
 	              EXEC SQL SELECT TO_CHAR(TO_DATE(:l_first_part, 'yyyymmddhh24miss')) INTO :l_first_part_result FROM DUAL;
 	              IS_ANY_ORA_ERROR
		      EXEC SQL SELECT TO_CHAR(TO_DATE(:l_second_part, 'yyyymmddhh24miss')) INTO :l_second_part_result FROM DUAL;
		      IS_ANY_ORA_ERROR	
                      sprintf(int_l_temp, "%c%s%c%s%c%s%c%s", DATA_FIELD_SEPRTR, l_first_lbl, DATA_VALUE_SEPRTR, l_first_part_result, DATA_FIELD_SEPRTR, l_second_lbl, DATA_VALUE_SEPRTR, l_second_part_result);		

      }
      else
      {
	     		DEFORMAT_IF_DEBUG
	     		{
		      		printf("\n ************* Inside NON slash lbl is |%s|, int_val is |%s| *****\n",p_lbl,chr_l_val);
		      		printf("\n ************* Inside NON slash lbl_1is |%s|, lbl_2 is |%s| *****\n",l_first_lbl,l_second_lbl);
	       	      		printf("\n ************* Inside NON slash val_1is |%s|, val_2 is |%s| *****\n",l_first_part,l_second_part);
	     		}
					
				if (strlen(chr_l_val) != 0)
				{		
	               	EXEC SQL SELECT TO_CHAR(TO_DATE(:chr_l_val, 'yyyymmddhh24miss')) INTO :l_val_result FROM DUAL;
	   	       	IS_ANY_ORA_ERROR 
				}
				sprintf(int_l_temp, "%c%s%c%s", DATA_FIELD_SEPRTR, p_lbl,DATA_VALUE_SEPRTR, l_val_result);
      }
	}
        else if ( strcmp(chr_fmt,"NU") == 0)
        {
	          ProcessNumber(p_lbl, chr_l_val, int_l_temp);
        }
      	else if( strcmp(chr_fmt,"CU") == 0)
      	{
		if(i)
		{
			if(strstr(chr_l_val,"/"))
			{
			 	l_int_ret = SeparateData(chr_l_val, '/', l_first_quantity_val, l_second_quantity_val);
				strcpy(chr_l_val, l_second_quantity_val);
			}
			if((strlen(chr_l_val) >=4) && (!isdigit(chr_l_val[3])))
				strncpy(l_temp_cur, chr_l_val+1, 3);
			else
				strncpy(l_temp_cur, chr_l_val, 3);
		
			l_temp_cur[3] = '\0';
		}
		sprintf(int_l_temp,"%c%s%c%s",DATA_FIELD_SEPRTR,p_lbl,DATA_VALUE_SEPRTR,l_temp_cur);
      	}
      	else if( strcmp(chr_fmt, "PR") ==0 )
      	{
		if(i)	
		{
			if(strstr(chr_l_val,"/"))
			{	
				l_int_ret = SeparateData(chr_l_val, '/', l_first_quantity_val, l_second_quantity_val);
				strcpy(chr_l_val, l_second_quantity_val);
			}
			printf("The chr_l_val is %s\n", chr_l_val);
			//printf("The string length is %d\n", strlen(chr_l_val)); CHanges done for AIX Migration
			printf("The string length is %d\n", (int)strlen(chr_l_val));
			printf("is it a digit %d\n", isdigit(chr_l_val[3]));
			if((strlen(chr_l_val) >= 4) && (!isdigit(chr_l_val[3])))
			{
				strcpy(chr_l_val, "-");
				strcat(chr_l_val, chr_l_val+4);
			}
			else
			{
				printf("It came here  111111\n/");
				strcpy(chr_l_val,chr_l_val+3);
			}	
			
		}
		ProcessNumber(p_lbl, chr_l_val, int_l_temp);
      	}
      	else if(strcmp(chr_fmt, "QT") == 0)
      	{
				l_int_ret = SeparateData(chr_l_val, '/', l_first_quantity_val, l_second_quantity_val);
		if(!strcmp(l_first_quantity_val, "FAMT"))
		{
	
			

			I_GetVal(p_message_list, ":35B:", "SEC_ISIN", l_isin_val, "B", "1");
			
			EXEC SQL SELECT NOMINAL_VALUE INTO :l_nominal_val FROM MT_INSTRUMENT WHERE instr_isin = :l_isin_val;
			IS_ANY_ORA_ERROR	

			strcpy(chr_l_val, l_second_quantity_val);
			ProcessNumber(p_lbl, chr_l_val, int_l_temp);	
			strcpy(l_data_temp_str,int_l_temp+strlen(p_lbl)+2);
			l_data_result = ( (float)atol(l_data_temp_str) ) / ( (float)atol(l_nominal_val) );
			sprintf(int_l_temp, "%c%s%c%.3f",DATA_FIELD_SEPRTR,p_lbl,DATA_VALUE_SEPRTR, l_data_result);
		}
		else 
		{
			if( strchr(l_second_quantity_val, ',')|| (l_second_quantity_val[0] == 'N'))
			{
				strcpy(chr_l_val, l_second_quantity_val);
				ProcessNumber(p_lbl, chr_l_val, int_l_temp);
			}
			else
			{
				sprintf(int_l_temp,"%c%s%c%s",DATA_FIELD_SEPRTR,p_lbl,DATA_VALUE_SEPRTR, l_second_quantity_val);
			}
		}
      	}
      	else if(strcmp(chr_fmt, "TP") == 0)
      	{
		l_int_ret = SeparateData(chr_l_val, '/', l_first_quantity_val, l_second_quantity_val);
		strcpy(int_l_temp, l_first_quantity_val);
		sprintf(int_l_temp,"%c%s%c%s",DATA_FIELD_SEPRTR,p_lbl,DATA_VALUE_SEPRTR, l_first_quantity_val);
      	}
	else if(strcmp(chr_fmt, "QL") == 0)
        {
                if(i)
                {
                        if(strrchr(l_qual, ':') && strrchr(l_qual, '/'))
                        {
                                strncpy(l_temp_ql, l_qual + 1, strlen(l_qual + 1) - 1);
                                l_temp_ql[strlen(l_qual + 1) - 1] = '\0';
                        }
                        else
                        {
                                strcpy(l_temp_ql, l_qual);
                        }
                }
                sprintf(int_l_temp,"%c%s%c%s",DATA_FIELD_SEPRTR,p_lbl,DATA_VALUE_SEPRTR, l_temp_ql);
        }	      	
	else if(strcmp(chr_fmt, "AC") == 0)
      	{
		if(strstr(chr_l_val, (const char *)'/'))//AIX Warning Removal
		{
               		l_int_ret = SeparateData(chr_l_val, '/', l_first_account_val, l_second_account_val);
			sprintf(int_l_temp,"%c%s%c%s",DATA_FIELD_SEPRTR,p_lbl,DATA_VALUE_SEPRTR, l_second_account_val);
		}
		else
		{
       			sprintf(int_l_temp,"%c%s%c%s",DATA_FIELD_SEPRTR,p_lbl,DATA_VALUE_SEPRTR, chr_l_val);
     		}
      	}
      	else if(strcmp(chr_fmt, "DS") == 0)
      	{
		I_GetDescription(p_message_list, chr_l_tag, l_qual, l_description, p_sequence, l_block_no);	
		CConcatValDescriptn(chr_l_val, l_description, l_ret_val);
		sprintf(int_l_temp,"%c%s%c%s", DATA_FIELD_SEPRTR,p_lbl,DATA_VALUE_SEPRTR, l_ret_val);	
      	}
        strcat(chr_p_str,int_l_temp);


      DEFORMAT_IF_DEBUG
      {
		printf("Leaving CatData_DIRECT processtion\n");
      }	

      APL_GOBACK_SUCCESS

RETURN_SUCCESS:
	return APL_SUCCESS;

RETURN_FAILURE:
	return APL_FAILURE;
}



int CatData_OTHER(char *chr_p_str, char *p_msg_name, MESSAGE_STRUCT **p_message_list, 
char *p_lbl, char* p_tag, char* p_qual, char* p_sequence, char *p_block_no, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	
	MESSAGE_STRUCT **l_message_list = p_message_list;
	EXEC SQL BEGIN DECLARE SECTION;

	char chr_l_val[71]                  = APL_NULL_STRING;
	//char chr_l_desc[71]                 = APL_NULL_STRING;
	char l_qual[100]                = APL_NULL_STRING;
	char l_qual_first_part[70]      = APL_NULL_STRING;
	char l_qual_second_part[70]     = APL_NULL_STRING;
	char chr_l_tag[500]                 = APL_NULL_STRING;
	char l_tag_first_part[10]       = APL_NULL_STRING;
	char l_tag_second_part[50]      = APL_NULL_STRING;
	char l_block_no[11]             = APL_NULL_STRING;
	char l_msg_name[7]              = APL_NULL_STRING;
	//char chr_l_failcode[5]              = APL_NULL_STRING;
	//char l_subfailreason_cd[5]           = APL_NULL_STRING;
	int  i				= 0;
	int  l_itagcount                = 0;
	char chr_l_client[11]		= APL_NULL_STRING;
	char chr_l_refno[17]		=	APL_NULL_STRING;
	char l_str_brokerno[13]	= APL_NULL_STRING; 
	double          l_quantity                   = 0.0;
	char l_qty_str[10]			=APL_NULL_STRING;
	char int_l_retval=APL_NULL_CHAR;
	char l_locationcd[5] = APL_NULL_STRING;
	short i_location_cd = 0;
	char                       l_str_clientcd[50]            = APL_NULL_STRING; 

	char l_lbl[70]                = APL_NULL_STRING;
	char l_rede_val[10]           = APL_NULL_STRING;
	char l_final_val[71]          = APL_NULL_STRING;
	int  l_int_ret = 0;

	struct sqlca sqlca;
	EXEC SQL VAR l_final_val IS STRING;		
	EXEC SQL VAR l_str_brokerno IS STRING; 
	EXEC SQL VAR l_locationcd IS STRING;
	EXEC SQL VAR l_str_clientcd IS STRING;
	EXEC SQL END DECLARE SECTION;

	char l_newrefno[21] = APL_NULL_STRING;
	char int_l_temp[35] =APL_NULL_STRING;
	PRO_GSEQNUM_STRUCT_H *l_progseqnum_struct_h =NULL;
	long  int_l_seq_num;
	
	DEFORMAT_IF_DEBUG
        {
		printf("\n \n \n \n \n \n --------------Entering CatData_OTHER processtion\n\n\n\n\n\n\nn\n");
	}	

	strcpy(l_lbl, p_lbl);		
	strcpy(l_qual, p_qual);
	strcpy(chr_l_tag, p_tag);
	strcpy(l_block_no, p_block_no);
	strcpy(l_msg_name, p_msg_name);
	
	if(strchr(l_qual, '$') != NULL)
	{
		while(strchr(l_qual, '$') != NULL)
		{
			l_int_ret = SeparateData(l_qual, '$', l_qual_first_part, l_qual_second_part);
			l_int_ret = SeparateData(chr_l_tag, '$', l_tag_first_part, l_tag_second_part); 
			//if(i = I_GetVal(p_message_list, l_tag_first_part, l_qual_first_part, chr_l_val, p_sequence, l_block_no) == 1)
			if((i = I_GetVal(p_message_list, l_tag_first_part, l_qual_first_part, chr_l_val, p_sequence, l_block_no)) == 1)
			{
				strcpy(l_qual, l_tag_first_part);
				strcpy(chr_l_tag, l_tag_first_part);
				break;
			}
			strcpy(l_qual, l_qual_second_part);
			strcpy(chr_l_tag, l_tag_second_part);
		}

		if(i == 0)
		{
			I_GetVal(p_message_list, chr_l_tag,l_qual,chr_l_val,p_sequence, l_block_no);
		}
	}
	else
	{
		I_GetVal(p_message_list, p_tag, l_qual, chr_l_val, p_sequence, l_block_no);
   }

	strcpy(p_tag, chr_l_tag);
	strcpy(p_qual, l_qual);
	
 
	
if(strcmp(p_lbl,"FAILVALIDATION")==0)
{
	/*
	if(APL_FAILURE == CDBFailMsgValidation(p_message_list,chr_l_tag,p_sequence,l_block_no,l_debug_info_ptr))
	{
		DEFORMAT_IF_DEBUG
		{
			printf("\n\n Failure from Validation");
		}
		CatData_STATIC(chr_p_str,p_lbl,"N");
	}
	else
	{
		DEFORMAT_IF_DEBUG
		{
			printf("\n\n Success from Validation");
		}
		CatData_STATIC(chr_p_str,p_lbl,"Y");
	}
	*/
}
/*
if(strcmp(p_lbl,"FAILREASON_CD")==0)
{
	CDBGetFailcode(p_message_list,chr_l_tag,p_sequence,chr_l_failcode,l_subfailreason_cd,l_block_no,l_debug_info_ptr);
	CatData_STATIC(chr_p_str,p_lbl,chr_l_failcode);
}

if(strcmp(p_lbl,"SUB_FAIL_CD")==0)
{
	CDBGetFailcode(p_message_list,chr_l_tag,p_sequence,chr_l_failcode,l_subfailreason_cd,l_block_no,l_debug_info_ptr);
	CatData_STATIC(chr_p_str,p_lbl,l_subfailreason_cd);
}
*/
if((strcmp(p_lbl,"CLIENT_NOTE")==0)	||
   (strcmp(p_lbl,"NOTE11")==0)	||
   (strcmp(p_lbl,"NOTE12")==0)	||
   (strcmp(p_lbl,"NOTE13")==0)	||
   (strcmp(p_lbl,"NOTE21")==0)	||
   (strcmp(p_lbl,"NOTE22")==0))

{
	/*
	CDBGetNotes(p_message_list,chr_l_tag,l_qual,p_sequence,chr_l_val,chr_l_desc,l_block_no,l_debug_info_ptr);
	CatData_STATIC(chr_p_str,p_lbl,chr_l_val);
	*/
}



  	if (strcmp(p_lbl,"NEWREFNO")==0)
	{
		
		

			if((I_GetVal(l_message_list,":97A:",":SAFE/",chr_l_client,"B","1")) == APL_FAILURE)
        	{
	        	if(strcmp(chr_l_client,APL_NULL_STRING)==0)
        		{
                		CO_ProcMonitor(APL_OUT_FILE,"Account  not mentioned in the msg \n",NULL,NULL);
                		APL_GOBACK_FAIL
        		}
        	}
			DEFORMAT_IF_DEBUG
			{
				printf("ACCOUNT = %s\n",chr_l_client);
			}
			if((I_GetVal(l_message_list,":20C:",":RELA/",chr_l_refno,"A1","1,1")) == APL_FAILURE)
        	{
        		if(strcmp(chr_l_refno,APL_NULL_STRING)==0)
                	{
                        	CO_ProcMonitor(APL_OUT_FILE,"Refno not mentioned in the messsage \n",NULL,NULL);
                        	APL_GOBACK_FAIL
                	}
        	}
			DEFORMAT_IF_DEBUG
        	{
                	 printf("\n THE VALUE OF REFNO IS %s \n",chr_l_refno);
        	}
			if(CatData_DIRECT(l_qty_str, l_message_list, "QTY", ":36B:" , ":SETT/", "B","1", "QT", l_debug_info_ptr) == APL_FAILURE)
         	{
                	 APL_GOBACK_FAIL
         	}
         	strcpy(l_qty_str, strchr(l_qty_str,DATA_VALUE_SEPRTR) + 1);

       		l_quantity=atof(l_qty_str);

			
			
		DEFORMAT_IF_DEBUG
		{
			//printf("QTY IS = %d %s\n",l_quantity,l_quantity);CHanges done for AIX Migration
			printf("QTY IS = %f \n",l_quantity);
		}
		EXEC SQL SELECT 'Y' INTO int_l_retval from dl_deal WHERE CLIENT = :chr_l_client AND IDENTIY_NO = :chr_l_refno	and QTY > :l_quantity;
		IS_ANY_ORA_ERROR
			
		if(int_l_retval == 'Y')
		{
		
			
		
					l_progseqnum_struct_h = (PRO_GSEQNUM_STRUCT_H *)calloc(1,sizeof(PRO_GSEQNUM_STRUCT_H));
					APL_MALLOC_FAIL(l_progseqnum_struct_h);
					memset(l_progseqnum_struct_h,NULL,sizeof(PRO_GSEQNUM_STRUCT_H));
					strcpy(l_progseqnum_struct_h->sequencename ,"PRE_MATCH");
					int_l_seq_num = CO_RtvNxtSeqNum(l_progseqnum_struct_h ,l_debug_info_ptr);
					DEFORMAT_IF_DEBUG
					{
						//printf("l_seq_num  is %d\n",int_l_seq_num); CHanges done for AIX Migration
						printf("l_seq_num  is %ld\n",int_l_seq_num);
					}
					//sprintf(l_newrefno, "%s%d", "PPR",int_l_seq_num); CHanges done for AIX Migration
					sprintf(l_newrefno, "%s%ld", "PPR",int_l_seq_num);
					DEFORMAT_IF_DEBUG
					{
						printf("l_newrefno  is %s\n",l_newrefno);
					}
					sprintf(int_l_temp, "%c%s%c%s", DATA_FIELD_SEPRTR, p_lbl,DATA_VALUE_SEPRTR,l_newrefno);
					strcat(chr_p_str,int_l_temp);	
					DEFORMAT_IF_DEBUG
					{
						printf("NEWREFNO == %s +\n",chr_p_str);
					}
					free(l_progseqnum_struct_h);	
		}
		else
		{
    				sprintf(int_l_temp, "%c%s%c%s", DATA_FIELD_SEPRTR, p_lbl,DATA_VALUE_SEPRTR,APL_NULL_STRING);
				strcat(chr_p_str,int_l_temp);
		}
	}
	
  	if (strcmp(p_lbl,"BRK_NO")==0)
	{
		if((I_GetVal(l_message_list,":97A:",":SAFE/",chr_l_client,"B","1")) == APL_FAILURE)
      {
	     	if(strcmp(chr_l_client,APL_NULL_STRING)==0)
      	{
           		CO_ProcMonitor(APL_OUT_FILE,"Account  not mentioned in the msg \n",NULL,NULL);
               		APL_GOBACK_FAIL
        	}
     	}
		DEFORMAT_IF_DEBUG
		{
			printf("ACCOUNT = %s\n",chr_l_client);
		}
		if((I_GetVal(l_message_list,":20C:",":RELA/",chr_l_refno,"A1","1,1")) == APL_FAILURE)
     	{
     		if(strcmp(chr_l_refno,APL_NULL_STRING)==0)
        	{
          	CO_ProcMonitor(APL_OUT_FILE,"Refno not mentioned in the messsage \n",NULL,NULL);
               	APL_GOBACK_FAIL
       	}
     	}
		DEFORMAT_IF_DEBUG
      {
      	printf("\n THE VALUE OF REFNO IS %s \n",chr_l_refno);
     	}
		EXEC SQL SELECT BRK_NO INTO :l_str_brokerno FROM DL_DEAL WHERE CLIENT = :chr_l_client and IDENTIY_NO = :chr_l_refno ;
		sprintf(int_l_temp, "%c%s%c%s", DATA_FIELD_SEPRTR, p_lbl,DATA_VALUE_SEPRTR,l_str_brokerno);
		strcat(chr_p_str,int_l_temp);	
	}
	
	if(strcmp(p_lbl,"ADDR_FRM")==0)
	{
		sprintf(int_l_temp, "%c%s%c%s",DATA_FIELD_SEPRTR, p_lbl,DATA_VALUE_SEPRTR,g_addr_frm);
		strcat(chr_p_str,int_l_temp);	
	}
	if(strcmp(p_lbl,"ADDR_TO")==0)
	{
		sprintf(int_l_temp, "%c%s%c%s",DATA_FIELD_SEPRTR, p_lbl,DATA_VALUE_SEPRTR,g_addr_to);
		strcat(chr_p_str,int_l_temp);	
	}

	
	if ((strcmp(l_msg_name,"578N01")== 0)||(strcmp(l_msg_name,"578R01")== 0)||(strcmp(l_msg_name,"578R02")== 0)
		||(strcmp(l_msg_name,"540N01")==0)||(strcmp(l_msg_name,"541N01")==0)||(strcmp(l_msg_name,"542N01")==0)||
		(strcmp(l_msg_name,"543N01")==0))
	{	
   	DEFORMAT_IF_DEBUG
   	{
   		printf("Entering block processtion\n");
      }

      I_GetVal(p_message_list, ":22H:", ":REDE/" ,l_rede_val, "B" , "1");

      DEFORMAT_IF_DEBUG
      {
      	printf("REDE chr_value : %s\n",l_rede_val);
         printf("Label : %s\n",l_lbl);
      }

		if (strcmp(l_lbl,"DOMESTIC_CPCLT")==0)
      {
      	if (strcmp(l_rede_val,"RECE")==0)
         {
            if (I_LocateVal(p_message_list,":95Q:",":REAG/",chr_l_val,"E1"))
            {
            	EXEC SQL SELECT cln_code INTO :l_final_val FROM MT_CLIENT WHERE cln_name = :chr_l_val;
               IS_ANY_ORA_ERROR
            }
            else if (I_LocateVal(p_message_list,":95P:",":REAG/",chr_l_val,"E1"))
            {
            	EXEC SQL SELECT cln_code INTO :l_final_val FROM MT_CLIENT WHERE CLN_BRK_CD = :chr_l_val;
               IS_ANY_ORA_ERROR
            }
         }
         else if (strcmp(l_rede_val,"DELI")==0)
         {
         	if (I_LocateVal(p_message_list,":95Q:",":DEAG/",chr_l_val,"E1"))
            {
            	EXEC SQL SELECT cln_code INTO :l_final_val FROM MT_CLIENT WHERE cln_name = :chr_l_val;
               IS_ANY_ORA_ERROR
            }
            else if (I_LocateVal(p_message_list,":95P:",":DEAG/",chr_l_val,"E1"))
            {
            	EXEC SQL SELECT cln_code INTO :l_final_val FROM MT_CLIENT WHERE CLN_BRK_CD = :chr_l_val;
               IS_ANY_ORA_ERROR
            }
         }
      }
		else if (strcmp(l_lbl,"CP_CLTNAME")==0)
      {
         if (strcmp(l_rede_val,"RECE")==0)
         {
         	if (I_LocateVal(p_message_list,":95P:",":BUYR/",chr_l_val,"E1"))
            {
            	EXEC SQL SELECT cln_name INTO :l_final_val FROM MT_CLIENT WHERE CLN_BRK_CD = :chr_l_val;
               IS_ANY_ORA_ERROR
            }
            else
            	I_LocateVal(p_message_list,":95Q:",":BUYR/",l_final_val,"E1");
         }
         else if (strcmp(l_rede_val,"DELI")==0)
         {
            if (I_LocateVal(p_message_list,":95P:",":SELL/",chr_l_val,"E1"))
            {
               EXEC SQL SELECT cln_name INTO :l_final_val FROM MT_CLIENT WHERE CLN_BRK_CD = :chr_l_val;
               IS_ANY_ORA_ERROR
            }
            else
               I_LocateVal(p_message_list,":95Q:",":SELL/",l_final_val,"E1");
         }
      }
		else if (strcmp(l_lbl,"CLIENTOF_CD")==0)
      {
         if (strcmp(l_rede_val,"RECE")==0)
         {
         	if (I_LocateVal(p_message_list,":95P:",":RECU/",chr_l_val,"E1"))
            {
            	EXEC SQL SELECT cln_code INTO :l_final_val FROM MT_CLIENT WHERE CLN_BRK_CD = :chr_l_val;
               IS_ANY_ORA_ERROR
            }
            else if (I_LocateVal(p_message_list,":95Q:",":RECU/",chr_l_val,"E1"))
            {
            	EXEC SQL SELECT cln_code INTO :l_final_val FROM MT_CLIENT WHERE cln_name = :chr_l_val;
               IS_ANY_ORA_ERROR
            }
         }
         else if (strcmp(l_rede_val,"DELI")==0)
         {
         	if (I_LocateVal(p_message_list,":95P:",":DECU/",chr_l_val,"E1"))
            {
            	EXEC SQL SELECT cln_code INTO :l_final_val FROM MT_CLIENT WHERE CLN_BRK_CD = :chr_l_val;
               IS_ANY_ORA_ERROR
            }
            else if (I_LocateVal(p_message_list,":95Q:",":DECU/",chr_l_val,"E1"))
            {
               EXEC SQL SELECT cln_code INTO :l_final_val FROM MT_CLIENT WHERE cln_name = :chr_l_val;
               IS_ANY_ORA_ERROR
            }
         }
      }		
		else if (strcmp(l_lbl,"CLIENTOF")==0)
		{
			if (strcmp(l_rede_val,"RECE")==0)
			{
				if (I_LocateVal(p_message_list,":95P:",":RECU/",chr_l_val,"E1"))
				{
					EXEC SQL SELECT cln_name INTO :l_final_val FROM MT_CLIENT WHERE CLN_BRK_CD = :chr_l_val;
					IS_ANY_ORA_ERROR
				}
				else
					I_LocateVal(p_message_list,":95Q:",":RECU/",l_final_val,"E1");
			}
			else if (strcmp(l_rede_val,"DELI")==0)
			{
				if (I_LocateVal(p_message_list,":95P:",":DECU/",chr_l_val,"E1"))
				{
					EXEC SQL SELECT cln_name INTO :l_final_val FROM MT_CLIENT WHERE CLN_BRK_CD = :chr_l_val;
					IS_ANY_ORA_ERROR
				}
				else
					I_LocateVal(p_message_list,":95Q:",":DECU/",l_final_val,"E1");
			}
		}
		else if (strcmp(l_lbl,"INSTRUCT_PERSON")==0)
		{
			if (strcmp(l_rede_val,"RECE")==0)
			{
				if (I_LocateVal(p_message_list,":95P:",":SELL/",chr_l_val,"E1"))
				{
					EXEC SQL SELECT cln_code INTO :l_final_val FROM MT_CLIENT WHERE CLN_BRK_CD = :chr_l_val;
					IS_ANY_ORA_ERROR
				}
				else if (I_LocateVal(p_message_list,":95Q:",":SELL/",chr_l_val,"E1"))
				{
					EXEC SQL SELECT cln_code INTO :l_final_val FROM MT_CLIENT WHERE cln_name = :chr_l_val;
					IS_ANY_ORA_ERROR
				}
			}
			else if (strcmp(l_rede_val,"DELI")==0)
			{
				if (I_LocateVal(p_message_list,":95P:",":BUYR/",chr_l_val,"E1"))
				{
					EXEC SQL SELECT cln_code INTO :l_final_val FROM MT_CLIENT WHERE CLN_BRK_CD = :chr_l_val;
					IS_ANY_ORA_ERROR
				}
				else if (I_LocateVal(p_message_list,":95Q:",":BUYR/",chr_l_val,"E1"))
				{
					EXEC SQL SELECT cln_code INTO :l_final_val FROM MT_CLIENT WHERE cln_name = :chr_l_val;
					IS_ANY_ORA_ERROR
				}
			}
		}
		else if (strcmp(l_lbl,"INSTRUCT_PERSONNM")==0)
		{
			if (strcmp(l_rede_val,"RECE")==0)
			{
				if (I_LocateVal(p_message_list,":95P:",":SELL/",chr_l_val,"E1"))
				{
					EXEC SQL SELECT cln_name INTO :l_final_val FROM MT_CLIENT WHERE CLN_BRK_CD = :chr_l_val;
					IS_ANY_ORA_ERROR
				}
				else
					I_LocateVal(p_message_list,":95Q:",":SELL/",l_final_val,"E1");
			}
			else if (strcmp(l_rede_val,"DELI")==0)
			{
				if (I_LocateVal(p_message_list,":95P:",":BUYR/",chr_l_val,"E1"))
				{
					EXEC SQL SELECT cln_name INTO :l_final_val FROM MT_CLIENT WHERE CLN_BRK_CD = :chr_l_val;
					IS_ANY_ORA_ERROR
				}
				else
					I_LocateVal(p_message_list,":95Q:",":BUYR/",l_final_val,"E1");
			}
		}
		else if (strcmp(l_lbl,"DSNIDENT")==0)
		{
			if (strcmp(l_rede_val,"RECE")==0)
				I_LocateVal(p_message_list,":95R:",":REAG/",l_final_val,"E1");
			else if (strcmp(l_rede_val,"DELI")==0)
				I_LocateVal(p_message_list,":95R:",":DEAG/",l_final_val,"E1");
		}
		/*
		else if (strcmp(l_lbl,"AGENTCODE")==0)
		{
			GetDataFromHeader_StartEndPos(p_message_list,4,0,10,chr_l_val);
			strcat(chr_l_val,'\0');
			EXEC SQL select agentcode into : l_final_val from cagent where swiftaddr =: chr_l_val;
			IS_ANY_ORA_ERROR
		}
		*/
		else if ((strcmp(l_lbl,"AGENT_REFNO")==0)||(strcmp(l_lbl,"TRRF_REF")==0)||(strcmp(l_lbl,"COMM_REF")==0)||(strcmp(l_lbl,"POOL_REF")==0)||(strcmp(l_lbl,"CP_CLT")==0)||(strcmp(l_lbl,"PARTY_CON")==0)||(strcmp(l_lbl,"INFO")==0))
			I_LocateVal(p_message_list,chr_l_tag,l_qual,l_final_val,p_sequence);

		
		else if ((strcmp(l_lbl,"UNIQ_IDENT_NO")==0)||(strcmp(l_lbl,"RELATED_IDENT_NO")==0))
		{
			if (MS_Rtv_RefNo_A(SETL_TYPE_MSG,l_final_val,l_debug_info_ptr) == APL_FAILURE)
			{
				CO_ProcMonitor(APL_OUT_FILE,"Failure from GenUniqRefNum", NULL, NULL);
				APL_GOBACK_FAIL;
			}
		}

		DEFORMAT_IF_DEBUG
      {
			printf("Value OTHER : --%s--\n",l_final_val);
		}
		if (strcmp(p_lbl,"LOCATION_CD") )
		{

			strcpy(int_l_temp,APL_NULL_STRING);
			sprintf(int_l_temp,"%c%s%c%s",DATA_FIELD_SEPRTR,p_lbl,DATA_VALUE_SEPRTR,l_final_val);
			strcat(chr_p_str,int_l_temp);
		}
	}	


if(strcmp(p_lbl,"REPEAT_SEQ") == 0 )
{
	GetTagCount(p_message_list,":97A:",":SAFE/","C","1",&l_itagcount);
	if( *(&l_itagcount) >= 2)
	{
		CatData_STATIC(chr_p_str,p_lbl,"N");
	}
	else
	{
		CatData_STATIC(chr_p_str,p_lbl,"Y");
	}
}

printf("the label is %s\n",p_lbl);
if(strcmp(p_lbl,"INTER_FII_FLG") == 0 )
{
	if (I_GetVal(p_message_list, ":70E:", ":TPRO/" ,chr_l_val, "C1" , "1,1")==APL_SUCCESS)
	{
		if (strstr(chr_l_val,"DI"))
		{
			strcpy(l_final_val,"T");
		}
		else
		{
			strcpy(l_final_val,"N");
		}
	}
	else
	{
		strcpy(l_final_val,"N");
	}

	strcpy(int_l_temp,APL_NULL_STRING);
	sprintf(int_l_temp,"%c%s%c%s",DATA_FIELD_SEPRTR,p_lbl,DATA_VALUE_SEPRTR,l_final_val);
	strcat(chr_p_str,int_l_temp);
	
}
	/**** TUX finding location cd	 **/
	if(strcmp(p_lbl,"LOCATION_CD")==0)
	{


			if ( (strcmp(l_msg_name,"540S01")==0)||(strcmp(l_msg_name,"541S01")==0)
						||(strcmp(l_msg_name,"542S01")==0)|| (strcmp(l_msg_name,"543S01")==0)) /** SWIFT **/
			{

				if((I_GetVal(l_message_list,":97A:",":SAFE/",chr_l_client,"C","1")) == APL_FAILURE)
				{
					if(strcmp(chr_l_client,APL_NULL_STRING)==0)
					{
						CO_ProcMonitor(APL_OUT_FILE,"Account  not mentioned in the msg \n",NULL,NULL);
						APL_GOBACK_FAIL
					}
				}
			}
			else /** SEBI ***/
			{
				if((I_GetVal(l_message_list,":97A:",":SAFE/",l_str_clientcd,"C","1")) == APL_FAILURE)
				{
					if(strcmp(chr_l_client,APL_NULL_STRING)==0)
					{
						CO_ProcMonitor(APL_OUT_FILE,"Account  not mentioned in the msg \n",NULL,NULL);
						APL_GOBACK_FAIL
					}
				}
				EXEC SQL SELECT cln_code INTO :chr_l_client FROM mt_cli_exch_map
					WHERE status = 'AA' AND cln_exch_map_code = :l_str_clientcd
					  AND status = 'AA' AND rownum < 2
						UNION
						SELECT cln_code FROM mt_regdetails
						WHERE cln_sebi_reg_no = :l_str_clientcd OR cln_mapinid = :l_str_clientcd
						 AND rownum < 2;
				   IS_ANY_ORA_ERROR
			}
			DEFORMAT_IF_DEBUG
			{
				printf("ACCOUNT = %s\n",chr_l_client);
			}
			printf("\n Reached ********** ASH LOCATION CD ****************\n");
			memset(l_locationcd,APL_NULL_CHAR,5);
			/*** Too Much Hard Coding ***/
			/** If NSDL not found then find CDSL not found then VAUL else make NDSL **/

			EXEC SQL SELECT CLN_DEPO_CODE INTO :l_locationcd:i_location_cd FROM MT_CLI_DEPO_MAP 
					WHERE CLN_CODE = :chr_l_client AND CLN_DEPO_CODE = 'NSDL';
			if ( sqlca.sqlcode == 1403 )
			{
				EXEC SQL SELECT CLN_DEPO_CODE  INTO :l_locationcd:i_location_cd FROM MT_CLI_DEPO_MAP 
					WHERE CLN_CODE = :chr_l_client AND CLN_DEPO_CODE = 'CDSL';
					if ( sqlca.sqlcode == 1403 )
					{
						EXEC SQL SELECT CLN_DEPO_CODE  INTO :l_locationcd:i_location_cd FROM MT_CLI_DEPO_MAP 
							WHERE CLN_CODE = :chr_l_client AND CLN_DEPO_CODE = 'VAUL';
							if ( sqlca.sqlcode == 1403 )
							{
								strcpy(l_locationcd,"NSDL");
							}
					}
			}
			else
				IS_ANY_ORA_ERROR
		printf("\n LOCATION CD is |%s| ",l_locationcd);
		strcpy(int_l_temp,APL_NULL_STRING);
		sprintf(int_l_temp, "%c%s%c%s",DATA_FIELD_SEPRTR, p_lbl,DATA_VALUE_SEPRTR,l_locationcd);
		strcat(chr_p_str,int_l_temp);	
		
	} /** Tux ends **/

DEFORMAT_IF_DEBUG
{
	printf("Leaving CatData_OTHER processtion\n");
}	

APL_GOBACK_SUCCESS // AIX - Warnings removal

RETURN_SUCCESS:
	return APL_SUCCESS;

RETURN_FAILURE:
	return APL_FAILURE;
}


int ProcessNumber(char *p_lbl, char *chr_l_val, char *int_l_temp)
{

	char l_first_lbl[70]            = APL_NULL_STRING;
	char l_second_lbl[70]           = APL_NULL_STRING;
	char l_first_part[70]           = APL_NULL_STRING;
	char l_first_part_1[70]         = APL_NULL_STRING;
	char l_first_part_2[70]         = APL_NULL_STRING;
	char l_second_part[70]          = APL_NULL_STRING;
	char l_second_part_1[70]        = APL_NULL_STRING;
	char l_second_part_2[70]        = APL_NULL_STRING;
	int  i  			= 0;
	int  l_int_ret = 0;

	DEFORMAT_IF_DEBUG
	{
		printf("\n ************* Inside NU lbl is |%s|, int_val is |%s| *****\n",p_lbl,chr_l_val);
	}

	if (strchr(p_lbl,'/') != NULL)  
	{
		i = SeparateData (p_lbl,'/',l_first_lbl,l_second_lbl); 

		DEFORMAT_IF_DEBUG
		{
			printf("\n ************* Inside slash lbl is |%s|, int_val is |%s| *****\n",p_lbl,chr_l_val);
			printf("\n ************* Inside slash lbl_1 is |%s|, lbl_2 is |%s| *****\n",l_first_lbl,l_second_lbl);
		}

		if (isdigit(chr_l_val[0]))                  
		{
			i = SeparateData (chr_l_val,'/',l_first_part,l_second_part); 	
			if (strchr(l_first_part,',') != NULL)
			{	
				i = SeparateData (l_first_part,',',l_first_part_1,l_first_part_2); 
				strcpy(l_first_part,APL_NULL_STRING);
				sprintf(l_first_part,"%s.%s",l_first_part_1,l_first_part_2);
			}

			if (strchr(l_second_part,',') != NULL)
			{
				l_int_ret = SeparateData (l_second_part,',',l_second_part_1,l_second_part_2); 
				strcpy(l_second_part,APL_NULL_STRING);
				sprintf(l_second_part,"%s.%s",l_second_part_1,l_second_part_2);
			}

		}
		else
			
		{
			strncpy(l_first_part,chr_l_val,3);
			strcpy(l_second_part,chr_l_val+3);
			if (strchr(l_second_part,',') != NULL)
			{
				i = SeparateData (l_second_part,',',l_second_part_1,l_second_part_2); 
				strcpy(l_second_part,APL_NULL_STRING);
				sprintf(l_second_part,"%s.%s",l_second_part_1,l_second_part_2);
			}

			sprintf(int_l_temp,"%c%s%c%s%c%s%c%s",DATA_FIELD_SEPRTR,l_first_lbl,DATA_VALUE_SEPRTR,l_first_part,DATA_FIELD_SEPRTR,l_second_lbl,DATA_VALUE_SEPRTR,l_second_part);
		}
	}
	else
		
	{
		if(strcmp(chr_l_val, APL_NULL_STRING))
		{
			if(!isdigit(chr_l_val[0]))
			{
				strcpy(l_first_part, "-");
				strcat(l_first_part, chr_l_val+1);
				sprintf(chr_l_val,"%s", l_first_part);
			}			
		
/* HM ::
			if(strchr(chr_l_val,','))
			{
				i = SeparateData (chr_l_val,',',l_first_part,l_second_part);
				strcpy(chr_l_val,APL_NULL_STRING);
				sprintf(chr_l_val,"%s.%s",l_first_part,l_second_part);
			}
*/
/** HM **/
		int k=0,i_flag=0;
        int len_text = strlen(chr_l_val);

        for(k=0; k<len_text; k++)
        {
				if(len_text == 1 && !strcmp(chr_l_val,"-"))
				{
					strcpy(chr_l_val,APL_NULL_STRING);
					sprintf(chr_l_val,"%s",l_second_part);
				}

                if((chr_l_val[k]>=32 && chr_l_val[k] <= 47) 
										|| (chr_l_val[k]>=58 && chr_l_val[k] <= 63)
										|| (chr_l_val[k]>=91 && chr_l_val[k] <= 96)
										|| (chr_l_val[k]>=123 && chr_l_val[k] <= 126))
                {
				i = SeparateData (chr_l_val,chr_l_val[k],l_first_part,l_second_part);
				strcpy(chr_l_val,APL_NULL_STRING);
					if(i_flag == 0)
						sprintf(chr_l_val,"%s.%s",l_first_part,l_second_part);
					else
						{
							sprintf(chr_l_val,"%s%s",l_first_part,l_second_part);	
							k--;
						}
					i_flag++;
				}
				}
/** HM **/
		}
		sprintf(int_l_temp,"%c%s%c%s",DATA_FIELD_SEPRTR,p_lbl,DATA_VALUE_SEPRTR,chr_l_val);
	}
	return APL_SUCCESS;
}

int  SeparateData (char *chr_p_val,char p_tok,char *p_first_part,char *p_second_part) //AIX -Change
{
	strcpy(p_first_part,APL_NULL_STRING);
	strcpy(p_second_part,APL_NULL_STRING);
	strcpy(p_second_part,strchr(chr_p_val,p_tok)+1);  //AIX-Warnings Removal
	strncpy(p_first_part,chr_p_val,(strlen(chr_p_val)-strlen(p_second_part)-1));
	p_first_part[strlen(chr_p_val)-strlen(p_second_part)-1] = '\0'; 
         //AIX- Change
	printf("Strlen 1 <%d>\n", (int)strlen(chr_p_val));
	printf("Strlen 2 <%d>\n", (int)strlen(p_second_part));
	printf("Strlen 3 <%d>\n", (int)strlen(chr_p_val)-(int)strlen(p_second_part)-1);
	return APL_SUCCESS; 
}


int CatDataStringFromMessage(char *chr_p_str,MESSAGE_STRUCT **p_message_list, char *p_lbl, char* p_tag, char* p_qual, char* p_sequence, char *p_block_no )
{
	int 	i		= 0;
	char 	chr_l_val[70]	= APL_NULL_STRING;
	char 	int_l_temp[100]	= APL_NULL_STRING;
	char	l_block_no[11]	= APL_NULL_STRING;

	strcpy(chr_l_val, APL_NULL_STRING);
	strcpy(l_block_no, p_block_no);
	i = I_GetVal(p_message_list,p_tag,p_qual,chr_l_val,p_sequence, l_block_no);

	strcpy(int_l_temp,APL_NULL_STRING);
	sprintf(int_l_temp,"%c%s%c%s",DATA_FIELD_SEPRTR,p_lbl,DATA_VALUE_SEPRTR,chr_l_val);
	strcat(chr_p_str,int_l_temp);

	return APL_SUCCESS;
}


int PopulateAdditionalDetails(char *l_str_client_table,char *chr_l_ca_id,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;

	char chr_l_time_stamp[20]    	= APL_NULL_STRING;
	char l_status_dt[20]    	= APL_NULL_STRING;
	char l_note_nbr[9]    		= APL_NULL_STRING; /** Ash increased it to 9 **/

	EXEC SQL VAR chr_l_ca_id   IS STRING;
	EXEC SQL VAR l_note_nbr   IS STRING;
 	EXEC SQL END DECLARE SECTION;

	DEFORMAT_IF_DEBUG
	{
		printf("Entered Function PopulateAdditionalDetails\n");
	}
	EXEC SQL SELECT ACCESS_STAMP,PROCESSED_DATE ,INFO_SEQ
		INTO :chr_l_time_stamp,:l_status_dt,:l_note_nbr
		FROM CAEVENT
		WHERE CORP_ID     =       :chr_l_ca_id ;

	IS_ANY_ORA_ERROR;

	CatData_STATIC(l_str_client_table,"TIMESTAMP",chr_l_time_stamp);
	CatData_STATIC(l_str_client_table,"PROCESSED_DATE",l_status_dt);
	CatData_STATIC(l_str_client_table,"CORP_ID",chr_l_ca_id);
	CatData_STATIC(l_str_client_table,"INFO_SEQ",l_note_nbr);

	DEFORMAT_IF_DEBUG
	{
		printf("\n Leaving Function PopulateAdditionalDetails\n");
	}
	APL_GOBACK_SUCCESS

RETURN_SUCCESS:
	return APL_SUCCESS;

RETURN_FAILURE:
	return APL_FAILURE;
}



int CatData_MULTIPLEQUERY(
char 		*chr_p_str, 
MESSAGE_STRUCT 	**p_message_list, 
char 		*p_lbl, 
char 		*p_tag, 
char 		*p_qual, 
char 		*p_sequence, 
char 		*p_block_no, 
char 		*p_sqlQuery, 
char 		*p_field_type,
char 		*p_val_type,
char 		*p_static_val,
char 		*p_msg_name,
DEBUG_INFO_STRUCT_H 	**l_debug_info_ptr
)
{

	EXEC SQL BEGIN DECLARE SECTION;

	char l_src[10000]					= APL_NULL_STRING;
	char l_result_query_str[10000]				= APL_NULL_STRING;
	char l_resultval[100]					= APL_NULL_STRING;
	//char l_separator 					= '#'; // AIx -Changes
	int  *l_noelem;
	char ***l_ret_string_from_proc;
	char ***l_ret_values_from_list;
	int  i							= 0;
         char l_separator[1]   = "#";  // AIx -Changes

	//struct sqlca sqlca;

	EXEC SQL VAR l_result_query_str IS STRING;
	EXEC SQL VAR l_resultval IS STRING;

	EXEC SQL END DECLARE SECTION;


	DEFORMAT_IF_DEBUG
	{
		printf("Entering CatData_MULTIPLEQUERY processtion\n");
	}	


	

	strcpy(l_src, p_sqlQuery);
	l_noelem = (int *)calloc(1, sizeof(int *));
	l_ret_string_from_proc = (char ***)calloc(200, sizeof(char ***));
	l_ret_values_from_list = (char ***)calloc(200, sizeof(char ***));

	
	if(GetMultipleValues(p_message_list, p_sequence, p_tag, p_qual, p_block_no, p_field_type, p_val_type, p_static_val, p_msg_name, l_ret_values_from_list, l_debug_info_ptr) == APL_FAILURE)
		APL_GOBACK_FAIL
	
	
	
	StrSplitFn(l_src, l_separator, l_noelem, l_ret_string_from_proc);
	
	for(i = 0 ; i < *l_noelem; i++)
	{
		if(!i)
		{
			strcpy(l_result_query_str, *(*l_ret_string_from_proc + i));	
		}
		else
		{
			strcat(l_result_query_str, *(*l_ret_values_from_list - 1 + (*(*l_ret_string_from_proc + i)[0] - 48)));
			strcat(l_result_query_str, *(*l_ret_string_from_proc + i)+1);
			printf("\n QUERY IS ||%s||",l_result_query_str);
		}
	}

	
	
	if((i = DynamicQuery(l_result_query_str, l_resultval, l_debug_info_ptr)) == APL_FAILURE)
		APL_GOBACK_FAIL

	DEFORMAT_IF_DEBUG
	{
		printf("-----------string : %s, output : %s\n", l_result_query_str, l_resultval);
	}

	CatData_STATIC(chr_p_str, p_lbl, l_resultval);

	DEFORMAT_IF_DEBUG
	{
		printf("The output of the MulitQuery processtion is : %s", chr_p_str);
		printf("Leaving CatData_MULTIPLEQUERY processtion\n");
	}	

APL_GOBACK_SUCCESS // AIX - Warnings removal

RETURN_SUCCESS:
	free(l_ret_string_from_proc);
	free(l_ret_values_from_list);
	free(l_noelem);
	return APL_SUCCESS;

RETURN_FAILURE:
	free(l_ret_string_from_proc);
	free(l_ret_values_from_list);
	free(l_noelem);
	return APL_FAILURE;
}



int GetMultipleValues
(	
MESSAGE_STRUCT 	**p_message_list, 
char		*p_sequence, 
char 		*p_tag, 
char 		*p_qual, 
char 		*p_block_no, 
char 		*p_field_type,
char 		*p_val_type,
char 		*p_static_val,
char 		*p_msg_name,
char 		***p_ret_values_from_list, 
DEBUG_INFO_STRUCT_H 	**l_debug_info_ptr
)
{
	char ***l_qual;
	char ***chr_l_tag;
	char ***l_block_no;
	char ***l_sequence;
	char ***l_field_type;
	char ***l_val_type;
	char ***l_static_val;
	char l_lbl[10]		= APL_NULL_STRING;
	int  *l_noelem;
	char chr_l_param_str[100]	= APL_NULL_STRING;
	char l_separator[1] 	= "#"; // AIX -Changes
	int  i			= 0;	
	
        DEFORMAT_IF_DEBUG
        {
                printf("Entering GetMultipleValues processtion\n");
        }

	
/** Commented on 30/05/2012 	
	l_noelem = (int *)calloc(1, sizeof(int *));
	l_qual = (char ***)calloc(200, sizeof(char *));
	chr_l_tag = (char ***)calloc(200, sizeof(char ***));	
	l_sequence = (char ***)calloc(200, sizeof(char ***));
	l_field_type = (char ***)calloc(200, sizeof(char ***));
	l_val_type = (char ***)calloc(200, sizeof(char ***));
	l_static_val = (char ***)calloc(200, sizeof(char ***));
	l_block_no = (char ***)calloc(200, sizeof(char ***)); **/

	l_noelem = (int *)calloc(1, sizeof(int ));
	l_qual = (char ***)calloc(1, sizeof(char **));
	chr_l_tag = (char ***)calloc(1, sizeof(char **));	
	l_sequence = (char ***)calloc(1, sizeof(char **));
	l_field_type = (char ***)calloc(1, sizeof(char **));
	l_val_type = (char ***)calloc(1, sizeof(char **));
	l_static_val = (char ***)calloc(1, sizeof(char **));
	l_block_no = (char ***)calloc(1, sizeof(char **));

	/** commented on 30/05/2012	
	*l_qual = (char **)calloc(*l_noelem, sizeof(char *));
	*chr_l_tag = (char **)calloc(*l_noelem, sizeof(char *));
	*l_sequence = (char **)calloc(*l_noelem, sizeof(char *));
	*l_field_type = (char **)calloc(*l_noelem, sizeof(char *));
	*l_val_type = (char **)calloc(*l_noelem, sizeof(char *));
	*l_static_val = (char **)calloc(*l_noelem, sizeof(char *));
	*l_block_no = (char **)calloc(*l_noelem, sizeof(char *)); **/

	*l_qual = (char **)calloc(1, sizeof(char *));
	*chr_l_tag = (char **)calloc(1, sizeof(char *));
	*l_sequence = (char **)calloc(1, sizeof(char *));
	*l_field_type = (char **)calloc(1, sizeof(char *));
	*l_val_type = (char **)calloc(1, sizeof(char *));
	*l_static_val = (char **)calloc(1, sizeof(char *));
	*l_block_no = (char **)calloc(1, sizeof(char *));

	Alert("After all Callocs");

 	*l_noelem = 0;	
	strcpy(l_lbl, "LABEL");
	StrSplitFn(p_qual+1, l_separator, l_noelem, l_qual);
	StrSplitFn(p_sequence+1, l_separator, l_noelem, l_sequence);
	StrSplitFn(p_tag+1, l_separator, l_noelem, chr_l_tag);
	StrSplitFn(p_block_no+1, l_separator, l_noelem, l_block_no);
	StrSplitFn(p_field_type+1, l_separator, l_noelem, l_field_type);
	//printf("after here %s %s\n",p_val_type,l_val_type);CHanges done for AIX Migration 
	printf("after here %s %s\n",p_val_type,**l_val_type);
	/*if(strcmp(p_val_type, NULL) != 0) */
	*l_noelem = 0;
	if(strcmp(p_val_type, APL_NULL_STRING) != 0)
	{
		printf("yahan\n");
		StrSplitFn(p_val_type+1, l_separator, l_noelem, l_val_type);
		
	}
	//printf("no of elements and val type %d|%s|%s\n",*l_noelem,l_val_type,p_static_val); CHanges done for AIX Migration
	printf("no of elements and val type %d|%s|%s\n",*l_noelem,**l_val_type,p_static_val);
	/**l_noelem = 0;*/
	if(strcmp(p_static_val, APL_NULL_STRING) != 0)
	{
		StrSplitFn(p_static_val+1, l_separator, l_noelem, l_static_val);
	}
	printf("no of elements %d\n",*l_noelem);
	*p_ret_values_from_list = (char **)calloc(*l_noelem, sizeof(char *));


	//printf("main yaha hoon %s|%s\n",l_qual,chr_l_tag);Changes done for AIX Migration
	printf("main yaha hoon %s|%s\n",**l_qual,**chr_l_tag);	
	
	for(i = 0 ; i < *l_noelem; i++)
	{
		printf("only to check no of elements\n");
		memset(chr_l_param_str, '\0', 100); 
		*(*p_ret_values_from_list+i) = (char *)calloc(1, 71);
		if (*(*p_ret_values_from_list+i) == NULL) return 0;
		if(strcmp(*(*l_field_type+i), "DIRECT") == 0)
		{
			if( CatData_DIRECT(chr_l_param_str, 
				p_message_list, 
				l_lbl, 
				*(*chr_l_tag+i),
				*(*l_qual+i), 
				*(*l_sequence+i), 
				*(*l_block_no+i), 
				*(*l_val_type+i),
				l_debug_info_ptr) == APL_FAILURE)
			{
				APL_GOBACK_FAIL
			}
			strcpy(*(*p_ret_values_from_list+i), (chr_l_param_str+7));
		}
		else if(strcmp(*(*l_field_type+i), "STATIC") == 0)
		{	
			/*printf("herere &&&&&&&&& %s\n",*(*l_static_val+i));*/
			if(strcmp(p_static_val, APL_NULL_STRING) != 0)
			{
				strcpy(*(*p_ret_values_from_list+i), *(*l_static_val+i));
			}
		}
		else if(strcmp(*(*l_field_type+i), "MAPVAL") == 0)
		{					
			if(CatData_MAPVAL(chr_l_param_str, p_msg_name, p_message_list,
				l_lbl,
				*(*chr_l_tag+i),
				*(*l_qual+i),
				*(*l_sequence+i), 
				*(*l_block_no+i), 
				l_debug_info_ptr) == APL_FAILURE)
			{
				APL_GOBACK_FAIL
			}
			strcpy(*(*p_ret_values_from_list+i), (chr_l_param_str+7));
		}
	}

        DEFORMAT_IF_DEBUG
		  {
			  if(*l_noelem > 0)
				  printf("The return chr_value is %s\n", *(*p_ret_values_from_list)); 
			  printf("Leaving GetMultiValues processtion\n");
		  }
	
	APL_GOBACK_SUCCESS

RETURN_SUCCESS:
   free(*l_qual);
   free(*chr_l_tag);
   free(*l_sequence);
   free(*l_field_type);
   free(*l_val_type);
   free(*l_static_val);
   free(*l_block_no);

   free(l_noelem);
   free(l_qual);
   free(chr_l_tag);
   free(l_sequence);
   free(l_field_type);
   free(l_val_type);
   free(l_static_val);
   free(l_block_no);

	return APL_SUCCESS;

RETURN_FAILURE:
   free(*l_qual);
   free(*chr_l_tag);
   free(*l_sequence);
   free(*l_field_type);
   free(*l_val_type);
   free(*l_static_val);
   free(*l_block_no);

   free(l_noelem);
   free(l_qual);
   free(chr_l_tag);
   free(l_sequence);
   free(l_field_type);
   free(l_val_type);
   free(l_static_val);
   free(l_block_no);

	return APL_FAILURE;
}

	/* CDBDelTrdInRpr :This functions deletes trade from repair if customer sends message for cancellation of deal
		which is already in repair. 
	*/
 
 int CDBDelTrdInRpr(	char				*chr_p_client,
 							char				*chr_p_refno,
 							char				*int_p_retval,
 							DEBUG_INFO_STRUCT_H   **l_debug_info_ptr)
 {
 	char     chr_l_client_a[APL_CLIENT_LENGTH] =  APL_NULL_STRING;
 	char     chr_l_refno_a[APL_TXNREFNO_LEN]  =  APL_NULL_STRING;
 	//char		chr_l_rowid_A[APL_ROWID_LEN]		=	APL_NULL_STRING;
 	long 		int_l_seq_num 						=	0;
 	short		i_sequence_num						=	0; 		
 	//short		i_ora_rowid							=  0;
	short    l_int_cnt 							=	0;

 	EXEC SQL BEGIN DECLARE SECTION;
 	
 	EXEC SQL VAR chr_l_client_a IS STRING;
 	EXEC SQL VAR chr_l_refno_a	  IS STRING;
 	//EXEC SQL VAR chr_l_rowid_A	  IS STRING;		
 
 	EXEC SQL END DECLARE SECTION;
 	
 	strcpy(chr_l_client_a,chr_p_client);
 	strcpy(chr_l_refno_a,chr_p_refno);
 	/*
 	EXEC SQL SELECT * 
 	FROM DL_DEALREPAIR 
 	WHERE CLIENT = :chr_l_client_a
 	AND IDENTIY_NO = :chr_l_refno_a 
 	AND DEAL_STAT = 'UU';
 	*/
	EXEC SQL SELECT COUNT(*) INTO :l_int_cnt
 	FROM DL_DEALREPAIR 
 	WHERE CLIENT = :chr_l_client_a
 	AND IDENTIY_NO = :chr_l_refno_a 
 	AND DEAL_STAT = 'UU';
 	
	IS_ANY_ORA_ERROR
 	
 	if (APL_ZERO_RESULT_SET)
 	{
 		strcpy(int_p_retval,"NO ENTRY IN CMSGREPAIR");
 		APL_GOBACK_FAIL
 	}	
 
 	EXEC SQL DELETE 
 	FROM DL_DEALREPAIR
 	WHERE rowid in (  SELECT   rowid
 							FROM DL_DEALREPAIR
 							WHERE CLIENT = :chr_l_client_a
 							AND IDENTIY_NO = :chr_l_refno_a
 							AND DEAL_STAT = 'UU'); 
 	IS_ANY_ORA_ERROR
 	
 	EXEC SQL DELETE 
 	FROM DL_DEALAUDIT
 	WHERE rowid in ( 	SELECT	rowid 
 							FROM DL_DEALAUDIT
 							WHERE CLIENT = :chr_l_client_a
 							AND IDENTIY_NO = :chr_l_refno_a);
 	IS_ANY_ORA_ERROR
 
 	EXEC SQL SELECT INDEN_NUM into :int_l_seq_num:i_sequence_num  
 	FROM DL_MSGLINK
 	WHERE  CLIENT = :chr_l_client_a
 	AND IDENTIY_NO = :chr_l_refno_a;
 	IS_ANY_ORA_ERROR
 	
 	EXEC SQL DELETE
 	FROM DL_MSGLINKDET
 	WHERE	INDEN_NUM = :int_l_seq_num;
 	IS_ANY_ORA_ERROR
 
 	EXEC SQL DELETE
    FROM DL_MSGLINK
    WHERE rowid in (  SELECT   rowid
                      FROM DL_MSGLINK
                      WHERE CLIENT = :chr_l_client_a
                      AND IDENTIY_NO = :chr_l_refno_a);
    IS_ANY_ORA_ERROR							
 	
 	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:
   DEFORMAT_IF_DEBUG
   {
       printf("\n\n Leaving CDBDelTrdInRpr processtion with Success");
   }
   return APL_SUCCESS;
 
   RETURN_FAILURE:
   DEFORMAT_IF_DEBUG
   {
       printf("\n\n  Leaving CDBDelTrdInRpr processtion with Failure");
   }
   return APL_FAILURE;	
 }

