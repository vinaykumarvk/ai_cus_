




#include "IV_Control_A.h"

EXEC SQL INCLUDE SQLCA;




int IV_Rtv_IVSRVCHRGDel(long p_serv_code,IV_SERV_MAST_STRUCT *p_iv_serv_mast_struct_c,
                      int *int_p_retstat,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

EXEC SQL BEGIN DECLARE SECTION;
IV_SERV_MAST_STRUCT l_ivservmast_struct;
long int_h_serv_code;
I_IV_SERV_MAST_STRUCT l_i_iv_serv_mast_struct;

EXEC SQL VAR l_ivservmast_struct.service_det IS STRING;
EXEC SQL VAR l_ivservmast_struct.access_stamp IS STRING;
EXEC SQL VAR l_ivservmast_struct.status IS STRING;
EXEC SQL VAR l_ivservmast_struct.maker IS STRING;
EXEC SQL VAR l_ivservmast_struct.maker_dt IS STRING;
EXEC SQL VAR l_ivservmast_struct.checker IS STRING;
EXEC SQL VAR l_ivservmast_struct.checker_dt IS STRING;
EXEC SQL VAR l_ivservmast_struct.b_client  IS STRING;

EXEC SQL END DECLARE SECTION;

struct sqlca sqlca;

#ifdef APL_THREADS
        APL_SET_CONTEXT
        EXEC SQL CONTEXT USE :my_ctx_local;
#endif


int_h_serv_code = p_serv_code;
     
EXEC SQL SELECT service_cd,service_det,fees_class,minimum_fee,std_feeind,
                mastsub_ind,access_stamp,valid_fee_class,b_client,in_on_gen,status,
		maker,maker_dt,checker,checker_dt
	      INTO :l_ivservmast_struct:l_i_iv_serv_mast_struct
	      FROM IV_SERV_MAST
	      WHERE service_cd = :int_h_serv_code 
	      AND STATUS='AA';

     if(sqlca.sqlcode < 0)
             *int_p_retstat = IV_CRITCAL_ERROR_IND;

     IS_ANY_ORA_ERROR;

     if(sqlca.sqlcode == 1403)
     {
                *int_p_retstat = IV_NO_DATA_FOUND_ERR;
                APL_GOBACK_FAIL;
     }

     if(l_i_iv_serv_mast_struct.i_serv_detail == -1)
     {     
	      strcpy(l_ivservmast_struct.service_det," ");	
              *int_p_retstat = IV_COLUMN_NULL_ERR;
     }
     if(l_i_iv_serv_mast_struct.i_fee_class == -1)
     {
	      l_ivservmast_struct.fees_class = ' ';
              *int_p_retstat = IV_COLUMN_NULL_ERR;
     }
     if(l_i_iv_serv_mast_struct.i_minimum_fee == -1)
     {
	      l_ivservmast_struct.minimum_fee = 0;
              *int_p_retstat = IV_COLUMN_NULL_ERR;
     }
     if(l_i_iv_serv_mast_struct.i_std_feeind == -1)
     {
	      l_ivservmast_struct.std_feeind = ' ';
              *int_p_retstat = IV_COLUMN_NULL_ERR;
     }
     if(l_i_iv_serv_mast_struct.i_mastsub_ind == -1)
     {
	      l_ivservmast_struct.mastsub_ind = ' ';
              *int_p_retstat = IV_COLUMN_NULL_ERR;
     }
     if(l_i_iv_serv_mast_struct.i_access_stamp == -1)
     {
	      strcpy(l_ivservmast_struct.access_stamp," ");
              *int_p_retstat = IV_COLUMN_NULL_ERR;
     }
     if(l_i_iv_serv_mast_struct.i_valid_fee_class == -1)
     {
	      l_ivservmast_struct.valid_fee_class = ' ';
              *int_p_retstat = IV_COLUMN_NULL_ERR;
     }
     if(l_i_iv_serv_mast_struct.i_b_dl_client == -1)
     {
	      strcpy(l_ivservmast_struct.b_client," ");
              *int_p_retstat = IV_COLUMN_NULL_ERR;
     }
     
     *p_iv_serv_mast_struct_c = l_ivservmast_struct;
        if(*int_p_retstat == IV_COLUMN_NULL_ERR)
        {
                APL_GOBACK_FAIL;
        }


     *int_p_retstat = IV_SUCCESS;
     APL_GOBACK_SUCCESS;

     RETURN_SUCCESS:
            return APL_SUCCESS;

     RETURN_FAILURE:
            return APL_FAILURE;


}

