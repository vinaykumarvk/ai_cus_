/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to 
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or 
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*******************************************************************************
 *
 * Module Name         :         Intellect Reports	
 *
 * File Name           :         BODAlerts.pc
 *
 * Description         :         This file contains all functions for BODAlerts.
 *
 *            Version Control Block
 *
 * Date        Version		Author              Description		RFS No.
 * ---------   --------	 ---------------  ----------------------------------
 * 27/03/2006   1.0        Sonali					New File	    HDFC_Reports1
 * 25/03/2022   1.1        kotubabu       Linux Migration        Kotak Implementaion
   04/01/2024   1.1        Balaji            Alert                Kotak Implementaion
 * *****************************************************************************/


#include "Intellect_Common.h"
#include "Intellect_Interface.h"
#include "CO_IndStructdef.h"
#include "CO_OthStructdef.h"
#include "CO_Commdef.h"
#define  FILEPATH_LEN   200
#define  FILENAME_LEN   150
#define  APL_BOD_DESC   "BODALERTS"

/* Added by kotubabu for Linux Migration -Start*/
#ifdef OS_LINUX
FILE *g_logfile;
#else
FILE* g_logfile = APL_OUT_FILE;
#endif
/* Added by kotubabu  for Linux Migration -END*/

EXEC SQL INCLUDE SQLCA.H;

int main(int argc,char *argv[]) //AIX - Warning Removal
{	

	/* Added by kotubabu for Linux Migration -Start*/
   #ifdef OS_LINUX
     g_logfile=APL_OUT_FILE;
   #else
	APL_FUNCTION_ENTER(g_logfile)
   #endif
   /* Added by kotubabu for Linux Migration -END*/
 	 DEBUG_INFO_STRUCT_H **l_debug_info_ptr=NULL;
 	 INTL_ENV_DATA_STRUCT_H *l_intl_env_data_h=NULL;

  	 FILE *l_logfile = NULL;


   if(CO_Get_DBConnect(l_debug_info_ptr) == APL_FAILURE)
   {
		APL_GOBACK_FAIL
   }	


/* company level limit monitoring start */
   int l_pro_inter=0;
	
	EXEC SQL select count(*) into :l_pro_inter
    from PRO_SGENSTAT where MAP_TYPE ='CONVERTBLE_BON_TO_SH';
	
		
		//EXEC SQL SELECT to_char(SYS_DATE,'DDMMYY') INTO :chr_l_sysdate FROM PRO_SYS_DATE;
		if(l_pro_inter > 0)
		{
			printf("Before PRO_SGENSTAT function  \n");
	
	if(InsSubty(l_logfile,argv,l_debug_info_ptr) == APL_FAILURE)
	{
	    printf("Failure from InsSubty line 73\n");
	    fflush(stdout);
		CO_ProcMonitor(g_logfile, "Failure from InsSubty", NULL, NULL);
		APL_GOBACK_FAIL	
	} 
		}
	
	printf("After function balaji \n");

/* company level limit monitoring end */


	/*if(SebiRBIExFn(l_logfile,argv,l_debug_info_ptr) == APL_FAILURE)
	{
		CO_ProcMonitor(g_logfile, "Failure from SebiRBIExFn", NULL, NULL);
		APL_GOBACK_FAIL	
	} */


APL_GOBACK_SUCCESS

RETURN_SUCCESS:
{
	CO_ProcMonitor(g_logfile,"Success inside BOAlert",NULL,NULL);

	if(APL_FAILURE == BT_Status_Completed( argv[0],
				argv[1],
				argv[2],
				l_debug_info_ptr))
		APL_GOBACK_FAIL

			EXEC SQL COMMIT;
	IS_ANY_ORA_ERROR
	return(APL_SUCCESS);
}


RETURN_FAILURE    :
{
	CO_ProcMonitor(g_logfile,"Failed inside BODAlert",l_debug_info_ptr,NULL);
	return(APL_FAILURE);
}
}

/* ********************************************************************************* */


/*int SebiRBIExFn(char *p_logfile,char **argv,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	
 FILE  *l_repfile     =  NULL;

 char l_clncode[19]=APL_NULL_STRING;
 char l_sebiregno[25]=APL_NULL_STRING;
 char l_sebiexdt[22]=APL_NULL_STRING;
 char l_rbiregno[25]=APL_NULL_STRING;
 char l_rbiregexdt[21]=APL_NULL_STRING;
 char  chr_l_inifile[PATH_LENGTH]=  APL_NULL_STRING;
 char  l_regex[30]=  APL_NULL_STRING;
 char  chr_l_intl_dir[FILEPATH_LEN] = APL_NULL_STRING;
 char  chr_l_rep_file_name[FILENAME_LEN]   = APL_NULL_STRING;
 char  chr_l_sysdate[APL_DATE_LEN]                              =  APL_NULL_STRING;
 FILE  *l_ptr_ini_file = NULL;
 FILE  *l_ptr_regexp_rep_file  =  NULL;

  INTL_REPT_STRUCT_H            *l_intl_rept_struct_ha  =NULL;
	memset(chr_l_intl_dir,NULL,sizeof(chr_l_intl_dir));

	l_intl_rept_struct_ha   = (INTL_REPT_STRUCT_H *)calloc(1, sizeof(INTL_REPT_STRUCT_H));

	APL_IF_DEBUG
		printf("Entered function SebiRBIExFn \n");

	EXEC SQL BEGIN DECLARE SECTION;
	EXEC SQL VAR l_clncode IS STRING;
	EXEC SQL VAR l_sebiregno IS STRING;
	EXEC SQL VAR l_sebiexdt IS STRING;
	EXEC SQL VAR l_rbiregno IS STRING;
	EXEC SQL VAR l_rbiregexdt IS STRING;
	EXEC SQL END DECLARE SECTION;

	EXEC SQL DECLARE reg_details CURSOR FOR SELECT RPAD(CLN_CODE,19,' '), RPAD(CLN_SEBI_REG_NO,25,' '), RPAD(TO_CHAR(CLN_SEBI_REG_EXPDT,'dd/mm/yyyy'),22,' '), RPAD(CLN_RBI_REG_NO,25,' '), RPAD(TO_CHAR(CLN_RBI_REG_EXPDT,'dd/mm/yyyy'),21,' ') FROM MT_REGDETAILS,PRO_SYS_DATE  WHERE CLN_SEBI_REG_EXPDT = PRO_SYS_DATE.SYS_DATE OR CLN_SEBI_REG_EXPDT =PRO_SYS_DATE.SYS_DATE+1 OR CLN_RBI_REG_EXPDT = PRO_SYS_DATE.SYS_DATE OR  CLN_RBI_REG_EXPDT = PRO_SYS_DATE.SYS_DATE+1; 
	IS_ANY_ORA_ERROR;

	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");


	if ((l_ptr_ini_file = fopen(chr_l_inifile,"r")) == NULL)
		return(APL_FAILURE);
	if (CO_ReadToken(l_ptr_ini_file,"INTL_REP_PATH",chr_l_intl_dir,l_debug_info_ptr) != APL_SUCCESS)
		return(APL_FAILURE);

	fflush(stdout);

	EXEC SQL SELECT to_char(SYS_DATE,'DDMMYY') INTO :chr_l_sysdate FROM PRO_SYS_DATE;
		IS_ANY_ORA_ERROR

	strcpy(l_regex,chr_l_intl_dir);
	strcat(l_regex,"REGEX");
	strcat(l_regex,chr_l_sysdate);
	strcat(l_regex,".txt");

	APL_IF_DEBUG
		printf("FILE IS |%s|\n",l_regex);

	if ((l_repfile = fopen(l_regex,"w")) == NULL)
	{
		return(APL_FAILURE);
	}

   	fprintf(l_repfile,"Client Code  		SEBI Reg. No.	   		SEBI Reg. Exp Dt.		RBI Reg. No. 			   RBI Reg. Exp Dt.\n");	
		fprintf(l_repfile,"------------------------------------------------------------------------------------------------------\n");

	EXEC SQL OPEN reg_details;

	for(;;)
	{
		APL_IF_DEBUG
			printf("Entered Cursor For Loop\n");

		EXEC SQL FETCH reg_details INTO :l_clncode,:l_sebiregno,l_sebiexdt,l_rbiregno,l_rbiregexdt;

		if(APL_ZERO_RESULT_SET)
			break;

		fprintf(l_repfile,"%s",l_clncode);
		fprintf(l_repfile,"%s",l_sebiregno);
		fprintf(l_repfile,"%s",l_sebiexdt);
		fprintf(l_repfile,"%s",l_rbiregno);
		fprintf(l_repfile,"%s",l_rbiregexdt);
		fprintf(l_repfile,"\n");


	}

		EXEC SQL CLOSE reg_details;
		fclose(l_repfile);



		memset(l_intl_rept_struct_ha,NULL,sizeof(INTL_REPT_STRUCT_H));


		strcpy(l_intl_rept_struct_ha->report_name, l_regex+strlen(chr_l_intl_dir));
		strcpy(l_intl_rept_struct_ha->report_desc, APL_BOD_DESC);
		strcpy(l_intl_rept_struct_ha->report_date, argv[2]);
		l_intl_rept_struct_ha->report_width = 100;
		strcpy(l_intl_rept_struct_ha->task_desc, argv[5]);
		strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
		strcpy(l_intl_rept_struct_ha->usr, argv[3]);


		printf(" Callin CO_Proc_DBRptIns function\n");
		if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))
		{
			APL_GOBACK_FAIL
		}

	 	APL_GOBACK_SUCCESS
	 	RETURN_SUCCESS:
	 	{
			 return (APL_SUCCESS);
	 	}

		RETURN_FAILURE:
 		{
	  		return (APL_FAILURE);
 		}
} */


/* company level limit monitoring start */


int InsSubty(char *p_logfile,char **argv,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	Alert("Entered function  InsSubty \n");
	
 FILE  *l_insubtyfile     =  NULL;


 char l_instrcode[9]=APL_NULL_STRING;
 char l_instrisin[13]=APL_NULL_STRING;
 char l_instrtype[4]=APL_NULL_STRING;
 char  chr_l_inifile[PATH_LENGTH]=  APL_NULL_STRING;
 char  l_insbty[300]=  APL_NULL_STRING;
 char  chr_l_intl_dir[FILEPATH_LEN] = APL_NULL_STRING;
 char  chr_l_rep_file_name[FILENAME_LEN]   = APL_NULL_STRING;
 char  chr_l_sysdate[APL_DATE_LEN]                              =  APL_NULL_STRING;
 int l_insbty_remain = 0;
 int l_count = 0;
 
 FILE  *l_ptr_ini_file = NULL;
 FILE  *l_ptr_regexp_rep_file  =  NULL;

  INTL_REPT_STRUCT_H            *l_intl_rept_struct_ha  =NULL;
	memset(chr_l_intl_dir,NULL,sizeof(chr_l_intl_dir));

	l_intl_rept_struct_ha   = (INTL_REPT_STRUCT_H *)calloc(1, sizeof(INTL_REPT_STRUCT_H));

	APL_IF_DEBUG
		printf("Entered function InsSubty \n");

	EXEC SQL BEGIN DECLARE SECTION;
	EXEC SQL VAR l_instrcode IS STRING;
	EXEC SQL VAR l_instrisin IS STRING;
	EXEC SQL VAR l_instrtype IS STRING;
	
	EXEC SQL END DECLARE SECTION;

		printf("\n sql error11 for cursor inssubty_details is %d ",sqlca.sqlcode);
		fflush(stdout);
		
		
		
	EXEC SQL DECLARE inssubty_details CURSOR FOR SELECT INSTR_CODE,INSTR_ISIN,INSTR_TYPE FROM MT_INSTRUMENT where INSTR_SUB_TYPE in (select MAP_VAL from PRO_SGENSTAT where MAP_TYPE ='CONVERTBLE_BON_TO_SH') and INSTR_PARENT is NULL and INSTR_DILUTED_RATIO_OLD is NULL and INSTR_DILUTED_RATIO_NEW is NULL;

	printf("\n sql error for cursor inssubty_details is %d ",sqlca.sqlcode);
	fflush(stdout);
    IS_ANY_ORA_ERROR;
	
	printf("Before memset chr_l_inifile \n"); fflush(stdout);
    /*memset(chr_l_inifile,APL_NULL_STRING,sizeof(chr_l_inifile));*/
	memset(chr_l_inifile,NULL,sizeof(chr_l_inifile));
 
    printf("Value of chr_l_inifile after memset== |%s|\n",chr_l_inifile);fflush(stdout);

	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	
	 printf("Value of chr_l_inifile after copy== |%s|\n",chr_l_inifile);
	 fflush(stdout);
	 strcat(chr_l_inifile,"intl_sun.cfg");
	
	 printf("Value of chr_l_inifile after Concat== |%s|\n",chr_l_inifile);
	 fflush(stdout);

	if ((l_ptr_ini_file = fopen(chr_l_inifile,"r")) == NULL)
		return(APL_FAILURE);
	printf("After if block");
	fflush(stdout);
	
	if (CO_ReadToken(l_ptr_ini_file,"INTL_REP_PATH",chr_l_intl_dir,l_debug_info_ptr) != APL_SUCCESS)
		return(APL_FAILURE);
    printf("Value of chr_l_intl_dir after Co_ReadToken== |%s|\n",chr_l_intl_dir);
	fflush(stdout);

	EXEC SQL SELECT to_char(SYS_DATE,'DDMMYY') INTO :chr_l_sysdate FROM PRO_SYS_DATE;
	printf("\n sql error for SYS_DATE is %d ",sqlca.sqlcode); fflush(stdout);
	IS_ANY_ORA_ERROR
		
	 printf("Before  memset l_insbty \n");
	 fflush(stdout);
    /*memset(l_insbty,APL_NULL_STRING,sizeof(l_insbty));*/
	
	memset(l_insbty,NULL,sizeof(300));
	
	printf("After  memset l_insbty == |%s|\n",l_insbty);
	
	
	
	fflush(stdout);
	
	strcpy(l_insbty,chr_l_intl_dir);
	printf("Value of l_insbty after copy chr_l_intl_dir== |%s|\n",l_insbty); fflush(stdout);
	strcat(l_insbty,"INSTRSUBTYPE");
	printf("Value of l_insbty after concat INSTRSUBTYPE== |%s|\n",l_insbty); fflush(stdout);
	strcat(l_insbty,chr_l_sysdate);
	printf("Value of l_insbty after concat chr_l_sysdate== |%s|\n",l_insbty); fflush(stdout);
	strcat(l_insbty,".txt");
	printf("Value of l_insbty after concat txt == |%s|\n",l_insbty);
fflush(stdout);

	APL_IF_DEBUG
		printf("FILE IS |%s|\n",l_insbty);fflush(stdout);

	if ((l_insubtyfile = fopen(l_insbty,"w")) == NULL)
	{
		return(APL_FAILURE);
	}

   		fprintf(l_insubtyfile," Instr Code  Instr ISIN 	Instr Type \n");	
		fprintf(l_insubtyfile,"---------------------------------------------------------------------------------------------------------------------\n");

	EXEC SQL OPEN inssubty_details;

	for(;;)
	{
		APL_IF_DEBUG
			printf("Entered Cursor For Loop\n"); fflush(stdout);

		EXEC SQL FETCH inssubty_details INTO :l_instrcode,:l_instrisin,l_instrtype;

		printf("KS -- values fetched : sqlca [%d]\n",sqlca.sqlcode);fflush(stdout);
		printf("KS --  l_instrcode  :%s\n", l_instrcode);fflush(stdout);
		printf("KS --  l_instrisin :%s\n",l_instrisin);fflush(stdout);
		printf("KS --  l_instrtype :%s\n",l_instrtype);fflush(stdout);
		//printf("KS --  l_txntype :%s\n",l_txntype);fflush(stdout);
		//printf("KS --  l_sr_fr_no :%d\n",l_sr_fr_no);fflush(stdout);
		//printf("KS --  l_sr_to_no :%d\n",l_sr_to_no);fflush(stdout);
		//printf("KS --  l_avail_qty :%d\n",l_avail_qty);fflush(stdout);

		/*if(APL_ZERO_RESULT_SET)
			break; */

		if(APL_ZERO_RESULT_SET)
           {
               
			   fprintf(l_insubtyfile,"-------------------------------------------------END-----------------------------------------------------------------\n");
			   if(l_count == 0)
			   {
					
					fprintf(l_insubtyfile,"-----------------------------ALL  ENTRY WITHIN THE LIMITS-----------------------------------------------------\n");
			   }
			   break;
           }

		l_count++;
		
		fprintf(l_insubtyfile,"%-10s ",l_instrcode);
        fprintf(l_insubtyfile,"%-15s ",l_instrisin);
		fprintf(l_insubtyfile,"%-16s ",l_instrtype);
		fprintf(l_insubtyfile,"\n");


	}
        printf("Going to close the cursor\n"); fflush(stdout);
		EXEC SQL CLOSE inssubty_details;
		printf("After close the cursor\n"); fflush(stdout);
		fclose(l_insubtyfile);
        printf("After fclose the l_insubtyfile\n"); fflush(stdout);

        fflush(stdout);
		memset(l_intl_rept_struct_ha,NULL,sizeof(INTL_REPT_STRUCT_H));
        printf("memset l_intl_rept_struct_ha\n"); fflush(stdout);

		strcpy(l_intl_rept_struct_ha->report_name, l_insbty+strlen(chr_l_intl_dir));
		
		printf("strcpy(l_intl_rept_struct_ha->report_name, l_insbty+strlen(chr_l_intl_dir)); \n"); fflush(stdout);
		strcpy(l_intl_rept_struct_ha->report_desc, APL_BOD_DESC);
		printf("strcpy(l_intl_rept_struct_ha->report_desc, APL_BOD_DESC);\n"); fflush(stdout);
		strcpy(l_intl_rept_struct_ha->report_date, argv[2]);
		printf("strcpy(l_intl_rept_struct_ha->report_date, argv[2]);"); fflush(stdout);
		l_intl_rept_struct_ha->report_width = 100;
		printf("l_intl_rept_struct_ha->report_width = 100;\n"); fflush(stdout);
		strcpy(l_intl_rept_struct_ha->task_desc, argv[5]);
		printf("strcpy(l_intl_rept_struct_ha->task_desc, argv[5]);\n"); fflush(stdout);
		strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
		printf("strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);\n"); fflush(stdout);
		strcpy(l_intl_rept_struct_ha->usr, argv[3]);
		printf("strcpy(l_intl_rept_struct_ha->usr, argv[3]);\n"); fflush(stdout);


		printf(" Callin CO_Proc_DBRptIns function\n");fflush(stdout);
		if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))
		{
			APL_GOBACK_FAIL
		}

	 	APL_GOBACK_SUCCESS
	 	RETURN_SUCCESS:
	 	{
			 return (APL_SUCCESS);
	 	}

		RETURN_FAILURE:
 		{
	  		return (APL_FAILURE);
 		}
}

/* company level limit monitoring end */