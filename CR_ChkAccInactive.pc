


   
   
   
   
   
   
   
   
   
   
   
   




#include "CO_HostStructdef.h"

EXEC SQL INCLUDE sqlca;

#define FILENAME_LEN_A			80

//main(int argc,char **argv)
int main(int argc,char **argv)//Changes done for AIX Migration
{
	DEBUG_INFO_STRUCT_H			*l_debug_info_ptr = NULL;
	FILE						*l_ptr_ini_file = NULL;
	FILE						*l_ptr_log_file = NULL;
	INTL_ENV_DATA_STRUCT_H	l_intl_envdatastruct_h;
	char						chr_l_inifile[FILENAME_LEN_A]   = APL_NULL_STRING;
	char						chr_uname[APL_USERID_LEN]   = APL_NULL_STRING;
	char						chr_passwd[APL_PASSWD_LEN]  = APL_NULL_STRING;
	char						chr_custody_id_b[APL_USERID_LEN]  = APL_NULL_STRING;
	int						int_l_flg = 0;
	int						int_retval = 0;
	char						chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	struct sqlca			sqlca;

	memset(&l_intl_envdatastruct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H));
	
	

	strcpy(l_intl_envdatastruct_h.usr, argv[3]);
	strcpy(l_intl_envdatastruct_h.h_mode, argv[4]);
	strcpy(l_intl_envdatastruct_h.processtion, argv[5]);
	strcpy(l_intl_envdatastruct_h.auth_req, argv[6]);
	strcpy(l_intl_envdatastruct_h.subprocess, argv[7]);
	strcpy(l_intl_envdatastruct_h.h_process, argv[8]);
	
	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

	if ((l_ptr_ini_file = fopen(chr_l_inifile,"r")) == NULL)
		exit(-1);

	APL_FETCH_DB_LOGIN_DETAILS(l_ptr_ini_file,chr_custody_id_b,chr_uname,chr_passwd,APL_OUT_FILE,&l_debug_info_ptr)
	
	
	
	if (CO_DB_Connection_C(chr_uname,chr_passwd,&l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL

	

	
	

	int_retval = CO_Rtv_RptFileName("3N",APL_LOGFILE_DESC,100,argv[5],argv,&l_ptr_log_file,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL
	}

	

	EXEC SQL COMMIT WORK;
	
	if (sqlca.sqlcode != 0)
	{
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL
	}

	if(strcmp(argv[9],"C") == 0)
		CO_ProcMonitor(l_ptr_log_file,"Inactive Accounts Closure",NULL,NULL);
	else
		CO_ProcMonitor(l_ptr_log_file,"Inactive Accounts Report Generation",NULL,NULL);

	CO_ProcMonitor(l_ptr_log_file,"___________________________________\n",NULL,NULL);
	
	CO_ProcMonitor(l_ptr_log_file,"Work Committed after chr_logfile creation \n",NULL,&l_intl_envdatastruct_h);

	

	if (CO_RtvSysParams(&l_debug_info_ptr) != APL_SUCCESS)
	{
		CO_ProcMonitor(l_ptr_log_file,"Unable to get system parameters - Rollback done \n",NULL,&l_intl_envdatastruct_h);
		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);
		
		EXEC SQL ROLLBACK WORK RELEASE;
		
		APL_GOBACK_FAIL	
	}

	
	 
	int_retval = CO_Proc_BtchLock(argv,l_ptr_log_file,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		CO_ProcMonitor(l_ptr_log_file,"Unable to lock BATCH_IN_PROC record - Rollback done \n",NULL,&l_intl_envdatastruct_h);
		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		EXEC SQL ROLLBACK WORK RELEASE;
		
		APL_GOBACK_FAIL
	}

	

	int_retval = MT_Proc_INAAcc(l_ptr_log_file,argv, &l_intl_envdatastruct_h,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		int_l_flg = 1;

	   CO_Proc_Exit(argv,l_ptr_log_file,&l_debug_info_ptr,int_l_flg);
		
		if (CO_ChkErr(l_debug_info_ptr) == APL_SUCCESS)
		{
			
			CO_ProcMonitor(l_ptr_log_file,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_envdatastruct_h);
			CO_FreeErrLst(&l_debug_info_ptr);

		}

		CO_ProcMonitor(l_ptr_log_file,"FAILURE from Inactive Accounts Processing \n",NULL,&l_intl_envdatastruct_h);

		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		APL_GOBACK_FAIL	
	}
	else
	{
		int_l_flg = 0;

		CO_Proc_Exit(argv,l_ptr_log_file,&l_debug_info_ptr,int_l_flg);

		if (CO_ChkErr(l_debug_info_ptr) == APL_SUCCESS)
		{
			
			CO_ProcMonitor(l_ptr_log_file,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_envdatastruct_h);
			CO_FreeErrLst(&l_debug_info_ptr);

		}

		CO_ProcMonitor(l_ptr_log_file,"SUCCESS from Inactive Accounts Processing \n",NULL,&l_intl_envdatastruct_h);

		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		APL_GOBACK_SUCCESS
	}

	RETURN_SUCCESS	: 
	{
		fclose(l_ptr_ini_file);
	   return(0);
	}

	RETURN_FAILURE	: 
	{
		fclose(l_ptr_ini_file);
  		return(-1);	
	}
}



 
 int MT_Proc_INAAcc(FILE *p_ptr_log_file,char **argv,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca			sqlca;
	char						chr_mainfuncarea[APL_MAINFUNCAREA_LEN];
	char						chr_l_condid[APL_CONDID_LEN];
	short						int_l_condexists;
	int						int_retval;
	MT_CLIENT_STRUCT_H		h_dl_client;
	MT_CLIENT_STRUCT_I		i_dl_client;
	char						chr_l_sys_date_time[APL_DATE_LEN];
	int						int_l_date_diff;
	FILE						*l_inactive_accts_rpt_file = NULL;
	FILE						*l_cls_inactive_accts_rpt_file = NULL;
	int						int_l_open_cursor;
	char						chr_l_desc[100];
	int						int_l_flg;
	int						int_l_err_cond;
	int						i;
	char						chr_l_close_flg[2] = APL_NULL_STRING;

	EXEC SQL VAR h_dl_client.h_dl_client IS STRING;
	EXEC SQL VAR h_dl_client.h_clt_brk_all IS STRING;
	EXEC SQL VAR h_dl_client.h_clnt_clr_name IS STRING;
	EXEC SQL VAR h_dl_client.h_clt_status IS STRING;

	strcpy(chr_l_close_flg,argv[9]);

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion MT_Proc_INAAcc \n",NULL,p_intl_env_data_struct_h_d);

	memset(&h_dl_client,NULL,sizeof(MT_CLIENT_STRUCT_H));
	memset(&i_dl_client,NULL,sizeof(MT_CLIENT_STRUCT_I));
	
	sqlca.sqlcode = 0;

	int_retval = CO_Rtv_RptFileName("IA","Inactive Accounts Error Report",80,argv[5],argv,&l_inactive_accts_rpt_file,l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
		APL_GOBACK_FAIL

	sleep(2);

	if(strcmp(chr_l_close_flg,"C") == 0)
		int_retval = CO_Rtv_RptFileName("IA","Closed Inactive Account Report",80,argv[5],argv,&l_cls_inactive_accts_rpt_file,l_debug_info_ptr);
	else
		int_retval = CO_Rtv_RptFileName("IA","Eligible For Closure Accounts",80,argv[5],argv,&l_cls_inactive_accts_rpt_file,l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
		APL_GOBACK_FAIL

	fprintf(l_cls_inactive_accts_rpt_file,"\n");

	for (i=0;i<80;i++)
		fprintf(l_cls_inactive_accts_rpt_file,"-");
	
	fprintf(l_cls_inactive_accts_rpt_file,"\n           ACCOUNTS INACTIVE FOR %d DAYS OR MORE (A & P 05.000.2.3)\n\n",l_mt_core_sys_params_struct_h.auto_inactive_days);
	
	fprintf(l_cls_inactive_accts_rpt_file,"               %s\n",g_mt_commonsys_params_struct_h.ca_identname);
	
	if(strcmp(chr_l_close_flg,"C") == 0) 
		fprintf(l_cls_inactive_accts_rpt_file,"\n              CLOSED INACTIVE ACCOUNTS REPORT \n\n\n");
	else
		fprintf(l_cls_inactive_accts_rpt_file,"\n              INACTIVE ACCOUNTS ELIGIBLE FOR CLOSURE \n\n\n");

	for (i=0;i<80;i++)
		fprintf(l_cls_inactive_accts_rpt_file,"-");

	fprintf(l_cls_inactive_accts_rpt_file,"\nAccount       Account Name  ");
	fprintf(l_cls_inactive_accts_rpt_file,"\n");
	
	for (i=0;i<80;i++)
		fprintf(l_cls_inactive_accts_rpt_file,"-");
	
	fprintf(l_inactive_accts_rpt_file,"\n");
	
	for (i=0;i<80;i++)
		fprintf(l_inactive_accts_rpt_file,"-");
	
	fprintf(l_inactive_accts_rpt_file,"\n         ACCOUNTS INACTIVE FOR %d DAYS OR MORE (A & P 05.000.2.3)\n\n",l_mt_core_sys_params_struct_h.auto_inactive_days);
	
	fprintf(l_inactive_accts_rpt_file,"             %s\n",g_mt_commonsys_params_struct_h.ca_identname);
	
	fprintf(l_inactive_accts_rpt_file,"\n           INACTIVE ACCOUNTS ERROR REPORT \n\n\n");
	
	for (i=0;i<80;i++)
		fprintf(l_inactive_accts_rpt_file,"-");

	fprintf(l_inactive_accts_rpt_file,"\nAccount       Account Name       Description       \n");
	
	for (i=0;i<80;i++)
		fprintf(l_inactive_accts_rpt_file,"-");
	
	fprintf(l_inactive_accts_rpt_file,"\n\n");
	
	if (CO_RtvSysDtTime(chr_l_sys_date_time,l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL

	strcpy(chr_mainfuncarea,"INACTIVE_ACCTS");
	strcpy(chr_l_condid,"VTB_ACCT");

	int_retval = CO_Chk_CntryEnabled(chr_mainfuncarea,chr_l_condid,&int_l_condexists,l_debug_info_ptr);
	if (int_retval != APL_SUCCESS)
		APL_GOBACK_FAIL

	if (int_l_condexists > 0)
	{
		if (strcmp(l_mt_core_sys_params_struct_h.ord_proc_ind,"Y") == 0)
		{
			EXEC SQL DECLARE AccountRecs1 CURSOR FOR
			SELECT * FROM MT_CLIENT
			WHERE to_date(to_char(to_date(:chr_l_sys_date_time),'DD/MM/YYYY')||' 12:00:00') - to_date(to_char(to_date(CLN_DATEOF_INPUT),'DD/MM/YYYY')||' 12:00:00') > :l_mt_core_sys_params_struct_h.auto_inactive_days
			AND cln_code != :l_mt_core_sys_params_struct_h.custody_clt_cd
			AND cln_code != :l_mt_core_sys_params_struct_h.brokerage_cd
			AND cln_code != :l_mt_core_sys_params_struct_h.vtb_clt_code;

			EXEC SQL OPEN AccountRecs1;

			int_l_open_cursor = 1;
		}
		else if (strcmp(l_mt_core_sys_params_struct_h.ord_proc_ind,"N") == 0)
		{
			EXEC SQL DECLARE AccountRecs2 CURSOR FOR
			SELECT * FROM MT_CLIENT
			WHERE to_date(to_char(to_date(:chr_l_sys_date_time),'DD/MM/YYYY')||' 12:00:00') - to_date(to_char(to_date(CLN_DATEOF_INPUT),'DD/MM/YYYY')||' 12:00:00') > :l_mt_core_sys_params_struct_h.auto_inactive_days
			AND cln_code != :l_mt_core_sys_params_struct_h.custody_clt_cd
			AND cln_code != :l_mt_core_sys_params_struct_h.vtb_clt_code;

			EXEC SQL OPEN AccountRecs2;

			int_l_open_cursor = 2;

		}
	}
	else
	{
		if (strcmp(l_mt_core_sys_params_struct_h.ord_proc_ind,"Y") == 0)
		{
			EXEC SQL DECLARE AccountRecs3 CURSOR FOR
			SELECT * FROM MT_CLIENT
			WHERE to_date(to_char(to_date(:chr_l_sys_date_time),'DD/MM/YYYY')||' 12:00:00') - to_date(to_char(to_date(CLN_DATEOF_INPUT),'DD/MM/YYYY')||' 12:00:00') > :l_mt_core_sys_params_struct_h.auto_inactive_days
			AND cln_code != :l_mt_core_sys_params_struct_h.custody_clt_cd
			AND cln_code != :l_mt_core_sys_params_struct_h.brokerage_cd;

			EXEC SQL OPEN AccountRecs3;
			
			int_l_open_cursor = 3;
		}
		else if (strcmp(l_mt_core_sys_params_struct_h.ord_proc_ind,"N") == 0)
		{
			EXEC SQL DECLARE AccountRecs4 CURSOR FOR
			SELECT * FROM MT_CLIENT
			WHERE to_date(to_char(to_date(:chr_l_sys_date_time),'DD/MM/YYYY')||' 12:00:00') - to_date(to_char(to_date(CLN_DATEOF_INPUT),'DD/MM/YYYY')||' 12:00:00') > :l_mt_core_sys_params_struct_h.auto_inactive_days
			AND cln_code != :l_mt_core_sys_params_struct_h.custody_clt_cd;

			EXEC SQL OPEN AccountRecs4;
			
			int_l_open_cursor = 4;
			
		}
	}

	IS_ANY_ORA_ERROR

	for(;;)
	{
		if (int_l_open_cursor == 1)
			EXEC SQL FETCH AccountRecs1 INTO :h_dl_client:i_dl_client;
		else if (int_l_open_cursor == 2)
			EXEC SQL FETCH AccountRecs2 INTO :h_dl_client:i_dl_client;
		else if (int_l_open_cursor == 3)
			EXEC SQL FETCH AccountRecs3 INTO :h_dl_client:i_dl_client;
		else if (int_l_open_cursor == 4)
			EXEC SQL FETCH AccountRecs4 INTO :h_dl_client:i_dl_client;

		IS_ANY_ORA_ERROR

		if (APL_ZERO_RESULT_SET)
			break;

		int_l_err_cond = 0;
		int_l_flg = 0;

		int_retval = MT_Chk_TrdHisTrd(h_dl_client.h_dl_client,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);

		if (int_retval == APL_RECS_EXIST)
			continue;
		else if (int_retval == APL_FAILURE)
			APL_GOBACK_FAIL
		else
		{
			int_retval = MT_Chk_CPEntlForAcc(h_dl_client.h_dl_client,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);

			if (int_retval == APL_RECS_EXIST)
			{
				strcpy(chr_l_desc,"Open Entitlements Exist");
			
				int_retval = MT_Prnt_OpenINAAccRpt(l_inactive_accts_rpt_file,h_dl_client.h_dl_client,h_dl_client.h_clnt_clr_name,chr_l_desc,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);
				if (int_retval != APL_SUCCESS)
					APL_GOBACK_FAIL

				int_l_err_cond = 1;
			}
			else if (int_retval == APL_FAILURE)
				APL_GOBACK_FAIL

			int_retval = MT_Chk_BillSetupForAcc(h_dl_client.h_dl_client,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);

			if (int_retval == APL_RECS_EXIST)
			{
				strcpy(chr_l_desc,"Outstanding Bills Exist");
				
				int_retval = MT_Prnt_OpenINAAccRpt(l_inactive_accts_rpt_file,h_dl_client.h_dl_client,h_dl_client.h_clnt_clr_name,chr_l_desc,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);
				
				if (int_retval != APL_SUCCESS)
					APL_GOBACK_FAIL
				
				int_l_err_cond = 1;
			}
			else if (int_retval == APL_FAILURE)
				APL_GOBACK_FAIL
			
			int_retval = MT_Chk_SafekForAcc(h_dl_client.h_dl_client,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);

			if (int_retval == APL_RECS_EXIST)
			{
				strcpy(chr_l_desc,"Positions Exist");
				
				int_retval = MT_Prnt_OpenINAAccRpt(l_inactive_accts_rpt_file,h_dl_client.h_dl_client,h_dl_client.h_clnt_clr_name,chr_l_desc,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);
				
				if (int_retval != APL_SUCCESS)
					APL_GOBACK_FAIL
				
				int_l_err_cond = 1;
			}
			else if (int_retval == APL_FAILURE)
				APL_GOBACK_FAIL
			
			int_retval = MT_Chk_TrdWithDomCP(h_dl_client.h_dl_client,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);

			if (int_retval == APL_RECS_EXIST)
			{
				strcpy(chr_l_desc,"Outstanding Transactions (CP) Exist");
				
				int_retval = MT_Prnt_OpenINAAccRpt(l_inactive_accts_rpt_file,h_dl_client.h_dl_client,h_dl_client.h_clnt_clr_name,chr_l_desc,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);
				
				if (int_retval != APL_SUCCESS)
					APL_GOBACK_FAIL
				
				int_l_err_cond = 1;
			}
			else if (int_retval == APL_FAILURE)
				APL_GOBACK_FAIL
		
			int_retval = MT_Chk_SubAccForAcc(h_dl_client.h_dl_client,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);

			if (int_retval == APL_RECS_EXIST)
			{
				strcpy(chr_l_desc,"Sub-Accounts Exist");
				
				int_retval = MT_Prnt_OpenINAAccRpt(l_inactive_accts_rpt_file,h_dl_client.h_dl_client,h_dl_client.h_clnt_clr_name,chr_l_desc,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);
				
				if (int_retval != APL_SUCCESS)
					APL_GOBACK_FAIL
				
				int_l_err_cond = 1;
			}
			else if (int_retval == APL_FAILURE)
				APL_GOBACK_FAIL
			
			int_retval = MT_Chk_OrdForAcc(h_dl_client.h_dl_client,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);

			if (int_retval == APL_RECS_EXIST)
			{
				strcpy(chr_l_desc,"Outstanding Orders Exist");
				
				int_retval = MT_Prnt_OpenINAAccRpt(l_inactive_accts_rpt_file,h_dl_client.h_dl_client,h_dl_client.h_clnt_clr_name,chr_l_desc,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);
				
				if (int_retval != APL_SUCCESS)
					APL_GOBACK_FAIL
				
				int_l_err_cond = 1;
			}
			else if (int_retval == APL_FAILURE)
				APL_GOBACK_FAIL

			if (strcmp(h_dl_client.h_clt_status,"DU") == 0)
				strcpy(chr_l_desc,"Account marked deleted");
			else if ((strcmp(h_dl_client.h_clt_status,"CU") == 0) || (strcmp(h_dl_client.h_clt_status,"CA") == 0))
				strcpy(chr_l_desc,"Account marked closed");
			else if (strcmp(h_dl_client.h_clt_status,"OU") == 0)
				strcpy(chr_l_desc,"Account marked open");
			else if ((strcmp(h_dl_client.h_clt_status,"FU") == 0) || (strcmp(h_dl_client.h_clt_status,"FA") == 0))
				strcpy(chr_l_desc,"Account marked frozen");
			else if (strcmp(h_dl_client.h_clt_status,"UU") == 0)
				strcpy(chr_l_desc,"Account not authorised");
			else 
				int_l_flg = 1;
			
			if (int_l_flg == 0)
			{
				int_retval = MT_Prnt_OpenINAAccRpt(l_inactive_accts_rpt_file,h_dl_client.h_dl_client,h_dl_client.h_clnt_clr_name,chr_l_desc,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);
				
				if (int_retval != APL_SUCCESS)
					APL_GOBACK_FAIL
				
				int_l_err_cond = 1;
			}
		}

		if (int_l_err_cond == 1)
			continue;
		
		if (strcmp(h_dl_client.h_clt_brk_all,"B") == 0)
		{
			strcpy(chr_l_desc,"Account is a broker");

			int_retval = MT_Prnt_OpenINAAccRpt(l_inactive_accts_rpt_file,h_dl_client.h_dl_client,h_dl_client.h_clnt_clr_name,chr_l_desc,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);
			if (int_retval != APL_SUCCESS)
				APL_GOBACK_FAIL

			continue;
		}

		if (strcmp(h_dl_client.h_clt_brk_all,"B") != 0) 
		{
			if(strcmp(chr_l_close_flg,"C") == 0)
			{
				EXEC SQL UPDATE MT_CLIENT
				SET STATUS = 'CA'
				WHERE cln_code = :h_dl_client.h_dl_client;

				IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
			}

			int_retval = MT_Prnt_ClosedINAAccRpt(l_cls_inactive_accts_rpt_file,h_dl_client.h_dl_client,h_dl_client.h_clnt_clr_name,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);
			if (int_retval != APL_SUCCESS)
				APL_GOBACK_FAIL
		}
	}

	if (int_l_open_cursor == 1)
		EXEC SQL CLOSE AccountRecs1;
	else if (int_l_open_cursor == 2)
		EXEC SQL CLOSE AccountRecs2;
	else if (int_l_open_cursor == 3)
		EXEC SQL CLOSE AccountRecs3;
	else if (int_l_open_cursor == 4)
		EXEC SQL CLOSE AccountRecs4;

	fprintf(l_cls_inactive_accts_rpt_file,"\n\n");
	
	fprintf(l_inactive_accts_rpt_file,"\n\n");
	
	for (i=0;i<80;i++)
		fprintf(l_cls_inactive_accts_rpt_file,"-");
	
	for (i=0;i<80;i++)
		fprintf(l_inactive_accts_rpt_file,"-");

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		int_retval = CO_Proc_RptClose(l_inactive_accts_rpt_file,l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
			return(APL_FAILURE);
		
		int_retval = CO_Proc_RptClose(l_cls_inactive_accts_rpt_file,l_debug_info_ptr);
		if (int_retval != APL_SUCCESS)
			return(APL_FAILURE);

		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion MT_Proc_INAAcc successfully \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		int_retval = CO_Proc_RptClose(l_inactive_accts_rpt_file,l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
			return(APL_FAILURE);
		
		int_retval = CO_Proc_RptClose(l_cls_inactive_accts_rpt_file,l_debug_info_ptr);
		if (int_retval != APL_SUCCESS)
			return(APL_FAILURE);

		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion MT_Proc_INAAcc with failure \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_FAILURE);
	}
}


 
 int CO_Proc_BtchLock(char **argv,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca					sqlca;
   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;

EXEC SQL VAR chr_g_restart_data is string;

	sqlca.sqlcode = 0;
		
	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CO_Proc_BtchLock\n",NULL,NULL);

	EXEC SQL SELECT processing_status INTO :chr_g_restart_data:g_restart_data_i
	FROM SYS_BATCHPROC
	WHERE process_name = :argv[0]
	AND   proc_init = :argv[1]
	AND STARTDATE = :argv[2]
	AND status = 'started'
	FOR UPDATE OF processing_status,status;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_BtchLock successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_BtchLock with failure \n",NULL,NULL);

		return(APL_FAILURE);
	}
}


 
 int CO_Proc_Exit(char **argv,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr,int p_flg)
 {
	struct sqlca					sqlca;
	char								chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;

	sqlca.sqlcode = 0;
		
	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CO_Proc_Exit\n",NULL,NULL);
	if (p_flg == 0)
	{
		

		if (CO_ChkErr(*l_debug_info_ptr) != APL_SUCCESS)
		{
			memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
			if(strcmp(argv[9],"C") == 0)	
				sprintf(chr_l_buf,"Finished Inactive Accounts Closure");
			else
				sprintf(chr_l_buf,"Finished Inactive Accounts Report Generation");

			EXEC SQL UPDATE SYS_BATCHPROC
			SET stat_det = :chr_l_buf,
				 status = 'completed'
			WHERE process_name = :argv[0]
			AND   proc_init = :argv[1]
			AND STARTDATE = :argv[2]
			AND status = 'started';
	
			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

		}

		EXEC SQL COMMIT WORK RELEASE;

		CO_ProcMonitor(p_ptr_log_file,"Work Committed \n",NULL,NULL);
	}
	else if (p_flg == 1)
	{
		EXEC SQL ROLLBACK WORK RELEASE;

		CO_ProcMonitor(p_ptr_log_file,"Rollback done \n",NULL,NULL);
	}

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_Exit successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_Exit with failure \n",NULL,NULL);

		return(APL_FAILURE);
	}
}


 
 int CO_DB_Connection_C(char *p_username,char *p_passwd,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca					sqlca;

	sqlca.sqlcode = 0;
		
	CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CO_DB_Connection_C\n",NULL,NULL);
	
	EXEC SQL CONNECT :p_username IDENTIFIED BY :p_passwd;

	if (sqlca.sqlcode != 0)
		APL_GOBACK_FAIL

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(APL_OUT_FILE, "Leaving processtion CO_DB_Connection_C successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(APL_OUT_FILE, "Leaving processtion CO_DB_Connection_C with failure \n",NULL,NULL);

		return(APL_FAILURE);
	}
}


 
 int MT_Chk_TrdHisTrd(char *chr_p_acct,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	EXEC SQL BEGIN DECLARE SECTION;

	struct sqlca					sqlca;
	int								int_l_num_rows_trade = 0;
	int								int_l_num_rows_histrade = 0;
	char								chr_l_sys_date_time[APL_DATE_LEN];
	
	EXEC SQL END DECLARE SECTION;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion MT_Chk_TrdHisTrd\n",NULL,p_intl_env_data_struct_h_d);
	
	sqlca.sqlcode = 0;
	
	if (CO_RtvSysDtTime(chr_l_sys_date_time,l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL

	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows_trade
	FROM DL_DEAL
	WHERE client = :chr_p_acct
	AND to_date(to_char(to_date(:chr_l_sys_date_time),'DD/MM/YYYY')||' 12:00:00') - to_date(to_char(to_date(setl_date),'DD/MM/YYYY')||' 12:00:00') < :l_mt_core_sys_params_struct_h.auto_inactive_days;


	IS_ANY_ORA_ERROR
	
	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows_histrade
	FROM DL_HISDEAL
	WHERE client = :chr_p_acct
	AND to_date(to_char(to_date(:chr_l_sys_date_time),'DD/MM/YYYY')||' 12:00:00') - to_date(to_char(to_date(setl_date),'DD/MM/YYYY')||' 12:00:00') < :l_mt_core_sys_params_struct_h.auto_inactive_days;


	IS_ANY_ORA_ERROR

	if ((int_l_num_rows_trade == 0) && (int_l_num_rows_histrade == 0))
		APL_GOBACK_SUCCESS
	else
		APL_GOBACK_FAIL

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion MT_Chk_TrdHisTrd successfully \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion MT_Chk_TrdHisTrd with failure \n",NULL,p_intl_env_data_struct_h_d);

		if (sqlca.sqlcode == 0)
			return(APL_RECS_EXIST);
		else
			return(APL_FAILURE);
	}
}


 
 int MT_Prnt_ClosedINAAccRpt(FILE *p_cls_inactive_cltts_rpt_file,char *chr_p_acct,char *p_cltt_name,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	CO_ProcMonitor(p_ptr_log_file,"Entered processtion MT_Prnt_ClosedINAAccRpt\n",NULL,p_intl_env_data_struct_h_d);
	
	fprintf(p_cls_inactive_cltts_rpt_file,"\n");
	
	fprintf(p_cls_inactive_cltts_rpt_file,"%-14s%-14s\n",chr_p_acct,p_cltt_name);
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion MT_Prnt_ClosedINAAccRpt successfuly \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion MT_Prnt_ClosedINAAccRpt with failure \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_FAILURE);
	}
}


 
 int MT_Prnt_OpenINAAccRpt(FILE *p_inactive_cltts_rpt_file,char *chr_p_acct,char *p_cltt_name,char *p_desc,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	CO_ProcMonitor(p_ptr_log_file,"Entered processtion MT_Prnt_OpenINAAccRpt\n",NULL,p_intl_env_data_struct_h_d);
	
	fprintf(p_inactive_cltts_rpt_file,"\n");
	
	fprintf(p_inactive_cltts_rpt_file,"%-14s%-19s%-18s\n",chr_p_acct,p_cltt_name,p_desc);

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion MT_Prnt_OpenINAAccRpt successfully \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion MT_Prnt_OpenINAAccRpt with failure \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_FAILURE);
	}
}
 
 int MT_Chk_CPEntlForAcc(char *chr_p_acct,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {

	EXEC SQL BEGIN DECLARE SECTION;

	struct sqlca sqlca;
	int			 int_l_num_rows = 0;
	
	EXEC SQL END DECLARE SECTION;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion MT_Chk_CPEntlForAcc \n",NULL,p_intl_env_data_struct_h_d);

	sqlca.sqlcode = 0;

	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows
	FROM CAENTITLEMENT
	WHERE client = :chr_p_acct
	AND   status != 'CP';/*Smita - Changed Col Name - HDFCCA Base Version*/

	IS_ANY_ORA_ERROR

	if (int_l_num_rows == 0)
		APL_GOBACK_SUCCESS
	else
		APL_GOBACK_FAIL

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion MT_Chk_CPEntlForAcc successfully \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion MT_Chk_CPEntlForAcc with failure \n",NULL,p_intl_env_data_struct_h_d);

		if (sqlca.sqlcode == 0)
			return(APL_RECS_EXIST);
		else
			return(APL_FAILURE);
	}
}
	
int MT_Chk_BillSetupForAcc(char *chr_p_acct,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;

	struct sqlca sqlca;
	int			 int_l_num_rows = 0;
	
	EXEC SQL END DECLARE SECTION;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion MT_Chk_BillSetupForAcc \n",NULL,p_intl_env_data_struct_h_d);

	sqlca.sqlcode = 0;

	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows
	FROM IV_CLIENTSETUP
	WHERE client = :chr_p_acct
	AND   total_osamount > 0;

	IS_ANY_ORA_ERROR

	if (int_l_num_rows == 0)
		APL_GOBACK_SUCCESS
	else
		APL_GOBACK_FAIL

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion MT_Chk_BillSetupForAcc successfully \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion MT_Chk_BillSetupForAcc with failure \n",NULL,p_intl_env_data_struct_h_d);

		if (sqlca.sqlcode == 0)
			return(APL_RECS_EXIST);
		else
			return(APL_FAILURE);
	}
}
 
int MT_Chk_SafekForAcc(char *chr_p_acct,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;

	struct sqlca sqlca;
	int			 int_l_num_rows = 0;
	
	EXEC SQL END DECLARE SECTION;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion MT_Chk_SafekForAcc \n",NULL,p_intl_env_data_struct_h_d);

	sqlca.sqlcode = 0;

	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows
	FROM DL_SAFEK
	WHERE client = :chr_p_acct;

	IS_ANY_ORA_ERROR

	if (int_l_num_rows == 0)
		APL_GOBACK_SUCCESS
	else
		APL_GOBACK_FAIL

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion MT_Chk_SafekForAcc successfully \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion MT_Chk_SafekForAcc with failure \n",NULL,p_intl_env_data_struct_h_d);

		if (sqlca.sqlcode == 0)
			return(APL_RECS_EXIST);
		else
			return(APL_FAILURE);
	}
}

int MT_Chk_TrdWithDomCP(char *chr_p_acct,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;

	struct sqlca sqlca;
	int			 int_l_num_rows = 0;
	
	EXEC SQL END DECLARE SECTION;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion MT_Chk_TrdWithDomCP \n",NULL,p_intl_env_data_struct_h_d);

	sqlca.sqlcode = 0;

	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows
	FROM DL_DEAL
	WHERE domestic_cpclt = :chr_p_acct;

	IS_ANY_ORA_ERROR

	if (int_l_num_rows == 0)
		APL_GOBACK_SUCCESS
	else
		APL_GOBACK_FAIL

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion MT_Chk_TrdWithDomCP successfully \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion MT_Chk_TrdWithDomCP with failure \n",NULL,p_intl_env_data_struct_h_d);

		if (sqlca.sqlcode == 0)
			return(APL_RECS_EXIST);
		else
			return(APL_FAILURE);
	}
}

int MT_Chk_SubAccForAcc(char *chr_p_acct,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;

	struct sqlca sqlca;
	int			 int_h_num_rows = 0;
	char			 h_clt_status[APL_STATUS_LEN];
	
	EXEC SQL END DECLARE SECTION;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion MT_Chk_SubAccForAcc \n",NULL,p_intl_env_data_struct_h_d);

	sqlca.sqlcode = 0;

	strcpy((char *)h_clt_status, STATUS_CLS_AUTH);

	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_h_num_rows
	FROM MT_CLIENT
	WHERE cln_master = :chr_p_acct
	AND STATUS != :h_clt_status
	AND cln_code != :chr_p_acct;

	IS_ANY_ORA_ERROR

	if (int_h_num_rows == 0)
		APL_GOBACK_SUCCESS
	else
		APL_GOBACK_FAIL

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion MT_Chk_SubAccForAcc successfully \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion MT_Chk_SubAccForAcc with failure \n",NULL,p_intl_env_data_struct_h_d);

		if (sqlca.sqlcode == 0)
			return(APL_RECS_EXIST);
		else
			return(APL_FAILURE);
	}
}

int MT_Chk_OrdForAcc(char *chr_p_acct,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;

	struct sqlca sqlca;
	int			 int_l_num_rows = 0;
	
	EXEC SQL END DECLARE SECTION;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion MT_Chk_OrdForAcc \n",NULL,p_intl_env_data_struct_h_d);

	sqlca.sqlcode = 0;

	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows
	FROM OR_ORDERDETAILS
	WHERE client = :chr_p_acct;

	IS_ANY_ORA_ERROR

	if (int_l_num_rows == 0)
		APL_GOBACK_SUCCESS
	else
		APL_GOBACK_FAIL

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion MT_Chk_OrdForAcc successfully \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion MT_Chk_OrdForAcc with failure \n",NULL,p_intl_env_data_struct_h_d);

		if (sqlca.sqlcode == 0)
			return(APL_RECS_EXIST);
		else
			return(APL_FAILURE);
	}
}
