/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to 
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or 
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         :	 				Maintenance
 *
 * File Name           :					Daemon_MT_DM.pc
 *
 * Description         :					Contains all Wrapper Functions for
	*												different Units in Maintenance.
 *
 *           
 *
 *            Version Control Block
 *
 * Date        Version		Author         Description					RFS No.
 * ---------   --------	 --------------  -----------------			----------
 *  
 *********************************************************************/
   
#include "stdio_64.h"
#include <unistd.h>
#include "DM_Interface.h"
EXEC SQL INCLUDE SQLCA;
PRO_REQUEST_MT_STRUCT_H		*l_request_mt = (PRO_REQUEST_MT_STRUCT_H  *)NULL;
DEBUG_INFO_STRUCT_H 			**l_debug_info_ptr ;
DEBUG_INFO_STRUCT_H         *l_debug_info_struct_h_tmp=NULL; 

int main(int argc,char **argv)  //AIX-Warnings Removal
{
	char 								chr_h_error_desc[4000];
	char l_rowid[APL_ROWID_LEN] = APL_NULL_STRING;
	short i_rowid		=	0;
	PRO_REQUEST_MT_STRUCT_I		*i_request_mt = (PRO_REQUEST_MT_STRUCT_I  *)NULL;
	INTL_ENV_DATA_STRUCT_H		*p_intlenv_data_struct_h = (INTL_ENV_DATA_STRUCT_H  *)NULL;
	int l_sleep_seconds =0,l_sleep_microseconds = 0;//AIX Warning Removal
	char l_data_fld_sep_str[2];
	int int_ret_val;
	p_intlenv_data_struct_h =  (INTL_ENV_DATA_STRUCT_H *)calloc(1,sizeof(INTL_ENV_DATA_STRUCT_H));
	APL_MALLOC_FAIL(p_intlenv_data_struct_h);
	memset(p_intlenv_data_struct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H));
	l_request_mt =  (PRO_REQUEST_MT_STRUCT_H *)calloc(1,sizeof(PRO_REQUEST_MT_STRUCT_H));
	APL_MALLOC_FAIL(l_request_mt);
	memset(l_request_mt,NULL,sizeof(PRO_REQUEST_MT_STRUCT_H));
	i_request_mt =  (PRO_REQUEST_MT_STRUCT_I *)calloc(1,sizeof(PRO_REQUEST_MT_STRUCT_I));
	APL_MALLOC_FAIL(i_request_mt);
	memset(i_request_mt,NULL,sizeof(PRO_REQUEST_MT_STRUCT_I));
	if ( ( l_debug_info_struct_h_tmp = (DEBUG_INFO_STRUCT_H *)calloc(1,sizeof(DEBUG_INFO_STRUCT_H)) ) == NULL )
		APL_GOBACK_FAIL ;
	if ( ( (l_debug_info_ptr) = (DEBUG_INFO_STRUCT_H **)calloc(1,sizeof(DEBUG_INFO_STRUCT_H *)) ) == NULL )	
		APL_GOBACK_FAIL ;
	if ( argc != 2)
	{
		printf("\n Invalid sleep time for daemon ... \n ");
		APL_GOBACK_FAIL
	}
	else
	{
		printf("\n ******************  Server Started With Sleep Time :%s:****************\n",argv[1]);
		sscanf(argv[1],"%d.%d",&l_sleep_seconds,&l_sleep_microseconds);
		printf("sleep time |%d|%d|\n",l_sleep_seconds,l_sleep_microseconds);//AIX Warning Removal
		l_sleep_microseconds = l_sleep_microseconds * 10000;	
	}
	if(CO_Get_DBConnect(l_debug_info_ptr) == APL_FAILURE)
	{
		printf("Failed|||\n");
		APL_GOBACK_FAIL
	}
	if ( CO_RtvSysParams(l_debug_info_ptr) == APL_FAILURE)
	{
		printf("\nReturned unsuccessfully from CO_RtvSysParams processtion\n");
		APL_GOBACK_FAIL
	}
	EXEC SQL UPDATE PRO_DAEMON_STATUS SET STATUS = 1 where PROC_NAME = 'Daemon_MT_DM';
	IS_ANY_ORA_ERROR;
//AIX Warning Removal
	l_data_fld_sep_str[0] = DATA_FIELD_SEPRTR;
	l_data_fld_sep_str[1] = APL_NULL_CHAR;
	while(1)
	{
//AIX Warning Removal
		CO_FreeErrLst(l_debug_info_ptr);
		CO_FreeErrLst(&l_debug_info_struct_h_tmp);
		memset(l_rowid,'\0',sizeof(l_rowid));
		memset(l_request_mt,0,sizeof(l_request_mt));
		memset(i_request_mt,0,sizeof(l_request_mt));
	   memset(p_intlenv_data_struct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H));
		i_rowid = 0;
		if(l_sleep_seconds != 0)
		{
			sleep(l_sleep_seconds);
		}
		usleep(l_sleep_microseconds);
		EXEC SQL SELECT ROWID INTO :l_rowid:i_rowid from PRO_REQUEST_MT where 
		REQUEST_SEQ = (SELECT MIN(REQUEST_SEQ) FROM PRO_REQUEST_MT WHERE STATUS = '0') and rownum < 2 FOR UPDATE NOWAIT;	
		if (sqlca.sqlcode == -54)
		{
			continue;
		}
		IS_ANY_ORA_ERROR
		if (sqlca.sqlcode == 1403)
		{
			EXEC SQL COMMIT;
			IS_ANY_ORA_ERROR;
			continue;
		}
		EXEC SQL UPDATE PRO_REQUEST_MT SET STATUS = '1' where ROWID=:l_rowid;
		IS_ANY_ORA_ERROR
		EXEC SQL COMMIT;
		IS_ANY_ORA_ERROR
		
		EXEC SQL SELECT *
		INTO :l_request_mt:i_request_mt
		from PRO_REQUEST_MT where ROWID=:l_rowid FOR UPDATE NOWAIT;
		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"PRO_REQUEST_MT","FATAL ERR","ROWID");
		strcat(l_request_mt -> h_environ_data,l_data_fld_sep_str);
		strcat(l_request_mt -> h_proc_data,l_data_fld_sep_str);
		strcat(l_request_mt -> h_error_det,l_data_fld_sep_str);
	
		int_ret_val = CO_Rtv_EnvStruct(p_intlenv_data_struct_h,l_request_mt -> h_environ_data);
		if (strlen(l_request_mt -> h_error_det) != 0)
		{
			int_ret_val = CO_Rtv_ErrStruct(l_request_mt -> h_error_det,l_debug_info_ptr);
		}
	/** Code Will be present here **/
	/*
else if (strcmp(l_request_mt -> h_proc_name,"wrp_ASSETHOLDING_VW") == 0)
{
INTL_WARNING;
l_assetholding_vw_struct_h =  (ASSETHOLDING_VW_STRUCT_H *)calloc(1,sizeof(ASSETHOLDING_VW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_assetholding_vw_struct_h);
memset(l_assetholding_vw_struct_h,NULL,sizeof(ASSETHOLDING_VW_STRUCT_H));
int_ret_val = Populate_ASSETHOLDING_VW(l_assetholding_vw_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdASSETHOLDING_VW\n",NULL,NULL);
if((MT_UpdASSETHOLDING_VW(l_assetholding_vw_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdASSETHOLDING_VWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdASSETHOLDING_VWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_assetholding_vw_struct_h);
}
*/






if (strcmp(l_request_mt -> h_proc_name,"wrp_AUDIT_LOG") == 0)
{
INTL_WARNING;
l_audit_log_struct_h =  (AUDIT_LOG_STRUCT_H *)calloc(1,sizeof(AUDIT_LOG_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_audit_log_struct_h);
memset(l_audit_log_struct_h,NULL,sizeof(AUDIT_LOG_STRUCT_H));
int_ret_val = Populate_AUDIT_LOG(l_audit_log_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdAUDIT_LOG\n",NULL,NULL);
if((MT_UpdAUDIT_LOG(l_audit_log_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdAUDIT_LOGSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdAUDIT_LOGFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_audit_log_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_BACK_GN_ENTITY_PICKLIST") == 0)
{
INTL_WARNING;
l_back_gn_entity_picklist_struct_h =  (BACK_GN_ENTITY_PICKLIST_STRUCT_H *)calloc(1,sizeof(BACK_GN_ENTITY_PICKLIST_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_back_gn_entity_picklist_struct_h);
memset(l_back_gn_entity_picklist_struct_h,NULL,sizeof(BACK_GN_ENTITY_PICKLIST_STRUCT_H));
int_ret_val = Populate_BACK_GN_ENTITY_PICKLIST(l_back_gn_entity_picklist_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdBACK_GN_ENTITY_PICKLIST\n",NULL,NULL);
if((MT_UpdBACK_GN_ENTITY_PICKLIST(l_back_gn_entity_picklist_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdBACK_GN_ENTITY_PICKLISTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdBACK_GN_ENTITY_PICKLISTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_back_gn_entity_picklist_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_BACK_MT_CLIENT") == 0)
{
INTL_WARNING;
l_back_mt_client_struct_h =  (BACK_MT_CLIENT_STRUCT_H *)calloc(1,sizeof(BACK_MT_CLIENT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_back_mt_client_struct_h);
memset(l_back_mt_client_struct_h,NULL,sizeof(BACK_MT_CLIENT_STRUCT_H));
int_ret_val = Populate_BACK_MT_CLIENT(l_back_mt_client_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdBACK_MT_CLIENT\n",NULL,NULL);
if((MT_UpdBACK_MT_CLIENT(l_back_mt_client_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdBACK_MT_CLIENTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdBACK_MT_CLIENTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_back_mt_client_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CAARCHCHEQUE") == 0)
{
INTL_WARNING;
l_caarchcheque_struct_h =  (CAARCHCHEQUE_STRUCT_H *)calloc(1,sizeof(CAARCHCHEQUE_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_caarchcheque_struct_h);
memset(l_caarchcheque_struct_h,NULL,sizeof(CAARCHCHEQUE_STRUCT_H));
int_ret_val = Populate_CAARCHCHEQUE(l_caarchcheque_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCAARCHCHEQUE\n",NULL,NULL);
if((MT_UpdCAARCHCHEQUE(l_caarchcheque_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAARCHCHEQUESUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAARCHCHEQUEFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_caarchcheque_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CAARCHCLAIM") == 0)
{
INTL_WARNING;
l_caarchclaim_struct_h =  (CAARCHCLAIM_STRUCT_H *)calloc(1,sizeof(CAARCHCLAIM_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_caarchclaim_struct_h);
memset(l_caarchclaim_struct_h,NULL,sizeof(CAARCHCLAIM_STRUCT_H));
int_ret_val = Populate_CAARCHCLAIM(l_caarchclaim_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCAARCHCLAIM\n",NULL,NULL);
if((MT_UpdCAARCHCLAIM(l_caarchclaim_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAARCHCLAIMSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAARCHCLAIMFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_caarchclaim_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CAARCHMESGLNK") == 0)
{
INTL_WARNING;
l_caarchmesglnk_struct_h =  (CAARCHMESGLNK_STRUCT_H *)calloc(1,sizeof(CAARCHMESGLNK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_caarchmesglnk_struct_h);
memset(l_caarchmesglnk_struct_h,NULL,sizeof(CAARCHMESGLNK_STRUCT_H));
int_ret_val = Populate_CAARCHMESGLNK(l_caarchmesglnk_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCAARCHMESGLNK\n",NULL,NULL);
if((MT_UpdCAARCHMESGLNK(l_caarchmesglnk_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAARCHMESGLNKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAARCHMESGLNKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_caarchmesglnk_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CAARCHNOTE") == 0)
{
INTL_WARNING;
l_caarchnote_struct_h =  (CAARCHNOTE_STRUCT_H *)calloc(1,sizeof(CAARCHNOTE_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_caarchnote_struct_h);
memset(l_caarchnote_struct_h,NULL,sizeof(CAARCHNOTE_STRUCT_H));
int_ret_val = Populate_CAARCHNOTE(l_caarchnote_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCAARCHNOTE\n",NULL,NULL);
if((MT_UpdCAARCHNOTE(l_caarchnote_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAARCHNOTESUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAARCHNOTEFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_caarchnote_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CAARCHRTSPROC") == 0)
{
INTL_WARNING;
l_caarchrtsproc_struct_h =  (CAARCHRTSPROC_STRUCT_H *)calloc(1,sizeof(CAARCHRTSPROC_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_caarchrtsproc_struct_h);
memset(l_caarchrtsproc_struct_h,NULL,sizeof(CAARCHRTSPROC_STRUCT_H));
int_ret_val = Populate_CAARCHRTSPROC(l_caarchrtsproc_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCAARCHRTSPROC\n",NULL,NULL);
if((MT_UpdCAARCHRTSPROC(l_caarchrtsproc_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAARCHRTSPROCSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAARCHRTSPROCFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_caarchrtsproc_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CAAUTOEVENT") == 0)
{
INTL_WARNING;
l_caautoevent_struct_h =  (CAAUTOEVENT_STRUCT_H *)calloc(1,sizeof(CAAUTOEVENT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_caautoevent_struct_h);
memset(l_caautoevent_struct_h,NULL,sizeof(CAAUTOEVENT_STRUCT_H));
int_ret_val = Populate_CAAUTOEVENT(l_caautoevent_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCAAUTOEVENT\n",NULL,NULL);
if((MT_UpdCAAUTOEVENT(l_caautoevent_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAAUTOEVENTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAAUTOEVENTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_caautoevent_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CABACKSETTLE") == 0)
{
INTL_WARNING;
l_cabacksettle_struct_h =  (CABACKSETTLE_STRUCT_H *)calloc(1,sizeof(CABACKSETTLE_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_cabacksettle_struct_h);
memset(l_cabacksettle_struct_h,NULL,sizeof(CABACKSETTLE_STRUCT_H));
int_ret_val = Populate_CABACKSETTLE(l_cabacksettle_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCABACKSETTLE\n",NULL,NULL);
if((MT_UpdCABACKSETTLE(l_cabacksettle_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCABACKSETTLESUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCABACKSETTLEFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_cabacksettle_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CACHEQUE") == 0)
{
INTL_WARNING;
l_cacheque_struct_h =  (CACHEQUE_STRUCT_H *)calloc(1,sizeof(CACHEQUE_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_cacheque_struct_h);
memset(l_cacheque_struct_h,NULL,sizeof(CACHEQUE_STRUCT_H));
int_ret_val = Populate_CACHEQUE(l_cacheque_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCACHEQUE\n",NULL,NULL);
if((MT_UpdCACHEQUE(l_cacheque_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCACHEQUESUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCACHEQUEFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_cacheque_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CACHEQUEMG") == 0)
{
INTL_WARNING;
l_cachequemg_struct_h =  (CACHEQUEMG_STRUCT_H *)calloc(1,sizeof(CACHEQUEMG_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_cachequemg_struct_h);
memset(l_cachequemg_struct_h,NULL,sizeof(CACHEQUEMG_STRUCT_H));
int_ret_val = Populate_CACHEQUEMG(l_cachequemg_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCACHEQUEMG\n",NULL,NULL);
if((MT_UpdCACHEQUEMG(l_cachequemg_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCACHEQUEMGSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCACHEQUEMGFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_cachequemg_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CACHGEVENT") == 0)
{
INTL_WARNING;
l_cachgevent_struct_h =  (CACHGEVENT_STRUCT_H *)calloc(1,sizeof(CACHGEVENT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_cachgevent_struct_h);
memset(l_cachgevent_struct_h,NULL,sizeof(CACHGEVENT_STRUCT_H));
int_ret_val = Populate_CACHGEVENT(l_cachgevent_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCACHGEVENT\n",NULL,NULL);
if((MT_UpdCACHGEVENT(l_cachgevent_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCACHGEVENTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCACHGEVENTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_cachgevent_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CAENTITLEMENT") == 0)
{
INTL_WARNING;
l_caentitlement_struct_h =  (CAENTITLEMENT_STRUCT_H *)calloc(1,sizeof(CAENTITLEMENT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_caentitlement_struct_h);
memset(l_caentitlement_struct_h,NULL,sizeof(CAENTITLEMENT_STRUCT_H));
int_ret_val = Populate_CAENTITLEMENT(l_caentitlement_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCAENTITLEMENT\n",NULL,NULL);
if((MT_UpdCAENTITLEMENT(l_caentitlement_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAENTITLEMENTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAENTITLEMENTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_caentitlement_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CAENTITLEMENTMG") == 0)
{
INTL_WARNING;
l_caentitlementmg_struct_h =  (CAENTITLEMENTMG_STRUCT_H *)calloc(1,sizeof(CAENTITLEMENTMG_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_caentitlementmg_struct_h);
memset(l_caentitlementmg_struct_h,NULL,sizeof(CAENTITLEMENTMG_STRUCT_H));
int_ret_val = Populate_CAENTITLEMENTMG(l_caentitlementmg_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCAENTITLEMENTMG\n",NULL,NULL);
if((MT_UpdCAENTITLEMENTMG(l_caentitlementmg_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAENTITLEMENTMGSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAENTITLEMENTMGFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_caentitlementmg_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CAENTITLMENT_VER") == 0)
{
INTL_WARNING;
l_caentitlment_ver_struct_h =  (CAENTITLMENT_VER_STRUCT_H *)calloc(1,sizeof(CAENTITLMENT_VER_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_caentitlment_ver_struct_h);
memset(l_caentitlment_ver_struct_h,NULL,sizeof(CAENTITLMENT_VER_STRUCT_H));
int_ret_val = Populate_CAENTITLMENT_VER(l_caentitlment_ver_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCAENTITLMENT_VER\n",NULL,NULL);
if((MT_UpdCAENTITLMENT_VER(l_caentitlment_ver_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAENTITLMENT_VERSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAENTITLMENT_VERFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_caentitlment_ver_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CAEVENT") == 0)
{
INTL_WARNING;
l_caevent_struct_h =  (CAEVENT_STRUCT_H *)calloc(1,sizeof(CAEVENT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_caevent_struct_h);
memset(l_caevent_struct_h,NULL,sizeof(CAEVENT_STRUCT_H));
int_ret_val = Populate_CAEVENT(l_caevent_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCAEVENT\n",NULL,NULL);
if((MT_UpdCAEVENT(l_caevent_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAEVENTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAEVENTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_caevent_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CAEVENTMG") == 0)
{
INTL_WARNING;
l_caeventmg_struct_h =  (CAEVENTMG_STRUCT_H *)calloc(1,sizeof(CAEVENTMG_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_caeventmg_struct_h);
memset(l_caeventmg_struct_h,NULL,sizeof(CAEVENTMG_STRUCT_H));
int_ret_val = Populate_CAEVENTMG(l_caeventmg_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCAEVENTMG\n",NULL,NULL);
if((MT_UpdCAEVENTMG(l_caeventmg_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAEVENTMGSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAEVENTMGFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_caeventmg_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CAGLPYMT") == 0)
{
INTL_WARNING;
l_caglpymt_struct_h =  (CAGLPYMT_STRUCT_H *)calloc(1,sizeof(CAGLPYMT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_caglpymt_struct_h);
memset(l_caglpymt_struct_h,NULL,sizeof(CAGLPYMT_STRUCT_H));
int_ret_val = Populate_CAGLPYMT(l_caglpymt_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCAGLPYMT\n",NULL,NULL);
if((MT_UpdCAGLPYMT(l_caglpymt_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAGLPYMTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAGLPYMTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_caglpymt_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CALOGAUTOEVENT") == 0)
{
INTL_WARNING;
l_calogautoevent_struct_h =  (CALOGAUTOEVENT_STRUCT_H *)calloc(1,sizeof(CALOGAUTOEVENT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_calogautoevent_struct_h);
memset(l_calogautoevent_struct_h,NULL,sizeof(CALOGAUTOEVENT_STRUCT_H));
int_ret_val = Populate_CALOGAUTOEVENT(l_calogautoevent_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCALOGAUTOEVENT\n",NULL,NULL);
if((MT_UpdCALOGAUTOEVENT(l_calogautoevent_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCALOGAUTOEVENTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCALOGAUTOEVENTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_calogautoevent_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CAMESGLINK") == 0)
{
INTL_WARNING;
l_camesglink_struct_h =  (CAMESGLINK_STRUCT_H *)calloc(1,sizeof(CAMESGLINK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_camesglink_struct_h);
memset(l_camesglink_struct_h,NULL,sizeof(CAMESGLINK_STRUCT_H));
int_ret_val = Populate_CAMESGLINK(l_camesglink_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCAMESGLINK\n",NULL,NULL);
if((MT_UpdCAMESGLINK(l_camesglink_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAMESGLINKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAMESGLINKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_camesglink_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CANOTE") == 0)
{
INTL_WARNING;
l_canote_struct_h =  (CANOTE_STRUCT_H *)calloc(1,sizeof(CANOTE_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_canote_struct_h);
memset(l_canote_struct_h,NULL,sizeof(CANOTE_STRUCT_H));
int_ret_val = Populate_CANOTE(l_canote_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCANOTE\n",NULL,NULL);
if((MT_UpdCANOTE(l_canote_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCANOTESUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCANOTEFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_canote_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CANOTIFY") == 0)
{
INTL_WARNING;
l_canotify_struct_h =  (CANOTIFY_STRUCT_H *)calloc(1,sizeof(CANOTIFY_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_canotify_struct_h);
memset(l_canotify_struct_h,NULL,sizeof(CANOTIFY_STRUCT_H));
int_ret_val = Populate_CANOTIFY(l_canotify_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCANOTIFY\n",NULL,NULL);
if((MT_UpdCANOTIFY(l_canotify_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCANOTIFYSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCANOTIFYFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_canotify_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CAREPLY") == 0)
{
INTL_WARNING;
l_careply_struct_h =  (CAREPLY_STRUCT_H *)calloc(1,sizeof(CAREPLY_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_careply_struct_h);
memset(l_careply_struct_h,NULL,sizeof(CAREPLY_STRUCT_H));
int_ret_val = Populate_CAREPLY(l_careply_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCAREPLY\n",NULL,NULL);
if((MT_UpdCAREPLY(l_careply_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAREPLYSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAREPLYFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_careply_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CAREPLYSPLIT") == 0)
{
INTL_WARNING;
l_careplysplit_struct_h =  (CAREPLYSPLIT_STRUCT_H *)calloc(1,sizeof(CAREPLYSPLIT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_careplysplit_struct_h);
memset(l_careplysplit_struct_h,NULL,sizeof(CAREPLYSPLIT_STRUCT_H));
int_ret_val = Populate_CAREPLYSPLIT(l_careplysplit_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCAREPLYSPLIT\n",NULL,NULL);
if((MT_UpdCAREPLYSPLIT(l_careplysplit_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAREPLYSPLITSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCAREPLYSPLITFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_careplysplit_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CARTSPROC") == 0)
{
INTL_WARNING;
l_cartsproc_struct_h =  (CARTSPROC_STRUCT_H *)calloc(1,sizeof(CARTSPROC_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_cartsproc_struct_h);
memset(l_cartsproc_struct_h,NULL,sizeof(CARTSPROC_STRUCT_H));
int_ret_val = Populate_CARTSPROC(l_cartsproc_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCARTSPROC\n",NULL,NULL);
if((MT_UpdCARTSPROC(l_cartsproc_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCARTSPROCSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCARTSPROCFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_cartsproc_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CASECEVENT") == 0)
{
INTL_WARNING;
l_casecevent_struct_h =  (CASECEVENT_STRUCT_H *)calloc(1,sizeof(CASECEVENT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_casecevent_struct_h);
memset(l_casecevent_struct_h,NULL,sizeof(CASECEVENT_STRUCT_H));
int_ret_val = Populate_CASECEVENT(l_casecevent_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCASECEVENT\n",NULL,NULL);
if((MT_UpdCASECEVENT(l_casecevent_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCASECEVENTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCASECEVENTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_casecevent_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CASTATUS") == 0)
{
INTL_WARNING;
l_castatus_struct_h =  (CASTATUS_STRUCT_H *)calloc(1,sizeof(CASTATUS_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_castatus_struct_h);
memset(l_castatus_struct_h,NULL,sizeof(CASTATUS_STRUCT_H));
int_ret_val = Populate_CASTATUS(l_castatus_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCASTATUS\n",NULL,NULL);
if((MT_UpdCASTATUS(l_castatus_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCASTATUSSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCASTATUSFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_castatus_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CASYSTEMPARAMS") == 0)
{
INTL_WARNING;
l_casystemparams_struct_h =  (CASYSTEMPARAMS_STRUCT_H *)calloc(1,sizeof(CASYSTEMPARAMS_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_casystemparams_struct_h);
memset(l_casystemparams_struct_h,NULL,sizeof(CASYSTEMPARAMS_STRUCT_H));
int_ret_val = Populate_CASYSTEMPARAMS(l_casystemparams_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCASYSTEMPARAMS\n",NULL,NULL);
if((MT_UpdCASYSTEMPARAMS(l_casystemparams_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCASYSTEMPARAMSSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCASYSTEMPARAMSFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_casystemparams_struct_h);
}







/*
else if (strcmp(l_request_mt -> h_proc_name,"wrp_CA_ENTITLEMENTREP") == 0)
{
INTL_WARNING;
l_ca_entitlementrep_struct_h =  (CA_ENTITLEMENTREP_STRUCT_H *)calloc(1,sizeof(CA_ENTITLEMENTREP_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_ca_entitlementrep_struct_h);
memset(l_ca_entitlementrep_struct_h,NULL,sizeof(CA_ENTITLEMENTREP_STRUCT_H));
int_ret_val = Populate_CA_ENTITLEMENTREP(l_ca_entitlementrep_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCA_ENTITLEMENTREP\n",NULL,NULL);
if((MT_UpdCA_ENTITLEMENTREP(l_ca_entitlementrep_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCA_ENTITLEMENTREPSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCA_ENTITLEMENTREPFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_ca_entitlementrep_struct_h);
}
*/






else if (strcmp(l_request_mt -> h_proc_name,"wrp_CA_EVENTMESGSEND") == 0)
{
INTL_WARNING;
l_ca_eventmesgsend_struct_h =  (CA_EVENTMESGSEND_STRUCT_H *)calloc(1,sizeof(CA_EVENTMESGSEND_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_ca_eventmesgsend_struct_h);
memset(l_ca_eventmesgsend_struct_h,NULL,sizeof(CA_EVENTMESGSEND_STRUCT_H));
int_ret_val = Populate_CA_EVENTMESGSEND(l_ca_eventmesgsend_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCA_EVENTMESGSEND\n",NULL,NULL);
if((MT_UpdCA_EVENTMESGSEND(l_ca_eventmesgsend_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCA_EVENTMESGSENDSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCA_EVENTMESGSENDFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_ca_eventmesgsend_struct_h);
}







/*
else if (strcmp(l_request_mt -> h_proc_name,"wrp_CA_EXDTHLD1_VEW") == 0)
{
INTL_WARNING;
l_ca_exdthld1_vew_struct_h =  (CA_EXDTHLD1_VEW_STRUCT_H *)calloc(1,sizeof(CA_EXDTHLD1_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_ca_exdthld1_vew_struct_h);
memset(l_ca_exdthld1_vew_struct_h,NULL,sizeof(CA_EXDTHLD1_VEW_STRUCT_H));
int_ret_val = Populate_CA_EXDTHLD1_VEW(l_ca_exdthld1_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCA_EXDTHLD1_VEW\n",NULL,NULL);
if((MT_UpdCA_EXDTHLD1_VEW(l_ca_exdthld1_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCA_EXDTHLD1_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCA_EXDTHLD1_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_ca_exdthld1_vew_struct_h);
}


*/




/*
else if (strcmp(l_request_mt -> h_proc_name,"wrp_CA_EXDTHLD2_VEW") == 0)
{
INTL_WARNING;
l_ca_exdthld2_vew_struct_h =  (CA_EXDTHLD2_VEW_STRUCT_H *)calloc(1,sizeof(CA_EXDTHLD2_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_ca_exdthld2_vew_struct_h);
memset(l_ca_exdthld2_vew_struct_h,NULL,sizeof(CA_EXDTHLD2_VEW_STRUCT_H));
int_ret_val = Populate_CA_EXDTHLD2_VEW(l_ca_exdthld2_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCA_EXDTHLD2_VEW\n",NULL,NULL);
if((MT_UpdCA_EXDTHLD2_VEW(l_ca_exdthld2_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCA_EXDTHLD2_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCA_EXDTHLD2_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_ca_exdthld2_vew_struct_h);
}

*/





/*
else if (strcmp(l_request_mt -> h_proc_name,"wrp_CIMS_ACC_VEW") == 0)
{
INTL_WARNING;
l_cims_acc_vew_struct_h =  (CIMS_ACC_VEW_STRUCT_H *)calloc(1,sizeof(CIMS_ACC_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_cims_acc_vew_struct_h);
memset(l_cims_acc_vew_struct_h,NULL,sizeof(CIMS_ACC_VEW_STRUCT_H));
int_ret_val = Populate_CIMS_ACC_VEW(l_cims_acc_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCIMS_ACC_VEW\n",NULL,NULL);
if((MT_UpdCIMS_ACC_VEW(l_cims_acc_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCIMS_ACC_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCIMS_ACC_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_cims_acc_vew_struct_h);
}


*/




else if (strcmp(l_request_mt -> h_proc_name,"wrp_COMMON_BASE_QUERY_MAPPING") == 0)
{
INTL_WARNING;
l_common_base_query_mapping_struct_h =  (COMMON_BASE_QUERY_MAPPING_STRUCT_H *)calloc(1,sizeof(COMMON_BASE_QUERY_MAPPING_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_common_base_query_mapping_struct_h);
memset(l_common_base_query_mapping_struct_h,NULL,sizeof(COMMON_BASE_QUERY_MAPPING_STRUCT_H));
int_ret_val = Populate_COMMON_BASE_QUERY_MAPPING(l_common_base_query_mapping_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCOMMON_BASE_QUERY_MAPPING\n",NULL,NULL);
if((MT_UpdCOMMON_BASE_QUERY_MAPPING(l_common_base_query_mapping_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_BASE_QUERY_MAPPINGSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_BASE_QUERY_MAPPINGFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_common_base_query_mapping_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_COMMON_BASE_QUERY_MAPPING_BACK") == 0)
{
INTL_WARNING;
l_common_base_query_mapping_back_struct_h =  (COMMON_BASE_QUERY_MAPPING_BACK_STRUCT_H *)calloc(1,sizeof(COMMON_BASE_QUERY_MAPPING_BACK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_common_base_query_mapping_back_struct_h);
memset(l_common_base_query_mapping_back_struct_h,NULL,sizeof(COMMON_BASE_QUERY_MAPPING_BACK_STRUCT_H));
int_ret_val = Populate_COMMON_BASE_QUERY_MAPPING_BACK(l_common_base_query_mapping_back_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCOMMON_BASE_QUERY_MAPPING_BACK\n",NULL,NULL);
if((MT_UpdCOMMON_BASE_QUERY_MAPPING_BACK(l_common_base_query_mapping_back_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_BASE_QUERY_MAPPING_BACKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_BASE_QUERY_MAPPING_BACKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_common_base_query_mapping_back_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_COMMON_BASE_QUERY_MAPPING_BAK") == 0)
{
INTL_WARNING;
l_common_base_query_mapping_bak_struct_h =  (COMMON_BASE_QUERY_MAPPING_BAK_STRUCT_H *)calloc(1,sizeof(COMMON_BASE_QUERY_MAPPING_BAK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_common_base_query_mapping_bak_struct_h);
memset(l_common_base_query_mapping_bak_struct_h,NULL,sizeof(COMMON_BASE_QUERY_MAPPING_BAK_STRUCT_H));
int_ret_val = Populate_COMMON_BASE_QUERY_MAPPING_BAK(l_common_base_query_mapping_bak_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCOMMON_BASE_QUERY_MAPPING_BAK\n",NULL,NULL);
if((MT_UpdCOMMON_BASE_QUERY_MAPPING_BAK(l_common_base_query_mapping_bak_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_BASE_QUERY_MAPPING_BAKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_BASE_QUERY_MAPPING_BAKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_common_base_query_mapping_bak_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_COMMON_ENTITY_PROC") == 0)
{
INTL_WARNING;
l_common_entity_proc_struct_h =  (COMMON_ENTITY_PROC_STRUCT_H *)calloc(1,sizeof(COMMON_ENTITY_PROC_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_common_entity_proc_struct_h);
memset(l_common_entity_proc_struct_h,NULL,sizeof(COMMON_ENTITY_PROC_STRUCT_H));
int_ret_val = Populate_COMMON_ENTITY_PROC(l_common_entity_proc_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCOMMON_ENTITY_PROC\n",NULL,NULL);
if((MT_UpdCOMMON_ENTITY_PROC(l_common_entity_proc_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_ENTITY_PROCSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_ENTITY_PROCFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_common_entity_proc_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_COMMON_ENTITY_PROC_230106") == 0)
{
INTL_WARNING;
l_common_entity_proc_230106_struct_h =  (COMMON_ENTITY_PROC_230106_STRUCT_H *)calloc(1,sizeof(COMMON_ENTITY_PROC_230106_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_common_entity_proc_230106_struct_h);
memset(l_common_entity_proc_230106_struct_h,NULL,sizeof(COMMON_ENTITY_PROC_230106_STRUCT_H));
int_ret_val = Populate_COMMON_ENTITY_PROC_230106(l_common_entity_proc_230106_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCOMMON_ENTITY_PROC_230106\n",NULL,NULL);
if((MT_UpdCOMMON_ENTITY_PROC_230106(l_common_entity_proc_230106_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_ENTITY_PROC_230106SUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_ENTITY_PROC_230106FAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_common_entity_proc_230106_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_COMMON_ENTITY_PROC_BAK") == 0)
{
INTL_WARNING;
l_common_entity_proc_bak_struct_h =  (COMMON_ENTITY_PROC_BAK_STRUCT_H *)calloc(1,sizeof(COMMON_ENTITY_PROC_BAK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_common_entity_proc_bak_struct_h);
memset(l_common_entity_proc_bak_struct_h,NULL,sizeof(COMMON_ENTITY_PROC_BAK_STRUCT_H));
int_ret_val = Populate_COMMON_ENTITY_PROC_BAK(l_common_entity_proc_bak_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCOMMON_ENTITY_PROC_BAK\n",NULL,NULL);
if((MT_UpdCOMMON_ENTITY_PROC_BAK(l_common_entity_proc_bak_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_ENTITY_PROC_BAKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_ENTITY_PROC_BAKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_common_entity_proc_bak_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_COMMON_GRID_MAPPING") == 0)
{
INTL_WARNING;
l_common_grid_mapping_struct_h =  (COMMON_GRID_MAPPING_STRUCT_H *)calloc(1,sizeof(COMMON_GRID_MAPPING_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_common_grid_mapping_struct_h);
memset(l_common_grid_mapping_struct_h,NULL,sizeof(COMMON_GRID_MAPPING_STRUCT_H));
int_ret_val = Populate_COMMON_GRID_MAPPING(l_common_grid_mapping_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCOMMON_GRID_MAPPING\n",NULL,NULL);
if((MT_UpdCOMMON_GRID_MAPPING(l_common_grid_mapping_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_GRID_MAPPINGSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_GRID_MAPPINGFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_common_grid_mapping_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_COMMON_GRID_MAPPING_230106") == 0)
{
INTL_WARNING;
l_common_grid_mapping_230106_struct_h =  (COMMON_GRID_MAPPING_230106_STRUCT_H *)calloc(1,sizeof(COMMON_GRID_MAPPING_230106_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_common_grid_mapping_230106_struct_h);
memset(l_common_grid_mapping_230106_struct_h,NULL,sizeof(COMMON_GRID_MAPPING_230106_STRUCT_H));
int_ret_val = Populate_COMMON_GRID_MAPPING_230106(l_common_grid_mapping_230106_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCOMMON_GRID_MAPPING_230106\n",NULL,NULL);
if((MT_UpdCOMMON_GRID_MAPPING_230106(l_common_grid_mapping_230106_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_GRID_MAPPING_230106SUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_GRID_MAPPING_230106FAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_common_grid_mapping_230106_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_COMMON_GRID_MAPPING_BAK") == 0)
{
INTL_WARNING;
l_common_grid_mapping_bak_struct_h =  (COMMON_GRID_MAPPING_BAK_STRUCT_H *)calloc(1,sizeof(COMMON_GRID_MAPPING_BAK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_common_grid_mapping_bak_struct_h);
memset(l_common_grid_mapping_bak_struct_h,NULL,sizeof(COMMON_GRID_MAPPING_BAK_STRUCT_H));
int_ret_val = Populate_COMMON_GRID_MAPPING_BAK(l_common_grid_mapping_bak_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCOMMON_GRID_MAPPING_BAK\n",NULL,NULL);
if((MT_UpdCOMMON_GRID_MAPPING_BAK(l_common_grid_mapping_bak_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_GRID_MAPPING_BAKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_GRID_MAPPING_BAKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_common_grid_mapping_bak_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_COMMON_SEARCH_FORM_MAP") == 0)
{
INTL_WARNING;
l_common_search_form_map_struct_h =  (COMMON_SEARCH_FORM_MAP_STRUCT_H *)calloc(1,sizeof(COMMON_SEARCH_FORM_MAP_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_common_search_form_map_struct_h);
memset(l_common_search_form_map_struct_h,NULL,sizeof(COMMON_SEARCH_FORM_MAP_STRUCT_H));
int_ret_val = Populate_COMMON_SEARCH_FORM_MAP(l_common_search_form_map_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCOMMON_SEARCH_FORM_MAP\n",NULL,NULL);
if((MT_UpdCOMMON_SEARCH_FORM_MAP(l_common_search_form_map_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_SEARCH_FORM_MAPSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_SEARCH_FORM_MAPFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_common_search_form_map_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_COMMON_SEARCH_FORM_MAP_230106") == 0)
{
INTL_WARNING;
l_common_search_form_map_230106_struct_h =  (COMMON_SEARCH_FORM_MAP_230106_STRUCT_H *)calloc(1,sizeof(COMMON_SEARCH_FORM_MAP_230106_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_common_search_form_map_230106_struct_h);
memset(l_common_search_form_map_230106_struct_h,NULL,sizeof(COMMON_SEARCH_FORM_MAP_230106_STRUCT_H));
int_ret_val = Populate_COMMON_SEARCH_FORM_MAP_230106(l_common_search_form_map_230106_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCOMMON_SEARCH_FORM_MAP_230106\n",NULL,NULL);
if((MT_UpdCOMMON_SEARCH_FORM_MAP_230106(l_common_search_form_map_230106_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_SEARCH_FORM_MAP_230106SUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_SEARCH_FORM_MAP_230106FAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_common_search_form_map_230106_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_COMMON_SEARCH_FORM_MAP_BAK") == 0)
{
INTL_WARNING;
l_common_search_form_map_bak_struct_h =  (COMMON_SEARCH_FORM_MAP_BAK_STRUCT_H *)calloc(1,sizeof(COMMON_SEARCH_FORM_MAP_BAK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_common_search_form_map_bak_struct_h);
memset(l_common_search_form_map_bak_struct_h,NULL,sizeof(COMMON_SEARCH_FORM_MAP_BAK_STRUCT_H));
int_ret_val = Populate_COMMON_SEARCH_FORM_MAP_BAK(l_common_search_form_map_bak_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCOMMON_SEARCH_FORM_MAP_BAK\n",NULL,NULL);
if((MT_UpdCOMMON_SEARCH_FORM_MAP_BAK(l_common_search_form_map_bak_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_SEARCH_FORM_MAP_BAKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_SEARCH_FORM_MAP_BAKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_common_search_form_map_bak_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_COMMON_VIEW_FORM_MAP") == 0)
{
INTL_WARNING;
l_common_view_form_map_struct_h =  (COMMON_VIEW_FORM_MAP_STRUCT_H *)calloc(1,sizeof(COMMON_VIEW_FORM_MAP_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_common_view_form_map_struct_h);
memset(l_common_view_form_map_struct_h,NULL,sizeof(COMMON_VIEW_FORM_MAP_STRUCT_H));
int_ret_val = Populate_COMMON_VIEW_FORM_MAP(l_common_view_form_map_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCOMMON_VIEW_FORM_MAP\n",NULL,NULL);
if((MT_UpdCOMMON_VIEW_FORM_MAP(l_common_view_form_map_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_VIEW_FORM_MAPSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_VIEW_FORM_MAPFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_common_view_form_map_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_COMMON_VIEW_FORM_MAP_230106") == 0)
{
INTL_WARNING;
l_common_view_form_map_230106_struct_h =  (COMMON_VIEW_FORM_MAP_230106_STRUCT_H *)calloc(1,sizeof(COMMON_VIEW_FORM_MAP_230106_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_common_view_form_map_230106_struct_h);
memset(l_common_view_form_map_230106_struct_h,NULL,sizeof(COMMON_VIEW_FORM_MAP_230106_STRUCT_H));
int_ret_val = Populate_COMMON_VIEW_FORM_MAP_230106(l_common_view_form_map_230106_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCOMMON_VIEW_FORM_MAP_230106\n",NULL,NULL);
if((MT_UpdCOMMON_VIEW_FORM_MAP_230106(l_common_view_form_map_230106_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_VIEW_FORM_MAP_230106SUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_VIEW_FORM_MAP_230106FAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_common_view_form_map_230106_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_COMMON_VIEW_FORM_MAP_BAK") == 0)
{
INTL_WARNING;
l_common_view_form_map_bak_struct_h =  (COMMON_VIEW_FORM_MAP_BAK_STRUCT_H *)calloc(1,sizeof(COMMON_VIEW_FORM_MAP_BAK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_common_view_form_map_bak_struct_h);
memset(l_common_view_form_map_bak_struct_h,NULL,sizeof(COMMON_VIEW_FORM_MAP_BAK_STRUCT_H));
int_ret_val = Populate_COMMON_VIEW_FORM_MAP_BAK(l_common_view_form_map_bak_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCOMMON_VIEW_FORM_MAP_BAK\n",NULL,NULL);
if((MT_UpdCOMMON_VIEW_FORM_MAP_BAK(l_common_view_form_map_bak_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_VIEW_FORM_MAP_BAKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCOMMON_VIEW_FORM_MAP_BAKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_common_view_form_map_bak_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CO_STATIC_DATA") == 0)
{
INTL_WARNING;
l_co_static_data_struct_h =  (CO_STATIC_DATA_STRUCT_H *)calloc(1,sizeof(CO_STATIC_DATA_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_co_static_data_struct_h);
memset(l_co_static_data_struct_h,NULL,sizeof(CO_STATIC_DATA_STRUCT_H));
int_ret_val = Populate_CO_STATIC_DATA(l_co_static_data_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCO_STATIC_DATA\n",NULL,NULL);
if((MT_UpdCO_STATIC_DATA(l_co_static_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCO_STATIC_DATASUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCO_STATIC_DATAFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_co_static_data_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CO_STATIC_DATA_BAK") == 0)
{
INTL_WARNING;
l_co_static_data_bak_struct_h =  (CO_STATIC_DATA_BAK_STRUCT_H *)calloc(1,sizeof(CO_STATIC_DATA_BAK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_co_static_data_bak_struct_h);
memset(l_co_static_data_bak_struct_h,NULL,sizeof(CO_STATIC_DATA_BAK_STRUCT_H));
int_ret_val = Populate_CO_STATIC_DATA_BAK(l_co_static_data_bak_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCO_STATIC_DATA_BAK\n",NULL,NULL);
if((MT_UpdCO_STATIC_DATA_BAK(l_co_static_data_bak_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCO_STATIC_DATA_BAKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCO_STATIC_DATA_BAKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_co_static_data_bak_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CSCAENT") == 0)
{
INTL_WARNING;
l_cscaent_struct_h =  (CSCAENT_STRUCT_H *)calloc(1,sizeof(CSCAENT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_cscaent_struct_h);
memset(l_cscaent_struct_h,NULL,sizeof(CSCAENT_STRUCT_H));
int_ret_val = Populate_CSCAENT(l_cscaent_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCSCAENT\n",NULL,NULL);
if((MT_UpdCSCAENT(l_cscaent_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCSCAENTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCSCAENTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_cscaent_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CSCODE") == 0)
{
INTL_WARNING;
l_cscode_struct_h =  (CSCODE_STRUCT_H *)calloc(1,sizeof(CSCODE_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_cscode_struct_h);
memset(l_cscode_struct_h,NULL,sizeof(CSCODE_STRUCT_H));
int_ret_val = Populate_CSCODE(l_cscode_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCSCODE\n",NULL,NULL);
if((MT_UpdCSCODE(l_cscode_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCSCODESUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCSCODEFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_cscode_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_CURRENCY_CONV_REPORT") == 0)
{
INTL_WARNING;
l_currency_conv_report_struct_h =  (CURRENCY_CONV_REPORT_STRUCT_H *)calloc(1,sizeof(CURRENCY_CONV_REPORT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_currency_conv_report_struct_h);
memset(l_currency_conv_report_struct_h,NULL,sizeof(CURRENCY_CONV_REPORT_STRUCT_H));
int_ret_val = Populate_CURRENCY_CONV_REPORT(l_currency_conv_report_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdCURRENCY_CONV_REPORT\n",NULL,NULL);
if((MT_UpdCURRENCY_CONV_REPORT(l_currency_conv_report_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCURRENCY_CONV_REPORTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdCURRENCY_CONV_REPORTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_currency_conv_report_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DEAL_COUNT") == 0)
{
INTL_WARNING;
l_deal_count_struct_h =  (DEAL_COUNT_STRUCT_H *)calloc(1,sizeof(DEAL_COUNT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_deal_count_struct_h);
memset(l_deal_count_struct_h,NULL,sizeof(DEAL_COUNT_STRUCT_H));
int_ret_val = Populate_DEAL_COUNT(l_deal_count_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDEAL_COUNT\n",NULL,NULL);
if((MT_UpdDEAL_COUNT(l_deal_count_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDEAL_COUNTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDEAL_COUNTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_deal_count_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DEAL_EVNTIDLINK") == 0)
{
INTL_WARNING;
l_deal_evntidlink_struct_h =  (DEAL_EVNTIDLINK_STRUCT_H *)calloc(1,sizeof(DEAL_EVNTIDLINK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_deal_evntidlink_struct_h);
memset(l_deal_evntidlink_struct_h,NULL,sizeof(DEAL_EVNTIDLINK_STRUCT_H));
int_ret_val = Populate_DEAL_EVNTIDLINK(l_deal_evntidlink_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDEAL_EVNTIDLINK\n",NULL,NULL);
if((MT_UpdDEAL_EVNTIDLINK(l_deal_evntidlink_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDEAL_EVNTIDLINKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDEAL_EVNTIDLINKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_deal_evntidlink_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DEAL_LOCALREP_VEW") == 0)
{
INTL_WARNING;
l_deal_localrep_vew_struct_h =  (DEAL_LOCALREP_VEW_STRUCT_H *)calloc(1,sizeof(DEAL_LOCALREP_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_deal_localrep_vew_struct_h);
memset(l_deal_localrep_vew_struct_h,NULL,sizeof(DEAL_LOCALREP_VEW_STRUCT_H));
int_ret_val = Populate_DEAL_LOCALREP_VEW(l_deal_localrep_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDEAL_LOCALREP_VEW\n",NULL,NULL);
if((MT_UpdDEAL_LOCALREP_VEW(l_deal_localrep_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDEAL_LOCALREP_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDEAL_LOCALREP_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_deal_localrep_vew_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_ARCHDEAL") == 0)
{
INTL_WARNING;
l_dl_archdeal_struct_h =  (DL_ARCHDEAL_STRUCT_H *)calloc(1,sizeof(DL_ARCHDEAL_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_archdeal_struct_h);
memset(l_dl_archdeal_struct_h,NULL,sizeof(DL_ARCHDEAL_STRUCT_H));
int_ret_val = Populate_DL_ARCHDEAL(l_dl_archdeal_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_ARCHDEAL\n",NULL,NULL);
if((MT_UpdDL_ARCHDEAL(l_dl_archdeal_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_ARCHDEALSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_ARCHDEALFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_archdeal_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_ARCHDLAUDIT") == 0)
{
INTL_WARNING;
l_dl_archdlaudit_struct_h =  (DL_ARCHDLAUDIT_STRUCT_H *)calloc(1,sizeof(DL_ARCHDLAUDIT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_archdlaudit_struct_h);
memset(l_dl_archdlaudit_struct_h,NULL,sizeof(DL_ARCHDLAUDIT_STRUCT_H));
int_ret_val = Populate_DL_ARCHDLAUDIT(l_dl_archdlaudit_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_ARCHDLAUDIT\n",NULL,NULL);
if((MT_UpdDL_ARCHDLAUDIT(l_dl_archdlaudit_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_ARCHDLAUDITSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_ARCHDLAUDITFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_archdlaudit_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_ARCHMSGLINK") == 0)
{
INTL_WARNING;
l_dl_archmsglink_struct_h =  (DL_ARCHMSGLINK_STRUCT_H *)calloc(1,sizeof(DL_ARCHMSGLINK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_archmsglink_struct_h);
memset(l_dl_archmsglink_struct_h,NULL,sizeof(DL_ARCHMSGLINK_STRUCT_H));
int_ret_val = Populate_DL_ARCHMSGLINK(l_dl_archmsglink_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_ARCHMSGLINK\n",NULL,NULL);
if((MT_UpdDL_ARCHMSGLINK(l_dl_archmsglink_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_ARCHMSGLINKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_ARCHMSGLINKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_archmsglink_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_ARCHMSGLINKDET") == 0)
{
INTL_WARNING;
l_dl_archmsglinkdet_struct_h =  (DL_ARCHMSGLINKDET_STRUCT_H *)calloc(1,sizeof(DL_ARCHMSGLINKDET_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_archmsglinkdet_struct_h);
memset(l_dl_archmsglinkdet_struct_h,NULL,sizeof(DL_ARCHMSGLINKDET_STRUCT_H));
int_ret_val = Populate_DL_ARCHMSGLINKDET(l_dl_archmsglinkdet_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_ARCHMSGLINKDET\n",NULL,NULL);
if((MT_UpdDL_ARCHMSGLINKDET(l_dl_archmsglinkdet_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_ARCHMSGLINKDETSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_ARCHMSGLINKDETFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_archmsglinkdet_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_ARCHREGDET") == 0)
{
INTL_WARNING;
l_dl_archregdet_struct_h =  (DL_ARCHREGDET_STRUCT_H *)calloc(1,sizeof(DL_ARCHREGDET_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_archregdet_struct_h);
memset(l_dl_archregdet_struct_h,NULL,sizeof(DL_ARCHREGDET_STRUCT_H));
int_ret_val = Populate_DL_ARCHREGDET(l_dl_archregdet_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_ARCHREGDET\n",NULL,NULL);
if((MT_UpdDL_ARCHREGDET(l_dl_archregdet_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_ARCHREGDETSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_ARCHREGDETFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_archregdet_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_ARCHREGPAR") == 0)
{
INTL_WARNING;
l_dl_archregpar_struct_h =  (DL_ARCHREGPAR_STRUCT_H *)calloc(1,sizeof(DL_ARCHREGPAR_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_archregpar_struct_h);
memset(l_dl_archregpar_struct_h,NULL,sizeof(DL_ARCHREGPAR_STRUCT_H));
int_ret_val = Populate_DL_ARCHREGPAR(l_dl_archregpar_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_ARCHREGPAR\n",NULL,NULL);
if((MT_UpdDL_ARCHREGPAR(l_dl_archregpar_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_ARCHREGPARSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_ARCHREGPARFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_archregpar_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_ARCHRUHISDEAL") == 0)
{
INTL_WARNING;
l_dl_archruhisdeal_struct_h =  (DL_ARCHRUHISDEAL_STRUCT_H *)calloc(1,sizeof(DL_ARCHRUHISDEAL_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_archruhisdeal_struct_h);
memset(l_dl_archruhisdeal_struct_h,NULL,sizeof(DL_ARCHRUHISDEAL_STRUCT_H));
int_ret_val = Populate_DL_ARCHRUHISDEAL(l_dl_archruhisdeal_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_ARCHRUHISDEAL\n",NULL,NULL);
if((MT_UpdDL_ARCHRUHISDEAL(l_dl_archruhisdeal_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_ARCHRUHISDEALSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_ARCHRUHISDEALFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_archruhisdeal_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_ARCHSAFEK") == 0)
{
INTL_WARNING;
l_dl_archsafek_struct_h =  (DL_ARCHSAFEK_STRUCT_H *)calloc(1,sizeof(DL_ARCHSAFEK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_archsafek_struct_h);
memset(l_dl_archsafek_struct_h,NULL,sizeof(DL_ARCHSAFEK_STRUCT_H));
int_ret_val = Populate_DL_ARCHSAFEK(l_dl_archsafek_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_ARCHSAFEK\n",NULL,NULL);
if((MT_UpdDL_ARCHSAFEK(l_dl_archsafek_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_ARCHSAFEKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_ARCHSAFEKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_archsafek_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_AUTOSETTHUFMT") == 0)
{
INTL_WARNING;
l_dl_autosetthufmt_struct_h =  (DL_AUTOSETTHUFMT_STRUCT_H *)calloc(1,sizeof(DL_AUTOSETTHUFMT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_autosetthufmt_struct_h);
memset(l_dl_autosetthufmt_struct_h,NULL,sizeof(DL_AUTOSETTHUFMT_STRUCT_H));
int_ret_val = Populate_DL_AUTOSETTHUFMT(l_dl_autosetthufmt_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_AUTOSETTHUFMT\n",NULL,NULL);
if((MT_UpdDL_AUTOSETTHUFMT(l_dl_autosetthufmt_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_AUTOSETTHUFMTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_AUTOSETTHUFMTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_autosetthufmt_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_AUTOSETTHUWRK") == 0)
{
INTL_WARNING;
l_dl_autosetthuwrk_struct_h =  (DL_AUTOSETTHUWRK_STRUCT_H *)calloc(1,sizeof(DL_AUTOSETTHUWRK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_autosetthuwrk_struct_h);
memset(l_dl_autosetthuwrk_struct_h,NULL,sizeof(DL_AUTOSETTHUWRK_STRUCT_H));
int_ret_val = Populate_DL_AUTOSETTHUWRK(l_dl_autosetthuwrk_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_AUTOSETTHUWRK\n",NULL,NULL);
if((MT_UpdDL_AUTOSETTHUWRK(l_dl_autosetthuwrk_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_AUTOSETTHUWRKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_AUTOSETTHUWRKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_autosetthuwrk_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_CASHBAL") == 0)
{
INTL_WARNING;
l_dl_cashbal_struct_h =  (DL_CASHBAL_STRUCT_H *)calloc(1,sizeof(DL_CASHBAL_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_cashbal_struct_h);
memset(l_dl_cashbal_struct_h,NULL,sizeof(DL_CASHBAL_STRUCT_H));
int_ret_val = Populate_DL_CASHBAL(l_dl_cashbal_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_CASHBAL\n",NULL,NULL);
if((MT_UpdDL_CASHBAL(l_dl_cashbal_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_CASHBALSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_CASHBALFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_cashbal_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_CASHCLT") == 0)
{
INTL_WARNING;
l_dl_cashclt_struct_h =  (DL_CASHCLT_STRUCT_H *)calloc(1,sizeof(DL_CASHCLT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_cashclt_struct_h);
memset(l_dl_cashclt_struct_h,NULL,sizeof(DL_CASHCLT_STRUCT_H));
int_ret_val = Populate_DL_CASHCLT(l_dl_cashclt_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_CASHCLT\n",NULL,NULL);
if((MT_UpdDL_CASHCLT(l_dl_cashclt_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_CASHCLTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_CASHCLTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_cashclt_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_CCSFAILMSG") == 0)
{
INTL_WARNING;
l_dl_ccsfailmsg_struct_h =  (DL_CCSFAILMSG_STRUCT_H *)calloc(1,sizeof(DL_CCSFAILMSG_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_ccsfailmsg_struct_h);
memset(l_dl_ccsfailmsg_struct_h,NULL,sizeof(DL_CCSFAILMSG_STRUCT_H));
int_ret_val = Populate_DL_CCSFAILMSG(l_dl_ccsfailmsg_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_CCSFAILMSG\n",NULL,NULL);
if((MT_UpdDL_CCSFAILMSG(l_dl_ccsfailmsg_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_CCSFAILMSGSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_CCSFAILMSGFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_ccsfailmsg_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_CCSPENDTXN") == 0)
{
INTL_WARNING;
l_dl_ccspendtxn_struct_h =  (DL_CCSPENDTXN_STRUCT_H *)calloc(1,sizeof(DL_CCSPENDTXN_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_ccspendtxn_struct_h);
memset(l_dl_ccspendtxn_struct_h,NULL,sizeof(DL_CCSPENDTXN_STRUCT_H));
int_ret_val = Populate_DL_CCSPENDTXN(l_dl_ccspendtxn_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_CCSPENDTXN\n",NULL,NULL);
if((MT_UpdDL_CCSPENDTXN(l_dl_ccspendtxn_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_CCSPENDTXNSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_CCSPENDTXNFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_ccspendtxn_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_CLHTR") == 0)
{
INTL_WARNING;
l_dl_clhtr_struct_h =  (DL_CLHTR_STRUCT_H *)calloc(1,sizeof(DL_CLHTR_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_clhtr_struct_h);
memset(l_dl_clhtr_struct_h,NULL,sizeof(DL_CLHTR_STRUCT_H));
int_ret_val = Populate_DL_CLHTR(l_dl_clhtr_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_CLHTR\n",NULL,NULL);
if((MT_UpdDL_CLHTR(l_dl_clhtr_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_CLHTRSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_CLHTRFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_clhtr_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_COPYHISTORY") == 0)
{
INTL_WARNING;
l_dl_copyhistory_struct_h =  (DL_COPYHISTORY_STRUCT_H *)calloc(1,sizeof(DL_COPYHISTORY_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_copyhistory_struct_h);
memset(l_dl_copyhistory_struct_h,NULL,sizeof(DL_COPYHISTORY_STRUCT_H));
int_ret_val = Populate_DL_COPYHISTORY(l_dl_copyhistory_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_COPYHISTORY\n",NULL,NULL);
if((MT_UpdDL_COPYHISTORY(l_dl_copyhistory_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_COPYHISTORYSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_COPYHISTORYFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_copyhistory_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_CURRENCY") == 0)
{
INTL_WARNING;
l_dl_currency_struct_h =  (DL_CURRENCY_STRUCT_H *)calloc(1,sizeof(DL_CURRENCY_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_currency_struct_h);
memset(l_dl_currency_struct_h,NULL,sizeof(DL_CURRENCY_STRUCT_H));
int_ret_val = Populate_DL_CURRENCY(l_dl_currency_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_CURRENCY\n",NULL,NULL);
if((MT_UpdDL_CURRENCY(l_dl_currency_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_CURRENCYSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_CURRENCYFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_currency_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_CURRENCY_VEW") == 0)
{
INTL_WARNING;
l_dl_currency_vew_struct_h =  (DL_CURRENCY_VEW_STRUCT_H *)calloc(1,sizeof(DL_CURRENCY_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_currency_vew_struct_h);
memset(l_dl_currency_vew_struct_h,NULL,sizeof(DL_CURRENCY_VEW_STRUCT_H));
int_ret_val = Populate_DL_CURRENCY_VEW(l_dl_currency_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_CURRENCY_VEW\n",NULL,NULL);
if((MT_UpdDL_CURRENCY_VEW(l_dl_currency_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_CURRENCY_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_CURRENCY_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_currency_vew_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_DEAL") == 0)
{
INTL_WARNING;
l_dl_deal_struct_h =  (DL_DEAL_STRUCT_H *)calloc(1,sizeof(DL_DEAL_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_deal_struct_h);
memset(l_dl_deal_struct_h,NULL,sizeof(DL_DEAL_STRUCT_H));
int_ret_val = Populate_DL_DEAL(l_dl_deal_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_DEAL\n",NULL,NULL);
if((MT_UpdDL_DEAL(l_dl_deal_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_DEALSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_DEALFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_deal_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_DEALAUDIT") == 0)
{
INTL_WARNING;
l_dl_dealaudit_struct_h =  (DL_DEALAUDIT_STRUCT_H *)calloc(1,sizeof(DL_DEALAUDIT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_dealaudit_struct_h);
memset(l_dl_dealaudit_struct_h,NULL,sizeof(DL_DEALAUDIT_STRUCT_H));
int_ret_val = Populate_DL_DEALAUDIT(l_dl_dealaudit_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_DEALAUDIT\n",NULL,NULL);
if((MT_UpdDL_DEALAUDIT(l_dl_dealaudit_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_DEALAUDITSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_DEALAUDITFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_dealaudit_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_DEALCLIENTIMG") == 0)
{
INTL_WARNING;
l_dl_dealclientimg_struct_h =  (DL_DEALCLIENTIMG_STRUCT_H *)calloc(1,sizeof(DL_DEALCLIENTIMG_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_dealclientimg_struct_h);
memset(l_dl_dealclientimg_struct_h,NULL,sizeof(DL_DEALCLIENTIMG_STRUCT_H));
int_ret_val = Populate_DL_DEALCLIENTIMG(l_dl_dealclientimg_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_DEALCLIENTIMG\n",NULL,NULL);
if((MT_UpdDL_DEALCLIENTIMG(l_dl_dealclientimg_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_DEALCLIENTIMGSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_DEALCLIENTIMGFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_dealclientimg_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_DEALDET") == 0)
{
INTL_WARNING;
l_dl_dealdet_struct_h =  (DL_DEALDET_STRUCT_H *)calloc(1,sizeof(DL_DEALDET_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_dealdet_struct_h);
memset(l_dl_dealdet_struct_h,NULL,sizeof(DL_DEALDET_STRUCT_H));
int_ret_val = Populate_DL_DEALDET(l_dl_dealdet_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_DEALDET\n",NULL,NULL);
if((MT_UpdDL_DEALDET(l_dl_dealdet_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_DEALDETSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_DEALDETFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_dealdet_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_DEALREPAIR") == 0)
{
INTL_WARNING;
l_dl_dealrepair_struct_h =  (DL_DEALREPAIR_STRUCT_H *)calloc(1,sizeof(DL_DEALREPAIR_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_dealrepair_struct_h);
memset(l_dl_dealrepair_struct_h,NULL,sizeof(DL_DEALREPAIR_STRUCT_H));
int_ret_val = Populate_DL_DEALREPAIR(l_dl_dealrepair_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_DEALREPAIR\n",NULL,NULL);
if((MT_UpdDL_DEALREPAIR(l_dl_dealrepair_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_DEALREPAIRSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_DEALREPAIRFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_dealrepair_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_DEALRST") == 0)
{
INTL_WARNING;
l_dl_dealrst_struct_h =  (DL_DEALRST_STRUCT_H *)calloc(1,sizeof(DL_DEALRST_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_dealrst_struct_h);
memset(l_dl_dealrst_struct_h,NULL,sizeof(DL_DEALRST_STRUCT_H));
int_ret_val = Populate_DL_DEALRST(l_dl_dealrst_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_DEALRST\n",NULL,NULL);
if((MT_UpdDL_DEALRST(l_dl_dealrst_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_DEALRSTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_DEALRSTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_dealrst_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_DEPOPROCESSING") == 0)
{
INTL_WARNING;
l_dl_depoprocessing_struct_h =  (DL_DEPOPROCESSING_STRUCT_H *)calloc(1,sizeof(DL_DEPOPROCESSING_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_depoprocessing_struct_h);
memset(l_dl_depoprocessing_struct_h,NULL,sizeof(DL_DEPOPROCESSING_STRUCT_H));
int_ret_val = Populate_DL_DEPOPROCESSING(l_dl_depoprocessing_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_DEPOPROCESSING\n",NULL,NULL);
if((MT_UpdDL_DEPOPROCESSING(l_dl_depoprocessing_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_DEPOPROCESSINGSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_DEPOPROCESSINGFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_depoprocessing_struct_h);
}






/** making elseif to if **/
if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_EOMDEAL") == 0)
{
INTL_WARNING;
l_dl_eomdeal_struct_h =  (DL_EOMDEAL_STRUCT_H *)calloc(1,sizeof(DL_EOMDEAL_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_eomdeal_struct_h);
memset(l_dl_eomdeal_struct_h,NULL,sizeof(DL_EOMDEAL_STRUCT_H));
int_ret_val = Populate_DL_EOMDEAL(l_dl_eomdeal_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_EOMDEAL\n",NULL,NULL);
if((MT_UpdDL_EOMDEAL(l_dl_eomdeal_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_EOMDEALSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_EOMDEALFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_eomdeal_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_EOMSAFEK") == 0)
{
INTL_WARNING;
l_dl_eomsafek_struct_h =  (DL_EOMSAFEK_STRUCT_H *)calloc(1,sizeof(DL_EOMSAFEK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_eomsafek_struct_h);
memset(l_dl_eomsafek_struct_h,NULL,sizeof(DL_EOMSAFEK_STRUCT_H));
int_ret_val = Populate_DL_EOMSAFEK(l_dl_eomsafek_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_EOMSAFEK\n",NULL,NULL);
if((MT_UpdDL_EOMSAFEK(l_dl_eomsafek_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_EOMSAFEKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_EOMSAFEKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_eomsafek_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_EOMSTM_ADJ_VEW") == 0)
{
INTL_WARNING;
l_dl_eomstm_adj_vew_struct_h =  (DL_EOMSTM_ADJ_VEW_STRUCT_H *)calloc(1,sizeof(DL_EOMSTM_ADJ_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_eomstm_adj_vew_struct_h);
memset(l_dl_eomstm_adj_vew_struct_h,NULL,sizeof(DL_EOMSTM_ADJ_VEW_STRUCT_H));
int_ret_val = Populate_DL_EOMSTM_ADJ_VEW(l_dl_eomstm_adj_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_EOMSTM_ADJ_VEW\n",NULL,NULL);
if((MT_UpdDL_EOMSTM_ADJ_VEW(l_dl_eomstm_adj_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_EOMSTM_ADJ_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_EOMSTM_ADJ_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_eomstm_adj_vew_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_EOMSTM_CURR_VEW") == 0)
{
INTL_WARNING;
l_dl_eomstm_curr_vew_struct_h =  (DL_EOMSTM_CURR_VEW_STRUCT_H *)calloc(1,sizeof(DL_EOMSTM_CURR_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_eomstm_curr_vew_struct_h);
memset(l_dl_eomstm_curr_vew_struct_h,NULL,sizeof(DL_EOMSTM_CURR_VEW_STRUCT_H));
int_ret_val = Populate_DL_EOMSTM_CURR_VEW(l_dl_eomstm_curr_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_EOMSTM_CURR_VEW\n",NULL,NULL);
if((MT_UpdDL_EOMSTM_CURR_VEW(l_dl_eomstm_curr_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_EOMSTM_CURR_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_EOMSTM_CURR_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_eomstm_curr_vew_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_EOMSTM_FAIL_VEW") == 0)
{
INTL_WARNING;
l_dl_eomstm_fail_vew_struct_h =  (DL_EOMSTM_FAIL_VEW_STRUCT_H *)calloc(1,sizeof(DL_EOMSTM_FAIL_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_eomstm_fail_vew_struct_h);
memset(l_dl_eomstm_fail_vew_struct_h,NULL,sizeof(DL_EOMSTM_FAIL_VEW_STRUCT_H));
int_ret_val = Populate_DL_EOMSTM_FAIL_VEW(l_dl_eomstm_fail_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_EOMSTM_FAIL_VEW\n",NULL,NULL);
if((MT_UpdDL_EOMSTM_FAIL_VEW(l_dl_eomstm_fail_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_EOMSTM_FAIL_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_EOMSTM_FAIL_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_eomstm_fail_vew_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_EOMSTM_PEND_VEW") == 0)
{
INTL_WARNING;
l_dl_eomstm_pend_vew_struct_h =  (DL_EOMSTM_PEND_VEW_STRUCT_H *)calloc(1,sizeof(DL_EOMSTM_PEND_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_eomstm_pend_vew_struct_h);
memset(l_dl_eomstm_pend_vew_struct_h,NULL,sizeof(DL_EOMSTM_PEND_VEW_STRUCT_H));
int_ret_val = Populate_DL_EOMSTM_PEND_VEW(l_dl_eomstm_pend_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_EOMSTM_PEND_VEW\n",NULL,NULL);
if((MT_UpdDL_EOMSTM_PEND_VEW(l_dl_eomstm_pend_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_EOMSTM_PEND_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_EOMSTM_PEND_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_eomstm_pend_vew_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_FUTURE_VDP_VEW") == 0)
{
INTL_WARNING;
l_dl_future_vdp_vew_struct_h =  (DL_FUTURE_VDP_VEW_STRUCT_H *)calloc(1,sizeof(DL_FUTURE_VDP_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_future_vdp_vew_struct_h);
memset(l_dl_future_vdp_vew_struct_h,NULL,sizeof(DL_FUTURE_VDP_VEW_STRUCT_H));
int_ret_val = Populate_DL_FUTURE_VDP_VEW(l_dl_future_vdp_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_FUTURE_VDP_VEW\n",NULL,NULL);
if((MT_UpdDL_FUTURE_VDP_VEW(l_dl_future_vdp_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_FUTURE_VDP_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_FUTURE_VDP_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_future_vdp_vew_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_HISDEAL") == 0)
{
INTL_WARNING;
l_dl_hisdeal_struct_h =  (DL_HISDEAL_STRUCT_H *)calloc(1,sizeof(DL_HISDEAL_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_hisdeal_struct_h);
memset(l_dl_hisdeal_struct_h,NULL,sizeof(DL_HISDEAL_STRUCT_H));
int_ret_val = Populate_DL_HISDEAL(l_dl_hisdeal_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_HISDEAL\n",NULL,NULL);
if((MT_UpdDL_HISDEAL(l_dl_hisdeal_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_HISDEALSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_HISDEALFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_hisdeal_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_HISDEALSAUDIT") == 0)
{
INTL_WARNING;
l_dl_hisdealsaudit_struct_h =  (DL_HISDEALSAUDIT_STRUCT_H *)calloc(1,sizeof(DL_HISDEALSAUDIT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_hisdealsaudit_struct_h);
memset(l_dl_hisdealsaudit_struct_h,NULL,sizeof(DL_HISDEALSAUDIT_STRUCT_H));
int_ret_val = Populate_DL_HISDEALSAUDIT(l_dl_hisdealsaudit_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_HISDEALSAUDIT\n",NULL,NULL);
if((MT_UpdDL_HISDEALSAUDIT(l_dl_hisdealsaudit_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_HISDEALSAUDITSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_HISDEALSAUDITFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_hisdealsaudit_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_HISDEAL_VEW") == 0)
{
INTL_WARNING;
l_dl_hisdeal_vew_struct_h =  (DL_HISDEAL_VEW_STRUCT_H *)calloc(1,sizeof(DL_HISDEAL_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_hisdeal_vew_struct_h);
memset(l_dl_hisdeal_vew_struct_h,NULL,sizeof(DL_HISDEAL_VEW_STRUCT_H));
int_ret_val = Populate_DL_HISDEAL_VEW(l_dl_hisdeal_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_HISDEAL_VEW\n",NULL,NULL);
if((MT_UpdDL_HISDEAL_VEW(l_dl_hisdeal_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_HISDEAL_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_HISDEAL_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_hisdeal_vew_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_HISMSGLINK") == 0)
{
INTL_WARNING;
l_dl_hismsglink_struct_h =  (DL_HISMSGLINK_STRUCT_H *)calloc(1,sizeof(DL_HISMSGLINK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_hismsglink_struct_h);
memset(l_dl_hismsglink_struct_h,NULL,sizeof(DL_HISMSGLINK_STRUCT_H));
int_ret_val = Populate_DL_HISMSGLINK(l_dl_hismsglink_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_HISMSGLINK\n",NULL,NULL);
if((MT_UpdDL_HISMSGLINK(l_dl_hismsglink_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_HISMSGLINKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_HISMSGLINKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_hismsglink_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_HISMSGLINKDET") == 0)
{
INTL_WARNING;
l_dl_hismsglinkdet_struct_h =  (DL_HISMSGLINKDET_STRUCT_H *)calloc(1,sizeof(DL_HISMSGLINKDET_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_hismsglinkdet_struct_h);
memset(l_dl_hismsglinkdet_struct_h,NULL,sizeof(DL_HISMSGLINKDET_STRUCT_H));
int_ret_val = Populate_DL_HISMSGLINKDET(l_dl_hismsglinkdet_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_HISMSGLINKDET\n",NULL,NULL);
if((MT_UpdDL_HISMSGLINKDET(l_dl_hismsglinkdet_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_HISMSGLINKDETSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_HISMSGLINKDETFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_hismsglinkdet_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_HISMULT_REAS_CODES") == 0)
{
INTL_WARNING;
l_dl_hismult_reas_codes_struct_h =  (DL_HISMULT_REAS_CODES_STRUCT_H *)calloc(1,sizeof(DL_HISMULT_REAS_CODES_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_hismult_reas_codes_struct_h);
memset(l_dl_hismult_reas_codes_struct_h,NULL,sizeof(DL_HISMULT_REAS_CODES_STRUCT_H));
int_ret_val = Populate_DL_HISMULT_REAS_CODES(l_dl_hismult_reas_codes_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_HISMULT_REAS_CODES\n",NULL,NULL);
if((MT_UpdDL_HISMULT_REAS_CODES(l_dl_hismult_reas_codes_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_HISMULT_REAS_CODESSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_HISMULT_REAS_CODESFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_hismult_reas_codes_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_HISREGDET") == 0)
{
INTL_WARNING;
l_dl_hisregdet_struct_h =  (DL_HISREGDET_STRUCT_H *)calloc(1,sizeof(DL_HISREGDET_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_hisregdet_struct_h);
memset(l_dl_hisregdet_struct_h,NULL,sizeof(DL_HISREGDET_STRUCT_H));
int_ret_val = Populate_DL_HISREGDET(l_dl_hisregdet_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_HISREGDET\n",NULL,NULL);
if((MT_UpdDL_HISREGDET(l_dl_hisregdet_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_HISREGDETSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_HISREGDETFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_hisregdet_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_HISREGPAR") == 0)
{
INTL_WARNING;
l_dl_hisregpar_struct_h =  (DL_HISREGPAR_STRUCT_H *)calloc(1,sizeof(DL_HISREGPAR_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_hisregpar_struct_h);
memset(l_dl_hisregpar_struct_h,NULL,sizeof(DL_HISREGPAR_STRUCT_H));
int_ret_val = Populate_DL_HISREGPAR(l_dl_hisregpar_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_HISREGPAR\n",NULL,NULL);
if((MT_UpdDL_HISREGPAR(l_dl_hisregpar_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_HISREGPARSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_HISREGPARFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_hisregpar_struct_h);
}






/*
else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_HISREPIRE_VEW") == 0)
{
INTL_WARNING;
l_dl_hisrepire_vew_struct_h =  (DL_HISREPIRE_VEW_STRUCT_H *)calloc(1,sizeof(DL_HISREPIRE_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_hisrepire_vew_struct_h);
memset(l_dl_hisrepire_vew_struct_h,NULL,sizeof(DL_HISREPIRE_VEW_STRUCT_H));
int_ret_val = Populate_DL_HISREPIRE_VEW(l_dl_hisrepire_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_HISREPIRE_VEW\n",NULL,NULL);
if((MT_UpdDL_HISREPIRE_VEW(l_dl_hisrepire_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_HISREPIRE_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_HISREPIRE_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_hisrepire_vew_struct_h);
}

*/





else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_HISSAFEK") == 0)
{
INTL_WARNING;
l_dl_hissafek_struct_h =  (DL_HISSAFEK_STRUCT_H *)calloc(1,sizeof(DL_HISSAFEK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_hissafek_struct_h);
memset(l_dl_hissafek_struct_h,NULL,sizeof(DL_HISSAFEK_STRUCT_H));
int_ret_val = Populate_DL_HISSAFEK(l_dl_hissafek_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_HISSAFEK\n",NULL,NULL);
if((MT_UpdDL_HISSAFEK(l_dl_hissafek_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_HISSAFEKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_HISSAFEKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_hissafek_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_INSTRUMENTCHG") == 0)
{
INTL_WARNING;
l_dl_instrumentchg_struct_h =  (DL_INSTRUMENTCHG_STRUCT_H *)calloc(1,sizeof(DL_INSTRUMENTCHG_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_instrumentchg_struct_h);
memset(l_dl_instrumentchg_struct_h,NULL,sizeof(DL_INSTRUMENTCHG_STRUCT_H));
int_ret_val = Populate_DL_INSTRUMENTCHG(l_dl_instrumentchg_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_INSTRUMENTCHG\n",NULL,NULL);
if((MT_UpdDL_INSTRUMENTCHG(l_dl_instrumentchg_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_INSTRUMENTCHGSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_INSTRUMENTCHGFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_instrumentchg_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_INSTRUMENTCONV") == 0)
{
INTL_WARNING;
l_dl_instrumentconv_struct_h =  (DL_INSTRUMENTCONV_STRUCT_H *)calloc(1,sizeof(DL_INSTRUMENTCONV_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_instrumentconv_struct_h);
memset(l_dl_instrumentconv_struct_h,NULL,sizeof(DL_INSTRUMENTCONV_STRUCT_H));
int_ret_val = Populate_DL_INSTRUMENTCONV(l_dl_instrumentconv_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_INSTRUMENTCONV\n",NULL,NULL);
if((MT_UpdDL_INSTRUMENTCONV(l_dl_instrumentconv_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_INSTRUMENTCONVSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_INSTRUMENTCONVFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_instrumentconv_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_INSTRUMENTCONV_REP_TEMP") == 0)
{
INTL_WARNING;
l_dl_instrumentconv_rep_temp_struct_h =  (DL_INSTRUMENTCONV_REP_TEMP_STRUCT_H *)calloc(1,sizeof(DL_INSTRUMENTCONV_REP_TEMP_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_instrumentconv_rep_temp_struct_h);
memset(l_dl_instrumentconv_rep_temp_struct_h,NULL,sizeof(DL_INSTRUMENTCONV_REP_TEMP_STRUCT_H));
int_ret_val = Populate_DL_INSTRUMENTCONV_REP_TEMP(l_dl_instrumentconv_rep_temp_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_INSTRUMENTCONV_REP_TEMP\n",NULL,NULL);
if((MT_UpdDL_INSTRUMENTCONV_REP_TEMP(l_dl_instrumentconv_rep_temp_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_INSTRUMENTCONV_REP_TEMPSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_INSTRUMENTCONV_REP_TEMPFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_instrumentconv_rep_temp_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_INSTRUMENTCONV_TEMP") == 0)
{
INTL_WARNING;
l_dl_instrumentconv_temp_struct_h =  (DL_INSTRUMENTCONV_TEMP_STRUCT_H *)calloc(1,sizeof(DL_INSTRUMENTCONV_TEMP_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_instrumentconv_temp_struct_h);
memset(l_dl_instrumentconv_temp_struct_h,NULL,sizeof(DL_INSTRUMENTCONV_TEMP_STRUCT_H));
int_ret_val = Populate_DL_INSTRUMENTCONV_TEMP(l_dl_instrumentconv_temp_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_INSTRUMENTCONV_TEMP\n",NULL,NULL);
if((MT_UpdDL_INSTRUMENTCONV_TEMP(l_dl_instrumentconv_temp_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_INSTRUMENTCONV_TEMPSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_INSTRUMENTCONV_TEMPFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_instrumentconv_temp_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_IPOAUDIT") == 0)
{
INTL_WARNING;
l_dl_ipoaudit_struct_h =  (DL_IPOAUDIT_STRUCT_H *)calloc(1,sizeof(DL_IPOAUDIT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_ipoaudit_struct_h);
memset(l_dl_ipoaudit_struct_h,NULL,sizeof(DL_IPOAUDIT_STRUCT_H));
int_ret_val = Populate_DL_IPOAUDIT(l_dl_ipoaudit_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_IPOAUDIT\n",NULL,NULL);
if((MT_UpdDL_IPOAUDIT(l_dl_ipoaudit_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_IPOAUDITSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_IPOAUDITFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_ipoaudit_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_LOCALREPCLIENT") == 0)
{
INTL_WARNING;
l_dl_localrepclient_struct_h =  (DL_LOCALREPCLIENT_STRUCT_H *)calloc(1,sizeof(DL_LOCALREPCLIENT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_localrepclient_struct_h);
memset(l_dl_localrepclient_struct_h,NULL,sizeof(DL_LOCALREPCLIENT_STRUCT_H));
int_ret_val = Populate_DL_LOCALREPCLIENT(l_dl_localrepclient_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_LOCALREPCLIENT\n",NULL,NULL);
if((MT_UpdDL_LOCALREPCLIENT(l_dl_localrepclient_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_LOCALREPCLIENTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_LOCALREPCLIENTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_localrepclient_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_LOCALREPCLIENTMA") == 0)
{
INTL_WARNING;
l_dl_localrepclientma_struct_h =  (DL_LOCALREPCLIENTMA_STRUCT_H *)calloc(1,sizeof(DL_LOCALREPCLIENTMA_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_localrepclientma_struct_h);
memset(l_dl_localrepclientma_struct_h,NULL,sizeof(DL_LOCALREPCLIENTMA_STRUCT_H));
int_ret_val = Populate_DL_LOCALREPCLIENTMA(l_dl_localrepclientma_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_LOCALREPCLIENTMA\n",NULL,NULL);
if((MT_UpdDL_LOCALREPCLIENTMA(l_dl_localrepclientma_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_LOCALREPCLIENTMASUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_LOCALREPCLIENTMAFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_localrepclientma_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_LOCALREPDATES") == 0)
{
INTL_WARNING;
l_dl_localrepdates_struct_h =  (DL_LOCALREPDATES_STRUCT_H *)calloc(1,sizeof(DL_LOCALREPDATES_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_localrepdates_struct_h);
memset(l_dl_localrepdates_struct_h,NULL,sizeof(DL_LOCALREPDATES_STRUCT_H));
int_ret_val = Populate_DL_LOCALREPDATES(l_dl_localrepdates_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_LOCALREPDATES\n",NULL,NULL);
if((MT_UpdDL_LOCALREPDATES(l_dl_localrepdates_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_LOCALREPDATESSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_LOCALREPDATESFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_localrepdates_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_LOCALREPDEALTYPE") == 0)
{
INTL_WARNING;
l_dl_localrepdealtype_struct_h =  (DL_LOCALREPDEALTYPE_STRUCT_H *)calloc(1,sizeof(DL_LOCALREPDEALTYPE_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_localrepdealtype_struct_h);
memset(l_dl_localrepdealtype_struct_h,NULL,sizeof(DL_LOCALREPDEALTYPE_STRUCT_H));
int_ret_val = Populate_DL_LOCALREPDEALTYPE(l_dl_localrepdealtype_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_LOCALREPDEALTYPE\n",NULL,NULL);
if((MT_UpdDL_LOCALREPDEALTYPE(l_dl_localrepdealtype_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_LOCALREPDEALTYPESUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_LOCALREPDEALTYPEFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_localrepdealtype_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_LOCALREPPROC") == 0)
{
INTL_WARNING;
l_dl_localrepproc_struct_h =  (DL_LOCALREPPROC_STRUCT_H *)calloc(1,sizeof(DL_LOCALREPPROC_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_localrepproc_struct_h);
memset(l_dl_localrepproc_struct_h,NULL,sizeof(DL_LOCALREPPROC_STRUCT_H));
int_ret_val = Populate_DL_LOCALREPPROC(l_dl_localrepproc_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_LOCALREPPROC\n",NULL,NULL);
if((MT_UpdDL_LOCALREPPROC(l_dl_localrepproc_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_LOCALREPPROCSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_LOCALREPPROCFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_localrepproc_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_LOCALREPPROC2") == 0)
{
INTL_WARNING;
l_dl_localrepproc2_struct_h =  (DL_LOCALREPPROC2_STRUCT_H *)calloc(1,sizeof(DL_LOCALREPPROC2_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_localrepproc2_struct_h);
memset(l_dl_localrepproc2_struct_h,NULL,sizeof(DL_LOCALREPPROC2_STRUCT_H));
int_ret_val = Populate_DL_LOCALREPPROC2(l_dl_localrepproc2_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_LOCALREPPROC2\n",NULL,NULL);
if((MT_UpdDL_LOCALREPPROC2(l_dl_localrepproc2_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_LOCALREPPROC2SUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_LOCALREPPROC2FAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_localrepproc2_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_LOCALREPPROC3") == 0)
{
INTL_WARNING;
l_dl_localrepproc3_struct_h =  (DL_LOCALREPPROC3_STRUCT_H *)calloc(1,sizeof(DL_LOCALREPPROC3_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_localrepproc3_struct_h);
memset(l_dl_localrepproc3_struct_h,NULL,sizeof(DL_LOCALREPPROC3_STRUCT_H));
int_ret_val = Populate_DL_LOCALREPPROC3(l_dl_localrepproc3_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_LOCALREPPROC3\n",NULL,NULL);
if((MT_UpdDL_LOCALREPPROC3(l_dl_localrepproc3_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_LOCALREPPROC3SUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_LOCALREPPROC3FAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_localrepproc3_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_LOCALREPROCMA") == 0)
{
INTL_WARNING;
l_dl_localreprocma_struct_h =  (DL_LOCALREPROCMA_STRUCT_H *)calloc(1,sizeof(DL_LOCALREPROCMA_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_localreprocma_struct_h);
memset(l_dl_localreprocma_struct_h,NULL,sizeof(DL_LOCALREPROCMA_STRUCT_H));
int_ret_val = Populate_DL_LOCALREPROCMA(l_dl_localreprocma_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_LOCALREPROCMA\n",NULL,NULL);
if((MT_UpdDL_LOCALREPROCMA(l_dl_localreprocma_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_LOCALREPROCMASUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_LOCALREPROCMAFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_localreprocma_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_LOCALREPSAFEK") == 0)
{
INTL_WARNING;
l_dl_localrepsafek_struct_h =  (DL_LOCALREPSAFEK_STRUCT_H *)calloc(1,sizeof(DL_LOCALREPSAFEK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_localrepsafek_struct_h);
memset(l_dl_localrepsafek_struct_h,NULL,sizeof(DL_LOCALREPSAFEK_STRUCT_H));
int_ret_val = Populate_DL_LOCALREPSAFEK(l_dl_localrepsafek_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_LOCALREPSAFEK\n",NULL,NULL);
if((MT_UpdDL_LOCALREPSAFEK(l_dl_localrepsafek_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_LOCALREPSAFEKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_LOCALREPSAFEKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_localrepsafek_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_LOCALREPSAFEKMA") == 0)
{
INTL_WARNING;
l_dl_localrepsafekma_struct_h =  (DL_LOCALREPSAFEKMA_STRUCT_H *)calloc(1,sizeof(DL_LOCALREPSAFEKMA_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_localrepsafekma_struct_h);
memset(l_dl_localrepsafekma_struct_h,NULL,sizeof(DL_LOCALREPSAFEKMA_STRUCT_H));
int_ret_val = Populate_DL_LOCALREPSAFEKMA(l_dl_localrepsafekma_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_LOCALREPSAFEKMA\n",NULL,NULL);
if((MT_UpdDL_LOCALREPSAFEKMA(l_dl_localrepsafekma_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_LOCALREPSAFEKMASUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_LOCALREPSAFEKMAFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_localrepsafekma_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_LOCALREPSPEC") == 0)
{
INTL_WARNING;
l_dl_localrepspec_struct_h =  (DL_LOCALREPSPEC_STRUCT_H *)calloc(1,sizeof(DL_LOCALREPSPEC_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_localrepspec_struct_h);
memset(l_dl_localrepspec_struct_h,NULL,sizeof(DL_LOCALREPSPEC_STRUCT_H));
int_ret_val = Populate_DL_LOCALREPSPEC(l_dl_localrepspec_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_LOCALREPSPEC\n",NULL,NULL);
if((MT_UpdDL_LOCALREPSPEC(l_dl_localrepspec_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_LOCALREPSPECSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_LOCALREPSPECFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_localrepspec_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_LOCALREPSPECMA") == 0)
{
INTL_WARNING;
l_dl_localrepspecma_struct_h =  (DL_LOCALREPSPECMA_STRUCT_H *)calloc(1,sizeof(DL_LOCALREPSPECMA_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_localrepspecma_struct_h);
memset(l_dl_localrepspecma_struct_h,NULL,sizeof(DL_LOCALREPSPECMA_STRUCT_H));
int_ret_val = Populate_DL_LOCALREPSPECMA(l_dl_localrepspecma_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_LOCALREPSPECMA\n",NULL,NULL);
if((MT_UpdDL_LOCALREPSPECMA(l_dl_localrepspecma_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_LOCALREPSPECMASUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_LOCALREPSPECMAFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_localrepspecma_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_LOCNCHG") == 0)
{
INTL_WARNING;
l_dl_locnchg_struct_h =  (DL_LOCNCHG_STRUCT_H *)calloc(1,sizeof(DL_LOCNCHG_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_locnchg_struct_h);
memset(l_dl_locnchg_struct_h,NULL,sizeof(DL_LOCNCHG_STRUCT_H));
int_ret_val = Populate_DL_LOCNCHG(l_dl_locnchg_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_LOCNCHG\n",NULL,NULL);
if((MT_UpdDL_LOCNCHG(l_dl_locnchg_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_LOCNCHGSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_LOCNCHGFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_locnchg_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_MAROCLEAR") == 0)
{
INTL_WARNING;
l_dl_maroclear_struct_h =  (DL_MAROCLEAR_STRUCT_H *)calloc(1,sizeof(DL_MAROCLEAR_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_maroclear_struct_h);
memset(l_dl_maroclear_struct_h,NULL,sizeof(DL_MAROCLEAR_STRUCT_H));
int_ret_val = Populate_DL_MAROCLEAR(l_dl_maroclear_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_MAROCLEAR\n",NULL,NULL);
if((MT_UpdDL_MAROCLEAR(l_dl_maroclear_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_MAROCLEARSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_MAROCLEARFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_maroclear_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_MISDEAL") == 0)
{
INTL_WARNING;
l_dl_misdeal_struct_h =  (DL_MISDEAL_STRUCT_H *)calloc(1,sizeof(DL_MISDEAL_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_misdeal_struct_h);
memset(l_dl_misdeal_struct_h,NULL,sizeof(DL_MISDEAL_STRUCT_H));
int_ret_val = Populate_DL_MISDEAL(l_dl_misdeal_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_MISDEAL\n",NULL,NULL);
if((MT_UpdDL_MISDEAL(l_dl_misdeal_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_MISDEALSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_MISDEALFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_misdeal_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_MSGLINK") == 0)
{
INTL_WARNING;
l_dl_msglink_struct_h =  (DL_MSGLINK_STRUCT_H *)calloc(1,sizeof(DL_MSGLINK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_msglink_struct_h);
memset(l_dl_msglink_struct_h,NULL,sizeof(DL_MSGLINK_STRUCT_H));
int_ret_val = Populate_DL_MSGLINK(l_dl_msglink_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_MSGLINK\n",NULL,NULL);
if((MT_UpdDL_MSGLINK(l_dl_msglink_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_MSGLINKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_MSGLINKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_msglink_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_MSGLINKDET") == 0)
{
INTL_WARNING;
l_dl_msglinkdet_struct_h =  (DL_MSGLINKDET_STRUCT_H *)calloc(1,sizeof(DL_MSGLINKDET_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_msglinkdet_struct_h);
memset(l_dl_msglinkdet_struct_h,NULL,sizeof(DL_MSGLINKDET_STRUCT_H));
int_ret_val = Populate_DL_MSGLINKDET(l_dl_msglinkdet_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_MSGLINKDET\n",NULL,NULL);
if((MT_UpdDL_MSGLINKDET(l_dl_msglinkdet_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_MSGLINKDETSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_MSGLINKDETFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_msglinkdet_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_MSGLINK_INC536_VEW") == 0)
{
INTL_WARNING;
l_dl_msglink_inc536_vew_struct_h =  (DL_MSGLINK_INC536_VEW_STRUCT_H *)calloc(1,sizeof(DL_MSGLINK_INC536_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_msglink_inc536_vew_struct_h);
memset(l_dl_msglink_inc536_vew_struct_h,NULL,sizeof(DL_MSGLINK_INC536_VEW_STRUCT_H));
int_ret_val = Populate_DL_MSGLINK_INC536_VEW(l_dl_msglink_inc536_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_MSGLINK_INC536_VEW\n",NULL,NULL);
if((MT_UpdDL_MSGLINK_INC536_VEW(l_dl_msglink_inc536_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_MSGLINK_INC536_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_MSGLINK_INC536_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_msglink_inc536_vew_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_MULT_REAS_CODES") == 0)
{
INTL_WARNING;
l_dl_mult_reas_codes_struct_h =  (DL_MULT_REAS_CODES_STRUCT_H *)calloc(1,sizeof(DL_MULT_REAS_CODES_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_mult_reas_codes_struct_h);
memset(l_dl_mult_reas_codes_struct_h,NULL,sizeof(DL_MULT_REAS_CODES_STRUCT_H));
int_ret_val = Populate_DL_MULT_REAS_CODES(l_dl_mult_reas_codes_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_MULT_REAS_CODES\n",NULL,NULL);
if((MT_UpdDL_MULT_REAS_CODES(l_dl_mult_reas_codes_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_MULT_REAS_CODESSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_MULT_REAS_CODESFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_mult_reas_codes_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_NOTES_VEW") == 0)
{
INTL_WARNING;
l_dl_notes_vew_struct_h =  (DL_NOTES_VEW_STRUCT_H *)calloc(1,sizeof(DL_NOTES_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_notes_vew_struct_h);
memset(l_dl_notes_vew_struct_h,NULL,sizeof(DL_NOTES_VEW_STRUCT_H));
int_ret_val = Populate_DL_NOTES_VEW(l_dl_notes_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_NOTES_VEW\n",NULL,NULL);
if((MT_UpdDL_NOTES_VEW(l_dl_notes_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_NOTES_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_NOTES_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_notes_vew_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_PAST_VDP_VEW") == 0)
{
INTL_WARNING;
l_dl_past_vdp_vew_struct_h =  (DL_PAST_VDP_VEW_STRUCT_H *)calloc(1,sizeof(DL_PAST_VDP_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_past_vdp_vew_struct_h);
memset(l_dl_past_vdp_vew_struct_h,NULL,sizeof(DL_PAST_VDP_VEW_STRUCT_H));
int_ret_val = Populate_DL_PAST_VDP_VEW(l_dl_past_vdp_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_PAST_VDP_VEW\n",NULL,NULL);
if((MT_UpdDL_PAST_VDP_VEW(l_dl_past_vdp_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_PAST_VDP_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_PAST_VDP_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_past_vdp_vew_struct_h);
}







/*
else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_PER_PORTFOLIO_VEW") == 0)
{
INTL_WARNING;
l_dl_per_portfolio_vew_struct_h =  (DL_PER_PORTFOLIO_VEW_STRUCT_H *)calloc(1,sizeof(DL_PER_PORTFOLIO_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_per_portfolio_vew_struct_h);
memset(l_dl_per_portfolio_vew_struct_h,NULL,sizeof(DL_PER_PORTFOLIO_VEW_STRUCT_H));
int_ret_val = Populate_DL_PER_PORTFOLIO_VEW(l_dl_per_portfolio_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_PER_PORTFOLIO_VEW\n",NULL,NULL);
if((MT_UpdDL_PER_PORTFOLIO_VEW(l_dl_per_portfolio_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_PER_PORTFOLIO_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_PER_PORTFOLIO_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_per_portfolio_vew_struct_h);
}
*/






else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_PREV_EOM_SAFEK_VEW") == 0)
{
INTL_WARNING;
l_dl_prev_eom_safek_vew_struct_h =  (DL_PREV_EOM_SAFEK_VEW_STRUCT_H *)calloc(1,sizeof(DL_PREV_EOM_SAFEK_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_prev_eom_safek_vew_struct_h);
memset(l_dl_prev_eom_safek_vew_struct_h,NULL,sizeof(DL_PREV_EOM_SAFEK_VEW_STRUCT_H));
int_ret_val = Populate_DL_PREV_EOM_SAFEK_VEW(l_dl_prev_eom_safek_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_PREV_EOM_SAFEK_VEW\n",NULL,NULL);
if((MT_UpdDL_PREV_EOM_SAFEK_VEW(l_dl_prev_eom_safek_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_PREV_EOM_SAFEK_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_PREV_EOM_SAFEK_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_prev_eom_safek_vew_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_REGCYCLE") == 0)
{
INTL_WARNING;
l_dl_regcycle_struct_h =  (DL_REGCYCLE_STRUCT_H *)calloc(1,sizeof(DL_REGCYCLE_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_regcycle_struct_h);
memset(l_dl_regcycle_struct_h,NULL,sizeof(DL_REGCYCLE_STRUCT_H));
int_ret_val = Populate_DL_REGCYCLE(l_dl_regcycle_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_REGCYCLE\n",NULL,NULL);
if((MT_UpdDL_REGCYCLE(l_dl_regcycle_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_REGCYCLESUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_REGCYCLEFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_regcycle_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_REGDET") == 0)
{
INTL_WARNING;
l_dl_regdet_struct_h =  (DL_REGDET_STRUCT_H *)calloc(1,sizeof(DL_REGDET_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_regdet_struct_h);
memset(l_dl_regdet_struct_h,NULL,sizeof(DL_REGDET_STRUCT_H));
int_ret_val = Populate_DL_REGDET(l_dl_regdet_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_REGDET\n",NULL,NULL);
if((MT_UpdDL_REGDET(l_dl_regdet_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_REGDETSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_REGDETFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_regdet_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_REGPAR") == 0)
{
INTL_WARNING;
l_dl_regpar_struct_h =  (DL_REGPAR_STRUCT_H *)calloc(1,sizeof(DL_REGPAR_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_regpar_struct_h);
memset(l_dl_regpar_struct_h,NULL,sizeof(DL_REGPAR_STRUCT_H));
int_ret_val = Populate_DL_REGPAR(l_dl_regpar_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_REGPAR\n",NULL,NULL);
if((MT_UpdDL_REGPAR(l_dl_regpar_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_REGPARSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_REGPARFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_regpar_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_REG_STATISTICS_VEW") == 0)
{
INTL_WARNING;
l_dl_reg_statistics_vew_struct_h =  (DL_REG_STATISTICS_VEW_STRUCT_H *)calloc(1,sizeof(DL_REG_STATISTICS_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_reg_statistics_vew_struct_h);
memset(l_dl_reg_statistics_vew_struct_h,NULL,sizeof(DL_REG_STATISTICS_VEW_STRUCT_H));
int_ret_val = Populate_DL_REG_STATISTICS_VEW(l_dl_reg_statistics_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_REG_STATISTICS_VEW\n",NULL,NULL);
if((MT_UpdDL_REG_STATISTICS_VEW(l_dl_reg_statistics_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_REG_STATISTICS_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_REG_STATISTICS_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_reg_statistics_vew_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_REG_STATUS_VEW") == 0)
{
INTL_WARNING;
l_dl_reg_status_vew_struct_h =  (DL_REG_STATUS_VEW_STRUCT_H *)calloc(1,sizeof(DL_REG_STATUS_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_reg_status_vew_struct_h);
memset(l_dl_reg_status_vew_struct_h,NULL,sizeof(DL_REG_STATUS_VEW_STRUCT_H));
int_ret_val = Populate_DL_REG_STATUS_VEW(l_dl_reg_status_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_REG_STATUS_VEW\n",NULL,NULL);
if((MT_UpdDL_REG_STATUS_VEW(l_dl_reg_status_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_REG_STATUS_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_REG_STATUS_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_reg_status_vew_struct_h);
}







/*
else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_REPIRE_VEW") == 0)
{
INTL_WARNING;
l_dl_repire_vew_struct_h =  (DL_REPIRE_VEW_STRUCT_H *)calloc(1,sizeof(DL_REPIRE_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_repire_vew_struct_h);
memset(l_dl_repire_vew_struct_h,NULL,sizeof(DL_REPIRE_VEW_STRUCT_H));
int_ret_val = Populate_DL_REPIRE_VEW(l_dl_repire_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_REPIRE_VEW\n",NULL,NULL);
if((MT_UpdDL_REPIRE_VEW(l_dl_repire_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_REPIRE_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_REPIRE_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_repire_vew_struct_h);
}
*/






else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_RUARCHSAFEK") == 0)
{
INTL_WARNING;
l_dl_ruarchsafek_struct_h =  (DL_RUARCHSAFEK_STRUCT_H *)calloc(1,sizeof(DL_RUARCHSAFEK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_ruarchsafek_struct_h);
memset(l_dl_ruarchsafek_struct_h,NULL,sizeof(DL_RUARCHSAFEK_STRUCT_H));
int_ret_val = Populate_DL_RUARCHSAFEK(l_dl_ruarchsafek_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_RUARCHSAFEK\n",NULL,NULL);
if((MT_UpdDL_RUARCHSAFEK(l_dl_ruarchsafek_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_RUARCHSAFEKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_RUARCHSAFEKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_ruarchsafek_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_RUCLIENT") == 0)
{
INTL_WARNING;
l_dl_ruclient_struct_h =  (DL_RUCLIENT_STRUCT_H *)calloc(1,sizeof(DL_RUCLIENT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_ruclient_struct_h);
memset(l_dl_ruclient_struct_h,NULL,sizeof(DL_RUCLIENT_STRUCT_H));
int_ret_val = Populate_DL_RUCLIENT(l_dl_ruclient_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_RUCLIENT\n",NULL,NULL);
if((MT_UpdDL_RUCLIENT(l_dl_ruclient_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_RUCLIENTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_RUCLIENTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_ruclient_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_RUDEAL") == 0)
{
INTL_WARNING;
l_dl_rudeal_struct_h =  (DL_RUDEAL_STRUCT_H *)calloc(1,sizeof(DL_RUDEAL_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_rudeal_struct_h);
memset(l_dl_rudeal_struct_h,NULL,sizeof(DL_RUDEAL_STRUCT_H));
int_ret_val = Populate_DL_RUDEAL(l_dl_rudeal_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_RUDEAL\n",NULL,NULL);
if((MT_UpdDL_RUDEAL(l_dl_rudeal_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_RUDEALSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_RUDEALFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_rudeal_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_RUDEAL_TMP") == 0)
{
INTL_WARNING;
l_dl_rudeal_tmp_struct_h =  (DL_RUDEAL_TMP_STRUCT_H *)calloc(1,sizeof(DL_RUDEAL_TMP_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_rudeal_tmp_struct_h);
memset(l_dl_rudeal_tmp_struct_h,NULL,sizeof(DL_RUDEAL_TMP_STRUCT_H));
int_ret_val = Populate_DL_RUDEAL_TMP(l_dl_rudeal_tmp_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_RUDEAL_TMP\n",NULL,NULL);
if((MT_UpdDL_RUDEAL_TMP(l_dl_rudeal_tmp_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_RUDEAL_TMPSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_RUDEAL_TMPFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_rudeal_tmp_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_RUHISDEAL") == 0)
{
INTL_WARNING;
l_dl_ruhisdeal_struct_h =  (DL_RUHISDEAL_STRUCT_H *)calloc(1,sizeof(DL_RUHISDEAL_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_ruhisdeal_struct_h);
memset(l_dl_ruhisdeal_struct_h,NULL,sizeof(DL_RUHISDEAL_STRUCT_H));
int_ret_val = Populate_DL_RUHISDEAL(l_dl_ruhisdeal_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_RUHISDEAL\n",NULL,NULL);
if((MT_UpdDL_RUHISDEAL(l_dl_ruhisdeal_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_RUHISDEALSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_RUHISDEALFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_ruhisdeal_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_RUHISSAFEK") == 0)
{
INTL_WARNING;
l_dl_ruhissafek_struct_h =  (DL_RUHISSAFEK_STRUCT_H *)calloc(1,sizeof(DL_RUHISSAFEK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_ruhissafek_struct_h);
memset(l_dl_ruhissafek_struct_h,NULL,sizeof(DL_RUHISSAFEK_STRUCT_H));
int_ret_val = Populate_DL_RUHISSAFEK(l_dl_ruhissafek_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_RUHISSAFEK\n",NULL,NULL);
if((MT_UpdDL_RUHISSAFEK(l_dl_ruhissafek_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_RUHISSAFEKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_RUHISSAFEKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_ruhissafek_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_RUINSTRUMENT") == 0)
{
INTL_WARNING;
l_dl_ruinstrument_struct_h =  (DL_RUINSTRUMENT_STRUCT_H *)calloc(1,sizeof(DL_RUINSTRUMENT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_ruinstrument_struct_h);
memset(l_dl_ruinstrument_struct_h,NULL,sizeof(DL_RUINSTRUMENT_STRUCT_H));
int_ret_val = Populate_DL_RUINSTRUMENT(l_dl_ruinstrument_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_RUINSTRUMENT\n",NULL,NULL);
if((MT_UpdDL_RUINSTRUMENT(l_dl_ruinstrument_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_RUINSTRUMENTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_RUINSTRUMENTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_ruinstrument_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_RULOCATION") == 0)
{
INTL_WARNING;
l_dl_rulocation_struct_h =  (DL_RULOCATION_STRUCT_H *)calloc(1,sizeof(DL_RULOCATION_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_rulocation_struct_h);
memset(l_dl_rulocation_struct_h,NULL,sizeof(DL_RULOCATION_STRUCT_H));
int_ret_val = Populate_DL_RULOCATION(l_dl_rulocation_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_RULOCATION\n",NULL,NULL);
if((MT_UpdDL_RULOCATION(l_dl_rulocation_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_RULOCATIONSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_RULOCATIONFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_rulocation_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_RUPRODUCT") == 0)
{
INTL_WARNING;
l_dl_ruproduct_struct_h =  (DL_RUPRODUCT_STRUCT_H *)calloc(1,sizeof(DL_RUPRODUCT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_ruproduct_struct_h);
memset(l_dl_ruproduct_struct_h,NULL,sizeof(DL_RUPRODUCT_STRUCT_H));
int_ret_val = Populate_DL_RUPRODUCT(l_dl_ruproduct_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_RUPRODUCT\n",NULL,NULL);
if((MT_UpdDL_RUPRODUCT(l_dl_ruproduct_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_RUPRODUCTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_RUPRODUCTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_ruproduct_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_RUSAFEK") == 0)
{
INTL_WARNING;
l_dl_rusafek_struct_h =  (DL_RUSAFEK_STRUCT_H *)calloc(1,sizeof(DL_RUSAFEK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_rusafek_struct_h);
memset(l_dl_rusafek_struct_h,NULL,sizeof(DL_RUSAFEK_STRUCT_H));
int_ret_val = Populate_DL_RUSAFEK(l_dl_rusafek_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_RUSAFEK\n",NULL,NULL);
if((MT_UpdDL_RUSAFEK(l_dl_rusafek_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_RUSAFEKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_RUSAFEKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_rusafek_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_RUSRN") == 0)
{
INTL_WARNING;
l_dl_rusrn_struct_h =  (DL_RUSRN_STRUCT_H *)calloc(1,sizeof(DL_RUSRN_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_rusrn_struct_h);
memset(l_dl_rusrn_struct_h,NULL,sizeof(DL_RUSRN_STRUCT_H));
int_ret_val = Populate_DL_RUSRN(l_dl_rusrn_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_RUSRN\n",NULL,NULL);
if((MT_UpdDL_RUSRN(l_dl_rusrn_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_RUSRNSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_RUSRNFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_rusrn_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_SAFEK") == 0)
{
INTL_WARNING;
l_dl_safek_struct_h =  (DL_SAFEK_STRUCT_H *)calloc(1,sizeof(DL_SAFEK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_safek_struct_h);
memset(l_dl_safek_struct_h,NULL,sizeof(DL_SAFEK_STRUCT_H));
int_ret_val = Populate_DL_SAFEK(l_dl_safek_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_SAFEK\n",NULL,NULL);
if((MT_UpdDL_SAFEK(l_dl_safek_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_SAFEKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_SAFEKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_safek_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_SAFEK_VEW") == 0)
{
INTL_WARNING;
l_dl_safek_vew_struct_h =  (DL_SAFEK_VEW_STRUCT_H *)calloc(1,sizeof(DL_SAFEK_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_safek_vew_struct_h);
memset(l_dl_safek_vew_struct_h,NULL,sizeof(DL_SAFEK_VEW_STRUCT_H));
int_ret_val = Populate_DL_SAFEK_VEW(l_dl_safek_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_SAFEK_VEW\n",NULL,NULL);
if((MT_UpdDL_SAFEK_VEW(l_dl_safek_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_SAFEK_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_SAFEK_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_safek_vew_struct_h);
}







/*
else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_SECTORWISE_HOLD_VEW") == 0)
{
INTL_WARNING;
l_dl_sectorwise_hold_vew_struct_h =  (DL_SECTORWISE_HOLD_VEW_STRUCT_H *)calloc(1,sizeof(DL_SECTORWISE_HOLD_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_sectorwise_hold_vew_struct_h);
memset(l_dl_sectorwise_hold_vew_struct_h,NULL,sizeof(DL_SECTORWISE_HOLD_VEW_STRUCT_H));
int_ret_val = Populate_DL_SECTORWISE_HOLD_VEW(l_dl_sectorwise_hold_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_SECTORWISE_HOLD_VEW\n",NULL,NULL);
if((MT_UpdDL_SECTORWISE_HOLD_VEW(l_dl_sectorwise_hold_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_SECTORWISE_HOLD_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_SECTORWISE_HOLD_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_sectorwise_hold_vew_struct_h);
}


*/




else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_SETLRPT") == 0)
{
INTL_WARNING;
l_dl_setlrpt_struct_h =  (DL_SETLRPT_STRUCT_H *)calloc(1,sizeof(DL_SETLRPT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_setlrpt_struct_h);
memset(l_dl_setlrpt_struct_h,NULL,sizeof(DL_SETLRPT_STRUCT_H));
int_ret_val = Populate_DL_SETLRPT(l_dl_setlrpt_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_SETLRPT\n",NULL,NULL);
if((MT_UpdDL_SETLRPT(l_dl_setlrpt_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_SETLRPTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_SETLRPTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_setlrpt_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_SETLRPT_VEW") == 0)
{
INTL_WARNING;
l_dl_setlrpt_vew_struct_h =  (DL_SETLRPT_VEW_STRUCT_H *)calloc(1,sizeof(DL_SETLRPT_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_setlrpt_vew_struct_h);
memset(l_dl_setlrpt_vew_struct_h,NULL,sizeof(DL_SETLRPT_VEW_STRUCT_H));
int_ret_val = Populate_DL_SETLRPT_VEW(l_dl_setlrpt_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_SETLRPT_VEW\n",NULL,NULL);
if((MT_UpdDL_SETLRPT_VEW(l_dl_setlrpt_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_SETLRPT_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_SETLRPT_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_setlrpt_vew_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_SFEREJ") == 0)
{
INTL_WARNING;
l_dl_sferej_struct_h =  (DL_SFEREJ_STRUCT_H *)calloc(1,sizeof(DL_SFEREJ_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_sferej_struct_h);
memset(l_dl_sferej_struct_h,NULL,sizeof(DL_SFEREJ_STRUCT_H));
int_ret_val = Populate_DL_SFEREJ(l_dl_sferej_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_SFEREJ\n",NULL,NULL);
if((MT_UpdDL_SFEREJ(l_dl_sferej_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_SFEREJSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_SFEREJFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_sferej_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_SMI_PENDTXN") == 0)
{
INTL_WARNING;
l_dl_smi_pendtxn_struct_h =  (DL_SMI_PENDTXN_STRUCT_H *)calloc(1,sizeof(DL_SMI_PENDTXN_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_smi_pendtxn_struct_h);
memset(l_dl_smi_pendtxn_struct_h,NULL,sizeof(DL_SMI_PENDTXN_STRUCT_H));
int_ret_val = Populate_DL_SMI_PENDTXN(l_dl_smi_pendtxn_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_SMI_PENDTXN\n",NULL,NULL);
if((MT_UpdDL_SMI_PENDTXN(l_dl_smi_pendtxn_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_SMI_PENDTXNSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_SMI_PENDTXNFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_smi_pendtxn_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_SMI_TMP_TRADE") == 0)
{
INTL_WARNING;
l_dl_smi_tmp_trade_struct_h =  (DL_SMI_TMP_TRADE_STRUCT_H *)calloc(1,sizeof(DL_SMI_TMP_TRADE_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_smi_tmp_trade_struct_h);
memset(l_dl_smi_tmp_trade_struct_h,NULL,sizeof(DL_SMI_TMP_TRADE_STRUCT_H));
int_ret_val = Populate_DL_SMI_TMP_TRADE(l_dl_smi_tmp_trade_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_SMI_TMP_TRADE\n",NULL,NULL);
if((MT_UpdDL_SMI_TMP_TRADE(l_dl_smi_tmp_trade_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_SMI_TMP_TRADESUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_SMI_TMP_TRADEFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_smi_tmp_trade_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_SUMFUTURE_VDP_VEW") == 0)
{
INTL_WARNING;
l_dl_sumfuture_vdp_vew_struct_h =  (DL_SUMFUTURE_VDP_VEW_STRUCT_H *)calloc(1,sizeof(DL_SUMFUTURE_VDP_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_sumfuture_vdp_vew_struct_h);
memset(l_dl_sumfuture_vdp_vew_struct_h,NULL,sizeof(DL_SUMFUTURE_VDP_VEW_STRUCT_H));
int_ret_val = Populate_DL_SUMFUTURE_VDP_VEW(l_dl_sumfuture_vdp_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_SUMFUTURE_VDP_VEW\n",NULL,NULL);
if((MT_UpdDL_SUMFUTURE_VDP_VEW(l_dl_sumfuture_vdp_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_SUMFUTURE_VDP_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_SUMFUTURE_VDP_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_sumfuture_vdp_vew_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_TMPMSGLINK") == 0)
{
INTL_WARNING;
l_dl_tmpmsglink_struct_h =  (DL_TMPMSGLINK_STRUCT_H *)calloc(1,sizeof(DL_TMPMSGLINK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_tmpmsglink_struct_h);
memset(l_dl_tmpmsglink_struct_h,NULL,sizeof(DL_TMPMSGLINK_STRUCT_H));
int_ret_val = Populate_DL_TMPMSGLINK(l_dl_tmpmsglink_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_TMPMSGLINK\n",NULL,NULL);
if((MT_UpdDL_TMPMSGLINK(l_dl_tmpmsglink_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_TMPMSGLINKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_TMPMSGLINKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_tmpmsglink_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_TMPMSGLINKDET") == 0)
{
INTL_WARNING;
l_dl_tmpmsglinkdet_struct_h =  (DL_TMPMSGLINKDET_STRUCT_H *)calloc(1,sizeof(DL_TMPMSGLINKDET_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_tmpmsglinkdet_struct_h);
memset(l_dl_tmpmsglinkdet_struct_h,NULL,sizeof(DL_TMPMSGLINKDET_STRUCT_H));
int_ret_val = Populate_DL_TMPMSGLINKDET(l_dl_tmpmsglinkdet_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_TMPMSGLINKDET\n",NULL,NULL);
if((MT_UpdDL_TMPMSGLINKDET(l_dl_tmpmsglinkdet_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_TMPMSGLINKDETSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_TMPMSGLINKDETFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_tmpmsglinkdet_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DL_WEEKTXNBAL") == 0)
{
INTL_WARNING;
l_dl_weektxnbal_struct_h =  (DL_WEEKTXNBAL_STRUCT_H *)calloc(1,sizeof(DL_WEEKTXNBAL_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dl_weektxnbal_struct_h);
memset(l_dl_weektxnbal_struct_h,NULL,sizeof(DL_WEEKTXNBAL_STRUCT_H));
int_ret_val = Populate_DL_WEEKTXNBAL(l_dl_weektxnbal_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDL_WEEKTXNBAL\n",NULL,NULL);
if((MT_UpdDL_WEEKTXNBAL(l_dl_weektxnbal_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_WEEKTXNBALSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_WEEKTXNBALFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dl_weektxnbal_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DW_ARESPONSE_VEW") == 0)
{
INTL_WARNING;
l_dw_aresponse_vew_struct_h =  (DW_ARESPONSE_VEW_STRUCT_H *)calloc(1,sizeof(DW_ARESPONSE_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dw_aresponse_vew_struct_h);
memset(l_dw_aresponse_vew_struct_h,NULL,sizeof(DW_ARESPONSE_VEW_STRUCT_H));
int_ret_val = Populate_DW_ARESPONSE_VEW(l_dw_aresponse_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDW_ARESPONSE_VEW\n",NULL,NULL);
if((MT_UpdDW_ARESPONSE_VEW(l_dw_aresponse_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDW_ARESPONSE_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDW_ARESPONSE_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dw_aresponse_vew_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DW_CACHEQUE_VEW") == 0)
{
INTL_WARNING;
l_dw_cacheque_vew_struct_h =  (DW_CACHEQUE_VEW_STRUCT_H *)calloc(1,sizeof(DW_CACHEQUE_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dw_cacheque_vew_struct_h);
memset(l_dw_cacheque_vew_struct_h,NULL,sizeof(DW_CACHEQUE_VEW_STRUCT_H));
int_ret_val = Populate_DW_CACHEQUE_VEW(l_dw_cacheque_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDW_CACHEQUE_VEW\n",NULL,NULL);
if((MT_UpdDW_CACHEQUE_VEW(l_dw_cacheque_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDW_CACHEQUE_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDW_CACHEQUE_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dw_cacheque_vew_struct_h);
}







/*
else if (strcmp(l_request_mt -> h_proc_name,"wrp_DW_CAEVENT_VEW") == 0)
{
INTL_WARNING;
l_dw_caevent_vew_struct_h =  (DW_CAEVENT_VEW_STRUCT_H *)calloc(1,sizeof(DW_CAEVENT_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dw_caevent_vew_struct_h);
memset(l_dw_caevent_vew_struct_h,NULL,sizeof(DW_CAEVENT_VEW_STRUCT_H));
int_ret_val = Populate_DW_CAEVENT_VEW(l_dw_caevent_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDW_CAEVENT_VEW\n",NULL,NULL);
if((MT_UpdDW_CAEVENT_VEW(l_dw_caevent_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDW_CAEVENT_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDW_CAEVENT_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dw_caevent_vew_struct_h);
}


*/




else if (strcmp(l_request_mt -> h_proc_name,"wrp_DW_CANOTE_VEW") == 0)
{
INTL_WARNING;
l_dw_canote_vew_struct_h =  (DW_CANOTE_VEW_STRUCT_H *)calloc(1,sizeof(DW_CANOTE_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dw_canote_vew_struct_h);
memset(l_dw_canote_vew_struct_h,NULL,sizeof(DW_CANOTE_VEW_STRUCT_H));
int_ret_val = Populate_DW_CANOTE_VEW(l_dw_canote_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDW_CANOTE_VEW\n",NULL,NULL);
if((MT_UpdDW_CANOTE_VEW(l_dw_canote_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDW_CANOTE_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDW_CANOTE_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dw_canote_vew_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DW_DLDEAL_VEW") == 0)
{
INTL_WARNING;
l_dw_dldeal_vew_struct_h =  (DW_DLDEAL_VEW_STRUCT_H *)calloc(1,sizeof(DW_DLDEAL_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dw_dldeal_vew_struct_h);
memset(l_dw_dldeal_vew_struct_h,NULL,sizeof(DW_DLDEAL_VEW_STRUCT_H));
int_ret_val = Populate_DW_DLDEAL_VEW(l_dw_dldeal_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDW_DLDEAL_VEW\n",NULL,NULL);
if((MT_UpdDW_DLDEAL_VEW(l_dw_dldeal_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDW_DLDEAL_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDW_DLDEAL_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dw_dldeal_vew_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_DW_DLSAFEK_VEW") == 0)
{
INTL_WARNING;
l_dw_dlsafek_vew_struct_h =  (DW_DLSAFEK_VEW_STRUCT_H *)calloc(1,sizeof(DW_DLSAFEK_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dw_dlsafek_vew_struct_h);
memset(l_dw_dlsafek_vew_struct_h,NULL,sizeof(DW_DLSAFEK_VEW_STRUCT_H));
int_ret_val = Populate_DW_DLSAFEK_VEW(l_dw_dlsafek_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDW_DLSAFEK_VEW\n",NULL,NULL);
if((MT_UpdDW_DLSAFEK_VEW(l_dw_dlsafek_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDW_DLSAFEK_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDW_DLSAFEK_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dw_dlsafek_vew_struct_h);
}







/*
else if (strcmp(l_request_mt -> h_proc_name,"wrp_DW_MTCLIENT_VEW") == 0)
{
INTL_WARNING;
l_dw_mtclient_vew_struct_h =  (DW_MTCLIENT_VEW_STRUCT_H *)calloc(1,sizeof(DW_MTCLIENT_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dw_mtclient_vew_struct_h);
memset(l_dw_mtclient_vew_struct_h,NULL,sizeof(DW_MTCLIENT_VEW_STRUCT_H));
int_ret_val = Populate_DW_MTCLIENT_VEW(l_dw_mtclient_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDW_MTCLIENT_VEW\n",NULL,NULL);
if((MT_UpdDW_MTCLIENT_VEW(l_dw_mtclient_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDW_MTCLIENT_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDW_MTCLIENT_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dw_mtclient_vew_struct_h);
}

*/





else if (strcmp(l_request_mt -> h_proc_name,"wrp_DW_MTDAILY_MKT_PRICE_VEW") == 0)
{
INTL_WARNING;
l_dw_mtdaily_mkt_price_vew_struct_h =  (DW_MTDAILY_MKT_PRICE_VEW_STRUCT_H *)calloc(1,sizeof(DW_MTDAILY_MKT_PRICE_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dw_mtdaily_mkt_price_vew_struct_h);
memset(l_dw_mtdaily_mkt_price_vew_struct_h,NULL,sizeof(DW_MTDAILY_MKT_PRICE_VEW_STRUCT_H));
int_ret_val = Populate_DW_MTDAILY_MKT_PRICE_VEW(l_dw_mtdaily_mkt_price_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDW_MTDAILY_MKT_PRICE_VEW\n",NULL,NULL);
if((MT_UpdDW_MTDAILY_MKT_PRICE_VEW(l_dw_mtdaily_mkt_price_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDW_MTDAILY_MKT_PRICE_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDW_MTDAILY_MKT_PRICE_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dw_mtdaily_mkt_price_vew_struct_h);
}





/*else if (strcmp(l_request_mt -> h_proc_name,"wrp_DW_MTINSTRUMENT_VEW") == 0)
{
INTL_WARNING;
l_dw_mtinstrument_vew_struct_h =  (DW_MTINSTRUMENT_VEW_STRUCT_H *)calloc(1,sizeof(DW_MTINSTRUMENT_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_dw_mtinstrument_vew_struct_h);
memset(l_dw_mtinstrument_vew_struct_h,NULL,sizeof(DW_MTINSTRUMENT_VEW_STRUCT_H));
int_ret_val = Populate_DW_MTINSTRUMENT_VEW(l_dw_mtinstrument_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdDW_MTINSTRUMENT_VEW\n",NULL,NULL);
if((MT_UpdDW_MTINSTRUMENT_VEW(l_dw_mtinstrument_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDW_MTINSTRUMENT_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDW_MTINSTRUMENT_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_dw_mtinstrument_vew_struct_h);
}
*/






else if (strcmp(l_request_mt -> h_proc_name,"wrp_GN_AUDIT_LOG") == 0)
{
INTL_WARNING;
l_gn_audit_log_struct_h =  (GN_AUDIT_LOG_STRUCT_H *)calloc(1,sizeof(GN_AUDIT_LOG_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_gn_audit_log_struct_h);
memset(l_gn_audit_log_struct_h,NULL,sizeof(GN_AUDIT_LOG_STRUCT_H));
int_ret_val = Populate_GN_AUDIT_LOG(l_gn_audit_log_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdGN_AUDIT_LOG\n",NULL,NULL);
if((MT_UpdGN_AUDIT_LOG(l_gn_audit_log_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdGN_AUDIT_LOGSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdGN_AUDIT_LOGFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_gn_audit_log_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_GN_AUDIT_MAP") == 0)
{
INTL_WARNING;
l_gn_audit_map_struct_h =  (GN_AUDIT_MAP_STRUCT_H *)calloc(1,sizeof(GN_AUDIT_MAP_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_gn_audit_map_struct_h);
memset(l_gn_audit_map_struct_h,NULL,sizeof(GN_AUDIT_MAP_STRUCT_H));
int_ret_val = Populate_GN_AUDIT_MAP(l_gn_audit_map_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdGN_AUDIT_MAP\n",NULL,NULL);
if((MT_UpdGN_AUDIT_MAP(l_gn_audit_map_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdGN_AUDIT_MAPSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdGN_AUDIT_MAPFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_gn_audit_map_struct_h);
}






/** Changing else if to if **/
if (strcmp(l_request_mt -> h_proc_name,"wrp_GN_AUDIT_MAP_230106") == 0)
{
INTL_WARNING;
l_gn_audit_map_230106_struct_h =  (GN_AUDIT_MAP_230106_STRUCT_H *)calloc(1,sizeof(GN_AUDIT_MAP_230106_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_gn_audit_map_230106_struct_h);
memset(l_gn_audit_map_230106_struct_h,NULL,sizeof(GN_AUDIT_MAP_230106_STRUCT_H));
int_ret_val = Populate_GN_AUDIT_MAP_230106(l_gn_audit_map_230106_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdGN_AUDIT_MAP_230106\n",NULL,NULL);
if((MT_UpdGN_AUDIT_MAP_230106(l_gn_audit_map_230106_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdGN_AUDIT_MAP_230106SUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdGN_AUDIT_MAP_230106FAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_gn_audit_map_230106_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_GN_AUDIT_MAP_BAK") == 0)
{
INTL_WARNING;
l_gn_audit_map_bak_struct_h =  (GN_AUDIT_MAP_BAK_STRUCT_H *)calloc(1,sizeof(GN_AUDIT_MAP_BAK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_gn_audit_map_bak_struct_h);
memset(l_gn_audit_map_bak_struct_h,NULL,sizeof(GN_AUDIT_MAP_BAK_STRUCT_H));
int_ret_val = Populate_GN_AUDIT_MAP_BAK(l_gn_audit_map_bak_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdGN_AUDIT_MAP_BAK\n",NULL,NULL);
if((MT_UpdGN_AUDIT_MAP_BAK(l_gn_audit_map_bak_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdGN_AUDIT_MAP_BAKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdGN_AUDIT_MAP_BAKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_gn_audit_map_bak_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_GN_AUDIT_MAP_DUMMY") == 0)
{
INTL_WARNING;
l_gn_audit_map_dummy_struct_h =  (GN_AUDIT_MAP_DUMMY_STRUCT_H *)calloc(1,sizeof(GN_AUDIT_MAP_DUMMY_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_gn_audit_map_dummy_struct_h);
memset(l_gn_audit_map_dummy_struct_h,NULL,sizeof(GN_AUDIT_MAP_DUMMY_STRUCT_H));
int_ret_val = Populate_GN_AUDIT_MAP_DUMMY(l_gn_audit_map_dummy_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdGN_AUDIT_MAP_DUMMY\n",NULL,NULL);
if((MT_UpdGN_AUDIT_MAP_DUMMY(l_gn_audit_map_dummy_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdGN_AUDIT_MAP_DUMMYSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdGN_AUDIT_MAP_DUMMYFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_gn_audit_map_dummy_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_GN_COMMON_STATUS") == 0)
{
INTL_WARNING;
l_gn_common_status_struct_h =  (GN_COMMON_STATUS_STRUCT_H *)calloc(1,sizeof(GN_COMMON_STATUS_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_gn_common_status_struct_h);
memset(l_gn_common_status_struct_h,NULL,sizeof(GN_COMMON_STATUS_STRUCT_H));
int_ret_val = Populate_GN_COMMON_STATUS(l_gn_common_status_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdGN_COMMON_STATUS\n",NULL,NULL);
if((MT_UpdGN_COMMON_STATUS(l_gn_common_status_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdGN_COMMON_STATUSSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdGN_COMMON_STATUSFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_gn_common_status_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_GN_COMMON_STATUS_BAK") == 0)
{
INTL_WARNING;
l_gn_common_status_bak_struct_h =  (GN_COMMON_STATUS_BAK_STRUCT_H *)calloc(1,sizeof(GN_COMMON_STATUS_BAK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_gn_common_status_bak_struct_h);
memset(l_gn_common_status_bak_struct_h,NULL,sizeof(GN_COMMON_STATUS_BAK_STRUCT_H));
int_ret_val = Populate_GN_COMMON_STATUS_BAK(l_gn_common_status_bak_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdGN_COMMON_STATUS_BAK\n",NULL,NULL);
if((MT_UpdGN_COMMON_STATUS_BAK(l_gn_common_status_bak_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdGN_COMMON_STATUS_BAKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdGN_COMMON_STATUS_BAKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_gn_common_status_bak_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_GN_CRITERIA_PICKLIST") == 0)
{
INTL_WARNING;
l_gn_criteria_picklist_struct_h =  (GN_CRITERIA_PICKLIST_STRUCT_H *)calloc(1,sizeof(GN_CRITERIA_PICKLIST_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_gn_criteria_picklist_struct_h);
memset(l_gn_criteria_picklist_struct_h,NULL,sizeof(GN_CRITERIA_PICKLIST_STRUCT_H));
int_ret_val = Populate_GN_CRITERIA_PICKLIST(l_gn_criteria_picklist_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdGN_CRITERIA_PICKLIST\n",NULL,NULL);
if((MT_UpdGN_CRITERIA_PICKLIST(l_gn_criteria_picklist_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdGN_CRITERIA_PICKLISTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdGN_CRITERIA_PICKLISTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_gn_criteria_picklist_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_GN_ENTITY_PICKLIST") == 0)
{
INTL_WARNING;
l_gn_entity_picklist_struct_h =  (GN_ENTITY_PICKLIST_STRUCT_H *)calloc(1,sizeof(GN_ENTITY_PICKLIST_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_gn_entity_picklist_struct_h);
memset(l_gn_entity_picklist_struct_h,NULL,sizeof(GN_ENTITY_PICKLIST_STRUCT_H));
int_ret_val = Populate_GN_ENTITY_PICKLIST(l_gn_entity_picklist_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdGN_ENTITY_PICKLIST\n",NULL,NULL);
if((MT_UpdGN_ENTITY_PICKLIST(l_gn_entity_picklist_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdGN_ENTITY_PICKLISTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdGN_ENTITY_PICKLISTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_gn_entity_picklist_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_GN_ENTITY_PICKLIST_230106") == 0)
{
INTL_WARNING;
l_gn_entity_picklist_230106_struct_h =  (GN_ENTITY_PICKLIST_230106_STRUCT_H *)calloc(1,sizeof(GN_ENTITY_PICKLIST_230106_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_gn_entity_picklist_230106_struct_h);
memset(l_gn_entity_picklist_230106_struct_h,NULL,sizeof(GN_ENTITY_PICKLIST_230106_STRUCT_H));
int_ret_val = Populate_GN_ENTITY_PICKLIST_230106(l_gn_entity_picklist_230106_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdGN_ENTITY_PICKLIST_230106\n",NULL,NULL);
if((MT_UpdGN_ENTITY_PICKLIST_230106(l_gn_entity_picklist_230106_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdGN_ENTITY_PICKLIST_230106SUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdGN_ENTITY_PICKLIST_230106FAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_gn_entity_picklist_230106_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_GN_ENTITY_PICKLIST_300106") == 0)
{
INTL_WARNING;
l_gn_entity_picklist_300106_struct_h =  (GN_ENTITY_PICKLIST_300106_STRUCT_H *)calloc(1,sizeof(GN_ENTITY_PICKLIST_300106_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_gn_entity_picklist_300106_struct_h);
memset(l_gn_entity_picklist_300106_struct_h,NULL,sizeof(GN_ENTITY_PICKLIST_300106_STRUCT_H));
int_ret_val = Populate_GN_ENTITY_PICKLIST_300106(l_gn_entity_picklist_300106_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdGN_ENTITY_PICKLIST_300106\n",NULL,NULL);
if((MT_UpdGN_ENTITY_PICKLIST_300106(l_gn_entity_picklist_300106_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdGN_ENTITY_PICKLIST_300106SUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdGN_ENTITY_PICKLIST_300106FAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_gn_entity_picklist_300106_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_GN_ENTITY_PICKLIST_BAK") == 0)
{
INTL_WARNING;
l_gn_entity_picklist_bak_struct_h =  (GN_ENTITY_PICKLIST_BAK_STRUCT_H *)calloc(1,sizeof(GN_ENTITY_PICKLIST_BAK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_gn_entity_picklist_bak_struct_h);
memset(l_gn_entity_picklist_bak_struct_h,NULL,sizeof(GN_ENTITY_PICKLIST_BAK_STRUCT_H));
int_ret_val = Populate_GN_ENTITY_PICKLIST_BAK(l_gn_entity_picklist_bak_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdGN_ENTITY_PICKLIST_BAK\n",NULL,NULL);
if((MT_UpdGN_ENTITY_PICKLIST_BAK(l_gn_entity_picklist_bak_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdGN_ENTITY_PICKLIST_BAKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdGN_ENTITY_PICKLIST_BAKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_gn_entity_picklist_bak_struct_h);
}







/*else if (strcmp(l_request_mt -> h_proc_name,"wrp_INVOICE_SYSTEMPARAM") == 0)
{
INTL_WARNING;
l_invoice_systemparam_struct_h =  (INVOICE_SYSTEMPARAM_STRUCT_H *)calloc(1,sizeof(INVOICE_SYSTEMPARAM_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_invoice_systemparam_struct_h);
memset(l_invoice_systemparam_struct_h,NULL,sizeof(INVOICE_SYSTEMPARAM_STRUCT_H));
int_ret_val = Populate_INVOICE_SYSTEMPARAM(l_invoice_systemparam_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdINVOICE_SYSTEMPARAM\n",NULL,NULL);
if((MT_UpdINVOICE_SYSTEMPARAM(l_invoice_systemparam_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdINVOICE_SYSTEMPARAMSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdINVOICE_SYSTEMPARAMFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_invoice_systemparam_struct_h);
}
*/






else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_ARCHCHEQUE") == 0)
{
INTL_WARNING;
l_iv_archcheque_struct_h =  (IV_ARCHCHEQUE_STRUCT_H *)calloc(1,sizeof(IV_ARCHCHEQUE_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_archcheque_struct_h);
memset(l_iv_archcheque_struct_h,NULL,sizeof(IV_ARCHCHEQUE_STRUCT_H));
int_ret_val = Populate_IV_ARCHCHEQUE(l_iv_archcheque_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_ARCHCHEQUE\n",NULL,NULL);
if((MT_UpdIV_ARCHCHEQUE(l_iv_archcheque_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_ARCHCHEQUESUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_ARCHCHEQUEFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_archcheque_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_ARCHCLIENTHOLDING") == 0)
{
INTL_WARNING;
l_iv_archclientholding_struct_h =  (IV_ARCHCLIENTHOLDING_STRUCT_H *)calloc(1,sizeof(IV_ARCHCLIENTHOLDING_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_archclientholding_struct_h);
memset(l_iv_archclientholding_struct_h,NULL,sizeof(IV_ARCHCLIENTHOLDING_STRUCT_H));
int_ret_val = Populate_IV_ARCHCLIENTHOLDING(l_iv_archclientholding_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_ARCHCLIENTHOLDING\n",NULL,NULL);
if((MT_UpdIV_ARCHCLIENTHOLDING(l_iv_archclientholding_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_ARCHCLIENTHOLDINGSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_ARCHCLIENTHOLDINGFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_archclientholding_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_ARCHEXCHANGERATE") == 0)
{
INTL_WARNING;
l_iv_archexchangerate_struct_h =  (IV_ARCHEXCHANGERATE_STRUCT_H *)calloc(1,sizeof(IV_ARCHEXCHANGERATE_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_archexchangerate_struct_h);
memset(l_iv_archexchangerate_struct_h,NULL,sizeof(IV_ARCHEXCHANGERATE_STRUCT_H));
int_ret_val = Populate_IV_ARCHEXCHANGERATE(l_iv_archexchangerate_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_ARCHEXCHANGERATE\n",NULL,NULL);
if((MT_UpdIV_ARCHEXCHANGERATE(l_iv_archexchangerate_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_ARCHEXCHANGERATESUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_ARCHEXCHANGERATEFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_archexchangerate_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_ARCHEXTRASERVICE") == 0)
{
INTL_WARNING;
l_iv_archextraservice_struct_h =  (IV_ARCHEXTRASERVICE_STRUCT_H *)calloc(1,sizeof(IV_ARCHEXTRASERVICE_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_archextraservice_struct_h);
memset(l_iv_archextraservice_struct_h,NULL,sizeof(IV_ARCHEXTRASERVICE_STRUCT_H));
int_ret_val = Populate_IV_ARCHEXTRASERVICE(l_iv_archextraservice_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_ARCHEXTRASERVICE\n",NULL,NULL);
if((MT_UpdIV_ARCHEXTRASERVICE(l_iv_archextraservice_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_ARCHEXTRASERVICESUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_ARCHEXTRASERVICEFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_archextraservice_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_ARCHLEDGER") == 0)
{
INTL_WARNING;
l_iv_archledger_struct_h =  (IV_ARCHLEDGER_STRUCT_H *)calloc(1,sizeof(IV_ARCHLEDGER_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_archledger_struct_h);
memset(l_iv_archledger_struct_h,NULL,sizeof(IV_ARCHLEDGER_STRUCT_H));
int_ret_val = Populate_IV_ARCHLEDGER(l_iv_archledger_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_ARCHLEDGER\n",NULL,NULL);
if((MT_UpdIV_ARCHLEDGER(l_iv_archledger_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_ARCHLEDGERSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_ARCHLEDGERFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_archledger_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_ARCHOUTSTANDINGAMT") == 0)
{
INTL_WARNING;
l_iv_archoutstandingamt_struct_h =  (IV_ARCHOUTSTANDINGAMT_STRUCT_H *)calloc(1,sizeof(IV_ARCHOUTSTANDINGAMT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_archoutstandingamt_struct_h);
memset(l_iv_archoutstandingamt_struct_h,NULL,sizeof(IV_ARCHOUTSTANDINGAMT_STRUCT_H));
int_ret_val = Populate_IV_ARCHOUTSTANDINGAMT(l_iv_archoutstandingamt_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_ARCHOUTSTANDINGAMT\n",NULL,NULL);
if((MT_UpdIV_ARCHOUTSTANDINGAMT(l_iv_archoutstandingamt_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_ARCHOUTSTANDINGAMTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_ARCHOUTSTANDINGAMTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_archoutstandingamt_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_ARCHSERVICECHG") == 0)
{
INTL_WARNING;
l_iv_archservicechg_struct_h =  (IV_ARCHSERVICECHG_STRUCT_H *)calloc(1,sizeof(IV_ARCHSERVICECHG_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_archservicechg_struct_h);
memset(l_iv_archservicechg_struct_h,NULL,sizeof(IV_ARCHSERVICECHG_STRUCT_H));
int_ret_val = Populate_IV_ARCHSERVICECHG(l_iv_archservicechg_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_ARCHSERVICECHG\n",NULL,NULL);
if((MT_UpdIV_ARCHSERVICECHG(l_iv_archservicechg_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_ARCHSERVICECHGSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_ARCHSERVICECHGFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_archservicechg_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_ARCHTRANSACTION") == 0)
{
INTL_WARNING;
l_iv_archtransaction_struct_h =  (IV_ARCHTRANSACTION_STRUCT_H *)calloc(1,sizeof(IV_ARCHTRANSACTION_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_archtransaction_struct_h);
memset(l_iv_archtransaction_struct_h,NULL,sizeof(IV_ARCHTRANSACTION_STRUCT_H));
int_ret_val = Populate_IV_ARCHTRANSACTION(l_iv_archtransaction_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_ARCHTRANSACTION\n",NULL,NULL);
if((MT_UpdIV_ARCHTRANSACTION(l_iv_archtransaction_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_ARCHTRANSACTIONSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_ARCHTRANSACTIONFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_archtransaction_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_BILL") == 0)
{
INTL_WARNING;
l_iv_bill_struct_h =  (IV_BILL_STRUCT_H *)calloc(1,sizeof(IV_BILL_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_bill_struct_h);
memset(l_iv_bill_struct_h,NULL,sizeof(IV_BILL_STRUCT_H));
int_ret_val = Populate_IV_BILL(l_iv_bill_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_BILL\n",NULL,NULL);
if((MT_UpdIV_BILL(l_iv_bill_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_BILLSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_BILLFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_bill_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_CHEQUE") == 0)
{
INTL_WARNING;
l_iv_cheque_struct_h =  (IV_CHEQUE_STRUCT_H *)calloc(1,sizeof(IV_CHEQUE_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_cheque_struct_h);
memset(l_iv_cheque_struct_h,NULL,sizeof(IV_CHEQUE_STRUCT_H));
int_ret_val = Populate_IV_CHEQUE(l_iv_cheque_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_CHEQUE\n",NULL,NULL);
if((MT_UpdIV_CHEQUE(l_iv_cheque_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_CHEQUESUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_CHEQUEFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_cheque_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_CHEQUE_DET") == 0)
{
INTL_WARNING;
l_iv_cheque_det_struct_h =  (IV_CHEQUE_DET_STRUCT_H *)calloc(1,sizeof(IV_CHEQUE_DET_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_cheque_det_struct_h);
memset(l_iv_cheque_det_struct_h,NULL,sizeof(IV_CHEQUE_DET_STRUCT_H));
int_ret_val = Populate_IV_CHEQUE_DET(l_iv_cheque_det_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_CHEQUE_DET\n",NULL,NULL);
if((MT_UpdIV_CHEQUE_DET(l_iv_cheque_det_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_CHEQUE_DETSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_CHEQUE_DETFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_cheque_det_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_CLIENT") == 0)
{
INTL_WARNING;
l_iv_client_struct_h =  (IV_CLIENT_STRUCT_H *)calloc(1,sizeof(IV_CLIENT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_client_struct_h);
memset(l_iv_client_struct_h,NULL,sizeof(IV_CLIENT_STRUCT_H));
int_ret_val = Populate_IV_CLIENT(l_iv_client_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_CLIENT\n",NULL,NULL);
if((MT_UpdIV_CLIENT(l_iv_client_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_CLIENTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_CLIENTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_client_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_CLIENTFEE") == 0)
{
INTL_WARNING;
l_iv_clientfee_struct_h =  (IV_CLIENTFEE_STRUCT_H *)calloc(1,sizeof(IV_CLIENTFEE_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_clientfee_struct_h);
memset(l_iv_clientfee_struct_h,NULL,sizeof(IV_CLIENTFEE_STRUCT_H));
int_ret_val = Populate_IV_CLIENTFEE(l_iv_clientfee_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_CLIENTFEE\n",NULL,NULL);
if((MT_UpdIV_CLIENTFEE(l_iv_clientfee_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_CLIENTFEESUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_CLIENTFEEFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_clientfee_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_CLIENTHOLDING") == 0)
{
INTL_WARNING;
l_iv_clientholding_struct_h =  (IV_CLIENTHOLDING_STRUCT_H *)calloc(1,sizeof(IV_CLIENTHOLDING_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_clientholding_struct_h);
memset(l_iv_clientholding_struct_h,NULL,sizeof(IV_CLIENTHOLDING_STRUCT_H));
int_ret_val = Populate_IV_CLIENTHOLDING(l_iv_clientholding_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_CLIENTHOLDING\n",NULL,NULL);
if((MT_UpdIV_CLIENTHOLDING(l_iv_clientholding_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_CLIENTHOLDINGSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_CLIENTHOLDINGFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_clientholding_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_CLIENTPARAM") == 0)
{
INTL_WARNING;
l_iv_clientparam_struct_h =  (IV_CLIENTPARAM_STRUCT_H *)calloc(1,sizeof(IV_CLIENTPARAM_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_clientparam_struct_h);
memset(l_iv_clientparam_struct_h,NULL,sizeof(IV_CLIENTPARAM_STRUCT_H));
int_ret_val = Populate_IV_CLIENTPARAM(l_iv_clientparam_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_CLIENTPARAM\n",NULL,NULL);
if((MT_UpdIV_CLIENTPARAM(l_iv_clientparam_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_CLIENTPARAMSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_CLIENTPARAMFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_clientparam_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_CLIENTSETUP") == 0)
{
INTL_WARNING;
l_iv_clientsetup_struct_h =  (IV_CLIENTSETUP_STRUCT_H *)calloc(1,sizeof(IV_CLIENTSETUP_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_clientsetup_struct_h);
memset(l_iv_clientsetup_struct_h,NULL,sizeof(IV_CLIENTSETUP_STRUCT_H));
int_ret_val = Populate_IV_CLIENTSETUP(l_iv_clientsetup_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_CLIENTSETUP\n",NULL,NULL);
if((MT_UpdIV_CLIENTSETUP(l_iv_clientsetup_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_CLIENTSETUPSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_CLIENTSETUPFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_clientsetup_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_CLIENT_SERV_BASIS") == 0)
{
INTL_WARNING;
l_iv_client_serv_basis_struct_h =  (IV_CLIENT_SERV_BASIS_STRUCT_H *)calloc(1,sizeof(IV_CLIENT_SERV_BASIS_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_client_serv_basis_struct_h);
memset(l_iv_client_serv_basis_struct_h,NULL,sizeof(IV_CLIENT_SERV_BASIS_STRUCT_H));
int_ret_val = Populate_IV_CLIENT_SERV_BASIS(l_iv_client_serv_basis_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_CLIENT_SERV_BASIS\n",NULL,NULL);
if((MT_UpdIV_CLIENT_SERV_BASIS(l_iv_client_serv_basis_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_CLIENT_SERV_BASISSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_CLIENT_SERV_BASISFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_client_serv_basis_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_DATA_GRP") == 0)
{
INTL_WARNING;
l_iv_data_grp_struct_h =  (IV_DATA_GRP_STRUCT_H *)calloc(1,sizeof(IV_DATA_GRP_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_data_grp_struct_h);
memset(l_iv_data_grp_struct_h,NULL,sizeof(IV_DATA_GRP_STRUCT_H));
int_ret_val = Populate_IV_DATA_GRP(l_iv_data_grp_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_DATA_GRP\n",NULL,NULL);
if((MT_UpdIV_DATA_GRP(l_iv_data_grp_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_DATA_GRPSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_DATA_GRPFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_data_grp_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_DEAL") == 0)
{
INTL_WARNING;
l_iv_deal_struct_h =  (IV_DEAL_STRUCT_H *)calloc(1,sizeof(IV_DEAL_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_deal_struct_h);
memset(l_iv_deal_struct_h,NULL,sizeof(IV_DEAL_STRUCT_H));
int_ret_val = Populate_IV_DEAL(l_iv_deal_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_DEAL\n",NULL,NULL);
if((MT_UpdIV_DEAL(l_iv_deal_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_DEALSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_DEALFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_deal_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_DEAL_FEE") == 0)
{
INTL_WARNING;
l_iv_deal_fee_struct_h =  (IV_DEAL_FEE_STRUCT_H *)calloc(1,sizeof(IV_DEAL_FEE_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_deal_fee_struct_h);
memset(l_iv_deal_fee_struct_h,NULL,sizeof(IV_DEAL_FEE_STRUCT_H));
int_ret_val = Populate_IV_DEAL_FEE(l_iv_deal_fee_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_DEAL_FEE\n",NULL,NULL);
if((MT_UpdIV_DEAL_FEE(l_iv_deal_fee_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_DEAL_FEESUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_DEAL_FEEFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_deal_fee_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_DEAL_TYPE") == 0)
{
INTL_WARNING;
l_iv_deal_type_struct_h =  (IV_DEAL_TYPE_STRUCT_H *)calloc(1,sizeof(IV_DEAL_TYPE_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_deal_type_struct_h);
memset(l_iv_deal_type_struct_h,NULL,sizeof(IV_DEAL_TYPE_STRUCT_H));
int_ret_val = Populate_IV_DEAL_TYPE(l_iv_deal_type_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_DEAL_TYPE\n",NULL,NULL);
if((MT_UpdIV_DEAL_TYPE(l_iv_deal_type_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_DEAL_TYPESUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_DEAL_TYPEFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_deal_type_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_EXCHANGERATE") == 0)
{
INTL_WARNING;
l_iv_exchangerate_struct_h =  (IV_EXCHANGERATE_STRUCT_H *)calloc(1,sizeof(IV_EXCHANGERATE_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_exchangerate_struct_h);
memset(l_iv_exchangerate_struct_h,NULL,sizeof(IV_EXCHANGERATE_STRUCT_H));
int_ret_val = Populate_IV_EXCHANGERATE(l_iv_exchangerate_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_EXCHANGERATE\n",NULL,NULL);
if((MT_UpdIV_EXCHANGERATE(l_iv_exchangerate_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_EXCHANGERATESUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_EXCHANGERATEFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_exchangerate_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_LEDGER") == 0)
{
INTL_WARNING;
l_iv_ledger_struct_h =  (IV_LEDGER_STRUCT_H *)calloc(1,sizeof(IV_LEDGER_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_ledger_struct_h);
memset(l_iv_ledger_struct_h,NULL,sizeof(IV_LEDGER_STRUCT_H));
int_ret_val = Populate_IV_LEDGER(l_iv_ledger_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_LEDGER\n",NULL,NULL);
if((MT_UpdIV_LEDGER(l_iv_ledger_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_LEDGERSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_LEDGERFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_ledger_struct_h);
}






/*
else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_LEDGER_VW") == 0)
{
INTL_WARNING;
l_iv_ledger_vw_struct_h =  (IV_LEDGER_VW_STRUCT_H *)calloc(1,sizeof(IV_LEDGER_VW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_ledger_vw_struct_h);
memset(l_iv_ledger_vw_struct_h,NULL,sizeof(IV_LEDGER_VW_STRUCT_H));
int_ret_val = Populate_IV_LEDGER_VW(l_iv_ledger_vw_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_LEDGER_VW\n",NULL,NULL);
if((MT_UpdIV_LEDGER_VW(l_iv_ledger_vw_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_LEDGER_VWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_LEDGER_VWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_ledger_vw_struct_h);
}
*/






else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_OUTSTANDINGAMT") == 0)
{
INTL_WARNING;
l_iv_outstandingamt_struct_h =  (IV_OUTSTANDINGAMT_STRUCT_H *)calloc(1,sizeof(IV_OUTSTANDINGAMT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_outstandingamt_struct_h);
memset(l_iv_outstandingamt_struct_h,NULL,sizeof(IV_OUTSTANDINGAMT_STRUCT_H));
int_ret_val = Populate_IV_OUTSTANDINGAMT(l_iv_outstandingamt_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_OUTSTANDINGAMT\n",NULL,NULL);
if((MT_UpdIV_OUTSTANDINGAMT(l_iv_outstandingamt_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_OUTSTANDINGAMTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_OUTSTANDINGAMTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_outstandingamt_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_SELCLIENT") == 0)
{
INTL_WARNING;
l_iv_selclient_struct_h =  (IV_SELCLIENT_STRUCT_H *)calloc(1,sizeof(IV_SELCLIENT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_selclient_struct_h);
memset(l_iv_selclient_struct_h,NULL,sizeof(IV_SELCLIENT_STRUCT_H));
int_ret_val = Populate_IV_SELCLIENT(l_iv_selclient_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_SELCLIENT\n",NULL,NULL);
if((MT_UpdIV_SELCLIENT(l_iv_selclient_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_SELCLIENTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_SELCLIENTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_selclient_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_SERVICE_CHRG") == 0)
{
INTL_WARNING;
l_iv_service_chrg_struct_h =  (IV_SERVICE_CHRG_STRUCT_H *)calloc(1,sizeof(IV_SERVICE_CHRG_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_service_chrg_struct_h);
memset(l_iv_service_chrg_struct_h,NULL,sizeof(IV_SERVICE_CHRG_STRUCT_H));
int_ret_val = Populate_IV_SERVICE_CHRG(l_iv_service_chrg_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_SERVICE_CHRG\n",NULL,NULL);
if((MT_UpdIV_SERVICE_CHRG(l_iv_service_chrg_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_SERVICE_CHRGSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_SERVICE_CHRGFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_service_chrg_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_SERV_BASIS") == 0)
{
INTL_WARNING;
l_iv_serv_basis_struct_h =  (IV_SERV_BASIS_STRUCT_H *)calloc(1,sizeof(IV_SERV_BASIS_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_serv_basis_struct_h);
memset(l_iv_serv_basis_struct_h,NULL,sizeof(IV_SERV_BASIS_STRUCT_H));
int_ret_val = Populate_IV_SERV_BASIS(l_iv_serv_basis_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_SERV_BASIS\n",NULL,NULL);
if((MT_UpdIV_SERV_BASIS(l_iv_serv_basis_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_SERV_BASISSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_SERV_BASISFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_serv_basis_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_SERV_DEPEND") == 0)
{
INTL_WARNING;
l_iv_serv_depend_struct_h =  (IV_SERV_DEPEND_STRUCT_H *)calloc(1,sizeof(IV_SERV_DEPEND_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_serv_depend_struct_h);
memset(l_iv_serv_depend_struct_h,NULL,sizeof(IV_SERV_DEPEND_STRUCT_H));
int_ret_val = Populate_IV_SERV_DEPEND(l_iv_serv_depend_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_SERV_DEPEND\n",NULL,NULL);
if((MT_UpdIV_SERV_DEPEND(l_iv_serv_depend_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_SERV_DEPENDSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_SERV_DEPENDFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_serv_depend_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_SERV_MAST") == 0)
{
INTL_WARNING;
l_iv_serv_mast_struct_h =  (IV_SERV_MAST_STRUCT_H *)calloc(1,sizeof(IV_SERV_MAST_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_serv_mast_struct_h);
memset(l_iv_serv_mast_struct_h,NULL,sizeof(IV_SERV_MAST_STRUCT_H));
int_ret_val = Populate_IV_SERV_MAST(l_iv_serv_mast_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_SERV_MAST\n",NULL,NULL);
if((MT_UpdIV_SERV_MAST(l_iv_serv_mast_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_SERV_MASTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_SERV_MASTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_serv_mast_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_SERV_OTH") == 0)
{
INTL_WARNING;
l_iv_serv_oth_struct_h =  (IV_SERV_OTH_STRUCT_H *)calloc(1,sizeof(IV_SERV_OTH_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_serv_oth_struct_h);
memset(l_iv_serv_oth_struct_h,NULL,sizeof(IV_SERV_OTH_STRUCT_H));
int_ret_val = Populate_IV_SERV_OTH(l_iv_serv_oth_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_SERV_OTH\n",NULL,NULL);
if((MT_UpdIV_SERV_OTH(l_iv_serv_oth_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_SERV_OTHSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_SERV_OTHFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_serv_oth_struct_h);
}






/*
else if (strcmp(l_request_mt -> h_proc_name,"wrp_IV_SUPERVISIONFEEGRP_VEW") == 0)
{
INTL_WARNING;
l_iv_supervisionfeegrp_vew_struct_h =  (IV_SUPERVISIONFEEGRP_VEW_STRUCT_H *)calloc(1,sizeof(IV_SUPERVISIONFEEGRP_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_iv_supervisionfeegrp_vew_struct_h);
memset(l_iv_supervisionfeegrp_vew_struct_h,NULL,sizeof(IV_SUPERVISIONFEEGRP_VEW_STRUCT_H));
int_ret_val = Populate_IV_SUPERVISIONFEEGRP_VEW(l_iv_supervisionfeegrp_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdIV_SUPERVISIONFEEGRP_VEW\n",NULL,NULL);
if((MT_UpdIV_SUPERVISIONFEEGRP_VEW(l_iv_supervisionfeegrp_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_SUPERVISIONFEEGRP_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdIV_SUPERVISIONFEEGRP_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_iv_supervisionfeegrp_vew_struct_h);
}
*/






else if (strcmp(l_request_mt -> h_proc_name,"wrp_MASTATUS") == 0)
{
INTL_WARNING;
l_mastatus_struct_h =  (MASTATUS_STRUCT_H *)calloc(1,sizeof(MASTATUS_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mastatus_struct_h);
memset(l_mastatus_struct_h,NULL,sizeof(MASTATUS_STRUCT_H));
int_ret_val = Populate_MASTATUS(l_mastatus_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMASTATUS\n",NULL,NULL);
if((MT_UpdMASTATUS(l_mastatus_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMASTATUSSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMASTATUSFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mastatus_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MAUDIT_TRACK") == 0)
{
INTL_WARNING;
l_maudit_track_struct_h =  (MAUDIT_TRACK_STRUCT_H *)calloc(1,sizeof(MAUDIT_TRACK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_maudit_track_struct_h);
memset(l_maudit_track_struct_h,NULL,sizeof(MAUDIT_TRACK_STRUCT_H));
int_ret_val = Populate_MAUDIT_TRACK(l_maudit_track_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMAUDIT_TRACK\n",NULL,NULL);
if((MT_UpdMAUDIT_TRACK(l_maudit_track_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMAUDIT_TRACKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMAUDIT_TRACKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_maudit_track_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MHLP_CODE") == 0)
{
INTL_WARNING;
l_mhlp_code_struct_h =  (MHLP_CODE_STRUCT_H *)calloc(1,sizeof(MHLP_CODE_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mhlp_code_struct_h);
memset(l_mhlp_code_struct_h,NULL,sizeof(MHLP_CODE_STRUCT_H));
int_ret_val = Populate_MHLP_CODE(l_mhlp_code_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMHLP_CODE\n",NULL,NULL);
if((MT_UpdMHLP_CODE(l_mhlp_code_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMHLP_CODESUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMHLP_CODEFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mhlp_code_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MMARKETRATE_VW") == 0)
{
INTL_WARNING;
l_mmarketrate_vw_struct_h =  (MMARKETRATE_VW_STRUCT_H *)calloc(1,sizeof(MMARKETRATE_VW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mmarketrate_vw_struct_h);
memset(l_mmarketrate_vw_struct_h,NULL,sizeof(MMARKETRATE_VW_STRUCT_H));
int_ret_val = Populate_MMARKETRATE_VW(l_mmarketrate_vw_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMMARKETRATE_VW\n",NULL,NULL);
if((MT_UpdMMARKETRATE_VW(l_mmarketrate_vw_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMMARKETRATE_VWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMMARKETRATE_VWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mmarketrate_vw_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MS_ARCHMSGLOG") == 0)
{
INTL_WARNING;
l_ms_archmsglog_struct_h =  (MS_ARCHMSGLOG_STRUCT_H *)calloc(1,sizeof(MS_ARCHMSGLOG_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_ms_archmsglog_struct_h);
memset(l_ms_archmsglog_struct_h,NULL,sizeof(MS_ARCHMSGLOG_STRUCT_H));
int_ret_val = Populate_MS_ARCHMSGLOG(l_ms_archmsglog_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMS_ARCHMSGLOG\n",NULL,NULL);
if((MT_UpdMS_ARCHMSGLOG(l_ms_archmsglog_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMS_ARCHMSGLOGSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMS_ARCHMSGLOGFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_ms_archmsglog_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MS_ARCHMSGSTAT") == 0)
{
INTL_WARNING;
l_ms_archmsgstat_struct_h =  (MS_ARCHMSGSTAT_STRUCT_H *)calloc(1,sizeof(MS_ARCHMSGSTAT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_ms_archmsgstat_struct_h);
memset(l_ms_archmsgstat_struct_h,NULL,sizeof(MS_ARCHMSGSTAT_STRUCT_H));
int_ret_val = Populate_MS_ARCHMSGSTAT(l_ms_archmsgstat_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMS_ARCHMSGSTAT\n",NULL,NULL);
if((MT_UpdMS_ARCHMSGSTAT(l_ms_archmsgstat_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMS_ARCHMSGSTATSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMS_ARCHMSGSTATFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_ms_archmsgstat_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MS_BASE") == 0)
{
INTL_WARNING;
l_ms_base_struct_h =  (MS_BASE_STRUCT_H *)calloc(1,sizeof(MS_BASE_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_ms_base_struct_h);
memset(l_ms_base_struct_h,NULL,sizeof(MS_BASE_STRUCT_H));
int_ret_val = Populate_MS_BASE(l_ms_base_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMS_BASE\n",NULL,NULL);
if((MT_UpdMS_BASE(l_ms_base_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMS_BASESUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMS_BASEFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_ms_base_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MS_DETAILSMAP") == 0)
{
INTL_WARNING;
l_ms_detailsmap_struct_h =  (MS_DETAILSMAP_STRUCT_H *)calloc(1,sizeof(MS_DETAILSMAP_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_ms_detailsmap_struct_h);
memset(l_ms_detailsmap_struct_h,NULL,sizeof(MS_DETAILSMAP_STRUCT_H));
int_ret_val = Populate_MS_DETAILSMAP(l_ms_detailsmap_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMS_DETAILSMAP\n",NULL,NULL);
if((MT_UpdMS_DETAILSMAP(l_ms_detailsmap_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMS_DETAILSMAPSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMS_DETAILSMAPFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_ms_detailsmap_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MS_HISMSGSTAT") == 0)
{
INTL_WARNING;
l_ms_hismsgstat_struct_h =  (MS_HISMSGSTAT_STRUCT_H *)calloc(1,sizeof(MS_HISMSGSTAT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_ms_hismsgstat_struct_h);
memset(l_ms_hismsgstat_struct_h,NULL,sizeof(MS_HISMSGSTAT_STRUCT_H));
int_ret_val = Populate_MS_HISMSGSTAT(l_ms_hismsgstat_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMS_HISMSGSTAT\n",NULL,NULL);
if((MT_UpdMS_HISMSGSTAT(l_ms_hismsgstat_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMS_HISMSGSTATSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMS_HISMSGSTATFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_ms_hismsgstat_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MS_INMSGRP") == 0)
{
INTL_WARNING;
l_ms_inmsgrp_struct_h =  (MS_INMSGRP_STRUCT_H *)calloc(1,sizeof(MS_INMSGRP_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_ms_inmsgrp_struct_h);
memset(l_ms_inmsgrp_struct_h,NULL,sizeof(MS_INMSGRP_STRUCT_H));
int_ret_val = Populate_MS_INMSGRP(l_ms_inmsgrp_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMS_INMSGRP\n",NULL,NULL);
if((MT_UpdMS_INMSGRP(l_ms_inmsgrp_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMS_INMSGRPSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMS_INMSGRPFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_ms_inmsgrp_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MS_MSGCRF") == 0)
{
INTL_WARNING;
l_ms_msgcrf_struct_h =  (MS_MSGCRF_STRUCT_H *)calloc(1,sizeof(MS_MSGCRF_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_ms_msgcrf_struct_h);
memset(l_ms_msgcrf_struct_h,NULL,sizeof(MS_MSGCRF_STRUCT_H));
int_ret_val = Populate_MS_MSGCRF(l_ms_msgcrf_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMS_MSGCRF\n",NULL,NULL);
if((MT_UpdMS_MSGCRF(l_ms_msgcrf_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMS_MSGCRFSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMS_MSGCRFFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_ms_msgcrf_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MS_MSGENT") == 0)
{
INTL_WARNING;
l_ms_msgent_struct_h =  (MS_MSGENT_STRUCT_H *)calloc(1,sizeof(MS_MSGENT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_ms_msgent_struct_h);
memset(l_ms_msgent_struct_h,NULL,sizeof(MS_MSGENT_STRUCT_H));
int_ret_val = Populate_MS_MSGENT(l_ms_msgent_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMS_MSGENT\n",NULL,NULL);
if((MT_UpdMS_MSGENT(l_ms_msgent_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMS_MSGENTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMS_MSGENTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_ms_msgent_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MS_MSGLOG") == 0)
{
INTL_WARNING;
l_ms_msglog_struct_h =  (MS_MSGLOG_STRUCT_H *)calloc(1,sizeof(MS_MSGLOG_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_ms_msglog_struct_h);
memset(l_ms_msglog_struct_h,NULL,sizeof(MS_MSGLOG_STRUCT_H));
int_ret_val = Populate_MS_MSGLOG(l_ms_msglog_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMS_MSGLOG\n",NULL,NULL);
if((MT_UpdMS_MSGLOG(l_ms_msglog_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMS_MSGLOGSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMS_MSGLOGFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_ms_msglog_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MS_MSGSTAT") == 0)
{
INTL_WARNING;
l_ms_msgstat_struct_h =  (MS_MSGSTAT_STRUCT_H *)calloc(1,sizeof(MS_MSGSTAT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_ms_msgstat_struct_h);
memset(l_ms_msgstat_struct_h,NULL,sizeof(MS_MSGSTAT_STRUCT_H));
int_ret_val = Populate_MS_MSGSTAT(l_ms_msgstat_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMS_MSGSTAT\n",NULL,NULL);
if((MT_UpdMS_MSGSTAT(l_ms_msgstat_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMS_MSGSTATSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMS_MSGSTATFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_ms_msgstat_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MS_MSG_SETL_VEW") == 0)
{
INTL_WARNING;
l_ms_msg_setl_vew_struct_h =  (MS_MSG_SETL_VEW_STRUCT_H *)calloc(1,sizeof(MS_MSG_SETL_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_ms_msg_setl_vew_struct_h);
memset(l_ms_msg_setl_vew_struct_h,NULL,sizeof(MS_MSG_SETL_VEW_STRUCT_H));
int_ret_val = Populate_MS_MSG_SETL_VEW(l_ms_msg_setl_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMS_MSG_SETL_VEW\n",NULL,NULL);
if((MT_UpdMS_MSG_SETL_VEW(l_ms_msg_setl_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMS_MSG_SETL_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMS_MSG_SETL_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_ms_msg_setl_vew_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MS_SEQUENCEMAP") == 0)
{
INTL_WARNING;
l_ms_sequencemap_struct_h =  (MS_SEQUENCEMAP_STRUCT_H *)calloc(1,sizeof(MS_SEQUENCEMAP_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_ms_sequencemap_struct_h);
memset(l_ms_sequencemap_struct_h,NULL,sizeof(MS_SEQUENCEMAP_STRUCT_H));
int_ret_val = Populate_MS_SEQUENCEMAP(l_ms_sequencemap_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMS_SEQUENCEMAP\n",NULL,NULL);
if((MT_UpdMS_SEQUENCEMAP(l_ms_sequencemap_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMS_SEQUENCEMAPSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMS_SEQUENCEMAPFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_ms_sequencemap_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_ARCHDLYMKTPRC") == 0)
{
INTL_WARNING;
l_mt_archdlymktprc_struct_h =  (MT_ARCHDLYMKTPRC_STRUCT_H *)calloc(1,sizeof(MT_ARCHDLYMKTPRC_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_archdlymktprc_struct_h);
memset(l_mt_archdlymktprc_struct_h,NULL,sizeof(MT_ARCHDLYMKTPRC_STRUCT_H));
int_ret_val = Populate_MT_ARCHDLYMKTPRC(l_mt_archdlymktprc_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_ARCHDLYMKTPRC\n",NULL,NULL);
if((MT_UpdMT_ARCHDLYMKTPRC(l_mt_archdlymktprc_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_ARCHDLYMKTPRCSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_ARCHDLYMKTPRCFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_archdlymktprc_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_CLIENT") == 0)
{
INTL_WARNING;
l_mt_client_struct_h =  (MT_CLIENT_STRUCT_H *)calloc(1,sizeof(MT_CLIENT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_client_struct_h);
memset(l_mt_client_struct_h,NULL,sizeof(MT_CLIENT_STRUCT_H));
int_ret_val = Populate_MT_CLIENT(l_mt_client_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_CLIENT\n",NULL,NULL);
if((MT_UpdMT_CLIENT(l_mt_client_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_CLIENTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_CLIENTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_client_struct_h);
}






/*
else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_CLIENTLST_VEW") == 0)
{
INTL_WARNING;
l_mt_clientlst_vew_struct_h =  (MT_CLIENTLST_VEW_STRUCT_H *)calloc(1,sizeof(MT_CLIENTLST_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_clientlst_vew_struct_h);
memset(l_mt_clientlst_vew_struct_h,NULL,sizeof(MT_CLIENTLST_VEW_STRUCT_H));
int_ret_val = Populate_MT_CLIENTLST_VEW(l_mt_clientlst_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_CLIENTLST_VEW\n",NULL,NULL);
if((MT_UpdMT_CLIENTLST_VEW(l_mt_clientlst_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_CLIENTLST_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_CLIENTLST_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_clientlst_vew_struct_h);
}

*/





else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_CLIENT_DEPO") == 0)
{
INTL_WARNING;
l_mt_client_depo_struct_h =  (MT_CLIENT_DEPO_STRUCT_H *)calloc(1,sizeof(MT_CLIENT_DEPO_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_client_depo_struct_h);
memset(l_mt_client_depo_struct_h,NULL,sizeof(MT_CLIENT_DEPO_STRUCT_H));
int_ret_val = Populate_MT_CLIENT_DEPO(l_mt_client_depo_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_CLIENT_DEPO\n",NULL,NULL);
if((MT_UpdMT_CLIENT_DEPO(l_mt_client_depo_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_CLIENT_DEPOSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_CLIENT_DEPOFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_client_depo_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_CLIENT_ENTRIES") == 0)
{
INTL_WARNING;
l_mt_client_entries_struct_h =  (MT_CLIENT_ENTRIES_STRUCT_H *)calloc(1,sizeof(MT_CLIENT_ENTRIES_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_client_entries_struct_h);
memset(l_mt_client_entries_struct_h,NULL,sizeof(MT_CLIENT_ENTRIES_STRUCT_H));
int_ret_val = Populate_MT_CLIENT_ENTRIES(l_mt_client_entries_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_CLIENT_ENTRIES\n",NULL,NULL);
if((MT_UpdMT_CLIENT_ENTRIES(l_mt_client_entries_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_CLIENT_ENTRIESSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_CLIENT_ENTRIESFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_client_entries_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_CLI_DEPO_MAP") == 0)
{
INTL_WARNING;
l_mt_cli_depo_map_struct_h =  (MT_CLI_DEPO_MAP_STRUCT_H *)calloc(1,sizeof(MT_CLI_DEPO_MAP_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_cli_depo_map_struct_h);
memset(l_mt_cli_depo_map_struct_h,NULL,sizeof(MT_CLI_DEPO_MAP_STRUCT_H));
int_ret_val = Populate_MT_CLI_DEPO_MAP(l_mt_cli_depo_map_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_CLI_DEPO_MAP\n",NULL,NULL);
if((MT_UpdMT_CLI_DEPO_MAP(l_mt_cli_depo_map_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_CLI_DEPO_MAPSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_CLI_DEPO_MAPFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_cli_depo_map_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_CLI_EXCH_MAP") == 0)
{
INTL_WARNING;
l_mt_cli_exch_map_struct_h =  (MT_CLI_EXCH_MAP_STRUCT_H *)calloc(1,sizeof(MT_CLI_EXCH_MAP_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_cli_exch_map_struct_h);
memset(l_mt_cli_exch_map_struct_h,NULL,sizeof(MT_CLI_EXCH_MAP_STRUCT_H));
int_ret_val = Populate_MT_CLI_EXCH_MAP(l_mt_cli_exch_map_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_CLI_EXCH_MAP\n",NULL,NULL);
if((MT_UpdMT_CLI_EXCH_MAP(l_mt_cli_exch_map_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_CLI_EXCH_MAPSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_CLI_EXCH_MAPFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_cli_exch_map_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_CLN_INST_MAP") == 0)
{
INTL_WARNING;
l_mt_cln_inst_map_struct_h =  (MT_CLN_INST_MAP_STRUCT_H *)calloc(1,sizeof(MT_CLN_INST_MAP_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_cln_inst_map_struct_h);
memset(l_mt_cln_inst_map_struct_h,NULL,sizeof(MT_CLN_INST_MAP_STRUCT_H));
int_ret_val = Populate_MT_CLN_INST_MAP(l_mt_cln_inst_map_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_CLN_INST_MAP\n",NULL,NULL);
if((MT_UpdMT_CLN_INST_MAP(l_mt_cln_inst_map_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_CLN_INST_MAPSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_CLN_INST_MAPFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_cln_inst_map_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_CLTDEPO") == 0)
{
INTL_WARNING;
l_mt_cltdepo_struct_h =  (MT_CLTDEPO_STRUCT_H *)calloc(1,sizeof(MT_CLTDEPO_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_cltdepo_struct_h);
memset(l_mt_cltdepo_struct_h,NULL,sizeof(MT_CLTDEPO_STRUCT_H));
int_ret_val = Populate_MT_CLTDEPO(l_mt_cltdepo_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_CLTDEPO\n",NULL,NULL);
if((MT_UpdMT_CLTDEPO(l_mt_cltdepo_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_CLTDEPOSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_CLTDEPOFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_cltdepo_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_COMMON_SYS_PARAMS") == 0)
{
INTL_WARNING;
l_mt_common_sys_params_struct_h =  (MT_COMMON_SYS_PARAMS_STRUCT_H *)calloc(1,sizeof(MT_COMMON_SYS_PARAMS_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_common_sys_params_struct_h);
memset(l_mt_common_sys_params_struct_h,NULL,sizeof(MT_COMMON_SYS_PARAMS_STRUCT_H));
int_ret_val = Populate_MT_COMMON_SYS_PARAMS(l_mt_common_sys_params_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_COMMON_SYS_PARAMS\n",NULL,NULL);
if((MT_UpdMT_COMMON_SYS_PARAMS(l_mt_common_sys_params_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_COMMON_SYS_PARAMSSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_COMMON_SYS_PARAMSFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_common_sys_params_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_COMPANY") == 0)
{
INTL_WARNING;
l_mt_company_struct_h =  (MT_COMPANY_STRUCT_H *)calloc(1,sizeof(MT_COMPANY_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_company_struct_h);
memset(l_mt_company_struct_h,NULL,sizeof(MT_COMPANY_STRUCT_H));
int_ret_val = Populate_MT_COMPANY(l_mt_company_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_COMPANY\n",NULL,NULL);
if((MT_UpdMT_COMPANY(l_mt_company_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_COMPANYSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_COMPANYFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_company_struct_h);
}






/*
else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_CORE_SYS_PARAMS") == 0)
{
INTL_WARNING;
l_mt_core_sys_params_struct_h =  (MT_CORE_SYS_PARAMS_STRUCT_H *)calloc(1,sizeof(MT_CORE_SYS_PARAMS_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_core_sys_params_struct_h);
memset(l_mt_core_sys_params_struct_h,NULL,sizeof(MT_CORE_SYS_PARAMS_STRUCT_H));
int_ret_val = Populate_MT_CORE_SYS_PARAMS(l_mt_core_sys_params_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_CORE_SYS_PARAMS\n",NULL,NULL);
if((MT_UpdMT_CORE_SYS_PARAMS(l_mt_core_sys_params_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_CORE_SYS_PARAMSSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_CORE_SYS_PARAMSFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_core_sys_params_struct_h);
}

*/





else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_CR_AGENCY") == 0)
{
INTL_WARNING;
l_mt_cr_agency_struct_h =  (MT_CR_AGENCY_STRUCT_H *)calloc(1,sizeof(MT_CR_AGENCY_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_cr_agency_struct_h);
memset(l_mt_cr_agency_struct_h,NULL,sizeof(MT_CR_AGENCY_STRUCT_H));
int_ret_val = Populate_MT_CR_AGENCY(l_mt_cr_agency_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_CR_AGENCY\n",NULL,NULL);
if((MT_UpdMT_CR_AGENCY(l_mt_cr_agency_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_CR_AGENCYSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_CR_AGENCYFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_cr_agency_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_CR_AGENCY_DET") == 0)
{
INTL_WARNING;
l_mt_cr_agency_det_struct_h =  (MT_CR_AGENCY_DET_STRUCT_H *)calloc(1,sizeof(MT_CR_AGENCY_DET_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_cr_agency_det_struct_h);
memset(l_mt_cr_agency_det_struct_h,NULL,sizeof(MT_CR_AGENCY_DET_STRUCT_H));
int_ret_val = Populate_MT_CR_AGENCY_DET(l_mt_cr_agency_det_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_CR_AGENCY_DET\n",NULL,NULL);
if((MT_UpdMT_CR_AGENCY_DET(l_mt_cr_agency_det_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_CR_AGENCY_DETSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_CR_AGENCY_DETFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_cr_agency_det_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_CR_AGENCY_DET_BKUP") == 0)
{
INTL_WARNING;
l_mt_cr_agency_det_bkup_struct_h =  (MT_CR_AGENCY_DET_BKUP_STRUCT_H *)calloc(1,sizeof(MT_CR_AGENCY_DET_BKUP_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_cr_agency_det_bkup_struct_h);
memset(l_mt_cr_agency_det_bkup_struct_h,NULL,sizeof(MT_CR_AGENCY_DET_BKUP_STRUCT_H));
int_ret_val = Populate_MT_CR_AGENCY_DET_BKUP(l_mt_cr_agency_det_bkup_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_CR_AGENCY_DET_BKUP\n",NULL,NULL);
if((MT_UpdMT_CR_AGENCY_DET_BKUP(l_mt_cr_agency_det_bkup_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_CR_AGENCY_DET_BKUPSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_CR_AGENCY_DET_BKUPFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_cr_agency_det_bkup_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_DAILY_FLOAT_RATE") == 0)
{
INTL_WARNING;
l_mt_daily_float_rate_struct_h =  (MT_DAILY_FLOAT_RATE_STRUCT_H *)calloc(1,sizeof(MT_DAILY_FLOAT_RATE_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_daily_float_rate_struct_h);
memset(l_mt_daily_float_rate_struct_h,NULL,sizeof(MT_DAILY_FLOAT_RATE_STRUCT_H));
int_ret_val = Populate_MT_DAILY_FLOAT_RATE(l_mt_daily_float_rate_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_DAILY_FLOAT_RATE\n",NULL,NULL);
if((MT_UpdMT_DAILY_FLOAT_RATE(l_mt_daily_float_rate_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_DAILY_FLOAT_RATESUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_DAILY_FLOAT_RATEFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_daily_float_rate_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_DAILY_QUOT") == 0)
{
INTL_WARNING;
l_mt_daily_quot_struct_h =  (MT_DAILY_QUOT_STRUCT_H *)calloc(1,sizeof(MT_DAILY_QUOT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_daily_quot_struct_h);
memset(l_mt_daily_quot_struct_h,NULL,sizeof(MT_DAILY_QUOT_STRUCT_H));
int_ret_val = Populate_MT_DAILY_QUOT(l_mt_daily_quot_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_DAILY_QUOT\n",NULL,NULL);
if((MT_UpdMT_DAILY_QUOT(l_mt_daily_quot_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_DAILY_QUOTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_DAILY_QUOTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_daily_quot_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_DEPO_PART") == 0)
{
INTL_WARNING;
l_mt_depo_part_struct_h =  (MT_DEPO_PART_STRUCT_H *)calloc(1,sizeof(MT_DEPO_PART_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_depo_part_struct_h);
memset(l_mt_depo_part_struct_h,NULL,sizeof(MT_DEPO_PART_STRUCT_H));
int_ret_val = Populate_MT_DEPO_PART(l_mt_depo_part_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_DEPO_PART\n",NULL,NULL);
if((MT_UpdMT_DEPO_PART(l_mt_depo_part_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_DEPO_PARTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_DEPO_PARTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_depo_part_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_DLYMKTPRC") == 0)
{
INTL_WARNING;
l_mt_dlymktprc_struct_h =  (MT_DLYMKTPRC_STRUCT_H *)calloc(1,sizeof(MT_DLYMKTPRC_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_dlymktprc_struct_h);
memset(l_mt_dlymktprc_struct_h,NULL,sizeof(MT_DLYMKTPRC_STRUCT_H));
int_ret_val = Populate_MT_DLYMKTPRC(l_mt_dlymktprc_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_DLYMKTPRC\n",NULL,NULL);
if((MT_UpdMT_DLYMKTPRC(l_mt_dlymktprc_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_DLYMKTPRCSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_DLYMKTPRCFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_dlymktprc_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_EOMMTHLYMKTPRC") == 0)
{
INTL_WARNING;
l_mt_eommthlymktprc_struct_h =  (MT_EOMMTHLYMKTPRC_STRUCT_H *)calloc(1,sizeof(MT_EOMMTHLYMKTPRC_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_eommthlymktprc_struct_h);
memset(l_mt_eommthlymktprc_struct_h,NULL,sizeof(MT_EOMMTHLYMKTPRC_STRUCT_H));
int_ret_val = Populate_MT_EOMMTHLYMKTPRC(l_mt_eommthlymktprc_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_EOMMTHLYMKTPRC\n",NULL,NULL);
if((MT_UpdMT_EOMMTHLYMKTPRC(l_mt_eommthlymktprc_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_EOMMTHLYMKTPRCSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_EOMMTHLYMKTPRCFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_eommthlymktprc_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_EOMSYSDATE") == 0)
{
INTL_WARNING;
l_mt_eomsysdate_struct_h =  (MT_EOMSYSDATE_STRUCT_H *)calloc(1,sizeof(MT_EOMSYSDATE_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_eomsysdate_struct_h);
memset(l_mt_eomsysdate_struct_h,NULL,sizeof(MT_EOMSYSDATE_STRUCT_H));
int_ret_val = Populate_MT_EOMSYSDATE(l_mt_eomsysdate_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_EOMSYSDATE\n",NULL,NULL);
if((MT_UpdMT_EOMSYSDATE(l_mt_eomsysdate_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_EOMSYSDATESUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_EOMSYSDATEFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_eomsysdate_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_EXCHRATE") == 0)
{
INTL_WARNING;
l_mt_exchrate_struct_h =  (MT_EXCHRATE_STRUCT_H *)calloc(1,sizeof(MT_EXCHRATE_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_exchrate_struct_h);
memset(l_mt_exchrate_struct_h,NULL,sizeof(MT_EXCHRATE_STRUCT_H));
int_ret_val = Populate_MT_EXCHRATE(l_mt_exchrate_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_EXCHRATE\n",NULL,NULL);
if((MT_UpdMT_EXCHRATE(l_mt_exchrate_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_EXCHRATESUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_EXCHRATEFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_exchrate_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_FLRATE_INSTRUMENT") == 0)
{
INTL_WARNING;
l_mt_flrate_instrument_struct_h =  (MT_FLRATE_INSTRUMENT_STRUCT_H *)calloc(1,sizeof(MT_FLRATE_INSTRUMENT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_flrate_instrument_struct_h);
memset(l_mt_flrate_instrument_struct_h,NULL,sizeof(MT_FLRATE_INSTRUMENT_STRUCT_H));
int_ret_val = Populate_MT_FLRATE_INSTRUMENT(l_mt_flrate_instrument_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_FLRATE_INSTRUMENT\n",NULL,NULL);
if((MT_UpdMT_FLRATE_INSTRUMENT(l_mt_flrate_instrument_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_FLRATE_INSTRUMENTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_FLRATE_INSTRUMENTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_flrate_instrument_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_GRPDETAILS") == 0)
{
INTL_WARNING;
l_mt_grpdetails_struct_h =  (MT_GRPDETAILS_STRUCT_H *)calloc(1,sizeof(MT_GRPDETAILS_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_grpdetails_struct_h);
memset(l_mt_grpdetails_struct_h,NULL,sizeof(MT_GRPDETAILS_STRUCT_H));
int_ret_val = Populate_MT_GRPDETAILS(l_mt_grpdetails_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_GRPDETAILS\n",NULL,NULL);
if((MT_UpdMT_GRPDETAILS(l_mt_grpdetails_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_GRPDETAILSSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_GRPDETAILSFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_grpdetails_struct_h);
}






/** changed elseif to if **/
if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_HISDLYMKTPRC") == 0)
{
INTL_WARNING;
l_mt_hisdlymktprc_struct_h =  (MT_HISDLYMKTPRC_STRUCT_H *)calloc(1,sizeof(MT_HISDLYMKTPRC_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_hisdlymktprc_struct_h);
memset(l_mt_hisdlymktprc_struct_h,NULL,sizeof(MT_HISDLYMKTPRC_STRUCT_H));
int_ret_val = Populate_MT_HISDLYMKTPRC(l_mt_hisdlymktprc_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_HISDLYMKTPRC\n",NULL,NULL);
if((MT_UpdMT_HISDLYMKTPRC(l_mt_hisdlymktprc_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_HISDLYMKTPRCSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_HISDLYMKTPRCFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_hisdlymktprc_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_HOLIDAY") == 0)
{
INTL_WARNING;
l_mt_holiday_struct_h =  (MT_HOLIDAY_STRUCT_H *)calloc(1,sizeof(MT_HOLIDAY_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_holiday_struct_h);
memset(l_mt_holiday_struct_h,NULL,sizeof(MT_HOLIDAY_STRUCT_H));
int_ret_val = Populate_MT_HOLIDAY(l_mt_holiday_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_HOLIDAY\n",NULL,NULL);
if((MT_UpdMT_HOLIDAY(l_mt_holiday_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_HOLIDAYSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_HOLIDAYFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_holiday_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_IDENTMNT") == 0)
{
INTL_WARNING;
l_mt_identmnt_struct_h =  (MT_IDENTMNT_STRUCT_H *)calloc(1,sizeof(MT_IDENTMNT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_identmnt_struct_h);
memset(l_mt_identmnt_struct_h,NULL,sizeof(MT_IDENTMNT_STRUCT_H));
int_ret_val = Populate_MT_IDENTMNT(l_mt_identmnt_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_IDENTMNT\n",NULL,NULL);
if((MT_UpdMT_IDENTMNT(l_mt_identmnt_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_IDENTMNTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_IDENTMNTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_identmnt_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_INDEX_FUND") == 0)
{
INTL_WARNING;
l_mt_index_fund_struct_h =  (MT_INDEX_FUND_STRUCT_H *)calloc(1,sizeof(MT_INDEX_FUND_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_index_fund_struct_h);
memset(l_mt_index_fund_struct_h,NULL,sizeof(MT_INDEX_FUND_STRUCT_H));
int_ret_val = Populate_MT_INDEX_FUND(l_mt_index_fund_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_INDEX_FUND\n",NULL,NULL);
if((MT_UpdMT_INDEX_FUND(l_mt_index_fund_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_INDEX_FUNDSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_INDEX_FUNDFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_index_fund_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_INDEX_FUNDDET") == 0)
{
INTL_WARNING;
l_mt_index_funddet_struct_h =  (MT_INDEX_FUNDDET_STRUCT_H *)calloc(1,sizeof(MT_INDEX_FUNDDET_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_index_funddet_struct_h);
memset(l_mt_index_funddet_struct_h,NULL,sizeof(MT_INDEX_FUNDDET_STRUCT_H));
int_ret_val = Populate_MT_INDEX_FUNDDET(l_mt_index_funddet_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_INDEX_FUNDDET\n",NULL,NULL);
if((MT_UpdMT_INDEX_FUNDDET(l_mt_index_funddet_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_INDEX_FUNDDETSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_INDEX_FUNDDETFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_index_funddet_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_INSL_ENTRY") == 0)
{
INTL_WARNING;
l_mt_insl_entry_struct_h =  (MT_INSL_ENTRY_STRUCT_H *)calloc(1,sizeof(MT_INSL_ENTRY_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_insl_entry_struct_h);
memset(l_mt_insl_entry_struct_h,NULL,sizeof(MT_INSL_ENTRY_STRUCT_H));
int_ret_val = Populate_MT_INSL_ENTRY(l_mt_insl_entry_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_INSL_ENTRY\n",NULL,NULL);
if((MT_UpdMT_INSL_ENTRY(l_mt_insl_entry_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_INSL_ENTRYSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_INSL_ENTRYFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_insl_entry_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_INSTRUMENT") == 0)
{
INTL_WARNING;
l_mt_instrument_struct_h =  (MT_INSTRUMENT_STRUCT_H *)calloc(1,sizeof(MT_INSTRUMENT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_instrument_struct_h);
memset(l_mt_instrument_struct_h,NULL,sizeof(MT_INSTRUMENT_STRUCT_H));
int_ret_val = Populate_MT_INSTRUMENT(l_mt_instrument_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_INSTRUMENT\n",NULL,NULL);
if((MT_UpdMT_INSTRUMENT(l_mt_instrument_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_INSTRUMENTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_INSTRUMENTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_instrument_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_INSTR_EXCH_DET") == 0)
{
INTL_WARNING;
l_mt_instr_exch_det_struct_h =  (MT_INSTR_EXCH_DET_STRUCT_H *)calloc(1,sizeof(MT_INSTR_EXCH_DET_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_instr_exch_det_struct_h);
memset(l_mt_instr_exch_det_struct_h,NULL,sizeof(MT_INSTR_EXCH_DET_STRUCT_H));
int_ret_val = Populate_MT_INSTR_EXCH_DET(l_mt_instr_exch_det_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_INSTR_EXCH_DET\n",NULL,NULL);
if((MT_UpdMT_INSTR_EXCH_DET(l_mt_instr_exch_det_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_INSTR_EXCH_DETSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_INSTR_EXCH_DETFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_instr_exch_det_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_INSTR_RATING_DET") == 0)
{
INTL_WARNING;
l_mt_instr_rating_det_struct_h =  (MT_INSTR_RATING_DET_STRUCT_H *)calloc(1,sizeof(MT_INSTR_RATING_DET_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_instr_rating_det_struct_h);
memset(l_mt_instr_rating_det_struct_h,NULL,sizeof(MT_INSTR_RATING_DET_STRUCT_H));
int_ret_val = Populate_MT_INSTR_RATING_DET(l_mt_instr_rating_det_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_INSTR_RATING_DET\n",NULL,NULL);
if((MT_UpdMT_INSTR_RATING_DET(l_mt_instr_rating_det_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_INSTR_RATING_DETSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_INSTR_RATING_DETFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_instr_rating_det_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_LOCATION") == 0)
{
INTL_WARNING;
l_mt_location_struct_h =  (MT_LOCATION_STRUCT_H *)calloc(1,sizeof(MT_LOCATION_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_location_struct_h);
memset(l_mt_location_struct_h,NULL,sizeof(MT_LOCATION_STRUCT_H));
int_ret_val = Populate_MT_LOCATION(l_mt_location_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_LOCATION\n",NULL,NULL);
if((MT_UpdMT_LOCATION(l_mt_location_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_LOCATIONSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_LOCATIONFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_location_struct_h);
}






/*
else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_MESSAGE_SYS_PARAMS") == 0)
{
INTL_WARNING;
l_mt_message_sys_params_struct_h =  (MT_MESSAGE_SYS_PARAMS_STRUCT_H *)calloc(1,sizeof(MT_MESSAGE_SYS_PARAMS_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_message_sys_params_struct_h);
memset(l_mt_message_sys_params_struct_h,NULL,sizeof(MT_MESSAGE_SYS_PARAMS_STRUCT_H));
int_ret_val = Populate_MT_MESSAGE_SYS_PARAMS(l_mt_message_sys_params_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_MESSAGE_SYS_PARAMS\n",NULL,NULL);
if((MT_UpdMT_MESSAGE_SYS_PARAMS(l_mt_message_sys_params_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_MESSAGE_SYS_PARAMSSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_MESSAGE_SYS_PARAMSFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_message_sys_params_struct_h);
}



*/



else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_MKTPRC_GEN_VEW") == 0)
{
INTL_WARNING;
l_mt_mktprc_gen_vew_struct_h =  (MT_MKTPRC_GEN_VEW_STRUCT_H *)calloc(1,sizeof(MT_MKTPRC_GEN_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_mktprc_gen_vew_struct_h);
memset(l_mt_mktprc_gen_vew_struct_h,NULL,sizeof(MT_MKTPRC_GEN_VEW_STRUCT_H));
int_ret_val = Populate_MT_MKTPRC_GEN_VEW(l_mt_mktprc_gen_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_MKTPRC_GEN_VEW\n",NULL,NULL);
if((MT_UpdMT_MKTPRC_GEN_VEW(l_mt_mktprc_gen_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_MKTPRC_GEN_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_MKTPRC_GEN_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_mktprc_gen_vew_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_MSGADDRESS") == 0)
{
INTL_WARNING;
l_mt_msgaddress_struct_h =  (MT_MSGADDRESS_STRUCT_H *)calloc(1,sizeof(MT_MSGADDRESS_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_msgaddress_struct_h);
memset(l_mt_msgaddress_struct_h,NULL,sizeof(MT_MSGADDRESS_STRUCT_H));
int_ret_val = Populate_MT_MSGADDRESS(l_mt_msgaddress_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_MSGADDRESS\n",NULL,NULL);
if((MT_UpdMT_MSGADDRESS(l_mt_msgaddress_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_MSGADDRESSSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_MSGADDRESSFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_msgaddress_struct_h);
}





/*

else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_MSGADDRESS_VEW") == 0)
{
INTL_WARNING;
l_mt_msgaddress_vew_struct_h =  (MT_MSGADDRESS_VEW_STRUCT_H *)calloc(1,sizeof(MT_MSGADDRESS_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_msgaddress_vew_struct_h);
memset(l_mt_msgaddress_vew_struct_h,NULL,sizeof(MT_MSGADDRESS_VEW_STRUCT_H));
int_ret_val = Populate_MT_MSGADDRESS_VEW(l_mt_msgaddress_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_MSGADDRESS_VEW\n",NULL,NULL);
if((MT_UpdMT_MSGADDRESS_VEW(l_mt_msgaddress_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_MSGADDRESS_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_MSGADDRESS_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_msgaddress_vew_struct_h);
}
*/






else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_MTHLYMKTPRC") == 0)
{
INTL_WARNING;
l_mt_mthlymktprc_struct_h =  (MT_MTHLYMKTPRC_STRUCT_H *)calloc(1,sizeof(MT_MTHLYMKTPRC_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_mthlymktprc_struct_h);
memset(l_mt_mthlymktprc_struct_h,NULL,sizeof(MT_MTHLYMKTPRC_STRUCT_H));
int_ret_val = Populate_MT_MTHLYMKTPRC(l_mt_mthlymktprc_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_MTHLYMKTPRC\n",NULL,NULL);
if((MT_UpdMT_MTHLYMKTPRC(l_mt_mthlymktprc_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_MTHLYMKTPRCSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_MTHLYMKTPRCFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_mthlymktprc_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_NO_DELV") == 0)
{
INTL_WARNING;
l_mt_no_delv_struct_h =  (MT_NO_DELV_STRUCT_H *)calloc(1,sizeof(MT_NO_DELV_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_no_delv_struct_h);
memset(l_mt_no_delv_struct_h,NULL,sizeof(MT_NO_DELV_STRUCT_H));
int_ret_val = Populate_MT_NO_DELV(l_mt_no_delv_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_NO_DELV\n",NULL,NULL);
if((MT_UpdMT_NO_DELV(l_mt_no_delv_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_NO_DELVSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_NO_DELVFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_no_delv_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_PARTY") == 0)
{
INTL_WARNING;
l_mt_party_struct_h =  (MT_PARTY_STRUCT_H *)calloc(1,sizeof(MT_PARTY_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_party_struct_h);
memset(l_mt_party_struct_h,NULL,sizeof(MT_PARTY_STRUCT_H));
int_ret_val = Populate_MT_PARTY(l_mt_party_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_PARTY\n",NULL,NULL);
if((MT_UpdMT_PARTY(l_mt_party_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_PARTYSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_PARTYFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_party_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_PC_DET") == 0)
{
INTL_WARNING;
l_mt_pc_det_struct_h =  (MT_PC_DET_STRUCT_H *)calloc(1,sizeof(MT_PC_DET_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_pc_det_struct_h);
memset(l_mt_pc_det_struct_h,NULL,sizeof(MT_PC_DET_STRUCT_H));
int_ret_val = Populate_MT_PC_DET(l_mt_pc_det_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_PC_DET\n",NULL,NULL);
if((MT_UpdMT_PC_DET(l_mt_pc_det_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_PC_DETSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_PC_DETFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_pc_det_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_PTC_DET") == 0)
{
INTL_WARNING;
l_mt_ptc_det_struct_h =  (MT_PTC_DET_STRUCT_H *)calloc(1,sizeof(MT_PTC_DET_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_ptc_det_struct_h);
memset(l_mt_ptc_det_struct_h,NULL,sizeof(MT_PTC_DET_STRUCT_H));
int_ret_val = Populate_MT_PTC_DET(l_mt_ptc_det_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_PTC_DET\n",NULL,NULL);
if((MT_UpdMT_PTC_DET(l_mt_ptc_det_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_PTC_DETSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_PTC_DETFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_ptc_det_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_PTY_DEPO_MAP") == 0)
{
INTL_WARNING;
l_mt_pty_depo_map_struct_h =  (MT_PTY_DEPO_MAP_STRUCT_H *)calloc(1,sizeof(MT_PTY_DEPO_MAP_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_pty_depo_map_struct_h);
memset(l_mt_pty_depo_map_struct_h,NULL,sizeof(MT_PTY_DEPO_MAP_STRUCT_H));
int_ret_val = Populate_MT_PTY_DEPO_MAP(l_mt_pty_depo_map_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_PTY_DEPO_MAP\n",NULL,NULL);
if((MT_UpdMT_PTY_DEPO_MAP(l_mt_pty_depo_map_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_PTY_DEPO_MAPSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_PTY_DEPO_MAPFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_pty_depo_map_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_PTY_EXCH_CLN_MAP") == 0)
{
INTL_WARNING;
l_mt_pty_exch_cln_map_struct_h =  (MT_PTY_EXCH_CLN_MAP_STRUCT_H *)calloc(1,sizeof(MT_PTY_EXCH_CLN_MAP_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_pty_exch_cln_map_struct_h);
memset(l_mt_pty_exch_cln_map_struct_h,NULL,sizeof(MT_PTY_EXCH_CLN_MAP_STRUCT_H));
int_ret_val = Populate_MT_PTY_EXCH_CLN_MAP(l_mt_pty_exch_cln_map_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_PTY_EXCH_CLN_MAP\n",NULL,NULL);
if((MT_UpdMT_PTY_EXCH_CLN_MAP(l_mt_pty_exch_cln_map_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_PTY_EXCH_CLN_MAPSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_PTY_EXCH_CLN_MAPFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_pty_exch_cln_map_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_PTY_EXCH_MAP") == 0)
{
INTL_WARNING;
l_mt_pty_exch_map_struct_h =  (MT_PTY_EXCH_MAP_STRUCT_H *)calloc(1,sizeof(MT_PTY_EXCH_MAP_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_pty_exch_map_struct_h);
memset(l_mt_pty_exch_map_struct_h,NULL,sizeof(MT_PTY_EXCH_MAP_STRUCT_H));
int_ret_val = Populate_MT_PTY_EXCH_MAP(l_mt_pty_exch_map_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_PTY_EXCH_MAP\n",NULL,NULL);
if((MT_UpdMT_PTY_EXCH_MAP(l_mt_pty_exch_map_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_PTY_EXCH_MAPSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_PTY_EXCH_MAPFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_pty_exch_map_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_RBI_MONITORY") == 0)
{
INTL_WARNING;
l_mt_rbi_monitory_struct_h =  (MT_RBI_MONITORY_STRUCT_H *)calloc(1,sizeof(MT_RBI_MONITORY_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_rbi_monitory_struct_h);
memset(l_mt_rbi_monitory_struct_h,NULL,sizeof(MT_RBI_MONITORY_STRUCT_H));
int_ret_val = Populate_MT_RBI_MONITORY(l_mt_rbi_monitory_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_RBI_MONITORY\n",NULL,NULL);
if((MT_UpdMT_RBI_MONITORY(l_mt_rbi_monitory_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_RBI_MONITORYSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_RBI_MONITORYFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_rbi_monitory_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_RED_DET") == 0)
{
INTL_WARNING;
l_mt_red_det_struct_h =  (MT_RED_DET_STRUCT_H *)calloc(1,sizeof(MT_RED_DET_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_red_det_struct_h);
memset(l_mt_red_det_struct_h,NULL,sizeof(MT_RED_DET_STRUCT_H));
int_ret_val = Populate_MT_RED_DET(l_mt_red_det_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_RED_DET\n",NULL,NULL);
if((MT_UpdMT_RED_DET(l_mt_red_det_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_RED_DETSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_RED_DETFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_red_det_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_RED_DP_DET") == 0)
{
INTL_WARNING;
l_mt_red_dp_det_struct_h =  (MT_RED_DP_DET_STRUCT_H *)calloc(1,sizeof(MT_RED_DP_DET_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_red_dp_det_struct_h);
memset(l_mt_red_dp_det_struct_h,NULL,sizeof(MT_RED_DP_DET_STRUCT_H));
int_ret_val = Populate_MT_RED_DP_DET(l_mt_red_dp_det_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_RED_DP_DET\n",NULL,NULL);
if((MT_UpdMT_RED_DP_DET(l_mt_red_dp_det_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_RED_DP_DETSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_RED_DP_DETFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_red_dp_det_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_REGDETAILS") == 0)
{
INTL_WARNING;
l_mt_regdetails_struct_h =  (MT_REGDETAILS_STRUCT_H *)calloc(1,sizeof(MT_REGDETAILS_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_regdetails_struct_h);
memset(l_mt_regdetails_struct_h,NULL,sizeof(MT_REGDETAILS_STRUCT_H));
int_ret_val = Populate_MT_REGDETAILS(l_mt_regdetails_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_REGDETAILS\n",NULL,NULL);
if((MT_UpdMT_REGDETAILS(l_mt_regdetails_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_REGDETAILSSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_REGDETAILSFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_regdetails_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_RESET_DET") == 0)
{
INTL_WARNING;
l_mt_reset_det_struct_h =  (MT_RESET_DET_STRUCT_H *)calloc(1,sizeof(MT_RESET_DET_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_reset_det_struct_h);
memset(l_mt_reset_det_struct_h,NULL,sizeof(MT_RESET_DET_STRUCT_H));
int_ret_val = Populate_MT_RESET_DET(l_mt_reset_det_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_RESET_DET\n",NULL,NULL);
if((MT_UpdMT_RESET_DET(l_mt_reset_det_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_RESET_DETSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_RESET_DETFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_reset_det_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_SCHDET") == 0)
{
INTL_WARNING;
l_mt_schdet_struct_h =  (MT_SCHDET_STRUCT_H *)calloc(1,sizeof(MT_SCHDET_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_schdet_struct_h);
memset(l_mt_schdet_struct_h,NULL,sizeof(MT_SCHDET_STRUCT_H));
int_ret_val = Populate_MT_SCHDET(l_mt_schdet_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_SCHDET\n",NULL,NULL);
if((MT_UpdMT_SCHDET(l_mt_schdet_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_SCHDETSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_SCHDETFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_schdet_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_SCHDET_TEMP") == 0)
{
INTL_WARNING;
l_mt_schdet_temp_struct_h =  (MT_SCHDET_TEMP_STRUCT_H *)calloc(1,sizeof(MT_SCHDET_TEMP_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_schdet_temp_struct_h);
memset(l_mt_schdet_temp_struct_h,NULL,sizeof(MT_SCHDET_TEMP_STRUCT_H));
int_ret_val = Populate_MT_SCHDET_TEMP(l_mt_schdet_temp_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_SCHDET_TEMP\n",NULL,NULL);
if((MT_UpdMT_SCHDET_TEMP(l_mt_schdet_temp_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_SCHDET_TEMPSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_SCHDET_TEMPFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_schdet_temp_struct_h);
}






/*
else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_SCHDET_VEW") == 0)
{
INTL_WARNING;
l_mt_schdet_vew_struct_h =  (MT_SCHDET_VEW_STRUCT_H *)calloc(1,sizeof(MT_SCHDET_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_schdet_vew_struct_h);
memset(l_mt_schdet_vew_struct_h,NULL,sizeof(MT_SCHDET_VEW_STRUCT_H));
int_ret_val = Populate_MT_SCHDET_VEW(l_mt_schdet_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_SCHDET_VEW\n",NULL,NULL);
if((MT_UpdMT_SCHDET_VEW(l_mt_schdet_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_SCHDET_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_SCHDET_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_schdet_vew_struct_h);
}

*/





else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_SETTL_CAL") == 0)
{
INTL_WARNING;
l_mt_settl_cal_struct_h =  (MT_SETTL_CAL_STRUCT_H *)calloc(1,sizeof(MT_SETTL_CAL_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_settl_cal_struct_h);
memset(l_mt_settl_cal_struct_h,NULL,sizeof(MT_SETTL_CAL_STRUCT_H));
int_ret_val = Populate_MT_SETTL_CAL(l_mt_settl_cal_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_SETTL_CAL\n",NULL,NULL);
if((MT_UpdMT_SETTL_CAL(l_mt_settl_cal_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_SETTL_CALSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_SETTL_CALFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_settl_cal_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_TEMPMKTPRC") == 0)
{
INTL_WARNING;
l_mt_tempmktprc_struct_h =  (MT_TEMPMKTPRC_STRUCT_H *)calloc(1,sizeof(MT_TEMPMKTPRC_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_tempmktprc_struct_h);
memset(l_mt_tempmktprc_struct_h,NULL,sizeof(MT_TEMPMKTPRC_STRUCT_H));
int_ret_val = Populate_MT_TEMPMKTPRC(l_mt_tempmktprc_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_TEMPMKTPRC\n",NULL,NULL);
if((MT_UpdMT_TEMPMKTPRC(l_mt_tempmktprc_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_TEMPMKTPRCSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_TEMPMKTPRCFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_tempmktprc_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_MT_WHTRATE") == 0)
{
INTL_WARNING;
l_mt_whtrate_struct_h =  (MT_WHTRATE_STRUCT_H *)calloc(1,sizeof(MT_WHTRATE_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_mt_whtrate_struct_h);
memset(l_mt_whtrate_struct_h,NULL,sizeof(MT_WHTRATE_STRUCT_H));
int_ret_val = Populate_MT_WHTRATE(l_mt_whtrate_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdMT_WHTRATE\n",NULL,NULL);
if((MT_UpdMT_WHTRATE(l_mt_whtrate_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_WHTRATESUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdMT_WHTRATEFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_mt_whtrate_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_OR_ARCHEXEC") == 0)
{
INTL_WARNING;
l_or_archexec_struct_h =  (OR_ARCHEXEC_STRUCT_H *)calloc(1,sizeof(OR_ARCHEXEC_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_or_archexec_struct_h);
memset(l_or_archexec_struct_h,NULL,sizeof(OR_ARCHEXEC_STRUCT_H));
int_ret_val = Populate_OR_ARCHEXEC(l_or_archexec_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdOR_ARCHEXEC\n",NULL,NULL);
if((MT_UpdOR_ARCHEXEC(l_or_archexec_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdOR_ARCHEXECSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdOR_ARCHEXECFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_or_archexec_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_OR_ARCHORDERS") == 0)
{
INTL_WARNING;
l_or_archorders_struct_h =  (OR_ARCHORDERS_STRUCT_H *)calloc(1,sizeof(OR_ARCHORDERS_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_or_archorders_struct_h);
memset(l_or_archorders_struct_h,NULL,sizeof(OR_ARCHORDERS_STRUCT_H));
int_ret_val = Populate_OR_ARCHORDERS(l_or_archorders_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdOR_ARCHORDERS\n",NULL,NULL);
if((MT_UpdOR_ARCHORDERS(l_or_archorders_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdOR_ARCHORDERSSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdOR_ARCHORDERSFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_or_archorders_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_OR_EXECORDER") == 0)
{
INTL_WARNING;
l_or_execorder_struct_h =  (OR_EXECORDER_STRUCT_H *)calloc(1,sizeof(OR_EXECORDER_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_or_execorder_struct_h);
memset(l_or_execorder_struct_h,NULL,sizeof(OR_EXECORDER_STRUCT_H));
int_ret_val = Populate_OR_EXECORDER(l_or_execorder_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdOR_EXECORDER\n",NULL,NULL);
if((MT_UpdOR_EXECORDER(l_or_execorder_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdOR_EXECORDERSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdOR_EXECORDERFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_or_execorder_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_OR_HISEXECORDER") == 0)
{
INTL_WARNING;
l_or_hisexecorder_struct_h =  (OR_HISEXECORDER_STRUCT_H *)calloc(1,sizeof(OR_HISEXECORDER_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_or_hisexecorder_struct_h);
memset(l_or_hisexecorder_struct_h,NULL,sizeof(OR_HISEXECORDER_STRUCT_H));
int_ret_val = Populate_OR_HISEXECORDER(l_or_hisexecorder_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdOR_HISEXECORDER\n",NULL,NULL);
if((MT_UpdOR_HISEXECORDER(l_or_hisexecorder_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdOR_HISEXECORDERSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdOR_HISEXECORDERFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_or_hisexecorder_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_OR_HISORDER") == 0)
{
INTL_WARNING;
l_or_hisorder_struct_h =  (OR_HISORDER_STRUCT_H *)calloc(1,sizeof(OR_HISORDER_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_or_hisorder_struct_h);
memset(l_or_hisorder_struct_h,NULL,sizeof(OR_HISORDER_STRUCT_H));
int_ret_val = Populate_OR_HISORDER(l_or_hisorder_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdOR_HISORDER\n",NULL,NULL);
if((MT_UpdOR_HISORDER(l_or_hisorder_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdOR_HISORDERSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdOR_HISORDERFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_or_hisorder_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_OR_ORDERDETAILS") == 0)
{
INTL_WARNING;
l_or_orderdetails_struct_h =  (OR_ORDERDETAILS_STRUCT_H *)calloc(1,sizeof(OR_ORDERDETAILS_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_or_orderdetails_struct_h);
memset(l_or_orderdetails_struct_h,NULL,sizeof(OR_ORDERDETAILS_STRUCT_H));
int_ret_val = Populate_OR_ORDERDETAILS(l_or_orderdetails_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdOR_ORDERDETAILS\n",NULL,NULL);
if((MT_UpdOR_ORDERDETAILS(l_or_orderdetails_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdOR_ORDERDETAILSSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdOR_ORDERDETAILSFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_or_orderdetails_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_OR_ORD_LR_VEW") == 0)
{
INTL_WARNING;
l_or_ord_lr_vew_struct_h =  (OR_ORD_LR_VEW_STRUCT_H *)calloc(1,sizeof(OR_ORD_LR_VEW_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_or_ord_lr_vew_struct_h);
memset(l_or_ord_lr_vew_struct_h,NULL,sizeof(OR_ORD_LR_VEW_STRUCT_H));
int_ret_val = Populate_OR_ORD_LR_VEW(l_or_ord_lr_vew_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdOR_ORD_LR_VEW\n",NULL,NULL);
if((MT_UpdOR_ORD_LR_VEW(l_or_ord_lr_vew_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdOR_ORD_LR_VEWSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdOR_ORD_LR_VEWFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_or_ord_lr_vew_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_PLAN_TABLE") == 0)
{
INTL_WARNING;
l_plan_table_struct_h =  (PLAN_TABLE_STRUCT_H *)calloc(1,sizeof(PLAN_TABLE_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_plan_table_struct_h);
memset(l_plan_table_struct_h,NULL,sizeof(PLAN_TABLE_STRUCT_H));
int_ret_val = Populate_PLAN_TABLE(l_plan_table_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdPLAN_TABLE\n",NULL,NULL);
if((MT_UpdPLAN_TABLE(l_plan_table_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPLAN_TABLESUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPLAN_TABLEFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_plan_table_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_PRO_ACCTENT") == 0)
{
INTL_WARNING;
l_pro_acctent_struct_h =  (PRO_ACCTENT_STRUCT_H *)calloc(1,sizeof(PRO_ACCTENT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_pro_acctent_struct_h);
memset(l_pro_acctent_struct_h,NULL,sizeof(PRO_ACCTENT_STRUCT_H));
int_ret_val = Populate_PRO_ACCTENT(l_pro_acctent_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdPRO_ACCTENT\n",NULL,NULL);
if((MT_UpdPRO_ACCTENT(l_pro_acctent_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_ACCTENTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_ACCTENTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_pro_acctent_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_PRO_CNTRY_SYS_PARAMS") == 0)
{
INTL_WARNING;
l_pro_cntry_sys_params_struct_h =  (PRO_CNTRY_SYS_PARAMS_STRUCT_H *)calloc(1,sizeof(PRO_CNTRY_SYS_PARAMS_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_pro_cntry_sys_params_struct_h);
memset(l_pro_cntry_sys_params_struct_h,NULL,sizeof(PRO_CNTRY_SYS_PARAMS_STRUCT_H));
int_ret_val = Populate_PRO_CNTRY_SYS_PARAMS(l_pro_cntry_sys_params_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdPRO_CNTRY_SYS_PARAMS\n",NULL,NULL);
if((MT_UpdPRO_CNTRY_SYS_PARAMS(l_pro_cntry_sys_params_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_CNTRY_SYS_PARAMSSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_CNTRY_SYS_PARAMSFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_pro_cntry_sys_params_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_PRO_COMMON_REPORT") == 0)
{
INTL_WARNING;
l_pro_common_report_struct_h =  (PRO_COMMON_REPORT_STRUCT_H *)calloc(1,sizeof(PRO_COMMON_REPORT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_pro_common_report_struct_h);
memset(l_pro_common_report_struct_h,NULL,sizeof(PRO_COMMON_REPORT_STRUCT_H));
int_ret_val = Populate_PRO_COMMON_REPORT(l_pro_common_report_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdPRO_COMMON_REPORT\n",NULL,NULL);
if((MT_UpdPRO_COMMON_REPORT(l_pro_common_report_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_COMMON_REPORTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_COMMON_REPORTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_pro_common_report_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_PRO_DAEMON_STATUS") == 0)
{
INTL_WARNING;
l_pro_daemon_status_struct_h =  (PRO_DAEMON_STATUS_STRUCT_H *)calloc(1,sizeof(PRO_DAEMON_STATUS_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_pro_daemon_status_struct_h);
memset(l_pro_daemon_status_struct_h,NULL,sizeof(PRO_DAEMON_STATUS_STRUCT_H));
int_ret_val = Populate_PRO_DAEMON_STATUS(l_pro_daemon_status_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdPRO_DAEMON_STATUS\n",NULL,NULL);
if((MT_UpdPRO_DAEMON_STATUS(l_pro_daemon_status_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_DAEMON_STATUSSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_DAEMON_STATUSFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_pro_daemon_status_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_PRO_EURO_TEMP") == 0)
{
INTL_WARNING;
l_pro_euro_temp_struct_h =  (PRO_EURO_TEMP_STRUCT_H *)calloc(1,sizeof(PRO_EURO_TEMP_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_pro_euro_temp_struct_h);
memset(l_pro_euro_temp_struct_h,NULL,sizeof(PRO_EURO_TEMP_STRUCT_H));
int_ret_val = Populate_PRO_EURO_TEMP(l_pro_euro_temp_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdPRO_EURO_TEMP\n",NULL,NULL);
if((MT_UpdPRO_EURO_TEMP(l_pro_euro_temp_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_EURO_TEMPSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_EURO_TEMPFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_pro_euro_temp_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_PRO_FAILCODES") == 0)
{
INTL_WARNING;
l_pro_failcodes_struct_h =  (PRO_FAILCODES_STRUCT_H *)calloc(1,sizeof(PRO_FAILCODES_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_pro_failcodes_struct_h);
memset(l_pro_failcodes_struct_h,NULL,sizeof(PRO_FAILCODES_STRUCT_H));
int_ret_val = Populate_PRO_FAILCODES(l_pro_failcodes_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdPRO_FAILCODES\n",NULL,NULL);
if((MT_UpdPRO_FAILCODES(l_pro_failcodes_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_FAILCODESSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_FAILCODESFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_pro_failcodes_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_PRO_GMATCHVALUE") == 0)
{
INTL_WARNING;
l_pro_gmatchvalue_struct_h =  (PRO_GMATCHVALUE_STRUCT_H *)calloc(1,sizeof(PRO_GMATCHVALUE_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_pro_gmatchvalue_struct_h);
memset(l_pro_gmatchvalue_struct_h,NULL,sizeof(PRO_GMATCHVALUE_STRUCT_H));
int_ret_val = Populate_PRO_GMATCHVALUE(l_pro_gmatchvalue_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdPRO_GMATCHVALUE\n",NULL,NULL);
if((MT_UpdPRO_GMATCHVALUE(l_pro_gmatchvalue_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_GMATCHVALUESUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_GMATCHVALUEFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_pro_gmatchvalue_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_PRO_GRACCTENT") == 0)
{
INTL_WARNING;
l_pro_gracctent_struct_h =  (PRO_GRACCTENT_STRUCT_H *)calloc(1,sizeof(PRO_GRACCTENT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_pro_gracctent_struct_h);
memset(l_pro_gracctent_struct_h,NULL,sizeof(PRO_GRACCTENT_STRUCT_H));
int_ret_val = Populate_PRO_GRACCTENT(l_pro_gracctent_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdPRO_GRACCTENT\n",NULL,NULL);
if((MT_UpdPRO_GRACCTENT(l_pro_gracctent_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_GRACCTENTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_GRACCTENTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_pro_gracctent_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_PRO_GSEQNUM") == 0)
{
INTL_WARNING;
l_pro_gseqnum_struct_h =  (PRO_GSEQNUM_STRUCT_H *)calloc(1,sizeof(PRO_GSEQNUM_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_pro_gseqnum_struct_h);
memset(l_pro_gseqnum_struct_h,NULL,sizeof(PRO_GSEQNUM_STRUCT_H));
int_ret_val = Populate_PRO_GSEQNUM(l_pro_gseqnum_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdPRO_GSEQNUM\n",NULL,NULL);
if((MT_UpdPRO_GSEQNUM(l_pro_gseqnum_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_GSEQNUMSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_GSEQNUMFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_pro_gseqnum_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_PRO_GSHELPID") == 0)
{
INTL_WARNING;
l_pro_gshelpid_struct_h =  (PRO_GSHELPID_STRUCT_H *)calloc(1,sizeof(PRO_GSHELPID_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_pro_gshelpid_struct_h);
memset(l_pro_gshelpid_struct_h,NULL,sizeof(PRO_GSHELPID_STRUCT_H));
int_ret_val = Populate_PRO_GSHELPID(l_pro_gshelpid_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdPRO_GSHELPID\n",NULL,NULL);
if((MT_UpdPRO_GSHELPID(l_pro_gshelpid_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_GSHELPIDSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_GSHELPIDFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_pro_gshelpid_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_PRO_GSSPLVAL") == 0)
{
INTL_WARNING;
l_pro_gssplval_struct_h =  (PRO_GSSPLVAL_STRUCT_H *)calloc(1,sizeof(PRO_GSSPLVAL_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_pro_gssplval_struct_h);
memset(l_pro_gssplval_struct_h,NULL,sizeof(PRO_GSSPLVAL_STRUCT_H));
int_ret_val = Populate_PRO_GSSPLVAL(l_pro_gssplval_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdPRO_GSSPLVAL\n",NULL,NULL);
if((MT_UpdPRO_GSSPLVAL(l_pro_gssplval_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_GSSPLVALSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_GSSPLVALFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_pro_gssplval_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_PRO_HDAT_STATIC") == 0)
{
INTL_WARNING;
l_pro_hdat_static_struct_h =  (PRO_HDAT_STATIC_STRUCT_H *)calloc(1,sizeof(PRO_HDAT_STATIC_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_pro_hdat_static_struct_h);
memset(l_pro_hdat_static_struct_h,NULL,sizeof(PRO_HDAT_STATIC_STRUCT_H));
int_ret_val = Populate_PRO_HDAT_STATIC(l_pro_hdat_static_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdPRO_HDAT_STATIC\n",NULL,NULL);
if((MT_UpdPRO_HDAT_STATIC(l_pro_hdat_static_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_HDAT_STATICSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_HDAT_STATICFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_pro_hdat_static_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_PRO_MQNAMES") == 0)
{
INTL_WARNING;
l_pro_mqnames_struct_h =  (PRO_MQNAMES_STRUCT_H *)calloc(1,sizeof(PRO_MQNAMES_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_pro_mqnames_struct_h);
memset(l_pro_mqnames_struct_h,NULL,sizeof(PRO_MQNAMES_STRUCT_H));
int_ret_val = Populate_PRO_MQNAMES(l_pro_mqnames_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdPRO_MQNAMES\n",NULL,NULL);
if((MT_UpdPRO_MQNAMES(l_pro_mqnames_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_MQNAMESSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_MQNAMESFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_pro_mqnames_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_PRO_MQ_DATA") == 0)
{
INTL_WARNING;
l_pro_mq_data_struct_h =  (PRO_MQ_DATA_STRUCT_H *)calloc(1,sizeof(PRO_MQ_DATA_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_pro_mq_data_struct_h);
memset(l_pro_mq_data_struct_h,NULL,sizeof(PRO_MQ_DATA_STRUCT_H));
int_ret_val = Populate_PRO_MQ_DATA(l_pro_mq_data_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdPRO_MQ_DATA\n",NULL,NULL);
if((MT_UpdPRO_MQ_DATA(l_pro_mq_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_MQ_DATASUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_MQ_DATAFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_pro_mq_data_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_PRO_MSGCONV") == 0)
{
INTL_WARNING;
l_pro_msgconv_struct_h =  (PRO_MSGCONV_STRUCT_H *)calloc(1,sizeof(PRO_MSGCONV_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_pro_msgconv_struct_h);
memset(l_pro_msgconv_struct_h,NULL,sizeof(PRO_MSGCONV_STRUCT_H));
int_ret_val = Populate_PRO_MSGCONV(l_pro_msgconv_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdPRO_MSGCONV\n",NULL,NULL);
if((MT_UpdPRO_MSGCONV(l_pro_msgconv_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_MSGCONVSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_MSGCONVFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_pro_msgconv_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_PRO_REQUEST_BATCH") == 0)
{
INTL_WARNING;
l_pro_request_batch_struct_h =  (PRO_REQUEST_BATCH_STRUCT_H *)calloc(1,sizeof(PRO_REQUEST_BATCH_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_pro_request_batch_struct_h);
memset(l_pro_request_batch_struct_h,NULL,sizeof(PRO_REQUEST_BATCH_STRUCT_H));
int_ret_val = Populate_PRO_REQUEST_BATCH(l_pro_request_batch_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdPRO_REQUEST_BATCH\n",NULL,NULL);
if((MT_UpdPRO_REQUEST_BATCH(l_pro_request_batch_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_REQUEST_BATCHSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_REQUEST_BATCHFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_pro_request_batch_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_PRO_REQUEST_CA") == 0)
{
INTL_WARNING;
l_pro_request_ca_struct_h =  (PRO_REQUEST_CA_STRUCT_H *)calloc(1,sizeof(PRO_REQUEST_CA_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_pro_request_ca_struct_h);
memset(l_pro_request_ca_struct_h,NULL,sizeof(PRO_REQUEST_CA_STRUCT_H));
int_ret_val = Populate_PRO_REQUEST_CA(l_pro_request_ca_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdPRO_REQUEST_CA\n",NULL,NULL);
if((MT_UpdPRO_REQUEST_CA(l_pro_request_ca_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_REQUEST_CASUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_REQUEST_CAFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_pro_request_ca_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_PRO_REQUEST_DEAL") == 0)
{
INTL_WARNING;
l_pro_request_deal_struct_h =  (PRO_REQUEST_DEAL_STRUCT_H *)calloc(1,sizeof(PRO_REQUEST_DEAL_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_pro_request_deal_struct_h);
memset(l_pro_request_deal_struct_h,NULL,sizeof(PRO_REQUEST_DEAL_STRUCT_H));
int_ret_val = Populate_PRO_REQUEST_DEAL(l_pro_request_deal_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdPRO_REQUEST_DEAL\n",NULL,NULL);
if((MT_UpdPRO_REQUEST_DEAL(l_pro_request_deal_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_REQUEST_DEALSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_REQUEST_DEALFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_pro_request_deal_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_PRO_REQUEST_IV") == 0)
{
INTL_WARNING;
l_pro_request_iv_struct_h =  (PRO_REQUEST_IV_STRUCT_H *)calloc(1,sizeof(PRO_REQUEST_IV_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_pro_request_iv_struct_h);
memset(l_pro_request_iv_struct_h,NULL,sizeof(PRO_REQUEST_IV_STRUCT_H));
int_ret_val = Populate_PRO_REQUEST_IV(l_pro_request_iv_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdPRO_REQUEST_IV\n",NULL,NULL);
if((MT_UpdPRO_REQUEST_IV(l_pro_request_iv_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_REQUEST_IVSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_REQUEST_IVFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_pro_request_iv_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_PRO_REQUEST_MT") == 0)
{
INTL_WARNING;
l_pro_request_mt_struct_h =  (PRO_REQUEST_MT_STRUCT_H *)calloc(1,sizeof(PRO_REQUEST_MT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_pro_request_mt_struct_h);
memset(l_pro_request_mt_struct_h,NULL,sizeof(PRO_REQUEST_MT_STRUCT_H));
int_ret_val = Populate_PRO_REQUEST_MT(l_pro_request_mt_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdPRO_REQUEST_MT\n",NULL,NULL);
if((MT_UpdPRO_REQUEST_MT(l_pro_request_mt_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_REQUEST_MTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_REQUEST_MTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_pro_request_mt_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_PRO_REQUEST_UPLOAD") == 0)
{
INTL_WARNING;
l_pro_request_upload_struct_h =  (PRO_REQUEST_UPLOAD_STRUCT_H *)calloc(1,sizeof(PRO_REQUEST_UPLOAD_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_pro_request_upload_struct_h);
memset(l_pro_request_upload_struct_h,NULL,sizeof(PRO_REQUEST_UPLOAD_STRUCT_H));
int_ret_val = Populate_PRO_REQUEST_UPLOAD(l_pro_request_upload_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdPRO_REQUEST_UPLOAD\n",NULL,NULL);
if((MT_UpdPRO_REQUEST_UPLOAD(l_pro_request_upload_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_REQUEST_UPLOADSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_REQUEST_UPLOADFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_pro_request_upload_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_PRO_SGENSTAT") == 0)
{
INTL_WARNING;
l_pro_sgenstat_struct_h =  (PRO_SGENSTAT_STRUCT_H *)calloc(1,sizeof(PRO_SGENSTAT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_pro_sgenstat_struct_h);
memset(l_pro_sgenstat_struct_h,NULL,sizeof(PRO_SGENSTAT_STRUCT_H));
int_ret_val = Populate_PRO_SGENSTAT(l_pro_sgenstat_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdPRO_SGENSTAT\n",NULL,NULL);
if((MT_UpdPRO_SGENSTAT(l_pro_sgenstat_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_SGENSTATSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_SGENSTATFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_pro_sgenstat_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_PRO_SGENSTAT_BAK") == 0)
{
INTL_WARNING;
l_pro_sgenstat_bak_struct_h =  (PRO_SGENSTAT_BAK_STRUCT_H *)calloc(1,sizeof(PRO_SGENSTAT_BAK_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_pro_sgenstat_bak_struct_h);
memset(l_pro_sgenstat_bak_struct_h,NULL,sizeof(PRO_SGENSTAT_BAK_STRUCT_H));
int_ret_val = Populate_PRO_SGENSTAT_BAK(l_pro_sgenstat_bak_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdPRO_SGENSTAT_BAK\n",NULL,NULL);
if((MT_UpdPRO_SGENSTAT_BAK(l_pro_sgenstat_bak_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_SGENSTAT_BAKSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_SGENSTAT_BAKFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_pro_sgenstat_bak_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_PRO_SYS_DATE") == 0)
{
INTL_WARNING;
l_pro_sys_date_struct_h =  (PRO_SYS_DATE_STRUCT_H *)calloc(1,sizeof(PRO_SYS_DATE_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_pro_sys_date_struct_h);
memset(l_pro_sys_date_struct_h,NULL,sizeof(PRO_SYS_DATE_STRUCT_H));
int_ret_val = Populate_PRO_SYS_DATE(l_pro_sys_date_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdPRO_SYS_DATE\n",NULL,NULL);
if((MT_UpdPRO_SYS_DATE(l_pro_sys_date_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_SYS_DATESUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_SYS_DATEFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_pro_sys_date_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_PRO_TEMP_MQDATA") == 0)
{
INTL_WARNING;
l_pro_temp_mqdata_struct_h =  (PRO_TEMP_MQDATA_STRUCT_H *)calloc(1,sizeof(PRO_TEMP_MQDATA_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_pro_temp_mqdata_struct_h);
memset(l_pro_temp_mqdata_struct_h,NULL,sizeof(PRO_TEMP_MQDATA_STRUCT_H));
int_ret_val = Populate_PRO_TEMP_MQDATA(l_pro_temp_mqdata_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdPRO_TEMP_MQDATA\n",NULL,NULL);
if((MT_UpdPRO_TEMP_MQDATA(l_pro_temp_mqdata_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_TEMP_MQDATASUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdPRO_TEMP_MQDATAFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_pro_temp_mqdata_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_SYS_BATCHPROC") == 0)
{
INTL_WARNING;
l_sys_batchproc_struct_h =  (SYS_BATCHPROC_STRUCT_H *)calloc(1,sizeof(SYS_BATCHPROC_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_sys_batchproc_struct_h);
memset(l_sys_batchproc_struct_h,NULL,sizeof(SYS_BATCHPROC_STRUCT_H));
int_ret_val = Populate_SYS_BATCHPROC(l_sys_batchproc_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdSYS_BATCHPROC\n",NULL,NULL);
if((MT_UpdSYS_BATCHPROC(l_sys_batchproc_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdSYS_BATCHPROCSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdSYS_BATCHPROCFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_sys_batchproc_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_SYS_BATCHSTREAM") == 0)
{
INTL_WARNING;
l_sys_batchstream_struct_h =  (SYS_BATCHSTREAM_STRUCT_H *)calloc(1,sizeof(SYS_BATCHSTREAM_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_sys_batchstream_struct_h);
memset(l_sys_batchstream_struct_h,NULL,sizeof(SYS_BATCHSTREAM_STRUCT_H));
int_ret_val = Populate_SYS_BATCHSTREAM(l_sys_batchstream_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdSYS_BATCHSTREAM\n",NULL,NULL);
if((MT_UpdSYS_BATCHSTREAM(l_sys_batchstream_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdSYS_BATCHSTREAMSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdSYS_BATCHSTREAMFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_sys_batchstream_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_SYS_BATCH_CNTRL") == 0)
{
INTL_WARNING;
l_sys_batch_cntrl_struct_h =  (SYS_BATCH_CNTRL_STRUCT_H *)calloc(1,sizeof(SYS_BATCH_CNTRL_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_sys_batch_cntrl_struct_h);
memset(l_sys_batch_cntrl_struct_h,NULL,sizeof(SYS_BATCH_CNTRL_STRUCT_H));
int_ret_val = Populate_SYS_BATCH_CNTRL(l_sys_batch_cntrl_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdSYS_BATCH_CNTRL\n",NULL,NULL);
if((MT_UpdSYS_BATCH_CNTRL(l_sys_batch_cntrl_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdSYS_BATCH_CNTRLSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdSYS_BATCH_CNTRLFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_sys_batch_cntrl_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_SYS_IVCONTROLPARAM") == 0)
{
INTL_WARNING;
l_sys_ivcontrolparam_struct_h =  (SYS_IVCONTROLPARAM_STRUCT_H *)calloc(1,sizeof(SYS_IVCONTROLPARAM_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_sys_ivcontrolparam_struct_h);
memset(l_sys_ivcontrolparam_struct_h,NULL,sizeof(SYS_IVCONTROLPARAM_STRUCT_H));
int_ret_val = Populate_SYS_IVCONTROLPARAM(l_sys_ivcontrolparam_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdSYS_IVCONTROLPARAM\n",NULL,NULL);
if((MT_UpdSYS_IVCONTROLPARAM(l_sys_ivcontrolparam_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdSYS_IVCONTROLPARAMSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdSYS_IVCONTROLPARAMFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_sys_ivcontrolparam_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_TEMP12") == 0)
{
INTL_WARNING;
l_temp12_struct_h =  (TEMP12_STRUCT_H *)calloc(1,sizeof(TEMP12_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_temp12_struct_h);
memset(l_temp12_struct_h,NULL,sizeof(TEMP12_STRUCT_H));
int_ret_val = Populate_TEMP12(l_temp12_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdTEMP12\n",NULL,NULL);
if((MT_UpdTEMP12(l_temp12_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdTEMP12SUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdTEMP12FAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_temp12_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_TT") == 0)
{
INTL_WARNING;
l_tt_struct_h =  (TT_STRUCT_H *)calloc(1,sizeof(TT_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_tt_struct_h);
memset(l_tt_struct_h,NULL,sizeof(TT_STRUCT_H));
int_ret_val = Populate_TT(l_tt_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdTT\n",NULL,NULL);
if((MT_UpdTT(l_tt_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdTTSUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdTTFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_tt_struct_h);
}







else if (strcmp(l_request_mt -> h_proc_name,"wrp_YEARLY_AE") == 0)
{
INTL_WARNING;
l_yearly_ae_struct_h =  (YEARLY_AE_STRUCT_H *)calloc(1,sizeof(YEARLY_AE_STRUCT_H));
APL_MALLOC_FAIL_LOC_A(l_yearly_ae_struct_h);
memset(l_yearly_ae_struct_h,NULL,sizeof(YEARLY_AE_STRUCT_H));
int_ret_val = Populate_YEARLY_AE(l_yearly_ae_struct_h,l_request_mt -> h_proc_data);
CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_UpdYEARLY_AE\n",NULL,NULL);
if((MT_UpdYEARLY_AE(l_yearly_ae_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR)) 
{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdYEARLY_AESUCCESS \n",NULL,NULL);
int_ret_val = Batch_Proc_MarkSuccessProcess(l_rowid,chr_h_error_desc);}
else
{CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdYEARLY_AEFAILURE \n",NULL,NULL);
int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
}
APL_FREE(l_yearly_ae_struct_h);
}










else
      {
			INTL_WARNING
         int_ret_val = CO_InsertErr(l_debug_info_ptr,
                                    FUNC_NF,
                                    APL_NULL_STRING,
                                    APL_NULL_STRING,
                                    APL_NULL_STRING,
                                    __LINE__,
                                    __FILE__);
         int_ret_val = Proc_MarkFailProcess(l_rowid, l_debug_info_ptr);
      }
		CO_FreeErrLst(l_debug_info_ptr);
	}
   APL_GOBACK_SUCCESS;
RETURN_SUCCESS:
   EXEC SQL COMMIT ;
    CO_ProcMonitor(APL_OUT_FILE,"Exiting successfully  out of Maintenance Daemon\n",l_debug_info_ptr,NULL);
    exit(0);
RETURN_FAILURE:
   EXEC SQL ROLLBACK;
    CO_ProcMonitor(APL_OUT_FILE,"Exiting unsuccesfully out of Maintenance Daemon\n",NULL,NULL);
    exit(-1);
}
int Batch_Proc_MarkSuccessProcess(char *p_ora_rowid,char *p_return_value)
{
	EXEC SQL UPDATE PRO_REQUEST_MT set STATUS = '2',ERROR_DET='SUCCESS'||:p_return_value
	where rowid=:p_ora_rowid;
	IS_ANY_ORA_ERROR;
	EXEC SQL COMMIT ;
	IS_ANY_ORA_ERROR;
	S_NON_DCE_ERASE_DUMMY_WARNING;
RETURN_SUCCESS :
	return(APL_SUCCESS);
RETURN_FAILURE :
	return(APL_FAILURE);
}
int Proc_MarkFailProcess(char *p_ora_rowid, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   short int_ret_val  =  0;
   EXEC SQL ROLLBACK ;
   IS_ANY_ORA_ERROR;
   int_ret_val = APL_FAILURE;
   S_NON_DCE_ERASE_DUMMY_WARNING;
   int_ret_val = CO_Rtv_ErrString(l_debug_info_ptr,l_request_mt -> h_error_det );
   if(strlen(l_request_mt -> h_error_det )>0)
   {
     EXEC SQL update  PRO_REQUEST_MT set STATUS = '3',ERROR_DET=:l_request_mt -> h_error_det
					      where rowid=:p_ora_rowid;
   }
   else
   {
     EXEC SQL update  PRO_REQUEST_MT set STATUS = '2',ERROR_DET='SUCCESS'
					      where rowid=:p_ora_rowid;
   }
  IS_ANY_ORA_ERROR;
   EXEC SQL COMMIT;
   IS_ANY_ORA_ERROR;
   S_NON_DCE_ERASE_DUMMY_WARNING;
RETURN_SUCCESS :
   return(APL_SUCCESS);
RETURN_FAILURE :
   return(APL_FAILURE);
}
