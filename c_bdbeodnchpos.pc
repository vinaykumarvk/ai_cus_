

      
   
 
 
 
 
 
 
 
 
 
 
 
 


 

#include  <stdlib.h>
#include  <string.h>
#include  <CO_HostStructdef.h>
#define APL_SECTRCODE_LEN       4
/* OPT:AIX */
#ifdef APL_ISIN_LEN
#undef APL_ISIN_LEN
#endif
#define APL_ISIN_LEN           13
#define APL_INSTRUDESCR_LEN       41
#define APL_SYSDATE_LEN         9 
#define APL_BUSSDATE_LEN       11
#define APL_CHAREORM_LEN        2
#define APL_QTY_CUS_LEN        15
#define APL_FILE_NAME_LENGTH      12 
#define APL_REMDIGITS_LENGTH       6

#define APL_SECT_LEN				  2
#define APL_CHAR_ADD 			200
#define APL_CHAR_REPEAT 	    40	


EXEC SQL INCLUDE sqlca;

//main(int argc , char **argv ) 
int main(int argc,char **argv)//Changes done for AIX Migration
{
  struct sqlca sqlca ; 
  DEBUG_INFO_STRUCT_H              *l_debug_info_ptr = NULL  ; 
  INTL_ENV_DATA_STRUCT_H        l_intl_env_data_h ; 
  FILE						    *l_finifile   = NULL ;
  FILE						    *l_logfile    = NULL ;
  int			       			 int_l_int_num     = 0 ;
  int 						    int_l_flg         = 0 ;
  int 				  			 int_l_int_retval  = 0 ;
  char			    			 **chr_l_str_parm  = NULL ; 	
  char			             chr_uname[APL_USERID_LEN]  = APL_NULL_STRING ;
  char 			             chr_custody_id_b[APL_USERID_LEN] = APL_NULL_STRING ; 
  char			     			 chr_passwd[APL_PASSWD_LEN] = APL_NULL_STRING ;
  char 			             chr_l_inifile[PATH_LENGTH] = APL_NULL_STRING ;
  char 			             chr_l_logdir[PATH_LENGTH]  = APL_NULL_STRING ; 
  char							 chr_l_buf[BUFFER_LEN]       = APL_NULL_STRING ;

  EXEC SQL VAR chr_uname  IS STRING;
  EXEC SQL VAR chr_passwd IS STRING;
  
  memset(&l_intl_env_data_h , NULL , sizeof(INTL_ENV_DATA_STRUCT_H)) ;
	
	l_debug_info_ptr = (DEBUG_INFO_STRUCT_H *)calloc(1,sizeof(DEBUG_INFO_STRUCT_H));

  
 
  strcpy(l_intl_env_data_h.usr   ,argv[3]);
  strcpy(l_intl_env_data_h.h_mode     ,argv[4]);
  strcpy(l_intl_env_data_h.processtion ,argv[5]);
  strcpy(l_intl_env_data_h.auth_req ,argv[6]);
  strcpy(l_intl_env_data_h.subprocess   ,argv[7]);
  strcpy(l_intl_env_data_h.h_process   ,argv[8]);
 
  strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
  strcat(chr_l_inifile,"intl_sun.cfg");


  if ((l_finifile = fopen(chr_l_inifile,"r")) == NULL ) 
   return(-1); 


  

  APL_FETCH_DB_LOGIN_DETAILS(l_finifile , chr_custody_id_b , chr_uname , chr_passwd , APL_OUT_FILE , &l_debug_info_ptr )
 
  
  
  if(CO_DB_Connection_K(chr_uname,chr_passwd,&l_debug_info_ptr)!=APL_SUCCESS) 
    APL_GOBACK_FAIL
 
  

  if(APL_FAILURE == CO_Rtv_RptFileName("3h" , 
  				APL_LOGFILE_DESC ,
				100 , 
				argv[5] ,
				argv ,
				&l_logfile , 
				&l_debug_info_ptr) )
  {
   EXEC SQL ROLLBACK WORK RELEASE ; 
   APL_GOBACK_FAIL 
  }

  
  
   EXEC SQL COMMIT WORK ;

   if(sqlca.sqlcode)
   {
     CO_Proc_RptClose(l_logfile,&l_debug_info_ptr);
	  APL_GOBACK_FAIL
   }

   CO_ProcMonitor(l_logfile , "\nNational Clearing House , Hungary : Report Generation\n",NULL,NULL);
   CO_ProcMonitor(l_logfile , "-----------------------------------------------------\n",NULL,NULL);
   CO_ProcMonitor(l_logfile , "Work Committed After LogFile Creation\n",NULL,NULL);

   if(CO_RtvSysParams(&l_debug_info_ptr) != APL_SUCCESS )
  	{
    CO_ProcMonitor(l_logfile , "Unable to get the system parameters : Rollback Done \n",NULL,&l_intl_env_data_h);
    CO_Proc_RptClose(l_logfile,&l_debug_info_ptr) 	;
    EXEC SQL ROLLBACK WORK RELEASE ; 
    APL_GOBACK_FAIL
   }

   int_l_int_retval = CO_Proc_BtchLock(argv,l_logfile,&l_debug_info_ptr) ;

   if(int_l_int_retval != APL_SUCCESS)
    {
     CO_ProcMonitor(l_logfile, "Unable to lock BATCH_IN_PROC record - Rollback Done \n",NULL, &l_intl_env_data_h) ;
     CO_Proc_RptClose(l_logfile,&l_debug_info_ptr);
     EXEC SQL ROLLBACK WORK RELEASE;
     APL_GOBACK_FAIL
    }

  
  
  CO_ProcMonitor(l_logfile,"\nString Split processtion called\n",NULL,NULL);
  
  if(APL_FAILURE == CO_SplitStr(argv[9],'|',&int_l_int_num,&chr_l_str_parm))    
  {
   CO_ProcMonitor(l_logfile,"String Split Function failed\n",NULL,NULL);
   CO_Proc_RptClose(l_logfile,&l_debug_info_ptr);
   APL_GOBACK_FAIL
  }
  
 if( int_l_int_num==0 )
  {
  CO_ProcMonitor(l_logfile,"There were no params.Mandatory data missing\n",NULL,NULL);
  CO_Proc_RptClose(l_logfile,&l_debug_info_ptr);
  APL_GOBACK_FAIL
  }

  if(strcmp(chr_l_str_parm[1],"E")!=0 && strcmp(chr_l_str_parm[1],"M")!=0 )
  {
   CO_ProcMonitor(l_logfile,"Invalid Data for the second parameter:should be 'E' or 'M'\n",NULL,NULL);
   CO_ProcMonitor(l_logfile,"Unsuccessful in Main\n",NULL,NULL);
   CO_Proc_RptClose(l_logfile,&l_debug_info_ptr);
   APL_GOBACK_FAIL
  }


  if(strlen(chr_l_str_parm[0])!=8) 
  {
   CO_ProcMonitor(l_logfile,"Invalid Data for the int_first parameter:Business chr_date\n",NULL,NULL);
   CO_ProcMonitor(l_logfile,"Unsuccessful in Main\n",NULL,NULL);
   CO_Proc_RptClose(l_logfile,&l_debug_info_ptr);
   APL_GOBACK_FAIL
  }

   
  if(CO_ReadToken(l_finifile,"INTL_HF_PATH",chr_l_str_parm[2],&l_debug_info_ptr) != APL_SUCCESS)
   {
   CO_ProcMonitor(l_logfile,"Unable To Get The HandOff Dir\n",NULL,NULL);
   CO_ProcMonitor(l_logfile,"Unsuccessful in Main\n",NULL,NULL);
   CO_Proc_RptClose(l_logfile,&l_debug_info_ptr);
   APL_GOBACK_FAIL
  }
 
  fprintf(l_logfile,"Parameters Receieved From The Front End\n");
  fprintf(l_logfile,"l_str_parm[0]  = (%s)\n",  chr_l_str_parm[0] );
  fprintf(l_logfile,"l_str_parm[1]  = (%s)\n",  chr_l_str_parm[1] );
  fprintf(l_logfile,"l_str_parm[2]  = (%s)\n",  chr_l_str_parm[2] );

  if(APL_FAILURE == CO_RtvSysParams(&l_debug_info_ptr))
  {
   CO_ProcMonitor(l_logfile,"Failed to get System Parameters\n",NULL,NULL);
   CO_Proc_RptClose(l_logfile,&l_debug_info_ptr);
   APL_GOBACK_FAIL
  }
	
  CO_ProcMonitor(l_logfile,  "Successfully got System Parameters\n",NULL,NULL);

  int_l_int_retval = CO_Proc_BtchLock(argv,l_logfile,&l_debug_info_ptr)	;
  
  if (int_l_int_retval != APL_SUCCESS)
   { 
      CO_ProcMonitor(l_logfile,"Unable to lock BATCH_IN_PROC record - Rollback done \n",NULL,&l_intl_env_data_h);
      CO_Proc_RptClose(l_logfile,&l_debug_info_ptr);
      EXEC SQL ROLLBACK WORK RELEASE;
      APL_GOBACK_FAIL
   } 


  CO_ProcMonitor( l_logfile,   "Call the MT_Proc_NClhRpt processtion\n",NULL,NULL); 
    
   if(MT_Proc_NClhRpt(argv,l_logfile,chr_l_str_parm,&l_intl_env_data_h,l_debug_info_ptr)==APL_FAILURE)
   {
    int_l_flg = 1 ;
   /* OPT:AIX  
    CO_Proc_Exit(argv,l_logfile,&l_intl_env_data_h,int_l_flg) ; */
    CO_Proc_Exit(argv,l_logfile,&l_debug_info_ptr,int_l_flg) ;

    if(CO_ChkErr(l_debug_info_ptr)==APL_SUCCESS)
    {
     
     CO_ProcMonitor(l_logfile,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_env_data_h) ;
     CO_FreeErrLst(&l_debug_info_ptr);
    }

     CO_ProcMonitor(l_logfile,"Unsuccessful in MT_Proc_NClhRpt processtion \n",NULL,NULL);
     CO_Proc_RptClose(l_logfile,&l_debug_info_ptr);
     APL_GOBACK_FAIL
   }
   else
   {
    int_l_flg = 0 ;
    CO_Proc_Exit(argv,l_logfile,&l_debug_info_ptr,int_l_flg);

    if(CO_ChkErr(l_debug_info_ptr)==APL_SUCCESS)
    {
     
     CO_ProcMonitor(l_logfile,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_env_data_h) ;
     CO_FreeErrLst(&l_debug_info_ptr);
    }

   CO_ProcMonitor(l_logfile,"Record Commited.\nRep_NCH_HunFn Successful ,Exiting From main.\n",NULL,NULL);
   CO_Proc_RptClose(l_logfile,&l_debug_info_ptr);
   APL_GOBACK_SUCCESS
  }

 
   

   RETURN_SUCCESS : 
    {
     fclose(l_finifile) ; 
     return(0) ; 
    } 
   RETURN_FAILURE : 
    {
     fclose(l_finifile);
     return(-1) ;		
    }
}




int MT_Proc_NClhRpt(char **argv,FILE *p_logfile,char **p_str_parm,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
  double l_quantity_all_cus   = 0.0 , l_quantity_for_cus  = 0.0 , l_quantity_all_cus1 = 0.0 , l_quantity_for_cus1 = 0.0 ; 
  double l_h_safekeep_pos       = 0.0 ;
  double l_h_nominal_value                        = 0.0;
  char  chr_l_h_client_a[APL_CLIENT_LENGTH]       = APL_NULL_STRING;   
  char  chr_l_h_domicile ;
  char  chr_l_str_sect[APL_SECT_LEN]           = APL_NULL_STRING ;
  char  chr_l_str_add[APL_CHAR_ADD]            = APL_NULL_STRING ;
  char  chr_l_str_repeat[APL_CHAR_REPEAT + 2000]      = APL_NULL_STRING ; 
  char  chr_l_h_sectrcode[APL_SECTRCODE_LEN]   = APL_NULL_STRING ; 
  char  chr_l_h_isin[APL_ISIN_LEN]             = APL_NULL_STRING ;
  char  chr_l_h_instrdesc[APL_INSTRUDESCR_LEN]      = APL_NULL_STRING ; 
  char  chr_l_h_instrcode_A[APL_INSTRUMENTCODE_LEN]         = APL_NULL_STRING ; 
  char  chr_l_h_sys_date[APL_SYSDATE_LEN]      = APL_NULL_STRING ;
  char  chr_l_ch_digit1 ; 
  char  chr_l_ch_digit2 ;
  char  chr_l_ch_digit3 ;
  char  chr_l_str_remdigits[APL_REMDIGITS_LENGTH]  = APL_NULL_STRING ;
  char  chr_l_str_rep_path[PATH_LENGTH]    = APL_NULL_STRING ;
  char  chr_l_chareom[APL_CHAREORM_LEN]         = APL_NULL_STRING ; 
  char  chr_l_c_qty_all_cus[APL_QTY_CUS_LEN]    = APL_NULL_STRING ;
  char  chr_l_c_qty_for_cus[APL_QTY_CUS_LEN]    = APL_NULL_STRING ;
  char  chr_l_str_filename[APL_FILE_NAME_LENGTH]   = APL_NULL_STRING ;  	
  FILE  *l_ptr_fopenfile  = NULL ; 

  INTL_REPT_STRUCT_H *l_intl_rept_struct_ha = NULL;

  short l_i_instr_code    = 0 ;
  short l_i_instr_name   = 0 ;
  short l_i_sectrcode = 0 ;
  short int_l_i_isin      = 0 ; 
  short l_i_account   = 0 ; 
  short l_i_nomval    = 0 ;
  short l_i_safek     = 0 ; 
  short l_i_domicile  = 0 ;
  short l_i_sys_date  = 0 ;

  EXEC SQL VAR chr_l_h_sys_date IS STRING ;
  EXEC SQL VAR chr_l_h_instrcode_A   IS STRING ; 
  EXEC SQL VAR chr_l_h_client_a  IS STRING ;
   
  fprintf(p_logfile , "Entered processtion MT_Proc_NClhRpt\n");
  
  strcpy(chr_l_chareom,p_str_parm[1]);
  strcpy(chr_l_str_rep_path,p_str_parm[2]);
  strcpy(chr_l_str_filename,"E03");
  
  sscanf(p_str_parm[0],"%c%c%c%s",&chr_l_ch_digit1,&chr_l_ch_digit2,&chr_l_ch_digit3,chr_l_str_remdigits);  //AIX warnings Removal

  strcat(chr_l_str_filename,chr_l_str_remdigits);
  
  EXEC SQL SELECT TO_CHAR(SYS_DATE,'YYYYMMDD') INTO :chr_l_h_sys_date:l_i_sys_date 
  FROM PRO_SYS_DATE ;
  
  IS_ANY_ORA_ERROR
 
  if (APL_ZERO_RESULT_SET)  
   APL_GOBACK_FAIL
 
  fprintf(p_logfile, "Path of h_file  = %s\n",p_str_parm[2]); 
  fprintf(p_logfile, "Name of h_file  = %s\n",chr_l_str_filename); 
 	
  l_intl_rept_struct_ha = (INTL_REPT_STRUCT_H *)calloc(1, sizeof(INTL_REPT_STRUCT_H));
  APL_MALLOC_FAIL(l_intl_rept_struct_ha) ; 

  strcpy(l_intl_rept_struct_ha->report_name, chr_l_str_filename);
  strcpy(l_intl_rept_struct_ha->report_desc, APL_HOFF_FILE_DESC);
  strcpy(l_intl_rept_struct_ha->report_date, argv[2]);
  l_intl_rept_struct_ha->report_width = 100 ;
  strcpy(l_intl_rept_struct_ha->task_desc, argv[5]); 
  strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
  strcpy(l_intl_rept_struct_ha->usr, argv[3]);


 if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha,
                                  l_debug_info_ptr ))
  {
     APL_GOBACK_FAIL
  }


  if((l_ptr_fopenfile = fopen(strcat(p_str_parm[2],chr_l_str_filename),"w")) == NULL ) 
  {
   fprintf(p_logfile,"Error Opening the h_file into which the records are to be written\n");
   APL_GOBACK_FAIL
  }

  strcpy(chr_l_str_add,"E03,");
  strcat(chr_l_str_add,p_str_parm[0]);
  strcat(chr_l_str_add,",");
  strcat(chr_l_str_add,"10197178,");
  strcat(chr_l_str_add,chr_l_h_sys_date);
  strcat(chr_l_str_add,",");
  strcat(chr_l_str_add,chr_l_chareom);
  strcat(chr_l_str_add,",");
  strcat(chr_l_str_add,"01");
  strcat(chr_l_str_add,",");
  strcpy(chr_l_str_repeat,chr_l_str_add); 

 
  EXEC SQL DECLARE csec CURSOR FOR
  SELECT SEC_DL_CODE,INSTR_ISIN, REPLACE(REPLACE(SUBSTR(INSTR_NAME,1,40),CHR(13),' '),chr(10)),INSTR_CODE,NVL(NOMINAL_VALUE,0)
  FROM MT_INSTRUMENT WHERE SEC_DL_CODE <> '999' ; 

  IS_ANY_ORA_ERROR 

  EXEC SQL OPEN csec;
  
  IS_ANY_ORA_ERROR

  for( ; ; )
  {
	memset(chr_l_str_add,APL_NULL_CHAR,APL_CHAR_ADD); 
	printf("\n\n chr_l_str_add |%s|%d|\n",chr_l_str_add,(int)strlen(chr_l_str_add)); //AIX -Warning Removal
	printf("\n\n chr_l_str_repeat |%s|%d|\n",chr_l_str_repeat,(int)strlen(chr_l_str_repeat));  //AIX warnings Removal
   strcpy(chr_l_str_add,chr_l_str_repeat);
 
   l_h_nominal_value      = 0.0; 
   l_quantity_all_cus   = 0.0;
   l_quantity_for_cus   = 0.0;


   EXEC SQL FETCH csec INTO
  :chr_l_h_sectrcode:l_i_sectrcode,:chr_l_h_isin:int_l_i_isin,:chr_l_h_instrdesc:l_i_instr_name,
  :chr_l_h_instrcode_A:l_i_instr_code,:l_h_nominal_value:l_i_nomval ;

   IS_ANY_ORA_ERROR 

   if(APL_ZERO_RESULT_SET) 
    break;

   if(strcmp(chr_l_h_sectrcode,"553")==0)
     strcpy(chr_l_str_sect,"A");
   else if(strcmp(chr_l_h_sectrcode,"573")==0)
     strcpy(chr_l_str_sect,"K");
   else
     strcpy(chr_l_str_sect,"E");
 
   strcat(chr_l_str_add,chr_l_h_isin);
   strcat(chr_l_str_add,",");
   strcat(chr_l_str_add,"\"");
   strcat(chr_l_str_add,chr_l_h_instrdesc);
   strcat(chr_l_str_add,"\"");
   strcat(chr_l_str_add,",");
   strcat(chr_l_str_add,chr_l_str_sect);  
   strcat(chr_l_str_add,",");

   EXEC SQL DECLARE csafek1  CURSOR FOR 
   SELECT NVL(SAFEKEEP_POS,0) , CLIENT FROM DL_SAFEK 
   WHERE INSTR_CODE = :chr_l_h_instrcode_A  ; 
   

   IS_ANY_ORA_ERROR 

   EXEC SQL OPEN csafek1 ; 

   IS_ANY_ORA_ERROR ;      

   for( ; ; )
   {
     EXEC SQL FETCH csafek1  INTO :l_h_safekeep_pos:l_i_safek , :chr_l_h_client_a:l_i_account ;  
     
     IS_ANY_ORA_ERROR 

     if(l_i_safek == -1)
      l_h_safekeep_pos = 0.0 ;


     if(APL_ZERO_RESULT_SET)  break;

     l_quantity_all_cus += l_h_safekeep_pos * l_h_nominal_value ; 

     EXEC SQL SELECT CLN_DOMICILE INTO :chr_l_h_domicile:l_i_domicile FROM MT_CLIENT WHERE
     CLN_CODE = :chr_l_h_client_a ;

     IS_ANY_ORA_ERROR 


     if (chr_l_h_domicile=='2') 
      l_quantity_for_cus += l_h_safekeep_pos * l_h_nominal_value ;
    } 
     
     EXEC SQL CLOSE csafek1; 
 
     IS_ANY_ORA_ERROR 

      if (APL_FAILURE == CO_Round(l_quantity_all_cus,0,&l_quantity_all_cus1))
       {
 			APL_GOBACK_FAIL
 		 }
	

      if (APL_FAILURE == CO_Round(l_quantity_for_cus,0,&l_quantity_for_cus1))
      {
		  APL_GOBACK_FAIL
 		}

      sprintf(chr_l_c_qty_all_cus , "%014.0f",l_quantity_all_cus1);
      sprintf(chr_l_c_qty_for_cus , "%014.0f",l_quantity_for_cus1);

      strcat(chr_l_str_add,chr_l_c_qty_all_cus);
      strcat(chr_l_str_add,",") ;
      strcat(chr_l_str_add,chr_l_c_qty_for_cus);

     if(l_quantity_all_cus > 0.0 )
     {
      fprintf(l_ptr_fopenfile,chr_l_str_add);
      fprintf(l_ptr_fopenfile,"\n"); 
     }
   strcpy(chr_l_str_add,"");
  }

 
 
 fprintf(l_ptr_fopenfile,"\n");

 EXEC SQL CLOSE csec ; 

 IS_ANY_ORA_ERROR 

 fclose(l_ptr_fopenfile);

 APL_GOBACK_SUCCESS


  RETURN_SUCCESS :
        {
  					 CO_ProcMonitor(p_logfile,"Successful in MT_Proc_NClhRpt processtion\n",NULL,NULL);
                CO_ProcMonitor(p_logfile, "Errors if Any : ", l_debug_info_ptr, p_intl_envdatastruct_h);
                CO_FreeErrLst(l_debug_info_ptr);
                return(APL_SUCCESS);
        }

  RETURN_FAILURE :
        {
 				    CO_ProcMonitor(p_logfile,"Failed in MT_Proc_NClhRpt processtion\n",NULL,NULL);
                CO_ProcMonitor(p_logfile, "Errors if any: ", l_debug_info_ptr, p_intl_envdatastruct_h);
                CO_FreeErrLst(l_debug_info_ptr);
                return(APL_FAILURE);
        }
  
} 


  

int CO_DB_Connection_K(char *p_username,char *p_passwd,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
        struct sqlca                                    sqlca;

        sqlca.sqlcode = 0;

        CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CO_DB_Connection_K\n",NULL,NULL);

        EXEC SQL CONNECT :p_username IDENTIFIED BY :p_passwd;

        if (sqlca.sqlcode != 0)
                APL_GOBACK_FAIL

        APL_GOBACK_SUCCESS

        RETURN_SUCCESS :
        {
                CO_ProcMonitor(APL_OUT_FILE, "Leaving processtion CO_DB_Connection_K successfully \n",NULL,NULL);

                return(APL_SUCCESS);
        }

        RETURN_FAILURE :
        {
                CO_ProcMonitor(APL_OUT_FILE, "Leaving processtion CO_DB_Connection_K with failure \n",NULL,NULL);

                return(APL_FAILURE);
        }
}




  

 int CO_Proc_BtchLock(char **argv,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
   struct sqlca               sqlca;
		char l_temp_processing_status[51] = APL_NULL_STRING;
   sqlca.sqlcode = 0;

   CO_ProcMonitor(p_ptr_log_file,"Entered processtion CO_Proc_BtchLock\n",NULL,NULL);

   EXEC SQL SELECT processing_status into :l_temp_processing_status
   FROM SYS_BATCHPROC
   WHERE process_name = :argv[0]
   AND   proc_init = :argv[1]
   AND STARTDATE = :argv[2]
   AND status = 'started'
   FOR UPDATE OF processing_status,status;

   IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_BtchLock successfully \n",NULL,NULL);
      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_BtchLock with failure \n",NULL,NULL);
      return(APL_FAILURE);
   }
}




 


 int CO_Proc_Exit(char **argv,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr,int p_flg)
  {
    struct sqlca               sqlca;
    char                       chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;

    sqlca.sqlcode = 0;

    CO_ProcMonitor(p_ptr_log_file,"Entered processtion CO_Proc_Exit\n",NULL,NULL);
    if (p_flg == 0)
    {
       

       if (CO_ChkErr(*l_debug_info_ptr) != APL_SUCCESS)
       {
          memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
          sprintf(chr_l_buf,"Finished HandOff File Generation ");

          EXEC SQL UPDATE SYS_BATCHPROC
          SET stat_det = :chr_l_buf,
              status = 'completed'
          WHERE process_name = :argv[0]
          AND   proc_init = :argv[1]
          AND STARTDATE = :argv[2]
          AND status = 'started';

          IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

       }

       EXEC SQL COMMIT ;
       CO_ProcMonitor(p_ptr_log_file,"Work Committed \n",NULL,NULL);
    }
    else if (p_flg == 1)
    {
       EXEC SQL ROLLBACK ;
       CO_ProcMonitor(p_ptr_log_file,"Rollback done \n",NULL,NULL);
    }

    APL_GOBACK_SUCCESS
    RETURN_SUCCESS :
    {
       CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_Exit successfully \n",NULL,NULL);
       return(APL_SUCCESS);
    }

    RETURN_FAILURE :
    {
       CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_Exit with failure \n",NULL,NULL);
       return(APL_FAILURE);
    }
 }



