/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
*/
/*********************************************************************
 *
 * Module Name         :      Master Maintenance
 *
 * File Name           :      WI_DEAL.pc
 *
 * Description         :      This file contains db functions for updating
 *                            Master Details.
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author         Description       RFS No.
 * ---------   --------  ------------     -------------     ---------
 * 05/03/2007   1.0       AMITK        New file       WI_DEAL
 *
 *********************************************************************/

#include "Intellect_Interface.h"
#include "WI_Interface.h"

#define S_LEVEL_ZERO                                 0
#define S_LEVEL_ONE                                     1
#define S_LEVEL_TWO                                     2
#define S_LEVEL_THREE                           3

EXEC SQL INCLUDE SQLCA.H;

extern char dbdesc[] ;


int WI_ModDbWI_DEAL(WI_DEAL_STRUCT_H *p_wi_deal_struct_h,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr) 
{
	/* Variable Declarations */
  WI_DEAL_STRUCT_I *l_wi_deal_struct_i;

  struct sqlca sqlca;

  char chr_acc_stamp_compare[APL_DATE_LEN] = APL_NULL_STRING;
  char chr_DEAL_STAT_compare[APL_STATUS_LEN] = APL_NULL_STRING;
  char chr_sys_access_stamp[APL_DATE_LEN] = APL_NULL_STRING;
  char temp_auth[2] = APL_NULL_STRING;
  char l_deal_date[11] = APL_NULL_STRING; //12174
  char l_deal_stat[3] = APL_NULL_STRING; // Added by Kalyan for ISKB-488
  short p_i_maker, p_i_makerdt, p_i_checker, p_i_checkerdt, p_i_access_stamp;
  short p_i_access_stamp_compare;
  short p_i_DEAL_STAT = 0;
  int int_error_flag = APL_SUCCESS;
  int int_l_rowexists = 0;
  int l_mkt_type_cnt = 0; // Added By Kalyan --10/05/2007 
   char  *l_key_codes[3];
   char  *l_key_values[3];
   char  chr_l_table_name[50] = APL_NULL_STRING;
	  char  chr_l_field_val[40] = APL_NULL_STRING;

		int	int_retval = APL_SUCCESS;
  char 	l_t_cln_code[21];//Kalyan
  char 	l_t_cln_master[21];//Kalyan
  char  chr_interop_det [25] = APL_NULL_STRING; //12174
  int 	l_t_mastcount; // Kalyan

  char	l_t_instr_name[131];// Kalyan 050607



  EXEC SQL VAR l_t_cln_code IS STRING; //Kalyan
  EXEC SQL VAR l_t_cln_master IS STRING; //Kalyan
  EXEC SQL VAR chr_interop_det IS STRING; //12174

  EXEC SQL BEGIN DECLARE SECTION;
  EXEC SQL VAR temp_auth IS STRING;
  EXEC SQL VAR l_deal_stat IS STRING;   // Added by Kalyan for ISKB-488
  EXEC SQL END DECLARE SECTION;
#ifdef APL_THREADS
    APL_SET_CONTEXT
    EXEC SQL CONTEXT USE :my_ctx_local;
#endif

	 APL_FUNCTION_ENTER(APL_OUT_FILE)

  l_wi_deal_struct_i=(WI_DEAL_STRUCT_I*)calloc(1,sizeof(WI_DEAL_STRUCT_I));

  APL_MALLOC_FAIL(l_wi_deal_struct_i)

  p_i_maker =0;
  p_i_makerdt =0;
  p_i_checker =0;
  p_i_checkerdt =0;
  p_i_access_stamp =0;
  p_i_access_stamp_compare =0;

	memset(l_deal_date,APL_NULL_CHAR, sizeof(l_deal_date));//12174

        if(!strlen(p_wi_deal_struct_h ->h_client))  
        l_wi_deal_struct_i -> i_client= -1;
        else
                l_wi_deal_struct_i -> i_client= 0;
        if(!strlen(p_wi_deal_struct_h ->h_identiy_no))  
        l_wi_deal_struct_i -> i_identiy_no= -1;
        else
                l_wi_deal_struct_i -> i_identiy_no= 0;
        if(!strlen(p_wi_deal_struct_h ->h_deal_cd))  l_wi_deal_struct_i -> i_deal_cd= -1;
        else
                l_wi_deal_struct_i -> i_deal_cd= 0;
        if(!strlen(p_wi_deal_struct_h ->h_instr_code))  l_wi_deal_struct_i -> i_instr_code= -1;
        else
                l_wi_deal_struct_i -> i_instr_code= 0;
        if(!strlen(p_wi_deal_struct_h ->h_instr_name))  l_wi_deal_struct_i -> i_instr_name= -1;
        else
                l_wi_deal_struct_i -> i_instr_name= 0;

        if(!strlen(p_wi_deal_struct_h ->h_exch_code))  l_wi_deal_struct_i -> i_exch_code= -1;
        else
                l_wi_deal_struct_i -> i_exch_code= 0;
        if(!strlen(p_wi_deal_struct_h ->h_deal_date)) l_wi_deal_struct_i -> i_deal_date= -1;
        else
                l_wi_deal_struct_i -> i_deal_date= 0;

        if(!strlen(p_wi_deal_struct_h ->h_setl_date)) l_wi_deal_struct_i -> i_setl_date= -1;
        else
                l_wi_deal_struct_i -> i_setl_date= 0;

        if(!strlen(p_wi_deal_struct_h ->h_mkt_type))  l_wi_deal_struct_i -> i_mkt_type= -1;
        else
                l_wi_deal_struct_i -> i_mkt_type= 0;

        if(!strlen(p_wi_deal_struct_h ->h_domestic_cpclt))  l_wi_deal_struct_i -> i_domestic_cpclt= -1;
        else
                l_wi_deal_struct_i -> i_domestic_cpclt= 0;
        if(!strlen(p_wi_deal_struct_h ->h_domestic_cpclt_name))  l_wi_deal_struct_i -> i_domestic_cpclt_name= -1;
        else
                l_wi_deal_struct_i -> i_domestic_cpclt_name= 0;
        if(!strlen(p_wi_deal_struct_h ->h_clh_flag))  l_wi_deal_struct_i -> i_clh_flag= -1;
        else
                l_wi_deal_struct_i -> i_clh_flag= 0;
        if(!strlen(p_wi_deal_struct_h ->h_fx_reqd))  l_wi_deal_struct_i -> i_fx_reqd= -1;
        else
                l_wi_deal_struct_i -> i_fx_reqd= 0;
        if(!strlen(p_wi_deal_struct_h ->h_maker))  l_wi_deal_struct_i -> i_maker= -1;
        else
                l_wi_deal_struct_i -> i_maker= 0;
        if(!strlen(p_wi_deal_struct_h ->h_maker_dt)) l_wi_deal_struct_i -> i_maker_dt= -1;
        else
                l_wi_deal_struct_i -> i_maker_dt= 0;
        if(!strlen(p_wi_deal_struct_h ->h_checker))  l_wi_deal_struct_i -> i_checker= -1;
        else
                l_wi_deal_struct_i -> i_checker= 0;
        if(!strlen(p_wi_deal_struct_h ->h_checker_dt)) l_wi_deal_struct_i -> i_checker_dt= -1;
        else
                l_wi_deal_struct_i -> i_checker_dt= 0;
        if(!strlen(p_wi_deal_struct_h ->h_deal_stat))  l_wi_deal_struct_i -> i_deal_stat= -1;
        else
                l_wi_deal_struct_i -> i_deal_stat= 0;
        if(!strlen(p_wi_deal_struct_h ->h_proc_flag))  l_wi_deal_struct_i -> i_proc_flag= -1;
        else
                l_wi_deal_struct_i -> i_proc_flag= 0;
        if(!strlen(p_wi_deal_struct_h ->h_access_stamp)) l_wi_deal_struct_i -> i_access_stamp= -1;
        else
                l_wi_deal_struct_i -> i_access_stamp= 0;

   if(CO_RtvSysDtTime(chr_sys_access_stamp,l_debug_info_ptr) !=APL_SUCCESS)
	{
		APL_GOBACK_FAIL
	}
	
 /*if(CO_RtvMachDtTime(chr_sys_access_stamp,l_debug_info_ptr) !=APL_SUCCESS)
	{
		APL_GOBACK_FAIL
	}*/
	
 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_INPUT))
	{

		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered Input of Function WI_ModDbWI_DEAL\n",
													NULL,p_intl_envdatastruct_h);
 	}

		/* Kalyan -- Changes Done for Client Validations*/
	
		printf("KS -- Now Going for Client Validation \n");
	
		/* Changes Made By Dnyanesh Kotak Web UAT - Multiple Logins Operating Same Safekeeping Account */	
		EXEC SQL SELECT 
				DISTINCT CLN_CODE ,
					 CLN_MASTER
			INTO
				:l_t_cln_code,
				:l_t_cln_master
			FROM 
				WI_CLIENT_MAP 
			WHERE
				WI_LOGIN = :p_intl_envdatastruct_h->usr;

		IS_ANY_ORA_ERROR;

		if (strcmp(p_wi_deal_struct_h ->h_client,l_t_cln_code)!=0)
		{
			printf("KS -- CLN CODE check failed .... Going for Master Check\n");

			if(strcmp(l_t_cln_code,l_t_cln_master)==0)
			{
				EXEC SQL SELECT
						COUNT(*) 
					 INTO
						:l_t_mastcount
					 FROM
						MT_CLIENT
					 WHERE
						CLN_CODE=:p_wi_deal_struct_h ->h_client AND
						CLN_MASTER =:l_t_cln_code;
				IS_ANY_ORA_ERROR;
	
				if(l_t_mastcount == 0)
				{
					printf("KS -- Master Check also Failed ....\n");
					if (CO_InsertErr(l_debug_info_ptr,
                         			ERR_INP_CLIENT_NOT_VALID,
                         			APL_NULL_STRING,
                         			APL_NULL_STRING,
                         			APL_NULL_STRING,
                         			__LINE__,
                         			__FILE__
                        			) != APL_SUCCESS)
                        			APL_GOBACK_FAIL

         				APL_GOBACK_FAIL
				}
			printf("KS -- Master Check Successful \n");
			}
			else
			{

				printf("KS -- This Client is not a Master Client ... Master Check also Failed ...\n");
		        	if (CO_InsertErr(l_debug_info_ptr,
                                                ERR_INP_CLIENT_NOT_VALID,
                                                APL_NULL_STRING,
                                                APL_NULL_STRING,
                                                APL_NULL_STRING,
                                                __LINE__,
                                                __FILE__
                                                ) != APL_SUCCESS)
                                                APL_GOBACK_FAIL
                        	APL_GOBACK_FAIL
			}

		}
		printf("KS -- Client Validation Successful \n");

		/* Kalyan -- Changes Till Here */

        	/* Changes Added By Kalyan for log 130 -- Check the length of reference no before insertion(30/04/2007) */

        	if(strlen(p_wi_deal_struct_h -> h_identiy_no)>(WI_IDENTIY_NO_LEN-1))
        	{

                	printf("KS -- Deal Refernce No length is Greater than 16  .... Failed \n");
                	if (CO_InsertErr(l_debug_info_ptr,
                        	ERR_IDENTY_NO_LEN_MORE,
                        	APL_NULL_STRING,
                        	APL_NULL_STRING,
                        	APL_NULL_STRING,
                        	__LINE__,
                        	__FILE__
                        	) != APL_SUCCESS)
                        	APL_GOBACK_FAIL

               		//APL_GOBACK_FAIL
        	}
        	//if(strlen(p_wi_deal_struct_h -> h_deal_cd)>(WI_DEAL_CD_LEN-1)) Commented By Kalyan
		if((strcmp(p_wi_deal_struct_h -> h_deal_cd,"1") != 0)&&
			(strcmp(p_wi_deal_struct_h -> h_deal_cd,"2") != 0)&&
			(strcmp(p_wi_deal_struct_h -> h_deal_cd,"3") != 0)&&
			(strcmp(p_wi_deal_struct_h -> h_deal_cd,"4") != 0))
        	{
                	printf("KS -- Deal Code is Incorrect  .... Failed \n");
                	if (CO_InsertErr(l_debug_info_ptr,
                        	ERR_DEAL_CODE_LEN_MORE,
                        	APL_NULL_STRING,
                        	APL_NULL_STRING,
                        	APL_NULL_STRING,
                        	__LINE__,
                        	__FILE__
                        	) != APL_SUCCESS)
                        	APL_GOBACK_FAIL

               		//APL_GOBACK_FAIL
        	}
        	if(strlen(p_wi_deal_struct_h -> h_exch_code)>(WI_EXCH_CODE_LEN-1))
        	{

                	printf("KS -- Exchange Code length is Greater than 3  .... Failed \n");
                	if (CO_InsertErr(l_debug_info_ptr,
                        	ERR_EXCH_CODE_LEN_MORE,
                        	APL_NULL_STRING,
                        	APL_NULL_STRING,
                        	APL_NULL_STRING,
                        	__LINE__,
                        	__FILE__
                        	) != APL_SUCCESS)
                        	APL_GOBACK_FAIL

               		//APL_GOBACK_FAIL
        	}
        	if(strlen(p_wi_deal_struct_h -> h_mkt_type)>(WI_MKT_TYPE_LEN-1))
        	{

                	printf("KS -- Market Type length is Greater than 3  .... Failed \n");
                	if (CO_InsertErr(l_debug_info_ptr,
                        	ERR_MKT_TYPE_LEN_MORE,
                        	APL_NULL_STRING,
                        	APL_NULL_STRING,
                        	APL_NULL_STRING,
                        	__LINE__,
                        	__FILE__
                        	) != APL_SUCCESS)
                        	APL_GOBACK_FAIL

               		APL_GOBACK_FAIL
        	}

		//Added By Kalyan --10/05/2007
		printf("KS -- Going for Market type Validation .....\n");
	
		EXEC SQL SELECT count(*) INTO :l_mkt_type_cnt FROM PRO_SGENSTAT WHERE MAP_TYPE= 'MKT_TYP_'||:p_wi_deal_struct_h -> h_exch_code and MAP_VAL=:p_wi_deal_struct_h -> h_mkt_type;
		IS_ANY_ORA_ERROR

        	if(l_mkt_type_cnt==0)
        	{

                	printf("KS -- Invalied Market type for Given Exchange Code  .... Failed \n");
                	if (CO_InsertErr(l_debug_info_ptr,
                        	ERR_MKT_TYPE_LEN_MORE,
                        	APL_NULL_STRING,
                        	APL_NULL_STRING,
                        	APL_NULL_STRING,
                        	__LINE__,
                        	__FILE__
                        	) != APL_SUCCESS)
                        	APL_GOBACK_FAIL

               		//APL_GOBACK_FAIL
        	}
		//Added By Kalyan --10/05/2007
		printf("KS -- Going for Net Amount and Net Rate Validation .....\n");
		if((strcmp(p_wi_deal_struct_h -> h_deal_cd ,"1")==0)||(strcmp(p_wi_deal_struct_h -> h_deal_cd ,"2")==0))
		{
			printf("KS -- Entered Amount Check....\n");
			if(p_wi_deal_struct_h ->h_cost != 0 || p_wi_deal_struct_h ->h_net_amt != 0)
			{
				printf("KS -- Net Amt and Cost are not allowed for RF/DF deals ..[%lf] [%lf] \n",p_wi_deal_struct_h ->h_cost, p_wi_deal_struct_h ->h_net_amt);
                		if (CO_InsertErr(l_debug_info_ptr,
         		               	ERR_NETAMT_FOR_FREE_DEAL,
                       		 	APL_NULL_STRING,
	                        	APL_NULL_STRING,
       		                 	APL_NULL_STRING,
               		         	__LINE__,
                      		 	__FILE__
                       		 	) != APL_SUCCESS)
                        		APL_GOBACK_FAIL
			}
		}
				

		printf("KS -- instrument name length [%d]\n",strlen(p_wi_deal_struct_h -> h_instr_name));
        	if(strlen(p_wi_deal_struct_h -> h_instr_name)>(WI_INSTR_NAME_LEN-1))
        	{

                	printf("KS -- Instrument Name length is Greater than 131  .... Failed \n[%s]\n",p_wi_deal_struct_h -> h_instr_name);
                	if (CO_InsertErr(l_debug_info_ptr,
                        	ERR_INSTR_NAME_LEN_MORE,
                        	APL_NULL_STRING,
                        	APL_NULL_STRING,
                        	APL_NULL_STRING,
                        	__LINE__,
                        	__FILE__
                        	) != APL_SUCCESS)
                        	APL_GOBACK_FAIL

               		//APL_GOBACK_FAIL
        	}
        	if(strlen(p_wi_deal_struct_h -> h_domestic_cpclt)>(WI_DOMESTIC_CPCLT_NAME_LEN-1))
        	{

                	printf("KS -- Broker Name length is Greater than 70  .... Failed\n[%s] \n",p_wi_deal_struct_h -> h_domestic_cpclt);
                	if (CO_InsertErr(l_debug_info_ptr,
                        	ERR_CPCLT_NAME_LEN_MORE,
                        	APL_NULL_STRING,
                        	APL_NULL_STRING,
                        	APL_NULL_STRING,
                        	__LINE__,
                        	__FILE__
                        	) != APL_SUCCESS)
                        	APL_GOBACK_FAIL

               		//APL_GOBACK_FAIL
        	}

        	if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
        	{

               		printf("KS -- Error String found \n");
                	APL_GOBACK_FAIL
        	}


		/* Kalyan --- Till Here (30/04/2007) */


		strcpy(p_wi_deal_struct_h->h_deal_stat,STATUS_UAUTH);
                l_wi_deal_struct_i->i_deal_stat=0;
   	        strcpy(p_wi_deal_struct_h->h_maker,p_intl_envdatastruct_h->usr);
		l_wi_deal_struct_i->i_maker=0;
  	        strcpy(p_wi_deal_struct_h->h_maker_dt,chr_sys_access_stamp);
		l_wi_deal_struct_i->i_maker_dt=0;
		strcpy(p_wi_deal_struct_h->h_access_stamp,chr_sys_access_stamp);
		l_wi_deal_struct_i->i_access_stamp =0;
               //if(!strlen(p_wi_deal_struct_h ->h_proc_flag))
               //{
	       IF_COND_EXISTS("DUAL_WEBCON","AUTODLTRNSFR") // Added By Kalyan
	       {
               		strcpy(p_wi_deal_struct_h ->h_proc_flag,"Y"); //Proc Flag Changed to Y
	       }
	       else
	       {
			strcpy(p_wi_deal_struct_h ->h_proc_flag,"N"); //Proc Flag Changed to N
               }
               l_wi_deal_struct_i -> i_proc_flag= 0;
               //}
               if(!strlen(p_wi_deal_struct_h ->h_fx_reqd))
               {
               strcpy(p_wi_deal_struct_h ->h_fx_reqd,"N");
               l_wi_deal_struct_i -> i_fx_reqd= 0;
               }
               if(strcmp(p_wi_deal_struct_h ->h_clh_flag,"C") !=0 && strcmp(p_wi_deal_struct_h ->h_clh_flag,"D") !=0)
               {
                  if(strcmp(p_wi_deal_struct_h ->h_clh_flag,"CH") ==0 )
                  {
                    strcpy(p_wi_deal_struct_h ->h_clh_flag,"C");
                    l_wi_deal_struct_i -> i_clh_flag= 0;
                  }
                  else if(strcmp(p_wi_deal_struct_h ->h_clh_flag,"HD")==0)
                  {
                   strcpy(p_wi_deal_struct_h ->h_clh_flag,"D");
                   l_wi_deal_struct_i -> i_clh_flag= 0;
                  }
                /* else  [Kalyan --I think this needs to be commented ]
                 {
                  strcpy(p_wi_deal_struct_h ->h_clh_flag,"C");
                  l_wi_deal_struct_i -> i_clh_flag= 0;
                 } */
             }
                  
             /*  EXEC SQL SELECT AUTO_AUTH INTO :temp_auth FROM WI_CLIENT_MAP WHERE CLN_CODE =:p_wi_deal_struct_h ->h_client AND               WI_LOGIN =:p_wi_deal_struct_h->h_maker;*/
				  /* Changes Made By Dnyanesh Kotak Web UAT - Multiple Logins Operating Same Safekeeping Account */	
               EXEC SQL SELECT DISTINCT AUTO_AUTH INTO :temp_auth FROM WI_CLIENT_MAP WHERE WI_LOGIN =:p_wi_deal_struct_h->h_maker;
               
               
               if(!strcmp(temp_auth,"Y"))
                {
                 strcpy(p_wi_deal_struct_h->h_deal_stat,"AA");
                 strcpy(p_wi_deal_struct_h ->h_checker,"SYSTEM");
                 l_wi_deal_struct_i -> i_checker= 0;
                 strcpy(p_wi_deal_struct_h ->h_checker_dt,p_wi_deal_struct_h->h_maker_dt);
                 l_wi_deal_struct_i -> i_checker_dt= 0;
                }
               else
                {  
                strcpy(p_wi_deal_struct_h->h_deal_stat,"UU");
                strcpy(p_wi_deal_struct_h ->h_checker,APL_NULL_STRING);
                l_wi_deal_struct_i -> i_checker= -1;
                strcpy(p_wi_deal_struct_h ->h_checker_dt,APL_NULL_STRING);
                l_wi_deal_struct_i -> i_checker_dt= -1;
                }
           	 printf("here.........");
            	printf("%d",strlen(p_wi_deal_struct_h ->h_domestic_cpclt));
      		/* if(strlen(p_wi_deal_struct_h ->h_domestic_cpclt)>8) Commented By Kalyan */
      		if(strlen(p_wi_deal_struct_h ->h_domestic_cpclt)>10)
      		{
         		strcpy(p_wi_deal_struct_h ->h_domestic_cpclt_name,p_wi_deal_struct_h ->h_domestic_cpclt);
           		l_wi_deal_struct_i -> i_domestic_cpclt_name= 0;
         		strcpy(p_wi_deal_struct_h ->h_domestic_cpclt,APL_NULL_STRING);
          		l_wi_deal_struct_i -> i_domestic_cpclt= -1; 
      		}  
            	printf("here1.........");

		/* Going for Instrument Code Validation */
		printf("KS -- Instrument Code is [%s]\n",p_wi_deal_struct_h ->h_instr_code);
		printf("KS -- Instrument Name is [%s]\n",p_wi_deal_struct_h ->h_instr_name);
		if((strlen(p_wi_deal_struct_h ->h_instr_code)==0)&&(strlen(p_wi_deal_struct_h ->h_instr_name)>0))
		{
			printf("KS -- Instrcode is Null .. Hence trying to fetch it ....\n");

			EXEC SQL SELECT 
					INSTR_CODE 
				 INTO
					:p_wi_deal_struct_h ->h_instr_code :l_wi_deal_struct_i -> i_instr_code
				 FROM 
					MT_INSTRUMENT 
				 WHERE 
					INSTR_CODE=:p_wi_deal_struct_h ->h_instr_name OR
					INSTR_NAME=:p_wi_deal_struct_h ->h_instr_name OR
					INSTR_ISIN=:p_wi_deal_struct_h ->h_instr_name;
			if(sqlca.sqlcode !=0)
			printf("KS -- Error [%s] had occurred .... While trying to fetch Instrument Code\n",sqlca.sqlerrm.sqlerrmc);
		}
		else if (strlen(p_wi_deal_struct_h ->h_instr_code)> 0)
		{
			printf("KS -- Going to fetch InstrName for given Instrcode ....\n");

			EXEC SQL SELECT 
					INSTR_NAME 
				 INTO
					//:l_t_instr_name
					:p_wi_deal_struct_h ->h_instr_name :l_wi_deal_struct_i -> i_instr_name
				 FROM 
					MT_INSTRUMENT 
				 WHERE 
					INSTR_CODE=:p_wi_deal_struct_h ->h_instr_code OR
					INSTR_NAME=:p_wi_deal_struct_h ->h_instr_code OR
					INSTR_ISIN=:p_wi_deal_struct_h ->h_instr_code;
			if(sqlca.sqlcode == 1403)
			{
				printf("KS -- Non Existant Instrument Code ....Hence copying it to Instr Name ....\n");
				strcpy(p_wi_deal_struct_h ->h_instr_name,p_wi_deal_struct_h ->h_instr_code);
				l_wi_deal_struct_i -> i_instr_name=0;
			}
			else if(sqlca.sqlcode !=0)
				printf("KS -- Error [%s] had occurred .... While trying to fetch Instrument Name\n",sqlca.sqlerrm.sqlerrmc);
		}
		
		/* Going for Broker Code Validations */
		printf("KS -- Entered Broker Code is [%s]\n",p_wi_deal_struct_h ->h_domestic_cpclt);
		
		if(strlen(p_wi_deal_struct_h ->h_domestic_cpclt) > 0)
		{
			EXEC SQL SELECT 
					PTY_NAME 
				 INTO 
					:p_wi_deal_struct_h ->h_domestic_cpclt_name :l_wi_deal_struct_i -> i_domestic_cpclt_name
				 FROM
					MT_PARTY
				 WHERE 
					(PTY_CODE=:p_wi_deal_struct_h ->h_domestic_cpclt OR
					PTY_BIC_CODE=:p_wi_deal_struct_h ->h_domestic_cpclt OR
					PTY_NAME=:p_wi_deal_struct_h ->h_domestic_cpclt) AND
					ROWNUM<2;
			if(sqlca.sqlcode == 1403)
			{
				printf("KS -- Non Existant Broker Code ....Hence copying it to Broker Name ....\n");
				strcpy(p_wi_deal_struct_h ->h_domestic_cpclt_name,p_wi_deal_struct_h ->h_domestic_cpclt);
				l_wi_deal_struct_i -> i_domestic_cpclt_name=0;
			}
		}
		else
		{
			EXEC SQL SELECT 
					PTY_CODE 
				 INTO 
					:p_wi_deal_struct_h ->h_domestic_cpclt :l_wi_deal_struct_i -> i_domestic_cpclt
				 FROM
					MT_PARTY
				 WHERE 
					(PTY_CODE=:p_wi_deal_struct_h ->h_domestic_cpclt_name OR
					PTY_BIC_CODE=:p_wi_deal_struct_h ->h_domestic_cpclt_name OR
					PTY_NAME=:p_wi_deal_struct_h ->h_domestic_cpclt_name) AND
					ROWNUM<2;
			if(sqlca.sqlcode == 1403)
			{
				printf("KS -- Non Existant Broker Name /BIC CODE \n");
			}
		}
//12174 - START

		strncpy(l_deal_date, p_wi_deal_struct_h->h_deal_date, 10);

		EXEC SQL SELECT GET_INTEROP_SETL_DET(:p_wi_deal_struct_h->h_client,:p_wi_deal_struct_h->h_exch_code,:p_wi_deal_struct_h->h_mkt_type,'',:l_deal_date,:p_wi_deal_struct_h->h_instr_code) INTO : chr_interop_det FROM DUAL;

		Alert("sqlca.sqlcode : |%d|",sqlca.sqlcode);
		Alert("chr_interop_det : |%s|",chr_interop_det);	

		int int_num;
		char **temp;

		if (APL_FAILURE == CO_SplitStr( chr_interop_det,'|',&int_num,&temp ))
		{
			CO_ProcMonitor(APL_OUT_FILE, "E:String split failed\n",l_debug_info_ptr,p_intl_envdatastruct_h);
			APL_GOBACK_FAIL
		}
		strcpy(p_wi_deal_struct_h->h_setl_exch_code,temp[0]);

//12174 - END

                if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
                {
                        APL_GOBACK_FAIL
                }
		EXEC SQL INSERT INTO WI_DEAL VALUES (:p_wi_deal_struct_h:l_wi_deal_struct_i);

		IS_ANY_ORA_ERROR_AND_DUPLICATE(MAP_DET_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
                printf("here2.........\n");
		
		IF_COND_EXISTS("DUAL_WEBCON","AUTODLTRNSFR") // Added By Kalyan
		{
			printf("KS -- Auto Deal Transfer Condition Exist ... \n");

			if( strcmp(p_wi_deal_struct_h->h_deal_stat ,"AA")==0)
			{
				printf("KS --- Now Calling Function to Transfer the Authorised Deal to Custody From Web....\n");
	
				if((WebDlTransfer(p_wi_deal_struct_h,l_debug_info_ptr))==APL_FAILURE)
				{
					printf("KS -- Failed in Deal Transfer \n");

       		         		CO_InsertErr(l_debug_info_ptr,
                             			ERR_DEAL_TRANSFER,
                             			APL_NULL_STRING,
   			                        APL_NULL_STRING,
                             			APL_NULL_STRING,
                             			__LINE__,
                             			__FILE__);
               		 		return(APL_FAILURE);

				}
			}
		}
			
	}
	else
	{

		/* Added by Kalyan on 31/10/2007 for ISKB-488 .. Restrict the users who can authorize a record  -- start*/

		if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_AUTHORISE))
		{
			printf("KS -- ENTERED Authorize  Client check \n");
			printf("KS -- CLN_CODE [%s] \n",p_wi_deal_struct_h->h_client);
			printf("KS -- MAKER [%s] \n",p_wi_deal_struct_h->h_maker);
			printf("KS -- AUTHORIZER [%s] \n",p_intl_envdatastruct_h->usr);


			int_l_rowexists=0;

			//EXEC SQL SELECT COUNT(*) INTO :int_l_rowexists FROM WI_CLIENT_MAP WHERE CLN_CODE=:p_wi_deal_struct_h ->h_client AND WI_LOGIN = :p_wi_deal_struct_h->h_maker AND AUTHORIZER =:p_intl_envdatastruct_h->usr;
			EXEC SQL SELECT COUNT(*) INTO :int_l_rowexists FROM WI_CLIENT_MAP WHERE (WI_LOGIN = :p_wi_deal_struct_h->h_maker AND AUTHORIZER =:p_intl_envdatastruct_h->usr) OR ( :p_wi_deal_struct_h->h_client in (SELECT CLN_CODE FROM MT_CLIENT WHERE CLN_MASTER IN (SELECT CLN_CODE FROM WI_CLIENT_MAP WHERE authorizer=:p_intl_envdatastruct_h->usr)))  ;
			
			if((sqlca.sqlcode != 0) || (int_l_rowexists == 0))
			{
				printf("KS -- Failed in Valid Authorizer Check [%d]\n",sqlca.sqlcode);
				printf("Select the authorizer who is having checker rights for the selected client code");

       		       		CO_InsertErr(l_debug_info_ptr,
                       				ERR_AUTHRZR_HAV_CHECKER_RGT,
                       				APL_NULL_STRING,
   		               		        APL_NULL_STRING,
                       				APL_NULL_STRING,
                       				__LINE__,
                       				__FILE__);
               		 	return(APL_FAILURE);

			}
		}
		/* Added by Kalyan on 31/10/2007 for ISKB-488 .. Restrict the users who can authorize a record  -- end*/
		l_key_codes[0]="CLIENT";
		l_key_codes[1]="IDENTIY_NO";
		l_key_codes[2]=APL_NULL_STRING;
	
		l_key_values[0]=p_wi_deal_struct_h -> h_client;
		l_key_values[1]=p_wi_deal_struct_h -> h_identiy_no;
		l_key_values[2] = APL_NULL_STRING;

		
   		strcpy(chr_l_table_name,"WI_DEAL");

	/*
		Commented BY kalyan for ISKB_488 
    		int_retval = CR_Rtv_MastChldChrVal( l_key_codes,
                                        l_key_values,
                                        chr_l_table_name,
                                        "ACCESS_STAMP",
                                        chr_l_field_val,
                                        l_debug_info_ptr);

    		if (int_retval != APL_SUCCESS)
         	APL_GOBACK_FAIL
                printf("%s",chr_l_field_val);
		strcpy(chr_acc_stamp_compare,chr_l_field_val);
	*/
		
		memset(chr_acc_stamp_compare,APL_NULL_CHAR,sizeof(chr_acc_stamp_compare));

		EXEC SQL SELECT ACCESS_STAMP into :chr_acc_stamp_compare FROM WI_DEAL WHERE CLIENT = :p_wi_deal_struct_h -> h_client AND IDENTIY_NO=:p_wi_deal_struct_h -> h_identiy_no FOR UPDATE;
		IS_ANY_ORA_ERROR
		
    
		int_retval = CR_Rtv_MastChldChrVal( l_key_codes,
                                        l_key_values,
                                        chr_l_table_name,
                                        "DEAL_STAT",
                                        chr_l_field_val,
                                        l_debug_info_ptr);

    		if (int_retval != APL_SUCCESS)
         	APL_GOBACK_FAIL

		strcpy(chr_DEAL_STAT_compare,chr_l_field_val);

	}

 	if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_MODIFY))
	{
  		p_i_checker =-1;
  		p_i_checkerdt =-1;
		strcpy(p_wi_deal_struct_h->h_checker,APL_NULL_STRING);
		strcpy(p_wi_deal_struct_h->h_checker_dt,APL_NULL_STRING);

		APL_IF_DEBUG
 		{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered modify of Function MT_ModDBNoDlvDet\n",
													NULL,p_intl_envdatastruct_h);
 		}

	   	if (!strcmp(p_wi_deal_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   	{
			strcpy(p_wi_deal_struct_h->h_access_stamp,chr_sys_access_stamp);
			l_wi_deal_struct_i->i_access_stamp =0;
       			strcpy(p_wi_deal_struct_h->h_deal_stat,STATUS_UAUTH);
			l_wi_deal_struct_i->i_deal_stat =0;

			EXEC SQL UPDATE WI_DEAL  SET 
            				MAKER =:p_intl_envdatastruct_h->usr:p_i_maker,
					MAKER_DT =:chr_sys_access_stamp:p_i_makerdt,
					CHECKER =:p_wi_deal_struct_h->h_checker:p_i_checker,
					CHECKER_DT =:p_wi_deal_struct_h->h_checker:p_i_checkerdt,
            	                        DEAL_STAT =:p_wi_deal_struct_h ->h_deal_stat:l_wi_deal_struct_i->i_deal_stat
			WHERE 
					CLIENT =: p_wi_deal_struct_h->h_client AND 
					IDENTIY_NO =: p_wi_deal_struct_h->h_identiy_no; 
					 
					IS_ANY_ORA_ERROR;	

			/*printf("KS -- Now Going for Web Deal Transfer \n");

			IF_COND_EXISTS("DUAL_WEBCON","AUTODLTRNSFR")
			{
			if((WebDlTransfer(p_wi_deal_struct_h,l_debug_info_ptr))==APL_FAILURE)
			{
				printf("KS -- Failed in Deal Transfer \n");
				return APL_FAILURE;
			} 
			} */
	
	   	}
		else 
	   	{
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   	} 
	}

 	if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_AUTHORISE))
	{

		APL_IF_DEBUG
 		{
  			CO_ProcMonitor(APL_OUT_FILE, "Entered authorize of Function MT_ModDBNoDlvDet\n",
													NULL,p_intl_envdatastruct_h);
 		}

		if (!strcmp(p_wi_deal_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   	{
   			if(strcmp(p_wi_deal_struct_h->h_deal_stat,STATUS_DEL_UAUTH))
	    		{
	    		strcpy(p_wi_deal_struct_h->h_access_stamp,chr_sys_access_stamp);
	    		l_wi_deal_struct_i->i_access_stamp =0;
   	    		strcpy(p_wi_deal_struct_h->h_checker,p_intl_envdatastruct_h->usr);
	    		l_wi_deal_struct_i->i_checker=0;
  	    		strcpy(p_wi_deal_struct_h->h_checker_dt,chr_sys_access_stamp);
	    		l_wi_deal_struct_i->i_checker_dt=0;
          		strcpy(p_wi_deal_struct_h->h_deal_stat,STATUS_AUTH);
	    		l_wi_deal_struct_i->i_deal_stat =0;

			/* Added by Kalyan for ISKB-488 -- start 0/
			Commented By Kalyan -- This check is not reqd
			EXEC SQL SELECT DEAL_STAT INTO :l_deal_stat FROM WI_DEAL WHERE CLIENT =:p_wi_deal_struct_h->h_client AND IDENTIY_NO =:p_wi_deal_struct_h->h_identiy_no ;
			IS_ANY_ORA_ERROR;

			if(strcmp(l_deal_stat ,"BA")==0)
			{
				if (CO_InsertErr (l_debug_info_ptr,
                         				ERR_ACCESSSTAMP_CHGD,
                         				APL_NULL_STRING,
                         				APL_NULL_STRING,
                         				APL_NULL_STRING,
                         				__LINE__,
                         				__FILE__
                        				) != APL_SUCCESS)
                        		APL_GOBACK_FAIL
                        	APL_GOBACK_FAIL

			}
			/0 Added by Kalyan for ISKB-488 -- end */
	    		EXEC SQL UPDATE WI_DEAL SET 
        	   			CHECKER =:p_intl_envdatastruct_h->usr:p_i_checker,
            				CHECKER_DT =:chr_sys_access_stamp:p_i_access_stamp,
					ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp,
              				DEAL_STAT =:p_wi_deal_struct_h ->h_deal_stat:l_wi_deal_struct_i->i_deal_stat
				WHERE 
					CLIENT =:p_wi_deal_struct_h->h_client AND 
					IDENTIY_NO =:p_wi_deal_struct_h->h_identiy_no ; 
				IS_ANY_ORA_ERROR;	

			IF_COND_EXISTS("DUAL_WEBCON","AUTODLTRNSFR")
			{
				printf("KS -- Condition for Auto Transfer Exists... \nGoing for Web Deal Transfer \n");

				if((WebDlTransfer(p_wi_deal_struct_h,l_debug_info_ptr))==APL_FAILURE)
				{
					printf("KS -- Failed in Deal Transfer \n");
       		         		CO_InsertErr(l_debug_info_ptr,
                             			ERR_DEAL_TRANSFER,
                             			APL_NULL_STRING,
   			                        APL_NULL_STRING,
                             			APL_NULL_STRING,
                             			__LINE__,
                             			__FILE__);
               		 		return(APL_FAILURE);
				}
			}

			
			}
   	   		else  
	    		{
	    		EXEC SQL DELETE WI_DEAL 
				WHERE 
					 CLIENT =:p_wi_deal_struct_h->h_client AND 
					IDENTIY_NO =:p_wi_deal_struct_h->h_identiy_no 
					; 
          		
			   IS_ANY_ORA_ERROR
	    		}
	   	}
		else 
	   	{
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   	} 
	}

 	if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_RESET))
	{

		APL_IF_DEBUG
 		{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered reset of Function MT_ModDBNoDlvDet\n",
													NULL,p_intl_envdatastruct_h);
 		}

		if (!strcmp(p_wi_deal_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   	{
   		if(!strcmp(p_wi_deal_struct_h->h_deal_stat,STATUS_DEL_UAUTH))
	    	{
	    		strcpy(p_wi_deal_struct_h->h_access_stamp,chr_sys_access_stamp);
	    		l_wi_deal_struct_i->i_access_stamp =0;
   	    		strcpy(p_wi_deal_struct_h->h_checker,p_intl_envdatastruct_h->usr);
	    		l_wi_deal_struct_i->i_checker=0;
  	    		strcpy(p_wi_deal_struct_h->h_checker_dt,chr_sys_access_stamp);
	    		l_wi_deal_struct_i->i_checker_dt=0;
          		strcpy(p_wi_deal_struct_h->h_deal_stat,STATUS_AUTH);
	    		l_wi_deal_struct_i->i_deal_stat =0;

	    		EXEC SQL UPDATE WI_DEAL SET 
           				CHECKER =:p_intl_envdatastruct_h->usr:p_i_checker,
            				CHECKER_DT =:chr_sys_access_stamp:p_i_access_stamp,
					ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp,
              				DEAL_STAT =:p_wi_deal_struct_h ->h_deal_stat:l_wi_deal_struct_i->i_deal_stat
				WHERE 
					CLIENT =:p_wi_deal_struct_h->h_client AND 
					IDENTIY_NO =:p_wi_deal_struct_h->h_identiy_no 
					; 

				IS_ANY_ORA_ERROR;	
		}
	   	}
		else 
	   	{
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   	} 
	}

 	if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_DELETE))
	{
  		/*
		Commented By Kalyan on 08062007 foor Log W-29
		p_i_checker =-1;
  		p_i_checkerdt =-1;
		strcpy(p_wi_deal_struct_h->h_checker,APL_NULL_STRING);
		strcpy(p_wi_deal_struct_h->h_checker_dt,APL_NULL_STRING); 
		*/

		/* Added By Kalyan on 08062007 foor Log W-29  From here*/
		strcpy(p_wi_deal_struct_h->h_checker,p_intl_envdatastruct_h->usr);
		p_i_checker=0;
		strcpy(p_wi_deal_struct_h->h_checker_dt,chr_sys_access_stamp); 
		p_i_checkerdt=0;

		printf("KS -- Going for Delete ....\n");

		/* Added By Kalyan on 08062007 foor Log W-29  Till here*/

		APL_IF_DEBUG
 		{
  			CO_ProcMonitor(APL_OUT_FILE, "Entered delete of Function WI_ModDbWI_DEAL\n",
													NULL,p_intl_envdatastruct_h);
 		}	
			printf("outside the condition");
	   	if (!strcmp(p_wi_deal_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   	{
			printf("inside the condition");
			strcpy(p_wi_deal_struct_h->h_access_stamp,chr_sys_access_stamp);
			l_wi_deal_struct_i->i_access_stamp =0;
			/*
			commented by kalyan on 08062007 for Log W-29
       			strcpy(p_wi_deal_struct_h->h_deal_stat,STATUS_DEL_UAUTH);
			l_wi_deal_struct_i->i_deal_stat =0;
			

			EXEC SQL UPDATE WI_DEAL SET 
            				MAKER =:p_intl_envdatastruct_h->usr:p_i_maker,
					MAKER_DT =:chr_sys_access_stamp:p_i_makerdt,
					CHECKER =:p_wi_deal_struct_h->h_checker:p_i_checker,
					CHECKER_DT =:p_wi_deal_struct_h->h_checker:p_i_checkerdt,
               				DEAL_STAT =:p_wi_deal_struct_h ->h_deal_stat:l_wi_deal_struct_i->i_deal_stat,
					ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp
				WHERE 
					CLIENT =:p_wi_deal_struct_h->h_client AND 
					IDENTIY_NO =:p_wi_deal_struct_h->h_identiy_no 
					; 
			*/
			EXEC SQL SELECT * INTO :p_wi_deal_struct_h:l_wi_deal_struct_i FROM WI_DEAL WHERE CLIENT =:p_wi_deal_struct_h->h_client AND IDENTIY_NO =:p_wi_deal_struct_h->h_identiy_no;
			IS_ANY_ORA_ERROR;
			/* Added By Kalyan on 08062007 foor Log W-29  From here*/
			strcpy(p_wi_deal_struct_h->h_checker,p_intl_envdatastruct_h->usr);
			p_i_checker=0;
			strcpy(p_wi_deal_struct_h->h_checker_dt,chr_sys_access_stamp); 
			p_i_checkerdt=0;
			printf("KS -- Going for Delete ....\n");
			/* Added By Kalyan on 08062007 foor Log W-29  Till here*/
			/* Addeed by yugandar for delete the bulk on 05052008 */
			EXEC SQL INSERT INTO WI_DEAL_DEL VALUES (:p_wi_deal_struct_h:l_wi_deal_struct_i);
			EXEC SQL UPDATE WI_DEAL_DEL SET DEAL_STAT='UU' WHERE 
				DEAL_STAT='BD';
			 
				IS_ANY_ORA_ERROR;
			printf(" the client id is %s ",p_wi_deal_struct_h->h_client);
			EXEC SQL DELETE FROM WI_DEAL WHERE 		
						CLIENT =:p_wi_deal_struct_h->h_client AND 
						IDENTIY_NO =:p_wi_deal_struct_h->h_identiy_no ; 
			IS_ANY_ORA_ERROR;
			/* Addeed by yugandar for delete the bulk on 05052008 */
	   	}
		else 
	   	{
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   	} 
	}


 	if (int_error_flag == APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}
 	APL_GOBACK_SUCCESS

 	RETURN_SUCCESS :
	{
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
		free(l_wi_deal_struct_i);
		return(APL_SUCCESS);
	}
  	RETURN_FAILURE :
	{
 		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
		free(l_wi_deal_struct_i);
		return(APL_FAILURE);
	}

}

int WebDlTransfer(WI_DEAL_STRUCT_H *p_wi_deal_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	char	l_kkkk[20];
	char	l_environ_data[4001];
	char 	l_procdata[4001];
	char	l_error[1000];
        char 	fldsepr='';
        char 	valsepr='';
	double	l_cost;
	char	l_r_trans_code[3]=APL_NULL_STRING;
	char	l_r_sett_code[2] =APL_NULL_STRING;
	char l_cpclt[65] = APL_NULL_STRING;
//12174
	char  chr_interop_det [25] = APL_NULL_STRING;
	 char l_deal_date[11] = APL_NULL_STRING;
	char l_mkt_type[3]=APL_NULL_STRING;
	char l_trd_settlement_no[16]=APL_NULL_STRING;
	char l_settlement_no[16]=APL_NULL_STRING;
//12174
   char	chr_inter_fii_flg[2] = APL_NULL_STRING;  // Added by satish for ISKB_4837  on 07FEB2012
   short i_inter_fii_flg;
	EXEC SQL VAR chr_interop_det IS STRING; //Kalyan	//12174

	memset(chr_interop_det,APL_NULL_CHAR, sizeof(chr_interop_det)); 
	memset(l_mkt_type,APL_NULL_CHAR, sizeof(l_mkt_type)); 
	memset(l_trd_settlement_no,APL_NULL_CHAR, sizeof(l_trd_settlement_no)); 
	memset(l_settlement_no,APL_NULL_CHAR, sizeof(l_settlement_no)); 

	memset(l_error,APL_NULL_CHAR, sizeof(l_error));                // Kalyan -- Tech fix
	memset(l_environ_data,APL_NULL_CHAR, sizeof(l_environ_data));  // Kalyan -- Tech fix
	memset(l_procdata,APL_NULL_CHAR, sizeof(l_procdata));          // Kalyan -- Tech fix
	memset(l_deal_date,APL_NULL_CHAR, sizeof(l_deal_date)); //12174
	// Logic for user to be changed later to include Checker or Maker depending on the value of Checker -- if its SYSTEM then use Maker else use Checker -- Kalyan
	sprintf(l_environ_data,"%cUSER%c%s%cMODE%cINP%cFUNCTIONNAME%cDL_DEAL%cAUTHREQ%cY%cSUBFUN%c%cACTION%c%c",fldsepr,valsepr,p_wi_deal_struct_h->h_maker,fldsepr,valsepr,fldsepr,valsepr,fldsepr,valsepr,fldsepr,valsepr,fldsepr,valsepr,fldsepr);
	printf("\nKS ---- environ_data ----%s\n",l_environ_data);
	

	l_cost=0;
	if(strcmp(p_wi_deal_struct_h->h_deal_cd,"1")==0 )
		l_cost=(p_wi_deal_struct_h->h_net_amt+p_wi_deal_struct_h->h_brokercomm+p_wi_deal_struct_h->h_stx_comm) /p_wi_deal_struct_h->h_qty;
	else if(strcmp(p_wi_deal_struct_h->h_deal_cd,"2")==0 )
		l_cost=(p_wi_deal_struct_h->h_net_amt-p_wi_deal_struct_h->h_brokercomm-p_wi_deal_struct_h->h_stx_comm) /p_wi_deal_struct_h->h_qty;
	else if(strcmp(p_wi_deal_struct_h->h_deal_cd,"3")==0 )
		l_cost=(p_wi_deal_struct_h->h_net_amt+p_wi_deal_struct_h->h_brokercomm+p_wi_deal_struct_h->h_stx_comm) /p_wi_deal_struct_h->h_qty;
	else if(strcmp(p_wi_deal_struct_h->h_deal_cd,"4")==0 )
		l_cost=(p_wi_deal_struct_h->h_net_amt-p_wi_deal_struct_h->h_brokercomm-p_wi_deal_struct_h->h_stx_comm) /p_wi_deal_struct_h->h_qty;

	if(strcmp(p_wi_deal_struct_h->h_deal_cd,"1")==0 || strcmp(p_wi_deal_struct_h->h_deal_cd,"3")==0)
		strcpy(l_r_trans_code,"04");
	else if(strcmp(p_wi_deal_struct_h->h_deal_cd,"2")==0 || strcmp(p_wi_deal_struct_h->h_deal_cd,"4")==0)
		strcpy(l_r_trans_code,"01");

	
	if(strcmp(p_wi_deal_struct_h->h_clh_flag,"D")==0 )
		strcpy(l_r_sett_code,"H");
	else 
		strcpy(l_r_sett_code,"C");


	/* JC -- Start */
	if(strlen(p_wi_deal_struct_h->h_domestic_cpclt_name) < 1)
	{
		strcpy(p_wi_deal_struct_h->h_domestic_cpclt_name, p_wi_deal_struct_h->h_domestic_cpclt);
	}
	printf("JC::: Len ------- %d \n", strlen(p_wi_deal_struct_h->h_domestic_cpclt));
	if(strlen(p_wi_deal_struct_h->h_domestic_cpclt) > 10)
	{
		strncpy(l_cpclt, p_wi_deal_struct_h->h_domestic_cpclt, 10);
	}
	else
	{
		strcpy(l_cpclt, p_wi_deal_struct_h->h_domestic_cpclt);
	}
	printf("JC::: Before forming param str DOMESTIC_CPCLT -- [%s]\n", l_cpclt);

	/** Added by satish for ISKB_4837  send the Inter FII flag on 07FEB2012  START **/
	
		  printf("\nh_deal_date|%s|\n",p_wi_deal_struct_h->h_deal_date);
		  printf("\nh_identiy_no |%s|\n",p_wi_deal_struct_h->h_identiy_no);
		  printf("\nh_contract_cd |%s|\n",p_wi_deal_struct_h->h_contract_cd);

		  fflush(stdout);

	EXEC SQL AT :dbdesc SELECT 
						INTER_FII_FLG 
   INTO :chr_inter_fii_flg:i_inter_fii_flg
	FROM DL_BCN
	WHERE
	CONTRACT_CD= :p_wi_deal_struct_h->h_contract_cd 
	AND BROKER_CD=:l_cpclt
	AND DL_DATE BETWEEN TO_DATE(substr(:p_wi_deal_struct_h->h_deal_date,0,10)||' 00:00:00','DD/MM/YYYY HH24:MI:SS')
	AND TO_DATE(substr(:p_wi_deal_struct_h->h_deal_date,0,10)||' 23:59:59','DD/MM/YYYY HH24:MI:SS');

	printf("\n Sqlca Sqlcode.....|%d|\n",sqlca.sqlcode);

		  fflush(stdout);
	if (sqlca.sqlcode == 1403)
	{
		  strcpy(chr_inter_fii_flg,"N");
		  printf("\n chr_inter_fii_flg is  |%s|\n",chr_inter_fii_flg);
	}

	/** Added by satish for ISKB_4837  send the Inter FII flag on 07FEB2012  END **/


	printf("JC::: Before forming param str DOMESTIC_CP_NAME -- [%s]\n", p_wi_deal_struct_h->h_domestic_cpclt_name);
	/* JC -- End */

		  fflush(stdout);
	/** Changed by satish to pass THE INTER FII FLAG ISKB_4837 on 07FEB2012 **/
//12174
        strncpy(l_deal_date, p_wi_deal_struct_h->h_deal_date, 10);

	EXEC SQL SELECT GET_INTEROP_SETL_DET(:p_wi_deal_struct_h->h_client,:p_wi_deal_struct_h->h_exch_code,:p_wi_deal_struct_h->h_mkt_type,'',:l_deal_date,:p_wi_deal_struct_h->h_instr_code) INTO : chr_interop_det FROM DUAL;

        int int_num;
        char **temp;

	Alert("chr_interop_det : ",chr_interop_det);

        if (APL_FAILURE == CO_SplitStr( chr_interop_det,'|',&int_num,&temp ))
        {
            CO_ProcMonitor(APL_OUT_FILE, "E:String split failed\n",l_debug_info_ptr,NULL);
            return(APL_FAILURE);
        }

        strcpy(l_mkt_type,temp[1]);
	strcpy(l_settlement_no,temp[2]);

	EXEC SQL AT :dbdesc SELECT SETTL_NO INTO :l_trd_settlement_no FROM MT_SETTL_CAL WHERE TO_CHAR(START_DATE,'DD/MM/YYYY') = :l_deal_date AND EXCH_CODE  = :p_wi_deal_struct_h->h_exch_code AND SETTL_TYPE   = :p_wi_deal_struct_h->h_mkt_type
				 AND STATUS   ='AA';

	Alert("sqlca.sqlcode : |%d|",sqlca.sqlcode);
	Alert("l_trd_settlement_no : |%d|",l_trd_settlement_no);

	Alert("p_wi_deal_struct_h->h_stamp_duty : |%f|",p_wi_deal_struct_h->h_stamp_duty);

//12174
	sprintf(l_procdata,"%cDL_CLIENT%c%s%cDL_REF_NO%c%s%cDEAL_CD%c%s%cINSTR_CD%c%s%cINSTR_NAME%c%s%cQTY%c%f%cTRD_EXCH%c%s%cDEAL_DATE%c%s%cCOST%c%f%cSETL_DATE%c%s%cNET_AMT%c%f%cTRD_MKT_TYPE%c%s%cBROKERCOMM%c%f%cSTX_COMM%c%f%cDOMESTIC_CPCLT%c%s%cCLH_FLG%c%s%cFX_REQD%c%s%cMAKER%c%s%cMAKER_DT%c%s%cAUTHORISOR%c%s%cCHECKER_DT%c%s%cDEAL_STAT%c%s%cDL_TYPE%c1%cEX_ARENA%c1%cENTRY%cW%cDL_CLASS%c1%cR_TRANS_CODE%c%s%cR_SETT_CODE%c%s%cR_DELAY%cP%cR_TYPE%c00%cSEBI_REPORTED%cN%cALLOW_PARTIAL%cY%cINTERFII_FLG%c%s%cDOMESTIC_CP_NAME%c%s%cEXCH_CODE%c%s%cMKT_TYPE%c%s%cSETTLEMENT_NO%c%s%cTRD_SETL_NO%c%s%cSTAMP_DUTY%c%f%c",fldsepr,valsepr,p_wi_deal_struct_h->h_client,fldsepr, valsepr,p_wi_deal_struct_h->h_identiy_no,fldsepr, valsepr,p_wi_deal_struct_h->h_deal_cd,fldsepr, valsepr,p_wi_deal_struct_h->h_instr_code,fldsepr, valsepr,p_wi_deal_struct_h->h_instr_name,fldsepr, valsepr,p_wi_deal_struct_h->h_qty,fldsepr, valsepr,p_wi_deal_struct_h->h_exch_code,fldsepr, valsepr,p_wi_deal_struct_h->h_deal_date,fldsepr, valsepr,l_cost,fldsepr, valsepr,p_wi_deal_struct_h->h_setl_date,fldsepr, valsepr,p_wi_deal_struct_h->h_net_amt,fldsepr, valsepr,p_wi_deal_struct_h->h_mkt_type,fldsepr, valsepr,p_wi_deal_struct_h->h_brokercomm,fldsepr, valsepr,p_wi_deal_struct_h->h_stx_comm,fldsepr, valsepr,l_cpclt,fldsepr, valsepr,p_wi_deal_struct_h->h_clh_flag,fldsepr, valsepr,p_wi_deal_struct_h->h_fx_reqd,fldsepr, valsepr,p_wi_deal_struct_h->h_maker,fldsepr, valsepr,p_wi_deal_struct_h->h_maker_dt,fldsepr, valsepr,p_wi_deal_struct_h->h_checker,fldsepr, valsepr,p_wi_deal_struct_h->h_checker_dt,fldsepr, valsepr,p_wi_deal_struct_h->h_deal_stat,fldsepr, valsepr,fldsepr, valsepr,fldsepr, valsepr,fldsepr, valsepr,fldsepr, valsepr,l_r_trans_code,fldsepr, valsepr,l_r_sett_code,fldsepr, valsepr,fldsepr, valsepr,fldsepr, valsepr,fldsepr, valsepr,fldsepr, valsepr,chr_inter_fii_flg,fldsepr, valsepr,p_wi_deal_struct_h->h_domestic_cpclt_name,fldsepr,valsepr,p_wi_deal_struct_h->h_setl_exch_code,fldsepr,valsepr,l_mkt_type,fldsepr,valsepr,l_settlement_no,fldsepr,valsepr,l_trd_settlement_no,fldsepr,valsepr,p_wi_deal_struct_h->h_stamp_duty,fldsepr);

	
	printf("\nKS ---- environ_data ----%s\n",l_environ_data);
	printf("\nKS ---- param_data ----%s\n",l_procdata);

	printf("\nKS --- dbdesc .. [%s]\n",dbdesc);

	printf("\nKS ---- Going to call the Stored Procedure [%d]\n",sqlca.sqlcode);


	EXEC SQL AT :dbdesc CALL SP_INTL_DEAL('wrp_GBGenTrdFn',:l_environ_data,:l_procdata,'KAL','',:l_error);
	if(sqlca.sqlcode !=0)
	{
		printf("KS -- Error returned from SP_INTL_DEAL ... [%s]\n",sqlca.sqlerrm.sqlerrmc);
                return(APL_FAILURE);
	}

        if(strstr(l_error,"Timed out")!=NULL)
        {
        	printf("KS -- Server Timed Out \n");
                return(APL_FAILURE);
        }
	else if((strstr(l_error,"EOD has already started")!=NULL) || (strstr(l_error,"BOD has not finished")!=NULL))
	{
		printf("KS -- EOD/BOD is in progress ....\n");
                CO_InsertErr(l_debug_info_ptr,
                             ERR_EOD_STARTED,
                             APL_NULL_STRING,
                             APL_NULL_STRING,
                             APL_NULL_STRING,
                             __LINE__,
                             __FILE__);
                return(APL_FAILURE);
	} 
	/*EXEC SQL AT :dbdesc SELECT kkk into l_kkkk from kalyan ;
	if(sqlca.sqlcode == 0)
	{
		printf("KS -- TEST SUCCESS [%s]\n",l_kkkk);
	}
	else
	{
		printf("KS -- TEST FAILED [%s]\n",sqlca.sqlerrm.sqlerrmc);
	}*/

	printf("KS --- returning Success from WebDlTransfer\n");
	return(APL_SUCCESS);
}

int WI_DEAL_PMS_FUN(WI_DEAL_PMS_STRUCT_H *p_wi_deal_pms_struct_h,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr) 
{
  WI_DEAL_PMS_STRUCT_I *p_wi_deal_pms_struct_i;

  struct sqlca sqlca;

  char chr_sys_access_stamp[APL_DATE_LEN] = APL_NULL_STRING;
  char temp_auth[2] = APL_NULL_STRING;
  short p_i_maker, p_i_makerdt, p_i_checker, p_i_checkerdt, p_i_access_stamp;
  short p_i_access_stamp_compare;
  int int_error_flag = APL_SUCCESS;

  char 	l_t_cln_code[21];
  char 	l_t_cln_master[21];
  int 	l_t_mastcount;


  EXEC SQL VAR l_t_cln_code IS STRING;
  EXEC SQL VAR l_t_cln_master IS STRING;

#ifdef APL_THREADS
    APL_SET_CONTEXT
    EXEC SQL CONTEXT USE :my_ctx_local;
#endif

 APL_FUNCTION_ENTER(APL_OUT_FILE)

  p_wi_deal_pms_struct_i=(WI_DEAL_PMS_STRUCT_I*)calloc(1,sizeof(WI_DEAL_PMS_STRUCT_I));
  APL_MALLOC_FAIL(p_wi_deal_pms_struct_i)

  p_i_maker =0;
  p_i_makerdt =0;
  p_i_checker =0;
  p_i_checkerdt =0;
  p_i_access_stamp =0;
  p_i_access_stamp_compare =0;

   printf("\n Generate Identiy No For PMS Deal ");

   int int_l_seqnum_a=0;
   int int_return_val=0;
   char l_sysdate[9];
   char l_seqnum_a1[6];
   char l_str_pmsdlrefno[16];

   short i_sysdate = 0;
   short i_seqnum_a1 = 0;

   memset(l_sysdate,APL_NULL_CHAR,sizeof(l_sysdate));
   memset(l_seqnum_a1,APL_NULL_CHAR,sizeof(l_seqnum_a1));
   memset(l_str_pmsdlrefno,APL_NULL_CHAR,sizeof(l_str_pmsdlrefno));

   PRO_GSEQNUM_STRUCT_H    l_pro_gseqno_struct_h;

if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_INPUT))
{

 /* Following Added On 10082015 - Priyanka - Start */

    if(strlen(p_wi_deal_pms_struct_h ->h_buy_client) == 0)
    {
      APL_DATA_MISSING("Buy Client ",APL_NULL_STRING,APL_NULL_STRING);
      int_error_flag = APL_FAILURE;
    }

    if(strlen(p_wi_deal_pms_struct_h ->h_instr_isin) == 0)
    {
      APL_DATA_MISSING("Instrument Code ",APL_NULL_STRING,APL_NULL_STRING);
      int_error_flag = APL_FAILURE;
    }

    if(!p_wi_deal_pms_struct_h ->h_qty)
    {
      APL_DATA_MISSING("Quantity ",APL_NULL_STRING,APL_NULL_STRING);
      int_error_flag = APL_FAILURE;
    }

    if(strlen(p_wi_deal_pms_struct_h ->h_deal_date) == 0)
    {
      APL_DATA_MISSING("Deal Date ",APL_NULL_STRING,APL_NULL_STRING);
      int_error_flag = APL_FAILURE;
    }

    if(int_error_flag == APL_FAILURE)
             APL_GOBACK_FAIL
 /* Following Added On 10082015 - Priyanka - End */

   strcpy(l_pro_gseqno_struct_h.sequencename, "PMSDLWIREFSEQW"); // changes done by akshay for ISKB_11790
   strcpy(l_pro_gseqno_struct_h.seq_attrb_a, APL_NULL_STRING);
   strcpy(l_pro_gseqno_struct_h.seq_attrb_b, APL_NULL_STRING);
   strcpy(l_pro_gseqno_struct_h.seq_attrb_c, APL_NULL_STRING);

   l_pro_gseqno_struct_h.seq_stepby = 1;
   l_pro_gseqno_struct_h.seq_start = 1;
   l_pro_gseqno_struct_h.last_seqnum = 99999;
   l_pro_gseqno_struct_h.recycle_ind = RECYCLE_EOD;

   int_return_val = CO_RtvNxtSeqNumber(&l_pro_gseqno_struct_h,l_debug_info_ptr);
   printf("\n int_return_val |%d|",int_return_val);

           int_l_seqnum_a  = int_return_val;

   printf("\n int_l_seqnum_a is |%d|",int_l_seqnum_a);
   EXEC SQL SELECT TO_CHAR(SYS_DATE,'DDMMYYYY'),LPAD(:int_l_seqnum_a,5,'0') INTO :l_sysdate:i_sysdate,:l_seqnum_a1:i_seqnum_a1 FROM PRO_SYS_DATE;

   IS_ANY_ORA_ERROR

   sprintf(l_str_pmsdlrefno,"PMW%s%s",l_sysdate,l_seqnum_a1);
   strcpy(p_wi_deal_pms_struct_h->h_identiy_no,l_str_pmsdlrefno);
   printf("Deal reference number generated is |%s|",p_wi_deal_pms_struct_h->h_identiy_no);
   /*Deal Refernce No. Generation Ends*/

  if(!strlen(p_wi_deal_pms_struct_h ->h_sell_client))  
      p_wi_deal_pms_struct_i -> i_sell_client= -1;
  else
      p_wi_deal_pms_struct_i -> i_sell_client= 0;

  if(!strlen(p_wi_deal_pms_struct_h ->h_buy_client))  
      p_wi_deal_pms_struct_i -> i_buy_client= -1;
  else
      p_wi_deal_pms_struct_i -> i_buy_client= 0;

  if(!strlen(p_wi_deal_pms_struct_h ->h_instr_isin))  
      p_wi_deal_pms_struct_i -> i_instr_isin= -1;
  else
      p_wi_deal_pms_struct_i -> i_instr_isin= 0;

  if(!strlen(p_wi_deal_pms_struct_h ->h_deal_date))  
      p_wi_deal_pms_struct_i -> i_deal_date= -1;
  else
      p_wi_deal_pms_struct_i -> i_deal_date= 0;

  if(!strlen(p_wi_deal_pms_struct_h ->h_domestic_cpclt))  
      p_wi_deal_pms_struct_i -> i_domestic_cpclt= -1;
  else
      p_wi_deal_pms_struct_i -> i_domestic_cpclt= 0;

  if(!strlen(p_wi_deal_pms_struct_h ->h_cpclt))  
      p_wi_deal_pms_struct_i -> i_cpclt= -1;
  else
      p_wi_deal_pms_struct_i -> i_cpclt= 0;

  if(!strlen(p_wi_deal_pms_struct_h ->h_clh_flg))  
      p_wi_deal_pms_struct_i -> i_clh_flg= -1;
  else
      p_wi_deal_pms_struct_i -> i_clh_flg= 0;

  if(!strlen(p_wi_deal_pms_struct_h ->h_ex_arena))  
      p_wi_deal_pms_struct_i -> i_ex_arena= -1;
  else
      p_wi_deal_pms_struct_i -> i_ex_arena= 0;

  if(!strlen(p_wi_deal_pms_struct_h ->h_setldt))  
      p_wi_deal_pms_struct_i -> i_setldt= -1;
  else
      p_wi_deal_pms_struct_i -> i_setldt= 0;

  if(!strlen(p_wi_deal_pms_struct_h ->h_dealcd))  
      p_wi_deal_pms_struct_i -> i_dealcd= -1;
  else
      p_wi_deal_pms_struct_i -> i_dealcd= 0;

  if(!strlen(p_wi_deal_pms_struct_h ->h_access_stamp))  
      p_wi_deal_pms_struct_i -> i_access_stamp= -1;
  else
      p_wi_deal_pms_struct_i -> i_access_stamp= 0;

  if(!strlen(p_wi_deal_pms_struct_h ->h_classofdl))  
      p_wi_deal_pms_struct_i -> i_classofdl= -1;
  else
      p_wi_deal_pms_struct_i -> i_classofdl= 0;

  if(!strlen(p_wi_deal_pms_struct_h ->h_entry))  
      p_wi_deal_pms_struct_i -> i_entry= -1;
  else
      p_wi_deal_pms_struct_i -> i_entry= 0;

  if(!strlen(p_wi_deal_pms_struct_h ->h_fx_reqd))  
      p_wi_deal_pms_struct_i -> i_fx_reqd= -1;
  else
      p_wi_deal_pms_struct_i -> i_fx_reqd= 0;

  if(!strlen(p_wi_deal_pms_struct_h ->h_info1))  
      p_wi_deal_pms_struct_i -> i_info1= -1;
  else
      p_wi_deal_pms_struct_i -> i_info1= 0;

  if(!strlen(p_wi_deal_pms_struct_h ->h_maker))  
      p_wi_deal_pms_struct_i -> i_maker= -1;
  else
      p_wi_deal_pms_struct_i -> i_maker= 0;

  if(!strlen(p_wi_deal_pms_struct_h ->h_maker_dt))  
      p_wi_deal_pms_struct_i -> i_maker_dt= -1;
  else
      p_wi_deal_pms_struct_i -> i_maker_dt= 0;

  if(!strlen(p_wi_deal_pms_struct_h ->h_checker))  
      p_wi_deal_pms_struct_i -> i_checker= -1;
  else
      p_wi_deal_pms_struct_i -> i_checker= 0;

  if(!strlen(p_wi_deal_pms_struct_h ->h_checker_dt))  
      p_wi_deal_pms_struct_i -> i_checker_dt= -1;
  else
      p_wi_deal_pms_struct_i -> i_checker_dt= 0;

  if(!strlen(p_wi_deal_pms_struct_h ->h_allow_part_s))  
      p_wi_deal_pms_struct_i -> i_allow_part_s= -1;
  else
      p_wi_deal_pms_struct_i -> i_allow_part_s= 0;

  if(!strlen(p_wi_deal_pms_struct_h ->h_ispymtlocal))  
      p_wi_deal_pms_struct_i -> i_ispymtlocal= -1;
  else
      p_wi_deal_pms_struct_i -> i_ispymtlocal= 0;

  if(!strlen(p_wi_deal_pms_struct_h ->h_reginstr_ind))  
      p_wi_deal_pms_struct_i -> i_reginstr_ind= -1;
  else
      p_wi_deal_pms_struct_i -> i_reginstr_ind= 0;

  if(!strlen(p_wi_deal_pms_struct_h ->h_isspotdl))  
      p_wi_deal_pms_struct_i -> i_isspotdl= -1;
  else
      p_wi_deal_pms_struct_i -> i_isspotdl= 0;
}

   if(CO_RtvSysDtTime(chr_sys_access_stamp,l_debug_info_ptr) !=APL_SUCCESS)
	{
		APL_GOBACK_FAIL
	}

       printf("\n p_intl_envdatastruct_h->h_mode :[%s]",p_intl_envdatastruct_h->h_mode);
	
 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_INPUT))
	{
		APL_IF_DEBUG
 	        {
  		CO_ProcMonitor(APL_OUT_FILE, "Entered Input of Function WI_DEAL_PMS_FUN\n", NULL,p_intl_envdatastruct_h);
 	        }
	
		printf("PMS -- Now Going for Client Validation \n");
                
                // Buy Client And Sell Client Can Not Be Same 
                if(strcmp(p_wi_deal_pms_struct_h->h_sell_client,p_wi_deal_pms_struct_h->h_buy_client)==0) 
                {
                       printf("PMS -- Buy Client And Sell Client Can Not Be Same ....\n");
                       if (CO_InsertErr(l_debug_info_ptr,
                                                ERR_PMS_CLIENT_INVALID,
                                                APL_NULL_STRING,
                                                APL_NULL_STRING,
                                                APL_NULL_STRING,
                                                __LINE__,
                                                __FILE__
                                                ) != APL_SUCCESS)
                                                APL_GOBACK_FAIL
                } 

                l_t_mastcount = 0;                 
		EXEC SQL SELECT 
				DISTINCT CLN_CODE ,
					 CLN_MASTER
			INTO
				:l_t_cln_code,
				:l_t_cln_master
			FROM 
				WI_CLIENT_MAP 
			WHERE
				WI_LOGIN = :p_intl_envdatastruct_h->usr;

		IS_ANY_ORA_ERROR;

                printf("\n p_wi_deal_pms_struct_h ->h_sell_client :[%s]",p_wi_deal_pms_struct_h ->h_sell_client);
                printf("\n p_wi_deal_pms_struct_h ->h_buy_client :[%s]",p_wi_deal_pms_struct_h ->h_buy_client);
                printf("\n l_t_cln_code :[%s]",l_t_cln_code);
                printf("\n l_t_cln_master :[%s]",l_t_cln_master);

		if (strcmp(p_wi_deal_pms_struct_h ->h_sell_client,l_t_cln_code)!=0)
		{
			printf("PMS -- Sell client not matching with user client.. Going for Master Check\n");

                        // SELL CLIENT IS NOT SAME AS USER CLIENT - SO USER CLIENT HAS TO BE SAME AS SELL CLIENT
                        if (strcmp(p_wi_deal_pms_struct_h->h_buy_client,l_t_cln_code)!=0)
                        {
                                        printf("PMS -- Neither Buy Client is valid ....\n");
                                        if (CO_InsertErr(l_debug_info_ptr,
                                                ERR_INP_CLIENT_NOT_VALID,
                                                APL_NULL_STRING,
                                                APL_NULL_STRING,
                                                APL_NULL_STRING,
                                                __LINE__,
                                                __FILE__
                                                ) != APL_SUCCESS)
                                                APL_GOBACK_FAIL
                        }
                        else
			{
                          //User client is the BUY Client 
				EXEC SQL SELECT
						COUNT(*) 
					 INTO
						:l_t_mastcount
					 FROM
						MT_CLIENT
					 WHERE
						CLN_CODE=:p_wi_deal_pms_struct_h ->h_sell_client AND
						CLN_MASTER =:p_wi_deal_pms_struct_h ->h_buy_client;
				IS_ANY_ORA_ERROR;
                        printf("\n PMS -- l_t_mastcount111 :[%d]",l_t_mastcount);	
				if(l_t_mastcount == 0)
				{
					printf("PMS -- Master Check also Failed ....\n");
					if (CO_InsertErr(l_debug_info_ptr,
                         			ERR_INP_CLIENT_NOT_VALID,
                         			APL_NULL_STRING,
                         			APL_NULL_STRING,
                         			APL_NULL_STRING,
                         			__LINE__,
                         			__FILE__
                        			) != APL_SUCCESS)
                        			APL_GOBACK_FAIL

         				APL_GOBACK_FAIL
				}
			}
		}
                else
                {
                  // USER CLIENT AND SELL CLIENT IS SAME - CHECK MASTER ACCT OF USER WITH BUY CLIENT MASTER
                  // For BOTH BUY AND SELL CLIENTS MASTER SHOULD BE SAME

                /*if (strcmp(p_wi_deal_pms_struct_h ->h_buy_client,l_t_cln_code)!=0)
                {*/
                        printf("\nPMS -- SELL CLIENT SAME AS USER CLIENT \n");
                        printf("\nPMS -- SELL CLIENT :[%s]",p_wi_deal_pms_struct_h->h_sell_client);
                        printf("\nPMS -- BUY CLIENT :[%s]",p_wi_deal_pms_struct_h->h_buy_client);

                                EXEC SQL SELECT
                                                COUNT(*)
                                         INTO
                                                :l_t_mastcount
                                         FROM
                                                MT_CLIENT
                                         WHERE
                                                CLN_CODE=:p_wi_deal_pms_struct_h->h_buy_client AND
                                                CLN_MASTER =:p_wi_deal_pms_struct_h->h_sell_client;
                                IS_ANY_ORA_ERROR

                        printf("\n PMS -- l_t_mastcount :[%d]",l_t_mastcount);

                                if(l_t_mastcount == 0)
                                {
                                        printf("BUY -- Master Check also Failed ....\n");
                                        if (CO_InsertErr(l_debug_info_ptr,
                                                ERR_INP_CLIENT_NOT_VALID,
                                                APL_NULL_STRING,
                                                APL_NULL_STRING,
                                                APL_NULL_STRING,
                                                __LINE__,
                                                __FILE__
                                                ) != APL_SUCCESS)
                                                APL_GOBACK_FAIL

                                        APL_GOBACK_FAIL
                                }
                        printf("PMS -- Master Check Successful \n");
               /*}*/
                }
		printf("PMS -- Client Validation Successful \n");

               EXEC SQL SELECT DISTINCT AUTO_AUTH INTO :temp_auth FROM WI_CLIENT_MAP WHERE WI_LOGIN =:p_intl_envdatastruct_h->usr;
               
               
               if(!strcmp(temp_auth,"Y"))
                {
                 //strcpy(p_wi_deal_pms_struct_h->h_deal_stat,"AA");
                 strcpy(p_wi_deal_pms_struct_h ->h_checker,"SYSTEM");
                 p_wi_deal_pms_struct_i -> i_checker= 0;
                 strcpy(p_wi_deal_pms_struct_h ->h_checker_dt,chr_sys_access_stamp);
                 p_wi_deal_pms_struct_i -> i_checker_dt= 0;
                }
               else
                {  
                //strcpy(p_wi_deal_pms_struct_h->h_deal_stat,"UU");
                strcpy(p_wi_deal_pms_struct_h ->h_checker,APL_NULL_STRING);
                p_wi_deal_pms_struct_i -> i_checker= -1;
                strcpy(p_wi_deal_pms_struct_h ->h_checker_dt,APL_NULL_STRING);
                p_wi_deal_pms_struct_i -> i_checker_dt= -1;
                }

           	printf("\n here.........");
                printf("\n p_wi_deal_pms_struct_h-> h_sell_client:[%s]",p_wi_deal_pms_struct_h-> h_sell_client);
                printf("\n p_wi_deal_pms_struct_h-> h_buy_client:[%s]",p_wi_deal_pms_struct_h-> h_buy_client);
                printf("\n p_wi_deal_pms_struct_h-> h_instr_isin:[%s]",p_wi_deal_pms_struct_h-> h_instr_isin);
                printf("\n p_wi_deal_pms_struct_h-> h_deal_date:[%s]",p_wi_deal_pms_struct_h-> h_deal_date);
                printf("\n p_wi_deal_pms_struct_h-> h_qty:[%lf]",p_wi_deal_pms_struct_h-> h_qty);
                printf("\n p_wi_deal_pms_struct_h-> h_cost:[%lf]",p_wi_deal_pms_struct_h-> h_cost);
                printf("\n p_wi_deal_pms_struct_h-> h_domestic_cpclt:[%s]",p_wi_deal_pms_struct_h-> h_domestic_cpclt);
                printf("\n p_wi_deal_pms_struct_h-> h_cpclt:[%s]",p_wi_deal_pms_struct_h-> h_cpclt);
                printf("\n p_wi_deal_pms_struct_h-> h_origquantity:[%lf]",p_wi_deal_pms_struct_h-> h_origquantity);
                printf("\n p_wi_deal_pms_struct_h-> h_amt:[%lf]",p_wi_deal_pms_struct_h-> h_amt);
                printf("\n p_wi_deal_pms_struct_h-> h_net_amt:[%lf]",p_wi_deal_pms_struct_h-> h_net_amt);
                printf("\n p_wi_deal_pms_struct_h-> h_clh_flg:[%s]",p_wi_deal_pms_struct_h-> h_clh_flg);
                printf("\n p_wi_deal_pms_struct_h-> h_ex_arena:[%s]",p_wi_deal_pms_struct_h-> h_ex_arena);
                printf("\n p_wi_deal_pms_struct_h-> h_setldt:[%s]",p_wi_deal_pms_struct_h-> h_setldt);
                printf("\n p_wi_deal_pms_struct_h-> h_dealcd:[%s]",p_wi_deal_pms_struct_h-> h_dealcd);
                printf("\n p_wi_deal_pms_struct_h-> h_access_stamp:[%s]",p_wi_deal_pms_struct_h-> h_access_stamp);
                printf("\n p_wi_deal_pms_struct_h-> h_classofdl:[%s]",p_wi_deal_pms_struct_h-> h_classofdl);
                printf("\n p_wi_deal_pms_struct_h-> h_entry:[%s]",p_wi_deal_pms_struct_h-> h_entry);
                printf("\n p_wi_deal_pms_struct_h-> h_fx_reqd:[%s]",p_wi_deal_pms_struct_h-> h_fx_reqd);
                printf("\n p_wi_deal_pms_struct_h-> h_info1:[%s]",p_wi_deal_pms_struct_h-> h_info1);
                printf("\n p_wi_deal_pms_struct_h-> h_maker:[%s]",p_wi_deal_pms_struct_h-> h_maker);
                printf("\n p_wi_deal_pms_struct_h-> h_maker_dt:[%s]",p_wi_deal_pms_struct_h-> h_maker_dt);
                printf("\n p_wi_deal_pms_struct_h-> h_checker:[%s]",p_wi_deal_pms_struct_h-> h_checker);
                printf("\n p_wi_deal_pms_struct_h-> h_checker_dt:[%s]",p_wi_deal_pms_struct_h-> h_checker_dt);
                printf("\n p_wi_deal_pms_struct_h-> h_allow_part_s:[%s]",p_wi_deal_pms_struct_h-> h_allow_part_s);
                printf("\n p_wi_deal_pms_struct_h-> h_ispymtlocal:[%s]",p_wi_deal_pms_struct_h-> h_ispymtlocal);
                printf("\n p_wi_deal_pms_struct_h-> h_reginstr_ind:[%s]",p_wi_deal_pms_struct_h-> h_reginstr_ind);
                printf("\n p_wi_deal_pms_struct_h-> h_isspotdl:[%s]",p_wi_deal_pms_struct_h-> h_isspotdl);
                printf("\n p_wi_deal_pms_struct_h-> h_identiy_no:[%s]",p_wi_deal_pms_struct_h-> h_identiy_no);
                printf("\n p_wi_deal_pms_struct_h-> h_trd_exch:[%s]",p_wi_deal_pms_struct_h-> h_trd_exch);
                printf("\n p_wi_deal_pms_struct_h-> h_trd_mkt_type:[%s]",p_wi_deal_pms_struct_h-> h_trd_mkt_type);
                printf("\n p_wi_deal_pms_struct_h-> h_trd_setl_no:[%s]",p_wi_deal_pms_struct_h-> h_trd_setl_no);
                printf("\n p_wi_deal_pms_struct_h-> h_payin_dt:[%s]",p_wi_deal_pms_struct_h-> h_payin_dt);
                printf("\n p_wi_deal_pms_struct_h-> h_payout_dt:[%s]",p_wi_deal_pms_struct_h-> h_payout_dt);
 
		EXEC SQL INSERT INTO WI_DL_PMS VALUES (:p_wi_deal_pms_struct_h:p_wi_deal_pms_struct_i);

		IS_ANY_ORA_ERROR_AND_DUPLICATE(MAP_DET_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
                printf("here2.........\n");
	
       }	//End Of Input Mode
else if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_AUTHORISE))
{

    printf("\n SELL CLIENT :[%s]",p_wi_deal_pms_struct_h->h_sell_client);
    printf("\n BUY  CLIENT :[%s]",p_wi_deal_pms_struct_h->h_buy_client);
    printf("\n INSTR CODE  :[%s]",p_wi_deal_pms_struct_h->h_instr_isin);
    printf("\n DEAL DATE   :[%s]",p_wi_deal_pms_struct_h->h_deal_date);
    printf("\n QUANTITY    :[%lf]",p_wi_deal_pms_struct_h->h_qty);
    printf("\n DEAL DATE   :[%lf]",p_wi_deal_pms_struct_h->h_cost);

    EXEC SQL SELECT * INTO :p_wi_deal_pms_struct_h :p_wi_deal_pms_struct_i
             FROM WI_DL_PMS
             WHERE SELL_CLIENT =:p_wi_deal_pms_struct_h->h_sell_client
              AND  BUY_CLIENT = :p_wi_deal_pms_struct_h->h_buy_client
              AND  INSTR_CD =:p_wi_deal_pms_struct_h->h_instr_isin
              AND  DEAL_DATE =:p_wi_deal_pms_struct_h->h_deal_date
              AND  QTY = :p_wi_deal_pms_struct_h->h_qty
              AND  COST = :p_wi_deal_pms_struct_h->h_cost; 

    IS_ANY_ORA_ERROR
               
    printf("\n DEALS SELECTED SUCCESSFULLY FROM WI_DL_PMS"); 
}

        
		IF_COND_EXISTS("DUAL_WEBCON","AUTODLTRNSFR")
		{
			printf("PMS -- Auto Deal Transfer Condition Exist ... \n");

                        printf("\n temp_auth :[%s]",temp_auth);

			if((strcmp(temp_auth,"Y")==0) || (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_AUTHORISE)))
			{
				printf("PMS --- Now Calling Function to Transfer the Authorised Deal to Custody From Web....\n");
	
				if((WebPmsDlTransfer(p_wi_deal_pms_struct_h,p_intl_envdatastruct_h,l_debug_info_ptr))==APL_FAILURE)
				{
					printf("PMS -- Failed in Deal Transfer \n");

       		         		if(CO_InsertErr(l_debug_info_ptr,
                             			ERR_DEAL_TRANSFER,
                             			APL_NULL_STRING,
   			                        APL_NULL_STRING,
                             			APL_NULL_STRING,
                             			__LINE__,
                             			__FILE__) != APL_SUCCESS)
                                         APL_GOBACK_FAIL
               		 		//return(APL_FAILURE);

				}
                                else
                                {
                                        printf("\n After successfully transfering Deal in custody Add in WI_DEAL");
                                        if((WI_CreateDL(p_wi_deal_pms_struct_h,p_intl_envdatastruct_h,l_debug_info_ptr))==APL_FAILURE)
                                        {
                                             printf("PMS -- Failed in WI_DEAL Deal Creation \n");

                                             CO_InsertErr(l_debug_info_ptr,
                                                ERR_DEAL_TRANSFER,
                                                APL_NULL_STRING,
                                                APL_NULL_STRING,
                                                APL_NULL_STRING,
                                                __LINE__,
                                                __FILE__);
                                             return(APL_FAILURE);
                                        }
                                        else
                                        {

                                    printf("\n Insertin in WI_DL_PMS_LOG For :[%s]",p_wi_deal_pms_struct_h->h_identiy_no);
 
                                           EXEC SQL INSERT INTO WI_DL_PMS_LOG 
                                                    SELECT A.*,'INP' FROM WI_DL_PMS A
                                                    WHERE  A.IDENTIY_NO = :p_wi_deal_pms_struct_h->h_identiy_no;
                                       printf("\n sqlca.sqlcode of INSERT INTO WI_DL_PMS_LOG:[%d]",sqlca.sqlcode);
                                           IS_ANY_ORA_ERROR

                                      printf("\n Deleting from WI_DL_PMS_LOG :[%s]",p_wi_deal_pms_struct_h->h_identiy_no);
                                           EXEC SQL DELETE FROM WI_DL_PMS WHERE  IDENTIY_NO = :p_wi_deal_pms_struct_h->h_identiy_no;
                                      printf("\n sqlca.sqlcode of Deleting from WI_DL_PMS_LOG :[%d]",sqlca.sqlcode);
                                           IS_ANY_ORA_ERROR

                                        }

                                } 
			}
		}

 	APL_GOBACK_SUCCESS

 	RETURN_SUCCESS :
	{
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
		free(p_wi_deal_pms_struct_i);
		return(APL_SUCCESS);
	}
  	RETURN_FAILURE :
	{
 		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
		free(p_wi_deal_pms_struct_i);
		return(APL_FAILURE);
	}

}

int CO_RtvNxtSeqNumber(PRO_GSEQNUM_STRUCT_H *p_pro_gseqnum_struct_h, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct	sqlca	sqlca;

	PRO_GSEQNUM_STRUCT_H   		*l_pro_gseqnumstruct_h = NULL;
	PRO_GSEQNUM_STRUCT_I			*l_pro_gseqnum_struct_i = NULL;
	VARCHAR							chr_l_seqname[SEQ_NAME_LEN+1];
	char						  		chr_l_recycle;
	int						  		int_l_step_by;
	int						  		int_l_start_at;
	int						  		int_l_next_number=0;
	int						  		int_l_last_number;
	VARCHAR					  		l_seq_attr1[SEQ_ATTR_LEN+1];
	VARCHAR					  		l_seq_attr2[SEQ_ATTR_LEN+1];
	VARCHAR					  		l_seq_attr3[SEQ_ATTR_LEN+1];
	VARCHAR							chr_l_row_id[APL_ROWID_LEN+1];
	int						  		int_l_seq_attr_level=S_LEVEL_ZERO;
	short								l_seq_attr1_ind=-1;
	short								l_seq_attr2_ind=-1;
	short								l_seq_attr3_ind=-1;

	EXEC SQL END DECLARE SECTION;

	#ifdef	APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE	:my_ctx_local;
	#endif

	if ((p_pro_gseqnum_struct_h->sequencename == NULL) || (strcmp(p_pro_gseqnum_struct_h->sequencename, APL_NULL_STRING)) == 0)
	{
		APL_DATA_MISSING("SEQUENCE NAME",APL_NULL_STRING,APL_NULL_STRING)

		APL_GOBACK_FAIL
	}
	
	strcpy((char *)chr_l_seqname.arr, p_pro_gseqnum_struct_h->sequencename);
	chr_l_seqname.len = (strlen((char *)chr_l_seqname.arr)); //AIX - Warnings Removal

  if( (strcmp(p_pro_gseqnum_struct_h->sequencename,"MSGDAT")) )
  {
	if (strcmp(p_pro_gseqnum_struct_h->seq_attrb_a, APL_NULL_STRING) != 0)
	{
		int_l_seq_attr_level=S_LEVEL_ONE;
		l_seq_attr1_ind=0;
		strcpy((char *)l_seq_attr1.arr, p_pro_gseqnum_struct_h->seq_attrb_a);
		l_seq_attr1.len =strlen((char *)l_seq_attr1.arr); //AIX - Warnings Removal
	
		#ifdef SYS_DEBUG
			fprintf(APL_OUT_FILE,"Sequence attribute 1 is %s \n",p_pro_gseqnum_struct_h->seq_attrb_a);
		#endif
	}

	if (strcmp(p_pro_gseqnum_struct_h->seq_attrb_b, APL_NULL_STRING) != 0)
	{
		if (strcmp(p_pro_gseqnum_struct_h->seq_attrb_a, APL_NULL_STRING) == 0) 
		{
			fprintf(APL_OUT_FILE,"Level 1 sequence attribute must be specified if Level 2 sequence attribute has been specified \n");
		
			APL_DATA_MISSING("SEQUENCE ATTRIBUTE 1",APL_NULL_STRING,APL_NULL_STRING)
			APL_GOBACK_FAIL
		}
		else
		{
			int_l_seq_attr_level=S_LEVEL_TWO;
			l_seq_attr1_ind=0;
			l_seq_attr2_ind=0;
			strcpy((char *)l_seq_attr2.arr, p_pro_gseqnum_struct_h->seq_attrb_b);
			l_seq_attr2.len = strlen((char *)l_seq_attr2.arr);
		
			#ifdef SYS_DEBUG
				fprintf(APL_OUT_FILE,"Sequence attribute 2 is %s \n",p_pro_gseqnum_struct_h->seq_attrb_b);
			#endif
		}
	}

	if (strcmp(p_pro_gseqnum_struct_h->seq_attrb_c, APL_NULL_STRING) != 0)
	{
		if ((strcmp(p_pro_gseqnum_struct_h->seq_attrb_b, APL_NULL_STRING) == 0) ||
				(strcmp(p_pro_gseqnum_struct_h->seq_attrb_a, APL_NULL_STRING) == 0))
		{
			fprintf(APL_OUT_FILE,"Level 1 and Level 2 sequence attributes must be specified if Level 3 sequence attribute has been specified \n");
			
			APL_DATA_MISSING("SEQUENCE ATTRIBUTE 1","SEQUENCE ATTRIBUTE 2",APL_NULL_STRING)
			APL_GOBACK_FAIL
		}
		else
	   {	
			int_l_seq_attr_level=S_LEVEL_THREE;
			l_seq_attr1_ind=0;
			l_seq_attr2_ind=0;
			l_seq_attr3_ind=0;
			strcpy((char *)l_seq_attr3.arr, p_pro_gseqnum_struct_h->seq_attrb_c);
			l_seq_attr3.len =strlen((char *)l_seq_attr3.arr); //AIX - Warnings Removal
			
			#ifdef SYS_DEBUG
				fprintf(APL_OUT_FILE,"Sequence attribute 3 is %s \n",p_pro_gseqnum_struct_h->seq_attrb_c);
			#endif
		}
	}

	

	l_pro_gseqnumstruct_h = (PRO_GSEQNUM_STRUCT_H *)calloc(1,sizeof(PRO_GSEQNUM_STRUCT_H));
	APL_MALLOC_FAIL(l_pro_gseqnumstruct_h)


	
	
	l_pro_gseqnum_struct_i = (PRO_GSEQNUM_STRUCT_I *)calloc(1,sizeof(PRO_GSEQNUM_STRUCT_I));
	APL_MALLOC_FAIL(l_pro_gseqnum_struct_i)

	switch(int_l_seq_attr_level)
	{

	case S_LEVEL_ZERO  :

		EXEC SQL SELECT ROWID,sequence_name,last_usednum,recycle_ind,seq_stepby,seq_start,NVL(last_seqnum,999999999),seq_attrb_a,seq_attrb_b,seq_attrb_c
		INTO :chr_l_row_id, :l_pro_gseqnumstruct_h INDICATOR :l_pro_gseqnum_struct_i
		FROM PRO_GSEQNUM
		WHERE sequence_name = :chr_l_seqname
		AND   seq_attrb_a IS NULL
		AND   seq_attrb_b IS NULL
		AND   seq_attrb_c IS NULL
		FOR UPDATE OF last_usednum;
		
		break;

	case S_LEVEL_ONE  :
		printf("\n Entered LEVEL ONE \n");
		
		EXEC SQL SELECT ROWID,sequence_name,last_usednum,recycle_ind,seq_stepby,seq_start,NVL(last_seqnum,999999999),seq_attrb_a,seq_attrb_b,seq_attrb_c
		INTO :chr_l_row_id,:l_pro_gseqnumstruct_h INDICATOR :l_pro_gseqnum_struct_i
		FROM PRO_GSEQNUM
		WHERE sequence_name = :chr_l_seqname
		AND   seq_attrb_a = :l_seq_attr1
		AND   seq_attrb_b IS NULL
		AND   seq_attrb_c IS NULL
		FOR UPDATE OF last_usednum;

		break;
	
	case S_LEVEL_TWO  :
		printf("\n Entered LEVEL TWO \n");
	
		EXEC SQL SELECT ROWID,sequence_name,last_usednum,recycle_ind,seq_stepby,seq_start,NVL(last_seqnum,999999999),seq_attrb_a,seq_attrb_b,seq_attrb_c
		INTO :chr_l_row_id,:l_pro_gseqnumstruct_h INDICATOR :l_pro_gseqnum_struct_i
		FROM PRO_GSEQNUM
		WHERE sequence_name = :chr_l_seqname
		AND seq_attrb_a = :l_seq_attr1
		AND seq_attrb_b = :l_seq_attr2
		AND seq_attrb_c IS NULL
		FOR UPDATE OF last_usednum;

		break;
	
	case S_LEVEL_THREE :
		printf("\n Entered LEVEL THREE \n");
	
		EXEC SQL SELECT ROWID,sequence_name,last_usednum,recycle_ind,seq_stepby,seq_start,NVL(last_seqnum,999999999),seq_attrb_a,seq_attrb_b,seq_attrb_c
		INTO :chr_l_row_id,:l_pro_gseqnumstruct_h INDICATOR :l_pro_gseqnum_struct_i
		FROM PRO_GSEQNUM
		WHERE sequence_name = :chr_l_seqname
		AND seq_attrb_a = :l_seq_attr1
		AND seq_attrb_b = :l_seq_attr2
		AND seq_attrb_c = :l_seq_attr3
		FOR UPDATE OF last_usednum;

		break;
	}
	printf("\n Out of levels sqlca.sqlcode is |%d|" ,sqlca.sqlcode );

	IS_ANY_ORA_ERROR

	if (sqlca.sqlcode == 0)
	{
		if((l_pro_gseqnumstruct_h->last_usednum + l_pro_gseqnumstruct_h->seq_stepby) <= l_pro_gseqnumstruct_h->last_seqnum)
			int_l_next_number = l_pro_gseqnumstruct_h->last_usednum + l_pro_gseqnumstruct_h->seq_stepby;
		else
		{
			if(toupper(l_pro_gseqnumstruct_h->recycle_ind) == RECYCLE_YES)
				int_l_next_number = l_pro_gseqnumstruct_h->seq_start;
			else
			{
				fprintf(APL_OUT_FILE,"Error - Limit reached for h_next sequence number\n");
				CO_InsertErr(l_debug_info_ptr,ERR_NO_NXT_SEQNO,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
				APL_GOBACK_FAIL
			}
		}

		EXEC SQL UPDATE PRO_GSEQNUM
		SET last_usednum = last_usednum + SEQ_STEPBY
		WHERE sequence_name = :p_pro_gseqnum_struct_h->sequencename; 

		printf("\n After updation of pro_gseqnum sql ca is |%d| next number is |%d| rowid = |%s|\n ",sqlca.sqlcode,int_l_next_number ,chr_l_row_id.arr);
		IS_ANY_ORA_ERROR;

		APL_GOBACK_SUCCESS

	}
	else if (sqlca.sqlcode == 1403)
	{
		fprintf(APL_OUT_FILE,"Inserting a chr_new record in the GSEQNUM table\n");
		
		if(p_pro_gseqnum_struct_h->seq_stepby < 1)
			p_pro_gseqnum_struct_h->seq_stepby = 1;
		if(p_pro_gseqnum_struct_h->seq_start < 1)
			p_pro_gseqnum_struct_h->seq_start = 1;
		if(p_pro_gseqnum_struct_h->last_seqnum < 1)
			p_pro_gseqnum_struct_h->last_seqnum = 999999999;
		if( (toupper(p_pro_gseqnum_struct_h->recycle_ind) != RECYCLE_YES) &&
			 (toupper(p_pro_gseqnum_struct_h->recycle_ind) != RECYCLE_NO ) &&
			 (toupper(p_pro_gseqnum_struct_h->recycle_ind) != RECYCLE_EOD) &&
			 (toupper(p_pro_gseqnum_struct_h->recycle_ind) != RECYCLE_EOM) &&
			 (toupper(p_pro_gseqnum_struct_h->recycle_ind) != RECYCLE_EOY) )
			{
				p_pro_gseqnum_struct_h->recycle_ind = RECYCLE_YES;
			}

		chr_l_recycle = toupper(p_pro_gseqnum_struct_h->recycle_ind);
		int_l_step_by = p_pro_gseqnum_struct_h->seq_stepby;
		int_l_start_at = p_pro_gseqnum_struct_h->seq_start;
		int_l_last_number = p_pro_gseqnum_struct_h->last_seqnum;
			
		#ifdef SYS_DEBUG
			fprintf(APL_OUT_FILE,"Recycle chr_flag is %c \n",p_pro_gseqnum_struct_h->recycle_ind);
			fprintf(APL_OUT_FILE,"Step by is %d \n",p_pro_gseqnum_struct_h->seq_stepby);
			fprintf(APL_OUT_FILE,"Start at is %d \n",p_pro_gseqnum_struct_h->seq_start);
			fprintf(APL_OUT_FILE,"Last number is %d \n",p_pro_gseqnum_struct_h->last_seqnum);
		#endif

		EXEC SQL INSERT INTO PRO_GSEQNUM (SEQUENCE_NAME,LAST_USEDNUM,RECYCLE_IND,SEQ_STEPBY,SEQ_START,LAST_SEQNUM,SEQ_ATTRB_A,SEQ_ATTRB_B,SEQ_ATTRB_C)
		VALUES (:chr_l_seqname,
				  :int_l_start_at,
				  :chr_l_recycle,
				  :int_l_step_by,
				  :int_l_start_at,
				  :int_l_last_number,
				  :l_seq_attr1:l_seq_attr1_ind,
				  :l_seq_attr2:l_seq_attr2_ind,
				  :l_seq_attr3:l_seq_attr3_ind);
		printf("\n After inserting pro_gseqnum is sqlca.sqlcode is |%d| ",sqlca.sqlcode);
		IS_ANY_ORA_ERROR
				
		int_l_next_number = int_l_start_at;

		APL_GOBACK_SUCCESS
	}
  }
  else
  {
      int_l_next_number = 0 ;

		EXEC SQL SELECT MSGDATSEQ.NEXTVAL into :int_l_next_number FROM DUAL ;
	   
		if(sqlca.sqlcode == -2289)
		{
		 printf("sqlca.sqlcode=%d\n",sqlca.sqlcode);
		 fprintf(APL_OUT_FILE,"Sequence does not exist/Insufficient Priveleges\n");
		 APL_GOBACK_FAIL
	   }
		else if(sqlca.sqlcode == -1031)
		{
		 printf("sqlca.sqlcode=%d\n",sqlca.sqlcode);
		 fprintf(APL_OUT_FILE,"Insufficient Priveleges\n");
		 APL_GOBACK_FAIL
	   }
      else if(sqlca.sqlcode != 0)
		{
		 printf("sqlca.sqlcode=%d\n",sqlca.sqlcode);
		 APL_GOBACK_FAIL
	   }
		
		printf("Next Sequence Number=%d\n",int_l_next_number);
	}

   APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		free(l_pro_gseqnumstruct_h);
		free(l_pro_gseqnum_struct_i);
		fprintf(APL_OUT_FILE,"Leaving processtion CO_RtvNxtSeqNumber Successfully\n");
		printf("\n Before Inside function Returning Next number is |%d| ",int_l_next_number);
		return(int_l_next_number);
	}

	RETURN_FAILURE  :
	{
		free(l_pro_gseqnumstruct_h);
		free(l_pro_gseqnum_struct_i);
		fprintf(APL_OUT_FILE,"Leaving processtion CO_RtvNxtSeqNumber Unsuccessfully\n");
		return(APL_FAILURE);
	}
}

int WebPmsDlTransfer(WI_DEAL_PMS_STRUCT_H *p_wi_deal_pms_struct_h,INTL_ENV_DATA_STRUCT_H *l_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
     printf("\n Inside functio WebPmsDlTransfer");

	char	l_environ_data[4001];
	char 	l_procdata[4001];
	char	l_error[1000];
        char    fldsepr=DATA_FIELD_SEPRTR;
        char    valsepr=DATA_VALUE_SEPRTR;
	char	l_r_trans_code[3]=APL_NULL_STRING;
	char	l_r_sett_code[2] =APL_NULL_STRING;
	char l_cpclt[65] = APL_NULL_STRING;
        char	chr_inter_fii_flg[2] = APL_NULL_STRING;
        char	chr_dpgen_flg[2] = APL_NULL_STRING;
        short i_inter_fii_flg;
	
	memset(l_error,APL_NULL_CHAR, sizeof(l_error));                
	memset(l_environ_data,APL_NULL_CHAR, sizeof(l_environ_data));  
        memset(l_procdata,APL_NULL_CHAR, sizeof(l_procdata));
        memset(l_r_trans_code,APL_NULL_CHAR, sizeof(l_r_trans_code));
        memset(l_r_sett_code,APL_NULL_CHAR, sizeof(l_r_sett_code));
        memset(l_cpclt,APL_NULL_CHAR, sizeof(l_cpclt));
        memset(chr_inter_fii_flg,APL_NULL_CHAR, sizeof(chr_inter_fii_flg));
        memset(chr_dpgen_flg,APL_NULL_CHAR, sizeof(chr_dpgen_flg));

        strcpy(chr_dpgen_flg,"Y");

       if(strcmp(l_intl_envdatastruct_h->h_mode,APL_FUNC_AUTHORISE) == 0)
       {
            strcpy(l_intl_envdatastruct_h->subprocess,"PMS");
        sprintf(l_environ_data,"%cUSER%c%s%cMODE%cINP%cFUNCTIONNAME%cDL_DEAL%cAUTHREQ%cN%cSUBPROCESS%c%s%cACTION%c%c",fldsepr,valsepr,p_wi_deal_pms_struct_h->h_maker,fldsepr,valsepr,fldsepr,valsepr,fldsepr,valsepr,fldsepr,valsepr,l_intl_envdatastruct_h->subprocess,fldsepr,valsepr,fldsepr);
       }
       else
       {
        sprintf(l_environ_data,"%cUSER%c%s%cMODE%cINP%cFUNCTIONNAME%cDL_DEAL%cAUTHREQ%cY%cSUBPROCESS%c%s%cACTION%c%c",fldsepr,valsepr,p_wi_deal_pms_struct_h->h_maker,fldsepr,valsepr,fldsepr,valsepr,fldsepr,valsepr,fldsepr,valsepr,l_intl_envdatastruct_h->subprocess,fldsepr,valsepr,fldsepr);
       }

	printf("\nPMS ---- environ_data ----%s\n",l_environ_data);

	printf("\nh_deal_date|%s|\n",p_wi_deal_pms_struct_h->h_deal_date);
	printf("\nh_identiy_no |%s|\n",p_wi_deal_pms_struct_h->h_identiy_no);
printf("\n p_wi_deal_pms_struct_h-> h_ex_arena:[%s]",p_wi_deal_pms_struct_h-> h_ex_arena);

	//fflush(stdout);

	sprintf(l_procdata,"%cDL_CLIENT%c%s%cDL_REF_NO%c%s%cDEAL_CD%c%s%cINSTR_CD%c%s%cQTY%c%f%cDEAL_DATE%c%s%cCOST%c%f%cSETL_DATE%c%s%cNET_AMT%c%f%cDOMESTIC_CPCLT%c%s%cCLH_FLG%c%s%cFX_REQD%c%s%cMAKER%c%s%cMAKER_DT%c%s%cAUTHORISOR%c%s%cCHECKER_DT%c%s%cDL_TYPE%c26%cEX_ARENA%c%s%cENTRY%cW%cDL_CLASS%c1%cR_TRANS_CODE%c%s%cR_SETT_CODE%c%s%cR_DELAY%cP%cR_TYPE%c00%cSEBI_REPORTED%cN%cALLOW_PARTIAL%cY%cINTERFII_FLG%c%s%cSPOTTRD_IND%c%s%cCLN_DEPOACC%c%s%cGENDP_FLG%c%s%cTRD_EXCH%c%s%cTRD_MKT_TYPE%c%s%cTRD_SETL_NO%c%s%cPAYIN_DT%c%s%cPAYOUT_DT%c%s%c",fldsepr,valsepr,p_wi_deal_pms_struct_h->h_sell_client,fldsepr, valsepr,p_wi_deal_pms_struct_h->h_identiy_no,fldsepr, valsepr,p_wi_deal_pms_struct_h->h_dealcd,fldsepr, valsepr,p_wi_deal_pms_struct_h->h_instr_isin,fldsepr, valsepr,p_wi_deal_pms_struct_h->h_qty,fldsepr, valsepr,p_wi_deal_pms_struct_h->h_deal_date,fldsepr, valsepr,p_wi_deal_pms_struct_h->h_cost,fldsepr, valsepr,p_wi_deal_pms_struct_h->h_setldt,fldsepr, valsepr,p_wi_deal_pms_struct_h->h_net_amt,fldsepr, valsepr,p_wi_deal_pms_struct_h->h_domestic_cpclt,fldsepr, valsepr,p_wi_deal_pms_struct_h->h_clh_flg,fldsepr, valsepr,p_wi_deal_pms_struct_h->h_fx_reqd,fldsepr, valsepr,p_wi_deal_pms_struct_h->h_maker,fldsepr, valsepr,p_wi_deal_pms_struct_h->h_maker_dt,fldsepr, valsepr,p_wi_deal_pms_struct_h->h_checker,fldsepr, valsepr,p_wi_deal_pms_struct_h->h_checker_dt,fldsepr, valsepr,fldsepr, valsepr,p_wi_deal_pms_struct_h->h_ex_arena,fldsepr, valsepr,fldsepr, valsepr,fldsepr, valsepr,l_r_trans_code,fldsepr, valsepr,l_r_sett_code,fldsepr, valsepr,fldsepr, valsepr,fldsepr, valsepr,fldsepr, valsepr,fldsepr, valsepr,chr_inter_fii_flg,fldsepr, valsepr,p_wi_deal_pms_struct_h->h_isspotdl,fldsepr,valsepr,p_wi_deal_pms_struct_h->h_buy_client,fldsepr, valsepr,chr_dpgen_flg,fldsepr,valsepr,p_wi_deal_pms_struct_h->h_trd_exch,fldsepr,valsepr,p_wi_deal_pms_struct_h->h_trd_mkt_type,fldsepr,valsepr,p_wi_deal_pms_struct_h->h_trd_setl_no,fldsepr,valsepr,p_wi_deal_pms_struct_h->h_payin_dt,fldsepr,valsepr,p_wi_deal_pms_struct_h->h_payout_dt,fldsepr);

	
	printf("\n ---- environ_data ----%s\n",l_environ_data);
	printf("\n ---- param_data ----%s\n",l_procdata);

	printf("\n --- dbdesc .. [%s]\n",dbdesc);

	printf("\n ---- Going to call the Stored Procedure [%d]\n",sqlca.sqlcode);


	EXEC SQL AT :dbdesc CALL SP_INTL_DEAL('wrp_GBGenTrdAllcFleFn',:l_environ_data,:l_procdata,'KAL','',:l_error);
        printf("\n l_error :[%s]",l_error);

	if(sqlca.sqlcode !=0)
	{
		printf(" -- Error returned from SP_INTL_DEAL ... [%s]\n",sqlca.sqlerrm.sqlerrmc);
                return(APL_FAILURE);
	}

       printf("\n ERROR FROM SP_INTL_DEAL l_error:[%s] FOR CLIENT:[%s] AND IDENTIY:[%s]",l_error,p_wi_deal_pms_struct_h->h_sell_client,p_wi_deal_pms_struct_h->h_identiy_no);

        if(strstr(l_error,"Timed out")!=NULL)
        {
        	printf(" -- Server Timed Out \n");
                return(APL_FAILURE);
        }
	else if((strstr(l_error,"EOD has already started")!=NULL) || (strstr(l_error,"BOD has not finished")!=NULL))
	{
		printf(" -- EOD/BOD is in progress ....\n");
                CO_InsertErr(l_debug_info_ptr,
                             ERR_EOD_STARTED,
                             APL_NULL_STRING,
                             APL_NULL_STRING,
                             APL_NULL_STRING,
                             __LINE__,
                             __FILE__);
                return(APL_FAILURE);
	} 
        else if(strcmp(l_error,"SUCCESS") != 0) 
        {
             printf(" Failure from SP_INTL_DEAL Of CUSTODY");
/**
                CO_InsertErr(l_debug_info_ptr,
                             ERR_DEAL_TRANSFER,
                             l_error,
                             APL_NULL_STRING,
                             APL_NULL_STRING,
                             __LINE__,
                             __FILE__);
****/
                return(APL_FAILURE);
        }

	printf(" --- returning Success from WebPmsDlTransfer\n");
	return(APL_SUCCESS);

        RETURN_SUCCESS :
        {
                fprintf(APL_OUT_FILE,"Leaving processtion WebPmsDlTransfer Successfully\n");
                printf("\n Leaving processtion WebPmsDlTransfer Successfully\n");
        }

        RETURN_FAILURE  :
        {
                fprintf(APL_OUT_FILE,"Leaving processtion WebPmsDlTransfer Unsuccessfully\n");
                return(APL_FAILURE);
        }

}

int WI_CreateDL(WI_DEAL_PMS_STRUCT_H *p_wi_deal_pms_struct_h,INTL_ENV_DATA_STRUCT_H *l_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
      printf("\n Inside WI_CreateDL");

      WI_DEAL_STRUCT_H *l_wi_deal_struct_h;
      WI_DEAL_STRUCT_I *l_wi_deal_struct_i;
 
      l_wi_deal_struct_h =  (WI_DEAL_STRUCT_H *)calloc(1,sizeof(WI_DEAL_STRUCT_H));
      APL_MALLOC_FAIL(l_wi_deal_struct_h);
      memset(l_wi_deal_struct_h,NULL,sizeof(WI_DEAL_STRUCT_H));

      l_wi_deal_struct_i =  (WI_DEAL_STRUCT_I *)calloc(1,sizeof(WI_DEAL_STRUCT_I));
      APL_MALLOC_FAIL(l_wi_deal_struct_i);
      memset(l_wi_deal_struct_i,NULL,sizeof(WI_DEAL_STRUCT_I));

      strcpy(l_wi_deal_struct_h->h_client,p_wi_deal_pms_struct_h->h_sell_client);
      strcpy(l_wi_deal_struct_h->h_identiy_no,p_wi_deal_pms_struct_h->h_identiy_no);
      strcpy(l_wi_deal_struct_h->h_deal_cd,p_wi_deal_pms_struct_h->h_dealcd);
      strcpy(l_wi_deal_struct_h->h_instr_code,p_wi_deal_pms_struct_h->h_instr_isin);
      l_wi_deal_struct_h->h_qty = p_wi_deal_pms_struct_h->h_qty;
      strcpy(l_wi_deal_struct_h->h_deal_date,p_wi_deal_pms_struct_h->h_deal_date);
      l_wi_deal_struct_h->h_cost = p_wi_deal_pms_struct_h->h_cost;
      strcpy(l_wi_deal_struct_h->h_setl_date,p_wi_deal_pms_struct_h->h_setldt);
      l_wi_deal_struct_h->h_net_amt = p_wi_deal_pms_struct_h->h_net_amt;
      strcpy(l_wi_deal_struct_h->h_domestic_cpclt,p_wi_deal_pms_struct_h->h_domestic_cpclt);
      strcpy(l_wi_deal_struct_h->h_clh_flag,p_wi_deal_pms_struct_h->h_clh_flg);
      strcpy(l_wi_deal_struct_h->h_fx_reqd,p_wi_deal_pms_struct_h->h_fx_reqd);
      strcpy(l_wi_deal_struct_h->h_maker,p_wi_deal_pms_struct_h->h_maker);
      strcpy(l_wi_deal_struct_h->h_maker_dt,p_wi_deal_pms_struct_h->h_maker_dt);
      strcpy(l_wi_deal_struct_h->h_checker,p_wi_deal_pms_struct_h->h_checker);
      strcpy(l_wi_deal_struct_h->h_checker_dt,p_wi_deal_pms_struct_h->h_checker_dt);
      strcpy(l_wi_deal_struct_h->h_deal_stat,"AA");
      strcpy(l_wi_deal_struct_h->h_access_stamp,p_wi_deal_pms_struct_h->h_access_stamp);
      strcpy(l_wi_deal_struct_h->h_exch_code,p_wi_deal_pms_struct_h->h_trd_exch);
      strcpy(l_wi_deal_struct_h->h_mkt_type,p_wi_deal_pms_struct_h->h_trd_mkt_type);

      //Inserting 1st Deal
      printf("\n Inserting 1st deal in WI_DEAL");

      EXEC SQL INSERT INTO WI_DEAL VALUES (:l_wi_deal_struct_h:l_wi_deal_struct_i);
      IS_ANY_ORA_ERROR_AND_DUPLICATE(MAP_DET_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)      
 
      //Inserting 2nd Deal
      printf("\n Inserting 2nd deal in WI_DEAL");
      memset(l_wi_deal_struct_h->h_client,NULL,sizeof(l_wi_deal_struct_h->h_client));
      strcpy(l_wi_deal_struct_h->h_client,p_wi_deal_pms_struct_h->h_buy_client);
      printf("\n 2nd Client is :[%s]",l_wi_deal_struct_h->h_client);

      EXEC SQL SELECT DECODE(:l_wi_deal_struct_h->h_deal_cd,'1','2','2','1') INTO :l_wi_deal_struct_h->h_deal_cd FROM DUAL;
      IS_ANY_ORA_ERROR  
      printf("\n 2nd deal Code is :[%s]",l_wi_deal_struct_h->h_deal_cd);

      EXEC SQL INSERT INTO WI_DEAL VALUES (:l_wi_deal_struct_h:l_wi_deal_struct_i);
      IS_ANY_ORA_ERROR_AND_DUPLICATE(MAP_DET_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

      printf("\n returning successfully from WI_CreateDL");
 
      return(APL_SUCCESS);

        RETURN_SUCCESS :
        {
                fprintf(APL_OUT_FILE,"Leaving processtion WI_CreateDL Successfully\n");
                printf("\n Leaving processtion WI_CreateDL Successfully\n");
        }

        RETURN_FAILURE  :
        {
                fprintf(APL_OUT_FILE,"Leaving processtion WI_CreateDL Unsuccessfully\n");
                return(APL_FAILURE);
        }
}
