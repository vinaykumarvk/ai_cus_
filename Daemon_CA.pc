/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         :      Corporate Actions
 *
 * File Name           :      Daemon_CA.pc
 *
 * Description         :      Contains Wrapper Functions Related to CA
 *
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author           Description        RFS No.
 * ---------   --------  ---------------  ------------------   ---------
 * 18/01/2006   1.2        Smita Bhat        New File          Base Version
 * 20/01/2006	 1.3			Smita Bhat			Added Ret Val 		HDFCCA_027
 * 														of Corp ID
 * 26/08/2020   1.4        kotubabu N        Linux Migration    Kotak Implementation
 * 
 *************************************************************************/
#include "stdio_64.h"
#include <unistd.h>
#include "MS_Swift.h"
#include "CA_InterFace.h"
#include "CA_Common.h"
#include "Intellect_Common.h"
#include "CR_Common.h"
#include "MT_Interface.h"
#include "CO_Commdef.h"
#include "BT_Common.h" /** Biju **/

EXEC SQL INCLUDE SQLCA;

/** Added For Moving constants to macro's -- Begin **/
#define APL_PARAMSTR_LEN 	4000
#define APL_ERRORDESC_LEN 	4000
#define APL_ENVSTR_LEN 		2000
#define APL_FUNCNAME_LEN	100
#define APL_RETVAL_LEN		4000

#define APL_AUDITDATA_LEN	4000
#define APL_DATAKEY_LEN		4000
#define APL_ENTITYNAME_LEN	100
#define APL_COMMENTS_LEN	4000
/** Added For Moving constants to macro's -- End **/
/* Added by kotubabu for Linux Migration -Start*/
#ifdef OS_LINUX
FILE *l_logfile; 
#else
FILE *l_logfile = APL_OUT_FILE; /** Implemented incase log required to change to some logfile, Just Change the poiter to required file created **/
#endif
/* Added by kotubabu for Linux Migration -End*/



/** Global VAriable Not Required -- Moved to Processfailure function -- Biju 
char *chr_h_error_desc	=	(char *)NULL; 
**/
DEBUG_INFO_STRUCT_H 	**l_debug_info_ptr			=	(DEBUG_INFO_STRUCT_H  **)NULL;
DEBUG_INFO_STRUCT_H	*l_debug_info_struct_h_tmp	=	(DEBUG_INFO_STRUCT_H  *)NULL; 

// AIX - Warnings
int   CO_Rtv_ErrString(DEBUG_INFO_STRUCT_H **l_debug_info_ptr,char *p_error_desc);

int main(int argc,char **argv)   //AIX-Warnings Removal
{
   /* Added by kotubabu for Linux Migration-Start*/
    #ifdef OS_LINUX
     l_logfile = APL_OUT_FILE;
    #endif
   /* Added by kotubabu for Linux Migration-End*/
	int   CO_Rtv_EnvStruct(INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,char *p_env_str);
	int   CA_Proc_EvntAutPopulate(CA_CAEVNT_AUT_STRUCT_H *p_ca_caevnt_aut_struct_h,char *chr_p_param_str);
	int   CA_Proc_EvntPopulate(CA_CAEVENT_STRUCT_H *p_ca_caevent_struct_h,char *chr_p_param_str);
	int   CA_Proc_EntPopulate(CA_CAENTITLEMENT_STRUCT_H *p_ca_caentitlement_struct_h,char *chr_p_param_str);
	int   CA_Proc_EntAutPopulate(CA_CAENTL_AUT_STRUCT_H *p_ca_caentl_aut_struct_h,char *chr_p_param_str);
	int   CA_Proc_PymtPopulate(CA_CACHEQUE_STRUCT_H *p_ca_cacheque_struct_h,char *chr_p_param_str);
	int   CA_Proc_RhtsPopulate(CA_CARTSPROC_STRUCT_H *l_ca_cartsproc_struct_h_ptr,char *chr_p_param_str);
	int   CA_Proc_RhtsAutPopulate(CA_RHTS_SUTH_STRUCT_H *p_ca_rhts_suth_struct_h,char *chr_p_param_str);
	int   CA_Proc_PayPopulate(CA_CAPYMT_AUT_STRUCT_H *p_ca_capymt_aut_struct_h,char *chr_p_param_str);
	int   CA_Proc_GlblPymtPopulate(CA_CAGLPYMT_STRUCT_H *p_ca_caglpymt_struct_h,char *chr_p_param_str);
	/* Pradeep - HDFCCA_015 - CA_Allotment 
	int 	CA_Proc_AllotmentPopulate(CA_ALLOT_STRUCT_H *p_ca_allot_struct_h,char *chr_p_param_str);
*/      /*vaibhav CA_ALLOTMENT HDFCCA015*/
    int   Populate_CA_NIS_ALLOTMENT(CA_NIS_ALLOTMENT_STRUCT_H *p_ca_nis_allotment_struct_h,char *chr_p_param_str);
	int   Populate_CA_PUTCALL_APP(CA_PUTCALL_APP_STRUCT_H *p_ca_putcall_app_struct_h,char * p_param_data);
	void  CO_Rtv_DataString(char *chr_p_str, char *p_lbl,char *p_data_value);
	void  CO_Rtv_DataDbl(char *chr_p_str, char *p_lbl,double *p_data_value);
	void  CO_Rtv_DataInt(char *chr_p_str, char *p_lbl,int *p_data_value);
	int   CO_Rtv_ErrStruct(char *p_error_desc,DEBUG_INFO_STRUCT_H **l_debug_info_ptr);
	int 	Batch_Proc_MarkSuccessProcess(char *p_ora_rowid,char *p_return_value);
	/*Added by Chirag for Grid form for HDFCCA_016 CA_Bidding*/
	int 	Batch_Proc_GridMarkSuccessProcess(char *p_ora_rowid,char *p_return_value,char *p_access_stamp);
	/*Added by Chirag for Grid form for HDFCCA_016 CA_Bidding*/

	int 	Proc_MarkFailProcess(char *p_ora_rowid, DEBUG_INFO_STRUCT_H **l_debug_info_ptr);
	
	EXEC SQL BEGIN DECLARE SECTION;
	char	h_ora_rowid[APL_ROWID_LEN];
	char 	chr_h_param_str[APL_PARAMSTR_LEN] 	= APL_NULL_STRING;
	char  chr_h_error_str[APL_ERRORDESC_LEN] 	= APL_NULL_STRING;
	char 	chr_h_env_str[APL_ENVSTR_LEN] 		= APL_NULL_STRING;
	char 	chr_h_func_name[APL_FUNCNAME_LEN] 	= APL_NULL_STRING;
	char 	chr_l_return_value[APL_RETVAL_LEN] 	= APL_NULL_STRING;
	char	l_data_fld_sep_str[2] 					= APL_NULL_STRING;
	/*Added for API Call from CSGL Audit trailing - PANITH [START] */
	char    chr_h_param_str_corp_id[100]        = APL_NULL_STRING;
	char    chr_l_corp_id[21]                   = APL_NULL_STRING;
	char    chr_h_trigger[4] 		            = APL_NULL_STRING;
	/*Added for API Call from CSGL Audit trailing - PANITH [START] */

	//short i_func_param_str	=	0;//AIX Warning Removal
	short	i_ora_rowid			=	0;
	short i_func_name			=	0;
	short i_env_str			=	0;
	short i_proc_data			=	0;
	short i_error_str			=	0;
	short int_ret_val			=	0;

   /*Changes - Base Version -CA - Smita*/
   char  chr_l_audit_data[APL_AUDITDATA_LEN] 	= APL_NULL_STRING;
   char  chr_h_param_str_temp[APL_PARAMSTR_LEN] = APL_NULL_STRING;
   char  chr_l_data_key[APL_DATAKEY_LEN] 			= APL_NULL_STRING;
   char  chr_h_entity_name[APL_ENTITYNAME_LEN] 	= APL_NULL_STRING;
   char  chr_h_comments[APL_COMMENTS_LEN] 		= APL_NULL_STRING;
	/*Changes - Base Version -CA - Smita*/

	/** Data Quivalencing is not required as its already takecare by makefile change
		EXEC SQL VAR h_ora_rowid IS STRING;
		EXEC SQL VAR chr_h_error_desc IS STRING;
		EXEC SQL VAR chr_h_param_str IS STRING;
		EXEC SQL VAR chr_h_error_str IS STRING;
		EXEC SQL VAR chr_h_env_str IS STRING;
		EXEC SQL VAR chr_h_func_name IS STRING;
	*/
	/*Changes - Base Version -CA - Smita*/
	/** Data Quivalencing is not required as its already takecare by makefile change
  		EXEC SQL VAR chr_h_param_str_temp IS STRING;
   	EXEC SQL VAR chr_l_audit_data IS STRING;
   	EXEC SQL VAR chr_l_data_key IS STRING;
   	EXEC SQL VAR chr_h_entity_name IS STRING;
   	EXEC SQL VAR chr_h_comments IS STRING;
	*/
	/*Changes - Base Version -Ca - Smita*/
	EXEC SQL END DECLARE SECTION;
	
	struct sqlca sqlca;
   
	CA_CAEVNT_AUT_STRUCT_H 		*l_ca_caevnt_aut_struct_h 	= (CA_CAEVNT_AUT_STRUCT_H *)NULL;
	CA_CAEVENT_STRUCT_H 			*l_ca_caevent_struct_h 		= (CA_CAEVENT_STRUCT_H *)NULL;
	CA_CAENTITLEMENT_STRUCT_H 	*l_ca_caentitlement_struct_h	=	(CA_CAENTITLEMENT_STRUCT_H *)NULL;
	CA_CAENTL_AUT_STRUCT_H 		*l_ca_caentl_aut_struct_h	=	(CA_CAENTL_AUT_STRUCT_H *)NULL;
	CA_CACHEQUE_STRUCT_H 		*l_ca_cacheque_struct_h		=	(CA_CACHEQUE_STRUCT_H *)NULL;
	CA_CAPYMT_AUT_STRUCT_H 		*l_ca_capymt_aut_struct_h	=	(CA_CAPYMT_AUT_STRUCT_H *)NULL;
	CA_RHTS_SUTH_STRUCT_H 		*l_ca_rhts_suth_struct_h	=	(CA_RHTS_SUTH_STRUCT_H *)NULL;
	CA_CARTSPROC_STRUCT_H 		*l_ca_cartsproc_struct_h	=	(CA_CARTSPROC_STRUCT_H *)NULL;
	CA_CAGLPYMT_STRUCT_H  		*l_ca_caglpymt_struct_h		=	(CA_CAGLPYMT_STRUCT_H *)NULL;
	//CA_CANOTE_STRUCT_H 			*l_ca_canote_struct_h		=	(CA_CANOTE_STRUCT_H *)NULL;//AIX Warning Removal
	CA_NIS_BID_STRUCT_H        *l_ca_nis_bid_struct_h     =  (CA_NIS_BID_STRUCT_H *)NULL;
	/* CA_ALLOT_STRUCT_H				*l_ca_allot_struct_h			=	(CA_ALLOT_STRUCT_H *)NULL;			 Pradeep - HDFCCA_015 - CA_Allotment */ 
	CA_APPLICATION_STRUCT_H          *l_ca_application_struct_h = (CA_APPLICATION_STRUCT_H *)NULL;
       CA_NIS_ALLOTMENT_STRUCT_H	 *l_ca_nis_allotment_struct_h = (CA_NIS_ALLOTMENT_STRUCT_H *)NULL;
    	CA_RTBB_ALLOTMENT_STRUCT_H        *l_ca_rtbb_allotment_struct_h     =  (CA_RTBB_ALLOTMENT_STRUCT_H *)NULL;
	CA_NIS_APPLICATION_STRUCT_H        *l_ca_nis_application_struct_h     =  (CA_NIS_APPLICATION_STRUCT_H *)NULL;
	CA_PUTCALL_APP_STRUCT_H          *l_ca_putcall_app_struct_h = (CA_PUTCALL_APP_STRUCT_H *)NULL;

	int int_p_result	=	0;
	/**unsigned long l_sleep_microseconds 	= 	0; 
	unsigned long l_sleep_seconds			=	0;	**/
	
	int  l_sleep_microseconds 	= 	0; 
	 int l_sleep_seconds			=	0;	
/* -- Biju
 * FILE *chr_finifile	=	(FILE *)NULL;
	char chr_inifile[PATH_LENGTH],chr_l_uname[APL_USERID_LEN],chr_l_passwd[APL_PASSWD_LEN],chr_custody_id_b[APL_USERID_LEN],chr_buffer[KEY_LENGTH];
	DEBUG_INFO_STRUCT_H *l_debuginfo = (DEBUG_INFO_STRUCT_H *)NULL;
**/

	/** INTL_ENV_DATA_STRUCT_H l_intl_env_data_h; -- Not used anywhere can be removed -- Biju **/
	INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h;
/** -- Biju	
	memset(chr_inifile,APL_NULL_CHAR,PATH_LENGTH);
	memset(chr_buffer,APL_NULL_CHAR,KEY_LENGTH);
	memset(chr_l_uname,APL_NULL_CHAR,40);
	memset(chr_l_passwd,APL_NULL_CHAR,40);
*/

   p_intlenv_data_struct_h =  (INTL_ENV_DATA_STRUCT_H *)calloc(1,sizeof(INTL_ENV_DATA_STRUCT_H));
   APL_MALLOC_FAIL(p_intlenv_data_struct_h);
   memset(p_intlenv_data_struct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H));


	if ( ( l_debug_info_struct_h_tmp = (DEBUG_INFO_STRUCT_H *)calloc(1,sizeof(DEBUG_INFO_STRUCT_H)) ) == NULL )
			 APL_GOBACK_FAIL ;

	if ( ( (l_debug_info_ptr) = (DEBUG_INFO_STRUCT_H **)calloc(1,sizeof(DEBUG_INFO_STRUCT_H *)) ) == NULL )	
			 APL_GOBACK_FAIL ;
	

	if ( argc != 2)
	{
		CO_ProcMonitor(l_logfile,"\n Invalid Sleep Time For Daemon CA... \n ",NULL,NULL);
		APL_GOBACK_FAIL
	}
	else
	{
		fprintf(l_logfile,"\n ******************  Daemon Started With Sleep Time :%s:****************\n",argv[1]);
		sscanf(argv[1],"%d.%d",&l_sleep_seconds,&l_sleep_microseconds);
	   l_sleep_microseconds = l_sleep_microseconds * 10000;	
	}

	/*
	 * strcpy(chr_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_inifile,"/intl_sun.cfg");
	if ( (chr_finifile = fopen(chr_inifile,"r") ) == NULL)
	        APL_GOBACK_FAIL;

   APL_FETCH_DB_LOGIN_DETAILS(chr_finifile, chr_custody_id_b, chr_l_uname, chr_l_passwd , l_logfile , &l_debuginfo)
   EXEC SQL CONNECT :chr_l_uname IDENTIFIED BY :chr_l_passwd; 
	 *	 -- Its all done in the below functioon Biju
	 * */

	if(CO_Get_DBConnect(l_debug_info_ptr) == APL_FAILURE)
	{
		CO_ProcMonitor(l_logfile,"Failed To Get Connection ",NULL,NULL);
	   APL_GOBACK_FAIL;
	}


   /* -- Biju
	 * if(sqlca.sqlcode != 0)                                          
   {
     ltoa_r(sqlca.sqlcode,chr_buffer,KEY_LENGTH-1);
     CO_InsertErr(&l_debuginfo,DB_ERR_NO,chr_buffer,
                 APL_NULL_STRING,APL_NULL_STRING,
                 __LINE__,__FILE__);
     APL_GOBACK_FAIL

   }*/

	if ( CO_RtvSysParams(l_debug_info_ptr) == APL_FAILURE)
	{
		CO_ProcMonitor(l_logfile,"Returned unsuccessfully from CO_RtvSysParams ",NULL,NULL);
		APL_GOBACK_FAIL
	}

	/** Updating Daemon Status To 1, -- Biju **/	
	EXEC SQL UPDATE PRO_DAEMON_STATUS 
				SET STATUS = 1 
				WHERE PROC_NAME = 'Daemon_CA';

	IS_ANY_ORA_ERROR;

	CO_ProcMonitor(l_logfile,"Updated Daemon CA Status",NULL,NULL);

	sprintf(l_data_fld_sep_str,"%c",DATA_FIELD_SEPRTR);
	strcat(l_data_fld_sep_str,APL_NULL_STRING);
	
	CO_ProcMonitor(l_logfile,"Entering While Loop Daemon CA",NULL,NULL);

	while(1)
	{
          /*ICICIretro-12-06-2009 By Santhoshi*/
          /* added by Lakshmi Swetha for UAT_Int_54 - start*/
          CO_FreeErrLst(l_debug_info_ptr);
          CO_FreeErrLst(&l_debug_info_struct_h_tmp);
          /* added by Lakshmi Swetha for UAT_Int_54 - end */
          /*ICICIretro-12-06-2009 By Santhoshi*/
		/** Infinite While loop looking for new request in pro_request_ca **/	

		/***************************************************************************
		JC - Commented - If there are unprocessed requests, Daemon should not sleep 
		This code for sleep shifted from here and moved after request check query - - Retrofit by Manasi for ISKB_7759 Common Issues Fixes
      if(l_sleep_seconds != 0)
      {
         sleep(l_sleep_seconds);
      }
      usleep(l_sleep_microseconds);
		JC - Commented - If there are unprocessed requests, Daemon should not sleep - - Retrofit by Manasi for ISKB_7759 Common Issues Fixes
		***************************************************************************/

		strcpy(h_ora_rowid,APL_NULL_STRING);	
		i_ora_rowid = -1;
		strcpy(chr_h_param_str,APL_NULL_STRING);
		strcpy(chr_h_error_str,APL_NULL_STRING);
		strcpy(chr_h_env_str,APL_NULL_STRING);
		strcpy(chr_h_func_name,APL_NULL_STRING);
		strcpy(chr_l_return_value,APL_NULL_STRING);

		i_func_name	=	0;
		i_env_str	=	0;
		i_proc_data	=	0;
		i_error_str	=	0;

			/*Changes - Base Version CA - Smita*/
	   strcpy(chr_h_param_str_temp,APL_NULL_STRING);
	   strcpy(chr_l_audit_data,APL_NULL_STRING);
	   strcpy(chr_l_data_key,APL_NULL_STRING);
	   strcpy(chr_h_error_str,APL_NULL_STRING);	
			/*Changes - Base Version CA - Smita*/
		
		/** Selecting new record with status 0, It will be better to create index on status and request_seq in pro_daemon_ca **/
		EXEC SQL SELECT ROWID 
					INTO :h_ora_rowid:i_ora_rowid 
					FROM PRO_REQUEST_CA 
					WHERE REQUEST_SEQ = (SELECT 	MIN(REQUEST_SEQ) 
															FROM PRO_REQUEST_CA 
															WHERE STATUS = '0') 
					AND ROWNUM < 2 FOR UPDATE NOWAIT;
		 
		
		if (sqlca.sqlcode == -54)
		{
			/** This error does not occur frequently..mainly at developement stage when user try to delete the record through pl/sql **/
			continue;
		}
		IS_ANY_ORA_ERROR

		if (sqlca.sqlcode == 1403)
		{
			EXEC SQL COMMIT;
			IS_ANY_ORA_ERROR;

			/***************************************************************************
			JC - Daemon should sleep only if there are unprocessed requests - Retrofit by Manasi for ISKB_7759 Common Issues Fixes*/
			if(l_sleep_seconds != 0)
			{
				sleep(l_sleep_seconds);
			}
			usleep(l_sleep_microseconds);
			/* JC - Daemon should sleep only if there are unprocessed requests - Retrofit by Manasi for ISKB_7759 Common Issues Fixes
			***************************************************************************/

			continue;
		}
		/** Updating Status to 1 indicating request already opicked up the daemon **/
		EXEC SQL UPDATE PRO_REQUEST_CA 
					SET STATUS = '1' 
					WHERE ROWID=:h_ora_rowid;
		IS_ANY_ORA_ERROR

		EXEC SQL COMMIT;

		IS_ANY_ORA_ERROR

		/** Selecting the Record **/
		EXEC SQL SELECT 	PROC_NAME, 
			  					ENVIRON_DATA, 
								PROC_DATA , 
								ERROR_DET
					INTO 		:chr_h_func_name:i_func_name,
								:chr_h_env_str:i_env_str,
								:chr_h_param_str:i_proc_data,
								:chr_h_error_str:i_error_str 
					FROM 		PRO_REQUEST_CA 
					WHERE 	ROWID=:h_ora_rowid 
					FOR 		UPDATE NOWAIT;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"PRO_REQUEST_CA","FATAL ERR","ROWID");

		strcat(chr_h_env_str,l_data_fld_sep_str);
		strcat(chr_h_param_str,l_data_fld_sep_str);
		strcat(chr_h_error_str,l_data_fld_sep_str);
	
		

	   /** The Code is Already present above while loop, So we need to just ememset the memory here -- Biju 
		 * p_intlenv_data_struct_h =  (INTL_ENV_DATA_STRUCT_H *)calloc(1,sizeof(INTL_ENV_DATA_STRUCT_H));
	   APL_MALLOC_FAIL_LOC_A(p_intlenv_data_struct_h);
	   memset(p_intlenv_data_struct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H)); 
		 **/

	   memset(p_intlenv_data_struct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H)); 

		int_ret_val = CO_Rtv_EnvStruct(p_intlenv_data_struct_h,chr_h_env_str);
		/** chr_h_error_desc is not a global variable now. The code is moved to process failure function 
      chr_h_error_desc =  (char *)calloc(4000,sizeof(char));
      APL_MALLOC_FAIL_LOC_A(chr_h_error_desc);
      memset(chr_h_error_desc,NULL,sizeof(char));
		*/

		/*Changes - Base Version CA - smita*/
		strcpy(chr_h_entity_name,p_intlenv_data_struct_h->processtion);
	   CO_Rtv_DataString(chr_h_param_str,"COMMENTS",chr_h_comments);
	   /* Added for CSGL API Calling Avoiding Common Audit Trailing by PANITH [START] */
	   strcpy(chr_h_trigger,APL_NULL_STRING);
	   CO_Rtv_DataString(chr_h_param_str,"TRIGGER",chr_h_trigger);
	   if(!strcmp(chr_h_trigger,"API")){
		   strcpy(p_intlenv_data_struct_h->subprocess,"API");
		   printf("p_intlenv_data_struct_h->subprocess |%s|\n",p_intlenv_data_struct_h->subprocess);
	   }else{

      INTL_WARNING
	   strcpy(chr_h_param_str_temp,chr_h_param_str);
		int_ret_val = CO_PopulateAuditString(chr_h_entity_name,chr_h_param_str_temp,chr_l_audit_data,chr_l_data_key);
	
		if((strcmp(chr_l_audit_data,APL_NULL_STRING)!=0) && (strcmp(chr_l_data_key,APL_NULL_STRING)!=0))
		{
	    if ( APL_FAILURE==CO_Upd_AudLog_Chk_SysOnline(p_intlenv_data_struct_h,chr_l_audit_data,chr_l_data_key,chr_h_comments,l_debug_info_ptr))
		 {		
         Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         continue;
		 }
		/*Changes - Base Version CA - smita*/
      }
	  }
	  /* Added for CSGL API Calling Avoiding Common Audit Trailing by PANITH [END] */
      S_NON_DCE_ERASE_DUMMY_WARNING;

		if (strlen(chr_h_error_str) != 0)
			int_ret_val = CO_Rtv_ErrStruct(chr_h_error_str,l_debug_info_ptr);


		if (strcmp(chr_h_func_name,"wrp_A_DbAuthEventFn") == 0)
		{
			INTL_WARNING
		   l_ca_caevnt_aut_struct_h =  (CA_CAEVNT_AUT_STRUCT_H *)calloc(1,sizeof(CA_CAEVNT_AUT_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_ca_caevnt_aut_struct_h);
		   memset(l_ca_caevnt_aut_struct_h,NULL,sizeof(CA_CAEVNT_AUT_STRUCT_H));

			int_ret_val = CA_Proc_EvntAutPopulate(l_ca_caevnt_aut_struct_h,chr_h_param_str);
         CO_ProcMonitor(l_logfile,"Now calling CA_Mod_EventAuth\n",NULL,p_intlenv_data_struct_h);
         if(   ( CA_Mod_EventAuth(  l_ca_caevnt_aut_struct_h,
                                    p_intlenv_data_struct_h,
                                    l_debug_info_ptr)  == APL_SUCCESS )
            &&
               CHECK_EXISTANCE_OF_ERROR
            )
         {
            CO_ProcMonitor(l_logfile,"Returned from CA_Mod_EventAuth\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value); 
         }
         else
         {
            CO_ProcMonitor(l_logfile,"Returned from CA_Mod_EventAuth\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
         }
			APL_FREE(l_ca_caevnt_aut_struct_h);
		}
		else if (strcmp(chr_h_func_name,"wrp_A_DbUpdEventFn") == 0)
		{
			INTL_WARNING
		   l_ca_caevent_struct_h =  (CA_CAEVENT_STRUCT_H *)calloc(1,sizeof(CA_CAEVENT_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_ca_caevent_struct_h);
		   memset(l_ca_caevent_struct_h,NULL,sizeof(CA_CAEVENT_STRUCT_H));

			int_ret_val = CA_Proc_EvntPopulate(l_ca_caevent_struct_h,chr_h_param_str);
         

        if( !strcmp ( l_ca_caevent_struct_h->h_evt_class , EVT_REDOM ) )
         {
            CO_ProcMonitor(l_logfile,"Now calling A_RedenomEvtMnt\n",NULL,p_intlenv_data_struct_h);

            if(   (CA_Proc_RedenominationEventMnt(  l_ca_caevent_struct_h,
                                       p_intlenv_data_struct_h,
                                       l_debug_info_ptr)  == APL_SUCCESS )
                  &&
                     CHECK_EXISTANCE_OF_ERROR
                  )
               {
                  CO_ProcMonitor(l_logfile,"Returned from CA_Proc_RedenominationEventMnt\n",NULL,p_intlenv_data_struct_h);
						int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
               }
               else
               {
                  CO_ProcMonitor(l_logfile,"Returned from CA_Proc_RedenominationEventMnt\n",NULL,p_intlenv_data_struct_h);
						int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
               }
			}

      
        else
         {
         	CO_ProcMonitor(l_logfile,"Now calling CA_Mod_Event\n",NULL,p_intlenv_data_struct_h);
         	if(   (CA_Mod_Event(  l_ca_caevent_struct_h,
                                 p_intlenv_data_struct_h,
                                 l_debug_info_ptr)  == APL_SUCCESS )
            &&
               CHECK_EXISTANCE_OF_ERROR
            	)
         	{
            	CO_ProcMonitor(l_logfile,"Returned from CA_Mod_Event\n",NULL,p_intlenv_data_struct_h);
					/*Smita - HDFCCA_027 - Return Corp_ID if Success */
					if (strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_INPUT) == 0)
					{
						strcpy(chr_l_return_value,l_data_fld_sep_str);
						strcat(chr_l_return_value,l_ca_caevent_struct_h->h_corp_id);
						APL_IF_DEBUG
						{
							fprintf(l_logfile,"CORP ID to be Returned = |%s|\n",l_ca_caevent_struct_h->h_corp_id);
							fprintf(l_logfile,"Return Value with Success = |%s|\n",chr_l_return_value);
						}
					}
					/*Smita - HDFCCA_027 - Return Corp_ID if Success */
					int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         	}
         	else
         	{
            	CO_ProcMonitor(l_logfile,"Returned from CA_Mod_Event\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
          	}
         }

			APL_FREE(l_ca_caevent_struct_h);
		}

		else if (strcmp(chr_h_func_name,"wrp_A_RedenomEvtMntFn") == 0)
		{
			INTL_WARNING
		   l_ca_caevent_struct_h =  (CA_CAEVENT_STRUCT_H *)calloc(1,sizeof(CA_CAEVENT_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_ca_caevent_struct_h);
		   memset(l_ca_caevent_struct_h,NULL,sizeof(CA_CAEVENT_STRUCT_H));

			int_ret_val = CA_Proc_EvntPopulate(l_ca_caevent_struct_h,chr_h_param_str);

         CO_ProcMonitor(l_logfile,"Now calling CA_Proc_RedenominationEventMnt\n",NULL,p_intlenv_data_struct_h);
         if(   (CA_Proc_RedenominationEventMnt(  l_ca_caevent_struct_h,
                                 p_intlenv_data_struct_h,
                                 l_debug_info_ptr)  == APL_SUCCESS )
            &&
               CHECK_EXISTANCE_OF_ERROR
            )
         {
            CO_ProcMonitor(l_logfile,"Returned from CA_Proc_RedenominationEventMnt\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(l_logfile,"Returned from CA_Proc_RedenominationEventMnt\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
          }

			APL_FREE(l_ca_caevent_struct_h);
		}

		else if (strcmp(chr_h_func_name,"wrp_A_DbUpdEntitlFn") == 0)
		{
			INTL_WARNING
		   l_ca_caentitlement_struct_h =  (CA_CAENTITLEMENT_STRUCT_H *)calloc(1,sizeof(CA_CAENTITLEMENT_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_ca_caentitlement_struct_h);
		   memset(l_ca_caentitlement_struct_h,NULL,sizeof(CA_CAENTITLEMENT_STRUCT_H));

			int_ret_val = CA_Proc_EntPopulate(l_ca_caentitlement_struct_h,chr_h_param_str);

         CO_ProcMonitor(l_logfile,"Now calling CA_Mod_Entitl\n",NULL,p_intlenv_data_struct_h);
         if(   (CA_Mod_Entitl(  l_ca_caentitlement_struct_h,
                                  p_intlenv_data_struct_h,
                                  l_debug_info_ptr) == APL_SUCCESS)
            &&
               CHECK_EXISTANCE_OF_ERROR
            )
         {
            CO_ProcMonitor(l_logfile,"Returned from CA_Mod_Entitl\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(l_logfile,"Returned from CA_Mod_Entitl\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

			APL_FREE(l_ca_caentitlement_struct_h);
		}
			/*Added by Chirag for HDFCCA_016 CA_Bidding*/
      else if (strcmp(chr_h_func_name,"wrp_A_CA_NIS_BID") == 0)
      {
         INTL_WARNING
         l_ca_nis_bid_struct_h = (CA_NIS_BID_STRUCT_H *)calloc(1,sizeof(CA_NIS_BID_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_ca_nis_bid_struct_h);
         memset(l_ca_nis_bid_struct_h,NULL,sizeof(CA_NIS_BID_STRUCT_H));

         int_ret_val = Populate_CA_NIS_BID(l_ca_nis_bid_struct_h,chr_h_param_str);

         CO_ProcMonitor(l_logfile,"Now calling MT_UpdCA_NIS_BID\n",NULL,p_intlenv_data_struct_h);
         if ((MT_UpdCA_NIS_BID(l_ca_nis_bid_struct_h,
                               p_intlenv_data_struct_h,
                               l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(l_logfile,"Returned from MT_UpdCA_NIS_BID Successfully\n",NULL,p_intlenv_data_struct_h);
            /*int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value); */
            int_ret_val = Batch_Proc_GridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_ca_nis_bid_struct_h->h_access_stamp);
         }
         else
         {
            CO_ProcMonitor(l_logfile,"Returned from MT_UpdCA_NIS_BID Failure\n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         APL_FREE(l_ca_nis_bid_struct_h);
      }
	/*Added by Chirag for HDFCCA_016 CA_Bidding*/
/*Added by Chirag on HDFCCA_010 & 007 for CA_RTBB_Allotment*/
      else if (strcmp(chr_h_func_name,"wrp_A_CA_RTBB_ALLOTMENT") == 0)
      {
         INTL_WARNING
         l_ca_rtbb_allotment_struct_h = (CA_RTBB_ALLOTMENT_STRUCT_H *)calloc(1,sizeof(CA_RTBB_ALLOTMENT_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_ca_rtbb_allotment_struct_h);
         memset(l_ca_rtbb_allotment_struct_h,NULL,sizeof(CA_RTBB_ALLOTMENT_STRUCT_H));

         int_ret_val = Populate_CA_RTBB_ALLOTMENT(l_ca_rtbb_allotment_struct_h,chr_h_param_str);

         CO_ProcMonitor(l_logfile,"Now calling MT_UpdCA_RTBB_ALLOTMENT\n",NULL,p_intlenv_data_struct_h);
         if ((MT_UpdCA_RTBB_ALLOTMENT(l_ca_rtbb_allotment_struct_h,
                               p_intlenv_data_struct_h,
                               l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(l_logfile,"Returned from MT_UpdCA_RTBB_ALLOTMENT Successfully\n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);	    
         }
         else
         {
            CO_ProcMonitor(l_logfile,"Returned from MT_UpdCA_RTBB_ALLOTMENT Failure\n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         APL_FREE(l_ca_rtbb_allotment_struct_h);
      }
/*Added by Chirag on HDFCCA_010 & 007 for CA_RTBB_Allotment*/
/*Added by Chirag on HDFCCA_014 for NIS APPLICATION*/
      else if (strcmp(chr_h_func_name,"wrp_A_CA_NIS_APPLICATION") == 0)
      {
         INTL_WARNING
         l_ca_nis_application_struct_h = (CA_NIS_APPLICATION_STRUCT_H *)calloc(1,sizeof(CA_NIS_APPLICATION_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_ca_nis_application_struct_h);
         memset(l_ca_nis_application_struct_h,NULL,sizeof(CA_NIS_APPLICATION_STRUCT_H));
         printf("Before Populate Struct");
         int_ret_val = Populate_CA_NIS_APPLICATION(l_ca_nis_application_struct_h,chr_h_param_str);
         printf("After Populate Struct");
         CO_ProcMonitor(l_logfile,"Now calling MT_UpdCA_NIS_APPLICATION\n",NULL,p_intlenv_data_struct_h);
         if ((MT_UpdCA_NIS_APPLICATION(l_ca_nis_application_struct_h,
                               p_intlenv_data_struct_h,
                               l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(l_logfile,"Returned from MT_UpdCA_NIS_APPLICATION Successfully\n",NULL,p_intlenv_data_struct_h);
            //int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
	    int_ret_val = Batch_Proc_GridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_ca_nis_application_struct_h->h_access_stamp);
         }
         else
         {
            CO_ProcMonitor(l_logfile,"Returned from MT_UpdCA_NIS_APPLICATION Failure\n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         APL_FREE(l_ca_nis_application_struct_h);
      }
      /*Added by Chirag on HDFCCA_014 for NIS APPLICATION*/


		else if (strcmp(chr_h_func_name,"wrp_A_DbAuthEntitlFn") == 0)
		{
			INTL_WARNING
		   l_ca_caentl_aut_struct_h =  (CA_CAENTL_AUT_STRUCT_H *)calloc(1,sizeof(CA_CAENTL_AUT_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_ca_caentl_aut_struct_h);
		   memset(l_ca_caentl_aut_struct_h,NULL,sizeof(CA_CAENTL_AUT_STRUCT_H));

			int_ret_val = CA_Proc_EntAutPopulate(l_ca_caentl_aut_struct_h,chr_h_param_str);

         CO_ProcMonitor(l_logfile,"Now calling CA_Mod_AuthEntitl\n",NULL,p_intlenv_data_struct_h);
         if(   (CA_Mod_AuthEntitl( l_ca_caentl_aut_struct_h,
                                  p_intlenv_data_struct_h,
                                  l_debug_info_ptr) == APL_SUCCESS)
            &&
               CHECK_EXISTANCE_OF_ERROR
            )
         {
            CO_ProcMonitor(l_logfile,"Returned from CA_Mod_AuthEntitl\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(l_logfile,"Returned from CA_Mod_AuthEntitl\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

			APL_FREE(l_ca_caentl_aut_struct_h);
		}

		else if (strcmp(chr_h_func_name,"wrp_A_BAuthRightsFn") == 0)
		{
			INTL_WARNING
		   l_ca_rhts_suth_struct_h =  (CA_RHTS_SUTH_STRUCT_H *)calloc(1,sizeof(CA_RHTS_SUTH_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_ca_rhts_suth_struct_h);
		   memset(l_ca_rhts_suth_struct_h,NULL,sizeof(CA_RHTS_SUTH_STRUCT_H));

			int_ret_val = CA_Proc_RhtsAutPopulate(l_ca_rhts_suth_struct_h,chr_h_param_str);

         CO_ProcMonitor(l_logfile,"Now calling CA_Proc_RightsAuth_B\n",NULL,p_intlenv_data_struct_h);
         if(   (CA_Proc_RightsAuth_B(  l_ca_rhts_suth_struct_h,
                           &int_p_result,
                           l_debug_info_ptr,
                           p_intlenv_data_struct_h) == APL_SUCCESS)
            &&
               CHECK_EXISTANCE_OF_ERROR
            )
         {
            CO_ProcMonitor(l_logfile,"Returned from A_DbAuthRightsFn\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(l_logfile,"Returned from A_DbAuthRightsFn\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

			APL_FREE(l_ca_rhts_suth_struct_h);
		}

		else if (strcmp(chr_h_func_name,"wrp_A_DbUpdPymtFn") == 0)
		{
			INTL_WARNING
		   l_ca_cacheque_struct_h =  (CA_CACHEQUE_STRUCT_H *)calloc(1,sizeof(CA_CACHEQUE_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_ca_cacheque_struct_h);
		   memset(l_ca_cacheque_struct_h,NULL,sizeof(CA_CACHEQUE_STRUCT_H));

		   strcpy(chr_h_param_str_temp,chr_h_param_str);
		   char  chr_h_param_str_2[APL_PARAMSTR_LEN] = APL_NULL_STRING;
		   strcpy(chr_h_param_str_2,APL_NULL_STRING);
		   strcpy(chr_h_param_str_2,chr_h_param_str);
			int_ret_val = CA_Proc_PymtPopulate(l_ca_cacheque_struct_h,chr_h_param_str);

         CO_ProcMonitor(l_logfile,"Now calling CA_ModPymt\n",NULL,p_intlenv_data_struct_h);
         if(   (CA_ModPymt( l_ca_cacheque_struct_h,
                              p_intlenv_data_struct_h,
                              l_debug_info_ptr,chr_h_param_str_2)  == APL_SUCCESS )
            &&
               CHECK_EXISTANCE_OF_ERROR
            )
         {
            CO_ProcMonitor(l_logfile,"Returned from CA_ModPymt\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			/* Added for CSGL API Calling Audit Trailing by PANITH [START] */
			if(!strcmp(chr_h_trigger,"API"))
			{ 
				strcpy(chr_l_corp_id,l_ca_cacheque_struct_h->h_corp_id);
			    printf("chr_l_corp_id |%c|\n",chr_l_corp_id);
				
				sprintf(chr_h_param_str_corp_id,"%c%s%c%s%c",DATA_FIELD_SEPRTR,"CORP_ID",DATA_VALUE_SEPRTR,chr_l_corp_id,DATA_FIELD_SEPRTR);
				
				strcat(chr_h_param_str_temp,chr_h_param_str_corp_id);
				int_ret_val = CO_PopulateAuditString(chr_h_entity_name,chr_h_param_str_temp,chr_l_audit_data,chr_l_data_key);
		        if((strcmp(chr_l_audit_data,APL_NULL_STRING)!=0) && (strcmp(chr_l_data_key,APL_NULL_STRING)!=0))
		        {
	                if ( APL_FAILURE==CO_Upd_AudLog_Chk_SysOnline(p_intlenv_data_struct_h,chr_l_audit_data,chr_l_data_key,chr_h_comments,l_debug_info_ptr))
		            {		
                        CO_ProcMonitor(l_logfile,"Returned from CO_Upd_AudLog_Chk_SysOnline as FAILURE\n",NULL,p_intlenv_data_struct_h);
		            }
			    }
			/* Added for CSGL API Calling Audit Trailing by PANITH [END] */
		/*Changes - Base Version CA - smita*/
      }
         }
         else
         {
            CO_ProcMonitor(l_logfile,"Returned from CA_ModPymt\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

			APL_FREE(l_ca_cacheque_struct_h);
		}

		else if (strcmp(chr_h_func_name,"wrp_A_BUpdRightsFn") == 0)
		{
			INTL_WARNING
		   l_ca_cartsproc_struct_h =  (CA_CARTSPROC_STRUCT_H *)calloc(1,sizeof(CA_CARTSPROC_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_ca_cartsproc_struct_h);
		   memset(l_ca_cartsproc_struct_h,NULL,sizeof(CA_CARTSPROC_STRUCT_H));

			int_ret_val = CA_Proc_RhtsPopulate(l_ca_cartsproc_struct_h,chr_h_param_str);

         CO_ProcMonitor(l_logfile,"Now calling CA_Proc_RightsUpd\n",NULL,p_intlenv_data_struct_h);
         if(   (CA_Proc_RightsUpd(l_ca_cartsproc_struct_h,
                              &int_p_result,
                              l_debug_info_ptr,
                              p_intlenv_data_struct_h) == APL_SUCCESS )
            &&
               CHECK_EXISTANCE_OF_ERROR
            )
         {
            CO_ProcMonitor(l_logfile,"Returned from CA_Proc_RightsUpd\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(l_logfile,"Returned from CA_Proc_RightsUpd\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

			APL_FREE(l_ca_cartsproc_struct_h);
		}

		else if (strcmp(chr_h_func_name,"wrp_A_DbAuthPymtFn") == 0)
		{
			INTL_WARNING
		   l_ca_capymt_aut_struct_h =  (CA_CAPYMT_AUT_STRUCT_H *)calloc(1,sizeof(CA_CAPYMT_AUT_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_ca_capymt_aut_struct_h);
		   memset(l_ca_capymt_aut_struct_h,NULL,sizeof(CA_CAPYMT_AUT_STRUCT_H));

			int_ret_val = CA_Proc_PayPopulate(l_ca_capymt_aut_struct_h,chr_h_param_str);

         CO_ProcMonitor(l_logfile,"Now calling CA_Mod_PymtAuth\n",NULL,p_intlenv_data_struct_h);
         if(   (CA_Mod_PymtAuth(l_ca_capymt_aut_struct_h,
                               p_intlenv_data_struct_h,
                               l_debug_info_ptr) == APL_SUCCESS)
               &&
                  CHECK_EXISTANCE_OF_ERROR
            )
         {
            CO_ProcMonitor(l_logfile,"Returned from CA_Mod_PymtAuth\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(l_logfile,"Returned from CA_Mod_PymtAuth\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

			APL_FREE(l_ca_capymt_aut_struct_h);
		}
		/*vaibhav CA_PUTCALL_APP*/
		else if (strcmp(chr_h_func_name,"wrp_A_PutcallFn") == 0)
      {
         INTL_WARNING
         l_ca_putcall_app_struct_h  = (CA_PUTCALL_APP_STRUCT_H  *)calloc(1,sizeof(CA_PUTCALL_APP_STRUCT_H ));
         APL_MALLOC_FAIL_LOC_A(l_ca_putcall_app_struct_h);
         memset(l_ca_putcall_app_struct_h,NULL,sizeof(CA_PUTCALL_APP_STRUCT_H ));

         int_ret_val = Populate_CA_PUTCALL_APP(l_ca_putcall_app_struct_h,chr_h_param_str);

         CO_ProcMonitor(l_logfile,"Now calling CA_PUTCALL_APP_STRUCT_H \n",NULL,p_intlenv_data_struct_h);
         if ((CA_PUTCALL_APP (l_ca_putcall_app_struct_h,
                               p_intlenv_data_struct_h,
                               l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(l_logfile,"Returned from CA_PUTCALL_APP_STRUCT_H  Successfully\n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(l_logfile,"Returned from CA_PUTCALL_APP_STRUCT_H  Failure\n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         APL_FREE(l_ca_putcall_app_struct_h);
      }
  
		/*vaibhav CA_PUTCALL_APP*/

		else if (strcmp(chr_h_func_name,"wrp_A_DbUpdGlobalPymtFn") == 0)
		{
			INTL_WARNING
		   l_ca_caglpymt_struct_h =  (CA_CAGLPYMT_STRUCT_H *)calloc(1,sizeof(CA_CAGLPYMT_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_ca_caglpymt_struct_h);
		   memset(l_ca_caglpymt_struct_h,NULL,sizeof(CA_CAGLPYMT_STRUCT_H));

			int_ret_val = CA_Proc_GlblPymtPopulate(l_ca_caglpymt_struct_h,chr_h_param_str);

         CO_ProcMonitor(l_logfile,"Now calling CA_Mod_UpdGlobalPymt\n",NULL,p_intlenv_data_struct_h);
         if(   (CA_Mod_UpdGlobalPymt(  l_ca_caglpymt_struct_h,
                                  p_intlenv_data_struct_h,
                                  l_debug_info_ptr) == APL_SUCCESS)
            &&
               CHECK_EXISTANCE_OF_ERROR
            )
         {
            CO_ProcMonitor(l_logfile,"Returned from CA_Mod_UpdGlobalPymt\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(l_logfile,"Returned from CA_Mod_UpdGlobalPymt\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

			APL_FREE(l_ca_caglpymt_struct_h);
		}

                /* Pradeep - HDFCCA_015 - CA_Allotment */
		/* - Smita - Commented - Since Allotment is not yet freezed --- HDFCCA_027
		else if (strcmp(chr_h_func_name,"wrp_A_AllotmentFn") == 0)
		{
			INTL_WARNING
			l_ca_allot_struct_h = (CA_ALLOT_STRUCT_H *)calloc(1,sizeof(CA_ALLOT_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_ca_allot_struct_h);
			memset(l_ca_allot_struct_h,NULL,sizeof(CA_ALLOT_STRUCT_H));

			int_ret_val = CA_Proc_AllotmentPopulate(l_ca_allot_struct_h,chr_h_param_str);

			CO_ProcMonitor(l_logfile,"Now calling CA_ModAllotment\n",NULL,p_intlenv_data_struct_h);
			if ((CA_ModAllotment(l_ca_allot_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
			{
				CO_ProcMonitor(l_logfile,"Returned from CA_ModAllotment Successfully\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
				CO_ProcMonitor(l_logfile,"Returned from CA_ModAllotment Failure\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			APL_FREE(l_ca_allot_struct_h);
		}*/
                /* Pradeep - HDFCCA_015 - CA_Allotment */

	 /*Vaibhav CA_APPPLICATION*/
      else if (strcmp(chr_h_func_name,"wrp_A_CA_APPLICATION") == 0)
      {
         INTL_WARNING
         l_ca_application_struct_h = (CA_APPLICATION_STRUCT_H *)calloc(1,sizeof(CA_APPLICATION_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_ca_application_struct_h);
         memset(l_ca_application_struct_h,NULL,sizeof(CA_APPLICATION_STRUCT_H));

         int_ret_val = Populate_CA_APPLICATION(l_ca_application_struct_h,chr_h_param_str);

         CO_ProcMonitor(l_logfile,"Now calling MT_UpdCA_APPLICATION\n",NULL,p_intlenv_data_struct_h);
         if ((MT_UpdCA_APPLICATION(l_ca_application_struct_h,
                               p_intlenv_data_struct_h,
                               l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(l_logfile,"Returned from MT_UpdCA_APPLICATION Successfully\n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(l_logfile,"Returned from MT_UpdCA_APPLICATION Failure\n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         APL_FREE(l_ca_application_struct_h);
      }
      else if (strcmp(chr_h_func_name,"wrp_A_CA_APPLICATION") == 0)
      {
         INTL_WARNING
         l_ca_application_struct_h = (CA_APPLICATION_STRUCT_H *)calloc(1,sizeof(CA_APPLICATION_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_ca_application_struct_h);
         memset(l_ca_application_struct_h,NULL,sizeof(CA_APPLICATION_STRUCT_H));

         int_ret_val = Populate_CA_APPLICATION(l_ca_application_struct_h,chr_h_param_str);

         CO_ProcMonitor(l_logfile,"Now calling MT_UpdCA_APPLICATION\n",NULL,p_intlenv_data_struct_h);
         if ((MT_UpdCA_APPLICATION(l_ca_application_struct_h,
                               p_intlenv_data_struct_h,
                               l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(l_logfile,"Returned from MT_UpdCA_APPLICATION Successfully\n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(l_logfile,"Returned from MT_UpdCA_APPLICATION Failure\n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         APL_FREE(l_ca_application_struct_h);
      }   /*Vaibhav CA_APPPLICATION*/
          /* vaibhav CA_NIS_ALLOTMENT HDFCCA-015*/
       else if (strcmp(chr_h_func_name,"wrp_A_CA_NIS_ALLOTMENT") == 0)
      {
         INTL_WARNING
         l_ca_nis_allotment_struct_h = (CA_NIS_ALLOTMENT_STRUCT_H *)calloc(1,sizeof(CA_NIS_ALLOTMENT_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_ca_nis_allotment_struct_h);
         memset(l_ca_nis_allotment_struct_h,NULL,sizeof(CA_NIS_ALLOTMENT_STRUCT_H));

         int_ret_val = Populate_CA_NIS_ALLOTMENT(l_ca_nis_allotment_struct_h,chr_h_param_str);

         CO_ProcMonitor(l_logfile,"Now calling MT_UpdCA_NIS_ALLOTMENT\n",NULL,p_intlenv_data_struct_h);
         if ((MT_UpdCA_NIS_ALLOTMENT(l_ca_nis_allotment_struct_h,
                               p_intlenv_data_struct_h,
                               l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(l_logfile,"Returned from MT_UpdCA_NIS_ALLOTMENT Successfully\n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(l_logfile,"Returned from MT_UpdCA_NIS_ALLOTMENT Failure\n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         APL_FREE(l_ca_nis_allotment_struct_h);
      }
       /* vaibhav CA_NIS_ALLOTMENT HDFCCA-015*/
      else
      {
            INTL_WARNING
            int_ret_val = CO_InsertErr(l_debug_info_ptr,
                                  FUNC_NF,
                                   APL_NULL_STRING,
                                   APL_NULL_STRING,
                                   APL_NULL_STRING,
                                   __LINE__,
                                   __FILE__);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
      }
		/**chr_h_error_desc is not a global variable now, code moved to process_failre function 
		 * APL_FREE(chr_h_error_desc); **/
		/**APL_FREE(p_intlenv_data_struct_h); 
		 * This should not be done here as allocation of environment structure moved out of the loop **/
		//CO_FreeErrLst(l_debug_info_ptr);
		fflush(l_logfile);
	} 

   APL_GOBACK_SUCCESS;

RETURN_SUCCESS:

   EXEC SQL COMMIT ;
        CO_ProcMonitor(l_logfile,"Exiting successfully  out of CA Daemon\n",NULL,NULL);
        /*fclose(chr_finifile); -- Biju*/
        exit(0);

RETURN_FAILURE:
   EXEC SQL ROLLBACK;
        CO_ProcMonitor(l_logfile,"Exiting unsuccesfully out of CA Daemon\n",l_debug_info_ptr,NULL);
        /*fclose(chr_finifile); -- Biju*/
        exit(-1);
}

int Batch_Proc_MarkSuccessProcess(	char *p_ora_rowid,
												char *p_return_value)
{
	/** Not Used Anywhere -- Biju
	 * short int_ret_val  =  0; 
	**/

	APL_FUNCTION_ENTER(l_logfile)

	EXEC SQL UPDATE PRO_REQUEST_CA 
				SET 	STATUS = '2',
					 	ERROR_DET='SUCCESS'||:p_return_value
				WHERE ROWID=:p_ora_rowid;

	IS_ANY_ORA_ERROR;

	EXEC SQL COMMIT ;
	IS_ANY_ORA_ERROR;

	/** Not Used Anywhere -- Biju
		int_ret_val = APL_SUCCESS;
	**/
	S_NON_DCE_ERASE_DUMMY_WARNING;

APL_GOBACK_SUCCESS // AIX Warning

RETURN_SUCCESS :
	/*return(APL_SUCCESS);*/
	APL_FUNCTION_RET_SUCCESS(l_logfile)

RETURN_FAILURE :
	/*return(APL_FAILURE);*/
	APL_FUNCTION_RET_FAILURE(l_logfile)
}

int Proc_MarkFailProcess(	char *p_ora_rowid, 
									DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	/**short int_ret_val  =  0; Not used -- Biju **/
	char chr_h_error_desc[APL_ERRORDESC_LEN] = APL_NULL_STRING;

	APL_FUNCTION_ENTER(l_logfile)

   EXEC SQL ROLLBACK ;
   IS_ANY_ORA_ERROR;

   /** int_ret_val = APL_FAILURE; Not Required -- Biju **/

   S_NON_DCE_ERASE_DUMMY_WARNING;

	/** Added for changing chr_h_error_desc to local variable **/
   memset(chr_h_error_desc,APL_NULL_CHAR,APL_ERRORDESC_LEN);

   if(CO_Rtv_ErrString(	l_debug_info_ptr,
								chr_h_error_desc) == 1)
	{
		CO_ProcMonitor(l_logfile,"Exiting unsuccesfully out of CO_Rtv_ErrString",NULL,NULL);
	}
	CO_ProcMonitor(l_logfile,"Error From CA Daemon",NULL,NULL);
	CO_ProcMonitor(l_logfile,chr_h_error_desc,NULL,NULL);

   if(strlen(chr_h_error_desc)	>	0)
   {
      EXEC SQL UPDATE  PRO_REQUEST_CA 
					SET 	STATUS 	= 	'3',
							ERROR_DET	=	:chr_h_error_desc
      			WHERE ROWID			=	:p_ora_rowid;
   }
   else
   {
      EXEC SQL UPDATE  PRO_REQUEST_CA 
					SET 	STATUS 	= 	'2',
							ERROR_DET	=	'SUCCESS'
      			WHERE ROWID			=	:p_ora_rowid;
   }
   IS_ANY_ORA_ERROR;

   EXEC SQL COMMIT;
   IS_ANY_ORA_ERROR;

   strcpy(chr_h_error_desc,APL_NULL_STRING);

   S_NON_DCE_ERASE_DUMMY_WARNING;

APL_GOBACK_SUCCESS//AIX Warning Removal
RETURN_SUCCESS :
   /*return(APL_SUCCESS);*/
	APL_FUNCTION_RET_SUCCESS(l_logfile)

RETURN_FAILURE :
   /*return(APL_FAILURE);*/
	APL_FUNCTION_RET_FAILURE(l_logfile)
}
/*Added by Chirag for Grid form for HDFCCA_016 CA_Bidding*/
 int Batch_Proc_GridMarkSuccessProcess(char *p_ora_rowid,char *p_return_value,char *p_access_stamp)
{
  char l_data_fld_sep_str[2]      =     APL_NULL_STRING;
  sprintf(l_data_fld_sep_str,"%c",DATA_FIELD_SEPRTR);
  strcat(l_data_fld_sep_str,APL_NULL_STRING);

EXEC SQL UPDATE PRO_REQUEST_CA set STATUS = '2',
			ERROR_DET='SUCCESS'||:p_return_value||:l_data_fld_sep_str||:p_access_stamp||:l_data_fld_sep_str
        where rowid=:p_ora_rowid;
        IS_ANY_ORA_ERROR;

        EXEC SQL COMMIT ;
        IS_ANY_ORA_ERROR;

        S_NON_DCE_ERASE_DUMMY_WARNING;

APL_GOBACK_SUCCESS//AIX Warning Removal
RETURN_SUCCESS :
        return(APL_SUCCESS);

RETURN_FAILURE :
        return(APL_FAILURE);
}
/*Added by Chirag for Grid form for HDFCCA_016 CA_Bidding*/
