/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         : Batch Processing
 *
 * File Name           : BT_Common.pc
 *
 * Description         : 
 *
 *
 *
 *            Version Control Block
 *
 * Date        Version          Author               Description
 * ---------   --------  ---------------  ---------------------------
 * 07/12/2005  1.0		 Biju George		Batch Common Functions
 * 03/02/2006  1.1		 Biju George		Added One For Function to update restart Data
 * 30/03/2022  1.2       kotubabu           Linux Migration   Kotak Implementation
 *
 *********************************************************************/


#include "stdio_64.h"
#include <unistd.h>
/*** AIX Migration Changes -START*/
/*#include <sys/iso/signal_iso.h>*/
#if !defined(_AIXVERSION_430) || !defined(_AIXVERSION_431) || !defined(_AIXVERSION_434) || !defined(_AIXVERSION_510) || !defined(_AIXVERSION_520) || !defined(_AIXVERSION_530) || !defined(_AIXVERSION_610)
//#include <sys/iso/signal_iso.h>
 #if defined(OS_LINUX) || defined(OS_SUN) /*Added by kotubabu for linux migration-Start*/
   #include <bits/signum.h>
 #elif defined(OS_AIX)
   #include <sys/iso/signal_iso.h>
 #endif                              /*Added by kotubabu for linux migration-End*/
#endif
/*** AIX Migration Changes -END*/
#include <sys/wait.h>
#include <ctype.h>
#include <BT_Common.h>
EXEC SQL INCLUDE SQLCA;


/*int BT_Status_Lock(	char *p_process_name,
			char *p_process_key,
			char *p_start_date,
			DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	char l_temp_status_info[101]=APL_NULL_STRING;
	char l_temp_status[16]=APL_NULL_STRING;
	struct sqlca sqlca;
	EXEC SQL SELECT status_info,status into :l_temp_status_info,:l_temp_status FROM BT_PROCESS_STATUS
		WHERE	PROCESS_NAME 	= :p_process_name 
		AND	PROCESS_KEY  	= :p_process_key 
		AND	START_DATE 		= :p_start_date 
		AND	STATUS 			= 'started'
		FOR 	UPDATE OF STATUS_INFO,STATUS;
	IS_ANY_ORA_ERROR

RETURN_SUCCESS:

	APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)

RETURN_FAILURE:


	APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
}*/
/*
int BT_RestartData_Update(	char *p_process_name,
			char *p_process_key,
			char *p_start_date,
			char *p_restart_data,
			DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	struct sqlca sqlca;

	EXEC SQL UPDATE BT_PROCESS_STATUS
		SET	RESTART_DATA = :p_restart_data
		WHERE	PROCESS_NAME = :p_process_name 
		AND	PROCESS_KEY  = :p_process_key 
		AND	START_DATE = :p_start_date 
		AND	STATUS = 'started';
	IS_ANY_ORA_ERROR

	EXEC SQL COMMIT;

	if(APL_FAILURE == BT_Status_Lock(	p_process_name,
						p_process_key,
						p_start_date,
						l_debug_info_ptr))
		APL_GOBACK_FAIL

	IS_ANY_ORA_ERROR
RETURN_SUCCESS:
	APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)

RETURN_FAILURE:
	APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
}

int BT_Status_Update(	char *p_process_name,
			char *p_process_key,
			char *p_start_date,
			char *p_status_info,
			DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	struct sqlca sqlca;

	EXEC SQL UPDATE BT_PROCESS_STATUS
		SET	STATUS_INFO = :p_status_info
		WHERE	PROCESS_NAME = :p_process_name 
		AND	PROCESS_KEY  = :p_process_key 
		AND	START_DATE = :p_start_date 
		AND	STATUS = 'started';
	IS_ANY_ORA_ERROR

	EXEC SQL COMMIT;

	if(APL_FAILURE == BT_Status_Lock(	p_process_name,
						p_process_key,
						p_start_date,
						l_debug_info_ptr))
		APL_GOBACK_FAIL

	IS_ANY_ORA_ERROR
RETURN_SUCCESS:
	APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)

RETURN_FAILURE:
	APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
}*/
/*
int Rtv_Dir_Path(	char *p_dir_alias,
						char *p_path,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	FILE *l_file = (FILE *)NULL;
	char l_file_name[PATH_LENGTH] = APL_NULL_STRING;

	memset(p_path,APL_NULL_CHAR,sizeof(p_path));
	strcpy(l_file_name,getenv("INTL_ROOT_PATH"));

	if(l_file_name[strlen(l_file_name) - 1] == '/')
		strcat(l_file_name,"intl_sun.cfg");
	else
		strcat(l_file_name,"/intl_sun.cfg");

	l_file = fopen(l_file_name,"r");

	if(l_file == (FILE*)NULL)
		APL_GOBACK_FAIL

	if ( APL_FAILURE == CO_ReadToken(   l_file,
				p_dir_alias,
				p_path,
				l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}
RETURN_SUCCESS:
	if(l_file != (FILE *)NULL)fclose(l_file);
	APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)

RETURN_FAILURE:
	if(l_file != (FILE *)NULL)fclose(l_file);
	APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
}
*/

/**
int BT_Status_Completed(char *p_process_name,
			char *p_process_key,
			char *p_start_date,
			DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	struct sqlca sqlca;

	EXEC SQL UPDATE BT_PROCESS_STATUS
		SET STATUS = 'completed'
		WHERE	PROCESS_NAME = :p_process_name 
		AND	PROCESS_KEY  = :p_process_key 
		AND	START_DATE = :p_start_date 
		AND	STATUS = 'started';
	IS_ANY_ORA_ERROR


RETURN_SUCCESS:

	APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)

RETURN_FAILURE:


	APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
}
**/
/*
int CO_Get_DBConnect(DEBUG_INFO_STRUCT_H **l_debug_info_ptr) 
{
	FILE *l_logfile = APL_OUT_FILE;
	APL_FUNCTION_ENTER(l_logfile)

	FILE *fp_cfg = (FILE *)NULL;
	char l_cfg_filename[PATH_LENGTH];
	char l_db_id[APL_USERID_LEN];
	char l_db_pwd[APL_DB_PWD_LEN];
	char l_custody_id[APL_USERID_LEN];
	char l_buffer[KEY_LENGTH];


	memset(l_cfg_filename,APL_NULL_CHAR,sizeof(l_cfg_filename));
	memset(l_db_id,APL_NULL_CHAR,sizeof(l_db_id));
	memset(l_db_pwd,APL_NULL_CHAR,sizeof(l_db_pwd));
	memset(l_custody_id,APL_NULL_CHAR,sizeof(l_custody_id));
	memset(l_buffer,APL_NULL_CHAR,sizeof(l_buffer));

	strcpy(l_cfg_filename,getenv("INTL_ROOT_PATH"));
	strcat(l_cfg_filename,"/intl_sun.cfg");

	fp_cfg = fopen(l_cfg_filename,"r");
	
	if(fp_cfg == (FILE *)NULL)
	{
		BT_IF_DEBUG
			fprintf(l_logfile, "Config File |%s|\n",l_cfg_filename);
		BT_IF_DEBUG
			CO_ProcMonitor(l_logfile,"Failed To Open Config File",NULL,NULL);
		
		APL_GOBACK_FAIL
	}
	APL_FETCH_DB_LOGIN_DETAILS(fp_cfg, l_custody_id, l_db_id, l_db_pwd , l_logfile , l_debug_info_ptr)
	
	EXEC SQL CONNECT :l_db_id IDENTIFIED BY :l_db_pwd;
	if(sqlca.sqlcode != 0)
	{
		ltoa_r(sqlca.sqlcode,l_buffer,KEY_LENGTH-1);
		CO_InsertErr(	l_debug_info_ptr,
				DB_ERR_NO,
				l_buffer,
				APL_NULL_STRING,
				APL_NULL_STRING,
				__LINE__,
				__FILE__);
		BT_IF_DEBUG
			CO_ProcMonitor(l_logfile,"Failed To Connect To DB",NULL,NULL);
		APL_GOBACK_FAIL
	}
APL_GOBACK_SUCCESS

RETURN_SUCCESS :
	APL_CLOSE_FILE(fp_cfg)
	APL_FUNCTION_RET_SUCCESS(l_logfile)
	
RETURN_FAILURE :
	APL_CLOSE_FILE(fp_cfg)	
	APL_FUNCTION_RET_FAILURE(l_logfile)
	  
}
*/


int BT_MarkAbort( INTL_ENV_DATA_STRUCT_H *p_intl_env_datastruct_h,
		DEBUG_INFO_STRUCT_H  **l_debug_info_ptr)
{
	char l_rowid[APL_ROWID_LEN] = APL_NULL_STRING;
	int  l_process_id =0;
	short i_process_id =0;
	int	int_l_exitcode;
	int	int_exit_code;
	FILE *l_logfile = APL_OUT_FILE;
	
	APL_FUNCTION_ENTER(l_logfile)

/** Cursor for selecting required data **/	
	EXEC SQL	DECLARE ChkAbortCur
				CURSOR  FOR
				SELECT ROWID,PROCESS_ID
				FROM BT_PROCESS_STATUS
	WHERE STATUS='started'
	AND Abort_Ind <> 'Y' 
	AND ( (EOD_BOD NOT IN ('E','B')) OR (EOD_BOD IS NULL) );
	
	IS_ANY_ORA_ERROR

	EXEC SQL OPEN ChkAbortCur;
	IS_ANY_ORA_ERROR
	
	for (;;)
	{
		memset(l_rowid,APL_NULL_CHAR,sizeof(l_rowid));
		l_process_id = 0;
		i_process_id = 0;
		
		EXEC SQL FETCH ChkAbortCur
		INTO :l_rowid,:l_process_id:i_process_id;
		IS_ANY_ORA_ERROR_CURSOR

		if ( i_process_id == -1 )continue;

		if ( waitpid(l_process_id,&int_exit_code,WNOHANG) <= 0)
			continue;
		else
		{
			if(WIFEXITED(int_exit_code)) 
			{
				int_l_exitcode=WEXITSTATUS(int_exit_code);
				if(int_l_exitcode!=0)
				{
					EXEC SQL UPDATE BT_PROCESS_STATUS
							SET ABORT_IND='Y'
							WHERE rowid=:l_rowid; 
					IS_ANY_ORA_ERROR
				} 
			}
			if(WIFSIGNALED(int_exit_code)) 
			{
				EXEC SQL UPDATE BT_PROCESS_STATUS
						SET ABORT_IND='Y'
						WHERE rowid=:l_rowid;
				IS_ANY_ORA_ERROR
			}
		}
		
	}
	EXEC SQL COMMIT;
APL_GOBACK_SUCCESS
RETURN_SUCCESS :
	APL_FUNCTION_RET_SUCCESS(l_logfile)
    
RETURN_FAILURE :
	APL_FUNCTION_RET_FAILURE(l_logfile)
    
}

int BT_Chk_Conflicts(char **p_conflictprograms,
										char *p_sysdate,
										int *p_status,
										DEBUG_INFO_STRUCT_H **l_debug_info_ptr,
										INTL_ENV_DATA_STRUCT_H *p_intl_env_datastruct_h) 
{
	int l_count = 0;
	int i = 0;
	char l_buffer[ERROR_LENGTH];
	FILE *l_logfile = APL_OUT_FILE;
	APL_FUNCTION_ENTER(l_logfile)
	*p_status=1;

	memset(l_buffer,APL_NULL_CHAR,sizeof(l_buffer));
	for(i=0;p_conflictprograms[i];i++) 
	{
		EXEC SQL SELECT NVL(count(*),0) INTO :l_count
			FROM BT_PROCESS_STATUS
				WHERE PROCESS_NAME=:p_conflictprograms[i] 
				AND STATUS='started'
				AND TO_CHAR(TO_DATE(START_DATE),'ddmmyy')=TO_CHAR(TO_DATE(:p_sysdate),'ddmmyy');
		IS_ANY_ORA_ERROR
		if(l_count) 
			break;
	}

	if(p_conflictprograms[i])
	{
		sprintf(l_buffer,"Conflict program %s running",p_conflictprograms[i]);
		BT_IF_DEBUG
			CO_ProcMonitor(l_logfile,l_buffer,NULL,p_intl_env_datastruct_h);
		*p_status=0;
		APL_GOBACK_SUCCESS
	}
APL_GOBACK_SUCCESS

RETURN_SUCCESS :
	APL_FUNCTION_RET_SUCCESS(l_logfile)
    
RETURN_FAILURE :
	APL_FUNCTION_RET_FAILURE(l_logfile)
}


int BT_Chk_Predecessors(char **p_predecessorprograms,
											 char *p_sysdate,
											 int *p_status,
											 DEBUG_INFO_STRUCT_H **l_debug_info_ptr,
											 INTL_ENV_DATA_STRUCT_H *p_intl_env_datastruct_h) 
{
	int l_count = 0;
	int i = 0;
	char l_buffer[ERROR_LENGTH];

	FILE *l_logfile = APL_OUT_FILE;	

	APL_FUNCTION_ENTER(l_logfile)

	*p_status=1;
	memset(l_buffer,APL_NULL_CHAR,sizeof(l_buffer));
	for(i=0;p_predecessorprograms[i];i++) 
	{
		EXEC SQL SELECT NVL(COUNT(*),0) INTO :l_count
			FROM BT_PROCESS_STATUS
				WHERE PROCESS_NAME=:p_predecessorprograms[i]
				AND TO_CHAR(TO_DATE(START_DATE),'ddmmyy')=TO_CHAR(TO_DATE(:p_sysdate),'ddmmyy')
				  AND STATUS='completed';
		IS_ANY_ORA_ERROR

		if(!l_count)break;
	}

	if(p_predecessorprograms[i])
	{
		sprintf(l_buffer,"PRE_PROCESS %s not executed",p_predecessorprograms[i]);
		BT_IF_DEBUG
			CO_ProcMonitor(l_logfile,l_buffer,NULL,p_intl_env_datastruct_h);
		*p_status=0;
		APL_GOBACK_SUCCESS
	}

APL_GOBACK_SUCCESS

RETURN_SUCCESS :
	APL_FUNCTION_RET_SUCCESS(l_logfile)

RETURN_FAILURE :
	APL_FUNCTION_RET_FAILURE(l_logfile)

}

int BT_Chk_Aborted(char *p_programname,
									  char *p_process_key,
									  char *p_sysdate,
									  int *p_status,
									  DEBUG_INFO_STRUCT_H **l_debug_info_ptr,
									  INTL_ENV_DATA_STRUCT_H *p_intl_env_datastruct_h) 
{
	FILE *l_logfile = APL_OUT_FILE;
	char l_temp_status[16]=APL_NULL_STRING;
	APL_FUNCTION_ENTER(l_logfile)
	*p_status=1;
	
	EXEC SQL SELECT STATUS into :l_temp_status
		FROM BT_PROCESS_STATUS
		WHERE PROCESS_NAME=:p_programname
		AND PROCESS_KEY	  =:p_process_key
		AND STATUS  ='started'
		AND TO_CHAR(TO_DATE(START_DATE),'ddmmyy')=TO_CHAR(TO_DATE(:p_sysdate),'ddmmyy')
		FOR UPDATE OF STATUS NOWAIT;
	if(BT_NOTGOTLOCK) 
	{
		BT_IF_DEBUG
			CO_ProcMonitor(l_logfile,"A copy of program running",NULL,p_intl_env_datastruct_h);
		*p_status=0;
		APL_GOBACK_SUCCESS
	}
	IS_ANY_ORA_ERROR
	
APL_GOBACK_SUCCESS

RETURN_SUCCESS :
	APL_FUNCTION_RET_SUCCESS(l_logfile)

RETURN_FAILURE :
	APL_FUNCTION_RET_FAILURE(l_logfile)


}

int BT_Chk_Duplicate(char *p_programname,
									  	 char *p_process_key,
										 char *p_sysdate,
										 int *p_status,
										 DEBUG_INFO_STRUCT_H **l_debug_info_ptr,
										 INTL_ENV_DATA_STRUCT_H *p_intl_env_datastruct_h) 
{
	int l_count;
	int l_return_status;
	char l_buffer[ERROR_LENGTH];
	FILE *l_logfile = APL_OUT_FILE;
	*p_status=1;

	APL_FUNCTION_ENTER(l_logfile)

	EXEC SQL SELECT NVL(COUNT(*),0) 
			INTO :l_count
		FROM BT_PROCESS_STATUS 
		WHERE 	PROCESS_NAME=:p_programname
		AND	PROCESS_KEY=:p_process_key
		AND TO_CHAR(TO_DATE(START_DATE),'ddmmyy')=TO_CHAR(TO_DATE(:p_sysdate),'ddmmyy')
		AND STATUS ='started';
	IS_ANY_ORA_ERROR

	if(l_count>1) 
	{
	 
		sprintf(l_buffer,"Duplicate entry for process %s\n",p_programname);
		BT_IF_DEBUG
			CO_ProcMonitor(l_logfile,l_buffer,NULL,p_intl_env_datastruct_h);
		*p_status=BT_CANNOT_EXECUTE;
		APL_GOBACK_SUCCESS
	}

	if(l_count==0) 
	{
		*p_status=BT_START;
		APL_GOBACK_SUCCESS
	}

	if(BT_Chk_Aborted(p_programname,
								p_process_key,
								p_sysdate,
								&l_return_status,
								l_debug_info_ptr,
								p_intl_env_datastruct_h)==APL_SUCCESS)
	{
		if(l_return_status)
			*p_status=BT_RESTART;
		else
			*p_status=BT_CANNOT_EXECUTE;
		APL_GOBACK_SUCCESS
	}
APL_GOBACK_FAIL

RETURN_SUCCESS :
	APL_FUNCTION_RET_SUCCESS(l_logfile)
    

RETURN_FAILURE :
	APL_FUNCTION_RET_FAILURE(l_logfile)
    
}


int CO_Pro_FreeArray(char **freeThis) 
{
	int i = 0;
	FILE *l_logfile = APL_OUT_FILE;

	APL_FUNCTION_ENTER(l_logfile)
	for(i=0;freeThis[i];i++)
		APL_FREE(freeThis[i]);
	APL_FREE(freeThis);
APL_GOBACK_SUCCESS

RETURN_SUCCESS :
	APL_FUNCTION_RET_SUCCESS(l_logfile)
    

RETURN_FAILURE :
	APL_FUNCTION_RET_FAILURE(l_logfile)
    
}


int BT_Restart_Process(	char *p_process_name,
			char *p_process_key,
			char *p_funcparam,
			int *p_return_status,
			DEBUG_INFO_STRUCT_H **l_debug_info_ptr,
			INTL_ENV_DATA_STRUCT_H *p_intl_env_datastruct_h)
{

	int l_created = 0;
	int l_process_cnt = 0;
	char l_chk_process[PATH_LENGTH] = APL_NULL_STRING;
	int l_child_pid = 0;
	int l_delete_id = 0;
	char l_error_msg[ERROR_LENGTH] = APL_NULL_STRING;
	int i = 0;
	int l_howto_start = 0;
	char l_sysdate[APL_DATE_LEN] = APL_NULL_STRING;
	char **l_predecessors = (char **)NULL;
	char **l_conflicts = (char **)NULL;
	int l_return_status = 0;
	char l_prog_dir[PATH_LENGTH] = APL_NULL_STRING;
	char l_cfg_filename[PATH_LENGTH] = APL_NULL_STRING;
	FILE *l_cfg_file = (FILE *)NULL;
	FILE *l_logfile = APL_OUT_FILE;
	
	char l_temp_status[16]=APL_NULL_STRING;
	char l_temp_restart_data[51]=APL_NULL_STRING;

	APL_FUNCTION_ENTER(l_logfile)

	strcpy(l_cfg_filename,getenv("INTL_ROOT_PATH"));
	strcat(l_cfg_filename,"/intl_sun.cfg");
	if((l_cfg_file=fopen(l_cfg_filename,"r"))==NULL)
	{
		BT_IF_DEBUG
			CO_ProcMonitor(l_logfile,"Could Open File",NULL,NULL);
		APL_GOBACK_FAIL
	}

	if(CO_RtvSysDtTime(l_sysdate,l_debug_info_ptr)==APL_FAILURE)
	{
		BT_IF_DEBUG
			CO_ProcMonitor(l_logfile,"Could not get date",NULL,p_intl_env_datastruct_h);
		APL_GOBACK_FAIL
	}
	BT_IF_DEBUG
		fprintf(l_logfile,"The sysDate is %s\n",l_sysdate);


	if ( BT_MarkAbort(p_intl_env_datastruct_h,l_debug_info_ptr) == APL_FAILURE )
	{
		BT_IF_DEBUG
			CO_ProcMonitor(l_logfile,"Failed In BT_MarkAbort",l_debug_info_ptr,p_intl_env_datastruct_h);
		APL_GOBACK_FAIL
	}



	if(APL_FAILURE == BT_Chk_Duplicate(	p_process_name,
						p_process_key,
						l_sysdate,
						&l_howto_start,
						l_debug_info_ptr,
						p_intl_env_datastruct_h))
	{
		BT_IF_DEBUG
			CO_ProcMonitor(l_logfile,"Failed In BT_Chk_Duplicate",NULL,NULL);
		APL_GOBACK_FAIL
	}
	*p_return_status=BT_RESTART;

	if(l_howto_start==BT_CANNOT_EXECUTE) 
	{
		BT_IF_DEBUG
			CO_ProcMonitor(l_logfile,"A copy of program still running",NULL,p_intl_env_datastruct_h);
		*p_return_status=BT_CANNOT_EXECUTE;
		l_delete_id=1;
		APL_GOBACK_SUCCESS
	}

	if(l_howto_start==BT_START) 
	{
		*p_return_status=BT_START;
		BT_IF_DEBUG
			fprintf(l_logfile,"Process|%s|Key|%s|Date|%s|User|%s|\n",p_process_name,p_process_key,l_sysdate,p_intl_env_datastruct_h->usr);
		EXEC SQL INSERT INTO BT_process_status (PROCESS_NAME,PROCESS_KEY,STATUS,START_DATE,USERID)
				VALUES(:p_process_name,:p_process_key,'started',:l_sysdate,:p_intl_env_datastruct_h->usr);
		IS_ANY_ORA_ERROR


		EXEC SQL COMMIT;
		IS_ANY_ORA_ERROR

		EXEC SQL SELECT status,restart_data into :l_temp_status, :l_temp_restart_data FROM BT_process_status
		WHERE PROCESS_NAME=:p_process_name
		AND 	PROCESS_KEY	  =:p_process_key
		AND	STATUS  ='started'
		AND 	START_DATE=:l_sysdate
		FOR UPDATE OF STATUS,RESTART_DATA NOWAIT;
		if(BT_NOTGOTLOCK) 
		{
			BT_IF_DEBUG
				CO_ProcMonitor(l_logfile,"A copy of program running",NULL,p_intl_env_datastruct_h);
			*p_return_status=BT_CANNOT_EXECUTE;
			l_delete_id=0;
			APL_GOBACK_SUCCESS
		}

		l_created=1;
	}


	EXEC SQL SELECT NVL(COUNT(PRE_PROCESS),0) INTO :l_process_cnt
				FROM APL_PROCESS_CNTRL
				WHERE PROCESS_NAME=:p_process_name;
	IS_ANY_ORA_ERROR


	l_predecessors=(char **)(malloc(sizeof(char *)*(l_process_cnt+1)));
	APL_MALLOC_FAIL(l_predecessors)



	for(i=0;i<l_process_cnt+1;i++)
		l_predecessors[i]=NULL;
	l_predecessors[l_process_cnt]=NULL;

	EXEC SQL DECLARE predCursor CURSOR FOR
		SELECT PRE_PROCESS
		FROM APL_PROCESS_CNTRL
		WHERE PROCESS_NAME=:p_process_name;
	IS_ANY_ORA_ERROR

	EXEC SQL OPEN predCursor;
	IS_ANY_ORA_ERROR

	for(i=0;i<l_process_cnt;i++) 
	{
		EXEC SQL FETCH predCursor INTO :l_chk_process;
		IS_ANY_ORA_ERROR_CURSOR
		l_predecessors[i]=(char *)(malloc(sizeof(char *)*(strlen(l_chk_process)+1)));
		APL_MALLOC_FAIL(l_predecessors[i])
		strcpy(l_predecessors[i],l_chk_process);
	}
	l_predecessors[l_process_cnt]=NULL;

	EXEC SQL CLOSE predCursor;
	IS_ANY_ORA_ERROR

	#ifdef SYS_DEBUG
		for(i=0;l_predecessors[i];i++)
			fprintf(l_logfile,"%s\n",l_predecessors[i]);
	#endif

	EXEC SQL SELECT NVL(COUNT(MISMATCH),0) 
			INTO :l_process_cnt
			FROM APL_PROCESS_CNTRL
			WHERE PROCESS_NAME=:p_process_name;
	IS_ANY_ORA_ERROR


	l_conflicts=(char **)(malloc(sizeof(char *)*(l_process_cnt+1)));
	APL_MALLOC_FAIL(l_conflicts)



	for(i=0;i<l_process_cnt;i++)
		l_conflicts[i]=NULL;
	l_conflicts[l_process_cnt]=NULL;

	EXEC SQL DECLARE confCursor CURSOR FOR
		SELECT MISMATCH
		FROM APL_PROCESS_CNTRL
		WHERE PROCESS_NAME=:p_process_name;
	IS_ANY_ORA_ERROR

	EXEC SQL OPEN confCursor;
	IS_ANY_ORA_ERROR

	for(i=0;i<l_process_cnt;i++) 
	{
		EXEC SQL FETCH confCursor INTO :l_chk_process;
		IS_ANY_ORA_ERROR
		l_conflicts[i]=(char *)(malloc(sizeof(char *)*(strlen(l_chk_process)+1)));
		APL_MALLOC_FAIL(l_conflicts[i])

		strcpy(l_conflicts[i],l_chk_process);
	}
	l_conflicts[l_process_cnt]=NULL;

	EXEC SQL CLOSE predCursor;
	IS_ANY_ORA_ERROR

	#ifdef SYS_DEBUG
		for(i=0;l_conflicts[i];i++)
			fprintf(l_logfile,"%s\n",l_conflicts[i]);
	#endif

	if(APL_FAILURE == BT_Chk_Conflicts(l_conflicts,
										l_sysdate,
										&l_return_status,
										l_debug_info_ptr,
										p_intl_env_datastruct_h))
	{
		BT_IF_DEBUG
			CO_ProcMonitor(l_logfile,"Returned Failure BT_Chk_Conflicts",NULL,NULL);
		APL_GOBACK_FAIL
	}

	if(!l_return_status)
	{
		BT_IF_DEBUG
			CO_ProcMonitor(l_logfile,"Conflict program running\n",NULL,p_intl_env_datastruct_h);
		*p_return_status= BT_CONFLICT;
		l_delete_id=1;
		APL_GOBACK_SUCCESS
	}

	if(APL_FAILURE == BT_Chk_Predecessors(l_predecessors,
												l_sysdate,
												&l_return_status,
												l_debug_info_ptr,
												p_intl_env_datastruct_h))
	{
		BT_IF_DEBUG
			CO_ProcMonitor(l_logfile,"Returned Failure BT_Chk_Predecessors",NULL,NULL);
		APL_GOBACK_FAIL
	}

	if(!l_return_status)
	{
		BT_IF_DEBUG
			CO_ProcMonitor(l_logfile,"Pre Process not executed as yet",NULL,p_intl_env_datastruct_h);
		*p_return_status=BT_PREDECESSOR;
		l_delete_id=1;
		APL_GOBACK_SUCCESS
	}

	if ( CO_ReadToken(l_cfg_file,"INTL_PROG_PATH",l_prog_dir,l_debug_info_ptr) == APL_FAILURE)
	{
		BT_IF_DEBUG
			CO_ProcMonitor(l_logfile,"Returned Failure From CO_ReadToken",NULL,p_intl_env_datastruct_h);
		APL_GOBACK_SUCCESS
	}

	waitpid(-1,NULL,WNOHANG);

	signal(SIGCHLD, SIG_IGN); 
	if((l_child_pid=fork())==-1) 
	{
		BT_IF_DEBUG
			CO_ProcMonitor(l_logfile,"Failed To Fork",NULL,p_intl_env_datastruct_h);
		APL_GOBACK_FAIL
	}



	if(l_child_pid) 
	{

		/** This is The Parent **/


		EXEC SQL UPDATE BT_process_status
			SET PROCESS_ID=:l_child_pid,
			ABORT_IND='N',
			START_DATE=:l_sysdate,
			PROCESS_DESC=:p_intl_env_datastruct_h->processtion,
			USERID=:p_intl_env_datastruct_h->usr
			WHERE PROCESS_NAME=:p_process_name
			AND	PROCESS_KEY	  =:p_process_key
			AND TO_CHAR(TO_DATE(START_DATE),'ddmmyy')=TO_CHAR(TO_DATE(:l_sysdate),'ddmmyy')
			AND	STATUS='started';
		IS_ANY_ORA_ERROR



		EXEC SQL INSERT INTO AUDIT_LOG
			VALUES (	
				:p_intl_env_datastruct_h->usr,
				:p_intl_env_datastruct_h->h_mode,
				:p_intl_env_datastruct_h->processtion,
				:p_intl_env_datastruct_h->auth_req,
				:p_intl_env_datastruct_h->subprocess,
				:p_intl_env_datastruct_h->h_process,
				:l_sysdate,
				NULL );
		IS_ANY_ORA_ERROR

		if(l_howto_start==BT_START) 
		{
			sprintf(l_error_msg,"Successfully started %s",p_process_name);
			BT_IF_DEBUG
				CO_ProcMonitor(l_logfile,l_error_msg,NULL,p_intl_env_datastruct_h);
			EXEC SQL COMMIT;
			IS_ANY_ORA_ERROR
		}
		else 
		{
			sprintf(l_error_msg,"Successfully restarted %s",p_process_name);
			BT_IF_DEBUG
				CO_ProcMonitor(l_logfile,l_error_msg,NULL,p_intl_env_datastruct_h);
		}

		APL_GOBACK_SUCCESS
	}
	else 
	{
		strcat(l_prog_dir,p_process_name);
		execlp(	l_prog_dir,
				p_process_name,
				p_process_key,
				l_sysdate,
				p_intl_env_datastruct_h->usr,
				p_intl_env_datastruct_h->h_mode,
				p_intl_env_datastruct_h->processtion,
				p_intl_env_datastruct_h->auth_req,
				p_intl_env_datastruct_h->subprocess,
				p_intl_env_datastruct_h->h_process,
				p_funcparam,
				(char *) NULL);  //AIX -Warning Removal
		sprintf(l_error_msg,"Could not execute the program %s",p_process_name);
		BT_IF_DEBUG
			CO_ProcMonitor(l_logfile,l_error_msg,NULL,p_intl_env_datastruct_h);
		l_created=0;
		exit(-1);
	}
APL_GOBACK_SUCCESS

RETURN_SUCCESS:	

	APL_CLOSE_FILE(l_cfg_file);
	if(l_predecessors) 
		CO_Pro_FreeArray(l_predecessors);
	if(l_conflicts) 
		CO_Pro_FreeArray(l_conflicts);
	fflush(l_logfile); 
	EXEC SQL COMMIT ;

	APL_FUNCTION_RET_SUCCESS(l_logfile)


RETURN_FAILURE:

	APL_CLOSE_FILE(l_cfg_file);
	
	if(l_predecessors) 
		CO_Pro_FreeArray(l_predecessors);
	if(l_conflicts) 
		CO_Pro_FreeArray(l_conflicts);
	if(l_created) 
	{
		EXEC SQL DELETE BT_process_status
			WHERE PROCESS_NAME=:p_process_name
			AND 	PROCESS_KEY	  =:p_process_key
			AND	STATUS  ='started'
			AND 	START_DATE=:l_sysdate;
		EXEC SQL COMMIT;
	}
	fflush(l_logfile); 
	APL_FUNCTION_RET_FAILURE(l_logfile)

}
