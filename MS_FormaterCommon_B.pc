/************************************************************************************************************
 *              COPYRIGHT NOTICE
 *  
 *  
 *              Copyright @  2005 by Polaris Software Lab Ltd.
 *   
 *             All rights reserved.
 *             No part of this document may be reproduced, stored in a retrieval system,
 *             translated, transcribed, or transmitted in any form or by any means,
 *             without the prior written permission of Polaris Software Lab Limited ('Polaris').
 *           *
 ************************************************************************************************************/

/**********************************************************************
 * *                                                                    *
 *
 * * Project Name        : INTELLECT CUSTODY                            *
 * * Module Name         :                                    *
 * * File Name           : MS_FormaterCommon_B.pc                     *
 * *                                                                    *
 * * Description         : This source file contains the function which *
 *                         is used to Process the incoming message 515  *
 *                         *                                                                    *
 *                         * Screens Used        : None
 *                                 *
 *                        * Reports Used        : None                                         *
 *                        *                                                                    *
 *                        *                                                                    *
 *                        * Notes               :                                              *
 *                        *                                                                    *
 *                        *            Version Control Block                                   *
 *                        *                                                                    *
 *                         * Date       Version       Author               Description          *
 *                        * ---------  --------  ---------------  ---------------------------- *
                          *                                                                    *
 *                        *             1.0       		        New File                *
 *                        *                                                                    *
 *                        * List of functions   :                                              *
 *                        *                                                                    *
 *                        * Function Name          Description                                 *
 *                        * ----------------  -------------------------------------------------*              ***********************************************************************************************************/


#include "stdio_64.h" 
#include "Intellect_Interface.h"
#include "CR_Common.h"
#include "MS_Swift.h"
#define UNIQUE_REF_DECADE '2'     
/** Added by Gouse - 09/05/2012 
//#define APL_IF_DEBUG if(1)
 Added by Gouse - 09/05/2012 **/

#define APL_DEBUG_YES (1)


EXEC SQL INCLUDE SQLCA;


int DL_Mod_DLLinkNew(DL_MSGLINK_STRUCT_H *p_cmsglink, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
	{
		
		EXEC SQL BEGIN DECLARE SECTION;
		DL_MSGLINK_STRUCT_H		l_dl_msglink_struct_h;
		DL_MSGLINK_STRUCT_I		l_dl_msglink_struct_i;
		char iden_no[10];
		char chr_h_sfe_repair[31];   
      char chr_h_uniquerefnum[15];
		short i_sfe_repair=0;
		short i_uniquerefnum=0;
		int int_valid_data = 1;
		EXEC SQL VAR l_dl_msglink_struct_h.h_dl_client IS STRING;
		EXEC SQL VAR l_dl_msglink_struct_h.h_indentity_no IS STRING;
		EXEC SQL VAR l_dl_msglink_struct_h.h_msg_in_out_ind IS STRING;
		EXEC SQL VAR l_dl_msglink_struct_h.h_swift_msg_no IS STRING;
		EXEC SQL VAR l_dl_msglink_struct_h.h_new_dt IS STRING;
		EXEC SQL VAR l_dl_msglink_struct_h.h_information IS STRING;
		EXEC SQL VAR iden_no IS STRING;
		EXEC SQL VAR  l_dl_msglink_struct_h.h_message_det_a IS STRING; 
		EXEC SQL VAR  l_dl_msglink_struct_h.h_message_det_b IS STRING;
		EXEC SQL VAR  l_dl_msglink_struct_h.h_message_det_c IS STRING;
		EXEC SQL VAR  l_dl_msglink_struct_h.h_message_det_d IS STRING;
		EXEC SQL VAR  l_dl_msglink_struct_h.h_message_det_e IS STRING;
		EXEC SQL VAR chr_h_sfe_repair           IS STRING;
		EXEC SQL VAR chr_h_uniquerefnum         IS STRING;

      
      EXEC SQL VAR  l_dl_msglink_struct_h.h_psetparty IS STRING;
      EXEC SQL VAR  l_dl_msglink_struct_h.h_place_cd IS STRING;
      EXEC SQL VAR  l_dl_msglink_struct_h.h_description IS STRING;
      

		struct sqlca sqlca;

		EXEC SQL END DECLARE SECTION;
	
		# ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
		#endif
		sqlca.sqlcode=0;
		
		memset(&l_dl_msglink_struct_h,NULL,sizeof(DL_MSGLINK_STRUCT_H));
		memset(&l_dl_msglink_struct_i,NULL,sizeof(DL_MSGLINK_STRUCT_I));

		printf("In dlLinkNew \n");
		/*
		printf("the vals are %s %s %s %s\n",l_dl_msglink_struct_h.h_indentity_no,l_dl_msglink_struct_h.h_msg_in_out_ind,l_dl_msglink_struct_h.h_swift_msg_no,l_dl_msglink_struct_h.h_new_dt);
		*/
		printf("the vals are p_cmsglink->h_indentity_no -- p_cmsglink->h_msg_in_out_ind--%s %s %s %s\n",p_cmsglink->h_indentity_no,p_cmsglink->h_msg_in_out_ind,p_cmsglink->h_swift_msg_no,p_cmsglink->h_new_dt);

		if(   !strlen(p_cmsglink->h_msg_in_out_ind )  )
					APL_DATA_MISSING("LINK TYPE",APL_NULL_STRING,APL_NULL_STRING)

		if(   !strlen(p_cmsglink->h_swift_msg_no )  )
					APL_DATA_MISSING("MESSAGE NO",APL_NULL_STRING,APL_NULL_STRING)

		if(   !strlen(p_cmsglink->h_new_dt )  )
					APL_DATA_MISSING("INPUT DATE",APL_NULL_STRING,APL_NULL_STRING)

		

		sprintf(iden_no,"%d",p_cmsglink->h_sequence_num);

		if(   !strlen(iden_no)  )
					APL_DATA_MISSING("IDEN_NO",APL_NULL_STRING,APL_NULL_STRING)

		if( (p_cmsglink->h_dlrep_sequencenum==0)  && !strlen(p_cmsglink->h_dl_client) && !strlen(p_cmsglink->h_indentity_no) )
		{
			int_valid_data=0;
		}
		
		if ((int_valid_data==0) && (strcmp(p_cmsglink->h_swift_msg_no,"536")!=0))
		{
			APL_DATA_MISSING("ACCOUNT/REFNO/REPAIR SEQUENCE NO",APL_NULL_STRING,APL_NULL_STRING)
		}

		

		if ( strlen(p_cmsglink->h_dl_client) )
			strcpy(l_dl_msglink_struct_h.h_dl_client,p_cmsglink->h_dl_client);
		else
			l_dl_msglink_struct_i.i_dl_client = -1;

		if ( strlen(p_cmsglink->h_information) )
			strcpy(l_dl_msglink_struct_h.h_information,p_cmsglink->h_information);
		else
			l_dl_msglink_struct_i.i_information = -1;

		if ( strlen(p_cmsglink->h_indentity_no) )
         { 
         EXEC SQL SELECT UPPER(:p_cmsglink->h_indentity_no) INTO :l_dl_msglink_struct_h.h_indentity_no
         FROM DUAL;
         IS_ANY_ORA_ERROR
         }
		else
			l_dl_msglink_struct_i.i_indentity_no = -1;

		strcpy(l_dl_msglink_struct_h.h_msg_in_out_ind,p_cmsglink->h_msg_in_out_ind);
		strcpy(l_dl_msglink_struct_h.h_swift_msg_no,p_cmsglink->h_swift_msg_no);
		strcpy(l_dl_msglink_struct_h.h_new_dt,p_cmsglink->h_new_dt);

		printf("the vals are %s %s %s %s\n",l_dl_msglink_struct_h.h_indentity_no,l_dl_msglink_struct_h.h_msg_in_out_ind,
				        l_dl_msglink_struct_h.h_swift_msg_no,l_dl_msglink_struct_h.h_new_dt);
		
		if (p_cmsglink->h_dlrep_sequencenum)
			l_dl_msglink_struct_h.h_dlrep_sequencenum = p_cmsglink->h_dlrep_sequencenum;
		else
			l_dl_msglink_struct_i.i_dlrep_sequencenum = -1;

		l_dl_msglink_struct_h.h_sequence_num = p_cmsglink->h_sequence_num;

	/* Adding for debuging - ISKB - 642 - JC */
	printf("JC::: Before assigning -- h_message_det_a ||%s||\n", l_dl_msglink_struct_h.h_message_det_a);
	printf("JC::: Before assigning -- i_message_det_a ||%d||\n", l_dl_msglink_struct_i.i_message_det_a);
	printf("JC::: Before assigning -- i_message_det_b ||%d||\n", l_dl_msglink_struct_i.i_message_det_b);
	printf("JC::: Before assigning -- i_message_det_c ||%d||\n", l_dl_msglink_struct_i.i_message_det_c);
	printf("JC::: Before assigning -- i_message_det_d ||%d||\n", l_dl_msglink_struct_i.i_message_det_d);
	printf("JC::: Before assigning -- i_message_det_e ||%d||\n", l_dl_msglink_struct_i.i_message_det_e);
	/* Adding for debuging - ISKB - 642 - JC */
		
      if (strcmp(l_dl_msglink_struct_h.h_msg_in_out_ind,"I")==0)
        {
		if (strlen(p_cmsglink->h_message_det_a))
			strcpy(l_dl_msglink_struct_h.h_message_det_a,p_cmsglink->h_message_det_a);
		else
			l_dl_msglink_struct_i.i_message_det_a = -1;
		
		if (strlen(p_cmsglink->h_message_det_b))
			strcpy(l_dl_msglink_struct_h.h_message_det_b,p_cmsglink->h_message_det_b);
		else
			l_dl_msglink_struct_i.i_message_det_b = -1;
		if (strlen(p_cmsglink->h_message_det_c))
			strcpy(l_dl_msglink_struct_h.h_message_det_c,p_cmsglink->h_message_det_c);
		else
			l_dl_msglink_struct_i.i_message_det_c = -1;
		if (strlen(p_cmsglink->h_message_det_d))
			strcpy(l_dl_msglink_struct_h.h_message_det_d,p_cmsglink->h_message_det_d);
		else
			l_dl_msglink_struct_i.i_message_det_d = -1;
		if (strlen(p_cmsglink->h_message_det_e))
			strcpy(l_dl_msglink_struct_h.h_message_det_e,p_cmsglink->h_message_det_e);
		else
			l_dl_msglink_struct_i.i_message_det_e = -1;
        }
      else
        {
          l_dl_msglink_struct_i.i_message_det_a = -1;
			 l_dl_msglink_struct_i.i_message_det_b = -1;
          l_dl_msglink_struct_i.i_message_det_c = -1;
			 l_dl_msglink_struct_i.i_message_det_d = -1;
          l_dl_msglink_struct_i.i_message_det_e = -1;
		  }
			
			


      
      if (strlen(p_cmsglink->h_psetparty))
         strcpy(l_dl_msglink_struct_h.h_psetparty,p_cmsglink->h_psetparty);
      else
         l_dl_msglink_struct_i.i_psetparty = -1;


      if (strlen(p_cmsglink->h_place_cd))
         strcpy(l_dl_msglink_struct_h.h_place_cd,p_cmsglink->h_place_cd);
      else
         l_dl_msglink_struct_i.i_place_cd = -1;

      if (strlen(p_cmsglink->h_description))
         strcpy(l_dl_msglink_struct_h.h_description,p_cmsglink->h_description);
      else
         l_dl_msglink_struct_i.i_description = -1;

	/* Adding for debuging - ISKB - 642 - JC */
	printf("JC::: Before printing -- i_message_det_a [%d]\n", l_dl_msglink_struct_i.i_message_det_a);
	printf("JC::: Before printing -- i_message_det_b [%d]\n", l_dl_msglink_struct_i.i_message_det_b);
	printf("JC::: Before printing -- i_message_det_c [%d]\n", l_dl_msglink_struct_i.i_message_det_c);
	printf("JC::: Before printing -- i_message_det_d [%d]\n", l_dl_msglink_struct_i.i_message_det_d);
	printf("JC::: Before printing -- i_message_det_e [%d]\n", l_dl_msglink_struct_i.i_message_det_e);
	/* Adding for debuging - ISKB - 642 - JC */
      
printf ("data:%s:data\n",l_dl_msglink_struct_h.h_dl_client);
printf ("data:%s:data\n",l_dl_msglink_struct_h.h_indentity_no);
printf ("data:%s:data\n",l_dl_msglink_struct_h.h_msg_in_out_ind);
printf ("data:%s:data\n",l_dl_msglink_struct_h.h_swift_msg_no);
printf ("data:%s:data\n",l_dl_msglink_struct_h.h_new_dt);
printf ("data:%s:data\n",l_dl_msglink_struct_h.h_information);
printf ("data:%s:data\n",l_dl_msglink_struct_h.h_message_det_a);
printf ("data:%s:data\n",l_dl_msglink_struct_h.h_message_det_b);
printf ("data:%s:data\n",l_dl_msglink_struct_h.h_message_det_c);
printf ("data:%s:data\n",l_dl_msglink_struct_h.h_message_det_d);
printf ("data:%s:data\n",l_dl_msglink_struct_h.h_message_det_e);
printf ("data:%s:data\n",l_dl_msglink_struct_h.h_psetparty);
printf ("data:%s:data\n",l_dl_msglink_struct_h.h_place_cd);
printf ("data:%s:data\n",l_dl_msglink_struct_h.h_description);
printf ("data:%d:data\n",l_dl_msglink_struct_h.h_dlrep_sequencenum);
printf ("data:%d:data\n",l_dl_msglink_struct_h.h_sequence_num);

/* changes by amish -- 21/06  -- start */
printf("\n client is******************|%s|\n",l_dl_msglink_struct_h.h_dl_client);
printf("\n ref no is ******************|%s|\n",l_dl_msglink_struct_h.h_indentity_no);
		EXEC SQL DELETE FROM DL_MSGLINK
			WHERE CLIENT = :l_dl_msglink_struct_h.h_dl_client
			AND IDENTIY_NO = :l_dl_msglink_struct_h.h_indentity_no;

		printf("\n after delete(for multiple entries) sql code is |%d|\n",sqlca.sqlcode);
			IS_ANY_ORA_ERROR

	/* Adding for debuging - ISKB - 642 - JC 
	printf("JC::: Before inserting -- i_message_det_a [%d]\n", l_dl_msglink_struct_i.i_message_det_a);
	if((l_dl_msglink_struct_i.i_message_det_a == -1) && (strlen(l_dl_msglink_struct_h.h_message_det_a) != 0))
	{
		l_dl_msglink_struct_i.i_message_det_a = 0;
	}
	printf("JC::: Before inserting -- i_message_det_b [%d]\n", l_dl_msglink_struct_i.i_message_det_b);
	if((l_dl_msglink_struct_i.i_message_det_b == -1) && (strlen(l_dl_msglink_struct_h.h_message_det_b) != 0))
	{
		l_dl_msglink_struct_i.i_message_det_b = 0;
	}
	printf("JC::: Before inserting -- i_message_det_c [%d]\n", l_dl_msglink_struct_i.i_message_det_c);
	if((l_dl_msglink_struct_i.i_message_det_c == -1) && (strlen(l_dl_msglink_struct_h.h_message_det_c) != 0))
	{
		l_dl_msglink_struct_i.i_message_det_c = 0;
	}
	printf("JC::: Before inserting -- i_message_det_d [%d]\n", l_dl_msglink_struct_i.i_message_det_d);
	if((l_dl_msglink_struct_i.i_message_det_d == -1) && (strlen(l_dl_msglink_struct_h.h_message_det_d) != 0))
	{
		l_dl_msglink_struct_i.i_message_det_d = 0;
	}
	printf("JC::: Before inserting -- i_message_det_e [%d]\n", l_dl_msglink_struct_i.i_message_det_e);
	if((l_dl_msglink_struct_i.i_message_det_e == -1) && (strlen(l_dl_msglink_struct_h.h_message_det_e) != 0))
	{
		l_dl_msglink_struct_i.i_message_det_e = 0;
	}
	 Adding for debuging - ISKB - 642 - JC */

/* changes by amish -- 21/06 = --end */
		EXEC SQL INSERT INTO DL_MSGLINK 
				VALUES (:l_dl_msglink_struct_h:l_dl_msglink_struct_i);
	
		printf("After insert %d\n",sqlca.sqlcode);	
		IS_ANY_ORA_ERROR

/* Adding for debuging - ISKB - 642 - JC 

		EXEC SQL SELECT MESSAGE_DET_A 
			INTO :l_dl_msglink_struct_h.h_message_det_a:l_dl_msglink_struct_i.i_message_det_a
			FROM DL_MSGLINK 
			WHERE CLIENT = :l_dl_msglink_struct_h.h_dl_client
                        AND IDENTIY_NO = :l_dl_msglink_struct_h.h_indentity_no;

		printf("JC::: ORA After select statement -- [%d]\n", sqlca.sqlcode);
		printf("JC::: Len of message_det_a - [%d]\n", strlen(l_dl_msglink_struct_h.h_message_det_a));
		printf("JC::: Value selected from table for message_det_a --> \n[[%s]]\n", l_dl_msglink_struct_h.h_message_det_a);
		printf("JC::: indicator for message_det_a -- [%d]\n", l_dl_msglink_struct_i.i_message_det_a);

		//Updating the table with value of message_det_a
		if(strlen(l_dl_msglink_struct_h.h_message_det_a) < 1)
		{
			printf("JC::: Updating the table with value of MESSAGE_DET_A\n");
			EXEC SQL
			UPDATE DL_MSGLINK
			SET MESSAGE_DET_A = :l_dl_msglink_struct_h.h_message_det_a
			WHERE CLIENT = :l_dl_msglink_struct_h.h_dl_client
			AND IDENTIY_NO = :l_dl_msglink_struct_h.h_indentity_no;

			printf("JC::: ORA for update -- [%d]\n", sqlca.sqlcode);
			EXEC SQL SELECT MESSAGE_DET_A
                        INTO :l_dl_msglink_struct_h.h_message_det_a:l_dl_msglink_struct_i.i_message_det_a
                        FROM DL_MSGLINK
                        WHERE CLIENT = :l_dl_msglink_struct_h.h_dl_client
                        AND IDENTIY_NO = :l_dl_msglink_struct_h.h_indentity_no;

                	printf("JC::: ORA After select statement -- [%d]\n", sqlca.sqlcode);
                	printf("JC::: Len of message_det_a - [%d]\n", strlen(l_dl_msglink_struct_h.h_message_det_a));
                	printf("JC::: Value selected from table for message_det_a --> \n[[%s]]\n", l_dl_msglink_struct_h.h_message_det_a);
                	printf("JC::: indicator for message_det_a -- [%d]\n", l_dl_msglink_struct_i.i_message_det_a);
		}


Adding for debuging - ISKB - 642 - JC */
		
			
			
		if (strcmp(l_dl_msglink_struct_h.h_swift_msg_no,"515") != 0)  /* chgs by amish--29/04 */
		{
			if (strcmp(l_dl_msglink_struct_h.h_msg_in_out_ind,"I") == 0)
           {
            printf("inside if \n"); 
				memset(chr_h_sfe_repair,APL_NULL_CHAR,31);
             memset(chr_h_uniquerefnum,APL_NULL_CHAR,15);
            sqlca.sqlcode=0;
            EXEC SQL SELECT UNIQ_IDENT_NO INTO :chr_h_uniquerefnum:i_uniquerefnum
                     FROM DL_DEALREPAIR
                     WHERE
							CLIENT = :l_dl_msglink_struct_h.h_dl_client
                     AND IDENTIY_NO = :l_dl_msglink_struct_h.h_indentity_no;
            if (sqlca.sqlcode == 1403)
              {
               sqlca.sqlcode=0;
                EXEC SQL SELECT UNIQ_IDENT_NO INTO :chr_h_uniquerefnum:i_uniquerefnum
                     FROM DL_DEAL
                     WHERE
							CLIENT = :l_dl_msglink_struct_h.h_dl_client
                     AND IDENTIY_NO = :l_dl_msglink_struct_h.h_indentity_no;
                IS_ANY_ORA_ERROR
              }
            EXEC SQL SELECT SUBSTR(MESSAGE_DET_A,INSTR(MESSAGE_DET_A,CHR(10))+1,4)
                     INTO :chr_h_sfe_repair:i_sfe_repair
                     FROM DL_MSGLINK
                     WHERE
                     MSG_IN_OUT_IND = 'I'
                     AND   CLIENT = :l_dl_msglink_struct_h.h_dl_client
                     AND   IDENTIY_NO = :l_dl_msglink_struct_h.h_indentity_no
                     AND   DATE_OF_INPUT = :l_dl_msglink_struct_h.h_new_dt ;

                   IS_ANY_ORA_ERROR

             if (strncmp(chr_h_sfe_repair,"R|Y|",4) == 0)
                {
                   EXEC SQL INSERT INTO DL_SFEREJ
                        VALUES (:l_dl_msglink_struct_h.h_dl_client,:l_dl_msglink_struct_h.h_indentity_no,:l_dl_msglink_struct_h.h_new_dt,:l_dl_msglink_struct_h.h_information,:chr_h_sfe_repair,:chr_h_uniquerefnum);
                   IS_ANY_ORA_ERROR
                 CO_ProcMonitor(APL_OUT_FILE,"Inserting Into SFEREJ \n",NULL,NULL);
                }
         }		
	  }		
		APL_GOBACK_SUCCESS

 

	   RETURN_SUCCESS:

		APL_IF_DEBUG
			 {
				  CO_ProcMonitor(APL_OUT_FILE,"Exiting successfully out of DL_Mod_DLLinkNew\n",NULL,NULL);
			 }
		return APL_SUCCESS;

  	   RETURN_FAILURE:

   	APL_IF_DEBUG
	       {
		 		  CO_ProcMonitor(APL_OUT_FILE,"Exiting unsuccessfully out of DL_Mod_DLLinkNew\n",NULL,NULL);
			 }
	   return APL_FAILURE;


	}



	int DL_Mod_DLLinkDetNew(DL_MSGLINKDET_STRUCT_H *p_cmsglinkdet,
								 DEBUG_INFO_STRUCT_H  		 **l_debug_info_ptr)
		{
			EXEC SQL BEGIN DECLARE SECTION;
			DL_MSGLINKDET_STRUCT_H	l_dl_msglinkdet_struct_h;
			DL_MSGLINKDET_STRUCT_I	l_dl_msglinkdet_struct_i;
			char iden_no[10];

			EXEC SQL VAR l_dl_msglinkdet_struct_h.h_sequence_name IS STRING;
			EXEC SQL VAR l_dl_msglinkdet_struct_h.h_link_val IS STRING;
			EXEC SQL VAR l_dl_msglinkdet_struct_h.h_link_msg_tag IS STRING;
			EXEC SQL VAR iden_no IS STRING;
			
			struct sqlca sqlca;
			EXEC SQL END DECLARE SECTION;

			# ifdef APL_THREADS
		   APL_SET_CONTEXT
			EXEC SQL CONTEXT USE :my_ctx_local;
			#endif
			sqlca.sqlcode=0;

			memset(&l_dl_msglinkdet_struct_h,NULL,sizeof(DL_MSGLINKDET_STRUCT_H));
		 	memset(&l_dl_msglinkdet_struct_i,NULL,sizeof(DL_MSGLINKDET_STRUCT_I));

			l_dl_msglinkdet_struct_h = *p_cmsglinkdet;

			sprintf(iden_no,"%d",l_dl_msglinkdet_struct_h.h_sequence_num);//AIX - Warnings Removal

			if( !strlen(l_dl_msglinkdet_struct_h.h_sequence_name )  )
				l_dl_msglinkdet_struct_i.i_sequence_name = -1;
			
			
			if( !l_dl_msglinkdet_struct_h.h_msg_tag_rep_no )
				l_dl_msglinkdet_struct_i.i_msg_tag_rep_no = -1;

			
			
			if(!l_dl_msglinkdet_struct_h.h_msg_line_no)
				l_dl_msglinkdet_struct_i.i_msg_line_no = -1;

			if( !strlen(l_dl_msglinkdet_struct_h.h_link_val )  )
				APL_DATA_MISSING("FIELD",APL_NULL_STRING,APL_NULL_STRING)

			if( !strlen(l_dl_msglinkdet_struct_h.h_link_msg_tag )  )
				APL_DATA_MISSING("VALUE",APL_NULL_STRING,APL_NULL_STRING)

			if( !strlen(iden_no)  )
				APL_DATA_MISSING("IDEN_NO",APL_NULL_STRING,APL_NULL_STRING)

			

			EXEC SQL INSERT INTO DL_MSGLINKDET
						VALUES (:l_dl_msglinkdet_struct_h:l_dl_msglinkdet_struct_i);

			IS_ANY_ORA_ERROR

			APL_GOBACK_SUCCESS
	
	
	

		  RETURN_SUCCESS:

				APL_IF_DEBUG
					 {
						  CO_ProcMonitor(APL_OUT_FILE,"Exiting successfully out of DL_Mod_DLLinkDetNew\n",NULL,NULL);
					 }
				 return APL_SUCCESS;

		  RETURN_FAILURE:

				  APL_IF_DEBUG
					   {
						  CO_ProcMonitor(APL_OUT_FILE,"Exiting unsuccessfully out of DL_Mod_DLLinkDetNew\n",NULL,NULL);
					   }
				  return APL_FAILURE;
		}



	int DL_Rtv_DLLinkDet(DL_MSGLINK_STRUCT_H		*p_cmsglink,
								 char   						*p_seq_name,
								 DL_MSGLINKDET_STRUCT_H	**p_cmsglinkdet,
								 int 							*int_p_count,
								 DEBUG_INFO_STRUCT_H				**l_debug_info_ptr)

	{
		EXEC SQL BEGIN DECLARE SECTION;
		DL_MSGLINK_STRUCT_H l_dl_msglink_struct_h;
		DL_MSGLINKDET_STRUCT_H	l_dl_msglinkdet_struct_h;
		DL_MSGLINKDET_STRUCT_I l_dl_msglinkdet_struct_i;
	   char chr_repseqno[10];
		char chr_l_msgno[7];	
		char chr_l_seqname[6];
		int chr_l_seqno=0;
		int dbl_i=1;
		int int_valid_data=0;
	   EXEC SQL VAR l_dl_msglink_struct_h.h_dl_client IS STRING;
	   EXEC SQL VAR l_dl_msglink_struct_h.h_indentity_no IS STRING;
      EXEC SQL VAR l_dl_msglink_struct_h.h_msg_in_out_ind IS STRING;
      EXEC SQL VAR l_dl_msglink_struct_h.h_swift_msg_no IS STRING;
      EXEC SQL VAR l_dl_msglink_struct_h.h_new_dt IS STRING;
      EXEC SQL VAR l_dl_msglink_struct_h.h_information IS STRING;

		EXEC SQL VAR l_dl_msglinkdet_struct_h.h_sequence_name IS STRING;
		EXEC SQL VAR l_dl_msglinkdet_struct_h.h_link_val IS STRING;
		EXEC SQL VAR l_dl_msglinkdet_struct_h.h_link_msg_tag IS STRING;

      EXEC SQL VAR chr_repseqno IS STRING;
		EXEC SQL VAR chr_l_msgno IS STRING;
		EXEC SQL VAR chr_l_seqname IS STRING;

      struct sqlca sqlca;

     EXEC SQL END DECLARE SECTION;

	  # ifdef APL_THREADS
	   APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
	  #endif
		sqlca.sqlcode=0;
		memset(&l_dl_msglink_struct_h,NULL,sizeof(DL_MSGLINK_STRUCT_H));
		memset(&l_dl_msglinkdet_struct_h,NULL,sizeof(DL_MSGLINKDET_STRUCT_H));
		memset(&l_dl_msglinkdet_struct_i,NULL,sizeof(DL_MSGLINKDET_STRUCT_I));

		strcpy(l_dl_msglink_struct_h.h_dl_client,p_cmsglink->h_dl_client);
		strcpy(l_dl_msglink_struct_h.h_indentity_no,p_cmsglink->h_indentity_no);
		strcpy(l_dl_msglink_struct_h.h_msg_in_out_ind,p_cmsglink->h_msg_in_out_ind);
		strcpy(l_dl_msglink_struct_h.h_swift_msg_no,p_cmsglink->h_swift_msg_no);
		strcpy(l_dl_msglink_struct_h.h_new_dt,p_cmsglink->h_new_dt);
		strcpy(l_dl_msglink_struct_h.h_information,p_cmsglink->h_information);
		l_dl_msglink_struct_h.h_dlrep_sequencenum = p_cmsglink->h_dlrep_sequencenum;
		l_dl_msglink_struct_h.h_sequence_num = p_cmsglink->h_sequence_num;

		strcpy(chr_l_seqname,p_seq_name);
		sprintf(chr_repseqno,"%d",l_dl_msglink_struct_h.h_dlrep_sequencenum);//AIX - Warnings Removal
		
		if (strlen(l_dl_msglink_struct_h.h_dl_client) && strlen(l_dl_msglink_struct_h.h_indentity_no))
		{
			int_valid_data =1;
		}
		else if (l_dl_msglink_struct_h.h_sequence_num != 0)
		{
			int_valid_data=1;
		}

		if (int_valid_data==0)
			APL_DATA_MISSING("MANDATORY DATA MISSING",APL_NULL_STRING,APL_NULL_STRING)
		
		 if( !strlen(l_dl_msglink_struct_h.h_msg_in_out_ind )  )
			 APL_DATA_MISSING("LINK TYPE",APL_NULL_STRING,APL_NULL_STRING)

		if( !strlen(l_dl_msglink_struct_h.h_swift_msg_no )  )
			 APL_DATA_MISSING("MESSAGE NO",APL_NULL_STRING,APL_NULL_STRING)

		 if( !strlen(l_dl_msglink_struct_h.h_new_dt )  )
			 APL_DATA_MISSING("INPUT DATE",APL_NULL_STRING,APL_NULL_STRING)

		 

		 if( !strlen(chr_l_seqname)  )
			 APL_DATA_MISSING("SEQNAME",APL_NULL_STRING,APL_NULL_STRING)

   	if ( APL_SUCCESS==CO_ChkErr(*l_debug_info_ptr))
			 APL_GOBACK_FAIL

		if ( strlen(l_dl_msglink_struct_h.h_dl_client) && strlen(l_dl_msglink_struct_h.h_indentity_no) )
		{
			EXEC SQL SELECT SWIFT_MSG_NO,INDEN_NUM 
						INTO :chr_l_msgno,:chr_l_seqno
						FROM DL_MSGLINK 
						WHERE CLIENT = :l_dl_msglink_struct_h.h_dl_client AND
								IDENTIY_NO = :l_dl_msglink_struct_h.h_indentity_no;

			IS_ANY_ORA_ERROR

			strcpy(l_dl_msglink_struct_h.h_swift_msg_no, chr_l_msgno);
			l_dl_msglink_struct_h.h_sequence_num = chr_l_seqno;
			*p_cmsglink = l_dl_msglink_struct_h;
		}
			
		EXEC SQL DECLARE cmsglinkdet_cursor CURSOR FOR
					SELECT * 
					FROM DL_MSGLINKDET 
					WHERE INDEN_NUM = :chr_l_seqno
					ORDER BY SEQUENCE_NAME, link_val, MSG_TAG_REP_NO, MSG_LINE_NO;
		
		EXEC SQL OPEN cmsglinkdet_cursor;

		IS_ANY_ORA_ERROR

		for (dbl_i=1;;dbl_i++)
		{
			*p_cmsglinkdet= realloc(*p_cmsglinkdet,sizeof(DL_MSGLINKDET_STRUCT_H)*dbl_i);

			memset(&l_dl_msglinkdet_struct_h, NULL, sizeof(DL_MSGLINKDET_STRUCT_H));

			EXEC SQL FETCH cmsglinkdet_cursor 
						INTO :l_dl_msglinkdet_struct_h:l_dl_msglinkdet_struct_i;

			IS_ANY_ORA_ERROR_CURSOR

			*p_cmsglinkdet[dbl_i] = l_dl_msglinkdet_struct_h;
		}

		*int_p_count = dbl_i-1;

		APL_GOBACK_SUCCESS;
		


	  RETURN_SUCCESS:

	  APL_IF_DEBUG
		{
		  CO_ProcMonitor(APL_OUT_FILE,"Exiting successfully out of  DL_Rtv_DLLinkDet\n",NULL,NULL);
		}
	  return APL_SUCCESS;

	  RETURN_FAILURE:

	  APL_IF_DEBUG
	   {
		 CO_ProcMonitor(APL_OUT_FILE,"Exiting unsuccessfully out of  DL_Rtv_DLLinkDet\n",NULL,NULL);
	   }
	  return APL_FAILURE;
	}	




int CA_Rtv_CALink(char *p_link_type,
						 CAMESGLINK_STRUCT_H *p_amsglink,char *p_pay_srl_nbr,
			   		  DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {

		Alert("At Start of CA_Rtv_CALink ");
	  EXEC SQL BEGIN DECLARE SECTION;
	  CAMESGLINK_STRUCT_H l_camesglink_struct_ha;
	  CAMESGLINK_STRUCT_I l_camesglink_struct_i;	
		char h_link_class[3];
		int chr_h_count =0;
		char h_dl_client[APL_CLIENT_LENGTH];
		short int i_dl_client = 0;
		
		char h_pymt_srl_nbr[3] = APL_NULL_STRING;

		char h_timestamp[APL_DATE_LEN];
		EXEC SQL  VAR h_link_class IS STRING;
		EXEC SQL VAR l_camesglink_struct_ha.h_corp_id IS STRING;
		EXEC SQL VAR l_camesglink_struct_ha.h_preliminary_flag IS STRING;
		EXEC SQL VAR l_camesglink_struct_ha.h_dl_client IS STRING;
		EXEC SQL VAR l_camesglink_struct_ha.h_swift_msg_no IS STRING;
	   EXEC SQL VAR l_camesglink_struct_ha.h_link_class IS STRING;

		EXEC SQL VAR h_timestamp IS STRING;
		EXEC SQL VAR h_dl_client IS STRING;
	   EXEC SQL VAR l_camesglink_struct_ha.h_msg_in_out_ind IS STRING;
		EXEC SQL VAR l_camesglink_struct_ha.h_swift_msgrefno IS STRING;
		EXEC SQL VAR l_camesglink_struct_ha.h_information IS STRING;
		EXEC SQL VAR l_camesglink_struct_ha.h_new_dt IS STRING;
		
	   struct sqlca sqlca;
		EXEC SQL END DECLARE SECTION;
		
		# ifdef APL_THREADS
	     APL_SET_CONTEXT
		  EXEC SQL CONTEXT USE :my_ctx_local;
	  #endif

		sqlca.sqlcode=0;

		 memset(&l_camesglink_struct_ha,NULL,sizeof(CAMESGLINK_STRUCT_H));
		 memset(&l_camesglink_struct_i,NULL,sizeof(CAMESGLINK_STRUCT_I));

	   strcpy(h_link_class,p_link_type);
		printf("h_link_type in aselmsglink ****  is %s\n",h_link_class);
		strcpy(h_pymt_srl_nbr,p_pay_srl_nbr);

		if ( !strcmp(h_link_class, "VN") || !strcmp(h_link_class, "VR") )
		{
		chr_h_count = 0;
	  EXEC SQL SELECT NVL( COUNT(*),0) 
	  			  INTO :chr_h_count 
				  FROM CAMESGLINK
				  WHERE CORP_ID=:p_amsglink->h_corp_id
				  AND CLIENT =:p_amsglink->h_dl_client
				  AND TYPEOF_MSG_LNK=:h_link_class;
		IS_ANY_ORA_ERROR

	/**		if (chr_h_count==0)
			{
				EXEC SQL SELECT CLN_MASTER 
						INTO :h_dl_client:i_dl_client
						FROM MT_CLIENT 
						WHERE cln_code= :p_amsglink->h_dl_client;

				IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_ACCNOT_FND, l_camesglink_struct_ha.h_dl_client, APL_NULL_STRING, APL_NULL_STRING)
			}
			else **/
				strcpy(h_dl_client,p_amsglink->h_dl_client);
		}
		else
		{
			strcpy(h_dl_client,p_amsglink->h_dl_client);
		}

		chr_h_count = 0;
	  EXEC SQL SELECT NVL( COUNT(*),0) 
	  			  INTO :chr_h_count 
				  FROM CAMESGLINK
				  WHERE CORP_ID=:p_amsglink->h_corp_id
				  AND CLIENT =:h_dl_client
			  AND TYPEOF_MSG_LNK=:h_link_class;

	  if (chr_h_count ==0)
	  { 
		 *p_amsglink = l_camesglink_struct_ha;
	    APL_GOBACK_SUCCESS
     }
		
		else if (!strcmp(h_link_class,"PN"))
		{
		printf("entering if link type is PN *************");
		EXEC SQL SELECT * INTO :l_camesglink_struct_ha:l_camesglink_struct_i
		          FROM CAMESGLINK
		          WHERE CORP_ID=:p_amsglink->h_corp_id
		         AND CLIENT= :h_dl_client
		          AND TYPEOF_MSG_LNK = :h_link_class
		         AND rtrim(substr(INFORMATION,1,2)) = :h_pymt_srl_nbr ;

		IS_ANY_ORA_ERROR
		}
	  else if (chr_h_count==1)	
	  {
		 EXEC SQL SELECT * INTO :l_camesglink_struct_ha:l_camesglink_struct_i
						FROM CAMESGLINK
						WHERE CORP_ID=:p_amsglink->h_corp_id
						AND CLIENT=:h_dl_client
						AND TYPEOF_MSG_LNK =:h_link_class;

		 IS_ANY_ORA_ERROR
	  }
	  else if (chr_h_count>1)
	  {
	 	 /* EXEC SQL SELECT TO_CHAR( MAX(DATE_OF_INPUT)) 
					 INTO :h_timestamp 
					 FROM CAMESGLINK	
					 WHERE CORP_ID=:p_amsglink->h_corp_id
					 AND CLIENT=:h_dl_client
					 AND TYPEOF_MSG_LNK = :h_link_class;

			IS_ANY_ORA_ERROR

	    EXEC SQL SELECT * 
						INTO :l_camesglink_struct_ha INDICATOR :l_camesglink_struct_i
						FROM CAMESGLINK
						WHERE CORP_ID=:p_amsglink->h_corp_id AND 
								CLIENT=:h_dl_client AND 
								TYPEOF_MSG_LNK = :h_link_class AND 
								DATE_OF_INPUT = :h_timestamp; */
		EXEC SQL SELECT * 
  						INTO :l_camesglink_struct_ha INDICATOR :l_camesglink_struct_i
				FROM (
					SELECT *
  						FROM CAMESGLINK
  						WHERE CORP_ID=:p_amsglink->h_corp_id AND
        				CLIENT=:h_dl_client AND
        				TYPEOF_MSG_LNK = :h_link_class order by DATE_OF_INPUT desc)
					WHERE ROWNUM=1;
		Alert("sqlca.sqlcode is |%d|",sqlca.sqlcode);

		 IS_ANY_ORA_ERROR
	  }

	 *p_amsglink = l_camesglink_struct_ha;
		Alert("At End of CA_Rtv_CALink ");

	 APL_GOBACK_SUCCESS

	

		  RETURN_SUCCESS:

				//APL_IF_DEBUG /** Commented by Gosue - 09/05/2012 **/
					// {
						  CO_ProcMonitor(APL_OUT_FILE,"Exiting successfully out of CA_Rtv_CALink\n",NULL,NULL);
					// }
				 return APL_SUCCESS;

		  RETURN_FAILURE:

				  //APL_IF_DEBUG
					   //{
						  CO_ProcMonitor(APL_OUT_FILE,"Exiting unsuccessfully out of CA_Rtv_CALink\n",NULL,NULL);
					   //}
				  return APL_FAILURE;
}



int CA_Mod_CALinkNew(CAMESGLINK_STRUCT_H *p_amsglink,
						 DEBUG_INFO_STRUCT_H      **l_debug_info_ptr)

{
	Alert("Entered into CA_Mod_CALinkNew");

	 EXEC SQL BEGIN DECLARE SECTION;
  	 CAMESGLINK_STRUCT_H l_camesglink_struct_ha;
	 CAMESGLINK_STRUCT_I l_camesglink_struct_i;	


	  EXEC SQL VAR l_camesglink_struct_ha.h_corp_id IS STRING;
	  EXEC SQL VAR l_camesglink_struct_ha.h_preliminary_flag IS STRING;
	  EXEC SQL VAR l_camesglink_struct_ha.h_dl_client IS STRING;
	  EXEC SQL VAR l_camesglink_struct_ha.h_swift_msg_no IS STRING;
	  EXEC SQL VAR l_camesglink_struct_ha.h_msg_in_out_ind IS STRING;


	  EXEC SQL VAR l_camesglink_struct_ha.h_link_class IS STRING;
	  EXEC SQL VAR l_camesglink_struct_ha.h_swift_msgrefno IS STRING;
	  EXEC SQL VAR l_camesglink_struct_ha.h_information IS STRING;
	  EXEC SQL VAR l_camesglink_struct_ha.h_new_dt IS STRING;	

		struct sqlca sqlca;
	  EXEC SQL END DECLARE SECTION;

	 # ifdef APL_THREADS
		APL_SET_CONTEXT
	  EXEC SQL CONTEXT USE :my_ctx_local;
	 #endif
	 sqlca.sqlcode=0;	
	
	 memset(&l_camesglink_struct_ha, NULL,sizeof(CAMESGLINK_STRUCT_H));
	 memset(&l_camesglink_struct_i, NULL,sizeof(CAMESGLINK_STRUCT_I)); 


	 strcpy(l_camesglink_struct_ha.h_corp_id,p_amsglink->h_corp_id);
	 strcpy(l_camesglink_struct_ha.h_preliminary_flag,p_amsglink->h_preliminary_flag);
	 strcpy(l_camesglink_struct_ha.h_dl_client,p_amsglink->h_dl_client);
	 strcpy(l_camesglink_struct_ha.h_swift_msg_no,p_amsglink->h_swift_msg_no);
	 strcpy(l_camesglink_struct_ha.h_msg_in_out_ind,p_amsglink->h_msg_in_out_ind);
	 strcpy(l_camesglink_struct_ha.h_link_class,p_amsglink->h_link_class);
	 strcpy(l_camesglink_struct_ha.h_swift_msgrefno,p_amsglink->h_swift_msgrefno);
	 strcpy(l_camesglink_struct_ha.h_new_dt,p_amsglink->h_new_dt);
	 strcpy(l_camesglink_struct_ha.h_information,p_amsglink->h_information);

	Alert("l_camesglink_struct_ha.h_corp_id is |%s|",l_camesglink_struct_ha.h_corp_id);
	Alert("l_camesglink_struct_ha.h_corp_id is |%s|",l_camesglink_struct_ha.h_preliminary_flag);
	Alert("l_camesglink_struct_ha.h_corp_id is |%s|",l_camesglink_struct_ha.h_dl_client);
	Alert("l_camesglink_struct_ha.h_corp_id is |%s|",l_camesglink_struct_ha.h_swift_msg_no);
	Alert("l_camesglink_struct_ha.h_corp_id is |%s|",l_camesglink_struct_ha.h_msg_in_out_ind);
	Alert("l_camesglink_struct_ha.h_corp_id is |%s|",l_camesglink_struct_ha.h_link_class);
	Alert("l_camesglink_struct_ha.h_corp_id is |%s|",l_camesglink_struct_ha.h_swift_msgrefno);
	Alert("l_camesglink_struct_ha.h_corp_id is |%s|",l_camesglink_struct_ha.h_new_dt);
	Alert("l_camesglink_struct_ha.h_corp_id is |%s|",l_camesglink_struct_ha.h_information);

	if( !strlen(l_camesglink_struct_ha.h_corp_id )  )
	 	APL_DATA_MISSING("CORP_ID",APL_NULL_STRING,APL_NULL_STRING)

	if( !strlen(l_camesglink_struct_ha.h_preliminary_flag )  )
	 	APL_DATA_MISSING("PRELIMINDICATOR",APL_NULL_STRING,APL_NULL_STRING)

	if( !strlen(l_camesglink_struct_ha.h_dl_client )  )
		APL_DATA_MISSING("CLIENT",APL_NULL_STRING,APL_NULL_STRING)

	if( !strlen(l_camesglink_struct_ha.h_swift_msg_no )  )
		APL_DATA_MISSING("MSG_IDENT_NO",APL_NULL_STRING,APL_NULL_STRING)

	if( !strlen(l_camesglink_struct_ha.h_msg_in_out_ind )  )
		APL_DATA_MISSING("MSG_IN_OUT_IND",APL_NULL_STRING,APL_NULL_STRING)

	if( !strlen(l_camesglink_struct_ha.h_link_class )  )
		APL_DATA_MISSING("TYPEOF_MSG_LNK",APL_NULL_STRING,APL_NULL_STRING)

	if( !strlen(l_camesglink_struct_ha.h_swift_msgrefno )  )
		APL_DATA_MISSING("SWIFT_MSGREFNO",APL_NULL_STRING,APL_NULL_STRING)

	if( !strlen(l_camesglink_struct_ha.h_new_dt )  )
		APL_DATA_MISSING("DATE_OF_INPUT",APL_NULL_STRING,APL_NULL_STRING)
	
	Alert("Before Calling CO_ChkErr");
	
	 /*if ( APL_SUCCESS==CO_ChkErr(*l_debug_info_ptr))  
		APL_GOBACK_FAIL */
	

	if ( !strlen(l_camesglink_struct_ha.h_information) )
		l_camesglink_struct_i.i_information = -1;

	 EXEC SQL INSERT INTO CAMESGLINK
				 VALUES (:l_camesglink_struct_ha:l_camesglink_struct_i);
	Alert("Sqlca.sqlcode is |%d|",sqlca.sqlcode);
	fflush(stdout);

	 IS_ANY_ORA_ERROR
	if(sqlca.sqlcode > 0 )
		APL_GOBACK_FAIL

	APL_GOBACK_SUCCESS
 

		RETURN_SUCCESS:

			printf("\n2345satish 1Sqlca.sqlcode is |%d|\n",sqlca.sqlcode);
			fflush(stdout);

		APL_IF_DEBUG 
		{
			printf("\n3satish 2Sqlca.sqlcode is |%d|\n",sqlca.sqlcode);
			fflush(stdout);
			CO_ProcMonitor(APL_OUT_FILE,"Exiting successfully out of CA_Mod_CALinkNew\n",NULL,NULL);
		}
	   return APL_SUCCESS;

 	   RETURN_FAILURE:

		APL_IF_DEBUG
		 {
		  CO_ProcMonitor(APL_OUT_FILE,"Exiting unsuccessfully out of CA_Mod_CALinkNew\n",NULL,NULL);
		 }
	   return APL_FAILURE;

 }




 	int CA_Rtv_CALinkInfo( char *chr_p_ca_id,
								 char *chr_p_client,
								 char *p_ce_typ,
								 char *p_curr_link_type,
								 char *p_prelim_flag,
								 CAMESGLINK_STRUCT_H *p_amsglink,
								char *p_pay_srl_nbr,
								 DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
	{
			Alert("Entered in CA_Rtv_CALinkInfo function");
			EXEC SQL BEGIN DECLARE SECTION;

			CAMESGLINK_STRUCT_H		l_camesglink_struct_ha;
			CAMESGLINK_STRUCT_I		l_camesglink_struct_i;
			char h_corp_id[21];
			char h_dl_client[APL_CLIENT_LENGTH];
			char h_mstclt[APL_CLIENT_LENGTH];
			char chr_h_curr_link_type[3];
			char h_link_class[3];
			char chr_h_latest_date[APL_DATE_LEN];
			char chr_h_prelim_flag[2];

   		EXEC SQL VAR l_camesglink_struct_ha.h_corp_id IS STRING;
	   	EXEC SQL VAR l_camesglink_struct_ha.h_preliminary_flag IS STRING;
		   EXEC SQL VAR l_camesglink_struct_ha.h_dl_client IS STRING;
			EXEC SQL VAR l_camesglink_struct_ha.h_swift_msg_no IS STRING;
		   EXEC SQL VAR l_camesglink_struct_ha.h_msg_in_out_ind IS STRING;
			EXEC SQL VAR l_camesglink_struct_ha.h_new_dt IS STRING;
		   EXEC SQL VAR l_camesglink_struct_ha.h_link_class IS STRING;
		   EXEC SQL VAR l_camesglink_struct_ha.h_swift_msgrefno IS STRING;
         EXEC SQL VAR l_camesglink_struct_ha.h_information IS STRING;

			EXEC SQL VAR h_corp_id IS STRING;
			EXEC SQL VAR h_dl_client IS STRING;
			EXEC SQL VAR h_mstclt IS STRING;
			EXEC SQL VAR chr_h_curr_link_type IS STRING;
			EXEC SQL VAR h_link_class IS STRING;
			EXEC SQL VAR chr_h_latest_date IS STRING;
			EXEC SQL VAR chr_h_prelim_flag  IS STRING;

		  struct sqlca sqlca;
		  EXEC SQL END DECLARE SECTION;


			# ifdef APL_THREADS
			APL_SET_CONTEXT
		  	EXEC SQL CONTEXT USE :my_ctx_local;
			#endif
		 sqlca.sqlcode=0;
		  memset(&l_camesglink_struct_ha,NULL,sizeof(CAMESGLINK_STRUCT_H));
		  memset(&l_camesglink_struct_i,NULL,sizeof(CAMESGLINK_STRUCT_I));

		  strcpy(h_corp_id,chr_p_ca_id);
		  strcpy(h_dl_client,chr_p_client);
		  strcpy(chr_h_curr_link_type,p_curr_link_type);
		  strcpy(chr_h_prelim_flag,p_prelim_flag);
				
		 strcpy(l_camesglink_struct_ha.h_corp_id,h_corp_id);
		 strcpy(l_camesglink_struct_ha.h_dl_client,h_dl_client);
		 Alert("chr_h_curr_link_type is |%s|",chr_h_curr_link_type);
				
		  if ( !strcmp(chr_h_curr_link_type,"VN") )
			{
				strcpy(h_link_class,"VN");
				Alert("Before Caling CA_Rtv_CALink Function ");
				if ( APL_FAILURE == 
							CA_Rtv_CALink(h_link_class,&l_camesglink_struct_ha,APL_NULL_STRING,l_debug_info_ptr) )
				{
					APL_GOBACK_FAIL
				}
			}
			else if ( !strcmp(chr_h_curr_link_type,"VR") || !strcmp(chr_h_curr_link_type,"TN") )
			{
					strcpy(h_link_class,"VN");
				Alert("Before Caling CA_Rtv_CALink Function ");

					if ( APL_FAILURE== 
								CA_Rtv_CALink(h_link_class,&l_camesglink_struct_ha,APL_NULL_STRING,l_debug_info_ptr) )
						APL_GOBACK_FAIL
			}
			else if( (!strcmp(chr_h_curr_link_type,"TC")) || (!strcmp(chr_h_curr_link_type,"PN")) )
			{
					strcpy(h_link_class,"TC");
				Alert("Before Caling CA_Rtv_CALink Function ");
					 if ( APL_FAILURE==
									CA_Rtv_CALink(h_link_class,&l_camesglink_struct_ha,APL_NULL_STRING,l_debug_info_ptr))
					 	APL_GOBACK_FAIL

					if ( !strlen(l_camesglink_struct_ha.h_swift_msg_no) )
					{
					 	 strcpy(h_link_class,"TN");
					   
                   memset(&l_camesglink_struct_ha, NULL, sizeof(CAMESGLINK_STRUCT_H));
                   strcpy(l_camesglink_struct_ha.h_corp_id,h_corp_id);
                   strcpy(l_camesglink_struct_ha.h_dl_client,h_dl_client);
				Alert("Before Caling CA_Rtv_CALink Function ");
						 if (APL_FAILURE==
									CA_Rtv_CALink(h_link_class,&l_camesglink_struct_ha,APL_NULL_STRING,l_debug_info_ptr))
						 APL_GOBACK_FAIL
						if ( !strlen(l_camesglink_struct_ha.h_swift_msg_no) )
						{
					 	 	strcpy(h_link_class,"VN");
					   
                   	memset(&l_camesglink_struct_ha, NULL, sizeof(CAMESGLINK_STRUCT_H));
                   	strcpy(l_camesglink_struct_ha.h_corp_id,h_corp_id);
                   	strcpy(l_camesglink_struct_ha.h_dl_client,h_dl_client);
				Alert("Before Caling CA_Rtv_CALink Function ");
						 	if (APL_FAILURE==
									CA_Rtv_CALink(h_link_class,&l_camesglink_struct_ha,APL_NULL_STRING,l_debug_info_ptr))
						 	APL_GOBACK_FAIL
						}
					}
			}
		 else if (!strcmp(chr_h_curr_link_type,"TR"))
			{
				
				 strcpy(h_link_class,"TC");
				Alert("Before Caling CA_Rtv_CALink Function ");
				 if (APL_FAILURE==
							CA_Rtv_CALink(h_link_class,&l_camesglink_struct_ha,APL_NULL_STRING,l_debug_info_ptr) )
				 	APL_GOBACK_FAIL
             if ( !strlen(l_camesglink_struct_ha.h_swift_msg_no) )
             {
               strcpy(h_link_class,"TN");
               memset(&l_camesglink_struct_ha, NULL, sizeof(CAMESGLINK_STRUCT_H));
               strcpy(l_camesglink_struct_ha.h_corp_id,h_corp_id);
               strcpy(l_camesglink_struct_ha.h_dl_client,h_dl_client);
               if (APL_FAILURE==
                     CA_Rtv_CALink(h_link_class,&l_camesglink_struct_ha,APL_NULL_STRING,l_debug_info_ptr) )
                  APL_GOBACK_FAIL
             }
	     	} 
		else if (!strcmp(chr_h_curr_link_type,"VS"))
		{
			strcpy(h_link_class,"VS");
			if (APL_FAILURE==
						CA_Rtv_CALink(h_link_class,&l_camesglink_struct_ha,APL_NULL_STRING,l_debug_info_ptr))
			{
				APL_GOBACK_FAIL
			}
		}
		else if (!strcmp(chr_h_curr_link_type,"PR"))
			{
			printf (" p_pay_srl_nbr is %s in CALINKAGE FUNCTION \n",p_pay_srl_nbr);
			printf(" chr_value of link type inside pr is %s\n",chr_h_curr_link_type);

				  strcpy(h_link_class,"PN");
				  if (APL_FAILURE ==
								CA_Rtv_CALink(h_link_class,&l_camesglink_struct_ha,p_pay_srl_nbr,l_debug_info_ptr) )
			  	  	APL_GOBACK_FAIL
	printf (" chr_value of l_camesglink_struct_ha.h_swift_msg_no in GetCALinkage processtion is %s \n",l_camesglink_struct_ha.h_swift_msg_no);		

				

					if ( !strlen(l_camesglink_struct_ha.h_swift_msg_no) )
					{
						strcpy(h_link_class,"TC");
						memset(&l_camesglink_struct_ha, NULL, sizeof(CAMESGLINK_STRUCT_H));
						strcpy(l_camesglink_struct_ha.h_corp_id,h_corp_id);
						strcpy(l_camesglink_struct_ha.h_dl_client,h_dl_client);
						if (APL_FAILURE==
                     CA_Rtv_CALink(h_link_class,&l_camesglink_struct_ha,APL_NULL_STRING,l_debug_info_ptr) )
                  	APL_GOBACK_FAIL
					}

					if ( !strlen(l_camesglink_struct_ha.h_swift_msg_no) )
					{
						strcpy(h_link_class,"TN");
						memset(&l_camesglink_struct_ha, NULL, sizeof(CAMESGLINK_STRUCT_H));
						strcpy(l_camesglink_struct_ha.h_corp_id,h_corp_id);
						strcpy(l_camesglink_struct_ha.h_dl_client,h_dl_client);
						if (APL_FAILURE==
                     CA_Rtv_CALink(h_link_class,&l_camesglink_struct_ha,APL_NULL_STRING,l_debug_info_ptr) )
                  	APL_GOBACK_FAIL
					}

					if ( !strlen(l_camesglink_struct_ha.h_swift_msg_no) )
					{
						strcpy(h_link_class,"VN");
						memset(&l_camesglink_struct_ha, NULL, sizeof(CAMESGLINK_STRUCT_H));
						strcpy(l_camesglink_struct_ha.h_corp_id,h_corp_id);
						strcpy(l_camesglink_struct_ha.h_dl_client,h_dl_client);
						if (APL_FAILURE==
                     CA_Rtv_CALink(h_link_class,&l_camesglink_struct_ha,APL_NULL_STRING,l_debug_info_ptr) )
                  	APL_GOBACK_FAIL
					}

					if ( !strlen(l_camesglink_struct_ha.h_swift_msg_no) )
					{
						memset(&l_camesglink_struct_ha, NULL, sizeof(CAMESGLINK_STRUCT_H));
						strcpy(l_camesglink_struct_ha.h_corp_id,h_corp_id);
						strcpy(l_camesglink_struct_ha.h_dl_client,h_dl_client);
					}
			}

		*p_amsglink = l_camesglink_struct_ha;

		APL_GOBACK_SUCCESS



		 RETURN_SUCCESS:

		  APL_IF_DEBUG 
		   {
				CO_ProcMonitor(APL_OUT_FILE,"Exiting successfully out of CA_Rtv_CALinkInfo\n",NULL,NULL);
		   }
		  return APL_SUCCESS;

		  RETURN_FAILURE:

		  APL_IF_DEBUG
			{
				CO_ProcMonitor(APL_OUT_FILE,"Exiting unsuccessfully out of CA_Rtv_CALinkInfo\n",NULL,NULL);
		   }
			return APL_FAILURE;

		  	 
	}


int CA_Rtv_CAMsgRefno(char *p_msgrefno, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	char h_swift_msgrefno[APL_TXNREFNO_LEN];
	char chr_h_char_jul_date[4];
	char chr_h_char_seq_no[7];
	PRO_GSEQNUM_STRUCT_H l_progseqnum_struct_h;
	int chr_h_jul_date = 0, int_l_seq_no = 0;

	EXEC SQL BEGIN DECLARE SECTION;

		char h_nation_code[3];
		char chr_h_year[3];
		short int i_nation_code = 0;
		short int int_i_year = 0;

		EXEC SQL VAR h_nation_code IS STRING;
		EXEC SQL VAR chr_h_year IS STRING;

		struct sqlca sqlca;

	EXEC SQL END   DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;
	memset(h_swift_msgrefno, APL_NULL_CHAR, APL_TXNREFNO_LEN);
	memset(h_nation_code, APL_NULL_CHAR, 3);
	memset(chr_h_year, APL_NULL_CHAR, 3);
	memset(chr_h_char_jul_date, APL_NULL_CHAR, 4);
	memset(chr_h_char_seq_no, APL_NULL_CHAR, 7);
	memset(&l_progseqnum_struct_h, NULL, sizeof(PRO_GSEQNUM_STRUCT_H)); 

	EXEC SQL SELECT NATION_CODE
				INTO :h_nation_code INDICATOR :i_nation_code
				FROM MT_COMMON_SYS_PARAMS;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(sqlca.sqlcode, "Country Code", "Setup Parameters", APL_NULL_STRING)

	EXEC SQL SELECT TO_CHAR(SYS_DATE,'YY')
				INTO :chr_h_year INDICATOR :int_i_year
				FROM PRO_SYS_DATE;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(sqlca.sqlcode, "System Date", APL_NULL_STRING, APL_NULL_STRING)

	if ( APL_FAILURE == CO_Rtv_JulDt(&chr_h_jul_date, l_debug_info_ptr) )
	{
		APL_GOBACK_FAIL
	}

	sprintf(chr_h_char_jul_date, "%d", chr_h_jul_date);

	strcpy(l_progseqnum_struct_h.sequencename, "CAMSGREFNO");
	strcpy(l_progseqnum_struct_h.seq_attrb_a, APL_NULL_STRING);
	strcpy(l_progseqnum_struct_h.seq_attrb_b, APL_NULL_STRING);
	strcpy(l_progseqnum_struct_h.seq_attrb_c, APL_NULL_STRING);

	l_progseqnum_struct_h.last_usednum = 0;
	l_progseqnum_struct_h.seq_start = 1;
	l_progseqnum_struct_h.last_seqnum = 999999;
	l_progseqnum_struct_h.seq_stepby = 1;

	int_l_seq_no = CO_RtvNxtSeqNum(&l_progseqnum_struct_h, l_debug_info_ptr);

	sprintf(chr_h_char_seq_no, "%.6d", int_l_seq_no); 

	strcpy(h_swift_msgrefno, h_nation_code);
	strcat(h_swift_msgrefno, chr_h_year);
	strcat(h_swift_msgrefno, chr_h_char_jul_date);
	strcat(h_swift_msgrefno, chr_h_char_seq_no);

	strcpy(p_msgrefno, h_swift_msgrefno);

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
CA_Rtv_CAMsgRefno().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
CA_Rtv_CAMsgRefno().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}

int MS_Rtv_SEME(char *chr_p_client,char *chr_p_msgno,char *p_msgrefno, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	Alert("Entered in MS_Rtv_SEME");	
   char h_swift_msgrefno[APL_TXNREFNO_LEN+1];	//Added plus 1 for UAT Issue Fix - 548 Consolidation message -- Sana
   char chr_h_char_jul_date[4] = APL_NULL_STRING;
	char chr_l_h_uniqsemerefno[5] = APL_NULL_STRING;
   int chr_h_jul_date = 0;
	int int_l_int_uniqsemerefno = 0 ;
	short l_i_uniqsemerefno = 0 ;
	
	char chr_l_new_msgno[4] = APL_NULL_STRING;
	short i_new_msgno = 0;

	
	
	
	
	const int  int_c_max_uniq_msg_no = 21; 
	const char chr_l_arr_msgno[][4]={"508", "535", "536", "537", "538", "540", "541", "542", "543", "544", "545", "546", "547", "548", "564", "566", "568", "578", "586","592","567" };
	const char chr_l_arr_idchar[][2]={"G",  "A",   "B",   "C",   "D",   "E",   "E",   "E",   "E",   "F",   "F",   "F",   "F",   "G",   "I",   "J",	"K",	 "G",   "H" ,  "E", "L" };
	int int_l_loop=0;
	unsigned long l_curr_secs=0L;
	long l_curr_usecs=0L;
	char chr_l_char_curr_usecs[5]=APL_NULL_STRING;		// Changed By Sana -- increased size from 3 to 5 for SIT issue fix
	char chr_l_currtime[APL_DATE_LEN]=APL_NULL_STRING;

   EXEC SQL BEGIN DECLARE SECTION;
		
		
		EXEC SQL VAR chr_l_new_msgno iS STRING;
      struct sqlca sqlca;
   EXEC SQL END   DECLARE SECTION;

   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif


   sqlca.sqlcode = 0;
   memset(h_swift_msgrefno, APL_NULL_CHAR, sizeof(h_swift_msgrefno));
   memset(chr_h_char_jul_date, APL_NULL_CHAR, 4);


   if ( APL_FAILURE == CO_Rtv_JulDt(&chr_h_jul_date, l_debug_info_ptr) )
   {
      APL_GOBACK_FAIL
   }
	printf("\n Got the Jul chr_date \n");
   sprintf(chr_h_char_jul_date, "%.3d", chr_h_jul_date); 

	EXEC SQL SELECT  UNIQ_SEME_REFNO_3D.nextval  
	INTO :int_l_int_uniqsemerefno:l_i_uniqsemerefno from DUAL;

	IS_ANY_ORA_ERROR


	sprintf(chr_l_h_uniqsemerefno,"%.3d",int_l_int_uniqsemerefno); 


	if ( (strcmp(chr_p_msgno,MS_MSGNO_540)) || 
 		(strcmp(chr_p_msgno,MS_MSGNO_541)) ||
		(strcmp(chr_p_msgno,MS_MSGNO_542)) || 
		(strcmp(chr_p_msgno,MS_MSGNO_543)) )
	{
	EXEC SQL SELECT substr(ISO_MSG_NO,1,3) into :chr_l_new_msgno:i_new_msgno from MS_MSGCRF
		where SWIFT_MSG_NO = :chr_p_msgno and ROWNUM < 2;
		
	IS_ANY_ORA_ERROR 
	}
	
	if (!strcmp(chr_p_msgno,"535B"))
		strcpy(chr_l_new_msgno,"535");




   if (CO_Rtv_Time(&l_curr_secs, &l_curr_usecs) == APL_FAILURE)
			{
				APL_GOBACK_FAIL
			}

	sprintf(chr_l_char_curr_usecs, "%.2d",(int)(l_curr_usecs/10000));  

	
	if (APL_FAILURE == CO_RtvSysDtTime(  chr_l_currtime, l_debug_info_ptr ))
			{
				APL_GOBACK_FAIL
			}

	strcpy(h_swift_msgrefno, APL_NULL_STRING);
	h_swift_msgrefno[0]=chr_l_currtime[9];           
	h_swift_msgrefno[1]=APL_NULL_CHAR;
	strcat(h_swift_msgrefno, chr_h_char_jul_date);  
	h_swift_msgrefno[4]=APL_NULL_CHAR;
	h_swift_msgrefno[4]=chr_l_currtime[11];          
	h_swift_msgrefno[5]=chr_l_currtime[12];
	h_swift_msgrefno[6]=chr_l_currtime[14];           
	h_swift_msgrefno[7]=chr_l_currtime[15];
	h_swift_msgrefno[8]=chr_l_currtime[17];           
	h_swift_msgrefno[9]=chr_l_currtime[18];
	h_swift_msgrefno[10]=APL_NULL_CHAR;
	strncat(h_swift_msgrefno, chr_l_char_curr_usecs, 2);   

	strncat(h_swift_msgrefno, chr_l_h_uniqsemerefno, 3);   

	
		  
  for(int_l_loop=0;int_l_loop<int_c_max_uniq_msg_no; int_l_loop++)
		  {
			  if((strncmp(chr_l_arr_msgno[int_l_loop],chr_l_new_msgno,3)==0) || (strncmp(chr_l_arr_msgno[int_l_loop],chr_p_msgno,3)==0)) 
				  {
					  printf("\n The matched details loop='%d', arr_Msgno = '%s', old msg = %s, new_msg = %s,\n ", int_l_loop, chr_l_arr_msgno[int_l_loop],chr_p_msgno, chr_l_new_msgno);
					  strcat(h_swift_msgrefno,chr_l_arr_idchar[int_l_loop]);  
					  break;
				  }
		  }
	if(int_l_loop >= int_c_max_uniq_msg_no) 
			APL_GOBACK_FAIL


  strcpy(p_msgrefno, h_swift_msgrefno);              

  printf("\n The Unique msg refno passed back is '%s'\n",p_msgrefno);
	

   APL_GOBACK_SUCCESS

   RETURN_SUCCESS:

      APL_IF_DEBUG 
      {
         CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of MS_Rtv_SEME().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
      }

      return APL_SUCCESS;

   RETURN_FAILURE:

      APL_IF_DEBUG
      {
         CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
MS_Rtv_SEME().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
      }

      return APL_FAILURE;
}


int DL_Mod_DLLinkInfoNew(MS_INC_LINKINFO_STRUCT_H **p_inc_linkage_info,long p_seq_num,int int_p_count,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
			int dbl_i = 0;
         EXEC SQL BEGIN DECLARE SECTION;
         DL_MSGLINKDET_STRUCT_H l_dl_msglinkdet_struct_h;
         DL_MSGLINKDET_STRUCT_I l_dl_msglinkdet_struct_i;
			MS_INC_LINKINFO_STRUCT_H         *h_inc_linkage_info = (MS_INC_LINKINFO_STRUCT_H *)NULL;
         char iden_no[10];
         EXEC SQL VAR l_dl_msglinkdet_struct_h.h_sequence_name IS STRING;
         EXEC SQL VAR l_dl_msglinkdet_struct_h.h_link_val IS STRING;
         EXEC SQL VAR l_dl_msglinkdet_struct_h.h_link_msg_tag IS STRING;
         EXEC SQL VAR iden_no IS STRING;

         struct sqlca sqlca;
         EXEC SQL END DECLARE SECTION;

         # ifdef APL_THREADS
         APL_SET_CONTEXT
         EXEC SQL CONTEXT USE :my_ctx_local;
         #endif
         sqlca.sqlcode=0;

         memset(&l_dl_msglinkdet_struct_h,NULL,sizeof(DL_MSGLINKDET_STRUCT_H));
         memset(&l_dl_msglinkdet_struct_i,NULL,sizeof(DL_MSGLINKDET_STRUCT_I));
         memset(&h_inc_linkage_info,NULL,sizeof(MS_INC_LINKINFO_STRUCT_H));
			h_inc_linkage_info= *p_inc_linkage_info;

			if(p_seq_num==0)
			{
				APL_DATA_MISSING("IDEN_NO",APL_NULL_STRING,APL_NULL_STRING)
			}	
			if(int_p_count==0)
			{
				APL_GOBACK_SUCCESS
			}

			for(dbl_i=0;dbl_i<int_p_count;dbl_i++)
			{
				memset(&l_dl_msglinkdet_struct_h,NULL,sizeof(DL_MSGLINKDET_STRUCT_H));
				memset(&l_dl_msglinkdet_struct_i,NULL,sizeof(DL_MSGLINKDET_STRUCT_I));
	
				l_dl_msglinkdet_struct_h.h_sequence_num = p_seq_num;
				
				if(strlen(h_inc_linkage_info[dbl_i].sequence_name))
					strcpy(l_dl_msglinkdet_struct_h.h_sequence_name,h_inc_linkage_info[dbl_i].sequence_name);
				else
					strcpy(l_dl_msglinkdet_struct_h.h_sequence_name,"LINK");
				

				if(strlen(h_inc_linkage_info[dbl_i].link_val))
				{	
					strcpy(l_dl_msglinkdet_struct_h.h_link_val,h_inc_linkage_info[dbl_i].link_val);
					l_dl_msglinkdet_struct_h.h_link_val[5]=APL_NULL_CHAR;
				}
				else
					l_dl_msglinkdet_struct_i.i_link_val = -1;

				if(strlen(h_inc_linkage_info[dbl_i].link_tag) )
				{		
					strcpy(l_dl_msglinkdet_struct_h.h_link_msg_tag,h_inc_linkage_info[dbl_i].link_tag);
					l_dl_msglinkdet_struct_h.h_link_msg_tag[50] = APL_NULL_CHAR;
				}
				else
					l_dl_msglinkdet_struct_i.i_link_msg_tag= -1;	

				l_dl_msglinkdet_struct_h.h_msg_tag_rep_no=NULL;
				l_dl_msglinkdet_struct_h.h_msg_line_no=NULL;
				if(strlen(h_inc_linkage_info[dbl_i].msg_tag) )
				{
					strcpy(l_dl_msglinkdet_struct_h.h_msg_tag,h_inc_linkage_info[dbl_i].msg_tag);
					l_dl_msglinkdet_struct_h.h_msg_tag[5]=APL_NULL_CHAR;
				}
				else
					l_dl_msglinkdet_struct_i.i_msg_tag = -1;

				EXEC SQL INSERT INTO DL_MSGLINKDET VALUES(:l_dl_msglinkdet_struct_h:l_dl_msglinkdet_struct_i	);
				IS_ANY_ORA_ERROR;

			}
			APL_GOBACK_SUCCESS;


       RETURN_SUCCESS:

        APL_IF_DEBUG
         {
            CO_ProcMonitor(APL_OUT_FILE,"Exiting successfully out of DL_Mod_DLLinkInfoNew\n",NULL,NULL);
         }
        return APL_SUCCESS;

        RETURN_FAILURE:

        APL_IF_DEBUG
         {
            CO_ProcMonitor(APL_OUT_FILE,"Exiting unsuccessfully out of DL_Mod_DLLinkInfoNew\n",NULL,NULL);
         }
         return APL_FAILURE;
}


int MS_Rtv_RefNo_A(int int_p_count,char *p_unique_ref_num,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
printf("Gouse Entered in MS_Rtv_RefNo_A \n");
fflush(stdout);

char chr_l_unique_ref_num[APL_UNIQUE_REF_NUM_LEN]=APL_NULL_STRING;
char chr_l_sys_date[APL_DATE_LEN]=APL_NULL_STRING;
int chr_h_jul_date = 0;
char chr_h_char_jul_date[5]=APL_NULL_STRING;
int chr_l_seq_num=0;
short i_sequence_num=0;
char chr_h_char_seq_num[6]=APL_NULL_STRING;
char l_char_count[2]=APL_NULL_STRING;

printf("ISO6.8-002  Manas : The refnum is : %s\n",chr_l_unique_ref_num);
fflush(stdout);
printf("ISO6.8-002  Manas : is : %s\n",chr_l_unique_ref_num);
fflush(stdout);
chr_l_unique_ref_num[0]=UNIQUE_REF_DECADE;
printf("chr_l_unique_ref_num is |%s|\n",chr_l_unique_ref_num);
fflush(stdout);
 

strcpy(l_char_count,ltoa(int_p_count));
chr_l_unique_ref_num[1]=l_char_count[0]; 
printf("chr_l_unique_ref_num is |%s|\n",chr_l_unique_ref_num);
fflush(stdout);


printf("ISO6.8-002  Manas : The txn_type_num is : %d\n",int_p_count);
fflush(stdout);
printf("ISO6.8-002  Manas : The txn_class is : %s\n",ltoa(int_p_count));
fflush(stdout);
EXEC SQL SELECT TO_CHAR(SYS_DATE, 'DD/MM/YYYY')
INTO :chr_l_sys_date
FROM PRO_SYS_DATE;

chr_l_unique_ref_num[2]=chr_l_sys_date[9]; 
chr_l_unique_ref_num[3]='\0';
printf("ISO6.8-002  Manas : The refnum is : %s\n",chr_l_unique_ref_num);
fflush(stdout);
printf("ISO6.8-002  Manas : chr_l_sys_date : %s\n",chr_l_sys_date);
fflush(stdout);

if ( APL_FAILURE == CO_Rtv_JulDt(&chr_h_jul_date, l_debug_info_ptr) )
{
 APL_GOBACK_FAIL
}

sprintf(chr_h_char_jul_date, "%.3d", chr_h_jul_date);

printf("ISO6.8-002  Manas : julian chr_date  : %s\n",chr_h_char_jul_date);
fflush(stdout);

EXEC SQL SELECT  UNIQ_IDENT_NO.nextval
INTO :chr_l_seq_num:i_sequence_num from DUAL;

sprintf(chr_h_char_seq_num, "%.5d", chr_l_seq_num);
strcat(chr_l_unique_ref_num,chr_h_char_jul_date);
strcat(chr_l_unique_ref_num,chr_h_char_seq_num);
strcat(chr_l_unique_ref_num,APL_NULL_STRING);
strcpy(p_unique_ref_num,chr_l_unique_ref_num);
printf("ISO6.8-002  Manas : sequence number  : %s\n",chr_h_char_seq_num);
fflush(stdout);
printf("ISO6.8-002  Manas : unique_reference number:chr_p  : %s\n",p_unique_ref_num);
fflush(stdout);
printf("ISO6.8-002  Manas : unique_reference number:h  : %s\n",chr_l_unique_ref_num);
fflush(stdout);

APL_GOBACK_SUCCESS

RETURN_SUCCESS:

		printf("Gouse Returning Successfully \n" );
		fflush(stdout);


		/*sam*/
		/* PJ KOTAK AIX UAT Fix Commenting below */
		 int intvar = 0;
      		if ( !l_debug_info_ptr )
				intvar = 1;

		printf("done intvar1 |%d|\n",intvar);
		fflush(stdout);

	  	/*if (*l_debug_info_ptr == NULL )
			intvar = 2;
		printf("done intvar2 |%d|\n",intvar);
		fflush(stdout);

     		if (intvar ==0)
			intvar = (*l_debug_info_ptr)->debug_ind;

		printf("intvar = |%d|\n",intvar);
		fflush(stdout);*/
		
		/*sam*/

	  APL_IF_DEBUG
		  {
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of MS_Rtv_RefNo_A().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
			printf( "Exiting successfully out of MS_Rtv_RefNo_A().\n");
			fflush(stdout);
		  } 
		  return(APL_SUCCESS);

RETURN_FAILURE:
		fflush(stdout);

		  //APL_IF_DEBUG
		  //{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of MS_Rtv_RefNo_A().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		  //} 
		  return(APL_FAILURE);
}

