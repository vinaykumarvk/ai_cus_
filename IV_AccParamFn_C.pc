




#include "stdio_64.h"
#include <string.h> 
#include <stdlib.h> 
#include "IV_Control_A.h"

EXEC SQL INCLUDE SQLCA;



int IV_Rtv_MastAcc(const char *p_client, char *p_mstclt, int *int_p_retstat, 
		   DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	EXEC SQL BEGIN DECLARE SECTION;

		char chr_h_mst_acc[APL_CLIENT_LENGTH];
		EXEC SQL VAR chr_h_mst_acc IS STRING;
		short int int_i_mst_acc = 0;
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	EXEC SQL SELECT CLN_MASTER
		 INTO :chr_h_mst_acc INDICATOR :int_i_mst_acc
		 FROM MT_CLIENT
		 WHERE (CLN_CODE = :p_client);

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}
	else if ( sqlca.sqlcode == 1403 )
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		APL_GOBACK_FAIL
	}

	strcpy(p_mstclt, chr_h_mst_acc);

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of IV_Rtv_MastAcc().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of IV_Rtv_MastAcc().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_IsFeeStructExist(const char *p_client, int *int_p_retstat, 
		       DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	EXEC SQL BEGIN DECLARE SECTION;

		int int_h_count = 0;
		short int int_i_count = 0;
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	EXEC SQL SELECT NVL( COUNT(*), 0 )
		 INTO :int_h_count INDICATOR :int_i_count
		 FROM IV_CLIENTFEE
		 WHERE ((CLIENT = :p_client));

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	if ( int_h_count )
	{
		*int_p_retstat = IV_SUCCESS;

		APL_GOBACK_SUCCESS
	}

	*int_p_retstat = IV_NO_DATA_FOUND_ERR;

	APL_GOBACK_FAIL

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of IV_IsFeeStructExist().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of IV_IsFeeStructExist().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_ChkServDepncy(const char *p_client, const long p_servcode, const char *p_apl_frm_date,/*added by Monica for ISKB_1737*/
		      int *int_p_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	EXEC SQL BEGIN DECLARE SECTION;

		int int_h_count = 0;
		short int int_i_count = 0;
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	EXEC SQL SELECT NVL( COUNT(*), 0 )
		 INTO :int_h_count INDICATOR :int_i_count
		 FROM IV_SERV_DEPEND
		 WHERE (SERVICE_CD = :p_servcode);

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	if ( !int_h_count )
	{
		*int_p_retstat = IV_SUCCESS;

		APL_GOBACK_SUCCESS
	}

	int_h_count = 0;
	int_i_count = 0;

	EXEC SQL SELECT NVL( COUNT(*), 0 )
		 INTO :int_h_count INDICATOR :int_i_count
		 FROM IV_CLIENTPARAM
		 WHERE ((CLIENT = :p_client) AND
			(SERVICE_CD = :p_servcode) AND
			(APL_FRM_DATE = :p_apl_frm_date));/*added by Monica for ISKB_1737*/

			Alert("Values int_h_count : %d",int_h_count);

	*int_p_retstat = IV_CRITCAL_ERROR_IND;

	IS_ANY_ORA_ERROR

	if ( int_h_count )
	{
		*int_p_retstat = IV_SUCCESS;

		APL_GOBACK_SUCCESS
	}

	*int_p_retstat = IV_NO_DATA_FOUND_ERR;

	APL_GOBACK_FAIL

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of IV_ChkServDepncy().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of IV_ChkServDepncy().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_Chk_Basis(const char *p_client, const long p_servcode, const char *p_apl_frm_date, int *int_p_retstat, /*added by Monica for ISKB_1737*/
		 DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	EXEC SQL BEGIN DECLARE SECTION;

		int int_h_count = 0;
		short int int_i_count = 0;
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	EXEC SQL SELECT NVL( COUNT(*), 0 )
		 INTO :int_h_count INDICATOR :int_i_count
		 FROM IV_SERV_BASIS
		 WHERE (SERVICE_CD = :p_servcode);

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	if ( !int_h_count )
	{
		*int_p_retstat = IV_SUCCESS;

		APL_GOBACK_SUCCESS
	}

	int_h_count = 0;
	int_i_count = 0;

	EXEC SQL SELECT NVL( COUNT(*), 0 )
		 INTO :int_h_count INDICATOR :int_i_count
		 FROM IV_CLIENT_SERV_BASIS
		 WHERE ((CLIENT = :p_client) AND
			(SERVICE_CD = :p_servcode) AND 
			(APL_FRM_DATE = :p_apl_frm_date));/*added by Monica for ISKB_1737*/

	if ( int_h_count )
	{
		*int_p_retstat = IV_SUCCESS;

		APL_GOBACK_SUCCESS
	}

	*int_p_retstat = IV_NO_DATA_FOUND_ERR;

	APL_GOBACK_FAIL

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of IV_Chk_Basis().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of IV_Chk_Basis().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_Chk_FeeChargeType(const long p_servcode, const char *p_chargebasis, 
			    const char *p_feebasis, const char p_chargetype, 
			    const char p_feetype, int *int_p_retstat, 
			    DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	EXEC SQL BEGIN DECLARE SECTION;

		char chr_h_condition[5];
		EXEC SQL VAR chr_h_condition IS STRING;
		short int int_i_condition = 0;
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	memset(chr_h_condition, APL_NULL_CHAR, 5);

	EXEC SQL SELECT IV_COND
		 INTO :chr_h_condition INDICATOR :int_i_condition
		 FROM IV_SERV_BASIS
		 WHERE ((SERVICE_CD = :p_servcode) AND
			(FEES_BASE = :p_feebasis) AND
			(CHRG_BASE = :p_chargebasis));

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	if ( sqlca.sqlcode == 1403 )
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		APL_GOBACK_FAIL
	}

	if ( p_feetype == 'S')
	{
		if ( ((p_chargetype == 'S') && (chr_h_condition[0] == '1')) ||
		     ((p_chargetype == 'T') && (chr_h_condition[1] == '1')) )
		{
			*int_p_retstat = IV_SUCCESS;

			APL_GOBACK_SUCCESS
		}
	}
	else if ( p_feetype == 'T')
	{
		if ( ((p_chargetype == 'S') && (chr_h_condition[2] == '1')) ||
		     ((p_chargetype == 'T') && (chr_h_condition[3] == '1')) )
		{
			*int_p_retstat = IV_SUCCESS;

			APL_GOBACK_SUCCESS
		}
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_FAIL

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of IV_Chk_FeeChargeType().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of IV_Chk_FeeChargeType().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_ChkBISndMstExist(const char *p_client, int *int_p_retstat, 
		      DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	EXEC SQL BEGIN DECLARE SECTION;

		int int_h_count = 0;
		short int int_i_count = 0;
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	EXEC SQL SELECT NVL( COUNT(*), 0 )
		 INTO :int_h_count INDICATOR :int_i_count
		 FROM IV_CLIENTSETUP, MT_CLIENT
		 WHERE ((IV_CLIENTSETUP.CLIENT = MT_CLIENT.CLN_CODE) AND
			(MT_CLIENT.CLN_MASTER = :p_client) AND
			((IV_CLIENTSETUP.B_GEN_IND = 'M') OR
			 (IV_CLIENTSETUP.SEND_TO_MASTER_IND = 'M')));

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	if ( !int_h_count )
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		APL_GOBACK_FAIL
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of BBDbBlSndMst()\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of BBDbBlSndMst()\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_PurgeSlabSpecial(const char *p_client,const char *p_apl_frm_date, int *int_p_retstat, 
			  DEBUG_INFO_STRUCT_H **l_debug_info_ptr)  /* Added apl_frm_date by monica for kotak ISKB_1737 */
{
	



 	

	extern int IV_Chk_DelIVCSTFEEParam(const char *chr_l_client, 
					      const long l_servcode, 
					      const char *l_paramval, 
						 const char *chr_l_apl_frm_date,      /* Added apl_frm_date by monica for kotak ISKB_1737 */
					      int *int_l_retstat, 
					      DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	extern int IV_Mod_DelIVCSTFEEParam(const char *chr_l_client, 
					   const long l_servcode, 
					   const char *l_paramval, 
					   const char *chr_l_apl_frm_date,     /* Added apl_frm_date by monica for kotak ISKB_1737 */
					   int *int_l_retstat, 
					   DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	int IV_Proc_AdjFeeSlabs(const char *p_client, const long p_servcode, const char *p_apl_frm_date,   /* Added apl_frm_date by monica for kotak ISKB_1737 */
			    const char *p_paramval, const double p_fromfval, 
			    const double p_tofval, int *int_p_retstat, 
			    DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	int IV_Proc_AdjChargeSlabs(const char *p_client, const long p_servcode, const char *p_apl_frm_date,  /* Added apl_frm_date by monica for kotak ISKB_1737 */
			       const char *p_paramval, const double p_fromfval, 
			       int *int_p_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	

	char chr_l_isopenservcodecur = 'N', chr_l_isopenparamvalcur = 'N';
	char chr_l_isopenfeeslabcur = 'N';
	int int_l_status = 0, int_l_status2 = 0;
	IV_CLIENTFEE_STRUCT_H l_iv_clientfee_struct_hc;

	EXEC SQL BEGIN DECLARE SECTION;

		char chr_h_paramval[IV_PARAM_LEN];
		EXEC SQL VAR chr_h_paramval IS STRING;

		double dbl_h_fromfval = 0.0, dbl_h_tofval = 0.0;
		long h_servcode = 0L;
		short int int_i_servcode = 0, int_i_paramval = 0;
		short int int_i_fromfval = 0.0, int_i_tofval = 0;
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	Alert("inside IV_PurgeSlabSpecial p_apl_frm_date %s",p_apl_frm_date);
	
	EXEC SQL DECLARE ServCodeCur CURSOR FOR
		 SELECT DISTINCT SERVICE_CD
		 FROM IV_CLIENTFEE
		 WHERE ((CLIENT = :p_client) AND
			(SERVICE_STAT IS NOT NULL));

	EXEC SQL OPEN ServCodeCur;

	for ( ; ; )
	{
		EXEC SQL FETCH ServCodeCur
			 INTO :h_servcode INDICATOR :int_i_servcode;

		if ( sqlca.sqlcode < 0 )
		{
			char chr_l_buffer[KEY_LENGTH];

			memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

			ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

			*int_p_retstat = IV_CRITCAL_ERROR_IND;

			CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
				       APL_NULL_STRING, APL_NULL_STRING, 
				       __LINE__, __FILE__);

			APL_GOBACK_FAIL
		}
		else if ( sqlca.sqlcode == 1403 )
		{
			break;
		}

		chr_l_isopenservcodecur = 'Y';

		int_l_status = 0;

		

		



		

		chr_l_isopenparamvalcur = 'N';

		EXEC SQL DECLARE ParamValCur CURSOR FOR
			 SELECT DISTINCT PROC_DATA_VAL
			 FROM IV_CLIENTFEE
			 WHERE ((CLIENT = :p_client) AND
				(SERVICE_CD = :h_servcode) AND
				(APL_FRM_DATE = :p_apl_frm_date) AND   /* Added apl_frm_date by monica for kotak ISKB_1737 */
				(SERVICE_STAT IS NOT NULL));

		EXEC SQL OPEN ParamValCur;

		for ( ; ; )
		{
			EXEC SQL FETCH ParamValCur
				 INTO :chr_h_paramval INDICATOR :int_i_paramval;

			if ( sqlca.sqlcode < 0 )
			{
				char chr_l_buffer[KEY_LENGTH];

				memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

				ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

				*int_p_retstat = IV_CRITCAL_ERROR_IND;

				CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer,
					       APL_NULL_STRING, APL_NULL_STRING,
					       __LINE__, __FILE__);

				APL_GOBACK_FAIL
			}
			else if ( sqlca.sqlcode == 1403 )
			{
				break;
			}

			chr_l_isopenparamvalcur = 'Y';

			int_l_status = 0;

			if ( APL_FAILURE == 
				IV_Chk_DelIVCSTFEEParam(p_client, 
							   h_servcode, 
							   chr_h_paramval, 
							   p_apl_frm_date,   /*added by Monica for ISKB_1737*/     /* Added apl_frm_date by monica for kotak ISKB_1737 */
							   &int_l_status, 
							   l_debug_info_ptr) )
			{
				if ( int_l_status == IV_CRITCAL_ERROR_IND )
				{
					*int_p_retstat = int_l_status;

					APL_GOBACK_FAIL
				}

			     
			}
			else
			{
				int_l_status2 = 0;

				if ( APL_FAILURE == 
					IV_Mod_DelIVCSTFEEParam(p_client, 
								h_servcode, 
								chr_h_paramval, 
								p_apl_frm_date,    /* Added apl_frm_date by monica for kotak ISKB_1737 */
								&int_l_status2, 
								l_debug_info_ptr) )
				{
					*int_p_retstat = IV_CRITCAL_ERROR_IND;
	
					APL_GOBACK_FAIL
				}

				continue;
			}

			chr_l_isopenfeeslabcur = 'N';

			EXEC SQL DECLARE FeeSlabCur CURSOR FOR
				 SELECT DISTINCT FRM_FBASE, TOF_BASE
				 FROM IV_CLIENTFEE
				 WHERE ((CLIENT = :p_client) AND
					(SERVICE_CD = :h_servcode) AND
					(PROC_DATA_VAL = :chr_h_paramval) AND
					(APL_FRM_DATE = :p_apl_frm_date) AND /*added by Monica for ISKB_1737*/
					(SERVICE_STAT IS NOT NULL))
				 ORDER BY FRM_FBASE;

			EXEC SQL OPEN  FeeSlabCur;

			for ( ; ; )
			{
				EXEC SQL FETCH FeeSlabCur
					 INTO :dbl_h_fromfval INDICATOR :int_i_fromfval,
					      :dbl_h_tofval INDICATOR :int_i_tofval;

				if ( sqlca.sqlcode < 0 )
				{
					char chr_l_buffer[KEY_LENGTH];

					memset(chr_l_buffer, APL_NULL_CHAR, 
					       KEY_LENGTH);

					ltoa_r(sqlca.sqlcode, chr_l_buffer, 
					       KEY_LENGTH - 1);

					*int_p_retstat = IV_CRITCAL_ERROR_IND;

					CO_InsertErr(l_debug_info_ptr, 
						       DB_ERR_NO, chr_l_buffer, 
						       APL_NULL_STRING, 
						       APL_NULL_STRING, 
						       __LINE__, __FILE__);

					APL_GOBACK_FAIL
				}
				else if ( sqlca.sqlcode == 1403 )
				{
					break;
				}

				chr_l_isopenfeeslabcur = 'Y';

				int_l_status = 0;

				if ( APL_SUCCESS == 
					IV_Proc_AdjFeeSlabs(p_client, h_servcode, p_apl_frm_date,   /* Added apl_frm_date by monica for kotak ISKB_1737 */
							chr_h_paramval, dbl_h_fromfval, 
							dbl_h_tofval, &int_l_status, 
							l_debug_info_ptr) )
				{
					EXEC SQL CLOSE FeeSlabCur;

					EXEC SQL OPEN FeeSlabCur;

					continue;
				}
				else if ( int_l_status == IV_CRITCAL_ERROR_IND )
				{
					*int_p_retstat = int_l_status;

					APL_GOBACK_FAIL
				}
				else
				{
					int_l_status2 = 0;

					if (APL_FAILURE == 
					       IV_Proc_AdjChargeSlabs(p_client, 
								  h_servcode, 
								  p_apl_frm_date,   /* Added apl_frm_date by monica for kotak ISKB_1737 */
								  chr_h_paramval, 
								  dbl_h_fromfval, 
								  &int_l_status2, 
								  l_debug_info_ptr))
					{
						
					}
				}

			} 

		} 

		EXEC SQL CLOSE ParamValCur;

		chr_l_isopenparamvalcur = 'N';

	} 

	EXEC SQL CLOSE ServCodeCur;

	chr_l_isopenservcodecur = 'N';

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of IV_PurgeSlabSpecial().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		if ( chr_l_isopenservcodecur == 'Y' )
		{
			EXEC SQL CLOSE ServCodeCur;
		}

		if ( chr_l_isopenparamvalcur == 'Y' )
		{
			EXEC SQL CLOSE ParamValCur;
		}

		if ( chr_l_isopenfeeslabcur == 'Y' )
		{
			EXEC SQL CLOSE ParamValCur;
		}

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of IV_PurgeSlabSpecial().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_Proc_AdjFeeSlabs(const char *p_client, const long p_servcode, const char *p_apl_frm_date,   /* Added apl_frm_date by monica for kotak ISKB_1737 */
		    const char *p_paramval, const double p_fromfval, 
		    const double p_tofval, int *int_p_retstat, 
		    DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	

	EXEC SQL BEGIN DECLARE SECTION;

		int int_h_count1 = 0, int_h_count2 = 0;
		double dbl_h_maxslabval = IV_TO_BASIS_MAX;
		short int int_i_count1 = 0, int_i_count2 = 0;
/*added by Monica for ISKB_1737 start*/
		 char  chr_b_prev_date[APL_DATE_LEN] =  APL_NULL_STRING;
		short int int_i_b_prev_date = 0;
		char chr_b_gen_ind[2] =  APL_NULL_STRING;
		short int int_i_gen_ind = 0;	
/*added by Monica for ISKB_1737 end*/
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	EXEC SQL SELECT NVL( COUNT(*), 0 )
		 INTO :int_h_count1 INDICATOR :int_i_count1
		 FROM IV_CLIENTFEE
		 WHERE ((CLIENT = :p_client) AND
			(SERVICE_CD = :p_servcode) AND
			(PROC_DATA_VAL = :p_paramval) AND
			(FRM_FBASE = :p_fromfval) AND 
			(APL_FRM_DATE = :p_apl_frm_date));   /* Added apl_frm_date by monica for kotak ISKB_1737 */
			
			Alert("kotakbill 1 %d",int_h_count1);

	if ( sqlca.sqlcode< 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	EXEC SQL SELECT NVL( COUNT(*), 0 )
		 INTO :int_h_count2 INDICATOR :int_i_count2
		 FROM IV_CLIENTFEE
		 WHERE ((CLIENT = :p_client) AND
			(SERVICE_CD = :p_servcode) AND
			(PROC_DATA_VAL = :p_paramval) AND
			(FRM_FBASE = :p_fromfval) AND
			(APL_FRM_DATE = :p_apl_frm_date) AND   /* Added apl_frm_date by monica for kotak ISKB_1737 */
			(SERVICE_STAT IS NOT NULL));

			Alert("int_h_count2 2 %d",int_h_count2);
			
			
	if ( sqlca.sqlcode< 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}
	
	if ( int_h_count2 == int_h_count1 )
	{
		
	/*added by Monica for ISKB_1737 start*/
	
	EXEC SQL SELECT B_GEN_IND,TO_CHAR(TO_DATE(B_PREV_DATE, 'DD/MM/YYYY hh24:mi:ss'), 'MON-YYYY')
		 INTO :chr_b_gen_ind:int_i_gen_ind,:chr_b_prev_date:int_i_b_prev_date
		 FROM SYS_IVCONTROLPARAM;

	IS_ANY_ORA_ERROR	
	
	Alert(" chr_b_gen_ind %c",chr_b_gen_ind);
	Alert(" chr_b_prev_date %s",chr_b_prev_date);
	Alert(" p_apl_frm_date %s",p_apl_frm_date);
		
		
	if( (strcmp(chr_b_gen_ind,"Y") == 0) && (strcmp(chr_b_prev_date,p_apl_frm_date) == 0)) 
	{
	
		printf("\n Record cannot be deleted since bill is already generated for the Applicable From date ");	  
				CO_InsertErr(l_debug_info_ptr, ERR_BILL_ALRDY_GENERATED, APL_NULL_STRING, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

			APL_GOBACK_FAIL	
			
	}
	else
	{
		
		printf("\n Before deleting in IV_Proc_AdjFeeSlabs  ");	
		
		
		EXEC SQL DELETE FROM IV_CLIENTFEE
			 WHERE ((CLIENT = :p_client) AND
				(SERVICE_CD = :p_servcode) AND
				(PROC_DATA_VAL = :p_paramval) AND
				(FRM_FBASE = :p_fromfval) AND 
				(APL_FRM_DATE = :p_apl_frm_date));   /* Added apl_frm_date by monica for kotak ISKB_1737 */
/*added by Monica for ISKB_1737 end*/
		if ( sqlca.sqlcode < 0 )
		{
			char chr_l_buffer[KEY_LENGTH];

			memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

			ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

			*int_p_retstat = IV_CRITCAL_ERROR_IND;

			CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
				       APL_NULL_STRING, APL_NULL_STRING, 
				       __LINE__, __FILE__);

			APL_GOBACK_FAIL
		}

		}

		EXEC SQL UPDATE IV_CLIENTFEE
			 SET FRM_FBASE = :p_fromfval
			 WHERE ((CLIENT = :p_client) AND
				(SERVICE_CD = :p_servcode) AND
				(PROC_DATA_VAL = :p_paramval) AND
				(FRM_FBASE = :p_tofval) AND
				(APL_FRM_DATE = :p_apl_frm_date));   /* Added apl_frm_date by monica for kotak ISKB_1737 */

		if ( sqlca.sqlcode < 0 )
		{
			char chr_l_buffer[KEY_LENGTH];

			memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

			ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

			*int_p_retstat = IV_CRITCAL_ERROR_IND;

			CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
				       APL_NULL_STRING, APL_NULL_STRING, 
				       __LINE__, __FILE__);

			APL_GOBACK_FAIL
		}
		else if ( sqlca.sqlcode == 1403 ) 
		{
			EXEC SQL UPDATE IV_CLIENTFEE
				 SET TOF_BASE = :dbl_h_maxslabval
				 WHERE ((CLIENT = :p_client) AND
					(SERVICE_CD = :p_servcode) AND
					(PROC_DATA_VAL = :p_paramval) AND
					(TOF_BASE = :p_fromfval) AND
					(APL_FRM_DATE = :p_apl_frm_date));   /* Added apl_frm_date by monica for kotak ISKB_1737 */

			if ( sqlca.sqlcode < 0 )
			{
				char chr_l_buffer[KEY_LENGTH];

				memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

				ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

				*int_p_retstat = IV_CRITCAL_ERROR_IND;

				CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer,
					       APL_NULL_STRING, APL_NULL_STRING,
					       __LINE__, __FILE__);

				APL_GOBACK_FAIL
			}
		}

		*int_p_retstat = IV_SUCCESS;

		APL_GOBACK_SUCCESS
	}
	else
	{
		*int_p_retstat = IV_SUCCESS;

		APL_GOBACK_FAIL
	}

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of IV_Proc_AdjFeeSlabs().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of IV_Proc_AdjFeeSlabs().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_Proc_AdjChargeSlabs(const char *p_client, const long p_servcode, const char *p_apl_frm_date,   /* Added apl_frm_date by monica for kotak ISKB_1737 */
		       const char *p_paramval, const double p_fromfval, 
		       int *int_p_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	

	char chr_l_isopenchargeslabcur = 'N';

	EXEC SQL BEGIN DECLARE SECTION;

		double dbl_h_maxslabval = IV_TO_BASIS_MAX;
		double dbl_h_fromcval = 0.0, dbl_h_tocval = 0.0;
		short int int_i_fromcval = 0, int_i_tocval = 0;
/*added by Monica for ISKB_1737 start*/
		 char  chr_b_prev_date[APL_DATE_LEN] =  APL_NULL_STRING;
		short int int_i_b_prev_date = 0;
		char chr_b_gen_ind[2] =  APL_NULL_STRING;
		short int int_i_gen_ind = 0;	
/*added by Monica for ISKB_1737 end*/							  /* Added by Monica*/
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	EXEC SQL DECLARE ChargeSlabCur CURSOR FOR
		 SELECT FRM_CBASE, TOC_BASE
		 FROM IV_CLIENTFEE
		 WHERE ((CLIENT = :p_client) AND
			(SERVICE_CD = :p_servcode) AND
			(PROC_DATA_VAL = :p_paramval) AND
			(FRM_FBASE = :p_fromfval) AND
			(APL_FRM_DATE = :p_apl_frm_date) AND   /* Added apl_frm_date by monica for kotak ISKB_1737 */
			(SERVICE_STAT IS NOT NULL))
		ORDER BY FRM_CBASE;

	EXEC SQL OPEN ChargeSlabCur;

	for ( ; ; )
	{
		EXEC SQL FETCH ChargeSlabCur INTO
			 :dbl_h_fromcval INDICATOR :int_i_fromcval, 
			 :dbl_h_tocval INDICATOR :int_i_tocval;

		if ( sqlca.sqlcode < 0 )
		{
			char chr_l_buffer[KEY_LENGTH];

			memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

			ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

			*int_p_retstat = IV_CRITCAL_ERROR_IND;

			CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
				       APL_NULL_STRING, APL_NULL_STRING, 
				       __LINE__, __FILE__);

			APL_GOBACK_FAIL
		}
		else if ( sqlca.sqlcode == 1403 )
		{
			break;
		}

		chr_l_isopenchargeslabcur = 'Y';

/*added by Monica for ISKB_1737 start*/
	
	EXEC SQL SELECT B_GEN_IND,TO_CHAR(TO_DATE(B_PREV_DATE, 'DD/MM/YYYY hh24:mi:ss'), 'MON-YYYY')
		 INTO :chr_b_gen_ind:int_i_gen_ind,:chr_b_prev_date:int_i_b_prev_date
		 FROM SYS_IVCONTROLPARAM;

	IS_ANY_ORA_ERROR	
	
	Alert("MV chr_b_gen_ind %c",chr_b_gen_ind);
	Alert("MV chr_b_prev_date %s",chr_b_prev_date);
		Alert("MV p_apl_frm_date %s",p_apl_frm_date);
		
		
	if( (strcmp(chr_b_gen_ind,"Y") == 0) && (strcmp(chr_b_prev_date,p_apl_frm_date) == 0)) 
	{
	
		printf("\n Record cannot be deleted since bill is already generated for the Applicable From date ");	  
				CO_InsertErr(l_debug_info_ptr, ERR_BILL_ALRDY_GENERATED, APL_NULL_STRING, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

			APL_GOBACK_FAIL	
			
	}
	else
	{
		
		printf("\n Before deleting in IV_Proc_AdjChargeSlabs  ");	  
			
		
		EXEC SQL DELETE FROM IV_CLIENTFEE
			 WHERE ((CLIENT = :p_client) AND
				(SERVICE_CD = :p_servcode) AND
				(PROC_DATA_VAL = :p_paramval) AND
				(FRM_FBASE = :p_fromfval) AND
				(FRM_CBASE = :dbl_h_fromcval) AND
				(APL_FRM_DATE = :p_apl_frm_date));   /* Added apl_frm_date by monica for kotak ISKB_1737 */
/*added by Monica for ISKB_1737 end*/
		if ( sqlca.sqlcode < 0 )
		{
			char chr_l_buffer[KEY_LENGTH];

			memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

			ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

			*int_p_retstat = IV_CRITCAL_ERROR_IND;

			CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
				       APL_NULL_STRING, APL_NULL_STRING, 
				       __LINE__, __FILE__);

			APL_GOBACK_FAIL
		}

		}

		EXEC SQL UPDATE IV_CLIENTFEE
			 SET FRM_CBASE = :dbl_h_fromcval
			 WHERE ((CLIENT = :p_client) AND
				(SERVICE_CD = :p_servcode) AND
				(PROC_DATA_VAL = :p_paramval) AND
				(FRM_FBASE = :p_fromfval) AND
				(FRM_CBASE = :dbl_h_tocval) AND
				(APL_FRM_DATE = :p_apl_frm_date));   /* Added apl_frm_date by monica for kotak ISKB_1737 */

		if ( sqlca.sqlcode < 0 )
		{
			char chr_l_buffer[KEY_LENGTH];

			memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

			ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

			*int_p_retstat = IV_CRITCAL_ERROR_IND;

			CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
				       APL_NULL_STRING, APL_NULL_STRING, 
				       __LINE__, __FILE__);

			APL_GOBACK_FAIL
		}
		else if ( sqlca.sqlcode == 1403 )
		{
			EXEC SQL UPDATE IV_CLIENTFEE
				 SET TOC_BASE = :dbl_h_maxslabval
				WHERE ((CLIENT = :p_client) AND
					(SERVICE_CD = :p_servcode) AND
					(PROC_DATA_VAL = :p_paramval) AND
					(FRM_FBASE = :p_fromfval) AND
					(TOC_BASE = :dbl_h_fromcval) AND 
					(APL_FRM_DATE = :p_apl_frm_date));   /* Added apl_frm_date by monica for kotak ISKB_1737 */

			if ( sqlca.sqlcode < 0 )
			{
				char chr_l_buffer[KEY_LENGTH];

				memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

				ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

				*int_p_retstat = IV_CRITCAL_ERROR_IND;

				CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer,
					       APL_NULL_STRING, APL_NULL_STRING,
					       __LINE__, __FILE__);

				APL_GOBACK_FAIL
			}
		}
		else if ( !sqlca.sqlcode )
		{
			EXEC SQL CLOSE ChargeSlabCur;

			EXEC SQL OPEN ChargeSlabCur;
		}

	} 

	EXEC SQL CLOSE ChargeSlabCur;

	chr_l_isopenchargeslabcur = 'N';

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of IV_Proc_AdjChargeSlabs().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		if ( chr_l_isopenchargeslabcur == 'Y' )
		{
			EXEC SQL CLOSE ChargeSlabCur;
		}

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of IV_Proc_AdjChargeSlabs().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_ChkParamVal(const char *p_client, const long p_servcode, const char *p_apl_frm_date, /*added by Monica for ISKB_1737 */
		   const char *p_paramval, int *int_p_retstat, 
		   DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	extern int IV_Rtv_IVCUSTPARAM(const char *chr_l_client, 
				     const long l_servcode, const char *chr_l_apl_frm_date,/*added by Monica for ISKB_1737 */
				     IV_CLIENTPARAM_STRUCT_H *l_iv_clientparam_struct_ha_a, 
				     int *int_l_retstat, 
				     DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	int IV_ChkLocation(const char *chr_l_locncode_c, int *int_l_retstat, 
			   DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	int IV_ChkOthDepncy(const char *chr_l_param_code, const char *chr_l_param_val, 
			    int *int_l_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	int IV_ChkParamGroup(const char *chr_l_param_code, const char *chr_l_param_val,
			     int *int_l_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	

	int int_l_retstat = 0;
	char chr_l_temp_param_val[IV_PARAM_LEN], chr_l_param_val[IV_PARAM_LEN];
	char chr_l_temp_param_code[IV_PARAM_LEN];
	char *chr_l_temp1;
	char *chr_l_temp2;
	char chr_l_chkforgroup = 'N';
	IV_CLIENTPARAM_STRUCT_H l_iv_clientparam_struct_ha_a;

 chr_l_temp1 = (char *) calloc(IV_PARAM_LEN,sizeof(char));
 chr_l_temp2 = (char *) calloc(IV_PARAM_LEN,sizeof(char));
	memset(&l_iv_clientparam_struct_ha_a, NULL, sizeof(IV_CLIENTPARAM_STRUCT_H));
	memset(chr_l_temp_param_val, APL_NULL_CHAR, IV_PARAM_LEN);
	memset(chr_l_param_val, APL_NULL_CHAR, IV_PARAM_LEN);
	memset(chr_l_temp_param_code, APL_NULL_CHAR, IV_PARAM_LEN);
	

	strcpy(chr_l_param_val, p_paramval);

	int_l_retstat = IV_SUCCESS;
	if ( APL_FAILURE == IV_Rtv_IVCUSTPARAM(p_client, p_servcode, p_apl_frm_date,/*added by Monica for ISKB_1737 start*/
					      &l_iv_clientparam_struct_ha_a, &int_l_retstat, 
					      l_debug_info_ptr) )
	{
		

		if ( int_l_retstat == IV_CRITCAL_ERROR_IND )
		{
			*int_p_retstat = int_l_retstat;

			APL_GOBACK_FAIL
		}
		else if ( int_l_retstat == IV_NO_DATA_FOUND_ERR )
		{
			if ( strcmp(p_paramval, ";") )
			{
				*int_p_retstat = IV_CRITCAL_ERROR_IND;

				CO_InsertErr(l_debug_info_ptr, ERR_INVALID_SERVDEPEND, 
					       APL_NULL_STRING, APL_NULL_STRING,
					       APL_NULL_STRING, __LINE__, 
					       __FILE__);

				

				APL_GOBACK_FAIL
			}
		}
	}
	else 
	{
/*		strcpy(chr_l_temp_param_code, 
		       strtok_r(l_iv_clientparam_struct_ha_a.parameter_cd, ";", &chr_l_temp1));*/	/* Bageshri HDFCIV_001*/
		strtok_r(l_iv_clientparam_struct_ha_a.parameter_cd, ";", &chr_l_temp1);
		strcpy(chr_l_temp_param_code,l_iv_clientparam_struct_ha_a.parameter_cd); 	
	
	/*	strcpy(chr_l_temp_param_val, strtok_r(chr_l_param_val, ";", &chr_l_temp2));*/
		strtok_r(chr_l_param_val, ";", &chr_l_temp2);
		strcpy(chr_l_temp_param_val,chr_l_param_val);
			
		/****************************/

		while ( strlen(chr_l_temp_param_code)>1 )	/* Bageshri HDFCIV_001*/
		{
			chr_l_chkforgroup = 'N';

			if ( !strcmp(chr_l_temp_param_code, "LOCATION") )	/* Bageshri HDFCIV_001*/
			{
				int_l_retstat = IV_SUCCESS;

				if ( APL_FAILURE == 
				      IV_ChkLocation(chr_l_temp_param_val, 
						     &int_l_retstat, l_debug_info_ptr) )
				{
					if ( int_l_retstat == IV_CRITCAL_ERROR_IND )
					{
						*int_p_retstat = int_l_retstat;
					}
					else if (int_l_retstat == IV_NO_DATA_FOUND_ERR)
					{
						chr_l_chkforgroup = 'Y';
					}
				}
			}
			else if ( !strcmp(chr_l_temp_param_code, "PRODUCT") || 
				  !strcmp(chr_l_temp_param_code, "DEALTYPE") ||
				  !strcmp(chr_l_temp_param_code, "DEALCD") ||
				  !strcmp(chr_l_temp_param_code, "INSTRUMENT") )	/* Bageshri HDFCIV_001*/
			{
				if (  p_servcode == ADM_TXN_FEE_IND &&
				      !strcmp(chr_l_temp_param_code, "DEALCD") && 	/* Bageshri HDFCIV_001*/
				     (!strcmp(chr_l_temp_param_val, "1") || 
				      !strcmp(chr_l_temp_param_val, "2")) )
				{
					*int_p_retstat = IV_CRITCAL_ERROR_IND;

					CO_InsertErr(l_debug_info_ptr, 
						       ERR_RFDF_SLAB_NOTALLOWED_FORADMNTXNFEE, 
						       APL_NULL_STRING, 
						       APL_NULL_STRING, 
						       APL_NULL_STRING, 
						       __LINE__, __FILE__);

					

					APL_GOBACK_FAIL
				}

				int_l_retstat = IV_SUCCESS;
				if (APL_FAILURE == 
				      IV_ChkOthDepncy(chr_l_temp_param_code, 
						      chr_l_temp_param_val, 
						     &int_l_retstat, l_debug_info_ptr))
				{
					if ( int_l_retstat == IV_CRITCAL_ERROR_IND )
					{
						*int_p_retstat = int_l_retstat;
					}
					else if (int_l_retstat == IV_NO_DATA_FOUND_ERR)
					{
						chr_l_chkforgroup = 'Y';
					}
				}

			} 
			int_l_retstat = IV_SUCCESS;

			if ( (chr_l_chkforgroup == 'Y') && 
			     (APL_FAILURE == IV_ChkParamGroup(chr_l_temp_param_code,
							      chr_l_temp_param_val, 
							      &int_l_retstat, 
							      l_debug_info_ptr)) )
			{
				if ( int_l_retstat == IV_CRITCAL_ERROR_IND )
				{
					*int_p_retstat = int_l_retstat;
				}
				else if (int_l_retstat == IV_NO_DATA_FOUND_ERR)
				{
					*int_p_retstat = IV_CRITCAL_ERROR_IND;

					CO_InsertErr(l_debug_info_ptr, 
						       ERR_INVALIDGRP_VALUE, 
						       chr_l_temp_param_val, 
						       APL_NULL_STRING, 
						       APL_NULL_STRING, 
						       __LINE__, __FILE__);

					

					APL_GOBACK_FAIL
				}

			} 

	      if(chr_l_temp1 == (char *)NULL){
				strcpy(chr_l_temp_param_code, APL_NULL_STRING);
		  }else{
				if(strlen(chr_l_temp1)>0){
					strcpy(chr_l_temp_param_code, strtok_r((char *)NULL, ";", &chr_l_temp1));					
				}else{
					memset(chr_l_temp_param_code, APL_NULL_CHAR, IV_PARAM_LEN);
				}	   
			}
	      if(chr_l_temp2 == (char *)NULL){
				strcpy(chr_l_temp_param_val, APL_NULL_STRING);
		  }else{	
				if(strlen(chr_l_temp2)>0){
					strcpy(chr_l_temp_param_val, strtok_r((char *)NULL, ";", &chr_l_temp2));
				}else{
				memset(chr_l_temp_param_val, APL_NULL_CHAR, IV_PARAM_LEN);
			 }
		} 
	}
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of  IV_ChkParamVal().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of IV_ChkParamVal().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_ChkLocation(const char *p_loccode, int *int_p_retstat, 
		   DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	EXEC SQL BEGIN DECLARE SECTION;

		int int_h_count = 0;
		short int int_i_count = 0;
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	EXEC SQL SELECT NVL(COUNT(*), 0)
		 INTO :int_h_count INDICATOR :int_i_count
		 FROM MT_LOCATION
		 WHERE (LOCATION_CD = :p_loccode);

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	if ( !int_h_count )
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		APL_GOBACK_FAIL
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of IV_ChkLocation().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of IV_ChkLocation().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_ChkParamGroup(const char *chr_p_param_code, const char *chr_p_param_val, 
		     int *int_p_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	EXEC SQL BEGIN DECLARE SECTION;

		int int_h_count = 0;
		short int int_i_count = 0;
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	EXEC SQL SELECT NVL(COUNT(*), 0)
		 INTO :int_h_count INDICATOR :int_i_count
		 FROM IV_DATA_GRP
		 WHERE ((PARAMETER_CD = :chr_p_param_code) AND
			(GROUP_PRM_CD = :chr_p_param_val));

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	if ( !int_h_count )
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		APL_GOBACK_FAIL
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of IV_ChkParamGroup().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of IV_ChkParamGroup().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_ChkOthDepncy(const char *chr_p_param_code, const char *chr_p_param_val, 
		    int *int_p_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	EXEC SQL BEGIN DECLARE SECTION;

		char chr_h_code_typ[21], h_nation_code[3];
		EXEC SQL VAR chr_h_code_typ IS STRING;
		EXEC SQL VAR h_nation_code IS STRING;
		int int_h_count = 0, int_h_exists = 0;
		short int int_i_count = 0, int_i_exists = 0;
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	memset(chr_h_code_typ, APL_NULL_CHAR, 21);
	memset(h_nation_code, APL_NULL_CHAR, 3);
/* commented by Bageshri HDFCIV_001 -- no need now */
/*	if ( !strcmp(chr_p_param_code, "PRODUCT") )
	{
		strcpy(chr_h_code_typ, "PROD_CLASS");
	}
	else if ( !strcmp(chr_p_param_code, "DEAL_CD") )
	{
		strcpy(chr_h_code_typ, "DEAL_CD");
	}
	else if ( !strcmp(chr_p_param_code, "DEALTYPE") )
	{
		strcpy(chr_h_code_typ, "DL_CLASS");
	}*/

	printf("Rohit : Param Code : %s\n",chr_p_param_code);

	if ( !strcmp(chr_p_param_code, "INSTRUMENT") )
	{
		EXEC SQL SELECT NVL(COUNT(*), 0)
			INTO :int_h_exists INDICATOR :int_i_exists
			FROM MT_INSTRUMENT
			WHERE ((INSTR_CODE = :chr_p_param_val) 
			AND (STATUS = 'AA'));

	}
	else if(!strcmp(chr_p_param_code,"PRODUCT"))
	{
		/******** For Instrument Sub Type changes :- vinay kalaskar **********/
			strcpy((char *)chr_p_param_code,"INSTR_SUB_TYPE");//Changes done for AIX Migration

		/********************************************************************/

		/* Bageshri For Instrument Sub Type skipped nation code check  **********/

		EXEC SQL SELECT NVL(COUNT(*), 0)
			INTO :int_h_exists INDICATOR :int_i_exists
			FROM PRO_SGENSTAT
			WHERE (MAP_TYPE = :chr_p_param_code);
	}
	else
	{
		EXEC SQL SELECT NVL(COUNT(*), 0)
			INTO :int_h_count INDICATOR :int_i_count
			FROM PRO_SGENSTAT
			WHERE ((MAP_TYPE = :chr_p_param_code) 
			AND (NATION_CODE = :g_mt_commonsys_params_struct_h.nation_code));

		if ( sqlca.sqlcode < 0 )
		{
			char chr_l_buffer[KEY_LENGTH];

			memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

			ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

			*int_p_retstat = IV_CRITCAL_ERROR_IND;

			CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
					APL_NULL_STRING, APL_NULL_STRING, 
					__LINE__, __FILE__);

			APL_GOBACK_FAIL
		}

		if ( !int_h_count )
		{
			strcpy(h_nation_code, "XX");
		}
		else
		{
			strcpy(h_nation_code, g_mt_commonsys_params_struct_h.nation_code);


		}

		EXEC SQL SELECT NVL(COUNT(*), 0)
			INTO :int_h_exists INDICATOR :int_i_exists
			FROM PRO_SGENSTAT
			WHERE ((MAP_TYPE = :chr_p_param_code) AND	/* Bageshri HDFCIV_001*/
					(MAP_VAL = :chr_p_param_val) AND
					(NATION_CODE = :h_nation_code));
	}

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}
	if ( !int_h_exists )
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		APL_GOBACK_FAIL
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of IV_ChkOthDepncy().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of IV_ChkOthDepncy().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}
