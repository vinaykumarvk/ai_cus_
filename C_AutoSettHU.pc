







#include "CO_HostStructdef.h"
#include "Intellect_Common.h"
#include "DL_Interface.h"
EXEC SQL INCLUDE SQLCA.H;

#define  APL_MAXREASON_SIZE 101
#define  APL_DOMCPAC_LEN 16
#define  APL_CLI_LEN 16
/* OPT:AIX */
#ifdef APL_INSTRUMENTCODE_LEN
#undef APL_INSTRUMENTCODE_LEN
#endif
#define  APL_INSTRUMENTCODE_LEN 9


#define  APL_DEAL_STATUS_LEN 3
#define  APL_FAILCODE_LEN 3
#define  APL_CITIBANK_ACCT_CODE 11

#define  APL_FILENAME_LENGTH 13
#define  FILENAME_LEN_B 17
#define APL_MAXLINE_SIZE 500
#define COMMIT_COUNT_A 20
#define BUFF_SIZE 110
#define BRK_CD_LEN 13


#define VERIFIED_WITH_LEN 26
#define DOMICILE_LEN_A 2
#define VERIFIED_WITH_EPT "EPT"
#define DOMICILE_FORG_IND "2"


#define  COMMIT_COUNT_G 5
#define  PAGELENGTH 55
#define  QUANTITY_LEN  26
//AIX -Warning Removal
#ifdef AMOUNT_LEN_B
#undef AMOUNT_LEN_B
#endif
#define  AMOUNT_LEN_B  19
#define  CNAME_LEN_A 66
#define  INSTR_NAME_LEN_D  131
//AIX -Warning Removal
#ifdef FILE_NAME_LEN
#undef FILE_NAME_LEN
#endif 
#define  FILE_NAME_LEN 30
#define  SEPARATOR "|"
//AIX -Warning Removal
#ifdef AMOUNT_LEN_B
#undef AMOUNT_LEN_B
#endif
#define  AMOUNT_LEN_B  18
#define  LCL_FEED_SIZE 1000
#define  LCL_ISIN_LEN 13
#define  NO_OF_FIELDS 39
#define  APL_MIN_FORMAT_RECORDS 36

typedef struct {
                char            h_class[9];
                char            h_from_per[20];
                char            h_to_per[20];
                char            h_main_our[7];
                char            h_delclr_name[37];
                char            h_detail[4];
                char            h_sub_our[7];
                char            h_our_subclr_name[37];
                char            h_instr_code[5];
                char            h_instrlnt_clr_name[16];
                char            h_instr_sequence[3];
                int             h_instrclass;
                char            h_instr_text[2];
                char            h_instr_isin[13];
                char            h_stat_date[20];
                char            h_dealcode[3];
                char            h_txclr_name[14];
                char            h_indentity_no[7];
                char            h_info[7];
                char            h_main_cp[7];
                char            h_sub_cp[7];
                double          h_quantity_rec;
                double          h_quantity_del;
                double          h_deal_in;
                double          h_deal_out;
                double          h_otc_sf_quantity;
                double          h_nominal_value;
                char            h_partner_a[16];
                double          h_quantity1;
                char            h_other_a[16];
                char            h_partner_b[16];
                double          h_quantity2;
                char            h_other_b[16];
                char            h_partner_c[16];
                double          h_quantity3;
                char            h_other_c[16];
                char            h_indicate;
                char            h_failreas[101];
                int             h_mismatch;
                char            h_actual_client[11];
                char            h_actual_indentity_no[17];
                int             h_rec_no;
                int             h_sequenceno;
                } CAUTOSETTHUWRK_STRUCT_H;


typedef struct {
                short            i_class;
                short            i_from_per;
                short            i_to_per;
                short            i_main_our;
                short            i_delclr_name;
                short            i_detail;
                short            i_sub_our;
                short            i_our_subclr_name;
                short            i_instr_code;
                short            i_instrlnt_clr_name;
                short            i_instr_sequence;
                short            i_instrclass;
                short            i_instr_text;
                short            i_instr_isin;
                short            i_stat_date;
                short            i_dealcode;
                short            i_txclr_name;
                short            i_indentity_no;
                short            i_info;
                short            i_main_cp;
                short            i_sub_cp;
                short            i_quantity_rec;
                short            i_quantity_del;
                short            i_deal_in;
                short            i_deal_out;
                short            i_otc_sf_quantity;
                short            i_nominal_value;
                short            i_partner_a;
                short            i_quantity1;
                short            i_other_a;
                short            i_partner_b;
                short            i_quantity2;
                short            i_other_b;
                short            i_partner_c;
                short            i_quantity3;
                short            i_other_c;
                short            i_indicate;
                short            i_reas;
                short            i_mismatch;
                short            i_actual_client;
                short            i_actual_indentity_no;
                short            i_rec_no;
                short            i_sequenceno;
                } CAUTOSETTHUWRK_STRUCT_I;

typedef struct {
                char             h_typeof_file[11];
                char             h_link_val[APL_MAXLINE_SIZE];
                int              h_start_safekeep_pos;
                int              h_widateh;
                char             h_infoclass;
                } CAUTOSETTHUFMT_STRUCT_H;

typedef struct {
                short            i_typeof_file;
                short            i_link_val;
                short            i_start_safekeep_pos;
                short            i_widateh;
                short            i_infoclass;
                } CAUTOSETTHUFMT_STRUCT_I;



char chr_p_h_acc[APL_CLI_LEN]=APL_NULL_STRING;
char chr_p_h_domcp[APL_DOMCPAC_LEN]=APL_NULL_STRING;
char p_instr_code[APL_INSTRUMENTCODE_LEN]=APL_NULL_STRING;
int int_p_recno = 0;







int	DL_Proc_AutoBrkSettleUpload(char 					*p_uploaddir, 
						char 						*chr_p_filename_a,	
						char						**argv,
				   	FILE						*p_logfile,
						INTL_ENV_DATA_STRUCT_H	*p_intl_envdatastruct_h,
						DEBUG_INFO_STRUCT_H			**l_debug_info_ptr)
{
	

	
	char		chr_l_f_buf[APL_MAXLINE_SIZE]					= APL_NULL_STRING;
	char		chr_l_trcode_a[APL_FLAG_LENGTH]						= APL_NULL_STRING;
	char		int_l_status[APL_STATUS_LEN]					= APL_NULL_STRING;
	char     chr_sysdate[APL_DATE_LEN] 					   = APL_NULL_STRING;
	char 		chr_l_linebuf[APL_MAXLINE_SIZE]			   = APL_NULL_STRING; 
	char 		chr_l_linebuf1[APL_MAXLINE_SIZE]			   = APL_NULL_STRING; 
	char 		chr_reason_str[APL_MAXREASON_SIZE] 			= APL_NULL_STRING; 
	char 		chr_l_instrcode_cinstrument[APL_INSTRUMENTCODE_LEN] 		= APL_NULL_STRING;
	char 		chr_l_instrcode_ctrade[APL_INSTRUMENTCODE_LEN] 			= APL_NULL_STRING;
	char		chr_l_date_temp[3]									= APL_NULL_STRING;
	char		chr_l_month_temp[3]								= APL_NULL_STRING;
	char		chr_l_year_temp[5]									= APL_NULL_STRING;
	char		l_temp_type[11]									= APL_NULL_STRING;
	int		int_l_reccount										= 0;
	int 		int_record_flg 										= 0;
	int 		int_num 												= 0;
	int 		int_l_no_of_rec 									= 0;
	double	l_quantity_a												= 0.0;    
	char 	 **chr_l_record_field 								= NULL;

	int 		int_l_i_ordno										= 0;
	int 		int_l_i_isin											= 0;
	int 		int_l_i_asd											= 0;
	int 		int_l_i_reason										= 0;

	char		chr_dd[3]												= APL_NULL_STRING;
	char     chr_mm[3]                                  = APL_NULL_STRING;
	char     chr_yyyy[5]                                = APL_NULL_STRING;
	char		*chr_recordstr										= NULL;
	char		chr_tempstr[APL_MAXLINE_SIZE]              = APL_NULL_STRING;
	char 		*temp												= NULL;
	int		i													= 0;
	int		int_l_seqno											= 0;
	int		int_l_int_fmtrecords								= 0;

	char l_temp_processing_status[51] = APL_NULL_STRING;

		char chr_l_str_temp[16]=APL_NULL_STRING;

		int int_l_int_acc = 0;
		long l_int_domcp = 0;
		int int_l_count = 0;

	   EXEC SQL VAR chr_p_h_acc IS STRING;
	   EXEC SQL VAR chr_p_h_domcp IS STRING;
		EXEC SQL VAR p_instr_code IS STRING;



	char chr_l_client_a[APL_CLIENT_LENGTH]=APL_NULL_STRING;
	char chr_l_domcp[APL_DOMCPAC_LEN]=APL_NULL_STRING;
	char chr_l_citibank_acct_code[APL_CITIBANK_ACCT_CODE]=APL_NULL_STRING;
	char chr_l_rowid_A[APL_ROWID_LEN]=APL_NULL_STRING;
	char chr_l_buf[BUFF_SIZE]=APL_NULL_STRING;
	char chr_temp_buffer[APL_MAXREASON_SIZE]=APL_NULL_STRING;
	char chr_temp1[APL_MAXLINE_SIZE]=APL_NULL_STRING;
   char chr_l_actual_client[APL_CLIENT_LENGTH]       = APL_NULL_STRING;
   char chr_l_actual_refno[APL_TXNREFNO_LEN]        = APL_NULL_STRING;

   char     chr_l_h_client_a[APL_CLIENT_LENGTH]        = APL_NULL_STRING;
   char     chr_l_h_domcpac[APL_DOMCPAC_LEN]        = APL_NULL_STRING;
   char     chr_l_h_instrcode_A[APL_INSTRUMENTCODE_LEN]          = APL_NULL_STRING;
   char     chr_l_h_countacc_a[APL_COUNTACC_LEN]      = APL_NULL_STRING;
   char     chr_l_h_confdt[20]					         = APL_NULL_STRING;
   char     chr_l_h_trade_status[APL_DEAL_STATUS_LEN]= APL_NULL_STRING;
   char     int_l_h_failcode[APL_FAILCODE_LEN]		= APL_NULL_STRING;
   char     chr_l_h_refno_A[APL_TXNREFNO_LEN]         = APL_NULL_STRING;
   char     chr_l_h_exarena[EX_ARENA_LEN]          = APL_NULL_STRING;
   char     chr_l_h_posn_status[STATUS_POS_LEN]  = APL_NULL_STRING;
   char     chr_l_h_trcode_a[APL_FLAG_LENGTH]            = APL_NULL_STRING;
   char     chr_l_trd_status[APL_STATUS_LEN]        = APL_NULL_STRING;
   char     chr_l_h_access_stamp[APL_DATE_LEN]      = APL_NULL_STRING;
   char     chr_l_actual_setl_dt[APL_DATE_LEN]      = APL_NULL_STRING;
   char     chr_l_h_brokerno[BRK_CD_LEN]        = APL_NULL_STRING;
	  char	  l_tmp_infotype[2]	= APL_NULL_STRING;

   int      int_l_datediff                          = 0;
	int		int_l_tradeprocessed							= 0;
	int 		int_l_no_of_trades      						= 0;

   double   l_h_cost                           = 0.0;
   double   l_h_quantity_a                             = 0.0;
   double   l_h_brokercomm                         = 0.0;

	double	l_quantity											= 0.0;

   short    l_i_account                         = 0;
   short    l_i_domcpac                         = 0;
   short    l_i_instr_code                          = 0;
   short    l_i_countacc								= 0;
   short    l_i_confdt  								= 0;
   short    l_i_trade_status							= 0;
   short    l_i_failcode								= 0;
   short    l_i_refno                           = 0;
   short    l_i_exarena                         = 0;
   short    l_i_posn_status                     = 0;
   short    int_l_i_trcode                          = 0;
   short    l_i_access_stamp                    = 0;
   short    l_i_price                           = 0;
   short    int_l_i_qty                             = 0;
   short    l_i_brkcomm                         = 0;
   short    l_i_brokerno                        = 0;
   short    l_i_rowid    			= 0;





/* Added by kotubabu for Linux Migration -Start*/
#ifdef OS_LINUX
	FILE *l_feedfile;
#else
FILE *l_feedfile = APL_OUT_FILE;
#endif
/* Added by kotubabu  for Linux Migration -END*/
	
	CAUTOSETTHUWRK_STRUCT_H	l_h_CAUTOSETTHUWRK_STRUCT;
	CAUTOSETTHUWRK_STRUCT_I	l_i_CAUTOSETTHUWRK_STRUCT;

	CAUTOSETTHUFMT_STRUCT_H l_h_CAUTOSETTHUFMT_STRUCT[NO_OF_FIELDS];
   CAUTOSETTHUFMT_STRUCT_I l_i_CAUTOSETTHUFMT_STRUCT[NO_OF_FIELDS];

	CAUTOSETTHUFMT_STRUCT_H l_h_CAUTOSETTHUFMT_TEMP_STRUCT;
   CAUTOSETTHUFMT_STRUCT_I l_i_CAUTOSETTHUFMT_TEMP_STRUCT;

   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;

			EXEC SQL VAR chr_g_restart_data is string;

	
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_class 			IS STRING;
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_from_per 		IS STRING;
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_to_per 		IS STRING;
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_main_our 		IS STRING;
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_delclr_name 		IS STRING;
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_detail 			IS STRING;
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_sub_our 		IS STRING;
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_our_subclr_name 	IS STRING;
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_instr_code 		IS STRING;
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_instrlnt_clr_name 		IS STRING;
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_instr_sequence 		IS STRING;
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_instr_text 		IS STRING;
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_instr_isin 			IS STRING;
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_stat_date 		IS STRING;
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_dealcode 		IS STRING;
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_txclr_name 		IS STRING;
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_indentity_no 			IS STRING;
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_info 			IS STRING;
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_main_cp 		IS STRING;
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_sub_cp 		IS STRING;
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_partner_a 		IS STRING;
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_other_a 		IS STRING;
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_partner_b 		IS STRING;
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_other_b 		IS STRING;
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_partner_c 		IS STRING;
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_other_c 		IS STRING;
     
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_failreas 		IS STRING;
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_actual_client 		IS STRING;
      EXEC SQL VAR l_h_CAUTOSETTHUWRK_STRUCT.h_actual_indentity_no 		IS STRING;
			
		EXEC SQL VAR l_h_CAUTOSETTHUFMT_TEMP_STRUCT.h_typeof_file      IS STRING;
		EXEC SQL VAR l_h_CAUTOSETTHUFMT_TEMP_STRUCT.h_link_val      IS STRING;
	/*	EXEC SQL VAR l_h_CAUTOSETTHUFMT_TEMP_STRUCT.h_infoclass      IS STRING;Abhay AIX COMMENTED --is a char */
	
	

	CO_ProcMonitor(p_logfile, "Entered Function CDBAutoSettlUplFn", NULL, p_intl_envdatastruct_h);
	EXEC SQL SELECT COUNT(*) INTO :int_l_int_fmtrecords
				FROM DL_AUTOSETTHUFMT;
	IS_ANY_ORA_ERROR;

	if (int_l_int_fmtrecords<APL_MIN_FORMAT_RECORDS)
	{
		CO_ProcMonitor(p_logfile,"Total no of records less than 36 in the format table cautosetthuwrk",
					NULL,NULL);
		APL_GOBACK_FAIL	
	}


	EXEC SQL DECLARE fmt_cursor CURSOR FOR 
	SELECT TYPEOF_FILE, FIELD_NAME, START_POS, LENGTH, INFOTYPE 
	FROM DL_AUTOSETTHUFMT ORDER BY START_POS;
	IS_ANY_ORA_ERROR;
	
	EXEC SQL OPEN fmt_cursor;
	IS_ANY_ORA_ERROR;
	for (i=0;;i++)
	{
 		memset(chr_l_f_buf, NULL, BUFF_SIZE);
      sprintf(chr_l_f_buf, "Getting record no. :%d", i);
		CO_ProcMonitor(p_logfile,chr_l_f_buf,NULL,NULL);
		memset(&l_h_CAUTOSETTHUFMT_TEMP_STRUCT, NULL, sizeof(CAUTOSETTHUFMT_STRUCT_H));
		EXEC SQL FETCH fmt_cursor INTO :l_h_CAUTOSETTHUFMT_TEMP_STRUCT;
		if (APL_ZERO_RESULT_SET)
		{
			break;
		}
	   IS_ANY_ORA_ERROR;

		strcpy(l_h_CAUTOSETTHUFMT_STRUCT[i].h_link_val, l_h_CAUTOSETTHUFMT_TEMP_STRUCT.h_link_val);
		l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos = l_h_CAUTOSETTHUFMT_TEMP_STRUCT.h_start_safekeep_pos;
		l_h_CAUTOSETTHUFMT_STRUCT[i].h_widateh = l_h_CAUTOSETTHUFMT_TEMP_STRUCT.h_widateh;
		l_h_CAUTOSETTHUFMT_STRUCT[i].h_infoclass = l_h_CAUTOSETTHUFMT_TEMP_STRUCT.h_infoclass;
 		memset(chr_l_f_buf, NULL, BUFF_SIZE);
		sprintf(chr_l_f_buf,"Name:%s: , St_pos:%d:, Width:%d:, Datatype:%c: ",l_h_CAUTOSETTHUFMT_STRUCT[i].h_link_val,l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos,l_h_CAUTOSETTHUFMT_STRUCT[i].h_widateh,l_h_CAUTOSETTHUFMT_STRUCT[i].h_infoclass);
		CO_ProcMonitor(p_logfile,chr_l_f_buf,NULL,NULL);

	}
   EXEC SQL CLOSE fmt_cursor;
	IS_ANY_ORA_ERROR;

   strcat(p_uploaddir,chr_p_filename_a);
	l_feedfile = NULL;
   l_feedfile = fopen(p_uploaddir, "r");

   

   if (l_feedfile == NULL)
   {
      if (CO_InsertErr
            (l_debug_info_ptr,
            ERR_FDFILE_NOTVALID,
            
            APL_NULL_STRING,
            APL_NULL_STRING,
            APL_NULL_STRING,
            __LINE__,
            __FILE__
            ) != APL_SUCCESS)
            APL_GOBACK_FAIL
      APL_GOBACK_FAIL
   }


 printf("\nargv[0] is :%s: argv[1] is :%s: argv[2] is :%s:\n",argv[0],argv[1],argv[2]);
   
  EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
     FROM SYS_BATCHPROC
     WHERE PROCESS_NAME=:argv[0]
        AND   PROC_INIT=:argv[1]
        AND   STARTDATE=:argv[2]
        AND   STATUS='started'
     FOR UPDATE OF PROCESSING_STATUS,STATUS;


  if(APL_ZERO_RESULT_SET)
   {
      CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
      APL_GOBACK_FAIL
   }

  IS_ANY_ORA_ERROR

      fprintf(p_logfile, " successfully locked the batch record\n");


	

	EXEC SQL SELECT INFOTYPE INTO :l_tmp_infotype  
				FROM DL_AUTOSETTHUFMT WHERE FIELD_NAME='type'
		  FOR UPDATE NOWAIT ;
	IS_ANY_ORA_ERROR;

   CO_ProcMonitor(p_logfile,"About to truncate the cautosetthuwrk table",NULL,NULL);
	EXEC SQL DELETE DL_AUTOSETTHUWRK;
	IS_ANY_ORA_ERROR;

	memset(chr_l_f_buf, NULL, BUFF_SIZE);
   sprintf(chr_l_f_buf, "%d Records Deleted from cautosetthuwrk", sqlca.sqlerrd[2]);
	CO_ProcMonitor(p_logfile,chr_l_f_buf,NULL,NULL);

   CO_ProcMonitor(p_logfile,"Successfully truncated cautosetthuwrk table",NULL,NULL);

	if (  CO_RtvSysDt(chr_sysdate,l_debug_info_ptr) == APL_FAILURE )
         {
            APL_GOBACK_FAIL
         }
  	CO_ProcMonitor(p_logfile,"Starting the loop for reading the upload file",NULL,NULL);
	temp = (char *)calloc(APL_MAXLINE_SIZE, sizeof(char)); 
   while (!feof(l_feedfile))
		{
			strcpy(chr_p_h_acc,APL_NULL_STRING);
   	   strcpy(chr_p_h_domcp,APL_NULL_STRING);
			memset(&l_h_CAUTOSETTHUWRK_STRUCT, NULL, sizeof(CAUTOSETTHUWRK_STRUCT_H));
			memset(&l_i_CAUTOSETTHUWRK_STRUCT, NULL, sizeof(CAUTOSETTHUWRK_STRUCT_I));
			++int_l_reccount;
if (int_l_reccount==159)
	printf("break");

            memset(chr_l_linebuf,APL_NULL_CHAR,APL_MAXLINE_SIZE);
            fscanf(l_feedfile,"%[^\n]\n",chr_l_linebuf);
            memset(chr_l_linebuf1,APL_NULL_CHAR,APL_MAXLINE_SIZE);
            sprintf(chr_l_linebuf1, "%s", chr_l_linebuf);

				CO_ProcMonitor(p_logfile,"\nRecord got from NSD h_file is ",NULL,NULL);
				CO_ProcMonitor(p_logfile, chr_l_linebuf1, NULL, NULL);
				if (strlen(chr_l_linebuf1)<281)
				{
					CO_ProcMonitor(p_logfile, "Incomplete Record values; Length of record less than 281 characters", NULL, NULL);
					memset(chr_l_f_buf, NULL, BUFF_SIZE);
					sprintf(chr_l_f_buf, "Rejected record no : %d", int_l_reccount);
					CO_ProcMonitor(p_logfile,chr_l_f_buf,NULL,NULL); 
					continue;
				}

               

					i=0;
					chr_recordstr=NULL;

					chr_recordstr=chr_l_linebuf1;
					strncpy(l_h_CAUTOSETTHUWRK_STRUCT.h_class, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[0].h_widateh);
					l_h_CAUTOSETTHUWRK_STRUCT.h_class[8]='\0';
					if(APL_FAILURE == CO_Trim(l_h_CAUTOSETTHUWRK_STRUCT.h_class,' ','R',temp,l_debug_info_ptr))
					{
						CO_ProcMonitor(p_logfile,"\nError  in type",NULL,NULL);
						APL_GOBACK_FAIL;
					}
					strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_class,temp);

				        if (strlen(l_h_CAUTOSETTHUWRK_STRUCT.h_class))	
                                          CO_Trim(l_h_CAUTOSETTHUWRK_STRUCT.h_class,' ','L',temp,l_debug_info_ptr);
					strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_class,temp);

					if (strcmp(l_h_CAUTOSETTHUWRK_STRUCT.h_class,"T700TET")!=0)
					{
 						memset(chr_l_buf, NULL, BUFF_SIZE);
      				sprintf(chr_l_buf, "Type not T700TET for record no =%d",int_l_reccount );
   					CO_ProcMonitor(p_logfile, chr_l_buf,NULL, NULL);
						memset(chr_l_f_buf, NULL, BUFF_SIZE);
						sprintf(chr_l_f_buf, "Rejected record no : %d", int_l_reccount);
						CO_ProcMonitor(p_logfile,chr_l_f_buf,NULL,NULL); 
						continue;
					}
					i=i+1;
					chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
               strncpy(chr_tempstr, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[i].h_widateh);
					strcat(chr_tempstr,"\0");

					if (strlen(chr_tempstr)<8)
					{
						CO_ProcMonitor(p_logfile, "Incomplete per_from value", NULL, NULL);
						memset(chr_l_f_buf, NULL, BUFF_SIZE);
						l_h_CAUTOSETTHUWRK_STRUCT.h_indicate='3';
						strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_failreas,"Incomplete per_from value");
					}

               sscanf(chr_tempstr,"%4s%2s%2s",chr_yyyy,chr_mm,chr_dd);
               sprintf(l_h_CAUTOSETTHUWRK_STRUCT.h_from_per,"%2s/%2s/%4s 12:00:00",chr_dd,chr_mm,chr_yyyy);
					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
               strncpy(chr_tempstr, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[i].h_widateh);
					strcat(chr_tempstr,"\0");
               sscanf(chr_tempstr,"%4s%2s%2s",chr_yyyy,chr_mm,chr_dd);
               sprintf(l_h_CAUTOSETTHUWRK_STRUCT.h_to_per,"%2s/%2s/%4s 12:00:00",chr_dd,chr_mm,chr_yyyy);
					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
					strncpy(l_h_CAUTOSETTHUWRK_STRUCT.h_main_our, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[3].h_widateh);
					strcat(l_h_CAUTOSETTHUWRK_STRUCT.h_main_our,"\0");

					if (strlen(l_h_CAUTOSETTHUWRK_STRUCT.h_main_our)==0 || strcmp(l_h_CAUTOSETTHUWRK_STRUCT.h_main_our,"      ")==0)
					{
						CO_ProcMonitor(p_logfile, "our_main is null", NULL, NULL);
						memset(chr_l_f_buf, NULL, BUFF_SIZE);
						strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_main_our,"XXX");
						l_h_CAUTOSETTHUWRK_STRUCT.h_indicate='3';
						strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_failreas,"Our_main is null");

					}

					if(APL_FAILURE==(CO_Trim(l_h_CAUTOSETTHUWRK_STRUCT.h_main_our,' ','R',temp,l_debug_info_ptr)))
					{
						CO_ProcMonitor(p_logfile,"\nError in our_main", NULL,NULL);
						APL_GOBACK_FAIL;
					}
					strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_main_our,temp);

                                        if (strlen(l_h_CAUTOSETTHUWRK_STRUCT.h_main_our))
					    CO_Trim(l_h_CAUTOSETTHUWRK_STRUCT.h_main_our,' ','L',temp,l_debug_info_ptr);
					strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_main_our,temp);


					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
              	strncpy(l_h_CAUTOSETTHUWRK_STRUCT.h_delclr_name, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[4].h_widateh);
					strcat(l_h_CAUTOSETTHUWRK_STRUCT.h_delclr_name,"\0");
					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
              	strncpy(l_h_CAUTOSETTHUWRK_STRUCT.h_detail, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[5].h_widateh);
					strcat(l_h_CAUTOSETTHUWRK_STRUCT.h_detail,"\0");
					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
              	strncpy(l_h_CAUTOSETTHUWRK_STRUCT.h_sub_our, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[6].h_widateh);
					strcat(l_h_CAUTOSETTHUWRK_STRUCT.h_sub_our,"\0");

					if (strlen(l_h_CAUTOSETTHUWRK_STRUCT.h_sub_our)==0)
					{
						CO_ProcMonitor(p_logfile, "our_sub is null", NULL, NULL);
						memset(chr_l_f_buf, NULL, BUFF_SIZE);
                  strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_sub_our,"XXX");
						l_h_CAUTOSETTHUWRK_STRUCT.h_indicate='3';
						strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_failreas,"Our_sub is null");
					}

                                        if (strlen(l_h_CAUTOSETTHUWRK_STRUCT.h_sub_our))
					   CO_Trim(l_h_CAUTOSETTHUWRK_STRUCT.h_sub_our,' ','R',temp,l_debug_info_ptr);
					strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_sub_our,temp);

                                        if (strlen(l_h_CAUTOSETTHUWRK_STRUCT.h_sub_our))
					   CO_Trim(l_h_CAUTOSETTHUWRK_STRUCT.h_sub_our,' ','L',temp,l_debug_info_ptr);
					strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_sub_our,temp);

					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
              	strncpy(l_h_CAUTOSETTHUWRK_STRUCT.h_our_subclr_name, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[7].h_widateh);
					strcat(l_h_CAUTOSETTHUWRK_STRUCT.h_our_subclr_name,"\0");
					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
              	strncpy(l_h_CAUTOSETTHUWRK_STRUCT.h_instr_code, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[8].h_widateh);
					strcat(l_h_CAUTOSETTHUWRK_STRUCT.h_instr_code,"\0");
					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
              	strncpy(l_h_CAUTOSETTHUWRK_STRUCT.h_instrlnt_clr_name, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[9].h_widateh);
					strcat(l_h_CAUTOSETTHUWRK_STRUCT.h_instrlnt_clr_name,"\0");
					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
              	strncpy(l_h_CAUTOSETTHUWRK_STRUCT.h_instr_sequence, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[10].h_widateh);
					strcat(l_h_CAUTOSETTHUWRK_STRUCT.h_instr_sequence,"\0");
					i=i+1;
               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
               l_h_CAUTOSETTHUWRK_STRUCT.h_instrclass=atoi(chr_recordstr);//AIX -Warning Removal
					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
              	
					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
              	strncpy(l_h_CAUTOSETTHUWRK_STRUCT.h_instr_isin, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[13].h_widateh);
					strcat(l_h_CAUTOSETTHUWRK_STRUCT.h_instr_isin,"\0");

               if (strlen(l_h_CAUTOSETTHUWRK_STRUCT.h_instr_isin)==0 || strcmp(l_h_CAUTOSETTHUWRK_STRUCT.h_instr_isin,"            ")==0)
               {
                  CO_ProcMonitor(p_logfile, "isin is null", NULL, NULL);
                  memset(chr_l_f_buf, NULL, BUFF_SIZE);
                  strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_instr_isin,"XXX");
						l_h_CAUTOSETTHUWRK_STRUCT.h_indicate='3';
						strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_failreas,"ISIN is null");

               }
                                        if (strlen(l_h_CAUTOSETTHUWRK_STRUCT.h_instr_isin))
					   CO_Trim(l_h_CAUTOSETTHUWRK_STRUCT.h_instr_isin,' ','R',temp,l_debug_info_ptr);
					strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_instr_isin,temp);

                                        if (strlen(l_h_CAUTOSETTHUWRK_STRUCT.h_instr_isin))
				           CO_Trim(l_h_CAUTOSETTHUWRK_STRUCT.h_instr_isin,' ','L',temp,l_debug_info_ptr);
					strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_instr_isin,temp);


					i=i+1;
               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
					strncpy(chr_tempstr, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[i].h_widateh);
					strcat(chr_tempstr,"\0");
					sscanf(chr_tempstr,"%4s%2s%2s",chr_yyyy,chr_mm,chr_dd);
					sprintf(l_h_CAUTOSETTHUWRK_STRUCT.h_stat_date,"%2s/%2s/%4s 12:00:00",chr_dd,chr_mm,chr_yyyy);
					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
              	strncpy(l_h_CAUTOSETTHUWRK_STRUCT.h_dealcode, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[15].h_widateh);
					strcat(l_h_CAUTOSETTHUWRK_STRUCT.h_dealcode,"\0");

					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
              	strncpy(l_h_CAUTOSETTHUWRK_STRUCT.h_txclr_name, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[16].h_widateh);
					strcat(l_h_CAUTOSETTHUWRK_STRUCT.h_txclr_name,"\0");

					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
              	strncpy(l_h_CAUTOSETTHUWRK_STRUCT.h_indentity_no, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[17].h_widateh);
					strcat(l_h_CAUTOSETTHUWRK_STRUCT.h_indentity_no,"\0");

					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
              	strncpy(l_h_CAUTOSETTHUWRK_STRUCT.h_info, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[18].h_widateh);
					strcat(l_h_CAUTOSETTHUWRK_STRUCT.h_info,"\0");

					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
              	strncpy(l_h_CAUTOSETTHUWRK_STRUCT.h_main_cp, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[19].h_widateh);
					strcat(l_h_CAUTOSETTHUWRK_STRUCT.h_main_cp,"\0");

               if (strlen(l_h_CAUTOSETTHUWRK_STRUCT.h_main_cp)==0 || (strcmp(l_h_CAUTOSETTHUWRK_STRUCT.h_main_cp,"      ")==0))
               {
                  CO_ProcMonitor(p_logfile, "cp_main is null", NULL, NULL);
                  memset(chr_l_f_buf, NULL, BUFF_SIZE);
                  strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_main_cp,"XXX");
						l_h_CAUTOSETTHUWRK_STRUCT.h_indicate='3';
						strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_failreas,"cp_main is null");

               }
                                        if (strlen(l_h_CAUTOSETTHUWRK_STRUCT.h_main_cp))
					   CO_Trim(l_h_CAUTOSETTHUWRK_STRUCT.h_main_cp,' ','R',temp,l_debug_info_ptr);
					strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_main_cp,temp);
                                  
                                        if (strlen(l_h_CAUTOSETTHUWRK_STRUCT.h_main_cp))
					   CO_Trim(l_h_CAUTOSETTHUWRK_STRUCT.h_main_cp,' ','L',temp,l_debug_info_ptr);
					strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_main_cp,temp);


					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
              	strncpy(l_h_CAUTOSETTHUWRK_STRUCT.h_sub_cp, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[20].h_widateh);
					strcat(l_h_CAUTOSETTHUWRK_STRUCT.h_sub_cp,"\0");

               if ((strcmp(l_h_CAUTOSETTHUWRK_STRUCT.h_main_cp,"0410") == 0) &&
		   						((strlen(l_h_CAUTOSETTHUWRK_STRUCT.h_sub_cp)==0) || (strcmp(l_h_CAUTOSETTHUWRK_STRUCT.h_sub_cp,"      ")==0)))
               {
                  CO_ProcMonitor(p_logfile, "cp_sub is null", NULL, NULL);
                  memset(chr_l_f_buf, NULL, BUFF_SIZE);
                  strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_sub_cp,"XXX");
						l_h_CAUTOSETTHUWRK_STRUCT.h_indicate='3';
						strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_failreas,"Cp_Sub is null");
               }
                                        if (strlen(l_h_CAUTOSETTHUWRK_STRUCT.h_sub_cp))
					   CO_Trim(l_h_CAUTOSETTHUWRK_STRUCT.h_sub_cp,' ','R',temp,l_debug_info_ptr);
					strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_sub_cp,temp);
                                    
                                        if (strlen(l_h_CAUTOSETTHUWRK_STRUCT.h_sub_cp))
					   CO_Trim(l_h_CAUTOSETTHUWRK_STRUCT.h_sub_cp,' ','L',temp,l_debug_info_ptr);
					strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_sub_cp,temp);


					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
               strncpy(chr_tempstr, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[i].h_widateh);
					strcat(chr_tempstr, "\0");
					sscanf(chr_tempstr,"%lf",&l_h_CAUTOSETTHUWRK_STRUCT.h_quantity_rec);

					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
               strncpy(chr_tempstr, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[i].h_widateh);
					strcat(chr_tempstr, "\0");
               sscanf(chr_tempstr,"%lf",&l_h_CAUTOSETTHUWRK_STRUCT.h_quantity_del);

					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
               strncpy(chr_tempstr, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[i].h_widateh);
					strcat(chr_tempstr, "\0");
               sscanf(chr_tempstr,"%lf",&l_h_CAUTOSETTHUWRK_STRUCT.h_deal_in);

					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
               strncpy(chr_tempstr, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[i].h_widateh);
					strcat(chr_tempstr, "\0");
               sscanf(chr_tempstr,"%lf",&l_h_CAUTOSETTHUWRK_STRUCT.h_deal_out);

					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
               strncpy(chr_tempstr, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[i].h_widateh);
					strcat(chr_tempstr, "\0");
					sscanf(chr_tempstr,"%lf",&l_h_CAUTOSETTHUWRK_STRUCT.h_otc_sf_quantity);

					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
               strncpy(chr_tempstr, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[i].h_widateh);
					strcat(chr_tempstr, "\0");
					sscanf(chr_tempstr,"%lf",&l_h_CAUTOSETTHUWRK_STRUCT.h_nominal_value);

					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
              	strncpy(l_h_CAUTOSETTHUWRK_STRUCT.h_partner_a, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[27].h_widateh);
					strcat(l_h_CAUTOSETTHUWRK_STRUCT.h_partner_a, "\0");

					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
               strncpy(chr_tempstr, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[i].h_widateh);
					strcat(chr_tempstr, "\0");
					sscanf(chr_tempstr,"%lf",&l_h_CAUTOSETTHUWRK_STRUCT.h_quantity1);

					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
              	strncpy(l_h_CAUTOSETTHUWRK_STRUCT.h_other_a, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[29].h_widateh);
					strcat(l_h_CAUTOSETTHUWRK_STRUCT.h_other_a, "\0");

					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
              	strncpy(l_h_CAUTOSETTHUWRK_STRUCT.h_partner_b, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[30].h_widateh);
					strcat(l_h_CAUTOSETTHUWRK_STRUCT.h_partner_b, "\0");

					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
               strncpy(chr_tempstr, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[i].h_widateh);
					strcat(chr_tempstr, "\0");
					sscanf(chr_tempstr,"%lf",&l_h_CAUTOSETTHUWRK_STRUCT.h_quantity2);

					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
              	strncpy(l_h_CAUTOSETTHUWRK_STRUCT.h_other_b, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[32].h_widateh);
					strcat(l_h_CAUTOSETTHUWRK_STRUCT.h_other_b, "\0");

					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
              	strncpy(l_h_CAUTOSETTHUWRK_STRUCT.h_partner_c, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[33].h_widateh);
					strcat(l_h_CAUTOSETTHUWRK_STRUCT.h_partner_c, "\0");

					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
               strncpy(chr_tempstr, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[i].h_widateh);
					strcat(chr_tempstr, "\0");
					sscanf(chr_tempstr,"%lf",&l_h_CAUTOSETTHUWRK_STRUCT.h_quantity3);
					i=i+1;

               chr_recordstr = chr_l_linebuf1 + l_h_CAUTOSETTHUFMT_STRUCT[i].h_start_safekeep_pos - 1;
              	strncpy(l_h_CAUTOSETTHUWRK_STRUCT.h_other_c, chr_recordstr, l_h_CAUTOSETTHUFMT_STRUCT[35].h_widateh);
					strcat(l_h_CAUTOSETTHUWRK_STRUCT.h_other_c, "\0");

					i=i+1;

					int_p_recno++;
					int_l_seqno=1;
					l_h_CAUTOSETTHUWRK_STRUCT.h_rec_no = int_p_recno;
					l_h_CAUTOSETTHUWRK_STRUCT.h_sequenceno = int_l_seqno;



	
				


					
               l_i_CAUTOSETTHUWRK_STRUCT.i_class=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_from_per=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_to_per=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_main_our=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_delclr_name=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_detail=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_sub_our=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_our_subclr_name=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_instr_code=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_instrlnt_clr_name=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_instr_sequence=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_instrclass=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_instr_text=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_instr_isin=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_stat_date=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_dealcode=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_txclr_name=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_indentity_no=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_info=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_main_cp=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_sub_cp=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_quantity_rec=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_quantity_del=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_deal_in=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_deal_out=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_otc_sf_quantity=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_nominal_value=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_partner_a=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_quantity1=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_other_a=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_partner_b=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_quantity2=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_other_b=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_partner_c=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_quantity3=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_other_c=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_indicate;
               l_i_CAUTOSETTHUWRK_STRUCT.i_reas=0;
               l_i_CAUTOSETTHUWRK_STRUCT.i_mismatch=0;

               DL_Prnt_AutoBrkConfRow(&l_h_CAUTOSETTHUWRK_STRUCT,p_logfile);



		int_l_int_acc=chr_value(l_h_CAUTOSETTHUWRK_STRUCT.h_sub_our);

		if (strcmp(l_h_CAUTOSETTHUWRK_STRUCT.h_main_cp,"0410") == 0)
			l_int_domcp=chr_value(l_h_CAUTOSETTHUWRK_STRUCT.h_sub_cp);

		sprintf(chr_l_str_temp,"%d",int_l_int_acc);
		switch(strlen(chr_l_str_temp))
		{

         case 4 : strcpy(chr_p_h_acc,chr_l_str_temp);
                  break;


			case 3 : strcpy(chr_p_h_acc,"0");
						strcat(chr_p_h_acc,chr_l_str_temp);
						break;
			
			case 2 : strcpy(chr_p_h_acc,"00");
						strcat(chr_p_h_acc,chr_l_str_temp);
						break;

			case 1 : strcpy(chr_p_h_acc,"000");
						strcat(chr_p_h_acc,chr_l_str_temp);
						break;

			case 0 : strcpy(chr_p_h_acc,"0000");
						break;

			default: strcpy(chr_p_h_acc,"****");
						break;
		}
	
		if (strcmp(l_h_CAUTOSETTHUWRK_STRUCT.h_main_cp,"0410") == 0)
		{
		sprintf(chr_l_str_temp,"%ld",l_int_domcp);
		switch(strlen(chr_l_str_temp))
		{

         case 4 : strcpy(chr_p_h_domcp,chr_l_str_temp);
                  break;


			case 3 : strcpy(chr_p_h_domcp,"0");
						strcat(chr_p_h_domcp,chr_l_str_temp);
						break;
			
			case 2 : strcpy(chr_p_h_domcp,"00");
						strcat(chr_p_h_domcp,chr_l_str_temp);
						break;

			case 1 : strcpy(chr_p_h_domcp,"000");
						strcat(chr_p_h_domcp,chr_l_str_temp);
						break;

			case 0 : strcpy(chr_p_h_domcp,"0000");
						break;

			default: strcpy(chr_p_h_domcp,"****");
						break;
		}
		}

		EXEC SQL select count(*) into :int_l_count 
					from MT_CLIENT where CLN_CLH=:chr_p_h_acc;
		IS_ANY_ORA_ERROR;

		if (int_l_count == 0)
		{
			l_h_CAUTOSETTHUWRK_STRUCT.h_indicate='3';
			strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_failreas,"Our/Sub Clearing Account not found");
 			memset(chr_l_buf, NULL, BUFF_SIZE);
      	sprintf(chr_l_buf, "Our/Sub Clearing Account not int_found for record no =%d",int_l_reccount );
   		CO_ProcMonitor(p_logfile, chr_l_buf,NULL, NULL);
		}
		else
		{
			if (strcmp(l_h_CAUTOSETTHUWRK_STRUCT.h_main_cp,"0410") == 0)
			{
			EXEC SQL select count(*) into :int_l_count 
						from MT_CLIENT where CLN_CLH=:chr_p_h_domcp;
			IS_ANY_ORA_ERROR;
			}
			else
				int_l_count = 1;
			if (int_l_count == 0)
			{
				l_h_CAUTOSETTHUWRK_STRUCT.h_indicate='3';
				strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_failreas,"CP Sub/Clearing Acc not found");
 				memset(chr_l_buf, NULL, BUFF_SIZE);
      		sprintf(chr_l_buf, "CP Sub/Clearing Acc not int_found for record no =%d",int_l_reccount );
   			CO_ProcMonitor(p_logfile, chr_l_buf,NULL, NULL);
			}
			else
			{
				if (strcmp(l_h_CAUTOSETTHUWRK_STRUCT.h_main_our,"0410")!=0)
				{
					l_h_CAUTOSETTHUWRK_STRUCT.h_indicate='3';
					strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_failreas,"Main Account not 0410");
 					memset(chr_l_buf, NULL, BUFF_SIZE);
      			sprintf(chr_l_buf, "Main Account not 0410 for record no =%d",int_l_reccount );
   				CO_ProcMonitor(p_logfile, chr_l_buf,NULL, NULL);
				}
				else if ((l_h_CAUTOSETTHUWRK_STRUCT.h_deal_in<=0) && 
							(l_h_CAUTOSETTHUWRK_STRUCT.h_deal_out>=0) &&
							(l_h_CAUTOSETTHUWRK_STRUCT.h_otc_sf_quantity==0))
				{
					l_h_CAUTOSETTHUWRK_STRUCT.h_indicate='3';
					strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_failreas,"Physical Transfer Trades");
 					memset(chr_l_buf, NULL, BUFF_SIZE);
      			sprintf(chr_l_buf, "Physical Transfer Trades for record no =%d",int_l_reccount );
   				CO_ProcMonitor(p_logfile, chr_l_buf,NULL, NULL);
				}
				else
				{
					EXEC SQL select instr_code INTO :p_instr_code from MT_INSTRUMENT 
								where MT_INSTRUMENT.INSTR_ISIN=:l_h_CAUTOSETTHUWRK_STRUCT.h_instr_isin;
      			if(APL_ZERO_RESULT_SET)
					{
						l_h_CAUTOSETTHUWRK_STRUCT.h_indicate='3';
						strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_failreas,"ISIN not found");
 						memset(chr_l_buf, NULL, BUFF_SIZE);
      				sprintf(chr_l_buf, "ISIN not int_found for record no =%d",int_l_reccount );
   					CO_ProcMonitor(p_logfile, chr_l_buf,NULL, NULL);
					}
					IS_ANY_ORA_ERROR;
				}

			}
		}



		if (l_h_CAUTOSETTHUWRK_STRUCT.h_indicate=='3')
		{
			l_h_CAUTOSETTHUWRK_STRUCT.h_rec_no=int_p_recno;
			l_h_CAUTOSETTHUWRK_STRUCT.h_sequenceno=1;
        	EXEC SQL INSERT INTO DL_AUTOSETTHUWRK VALUES
           		(:l_h_CAUTOSETTHUWRK_STRUCT:l_i_CAUTOSETTHUWRK_STRUCT);
			IS_ANY_ORA_ERROR;
		}
		else
		{

   EXEC SQL VAR chr_l_h_client_a IS STRING;
   EXEC SQL VAR chr_l_h_domcpac IS STRING;
   EXEC SQL VAR chr_l_h_instrcode_A IS STRING;
   EXEC SQL VAR chr_l_h_countacc_a IS STRING;
   EXEC SQL VAR chr_l_h_confdt IS STRING;
   EXEC SQL VAR chr_l_h_trade_status IS STRING;
   EXEC SQL VAR int_l_h_failcode IS STRING;
   EXEC SQL VAR chr_l_h_refno_A IS STRING;
   EXEC SQL VAR chr_l_h_brokerno IS STRING;
   EXEC SQL VAR chr_l_h_exarena IS STRING;
   EXEC SQL VAR chr_l_h_posn_status IS STRING;
   EXEC SQL VAR chr_l_h_trcode_a IS STRING;
   EXEC SQL VAR chr_l_h_access_stamp IS STRING;
   EXEC SQL VAR chr_temp_buffer IS STRING;

   EXEC SQL VAR chr_l_client_a IS STRING;
   EXEC SQL VAR chr_l_domcp IS STRING;
   EXEC SQL VAR chr_l_citibank_acct_code IS STRING;
  
   EXEC SQL VAR chr_l_actual_client IS STRING;
   EXEC SQL VAR chr_l_actual_refno IS STRING;

	EXEC SQL SELECT RTRIM(CUSTODY_CLT_CD) INTO :chr_l_citibank_acct_code
	FROM MT_CORE_SYS_PARAMS;
	IS_ANY_ORA_ERROR;

   EXEC SQL DECLARE gst_cursor_upl1 CURSOR FOR
   SELECT   RTRIM(client), RTRIM(domestic_cpclt), RTRIM(instr_code),
		RTRIM(cp_clt), VAL_FDT, DEAL_STAT, failreason_cd,
		RTRIM(IDENTIY_NO), ex_arena, COST, STATUS,
      QTY, deal_cd, access_stamp, brokercomm , BRK_NO
   FROM DL_DEAL
   WHERE INSTRUMENT_DT is NULL
   AND   VAL_FDT is not NULL
   AND   CLIENT IN
            (SELECT CLN_CODE
            FROM MT_CLIENT 
            WHERE RTRIM(CLN_CLH)=:chr_p_h_acc)
	AND INSTR_CODE=:p_instr_code
	AND QTY=:l_quantity
	AND VAL_FDT<=:l_h_CAUTOSETTHUWRK_STRUCT.h_from_per
	AND ((FAILREASON_CD IS NULL) OR FAILREASON_CD IN ('64','90'))
	AND DEAL_STAT<>'DU'
	AND	(
         	(DEAL_CD IN ('1','3') AND (:l_h_CAUTOSETTHUWRK_STRUCT.h_deal_out < 0
            	OR :l_h_CAUTOSETTHUWRK_STRUCT.h_otc_sf_quantity < 0))
            OR (DEAL_CD IN ('2','4') AND (:l_h_CAUTOSETTHUWRK_STRUCT.h_deal_in > 0
            	OR :l_h_CAUTOSETTHUWRK_STRUCT.h_otc_sf_quantity > 0))
        	)	
	ORDER BY CLIENT, INSTR_CODE
   FOR UPDATE OF access_stamp;

   if (strcmp(l_h_CAUTOSETTHUWRK_STRUCT.h_main_cp,"0410") == 0)
   {
		EXEC SQL DECLARE domcp_cursor1 CURSOR FOR 
		SELECT RTRIM(CLN_CODE) 
		FROM MT_CLIENT WHERE RTRIM(MT_CLIENT.CLN_CLH) = :chr_p_h_domcp;
   }
   else
   {
		EXEC SQL DECLARE domcp_cursor2 CURSOR FOR
		SELECT :l_h_CAUTOSETTHUWRK_STRUCT.h_main_cp
		FROM DUAL;
   }
	
	IS_ANY_ORA_ERROR;

	int_l_tradeprocessed = 0;
	int_l_no_of_trades = 0;
	strcpy(chr_l_actual_client,APL_NULL_STRING);
   	strcpy(chr_l_actual_refno,APL_NULL_STRING);


		if (l_h_CAUTOSETTHUWRK_STRUCT.h_deal_in>0)
			l_quantity = l_h_CAUTOSETTHUWRK_STRUCT.h_deal_in;

		else if (l_h_CAUTOSETTHUWRK_STRUCT.h_deal_out<0)
			l_quantity = (-1) * l_h_CAUTOSETTHUWRK_STRUCT.h_deal_out;

		else if (l_h_CAUTOSETTHUWRK_STRUCT.h_otc_sf_quantity>0)
			l_quantity = l_h_CAUTOSETTHUWRK_STRUCT.h_otc_sf_quantity;

		else if (l_h_CAUTOSETTHUWRK_STRUCT.h_otc_sf_quantity<0)
			l_quantity = (-1) * l_h_CAUTOSETTHUWRK_STRUCT.h_otc_sf_quantity;

			EXEC SQL OPEN gst_cursor_upl1;
			IS_ANY_ORA_ERROR;

			int_l_seqno=0;
			for (;;) 
			{
				EXEC SQL FETCH gst_cursor_upl1 INTO  :chr_l_h_client_a:l_i_account,
																:chr_l_h_domcpac:l_i_domcpac,
																:chr_l_h_instrcode_A:l_i_instr_code,
																:chr_l_h_countacc_a:l_i_countacc,
																:chr_l_h_confdt:l_i_confdt,
																:chr_l_h_trade_status:l_i_trade_status,
																:int_l_h_failcode:l_i_failcode,
                                          		:chr_l_h_refno_A:l_i_refno,
                                          		:chr_l_h_exarena:l_i_exarena,
                                          		:l_h_cost:l_i_price,
                                          		:chr_l_h_posn_status:l_i_posn_status,
                                          		:l_h_quantity_a:int_l_i_qty,
                                          		:chr_l_h_trcode_a:int_l_i_trcode,
                                          		:chr_l_h_access_stamp:l_i_access_stamp,
                                          		:l_h_brokercomm:l_i_brkcomm,
                                          		:chr_l_h_brokerno:l_i_brokerno;

				if (APL_ZERO_RESULT_SET)
					break;	

   				if (strcmp(l_h_CAUTOSETTHUWRK_STRUCT.h_main_cp,"0410") == 0) 
						EXEC SQL OPEN domcp_cursor1;
					else
						EXEC SQL OPEN domcp_cursor2;

					IS_ANY_ORA_ERROR;

					for (;;) 
					{
						strcpy(chr_l_domcp,APL_NULL_STRING);
						strcpy(chr_temp1,APL_NULL_STRING);
   					if (strcmp(l_h_CAUTOSETTHUWRK_STRUCT.h_main_cp,"0410") == 0) 
							EXEC SQL FETCH domcp_cursor1 INTO :chr_l_domcp;
   					else
						{
							EXEC SQL FETCH domcp_cursor2 INTO :chr_l_domcp;
							l_int_domcp = 0;
							l_int_domcp = chr_value(chr_l_domcp);
							sprintf(chr_l_domcp,"%ld",l_int_domcp);	
						}	
						if (APL_ZERO_RESULT_SET)
							break;	

						if (strcmp(chr_l_h_domcpac,chr_l_citibank_acct_code)==0)
							strcpy(chr_temp1,chr_l_h_countacc_a);
						else
							strcpy(chr_temp1,chr_l_h_domcpac);

 					memset(chr_l_buf, NULL, BUFF_SIZE);
      			sprintf(chr_l_buf, "The chr_value of cp_clt is %s\n",chr_l_h_countacc_a);
					CO_ProcMonitor(p_logfile, chr_l_buf,NULL, NULL);
      			sprintf(chr_l_buf, "The chr_value of domestic counterparty is %s\n",chr_l_h_domcpac);
      			sprintf(chr_l_buf, "The chr_value of dat h_file domestic_cpclt is %s\n",chr_l_domcp );
					memset(chr_l_buf, NULL, BUFF_SIZE);
   				CO_ProcMonitor(p_logfile, chr_l_buf,NULL, NULL);
						if (strcmp(chr_temp1,chr_l_domcp)==0)
						{

							int_l_no_of_trades++;
							int_l_seqno++;
							l_h_CAUTOSETTHUWRK_STRUCT.h_rec_no=int_p_recno;
							l_h_CAUTOSETTHUWRK_STRUCT.h_sequenceno=int_l_seqno;
							strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_actual_client,chr_l_h_client_a);
							strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_actual_indentity_no,chr_l_h_refno_A);

							if (VAL_DELIVER_DEAL(chr_l_h_trcode_a[0]))
         				{
            				strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_instr_text,"D");
            				strcat(l_h_CAUTOSETTHUWRK_STRUCT.h_instr_text,"\0");
         				}
         				else
         				{
            				strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_instr_text,"R");
            				strcat(l_h_CAUTOSETTHUWRK_STRUCT.h_instr_text,"\0");
         				}
							if (int_l_seqno==1)
								l_h_CAUTOSETTHUWRK_STRUCT.h_mismatch=0;
							else
								l_h_CAUTOSETTHUWRK_STRUCT.h_mismatch=1;
         		
							l_h_CAUTOSETTHUWRK_STRUCT.h_indicate=APL_NULL_CHAR;
							l_i_CAUTOSETTHUWRK_STRUCT.i_indicate=-1;

							EXEC SQL INSERT INTO DL_AUTOSETTHUWRK VALUES
         	   			(:l_h_CAUTOSETTHUWRK_STRUCT:l_i_CAUTOSETTHUWRK_STRUCT);
							IS_ANY_ORA_ERROR; 
							break;
						}

					} 

   					if (strcmp(l_h_CAUTOSETTHUWRK_STRUCT.h_main_cp,"0410") == 0) 
							EXEC SQL CLOSE domcp_cursor1;
   					else
							EXEC SQL CLOSE domcp_cursor2;
					IS_ANY_ORA_ERROR;
	            strcpy(chr_l_h_domcpac,APL_NULL_STRING);
					strcpy(chr_l_h_countacc_a,APL_NULL_STRING);

			} 

			EXEC SQL CLOSE gst_cursor_upl1;
			IS_ANY_ORA_ERROR;
			

		if (int_l_no_of_trades>1)
		{
 			memset(chr_l_buf, NULL, BUFF_SIZE);
      	sprintf(chr_l_buf, "%d trades int_found for record no =%d",int_l_no_of_trades,int_l_reccount );
   		CO_ProcMonitor(p_logfile, chr_l_buf,NULL, NULL);
		}
		if (int_l_no_of_trades==1)
		{
 			memset(chr_l_buf, NULL, BUFF_SIZE);
      	sprintf(chr_l_buf, "1 trade int_found for record no=%d",int_l_reccount );
   		CO_ProcMonitor(p_logfile, chr_l_buf, NULL, NULL);
		}
		if (int_l_no_of_trades==0)
		{
 			memset(chr_l_buf, NULL, BUFF_SIZE);
      	sprintf(chr_l_buf, "No trade int_found for record no=%d",int_l_reccount );
   		CO_ProcMonitor(p_logfile, chr_l_buf, NULL, NULL);
   		CO_ProcMonitor(p_logfile, "Mismatch Qty, Domcp/Already Settled/ConfDt Later", NULL, NULL);
			l_h_CAUTOSETTHUWRK_STRUCT.h_rec_no=int_p_recno;
			l_h_CAUTOSETTHUWRK_STRUCT.h_sequenceno=1;
			l_h_CAUTOSETTHUWRK_STRUCT.h_mismatch=0;

			l_h_CAUTOSETTHUWRK_STRUCT.h_indicate='3';
			if (strlen(l_h_CAUTOSETTHUWRK_STRUCT.h_failreas)==0)
			{	
				strcpy(l_h_CAUTOSETTHUWRK_STRUCT.h_failreas,"Mismatch Qty, Domcp/Already Settled/ConfDt Later");
			}

			EXEC SQL INSERT INTO DL_AUTOSETTHUWRK VALUES
         			(:l_h_CAUTOSETTHUWRK_STRUCT:l_i_CAUTOSETTHUWRK_STRUCT);
			IS_ANY_ORA_ERROR; 
		}


		}
         if (!(int_l_reccount%COMMITSIZE))
         {
            
	
            memset(chr_l_f_buf, NULL, BUFF_SIZE);
            sprintf(chr_l_f_buf, "Processed %d Records", int_l_reccount);
				CO_ProcMonitor(p_logfile,chr_l_f_buf,NULL,NULL);

            EXEC SQL UPDATE SYS_BATCHPROC
            SET STAT_DET = :chr_l_f_buf
            WHERE PROCESS_NAME=:argv[0]
            AND   PROC_INIT=:argv[1]
            AND   STARTDATE=:argv[2]
            AND   STATUS='started';

            EXEC SQL COMMIT WORK;
            IS_ANY_ORA_ERROR

            CO_ProcMonitor(p_logfile, "Record Committed", NULL, NULL);

            EXEC SQL SELECT PROCESSING_STATUS into :l_temp_processing_status
            FROM SYS_BATCHPROC
            WHERE PROCESS_NAME=:argv[0]
            AND   PROC_INIT=:argv[1]
            AND   STARTDATE=:argv[2]
            AND   STATUS='started'
            FOR UPDATE OF PROCESSING_STATUS,STATUS;

            IS_ANY_ORA_ERROR

            if(APL_ZERO_RESULT_SET)
            {
               CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
               APL_GOBACK_FAIL
            }

				

				EXEC SQL SELECT TYPEOF_FILE into :l_temp_type  
							FROM DL_AUTOSETTHUFMT WHERE FIELD_NAME='type'
					  FOR UPDATE NOWAIT ;
				IS_ANY_ORA_ERROR; 


			
			
			}
		} 
  		CO_ProcMonitor(p_logfile,"After the loop for reading the upload file",NULL,NULL);
      memset(chr_l_f_buf, NULL, BUFF_SIZE);
      sprintf(chr_l_f_buf, "Processed %d Records", int_l_reccount);
  		CO_ProcMonitor(p_logfile,chr_l_f_buf,NULL,NULL);

		

      EXEC SQL UPDATE SYS_BATCHPROC
      SET STAT_DET = :chr_l_f_buf
      WHERE PROCESS_NAME=:argv[0]
      AND   PROC_INIT=:argv[1]
      AND   STARTDATE=:argv[2]
      AND   STATUS='started';

      EXEC SQL COMMIT WORK;
      IS_ANY_ORA_ERROR

      CO_ProcMonitor(p_logfile, "Record Committed", NULL, NULL);

		

	if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr)) APL_GOBACK_FAIL

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :

		free(temp);
		fclose(l_feedfile);
		memset(chr_l_f_buf, NULL, BUFF_SIZE);
		sprintf(chr_l_f_buf, "Processed %d Records", int_l_reccount);

		CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);
		
		EXEC SQL UPDATE SYS_BATCHPROC
		SET STAT_DET = :chr_l_f_buf
  	 	WHERE PROCESS_NAME=:argv[0]
  	  	AND   PROC_INIT=:argv[1]
  	  	AND   STARTDATE=:argv[2]
  	  	AND   STATUS='completed';

      EXEC SQL COMMIT WORK;
      IS_ANY_ORA_ERROR

		CO_ProcMonitor(p_logfile, "Record Committed", NULL, NULL);

		CO_ProcMonitor(	p_logfile,
						"Leaving Function DL_Proc_AutoBrkSettleUpload with Success\n",
						NULL,
						NULL);
		return(APL_SUCCESS);

	RETURN_FAILURE :
		free(temp);
		fclose(l_feedfile);
		CO_ProcMonitor(	p_logfile,
						"Got Errors : ",
						l_debug_info_ptr,
						p_intl_envdatastruct_h );
		CO_FreeErrLst(l_debug_info_ptr);

		CO_ProcMonitor(	p_logfile,
						"Leaving Function DL_Proc_AutoBrkSettleUpload with Errors\n",
						NULL,
						NULL);
		return(APL_FAILURE);
}


int DL_Prnt_AutoBrkSettleRow(DL_DEAL_SSTDET_STRUCT_H *p_dl_deal_sstdet_struct_h, FILE *p_logfile)
{
   char     chr_l_f_buf[BUFF_SIZE]                     = APL_NULL_STRING;
   CO_ProcMonitor(p_logfile,"..... Passing Record to Single settlement Function .... ",NULL,NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "account is |%s|",p_dl_deal_sstdet_struct_h->h_dl_client);
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "refno is |%s|",p_dl_deal_sstdet_struct_h->h_indentity_no);
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "ispartial is |%s|",p_dl_deal_sstdet_struct_h->h_ispart_);
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "newqty is |%lf|",p_dl_deal_sstdet_struct_h->h_newquantity);
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "newamt is |%lf|",p_dl_deal_sstdet_struct_h->h_newamount);
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "newrefno is |%s|",p_dl_deal_sstdet_struct_h->h_newindentity_no);
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "instr_dt is |%s|",p_dl_deal_sstdet_struct_h->h_instrdate);
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "moneydt is |%s|",p_dl_deal_sstdet_struct_h->h_moneydate);
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "price is |%f|",p_dl_deal_sstdet_struct_h->h_pr);   //AIX - Warnings Removal
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "brkcomm is |%f|",p_dl_deal_sstdet_struct_h->h_brokercomm);  //AIX-Warnings Removal
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "selforreg is |%s|",p_dl_deal_sstdet_struct_h->h_sel_forreg);
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "pendregqty is |%lf|",p_dl_deal_sstdet_struct_h->h_pendregquantity);
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "marktrfqty is |%lf|",p_dl_deal_sstdet_struct_h->h_marktrfquantity);
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "recint000 is |%lf|",p_dl_deal_sstdet_struct_h->h_rec_int_000);
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "mcomplqty is |%lf|",p_dl_deal_sstdet_struct_h->h_mcomplquantity);
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "delfrm000 is |%lf|",p_dl_deal_sstdet_struct_h->h_delta_000);
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "delfrm001 is |%lf|",p_dl_deal_sstdet_struct_h->h_delta_001);
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "delfrm003 is |%lf|",p_dl_deal_sstdet_struct_h->h_delta_002);
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         sprintf(chr_l_f_buf, "access_stamp is |%s|",p_dl_deal_sstdet_struct_h->h_access_stamp);
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

      return(APL_SUCCESS);//AIX -Warning Removal
}


int DL_Prnt_AutoBrkConfRow (CAUTOSETTHUWRK_STRUCT_H  *p_h_cautosetthuwrk_struct, FILE *p_logfile)
{
	char		chr_l_f_buf[BUFF_SIZE]							= APL_NULL_STRING;
	CO_ProcMonitor(p_logfile,"..... Inserting Record into CAUTOSETTHUWRK ..... ",NULL,NULL);
			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "type is |%s|",p_h_cautosetthuwrk_struct->h_class);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);
			
			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "per_from is |%s|",p_h_cautosetthuwrk_struct->h_from_per);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "per_to is |%s|",p_h_cautosetthuwrk_struct->h_to_per);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "our_main is |%s|",p_h_cautosetthuwrk_struct->h_main_our);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "del_name is |%s|",p_h_cautosetthuwrk_struct->h_delclr_name);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "desc is |%s|",p_h_cautosetthuwrk_struct->h_detail);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "our_sub is |%s|",p_h_cautosetthuwrk_struct->h_sub_our);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "our_subname is |%s|",p_h_cautosetthuwrk_struct->h_our_subclr_name);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "instr_code is |%s|",p_h_cautosetthuwrk_struct->h_instr_code);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "instr_name is |%s|",p_h_cautosetthuwrk_struct->h_instrlnt_clr_name);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "instrseq is |%s|",p_h_cautosetthuwrk_struct->h_instr_sequence);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "typeofinstr is |%d|",p_h_cautosetthuwrk_struct->h_instrclass);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "instrtext is |%s|",p_h_cautosetthuwrk_struct->h_instr_text);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "isin is |%s|",p_h_cautosetthuwrk_struct->h_instr_isin);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "stat_dt is |%s|",p_h_cautosetthuwrk_struct->h_stat_date);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "txncode is |%s|",p_h_cautosetthuwrk_struct->h_dealcode);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "txname is |%s|",p_h_cautosetthuwrk_struct->h_txclr_name);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "refno is |%s|",p_h_cautosetthuwrk_struct->h_indentity_no);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "note is |%s|",p_h_cautosetthuwrk_struct->h_info);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "cp_main is |%s|",p_h_cautosetthuwrk_struct->h_main_cp);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "cp_sub is |%s|",p_h_cautosetthuwrk_struct->h_sub_cp  );
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);						

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "qty_rec is |%lf|",p_h_cautosetthuwrk_struct->h_quantity_rec  );
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "qty_del is |%lf|",p_h_cautosetthuwrk_struct->h_quantity_del  );
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "trans_in is |%lf|",p_h_cautosetthuwrk_struct->h_deal_in  );
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "trans_out is |%lf|",p_h_cautosetthuwrk_struct->h_deal_out  );
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "otc_sf_qty is |%lf|",p_h_cautosetthuwrk_struct->h_otc_sf_quantity  );
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "nomval is |%lf|",p_h_cautosetthuwrk_struct->h_nominal_value  );
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "partner1 is |%s|",p_h_cautosetthuwrk_struct->h_partner_a  );
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "qty1 is |%lf|",p_h_cautosetthuwrk_struct->h_quantity1  );
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "other1 is |%s|",p_h_cautosetthuwrk_struct->h_other_a  );
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "partner2 is |%s|",p_h_cautosetthuwrk_struct->h_partner_b  );
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "qty2 is |%lf|",p_h_cautosetthuwrk_struct->h_quantity2  );
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "other2 is |%s|",p_h_cautosetthuwrk_struct->h_other_b  );
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "partner3 is |%s|",p_h_cautosetthuwrk_struct->h_partner_c  );
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "qty3 is |%lf|",p_h_cautosetthuwrk_struct->h_quantity3  );
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "other3 is |%s|",p_h_cautosetthuwrk_struct->h_other_c  );
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "indicator is |%c|",p_h_cautosetthuwrk_struct->h_indicate  );//AIX -Warning Removal
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "reason is |%s|",p_h_cautosetthuwrk_struct->h_failreas  );
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

         memset(chr_l_f_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_f_buf, "conflict is |%d|",p_h_cautosetthuwrk_struct->h_mismatch  );
         CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

return(APL_SUCCESS);   // AIX-Warnings Removal
}

int chr_value(char *f_string)
{
	int int_l_digit = 1;
	char *int_l_temp;
	int_l_temp=f_string;

	for(;((*f_string)!='\0') && (int_l_digit==1);f_string++)
		if (((*f_string)!='0') &&
			 ((*f_string)!='1') &&
			 ((*f_string)!='2') &&
			 ((*f_string)!='3') &&
			 ((*f_string)!='4') &&
			 ((*f_string)!='5') &&
			 ((*f_string)!='6') &&
			 ((*f_string)!='7') &&
			 ((*f_string)!='8') &&
			 ((*f_string)!='9'))
			int_l_digit=0;

	if (int_l_digit==0)
		return(0);
	else
		return(atoi(int_l_temp));
}

int CDBAutoSettHU(char **argv, FILE *p_logfile,
						INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	char chr_l_client_a[APL_CLIENT_LENGTH]=APL_NULL_STRING;
	char chr_l_domcp[APL_DOMCPAC_LEN]=APL_NULL_STRING;
	char chr_l_instrcode_a[APL_INSTRUMENTCODE_LEN]=APL_NULL_STRING;
	char chr_l_rowid_A[APL_ROWID_LEN]=APL_NULL_STRING;
	char chr_l_buf[BUFF_SIZE]=APL_NULL_STRING;
	char chr_temp_buffer[APL_MAXREASON_SIZE]=APL_NULL_STRING;
	char l_temp_type[11]=APL_NULL_STRING;
	char l_temp_processing_status[51]=APL_NULL_STRING;
	char temp[APL_MAXLINE_SIZE]=APL_NULL_STRING;
	char **chr_temp1;
	char **chr_l_recordstr;
	char **chr_l_fieldstr;

   char     chr_l_h_client_a[APL_CLIENT_LENGTH]        = APL_NULL_STRING;
   char     chr_l_h_refno_A[APL_TXNREFNO_LEN]         = APL_NULL_STRING;
   char     chr_l_h_exarena[EX_ARENA_LEN]          = APL_NULL_STRING;
   char     chr_l_h_posn_status[STATUS_POS_LEN]  = APL_NULL_STRING;
   char     chr_l_h_trcode_a[APL_FLAG_LENGTH]            = APL_NULL_STRING;
   char     chr_l_trd_status[APL_STATUS_LEN]        = APL_NULL_STRING;
   char     chr_l_h_access_stamp[APL_DATE_LEN]      = APL_NULL_STRING;
   char     chr_l_actual_setl_dt[APL_DATE_LEN]      = APL_NULL_STRING;
   char     chr_l_h_brokerno[BRK_CD_LEN]        = APL_NULL_STRING;
   char     chr_l_h_verwith[VERIFIED_WITH_LEN]        	= APL_NULL_STRING;
   char     chr_l_h_domicile[DOMICILE_LEN_A]       	= APL_NULL_STRING;
	char		chr_l_h_moneydt[APL_DATE_LEN]				= APL_NULL_STRING;
	char 		chr_l_h_actual_client[APL_CLIENT_LENGTH] = APL_NULL_STRING;
	char 		chr_l_h_actual_refno[APL_TXNREFNO_LEN]  = APL_NULL_STRING;
	char 		chr_l_h_per_from[APL_DATE_LEN]				= APL_NULL_STRING;
	char 		chr_l_h_instrtext[APL_FLAG_LENGTH]         	= APL_NULL_STRING;

   int      int_l_reccount                          = 0;
   int      int_l_datediff                          = 0;
	int		int_l_tradefound								= 0;
	int		int_num											= 0;
	int		int_l_no_of_fields								= 0;
	int		i												= 0;
	int		int_l_int_recno									= 0;
	int		int_l_int_seqno									= 0;


   double   l_h_cost                           = 0.0;
   double   l_h_quantity_a                             = 0.0;
   double   l_h_brokercomm                         = 0.0;

	double	l_quantity											= 0.0;
	double 	l_h_deal_out 								= 0.0;
	double 	l_h_deal_in  								= 0.0;
	double 	l_h_otc_sf_quantity   							= 0.0;

   short    l_i_account                         = 0;
   short    l_i_refno                           = 0;
   short    l_i_exarena                         = 0;
   short    l_i_posn_status                     = 0;
   short    int_l_i_trcode                          = 0;
   short    l_i_access_stamp                    = 0;
   short    l_i_price                           = 0;
   short    int_l_i_qty                             = 0;
   short    l_i_brkcomm                         = 0;
   short    l_i_brokerno                        = 0;
   short    l_i_verwith	                        = 0;
   short    l_i_domicile                        = 0;
	short 	l_i_moneydt									= 0;
	short 	l_i_rowid									= 0;
	short 	l_i_actual_account 						= 0;
	short 	l_i_actual_refno							= 0;
	short 	l_i_per_from								= 0;
	short 	l_i_trans_out        					= 0;
   short 	l_i_trans_in         					= 0;
   short 	l_i_otc_sf_qty       					= 0;
   short 	l_i_instrtext        						= 0;

	CAUTOSETTHUWRK_STRUCT_H	l_h_CAUTOSETTHUWRK_STRUCT;
	CAUTOSETTHUWRK_STRUCT_I	l_i_CAUTOSETTHUWRK_STRUCT;

	DL_DEAL_SSTDET_STRUCT_H  *l_deal_sstdet_struct_h        = NULL;

	l_deal_sstdet_struct_h = (DL_DEAL_SSTDET_STRUCT_H *)calloc(1, sizeof(DL_DEAL_SSTDET_STRUCT_H));
   APL_MALLOC_FAIL(l_deal_sstdet_struct_h);

   EXEC SQL VAR chr_l_h_client_a IS STRING;
   EXEC SQL VAR chr_l_h_refno_A IS STRING;
   EXEC SQL VAR chr_l_h_brokerno IS STRING;
   EXEC SQL VAR chr_l_h_exarena IS STRING;
   EXEC SQL VAR chr_l_h_posn_status IS STRING;
   EXEC SQL VAR chr_l_h_trcode_a IS STRING;
   EXEC SQL VAR chr_l_h_access_stamp IS STRING;
   EXEC SQL VAR chr_temp_buffer IS STRING;

   EXEC SQL VAR chr_l_client_a IS STRING;
   EXEC SQL VAR chr_l_domcp IS STRING;
   EXEC SQL VAR chr_l_instrcode_a IS STRING;
   EXEC SQL VAR chr_l_rowid_A IS STRING;

   EXEC SQL VAR chr_l_h_verwith IS STRING;
   EXEC SQL VAR chr_l_h_domicile IS STRING;
	EXEC SQL VAR chr_l_h_moneydt IS STRING;

   EXEC SQL VAR chr_l_h_actual_client IS STRING;
   EXEC SQL VAR chr_l_h_actual_refno IS STRING;
   EXEC SQL VAR chr_l_h_per_from IS STRING;

	memset(chr_l_h_verwith,'\0',VERIFIED_WITH_LEN);
	memset(chr_l_h_domicile,'\0',DOMICILE_LEN_A);

	CO_ProcMonitor(p_logfile, "Entered CDBAutoSettHU function", l_debug_info_ptr, p_intl_envdatastruct_h);
   if (APL_FAILURE == CO_SplitStr( argv[9],
                                    '|',
                                    &int_num,
                                    &chr_temp1 ))
   {
		CO_ProcMonitor(p_logfile, "\n\tString split processtion failed\n", l_debug_info_ptr, p_intl_envdatastruct_h);
      APL_GOBACK_FAIL
   }

	memset(chr_l_buf, NULL, BUFF_SIZE);
	sprintf(chr_l_buf, "All record string %s", chr_temp1[3]);
	CO_ProcMonitor(p_logfile, chr_l_buf, l_debug_info_ptr, p_intl_envdatastruct_h);

	if (strlen(chr_temp1[3])>0)
	{
		if (APL_FAILURE == CO_SplitStr( chr_temp1[3],
                                       ':',
                                       &int_num,
                                       &chr_l_recordstr ))
      {
				CO_ProcMonitor(p_logfile, "\n\tString split processtion failed\n", l_debug_info_ptr, p_intl_envdatastruct_h);
            APL_GOBACK_FAIL
      }

		 

		memset(chr_l_buf, NULL, BUFF_SIZE);
		sprintf(chr_l_buf, "Total records with conflicts:%d", int_num);
		CO_ProcMonitor(p_logfile, chr_l_buf, l_debug_info_ptr, p_intl_envdatastruct_h);

		if (int_num > 0)
		{
			for (i=0;i<int_num;i++)
			{
      		if (APL_FAILURE == CO_SplitStr( chr_l_recordstr[i],
           		                            ',',
              		                         &int_l_no_of_fields,
                 		                      &chr_l_fieldstr ))
      		{
					 CO_ProcMonitor(p_logfile, "\n\tString split processtion failed\n", l_debug_info_ptr, p_intl_envdatastruct_h);
         		 APL_GOBACK_FAIL
      		}

				memset(chr_l_buf, NULL, BUFF_SIZE);
				sprintf(chr_l_buf, "%s", chr_l_recordstr[i]);
				CO_ProcMonitor(p_logfile, chr_l_buf, l_debug_info_ptr, p_intl_envdatastruct_h);

				
				
				int_l_int_recno=atoi(chr_l_fieldstr[0]);
				int_l_int_seqno=atoi(chr_l_fieldstr[1]);


				EXEC SQL DELETE DL_AUTOSETTHUWRK
							WHERE REC_NO=:int_l_int_recno AND
									IDEN_NO<>:int_l_int_seqno;
				IS_ANY_ORA_ERROR; 

				EXEC SQL UPDATE DL_AUTOSETTHUWRK SET MISMATCH=0
							WHERE REC_NO=:int_l_int_recno AND
									IDEN_NO=:int_l_int_seqno;				
				IS_ANY_ORA_ERROR;
				
				
			}
	      IS_ANY_ORA_ERROR;

			memset(chr_l_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_buf, "Records Committed:%d", int_num);
			CO_ProcMonitor(p_logfile, chr_l_buf, l_debug_info_ptr, p_intl_envdatastruct_h);
		}
	}
		 

	EXEC SQL DECLARE wrk_cursor CURSOR FOR 
	

	SELECT ACT_CLT,ACT_IDENTITYNO,FROM_PER,DEAL_IN,DEAL_OUT,OTC_POS,INSTR_TEXT,ROWID FROM DL_AUTOSETTHUWRK WHERE INDICATOR IS NULL ORDER BY INSTR_TEXT DESC;

	IS_ANY_ORA_ERROR;
	
   EXEC SQL DECLARE gst_cursor CURSOR FOR
   SELECT   RTRIM(client), RTRIM(IDENTIY_NO), ex_arena, COST, STATUS,
            QTY, deal_cd, access_stamp, brokercomm , BRK_NO , VERFIED_WITH, MONEY_SETL_DT
   FROM DL_DEAL
   WHERE CLIENT=:chr_l_h_actual_client
		AND IDENTIY_NO=:chr_l_h_actual_refno
   FOR UPDATE OF access_stamp;

	EXEC SQL OPEN wrk_cursor;
	IS_ANY_ORA_ERROR;

	int_l_tradefound = 1;
	
	CO_ProcMonitor(p_logfile, "Entering the work table loop", l_debug_info_ptr, p_intl_envdatastruct_h);
	for (;;)  
	{
		if (int_l_tradefound == 0)
		{
			int_l_tradefound = 1;

			memset(chr_l_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_buf, "Trade Not Found for client:%s, refno:%s", chr_l_h_actual_client, chr_l_h_actual_refno); 
			CO_ProcMonitor(p_logfile, chr_l_buf, l_debug_info_ptr, p_intl_envdatastruct_h);

         EXEC SQL UPDATE DL_AUTOSETTHUWRK
            SET   INDICATOR='3',
                  REAS='Trade Not Found'
				WHERE ROWID=:chr_l_rowid_A;
         IS_ANY_ORA_ERROR;
		}
		memset(&l_h_CAUTOSETTHUWRK_STRUCT, NULL, sizeof(CAUTOSETTHUWRK_STRUCT_H));
		
		EXEC SQL FETCH wrk_cursor INTO  :chr_l_h_actual_client:l_i_actual_account,:chr_l_h_actual_refno:l_i_actual_refno,:chr_l_h_per_from:l_i_per_from,:l_h_deal_out:l_i_trans_out,:l_h_deal_in:l_i_trans_in,:l_h_otc_sf_quantity:l_i_otc_sf_qty,:chr_l_h_instrtext:l_i_instrtext,:chr_l_rowid_A:l_i_rowid;
		IS_ANY_ORA_ERROR;
		memset(chr_l_buf,NULL,BUFF_SIZE);
		sprintf(chr_l_buf, "Actual Account is : %s\n, Actual Refno:%s\n", chr_l_h_actual_client,chr_l_h_actual_refno);
		CO_ProcMonitor(p_logfile, chr_l_buf, l_debug_info_ptr, p_intl_envdatastruct_h);
		if (APL_ZERO_RESULT_SET)
			break;

		EXEC SQL OPEN gst_cursor;
		IS_ANY_ORA_ERROR;
	
                
                memset(chr_l_h_client_a, APL_NULL_CHAR, APL_CLIENT_LENGTH);
                memset(chr_l_h_refno_A, APL_NULL_CHAR, APL_TXNREFNO_LEN);
                memset(chr_l_h_exarena,APL_NULL_CHAR,EX_ARENA_LEN);
                memset(chr_l_h_trcode_a,APL_NULL_CHAR,APL_FLAG_LENGTH);
                memset(chr_l_h_access_stamp,APL_NULL_CHAR,APL_DATE_LEN);
                memset(chr_l_h_brokerno, APL_NULL_CHAR, BRK_CD_LEN);
                memset(chr_l_h_verwith, APL_NULL_CHAR, VERIFIED_WITH_LEN);
                memset(chr_l_h_moneydt, APL_NULL_CHAR,APL_DATE_LEN);
                printf("TRqdes to be fteched\n");
                fflush(stdout);
		
		EXEC SQL FETCH gst_cursor INTO      :chr_l_h_client_a:l_i_account,
                                      		:chr_l_h_refno_A:l_i_refno,
                                      		:chr_l_h_exarena:l_i_exarena,
                                      		:l_h_cost:l_i_price,
                                      		:chr_l_h_posn_status:l_i_posn_status,
                                      		:l_h_quantity_a:int_l_i_qty,
                                      		:chr_l_h_trcode_a:int_l_i_trcode,
                                      		:chr_l_h_access_stamp:l_i_access_stamp,
                                      		:l_h_brokercomm:l_i_brkcomm,
                                      		:chr_l_h_brokerno:l_i_brokerno,
                                      		:chr_l_h_verwith:l_i_verwith,
														:chr_l_h_moneydt:l_i_moneydt;

														 CO_ProcMonitor(p_logfile,"7\n",NULL,NULL);

		if (APL_ZERO_RESULT_SET)
		{
			int_l_tradefound = 0;
			continue;
		}
               
                printf("TTTrades are fetched \n");
                fflush(stdout);
		memset(chr_l_buf, NULL, BUFF_SIZE);
		sprintf(chr_l_buf, "Trade Found for client:%s, refno:%s", chr_l_h_actual_client, chr_l_h_actual_refno); 
		CO_ProcMonitor(p_logfile, chr_l_buf, l_debug_info_ptr, p_intl_envdatastruct_h);

   	EXEC SQL CLOSE gst_cursor;
		IS_ANY_ORA_ERROR;

		memset(l_deal_sstdet_struct_h, NULL, sizeof(DL_DEAL_SSTDET_STRUCT_H));
		strcpy(l_deal_sstdet_struct_h->h_dl_client, chr_l_h_client_a);
		strcpy(l_deal_sstdet_struct_h->h_indentity_no, chr_l_h_refno_A);
		strcpy(l_deal_sstdet_struct_h->h_ispart_, "N");
      l_deal_sstdet_struct_h->h_newquantity = 0.0;
 		l_deal_sstdet_struct_h->h_newamount = 0.0;
		strcpy(l_deal_sstdet_struct_h->h_newindentity_no, APL_NULL_STRING);
 		strcpy(l_deal_sstdet_struct_h->h_instrdate,chr_l_h_per_from);

		if (!strlen(chr_l_h_moneydt))
		{
		
			if (VAL_VP_DEAL(chr_l_h_trcode_a[0]))
			{
 				strcpy(l_deal_sstdet_struct_h->h_moneydate,chr_l_h_per_from);
			}
			else
			{
				strcpy(l_deal_sstdet_struct_h->h_moneydate,APL_NULL_STRING);
			}
		}
		else
				strcpy(l_deal_sstdet_struct_h->h_moneydate,APL_NULL_STRING);
		

		EXEC SQL SELECT CLN_DOMICILE INTO :chr_l_h_domicile:l_i_domicile FROM MT_CLIENT WHERE CLN_CODE = :chr_l_h_client_a ;

		IS_ANY_ORA_ERROR
		fprintf(p_logfile, "l_h_verwith=%s\n",chr_l_h_verwith);
		fprintf(p_logfile, "l_h_domicile=%s\n",chr_l_h_domicile);

			
		if( !strcmp(chr_l_h_verwith,VERIFIED_WITH_EPT) )
		{ 
		  if( strcmp(chr_l_h_domicile,DOMICILE_FORG_IND) )
			strcpy(l_deal_sstdet_struct_h->h_moneydate,APL_NULL_STRING);
		}
		
		fprintf(p_logfile, "l_sst_struct->h_moneydate=%s\n",l_deal_sstdet_struct_h->h_moneydate);
		
							
	   l_deal_sstdet_struct_h->h_pr = l_h_cost;
		l_deal_sstdet_struct_h->h_brokercomm = l_h_brokercomm;
		if (l_mt_core_sys_params_struct_h.proc_reg_ind[0] == 'Y')
		{
			if (VAL_DELIVER_DEAL(chr_l_h_trcode_a[0]))
		   {
		   	strcpy(l_deal_sstdet_struct_h->h_sel_forreg, APL_NULL_STRING);
		   	if (!strcmp(chr_l_h_posn_status, STATUS_POS_000))
		   	{
		   		l_deal_sstdet_struct_h->h_delta_000 = l_h_quantity_a;
		   	}
		   	else if (!strcmp(chr_l_h_posn_status, STATUS_POS_001))
		   	{
		   		l_deal_sstdet_struct_h->h_delta_001 = l_h_quantity_a;
		   	}
		   	else if (!strcmp(chr_l_h_posn_status, STATUS_POS_003))
		   	{
		   		l_deal_sstdet_struct_h->h_delta_002 = l_h_quantity_a;
		   	}
		   	else
		   	{
		      	CO_InsertErr(   l_debug_info_ptr,
		         	               ERR_DATA_INTEGRITY,
		                        	chr_l_h_client_a,
		                        	chr_l_h_refno_A,
		                        	"DeliverTrd:posn",
		                        	__LINE__,
		                        	__FILE__ );
		      	APL_GOBACK_FAIL
		   	}
			}
			else 
			{
		   	strcpy(l_deal_sstdet_struct_h->h_sel_forreg, "N");
		   	if (!strcmp(chr_l_h_posn_status, STATUS_POS_000))
		   	{
		      	l_deal_sstdet_struct_h->h_pendregquantity = 0.0;
		      	l_deal_sstdet_struct_h->h_marktrfquantity = 0.0;
		      	l_deal_sstdet_struct_h->h_mcomplquantity  = 0.0;
		      	l_deal_sstdet_struct_h->h_rec_int_000  = 0.0;
		   	}
		   	else
		   	{
		      	l_deal_sstdet_struct_h->h_pendregquantity = 0.0;
		      	l_deal_sstdet_struct_h->h_marktrfquantity = 0.0;
		      	l_deal_sstdet_struct_h->h_mcomplquantity  = l_h_quantity_a;
		      	l_deal_sstdet_struct_h->h_rec_int_000  = 0.0;
		   	}
			}
		}
		else
	   {
	      strcpy(l_deal_sstdet_struct_h->h_sel_forreg, APL_NULL_STRING);
	      l_deal_sstdet_struct_h->h_pendregquantity = 0.0;
	      l_deal_sstdet_struct_h->h_marktrfquantity = 0.0;
	      l_deal_sstdet_struct_h->h_mcomplquantity  = 0.0;
	      l_deal_sstdet_struct_h->h_rec_int_000  = 0.0;
	      l_deal_sstdet_struct_h->h_delta_000  = 0.0;
	      l_deal_sstdet_struct_h->h_delta_001  = 0.0;
	      l_deal_sstdet_struct_h->h_delta_002  = 0.0;
	   }
					
	   strcpy(l_deal_sstdet_struct_h->h_access_stamp, chr_l_h_access_stamp);
	
	   
    	DL_Prnt_AutoBrkSettleRow(l_deal_sstdet_struct_h, p_logfile);

		

	   if (APL_FAILURE == DL_Proc_DLSetlSing(  l_deal_sstdet_struct_h,
                                          APL_NULL_STRING,
	                                       p_intl_envdatastruct_h,
	                                       l_debug_info_ptr ))
      {
         IS_ANY_ERROR_FATAL
         IS_ANY_ORA_ERROR;
         memset(chr_l_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_buf, "\nFAILED TO SETTLE TRADE %s, %s", chr_l_h_client_a, chr_l_h_refno_A);
         CO_ProcMonitor(p_logfile, chr_l_buf, l_debug_info_ptr, p_intl_envdatastruct_h);

         memset(chr_temp_buffer,NULL,APL_MAXREASON_SIZE);
         strcpy(chr_temp_buffer,(*l_debug_info_ptr)->msg);
			strcat(chr_temp_buffer,"\0");
         CO_ProcMonitor(p_logfile, chr_temp_buffer, l_debug_info_ptr, p_intl_envdatastruct_h);

         EXEC SQL UPDATE DL_AUTOSETTHUWRK
            SET INDICATOR='3', 
                  REAS=:chr_temp_buffer
				WHERE ROWID=:chr_l_rowid_A;

         IS_ANY_ORA_ERROR;

         CO_FreeErrLst(l_debug_info_ptr);
      }
      else
      {
         memset(chr_l_buf, NULL, BUFF_SIZE);
         sprintf(chr_l_buf, "\nSETTLED TRADE %s, %s", chr_l_h_client_a, chr_l_h_refno_A);
         CO_ProcMonitor(p_logfile, chr_l_buf, NULL, p_intl_envdatastruct_h);
					
         memset(chr_temp_buffer,NULL,APL_MAXREASON_SIZE);
         strcpy(chr_temp_buffer,"Settled Trade with success ");
					
         EXEC SQL UPDATE DL_AUTOSETTHUWRK
            SET   INDICATOR='0',
                  REAS=:chr_temp_buffer
				WHERE ROWID=:chr_l_rowid_A;
					
         IS_ANY_ORA_ERROR;
      }

      ++int_l_reccount;
      if (!int_l_reccount%COMMITSIZE) /* Bageshri -- 10GM */
		{
        

        memset(chr_l_buf, NULL, BUFF_SIZE);
        sprintf(chr_l_buf, "Processed %d Records", int_l_reccount);
        CO_ProcMonitor(p_logfile, chr_l_buf,NULL, NULL);

        EXEC SQL UPDATE SYS_BATCHPROC
        SET STAT_DET = :chr_l_buf
        WHERE PROCESS_NAME=:argv[0]
        AND   PROC_INIT=:argv[1]
        AND   STARTDATE=:argv[2]
        AND   STATUS='started';
					
        EXEC SQL COMMIT WORK;
        IS_ANY_ORA_ERROR;
					
        CO_ProcMonitor(p_logfile, "Record Committed", NULL, NULL);

        EXEC SQL OPEN wrk_cursor;

        IS_ANY_ORA_ERROR;
					
        EXEC SQL SELECT PROCESSING_STATUS into :l_temp_processing_status
        FROM SYS_BATCHPROC
        WHERE PROCESS_NAME=:argv[0]
        AND   PROC_INIT=:argv[1]
        AND   STARTDATE=:argv[2]
        AND   STATUS='started'
        FOR UPDATE OF PROCESSING_STATUS,STATUS;
					
        IS_ANY_ORA_ERROR;
					
        if(APL_ZERO_RESULT_SET)
        {
           CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
           APL_GOBACK_FAIL;
        }
					
        
        EXEC SQL SELECT TYPEOF_FILE into :l_temp_type
        FROM DL_AUTOSETTHUFMT WHERE FIELD_NAME='type'
        FOR UPDATE NOWAIT;
					
        IS_ANY_ORA_ERROR;

		}

		

	} 							


   EXEC SQL CLOSE gst_cursor;
   EXEC SQL CLOSE wrk_cursor;

   IS_ANY_ORA_ERROR

   if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr)) APL_GOBACK_FAIL

   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
		free(l_deal_sstdet_struct_h);
      memset(chr_l_buf, NULL, BUFF_SIZE);
      sprintf(chr_l_buf, "Processed %d Records", int_l_reccount);

      CO_ProcMonitor(p_logfile, chr_l_buf, NULL, NULL);

      EXEC SQL UPDATE SYS_BATCHPROC
      SET STAT_DET = :chr_l_buf
      WHERE PROCESS_NAME=:argv[0]
      AND   PROC_INIT=:argv[1]
      AND   STARTDATE=:argv[2]
      AND   STATUS='completed';

      EXEC SQL COMMIT WORK;
      IS_ANY_ORA_ERROR

      CO_ProcMonitor(p_logfile, "Record Committed", NULL, NULL);

 

   	CO_ProcMonitor(   p_logfile,
      	         "Leaving Function CDBAutoSettHU with Success\n",
         	      NULL,
            	   NULL);
   	return(APL_SUCCESS);

   RETURN_FAILURE :
		free(l_deal_sstdet_struct_h);
      CO_ProcMonitor(   p_logfile,
                  "Got Errors : ",
                  l_debug_info_ptr,
                  p_intl_envdatastruct_h );
      CO_FreeErrLst(l_debug_info_ptr);

      CO_ProcMonitor(   p_logfile,
                  "Leaving Function CDBAutoSettHU with Errors\n",
                  NULL,
                  NULL);
      return(APL_FAILURE);


}



//main(int argc,char **argv)
int main(int argc,char **argv)//Changes done for AIX Migration
{
		/* Added by kotubabu for Linux Migration -Start*/
   #ifdef OS_LINUX
     l_feedfile=APL_OUT_FILE;
   #else
	   APL_FUNCTION_ENTER(l_feedfile);
   #endif
   /* Added by kotubabu for Linux Migration -END*/
   struct sqlca sqlca;
   /* OPT:AIX DEBUG_INFO_STRUCT_H *l_debug_info_ptr = (DEBUG_INFO_STRUCT_H *) NULL; */
   DEBUG_INFO_STRUCT_H **l_debug_info_ptr = (DEBUG_INFO_STRUCT_H **) NULL;
   INTL_ENV_DATA_STRUCT_H l_intl_env_data_h;
   FILE *l_finifile;
   FILE *l_logfile;

   char p_dt[APL_DATE_LEN];
   char chr_p_filename_a[APL_FILENAME_LENGTH];
   char chr_p_indicator[3];
   int int_l_retval=0;

   int int_num = 0;
   char chr_uname[APL_USERID_LEN] = APL_NULL_STRING;
   char chr_custody_id_b[APL_USERID_LEN] = APL_NULL_STRING;
   char chr_passwd[APL_USERID_LEN] = APL_NULL_STRING;
   char **temp;
   char *y;
   char chr_l_logdir[PATH_LENGTH] = APL_NULL_STRING;
   char chr_l_uploaddir[PATH_LENGTH] = APL_NULL_STRING;
   char chr_l_inifile[PATH_LENGTH] = APL_NULL_STRING;

   EXEC SQL VAR chr_uname IS STRING;
   EXEC SQL VAR chr_passwd IS STRING;

   memset(&l_intl_env_data_h, NULL, sizeof(INTL_ENV_DATA_STRUCT_H));

   strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
   strcat(chr_l_inifile,"intl_sun.cfg");

   strcpy(p_dt,APL_NULL_STRING);
   strcpy(chr_p_indicator,APL_NULL_STRING);
   strcpy(chr_p_filename_a,APL_NULL_STRING);

   fprintf(APL_OUT_FILE, "\n\tEntered MAIN. Going for Filename, File allocation etc\n");

   if ( ( l_finifile=fopen(chr_l_inifile,"r") ) == NULL)
		{ 
            APL_GOBACK_FAIL
   	}

   
   APL_FETCH_DB_LOGIN_DETAILS(l_finifile, chr_custody_id_b, chr_uname, chr_passwd, APL_OUT_FILE, l_debug_info_ptr)
 
	

   if (fclose(l_finifile))
   {
      exit(-1);
   }
   printf("Before  CONNECT");
	EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;

   printf("After  CONNECT");
   printf("sqlca.sqlcode is %d", sqlca.sqlcode);
	if (sqlca.sqlcode)
   {
            APL_GOBACK_FAIL
   }
   else
   {

      

      strcpy(l_intl_env_data_h.usr, argv[3]);
      strcpy(l_intl_env_data_h.h_mode, argv[4]);
      strcpy(l_intl_env_data_h.processtion, argv[5]);
      strcpy(l_intl_env_data_h.auth_req, argv[6]);
      strcpy(l_intl_env_data_h.subprocess, argv[7]);
      strcpy(l_intl_env_data_h.h_process, argv[8]);

      if (APL_FAILURE == CO_Rtv_RptFileName( "BS", 
            APL_LOGFILE_DESC,
            100,
            argv[5],
            argv,
            &l_logfile,
            l_debug_info_ptr ))//AIX -Warning Removal
      {
            APL_GOBACK_FAIL
      }
      
		printf("\n After GDBGenRepFileFn");

      EXEC SQL COMMIT WORK;

      if (sqlca.sqlcode)
      {
         CO_ProcMonitor(l_logfile, "Could not commit after opening chr_log file", NULL, NULL);
         CO_Proc_RptClose(l_logfile, l_debug_info_ptr);//AIX -Warning Removal
            APL_GOBACK_FAIL
      }
      
      if ( ( l_finifile=fopen(chr_l_inifile,"r") ) == NULL)
	{ 
            APL_GOBACK_FAIL
   	}

      if ( APL_FAILURE == CO_ReadToken(l_finifile,
               "INTL_UPL_PATH",
               chr_l_uploaddir,
               l_debug_info_ptr ))//AIX -Warning Removal
      {
            APL_GOBACK_FAIL
      }
   
     if (fclose(l_finifile))
       {
        exit(-1);
       }
		printf("\nAfter CM_ReadToken");
      

      fprintf(l_logfile, "\n\tString split processtion called\n");

      if (APL_FAILURE == CO_SplitStr( argv[9],
                                       '|',
                                       &int_num,
                                       &temp ))
      {
            fprintf(l_logfile, "\n\tString split processtion failed\n");
            CO_Proc_RptClose(l_logfile, l_debug_info_ptr);//AIX -Warning Removal
            APL_GOBACK_FAIL
      }


      if (int_num == 0)
      {
            fprintf(l_logfile, "\n\tThere were no params. Mandatory data missing\n");
            APL_DATA_MISSING("Auto Broker Conf",APL_NULL_STRING,APL_NULL_STRING)

            CO_Proc_RptClose(l_logfile, l_debug_info_ptr);//AIX -Warning Removal
          APL_GOBACK_FAIL
      }

      strcpy(p_dt, temp[2]);
      strcpy(chr_p_filename_a, temp[1]);
      strcpy(chr_p_indicator, temp[0]);

      

      if (APL_FAILURE == CO_RtvSysParams(l_debug_info_ptr))//AIX -Warning Removal
      {
            fprintf(l_logfile, "\n\tFailed in Get System Params\n");
            CO_Proc_RptClose(l_logfile, l_debug_info_ptr);//AIX -Warning Removal
            APL_GOBACK_FAIL
      }

            printf("Successfully got Sys Params\n");
            fprintf(l_logfile, "Successfully got Sys Params\n");
            fprintf(l_logfile, "userid   : (%s)\n",l_intl_env_data_h.usr);
            fprintf(l_logfile, "mode     : (%s)\n",l_intl_env_data_h.h_mode);
            fprintf(l_logfile, "function : (%s)\n",l_intl_env_data_h.processtion);
            fprintf(l_logfile, "auth_req : (%s)\n",l_intl_env_data_h.auth_req);
            fprintf(l_logfile, "subfun   : (%s)\n",l_intl_env_data_h.subprocess);
            fprintf(l_logfile, "action   : (%s)\n",l_intl_env_data_h.h_process);
            fprintf(l_logfile, "Parameter String Passed   : (%s)\n",argv[9]);


      if (!strlen(chr_p_filename_a))
      {
         CO_InsertErr
            (l_debug_info_ptr,
            ERR_FDFILE_NOTVALID,
            APL_NULL_STRING,
            APL_NULL_STRING,
            APL_NULL_STRING,
            __LINE__,
            __FILE__
            );
         CO_ProcMonitor(l_logfile,"No Broker Upload File name given!!\n",
               l_debug_info_ptr,&l_intl_env_data_h);//AIX -Warning Removal
         CO_Proc_RptClose(l_logfile, l_debug_info_ptr); //AIX -Warning Removal
         APL_GOBACK_FAIL
      }


       
		 if(strcmp (chr_p_indicator,"U") == 0) 
         {
   	      

      		if (!strcmp(temp[0],"U"))
         		{
            	   printf("About to call  Auto upload of Settlement of Trade Fn\n");
            	   fprintf(l_logfile, "About to call  Auto upload of Settlement of Trade Fn\n");
       		      int_l_retval = DL_Proc_AutoBrkSettleUpload(   chr_l_uploaddir,
            		                        chr_p_filename_a,
                  		                  argv,
                        		            l_logfile,
                              		      &l_intl_env_data_h,
                                    		l_debug_info_ptr);//AIX -Warning Removal

 		            if ( int_l_retval == APL_FAILURE )
      		      {
            		   CO_ProcMonitor(l_logfile, "CDBAutoSettlUplFn returned failure", NULL, &l_intl_env_data_h);
               		CO_Proc_RptClose(l_logfile, l_debug_info_ptr);//AIX -Warning Removal
               		EXEC SQL ROLLBACK WORK ;
               		APL_GOBACK_FAIL
            		}
            		else
            		{
            		   CO_ProcMonitor(l_logfile, "CDBAutoSettlUplFn returned success", NULL, &l_intl_env_data_h);
               		EXEC SQL UPDATE SYS_BATCHPROC
    		           	SET  status = 'completed'
         		      WHERE PROCESS_NAME=:argv[0]
              		 	AND   PROC_INIT=:argv[1]
               		AND   STARTDATE=:argv[2]
               		AND   STATUS='started';
 	              if (sqlca.sqlcode)
   		            {
         					 CO_ProcMonitor(   l_logfile,
                        		      "Could not update Batch_in_proc record to completed",
                              		NULL,
                              		&l_intl_env_data_h);
                  		CO_Proc_RptClose(l_logfile, l_debug_info_ptr);//AIX -Warning Removal
                  		APL_GOBACK_FAIL
               		}
 		              EXEC SQL COMMIT ;
 		              if (sqlca.sqlcode)
      		         {
            		      CO_ProcMonitor(   l_logfile,
                  		            "Could not perform final COMMIT",
                        		      NULL,
                             			 &l_intl_env_data_h);
                  		CO_Proc_RptClose(l_logfile, l_debug_info_ptr);//AIX -Warning Removal
                  		APL_GOBACK_FAIL
               		}
 		              CO_Proc_RptClose(l_logfile, l_debug_info_ptr);//AIX -Warning Removal
      		         APL_GOBACK_SUCCESS
            		}
         		}
         }



		 if(strcmp (chr_p_indicator,"S") == 0) 
         {
   	      

      		if (!strcmp(temp[0],"S"))
         		{
            	   printf("About to call  Auto Settlement of Trade Fn\n");
            	   fprintf(l_logfile, "About to call  Auto Settlement of Trade Fn\n");
       		      int_l_retval = CDBAutoSettHU(argv,
                        		            l_logfile,
                              		      &l_intl_env_data_h,
                                    		l_debug_info_ptr);//AIX -Warning Removal

 		            if ( int_l_retval == APL_FAILURE )
      		      {
            		   CO_ProcMonitor(l_logfile, "CDBAutoSettHU returned failure", NULL, &l_intl_env_data_h);
               		CO_Proc_RptClose(l_logfile, l_debug_info_ptr);//AIX -Warning Removal
               		EXEC SQL ROLLBACK WORK ;
               		APL_GOBACK_FAIL
            		}
            		else
            		{
            		   CO_ProcMonitor(l_logfile, "CDBAutoSettHU returned success", NULL, &l_intl_env_data_h);
               		EXEC SQL UPDATE SYS_BATCHPROC
    		           	SET  status = 'completed'
         		      WHERE PROCESS_NAME=:argv[0]
              		 	AND   PROC_INIT=:argv[1]
               		AND   STARTDATE=:argv[2]
               		AND   STATUS='started';
 	              if (sqlca.sqlcode)
   		            {
         					 CO_ProcMonitor(   l_logfile,
                        		      "Could not update Batch_in_proc record to completed",
                              		NULL,
                              		&l_intl_env_data_h);
                  		CO_Proc_RptClose(l_logfile, l_debug_info_ptr);//AIX -Warning Removal
                  		APL_GOBACK_FAIL
               		}
 		              EXEC SQL COMMIT ;
 		              if (sqlca.sqlcode)
      		         {
            		      CO_ProcMonitor(   l_logfile,
                  		            "Could not perform final COMMIT",
                        		      NULL,
                             			 &l_intl_env_data_h);
                  		CO_Proc_RptClose(l_logfile, l_debug_info_ptr);//AIX -Warning Removal
                  		APL_GOBACK_FAIL
               		}
 		              CO_Proc_RptClose(l_logfile, l_debug_info_ptr); //AIX -Warning Removal
      		         APL_GOBACK_SUCCESS
            		}
         		}
         }


   }
  RETURN_SUCCESS : exit(0);
  RETURN_FAILURE : exit(-1);
}
