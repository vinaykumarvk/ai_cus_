#include "Intellect_Common.h"
#include "CA_InterFace.h"
#include "CO_HostStructdef.h"
#include "DL_Interface.h"
#include<stdlib.h>
EXEC SQL INCLUDE SQLCA.H;

int main(int argc,char **argv)  // AIX -Warnings Removal
{
   DEBUG_INFO_STRUCT_H *l_debug_info_ptr = (DEBUG_INFO_STRUCT_H *) NULL;
   INTL_ENV_DATA_STRUCT_H l_intl_env_data_h;
   FILE *l_logfile, *l_finifile, *l_mat_rept_file,*l_unmat_rept_file, *l_mis_rept_file;
     char l_temp_processing_status[51] = APL_NULL_STRING;
   char **temp;
   int int_num=0;
   char chr_l_hoff_file[PATH_LENGTH]=APL_NULL_STRING;
   char chr_l_inifile[PATH_LENGTH] = APL_NULL_STRING;
   struct sqlca sqlca;
   char chr_l_sys_date[11] = APL_NULL_STRING;
   int int_retval=0;

   char chr_uname[APL_USERID_LEN] = APL_NULL_STRING;
   char chr_custody_id_b[APL_USERID_LEN] = APL_NULL_STRING;
   char chr_passwd[APL_USERID_LEN] = APL_NULL_STRING;

   EXEC SQL BEGIN DECLARE SECTION;
   int int_l_count =0;
   EXEC SQL VAR chr_l_sys_date         IS STRING;
   EXEC SQL VAR chr_uname IS STRING;
   EXEC SQL VAR chr_passwd IS STRING;
   EXEC SQL END DECLARE SECTION;

   memset(&l_intl_env_data_h, NULL, sizeof(INTL_ENV_DATA_STRUCT_H));
   strcpy(l_intl_env_data_h.usr, argv[3]);
   strcpy(l_intl_env_data_h.h_mode, argv[4]);
   strcpy(l_intl_env_data_h.processtion, argv[5]);
   strcpy(l_intl_env_data_h.auth_req, argv[6]);
   strcpy(l_intl_env_data_h.subprocess, argv[7]);
   strcpy(l_intl_env_data_h.h_process, argv[8]);



   strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
   strcat(chr_l_inifile,"intl_sun.cfg");
   if ( ( l_finifile=fopen(chr_l_inifile,"r") ) == NULL)
   {
   APL_GOBACK_FAIL
   }
   sqlca.sqlcode=0;
   APL_FETCH_DB_LOGIN_DETAILS(l_finifile, chr_custody_id_b, chr_uname, chr_passwd, APL_OUT_FILE, &l_debug_info_ptr)
   IS_ANY_ORA_ERROR
   EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;

  IS_ANY_ORA_ERROR


    if (APL_FAILURE == CO_Rtv_RptFileName( "hd",
            APL_LOGFILE_DESC,
                 100,
                 argv[5],
                 argv,
                 &l_logfile,
                 &l_debug_info_ptr ))
   {
   APL_GOBACK_FAIL
   }
    


     EXEC SQL SELECT PROCESSING_STATUS into :l_temp_processing_status
     FROM SYS_BATCHPROC
     WHERE PROCESS_NAME=:argv[0]
     AND   PROC_INIT=:argv[1]
     AND   STARTDATE=:argv[2]
     AND   STATUS='started'
     FOR UPDATE OF PROCESSING_STATUS,STATUS;

   if(APL_ZERO_RESULT_SET)
   {
      CO_ProcMonitor(l_logfile,"E:No entry in batch_in_proc\n",NULL,NULL);
      APL_GOBACK_FAIL
   }

   if (APL_FAILURE == CO_RtvSysParams(&l_debug_info_ptr))
   {

      CO_ProcMonitor(l_logfile, "Error In Getting System Parameters", NULL, NULL);
      CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
      APL_GOBACK_FAIL
   }

   EXEC SQL SELECT to_char(SYS_DATE,'DD/MM/YYYY')
      into :chr_l_sys_date FROM PRO_SYS_DATE;

   fprintf(l_logfile,"System Date : %s\n",chr_l_sys_date);

   CO_ProcMonitor(l_logfile,"Start Processing\n",&l_debug_info_ptr,&l_intl_env_data_h);


   int_retval=ReadRecord(argv[9],&l_intl_env_data_h,l_logfile, &l_debug_info_ptr);

if(int_retval ==APL_FAILURE)
{

   CO_ProcMonitor(l_logfile,"Returned unsucessful\n",&l_debug_info_ptr,&l_intl_env_data_h);	

}

   CO_ProcMonitor(l_logfile,"Finished Processing\n",&l_debug_info_ptr,&l_intl_env_data_h);
  RETURN_SUCCESS :
     EXEC SQL UPDATE SYS_BATCHPROC
     SET  status = 'completed'
     WHERE PROCESS_NAME=:argv[0]
     AND   PROC_INIT=:argv[1]
     AND   STARTDATE=:argv[2]
     AND   STATUS='started';

     EXEC SQL COMMIT WORK RELEASE;
     fprintf(l_logfile,"Successfully Exiting the program HDAT_Uplaod\n");
     CO_Proc_RptClose(l_logfile, l_debug_info_ptr);
     fclose(l_finifile);
     exit(APL_SUCCESS);

  RETURN_FAILURE :
     EXEC SQL COMMIT WORK RELEASE;
     fprintf(l_logfile,"Unsuccessfully Exiting the program HDAT_Upload\n");
     fclose(l_finifile);
     exit(APL_FAILURE);
}


int ReadRecord(char *p_param_str,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,FILE *p_logfile,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)  // AIX -Warnings Removal

{
  void  CO_Rtv_DataString(char *chr_p_str, char *p_lbl,char *p_data_value);
   void  CO_Rtv_DataDbl(char *chr_p_str, char *p_lbl,double *p_data_value);
   void  CO_Rtv_DataInt(char *chr_p_str, char *p_lbl,int *p_data_value);
CA_NIS_APPLICATION_STRUCT_H        l_ca_nis_application_struct_h    ;
FILE *l_logfile;
char l_param_str[2000]	=	APL_NULL_STRING;
int	int_num;
int i;
int int_ret_val;
   //INTL_ENV_DATA_STRUCT_H l_intl_env_struct;/*Commented for AIX Migration*/

   char **temp;



l_logfile=p_logfile;

printf("param_str recieived is |%s|\n",p_param_str);


   if (APL_FAILURE == CO_SplitStr( p_param_str,
                ';',
                &int_num,
                &temp ))
   {
   fprintf(p_logfile,"Returns unsuccessfully from CO_SplitStr\n");
   }
   if (int_num==0)
   {
   fprintf(p_logfile,"\n Zero argments \n");
   }

memset(&l_ca_nis_application_struct_h,NULL,sizeof(CA_NIS_APPLICATION_STRUCT_H));


for(i=0;i<int_num;i++)
{

memset(&l_ca_nis_application_struct_h,NULL,sizeof(CA_NIS_APPLICATION_STRUCT_H));
	strcpy(l_param_str,temp[i]);
	printf("l_param_str is |%s|\n",l_param_str);
	/**int_ret_val = Populate_CA_NIS_APPLICATION(l_ca_nis_application_struct_h,l_param_str);**/

	 CO_Rtv_DataString(l_param_str,"CORP_ID",(char *)l_ca_nis_application_struct_h.h_corp_id);
         CO_Rtv_DataString(l_param_str,"CLN_CODE",(char *)l_ca_nis_application_struct_h.h_cln_code);
         /*CO_Rtv_DataInt(l_param_str,"BREVNO",(int *)&(l_ca_nis_application_struct_h.h_brevno));*/
         CO_Rtv_DataString(l_param_str,"ACCESS_STAMP",(char *)l_ca_nis_application_struct_h.h_access_stamp);
	 fprintf(l_logfile,"account is %s\n",l_ca_nis_application_struct_h.h_cln_code);
	/*fprintf(l_logfile,"brevno is %d\n",l_ca_nis_application_struct_h.h_brevno);*/
	//l_intl_env_struct = *p_intl_envdatastruct_h;/*Commented for AIX Migration*/
        /*Added For AIX  migration to remove core dump*/
	if(MT_UpdCA_NIS_APPLICATION(&l_ca_nis_application_struct_h,
                               p_intl_envdatastruct_h,
                               l_debug_info_ptr) != APL_SUCCESS) 
	{
		CO_ProcMonitor(l_logfile,"Errors in processing record\n",l_debug_info_ptr,NULL);
	}

	CO_FreeErrLst(l_debug_info_ptr);

}

EXEC SQL COMMIT WORK;
IS_ANY_ORA_ERROR
   RETURN_SUCCESS  :
   {

      fprintf(p_logfile,"Success from ReadRecord \n");
      CO_FreeErrLst(l_debug_info_ptr);
      fflush(p_logfile);
      return(APL_SUCCESS);
   }

   RETURN_FAILURE  :
   {
      fprintf(p_logfile,"Failure from readRecord [%d]\n",sqlca.sqlcode);
      CO_FreeErrLst(l_debug_info_ptr);
      fflush(p_logfile);
      return(APL_FAILURE);
   }

}
