





#include "CO_HostStructdef.h"
EXEC SQL INCLUDE SQLCA.H;



int CR_Chk_Ord(	char *p_client, 
						char *p_indentity_no, 
						char p_exist, 
						char p_auth, 
						char p_del, 
						char p_cancel,
						char p_exec,
						char p_exectyp,
						char p_expire,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{




	

	struct sqlca sqlca;	
	OR_ORDERDETAILS_STRUCT_H l_or_orderdetails_struct_h;
	OR_ORDERDETAILS_STRUCT_I l_or_orderdetails_struct_ic;
	char 	chr_l_buf[BUFFER_LEN] 			= APL_NULL_STRING;
	char	chr_l_sysdate_b[APL_DATE_LEN]	= APL_NULL_STRING;
	int	int_l_datecmp					= 0;
	int 	int_l_error_flag 				= APL_SUCCESS;
 
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	

	APL_IF_DEBUG
	{
      CO_ProcMonitor(	APL_OUT_FILE, 
						"Entered Function CR_Chk_Ord\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
	   sprintf(		chr_l_buf, 
						"The Account is : %s\n", 
						p_client);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(		chr_l_buf, 
						"The Reference No. is : %s\n", 
						p_indentity_no);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(		chr_l_buf, 
						"The Exist Flag. is : %c\n", 
						p_exist);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(		chr_l_buf, 
						"The Authorisation Flag is : %c\n", 
						p_auth);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(		chr_l_buf, 
						"The Delete Flag is : %c\n", 
						p_del);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(		chr_l_buf, 
						"The Cancel Flag is : %c\n", 
						p_cancel);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(		chr_l_buf, 
						"The Execution Flag is : %c\n", 
						p_exec);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(		chr_l_buf, 
						"The Execution Type is : %c\n", 
						p_exectyp);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(		chr_l_buf, 
						"The Expiry Flag is : %c\n", 
						p_expire);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
	}

	

	if (!strlen(p_client))
	{
		APL_DATA_MISSING(	"Account", 
								APL_NULL_STRING, 
								APL_NULL_STRING );
		int_l_error_flag = APL_FAILURE;
	}

	if (!strlen(p_indentity_no))
	{
		APL_DATA_MISSING(	"Reference No.", 
								APL_NULL_STRING, 
								APL_NULL_STRING );
		int_l_error_flag = APL_FAILURE;
	}

	if (APL_FAILURE == int_l_error_flag) 
	{
		APL_GOBACK_FAIL;
	}

	

	if (p_exist == NULL) 
	{
		p_exist = 'Y';
	}

	

	memset( &l_or_orderdetails_struct_h, NULL, sizeof(OR_ORDERDETAILS_STRUCT_H) );
	memset( &l_or_orderdetails_struct_ic, NULL, sizeof(OR_ORDERDETAILS_STRUCT_I) );

	

	EXEC SQL SELECT * 
				INTO 	:l_or_orderdetails_struct_h:l_or_orderdetails_struct_ic 
				FROM 	OR_ORDERDETAILS 
				WHERE CLIENT		=	:p_client 
				AND 	ORD_REFNO	=	:p_indentity_no;

	IS_ANY_ORA_ERROR;

	

	if ((sqlca.sqlcode == 1403) && (p_exist == 'Y'))
	{
		CO_InsertErr(	l_debug_info_ptr, 
								ERR_ORD_NOTFND, 
								p_client, 
								p_indentity_no, 
								APL_NULL_STRING, 
								__LINE__, 
								__FILE__ );
		APL_GOBACK_FAIL;
	}	

	if ((sqlca.sqlcode == 0) && (p_exist == 'N'))
	{
		if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
														ERR_ORD_EXISTS, 
														p_client, 
														p_indentity_no, 
														APL_NULL_STRING, 
														__LINE__, 
														__FILE__ ))
		{
			APL_GOBACK_FAIL;
		}   
		int_l_error_flag = APL_FAILURE;
	}

	

	l_or_orderdetails_struct_h.h_ord_stat[2]='\0';	
	if ((l_or_orderdetails_struct_ic.i_checker_dt == -1) && (p_auth=='Y'))
	{
		if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
														ERR_ORD_NOT_AUTHORIZED, 
														p_client, 
														p_indentity_no, 
														APL_NULL_STRING, 
														__LINE__, 
														__FILE__ ))
		{
			APL_GOBACK_FAIL;
		}
		int_l_error_flag = APL_FAILURE;
	}

	if ((l_or_orderdetails_struct_ic.i_checker_dt == 0) && (p_auth=='N'))
	{	
		if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
														ERR_ORD_AUTHORIZED, 
														p_client, 
														p_indentity_no, 
														APL_NULL_STRING, 
														__LINE__, 
														__FILE__ ))
		{
			APL_GOBACK_FAIL;
		}
		int_l_error_flag = APL_FAILURE;
	}

	

	if ((strcmp(l_or_orderdetails_struct_h.h_ord_stat, STATUS_DEL_UAUTH)) && (p_del=='Y'))
	{
		if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
														ERR_ORD_NOTMARKEDDEL, 
														p_client, 
														p_indentity_no, 
														APL_NULL_STRING, 
														__LINE__, 
														__FILE__ ))
		{
			APL_GOBACK_FAIL;
		}
		int_l_error_flag = APL_FAILURE;
	}

	if ((!strcmp(l_or_orderdetails_struct_h.h_ord_stat, STATUS_DEL_UAUTH)) && (p_del=='N'))
	{
		if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
														ERR_ORD_MARKEDDEL, 
														p_client, 
														p_indentity_no, 
														APL_NULL_STRING, 
														__LINE__, 
														__FILE__ ))
		{
			APL_GOBACK_FAIL;
		}
		int_l_error_flag = APL_FAILURE;
	}

	

	if ( (strcmp(l_or_orderdetails_struct_h.h_ord_stat, STATUS_CANC_AUTH) 
			&& strcmp(l_or_orderdetails_struct_h.h_ord_stat, STATUS_CANC_UAUTH) )
			&& ( p_cancel == 'Y' ) )
	{
		if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
														ERR_ORD_NOT_CANC,
														p_client,
														p_indentity_no,
														APL_NULL_STRING,
														__LINE__,
														__FILE__ ) )
		{
			APL_GOBACK_FAIL;
		}
		int_l_error_flag = APL_FAILURE;
	}

	if ( ( (!strcmp(l_or_orderdetails_struct_h.h_ord_stat, STATUS_CANC_AUTH) )
		|| (!strcmp(l_or_orderdetails_struct_h.h_ord_stat, STATUS_CANC_UAUTH) ) )
		&& ( p_cancel == 'N' ) )
	{
		if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
														ERR_ORD_CANC,
														p_client,
														p_indentity_no,
														APL_NULL_STRING,
														__LINE__,
														__FILE__ ) )
		{
			APL_GOBACK_FAIL;
		}
		int_l_error_flag = APL_FAILURE;
	}

	

	if ( l_or_orderdetails_struct_ic.i_execquantity == -1 )
	{
		l_or_orderdetails_struct_h.h_execquantity = 0;
	}

	if ( l_or_orderdetails_struct_h.h_execquantity == 0 
			&& p_exec == 'Y' 
			&& p_exectyp == NULL )
	{
		if ( APL_FAILURE == CO_InsertErr( l_debug_info_ptr,
														ERR_ORD_NOTEXECUTED,
														p_client,
														p_indentity_no,
														APL_NULL_STRING,
														__LINE__,
														__FILE__ ) )
		{
			APL_GOBACK_FAIL;
		}
		int_l_error_flag = APL_FAILURE;
	}

	if ( l_or_orderdetails_struct_h.h_execquantity > 0 
			&& p_exec == 'N'
			&& p_exectyp == NULL )
	{
		if ( APL_FAILURE == CO_InsertErr( l_debug_info_ptr,
														ERR_ORD_EXECUTED,
														p_client,
														p_indentity_no,
														APL_NULL_STRING,
														__LINE__,
														__FILE__ ) )
		{
			APL_GOBACK_FAIL;
		}
		int_l_error_flag = APL_FAILURE;
	}

	

	if ( ( ( l_or_orderdetails_struct_h.h_execquantity == l_or_orderdetails_struct_h.h_orderquantity ) 
			|| ( l_or_orderdetails_struct_h.h_execquantity == 0 ) ) 
			&& p_exec == 'Y' 
			&& p_exectyp == 'P' )
	{
		if ( l_or_orderdetails_struct_h.h_execquantity == 0 )
		{
			if ( APL_FAILURE == CO_InsertErr( l_debug_info_ptr,
															ERR_ORD_NOTEXECUTED,
															p_client,
															p_indentity_no,
															APL_NULL_STRING,
															__LINE__,
															__FILE__ ) )
			{
				APL_GOBACK_FAIL;
			}
			int_l_error_flag = APL_FAILURE;
		}
		else
		{
			if ( APL_FAILURE == CO_InsertErr( l_debug_info_ptr,
															ERR_ORD_FULLY_EXECUTED,
															p_client,
															p_indentity_no,
															APL_NULL_STRING,
															__LINE__,
															__FILE__ ) )
			{
				APL_GOBACK_FAIL;
			}
			int_l_error_flag = APL_FAILURE;
		}
	}

	if ( l_or_orderdetails_struct_h.h_execquantity != l_or_orderdetails_struct_h.h_orderquantity 
			&& p_exec == 'N'
			&& p_exectyp == 'P' )
	{
		if ( l_or_orderdetails_struct_h.h_execquantity == 0 )
		{
			if ( APL_FAILURE == CO_InsertErr( l_debug_info_ptr,
															ERR_ORD_NOTEXECUTED,
															p_client,
															p_indentity_no,
															APL_NULL_STRING,
															__LINE__,
															__FILE__ ) )
			{
				APL_GOBACK_FAIL;
			}
			int_l_error_flag = APL_FAILURE;
		}
		else
		{		
			if ( APL_FAILURE == CO_InsertErr( l_debug_info_ptr,
															ERR_ORD_PARTLY_EXECUTED,
															p_client,
															p_indentity_no,
															APL_NULL_STRING,
															__LINE__,
															__FILE__ ) )
			{
				APL_GOBACK_FAIL;
			}
			int_l_error_flag = APL_FAILURE;
		}
	}

	

	if ( l_or_orderdetails_struct_h.h_execquantity != l_or_orderdetails_struct_h.h_orderquantity 
			&& p_exec == 'Y' 
			&& p_exectyp == 'F' )
	{
		if ( l_or_orderdetails_struct_h.h_execquantity == 0 )
		{
			if ( APL_FAILURE == CO_InsertErr( l_debug_info_ptr,
															ERR_ORD_NOTEXECUTED,
															p_client,
															p_indentity_no,
															APL_NULL_STRING,
															__LINE__,
															__FILE__ ) )
			{
				APL_GOBACK_FAIL;
			}
			int_l_error_flag = APL_FAILURE;
		}
		else
		{
			if ( APL_FAILURE == CO_InsertErr( l_debug_info_ptr,
															ERR_ORD_NOTFULLY_EXECUTED,
															p_client,
															p_indentity_no,
															APL_NULL_STRING,
															__LINE__,
															__FILE__ ) )
			{
				APL_GOBACK_FAIL;
			}
			int_l_error_flag = APL_FAILURE;
		}
	}

	if ( l_or_orderdetails_struct_h.h_execquantity == l_or_orderdetails_struct_h.h_orderquantity 
			&& p_exec == 'N'
			&& p_exectyp == 'F' )
	{
		if ( APL_FAILURE == CO_InsertErr( l_debug_info_ptr,
														ERR_ORD_FULLY_EXECUTED,
														p_client,
														p_indentity_no,
														APL_NULL_STRING,
														__LINE__,
														__FILE__ ) )
		{
			APL_GOBACK_FAIL;
		}
		int_l_error_flag = APL_FAILURE;
	}

	

	if ( p_expire != NULL )
	{
		

		if ( l_or_orderdetails_struct_h.h_isgte_ind[0] == 'N' && p_expire == 'Y' ) 
		{
			CO_InsertErr( l_debug_info_ptr,
									ERR_ORD_NOTEXPIRED,
									p_client,
									p_indentity_no,
									APL_NULL_STRING,
									__LINE__,
									__FILE__ ); 
			APL_GOBACK_FAIL;
		}

		if ( l_or_orderdetails_struct_h.h_isgte_ind[0]	== 'Y' )
		{
			int_l_datecmp = 0;

			if ( APL_FAILURE == CO_RtvSysDt(	chr_l_sysdate_b,
																l_debug_info_ptr ) )
			{
				APL_GOBACK_FAIL;
			}

			if ( APL_FAILURE == 	CO_Pro_DateComp( 	chr_l_sysdate_b,
															l_or_orderdetails_struct_h.h_expirydate,
															&int_l_datecmp,
															l_debug_info_ptr ) )
			{
				APL_GOBACK_FAIL;
			} 

         

			if ( int_l_datecmp >= 0 && p_expire == 'Y' )
			{
				if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
																ERR_ORD_NOTEXPIRED,
																p_client,
																p_indentity_no,
																APL_NULL_STRING,
																__LINE__,
																__FILE__ ) )
				{	
					APL_GOBACK_FAIL;
				}
				int_l_error_flag = APL_FAILURE;
			}

         

			if (int_l_datecmp < 0 && p_expire == 'N' )
			{	
				if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
																ERR_ORD_EXPIRE,
																p_client,
																p_indentity_no,
																APL_NULL_STRING,
																__LINE__,
																__FILE__ ) )
				{
					APL_GOBACK_FAIL;
				}
				int_l_error_flag = APL_FAILURE;
			}
		}
	}

	

	if ( APL_FAILURE == int_l_error_flag )
	{
		APL_GOBACK_FAIL;
	}

	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Chk_Ord with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);

  	RETURN_FAILURE :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Chk_Ord with errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);
	
}							


int CR_Mod_CustCashBal(	char		*chr_p_client,
							double	*p_quantity,
							double	*p_oldqty,
							double	*p_lmtprc,
							double	*p_oldlmtprc,
							char		p_buysellflg,
							double	*p_brkgcomm,
							DEBUG_INFO_STRUCT_H	**l_debug_info_ptr )
{
	struct sqlca sqlca;
	char		chr_l_h_acc_gl[APL_CLIENT_LENGTH]	=	APL_NULL_STRING;
	char		chr_l_buf[BUFFER_LEN]					=	APL_NULL_STRING;
	double	l_old_txnval						= 	0;
	double	l_txnval								=	0;
	double	l_tot_brkgcomm						=	0;
	double	l_old_totval						=	0;
	double	l_totval								=	0;
	short		l_i_acc_ibbs						=	0;
	short		int_l_error_flg							=	APL_SUCCESS;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	

	EXEC SQL VAR chr_l_h_acc_gl	IS STRING;

	

	APL_IF_DEBUG
	{
      CO_ProcMonitor(	APL_OUT_FILE, 
						"Entered Function CR_Mod_CustCashBal\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
	   sprintf(		chr_l_buf, 
						"The Account is : %s\n", 
						chr_p_client);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(		chr_l_buf, 
						"The Quantity is : %f\n", 
						*p_quantity);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(		chr_l_buf, 
						"The old Quantity is : %f\n", 
						*p_oldqty);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(		chr_l_buf, 
						"The Limit Price is : %f\n", 
						*p_lmtprc);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(		chr_l_buf, 
						"The Old Limit Price is : %f\n", 
						*p_oldlmtprc);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(		chr_l_buf, 
						"The Buy/Sell Flag is : %c\n", 
						p_buysellflg);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(		chr_l_buf, 
						"The Brokerage Commission is : %f\n", 
						*p_brkgcomm);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
	}

	

	if ( !strlen(chr_p_client) )
	{
		APL_DATA_MISSING(	"Account",
								APL_NULL_STRING,
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	}

	if ( *p_quantity == 0 )
	{
		APL_DATA_MISSING(	"Quantity",
								APL_NULL_STRING,
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	}

	if ( int_l_error_flg == APL_FAILURE )
	{
		APL_GOBACK_FAIL;
	}
	
	if ( p_buysellflg == APL_NULL_CHAR )
	{
		p_buysellflg = BUY_IND;
	}

	

	EXEC SQL SELECT 	CLN_GL_ACCOUNT
				INTO		:chr_l_h_acc_gl:l_i_acc_ibbs
				FROM		MT_CLIENT
				WHERE		CLN_CODE	= :chr_p_client;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_ACCNOT_FND,
														chr_p_client,
														APL_NULL_STRING,
														APL_NULL_STRING );

	if ( *p_oldlmtprc != 0 )
	{
		l_old_txnval = (*p_oldqty) * (*p_oldlmtprc) / 100;
	}
	else
	{
		l_old_txnval = *p_oldqty;
	}

	if ( *p_lmtprc != 0 )
	{
		l_txnval = (*p_quantity) * (*p_lmtprc) / 100;
	}
	else
	{
		l_txnval = *p_quantity;
	}

	l_old_totval = l_old_txnval + l_old_txnval / 100 * 
						(  l_mt_core_sys_params_struct_h.custody_comm_rt +
							l_mt_core_sys_params_struct_h.stk_exg_comm_rt  +
							( 	l_mt_core_sys_params_struct_h.custody_comm_rt * 
								l_mt_core_sys_params_struct_h.stk_exg_comm_rt ) / 100 );

	if ( *p_brkgcomm != 0 )
	{
		l_tot_brkgcomm = *p_brkgcomm; 
	}
	else
	{
		l_tot_brkgcomm = l_txnval * l_mt_core_sys_params_struct_h.custody_comm_rt / 100;
	}

	if ( p_buysellflg == BUY_IND )
	{
		l_totval = l_txnval + l_tot_brkgcomm + 
					  ( l_txnval * l_mt_core_sys_params_struct_h.stk_exg_comm_rt /100 ) +
					  ( l_tot_brkgcomm * l_mt_core_sys_params_struct_h.custody_comm_rt / 100 );
				 
	}
	else if ( p_buysellflg == SELL_IND )
	{
		l_totval = l_txnval -
					  l_tot_brkgcomm - 
					  ( l_txnval * l_mt_core_sys_params_struct_h.stk_exg_comm_rt /100 ) -
					  ( l_tot_brkgcomm * l_mt_core_sys_params_struct_h.custody_comm_rt / 100 );
	}

	

	if ( APL_SUCCESS == CO_ChkErr( *l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL;
	}

	

	EXEC SQL UPDATE DL_CASHBAL
				SET	CASH_BAL 	= ROUND( CASH_BAL + :l_old_totval - :l_totval, 0 )
				WHERE GL_CLT		=	:chr_l_h_acc_gl:l_i_acc_ibbs;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_ACCNOT_FND,
														chr_p_client,
														"Cash Bal. Table",
														APL_NULL_STRING);

	

	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Mod_CustCashBal with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);

  	RETURN_FAILURE :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Mod_CustCashBal with errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);
	
}


int CR_Chk_CustCashBal(	char		*chr_p_client,
							double	*p_quantity,
							double	*p_lmtprc,
							short		*int_p_retval,
							DEBUG_INFO_STRUCT_H	**l_debug_info_ptr )
{
	struct sqlca sqlca;
	char		chr_l_buf[BUFFER_LEN]			=	APL_NULL_STRING;
	double	l_h_cshbal					=	0;
	double	l_reqdamount					= 	0;
	short		l_i_cshbal					=	0;
	short		l_i_acc_ibbs				= 	0;
	short		int_l_error_flg					= 	APL_SUCCESS;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	

	APL_IF_DEBUG
	{
      CO_ProcMonitor(	APL_OUT_FILE, 
						"Entered Function CR_Mod_CustCashBal\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
	   sprintf(		chr_l_buf, 
						"The Account is : %s\n", 
						chr_p_client);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(		chr_l_buf, 
						"The Quantity is : %f\n", 
						*p_quantity);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(		chr_l_buf, 
						"The Limit Price is : %f\n", 
						*p_lmtprc);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
	}

	

	if ( !strlen(chr_p_client) )
	{
		APL_DATA_MISSING(	"CLIENT",
								APL_NULL_STRING,
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	}

	if ( *p_quantity == 0 )
	{
		APL_DATA_MISSING(	"Quantity",
								APL_NULL_STRING,
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	}

	if ( APL_FAILURE == int_l_error_flg )
	{
		APL_GOBACK_FAIL;
	}

	

	if ( *p_lmtprc == 0 )
	{
		l_reqdamount = *p_quantity;
	}
	else
	{
		l_reqdamount = (*p_lmtprc) * (*p_quantity) / 100;
	}

	l_reqdamount = l_reqdamount + ( ( l_reqdamount / 100 ) *
									  ( l_mt_core_sys_params_struct_h.custody_comm_rt +
									    l_mt_core_sys_params_struct_h.stk_exg_comm_rt +
									  ( l_mt_core_sys_params_struct_h.custody_comm_rt *
									    l_mt_core_sys_params_struct_h.comm_tax_rt / 100 ) ) );

	

	EXEC SQL SELECT	CASH_BAL
				INTO		:l_h_cshbal:l_i_cshbal
				FROM		DL_CASHBAL
				WHERE		GL_CLT	=	( SELECT CLN_GL_ACCOUNT FROM MT_CLIENT
												WHERE CLN_CODE = :chr_p_client );

	IS_ANY_ORA_ERROR;

	if ( APL_ZERO_RESULT_SET )
	{
		*int_p_retval = APL_FAILURE;
		APL_GOBACK_SUCCESS;
	}

	if ( l_i_cshbal == -1 )
	{
		l_h_cshbal = 0;
	}

	if ( l_h_cshbal < l_reqdamount )
	{
		*int_p_retval = APL_FAILURE;
		APL_GOBACK_SUCCESS;
	}
	
	*int_p_retval = APL_SUCCESS;

	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Chk_CustCashBal with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);

  	RETURN_FAILURE :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Chk_CustCashBal with errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);
}



int CR_Rtv_OrdChrVal(	char *chr_p_client, 
							char *chr_p_refno, 
							char *p_ind, 
							char *int_p_retval, 
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	


	

	struct sqlca sqlca;
	char int_l_retval[40] = APL_NULL_STRING;
	char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	

	EXEC SQL VAR int_l_retval IS STRING (40);

	
	
	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
						"Entered Function CR_Rtv_OrdChrVal\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Account is       : %s\n", 
						chr_p_client);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Reference No. is : %s\n", 
						chr_p_refno);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Indicator is     : %s\n", 
						p_ind);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
	}

	
	
	sqlca.sqlcode = 0;

	if (!strcmp(p_ind, "access_stamp"))
		EXEC SQL SELECT ACCESS_STAMP INTO :int_l_retval 
		FROM OR_ORDERDETAILS 
		WHERE CLIENT = RTRIM(:chr_p_client) AND ORD_REFNO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "maker"))
		EXEC SQL SELECT MAKER INTO :int_l_retval 
		FROM OR_ORDERDETAILS 
		WHERE CLIENT = RTRIM(:chr_p_client) AND ORD_REFNO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "order_status"))
		EXEC SQL SELECT ORD_STAT INTO :int_l_retval 
		FROM OR_ORDERDETAILS 
		WHERE CLIENT = RTRIM(:chr_p_client) AND ORD_REFNO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "rowid"))
		EXEC SQL SELECT ROWID INTO :int_l_retval 
		FROM OR_ORDERDETAILS 
		WHERE CLIENT = RTRIM(:chr_p_client) AND ORD_REFNO = RTRIM(:chr_p_refno) 
		FOR UPDATE OF access_stamp;

	if (!strcmp(p_ind, "checker"))
		EXEC SQL SELECT CHECKER INTO :int_l_retval 
		FROM OR_ORDERDETAILS 
		WHERE CLIENT = RTRIM(:chr_p_client) AND ORD_REFNO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "instr_code"))
		EXEC SQL SELECT INSTR_CODE INTO :int_l_retval 
		FROM OR_ORDERDETAILS 
		WHERE CLIENT = RTRIM(:chr_p_client) AND ORD_REFNO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "LAST_EXEC_DATE"))
		EXEC SQL SELECT LAST_EXEC_DATE INTO :int_l_retval 
		FROM OR_ORDERDETAILS 
		WHERE CLIENT = RTRIM(:chr_p_client) AND ORD_REFNO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "islimit"))
		EXEC SQL SELECT LIMIT_IND INTO :int_l_retval 
		FROM OR_ORDERDETAILS 
		WHERE CLIENT = RTRIM(:chr_p_client) AND ORD_REFNO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "buysellflg"))
		EXEC SQL SELECT BUY_SELL_IND INTO :int_l_retval 
		FROM OR_ORDERDETAILS 
		WHERE CLIENT = RTRIM(:chr_p_client) AND ORD_REFNO = RTRIM(:chr_p_refno);

	if (sqlca.sqlcode != -1405)
  { // AIX - Warnings
		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_ORD_NOTFND,
															chr_p_client,
															chr_p_refno,
															APL_NULL_STRING);
  }

	strcpy(int_p_retval, int_l_retval);
	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Rtv_OrdChrVal with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);
 
   RETURN_FAILURE :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Rtv_OrdChrVal with errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);

}




int CR_Rtv_OrdNumVal(	char *chr_p_client, 
							char *chr_p_refno, 
							char *p_ind, 	
							double *int_p_retval, 
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	

	

	struct sqlca sqlca;
	char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
						"Entered Function CR_Rtv_OrdNumVal\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Account is       : %s\n", 
						chr_p_client);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Reference No. is : %s\n", 
						chr_p_refno);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Indicator is     : %s\n", 
						p_ind);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
	}


	

	sqlca.sqlcode = 0;
	if (!strcmp(p_ind, "orderqty"))
		EXEC SQL SELECT ORD_QTY INTO :int_p_retval 
		FROM OR_ORDERDETAILS 
		WHERE CLIENT = RTRIM(:chr_p_client) AND ORD_REFNO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "limitprice"))
		EXEC SQL SELECT LIMIT_PR INTO :int_p_retval 
		FROM OR_ORDERDETAILS 
		WHERE CLIENT = RTRIM(:chr_p_client) AND ORD_REFNO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "EXEC_QTY"))
		EXEC SQL SELECT EXEC_QTY INTO :int_p_retval 
		FROM OR_ORDERDETAILS 
		WHERE CLIENT = RTRIM(:chr_p_client) AND ORD_REFNO = RTRIM(:chr_p_refno);

	if (sqlca.sqlcode != -1405)
  { // AIX - Warnings
		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_DEAL_NF,
															chr_p_client,
															chr_p_refno,
															APL_NULL_STRING);
  }

	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Rtv_OrdNumVal with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);
 
   RETURN_FAILURE :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Rtv_OrdNumVal with errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);

}
int CR_Rtv_OrdCnt( int  *l_retcount,
						 char *chr_p_client,
						 char *p_orderident, 
						 DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   struct sqlca sqlca;
	int int_l_temp_count;

   #ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	EXEC SQL BEGIN DECLARE SECTION;
	EXEC SQL VAR chr_p_client IS STRING;
	EXEC SQL VAR p_orderident IS STRING;
	EXEC SQL END DECLARE SECTION;

	EXEC SQL SELECT COUNT(*) INTO :int_l_temp_count
	FROM OR_ORDERDETAILS WHERE CLIENT = :chr_p_client
	AND ORD_REFNO = :p_orderident;
	IS_ANY_ORA_ERROR

	*l_retcount = int_l_temp_count;
	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Rtv_OrdCnt with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);
 
   RETURN_FAILURE :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Rtv_OrdCnt with errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);
}
