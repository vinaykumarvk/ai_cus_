/*
**    COPYRIGHT NOTICE
**
**   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
**
**   These materials are confidential and proprietary to
**    Polaris Software Lab Limited and no part of these materials should
**    be reproduced, published, transmitted or distributed in any form or
**    by any means, electronic, mechanical, photocopying, recording or
**    otherwise, or stored in any information storage or retrieval system
**    of any nature nor should the materials be disclosed to third parties
**    or used in any other manner for which this is not authorized, without
**    the prior express written authorization of Polaris Software Lab Limited.
**/
/******************************************************************************
**
** Module Name         :      DEAL PROCESSING
**
** File Name           :      DL_UPL_SOH.pc
**
** Description         :      Upload of Statement of Holding
**
**
**
**            Version Control Block
**
** Date        Version     Author           Description        RFS No.
** ---------   --------  ---------------  ------------------   ---------
** 15/09/2006   1.0       AMOL             New File            
**********************************************************************************/

#include<stdio_64.h>
#include <stdlib.h>
#include "Intellect_Common.h"
#include "Intellect_Interface.h"
#include "DL_Interface.h"
#include "BT_Common.h"
#include "Intellect_Error.h"
#include "CO_IndStructdef.h"


EXEC SQL INCLUDE SQLCA.H;

int DL_ModDB_UPL_SOH(DL_UPL_SOH_STRUCT_H *p_dl_upl_soh_struct_h,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	/* Variable Declarations */
	DL_UPL_SOH_STRUCT_I *l_dl_upl_soh_struct_i=NULL;
	DL_HOLD_UPL_STRUCT_I *l_dl_hold_upl_struct_i=NULL;
	DL_HOLD_UPL_STRUCT_H *l_dl_hold_upl_struct_h=NULL;
	struct sqlca sqlca;
	char l_cln_code[11]=APL_NULL_STRING;
	char l_instr_code[9]=APL_NULL_STRING;
	char l_block_type[5]=APL_NULL_STRING;
	printf("\n\n********************Inside Wrapper*********************");

	/*Calloc*/
	l_dl_upl_soh_struct_i=(DL_UPL_SOH_STRUCT_I*)calloc(1,sizeof(DL_UPL_SOH_STRUCT_I));
	APL_MALLOC_FAIL(l_dl_upl_soh_struct_i)
	l_dl_hold_upl_struct_i=(DL_HOLD_UPL_STRUCT_I*)calloc(1,sizeof(DL_HOLD_UPL_STRUCT_I));
	APL_MALLOC_FAIL(l_dl_hold_upl_struct_i)
	l_dl_hold_upl_struct_h=(DL_HOLD_UPL_STRUCT_H*)calloc(1,sizeof(DL_HOLD_UPL_STRUCT_H));
	APL_MALLOC_FAIL(l_dl_hold_upl_struct_h)
	
	printf("\n\n********************After memory allocation*********************");
	if (!strlen(p_dl_upl_soh_struct_h->h_rec_type)) l_dl_upl_soh_struct_i->i_rec_type =-1;
	else l_dl_upl_soh_struct_i->i_rec_type =0;

	if (!strlen(p_dl_upl_soh_struct_h->h_line_no)) l_dl_upl_soh_struct_i->i_line_no =-1;
	else l_dl_upl_soh_struct_i->i_line_no =0;

	if (!strlen(p_dl_upl_soh_struct_h->h_branch_cd)) l_dl_upl_soh_struct_i->i_branch_cd =-1;
	else l_dl_upl_soh_struct_i->i_branch_cd =0;

	if (!strlen(p_dl_upl_soh_struct_h->h_ben_acc_no)) l_dl_upl_soh_struct_i->i_ben_acc_no =-1;
	else l_dl_upl_soh_struct_i->i_ben_acc_no =0;

	if (!strlen(p_dl_upl_soh_struct_h->h_ben_cat)) l_dl_upl_soh_struct_i->i_ben_cat =-1;
	else l_dl_upl_soh_struct_i->i_ben_cat =0;

	if (!strlen(p_dl_upl_soh_struct_h->h_isin)) l_dl_upl_soh_struct_i->i_isin =-1;
	else l_dl_upl_soh_struct_i->i_isin =0;

	if (!strlen(p_dl_upl_soh_struct_h->h_ben_acc_type)) l_dl_upl_soh_struct_i->i_ben_acc_type =-1;
	else l_dl_upl_soh_struct_i->i_ben_acc_type =0;

	if (!strlen(p_dl_upl_soh_struct_h->h_ben_acc_pos)) l_dl_upl_soh_struct_i->i_ben_acc_pos =-1;
	else l_dl_upl_soh_struct_i->i_ben_acc_pos =0;

	if (!strlen(p_dl_upl_soh_struct_h->h_cc_id)) l_dl_upl_soh_struct_i->i_cc_id =-1;
	else l_dl_upl_soh_struct_i->i_cc_id =0;

	if (!strlen(p_dl_upl_soh_struct_h->h_mkt_type)) l_dl_upl_soh_struct_i->i_mkt_type =-1;
	else l_dl_upl_soh_struct_i->i_mkt_type =0;

	if (!strlen(p_dl_upl_soh_struct_h->h_setl_no)) l_dl_upl_soh_struct_i->i_setl_no =-1;
	else l_dl_upl_soh_struct_i->i_setl_no =0;

	if (!strlen(p_dl_upl_soh_struct_h->h_blflag)) l_dl_upl_soh_struct_i->i_blflag =-1;
	else l_dl_upl_soh_struct_i->i_blflag =0;

	if (!strlen(p_dl_upl_soh_struct_h->h_blcode)) l_dl_upl_soh_struct_i->i_blcode =-1;
	else l_dl_upl_soh_struct_i->i_blcode =0;

	if (!strlen(p_dl_upl_soh_struct_h->h_lock_rel_date)) l_dl_upl_soh_struct_i->i_lock_rel_date =-1;
	else l_dl_upl_soh_struct_i->i_lock_rel_date =0;

	if (!strlen(p_dl_upl_soh_struct_h->h_filler)) l_dl_upl_soh_struct_i->i_filler =-1;
	else l_dl_upl_soh_struct_i->i_filler =0;

	if (!strlen(p_dl_upl_soh_struct_h->h_dp_id)) l_dl_upl_soh_struct_i->i_dp_id =-1;
	else l_dl_upl_soh_struct_i->i_dp_id =0;

	if (!strlen(p_dl_upl_soh_struct_h->h_upl_date)) l_dl_upl_soh_struct_i->i_upl_date =-1;
	else l_dl_upl_soh_struct_i->i_upl_date =0;

	if (!strlen(p_dl_upl_soh_struct_h->h_status)) l_dl_upl_soh_struct_i->i_status =-1;
	else l_dl_upl_soh_struct_i->i_status =0;

	if (!strlen(p_dl_upl_soh_struct_h->h_comments)) l_dl_upl_soh_struct_i->i_comments =-1;
	else l_dl_upl_soh_struct_i->i_comments =0;
//AIX Warning Removal -- added (int)
	printf("\n\n*********************Before Insert*********************");
	printf("\nREC_TYPE |%s|, Length |%d|",p_dl_upl_soh_struct_h->h_rec_type,(int)strlen(p_dl_upl_soh_struct_h->h_rec_type));
	printf("\nLINE_NO |%s|, Length |%d|",p_dl_upl_soh_struct_h->h_line_no,(int)strlen(p_dl_upl_soh_struct_h->h_line_no));
	printf("\nBRANCH_CD |%s|, Length |%d|",p_dl_upl_soh_struct_h->h_branch_cd,(int)strlen(p_dl_upl_soh_struct_h->h_branch_cd));
	printf("\nBEN_ACC_NO |%s|, Length |%d|",p_dl_upl_soh_struct_h->h_ben_acc_no,(int)strlen(p_dl_upl_soh_struct_h->h_ben_acc_no));
	printf("\nBEN_CAT |%s|, Length |%d|",p_dl_upl_soh_struct_h->h_ben_cat,(int)strlen(p_dl_upl_soh_struct_h->h_ben_cat));
	printf("\nISIN |%s|, Length |%d|",p_dl_upl_soh_struct_h->h_isin,(int)strlen(p_dl_upl_soh_struct_h->h_isin));
	printf("\nBEN_ACC_TYPE |%s|, Length |%d|",p_dl_upl_soh_struct_h->h_ben_acc_type,(int)strlen(p_dl_upl_soh_struct_h->h_ben_acc_type));
	printf("\nBEN_ACC_POS |%s| ",p_dl_upl_soh_struct_h->h_ben_acc_pos);
	printf("\nCC_ID |%s|, Length |%d|",p_dl_upl_soh_struct_h->h_cc_id,(int)strlen(p_dl_upl_soh_struct_h->h_cc_id));
	printf("\nMKT_TYPE |%s|, Length |%d|",p_dl_upl_soh_struct_h->h_mkt_type,(int)strlen(p_dl_upl_soh_struct_h->h_mkt_type));
	printf("\nSETL_NO |%s|, Length |%d|",p_dl_upl_soh_struct_h->h_setl_no,(int)strlen(p_dl_upl_soh_struct_h->h_setl_no));
	printf("\nBLFLAG |%s|, Length |%d|",p_dl_upl_soh_struct_h->h_blflag,(int)strlen(p_dl_upl_soh_struct_h->h_blflag));
	printf("\nBLCODE |%s|, Length |%d|",p_dl_upl_soh_struct_h->h_blcode,(int)strlen(p_dl_upl_soh_struct_h->h_blcode));
	printf("\nLOCK_REL_DATE |%s|, Length |%d|",p_dl_upl_soh_struct_h->h_lock_rel_date,(int)strlen(p_dl_upl_soh_struct_h->h_lock_rel_date));
	printf("\nFILLER |%s|, Length |%d|",p_dl_upl_soh_struct_h->h_filler,(int)strlen(p_dl_upl_soh_struct_h->h_filler));
	printf("\nDP_ID |%s|, Length |%d|",p_dl_upl_soh_struct_h->h_dp_id,(int)strlen(p_dl_upl_soh_struct_h->h_dp_id));
	printf("\nUPL_DATE |%s|, Length |%d|",p_dl_upl_soh_struct_h->h_upl_date,(int)strlen(p_dl_upl_soh_struct_h->h_upl_date));
	printf("\nSTATUS |%s|, Length |%d|",p_dl_upl_soh_struct_h->h_status,(int)strlen(p_dl_upl_soh_struct_h->h_status));
	printf("\nCOMMENTS |%s|, Length |%d|",p_dl_upl_soh_struct_h->h_comments,(int)strlen(p_dl_upl_soh_struct_h->h_comments));

	EXEC SQL INSERT INTO DL_UPL_SOH VALUES (:p_dl_upl_soh_struct_h:l_dl_upl_soh_struct_i);
	if(sqlca.sqlcode)
	{
		printf("\n Failed SQLCODE is |%d|\n ",sqlca.sqlcode);
	}
	IS_ANY_ORA_ERROR

	/*Client CD retrival from MT_CLI_DEPO_MAP*/
	EXEC SQL SELECT TRIM(CLN_CODE) INTO :l_cln_code FROM MT_CLI_DEPO_MAP WHERE TRIM(CLN_DEPO_MAP_CLIENT_ID) = TRIM(:p_dl_upl_soh_struct_h->h_ben_acc_no) AND TRIM(CLN_DEPO_CODE)='NSDL' AND STATUS='AA';
	if(sqlca.sqlcode)
	{
		printf("\n Failed SQLCODE in Client Code Retrival |%d|\n ",sqlca.sqlcode);
	}
	IS_ANY_ORA_ERROR
	printf("\n\tClient Code:|%s|",l_cln_code);

	/*INSTR CODE retrival from MT_INSTRUMENT*/
	printf("\nISIN:|%s|",p_dl_upl_soh_struct_h->h_isin);
	EXEC SQL  SELECT TRIM(INSTR_CODE) into :l_instr_code FROM MT_INSTRUMENT WHERE INSTR_ISIN=:p_dl_upl_soh_struct_h->h_isin AND STATUS='AA';
	if(sqlca.sqlcode)
	{
		printf("\n Failed SQLCODE in Instr_Code Retrival |%d|\n ",sqlca.sqlcode);
	}
	IS_ANY_ORA_ERROR
	printf("\n\tINSTR Code:|%s|",l_instr_code );
	
	/*Block Type Retrival*/
	if(!strcmp(p_dl_upl_soh_struct_h->h_blflag,"F"))
		strcpy(l_block_type,"FREE");

	/*	ISKB_2448 Change of block type	*/
	if(!strcmp(p_dl_upl_soh_struct_h->h_blflag,"L"))
		strcpy(l_block_type,"BLCK");
/*		strcpy(l_block_type,"CABL");	*/

	if(!strcmp(p_dl_upl_soh_struct_h->h_blflag,"B"))
		strcpy(l_block_type,"BLCK");
	printf("\n\nBlock Type: |%s|",l_block_type);	/**Isolveid-142:Changes:AmitB:200307:printf instead of fprintf**/

	strcpy(l_dl_hold_upl_struct_h->h_client,l_cln_code);
	strcpy(l_dl_hold_upl_struct_h->h_instr_code,l_instr_code);
	strcpy(l_dl_hold_upl_struct_h->h_qty,p_dl_upl_soh_struct_h->h_ben_acc_pos);
	strcpy(l_dl_hold_upl_struct_h->h_upl_date,p_dl_upl_soh_struct_h->h_upl_date);
	strcpy(l_dl_hold_upl_struct_h->h_status,"UU");
	strcpy(l_dl_hold_upl_struct_h->h_dp_id,"NSDL");
	strcpy(l_dl_hold_upl_struct_h->h_block_type,l_block_type);
	
	if (!strlen(l_dl_hold_upl_struct_h->h_client)) l_dl_hold_upl_struct_i->i_client =-1;
	else l_dl_hold_upl_struct_i->i_client =0;
	
	if (!strlen(l_dl_hold_upl_struct_h->h_instr_code)) l_dl_hold_upl_struct_i->i_instr_code =-1;
	else l_dl_hold_upl_struct_i->i_instr_code =0;
	
	if (!strlen(l_dl_hold_upl_struct_h->h_qty)) l_dl_hold_upl_struct_i->i_qty =-1;
	else l_dl_hold_upl_struct_i->i_qty =0;
	
	if (!strlen(l_dl_hold_upl_struct_h->h_upl_date)) l_dl_hold_upl_struct_i->i_upl_date =-1;
	else l_dl_hold_upl_struct_i->i_upl_date =0;
	
	if (!strlen(l_dl_hold_upl_struct_h->h_status)) l_dl_hold_upl_struct_i->i_status =-1;
	else l_dl_hold_upl_struct_i ->i_status =0;
	
	if (!strlen(l_dl_hold_upl_struct_h->h_dp_id)) l_dl_hold_upl_struct_i->i_dp_id =-1;
	else l_dl_hold_upl_struct_i->i_dp_id =0;
	
	if (!strlen(l_dl_hold_upl_struct_h->h_block_type)) l_dl_hold_upl_struct_i->i_block_type =-1;
	else l_dl_hold_upl_struct_i ->i_block_type =0;

	/*Insertion into DL_HOLD_UPL Table*/
	EXEC SQL INSERT INTO DL_HOLD_UPL  VALUES (:l_dl_hold_upl_struct_h:l_dl_hold_upl_struct_i);
	if(sqlca.sqlcode)
	{
		printf("\n Failed SQLCODE in INSERT DL_HOLD_UPL is |%d|\n ",sqlca.sqlcode);
	}
	IS_ANY_ORA_ERROR

	APL_GOBACK_SUCCESS		 		 		 		 		 		 		 

	RETURN_SUCCESS: 
		printf("\n Sucess Inside DL_ModDBDL_upl_soh \n");		 		 
		return(APL_SUCCESS);

	RETURN_FAILURE:
		printf("\n Error Inside DL_ModDBDL_upl_soh \n");
		return(APL_FAILURE);

} 

