

 
 
 
 
 
 
 
#include "CO_HostStructdef.h" 
#include "MS_Swift.h"
#define SETTLEMENT 6               

EXEC SQL INCLUDE SQLCA.H; 
double char_l1_val = 0.0;            /* Added by Gouse - Decimal Length for MF- 01/10/2011 */  
 
int CR_Chk_LocChgMkrChkr(char *chr_p_client, char *p_seqno, char *p_user,DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

int CR_Rtv_LocChgRefNo(char *p_locchgseqno, DEBUG_INFO_STRUCT_H **l_debug_info_ptr);
int CR_Rtv_LocChgTrdRefNo(char *p_dfident,
		                  char *p_rfident, DEBUG_INFO_STRUCT_H **l_debug_info_ptr);
int CR_Proc_LocChgPosStat(SYS_DL_DEAL_STRUCT_H *l_sys_dl_deal_struct_hl, char *p_instr_code,
		                  DEBUG_INFO_STRUCT_H **l_debug_info_ptr);
 
 
int CR_Mod_LocChg(DL_LOCNCHG_STRUCT_H *p_dl_locnchg_struct_h_a,
		char *p_locchgseqno, 
		INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h, DEBUG_INFO_STRUCT_H **l_debug_info_ptr) 
{ 
	extern int MS_Mod_MsgStat(MS_MSGSTAT_STRUCT,int *,DEBUG_INFO_STRUCT_H **);

	DL_LOCNCHG_STRUCT_I *l_dl_locnchg_struct_i=NULL; 
	SYS_DL_DEAL_STRUCT_H *l_sys_dl_deal_struct_hl=NULL;
	int *int_p_trdrepseqnum=NULL;
	INTL_ENV_DATA_STRUCT_H *p_intl_envdata_struct_h=NULL;
	DL_DEAL_FAIL_STRUCT_H *l_dl_deal_fail_struct_hb=NULL;
	struct sqlca sqlca; 
    short int_l_error_flg = APL_SUCCESS;
	double l_availquantity = 0;
	double l_h_safekeep_pos = 0.0 ;
	short l_i_safek = 0;
	char l_block_type[5] =	APL_NULL_STRING; 
	char chr_acc_stamp_compare[APL_DATE_LEN]; 
	char chr_sys_access_stamp[APL_DATE_LEN]; 
	char chr_sys_access_date[APL_DATE_LEN]; 
	char checker[15]; 
   char h_clt_class[3]=APL_NULL_STRING; 
	char h_classcd[5]= APL_NULL_STRING; 
	char chr_l_h_locchg_stat[APL_STATUS_LEN] = APL_NULL_STRING; 
   short int_cond_exists=0; 
	short int_l_jocondexists = 0; 
	short i_clt_class=0; 
	short i_classcd = 0 ; 
	short l_i_maker, l_i_makerdt, l_i_checker, l_i_checkerdt,  
			l_i_access_stamp, l_i_access_stamp_compare,
			l_i_locchg_stat;
	short int_error_flag = APL_SUCCESS;				 

	MS_MSGSTAT_STRUCT l_ms_msgstat_structa;
	int int_l_ret_imsgstat=0;
 
	char  chr_l_msg_flg_53x[2]; 
	int int_l_txn_type=0;    
	char chr_l_unique_ref_num[APL_UNIQUE_REF_NUM_LEN]=APL_NULL_STRING;    
	char l_sys_date[APL_DATE_LEN] = APL_NULL_STRING;

/** New Variable By AmitB 17/08/2006 **/
	char temp_location_cd[5] = APL_NULL_STRING;

#ifdef APL_THREADS 
	APL_SET_CONTEXT 
	EXEC SQL CONTEXT USE :my_ctx_local; 
#endif 
 
			Alert("Biju 2\n");
			CO_ProcMonitor(APL_OUT_FILE, "Biju 1\n", NULL, NULL); 
			Alert("Biju 2\n");
	APL_IF_DEBUG 
		{ 
			CO_ProcMonitor(APL_OUT_FILE, "Entered Function CR_Mod_LocChg.\n", NULL, p_intl_envdatastruct_h); 
		} 
	l_sys_dl_deal_struct_hl = (SYS_DL_DEAL_STRUCT_H *)calloc(1, sizeof(SYS_DL_DEAL_STRUCT_H));
	APL_MALLOC_FAIL(l_sys_dl_deal_struct_hl);
	p_intl_envdata_struct_h=(INTL_ENV_DATA_STRUCT_H *)calloc(1, sizeof(INTL_ENV_DATA_STRUCT_H));
	APL_MALLOC_FAIL(p_intl_envdata_struct_h);

	int_p_trdrepseqnum = (int *)calloc(1, sizeof(int));
	l_dl_deal_fail_struct_hb = (DL_DEAL_FAIL_STRUCT_H *)calloc(1,sizeof(DL_DEAL_FAIL_STRUCT_H));
	APL_MALLOC_FAIL(int_p_trdrepseqnum);

	EXEC SQL VAR p_dl_locnchg_struct_h_a->h_dl_client IS STRING;
	EXEC SQL VAR p_dl_locnchg_struct_h_a->h_sequenceno IS STRING;
	EXEC SQL VAR p_dl_locnchg_struct_h_a->h_instr_code IS STRING;
	EXEC SQL VAR p_dl_locnchg_struct_h_a->h_infos IS STRING;
	EXEC SQL VAR p_dl_locnchg_struct_h_a->h_frm_loc IS STRING;
	EXEC SQL VAR p_dl_locnchg_struct_h_a->h_to_location IS STRING;
	EXEC SQL VAR p_dl_locnchg_struct_h_a->h_maker IS STRING;
	EXEC SQL VAR p_dl_locnchg_struct_h_a->h_checker IS STRING;
	EXEC SQL VAR p_dl_locnchg_struct_h_a->h_df_txnr_iden IS STRING;
	EXEC SQL VAR p_dl_locnchg_struct_h_a->h_rf_dl_ident IS STRING;
	EXEC SQL VAR p_dl_locnchg_struct_h_a->h_loc_chng_stat IS STRING;
	EXEC SQL VAR p_dl_locnchg_struct_h_a->h_uniq_ident_no IS STRING;
	EXEC SQL VAR p_dl_locnchg_struct_h_a->h_dfsettdate IS STRING;
	EXEC SQL VAR p_dl_locnchg_struct_h_a->h_rfsettdate IS STRING;
	EXEC SQL VAR h_clt_class IS STRING; 
	EXEC SQL VAR h_classcd IS STRING; 
	EXEC SQL VAR p_dl_locnchg_struct_h_a->h_unblock_date IS STRING; /*chgs by amish */
	EXEC SQL VAR p_dl_locnchg_struct_h_a->h_frm_type IS STRING;
	EXEC SQL VAR p_dl_locnchg_struct_h_a->h_change IS STRING;
	EXEC SQL VAR p_dl_locnchg_struct_h_a->h_to_type IS STRING;
	EXEC SQL VAR p_dl_locnchg_struct_h_a->h_trans_type IS STRING;

	l_dl_locnchg_struct_i=(DL_LOCNCHG_STRUCT_I*)calloc(1,sizeof(DL_LOCNCHG_STRUCT_I)); 
	APL_MALLOC_FAIL(l_dl_locnchg_struct_i); 

	l_i_maker =0; 
	l_i_makerdt =0; 
	l_i_checker =0; 
	l_i_checkerdt =0; 
	l_i_access_stamp =0; 
	l_i_access_stamp_compare =0; 
	l_i_locchg_stat =0;
 
	 
	if (!strlen(p_dl_locnchg_struct_h_a->h_dl_client)) l_dl_locnchg_struct_i->i_dl_client=-1; 
		else l_dl_locnchg_struct_i->i_dl_client=0; 
 
	if (!strlen(p_dl_locnchg_struct_h_a->h_sequenceno)) l_dl_locnchg_struct_i->i_sequenceno=-1; 
		else l_dl_locnchg_struct_i->i_sequenceno=0; 
 
	if (!strlen(p_dl_locnchg_struct_h_a->h_dlt)) l_dl_locnchg_struct_i->i_dlt=-1; 
		else l_dl_locnchg_struct_i->i_dlt=0; 
 
	if (!strlen(p_dl_locnchg_struct_h_a->h_setldt)) l_dl_locnchg_struct_i->i_setldt=-1; 
		else l_dl_locnchg_struct_i->i_setldt=0; 
 
	if (!strlen(p_dl_locnchg_struct_h_a->h_instr_code)) l_dl_locnchg_struct_i->i_instr_code=-1; 
		else l_dl_locnchg_struct_i->i_instr_code=0; 
 
	if (!strlen(p_dl_locnchg_struct_h_a->h_newdt)) l_dl_locnchg_struct_i->i_newdt=-1; 
		else l_dl_locnchg_struct_i->i_newdt=0; 
 
	if (!strlen(p_dl_locnchg_struct_h_a->h_maker_dt)) l_dl_locnchg_struct_i->i_maker_dt=-1; 
		else l_dl_locnchg_struct_i->i_dl_client=0; 
 
	if (!strlen(p_dl_locnchg_struct_h_a->h_checker)) l_dl_locnchg_struct_i->i_checker=-1; 
		else l_dl_locnchg_struct_i->i_checker=0; 
 
	if (!strlen(p_dl_locnchg_struct_h_a->h_checker_dt)) l_dl_locnchg_struct_i->i_checker_dt=-1; 
		else l_dl_locnchg_struct_i->i_checker_dt=0; 
 
	if (!strlen(p_dl_locnchg_struct_h_a->h_maker)) l_dl_locnchg_struct_i->i_maker=-1; 
		else l_dl_locnchg_struct_i->i_maker=0; 
 
	if (!strlen(p_dl_locnchg_struct_h_a->h_access_stamp)) l_dl_locnchg_struct_i->i_access_stamp=-1; 
		else l_dl_locnchg_struct_i->i_access_stamp=0; 
 
	if (!strlen(p_dl_locnchg_struct_h_a->h_frm_loc)) l_dl_locnchg_struct_i->i_frm_loc=-1; 
		else l_dl_locnchg_struct_i->i_frm_loc=0; 

	if (!strlen(p_dl_locnchg_struct_h_a->h_to_location)) l_dl_locnchg_struct_i->i_to_location=-1; 
		else l_dl_locnchg_struct_i->i_to_location=0; 

	if (!strlen(p_dl_locnchg_struct_h_a->h_infos)) l_dl_locnchg_struct_i->i_infos=-1; 
		else l_dl_locnchg_struct_i->i_infos=0; 

	if (!strlen(p_dl_locnchg_struct_h_a->h_df_txnr_iden)) l_dl_locnchg_struct_i->i_df_txnr_iden=-1; 
		else l_dl_locnchg_struct_i->i_df_txnr_iden=0; 

	if (!strlen(p_dl_locnchg_struct_h_a->h_rf_dl_ident)) l_dl_locnchg_struct_i->i_rf_dl_ident=-1; 
		else l_dl_locnchg_struct_i->i_rf_dl_ident=0; 

	if (!strlen(p_dl_locnchg_struct_h_a->h_dealstat)) l_dl_locnchg_struct_i->i_dealstat=-1; 
		else l_dl_locnchg_struct_i->i_dealstat=0; 

	if (!strlen(p_dl_locnchg_struct_h_a->h_frm_type)) l_dl_locnchg_struct_i->i_frm_type=-1; 
		else l_dl_locnchg_struct_i->i_frm_type=0; 
	
	if (!strlen(p_dl_locnchg_struct_h_a->h_to_type)) l_dl_locnchg_struct_i->i_to_type=-1; 
		else l_dl_locnchg_struct_i->i_to_type=0; 

	if (!strlen(p_dl_locnchg_struct_h_a->h_change)) l_dl_locnchg_struct_i->i_change=-1; 
		else l_dl_locnchg_struct_i->i_change=0; 

	if (!strlen(p_dl_locnchg_struct_h_a->h_unblock_date)) l_dl_locnchg_struct_i->i_unblock_date=-1; 
		else l_dl_locnchg_struct_i->i_unblock_date=0; 

    if (!strlen(p_dl_locnchg_struct_h_a->h_trans_type)) l_dl_locnchg_struct_i->i_trans_type=-1; 
		else l_dl_locnchg_struct_i->i_trans_type=0; 

	if (CO_RtvSysDt(chr_sys_access_date, l_debug_info_ptr) != APL_SUCCESS) 
		{ 
			APL_GOBACK_FAIL 
		} 

	if (CO_RtvSysDtTime(chr_sys_access_stamp, l_debug_info_ptr) != APL_SUCCESS) 
		{ 
			APL_GOBACK_FAIL 
		} 

	if (APL_SUCCESS == CO_Chk_CntryEnabled( "TRADE_MAINT","NTRD_NODLT",&int_l_jocondexists,l_debug_info_ptr))
	{
		if (int_l_jocondexists) 
		{
				EXEC SQL SELECT CLASSCD INTO :h_classcd:i_classcd FROM MT_INSTRUMENT
                                   WHERE instr_code = :p_dl_locnchg_struct_h_a->h_instr_code;

            IS_ANY_ORA_ERROR;
				if ((strcmp(h_classcd,"NTRD")) == 0)
         	{
            	CO_InsertErr(l_debug_info_ptr,ERR_NTRDTYPE_INSTR_NOTALLOWED,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
            	APL_GOBACK_FAIL
         	}
		}
	}
	else
	{
		APL_GOBACK_FAIL
	}
	

  
   memset(chr_l_msg_flg_53x,APL_NULL_CHAR,2);
   strcpy(chr_l_msg_flg_53x,MSG_FLG_53X);
/*ISKB_1621 - SWIFT Upgradation - MT536 messages for loc trade changes starts*/
 strcat(chr_l_msg_flg_53x,MSG_INTERMEDIATE);
  strcat(chr_l_msg_flg_53x,MSG_FLG_572);
  printf("Testing 1621 Inside ProLoc file :chr_l_msg_flg_53x MSG_STAT :: |%s|\n",chr_l_msg_flg_53x);
/*ISKB_1621 ends */

    
       /* Added by Gouse - Decimal Length for MF- 01/10/2011 - Start */
	 
       IF_COND_EXISTS("QTY_RND_MF_MKT","QTY_RND_FOR_MF_MKT")
       {
                CR_Proc_InstrQtyRound_Chk(p_dl_locnchg_struct_h_a->h_qty,p_dl_locnchg_struct_h_a->h_instr_code, &char_l1_val, l_debug_info_ptr );

                p_dl_locnchg_struct_h_a->h_qty =char_l1_val;
	 
        }
       /* Added by Gouse - Decimal Length for MF- 01/10/2011 - End */	 	 
	 
 
	if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_INPUT)) 
	{ 
		APL_IF_DEBUG 
			{ 
				CO_ProcMonitor(APL_OUT_FILE, "Entered Input Mode of	processtion CR_Mod_LocChg.\n", 
					NULL, p_intl_envdatastruct_h); 
			} 
 
		strcpy(p_dl_locnchg_struct_h_a->h_loc_chng_stat,STATUS_UAUTH); 
		l_dl_locnchg_struct_i->i_loc_chng_stat = 0; 
		strcpy(p_dl_locnchg_struct_h_a->h_maker,p_intl_envdatastruct_h->usr); 
		l_dl_locnchg_struct_i->i_maker = 0; 
		strcpy(p_dl_locnchg_struct_h_a->h_maker_dt,chr_sys_access_stamp); 
		l_dl_locnchg_struct_i->i_maker_dt = 0; 
		strcpy(p_dl_locnchg_struct_h_a->h_access_stamp,chr_sys_access_stamp); 
		l_dl_locnchg_struct_i->i_access_stamp = 0; 
 
		Alert("p_dl_locnchg_struct_h_a->h_sequenceno is |%s|",p_dl_locnchg_struct_h_a->h_sequenceno);
 
		if (!strcmp(p_dl_locnchg_struct_h_a->h_sequenceno,APL_NULL_STRING) )// done by Ekta
		{
			if(CR_Rtv_LocChgRefNo(p_locchgseqno, l_debug_info_ptr) != APL_SUCCESS)
			{
				APL_GOBACK_FAIL;	
			}
		
		strcpy(p_dl_locnchg_struct_h_a->h_sequenceno, p_locchgseqno);
		l_dl_locnchg_struct_i->i_sequenceno=0;
		}
		Alert("p_dl_locnchg_struct_h_a->h_sequenceno is |%s|",p_dl_locnchg_struct_h_a->h_sequenceno);
		int_l_txn_type=SETTLEMENT;
		if (MS_Rtv_RefNo_A(int_l_txn_type,chr_l_unique_ref_num,l_debug_info_ptr) == APL_FAILURE)
		{
			CO_ProcMonitor(APL_OUT_FILE,"Failure from GenUniqRefNum", NULL, p_intl_envdatastruct_h);
			APL_GOBACK_FAIL;
		}
		strcpy(p_dl_locnchg_struct_h_a->h_uniq_ident_no,chr_l_unique_ref_num);
		/* add--getting available qty for csgl-- start */ 
		Alert("p_dl_locnchg_struct_h_a->h_change is |%s|",p_dl_locnchg_struct_h_a->h_change);
		Alert("p_dl_locnchg_struct_h_a->h_frm_type is |%s|",p_dl_locnchg_struct_h_a->h_frm_type);
		Alert("p_dl_locnchg_struct_h_a->h_frm_type is |%s|",p_dl_locnchg_struct_h_a->h_frm_type);
		if(strcmp(p_dl_locnchg_struct_h_a->h_change,"B")==0)
		{
			if(strcmp(p_dl_locnchg_struct_h_a->h_frm_type,"F")==0)
				stpcpy(l_block_type,"FREE");
			else if(strcmp(p_dl_locnchg_struct_h_a->h_frm_type,"B")==0)
				stpcpy(l_block_type,"BLCK");
			else if(strcmp(p_dl_locnchg_struct_h_a->h_frm_type,"C")==0)
				stpcpy(l_block_type,"CABL");
			
			if ( APL_FAILURE == DL_Chk_AvlPos(	p_dl_locnchg_struct_h_a->h_dl_client,
															p_dl_locnchg_struct_h_a->h_instr_code,
															p_dl_locnchg_struct_h_a->h_frm_loc,
															'Y','N','N','Y','Y','N','N','N',
															l_block_type,
															&l_availquantity,
															l_debug_info_ptr ))
			{	
				APL_GOBACK_FAIL;
			}
			if ( l_availquantity < p_dl_locnchg_struct_h_a->h_qty )
				{
					printf("\n available qty=|%lf| \n",l_availquantity);
					printf("\n Transfer qty=|%lf| \n",p_dl_locnchg_struct_h_a->h_qty);
					if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
																	ERR_DEAL_NENUFPOSN,
																	p_dl_locnchg_struct_h_a->h_dl_client,
																	p_dl_locnchg_struct_h_a->h_instr_code,
																	APL_NULL_STRING,
																	__LINE__,
																	__FILE__ ) )
				{
						APL_NULL_STRING;
					}
					int_l_error_flg = APL_FAILURE;
				}
						printf("l_availquantity **************%lf,p_dl_locnchg_struct_h_a->h_qty is ***%lf\n",l_availquantity,p_dl_locnchg_struct_h_a->h_qty);
		}
		if(strcmp(p_dl_locnchg_struct_h_a->h_change,"B")==0  && strcmp(p_dl_locnchg_struct_h_a->h_frm_type,"B")==0 && strcmp(p_dl_locnchg_struct_h_a->h_to_type,"F")==0 && strcmp(p_dl_locnchg_struct_h_a->h_frm_loc,"CSGL")==0 && strcmp(p_dl_locnchg_struct_h_a->h_to_location,"CSGL")==0)
		{
			printf("new logic\n");
			
			
        if ( APL_FAILURE == DL_Chk_AvlPos(	p_dl_locnchg_struct_h_a->h_dl_client,
															p_dl_locnchg_struct_h_a->h_instr_code,
															p_dl_locnchg_struct_h_a->h_frm_loc,
															'Y','N','N','Y','Y','N','N','N',
															"BLCK",
															&l_availquantity,
															l_debug_info_ptr ))
			{	
				APL_GOBACK_FAIL;
			}
						printf("l_availquantityl_availquantity is **************%lf,p_dl_locnchg_struct_h_a->h_qty is ***%lf\n",l_availquantity,p_dl_locnchg_struct_h_a->h_qty);
		   			
	
				
					if ( l_availquantity < p_dl_locnchg_struct_h_a->h_qty )
				{
					printf("\n available qty=|%lf| \n",l_availquantity);
					printf("\n Transfer qty=|%lf| \n",p_dl_locnchg_struct_h_a->h_qty);
					if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
																	ERR_DEAL_NENUFPOSN,
																	p_dl_locnchg_struct_h_a->h_dl_client,
																	p_dl_locnchg_struct_h_a->h_instr_code,
																	APL_NULL_STRING,
																	__LINE__,
																	__FILE__ ) )
				{
						APL_NULL_STRING;
					}
					int_l_error_flg = APL_FAILURE;
				}
				printf("\n l_availquantity qty=|%lf| \n",l_availquantity);
				printf("\n p_dl_locnchg_struct_h_a->h_qty=|%lf| \n", p_dl_locnchg_struct_h_a->h_qty);
		
					if ( l_availquantity >= p_dl_locnchg_struct_h_a->h_qty )
					{
					EXEC SQL select (B_avl - f_avl) as avl INTO :l_h_safekeep_pos:l_i_safek from (select nvl(sum(qty),0) as B_avl  from DL_LOCNCHG where CLIENT =:p_dl_locnchg_struct_h_a->h_dl_client and INSTR_CODE=:p_dl_locnchg_struct_h_a->h_instr_code and TRANSFER_TYPE=:p_dl_locnchg_struct_h_a->h_trans_type  AND FRM_TYPE='F' and TO_TYPE='B' and FRM_LOC=:p_dl_locnchg_struct_h_a->h_frm_loc and TO_LOCATION=:p_dl_locnchg_struct_h_a->h_to_location and LOC_CHNG_STAT='AA' ),	(select nvl(sum(qty),0) as f_avl from DL_LOCNCHG where CLIENT = :p_dl_locnchg_struct_h_a->h_dl_client and INSTR_CODE=:p_dl_locnchg_struct_h_a->h_instr_code and TRANSFER_TYPE=:p_dl_locnchg_struct_h_a->h_trans_type  AND FRM_TYPE='B' and TO_TYPE='F' and FRM_LOC=:p_dl_locnchg_struct_h_a->h_frm_loc and TO_LOCATION=:p_dl_locnchg_struct_h_a->h_to_location and LOC_CHNG_STAT='AA');
				
					IS_ANY_ORA_ERROR
				printf("\n available qty=|%lf| \n",l_h_safekeep_pos);
				printf("\n p_dl_locnchg_struct_h_a->h_qty=|%lf| \n", p_dl_locnchg_struct_h_a->h_qty);
						if ( l_h_safekeep_pos < p_dl_locnchg_struct_h_a->h_qty)
				{
					printf("\n available qty=|%lf| \n",l_availquantity);
					printf("\n Transfer qty=|%lf| \n",p_dl_locnchg_struct_h_a->h_qty);
					if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
																	ERR_DEAL_NENUFPOSN,
																	p_dl_locnchg_struct_h_a->h_dl_client,
																	p_dl_locnchg_struct_h_a->h_instr_code,
																	APL_NULL_STRING,
																	__LINE__,
																	__FILE__ ) )
					{	
						APL_NULL_STRING;
					}
					int_l_error_flg = APL_FAILURE;
				}
		}
		}
			/* add-- getting available qty for csgl-- end */ 

		EXEC SQL INSERT INTO DL_LOCNCHG VALUES  
			(:p_dl_locnchg_struct_h_a:l_dl_locnchg_struct_i); 
 
		IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_REC_EXIST, APL_NULL_STRING,
				APL_NULL_STRING, APL_NULL_STRING) 
 
	}		 
 
	 

	if (!strcmp(p_intl_envdatastruct_h->h_mode, APL_FUNC_MODIFY)) 
	{ 
		l_i_checker =-1; 
		l_i_checkerdt=-1; 
		strcpy(p_dl_locnchg_struct_h_a->h_checker, APL_NULL_STRING); 
		strcpy(p_dl_locnchg_struct_h_a->h_checker_dt, APL_NULL_STRING); 
 
		APL_IF_DEBUG 
			{ 
				CO_ProcMonitor(APL_OUT_FILE, "Entered Modify Mode of processtion CR_Mod_LocChg.\n", 
					NULL, p_intl_envdatastruct_h); 
			} 
 
		 

		EXEC SQL SELECT ACCESS_STAMP, LOC_CHNG_STAT  
		INTO :chr_acc_stamp_compare:l_i_access_stamp_compare, 
		     :chr_l_h_locchg_stat:l_i_locchg_stat FROM DL_LOCNCHG
		WHERE CLIENT=:p_dl_locnchg_struct_h_a->h_dl_client AND  
			   IDEN_NO=:p_dl_locnchg_struct_h_a->h_sequenceno 
		FOR UPDATE ;
 
		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET( 
				ERR_REC_NOTFND,  
				APL_NULL_STRING, 
				APL_NULL_STRING, 
				APL_NULL_STRING);

		if (!strcmp(p_dl_locnchg_struct_h_a->h_access_stamp, chr_acc_stamp_compare))
		{
		  /*	
			if ((!strcmp(chr_l_h_locchg_stat, STATUS_UAUTH)) || 
			       (!strcmp(chr_l_h_locchg_stat, STATUS_DEL_UAUTH)) ) 
					 */
			if(!strcmp(chr_l_h_locchg_stat,STATUS_UAUTH))
		   {

			strcpy(p_dl_locnchg_struct_h_a->h_access_stamp,chr_sys_access_stamp); 
			l_dl_locnchg_struct_i->i_access_stamp =0; 
			strcpy(p_dl_locnchg_struct_h_a->h_loc_chng_stat,STATUS_UAUTH); 
			l_dl_locnchg_struct_i->i_loc_chng_stat =0; 
		 
		/* add--getting available qty for csgl-- start */ 
		if(strcmp(p_dl_locnchg_struct_h_a->h_change,"B")==0)
		{
			if(strcmp(p_dl_locnchg_struct_h_a->h_frm_type,"F")==0)
				stpcpy(l_block_type,"FREE");
			else if(strcmp(p_dl_locnchg_struct_h_a->h_frm_type,"B")==0)
				stpcpy(l_block_type,"BLCK");
			else if(strcmp(p_dl_locnchg_struct_h_a->h_frm_type,"C")==0)
				stpcpy(l_block_type,"CABL");
			
			if ( APL_FAILURE == DL_Chk_AvlPos(	p_dl_locnchg_struct_h_a->h_dl_client,
															p_dl_locnchg_struct_h_a->h_instr_code,
															p_dl_locnchg_struct_h_a->h_frm_loc,
															'Y','N','N','Y','Y','N','N','N',
															l_block_type,
															&l_availquantity,
															l_debug_info_ptr ))
			{	
				APL_GOBACK_FAIL;
			}
			if ( l_availquantity < p_dl_locnchg_struct_h_a->h_qty )
				{
					printf("\n available qty=|%lf| \n",l_availquantity);
					printf("\n Transfer qty=|%lf| \n",p_dl_locnchg_struct_h_a->h_qty);
					if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
																	ERR_DEAL_NENUFPOSN,
																	p_dl_locnchg_struct_h_a->h_dl_client,
																	p_dl_locnchg_struct_h_a->h_instr_code,
																	APL_NULL_STRING,
																	__LINE__,
																	__FILE__ ) )
				{
						APL_NULL_STRING;
					}
					int_l_error_flg = APL_FAILURE;
				}
						printf("l_availquantity **************%lf,p_dl_locnchg_struct_h_a->h_qty is ***%lf\n",l_availquantity,p_dl_locnchg_struct_h_a->h_qty);
		}
		if(strcmp(p_dl_locnchg_struct_h_a->h_change,"B")==0  && strcmp(p_dl_locnchg_struct_h_a->h_frm_type,"B")==0 && strcmp(p_dl_locnchg_struct_h_a->h_to_type,"F")==0  && strcmp(p_dl_locnchg_struct_h_a->h_frm_loc,"CSGL")==0 && strcmp(p_dl_locnchg_struct_h_a->h_to_location,"CSGL")==0)
        {
			printf("new logic\n");
			
			
        if ( APL_FAILURE == DL_Chk_AvlPos(	p_dl_locnchg_struct_h_a->h_dl_client,
															p_dl_locnchg_struct_h_a->h_instr_code,
															p_dl_locnchg_struct_h_a->h_frm_loc,
															'Y','N','N','Y','Y','N','N','N',
															"BLCK",
															&l_availquantity,
															l_debug_info_ptr ))
			{	
				APL_GOBACK_FAIL;
			}
						printf("l_availquantityl_availquantity is **************%lf,p_dl_locnchg_struct_h_a->h_qty is ***%lf\n",l_availquantity,p_dl_locnchg_struct_h_a->h_qty);
		   			
	
				
					if ( l_availquantity < p_dl_locnchg_struct_h_a->h_qty )
				{
					printf("\n available qty=|%lf| \n",l_availquantity);
					printf("\n Transfer qty=|%lf| \n",p_dl_locnchg_struct_h_a->h_qty);
					if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
																	ERR_DEAL_NENUFPOSN,
																	p_dl_locnchg_struct_h_a->h_dl_client,
																	p_dl_locnchg_struct_h_a->h_instr_code,
																	APL_NULL_STRING,
																	__LINE__,
																	__FILE__ ) )
				{
						APL_NULL_STRING;
					}
					int_l_error_flg = APL_FAILURE;
				}
				printf("\n l_availquantity qty=|%lf| \n",l_availquantity);
				printf("\n p_dl_locnchg_struct_h_a->h_qty=|%lf| \n", p_dl_locnchg_struct_h_a->h_qty);
				
					if ( l_availquantity >= p_dl_locnchg_struct_h_a->h_qty )
					{
					EXEC SQL select (B_avl - f_avl) as avl INTO :l_h_safekeep_pos:l_i_safek from (select nvl(sum(qty),0) as B_avl  from DL_LOCNCHG where CLIENT =:p_dl_locnchg_struct_h_a->h_dl_client and INSTR_CODE=:p_dl_locnchg_struct_h_a->h_instr_code and TRANSFER_TYPE=:p_dl_locnchg_struct_h_a->h_trans_type  AND FRM_TYPE='F' and TO_TYPE='B' and FRM_LOC=:p_dl_locnchg_struct_h_a->h_frm_loc and TO_LOCATION=:p_dl_locnchg_struct_h_a->h_to_location and LOC_CHNG_STAT='AA' ),	(select nvl(sum(qty),0) as f_avl from DL_LOCNCHG where CLIENT = :p_dl_locnchg_struct_h_a->h_dl_client and INSTR_CODE=:p_dl_locnchg_struct_h_a->h_instr_code and TRANSFER_TYPE=:p_dl_locnchg_struct_h_a->h_trans_type  AND FRM_TYPE='B' and TO_TYPE='F' and FRM_LOC=:p_dl_locnchg_struct_h_a->h_frm_loc and TO_LOCATION=:p_dl_locnchg_struct_h_a->h_to_location and LOC_CHNG_STAT='AA');
				
					IS_ANY_ORA_ERROR
				printf("\n available qty=|%lf| \n",l_h_safekeep_pos);
				printf("\n p_dl_locnchg_struct_h_a->h_qty=|%lf| \n", p_dl_locnchg_struct_h_a->h_qty);
						if ( l_h_safekeep_pos < p_dl_locnchg_struct_h_a->h_qty)
				{
					printf("\n available qty=|%lf| \n",l_availquantity);
					printf("\n Transfer qty=|%lf| \n",p_dl_locnchg_struct_h_a->h_qty);
					if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
																	ERR_DEAL_NENUFPOSN,
																	p_dl_locnchg_struct_h_a->h_dl_client,
																	p_dl_locnchg_struct_h_a->h_instr_code,
																	APL_NULL_STRING,
																	__LINE__,
																	__FILE__ ) )
					{	
						APL_NULL_STRING;
					}
					int_l_error_flg = APL_FAILURE;
				}
		}
		}
			/* add-- getting available qty for csgl-- end */ 
			 

			EXEC SQL UPDATE DL_LOCNCHG SET 
					FRM_LOC	= :p_dl_locnchg_struct_h_a->h_frm_loc:l_dl_locnchg_struct_i->i_frm_loc,
					TO_LOCATION	= :p_dl_locnchg_struct_h_a->h_to_location:l_dl_locnchg_struct_i->i_to_location,
					details	= :p_dl_locnchg_struct_h_a->h_infos:l_dl_locnchg_struct_i->i_infos,
					deal_date = :p_dl_locnchg_struct_h_a->h_dlt:l_dl_locnchg_struct_i->i_dlt, 
					setl_date = :p_dl_locnchg_struct_h_a->h_setldt:l_dl_locnchg_struct_i->i_setldt, 
					QTY     =:p_dl_locnchg_struct_h_a->h_qty:l_dl_locnchg_struct_i->i_qty, 
					instr_code	= :p_dl_locnchg_struct_h_a->h_instr_code:l_dl_locnchg_struct_i->i_instr_code, 
					SENDMSG_IND	= :p_dl_locnchg_struct_h_a->h_sendmsg_ind:l_dl_locnchg_struct_i->i_sendmsg_ind,
					SETL	= :p_dl_locnchg_struct_h_a->h_setl:l_dl_locnchg_struct_i->i_setl,
					BILLABLE_IND	= :p_dl_locnchg_struct_h_a->h_billable_flag:l_dl_locnchg_struct_i->i_billable_flag,
					maker	= :p_intl_envdatastruct_h->usr:l_i_maker, 
					maker_dt	= :chr_sys_access_stamp:l_i_makerdt, 
					checker = :p_dl_locnchg_struct_h_a->h_checker:l_i_checker, 
					checker_dt=:p_dl_locnchg_struct_h_a->h_checker_dt:l_i_checkerdt, 
					access_stamp=:p_dl_locnchg_struct_h_a->h_access_stamp:l_dl_locnchg_struct_i->i_access_stamp, 
					LOC_CHNG_STAT=:p_dl_locnchg_struct_h_a->h_loc_chng_stat:l_dl_locnchg_struct_i->i_loc_chng_stat, 
					CHANGE = :p_dl_locnchg_struct_h_a->h_change:l_dl_locnchg_struct_i->i_change,
					FRM_TYPE = :p_dl_locnchg_struct_h_a->h_frm_type:l_dl_locnchg_struct_i->i_frm_type,
					TO_TYPE = :p_dl_locnchg_struct_h_a->h_to_type:l_dl_locnchg_struct_i->i_to_type,
				    UNBLOCK_DATE = :p_dl_locnchg_struct_h_a->h_unblock_date:l_dl_locnchg_struct_i->i_unblock_date

					WHERE CLIENT=:p_dl_locnchg_struct_h_a->h_dl_client AND IDEN_NO=:p_dl_locnchg_struct_h_a->h_sequenceno;
 
				IS_ANY_ORA_ERROR ;

			}
			else
			{ 
				if(CO_InsertErr(l_debug_info_ptr, 
					ERR_MARKED_AUTHORIZED,  
					APL_NULL_STRING, 
					APL_NULL_STRING, 
					APL_NULL_STRING, 
					__LINE__, 
					__FILE__ )
				 	!= APL_SUCCESS) 
					APL_GOBACK_FAIL 
			} 

		} 

		else 
		{ 
			if(CO_InsertErr(l_debug_info_ptr, 
				ERR_ACCESSSTAMP_CHGD,  
				APL_NULL_STRING, 
				APL_NULL_STRING, 
				APL_NULL_STRING, 
				__LINE__, 
				__FILE__ )
				 != APL_SUCCESS) 
				APL_GOBACK_FAIL 
		} 
	} 
 


	 

	if (!strcmp(p_intl_envdatastruct_h->h_mode, APL_FUNC_DELETE)) 
	{ 
		l_i_checker =-1; 
		l_i_checkerdt=-1; 
		strcpy(p_dl_locnchg_struct_h_a->h_checker, APL_NULL_STRING); 
		strcpy(p_dl_locnchg_struct_h_a->h_checker_dt, APL_NULL_STRING); 
 
		APL_IF_DEBUG 
			{ 
				CO_ProcMonitor(APL_OUT_FILE, "Entered Delete Mode of processtion CR_Mod_LocChg.\n", 
					NULL, p_intl_envdatastruct_h); 
			} 
 
		 

		EXEC SQL SELECT ACCESS_STAMP, LOC_CHNG_STAT  
		INTO :chr_acc_stamp_compare:l_i_access_stamp_compare, 
		     :chr_l_h_locchg_stat:l_i_locchg_stat FROM DL_LOCNCHG
		WHERE CLIENT=:p_dl_locnchg_struct_h_a->h_dl_client AND  
			   IDEN_NO=:p_dl_locnchg_struct_h_a->h_sequenceno 
		FOR UPDATE ;
 

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET( 
				ERR_REC_NOTFND,  
				APL_NULL_STRING, 
				APL_NULL_STRING, 
				APL_NULL_STRING);

		if (!strcmp(p_dl_locnchg_struct_h_a->h_access_stamp, chr_acc_stamp_compare))
		{ 
			if (!strcmp(chr_l_h_locchg_stat, STATUS_UAUTH)) 
		   {

			strcpy(p_dl_locnchg_struct_h_a->h_access_stamp,chr_sys_access_stamp); 
			l_dl_locnchg_struct_i->i_access_stamp =0; 
			strcpy(p_dl_locnchg_struct_h_a->h_loc_chng_stat,STATUS_DEL_UAUTH); 
			l_dl_locnchg_struct_i->i_loc_chng_stat =0; 
		 
			 


			EXEC SQL UPDATE DL_LOCNCHG SET 
				maker	= :p_intl_envdatastruct_h->usr:l_i_maker, 
				maker_dt	= :chr_sys_access_stamp:l_i_makerdt, 
				checker = :p_dl_locnchg_struct_h_a->h_checker:l_i_checker, 
				checker_dt=:p_dl_locnchg_struct_h_a->h_checker_dt:l_i_checkerdt, 
				access_stamp=:p_dl_locnchg_struct_h_a->h_access_stamp:l_dl_locnchg_struct_i->i_access_stamp, 
				LOC_CHNG_STAT=:p_dl_locnchg_struct_h_a->h_loc_chng_stat:l_dl_locnchg_struct_i->i_loc_chng_stat 
			WHERE CLIENT=:p_dl_locnchg_struct_h_a->h_dl_client AND IDEN_NO=:p_dl_locnchg_struct_h_a->h_sequenceno;
 

		 		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET( 
						ERR_REC_NOTFND,  
						APL_NULL_STRING, 
						APL_NULL_STRING, 
						APL_NULL_STRING);

			}
			else
			{ 
				if(CO_InsertErr(l_debug_info_ptr, 
					ERR_CANT_DELETE,  
					APL_NULL_STRING, 
					APL_NULL_STRING, 
					APL_NULL_STRING, 
					__LINE__, 
					__FILE__ )
				 	!= APL_SUCCESS) 
					APL_GOBACK_FAIL 
			} 

		} 

		else 
		{ 
			if(CO_InsertErr(l_debug_info_ptr, 
				ERR_ACCESSSTAMP_CHGD,  
				APL_NULL_STRING, 
				APL_NULL_STRING, 
				APL_NULL_STRING, 
				__LINE__, 
				__FILE__ )
				 != APL_SUCCESS) 
				APL_GOBACK_FAIL 
		} 
	} 
 

 

 
	 

	if (!strcmp(p_intl_envdatastruct_h->h_mode, APL_FUNC_AUTHORISE)) 
	{ 
	 
		APL_IF_DEBUG 
		{ 
			CO_ProcMonitor(APL_OUT_FILE, "Entered Authorise Mode of processtion CR_Mod_LocChg.\n", 
						NULL, p_intl_envdatastruct_h); 
		} 
 
		Alert("p_dl_locnchg_struct_h_a->h_sequenceno is |%s|",p_dl_locnchg_struct_h_a->h_sequenceno); 

		EXEC SQL SELECT ACCESS_STAMP, LOC_CHNG_STAT  
		INTO :chr_acc_stamp_compare:l_i_access_stamp_compare, 
		     :chr_l_h_locchg_stat:l_i_locchg_stat FROM DL_LOCNCHG
		WHERE CLIENT=:p_dl_locnchg_struct_h_a->h_dl_client AND  
			   IDEN_NO=:p_dl_locnchg_struct_h_a->h_sequenceno 
		FOR UPDATE ;
 
		IS_ANY_ORA_ERROR 
				 
        
		if (!strcmp(p_dl_locnchg_struct_h_a->h_access_stamp,chr_acc_stamp_compare)) 
		{ 
			if (!strcmp(chr_l_h_locchg_stat, STATUS_DEL_UAUTH)) 
			{
				EXEC SQL DELETE FROM DL_LOCNCHG 
				WHERE CLIENT=:p_dl_locnchg_struct_h_a->h_dl_client AND  
						IDEN_NO=:p_dl_locnchg_struct_h_a->h_sequenceno; 
				 
		 		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET( 
						ERR_REC_NOTFND,  
						APL_NULL_STRING, 
						APL_NULL_STRING, 
						APL_NULL_STRING);

			}

			else if (!strcmp(chr_l_h_locchg_stat, STATUS_UAUTH)) 
		   {
				if (CR_Chk_LocChgMkrChkr(p_dl_locnchg_struct_h_a->h_dl_client, 
											  p_dl_locnchg_struct_h_a->h_sequenceno, 
				 							  p_intl_envdatastruct_h->usr, 
			            				  l_debug_info_ptr)== APL_SUCCESS) 
				{ 

					/* add--getting available qty for csgl-- start */ 
		if(strcmp(p_dl_locnchg_struct_h_a->h_change,"B")==0)
		{
			if(strcmp(p_dl_locnchg_struct_h_a->h_frm_type,"F")==0)
				stpcpy(l_block_type,"FREE");
			else if(strcmp(p_dl_locnchg_struct_h_a->h_frm_type,"B")==0)
				stpcpy(l_block_type,"BLCK");
			else if(strcmp(p_dl_locnchg_struct_h_a->h_frm_type,"C")==0)
				stpcpy(l_block_type,"CABL");
			
			if ( APL_FAILURE == DL_Chk_AvlPos(	p_dl_locnchg_struct_h_a->h_dl_client,
															p_dl_locnchg_struct_h_a->h_instr_code,
															p_dl_locnchg_struct_h_a->h_frm_loc,
															'Y','N','N','Y','Y','N','N','N',
															l_block_type,
															&l_availquantity,
															l_debug_info_ptr ))
			{	
				APL_GOBACK_FAIL;
			}
			if ( l_availquantity < p_dl_locnchg_struct_h_a->h_qty )
				{
					printf("\n available qty=|%lf| \n",l_availquantity);
					printf("\n Transfer qty=|%lf| \n",p_dl_locnchg_struct_h_a->h_qty);
					if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
																	ERR_DEAL_NENUFPOSN,
																	p_dl_locnchg_struct_h_a->h_dl_client,
																	p_dl_locnchg_struct_h_a->h_instr_code,
																	APL_NULL_STRING,
																	__LINE__,
																	__FILE__ ) )
				{
						APL_NULL_STRING;
					}
					int_l_error_flg = APL_FAILURE;
				}
						printf("l_availquantity **************%lf,p_dl_locnchg_struct_h_a->h_qty is ***%lf\n",l_availquantity,p_dl_locnchg_struct_h_a->h_qty);
		}
		if(strcmp(p_dl_locnchg_struct_h_a->h_change,"B")==0  && strcmp(p_dl_locnchg_struct_h_a->h_frm_type,"B")==0 && strcmp(p_dl_locnchg_struct_h_a->h_to_type,"F")==0  && strcmp(p_dl_locnchg_struct_h_a->h_frm_loc,"CSGL")==0 && strcmp(p_dl_locnchg_struct_h_a->h_to_location,"CSGL")==0)
		{
			printf("new logic\n");
			
			
        if ( APL_FAILURE == DL_Chk_AvlPos(	p_dl_locnchg_struct_h_a->h_dl_client,
															p_dl_locnchg_struct_h_a->h_instr_code,
															p_dl_locnchg_struct_h_a->h_frm_loc,
															'Y','N','N','Y','Y','N','N','N',
															"BLCK",
															&l_availquantity,
															l_debug_info_ptr ))
			{	
				APL_GOBACK_FAIL;
			}
						printf("l_availquantityl_availquantity is **************%lf,p_dl_locnchg_struct_h_a->h_qty is ***%lf\n",l_availquantity,p_dl_locnchg_struct_h_a->h_qty);
		   			
	
				
					if ( l_availquantity < p_dl_locnchg_struct_h_a->h_qty )
				{
					printf("\n available qty=|%lf| \n",l_availquantity);
					printf("\n Transfer qty=|%lf| \n",p_dl_locnchg_struct_h_a->h_qty);
					if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
																	ERR_DEAL_NENUFPOSN,
																	p_dl_locnchg_struct_h_a->h_dl_client,
																	p_dl_locnchg_struct_h_a->h_instr_code,
																	APL_NULL_STRING,
																	__LINE__,
																	__FILE__ ) )
				{
						APL_NULL_STRING;
					}
					int_l_error_flg = APL_FAILURE;
				}
				printf("\n l_availquantity qty=|%lf| \n",l_availquantity);
				printf("\n p_dl_locnchg_struct_h_a->h_qty=|%lf| \n", p_dl_locnchg_struct_h_a->h_qty);
				
					if ( l_availquantity >= p_dl_locnchg_struct_h_a->h_qty )
					{
					EXEC SQL select (B_avl - f_avl) as avl INTO :l_h_safekeep_pos:l_i_safek from (select nvl(sum(qty),0) as B_avl  from DL_LOCNCHG where CLIENT =:p_dl_locnchg_struct_h_a->h_dl_client and INSTR_CODE=:p_dl_locnchg_struct_h_a->h_instr_code and TRANSFER_TYPE=:p_dl_locnchg_struct_h_a->h_trans_type  AND FRM_TYPE='F' and TO_TYPE='B' and FRM_LOC=:p_dl_locnchg_struct_h_a->h_frm_loc and TO_LOCATION=:p_dl_locnchg_struct_h_a->h_to_location and LOC_CHNG_STAT='AA' ),	(select nvl(sum(qty),0) as f_avl from DL_LOCNCHG where CLIENT = :p_dl_locnchg_struct_h_a->h_dl_client and INSTR_CODE=:p_dl_locnchg_struct_h_a->h_instr_code and TRANSFER_TYPE=:p_dl_locnchg_struct_h_a->h_trans_type  AND FRM_TYPE='B' and TO_TYPE='F' and FRM_LOC=:p_dl_locnchg_struct_h_a->h_frm_loc and TO_LOCATION=:p_dl_locnchg_struct_h_a->h_to_location and LOC_CHNG_STAT='AA');
					
					IS_ANY_ORA_ERROR
				printf("\n available qty=|%lf| \n",l_h_safekeep_pos);
				printf("\n p_dl_locnchg_struct_h_a->h_qty=|%lf| \n", p_dl_locnchg_struct_h_a->h_qty);
						if ( l_h_safekeep_pos < p_dl_locnchg_struct_h_a->h_qty)
				{
					printf("\n available qty=|%lf| \n",l_availquantity);
					printf("\n Transfer qty=|%lf| \n",p_dl_locnchg_struct_h_a->h_qty);
					if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
																	ERR_DEAL_NENUFPOSN,
																	p_dl_locnchg_struct_h_a->h_dl_client,
																	p_dl_locnchg_struct_h_a->h_instr_code,
																	APL_NULL_STRING,
																	__LINE__,
																	__FILE__ ) )
					{	
						APL_NULL_STRING;
					}
					int_l_error_flg = APL_FAILURE;
				}
		}
		}
			/* add-- getting available qty for csgl-- end */ 

					strcpy(p_dl_locnchg_struct_h_a->h_access_stamp,chr_sys_access_stamp); 
					l_dl_locnchg_struct_i->i_access_stamp =0; 
					strcpy(p_dl_locnchg_struct_h_a->h_loc_chng_stat,STATUS_AUTH); 
					l_dl_locnchg_struct_i->i_loc_chng_stat =0; 
					strcpy(p_dl_locnchg_struct_h_a->h_checker,p_intl_envdatastruct_h->usr); 
					l_dl_locnchg_struct_i->i_checker =0; 
					strcpy(p_dl_locnchg_struct_h_a->h_checker_dt,chr_sys_access_stamp); 
					l_dl_locnchg_struct_i->i_checker_dt =0; 
			 
					

					strcpy(p_intl_envdata_struct_h->h_mode,"INP");
					strcpy(p_intl_envdata_struct_h->usr,p_intl_envdatastruct_h->usr);
					strcpy(p_intl_envdata_struct_h->processtion,p_intl_envdatastruct_h->processtion);
					strcpy(p_intl_envdata_struct_h->auth_req,p_intl_envdatastruct_h->auth_req);

					if(CR_Rtv_LocChgTrdRefNo(p_dl_locnchg_struct_h_a->h_df_txnr_iden, 
											  p_dl_locnchg_struct_h_a->h_rf_dl_ident,
											  l_debug_info_ptr)==APL_FAILURE)
					{
						APL_GOBACK_FAIL;
					}

					

					if(CR_Proc_LocChgInitTrd(l_sys_dl_deal_struct_hl,
  		 									  p_dl_locnchg_struct_h_a,
											  "DF",
									   	  l_debug_info_ptr) == APL_SUCCESS)
					{
					
		         int_cond_exists = 0;
					if (APL_SUCCESS == CO_Chk_CntryEnabled( "LOC_CHG","RUSTAT_TRDAUTH",&int_cond_exists,l_debug_info_ptr))
							{
							   EXEC SQL SELECT CLN_CLAS INTO :h_clt_class:i_clt_class FROM MT_CLIENT
											  WHERE cln_code = :l_sys_dl_deal_struct_hl->h_dl_client;
							  IS_ANY_ORA_ERROR;

							  if ((int_cond_exists > 0) && (h_clt_class[0]==NON_PROP_ACC))
								{
									strcpy(p_dl_locnchg_struct_h_a->h_dealstat,STATUS_AUTH);
									strcpy(l_sys_dl_deal_struct_hl->h_deal_status,STATUS_AUTH);
									strcpy(l_sys_dl_deal_struct_hl->h_confdate,APL_NULL_STRING);
									strcpy(l_sys_dl_deal_struct_hl->h_instrdate,APL_NULL_STRING);
									strcpy(l_sys_dl_deal_struct_hl->h_moneydate,APL_NULL_STRING);
									strcpy(l_sys_dl_deal_struct_hl->h_fail_cd,APL_NULL_STRING);
								}	 
							}
                 
                 
                  if(strcmp(p_dl_locnchg_struct_h_a->h_sendmsg_ind,"Y"))
                  {
                     strcpy(l_sys_dl_deal_struct_hl->h_msg_stat,chr_l_msg_flg_53x);
                  }
                  

      				
      				
         				strcpy(l_sys_dl_deal_struct_hl->h_allow_part_s,"N");
      				
							if((strcmp(p_dl_locnchg_struct_h_a->h_change,"B")==0) 
								&& (strcmp(p_dl_locnchg_struct_h_a->h_frm_type,"B")==0))
										strcpy(l_sys_dl_deal_struct_hl->h_locchng_flg,"X"); 
							/*chgs by amish ---for CA deals safek movement--04/05 */
							else if	((strcmp(p_dl_locnchg_struct_h_a->h_change,"B")==0) && 
							 (strcmp(p_dl_locnchg_struct_h_a->h_frm_type,"C")==0))	
									{
								      strcpy(l_sys_dl_deal_struct_hl->h_locchng_flg,"C");
									printf("\n**in if looop LOC FLAG IS  ****|%s|\n",l_sys_dl_deal_struct_hl->h_locchng_flg);
									}
							else
										strcpy(l_sys_dl_deal_struct_hl->h_locchng_flg,"Y"); 
                  
                  
						EXEC SQL SELECT SYS_DATE into :l_sys_date from PRO_SYS_DATE;
						IS_ANY_ORA_ERROR
                 
					  	
						if(strcmp(p_dl_locnchg_struct_h_a->h_change,"B")==0)
						{
							strcpy(l_sys_dl_deal_struct_hl->h_instrdate,l_sys_date);
							strcpy(l_sys_dl_deal_struct_hl->h_confdate,l_sys_date);
							printf("\nINSTR DATE IS |%s|\n",l_sys_dl_deal_struct_hl->h_instrdate);
							
						}
						/* changes by amish ----10/05 */
                    if(!strcmp(p_dl_locnchg_struct_h_a->h_setl ,"Y"))
						  {
							  strcpy(l_sys_dl_deal_struct_hl->h_instrdate,l_sys_date);
							   strcpy(l_sys_dl_deal_struct_hl->h_confdate,l_sys_date);
						  }
						 
                        						 
						strcpy(l_sys_dl_deal_struct_hl->h_clh_flg,"D"); //added by Shradha for UAT Issue
						
						DL_Proc_Trd(l_sys_dl_deal_struct_hl, NULL, p_intl_envdata_struct_h, l_debug_info_ptr);
						
						/*
                  if( strcmp(p_dl_locnchg_struct_h_a->h_change,"L")==0) 
						{
               		 if (APL_FAILURE==EI_Mod_MQData(l_sys_dl_deal_struct_hl->h_dl_client,
					           		  					  l_sys_dl_deal_struct_hl->h_indentity_no,
															  NULL,
															  NULL,
															  "B",
															  l_debug_info_ptr))
		    						APL_GOBACK_FAIL										  
						
						}
						*/

						if (!strcmp(l_sys_dl_deal_struct_hl->h_deal_status,"CC"))					
						{
							memset(l_dl_deal_fail_struct_hb,NULL,sizeof(DL_DEAL_FAIL_STRUCT_H));
							strcpy(l_dl_deal_fail_struct_hb->h_dl_client,l_sys_dl_deal_struct_hl->h_dl_client);
							strcpy(l_dl_deal_fail_struct_hb->h_indentity_no,l_sys_dl_deal_struct_hl->h_indentity_no);
							strcpy(l_dl_deal_fail_struct_hb->h_fail_cd,"95");
							strcpy(l_dl_deal_fail_struct_hb->h_failinfo,APL_NULL_STRING);
							strcpy(l_dl_deal_fail_struct_hb->h_custinfo,APL_NULL_STRING);
							strcpy(p_intl_envdatastruct_h->h_mode,UFL_MODE);
							if (APL_FAILURE == DL_Rtv_TrdChrVal(l_dl_deal_fail_struct_hb->h_dl_client,
																		 l_dl_deal_fail_struct_hb->h_indentity_no,
																		 "access_stamp",
																		 l_dl_deal_fail_struct_hb->h_access_stamp,
																		 l_debug_info_ptr))
							{
								APL_GOBACK_FAIL
							}

							
                     
							
                     if(!strcmp(p_dl_locnchg_struct_h_a->h_sendmsg_ind,"N"))
                     {
                        strcpy(p_intl_envdatastruct_h->h_process,"N");
                     }
                     

							if (APL_FAILURE == DL_Mod_DLFailReas(l_dl_deal_fail_struct_hb,
																	     p_intl_envdatastruct_h,
																		  l_debug_info_ptr))
							{
								APL_GOBACK_FAIL
							}
						}

						




						if ( CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
						{
							APL_GOBACK_FAIL
						}

						if(strcmp(p_dl_locnchg_struct_h_a->h_sendmsg_ind,"Y"))
						{

							

							strcpy(l_ms_msgstat_structa.proc_init, l_sys_dl_deal_struct_hl->h_indentity_no);
							strcpy(l_ms_msgstat_structa.client, l_sys_dl_deal_struct_hl->h_dl_client);
							strcpy(l_ms_msgstat_structa.swift_msg_rep, MS_MSGNO_53XN01);
							strcpy(l_ms_msgstat_structa.generate_dt, chr_sys_access_date);

							if(APL_FAILURE == MS_Mod_MsgStat(l_ms_msgstat_structa, &int_l_ret_imsgstat, l_debug_info_ptr))
							{
								APL_GOBACK_FAIL
							}
        
                     
					
						}
					}
					else
						APL_GOBACK_FAIL;


					strcpy(temp_location_cd,l_sys_dl_deal_struct_hl->h_loccode);

					memset(l_sys_dl_deal_struct_hl,NULL, sizeof(SYS_DL_DEAL_STRUCT_H));

					if(CR_Proc_LocChgInitTrd(l_sys_dl_deal_struct_hl,
												p_dl_locnchg_struct_h_a,
												"RF",
												 l_debug_info_ptr) == APL_SUCCESS)
					{

/** New change by AmitB	17/08/2006  **/

					if(strcmp(p_dl_locnchg_struct_h_a->h_change,"L")!=0)
					{
						strcpy(l_sys_dl_deal_struct_hl->h_loccode,temp_location_cd);
						printf("\n Amit:After : Calling Proc_Trd 2nd time LOCATION=|%s| \n",l_sys_dl_deal_struct_hl->h_loccode);
					}	
					
		         int_cond_exists = 0;	
					if (APL_SUCCESS == CO_Chk_CntryEnabled( "LOC_CHG","RUSTAT_TRDAUTH",&int_cond_exists,l_debug_info_ptr))
					{
				      EXEC SQL SELECT CLN_CLAS INTO :h_clt_class:i_clt_class FROM MT_CLIENT
								WHERE cln_code = :l_sys_dl_deal_struct_hl->h_dl_client;
						IS_ANY_ORA_ERROR;

						  if ((int_cond_exists > 0) && (h_clt_class[0]==NON_PROP_ACC))
								{
									strcpy(p_dl_locnchg_struct_h_a->h_dealstat,STATUS_AUTH);
									strcpy(l_sys_dl_deal_struct_hl->h_deal_status,STATUS_AUTH);
									strcpy(l_sys_dl_deal_struct_hl->h_confdate,APL_NULL_STRING);
									strcpy(l_sys_dl_deal_struct_hl->h_instrdate,APL_NULL_STRING);
									strcpy(l_sys_dl_deal_struct_hl->h_moneydate,APL_NULL_STRING);
									strcpy(l_sys_dl_deal_struct_hl->h_fail_cd,APL_NULL_STRING);
								}	 
					}
              
                
                  if(strcmp(p_dl_locnchg_struct_h_a->h_sendmsg_ind,"Y"))
                  {
                     strcpy(l_sys_dl_deal_struct_hl->h_msg_stat,chr_l_msg_flg_53x);
                  }
                  

                  
                  
                     strcpy(l_sys_dl_deal_struct_hl->h_allow_part_s,"N");
                      printf("\n***************p_dl_locnchg_struct_h_a->h_change |%s|\n",p_dl_locnchg_struct_h_a->h_change);                  
                       printf("\np_dl_locnchg_struct_h_a->h_to_type |%s|\n",p_dl_locnchg_struct_h_a->h_to_type);
							if((strcmp(p_dl_locnchg_struct_h_a->h_change,"B")==0) && 
									(strcmp(p_dl_locnchg_struct_h_a->h_to_type,"B")==0))
							{
								
								strcpy(l_sys_dl_deal_struct_hl->h_locchng_flg,"X"); 
								printf("\nin if looop |%s|\n",l_sys_dl_deal_struct_hl->h_locchng_flg);
							
							}
							/*chgs by amish --chgs related to CA deals pos movement --04/05 */
							else if((strcmp(p_dl_locnchg_struct_h_a->h_change,"B")==0) &&
									(strcmp(p_dl_locnchg_struct_h_a->h_to_type,"C")==0))
							{
										strcpy(l_sys_dl_deal_struct_hl->h_locchng_flg,"C");
										printf("\n**in if looop LOC FLAG IS  ****|%s|\n",l_sys_dl_deal_struct_hl->h_locchng_flg);
							}
							else
										strcpy(l_sys_dl_deal_struct_hl->h_locchng_flg,"Y");
					  	
						EXEC SQL SELECT SYS_DATE into :l_sys_date from PRO_SYS_DATE;
						IS_ANY_ORA_ERROR
						
						
						if(strcmp(p_dl_locnchg_struct_h_a->h_change,"B")==0)
						{
							strcpy(l_sys_dl_deal_struct_hl->h_instrdate,l_sys_date);
							strcpy(l_sys_dl_deal_struct_hl->h_confdate,l_sys_date);
							printf("\nINSTR DATE IS |%s|\n",l_sys_dl_deal_struct_hl->h_instrdate);
						}
					
                 /* changes by amish ----10/05 */ 
						if(!strcmp(p_dl_locnchg_struct_h_a->h_setl ,"Y"))
						{
							strcpy(l_sys_dl_deal_struct_hl->h_instrdate,l_sys_date);
							strcpy(l_sys_dl_deal_struct_hl->h_confdate,l_sys_date);
						}							

                  		strcpy(l_sys_dl_deal_struct_hl->h_clh_flg,"D"); //added by Shradha for UAT Issue
						
						DL_Proc_Trd(l_sys_dl_deal_struct_hl, NULL, p_intl_envdata_struct_h, l_debug_info_ptr);
						/*
					
					 if(strcmp(p_dl_locnchg_struct_h_a->h_change,"L")==0) 	
					 {
                				if (APL_FAILURE==EI_Mod_MQData(l_sys_dl_deal_struct_hl->h_dl_client,
					           			  							  l_sys_dl_deal_struct_hl->h_indentity_no,
																		  NULL,
																		  NULL,
																		  "B",
															 			 l_debug_info_ptr
												 			 			 ))
		    					APL_GOBACK_FAIL										  
                 }
					  */
		
						if (!strcmp(l_sys_dl_deal_struct_hl->h_deal_status,"CC"))					
						{
							memset(l_dl_deal_fail_struct_hb,NULL,sizeof(DL_DEAL_FAIL_STRUCT_H));
							strcpy(l_dl_deal_fail_struct_hb->h_dl_client,l_sys_dl_deal_struct_hl->h_dl_client);
							strcpy(l_dl_deal_fail_struct_hb->h_indentity_no,l_sys_dl_deal_struct_hl->h_indentity_no);
							strcpy(l_dl_deal_fail_struct_hb->h_fail_cd,"95");
							strcpy(l_dl_deal_fail_struct_hb->h_failinfo,APL_NULL_STRING);
							strcpy(l_dl_deal_fail_struct_hb->h_custinfo,APL_NULL_STRING);
							strcpy(p_intl_envdatastruct_h->h_mode,UFL_MODE);
							if (APL_FAILURE == DL_Rtv_TrdChrVal(l_dl_deal_fail_struct_hb->h_dl_client,
																		 l_dl_deal_fail_struct_hb->h_indentity_no,
																		 "access_stamp",
																		 l_dl_deal_fail_struct_hb->h_access_stamp,
																		 l_debug_info_ptr))
							{
								APL_GOBACK_FAIL
							}

							
                     
							
                     if(!strcmp(p_dl_locnchg_struct_h_a->h_sendmsg_ind,"N"))
                     {
                        strcpy(p_intl_envdatastruct_h->h_process,"N");
                     }
                     

							if (APL_FAILURE == DL_Mod_DLFailReas(l_dl_deal_fail_struct_hb,
																	     p_intl_envdatastruct_h,
																		  l_debug_info_ptr))
							{
								APL_GOBACK_FAIL
							}
						}

						

						if ( CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
						{
							APL_GOBACK_FAIL
						}

						if(strcmp(p_dl_locnchg_struct_h_a->h_sendmsg_ind,"Y"))
						{
							

							strcpy(l_ms_msgstat_structa.proc_init, l_sys_dl_deal_struct_hl->h_indentity_no);
							strcpy(l_ms_msgstat_structa.client, l_sys_dl_deal_struct_hl->h_dl_client);
							strcpy(l_ms_msgstat_structa.swift_msg_rep, MS_MSGNO_53XN01);
							strcpy(l_ms_msgstat_structa.generate_dt, chr_sys_access_date);

							if(MS_Mod_MsgStat(l_ms_msgstat_structa, &int_l_ret_imsgstat,
													l_debug_info_ptr) == APL_FAILURE)
							{
								APL_GOBACK_FAIL
							}
        
                     
						}
					}
					else
						APL_GOBACK_FAIL;


				if(strlen(p_dl_locnchg_struct_h_a->h_rf_dl_ident)) l_dl_locnchg_struct_i->i_rf_dl_ident=0;
				if(strlen(p_dl_locnchg_struct_h_a->h_df_txnr_iden)) l_dl_locnchg_struct_i->i_df_txnr_iden=0;
				if(strlen(p_dl_locnchg_struct_h_a->h_dealstat)) l_dl_locnchg_struct_i->i_dealstat=0;

								
               if (strcmp(p_dl_locnchg_struct_h_a->h_sendmsg_ind,"Y") == 0 
						&& strcmp(p_dl_locnchg_struct_h_a->h_dealstat,"CS") == 0 
						&& (strcmp(p_intl_envdatastruct_h->subprocess, SENDMT508)))
					{
							strcpy(p_dl_locnchg_struct_h_a->h_loc_chng_stat,"IA");
					}
								

					if (strcmp(p_dl_locnchg_struct_h_a->h_dealstat,"CS") == 0)
					{
							strcpy(p_dl_locnchg_struct_h_a->h_dfsettdate,chr_sys_access_date );
							strcpy(p_dl_locnchg_struct_h_a->h_rfsettdate,chr_sys_access_date);
					}
					else if (strcmp(p_dl_locnchg_struct_h_a->h_dealstat,"CC") == 0)
					{
							strcpy(p_dl_locnchg_struct_h_a->h_dfsettdate,APL_NULL_STRING);
							strcpy(p_dl_locnchg_struct_h_a->h_rfsettdate,APL_NULL_STRING);
					}


				EXEC SQL UPDATE DL_LOCNCHG SET
					CHECKER=:p_dl_locnchg_struct_h_a->h_checker:l_dl_locnchg_struct_i->i_checker,
					CHECKER_DT=:p_dl_locnchg_struct_h_a->h_checker_dt:l_dl_locnchg_struct_i->i_checker_dt,
					LOC_CHNG_STAT=:p_dl_locnchg_struct_h_a->h_loc_chng_stat:l_dl_locnchg_struct_i->i_loc_chng_stat,
					ACCESS_STAMP=:chr_sys_access_stamp:l_i_access_stamp,
					RF_DL_IDENT	=:p_dl_locnchg_struct_h_a->h_rf_dl_ident:l_dl_locnchg_struct_i->i_rf_dl_ident,
					DF_TXNR_IDEN	=:p_dl_locnchg_struct_h_a->h_df_txnr_iden:l_dl_locnchg_struct_i->i_df_txnr_iden,
					DEALSTAT	=:p_dl_locnchg_struct_h_a->h_dealstat:l_dl_locnchg_struct_i->i_dealstat,
					DF_SETLDATE =:p_dl_locnchg_struct_h_a->h_dfsettdate:l_dl_locnchg_struct_i->i_dfsettdate,
					RF_SETL_DATE =:p_dl_locnchg_struct_h_a->h_rfsettdate:l_dl_locnchg_struct_i->i_rfsettdate
					WHERE CLIENT=:p_dl_locnchg_struct_h_a->h_dl_client AND
							IDEN_NO=:p_dl_locnchg_struct_h_a->h_sequenceno;

				IS_ANY_ORA_ERROR;


	fprintf(APL_OUT_FILE, "Value of p_intl_envdatastruct_h->subprocess is %s\n",p_intl_envdatastruct_h->subprocess);
				
					if (strcmp(p_dl_locnchg_struct_h_a->h_sendmsg_ind,"Y") == 0 && strcmp(p_dl_locnchg_struct_h_a->h_dealstat,"CS") == 0 && (strcmp(p_intl_envdatastruct_h->subprocess, SENDMT508)))
					{	
						if (APL_FAILURE == GBDbInsIMSGENT(MS_MSGNO_508,
									p_dl_locnchg_struct_h_a->h_sequenceno,
									p_dl_locnchg_struct_h_a->h_dl_client,
									'Y',
									APL_NULL_STRING,
									l_debug_info_ptr))
						{
							APL_GOBACK_FAIL
						}
						
					}
				} 
				else 
				{ 
					APL_GOBACK_FAIL 
				} 
			} 

			else
			{ 
				if(CO_InsertErr(l_debug_info_ptr, 
					ERR_CANT_AUTHORIZE,  
					APL_NULL_STRING, 
					APL_NULL_STRING, 
					APL_NULL_STRING, 
					__LINE__, 
					__FILE__ )
				 	!= APL_SUCCESS) 
					APL_GOBACK_FAIL 
			}
		}
		else 
		{ 
				if(CO_InsertErr(l_debug_info_ptr, 
					ERR_ACCESSSTAMP_CHGD,  
					APL_NULL_STRING, 
					APL_NULL_STRING, 
					APL_NULL_STRING, 
					__LINE__, 
					__FILE__) 
					 != APL_SUCCESS) 
					APL_GOBACK_FAIL 
		} 
	}
		RETURN_SUCCESS: 
		{ 
			APL_IF_DEBUG 
			{ 
				CO_ProcMonitor(APL_OUT_FILE, "Exiting Function  CR_Mod_LocChg Successfully.\n", NULL, p_intl_envdatastruct_h); 
			} 
			APL_FREE(l_dl_locnchg_struct_i); 
			APL_FREE(l_sys_dl_deal_struct_hl); 
			APL_FREE(p_intl_envdata_struct_h); 
			APL_FREE(l_dl_deal_fail_struct_hb); 
			return(APL_SUCCESS); 
		} 
 
		RETURN_FAILURE: 
		{ 
			APL_IF_DEBUG 
			{ 
				CO_ProcMonitor(APL_OUT_FILE, "Exiting Function CR_Mod_LocChg. Failure.\n", NULL, p_intl_envdatastruct_h); 
			} 
			APL_FREE(l_dl_locnchg_struct_i); 
			APL_FREE(l_sys_dl_deal_struct_hl); 
			APL_FREE(p_intl_envdata_struct_h); 
			APL_FREE(l_dl_deal_fail_struct_hb); 
			return(APL_FAILURE); 
		} 
} 
 
 
 
int CR_Chk_LocChgMkrChkr(char *chr_p_client, char *p_seqno, char *p_user,DEBUG_INFO_STRUCT_H **l_debug_info_ptr) 
{ 
  struct sqlca sqlca; 
  char maker[15]; 
  short l_i_maker = 0; 
  int int_error_flag = APL_SUCCESS; 
 
#ifdef APL_THREADS 
    APL_SET_CONTEXT 
    EXEC SQL CONTEXT USE :my_ctx_local; 
#endif 
 
			CO_ProcMonitor(APL_OUT_FILE, "Biju 1\n", l_debug_info_ptr, NULL); 
APL_IF_DEBUG 
 { 
  CO_ProcMonitor(APL_OUT_FILE, "Entered Function CR_Chk_LocChgMkrChkr\n", 
		NULL,NULL); 
 } 
  EXEC SQL VAR maker IS STRING(15); 
  EXEC SQL SELECT MAKER  
		INTO :maker:l_i_maker 
		FROM DL_LOCNCHG 
			WHERE CLIENT=:chr_p_client AND IDEN_NO=:p_seqno; 
 
	IS_ANY_ORA_ERROR	 
 
  if (!strcmp(p_user, maker))
	{ 

	 if (CO_InsertErr 
			(l_debug_info_ptr, 
			ERR_MAKER_CHECKER_SAME,  
			APL_NULL_STRING, 
			APL_NULL_STRING, 
			APL_NULL_STRING, 
			__LINE__, 
			__FILE__ 
			) != APL_SUCCESS) 
	APL_GOBACK_FAIL 
   	int_error_flag = APL_FAILURE; 
	} 
 
  if (int_error_flag == APL_FAILURE) 
	{ 
	APL_GOBACK_FAIL 
	} 
 
  APL_GOBACK_SUCCESS 
 
  RETURN_SUCCESS : 
	{ 
 
APL_IF_DEBUG 
 { 
 
  CO_ProcMonitor(APL_OUT_FILE, "CDBUsrAuthLocChgFn Successful\n", 
		NULL,NULL); 
 } 
	return(APL_SUCCESS); 
	} 
  RETURN_FAILURE : 
	{ 
 
APL_IF_DEBUG 
 { 

  CO_ProcMonitor(APL_OUT_FILE, "CDBUsrAuthLocChgFn unsuccessful\n", 
		NULL,NULL); 
 } 
 
	return(APL_FAILURE); 
	} 
} 

 
 
 
int CR_Rtv_LocChgRefNo(char *p_locchgseqno, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	PRO_GSEQNUM_STRUCT_H *p_pro_gseqnum_struct_h;	
	char *chr_p_cseq_num;
	char chr_p_h_locchgseqno[17];
	int int_p_iseqnum;

			CO_ProcMonitor(APL_OUT_FILE, "Biju 1\n", l_debug_info_ptr, NULL); 
#ifdef APL_THREADS 
	APL_SET_CONTEXT 
	EXEC SQL CONTEXT USE :my_ctx_local; 
#endif 
 
	APL_IF_DEBUG 
 	{ 
  		CO_ProcMonitor(APL_OUT_FILE, "Entered Function CR_Rtv_LocChgRefNo. \n", 
		NULL,NULL); 
 	} 

	//chr_p_cseq_num=(char *)calloc(5, sizeof(char));
	chr_p_cseq_num=(char *)calloc(6, sizeof(char));//Size increased to 6 By Gouse for UAT Issue - Junk characters in Identity no.
	APL_MALLOC_FAIL(chr_p_cseq_num);

	p_pro_gseqnum_struct_h=(PRO_GSEQNUM_STRUCT_H *)calloc(1, sizeof(PRO_GSEQNUM_STRUCT_H)); 

	APL_MALLOC_FAIL(p_pro_gseqnum_struct_h);

	EXEC SQL VAR chr_p_h_locchgseqno IS STRING;
	
	memset(chr_p_h_locchgseqno,APL_NULL_CHAR,17);//Added by Gouse for UAT Issue - Junk characters getting appended in iden no. - 24/12/2012

	EXEC SQL SELECT 'LOC'|| to_char(SYS_DATE, 'YYDDD') INTO
			:chr_p_h_locchgseqno FROM PRO_SYS_DATE;
	IS_ANY_ORA_ERROR;
	Alert("chr_p_h_locchgseqno value is |%s|",chr_p_h_locchgseqno);

	strcpy(p_locchgseqno,chr_p_h_locchgseqno);
	Alert("p_locchgseqno is |%s",p_locchgseqno);
	strcpy(p_pro_gseqnum_struct_h->sequencename, "LOCCHG");
	int_p_iseqnum=CO_RtvNxtSeqNum(p_pro_gseqnum_struct_h, l_debug_info_ptr);
	if(int_p_iseqnum == APL_FAILURE)
	{
		APL_GOBACK_FAIL;
	}
 	ltoa_r(int_p_iseqnum, chr_p_cseq_num, 5);
	Alert("chr_p_cseq_num is |%s|",chr_p_cseq_num);
	if(CO_PadString(chr_p_cseq_num, 'L', 4, "0", l_debug_info_ptr) == APL_FAILURE)
	{
			APL_GOBACK_FAIL;
	}
	Alert("chr_p_cseq_num is |%s|",chr_p_cseq_num);
	strcat(p_locchgseqno, chr_p_cseq_num);
	Alert("p_locchgseqno is |%s|",p_locchgseqno);
	APL_GOBACK_SUCCESS;

  RETURN_SUCCESS : 
	{ 
 
	APL_IF_DEBUG 
 	{ 
  		CO_ProcMonitor(APL_OUT_FILE, "CDBGenLocChgRefFn Successful\n", 
		NULL,NULL); 
 	} 
	return(APL_SUCCESS); 
	} 
  RETURN_FAILURE : 
	{ 
 
	APL_IF_DEBUG 
 	{ 
  		CO_ProcMonitor(APL_OUT_FILE, "CDBGenLocChgRefFn unsuccessful\n", 
		NULL,NULL); 
 	} 
 
	return(APL_FAILURE); 
	} 
}

 
 
 
int CR_Rtv_LocChgTrdRefNo(char *p_dfident,
						char *p_rfident, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	char chr_p_h_date_time[APL_DATE_LEN];
	short int_error_flag = APL_SUCCESS;
	char chr_type_of_trd[8] = APL_NULL_STRING;
	char deal_cd_a[2] = APL_NULL_STRING;
	EXEC SQL VAR chr_p_h_date_time IS STRING;

			CO_ProcMonitor(APL_OUT_FILE, "Biju 1\n", l_debug_info_ptr, NULL); 
#ifdef APL_THREADS 
	APL_SET_CONTEXT 
	EXEC SQL CONTEXT USE :my_ctx_local; 
#endif 
 
	APL_IF_DEBUG 
 	{ 
  		CO_ProcMonitor(APL_OUT_FILE, "Entered CR_Rtv_LocChgTrdRefNo \n", 
		NULL,NULL); 
 	}

		strcpy(p_dfident, APL_NULL_STRING);
		strcpy(p_rfident, APL_NULL_STRING);

		

		strcpy(chr_type_of_trd,"LOCCHG");
		strcpy(deal_cd_a,"1");
	APL_IF_DEBUG 
	printf("till here 1 -- Biju \n");
		if (APL_FAILURE == CO_GenRefno(chr_type_of_trd,
													APL_NULL_STRING,
												 deal_cd_a,
												 p_dfident,
												 l_debug_info_ptr))
		{
			APL_GOBACK_FAIL
		}
	APL_IF_DEBUG 
	printf("till here 2 -- Biju \n");
		strcpy(deal_cd_a,"2");
		if (APL_FAILURE == CO_GenRefno(chr_type_of_trd,
												APL_NULL_STRING,
												 deal_cd_a,
												 p_rfident,
												 l_debug_info_ptr))
		{
			APL_GOBACK_FAIL
		}
	APL_IF_DEBUG 
	printf("till here 3 -- Biju \n");

			

	if(CO_RtvSysDtTime(chr_p_h_date_time, l_debug_info_ptr) == APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}
	APL_IF_DEBUG 
	printf("till here 4 -- Biju \n");

	strcat(chr_p_h_date_time, APL_NULL_STRING);
	EXEC SQL SELECT to_char(to_date(:chr_p_h_date_time, 'DD/MM/YYYY HH24:MI:SS'),'YYDDD') || '.' || 
						 to_char(to_date(:chr_p_h_date_time, 'DD/MM/YYYY HH24:MI:SS'),'SSSSS.SS') 
						 INTO :chr_p_h_date_time
						 FROM DUAL;
	IS_ANY_ORA_ERROR;

	int_error_flag=APL_SUCCESS;
	APL_IF_DEBUG 
	printf("till here 5 -- Biju \n");

	if(int_error_flag != APL_SUCCESS)
		APL_GOBACK_FAIL;

	APL_GOBACK_SUCCESS;

  RETURN_SUCCESS : 
	{ 
	APL_IF_DEBUG 
 	{ 
  		CO_ProcMonitor(APL_OUT_FILE, "CDBLocTrdRefNoFn Successful\n", 
		NULL,NULL); 
 	
		}
	return(APL_SUCCESS); 
	} 
  RETURN_FAILURE : 
	{ 
	APL_IF_DEBUG 
 	{ 
  		CO_ProcMonitor(APL_OUT_FILE, "CDBLocTrdRefNoFn unsuccessful\n", 
		l_debug_info_ptr,NULL); 
 	} 
	return(APL_FAILURE); 
	} 
}

 
 
 
int CR_Proc_LocChgPosStat(SYS_DL_DEAL_STRUCT_H *l_sys_dl_deal_struct_hl, char *p_instr_code, 
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
		char chr_p_regbrind[3];

			CO_ProcMonitor(APL_OUT_FILE, "Biju 1\n", l_debug_info_ptr, NULL); 
#ifdef APL_THREADS 
	APL_SET_CONTEXT 
	EXEC SQL CONTEXT USE :my_ctx_local; 
#endif 
 
	EXEC SQL VAR l_sys_dl_deal_struct_hl->h_ex_arena IS STRING;

	APL_IF_DEBUG 
 	{ 
  		CO_ProcMonitor(APL_OUT_FILE, " Entered CR_Proc_LocChgPosStat \n", 
		NULL,NULL); 
 	} 

		EXEC SQL SELECT CURRENCY_CD, EX_ARENA, REG_BR_IND
				INTO :l_sys_dl_deal_struct_hl->h_currencycode,
					  :l_sys_dl_deal_struct_hl->h_ex_arena,
					  :chr_p_regbrind
				FROM MT_INSTRUMENT
				WHERE INSTR_CODE=:p_instr_code;

		IS_ANY_ORA_ERROR;

	  if(l_mt_core_sys_params_struct_h.proc_reg_ind[0] == 'Y')
	  {
		if(!strcmp(chr_p_regbrind, "BR"))
		{
			strcpy(l_sys_dl_deal_struct_hl->h_pos_stat,STATUS_POS_000);
		}
		else
			strcpy(l_sys_dl_deal_struct_hl->h_pos_stat,STATUS_POS_001);
	  }	
	  else
			strcpy(l_sys_dl_deal_struct_hl->h_pos_stat, APL_NULL_STRING);

		APL_GOBACK_SUCCESS;

  RETURN_SUCCESS : 
	{ 
 
	APL_IF_DEBUG 
 	{ 
  		CO_ProcMonitor(APL_OUT_FILE, "CDBLocTrdDefsFn Successful\n", 
		NULL,NULL); 
 	} 
	return(APL_SUCCESS); 
	} 
  RETURN_FAILURE : 
	{ 
 
	APL_IF_DEBUG 
 	{ 
  		CO_ProcMonitor(APL_OUT_FILE, "CDBLocTrdDefsFn unsuccessful\n", 
		NULL,NULL); 
 	} 
 
	return(APL_FAILURE); 
	} 
}

