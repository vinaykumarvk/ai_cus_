/*
 *   COPYRIGHT NOTICE
 *   
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *   
 *   These materials are confidential and proprietary to
 *   Polaris Software Lab Limited and no part of these materials should
 *   be reproduced, published, transmitted or distributed in any form or
 *   by any means, electronic, mechanical, photocopying, recording or
 *   otherwise, or stored in any information storage or retrieval system
 *   of any nature nor should the materials be disclosed to third parties
 *   or used in any other manner for which this is not authorized, without
 *   the prior express written authorization of Polaris Software Lab Limited.
 */
/*******************************************************************************
 *  
 *    Module Name         :         Billing Module 
 *    
 *    File Name           :         IV_BillGenFn_C.pc
 *    
 *    
 *                Version Control Block
 *     
 *    Date        Version     Author              Description     RFS No.
 *   ---------   --------  ---------------  ----------------------------------
 *   08-Dec-2010  1.0.1.23   Siva Ganapathi	  Changes done for ISKB_2470 -- safekeeping charges of NAV based client
 *
 *   09-Feb-2011  1.0.1.24   Siva Ganapathi	  Changes done for ISKB_4603 -- Txn charges of USD clients when fee basis and charges basis 
 *											  is COUNTERVALUE PER TXN/PER TXN and changes for ISKB_2470
 *											   Commented few debug statements
 *   25-Mar-2022  1.0.1.25   kotubabu         Linux Migration Kotak Implumention 
 *******************************************************************************/

#include "stdio_64.h"
#include <stdlib.h>
#include <string.h>
/*#include <macros.h>		Commented by Tushar */
#ifdef OS_LINUX             /*Added by kotubabu for Linux Migration -Start */
  #include <sys/param.h>
#else
#include <macros.h>
#endif                     /*Added by kotubabu for Linux Migration -End */

#include "IV_Control_A.h"
#include <math.h>          /*Added by kotubabu for Linux Migration */

#ifdef BILLDEBUG
	extern FILE *TestRep;
#endif
extern int int_g_viber_condexists;

extern int IV_Proc_CalcDepoCommAmt(    char *,
                                                                char *,
                                                                char *,
                                                                char *,
                                                                char *,
                                                                double ,
                                                                double ,
                                                                char *,
                                                                char *,
                                                                char ,
                                                                int *,
                                                        DEBUG_INFO_STRUCT_H **
                                                        );

EXEC SQL INCLUDE SQLCA;

//AIX - Warnings Removal-- modified in printfs

int IV_Chk_GenCustodyChgs(char *chr_p_client,char *p_cltt_str,char *p_mstclt_a,
			int *int_p_retstat,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;

	char h_instr_code[APL_INSTRUMENTCODE_LEN],h_loccode[APL_LOCNCODE_LENGTH];
 	char chr_h_bl_upto_dt[APL_DATE_LEN], h_prodateype[IV_PRODTYPE_LEN];
	char chr_h_bl_proc_dt[APL_DATE_LEN];
	char l_str_custdt[APL_DATE_LEN];
	char l_str_custworkdt[APL_DATE_LEN];
	double dbl_h_portval=0.0;
	double h_closing_pr=0.0,h_safekeep_pos=0.0;
	char  h_dl_client[APL_CLIENT_LENGTH],chr_h_param_code[IV_PARAM_LEN];
	char chr_h_sel_stmt[4000];
	double l_ptc_amt=0.0,ptc_amount=0.0;/* vinay */

	
	char chr_h_srv_ind[50];
	char chr_h_instr_ccy[APL_CCYCODE_LEN],chr_h_param_val[IV_PARAM_LEN];
	short int i_dl_client = 0, i_nil_fees= 0, i_parameter_cd= 0;
	short int i_charge_class= 0,i_fee_class= 0,i_minimumfee= 0;
	short i_adm_minfee = 0;
     short i_loccode = 0;
	double dbl_h_tpval=0.0;
	int int_h_posn_cnt=0;
	short l_cond_exists = 0;	/*Variable declaration for IF_COND_NOT_EXISTS HDFCIV_004	Rohit*/
	int int_l_diff = 0;
	int l_int_cnt =0;

	/****** For Custody Printing : Vinay Kalaskar *************************/
	
	int l_schdlfee_count = 0;
	double l_schdlfee = 0.0;
	double l_cust_chrg = 0.0;

	char l_bill_from_dt[20] = APL_NULL_STRING;
	char l_bill_to_dt[20] = APL_NULL_STRING;

	EXEC SQL VAR l_bill_from_dt IS STRING;
	EXEC SQL VAR l_bill_to_dt  IS STRING;

	/*********************************************************************/


	EXEC SQL VAR h_instr_code     IS STRING;
	EXEC SQL VAR h_loccode   IS STRING;
	EXEC SQL VAR h_prodateype   IS STRING;
	EXEC SQL VAR h_dl_client    IS STRING;
	EXEC SQL VAR chr_h_param_code IS STRING;
	EXEC SQL VAR chr_h_param_val  IS STRING;
	EXEC SQL VAR chr_h_bl_upto_dt IS STRING;
	EXEC SQL VAR chr_h_bl_proc_dt IS STRING;
	EXEC SQL VAR l_str_custdt IS STRING;
	struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	int int_i_cnt=0,int_fetch_cnt=0,int_retstat=0;
	int int_is_pval_cur_open = 0, int_is_regen_cur_open = 0;
	int int_l_err_flg = IV_SUCCESS; 
	double srv_charge=0.0,tot_cust_chg=0.0,tot_adm_cust_chg=0.0;
	double l_minimumfee_adj=0.0, l_maximum_fee_adj=0.0, l_adm_nil_fees=0.0;
	double l_adm_minimumfee=0.0,l_adm_maximum_fee=0.0;
	double l_nil_fees=0.0,l_minimumfee=0.0,l_maximum_fee=0.0,l_exchg_rt=1.0,l_exchg_fb=1.0;
	double l_round_portval = 0.0; 
	char *chr_l_param_code = NULL,*z,chr_curr_param_val[IV_PARAM_LEN];
	char chr_prev_param_val[IV_PARAM_LEN];
	char chr_acct_str[IV_CLT_LEN],chr_l_adm_param_code[IV_PARAM_LEN];
	char chr_l_charge_basis[IV_STRING_LEN],chr_l_fee_basis[IV_STRING_LEN];
	char chr_l_adm_charge_basis[IV_STRING_LEN],chr_l_adm_fee_basis[IV_STRING_LEN];
	char chr_l_charge_type,chr_l_fee_type,*chr_l_actcode=NULL,*k;
	char chr_mstacctstr[IV_CLT_LEN],chr_l_buf[BUFFER_LEN];
	char chr_l_portfolio_eval;			/* PJ IV_004 Portfolio eval */
	char chr_l_b_basis_cust[4]; 		/* Bageshri HB_IV_001 */
	double l_cust_chrg_bcy = 0.0;//shailesh 03-01-2008 ISKB_430_06_04
	IV_DATA_STRUCT_H l_iv_data_struct_h_custgrp[50];
	IV_DATA_STRUCT_H l_iv_data_struct_h_admgrp[50];
	IV_CLIENTPARAM_STRUCT_H l_iv_clientparam_struct_hb;
	IV_CLIENT_SERV_BASIS_STRUCT l_iv_client_serv_basis_structa;
	IV_CLIENTSETUP_STRUCT l_iv_clientsetup_struct;

	sqlca.sqlcode = 0;
	int_p_retstat = (int *)calloc(1,sizeof(int));
	*int_p_retstat = IV_SUCCESS;

	
	memset(l_iv_data_struct_h_custgrp[0].proc_data,APL_NULL_CHAR,100);
	memset(l_iv_data_struct_h_admgrp[0].proc_data,APL_NULL_CHAR,100);
	memset(chr_acct_str,APL_NULL_CHAR,IV_CLT_LEN);
	memset(chr_mstacctstr,APL_NULL_CHAR,IV_CLT_LEN);
	memset(chr_l_charge_basis,APL_NULL_CHAR,IV_STRING_LEN);
	memset(chr_l_adm_charge_basis,APL_NULL_CHAR,IV_STRING_LEN);
	memset(chr_l_fee_basis,APL_NULL_CHAR,IV_STRING_LEN);
	memset(chr_l_adm_fee_basis,APL_NULL_CHAR,IV_STRING_LEN);
	memset(chr_curr_param_val,APL_NULL_CHAR,IV_PARAM_LEN);
	memset(chr_prev_param_val,APL_NULL_CHAR,IV_PARAM_LEN);
	memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
	memset(chr_h_sel_stmt,APL_NULL_CHAR,4000);

	memset(&l_iv_clientparam_struct_hb,NULL,sizeof(IV_CLIENTPARAM_STRUCT_H));
	memset(&l_iv_client_serv_basis_structa,NULL,sizeof(IV_CLIENT_SERV_BASIS_STRUCT));
	memset(&l_iv_clientsetup_struct,NULL,sizeof(IV_CLIENTSETUP_STRUCT));

	memset(h_dl_client, APL_NULL_CHAR, APL_CLIENT_LENGTH);
	memset(chr_h_bl_upto_dt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(chr_h_bl_proc_dt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_str_custdt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_str_custworkdt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(h_loccode, APL_NULL_CHAR, APL_LOCNCODE_LENGTH);
	memset(h_prodateype, APL_NULL_CHAR, IV_PRODTYPE_LEN);
	memset(h_instr_code, APL_NULL_CHAR, APL_INSTRUMENTCODE_LEN);
	memset(chr_h_param_code, APL_NULL_CHAR, IV_PARAM_LEN);
	memset(chr_h_param_val, APL_NULL_CHAR, IV_PARAM_LEN);
	memset(chr_h_instr_ccy, APL_NULL_CHAR, APL_CCYCODE_LEN);
	memset(chr_h_srv_ind, APL_NULL_CHAR, 50);
	memset(chr_l_b_basis_cust, APL_NULL_CHAR, 4); /* Bageshri HB_IV_001 */
	
	k=(char *) calloc(IV_CLT_LEN,sizeof(char));
	z=(char *) calloc (IV_PARAM_LEN,sizeof(char));
	strcpy(chr_acct_str,p_cltt_str);
	strcpy(h_dl_client,chr_p_client);
	strcpy(chr_h_bl_upto_dt,chr_g_bl_upto_dt);
	strcpy(chr_h_bl_proc_dt,chr_g_bl_proc_dt);
	strcpy(chr_l_adm_param_code," ");
	strcpy(chr_l_adm_charge_basis," ");
	strcpy(chr_l_adm_fee_basis," ");

	printf("\n *** 117 calculating custody charges for %s %c", chr_p_client, chr_g_bl_gen);	
	
	if(strlen(chr_p_client) > 0)
	{
		strcpy(chr_mstacctstr,chr_p_client);
		strcat(chr_mstacctstr,";");
		int_retstat = IV_SUCCESS;
		if( APL_FAILURE == IV_Rtv_IVCUSTSETUP(chr_p_client,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error : Billing setup not found for Account %s \n",chr_p_client);
				fflush(fp);
				*int_p_retstat = int_retstat;
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
				APL_GOBACK_FAIL;
			}
		}
		chr_l_portfolio_eval = l_iv_clientsetup_struct.portfolio_eval;
		printf("\n 145 portfolio evaluation %c \n ",  chr_l_portfolio_eval);
		
		/* Bageshri HB_IV_001  START */
		strcpy(chr_l_b_basis_cust, l_iv_clientsetup_struct.b_basis_cust);
		/* Bageshri HB_IV_001  END */


	}
	if(chr_g_bl_gen == 'M')
	{
		strcpy(chr_mstacctstr,p_mstclt_a);
		strcat(chr_mstacctstr,";");
		int_retstat = IV_SUCCESS;
		if( APL_FAILURE == IV_Rtv_IVCUSTSETUP(p_mstclt_a,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error : Master Account %s of client %s  not found in billing system\n",p_mstclt_a,chr_p_client);
				fflush(fp);
				*int_p_retstat = int_retstat;
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
				APL_GOBACK_FAIL;
			}
		}

		strcat(chr_mstacctstr,l_iv_clientsetup_struct.default_feeclt);
		strcat(chr_mstacctstr,";");
		strcat(chr_mstacctstr,chr_g_cb_code);
		strcat(chr_mstacctstr,";");
		strcat(chr_mstacctstr,APL_NULL_STRING);
		int_retstat = IV_SUCCESS;
		if(APL_SUCCESS == IV_Rtv_GetServBasis(chr_mstacctstr,CUSTODYFEE,&l_iv_client_serv_basis_structa,&int_retstat,l_debug_info_ptr))
		{
			chr_l_charge_type = l_iv_client_serv_basis_structa.chrg_clas;
			chr_l_fee_type = l_iv_client_serv_basis_structa.fees_class;
			strcpy(chr_l_charge_basis,l_iv_client_serv_basis_structa.chrg_base);
			strcpy(chr_l_fee_basis,l_iv_client_serv_basis_structa.fees_base);
			/*added by shruthi kumbla for ISKB_1901*/
			if((l_iv_client_serv_basis_structa.incld_in_ann_min_fee)!='Y')
				l_iv_client_serv_basis_structa.incld_in_ann_min_fee = 'N';
				
			
		}
		else
		{
			fprintf(fp,"185 Error : Service basis not found for service %d for master client of %s\n",CUSTODYFEE,chr_p_client);
			fflush(fp);
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}

			*int_p_retstat = int_retstat;
			APL_GOBACK_FAIL
		}
	}

	int_retstat = IV_SUCCESS;
	memset(&l_iv_client_serv_basis_structa, NULL, sizeof(IV_CLIENT_SERV_BASIS_STRUCT));
	if(APL_SUCCESS == IV_Rtv_GetServBasis(chr_acct_str,CUSTODYFEE,&l_iv_client_serv_basis_structa,&int_retstat,l_debug_info_ptr))
	{
		if(chr_g_bl_gen != 'M')
		{
			strcpy(chr_l_charge_basis,l_iv_client_serv_basis_structa.chrg_base);
			strcpy(chr_l_fee_basis,l_iv_client_serv_basis_structa.fees_base);
		}
		chr_l_charge_type = l_iv_client_serv_basis_structa.chrg_clas;
		chr_l_fee_type = l_iv_client_serv_basis_structa.fees_class;
		l_nil_fees   = l_iv_client_serv_basis_structa.nil_fees;
		l_minimumfee   = l_iv_client_serv_basis_structa.minimumfee;
		l_maximum_fee   = l_iv_client_serv_basis_structa.maximum_fee;
		/*added by shruthi kumbla for ISKB_1901*/
			if((l_iv_client_serv_basis_structa.incld_in_ann_min_fee)!='Y')
				l_iv_client_serv_basis_structa.incld_in_ann_min_fee = 'N';

		#ifdef BILLDEBUG 

			fprintf(TestRep, "Custody Charges: Account: %s, Master Account: %s\n", chr_p_client, p_mstclt_a);
			fprintf(TestRep, "Fee Basis: %s, Charge Basis: %s, Fee Type: %c, Charge Type: %c\n", chr_l_fee_basis, chr_l_charge_basis, chr_l_fee_type, chr_l_charge_type);
			fprintf(TestRep, "Nil Fee: %lf, Min Fee: %lf, Max Fee: %lf\n", l_nil_fees, l_minimumfee, l_maximum_fee);
			fflush(TestRep);

		#endif 
	}
	else
	{
		fprintf(fp,"225 Error : Service basis not found for service %d for client %s\n",CUSTODYFEE,chr_p_client);
		fflush(fp);
		int_bl_err_level = 1;
		if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		{
			CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
			CO_FreeErrLst(l_debug_info_ptr);
		}
		*int_p_retstat = int_retstat;
		APL_GOBACK_FAIL;
	}
	printf("\n ** 210 ** ,%s,%s,\n", l_iv_client_serv_basis_structa.client,h_dl_client);
	if(strcmp(l_iv_client_serv_basis_structa.client,h_dl_client) != 0)
	{
		int_retstat = IV_SUCCESS;
		IV_Rtv_IVCUSTSETUP(l_iv_client_serv_basis_structa.client,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr);
		if (int_retstat == IV_SUCCESS || int_retstat == IV_COLUMN_NULL_ERR)
		{
			l_exchg_rt = 1.0;
			if (strcmp( l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode) != 0) 
			{
				int_retstat = IV_SUCCESS;
				if(APL_FAILURE == IV_Rtv_ExchRate(l_iv_clientsetup_struct.fees_ccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,&l_exchg_rt, &int_retstat,l_debug_info_ptr)) 																			
				{
					fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",l_iv_clientsetup_struct.fees_ccy,chr_g_fee_ccycode); 																						 
					fflush(fp);
					int_bl_err_level = 1;
					*int_p_retstat = int_retstat;
				}
           			
                                CO_Round(l_nil_fees * l_exchg_rt, int_g_ccy_decimallen, &l_nil_fees);
                                CO_Round(l_minimumfee * l_exchg_rt, int_g_ccy_decimallen, &l_minimumfee);
                                CO_Round(l_maximum_fee * l_exchg_rt, int_g_ccy_decimallen, &l_maximum_fee);
			}

		}
		else if(int_retstat == IV_CRITCAL_ERROR_IND)
		{
			fprintf(fp,"Error : Account %s  not found in billing system\n",l_iv_client_serv_basis_structa.client);
			fflush(fp);
			*int_p_retstat = IV_CRITCAL_ERROR_IND;
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}

			*int_p_retstat = int_retstat;
			APL_GOBACK_FAIL
		}
	}
   

   l_nil_fees = l_nil_fees * g_exchg_rt_fee_bl;   
   l_minimumfee = l_minimumfee * g_exchg_rt_fee_bl;   
   l_maximum_fee = l_maximum_fee * g_exchg_rt_fee_bl;   
	
	#ifdef BILLDEBUG 

		fprintf(TestRep, "Exchange Rate is %lf\n", l_exchg_rt);
		fflush(TestRep);

	#endif 
	
	/* HDFCIV_004 Rohit No Admin charges for India specific */
	IF_COND_NOT_EXISTS("ADMIN_CHARGE","NO_CUST_ADMIN")
	{
		strcpy(chr_acct_str,p_cltt_str);
		int_retstat = IV_SUCCESS;
		if(APL_SUCCESS == IV_Rtv_GetServBasis( chr_acct_str,ADM_CUST_FEE_IND,&l_iv_client_serv_basis_structa,&int_retstat,l_debug_info_ptr))
		{
			l_adm_nil_fees   = l_iv_client_serv_basis_structa.nil_fees;
			l_adm_minimumfee   = l_iv_client_serv_basis_structa.minimumfee;
			l_adm_maximum_fee   = l_iv_client_serv_basis_structa.maximum_fee;

			/*added by shruthi kumbla for ISKB_1901*/
			if((l_iv_client_serv_basis_structa.incld_in_ann_min_fee)!='Y')
				l_iv_client_serv_basis_structa.incld_in_ann_min_fee = 'N';
				
			#ifdef BILLDEBUG 

				fprintf(TestRep, "Custody Adm. Charges: Account: %s, Master Account: %s\n", chr_p_client, p_mstclt_a);
				fprintf(TestRep, "Fee Basis: %s, Charge Basis: %s, Fee Type: %c, Charge Type: %c\n", chr_l_fee_basis, chr_l_charge_basis, chr_l_fee_type, chr_l_charge_type);
				fprintf(TestRep, "Nil Fee: %lf, Min Fee: %lf, Max Fee: %lf\n", l_adm_nil_fees, l_adm_minimumfee, l_adm_maximum_fee);
				fflush(TestRep);

			#endif 
		}
		else
		{
			if(int_retstat != IV_COLUMN_NULL_ERR && int_retstat != IV_NO_DATA_FOUND_ERR)
			{
				fprintf(fp,"Service basis not defined for service %d for master client  of client %s\n",ADM_CUST_FEE_IND,chr_p_client);
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}

				*int_p_retstat = int_retstat;
				APL_GOBACK_FAIL;
			}
		}
		
		if(strcmp(l_iv_client_serv_basis_structa.client,h_dl_client) != 0)
		{
			int_retstat = IV_SUCCESS;
			IV_Rtv_IVCUSTSETUP(l_iv_client_serv_basis_structa.client,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr);
			if (int_retstat == IV_SUCCESS || int_retstat == IV_COLUMN_NULL_ERR)
			{
				l_exchg_rt = 1.0;
				if (strcmp(l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode) != 0) 
				{
					int_retstat = IV_SUCCESS;
					if(APL_FAILURE == IV_Rtv_ExchRate(l_iv_clientsetup_struct.fees_ccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,&l_exchg_rt, &int_retstat,l_debug_info_ptr))  																		 
					{
						fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",l_iv_clientsetup_struct.fees_ccy,chr_g_fee_ccycode);  																					 
						fflush(fp);
						int_bl_err_level = 1;
						*int_p_retstat = int_retstat;
						if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
						{
							CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
							CO_FreeErrLst(l_debug_info_ptr);
						}
					}
					

																	CO_Round(l_adm_nil_fees * l_exchg_rt, int_g_ccy_decimallen,&l_adm_nil_fees);
																	CO_Round(l_adm_minimumfee * l_exchg_rt, int_g_ccy_decimallen,&l_adm_minimumfee);
																	CO_Round(l_adm_maximum_fee * l_exchg_rt, int_g_ccy_decimallen,&l_adm_maximum_fee);
				}
			}
			else if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error : Account %s  not found in billing system\n",l_iv_client_serv_basis_structa.client);
				fflush(fp);
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}

				*int_p_retstat = int_retstat;
				APL_GOBACK_FAIL;
			}
		}
		
							
		 l_adm_nil_fees = l_adm_nil_fees *  g_exchg_rt_fee_bl; 
		 l_adm_minimumfee = l_adm_minimumfee *  g_exchg_rt_fee_bl; 
		 l_adm_maximum_fee = l_adm_maximum_fee *  g_exchg_rt_fee_bl; 

		#ifdef BILLDEBUG 

			fprintf(TestRep, "Exchange Rate is %lf\n", l_exchg_rt);

		#endif 
	}
	/* HDFCIV_004 Rohit Admin Charges End Here */

	printf("\n 355 checking position\n");	

	int_retstat = IV_SUCCESS;
	if(APL_FAILURE == IV_Chk_PosnExistTrd(h_dl_client,&int_retstat,l_debug_info_ptr))
	{
		if(int_retstat == IV_NO_DATA_FOUND_ERR)
		{
			
			if (l_nil_fees > 0)
			{
				int_retstat = IV_SUCCESS;

		#ifdef BILLDEBUG 
         
			fprintf(TestRep, "\nInserting Record into IV_SERVICE_CHRG\n");     
			fprintf(TestRep, "account: %s\n",h_dl_client);
			fprintf(TestRep, "nil fees: %lf",l_nil_fees);
		   fprintf(TestRep, " min fees adjust: %lf",0.0);
			fprintf(TestRep, " MAX fees adjust: %lf",0.0); 
			fprintf(TestRep, " Tot_chg: %lf\n",0.0);
			fprintf(TestRep, "currency :%s\n",chr_g_bl_ccycode);
			fflush(TestRep);

		#endif 
				if(APL_FAILURE == IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,h_dl_client,l_nil_fees,0.0,0.0,0.0,chr_g_bl_ccycode,'I',CUSTODYFEE,p_mstclt_a,l_iv_client_serv_basis_structa.incld_in_ann_min_fee,&int_retstat,l_debug_info_ptr))
				{
					fprintf(fp,"Error in writing to table for client %s. Please contact support.\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					*int_p_retstat = IV_CRITCAL_ERROR_IND;
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}

					*int_p_retstat = int_retstat;
					APL_GOBACK_FAIL;
				}
			}
			
				
			if (l_adm_nil_fees > 0) 
			{
				int_retstat = IV_SUCCESS;
		#ifdef BILLDEBUG 
         
			fprintf(TestRep, "\nInserting Record into IV_SERVICE_CHRG\n");     
			fprintf(TestRep, "account: %s\n",h_dl_client);
			fprintf(TestRep, "nil fees: %lf",l_adm_nil_fees);
		   fprintf(TestRep, " min fees adjust: %lf",0.0);
			fprintf(TestRep, " MAX fees adjust: %lf",0.0); 
			fprintf(TestRep, " tot_chg: %lf\n",0.0);
			fprintf(TestRep, "currency :%s\n",chr_g_bl_ccycode);
			fflush(TestRep);

		#endif 
				if(APL_FAILURE == IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,h_dl_client,l_adm_nil_fees,0.0,0.0,0.0,chr_g_bl_ccycode,
																'I',ADM_CUST_FEE_IND,p_mstclt_a,l_iv_client_serv_basis_structa.incld_in_ann_min_fee,&int_retstat,l_debug_info_ptr))
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support.\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					*int_p_retstat = IV_CRITCAL_ERROR_IND;
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
					APL_GOBACK_FAIL;
				}
			}
			
			*int_p_retstat = IV_SUCCESS;
			APL_GOBACK_SUCCESS;
		}
		else
		{
			fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			*int_p_retstat = IV_CRITCAL_ERROR_IND;
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}
			APL_GOBACK_FAIL
		}
	}

	

	strcpy(chr_acct_str,p_cltt_str);
	printf("\n before strtok \n");
	//chr_l_actcode = strtok_r(chr_acct_str,";",&k);
	printf("chr_l_actcode |%s|\n",chr_l_actcode);

	
		memset(&l_iv_clientparam_struct_hb,NULL,sizeof(IV_CLIENTPARAM_STRUCT_H));
		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Rtv_IVCUSTPARAM(l_iv_client_serv_basis_structa.client,CUSTODYFEE,l_iv_client_serv_basis_structa.apl_frm_date,&l_iv_clientparam_struct_hb,&int_retstat,l_debug_info_ptr)) /* Added by Monica for ISKB_1737*/
		{
			if(int_retstat != IV_CRITCAL_ERROR_IND)
			{
				
			}
			else
			{
				fprintf(fp,"Error : Service Dependencies not defined for client %s\n",chr_l_actcode);
				fflush(fp);
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
				APL_GOBACK_FAIL
			}
		}
		else
		{
		 Alert("Success from IV_Rtv_IVCUSTPARAM fn");

	}
	
	printf("parameter_cd |%s|\n",l_iv_clientparam_struct_hb.parameter_cd);
	strcpy(chr_h_param_code,l_iv_clientparam_struct_hb.parameter_cd);
	printf("chr_h_param_code |%s|\n",chr_h_param_code);


	if(chr_regen_flg == 'N')
	{
		APL_IF_DEBUG
		{
			CO_ProcMonitor(TechRep,"Generating Custody charges for account",NULL,NULL);
  			memset(chr_l_buf,NULL,BUFFER_LEN);
  			sprintf(chr_l_buf,"%s",chr_p_client);
  			CO_ProcMonitor(TechRep,chr_l_buf,NULL,NULL);
		}

		Alert("Bill Upto Date |%s|  Bill Sys Date |%s|\n",chr_g_bl_upto_dt,chr_g_bl_sys_dt);

		if(APL_FAILURE == CO_Pro_DateComp(chr_g_bl_upto_dt,chr_g_bl_sys_dt,&int_l_diff,l_debug_info_ptr))
		{
				*int_p_retstat = int_retstat;
				APL_GOBACK_FAIL
		}

		if (int_l_diff==0)
		{
			/* Bageshri HB_IV_001 START */
			if(!strcmp(chr_l_b_basis_cust,"INP"))
			{
				/*
				strcpy(chr_h_sel_stmt, "SELECT NVL(SUM((NVL(a.SAFEKEEP_POS,0) + NVL(a.NVALRECEIVE,0) + NVL(a.VAL_REC,0) +");
				strcat(chr_h_sel_stmt, " NVL(a.DP_REC,0) - NVL(a.NVALDELIVER,0) - NVL(a.VAL_DEL,0) - NVL(a.DP_DEL,0))");
				strcat(chr_h_sel_stmt, " * c.CLOSING_PR),0),a.INSTR_CODE, a.LOCATION_CD,");
				strcat(chr_h_sel_stmt, "NVL(SUM(NVL(a.SAFEKEEP_POS,0) + NVL(a.NVALRECEIVE,0) + NVL(a.VAL_REC,0) +");
				strcat(chr_h_sel_stmt, " NVL(a.DP_REC,0) - NVL(a.NVALDELIVER,0) - NVL(a.VAL_DEL,0) - NVL(a.DP_DEL,0)),0),");
				*/
                        /* shailesh Retrofit from HDFC 30-05-2008 */
				strcpy(chr_h_sel_stmt, "SELECT DECODE(b.INSTR_TYPE,'BON',DECODE(SIGN(NVL(SUM((NVL(A.SAFEKEEP_POS,0) + NVL(A.START_SAFEK,0) + NVL(A.NVALRECEIVE,0) + NVL(A.VAL_REC,0) + NVL(A.DP_REC,0) - NVL(A.NVALDELIVER,0) - NVL(A.VAL_DEL,0) - NVL(A.DP_DEL,0)) * C.CLOSING_PR),0)),1,(NVL(SUM((NVL(A.SAFEKEEP_POS,0) + NVL(A.START_SAFEK,0) + NVL(A.NVALRECEIVE,0) + NVL(A.VAL_REC,0) + NVL(A.DP_REC,0) - NVL(A.NVALDELIVER,0) - NVL(A.VAL_DEL,0) - NVL(A.DP_DEL,0)) * C.CLOSING_PR),0)),0),");
				strcat(chr_h_sel_stmt, "DECODE(SIGN(NVL(SUM((NVL(A.SAFEKEEP_POS,0) + NVL(A.NVALRECEIVE,0) + NVL(A.VAL_REC,0) + NVL(A.DP_REC,0) - NVL(A.NVALDELIVER,0) - NVL(A.VAL_DEL,0) - NVL(A.DP_DEL,0)) * C.CLOSING_PR),0)),1,(NVL(SUM((NVL(A.SAFEKEEP_POS,0) + NVL(A.NVALRECEIVE,0) + NVL(A.VAL_REC,0) + NVL(A.DP_REC,0) - NVL(A.NVALDELIVER,0) - NVL(A.VAL_DEL,0) - NVL(A.DP_DEL,0)) * C.CLOSING_PR),0)),0)),");
				strcat(chr_h_sel_stmt, "A.INSTR_CODE, A.LOCATION_CD,");
				strcat(chr_h_sel_stmt, "DECODE(b.INSTR_TYPE,'BON',DECODE(SIGN(NVL(SUM(NVL(A.SAFEKEEP_POS,0) + NVL(A.START_SAFEK,0) + NVL(A.NVALRECEIVE,0) + NVL(A.VAL_REC,0) + NVL(A.DP_REC,0) - NVL(A.NVALDELIVER,0) - NVL(A.VAL_DEL,0) - NVL(A.DP_DEL,0)),0)),1,NVL(SUM(NVL(A.SAFEKEEP_POS,0) + NVL(A.START_SAFEK,0) + NVL(A.NVALRECEIVE,0) + NVL(A.VAL_REC,0) + NVL(A.DP_REC,0) - NVL(A.NVALDELIVER,0) - NVL(A.VAL_DEL,0) - NVL(A.DP_DEL,0)),0),0), ");
				strcat(chr_h_sel_stmt, "DECODE(SIGN(NVL(SUM(NVL(A.SAFEKEEP_POS,0) + NVL(A.NVALRECEIVE,0) + NVL(A.VAL_REC,0) + NVL(A.DP_REC,0) - NVL(A.NVALDELIVER,0) - NVL(A.VAL_DEL,0) - NVL(A.DP_DEL,0)),0)),1,NVL(SUM(NVL(A.SAFEKEEP_POS,0) + NVL(A.NVALRECEIVE,0) + NVL(A.VAL_REC,0) + NVL(A.DP_REC,0) - NVL(A.NVALDELIVER,0) - NVL(A.VAL_DEL,0) - NVL(A.DP_DEL,0)),0),0)), ");
			}
			else
			{
				strcpy(chr_h_sel_stmt, "SELECT DECODE(SIGN(NVL(SUM(NVL(a.SAFEKEEP_POS,0) * c.CLOSING_PR),0)),1,(NVL(SUM(NVL(a.SAFEKEEP_POS,0) * c.CLOSING_PR),0)),0),");
				strcat(chr_h_sel_stmt, "a.INSTR_CODE, a.LOCATION_CD,DECODE(SIGN(NVL(SUM(NVL(a.SAFEKEEP_POS,0)),0)),1,(NVL(SUM(NVL(a.SAFEKEEP_POS,0)),0)),0),");
			}
			/* Bageshri HB_IV_001 END */

			strcat(chr_h_sel_stmt, " RTRIM(b.INSTR_SUB_TYPE),b.CURRENCY_CD ");
			strcat(chr_h_sel_stmt, "FROM DL_SAFEK a,MT_INSTRUMENT b,MT_DLYMKTPRC c "); 
			strcat(chr_h_sel_stmt, "WHERE a.CLIENT = '");
			strcat(chr_h_sel_stmt, h_dl_client);
			strcat(chr_h_sel_stmt, "' AND c.PRICE_DATE = ");
			strcat(chr_h_sel_stmt, "(SELECT MAX(PRICE_DATE) FROM MT_DLYMKTPRC D WHERE D.INSTR_CODE = A.INSTR_CODE)" ); /* HDFCIV_004 PJ Retrieve Latest price of NSE/BSE resp. */
		/*	strcat(chr_h_sel_stmt, " AND b.INSTR_SUB_TYPE  != 'PT' "); */
			strcat(chr_h_sel_stmt, " AND    a.INSTR_CODE  = b.INSTR_CODE ");
			strcat(chr_h_sel_stmt, "AND    a.INSTR_CODE  = c.INSTR_CODE ");
                   /* shailesh Retrofit from HDFC 30-05-2008*/
			strcat(chr_h_sel_stmt, "GROUP BY b.INSTR_TYPE,b.INSTR_SUB_TYPE,a.LOCATION_CD,a.INSTR_CODE,b.CURRENCY_CD ");
		}
		else
		{
			if (int_l_diff > 0)
				strcpy(l_str_custdt,chr_g_bl_upto_dt);

			else if (int_l_diff < 0)
			{
				EXEC SQL SELECT TO_CHAR(TO_DATE(:chr_g_bl_sys_dt,'DD/MM/YYYY HH24:MI:SS')-1,'DD/MM/YYYY HH24:MI:SS') 
				INTO :l_str_custdt FROM DUAL;
				IS_ANY_ORA_ERROR
			}
	
			/* HDFC Issue Log 391 - monthly Billing fails if month end is Bank Holiday - by Bageshri - 10/09/2008 - START*/
			if( APL_FAILURE == CO_GetPrevBusinessDay(l_str_custdt, l_str_custworkdt, l_debug_info_ptr))
			{
				*int_p_retstat = int_retstat;
				APL_GOBACK_FAIL
			}

			strcpy(l_str_custdt, l_str_custworkdt);

			/* HDFC Issue Log 391 - monthly Billing fails if month end is Bank Holiday - by Bageshri - 10/09/2008 - END */
	
			printf("Custody Charges Bill Date |%s|\n",l_str_custdt);

			if(!strcmp(chr_l_b_basis_cust,"INP"))
			{
				/*
				strcpy(chr_h_sel_stmt, "SELECT NVL(SUM((NVL(a.SAFEKEEP_POS,0) + NVL(a.NVALRECEIVE,0) + NVL(a.VAL_REC,0) +");
				strcat(chr_h_sel_stmt, " NVL(a.DP_REC,0) - NVL(a.NVALDELIVER,0) - NVL(a.VAL_DEL,0) - NVL(a.DP_DEL,0))");
				strcat(chr_h_sel_stmt, " * c.CLOSING_PR),0),a.INSTR_CODE, a.LOCATION_CD,");
				strcat(chr_h_sel_stmt, "NVL(SUM(NVL(a.SAFEKEEP_POS,0) + NVL(a.NVALRECEIVE,0) + NVL(a.VAL_REC,0) +");
				strcat(chr_h_sel_stmt, " NVL(a.DP_REC,0) - NVL(a.NVALDELIVER,0) - NVL(a.VAL_DEL,0) - NVL(a.DP_DEL,0)),0),");
				*/
                                /* shailesh Retrofit from HDFC 30-05-2008 */
				strcpy(chr_h_sel_stmt, "SELECT DECODE(b.INSTR_TYPE,'BON',DECODE(SIGN(NVL(SUM((NVL(A.SAFEKEEP_POS,0) + NVL(A.START_SAFEK,0) + NVL(A.NVALRECEIVE,0) + NVL(A.VAL_REC,0) + NVL(A.DP_REC,0) - NVL(A.NVALDELIVER,0) - NVL(A.VAL_DEL,0) - NVL(A.DP_DEL,0)) * C.CLOSING_PR),0)),1,(NVL(SUM((NVL(A.SAFEKEEP_POS,0) + NVL(A.START_SAFEK,0) + NVL(A.NVALRECEIVE,0) + NVL(A.VAL_REC,0) + NVL(A.DP_REC,0) - NVL(A.NVALDELIVER,0) - NVL(A.VAL_DEL,0) - NVL(A.DP_DEL,0)) * C.CLOSING_PR),0)),0),");
				strcat(chr_h_sel_stmt, "DECODE(SIGN(NVL(SUM((NVL(A.SAFEKEEP_POS,0) + NVL(A.NVALRECEIVE,0) + NVL(A.VAL_REC,0) + NVL(A.DP_REC,0) - NVL(A.NVALDELIVER,0) - NVL(A.VAL_DEL,0) - NVL(A.DP_DEL,0)) * C.CLOSING_PR),0)),1,(NVL(SUM((NVL(A.SAFEKEEP_POS,0) + NVL(A.NVALRECEIVE,0) + NVL(A.VAL_REC,0) + NVL(A.DP_REC,0) - NVL(A.NVALDELIVER,0) - NVL(A.VAL_DEL,0) - NVL(A.DP_DEL,0)) * C.CLOSING_PR),0)),0)),");
				strcat(chr_h_sel_stmt, "A.INSTR_CODE, A.LOCATION_CD,");
				strcat(chr_h_sel_stmt, "DECODE(b.INSTR_TYPE,'BON',DECODE(SIGN(NVL(SUM(NVL(A.SAFEKEEP_POS,0) + NVL(A.START_SAFEK,0) + NVL(A.NVALRECEIVE,0) + NVL(A.VAL_REC,0) + NVL(A.DP_REC,0) - NVL(A.NVALDELIVER,0) - NVL(A.VAL_DEL,0) - NVL(A.DP_DEL,0)),0)),1,NVL(SUM(NVL(A.SAFEKEEP_POS,0) + NVL(A.START_SAFEK,0) + NVL(A.NVALRECEIVE,0) + NVL(A.VAL_REC,0) + NVL(A.DP_REC,0) - NVL(A.NVALDELIVER,0) - NVL(A.VAL_DEL,0) - NVL(A.DP_DEL,0)),0),0), ");
				strcat(chr_h_sel_stmt, "DECODE(SIGN(NVL(SUM(NVL(A.SAFEKEEP_POS,0) + NVL(A.NVALRECEIVE,0) + NVL(A.VAL_REC,0) + NVL(A.DP_REC,0) - NVL(A.NVALDELIVER,0) - NVL(A.VAL_DEL,0) - NVL(A.DP_DEL,0)),0)),1,NVL(SUM(NVL(A.SAFEKEEP_POS,0) + NVL(A.NVALRECEIVE,0) + NVL(A.VAL_REC,0) + NVL(A.DP_REC,0) - NVL(A.NVALDELIVER,0) - NVL(A.VAL_DEL,0) - NVL(A.DP_DEL,0)),0),0)), ");
			}
			else
			{
				/*
				strcpy(chr_h_sel_stmt, "SELECT NVL(SUM(NVL(a.SAFEKEEP_POS,0) * c.CLOSING_PR),0),");
				strcat(chr_h_sel_stmt, "a.INSTR_CODE, a.LOCATION_CD,NVL(SUM(NVL(a.SAFEKEEP_POS,0)),0),");
				*/
				strcpy(chr_h_sel_stmt, "SELECT DECODE(SIGN(NVL(SUM(NVL(a.SAFEKEEP_POS,0) * c.CLOSING_PR),0)),1,(NVL(SUM(NVL(a.SAFEKEEP_POS,0) * c.CLOSING_PR),0)),0),");
				strcat(chr_h_sel_stmt, "a.INSTR_CODE, a.LOCATION_CD,DECODE(SIGN(NVL(SUM(NVL(a.SAFEKEEP_POS,0)),0)),1,(NVL(SUM(NVL(a.SAFEKEEP_POS,0)),0)),0),");
			}
			/* Bageshri HB_IV_001 END */

			strcat(chr_h_sel_stmt, " RTRIM(b.INSTR_SUB_TYPE),b.CURRENCY_CD ");
			strcat(chr_h_sel_stmt, "FROM DL_HISSAFEK a,MT_INSTRUMENT b,MT_DLYMKTPRC c "); 
			strcat(chr_h_sel_stmt, "WHERE a.CLIENT = '");
			strcat(chr_h_sel_stmt, h_dl_client);

			 /* shailesh Retrofit from HDFC 30-05-2008  start*/
                      	if( chr_l_portfolio_eval == 'D')
			{
				strcat(chr_h_sel_stmt, "' AND a.POSIT_DATE = ");
				strcat(chr_h_sel_stmt, "(SELECT MAX(POSIT_DATE) FROM DL_HISSAFEK, SYS_IVCONTROLPARAM WHERE CLIENT = '");
				strcat(chr_h_sel_stmt, h_dl_client);
				strcat(chr_h_sel_stmt, "' AND INSTR_CODE = b.INSTR_CODE	 AND POSIT_DATE > B_PREV_DATE");
				strcat(chr_h_sel_stmt, " AND (POSIT_DATE) <= (TO_DATE('");/*trunc removed by shruthi kumbla for bill optimization on 29/03/2017*/
			strcat(chr_h_sel_stmt, l_str_custdt);
				strcat(chr_h_sel_stmt, "','DD/MM/YYYY HH24:MI:SS')))");
			}
			else
			{
				strcat(chr_h_sel_stmt, "' AND (a.POSIT_DATE) = (TO_DATE('");/*trunc removed by shruthi kumbla for bill optimization on 29/03/2017*/
				strcat(chr_h_sel_stmt, l_str_custdt);
				strcat(chr_h_sel_stmt, "','DD/MM/YYYY HH24:MI:SS'))");
			}

			
                       /* shailesh Retrofit from HDFC 30-05-2008  end*/
			strcat(chr_h_sel_stmt, " AND c.PRICE_DATE = ");
			strcat(chr_h_sel_stmt, "(SELECT MAX(PRICE_DATE) FROM MT_DLYMKTPRC D WHERE D.INSTR_CODE = A.INSTR_CODE" ); /* HDFCIV_004 PJ Retrieve Latest price of NSE/BSE resp. */
			strcat(chr_h_sel_stmt, " AND D.PRICE_DATE <= a.POSIT_DATE)" );	/* ISKB_2284 Rohit */
/*			strcat(chr_h_sel_stmt, " AND b.INSTR_SUB_TYPE  != 'PT' ");*/
			strcat(chr_h_sel_stmt, " AND    a.INSTR_CODE  = b.INSTR_CODE ");
			strcat(chr_h_sel_stmt, "AND    a.INSTR_CODE  = c.INSTR_CODE ");
                        /* shailesh Retrofit from HDFC 30-05-2008*/
			strcat(chr_h_sel_stmt, "GROUP BY b.INSTR_TYPE,b.INSTR_SUB_TYPE,a.LOCATION_CD,a.INSTR_CODE,b.CURRENCY_CD ");
		}
		
		if(strcmp(chr_h_param_code, "LOCATION;PRODUCT;INSTRUMENT") == 0)
			strcat(chr_h_sel_stmt, "ORDER BY a.LOCATION_CD,b.INSTR_SUB_TYPE,");
		else if(strcmp(chr_h_param_code, "LOCATION;INSTRUMENT") == 0)
			strcat(chr_h_sel_stmt, "ORDER BY a.LOCATION_CD,");
		else if(strcmp(chr_h_param_code, "PRODUCT;INSTRUMENT") == 0)
			strcat(chr_h_sel_stmt, "ORDER BY b.INSTR_SUB_TYPE,");
		else if(strcmp(chr_h_param_code, "PRODUCT;LOCATION") == 0)
			strcat(chr_h_sel_stmt, "ORDER BY b.INSTR_SUB_TYPE, a.LOCATION_CD,");
		else if (strcmp(chr_h_param_code, "LOCATION;PRODUCT") == 0)
			strcat(chr_h_sel_stmt, "ORDER BY a.LOCATION_CD, b.INSTR_SUB_TYPE,");
		else if (strcmp(chr_h_param_code, "PRODUCT") == 0)
			strcat(chr_h_sel_stmt, "ORDER BY b.INSTR_SUB_TYPE,");
		else if (strcmp(chr_h_param_code, "LOCATION") == 0)
			strcat(chr_h_sel_stmt, "ORDER BY a.LOCATION_CD,");
		else if (strcmp(chr_h_param_code, "INSTRUMENT") == 0)
			strcat(chr_h_sel_stmt, "ORDER BY ");
		else if (strcmp(chr_h_param_code, ";") == 0)
			strcat(chr_h_sel_stmt, "ORDER BY ");

		strcat(chr_h_sel_stmt, "a.INSTR_CODE");
		
		/* HDFCIV_004 order by query changes for new dependency */	
		
		printf("Executing query=|%s| \n",chr_h_sel_stmt);	
		
		EXEC SQL PREPARE S FROM :chr_h_sel_stmt;

		EXEC SQL DECLARE pval_cur1 CURSOR FOR S;
		
		EXEC SQL OPEN pval_cur1;

		if(sqlca.sqlcode < 0)
		{
			fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			memset(chr_l_buf,NULL,BUFFER_LEN);
			//sprintf(chr_l_buf,"Error in accessing table in processtion %s h_line %d %ld",__FILE__,__LINE__,sqlca.sqlcode); Changes done for AIX Migration
			sprintf(chr_l_buf,"Error in accessing table in processtion %s h_line %d %d",__FILE__,__LINE__,sqlca.sqlcode);
			CO_ProcMonitor(TechRep,chr_l_buf,NULL,NULL);
			*int_p_retstat = IV_CRITCAL_ERROR_IND;
			int_bl_err_level = 1;
		}

		IS_ANY_ORA_ERROR


		/******** For Custody charges Printing : Vinay Kalaskar *********************/

		EXEC SQL SELECT TO_CHAR(TO_DATE(TO_CHAR(B_PREV_DATE+1,'DD/MM/YYYY HH24:MI:SS'),'DD/MM/YYYY HH24:MI:SS'),'DD/MM/YYYY HH24:MI:SS'),
			 TO_CHAR(TO_DATE(TO_CHAR(B_UPTO_DATE,'DD/MM/YYYY HH24:MI:SS'),'DD/MM/YYYY HH24:MI:SS'),'DD/MM/YYYY HH24:MI:SS')
			 INTO :l_bill_from_dt,:l_bill_to_dt
			 FROM SYS_IVCONTROLPARAM;

		IS_ANY_ORA_ERROR

		/****************************************************************************/

		int_is_pval_cur_open = 1;

		int_fetch_cnt = 0;
		for( ; ; )
		{
			dbl_h_portval =0.0;
			h_safekeep_pos = 0.0;
			memset(h_instr_code,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
			memset(h_loccode,APL_NULL_CHAR,APL_LOCNCODE_LENGTH);
			memset(h_prodateype,APL_NULL_CHAR,IV_PRODTYPE_LEN);
			memset(chr_h_instr_ccy,APL_NULL_CHAR,APL_CCYCODE_LEN);
			
			EXEC SQL FETCH  pval_cur1
			INTO :dbl_h_portval,:h_instr_code, :h_loccode:i_loccode,
				  :h_safekeep_pos, :h_prodateype, :chr_h_instr_ccy;

			if ( sqlca.sqlcode < 0 )
			{
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
			}

			IS_ANY_ORA_ERROR

      /* Start : Get Avg Portfolio value for all billing period PJ */
		
      if( chr_l_portfolio_eval == 'D' && sqlca.sqlcode != 1403)
      {
         int_retstat = IV_SUCCESS;
         /*if(APL_FAILURE == CalcLocDepCustServFee(h_dl_client,p_mstclt_a,h_instr_code,h_loccode,&dbl_h_portval,&int_retstat,l_debug_info_ptr))*/
         printf("\before func called dbl_h_portval is  [%lf]",dbl_h_portval);
         if(APL_FAILURE == CalcLocDepCustServFee(h_dl_client,p_mstclt_a,h_instr_code,h_loccode,&dbl_h_portval,chr_l_b_basis_cust,&int_retstat,l_debug_info_ptr))
         {
            if(int_retstat == IV_CRITCAL_ERROR_IND)
            {
               fprintf(fp,"Error : Daily AVG Portfilio calculation failed for account %s \n",h_dl_client);
               fflush(fp);
               int_bl_err_level = 1;
               if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
               {
                  CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                  CO_FreeErrLst(l_debug_info_ptr);
               }
               *int_p_retstat = int_retstat;
					APL_GOBACK_FAIL
            }
         }
      }
    /* End: Avg Portfolio value */

			if(APL_ZERO_RESULT_SET)
			{
				if(int_fetch_cnt > 0)
				{
					
					srv_charge = 0.0;
					int_retstat = IV_SUCCESS;
		
					if(APL_FAILURE == IV_Proc_CalcFee("O",p_cltt_str,CUSTODYFEE,chr_prev_param_val,APL_NULL_STRING,
														chr_h_param_code,dbl_h_tpval,dbl_h_tpval,chr_l_charge_type,chr_l_fee_type,
														&srv_charge,l_iv_data_struct_h_custgrp,'I',p_mstclt_a,chr_l_charge_basis,
														chr_l_fee_basis,chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
					{
						if(int_retstat == IV_CRITCAL_ERROR_IND)
						{
							fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
							fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
							fflush(fp);
							int_bl_err_level = 1;
							if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
							{
								CO_ProcMonitor(TechRep,APL_NULL_STRING,
									 l_debug_info_ptr,NULL);
								CO_FreeErrLst(l_debug_info_ptr);
							}
							*int_p_retstat = int_retstat;
						}
					}
					if(srv_charge > 0)
					{
						tot_cust_chg += srv_charge;
					}
					
					/* HDFCIV_004 Rohit No Admin charges for India specific */
					IF_COND_NOT_EXISTS("ADMIN_CHARGE","NO_CUST_ADMIN")
					{
						srv_charge = 0.0;
						int_retstat = IV_SUCCESS;
							
						if(APL_FAILURE == IV_Proc_CalcFee("O",p_cltt_str,ADM_CUST_FEE_IND,chr_prev_param_val,APL_NULL_STRING, 
															chr_h_param_code,dbl_h_tpval,dbl_h_tpval,chr_l_charge_type,chr_l_fee_type,
															&srv_charge,l_iv_data_struct_h_admgrp,'I',p_mstclt_a,chr_l_charge_basis,
															chr_l_fee_basis,chr_h_srv_ind, &int_retstat,l_debug_info_ptr))
						{
							if(int_retstat == IV_CRITCAL_ERROR_IND)
							{
								fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
								fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
								fflush(fp);
								int_bl_err_level = 1;
								if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
								{
									CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
									CO_FreeErrLst(l_debug_info_ptr);
								}
								*int_p_retstat = int_retstat;
							}
						}

						if(srv_charge > 0)
						{
							tot_adm_cust_chg += srv_charge;
						}
					}
					/* HDFCIV_004 Rohit Admin Charges End Here */
				}
				break;
			}
			int_fetch_cnt++;

			l_exchg_rt = 1.0;

			if ( strcmp(chr_h_instr_ccy, chr_g_fee_ccycode) != 0 )    		
			{
				int_retstat = IV_SUCCESS;
				if(APL_FAILURE == IV_Rtv_ExchRate(chr_h_instr_ccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,&l_exchg_rt, &int_retstat,l_debug_info_ptr))    																					
				{
					fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",chr_h_instr_ccy,chr_g_fee_ccycode);  
																				  
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}
					Alert("l_exchg_rt |%lf|",l_exchg_rt);/*added by shruthi Kumbla for ISKB_1901*/
				
			}

			if(strcmp(chr_h_param_code,"LOCATION;PRODUCT") == 0)
			{
				memset(chr_curr_param_val,APL_NULL_CHAR,IV_PARAM_LEN);
				strcpy(chr_curr_param_val,h_loccode);
				strcat(chr_curr_param_val,";");
				strcat(chr_curr_param_val,h_prodateype);
				strcat(chr_curr_param_val,APL_NULL_STRING);
			}
			else if(strcmp(chr_h_param_code,"LOCATION;PRODUCT;INSTRUMENT") == 0)
				{
					memset(chr_curr_param_val,APL_NULL_CHAR,IV_PARAM_LEN);
					strcpy(chr_curr_param_val,h_loccode);
					strcat(chr_curr_param_val,";");
					strcat(chr_curr_param_val,h_prodateype);
					strcat(chr_curr_param_val,";");
					strcat(chr_curr_param_val,h_instr_code);
					strcat(chr_curr_param_val,APL_NULL_STRING);
				}
			else if(strcmp(chr_h_param_code,"LOCATION;INSTRUMENT") == 0)
				{
					memset(chr_curr_param_val,APL_NULL_CHAR,IV_PARAM_LEN);
					strcpy(chr_curr_param_val,h_loccode);
					strcat(chr_curr_param_val,";");
					strcat(chr_curr_param_val,h_instr_code);
					strcat(chr_curr_param_val,APL_NULL_STRING);
				}
			else if(strcmp(chr_h_param_code,"PRODUCT;INSTRUMENT") == 0)
				{
					memset(chr_curr_param_val,APL_NULL_CHAR,IV_PARAM_LEN);
					strcpy(chr_curr_param_val,h_prodateype);
					strcat(chr_curr_param_val,";");
					strcat(chr_curr_param_val,h_instr_code);
					strcat(chr_curr_param_val,APL_NULL_STRING);
				}
				else
				{
					chr_l_param_code = strtok_r(chr_h_param_code,";",&z);
					if(strcmp(chr_h_param_code,"PRODUCT") == 0)
					{
						memset(chr_curr_param_val,APL_NULL_CHAR,IV_PARAM_LEN);
						strcpy(chr_curr_param_val,h_prodateype);
						strcat(chr_curr_param_val,APL_NULL_STRING);
						chr_l_param_code = strtok_r(NULL,";",&z);
					}
					else if(strcmp(chr_h_param_code,"LOCATION") == 0)
					{
						memset(chr_curr_param_val,APL_NULL_CHAR,IV_PARAM_LEN);
						strcpy(chr_curr_param_val,h_loccode);
						strcat(chr_curr_param_val,APL_NULL_STRING);
						chr_l_param_code = strtok_r(NULL,";",&z);
					}
					else if(strcmp(chr_h_param_code,"INSTRUMENT") == 0)
					{
						memset(chr_curr_param_val,APL_NULL_CHAR,IV_PARAM_LEN);
						strcpy(chr_curr_param_val,h_instr_code);
						strcat(chr_curr_param_val,APL_NULL_STRING);
						chr_l_param_code = strtok_r(NULL,";",&z);
					}
					else
					{
						memset(chr_prev_param_val,APL_NULL_CHAR,IV_PARAM_LEN);
						memset(chr_curr_param_val,APL_NULL_CHAR,IV_PARAM_LEN);
						strcpy(chr_curr_param_val,";");
						strcpy(chr_prev_param_val,";");
					}
				}

			int_retstat = IV_SUCCESS;
			/* if(APL_FAILURE == Cdlymktprc(h_instr_code,&h_closing_pr,&int_retstat,l_debug_info_ptr)) HDFCIV_004 PJ */
			/*if(APL_FAILURE == Cdlylocmktprc(h_instr_code,1,&h_closing_pr,&chr_h_bl_proc_dt,&int_retstat,l_debug_info_ptr)) HB_IV_003 Bageshri */
			if(APL_FAILURE == Cdlylocmktprc(h_instr_code,1,&h_closing_pr,&chr_h_bl_upto_dt,&int_retstat,l_debug_info_ptr))
			{
				fprintf(fp,"Error:Market Price not found for instrument %s for date %s \n",h_instr_code,chr_h_bl_upto_dt);
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
				
				fprintf(fp,"Value of market price fetched is %lf \n",h_closing_pr);
				fflush(fp);
				
			}
			
			fprintf(fp,"Value of market price fetched is %lf \n",h_closing_pr);
			fflush(fp);
			
			if(h_safekeep_pos > 0)
			{
				int_retstat = IV_SUCCESS;
				if(APL_FAILURE == IV_Mod_NewIVACCTSAFEK(chr_g_bl_upto_dt,h_dl_client,h_instr_code,
				  				  chr_h_param_code,chr_curr_param_val,
								  h_closing_pr,chr_h_instr_ccy,h_safekeep_pos,'I',
								  l_exchg_rt,&int_retstat,l_debug_info_ptr))
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					*int_p_retstat = IV_CRITCAL_ERROR_IND;
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					APL_GOBACK_FAIL
				}
				
				//fprintf(fp,"The closing prc that got inserted is %lf\n",h_closing_pr);
				//fflush(fp);
				
			}

			
			/************* For Custody Charges Printing : Vinay Kalaskar *****************/


			if(strcmp(chr_curr_param_val,chr_prev_param_val) == 0)
			{
				l_round_portval = 0.0;
				if(chr_l_portfolio_eval == 'D')
				CO_Round(dbl_h_portval * l_exchg_rt , int_g_ccy_decimallen,&l_round_portval);
				else
		                CO_Round(dbl_h_portval * l_exchg_rt, int_g_ccy_decimallen,&l_round_portval);
                                dbl_h_tpval += l_round_portval;

		     	        #ifdef BILLDEBUG 
					fprintf(TestRep, "\nh_tpval for proc_data_val %s is %lf\n", chr_curr_param_val, dbl_h_tpval);     
					fflush(TestRep);
         	                #endif 
			
					if(chr_l_portfolio_eval == 'M')
					{

						printf("Before Custody Charges Printing \n");

						/* Bageshri 18/06/2007 : HDFC UAT Fix for detailed custody charges - START*/
						/* shailesh custody fees currency conversion 03-01-2008  start  ISKB_430_06_04*/			

						if(strcmp(chr_g_fee_ccycode,chr_g_bl_ccycode)) /*03-06-2008 B_ccy */
						{
							l_cust_chrg_bcy = l_cust_chrg;
 							if(APL_FAILURE == IV_Rtv_ExchRate(chr_g_fee_ccycode,chr_g_bl_ccycode,chr_g_bl_upto_dt,&l_exchg_fb,&int_retstat,l_debug_info_ptr))
         				{
            				fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode);
            				fflush(fp);
            				int_bl_err_level = 1;
            				*int_p_retstat = IV_CRITCAL_ERROR_IND;
            				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
            {
               			CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
               			CO_FreeErrLst(l_debug_info_ptr);
	         			}
         			}		
						CO_Round(l_cust_chrg * l_exchg_fb, int_g_ccy_decimallen,&l_cust_chrg_bcy);
					}
					/* shailesh custody fees currency conversion 03-01-2008 end  ISKB_430_06_04*/

				/*added l_exchg_rt by shruthi kumbla for ISKB_1901*/
				Alert("l_exchg_rt |%lf| ",l_exchg_rt);
				if(APL_FAILURE == IV_New_CustPrint(h_dl_client,h_instr_code,l_bill_from_dt,l_bill_to_dt,h_safekeep_pos,
				h_closing_pr,l_cust_chrg_bcy,l_bill_to_dt,l_exchg_fb,chr_g_bl_ccycode,'M',p_mstclt_a,l_schdlfee,h_loccode,
				h_prodateype,dbl_h_tpval,l_exchg_rt,&int_retstat,l_debug_info_ptr))
				 {
					   fprintf(fp,"Error in accessing table for account %s. Please contact support\n",h_dl_client);
					   fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					   fflush(fp);
					   *int_p_retstat = IV_CRITCAL_ERROR_IND;
					   int_bl_err_level = 1;
					   if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					   {
						  CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						  CO_FreeErrLst(l_debug_info_ptr);
					   }
					   APL_GOBACK_FAIL;
				 }  
				/* Bageshri 18/06/2007 : HDFC UAT Fix for detailed custody charges - END */

				}	
			}
			else 
			{
					if(chr_l_portfolio_eval == 'M')
					{
						printf("Before Custody Charges Printing \n");

						if(strcmp(chr_g_fee_ccycode,chr_g_bl_ccycode)) /*03-06-2008 B_ccy */
						{
							l_cust_chrg_bcy = l_cust_chrg;
 							if(APL_FAILURE == IV_Rtv_ExchRate(chr_g_fee_ccycode,chr_g_bl_ccycode,chr_g_bl_upto_dt,&l_exchg_fb,&int_retstat,l_debug_info_ptr))
         				{
            				fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode);
            				fflush(fp);
            				int_bl_err_level = 1;
            				*int_p_retstat = IV_CRITCAL_ERROR_IND;
            				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
            				{
               				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
               				CO_FreeErrLst(l_debug_info_ptr);
	         				}
         				}		
							CO_Round(l_cust_chrg * l_exchg_fb, int_g_ccy_decimallen,&l_cust_chrg_bcy);
						}

						/*added l_exchg_rt by shruthi kumbla for ISKB_1901*/
						Alert("l_exchg_rt |%lf| ",l_exchg_rt);
						if(APL_FAILURE == IV_New_CustPrint(h_dl_client,h_instr_code,l_bill_from_dt,l_bill_to_dt,h_safekeep_pos,
						h_closing_pr,l_cust_chrg_bcy,l_bill_to_dt,l_exchg_fb,chr_g_bl_ccycode,'M',p_mstclt_a,l_schdlfee,h_loccode,
						h_prodateype,dbl_h_tpval,l_exchg_rt,&int_retstat,l_debug_info_ptr))
				 		{
					   fprintf(fp,"Error in accessing table for account %s. Please contact support\n",h_dl_client);
					   fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					   fflush(fp);
					   *int_p_retstat = IV_CRITCAL_ERROR_IND;
					   int_bl_err_level = 1;
					   if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					   {
						  CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						  CO_FreeErrLst(l_debug_info_ptr);
					   }
					   APL_GOBACK_FAIL;
				 		}  
					}	

				if (int_fetch_cnt > 1)
				{
					
					srv_charge = 0.0;
					int_retstat = IV_SUCCESS;
		
					if(APL_FAILURE == IV_Proc_CalcFee("O",p_cltt_str,CUSTODYFEE,chr_prev_param_val,APL_NULL_STRING,
														chr_h_param_code,dbl_h_tpval,dbl_h_tpval,chr_l_charge_type,chr_l_fee_type,
														&srv_charge,l_iv_data_struct_h_custgrp,'I',p_mstclt_a,chr_l_charge_basis,
														chr_l_fee_basis,chr_h_srv_ind, &int_retstat,l_debug_info_ptr))
					{
						if(int_retstat == IV_CRITCAL_ERROR_IND)
						{
							fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
							fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
							fflush(fp);
							int_bl_err_level = 1;
							if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
							{
								CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
								CO_FreeErrLst(l_debug_info_ptr);
							}
							*int_p_retstat = int_retstat;
						}
					}

					if(srv_charge > 0)
					{
						
						tot_cust_chg += srv_charge;
					}
					
					srv_charge = 0.0;
					int_retstat = IV_SUCCESS;
					
					printf("\n **** 855 *** \n");	
					/* HDFCIV_004 Rohit No Admin charges for India specific */
					IF_COND_NOT_EXISTS("ADMIN_CHARGE","NO_CUST_ADMIN")
					{
						if(APL_FAILURE == IV_Proc_CalcFee("O",p_cltt_str,ADM_CUST_FEE_IND,chr_prev_param_val,APL_NULL_STRING,
															chr_h_param_code,dbl_h_tpval,dbl_h_tpval,chr_l_charge_type,chr_l_fee_type,
															&srv_charge,l_iv_data_struct_h_admgrp,'I',p_mstclt_a,
															chr_l_charge_basis,chr_l_fee_basis,chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
						{
							if(int_retstat == IV_CRITCAL_ERROR_IND)
							{
								fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
								fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
								fflush(fp);
								int_bl_err_level = 1;
								if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
								{
									CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
									CO_FreeErrLst(l_debug_info_ptr);
								}
								*int_p_retstat = int_retstat;
							}
						}

						if(srv_charge > 0)
						{
							tot_adm_cust_chg += srv_charge;
						}
					}
					/* HDFCIV_004 Rohit Admin Charges End Here */
				}
				strcpy(chr_prev_param_val,chr_curr_param_val);

				

                                l_round_portval = 0.0;
				if(chr_l_portfolio_eval == 'D')
                                CO_Round(dbl_h_portval , int_g_ccy_decimallen,&l_round_portval);
				else
                                CO_Round(dbl_h_portval * l_exchg_rt, int_g_ccy_decimallen,&l_round_portval);
                                dbl_h_tpval = l_round_portval;   
			}
		}

		EXEC SQL CLOSE pval_cur1;

		int_is_pval_cur_open = 0;
	}
	else 
	{
		APL_IF_DEBUG
		{
  			CO_ProcMonitor(APL_OUT_FILE,"Regenerating custody charges for account",NULL,NULL);
  			memset(chr_l_buf,NULL,BUFFER_LEN);
  			sprintf(chr_l_buf,"%s",h_dl_client);
  			CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
		}

		

		EXEC SQL DECLARE regen_cur CURSOR FOR
		SELECT ROUND(SUM(SAFEKEEP_POS * MKRTPR * EXCHG_RT),:int_g_ccy_decimallen),
                                 PROC_DATA_VAL
		FROM IV_CLIENTHOLDING
		WHERE DATEOF_BILLING = :chr_h_bl_upto_dt 
		AND  CLIENT  = :h_dl_client 
		AND  CONS_FLAG = 'I'
		GROUP BY PARAMETER_CD,PROC_DATA_VAL;

		EXEC SQL OPEN regen_cur;

		if(sqlca.sqlcode < 0)
		{
			fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			int_bl_err_level = 1;
			memset(chr_l_buf,NULL,BUFFER_LEN);
			//sprintf(chr_l_buf,"Error in accessing table in processtion %s h_line %d %ld",__FILE__,__LINE__,sqlca.sqlcode);Changes done for AIX Migration
			sprintf(chr_l_buf,"Error in accessing table in processtion %s h_line %d %d",__FILE__,__LINE__,sqlca.sqlcode);
		}

		IS_ANY_ORA_ERROR;

		int_is_regen_cur_open = 1;

		for( ; ; )
		{
			dbl_h_portval =0;
			memset(chr_h_param_val,APL_NULL_CHAR,IV_PARAM_LEN);
			
			EXEC SQL FETCH regen_cur 
			INTO :dbl_h_portval,:chr_h_param_val;

			if ( sqlca.sqlcode < 0 )
			{
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
			}

			IS_ANY_ORA_ERROR

			if(APL_ZERO_RESULT_SET)
				break;
			
			int_retstat = IV_SUCCESS;
			srv_charge = 0.0;
		
			if(APL_FAILURE == IV_Proc_CalcFee("O",p_cltt_str,CUSTODYFEE,chr_h_param_val,APL_NULL_STRING,  
												chr_h_param_code,dbl_h_portval,dbl_h_portval,chr_l_charge_type,chr_l_fee_type,
												&srv_charge, l_iv_data_struct_h_custgrp,'I',p_mstclt_a,chr_l_charge_basis,
						    					chr_l_fee_basis,chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
			{
				if(int_retstat == IV_CRITCAL_ERROR_IND)
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}
			}

			if(srv_charge > 0)
			{
				tot_cust_chg += srv_charge;
			}

			
			srv_charge = 0.0;
			int_retstat = IV_SUCCESS;
					
			/* HDFCIV_004 Rohit No Admin charges for India specific */
			IF_COND_NOT_EXISTS("ADMIN_CHARGE","NO_CUST_ADMIN")
			{
				if(APL_FAILURE == IV_Proc_CalcFee("O",p_cltt_str,ADM_CUST_FEE_IND,chr_h_param_val,APL_NULL_STRING, chr_h_param_code,
													dbl_h_portval,dbl_h_portval,chr_l_charge_type,chr_l_fee_type,&srv_charge,
													l_iv_data_struct_h_admgrp,'I',p_mstclt_a,chr_l_charge_basis,chr_l_fee_basis,chr_h_srv_ind,
													&int_retstat,l_debug_info_ptr))
				{
					if(int_retstat == IV_CRITCAL_ERROR_IND)
					{
						fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
						fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
						fflush(fp);
						int_bl_err_level = 1;
						if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
						{
							CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
							CO_FreeErrLst(l_debug_info_ptr);
						}
						*int_p_retstat = int_retstat;
					}
				}

				if(srv_charge > 0)
				{
					tot_adm_cust_chg += srv_charge;
				}
			}
			/* HDFCIV_004 Rohit Admin Charges End Here */
		}

		EXEC SQL CLOSE regen_cur;
		int_is_regen_cur_open = 0;
	}

	

	int_i_cnt = 0;
	int_l_err_flg = IV_SUCCESS; 
	printf("\n **** 956 in while loop *** |%s|\n", (l_iv_data_struct_h_custgrp+int_i_cnt)->proc_data);
	
	while (strlen((l_iv_data_struct_h_custgrp+int_i_cnt)->proc_data)> 0)
	{
		
		srv_charge = 0.0;
		int_retstat = IV_SUCCESS;

		if(APL_FAILURE == IV_Proc_CalcFee("O",p_cltt_str,CUSTODYFEE,(l_iv_data_struct_h_custgrp+int_i_cnt)->proc_data,
											APL_NULL_STRING,chr_h_param_code,(l_iv_data_struct_h_custgrp+int_i_cnt)->fees_qty,
											(l_iv_data_struct_h_custgrp+int_i_cnt)->chrg_quant,chr_l_charge_type,
											chr_l_fee_type,&srv_charge,l_iv_data_struct_h_custgrp,'I',p_mstclt_a,
											chr_l_charge_basis,chr_l_fee_basis,chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
				int_l_err_flg = IV_CRITCAL_ERROR_IND; 
			}
		}

		tot_cust_chg += srv_charge;
		++int_i_cnt;
	}

printf("\n *** 990 %d***\n", int_l_err_flg);	

	if( int_l_err_flg != IV_CRITCAL_ERROR_IND ) 
	{
		printf("\n ****** should be here tot=%lfnil=%lf\n\n", tot_cust_chg, l_nil_fees );

		/*	ISKB-1928	Update of IV_SERVICE_CHRG from IV_CUST_PRINT Only for Daily	*/
		/*	Skip Service Code 2 of Detail Custody Charge for Total Custody Charge	*/
		if(chr_l_portfolio_eval == 'D')
		{
//Shailesh---170807
//UPDATING  IV_SERVICE_CHRG From IV_CUST_PRINT --to set  value for service cd 1
		EXEC SQL SELECT COUNT(*) into :l_int_cnt FROM IV_CUST_PRINT 
		WHERE CLIENT=:h_dl_client AND BILLING_DT=:chr_g_bl_upto_dt
		AND SERVICE_CD <> 11;//0509 - SP Consider total Billing Dt
		IS_ANY_ORA_ERROR
    	if(l_int_cnt>0)
			{
			EXEC SQL SELECT  NVL(SUM(CUST_CHRG),0) into :tot_cust_chg FROM  IV_CUST_PRINT 
			WHERE CLIENT=:h_dl_client AND  BILLING_DT=:chr_g_bl_upto_dt
			AND SERVICE_CD <> 11;//0509 - SP Consider total Billing Dt

			IS_ANY_ORA_ERROR
			}
		printf("\n ****** From Cust Print here tot=%lf\n\n",tot_cust_chg);
//shailesh 180807 --end
		}

		if((tot_cust_chg == 0) && (l_nil_fees > 0))
		{
			int_retstat = IV_SUCCESS;
		#ifdef BILLDEBUG 
			fprintf(TestRep, "\nInserting Record into IV_SERVICE_CHRG\n");     
			fprintf(TestRep, "account: %s\n",h_dl_client);
			fprintf(TestRep, "nil fees: %lf",l_nil_fees);
		   fprintf(TestRep, " min fees adjust: %lf",0.0);
			fprintf(TestRep, " MAX fees adjust: %lf",0.0); 
			fprintf(TestRep, " tot_chg: %lf\n",0.0);
			fprintf(TestRep, "currency :%s\n",chr_g_bl_ccycode);
			fflush(TestRep);

		#endif 
		/*added incld_in_ann_min_fee by shruthi kumbla for ISKB_1901*/
			if(APL_FAILURE == IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,h_dl_client,l_nil_fees,0.0,0.0,0.0,chr_g_bl_ccycode,'I',CUSTODYFEE,p_mstclt_a,l_iv_client_serv_basis_structa.incld_in_ann_min_fee,&int_retstat,l_debug_info_ptr))
			{
				fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
			}
		}
		
		else if( (tot_cust_chg > 0 ) || (l_minimumfee > 0) || (l_maximum_fee != 0) )
		{
			if((tot_cust_chg < l_minimumfee) && (tot_cust_chg > 0))
				l_minimumfee_adj = l_minimumfee - tot_cust_chg;
			else
				l_minimumfee_adj = 0;
			if((tot_cust_chg > l_maximum_fee) && (l_maximum_fee != 0))
			{
				l_maximum_fee_adj = l_maximum_fee - tot_cust_chg;
			}
			else
				l_maximum_fee_adj = 0;
			int_retstat = IV_SUCCESS;
		#ifdef BILLDEBUG 
         
			fprintf(TestRep, "\nInserting Record into IV_SERVICE_CHRG\n");     
			fprintf(TestRep, "account: %s\n",h_dl_client);
			fprintf(TestRep, "nil fees: %lf",0.0);
		   fprintf(TestRep, " min fees adjust: %lf",l_minimumfee_adj);
			fprintf(TestRep, " MAX fees adjust: %lf",l_maximum_fee_adj); 
			fprintf(TestRep, " tot_chg: %lf\n",tot_cust_chg);
			fprintf(TestRep, "currency :%s\n",chr_g_bl_ccycode);
			fflush(TestRep);

		#endif 
			if (l_maximum_fee_adj != 0 || l_minimumfee_adj != 0 || tot_cust_chg != 0 ) 
			{
					/*added incld_in_ann_min_fee by shruthi kumbla for ISKB_1901*/
			if(APL_FAILURE == IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,h_dl_client,0.0,l_minimumfee_adj,l_maximum_fee_adj,tot_cust_chg,			    				   						chr_g_bl_ccycode,'I',CUSTODYFEE,p_mstclt_a,l_iv_client_serv_basis_structa.incld_in_ann_min_fee,&int_retstat,l_debug_info_ptr))
			{
				fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
			}
			}
		}
	} 

	/* HDFCIV_004 Rohit No Admin charges for India specific */
	IF_COND_NOT_EXISTS("ADMIN_CHARGE","NO_CUST_ADMIN")
	{
		int_i_cnt = 0;
		int_l_err_flg = IV_SUCCESS; 
		while (strlen((l_iv_data_struct_h_admgrp+int_i_cnt)->proc_data)> 0)
		{
			srv_charge = 0.0;
			int_retstat = IV_SUCCESS;

			if(APL_FAILURE == IV_Proc_CalcFee("O",p_cltt_str,ADM_CUST_FEE_IND,(l_iv_data_struct_h_admgrp+int_i_cnt)->proc_data,
												APL_NULL_STRING, chr_h_param_code,(l_iv_data_struct_h_admgrp+int_i_cnt)->fees_qty,
												(l_iv_data_struct_h_admgrp+int_i_cnt)->chrg_quant,chr_l_charge_type,chr_l_fee_type,
												&srv_charge,l_iv_data_struct_h_admgrp,'I',p_mstclt_a,
												chr_l_charge_basis,chr_l_fee_basis,chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
			{
				if(int_retstat == IV_CRITCAL_ERROR_IND)
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);

					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
					int_l_err_flg = IV_CRITCAL_ERROR_IND; 
				}
			}

			tot_adm_cust_chg += srv_charge;
			++int_i_cnt;
		}

	

		if( int_l_err_flg != IV_CRITCAL_ERROR_IND ) 
		{
			if((tot_adm_cust_chg == 0) && (l_adm_nil_fees > 0)) 
			{
				int_retstat = IV_SUCCESS;
			#ifdef BILLDEBUG 
					 
				fprintf(TestRep, "\nInserting Record into IV_SERVICE_CHRG\n");     
				fprintf(TestRep, "account: %s\n",h_dl_client);
				fprintf(TestRep, "nil fees: %lf",l_adm_nil_fees);
				 fprintf(TestRep, " min fees adjust: %lf",0.0);
				fprintf(TestRep, " MAX fees adjust: %lf",0.0); 
				fprintf(TestRep, " tot_chg: %lf\n",0.0);
				fprintf(TestRep, "currency :%s\n",chr_g_bl_ccycode);
				fflush(TestRep);

			#endif 
					/*added incld_in_ann_min_fee by shruthi kumbla for ISKB_1901*/
				if(APL_FAILURE == IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,h_dl_client,l_adm_nil_fees,0.0,0.0,0.0,chr_g_bl_ccycode,'I',
																ADM_CUST_FEE_IND,p_mstclt_a,l_iv_client_serv_basis_structa.incld_in_ann_min_fee,&int_retstat,l_debug_info_ptr))
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}
			}
			if(tot_adm_cust_chg > 0)
			{
				if((tot_adm_cust_chg < l_adm_minimumfee)&& (tot_adm_cust_chg > 0))
					l_minimumfee_adj = l_adm_minimumfee - tot_adm_cust_chg;
				else
					l_minimumfee_adj = 0;
				if((tot_adm_cust_chg > l_adm_maximum_fee) && (l_adm_maximum_fee != 0))
				{
					l_maximum_fee_adj = l_adm_maximum_fee - tot_adm_cust_chg;
				}
				else
					l_maximum_fee_adj = 0;
				int_retstat = IV_SUCCESS;
			#ifdef BILLDEBUG 
					 
				fprintf(TestRep, "\nInserting Record into IV_SERVICE_CHRG\n");     
				fprintf(TestRep, "account: %s\n",h_dl_client);
				fprintf(TestRep, "nil fees: %lf",0.0);
				 fprintf(TestRep, " min fees adjust: %lf",l_minimumfee_adj);
				fprintf(TestRep, " MAX fees adjust: %lf",l_maximum_fee_adj); 
				fprintf(TestRep, " tot_chg: %lf\n",tot_adm_cust_chg);
				fprintf(TestRep, "currency :%s\n",chr_g_bl_ccycode);
				fflush(TestRep);

			#endif 
				if (l_maximum_fee_adj != 0 ||    l_minimumfee_adj != 0 || tot_adm_cust_chg != 0 )
				{
						/*added incld_in_ann_min_fee by shruthi kumbla for ISKB_1901*/
				if(APL_FAILURE == IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,h_dl_client,0.0,l_minimumfee_adj,l_maximum_fee_adj,tot_adm_cust_chg,
																chr_g_bl_ccycode,'I',ADM_CUST_FEE_IND,p_mstclt_a,l_iv_client_serv_basis_structa.incld_in_ann_min_fee,&int_retstat,l_debug_info_ptr))
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}
				}
			}
		}
	}
	/* HDFCIV_004 Rohit Admin Charges End Here */


	if(*int_p_retstat == IV_CRITCAL_ERROR_IND)
	{
		APL_GOBACK_FAIL
	}
	else
	{
		*int_p_retstat = IV_SUCCESS;
		APL_GOBACK_SUCCESS;
	}

RETURN_SUCCESS:
	if(int_is_pval_cur_open == 1)
	{
		EXEC SQL CLOSE pval_cur1;
	}
	if(int_is_regen_cur_open == 1)
	{
		EXEC SQL CLOSE regen_cur;
	}
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE, "Exiting Successfully Out Of IV_Chk_GenCustodyChgs\n",
			 NULL, NULL);
	}
	return APL_SUCCESS;

RETURN_FAILURE:
	if(int_is_pval_cur_open == 1)
	{
		EXEC SQL CLOSE pval_cur1;
	}
	if(int_is_regen_cur_open == 1)
	{
		EXEC SQL CLOSE regen_cur;
	}
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE, "Exiting Unsuccessfully Out Of IV_Chk_GenCustodyChgs\n",
			 NULL, NULL);
	}
	return APL_FAILURE;

}

int IV_Chk_GenCustodyPtcChgs(char *chr_p_client,char *p_cltt_str,char *p_mstclt_a,
			int *int_p_retstat,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	printf("Inside IV_Chk_GenCustodyPtcChgs");
	EXEC SQL BEGIN DECLARE SECTION;

	char h_instr_code[APL_INSTRUMENTCODE_LEN],h_loccode[APL_LOCNCODE_LENGTH];
	char chr_h_bl_upto_dt[APL_DATE_LEN], h_prodateype[IV_PRODTYPE_LEN];
	char chr_h_bl_proc_dt[APL_DATE_LEN];
	double dbl_h_ptcval=0.0;
	double h_closing_pr=0.0,h_safekeep_pos=0.0;
	char  h_dl_client[APL_CLIENT_LENGTH],chr_h_param_code[IV_PARAM_LEN];
	char chr_h_sel_stmt[4000];
	double l_ptc_amt=0.0,ptc_amount=0.0;/* vinay */

	
	char chr_h_srv_ind[50];
	char chr_h_instr_ccy[APL_CCYCODE_LEN],chr_h_param_val[IV_PARAM_LEN];
	short int i_dl_client = 0, i_nil_fees= 0, i_parameter_cd= 0;
	short int i_charge_class= 0,i_fee_class= 0,i_minimumfee= 0;
	short i_adm_minfee = 0;
	short i_loccode = 0;
	double dbl_h_tpval=0.0;
	int int_h_posn_cnt=0;
	short l_cond_exists = 0;	/*Variable declaration for IF_COND_NOT_EXISTS HDFCIV_004	Rohit*/

	EXEC SQL VAR h_instr_code     IS STRING;
	EXEC SQL VAR h_loccode   IS STRING;
	EXEC SQL VAR h_prodateype   IS STRING;
	EXEC SQL VAR h_dl_client    IS STRING;
	EXEC SQL VAR chr_h_param_code IS STRING;
	EXEC SQL VAR chr_h_param_val  IS STRING;
	EXEC SQL VAR chr_h_bl_upto_dt IS STRING;
	EXEC SQL VAR chr_h_bl_proc_dt IS STRING;
	struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	int int_i_cnt=0,int_fetch_cnt=0,int_retstat=0;
	int int_is_pval_cur_open = 0, int_is_regen_cur_open = 0;
	int int_l_err_flg = IV_SUCCESS; 
	double srv_charge=0.0,tot_ptc_cust_chg=0.0,tot_adm_ptc_cust_chg=0.0;
	double l_minimumfee_adj=0.0, l_maximum_fee_adj=0.0, l_adm_nil_fees=0.0;
	double l_adm_minimumfee=0.0,l_adm_maximum_fee=0.0;
	double l_nil_fees=0.0,l_minimumfee=0.0,l_maximum_fee=0.0,l_exchg_rt=1.0;
	double l_round_ptcval = 0.0; 
	char *chr_l_param_code = NULL,*z,chr_curr_param_val[IV_PARAM_LEN];
	char chr_prev_param_val[IV_PARAM_LEN];
	char chr_acct_str[IV_CLT_LEN],chr_l_adm_param_code[IV_PARAM_LEN];
	char chr_l_charge_basis[IV_STRING_LEN],chr_l_fee_basis[IV_STRING_LEN];
	char chr_l_adm_charge_basis[IV_STRING_LEN],chr_l_adm_fee_basis[IV_STRING_LEN];
	char chr_l_charge_type,chr_l_fee_type,*chr_l_actcode=NULL,*k;
	char chr_mstacctstr[IV_CLT_LEN],chr_l_buf[BUFFER_LEN];
	char chr_l_portfolio_eval;			/* PJ IV_004 Portfolio eval */
	char chr_l_b_basis_cust[4]; 		/* Bageshri HB_IV_001 */
	IV_DATA_STRUCT_H l_iv_data_struct_h_custgrp[50];
	IV_DATA_STRUCT_H l_iv_data_struct_h_admgrp[50];
	IV_CLIENTPARAM_STRUCT_H l_iv_clientparam_struct_hb;
	IV_CLIENT_SERV_BASIS_STRUCT l_iv_client_serv_basis_structa;
	IV_CLIENTSETUP_STRUCT l_iv_clientsetup_struct;


	sqlca.sqlcode = 0;
	int_p_retstat = (int *)calloc(1,sizeof(int));
	*int_p_retstat = IV_SUCCESS;

	
	memset(l_iv_data_struct_h_custgrp[0].proc_data,APL_NULL_CHAR,100);
	memset(l_iv_data_struct_h_admgrp[0].proc_data,APL_NULL_CHAR,100);
	memset(chr_acct_str,APL_NULL_CHAR,IV_CLT_LEN);
	memset(chr_mstacctstr,APL_NULL_CHAR,IV_CLT_LEN);
	memset(chr_l_charge_basis,APL_NULL_CHAR,IV_STRING_LEN);
	memset(chr_l_adm_charge_basis,APL_NULL_CHAR,IV_STRING_LEN);
	memset(chr_l_fee_basis,APL_NULL_CHAR,IV_STRING_LEN);
	memset(chr_l_adm_fee_basis,APL_NULL_CHAR,IV_STRING_LEN);
	memset(chr_curr_param_val,APL_NULL_CHAR,IV_PARAM_LEN);
	memset(chr_prev_param_val,APL_NULL_CHAR,IV_PARAM_LEN);
	memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
	memset(chr_h_sel_stmt,APL_NULL_CHAR,4000);

	memset(&l_iv_clientparam_struct_hb,NULL,sizeof(IV_CLIENTPARAM_STRUCT_H));
	memset(&l_iv_client_serv_basis_structa,NULL,sizeof(IV_CLIENT_SERV_BASIS_STRUCT));
	memset(&l_iv_clientsetup_struct,NULL,sizeof(IV_CLIENTSETUP_STRUCT));

	memset(h_dl_client, APL_NULL_CHAR, APL_CLIENT_LENGTH);
	memset(chr_h_bl_upto_dt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(chr_h_bl_proc_dt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(h_loccode, APL_NULL_CHAR, APL_LOCNCODE_LENGTH);
	memset(h_prodateype, APL_NULL_CHAR, IV_PRODTYPE_LEN);
	memset(h_instr_code, APL_NULL_CHAR, APL_INSTRUMENTCODE_LEN);
	memset(chr_h_param_code, APL_NULL_CHAR, IV_PARAM_LEN);
	memset(chr_h_param_val, APL_NULL_CHAR, IV_PARAM_LEN);
	memset(chr_h_instr_ccy, APL_NULL_CHAR, APL_CCYCODE_LEN);
	memset(chr_h_srv_ind, APL_NULL_CHAR, 50);
	memset(chr_l_b_basis_cust, APL_NULL_CHAR, 4); /* Bageshri HB_IV_001 */
	
	k=(char *) calloc(IV_CLT_LEN,sizeof(char));
	z=(char *) calloc (IV_PARAM_LEN,sizeof(char));
	strcpy(chr_acct_str,p_cltt_str);
	strcpy(h_dl_client,chr_p_client);
	strcpy(chr_h_bl_upto_dt,chr_g_bl_upto_dt);
	strcpy(chr_h_bl_proc_dt,chr_g_bl_proc_dt);
	strcpy(chr_l_adm_param_code," ");
	strcpy(chr_l_adm_charge_basis," ");
	strcpy(chr_l_adm_fee_basis," ");

	if(strlen(chr_p_client) > 0)
	{
		strcpy(chr_mstacctstr,chr_p_client);
		strcat(chr_mstacctstr,";");
		int_retstat = IV_SUCCESS;
		if( APL_FAILURE == IV_Rtv_IVCUSTSETUP(chr_p_client,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error : Billing setup not found for Account %s \n",chr_p_client);
				fflush(fp);
				*int_p_retstat = int_retstat;
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
				APL_GOBACK_FAIL;
			}
		}
		chr_l_portfolio_eval = l_iv_clientsetup_struct.portfolio_eval;

		
		/* Bageshri HB_IV_001  START */
		strcpy(chr_l_b_basis_cust, l_iv_clientsetup_struct.b_basis_cust);
		/* Bageshri HB_IV_001  END */

	}
	if(chr_g_bl_gen == 'M')
	{
		strcpy(chr_mstacctstr,p_mstclt_a);
		strcat(chr_mstacctstr,";");
		int_retstat = IV_SUCCESS;
		if( APL_FAILURE == IV_Rtv_IVCUSTSETUP(p_mstclt_a,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error : Master Account %s of client %s  not found in billing system\n",p_mstclt_a,chr_p_client);
				fflush(fp);
				*int_p_retstat = int_retstat;
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
				APL_GOBACK_FAIL;
			}
		}

		strcat(chr_mstacctstr,l_iv_clientsetup_struct.default_feeclt);
		strcat(chr_mstacctstr,";");
		strcat(chr_mstacctstr,chr_g_cb_code);
		strcat(chr_mstacctstr,";");
		strcat(chr_mstacctstr,APL_NULL_STRING);
		int_retstat = IV_SUCCESS;
		if(APL_SUCCESS == IV_Rtv_GetServBasis(chr_mstacctstr,PTC_FEE,&l_iv_client_serv_basis_structa,&int_retstat,l_debug_info_ptr))
		{
			chr_l_charge_type = l_iv_client_serv_basis_structa.chrg_clas;
			chr_l_fee_type = l_iv_client_serv_basis_structa.fees_class;
			strcpy(chr_l_charge_basis,l_iv_client_serv_basis_structa.chrg_base);
			strcpy(chr_l_fee_basis,l_iv_client_serv_basis_structa.fees_base);
			/*added by shruthi kumbla for ISKB_1901*/
			if((l_iv_client_serv_basis_structa.incld_in_ann_min_fee)!='Y')
				l_iv_client_serv_basis_structa.incld_in_ann_min_fee = 'N';
		}
		else
		{
			fprintf(fp,"185 Error : Service basis not found for service %d for master client of %s\n",PTC_FEE,chr_p_client);
			fflush(fp);
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}

			*int_p_retstat = int_retstat;
			APL_GOBACK_FAIL
		}
	}

	int_retstat = IV_SUCCESS;
	memset(&l_iv_client_serv_basis_structa, NULL, sizeof(IV_CLIENT_SERV_BASIS_STRUCT));
	if(APL_SUCCESS == IV_Rtv_GetServBasis(chr_acct_str,PTC_FEE,&l_iv_client_serv_basis_structa,&int_retstat,l_debug_info_ptr))
	{
		if(chr_g_bl_gen != 'M')
		{
			strcpy(chr_l_charge_basis,l_iv_client_serv_basis_structa.chrg_base);
			strcpy(chr_l_fee_basis,l_iv_client_serv_basis_structa.fees_base);
		}
		chr_l_charge_type = l_iv_client_serv_basis_structa.chrg_clas;
		chr_l_fee_type = l_iv_client_serv_basis_structa.fees_class;
		l_nil_fees   = l_iv_client_serv_basis_structa.nil_fees;
		l_minimumfee   = l_iv_client_serv_basis_structa.minimumfee;
		l_maximum_fee   = l_iv_client_serv_basis_structa.maximum_fee;
		/*added by shruthi kumbla for ISKB_1901*/
			if((l_iv_client_serv_basis_structa.incld_in_ann_min_fee)!='Y')
				l_iv_client_serv_basis_structa.incld_in_ann_min_fee = 'N';

		#ifdef BILLDEBUG 

			fprintf(TestRep, "Custody Charges: Account: %s, Master Account: %s\n", chr_p_client, p_mstclt_a);
			fprintf(TestRep, "Fee Basis: %s, Charge Basis: %s, Fee Type: %c, Charge Type: %c\n", chr_l_fee_basis, chr_l_charge_basis, chr_l_fee_type, chr_l_charge_type);
			fprintf(TestRep, "Nil Fee: %lf, Min Fee: %lf, Max Fee: %lf\n", l_nil_fees, l_minimumfee, l_maximum_fee);
			fflush(TestRep);

		#endif 
	}
	else
	{
		fprintf(fp,"225 Error : Service basis not found for service %d for client %s\n",PTC_FEE,chr_p_client);
		fflush(fp);
		int_bl_err_level = 1;
		if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		{
			CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
			CO_FreeErrLst(l_debug_info_ptr);
		}
		*int_p_retstat = int_retstat;
		APL_GOBACK_FAIL;
	}
	
	if(strcmp(l_iv_client_serv_basis_structa.client,h_dl_client) != 0)
	{
		int_retstat = IV_SUCCESS;
		IV_Rtv_IVCUSTSETUP(l_iv_client_serv_basis_structa.client,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr);
		if (int_retstat == IV_SUCCESS || int_retstat == IV_COLUMN_NULL_ERR)
		{
			l_exchg_rt = 1.0;
			if (strcmp( l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode) != 0) 
			{
				int_retstat = IV_SUCCESS;
				if(APL_FAILURE == IV_Rtv_ExchRate(l_iv_clientsetup_struct.fees_ccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,&l_exchg_rt, &int_retstat,l_debug_info_ptr)) 																			
				{
					fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",l_iv_clientsetup_struct.fees_ccy,chr_g_fee_ccycode); 																						 
					fflush(fp);
					int_bl_err_level = 1;
					*int_p_retstat = int_retstat;
				}
           			
                                CO_Round(l_nil_fees * l_exchg_rt, int_g_ccy_decimallen, &l_nil_fees);
                                CO_Round(l_minimumfee * l_exchg_rt, int_g_ccy_decimallen, &l_minimumfee);
                                CO_Round(l_maximum_fee * l_exchg_rt, int_g_ccy_decimallen, &l_maximum_fee);
			}

		}
		else if(int_retstat == IV_CRITCAL_ERROR_IND)
		{
			fprintf(fp,"Error : Account %s  not found in billing system\n",l_iv_client_serv_basis_structa.client);
			fflush(fp);
			*int_p_retstat = IV_CRITCAL_ERROR_IND;
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}

			*int_p_retstat = int_retstat;
			APL_GOBACK_FAIL
		}
	}
   

   l_nil_fees = l_nil_fees * g_exchg_rt_fee_bl;   
   l_minimumfee = l_minimumfee * g_exchg_rt_fee_bl;   
   l_maximum_fee = l_maximum_fee * g_exchg_rt_fee_bl;   
	
	#ifdef BILLDEBUG 

		fprintf(TestRep, "Exchange Rate is %lf\n", l_exchg_rt);
		fflush(TestRep);

	#endif 
	
	/* HDFCIV_004 Rohit No Admin charges for India specific */
	IF_COND_NOT_EXISTS("ADMIN_CHARGE","NO_CUST_ADMIN")
	{
		strcpy(chr_acct_str,p_cltt_str);
		int_retstat = IV_SUCCESS;
		if(APL_SUCCESS == IV_Rtv_GetServBasis( chr_acct_str,ADM_CUST_FEE_IND,&l_iv_client_serv_basis_structa,&int_retstat,l_debug_info_ptr))
		{
			l_adm_nil_fees   = l_iv_client_serv_basis_structa.nil_fees;
			l_adm_minimumfee   = l_iv_client_serv_basis_structa.minimumfee;
			l_adm_maximum_fee   = l_iv_client_serv_basis_structa.maximum_fee;
			/*added by shruthi kumbla for ISKB_1901*/
			if((l_iv_client_serv_basis_structa.incld_in_ann_min_fee)!='Y')
				l_iv_client_serv_basis_structa.incld_in_ann_min_fee = 'N';

			#ifdef BILLDEBUG 

				fprintf(TestRep, "Custody Adm. Charges: Account: %s, Master Account: %s\n", chr_p_client, p_mstclt_a);
				fprintf(TestRep, "Fee Basis: %s, Charge Basis: %s, Fee Type: %c, Charge Type: %c\n", chr_l_fee_basis, chr_l_charge_basis, chr_l_fee_type, chr_l_charge_type);
				fprintf(TestRep, "Nil Fee: %lf, Min Fee: %lf, Max Fee: %lf\n", l_adm_nil_fees, l_adm_minimumfee, l_adm_maximum_fee);
				fflush(TestRep);

			#endif 
		}
		else
		{
			if(int_retstat != IV_COLUMN_NULL_ERR && int_retstat != IV_NO_DATA_FOUND_ERR)
			{
				fprintf(fp,"Service basis not defined for service %d for master client  of client %s\n",ADM_CUST_FEE_IND,chr_p_client);
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}

				*int_p_retstat = int_retstat;
				APL_GOBACK_FAIL;
			}
		}
		
		if(strcmp(l_iv_client_serv_basis_structa.client,h_dl_client) != 0)
		{
			int_retstat = IV_SUCCESS;
			IV_Rtv_IVCUSTSETUP(l_iv_client_serv_basis_structa.client,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr);
			if (int_retstat == IV_SUCCESS || int_retstat == IV_COLUMN_NULL_ERR)
			{
				l_exchg_rt = 1.0;
				if (strcmp(l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode) != 0) 
				{
					int_retstat = IV_SUCCESS;
					if(APL_FAILURE == IV_Rtv_ExchRate(l_iv_clientsetup_struct.fees_ccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,&l_exchg_rt, &int_retstat,l_debug_info_ptr))  																		 
					{
						fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",l_iv_clientsetup_struct.fees_ccy,chr_g_fee_ccycode);  																					 
						fflush(fp);
						int_bl_err_level = 1;
						*int_p_retstat = int_retstat;
						if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
						{
							CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
							CO_FreeErrLst(l_debug_info_ptr);
						}
					}
					

					CO_Round(l_adm_nil_fees * l_exchg_rt, int_g_ccy_decimallen,&l_adm_nil_fees);
					CO_Round(l_adm_minimumfee * l_exchg_rt, int_g_ccy_decimallen,&l_adm_minimumfee);
					CO_Round(l_adm_maximum_fee * l_exchg_rt, int_g_ccy_decimallen,&l_adm_maximum_fee);
				}
			}
			else if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error : Account %s  not found in billing system\n",l_iv_client_serv_basis_structa.client);
				fflush(fp);
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}

				*int_p_retstat = int_retstat;
				APL_GOBACK_FAIL;
			}
		}
		
							
		 l_adm_nil_fees = l_adm_nil_fees *  g_exchg_rt_fee_bl; 
		 l_adm_minimumfee = l_adm_minimumfee *  g_exchg_rt_fee_bl; 
		 l_adm_maximum_fee = l_adm_maximum_fee *  g_exchg_rt_fee_bl; 

		#ifdef BILLDEBUG 

			fprintf(TestRep, "Exchange Rate is %lf\n", l_exchg_rt);

		#endif 
	}
	/* HDFCIV_004 Rohit Admin Charges End Here */

	int_retstat = IV_SUCCESS;
	if(APL_FAILURE == IV_Chk_PosnExistTrd(h_dl_client,&int_retstat,l_debug_info_ptr))
	{
		if(int_retstat == IV_NO_DATA_FOUND_ERR)
		{
			
			if (l_nil_fees > 0)
			{
				int_retstat = IV_SUCCESS;

		#ifdef BILLDEBUG 
         
			fprintf(TestRep, "\nInserting Record into IV_SERVICE_CHRG\n");     
			fprintf(TestRep, "account: %s\n",h_dl_client);
			fprintf(TestRep, "nil fees: %lf",l_nil_fees);
		   fprintf(TestRep, " min fees adjust: %lf",0.0);
			fprintf(TestRep, " MAX fees adjust: %lf",0.0); 
			fprintf(TestRep, " tot_chg: %lf\n",0.0);
			fprintf(TestRep, "currency :%s\n",chr_g_bl_ccycode);
			fflush(TestRep);

		#endif 
		/*added incld_in_ann_min_fee by shruthi kumbla for ISKB_1901*/
				if(APL_FAILURE == IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,h_dl_client,l_nil_fees,0.0,0.0,0.0,chr_g_bl_ccycode,'I',PTC_FEE,p_mstclt_a,l_iv_client_serv_basis_structa.incld_in_ann_min_fee,&int_retstat,l_debug_info_ptr))
				{
					fprintf(fp,"Error in writing to table for client %s. Please contact support.\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					*int_p_retstat = IV_CRITCAL_ERROR_IND;
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}

					*int_p_retstat = int_retstat;
					APL_GOBACK_FAIL;
				}
			}
			
				
			if (l_adm_nil_fees > 0) 
			{
				int_retstat = IV_SUCCESS;
		#ifdef BILLDEBUG 
         
			fprintf(TestRep, "\nInserting Record into IV_SERVICE_CHRG\n");     
			fprintf(TestRep, "account: %s\n",h_dl_client);
			fprintf(TestRep, "nil fees: %lf",l_adm_nil_fees);
		   fprintf(TestRep, " min fees adjust: %lf",0.0);
			fprintf(TestRep, " MAX fees adjust: %lf",0.0); 
			fprintf(TestRep, " tot_chg: %lf\n",0.0);
			fprintf(TestRep, "currency :%s\n",chr_g_bl_ccycode);
			fflush(TestRep);

		#endif 
		/*added incld_in_ann_min_fee by shruthi kumbla for ISKB_1901*/
				if(APL_FAILURE == IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,h_dl_client,l_adm_nil_fees,0.0,0.0,0.0,chr_g_bl_ccycode,
																'I',ADM_CUST_FEE_IND,p_mstclt_a,l_iv_client_serv_basis_structa.incld_in_ann_min_fee,&int_retstat,l_debug_info_ptr))
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support.\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					*int_p_retstat = IV_CRITCAL_ERROR_IND;
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
					APL_GOBACK_FAIL;
				}
			}
			
			*int_p_retstat = IV_SUCCESS;
			APL_GOBACK_SUCCESS;
		}
		else
		{
			fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			*int_p_retstat = IV_CRITCAL_ERROR_IND;
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}
			APL_GOBACK_FAIL
		}
	}

	

	strcpy(chr_acct_str,p_cltt_str);
//	chr_l_actcode = strtok_r(chr_acct_str,";",&k);


		memset(&l_iv_clientparam_struct_hb,NULL,sizeof(IV_CLIENTPARAM_STRUCT_H));
		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Rtv_IVCUSTPARAM(l_iv_client_serv_basis_structa.client,PTC_FEE,l_iv_client_serv_basis_structa.apl_frm_date,&l_iv_clientparam_struct_hb,&int_retstat,l_debug_info_ptr)) /* Added by Monica for ISKB_1737*/
		{
			if(int_retstat != IV_CRITCAL_ERROR_IND)
			{
				
			}
			else
			{
				fprintf(fp,"Error : Service Dependencies not defined for client %s\n",chr_l_actcode);
				fflush(fp);
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
				APL_GOBACK_FAIL
			}
		}
		else
		{
		 Alert("Success from IV_Rtv_IVCUSTPARAM fn");

	}
	
	
	strcpy(chr_h_param_code,l_iv_clientparam_struct_hb.parameter_cd);


		APL_IF_DEBUG
		{
			CO_ProcMonitor(TechRep,"Generating PTC Custody charges for account",NULL,NULL);
  			memset(chr_l_buf,NULL,BUFFER_LEN);
  			sprintf(chr_l_buf,"%s",chr_p_client);
			CO_ProcMonitor(TechRep,chr_l_buf,NULL,NULL);
		}

		/* Bageshri HB_IV_001 START */
		IF_COND_EXISTS("IV_CLIENT","B_BASIS_CUST")
		{
			if(!strcmp(chr_l_b_basis_cust,"INP"))
			{
				strcpy(chr_h_sel_stmt, "SELECT NVL(SUM(A.SAFEKEEP_POS + A.NVALRECEIVE + A.VAL_REC +");
				strcat(chr_h_sel_stmt, " A.DP_REC - A.NVALDELIVER - A.VAL_DEL - A.DP_DEL),0),");
			}
			else if(!strcmp(chr_l_b_basis_cust,"ASD"))
				strcpy(chr_h_sel_stmt, "SELECT NVL(SUM(A.SAFEKEEP_POS),0),");
		}
	   else
		   strcpy(chr_h_sel_stmt, "SELECT NVL(SUM(A.SAFEKEEP_POS),0),");
	   /* Bageshri HB_IV_001 END */

	   strcat(chr_h_sel_stmt, "A.INSTR_CODE, A.LOCATION_CD,");
		strcat(chr_h_sel_stmt, "RTRIM(B.INSTR_SUB_TYPE),B.CURRENCY_CD ");
	   strcat(chr_h_sel_stmt, "FROM DL_SAFEK A,MT_INSTRUMENT B"); 
	   strcat(chr_h_sel_stmt, " WHERE A.CLIENT = '");
	   strcat(chr_h_sel_stmt, h_dl_client);
	   strcat(chr_h_sel_stmt, "' AND A.INSTR_CODE  = B.INSTR_CODE ");
		strcat(chr_h_sel_stmt, "AND B.INSTR_SUB_TYPE  = 'PT' ");
		strcat(chr_h_sel_stmt, "GROUP BY B.INSTR_SUB_TYPE,A.LOCATION_CD,A.INSTR_CODE,B.CURRENCY_CD ");
		
		
		if(strcmp(chr_h_param_code, "LOCATION;PRODUCT;INSTRUMENT") == 0)
			strcat(chr_h_sel_stmt, "ORDER BY A.LOCATION_CD,B.INSTR_SUB_TYPE,");
		else if(strcmp(chr_h_param_code, "LOCATION;INSTRUMENT") == 0)
			strcat(chr_h_sel_stmt, "ORDER BY A.LOCATION_CD,");
		else if(strcmp(chr_h_param_code, "PRODUCT;INSTRUMENT") == 0)
			strcat(chr_h_sel_stmt, "ORDER BY B.INSTR_SUB_TYPE,");
		else if(strcmp(chr_h_param_code, "PRODUCT;LOCATION") == 0)
			strcat(chr_h_sel_stmt, "ORDER BY B.INSTR_SUB_TYPE, A.LOCATION_CD,");
		else if (strcmp(chr_h_param_code, "LOCATION;PRODUCT") == 0)
			strcat(chr_h_sel_stmt, "ORDER BY A.LOCATION_CD, B.INSTR_SUB_TYPE,");
		else if (strcmp(chr_h_param_code, "PRODUCT") == 0)
			strcat(chr_h_sel_stmt, "ORDER BY B.INSTR_SUB_TYPE,");
		else if (strcmp(chr_h_param_code, "LOCATION") == 0)
			strcat(chr_h_sel_stmt, "ORDER BY A.LOCATION_CD,");
		else if (strcmp(chr_h_param_code, "INSTRUMENT") == 0)
			strcat(chr_h_sel_stmt, "ORDER BY ");
		else if (strcmp(chr_h_param_code, ";") == 0)
			strcat(chr_h_sel_stmt, "ORDER BY ");

		strcat(chr_h_sel_stmt, "A.INSTR_CODE");
		
		printf("PTC query=|%s| \n",chr_h_sel_stmt);	
		EXEC SQL PREPARE S FROM :chr_h_sel_stmt;

		EXEC SQL DECLARE pval_cur CURSOR FOR S;
		
		EXEC SQL OPEN pval_cur;

		if(sqlca.sqlcode < 0)
		{
			fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			memset(chr_l_buf,NULL,BUFFER_LEN);
			//sprintf(chr_l_buf,"Error in accessing table in processtion %s h_line %d %ld",__FILE__,__LINE__,sqlca.sqlcode); Changes done for AIX Migration
			sprintf(chr_l_buf,"Error in accessing table in processtion %s h_line %d %d",__FILE__,__LINE__,sqlca.sqlcode);
			CO_ProcMonitor(TechRep,chr_l_buf,NULL,NULL);
			*int_p_retstat = IV_CRITCAL_ERROR_IND;
			int_bl_err_level = 1;
		}

		IS_ANY_ORA_ERROR

		int_is_pval_cur_open = 1;

		int_fetch_cnt = 0;
		for( ; ; )
		{
			memset(h_instr_code,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
			memset(h_loccode,APL_NULL_CHAR,APL_LOCNCODE_LENGTH);
			memset(h_prodateype,APL_NULL_CHAR,IV_PRODTYPE_LEN);
			memset(chr_h_instr_ccy,APL_NULL_CHAR,APL_CCYCODE_LEN);
			
			EXEC SQL FETCH  pval_cur
			INTO :dbl_h_ptcval,:h_instr_code, :h_loccode:i_loccode,
				  :h_prodateype, :chr_h_instr_ccy;
			
			if ( sqlca.sqlcode < 0 )
			{
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
			}

			IS_ANY_ORA_ERROR


      /* Start : Get Avg Portfolio value for all billing period  */
		
      if( chr_l_portfolio_eval == 'D' && sqlca.sqlcode != 1403)
      {
         int_retstat = IV_SUCCESS;
         /*if(APL_FAILURE == CalcLocDepCustServFee(h_dl_client,p_mstclt_a,h_instr_code,h_loccode,&dbl_h_ptcval,&int_retstat,l_debug_info_ptr))*/
         /*if(APL_FAILURE == CalcLocDepCustServFee(h_dl_client,p_mstclt_a,h_instr_code,h_loccode,&dbl_h_ptcval,chr_l_b_basis_cust,&int_retstat,l_debug_info_ptr))
         {
            if(int_retstat == IV_CRITCAL_ERROR_IND)
            {
               fprintf(fp,"Error : Daily AVG Portfilio calculation failed for account %s \n",h_dl_client);
               fflush(fp);
               int_bl_err_level = 1;
               if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
               {
                  CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                  CO_FreeErrLst(l_debug_info_ptr);
               }
               *int_p_retstat = int_retstat;
					APL_GOBACK_FAIL
            }
         }*/
      }
    /* End: Avg Portfolio value */

			if(APL_ZERO_RESULT_SET)
			{
				if(int_fetch_cnt > 0)
				{
					
					srv_charge = 0.0;
					int_retstat = IV_SUCCESS;
		
					if(APL_FAILURE == IV_Proc_CalcFee("O",p_cltt_str,PTC_FEE,chr_prev_param_val,APL_NULL_STRING,
														chr_h_param_code,dbl_h_tpval,dbl_h_tpval,chr_l_charge_type,chr_l_fee_type,
														&srv_charge,l_iv_data_struct_h_custgrp,'I',p_mstclt_a,chr_l_charge_basis,
														chr_l_fee_basis,chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
					{
						if(int_retstat == IV_CRITCAL_ERROR_IND)
						{
							fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
							fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
							fflush(fp);
							int_bl_err_level = 1;
							if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
							{
								CO_ProcMonitor(TechRep,APL_NULL_STRING,
									 l_debug_info_ptr,NULL);
								CO_FreeErrLst(l_debug_info_ptr);
							}
							*int_p_retstat = int_retstat;
						}
					}
					if(srv_charge > 0)
					{
						tot_ptc_cust_chg += srv_charge;
					}
					
					/* HDFCIV_004 Rohit No Admin charges for India specific */
					IF_COND_NOT_EXISTS("ADMIN_CHARGE","NO_CUST_ADMIN")
					{
						srv_charge = 0.0;
						int_retstat = IV_SUCCESS;
							
						if(APL_FAILURE == IV_Proc_CalcFee("O",p_cltt_str,ADM_CUST_FEE_IND,chr_prev_param_val,APL_NULL_STRING, 
														chr_h_param_code,dbl_h_tpval,dbl_h_tpval,chr_l_charge_type,chr_l_fee_type,
														&srv_charge,l_iv_data_struct_h_admgrp,'I',p_mstclt_a,chr_l_charge_basis,
														chr_l_fee_basis,chr_h_srv_ind, &int_retstat,l_debug_info_ptr))
						{
							if(int_retstat == IV_CRITCAL_ERROR_IND)
							{
								fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
								fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
								fflush(fp);
								int_bl_err_level = 1;
								if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
								{
									CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
									CO_FreeErrLst(l_debug_info_ptr);
								}
								*int_p_retstat = int_retstat;
							}
						}

						if(srv_charge > 0)
						{
							tot_adm_ptc_cust_chg += srv_charge;
						}
					}
					/* HDFCIV_004 Rohit Admin Charges End Here */
				}
				break;
			}
			int_fetch_cnt++;

			l_exchg_rt = 1.0;

			if ( strcmp(chr_h_instr_ccy, chr_g_fee_ccycode) != 0 )    		
			{
				int_retstat = IV_SUCCESS;
				if(APL_FAILURE == IV_Rtv_ExchRate(chr_h_instr_ccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,&l_exchg_rt, &int_retstat,l_debug_info_ptr))    																					
				{
					fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",chr_h_instr_ccy,chr_g_fee_ccycode);  
																				  
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}
			}

			if(strcmp(chr_h_param_code,"LOCATION;PRODUCT") == 0)
			{
				memset(chr_curr_param_val,APL_NULL_CHAR,IV_PARAM_LEN);
				strcpy(chr_curr_param_val,h_loccode);
				strcat(chr_curr_param_val,";");
				strcat(chr_curr_param_val,h_prodateype);
				strcat(chr_curr_param_val,APL_NULL_STRING);
			}
			else if(strcmp(chr_h_param_code,"LOCATION;PRODUCT;INSTRUMENT") == 0)
				{
					memset(chr_curr_param_val,APL_NULL_CHAR,IV_PARAM_LEN);
					strcpy(chr_curr_param_val,h_loccode);
					strcat(chr_curr_param_val,";");
					strcat(chr_curr_param_val,h_prodateype);
					strcat(chr_curr_param_val,";");
					strcat(chr_curr_param_val,h_instr_code);
					strcat(chr_curr_param_val,APL_NULL_STRING);
				}
			else if(strcmp(chr_h_param_code,"LOCATION;INSTRUMENT") == 0)
				{
					memset(chr_curr_param_val,APL_NULL_CHAR,IV_PARAM_LEN);
					strcpy(chr_curr_param_val,h_loccode);
					strcat(chr_curr_param_val,";");
					strcat(chr_curr_param_val,h_instr_code);
					strcat(chr_curr_param_val,APL_NULL_STRING);
				}
			else if(strcmp(chr_h_param_code,"PRODUCT;INSTRUMENT") == 0)
				{
					memset(chr_curr_param_val,APL_NULL_CHAR,IV_PARAM_LEN);
					strcpy(chr_curr_param_val,h_prodateype);
					strcat(chr_curr_param_val,";");
					strcat(chr_curr_param_val,h_instr_code);
					strcat(chr_curr_param_val,APL_NULL_STRING);
				}
				else
				{
					chr_l_param_code = strtok_r(chr_h_param_code,";",&z);
					if(strcmp(chr_h_param_code,"PRODUCT") == 0)
					{
						memset(chr_curr_param_val,APL_NULL_CHAR,IV_PARAM_LEN);
						strcpy(chr_curr_param_val,h_prodateype);
						strcat(chr_curr_param_val,APL_NULL_STRING);
						chr_l_param_code = strtok_r(NULL,";",&z);
					}
					else if(strcmp(chr_h_param_code,"LOCATION") == 0)
					{
						memset(chr_curr_param_val,APL_NULL_CHAR,IV_PARAM_LEN);
						strcpy(chr_curr_param_val,h_loccode);
						strcat(chr_curr_param_val,APL_NULL_STRING);
						chr_l_param_code = strtok_r(NULL,";",&z);
					}
					else if(strcmp(chr_h_param_code,"INSTRUMENT") == 0)
					{
						memset(chr_curr_param_val,APL_NULL_CHAR,IV_PARAM_LEN);
						strcpy(chr_curr_param_val,h_instr_code);
						strcat(chr_curr_param_val,APL_NULL_STRING);
						chr_l_param_code = strtok_r(NULL,";",&z);
					}
					else
					{
						memset(chr_prev_param_val,APL_NULL_CHAR,IV_PARAM_LEN);
						memset(chr_curr_param_val,APL_NULL_CHAR,IV_PARAM_LEN);
						strcpy(chr_curr_param_val,";");
						strcpy(chr_prev_param_val,";");
					}
				}

			/************* PTC Calculation : vinay kalaskar *******************/
		
			if(APL_FAILURE == IV_PtcAmountCalc(h_dl_client,h_instr_code,&l_ptc_amt,
														&int_retstat,l_debug_info_ptr))
			{
					if(int_retstat == IV_CRITCAL_ERROR_IND)
					{
						fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
						fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
						fflush(fp);
						int_bl_err_level = 1;
						if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
						{
							CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
							CO_FreeErrLst(l_debug_info_ptr);
						}
						*int_p_retstat = int_retstat;
					}
			}
	
			l_ptc_amt=l_ptc_amt*dbl_h_ptcval;

			
			/******************************************************************/
			
			if(strcmp(chr_curr_param_val,chr_prev_param_val) == 0)
			{
					

				l_round_ptcval = 0.0;
				if(chr_l_portfolio_eval == 'D')
               CO_Round(l_ptc_amt, int_g_ccy_decimallen,&l_round_ptcval);
				else
               CO_Round(l_ptc_amt * l_exchg_rt, int_g_ccy_decimallen,&l_round_ptcval);
               
				dbl_h_tpval += l_round_ptcval;


		   	#ifdef BILLDEBUG 
					fprintf(TestRep, "\ndbl_h_tpval for proc_data_val %s is %lf\n", chr_curr_param_val, dbl_h_tpval);     
					fflush(TestRep);
         	#endif 
			}
			else 
			{
				if (int_fetch_cnt > 1)
				{
					
					srv_charge = 0.0;
					int_retstat = IV_SUCCESS;
					
					if(APL_FAILURE == IV_Proc_CalcFee("O",p_cltt_str,PTC_FEE,chr_prev_param_val,APL_NULL_STRING,
														chr_h_param_code,dbl_h_tpval,dbl_h_tpval,chr_l_charge_type,chr_l_fee_type,
														&srv_charge,l_iv_data_struct_h_custgrp,'I',p_mstclt_a,chr_l_charge_basis,
														chr_l_fee_basis,chr_h_srv_ind, &int_retstat,l_debug_info_ptr))
					{
						if(int_retstat == IV_CRITCAL_ERROR_IND)
						{
							fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
							fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
							fflush(fp);
							int_bl_err_level = 1;
							if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
							{
								CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
								CO_FreeErrLst(l_debug_info_ptr);
							}
							*int_p_retstat = int_retstat;
						}
					}

					if(srv_charge > 0)
					{
						
						tot_ptc_cust_chg += srv_charge;
					}
					
					srv_charge = 0.0;
					int_retstat = IV_SUCCESS;
					
					/* HDFCIV_004 Rohit No Admin charges for India specific */
					IF_COND_NOT_EXISTS("ADMIN_CHARGE","NO_CUST_ADMIN")
					{
						if(APL_FAILURE == IV_Proc_CalcFee("O",p_cltt_str,ADM_CUST_FEE_IND,chr_prev_param_val,APL_NULL_STRING,
															chr_h_param_code,dbl_h_tpval,dbl_h_tpval,chr_l_charge_type,chr_l_fee_type,
															&srv_charge,l_iv_data_struct_h_admgrp,'I',p_mstclt_a,
															chr_l_charge_basis,chr_l_fee_basis,chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
						{
							if(int_retstat == IV_CRITCAL_ERROR_IND)
							{
								fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
								fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
								fflush(fp);
								int_bl_err_level = 1;
								if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
								{
									CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
									CO_FreeErrLst(l_debug_info_ptr);
								}
								*int_p_retstat = int_retstat;
							}
						}

						if(srv_charge > 0)
						{
							tot_adm_ptc_cust_chg += srv_charge;
						}
					}
					/* HDFCIV_004 Rohit Admin Charges End Here */
				}
				strcpy(chr_prev_param_val,chr_curr_param_val);

				

            l_round_ptcval = 0.0;
			   if(chr_l_portfolio_eval == 'D')
            CO_Round(l_ptc_amt, int_g_ccy_decimallen,&l_round_ptcval);
				else
            CO_Round(l_ptc_amt * l_exchg_rt, int_g_ccy_decimallen,&l_round_ptcval);
            dbl_h_tpval = l_round_ptcval;   
			}
		}

		EXEC SQL CLOSE pval_cur;

		int_is_pval_cur_open = 0;
	

	int_i_cnt = 0;
	int_l_err_flg = IV_SUCCESS; 
	
	while (strlen((l_iv_data_struct_h_custgrp+int_i_cnt)->proc_data)> 0)
	{
		
		srv_charge = 0.0;
		int_retstat = IV_SUCCESS;

		if(APL_FAILURE == IV_Proc_CalcFee("O",p_cltt_str,PTC_FEE,(l_iv_data_struct_h_custgrp+int_i_cnt)->proc_data,
											APL_NULL_STRING,chr_h_param_code,(l_iv_data_struct_h_custgrp+int_i_cnt)->fees_qty,
											(l_iv_data_struct_h_custgrp+int_i_cnt)->chrg_quant,chr_l_charge_type,
											chr_l_fee_type,&srv_charge,l_iv_data_struct_h_custgrp,'I',p_mstclt_a,
											chr_l_charge_basis,chr_l_fee_basis,chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
				int_l_err_flg = IV_CRITCAL_ERROR_IND; 
			}
		}

		tot_ptc_cust_chg += srv_charge;
		++int_i_cnt;
	}


	if( int_l_err_flg != IV_CRITCAL_ERROR_IND ) 
	{
		if((tot_ptc_cust_chg == 0) && (l_nil_fees > 0))
		{
			int_retstat = IV_SUCCESS;
		#ifdef BILLDEBUG 
			fprintf(TestRep, "\nInserting Record into IV_SERVICE_CHRG\n");     
			fprintf(TestRep, "account: %s\n",h_dl_client);
			fprintf(TestRep, "nil fees: %lf",l_nil_fees);
		   fprintf(TestRep, " min fees adjust: %lf",0.0);
			fprintf(TestRep, " MAX fees adjust: %lf",0.0); 
			fprintf(TestRep, " tot_chg: %lf\n",0.0);
			fprintf(TestRep, "currency :%s\n",chr_g_bl_ccycode);
			fflush(TestRep);

		#endif 
		/*added incld_in_ann_min_fee by shruthi kumbla for ISKB_1901*/
			if(APL_FAILURE == MF_IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,h_dl_client,l_nil_fees,0.0,0.0,0.0,
						chr_g_bl_ccycode,'I',PTC_FEE,p_mstclt_a,l_iv_client_serv_basis_structa.incld_in_ann_min_fee,&int_retstat,l_debug_info_ptr))
			{
				fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
			}
		}
		
		else if( (tot_ptc_cust_chg > 0 ) || (l_minimumfee > 0) || (l_maximum_fee != 0) )
		{
			if((tot_ptc_cust_chg < l_minimumfee) && (tot_ptc_cust_chg > 0))
				l_minimumfee_adj = l_minimumfee - tot_ptc_cust_chg;
			else
				l_minimumfee_adj = 0;
			if((tot_ptc_cust_chg > l_maximum_fee) && (l_maximum_fee != 0))
			{
				l_maximum_fee_adj = l_maximum_fee - tot_ptc_cust_chg;
			}
			else
				l_maximum_fee_adj = 0;
			int_retstat = IV_SUCCESS;
		#ifdef BILLDEBUG 
         
			fprintf(TestRep, "\nInserting Record into IV_SERVICE_CHRG\n");     
			fprintf(TestRep, "account: %s\n",h_dl_client);
			fprintf(TestRep, "nil fees: %lf",0.0);
		   fprintf(TestRep, " min fees adjust: %lf",l_minimumfee_adj);
			fprintf(TestRep, " MAX fees adjust: %lf",l_maximum_fee_adj); 
			fprintf(TestRep, " tot_chg: %lf\n",tot_ptc_cust_chg);
			fprintf(TestRep, "currency :%s\n",chr_g_bl_ccycode);
			fflush(TestRep);

		#endif 
			if (l_maximum_fee_adj != 0 || l_minimumfee_adj != 0 || tot_ptc_cust_chg != 0 ) 
			{
			/*added incld_in_ann_min_fee by shruthi kumbla for ISKB_1901*/
			if(APL_FAILURE == MF_IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,h_dl_client,0.0,l_minimumfee_adj,l_maximum_fee_adj,
							tot_ptc_cust_chg,chr_g_bl_ccycode,'I',PTC_FEE,p_mstclt_a,l_iv_client_serv_basis_structa.incld_in_ann_min_fee,&int_retstat,l_debug_info_ptr))
			{
				fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
			}
			}
		}
	} 

	

	/* HDFCIV_004 Rohit No Admin charges for India specific */
	IF_COND_NOT_EXISTS("ADMIN_CHARGE","NO_CUST_ADMIN")
	{
		int_i_cnt = 0;
		int_l_err_flg = IV_SUCCESS; 
		while (strlen((l_iv_data_struct_h_admgrp+int_i_cnt)->proc_data)> 0)
		{
			srv_charge = 0.0;
			int_retstat = IV_SUCCESS;

			if(APL_FAILURE == IV_Proc_CalcFee("O",p_cltt_str,ADM_CUST_FEE_IND,(l_iv_data_struct_h_admgrp+int_i_cnt)->proc_data,
												APL_NULL_STRING, chr_h_param_code,(l_iv_data_struct_h_admgrp+int_i_cnt)->fees_qty,
												(l_iv_data_struct_h_admgrp+int_i_cnt)->chrg_quant,chr_l_charge_type,chr_l_fee_type,
												&srv_charge,l_iv_data_struct_h_admgrp,'I',p_mstclt_a,
												chr_l_charge_basis,chr_l_fee_basis,chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
			{
				if(int_retstat == IV_CRITCAL_ERROR_IND)
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);

					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
					int_l_err_flg = IV_CRITCAL_ERROR_IND; 
				}
			}

			tot_adm_ptc_cust_chg += srv_charge;
			++int_i_cnt;
		}

	

		if( int_l_err_flg != IV_CRITCAL_ERROR_IND ) 
		{
			if((tot_adm_ptc_cust_chg == 0) && (l_adm_nil_fees > 0)) 
			{
				int_retstat = IV_SUCCESS;
			#ifdef BILLDEBUG 
					 
				fprintf(TestRep, "\nInserting Record into IV_SERVICE_CHRG\n");     
				fprintf(TestRep, "account: %s\n",h_dl_client);
				fprintf(TestRep, "nil fees: %lf",l_adm_nil_fees);
				 fprintf(TestRep, " min fees adjust: %lf",0.0);
				fprintf(TestRep, " MAX fees adjust: %lf",0.0); 
				fprintf(TestRep, " tot_chg: %lf\n",0.0);
				fprintf(TestRep, "currency :%s\n",chr_g_bl_ccycode);
				fflush(TestRep);

			#endif 
			/*added incld_in_ann_min_fee by shruthi kumbla for ISKB_1901*/
				if(APL_FAILURE == MF_IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,h_dl_client,l_adm_nil_fees,0.0,0.0,0.0,
							chr_g_bl_ccycode,'I',ADM_CUST_FEE_IND,p_mstclt_a,l_iv_client_serv_basis_structa.incld_in_ann_min_fee,&int_retstat,l_debug_info_ptr))
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}
			}
			if(tot_adm_ptc_cust_chg > 0)
			{
				if((tot_adm_ptc_cust_chg < l_adm_minimumfee)&& (tot_adm_ptc_cust_chg > 0))
					l_minimumfee_adj = l_adm_minimumfee - tot_adm_ptc_cust_chg;
				else
					l_minimumfee_adj = 0;
				if((tot_adm_ptc_cust_chg > l_adm_maximum_fee) && (l_adm_maximum_fee != 0))
				{
					l_maximum_fee_adj = l_adm_maximum_fee - tot_adm_ptc_cust_chg;
				}
				else
					l_maximum_fee_adj = 0;
				int_retstat = IV_SUCCESS;
			#ifdef BILLDEBUG 
					 
				fprintf(TestRep, "\nInserting Record into IV_SERVICE_CHRG\n");     
				fprintf(TestRep, "account: %s\n",h_dl_client);
				fprintf(TestRep, "nil fees: %lf",0.0);
				 fprintf(TestRep, " min fees adjust: %lf",l_minimumfee_adj);
				fprintf(TestRep, " MAX fees adjust: %lf",l_maximum_fee_adj); 
				fprintf(TestRep, " tot_chg: %lf\n",tot_adm_ptc_cust_chg);
				fprintf(TestRep, "currency :%s\n",chr_g_bl_ccycode);
				fflush(TestRep);

			#endif 
				if (l_maximum_fee_adj != 0 ||    l_minimumfee_adj != 0 || tot_adm_ptc_cust_chg != 0 )
				{
				/*added incld_in_ann_min_fee by shruthi kumbla for ISKB_1901*/
				if(APL_FAILURE == MF_IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,h_dl_client,0.0,l_minimumfee_adj,
									l_maximum_fee_adj,tot_adm_ptc_cust_chg,chr_g_bl_ccycode,'I',ADM_CUST_FEE_IND,
									p_mstclt_a,l_iv_client_serv_basis_structa.incld_in_ann_min_fee,&int_retstat,l_debug_info_ptr))
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}
				}
			}
		}
	}
	/* HDFCIV_004 Rohit Admin Charges End Here */


	if(*int_p_retstat == IV_CRITCAL_ERROR_IND)
	{
		APL_GOBACK_FAIL
	}
	else
	{
		*int_p_retstat = IV_SUCCESS;
		APL_GOBACK_SUCCESS;
	}

RETURN_SUCCESS:
	if(int_is_pval_cur_open == 1)
	{
		EXEC SQL CLOSE pval_cur;
	}
	if(int_is_regen_cur_open == 1)
	{
		EXEC SQL CLOSE regen_cur;
	}
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE, "Exiting Successfully Out Of IV_Chk_GenCustodyPtcChgs\n",
			 NULL, NULL);
	}
	return APL_SUCCESS;

RETURN_FAILURE:
	if(int_is_pval_cur_open == 1)
	{
		EXEC SQL CLOSE pval_cur;
	}
	if(int_is_regen_cur_open == 1)
	{
		EXEC SQL CLOSE regen_cur;
	}
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE, "Exiting Unsuccessfully Out Of IV_Chk_GenCustodyPtcChgs\n",
			 NULL, NULL);
	}
	return APL_FAILURE;

}


int IV_Proc_CalcFee(char *Treps_flag,char *p_cltt_str,long p_serv_code,char *chr_p_param_str,
	      char *chr_p_param_ind,char *chr_p_param_code,double p_fee_qty,
	      double p_charge_qty,char p_charge_type,char p_fee_type,
	      double *p_charge,IV_DATA_STRUCT_H *p_iv_data_struct_h,char p_cons_ind,
	      char *p_mstclt_a, char *p_charge_basis,char *p_fee_basis,char *p_ret_param_ind,
	      int *int_p_retstat,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;

	char chr_h_fee_str[IV_PARAM_LEN],chr_h_actcode[APL_CLIENT_LENGTH];
	char h_mstclt[APL_CLIENT_LENGTH],chr_h_group_ind[51];
	double h_fee_quantity=0,h_charge_quantity=0,h_nfee_quantity=0,h_ncharge_quantity=0;
	long int_h_serv_code=0;
	double h_schdl_fee=0.0,h_frm_fbase=0.0,h_tof_base=0.0,h_toc_base=0.0,h_frm_cbase=0.0;
	short i_schdl_fee,i_frm_fbase,i_tof_base,i_frm_cbase,i_toc_base,i_group_id,i_fee_type;
	struct sqlca sqlca;
	int   int_h_count = 0;
	int   int_h_txndecimallen  =0;
	int int_h_bcustfeedecimallen = 0;
	double l_min_fee=0.0;/* vinay kalaskar */
	double l_max_fee=0.0;/* vinay kalaskar */
	int count=0,count_no=0;/* vinay kalaskar */
	/* int l_multi_settle = 0, slab_cnt_no = 0, tot_days_in_year = 365; OPT:AIX */
	short l_multi_settle = 0;
	int slab_cnt_no = 0, tot_days_in_year = 365;
	double tot_slab_chrgs = 0.0, avg_schdl_fee =0.0,tot_ncharge_quantity = 0.0;

	/**** vinay kalaskar *****/
	
	char fee_client_code[APL_CLIENT_LENGTH] = APL_NULL_STRING;
	char proc_data_val[200] = APL_NULL_STRING;
	long service_cd = 0;
	char l_fee_type = APL_NULL_CHAR;
	 char h_apl_frm_date[9] = APL_NULL_STRING;  /* Added by monica for kotak ISKB_1737 */

	EXEC SQL VAR fee_client_code IS STRING;
	EXEC SQL VAR proc_data_val IS STRING;
	EXEC SQL VAR h_apl_frm_date IS STRING;  /* Added by monica for kotak ISKB_1737 */

	/**************************/

 	short int_i_count = 0;
	char temp[APL_CLIENT_LENGTH] = APL_NULL_STRING;
	EXEC SQL VAR chr_h_fee_str   IS STRING;
	EXEC SQL VAR chr_h_group_ind IS STRING;
	EXEC SQL VAR chr_h_actcode   IS STRING;
	EXEC SQL VAR h_mstclt    IS STRING;
	EXEC SQL VAR temp 		 IS STRING;

	EXEC SQL END DECLARE SECTION;

	char *s,*chr_actcode=NULL,*p,*chr_basis_act=NULL;
	char chr_acct[IV_CLT_LEN],chr_p_str[IV_PARAM_LEN],chr_basis_str[IV_CLT_LEN];
	char chr_l_actcode[APL_CLIENT_LENGTH],chr_l_fee_type;
	char chr_l_round_str[15],chr_l_basis_str[IV_CLT_LEN];
	char chr_srvdep_str[IV_CLT_LEN],chr_l_buf[BUFFER_LEN];
	char chr_portval_str[IV_CLT_LEN]; /* PJ IV_004 */
	char chr_l_portfolio_eval,chr_l_nav_ind;			/* PJ IV_004 Portfolio eval */
	char chr_l_mst_fee_basis[IV_STRING_LEN], chr_l_mst_charge_basis[IV_STRING_LEN]; 
	char chr_mst_basis_str[IV_CLT_LEN];
	char chr_temp_fee_str[IV_PARAM_LEN];
   double fees=0.0,nfeefacredit_indor=0.0,npcredit_indfactor=0.0,l_fee=0.0,l_exchg_rt=1.0, l_exch_txnfeeae_rate = 1.0, l_exch_bsrvfeeae_rate= 1.0;
	double l_round_fee = 0.0,l_nfee =0.0; 
	int int_fee_cnt=0,int_grp_cnt=0,int_l_diff=0,int_l_grp_exists=0;
	int int_new_grp=0,int_retstat=0,int_mismatch_flg=0,int_fee_found=0;
	int int_is_ts_cur_open = 0;
	IV_SERV_MAST_STRUCT l_iv_servmast_struct;
	SYS_IVCONTROLPARAM_STRUCT l_sys_ivcontrolparam_struct;
	IV_CLIENT_SERV_BASIS_STRUCT l_iv_client_serv_basis_structa;
	IV_CLIENTSETUP_STRUCT l_iv_clientsetup_struct;
	IV_CLIENTPARAM_STRUCT_H l_iv_clientparam_struct_hb;
	char chr_l_bill_dep[4],chr_l_b_basis[4],chr_h_identiy_no[17]; 				/* Bageshri HB_IV_001 */
	char *chr_l_last = (char *)NULL;
        char chr_l_uptodate_yyyy[5] = APL_NULL_STRING;
       /* changes done on 26th march 2007 to fix the 
         Leap Year issue (In Bill Generation Module)  */
	char chr_l_uptodate_mm[3] = APL_NULL_STRING; /* bageshri  26-03-07 */
	char chr_l_bl_upto_dt[APL_DATE_LEN] = APL_NULL_STRING;
	int int_l_uptodate_year = 0;
	int int_l_uptodate_mon = 0;/* bageshri  26-03-07 */

	sqlca.sqlcode = 0;

	memset(chr_h_identiy_no, APL_NULL_CHAR, 17);

	if(strlen(chr_p_param_ind) == 0)
	{
		chr_p_param_ind = (char *)calloc(51,sizeof(char));
		APL_MALLOC_FAIL(chr_p_param_ind);
	}
	/* Bageshri HB_IV_003 : multiple settlement -- START --*/

		if ((strcmp(p_charge_basis,"PER TXN") == 0) && (strcmp(p_fee_basis,"COUNTERVALUE PER TXN") == 0 ))
		{
			strcpy(chr_h_identiy_no,chr_p_param_ind);
			strcpy(chr_p_param_ind,APL_NULL_STRING);        /* Bageshri HDFC UAT Fix 16/06/2007 */
			//strcpy(p_charge_basis,"PER TXN");
		   l_multi_settle = 0 ;
		   if(APL_FAILURE == CO_Chk_CntryEnabled("TXN_CHARGES",
							"MULTI_SETTLEMENT",
							&l_multi_settle,
							l_debug_info_ptr))
		   {
			fprintf(fp,"Error : in accessing table PRO_CNTRY_SYS_PARAMS");
			fflush(fp);
			int_bl_err_level = 1;
			APL_GOBACK_FAIL
		   }



		}
	/* Bageshri HB_IV_003 : multiple settlement -- END --*/	

 s=(char *) calloc(IV_CLT_LEN,sizeof(char));
 p=(char *) calloc(IV_CLT_LEN,sizeof(char));
	memset(chr_h_actcode, APL_NULL_CHAR, APL_CLIENT_LENGTH);
	memset(chr_h_fee_str, APL_NULL_CHAR, IV_PARAM_LEN);
	memset(h_mstclt, APL_NULL_CHAR, APL_CLIENT_LENGTH);
	memset(chr_h_group_ind, APL_NULL_CHAR, 51);

	memset(chr_acct,APL_NULL_CHAR,IV_CLT_LEN);
	memset(chr_p_str, APL_NULL_CHAR, IV_PARAM_LEN);
	memset(chr_basis_str,APL_NULL_CHAR,IV_CLT_LEN);
	memset(chr_l_basis_str,APL_NULL_CHAR,IV_CLT_LEN);
	memset(chr_l_actcode,APL_NULL_CHAR,APL_CLIENT_LENGTH);
	memset(chr_l_round_str,APL_NULL_CHAR,15);
	memset(chr_srvdep_str,APL_NULL_CHAR,IV_CLT_LEN);
	memset(chr_portval_str,APL_NULL_CHAR,IV_CLT_LEN);
	memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);

	memset(&l_iv_servmast_struct, NULL, sizeof(IV_SERV_MAST_STRUCT));
	memset(&l_sys_ivcontrolparam_struct, NULL, sizeof(SYS_IVCONTROLPARAM_STRUCT));
	memset(&l_iv_client_serv_basis_structa, NULL, sizeof(IV_CLIENT_SERV_BASIS_STRUCT));
	memset(&l_iv_clientsetup_struct, NULL, sizeof(IV_CLIENTSETUP_STRUCT));
	memset(&l_iv_clientparam_struct_hb, NULL, sizeof(IV_CLIENTPARAM_STRUCT_H));

	memset(chr_l_mst_fee_basis, APL_NULL_CHAR, IV_STRING_LEN);
	memset(chr_l_mst_charge_basis, APL_NULL_CHAR, IV_STRING_LEN); 
	memset(chr_mst_basis_str, APL_NULL_CHAR, IV_CLT_LEN);
	memset(chr_l_bill_dep, APL_NULL_CHAR, 4);
	memset(chr_l_b_basis, APL_NULL_CHAR, 4);

	*int_p_retstat = IV_SUCCESS;

	APL_IF_DEBUG
	{
  		CO_ProcMonitor(TechRep,"Calculating Fee for account",NULL,NULL);
  		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
  		sprintf(chr_l_buf,"%s for service %ld for parameters %s",p_cltt_str,p_serv_code,chr_p_param_str);
  		CO_ProcMonitor(TechRep,chr_l_buf,NULL,NULL);
	}

int IV_Proc_CalcFeeInd(char ,long ,double *,int *,DEBUG_INFO_STRUCT_H **);


	if (p_fee_qty == 0)
		p_fee_qty = 1;

	printf("\n *** In calcfee 1300,p_cltt_str %s,p_serv_code %ld,chr_p_param_str %s,chr_p_param_ind %s,chr_p_param_code %s,p_fee_qty %lf,p_charge_qty %lf,p_charge_type %c,p_fee_type %c,p_charge %lf,p_cons_ind %c,p_mstclt_a %s,p_charge_basis %s,p_fee_basis %s,p_ret_param_ind %s \n",p_cltt_str,p_serv_code,chr_p_param_str, chr_p_param_ind, chr_p_param_code, p_fee_qty,p_charge_qty,p_charge_type,p_fee_type,*p_charge,p_cons_ind,p_mstclt_a,p_charge_basis,p_fee_basis,p_ret_param_ind );

	h_fee_quantity = p_fee_qty;
	h_charge_quantity = p_charge_qty;
	int_h_serv_code = p_serv_code;


	if(h_charge_quantity == 0)
	{
		*int_p_retstat = IV_SUCCESS;
		APL_GOBACK_SUCCESS
	}
	

        if((int_h_serv_code == CASH_DIV_FEE) && (p_cons_ind == 'C'))
        {
                strcpy(chr_temp_fee_str,chr_p_param_str);
                strcpy(chr_p_param_str,";");
        }

	strcpy(chr_h_fee_str,chr_p_param_str);

	strcpy(chr_acct,p_cltt_str);
	strcat(chr_acct,APL_NULL_STRING);
	strcpy(chr_basis_str,p_cltt_str);
	strcat(chr_basis_str,APL_NULL_STRING);
	strcpy(chr_srvdep_str,p_cltt_str);
	strcat(chr_srvdep_str,APL_NULL_STRING);
	strcpy(chr_portval_str,p_cltt_str);
	strcat(chr_portval_str,APL_NULL_STRING);
	chr_actcode = strtok_r(chr_acct,";",&s);
	strcpy(chr_l_actcode,chr_actcode);
	APL_IF_DEBUG
	{
		memset(chr_l_buf, APL_NULL_CHAR, BUFFER_LEN);
		sprintf(chr_l_buf, "In CalcFee Acc Str: %s Serv Code: %ld\n",p_cltt_str,p_serv_code);
		CO_ProcMonitor(TechRep, chr_l_buf, NULL, NULL);
		memset(chr_l_buf, APL_NULL_CHAR, BUFFER_LEN);

		sprintf(chr_l_buf, "In CalcFee chr_p_param_str: %s chr_p_param_ind: %s Bill Gen to M/S: %c\n",chr_p_param_str,chr_p_param_ind,chr_g_bl_gen);
		CO_ProcMonitor(TechRep, chr_l_buf, NULL, NULL);
	}

		if(APL_FAILURE == IV_Rtv_IVCUSTSETUP(chr_actcode,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat != IV_COLUMN_NULL_ERR)
			{
				fprintf(fp,"Error : Billing Setup not found for client %s\n",chr_actcode);
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
				APL_GOBACK_FAIL;
			}
		}
		chr_l_portfolio_eval = l_iv_clientsetup_struct.portfolio_eval;
		printf("\n 1473 portfolio evaluation %c \n ",  chr_l_portfolio_eval);
		chr_l_nav_ind = l_iv_clientsetup_struct.nav_ind;

		/*** vinay kalaskar ***/
		
		/******************** commented by bageshri as reapeated the code written above 	
		if(APL_FAILURE == IV_Rtv_IVCUSTSETUP(chr_actcode,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat != IV_COLUMN_NULL_ERR)
			{
				fprintf(fp,"Error : Billing Setup not found for client %s\n",chr_actcode);
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
				APL_GOBACK_FAIL;
			}
		}
		*******************************************************************************/
		if(p_serv_code == TXNFEE)
		{

		l_min_fee=l_iv_clientsetup_struct.txnminfee * g_exchg_rt_fee_bl;
		l_max_fee=l_iv_clientsetup_struct.txnmaxfee * g_exchg_rt_fee_bl;

		/* Bageshri HB_IV_001  START */
		printf("cln txn basis from table = |%s|",l_iv_clientsetup_struct.b_basis);
		strcpy(chr_l_b_basis, l_iv_clientsetup_struct.b_basis);
		//printf("cln txn basis = |%s| with length |%d|",chr_l_b_basis,strlen(chr_l_b_basis)); Changes done for AIX Migration
		printf("cln txn basis = |%s| with length |%d|",chr_l_b_basis,(int)strlen(chr_l_b_basis));
		if(strcmp(chr_l_b_basis," "))
			strcpy(chr_l_bill_dep, chr_l_b_basis);
		else
			strcpy(chr_l_bill_dep, chr_g_bill_dep);

		printf(" txn basis = |%s|",chr_l_bill_dep);

		/* Bageshri HB_IV_001  END */		
		}	
		/**********************/
		
	if (chr_g_bl_gen == 'M')
	{
		memset(&l_iv_clientsetup_struct, NULL, sizeof(IV_CLIENTSETUP_STRUCT));
		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Rtv_IVCUSTSETUP(p_mstclt_a,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat != IV_COLUMN_NULL_ERR)
			{
				fprintf(fp,"1414 Error : Billing Setup not found for client %s %d\n",p_mstclt_a, int_retstat);
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
				APL_GOBACK_FAIL;
			}
		}

		strcpy(chr_mst_basis_str, p_mstclt_a);
		strcat(chr_mst_basis_str, ";");
		strcat(chr_mst_basis_str, l_iv_clientsetup_struct.default_feeclt);
		strcat(chr_mst_basis_str, ";");
		strcat(chr_mst_basis_str, chr_g_cb_code);
		strcat(chr_mst_basis_str, ";"); 

		/* Bageshri HB_IV_001  START */
		if(p_serv_code == TXNFEE)
		{
			/*	ISKB-1937	Apply Exchange Rate	*/
			l_min_fee=l_iv_clientsetup_struct.txnminfee * g_exchg_rt_fee_bl;
			l_max_fee=l_iv_clientsetup_struct.txnmaxfee * g_exchg_rt_fee_bl;

			printf("cln txn basis from table = |%s|",l_iv_clientsetup_struct.b_basis);
			strcpy(chr_l_b_basis, l_iv_clientsetup_struct.b_basis);
			//printf("cln txn basis = |%s| with length |%d|",chr_l_b_basis,strlen(chr_l_b_basis)); Changes done for AIX Migration
			printf("cln txn basis = |%s| with length |%d|",chr_l_b_basis,(int)strlen(chr_l_b_basis));
			if(strcmp(chr_l_b_basis," "))
				strcpy(chr_l_bill_dep, chr_l_b_basis);
			else
				strcpy(chr_l_bill_dep, chr_g_bill_dep);

			printf(" txn basis = |%s|",chr_l_bill_dep);

		}
		/* Bageshri HB_IV_001  END */		

	}

	printf("\n *** 1398 |%s|\n", chr_basis_str);
	
	int_retstat = IV_SUCCESS;
	if(APL_FAILURE == IV_Rtv_IVSRVCHRGDel(int_h_serv_code,&l_iv_servmast_struct,&int_retstat,l_debug_info_ptr))
	{
		if(int_retstat != IV_COLUMN_NULL_ERR)
		{
			fprintf(fp,"Error : Service %ld not found\n",int_h_serv_code);
			fflush(fp);
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}
			*int_p_retstat = int_retstat;

			APL_GOBACK_FAIL
		}
	}

	/* Bageshri for Depository Charges */
	
	if( p_serv_code == DEPOFEE )
	{
	   IF_COND_EXISTS("IV_DEPO_CHRG","UNIT_PRCNTG")
		{
			if(!strcmp(chr_p_param_str,"NSDL"))
				l_iv_servmast_struct.fees_class='U';

			if(!strcmp(chr_p_param_str,"CDSL"))
				l_iv_servmast_struct.fees_class='P';
		}
	}

	if ((strcmp(p_charge_basis,"PER TXN") == 0) && (strcmp(p_fee_basis,"COUNTERVALUE PER TXN") == 0 ))
	{
		l_iv_servmast_struct.fees_class='P';	
	}

		chr_l_fee_type = l_iv_servmast_struct.fees_class;		

		nfeefacredit_indor = 1;

	/**********************************/


	/******* For Fee Type changes : vinay kalaskar *****************************
	
        printf("l_iv_servmast_struct.fees_class :|%c|\n",l_iv_servmast_struct.fees_class);

	strcpy(fee_client_code,chr_actcode);
	service_cd = p_serv_code;
	strcpy(proc_data_val,chr_p_param_str);


	EXEC SQL SELECT DISTINCT FEE_TYPE INTO :l_fee_type FROM IV_CLIENTFEE
		 WHERE CLIENT=:fee_client_code
		 AND SERVICE_CD=:service_cd
		 AND PROC_DATA_VAL=:proc_data_val;

	if((l_fee_type != APL_NULL_CHAR)&&(l_fee_type != ""))
		chr_l_fee_type = l_fee_type;
	else
		chr_l_fee_type = l_iv_servmast_struct.fees_class;		
		
	**************************************************************************/	 //Changes done for AIX Migration
	
	/* chr_l_fee_type = l_iv_servmast_struct.fees_class; */ /*** For Fee Type Check *****/

	/*nfeefacredit_indor = 1; Changes done for AIX Migration to remove comment with in comment warning

	if ( chr_l_fee_type == 'P' ) 
	{
		if (( p_serv_code != VOLDISCOUNTFEE  )&& (p_serv_code != ADM_TXN_FEE_IND ) && ( p_serv_code != TAXFEE ))  
		{
			printf("int_g_diff:|%d|",int_g_diff);
			* Change basis point factor 0.01 to 0.01%
			nfeefacredit_indor = (int_g_diff * 0.01)/365;
			*

			* Bageshri HB_IV_003 -- START -- 
			strcpy(chr_l_bl_upto_dt,chr_g_bl_upto_dt);
			if(strlen(chr_l_bl_upto_dt)>10)
			{
			                strcpy(chr_l_buf, strtok(chr_l_bl_upto_dt, " "));
					strtok_r(chr_l_buf, "/", &chr_l_last);
					strcpy(chr_l_uptodate_mm, strtok_r(NULL, "/", &chr_l_last)); * bageshri  26-03-07 
					strcpy(chr_l_uptodate_yyyy, strtok_r(NULL, "/", &chr_l_last));
					int_l_uptodate_mon = atoi(chr_l_uptodate_mm);  * bageshri  26-03-07 
					int_l_uptodate_year = atoi(chr_l_uptodate_yyyy);
					if(int_l_uptodate_mon >3) * bageshri  26-03-07 
						int_l_uptodate_year++;
					if((int_l_uptodate_year % 4) == 0)
						tot_days_in_year = 366;

			}
			printf("tot_days_in_year:|%d|",tot_days_in_year);

			nfeefacredit_indor = (int_g_diff * 0.0001)/tot_days_in_year;
			* Bageshri HB_IV_003 -- END -- 
			printf("nfeefacredit_indor:|%lf|",nfeefacredit_indor);

		}
		else
		{
			nfeefacredit_indor = 0.01;	
		}
	}*/

	while((chr_actcode != (char *)NULL) && (strlen(chr_actcode) > 0))
	{
		
		/* Verify if null exiting... */
		if ( strcmp(chr_actcode, " ") == 0  ) 
		{
			if(s == (char *)NULL)	
				strcpy(chr_actcode, APL_NULL_STRING);
			else
				chr_actcode = strtok_r(NULL, ";", &s);
			continue;
		}

		memset(chr_h_actcode, APL_NULL_CHAR, APL_CLIENT_LENGTH);
		strcpy(chr_h_actcode,chr_actcode);

		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Rtv_IVCUSTSETUP(chr_h_actcode,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat != IV_COLUMN_NULL_ERR)
			{
				fprintf(fp,"1496 Error : Billing Setup not found for client %s\n",chr_h_actcode);
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
				APL_GOBACK_FAIL;
			}
		}
		if (chr_l_portfolio_eval == 'D')  
			strcpy(l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode); /* PJ IV_004 */

		int_retstat = IV_SUCCESS;
		memset(&l_iv_clientparam_struct_hb, NULL, sizeof(IV_CLIENTPARAM_STRUCT_H));
		if(APL_FAILURE == IV_Rtv_ServiceParam(chr_basis_str,p_serv_code,&l_iv_clientparam_struct_hb,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat != IV_NO_DATA_FOUND_ERR)
			{
				fprintf(fp,"Error : Service dependencies not found for service %ld for client %s\n",p_serv_code,chr_h_actcode);
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
				APL_GOBACK_FAIL;
			}
		}
		
		else if(strcmp(chr_p_param_code,l_iv_clientparam_struct_hb.parameter_cd) != 0)
		{
				fprintf(fp,"Error : Mismatch in service dependencies for %s for service %ld for parameter :|%s| with account |%s| for parameter |%s|, while calculating for |%s\n",chr_l_actcode,p_serv_code,chr_p_param_code,l_iv_clientparam_struct_hb.client, l_iv_clientparam_struct_hb.parameter_cd,chr_p_param_str);
				fflush(fp);
				int_mismatch_flg =  1;
		}


		if ( (chr_g_bl_gen == 'M') && ((p_serv_code == CUSTODYFEE) || (p_serv_code == ADM_CUST_FEE_IND) || (p_serv_code == TXNFEE)) )
		{
			memset(&l_iv_client_serv_basis_structa, NULL, sizeof(IV_CLIENT_SERV_BASIS_STRUCT));
			int_retstat = IV_SUCCESS;
			printf("\n 1499 calling with |%s|\n", chr_mst_basis_str);
			if(APL_FAILURE == IV_Rtv_GetServBasis(chr_mst_basis_str,p_serv_code,&l_iv_client_serv_basis_structa,&int_retstat,l_debug_info_ptr))
			{
				fprintf(fp,"Error : Service basis not found for service %ld for master client %s of client %s\n", p_serv_code, p_mstclt_a, chr_l_actcode);
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}

				*int_p_retstat = int_retstat;
				APL_GOBACK_FAIL;
			}
			else
				int_retstat = IV_SUCCESS;

			strcpy(chr_l_mst_fee_basis, l_iv_client_serv_basis_structa.fees_base);
			strcpy(chr_l_mst_charge_basis, l_iv_client_serv_basis_structa.chrg_base);
			
			/*added by shruthi kumbla for ISKB_1901*/
			if((l_iv_client_serv_basis_structa.incld_in_ann_min_fee)!='Y')
				l_iv_client_serv_basis_structa.incld_in_ann_min_fee = 'N';
		}

		memset(&l_iv_client_serv_basis_structa, NULL, sizeof(IV_CLIENT_SERV_BASIS_STRUCT));
		int_retstat = IV_SUCCESS;
			printf("\n 1523 calling with |%s|\n", chr_basis_str);
		if(APL_FAILURE == IV_Rtv_GetServBasis( chr_basis_str,p_serv_code,&l_iv_client_serv_basis_structa,&int_retstat,l_debug_info_ptr))
		{
			fprintf(fp,"Error : Service basis not found for service %ld for client %s\n",p_serv_code,chr_l_actcode);
			fflush(fp);
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}

			*int_p_retstat = int_retstat;
			APL_GOBACK_FAIL;
		}
		else
			int_retstat = IV_SUCCESS;
		
		/*added by shruthi kumbla for ISKB_1901*/
			if((l_iv_client_serv_basis_structa.incld_in_ann_min_fee)!='Y')
				l_iv_client_serv_basis_structa.incld_in_ann_min_fee = 'N';
		
		if ( (chr_g_bl_gen == 'M') && ((p_serv_code == CUSTODYFEE) || (p_serv_code == ADM_CUST_FEE_IND) || (p_serv_code == TXNFEE)) ) 
		{
			strcpy(l_iv_client_serv_basis_structa.fees_base, chr_l_mst_fee_basis);
			strcpy(l_iv_client_serv_basis_structa.chrg_base, chr_l_mst_charge_basis);
		}
		
		if(strcmp(p_charge_basis,l_iv_client_serv_basis_structa.chrg_base) != 0)
		{
			fprintf(fp,"Error : Mismatch in h_chrg basis for %s for service code :%ld \n",chr_l_actcode,p_serv_code);
			fflush(fp);
			int_mismatch_flg =  1;
		}

		if(strcmp(p_fee_basis,l_iv_client_serv_basis_structa.fees_base) != 0)
		{
			fprintf(fp,"Error : Mismatch in fees basis for %s for service code :%ld \n",chr_l_actcode,p_serv_code );
			fflush(fp);
			int_mismatch_flg =  1;
		}

		if(p_fee_type != l_iv_client_serv_basis_structa.fees_class)
		{
			fprintf(fp,"Error : Mismatch in fees type for %s for service code :%ld %c %c\n",chr_l_actcode,p_serv_code, p_fee_type, l_iv_client_serv_basis_structa.fees_class);
			fflush(fp);
			int_mismatch_flg =  1;
		}
		
		if(p_charge_type != l_iv_client_serv_basis_structa.chrg_clas)
		{
			fprintf(fp,"Error : Mismatch in h_chrg type for %s for service h_code :%ld\n",chr_l_actcode,p_serv_code);
			fflush(fp);
			int_mismatch_flg =  1;
		}

		Alert("int_mismatch_flg :|%d|\n",int_mismatch_flg);

		if(int_mismatch_flg == 1)
		{
			*p_charge = 0;
			strcpy(p_ret_param_ind,APL_NULL_STRING);
			int_bl_err_level = 1;
			*int_p_retstat = IV_NO_DATA_FOUND_ERR;
			APL_GOBACK_FAIL;
		}

		
   	
 	  
   	l_exch_txnfeeae_rate = 1.0;
	l_exch_bsrvfeeae_rate = 1.0;

	printf("int_h_serv_code :|%ld|\n",int_h_serv_code);

   if (int_h_serv_code == ADM_TXN_FEE_IND)
   {
		h_charge_quantity =p_charge_qty;
		h_fee_quantity = p_fee_qty;
		if (strlen(l_iv_client_serv_basis_structa.dealadm_feeccy) > 0)
		{
      	if (strcmp(chr_g_fee_ccycode, l_iv_client_serv_basis_structa.dealadm_feeccy) != 0)
      	{
         	 int_retstat = IV_SUCCESS;
          	if(APL_FAILURE == IV_Rtv_ExchRate(chr_g_fee_ccycode, l_iv_client_serv_basis_structa.dealadm_feeccy,chr_g_bl_upto_dt,&l_exchg_rt,&int_retstat,l_debug_info_ptr))
          	{
            	 fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",l_iv_client_serv_basis_structa.dealadm_feeccy, chr_g_fee_ccycode);
             	fflush(fp);
             	int_bl_err_level = 1;
             	*int_p_retstat = IV_CRITCAL_ERROR_IND;
             	if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
             	{
              	   CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
               	  CO_FreeErrLst(l_debug_info_ptr);
             	}
          	}
      	}
      	l_exch_txnfeeae_rate = l_exchg_rt;

	      
      	if ( APL_FAILURE == CR_Rtv_CCYFldVal(l_iv_client_serv_basis_structa.dealadm_feeccy,"decimallen",&int_h_txndecimallen,l_debug_info_ptr))
      	{
        		 fprintf(fp,"Error : Could not fetch decimal length for currency %s\n", l_iv_client_serv_basis_structa.dealadm_feeccy);
         	fflush(fp);
         	int_bl_err_level = 1;
         	*int_p_retstat = int_retstat;
         	if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
         	{
                CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                CO_FreeErrLst(l_debug_info_ptr);
         	}
      	}


 	     l_round_fee = 0.0;
   	   
      	   CO_Round(h_fee_quantity * l_exchg_rt, int_h_txndecimallen, &l_round_fee);
         	h_fee_quantity = l_round_fee;
      	l_round_fee = 0.0;
      	
        	 CO_Round(h_charge_quantity * l_exchg_rt, int_h_txndecimallen,&l_round_fee);
      	h_charge_quantity = l_round_fee;
        	l_round_fee = 0.0;
		}
	}
	else 
	{
		h_charge_quantity =p_charge_qty;
      		h_fee_quantity = p_fee_qty;

		int_retstat = IV_SUCCESS;
		printf("\n 1685 clientname|%s| \n", l_iv_client_serv_basis_structa.client);

      	if(APL_FAILURE == IV_Rtv_IVCUSTSETUP(l_iv_client_serv_basis_structa.client,
      					&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr))
      	{
         if(int_retstat != IV_COLUMN_NULL_ERR)
         {
            fprintf(fp,"1689 Error : Billing Setup not found for client |%s|\n",l_iv_client_serv_basis_structa.client);
            fflush(fp);
            int_bl_err_level = 1;
            if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
            {
               CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
               CO_FreeErrLst(l_debug_info_ptr);
            }
            *int_p_retstat = int_retstat;
            APL_GOBACK_FAIL;
         }
      }	
	if(chr_l_portfolio_eval == 'D')  
		strcpy(l_iv_clientsetup_struct.fees_ccy , chr_g_fee_ccycode); /* PJ IV_004 */

      if (strlen(l_iv_clientsetup_struct.fees_ccy) > 0)
		{  l_exchg_rt = 1.0;  /* PJ IV_004 */
         if (strcmp(chr_g_fee_ccycode, l_iv_clientsetup_struct.fees_ccy) != 0)
         {
             int_retstat = IV_SUCCESS;
            if(APL_FAILURE == IV_Rtv_ExchRate(chr_g_fee_ccycode, l_iv_clientsetup_struct.fees_ccy,chr_g_bl_upto_dt,&l_exchg_rt,&int_retstat,l_debug_info_ptr))
            {
                fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode);
               fflush(fp);
               int_bl_err_level = 1;
               *int_p_retstat = IV_CRITCAL_ERROR_IND;
               if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
               {
                  CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                    CO_FreeErrLst(l_debug_info_ptr);
               }
            }
         }
			l_exch_bsrvfeeae_rate =  l_exchg_rt;

         
			if ( APL_FAILURE == CR_Rtv_CCYFldVal(l_iv_clientsetup_struct.fees_ccy,"decimallen",&int_h_bcustfeedecimallen,l_debug_info_ptr))
			{
				fprintf(fp,"Error : Could not fetch decimal length for currency %s\n", l_iv_clientsetup_struct.fees_ccy);
				fflush(fp);
            int_bl_err_level = 1;
            *int_p_retstat = int_retstat;
            if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
            {
                CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                CO_FreeErrLst(l_debug_info_ptr);
            }
         }

			if (strcmp(p_fee_basis,"PORTFOLIO VALUE") == 0)
			{
        		l_round_fee = 0.0;
				CO_Round(h_fee_quantity * l_exchg_rt, int_h_bcustfeedecimallen,&l_round_fee);
				h_fee_quantity = l_round_fee;
			}
         if (strcmp(p_charge_basis,"PORTFOLIO VALUE") == 0)
			{
				l_round_fee = 0.0;
				CO_Round(h_charge_quantity * l_exchg_rt, int_h_bcustfeedecimallen,&l_round_fee);
      	   h_charge_quantity = l_round_fee;
         	l_round_fee = 0.0;
			}

  		}
	}

		/* Added by monica for kotak ISKB_1737 starts */
		Alert("l_iv_client_serv_basis_structa.apl_frm_date |%s|",l_iv_client_serv_basis_structa.apl_frm_date);
		strcpy(h_apl_frm_date,l_iv_client_serv_basis_structa.apl_frm_date);
		Alert("h_apl_frm_date |%s|",h_apl_frm_date);
		/* Added by monica for kotak ISKB_1737 ends */	

		printf("p_charge_type :|%c|\tp_fee_type:|%c|\n",p_charge_type,p_fee_type);

		if((p_charge_type == 'T') && (p_fee_type == 'T'))
		{
			EXEC SQL SELECT SCHDL_FEE,FRM_CBASE,TOC_BASE,
			FRM_FBASE,TOF_BASE,GROUP_ID,FEE_TYPE 
			INTO  :h_schdl_fee:i_schdl_fee,
					:h_frm_cbase:i_frm_cbase,
					:h_toc_base:i_toc_base,
					:h_frm_fbase:i_frm_fbase,
					:h_tof_base:i_tof_base,
					:chr_h_group_ind:i_group_id,
					:l_fee_type:i_fee_type
			FROM IV_CLIENTFEE
			WHERE CLIENT   = :chr_h_actcode 
			AND SERVICE_CD   = :int_h_serv_code
			AND PROC_DATA_VAL   = :chr_h_fee_str
			AND FRM_FBASE < :h_fee_quantity 
			AND TOF_BASE   >= :h_fee_quantity
			AND FRM_CBASE < :h_charge_quantity 
			AND TOC_BASE   >= :h_charge_quantity
			AND APL_FRM_DATE = :h_apl_frm_date;  // Added by Monica for ISKB_1737
			
			if(sqlca.sqlcode < 0)
			{
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
			}

			IS_ANY_ORA_ERROR;

				Alert("h_schdl_fee |%lf|",h_schdl_fee);
			Alert("h_frm_cbase |%ld|",h_frm_cbase);
			Alert("h_toc_base |%ld|",h_toc_base);
			Alert("h_frm_fbase |%lf|",h_frm_fbase);
			Alert("h_tof_base |%lf|",h_tof_base);
			Alert("chr_h_group_ind |%s|",chr_h_group_ind);
			Alert("l_fee_type |%c|",l_fee_type);

			Alert("p_cons_ind :|%c|\n",p_cons_ind);

			if( (APL_ZERO_RESULT_SET) || (p_cons_ind == 'X'))
			{
				if (p_cons_ind == 'X') 
				{
					int_fee_found = 1;
					strcpy(chr_p_str,chr_h_fee_str);
				}
				else
				{
					int_retstat = IV_SUCCESS;
					
					if(APL_FAILURE == IV_Chk_Grp(chr_h_fee_str,chr_p_param_code,&chr_p_param_ind,chr_p_str,p_serv_code,chr_h_actcode,h_apl_frm_date,&int_retstat,l_debug_info_ptr))     /* Added apl_frm_date by monica for kotak ISKB_1737 */
					{
						fprintf(fp,"Error in accessing group for client %s and service %ld , Fee string %s",chr_h_actcode,p_serv_code,chr_h_fee_str);
						fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
						fflush(fp);
						if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
						{
							CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
							CO_FreeErrLst(l_debug_info_ptr);
						}
						int_bl_err_level = 1;
						*int_p_retstat = int_retstat;
						APL_GOBACK_FAIL;
					}
				}
				if (strlen(chr_p_str) > 0 && p_cons_ind != 'X' )
				{
					int_retstat = IV_SUCCESS;
					
					if(APL_FAILURE == IV_Chk_GrpMember(chr_l_actcode,p_serv_code,h_apl_frm_date,chr_p_str,&int_l_grp_exists,&int_retstat,l_debug_info_ptr))   /* Added apl_frm_date by monica for kotak ISKB_1737 */
					{
						fprintf(fp,"Error in accessing table for client %s. Please contact support\n",chr_h_actcode);
						fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
						fflush(fp);
						int_bl_err_level = 1;
						*int_p_retstat = IV_CRITCAL_ERROR_IND;
						if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
						{
							CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
							CO_FreeErrLst(l_debug_info_ptr);
						}
					}

					if(int_l_grp_exists > 0)
					{
						//fprintf(fp,"Error : Overlapping fees setup defined for %s for service code ; %d\n",chr_h_actcode,p_serv_code);Changes done for AIX Migration
						fprintf(fp,"Error : Overlapping fees setup defined for %s for service code ; %ld\n",chr_h_actcode,p_serv_code);
						fflush(fp);
					}
				}

				if(strlen(chr_p_str) > 0)
				{
					int_fee_found = 1;
					strcpy(chr_h_group_ind,chr_p_param_ind);
					int_grp_cnt = 0;
					int_new_grp = 0;
					Alert("length [%d]",strlen((p_iv_data_struct_h+int_grp_cnt)->proc_data));
					
					while(strlen((p_iv_data_struct_h+int_grp_cnt)->proc_data) > 0)
					{
						if(strcmp((p_iv_data_struct_h+int_grp_cnt)->proc_data,chr_p_str) == 0 && (strcmp((p_iv_data_struct_h+int_grp_cnt)->Treps_flag,Treps_flag)==0 ))
								
						{
							int_new_grp=1;
							break;
						}
						++int_grp_cnt;
					}

					if(int_new_grp == 0)
					{
						memset((p_iv_data_struct_h+int_grp_cnt)->proc_data,'\0',100);
						strcpy((p_iv_data_struct_h+int_grp_cnt)->proc_data,chr_p_str);
						memset((p_iv_data_struct_h+int_grp_cnt)->param_flag,'\0',50);
						strcpy((p_iv_data_struct_h+int_grp_cnt)->param_flag,chr_p_param_ind);
						(p_iv_data_struct_h+int_grp_cnt)->chrg_quant = 0;
						(p_iv_data_struct_h+int_grp_cnt)->fees_qty = 0;
						if(int_grp_cnt < 49)
						{
							memset((p_iv_data_struct_h+int_grp_cnt+1)->proc_data,'\0',100);
							strcpy((p_iv_data_struct_h+int_grp_cnt+1)->proc_data,APL_NULL_STRING);
							memset((p_iv_data_struct_h+int_grp_cnt+1)->param_flag,'\0',50);
							strcpy((p_iv_data_struct_h+int_grp_cnt+1)->param_flag,APL_NULL_STRING);
							(p_iv_data_struct_h+int_grp_cnt+1)->chrg_quant = 0;
							(p_iv_data_struct_h+int_grp_cnt+1)->fees_qty = 0;
						}
					}
					
					/* Bageshri 18/06/2007 : HDFC UAT Fix for detailed custody charges - START*/
					
					if ((p_serv_code == CUSTODYFEE ) && (strcmp(chr_p_param_code,";")!=0))
					{
						int_retstat = IV_SUCCESS;

						printf("\n========================================================================");
						printf("\nchr_l_actcode |%s| chr_p_param_code |%s| chr_h_fee_str |%s| chr_h_group_ind |%s| p_charge_type |%c| h_schdl_fee |%lf| h_fee_quantity |%lf| h_charge_quantity |%lf|",chr_l_actcode,chr_p_param_code,chr_h_fee_str,chr_h_group_ind,p_charge_type,h_schdl_fee,h_fee_quantity,h_charge_quantity);

						if(APL_FAILURE == IV_Mod_SchFeeIVCUSTPRINT(chr_l_actcode,p_serv_code,h_apl_frm_date,chr_l_portfolio_eval,chr_p_param_code,chr_h_fee_str,chr_h_group_ind,p_charge_type,chr_h_actcode,nfeefacredit_indor,'N',&int_retstat,l_debug_info_ptr)) /* Added apl_frm_date by monica for kotak ISKB_1737*/
						{
							fprintf(fp,"Error : Could not update custody charges details for client %s\n",chr_l_actcode);
																									
							fflush(fp);
							int_bl_err_level = 1;
							*int_p_retstat = IV_CRITCAL_ERROR_IND;
							if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
							{
								CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
								CO_FreeErrLst(l_debug_info_ptr);
							}
						}
					}/*added else if block by shruthi kumbla for ISKB_1737 to update charge and schedule fee in IV_PLSECURITY table for service code 33*/
					else if ((p_serv_code == PERLINE_SECURITY ) && (strcmp(chr_p_param_code,";")!=0) && (p_cons_ind == 'I' ))
					{
						int_retstat = IV_SUCCESS;

						Alert("\n========================================================================");
						Alert("\n g_exchg_rt_fee_bl  %lf",g_exchg_rt_fee_bl);
						printf("\nchr_l_actcode |%s| p_serv_code |%ld| h_schdl_fee |%lf| chr_h_fee_str |%s| chr_h_group_ind |%s| h_fee_quantity |%lf| h_charge_quantity |%lf|",chr_l_actcode,p_serv_code,h_schdl_fee,chr_h_fee_str,chr_h_group_ind,h_fee_quantity,h_charge_quantity);

						if(APL_FAILURE == IV_Mod_SchFeeIV_PLSECURITY(chr_l_actcode,p_serv_code,h_schdl_fee,chr_h_fee_str,h_charge_quantity,chr_h_group_ind,g_exchg_rt_fee_bl,&int_retstat,l_debug_info_ptr))
						{
							fprintf(fp,"Error : Could not update custody charges details for client %s\n",chr_l_actcode);
																									
							fflush(fp);
							int_bl_err_level = 1;
							*int_p_retstat = IV_CRITCAL_ERROR_IND;
							if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
							{
								CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
								CO_FreeErrLst(l_debug_info_ptr);
							}
						}
					}

				/* Bageshri 18/06/2007 : HDFC UAT Fix for detailed custody charges - END */
		
               if ((strcmp(p_fee_basis,"PORTFOLIO VALUE") == 0) || (strcmp(p_fee_basis,"COUNTERVALUE") == 0) || (strcmp(p_fee_basis, "COUNTERVALUE PER TXN") == 0 ))
               {
                     h_fee_quantity = h_fee_quantity / l_exch_txnfeeae_rate;
                    h_fee_quantity = h_fee_quantity / l_exch_bsrvfeeae_rate;
               }

               if ((strcmp(p_charge_basis,"PORTFOLIO VALUE") == 0) || (strcmp(p_charge_basis,"COUNTERVALUE") == 0) || (strcmp(p_fee_basis, "COUNTERVALUE PER TXN") == 0 ))
               {
                    h_charge_quantity = h_charge_quantity / l_exch_txnfeeae_rate;
                    h_charge_quantity = h_charge_quantity / l_exch_bsrvfeeae_rate;
               }

					(p_iv_data_struct_h+int_grp_cnt)->chrg_quant += h_charge_quantity;
					(p_iv_data_struct_h+int_grp_cnt)->fees_qty += h_fee_quantity;
				     strcpy((p_iv_data_struct_h+int_grp_cnt)->Treps_flag, Treps_flag);
					Alert("[%s]",(p_iv_data_struct_h+int_grp_cnt)->Treps_flag);
					*p_charge = 0;
					strcpy(p_ret_param_ind, APL_NULL_STRING);
					strcpy(p_ret_param_ind,chr_p_param_ind);
					fees = 0;
					strcpy(chr_actcode,APL_NULL_STRING);
				}
				else
				{
					if(s == (char *)NULL)
						strcpy(chr_actcode, APL_NULL_STRING);
					else
						chr_actcode = strtok_r(NULL,";",&s);
				}	
				chr_basis_act = strtok_r(chr_basis_str,";",&p);
				strcpy(chr_l_basis_str,APL_NULL_STRING);

			   while(chr_basis_act != (char *)NULL )  
				{
					if(p == (char *)NULL)
						strcpy(chr_basis_act, APL_NULL_STRING);
					else
						chr_basis_act = strtok_r(NULL,";",&p);
					if (chr_basis_act == NULL) break; /* PJ */
					if(strlen(chr_basis_act) > 0)
					{
						strcat(chr_l_basis_str,chr_basis_act);
						strcat(chr_l_basis_str,";");
					}
				}
				strcpy(chr_basis_str,chr_l_basis_str);
			}
			else
			{
				int_fee_found = 1;

				/* Bageshri 18/06/2007 : HDFC UAT Fix for detailed custody charges - START */

//shailesh 05-02-2008 
              if ((strcmp(p_charge_basis,"COUNTERVALUE") == 0) && (strcmp(p_fee_basis,"COUNTERVALUE") == 0 ))
			chr_l_fee_type = 'P';	


				if ((strcmp(p_charge_basis,"PER TXN") == 0) && (strcmp(p_fee_basis,"COUNTERVALUE PER TXN") == 0 ))
					chr_l_fee_type = 'P';	

				if ( chr_l_fee_type == 'P' ) 
				{
					int_retstat = IV_SUCCESS;

					if(APL_FAILURE ==  IV_Proc_CalcFeeInd(chr_l_fee_type,p_serv_code,&nfeefacredit_indor,&int_retstat,l_debug_info_ptr))
					{
						fprintf(fp,"Error : Could not calculate fee factor for service code %ld\n",int_h_serv_code);
																								
						fflush(fp);
						int_bl_err_level = 1;
						*int_p_retstat = IV_CRITCAL_ERROR_IND;
						if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
						{
							CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
							CO_FreeErrLst(l_debug_info_ptr);
						}
					}
				}
	
				printf(" @@@@@@@@@@@@@@@@@@@@ nfeefacredit_indor |%lf|",nfeefacredit_indor);

				if ((p_serv_code == CUSTODYFEE ) && (chr_l_nav_ind == 'N'))
				{
					int_retstat = IV_SUCCESS;

					printf("\n========================================================================");
					printf("\nchr_l_actcode |%s| chr_p_param_code |%s| chr_h_fee_str |%s| chr_h_group_ind |%s| p_charge_type |%c| h_schdl_fee |%lf| h_charge_quantity |%lf|",chr_l_actcode,chr_p_param_code,chr_h_fee_str,chr_h_group_ind,p_charge_type,h_schdl_fee,h_charge_quantity);

					if(APL_FAILURE == IV_Mod_SchFeeIVCUSTPRINT(chr_l_actcode,p_serv_code,h_apl_frm_date,chr_l_portfolio_eval,chr_p_param_code,chr_h_fee_str,chr_h_group_ind,p_charge_type,chr_h_actcode,nfeefacredit_indor,'Y',&int_retstat,l_debug_info_ptr))  /* Added apl_frm_date by monica for kotak ISKB_1737 */
					{
						fprintf(fp,"Error : Could not update custody charges details for client %s\n",chr_l_actcode);
																								
						fflush(fp);
						int_bl_err_level = 1;
						*int_p_retstat = IV_CRITCAL_ERROR_IND;
						if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
						{
							CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
							CO_FreeErrLst(l_debug_info_ptr);
						}
					}
				}

				/* Bageshri 18/06/2007 : HDFC UAT Fix for detailed custody charges - END */
				printf("h_schdl_fee |%lf| h_charge_quantity |%lf|\n",h_schdl_fee,h_charge_quantity);
				fees  = h_schdl_fee * h_charge_quantity * nfeefacredit_indor;
				printf("\n=== Fee |%lf|\n",fees);
				strcpy(p_ret_param_ind,APL_NULL_STRING);
				strcpy(p_ret_param_ind, chr_h_group_ind);
				if(strcmp(chr_h_actcode,chr_l_actcode) != 0)
				{
						
					l_exchg_rt = 1.0;
					if ( int_h_serv_code != ADM_TXN_FEE_IND )
               {
						l_exchg_rt = 1.0;
						if (strcmp(l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode) != 0)  
						{
							int_retstat = IV_SUCCESS;
							if(APL_FAILURE == IV_Rtv_ExchRate(l_iv_clientsetup_struct.fees_ccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,
					   	                           &l_exchg_rt,&int_retstat,l_debug_info_ptr))
																										
							{
								fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",l_iv_clientsetup_struct.fees_ccy,chr_g_fee_ccycode);
																										
								fflush(fp);
								int_bl_err_level = 1;
								*int_p_retstat = IV_CRITCAL_ERROR_IND;
								if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
								{
									CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
									CO_FreeErrLst(l_debug_info_ptr);
								}
							}
						}
					}
					else if ( int_h_serv_code ==  ADM_TXN_FEE_IND )
               {
						if (strcmp(l_iv_client_serv_basis_structa.dealadm_feeccy, chr_g_fee_ccycode) != 0)
                  {
                     int_retstat = IV_SUCCESS;
                     if(APL_FAILURE == IV_Rtv_ExchRate(l_iv_client_serv_basis_structa.dealadm_feeccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,&l_exchg_rt,&int_retstat,l_debug_info_ptr))
                     {
                        fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",l_iv_client_serv_basis_structa.dealadm_feeccy,chr_g_fee_ccycode);
                        fflush(fp);
                        int_bl_err_level = 1;
                        *int_p_retstat = IV_CRITCAL_ERROR_IND;
                        if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
                        {
                           CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                           CO_FreeErrLst(l_debug_info_ptr);
                        }
                     }
                  }
					}
					Alert("l_exchg_rt |%lf|",l_exchg_rt);
					fees = fees * l_exchg_rt;      
					if (int_h_serv_code != CUSTODYFEE )
						h_schdl_fee = h_schdl_fee * l_exchg_rt;      
					Alert("\n=== h_schdl_fee |%lf|\n",h_schdl_fee);

					fprintf(fp,"Warning : Fee not found for client %s for service %ld for %s.",chr_l_actcode, int_h_serv_code, chr_h_fee_str);
					fprintf(fp, "Using fees structure of client %s\n", chr_h_actcode);
					fflush(fp);
				}
				else
				{
					if ( int_h_serv_code ==  ADM_TXN_FEE_IND )
					{
						if (strcmp(l_iv_client_serv_basis_structa.dealadm_feeccy, chr_g_fee_ccycode) != 0)
                  {
							int_retstat = IV_SUCCESS;
                     if(APL_FAILURE == IV_Rtv_ExchRate(l_iv_client_serv_basis_structa.dealadm_feeccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,&l_exchg_rt
,&int_retstat,l_debug_info_ptr))
                     {
                        fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",l_iv_client_serv_basis_structa.dealadm_feeccy,chr_g_fee_ccycode);
                        fflush(fp);
                        int_bl_err_level = 1;
                        *int_p_retstat = IV_CRITCAL_ERROR_IND;
                        if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
                        {
                           CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                           CO_FreeErrLst(l_debug_info_ptr);
                        }
                     }
							fees = fees * l_exchg_rt;
							h_schdl_fee = h_schdl_fee * l_exchg_rt;
							fprintf(fp,"Warning : Fee not found for client %s for service %ld for %s.",chr_l_actcode, int_h_serv_code, chr_h_fee_str);
               		fflush(fp);
						}
						
					}		
				}

				

				
				
				if ((strcmp(p_charge_basis,"COUNTERVALUE PER TXN") != 0) && (strcmp(p_fee_basis,"COUNTERVALUE PER TXN") != 0 ))
				{
                  l_round_fee = 0.0;
                  CO_Round(fees, int_g_ccy_decimallen, &l_round_fee);
            		fees = l_round_fee * g_exchg_rt_fee_bl;
						l_round_fee = 0.0;
						CO_Round(fees, int_g_blccy_decimallen, &l_round_fee);
                  fees = l_round_fee;
				}
				else
				{
					fees = fees * g_exchg_rt_fee_bl;
				}
			   *p_charge = fees;
					Alert("fees |%lf|",fees);		
	         h_nfee_quantity = h_fee_quantity;
				h_ncharge_quantity = h_charge_quantity;
				l_nfee = fees;
				
				/*** vinay kalaskar ***/
				
				/*added  if block by shruthi kumbla for ISKB_1737 to update charge and schedule fee in IV_PLSECURITY table for service code 33*/
				if ((p_serv_code == PERLINE_SECURITY ) && (p_cons_ind == 'I' ) )
				{
					int_retstat = IV_SUCCESS;

					Alert("\n========================================================================");
					printf("\nchr_l_actcode |%s| p_serv_code |%ld| h_schdl_fee |%lf| chr_h_fee_str |%s| chr_h_group_ind |%s| h_fee_quantity |%lf| h_charge_quantity |%lf|",chr_l_actcode,p_serv_code,h_schdl_fee,chr_h_fee_str,chr_h_group_ind,h_fee_quantity,h_charge_quantity);
					
					Alert("\n g_exchg_rt_fee_bl  %lf",g_exchg_rt_fee_bl);
					if(APL_FAILURE == IV_Mod_SchFeeIV_PLSECURITY(chr_l_actcode,p_serv_code,h_schdl_fee,chr_h_fee_str,h_charge_quantity,chr_h_group_ind,g_exchg_rt_fee_bl,&int_retstat,l_debug_info_ptr))
					{
						fprintf(fp,"Error : Could not update custody charges details for client %s\n",chr_l_actcode);
				
						fflush(fp);
						int_bl_err_level = 1;
						*int_p_retstat = IV_CRITCAL_ERROR_IND;
						if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
						{
							CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
							CO_FreeErrLst(l_debug_info_ptr);
						}
					}
				}
				
				
				if(p_serv_code == TXNFEE)
				{
				printf("Charge Basis |%s| Fee Basis |%s|\n",p_charge_basis,p_fee_basis);
				printf("fee |%lf| Min Fee |%lf| Max Fee|%lf|\n",l_nfee,l_min_fee,l_max_fee);
				if ((strcmp(p_charge_basis,"PER TXN") == 0) && (strcmp(p_fee_basis,"COUNTERVALUE PER TXN") == 0 ))
				{
                  l_round_fee = 0.0;
                  CO_Round(l_nfee, int_g_ccy_decimallen, &l_round_fee);
            		l_nfee = l_round_fee * g_exchg_rt_fee_bl;
						l_round_fee = 0.0;
						CO_Round(l_nfee, int_g_blccy_decimallen, &l_round_fee);
                  l_nfee = l_round_fee;
		avg_schdl_fee = h_schdl_fee;
/*Commented by siva.ganapathi for ISKB_2323*/
/*
				}
				else
				{
*/
					if((l_nfee > 0 )&&(l_min_fee > 0)&&(l_max_fee > 0))
					{
						if(l_nfee < l_min_fee)
							l_nfee=l_min_fee;
						else if(l_nfee > l_max_fee)
							l_nfee=l_max_fee;
					}
					l_nfee = l_nfee * g_exchg_rt_fee_bl;
				}
			   *p_charge = l_nfee;
				}
				*p_charge = l_nfee;/* vinay */	
				printf("\n **** 2197 **** lnfee=|%lf|g_exchg_rt_fee_bl|%lf|\n", l_nfee,g_exchg_rt_fee_bl);
				/***********************/
				
            if (p_serv_code != CUSTODYFEE)
				{
              h_schdl_fee = h_schdl_fee * g_exchg_rt_fee_bl;
				}
		      if ((strcmp(p_fee_basis,"PORTFOLIO VALUE") == 0) || (strcmp(p_fee_basis,"COUNTERVALUE") == 0) || (strcmp(p_fee_basis, "COUNTERVALUE PER TXN") == 0 ))
			   { 
			    	h_nfee_quantity = h_nfee_quantity / l_exch_txnfeeae_rate;
			 		h_nfee_quantity = h_nfee_quantity / l_exch_bsrvfeeae_rate;
      			h_nfee_quantity = h_nfee_quantity * g_exchg_rt_fee_bl;
					l_round_fee = 0.0;
            	CO_Round(h_nfee_quantity, int_g_blccy_decimallen, &l_round_fee);
					h_nfee_quantity = l_round_fee;
			
			 	}

			if ((strcmp(p_charge_basis,"PORTFOLIO VALUE") == 0) || (strcmp(p_charge_basis,"COUNTERVALUE") == 0) || (strcmp(p_fee_basis, "COUNTERVALUE PER TXN") == 0 ))
				{
					/*** vinay ****/
				   if(strcmp(p_charge_basis,"PER TXN") != 0 )	
					{
					h_ncharge_quantity = h_ncharge_quantity / l_exch_txnfeeae_rate;
					h_ncharge_quantity = h_ncharge_quantity / l_exch_bsrvfeeae_rate;
       			h_ncharge_quantity = h_ncharge_quantity * g_exchg_rt_fee_bl;					
					l_round_fee = 0.0;
            	CO_Round(h_ncharge_quantity, int_g_blccy_decimallen, &l_round_fee);
            	h_ncharge_quantity = l_round_fee;
					}
				}
				printf("\nh_ncharge_quantity:|%lf|\n",h_ncharge_quantity);
				printf("\n *** 2006 fee=%lf servcode=%ld", l_nfee, int_h_serv_code);
				if (((l_nfee > 0 ) || (int_h_serv_code == SETTALGEFEE))&&(int_h_serv_code != MUTUALFUND_TXN_FEE))
				{
					if((int_h_serv_code != TXNFEE)||((int_h_serv_code == TXNFEE)&&(strcmp(p_charge_basis,"PER TXN") != 0)))
					{
					printf("Inserting into IV_DEALFEE :%s %ld |%lf| %c %s",chr_l_actcode, int_h_serv_code,l_nfee, p_cons_ind, chr_p_param_code);
					if(APL_FAILURE == IV_Mod_NewIVTRANSFee(chr_l_actcode,int_h_serv_code,p_cons_ind,chr_p_param_code,l_nfee,chr_h_fee_str,h_schdl_fee,
							   h_ncharge_quantity,chr_g_bl_ccycode,h_nfee_quantity, p_mstclt_a,chr_h_group_ind,&int_retstat,l_debug_info_ptr))
		      			{	
						int_bl_err_level = 1;
						if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
						{
							CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
							CO_FreeErrLst(l_debug_info_ptr);
						}
						*int_p_retstat = int_retstat;

						APL_GOBACK_FAIL;
		  			}
					}
				}
				break;
			}

		}

		

		if((p_charge_type == 'S') && (p_fee_type == 'T'))
		{
			Alert("\n *** 2042 ***%s,%ld,%s,%lf,%lf,%s",chr_h_actcode,int_h_serv_code,chr_h_fee_str,h_fee_quantity, h_charge_quantity ,h_apl_frm_date);
			EXEC SQL DECLARE ts_cur CURSOR FOR
			SELECT SCHDL_FEE,FRM_CBASE,TOC_BASE,
					 FRM_FBASE,TOF_BASE,GROUP_ID,FEE_TYPE
			FROM IV_CLIENTFEE
			WHERE CLIENT   = :chr_h_actcode 
			AND SERVICE_CD   = :int_h_serv_code
			AND APL_FRM_DATE = :h_apl_frm_date   /* Added by Monica for ISKB_1737 */
			AND PROC_DATA_VAL   =  RTRIM(:chr_h_fee_str)
			AND FRM_FBASE < :h_fee_quantity 
			AND TOF_BASE   >= :h_fee_quantity
			AND FRM_CBASE < :h_charge_quantity;

			EXEC SQL OPEN ts_cur;

			if(sqlca.sqlcode < 0)
			{
				fprintf(fp,"Error in accessing table for client %s. Please contact support\n",chr_h_actcode);
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
				int_bl_err_level = 1;
			}

			IS_ANY_ORA_ERROR;

			int_is_ts_cur_open = 1;
			for( ; ; )
			{
				h_schdl_fee = 0.0;			
				h_frm_cbase = 0.0;			
				h_toc_base = 0.0;			
				h_frm_fbase = 0.0;			
				h_tof_base = 0.0;
				memset(chr_h_group_ind, APL_NULL_CHAR, IV_GRP_LEN);

				EXEC SQL FETCH ts_cur 
				INTO :h_schdl_fee:i_schdl_fee,
					  :h_frm_cbase:i_frm_cbase,
					  :h_toc_base:i_toc_base,
					  :h_frm_fbase:i_frm_fbase,
					  :h_tof_base:i_tof_base,
					  :chr_h_group_ind:i_group_id,
					  :l_fee_type:i_fee_type;
				Alert("h_schdl_fee |%lf|",h_schdl_fee);
			Alert("h_frm_cbase |%ld|",h_frm_cbase);
			Alert("h_toc_base |%ld|",h_toc_base);
			Alert("h_frm_fbase |%lf|",h_frm_fbase);
			Alert("h_tof_base |%lf|",h_tof_base);
			Alert("chr_h_group_ind |%s|",chr_h_group_ind);
			Alert("l_fee_type |%c|",l_fee_type);
				if ( sqlca.sqlcode < 0 )
				{
					*int_p_retstat = IV_CRITCAL_ERROR_IND;
				}

				IS_ANY_ORA_ERROR
			
				Alert("p_cons_ind :|%c|\n",p_cons_ind);

				if( (APL_ZERO_RESULT_SET) || (p_cons_ind == 'X'))
				{
					if(p_cons_ind == 'X')
					{
						int_fee_found = 1;
						strcpy(chr_p_str,chr_h_fee_str);
					}
					if(int_fee_cnt < 1)
					{
						if(p_cons_ind != 'X')
						{
							int_retstat = IV_SUCCESS;
							printf("\n 2099 chr_p_str |%s|\n",chr_p_str);
							if(APL_FAILURE == IV_Chk_Grp(chr_h_fee_str,chr_p_param_code,
							&chr_p_param_ind,chr_p_str, p_serv_code,
							chr_h_actcode,h_apl_frm_date,&int_retstat,l_debug_info_ptr))   /* Added apl_frm_date by monica for kotak ISKB_1737 */
							{
								fprintf(fp,"Error in accessing group for client %s and service %ld , Fee string %s",chr_h_actcode,int_h_serv_code,chr_h_fee_str);
								fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
								fflush(fp);
								int_bl_err_level = 1;
								if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
								{
									CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
									CO_FreeErrLst(l_debug_info_ptr);
								}

								*int_p_retstat = int_retstat;
								APL_GOBACK_FAIL;
							}
						}
						printf("\n 2119 |%s|", chr_p_str);
						if (strlen(chr_p_str) > 0 && p_cons_ind != 'X' )
						{
							int_retstat = IV_SUCCESS;
							if(APL_FAILURE == IV_Chk_GrpMember( chr_h_actcode,p_serv_code,h_apl_frm_date,chr_p_str,&int_l_grp_exists,&int_retstat,l_debug_info_ptr))   /* Added apl_frm_date by monica for kotak ISKB_1737 */
							{
								fprintf(fp,"Error in accessing table for client %s. Please contact support\n",chr_h_actcode);
								fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
								fflush(fp);
								int_bl_err_level = 1;
								*int_p_retstat = IV_CRITCAL_ERROR_IND;
							}

							if(int_l_grp_exists > 0)
							{
								//fprintf(fp,"Overlapping fees setup defined for %s for service h_code ; %d\n",chr_h_actcode,p_serv_code);Changes done for AIX Migration
								fprintf(fp,"Overlapping fees setup defined for %s for service h_code ; %ld\n",chr_h_actcode,p_serv_code);
								fflush(fp);
							}
						}
						Alert("\n 3909 |%s|", chr_p_str);
						if(strlen(chr_p_str) > 0)
						{
							int_fee_found = 1;
							strcpy(chr_h_group_ind,chr_p_param_ind);
							int_grp_cnt = 0;
							int_new_grp = 0;

							while(strlen((p_iv_data_struct_h+int_grp_cnt)->proc_data) > 0)
							{
						Alert("\n 3919 |%s|", (p_iv_data_struct_h+int_grp_cnt)->proc_data);

								if(strcmp((p_iv_data_struct_h+int_grp_cnt)->proc_data,chr_p_str) == 0 && (strcmp((p_iv_data_struct_h+int_grp_cnt)->Treps_flag,Treps_flag)==0 ))
								{
									int_new_grp=1;
									break;
								}
								++int_grp_cnt;
							}
						Alert("\n int_new_grp |%d|", int_new_grp);

							if(int_new_grp == 0)
							{
								memset((p_iv_data_struct_h+int_grp_cnt)->proc_data,'\0',100);
								strcpy((p_iv_data_struct_h+int_grp_cnt)->proc_data,chr_p_str);
								memset((p_iv_data_struct_h+int_grp_cnt)->param_flag,'\0',50);
								strcpy((p_iv_data_struct_h+int_grp_cnt)->param_flag,chr_p_param_ind);
								(p_iv_data_struct_h+int_grp_cnt)->chrg_quant = 0;
								(p_iv_data_struct_h+int_grp_cnt)->fees_qty = 0;

								if(int_grp_cnt < 49)
								{
									memset((p_iv_data_struct_h+int_grp_cnt+1)->proc_data,'\0',100);
									strcpy((p_iv_data_struct_h+int_grp_cnt+1)->proc_data,APL_NULL_STRING);
									memset((p_iv_data_struct_h+int_grp_cnt+1)->param_flag,'\0',50);
									strcpy((p_iv_data_struct_h+int_grp_cnt+1)->param_flag,APL_NULL_STRING);
									(p_iv_data_struct_h+int_grp_cnt+1)->chrg_quant = 0;
									(p_iv_data_struct_h+int_grp_cnt+1)->fees_qty = 0;
								}
							}

							/* Bageshri 18/06/2007 : HDFC UAT Fix for detailed custody charges - START*/
					
							if ((p_serv_code == CUSTODYFEE ) && (strcmp(chr_p_param_code,";")!=0))
							{
								int_retstat = IV_SUCCESS;

								printf("\n========================================================================");
								printf("\nchr_l_actcode |%s| chr_p_param_code |%s| chr_h_fee_str |%s| chr_h_group_ind |%s| p_charge_type |%c| h_schdl_fee |%lf|",chr_l_actcode,chr_p_param_code,chr_h_fee_str,chr_h_group_ind,p_charge_type,h_schdl_fee);

								if(APL_FAILURE == IV_Mod_SchFeeIVCUSTPRINT(chr_l_actcode,p_serv_code,h_apl_frm_date,chr_l_portfolio_eval,chr_p_param_code,chr_h_fee_str,chr_h_group_ind,p_charge_type,chr_h_actcode,nfeefacredit_indor,'N',&int_retstat,l_debug_info_ptr)) /*Added apl_frm_date by monica for  kotak ISKB_1737 */
								{
									fprintf(fp,"Error : Could not update custody charges details for client %s\n",chr_l_actcode);
																											
									fflush(fp);
									int_bl_err_level = 1;
									*int_p_retstat = IV_CRITCAL_ERROR_IND;
									if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
									{
										CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
										CO_FreeErrLst(l_debug_info_ptr);
									}
								}
							}

							/* Bageshri 18/06/2007 : HDFC UAT Fix for detailed custody charges - START*/
							
							if ((strcmp(p_fee_basis,"PORTFOLIO VALUE") == 0) || (strcmp(p_fee_basis,"COUNTERVALUE") == 0) || (strcmp(p_fee_basis, "COUNTERVALUE PER TXN") == 0 ))
         				{
           			   	 h_fee_quantity = h_fee_quantity / l_exch_txnfeeae_rate;
            				h_fee_quantity = h_fee_quantity / l_exch_bsrvfeeae_rate;
          				}

      					if ((strcmp(p_charge_basis,"PORTFOLIO VALUE") == 0) || (strcmp(p_charge_basis,"COUNTERVALUE") == 0) || (strcmp(p_fee_basis, "COUNTERVALUE PER TXN") == 0 ))
         				{
            				h_charge_quantity = h_charge_quantity / l_exch_txnfeeae_rate;
            				h_charge_quantity = h_charge_quantity / l_exch_bsrvfeeae_rate;
         				}

							(p_iv_data_struct_h+int_grp_cnt)->chrg_quant += h_charge_quantity;
							(p_iv_data_struct_h+int_grp_cnt)->fees_qty += h_fee_quantity;
							strcpy((p_iv_data_struct_h+int_grp_cnt)->Treps_flag, Treps_flag);
							Alert("param [%s],[%d]",(p_iv_data_struct_h+int_grp_cnt)->Treps_flag,p_serv_code);
							*p_charge = 0;
							strcpy(p_ret_param_ind, APL_NULL_STRING);
							strcpy(p_ret_param_ind, chr_p_param_ind);
							strcpy(chr_actcode,APL_NULL_STRING);
							break;
							
						}
						else
						{
							if(s == (char *)NULL)
								strcpy(chr_actcode, APL_NULL_STRING);
							else
								chr_actcode = strtok_r(NULL,";",&s);
							chr_basis_act = strtok_r(chr_basis_str,";",&p);
							strcpy(chr_l_basis_str,APL_NULL_STRING);
							while(chr_basis_act != (char *)NULL )
							{
								printf("\n in while \n");
								if(p == (char *)NULL)
									strcpy(chr_basis_act, APL_NULL_STRING);
								else
									chr_basis_act = strtok_r(NULL,";",&p);
								if (chr_basis_act == NULL) break; /* PJ */
								if(strlen(chr_basis_act) > 0)
								{
									strcat(chr_l_basis_str,chr_basis_act);
									strcat(chr_l_basis_str,";");
								}
							}
							strcpy(chr_basis_str,chr_l_basis_str);
							break;
						}
					}
					else
					{
						strcpy(chr_actcode,"\0");
						break;
					}
				}
				else
				{
					int_fee_found = 1;
					int_fee_cnt++;

					/* Bageshri 18/06/2007 : HDFC UAT Fix for detailed custody charges - START */

					if ((strcmp(p_charge_basis,"PER TXN") == 0) && (strcmp(p_fee_basis,"COUNTERVALUE PER TXN") == 0 ))
						chr_l_fee_type = 'P';	

					if ( chr_l_fee_type == 'P' ) 
					{
						int_retstat = IV_SUCCESS;

						if(APL_FAILURE ==  IV_Proc_CalcFeeInd(chr_l_fee_type,p_serv_code,&nfeefacredit_indor,&int_retstat,l_debug_info_ptr))
						{
							fprintf(fp,"Error : Could not calculate fee factor for service code %ld\n",int_h_serv_code);
																									
							fflush(fp);
							int_bl_err_level = 1;
							*int_p_retstat = IV_CRITCAL_ERROR_IND;
							if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
							{
								CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
								CO_FreeErrLst(l_debug_info_ptr);
							}
						}
					}	
					Alert(" @@@@@@@@@@@@@@@@@@@@ nfeefacredit_indor |%lf|",nfeefacredit_indor);

				if ((p_serv_code == CUSTODYFEE ) && (chr_l_nav_ind == 'N'))
					{
						int_retstat = IV_SUCCESS;

						Alert("\n========================================================================");
						Alert("\nchr_l_actcode |%s| chr_p_param_code |%s| chr_h_fee_str |%s| chr_h_group_ind |%s| p_charge_type |%c| h_schdl_fee |%lf| h_charge_quantity |%lf|",chr_l_actcode,chr_p_param_code,chr_h_fee_str,chr_h_group_ind,p_charge_type,h_schdl_fee,h_charge_quantity);

						if(APL_FAILURE == IV_Mod_SchFeeIVCUSTPRINT(chr_l_actcode,p_serv_code,h_apl_frm_date,chr_l_portfolio_eval,chr_p_param_code,chr_h_fee_str,chr_h_group_ind,p_charge_type,chr_h_actcode,nfeefacredit_indor,'Y',&int_retstat,l_debug_info_ptr))  /* Added apl_frm_date by monica for kotak ISKB_1737 */
						{
							fprintf(fp,"Error : Could not update custody charges details for client %s\n",chr_l_actcode);
																									
							fflush(fp);
							int_bl_err_level = 1;
							*int_p_retstat = IV_CRITCAL_ERROR_IND;
							if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
							{
								CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
								CO_FreeErrLst(l_debug_info_ptr);
							}
						}
					}

					/* Bageshri 18/06/2007 : HDFC UAT Fix for detailed custody charges - END */

					l_fee+=h_schdl_fee * MIN((h_charge_quantity - h_frm_cbase),(h_toc_base - h_frm_cbase));
					strcpy(p_ret_param_ind, APL_NULL_STRING);
					strcpy(p_ret_param_ind,chr_h_group_ind);
				
					h_ncharge_quantity = MIN((h_charge_quantity - h_frm_cbase),(h_toc_base - h_frm_cbase));
					h_nfee_quantity = h_fee_quantity;
					l_nfee = h_schdl_fee * MIN((h_charge_quantity - h_frm_cbase),(h_toc_base - h_frm_cbase));
					printf("l_nfee |%lf|\n",l_nfee);
				   l_nfee = l_nfee * nfeefacredit_indor ;
				   	printf("Cust Fee |%lf| l_nfee |%lf| h_ncharge_quantity |%lf| h_schdl_fee |%lf|\n",l_fee,l_nfee,h_ncharge_quantity,h_schdl_fee);

					if(strcmp(chr_h_actcode,chr_l_actcode) != 0)
					{
						l_exchg_rt = 1.0;
						
						if ( int_h_serv_code != ADM_TXN_FEE_IND )
           			 {
							if(strcmp( l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode) != 0) 
							{
								int_retstat = IV_SUCCESS;
								if(APL_FAILURE == IV_Rtv_ExchRate( l_iv_clientsetup_struct.fees_ccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,
															&l_exchg_rt,&int_retstat,l_debug_info_ptr)) 
								{
									fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode);                                      										   
									fflush(fp);
									*int_p_retstat = IV_CRITCAL_ERROR_IND;
									int_bl_err_level = 1;
									if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
									{
										CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
										CO_FreeErrLst(l_debug_info_ptr);
									}
								 }
							 }
						  }
						else if ( int_h_serv_code ==  ADM_TXN_FEE_IND )
            		{
							if (strcmp(l_iv_client_serv_basis_structa.dealadm_feeccy, chr_g_fee_ccycode) != 0)
               		{
                  		int_retstat = IV_SUCCESS;
                  		if(APL_FAILURE == IV_Rtv_ExchRate(l_iv_client_serv_basis_structa.dealadm_feeccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,&l_exchg_rt,&int_retstat,l_debug_info_ptr))
                  		{
                        	fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",l_iv_client_serv_basis_structa.dealadm_feeccy,chr_g_fee_ccycode);
                        	fflush(fp);
                        	int_bl_err_level = 1;
                        	*int_p_retstat = IV_CRITCAL_ERROR_IND;
                        	if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
                        	{
                           	CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                           	CO_FreeErrLst(l_debug_info_ptr);
                        	}
                  		}
                		}
             		}				
			printf("l_nfee 1 |%lf| h_schdl_fee |%lf|\n",l_nfee,h_schdl_fee);
						l_nfee = l_nfee * l_exchg_rt ;     
                  if (int_h_serv_code != CUSTODYFEE)
							h_schdl_fee = h_schdl_fee * l_exchg_rt;
			printf("l_nfee 2 |%lf| h_schdl_fee |%lf|\n",l_nfee,h_schdl_fee);

						fprintf(fp,"Warning : Fee not found for client %s for service %ld for %s. Using fees structure of client %s\n",chr_l_actcode,int_h_serv_code,chr_h_fee_str,chr_h_actcode);
						fflush(fp);
					}
					else
         		{
               	if ( int_h_serv_code ==  ADM_TXN_FEE_IND )
               	{
                  	if (strcmp(l_iv_client_serv_basis_structa.dealadm_feeccy, chr_g_fee_ccycode) != 0)
                  	{
                     	int_retstat = IV_SUCCESS;
                     	if(APL_FAILURE == IV_Rtv_ExchRate(l_iv_client_serv_basis_structa.dealadm_feeccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,&l_exchg_rt
,&int_retstat,l_debug_info_ptr))
                     	{
                        	fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",l_iv_client_serv_basis_structa.dealadm_feeccy,
chr_g_fee_ccycode);
                        	fflush(fp);
                        	int_bl_err_level = 1;
                        	*int_p_retstat = IV_CRITCAL_ERROR_IND;
                        	if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
                        	{
                           	CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                           	CO_FreeErrLst(l_debug_info_ptr);
                        	}
                     	}
                     	l_nfee = l_nfee * l_exchg_rt;
                     	fprintf(fp,"Warning : Fee not found for client %s for service %ld for %s.",chr_l_actcode, int_h_serv_code, chr_h_fee_str);
                     	fflush(fp);
                  	}

               	}
         		}

				

				
			printf("l_nfee 3 |%lf| h_schdl_fee |%lf|\n",l_nfee,h_schdl_fee);
         	
         	if ((strcmp(p_charge_basis,"COUNTERVALUE PER TXN") != 0) && (strcmp(p_fee_basis,"COUNTERVALUE PER TXN") != 0 ))
         	{
               l_round_fee = 0.0;
               CO_Round(l_nfee, int_g_ccy_decimallen, &l_round_fee);
               l_nfee = l_round_fee * g_exchg_rt_fee_bl;
					l_round_fee = 0.0;
               CO_Round(l_nfee, int_g_blccy_decimallen, &l_round_fee);
               l_nfee = l_round_fee;
			printf("l_nfee 4 |%lf| h_schdl_fee |%lf|\n",l_nfee,h_schdl_fee);
         	}
         	else
         	{
            	l_nfee = l_nfee * g_exchg_rt_fee_bl;
			printf("l_nfee 5 |%lf| h_schdl_fee |%lf|\n",l_nfee,h_schdl_fee);
         	}

				/*** vinay kalaskar ***/
				
				if(p_serv_code == TXNFEE)
				{
				/* Bageshri HB_IV_003 : multiple settlement -- START */

				if ((strcmp(p_charge_basis,"PER TXN") == 0) && (strcmp(p_fee_basis,"COUNTERVALUE PER TXN") == 0 ))
				{
                  l_round_fee = 0.0;
                  CO_Round(l_nfee, int_g_ccy_decimallen, &l_round_fee);
            		l_nfee = l_round_fee * g_exchg_rt_fee_bl;
						l_round_fee = 0.0;
						CO_Round(l_nfee, int_g_blccy_decimallen, &l_round_fee);
                  l_nfee = l_round_fee;
			printf("l_nfee 6 |%lf| h_schdl_fee |%lf|\n",l_nfee,h_schdl_fee);
/*Commented by siva.ganapathi for ISKB_2323*/
/*
				}
				else
				{
*/
					if((l_nfee > 0 )&&(l_min_fee > 0)&&(l_max_fee > 0))
					{
						if(l_nfee < l_min_fee)
							l_nfee=l_min_fee;
						else if(l_nfee > l_max_fee)
							l_nfee=l_max_fee;
					}

					l_nfee = l_nfee * g_exchg_rt_fee_bl;
			printf("l_nfee 7 |%lf| h_schdl_fee |%lf|\n",l_nfee,h_schdl_fee);
				}
			   *p_charge = l_nfee;
				
				}
				
				/***********************/
        	
           	printf("\n 2330 lnfee=%lf exch=%lf", l_nfee, g_exchg_rt_fee_bl); 
				if (int_h_serv_code != CUSTODYFEE)
				{
              h_schdl_fee = h_schdl_fee * g_exchg_rt_fee_bl;
				}
		 		if ((strcmp(p_fee_basis,"PORTFOLIO VALUE") == 0) || (strcmp(p_fee_basis,"COUNTERVALUE") == 0) || (strcmp(p_fee_basis, "COUNTERVALUE PER TXN") == 0 ))
				{
					h_nfee_quantity = h_nfee_quantity / l_exch_txnfeeae_rate;
					h_nfee_quantity = h_nfee_quantity / l_exch_bsrvfeeae_rate;
      			h_nfee_quantity = h_nfee_quantity * g_exchg_rt_fee_bl;
					l_round_fee = 0.0;
            	CO_Round(h_nfee_quantity, int_g_blccy_decimallen, &l_round_fee);
					h_nfee_quantity = l_round_fee;
			
			 	}

			if ((strcmp(p_charge_basis,"PORTFOLIO VALUE") == 0) || (strcmp(p_charge_basis,"COUNTERVALUE") == 0) || (strcmp(p_fee_basis, "COUNTERVALUE PER TXN") == 0 ))
				{	
					if(strcmp(p_charge_basis,"PER TXN") != 0 )
					{
					h_ncharge_quantity = h_ncharge_quantity / l_exch_txnfeeae_rate;
					h_ncharge_quantity = h_ncharge_quantity / l_exch_bsrvfeeae_rate;
       			h_ncharge_quantity = h_ncharge_quantity * g_exchg_rt_fee_bl;					
					l_round_fee = 0.0;
            	CO_Round(h_ncharge_quantity, int_g_blccy_decimallen, &l_round_fee);
            	h_ncharge_quantity = l_round_fee;
					}
				}
						if((int_h_serv_code == TXNFEE)&&(strcmp(p_charge_basis,"PER TXN") == 0) && (strcmp(p_fee_basis,"COUNTERVALUE PER TXN") == 0 ))
						{
							slab_cnt_no++;
							avg_schdl_fee = h_schdl_fee;
							tot_ncharge_quantity += h_ncharge_quantity;
							//tot_slab_chrgs = tot_slab_chrgs + (h_ncharge_quantity * h_schdl_fee);
							tot_slab_chrgs += h_ncharge_quantity * h_schdl_fee;
						}

				if(((l_nfee > 0 ) || (int_h_serv_code == SETTALGEFEE))&&(int_h_serv_code != MUTUALFUND_TXN_FEE))
				{
					if((int_h_serv_code != TXNFEE)||((int_h_serv_code == TXNFEE)&&(strcmp(p_charge_basis,"PER TXN") != 0)))
					{
					if(APL_FAILURE == IV_Mod_NewIVTRANSFee(chr_l_actcode,int_h_serv_code,p_cons_ind,chr_p_param_code,l_nfee,chr_h_fee_str,h_schdl_fee,
								   h_ncharge_quantity,chr_g_bl_ccycode,h_nfee_quantity, p_mstclt_a,chr_h_group_ind,&int_retstat,l_debug_info_ptr))
		   			{
							int_bl_err_level = 1;
							if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
							{
								CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
								CO_FreeErrLst(l_debug_info_ptr);
							}
							*int_p_retstat = int_retstat;

							APL_GOBACK_FAIL;
		  				}
						}
             }
				}
			}

			fees = l_fee * nfeefacredit_indor;
			*p_charge = fees;

			if(strcmp(chr_h_actcode,chr_l_actcode) != 0)
			{
				l_exchg_rt = 1.0;
				
				if ( int_h_serv_code != ADM_TXN_FEE_IND )
            {
					if(strcmp( l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode) != 0) 
					{
						int_retstat = IV_SUCCESS;
						if(APL_FAILURE == IV_Rtv_ExchRate( l_iv_clientsetup_struct.fees_ccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,
															&l_exchg_rt,&int_retstat,l_debug_info_ptr)) 
						{
							fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode);                                      										   
							fflush(fp);
							*int_p_retstat = IV_CRITCAL_ERROR_IND;
							int_bl_err_level = 1;
							if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
							{
								CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
								CO_FreeErrLst(l_debug_info_ptr);
							}
						}
					}
				}
				else if ( int_h_serv_code ==  ADM_TXN_FEE_IND )
            {
					if (strcmp(l_iv_client_serv_basis_structa.dealadm_feeccy, chr_g_fee_ccycode) != 0)
               {
                  int_retstat = IV_SUCCESS;
                  if(APL_FAILURE == IV_Rtv_ExchRate(l_iv_client_serv_basis_structa.dealadm_feeccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,&l_exchg_rt,&int_retstat,l_debug_info_ptr))
                  {
                        fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",l_iv_client_serv_basis_structa.dealadm_feeccy,chr_g_fee_ccycode);
                        fflush(fp);
                        int_bl_err_level = 1;
                        *int_p_retstat = IV_CRITCAL_ERROR_IND;
                        if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
                        {
                           CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                           CO_FreeErrLst(l_debug_info_ptr);
                        }
                  }
                }
             }			

				fees = fees * l_exchg_rt ;     
		 Alert("fees |%lf|",fees);
				*p_charge = fees;

				fprintf(fp,"Warning : Fee not found for client %s for service %ld for %s. Using fees structure of client %s\n",chr_l_actcode,int_h_serv_code,chr_h_fee_str,chr_h_actcode);
				fflush(fp);
			}
			else
         {
               if ( int_h_serv_code ==  ADM_TXN_FEE_IND )
               {
                  if (strcmp(l_iv_client_serv_basis_structa.dealadm_feeccy, chr_g_fee_ccycode) != 0)
                  {
                     int_retstat = IV_SUCCESS;
                     if(APL_FAILURE == IV_Rtv_ExchRate(l_iv_client_serv_basis_structa.dealadm_feeccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,&l_exchg_rt
,&int_retstat,l_debug_info_ptr))
                     {
                        fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",l_iv_client_serv_basis_structa.dealadm_feeccy,
chr_g_fee_ccycode);
                        fflush(fp);
                        int_bl_err_level = 1;
                        *int_p_retstat = IV_CRITCAL_ERROR_IND;
                        if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
                        {
                           CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                           CO_FreeErrLst(l_debug_info_ptr);
                        }
                     }
                     fees = fees * l_exchg_rt;
                     fprintf(fp,"Warning : Fee not found for client %s for service %ld for %s.",chr_l_actcode, int_h_serv_code, chr_h_fee_str);
                     fflush(fp);
                  }

               }
         }

			printf("\n2470 %s %s", p_charge_basis, p_fee_basis);

			
         
			 if ((strcmp(p_charge_basis,"COUNTERVALUE PER TXN") != 0) && (strcmp(p_fee_basis,"COUNTERVALUE PER TXN") != 0 ))
			 {
			       l_round_fee = 0.0;
			       CO_Round(fees, int_g_ccy_decimallen, &l_round_fee);
			       fees = l_round_fee * g_exchg_rt_fee_bl;
							l_round_fee = 0.0;
			       CO_Round(fees, int_g_blccy_decimallen, &l_round_fee);
			       fees = l_round_fee;
			 }
			 else
			 {
			    fees = fees * g_exchg_rt_fee_bl;
			 }
			 *p_charge = fees;
			
			if( int_is_ts_cur_open == 1)
			{
				EXEC SQL CLOSE ts_cur;
			}
			int_is_ts_cur_open = 0;

		}

		if(chr_actcode == (char *)NULL)	
		break;	
	}

	if(int_fee_found == 0)
	{/*modified by shruthi kumbla for ISKB_1737 START*/
		if(int_h_serv_code == PERLINE_SECURITY)
		{
			fprintf(fp,"Warning : Fee not found for client %s for service %ld for %s for charge qty |%lf|.\n",chr_l_actcode,int_h_serv_code,chr_h_fee_str,h_fee_quantity);
			
				EXEC SQL DELETE FROM IV_PLSECURITY  WHERE CLIENT= :chr_l_actcode AND CMP_CODE=:chr_h_fee_str and PRO_FIRST_BILLDATE=:chr_g_bl_upto_dt ;
			Alert("sqlca.sqlcode |%d|",sqlca.sqlcode);
			IS_ANY_ORA_ERROR
			
		
		}/*modified by shruthi kumbla for ISKB_1737 END*/
		else
		{
		fprintf(fp,"Error : Fee not found for client %s for service %ld for %s for charge qty |%lf|.\n",chr_l_actcode,int_h_serv_code,chr_h_fee_str,h_fee_quantity);
		fflush(fp);
		int_bl_err_level = 1;
		}
	}
	strcpy(chr_p_param_ind, chr_h_group_ind);

	
/* Bageshri HB_IV_003 */
		if(fees > 0)
		{
	printf("p_charge_basis |%s| p_charge_basis |%s|",p_charge_basis,p_charge_basis);

		if((int_h_serv_code == TXNFEE)&&(!strcmp(p_charge_basis,"PER TXN")) && (!strcmp(p_fee_basis,"COUNTERVALUE PER TXN")))
		{
	printf("chr_h_identiy_no |%s| chr_l_bill_dep |%s| l_multi_settle |%d|",chr_h_identiy_no,chr_l_bill_dep,l_multi_settle);

         	if ((strlen(chr_h_identiy_no))&&(!strcmp(chr_l_bill_dep,"ASD")) && (!strcmp(p_charge_basis,"PER TXN")) && (!strcmp(p_fee_basis,"COUNTERVALUE PER TXN")) && (l_multi_settle))
		{
			printf("calling fun IV_Proc_CalcCommAmt");

                     	if(APL_FAILURE == IV_Proc_CommAmt(chr_l_actcode, chr_h_identiy_no, &fees, l_min_fee,
				l_max_fee, &int_retstat,l_debug_info_ptr))
				{
					fprintf(fp,"Error : Error in calculating charges for multiple settlement with identiy no %s \n",chr_h_identiy_no);
					fflush(fp);
					int_bl_err_level = 1;
					*int_p_retstat = IV_CRITCAL_ERROR_IND;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
				}
		}
		else
		{
				/* Bageshri HB_IV_003 : multiple settlement -- END */
					printf("fees:|%lf|\nl_min_fee:|%lf|\nl_max_fee:|%lf|\n",fees,l_min_fee,l_max_fee);
					if((fees > 0 )&&(l_min_fee > 0)&&(l_max_fee > 0))
					{
						if(fees < l_min_fee)
							fees =l_min_fee;
						else if(fees > l_max_fee)
							fees =l_max_fee;
					}
		}
		         *p_charge = fees;
					if(slab_cnt_no >1)
			 			avg_schdl_fee = tot_slab_chrgs/tot_ncharge_quantity;
			

					if(APL_FAILURE == IV_Mod_NewIVTRANSFee(chr_l_actcode,int_h_serv_code,p_cons_ind,chr_p_param_code,fees,chr_h_fee_str,avg_schdl_fee,
								   p_charge_qty,chr_g_bl_ccycode,h_nfee_quantity, p_mstclt_a,p_ret_param_ind,&int_retstat,l_debug_info_ptr))
		   			{
							int_bl_err_level = 1;
							if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
							{
								CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
								CO_FreeErrLst(l_debug_info_ptr);
							}
							*int_p_retstat = int_retstat;

							APL_GOBACK_FAIL;
		  			}

		}
		}

/* Bageshri HB_IV_003 */

		
	if( ((fees > 0)  || (int_h_serv_code == SETTALGEFEE)) && (p_cons_ind != 'X') )
	{
		int_retstat = IV_SUCCESS;

		if ((strcmp(p_fee_basis,"PORTFOLIO VALUE") == 0) || (strcmp(p_fee_basis,"COUNTERVALUE") == 0) || (strcmp(p_fee_basis, "COUNTERVALUE PER TXN") == 0 ))
			{
				h_fee_quantity = h_fee_quantity / l_exch_txnfeeae_rate;
				h_fee_quantity = h_fee_quantity / l_exch_bsrvfeeae_rate;
      		h_fee_quantity = h_fee_quantity * g_exchg_rt_fee_bl;
				l_round_fee = 0.0;
            CO_Round(h_fee_quantity, int_g_blccy_decimallen, &l_round_fee);
				h_fee_quantity = l_round_fee;
			
			 }

		if ((strcmp(p_charge_basis,"PORTFOLIO VALUE") == 0) || (strcmp(p_charge_basis,"COUNTERVALUE") == 0) || (strcmp(p_fee_basis, "COUNTERVALUE PER TXN") == 0 ))
			{
				if(strcmp(p_charge_basis,"PER TXN") != 0 )/* vinay */
				{
				h_charge_quantity = h_charge_quantity / l_exch_txnfeeae_rate;
				h_charge_quantity = h_charge_quantity / l_exch_bsrvfeeae_rate;
       		h_charge_quantity = h_charge_quantity * g_exchg_rt_fee_bl;					
				l_round_fee = 0.0;
            CO_Round(h_charge_quantity, int_g_blccy_decimallen, &l_round_fee);
            h_charge_quantity = l_round_fee;
			   }

			}

	#ifdef BILLDEBUG 

      fprintf(TestRep, "\nInserting in to BTRANSAC: \n");
		fprintf(TestRep, "Account: %s, Serv_code: %d\n", chr_l_actcode, int_h_serv_code);
		fprintf(TestRep, "Cons_Ind: %c, Param_code: %s\n", p_cons_ind,chr_p_param_code);
      fprintf(TestRep, "fee_str: %s, Fee: %lf,Charge_qty: %lf,Fee_qty: %lf\n",chr_h_fee_str,fees,h_charge_quantity,h_fee_quantity); 
      fprintf(TestRep, "Master Acc: %s,Currency: %s,Group Ind: %s",p_mstclt_a,chr_g_bl_ccycode,chr_h_group_ind);
		fflush(TestRep);

	#endif 

		int_h_count =0;

	printf("int_h_serv_code:|%ld||%s||%s|",int_h_serv_code,p_charge_basis,p_fee_basis);
	
	if ((int_h_serv_code != ADM_TXN_FEE_IND) || ((int_h_serv_code == ADM_TXN_FEE_IND) && (!strcmp(p_charge_basis,"COUNTERVALUE")) && (!strcmp(p_fee_basis,"COUNTERVALUE")) ))
	{
	
	printf("int_h_serv_code:|%ld|",int_h_serv_code);
	
	if (((int_h_serv_code != TXNFEE)&&(int_h_serv_code != MUTUALFUND_TXN_FEE)) || ((int_h_serv_code  == TXNFEE) && (strcmp(p_charge_basis,"PER TXN")) && (strcmp(p_fee_basis,"COUNTERVALUE PER TXN")) ) )
	{
		
		printf("Putting into iv_deal for service :|%ld||%c| ",int_h_serv_code,p_cons_ind);
	      if((int_h_serv_code == CASH_DIV_FEE) && (p_cons_ind == 'C')) 
	      {
		   strcpy(chr_h_fee_str,chr_temp_fee_str);
	      }
		
		
		if(APL_SUCCESS == val_perTxnIV_DEAL(chr_l_actcode,int_h_serv_code,p_cons_ind,chr_h_fee_str,
												chr_g_bl_upto_dt,&count,&int_retstat,l_debug_info_ptr))
		{
				count_no = count;
				printf("count_no :|%d|",count_no);
		}
						
		if(count_no)
		{
				if(APL_SUCCESS == val_perTxnIV_DEAL_UPDATE(chr_l_actcode,int_h_serv_code,p_cons_ind,
								chr_p_param_code,chr_h_fee_str,fees,h_charge_quantity,chr_g_bl_ccycode,
								h_fee_quantity,p_mstclt_a,p_ret_param_ind,&int_retstat,l_debug_info_ptr))
								
				printf("Successfully updated into IV_DEAL");
		}
		else
		{
			printf("Entering into IV_Mod_NewIVTRANSAC :|%s||%ld||%lf||%lf|",chr_l_actcode,int_h_serv_code,fees,h_charge_quantity);
			if(APL_FAILURE == IV_Mod_NewIVTRANSAC(chr_l_actcode,int_h_serv_code,p_cons_ind,chr_p_param_code,
									chr_h_fee_str,fees,h_charge_quantity,chr_g_bl_ccycode,h_fee_quantity,
									p_mstclt_a,p_ret_param_ind,&int_retstat,l_debug_info_ptr))
			{
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;

				APL_GOBACK_FAIL;
			}
		}
  	}
	}
	}

	if(*int_p_retstat == IV_CRITCAL_ERROR_IND)
	{
		APL_GOBACK_FAIL;
	}
	else
	{
		*int_p_retstat = IV_SUCCESS;
		APL_GOBACK_SUCCESS;
	}

RETURN_SUCCESS:
	printf("\n\n ** End of calcfee ****\n\n");
	if( int_is_ts_cur_open == 1)
	{
		exec sql close ts_cur;
	}
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting Successfully Out Of IV_Proc_CalcFee\n",
			 NULL , NULL);
	}
	return APL_SUCCESS;

RETURN_FAILURE:
	printf("\n\n ** End of calcfee ****\n\n");
	if( int_is_ts_cur_open == 1)
	{
		exec sql close ts_cur;
	}
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting Unsuccessfully Out Of IV_Proc_CalcFee\n",
			 NULL , NULL);
	}
	return APL_FAILURE;
}



int IV_Proc_GenTxnCharges(char *chr_p_client, char *p_cltt_str,char *p_mstclt_a,int *int_p_retstat,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	printf("\n\nInside IV_Proc_GenTxnCharges\n\n\n");
	EXEC SQL BEGIN DECLARE SECTION;

	char chr_h_param_code[IV_PARAM_LEN],h_instr_code[APL_INSTRUMENTCODE_LEN];
	char h_prodateype[IV_PRODTYPE_LEN],h_loccode[APL_LOCNCODE_LENGTH];
	char chr_h_fee_str[IV_PARAM_LEN],chr_h_instr_ccy[APL_CCYCODE_LEN];
	char chr_mst_fee_ccycode[APL_CCYCODE_LEN],chr_mst_bl_ccycode[APL_CCYCODE_LEN];
	char chr_h_charge_basis[IV_STRING_LEN],chr_h_fee_basis[IV_STRING_LEN];
	char h_dl_client[APL_CLIENT_LENGTH],h_ora_rowid[APL_ROWID_LEN];
	
	char h_dealcd[IV_DLCD_LEN],h_dealclass[IV_DLTYPE_LEN],chr_h_hisflg='L';
   int  int_h_sfe_param = 0;   
   int  l_exstind= 0;   /* Rahul Treps Charges changes */
	char h_reapired_ind,chr_h_bill_dt[APL_DATE_LEN],chr_h_txn_stmt[2500];
	char chr_h_bl_proc_dt[APL_DATE_LEN], chr_h_bl_upto_dt[APL_DATE_LEN];
	char chr_proc_month[APL_CCYCODE_LEN],*chr_client_month; /* HDFCIV_004 */
	double	dbl_txnminfee=0.0,dbl_txnmaxfee=0.0, dbl_mst_txnminfee=0.0, dbl_mst_txnmaxfee=0.0; /* PJ */
	char chr_h_txnsrvind[50], chr_h_srv_ind[50], chr_h_txnsrvconsind[50];
	double dbl_h_late_days=0, no_of_trades = 0;
   int l_charge_qty=0;/* vinay */
	int l_mst_charge_qty=0;/* vinay */
	char h_identiy_no[17];/* vinay */
	char chr_l_treps_ind_previos[2];
	char chr_l_treps_ind [2];
	char h_param_ind[17],chr_h_instr_dt[APL_DATE_LEN];/* Bageshri HB_IV_003 */
	int l_chk_cln_flag=0,l_chk_adm_flag=0,l_chk_mf_flag=0;/* vinay */
	int int_fclass_exist = 0; /* Bageshri */
	char chr_l_b_basis[4]; 				/* Bageshri HB_IV_001 */
	char chr_l_bill_dep[4]; 				/* Bageshri HB_IV_001 */
	/* int l_multi_settle = 0;				 Bageshri HB_IV_003  OPT:AIX */
	short l_multi_settle = 0;
        int ret_val = 0; 
	
	char h_verfied_with[IV_VERWITH_LEN]; 
	short i_verfied_with = 0;
        double NoViberFrees = 0.0 ; 
	double NoViberVPs   = 0.0 ; 
        
	int int_l_err_flg = IV_SUCCESS; 
	int   int_h_txndecimallen  =0;
	int int_h_mst_fee_decimallen=0, int_h_mst_bl_decimallen=0;
	int int_forarr= 0;
	int int_grp_cnt =0;
	int int_new_grp = 0;
	char chr_h_sel_stmt[4000];
	char chr_txn_stmt_treps[1500];
	double dbl_h_portval=0.0, h_amt=0.0, dbl_h_countervalue=0.0, dbl_h_mstcountervalue=0.0;
	double h_amend_count=0,h_number_a=0,h_number_b=0;
	short i_parameter_cd=0,i_dealcd=0,i_prodateype=0,i_loccode=0,i_instr_code=0,i_dealclass=0,i_bill_date=0;
	short i_reapired_ind=0,i_late_days=0,i_amend_count=0,i_number_a=0,i_number_b=0,i_ora_rowid=0,i_amt=0;
	short i_instr_ccy = 0;
	short l_cond_exists = 0;	/*Variable declaration for IF_COND_NOT_EXISTS HDFCIV_004	Rohit*/
	short i_identiy_no = 0,i_instr_dt=0;/* vinay */
	int h_gen_flag=0,l_gen_flag=0;/* vinay */

	double nmandchrgqty=0;/*shailesh 11-02-08 For CA charges(KOTAK requirement) */
	double nvoluchrgqty=0;
	EXEC SQL VAR h_dealclass IS STRING;
	EXEC SQL VAR chr_h_bill_dt IS STRING;
	EXEC SQL VAR chr_h_bl_upto_dt IS STRING;
	EXEC SQL VAR chr_h_charge_basis  	IS STRING;
	EXEC SQL VAR chr_h_fee_basis  	IS STRING;
	EXEC SQL VAR h_dl_client  	IS STRING;
	EXEC SQL VAR chr_h_param_code  	IS STRING;
	EXEC SQL VAR h_instr_code 		IS STRING;
	EXEC SQL VAR h_prodateype 	IS STRING;
	EXEC SQL VAR h_loccode 	IS STRING;
	EXEC SQL VAR chr_h_fee_str  	IS STRING;
	EXEC SQL VAR chr_h_txn_stmt 	IS STRING;
	EXEC SQL VAR h_ora_rowid  		IS STRING;
	EXEC SQL VAR chr_h_bl_proc_dt 	IS STRING;
	EXEC SQL VAR h_verfied_with 		IS STRING;
	EXEC SQL VAR chr_proc_month 		IS STRING;
	EXEC SQL VAR chr_txn_stmt_treps 	IS STRING;
	EXEC SQL VAR h_identiy_no 		IS STRING;/* vinay */
	EXEC SQL VAR chr_h_instr_dt		IS STRING;/* Bageshri HB_IV_003 */
	struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	int int_fetch_cnt=0,int_i_cnt=0,int_repairfeeexists=1,int_amendfeeexists=1,int_delfeeexists=1;
        
   int int_viberfreefeeexists  = 1,int_vibervpfeeexists = 1,int_vibertxnfeeexists = 1;
        
	
	int int_manualtrdexists=1;
	double nManualTrd = 0;
	
	char z[IV_PARAM_LEN],chr_l_prodtype[IV_PRODTYPE_LEN];
	char chr_l_locncode_c[APL_LOCNCODE_LENGTH],s[IV_PARAM_LEN];
	char proc_data[IV_PARAM_LEN],chr_prev_param_str[IV_PARAM_LEN];
	char chr_acct_str[IV_CLT_LEN],chr_l_instrflg = 'N',chr_l_buf[BUFFER_LEN];
	char chr_l_param_str[IV_PARAM_LEN],chr_l_param_code[IV_PARAM_LEN];
	char chr_mstacctstr[IV_CLT_LEN],chr_late_days[3],chr_l_adm_param_code[IV_PARAM_LEN];
	double nNoAmendments = 0, nNoDeletions = 0, nIPOtrd = 0, nVPCAtrd = 0;
	
	double PutTradeCnt=0.0,CallTradeCnt=0.0;
	double PartPutChrg=0.0,PartCallChrg=0.0,PartPtcChrg=0.0,PartRedemChrg=0.0;
	
       double PutCallTradeCnt=0.0; //SP --25-07-2007
	/*shailesh 06-02-2008 The Putcalltrade related functions are commented below*/

	double nNoBucketTxn = 0;	/* No of bucket Transaction HDFCIV_004 Rohit */
	double n_no_trades = 0, nreapired_ind = 0, nLateTxn = 0;
	double No_MutualFund = 0; /* No of MutualFund Transactions ** vinay kalaskar **/	
   double  nNoViberFrees = 0.0, nNoViberVPs = 0.0;
	  
	
	char h_entry;     
	double srv_charge=0.0,tot_txn_chg=0.0,tot_adm_txn_ins=0.0,tot_adm_txn_chg=0.0,tpval=0.0,tot_credit_indr=0.0,tot_adm_charge_quantity=0.0,tot_adm_fee_quantity=0.0;
	double tot_adm_cons_charge_quantity=0.0, tot_adm_cons_fee_quantity=0.0, tot_adm_txn_cons_ins=0.0, tot_adm_txn_cons_chg=0.0;
	double l_minimumfee_adj=0.0,l_maximum_fee_adj=0.0,adm_chg_quantity=0.0;
	double l_nil_fees=0.0,l_minimumfee=0.0,l_maximum_fee=0.0,l_adm_nil_fees=0.0,l_adm_minimumfee=0.0,adm_fee_quantity=0.0 ;
	double l_adm_maximum_fee=0.0,l_exchg_rt=1.0,l_subbl_mstbl_rt = 1.0;
	double h_exchg_rt_mstfee_bl=1.0; 
        double l_round_val = 0.0; 
	int int_ind_over=0,int_retstat=0, int_firstfound = 0, int_l_free_trcode = 0;
	int count = 0,count_no = 0;/*vinay*/
	int int_is_tpval_cur_open = 0,int_is_trcnt_cur_open = 0;
	char chr_l_charge_type,chr_l_fee_type,*chr_h_actcode = NULL,*k,chr_txn_stmt1[1600];
	char chr_l_where_stmt[500],chr_l_charge_basis[IV_STRING_LEN],chr_l_fee_basis[IV_STRING_LEN], chr_where_stmt[500];
	char chr_l_adm_charge_basis[IV_STRING_LEN],chr_l_adm_fee_basis[IV_STRING_LEN];
	char *chr_l_param_dep = NULL,*chr_tdep,chr_prev_where_stmt[500], *chr_newtdep;
	char chr_l_adm_charge_type,chr_l_adm_fee_type, *int_pos = NULL;
	IV_DATA_STRUCT_H l_iv_data_struct_h_dlgrp[50];
	IV_DATA_STRUCT_H l_iv_data_struct_h_dladmgrp[50];
	IV_DEAL_DATA_STRUCT_H l_iv_deal_data_struct_h_dladmgrp[50];
	IV_DATA_STRUCT_H l_iv_data_struct_h_dladmgrpcon[50];
	IV_DEAL_DATA_STRUCT_H l_iv_deal_data_struct_h_dladmgrpcon[50];
	IV_CLIENTPARAM_STRUCT_H l_iv_clientparam_struct_hb;
	IV_CLIENT_SERV_BASIS_STRUCT l_iv_client_serv_basis_structa;
	IV_CLIENTSETUP_STRUCT l_iv_clientsetup_struct;
   double nNo578Sent =0;
   double nNo54BSent =0;  
	
	char l_clt_gen_flag[2] = APL_NULL_STRING;/* Added by siva.ganapaghi for ISKB_2470 on 07-Dec-2010 */

	sqlca.sqlcode = 0;
 
 k = (char *) calloc(IV_PARAM_LEN,sizeof(char));
 chr_newtdep = (char *) calloc(IV_PARAM_LEN,sizeof(char));
 chr_tdep = (char *) calloc(IV_PARAM_LEN,sizeof(char));
 chr_client_month=(char *)calloc(16, sizeof(char));

	memset(h_dealclass,APL_NULL_CHAR,IV_DLTYPE_LEN);
	memset(l_iv_data_struct_h_dlgrp[0].proc_data,APL_NULL_CHAR,100);
	memset(l_iv_data_struct_h_dladmgrp[0].proc_data,APL_NULL_CHAR,100);
	memset(l_iv_deal_data_struct_h_dladmgrp[0].proc_data,APL_NULL_CHAR,100);
	memset(chr_acct_str,APL_NULL_CHAR,IV_CLT_LEN);
	memset(chr_mstacctstr,APL_NULL_CHAR,IV_CLT_LEN);
	memset(chr_l_charge_basis,APL_NULL_CHAR,IV_STRING_LEN);
	memset(chr_l_fee_basis,APL_NULL_CHAR,IV_STRING_LEN);
	memset(chr_l_param_str,APL_NULL_CHAR,IV_PARAM_LEN);
	memset(chr_l_param_code,APL_NULL_CHAR,IV_PARAM_LEN);
	memset(chr_l_prodtype,APL_NULL_CHAR,IV_PRODTYPE_LEN);
	memset(chr_l_locncode_c,APL_NULL_CHAR,APL_LOCNCODE_LENGTH);
	memset(chr_h_bill_dt,APL_NULL_CHAR,APL_DATE_LEN);
	memset(chr_h_bl_upto_dt,APL_NULL_CHAR,APL_DATE_LEN);
	memset(chr_h_bl_proc_dt,APL_NULL_CHAR,APL_DATE_LEN);
	memset(chr_txn_stmt1,APL_NULL_CHAR,1600);
	memset(chr_h_txn_stmt, APL_NULL_CHAR, 2500); 
	memset(chr_late_days,APL_NULL_CHAR,3);
	memset(chr_l_where_stmt,APL_NULL_CHAR,500);
	memset(chr_where_stmt,APL_NULL_CHAR,500);
	memset(chr_prev_where_stmt,APL_NULL_CHAR,500);
	memset(h_identiy_no,APL_NULL_CHAR,17);/*vinay*/
	memset(h_param_ind,APL_NULL_CHAR,17);/* Bageshri HB_IV_003 */
	memset(chr_l_treps_ind_previos,APL_NULL_CHAR,2);/* RAHUL IS CHANGED */
	memset(chr_h_instr_dt,APL_NULL_CHAR,APL_DATE_LEN);

	memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
	memset(chr_h_sel_stmt,APL_NULL_CHAR,4000);
	memset(chr_prev_param_str,APL_NULL_CHAR,IV_PARAM_LEN);
	memset(proc_data,APL_NULL_CHAR,IV_PARAM_LEN);
	memset(chr_l_adm_param_code,APL_NULL_CHAR,IV_PARAM_LEN);
	
	memset(chr_l_adm_charge_basis,APL_NULL_CHAR,IV_STRING_LEN);
	memset(chr_l_adm_fee_basis,APL_NULL_CHAR,IV_STRING_LEN);
	memset(z,APL_NULL_CHAR,IV_PARAM_LEN);
	memset(s,APL_NULL_CHAR,IV_PARAM_LEN);
	memset(chr_txn_stmt_treps,APL_NULL_CHAR,1500);
	
   memset(chr_h_srv_ind,APL_NULL_CHAR,51);
   memset(chr_h_txnsrvind,APL_NULL_CHAR,51);
   memset(chr_mst_fee_ccycode,APL_NULL_CHAR,APL_CCYCODE_LEN);
   memset(chr_mst_bl_ccycode,APL_NULL_CHAR,APL_CCYCODE_LEN);
	memset(chr_proc_month,APL_NULL_CHAR,APL_CCYCODE_LEN); /* HDFCIV_004 */
	memset(&l_iv_clientsetup_struct, NULL, sizeof(IV_CLIENTSETUP_STRUCT));
	memset(&l_iv_clientparam_struct_hb, NULL, sizeof(IV_CLIENTPARAM_STRUCT_H));
	memset(&l_iv_client_serv_basis_structa, NULL, sizeof(IV_CLIENT_SERV_BASIS_STRUCT));
	memset(&l_iv_deal_data_struct_h_dladmgrp, NULL, sizeof(IV_DEAL_DATA_STRUCT_H));
	memset(&l_iv_data_struct_h_dladmgrpcon, NULL, sizeof(IV_DATA_STRUCT_H));
	memset(&l_iv_deal_data_struct_h_dladmgrpcon, NULL, sizeof(IV_DEAL_DATA_STRUCT_H));
	memset(chr_l_b_basis, APL_NULL_CHAR, 4); /* Bageshri HB_IV_001 */
	memset(chr_l_bill_dep, APL_NULL_CHAR, 4); /* Bageshri HB_IV_001 */

	/* PJ Calloc needed for actcode */
	chr_h_actcode =  (char *)calloc(APL_CLIENT_LENGTH,sizeof(char));
	APL_MALLOC_FAIL(chr_h_actcode);
	memset(chr_h_actcode,NULL,sizeof(char));
	
	memset(l_clt_gen_flag,APL_NULL_CHAR,2);/*Added by siva.ganapathi for ISKB_2470 on 07-Dec-2010*/
	
	*int_p_retstat = IV_SUCCESS;
	APL_IF_DEBUG
	{
  		CO_ProcMonitor(TechRep,"Generating Transaction Charges for client ",NULL,NULL);
  		memset(chr_l_buf,NULL,BUFFER_LEN);
  		sprintf(chr_l_buf," %s",chr_p_client);
  		CO_ProcMonitor(TechRep,chr_l_buf,NULL,NULL);
	}

	strcpy(h_dl_client,chr_p_client);
	strcpy(chr_h_bl_proc_dt,chr_g_bl_proc_dt);
	strcpy(chr_h_bl_upto_dt,chr_g_bl_upto_dt);
	strcpy(chr_h_bl_upto_dt,strtok_r(chr_h_bl_upto_dt," ",&int_pos));
	strcat(chr_h_bl_upto_dt," 23:59:59");

	strcpy(chr_acct_str,p_cltt_str);
	strcpy(chr_l_adm_param_code," ");

	chr_h_actcode = strtok_r(chr_acct_str,";",&k);
	/*Commented by Monica for resequencing the function call for KOTAK ISKB_1737 starts */ 
  /*  printf("chr_h_actcode |%s|",chr_h_actcode);
	while(strlen(chr_h_actcode) != 0)
	{
		memset(&l_iv_clientparam_struct_hb, NULL, sizeof(IV_CLIENTPARAM_STRUCT_H));
		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Rtv_IVCUSTPARAM(chr_h_actcode,TXNFEE,&l_iv_clientparam_struct_hb,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat != IV_CRITCAL_ERROR_IND)
			{
				chr_h_actcode = strtok_r(NULL,";",&k);
				if (chr_h_actcode == NULL) break; 
			}
			else
			{
				fprintf(fp,"Error : Service dependencies not defined for client %s\n",h_dl_client);
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}

				APL_GOBACK_FAIL;
			}
		}
		else
			break;
	}
	strcpy(chr_h_param_code,l_iv_clientparam_struct_hb.parameter_cd);
	strcpy(chr_l_param_code,chr_h_param_code);
	
	printf("chr_h_param_code|%s|parameter_cd |%s|", chr_h_param_code, l_iv_clientparam_struct_hb.parameter_cd);
	printf("chr_h_actcode:|%s|",chr_h_actcode);   */
	
	/* Commented by Monica for kotak ISKB_1737 ends */
	
	/* HB_IV_001 Bageshri to get billing details of client itself, always */
	/*if((strlen(chr_h_actcode) != 0)&&(strlen(chr_h_actcode) != NULL))
	{
	 HDFCIV_004 PJ get client setup value if its bill to self 
		if(APL_FAILURE == IV_Rtv_IVCUSTSETUP(chr_h_actcode,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr))*/

		if(APL_FAILURE == IV_Rtv_IVCUSTSETUP(h_dl_client,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error : Account %s  not found in billing system\n",h_dl_client);
				fflush(fp);
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				APL_GOBACK_FAIL;
			}
		}
	
	strcpy(chr_client_month,l_iv_clientsetup_struct.ann_fee_month);
	strcat(chr_client_month, APL_NULL_STRING);
	dbl_txnminfee = l_iv_clientsetup_struct.txnminfee;
	dbl_txnmaxfee = l_iv_clientsetup_struct.txnmaxfee;

	/* Bageshri HB_IV_001  START */
	printf("cln txn basis from table = |%s|",l_iv_clientsetup_struct.b_basis);
	strcpy(chr_l_b_basis, l_iv_clientsetup_struct.b_basis);
	//printf("cln txn basis = |%s| with length |%d|",chr_l_b_basis,strlen(chr_l_b_basis));Changes done for AIX Migration
	printf("cln txn basis = |%s| with length |%d|",chr_l_b_basis,(int)strlen(chr_l_b_basis));
	if(strcmp(chr_l_b_basis," "))
		strcpy(chr_l_bill_dep, chr_l_b_basis);
	else
		strcpy(chr_l_bill_dep, chr_g_bill_dep);

	printf(" txn basis = |%s|",chr_l_bill_dep);
	/* Bageshri HB_IV_001  END */

	/*vinay*/

	l_exchg_rt=1.0;	
	printf("chr_g_fee_ccycode:|%s||%s|",chr_g_fee_ccycode, l_iv_clientsetup_struct.b_ccycd);
         int_retstat = IV_SUCCESS;
         if(APL_FAILURE == IV_Rtv_ExchRate(chr_g_fee_ccycode, l_iv_clientsetup_struct.b_ccycd,chr_g_bl_upto_dt,&l_exchg_rt,&int_retstat,l_debug_info_ptr))
         {
            fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode);
            fflush(fp);
            int_bl_err_level = 1;
            *int_p_retstat = IV_CRITCAL_ERROR_IND;
            if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
            {
               CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
               CO_FreeErrLst(l_debug_info_ptr);
	}
         }
			

				 CO_Round(dbl_txnminfee * l_exchg_rt, int_g_ccy_decimallen, &dbl_txnminfee);
				 CO_Round(dbl_txnmaxfee * l_exchg_rt, int_g_ccy_decimallen, &dbl_txnmaxfee);
		
				 printf("dbl_txnminfee:|%lf|dbl_txnmaxfee:|%lf|",dbl_txnminfee,dbl_txnmaxfee);

	/* vinay */
	/*}*/
	
	printf("chr_g_bl_gen:|%c|\n",chr_g_bl_gen);
	if(chr_g_bl_gen == 'M')
	{
		strcpy(chr_mstacctstr,p_mstclt_a);
		strcat(chr_mstacctstr,";");
		if(APL_FAILURE == IV_Rtv_IVCUSTSETUP(p_mstclt_a,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error : Account %s  not found in billing system\n",p_mstclt_a);
				fflush(fp);
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				APL_GOBACK_FAIL;
			}
		}
		/* PJ */
	dbl_mst_txnminfee = l_iv_clientsetup_struct.txnminfee;
	dbl_mst_txnmaxfee = l_iv_clientsetup_struct.txnmaxfee;

	/*vinay*/
	
		l_exchg_rt=1.0;	
		printf("chr_g_fee_ccycode:|%s||%s|",chr_g_fee_ccycode, l_iv_clientsetup_struct.b_ccycd);
         int_retstat = IV_SUCCESS;
         if(APL_FAILURE == IV_Rtv_ExchRate(chr_g_fee_ccycode, l_iv_clientsetup_struct.b_ccycd,chr_g_bl_upto_dt,&l_exchg_rt,&int_retstat,l_debug_info_ptr))
         {
            fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode);
            fflush(fp);
            int_bl_err_level = 1;
            *int_p_retstat = IV_CRITCAL_ERROR_IND;
            if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
            {
               CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
               CO_FreeErrLst(l_debug_info_ptr);
            }
         }
			

				 CO_Round(dbl_mst_txnminfee * l_exchg_rt, int_g_ccy_decimallen, &dbl_mst_txnminfee);
				 CO_Round(dbl_mst_txnmaxfee * l_exchg_rt, int_g_ccy_decimallen, &dbl_mst_txnmaxfee);
			
				 /*********/


	strcat(chr_mstacctstr,l_iv_clientsetup_struct.default_feeclt);
		strcat(chr_mstacctstr,";");
		strcat(chr_mstacctstr,chr_g_cb_code);
		strcat(chr_mstacctstr,";");
		strcat(chr_mstacctstr,APL_NULL_STRING);

		
		strcpy(chr_mst_fee_ccycode,APL_NULL_STRING);
		strcpy(chr_mst_fee_ccycode,l_iv_clientsetup_struct.fees_ccy);
		strcpy(chr_mst_bl_ccycode,APL_NULL_STRING);
      strcpy(chr_mst_bl_ccycode,l_iv_clientsetup_struct.b_ccycd);


      if ( APL_FAILURE == CR_Rtv_CCYFldVal(chr_mst_fee_ccycode,"decimallen",&int_h_mst_fee_decimallen,l_debug_info_ptr))
      {
         fprintf(fp,"Error : Could not fetch decimal length for currency %s\n", chr_mst_fee_ccycode);
         fflush(fp);
         int_bl_err_level = 1;
         *int_p_retstat = int_retstat;
         if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
         {
            CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
            CO_FreeErrLst(l_debug_info_ptr);
         }
      }

		
		h_exchg_rt_mstfee_bl = 1.0;
      if (strcmp(chr_mst_bl_ccycode, chr_mst_fee_ccycode) != 0)
      {
         int_retstat = IV_SUCCESS;
         if(APL_FAILURE == IV_Rtv_ExchRate(chr_mst_fee_ccycode,chr_mst_bl_ccycode,chr_g_bl_upto_dt,&h_exchg_rt_mstfee_bl, &int_retstat,l_debug_info_ptr))
         {
            fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",chr_mst_fee_ccycode,chr_mst_bl_ccycode);
            fflush(fp);
            int_bl_err_level = 1;
            *int_p_retstat = int_retstat;
         }
       }

		
      if ( APL_FAILURE == CR_Rtv_CCYFldVal(chr_mst_bl_ccycode,"decimallen",&int_h_mst_bl_decimallen,l_debug_info_ptr))
      {
         fprintf(fp,"Error : Could not fetch decimal length for currency %s\n", chr_mst_bl_ccycode);
         fflush(fp);
         int_bl_err_level = 1;
         *int_p_retstat = int_retstat;
         if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
         {
            CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
            CO_FreeErrLst(l_debug_info_ptr);
         }
      }

		

		l_subbl_mstbl_rt = 1.0;
		if (strcmp(chr_mst_bl_ccycode, chr_g_bl_ccycode) != 0)
      {
         int_retstat = IV_SUCCESS;
         if(APL_FAILURE == IV_Rtv_ExchRate(chr_g_bl_ccycode,chr_mst_bl_ccycode,chr_g_bl_upto_dt,&l_subbl_mstbl_rt, &int_retstat,l_debug_info_ptr))
         {
            fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",chr_g_bl_ccycode,chr_mst_bl_ccycode);
            fflush(fp);
            int_bl_err_level = 1;
            *int_p_retstat = int_retstat;
         }
       }

		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Rtv_GetServBasis( chr_mstacctstr,TXNFEE,&l_iv_client_serv_basis_structa,&int_retstat,l_debug_info_ptr))
		{
			fprintf(fp,"Error : Service basis not found for service %d for master client of client %s\n",TXNFEE, chr_p_client);
			fflush(fp);
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}

			*int_p_retstat = int_retstat;
			APL_GOBACK_FAIL;

		}
		strcpy(chr_l_fee_basis,l_iv_client_serv_basis_structa.fees_base);
		strcpy(chr_l_charge_basis,l_iv_client_serv_basis_structa.chrg_base);
		chr_l_charge_type = l_iv_client_serv_basis_structa.chrg_clas;
		chr_l_fee_type = l_iv_client_serv_basis_structa.fees_class;
		/*added by shruthi kumbla for ISKB_1901*/
			if((l_iv_client_serv_basis_structa.incld_in_ann_min_fee)!='Y')
				l_iv_client_serv_basis_structa.incld_in_ann_min_fee = 'N';
	}

	strcpy(chr_acct_str,p_cltt_str);
	int_retstat = IV_SUCCESS;
	if(APL_FAILURE == IV_Rtv_GetServBasis(chr_acct_str,TXNFEE,&l_iv_client_serv_basis_structa,&int_retstat,l_debug_info_ptr))
	{
		fprintf(fp,"Error : Service basis not found for service %d for client  %s\n",TXNFEE,chr_p_client);
		fflush(fp);
		int_bl_err_level = 1;
		if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		{
			CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
			CO_FreeErrLst(l_debug_info_ptr);
		}

		*int_p_retstat = int_retstat;
		APL_GOBACK_FAIL;

	}
	
	/*added by shruthi kumbla for ISKB_1901*/
	if((l_iv_client_serv_basis_structa.incld_in_ann_min_fee)!='Y')
		l_iv_client_serv_basis_structa.incld_in_ann_min_fee = 'N';
	/*Added by Monica for kotak ISKB_1737 starts */
	
	   Alert("chr_h_actcode |%s|",chr_h_actcode);

		memset(&l_iv_clientparam_struct_hb, NULL, sizeof(IV_CLIENTPARAM_STRUCT_H));
		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Rtv_IVCUSTPARAM(l_iv_client_serv_basis_structa.client,TXNFEE,l_iv_client_serv_basis_structa.apl_frm_date,&l_iv_clientparam_struct_hb,&int_retstat,l_debug_info_ptr))  /* Added by Monica for ISKB_1737*/
		{
			if(int_retstat != IV_CRITCAL_ERROR_IND)
			{
				
			}
			else
			{
				fprintf(fp,"Error : Service dependencies not defined for client %s\n",h_dl_client);
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}

				APL_GOBACK_FAIL;
			}
		}
		else
		{
		 Alert("Success from IV_Rtv_IVCUSTPARAM fn");

	    }
	
	strcpy(chr_h_param_code,l_iv_clientparam_struct_hb.parameter_cd);
	strcpy(chr_l_param_code,chr_h_param_code);
	
	Alert("chr_h_param_code|%s|parameter_cd |%s|", chr_h_param_code, l_iv_clientparam_struct_hb.parameter_cd);
	Alert("chr_h_actcode:|%s|",chr_h_actcode);
	
	/*Added by Monica for KOTAK ISKB_1737 ends */	
	
	
	if(chr_g_bl_gen != 'M')
	{
		strcpy(chr_l_fee_basis,l_iv_client_serv_basis_structa.fees_base);
		strcpy(chr_l_charge_basis,l_iv_client_serv_basis_structa.chrg_base);
	}
	chr_l_charge_type = l_iv_client_serv_basis_structa.chrg_clas; 
	chr_l_fee_type = l_iv_client_serv_basis_structa.fees_class;
	l_nil_fees   = l_iv_client_serv_basis_structa.nil_fees;
	l_minimumfee   = l_iv_client_serv_basis_structa.minimumfee;
	l_maximum_fee   = l_iv_client_serv_basis_structa.maximum_fee;

	#ifdef BILLDEBUG 

		fprintf(TestRep, "Txn. Charges: Account: %s, Master Acc: %s\n", chr_p_client, p_mstclt_a);
		fprintf(TestRep, "Fee Basis: %s, Charge Basis: %s, Fee Type: %c, Charge Type: %c\n", chr_l_fee_basis, chr_l_charge_basis, chr_l_fee_type, chr_l_charge_type);
		fprintf(TestRep, "Nil Fee: %lf, Min Fee: %lf, Max Fee: %lf\n", l_nil_fees, l_minimumfee, l_maximum_fee);
		fflush(TestRep);

	#endif 
	if(strcmp(l_iv_client_serv_basis_structa.client,h_dl_client) != 0)
	{
		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Rtv_IVCUSTSETUP(l_iv_client_serv_basis_structa.client,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error : Account %s  not found in billing system\n",l_iv_client_serv_basis_structa.client);
				fflush(fp);
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}

				*int_p_retstat = int_retstat;
				APL_GOBACK_FAIL;
			}
		}

		l_exchg_rt = 1.0;
		if(strcmp(l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode) != 0)   
		{
			int_retstat = IV_SUCCESS;
			if(APL_FAILURE == IV_Rtv_ExchRate(  l_iv_clientsetup_struct.fees_ccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,
														&l_exchg_rt,&int_retstat,l_debug_info_ptr)) 
			{
				fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode);                                                                   
      
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
			}
		}

		 

		CO_Round(l_nil_fees * l_exchg_rt, int_g_ccy_decimallen, &l_nil_fees);
                CO_Round(l_minimumfee * l_exchg_rt, int_g_ccy_decimallen, &l_minimumfee);
                CO_Round(l_maximum_fee * l_exchg_rt, int_g_ccy_decimallen, &l_maximum_fee);
	}
      

      l_nil_fees = l_nil_fees * g_exchg_rt_fee_bl;   
      l_minimumfee = l_minimumfee * g_exchg_rt_fee_bl;   
      l_maximum_fee = l_maximum_fee * g_exchg_rt_fee_bl;   

	#ifdef BILLDEBUG 

		fprintf(TestRep, "Exchange Rate is %lf\n", l_exchg_rt);

	#endif 

	strcpy(chr_acct_str,p_cltt_str);
	int_retstat = IV_SUCCESS;

	/* HDFCIV_004 Rohit No Admin charges for India specific */
	IF_COND_NOT_EXISTS("ADMIN_CHARGE","NO_TXN_ADMIN")
	{
		printf("**** 3232 *****\n");
		if(APL_FAILURE == IV_Rtv_GetServBasis( chr_acct_str,ADM_TXN_FEE_IND,&l_iv_client_serv_basis_structa,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat != IV_COLUMN_NULL_ERR && int_retstat != IV_NO_DATA_FOUND_ERR) 
			{
				fprintf(fp,"Service basis not defined for service %d for client %s\n",ADM_TXN_FEE_IND, chr_p_client);
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
				APL_GOBACK_FAIL;
			}
		}

		strcpy(chr_l_adm_charge_basis,l_iv_client_serv_basis_structa.chrg_base);
		strcpy(chr_l_adm_fee_basis,l_iv_client_serv_basis_structa.fees_base);
		chr_l_adm_charge_type = l_iv_client_serv_basis_structa.chrg_clas;
		chr_l_adm_fee_type = l_iv_client_serv_basis_structa.fees_class;

		l_adm_nil_fees   = l_iv_client_serv_basis_structa.nil_fees;
		l_adm_minimumfee   = l_iv_client_serv_basis_structa.minimumfee;
		l_adm_maximum_fee   = l_iv_client_serv_basis_structa.maximum_fee;
		/*added by shruthi kumbla for ISKB_1901*/
			if((l_iv_client_serv_basis_structa.incld_in_ann_min_fee)!='Y')
				l_iv_client_serv_basis_structa.incld_in_ann_min_fee = 'N';

		#ifdef BILLDEBUG 

			fprintf(TestRep, "Txn. Adm. Charges: Account: %s, Master Acc: %s\n", chr_p_client, p_mstclt_a);
			fprintf(TestRep, "Fee Basis: %s, Charge Basis: %s, Fee Type: %c, Charge Type: %c\n", chr_l_adm_fee_basis, chr_l_adm_charge_basis, chr_l_adm_fee_type, chr_l_adm_charge_type);
			fprintf(TestRep, "Nil Fee: %lf, Min Fee: %lf, Max Fee: %lf\n", l_nil_fees, l_minimumfee, l_maximum_fee);
			fflush(TestRep);

		#endif 

		
		if ( APL_FAILURE == CR_Rtv_CCYFldVal(l_iv_client_serv_basis_structa.dealadm_feeccy,"decimallen",&int_h_txndecimallen,l_debug_info_ptr))
		{
			fprintf(fp,"Error : Could not fetch decimal length for currency %s\n", l_iv_client_serv_basis_structa.dealadm_feeccy);
		   fflush(fp);
		   int_bl_err_level = 1;
		   *int_p_retstat = int_retstat;
		   if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		   {
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
			   CO_FreeErrLst(l_debug_info_ptr);
			}
		}

		if(strcmp(l_iv_client_serv_basis_structa.client,h_dl_client) != 0)
		{
			
	      
			int_retstat = IV_SUCCESS;
			if(!strlen(l_iv_client_serv_basis_structa.dealadm_feeccy))
	      {
				if(APL_FAILURE == IV_Rtv_IVCUSTSETUP(l_iv_client_serv_basis_structa.client,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr))
				{
					if(int_retstat == IV_CRITCAL_ERROR_IND)
					{
						fprintf(fp,"Error : Account %s  not found in billing system\n",l_iv_client_serv_basis_structa.client);
						fflush(fp);
						*int_p_retstat = IV_CRITCAL_ERROR_IND;
						int_bl_err_level = 1;
						if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
						{
							CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
							CO_FreeErrLst(l_debug_info_ptr);
						}
						*int_p_retstat = int_retstat;
						APL_GOBACK_FAIL;
					}
				}

				l_exchg_rt = 1.0;
				if(strcmp(l_iv_clientsetup_struct.fees_ccy,chr_g_fee_ccycode) != 0)     
				{
					int_retstat = IV_SUCCESS;
					if(APL_FAILURE == IV_Rtv_ExchRate(  l_iv_clientsetup_struct.fees_ccy,chr_g_fee_ccycode,chr_g_bl_upto_dt, &l_exchg_rt, &int_retstat, l_debug_info_ptr))																		
					{
						fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode);																						   
						fflush(fp);
						int_bl_err_level = 1;
						if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
						{
							CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
							CO_FreeErrLst(l_debug_info_ptr);
						}
						*int_p_retstat = int_retstat;
					}
				}
				CO_Round(l_adm_nil_fees * l_exchg_rt, int_g_ccy_decimallen, &l_adm_nil_fees);
				CO_Round(l_adm_minimumfee * l_exchg_rt, int_g_ccy_decimallen, &l_adm_minimumfee);
				CO_Round(l_adm_maximum_fee * l_exchg_rt, int_g_ccy_decimallen, &l_adm_maximum_fee);
			}
			else
	      {	
				
		 

				 l_exchg_rt = 1.0;
				 if(strcmp(l_iv_client_serv_basis_structa.dealadm_feeccy,chr_g_fee_ccycode) != 0)     
				 {
					 int_retstat = IV_SUCCESS;
					 if(APL_FAILURE == IV_Rtv_ExchRate(  l_iv_client_serv_basis_structa.dealadm_feeccy,chr_g_fee_ccycode,chr_g_bl_upto_dt, &l_exchg_rt, &int_retstat, l_debug_info_ptr))                                             
					 {
						 fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",l_iv_client_serv_basis_structa.dealadm_feeccy, chr_g_fee_ccycode);                                                                     
						 fflush(fp);
						 int_bl_err_level = 1;
						 if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
						 {
					  CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					  CO_FreeErrLst(l_debug_info_ptr);
						 }
						 *int_p_retstat = int_retstat;
					 }
				 }
		 

				CO_Round(l_adm_nil_fees * l_exchg_rt, int_h_txndecimallen, &l_adm_nil_fees);
				CO_Round(l_adm_minimumfee * l_exchg_rt, int_h_txndecimallen, &l_adm_minimumfee);
				CO_Round(l_adm_maximum_fee * l_exchg_rt, int_h_txndecimallen, &l_adm_maximum_fee);
			}
		}
		else
		{
			if(strlen(l_iv_client_serv_basis_structa.dealadm_feeccy) > 0 )
	      {	
					

				l_exchg_rt = 1.0;
					if(strcmp(l_iv_client_serv_basis_structa.dealadm_feeccy,chr_g_fee_ccycode) != 0)     
				{
					int_retstat = IV_SUCCESS;
					if(APL_FAILURE == IV_Rtv_ExchRate(  l_iv_client_serv_basis_structa.dealadm_feeccy,chr_g_fee_ccycode,chr_g_bl_upto_dt, &l_exchg_rt, &int_retstat, l_debug_info_ptr))                                             
					{
						fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",l_iv_client_serv_basis_structa.dealadm_feeccy, chr_g_fee_ccycode);                                                                     
						fflush(fp);
						int_bl_err_level = 1;
						if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
						{
							CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
							CO_FreeErrLst(l_debug_info_ptr);
						}
						*int_p_retstat = int_retstat;
					}
				}
				
			

				CO_Round(l_adm_nil_fees * l_exchg_rt, int_h_txndecimallen, &l_adm_nil_fees);
				CO_Round(l_adm_minimumfee * l_exchg_rt, int_h_txndecimallen, &l_adm_minimumfee);
				CO_Round(l_adm_maximum_fee * l_exchg_rt, int_h_txndecimallen, &l_adm_maximum_fee);
			}
		}

	   
	  
	  l_adm_nil_fees = l_adm_nil_fees * g_exchg_rt_fee_bl; 
	  l_adm_minimumfee = l_adm_minimumfee * g_exchg_rt_fee_bl; 
	  l_adm_maximum_fee = l_adm_maximum_fee * g_exchg_rt_fee_bl; 
	} 
	/* HDFCIV_004 Rohit Admin Charges End Here */
  
	#ifdef BILLDEBUG 

		fprintf(TestRep, "Exchange Rate is %lf\n", l_exchg_rt);

	#endif 
	printf("\n\n *** 3187 ***|%s| |%s|\n\n", chr_l_fee_basis, chr_l_charge_basis);

	if( strcmp(chr_l_fee_basis,"PORTFOLIO VALUE") == 0 &&
			strcmp(chr_l_charge_basis,"NO. OF TRADES") == 0)
	{
		/* Bageshri HB_IV_001 START */
		if(!strcmp(chr_l_bill_dep,"INP"))
		{
			strcpy(chr_h_sel_stmt, "SELECT NVL(SUM((a.SAFEKEEP_POS + a.NVALRECEIVE + a.VAL_REC +");
			strcat(chr_h_sel_stmt, " a.DP_REC - a.NVALDELIVER - a.VAL_DEL - a.DP_DEL)");
			strcat(chr_h_sel_stmt, " * c.CLOSING_PR),0) AS SUM_SAFEK,");
		}
		else
			strcpy(chr_h_sel_stmt, "SELECT NVL(SUM(a.SAFEKEEP_POS * c.CLOSING_PR),0) AS SUM_SAFEK,");

		/* Bageshri HB_IV_001 START */

		strcat(chr_h_sel_stmt, " a.INSTR_CODE, a.LOCATION_CD,");
		strcat(chr_h_sel_stmt, "RTRIM(b.INSTR_SUB_TYPE),b.CURRENCY_CD ");
		strcat(chr_h_sel_stmt, "FROM DL_SAFEK a,MT_INSTRUMENT b,MT_DLYMKTPRC c "); 
		strcat(chr_h_sel_stmt, "WHERE  a.CLIENT = '");
		strcat(chr_h_sel_stmt, h_dl_client);
		strcat(chr_h_sel_stmt, "' AND   c.PRICE_DATE = ");
		strcat(chr_h_sel_stmt, " (SELECT MAX(PRICE_DATE) FROM MT_DLYMKTPRC D WHERE D.INSTR_CODE = B.INSTR_CODE) ");		/* HDFCIV_004 PJ Retrieve Latest NSE / BSE Price resp */
		strcat(chr_h_sel_stmt, " AND    a.INSTR_CODE  = b.INSTR_CODE ");
		strcat(chr_h_sel_stmt, "AND    a.INSTR_CODE  = c.INSTR_CODE ");
		strcat(chr_h_sel_stmt, "GROUP BY b.INSTR_SUB_TYPE,a.LOCATION_CD,a.INSTR_CODE,b.CURRENCY_CD ");
		
		strcat(chr_h_sel_stmt, " UNION ");

		strcat(chr_h_sel_stmt, " SELECT DISTINCT 0 AS SUM_SAFEK, a.INSTR_CODE, a.LOCATION_CD,  ");
		strcat(chr_h_sel_stmt, "RTRIM(b.INSTR_SUB_TYPE), b.CURRENCY_CD ");
		strcat(chr_h_sel_stmt, "FROM DL_DEAL a,MT_INSTRUMENT b "); 
		strcat(chr_h_sel_stmt, "WHERE  a.CLIENT = '");
		strcat(chr_h_sel_stmt, h_dl_client);
	/*	strcat(chr_h_sel_stmt, "' AND a.DEAL_STAT='CS' AND    a.INSTR_CODE  = b.INSTR_CODE ");	*/
		strcat(chr_h_sel_stmt, "' AND    a.INSTR_CODE  = b.INSTR_CODE "); 
		strcat(chr_h_sel_stmt, " AND a.DEAL_STAT != 'DU' ");	/* ISKB-2247 Not to pick DU and DD deals */
		strcat(chr_h_sel_stmt, " AND (a.PAY_MODE IS NULL OR a.PAY_MODE != 'N') ");/*Added by siva.ganapathi for ISKB_2295*/
		
		if(strcmp(chr_h_param_code, "PRODUCT;LOCATION") == 0)
		{
			strcat(chr_h_sel_stmt, "AND b.INSTR_SUB_TYPE||a.LOCATION_CD NOT IN ");
			strcat(chr_h_sel_stmt, "(SELECT DISTINCT d.INSTR_SUB_TYPE||c.LOCATION_CD ");
			strcat(chr_h_sel_stmt, "FROM DL_SAFEK c, MT_INSTRUMENT d ");
			strcat(chr_h_sel_stmt, "WHERE c.CLIENT = '");
			strcat(chr_h_sel_stmt, h_dl_client);
			strcat(chr_h_sel_stmt, "' AND c.INSTR_CODE = d.INSTR_CODE) ");
		}
		else if (strcmp(chr_h_param_code, "LOCATION;PRODUCT") == 0)
		{
			strcat(chr_h_sel_stmt, "AND a.LOCATION_CD||b.INSTR_SUB_TYPE NOT IN ");
			strcat(chr_h_sel_stmt, "(SELECT DISTINCT c.LOCATION_CD||d.INSTR_SUB_TYPE ");
			strcat(chr_h_sel_stmt, "FROM DL_SAFEK c, MT_INSTRUMENT d ");
			strcat(chr_h_sel_stmt, "WHERE c.CLIENT = '");
			strcat(chr_h_sel_stmt, h_dl_client);
			strcat(chr_h_sel_stmt, "' AND c.INSTR_CODE = d.INSTR_CODE) ");
		}
		else if (strcmp(chr_h_param_code, "PRODUCT") == 0)
		{
			strcat(chr_h_sel_stmt, "AND b.INSTR_SUB_TYPE NOT IN ");
			strcat(chr_h_sel_stmt, "(SELECT DISTINCT d.INSTR_SUB_TYPE ");
			strcat(chr_h_sel_stmt, "FROM DL_SAFEK c, MT_INSTRUMENT d ");
			strcat(chr_h_sel_stmt, "WHERE c.CLIENT = '");
			strcat(chr_h_sel_stmt, h_dl_client);
			strcat(chr_h_sel_stmt, "' AND c.INSTR_CODE = d.INSTR_CODE) ");
		}
		else if (strcmp(chr_h_param_code, "LOCATION") == 0)
		{
			strcat(chr_h_sel_stmt, "AND a.LOCATION_CD NOT IN ");
			strcat(chr_h_sel_stmt, "(SELECT DISTINCT c.LOCATION_CD ");
			strcat(chr_h_sel_stmt, "FROM DL_SAFEK c, MT_INSTRUMENT d ");
			strcat(chr_h_sel_stmt, "WHERE c.CLIENT = '");
			strcat(chr_h_sel_stmt, h_dl_client);
			strcat(chr_h_sel_stmt, "' AND c.INSTR_CODE = d.INSTR_CODE) ");
		}

		strcat(chr_h_sel_stmt, " UNION ");

		strcat(chr_h_sel_stmt, " SELECT DISTINCT 0 AS SUM_SAFEK, a.INSTR_CODE, a.LOCATION_CD,  ");
		strcat(chr_h_sel_stmt, "RTRIM(b.INSTR_SUB_TYPE), b.CURRENCY_CD ");
		strcat(chr_h_sel_stmt, "FROM DL_HISDEAL a,MT_INSTRUMENT b "); 
		strcat(chr_h_sel_stmt, "WHERE  a.CLIENT = '");
		strcat(chr_h_sel_stmt, h_dl_client);
  		strcat(chr_h_sel_stmt, "' AND    a.INSTR_CODE  = b.INSTR_CODE "); 
		strcat(chr_h_sel_stmt, " AND a.DEAL_STAT !='DD' ");	/* ISKB-2247 Not to pick DU and DD deals */
		strcat(chr_h_sel_stmt, " AND ( a.PAY_MODE IS NULL OR a.PAY_MODE != 'N' ) ");/*Added by siva.ganapathi for ISKB_2295*/
		
		if(strcmp(chr_h_param_code, "PRODUCT;LOCATION") == 0)
		{
			strcat(chr_h_sel_stmt, "AND b.INSTR_SUB_TYPE||a.LOCATION_CD NOT IN ");
			strcat(chr_h_sel_stmt, "(SELECT DISTINCT d.INSTR_SUB_TYPE||c.LOCATION_CD ");
			strcat(chr_h_sel_stmt, "FROM DL_SAFEK c, MT_INSTRUMENT d ");
			strcat(chr_h_sel_stmt, "WHERE c.CLIENT = '");
			strcat(chr_h_sel_stmt, h_dl_client);
			strcat(chr_h_sel_stmt, "' AND c.INSTR_CODE = d.INSTR_CODE) ");
		}
		else if (strcmp(chr_h_param_code, "LOCATION;PRODUCT") == 0)
		{
			strcat(chr_h_sel_stmt, "AND a.LOCATION_CD||b.INSTR_SUB_TYPE NOT IN ");
			strcat(chr_h_sel_stmt, "(SELECT DISTINCT c.LOCATION_CD||d.INSTR_SUB_TYPE ");
			strcat(chr_h_sel_stmt, "FROM DL_SAFEK c, MT_INSTRUMENT d ");
			strcat(chr_h_sel_stmt, "WHERE c.CLIENT = '");
			strcat(chr_h_sel_stmt, h_dl_client);
			strcat(chr_h_sel_stmt, "' AND c.INSTR_CODE = d.INSTR_CODE) ");
		}
		else if (strcmp(chr_h_param_code, "PRODUCT") == 0)
		{
			strcat(chr_h_sel_stmt, "AND b.INSTR_SUB_TYPE NOT IN ");
			strcat(chr_h_sel_stmt, "(SELECT DISTINCT d.INSTR_SUB_TYPE ");
			strcat(chr_h_sel_stmt, "FROM DL_SAFEK c, MT_INSTRUMENT d ");
			strcat(chr_h_sel_stmt, "WHERE c.CLIENT = '");
			strcat(chr_h_sel_stmt, h_dl_client);
			strcat(chr_h_sel_stmt, "' AND c.INSTR_CODE = d.INSTR_CODE) ");
		}
		else if (strcmp(chr_h_param_code, "LOCATION") == 0)
		{
			strcat(chr_h_sel_stmt, "AND a.LOCATION_CD NOT IN ");
			strcat(chr_h_sel_stmt, "(SELECT DISTINCT c.LOCATION_CD ");
			strcat(chr_h_sel_stmt, "FROM DL_SAFEK c, MT_INSTRUMENT d ");
			strcat(chr_h_sel_stmt, "WHERE c.CLIENT = '");
			strcat(chr_h_sel_stmt, h_dl_client);
			strcat(chr_h_sel_stmt, "' AND c.INSTR_CODE = d.INSTR_CODE) ");
		}
		printf("\n *** 3299 ** |%s|\n\n", chr_h_param_code);
		if(strcmp(chr_h_param_code, "PRODUCT;LOCATION") == 0)
			strcat(chr_h_sel_stmt, "ORDER BY 4, 3,");
		else if (strcmp(chr_h_param_code, "LOCATION;PRODUCT") == 0)
			strcat(chr_h_sel_stmt, "ORDER BY 3, 4,");
		else if (strcmp(chr_h_param_code, "PRODUCT") == 0)
			strcat(chr_h_sel_stmt, "ORDER BY 4,");
		else if (strcmp(chr_h_param_code, "LOCATION") == 0)
			strcat(chr_h_sel_stmt, "ORDER BY 3,");
		else if (strcmp(chr_h_param_code, ";") == 0)
			strcat(chr_h_sel_stmt, "ORDER BY ");

		strcat(chr_h_sel_stmt, "2");

		fprintf(APL_OUT_FILE,"select stmt  = %s\n",chr_h_sel_stmt);
		
		printf("\n 3477 Port / no of trade=|%s|\n ", chr_h_sel_stmt);

		EXEC SQL PREPARE S FROM :chr_h_sel_stmt;

		EXEC SQL DECLARE tpval_cur CURSOR FOR S;
		
		EXEC SQL OPEN tpval_cur;

		if(sqlca.sqlcode <  0)
		{
			fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			int_bl_err_level = 1;
			*int_p_retstat = IV_CRITCAL_ERROR_IND;
			APL_GOBACK_FAIL;
		}

		int_is_tpval_cur_open = 1;

		for( ; ; )
		{
			dbl_h_portval = 0.0;
			memset(h_instr_code,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
			memset(h_loccode,APL_NULL_CHAR,APL_LOCNCODE_LENGTH);
			memset(h_prodateype,APL_NULL_CHAR,IV_PRODTYPE_LEN);
			memset(chr_h_instr_ccy,APL_NULL_CHAR,APL_CCYCODE_LEN);
			

			EXEC SQL FETCH  tpval_cur  
			INTO :dbl_h_portval,
					:h_instr_code,
					:h_loccode:i_loccode,
					:h_prodateype,
					:chr_h_instr_ccy;

			if ( sqlca.sqlcode < 0 )
			{
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
			}

			IS_ANY_ORA_ERROR

			if( APL_ZERO_RESULT_SET )
			{
				if(int_fetch_cnt > 0)
				{
					int_ind_over = 1;
				}
				else
					break;
			}

			int_fetch_cnt++;
			memset(chr_h_fee_str,'\0',IV_PARAM_LEN);
			memset(chr_l_where_stmt,'\0',500);

			if ( int_ind_over != 1 ) 
			{
				l_exchg_rt = 1.0;
				if(strcmp(chr_h_instr_ccy,chr_g_fee_ccycode) != 0)                    
				{
					int_retstat = IV_SUCCESS;
					if(APL_FAILURE == IV_Rtv_ExchRate(chr_h_instr_ccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,&l_exchg_rt,&int_retstat,l_debug_info_ptr))                                                                         
 
					{
						fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",chr_h_instr_ccy,chr_g_fee_ccycode);
																									

						fflush(fp);
						int_bl_err_level = 1;
						if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
						{
							CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
							CO_FreeErrLst(l_debug_info_ptr);
						}
						*int_p_retstat = int_retstat;
					}
				}
			}

			if(strcmp(chr_h_param_code,"LOCATION;PRODUCT") == 0) 
			{
				memset(chr_h_fee_str,'\0',IV_PARAM_LEN);
				strcpy(chr_h_fee_str,h_loccode);
				strcat(chr_h_fee_str,";");
				strcat(chr_h_fee_str,h_prodateype);
				strcat(chr_h_fee_str,APL_NULL_STRING);
				strcpy(chr_l_where_stmt," and a.instr_code = b.instr_code ");
				strcat(chr_l_where_stmt," and rtrim(a.INSTR_SUB_TYPE) = '");
				strcat(chr_l_where_stmt,h_prodateype);
				strcat(chr_l_where_stmt,"' and b.location_cd = '");
				strcat(chr_l_where_stmt,h_loccode);
				strcat(chr_l_where_stmt,"'");
				chr_l_instrflg = 'Y';
			}
			else
			{
				if (strcmp(chr_h_param_code,"PRODUCT;LOCATION") == 0)
				{
					memset(chr_h_fee_str,'\0',IV_PARAM_LEN);
					strcat(chr_h_fee_str,h_prodateype);
					strcat(chr_h_fee_str,APL_NULL_STRING);
					strcpy(chr_h_fee_str,h_loccode);
					strcat(chr_h_fee_str,";");
					strcpy(chr_l_where_stmt," and a.instr_code = b.instr_code ");
					strcat(chr_l_where_stmt," and rtrim(a.INSTR_SUB_TYPE) = '");
					strcat(chr_l_where_stmt,h_prodateype);
					strcat(chr_l_where_stmt,"' and b.location_cd = '");
					strcat(chr_l_where_stmt,h_loccode);
					strcat(chr_l_where_stmt,"'");
					chr_l_instrflg = 'Y';
				}
				else if(strcmp(chr_h_param_code,"PRODUCT") == 0)
				{
					memset(chr_h_fee_str,'\0',IV_PARAM_LEN);
					strcpy(chr_h_fee_str,h_prodateype);
					strcpy(chr_l_where_stmt," and a.instr_code = b.instr_code ");
					strcat(chr_l_where_stmt," and rtrim(a.INSTR_SUB_TYPE) = '");
					strcat(chr_l_where_stmt,h_prodateype);
					strcat(chr_l_where_stmt,"'");
					chr_l_instrflg = 'Y';
				}
				else if(strcmp(chr_h_param_code,"LOCATION") == 0)
				{
					memset(chr_h_fee_str,'\0',IV_PARAM_LEN);
					strcpy(chr_h_fee_str,h_loccode);
					strcpy(chr_l_where_stmt," and a.instr_code = b.instr_code ");
					strcat(chr_l_where_stmt," and b.location_cd = '");
					strcat(chr_l_where_stmt,h_loccode);
					strcat(chr_l_where_stmt,"'");
					chr_l_instrflg = 'Y';
				}
				else
				{
					memset(chr_h_fee_str,'\0',IV_PARAM_LEN);
					memset(chr_prev_param_str,'\0',IV_PARAM_LEN);
					strcpy(chr_h_fee_str,";");
					strcpy(chr_prev_param_str,";");
				}
			}

			if(int_ind_over == 1)
				strcpy(chr_h_fee_str,"\0");

			if(int_fetch_cnt == 1)
			{
				strcpy(chr_prev_param_str,chr_h_fee_str);
				strcpy(chr_prev_where_stmt,chr_l_where_stmt);
			}

			if(strcmp(chr_prev_param_str,chr_h_fee_str) == 0)
		        { 	
				

			l_round_val = 0.0;
                                CO_Round(dbl_h_portval * l_exchg_rt, int_g_ccy_decimallen,&l_round_val);
                                tpval += l_round_val;
                        }
			else
			{
				no_of_trades = 0;
				strcat(chr_prev_where_stmt," and b.dl_class NOT IN ('28','19','20','90','26','59','56') "); /* HDFCIV_004 PJ Mand CA Evt Changes*/
				strcat(chr_prev_where_stmt," and B.INFORMATON IS NULL ");
				int_retstat = IV_SUCCESS;
				/*if(APL_FAILURE == IV_Proc_CalcNoTrd(h_dl_client,chr_prev_where_stmt,&no_of_trades,'N',chr_l_instrflg,'Y',&int_retstat,l_debug_info_ptr))*/
				if(APL_FAILURE == IV_Proc_CalcNoTrd(h_dl_client,chr_prev_where_stmt,&no_of_trades,'N',chr_l_instrflg,'Y',chr_l_bill_dep,&int_retstat,l_debug_info_ptr))
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}
				
				srv_charge=0;
				strcpy(chr_acct_str,p_cltt_str);
				int_retstat = IV_SUCCESS;
				
				if(APL_FAILURE == IV_Proc_CalcFee("O",chr_acct_str,TXNFEE,chr_prev_param_str,APL_NULL_STRING,
							chr_h_param_code,tpval,no_of_trades,chr_l_charge_type,chr_l_fee_type, &srv_charge,
							l_iv_data_struct_h_dlgrp,'I',p_mstclt_a,chr_l_charge_basis,chr_l_fee_basis,
							chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
				{
					if(int_retstat == IV_CRITCAL_ERROR_IND)
					{
						fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
						fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
						fflush(fp);
						int_bl_err_level = 1;
						if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
						{
							CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
							CO_FreeErrLst(l_debug_info_ptr);
						}
						*int_p_retstat = int_retstat;
					}
				}
					/*Added by siva.ganapathi for Annexures on  02/06/2009 -- started*/
					/*printf("\n before calling IV_Proc_CalcCommAmt fee basis			::: %s",chr_l_fee_basis);
					printf("\n before calling IV_Proc_CalcCommAmt charge basis		::: %s",chr_l_charge_basis);
					printf("\n before calling IV_Proc_CalcCommAmt clientcode		::: %s",h_dl_client);
					printf("\n before calling IV_Proc_CalcCommAmt chr_l_bill_dep	::: %s",chr_l_bill_dep);
					printf("\n before calling IV_Proc_CalcCommAmt billdate			::: %s",chr_g_bl_upto_dt);
					printf("\n before calling IV_Proc_CalcCommAmt srv_charge		::: %f",srv_charge);
					printf("\n before calling IV_Proc_CalcCommAmt no_of_trades		::: %f",no_of_trades);
					printf("\n before calling IV_Proc_CalcCommAmt chr_prev_param_str :: %s",chr_prev_param_str);
					printf("\n before calling IV_Proc_CalcCommAmt chr_h_param_code  ::: %s",chr_h_param_code);*/
					/*Modified by siva.ganapathi for ISKB_2323*/
					if(no_of_trades > 0 && srv_charge >0 )
					{	
						if(APL_FAILURE == IV_Proc_CalcCommAmt(chr_l_fee_basis,chr_l_charge_basis,h_dl_client,chr_l_bill_dep,chr_g_bl_upto_dt,srv_charge,no_of_trades,chr_prev_param_str,chr_h_param_code,"I",&int_retstat,l_debug_info_ptr))	
						{
								printf("\n Error occuered when updating the Comm_amt in Dl_deal and dl_hisdeal");
						}
					}

					/*Added by siva.ganapathi for Annexures on  02/06/2009 -- Ended*/

				if(srv_charge > 0)
					tot_txn_chg += srv_charge;
				
				srv_charge=0;
				strcpy(chr_acct_str,p_cltt_str);

				/* HDFCIV_004 Rohit No Admin charges for India specific */
				IF_COND_NOT_EXISTS("ADMIN_CHARGE","NO_TXN_ADMIN")
				{
					if((strcmp(chr_l_adm_charge_basis,"COUNTERVALUE") == 0) && 
				    (strcmp(chr_l_adm_fee_basis,"COUNTERVALUE") == 0))
					{

					

						int_retstat = IV_SUCCESS;
						tot_credit_indr = 0.0;
						strcat(chr_prev_where_stmt," and b.dl_class NOT IN ('28','19') "); /* HDFCIV_004 PJ Mand CA Evt Changes */
						/*if(APL_FAILURE == IV_Proc_CalcCountervalue(h_dl_client,chr_prev_where_stmt,&tot_credit_indr,chr_l_instrflg,&int_retstat,l_debug_info_ptr))*/
						if(APL_FAILURE == IV_Proc_CalcCountervalue(h_dl_client,chr_prev_where_stmt,&tot_credit_indr,chr_l_instrflg,chr_l_bill_dep,&int_retstat,l_debug_info_ptr))
						{
							fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
							fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
							fflush(fp);
							int_bl_err_level = 1;
							if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
							{
								CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
								CO_FreeErrLst(l_debug_info_ptr);
							}
							*int_p_retstat = int_retstat;
						}
                
                 
						adm_chg_quantity = tot_credit_indr;
						adm_fee_quantity = tot_credit_indr;
						int_retstat = IV_SUCCESS;
						srv_charge = 0.0;
				
						if(APL_FAILURE == IV_Proc_CalcFee("O",chr_acct_str,ADM_TXN_FEE_IND,chr_prev_param_str,
									APL_NULL_STRING,chr_h_param_code,adm_fee_quantity,adm_chg_quantity,
									chr_l_adm_charge_type,chr_l_adm_fee_type,&srv_charge,l_iv_data_struct_h_dladmgrp,
									'I',p_mstclt_a,chr_l_adm_charge_basis,chr_l_adm_fee_basis,chr_h_srv_ind,&int_retstat,
									l_debug_info_ptr))
						{
							if(int_retstat == IV_CRITCAL_ERROR_IND)
							{
								fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
								fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
								fflush(fp);
								int_bl_err_level = 1;
								if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
								{
									CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
									CO_FreeErrLst(l_debug_info_ptr);
								}
								*int_p_retstat = int_retstat;
							}
						}
					}
					else
					{
					
               
					strcat(chr_prev_where_stmt," and b.dl_class not in ('28','19','20','90','26','59','56') ");
					strcat(chr_prev_where_stmt," and B.INFORMATON IS NULL ");
					/*if(APL_FAILURE == IV_Proc_CalcPerTxnServChrg(chr_acct_str,chr_prev_param_str,chr_h_param_code,
								chr_l_adm_charge_type,chr_l_adm_fee_type,l_iv_data_struct_h_dladmgrp,'I',p_mstclt_a,
								chr_l_adm_charge_basis,chr_l_adm_fee_basis,h_dl_client,chr_prev_where_stmt,
								l_iv_client_serv_basis_structa.dealadm_feeccy,&srv_charge,chr_l_instrflg,&int_retstat,
								l_debug_info_ptr))*/
					if(APL_FAILURE == IV_Proc_CalcPerTxnServChrg(chr_acct_str,chr_prev_param_str,chr_h_param_code,
								chr_l_adm_charge_type,chr_l_adm_fee_type,l_iv_data_struct_h_dladmgrp,'I',p_mstclt_a,
								chr_l_adm_charge_basis,chr_l_adm_fee_basis,h_dl_client,chr_prev_where_stmt,
								l_iv_client_serv_basis_structa.dealadm_feeccy,&srv_charge,chr_l_instrflg,
								chr_l_bill_dep,&int_retstat,l_debug_info_ptr))
						{
							if(int_retstat == IV_CRITCAL_ERROR_IND)
							{
								fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
								fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
								fflush(fp);
								int_bl_err_level = 1;
								if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
								{
									CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
									CO_FreeErrLst(l_debug_info_ptr);
								}
								*int_p_retstat = int_retstat;
							}
						}
					}
				

					if(srv_charge > 0)
						tot_adm_txn_chg += srv_charge;
				}
				/* HDFCIV_004 Rohit Admin Charges End Here */
					if(int_ind_over == 1)
						break;
				
				strcpy(chr_prev_param_str,chr_h_fee_str);
				strcpy(chr_prev_where_stmt,chr_l_where_stmt);

				

				CO_Round(dbl_h_portval * l_exchg_rt, int_g_ccy_decimallen, &tpval);	
			}
		}

		EXEC SQL CLOSE tpval_cur;
		int_is_tpval_cur_open = 0;


		int_retstat = IV_SUCCESS;
		
	 if(APL_FAILURE == IV_Mod_BillDtForTrade(h_dl_client,0.00,APL_NULL_STRING,'L',chr_l_bill_dep, &int_retstat,l_debug_info_ptr))
		{
			fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}
			*int_p_retstat = int_retstat;
		}
		
		
		int_retstat = IV_SUCCESS;
		
		if(APL_FAILURE == IV_Mod_BillDtForTrade(h_dl_client,0.00,APL_NULL_STRING,'H',chr_l_bill_dep, &int_retstat,l_debug_info_ptr))
		{
			fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);

				CO_FreeErrLst(l_debug_info_ptr);

			}
			*int_p_retstat = int_retstat;
		}
		strcpy(chr_l_param_code,chr_h_param_code);

		if(chr_l_instrflg == 'Y')
			strcat(chr_l_where_stmt," and b.instr_code = a.instr_code ");
		
		strcat(chr_l_where_stmt," and b.dl_class not in ('28','19','20','90','26','59','56') ");
		strcat(chr_l_where_stmt," AND B.INFORMATON IS NULL ");
		strcat(chr_l_where_stmt,"and b.client = c.client and b.identiy_no=c.identiy_no and b.DATEOF_INPUT=c.DATEOF_INPUT ");   
		int_retstat = IV_SUCCESS;
		/*if(APL_FAILURE == IV_Proc_CalcNoTrd(h_dl_client,chr_l_where_stmt,&nreapired_ind,'R',chr_l_instrflg,'Y', &int_retstat,l_debug_info_ptr))*/
		if(APL_FAILURE == IV_Proc_CalcNoTrd(h_dl_client,chr_l_where_stmt,&nreapired_ind,'R',chr_l_instrflg,'Y',chr_l_bill_dep, &int_retstat,l_debug_info_ptr))
		{
			fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}
			*int_p_retstat = int_retstat;
		}

		
		strcpy(chr_l_where_stmt, APL_NULL_STRING);
		strcpy(chr_l_where_stmt," and b.ENTRY = ");
		strcpy(chr_l_buf,APL_NULL_STRING);
		strcpy(chr_l_buf," '");
		chr_l_buf[strlen(chr_l_buf)+1] = '\0';
		chr_l_buf[strlen(chr_l_buf)] = BILLABLE_DEAL_IND;
		strcat(chr_l_buf,"' ");
		strcat(chr_l_where_stmt, chr_l_buf);
		if(chr_l_instrflg == 'Y')
        	    strcat(chr_l_where_stmt," and b.instr_code = a.instr_code ");

      strcat(chr_l_where_stmt," and b.dl_class not in ('28','19','20','90','26','59','56') ");
      strcat(chr_l_where_stmt," and B.INFORMATON IS NULL ");
      int_retstat = IV_SUCCESS;
      /*if(APL_FAILURE == IV_Proc_CalcNoTrd(h_dl_client,chr_l_where_stmt,&nManualTrd,'N',chr_l_instrflg,'Y', &int_retstat,l_debug_info_ptr))*/
      if(APL_FAILURE == IV_Proc_CalcNoTrd(h_dl_client,chr_l_where_stmt,&nManualTrd,'N',chr_l_instrflg,'Y',chr_l_bill_dep, &int_retstat,l_debug_info_ptr))
      {
         fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
         fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
         fflush(fp);
         int_bl_err_level = 1;
         if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
         {
            CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
            CO_FreeErrLst(l_debug_info_ptr);
         }
         *int_p_retstat = int_retstat;
      }

     
	if (int_g_viber_condexists != 0)
	{
		

             strcpy(chr_l_where_stmt," and b.VERFIED_WITH in ('VIB','EVI') and b.DEAL_CD IN ('1','2')");
                if(chr_l_instrflg == 'Y')
                        strcat(chr_l_where_stmt," and b.instr_code = a.instr_code ");

                strcat(chr_l_where_stmt," and b.dl_class not in ('28','19','20','90','26','59','56') ");
                strcat(chr_l_where_stmt," and B.INFORMATON IS NULL ");
                int_retstat = IV_SUCCESS;
                /*if(APL_FAILURE == IV_Proc_CalcNoTrd(h_dl_client,chr_l_where_stmt,&nNoViberFrees,'N',chr_l_instrflg,'Y',&int_retstat,l_debug_info_ptr))*/
                if(APL_FAILURE == IV_Proc_CalcNoTrd(h_dl_client,chr_l_where_stmt,&nNoViberFrees,'N',chr_l_instrflg,'Y',chr_l_bill_dep,&int_retstat,l_debug_info_ptr))
                {
                        fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
                        fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
                        fflush(fp);
                        int_bl_err_level = 1;
                        if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
                        {
                                CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                                CO_FreeErrLst(l_debug_info_ptr);
                        }
                        *int_p_retstat = int_retstat;
                }
	
	fprintf(fp,"calculation for viber free client:%s trd:%lf",h_dl_client,nNoViberFrees);
		fprintf(fp,"\n");
                

             strcpy(chr_l_where_stmt," and b.VERFIED_WITH in ('VIB','EVI') and b.DEAL_CD IN ('3','4','5','6','7','8')");
                if(chr_l_instrflg == 'Y')
                        strcat(chr_l_where_stmt," and b.instr_code = a.instr_code ");

                strcat(chr_l_where_stmt," and b.dl_class not in ('28','19','20','90','26','59','56') ");
                strcat(chr_l_where_stmt," and B.INFORMATON IS NULL ");
                int_retstat = IV_SUCCESS;
                /*if(APL_FAILURE == IV_Proc_CalcNoTrd(h_dl_client,chr_l_where_stmt,&nNoViberVPs,'N',chr_l_instrflg,'Y',&int_retstat,l_debug_info_ptr))*/
                if(APL_FAILURE == IV_Proc_CalcNoTrd(h_dl_client,chr_l_where_stmt,&nNoViberVPs,'N',chr_l_instrflg,'Y',chr_l_bill_dep,&int_retstat,l_debug_info_ptr))
                {
                        fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
                        fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
                        fflush(fp);
                        int_bl_err_level = 1;
                        if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
                        {
                                CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                                CO_FreeErrLst(l_debug_info_ptr);
                        }
                        *int_p_retstat = int_retstat;
                }
	}

	fprintf(fp,"calculation for viber VP client:%s trd:%lf",h_dl_client,nNoViberVPs);
	fprintf(fp,"\n"); 


		strcpy(chr_l_where_stmt, " and ((TO_DATE(TO_CHAR(b.DATEOF_INPUT, 'dd/mm/yyyy'), 'dd/mm/yyyy')");
		strcat(chr_l_where_stmt, " > TO_DATE(TO_CHAR(b.setl_date, 'dd/mm/yyyy'), 'dd/mm/yyyy'))");
		strcat(chr_l_where_stmt," OR (TO_DATE(TO_CHAR(b.setl_date,'dd/mm/yyyy'),'dd/mm/yyyy')"); 
		strcat(chr_l_where_stmt," - TO_DATE(TO_CHAR(b.DATEOF_INPUT,'dd/mm/yyyy'),'dd/mm/yyyy')) > ");
		ltoa_r(g_late_txn_days,chr_late_days,2);
		strcat(chr_l_where_stmt,chr_late_days);
		strcat(chr_l_where_stmt, ")");

		if(chr_l_instrflg == 'Y')
			strcat(chr_l_where_stmt," and b.instr_code = a.instr_code ");
		strcat(chr_l_where_stmt," and b.dl_class not in ('28','19','20','90','26','59','56') ");
		strcat(chr_l_where_stmt," and B.INFORMATON IS NULL ");
		
		int_retstat = IV_SUCCESS;
		/*if(APL_FAILURE == IV_Proc_CalcNoTrd(h_dl_client,chr_l_where_stmt,&nLateTxn,'N',chr_l_instrflg,'Y', &int_retstat,l_debug_info_ptr))*/
		if(APL_FAILURE == IV_Proc_CalcNoTrd(h_dl_client,chr_l_where_stmt,&nLateTxn,'N',chr_l_instrflg,'Y',chr_l_bill_dep, &int_retstat,l_debug_info_ptr))
		{
			fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}
			*int_p_retstat = int_retstat;
		}

		

		strcpy(chr_l_where_stmt," and b.CLT_REQDEL_IND = 'Y'");
		if(chr_l_instrflg == 'Y')
			strcat(chr_l_where_stmt," and b.instr_code = a.instr_code ");
		strcat(chr_l_where_stmt," and b.dl_class not in ('28','19','20','90','26','59','56') ");
		strcat(chr_l_where_stmt," and B.INFORMATON IS NULL ");
	
		int_retstat = IV_SUCCESS;
		/*if(APL_FAILURE == IV_Proc_CalcNoTrd(h_dl_client,chr_l_where_stmt,&nNoDeletions,'N',chr_l_instrflg,'N', &int_retstat,l_debug_info_ptr))*/
		if(APL_FAILURE == IV_Proc_CalcNoTrd(h_dl_client,chr_l_where_stmt,&nNoDeletions,'N',chr_l_instrflg,'N',chr_l_bill_dep, &int_retstat,l_debug_info_ptr))
		{
			fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}
			*int_p_retstat = int_retstat;
		}

		

		int_retstat = IV_SUCCESS;
		/*if(APL_FAILURE == IV_Proc_CalcNoAmend(chr_acct_str,&nNoAmendments,&int_retstat,l_debug_info_ptr))*/
		if(APL_FAILURE == IV_Proc_CalcNoAmend(chr_acct_str,&nNoAmendments,chr_l_bill_dep,&int_retstat,l_debug_info_ptr))
		{
			fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}
			*int_p_retstat = int_retstat;
		}

		/* Calculate No of trades for Bucket transaction	HDFCIV_004	Rohit	*/
		int_retstat = IV_SUCCESS;
		printf("Bucket Transaction for client:|%s|\n",h_dl_client);
		if(APL_FAILURE == IV_Proc_CalcBuckTxnNo(h_dl_client,&nNoBucketTxn,&int_retstat,l_debug_info_ptr))
		{
			fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}
			*int_p_retstat = int_retstat;
		}
		
	/************************************************************************************************/
		
		/* Calculate No of MutualFund transactions **** vinay kalaskar ******/
	   int_retstat = IV_SUCCESS;
		
		printf("Entering IV_Proc_CalcMutualFundNo:|%s||%s||%s|\n",chr_acct_str,p_mstclt_a,h_dl_client);
		/*if(APL_FAILURE == IV_Proc_CalcMutualFundNo(chr_acct_str,p_mstclt_a,h_dl_client,
										chr_h_bl_upto_dt,&int_retstat,l_debug_info_ptr))*/
		if(APL_FAILURE == IV_Proc_CalcMutualFundNo(chr_acct_str,p_mstclt_a,h_dl_client,
										chr_h_bl_upto_dt, chr_l_bill_dep,&int_retstat,l_debug_info_ptr))
		{
			fprintf(fp,"Error in IV_Proc_CalcMutualFundNo for  %s. Please contact support\n",h_dl_client);
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}
				*int_p_retstat = int_retstat;
		}
	/***********************************************************************************************/	
		
	}
	else if(strcmp(chr_l_fee_basis,"NO. OF TRADES") == 0 &&
	    strcmp(chr_l_charge_basis,"NO. OF TRADES") == 0)
	{
		
		
		/*Changes start by Rahul for Treps Charges start */
		Alert(" befor Bill Upto Date |%s|  \n",chr_g_bl_upto_dt);
        l_exstind= 0;
		
		EXEC SQL SELECT COUNT(1) INTO :l_exstind FROM CSGLTREPS_VW a,sys_ivcontrolparam b
		WHERE a.CSTRP_CUST_CODE = :h_dl_client 
		AND a.CSTRP_VALUE_DATE BETWEEN TO_DATE(TO_CHAR(to_date(b.B_PREV_DATE,'dd/mm/yyyy hh24:mi:ss'),'dd/mm/yyyy')||'12:00:00','DD/MM/YYYY HH24:MI:SS') 
		AND TO_DATE(TO_CHAR(to_date(B_UPTO_DATE,'dd/mm/yyyy hh24:mi:ss'),'dd/mm/yyyy')||'23:59:59','DD/MM/YYYY HH24:MI:SS')
		AND a.CSTRP_AUTH_ON is not NULL
		AND a.CSTRP_DEAL_TYPE IN('TPL','TPB') and  not exists (select 1 from CUSTODY_TREPS_CHARGES where client =:h_dl_client and  DATEOFBILLING is null and  DEAL_DATE BETWEEN TO_DATE(TO_CHAR(to_date(b.B_PREV_DATE,'dd/mm/yyyy hh24:mi:ss'),'dd/mm/yyyy')||'12:00:00','DD/MM/YYYY HH24:MI:SS') 
		AND TO_DATE(TO_CHAR(to_date(B_UPTO_DATE,'dd/mm/yyyy hh24:mi:ss'),'dd/mm/yyyy')||'23:59:59','DD/MM/YYYY HH24:MI:SS'));
		
		printf("\n CSGL deals count / No of=|%d|\n", l_exstind);
		Alert("  Bill Upto Date |%s|  \n",chr_g_bl_upto_dt);
		
		Alert("sqlca.sqlcode csgl=== |%d|",sqlca.sqlcode);
		IS_ANY_ORA_ERROR
		if(l_exstind > 0)
		{
			
		    //this function will call for pursing the data CSGL System to Custody 
			
			int_retstat = IV_SUCCESS;
			if ( APL_FAILURE == IV_Proc_TrepesFn(h_dl_client,TXNFEE,chr_g_bl_upto_dt,&int_retstat,l_debug_info_ptr) )
			{
				if(int_retstat == IV_CRITCAL_ERROR_IND)
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}
			}
			
			
		}
		
		/*Changes start by Rahul for Treps Charges start */
		
		
		Alert("RAHUL::no of trades query :|%s|  \n",chr_g_bl_upto_dt);
		strcpy(chr_h_txn_stmt,"(SELECT 'O',b.INSTR_CODE,b.LOCATION_CD,b.DEAL_CD,RTRIM(a.INSTR_SUB_TYPE),");
		strcat(chr_h_txn_stmt,"RTRIM(b.DL_CLASS), b.CURRENCY_CD, b.REAPIRED_IND,b.VERFIED_WITH,b.DATEOFBILLING,");
		strcat(chr_h_txn_stmt,"TO_DATE(TO_CHAR(b.SETL_DATE,'dd/mm/yyyy'),'dd/mm/yyyy')"); 
		strcat(chr_h_txn_stmt," - TO_DATE(TO_CHAR(b.DATEOF_INPUT,'dd/mm/yyyy'),'dd/mm/yyyy'),");
		strcat(chr_h_txn_stmt,"b.AMEND_COUNT,b.NUMBER_A,b.NUMBER_B,b.ROWID,b.AMOUNT,'L' AS HISFLG,b.ENTRY");
		strcat(chr_h_txn_stmt," FROM MT_INSTRUMENT a, DL_DEAL b");
		strcat(chr_h_txn_stmt," WHERE b.CLIENT = '");
		strcat(chr_h_txn_stmt,h_dl_client);
		/*	strcat(chr_h_txn_stmt,"'  AND b.DEAL_STAT = 'CS' AND b.INSTR_CODE = a.INSTR_CODE ");	*/
		strcat(chr_h_txn_stmt,"' AND b.INSTR_CODE = a.INSTR_CODE "); 
		strcat(chr_h_txn_stmt," AND b.DEAL_STAT != 'DU' ");	/* ISKB-2247 Not to pick DU and DD deals */
		strcat(chr_h_txn_stmt," AND b.DL_CLASS NOT IN ('28','19','20','90','26','59','56') AND ");
		strcat(chr_h_txn_stmt, "  ( b.PAY_MODE IS NULL OR b.PAY_MODE != 'N' ) AND ");/*Added by siva.ganapathi for ISKB_2295*/
		strcat(chr_h_txn_stmt," b.MF_SEQNO IS NULL AND ");
		strcat(chr_h_txn_stmt," b.CHECKER IS NOT NULL AND b.INFORMATON IS NULL AND (b.DATEOFBILLING IS NULL OR ");
		strcat(chr_h_txn_stmt," (b.AMEND_COUNT != b.NUMBER_A AND");
		strcat(chr_h_txn_stmt," b.DATEOFBILLING != '");
		strcat(chr_h_txn_stmt,chr_g_bl_upto_dt);
		strcat(chr_h_txn_stmt,"') OR b.DATEOFBILLING = '");
		strcat(chr_h_txn_stmt,chr_g_bl_upto_dt);
		strcat(chr_h_txn_stmt,"') AND  ");
		strcat(chr_txn_stmt1," UNION ALL");
		strcat(chr_txn_stmt1," SELECT 'O',b.INSTR_CODE,b.LOCATION_CD,b.DEAL_CD,RTRIM(a.INSTR_SUB_TYPE),");
		strcat(chr_txn_stmt1," RTRIM(b.DL_CLASS), b.CURRENCY_CD, b.REAPIRED_IND,b.VERFIED_WITH,b.DATEOFBILLING,");
		strcat(chr_txn_stmt1,"TO_DATE(TO_CHAR(b.SETL_DATE,'dd/mm/yyyy'),'dd/mm/yyyy')"); 
		strcat(chr_txn_stmt1," - TO_DATE(TO_CHAR(b.DATEOF_INPUT,'dd/mm/yyyy'),'dd/mm/yyyy'),");
		strcat(chr_txn_stmt1," b.AMEND_COUNT,b.NUMBER_A,b.NUMBER_B,b.ROWID,b.AMOUNT,'H' AS HISFLG,b.ENTRY");
		strcat(chr_txn_stmt1," FROM MT_INSTRUMENT a, DL_HISDEAL b");
		strcat(chr_txn_stmt1," WHERE b.CLIENT = '");
		strcat(chr_txn_stmt1,h_dl_client);
		strcat(chr_txn_stmt1,"' AND b.INSTR_CODE = a.INSTR_CODE "); 
		strcat(chr_txn_stmt1," AND b.DEAL_STAT != 'DD' ");	/* ISKB-2247 Not to pick DU and DD deals */
		strcat(chr_txn_stmt1," AND b.DL_CLASS NOT IN ('28','19','20','90','26','59','56') AND ");
		strcat(chr_txn_stmt1, " ( b.PAY_MODE IS NULL OR b.PAY_MODE != 'N' ) AND ");/*Added by siva.ganapathi for ISKB_2295*/
		strcat(chr_txn_stmt1," b.MF_SEQNO IS NULL AND ");
		strcat(chr_txn_stmt1," b.CHECKER IS NOT NULL AND INFORMATON IS NULL AND (b.DATEOFBILLING is NULL OR ");
		strcat(chr_txn_stmt1," (b.AMEND_COUNT != b.NUMBER_A AND");
		strcat(chr_txn_stmt1," b.DATEOFBILLING != '");
		strcat(chr_txn_stmt1,chr_g_bl_upto_dt);
		strcat(chr_txn_stmt1,"') OR b.DATEOFBILLING = '");
		strcat(chr_txn_stmt1,chr_g_bl_upto_dt);
		strcat(chr_txn_stmt1,"')  AND ");
		
		/* changes by RAHUL Strat for Treps Charges */
    	strcat(chr_txn_stmt_treps," UNION ALL ");
		strcat(chr_txn_stmt_treps," SELECT 'T','999' AS INSTR_CODE,'CSGL' AS LOCATION_CD,'999' AS DEAL_CD,'999' AS INSTR_SUB_TYPE,");
		strcat(chr_txn_stmt_treps," '999' AS DL_CLASS,'INR' AS CURRENCY_CD,NULL,NULL,b.DATEOFBILLING,");
		strcat(chr_txn_stmt_treps," 0,"); 
		strcat(chr_txn_stmt_treps," 0,0,0,b.ROWID,b.AMOUNT,");
		strcat(chr_txn_stmt_treps," 'T' AS HISFLG,'M'");
		strcat(chr_txn_stmt_treps," FROM CUSTODY_TREPS_CHARGES b,MT_CLIENT c,sys_ivcontrolparam d ");
		strcat(chr_txn_stmt_treps," WHERE b.CLIENT = '");
		strcat(chr_txn_stmt_treps,h_dl_client);
		strcat(chr_txn_stmt_treps,"' AND b.CLIENT = c.CLN_CODE ");
        strcat(chr_txn_stmt_treps," AND b.DEAL_DATE BETWEEN TO_DATE(TO_CHAR(to_date(");
	    strcat(chr_txn_stmt_treps," d.B_PREV_DATE,'dd/mm/yyyy hh24:mi:ss'),'dd/mm/yyyy')||'12:00:00','DD/MM/YYYY HH24:MI:SS')");
	    strcat(chr_txn_stmt_treps," AND TO_DATE(TO_CHAR(to_date('");
		strcat(chr_txn_stmt_treps, chr_g_bl_upto_dt);
		strcat(chr_txn_stmt_treps,"' ,'dd/mm/yyyy hh24:mi:ss'),'dd/mm/yyyy')||'23:59:59','DD/MM/YYYY HH24:MI:SS')");
		strcat(chr_txn_stmt_treps," AND b.DEAL_TYPE IN ('TPB','TPL') ");
		strcat(chr_txn_stmt_treps," AND b.AUTH_ON is not NULL ");  
        strcat(chr_txn_stmt_treps," AND b.DATEOFBILLING is NULL"); 			
		/* Rahul for treps charges end */

		/* Bageshri HB_IV_001 START */
		if(!strcmp(chr_l_bill_dep,"INP"))
		{
			strcat(chr_h_txn_stmt," (b.DATEOF_INPUT <= '");
			strcat(chr_h_txn_stmt,chr_h_bl_upto_dt);
			strcat(chr_h_txn_stmt,"')");
			strcat(chr_txn_stmt1," (b.DATEOF_INPUT <= '");
			strcat(chr_txn_stmt1,chr_h_bl_upto_dt);
			strcat(chr_txn_stmt1,"')) ");
		}
		else
		{
			strcat(chr_h_txn_stmt," (b.INSTRUMENT_DT IS NOT NULL AND b.INSTRUMENT_DT<= '");
			strcat(chr_h_txn_stmt,chr_h_bl_upto_dt);
			strcat(chr_h_txn_stmt,"')");
			strcat(chr_txn_stmt1," (b.INSTRUMENT_DT IS NOT NULL AND b.INSTRUMENT_DT<= '");
			strcat(chr_txn_stmt1,chr_h_bl_upto_dt);
			strcat(chr_txn_stmt1,"')) ");
		}

		/* Bageshri HB_IV_001 END */

		chr_l_param_dep = strtok_r(chr_l_param_code,";",&chr_newtdep);

			while((chr_l_param_dep != (char *)NULL) && (strlen(chr_l_param_dep) > 0))
		{
			if(strcmp(chr_l_param_dep,"LOCATION") == 0)
			{
				if(int_firstfound)
					strcat(chr_txn_stmt1, ",2");
				else
				{
					strcat(chr_txn_stmt1," ORDER BY ");
					strcat(chr_txn_stmt1, "2");
					int_firstfound = 1;
				}
			}
			else if(strcmp(chr_l_param_dep,"PRODUCT") == 0)
			{
				if(int_firstfound)
					strcat(chr_txn_stmt1, ",4");
				else
				{
					strcat(chr_txn_stmt1," ORDER BY ");
					strcat(chr_txn_stmt1, "4");
					int_firstfound = 1;
				}
			}
			else if(strcmp(chr_l_param_dep,"DEALCD") == 0)
			{
				if(int_firstfound)
					strcat(chr_txn_stmt1, ",3");
				else
				{
					strcat(chr_txn_stmt1," ORDER BY ");
					strcat(chr_txn_stmt1, "3");
					int_firstfound = 1;
				}
			}
			else if(strcmp(chr_l_param_dep,"DEALTYPE") == 0)
			{
				if(int_firstfound)
					strcat(chr_txn_stmt1, ",5");
				else
				{
					strcat(chr_txn_stmt1," ORDER BY ");
					strcat(chr_txn_stmt1, "5");
					int_firstfound = 1;
				}
			}
			if(chr_newtdep == (char *)NULL)
				strcpy(chr_l_param_dep, APL_NULL_STRING);
			else
				chr_l_param_dep = strtok_r(NULL,";",&chr_newtdep); 
		}
			
		strcpy(chr_l_param_code,chr_h_param_code);
		strcat(chr_h_txn_stmt,chr_txn_stmt_treps);      
		//strcat(chr_h_txn_stmt,APL_NULL_STRING);    
		strcat(chr_h_txn_stmt,chr_txn_stmt1);
		strcat(chr_h_txn_stmt,APL_NULL_STRING);

		printf("\n 4102 No of / No of=|%s|\n", chr_h_txn_stmt);

		EXEC SQL PREPARE S FROM :chr_h_txn_stmt;

		EXEC SQL DECLARE trcnt_cur CURSOR FOR S;

		EXEC SQL OPEN trcnt_cur;

		if(sqlca.sqlcode < 0)
		{
			fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			int_bl_err_level = 1;
			*int_p_retstat = IV_CRITCAL_ERROR_IND;
		}

		IS_ANY_ORA_ERROR;

		int_is_trcnt_cur_open = 1; 
		int_fetch_cnt = 0;
		
		for( ; ; )
		{
		 	memset(chr_l_treps_ind,'\0',2);  /* new changes for TREPS billing */
			memset(h_instr_code,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
			memset(chr_h_instr_ccy,APL_NULL_CHAR,APL_CCYCODE_LEN);
			memset(h_loccode,APL_NULL_CHAR,APL_LOCNCODE_LENGTH);
			memset(h_dealcd,APL_NULL_CHAR,IV_DLCD_LEN);
			memset(h_prodateype,APL_NULL_CHAR,IV_PRODTYPE_LEN);
			memset(h_dealclass,APL_NULL_CHAR,IV_DLTYPE_LEN);
			h_reapired_ind = NULL; 
			memset(h_verfied_with,APL_NULL_CHAR,IV_VERWITH_LEN);
			memset(chr_h_bill_dt,APL_NULL_CHAR,APL_DATE_LEN);
			dbl_h_late_days = 0;
			h_amend_count = 0;
			h_number_a = 0;
			h_number_b = 0;
			h_amt = 0.0;
			memset(h_ora_rowid,APL_NULL_CHAR,APL_ROWID_LEN);
			chr_h_hisflg =NULL;
			h_entry =NULL;
			
			

			EXEC SQL FETCH trcnt_cur 
			INTO  :chr_l_treps_ind,    /* new changes for TREPS billing */
			:h_instr_code:i_instr_code,
					:h_loccode:i_loccode,
					:h_dealcd:i_dealcd,
					:h_prodateype:i_prodateype,
					:h_dealclass:i_dealclass,
					:chr_h_instr_ccy:i_instr_ccy,
					:h_reapired_ind:i_reapired_ind,
					:h_verfied_with:i_verfied_with,
					:chr_h_bill_dt:i_bill_date,
					:dbl_h_late_days:i_late_days,
					:h_amend_count:i_amend_count,
					:h_number_a:i_number_a,
					:h_number_b:i_number_b,
					:h_ora_rowid,
					:h_amt:i_amt,
					:chr_h_hisflg,
					:h_entry;

			if(sqlca.sqlcode == 1403)
			{
				if(int_fetch_cnt > 0)
				{
					/* HDFCIV_004 Rohit No Admin charges for India specific */
					IF_COND_NOT_EXISTS("ADMIN_CHARGE","NO_TXN_ADMIN")
					{
						if ((strcmp(chr_l_adm_charge_basis,"COUNTERVALUE PER TXN") == 0) && 	
								(strcmp(chr_l_adm_fee_basis,"COUNTERVALUE PER TXN") == 0))
         			{					
							tot_adm_charge_quantity = tot_adm_charge_quantity * g_exchg_rt_fee_bl;
                     tot_adm_fee_quantity = tot_adm_fee_quantity * g_exchg_rt_fee_bl;
                     l_round_val = 0.0;
                     CO_Round(tot_adm_charge_quantity , int_g_blccy_decimallen, &l_round_val);
                     tot_adm_charge_quantity = l_round_val;
                     l_round_val = 0.0;
                     CO_Round(tot_adm_fee_quantity , int_g_blccy_decimallen, &l_round_val);
                     tot_adm_fee_quantity = l_round_val;
                     l_round_val = 0.0;
							CO_Round(tot_adm_txn_ins, int_g_blccy_decimallen, &l_round_val);
                     tot_adm_txn_ins= l_round_val;
                     l_round_val = 0.0;
						   if (tot_adm_txn_ins > 0)
							{

                     	if(APL_FAILURE == IV_Mod_NewIVTRANSAC(h_dl_client, ADM_TXN_FEE_IND,'I',chr_h_param_code, proc_data, tot_adm_txn_ins,tot_adm_charge_quantity, chr_g_bl_ccycode, tot_adm_fee_quantity, p_mstclt_a,chr_h_txnsrvind, &int_retstat,l_debug_info_ptr))
                     	{
                        	int_bl_err_level = 1;
                        	if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
                        	{
                           	 CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                           	CO_FreeErrLst(l_debug_info_ptr);
                        	}
                        	*int_p_retstat = int_retstat;
                        	APL_GOBACK_FAIL;
                     	}
							}
							

							if (strcmp(h_dl_client,p_mstclt_a) == 0)
							{
								if(APL_FAILURE == IV_Mod_NewIVTRANSAC(p_mstclt_a, ADM_TXN_FEE_IND,'S', chr_h_param_code, proc_data, 
									tot_adm_txn_ins,tot_adm_charge_quantity, chr_g_bl_ccycode, tot_adm_fee_quantity, p_mstclt_a,
									chr_h_txnsrvind,&int_retstat,l_debug_info_ptr))
								{
									int_bl_err_level = 1;
                       	   if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
                          	{
                             	 CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                             		CO_FreeErrLst(l_debug_info_ptr);
                          	}
                          	*int_p_retstat = int_retstat;
                          	APL_GOBACK_FAIL;
                       	}
							}
							tot_adm_fee_quantity = 0.0;
                     tot_adm_charge_quantity = 0.0;
                     tot_adm_txn_ins = 0.0;
						
							if (chr_g_bl_gen == 'M')
							{	
								
								tot_adm_cons_charge_quantity  = tot_adm_cons_charge_quantity * h_exchg_rt_mstfee_bl;
                     	tot_adm_cons_fee_quantity = tot_adm_cons_fee_quantity * h_exchg_rt_mstfee_bl;
                     	l_round_val = 0.0;
                     	CO_Round(tot_adm_cons_charge_quantity , int_h_mst_bl_decimallen, &l_round_val);
                     	tot_adm_cons_charge_quantity = l_round_val;
                     	l_round_val = 0.0;
                     	CO_Round(tot_adm_cons_fee_quantity , int_h_mst_bl_decimallen, &l_round_val);
                     	tot_adm_cons_fee_quantity = l_round_val;
                     	l_round_val = 0.0;
                     	CO_Round(tot_adm_txn_cons_ins , int_h_mst_bl_decimallen, &l_round_val);
                     	tot_adm_txn_cons_ins = l_round_val;
                     	l_round_val = 0.0;
                     	if(APL_FAILURE == IV_Mod_NewIVTRANSAC(h_dl_client, ADM_TXN_FEE_IND,'S',chr_h_param_code, chr_prev_param_str,
                       		tot_adm_txn_cons_ins, tot_adm_cons_charge_quantity, chr_mst_bl_ccycode, tot_adm_cons_fee_quantity, 
									p_mstclt_a, chr_h_txnsrvconsind, &int_retstat,l_debug_info_ptr))
                     	{
                       	 	int_bl_err_level = 1;
                        	if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
                        	{
                           	 CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                           	CO_FreeErrLst(l_debug_info_ptr);
                        	}
                        	*int_p_retstat = int_retstat;
                        	APL_GOBACK_FAIL;
                     	}
                     	tot_adm_cons_fee_quantity = 0.0;
                     	tot_adm_cons_charge_quantity = 0.0;
                     	tot_adm_txn_cons_ins = 0.0;		
							}
						}
					}
					/* HDFCIV_004 Rohit Admin Charges End Here */

					strcpy(chr_acct_str,p_cltt_str);
					
					srv_charge = 0.0;
					int_retstat = IV_SUCCESS;

					printf("\n siva 1 chr_prev_param_str is %s",chr_prev_param_str);
					printf("\n siva 1 chr_h_param_code is %s",chr_h_param_code);
					//printf("\n no_of_trades is %d",no_of_trades); Changes done for AIX Migration
					printf("\n no_of_trades is %lf",no_of_trades);
					printf("\n chr_l_bill_dep is %s ",chr_l_bill_dep);
					if(APL_FAILURE == IV_Proc_CalcFee(chr_l_treps_ind_previos,chr_acct_str,TXNFEE,chr_prev_param_str,APL_NULL_STRING,
								chr_h_param_code,no_of_trades,no_of_trades,chr_l_charge_type,chr_l_fee_type,
								&srv_charge,l_iv_data_struct_h_dlgrp,'I',p_mstclt_a,chr_l_charge_basis,chr_l_fee_basis,
								chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
					{
						if(int_retstat == IV_CRITCAL_ERROR_IND)
						{
							fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
							fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
							fflush(fp);
							int_bl_err_level = 1;
							if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
							{
								CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
								CO_FreeErrLst(l_debug_info_ptr);
							}
							*int_p_retstat = int_retstat;
						}
					}
					
					if(srv_charge > 0)
						tot_txn_chg += srv_charge;
					/* added by siva.ganapathi*/

					/*Added by siva.ganapathi for Annexures on  02/06/2009 -- started*/

					/*printf("\n before calling IV_Proc_CalcCommAmt fee basis			::: %s",chr_l_fee_basis);
					printf("\n before calling IV_Proc_CalcCommAmt charge basis		::: %s",chr_l_charge_basis);
					printf("\n before calling IV_Proc_CalcCommAmt clientcode		::: %s",h_dl_client);
					printf("\n before calling IV_Proc_CalcCommAmt chr_l_bill_dep	::: %s",chr_l_bill_dep);
					printf("\n before calling IV_Proc_CalcCommAmt billdate			::: %s",chr_g_bl_upto_dt);
					printf("\n before calling IV_Proc_CalcCommAmt srv_charge		::: %f",srv_charge);
					printf("\n before calling IV_Proc_CalcCommAmt no_of_trades		::: %f",no_of_trades);
					printf("\n before calling IV_Proc_CalcCommAmt chr_prev_param_str :: %s",chr_prev_param_str);
					printf("\n before calling IV_Proc_CalcCommAmt chr_h_param_code  ::: %s",chr_h_param_code);*/
					/*Modified by siva.ganapathi for ISKB_2323*/
					if(no_of_trades > 0 && srv_charge > 0 )
					{	
				      printf("\n 6939 chr_l_treps_ind_previos %s",chr_l_treps_ind_previos);
					  if(strcmp(chr_l_treps_ind_previos,"T") != 0)
					  {	  
					  
						if(APL_FAILURE == IV_Proc_CalcCommAmt(chr_l_fee_basis,chr_l_charge_basis,h_dl_client,chr_l_bill_dep,chr_g_bl_upto_dt,srv_charge,no_of_trades,chr_prev_param_str,chr_h_param_code,"I",&int_retstat,l_debug_info_ptr))	
						{
								printf("\n Error occuered when updating the Comm_amt in Dl_deal and dl_hisdeal");
						}
					  }
					  else
					  {
						
						if(APL_FAILURE == IV_Proc_CalcCommAmtForTreps(chr_l_fee_basis,chr_l_charge_basis,h_dl_client,chr_g_bl_upto_dt,srv_charge,no_of_trades,chr_prev_param_str,chr_h_param_code,"I",&int_retstat,l_debug_info_ptr))	
						{
								printf("\n Error occuered when updating the Comm_amt in Custody TABLE");
						}
						
					  }
						
						
					}
					/*Added by siva.ganapathi for Annexures on  02/06/2009 -- Ended*/


					strcpy(chr_acct_str,p_cltt_str);
						
					/* HDFCIV_004 Rohit No Admin charges for India specific */
					IF_COND_NOT_EXISTS("ADMIN_CHARGE","NO_TXN_ADMIN")
					{
						if((strcmp(chr_l_adm_charge_basis,"COUNTERVALUE") == 0)
							 && (strcmp(chr_l_adm_fee_basis,"COUNTERVALUE") == 0))
						{
							adm_chg_quantity = tot_credit_indr;
							adm_fee_quantity = tot_credit_indr;
							int_retstat = IV_SUCCESS;
							srv_charge = 0.0;
   					
							if(APL_FAILURE == IV_Proc_CalcFee("O",chr_acct_str,ADM_TXN_FEE_IND,chr_prev_param_str,
										APL_NULL_STRING,chr_h_param_code,adm_fee_quantity,adm_chg_quantity,
										chr_l_adm_charge_type,chr_l_adm_fee_type,&srv_charge,l_iv_data_struct_h_dladmgrp,
										'I',p_mstclt_a,chr_l_adm_charge_basis,chr_l_adm_fee_basis,chr_h_srv_ind,&int_retstat,
										l_debug_info_ptr))
							{
								if(int_retstat == IV_CRITCAL_ERROR_IND)
								{
									fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
									fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
									fflush(fp);
									int_bl_err_level = 1;
									if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
									{
										CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
										CO_FreeErrLst(l_debug_info_ptr);
									}
									*int_p_retstat = int_retstat;
								}
							}
							
							if(srv_charge > 0)
							{
								
								tot_adm_txn_chg += srv_charge; 
							}
						}
					}
					/* HDFCIV_004 Rohit Admin Charges End Here */
					
					
				}
				break;
			}

			int_fetch_cnt++;
			
			int_retstat = IV_SUCCESS;
		/*CHANGES START FOR SKIP UPDATION TO DATE OF BILLING FOR TREPS CHARGES START BY RAHUL */
	 	if(strcmp(chr_l_treps_ind,"T") != 0)    /* For trpes Charges we are ignoring for update DL_deal Data*/
		{			
			if ( APL_FAILURE == IV_Proc_TransactionFn(h_dealclass, &int_retstat, l_debug_info_ptr) )
			{
				if(int_retstat == IV_CRITCAL_ERROR_IND)
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}
				
				int_retstat = IV_SUCCESS;
				if(APL_FAILURE == IV_Mod_BillDtForTrade(h_dl_client,0.00,h_ora_rowid,chr_h_hisflg, chr_l_bill_dep, &int_retstat,l_debug_info_ptr))
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}
			}
			else
			{
				int_retstat = IV_SUCCESS;
				if(APL_FAILURE == IV_Mod_BillDtForTrade(h_dl_client,h_amend_count,h_ora_rowid,chr_h_hisflg,chr_l_bill_dep, &int_retstat,l_debug_info_ptr))
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}
				int_fetch_cnt--; 
				continue;
			}
 	   }
	   else
	   {
		    /*  For TREPS Charges we are going to update CUSTODY_TREPS_CHARGES BILLING_DATE  START*/  
		       int_retstat = IV_SUCCESS;
				if(APL_FAILURE == IV_Mod_Trpes_BillDate(h_dl_client,&int_retstat,l_debug_info_ptr))
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}
		   printf("fetch before count is int_fetch_cnt |%d|",int_fetch_cnt);
		      //int_fetch_cnt--; 
				//continue;
			printf("fetch count is int_fetch_cnt |%d|",int_fetch_cnt);	
		    /*  For TREPS Charges we are going to update CUSTODY_TREPS_CHARGES BILLING_DATE  END*/
	   }
				
			int_retstat = IV_SUCCESS;
			int_repairfeeexists = 0; 
			int_manualtrdexists = 0; 

			if(APL_FAILURE == IV_Chk_IsFeeExists(p_cltt_str,REPAIRFEE,&int_repairfeeexists,&int_retstat,l_debug_info_ptr))
			{
				if(int_retstat == IV_CRITCAL_ERROR_IND)
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
				}
				*int_p_retstat = int_retstat;
			}

			int_retstat = IV_SUCCESS;

			if(APL_FAILURE == IV_Chk_IsFeeExists(p_cltt_str,MANUALDEALFEE,&int_manualtrdexists,&int_retstat,l_debug_info_ptr))
			{
            			if(int_retstat == IV_CRITCAL_ERROR_IND)
            			{
               				fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
               				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
               				fflush(fp);
               				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
               				{
                  				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                  				CO_FreeErrLst(l_debug_info_ptr);
              				}
           			 }
            			*int_p_retstat = int_retstat;
         		 }

         int_retstat = IV_SUCCESS;

		
	if (int_g_viber_condexists != 0)
	{
			int_viberfreefeeexists = 0;

                        if(APL_FAILURE == IV_Chk_IsFeeExists(p_cltt_str,VIBERFREEFEE,&int_viberfreefeeexists,&int_retstat,l_debug_info_ptr))
                        {
                                if(int_retstat == IV_CRITCAL_ERROR_IND)
                                {
                                        fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
                                        fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__
);
                                        fflush(fp);
                                        if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
                                        {
                                                CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                                                CO_FreeErrLst(l_debug_info_ptr);
                                        }
                                }
                                *int_p_retstat = int_retstat;
                        }

                        int_retstat = IV_SUCCESS;
                        int_vibervpfeeexists = 0;


                        if(APL_FAILURE == IV_Chk_IsFeeExists(p_cltt_str,VIBERVPFEE,&int_vibervpfeeexists,&int_retstat,l_debug_info_ptr))
                        {
                                if(int_retstat == IV_CRITCAL_ERROR_IND)
                                {
                                 	fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
                                      fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
                                        fflush(fp);
                                        if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
                                        {
                                                CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                                                CO_FreeErrLst(l_debug_info_ptr);
                                        }
                                }
                                *int_p_retstat = int_retstat;
                        }

                        int_retstat = IV_SUCCESS;
	}


			int_amendfeeexists = 0; 

			if(APL_FAILURE == IV_Chk_IsFeeExists(p_cltt_str,AMEND_FEE_IND,&int_amendfeeexists,&int_retstat,l_debug_info_ptr))
			{
				if(int_retstat == IV_CRITCAL_ERROR_IND)
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}
			}

			

			
			
			if(chr_regen_flg == 'Y')
			{
				nNoAmendments += h_number_a - h_number_b;
			}
			else
			{
				nNoAmendments += h_amend_count - h_number_a;

			/*CHANGES START FOR SKIP UPDATION TO DATE OF BILLING FOR TREPS CHARGES START BY RAHUL */
			if(strcmp(chr_l_treps_ind,"T") != 0)    /* For trpes Charges we are ignoring for update DL_deal Data*/
		    {	
			      int_retstat = IV_SUCCESS;
				if ( APL_FAILURE == IV_Mod_Num2DLTrade(h_ora_rowid, chr_h_hisflg, h_number_a, 
															&int_retstat, l_debug_info_ptr) )
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}

				int_retstat = IV_SUCCESS;
				if ( APL_FAILURE == IV_Mod_Num1DLTrade(h_ora_rowid, chr_h_hisflg, h_amend_count, 
															&int_retstat, l_debug_info_ptr) )
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}
   			}  
			
			}
			
			
			   
			   	int_h_sfe_param = 0;
               if (chr_h_hisflg == 'L')
                {
               EXEC SQL SELECT COUNT(*) INTO :int_h_sfe_param
                    FROM DL_SFEREJ A,DL_DEAL B
                    WHERE A.UNIQ_IDENT_NO = B.UNIQ_IDENT_NO
                    AND A.CLIENT = B.CLIENT
						  AND A.IDENTIY_NO = B.IDENTIY_NO
						  AND B.DEAL_STAT = 'CS' 
						  AND  B.ROWID = :h_ora_rowid ;

                 IS_ANY_ORA_ERROR
                 }
                if (chr_h_hisflg == 'H')
                  {
               EXEC SQL SELECT COUNT(*) INTO :int_h_sfe_param
                    FROM DL_SFEREJ A,DL_HISDEAL B
                    WHERE A.UNIQ_IDENT_NO = B.UNIQ_IDENT_NO
                    AND A.CLIENT = B.CLIENT
						  AND A.IDENTIY_NO = B.IDENTIY_NO
						  AND  B.ROWID = :h_ora_rowid ;

                 IS_ANY_ORA_ERROR
                 }
                if (int_h_sfe_param > 0 )
                     {
                       nreapired_ind++;
                       CO_ProcMonitor(TechRep,"Trade Picked for Repair",NULL,NULL);
                     }
			
			

			
			if(h_entry == BILLABLE_DEAL_IND)
				nManualTrd++;

	
	if (int_g_viber_condexists != 0)
	{
		if ( strcmp(h_dealcd,"1") == 0 || strcmp(h_dealcd, "2") == 0)
		{
		int_l_free_trcode = 1;
		}
		else
		{
		int_l_free_trcode = 0;
		}

		if ((strcmp(h_verfied_with,"VIB") == 0) ||  (strcmp(h_verfied_with,"EVI") == 0))
		{
		fprintf(TechRep,"transaction found for %s\n",h_verfied_with);
			if (int_l_free_trcode == 1)
			{
			nNoViberFrees++;
			}
			else
			{
			nNoViberVPs++;
			}
		}
	}

			
			if(dbl_h_late_days <= g_late_txn_days) 
				nLateTxn++;

			int_l_free_trcode = 0;
			memset(proc_data, APL_NULL_CHAR, IV_PARAM_LEN);
			chr_l_param_dep = strtok_r(chr_l_param_code,";",&chr_tdep);
			memset(chr_where_stmt,APL_NULL_CHAR,500);			

			/* shailesh 12-06-2008 retrofitted  */
			while((chr_l_param_dep != (char *)NULL) && (strlen(chr_l_param_dep) > 0))
			{
				if(strcmp(chr_l_param_dep,"LOCATION") == 0)
				{
					if(strlen(proc_data) != 0)
						strcat(proc_data,";");
					strcat(proc_data,h_loccode);
					if(strlen(chr_where_stmt) == 0)
						strcat(chr_where_stmt, " and a.instr_code = b.instr_code ");
               strcat(chr_where_stmt," and b.location_cd = '");
               strcat(chr_where_stmt,h_loccode);
               strcat(chr_where_stmt,"'");
               chr_l_instrflg = 'Y';
				}
				else if(strcmp(chr_l_param_dep,"PRODUCT") == 0)
				{
					if(strlen(proc_data) != 0)
						strcat(proc_data,";");
					strcat(proc_data,h_prodateype);
					if(strlen(chr_where_stmt) == 0)
						strcat(chr_where_stmt, " and a.instr_code = b.instr_code ");
               strcat(chr_where_stmt, " and rtrim(a.INSTR_SUB_TYPE) = '");
               strcat(chr_where_stmt,h_prodateype);
               strcat(chr_where_stmt,"'");
               chr_l_instrflg = 'Y';
				}
				else if(strcmp(chr_l_param_dep,"DEALCD") == 0)
				{
					if(strlen(proc_data) != 0)
						strcat(proc_data,";");
					strcat(proc_data,h_dealcd);
						
					if ( strcmp(h_dealcd,"1") == 0 || strcmp(h_dealcd, "2") == 0)
					{
						int_l_free_trcode = 1;
					}
					else
					{
						int_l_free_trcode = 0;
					}
				}
				else if(strcmp(chr_l_param_dep,"DEALTYPE") == 0)
				{
					if(strlen(proc_data) != 0)
						strcat(proc_data,";");
					strcat(proc_data,h_dealclass);
				}
				if(chr_tdep == (char *)NULL)
				   strcpy(chr_l_param_dep, APL_NULL_STRING);	
				else
					chr_l_param_dep = strtok_r(NULL,";",&chr_tdep);
			}

			if(strlen(proc_data) == 0)
			{
				strcpy(proc_data,";");
			}


			strcpy(chr_l_param_code,chr_h_param_code);
			strcat(proc_data,APL_NULL_STRING);

			printf("proc_data:|%s||%s|",proc_data,h_dl_client);

			/* HDFCIV_004 Rohit No Admin charges for India specific */
			IF_COND_NOT_EXISTS("ADMIN_CHARGE","NO_TXN_ADMIN")
			{
				if ((strcmp(chr_l_adm_charge_basis,"COUNTERVALUE PER TXN") == 0) && (strcmp(chr_l_adm_fee_basis,"COUNTERVALUE PER TXN") == 0))
				{
					l_exchg_rt = 1.0;
					if (strcmp(chr_h_instr_ccy, chr_g_fee_ccycode) != 0)
					{
						int_retstat = IV_SUCCESS;
						if(APL_FAILURE == IV_Rtv_ExchRate(chr_h_instr_ccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,&l_exchg_rt, &int_retstat,l_debug_info_ptr))
						{
							fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",chr_h_instr_ccy,chr_g_fee_ccycode);
							fflush(fp);
							int_bl_err_level = 1;
							*int_p_retstat = int_retstat;
						}
					}

					l_round_val = 0.0;
					CO_Round(h_amt * l_exchg_rt, int_g_ccy_decimallen, &l_round_val);
					dbl_h_countervalue = l_round_val;
					if (chr_g_bl_gen == 'M')
					{

						
						l_exchg_rt = 1.0;
						if (strcmp(chr_h_instr_ccy, chr_mst_fee_ccycode) != 0)
						{
							int_retstat = IV_SUCCESS;
							if(APL_FAILURE == IV_Rtv_ExchRate(chr_h_instr_ccy,chr_mst_fee_ccycode,chr_g_bl_upto_dt,&l_exchg_rt, &int_retstat,l_debug_info_ptr))
							{
								fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",chr_h_instr_ccy,chr_mst_fee_ccycode);
								fflush(fp);
								int_bl_err_level = 1;
								*int_p_retstat = int_retstat;
							}
						}

						 

						l_round_val = 0.0;
						CO_Round(h_amt * l_exchg_rt, int_h_mst_fee_decimallen, &l_round_val);
						dbl_h_mstcountervalue = l_round_val;
					}


					if (int_fetch_cnt == 1)
					{
							strcpy(chr_prev_param_str,proc_data);
					}

					if (strcmp(chr_prev_param_str,proc_data) != 0)
					{
							
						tot_adm_charge_quantity = tot_adm_charge_quantity * g_exchg_rt_fee_bl;
						tot_adm_fee_quantity = tot_adm_fee_quantity * g_exchg_rt_fee_bl;
						l_round_val = 0.0;
						CO_Round(tot_adm_charge_quantity , int_g_blccy_decimallen, &l_round_val);
						tot_adm_charge_quantity = l_round_val;
						l_round_val = 0.0;
						CO_Round(tot_adm_fee_quantity , int_g_blccy_decimallen, &l_round_val);
						tot_adm_fee_quantity = l_round_val;
						l_round_val = 0.0;
						CO_Round(tot_adm_txn_ins, int_g_blccy_decimallen, &l_round_val);
						tot_adm_txn_ins  = l_round_val;
						l_round_val = 0.0;
						
						if (tot_adm_txn_ins > 0)
						{

							if(APL_FAILURE == IV_Mod_NewIVTRANSAC(h_dl_client, ADM_TXN_FEE_IND,'I',chr_h_param_code, chr_prev_param_str, tot_adm_txn_ins, tot_adm_charge_quantity, chr_g_bl_ccycode, tot_adm_fee_quantity, p_mstclt_a,chr_h_txnsrvind, &int_retstat,l_debug_info_ptr))
							{
								int_bl_err_level = 1;
								if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
								{
									 CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
									CO_FreeErrLst(l_debug_info_ptr);
								}
								*int_p_retstat = int_retstat;
								APL_GOBACK_FAIL;
							}
						}
						if (strcmp(h_dl_client,p_mstclt_a) == 0)
						{
							if(APL_FAILURE == IV_Mod_NewIVTRANSAC(p_mstclt_a,  ADM_TXN_FEE_IND,'S',chr_h_param_code, chr_prev_param_str,
								tot_adm_txn_ins, tot_adm_charge_quantity, chr_g_bl_ccycode, tot_adm_fee_quantity,p_mstclt_a,chr_h_txnsrvind,
								&int_retstat,l_debug_info_ptr))
							{
								int_bl_err_level = 1;
								if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
								{
									CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
									CO_FreeErrLst(l_debug_info_ptr);
								}
								*int_p_retstat = int_retstat;
								APL_GOBACK_FAIL;
							}
						}
						
						tot_adm_fee_quantity = 0.0;
						tot_adm_charge_quantity = 0.0;
						tot_adm_txn_ins = 0.0;


						if (chr_g_bl_gen == 'M')
						{
							
							tot_adm_cons_charge_quantity  = tot_adm_cons_charge_quantity * h_exchg_rt_mstfee_bl;
							tot_adm_cons_fee_quantity = tot_adm_cons_fee_quantity * h_exchg_rt_mstfee_bl;
							l_round_val = 0.0;
							CO_Round(tot_adm_cons_charge_quantity , int_h_mst_bl_decimallen, &l_round_val);
							tot_adm_cons_charge_quantity = l_round_val;
							l_round_val = 0.0;
							CO_Round(tot_adm_cons_fee_quantity , int_h_mst_bl_decimallen, &l_round_val);
							tot_adm_cons_fee_quantity = l_round_val;
							l_round_val = 0.0;
							CO_Round(tot_adm_txn_cons_ins , int_h_mst_bl_decimallen, &l_round_val);
							tot_adm_txn_cons_ins = l_round_val;
							l_round_val = 0.0;
							
							if(APL_FAILURE == IV_Mod_NewIVTRANSAC(h_dl_client, ADM_TXN_FEE_IND,'S',chr_h_param_code, chr_prev_param_str,
								tot_adm_txn_cons_ins, tot_adm_cons_charge_quantity, chr_mst_bl_ccycode, tot_adm_cons_fee_quantity,
								p_mstclt_a, chr_h_txnsrvconsind, &int_retstat,l_debug_info_ptr))
							{
								int_bl_err_level = 1;
								if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
								{
									CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
									CO_FreeErrLst(l_debug_info_ptr);
								}
								*int_p_retstat = int_retstat;
								APL_GOBACK_FAIL;
							}
							
							tot_adm_cons_fee_quantity = 0.0;
							tot_adm_cons_charge_quantity = 0.0;
							tot_adm_txn_cons_ins = 0.0;
						}
					}
					 srv_charge = 0.0;

				/* Adding condition for billing freq */
					if (dbl_h_countervalue >0)
					{
						strcpy(chr_h_txnsrvind,APL_NULL_STRING);
						memset(&l_iv_data_struct_h_dladmgrp, NULL, sizeof(IV_DATA_STRUCT_H));
						
						if(APL_FAILURE == IV_Proc_CalcFee("O",chr_acct_str,ADM_TXN_FEE_IND,proc_data,APL_NULL_STRING,
									chr_h_param_code,dbl_h_countervalue,dbl_h_countervalue,chr_l_adm_charge_type,
									chr_l_adm_fee_type,&srv_charge,l_iv_data_struct_h_dladmgrp,'I',p_mstclt_a,
									chr_l_adm_charge_basis,chr_l_adm_fee_basis,chr_h_txnsrvind,&int_retstat,l_debug_info_ptr))
						{
							if(int_retstat == IV_CRITCAL_ERROR_IND)
							{
								fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
								fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
								fflush(fp);
								int_bl_err_level = 1;
								if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
								{
									CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
									CO_FreeErrLst(l_debug_info_ptr);
								}
								*int_p_retstat = int_retstat;
							}
						}
						
						int_i_cnt = 0;
						if (strlen((l_iv_data_struct_h_dladmgrp+int_i_cnt)->proc_data) > 0)
						{
							
							strcpy(chr_h_txnsrvind,APL_NULL_STRING);
							 srv_charge = 0.0;

							if(APL_FAILURE == IV_Proc_CalcFee(chr_l_treps_ind,chr_acct_str,ADM_TXN_FEE_IND,
										(l_iv_data_struct_h_dladmgrp+int_i_cnt)->proc_data,APL_NULL_STRING,chr_h_param_code,
										dbl_h_countervalue, dbl_h_countervalue,chr_l_adm_charge_type,chr_l_adm_fee_type,
										&srv_charge,l_iv_data_struct_h_dladmgrp,'I',p_mstclt_a,chr_l_adm_charge_basis,
										chr_l_adm_fee_basis,chr_h_txnsrvind,&int_retstat,l_debug_info_ptr))
							{
								if(int_retstat == IV_CRITCAL_ERROR_IND)
								{
									fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
									fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
									fflush(fp);
									int_bl_err_level = 1;
									if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
									{
										 CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
										CO_FreeErrLst(l_debug_info_ptr);
									}
									*int_p_retstat = int_retstat;
								}
							}
							
							int_grp_cnt = 0;
							int_new_grp = 0;
							while(strlen((l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt)->proc_data) > 0)
							{
								if(strcmp((l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt)->proc_data,(l_iv_data_struct_h_dladmgrp+int_i_cnt)->proc_data) == 0)
								{
									int_new_grp=1;
									break;
								}
								++int_grp_cnt;
							}
							if (int_new_grp == 0)
							{
								memset((l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt)->proc_data,'\0',100);
								strcpy((l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt)->proc_data,(l_iv_data_struct_h_dladmgrp+int_i_cnt)->proc_data);
								memset((l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt)->param_flag,'\0',50);
								strcpy((l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt)->param_flag,(l_iv_data_struct_h_dladmgrp+int_i_cnt)->param_flag);
								(l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt)->chrg_quant = dbl_h_countervalue;
								(l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt)->fees_qty = dbl_h_countervalue;
								(l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt)->h_chrg = srv_charge;
								if(int_grp_cnt < 49)
								{
									memset((l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt+1)->proc_data,'\0',100);
									/* strcpy((l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt+1)->proc_data,'\0');*/
									strcpy((l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt+1)->proc_data,APL_NULL_STRING);
									memset((l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt+1)->param_flag,'\0',50);
									strcpy((l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt+1)->param_flag,APL_NULL_STRING);
									(l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt+1)->chrg_quant = 0;
									(l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt+1)->fees_qty = 0;
									(l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt+1)->h_chrg = 0;
								}

							}
							else
							{
								(l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt)->chrg_quant += dbl_h_countervalue;
								(l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt)->fees_qty += dbl_h_countervalue;
								(l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt)->h_chrg += srv_charge;
							}
						}
						else
						{
								tot_adm_charge_quantity = tot_adm_charge_quantity + dbl_h_countervalue;
								tot_adm_fee_quantity = tot_adm_fee_quantity + dbl_h_countervalue;
								if(srv_charge > 0)
								{
									tot_adm_txn_chg += srv_charge;
									tot_adm_txn_ins += srv_charge;
								}
						}
						memset(&l_iv_data_struct_h_dladmgrp, NULL, sizeof(IV_DATA_STRUCT_H));
					}
					if (dbl_h_mstcountervalue >0 )
					{

						
						strcpy(chr_h_txnsrvconsind,APL_NULL_STRING);
						memset(&l_iv_data_struct_h_dladmgrpcon, NULL, sizeof(IV_DATA_STRUCT_H));

						if(APL_FAILURE == IV_Proc_CalcFee("O",chr_mstacctstr,ADM_TXN_FEE_IND,proc_data,APL_NULL_STRING,
									chr_h_param_code,dbl_h_mstcountervalue,dbl_h_mstcountervalue,chr_l_adm_charge_type,
									chr_l_adm_fee_type,&srv_charge,l_iv_data_struct_h_dladmgrpcon,'C',p_mstclt_a,
									chr_l_adm_charge_basis,chr_l_adm_fee_basis,chr_h_txnsrvconsind,&int_retstat,l_debug_info_ptr))
						{
							if(int_retstat == IV_CRITCAL_ERROR_IND)
							{
								fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
								fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
								fflush(fp);
								int_bl_err_level = 1;
								if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
								{
									CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
									CO_FreeErrLst(l_debug_info_ptr);
								}
								*int_p_retstat = int_retstat;
							}
						}
						
						srv_charge = srv_charge * l_subbl_mstbl_rt;

						int_i_cnt = 0;
						if (strlen((l_iv_data_struct_h_dladmgrpcon+int_i_cnt)->proc_data) > 0)
						{
							
							strcpy(chr_h_txnsrvconsind,APL_NULL_STRING);
							 srv_charge = 0.0;

							if(APL_FAILURE == IV_Proc_CalcFee("O",chr_mstacctstr,ADM_TXN_FEE_IND,
										(l_iv_data_struct_h_dladmgrpcon+int_i_cnt)->proc_data,APL_NULL_STRING,
										chr_h_param_code, dbl_h_mstcountervalue, dbl_h_mstcountervalue, chr_l_adm_charge_type,
										chr_l_adm_fee_type,&srv_charge,l_iv_data_struct_h_dladmgrpcon,'C',p_mstclt_a,
										chr_l_adm_charge_basis,chr_l_adm_fee_basis,chr_h_txnsrvconsind,
										&int_retstat,l_debug_info_ptr))
							{
								if(int_retstat == IV_CRITCAL_ERROR_IND)
								{
									fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
									fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
									fflush(fp);
									int_bl_err_level = 1;
									if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
									{
										 CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
										CO_FreeErrLst(l_debug_info_ptr);
									}
									*int_p_retstat = int_retstat;
								}
							}
							
							srv_charge = srv_charge * l_subbl_mstbl_rt;

							int_grp_cnt = 0;
							int_new_grp = 0;
							while(strlen((l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt)->proc_data) > 0)
							{
								if(strcmp((l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt)->proc_data,(l_iv_data_struct_h_dladmgrpcon+int_i_cnt)->proc_data) == 0)
								{
									int_new_grp=1;
									break;
								}
								++int_grp_cnt;
							}
							if (int_new_grp == 0)
							{
								memset((l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt)->proc_data,'\0',100);
								strcpy((l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt)->proc_data,(l_iv_data_struct_h_dladmgrpcon+int_i_cnt)->proc_data);
								memset((l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt)->param_flag,'\0',50);
								strcpy((l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt)->param_flag,(l_iv_data_struct_h_dladmgrpcon+int_i_cnt)->param_flag);
								(l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt)->chrg_quant = dbl_h_mstcountervalue;
								(l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt)->fees_qty = dbl_h_mstcountervalue;
								(l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt)->h_chrg = srv_charge;
								if(int_grp_cnt < 49)
								{
									memset((l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt+1)->proc_data,'\0',100);
									//strcpy((l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt+1)->proc_data,'\0');
									strcpy((l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt+1)->proc_data,APL_NULL_STRING);
									memset((l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt+1)->param_flag,'\0',50);
									//strcpy((l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt+1)->param_flag,'\0');
									strcpy((l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt+1)->param_flag,APL_NULL_STRING);
									(l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt+1)->chrg_quant = 0;
									(l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt+1)->fees_qty = 0;
									(l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt+1)->h_chrg = 0;
								}

							}
							else
							{
								(l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt)->chrg_quant += dbl_h_mstcountervalue;
								(l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt)->fees_qty += dbl_h_mstcountervalue;
								(l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt)->h_chrg += srv_charge;
							}
						}
						else
						{
								tot_adm_cons_charge_quantity = tot_adm_cons_charge_quantity + dbl_h_mstcountervalue;
								tot_adm_cons_fee_quantity = tot_adm_cons_fee_quantity + dbl_h_mstcountervalue;
								if(srv_charge > 0)
								{
									tot_adm_txn_cons_chg += srv_charge;
									tot_adm_txn_cons_ins += srv_charge;
								}
						}
						memset(&l_iv_data_struct_h_dladmgrp, NULL, sizeof(IV_DATA_STRUCT_H));
					}

				}
			}
			/* HDFCIV_004 Rohit Admin Charges End Here */


            
			  Alert("chr_l_treps_ind_previos[%s],chr_l_treps_ind[%s]",chr_l_treps_ind_previos,chr_l_treps_ind);
			if(int_fetch_cnt == 1 || strcmp(chr_prev_param_str,proc_data) != 0 || (((strcmp(chr_l_treps_ind_previos,"T") == 0 && strcmp(chr_l_treps_ind,"T") != 0) ||(strcmp(chr_l_treps_ind_previos,"T") != 0 && strcmp(chr_l_treps_ind,"T") == 0)) && strcmp(chr_prev_param_str,proc_data) == 0 ))
			{
				if (int_fetch_cnt > 1)
				{
					strcpy(chr_acct_str,p_cltt_str);
					srv_charge = 0.0;
					int_retstat = IV_SUCCESS;
					if(APL_FAILURE == IV_Proc_CalcFee(chr_l_treps_ind_previos,chr_acct_str,TXNFEE,chr_prev_param_str,APL_NULL_STRING,
					    								chr_h_param_code,no_of_trades,no_of_trades,chr_l_charge_type,chr_l_fee_type,
					    								&srv_charge,l_iv_data_struct_h_dlgrp,'I',p_mstclt_a,chr_l_charge_basis,
														chr_l_fee_basis,chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
					{
						if(int_retstat == IV_CRITCAL_ERROR_IND)
						{
							fprintf(fp,"Error in accessing table for client %s. Please contact support\n", h_dl_client);
							fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
							fflush(fp);
							int_bl_err_level = 1;
							if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
							{
								CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
								CO_FreeErrLst(l_debug_info_ptr);
							}
							*int_p_retstat = int_retstat;
						}
					}
					/*Added by siva.ganapathi for Annexures on  02/06/2009 -- started*/
					/*printf("\n before calling IV_Proc_CalcCommAmt fee basis			::: %s",chr_l_fee_basis);
					printf("\n before calling IV_Proc_CalcCommAmt charge basis		::: %s",chr_l_charge_basis);
					printf("\n before calling IV_Proc_CalcCommAmt clientcode		::: %s",h_dl_client);
					printf("\n before calling IV_Proc_CalcCommAmt chr_l_bill_dep	::: %s",chr_l_bill_dep);
					printf("\n before calling IV_Proc_CalcCommAmt billdate			::: %s",chr_g_bl_upto_dt);
					printf("\n before calling IV_Proc_CalcCommAmt srv_charge		::: %f",srv_charge);
					printf("\n before calling IV_Proc_CalcCommAmt no_of_trades		::: %f",no_of_trades);
					printf("\n before calling IV_Proc_CalcCommAmt chr_prev_param_str :: %s",chr_prev_param_str);
					printf("\n before calling IV_Proc_CalcCommAmt chr_h_param_code  ::: %s",chr_h_param_code);*/
					/*Modified by siva.ganapathi for ISKB_2323*/
					if(no_of_trades > 0 && srv_charge > 0)
					{
					
                    if(strcmp(chr_l_treps_ind,"T") != 0)					
					{
						
					if(APL_FAILURE == IV_Proc_CalcCommAmt(chr_l_fee_basis,chr_l_charge_basis,h_dl_client,chr_l_bill_dep,chr_g_bl_upto_dt,srv_charge,no_of_trades,chr_prev_param_str,chr_h_param_code,"I",&int_retstat,l_debug_info_ptr))	
					{
							printf("\n Error occuered when updating the Comm_amt in Dl_deal and dl_hisdeal");
					}
					
					}
					else
					{
						
						if(APL_FAILURE == IV_Proc_CalcCommAmtForTreps(chr_l_fee_basis,chr_l_charge_basis,h_dl_client,chr_g_bl_upto_dt,srv_charge,no_of_trades,chr_prev_param_str,chr_h_param_code,"I",&int_retstat,l_debug_info_ptr))	
						{
								printf("\n Error occuered when updating the Comm_amt in Custody TABLE");
						}
					}
					
					
					
					}
					/*Added by siva.ganapathi for Annexures on  02/06/2009 -- Ended*/

					if(srv_charge > 0)
						tot_txn_chg += srv_charge;
					strcpy(chr_acct_str,p_cltt_str);
			
					/* HDFCIV_004 Rohit No Admin charges for India specific */
					IF_COND_NOT_EXISTS("ADMIN_CHARGE","NO_TXN_ADMIN")
					{
						if((strcmp(chr_l_adm_charge_basis,"COUNTERVALUE") == 0) && 
							 (strcmp(chr_l_adm_fee_basis,"COUNTERVALUE") == 0))
						{
							adm_chg_quantity = tot_credit_indr;
							adm_fee_quantity = tot_credit_indr;
							int_retstat = IV_SUCCESS;
							srv_charge = 0.0;
							
							if (int_l_free_trcode == 0)
							{
								
								if(APL_FAILURE == IV_Proc_CalcFee("O",chr_acct_str,ADM_TXN_FEE_IND,chr_prev_param_str,
											APL_NULL_STRING,chr_h_param_code,adm_fee_quantity,adm_chg_quantity,
											chr_l_adm_charge_type,chr_l_adm_fee_type,&srv_charge,l_iv_data_struct_h_dladmgrp,
											'I',p_mstclt_a,chr_l_adm_charge_basis,chr_l_adm_fee_basis,chr_h_srv_ind,
											&int_retstat,l_debug_info_ptr))
								{
									if(int_retstat == IV_CRITCAL_ERROR_IND)
									{	
										fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
										fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
										fflush(fp);
										int_bl_err_level = 1;
										if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
										{
											CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
											CO_FreeErrLst(l_debug_info_ptr);
										}
										*int_p_retstat = int_retstat;
									}
								}
								
								if(srv_charge > 0)
									tot_adm_txn_chg += srv_charge;
								
							}
						}		
					}
					/* HDFCIV_004 Rohit Admin Charges End Here */
               
				}

				strcpy(chr_prev_param_str,proc_data);
				strcpy(chr_prev_where_stmt, chr_where_stmt);
				memset(chr_l_treps_ind_previos,'\0',2); 
			    strcpy(chr_l_treps_ind_previos,chr_l_treps_ind);
				tot_credit_indr = 0;
				no_of_trades = 1;
				
				l_exchg_rt = 1.0;
             
				if (strcmp(chr_h_instr_ccy, chr_g_fee_ccycode) != 0)                   
				{
					int_retstat = IV_SUCCESS;
					if(APL_FAILURE == IV_Rtv_ExchRate(chr_h_instr_ccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,&l_exchg_rt, &int_retstat,l_debug_info_ptr))																								  

					{
						fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",chr_h_instr_ccy,chr_g_fee_ccycode);
																							 

						fflush(fp);
						int_bl_err_level = 1;
						*int_p_retstat = int_retstat;
					}
				}
				

                                l_round_val = 0.0;
                                CO_Round(h_amt * l_exchg_rt, int_g_ccy_decimallen, &l_round_val);
                                tot_credit_indr += l_round_val;

			} 
			else
			{
				memset(chr_l_treps_ind_previos,'\0',2); 
			    strcpy(chr_l_treps_ind_previos,chr_l_treps_ind);
				
				no_of_trades++;
				l_exchg_rt = 1.0;
				if (strcmp(chr_h_instr_ccy, chr_g_fee_ccycode) != 0)    
				{
					int_retstat = IV_SUCCESS;
					if(APL_FAILURE == IV_Rtv_ExchRate(chr_h_instr_ccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,&l_exchg_rt, &int_retstat,l_debug_info_ptr))  
					{
						fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",chr_h_instr_ccy,chr_g_fee_ccycode);

						fflush(fp);
						int_bl_err_level = 1;
						*int_p_retstat = int_retstat;
					}
				}
				

                                l_round_val = 0.0;
                                CO_Round(h_amt * l_exchg_rt, int_g_ccy_decimallen, &l_round_val);
                                tot_credit_indr += l_round_val;
			}
		}

		EXEC SQL CLOSE trcnt_cur;
		int_is_trcnt_cur_open = 0;

		

		memset(chr_l_where_stmt,'\0',500);
		strcpy(chr_l_where_stmt," and clt_reqdel_ind = 'Y'");

		if(chr_l_instrflg == 'Y')
			strcat(chr_l_where_stmt," and b.instr_code = a.instr_code ");
		
		strcat(chr_l_where_stmt," and b.dl_class not in ('28','19','20','90','26','59','56') ");
		strcat(chr_l_where_stmt," and INFORMATON IS NULL ");
		int_retstat = IV_SUCCESS;
		/*if(APL_FAILURE == IV_Proc_CalcNoTrd(h_dl_client,chr_l_where_stmt,&nNoDeletions,'N',chr_l_instrflg,'N',&int_retstat,l_debug_info_ptr))*/
		if(APL_FAILURE == IV_Proc_CalcNoTrd(h_dl_client,chr_l_where_stmt,&nNoDeletions,'N',chr_l_instrflg,'N',chr_l_bill_dep,&int_retstat,l_debug_info_ptr))
		{
			fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}
			*int_p_retstat = int_retstat;
		}
	
		/* Calculate No of trades for Bucket transaction	HDFCIV_004	Rohit	*/
		int_retstat = IV_SUCCESS;
		printf("Bucket Transaction for client:|%s|\n",h_dl_client);
		if(APL_FAILURE == IV_Proc_CalcBuckTxnNo(h_dl_client,&nNoBucketTxn,&int_retstat,l_debug_info_ptr))
		{
			fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}
			*int_p_retstat = int_retstat;
		}
	
	/************************************************************************************************/
		
		/* Calculate No of MutualFund transactions **** vinay kalaskar ******/
	   
		int_retstat = IV_SUCCESS;
		
		printf("Entering IV_Proc_CalcMutualFundNo:|%s||%s||%s|\n",chr_acct_str,p_mstclt_a,h_dl_client);
		/*if(APL_FAILURE == IV_Proc_CalcMutualFundNo(chr_acct_str,p_mstclt_a,h_dl_client,
										chr_h_bl_upto_dt,&int_retstat,l_debug_info_ptr))*/
		if(APL_FAILURE == IV_Proc_CalcMutualFundNo(chr_acct_str,p_mstclt_a,h_dl_client,
										chr_h_bl_upto_dt, chr_l_bill_dep,&int_retstat,l_debug_info_ptr))
		{
			fprintf(fp,"Error in IV_Proc_CalcMutualFundNo for  %s. Please contact support\n",h_dl_client);
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}
				*int_p_retstat = int_retstat;
		}
	
	/***********************************************************************************************/	
		
	}
	else if(strcmp(chr_l_fee_basis,"COUNTERVALUE PER TXN") == 0 &&
	    strcmp(chr_l_charge_basis,"PER TXN") == 0)
	{
		printf("Inside COUNTERVALUE PER TXN/PER TXN :|%s| \n",h_dl_client);	

	   l_multi_settle = 0 ;
	   if(APL_FAILURE == CO_Chk_CntryEnabled("TXN_CHARGES",
						"MULTI_SETTLEMENT",
						&l_multi_settle,
						l_debug_info_ptr))
	   {
              	int_bl_err_level = 1;
		APL_GOBACK_FAIL
	   }
    
	   
		/*Changes start by Rahul for Treps Charges start */
		Alert(" befor Bill Upto Date |%s|  \n",chr_g_bl_upto_dt);
        l_exstind= 0;
		
		EXEC SQL SELECT COUNT(1) INTO :l_exstind FROM CSGLTREPS_VW a,sys_ivcontrolparam b
		WHERE a.CSTRP_CUST_CODE = :h_dl_client 
		AND a.CSTRP_VALUE_DATE BETWEEN TO_DATE(TO_CHAR(to_date(b.B_PREV_DATE,'dd/mm/yyyy hh24:mi:ss'),'dd/mm/yyyy')||'12:00:00','DD/MM/YYYY HH24:MI:SS') 
		AND TO_DATE(TO_CHAR(to_date(B_UPTO_DATE,'dd/mm/yyyy hh24:mi:ss'),'dd/mm/yyyy')||'23:59:59','DD/MM/YYYY HH24:MI:SS')
		AND a.CSTRP_AUTH_ON is not NULL
		AND a.CSTRP_DEAL_TYPE IN('TPL','TPB') and not exists (select 1 from CUSTODY_TREPS_CHARGES where client =:h_dl_client and  DATEOFBILLING is null and  DEAL_DATE BETWEEN TO_DATE(TO_CHAR(to_date(b.B_PREV_DATE,'dd/mm/yyyy hh24:mi:ss'),'dd/mm/yyyy')||'12:00:00','DD/MM/YYYY HH24:MI:SS') 
		AND TO_DATE(TO_CHAR(to_date(B_UPTO_DATE,'dd/mm/yyyy hh24:mi:ss'),'dd/mm/yyyy')||'23:59:59','DD/MM/YYYY HH24:MI:SS'));
		
		printf("\n CSGL deals count / No of=|%d|\n", l_exstind);
		Alert("  Bill Upto Date |%s|  \n",chr_g_bl_upto_dt);
		
		Alert("sqlca.sqlcode csgl=== |%d|",sqlca.sqlcode);
		IS_ANY_ORA_ERROR
		if(l_exstind > 0)
		{
			
		    //this function will call for pursing the data CSGL System to Custody 
			
			int_retstat = IV_SUCCESS;
			if ( APL_FAILURE == IV_Proc_TrepesFn(h_dl_client,TXNFEE,chr_g_bl_upto_dt,&int_retstat,l_debug_info_ptr) )
			{
				if(int_retstat == IV_CRITCAL_ERROR_IND)
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}
			}
			
			
		}
		
		/*Changes start by Rahul for Treps Charges start */
	
		strcpy(chr_h_txn_stmt,"(SELECT 'O',b.INSTR_CODE,b.LOCATION_CD,b.DEAL_CD,RTRIM(a.INSTR_SUB_TYPE),");
		strcat(chr_h_txn_stmt,"RTRIM(b.DL_CLASS), b.CURRENCY_CD, b.REAPIRED_IND,b.VERFIED_WITH,b.DATEOFBILLING,");
		strcat(chr_h_txn_stmt,"TO_DATE(TO_CHAR(b.SETL_DATE,'dd/mm/yyyy'),'dd/mm/yyyy')"); 
		strcat(chr_h_txn_stmt," - TO_DATE(TO_CHAR(b.DATEOF_INPUT,'dd/mm/yyyy'),'dd/mm/yyyy'),");
		strcat(chr_h_txn_stmt,"b.AMEND_COUNT,b.NUMBER_A,b.NUMBER_B,b.ROWID,");

		if((!strcmp(chr_l_bill_dep,"ASD")) && (l_multi_settle))
				strcat(chr_h_txn_stmt,"DECODE(b.DL_CLASS,'56',b.NET_AMT,'59',b.QTY,DECODE(b.SHORTAGE_QTY,'0',b.AMOUNT,b.AMOUNT/b.ORIG_QTY*b.QTY)),");
			else
				strcat(chr_h_txn_stmt,"b.AMOUNT,");

		strcat(chr_h_txn_stmt,"'L' AS HISFLG,b.ENTRY,");
		strcat(chr_h_txn_stmt,"b.IDENTIY_NO,b.INSTRUMENT_DT");
		strcat(chr_h_txn_stmt," FROM MT_INSTRUMENT a, DL_DEAL b");
		strcat(chr_h_txn_stmt," WHERE b.CLIENT = '");
		strcat(chr_h_txn_stmt,h_dl_client);
		/*	strcat(chr_h_txn_stmt,"'  AND b.DEAL_STAT = 'CS' AND b.INSTR_CODE = a.INSTR_CODE ");	*/
		strcat(chr_h_txn_stmt,"'  AND b.INSTR_CODE = a.INSTR_CODE "); 
		strcat(chr_h_txn_stmt," AND b.DEAL_STAT != 'DU' ");	/* ISKB-2247 Not to pick DU and DD deals */

		if((!strcmp(chr_l_bill_dep,"ASD")) && (l_multi_settle))
			{
				/*
				strcat(chr_h_txn_stmt," AND ((b.AMOUNT != '0' AND b.DL_CLASS NOT IN ('28','19')) OR");
				strcat(chr_h_txn_stmt," (b.AMOUNT = '0' AND b.DL_CLASS ='56') OR");
				*/
				strcat(chr_h_txn_stmt," AND ((b.DL_CLASS NOT IN ('28','19')) OR");
				strcat(chr_h_txn_stmt," (b.DL_CLASS ='56') OR");
				strcat(chr_h_txn_stmt,"(b.DL_CLASS = '59' AND b.IDENTIY_NO NOT IN ");
				strcat(chr_h_txn_stmt,"(SELECT c.DL_REF_NO FROM DL_SQOFF c WHERE c.BAL_QTY = c.SQOFF_QTY AND c.STATUS = 'AA'))) AND ");
			}
			else
				/*	strcat(chr_h_txn_stmt," AND b.AMOUNT != '0' AND b.DL_CLASS NOT IN ('28','19') *	AND ");	*/
				{	
				strcat(chr_h_txn_stmt," AND b.DL_CLASS NOT IN ('28','19','20','90','26','59','56') AND ");
				}

		strcat(chr_h_txn_stmt," b.MF_SEQNO IS NULL AND ");
		strcat(chr_h_txn_stmt," ( b.PAY_MODE IS NULL OR b.PAY_MODE != 'N' ) AND ");/*Added by siva.ganapathi for ISKB_2295*/
		strcat(chr_h_txn_stmt," b.CHECKER IS NOT NULL AND INFORMATON IS NULL AND (b.DATEOFBILLING IS NULL OR ");
		strcat(chr_h_txn_stmt," (b.AMEND_COUNT != b.NUMBER_A AND");
		strcat(chr_h_txn_stmt," b.DATEOFBILLING != '");
		strcat(chr_h_txn_stmt,chr_g_bl_upto_dt);
		strcat(chr_h_txn_stmt,"') OR b.DATEOFBILLING = '");
		strcat(chr_h_txn_stmt,chr_g_bl_upto_dt);
		strcat(chr_h_txn_stmt,"') AND  ");
		strcat(chr_txn_stmt1," UNION ALL");
		strcat(chr_txn_stmt1," SELECT 'O',b.INSTR_CODE,b.LOCATION_CD,b.DEAL_CD,RTRIM(a.INSTR_SUB_TYPE),");
		strcat(chr_txn_stmt1," RTRIM(b.DL_CLASS), b.CURRENCY_CD, b.REAPIRED_IND,b.VERFIED_WITH,b.DATEOFBILLING,");
		strcat(chr_txn_stmt1,"TO_DATE(TO_CHAR(b.SETL_DATE,'dd/mm/yyyy'),'dd/mm/yyyy')"); 
		strcat(chr_txn_stmt1," - TO_DATE(TO_CHAR(b.DATEOF_INPUT,'dd/mm/yyyy'),'dd/mm/yyyy'),");
		strcat(chr_txn_stmt1," b.AMEND_COUNT,b.NUMBER_A,b.NUMBER_B,b.ROWID,");

		if((!strcmp(chr_l_bill_dep,"ASD")) && (l_multi_settle))
				strcat(chr_txn_stmt1,"DECODE(b.DL_CLASS,'56',b.NET_AMT,'59',b.QTY,DECODE(b.SHORTAGE_QTY,'0',b.AMOUNT,b.AMOUNT/b.ORIG_QTY*b.QTY)),");
			else
				strcat(chr_txn_stmt1,"b.AMOUNT,");

		strcat(chr_txn_stmt1,"'H' AS HISFLG,b.ENTRY,");
		strcat(chr_txn_stmt1,"b.IDENTIY_NO,b.INSTRUMENT_DT");
		strcat(chr_txn_stmt1," FROM MT_INSTRUMENT a, DL_HISDEAL b");
		strcat(chr_txn_stmt1," WHERE b.CLIENT = '");
		strcat(chr_txn_stmt1,h_dl_client);
		strcat(chr_txn_stmt1,"' AND b.INSTR_CODE = a.INSTR_CODE "); 
		strcat(chr_txn_stmt1," AND b.DEAL_STAT != 'DD' ");	/* ISKB-2247 Not to pick DU and DD deals */

		if((!strcmp(chr_l_bill_dep,"ASD")) && (l_multi_settle))
			{
				strcat(chr_txn_stmt1," AND ((b.AMOUNT != '0' AND b.DL_CLASS NOT IN ('28','19')) OR");
				strcat(chr_txn_stmt1," (b.AMOUNT = '0' AND b.DL_CLASS ='56') OR");
				strcat(chr_txn_stmt1,"(b.DL_CLASS = '59' AND b.IDENTIY_NO NOT IN ");
				strcat(chr_txn_stmt1,"(SELECT c.DL_REF_NO FROM DL_SQOFF c WHERE c.BAL_QTY = c.SQOFF_QTY AND c.STATUS = 'AA'))) AND ");
			}
			else
			{
				strcat(chr_txn_stmt1," AND b.AMOUNT != '0' AND b.DL_CLASS NOT IN ('28','19','20','90','26','59','56') AND ");
			}

		strcat(chr_txn_stmt1," b.MF_SEQNO IS NULL AND ");
		strcat(chr_txn_stmt1," ( b.PAY_MODE IS NULL OR b.PAY_MODE != 'N' ) AND ");/*Added by siva.ganapathi for ISKB_2295*/
		strcat(chr_txn_stmt1," b.CHECKER IS NOT NULL AND INFORMATON IS NULL AND (b.DATEOFBILLING is NULL OR ");
		strcat(chr_txn_stmt1," (b.AMEND_COUNT != b.NUMBER_A AND");
		strcat(chr_txn_stmt1," b.DATEOFBILLING != '");
		strcat(chr_txn_stmt1,chr_g_bl_upto_dt);
		strcat(chr_txn_stmt1,"') OR b.DATEOFBILLING = '");
		strcat(chr_txn_stmt1,chr_g_bl_upto_dt);
		strcat(chr_txn_stmt1,"')  AND ");
		/* changes by RAHUL Strat for Treps Charges */
    	strcat(chr_txn_stmt_treps," UNION ALL ");
		strcat(chr_txn_stmt_treps," SELECT 'T','999' AS INSTR_CODE,'CSGL' AS LOCATION_CD,'999' AS DEAL_CD,'999' AS INSTR_SUB_TYPE,");
		strcat(chr_txn_stmt_treps," '999' AS DL_CLASS,'INR' AS CURRENCY_CD,NULL,NULL,b.DATEOFBILLING,");
		strcat(chr_txn_stmt_treps," 0,"); 
		strcat(chr_txn_stmt_treps," 0,0,0,b.ROWID,b.AMOUNT,");
		strcat(chr_txn_stmt_treps," 'T' AS HISFLG,'M',b.IDENTIY_NO,NULL");
		strcat(chr_txn_stmt_treps," FROM CUSTODY_TREPS_CHARGES b,MT_CLIENT c,sys_ivcontrolparam d ");
		strcat(chr_txn_stmt_treps," WHERE b.CLIENT = '");
		strcat(chr_txn_stmt_treps,h_dl_client);
		strcat(chr_txn_stmt_treps,"' AND b.CLIENT = c.CLN_CODE ");
        strcat(chr_txn_stmt_treps," AND b.DEAL_DATE BETWEEN TO_DATE(TO_CHAR(to_date(");
	    strcat(chr_txn_stmt_treps," d.B_PREV_DATE,'dd/mm/yyyy hh24:mi:ss'),'dd/mm/yyyy')||'12:00:00','DD/MM/YYYY HH24:MI:SS')");
	    strcat(chr_txn_stmt_treps," AND TO_DATE(TO_CHAR(to_date('");
		strcat(chr_txn_stmt_treps, chr_g_bl_upto_dt);
		strcat(chr_txn_stmt_treps,"' ,'dd/mm/yyyy hh24:mi:ss'),'dd/mm/yyyy')||'23:59:59','DD/MM/YYYY HH24:MI:SS')");
		strcat(chr_txn_stmt_treps," AND b.DEAL_TYPE IN ('TPB','TPL') ");
		strcat(chr_txn_stmt_treps," AND b.AUTH_ON is not NULL ");  
        strcat(chr_txn_stmt_treps," AND b.DATEOFBILLING is NULL"); 			
		/* Rahul for treps charges end */		

		/* Bageshri HB_IV_001 START */
		if(!strcmp(chr_l_bill_dep,"INP"))
		{
			strcat(chr_h_txn_stmt," (b.DATEOF_INPUT <= '");
			strcat(chr_h_txn_stmt,chr_h_bl_upto_dt);
			strcat(chr_h_txn_stmt,"')");
			strcat(chr_txn_stmt1," (b.DATEOF_INPUT <= '");
			strcat(chr_txn_stmt1,chr_h_bl_upto_dt);
			strcat(chr_txn_stmt1,"')) ");
		}
		else
		{
			strcat(chr_h_txn_stmt," (b.INSTRUMENT_DT IS NOT NULL AND b.INSTRUMENT_DT<= '");
			strcat(chr_h_txn_stmt,chr_h_bl_upto_dt);
			strcat(chr_h_txn_stmt,"')");
			strcat(chr_txn_stmt1," (b.INSTRUMENT_DT IS NOT NULL AND b.INSTRUMENT_DT<= '");
			strcat(chr_txn_stmt1,chr_h_bl_upto_dt);
			strcat(chr_txn_stmt1,"')) ");
		}

		if((!strcmp(chr_l_bill_dep,"ASD")) && (l_multi_settle))
			{
				strcat(chr_txn_stmt1," ORDER BY ");
				strcat(chr_txn_stmt1, "19,18");
				int_firstfound = 1;
			}

		/* Bageshri HB_IV_001 END */

		chr_l_param_dep = strtok_r(chr_l_param_code,";",&chr_newtdep);

		while((chr_l_param_dep != (char *)NULL) && (strlen(chr_l_param_dep) > 0))
		{
			if(strcmp(chr_l_param_dep,"LOCATION") == 0)
			{
				if(int_firstfound)
					strcat(chr_txn_stmt1, ",2");
				else
				{
					strcat(chr_txn_stmt1," ORDER BY ");
					strcat(chr_txn_stmt1, "2");
					int_firstfound = 1;
				}
			}
			else if(strcmp(chr_l_param_dep,"PRODUCT") == 0)
			{
				if(int_firstfound)
					strcat(chr_txn_stmt1, ",4");
				else
				{
					strcat(chr_txn_stmt1," ORDER BY ");
					strcat(chr_txn_stmt1, "4");
					int_firstfound = 1;
				}
			}
			else if(strcmp(chr_l_param_dep,"DEALCD") == 0)
			{
				if(int_firstfound)
					strcat(chr_txn_stmt1, ",3");
				else
				{
					strcat(chr_txn_stmt1," ORDER BY ");
					strcat(chr_txn_stmt1, "3");
					int_firstfound = 1;
				}
			}
			else if(strcmp(chr_l_param_dep,"DEALTYPE") == 0)
			{
				if(int_firstfound)
					strcat(chr_txn_stmt1, ",5");
				else
				{
					strcat(chr_txn_stmt1," ORDER BY ");
					strcat(chr_txn_stmt1, "5");
					int_firstfound = 1;
				}
			}
			if(chr_newtdep == (char *)NULL)
				strcpy(chr_l_param_dep, APL_NULL_STRING);
			else
				chr_l_param_dep = strtok_r(NULL,";",&chr_newtdep); 
		}
			
		strcpy(chr_l_param_code,chr_h_param_code);
		strcat(chr_h_txn_stmt,chr_txn_stmt_treps);
		printf("\n Per Txn=|%s|\n", chr_txn_stmt_treps);
		strcat(chr_h_txn_stmt,chr_txn_stmt1);
		strcat(chr_h_txn_stmt,APL_NULL_STRING);
		
		printf("\n Per Txn=|%s|\n", chr_h_txn_stmt);

		//printf("\n Per Txn query length =|%d|\n", strlen(chr_h_txn_stmt));Changes done for AIX Migration
		printf("\n Per Txn query length =|%d|\n", (int)strlen(chr_h_txn_stmt));

		EXEC SQL PREPARE S FROM :chr_h_txn_stmt;

		EXEC SQL DECLARE trcnt_cur_1 CURSOR FOR S;

		EXEC SQL OPEN trcnt_cur_1;
	
		if(sqlca.sqlcode < 0)
		{
			fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			int_bl_err_level = 1;
			*int_p_retstat = IV_CRITCAL_ERROR_IND;
		}

		IS_ANY_ORA_ERROR;

		int_is_trcnt_cur_open = 1; 
		int_fetch_cnt = 0;

		for( ; ; )
		{
			memset(chr_l_treps_ind,'\0',2); /* new changes for TREPS billing */
			memset(h_instr_code,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
			memset(chr_h_instr_ccy,APL_NULL_CHAR,APL_CCYCODE_LEN);
			memset(h_loccode,APL_NULL_CHAR,APL_LOCNCODE_LENGTH);
			memset(h_dealcd,APL_NULL_CHAR,IV_DLCD_LEN);
			memset(h_prodateype,APL_NULL_CHAR,IV_PRODTYPE_LEN);
			memset(h_dealclass,APL_NULL_CHAR,IV_DLTYPE_LEN);
			h_reapired_ind = NULL; 
			memset(h_verfied_with,APL_NULL_CHAR,IV_VERWITH_LEN);
			memset(chr_h_bill_dt,APL_NULL_CHAR,APL_DATE_LEN);
			dbl_h_late_days = 0;
			h_amend_count = 0;
			h_number_a = 0;
			h_number_b = 0;
			h_amt = 0.0;
			memset(h_ora_rowid,APL_NULL_CHAR,APL_ROWID_LEN);
			chr_h_hisflg =NULL;
			h_entry =NULL;
			memset(h_identiy_no,APL_NULL_CHAR,17);/* vinay */
			memset(chr_h_instr_dt,APL_NULL_CHAR,APL_DATE_LEN); /* Bageshri HB_IV_003 */
			
			

			EXEC SQL FETCH trcnt_cur_1 
			INTO :chr_l_treps_ind, 
			:h_instr_code:i_instr_code,
					:h_loccode:i_loccode,
					:h_dealcd:i_dealcd,
					:h_prodateype:i_prodateype,
					:h_dealclass:i_dealclass,
					:chr_h_instr_ccy:i_instr_ccy,
					:h_reapired_ind:i_reapired_ind,
					:h_verfied_with:i_verfied_with,
					:chr_h_bill_dt:i_bill_date,
					:dbl_h_late_days:i_late_days,
					:h_amend_count:i_amend_count,
					:h_number_a:i_number_a,
					:h_number_b:i_number_b,
					:h_ora_rowid,
					:h_amt:i_amt,
					:chr_h_hisflg,
					:h_entry,
					:h_identiy_no:i_identiy_no,/* vinay */
					:chr_h_instr_dt:i_instr_dt;/* Bageshri HB_IV_003 */
			
            Alert("sqlca.sqlcode |%d|",sqlca.sqlcode);
			if(sqlca.sqlcode == 1403)
			{
				if(int_fetch_cnt > 0)
				{
						if ((strcmp(chr_l_charge_basis,"PER TXN") == 0) && 	
								(strcmp(chr_l_fee_basis,"COUNTERVALUE PER TXN") == 0))
         			{					
						  /* tot_adm_charge_quantity = tot_adm_charge_quantity * g_exchg_rt_fee_bl;*/
                     tot_adm_charge_quantity = 1.0;/*vinay kalaskar */
							tot_adm_fee_quantity = tot_adm_fee_quantity * g_exchg_rt_fee_bl;
                     l_round_val = 0.0;
                    /* CO_Round(tot_adm_charge_quantity , int_g_blccy_decimallen, &l_round_val);
                     tot_adm_charge_quantity = l_round_val;
                     l_round_val = 0.0;*/
                     CO_Round(tot_adm_fee_quantity , int_g_blccy_decimallen, &l_round_val);
                     tot_adm_fee_quantity = l_round_val;
                     l_round_val = 0.0;
							CO_Round(tot_adm_txn_ins, int_g_blccy_decimallen, &l_round_val);
                     tot_adm_txn_ins= l_round_val;
                     l_round_val = 0.0;
						   if (tot_adm_txn_ins > 0)
							{
					

					 if(APL_SUCCESS == val_perTxnIV_DEAL(h_dl_client,TXNFEE,'I',proc_data,chr_g_bl_upto_dt,
								                             &count,&int_retstat,l_debug_info_ptr))
						 {
							count_no = count;
							printf("count_no :|%d|",count_no);
						 }	
						
						   if(count_no)
						   {
								if(APL_SUCCESS == val_perTxnIV_DEAL_UPDATE(h_dl_client, TXNFEE,'I',chr_h_param_code, 
											proc_data, tot_adm_txn_ins,tot_adm_charge_quantity, chr_g_bl_ccycode, 
											tot_adm_fee_quantity, p_mstclt_a,chr_h_txnsrvind, &int_retstat,l_debug_info_ptr))	  
									printf("Successfully Updated into IV_DEAL");
							}
							else
							{
                     	if(APL_FAILURE == IV_Mod_NewIVTRANSAC(h_dl_client, TXNFEE,'I',chr_h_param_code, proc_data, tot_adm_txn_ins,tot_adm_charge_quantity, chr_g_bl_ccycode, tot_adm_fee_quantity, p_mstclt_a,chr_h_txnsrvind, &int_retstat,l_debug_info_ptr))
                     	{
                        	int_bl_err_level = 1;
                        	if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
                        	{
                           	 CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                           	CO_FreeErrLst(l_debug_info_ptr);
                        	}
                        	*int_p_retstat = int_retstat;
                        	APL_GOBACK_FAIL;
                     	}
						    }
								
							if (strcmp(h_dl_client,p_mstclt_a) == 0)
							{
								
					 if(APL_SUCCESS == val_perTxnIV_DEAL(p_mstclt_a,TXNFEE,'S',proc_data,chr_g_bl_upto_dt,
								  &count,&int_retstat,l_debug_info_ptr))
						 {
							count_no = count;
							printf("count_no :|%d|",count_no);
						 }	
						
						    if(count_no)
						    {
								 if(APL_SUCCESS == val_perTxnIV_DEAL_UPDATE(p_mstclt_a, TXNFEE,'S', chr_h_param_code, 
											 proc_data,tot_adm_txn_ins,tot_adm_charge_quantity, chr_g_bl_ccycode, 
											 tot_adm_fee_quantity, p_mstclt_a,chr_h_txnsrvind,&int_retstat,l_debug_info_ptr))
									 printf("Successfully updated into IV_DEAL");
							 }
							 else
							 {
								if(APL_FAILURE == IV_Mod_NewIVTRANSAC(p_mstclt_a, TXNFEE,'S', chr_h_param_code, proc_data, 
								tot_adm_txn_ins,tot_adm_charge_quantity, chr_g_bl_ccycode, tot_adm_fee_quantity, p_mstclt_a,
								chr_h_txnsrvind,&int_retstat,l_debug_info_ptr))
								{
									int_bl_err_level = 1;
                       	   if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
                          	{
                             	 CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                             		CO_FreeErrLst(l_debug_info_ptr);
                          	}
                          	*int_p_retstat = int_retstat;
                          	APL_GOBACK_FAIL;
                       	}
							}
							}
							
							tot_adm_fee_quantity = 0.0;
                     tot_adm_charge_quantity = 0.0;
                     tot_adm_txn_ins = 0.0;
							}
							if (chr_g_bl_gen == 'M')
							{	
								
							 /*  tot_adm_cons_charge_quantity  = tot_adm_cons_charge_quantity * h_exchg_rt_mstfee_bl;
                       */
								tot_adm_cons_charge_quantity = 1.0;/* vinay kalaskar */	
								tot_adm_cons_fee_quantity = tot_adm_cons_fee_quantity * h_exchg_rt_mstfee_bl;
                     	l_round_val = 0.0;
                      /*  CO_Round(tot_adm_cons_charge_quantity , int_h_mst_bl_decimallen, &l_round_val);
                     	tot_adm_cons_charge_quantity = l_round_val;
                     	*/l_round_val = 0.0;
                     	CO_Round(tot_adm_cons_fee_quantity , int_h_mst_bl_decimallen, &l_round_val);
                     	tot_adm_cons_fee_quantity = l_round_val;
                     	l_round_val = 0.0;
                     	CO_Round(tot_adm_txn_cons_ins , int_h_mst_bl_decimallen, &l_round_val);
                     	tot_adm_txn_cons_ins = l_round_val;
                     	l_round_val = 0.0;
						if(tot_adm_txn_cons_ins > 0)
						{		
					   if(APL_SUCCESS == val_perTxnIV_DEAL(h_dl_client,TXNFEE,'S',chr_prev_param_str,chr_g_bl_upto_dt,
																		&count,&int_retstat,l_debug_info_ptr))
						{
							count_no = count;
							printf("count_no :|%d|",count_no);
						}
						
						if(count_no)
						{
							if(APL_SUCCESS == val_perTxnIV_DEAL_UPDATE(h_dl_client, TXNFEE,'S',chr_h_param_code, 
										chr_prev_param_str,tot_adm_txn_cons_ins, tot_adm_cons_charge_quantity, 
										chr_mst_bl_ccycode, tot_adm_cons_fee_quantity,p_mstclt_a, chr_h_txnsrvconsind, 
										&int_retstat,l_debug_info_ptr))
								printf("Successfully updated into IV_DEAL");
						}
						else
						{
						if(APL_FAILURE == IV_Mod_NewIVTRANSAC(h_dl_client, TXNFEE,'S',chr_h_param_code, chr_prev_param_str,
              		tot_adm_txn_cons_ins, tot_adm_cons_charge_quantity, chr_mst_bl_ccycode, tot_adm_cons_fee_quantity, 
						p_mstclt_a, chr_h_txnsrvconsind, &int_retstat,l_debug_info_ptr))
                     	{
                       	 	int_bl_err_level = 1;
                        	if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
                        	{
                           	 CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                           	CO_FreeErrLst(l_debug_info_ptr);
                        	}
                        	*int_p_retstat = int_retstat;
                        	APL_GOBACK_FAIL;
                     	}
					   }
                     	tot_adm_cons_fee_quantity = 0.0;
                     	tot_adm_cons_charge_quantity = 1.0;
                     	tot_adm_txn_cons_ins = 0.0;		
						}	
							}
						}

					strcpy(chr_acct_str,p_cltt_str);
					
					srv_charge = 0.0;
					int_retstat = IV_SUCCESS;


					strcpy(chr_acct_str,p_cltt_str); 
						
					/* HDFCIV_004 Rohit No Admin charges for India specific */
					IF_COND_NOT_EXISTS("ADMIN_CHARGE","NO_TXN_ADMIN")
					{
						if((strcmp(chr_l_adm_charge_basis,"COUNTERVALUE") == 0)
							 && (strcmp(chr_l_adm_fee_basis,"COUNTERVALUE") == 0))
						{
							adm_chg_quantity = tot_credit_indr;
							adm_fee_quantity = tot_credit_indr;
							int_retstat = IV_SUCCESS;
							srv_charge = 0.0;

   					/* Adding condition for billing freq */
							strcpy(h_param_ind,h_identiy_no);
						if(APL_FAILURE == IV_Proc_CalcFee("O",chr_acct_str,TXNFEE,proc_data,h_param_ind,chr_h_param_code,
							dbl_h_countervalue, l_charge_qty,chr_l_charge_type,chr_l_fee_type,&srv_charge,
							l_iv_data_struct_h_dladmgrp,'I',p_mstclt_a,chr_l_charge_basis,chr_l_fee_basis,
							chr_h_txnsrvind,&int_retstat,l_debug_info_ptr))
						{
							if(APL_FAILURE == IV_Proc_CalcFee("O",chr_acct_str,ADM_TXN_FEE_IND,chr_prev_param_str,
										h_param_ind,chr_h_param_code,adm_fee_quantity,adm_chg_quantity,
										chr_l_adm_charge_type,chr_l_adm_fee_type,&srv_charge,
										l_iv_data_struct_h_dladmgrp,'I',p_mstclt_a,chr_l_adm_charge_basis,
										chr_l_adm_fee_basis,chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
							{
								if(int_retstat == IV_CRITCAL_ERROR_IND)
								{
									fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
									fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
									fflush(fp);
									int_bl_err_level = 1;
									if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
									{
										CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
										CO_FreeErrLst(l_debug_info_ptr);
									}
									*int_p_retstat = int_retstat;
								}
							}
							if(srv_charge > 0)
							{
								
								tot_adm_txn_chg += srv_charge; 
							}
						}
					}
					}		
				}
				break;
			}

			/* Bageshri HB_IV_003 : for multiple settlement -- START */

			if(!strcmp(h_dealclass,"59"))
			{
				EXEC SQL SELECT A.AMOUNT/A.ORIG_QTY*C.QTY 
				INTO :h_amt
				FROM DL_DEAL A,(SELECT QTY,ORIG_REFNO FROM DL_DEAL WHERE IDENTIY_NO = :h_identiy_no) C 
				WHERE A.IDENTIY_NO = C.ORIG_REFNO;

				IS_ANY_ORA_ERROR
			}

			/* Bageshri HB_IV_003 : for multiple settlement -- END */

			printf(" Fetched %s %s %lf h_identiy_no |%s|",h_instr_code, h_loccode,h_amt,h_identiy_no );
			int_fetch_cnt++;
			
			int_retstat = IV_SUCCESS;
           
		   /*CHANGES START FOR SKIP UPDATION TO DATE OF BILLING FOR TREPS CHARGES START BY RAHUL */
		if(strcmp(chr_l_treps_ind,"T") != 0) 
		{	
			if ( APL_FAILURE == IV_Proc_TransactionFn(h_dealclass, &int_retstat, l_debug_info_ptr) )
			{
				if(int_retstat == IV_CRITCAL_ERROR_IND)
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}
				
				int_retstat = IV_SUCCESS;
   		
				if(APL_FAILURE == IV_Mod_BillDtForTrade(h_dl_client,0.00,h_ora_rowid,chr_h_hisflg,chr_l_bill_dep, 
										&int_retstat,l_debug_info_ptr))
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}
			}
			else
			{
				int_retstat = IV_SUCCESS;
   		
				if(APL_FAILURE == IV_Mod_BillDtForTrade(h_dl_client,h_amend_count,h_ora_rowid,chr_h_hisflg,
											chr_l_bill_dep, &int_retstat,l_debug_info_ptr))
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}
				
				int_fetch_cnt--; 
				continue;
			}
		}
		 else
	   {
		    /*  For TREPS Charges we are going to update CUSTODY_TREPS_CHARGES BILLING_DATE  START*/  
		       int_retstat = IV_SUCCESS;
				if(APL_FAILURE == IV_Mod_Trpes_BillDate(h_dl_client,&int_retstat,l_debug_info_ptr))
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}
		   
		    /*  For TREPS Charges we are going to update CUSTODY_TREPS_CHARGES BILLING_DATE  END*/
	   }
			int_retstat = IV_SUCCESS;
			int_repairfeeexists = 0; 
			int_manualtrdexists = 0; 

			if(APL_FAILURE == IV_Chk_IsFeeExists(p_cltt_str,REPAIRFEE,&int_repairfeeexists,&int_retstat,l_debug_info_ptr))
			{
				if(int_retstat == IV_CRITCAL_ERROR_IND)
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
				}
				*int_p_retstat = int_retstat;
			}

			int_retstat = IV_SUCCESS;

			if(APL_FAILURE == IV_Chk_IsFeeExists(p_cltt_str,MANUALDEALFEE,&int_manualtrdexists,&int_retstat,l_debug_info_ptr))
			{
            			if(int_retstat == IV_CRITCAL_ERROR_IND)
            			{
               				fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
               				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
               				fflush(fp);
               				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
               				{
                  				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                  				CO_FreeErrLst(l_debug_info_ptr);
              				}
           			 }
            			*int_p_retstat = int_retstat;
         		 }

         int_retstat = IV_SUCCESS;

		
	if (int_g_viber_condexists != 0)
	{
			int_viberfreefeeexists = 0;

                        if(APL_FAILURE == IV_Chk_IsFeeExists(p_cltt_str,VIBERFREEFEE,&int_viberfreefeeexists,&int_retstat,l_debug_info_ptr))
                        {
                                if(int_retstat == IV_CRITCAL_ERROR_IND)
                                {
                                        fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
                                        fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__
);
                                        fflush(fp);
                                        if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
                                        {
                                                CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                                                CO_FreeErrLst(l_debug_info_ptr);
                                        }
                                }
                                *int_p_retstat = int_retstat;
                        }

                        int_retstat = IV_SUCCESS;
                        int_vibervpfeeexists = 0;


                        if(APL_FAILURE == IV_Chk_IsFeeExists(p_cltt_str,VIBERVPFEE,&int_vibervpfeeexists,&int_retstat,l_debug_info_ptr))
                        {
                                if(int_retstat == IV_CRITCAL_ERROR_IND)
                                {
                                 	fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
                                      fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
                                        fflush(fp);
                                        if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
                                        {
                                                CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                                                CO_FreeErrLst(l_debug_info_ptr);
                                        }
                                }
                                *int_p_retstat = int_retstat;
                        }

                        int_retstat = IV_SUCCESS;
	}


			int_amendfeeexists = 0; 

			if(APL_FAILURE == IV_Chk_IsFeeExists(p_cltt_str,AMEND_FEE_IND,&int_amendfeeexists,&int_retstat,l_debug_info_ptr))
			{
				if(int_retstat == IV_CRITCAL_ERROR_IND)
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}
			}

			

			
			if(strcmp(chr_l_treps_ind,"T") != 0)    /* For trpes Charges we are ignoring for update DL_deal Data*/
			{
			if(chr_regen_flg == 'Y')
			{
				nNoAmendments += h_number_a - h_number_b;
			}
			else
			{
				nNoAmendments += h_amend_count - h_number_a;

				int_retstat = IV_SUCCESS;
				if ( APL_FAILURE == IV_Mod_Num2DLTrade(h_ora_rowid, chr_h_hisflg, h_number_a, 
															&int_retstat, l_debug_info_ptr) )
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}

				int_retstat = IV_SUCCESS;
				if ( APL_FAILURE == IV_Mod_Num1DLTrade(h_ora_rowid, chr_h_hisflg, h_amend_count, 
															&int_retstat, l_debug_info_ptr) )
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}
			}	
			}
			
			
			   
			   	int_h_sfe_param = 0;
               if (chr_h_hisflg == 'L')
                {
               EXEC SQL SELECT COUNT(*) INTO :int_h_sfe_param
                    FROM DL_SFEREJ A,DL_DEAL B
                    WHERE A.UNIQ_IDENT_NO = B.UNIQ_IDENT_NO
                    AND A.CLIENT = B.CLIENT
						  AND A.IDENTIY_NO = B.IDENTIY_NO
						  AND B.DEAL_STAT = 'CS' 
						  AND  B.ROWID = :h_ora_rowid ;

                 IS_ANY_ORA_ERROR
                 }
                if (chr_h_hisflg == 'H')
                  {
               EXEC SQL SELECT COUNT(*) INTO :int_h_sfe_param
                    FROM DL_SFEREJ A,DL_HISDEAL B
                    WHERE A.UNIQ_IDENT_NO = B.UNIQ_IDENT_NO
                    AND A.CLIENT = B.CLIENT
						  AND A.IDENTIY_NO = B.IDENTIY_NO
						  AND  B.ROWID = :h_ora_rowid ;

                 IS_ANY_ORA_ERROR
                 }
                if (int_h_sfe_param > 0 )
                     {
                       nreapired_ind++;
                       CO_ProcMonitor(TechRep,"Trade Picked for Repair",NULL,NULL);
                     }
			
			

			
			if(h_entry == BILLABLE_DEAL_IND)
				nManualTrd++;

	
	if (int_g_viber_condexists != 0)
	{
		if ( strcmp(h_dealcd,"1") == 0 || strcmp(h_dealcd, "2") == 0)
		{
		int_l_free_trcode = 1;
		}
		else
		{
		int_l_free_trcode = 0;
		}

		if ((strcmp(h_verfied_with,"VIB") == 0) ||  (strcmp(h_verfied_with,"EVI") == 0))
		{
		fprintf(TechRep,"transaction found for %s\n",h_verfied_with);
			if (int_l_free_trcode == 1)
			{
			nNoViberFrees++;
			}
			else
			{
			nNoViberVPs++;
			}
		}
	}

			
			if(dbl_h_late_days <= g_late_txn_days) 
				nLateTxn++;

			int_l_free_trcode = 0;
			memset(proc_data, APL_NULL_CHAR, IV_PARAM_LEN);
			chr_l_param_dep = strtok_r(chr_l_param_code,";",&chr_tdep);
			memset(chr_where_stmt,APL_NULL_CHAR,500);			

			while((chr_l_param_dep != (char *)NULL) && (strlen(chr_l_param_dep) > 0))
			{
				if(strcmp(chr_l_param_dep,"LOCATION") == 0)
				{
					if(strlen(proc_data) != 0)
						strcat(proc_data,";");
					strcat(proc_data,h_loccode);
					if(strlen(chr_where_stmt) == 0)
						strcat(chr_where_stmt, " and a.instr_code = b.instr_code ");
               strcat(chr_where_stmt," and b.location_cd = '");
               strcat(chr_where_stmt,h_loccode);
               strcat(chr_where_stmt,"'");
               chr_l_instrflg = 'Y';
				}
				else if(strcmp(chr_l_param_dep,"PRODUCT") == 0)
				{
					if(strlen(proc_data) != 0)
						strcat(proc_data,";");
					strcat(proc_data,h_prodateype);
					if(strlen(chr_where_stmt) == 0)
						strcat(chr_where_stmt, " and a.instr_code = b.instr_code ");
               strcat(chr_where_stmt, " and rtrim(a.INSTR_SUB_TYPE) = '");
               strcat(chr_where_stmt,h_prodateype);
               strcat(chr_where_stmt,"'");
               chr_l_instrflg = 'Y';
				}
				else if(strcmp(chr_l_param_dep,"DEALCD") == 0)
				{
					if(strlen(proc_data) != 0)
						strcat(proc_data,";");
					strcat(proc_data,h_dealcd);
						
					if ( strcmp(h_dealcd,"1") == 0 || strcmp(h_dealcd, "2") == 0)
					{
						int_l_free_trcode = 1;
					}
					else
					{
						int_l_free_trcode = 0;
					}
				}
				else if(strcmp(chr_l_param_dep,"DEALTYPE") == 0)
				{
					if(strlen(proc_data) != 0)
						strcat(proc_data,";");
					strcat(proc_data,h_dealclass);
				}
				if(chr_tdep == (char *)NULL)
				   strcpy(chr_l_param_dep, APL_NULL_STRING);	
				else
					chr_l_param_dep = strtok_r(NULL,";",&chr_tdep);
			}

			if(strlen(proc_data) == 0)
			{
				strcpy(proc_data,";");
			}


			strcpy(chr_l_param_code,chr_h_param_code);
			strcat(proc_data,APL_NULL_STRING);
			
			printf("proc_data:|%s||%s|",proc_data,h_dl_client);
			
			printf("charge_basis|%s|fee_basis|%s|\n ", chr_l_charge_basis, chr_l_fee_basis);
				if ((strcmp(chr_l_charge_basis,"PER TXN") == 0) && (strcmp(chr_l_fee_basis,"COUNTERVALUE PER TXN") == 0))
				{
					l_exchg_rt = 1.0;
					
					/*Below code Uncommented by siva.ganapathi for ISKB_4603 on 09-Feb-2011 -- started*/

					if (strcmp(chr_h_instr_ccy, chr_g_fee_ccycode) != 0)
					{
						int_retstat = IV_SUCCESS;
						if(APL_FAILURE == IV_Rtv_ExchRate(chr_h_instr_ccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,&l_exchg_rt, &int_retstat,l_debug_info_ptr))
						{
							fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",chr_h_instr_ccy,chr_g_fee_ccycode);
							fflush(fp);
							int_bl_err_level = 1;
							*int_p_retstat = int_retstat;
						}
					}

					/*Below code Uncommented by siva.ganapathi for ISKB_4603 on 09-Feb-2011 -- Ended*/
					
					l_round_val = 0.0;
					printf("h_amt |%lf| l_exchg_rt|%lf|\n",h_amt,l_exchg_rt);
					CO_Round(h_amt * l_exchg_rt, int_g_ccy_decimallen, &l_round_val);
					dbl_h_countervalue = l_round_val;
					Alert("dbl_h_countervalue***:|%lf| Master |%c| h_identiy_no [%s]",dbl_h_countervalue,chr_g_bl_gen,h_identiy_no);
					if (chr_g_bl_gen == 'M')
					{

						
						l_exchg_rt = 1.0;
						/*Below code Uncommented by siva.ganapathi for ISKB_4603 on 09-Feb-2011 -- started*/

						if (strcmp(chr_h_instr_ccy, chr_mst_fee_ccycode) != 0)
						{
							int_retstat = IV_SUCCESS;
							if(APL_FAILURE == IV_Rtv_ExchRate(chr_h_instr_ccy,chr_mst_fee_ccycode,chr_g_bl_upto_dt,&l_exchg_rt, &int_retstat,l_debug_info_ptr))
							{
								fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",chr_h_instr_ccy,chr_mst_fee_ccycode);
								fflush(fp);
								int_bl_err_level = 1;
								*int_p_retstat = int_retstat;
							}
						}

						/*Below code Uncommented by siva.ganapathi for ISKB_4603 on 09-Feb-2011 -- Ended*/

						l_round_val = 0.0;
						CO_Round(h_amt * l_exchg_rt, int_h_mst_fee_decimallen, &l_round_val);
						dbl_h_mstcountervalue = l_round_val;
					}

					if (int_fetch_cnt == 1)
					{
							strcpy(chr_prev_param_str,proc_data);
					}

							
					/* tot_adm_charge_quantity = tot_adm_charge_quantity * g_exchg_rt_fee_bl; 
						l_round_val = 0.0;
						CO_Round(tot_adm_charge_quantity , int_g_blccy_decimallen, &l_round_val);
						tot_adm_charge_quantity = l_round_val;  
					*/	tot_adm_charge_quantity = 1.0;/* vinay kalaskar */
						tot_adm_fee_quantity = tot_adm_fee_quantity * g_exchg_rt_fee_bl;
						l_round_val = 0.0;
						CO_Round(tot_adm_fee_quantity , int_g_blccy_decimallen, &l_round_val);
						tot_adm_fee_quantity = l_round_val;
						l_round_val = 0.0;
						CO_Round(tot_adm_txn_ins, int_g_blccy_decimallen, &l_round_val);
						tot_adm_txn_ins  = l_round_val;
						l_round_val = 0.0;
						if (tot_adm_txn_ins > 0)
						{
					  if(APL_SUCCESS == val_perTxnIV_DEAL(h_dl_client,TXNFEE,'I',chr_prev_param_str,chr_g_bl_upto_dt,
								  										&count,&int_retstat,l_debug_info_ptr))
						{
							count_no = count;
							printf("count_no :|%d|",count_no);
						}	
						
						if(count_no)
						{
							printf("Entering val_perTxnIV_DEAL_UPDATE :|%s|",h_dl_client);

							if(APL_SUCCESS == val_perTxnIV_DEAL_UPDATE(h_dl_client, TXNFEE,'I',chr_h_param_code, 
										chr_prev_param_str, tot_adm_txn_ins, tot_adm_charge_quantity, 
										chr_g_bl_ccycode, tot_adm_fee_quantity, p_mstclt_a,chr_h_txnsrvind, 
										&int_retstat,l_debug_info_ptr))	  
							{
								printf("Successfully updated into IV_DEAL ");
							}
						}
						else
						{
							if(APL_FAILURE == IV_Mod_NewIVTRANSAC(h_dl_client, TXNFEE,'I',chr_h_param_code, chr_prev_param_str, tot_adm_txn_ins, tot_adm_charge_quantity, chr_g_bl_ccycode, tot_adm_fee_quantity, p_mstclt_a,chr_h_txnsrvind, &int_retstat,l_debug_info_ptr))
							{
								int_bl_err_level = 1;
								if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
								{
									 CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
									CO_FreeErrLst(l_debug_info_ptr);
								}
								*int_p_retstat = int_retstat;
								APL_GOBACK_FAIL;
							}
						  }
						if (strcmp(h_dl_client,p_mstclt_a) == 0)
						{
					   if(APL_SUCCESS == val_perTxnIV_DEAL(p_mstclt_a,TXNFEE,'S',chr_prev_param_str,chr_g_bl_upto_dt,
																		&count,&int_retstat,l_debug_info_ptr))
						{
							count_no = count;
							printf("count_no :|%d|",count_no);
						}	
						
						if(count_no)	
						{
							if(APL_SUCCESS == val_perTxnIV_DEAL_UPDATE(p_mstclt_a,  TXNFEE,'S',chr_h_param_code, 
										chr_prev_param_str,tot_adm_txn_ins, tot_adm_charge_quantity, chr_g_bl_ccycode, 
										tot_adm_fee_quantity,p_mstclt_a,chr_h_txnsrvind,&int_retstat,l_debug_info_ptr))	
								printf("Successfully Updated into IV_DEAL");
						}
						else
						{
						if(APL_FAILURE == IV_Mod_NewIVTRANSAC(p_mstclt_a,  TXNFEE,'S',chr_h_param_code, chr_prev_param_str,
						tot_adm_txn_ins, tot_adm_charge_quantity, chr_g_bl_ccycode, tot_adm_fee_quantity,
						p_mstclt_a,chr_h_txnsrvind,&int_retstat,l_debug_info_ptr))
							{
								int_bl_err_level = 1;
								if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
								{
									CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
									CO_FreeErrLst(l_debug_info_ptr);
								}
								*int_p_retstat = int_retstat;
								APL_GOBACK_FAIL;
							}
					   }
						}
					   
						tot_adm_fee_quantity = 0.0;
						tot_adm_charge_quantity = 0.0;
						tot_adm_txn_ins = 0.0;
						
						}
						if (chr_g_bl_gen == 'M')
						{
							
					/*	   tot_adm_cons_charge_quantity  = tot_adm_cons_charge_quantity * h_exchg_rt_mstfee_bl;
					*/		tot_adm_cons_charge_quantity  = 1.0;/* vinay kalaskar */
							tot_adm_cons_fee_quantity = tot_adm_cons_fee_quantity * h_exchg_rt_mstfee_bl;
							l_round_val = 0.0;
					/*	   CO_Round(tot_adm_cons_charge_quantity , int_h_mst_bl_decimallen, &l_round_val);
							tot_adm_cons_charge_quantity = l_round_val;
					*/		l_round_val = 0.0;
							CO_Round(tot_adm_cons_fee_quantity , int_h_mst_bl_decimallen, &l_round_val);
							tot_adm_cons_fee_quantity = l_round_val;
							l_round_val = 0.0;
							CO_Round(tot_adm_txn_cons_ins , int_h_mst_bl_decimallen, &l_round_val);
							tot_adm_txn_cons_ins = l_round_val;
							l_round_val = 0.0;
						if(tot_adm_txn_cons_ins > 0)
						{	
					   if(APL_SUCCESS == val_perTxnIV_DEAL(h_dl_client,TXNFEE,'S',chr_prev_param_str,chr_g_bl_upto_dt,
																		&count,&int_retstat,l_debug_info_ptr))
						{
							count_no = count;
							printf("count_no :|%d|",count_no);
						}	
						
						if(count_no)	
						{
					    if(APL_SUCCESS == val_perTxnIV_DEAL_UPDATE(h_dl_client, TXNFEE,'S',chr_h_param_code,
													chr_prev_param_str, tot_adm_txn_cons_ins, tot_adm_cons_charge_quantity,
													chr_mst_bl_ccycode, tot_adm_cons_fee_quantity, p_mstclt_a,chr_h_txnsrvconsind,
												   &int_retstat,l_debug_info_ptr))
				       {
								printf("Successfully updated into IV_DEAL ");
					    }			 
						}
						else
						{
						if(APL_FAILURE == IV_Mod_NewIVTRANSAC(h_dl_client, TXNFEE,'S',chr_h_param_code, chr_prev_param_str,
						tot_adm_txn_cons_ins, tot_adm_cons_charge_quantity, chr_mst_bl_ccycode, tot_adm_cons_fee_quantity,
						p_mstclt_a, chr_h_txnsrvconsind, &int_retstat,l_debug_info_ptr))
							{
								int_bl_err_level = 1;
								if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
								{
									CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
									CO_FreeErrLst(l_debug_info_ptr);
								}
								*int_p_retstat = int_retstat;
								APL_GOBACK_FAIL;
							
							
							tot_adm_cons_fee_quantity = 0.0;
							tot_adm_cons_charge_quantity = 0.0;
							tot_adm_txn_cons_ins = 0.0;
							}
						}
						}
					}
					 srv_charge = 0.0;
					printf("dbl_h_countervalue:|%lf| dbl_h_mstcountervalue |%lf|", dbl_h_countervalue,dbl_h_mstcountervalue );
					if (dbl_h_countervalue >= 0)
					{
						strcpy(chr_h_txnsrvind,APL_NULL_STRING);
						memset(&l_iv_data_struct_h_dladmgrp, NULL, sizeof(IV_DATA_STRUCT_H));
						l_charge_qty=1;
							strcpy(h_param_ind,h_identiy_no);
						if (dbl_h_countervalue > 0)
						{
						if(APL_FAILURE == IV_Proc_CalcFee(chr_l_treps_ind,chr_acct_str,TXNFEE,proc_data,h_param_ind,
									chr_h_param_code,dbl_h_countervalue,dbl_h_countervalue,chr_l_charge_type,
									chr_l_fee_type,&srv_charge,l_iv_data_struct_h_dladmgrp,'I',p_mstclt_a,
									chr_l_charge_basis,chr_l_fee_basis,chr_h_txnsrvind,&int_retstat,l_debug_info_ptr))
						{
							if(int_retstat == IV_CRITCAL_ERROR_IND)
							{
								fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
								fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
								fflush(fp);
								int_bl_err_level = 1;
								if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
								{
									CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
									CO_FreeErrLst(l_debug_info_ptr);
								}
								*int_p_retstat = int_retstat;
							}
						}
						}
						printf("Bageshri multilple h_identiy_no |%s| passed",h_identiy_no);				
						/* PJ */
						printf("PJ %lf\n %lf\n %lf\n ", dbl_txnminfee, dbl_txnmaxfee, srv_charge );
						/*if((l_multi_settle == 0 ) || (!strcmp(chr_l_bill_dep,"INP")))*/
						if(l_multi_settle == 0 )
						{
							printf("Multiple 0 dbl_h_countervalue |%lf|\n",dbl_h_countervalue);
							if (dbl_h_countervalue > 0)
							{
							if (dbl_txnminfee > 0 && dbl_txnmaxfee > 0 && srv_charge > 0)
							{
							if (srv_charge < dbl_txnminfee )
										srv_charge = dbl_txnminfee;
							else if (srv_charge > dbl_txnmaxfee )
										srv_charge = dbl_txnmaxfee;
							}
							printf("\nEntering :|%s||%lf||%lf||%lf|\n",h_dl_client,dbl_txnmaxfee,dbl_txnminfee,srv_charge);
							}	
							
							if ((dbl_h_countervalue == 0) && (dbl_txnminfee > 0))	
							{
							/*	ISKB-1937 Apply Min fee for FOC Deals	*/
							srv_charge = dbl_txnminfee;	
							printf("\nEntering IV_Mod_NewIVTRANSFee:|%s||%lf||%lf|\n",h_dl_client,dbl_txnminfee,srv_charge);

							if(APL_FAILURE == IV_Mod_NewIVTRANSFee(h_dl_client,TXNFEE,'I'," ",
							srv_charge,proc_data,0.0,dbl_h_countervalue,chr_g_bl_ccycode,
							h_amt,p_mstclt_a,"I;",&int_retstat,l_debug_info_ptr))
							{
								int_bl_err_level = 1;
								if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
								{
									CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
									CO_FreeErrLst(l_debug_info_ptr);
							}
							*int_p_retstat = int_retstat;
							
							APL_GOBACK_FAIL;
							}
							}
                           Alert(" srv_charge|%lf|",srv_charge);
						   /*CHANGES START FOR SKIP UPDATION TO DATE OF BILLING FOR TREPS CHARGES START BY RAHUL */
				if(strcmp(chr_l_treps_ind,"T") != 0)  					/* For trpes Charges we are ignoring for update DL_deal COMM_AMT*/
				{
							if(APL_SUCCESS == IV_Mod_DL_DEAL_UPDATE(h_dl_client,h_identiy_no,srv_charge,
																					&int_retstat,l_debug_info_ptr))
							{
								printf("Successfully Updated DL_DEAL ");
							}
							
				}
                else{
					
					if(APL_SUCCESS == IV_Mod_CUSTODY_TREPS_CHARGES_UPDATE(h_dl_client,h_identiy_no,srv_charge,
																					&int_retstat,l_debug_info_ptr))
							{
								printf("Successfully Updated CUSTODY_TREPS_CHARGES ");
							}

				}					
							
						}
						
						int_i_cnt = 0;
						printf("(l_iv_data_struct_h_dladmgrp+int_i_cnt)->proc_data |%s|\n",(l_iv_data_struct_h_dladmgrp+int_i_cnt)->proc_data);
						if (strlen((l_iv_data_struct_h_dladmgrp+int_i_cnt)->proc_data) > 0)
						{
							
							strcpy(chr_h_txnsrvind,APL_NULL_STRING);
							 srv_charge = 0.0;
							strcpy(h_param_ind,h_identiy_no);
							if (dbl_h_countervalue > 0)
							{
						if(APL_FAILURE == IV_Proc_CalcFee((l_iv_data_struct_h_dladmgrp+int_i_cnt)->Treps_flag,chr_acct_str,TXNFEE,(l_iv_data_struct_h_dladmgrp+int_i_cnt)->proc_data,
								h_param_ind,  chr_h_param_code, dbl_h_countervalue, dbl_h_countervalue,chr_l_charge_type,chr_l_fee_type
								,&srv_charge,l_iv_data_struct_h_dladmgrp,'I',p_mstclt_a,chr_l_charge_basis,chr_l_fee_basis,
									chr_h_txnsrvind,&int_retstat,l_debug_info_ptr))
							{
								if(int_retstat == IV_CRITCAL_ERROR_IND)
								{
									fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
									fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
									fflush(fp);
									int_bl_err_level = 1;
									if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
									{
										 CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
										CO_FreeErrLst(l_debug_info_ptr);
									}
									*int_p_retstat = int_retstat;
								}
							}
							}	
							/* PJ */
						printf("PJ %lf %lf %lf \n", dbl_txnminfee, dbl_txnmaxfee, srv_charge );
						/*if((l_multi_settle == 0 ) || (!strcmp(chr_l_bill_dep,"INP")))*/
						if(l_multi_settle == 0 ) 
						{
							printf("Multiple 0 dbl_h_countervalue |%lf|\n",dbl_h_countervalue);
							if (dbl_h_countervalue > 0)
						{
							if (dbl_txnminfee > 0 && dbl_txnmaxfee > 0 && srv_charge > 0)
							{
							if (srv_charge < dbl_txnminfee )
										srv_charge = dbl_txnminfee;
							else if (srv_charge > dbl_txnmaxfee )
										srv_charge = dbl_txnmaxfee;
							}	
							}

							if ((dbl_h_countervalue == 0) && (dbl_txnminfee > 0))	
							{
							/*	ISKB-1937 Apply Min fee for FOC Deals	*/
							srv_charge = dbl_txnminfee;	
							printf("\nEntering IV_Mod_NewIVTRANSFee:|%s||%lf||%lf|\n",h_dl_client,dbl_txnminfee,srv_charge);

							if(APL_FAILURE == IV_Mod_NewIVTRANSFee(h_dl_client,TXNFEE,'I'," ",
							srv_charge,proc_data,0.0,dbl_h_countervalue,chr_g_bl_ccycode,
							h_amt,p_mstclt_a,"G;",&int_retstat,l_debug_info_ptr))
							{
								int_bl_err_level = 1;
								if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
								{
									CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
									CO_FreeErrLst(l_debug_info_ptr);
							}
							*int_p_retstat = int_retstat;

							APL_GOBACK_FAIL;
							}
							}	
							
							  /*CHANGES START FOR SKIP UPDATION TO DATE OF BILLING FOR TREPS CHARGES START BY RAHUL */
				if(strcmp(chr_l_treps_ind,"T") != 0)  					/* For trpes Charges we are ignoring for update DL_deal COMM_AMT*/
				{
							if(APL_SUCCESS == IV_Mod_DL_DEAL_UPDATE(h_dl_client,h_identiy_no,srv_charge,
																					&int_retstat,l_debug_info_ptr))
							{
								printf("Successfully Updated DL_DEAL ");
							}
							
				}
                else
                {
                  
				  if(APL_SUCCESS == IV_Mod_CUSTODY_TREPS_CHARGES_UPDATE(h_dl_client,h_identiy_no,srv_charge,
																					&int_retstat,l_debug_info_ptr))
							{
								printf("Successfully Updated CUSTODY_TREPS_CHARGES ");
							}
				  
                }
				
							
						}
							
							int_grp_cnt = 0;
							int_new_grp = 0;
							while(strlen((l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt)->proc_data) > 0)
							{
								if(strcmp((l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt)->proc_data,(l_iv_data_struct_h_dladmgrp+int_i_cnt)->proc_data) == 0 && (strcmp((l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt)->Treps_flag,(l_iv_data_struct_h_dladmgrp+int_i_cnt)->Treps_flag)==0 ))
								{
									int_new_grp=1;
									break;
								}
								++int_grp_cnt;
							}
							if (int_new_grp == 0)
							{
								memset((l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt)->proc_data,'\0',100);
								strcpy((l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt)->proc_data,(l_iv_data_struct_h_dladmgrp+int_i_cnt)->proc_data);
								memset((l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt)->param_flag,'\0',50);
								strcpy((l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt)->param_flag,(l_iv_data_struct_h_dladmgrp+int_i_cnt)->param_flag);
								(l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt)->chrg_quant = 1;
								(l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt)->fees_qty = dbl_h_countervalue;
								(l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt)->h_chrg = srv_charge;
								strcpy((l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt)->Treps_flag,(l_iv_data_struct_h_dladmgrp+int_i_cnt)->Treps_flag);
								if(int_grp_cnt < 49)
								{
									memset((l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt+1)->proc_data,'\0',100);
									/* strcpy((l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt+1)->proc_data,'\0');*/
									strcpy((l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt+1)->proc_data,APL_NULL_STRING);
									memset((l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt+1)->param_flag,'\0',50);
									strcpy((l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt+1)->param_flag,APL_NULL_STRING);
									(l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt+1)->chrg_quant = 0;
									(l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt+1)->fees_qty = 0;
									(l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt+1)->h_chrg = 0;
								}

							}
							else
							{
								(l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt)->chrg_quant += 1;
								(l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt)->fees_qty += dbl_h_countervalue;
								(l_iv_deal_data_struct_h_dladmgrp+int_grp_cnt)->h_chrg += srv_charge;
							}
						}
						else
						{
								tot_adm_charge_quantity = tot_adm_charge_quantity + 1;
								tot_adm_fee_quantity = tot_adm_fee_quantity + dbl_h_countervalue;
								if(srv_charge > 0)
								{
									printf("Serv Charge |%lf|\n",srv_charge);
									tot_adm_txn_chg += srv_charge;
									tot_adm_txn_ins = srv_charge;/*vinay*/
									tot_txn_chg += srv_charge;
								}
						}
						memset(&l_iv_data_struct_h_dladmgrp, NULL, sizeof(IV_DATA_STRUCT_H));
					}

					printf("tot_txn_chg after txn |%lf|\n",tot_txn_chg);
					if ((chr_g_bl_gen == 'M')&&(dbl_h_mstcountervalue >= 0 ))
					{

						
						strcpy(chr_h_txnsrvconsind,APL_NULL_STRING);
						memset(&l_iv_data_struct_h_dladmgrpcon, NULL, sizeof(IV_DATA_STRUCT_H));
						l_mst_charge_qty=1;
							strcpy(h_param_ind,h_identiy_no);
						if (dbl_h_mstcountervalue > 0 )	
						{
						if(APL_FAILURE == IV_Proc_CalcFee(chr_l_treps_ind,chr_mstacctstr ,TXNFEE,proc_data,h_param_ind,chr_h_param_code,
							dbl_h_mstcountervalue, dbl_h_mstcountervalue, chr_l_charge_type,chr_l_fee_type,&srv_charge,
							l_iv_data_struct_h_dladmgrpcon,'C',p_mstclt_a,chr_l_charge_basis,chr_l_fee_basis,
							chr_h_txnsrvconsind,&int_retstat,l_debug_info_ptr))
						{
							if(int_retstat == IV_CRITCAL_ERROR_IND)
							{
								fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
								fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
								fflush(fp);
								int_bl_err_level = 1;
								if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
								{
									CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
									CO_FreeErrLst(l_debug_info_ptr);
								}
								*int_p_retstat = int_retstat;
							}
						}
							
						/* PJ */
						printf(" %lf %lf %lf ", dbl_mst_txnminfee, dbl_mst_txnmaxfee, srv_charge );
						/*if((l_multi_settle == 0 ) || (!strcmp(chr_l_bill_dep,"INP")))*/
						if(l_multi_settle == 0 ) 
						{
							if (dbl_mst_txnminfee > 0 && dbl_mst_txnmaxfee > 0 && srv_charge > 0)
							{
							if (srv_charge < dbl_mst_txnminfee )
										srv_charge = dbl_mst_txnminfee;
							else if (srv_charge > dbl_mst_txnmaxfee )
										srv_charge = dbl_mst_txnmaxfee;
							}	
						}
						}
					  //srv_charge = srv_charge * l_subbl_mstbl_rt;/* vinay */
						if ((dbl_h_mstcountervalue == 0) && (dbl_txnminfee > 0))	
						{
						/*	ISKB-1937 Apply Min fee for FOC Deals	*/
							srv_charge = dbl_txnminfee;	
							printf("\nEntering IV_Mod_NewIVTRANSFee:|%s||%lf||%lf|\n",h_dl_client,dbl_txnminfee,srv_charge);

							if(APL_FAILURE == IV_Mod_NewIVTRANSFee(h_dl_client,TXNFEE,'I'," ",
							srv_charge,proc_data,0.0,dbl_h_countervalue,chr_g_bl_ccycode,
							h_amt,p_mstclt_a,"I;",&int_retstat,l_debug_info_ptr))
							{
								int_bl_err_level = 1;
								if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
								{
									CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
									CO_FreeErrLst(l_debug_info_ptr);
							}
							*int_p_retstat = int_retstat;

							APL_GOBACK_FAIL;
							}
						}	

						int_i_cnt = 0;
						if (strlen((l_iv_data_struct_h_dladmgrpcon+int_i_cnt)->proc_data) > 0)
						{
							
							strcpy(chr_h_txnsrvconsind,APL_NULL_STRING);
							 srv_charge = 0.0;
							strcpy(h_param_ind,h_identiy_no);
							
							if (dbl_h_mstcountervalue > 0 )	
							{
							if(APL_FAILURE == IV_Proc_CalcFee((l_iv_data_struct_h_dladmgrpcon+int_i_cnt)->Treps_flag,chr_mstacctstr,TXNFEE,
													(l_iv_data_struct_h_dladmgrpcon+int_i_cnt)->proc_data,h_param_ind,
													chr_h_param_code, dbl_h_mstcountervalue, dbl_h_mstcountervalue, chr_l_charge_type,
													chr_l_fee_type,&srv_charge,l_iv_data_struct_h_dladmgrpcon,'C',p_mstclt_a,
													chr_l_charge_basis,chr_l_fee_basis,chr_h_txnsrvconsind,&int_retstat,
													l_debug_info_ptr))
							{
								if(int_retstat == IV_CRITCAL_ERROR_IND)
								{
									fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
									fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
									fflush(fp);
									int_bl_err_level = 1;
									if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
									{
										 CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
										CO_FreeErrLst(l_debug_info_ptr);
									}
									*int_p_retstat = int_retstat;
								}
							}
							
						/* PJ */
						printf(" %lf %lf %lf ", dbl_txnminfee, dbl_txnmaxfee, srv_charge );
						/*if((l_multi_settle == 0 ) || (!strcmp(chr_l_bill_dep,"INP")))*/
						if(l_multi_settle == 0 ) 
						{

							if (dbl_mst_txnminfee > 0 && dbl_mst_txnmaxfee > 0 && srv_charge > 0)
							{
							if (srv_charge < dbl_mst_txnminfee )
										srv_charge = dbl_mst_txnminfee;
							else if (srv_charge > dbl_mst_txnmaxfee )
										srv_charge = dbl_mst_txnmaxfee;
							}	
						}
						}

							if ((dbl_h_mstcountervalue == 0) && (dbl_txnminfee > 0))	
							{
							/*	ISKB-1937 Apply Min fee for FOC Deals	*/
							srv_charge = dbl_txnminfee;	
							printf("\nEntering IV_Mod_NewIVTRANSFee:|%s||%lf||%lf|\n",h_dl_client,dbl_txnminfee,srv_charge);

							if(APL_FAILURE == IV_Mod_NewIVTRANSFee(h_dl_client,TXNFEE,'I'," ",
							srv_charge,proc_data,0.0,dbl_h_countervalue,chr_g_bl_ccycode,
							h_amt,p_mstclt_a,"G;",&int_retstat,l_debug_info_ptr))
							{
								int_bl_err_level = 1;
								if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
								{
									CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
									CO_FreeErrLst(l_debug_info_ptr);
							}
							*int_p_retstat = int_retstat;

							APL_GOBACK_FAIL;
							}
							}	
						//	srv_charge = srv_charge * l_subbl_mstbl_rt;
						
						
							int_grp_cnt = 0;
							int_new_grp = 0;
							while(strlen((l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt)->proc_data) > 0)
							{
								if(strcmp((l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt)->proc_data,(l_iv_data_struct_h_dladmgrpcon+int_i_cnt)->proc_data) == 0&& (strcmp((l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt)->Treps_flag,(l_iv_data_struct_h_dladmgrpcon+int_i_cnt)->Treps_flag)==0 ))
								{
									int_new_grp=1;
									break;
								}
								++int_grp_cnt;
							}
							if (int_new_grp == 0)
							{
								memset((l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt)->proc_data,'\0',100);
								strcpy((l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt)->proc_data,(l_iv_data_struct_h_dladmgrpcon+int_i_cnt)->proc_data);
								memset((l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt)->param_flag,'\0',50);
								strcpy((l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt)->param_flag,(l_iv_data_struct_h_dladmgrpcon+int_i_cnt)->param_flag);
								(l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt)->chrg_quant = 1;
								(l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt)->fees_qty = dbl_h_mstcountervalue;
								(l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt)->h_chrg = srv_charge;
								strcpy((l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt)->Treps_flag,(l_iv_data_struct_h_dladmgrpcon+int_i_cnt)->Treps_flag);
								
								if(int_grp_cnt < 49)
								{
									memset((l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt+1)->proc_data,'\0',100);
									/* strcpy((l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt+1)->proc_data,'\0'); */
									strcpy((l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt+1)->proc_data,APL_NULL_STRING);
									memset((l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt+1)->param_flag,'\0',50);
									/* strcpy((l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt+1)->param_flag,'\0'); */
									strcpy((l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt+1)->param_flag,APL_NULL_STRING);
									(l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt+1)->chrg_quant = 0;
									(l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt+1)->fees_qty = 0;
									(l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt+1)->h_chrg = 0;
								}

							}
							else
							{
								(l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt)->chrg_quant +=1;
								(l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt)->fees_qty += dbl_h_mstcountervalue;
								(l_iv_deal_data_struct_h_dladmgrpcon+int_grp_cnt)->h_chrg += srv_charge;
							}
						}
						else
						{
							   tot_adm_cons_charge_quantity = tot_adm_cons_charge_quantity +1;/*vinay*/
								tot_adm_cons_fee_quantity = tot_adm_cons_fee_quantity + dbl_h_mstcountervalue;
								if(srv_charge > 0)
								{
									printf("Mast Serv Charge |%lf|\n",srv_charge);
									tot_adm_txn_cons_chg += srv_charge;
									tot_adm_txn_cons_ins = srv_charge;/*vinay*/
									tot_txn_chg += srv_charge;
								}
						}
						memset(&l_iv_data_struct_h_dladmgrp, NULL, sizeof(IV_DATA_STRUCT_H));
					}
					printf("tot_txn_chg after master txn |%lf|\n",tot_txn_chg);

				strcpy(chr_prev_param_str,proc_data);

				}
			/* End of Per txn **************/
		}
		

		EXEC SQL CLOSE trcnt_cur_1;
		int_is_trcnt_cur_open = 0;

		

		memset(chr_l_where_stmt,'\0',500);
		strcpy(chr_l_where_stmt," and clt_reqdel_ind = 'Y'");

		if(chr_l_instrflg == 'Y')
			strcat(chr_l_where_stmt," and b.instr_code = a.instr_code ");
		
		strcat(chr_l_where_stmt," and b.dl_class not in ('28','19','20','90','26','59','56') ");
		strcat(chr_l_where_stmt," and INFORMATON IS NULL ");
		int_retstat = IV_SUCCESS;
		/*if(APL_FAILURE == IV_Proc_CalcNoTrd(h_dl_client,chr_l_where_stmt,&nNoDeletions,'N',chr_l_instrflg,'N',&int_retstat,l_debug_info_ptr))*/
		if(APL_FAILURE == IV_Proc_CalcNoTrd(h_dl_client,chr_l_where_stmt,&nNoDeletions,'N',chr_l_instrflg,'N',chr_l_bill_dep,&int_retstat,l_debug_info_ptr))
		{
			fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}
			*int_p_retstat = int_retstat;
		}
	
		/* Calculate No of trades for Bucket transaction	HDFCIV_004	Rohit	*/
		int_retstat = IV_SUCCESS;
		printf("Bucket Transaction for client:|%s|\n",h_dl_client);
		if(APL_FAILURE == IV_Proc_CalcBuckTxnNo(h_dl_client,&nNoBucketTxn,&int_retstat,l_debug_info_ptr))
		{
			fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}
			*int_p_retstat = int_retstat;
		}
		
	/************************************************************************************************/
		
		/* Calculate No of MutualFund transactions **** vinay kalaskar ******/
	   int_retstat = IV_SUCCESS;
		
		printf("Entering IV_Proc_CalcMutualFundNo:|%s||%s||%s|\n",chr_acct_str,p_mstclt_a,h_dl_client);
		/*if(APL_FAILURE == IV_Proc_CalcMutualFundNo(chr_acct_str,p_mstclt_a,h_dl_client,
										chr_h_bl_upto_dt,&int_retstat,l_debug_info_ptr))*/
		if(APL_FAILURE == IV_Proc_CalcMutualFundNo(chr_acct_str,p_mstclt_a,h_dl_client,
										chr_h_bl_upto_dt, chr_l_bill_dep,&int_retstat,l_debug_info_ptr))
		{
			fprintf(fp,"Error in IV_Proc_CalcMutualFundNo for  %s. Please contact support\n",h_dl_client);
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}
				*int_p_retstat = int_retstat;
		}

	/***********************************************************************************************/	
	
	}	
	
	printf("tot_txn_chg After Cursor	|%lf|\n",tot_txn_chg);
	int_i_cnt = 0;
	int_l_err_flg = IV_SUCCESS;
	while (strlen((l_iv_data_struct_h_dlgrp+int_i_cnt)->proc_data)> 0)
	{

		printf("\nIn Group client is %s",chr_acct_str);

		strcpy(chr_acct_str,p_cltt_str);
		srv_charge = 0.0;

		int_retstat = IV_SUCCESS;
	
 if(strcmp(chr_l_fee_basis,"COUNTERVALUE PER TXN") == 0 && strcmp(chr_l_charge_basis,"PER TXN") == 0)	
 
	 (l_iv_data_struct_h_dlgrp+int_i_cnt)->chrg_quant = 1;/* vinay kalaskar */
							strcpy(h_param_ind,h_identiy_no);

	printf("\n In Group (l_iv_data_struct_h_dlgrp+int_i_cnt)->proc_data is %s",(l_iv_data_struct_h_dlgrp+int_i_cnt)->proc_data);
	printf("\n In Group h_param_ind is %s",h_param_ind);
	printf("\n In Group chr_h_param_code is %s",chr_h_param_code);
	printf("\n In Group fees_qty is %f",(l_iv_data_struct_h_dlgrp+int_i_cnt)->fees_qty);
	printf("\n In Group chrg_quant is %f",(l_iv_data_struct_h_dlgrp+int_i_cnt)->chrg_quant);
	Alert("VELU [%s]",(l_iv_data_struct_h_dlgrp+int_i_cnt)->Treps_flag);
   if(APL_FAILURE == IV_Proc_CalcFee((l_iv_data_struct_h_dlgrp+int_i_cnt)->Treps_flag,chr_acct_str,TXNFEE,(l_iv_data_struct_h_dlgrp+int_i_cnt)->proc_data,
		    h_param_ind,chr_h_param_code,(l_iv_data_struct_h_dlgrp+int_i_cnt)->fees_qty,
			 (l_iv_data_struct_h_dlgrp+int_i_cnt)->chrg_quant,chr_l_charge_type,chr_l_fee_type,
			 &srv_charge,l_iv_data_struct_h_dlgrp,'I',p_mstclt_a,chr_l_charge_basis,chr_l_fee_basis,
			 chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}

				*int_p_retstat = int_retstat;
				int_l_err_flg = IV_CRITCAL_ERROR_IND; 
			}
		}
	
		printf("srv_charge:|%lf|\n",srv_charge);	

		/*Added by siva.ganapathi for Annexures on  02/06/2009 -- started*/
		/*printf("\n In group before calling IV_Proc_CalcCommAmt fee basis ::: %s",chr_l_fee_basis);
		printf("\n before calling IV_Proc_CalcCommAmt charge basis		::: %s",chr_l_charge_basis);
		printf("\n before calling IV_Proc_CalcCommAmt clientcode		::: %s",chr_acct_str);
		printf("\n before calling IV_Proc_CalcCommAmt chr_l_bill_dep	::: %s",chr_l_bill_dep);
		printf("\n before calling IV_Proc_CalcCommAmt billdate			::: %s",chr_g_bl_upto_dt);
		printf("\n before calling IV_Proc_CalcCommAmt srv_charge		::: %f",srv_charge);
		printf("\n before calling IV_Proc_CalcCommAmt no_of_trades		::: %f",(l_iv_data_struct_h_dlgrp+int_i_cnt)->chrg_quant);
		printf("\n before calling IV_Proc_CalcCommAmt chr_prev_param_str :: %s",(l_iv_data_struct_h_dlgrp+int_i_cnt)->proc_data);
		printf("\n before calling IV_Proc_CalcCommAmt chr_h_param_code  ::: %s",chr_h_param_code);*/
		Alert(" group [%s]",(l_iv_data_struct_h_dlgrp+int_i_cnt)->Treps_flag);
		if(no_of_trades > 0 && srv_charge > 0)
		{
			if(strcmp((l_iv_data_struct_h_dlgrp+int_i_cnt)->Treps_flag,"T") != 0)
			  {	  
							if(APL_FAILURE == IV_Proc_CalcCommAmt(chr_l_fee_basis,chr_l_charge_basis,chr_acct_str,chr_l_bill_dep,chr_g_bl_upto_dt,srv_charge,(l_iv_data_struct_h_dlgrp+int_i_cnt)->chrg_quant,(l_iv_data_struct_h_dlgrp+int_i_cnt)->proc_data,chr_h_param_code,"G",&int_retstat,l_debug_info_ptr))	
							{
									printf("\n Error occured when updating the Comm_amt in Dl_deal and dl_hisdeal");
							}
			  }
			  else
			  {
				  if(APL_FAILURE == IV_Proc_CalcCommAmtForTreps(chr_l_fee_basis,chr_l_charge_basis,chr_acct_str,chr_g_bl_upto_dt,srv_charge,(l_iv_data_struct_h_dlgrp+int_i_cnt)->chrg_quant,(l_iv_data_struct_h_dlgrp+int_i_cnt)->proc_data,chr_h_param_code,"G",&int_retstat,l_debug_info_ptr))	
						{
								printf("\n Error occuered when updating the Comm_amt in Custody TABLE");
						}
					  
			  }	  
					  		  
		}
		/*Added by siva.ganapathi for Annexures on  02/06/2009 -- Ended*/

		if(srv_charge > 0)
			tot_txn_chg += srv_charge;
		++int_i_cnt;

	}

	printf("tot_txn_chg |%lf| for client |%s|\n",tot_txn_chg,h_dl_client);
	if(!(strcmp(chr_l_fee_basis,"COUNTERVALUE PER TXN") == 0 && strcmp(chr_l_charge_basis,"PER TXN") == 0))
	{
	if( int_l_err_flg != IV_CRITCAL_ERROR_IND ) 
	{
		printf("l_nil_fees |%lf| l_minimumfee |%lf| l_maximum_fee |%lf|\n",l_nil_fees,l_minimumfee,l_maximum_fee);
		if ((tot_txn_chg == 0) && (l_nil_fees > 0) )
		{
			int_retstat = IV_SUCCESS;
		#ifdef BILLDEBUG 
         
			fprintf(TestRep, "\nInserting Record into IV_SERVICE_CHRG\n");     
			fprintf(TestRep, "account: %s\n",h_dl_client);
			fprintf(TestRep, "nil fees: %lf",l_nil_fees);
		   fprintf(TestRep, " min fees adjust: %lf",0.0);
			fprintf(TestRep, " MAX fees adjust: %lf",0.0); 
			fprintf(TestRep, " tot_chg: %lf\n",0.0);
			fprintf(TestRep, "currency :%s\n",chr_g_bl_ccycode);
			fflush(TestRep);

		#endif 
			if(APL_FAILURE == IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,h_dl_client,l_nil_fees,0.0,0.0,0.0,chr_g_bl_ccycode,'I',
															TXNFEE,p_mstclt_a,'N',&int_retstat,l_debug_info_ptr))
			{
				fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
			}
		}
		else if(tot_txn_chg > 0)
		{
			printf("\nInserting Record into IV_SERVICE_CHRG:|%lf|\n",tot_txn_chg);     
			if(tot_txn_chg < l_minimumfee)
				l_minimumfee_adj = l_minimumfee - tot_txn_chg;
			else
				l_minimumfee_adj = 0;
			if((tot_txn_chg > l_maximum_fee) && (l_maximum_fee != 0))
			{
				l_maximum_fee_adj = l_maximum_fee - tot_txn_chg;
			}
			else
				l_maximum_fee_adj = 0;

			int_retstat = IV_SUCCESS;
		#ifdef BILLDEBUG 
         
			fprintf(TestRep, "\nInserting Record into IV_SERVICE_CHRG\n");     
			fprintf(TestRep, "account: %s\n",h_dl_client);
			fprintf(TestRep, "nil fees: %lf",0.0);
		   fprintf(TestRep, " min fees adjust: %lf",l_minimumfee_adj);
			fprintf(TestRep, " MAX fees adjust: %lf",l_maximum_fee_adj); 
			fprintf(TestRep, " tot_chg: %lf\n",tot_txn_chg);
			fprintf(TestRep, "currency :%s\n",chr_g_bl_ccycode);
			fflush(TestRep);

		#endif 
		/*added incld_in_ann_min_fee by shruthi kumbla for ISKB_1901*/
			if(APL_FAILURE == IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,h_dl_client,0.0,l_minimumfee_adj,l_maximum_fee_adj,tot_txn_chg,
			    chr_g_bl_ccycode,'I',TXNFEE,p_mstclt_a,l_iv_client_serv_basis_structa.incld_in_ann_min_fee,&int_retstat,l_debug_info_ptr))
			{
				fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);

					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
				int_bl_err_level = 1;
			}
		}

	} 
	}

	/* HDFCIV_004 Rohit No Admin charges for India specific */
	IF_COND_NOT_EXISTS("ADMIN_CHARGE","NO_TXN_ADMIN")
	{
		int_i_cnt = 0;
		int_l_err_flg = IV_SUCCESS;
		while (strlen((l_iv_data_struct_h_dladmgrp+int_i_cnt)->proc_data)> 0)
		{
			strcpy(chr_acct_str,p_cltt_str);
			srv_charge = 0;
			int_retstat = IV_SUCCESS;

			strcpy(h_param_ind,h_identiy_no);
			if(APL_FAILURE == IV_Proc_CalcFee("O",chr_acct_str,ADM_TXN_FEE_IND,
								(l_iv_data_struct_h_dladmgrp+int_i_cnt)->proc_data,h_param_ind,
				 				chr_h_param_code,(l_iv_data_struct_h_dladmgrp+int_i_cnt)->fees_qty,
				 				(l_iv_data_struct_h_dladmgrp+int_i_cnt)->chrg_quant,chr_l_adm_charge_type,chr_l_adm_fee_type,
				 				&srv_charge,l_iv_data_struct_h_dladmgrp,'I',p_mstclt_a,chr_l_adm_charge_basis,
				 				chr_l_adm_fee_basis,chr_h_txnsrvind,&int_retstat,l_debug_info_ptr))
			{
				if(int_retstat == IV_CRITCAL_ERROR_IND)
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}

					*int_p_retstat = int_retstat;
					int_l_err_flg = IV_CRITCAL_ERROR_IND; 
				}
			}
			
			printf("Transaction Adm Fee Calculated For : %s\n",(l_iv_data_struct_h_dladmgrp+int_i_cnt)->proc_data);
			if(srv_charge > 0)
				tot_adm_txn_chg += srv_charge;

			++int_i_cnt;
		}
		
		
		int_i_cnt = 0;
		int_l_err_flg = IV_SUCCESS;
		printf("Should enter here :|%s|",(l_iv_deal_data_struct_h_dladmgrp+int_i_cnt)->proc_data);
		while (strlen((l_iv_deal_data_struct_h_dladmgrp+int_i_cnt)->proc_data)> 0)
		{
			//tot_adm_charge_quantity =1.0;
			tot_adm_charge_quantity = (l_iv_deal_data_struct_h_dladmgrp+int_i_cnt)->chrg_quant;
			tot_adm_fee_quantity = 0.0;
			tot_adm_fee_quantity = (l_iv_deal_data_struct_h_dladmgrp+int_i_cnt)->fees_qty * g_exchg_rt_fee_bl;
			l_round_val = 0.0;
		//	CO_Round(tot_adm_charge_quantity , int_g_blccy_decimallen, &l_round_val);
		//	tot_adm_charge_quantity = l_round_val;
			l_round_val = 0.0;
			CO_Round(tot_adm_fee_quantity , int_g_blccy_decimallen, &l_round_val);
			tot_adm_fee_quantity = l_round_val;
			tot_adm_txn_ins=0.0;
			tot_adm_txn_ins = (l_iv_deal_data_struct_h_dladmgrp+int_i_cnt)->h_chrg;
			l_round_val = 0.0;
			CO_Round(tot_adm_txn_ins, int_g_blccy_decimallen, &l_round_val);
			tot_adm_txn_ins= l_round_val;
			l_round_val = 0.0;
			if (tot_adm_txn_ins >0 )
			{
				if(APL_FAILURE == IV_Mod_NewIVTRANSAC(h_dl_client, ADM_TXN_FEE_IND,'I',chr_h_param_code, (l_iv_deal_data_struct_h_dladmgrp+int_i_cnt)->proc_data,
					tot_adm_txn_ins,tot_adm_charge_quantity, chr_g_bl_ccycode,tot_adm_fee_quantity, 
					p_mstclt_a, (l_iv_deal_data_struct_h_dladmgrp+int_i_cnt)->param_flag,&int_retstat,l_debug_info_ptr))
				{
						 int_bl_err_level = 1;
						if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
						{
								CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
								CO_FreeErrLst(l_debug_info_ptr);
						}
						*int_p_retstat = int_retstat;
						APL_GOBACK_FAIL;
				}
				tot_adm_txn_chg += tot_adm_txn_ins;
			}
			if (strcmp(h_dl_client,p_mstclt_a) == 0)
			{

				if(APL_FAILURE == IV_Mod_NewIVTRANSAC(p_mstclt_a, ADM_TXN_FEE_IND,'S', chr_h_param_code, (l_iv_deal_data_struct_h_dladmgrp+int_i_cnt)->proc_data,
					tot_adm_txn_ins,tot_adm_charge_quantity, chr_g_bl_ccycode, tot_adm_fee_quantity,
					p_mstclt_a, (l_iv_deal_data_struct_h_dladmgrp+int_i_cnt)->param_flag,&int_retstat,l_debug_info_ptr))
				{
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
							CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
							CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
					APL_GOBACK_FAIL;
			  }
			}
			
			++int_i_cnt;
		}
		
		int_i_cnt =0;
		if (chr_g_bl_gen == 'M')
		{
			while (strlen((l_iv_deal_data_struct_h_dladmgrpcon+int_i_cnt)->proc_data)> 0)
			{
				//tot_adm_cons_charge_quantity = tot_adm_cons_charge_quantity + 1.0;
			 	tot_adm_cons_charge_quantity = (l_iv_deal_data_struct_h_dladmgrpcon+int_i_cnt)->chrg_quant;
				tot_adm_cons_fee_quantity = 0.0;
				tot_adm_cons_fee_quantity = (l_iv_deal_data_struct_h_dladmgrpcon+int_i_cnt)->fees_qty * h_exchg_rt_mstfee_bl;
				l_round_val = 0.0;
				CO_Round(tot_adm_cons_charge_quantity , int_h_mst_bl_decimallen, &l_round_val);
				tot_adm_cons_charge_quantity = l_round_val;
				l_round_val = 0.0;
				CO_Round(tot_adm_cons_fee_quantity , int_h_mst_bl_decimallen, &l_round_val);
				tot_adm_cons_fee_quantity = l_round_val;
				tot_adm_txn_cons_ins=0.0;
				tot_adm_txn_cons_ins = (l_iv_deal_data_struct_h_dladmgrpcon+int_i_cnt)->h_chrg;
				l_round_val = 0.0;
				CO_Round(tot_adm_txn_cons_ins, int_h_mst_bl_decimallen, &l_round_val);
				tot_adm_txn_cons_ins= l_round_val;
				l_round_val = 0.0;
			
				if(APL_FAILURE == IV_Mod_NewIVTRANSAC(h_dl_client, ADM_TXN_FEE_IND,'S',chr_h_param_code, 
					(l_iv_deal_data_struct_h_dladmgrpcon+int_i_cnt)->proc_data,
					tot_adm_txn_cons_ins,tot_adm_cons_charge_quantity, chr_mst_bl_ccycode, tot_adm_cons_fee_quantity,
					p_mstclt_a, (l_iv_deal_data_struct_h_dladmgrpcon+int_i_cnt)->param_flag,&int_retstat,l_debug_info_ptr))
				{
						 int_bl_err_level = 1;
						  if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
						  {
								  CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
								  CO_FreeErrLst(l_debug_info_ptr);
							}
						*int_p_retstat = int_retstat;
						APL_GOBACK_FAIL;
				}
				++int_i_cnt;
			}
		}
		
			
		

		if( int_l_err_flg != IV_CRITCAL_ERROR_IND ) 
		{
			if((tot_adm_txn_chg == 0) && (l_adm_nil_fees > 0))
			{ 
				int_retstat = IV_SUCCESS;

			#ifdef BILLDEBUG 
				
				fprintf(TestRep, "\nInserting Record into IV_SERVICE_CHRG\n");     
				fprintf(TestRep, "account: %s\n",h_dl_client);
				fprintf(TestRep, "nil fees: %lf",l_adm_nil_fees);
				fprintf(TestRep, " min fees adjust: %lf",0.0);
				fprintf(TestRep, " MAX fees adjust: %lf",0.0); 
				fprintf(TestRep, " tot_chg: %lf\n",0.0);
				fprintf(TestRep, "currency :%s\n",chr_g_bl_ccycode);
				fflush(TestRep);

			#endif 
			/*added incld_in_ann_min_fee by shruthi kumbla for ISKB_1901*/
				if(APL_FAILURE == IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,h_dl_client,l_adm_nil_fees,
					 0.0,0.0,0.0,chr_g_bl_ccycode,'I',ADM_TXN_FEE_IND,l_iv_client_serv_basis_structa.incld_in_ann_min_fee,p_mstclt_a,&int_retstat,l_debug_info_ptr))
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}
			}
			else if(tot_adm_txn_chg > 0)
			{
				if(tot_adm_txn_chg < l_adm_minimumfee)
					l_minimumfee_adj = l_adm_minimumfee - tot_adm_txn_chg;
				else
					l_minimumfee_adj = 0;
				if((tot_adm_txn_chg > l_adm_maximum_fee) && (l_maximum_fee != 0))
				{
					l_maximum_fee_adj = l_adm_maximum_fee - tot_adm_txn_chg;
				}
				else
					l_maximum_fee_adj = 0;

				int_retstat = IV_SUCCESS;

			#ifdef BILLDEBUG 
				
				fprintf(TestRep, "\nInserting Record into IV_SERVICE_CHRG\n");     
				fprintf(TestRep, "account: %s\n",h_dl_client);
				fprintf(TestRep, "nil fees: %lf",0.0);
				fprintf(TestRep, " min fees adjust: %lf",l_minimumfee_adj);
				fprintf(TestRep, " MAX fees adjust: %lf",l_maximum_fee_adj); 
				fprintf(TestRep, " tot_chg: %lf\n",tot_adm_txn_chg);
				fprintf(TestRep, "currency :%s\n", chr_g_bl_ccycode);
				fflush(TestRep);

			#endif 
			/*added incld_in_ann_min_fee by shruthi kumbla for ISKB_1901*/
				if(APL_FAILURE == IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,h_dl_client,0.0,l_minimumfee_adj,l_maximum_fee_adj,tot_adm_txn_chg,
																chr_g_bl_ccycode,'I',ADM_TXN_FEE_IND,l_iv_client_serv_basis_structa.incld_in_ann_min_fee,p_mstclt_a,&int_retstat,l_debug_info_ptr))
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					*int_p_retstat = IV_CRITCAL_ERROR_IND;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
					int_bl_err_level = 1;
				}
			}
		}
	}
	/* HDFCIV_004 Rohit Admin Charges End Here */
	/* PJ Per Trade min max */
	printf(" %s %s should go here ",chr_l_fee_basis, chr_l_charge_basis );

	if(strcmp(chr_l_fee_basis,"COUNTERVALUE PER TXN") == 0 &&
			       strcmp(chr_l_charge_basis,"PER TXN") == 0)	
	{
		int_i_cnt = 0;
		int_l_err_flg = IV_SUCCESS;
		printf("proc_data:|%s|\n",(l_iv_data_struct_h_dladmgrp+int_i_cnt)->proc_data);
		
		/* HDFCIV_004 Rohit No Admin charges for India specific */
		IF_COND_NOT_EXISTS("ADMIN_CHARGE","NO_TXN_ADMIN")
		{	
		while (strlen((l_iv_data_struct_h_dladmgrp+int_i_cnt)->proc_data)> 0)
		{
			strcpy(chr_acct_str,p_cltt_str);
			srv_charge = 0;

			int_retstat = IV_SUCCESS;

			strcpy(h_param_ind,h_identiy_no);

			if(APL_FAILURE == IV_Proc_CalcFee("O",chr_acct_str,ADM_TXN_FEE_IND,
						(l_iv_data_struct_h_dladmgrp+int_i_cnt)->proc_data,h_param_ind,chr_h_param_code,
						(l_iv_data_struct_h_dladmgrp+int_i_cnt)->fees_qty,
						(l_iv_data_struct_h_dladmgrp+int_i_cnt)->chrg_quant,chr_l_adm_charge_type,
						chr_l_adm_fee_type,&srv_charge,l_iv_data_struct_h_dladmgrp,'I',p_mstclt_a,
						chr_l_adm_charge_basis,chr_l_adm_fee_basis,chr_h_txnsrvind,&int_retstat,l_debug_info_ptr))
			{
				if(int_retstat == IV_CRITCAL_ERROR_IND)
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}

					*int_p_retstat = int_retstat;
					int_l_err_flg = IV_CRITCAL_ERROR_IND; 
				}
			}
	
							/* PJ */
						printf(" %lf %lf %lf ", dbl_txnminfee, dbl_txnmaxfee, srv_charge );
						if (dbl_txnminfee > 0 && dbl_txnmaxfee > 0 && srv_charge > 0)
						{
						if (srv_charge < dbl_txnminfee )
									srv_charge = dbl_txnminfee;
						else if (srv_charge > dbl_txnmaxfee )
									srv_charge = dbl_txnmaxfee;
						}

						if(APL_SUCCESS == IV_Mod_DL_DEAL_UPDATE(h_dl_client,h_identiy_no,srv_charge,
																				&int_retstat,l_debug_info_ptr))
						{
							printf("Successfully Updated DL_DEAL ");
						}
			
			printf("Transaction Adm Fee Calculated For : %s\n",(l_iv_data_struct_h_dladmgrp+int_i_cnt)->proc_data);
			if(srv_charge > 0)
				tot_adm_txn_chg += srv_charge;

			++int_i_cnt;
		}
		}	
		
		int_i_cnt = 0;
		int_l_err_flg = IV_SUCCESS;
		printf("Should enter here** :|%s|\n ",(l_iv_deal_data_struct_h_dladmgrp+int_i_cnt)->proc_data);
		while (strlen((l_iv_deal_data_struct_h_dladmgrp+int_i_cnt)->proc_data)> 0)
		{
			printf("Here (l_iv_deal_data_struct_h_dladmgrp+int_i_cnt)->proc_data |%s| Charge |%lf|\n",(l_iv_deal_data_struct_h_dladmgrp+int_i_cnt)->proc_data,(l_iv_deal_data_struct_h_dladmgrp+int_i_cnt)->h_chrg);
			//tot_adm_charge_quantity = 1.0;
			tot_adm_charge_quantity = (l_iv_deal_data_struct_h_dladmgrp+int_i_cnt)->chrg_quant; 
			tot_adm_fee_quantity = 0.0;
			tot_adm_fee_quantity = (l_iv_deal_data_struct_h_dladmgrp+int_i_cnt)->fees_qty * g_exchg_rt_fee_bl;
			l_round_val = 0.0;
			//CO_Round(tot_adm_charge_quantity , int_g_blccy_decimallen, &l_round_val);
			//tot_adm_charge_quantity = l_round_val;
			l_round_val = 0.0;
			CO_Round(tot_adm_fee_quantity , int_g_blccy_decimallen, &l_round_val);
			tot_adm_fee_quantity = l_round_val;
			tot_adm_txn_ins=0.0;
			tot_adm_txn_ins = (l_iv_deal_data_struct_h_dladmgrp+int_i_cnt)->h_chrg;
			l_round_val = 0.0;
			CO_Round(tot_adm_txn_ins, int_g_blccy_decimallen, &l_round_val);
			tot_adm_txn_ins= l_round_val;
			l_round_val = 0.0;
			if (tot_adm_txn_ins >0 )
			{
			
		 	if(APL_SUCCESS == val_perTxnIV_DEAL(h_dl_client,TXNFEE,'I',
					  		(l_iv_deal_data_struct_h_dladmgrp+int_i_cnt)->proc_data,chr_g_bl_upto_dt,
							&count,&int_retstat,l_debug_info_ptr))
		  	{
				count_no = count;
				printf("count_no :|%d|",count_no);
		  	}	
						
		   if(count_no)	
		   {
				if(APL_SUCCESS ==val_perTxnIV_DEAL_UPDATE(h_dl_client, TXNFEE,'I',chr_h_param_code,
						       (l_iv_deal_data_struct_h_dladmgrp+int_i_cnt)->proc_data,tot_adm_txn_ins,
						       tot_adm_charge_quantity, chr_g_bl_ccycode,tot_adm_fee_quantity,p_mstclt_a,
						       (l_iv_deal_data_struct_h_dladmgrp+int_i_cnt)->param_flag,&int_retstat,l_debug_info_ptr))	  
				printf("Successfully Updated into IV_DEAL");
				
					printf("tot_txn_chg |%lf| tot_adm_txn_ins |%lf|\n",tot_adm_txn_chg,tot_adm_txn_ins);
				    tot_txn_chg += tot_adm_txn_ins;
					Alert("tot_txn_chg |%lf| \n",tot_txn_chg);
				
					
			}
			else
			{	
			if(APL_FAILURE == IV_Mod_NewIVTRANSAC(h_dl_client, TXNFEE,'I',chr_h_param_code, 
					(l_iv_deal_data_struct_h_dladmgrp+int_i_cnt)->proc_data,tot_adm_txn_ins,
					tot_adm_charge_quantity, chr_g_bl_ccycode,tot_adm_fee_quantity,p_mstclt_a,
					(l_iv_deal_data_struct_h_dladmgrp+int_i_cnt)->param_flag,&int_retstat,l_debug_info_ptr))
				{
						 int_bl_err_level = 1;
						if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
						{
								CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
								CO_FreeErrLst(l_debug_info_ptr);
						}
						*int_p_retstat = int_retstat;
						APL_GOBACK_FAIL;
				}
				printf("tot_txn_chg |%lf| tot_adm_txn_ins |%lf|\n",tot_adm_txn_chg,tot_adm_txn_ins);
				tot_txn_chg += tot_adm_txn_ins;
		    }
			
			if (strcmp(h_dl_client,p_mstclt_a) == 0)
			{
		   if(APL_SUCCESS == val_perTxnIV_DEAL(p_mstclt_a,TXNFEE,'S',
					  		(l_iv_deal_data_struct_h_dladmgrp+int_i_cnt)->proc_data,chr_g_bl_upto_dt,
							&count,&int_retstat,l_debug_info_ptr))
		   {
				count_no = count;
				printf("count_no :|%d|",count_no);
		   }	
						
		   if(count_no)	
		   {
				if(APL_SUCCESS == val_perTxnIV_DEAL_UPDATE(p_mstclt_a, TXNFEE,'S', chr_h_param_code,
							(l_iv_deal_data_struct_h_dladmgrp+int_i_cnt)->proc_data,tot_adm_txn_ins,
							tot_adm_charge_quantity, chr_g_bl_ccycode, tot_adm_fee_quantity,p_mstclt_a,
							(l_iv_deal_data_struct_h_dladmgrp+int_i_cnt)->param_flag,&int_retstat,l_debug_info_ptr))
				printf("Successfully updated into IV_DEAL");
			}
			else
			{	
			if(APL_FAILURE == IV_Mod_NewIVTRANSAC(p_mstclt_a, TXNFEE,'S', chr_h_param_code, 
					(l_iv_deal_data_struct_h_dladmgrp+int_i_cnt)->proc_data,tot_adm_txn_ins,
					tot_adm_charge_quantity, chr_g_bl_ccycode, tot_adm_fee_quantity,p_mstclt_a,
					(l_iv_deal_data_struct_h_dladmgrp+int_i_cnt)->param_flag,&int_retstat,l_debug_info_ptr))
				{
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
							CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
							CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
					APL_GOBACK_FAIL;
			  }
		   }
			}
			}
						++int_i_cnt;
		}
		
		int_i_cnt =0;
		if (chr_g_bl_gen == 'M')
		{
			while (strlen((l_iv_deal_data_struct_h_dladmgrpcon+int_i_cnt)->proc_data)> 0)
			{
		   // tot_adm_cons_charge_quantity = 1.0;
				tot_adm_cons_charge_quantity = (l_iv_deal_data_struct_h_dladmgrpcon+int_i_cnt)->chrg_quant;
			
				tot_adm_cons_fee_quantity = 0.0;
				tot_adm_cons_fee_quantity = (l_iv_deal_data_struct_h_dladmgrpcon+int_i_cnt)->fees_qty * h_exchg_rt_mstfee_bl;
				l_round_val = 0.0;
				CO_Round(tot_adm_cons_charge_quantity , int_h_mst_bl_decimallen, &l_round_val);
				tot_adm_cons_charge_quantity = l_round_val;
				l_round_val = 0.0;
				CO_Round(tot_adm_cons_fee_quantity , int_h_mst_bl_decimallen, &l_round_val);
				tot_adm_cons_fee_quantity = l_round_val;
				tot_adm_txn_cons_ins=0.0;
				tot_adm_txn_cons_ins = (l_iv_deal_data_struct_h_dladmgrpcon+int_i_cnt)->h_chrg;
				l_round_val = 0.0;
				CO_Round(tot_adm_txn_cons_ins, int_h_mst_bl_decimallen, &l_round_val);
				tot_adm_txn_cons_ins= l_round_val;
				l_round_val = 0.0;
			
		   if(tot_adm_txn_cons_ins > 0)
			{
		   if(APL_SUCCESS == val_perTxnIV_DEAL(h_dl_client,TXNFEE,'S',
			 		  		(l_iv_deal_data_struct_h_dladmgrpcon+int_i_cnt)->proc_data,chr_g_bl_upto_dt,
							&count,&int_retstat,l_debug_info_ptr))
		   {
				count_no = count;
				printf("count_no :|%d|",count_no);
		   }	
						
		   if(count_no)	
		   {
				if(APL_SUCCESS == val_perTxnIV_DEAL_UPDATE(h_dl_client, TXNFEE,'S',chr_h_param_code,
						    (l_iv_deal_data_struct_h_dladmgrpcon+int_i_cnt)->proc_data,tot_adm_txn_cons_ins,
						    tot_adm_cons_charge_quantity, chr_mst_bl_ccycode, tot_adm_cons_fee_quantity,p_mstclt_a,
						    (l_iv_deal_data_struct_h_dladmgrpcon+int_i_cnt)->param_flag,&int_retstat,l_debug_info_ptr))	
					printf("Successfully Updated into IV_DEAL");
			}
			else
			{
			if(APL_FAILURE == IV_Mod_NewIVTRANSAC(h_dl_client, TXNFEE,'S',chr_h_param_code, 
					(l_iv_deal_data_struct_h_dladmgrpcon+int_i_cnt)->proc_data,tot_adm_txn_cons_ins,
					tot_adm_cons_charge_quantity, chr_mst_bl_ccycode, tot_adm_cons_fee_quantity,p_mstclt_a,
					(l_iv_deal_data_struct_h_dladmgrpcon+int_i_cnt)->param_flag,&int_retstat,l_debug_info_ptr))
				{
						 int_bl_err_level = 1;
						  if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
						  {
								  CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
								  CO_FreeErrLst(l_debug_info_ptr);
							}
						*int_p_retstat = int_retstat;
						APL_GOBACK_FAIL;
				}
		   }
			
			}
						++int_i_cnt;
	}
			tot_adm_txn_cons_ins=0.0;/*vinay*/
		}
		
			
		
		printf("tot_txn_chg |%lf| |%lf| |%lf|\n",tot_txn_chg,l_minimumfee,l_maximum_fee);
		if( int_l_err_flg != IV_CRITCAL_ERROR_IND ) 
		{
			if((tot_txn_chg == 0) && (l_nil_fees > 0))
			{ 
				int_retstat = IV_SUCCESS;

			#ifdef BILLDEBUG 
				
				fprintf(TestRep, "\nInserting Record into IV_SERVICE_CHRG\n");     
				fprintf(TestRep, "account: %s\n",h_dl_client);
				fprintf(TestRep, "nil fees: %lf",l_adm_nil_fees);
				fprintf(TestRep, " min fees adjust: %lf",0.0);
				fprintf(TestRep, " MAX fees adjust: %lf",0.0); 
				fprintf(TestRep, " tot_chg: %lf\n",0.0);
				fprintf(TestRep, "currency :%s\n",chr_g_bl_ccycode);
				fflush(TestRep);

			#endif 
			/*added incld_in_ann_min_fee by shruthi kumbla for ISKB_1901*/
				if(APL_FAILURE == IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,h_dl_client,l_nil_fees,
					 0.0,0.0,0.0,chr_g_bl_ccycode,'I',TXNFEE,p_mstclt_a,l_iv_client_serv_basis_structa.incld_in_ann_min_fee,&int_retstat,l_debug_info_ptr))
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}
			}
			else if(tot_txn_chg > 0)
			{
				if(tot_txn_chg < l_minimumfee)
					l_minimumfee_adj = l_minimumfee - tot_txn_chg;
				else
					l_minimumfee_adj = 0;
				//if((tot_adm_txn_chg > l_maximum_fee) && (l_maximum_fee != 0))
				if((tot_txn_chg > l_maximum_fee) && (l_maximum_fee != 0))
				{
					l_maximum_fee_adj = l_maximum_fee - tot_txn_chg;
				}
				else
					l_maximum_fee_adj = 0;

				int_retstat = IV_SUCCESS;

			#ifdef BILLDEBUG 
				
				fprintf(TestRep, "\nInserting Record into IV_SERVICE_CHRG\n");     
				fprintf(TestRep, "account: %s\n",h_dl_client);
				fprintf(TestRep, "nil fees: %lf",0.0);
				fprintf(TestRep, " min fees adjust: %lf",l_minimumfee_adj);
				fprintf(TestRep, " MAX fees adjust: %lf",l_maximum_fee_adj); 
				fprintf(TestRep, " tot_chg: %lf\n",tot_txn_chg);
				fprintf(TestRep, "currency :%s\n", chr_g_bl_ccycode);
				fflush(TestRep);

			#endif 
			/*added incld_in_ann_min_fee by shruthi kumbla for ISKB_1901*/
				if(APL_FAILURE == IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,h_dl_client,0.0,l_minimumfee_adj,l_maximum_fee_adj,tot_txn_chg,
																chr_g_bl_ccycode,'I',TXNFEE,p_mstclt_a,l_iv_client_serv_basis_structa.incld_in_ann_min_fee,&int_retstat,l_debug_info_ptr))
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					*int_p_retstat = IV_CRITCAL_ERROR_IND;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
					int_bl_err_level = 1;
				}
			}
		}
	}
 	printf ("End of calculation");
	strcpy(chr_acct_str,p_cltt_str);
	
	if(nreapired_ind > 0)
	{
		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Proc_CalcTxnServFee(chr_acct_str,REPAIRFEE,nreapired_ind,p_mstclt_a,&int_retstat,l_debug_info_ptr))
		{
			*int_p_retstat = int_retstat;
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}

			*int_p_retstat = int_retstat;
			if(int_retstat == IV_CRITCAL_ERROR_IND)
				APL_GOBACK_FAIL;
		}
	}

     //shailesh 05-02-2008
     /*	
	if(nManualTrd > 0 )
	{
		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Proc_CalcTxnServFee(chr_acct_str,MANUALDEALFEE,nManualTrd,p_mstclt_a,&int_retstat,l_debug_info_ptr))
      {
         *int_p_retstat = int_retstat;
         int_bl_err_level = 1;
         if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
         {
     			CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
           	CO_FreeErrLst(l_debug_info_ptr);
        	}
        		*int_p_retstat = int_retstat;
        		if(int_retstat == IV_CRITCAL_ERROR_IND)
     			APL_GOBACK_FAIL;
      }
	} 
     */
   /*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010-- started*/
    	
   if (IV_Chk_CltAEPass(h_dl_client,LATETXNFEE,&l_clt_gen_flag,&int_retstat,l_debug_info_ptr) == APL_FAILURE )
   {
      printf("\n Failed in the function IV_Chk_CltAEPass() function");
      APL_GOBACK_FAIL;
   }

   printf("\n Client Bill generation flag for lateTxn charges is %s",l_clt_gen_flag);
   fflush(stdout);
	
	if(strcmp(l_clt_gen_flag,"Y")==0)
   {
	
	int_retstat = IV_SUCCESS;
	/*if(APL_FAILURE == IV_Proc_CalcNoLateTxns(h_dl_client,&nLateTxn,'Y',&int_retstat,l_debug_info_ptr)) PJ passing 5 actually expecting 4 arguments */
	if(APL_FAILURE == IV_Proc_CalcNoLateTxns(h_dl_client,&nLateTxn,&int_retstat,l_debug_info_ptr))
	{
		fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
		fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
		fflush(fp);
		int_bl_err_level = 1;
		if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		{
			CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
			CO_FreeErrLst(l_debug_info_ptr);
		}
		*int_p_retstat = int_retstat;
	}


	printf("==== Late Transaction Trades :|%lf|\n",nLateTxn );

	if(nLateTxn> 0)
	{
		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Proc_CalcTxnServFee(chr_acct_str,LATETXNFEE,nLateTxn,p_mstclt_a,&int_retstat,l_debug_info_ptr))
		{
			*int_p_retstat = int_retstat;
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}

			if(int_retstat == IV_CRITCAL_ERROR_IND)
				APL_GOBACK_FAIL;
		}
	}
   }
   strcpy(l_clt_gen_flag,APL_NULL_STRING);
   /*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010-- Ended*/

	if(nNoAmendments > 0)
	{
		int_retstat = IV_SUCCESS;
		
		/*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010-- started*/
    	
		if (IV_Chk_CltAEPass(h_dl_client,AMEND_FEE_IND,&l_clt_gen_flag,&int_retstat,l_debug_info_ptr) == APL_FAILURE )
		   {
		      printf("\n Failed in the function IV_Chk_CltAEPass() function");
		      APL_GOBACK_FAIL;
		   }

		   printf("\n Client Bill generation flag for AMEND_FEE_IND charges is %s",l_clt_gen_flag);
		   fflush(stdout);
		
		if(strcmp(l_clt_gen_flag,"Y")==0)
		{
				if(APL_FAILURE == IV_Proc_CalcTxnServFee(chr_acct_str,AMEND_FEE_IND,nNoAmendments,p_mstclt_a,&int_retstat,l_debug_info_ptr))
				{
					*int_p_retstat = int_retstat;
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					if(int_retstat == IV_CRITCAL_ERROR_IND)
						APL_GOBACK_FAIL;
				}
		}

		strcpy(l_clt_gen_flag,APL_NULL_STRING);

		/*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010-- Ended*/
	}
        //shailesh 05-02-2008
	nNoDeletions = 0;
	if(nNoDeletions > 0)
	{
		/*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010-- started*/
    	
		if (IV_Chk_CltAEPass(h_dl_client,DELV_TXN_FEE,&l_clt_gen_flag,&int_retstat,l_debug_info_ptr) == APL_FAILURE )
	   {
		  printf("\n Failed in the function IV_Chk_CltAEPass() function");
		  APL_GOBACK_FAIL;
	   }

	   printf("\n Client Bill generation flag for DELV_TXN_FEE charges is %s",l_clt_gen_flag);
	   fflush(stdout);

		if(strcmp(l_clt_gen_flag,"Y")==0)
		{	
				int_retstat = IV_SUCCESS;
				if(APL_FAILURE == IV_Proc_CalcTxnServFee(chr_acct_str,DELV_TXN_FEE,nNoDeletions,p_mstclt_a,&int_retstat,l_debug_info_ptr))
				{
					*int_p_retstat = int_retstat;
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}

					if(int_retstat == IV_CRITCAL_ERROR_IND)
						APL_GOBACK_FAIL;
				}
		}

		strcpy(l_clt_gen_flag,APL_NULL_STRING);
		/*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010-- Ended*/
	}

	
	/* strcpy(chr_l_where_stmt," and b.dl_class = '19' and b.deal_cd IN ('1','2')"); HDFCIV_004 Mandatory CA deals only */
	strcpy(chr_l_where_stmt," and b.dl_class = '19' "); 

	if(chr_l_instrflg == 'Y')
		strcat(chr_l_where_stmt," and b.instr_code = a.instr_code ");

	int_retstat = IV_SUCCESS;


	/*if(APL_FAILURE == IV_Proc_CalcNoTrd(h_dl_client,chr_l_where_stmt,&nIPOtrd,'N',chr_l_instrflg,'N',&int_retstat,l_debug_info_ptr))*/
	/*.The above coment was already present.shailesh 12-02-2008 changes for CA charges.There will be only 2 service codes for CA(70,71)*/
/*	if(APL_FAILURE == IV_Proc_CalcNoTrd(h_dl_client,chr_l_where_stmt,&nIPOtrd,'N',chr_l_instrflg,'N',chr_l_bill_dep,&int_retstat,l_debug_info_ptr))
	{
		fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
		fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
		fflush(fp);
		int_bl_err_level = 1;
		if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		{
			CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
			CO_FreeErrLst(l_debug_info_ptr);
		}
		*int_p_retstat = int_retstat;
	} shailesh 120208*/

	/* strcpy(chr_l_where_stmt," and b.dl_class = '19' and b.deal_cd IN ('3','4','5','6','7','8')"); HDFCIV_004 Voluntory CA Deals only */
	strcpy(chr_l_where_stmt," and b.dl_class = '19' ");

/* Bageshri for to exclude Bond Redemption Charges if fee class percentwise */

	   EXEC SQL SELECT NVL(COUNT(*),0)
			   INTO :int_fclass_exist
				FROM IV_SERV_MAST c
				WHERE c.SERVICE_CD = '61' 
				AND c.FEES_CLASS ='P' AND c.STATUS='AA';

		if (sqlca.sqlcode < 0)
		{
			fprintf(fp,"Error in accessing table IV_SERV_MAST. Please contact support\n");
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			int_bl_err_level = 1;
			*int_p_retstat = IV_CRITCAL_ERROR_IND;
		}

		IS_ANY_ORA_ERROR

		if(int_fclass_exist == 1)
		strcat(chr_l_where_stmt," AND b.identiy_no not like 'REDMPT%' ");
				
		printf(" count : |%d| ",int_fclass_exist);

/**********************************************************************************************/
		
	if(chr_l_instrflg == 'Y')
		strcat(chr_l_where_stmt," and b.instr_code = a.instr_code ");

	int_retstat = IV_SUCCESS;
	/*if(APL_FAILURE == IV_Proc_CalcNoTrd(h_dl_client,chr_l_where_stmt,&,'N',chr_l_instrflg,'N',&int_retstat,l_debug_info_ptr))*/
	/*The above comment was already present.shailesh 12-02-2008 changes for CA charges.There will be only 2 service codes for CA(70,71)*/
/*	if(APL_FAILURE == IV_Proc_CalcNoTrd(h_dl_client,chr_l_where_stmt,&nVPCAtrd,'N',chr_l_instrflg,'N',chr_l_bill_dep,&int_retstat,l_debug_info_ptr))
	{
		fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
		fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
		fflush(fp);
		int_bl_err_level = 1;
		if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		{
			CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
			CO_FreeErrLst(l_debug_info_ptr);
		}
		*int_p_retstat = int_retstat;
	}shailesh 110208*/
//shailesh 11-02-2008 CA mandatory and voluntary charges
/*shailesh 11-02-2008 ca charges  START*/

   /*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- started*/

   if (IV_Chk_CltAEPass(h_dl_client,MANDATORY_CA_FEE,&l_clt_gen_flag,&int_retstat,l_debug_info_ptr) == APL_FAILURE )
   {
      printf("\n Failed in the function IV_Chk_CltAEPass() function");
      APL_GOBACK_FAIL;
   }

   printf("\n Client Bill generation flag for MANDATORY_CA_FEE charges is %s",l_clt_gen_flag);
   fflush(stdout);
	
	if(strcmp(l_clt_gen_flag,"Y")==0)
   {
if(APL_FAILURE == IV_Proc_CalcMandCAchrg(h_dl_client,l_iv_clientsetup_struct.b_basis,chr_acct_str,&nmandchrgqty,l_iv_client_serv_basis_structa,&int_retstat,l_debug_info_ptr))
	{
		fprintf(fp,"Error in IV_Proc_CalcMandCAchrg function for client %s for Mandatory CA chrg. Please contact support\n",h_dl_client);
		fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
		fflush(fp);
		int_bl_err_level = 1;
		if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		{
			CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
			CO_FreeErrLst(l_debug_info_ptr);
		}
		*int_p_retstat = int_retstat;
	}

	fprintf(fp,"CA Mandatory chrg is  |%s||%lf|\n",h_dl_client,nmandchrgqty);
	printf("CA Mandatory chrg is  |%s||%lf|\n",h_dl_client,nmandchrgqty);
	
	if(nmandchrgqty> 0)
	{
		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Proc_CalcTxnServFee(chr_acct_str,MANDATORY_CA_FEE,nmandchrgqty,p_mstclt_a,&int_retstat,l_debug_info_ptr))
		{
			fprintf(fp,"Error in IV_Proc_CalcTxnServFee function for client %s for Mandatory CA chrg. Please contact support\n",h_dl_client);
			*int_p_retstat = int_retstat;
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}

			if(int_retstat == IV_CRITCAL_ERROR_IND)
				APL_GOBACK_FAIL;
		}
	}

   }
   strcpy(l_clt_gen_flag,APL_NULL_STRING);
   /*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- Ended*/

   /*Modified by siva.ganapathi for ISKB_2470 on 07-dec-2010 -- Started*/

   if (IV_Chk_CltAEPass(h_dl_client,VOLUNTARY_CA_FEE,&l_clt_gen_flag,&int_retstat,l_debug_info_ptr) == APL_FAILURE )
   {
      printf("\n Failed in the function IV_Chk_CltAEPass() function");
      APL_GOBACK_FAIL;
   }

   printf("\n Client Bill generation flag for VOLUNTARY_CA_FEE charges is %s",l_clt_gen_flag);
   fflush(stdout);

   if(strcmp(l_clt_gen_flag,"Y")==0)
   {
	if(APL_FAILURE == IV_Proc_CalcVoluCAchrg(h_dl_client,l_iv_clientsetup_struct.b_basis,chr_acct_str,&nvoluchrgqty,l_iv_client_serv_basis_structa,&int_retstat,l_debug_info_ptr))
	{
		fprintf(fp,"Error in IV_Proc_CalcVoluCAchrg function for client %s for Voluntary CA chrg. Please contact support\n",h_dl_client);
		fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
		fflush(fp);
		int_bl_err_level = 1;
		if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		{
			CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
			CO_FreeErrLst(l_debug_info_ptr);
		}
		*int_p_retstat = int_retstat;
	}

	fprintf(fp,"CA Voluntary chrg is  |%s||%lf|\n",h_dl_client,nvoluchrgqty);
	printf("CA Voluntary cHrg is  |%s||%lf|\n",h_dl_client,nvoluchrgqty);
	
	if(nvoluchrgqty> 0)
	{
		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Proc_CalcTxnServFee(chr_acct_str,VOLUNTARY_CA_FEE,nvoluchrgqty,p_mstclt_a,&int_retstat,l_debug_info_ptr))
		{
			fprintf(fp,"Error in IV_Proc_CalcTxnServFee function for client %s for Voluntary CA chrg. Please contact support\n",h_dl_client);
			*int_p_retstat = int_retstat;
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}

			if(int_retstat == IV_CRITCAL_ERROR_IND)
				APL_GOBACK_FAIL;
		}
	}

    }
   strcpy(l_clt_gen_flag,APL_NULL_STRING);

   /*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- Ended*/


/*shailesh 11-02-2008 ca charges  END*/
	
	/***** Calculating PUT trades for CA ******: vinay kalaskar ************/
//SP
//IF_COND_EXISTS("IV_TEST","PUTCALL")
//IF_COND_NOT_EXISTS("IV_TEST","PUTCALL")

	if(CO_Chk_CntryEnabled( "IV_TEST","PUTCALL" , &l_cond_exists, l_debug_info_ptr) == APL_FAILURE)
			printf("Put Call Cond -%d",l_cond_exists);
	if(l_cond_exists<0)
{

	int_retstat = IV_SUCCESS;
	printf("Entering IV_PutTradeCnt :|%s|",h_dl_client);
	if(APL_FAILURE == IV_PutTradeCnt(h_dl_client,&PutTradeCnt,&int_retstat,l_debug_info_ptr))
	{
		fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
		fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
		fflush(fp);
		int_bl_err_level = 1;
		if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		{
			CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
			CO_FreeErrLst(l_debug_info_ptr);
		}
		*int_p_retstat = int_retstat;
	}
	
	/***** Calculating CALL trades for CA ******: vinay kalaskar ************/

	int_retstat = IV_SUCCESS;
	printf("Entering IV_CallTradeCnt :|%s|",h_dl_client);
	if(APL_FAILURE == IV_CallTradeCnt(h_dl_client,&CallTradeCnt,&int_retstat,l_debug_info_ptr))
	{
		fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
		fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
		fflush(fp);
		int_bl_err_level = 1;
		if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		{
			CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
			CO_FreeErrLst(l_debug_info_ptr);
		}
		*int_p_retstat = int_retstat;
	}
	
	/***** Calculating Part PUT charges  ******: vinay kalaskar ************/

	int_retstat = IV_SUCCESS;
	printf("Entering IV_PartPutChrg :|%s|",h_dl_client);
	if(APL_FAILURE == IV_PartPutChrg(h_dl_client,&PartPutChrg,&int_retstat,l_debug_info_ptr))
	{
		fprintf(fp,"Error in IV_PartPutChrg for client %s. Please contact support\n",h_dl_client);
		fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
		fflush(fp);
		int_bl_err_level = 1;
		if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		{
			CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
			CO_FreeErrLst(l_debug_info_ptr);
		}
		*int_p_retstat = int_retstat;
	}

	/***** Calculating Part CALL charges  ******: vinay kalaskar ************/

	int_retstat = IV_SUCCESS;
	printf("Entering IV_PartCallChrg :|%s|",h_dl_client);
	if(APL_FAILURE == IV_PartCallChrg(h_dl_client,&PartCallChrg,&int_retstat,l_debug_info_ptr))
	{
		fprintf(fp,"Error in IV_PartCallChrg for client %s. Please contact support\n",h_dl_client);
		fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
		fflush(fp);
		int_bl_err_level = 1;
		if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		{
			CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
			CO_FreeErrLst(l_debug_info_ptr);
		}
		*int_p_retstat = int_retstat;
	}

	/***** Calculating Part PTC charges  ******: vinay kalaskar ************/

	int_retstat = IV_SUCCESS;
	printf("Entering IV_PartPtcChrg :|%s|",h_dl_client);
	if(APL_FAILURE == IV_PartPtcChrg(h_dl_client,&PartPtcChrg,&int_retstat,l_debug_info_ptr))
	{
		fprintf(fp,"Error in IV_PartPtcChrg for client %s. Please contact support\n",h_dl_client);
		fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
		fflush(fp);
		int_bl_err_level = 1;
		if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		{
			CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
			CO_FreeErrLst(l_debug_info_ptr);
		}
		*int_p_retstat = int_retstat;
	}

} //END OF IF SP-25-07-2007
else
{			//Combined
	int_retstat = IV_SUCCESS;
	//shailesh 06-02-2008 commenting putcall trade calc
	/*
	if(APL_FAILURE == IV_PutCallTradeCnt(h_dl_client,&PutCallTradeCnt,&int_retstat,l_debug_info_ptr))
	{
	fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
	fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
	fflush(fp);
	int_bl_err_level = 1;
	if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
	{
			CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
			CO_FreeErrLst(l_debug_info_ptr);
	}
	*int_p_retstat = int_retstat;
	} */

	
}

/******* End Of Kotak Specific Conditions ************************/


	

	/***** Calculating Part REDEMPTION charges  ******: vinay kalaskar ************/

/*shailesh120208
	int_retstat = IV_SUCCESS;
	printf("Entering IV_PartRedemChrg :|%s|",h_dl_client);
	if(APL_FAILURE == IV_PartRedemChrg(h_dl_client,&PartRedemChrg,&int_retstat,l_debug_info_ptr))
	{
		fprintf(fp,"Error in IV_PartRedemChrg for client %s. Please contact support\n",h_dl_client);
		fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
		fflush(fp);
		int_bl_err_level = 1;
		if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		{
			CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
			CO_FreeErrLst(l_debug_info_ptr);
		}
		*int_p_retstat = int_retstat;
	}
shailesh120208*/
/**************************************************************************************************/



	if(nIPOtrd> 0)
	{
			
		   /*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- Started*/

		   if (IV_Chk_CltAEPass(h_dl_client,FREECAFEE,&l_clt_gen_flag,&int_retstat,l_debug_info_ptr) == APL_FAILURE )
		   {
			      printf("\n Failed in the function IV_Chk_CltAEPass() function");
			      APL_GOBACK_FAIL;
			}

		   printf("\n Client Bill generation flag for FREECAFEE charges is %s",l_clt_gen_flag);
		   fflush(stdout);		

		   if(strcmp(l_clt_gen_flag,"Y")==0)
		   {
	                 	int_retstat = IV_SUCCESS;
		                if(APL_FAILURE == IV_Proc_CalcTxnServFee(chr_acct_str,FREECAFEE,nIPOtrd,p_mstclt_a,&int_retstat,l_debug_info_ptr))
		                 {
			                 *int_p_retstat = int_retstat;
			                 int_bl_err_level = 1;
			                 if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		                    	{
			                      	CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
			                   	CO_FreeErrLst(l_debug_info_ptr);
		                 	}

		                	if(int_retstat == IV_CRITCAL_ERROR_IND)
			        	APL_GOBACK_FAIL;
	                	}

			}		
		   strcpy(l_clt_gen_flag,APL_NULL_STRING);

 		   /*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- Ended*/
	}

	if(nVPCAtrd> 0)
	{
		  /*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- Started*/

		   if (IV_Chk_CltAEPass(h_dl_client,VPCAFEE,&l_clt_gen_flag,&int_retstat,l_debug_info_ptr) == APL_FAILURE )
		   {
			      printf("\n Failed in the function IV_Chk_CltAEPass() function");
			      APL_GOBACK_FAIL;
			}

		   printf("\n Client Bill generation flag for VPCAFEE charges is %s",l_clt_gen_flag);
		   fflush(stdout);		

		   if(strcmp(l_clt_gen_flag,"Y")==0)
		   {

                       	int_retstat = IV_SUCCESS;
	                 if(APL_FAILURE == IV_Proc_CalcTxnServFee(chr_acct_str,VPCAFEE,nVPCAtrd,p_mstclt_a,&int_retstat,l_debug_info_ptr))
		         {
			           *int_p_retstat = int_retstat;
			           int_bl_err_level = 1;
			           if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			            {
				          CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				          CO_FreeErrLst(l_debug_info_ptr);
			             }

			            if(int_retstat == IV_CRITCAL_ERROR_IND)
				        APL_GOBACK_FAIL;
		           }
	              }
		   strcpy(l_clt_gen_flag,APL_NULL_STRING);

 		   /*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- Ended*/
	}

//SP --25-07-2007
//IF_COND_EXISTS("IV_TEST","PUTCALL")
if(CO_Chk_CntryEnabled( "IV_TEST","PUTCALL" , &l_cond_exists, l_debug_info_ptr)
				== APL_FAILURE)
    printf("Put Call Cond -%d",l_cond_exists);
	if(l_cond_exists<0)
{
/************** Calculating PUT Charges  By: vinay kalaskar  ******************************/
	
	printf("PutTradeCnt:|%lf|",PutTradeCnt);
	
	if(PutTradeCnt > 0)
	{
		  /*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- Started*/

		   if (IV_Chk_CltAEPass(h_dl_client,PUT_FEE,&l_clt_gen_flag,&int_retstat,l_debug_info_ptr) == APL_FAILURE )
		   {
			      printf("\n Failed in the function IV_Chk_CltAEPass() function");
			      APL_GOBACK_FAIL;
			}

		   printf("\n Client Bill generation flag for PUT_FEE charges is %s",l_clt_gen_flag);
		   fflush(stdout);		

		   if(strcmp(l_clt_gen_flag,"Y")==0)
		   {
                       	int_retstat = IV_SUCCESS;
		        if(APL_FAILURE == IV_Proc_CalcTxnServFee(chr_acct_str,PUT_FEE,PutTradeCnt,
								p_mstclt_a,&int_retstat,l_debug_info_ptr))
		         {
			         *int_p_retstat = int_retstat;
			         int_bl_err_level = 1;
			         if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			          {
				        CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				        CO_FreeErrLst(l_debug_info_ptr);
			           }

			        if(int_retstat == IV_CRITCAL_ERROR_IND)
				          APL_GOBACK_FAIL;
		         }
	             }
	
		   strcpy(l_clt_gen_flag,APL_NULL_STRING);

 		   /*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- Ended*/
	}	
/************** Calculating CALL Charges  By: vinay kalaskar  ******************************/
	
	printf("CallTradeCnt:|%lf|",CallTradeCnt);
	
	if(CallTradeCnt > 0)
	{
		   /*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- Started*/

		   if (IV_Chk_CltAEPass(h_dl_client,CALL_FEE,&l_clt_gen_flag,&int_retstat,l_debug_info_ptr) == APL_FAILURE )
		   {
			      printf("\n Failed in the function IV_Chk_CltAEPass() function");
			      APL_GOBACK_FAIL;
			}

		   printf("\n Client Bill generation flag for CALL_FEE charges is %s",l_clt_gen_flag);
		   fflush(stdout);		

		   if(strcmp(l_clt_gen_flag,"Y")==0)
		   {
                        	int_retstat = IV_SUCCESS;
		                if(APL_FAILURE == IV_Proc_CalcTxnServFee(chr_acct_str,CALL_FEE,CallTradeCnt,
								p_mstclt_a,&int_retstat,l_debug_info_ptr))
		                {
			             *int_p_retstat = int_retstat;
			              int_bl_err_level = 1;
			              if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			              {
				               CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				               CO_FreeErrLst(l_debug_info_ptr);
			              }

			             if(int_retstat == IV_CRITCAL_ERROR_IND)
				     APL_GOBACK_FAIL;
		                }

			 }		

		   strcpy(l_clt_gen_flag,APL_NULL_STRING);
 		   /*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- Ended*/
	}

/*********************** Calculating Part PUT Charges By: vinay kalaskar ********************/
	
	printf("PartPutChrg:|%lf|",PartPutChrg);
	
	if(PartPutChrg > 0)
	{
		   /*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- Started*/

		   if (IV_Chk_CltAEPass(h_dl_client,PART_PUT_FEE,&l_clt_gen_flag,&int_retstat,l_debug_info_ptr) == APL_FAILURE )
		   {
			      printf("\n Failed in the function IV_Chk_CltAEPass() function");
			      APL_GOBACK_FAIL;
			}

		   printf("\n Client Bill generation flag for PART_PUT_FEE charges is %s",l_clt_gen_flag);
		   fflush(stdout);		

		   if(strcmp(l_clt_gen_flag,"Y")==0)
		   {
                           	int_retstat = IV_SUCCESS;
	                        printf("Entering IV_Proc_CalcTxnServFee :|%s||%lf||%s|",chr_acct_str,PartPutChrg,p_mstclt_a);

		                if(APL_FAILURE == IV_Proc_CalcTxnServFee(chr_acct_str,PART_PUT_FEE,PartPutChrg,
								p_mstclt_a,&int_retstat,l_debug_info_ptr))
		                 {
			                    *int_p_retstat = int_retstat;
			                    int_bl_err_level = 1;
			                    if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			                    {
				                   CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				                   CO_FreeErrLst(l_debug_info_ptr);
			                     }

			                     if(int_retstat == IV_CRITCAL_ERROR_IND)
				             APL_GOBACK_FAIL;
		                  }

	            }		
		   strcpy(l_clt_gen_flag,APL_NULL_STRING);

 		   /*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- Ended*/
	}

        
/*********************** Calculating Part CALL Charges By: vinay kalaskar ********************/
	
	printf("PartCallChrg:|%lf|",PartCallChrg);
	
	if(PartCallChrg > 0)
	{

	           /*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- Started*/

		   if (IV_Chk_CltAEPass(h_dl_client,PART_CALL_FEE,&l_clt_gen_flag,&int_retstat,l_debug_info_ptr) == APL_FAILURE )
		   {
			      printf("\n Failed in the function IV_Chk_CltAEPass() function");
			      APL_GOBACK_FAIL;
			}

		   printf("\n Client Bill generation flag for PART_CALL_FEE charges is %s",l_clt_gen_flag);
		   fflush(stdout);		

		   if(strcmp(l_clt_gen_flag,"Y")==0)
		   {

	                   int_retstat = IV_SUCCESS;
	                   printf("Entering IV_Proc_CalcTxnServFee :|%s||%lf||%s|",chr_acct_str,PartCallChrg,p_mstclt_a);
		           if(APL_FAILURE == IV_Proc_CalcTxnServFee(chr_acct_str,PART_CALL_FEE,PartCallChrg,
								p_mstclt_a,&int_retstat,l_debug_info_ptr))
		           {
			             *int_p_retstat = int_retstat;
			              int_bl_err_level = 1;
			              if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			               {
				              CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				              CO_FreeErrLst(l_debug_info_ptr);
			                }

			              if(int_retstat == IV_CRITCAL_ERROR_IND)
				        APL_GOBACK_FAIL;
		              }
	             }
		   strcpy(l_clt_gen_flag,APL_NULL_STRING);

 		   /*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- Ended*/
	}
	
/*********************** Calculating Part PTC Charges By: vinay kalaskar ********************/
	
	printf("PartPtcChrg:|%lf|",PartPtcChrg);
	
	if(PartPtcChrg > 0)
	{
		   /*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- Started*/

		   if (IV_Chk_CltAEPass(h_dl_client,PART_PTC_FEE,&l_clt_gen_flag,&int_retstat,l_debug_info_ptr) == APL_FAILURE )
		   {
			      printf("\n Failed in the function IV_Chk_CltAEPass() function");
			      APL_GOBACK_FAIL;
			}

		   printf("\n Client Bill generation flag for PART_PTC_FEE charges is %s",l_clt_gen_flag);
		   fflush(stdout);		

		   if(strcmp(l_clt_gen_flag,"Y")==0)
		   {
	                      int_retstat = IV_SUCCESS;
	                      printf("Entering IV_Proc_CalcTxnServFee :|%s||%lf||%s|",chr_acct_str,PartPtcChrg,p_mstclt_a);
		              if(APL_FAILURE == IV_Proc_CalcTxnServFee(chr_acct_str,PART_PTC_FEE,PartPtcChrg,
								p_mstclt_a,&int_retstat,l_debug_info_ptr))
		               {
			                *int_p_retstat = int_retstat;
			                int_bl_err_level = 1;
			                if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			                {
				               CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				               CO_FreeErrLst(l_debug_info_ptr);
			                }

			                if(int_retstat == IV_CRITCAL_ERROR_IND)
				             APL_GOBACK_FAIL;
		                 }
	             }
		   strcpy(l_clt_gen_flag,APL_NULL_STRING);

 		   /*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- Ended*/
	}


}//end of if SP --25-07-2007
else
{			//KOTAK PART

Alert("PutCallTradeCnt:|%lf|",PutCallTradeCnt);
/*
shailesh 06-02-2008 putcall fee function not to be called.
if(PutCallTradeCnt > 0)
{
	int_retstat = IV_SUCCESS;
	if(APL_FAILURE == IV_Proc_CalcTxnServFee(chr_acct_str,PUT_CALL_FEE,PutCallTradeCnt,
					p_mstclt_a,&int_retstat,l_debug_info_ptr))
	{
		*int_p_retstat = int_retstat;
		int_bl_err_level = 1;
		if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		{
			CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
			CO_FreeErrLst(l_debug_info_ptr);
		}

		if(int_retstat == IV_CRITCAL_ERROR_IND)
		APL_GOBACK_FAIL;
	}

}
*/
}

/*********************** Calculating Part REDEMPTION Charges By: vinay kalaskar ********************/
	
	printf("PartRedemChrg:|%lf|",PartRedemChrg);
	// shailesh 05-02-2008
	PartRedemChrg = 0;
	if(PartRedemChrg > 0)
	{
		   /*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- Started*/

		   if (IV_Chk_CltAEPass(h_dl_client,PART_BOND_RDM_FEE,&l_clt_gen_flag,&int_retstat,l_debug_info_ptr) == APL_FAILURE )
		   {
			      printf("\n Failed in the function IV_Chk_CltAEPass() function");
			      APL_GOBACK_FAIL;
			}

		   printf("\n Client Bill generation flag for PART_BOND_RDM_FEE charges is %s",l_clt_gen_flag);
		   fflush(stdout);		

		   if(strcmp(l_clt_gen_flag,"Y")==0)
		   {
	                        int_retstat = IV_SUCCESS;
	                        printf("Entering IV_Proc_CalcTxnServFee :|%s||%lf||%s|",chr_acct_str,PartRedemChrg,p_mstclt_a);
		               if(APL_FAILURE == IV_Proc_CalcTxnServFee(chr_acct_str,PART_BOND_RDM_FEE,PartRedemChrg,
								p_mstclt_a,&int_retstat,l_debug_info_ptr))
		               {
			                 *int_p_retstat = int_retstat;
			                 int_bl_err_level = 1;
			                 if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			                 {
				              CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				              CO_FreeErrLst(l_debug_info_ptr);
			                 }

			                if(int_retstat == IV_CRITCAL_ERROR_IND)
				              APL_GOBACK_FAIL;
		                 }
	             }

		   strcpy(l_clt_gen_flag,APL_NULL_STRING);

 		   /*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- Ended*/
	}
/***************************************************************************************************/
	
	if (int_g_viber_condexists != 0)
	{
		fprintf(TechRep,"No of viber Frees is > 0\n");
	
                 if(nNoViberFrees> 0)
                  {	
				 /*Modified by siva.ganapathi for ISKB_2470 -- Started*/

				   if (IV_Chk_CltAEPass(h_dl_client,VIBERFREEFEE,&l_clt_gen_flag,&int_retstat,l_debug_info_ptr) == APL_FAILURE )
				   {
						  printf("\n Failed in the function IV_Chk_CltAEPass() function");
						  APL_GOBACK_FAIL;
					}

				   printf("\n Client Bill generation flag for VIBERFREEFEE charges is %s",l_clt_gen_flag);
				   fflush(stdout);		

				   if(strcmp(l_clt_gen_flag,"Y")==0)
				   {
                                                   int_retstat = IV_SUCCESS;
                                                   if(APL_FAILURE == IV_Proc_CalcTxnServFee(chr_acct_str,VIBERFREEFEE,nNoViberFrees,p_mstclt_a,&int_retstat,l_debug_info_ptr))
                                                   {
                                                          *int_p_retstat = int_retstat;
                                                          int_bl_err_level = 1;
                                                          if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
                                                          {
                                                                  CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                                                                  CO_FreeErrLst(l_debug_info_ptr);
                                                          }

 	                                                if(int_retstat == IV_CRITCAL_ERROR_IND)
        	                                        APL_GOBACK_FAIL;
			                            }
		                   }
				   strcpy(l_clt_gen_flag,APL_NULL_STRING);

				   /*Modified by siva.ganapathi for ISKB_2470 -- Ended*/

				}

      if(nNoViberVPs> 0)
      {
				 /*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- Started*/

				    if (IV_Chk_CltAEPass(h_dl_client,VIBERVPFEE,&l_clt_gen_flag,&int_retstat,l_debug_info_ptr) == APL_FAILURE )
				    {
						  printf("\n Failed in the function IV_Chk_CltAEPass() function");
						  APL_GOBACK_FAIL;
				    }

				   printf("\n Client Bill generation flag for VIBERVPFEE charges is %s",l_clt_gen_flag);
				   fflush(stdout);		

				   if(strcmp(l_clt_gen_flag,"Y")==0)
				    {
                                        	int_retstat = IV_SUCCESS;
			                        if(APL_FAILURE == IV_Proc_CalcTxnServFee(chr_acct_str,VIBERVPFEE,nNoViberVPs,p_mstclt_a,&int_retstat,l_debug_info_ptr))
                                                 {
                                                        *int_p_retstat = int_retstat;
				                        int_bl_err_level = 1;
                                                        if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
                                                         {
                                                                  CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                                                                  CO_FreeErrLst(l_debug_info_ptr);
                                                           }

        	                                      if(int_retstat == IV_CRITCAL_ERROR_IND)
 	                                              APL_GOBACK_FAIL;
                                                  }
		                    }

				   strcpy(l_clt_gen_flag,APL_NULL_STRING);

				   /*Modified by siva.ganapathi for ISKB_2470 -- Ended*/
				}
	}

	/*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- Started*/

	   if (IV_Chk_CltAEPass(h_dl_client,SETTALGEFEE,&l_clt_gen_flag,&int_retstat,l_debug_info_ptr) == APL_FAILURE )
	   {
			  printf("\n Failed in the function IV_Chk_CltAEPass() function");
			  APL_GOBACK_FAIL;
		}
	   printf("\n Client Bill generation flag for SETTALGEFEE charges is %s",l_clt_gen_flag);
	   fflush(stdout);		
	
	   if(strcmp(l_clt_gen_flag,"Y")==0)
	   {
                       	int_retstat = IV_SUCCESS;
	                if(APL_FAILURE == IV_Proc_CalcNoMsgSent(h_dl_client,SETTALGEFEE, &nNo578Sent, &int_retstat,l_debug_info_ptr))
	                {
		                 fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
		                 fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
		                 fflush(fp);
		                 int_bl_err_level = 1;
		                 if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		                  {
			                CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
			                CO_FreeErrLst(l_debug_info_ptr);
		                   }
		               *int_p_retstat = int_retstat;
	                  }

	               if(nNo578Sent > 0)
	               {
		                     int_retstat = IV_SUCCESS;
		                     if(APL_FAILURE == IV_Proc_CalcTxnServFee(chr_acct_str,SETTALGEFEE,nNo578Sent,p_mstclt_a,&int_retstat,l_debug_info_ptr))
		                      {  
			                       *int_p_retstat = int_retstat;
			                       int_bl_err_level = 1;
			                       if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			                         {
				                        CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				                        CO_FreeErrLst(l_debug_info_ptr);
			                          }

			                       if(int_retstat == IV_CRITCAL_ERROR_IND)
				               APL_GOBACK_FAIL;
		                        }
	                 }

		}		

		strcpy(l_clt_gen_flag,APL_NULL_STRING);

		/*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- Ended*/
 
 	int_retstat = IV_SUCCESS;
   #ifdef BILLDEBUG 
    fprintf(TestRep, "Before call for BOG_MSG_FEE Calculation");
    fflush(TestRep);
   #endif
 
/*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- Started*/

	   if (IV_Chk_CltAEPass(h_dl_client,BOG_MSG_FEE,&l_clt_gen_flag,&int_retstat,l_debug_info_ptr) == APL_FAILURE )
	   {
			  printf("\n Failed in the function IV_Chk_CltAEPass() function");
			  APL_GOBACK_FAIL;
		}

	   printf("\n Client Bill generation flag for BOG_MSG_FEE charges is %s",l_clt_gen_flag);
	   fflush(stdout);		

	   if(strcmp(l_clt_gen_flag,"Y")==0)
	   {
                   if(APL_FAILURE == IV_Proc_CalcNoMsgSent(h_dl_client,BOG_MSG_FEE, &nNo54BSent, &int_retstat,l_debug_info_ptr))
                   {
                           fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
                           fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
                           fflush(fp);
                           int_bl_err_level = 1;
                           if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
                           {
                                   CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                                   CO_FreeErrLst(l_debug_info_ptr);
                           }
                         *int_p_retstat = int_retstat;
                   }

	          if(nNo54BSent > 0)
                  {
                         int_retstat = IV_SUCCESS;
                         if(APL_FAILURE == IV_Proc_CalcTxnServFee(chr_acct_str,BOG_MSG_FEE,nNo54BSent,p_mstclt_a,&int_retstat,l_debug_info_ptr))
                         {
                                *int_p_retstat = int_retstat;
                                int_bl_err_level = 1;
                                if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
                                  {
                                     CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                                     CO_FreeErrLst(l_debug_info_ptr);
                                  }

                              if(int_retstat == IV_CRITCAL_ERROR_IND)
                              APL_GOBACK_FAIL;
                          }
                   }
		}		

		strcpy(l_clt_gen_flag,APL_NULL_STRING);

/*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- Ended*/
 
	/* Calculate fee for Bucket transaction	HDFCIV_004	Rohit	*/
	
	if(nNoBucketTxn > 0)
	{
            /*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- Started*/

	    if (IV_Chk_CltAEPass(h_dl_client,BUCK_TXN_FEE,&l_clt_gen_flag,&int_retstat,l_debug_info_ptr) == APL_FAILURE )
	    {
			  printf("\n Failed in the function IV_Chk_CltAEPass() function");
			  APL_GOBACK_FAIL;
	     }

	     printf("\n Client Bill generation flag for BUCK_TXN_FEE charges is %s",l_clt_gen_flag);
	     fflush(stdout);		

	       if(strcmp(l_clt_gen_flag,"Y")==0)
	      {
		   int_retstat = IV_SUCCESS;
		   if(APL_FAILURE == IV_Proc_CalcTxnServFee(chr_acct_str,BUCK_TXN_FEE,nNoBucketTxn,p_mstclt_a,&int_retstat,l_debug_info_ptr))
		   { 
			*int_p_retstat = int_retstat;
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}

			if(int_retstat == IV_CRITCAL_ERROR_IND)
				APL_GOBACK_FAIL;
		     }
        	}
	
		strcpy(l_clt_gen_flag,APL_NULL_STRING);
          /*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- Ended*/
	}
	
	/* HDFCIV_004 PJ Annual Maintenance Fee */
	EXEC SQL SELECT TO_CHAR(B_PROCESSDT,'MON') INTO :chr_proc_month FROM SYS_IVCONTROLPARAM;
	
	IS_ANY_ORA_ERROR
	if (!strcmp( chr_proc_month,chr_client_month))
		{
			 /*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- Started*/

			   if (IV_Chk_CltAEPass(h_dl_client,ANNUALMNTFEE,&l_clt_gen_flag,&int_retstat,l_debug_info_ptr) == APL_FAILURE )
			   {
					  printf("\n Failed in the function IV_Chk_CltAEPass() function");
					  APL_GOBACK_FAIL;
				}

			   printf("\n Client Bill generation flag for ANNUALMNTFEE charges is %s",l_clt_gen_flag);
			   fflush(stdout);		

			   if(strcmp(l_clt_gen_flag,"Y")==0)
		 	   {
		                     	int_retstat = IV_SUCCESS;
			                if(APL_FAILURE == IV_Proc_CalcTxnServFee(chr_acct_str,ANNUALMNTFEE,1,p_mstclt_a,&int_retstat,l_debug_info_ptr))
			                {
		                             *int_p_retstat = int_retstat;
		                             int_bl_err_level = 1;
			                     if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		                              {
				                      CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				                      CO_FreeErrLst(l_debug_info_ptr);
			                       }

			                     if(int_retstat == IV_CRITCAL_ERROR_IND)
			                     APL_GOBACK_FAIL;
			                 }

			     }		

			  strcpy(l_clt_gen_flag,APL_NULL_STRING);
			 /*Modified by siva.ganapathi for ISKB_2470 on 07-Dec-2010 -- Ended*/
		}
	
	if(APL_FAILURE == IV_Mod_BillDtForTrade(h_dl_client,0.00,APL_NULL_STRING,'L',chr_l_bill_dep, &int_retstat,l_debug_info_ptr))
	{
		fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
		fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
		fflush(fp);
		int_bl_err_level = 1;
		if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		{
			CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
			CO_FreeErrLst(l_debug_info_ptr);
		}
		*int_p_retstat = int_retstat;
	}

	int_retstat = IV_SUCCESS;
	if(APL_FAILURE == IV_Mod_BillDtForTrade(h_dl_client,0.00,APL_NULL_STRING,'H',chr_l_bill_dep, &int_retstat,l_debug_info_ptr))
	{
		fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
		fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
		fflush(fp);
		int_bl_err_level = 1;
		if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		{
			CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);

			CO_FreeErrLst(l_debug_info_ptr);

		}
		*int_p_retstat = int_retstat;
	}
	
	if (*int_p_retstat != IV_SUCCESS)
	{
		APL_GOBACK_FAIL;
	}
	else
	{
		*int_p_retstat = IV_SUCCESS;
		APL_GOBACK_SUCCESS;
	}

RETURN_SUCCESS:
	if(int_is_tpval_cur_open == 1)
	{
		EXEC SQL CLOSE tpval_cur;
	}
	if(int_is_trcnt_cur_open == 1)
	{
		EXEC SQL CLOSE trcnt_cur;
	}
	return APL_SUCCESS;

RETURN_FAILURE:
	if(int_is_tpval_cur_open == 1)
	{
		EXEC SQL CLOSE tpval_cur;
	}
	if(int_is_trcnt_cur_open == 1)
	{
		EXEC SQL CLOSE trcnt_cur;
	}
	return APL_FAILURE;
}


int IV_Chk_IsFeeExists(char *p_cltt_str,long p_serv_code,int *p_exists,int *int_p_retstat,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;

	char h_dl_client[APL_CLIENT_LENGTH];
	long int_h_serv_code = 0;
	int int_existsfee_cnt=0;
	char h_apl_frm_date[9] = APL_NULL_STRING;  /* Added by monica for kotak ISKB_1737 */
	short i_apl_frm_date = 0;  /* Added by monica for kotak ISKB_1737 */
	
	EXEC SQL VAR h_dl_client IS STRING;
	struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	char chr_acct_str[IV_CLT_LEN], *k, *chr_l_client_a = NULL;

	sqlca.sqlcode = 0;
	memset(h_dl_client, APL_NULL_CHAR, APL_CLIENT_LENGTH);
	memset(chr_acct_str, APL_NULL_CHAR, IV_CLT_LEN);
	k=(char *) calloc(IV_CLT_LEN, APL_NULL_CHAR);

	*int_p_retstat = IV_SUCCESS;

	strcpy(chr_acct_str,p_cltt_str);
	int_h_serv_code = p_serv_code;

	chr_l_client_a = strtok_r(chr_acct_str,";",&k);

	while((chr_l_client_a != (char *)NULL) && (strlen(chr_l_client_a) != 0))
	{
		strcpy(h_dl_client,chr_l_client_a);
		Alert("\n h_dl_client  |%s| \n",h_dl_client );
		Alert("\n int_h_serv_code |%ld| \n",int_h_serv_code );
		/* Added by monica for kotak ISKB_1737 starts */
		EXEC SQL SELECT to_char(MAX(to_date(apl_frm_date,'MM/YYYY')),'MON-YYYY') into :h_apl_frm_date:i_apl_frm_date FROM IV_CLIENT_SERV_BASIS,SYS_IVCONTROLPARAM 
		WHERE CLIENT = :h_dl_client AND service_cd = :int_h_serv_code AND  to_date(apl_frm_date,'MM/YYYY') <= B_UPTO_DATE;
		IS_ANY_ORA_ERROR
		//Alert("\n applicable from date |%s| \n",h_apl_frm_date);
		Alert("\n sqlca.sqlcode  |%d| \n",sqlca.sqlcode );
		/* Added by monica for kotak ISKB_1737 ends */
		if((h_apl_frm_date != (char *)NULL) && (strlen(h_apl_frm_date) != 0))
		{
			Alert("\n applicable from date |%s| \n",h_apl_frm_date);
		EXEC SQL SELECT NVL(COUNT(*), 0)
		INTO :int_existsfee_cnt
		FROM IV_CLIENTFEE
		WHERE client = :h_dl_client AND
				service_cd = :int_h_serv_code AND
				apl_frm_date = :h_apl_frm_date;  /* Added by monica for kotak ISKB_1737 */
		}
		Alert("\n sqlca.sqlcode  |%d| \n",sqlca.sqlcode );
		if(sqlca.sqlcode < 0)
		{
			fprintf(fp,"Error in accessing table. Please contact support\n");
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			*int_p_retstat = IV_CRITCAL_ERROR_IND;
		}

		IS_ANY_ORA_ERROR;

		if((sqlca.sqlcode == 1403) || (int_existsfee_cnt == 0))
		{
			if(k == (char *)NULL)
				strcpy(chr_l_client_a, APL_NULL_STRING);
			else
				chr_l_client_a = strtok_r(NULL,";",&k);
		}
		else if(int_existsfee_cnt > 0)
		{
			*int_p_retstat = IV_SUCCESS;
			break;
		}
	}

	if(int_existsfee_cnt > 0)
		*p_exists = 1;

	APL_GOBACK_SUCCESS;

RETURN_SUCCESS:
	return APL_SUCCESS;

RETURN_FAILURE:
	return APL_FAILURE;

}


int IV_Proc_CalcTxnServFee(char *p_cltt_str,long p_serv_code,double p_nnotrades,
char *p_mstclt_a,int *int_p_retstat,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	EXEC SQL BEGIN DECLARE SECTION;
	char chr_h_bl_upto_dt[APL_DATE_LEN];
	EXEC SQL VAR chr_h_bl_upto_dt IS STRING;
	struct sqlca sqlca;
	EXEC SQL END DECLARE SECTION;

	char chr_acct_str[IV_CLT_LEN],chr_l_charge_basis[IV_STRING_LEN];
	char chr_l_fee_basis[IV_STRING_LEN];
	char chr_l_fee_type,chr_l_charge_type,*k,chr_l_acct_str[IV_CLT_LEN];
	char chr_l_mstacc_a[APL_CLIENT_LENGTH], chr_mstacctstr[IV_CLT_LEN];
	char *chr_l_client_a = NULL;
	char *int_pos= NULL;//added by siva.ganapathi for Annexures

	char chr_h_srv_ind[50] ;
	int int_l_err_flg = IV_SUCCESS; 
	IV_CLIENT_SERV_BASIS_STRUCT l_iv_client_serv_basis_structa ;
	IV_CLIENTPARAM_STRUCT_H  l_iv_clientparam_struct_hb ;
	IV_CLIENTSETUP_STRUCT l_iv_clientsetup_struct ;
	double l_nil_fees=0,l_minimumfee=0,l_maximum_fee=0,l_minimumfee_adj=0,l_maximum_fee_adj=0;
	double srv_charge=0,tot_chg=0, l_exchg_rt = 1.0;
	int int_retstat=0,int_i_cnt=0;
	IV_DATA_STRUCT_H l_iv_data_struct_h_servgrp[50];

	sqlca.sqlcode = 0;

 k = (char *) calloc(IV_CLT_LEN,sizeof(char));
	memset(chr_h_bl_upto_dt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(chr_l_charge_basis, APL_NULL_CHAR, IV_STRING_LEN);
	memset(chr_l_fee_basis, APL_NULL_CHAR, IV_STRING_LEN);
	
	memset(chr_acct_str,APL_NULL_CHAR,IV_CLT_LEN);
	memset(chr_l_acct_str,APL_NULL_CHAR,IV_CLT_LEN);
	memset(chr_mstacctstr,APL_NULL_CHAR,IV_CLT_LEN);
	memset(chr_l_mstacc_a,APL_NULL_CHAR,APL_CLIENT_LENGTH);
	memset(l_iv_data_struct_h_servgrp[0].proc_data,APL_NULL_CHAR,IV_PARAM_LEN);
	memset(chr_h_srv_ind,APL_NULL_CHAR,50);

	memset(&l_iv_client_serv_basis_structa, NULL, sizeof(IV_CLIENT_SERV_BASIS_STRUCT));
	memset(&l_iv_clientparam_struct_hb, NULL, sizeof(IV_CLIENTPARAM_STRUCT_H));
	memset(&l_iv_clientsetup_struct, NULL, sizeof(IV_CLIENTSETUP_STRUCT));

	strcpy(chr_acct_str,p_cltt_str);
	strcpy(chr_h_bl_upto_dt,chr_g_bl_upto_dt);
        /*added by siva.ganapathi for Annexures -- started*/
	strcpy(chr_h_bl_upto_dt,strtok_r(chr_h_bl_upto_dt," ",&int_pos));
	strcat(chr_h_bl_upto_dt," 23:59:59");
        /*added by siva.ganapathi for Annexures -- Ended*/

	strcpy(chr_l_mstacc_a,p_mstclt_a);
	strcpy(chr_l_acct_str,chr_acct_str);

	*int_p_retstat = IV_SUCCESS;
	chr_l_client_a = strtok_r(chr_l_acct_str,";",&k);

	if(chr_g_bl_gen == 'M')
	{
		strcpy(chr_mstacctstr,chr_l_mstacc_a);
		strcat(chr_mstacctstr,";");

		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Rtv_IVCUSTSETUP(chr_l_mstacc_a,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error : Account %s  not found in billing system\n",l_iv_client_serv_basis_structa.client);
				fflush(fp);
				*int_p_retstat = IV_NO_DATA_FOUND_ERR;
				int_bl_err_level = 1;
				APL_GOBACK_FAIL;
			}
		}

		strcat(chr_mstacctstr,l_iv_clientsetup_struct.default_feeclt);
		strcat(chr_mstacctstr,";");
		strcat(chr_mstacctstr,chr_g_cb_code);
		strcat(chr_mstacctstr,";");
		strcat(chr_mstacctstr,APL_NULL_STRING);

		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Rtv_GetServBasis(chr_mstacctstr,p_serv_code,&l_iv_client_serv_basis_structa,&int_retstat,l_debug_info_ptr))
		{
			fprintf(fp,"Error : Service basis not found for service %ld for master client of %s\n",p_serv_code,chr_l_client_a);
			fflush(fp);
			int_bl_err_level = 1;
			*int_p_retstat = int_retstat;
			APL_GOBACK_FAIL;
		}

		chr_l_charge_type = l_iv_client_serv_basis_structa.chrg_clas;
		chr_l_fee_type = l_iv_client_serv_basis_structa.fees_class;
		strcpy(chr_l_charge_basis,l_iv_client_serv_basis_structa.chrg_base);
		strcpy(chr_l_fee_basis,l_iv_client_serv_basis_structa.fees_base);
		/*added by shruthi kumbla for ISKB_1901*/
		if((l_iv_client_serv_basis_structa.incld_in_ann_min_fee)!='Y')
			l_iv_client_serv_basis_structa.incld_in_ann_min_fee = 'N';
	}

	int_retstat = IV_SUCCESS;
	if(APL_FAILURE == IV_Rtv_GetServBasis(chr_acct_str,p_serv_code,&l_iv_client_serv_basis_structa,&int_retstat,l_debug_info_ptr))
	{
		//fprintf(fp,"Error : Service basis not found for service %d for client %s\n",p_serv_code,chr_l_client_a);  Changes done for AIX Migration
		fprintf(fp,"Error : Service basis not found for service %ld for client %s\n",p_serv_code,chr_l_client_a); 
		fflush(fp);
		int_bl_err_level = 1;
		*int_p_retstat = int_retstat;
		APL_GOBACK_FAIL;
	}

	if(chr_g_bl_gen != 'M')
	{
		strcpy(chr_l_fee_basis,l_iv_client_serv_basis_structa.fees_base);
		strcpy(chr_l_charge_basis,l_iv_client_serv_basis_structa.chrg_base);
	}
	chr_l_charge_type = l_iv_client_serv_basis_structa.chrg_clas; 
	chr_l_fee_type = l_iv_client_serv_basis_structa.fees_class;
	l_nil_fees   = l_iv_client_serv_basis_structa.nil_fees;
	l_minimumfee   = l_iv_client_serv_basis_structa.minimumfee;
	l_maximum_fee   = l_iv_client_serv_basis_structa.maximum_fee;
	/*added by shruthi kumbla for ISKB_1901*/
	if((l_iv_client_serv_basis_structa.incld_in_ann_min_fee)!='Y')
		l_iv_client_serv_basis_structa.incld_in_ann_min_fee = 'N';

	

	if(strcmp(l_iv_client_serv_basis_structa.client, chr_l_client_a) != 0)
	{
		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Rtv_IVCUSTSETUP(l_iv_client_serv_basis_structa.client,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error : Account %s  not found in billing system\n",l_iv_client_serv_basis_structa.client);
				fflush(fp);
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}

				*int_p_retstat = int_retstat;
				APL_GOBACK_FAIL;
			}
		}

		l_exchg_rt = 1.0; 
		if(strcmp(l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode) != 0)     
		{
			int_retstat = IV_SUCCESS;
			if(APL_FAILURE == IV_Rtv_ExchRate(l_iv_clientsetup_struct.fees_ccy,
													chr_g_fee_ccycode,chr_g_bl_upto_dt,
													&l_exchg_rt,&int_retstat,l_debug_info_ptr))  
			{
				fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode);                                                                      
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
			}
		}

		

		CO_Round(l_nil_fees * l_exchg_rt, int_g_ccy_decimallen, &l_nil_fees);
                CO_Round(l_minimumfee * l_exchg_rt, int_g_ccy_decimallen, &l_minimumfee);
                CO_Round(l_maximum_fee * l_exchg_rt, int_g_ccy_decimallen, &l_maximum_fee);
	}
	l_nil_fees = l_nil_fees * g_exchg_rt_fee_bl;    
	l_minimumfee = l_minimumfee * g_exchg_rt_fee_bl;   
	l_maximum_fee = l_maximum_fee * g_exchg_rt_fee_bl;   

	strcpy(chr_acct_str,p_cltt_str);
	int_retstat = IV_SUCCESS;
	srv_charge = 0.0;
//SP  --25-07-2007
IF_COND_EXISTS("IV_TEST","PUTCALL")
{

}
else
{
  /****For  KOTAK ******/

        if(p_serv_code == PART_PUT_FEE)
        {
                CO_Round(p_nnotrades * l_exchg_rt,int_g_ccy_decimallen, &p_nnotrades);
                Alert("p_nnotrades:|%lf|",p_nnotrades);
        }

}//end of IF SP -25-07-2007


	if(APL_FAILURE == IV_Proc_CalcFee("O",chr_acct_str,p_serv_code,";", APL_NULL_STRING, " ",p_nnotrades,
										p_nnotrades, chr_l_charge_type,chr_l_charge_type,&srv_charge,l_iv_data_struct_h_servgrp,
										'I',p_mstclt_a,chr_l_charge_basis,chr_l_fee_basis,chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
	{
		if(int_retstat == IV_CRITCAL_ERROR_IND)
		{
			fprintf(fp,"Error in accessing table s. Please contact support\n");
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			int_bl_err_level = 1;
			*int_p_retstat = int_retstat;
		}
	}
	Alert("sqlca.sqlcode === |%d|",sqlca.sqlcode);
	CO_PrnErr(*l_debug_info_ptr);
	/*Added by siva.ganapathi for Annexures on  02/06/2009 -- started*/
	if(p_serv_code == LATETXNFEE)
    {
		printf("\n serv_code is %ld ",p_serv_code);
		/*printf("\n siva -- before calling IV_Proc_CalcLateTxnCommAmt() client is  %s ",chr_l_client_a);
		printf("\n siva -- before calling IV_Proc_CalcLateTxnCommAmt() bill date is  %s ",chr_g_bl_upto_dt);
		printf("\n siva -- before calling IV_Proc_CalcLateTxnCommAmt() service charge is  %f ",srv_charge);
		printf("\n siva -- before calling IV_Proc_CalcLateTxnCommAmt() nLateTxn is  %f ",p_nnotrades);*/
		if(p_nnotrades >0 && srv_charge > 0 )
		{
		if(APL_FAILURE == IV_Proc_CalcLateTxnCommAmt (chr_l_client_a,chr_g_bl_upto_dt,srv_charge,p_nnotrades,&int_retstat,l_debug_info_ptr) )
		{
				printf("Error occured in IV_Proc_CalcLateTxnCommAmt() funtion ");
		}	
	}
	}
		
	if(p_serv_code == VOLUNTARY_CA_FEE ) 
	{
			
		printf("\n serv_code is %ld ",p_serv_code);
		printf("\n siva -- before calling IV_Proc_CalcVoluCACommAmt() client is      %s ",chr_l_client_a);
		printf("\n siva -- before calling IV_Proc_CalcVoluCACommAmt() srv_charge is  %f ",srv_charge);
		printf("\n siva -- before calling IV_Proc_CalcVoluCACommAmt() no_oftrades is %f ",p_nnotrades);

		if(srv_charge > 0 && p_nnotrades >0 )
		{
		if(APL_FAILURE == IV_Proc_CalcVoluCACommAmt (chr_l_client_a,srv_charge,p_nnotrades,&int_retstat,l_debug_info_ptr) )
		{
				printf("Error occured in IV_Proc_CalcVoluCACommAmt() funtion ");
		}	
	}
	}

	if(p_serv_code == MANDATORY_CA_FEE)
	{
		printf("\n serv_code is %ld ",p_serv_code);
		printf("\n siva -- before calling IV_Proc_CalcMandCACommAmt() client is      %s ",chr_l_client_a);
		printf("\n siva -- before calling IV_Proc_CalcMandCACommAmt() srv_charge is  %f ",srv_charge);
		printf("\n siva -- before calling IV_Proc_CalcMandCACommAmt() no_oftrades is %f ",p_nnotrades);

		if(APL_FAILURE == IV_Proc_CalcMandCACommAmt (chr_l_client_a,srv_charge,p_nnotrades,&int_retstat,l_debug_info_ptr) )
		{
				printf("Error occured in IV_Proc_CalcMandCACommAmt() funtion ");
		}	
	}
	/*Added by siva.ganapathi for Annexures on  02/06/2009 -- Ended*/


	if(srv_charge > 0)
		tot_chg += srv_charge;

	int_i_cnt = 0;
	strcpy(chr_acct_str,p_cltt_str);

	int_l_err_flg = IV_SUCCESS; 
	while (strlen((l_iv_data_struct_h_servgrp+int_i_cnt)->proc_data)> 0)
	{
		int_retstat = IV_SUCCESS;
		srv_charge = 0.0;
		//printf("\n (l_iv_data_struct_h_servgrp+int_i_cnt)->proc_data is %f ",(l_iv_data_struct_h_servgrp+int_i_cnt)->proc_data); Changes done for AIX Migration
		printf("\n (l_iv_data_struct_h_servgrp+int_i_cnt)->proc_data is %s ",(l_iv_data_struct_h_servgrp+int_i_cnt)->proc_data);
		printf("\n In Group Client code is %s",chr_acct_str);
		if(APL_FAILURE == IV_Proc_CalcFee("O",chr_acct_str,p_serv_code, (l_iv_data_struct_h_servgrp+int_i_cnt)->proc_data,
											 APL_NULL_STRING, " ",(l_iv_data_struct_h_servgrp+int_i_cnt)->fees_qty,
											 (l_iv_data_struct_h_servgrp+int_i_cnt)->chrg_quant,chr_l_charge_type,chr_l_fee_type,
											 &srv_charge,l_iv_data_struct_h_servgrp,'I',p_mstclt_a,
											 chr_l_charge_basis,chr_l_fee_basis,chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error in accessing table . Please contact support\n");
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				int_bl_err_level = 1;
				*int_p_retstat = int_retstat;
				int_l_err_flg = IV_CRITCAL_ERROR_IND;
			}
		}

		/*Added by siva.ganapathi for Annexures on  02/06/2009 -- started*/
		if(p_serv_code == LATETXNFEE)
		{	
			printf("\n serv_code 1 is %ld ",p_serv_code);
			/*printf("\n In Group  siva -- before calling IV_Proc_CalcLateTxnCommAmt() client is  %s ",chr_l_client_a);
			printf("\n siva -- before calling IV_Proc_CalcLateTxnCommAmt() chr_g_bl_upto_dt is %s",chr_g_bl_upto_dt);
			printf("\n siva -- before calling IV_Proc_CalcLateTxnCommAmt() LATETXNFEE is  %f ",srv_charge);
			printf("\n siva -- before calling IV_Proc_CalcLateTxnCommAmt() nLateTxn is  %f ",(l_iv_data_struct_h_servgrp+int_i_cnt)->chrg_quant);*/
                        if(srv_charge > 0 && (l_iv_data_struct_h_servgrp+int_i_cnt)->chrg_quant > 0)
                        {
			if(APL_FAILURE == IV_Proc_CalcLateTxnCommAmt (chr_acct_str,chr_g_bl_upto_dt,srv_charge,(l_iv_data_struct_h_servgrp+int_i_cnt)->chrg_quant,&int_retstat,l_debug_info_ptr) )
			{
					printf("Error occured in IV_Proc_CalcLateTxnCommAmt() funtion ");
			}	
		}
		}
		
		if(p_serv_code == VOLUNTARY_CA_FEE ) 
		{
				
			printf("\n serv_code is %ld ",p_serv_code);
			printf("\n In Group  siva -- before calling IV_Proc_CalcVoluCACommAmt() client is      %s ",chr_l_client_a);
			printf("\n siva -- before calling IV_Proc_CalcVoluCACommAmt() srv_charge is  %f ",srv_charge);
			printf("\n siva -- before calling IV_Proc_CalcVoluCACommAmt() no_oftrades is %f ",(l_iv_data_struct_h_servgrp+int_i_cnt)->chrg_quant);
                        if(srv_charge > 0 && (l_iv_data_struct_h_servgrp+int_i_cnt)->chrg_quant > 0)
                        {
			if(APL_FAILURE == IV_Proc_CalcVoluCACommAmt (chr_l_client_a,srv_charge,(l_iv_data_struct_h_servgrp+int_i_cnt)->chrg_quant,&int_retstat,l_debug_info_ptr) )
			{
					printf("Error occured in IV_Proc_CalcVoluCACommAmt() funtion ");
			}	
		        }
		}
		
		if(p_serv_code == MANDATORY_CA_FEE)
		{
			printf("\n serv_code is %ld ",p_serv_code);
			printf("\n In Group siva -- before calling IV_Proc_CalcMandCACommAmt() client is %s",chr_l_client_a);
			printf("\n siva -- before calling IV_Proc_CalcMandCACommAmt() srv_charge is  %f ",srv_charge);
			printf("\n siva -- before calling IV_Proc_CalcMandCACommAmt() no_oftrades is %f ",(l_iv_data_struct_h_servgrp+int_i_cnt)->chrg_quant);
                        if(srv_charge > 0 && (l_iv_data_struct_h_servgrp+int_i_cnt)->chrg_quant > 0)
                        {
			if(APL_FAILURE == IV_Proc_CalcMandCACommAmt (chr_l_client_a,srv_charge,(l_iv_data_struct_h_servgrp+int_i_cnt)->chrg_quant,&int_retstat,l_debug_info_ptr) )
			{
					printf("Error occured in IV_Proc_CalcMandCACommAmt() funtion ");
			}	
		        }
		}
		/*Added by siva.ganapathi for Annexures on  02/06/2009 -- Ended*/

		if(srv_charge > 0)
			tot_chg += srv_charge;

		++int_i_cnt;

	}

	if ( int_l_err_flg != IV_CRITCAL_ERROR_IND ) 
	{
		if((tot_chg == 0) && (l_nil_fees > 0.0))
		{
			int_retstat = IV_SUCCESS;
		#ifdef BILLDEBUG 
			fprintf(TestRep, "\nInserting Record into IV_SERVICE_CHRG\n");     
			fprintf(TestRep, "account: %s\n",chr_l_client_a);
			fprintf(TestRep, "nil fees: %lf",l_nil_fees);
		   fprintf(TestRep, " min fees adjust: %lf",0.0);
			fprintf(TestRep, " MAX fees adjust: %lf",0.0); 
			fprintf(TestRep, " tot_chg: %lf\n",0.0);
			fprintf(TestRep, "currency :%s\n",chr_g_bl_ccycode);
			fflush(TestRep);

		#endif 
		
/*added incld_in_ann_min_fee by shruthi kumbla for ISKB_1901*/
			if(APL_FAILURE == IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,chr_l_client_a,l_nil_fees,0.0,0.0,0.0,chr_g_bl_ccycode,'I',p_serv_code,
			    chr_l_mstacc_a,l_iv_client_serv_basis_structa.incld_in_ann_min_fee,&int_retstat,l_debug_info_ptr))
			{
				fprintf(fp,"Error in accessing table for client %s. Please contact support\n",chr_l_client_a);
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
			}
		}
		else if(tot_chg  > 0)
		{
			if(srv_charge < l_minimumfee)
				l_minimumfee_adj = l_minimumfee - tot_chg;
			else
				l_minimumfee_adj = 0;
			if((tot_chg > l_maximum_fee) && (l_maximum_fee != 0))
			{
				l_maximum_fee_adj = l_maximum_fee - tot_chg;
			}
			else
				l_maximum_fee_adj = 0;

			int_retstat = IV_SUCCESS;
		#ifdef BILLDEBUG 
         
			fprintf(TestRep, "\nInserting Record into IV_SERVICE_CHRG\n");     
			fprintf(TestRep, "account: %s\n",chr_l_client_a);
			fprintf(TestRep, "nil fees: %lf",0.0);
		   fprintf(TestRep, " min fees adjust: %lf",l_minimumfee_adj);
			fprintf(TestRep, " MAX fees adjust: %lf",l_maximum_fee_adj); 
			fprintf(TestRep, " tot_chg: %lf\n",tot_chg);
			fprintf(TestRep, "currency :%s\n",chr_g_bl_ccycode);
			fflush(TestRep);

		#endif 
		/*added incld_in_ann_min_fee by shruthi kumbla for ISKB_1901*/
			if(APL_FAILURE == IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,chr_l_client_a,0.0, l_minimumfee_adj,l_maximum_fee_adj,tot_chg,
														  chr_g_bl_ccycode,'I',p_serv_code,chr_l_mstacc_a,l_iv_client_serv_basis_structa.incld_in_ann_min_fee,&int_retstat,l_debug_info_ptr))
			{
				fprintf(fp,"Error in accessing table for client %s. Please contact support\n",chr_l_client_a);
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
				int_bl_err_level = 1;
			}
		}

		else if(p_serv_code != SETTALGEFEE)
		{
			int_retstat = IV_SUCCESS;
		#ifdef BILLDEBUG 
         
			fprintf(TestRep, "\nInserting Record into IV_SERVICE_CHRG\n");     
			fprintf(TestRep, "account: %s\n",chr_l_client_a);
			fprintf(TestRep, "nil fees: %lf",0.0);
		   fprintf(TestRep, " min fees adjust: %lf",l_minimumfee_adj);
			fprintf(TestRep, " MAX fees adjust: %lf",l_maximum_fee_adj); 
			fprintf(TestRep, " tot_chg: %lf\n",tot_chg);
			fprintf(TestRep, "currency :%s\n",chr_g_bl_ccycode);
			fflush(TestRep);

		#endif 
		/*added incld_in_ann_min_fee by shruthi kumbla for ISKB_1901*/
			if(APL_FAILURE == IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,chr_l_client_a,0.0, l_minimumfee_adj,l_maximum_fee_adj,tot_chg,
														  chr_g_bl_ccycode,'I',p_serv_code,chr_l_mstacc_a,l_iv_client_serv_basis_structa.incld_in_ann_min_fee,&int_retstat,l_debug_info_ptr))
			{
				fprintf(fp,"Error in accessing table for client %s. Please contact support\n",chr_l_client_a);
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
				int_bl_err_level = 1;
			}
		}
	} 

	if(*int_p_retstat != IV_SUCCESS)
	{
		APL_GOBACK_FAIL;
	}
	else
	{
		*int_p_retstat = IV_SUCCESS;
		APL_GOBACK_SUCCESS;
	}

RETURN_SUCCESS:
	return APL_SUCCESS;

RETURN_FAILURE:
	return APL_FAILURE;
}

int IV_Rtv_GetServBasis(char *p_cltt_str,long p_serv_code, IV_CLIENT_SERV_BASIS_STRUCT *p_iv_client_serv_basis_struct_a ,
					  int *int_p_retstat,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	char *chr_l_actcode = NULL, *k;
	int int_retstat = 0;
	char h_apl_frm_date[9] = APL_NULL_STRING;   /* Added by monica for kotak ISKB_1737 */
	IV_CLIENT_SERV_BASIS_STRUCT l_iv_client_serv_basis_structa;
	IV_SERV_BASIS_STRUCT l_iv_serv_basis_structa_a;
	char chr_l_acct_str[IV_CLT_LEN],chr_l_client_a[APL_CLIENT_LENGTH];
    short i_apl_frm_date = 0;  /* Added by monica for kotak ISKB_1737 */
	memset(&l_iv_client_serv_basis_structa, NULL, sizeof(IV_CLIENT_SERV_BASIS_STRUCT));
	memset(&l_iv_serv_basis_structa_a, NULL, sizeof(IV_SERV_BASIS_STRUCT));
	memset(chr_l_acct_str, APL_NULL_CHAR, IV_CLT_LEN);
	memset(chr_l_client_a, APL_NULL_CHAR, APL_CLIENT_LENGTH);
	k=(char *) calloc(31,sizeof(char));

	strcpy(chr_l_acct_str,p_cltt_str);
	chr_l_actcode = strtok_r(chr_l_acct_str,";",&k);
	strcpy(chr_l_client_a,chr_l_actcode);

	*int_p_retstat = IV_SUCCESS;
	printf("\n *** 6130 ***|%s| |%s|\n\n", p_cltt_str, chr_l_actcode);
   while(chr_l_actcode != (char *)NULL) 
	{
		memset(&l_iv_client_serv_basis_structa, NULL, sizeof(IV_CLIENT_SERV_BASIS_STRUCT));
		Alert("\n chr_l_actcode  |%s| \n",chr_l_actcode );
		Alert("\n p_serv_code |%ld| \n",p_serv_code );
		/* Added by monica for kotak ISKB_1737 starts */
		EXEC SQL SELECT to_char(MAX(to_date(apl_frm_date,'MM/YYYY')),'MON-YYYY') into :h_apl_frm_date:i_apl_frm_date FROM IV_CLIENT_SERV_BASIS,SYS_IVCONTROLPARAM 
	   WHERE CLIENT = :chr_l_actcode AND service_cd = :p_serv_code AND  to_date(apl_frm_date,'MM/YYYY') <= B_UPTO_DATE;  
	  
	   IS_ANY_ORA_ERROR

	   printf("\n applicable from date |%s| \n",h_apl_frm_date);
	   
	   /* Added by monica for kotak ISKB_1737 ends */
		
		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Rtv_IVSRVBasis(chr_l_actcode,p_serv_code,h_apl_frm_date,
		    &l_iv_client_serv_basis_structa,&int_retstat,l_debug_info_ptr))     /* Added 'h_apl_frm_date' by monica for kotak ISKB_1737  */
		{
			printf("\n *** 6138 *** failed for |%s|%ld|\n", chr_l_actcode,p_serv_code);
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error : Fatal error encountered in Service Basis\n");
				fflush(fp);
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
				APL_GOBACK_FAIL;
			}
			else
			{
			   if(k == (char *)NULL)
					strcpy(chr_l_actcode, APL_NULL_STRING);
				else	
					chr_l_actcode = strtok_r(NULL,";",&k);
			}
		}
		else
			break;
	}
	
	Alert("\n end of loop \n");
	*int_p_retstat = int_retstat;

	if(int_retstat != IV_SUCCESS)
	{
		if(int_retstat == IV_NO_DATA_FOUND_ERR)
		{
			strcpy(l_iv_client_serv_basis_structa.client,chr_l_client_a);
			strcpy(l_iv_client_serv_basis_structa.chrg_base," ");
			strcpy(l_iv_client_serv_basis_structa.fees_base," ");
			l_iv_client_serv_basis_structa.fees_class =  'T';
			l_iv_client_serv_basis_structa.chrg_clas =  'T';
			l_iv_client_serv_basis_structa.service_cd =  p_serv_code;
			l_iv_client_serv_basis_structa.nil_fees = 0;
			l_iv_client_serv_basis_structa.minimumfee = 0;
			l_iv_client_serv_basis_structa.maximum_fee = 0;
		}

		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Rtv_IVSSRVBasis(p_serv_code, APL_NULL_STRING, APL_NULL_STRING, 
														&l_iv_serv_basis_structa_a, &int_retstat, l_debug_info_ptr))
		{
			if(int_retstat != IV_NO_DATA_FOUND_ERR)
			{
				fprintf(fp,"Error : Fatal l_debuglist encountered in Service Basis\n");
				fflush(fp);
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
				APL_GOBACK_FAIL;
			}
			else
			{
				APL_GOBACK_SUCCESS;
			}
		}
		else
		{
			*int_p_retstat = IV_NO_DATA_FOUND_ERR;
			APL_GOBACK_FAIL;
		}
	}

	if(int_retstat == IV_SUCCESS)
	{
		APL_GOBACK_SUCCESS;
	}
	else
	{
		APL_GOBACK_FAIL;
	}

RETURN_SUCCESS:
	*p_iv_client_serv_basis_struct_a = l_iv_client_serv_basis_structa;
	return APL_SUCCESS;

RETURN_FAILURE:
	*p_iv_client_serv_basis_struct_a = l_iv_client_serv_basis_structa;
	return APL_FAILURE;

}

int IV_Chk_GrpMember(char *chr_p_client,long p_serv_code,char *chr_p_apl_frm_date,char *p_grp_str,int *p_grp_exists,int *int_p_retstat,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)       /* Added apl_frm_date by monica for kotak ISKB_1737 */
{

	EXEC SQL BEGIN DECLARE SECTION;

	char h_dl_client[APL_CLIENT_LENGTH],chr_h_fetch_code[IV_PARAM_LEN];
	char chr_h_val[IV_PARAM_LEN],chr_h_pass_val[IV_PARAM_LEN],chr_h_fetch_val[IV_PARAM_LEN];
	char chr_h_group_ind[IV_GRP_LEN],chr_h_param_code[IV_PARAM_LEN],chr_h_param_val[IV_PARAM_LEN];
	long int_h_serv_code = 0;
	char h_apl_frm_date[9];  /* Added by monica for kotak ISKB_1737 */
	EXEC SQL VAR h_apl_frm_date IS STRING;  /* Added by monica for kotak ISKB_1737 */
	EXEC SQL VAR h_dl_client IS STRING;
	EXEC SQL VAR chr_h_fetch_code IS STRING;
	EXEC SQL VAR chr_h_param_code IS STRING;
	EXEC SQL VAR chr_h_param_val  IS STRING;
	EXEC SQL VAR chr_h_fetch_val  IS STRING;
	EXEC SQL VAR chr_h_pass_val  IS STRING;
	EXEC SQL VAR chr_h_group_ind IS STRING;

	EXEC SQL END DECLARE SECTION;

	char *w,*x,*y,*z;
	char chr_l_grp_str[IV_PARAM_LEN],chr_l_fetch_ind[2];
	char *chr_l_fetch_val = NULL, *chr_l_fetch_code = NULL, *chr_fetch_ind = NULL, *chr_l_pass_val = NULL;
	int int_grp_exists=0,int_l_ret_exists=0;
	int int_is_grp_cur_open = 0;
	struct sqlca sqlca;
	sqlca.sqlcode = 0;

	memset(h_dl_client, APL_NULL_CHAR, APL_CLIENT_LENGTH);
	memset(chr_h_fetch_code, APL_NULL_CHAR, APL_CLIENT_LENGTH);
	memset(chr_h_val, APL_NULL_CHAR, IV_PARAM_LEN);
	memset(chr_h_pass_val, APL_NULL_CHAR, IV_PARAM_LEN);
	memset(chr_h_fetch_val, APL_NULL_CHAR, IV_PARAM_LEN);
	memset(chr_h_group_ind, APL_NULL_CHAR, IV_GRP_LEN);
	memset(chr_h_param_code, APL_NULL_CHAR, IV_PARAM_LEN);
	memset(chr_h_param_val, APL_NULL_CHAR, IV_PARAM_LEN);

	w=(char *) calloc(IV_PARAM_LEN, sizeof(char));
	x=(char *) calloc(IV_PARAM_LEN, sizeof(char));
	y=(char *) calloc(IV_PARAM_LEN, sizeof(char));
	z=(char *) calloc(IV_PARAM_LEN, sizeof(char));
	memset(chr_l_grp_str, APL_NULL_CHAR, IV_PARAM_LEN);
	memset(chr_l_fetch_ind, APL_NULL_CHAR, 2);

	*int_p_retstat = IV_SUCCESS;

	strcpy(h_dl_client,chr_p_client);
	int_h_serv_code = p_serv_code;
	strcpy(chr_l_grp_str,p_grp_str);
Alert("p_grp_str |%s|",p_grp_str);
	
	strcpy(h_apl_frm_date,chr_p_apl_frm_date);  /* Added by monica for kotak ISKB_1737 */

	EXEC SQL DECLARE grp_cur CURSOR FOR
	SELECT a.proc_data_val,b.parameter_cd,a.group_id
	FROM IV_CLIENTFEE a,IV_CLIENTPARAM b
	WHERE a.client = :h_dl_client AND
			a.service_cd = :p_serv_code AND
			a.apl_frm_date = :h_apl_frm_date AND  /* Added by monica for kotak ISKB_1737 */
			a.client = b.client AND
			a.service_cd = b.service_cd    /* Bageshri HDFC UAT Fix 16/06/2007 */
                        ORDER BY 1 DESC ; /* shailesh retrofit from HDFC 30-05-2008*/

	EXEC SQL OPEN grp_cur;

	if(sqlca.sqlcode < 0)
	{
		fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
		fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
		fflush(fp);
		int_bl_err_level = 1;
		*int_p_retstat = IV_CRITCAL_ERROR_IND;
	}

	IS_ANY_ORA_ERROR;
Alert("sqlca.sqlcode |%d|",sqlca.sqlcode);
	int_is_grp_cur_open = 1;

	for( ; ;)
	{
		memset(chr_h_param_val, APL_NULL_CHAR, IV_PARAM_LEN);
		memset(chr_h_param_code, APL_NULL_CHAR, IV_PARAM_LEN);
		memset(chr_h_group_ind, APL_NULL_CHAR, IV_GRP_LEN);

		EXEC SQL FETCH grp_cur 
		INTO :chr_h_param_val, :chr_h_param_code, :chr_h_group_ind;

		if ( sqlca.sqlcode < 0 )
		{
			*int_p_retstat = IV_CRITCAL_ERROR_IND;
		}

		IS_ANY_ORA_ERROR

		if( APL_ZERO_RESULT_SET )
			break;

		if(strcmp(p_grp_str,chr_h_param_val) == 0)
			continue;
		strcat(chr_h_param_val,";");
		strcat(chr_h_param_code,";");
		strcat(chr_h_group_ind,";");

		chr_l_fetch_val= strtok_r(chr_h_param_val,";",&w);
		chr_l_fetch_code = strtok_r(chr_h_param_code,";",&x);
		chr_fetch_ind = strtok_r(chr_h_group_ind,";",&y);
		chr_l_pass_val = strtok_r(chr_l_grp_str,";",&z);

		strcpy(chr_h_fetch_val,chr_l_fetch_val);
		strcpy(chr_h_fetch_code,chr_l_fetch_code);
		strcpy(chr_l_fetch_ind,chr_fetch_ind);
		strcpy(chr_h_pass_val,chr_l_pass_val);

		int_l_ret_exists = 1;

		while((chr_h_fetch_val != (char *)NULL) && (strlen(chr_h_fetch_val) != 0 ))
		{
			if(strcmp(chr_l_fetch_ind,"G")== 0)
			{
				EXEC SQL SELECT NVL(COUNT(*), 0) 
				INTO :int_grp_exists
				FROM IV_DATA_GRP
				WHERE PARAMETER_CD = decode(:chr_h_fetch_code,'PRODUCT','INSTR_SUB_TYPE',:chr_h_fetch_code) AND /* Bageshri HDFC UAT Fix 16/06/2007 */
						GROUP_PRM_CD = :chr_h_fetch_val  AND
						GROUP_MEM_VAL IN 
						(SELECT GROUP_MEM_VAL
						 FROM IV_DATA_GRP
						 WHERE PARAMETER_CD = decode(:chr_h_fetch_code,'PRODUCT','INSTR_SUB_TYPE',:chr_h_fetch_code) AND /* Bageshri HDFC UAT Fix 16/06/2007 */
								 GROUP_PRM_CD = :chr_h_pass_val);
			}
			else
			{
				EXEC SQL SELECT NVL(COUNT(*), 0) 
				INTO :int_grp_exists 
				FROM IV_DATA_GRP
				WHERE PARAMETER_CD = :chr_h_fetch_code AND
						GROUP_PRM_CD = :chr_h_pass_val  AND
						GROUP_MEM_VAL = :chr_h_fetch_val;
			}

			if ( sqlca.sqlcode < 0 )
			{
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
			}

			IS_ANY_ORA_ERROR;

			if(int_grp_exists ==  0)
				int_l_ret_exists = 0;

			chr_l_fetch_val= strtok_r(NULL,";",&w);
			chr_l_fetch_code = strtok_r(NULL,";",&x);
			chr_fetch_ind = strtok_r(NULL,";",&y);
			chr_l_pass_val = strtok_r(NULL,";",&z);

			if(chr_l_fetch_val) strcpy(chr_h_fetch_val,chr_l_fetch_val);
			else strcpy(chr_h_fetch_val,APL_NULL_STRING);
			if(chr_l_fetch_code) strcpy(chr_h_fetch_code,chr_l_fetch_code);
			else strcpy(chr_h_fetch_code,APL_NULL_STRING);
			if(chr_fetch_ind) strcpy(chr_l_fetch_ind,chr_fetch_ind);
			else strcpy(chr_l_fetch_ind,APL_NULL_STRING);
			if(chr_l_pass_val) strcpy(chr_h_pass_val,chr_l_pass_val);
			else strcpy(chr_h_pass_val,APL_NULL_STRING);
		}

		if(int_l_ret_exists > 0)
			break;

	} 

	
	printf("End Of Group Member Fetch : |%d|\n",int_l_ret_exists);


	*p_grp_exists = int_l_ret_exists;
	*int_p_retstat = IV_SUCCESS;
	APL_GOBACK_SUCCESS;

RETURN_SUCCESS:
	//if( int_is_grp_cur_open = 1)
	if( int_is_grp_cur_open == 1) // AIX - Warnings
	{
		EXEC SQL CLOSE grp_cur;
	}
	return APL_SUCCESS;

RETURN_FAILURE:
	//if( int_is_grp_cur_open = 1)
	if( int_is_grp_cur_open == 1) // AIX - Warnings
	{
		EXEC SQL CLOSE grp_cur;
	}
	*int_p_retstat = IV_CRITCAL_ERROR_IND;
	return APL_FAILURE;

}


int IV_Proc_GenInvoiceNo(char *chr_p_client,char *p_mstclt_a,int *int_p_retstat,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

   long l_invoiceno = 0;

   fprintf(fp,"I am inside GetInvoiceNo processtion\n\n");

   if ((strcmp(p_mstclt_a,chr_p_client)==0) || ((strcmp(p_mstclt_a,chr_p_client) && chr_g_bl_gen == 'S')))
   {

      l_invoiceno = 0;

      EXEC SQL SELECT IV_SEQNO into :l_invoiceno  from IV_BILL where client = :chr_p_client and dateof_billing = :chr_g_bl_upto_dt ;

   IS_ANY_ORA_ERROR

    if(sqlca.sqlcode < 0)
   {
       fprintf(fp,"Error in getting Invoice Number from BINVOICE TABLE.\n");
      *int_p_retstat = IV_CRITCAL_ERROR_IND;
       APL_GOBACK_FAIL
   }

  if (sqlca.sqlcode == 1403)
   {
       fprintf(fp, "I am inside if invoice no is not found \n");

       l_invoiceno = 0;

       EXEC SQL SELECT INVOICE_NO_SEQ.NEXTVAL INTO :l_invoiceno FROM DUAL;

       EXEC SQL INSERT INTO IV_BILL values(:chr_p_client,:chr_g_bl_upto_dt,:l_invoiceno);

       IS_ANY_ORA_ERROR

       EXEC SQL COMMIT WORK;

   }
 }
    *int_p_retstat = IV_SUCCESS;
    APL_GOBACK_SUCCESS;

RETURN_SUCCESS:
   return APL_SUCCESS;

RETURN_FAILURE:
   *int_p_retstat = IV_CRITCAL_ERROR_IND;
   return APL_FAILURE;
}

/*shailesh the below function replaced  30-05-2008*/
int CalcLocDepCustServFee(char *p_account,char *p_mstacc,char *p_instr_code,char *p_locn_code, 
		double *p_locdepcustchg,char *p_b_basis_cust,int *int_p_retstat,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	printf("In calculate daily portfolio value\n");
	//printf("\n account=|%s| |%s| |%s| |%s| |%lf|\n\n\n",p_account,p_mstacc,p_instr_code,p_locn_code,p_locdepcustchg);Changes done for AIX Migration
	printf("\n account=|%s| |%s| |%s| |%s| |%lf|\n\n\n",p_account,p_mstacc,p_instr_code,p_locn_code,*p_locdepcustchg);
	EXEC SQL BEGIN DECLARE SECTION;

   int h_locdep_srvcd=0,int_retstat=0;
   char h_locncode[APL_LOCNCODE_LENGTH],h_secode[APL_INSTRUMENTCODE_LEN];
   char h_account[APL_CLIENT_LENGTH],h_mstacc[APL_CLIENT_LENGTH];
   char h_bl_upto_dt[APL_DATE_LEN],h_bl_prv_dt[APL_DATE_LEN],h_mktdate[APL_DATE_LEN],h_bl_prv_dt_temp[APL_DATE_LEN];
   char h_access_stamp[APL_DATE_LEN],h_holi_date[APL_DATE_LEN],h_tmp_accstamp[APL_DATE_LEN];
   char h_settle_dt[APL_DATE_LEN],h_bill_dt[APL_DATE_LEN],h_prvsett_dt[APL_DATE_LEN],h_fstbusday[APL_DATE_LEN];
   char h_sec_ccy[APL_CLIENT_LENGTH], h_prodateype[IV_PRODTYPE_LEN];
   char h_cons_ind[2],h_refno[APL_TXNREFNO_LEN];
   char h_param_val[IV_PARAM_LEN];
   double h_portval=0.0,h_tpval=0.0,h_tpval_mktprc=0.0,h_tpval_total=0.0;
   double h_exch_rate = 0.0,h_closprc=0.0;
   double h_fee_rate=0.0,h_cm_amt=0.0;
   double h_portfolio=0.0;
   int h_serv_code = 0;
		double h_set_qty = 0;
   short i_locncode = 0;
	short i_bill_dt=0,i_account=0,i_serv_code=0,i_settle_dt=0,i_set_qty=0,i_cm_amt;
	short i_cons_ind=0,i_sec_ccy=0,i_mstacc=0,i_param_val=0,i_secode=0,i_closprc=0;
	short i_exch_rate=0,i_refno=0,i_access_stamp=0,i_tmp_accstamp=0,i_portval=0;
	short i_tpval_mktprc=0,i_prodateype = 0;
   char h_srv_ind[50];
   char chr_l_b_basis_cust[4];       /* Bageshri HB_IV_001 */

   /****** For Custody bill Print : vinay Kalaskar **************/

   char l_bill_from_dt[20] = APL_NULL_STRING;
   char l_bill_to_dt[20] = APL_NULL_STRING;
   int l_date_count = 0;
   char h_access_stamp_prev[20] = APL_NULL_STRING;
   char l_location_code[20] = APL_NULL_STRING;

   double h_safek_pos = 0.0;
   double l_schdlfee = 0.0;
   double l_schdlfee_count = 0.0;
   double l_cust_chrg = 0.0;

   double l_cust_chrg_bcy = 0.0;//shailesh 07-01-2008 Currency conv changes for custody fee

   EXEC SQL VAR l_bill_from_dt IS STRING;
   EXEC SQL VAR l_bill_to_dt IS STRING;

   EXEC SQL VAR l_location_code IS STRING;

   /************************************************************/

   EXEC SQL VAR h_secode     IS STRING;
	EXEC SQL VAR h_locncode	  IS STRING;
   EXEC SQL VAR h_account    IS STRING;
   EXEC SQL VAR h_bl_upto_dt IS STRING;
   EXEC SQL VAR h_bl_prv_dt  IS STRING;
	EXEC SQL VAR h_bl_prv_dt_temp IS STRING; 
	EXEC SQL VAR h_prvsett_dt IS STRING;
	EXEC SQL VAR h_mktdate    IS STRING;
	EXEC SQL VAR h_fstbusday  IS STRING;
   EXEC SQL VAR h_access_stamp IS STRING;
	EXEC SQL VAR h_tmp_accstamp IS STRING;
   EXEC SQL VAR h_holi_date  IS STRING;
   EXEC SQL VAR h_bill_dt    IS STRING;
   EXEC SQL VAR h_settle_dt  IS STRING;
   EXEC SQL VAR h_mstacc     IS STRING;
   EXEC SQL VAR h_cons_ind   IS STRING;
   EXEC SQL VAR h_param_val  IS STRING;
   EXEC SQL VAR h_prodateype   IS STRING;

   struct sqlca sqlca;

   EXEC SQL END DECLARE SECTION;
   char l_secode[APL_INSTRUMENTCODE_LEN];
   char l_charge_type,l_fee_type;
   char l_charge_basis[IV_STRING_LEN],l_fee_basis[IV_STRING_LEN];
   double srv_charge=0.0;
   double l_exch_rate=1.0;
   double l_exch_rate_bf=1.0;
   double l_round_portval = 0.0;
   double l_tot_locdep_safek = 0.0;
   double l_tot_safek = 0.0,l_tot_chg = 0.0;
   double l_tot_locdep_cust_chg =0.0;
   int retstat=0;
   int l_mktprc_flg = 0;
	int l_count = 0;
	int l_hbsncnt = 0;
   char l_buf[BUFFER_LEN];
	int int_is_Cur_LOCDEPSFK_open = 0;					/* Bageshri HB_IV_001 */
	int int_is_Cur_LOCDEPSFK_INP_open = 0;					/* Bageshri HB_IV_001 */
	double h_hol_closprc = 0;								/* Bageshri 22092007 */
	short i_hol_closprc = 0;								/* Bageshri 22092007 */

   sqlca.sqlcode = 0;
   *int_p_retstat = IV_SUCCESS;

   memset(l_buf,APL_NULL_CHAR,BUFFER_LEN);
   memset(h_account, APL_NULL_CHAR, APL_CLIENT_LENGTH);
   memset(h_bl_upto_dt, APL_NULL_CHAR, APL_DATE_LEN);
   memset(h_bl_prv_dt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(h_bl_prv_dt_temp, APL_NULL_CHAR, APL_DATE_LEN); 
	memset(h_prvsett_dt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(h_fstbusday, APL_NULL_CHAR, APL_DATE_LEN);
   memset(h_holi_date,APL_NULL_CHAR,IV_PARAM_LEN);
	memset(h_mktdate,APL_NULL_CHAR,IV_PARAM_LEN);
   memset(h_secode, APL_NULL_CHAR, APL_INSTRUMENTCODE_LEN);
   memset(h_locncode, APL_NULL_CHAR, APL_LOCNCODE_LENGTH);
   memset(h_sec_ccy, APL_NULL_CHAR, APL_CLIENT_LENGTH);
   memset(h_mstacc, APL_NULL_CHAR, APL_CLIENT_LENGTH);
   memset(h_bill_dt, APL_NULL_CHAR, APL_DATE_LEN);
   memset(h_settle_dt, APL_NULL_CHAR, APL_DATE_LEN);
   memset(h_cons_ind, APL_NULL_CHAR, 2);
   memset(h_param_val, APL_NULL_CHAR, IV_PARAM_LEN);
   memset(h_srv_ind, APL_NULL_CHAR, 50);
   memset(chr_l_b_basis_cust, APL_NULL_CHAR, 4);		 /* Bageshri HB_IV_001 */
   memset(h_prodateype, APL_NULL_CHAR, IV_PRODTYPE_LEN);
	strcpy(h_account,p_account);
	strcpy(h_bl_upto_dt,chr_g_bl_upto_dt);
	strcpy(h_bl_prv_dt,chr_g_bl_prv_dt);
	strcpy(chr_l_b_basis_cust,p_b_basis_cust);			 /* Bageshri HB_IV_001 */
	strcpy(h_locncode,p_locn_code);/*added by shruthi kumbla for ISKB_9560 retrofitted from HDFC*/

	strcpy(h_bl_prv_dt_temp, h_bl_prv_dt);
	if (  CA_CO_GetNextBusinessDt(h_bl_prv_dt,
				h_fstbusday,
				l_debug_info_ptr
				)  == APL_FAILURE
		)
	{
		APL_GOBACK_FAIL
	}
	printf("\n Next business date=|%s||%s||%s||%s||%s||%s|\n",h_fstbusday,h_bl_prv_dt_temp, h_bl_prv_dt,h_bl_upto_dt,p_instr_code,p_locn_code);
        /* Bageshri HB_IV_003 : To consider market price till Next Billing Date only (not till Bill Processing date)*/

	if(!strcmp(chr_l_b_basis_cust,"INP"))
	{
		EXEC SQL DECLARE Cur_LOCDEPSFK_INP CURSOR FOR
			SELECT a.POSIT_DATE,SUM(DECODE(b.INSTR_TYPE,'BON',NVL(((NVL(a.SAFEKEEP_POS,0) + NVL(A.START_SAFEK,0) + NVL(a.NVALRECEIVE,0) + NVL(a.VAL_REC,0) + NVL(a.DP_REC,0)) - (NVL(a.NVALDELIVER,0) + NVL(a.VAL_DEL,0) + NVL(a.DP_DEL,0))),0), NVL(((NVL(a.SAFEKEEP_POS,0) + NVL(a.NVALRECEIVE,0) + NVL(a.VAL_REC,0) + NVL(a.DP_REC,0)) - (NVL(a.NVALDELIVER,0) + NVL(a.VAL_DEL,0) + NVL(a.DP_DEL,0))),0))),a.LOCATION_CD,a.INSTR_CODE,RTRIM(b.INSTR_SUB_TYPE),b.CURRENCY_CD
			FROM DL_HISSAFEK a,MT_INSTRUMENT b
			WHERE a.CLIENT = :h_account
			AND a.INSTR_CODE = :p_instr_code
			AND a.LOCATION_CD = :p_locn_code
			AND POSIT_DATE > TO_DATE(:h_bl_prv_dt_temp,'DD/MM/YYYY HH:MI:SS PM')
			AND POSIT_DATE <= TO_DATE(:h_bl_upto_dt,'DD/MM/YYYY HH:MI:SS PM')
			AND a.INSTR_CODE    = b.INSTR_CODE
			AND ((NVL(a.SAFEKEEP_POS,0) + NVL(A.START_SAFEK,0) + NVL(a.NVALRECEIVE,0) + NVL(a.VAL_REC,0) + NVL(a.DP_REC,0)) - (NVL(a.NVALDELIVER,0) + NVL(a.VAL_DEL,0) + NVL(a.DP_DEL,0))) > 0
			GROUP BY a.INSTR_CODE,a.LOCATION_CD,a.POSIT_DATE,RTRIM(b.INSTR_SUB_TYPE),b.CURRENCY_CD
			UNION
			SELECT d.SYS_DATE,SUM(DECODE(b.INSTR_TYPE,'BON',NVL(((NVL(a.SAFEKEEP_POS,0) + NVL(A.START_SAFEK,0) + NVL(a.NVALRECEIVE,0) + NVL(a.VAL_REC,0) + NVL(a.DP_REC,0)) - (NVL(a.NVALDELIVER,0) + NVL(a.VAL_DEL,0) + NVL(a.DP_DEL,0))),0),NVL(((NVL(a.SAFEKEEP_POS,0) + NVL(a.NVALRECEIVE,0) + NVL(a.VAL_REC,0) + NVL(a.DP_REC,0)) - (NVL(a.NVALDELIVER,0) + NVL(a.VAL_DEL,0) + NVL(a.DP_DEL,0))),0))),a.LOCATION_CD,a.INSTR_CODE,RTRIM(b.INSTR_SUB_TYPE),b.CURRENCY_CD
			FROM DL_SAFEK a, MT_INSTRUMENT b,PRO_SYS_DATE d, SYS_IVCONTROLPARAM e
			WHERE d.SYS_DATE = e.B_UPTO_DATE
			AND a.CLIENT   = :h_account
			AND a.INSTR_CODE = :p_instr_code
			AND a.LOCATION_CD = :p_locn_code
			AND a.INSTR_CODE  = b.INSTR_CODE
			AND ((NVL(a.SAFEKEEP_POS,0) + NVL(A.START_SAFEK,0) + NVL(a.NVALRECEIVE,0) + NVL(a.VAL_REC,0) + NVL(a.DP_REC,0)) - (NVL(a.NVALDELIVER,0) + NVL(a.VAL_DEL,0) + NVL(a.DP_DEL,0))) > 0
			GROUP BY a.INSTR_CODE,a.LOCATION_CD,d.SYS_DATE,RTRIM(b.INSTR_SUB_TYPE),b.CURRENCY_CD;

		EXEC SQL OPEN Cur_LOCDEPSFK_INP;
		int_is_Cur_LOCDEPSFK_INP_open = 1;
	}
	else
	{
		EXEC SQL DECLARE Cur_LOCDEPSFK CURSOR FOR
			SELECT a.POSIT_DATE,SUM(NVL(a.SAFEKEEP_POS, 0)),a.LOCATION_CD,a.INSTR_CODE,RTRIM(b.INSTR_SUB_TYPE),b.CURRENCY_CD
			FROM DL_HISSAFEK a,MT_INSTRUMENT b
			WHERE a.CLIENT = :h_account
			AND a.INSTR_CODE = :p_instr_code
			AND a.LOCATION_CD = :p_locn_code
			/*trunc removed by shruthi kumbla for bill optimization on 29/03/2017*/
			AND (POSIT_DATE) > TO_DATE(:h_bl_prv_dt_temp,'DD/MM/YYYY HH:MI:SS PM')
			AND (POSIT_DATE)<= TO_DATE(:h_bl_upto_dt,'DD/MM/YYYY HH:MI:SS PM')
			AND a.INSTR_CODE    = b.INSTR_CODE
			AND a.SAFEKEEP_POS > 0
			GROUP BY a.INSTR_CODE,a.LOCATION_CD,a.POSIT_DATE,RTRIM(b.INSTR_SUB_TYPE),b.CURRENCY_CD
			UNION
			SELECT d.SYS_DATE,SUM(NVL(a.SAFEKEEP_POS, 0)),a.LOCATION_CD,a.INSTR_CODE,RTRIM(b.INSTR_SUB_TYPE),b.CURRENCY_CD
			FROM DL_SAFEK a, MT_INSTRUMENT b,PRO_SYS_DATE d, SYS_IVCONTROLPARAM e
			WHERE d.SYS_DATE = e.B_UPTO_DATE
			AND a.CLIENT   = :h_account
			AND a.INSTR_CODE = :p_instr_code
			AND a.LOCATION_CD = :p_locn_code
			AND a.INSTR_CODE  = b.INSTR_CODE
			AND a.SAFEKEEP_POS > 0
			GROUP BY a.INSTR_CODE,a.LOCATION_CD,d.SYS_DATE,RTRIM(b.INSTR_SUB_TYPE),b.CURRENCY_CD;

		EXEC SQL OPEN Cur_LOCDEPSFK;
		int_is_Cur_LOCDEPSFK_open = 1;
	}
        /* Bageshri HB_IV_003 : To consider market price till Next Billing Date only (not till Bill Processing date) -- END */

	printf("in Cur_LOCDEPSFK sqlca.sqlcode |%d|",sqlca.sqlcode);

	if(sqlca.sqlcode < 0)
	{
		fprintf(TechRep,"Error in accessing table DL_SAFEK,DL_HISSAFEK,MT_INSTRUMENT,PRO_SYS_DATE.\n");
		fflush(TechRep);
		*int_p_retstat = IV_CRITCAL_ERROR_IND;
	}
	IS_ANY_ORA_ERROR


		for(;;)
		{
			h_portval =0.0;
			h_tpval = 0.0;
			h_tpval_mktprc = 0.0;
			h_tpval_total = 0.0;
			memset(h_access_stamp,APL_NULL_CHAR,APL_DATE_LEN);
			memset(h_tmp_accstamp,APL_NULL_CHAR,APL_DATE_LEN);
			memset(h_secode,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
            memset(h_prodateype,APL_NULL_CHAR,IV_PRODTYPE_LEN);
			memset(h_sec_ccy,APL_NULL_CHAR,APL_CLIENT_LENGTH);
/*added by shruthi kumbla for ISKB_9560 retrofitted from HDFC*/
			//memset(h_locncode,APL_NULL_CHAR,APL_LOCNCODE_LENGTH);/*added by shruthi Kumbla for ISKB_1737*/
/*added by shruthi kumbla for ISKB_9560 retrofitted from HDFC*/
			if(!strcmp(chr_l_b_basis_cust,"INP"))
			{
				EXEC SQL FETCH Cur_LOCDEPSFK_INP
					INTO :h_access_stamp:i_access_stamp,:h_portval:i_portval, 
						  :h_locncode:i_locncode,:h_secode:i_secode, :h_prodateype:i_prodateype, :h_sec_ccy:i_sec_ccy;
			}
			else
			{
				EXEC SQL FETCH Cur_LOCDEPSFK  
					INTO :h_access_stamp:i_access_stamp,:h_portval:i_portval, 
						  :h_locncode:i_locncode,:h_secode:i_secode, :h_prodateype:i_prodateype, :h_sec_ccy:i_sec_ccy;
			}
			if ( sqlca.sqlcode < 0 )
			{
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
			}

			IS_ANY_ORA_ERROR

         if (APL_ZERO_RESULT_SET)
         {
				printf("\n No data found");
            break;
         }

         srv_charge = 0.0;

         l_exch_rate = 1.0;
			printf("\n Fetched |%s| |%lf| |%s| |%s| |%s|\n ", h_access_stamp,h_portval,h_locncode,h_secode,h_sec_ccy);
			
			/* Step 1: Get Exchange rate for that or previous date */
 			if ( strcmp(h_sec_ccy, chr_g_fee_ccycode) != 0 )
        {
         	*int_p_retstat = IV_SUCCESS;
            if(APL_FAILURE == IV_Proc_ConvToFxFn(h_sec_ccy,chr_g_fee_ccycode,g_mt_commonsys_params_struct_h.dom_ccy,h_access_stamp,&l_exch_rate, &int_retstat,l_debug_info_ptr))
            {
               fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",h_sec_ccy,chr_g_fee_ccycode);
               fflush(fp);
               int_bl_err_level = 1;
               if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
               {
                  CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                  CO_FreeErrLst(l_debug_info_ptr);
               }
               *int_p_retstat = int_retstat;
					APL_GOBACK_FAIL
            } 
			Alert("l_exch_rate |%lf|",l_exch_rate);/*added by shruthi Kumbla for ISKB_1901*/
        }
        printf("\n EXCH RATE : %lf, %.6lf\n", l_exch_rate, l_exch_rate);
					
		  /* Step 2 Get Market Price of that day or available previous day */
		  h_closprc = 0.0;
		  printf("\n %s %s",h_secode, h_access_stamp); 
		  if(APL_FAILURE == Cdlylocmktprc(h_secode,1,&h_closprc,&h_access_stamp,&int_retstat,l_debug_info_ptr))
		  		{
			  		fprintf(fp,"Error:Market Price not found for security %s of date %s\n",h_secode,h_access_stamp);
			 	 	fflush(fp);
               int_bl_err_level = 1;
               if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
               {
                  CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                  CO_FreeErrLst(l_debug_info_ptr);
               }
               *int_p_retstat = int_retstat;
					APL_GOBACK_FAIL
            } 
		  	printf("\n portval=%lf closprc=%lf\n", h_portval,h_closprc);
			
			h_safek_pos=h_portval;/**** For custody Bill Print : Vinay *****/

			h_portval = h_portval * h_closprc;
				
        l_round_portval = 0.0;
		  CO_Round(h_portval * l_exch_rate, int_g_ccy_decimallen,&l_round_portval);
        srv_charge = l_round_portval;

       l_tot_locdep_safek += srv_charge;

       printf("\n stepwise =|%lf| |%lf|\n\n", l_tot_locdep_safek,srv_charge );
      	
		/******************* For Custody Charges Bill Printing : Vinay Kalaskar ************************/

		printf("Before Calculating Daily Custody Charges :|%d|\n",l_date_count);

		//if(l_date_count == 0)
			//strcpy(l_bill_from_dt,h_bl_prv_dt);
		//else
			//strcpy(l_bill_from_dt,h_access_stamp_prev);
		strcpy(l_bill_from_dt,h_access_stamp);	

		strcpy(l_bill_to_dt,h_access_stamp);	
		//strcpy(h_access_stamp_prev,h_access_stamp);
		strcpy(l_location_code,h_locncode);
		
		/* Bageshri 18/06/2007 : HDFC UAT Fix for detailed custody charges - START */

			/* shailesh custody fees currency conversion 07-01-2008  start  */			
		 l_cust_chrg_bcy = l_cust_chrg;


		 if(strcmp(chr_g_fee_ccycode, chr_g_bl_ccycode))
			{
				if(APL_FAILURE == IV_Rtv_ExchRate(chr_g_fee_ccycode,chr_g_bl_ccycode,h_access_stamp,&l_exch_rate_bf,&int_retstat,l_debug_info_ptr))
				 {
					fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",chr_g_bl_ccycode, chr_g_fee_ccycode);
					fflush(fp);
					int_bl_err_level = 1;
					*int_p_retstat = IV_CRITCAL_ERROR_IND;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
					   CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					   CO_FreeErrLst(l_debug_info_ptr);
					 }
				 }		
			CO_Round(l_cust_chrg * l_exch_rate_bf, int_g_ccy_decimallen,&l_cust_chrg_bcy);
			}
			else
				l_exch_rate_bf = 1;
			/* shailesh custody fees currency conversion 07-01-2008 end  */


/*added l_exch_rate by shruthi kumbla for ISKB_1901*/
				Alert("l_exch_rate |%lf| ",l_exch_rate);
		if(APL_FAILURE == IV_New_CustPrint(h_account,h_secode,l_bill_from_dt,l_bill_to_dt,h_safek_pos,
			h_closprc,l_cust_chrg_bcy,chr_g_bl_upto_dt,l_exch_rate_bf,chr_g_bl_ccycode,'D',p_mstacc,l_schdlfee,l_location_code,h_prodateype,srv_charge,l_exch_rate,&int_retstat,l_debug_info_ptr))
		 {
			   fprintf(fp,"Error in accessing table for account %s. Please contact support\n",h_account);
			   fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			   fflush(fp);
			   *int_p_retstat = IV_CRITCAL_ERROR_IND;
			   int_bl_err_level = 1;
			   if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			   {
				  CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				  CO_FreeErrLst(l_debug_info_ptr);
			   }
			   APL_GOBACK_FAIL;
		 }  

		/* Bageshri 18/06/2007 : HDFC UAT Fix for detailed custody charges - END */

		l_date_count ++;

       /*********************************************************************************************/
       
       if(srv_charge > 0)
       {
          if(APL_FAILURE == BBInsBLOCDEPTRANSAC(chr_g_bl_upto_dt,h_account,h_locdep_srvcd,h_access_stamp,h_safek_pos,srv_charge,'I',h_sec_ccy,p_mstacc,h_locncode,h_secode,h_closprc,l_exch_rate_bf,NULL,&int_retstat,l_debug_info_ptr))
         {
               fprintf(fp,"Error in accessing table for account %s. Please contact support\n",h_account);
               fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
               fflush(fp);
               *int_p_retstat = IV_CRITCAL_ERROR_IND;
               int_bl_err_level = 1;
               if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
               {
                  CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                  CO_FreeErrLst(l_debug_info_ptr);
               }
               APL_GOBACK_FAIL;
         }  
			 l_count = l_count + 1;
      } 
   }
	if(!strcmp(chr_l_b_basis_cust,"INP"))
	{
		  EXEC SQL CLOSE Cur_LOCDEPSFK_INP;
	int_is_Cur_LOCDEPSFK_INP_open = 0;
	}
	else
	{
		  EXEC SQL CLOSE Cur_LOCDEPSFK;
	   
	int_is_Cur_LOCDEPSFK_open = 0;
	}

	/* End of working days sum up */

      l_tot_safek = l_tot_locdep_safek;
		printf("\n *** 6764 Portfolio value=|%lf| \n\n", l_tot_safek);
      strcpy(h_mstacc,p_mstacc);

       if(l_tot_safek > 0) 
      {

		/* Bageshri 22092007 only bank holidays will be considered */

        EXEC SQL DECLARE holiday_cur CURSOR FOR
        SELECT DISTINCT h_date
        FROM MT_HOLIDAY
        WHERE H_DATE BETWEEN TO_DATE(:h_bl_prv_dt_temp,'DD/MM/YYYY HH:MI:SS PM') + 1
        AND TO_DATE(:h_bl_upto_dt,'DD/MM/YYYY HH:MI:SS PM')
		AND bank_ind = 'Y'
        ORDER BY h_Date;

        EXEC SQL OPEN holiday_cur;

        if(sqlca.sqlcode < 0)
        {
         fprintf(fp,"Error in accessing table MT_HOLIDAY. Please contact support\n");
         fflush(fp);
         int_bl_err_level = 1;
         memset(l_buf,NULL,BUFFER_LEN);
         //sprintf(l_buf,"Error in accessing table in function %s line %d %ld",__FILE__,__LINE__,sqlca.sqlcode); Changes done for AIX Migration
         sprintf(l_buf,"Error in accessing table in function %s line %d %d",__FILE__,__LINE__,sqlca.sqlcode);
        }
         IS_ANY_ORA_ERROR

			
         for(;;)
         {
			memset(h_holi_date,APL_NULL_CHAR,APL_DATE_LEN);

            EXEC SQL FETCH holiday_cur
            INTO :h_holi_date;

            if ( sqlca.sqlcode < 0 )
            {
               *int_p_retstat = IV_CRITCAL_ERROR_IND;
            }
            IS_ANY_ORA_ERROR


            if(APL_ZERO_RESULT_SET )
            {
               break;
            }

				printf("\n  date=|%s|%s,%s\n ", h_holi_date, h_bl_prv_dt_temp, h_fstbusday);

				/* Bageshri 25092007 for Billing period Fix -- START */

				h_hol_closprc = 0;
				i_hol_closprc = 0;
/*trunc removed by shruthi kumbla for bill optimization on 29/03/2017*/
				EXEC SQL SELECT count(*) 
				INTO :l_hbsncnt
				FROM MT_HOLIDAY a 
				WHERE (a.h_Date) = (TO_DATE(:h_holi_date,'DD/MM/YYYY hh24:mi:ss'))
					AND (a.h_date) between (TO_DATE(:h_bl_prv_dt_temp,'DD/MM/YYYY hh24:mi:ss'))
										AND (TO_DATE(:h_fstbusday,'DD/MM/YYYY hh24:mi:ss'))
					AND (a.h_date) NOT IN ( SELECT distinct (settle_dt) 
													FROM IVDLYSAFEK 
												WHERE (settle_dt) = (to_date(:h_holi_date, 'DD/MM/YYYY hh24:mi:ss'))
												AND client = :h_account
												AND SECODE = :p_instr_code
												AND PARAM_VAL = :p_locn_code);

				Alert("sqlca.sqlcode :|%d| l_hbsncnt |%d|\n",sqlca.sqlcode,l_hbsncnt);

				IS_ANY_ORA_ERROR

				if( l_hbsncnt > 0)
				{
					printf("\n 6835 executing %s,%s,%s,%s|\n", h_account, p_instr_code, p_locn_code,h_bl_prv_dt);
				printf("\n *** Holiday between prev bill dt and start month date %d settdt=%s, prevbilleddate=%s, nextbusidt=%s",l_hbsncnt,h_settle_dt, h_bl_prv_dt, h_fstbusday);

				/* Case: When start of month is holiday then pick up position from IV_CLIENTHOLDING */
				EXEC SQL SELECT BILL_DT,CLIENT,SERV_CODE,SETTLE_DT,SETTLE_QTY,CM_AMT,CONS_IND,BL_CCYCODE,MSTACC,PARAM_VAL,SECODE,MKTPRICE,EXCH_RATE,IDENTIY_NO,RTRIM(M.INSTR_SUB_TYPE)  INTO
				:h_bill_dt:i_bill_dt,:h_account:i_account,:h_serv_code:i_serv_code,:h_settle_dt:i_settle_dt,:h_set_qty:i_set_qty,:h_cm_amt:i_cm_amt,:h_cons_ind:i_cons_ind,:h_sec_ccy:i_sec_ccy,:h_mstacc:i_mstacc,:h_param_val:i_param_val,:h_secode:i_secode,:h_closprc:i_closprc, :h_exch_rate:i_exch_rate,:h_refno:i_refno, :h_prodateype:i_prodateype		
				FROM IVDLYSAFEK,(SELECT INSTR_CODE,INSTR_SUB_TYPE FROM MT_INSTRUMENT) M
				WHERE client = :h_account
				AND SECODE = :p_instr_code
				AND SECODE = M.INSTR_CODE
				AND PARAM_VAL = :p_locn_code
				AND CONS_IND = 'I'
				AND SETTLE_DT = (select MAX(SETTLE_DT) from IVDLYSAFEK 
										where (CLIENT = :h_account)
										AND SECODE = :p_instr_code
										AND PARAM_VAL = :p_locn_code
										and (settle_dt < to_date(:h_bl_prv_dt, 'DD/MM/YYYY HH:MI:SS PM')));

				Alert("sqlca.sqlcode :|%d|\n",sqlca.sqlcode);

				IS_ANY_ORA_ERROR
				
				printf("\n query ok\n");
				
				if(APL_ZERO_RESULT_SET )
				{
					printf("\n 6858 no data \n");
					continue;
				}

				printf("\n amout =%lf Qty =%lf l_hbsncnt = %d \n", h_cm_amt,h_set_qty,l_hbsncnt );	


			   if( h_cm_amt > 0) 
			   {
				   /******* For Custody Charges Bill Printing : Vinay ******/

					printf("Before Calculating Daily Custody Holiday Charges\n");

					/* Bageshri 22092007 if holiday is not exchange holiday then exchange market price of holiday date will be considered */
/*trunc removed by shruthi kumbla for bill optimization on 29/03/2017*/
					EXEC SQL SELECT CLOSING_PR INTO
							:h_hol_closprc:i_hol_closprc
						FROM MT_DLYMKTPRC 
							WHERE INSTR_CODE = :p_instr_code 
							AND (PRICE_DATE) = (to_date(:h_holi_date,'DD/MM/YYYY hh24:mi:ss'));

					Alert("sqlca.sqlcode :|%d|\n",sqlca.sqlcode);

					IS_ANY_ORA_ERROR

					if(APL_ZERO_RESULT_SET )
						printf("\n Market Price not maintained in MT_DLYMKTPRC for date |%s| so using previous mkt price \n",h_holi_date);
					else
						h_closprc = h_hol_closprc;

					/* Bageshri 25092007 for Billing period Fix -- END */

					strcpy(l_bill_from_dt,h_holi_date);
					strcpy(l_bill_to_dt,h_holi_date);
					strcpy(l_location_code,h_locncode);
					
					/* Bageshri 18/06/2007 : HDFC UAT Fix for detailed custody charges - START */
			/* shailesh custody fees currency conversion 07-01-2008  start */			
		 l_cust_chrg_bcy = l_cust_chrg;
 	
		if ( strcmp(h_sec_ccy, chr_g_fee_ccycode) != 0 )
        	{
         		*int_p_retstat = IV_SUCCESS;
            		if(APL_FAILURE ==
			IV_Proc_ConvToFxFn(h_sec_ccy,chr_g_fee_ccycode,g_mt_commonsys_params_struct_h.dom_ccy,h_holi_date,&l_exch_rate, &int_retstat,l_debug_info_ptr))
            		{
               			fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",h_sec_ccy,chr_g_fee_ccycode);
               			fflush(fp);
               			int_bl_err_level = 1;
               			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
               			{
                  			CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                  			CO_FreeErrLst(l_debug_info_ptr);
               			}
               			*int_p_retstat = int_retstat;
					APL_GOBACK_FAIL
            		} 
        	}

		  if(strcmp(chr_g_fee_ccycode,chr_g_bl_ccycode))
		   {
			 if(APL_FAILURE == IV_Rtv_ExchRate(chr_g_fee_ccycode,chr_g_bl_ccycode,h_holi_date,&l_exch_rate_bf,&int_retstat,l_debug_info_ptr))
		         {
				    fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",chr_g_bl_ccycode, chr_g_fee_ccycode);
		            fflush(fp);
		            int_bl_err_level = 1;
		            *int_p_retstat = IV_CRITCAL_ERROR_IND;
		            if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					    {
			               CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						   CO_FreeErrLst(l_debug_info_ptr);
						}
				 }		
			CO_Round(l_cust_chrg * l_exch_rate_bf, int_g_ccy_decimallen,&l_cust_chrg_bcy);
			}
	/* shailesh custody fees currency conversion 07-01-2008 end  */

	/*	Calculate Portfolio Value for holiday qty	*/
	h_portfolio = h_set_qty * h_closprc * l_exch_rate;

/*added l_exch_rate by shruthi kumbla for ISKB_1901*/
				Alert("l_exch_rate |%lf| ",l_exch_rate);
					if(APL_FAILURE == IV_New_CustPrint(h_account,h_secode,l_bill_from_dt,l_bill_to_dt,h_set_qty,
						h_closprc,l_cust_chrg_bcy,chr_g_bl_upto_dt,l_exch_rate_bf,chr_g_bl_ccycode,'D',p_mstacc,l_schdlfee,l_location_code,
						h_prodateype,h_portfolio,l_exch_rate,&int_retstat,l_debug_info_ptr))
						 {
							   fprintf(fp,"Error for inserting in table IV_CUST_PRINT for account %s. Please contact support\n",h_account);
							   fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
							   fflush(fp);
							   *int_p_retstat = IV_CRITCAL_ERROR_IND;
							   int_bl_err_level = 1;
							   if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
							   {
								  CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
								  CO_FreeErrLst(l_debug_info_ptr);
							   }
							   APL_GOBACK_FAIL;
						 }  

						/* Bageshri 18/06/2007 : HDFC UAT Fix for detailed custody charges - END */

				       printf("\n 6858 inserting into invdly \n");
			       
				       if(APL_FAILURE == BBInsBLOCDEPTRANSAC(h_bl_upto_dt,h_account,h_serv_code,
						       h_holi_date,h_set_qty,h_cm_amt,'I',h_sec_ccy,
						       h_mstacc,h_param_val,h_secode,h_closprc,
						       h_exch_rate," ",&int_retstat,l_debug_info_ptr))
				       {
					   fprintf(fp,"Error in accessing table for account %s. Please contact support\n",h_account);
					   fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					   fflush(fp);
					   *int_p_retstat = IV_CRITCAL_ERROR_IND;
					   int_bl_err_level = 1;
					   if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					   {
					      CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					      CO_FreeErrLst(l_debug_info_ptr);
					   }
					      APL_GOBACK_FAIL
				       }
					printf("\n stepwise=|%lf| |%lf| \n", h_cm_amt, l_tot_locdep_safek );
					l_tot_locdep_safek = l_tot_locdep_safek + h_cm_amt;
					printf("\n stepwise=|%lf| |%lf| \n", h_cm_amt, l_tot_locdep_safek );
					l_count = l_count + 1;
			       }
			       l_hbsncnt = 0;
			       continue;
			  }
            
		Alert(" Bagee -- -- -- h_holi_date |%s| h_account |%s| p_instr_code |%s| h_locncode |%s|",h_holi_date,h_account,p_instr_code,h_locncode);

		/* Bageshri 25-10-2007: cursor changed into query as it returns single row always -- START */

		h_cm_amt = 0;	/* Bageshri 29-10-2007 fix */

	    EXEC SQL SELECT BILL_DT,CLIENT,SERV_CODE,SETTLE_DT,SETTLE_QTY,
		    CM_AMT,CONS_IND,BL_CCYCODE,
		    MSTACC,PARAM_VAL,SECODE,MKTPRICE,EXCH_RATE,IDENTIY_NO,RTRIM(M.INSTR_SUB_TYPE)
			INTO :h_bill_dt:i_bill_dt,:h_account:i_account,
		       :h_serv_code:i_serv_code,:h_settle_dt:i_settle_dt,
		       :h_set_qty:i_set_qty,:h_cm_amt:i_cm_amt,
		       :h_cons_ind:i_cons_ind,:h_sec_ccy:i_sec_ccy,
		       :h_mstacc:i_mstacc,:h_param_val:i_param_val,
		       :h_secode:i_secode,:h_closprc:i_closprc,
		       :h_exch_rate:i_exch_rate,:h_refno:i_refno,:h_prodateype:i_prodateype
            FROM IVDLYSAFEK,(SELECT INSTR_CODE,INSTR_SUB_TYPE FROM MT_INSTRUMENT) M
			/*trunc removed by shruthi kumbla for bill optimization on 29/03/2017*/
            WHERE (SETTLE_DT)  = (TO_DATE(:h_holi_date,'DD/MM/YYYY HH24:MI:SS') - 1) /* Bageshri 22/10/2007 */
            AND (BILL_DT) = (TO_DATE(:chr_g_bl_upto_dt,'DD/MM/YYYY HH24:MI:SS')) /* Bageshri 22/10/2007 */
            AND CLIENT = :h_account
			AND SECODE = :p_instr_code	/* Bageshri 18/06/2007 */
			AND SECODE = M.INSTR_CODE
            AND PARAM_VAL = :h_locncode	
	    AND CONS_IND  = 'I';

		Alert("sqlca.sqlcode is |%d|",sqlca.sqlcode);
            if(sqlca.sqlcode < 0)
            {
               fprintf(fp,"Error in accessing table IVDLYSAFEK. Please contact support\n");
               fflush(fp);
               int_bl_err_level = 1;
               memset(l_buf,NULL,BUFFER_LEN);
               //sprintf(l_buf,"Error in accessing table in function %s line %d %ld",__FILE__,__LINE__,sqlca.sqlcode); Changes done for AIX Migration
               sprintf(l_buf,"Error in accessing table in function %s line %d %d",__FILE__,__LINE__,sqlca.sqlcode);
            }

            IS_ANY_ORA_ERROR

               if(APL_ZERO_RESULT_SET)
				  printf("\n no data found breaking\n");

		/* Bageshri 25-10-2007: cursor changed into query as it returns single row always -- END */

		printf("\n 6922 amout=|%lf| Qty=|%lf| h_secode |%s|\n", h_cm_amt,h_set_qty,h_secode );
		
		if( h_cm_amt > 0) 
		{

			/******************* For Custody Charges Bill Printing : Vinay Kalaskar ******/

			printf("Before Calculating Daily Custody Holiday Charges\n");

			strcpy(l_bill_from_dt,h_holi_date);
			strcpy(l_bill_to_dt,h_holi_date);
			strcpy(l_location_code,h_locncode);
			
			/* Bageshri 18/06/2007 : HDFC UAT Fix for detailed custody charges - START */
			printf("Before CustPrint |%lf|\n",h_set_qty);


			/* shailesh custody fees currency conversion 07-01-2008  start */	
		l_cust_chrg_bcy = l_cust_chrg;
		
		if ( strcmp(h_sec_ccy, chr_g_fee_ccycode) != 0 )
        	{
         		*int_p_retstat = IV_SUCCESS;
            		if(APL_FAILURE ==
			IV_Proc_ConvToFxFn(h_sec_ccy,chr_g_fee_ccycode,g_mt_commonsys_params_struct_h.dom_ccy,h_holi_date,&l_exch_rate, &int_retstat,l_debug_info_ptr))
            		{
               			fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",h_sec_ccy,chr_g_fee_ccycode);
               			fflush(fp);
               			int_bl_err_level = 1;
               			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
               			{
                  			CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
                  			CO_FreeErrLst(l_debug_info_ptr);
               			}
               			*int_p_retstat = int_retstat;
					APL_GOBACK_FAIL
            		} 
        	}
		
		if(strcmp(chr_g_fee_ccycode,chr_g_bl_ccycode))
			{
			 if(APL_FAILURE == IV_Rtv_ExchRate(chr_g_fee_ccycode, chr_g_bl_ccycode,h_holi_date,&l_exch_rate_bf,&int_retstat,l_debug_info_ptr))
				{
		            fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",chr_g_bl_ccycode, chr_g_fee_ccycode);
				    fflush(fp);
		            int_bl_err_level = 1;
				    *int_p_retstat = IV_CRITCAL_ERROR_IND;
		            if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					    {
			               CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						   CO_FreeErrLst(l_debug_info_ptr);
				         }
				 }		
				CO_Round(l_cust_chrg * l_exch_rate_bf, int_g_ccy_decimallen,&l_cust_chrg_bcy);
			}
	/* shailesh custody fees currency conversion 07-01-2008 end */

	/*	Calculate Portfolio Value for holiday qty	*/
	h_portfolio = h_set_qty * h_closprc * l_exch_rate;


/*added l_exch_rate by shruthi kumbla for ISKB_1901*/
				Alert("l_exch_rate |%lf| ",l_exch_rate);
			if(APL_FAILURE == IV_New_CustPrint(h_account,h_secode,l_bill_from_dt,l_bill_to_dt,h_set_qty,
				h_closprc,l_cust_chrg_bcy,chr_g_bl_upto_dt,l_exch_rate_bf,chr_g_bl_ccycode,'D',p_mstacc,l_schdlfee,l_location_code,h_prodateype,h_portfolio,l_exch_rate,&int_retstat,l_debug_info_ptr))
			 {
				   fprintf(fp,"Error in accessing table for account %s. Please contact support\n",h_account);
				   fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				   fflush(fp);
				   *int_p_retstat = IV_CRITCAL_ERROR_IND;
				   int_bl_err_level = 1;
				   if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				   {
					  CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					  CO_FreeErrLst(l_debug_info_ptr);
				   }
				   APL_GOBACK_FAIL;
			 } 

			/* Bageshri 18/06/2007 : HDFC UAT Fix for detailed custody charges - END */

			printf("After CustPrint |%lf|\n",h_set_qty);

			 if(APL_FAILURE == BBInsBLOCDEPTRANSAC(h_bill_dt,h_account,
					 h_serv_code,h_holi_date,
					 h_set_qty,h_cm_amt,'I',h_sec_ccy,h_mstacc,
					 h_param_val,h_secode,h_closprc,
					 h_exch_rate," ",&int_retstat,l_debug_info_ptr))
			 {
			   fprintf(fp,"Error in accessing table for account %s. Please contact support\n",h_account);
			   fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			   fflush(fp);
			   *int_p_retstat = IV_CRITCAL_ERROR_IND;
			   int_bl_err_level = 1;
			   if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			   {
			      CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
			      CO_FreeErrLst(l_debug_info_ptr);
			   }
			      APL_GOBACK_FAIL
			 }
			 l_count = l_count + 1;
		}
		
		printf("\n stepwise=|%lf| |%lf| \n", h_cm_amt, l_tot_locdep_safek );
                l_tot_locdep_safek = l_tot_locdep_safek + h_cm_amt;
		printf("\n stepwise=|%lf| |%lf| \n", h_cm_amt, l_tot_locdep_safek );
          }
	  EXEC SQL CLOSE holiday_cur;

	}
	/* Bageshri onsite 13092007 as actual market price to be used for PT -- START */
	//shailesh 13072007
	IF_COND_EXISTS("IV_CUST_CHRG","AVG_MKT_PRC")
	{
		if(strcmp(h_prodateype,"PT"))
		{
			if(APL_FAILURE == IV_Cal_AvgMktPrc(h_account,h_secode,l_debug_info_ptr))
			{
				printf("\n ..errror at 11414 ");
				fprintf(fp,"Error in accessing table for account %s. Please contact support\n",h_account);
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
			  		CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
			  		CO_FreeErrLst(l_debug_info_ptr);
				}
				APL_GOBACK_FAIL;
			}
		}
	}

	 /*Bageshri onsite 13092007 as actual market price to be used for PT -- END */

	 printf("\n ************* Finally Portvalue=%lf counter=%d\n",l_tot_locdep_safek, l_count);
	 if (l_tot_locdep_safek > 0)
	 {
		 l_tot_locdep_safek = l_tot_locdep_safek / l_count;
		 printf("\n ************* AVG Portvalue=%lf counter=%d\n",l_tot_locdep_safek, l_count);
		 *p_locdepcustchg = l_tot_locdep_safek;
	 }
   
    
	APL_GOBACK_SUCCESS

RETURN_SUCCESS:
if(int_is_Cur_LOCDEPSFK_open == 1)
	EXEC SQL CLOSE Cur_LOCDEPSFK;

if(int_is_Cur_LOCDEPSFK_INP_open == 1)
	EXEC SQL CLOSE Cur_LOCDEPSFK_INP;

   return APL_SUCCESS;

RETURN_FAILURE:
if(int_is_Cur_LOCDEPSFK_open == 1)
	EXEC SQL CLOSE Cur_LOCDEPSFK;

if(int_is_Cur_LOCDEPSFK_INP_open == 1)
	EXEC SQL CLOSE Cur_LOCDEPSFK_INP;

   *int_p_retstat = IV_CRITCAL_ERROR_IND;
   return APL_FAILURE; 
}



/*Addition of Depository Service    HDFCIV_004  Rohit */
int IV_Proc_GenDepoCharges(char *chr_p_client, char *p_cltt_str,char *p_mstclt_a,int *int_p_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	printf("\n\n****** Inside IV_Proc_GenDepoCharges **********\n\n");
	EXEC SQL BEGIN DECLARE SECTION;

	char chr_h_param_code[IV_PARAM_LEN],h_instr_code[APL_INSTRUMENTCODE_LEN];
	char h_identiy_no[17];        /*added by siva.ganapathi for Annexures */
	/*** vinay kalaskar ***/
   char h_parameter[100];
	char h_prev_parameter[100];
	char h_exch_code[5];
	int  no_of_days = 0;
	
	char h_prodateype[IV_PRODTYPE_LEN],h_loccode[APL_LOCNCODE_LENGTH];
	char chr_h_fee_str[IV_PARAM_LEN],chr_h_instr_ccy[APL_CCYCODE_LEN];
	char chr_mst_fee_ccycode[APL_CCYCODE_LEN],chr_mst_bl_ccycode[APL_CCYCODE_LEN];
	char h_dl_client[APL_CLIENT_LENGTH]= APL_NULL_STRING,h_ora_rowid[APL_ROWID_LEN];
	char h_dealcd[IV_DLCD_LEN],h_dealclass[IV_DLTYPE_LEN],chr_h_hisflg='L';
	char h_reapired_ind,chr_h_bill_dt[APL_DATE_LEN],chr_h_depo_stmt[3000] = APL_NULL_STRING;
	char chr_h_bl_proc_dt[APL_DATE_LEN], chr_h_bl_upto_dt[APL_DATE_LEN];

	char chr_h_srv_ind[50];
	double dbl_h_late_days=0, no_of_trades = 0;
	
	char h_verfied_with[IV_VERWITH_LEN]; 
	short i_verfied_with = 0;
        
	int int_l_err_flg = IV_SUCCESS; 
	int int_h_mst_fee_decimallen=0, int_h_mst_bl_decimallen=0;
	double h_amt=0.0,tot_credit_indr=0.0;
	double h_amend_count=0,h_number_a=0,h_number_b=0;
	short i_dealcd=0,i_prodateype=0,i_loccode=0,i_instr_code=0,i_dealclass=0,i_bill_date=0,i_identiy_no=0;        /*added by siva.ganapathi for Annexures*/
	short i_reapired_ind=0,i_late_days=0,i_amend_count=0,i_number_a=0,i_number_b=0,i_ora_rowid=0,i_amt=0;
	short i_instr_ccy = 0;

	EXEC SQL VAR h_dealclass IS STRING;
	EXEC SQL VAR chr_h_bill_dt IS STRING;
	EXEC SQL VAR chr_h_bl_upto_dt IS STRING;
	EXEC SQL VAR h_dl_client  	IS STRING;
	EXEC SQL VAR chr_h_param_code  	IS STRING;
	EXEC SQL VAR h_instr_code 		IS STRING;
        EXEC SQL VAR h_identiy_no IS STRING;        /*added by siva.ganapathi for Annexures*/
	EXEC SQL VAR h_prodateype 	IS STRING;
	EXEC SQL VAR h_loccode 	IS STRING;
	EXEC SQL VAR chr_h_fee_str  	IS STRING;
	EXEC SQL VAR chr_h_depo_stmt 	IS STRING;
	EXEC SQL VAR h_ora_rowid  		IS STRING;
	EXEC SQL VAR chr_h_bl_proc_dt 	IS STRING;
	EXEC SQL VAR h_verfied_with 		IS STRING;
	EXEC SQL VAR h_exch_code 		IS STRING;
	
	struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	int int_fetch_cnt=0,int_i_cnt=0;
        
	
	char proc_data[IV_PARAM_LEN],chr_prev_param_str[IV_PARAM_LEN];
	char chr_acct_str[IV_CLT_LEN],chr_l_buf[BUFFER_LEN];
	char chr_l_param_code[IV_PARAM_LEN];
	char chr_mstacctstr[IV_CLT_LEN];
	
	char h_entry;     
	double srv_charge=0.0,tot_depo_chg=0.0;
	double l_minimumfee_adj=0.0,l_maximum_fee_adj=0.0;
	double l_nil_fees=0.0,l_minimumfee=0.0,l_maximum_fee=0.0;
	double l_exchg_rt=1.0,l_subbl_mstbl_rt = 1.0;
	double h_exchg_rt_mstfee_bl=1.0; 
        double l_round_val = 0.0; 
	int int_ind_over=0,int_retstat=0, int_firstfound = 0;
	int int_is_trcnt_cur_open = 0;
	char chr_l_charge_type,chr_l_fee_type,*chr_h_actcode = NULL,*k,chr_depo_stmt1[1500]= APL_NULL_STRING;
	char chr_l_charge_basis[IV_STRING_LEN],chr_l_fee_basis[IV_STRING_LEN]; 
	char *chr_l_param_dep = NULL,*chr_newtdep, *int_pos = NULL,*chr_tdep;
	IV_DATA_STRUCT_H l_iv_data_struct_h_dlgrp[50];
	IV_CLIENTPARAM_STRUCT_H l_iv_clientparam_struct_hb;
	IV_CLIENT_SERV_BASIS_STRUCT l_iv_client_serv_basis_structa;
	IV_CLIENTSETUP_STRUCT l_iv_clientsetup_struct;
	
	sqlca.sqlcode = 0;
 
 k = (char *) calloc(IV_PARAM_LEN,sizeof(char));
 chr_newtdep = (char *) calloc(IV_PARAM_LEN,sizeof(char));
 chr_tdep = (char *) calloc(IV_PARAM_LEN,sizeof(char));
	memset(h_dealclass,APL_NULL_CHAR,IV_DLTYPE_LEN);
	memset(l_iv_data_struct_h_dlgrp[0].proc_data,APL_NULL_CHAR,100);
	memset(chr_acct_str,APL_NULL_CHAR,IV_CLT_LEN);
	memset(chr_mstacctstr,APL_NULL_CHAR,IV_CLT_LEN);
	memset(chr_l_charge_basis,APL_NULL_CHAR,IV_STRING_LEN);
	memset(chr_l_fee_basis,APL_NULL_CHAR,IV_STRING_LEN);
	memset(chr_l_param_code,APL_NULL_CHAR,IV_PARAM_LEN);
	memset(chr_h_bill_dt,APL_NULL_CHAR,APL_DATE_LEN);
	memset(chr_h_bl_upto_dt,APL_NULL_CHAR,APL_DATE_LEN);
	memset(chr_h_bl_proc_dt,APL_NULL_CHAR,APL_DATE_LEN);
	memset(chr_depo_stmt1,APL_NULL_CHAR,1500);
	memset(chr_h_depo_stmt, APL_NULL_CHAR, 3000); 
	
	memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
	memset(chr_prev_param_str,APL_NULL_CHAR,IV_PARAM_LEN);
	memset(proc_data,APL_NULL_CHAR,IV_PARAM_LEN);
	
   memset(chr_h_srv_ind,APL_NULL_CHAR,51);
   memset(chr_mst_fee_ccycode,APL_NULL_CHAR,APL_CCYCODE_LEN);
   memset(chr_mst_bl_ccycode,APL_NULL_CHAR,APL_CCYCODE_LEN);

	memset(&l_iv_clientsetup_struct, NULL, sizeof(IV_CLIENTSETUP_STRUCT));
	memset(&l_iv_clientparam_struct_hb, NULL, sizeof(IV_CLIENTPARAM_STRUCT_H));
	memset(&l_iv_client_serv_basis_structa, NULL, sizeof(IV_CLIENT_SERV_BASIS_STRUCT));

	/* PJ Calloc needed for actcode */
	chr_h_actcode =  (char *)calloc(APL_CLIENT_LENGTH,sizeof(char));
	APL_MALLOC_FAIL(chr_h_actcode);
	memset(chr_h_actcode,NULL,sizeof(char));
	
	*int_p_retstat = IV_SUCCESS;
	APL_IF_DEBUG
	{
  		CO_ProcMonitor(TechRep,"Generating Depository Charges for client ",NULL,NULL);
  		memset(chr_l_buf,NULL,BUFFER_LEN);
  		sprintf(chr_l_buf," %s",chr_p_client);
  		CO_ProcMonitor(TechRep,chr_l_buf,NULL,NULL);
	}
	memset(h_dl_client,APL_NULL_CHAR,sizeof(h_dl_client));
	strcpy(h_dl_client,chr_p_client);
	strcpy(chr_h_bl_proc_dt,chr_g_bl_proc_dt);
	strcpy(chr_h_bl_upto_dt,chr_g_bl_upto_dt);
	strcpy(chr_h_bl_upto_dt,strtok_r(chr_h_bl_upto_dt," ",&int_pos));
	strcat(chr_h_bl_upto_dt," 23:59:59");

	strcpy(chr_acct_str,p_cltt_str);

	chr_h_actcode = strtok_r(chr_acct_str,";",&k);
	
	/*Commented by Monica for KOTAK ISKB_1737 starts */
  /*	Alert("Client is |%s|",chr_h_actcode);
	
	while((chr_h_actcode!= (char *)NULL) && (strlen(chr_h_actcode) > 0))
	{
		memset(&l_iv_clientparam_struct_hb, NULL, sizeof(IV_CLIENTPARAM_STRUCT_H));
		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Rtv_IVCUSTPARAM(chr_h_actcode,DEPOFEE,&l_iv_clientparam_struct_hb,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat != IV_CRITCAL_ERROR_IND)
			{
				chr_h_actcode = strtok_r(NULL,";",&k);
				if (chr_h_actcode == NULL) break; 
			}
			else
			{
				fprintf(fp,"Error : Service dependencies not defined for client %s\n",h_dl_client);
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}

				APL_GOBACK_FAIL;
			}
		}
		else
			break;
	}
	strcpy(chr_h_param_code,l_iv_clientparam_struct_hb.parameter_cd);
	strcpy(chr_l_param_code,chr_h_param_code);   /*
	
	/*Commented by Monica for KOTAK ISKB_1737 ends */

	if(chr_g_bl_gen == 'M')
	{
		strcpy(chr_mstacctstr,p_mstclt_a);
		strcat(chr_mstacctstr,";");
		if(APL_FAILURE == IV_Rtv_IVCUSTSETUP(p_mstclt_a,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error : Account %s  not int_found in billing system\n",p_mstclt_a);
				fflush(fp);
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				APL_GOBACK_FAIL;
			}
		}
	
		strcat(chr_mstacctstr,l_iv_clientsetup_struct.default_feeclt);
		strcat(chr_mstacctstr,";");
		strcat(chr_mstacctstr,chr_g_cb_code);
		strcat(chr_mstacctstr,";");
		strcat(chr_mstacctstr,APL_NULL_STRING);

		
		strcpy(chr_mst_fee_ccycode,APL_NULL_STRING);
		strcpy(chr_mst_fee_ccycode,l_iv_clientsetup_struct.fees_ccy);
		strcpy(chr_mst_bl_ccycode,APL_NULL_STRING);
      strcpy(chr_mst_bl_ccycode,l_iv_clientsetup_struct.b_ccycd);


      if ( APL_FAILURE == CR_Rtv_CCYFldVal(chr_mst_fee_ccycode,"decimallen",&int_h_mst_fee_decimallen,l_debug_info_ptr))
      {
         fprintf(fp,"Error : Could not fetch decimal length for currency %s\n", chr_mst_fee_ccycode);
         fflush(fp);
         int_bl_err_level = 1;
         *int_p_retstat = int_retstat;
         if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
         {
            CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
            CO_FreeErrLst(l_debug_info_ptr);
         }
      }

		
		h_exchg_rt_mstfee_bl = 1.0;
      if (strcmp(chr_mst_bl_ccycode, chr_mst_fee_ccycode) != 0)
      {
         int_retstat = IV_SUCCESS;
         if(APL_FAILURE == IV_Rtv_ExchRate(chr_mst_fee_ccycode,chr_mst_bl_ccycode,chr_g_bl_upto_dt,&h_exchg_rt_mstfee_bl, &int_retstat,l_debug_info_ptr))
         {
            fprintf(fp,"Error : Exchange Rate not int_found for currency %s %s\n",chr_mst_fee_ccycode,chr_mst_bl_ccycode);
            fflush(fp);
            int_bl_err_level = 1;
            *int_p_retstat = int_retstat;
         }
       }

      if ( APL_FAILURE == CR_Rtv_CCYFldVal(chr_mst_bl_ccycode,"decimallen",&int_h_mst_bl_decimallen,l_debug_info_ptr))
      {
         fprintf(fp,"Error : Could not fetch decimal length for currency %s\n", chr_mst_bl_ccycode);
         fflush(fp);
         int_bl_err_level = 1;
         *int_p_retstat = int_retstat;
         if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
         {
            CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
            CO_FreeErrLst(l_debug_info_ptr);
         }
      }

		

      l_subbl_mstbl_rt = 1.0;
      if (strcmp(chr_mst_bl_ccycode, chr_g_bl_ccycode) != 0)
      {
         int_retstat = IV_SUCCESS;
         if(APL_FAILURE == IV_Rtv_ExchRate(chr_g_bl_ccycode,chr_mst_bl_ccycode,chr_g_bl_upto_dt,&l_subbl_mstbl_rt, &int_retstat,l_debug_info_ptr))
         {
            fprintf(fp,"Error : Exchange Rate not int_found for currency %s %s\n",chr_g_bl_ccycode,chr_mst_bl_ccycode);
            fflush(fp);
            int_bl_err_level = 1;
            *int_p_retstat = int_retstat;
         }
       }

		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Rtv_GetServBasis( chr_mstacctstr,DEPOFEE,&l_iv_client_serv_basis_structa,&int_retstat,l_debug_info_ptr))
		{
			fprintf(fp,"Error : Service basis not int_found for service %d for master client of client %s\n",DEPOFEE, chr_p_client);
			fflush(fp);
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}

			*int_p_retstat = int_retstat;
			APL_GOBACK_FAIL;

		}
		strcpy(chr_l_fee_basis,l_iv_client_serv_basis_structa.fees_base);
		strcpy(chr_l_charge_basis,l_iv_client_serv_basis_structa.chrg_base);
		chr_l_charge_type = l_iv_client_serv_basis_structa.chrg_clas;
		chr_l_fee_type = l_iv_client_serv_basis_structa.fees_class;
		/*added by shruthi kumbla for ISKB_1901*/
			if((l_iv_client_serv_basis_structa.incld_in_ann_min_fee)!='Y')
				l_iv_client_serv_basis_structa.incld_in_ann_min_fee = 'N';
	}

	strcpy(chr_acct_str,p_cltt_str);
	int_retstat = IV_SUCCESS;
	if(APL_FAILURE == IV_Rtv_GetServBasis(chr_acct_str,DEPOFEE,&l_iv_client_serv_basis_structa,&int_retstat,l_debug_info_ptr))
	{
		fprintf(fp,"Error : Service basis not int_found for service %d for client  %s\n",DEPOFEE,chr_p_client);
		fflush(fp);
		int_bl_err_level = 1;
		if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		{
			CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
			CO_FreeErrLst(l_debug_info_ptr);
		}

		*int_p_retstat = int_retstat;
		APL_GOBACK_FAIL;

	}
	
	/*Added by Monica for KOTAK ISKB_1737 starts */
		Alert("Client is |%s|",chr_h_actcode);
	
	
		memset(&l_iv_clientparam_struct_hb, NULL, sizeof(IV_CLIENTPARAM_STRUCT_H));
		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Rtv_IVCUSTPARAM(l_iv_client_serv_basis_structa.client,DEPOFEE,l_iv_client_serv_basis_structa.apl_frm_date,&l_iv_clientparam_struct_hb,&int_retstat,l_debug_info_ptr)) /* Added by Monica for ISKB_1737*/
		{
			if(int_retstat != IV_CRITCAL_ERROR_IND)
			{
				
			}
			else
			{
				fprintf(fp,"Error : Service dependencies not defined for client %s\n",h_dl_client);
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}

				APL_GOBACK_FAIL;
			}
		}
		else
		{
		 Alert("Success from IV_Rtv_IVCUSTPARAM fn");

	        }
	
	strcpy(chr_h_param_code,l_iv_clientparam_struct_hb.parameter_cd);
	strcpy(chr_l_param_code,chr_h_param_code);
	
	/*Added by Monica for KOTAK ISKB_1737 ends */
	
	
	
	if(chr_g_bl_gen != 'M')
	{
		strcpy(chr_l_fee_basis,l_iv_client_serv_basis_structa.fees_base);
		strcpy(chr_l_charge_basis,l_iv_client_serv_basis_structa.chrg_base);
	}
	chr_l_charge_type = l_iv_client_serv_basis_structa.chrg_clas; 
	chr_l_fee_type = l_iv_client_serv_basis_structa.fees_class;
	l_nil_fees   = l_iv_client_serv_basis_structa.nil_fees;
	l_minimumfee   = l_iv_client_serv_basis_structa.minimumfee;
	l_maximum_fee   = l_iv_client_serv_basis_structa.maximum_fee;
	/*added by shruthi kumbla for ISKB_1901*/
			if((l_iv_client_serv_basis_structa.incld_in_ann_min_fee)!='Y')
				l_iv_client_serv_basis_structa.incld_in_ann_min_fee = 'N';

	#ifdef BILLDEBUG 

		fprintf(TestRep, "Depo. Charges: Account: %s, Master Acc: %s\n", chr_p_client, p_mstclt_a);
		fprintf(TestRep, "Fee Basis: %s, Charge Basis: %s, Fee Type: %c, Charge Type: %c\n", chr_l_fee_basis, chr_l_charge_basis, chr_l_fee_type, chr_l_charge_type);
		fprintf(TestRep, "Nil Fee: %lf, Min Fee: %lf, Max Fee: %lf\n", l_nil_fees, l_minimumfee, l_maximum_fee);
		fflush(TestRep);

	#endif 
printf("Bagee l_iv_client_serv_basis_structa.client |%s|, h_dl_client |%s|",l_iv_client_serv_basis_structa.client,h_dl_client);

	if(strcmp(l_iv_client_serv_basis_structa.client,h_dl_client) != 0)
	{
		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Rtv_IVCUSTSETUP(l_iv_client_serv_basis_structa.client,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error : Account %s  not int_found in billing system\n",l_iv_client_serv_basis_structa.client);
				fflush(fp);
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}

				*int_p_retstat = int_retstat;
				APL_GOBACK_FAIL;
			}
		}

		l_exchg_rt = 1.0;
		if(strcmp(l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode) != 0)   
		{
			int_retstat = IV_SUCCESS;
			if(APL_FAILURE == IV_Rtv_ExchRate(  l_iv_clientsetup_struct.fees_ccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,
														&l_exchg_rt,&int_retstat,l_debug_info_ptr)) 
			{
				fprintf(fp,"Error : Exchange Rate not int_found for currency %s %s\n",l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode);                                                                   
      
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
			}
		}

		 

		CO_Round(l_nil_fees * l_exchg_rt, int_g_ccy_decimallen, &l_nil_fees);
                CO_Round(l_minimumfee * l_exchg_rt, int_g_ccy_decimallen, &l_minimumfee);
                CO_Round(l_maximum_fee * l_exchg_rt, int_g_ccy_decimallen, &l_maximum_fee);
	}
      

      l_nil_fees = l_nil_fees * g_exchg_rt_fee_bl;   
      l_minimumfee = l_minimumfee * g_exchg_rt_fee_bl;   
      l_maximum_fee = l_maximum_fee * g_exchg_rt_fee_bl;   

	#ifdef BILLDEBUG 

		fprintf(TestRep, "Exchange Rate is %lf\n", l_exchg_rt);

	#endif 

		printf("chr_l_fee_basis:|%s|chr_l_charge_basis:|%s|",chr_l_fee_basis,chr_l_charge_basis);


		if(strcmp(chr_l_fee_basis,"NO. OF TRADES") == 0 &&
				strcmp(chr_l_charge_basis,"NO. OF TRADES") == 0)
		{
			printf("Inside NO. OF TRADES/NO. OF TRADES");

		strcpy(chr_h_depo_stmt,"(SELECT b.INSTR_CODE,b.LOCATION_CD,b.DEAL_CD,RTRIM(a.INSTR_SUB_TYPE),");
		strcat(chr_h_depo_stmt,"RTRIM(b.DL_CLASS), b.CURRENCY_CD, b.REAPIRED_IND,b.VERFIED_WITH,b.DATEOFBILLING,");
		strcat(chr_h_depo_stmt,"TO_DATE(TO_CHAR(b.SETL_DATE,'dd/mm/yyyy'),'dd/mm/yyyy')"); 
		strcat(chr_h_depo_stmt," - TO_DATE(TO_CHAR(b.DATEOF_INPUT,'dd/mm/yyyy'),'dd/mm/yyyy'),");
		strcat(chr_h_depo_stmt,"b.AMEND_COUNT,b.NUMBER_A,b.NUMBER_B,b.ROWID,b.AMOUNT,'L' AS HISFLG,b.ENTRY");
		strcat(chr_h_depo_stmt," FROM MT_INSTRUMENT a, DL_DEAL b");
		strcat(chr_h_depo_stmt," WHERE b.CLIENT = '");
		strcat(chr_h_depo_stmt,h_dl_client);
		strcat(chr_h_depo_stmt,"'  AND b.INSTR_CODE = a.INSTR_CODE ");
		strcat(chr_h_depo_stmt," AND b.DEAL_STAT !='DU' ");  /* ISKB-2247 Not to pick DU and DD deals */
		strcat(chr_h_depo_stmt, " AND ( b.PAY_MODE IS NULL OR b.PAY_MODE != 'N' )");/*Added by siva.ganapathi for ISKB_2295*/
		strcat(chr_h_depo_stmt," AND b.DL_CLASS NOT IN  ('18','19','20') AND ");//shailesh 280208   18,20 added

		/* Bageshri - ISKB 2263 - settled trades of billing period to be picked */
		strcat(chr_h_depo_stmt," b.CHECKER IS NOT NULL AND b.DATEOFBILLING IS NOT NULL AND ");
		/***********************************************************************
		strcat(chr_h_depo_stmt," b.CHECKER IS NOT NULL AND (b.DATEOFBILLING IS NULL OR ");
		strcat(chr_h_depo_stmt," (b.AMEND_COUNT != b.NUMBER_A AND");
		strcat(chr_h_depo_stmt," b.DATEOFBILLING != '");
		strcat(chr_h_depo_stmt,chr_g_bl_upto_dt);
		strcat(chr_h_depo_stmt,"') OR b.DATEOFBILLING = '");
		strcat(chr_h_depo_stmt,chr_g_bl_upto_dt);
		strcat(chr_h_depo_stmt,"') AND  ");
		************************************************************************/

		strcat(chr_depo_stmt1," UNION ALL");
		strcat(chr_depo_stmt1," SELECT b.INSTR_CODE,b.LOCATION_CD,b.DEAL_CD,RTRIM(a.INSTR_SUB_TYPE),");
		strcat(chr_depo_stmt1," RTRIM(b.DL_CLASS), b.CURRENCY_CD, b.REAPIRED_IND,b.VERFIED_WITH,b.DATEOFBILLING,");
		strcat(chr_depo_stmt1,"TO_DATE(TO_CHAR(b.SETL_DATE,'dd/mm/yyyy'),'dd/mm/yyyy')"); 
		strcat(chr_depo_stmt1," - TO_DATE(TO_CHAR(b.DATEOF_INPUT,'dd/mm/yyyy'),'dd/mm/yyyy'),");
		strcat(chr_depo_stmt1," b.AMEND_COUNT,b.NUMBER_A,b.NUMBER_B,b.ROWID,b.AMOUNT,'H' AS HISFLG,b.ENTRY");
		strcat(chr_depo_stmt1," FROM MT_INSTRUMENT a, DL_HISDEAL b");
		strcat(chr_depo_stmt1," WHERE b.CLIENT = '");
		strcat(chr_depo_stmt1,h_dl_client);
		strcat(chr_depo_stmt1,"' AND b.INSTR_CODE = a.INSTR_CODE "); 
		strcat(chr_depo_stmt1," AND b.DEAL_STAT !='DD' ");  /* ISKB-2247 Not to pick DU and DD deals */
		strcat(chr_depo_stmt1, " AND ( b.PAY_MODE IS NULL OR b.PAY_MODE != 'N' ) ");/*Added by siva.ganapathi for ISKB_2295*/
		strcat(chr_depo_stmt1," AND b.DL_CLASS NOT IN ('18','19','20')  AND "); //shailesh 280208   18,20 added

		/* Bageshri - ISKB 2263 - settled trades of billing period to be picked */
		strcat(chr_depo_stmt1," b.CHECKER IS NOT NULL AND b.DATEOFBILLING IS NOT NULL AND ");
		/***********************************************************************
		strcat(chr_depo_stmt1," b.CHECKER IS NOT NULL AND (b.DATEOFBILLING is NULL OR ");
		strcat(chr_depo_stmt1," (b.AMEND_COUNT != b.NUMBER_A AND");
		strcat(chr_depo_stmt1," b.DATEOFBILLING != '");
		strcat(chr_depo_stmt1,chr_g_bl_upto_dt);
		strcat(chr_depo_stmt1,"') OR b.DATEOFBILLING = '");
		strcat(chr_depo_stmt1,chr_g_bl_upto_dt);
		strcat(chr_depo_stmt1,"')  AND ");
		************************************************************************/

		/* Bageshri HB_IV_001 START : Commented as only settled deals are considered */
		/*****************************
		if(!strcmp(chr_g_bill_dep,"INP"))
		{
			strcat(chr_h_depo_stmt," (b.DATEOF_INPUT <= '");
			strcat(chr_h_depo_stmt,chr_h_bl_upto_dt);
			strcat(chr_h_depo_stmt,"')");
			strcat(chr_depo_stmt1," (b.DATEOF_INPUT <= '");
			strcat(chr_depo_stmt1,chr_h_bl_upto_dt);
			strcat(chr_depo_stmt1,"')) ");
		}
		else 
		{
		*********************************/

			/* Bageshri - ISKB 2263 - settled trades of billing period to be picked 
			strcat(chr_h_depo_stmt," (b.INSTRUMENT_DT IS NOT NULL AND b.INSTRUMENT_DT<= '");
			*************************************************************/
			strcat(chr_h_depo_stmt," (b.INSTRUMENT_DT IS NOT NULL AND b.INSTRUMENT_DT > '");
			strcat(chr_h_depo_stmt,chr_g_bl_prv_dt);
			strcat(chr_h_depo_stmt,"' AND b.INSTRUMENT_DT<= '");

			strcat(chr_h_depo_stmt,chr_h_bl_upto_dt);
			strcat(chr_h_depo_stmt,"')");

			/* Bageshri - ISKB 2263 - settled trades of billing period to be picked 
			strcat(chr_depo_stmt1," (b.INSTRUMENT_DT IS NOT NULL AND b.INSTRUMENT_DT<= '");
			*************************************************************/
			strcat(chr_depo_stmt1," (b.INSTRUMENT_DT IS NOT NULL AND b.INSTRUMENT_DT > '");
			strcat(chr_depo_stmt1,chr_g_bl_prv_dt);
			strcat(chr_depo_stmt1,"' AND b.INSTRUMENT_DT<= '");

			strcat(chr_depo_stmt1,chr_h_bl_upto_dt);
			strcat(chr_depo_stmt1,"')) ");

		/***************************
		}
		****************************/

		/* Bageshri HB_IV_001 END */

		//printf("chr_l_param_code:|%s|",chr_l_param_code);
		chr_l_param_dep = strtok_r(chr_l_param_code,";",&chr_newtdep);

		//printf("chr_l_param_dep:|%s|",chr_l_param_dep);
		while((chr_l_param_dep != (char *)NULL) && (strlen(chr_l_param_dep) > 0))
		{
			if(strcmp(chr_l_param_dep,"LOCATION") == 0)
			{
				if(int_firstfound)
					strcat(chr_depo_stmt1, ",2");
				else
				{
					strcat(chr_depo_stmt1," ORDER BY ");
					strcat(chr_depo_stmt1, "2");
					int_firstfound = 1;
				}
			}
			else if(strcmp(chr_l_param_dep,"DEALTYPE") == 0)
			{
				if(int_firstfound)
					strcat(chr_depo_stmt1, ",5");
				else
				{
					strcat(chr_depo_stmt1," ORDER BY ");
					strcat(chr_depo_stmt1, "5");
					int_firstfound = 1;
				}
			}
			else if(strcmp(chr_l_param_dep,"DEALCD") == 0) //ISKB_430_04 shailesh 11-12-2007
															//change for allowing the deal code parameter to be selected alongwith location
			{
				if(int_firstfound)
					strcat(chr_depo_stmt1, ",3");
				else
				{
					strcat(chr_depo_stmt1," ORDER BY ");
					strcat(chr_depo_stmt1, "3");
					int_firstfound = 1;
				}
			}
			
			if(chr_newtdep == (char *)NULL)
				strcpy(chr_l_param_dep, APL_NULL_STRING);
			else
				chr_l_param_dep = strtok_r(NULL,";",&chr_newtdep); 
		}
			
		strcpy(chr_l_param_code,chr_h_param_code);
		strcat(chr_h_depo_stmt,chr_depo_stmt1);
		strcat(chr_h_depo_stmt,APL_NULL_STRING);
		
			//Alert("\n2958 - strlen of chr_h_depo_stmt : |%d| and chr_depo_stmt1 |%d|\n",strlen(chr_h_depo_stmt),strlen(chr_depo_stmt1)); Changes done for AIX Migration
			Alert("\n2958 - strlen of chr_h_depo_stmt : |%d| and chr_depo_stmt1 |%d|\n",(int)strlen(chr_h_depo_stmt),(int)strlen(chr_depo_stmt1));
		printf("\n\nDepository Query:|%s|",chr_h_depo_stmt);
			Alert(" 2958 - account: %s\n",h_dl_client);
		
		EXEC SQL PREPARE S FROM :chr_h_depo_stmt;

		EXEC SQL DECLARE trcnt_cur1 CURSOR FOR S;

		EXEC SQL OPEN trcnt_cur1;

		if(sqlca.sqlcode < 0)
		{
			fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
			fprintf(fp,"SQL Statement: %s\n",chr_h_depo_stmt);
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			int_bl_err_level = 1;
			*int_p_retstat = IV_CRITCAL_ERROR_IND;
		}

		IS_ANY_ORA_ERROR;

		int_is_trcnt_cur_open = 1; 
		int_fetch_cnt = 0;
		
		for( ; ; )
		{
			memset(h_instr_code,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
			memset(chr_h_instr_ccy,APL_NULL_CHAR,APL_CCYCODE_LEN);
			memset(h_loccode,APL_NULL_CHAR,APL_LOCNCODE_LENGTH);
			memset(h_dealcd,APL_NULL_CHAR,IV_DLCD_LEN);
			memset(h_prodateype,APL_NULL_CHAR,IV_PRODTYPE_LEN);
			memset(h_dealclass,APL_NULL_CHAR,IV_DLTYPE_LEN);
			h_reapired_ind = NULL; 
			memset(h_verfied_with,APL_NULL_CHAR,IV_VERWITH_LEN);
			memset(chr_h_bill_dt,APL_NULL_CHAR,APL_DATE_LEN);
			dbl_h_late_days = 0;
			h_amend_count = 0;
			h_number_a = 0;
			h_number_b = 0;
			h_amt = 0.0;
			memset(h_ora_rowid,APL_NULL_CHAR,APL_ROWID_LEN);
			chr_h_hisflg =NULL;
			h_entry =NULL;
			
			

			EXEC SQL FETCH trcnt_cur1 
			INTO  :h_instr_code:i_instr_code,
					:h_loccode:i_loccode,
					:h_dealcd:i_dealcd,
					:h_prodateype:i_prodateype,
					:h_dealclass:i_dealclass,
					:chr_h_instr_ccy:i_instr_ccy,
					:h_reapired_ind:i_reapired_ind,
					:h_verfied_with:i_verfied_with,
					:chr_h_bill_dt:i_bill_date,
					:dbl_h_late_days:i_late_days,
					:h_amend_count:i_amend_count,
					:h_number_a:i_number_a,
					:h_number_b:i_number_b,
					:h_ora_rowid,
					:h_amt:i_amt,
					:chr_h_hisflg,
					:h_entry;

			
			if(sqlca.sqlcode == 1403)
			{
				if(int_fetch_cnt > 0)
				{
					strcpy(chr_acct_str,p_cltt_str);
					
					srv_charge = 0.0;
					int_retstat = IV_SUCCESS;
					fflush(fp);
					printf("\n siva1 chr_prev_param_str is %s",chr_prev_param_str);
					printf("\n siva1 chr_h_param_code is %s",chr_h_param_code);
					printf("\n siva1 no_of_trades is %f",no_of_trades);					
					if(APL_FAILURE == IV_Proc_CalcFee("O",chr_acct_str,DEPOFEE,chr_prev_param_str,APL_NULL_STRING,
										chr_h_param_code,no_of_trades,no_of_trades,chr_l_charge_type,chr_l_fee_type,
										&srv_charge,l_iv_data_struct_h_dlgrp,'I',p_mstclt_a,chr_l_charge_basis,
										chr_l_fee_basis,chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
					{
						if(int_retstat == IV_CRITCAL_ERROR_IND)
						{
							fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
							fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
							fflush(fp);
							int_bl_err_level = 1;
							if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
							{
								CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
								CO_FreeErrLst(l_debug_info_ptr);
							}
							*int_p_retstat = int_retstat;
						}
					}

				/*Added by siva.ganapathi for Annexures on  02/06/2009 -- started*/

				/*printf("\n before calling1 IV_Proc_CalcDepoCommAmt() chr_l_fee_basis is %s",chr_l_fee_basis);
				printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_l_charge_basis is %s",chr_l_charge_basis);
				printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_p_client is %s",h_dl_client);
				printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_g_bl_prv_dt is %s",chr_g_bl_prv_dt);
				printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_h_bl_upto_dt is %s",chr_g_bl_upto_dt);
				printf("\n before calling IV_Proc_CalcDepoCommAmt() srv_charge is %f",srv_charge);
				printf("\n before calling IV_Proc_CalcDepoCommAmt() no_of_trades is %f",no_of_trades);
				printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_prev_param_str is %s",chr_prev_param_str);
				printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_p_param_code is %s",chr_h_param_code);*/
	
				if(srv_charge > 0 && no_of_trades >0  )
				{
				if(APL_FAILURE == IV_Proc_CalcDepoCommAmt(chr_l_fee_basis,chr_l_charge_basis,h_dl_client,chr_g_bl_prv_dt,chr_g_bl_upto_dt,srv_charge,no_of_trades,chr_prev_param_str,chr_h_param_code,'I',&int_retstat,l_debug_info_ptr))	
				{
					printf("\n Error occured in the functin IV_Proc_CalcDepoCommAmt() funtion");
				}
				}
				/*Added by siva.ganapathi for Annexures on  02/06/2009 -- Ended*/

					if(srv_charge > 0)
						tot_depo_chg += srv_charge;

					strcpy(chr_acct_str,p_cltt_str);

					
				}
				break;
			}

			int_fetch_cnt++;

			
			/*
			int_retstat = IV_SUCCESS;
			if ( APL_FAILURE == IV_Proc_TransactionFn(h_dealclass, &int_retstat, l_debug_info_ptr) )
			{
				if(int_retstat == IV_CRITCAL_ERROR_IND)
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}
				
				int_retstat = IV_SUCCESS;
				if(APL_FAILURE == IV_Mod_BillDtForTrade(h_dl_client,0.00,h_ora_rowid,chr_h_hisflg,&int_retstat,l_debug_info_ptr))
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}
			}
			else
			{
				int_retstat = IV_SUCCESS;
				if(APL_FAILURE == IV_Mod_BillDtForTrade(h_dl_client,h_amend_count,h_ora_rowid,chr_h_hisflg,&int_retstat,l_debug_info_ptr))
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;
				}
				int_fetch_cnt--; 
				continue;
			}
			*/
			
			memset(proc_data, APL_NULL_CHAR, IV_PARAM_LEN);
			chr_l_param_dep = strtok_r(chr_l_param_code,";",&chr_tdep);

			/* shailesh 12-06-2008 retrofitted  */
			while((chr_l_param_dep != (char *)NULL) && (strlen(chr_l_param_dep) > 0))
			{
				if(strcmp(chr_l_param_dep,"LOCATION") == 0)
				{
					if(strlen(proc_data) != 0)
						strcat(proc_data,";");
					strcat(proc_data,h_loccode);
				}
				else if(strcmp(chr_l_param_dep,"DEALTYPE") == 0)
				{

					if(strlen(proc_data) != 0)
						strcat(proc_data,";");
					strcat(proc_data,h_dealclass);
				}/* vinay */

				else if(strcmp(chr_l_param_dep,"DEALCD") == 0) //ISKB_430_04 shailesh 11-12-2007
																//change for allowing the deal code parameter to be selected alongwith location
				{

					if(strlen(proc_data) != 0)
						strcat(proc_data,";");
					strcat(proc_data,h_dealcd);
				}
				
				if(chr_tdep == (char *)NULL)
				   strcpy(chr_l_param_dep, APL_NULL_STRING);	
				else
					chr_l_param_dep = strtok_r(NULL,";",&chr_tdep);
			}

			if(strlen(proc_data) == 0)
			{
				strcpy(proc_data,";");
			}

			strcpy(chr_l_param_code,chr_h_param_code);
			strcat(proc_data,APL_NULL_STRING);

			if(int_fetch_cnt == 1 || strcmp(chr_prev_param_str,proc_data) != 0)
			{
				if (int_fetch_cnt > 1)
				{
					strcpy(chr_acct_str,p_cltt_str);
					srv_charge = 0.0;
					int_retstat = IV_SUCCESS;
					fflush(fp);

					printf("Entering IV_Proc_CalcFee --- chr_acct_str:|%s|",chr_acct_str);
					printf("\n before calling IV_Proc_CalcFee() chr_prev_param_str is %s",chr_prev_param_str);
					printf("\n before calling IV_Proc_CalcFee() chr_h_param_code is %s",chr_h_param_code);
					printf("\n before calling IV_Proc_CalcFee() no_of_trades is %f",no_of_trades);
					if(APL_FAILURE == IV_Proc_CalcFee("O",chr_acct_str,DEPOFEE,chr_prev_param_str,APL_NULL_STRING,
					    						chr_h_param_code,no_of_trades,no_of_trades,chr_l_charge_type,chr_l_fee_type,
					    						&srv_charge,l_iv_data_struct_h_dlgrp,'I',p_mstclt_a,chr_l_charge_basis,
												chr_l_fee_basis,chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
					{
						if(int_retstat == IV_CRITCAL_ERROR_IND)
						{
							fprintf(fp,"Error in accessing table for client %s. Please contact support\n", h_dl_client);
							fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
							fflush(fp);
							int_bl_err_level = 1;
							if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
							{
								CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
								CO_FreeErrLst(l_debug_info_ptr);
							}
							*int_p_retstat = int_retstat;
						}
					}

					/*Added by siva.ganapathi for Annexures on  02/06/2009 -- started*/
					/*printf("\n before calling2 IV_Proc_CalcDepoCommAmt() chr_l_fee_basis is %s",chr_l_fee_basis);
					printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_l_charge_basis is %s",chr_l_charge_basis);
					printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_p_client is %s",h_dl_client);
					printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_g_bl_prv_dt is %s",chr_g_bl_prv_dt);
					printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_h_bl_upto_dt is %s",chr_g_bl_upto_dt);
					printf("\n before calling IV_Proc_CalcDepoCommAmt() srv_charge is %f",srv_charge);
					printf("\n before calling IV_Proc_CalcDepoCommAmt() no_of_trades is %f",no_of_trades);
					printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_prev_param_str is %s",chr_prev_param_str);
					printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_p_param_code is %s",chr_h_param_code);*/
		
					if(srv_charge > 0 && no_of_trades >0  )
					{
					if(APL_FAILURE == IV_Proc_CalcDepoCommAmt(chr_l_fee_basis,chr_l_charge_basis,h_dl_client,chr_g_bl_prv_dt,chr_g_bl_upto_dt,srv_charge,no_of_trades,chr_prev_param_str,chr_h_param_code,'I',&int_retstat,l_debug_info_ptr))	
					{
						printf("\n Error occured in the functin IV_Proc_CalcDepoCommAmt() funtion");
					}
					}
					/*Added by siva.ganapathi for Annexures on  02/06/2009 -- Ended*/


					if(srv_charge > 0)
						tot_depo_chg += srv_charge;
					strcpy(chr_acct_str,p_cltt_str);
					
               
				}

				strcpy(chr_prev_param_str,proc_data);
				tot_credit_indr = 0;
				no_of_trades = 1;
				
				l_exchg_rt = 1.0;
             
				if (strcmp(chr_h_instr_ccy, chr_g_fee_ccycode) != 0)                   
				{
					int_retstat = IV_SUCCESS;
					if(APL_FAILURE == IV_Rtv_ExchRate(chr_h_instr_ccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,
											&l_exchg_rt, &int_retstat,l_debug_info_ptr))														
					{
						fprintf(fp,"Error : Exchange Rate not int_found for currency %s %s\n",chr_h_instr_ccy,chr_g_fee_ccycode);

						fflush(fp);
						int_bl_err_level = 1;
						*int_p_retstat = int_retstat;
					}
				}
				

                 	l_round_val = 0.0;
                  CO_Round(h_amt * l_exchg_rt, int_g_ccy_decimallen, &l_round_val);
                  tot_credit_indr += l_round_val;

			} 
			else
			{
				no_of_trades++;
				l_exchg_rt = 1.0;
				if (strcmp(chr_h_instr_ccy, chr_g_fee_ccycode) != 0)    
				{
					int_retstat = IV_SUCCESS;
					if(APL_FAILURE == IV_Rtv_ExchRate(chr_h_instr_ccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,
												&l_exchg_rt, &int_retstat,l_debug_info_ptr))  
					{
						fprintf(fp,"Error : Exchange Rate not int_found for currency %s %s\n",chr_h_instr_ccy,chr_g_fee_ccycode);

						fflush(fp);
						int_bl_err_level = 1;
						*int_p_retstat = int_retstat;
					}
				}
				

                  l_round_val = 0.0;
                  CO_Round(h_amt * l_exchg_rt, int_g_ccy_decimallen, &l_round_val);
                  tot_credit_indr += l_round_val;
			}
		}

		EXEC SQL CLOSE trcnt_cur1;
		int_is_trcnt_cur_open = 0;

	}
/********************* vinay kalaskar ************************************/
	else if(strcmp(chr_l_fee_basis,"NO. OF DAYS") == 0 &&
			strcmp(chr_l_charge_basis,"NO. OF DAYS") == 0)
	{
		printf("Inside NO. OF DAYS/NO. OF DAYS");	

		strcpy(chr_h_depo_stmt,"(SELECT b.INSTR_CODE,b.LOCATION_CD,b.DEAL_CD,RTRIM(a.INSTR_SUB_TYPE),");
		strcat(chr_h_depo_stmt,"RTRIM(b.DL_CLASS),b.CURRENCY_CD, b.REAPIRED_IND,b.VERFIED_WITH,b.DATEOFBILLING,");
		strcat(chr_h_depo_stmt,"TO_DATE(TO_CHAR(b.SETL_DATE,'dd/mm/yyyy'),'dd/mm/yyyy')");
		strcat(chr_h_depo_stmt," - TO_DATE(TO_CHAR(b.DATEOF_INPUT,'dd/mm/yyyy'),'dd/mm/yyyy'),");
		strcat(chr_h_depo_stmt,"b.AMEND_COUNT,b.NUMBER_A,b.NUMBER_B,b.ROWID,b.AMOUNT,'L' AS HISFLG,b.ENTRY,b.EXCH_CODE");
		strcat(chr_h_depo_stmt," FROM MT_INSTRUMENT a, DL_DEAL b WHERE b.CLIENT = '");
		strcat(chr_h_depo_stmt,h_dl_client);
		strcat(chr_h_depo_stmt,"'  AND b.INSTR_CODE = a.INSTR_CODE AND b.DL_CLASS NOT IN  ('18','19','20') AND ");//shailesh 280208   18,20 added
		strcat(chr_h_depo_stmt," b.DEAL_STAT !='DU' AND ");  /* ISKB-2247 Not to pick DU and DD deals */
		strcat(chr_h_depo_stmt," ( b.PAY_MODE IS NULL OR b.PAY_MODE != 'N' ) AND ");/*Added by siva.ganapathi for ISKB_2295*/
		/* Bageshri - ISKB 2263 - settled trades of billing period to be picked */
		strcat(chr_h_depo_stmt," b.CHECKER IS NOT NULL AND b.DATEOFBILLING IS NOT NULL AND ");
		/*************************************************************************
		strcat(chr_h_depo_stmt," b.CHECKER IS NOT NULL AND (b.DATEOFBILLING IS NULL OR ");
		strcat(chr_h_depo_stmt," (b.AMEND_COUNT != b.NUMBER_A AND");
		strcat(chr_h_depo_stmt," b.DATEOFBILLING != '");
		strcat(chr_h_depo_stmt,chr_g_bl_upto_dt);
		strcat(chr_h_depo_stmt,"') OR b.DATEOFBILLING = '");
		strcat(chr_h_depo_stmt,chr_g_bl_upto_dt);
		strcat(chr_h_depo_stmt,"')  AND ");
		*******************************************************************************/

		strcpy(chr_depo_stmt1," UNION ALL ");

		strcat(chr_depo_stmt1,"SELECT b.INSTR_CODE,b.LOCATION_CD,b.DEAL_CD,RTRIM(a.INSTR_SUB_TYPE),");
		strcat(chr_depo_stmt1,"RTRIM(b.DL_CLASS),b.CURRENCY_CD, b.REAPIRED_IND,b.VERFIED_WITH,b.DATEOFBILLING,");
		strcat(chr_depo_stmt1,"TO_DATE(TO_CHAR(b.SETL_DATE,'dd/mm/yyyy'),'dd/mm/yyyy')");
		strcat(chr_depo_stmt1," - TO_DATE(TO_CHAR(b.DATEOF_INPUT,'dd/mm/yyyy'),'dd/mm/yyyy'),");
		strcat(chr_depo_stmt1,"b.AMEND_COUNT,b.NUMBER_A,b.NUMBER_B,b.ROWID,b.AMOUNT,'H' AS HISFLG,b.ENTRY,b.EXCH_CODE");
		strcat(chr_depo_stmt1," FROM MT_INSTRUMENT a, DL_HISDEAL b WHERE b.CLIENT = '");
		strcat(chr_depo_stmt1,h_dl_client);
		strcat(chr_depo_stmt1,"'  AND b.INSTR_CODE = a.INSTR_CODE AND b.DL_CLASS NOT IN  ('18','19','20')  AND ");//shailesh 280208   18,20 added
		strcat(chr_depo_stmt1," b.DEAL_STAT !='DD' AND ");  /* ISKB-2247 Not to pick DU and DD deals */
		strcat(chr_depo_stmt1," ( b.PAY_MODE IS NULL OR b.PAY_MODE != 'N' ) AND ");/*Added by siva.ganapathi for ISKB_2295*/
		/* Bageshri - ISKB 2263 - settled trades of billing period to be picked */
		strcat(chr_depo_stmt1," b.CHECKER IS NOT NULL AND b.DATEOFBILLING IS NOT NULL AND ");
		/***********************************************************************
		strcat(chr_depo_stmt1," b.CHECKER IS NOT NULL AND (b.DATEOFBILLING IS NULL OR ");
		strcat(chr_depo_stmt1," (b.AMEND_COUNT != b.NUMBER_A AND");
		strcat(chr_depo_stmt1," b.DATEOFBILLING != '");
		strcat(chr_depo_stmt1,chr_g_bl_upto_dt);
		strcat(chr_depo_stmt1,"') OR b.DATEOFBILLING = '");
		strcat(chr_depo_stmt1,chr_g_bl_upto_dt);
		strcat(chr_depo_stmt1,"')  AND ");
		******************************************************************************/



		/* Bageshri HB_IV_001 START : Commented as only settled deals are considered */
		/*****************************
		if(!strcmp(chr_g_bill_dep,"INP"))
		{
			strcat(chr_h_depo_stmt," (b.DATEOF_INPUT <= '");
			strcat(chr_h_depo_stmt,chr_h_bl_upto_dt);
			strcat(chr_h_depo_stmt,"')");
			strcat(chr_depo_stmt1," (b.DATEOF_INPUT <= '");
			strcat(chr_depo_stmt1,chr_h_bl_upto_dt);
			strcat(chr_depo_stmt1,"')) ");
			strcat(chr_depo_stmt1," ORDER BY  1,9,18 ");
		}
		else 
		{
		*********************************/

			/* Bageshri - ISKB 2263 - settled trades of billing period to be picked 
			strcat(chr_h_depo_stmt," (b.INSTRUMENT_DT IS NOT NULL AND b.INSTRUMENT_DT<= '");
			*************************************************************/
			strcat(chr_h_depo_stmt," (b.INSTRUMENT_DT IS NOT NULL AND b.INSTRUMENT_DT > '");
			strcat(chr_h_depo_stmt,chr_g_bl_prv_dt);
			strcat(chr_h_depo_stmt,"' AND b.INSTRUMENT_DT<= '");

			strcat(chr_h_depo_stmt,chr_h_bl_upto_dt);
			strcat(chr_h_depo_stmt,"')");

			/* Bageshri - ISKB 2263 - settled trades of billing period to be picked 
			strcat(chr_depo_stmt1," (b.INSTRUMENT_DT IS NOT NULL AND b.INSTRUMENT_DT<= '");
			*************************************************************/
			strcat(chr_depo_stmt1," (b.INSTRUMENT_DT IS NOT NULL AND b.INSTRUMENT_DT > '");
			strcat(chr_depo_stmt1,chr_g_bl_prv_dt);
			strcat(chr_depo_stmt1,"' AND b.INSTRUMENT_DT<= '");

			strcat(chr_depo_stmt1,chr_h_bl_upto_dt);
			strcat(chr_depo_stmt1,"')) ");
			strcat(chr_depo_stmt1," ORDER BY  1,9,18 ");

		/***************************
		}
		****************************/

		/* Bageshri HB_IV_001 END */

		strcat(chr_h_depo_stmt,chr_depo_stmt1);
		strcat(chr_h_depo_stmt,APL_NULL_STRING);

		printf("NO.Of Days Query **** :|%s|\n",chr_h_depo_stmt);	

		chr_l_param_dep = strtok_r(chr_l_param_code,";",&chr_newtdep);
		strcpy(chr_l_param_code,chr_h_param_code);
		strcat(chr_h_depo_stmt,APL_NULL_STRING);



		EXEC SQL PREPARE S FROM :chr_h_depo_stmt;

		EXEC SQL DECLARE trcnt_cur2 CURSOR FOR S;

		EXEC SQL OPEN trcnt_cur2;

		if(sqlca.sqlcode < 0)
		{
			fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
			fprintf(fp,"SQL Statement: %s\n",chr_h_depo_stmt);
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			int_bl_err_level = 1;
			*int_p_retstat = IV_CRITCAL_ERROR_IND;
		}

		IS_ANY_ORA_ERROR;
		int_is_trcnt_cur_open = 1; 
		int_fetch_cnt = 0;
		
		for( ; ; )
		{
			
			memset(h_instr_code,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
			memset(chr_h_instr_ccy,APL_NULL_CHAR,APL_CCYCODE_LEN);
			memset(h_loccode,APL_NULL_CHAR,APL_LOCNCODE_LENGTH);
			memset(h_dealcd,APL_NULL_CHAR,IV_DLCD_LEN);
			memset(h_prodateype,APL_NULL_CHAR,IV_PRODTYPE_LEN);
			memset(h_dealclass,APL_NULL_CHAR,IV_DLTYPE_LEN);
			h_reapired_ind = NULL; 
			memset(h_verfied_with,APL_NULL_CHAR,IV_VERWITH_LEN);
			memset(chr_h_bill_dt,APL_NULL_CHAR,APL_DATE_LEN);
			dbl_h_late_days = 0;
			h_amend_count = 0;
			h_number_a = 0;
			h_number_b = 0;
			h_amt = 0.0;
			memset(h_ora_rowid,APL_NULL_CHAR,APL_ROWID_LEN);
			chr_h_hisflg =NULL;
			h_entry =NULL;
			memset(h_exch_code,APL_NULL_CHAR,4);
			
			

			EXEC SQL FETCH trcnt_cur2 
			INTO  :h_instr_code:i_instr_code,
					:h_loccode:i_loccode,
					:h_dealcd:i_dealcd,
					:h_prodateype:i_prodateype,
					:h_dealclass:i_dealclass,
					:chr_h_instr_ccy:i_instr_ccy,
					:h_reapired_ind:i_reapired_ind,
					:h_verfied_with:i_verfied_with,
					:chr_h_bill_dt:i_bill_date,
					:dbl_h_late_days:i_late_days,
					:h_amend_count:i_amend_count,
					:h_number_a:i_number_a,
					:h_number_b:i_number_b,
					:h_ora_rowid,
					:h_amt:i_amt,
					:chr_h_hisflg,
					:h_entry,
					:h_exch_code;
			

			strcpy(h_prev_parameter,h_parameter);
			
			strcpy(h_parameter,h_instr_code);
			strcat(h_parameter,chr_h_bill_dt);
			strcat(h_parameter,h_exch_code);
	      
			printf("h_parameter:|%s|\n",h_parameter);
			printf("h_prev_parameter:|%s|\n",h_prev_parameter);
		
			if(strlen(h_parameter) > 0)
			{	
			  if(strcmp(h_parameter,h_prev_parameter) != 0)
			  {
			   	no_of_days++;
			  }
			}
			
			printf("no_of_days:|%d|\n",no_of_days);	
			printf("sqlca.sqlcode:|%d|\n",sqlca.sqlcode);
				
			if(sqlca.sqlcode == 1403)
			{
				printf(" ****** int_fetch_cnt ***** :|%d|\n",int_fetch_cnt);
				if(int_fetch_cnt > 0)
				{

					strcpy(chr_acct_str,p_cltt_str);
					
					srv_charge = 0.0;
					int_retstat = IV_SUCCESS;
					fflush(fp);
					
					printf("Entering IV_Proc_CalcFee:|%s||%d| \n",chr_acct_str,no_of_days);
					if(APL_FAILURE == IV_Proc_CalcFee("O",chr_acct_str,DEPOFEE,chr_prev_param_str,APL_NULL_STRING,
								           chr_h_param_code,no_of_days,no_of_days,chr_l_charge_type,chr_l_fee_type,
										     &srv_charge,l_iv_data_struct_h_dlgrp,'I',p_mstclt_a,chr_l_charge_basis,
										     chr_l_fee_basis,chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
					{
						if(int_retstat == IV_CRITCAL_ERROR_IND)
						{
							fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
							fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
							fflush(fp);
							int_bl_err_level = 1;
							if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
							{
								CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
								CO_FreeErrLst(l_debug_info_ptr);
							}
							*int_p_retstat = int_retstat;
						}
					}

					/*Added by siva.ganapathi for Annexures on  02/06/2009 -- started*/

					/*printf("\n before calling2 IV_Proc_CalcDepoCommAmt() chr_l_fee_basis is %s",chr_l_fee_basis);
					printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_l_charge_basis is %s",chr_l_charge_basis);
					printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_p_client is %s",h_dl_client);
					printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_g_bl_prv_dt is %s",chr_g_bl_prv_dt);
					printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_g_bl_upto_dt is %s",chr_g_bl_upto_dt);
					printf("\n before calling IV_Proc_CalcDepoCommAmt() srv_charge is %f",srv_charge);
					printf("\n before calling IV_Proc_CalcDepoCommAmt() no_of_trades is %f",no_of_trades);
					printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_prev_param_str is %s",chr_prev_param_str);
					printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_p_param_code is %s",chr_h_param_code);*/

					if(srv_charge > 0 && no_of_trades >0  )
					{
					if(APL_FAILURE == IV_Proc_CalcDepoCommAmt(chr_l_fee_basis,chr_l_charge_basis,h_dl_client,chr_g_bl_prv_dt,chr_g_bl_upto_dt,srv_charge,no_of_trades,chr_prev_param_str,chr_h_param_code,'I',&int_retstat,l_debug_info_ptr))	
					{
						printf("\n Error occured in the functin IV_Proc_CalcDepoCommAmt() funtion");
					}
					}
					/*Added by siva.ganapathi for Annexures on  02/06/2009 -- Ended*/

					if(srv_charge > 0)
						tot_depo_chg += srv_charge;

					strcpy(chr_acct_str,p_cltt_str);

					
				}
				break;
			}

			int_fetch_cnt++;

			memset(proc_data, APL_NULL_CHAR, IV_PARAM_LEN);
			chr_l_param_dep = strtok_r(chr_l_param_code,";",&chr_tdep);

			/* shailesh 12-06-2008 retrofitted  */
			while((chr_l_param_dep != (char *)NULL) && (strlen(chr_l_param_dep) > 0))
			{
				if(strcmp(chr_l_param_dep,"LOCATION") == 0)
				{
					if(strlen(proc_data) != 0)
						strcat(proc_data,";");
					strcat(proc_data,h_loccode);
				}
				else if(strcmp(chr_l_param_dep,"DEALTYPE") == 0)
				{
					if(strlen(proc_data) != 0)
						strcat(proc_data,";");
					strcat(proc_data,h_dealclass);
				}

				else if(strcmp(chr_l_param_dep,"DEALCD") == 0) //ISKB_430_04 shailesh 11-12-2007
															 //change for allowing the deal code parameter to be selected alongwith location
				{
					if(strlen(proc_data) != 0)
						strcat(proc_data,";");
					strcat(proc_data,h_dealcd);
				}
				
				if(chr_tdep == (char *)NULL)
				   strcpy(chr_l_param_dep, APL_NULL_STRING);	
				else
					chr_l_param_dep = strtok_r(NULL,";",&chr_tdep);
			}

			if(strlen(proc_data) == 0)
			{
				strcpy(proc_data,";");
			}


			strcpy(chr_l_param_code,chr_h_param_code);
			strcat(proc_data,APL_NULL_STRING);
			
			printf("int_fetch_cnt:|%d|chr_prev_param_str:|%s|proc_data:|%s|",int_fetch_cnt,chr_prev_param_str,proc_data);
			
			if(int_fetch_cnt == 1 || strcmp(chr_prev_param_str,proc_data) != 0)
			{
				if (int_fetch_cnt > 1)
				{
					strcpy(chr_acct_str,p_cltt_str);
					srv_charge = 0.0;
					int_retstat = IV_SUCCESS;
					fflush(fp);
					
					printf("IV_Proc_CalcFee ****:|%s||%d| \n",chr_acct_str,no_of_days);
					if(APL_FAILURE == IV_Proc_CalcFee("O",chr_acct_str,DEPOFEE,chr_prev_param_str,APL_NULL_STRING,
					    					chr_h_param_code,no_of_days,no_of_days,chr_l_charge_type,chr_l_fee_type,
					    					&srv_charge,l_iv_data_struct_h_dlgrp,'I',p_mstclt_a,chr_l_charge_basis,
											chr_l_fee_basis,chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
					{
						if(int_retstat == IV_CRITCAL_ERROR_IND)
						{
							fprintf(fp,"Error in accessing table for client %s. Please contact support\n", h_dl_client);
							fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
							fflush(fp);
							int_bl_err_level = 1;
							if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
							{
								CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
								CO_FreeErrLst(l_debug_info_ptr);
							}
							*int_p_retstat = int_retstat;
						}
					}

					/*Added by siva.ganapathi for Annexures on  02/06/2009 -- started*/

					/*printf("\n before calling2 IV_Proc_CalcDepoCommAmt() chr_l_fee_basis is %s",chr_l_fee_basis);
					printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_l_charge_basis is %s",chr_l_charge_basis);
					printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_p_client is %s",h_dl_client);
					printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_g_bl_prv_dt is %s",chr_g_bl_prv_dt);
					printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_h_bl_upto_dt is %s",chr_g_bl_upto_dt);
					printf("\n before calling IV_Proc_CalcDepoCommAmt() srv_charge is %f",srv_charge);
					printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_h_bl_upto_dt is %f",no_of_trades);
					printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_prev_param_str is %s",chr_prev_param_str);
					printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_p_param_code is %s",chr_h_param_code);*/

					if(srv_charge > 0 && no_of_trades >0  )
					{
					if(APL_FAILURE == IV_Proc_CalcDepoCommAmt(chr_l_fee_basis,chr_l_charge_basis,h_dl_client,chr_g_bl_prv_dt,chr_g_bl_upto_dt,srv_charge,no_of_trades,chr_prev_param_str,chr_h_param_code,'I',&int_retstat,l_debug_info_ptr))	
					{
						printf("\n Error occured in the functin IV_Proc_CalcDepoCommAmt() funtion");
					}
					}
					/*Added by siva.ganapathi for Annexures on  02/06/2009 -- Ended*/


					if(srv_charge > 0)
						tot_depo_chg += srv_charge;
					strcpy(chr_acct_str,p_cltt_str);
					
					printf("tot_depo_chg:|%lf|\n",tot_depo_chg);
               
				}

				strcpy(chr_prev_param_str,proc_data);
				tot_credit_indr = 0;
				no_of_days = 1;
				
				l_exchg_rt = 1.0;
             
				if (strcmp(chr_h_instr_ccy, chr_g_fee_ccycode) != 0)                   
				{
					int_retstat = IV_SUCCESS;
					if(APL_FAILURE == IV_Rtv_ExchRate(chr_h_instr_ccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,&l_exchg_rt, &int_retstat,l_debug_info_ptr))																								  

					{
						fprintf(fp,"Error : Exchange Rate not int_found for currency %s %s\n",chr_h_instr_ccy,chr_g_fee_ccycode);
																							 

						fflush(fp);
						int_bl_err_level = 1;
						*int_p_retstat = int_retstat;
					}
				}
				

                                l_round_val = 0.0;
                                CO_Round(h_amt * l_exchg_rt, int_g_ccy_decimallen, &l_round_val);
                                tot_credit_indr += l_round_val;

			} 
			else
			{
				l_exchg_rt = 1.0;
				if (strcmp(chr_h_instr_ccy, chr_g_fee_ccycode) != 0)    
				{
					int_retstat = IV_SUCCESS;
					if(APL_FAILURE == IV_Rtv_ExchRate(chr_h_instr_ccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,&l_exchg_rt, &int_retstat,l_debug_info_ptr))  
					{
						fprintf(fp,"Error : Exchange Rate not int_found for currency %s %s\n",chr_h_instr_ccy,chr_g_fee_ccycode);

						fflush(fp);
						int_bl_err_level = 1;
						*int_p_retstat = int_retstat;
					}
				}
				

                                l_round_val = 0.0;
                                CO_Round(h_amt * l_exchg_rt, int_g_ccy_decimallen, &l_round_val);
                                tot_credit_indr += l_round_val;
			}
		}

		EXEC SQL CLOSE trcnt_cur2;
		int_is_trcnt_cur_open = 0;
	 }	 /**********************************///shailesh 05-02-2008 depofee to be charged on value of txn 
    else 
		if(strcmp(chr_l_fee_basis,"COUNTERVALUE") == 0 &&
				strcmp(chr_l_charge_basis,"COUNTERVALUE") == 0)
		{
	printf("Inside COUNTERVALUE/COUNTERVALUE");

	strcpy(chr_h_depo_stmt,"(SELECT b.identiy_no,b.INSTR_CODE,b.LOCATION_CD,b.DEAL_CD,RTRIM(a.INSTR_SUB_TYPE),"); /*Modified by siva.ganapathi for Annexures*/
	strcat(chr_h_depo_stmt,"RTRIM(b.DL_CLASS), b.CURRENCY_CD, b.REAPIRED_IND,b.VERFIED_WITH,b.DATEOFBILLING,");
	strcat(chr_h_depo_stmt,"TO_DATE(TO_CHAR(b.SETL_DATE,'dd/mm/yyyy'),'dd/mm/yyyy')"); 
	strcat(chr_h_depo_stmt," - TO_DATE(TO_CHAR(b.DATEOF_INPUT,'dd/mm/yyyy'),'dd/mm/yyyy'),");
	strcat(chr_h_depo_stmt,"b.AMEND_COUNT,b.NUMBER_A,b.NUMBER_B,b.ROWID,b.AMOUNT,'L' AS HISFLG,b.ENTRY");
	strcat(chr_h_depo_stmt," FROM MT_INSTRUMENT a, DL_DEAL b");
strcat(chr_h_depo_stmt," WHERE b.CLIENT = '");
		strcat(chr_h_depo_stmt,h_dl_client);
		strcat(chr_h_depo_stmt,"'  AND b.INSTR_CODE = a.INSTR_CODE ");
		strcat(chr_h_depo_stmt," AND b.DL_CLASS NOT IN ('18','19','20') AND ");//shailesh 280208   18,20 added
		strcat(chr_h_depo_stmt," b.DEAL_STAT !='DU' AND ");  /* ISKB-2247 Not to pick DU and DD deals */
		strcat(chr_h_depo_stmt," ( b.PAY_MODE IS NULL OR b.PAY_MODE != 'N' ) AND ");/*Added by siva.ganapathi for ISKB_2295*/
		/* Bageshri - ISKB 2263 - settled trades of billing period to be picked */
		strcat(chr_h_depo_stmt," b.CHECKER IS NOT NULL AND b.DATEOFBILLING IS NOT NULL AND ");
		/*************************************************************************
		strcat(chr_h_depo_stmt," b.CHECKER IS NOT NULL AND (b.DATEOFBILLING IS NULL OR ");
		strcat(chr_h_depo_stmt," (b.AMEND_COUNT != b.NUMBER_A AND");
		strcat(chr_h_depo_stmt," b.DATEOFBILLING != '");
		strcat(chr_h_depo_stmt,chr_g_bl_upto_dt);
		strcat(chr_h_depo_stmt,"') OR b.DATEOFBILLING = '");
		strcat(chr_h_depo_stmt,chr_g_bl_upto_dt);
		strcat(chr_h_depo_stmt,"') AND  ");
		********************************************************************************/

		strcat(chr_depo_stmt1," UNION ALL");
		strcat(chr_depo_stmt1," SELECT b.identiy_no,b.INSTR_CODE,b.LOCATION_CD,b.DEAL_CD,RTRIM(a.INSTR_SUB_TYPE),"); /*Modified by siva.ganapathi for Annexures*/
		strcat(chr_depo_stmt1," RTRIM(b.DL_CLASS), b.CURRENCY_CD, b.REAPIRED_IND,b.VERFIED_WITH,b.DATEOFBILLING,");
		strcat(chr_depo_stmt1,"TO_DATE(TO_CHAR(b.SETL_DATE,'dd/mm/yyyy'),'dd/mm/yyyy')"); 
		strcat(chr_depo_stmt1," - TO_DATE(TO_CHAR(b.DATEOF_INPUT,'dd/mm/yyyy'),'dd/mm/yyyy'),");
		strcat(chr_depo_stmt1," b.AMEND_COUNT,b.NUMBER_A,b.NUMBER_B,b.ROWID,b.AMOUNT,'H' AS HISFLG,b.ENTRY");
		strcat(chr_depo_stmt1," FROM MT_INSTRUMENT a, DL_HISDEAL b");
		strcat(chr_depo_stmt1," WHERE b.CLIENT = '");
		strcat(chr_depo_stmt1,h_dl_client);
		strcat(chr_depo_stmt1,"' AND b.INSTR_CODE = a.INSTR_CODE ");
		strcat(chr_depo_stmt1," AND b.DL_CLASS NOT IN  ('18','19','20')  AND ");
		strcat(chr_depo_stmt1," b.DEAL_STAT !='DD' AND ");  /* ISKB-2247 Not to pick DU and DD deals */
		strcat(chr_depo_stmt1," ( b.PAY_MODE IS NULL OR b.PAY_MODE != 'N') AND ");/*Added by siva.ganapathi for ISKB_2295*/
		/* Bageshri - ISKB 2263 - settled trades of billing period to be picked */
		strcat(chr_depo_stmt1," b.CHECKER IS NOT NULL AND b.DATEOFBILLING IS NOT NULL AND ");
		/***********************************************************************
		strcat(chr_depo_stmt1," b.CHECKER IS NOT NULL AND (b.DATEOFBILLING is NULL OR ");
		strcat(chr_depo_stmt1," (b.AMEND_COUNT != b.NUMBER_A AND");
		strcat(chr_depo_stmt1," b.DATEOFBILLING != '");
		strcat(chr_depo_stmt1,chr_g_bl_upto_dt);
		strcat(chr_depo_stmt1,"') OR b.DATEOFBILLING = '");
		strcat(chr_depo_stmt1,chr_g_bl_upto_dt);
		strcat(chr_depo_stmt1,"')  AND ");
		***************************************************************************/


			/* Bageshri - ISKB 2263 - settled trades of billing period to be picked 
			strcat(chr_h_depo_stmt," (b.INSTRUMENT_DT IS NOT NULL AND b.INSTRUMENT_DT<= '");
			*************************************************************/
			strcat(chr_h_depo_stmt," (b.INSTRUMENT_DT IS NOT NULL AND b.INSTRUMENT_DT > '");
			strcat(chr_h_depo_stmt,chr_g_bl_prv_dt);
			strcat(chr_h_depo_stmt,"' AND b.INSTRUMENT_DT<= '");

			strcat(chr_h_depo_stmt,chr_h_bl_upto_dt);
			strcat(chr_h_depo_stmt,"')");

			/* Bageshri - ISKB 2263 - settled trades of billing period to be picked 
			strcat(chr_depo_stmt1," (b.INSTRUMENT_DT IS NOT NULL AND b.INSTRUMENT_DT<= '");
			*************************************************************/
			strcat(chr_depo_stmt1," (b.INSTRUMENT_DT IS NOT NULL AND b.INSTRUMENT_DT > '");
			strcat(chr_depo_stmt1,chr_g_bl_prv_dt);
			strcat(chr_depo_stmt1,"' AND b.INSTRUMENT_DT<= '");

			strcat(chr_depo_stmt1,chr_h_bl_upto_dt);
			strcat(chr_depo_stmt1,"')) ");

		
		chr_l_param_dep = strtok_r(chr_l_param_code,";",&chr_newtdep);

		//printf("chr_l_param_dep:|%s|",chr_l_param_dep);
		while((chr_l_param_dep != (char *)NULL) && (strlen(chr_l_param_dep) > 0))
		{
			if(strcmp(chr_l_param_dep,"LOCATION") == 0)
			{
				if(int_firstfound)
					strcat(chr_depo_stmt1, ",2");
				else
				{
					strcat(chr_depo_stmt1," ORDER BY ");
					strcat(chr_depo_stmt1, "2");
					int_firstfound = 1;
				}
			}
			else if(strcmp(chr_l_param_dep,"DEALTYPE") == 0)
			{
				if(int_firstfound)
					strcat(chr_depo_stmt1, ",5");
				else
				{
					strcat(chr_depo_stmt1," ORDER BY ");
					strcat(chr_depo_stmt1, "5");
					int_firstfound = 1;
				}
			}
			else if(strcmp(chr_l_param_dep,"DEALCD") == 0) //ISKB_430_04 shailesh 11-12-2007
															//change for allowing the deal code parameter to be selected alongwith location
			{
				if(int_firstfound)
					strcat(chr_depo_stmt1, ",3");
				else
				{
					strcat(chr_depo_stmt1," ORDER BY ");
					strcat(chr_depo_stmt1, "3");
					int_firstfound = 1;
				}
	 }
	
			if(chr_newtdep == (char *)NULL)
				strcpy(chr_l_param_dep, APL_NULL_STRING);
			else
				chr_l_param_dep = strtok_r(NULL,";",&chr_newtdep); 
		}
			
		strcpy(chr_l_param_code,chr_h_param_code);
		strcat(chr_h_depo_stmt,chr_depo_stmt1);
		strcat(chr_h_depo_stmt,APL_NULL_STRING);
		
		printf("\n\nDepository Query for COUNTERVALUE/COUNTERVALUE :|%s|",chr_h_depo_stmt);

		
		EXEC SQL PREPARE S FROM :chr_h_depo_stmt;

		EXEC SQL DECLARE trcnt_cur3 CURSOR FOR S;

		EXEC SQL OPEN trcnt_cur3;

		if(sqlca.sqlcode < 0)
		{
			fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
			fprintf(fp,"SQL Statement: %s\n",chr_h_depo_stmt);
			fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
			fflush(fp);
			int_bl_err_level = 1;
			*int_p_retstat = IV_CRITCAL_ERROR_IND;
		}

		IS_ANY_ORA_ERROR;

		int_is_trcnt_cur_open = 1; 
		int_fetch_cnt = 0;
		
		for( ; ; )
		{
			
			memset(h_identiy_no,APL_NULL_CHAR,17); /*Added by siva.ganapathi for Annexures*/
			memset(h_instr_code,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
			memset(chr_h_instr_ccy,APL_NULL_CHAR,APL_CCYCODE_LEN);
			memset(h_loccode,APL_NULL_CHAR,APL_LOCNCODE_LENGTH);
			memset(h_dealcd,APL_NULL_CHAR,IV_DLCD_LEN);
			memset(h_prodateype,APL_NULL_CHAR,IV_PRODTYPE_LEN);
			memset(h_dealclass,APL_NULL_CHAR,IV_DLTYPE_LEN);
			h_reapired_ind = NULL; 
			memset(h_verfied_with,APL_NULL_CHAR,IV_VERWITH_LEN);
			memset(chr_h_bill_dt,APL_NULL_CHAR,APL_DATE_LEN);
			dbl_h_late_days = 0;
			h_amend_count = 0;
			h_number_a = 0;
			h_number_b = 0;
			h_amt = 0.0;
			memset(h_ora_rowid,APL_NULL_CHAR,APL_ROWID_LEN);
			chr_h_hisflg =NULL;
			h_entry =NULL;
			
			
                         /*Modified by siva.ganapathi for Annexures*/
			EXEC SQL FETCH trcnt_cur3 
			INTO    :h_identiy_no,i_identiy_no,  
			    	:h_instr_code:i_instr_code,
					:h_loccode:i_loccode,
					:h_dealcd:i_dealcd,
					:h_prodateype:i_prodateype,
					:h_dealclass:i_dealclass,
					:chr_h_instr_ccy:i_instr_ccy,
					:h_reapired_ind:i_reapired_ind,
					:h_verfied_with:i_verfied_with,
					:chr_h_bill_dt:i_bill_date,
					:dbl_h_late_days:i_late_days,
					:h_amend_count:i_amend_count,
					:h_number_a:i_number_a,
					:h_number_b:i_number_b,
					:h_ora_rowid,
					:h_amt:i_amt,
					:chr_h_hisflg,
					:h_entry;

printf("\n 05-02-2008 shailesh h_amt = [%lf] and instr = [%s]",h_amt,h_instr_code);
//shailesh 06-02-2008
	srv_charge = 0.0;
	int_retstat = IV_SUCCESS;
	fflush(fp);
			if(sqlca.sqlcode == 1403)
			{
						break;
			}

			int_fetch_cnt++;

memset(proc_data, APL_NULL_CHAR, IV_PARAM_LEN);
chr_l_param_dep = strtok_r(chr_l_param_code,";",&chr_tdep);

			while(strlen(chr_l_param_dep) > 0)
			{
				if(strcmp(chr_l_param_dep,"LOCATION") == 0)
				{
					if(strlen(proc_data) != 0)
						strcat(proc_data,";");
					strcat(proc_data,h_loccode);
				}
				else if(strcmp(chr_l_param_dep,"DEALTYPE") == 0)
				{

					if(strlen(proc_data) != 0)
						strcat(proc_data,";");
					strcat(proc_data,h_dealclass);
				} 
				else if(strcmp(chr_l_param_dep,"DEALCD") == 0) //ISKB_430_04 shailesh 11-12-2007
																//change for allowing the deal code parameter to be selected alongwith location
				{

					if(strlen(proc_data) != 0)
						strcat(proc_data,";");
					strcat(proc_data,h_dealcd);
				}
				
				if(chr_tdep == (char *)NULL)
				   strcpy(chr_l_param_dep, APL_NULL_STRING);	
				else
					chr_l_param_dep = strtok_r(NULL,";",&chr_tdep);
			}

			if(strlen(proc_data) == 0)
			{
				strcpy(proc_data,";");
			}

			strcpy(chr_l_param_code,chr_h_param_code);
			strcat(proc_data,APL_NULL_STRING);
			strcpy(chr_acct_str,p_cltt_str);				
			
            tot_credit_indr = 0;
							
			l_exchg_rt = 1.0;
             
				if (strcmp(chr_h_instr_ccy, chr_g_fee_ccycode) != 0)                   
				{
					int_retstat = IV_SUCCESS;
					if(APL_FAILURE == IV_Rtv_ExchRate(chr_h_instr_ccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,
											&l_exchg_rt, &int_retstat,l_debug_info_ptr))														
					{
						fprintf(fp,"Error : Exchange Rate not int_found for currency %s %s\n",chr_h_instr_ccy,chr_g_fee_ccycode);

						fflush(fp);
						int_bl_err_level = 1;
						*int_p_retstat = int_retstat;
					}
				}
				

			printf("account: %s %d \n",h_dl_client,__LINE__);
	if(APL_FAILURE == IV_Proc_CalcFee("O",chr_acct_str,DEPOFEE,proc_data,APL_NULL_STRING,
					    						chr_h_param_code,h_amt,h_amt,chr_l_charge_type,chr_l_fee_type,
					    						&srv_charge,l_iv_data_struct_h_dlgrp,'I',p_mstclt_a,chr_l_charge_basis,
												chr_l_fee_basis,chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
					{
						if(int_retstat == IV_CRITCAL_ERROR_IND)
						{
							fprintf(fp,"Error in accessing table for client %s. Please contact support\n", h_dl_client);
							fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
							fflush(fp);
							int_bl_err_level = 1;
							if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
							{
								CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
								CO_FreeErrLst(l_debug_info_ptr);
							}
							*int_p_retstat = int_retstat;
						}
					}
							
				/*Added by siva.ganapathi for Annexures on  02/06/2009 -- started*/

				/*printf("\nBefore calling IV_Proc_CalcDepoCommAmtCntVal() Client is %s ",h_dl_client);//yugandar
				printf("\nBefore calling IV_Proc_CalcDepoCommAmtCntVal() Identiy_no is %s ",h_identiy_no);
				printf("\nBefore calling IV_Proc_CalcDepoCommAmtCntVal() Bill date is %s ",chr_g_bl_upto_dt);
				printf("\nBefore calling IV_Proc_CalcDepoCommAmtCntVal() service charge is %f ",srv_charge);*/
				
				if(srv_charge > 0)
				{
				if(APL_FAILURE == IV_Proc_CalcDepoCommAmtCntVal(h_dl_client,h_identiy_no,chr_g_bl_upto_dt,srv_charge,&int_retstat,l_debug_info_ptr) )
				{
					printf("\n In the function IV_Proc_CalcDepoCommAmtCntVal() function ");
				}
				}
				/*Added by siva.ganapathi for Annexures on  02/06/2009 -- Ended*/

				
				if(srv_charge > 0)
						tot_depo_chg += srv_charge;
                  l_round_val = 0.0;
                  CO_Round(h_amt * l_exchg_rt, int_g_ccy_decimallen, &l_round_val);
                  tot_credit_indr += l_round_val;

			
		}

		EXEC SQL CLOSE trcnt_cur3;
		int_is_trcnt_cur_open = 0;

	}

       /***************************************************************************************/
  
	

	int_i_cnt = 0;
	int_l_err_flg = IV_SUCCESS;

	printf("proc_data:|%s|",(l_iv_data_struct_h_dlgrp+int_i_cnt)->proc_data);
	
	while (strlen((l_iv_data_struct_h_dlgrp+int_i_cnt)->proc_data)> 0)
	{
		strcpy(chr_acct_str,p_cltt_str);
		srv_charge = 0.0;

		int_retstat = IV_SUCCESS;

		printf("\n for depo chgs chr_acct_str is %s",chr_acct_str);
		printf("\n (l_iv_data_struct_h_dlgrp+int_i_cnt)->proc_data is %s",(l_iv_data_struct_h_dlgrp+int_i_cnt)->proc_data);
		printf("\n chr_h_param_code is %s",chr_h_param_code);

		if(APL_FAILURE == IV_Proc_CalcFee("O",chr_acct_str,DEPOFEE,(l_iv_data_struct_h_dlgrp+int_i_cnt)->proc_data,
		    APL_NULL_STRING,
		    chr_h_param_code,
		    (l_iv_data_struct_h_dlgrp+int_i_cnt)->fees_qty,(l_iv_data_struct_h_dlgrp+int_i_cnt)->chrg_quant,
		    chr_l_charge_type,chr_l_fee_type,&srv_charge,l_iv_data_struct_h_dlgrp,'I',p_mstclt_a,
		    chr_l_charge_basis,chr_l_fee_basis,chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}

				*int_p_retstat = int_retstat;
				int_l_err_flg = IV_CRITCAL_ERROR_IND; 
			}
		}
		printf("\n srv_charge is %f",srv_charge);


	/*Added by siva.ganapathi for Annexures on  02/06/2009 -- started*/

	/*printf("\n before calling2 IV_Proc_CalcDepoCommAmt() chr_l_fee_basis is %s",chr_l_fee_basis);
	printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_l_charge_basis is %s",chr_l_charge_basis);
	printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_p_client is %s",chr_acct_str);
	printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_g_bl_prv_dt is %s",chr_g_bl_prv_dt);
	printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_g_bl_upto_dt is %s",chr_g_bl_upto_dt);
	printf("\n before calling IV_Proc_CalcDepoCommAmt() srv_charge is %f",srv_charge);
	printf("\n before calling IV_Proc_CalcDepoCommAmt() no_of_trades is %f",(l_iv_data_struct_h_dlgrp+int_i_cnt)->chrg_quant);
	printf("\n before calling IV_Proc_CalcDepoCommAmt() (l_iv_data_struct_h_dlgrp+int_i_cnt)->proc_data is %s",(l_iv_data_struct_h_dlgrp+int_i_cnt)->proc_data);
	printf("\n before calling IV_Proc_CalcDepoCommAmt() chr_p_param_code is %s",chr_h_param_code);*/
	
	if((l_iv_data_struct_h_dlgrp+int_i_cnt)->chrg_quant > 0 && srv_charge >0 )
	{
	if(APL_FAILURE == IV_Proc_CalcDepoCommAmt(chr_l_fee_basis,chr_l_charge_basis,h_dl_client,chr_g_bl_prv_dt,chr_g_bl_upto_dt,srv_charge,(l_iv_data_struct_h_dlgrp+int_i_cnt)->chrg_quant,(l_iv_data_struct_h_dlgrp+int_i_cnt)->proc_data,chr_h_param_code,'G',&int_retstat,l_debug_info_ptr))	
	{
		printf("\n Error occured in the functin IV_Proc_CalcDepoCommAmt() funtion");
	}
	}
	/*Added by siva.ganapathi for Annexures on  02/06/2009 -- Ended*/
		
		if(srv_charge > 0)
			tot_depo_chg += srv_charge;
		++int_i_cnt;
	}


	if( int_l_err_flg != IV_CRITCAL_ERROR_IND ) 
	{
		if ((tot_depo_chg == 0) && (l_nil_fees > 0) )
		{
			int_retstat = IV_SUCCESS;
		#ifdef BILLDEBUG 
         
			fprintf(TestRep, "\nInserting Record into IV_SERVICE_CHRG\n");     
			fprintf(TestRep, "account: %s\n",h_dl_client);
			fprintf(TestRep, "nil fees: %lf",l_nil_fees);
		   fprintf(TestRep, " min fees adjust: %lf",0.0);
			fprintf(TestRep, " MAX fees adjust: %lf",0.0); 
			fprintf(TestRep, " tot_chg: %lf\n",0.0);
			fprintf(TestRep, "currency :%s\n",chr_g_bl_ccycode);
			fflush(TestRep);

		#endif 
		//fprintf(fp,"Just Before IV_Mod_IVSRVCHRGNew\n");	
		/*added incld_in_ann_min_fee by shruthi kumbla for ISKB_1901*/
			if(APL_FAILURE == IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,h_dl_client,l_nil_fees,0.0,0.0,0.0,
										chr_g_bl_ccycode,'I',DEPOFEE,p_mstclt_a,l_iv_client_serv_basis_structa.incld_in_ann_min_fee,&int_retstat,l_debug_info_ptr))
			{
				fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
			}
		}
		else if(tot_depo_chg > 0)
		{
			if(tot_depo_chg < l_minimumfee)
				l_minimumfee_adj = l_minimumfee - tot_depo_chg;
			else
				l_minimumfee_adj = 0;
			if((tot_depo_chg > l_maximum_fee) && (l_maximum_fee != 0))
			{
				l_maximum_fee_adj = l_maximum_fee - tot_depo_chg;
			}
			else
				l_maximum_fee_adj = 0;

			int_retstat = IV_SUCCESS;
		/*#ifdef BILLDEBUG */
         
			printf("\nInserting Record into BSERVCHARGE\n");     
			printf("account: %s %d \n",h_dl_client,__LINE__);
			printf("nil fees: %lf",0.0);
			printf(" min fees adjust: %lf",l_minimumfee_adj);
			printf(" MAX fees adjust: %lf",l_maximum_fee_adj); 
			printf(" tot_chg: %lf\n",tot_depo_chg);
			printf("currency :%s\n",chr_g_bl_ccycode);
			fflush(stdout);

		/*#endif*/
		/*added incld_in_ann_min_fee by shruthi kumbla for ISKB_1901*/
			if(APL_FAILURE == IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,h_dl_client,0.0,l_minimumfee_adj,
							l_maximum_fee_adj,tot_depo_chg,chr_g_bl_ccycode,'I',DEPOFEE,p_mstclt_a,l_iv_client_serv_basis_structa.incld_in_ann_min_fee, &int_retstat,l_debug_info_ptr))
			{
				fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);

					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
				int_bl_err_level = 1;
			}
		}

	} 

		
	int_i_cnt =0;
	

	if (*int_p_retstat != IV_SUCCESS)
	{
		APL_GOBACK_FAIL;
	}
	else
	{
		*int_p_retstat = IV_SUCCESS;
		APL_GOBACK_SUCCESS;
	}

RETURN_SUCCESS:
	if(int_is_trcnt_cur_open == 1)
	{
		EXEC SQL CLOSE trcnt_cur1;
	}
	return APL_SUCCESS;

RETURN_FAILURE:
	if(int_is_trcnt_cur_open == 1)
	{
		EXEC SQL CLOSE trcnt_cur1;
	}
	return APL_FAILURE;
}

/*** For  MutualFund Bill Generation : vinay kalaskar **********************************************/

int IV_Proc_CalcMFTxnFee(char *p_cltt_str,long p_serv_code,double p_portfolio,double p_nnotrades,char *p_mf_seqno,
char *p_mstclt_a,int *int_p_retstat,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	EXEC SQL BEGIN DECLARE SECTION;
	char chr_h_bl_upto_dt[APL_DATE_LEN];
	EXEC SQL VAR chr_h_bl_upto_dt IS STRING;
	struct sqlca sqlca;
	EXEC SQL END DECLARE SECTION;

	char chr_acct_str[IV_CLT_LEN],l_chr_acct_str[IV_CLT_LEN];
	char chr_l_charge_basis[IV_STRING_LEN];
	char chr_l_fee_basis[IV_STRING_LEN];
	char l_charge_basis[IV_STRING_LEN];
	char l_fee_basis[IV_STRING_LEN];
	char l_mf_seqno[6];
	double l_schdl_fee=0.0;
	char l_proc_data[200];
	char l_group_id[50];
	char chr_l_fee_type,chr_l_charge_type,*k,chr_l_acct_str[IV_CLT_LEN],*h_chr_acct_str;
	char chr_l_mstacc_a[APL_CLIENT_LENGTH], chr_mstacctstr[IV_CLT_LEN];
	char *chr_l_client_a = NULL;
	char *l_client = NULL;
	double l_clt_amount = 0.0,l_clt_qty = 0.0,l_comm_amount=0.0;
	int count=0,count_no=0;
	int h_gen_flag=0,l_gen_flag=0;

	char chr_h_srv_ind[50] ;
	int int_l_err_flg = IV_SUCCESS; 
	IV_CLIENT_SERV_BASIS_STRUCT l_iv_client_serv_basis_structa ;
	IV_CLIENTPARAM_STRUCT_H  l_iv_clientparam_struct_hb ;
	IV_CLIENTSETUP_STRUCT l_iv_clientsetup_struct ;
	double l_nil_fees=0,l_minimumfee=0,l_maximum_fee=0,l_minimumfee_adj=0,l_maximum_fee_adj=0;
	double srv_charge=0,tot_chg=0, l_exchg_rt = 1.0;
	int int_retstat=0,int_i_cnt=0;
	IV_DATA_STRUCT_H l_iv_data_struct_h_servgrp[50];

	sqlca.sqlcode = 0;



	double l_mf_qty = 0.0;
	double l_mf_amount = 0.0;


 	k = (char *) calloc(IV_CLT_LEN,sizeof(char));
 	h_chr_acct_str = (char *) calloc(IV_CLT_LEN,sizeof(char));
	memset(chr_h_bl_upto_dt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(chr_l_charge_basis, APL_NULL_CHAR, IV_STRING_LEN);
	memset(chr_l_fee_basis, APL_NULL_CHAR, IV_STRING_LEN);
	
	memset(chr_acct_str,APL_NULL_CHAR,IV_CLT_LEN);
	memset(l_chr_acct_str,APL_NULL_CHAR,IV_CLT_LEN);
	memset(h_chr_acct_str,APL_NULL_CHAR,IV_CLT_LEN);
	
	memset(chr_l_acct_str,APL_NULL_CHAR,IV_CLT_LEN);
	memset(chr_mstacctstr,APL_NULL_CHAR,IV_CLT_LEN);
	memset(chr_l_mstacc_a,APL_NULL_CHAR,APL_CLIENT_LENGTH);
	//memset(l_client,APL_NULL_CHAR,APL_CLIENT_LENGTH);
	memset(l_mf_seqno,APL_NULL_CHAR,6);
	memset(l_proc_data,APL_NULL_CHAR,200);
	memset(l_group_id,APL_NULL_CHAR,50);
	
	memset(l_iv_data_struct_h_servgrp[0].proc_data,APL_NULL_CHAR,IV_PARAM_LEN);
	memset(chr_h_srv_ind,APL_NULL_CHAR,50);

	memset(&l_iv_client_serv_basis_structa, NULL, sizeof(IV_CLIENT_SERV_BASIS_STRUCT));
	memset(&l_iv_clientparam_struct_hb, NULL, sizeof(IV_CLIENTPARAM_STRUCT_H));
	memset(&l_iv_clientsetup_struct, NULL, sizeof(IV_CLIENTSETUP_STRUCT));

	strcpy(chr_acct_str,p_cltt_str);
	strcpy(chr_h_bl_upto_dt,chr_g_bl_upto_dt);
	strcpy(chr_l_mstacc_a,p_mstclt_a);
	strcpy(chr_l_acct_str,chr_acct_str);
	strcpy(l_mf_seqno,p_mf_seqno);

	*int_p_retstat = IV_SUCCESS;
	chr_l_client_a = strtok_r(chr_l_acct_str,";",&k);


	/*** split chr_acct_str and send master client as first parameter ********/

	strcpy(l_chr_acct_str,chr_acct_str);
	strcat(l_chr_acct_str,APL_NULL_STRING);
	l_client = strtok_r(l_chr_acct_str,";",&h_chr_acct_str);
	strcpy(chr_acct_str,p_mstclt_a);
	strcat(chr_acct_str,";");	
	strcat(chr_acct_str,h_chr_acct_str);	
	strcat(chr_acct_str,APL_NULL_STRING);

	/************************************************************************/

	if(chr_g_bl_gen == 'M')
	{
		strcpy(chr_mstacctstr,chr_l_mstacc_a);
		strcat(chr_mstacctstr,";");

		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Rtv_IVCUSTSETUP(chr_l_mstacc_a,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error : Account %s  not found in billing system\n",l_iv_client_serv_basis_structa.client);
				fflush(fp);
				*int_p_retstat = IV_NO_DATA_FOUND_ERR;
				int_bl_err_level = 1;
				APL_GOBACK_FAIL;
			}
		}

		strcat(chr_mstacctstr,l_iv_clientsetup_struct.default_feeclt);
		strcat(chr_mstacctstr,";");
		strcat(chr_mstacctstr,chr_g_cb_code);
		strcat(chr_mstacctstr,";");
		strcat(chr_mstacctstr,APL_NULL_STRING);

		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Rtv_GetServBasis(chr_mstacctstr,p_serv_code,&l_iv_client_serv_basis_structa,&int_retstat,l_debug_info_ptr))
		{
			//fprintf(fp,"Error : Service basis not found for service %d for master client of %s\n",p_serv_code,chr_l_client_a); Changes done for AIX Migration
			fprintf(fp,"Error : Service basis not found for service %ld for master client of %s\n",p_serv_code,chr_l_client_a);
			fflush(fp);
			int_bl_err_level = 1;
			*int_p_retstat = int_retstat;
			APL_GOBACK_FAIL;
		}

		chr_l_charge_type = l_iv_client_serv_basis_structa.chrg_clas;
		chr_l_fee_type = l_iv_client_serv_basis_structa.fees_class;
		strcpy(chr_l_charge_basis,l_iv_client_serv_basis_structa.chrg_base);
		strcpy(chr_l_fee_basis,l_iv_client_serv_basis_structa.fees_base);
	}

	int_retstat = IV_SUCCESS;
	if(APL_FAILURE == IV_Rtv_GetServBasis(chr_acct_str,p_serv_code,&l_iv_client_serv_basis_structa,&int_retstat,l_debug_info_ptr))
	{
		fprintf(fp,"Error : Service basis not found for service %ld for client %s\n",p_serv_code,chr_l_client_a); 
		fflush(fp);
		int_bl_err_level = 1;
		*int_p_retstat = int_retstat;
		APL_GOBACK_FAIL;
	}

	if(chr_g_bl_gen != 'M')
	{
		strcpy(chr_l_fee_basis,l_iv_client_serv_basis_structa.fees_base);
		strcpy(chr_l_charge_basis,l_iv_client_serv_basis_structa.chrg_base);
	}
	chr_l_charge_type = l_iv_client_serv_basis_structa.chrg_clas; 
	chr_l_fee_type = l_iv_client_serv_basis_structa.fees_class;
	l_nil_fees   = l_iv_client_serv_basis_structa.nil_fees;
	l_minimumfee   = l_iv_client_serv_basis_structa.minimumfee;
	l_maximum_fee   = l_iv_client_serv_basis_structa.maximum_fee;
	/*added by shruthi kumbla for ISKB_1901*/
			if((l_iv_client_serv_basis_structa.incld_in_ann_min_fee)!='Y')
				l_iv_client_serv_basis_structa.incld_in_ann_min_fee = 'N';

	

	if(strcmp(l_iv_client_serv_basis_structa.client, chr_l_client_a) != 0)
	{
		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Rtv_IVCUSTSETUP(l_iv_client_serv_basis_structa.client,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error : Account %s  not found in billing system\n",l_iv_client_serv_basis_structa.client);
				fflush(fp);
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}

				*int_p_retstat = int_retstat;
				APL_GOBACK_FAIL;
			}
		}

		l_exchg_rt = 1.0; 
		if(strcmp(l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode) != 0)     
		{
			int_retstat = IV_SUCCESS;
			if(APL_FAILURE == IV_Rtv_ExchRate(l_iv_clientsetup_struct.fees_ccy,
													chr_g_fee_ccycode,chr_g_bl_upto_dt,
													&l_exchg_rt,&int_retstat,l_debug_info_ptr))  
			{
				fprintf(fp,"Error : Exchange Rate not found for currency %s %s\n",l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode);                                                                      
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
			}
		}

		

		CO_Round(l_nil_fees * l_exchg_rt, int_g_ccy_decimallen, &l_nil_fees);
                CO_Round(l_minimumfee * l_exchg_rt, int_g_ccy_decimallen, &l_minimumfee);
                CO_Round(l_maximum_fee * l_exchg_rt, int_g_ccy_decimallen, &l_maximum_fee);
	}
	l_nil_fees = l_nil_fees * g_exchg_rt_fee_bl;    
	l_minimumfee = l_minimumfee * g_exchg_rt_fee_bl;   
	l_maximum_fee = l_maximum_fee * g_exchg_rt_fee_bl;   

	strcpy(chr_acct_str,p_cltt_str);
	int_retstat = IV_SUCCESS;
	srv_charge = 0.0;

	/*** split chr_acct_str and send master client as first parameter ********/
/*
	strcpy(l_chr_acct_str,chr_acct_str);
	strcat(l_chr_acct_str,APL_NULL_STRING);
	l_client = strtok_r(l_chr_acct_str,";",&h_chr_acct_str);
	strcpy(chr_acct_str,p_mstclt_a);
	strcat(chr_acct_str,";");	
	strcat(chr_acct_str,h_chr_acct_str);	
	strcat(chr_acct_str,APL_NULL_STRING);

	printf("Before Query :|%s|",p_mstclt_a);
	EXEC SQL SELECT FEES_BASE,CHRG_BASE 
				INTO :l_fee_basis,:l_charge_basis
				FROM IV_CLIENT_SERV_BASIS 
				WHERE CLIENT=:p_mstclt_a
				AND SERVICE_CD=29;

	printf("sqlca.sqlcode:|%d|",sqlca.sqlcode);	
	IS_ANY_ORA_ERROR

	printf("l_fee_basis:|%s|l_charge_basis:|%s|",l_fee_basis,l_charge_basis);*/
	
	/************************************************************************/
	
	
	if((!strcmp(chr_l_fee_basis,"PORTFOLIO VALUE"))&&(!strcmp(chr_l_charge_basis,"NO. OF TRADES")))
	{
		if(APL_FAILURE == IV_Proc_CalcFee("O",chr_acct_str,p_serv_code,";",APL_NULL_STRING," ",p_portfolio,
						p_nnotrades, chr_l_charge_type,chr_l_charge_type,&srv_charge,l_iv_data_struct_h_servgrp,
						'I',p_mstclt_a,chr_l_charge_basis,chr_l_fee_basis,chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error in accessing table s. Please contact support\n");
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				int_bl_err_level = 1;
				*int_p_retstat = int_retstat;
			}
		}

	if(srv_charge > 0)
		tot_chg += srv_charge;

	int_i_cnt = 0;
	strcpy(chr_acct_str,p_cltt_str);

	int_l_err_flg = IV_SUCCESS; 
	while (strlen((l_iv_data_struct_h_servgrp+int_i_cnt)->proc_data)> 0)
	{
		int_retstat = IV_SUCCESS;
		srv_charge = 0.0;

		if(APL_FAILURE == IV_Proc_CalcFee("O",chr_acct_str,p_serv_code, (l_iv_data_struct_h_servgrp+int_i_cnt)->proc_data,
											 APL_NULL_STRING, " ",(l_iv_data_struct_h_servgrp+int_i_cnt)->fees_qty,
											 (l_iv_data_struct_h_servgrp+int_i_cnt)->chrg_quant,chr_l_charge_type,chr_l_fee_type,
											 &srv_charge,l_iv_data_struct_h_servgrp,'I',p_mstclt_a,
											 chr_l_charge_basis,chr_l_fee_basis,chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error in accessing table . Please contact support\n");
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				int_bl_err_level = 1;
				*int_p_retstat = int_retstat;
				int_l_err_flg = IV_CRITCAL_ERROR_IND;
			}
		}

		if(srv_charge > 0)
			tot_chg += srv_charge;

		++int_i_cnt;

	}
	}
	else if((!strcmp(chr_l_fee_basis,"NO. OF TRADES"))&&(!strcmp(chr_l_charge_basis,"NO. OF TRADES")))
	{
		if(APL_FAILURE == IV_Proc_CalcFee("O",chr_acct_str,p_serv_code,";",APL_NULL_STRING," ",p_nnotrades,
						p_nnotrades, chr_l_charge_type,chr_l_charge_type,&srv_charge,l_iv_data_struct_h_servgrp,
						'I',p_mstclt_a,chr_l_charge_basis,chr_l_fee_basis,chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error in accessing table s. Please contact support\n");
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				int_bl_err_level = 1;
				*int_p_retstat = int_retstat;
			}
		}

	if(srv_charge > 0)
		tot_chg += srv_charge;

	int_i_cnt = 0;
	strcpy(chr_acct_str,p_cltt_str);

	int_l_err_flg = IV_SUCCESS; 
	while (strlen((l_iv_data_struct_h_servgrp+int_i_cnt)->proc_data)> 0)
	{
		int_retstat = IV_SUCCESS;
		srv_charge = 0.0;

		if(APL_FAILURE == IV_Proc_CalcFee("O",chr_acct_str,p_serv_code, (l_iv_data_struct_h_servgrp+int_i_cnt)->proc_data,
											 APL_NULL_STRING, " ",(l_iv_data_struct_h_servgrp+int_i_cnt)->fees_qty,
											 (l_iv_data_struct_h_servgrp+int_i_cnt)->chrg_quant,chr_l_charge_type,chr_l_fee_type,
											 &srv_charge,l_iv_data_struct_h_servgrp,'I',p_mstclt_a,
											 chr_l_charge_basis,chr_l_fee_basis,chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error in accessing table . Please contact support\n");
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				int_bl_err_level = 1;
				*int_p_retstat = int_retstat;
				int_l_err_flg = IV_CRITCAL_ERROR_IND;
			}
		}

		if(srv_charge > 0)
			tot_chg += srv_charge;

		++int_i_cnt;

	}
	}

/******************* Mutual fund scheme vice splitting ********************************************/
	printf("tot_chg:|%lf| l_client |%s| l_mf_seqno |%s|",tot_chg,l_client,l_mf_seqno);
	if(tot_chg > 0)
	{
		printf("chr_l_fee_basis:|%s|chr_l_charge_basis:|%s|",chr_l_fee_basis,chr_l_charge_basis);
		if((!strcmp(chr_l_fee_basis,"PORTFOLIO VALUE"))&&(!strcmp(chr_l_charge_basis,"NO. OF TRADES")))
		{
			/*EXEC SQL SELECT SUM(AMOUNT) INTO :l_clt_amount FROM DL_DEAL
				GROUP BY CLIENT,MF_SEQNO 
			   	HAVING CLIENT=:l_client AND MF_SEQNO=:l_mf_seqno;*/
			
			
			/****** For Client Wise Allocation : Vinay : 29/02/2008 *********/
			
			EXEC SQL SELECT SUM(AMOUNT) INTO :l_clt_amount
			         FROM DL_DEAL 
				 WHERE MF_SEQNO=:l_mf_seqno 
				 AND CLIENT=:l_client;

			IS_ANY_ORA_ERROR

                        EXEC SQL SELECT SUM(AMOUNT) INTO :l_mf_amount
			         FROM DL_DEAL 
				 WHERE MF_SEQNO=:l_mf_seqno;
			
			IS_ANY_ORA_ERROR

			
			
			
			EXEC SQL SELECT PROC_DATA_VAL,GROUP_ID,SCHDL_FEE 
						INTO :l_proc_data,
							  :l_group_id,
							  :l_schdl_fee 
						FROM IV_CLIENTFEE
						WHERE CLIENT=:l_client
						AND SERVICE_CD=29;
			
			printf("sqlca.sqlcode:|%d|",sqlca.sqlcode);
			if(sqlca.sqlcode == 1403)
			{
				EXEC SQL SELECT PROC_DATA_VAL,GROUP_ID,SCHDL_FEE
					INTO :l_proc_data,
						  :l_group_id,
						  :l_schdl_fee
					FROM IV_CLIENTFEE
					WHERE CLIENT=(SELECT DEFAULT_FEECLT FROM IV_CLIENTSETUP WHERE CLIENT=:l_client)
					AND SERVICE_CD=29;
			}
			
			IS_ANY_ORA_ERROR
		
	      /* HB_IV_001 Bageshri : to get fee details of custody client*/

			printf("sqlca.sqlcode:|%d| chr_g_cb_code |%s|",sqlca.sqlcode,chr_g_cb_code);
			if(sqlca.sqlcode == 1403)
			{
				EXEC SQL SELECT PROC_DATA_VAL,GROUP_ID,SCHDL_FEE
					INTO :l_proc_data,
						  :l_group_id,
						  :l_schdl_fee
					FROM IV_CLIENTFEE
					WHERE CLIENT= :chr_g_cb_code
					AND SERVICE_CD=29;
			}
			
			IS_ANY_ORA_ERROR

			/* HB_IV_001 END */


			printf("\nl_clt_amount :|%lf|\n",l_clt_amount);
			printf("l_mf_amount :|%lf|\n",l_mf_amount);
			printf("tot_chg :|%lf|\n\n",tot_chg);
			
			if((l_clt_amount >0)&&(p_portfolio >0))	
			l_comm_amount=((l_clt_amount*tot_chg)/(l_mf_amount));
	
			printf("\nEntering IV_Mod_NewIVTRANSFee:|%s||%lf||%lf|\n",l_client,l_comm_amount,l_clt_amount);


			if(APL_FAILURE == IV_Mod_NewIVTRANSFee(l_client,MUTUALFUND_TXN_FEE,'I'," ",
						l_comm_amount,l_proc_data,l_schdl_fee,l_clt_amount,chr_g_bl_ccycode,
						l_clt_amount,p_mstclt_a,l_group_id,&int_retstat,l_debug_info_ptr))
			{
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}
					*int_p_retstat = int_retstat;

					APL_GOBACK_FAIL;
			}
			
			if(APL_SUCCESS == val_perTxnIV_DEAL(l_client,MUTUALFUND_TXN_FEE,'I',l_proc_data,
												chr_g_bl_upto_dt,&count,&int_retstat,l_debug_info_ptr))
			{
					count_no = count;
					printf("count_no :|%d|",count_no);
			}
						
			if(count_no)
			{
				if(APL_SUCCESS == val_MF_IV_DEAL_UPDATE(l_client,MUTUALFUND_TXN_FEE,'I',
								" ",l_proc_data,l_comm_amount,l_clt_amount,chr_g_bl_ccycode,
								l_clt_amount,p_mstclt_a,l_group_id,&int_retstat,l_debug_info_ptr))
								
				printf("Successfully updated into IV_DEAL");
			}
			else
			{
				if(APL_FAILURE == IV_Mod_NewIVTRANSAC(l_client,MUTUALFUND_TXN_FEE,'I'," ", 
						l_proc_data,l_comm_amount,l_clt_amount,chr_g_bl_ccycode, 
						l_clt_amount,p_mstclt_a,l_group_id,&int_retstat,l_debug_info_ptr))
				{
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
							CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
							CO_FreeErrLst(l_debug_info_ptr);
					}
						*int_p_retstat = int_retstat;
						APL_GOBACK_FAIL;
				}
			}
		}
		else if((!strcmp(chr_l_fee_basis,"NO. OF TRADES"))&&(!strcmp(chr_l_charge_basis,"NO. OF TRADES")))
		{
			/*EXEC SQL SELECT SUM(QTY) INTO :l_clt_qty FROM DL_DEAL
				GROUP BY CLIENT,MF_SEQNO 
			   	HAVING CLIENT=:l_client AND MF_SEQNO=:l_mf_seqno;*/

			
			/****** For Client Wise Allocation : Vinay : 29/02/2008 *********/
		
			EXEC SQL SELECT SUM(QTY) INTO :l_clt_qty
			         FROM DL_DEAL 
				 WHERE MF_SEQNO=:l_mf_seqno 
				 AND CLIENT=:l_client;

			IS_ANY_ORA_ERROR

                        EXEC SQL SELECT SUM(QTY) INTO :l_mf_qty
			         FROM DL_DEAL 
				 WHERE MF_SEQNO=:l_mf_seqno;


			IS_ANY_ORA_ERROR
			
			
			
			
			EXEC SQL SELECT PROC_DATA_VAL,GROUP_ID,SCHDL_FEE 
						INTO :l_proc_data,
							  :l_group_id,
							  :l_schdl_fee 
						FROM IV_CLIENTFEE
						WHERE CLIENT=:l_client
						AND SERVICE_CD=29;
			
			printf("sqlca.sqlcode:|%d|",sqlca.sqlcode);
			if(sqlca.sqlcode == 1403)
			{
				EXEC SQL SELECT PROC_DATA_VAL,GROUP_ID,SCHDL_FEE
					INTO :l_proc_data,
						  :l_group_id,
						  :l_schdl_fee
					FROM IV_CLIENTFEE
					WHERE CLIENT=(SELECT DEFAULT_FEECLT FROM IV_CLIENTSETUP WHERE CLIENT=:l_client)
					AND SERVICE_CD=29;
			}
			
			IS_ANY_ORA_ERROR
		
	               /* HB_IV_001 Bageshri : to get fee details of custody client*/

			printf("sqlca.sqlcode:|%d| chr_g_cb_code |%s|",sqlca.sqlcode,chr_g_cb_code);
			if(sqlca.sqlcode == 1403)
			{
				EXEC SQL SELECT PROC_DATA_VAL,GROUP_ID,SCHDL_FEE
					INTO :l_proc_data,
						  :l_group_id,
						  :l_schdl_fee
					FROM IV_CLIENTFEE
					WHERE CLIENT= :chr_g_cb_code
					AND SERVICE_CD=29;
			}
			
			IS_ANY_ORA_ERROR
				
			/* HB_IV_001 END */
			
			printf("\nl_clt_qty :|%lf|\n",l_clt_qty);
			printf("l_mf_qty :|%lf|\n",l_mf_qty);
			printf("tot_chg :|%lf|\n\n",tot_chg);

			if((l_clt_qty >0)&&(p_nnotrades >0))	
			l_comm_amount=((l_clt_qty*tot_chg)/(l_mf_qty));
			
			printf("\nEntering IV_Mod_NewIVTRANSFee:|%s||%lf||%lf|\n",l_client,l_comm_amount,l_clt_qty);

			if(APL_FAILURE == IV_Mod_NewIVTRANSFee(l_client,MUTUALFUND_TXN_FEE,'I'," ",
						l_comm_amount,l_proc_data,l_schdl_fee,l_clt_qty,chr_g_bl_ccycode,
						l_clt_qty,p_mstclt_a,l_group_id,&int_retstat,l_debug_info_ptr))
			{
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;

				APL_GOBACK_FAIL;
			}
			if(APL_SUCCESS == val_perTxnIV_DEAL(l_client,MUTUALFUND_TXN_FEE,'I',l_proc_data,
												chr_g_bl_upto_dt,&count,&int_retstat,l_debug_info_ptr))
			{
					count_no = count;
					printf("count_no :|%d|",count_no);
			}
						
			if(count_no)
			{
				if(APL_SUCCESS == val_MF_IV_DEAL_UPDATE(l_client,MUTUALFUND_TXN_FEE,'I',
								" ",l_proc_data,l_comm_amount,l_clt_qty,chr_g_bl_ccycode,
								l_clt_qty,p_mstclt_a,l_group_id,&int_retstat,l_debug_info_ptr))
								
				printf("Successfully updated into IV_DEAL");
			}
			else
			{
				if(APL_FAILURE == IV_Mod_NewIVTRANSAC(l_client,MUTUALFUND_TXN_FEE,'I'," ", 
						l_proc_data,l_comm_amount,l_clt_qty,chr_g_bl_ccycode, 
						l_clt_qty,p_mstclt_a,l_group_id,&int_retstat,l_debug_info_ptr))
				{
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
							CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
							CO_FreeErrLst(l_debug_info_ptr);
					}
						*int_p_retstat = int_retstat;
						APL_GOBACK_FAIL;
				}
			}
		}
	}

/*************************************************************************************************/

	if ( int_l_err_flg != IV_CRITCAL_ERROR_IND ) 
	{
		if((l_comm_amount == 0) && (l_nil_fees > 0.0))
		{
			int_retstat = IV_SUCCESS;
		#ifdef BILLDEBUG 
			fprintf(TestRep, "\nInserting Record into IV_SERVICE_CHRG\n");     
			fprintf(TestRep, "account: %s\n",chr_l_client_a);
			fprintf(TestRep, "nil fees: %lf",l_nil_fees);
		   fprintf(TestRep, " min fees adjust: %lf",0.0);
			fprintf(TestRep, " MAX fees adjust: %lf",0.0); 
			fprintf(TestRep, " l_comm_amount: %lf\n",0.0);
			fprintf(TestRep, "currency :%s\n",chr_g_bl_ccycode);
			fflush(TestRep);

		#endif 
		/*added incld_in_ann_min_fee by shruthi kumbla for ISKB_1901*/
			if(APL_FAILURE == IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,chr_l_client_a,l_nil_fees,0.0,0.0,0.0,
								chr_g_bl_ccycode,'I',p_serv_code,chr_l_mstacc_a,l_iv_client_serv_basis_structa.incld_in_ann_min_fee,&int_retstat,l_debug_info_ptr))
			{
				fprintf(fp,"Error in accessing table for client %s. Please contact support\n",chr_l_client_a);
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
			}
		}
		else if(l_comm_amount  > 0)
		{
			if(l_comm_amount < l_minimumfee)
				l_minimumfee_adj = l_minimumfee - l_comm_amount;
			else
				l_minimumfee_adj = 0;
			if((l_comm_amount > l_maximum_fee) && (l_maximum_fee != 0))
			{
				l_maximum_fee_adj = l_maximum_fee - tot_chg;
			}
			else
				l_maximum_fee_adj = 0;

			int_retstat = IV_SUCCESS;
		#ifdef BILLDEBUG 
         
			fprintf(TestRep, "\nInserting Record into IV_SERVICE_CHRG\n");     
			fprintf(TestRep, "account: %s\n",chr_l_client_a);
			fprintf(TestRep, "nil fees: %lf",0.0);
		   fprintf(TestRep, " min fees adjust: %lf",l_minimumfee_adj);
			fprintf(TestRep, " MAX fees adjust: %lf",l_maximum_fee_adj); 
			fprintf(TestRep, " l_comm_amount: %lf\n",l_comm_amount);
			fprintf(TestRep, "currency :%s\n",chr_g_bl_ccycode);
			fflush(TestRep);

		#endif 
			/*added incld_in_ann_min_fee by shruthi kumbla for ISKB_1901*/
			if(APL_FAILURE == MF_IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,chr_l_client_a,0.0, l_minimumfee_adj,
								l_maximum_fee_adj,l_comm_amount,chr_g_bl_ccycode,'I',p_serv_code,chr_l_mstacc_a,l_iv_client_serv_basis_structa.incld_in_ann_min_fee,
								&int_retstat,l_debug_info_ptr))
			{
				fprintf(fp,"Error in IV_Mod_IVSRVCHRGNew for client %s. Please contact support\n",chr_l_client_a);
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
				int_bl_err_level = 1;
			}
		}
		else if(p_serv_code != SETTALGEFEE)
		{
			int_retstat = IV_SUCCESS;
		#ifdef BILLDEBUG 
         
			fprintf(TestRep, "\nInserting Record into IV_SERVICE_CHRG\n");     
			fprintf(TestRep, "account: %s\n",chr_l_client_a);
			fprintf(TestRep, "nil fees: %lf",0.0);
		   fprintf(TestRep, " min fees adjust: %lf",l_minimumfee_adj);
			fprintf(TestRep, " MAX fees adjust: %lf",l_maximum_fee_adj); 
			fprintf(TestRep, " l_comm_amount: %lf\n",l_comm_amount);
			fprintf(TestRep, "currency :%s\n",chr_g_bl_ccycode);
			fflush(TestRep);

		#endif 
		/*added incld_in_ann_min_fee by shruthi kumbla for ISKB_1901*/
			if(APL_FAILURE == MF_IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,chr_l_client_a,0.0, l_minimumfee_adj,
								l_maximum_fee_adj,l_comm_amount,chr_g_bl_ccycode,'I',p_serv_code,
								chr_l_mstacc_a,l_iv_client_serv_basis_structa.incld_in_ann_min_fee,&int_retstat,l_debug_info_ptr))
			{
				fprintf(fp,"Error in IV_Mod_IVSRVCHRGNew for client %s. Please contact support\n",chr_l_client_a);
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
				int_bl_err_level = 1;
			}
		}
	} 

	if(*int_p_retstat != IV_SUCCESS)
	{
		APL_GOBACK_FAIL;
	}
	else
	{
		*int_p_retstat = IV_SUCCESS;
		APL_GOBACK_SUCCESS;
	}

RETURN_SUCCESS:
	APL_IF_DEBUG
	{
	      CO_ProcMonitor(APL_OUT_FILE,"Exiting Successfully Out Of IV_Proc_CalcMFTxnFee\n", NULL, NULL);
	}
	return APL_SUCCESS;

RETURN_FAILURE:
	APL_IF_DEBUG
	{
	      CO_ProcMonitor(APL_OUT_FILE,"Exiting Successfully Out Of IV_Proc_CalcMFTxnFee\n", NULL, NULL);
	}
	return APL_FAILURE;
}

/****************************************************************************************************/
int IV_Proc_CalcFeeInd(char chr_p_fee_type,long p_serv_code,double *p_nfeefacredit_indor,int *int_p_retstat,
		                     DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	char chr_l_fee_type,chr_l_bl_upto_dt[APL_DATE_LEN] = APL_NULL_STRING,chr_l_buf[BUFFER_LEN];
	char chr_l_uptodate_mm[3] = APL_NULL_STRING,chr_l_uptodate_yyyy[5] = APL_NULL_STRING;

	char *chr_l_last = (char *)NULL;

	int int_l_uptodate_year = 0,int_l_uptodate_mon = 0,tot_days_in_year = 365;

	double nfeefacredit_indor = 1;

	chr_l_fee_type = chr_p_fee_type;

		if ( chr_l_fee_type == 'P' ) 
		{
			if (( p_serv_code != VOLDISCOUNTFEE  )&& (p_serv_code != ADM_TXN_FEE_IND ) && ( p_serv_code != TAXFEE ))  
			{
				printf("int_g_diff:|%d|",int_g_diff);
				/* Change basis point factor 0.01 to 0.01%
				nfeefacredit_indor = (int_g_diff * 0.01)/365;
				*/

				strcpy(chr_l_bl_upto_dt,chr_g_bl_upto_dt);
				if(strlen(chr_l_bl_upto_dt)>10)
				{
								strcpy(chr_l_buf, strtok(chr_l_bl_upto_dt, " "));
						strtok_r(chr_l_buf, "/", &chr_l_last);
						strcpy(chr_l_uptodate_mm, strtok_r(NULL, "/", &chr_l_last));
						strcpy(chr_l_uptodate_yyyy, strtok_r(NULL, "/", &chr_l_last));
						int_l_uptodate_mon = atoi(chr_l_uptodate_mm);  
						int_l_uptodate_year = atoi(chr_l_uptodate_yyyy);
					// shailesh 12-06-2008  commenting the below condition as required by KB
					//if(int_l_uptodate_mon >3)
					//		int_l_uptodate_year++;
						if((int_l_uptodate_year % 4) == 0)
							tot_days_in_year = 366;

				}
				printf("tot_days_in_year:|%d|",tot_days_in_year);
               //shailesh 30-10-2007  ISKB_430
			   //Fee factor change as per requirement 
                 //fee factor separate for custodyfee(service code 1 ) and other fees          
			   if(p_serv_code == CUSTODYFEE || p_serv_code == SEBI_AUC)/*added SEBI AUC service code by shruthi kumbla for ISKB_1901*/
					nfeefacredit_indor = (int_g_diff * 0.0001)/tot_days_in_year;
				else
					nfeefacredit_indor =  0.0001;

				
				printf("\nfeefacredit_indor:|%lf|",nfeefacredit_indor);

			}
			else
			{
				nfeefacredit_indor = 0.01;	
			}
		}

		*p_nfeefacredit_indor = nfeefacredit_indor;

	*int_p_retstat = IV_SUCCESS;
	APL_GOBACK_SUCCESS;

RETURN_SUCCESS:
	APL_IF_DEBUG
	{
      CO_ProcMonitor(APL_OUT_FILE,"Exiting Successfully Out Of IV_Proc_CalcFeeInd\n", NULL, NULL);
	}
return APL_SUCCESS;
/* AIX - Warnings
RETURN_FAILURE:
	APL_IF_DEBUG
	{
	   CO_ProcMonitor(APL_OUT_FILE,"Exiting Unsuccessfully Out Of IV_Proc_CalcFeeInd\n", NULL, NULL);
	}
return APL_FAILURE;
*/
}

/******************************** added by siva.ganapathi for Annexurese ************************************
*
* Module Name         :		Billing
*
* File Name           : 	IV_BillGenFn_C.pc
*
* Description         :  	This function is used to calculate the comm_amt value and 
*							the same value is updated in the table DL_DEAL.
*							Column Name is "COMM_AMT".
*							The comm_amt is calculate for fee_basis/charge_basis == "NO. OF TRADES"/"NO. OF 	*							    TRADES" and also for fee_basis/charge_basis == "PORTFOLIO VALUE"/"NO. OF TRADES"
*		
*		Parametesr	 
*
* chr_l_fee_basis	   :	type of Fee basis 
* chr_l_charge_basis   :	type of Charge basis 
* chr_p_client		   :	client code
* chr_l_bill_dep	   :	the bill type of client i.e., Input basis or settlement basis
* chr_h_bl_upto_dt	   :	the bill date
* p_charge			   :	service charge
* no_of_trades		   :	the number of trades for each dependency
* chr_p_param_val	   :	contains the value of the dependency
* chr_p_param_code	   :	contains the dependency of the client
*
* Return Values        :                                                                               
*                                                                                                      
*		APL_SUCCESS  - SUCCESS                                                                              
*		APL_FAILURE  - FAILURE     
*
 *******************************************************************************************************/

int IV_Proc_CalcCommAmt(	char *chr_l_fee_basis,
							char *chr_l_charge_basis,
							char *chr_p_client,
							char *chr_l_bill_dep,
							char *chr_g_bl_upto_dt,
							double p_charge,
							double no_of_trades,
							char *chr_p_param_val,
							char *chr_p_param_code,
							char *p_cons_ind,
							int *int_p_retstat,
					        DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{	
	printf("\n In the function IV_Proc_CalcCommAmt ");

	double l_comm_amt;
	char *chr_newtdep_code;
	char *chr_newtdep_val;
	char *h_dl_client = NULL;
	char *chr_l_param_dep = NULL,*chr_l_param_val = NULL;
	char chr_h_txn_stmt1[2000],chr_h_txn_stmt2[2000],chr_txn_stmt1[2000];
	char chr_l_param_code[IV_PARAM_LEN],chr_prev_param_str_val[IV_PARAM_LEN];
	char str_comm_amt[20];
	char chr_h_bl_upto_dt[APL_DATE_LEN]; 	
	char *int_pos= NULL;
        /*Added by siva.ganapathi for ISKB_2323*/
	char *k;
	char l_grp_mem_val[20] ; /*ISKB_2323*/
	short i_grp_mem_val ; 
	char str_grp_mem_val[2000] = APL_NULL_STRING,str_grp_mem_tmp[2000] = APL_NULL_STRING;
	struct sqlca sqlca;
	int count = 1;

	k=(char *) calloc(IV_CLT_LEN,sizeof(char));

	h_dl_client = strtok_r(chr_p_client,";",&k);
	
	EXEC SQL BEGIN DECLARE SECTION;
	EXEC SQL VAR h_dl_client IS STRING;
	EXEC SQL VAR chr_h_bl_upto_dt  IS STRING;
	EXEC SQL VAR l_grp_mem_val  IS STRING;
	EXEC SQL END DECLARE SECTION;
	
	memset(chr_prev_param_str_val,APL_NULL_CHAR,IV_PARAM_LEN);
	memset(chr_l_param_code,APL_NULL_CHAR,IV_PARAM_LEN);
	memset(chr_txn_stmt1,APL_NULL_CHAR,2000);
	memset(chr_h_txn_stmt1, APL_NULL_CHAR, 2000); 
	memset(chr_h_txn_stmt2, APL_NULL_CHAR, 2000); 

	chr_newtdep_code = (char *) calloc(IV_PARAM_LEN,sizeof(char));
	chr_newtdep_val = (char *) calloc(IV_PARAM_LEN,sizeof(char));

	strcpy(h_dl_client,chr_p_client);
	strcpy(chr_prev_param_str_val,chr_p_param_val);
	strcpy(chr_l_param_code,chr_p_param_code);

	strcpy(str_grp_mem_val,APL_NULL_STRING);

	strcpy(chr_h_bl_upto_dt,chr_g_bl_upto_dt);
	strcpy(chr_h_bl_upto_dt,strtok_r(chr_h_bl_upto_dt," ",&int_pos));
	strcat(chr_h_bl_upto_dt," 23:59:59");

	
	printf("\n In IV_Proc_CalcCommAmt Fee basis				 ::: %s",chr_l_fee_basis);
	printf("\n In IV_Proc_CalcCommAmt Charge Basis		     ::: %s",chr_l_charge_basis);
	printf("\n In IV_Proc_CalcCommAmt clientcode		     ::: %s",h_dl_client);
	printf("\n In IV_Proc_CalcCommAmt chr_l_bill_dep		 ::: %s",chr_l_bill_dep);
	printf("\n In IV_Proc_CalcCommAmt billdate			     ::: %s",chr_h_bl_upto_dt);
	printf("\n In IV_Proc_CalcCommAmt chr_g_bl_upto_dt		 ::: %s",chr_g_bl_upto_dt);
	printf("\n In IV_Proc_CalcCommAmt srv_charge		     ::: %f",p_charge);
	printf("\n In IV_Proc_CalcCommAmt no_of_trades		     ::: %f",no_of_trades);
	//printf("\n In IV_Proc_CalcCommAmt chr_grp_ind is		 ::: %c",p_cons_ind);Changes done for AIX Migration
	printf("\n In IV_Proc_CalcCommAmt chr_grp_ind is		 ::: %c",*p_cons_ind);
	printf("\n In IV_Proc_CalcCommAmt chr_prev_param_str_val ::: %s",chr_prev_param_str_val);
	printf("\n In IV_Proc_CalcCommAmt chr_l_param_code       ::: %s",chr_l_param_code);
	
	l_comm_amt = p_charge/no_of_trades;

	printf("\n l_comm_amt is %f ",l_comm_amt);

	sprintf(str_comm_amt,"%f",l_comm_amt);
	
	if(strcmp(chr_l_fee_basis,"NO. OF TRADES") == 0 &&
	    strcmp(chr_l_charge_basis,"NO. OF TRADES") == 0)
	{			
				printf("chr_l_fee_basis /chr_l_charge_basis  ::::: NO. OF TRADES/NO. OF TRADES");
				
				// Variable "chr_h_txn_stmt1" contains query to update the dl_deal table
				// Variable "chr_h_txn_stmt2" comtains query to update the dl_hisdeal table
				// Variable "chr_txn_stmt1" contains conditions, these conditions will be added to both "chr_h_txn_stmt1","chr_h_txn_stmt2"

				strcpy(chr_h_txn_stmt1,"UPDATE DL_DEAL  SET COMM_AMT = ");
				strcat(chr_h_txn_stmt1,str_comm_amt);
				strcat(chr_h_txn_stmt1," WHERE CLIENT = '");
				strcat(chr_h_txn_stmt1,h_dl_client);
				strcat(chr_h_txn_stmt1,"' AND DEAL_STAT != 'DU' ");

				strcpy(chr_h_txn_stmt2,"UPDATE DL_HISDEAL  SET COMM_AMT = ");
				strcat(chr_h_txn_stmt2,str_comm_amt);
				strcat(chr_h_txn_stmt2," WHERE CLIENT = '");
				strcat(chr_h_txn_stmt2,h_dl_client);
				strcat(chr_h_txn_stmt2,"' AND DEAL_STAT != 'DD'  ");

				
				if(!strcmp(chr_l_bill_dep,"INP"))
				{
					strcat(chr_h_txn_stmt1," AND (DATEOF_INPUT <= '");
					strcat(chr_h_txn_stmt1,chr_h_bl_upto_dt);
					strcat(chr_h_txn_stmt1,"')");
					strcat(chr_h_txn_stmt2," AND (DATEOF_INPUT <= '");
					strcat(chr_h_txn_stmt2,chr_h_bl_upto_dt);
					strcat(chr_h_txn_stmt2,"') ");
				}
				else
				{
					strcat(chr_h_txn_stmt1," AND (INSTRUMENT_DT IS NOT NULL AND INSTRUMENT_DT<= '");
					strcat(chr_h_txn_stmt1,chr_h_bl_upto_dt);
					strcat(chr_h_txn_stmt1,"')");
					strcat(chr_h_txn_stmt2," AND (INSTRUMENT_DT IS NOT NULL AND INSTRUMENT_DT<= '");
					strcat(chr_h_txn_stmt2,chr_g_bl_upto_dt);
					strcat(chr_h_txn_stmt2,"') ");
				}
				
				printf("updation statement for dl_deal before adding the coditions %s",chr_h_txn_stmt1);
				printf("updation statement dl_hisdeal before adding the coditions %s",chr_h_txn_stmt2);

				strcat(chr_txn_stmt1," AND DL_CLASS NOT IN ('28','19','20','90','26','59','56') AND ");
				strcat(chr_txn_stmt1," ( PAY_MODE IS NULL OR PAY_MODE !='N') AND ");
				strcat(chr_txn_stmt1," MF_SEQNO IS NULL AND ");
				strcat(chr_txn_stmt1," CHECKER IS NOT NULL AND INFORMATON IS NULL AND (DATEOFBILLING IS NULL OR ");
				strcat(chr_txn_stmt1," (AMEND_COUNT !=NUMBER_A AND");
				strcat(chr_txn_stmt1," DATEOFBILLING != '");
				strcat(chr_txn_stmt1,chr_h_bl_upto_dt);
				strcat(chr_txn_stmt1,"') OR DATEOFBILLING = '");
				strcat(chr_txn_stmt1,chr_g_bl_upto_dt);
				strcat(chr_txn_stmt1,"') ");

				printf("\n conactenated statement before adding dynamic part %s",chr_txn_stmt1);
				/*Modified by siva.ganapathi for ISKB_2323*/

				if(p_cons_ind == 'I')
				//if(p_cons_ind[0] == 'I')/*commented for UAT issue fix comm amt not getting updated properly*/
				{
				chr_l_param_dep = strtok_r(chr_l_param_code,";",&chr_newtdep_code);
				chr_l_param_val = strtok_r(chr_prev_param_str_val,";",&chr_newtdep_val);

				while((chr_l_param_dep != (char *)NULL) && (strlen(chr_l_param_dep) > 0))
				{
						if(strcmp(chr_l_param_dep,"LOCATION") == 0)
						{
								strcat(chr_txn_stmt1, " AND LOCATION_CD = '");
								strcat(chr_txn_stmt1, chr_l_param_val);
								strcat(chr_txn_stmt1, "'");
						}
						else if(strcmp(chr_l_param_dep,"PRODUCT") == 0)
						{
								strcat(chr_txn_stmt1, " AND INSTR_CODE IN (SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE INSTR_SUB_TYPE = '");
								strcat(chr_txn_stmt1, chr_l_param_val);
								strcat(chr_txn_stmt1, "' )");
						}
						else if(strcmp(chr_l_param_dep,"DEALCD") == 0)
						{
								strcat(chr_txn_stmt1, " AND DEAL_CD = '");
								strcat(chr_txn_stmt1, chr_l_param_val);
								strcat(chr_txn_stmt1, "'");
						}
						else if(strcmp(chr_l_param_dep,"DEALTYPE") == 0)
						{
								strcat(chr_txn_stmt1, " AND DL_CLASS = '");
								strcat(chr_txn_stmt1, chr_l_param_val);
								strcat(chr_txn_stmt1, "'");
						}
						if(chr_newtdep_code == (char *)NULL)
							strcpy(chr_l_param_dep, APL_NULL_STRING);
						else
							chr_l_param_dep = strtok_r(NULL,";",&chr_newtdep_code); 

						if(chr_l_param_val == (char *)NULL)
							strcpy(chr_l_param_val, APL_NULL_STRING);
						else
							chr_l_param_val = strtok_r(NULL,";",&chr_newtdep_val); 
				}
				}
				 /*Added by siva.ganapathi for ISKB_2323*/

				if(p_cons_ind == 'G')
				//if(p_cons_ind[0] == 'G')/*commented for UAT issue fix comm amt not getting updated properly*/
				{
					printf("\n Siva In Group ");	
						
					chr_l_param_dep = strtok_r(chr_l_param_code,";",&chr_newtdep_code);
					chr_l_param_val = strtok_r(chr_prev_param_str_val,";",&chr_newtdep_val);

					while((chr_l_param_dep != (char *)NULL) && (strlen(chr_l_param_dep) > 0))
					{
						EXEC SQL DECLARE grp_mem_val CURSOR FOR SELECT GROUP_MEM_VAL 
																FROM  IV_DATA_GRP WHERE 			  
																PARAMETER_CD=:chr_l_param_dep
	  															AND GROUP_PRM_CD = :chr_l_param_val;
						printf("\n sqlerror when getting data from IV_DATA_GRP is %d",sqlca.sqlcode);

						EXEC SQL OPEN grp_mem_val ;

						for(;;)
						{
							EXEC SQL FETCH grp_mem_val into :l_grp_mem_val:i_grp_mem_val;
							printf("\n error after fetching cursor sqlca.sqlcode is %d",sqlca.sqlcode);
							printf("\n Status of l_grp_mem_val is %d",i_grp_mem_val);

							if(sqlca.sqlcode == 1403)
								break;
							if(count == 1)
							strcat(str_grp_mem_tmp,"'");
							else 
							strcat(str_grp_mem_tmp,",'");
							strcat(str_grp_mem_tmp,l_grp_mem_val);
							strcat(str_grp_mem_tmp,"'");
							count++ ;
						}
			
						strcpy(str_grp_mem_val,"(");
						strcat(str_grp_mem_val,str_grp_mem_tmp);
						strcat(str_grp_mem_val,")");

						printf("\n str_grp_mem_val is %s",str_grp_mem_val);
						printf("\n chr_l_param_dep is %s",chr_l_param_dep);
						if(strcmp(chr_l_param_dep,"LOCATION")==0)
						{
							strcat(chr_txn_stmt1, " AND LOCATION_CD IN ");
							strcat(chr_txn_stmt1,str_grp_mem_val);
						}					
						else if(strcmp(chr_l_param_dep,"PRODUCT")==0)
						{
							strcat(chr_txn_stmt1, " AND INSTR_CODE IN (SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE INSTR_SUB_TYPE IN ");
							strcat(chr_txn_stmt1,str_grp_mem_val);
							strcat(chr_txn_stmt1, " )");
						}
						else if(strcmp(chr_l_param_dep,"DEALCD")==0)
						{
							strcat(chr_txn_stmt1, " AND DEAL_CD IN ");
							strcat(chr_txn_stmt1,str_grp_mem_val);
						}
						else if(strcmp(chr_l_param_dep,"DEALTYPE")==0)
						{
							strcat(chr_txn_stmt1, " AND DL_CLASS IN ");
							strcat(chr_txn_stmt1,str_grp_mem_val);
						}
						else if(strcmp(chr_l_param_dep,"INSTRUMENT")==0)
						{
							strcat(chr_txn_stmt1, " AND INSTR_CODE IN ");
							strcat(chr_txn_stmt1,str_grp_mem_val);
						}
						else if(strcmp(chr_l_param_dep,"INSTR_SUB_TYPE")==0)
						{	
							strcat(chr_txn_stmt1, " AND INSTR_CODE IN (SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE INSTR_SUB_TYPE IN ");
							strcat(chr_txn_stmt1,str_grp_mem_val);
							strcat(chr_txn_stmt1, " )");
						}

						if(chr_newtdep_code == (char *)NULL)
							strcpy(chr_l_param_dep, APL_NULL_STRING);
						else
							chr_l_param_dep = strtok_r(NULL,";",&chr_newtdep_code); 

						if(chr_l_param_val == (char *)NULL)
							strcpy(chr_l_param_val, APL_NULL_STRING);
						else
							chr_l_param_val = strtok_r(NULL,";",&chr_newtdep_val); 

						count = 1 ;
						strcpy(str_grp_mem_tmp,APL_NULL_STRING);
						strcpy(str_grp_mem_val,APL_NULL_STRING);
					}
				}
				
				printf("\n conactenated statement after adding dynamic part %s",chr_txn_stmt1);
				
				strcat(chr_h_txn_stmt1,chr_txn_stmt1);
				strcat(chr_h_txn_stmt2,chr_txn_stmt1);

				printf("\n NO. OF TRADES/NO. OF TRADES :: query to update the dl_deal table is %s",chr_h_txn_stmt1);

				printf("\n NO. OF TRADES/NO. OF TRADES  :: query to update the dl_hisdeal table is %s",chr_h_txn_stmt2);

	}
	else if( strcmp(chr_l_fee_basis,"PORTFOLIO VALUE") == 0 &&
			strcmp(chr_l_charge_basis,"NO. OF TRADES") == 0)
	{
		printf("chr_l_fee_basis /chr_l_charge_basis  ::::: PORTFOLIO VALUE/NO. OF TRADES");
		
			strcpy(chr_h_txn_stmt1,"UPDATE DL_DEAL  SET COMM_AMT = ");
			strcat(chr_h_txn_stmt1,str_comm_amt);
			strcat(chr_h_txn_stmt1," WHERE IDENTIY_NO IN ( ");
			
			strcat(chr_h_txn_stmt1, " SELECT a.IDENTIY_NO ");
			strcat(chr_h_txn_stmt1, "FROM DL_DEAL a,MT_INSTRUMENT b "); 
			strcat(chr_h_txn_stmt1, "WHERE  a.CLIENT = '");
			strcat(chr_h_txn_stmt1, h_dl_client);
			strcat(chr_h_txn_stmt1, "' AND    a.INSTR_CODE  = b.INSTR_CODE "); 
			strcat(chr_h_txn_stmt1, " AND a.DEAL_STAT != 'DU' ");	
			strcat(chr_h_txn_stmt1, " AND ( a.PAY_MODE != 'N' OR a.PAY_MODE IS NULL ) ");	/*added by siva.ganapathi for ISKB_2295*/

			if(strcmp(chr_l_param_code, "PRODUCT;LOCATION") == 0)
			{
			strcat(chr_h_txn_stmt1, "AND b.INSTR_SUB_TYPE||a.LOCATION_CD NOT IN ");
			strcat(chr_h_txn_stmt1, "(SELECT DISTINCT d.INSTR_SUB_TYPE||c.LOCATION_CD ");
			strcat(chr_h_txn_stmt1, "FROM DL_SAFEK c, MT_INSTRUMENT d ");
			strcat(chr_h_txn_stmt1, "WHERE c.CLIENT = '");
			strcat(chr_h_txn_stmt1, h_dl_client);
			strcat(chr_h_txn_stmt1, "' AND c.INSTR_CODE = d.INSTR_CODE) ");
			}
			else if (strcmp(chr_l_param_code, "LOCATION;PRODUCT") == 0)
			{
			strcat(chr_h_txn_stmt1, "AND a.LOCATION_CD||b.INSTR_SUB_TYPE NOT IN ");
			strcat(chr_h_txn_stmt1, "(SELECT DISTINCT c.LOCATION_CD||d.INSTR_SUB_TYPE ");
			strcat(chr_h_txn_stmt1, "FROM DL_SAFEK c, MT_INSTRUMENT d ");
			strcat(chr_h_txn_stmt1, "WHERE c.CLIENT = '");
			strcat(chr_h_txn_stmt1, h_dl_client);
			strcat(chr_h_txn_stmt1, "' AND c.INSTR_CODE = d.INSTR_CODE) ");
			}
			else if (strcmp(chr_l_param_code, "PRODUCT") == 0)
			{
			strcat(chr_h_txn_stmt1, "AND b.INSTR_SUB_TYPE NOT IN ");
			strcat(chr_h_txn_stmt1, "(SELECT DISTINCT d.INSTR_SUB_TYPE ");
			strcat(chr_h_txn_stmt1, "FROM DL_SAFEK c, MT_INSTRUMENT d ");
			strcat(chr_h_txn_stmt1, "WHERE c.CLIENT = '");
			strcat(chr_h_txn_stmt1, h_dl_client);
			strcat(chr_h_txn_stmt1, "' AND c.INSTR_CODE = d.INSTR_CODE) ");
			}
			else if (strcmp(chr_l_param_code, "LOCATION") == 0)
			{
			strcat(chr_h_txn_stmt1, "AND a.LOCATION_CD NOT IN ");
			strcat(chr_h_txn_stmt1, "(SELECT DISTINCT c.LOCATION_CD ");
			strcat(chr_h_txn_stmt1, "FROM DL_SAFEK c, MT_INSTRUMENT d ");
			strcat(chr_h_txn_stmt1, "WHERE c.CLIENT = '");
			strcat(chr_h_txn_stmt1, h_dl_client);
			strcat(chr_h_txn_stmt1, "' AND c.INSTR_CODE = d.INSTR_CODE) ");
			}
			

			strcpy(chr_h_txn_stmt2,"UPDATE DL_HISDEAL  SET COMM_AMT = ");
			strcat(chr_h_txn_stmt2,str_comm_amt);
			strcat(chr_h_txn_stmt2," WHERE IDENTIY_NO IN ( ");

			strcat(chr_h_txn_stmt2, " SELECT DISTINCT 0 AS SUM_SAFEK, a.INSTR_CODE, a.LOCATION_CD,  ");
			strcat(chr_h_txn_stmt2, "RTRIM(b.INSTR_SUB_TYPE), b.CURRENCY_CD ");
			strcat(chr_h_txn_stmt2, "FROM DL_HISDEAL a,MT_INSTRUMENT b "); 
			strcat(chr_h_txn_stmt2, "WHERE  a.CLIENT = '");
			strcat(chr_h_txn_stmt2, h_dl_client);
			strcat(chr_h_txn_stmt2, "' AND    a.INSTR_CODE  = b.INSTR_CODE "); 
			strcat(chr_h_txn_stmt2, " AND a.DEAL_STAT !='DD' ");	
			strcat(chr_h_txn_stmt2, " AND ( a.PAY_MODE !='N' OR a.PAY_MODE IS NULL ) ");	
	
			if(strcmp(chr_l_param_code, "PRODUCT;LOCATION") == 0)
			{
				strcat(chr_h_txn_stmt2, "AND b.INSTR_SUB_TYPE||a.LOCATION_CD NOT IN ");
				strcat(chr_h_txn_stmt2, "(SELECT DISTINCT d.INSTR_SUB_TYPE||c.LOCATION_CD ");
				strcat(chr_h_txn_stmt2, "FROM DL_SAFEK c, MT_INSTRUMENT d ");
				strcat(chr_h_txn_stmt2, "WHERE c.CLIENT = '");
				strcat(chr_h_txn_stmt2, h_dl_client);
				strcat(chr_h_txn_stmt2, "' AND c.INSTR_CODE = d.INSTR_CODE) ");
			}
			else if (strcmp(chr_l_param_code, "LOCATION;PRODUCT") == 0)
			{
				strcat(chr_h_txn_stmt2, "AND a.LOCATION_CD||b.INSTR_SUB_TYPE NOT IN ");
				strcat(chr_h_txn_stmt2, "(SELECT DISTINCT c.LOCATION_CD||d.INSTR_SUB_TYPE ");
				strcat(chr_h_txn_stmt2, "FROM DL_SAFEK c, MT_INSTRUMENT d ");
				strcat(chr_h_txn_stmt2, "WHERE c.CLIENT = '");
				strcat(chr_h_txn_stmt2, h_dl_client);
				strcat(chr_h_txn_stmt2, "' AND c.INSTR_CODE = d.INSTR_CODE) ");
			}
			else if (strcmp(chr_l_param_code, "PRODUCT") == 0)
			{
				strcat(chr_h_txn_stmt2, "AND b.INSTR_SUB_TYPE NOT IN ");
				strcat(chr_h_txn_stmt2, "(SELECT DISTINCT d.INSTR_SUB_TYPE ");
				strcat(chr_h_txn_stmt2, "FROM DL_SAFEK c, MT_INSTRUMENT d ");
				strcat(chr_h_txn_stmt2, "WHERE c.CLIENT = '");
				strcat(chr_h_txn_stmt2, h_dl_client);
				strcat(chr_h_txn_stmt2, "' AND c.INSTR_CODE = d.INSTR_CODE) ");
			}
			else if (strcmp(chr_l_param_code, "LOCATION") == 0)
			{
				strcat(chr_h_txn_stmt2, "AND a.LOCATION_CD NOT IN ");
				strcat(chr_h_txn_stmt2, "(SELECT DISTINCT c.LOCATION_CD ");
				strcat(chr_h_txn_stmt2, "FROM DL_SAFEK c, MT_INSTRUMENT d ");
				strcat(chr_h_txn_stmt2, "WHERE c.CLIENT = '");
				strcat(chr_h_txn_stmt2, h_dl_client);
				strcat(chr_h_txn_stmt2, "' AND c.INSTR_CODE = d.INSTR_CODE) ");
			}

			printf("\n PORTFOLIO VALUE/NO. OF TRADES :: query to update the dl_deal beforeadding the conditions %s ",chr_h_txn_stmt1);
			printf("\n PORTFOLIO VALUE/NO. OF TRADES :: query to update the dl_hisdeal beforeadding the conditions %s ",chr_h_txn_stmt2);

		
			if(strcmp(chr_l_param_code, "PRODUCT;LOCATION") == 0)
			{	
				printf("chr_l_param_val for PRODUCT;LOCATION is %s",chr_l_param_val);

				chr_l_param_val = strtok_r(chr_prev_param_str_val,";",&chr_newtdep_val);

				printf("\n INSTR_SUB_TYPE for PRODUCT;LOCATION is %s",chr_l_param_val);

				strcat(chr_txn_stmt1, " AND INSTR_CODE IN (SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE INSTR_SUB_TYPE = '");
				strcat(chr_txn_stmt1, chr_l_param_val);
				strcat(chr_txn_stmt1, "' )");
				
				chr_l_param_val = strtok_r(NULL,";",&chr_newtdep_val); 

				printf("\n LOCATION_CD for PRODUCT;LOCATION is %s",chr_l_param_val);
	
				strcat(chr_txn_stmt1, " AND LOCATION_CD = '");
				strcat(chr_txn_stmt1, chr_l_param_val);
				strcat(chr_txn_stmt1, "'");
			}
			else if (strcmp(chr_l_param_code, "LOCATION;PRODUCT") == 0)
			{	
				printf("chr_l_param_val for LOCATION;PRODUCT is %s",chr_l_param_val);

				chr_l_param_val = strtok_r(chr_prev_param_str_val,";",&chr_newtdep_val);
				
				printf("\n LOCATION_CD for LOCATION;PRODUCT is %s",chr_l_param_val);
							
				strcat(chr_txn_stmt1, " AND LOCATION_CD = '");
				strcat(chr_txn_stmt1, chr_l_param_val);
				strcat(chr_txn_stmt1, "'");
				
				chr_l_param_val = strtok_r(NULL,";",&chr_newtdep_val); 
				
				printf("\n INSTR_SUB_TYPE for LOCATION;PRODUCT is %s",chr_l_param_val);

				strcat(chr_txn_stmt1, " AND INSTR_CODE IN (SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE INSTR_SUB_TYPE = '");
				strcat(chr_txn_stmt1, chr_l_param_val);
				strcat(chr_txn_stmt1, "' )");
			}
			else if (strcmp(chr_l_param_code, "PRODUCT") == 0)
			{	
				printf("chr_l_param_val for PRODUCT is %s",chr_l_param_val);
				
				chr_l_param_val = strtok_r(chr_prev_param_str_val,";",&chr_newtdep_val);
				
				printf("\n INSTR_SUB_TYPE for PRODUCT is %s",chr_l_param_val);

				strcat(chr_txn_stmt1, " AND INSTR_CODE IN (SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE INSTR_SUB_TYPE = '");
				strcat(chr_txn_stmt1, chr_l_param_val);
				strcat(chr_txn_stmt1, "' )");

			}
			else if (strcmp(chr_l_param_code, "LOCATION") == 0)
			{	
				printf("chr_l_param_val for LOCATION is %s",chr_l_param_val);

				chr_l_param_val = strtok_r(chr_prev_param_str_val,";",&chr_newtdep_val);
				
				printf("\n LOCATION_CD for LOCATION is %s",chr_l_param_val);
							
				strcat(chr_txn_stmt1, " AND LOCATION_CD = '");
				strcat(chr_txn_stmt1, chr_l_param_val);
				strcat(chr_txn_stmt1, "'");

			}
			
			strcat(chr_txn_stmt1," ) ");
			
			printf("conditions that will append to both queries %s",chr_txn_stmt1);

			strcat(chr_h_txn_stmt1,chr_txn_stmt1);
			strcat(chr_h_txn_stmt2,chr_txn_stmt1);
			
			printf("\n PORTFOLIO VALUE/NO. OF TRADES :: query to update the dl_deal table is %s",chr_h_txn_stmt1);

			printf("\n PORTFOLIO VALUE/NO. OF TRADES  :: query to update the dl_hisdeal table is %s",chr_h_txn_stmt2);
	}

	EXEC SQL EXECUTE IMMEDIATE :chr_h_txn_stmt1;
	printf("sqlca.sqlcode=%d\n",sqlca.sqlcode);

	 if(sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
	 {	
		printf("\n failed while updating the dl_deal table");
        printf("sqlca.sqlcode=%d\n",sqlca.sqlcode);
        APL_GOBACK_FAIL
      }

	 EXEC SQL EXECUTE IMMEDIATE :chr_h_txn_stmt2;

	 printf("sqlca.sqlcode=%d\n",sqlca.sqlcode);

	 if(sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
	 {	
		printf("\n failed while updating the dl_hisdeal table");
		printf("sqlca.sqlcode=%d\n",sqlca.sqlcode);

        APL_GOBACK_FAIL
      }

	*int_p_retstat = IV_SUCCESS;
	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS:
		APL_IF_DEBUG
		{
		  CO_ProcMonitor(APL_OUT_FILE,"Exiting Successfully Out Of IV_Proc_CalcCommAmt\n", NULL, NULL);
		}
	return APL_SUCCESS;

	RETURN_FAILURE:
		APL_IF_DEBUG
		{
		   CO_ProcMonitor(APL_OUT_FILE,"Exiting Unsuccessfully Out Of IV_Proc_CalcCommAmt\n", NULL, NULL);
		}
	return APL_FAILURE;
}

/******************************** added by rahul for treps charges ************************************
*
* Module Name         :		Billing
*
* File Name           : 	IV_BillGenFn_C.pc
*
* Description         :  	This function is used to calculate the comm_amt value and 
*							the same value is updated in the table CUSTODY_TREPS_CHARGES.
*							Column Name is "COMM_AMT".
*							The comm_amt is calculate for fee_basis/charge_basis == "NO. OF TRADES"/"NO. OF *
*		
*		Parametesr	 
*
* chr_l_fee_basis	   :	type of Fee basis 
* chr_l_charge_basis   :	type of Charge basis 
* chr_p_client		   :	client code
* chr_h_bl_upto_dt	   :	the bill date
* p_charge			   :	service charge
* no_of_trades		   :	the number of trades for each dependency
* chr_p_param_val	   :	contains the value of the dependency
* chr_p_param_code	   :	contains the dependency of the client
*
* Return Values        :                                                                               
*                                                                                                      
*		APL_SUCCESS  - SUCCESS                                                                              
*		APL_FAILURE  - FAILURE     
*
 *******************************************************************************************************/

int IV_Proc_CalcCommAmtForTreps(	char *chr_l_fee_basis,
							char *chr_l_charge_basis,
							char *chr_p_client,
							char *chr_g_bl_upto_dt,
							double p_charge,
							double no_of_trades,
							char *chr_p_param_val,
							char *chr_p_param_code,
							char *p_cons_ind,
							int *int_p_retstat,
					        DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{	
	
	double l_comm_amt;
	char *chr_newtdep_code;
	char *chr_newtdep_val;
	char *h_dl_client = NULL;
	char *chr_l_param_dep = NULL,*chr_l_param_val = NULL;
	char chr_h_treps_stmt[2000],chr_h_treps_stmt1[2000];     /*treps charge by rahul */
	char chr_l_param_code[IV_PARAM_LEN],chr_prev_param_str_val[IV_PARAM_LEN];
	char str_comm_amt[20];
	char chr_h_bl_upto_dt[APL_DATE_LEN]; 	
	char *int_pos= NULL;
        /*Added by siva.ganapathi for ISKB_2323*/
	char *k;
	char l_grp_mem_val[20] ; /*ISKB_2323*/
	short i_grp_mem_val ; 
	char str_grp_mem_val[2000] = APL_NULL_STRING,str_grp_mem_tmp[2000] = APL_NULL_STRING;
	struct sqlca sqlca;
	int count = 1;

	k=(char *) calloc(IV_CLT_LEN,sizeof(char));

	h_dl_client = strtok_r(chr_p_client,";",&k);
	
	EXEC SQL BEGIN DECLARE SECTION;
	EXEC SQL VAR h_dl_client IS STRING;
	EXEC SQL VAR chr_h_bl_upto_dt  IS STRING;
	EXEC SQL VAR l_grp_mem_val  IS STRING;
	EXEC SQL END DECLARE SECTION;
	
	memset(chr_prev_param_str_val,APL_NULL_CHAR,IV_PARAM_LEN);
	memset(chr_l_param_code,APL_NULL_CHAR,IV_PARAM_LEN);
	memset(chr_h_treps_stmt, APL_NULL_CHAR, 2000); 
	memset(chr_h_treps_stmt1, APL_NULL_CHAR, 2000);

	chr_newtdep_code = (char *) calloc(IV_PARAM_LEN,sizeof(char));
	chr_newtdep_val = (char *) calloc(IV_PARAM_LEN,sizeof(char));

	strcpy(h_dl_client,chr_p_client);
	strcpy(chr_prev_param_str_val,chr_p_param_val);
	strcpy(chr_l_param_code,chr_p_param_code);

	strcpy(str_grp_mem_val,APL_NULL_STRING);

	strcpy(chr_h_bl_upto_dt,chr_g_bl_upto_dt);
	strcpy(chr_h_bl_upto_dt,strtok_r(chr_h_bl_upto_dt," ",&int_pos));
	strcat(chr_h_bl_upto_dt," 23:59:59");

	
	printf("\n In RAHUL :: Fee basis				 ::: %s",chr_l_fee_basis);
	printf("\n In RAHUL ::		                     ::: %s",chr_l_charge_basis);
	printf("\n In IV_Proc_CalcCommAmtForTreps clientcode		     ::: %s",h_dl_client);
	printf("\n In IV_Proc_CalcCommAmtForTreps billdate			     ::: %s",chr_h_bl_upto_dt);
	
	
	printf("\n In IV_Proc_CalcCommAmt Fee basis                 ::: %s",chr_l_fee_basis);
    printf("\n In IV_Proc_CalcCommAmt Charge Basis             ::: %s",chr_l_charge_basis);
    printf("\n In IV_Proc_CalcCommAmt clientcode             ::: %s",h_dl_client);
    printf("\n In IV_Proc_CalcCommAmt billdate                 ::: %s",chr_h_bl_upto_dt);
    printf("\n In IV_Proc_CalcCommAmt chr_g_bl_upto_dt         ::: %s",chr_g_bl_upto_dt);
    printf("\n In IV_Proc_CalcCommAmt srv_charge             ::: %f",p_charge);
    printf("\n In IV_Proc_CalcCommAmt no_of_trades             ::: %f",no_of_trades);
    printf("\n In IV_Proc_CalcCommAmt chr_grp_ind is         ::: %c",*p_cons_ind);
    printf("\n In IV_Proc_CalcCommAmt chr_prev_param_str_val ::: %s",chr_prev_param_str_val);
    printf("\n In IV_Proc_CalcCommAmt chr_l_param_code       ::: %s",chr_l_param_code);
	
	l_comm_amt = p_charge/no_of_trades;

	printf("\n l_comm_amt is %f ",l_comm_amt);

	sprintf(str_comm_amt,"%f",l_comm_amt);
	
	if(strcmp(chr_l_fee_basis,"NO. OF TRADES") == 0 &&
	    strcmp(chr_l_charge_basis,"NO. OF TRADES") == 0)
	{			
				printf("chr_l_fee_basis /chr_l_charge_basis  ::::: NO. OF TRADES/NO. OF TRADES");
				// Variable "chr_h_treps_stmt" contains query to update the CUSTODY_TREPS_CHARGES table
				// Variable "chr_h_treps_stmt1" comtains query to update the CUSTODY_TREPS_CHARGES table			  
			   strcpy(chr_h_treps_stmt,"UPDATE CUSTODY_TREPS_CHARGES  SET COMM_AMT = ");
			   strcat(chr_h_treps_stmt,str_comm_amt);
			   strcat(chr_h_treps_stmt," WHERE CLIENT = '");
			   strcat(chr_h_treps_stmt,h_dl_client);
	           strcat(chr_h_treps_stmt,"' AND ");
	           strcat(chr_h_treps_stmt," DATEOFBILLING IS not null");
			   
			   printf("\n conactenated statement before adding dynamic part %s",chr_h_treps_stmt1);
			   
			   if(p_cons_ind == 'I')
				{
				chr_l_param_dep = strtok_r(chr_l_param_code,";",&chr_newtdep_code);
				chr_l_param_val = strtok_r(chr_prev_param_str_val,";",&chr_newtdep_val);

				while((chr_l_param_dep != (char *)NULL) && (strlen(chr_l_param_dep) > 0))
				{
						if(strcmp(chr_l_param_dep,"LOCATION") == 0)
						{
								strcat(chr_h_treps_stmt1, " AND LOCATION_CD = '");
								strcat(chr_h_treps_stmt1, chr_l_param_val);
								strcat(chr_h_treps_stmt1, "'");
						}
						else if(strcmp(chr_l_param_dep,"PRODUCT") == 0)
						{
								strcat(chr_h_treps_stmt1, " AND INSTR_CODE = '");
								strcat(chr_h_treps_stmt1, chr_l_param_val);
								strcat(chr_h_treps_stmt1, "' )");
						}
						else if(strcmp(chr_l_param_dep,"DEALCD") == 0)
						{
								strcat(chr_h_treps_stmt1, " AND DEAL_CD = '");
								strcat(chr_h_treps_stmt1, chr_l_param_val);
								strcat(chr_h_treps_stmt1, "'");
						}
						else if(strcmp(chr_l_param_dep,"DEALTYPE") == 0)
						{
								strcat(chr_h_treps_stmt1, " AND DL_CLASS = '");
								strcat(chr_h_treps_stmt1, chr_l_param_val);
								strcat(chr_h_treps_stmt1, "'");
						}
						if(chr_newtdep_code == (char *)NULL)
							strcpy(chr_l_param_dep, APL_NULL_STRING);
						else
							chr_l_param_dep = strtok_r(NULL,";",&chr_newtdep_code); 

						if(chr_l_param_val == (char *)NULL)
							strcpy(chr_l_param_val, APL_NULL_STRING);
						else
							chr_l_param_val = strtok_r(NULL,";",&chr_newtdep_val); 
				}
				}
				if(p_cons_ind == 'G')
				{
					printf("\n Siva In Group ");	
						
					chr_l_param_dep = strtok_r(chr_l_param_code,";",&chr_newtdep_code);
					chr_l_param_val = strtok_r(chr_prev_param_str_val,";",&chr_newtdep_val);

					while((chr_l_param_dep != (char *)NULL) && (strlen(chr_l_param_dep) > 0))
					{
						EXEC SQL DECLARE grp_mem_val CURSOR FOR SELECT GROUP_MEM_VAL 
																FROM  IV_DATA_GRP WHERE 			  
																PARAMETER_CD=:chr_l_param_dep
	  															AND GROUP_PRM_CD = :chr_l_param_val;
						printf("\n sqlerror when getting data from IV_DATA_GRP is %d",sqlca.sqlcode);

						EXEC SQL OPEN grp_mem_val ;

						for(;;)
						{
							EXEC SQL FETCH grp_mem_val into :l_grp_mem_val:i_grp_mem_val;
							printf("\n error after fetching cursor sqlca.sqlcode is %d",sqlca.sqlcode);
							printf("\n Status of l_grp_mem_val is %d",i_grp_mem_val);

							if(sqlca.sqlcode == 1403)
								break;
							if(count == 1)
							strcat(str_grp_mem_tmp,"'");
							else 
							strcat(str_grp_mem_tmp,",'");
							strcat(str_grp_mem_tmp,l_grp_mem_val);
							strcat(str_grp_mem_tmp,"'");
							count++ ;
						}
			
						strcpy(str_grp_mem_val,"(");
						strcat(str_grp_mem_val,str_grp_mem_tmp);
						strcat(str_grp_mem_val,")");

						printf("\n str_grp_mem_val is %s",str_grp_mem_val);
						printf("\n chr_l_param_dep is %s",chr_l_param_dep);
						if(strcmp(chr_l_param_dep,"LOCATION")==0)
						{
							strcat(chr_h_treps_stmt1, " AND LOCATION_CD IN ");
							strcat(chr_h_treps_stmt1,str_grp_mem_val);
						}					
						else if(strcmp(chr_l_param_dep,"PRODUCT")==0)
						{
							strcat(chr_h_treps_stmt1, " AND INSTR_CODE IN ");
							strcat(chr_h_treps_stmt1,str_grp_mem_val);
							strcat(chr_h_treps_stmt1, " )");
						}
						else if(strcmp(chr_l_param_dep,"DEALCD")==0)
						{
							strcat(chr_h_treps_stmt1, " AND DEAL_CD IN ");
							strcat(chr_h_treps_stmt1,str_grp_mem_val);
						}
						else if(strcmp(chr_l_param_dep,"DEALTYPE")==0)
						{
							strcat(chr_h_treps_stmt1, " AND DL_CLASS IN ");
							strcat(chr_h_treps_stmt1,str_grp_mem_val);
						}
						else if(strcmp(chr_l_param_dep,"INSTRUMENT")==0)
						{
							strcat(chr_h_treps_stmt1, " AND INSTR_CODE IN ");
							strcat(chr_h_treps_stmt1,str_grp_mem_val);
						}
						else if(strcmp(chr_l_param_dep,"INSTR_SUB_TYPE")==0)
						{	
							strcat(chr_h_treps_stmt1, " AND INSTR_CODE IN (SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE INSTR_SUB_TYPE IN ");
							strcat(chr_h_treps_stmt1,str_grp_mem_val);
							strcat(chr_h_treps_stmt1, " )");
						}

						if(chr_newtdep_code == (char *)NULL)
							strcpy(chr_l_param_dep, APL_NULL_STRING);
						else
							chr_l_param_dep = strtok_r(NULL,";",&chr_newtdep_code); 

						if(chr_l_param_val == (char *)NULL)
							strcpy(chr_l_param_val, APL_NULL_STRING);
						else
							chr_l_param_val = strtok_r(NULL,";",&chr_newtdep_val); 

						count = 1 ;
						strcpy(str_grp_mem_tmp,APL_NULL_STRING);
						strcpy(str_grp_mem_val,APL_NULL_STRING);
					}
				}
				
				printf("\n conactenated statement after adding dynamic part %s",chr_h_treps_stmt1);
				strcat(chr_h_treps_stmt,chr_h_treps_stmt1);
				printf("\n NO. OF TRADES/NO. OF TRADES :: query to update the CUSTODY_TREPS_CHARGES table is %s",chr_h_treps_stmt);
				
	}
	  
	 Alert("rahul16754");
	  EXEC SQL EXECUTE IMMEDIATE :chr_h_treps_stmt;
	printf("sqlca.sqlcode=%d\n",sqlca.sqlcode);

	 if(sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
	 {	
		printf("\n failed while updating the CUSTODY_TREPS_CHARGES table");
        printf("sqlca.sqlcode=%d\n",sqlca.sqlcode);
        APL_GOBACK_FAIL
      }
     
	*int_p_retstat = IV_SUCCESS;
	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS:
		APL_IF_DEBUG
		{
		  CO_ProcMonitor(APL_OUT_FILE,"Exiting Successfully Out Of IV_Proc_CalcCommAmtForTreps\n", NULL, NULL);
		}
	return APL_SUCCESS;

	RETURN_FAILURE:
		APL_IF_DEBUG
		{
		   CO_ProcMonitor(APL_OUT_FILE,"Exiting Unsuccessfully Out Of IV_Proc_CalcCommAmtForTreps\n", NULL, NULL);
		}
	return APL_FAILURE;
}

/*Added by siva.ganapathi for Annexures on  02/06/2009 */

/* This Function used to calculate the depositary charges for each transaction for Fees/Charge Basis is NO OF TRADES/NO OF TRADES and NO.OF DAYS/NO.OF DAYS
   Tha calculate value is updated into the table "IV_DEAL_OTHFEE"
   While updatation, first we will check the record is already available in the table using Client code and Identiy no.
   If the record is availble then the calculated value is updated into the table for that corresponding record
   If the record is not availble then the calculated value and the corresponding details such as Client,Identiy_no,dateof billing are inserted into the table.We will insert the value 0 for the column LATE_TRANS_FEE
*/

/** UAT fix -- char* p_cons_ind changed to char p_cons_ind **/
int IV_Proc_CalcDepoCommAmt(	char *chr_l_fee_basis,
								char *chr_l_charge_basis,
								char *chr_p_client,
								char *chr_g_bl_prv_dt,
								char *chr_g_bl_upto_dt,
								double p_charge,
  							    	double no_of_trades,
								char *chr_p_param_val,
								char *chr_p_param_code,
								char p_cons_ind,		
								int *int_p_retstat,
						        DEBUG_INFO_STRUCT_H **l_debug_info_ptr
							)
{	
	printf("\n ***** Inside IV_Proc_CalcDepoCommAmt ***** ");
	
	int l_rec_count=0;
	char *h_dl_client= NULL;
	char *chr_l_param_dep = NULL,*chr_l_param_val = NULL;

	char chr_l_param_code[IV_PARAM_LEN],chr_prev_param_str_val[IV_PARAM_LEN],chr_h_depo_stmt1[3000] = APL_NULL_STRING,chr_h_depo_stmt2[1500] = APL_NULL_STRING,chr_h_depo_stmt3[2500] = APL_NULL_STRING;
	double h_depo_comm_amt,l_late_trans_fee;
	char h_str_depo_comm_amt[20],l_str_late_trans_fee[20];
	char h_identiy_no[20];
	short i_identiy_no=0,i_comm_amt=0,i_chrg_qty=0;
	struct sqlca sqlca;
	char *chr_newtdep_code;
	char *chr_newtdep_val;
	char chr_h_bl_upto_dt[APL_DATE_LEN];
	char *int_pos= NULL;
        /*Added by siva.ganapathi for ISKB_2323*/

	char *k;
	char l_grp_mem_val[20] ; /*ISKB_2323*/
	short i_grp_mem_val ; 
	char str_grp_mem_val[2000] = APL_NULL_STRING,str_grp_mem_tmp[2000] = APL_NULL_STRING;
	int count = 1;

	k=(char *) calloc(IV_CLT_LEN,sizeof(char));

	h_dl_client = strtok_r(chr_p_client,";",&k);

	IV_DEAL_OTHFEE_STRUCT_H l_iv_deal_othfee_struct_h;
	IV_DEAL_OTHFEE_STRUCT_I l_iv_deal_othfee_struct_i = {0, 0, 0, 0, 0, 0};
	
	EXEC SQL BEGIN DECLARE SECTION;

	EXEC SQL VAR h_dl_client IS STRING;
	EXEC SQL VAR chr_h_depo_stmt1 	IS STRING;
	EXEC SQL VAR chr_h_depo_stmt2 	IS STRING;
	EXEC SQL VAR chr_h_depo_stmt3 	IS STRING;
	EXEC SQL VAR chr_h_bl_upto_dt  IS STRING;
	EXEC SQL VAR l_grp_mem_val  IS STRING;
	EXEC SQL END DECLARE SECTION;

         //memset(h_dl_client,APL_NULL_CHAR,sizeof(h_dl_client));
	memset(chr_h_depo_stmt1, APL_NULL_CHAR, 3000); 
	memset(chr_h_depo_stmt2, APL_NULL_CHAR, 1500); 
	memset(chr_h_depo_stmt3, APL_NULL_CHAR, 2500); 
	memset(chr_prev_param_str_val,APL_NULL_CHAR,IV_PARAM_LEN);
	memset(chr_l_param_code,APL_NULL_CHAR,IV_PARAM_LEN);
	memset(&l_iv_deal_othfee_struct_h,NULL,sizeof(IV_DEAL_OTHFEE_STRUCT_H));


	chr_newtdep_code = (char *) calloc(IV_PARAM_LEN,sizeof(char));
	chr_newtdep_val = (char *) calloc(IV_PARAM_LEN,sizeof(char));

	strcpy(chr_prev_param_str_val,chr_p_param_val);
	strcpy(chr_l_param_code,chr_p_param_code);
	strcpy(h_dl_client,chr_p_client);
	
	
	strcpy(chr_h_bl_upto_dt,chr_g_bl_upto_dt);
	strcpy(chr_h_bl_upto_dt,strtok_r(chr_h_bl_upto_dt," ",&int_pos));
	strcat(chr_h_bl_upto_dt," 23:59:59");


	printf("\n In IV_Proc_CalcDepoCommAmt Fee basis is 		:::: %s	",chr_l_fee_basis);
	printf("\n In IV_Proc_CalcDepoCommAmt charge basis is   :::: %s	",chr_l_charge_basis);
	printf("\n In IV_Proc_CalcDepoCommAmt Client is 		:::: %s	",h_dl_client);
	printf("\n In IV_Proc_CalcDepoCommAmt chr_g_bl_prv_dt is   :::: %s	",chr_g_bl_prv_dt);
	printf("\n In IV_Proc_CalcDepoCommAmt billdate is 	    :::: %s	",chr_h_bl_upto_dt);
	printf("\n In IV_Proc_CalcDepoCommAmt p_charge is 	    :::: %f	",p_charge);
	printf("\n In IV_Proc_CalcDepoCommAmt no_of_trades is 	:::: %f	",no_of_trades);
	printf("\n In IV_Proc_CalcDepoCommAmt paramcode is 		:::: %s	",chr_l_param_code);
	printf("\n In IV_Proc_CalcDepoCommAmt chr_prev_param_str_val is  :::: %s ",chr_prev_param_str_val);
	
	fflush(stdout);

	if(no_of_trades > 0) 
		h_depo_comm_amt = p_charge / no_of_trades ;
  			
	sprintf(h_str_depo_comm_amt,"%f",h_depo_comm_amt);

	printf("\n h_depo_comm_amt valus is %f",h_depo_comm_amt);

	if(strcmp(chr_l_fee_basis,"NO. OF TRADES") == 0 &&
				strcmp(chr_l_charge_basis,"NO. OF TRADES") == 0)
	{
		printf("Inside NO. OF TRADES/NO. OF TRADES for IV_Proc_CalcDepoCommAmt() function ");
		
		strcpy(chr_h_depo_stmt1,"INSERT INTO IV_DEAL_OTHFEE (");
		strcat(chr_h_depo_stmt1,"SELECT b.CLIENT, b.IDENTIY_NO,s.B_UPTO_DATE,'");/*Modified by Siva.ganapathi for ISKB_2323 on 25/06/2009*/
		strcat(chr_h_depo_stmt1,h_str_depo_comm_amt);
		strcat(chr_h_depo_stmt1,"','0','D' ");
		strcat(chr_h_depo_stmt1," FROM MT_INSTRUMENT a, DL_DEAL b,SYS_IVCONTROLPARAM s");/*Modified by Siva.ganapathi for ISKB_2323 on 25/06/2009*/
		strcat(chr_h_depo_stmt1," WHERE b.CLIENT = '");
		strcat(chr_h_depo_stmt1,h_dl_client);
		strcat(chr_h_depo_stmt1,"'  AND b.INSTR_CODE = a.INSTR_CODE ");
		strcat(chr_h_depo_stmt1," AND b.DEAL_STAT !='DU' ");  

		strcat(chr_h_depo_stmt2," UNION ALL SELECT b.CLIENT, b.IDENTIY_NO,s.B_UPTO_DATE,'");/*Modified by Siva.ganapathi for ISKB_2323 on 25/06/2009*/
		strcat(chr_h_depo_stmt2,h_str_depo_comm_amt);
		strcat(chr_h_depo_stmt2,"','0','D' ");
		strcat(chr_h_depo_stmt2," FROM MT_INSTRUMENT a, DL_HISDEAL b,SYS_IVCONTROLPARAM s");/*Modified by Siva.ganapathi for ISKB_2323 on 25/06/2009*/
		strcat(chr_h_depo_stmt2," WHERE b.CLIENT = '");
		strcat(chr_h_depo_stmt2,h_dl_client);
		strcat(chr_h_depo_stmt2,"' AND b.INSTR_CODE = a.INSTR_CODE "); 
		strcat(chr_h_depo_stmt2," AND b.DEAL_STAT !='DD' ");  

		strcat(chr_h_depo_stmt3," AND b.DL_CLASS NOT IN ('18','19','20')  AND "); 
		strcat(chr_h_depo_stmt3," ( b.PAY_MODE IS NULL OR b.PAY_MODE !='N' ) AND "); /*added by siva.ganapathi for ISKB_2295*/
		strcat(chr_h_depo_stmt3," b.CHECKER IS NOT NULL AND b.DATEOFBILLING IS NOT NULL AND ");
		strcat(chr_h_depo_stmt3," (b.INSTRUMENT_DT IS NOT NULL AND b.INSTRUMENT_DT > '");
		strcat(chr_h_depo_stmt3,chr_g_bl_prv_dt);
		strcat(chr_h_depo_stmt3,"' AND b.INSTRUMENT_DT <= '");
		strcat(chr_h_depo_stmt3,chr_h_bl_upto_dt);
		strcat(chr_h_depo_stmt3,"')");

		if(p_cons_ind == 'I')
		//Commented for UAT fix if(p_cons_ind[0] == 'I')
		{
		chr_l_param_dep = strtok_r(chr_l_param_code,";",&chr_newtdep_code);
		chr_l_param_val = strtok_r(chr_prev_param_str_val,";",&chr_newtdep_val);

		while((chr_l_param_dep != (char *)NULL) && (strlen(chr_l_param_dep) > 0))
		{
			if(strcmp(chr_l_param_dep,"LOCATION") == 0)
			{	
					strcat(chr_h_depo_stmt3, " AND b.LOCATION_CD = '");
					strcat(chr_h_depo_stmt3, chr_l_param_val);
					strcat(chr_h_depo_stmt3, "'");
			}
			else if(strcmp(chr_l_param_dep,"DEALTYPE") == 0)
			{
				    printf("\n chr_l_param_val value is %s",chr_l_param_val);
					strcat(chr_h_depo_stmt3, " AND b.DL_CLASS = '");
					strcat(chr_h_depo_stmt3, chr_l_param_val);
					strcat(chr_h_depo_stmt3, "'");
			}
			else if(strcmp(chr_l_param_dep,"DEALCD") == 0) 
			{
				printf("\n chr_l_param_val value is %s",chr_l_param_val);
					strcat(chr_h_depo_stmt3, " AND b.DEAL_CD = '");
					strcat(chr_h_depo_stmt3, chr_l_param_val);
					strcat(chr_h_depo_stmt3, "'");
			}
			
			if(chr_l_param_dep == (char *)NULL)
				strcpy(chr_l_param_dep, APL_NULL_STRING);
			else
				chr_l_param_dep = strtok_r(NULL,";",&chr_newtdep_code); 

			if(chr_l_param_val == (char *)NULL)
				strcpy(chr_l_param_val, APL_NULL_STRING);
			else
				chr_l_param_val = strtok_r(NULL,";",&chr_newtdep_val); 
		}
		}
                /*added by siva.ganapathi for ISKB_2323*/
		if(p_cons_ind == 'G')
		// Commented for UAT fix if(p_cons_ind[0] == 'G')
		{
			printf("\n Siva In Group ");	
						
			chr_l_param_dep = strtok_r(chr_l_param_code,";",&chr_newtdep_code);
			chr_l_param_val = strtok_r(chr_prev_param_str_val,";",&chr_newtdep_val);

				while((chr_l_param_dep != (char *)NULL) && (strlen(chr_l_param_dep) > 0))
				{
						EXEC SQL DECLARE grp_mem_val_depo CURSOR FOR SELECT GROUP_MEM_VAL 
									FROM  IV_DATA_GRP WHERE 			  
									PARAMETER_CD=:chr_l_param_dep
									AND GROUP_PRM_CD = :chr_l_param_val;
						printf("\n sqlerror when getting data from IV_DATA_GRP is %d",sqlca.sqlcode);
						
								EXEC SQL OPEN grp_mem_val_depo ;

							for(;;)
							{
								EXEC SQL FETCH grp_mem_val_depo into :l_grp_mem_val:i_grp_mem_val;
								printf("\n error after fetching cursor sqlca.sqlcode is %d",sqlca.sqlcode);
								printf("\n Status of l_grp_mem_val is %d",i_grp_mem_val);

								if(sqlca.sqlcode == 1403)
									break;
								if(count == 1)
								strcat(str_grp_mem_tmp,"'");
								else 
								strcat(str_grp_mem_tmp,",'");
								strcat(str_grp_mem_tmp,l_grp_mem_val);
								strcat(str_grp_mem_tmp,"'");
								count++ ;
							}

							strcpy(str_grp_mem_val,"(");
							strcat(str_grp_mem_val,str_grp_mem_tmp);
							strcat(str_grp_mem_val,")");

							printf("\n str_grp_mem_val is %s",str_grp_mem_val);
							printf("\n chr_l_param_dep is %s",chr_l_param_dep);
							if(strcmp(chr_l_param_dep,"LOCATION")==0)
							{
								strcat(chr_h_depo_stmt3, " AND b.LOCATION_CD IN ");
								strcat(chr_h_depo_stmt3,str_grp_mem_val);
							}					
							else if(strcmp(chr_l_param_dep,"PRODUCT")==0)
							{
								strcat(chr_h_depo_stmt3, " AND b.INSTR_CODE IN (SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE INSTR_SUB_TYPE IN ");
								strcat(chr_h_depo_stmt3,str_grp_mem_val);
								strcat(chr_h_depo_stmt3, " )");
							}
							else if(strcmp(chr_l_param_dep,"DEALCD")==0)
							{
								strcat(chr_h_depo_stmt3, " AND b.DEAL_CD IN ");
								strcat(chr_h_depo_stmt3,str_grp_mem_val);
							}
							else if(strcmp(chr_l_param_dep,"DEALTYPE")==0)
							{
								strcat(chr_h_depo_stmt3, " AND b.DL_CLASS IN ");
								strcat(chr_h_depo_stmt3,str_grp_mem_val);
							}
							else if(strcmp(chr_l_param_dep,"INSTRUMENT")==0)
							{
								strcat(chr_h_depo_stmt3, " AND b.INSTR_CODE IN ");
								strcat(chr_h_depo_stmt3,str_grp_mem_val);
							}
							else if(strcmp(chr_l_param_dep,"INSTR_SUB_TYPE")==0)
							{	
								strcat(chr_h_depo_stmt3, " AND b.INSTR_CODE IN (SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE INSTR_SUB_TYPE IN ");
								strcat(chr_h_depo_stmt3,str_grp_mem_val);
								strcat(chr_h_depo_stmt3, " )");
							}

							if(chr_newtdep_code == (char *)NULL)
								strcpy(chr_l_param_dep, APL_NULL_STRING);
							else
								chr_l_param_dep = strtok_r(NULL,";",&chr_newtdep_code); 

							if(chr_l_param_val == (char *)NULL)
								strcpy(chr_l_param_val, APL_NULL_STRING);
							else
								chr_l_param_val = strtok_r(NULL,";",&chr_newtdep_val); 

							count = 1 ;
							strcpy(str_grp_mem_tmp,APL_NULL_STRING);
							strcpy(str_grp_mem_val,APL_NULL_STRING);
						}	
				}
	
		printf("\n cnditions that will appened to both queries is %s",chr_h_depo_stmt3);

		strcat(chr_h_depo_stmt1,chr_h_depo_stmt3);
		strcat(chr_h_depo_stmt2,chr_h_depo_stmt3);

		
		printf("\n chr_h_depo_stmt1 after adding conditions is %s",chr_h_depo_stmt1);
		printf("\n chr_h_depo_stmt2 after adding conditions is %s",chr_h_depo_stmt2);

		strcat(chr_h_depo_stmt1,chr_h_depo_stmt2);
		strcat(chr_h_depo_stmt1,")");

		printf("\n final query for is %s",chr_h_depo_stmt1);

		EXEC SQL EXECUTE IMMEDIATE :chr_h_depo_stmt1;
		printf("\n after insertion into IV_DEAL_OTHFEE sqlca.sqlcode=%d\n",sqlca.sqlcode);
	
		if(sqlca.sqlcode != 0 )
					APL_GOBACK_FAIL;


		fflush(stdout);

		/*EXEC SQL PREPARE S FROM :chr_h_depo_stmt1;

		EXEC SQL DECLARE depoamt_cur CURSOR FOR S;

		EXEC SQL OPEN depoamt_cur;

		if(sqlca.sqlcode < 0)
		{	
			printf("oracle error after opening the cursor is %d",sqlca.sqlcode);
			*int_p_retstat = IV_CRITCAL_ERROR_IND;
		}

		IS_ANY_ORA_ERROR;

		for( ; ; )
		{		
				memset(h_identiy_no, APL_NULL_CHAR, 20); 

				EXEC SQL FETCH trcnt_cur 
						 INTO  :h_identiy_no:i_identiy_no;
				
				if(sqlca.sqlcode == 1403)
				{
					printf("\n No Records found");
					break;
				}
				
				printf("\n h_identiy_no is %s",h_identiy_no);

				EXEC SQL SELECT COUNT(*) INTO :l_rec_count
						 FROM IV_DEAL_OTHFEE
						 WHERE CLIENT = :h_dl_client AND 
							   IDENTIY_NO = :h_identiy_no ;

				printf("\n **1111** sqlca.sqlcode is %d",sqlca.sqlcode);
				
				printf("\n l_rec_count is %d",l_rec_count);

				if(l_rec_count != 0 )
				{
					printf("\n Identiy no. already exists in the table ");
					printf("\n Identiy no. %s",h_identiy_no);
					// updating the DEPO_TRANS_FEE and DEPO_CHRG_IND in the table 
					EXEC SQL UPDATE IV_DEAL_OTHFEE
								    SET    DEPO_TRANS_FEE = :h_depo_comm_amt,
											DEPO_CHRG_IND = 'Y'
									WHERE  CLIENT     = :h_dl_client AND
										   IDENTIY_NO = :h_identiy_no ;
					
					printf("\n **1112** sqlca.sqlcode is %d",sqlca.sqlcode);
				}
				else
				{
					printf("\n Inserting record into the table IV_DEAL_OTHFEE ");	

					printf("\n h_dl_client is %s",h_dl_client);
						
					fflush(stdout);
						
					strcpy(l_iv_deal_othfee_struct_h.h_client,h_dl_client);
					strcpy(l_iv_deal_othfee_struct_h.h_identiy_no,h_identiy_no);
					strcpy(l_iv_deal_othfee_struct_h.h_bill_date,chr_g_bl_upto_dt);
					
					//sprintf(h_str_depo_comm_amt,"%f",h_depo_comm_amt);
					l_iv_deal_othfee_struct_h.h_depo_trans_fee = h_depo_comm_amt ;
					
					l_late_trans_fee = 0.0;
					//sprintf(l_str_late_trans_fee,"%f",l_late_trans_fee);

					l_iv_deal_othfee_struct_h.h_late_trans_fee = l_late_trans_fee;
					
					strcpy(l_iv_deal_othfee_struct_h.h_late_trans_ind,"N");
					strcpy(l_iv_deal_othfee_struct_h.h_depo_chrg_ind,"Y");
					
					printf("\n Before inserting the record into IV_DEAL_OTHFEE");
					printf("\n l_iv_deal_othfee_struct_h.h_client is %s and indicator is %d ",l_iv_deal_othfee_struct_h.h_client,l_iv_deal_othfee_struct_i.i_client);
					printf("\n l_iv_deal_othfee_struct_h.h_identiy_no is %s and indicator is %d",l_iv_deal_othfee_struct_h.h_identiy_no,l_iv_deal_othfee_struct_i.i_identiy_no);
					printf("\n l_iv_deal_othfee_struct_h.h_bill_date is %s and indicator is %d",l_iv_deal_othfee_struct_h.h_bill_date,l_iv_deal_othfee_struct_i.i_bill_date);
					printf("\n l_iv_deal_othfee_struct_h.h_depo_trans_fee is %f and indicator is %d ",l_iv_deal_othfee_struct_h.h_depo_trans_fee,l_iv_deal_othfee_struct_i.i_depo_trans_fee);
					printf("\n l_iv_deal_othfee_struct_h.h_late_trans_fee is %f and indicator is %d ",l_iv_deal_othfee_struct_h.h_late_trans_fee,l_iv_deal_othfee_struct_i.i_late_trans_fee);
					printf("\n l_iv_deal_othfee_struct_h.h_late_trans_ind is %s and indicator is %d ",l_iv_deal_othfee_struct_h.h_late_trans_ind,l_iv_deal_othfee_struct_i.i_late_trans_ind);
					printf("\n l_iv_deal_othfee_struct_h.h_depo_chrg_ind is %s and indicator is %d ",l_iv_deal_othfee_struct_h.h_depo_chrg_ind,l_iv_deal_othfee_struct_i.i_depo_chrg_ind);			

					EXEC SQL INSERT INTO
						IV_DEAL_OTHFEE VALUES (:l_iv_deal_othfee_struct_h:l_iv_deal_othfee_struct_i);
					
					printf("\n **1113** sqlca.sqlcode is %d",sqlca.sqlcode);

					IS_ANY_ORA_ERROR
				}
		}

		EXEC SQL CLOSE depoamt_cur;*/

	}
	else if(strcmp(chr_l_fee_basis,"NO. OF DAYS") == 0 &&
		strcmp(chr_l_charge_basis,"NO. OF DAYS") == 0)
	{
		printf("\n Inside  IV_Proc_CalcDepoCommAmt() function where Fees/charge basis is NO. OF DAYS/NO. OF DAYS");	
		
		strcpy(chr_h_depo_stmt1,"INSERT INTO IV_DEAL_OTHFEE (");
		strcat(chr_h_depo_stmt1,"SELECT b.CLIENT, b.IDENTIY_NO,s.B_UPTO_DATE,'");/*Modified by Siva.ganapathi for ISKB_2323 on 25/06/2009*/
        strcat(chr_h_depo_stmt1,h_str_depo_comm_amt);
		strcat(chr_h_depo_stmt1,"','0','D' ");
		strcat(chr_h_depo_stmt1," FROM MT_INSTRUMENT a, DL_DEAL b,SYS_IVCONTROLPARAM s");/*Modified by Siva.ganapathi for ISKB_2323 on 25/06/2009*/
		strcat(chr_h_depo_stmt1," WHERE b.CLIENT = '");
		strcat(chr_h_depo_stmt1,h_dl_client);
		strcat(chr_h_depo_stmt1,"'  AND b.INSTR_CODE = a.INSTR_CODE ");
		strcat(chr_h_depo_stmt1," AND b.DEAL_STAT !='DU' ");  

		strcat(chr_h_depo_stmt2," UNION ALL SELECT b.CLIENT, b.IDENTIY_NO,s.B_UPTO_DATE,'");/*Modified by Siva.ganapathi for ISKB_2323 on 25/06/2009*/
		strcat(chr_h_depo_stmt2,h_str_depo_comm_amt);
		strcat(chr_h_depo_stmt2,"','0','D' ");
		strcat(chr_h_depo_stmt2," FROM MT_INSTRUMENT a, DL_HISDEAL b,SYS_IVCONTROLPARAM s");/*Modified by Siva.ganapathi for ISKB_2323 on 25/06/2009*/
		strcat(chr_h_depo_stmt2," WHERE b.CLIENT = '");
		strcat(chr_h_depo_stmt2,h_dl_client);
		strcat(chr_h_depo_stmt2,"' AND b.INSTR_CODE = a.INSTR_CODE "); 
		strcat(chr_h_depo_stmt2," AND b.DEAL_STAT !='DD' ");  

		strcat(chr_h_depo_stmt3," AND b.DL_CLASS NOT IN ('18','19','20')  AND "); 
		strcat(chr_h_depo_stmt3," ( b.PAY_MODE IS NULL OR b.PAY_MODE !='N' ) AND "); /*added by siva.ganapathi for ISKB_2295*/
		strcat(chr_h_depo_stmt3," b.CHECKER IS NOT NULL AND b.DATEOFBILLING IS NOT NULL AND ");
		strcat(chr_h_depo_stmt3," (b.INSTRUMENT_DT IS NOT NULL AND b.INSTRUMENT_DT > '");
		strcat(chr_h_depo_stmt3,chr_g_bl_prv_dt);
		strcat(chr_h_depo_stmt3,"' AND b.INSTRUMENT_DT <= '");
		strcat(chr_h_depo_stmt3,chr_h_bl_upto_dt);
		strcat(chr_h_depo_stmt3,"')");

		strcat(chr_h_depo_stmt1,chr_h_depo_stmt3);
		strcat(chr_h_depo_stmt2,chr_h_depo_stmt3);

		printf("Query to update the deal table is %s",chr_h_depo_stmt1);
		printf("Query to update the dl_his table is %s",chr_h_depo_stmt2);

		strcat(chr_h_depo_stmt1,chr_h_depo_stmt2);
		strcat(chr_h_depo_stmt1,")");

		printf("\n Final query is  %s",chr_h_depo_stmt1);
		
		EXEC SQL EXECUTE IMMEDIATE :chr_h_depo_stmt1;

		printf("\n after insertion into IV_DEAL_OTHFEE sqlca.sqlcode=%d\n",sqlca.sqlcode);
	
		fflush(stdout);


		/*EXEC SQL PREPARE S FROM :chr_h_depo_stmt1;

		EXEC SQL DECLARE depoamt_cur1 CURSOR FOR S;

		EXEC SQL OPEN depoamt_cur1;

		if(sqlca.sqlcode < 0)
		{	
			printf("oracle error after opening the cursor is %d",sqlca.sqlcode);
			*int_p_retstat = IV_CRITCAL_ERROR_IND;
		}

		IS_ANY_ORA_ERROR;

		for( ; ; )
		{		
				memset(h_identiy_no, APL_NULL_CHAR, 20); 

				EXEC SQL FETCH trcnt_cur 
						 INTO  :h_identiy_no:i_identiy_no;
				
				if(sqlca.sqlcode == 1403)
				{
					printf("\n No Records found");
					break;
				}
				
				printf("\n h_identiy_no is %s",h_identiy_no);

				EXEC SQL SELECT COUNT(*) INTO :l_rec_count
						 FROM IV_DEAL_OTHFEE
						 WHERE CLIENT = :h_dl_client AND 
							   IDENTIY_NO = :h_identiy_no ;

				printf("\n **1111** sqlca.sqlcode is %d",sqlca.sqlcode);
				
				printf("\n l_rec_count is %d",l_rec_count);

				if(l_rec_count != 0 )
				{
					printf("\n Identiy no. already exists in the table ");
					printf("\n Identiy no. %s",h_identiy_no);
					// updating the depo_amt in the table 
					EXEC SQL UPDATE IV_DEAL_OTHFEE
								    SET    DEPO_TRANS_FEE = :h_depo_comm_amt,
										    DEPO_CHRG_IND = 'Y'
									WHERE  CLIENT     = :h_dl_client AND
										   IDENTIY_NO = :h_identiy_no ;
					
					printf("\n **1112** sqlca.sqlcode is %d",sqlca.sqlcode);
				}
				else
				{					
					fflush(stdout);
						
					strcpy(l_iv_deal_othfee_struct_h.h_client,h_dl_client);
					strcpy(l_iv_deal_othfee_struct_h.h_identiy_no,h_identiy_no);
					strcpy(l_iv_deal_othfee_struct_h.h_bill_date,chr_g_bl_upto_dt);
					
					//sprintf(h_str_depo_comm_amt,"%f",h_depo_comm_amt);
					l_iv_deal_othfee_struct_h.h_depo_trans_fee=h_depo_comm_amt ;
					
					l_late_trans_fee = 0.0;
					//sprintf(l_str_late_trans_fee,"%f",l_late_trans_fee);

					l_iv_deal_othfee_struct_h.h_late_trans_fee = l_late_trans_fee;
					
					strcpy(l_iv_deal_othfee_struct_h.h_late_trans_ind,"N");
					strcpy(l_iv_deal_othfee_struct_h.h_depo_chrg_ind,"Y");
					
					printf("\n Before inserting the record into IV_DEAL_OTHFEE");
					printf("\n l_iv_deal_othfee_struct_h.h_client is %s",l_iv_deal_othfee_struct_h.h_client);
					printf("\n l_iv_deal_othfee_struct_h.h_identiy_no is %s",l_iv_deal_othfee_struct_h.h_identiy_no);
					printf("\n l_iv_deal_othfee_struct_h.h_bill_dateis %s",l_iv_deal_othfee_struct_h.h_bill_date);
					printf("\n l_iv_deal_othfee_struct_h.h_depo_trans_fee is %f ",l_iv_deal_othfee_struct_h.h_depo_trans_fee);
					printf("\n l_iv_deal_othfee_struct_h.h_late_trans_fee is %f ",l_iv_deal_othfee_struct_h.h_late_trans_fee);
					printf("\n l_iv_deal_othfee_struct_h.h_late_trans_ind is %s ",l_iv_deal_othfee_struct_h.h_late_trans_ind);
					printf("\n l_iv_deal_othfee_struct_h.h_depo_chrg_ind is %s ",l_iv_deal_othfee_struct_h.h_depo_chrg_ind);
					
					EXEC SQL INSERT INTO
						IV_DEAL_OTHFEE VALUES (:l_iv_deal_othfee_struct_h:l_iv_deal_othfee_struct_i);
					
					printf("\n **1113** sqlca.sqlcode is %d",sqlca.sqlcode);

					IS_ANY_ORA_ERROR
				}
		}

		EXEC SQL CLOSE depoamt_cur1;*/
	}

	*int_p_retstat = IV_SUCCESS;
	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS:
		APL_IF_DEBUG
		{
		  CO_ProcMonitor(APL_OUT_FILE,"\n Exiting Successfully Out Of IV_Proc_CalcDepoCommAmt() \n", NULL, NULL);
		}
	return APL_SUCCESS;

	RETURN_FAILURE:
		APL_IF_DEBUG
		{
		   CO_ProcMonitor(APL_OUT_FILE,"\n  Exiting Unsuccessfully Out Of IV_Proc_CalcDepoCommAmt() \n", NULL, NULL);
		}
	return APL_FAILURE;
}

/*Added by siva.ganapathi for Annexures on  02/06/2009*/
/*This function is used to update the amount charged for each late transaction 
  Calculated Value and the corresponding details such as client,billdate are inserted into the table "IV_DEAL_OTHFEE"
  While inserting the details into the table "IV_DEAL_OTHFEE", Value for the column "DEPO_TRANS_FEE" is inserted as 0
*/


int IV_Proc_CalcLateTxnCommAmt( char *chr_p_client,
								char *chr_g_bl_upto_dt,
								double p_charge,
  							    double no_of_trades,
								int *int_p_retstat,
						        DEBUG_INFO_STRUCT_H **l_debug_info_ptr
							)
{

	printf("\n Inside IV_Proc_CalcLateTxnCommAmt() function ");

	char h_dl_client[APL_CLIENT_LENGTH] = APL_NULL_STRING;
	double h_late_txn_comm_amt,h_depo_comm_amt;
	char l_late_trans_ind[2],l_depo_chrg_ind[2];
	char chr_h_latetxn_stmt1[5000] = APL_NULL_STRING,chr_h_latetxn_stmt2[2500] = APL_NULL_STRING;
	char str_comm_amt[20];
	char h_identiy_no[20];
	short i_identiy_no=0;
	char chr_h_bl_upto_dt[APL_DATE_LEN];
	char *int_pos= NULL;

	struct sqlca sqlca;

	IV_DEAL_OTHFEE_STRUCT_H l_iv_deal_othfee_struct_h;
	IV_DEAL_OTHFEE_STRUCT_I l_iv_deal_othfee_struct_i = {0, 0, 0, 0, 0, 0};

	EXEC SQL BEGIN DECLARE SECTION;

	EXEC SQL VAR h_dl_client IS STRING;
	EXEC SQL VAR chr_h_bl_upto_dt  IS STRING;
	EXEC SQL VAR chr_h_latetxn_stmt1 	IS STRING;
	EXEC SQL VAR chr_h_latetxn_stmt2 	IS STRING;
	EXEC SQL VAR chr_h_bl_upto_dt  IS STRING;

	EXEC SQL END DECLARE SECTION;
	
	memset(&l_iv_deal_othfee_struct_h,NULL,sizeof(IV_DEAL_OTHFEE_STRUCT_H));
	memset(chr_h_latetxn_stmt1, APL_NULL_CHAR, 5000); 
	memset(chr_h_latetxn_stmt2, APL_NULL_CHAR, 2500); 
	memset(h_dl_client,APL_NULL_CHAR,sizeof(h_dl_client));

	strcpy(h_dl_client,chr_p_client);
	
	strcpy(chr_h_bl_upto_dt,chr_g_bl_upto_dt);
	strcpy(chr_h_bl_upto_dt,strtok_r(chr_h_bl_upto_dt," ",&int_pos));
	strcat(chr_h_bl_upto_dt," 23:59:59");

	
	printf("\n Siva Inside IV_Proc_CalcLateTxnCommAmt()  h_dl_client :: %s",h_dl_client);
	printf("\n Siva Inside IV_Proc_CalcLateTxnCommAmt()  chr_h_bl_upto_dt :: %s",chr_h_bl_upto_dt);
	printf("\n Siva Inside IV_Proc_CalcLateTxnCommAmt()  p_charge :: %f",p_charge);
	printf("\n Siva Inside IV_Proc_CalcLateTxnCommAmt()  no_of_trades :: %f",no_of_trades);

	if(no_of_trades > 0)
			h_late_txn_comm_amt = p_charge / no_of_trades ;
	
	printf("\n h_late_txn_comm_amt value is %f",h_late_txn_comm_amt);
	
	sprintf(str_comm_amt,"%f",h_late_txn_comm_amt);

	
	strcat(chr_h_latetxn_stmt1,"SELECT B.IDENTIY_NO  FROM  DL_DEAL B, MT_INSTRUMENT A , INVOICE_SYSTEMPARAM C, MT_CORE_SYS_PARAMS D, IV_CLIENTSETUP E ");
	strcat(chr_h_latetxn_stmt1,"WHERE B.CLIENT = '");
	strcat(chr_h_latetxn_stmt1,h_dl_client);
	strcat(chr_h_latetxn_stmt1,"' AND B.CLIENT = E.CLIENT AND B.INSTR_CODE = A.INSTR_CODE AND B.CHECKER IS NOT NULL AND B.DL_CLASS NOT IN ('18','19','20','90','26','59','56') AND B.INFORMATON IS NULL " );
	strcat(chr_h_latetxn_stmt1, "AND B.DEAL_STAT != 'DU' ");
	strcat(chr_h_latetxn_stmt1, "AND ( B.PAY_MODE IS NULL OR B.PAY_MODE != 'N') ");/*Added by siva.ganapathi for ISKB_2295*/
	strcat(chr_h_latetxn_stmt1, "AND B.DL_CLASS NOT IN (SELECT DL_CLASS FROM IV_DEAL_TYPE WHERE (NATION_CD ='XX' OR NATION_CD='IN')) ");
	strcat(chr_h_latetxn_stmt1,"AND (B.DATEOFBILLING IS NULL OR B.DATEOFBILLING = '");
	strcat(chr_h_latetxn_stmt1,	chr_g_bl_upto_dt);
	strcat(chr_h_latetxn_stmt1,	"' OR (B.DATEOFBILLING !='");
	strcat(chr_h_latetxn_stmt1,	chr_h_bl_upto_dt);
	strcat(chr_h_latetxn_stmt1,	"' AND B.AMEND_COUNT != B.NUMBER_A)) ");
	strcat(chr_h_latetxn_stmt1,	"AND ( ( (E.B_BASIS = 'INP' AND  B.DATEOF_INPUT <='");
	strcat(chr_h_latetxn_stmt1,	chr_h_bl_upto_dt);
	strcat(chr_h_latetxn_stmt1,	"') OR (E.B_BASIS ='ASD' ");
	strcat(chr_h_latetxn_stmt1,	"AND (B.INSTRUMENT_DT IS NOT NULL AND B.INSTRUMENT_DT <= '");
	strcat(chr_h_latetxn_stmt1,	chr_h_bl_upto_dt);
	strcat(chr_h_latetxn_stmt1,	"' ) ) ) OR ( (C.B_BASIS ='INP' AND  E.B_BASIS IS NULL AND B.DATEOF_INPUT <= '");
	strcat(chr_h_latetxn_stmt1,	chr_h_bl_upto_dt);
	strcat(chr_h_latetxn_stmt1,	"' ) OR (C.B_BASIS ='ASD' AND E.B_BASIS IS NULL ");
	strcat(chr_h_latetxn_stmt1," AND (B.INSTRUMENT_DT IS NOT NULL AND B.INSTRUMENT_DT <= '");
	strcat(chr_h_latetxn_stmt1,	chr_h_bl_upto_dt);
	strcat(chr_h_latetxn_stmt1,	"' ) ) ) ) 	AND (  ( TRUNC(B.DATEOF_INPUT)  > TRUNC(B.SETL_DATE) )  OR ( ( B.DOMESTIC_CPCLT = D.CUSTODY_CLT_CD  ");
	strcat(chr_h_latetxn_stmt1,	" 	AND ( ( (TRUNC(SETL_DATE) - TRUNC(B.DATEOF_INPUT)) <= C.LATE_DL_DAYS_B AND A.PROD_CLASS=1 ) ");
	strcat(chr_h_latetxn_stmt1,	" OR ( (TRUNC(SETL_DATE) - TRUNC(B.DATEOF_INPUT)) <= C.LATE_DL_DAYS_D AND A.PROD_CLASS=2 ) ) ) ");
	strcat(chr_h_latetxn_stmt1,	" OR ( B.DOMESTIC_CPCLT != D.CUSTODY_CLT_CD  ");
	strcat(chr_h_latetxn_stmt1,	" AND ( ( (TRUNC(SETL_DATE) - TRUNC(B.DATEOF_INPUT)) <= C.LATE_DL_DAYS_A AND A.PROD_CLASS=1 ) ");
	strcat(chr_h_latetxn_stmt1," OR ( (TRUNC(SETL_DATE) - TRUNC(B.DATEOF_INPUT)) <= C.LATE_DL_DAYS_C AND A.PROD_CLASS=2 ) ) ) ) ) ");	

	strcat(chr_h_latetxn_stmt2,"SELECT B.IDENTIY_NO  FROM  DL_HISDEAL B, MT_INSTRUMENT A , INVOICE_SYSTEMPARAM C, MT_CORE_SYS_PARAMS D, IV_CLIENTSETUP E ");
	strcat(chr_h_latetxn_stmt2,"WHERE B.CLIENT = '");
	strcat(chr_h_latetxn_stmt2,h_dl_client);
	strcat(chr_h_latetxn_stmt2,"' AND B.CLIENT = E.CLIENT AND B.INSTR_CODE = A.INSTR_CODE AND B.CHECKER IS NOT NULL AND B.DL_CLASS NOT IN ('18','19','20','90','26','59','56') AND B.INFORMATON IS NULL " );
	strcat(chr_h_latetxn_stmt2, "AND B.DEAL_STAT != 'DD' ");
	strcat(chr_h_latetxn_stmt2, "AND ( B.PAY_MODE IS NULL OR B.PAY_MODE != 'N') ");/*Added by siva.ganapathi for ISKB_2295*/
	strcat(chr_h_latetxn_stmt2, "AND B.DL_CLASS NOT IN (SELECT DL_CLASS FROM IV_DEAL_TYPE WHERE (NATION_CD ='XX' OR NATION_CD='IN')) ");
	strcat(chr_h_latetxn_stmt2,"AND (B.DATEOFBILLING IS NULL OR B.DATEOFBILLING = '");
	strcat(chr_h_latetxn_stmt2,chr_g_bl_upto_dt);
	strcat(chr_h_latetxn_stmt2,"' OR (B.DATEOFBILLING !='");
	strcat(chr_h_latetxn_stmt2,chr_h_bl_upto_dt);
	strcat(chr_h_latetxn_stmt2,"' AND B.AMEND_COUNT != B.NUMBER_A)) ");
	strcat(chr_h_latetxn_stmt2,"AND ( ( (E.B_BASIS = 'INP' AND  B.DATEOF_INPUT <='");
	strcat(chr_h_latetxn_stmt2,chr_h_bl_upto_dt);
	strcat(chr_h_latetxn_stmt2,"') OR (E.B_BASIS ='ASD' ");
	strcat(chr_h_latetxn_stmt2,"AND (B.INSTRUMENT_DT IS NOT NULL AND B.INSTRUMENT_DT <= '");
	strcat(chr_h_latetxn_stmt2,chr_h_bl_upto_dt);
	strcat(chr_h_latetxn_stmt2,"' ) ) ) OR ( (C.B_BASIS ='INP' AND  E.B_BASIS IS NULL AND B.DATEOF_INPUT <= '");
	strcat(chr_h_latetxn_stmt2,chr_h_bl_upto_dt);
	strcat(chr_h_latetxn_stmt2,"' ) OR (C.B_BASIS ='ASD' AND E.B_BASIS IS NULL ");
	strcat(chr_h_latetxn_stmt2," AND (B.INSTRUMENT_DT IS NOT NULL AND B.INSTRUMENT_DT <= '");
	strcat(chr_h_latetxn_stmt2,chr_h_bl_upto_dt);
	strcat(chr_h_latetxn_stmt2,"' ) ) ) ) 	AND (  ( TRUNC(B.DATEOF_INPUT)  > TRUNC(B.SETL_DATE) )  OR ( ( B.DOMESTIC_CPCLT = D.CUSTODY_CLT_CD  ");
	strcat(chr_h_latetxn_stmt2," AND ( ( (TRUNC(SETL_DATE) - TRUNC(B.DATEOF_INPUT)) <= C.LATE_DL_DAYS_B AND A.PROD_CLASS=1 ) ");
	strcat(chr_h_latetxn_stmt2," OR ( (TRUNC(SETL_DATE) - (B.DATEOF_INPUT)) <= C.LATE_DL_DAYS_D AND A.PROD_CLASS=2 ) ) ) ");
	strcat(chr_h_latetxn_stmt2," OR ( B.DOMESTIC_CPCLT != D.CUSTODY_CLT_CD  ");
	strcat(chr_h_latetxn_stmt2," AND ( ( (TRUNC(SETL_DATE) - TRUNC(B.DATEOF_INPUT)) <= C.LATE_DL_DAYS_A AND A.PROD_CLASS=1 ) ");
	strcat(chr_h_latetxn_stmt2," OR ( (TRUNC(SETL_DATE) - TRUNC(B.DATEOF_INPUT)) <= C.LATE_DL_DAYS_C AND A.PROD_CLASS=2 ) ) ) ) ) ");	


	
	strcat(chr_h_latetxn_stmt1," UNION ALL ");
	strcat(chr_h_latetxn_stmt1,chr_h_latetxn_stmt2);
	
	printf("\n siva --- Final Query For late txn commamt is %s",chr_h_latetxn_stmt1);

	EXEC SQL PREPARE S FROM :chr_h_latetxn_stmt1;

	EXEC SQL DECLARE latetxn_cur CURSOR FOR S;

	EXEC SQL OPEN latetxn_cur;

	if(sqlca.sqlcode < 0)
	{	
			printf("\n oracle error after opening the cursor is %d",sqlca.sqlcode);
			*int_p_retstat = IV_CRITCAL_ERROR_IND;
	}

	IS_ANY_ORA_ERROR;

	for( ; ; )
	{		
		memset(h_identiy_no, APL_NULL_CHAR, 20); 

		EXEC SQL FETCH latetxn_cur 
				 INTO  :h_identiy_no:i_identiy_no;
		
		if(sqlca.sqlcode == 1403)
		{
			printf("\n No Records found");
			break;
		}
		
		printf("\n h_identiy_no is %s",h_identiy_no);

		printf("\n Insterting the details into the IV_DEAL_OTHFEE table");

		fflush(stdout);
			
		strcpy(l_iv_deal_othfee_struct_h.h_client,h_dl_client);
		strcpy(l_iv_deal_othfee_struct_h.h_identiy_no,h_identiy_no);
		strcpy(l_iv_deal_othfee_struct_h.h_bill_date,chr_g_bl_upto_dt);
			
		//sprintf(h_str_depo_comm_amt,"%f",h_depo_comm_amt);

		h_depo_comm_amt = 0.0 ;
		l_iv_deal_othfee_struct_h.h_depo_trans_fee = h_depo_comm_amt ;
			
		//sprintf(l_str_late_trans_fee,"%f",l_late_trans_fee);

		l_iv_deal_othfee_struct_h.h_late_trans_fee = h_late_txn_comm_amt;

		strcpy(l_iv_deal_othfee_struct_h.h_depo_late_flag,"L");
			
		printf("\n l_iv_deal_othfee_struct_h.h_client is %s",l_iv_deal_othfee_struct_h.h_client);
		printf("\n l_iv_deal_othfee_struct_h.h_identiy_no is %s",l_iv_deal_othfee_struct_h.h_identiy_no);
		printf("\n l_iv_deal_othfee_struct_h.h_bill_dateis %s",l_iv_deal_othfee_struct_h.h_bill_date);
		printf("\n l_iv_deal_othfee_struct_h.h_depo_trans_fee is %f ",l_iv_deal_othfee_struct_h.h_depo_trans_fee);
		printf("\n l_iv_deal_othfee_struct_h.h_late_trans_fee is %f ",l_iv_deal_othfee_struct_h.h_late_trans_fee);
		printf("\n l_iv_deal_othfee_struct_h.h_depo_late_flag is %s ",l_iv_deal_othfee_struct_h.h_depo_late_flag);
			
		EXEC SQL INSERT INTO
				IV_DEAL_OTHFEE VALUES (:l_iv_deal_othfee_struct_h:l_iv_deal_othfee_struct_i);

		printf("\n **1113** sqlca.sqlcode is %d",sqlca.sqlcode);
			
		IS_ANY_ORA_ERROR
	}

	*int_p_retstat = IV_SUCCESS;
	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS:
		APL_IF_DEBUG
		{
		  CO_ProcMonitor(APL_OUT_FILE,"Exiting Successfully Out Of IV_Proc_CalcLateTxnCommAmt\n", NULL, NULL);
		}
	return APL_SUCCESS;

	RETURN_FAILURE:
		APL_IF_DEBUG
		{
		   CO_ProcMonitor(APL_OUT_FILE,"Exiting Unsuccessfully Out Of IV_Proc_CalcLateTxnCommAmt\n", NULL, NULL);
		}
	return APL_FAILURE;
}

/*Added by siva.ganapathi for Annexures on  02/06/2009 */
/*This function is used to update the amount charged for each Volutary CA event and the calculate value is updated into the DL_DEAL table for the column "COMM_AMT"
*/

int IV_Proc_CalcVoluCACommAmt( char *chr_p_client,
								double p_charge,
  							    double no_of_trades,
								int *int_p_retstat,
						        DEBUG_INFO_STRUCT_H **l_debug_info_ptr
		) 
{
		
	printf("\n Inside IV_Proc_CalcVoluCACommAmt() function");
	
	char h_dl_client[APL_CLIENT_LENGTH] = APL_NULL_STRING;
	double h_volu_CA_comm_amt ;
	struct sqlca sqlca;
	char h_fees_base[IV_STRING_LEN];
	char h_chrg_base[IV_STRING_LEN];
	char h_b_basis[4];	
	char h_apl_frm_date[9];  /* Added by monica for kotak ISKB_1737 */
	short i_apl_frm_date = 0;  /* Added by monica for kotak ISKB_1737 */
	EXEC SQL BEGIN DECLARE SECTION;
	EXEC SQL VAR h_b_basis IS STRING;
	EXEC SQL VAR h_fees_base IS STRING;
	EXEC SQL VAR h_chrg_base IS STRING;
	EXEC SQL VAR h_apl_frm_date IS STRING;  /* Added by monica for kotak ISKB_1737 */
	EXEC SQL END DECLARE SECTION;

	memset(h_dl_client,APL_NULL_CHAR,sizeof(h_dl_client));

	strcpy(h_dl_client,chr_p_client);

	printf("\n Siva Inside IV_Proc_CalcVoluCACommAmt()  h_dl_client :: %s",h_dl_client);
	printf("\n Siva Inside IV_Proc_CalcVoluCACommAmt()  p_charge :: %f",p_charge);
	printf("\n Siva Inside IV_Proc_CalcVoluCACommAmt()  no_of_trades :: %f",no_of_trades);

        //if(no_of_trades > 0)
	//		h_volu_CA_comm_amt = p_charge / no_of_trades ;
	//printf("\n h_late_txn_comm_amt value is %f",h_volu_CA_comm_amt);
	
	
	EXEC SQL SELECT B_BASIS 
			 INTO :h_b_basis
			 FROM IV_CLIENTSETUP WHERE CLIENT=:h_dl_client ; 

	Alert("\n Oracle error while getting the B_BASIS foe client %s is %d",h_dl_client,sqlca.sqlcode);

	printf("\n siva --- Client b_basis is %s ",h_b_basis);

	/* Added by monica for kotak ISKB_1737 starts */
	
	EXEC SQL SELECT to_char(MAX(to_date(apl_frm_date,'MM/YYYY')),'MON-YYYY') into :h_apl_frm_date:i_apl_frm_date FROM IV_CLIENT_SERV_BASIS,SYS_IVCONTROLPARAM 
	WHERE CLIENT = :h_dl_client AND service_cd = '71' AND  to_date(apl_frm_date,'MM/YYYY') <= B_UPTO_DATE;
	IS_ANY_ORA_ERROR
	printf("\n applicable from date |%s| \n",h_apl_frm_date);
	/* Added by monica for kotak ISKB_1737 ends */
	
	EXEC SQL SELECT FEES_BASE,CHRG_BASE 
					INTO :h_fees_base,:h_chrg_base 
			 FROM	IV_CLIENT_SERV_BASIS 
			 WHERE  CLIENT=:h_dl_client
					AND SERVICE_CD='71'
					 AND APL_FRM_DATE = :h_apl_frm_date;  /* Added apl_frm_date by Monica for kotak ISKB_1737 */
	Alert("\n Oracle error while getting the FEES_BASE,CHRG_BASE for client %s is %d",h_dl_client,sqlca.sqlcode);
	
	if(sqlca.sqlcode == 1403)
	{
		/* Added by monica for kotak ISKB_1737 starts */
		EXEC SQL SELECT to_char(MAX(to_date(apl_frm_date,'MM/YYYY')),'MON-YYYY') into :h_apl_frm_date:i_apl_frm_date FROM IV_CLIENT_SERV_BASIS,SYS_IVCONTROLPARAM 
		WHERE CLIENT ='KOTAKBN' AND service_cd = '71' AND  to_date(apl_frm_date,'MM/YYYY') <= B_UPTO_DATE;
		IS_ANY_ORA_ERROR
		printf("\n applicable from date |%s| \n",h_apl_frm_date);
		/* Added by monica for kotak ISKB_1737 ends */
	
		EXEC SQL SELECT FEES_BASE,CHRG_BASE 
					 INTO :h_fees_base,:h_chrg_base 
					 FROM   IV_CLIENT_SERV_BASIS 
					 WHERE  CLIENT='KOTAKBN'
						    AND SERVICE_CD='71'
							 AND APL_FRM_DATE = :h_apl_frm_date;  /* Added apl_frm_date by Monica for kotak ISKB_1737 */
		
		printf("\n sql error after getting FEES_BASE,CHRG_BASE(voluchgs) for client KOTAKBN is %d",sqlca.sqlcode);
	}

	printf("\n siva --- Feesbase   for client %s is %s",h_dl_client,h_fees_base);
	printf("\n siva --- ChargeBase for client %s is %s",h_dl_client,h_chrg_base);


	if( strcmp(h_fees_base,"NO. OF TRADES") == 0 &&
			strcmp(h_chrg_base,"NO. OF TRADES") == 0)
	{
		if(no_of_trades > 0)
		h_volu_CA_comm_amt = p_charge / no_of_trades ;
		printf("\n h_late_txn_comm_amt value is %f",h_volu_CA_comm_amt);

		printf("\n h_b_basis for client is %s",h_b_basis);
		if(!strcmp(h_b_basis,"INP"))
		{
			
			// Updating the deals for BB,NS,RT IN DL_DEAL TABLE for Input Basis

			EXEC SQL UPDATE DL_DEAL SET COMM_AMT = :h_volu_CA_comm_amt
				     WHERE IDENTIY_NO IN 
					 (
							SELECT A.IDENTIY_NO
							FROM DL_DEAL A,CAEVENT B,SYS_IVCONTROLPARAM D 
							 WHERE (((A.INSTR_CODE=B.INSTR_CODE) AND (B.CA_EVENT != 'RT')) OR (B.CA_EVENT = 'RT')) /*modified by siva.ganapathi for ISKB_2273 on 22/04/2009*/
							AND /*(*/A.INFORMATON=B.CORP_ID /*OR A.INFORMATON IS NULL)*//*modified by siva.ganapathi for ISKB_2263 on 20/04/2009*/
							AND A.DL_CLASS IN ('18','19') 
							AND (A.PAY_MODE IS NULL OR A.PAY_MODE !='N') /*Added by siva.ganapathi for ISKB_2295*/
							AND B.CA_EVENT IN ('BB','NS','RD')
							AND ( B.OP_EVT_CLASS = 'PO' OR B.OP_EVT_CLASS IS NULL)
							/*	AND A.DEAL_STAT = 'CS' 	*/
							AND A.DEAL_STAT != 'DU'	/* ISKB-2247 Not to pick DU and DD deals */
							AND A.CLIENT = :h_dl_client 
							AND A.checker IS NOT NULL 
							AND	(A.DATEOFBILLING is null OR  A.DATEOFBILLING = D.B_UPTO_DATE OR 
							( A.DATEOFBILLING != D.B_UPTO_DATE and A.amend_count != A.NUMBER_A)) 
							AND A.DATEOF_INPUT<=D.B_UPTO_DATE 	
					 );
			  
			  printf("\n ORA Error INP basis after updating the BB,NS,RT IN DL_DEAL TABLE is %d",sqlca.sqlcode);

			  if( sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
			   {
					APL_GOBACK_FAIL;
			   }

			// Updating the deals for BB,NS,RT IN DL_HISDEAL TABLE for Input Basis

					 EXEC SQL UPDATE DL_HISDEAL SET COMM_AMT = :h_volu_CA_comm_amt
				     WHERE IDENTIY_NO IN 
					 (
							SELECT A.IDENTIY_NO
							FROM DL_HISDEAL A,CAEVENT B,SYS_IVCONTROLPARAM D 
							 WHERE (((A.INSTR_CODE=B.INSTR_CODE) AND (B.CA_EVENT != 'RT')) OR (B.CA_EVENT = 'RT')) /*modified by siva.ganapathi for ISKB_2273 on 22/04/2009*/
							AND /*(*/A.INFORMATON=B.CORP_ID /*OR A.INFORMATON IS NULL)*//*modified by siva.ganapathi for ISKB_2263 on 20/04/2009*/
							AND A.DL_CLASS IN ('18','19') 
							AND (A.PAY_MODE IS NULL OR A.PAY_MODE !='N') /*Added by siva.ganapathi for ISKB_2295*/
							AND B.CA_EVENT IN ('BB','NS','RD')
							AND ( B.OP_EVT_CLASS = 'PO' OR B.OP_EVT_CLASS IS NULL)
							/*	AND A.DEAL_STAT = 'CS' 	*/
							AND A.DEAL_STAT != 'DD'	/* ISKB-2247 Not to pick DU and DD deals */
							AND A.CLIENT = :h_dl_client 
							AND A.checker IS NOT NULL 
							AND	(A.DATEOFBILLING is null OR  A.DATEOFBILLING = D.B_UPTO_DATE OR 
							( A.DATEOFBILLING != D.B_UPTO_DATE and A.amend_count != A.NUMBER_A)) 
							AND A.DATEOF_INPUT<=D.B_UPTO_DATE 
					 );
				
			  printf("\n ORA Error INP basis after updating the BB,NS,RT IN DL_HISDEAL TABLE is %d",sqlca.sqlcode);
			  
			  if( sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
			   {
					APL_GOBACK_FAIL;
			   }


			// Updating the deals  IF RT consider only RVP trades in DL_DEAL TABLE for Input Basis
					
			 EXEC SQL UPDATE DL_DEAL SET COMM_AMT = :h_volu_CA_comm_amt
			 WHERE IDENTIY_NO IN 
			 (									
					SELECT A.IDENTIY_NO
					FROM DL_DEAL A,CAEVENT B,SYS_IVCONTROLPARAM D 
					 WHERE (((A.INSTR_CODE=B.INSTR_CODE) AND (B.CA_EVENT != 'RT')) OR (B.CA_EVENT = 'RT')) /*modified by siva.ganapathi for ISKB_2273 on 22/04/2009*/
					AND /*(*/A.INFORMATON=B.CORP_ID /*OR A.INFORMATON IS NULL)*//*modified by siva.ganapathi for ISKB_2263 on 20/04/2009*/
					AND A.DL_CLASS IN ('18','19') 
					AND (A.PAY_MODE IS NULL OR A.PAY_MODE !='N') /*Added by siva.ganapathi for ISKB_2295*/
					AND B.CA_EVENT IN ('RT') AND A.DEAL_CD = 4
					AND ( B.OP_EVT_CLASS = 'PO' OR B.OP_EVT_CLASS IS NULL)
					/*	AND A.DEAL_STAT IN ('SS','CS') 	*/
					AND A.DEAL_STAT != 'DU'	/* ISKB-2247 Not to pick DU and DD deals */
					AND A.CLIENT = :h_dl_client 
					AND A.checker IS NOT NULL 
					AND	(A.DATEOFBILLING is null OR  A.DATEOFBILLING = D.B_UPTO_DATE OR 
					( A.DATEOFBILLING != D.B_UPTO_DATE and A.amend_count != A.NUMBER_A)) 
					AND A.DATEOF_INPUT<=D.B_UPTO_DATE 
			 );

			  printf("\n ORA Error INP basis after Updating the deals  IF RT consider only RVP trades in DL_DEAL TABLE is %d",sqlca.sqlcode);

			  
			  if( sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
			   {
					APL_GOBACK_FAIL;
			   }

			// Updating the deals  IF RT consider only RVP trades in DL_HISDEAL TABLE for Input Basis
						
				EXEC SQL UPDATE DL_HISDEAL SET COMM_AMT = :h_volu_CA_comm_amt
				 WHERE IDENTIY_NO IN 
				 (
						SELECT A.IDENTIY_NO
						FROM DL_HISDEAL A,CAEVENT B,SYS_IVCONTROLPARAM D 
						 WHERE (((A.INSTR_CODE=B.INSTR_CODE) AND (B.CA_EVENT != 'RT')) OR (B.CA_EVENT = 'RT')) /*modified by siva.ganapathi for ISKB_2273 on 22/04/2009*/
						AND /*(*/A.INFORMATON=B.CORP_ID /*OR A.INFORMATON IS NULL)*//*modified by siva.ganapathi for ISKB_2263 on 20/04/2009*/
						AND A.DL_CLASS IN ('18','19') 
						AND (A.PAY_MODE IS NULL OR A.PAY_MODE !='N') /*Added by siva.ganapathi for ISKB_2295*/
						AND B.CA_EVENT IN ('RT') AND A.DEAL_CD = 4
						AND ( B.OP_EVT_CLASS = 'PO' OR B.OP_EVT_CLASS IS NULL)
						/*	AND A.DEAL_STAT IN ('SS','CS')  	*/
						AND A.DEAL_STAT != 'DD' /* ISKB-2247 Not to pick DU and DD deals */
						AND A.CLIENT = :h_dl_client 
						AND A.checker IS NOT NULL 
						AND	(A.DATEOFBILLING is null OR  A.DATEOFBILLING = D.B_UPTO_DATE OR 
						( A.DATEOFBILLING != D.B_UPTO_DATE and A.amend_count != A.NUMBER_A)) 
						AND A.DATEOF_INPUT<=D.B_UPTO_DATE 		
				 );

				  printf("\n ORA Error INP basis after Updating the deals  IF RT consider only RVP trades in DL_HISDEAL TABLE is %d",sqlca.sqlcode);
					
					
				  if( sqlca.sqlcode != 0 &&  sqlca.sqlcode != 1403)
				   {
						APL_GOBACK_FAIL;
				   }
			}
			else
			{		
					// Updating the deals for BB,NS,RT IN DL_DEAL TABLE for settlement basis
			
					EXEC SQL UPDATE DL_DEAL SET COMM_AMT = :h_volu_CA_comm_amt
				    WHERE IDENTIY_NO IN 
					(
							SELECT A.IDENTIY_NO
							FROM DL_DEAL A,CAEVENT B,SYS_IVCONTROLPARAM D 
							 WHERE (((A.INSTR_CODE=B.INSTR_CODE) AND (B.CA_EVENT != 'RT')) OR (B.CA_EVENT = 'RT')) /*modified by siva.ganapathi for ISKB_2273 on 22/04/2009*/
							AND /*(*/A.INFORMATON=B.CORP_ID /*OR A.INFORMATON IS NULL)*//*modified by siva.ganapathi for ISKB_2263 on 20/04/2009*/
							AND A.DL_CLASS IN ('18','19') 
							AND (A.PAY_MODE IS NULL OR A.PAY_MODE !='N') /*Added by siva.ganapathi for ISKB_2295*/
							AND B.CA_EVENT IN ('BB','NS','RD')
							AND ( B.OP_EVT_CLASS = 'PO' OR B.OP_EVT_CLASS IS NULL)
							AND A.DEAL_STAT in ('CS','SS') 
							AND A.CLIENT = :h_dl_client 
							AND A.checker IS NOT NULL 
							AND	(A.DATEOFBILLING is null OR  A.DATEOFBILLING = D.B_UPTO_DATE OR 
							( A.DATEOFBILLING != D.B_UPTO_DATE and A.amend_count != A.NUMBER_A)) 
							AND (A.INSTRUMENT_DT is not null and A.INSTRUMENT_DT <= D.B_UPTO_DATE)
					);
					
 					 printf("\n ORA Error Settlement basis after updating the BB,NS,RT IN DL_DEAL TABLE is %d",sqlca.sqlcode);

						if( sqlca.sqlcode != 0 &&  sqlca.sqlcode != 1403)
					   {
							APL_GOBACK_FAIL;
					   }

					// Updating the deals for BB,NS,RT IN DL_HISDEAL TABLE for Settlement Basis

					EXEC SQL UPDATE DL_HISDEAL SET COMM_AMT = :h_volu_CA_comm_amt
				    WHERE IDENTIY_NO IN 
					(
						SELECT A.IDENTIY_NO
						FROM DL_HISDEAL A,CAEVENT B,SYS_IVCONTROLPARAM D 
						 WHERE (((A.INSTR_CODE=B.INSTR_CODE) AND (B.CA_EVENT != 'RT')) OR (B.CA_EVENT = 'RT')) /*modified by siva.ganapathi for ISKB_2273 on 22/04/2009*/
						AND /*(*/A.INFORMATON=B.CORP_ID /*OR A.INFORMATON IS NULL)*//*modified by siva.ganapathi for ISKB_2263 on 20/04/2009*/
						AND A.DL_CLASS IN ('18','19') 
						AND (A.PAY_MODE IS NULL OR A.PAY_MODE !='N') /*Added by siva.ganapathi for ISKB_2295*/
						AND B.CA_EVENT IN ('BB','NS','RD')
						AND ( B.OP_EVT_CLASS = 'PO' OR B.OP_EVT_CLASS IS NULL)
						AND A.DEAL_STAT in ('CS','SS') 
						AND A.CLIENT = :h_dl_client 
						AND A.checker IS NOT NULL 
						AND	(A.DATEOFBILLING is null OR  A.DATEOFBILLING = D.B_UPTO_DATE OR 
						( A.DATEOFBILLING != D.B_UPTO_DATE and A.amend_count != A.NUMBER_A)) 
						AND (A.INSTRUMENT_DT is not null and A.INSTRUMENT_DT <= D.B_UPTO_DATE)
					);
					
					printf("\n ORA Error Settlement basis after updating the BB,NS,RT IN DL_HISDEAL TABLE is %d",sqlca.sqlcode);

					if( sqlca.sqlcode != 0 &&  sqlca.sqlcode != 1403)
				   {
						APL_GOBACK_FAIL;
				   } 


				// Updating the deals  IF RT consider only RVP trades in DL_DEAL TABLE for Settlement Basis 

					EXEC SQL UPDATE DL_DEAL SET COMM_AMT = :h_volu_CA_comm_amt
				    WHERE IDENTIY_NO IN 
					(
							SELECT A.IDENTIY_NO
							FROM DL_DEAL A,CAEVENT B,SYS_IVCONTROLPARAM D 
							 WHERE (((A.INSTR_CODE=B.INSTR_CODE) AND (B.CA_EVENT != 'RT')) OR (B.CA_EVENT = 'RT')) /*modified by siva.ganapathi for ISKB_2273 on 22/04/2009*/
							AND /*(*/A.INFORMATON=B.CORP_ID /*OR A.INFORMATON IS NULL)*//*modified by siva.ganapathi for ISKB_2263 on 20/04/2009*/
							AND A.DL_CLASS IN ('18','19') 
							AND (A.PAY_MODE IS NULL OR A.PAY_MODE !='N') /*Added by siva.ganapathi for ISKB_2295*/
							AND B.CA_EVENT IN ('RT') AND A.DEAL_CD = 4
							AND ( B.OP_EVT_CLASS = 'PO' OR B.OP_EVT_CLASS IS NULL)
							AND A.DEAL_STAT IN ('SS','CS')  
							AND A.CLIENT = :h_dl_client 
							AND A.checker IS NOT NULL 
							AND	(A.DATEOFBILLING is null OR  A.DATEOFBILLING = D.B_UPTO_DATE OR 
							( A.DATEOFBILLING != D.B_UPTO_DATE and A.amend_count != A.NUMBER_A)) 
							AND (A.INSTRUMENT_DT is not null and A.INSTRUMENT_DT <= D.B_UPTO_DATE)
					);

					printf("\n ORA Error Settlement basis IF RT consider only RVP trades in DL_DEAL TABLE is %d",sqlca.sqlcode);
					
					if( sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
				   {
						APL_GOBACK_FAIL;
				   }

					// Updating the deals  IF RT consider only RVP trades in DL_HISDEAL TABLE for Settlement Basis
					
					EXEC SQL UPDATE DL_HISDEAL SET COMM_AMT = :h_volu_CA_comm_amt
				    WHERE IDENTIY_NO IN 
					(
							SELECT A.IDENTIY_NO
							FROM DL_HISDEAL A,CAEVENT B,SYS_IVCONTROLPARAM D 
							 WHERE (((A.INSTR_CODE=B.INSTR_CODE) AND (B.CA_EVENT != 'RT')) OR (B.CA_EVENT = 'RT')) /*modified by siva.ganapathi for ISKB_2273 on 22/04/2009*/
							AND /*(*/A.INFORMATON=B.CORP_ID /*OR A.INFORMATON IS NULL)*//*modified by siva.ganapathi for ISKB_2263 on 20/04/2009*/
							AND A.DL_CLASS IN ('18','19') 
							AND (A.PAY_MODE IS NULL OR A.PAY_MODE !='N') /*Added by siva.ganapathi for ISKB_2295*/
							AND B.CA_EVENT IN ('RT') AND A.DEAL_CD = 4
							AND ( B.OP_EVT_CLASS = 'PO' OR B.OP_EVT_CLASS IS NULL)
							AND A.DEAL_STAT IN ('SS','CS') 
							AND A.CLIENT = :h_dl_client 
							AND A.checker IS NOT NULL 
							AND	(A.DATEOFBILLING is null OR  A.DATEOFBILLING = D.B_UPTO_DATE OR 
							( A.DATEOFBILLING != D.B_UPTO_DATE and A.amend_count != A.NUMBER_A)) 
							AND (A.INSTRUMENT_DT is not null and A.INSTRUMENT_DT <= D.B_UPTO_DATE)
					);

					printf("\n ORA Error Settlement basis IF RT consider only RVP trades in DL_HISDEAL TABLE is %d",sqlca.sqlcode);

				  if( sqlca.sqlcode != 0 &&  sqlca.sqlcode != 1403)
				   {
						APL_GOBACK_FAIL;
				   }

			}
	  
			/*Added by siva.ganapathi for ISKB_2323*/
                        /* Inserting details into IV_CACHEQUE */

			//For PO

			EXEC SQL INSERT INTO IV_CACHEQUE (				    
				    SELECT B.CORP_ID,B.CLIENT,C.B_UPTO_DATE,'71',:h_volu_CA_comm_amt
					FROM CAEVENT A,CACHEQUE B,SYS_IVCONTROLPARAM C
					WHERE A.CORP_ID=B.CORP_ID
					AND B.CLIENT=:h_dl_client
					AND B.STAT_PYMT ='CP'
					AND A.OVER_SUBSCRP='Y'
					AND A.CA_EVENT = 'RD'
					AND A.OP_EVT_CLASS ='PO'
					AND (B.DATEOF_PAYMENT > C.B_PREV_DATE AND B.DATEOF_PAYMENT <= C.B_UPTO_DATE )
					AND (B.DATEOFBILLING IS NULL OR B.DATEOFBILLING = C.B_UPTO_DATE)
			);

			printf("\n No. Of Trades/No. Of Trades Volu -- For PO Sql error after inseting the details into 	IV_CACHEQUE is %d",sqlca.sqlcode);

			//For partial type --PART PUT

			EXEC SQL INSERT INTO IV_CACHEQUE (				    
				SELECT B.CORP_ID,B.CLIENT,D.B_UPTO_DATE,'71',:h_volu_CA_comm_amt
					FROM CAEVENT A,CACHEQUE B,MT_INSTRUMENT C,SYS_IVCONTROLPARAM D
					WHERE B.CLIENT=:h_dl_client
					AND A.CORP_ID=B.CORP_ID
					AND C.INSTR_CODE=A.INSTR_CODE
					AND B.STAT_PYMT  IN  ('PP','CP')
					AND A.REDEM_RT < C.NOMINAL_VALUE
					AND A.CA_EVENT='RD'
					AND (B.DATEOF_PAYMENT > D.B_PREV_DATE AND B.DATEOF_PAYMENT <= D.B_UPTO_DATE )
					AND (B.DATEOFBILLING IS NULL OR B.DATEOFBILLING = D.B_UPTO_DATE)	
					AND A.OP_EVT_CLASS='PO'
			);
			
			printf("\n No. Of Trades/No. Of Trades Volu -- For partial type --PART PUT Sql error after inseting the details into IV_CACHEQUE is %d",sqlca.sqlcode);

	  }
	  else
	  {		
		  printf("\n Fees basis  for client %s is %s",h_dl_client,h_fees_base);
		  printf("\n charge basis for client %s is %s",h_dl_client,h_chrg_base);

		  printf("\n h_b_basis for client is %s",h_b_basis);
			
		  if(!strcmp(h_b_basis,"INP"))
		  {
				  
				// Updating the deals for BB,NS,RT IN DL_DEAL TABLE for Input Basis
                                 /*Modified by siva.ganapathi for ISKB_2323*/
				EXEC SQL UPDATE DL_DEAL SET COMM_AMT = :p_charge * AMOUNT / :no_of_trades 
				WHERE IDENTIY_NO IN 
				(
							SELECT A.IDENTIY_NO
							FROM DL_DEAL A,CAEVENT B,SYS_IVCONTROLPARAM D 
							 WHERE (((A.INSTR_CODE=B.INSTR_CODE) AND (B.CA_EVENT != 'RT')) OR (B.CA_EVENT = 'RT')) /*modified by siva.ganapathi for ISKB_2273 on 22/04/2009*/
							AND /*(*/A.INFORMATON=B.CORP_ID /*OR A.INFORMATON IS NULL)*//*modified by siva.ganapathi for ISKB_2263 on 20/04/2009*/
							AND A.DL_CLASS IN ('18','19') 
							AND (A.PAY_MODE IS NULL OR A.PAY_MODE !='N') /*Added by siva.ganapathi for ISKB_2295*/
							AND B.CA_EVENT IN ('BB','NS','RD')
							AND ( B.OP_EVT_CLASS = 'PO' OR B.OP_EVT_CLASS IS NULL)
							/*	AND A.DEAL_STAT = 'CS' 	*/
							AND A.DEAL_STAT != 'DU' /* ISKB-2247 Not to pick DU and DD deals */
							AND A.CLIENT = :h_dl_client 
							AND A.checker IS NOT NULL 
							AND	(A.DATEOFBILLING is null OR  A.DATEOFBILLING = D.B_UPTO_DATE OR 
							( A.DATEOFBILLING != D.B_UPTO_DATE and A.amend_count != A.NUMBER_A)) 
							AND A.DATEOF_INPUT<=D.B_UPTO_DATE 
					);

			  printf("\n ORA Error INP basis after updating the BB,NS,RT IN DL_DEAL TABLE is %d",sqlca.sqlcode);
				
				   if( sqlca.sqlcode != 0 &&  sqlca.sqlcode != 1403)
				   {
						APL_GOBACK_FAIL;
				   }


				// Updating the deals for BB,NS,RT IN DL_HISDEAL TABLE for Input Basis
				  /*Modified by siva.ganapathi for ISKB_2323*/
				EXEC SQL UPDATE DL_HISDEAL SET COMM_AMT = :p_charge * AMOUNT / :no_of_trades
				WHERE IDENTIY_NO IN 
				(
				    SELECT A.IDENTIY_NO
					FROM DL_HISDEAL A,CAEVENT B,SYS_IVCONTROLPARAM D 
					 WHERE (((A.INSTR_CODE=B.INSTR_CODE) AND (B.CA_EVENT != 'RT')) OR (B.CA_EVENT = 'RT')) /*modified by siva.ganapathi for ISKB_2273 on 22/04/2009*/
					AND /*(*/A.INFORMATON=B.CORP_ID /*OR A.INFORMATON IS NULL)*//*modified by siva.ganapathi for ISKB_2263 on 20/04/2009*/
					AND A.DL_CLASS IN ('18','19') 
					AND (A.PAY_MODE IS NULL OR A.PAY_MODE !='N') /*Added by siva.ganapathi for ISKB_2295*/
					AND B.CA_EVENT IN ('BB','NS','RD')
					AND ( B.OP_EVT_CLASS = 'PO' OR B.OP_EVT_CLASS IS NULL)
					/*	AND A.DEAL_STAT = 'CS' 	*/
					AND A.DEAL_STAT != 'DD' /* ISKB-2247 Not to pick DU and DD deals */
					AND A.CLIENT = :h_dl_client 
					AND A.checker IS NOT NULL 
					AND	(A.DATEOFBILLING is null OR  A.DATEOFBILLING = D.B_UPTO_DATE OR 
					( A.DATEOFBILLING != D.B_UPTO_DATE and A.amend_count != A.NUMBER_A)) 
					AND A.DATEOF_INPUT<=D.B_UPTO_DATE 
				);
			
		  printf("\n ORA Error INP basis after updating the BB,NS,RT IN DL_HISDEAL TABLE is %d",sqlca.sqlcode);

		           if( sqlca.sqlcode != 0 &&  sqlca.sqlcode != 1403)
				   {
						APL_GOBACK_FAIL;
				   }

			
			// Updating the deals  IF RT consider only RVP trades in DL_DEAL TABLE for Input Basis
                                /*Modified by siva.ganapathi for ISKB_2323*/
				EXEC SQL UPDATE DL_DEAL SET COMM_AMT = :p_charge * AMOUNT / :no_of_trades
				WHERE IDENTIY_NO IN 
				(			
					SELECT A.IDENTIY_NO
					FROM DL_DEAL A,CAEVENT B,SYS_IVCONTROLPARAM D 
					WHERE (((A.INSTR_CODE=B.INSTR_CODE) AND (B.CA_EVENT != 'RT')) OR (B.CA_EVENT = 'RT')) /*modified by siva.ganapathi for ISKB_2273 on 22/04/2009*/
					AND /*(*/A.INFORMATON=B.CORP_ID /*OR A.INFORMATON IS NULL)*//*modified by siva.ganapathi for ISKB_2263 on 20/04/2009*/
					AND A.DL_CLASS IN ('18','19') 
					AND (A.PAY_MODE IS NULL OR A.PAY_MODE !='N') /*Added by siva.ganapathi for ISKB_2295*/
					AND B.CA_EVENT IN ('RT') AND A.DEAL_CD = 4
					AND ( B.OP_EVT_CLASS = 'PO' OR B.OP_EVT_CLASS IS NULL)
					/*	AND A.DEAL_STAT IN ('SS','CS') 	*/
					AND A.DEAL_STAT != 'DU' /* ISKB-2247 Not to pick DU and DD deals */
					AND A.CLIENT = :h_dl_client 
					AND A.checker IS NOT NULL 
					AND	(A.DATEOFBILLING is null OR  A.DATEOFBILLING = D.B_UPTO_DATE OR 
					( A.DATEOFBILLING != D.B_UPTO_DATE and A.amend_count != A.NUMBER_A)) 
					AND A.DATEOF_INPUT<=D.B_UPTO_DATE  
				);

				printf("\n ORA Error Settlement basis IF RT consider only RVP trades in DL_DEAL TABLE is %d",sqlca.sqlcode);

				   if( sqlca.sqlcode != 0 &&  sqlca.sqlcode != 1403)
				   {
						APL_GOBACK_FAIL;
				   }

				// Updating the deals  IF RT consider only RVP trades in DL_HISDEAL TABLE for Input Basis
		                   /*Modified by siva.ganapathi for ISKB_2323*/
				EXEC SQL UPDATE DL_HISDEAL SET COMM_AMT = :p_charge * AMOUNT / :no_of_trades
				WHERE IDENTIY_NO IN 
				(			
					SELECT A.IDENTIY_NO
					FROM DL_HISDEAL A,CAEVENT B,SYS_IVCONTROLPARAM D 
					 WHERE (((A.INSTR_CODE=B.INSTR_CODE) AND (B.CA_EVENT != 'RT')) OR (B.CA_EVENT = 'RT')) /*modified by siva.ganapathi for ISKB_2273 on 22/04/2009*/
					AND /*(*/A.INFORMATON=B.CORP_ID /*OR A.INFORMATON IS NULL)*//*modified by siva.ganapathi for ISKB_2263 on 20/04/2009*/
					AND A.DL_CLASS IN ('18','19') 
					AND (A.PAY_MODE IS NULL OR A.PAY_MODE !='N') /*Added by siva.ganapathi for ISKB_2295*/
					AND B.CA_EVENT IN ('RT') AND A.DEAL_CD = 4
					AND ( B.OP_EVT_CLASS = 'PO' OR B.OP_EVT_CLASS IS NULL)
					/*	AND A.DEAL_STAT IN ('SS','CS') 	*/
					AND A.DEAL_STAT != 'DD' /* ISKB-2247 Not to pick DU and DD deals */
					AND A.CLIENT = :h_dl_client 
					AND A.checker IS NOT NULL 
					AND	(A.DATEOFBILLING is null OR  A.DATEOFBILLING = D.B_UPTO_DATE OR 
					( A.DATEOFBILLING != D.B_UPTO_DATE and A.amend_count != A.NUMBER_A)) 
					AND A.DATEOF_INPUT<=D.B_UPTO_DATE  
				 );

				printf("\n ORA Error Settlement basis IF RT consider only RVP trades in DL_HISDEAL TABLE is %d",sqlca.sqlcode);

				   if( sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
				   {
						APL_GOBACK_FAIL;
				   }

		  }
		  else
		  {
				// Updating the deals for BB,NS,RT IN DL_DEAL TABLE for Settlement Basis
                                 /*Modified by siva.ganapathi for ISKB_2323*/
				EXEC SQL UPDATE DL_DEAL SET COMM_AMT = :p_charge * AMOUNT / :no_of_trades
				WHERE IDENTIY_NO IN 
				(
				    SELECT A.IDENTIY_NO 
					FROM DL_DEAL A,CAEVENT B,SYS_IVCONTROLPARAM D 
					 WHERE (((A.INSTR_CODE=B.INSTR_CODE) AND (B.CA_EVENT != 'RT')) OR (B.CA_EVENT = 'RT')) /*modified by siva.ganapathi for ISKB_2273 on 22/04/2009*/
					AND /*(*/A.INFORMATON=B.CORP_ID /*OR A.INFORMATON IS NULL)*//*modified by siva.ganapathi for ISKB_2263 on 20/04/2009*/
					AND A.DL_CLASS IN ('18','19') 
					AND (A.PAY_MODE IS NULL OR A.PAY_MODE !='N') /*Added by siva.ganapathi for ISKB_2295*/
					AND B.CA_EVENT IN ('BB','NS','RD')
					AND ( B.OP_EVT_CLASS = 'PO' OR B.OP_EVT_CLASS IS NULL)
					AND A.DEAL_STAT in ('CS','SS') 
					AND A.CLIENT = :h_dl_client 
					AND A.checker IS NOT NULL 
					AND	(A.DATEOFBILLING is null OR  A.DATEOFBILLING = D.B_UPTO_DATE OR 
					( A.DATEOFBILLING != D.B_UPTO_DATE and A.amend_count != A.NUMBER_A)) 
					AND (A.INSTRUMENT_DT is not null and A.INSTRUMENT_DT <= D.B_UPTO_DATE) 
				 );
				
  			  printf("\n ORA Error Settlement basis after updating the BB,NS,RT IN DL_DEAL TABLE is %d",sqlca.sqlcode);

			  	if( sqlca.sqlcode != 0 &&  sqlca.sqlcode != 1403)
				  {
						APL_GOBACK_FAIL;
				  }

				// Updating the deals for BB,NS,RT IN DL_HISDEAL TABLE for Settlement Basis
                                 /*Modified by siva.ganapathi for ISKB_2323*/
				EXEC SQL UPDATE DL_HISDEAL SET COMM_AMT = :p_charge * AMOUNT / :no_of_trades
				WHERE IDENTIY_NO IN 
				(

				    SELECT A.IDENTIY_NO
					FROM DL_HISDEAL A,CAEVENT B,SYS_IVCONTROLPARAM D 
					 WHERE (((A.INSTR_CODE=B.INSTR_CODE) AND (B.CA_EVENT != 'RT')) OR (B.CA_EVENT = 'RT')) /*modified by siva.ganapathi for ISKB_2273 on 22/04/2009*/
					AND /*(*/A.INFORMATON=B.CORP_ID /*OR A.INFORMATON IS NULL)*//*modified by siva.ganapathi for ISKB_2263 on 20/04/2009*/
					AND A.DL_CLASS IN ('18','19') 
					AND (A.PAY_MODE IS NULL OR A.PAY_MODE !='N') /*Added by siva.ganapathi for ISKB_2295*/
					AND B.CA_EVENT IN ('BB','NS','RD')
					AND ( B.OP_EVT_CLASS = 'PO' OR B.OP_EVT_CLASS IS NULL)
					AND A.DEAL_STAT in ('CS','SS') 
					AND A.CLIENT = :h_dl_client 
					AND A.checker IS NOT NULL 
					AND	(A.DATEOFBILLING is null OR  A.DATEOFBILLING = D.B_UPTO_DATE OR 
					( A.DATEOFBILLING != D.B_UPTO_DATE and A.amend_count != A.NUMBER_A)) 
					AND (A.INSTRUMENT_DT is not null and A.INSTRUMENT_DT <= D.B_UPTO_DATE)
				);
			
  			  printf("\n ORA Error Settlement basis after updating the BB,NS,RT IN DL_HISDEAL TABLE is %d",sqlca.sqlcode);

			  		if( sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
				   {
						APL_GOBACK_FAIL;
				   }


			// Updating the deals  IF RT consider only RVP trades in DL_DEAL TABLE for Settlement Basis 

                                 /*Modified by siva.ganapathi for ISKB_2323*/		
				EXEC SQL UPDATE DL_DEAL SET COMM_AMT = :p_charge * AMOUNT / :no_of_trades
				WHERE IDENTIY_NO IN 
				(
					SELECT A.IDENTIY_NO
					FROM DL_DEAL A,CAEVENT B,SYS_IVCONTROLPARAM D 
					 WHERE (((A.INSTR_CODE=B.INSTR_CODE) AND (B.CA_EVENT != 'RT')) OR (B.CA_EVENT = 'RT')) /*modified by siva.ganapathi for ISKB_2273 on 22/04/2009*/
					AND /*(*/A.INFORMATON=B.CORP_ID /*OR A.INFORMATON IS NULL)*//*modified by siva.ganapathi for ISKB_2263 on 20/04/2009*/
					AND A.DL_CLASS IN ('18','19') 
					AND (A.PAY_MODE IS NULL OR A.PAY_MODE !='N') /*Added by siva.ganapathi for ISKB_2295*/
					AND B.CA_EVENT IN ('RT') AND A.DEAL_CD = 4
					AND ( B.OP_EVT_CLASS = 'PO' OR B.OP_EVT_CLASS IS NULL)
					AND A.DEAL_STAT IN ('SS','CS')  
					AND A.CLIENT = :h_dl_client 
					AND A.checker IS NOT NULL 
					AND	(A.DATEOFBILLING is null OR  A.DATEOFBILLING = D.B_UPTO_DATE OR 
					( A.DATEOFBILLING != D.B_UPTO_DATE and A.amend_count != A.NUMBER_A)) 
					AND (A.INSTRUMENT_DT is not null and A.INSTRUMENT_DT <= D.B_UPTO_DATE)
				);
				
				 printf("\n ORA Error Settlement basis IF RT consider only RVP trades IN DL_DEAL TABLE is %d",sqlca.sqlcode);

				 	if( sqlca.sqlcode != 0 &&  sqlca.sqlcode != 1403)
				   {
						APL_GOBACK_FAIL;
				   }

                                 /*Modified by siva.ganapathi for ISKB_2323*/
				EXEC SQL UPDATE DL_HISDEAL SET COMM_AMT = :p_charge * AMOUNT / :no_of_trades
				WHERE IDENTIY_NO IN 
				(
					SELECT A.IDENTIY_NO
					FROM DL_HISDEAL A,CAEVENT B,SYS_IVCONTROLPARAM D 
					 WHERE (((A.INSTR_CODE=B.INSTR_CODE) AND (B.CA_EVENT != 'RT')) OR (B.CA_EVENT = 'RT')) /*modified by siva.ganapathi for ISKB_2273 on 22/04/2009*/
					AND /*(*/A.INFORMATON=B.CORP_ID /*OR A.INFORMATON IS NULL)*//*modified by siva.ganapathi for ISKB_2263 on 20/04/2009*/
					AND A.DL_CLASS IN ('18','19') 
					AND (A.PAY_MODE IS NULL OR A.PAY_MODE !='N') /*Added by siva.ganapathi for ISKB_2295*/
					AND B.CA_EVENT IN ('RT') AND A.DEAL_CD = 4
					AND ( B.OP_EVT_CLASS = 'PO' OR B.OP_EVT_CLASS IS NULL)
					AND A.DEAL_STAT IN ('SS','CS')  
					AND A.CLIENT = :h_dl_client 
					AND A.checker IS NOT NULL 
					AND	(A.DATEOFBILLING is null OR  A.DATEOFBILLING = D.B_UPTO_DATE OR 
					( A.DATEOFBILLING != D.B_UPTO_DATE and A.amend_count != A.NUMBER_A)) 
					AND (A.INSTRUMENT_DT is not null and A.INSTRUMENT_DT <= D.B_UPTO_DATE)
				);	
				
  			   printf("\n ORA Error Settlement basis IF RT consider only RVP trades IN DL_HISDEAL TABLE is %d",sqlca.sqlcode);

			   		if( sqlca.sqlcode != 0 &&  sqlca.sqlcode != 1403)
				   {
						APL_GOBACK_FAIL;
				   }

          } 
                        /*Added by siva.ganapathi for ISKB_2323*/
			//For PO
			EXEC SQL INSERT INTO IV_CACHEQUE (				    
					SELECT B.CORP_ID,B.CLIENT,C.B_UPTO_DATE,'71',:p_charge * B.CURR_PYMT / :no_of_trades
					FROM CAEVENT A,CACHEQUE B,SYS_IVCONTROLPARAM C
					WHERE A.CORP_ID=B.CORP_ID
					AND B.CLIENT=:h_dl_client 
					AND B.STAT_PYMT ='CP'
					AND A.OVER_SUBSCRP='Y'
					AND A.CA_EVENT = 'RD'
					AND A.OP_EVT_CLASS ='PO'
					AND (B.DATEOF_PAYMENT > C.B_PREV_DATE AND B.DATEOF_PAYMENT <= C.B_UPTO_DATE )
					AND (B.DATEOFBILLING IS NULL OR B.DATEOFBILLING = C.B_UPTO_DATE)
			);	

			printf("\n Counter Value/Counter Value Volu -- For PO Sql error after inseting the details into 	IV_CACHEQUE is %d",sqlca.sqlcode);

			//For partial type part put
			EXEC SQL INSERT INTO IV_CACHEQUE (				    
					SELECT B.CORP_ID,B.CLIENT,D.B_UPTO_DATE,'71',:p_charge * B.CURR_PYMT / :no_of_trades
					FROM CAEVENT A,CACHEQUE B,MT_INSTRUMENT C,SYS_IVCONTROLPARAM D
					WHERE B.CLIENT=:h_dl_client 
					AND A.CORP_ID=B.CORP_ID
					AND C.INSTR_CODE=A.INSTR_CODE
					AND B.STAT_PYMT IN ('PP','CP') 
					AND A.REDEM_RT < C.NOMINAL_VALUE
					AND A.CA_EVENT='RD'
					AND (B.DATEOF_PAYMENT > D.B_PREV_DATE AND B.DATEOF_PAYMENT <= D.B_UPTO_DATE)
					AND (B.DATEOFBILLING IS NULL OR B.DATEOFBILLING = D.B_UPTO_DATE)	
					AND A.OP_EVT_CLASS='PO'
			);	
			
		printf("\n Counter Value/Counter Value Volu -- For partial type --PART PUT Sql error after inseting      the details into IV_CACHEQUE is %d",sqlca.sqlcode);
	  }	

APL_GOBACK_SUCCESS // AIX - Warnings

	RETURN_SUCCESS:
		APL_IF_DEBUG
		{
		  CO_ProcMonitor(APL_OUT_FILE,"Exiting Successfully Out Of IV_Proc_CalcVoluCACommAmt() \n", NULL, NULL);
		}
	return APL_SUCCESS;

	RETURN_FAILURE:
		APL_IF_DEBUG
		{
		   CO_ProcMonitor(APL_OUT_FILE,"Exiting Unsuccessfully Out Of IV_Proc_CalcVoluCACommAmt() \n", NULL, NULL);
		}
	return APL_FAILURE;
}

/*Added by siva.ganapathi for Annexures on  02/06/2009 */
/*This function is used to update the amount charged for each Mandatory CA event and the calculate value is updated into the DL_DEAL table for the column "COMM_AMT"
*/

int IV_Proc_CalcMandCACommAmt(  char *chr_p_client,
								double p_charge,
  							    double no_of_trades,
								int *int_p_retstat,
						        DEBUG_INFO_STRUCT_H **l_debug_info_ptr
							) 
{
	printf("\n Inside IV_Proc_CalcMandCACommAmt() function");
	
	char h_dl_client[APL_CLIENT_LENGTH] = APL_NULL_STRING;
	double h_mand_CA_comm_amt ;
	struct sqlca sqlca;
	char h_fees_base[IV_STRING_LEN];
	char h_chrg_base[IV_STRING_LEN];
	char h_b_basis[4];	
	char h_apl_frm_date[9];  /* Added by monica for kotak ISKB_1737 */	
	short i_apl_frm_date = 0;  /* Added by monica for kotak ISKB_1737 */
	EXEC SQL BEGIN DECLARE SECTION;
	EXEC SQL VAR h_b_basis IS STRING;
	EXEC SQL VAR h_fees_base IS STRING;
	EXEC SQL VAR h_chrg_base IS STRING;
	EXEC SQL VAR h_apl_frm_date IS STRING;  /* Added by monica for kotak ISKB_1737 */
	EXEC SQL END DECLARE SECTION;

	memset(h_dl_client,APL_NULL_CHAR,sizeof(h_dl_client));

	strcpy(h_dl_client,chr_p_client);

	printf("\n Siva Inside IV_Proc_CalcMandCACommAmt()  h_dl_client :: %s",h_dl_client);
	printf("\n Siva Inside IV_Proc_CalcMandCACommAmt()  p_charge :: %f",p_charge);
	printf("\n Siva Inside IV_Proc_CalcMandCACommAmt()  no_of_trades :: %f",no_of_trades);

	//if(no_of_trades > 0)
	//		h_mand_CA_comm_amt = p_charge / no_of_trades ;
	//printf("\n h_late_txn_comm_amt value is %f",h_mand_CA_comm_amt);
	
	
	EXEC SQL SELECT B_BASIS 
			 INTO :h_b_basis
			 FROM IV_CLIENTSETUP WHERE CLIENT=:h_dl_client ; 

	Alert("\n Oracle error while getting the B_BASIS foe client %s is %d",h_dl_client,sqlca.sqlcode);

	printf("\n siva --- Client b_basis is %s ",h_b_basis);

	/* Added by monica for kotak ISKB_1737 starts */
	EXEC SQL SELECT to_char(MAX(to_date(apl_frm_date,'MM/YYYY')),'MON-YYYY') into :h_apl_frm_date:i_apl_frm_date FROM IV_CLIENT_SERV_BASIS,SYS_IVCONTROLPARAM 
	WHERE CLIENT = :h_dl_client AND service_cd = '70' AND  to_date(apl_frm_date,'MM/YYYY') <= B_UPTO_DATE;
	IS_ANY_ORA_ERROR
	printf("\n applicable from date |%s| \n",h_apl_frm_date);
	/* Added by monica for kotak ISKB_1737 ends */

	EXEC SQL SELECT FEES_BASE,CHRG_BASE 
					INTO :h_fees_base,:h_chrg_base 
			 FROM	IV_CLIENT_SERV_BASIS 
			 WHERE  CLIENT=:h_dl_client
					AND SERVICE_CD='70'
					 AND APL_FRM_DATE = :h_apl_frm_date;  /* Added apl_frm_date by Monica for kotak ISKB_1737 */
	Alert("\n Oracle error while getting the FEES_BASE,CHRG_BAS for client %s is %d",h_dl_client,sqlca.sqlcode);

	if(sqlca.sqlcode == 1403)
	{
			/* Added by monica for kotak ISKB_1737 starts */
			EXEC SQL SELECT to_char(MAX(to_date(apl_frm_date,'MM/YYYY')),'MON-YYYY') into :h_apl_frm_date:i_apl_frm_date FROM IV_CLIENT_SERV_BASIS,SYS_IVCONTROLPARAM 
			WHERE CLIENT ='KOTAKBN' AND service_cd = '70' AND  to_date(apl_frm_date,'MM/YYYY') <= B_UPTO_DATE;
			IS_ANY_ORA_ERROR
			printf("\n applicable from date |%s| \n",h_apl_frm_date);
			/* Added by monica for kotak ISKB_1737 ends */
		
		
			EXEC SQL SELECT FEES_BASE,CHRG_BASE 
					INTO :h_fees_base,:h_chrg_base 
			 FROM	IV_CLIENT_SERV_BASIS 
			 WHERE  CLIENT='KOTAKBN'
					AND SERVICE_CD='70'
					 AND APL_FRM_DATE = :h_apl_frm_date;  /* Added apl_frm_date by Monica for kotak ISKB_1737 */
	
 		printf("\n sql error after getting FEES_BASE,CHRG_BASE(mandchgs) for client KOTAKBN is %d",sqlca.sqlcode);
	}

	printf("\n siva --- Feesbase   for client %s is %s",h_dl_client,h_fees_base);
	printf("\n siva --- ChargeBase for client %s is %s",h_dl_client,h_chrg_base);

	if( strcmp(h_fees_base,"NO. OF TRADES") == 0 &&
			strcmp(h_chrg_base,"NO. OF TRADES") == 0)
	{
			if(no_of_trades > 0)
			h_mand_CA_comm_amt = p_charge / no_of_trades ;

			printf("\n h_late_txn_comm_amt value is %f",h_mand_CA_comm_amt);


			printf("\n h_b_basis for client is %s",h_b_basis);
			if(!strcmp(h_b_basis,"INP"))
			{	
				
				// Input Basis === Updating deals for BO,RD,CV,SP in DL_DEAL 

				EXEC SQL UPDATE DL_DEAL SET COMM_AMT = :h_mand_CA_comm_amt
				WHERE IDENTIY_NO IN 
				(
					SELECT A.IDENTIY_NO
					FROM DL_DEAL A,CAEVENT B,SYS_IVCONTROLPARAM D 
					WHERE (((A.INSTR_CODE=B.INSTR_CODE) AND (B.CA_EVENT||B.OP_EVT_CLASS != 'BO'||'DM')) OR (B.CA_EVENT||B.OP_EVT_CLASS = 'BO'||'DM')) 		
					AND /*(*/A.INFORMATON=B.CORP_ID /*OR A.INFORMATON IS NULL)*/
					AND A.DL_CLASS IN ('18','19') 
					AND (A.PAY_MODE IS NULL OR A.PAY_MODE != 'N') /*Added by siva.ganapathi for ISKB_2295*/
					AND (B.CA_EVENT IN ('BO','RD')
						 OR (B.CA_EVENT IN ('CV', 'CR','SP') AND (A.DEAL_CD = '1')))
					AND ( B.OP_EVT_CLASS != 'PO' OR B.OP_EVT_CLASS IS NULL)
					/*	AND A.DEAL_STAT IN ('CS')	*/
					AND A.DEAL_STAT != 'DU'	/* ISKB-2247 Not to pick DU and DD deals */
					AND A.CLIENT = :h_dl_client  
					AND A.checker IS NOT NULL 
					AND (A.DATEOFBILLING is null OR  A.DATEOFBILLING = D.B_UPTO_DATE OR 
					( A.DATEOFBILLING != D.B_UPTO_DATE and A.AMEND_COUNT != A.NUMBER_A))  
					AND A.DATEOF_INPUT<=D.B_UPTO_DATE 
				);	

				printf("\n Inp Basis Oracle error after updating the DL_DEAL for BO,RD,CV,SP for Client %s is %d",h_dl_client,sqlca.sqlcode);
			
				 if( sqlca.sqlcode != 0 &&  sqlca.sqlcode != 1403)
				 {
						APL_GOBACK_FAIL;
				 }

				// Input Basis === Updating deals for BO,RD,CV,SP in DL_HISDEAL 

				EXEC SQL UPDATE DL_HISDEAL SET COMM_AMT = :h_mand_CA_comm_amt
				WHERE IDENTIY_NO IN 
				(
					SELECT A.IDENTIY_NO
					FROM DL_HISDEAL A,CAEVENT B,SYS_IVCONTROLPARAM D 
					WHERE (((A.INSTR_CODE=B.INSTR_CODE) AND (B.CA_EVENT||B.OP_EVT_CLASS != 'BO'||'DM')) OR (B.CA_EVENT||B.OP_EVT_CLASS = 'BO'||'DM')) 
					AND /*(*/A.INFORMATON=B.CORP_ID /*OR A.INFORMATON IS NULL)*/
					AND A.DL_CLASS IN ('18','19') 
					AND (A.PAY_MODE IS NULL OR A.PAY_MODE != 'N') /*Added by siva.ganapathi for ISKB_2295*/
					AND (B.CA_EVENT IN ('BO','RD')
							OR (B.CA_EVENT IN ('CV', 'CR','SP') AND (A.DEAL_CD = '1')))
					AND ( B.OP_EVT_CLASS != 'PO' OR B.OP_EVT_CLASS IS NULL)
					/*	AND A.DEAL_STAT IN ('CS') 	*/
					AND A.DEAL_STAT != 'DD'	/* ISKB-2247 Not to pick DU and DD deals */
					AND A.CLIENT = :h_dl_client  
					AND A.checker IS NOT NULL 
					AND (A.DATEOFBILLING is null OR  A.DATEOFBILLING = D.B_UPTO_DATE OR 
					( A.DATEOFBILLING != D.B_UPTO_DATE and A.AMEND_COUNT != A.NUMBER_A))  
					AND A.DATEOF_INPUT<=D.B_UPTO_DATE 
				);	

				printf("\n Oracle error after updating the DL_HISDEAL for BO,RD,CV,SP for Client %s is %d",h_dl_client,sqlca.sqlcode);
			
				 if( sqlca.sqlcode != 0 &&  sqlca.sqlcode != 1403)
				 {
						APL_GOBACK_FAIL;
				 }

			}
			else
			{
					// Settlement Basis === Updating deals for BO,RD,CV,SP in DL_DEAL 

					EXEC SQL UPDATE DL_DEAL SET COMM_AMT = :h_mand_CA_comm_amt
					WHERE IDENTIY_NO IN 
					(					
						SELECT A.IDENTIY_NO
						FROM DL_DEAL A,CAEVENT B,SYS_IVCONTROLPARAM D 
						WHERE (((A.INSTR_CODE=B.INSTR_CODE) AND (B.CA_EVENT||B.OP_EVT_CLASS != 'BO'||'DM')) OR (B.CA_EVENT||B.OP_EVT_CLASS = 'BO'||'DM')) 
						AND /*(*/A.INFORMATON=B.CORP_ID /*OR A.INFORMATON IS NULL)*/
						AND A.DL_CLASS IN ('18','19') 
						AND (A.PAY_MODE IS NULL OR A.PAY_MODE != 'N')/*Added by siva.ganapathi for ISKB_2295*/
						AND (B.CA_EVENT IN ('BO','RD')
						OR (B.CA_EVENT IN ('CV', 'CR','SP') AND (A.DEAL_CD = '1')))
						AND ( B.OP_EVT_CLASS != 'PO' OR B.OP_EVT_CLASS IS NULL)
						AND A.DEAL_STAT IN ('CS','SS') 
						AND A.CLIENT = :h_dl_client  
						AND A.checker IS NOT NULL 
						AND (A.DATEOFBILLING is null OR  A.DATEOFBILLING = D.B_UPTO_DATE OR 
						( A.DATEOFBILLING != D.B_UPTO_DATE and A.AMEND_COUNT != A.NUMBER_A))  
						AND (A.INSTRUMENT_DT IS NOT NULL AND A.INSTRUMENT_DT <= D.B_UPTO_DATE)
					);	

					printf("\n Settlement Basis Oracle error after updating the DL_DEAL for BO,RD,CV,SP for Client %s is %d",h_dl_client,sqlca.sqlcode);
				
					 if( sqlca.sqlcode != 0 &&  sqlca.sqlcode != 1403)
					 {
							APL_GOBACK_FAIL;
					 }

					// Settlement Basis === Updating deals for BO,RD,CV,SP in DL_DEAL 

					EXEC SQL UPDATE DL_HISDEAL SET COMM_AMT = :h_mand_CA_comm_amt
					WHERE IDENTIY_NO IN 
					(		
						SELECT A.IDENTIY_NO
						FROM DL_HISDEAL A,CAEVENT B,SYS_IVCONTROLPARAM D 
						WHERE (((A.INSTR_CODE=B.INSTR_CODE) AND (B.CA_EVENT||B.OP_EVT_CLASS != 'BO'||'DM')) OR (B.CA_EVENT||B.OP_EVT_CLASS = 'BO'||'DM')) 
						AND /*(*/A.INFORMATON=B.CORP_ID /*OR A.INFORMATON IS NULL)*/
						AND A.DL_CLASS IN ('18','19') 
						AND (A.PAY_MODE IS NULL OR A.PAY_MODE != 'N') /*Added by siva.ganapathi for ISKB_2295*/
						AND (B.CA_EVENT IN ('BO','RD')
							 OR (B.CA_EVENT IN ('CV', 'CR','SP') AND (A.DEAL_CD = '1')))
						AND ( B.OP_EVT_CLASS != 'PO' OR B.OP_EVT_CLASS IS NULL)
						AND A.DEAL_STAT IN ('CS','SS') 
						AND A.CLIENT = :h_dl_client  
						AND A.checker IS NOT NULL 
						AND (A.DATEOFBILLING is null OR  A.DATEOFBILLING = D.B_UPTO_DATE OR 
						( A.DATEOFBILLING != D.B_UPTO_DATE and A.AMEND_COUNT != A.NUMBER_A))  
						AND (A.INSTRUMENT_DT IS NOT NULL AND A.INSTRUMENT_DT <= D.B_UPTO_DATE) 
					);	
					
					printf("\n Settlement Basis Oracle error after updating the DL_HISDEAL for BO,RD,CV,SP for Client %s is %d",h_dl_client,sqlca.sqlcode);
				
					 if( sqlca.sqlcode != 0 &&  sqlca.sqlcode != 1403)
					 {
							APL_GOBACK_FAIL;
					 }
			}
		/*Added by siva.ganapathi for ISKB_2323*/
		//for CR and DV

	       EXEC SQL INSERT INTO IV_CACHEQUE (
				SELECT B.CORP_ID,B.CLIENT,D.B_UPTO_DATE,'70',:h_mand_CA_comm_amt
				FROM CAEVENT A,CACHEQUE B,MT_INSTRUMENT C,SYS_IVCONTROLPARAM D
				WHERE B.CLIENT=:h_dl_client
				AND A.CORP_ID=B.CORP_ID
				AND C.INSTR_CODE=A.INSTR_CODE
				AND B.STAT_PYMT ='CP' 
				AND A.CA_EVENT in ('DV')
				AND (B.DATEOF_PAYMENT > D.B_PREV_DATE AND B.DATEOF_PAYMENT <= D.B_UPTO_DATE )
				AND (B.DATEOFBILLING IS NULL OR B.DATEOFBILLING = D.B_UPTO_DATE)
				);	
		
		printf("\n No. of Trades /No. of Trades mand -- for CR and DV sql error after inserting data into IV_CACHEQUE  is %d ",sqlca.sqlcode);

		//For Partial type charges
		
		  EXEC SQL INSERT INTO IV_CACHEQUE (
				SELECT B.CORP_ID,B.CLIENT,D.B_UPTO_DATE,'70',:h_mand_CA_comm_amt
				FROM CAEVENT A,CACHEQUE B,MT_INSTRUMENT C,SYS_IVCONTROLPARAM D
				WHERE B.CLIENT=:h_dl_client
				AND A.CORP_ID=B.CORP_ID
				AND C.INSTR_CODE=A.INSTR_CODE
				AND B.STAT_PYMT IN ('CP','PP') 
				AND A.REDEM_RT < C.NOMINAL_VALUE
				AND A.CA_EVENT='RD' 
				AND A.OP_EVT_CLASS NOT IN ('PO') 
				AND (B.DATEOF_PAYMENT > D.B_PREV_DATE AND B.DATEOF_PAYMENT <= D.B_UPTO_DATE )
				AND (B.DATEOFBILLING IS NULL OR B.DATEOFBILLING = D.B_UPTO_DATE)	
			);	
	
		printf("\n No. of Trades /No. of Trades mand -- For Partial type charges sql error after inserting data into IV_CACHEQUE  is %d ",sqlca.sqlcode);

	}
	else
	{	
		  printf("\n Fees basis  for client %s is %s",h_dl_client,h_fees_base);
		  printf("\n charge basis for client %s is %s",h_dl_client,h_chrg_base);

		  printf("\n h_b_basis for client is %s",h_b_basis);

		if(!strcmp(h_b_basis,"INP")) //input date basis
		{			
					// Settlement Basis for BO,RD,CV,SP for updating the DL_DEAL table
                                    /*Added by siva.ganapathi for ISKB_2323*/
				    EXEC SQL UPDATE DL_DEAL SET COMM_AMT = :p_charge * AMOUNT / :no_of_trades
					WHERE IDENTIY_NO IN 
					(					
						SELECT A.IDENTIY_NO
						FROM DL_DEAL A,CAEVENT B,SYS_IVCONTROLPARAM D 
						WHERE (((A.INSTR_CODE=B.INSTR_CODE) AND (B.CA_EVENT||B.OP_EVT_CLASS != 'BO'||'DM')) OR (B.CA_EVENT||B.OP_EVT_CLASS = 'BO'||'DM')) 
						AND /*(*/A.INFORMATON=B.CORP_ID /*OR A.INFORMATON IS NULL)*/
						AND A.DL_CLASS IN ('18','19') 
						AND (A.PAY_MODE IS NULL OR A.PAY_MODE != 'N') /*Added by siva.ganapathi for ISKB_2295*/
						AND (B.CA_EVENT IN ('BO','RD')
							 OR (B.CA_EVENT IN ('CV', 'CR','SP') AND (A.DEAL_CD = '1')))
						AND ( B.OP_EVT_CLASS != 'PO' OR B.OP_EVT_CLASS IS NULL)
						/*	AND A.DEAL_STAT IN ('CS') 	*/
						AND A.DEAL_STAT != 'DU'	/* ISKB-2247 Not to pick DU and DD deals */
						AND A.CLIENT = :h_dl_client  
						AND A.checker IS NOT NULL 
						AND (A.DATEOFBILLING is null OR  A.DATEOFBILLING = D.B_UPTO_DATE OR 
						( A.DATEOFBILLING != D.B_UPTO_DATE and A.AMEND_COUNT != A.NUMBER_A))  
						AND A.DATEOF_INPUT<=D.B_UPTO_DATE 
					);	

					printf("\n Input Basis Oracle error after updating the DL_DEAL for BO,RD,CV,SP for Client %s is %d",h_dl_client,sqlca.sqlcode);
				
					 if( sqlca.sqlcode != 0 &&  sqlca.sqlcode != 1403)
					 {
							APL_GOBACK_FAIL;
					 }
					
					// Settlement Basis for BO,RD,CV,SP for updating the DL_HISDEAL table
                                    /*Added by siva.ganapathi for ISKB_2323*/
					EXEC SQL UPDATE DL_DEAL SET COMM_AMT = :p_charge * AMOUNT / :no_of_trades
					WHERE IDENTIY_NO IN 
					(					
						 SELECT A.IDENTIY_NO
						FROM DL_HISDEAL A,CAEVENT B,SYS_IVCONTROLPARAM D 
						WHERE (((A.INSTR_CODE=B.INSTR_CODE) AND (B.CA_EVENT||B.OP_EVT_CLASS != 'BO'||'DM')) OR (B.CA_EVENT||B.OP_EVT_CLASS = 'BO'||'DM')) 
						AND /*(*/A.INFORMATON=B.CORP_ID /*OR A.INFORMATON IS NULL)*/			
						AND A.DL_CLASS IN ('18','19') 
						AND (A.PAY_MODE IS NULL OR A.PAY_MODE != 'N') /*Added by siva.ganapathi for ISKB_2295*/
						AND (B.CA_EVENT IN ('BO','RD')
							 OR (B.CA_EVENT IN ('CV', 'CR','SP') AND (A.DEAL_CD = '1')))
						AND ( B.OP_EVT_CLASS != 'PO' OR B.OP_EVT_CLASS IS NULL)
						/*	AND A.DEAL_STAT IN ('CS')  	*/
						AND A.DEAL_STAT != 'DD'	/* ISKB-2247 Not to pick DU and DD deals */
						AND A.CLIENT = :h_dl_client  
						AND A.checker IS NOT NULL 
						AND (A.DATEOFBILLING is null OR  A.DATEOFBILLING = D.B_UPTO_DATE OR 
						( A.DATEOFBILLING != D.B_UPTO_DATE and A.AMEND_COUNT != A.NUMBER_A))  
						AND A.DATEOF_INPUT<=D.B_UPTO_DATE 
					);	

					printf("\n Input Basis Oracle error after updating the DL_HISDEAL for BO,RD,CV,SP for Client %s is %d",h_dl_client,sqlca.sqlcode);
				
					 if( sqlca.sqlcode != 0 &&  sqlca.sqlcode != 1403)
					 {
							APL_GOBACK_FAIL;
					 }
		}
		else
		{
                                    /*Added by siva.ganapathi for ISKB_2323*/
					EXEC SQL UPDATE DL_DEAL SET COMM_AMT = :p_charge * AMOUNT / :no_of_trades
					WHERE IDENTIY_NO IN 
					(					
				        SELECT A.IDENTIY_NO
						FROM DL_DEAL A,CAEVENT B,SYS_IVCONTROLPARAM D 
						WHERE (((A.INSTR_CODE=B.INSTR_CODE) AND (B.CA_EVENT||B.OP_EVT_CLASS != 'BO'||'DM')) OR (B.CA_EVENT||B.OP_EVT_CLASS = 'BO'||'DM')) 
						AND /*(*/A.INFORMATON=B.CORP_ID /*OR A.INFORMATON IS NULL)*/
						AND A.DL_CLASS IN ('18','19') 
						AND (B.CA_EVENT IN ('BO','RD')
							 OR (B.CA_EVENT IN ('CV', 'CR','SP') AND (A.DEAL_CD = '1')))
						AND ( B.OP_EVT_CLASS != 'PO' OR B.OP_EVT_CLASS IS NULL)
						AND A.DEAL_STAT IN ('CS','SS') 
						AND A.CLIENT = :h_dl_client  
						AND A.checker IS NOT NULL 
						AND (A.DATEOFBILLING is null OR  A.DATEOFBILLING = D.B_UPTO_DATE OR 
						( A.DATEOFBILLING != D.B_UPTO_DATE and A.AMEND_COUNT != A.NUMBER_A))  
						AND (A.INSTRUMENT_DT IS NOT NULL AND A.INSTRUMENT_DT <= D.B_UPTO_DATE) 
					);	

					printf("\n Settlement Basis Oracle error after updating the DL_DEAL for BO,RD,CV,SP for Client %s is %d",h_dl_client,sqlca.sqlcode);
				
					 if( sqlca.sqlcode != 0 &&  sqlca.sqlcode != 1403)
					 {
							APL_GOBACK_FAIL;
					 }
                                    /*Added by siva.ganapathi for ISKB_2323*/
					EXEC SQL UPDATE DL_HISDEAL SET COMM_AMT = :p_charge * AMOUNT / :no_of_trades
					WHERE IDENTIY_NO IN 
					(					
					     SELECT A.IDENTIY_NO
						FROM DL_HISDEAL A,CAEVENT B,SYS_IVCONTROLPARAM D 
						WHERE (((A.INSTR_CODE=B.INSTR_CODE) AND (B.CA_EVENT||B.OP_EVT_CLASS != 'BO'||'DM')) OR (B.CA_EVENT||B.OP_EVT_CLASS = 'BO'||'DM')) 
						AND /*(*/A.INFORMATON=B.CORP_ID /*OR A.INFORMATON IS NULL)*/			
						AND A.DL_CLASS IN ('18','19') 
						AND (B.CA_EVENT IN ('BO','RD')
							 OR (B.CA_EVENT IN ('CV', 'CR','SP') AND (A.DEAL_CD = '1')))
						AND ( B.OP_EVT_CLASS != 'PO' OR B.OP_EVT_CLASS IS NULL)
						AND A.DEAL_STAT IN ('CS','SS')  
						AND A.CLIENT = :h_dl_client  
						AND A.checker IS NOT NULL 
						AND (A.DATEOFBILLING is null OR  A.DATEOFBILLING = D.B_UPTO_DATE OR 
						( A.DATEOFBILLING != D.B_UPTO_DATE and A.AMEND_COUNT != A.NUMBER_A))  
						AND (A.INSTRUMENT_DT IS NOT NULL AND A.INSTRUMENT_DT <= D.B_UPTO_DATE) 
					);	

					printf("\n Settlement Basis Oracle error after updating the DL_DEAL for BO,RD,CV,SP for Client %s is %d",h_dl_client,sqlca.sqlcode);
				
					 if( sqlca.sqlcode != 0 &&  sqlca.sqlcode != 1403)
					 {
							APL_GOBACK_FAIL;
					 }
			
		}

                /*Added by siva.ganapathi for ISKB_2323*/
                //for CR and DV
		 EXEC SQL INSERT INTO IV_CACHEQUE (
				SELECT B.CORP_ID,B.CLIENT,D.B_UPTO_DATE,'70', :p_charge * B.CURR_PYMT / :no_of_trades
				FROM CAEVENT A,CACHEQUE B,MT_INSTRUMENT C,SYS_IVCONTROLPARAM D
				WHERE B.CLIENT=:h_dl_client
				AND A.CORP_ID=B.CORP_ID
				AND C.INSTR_CODE=A.INSTR_CODE
				AND B.STAT_PYMT ='CP'
				AND A.CA_EVENT in ('DV') 
				AND (B.DATEOF_PAYMENT > D.B_PREV_DATE AND B.DATEOF_PAYMENT <= D.B_UPTO_DATE )
				AND (B.DATEOFBILLING IS NULL OR B.DATEOFBILLING = D.B_UPTO_DATE)
			);	

		printf("\n Counter Value / Counter Value mand -- for CR and DV sql error after inserting data into IV_CACHEQUE  is %d ",sqlca.sqlcode);
		
		//For Partial type charges 
		EXEC SQL INSERT INTO IV_CACHEQUE (
				SELECT B.CORP_ID,B.CLIENT,D.B_UPTO_DATE,'70', :p_charge * B.CURR_PYMT / :no_of_trades
				FROM CAEVENT A,CACHEQUE B,MT_INSTRUMENT C,SYS_IVCONTROLPARAM D
				WHERE B.CLIENT=:h_dl_client
				AND A.CORP_ID=B.CORP_ID
				AND C.INSTR_CODE=A.INSTR_CODE 
				AND B.STAT_PYMT IN ('CP','PP')  
				AND A.REDEM_RT < C.NOMINAL_VALUE
				AND A.CA_EVENT='RD'
				AND (B.DATEOF_PAYMENT > D.B_PREV_DATE AND B.DATEOF_PAYMENT <= D.B_UPTO_DATE )
				AND (B.DATEOFBILLING IS NULL OR B.DATEOFBILLING = D.B_UPTO_DATE)	
				AND A.OP_EVT_CLASS IN ('CA','RD')
			);	

		printf("\n Counter Value / Counter Value mand -- For Partial type charges sql error after inserting data into IV_CACHEQUE  is %d ",sqlca.sqlcode);
	}

APL_GOBACK_SUCCESS // AIX - Warnings

	RETURN_SUCCESS:
		APL_IF_DEBUG
		{
		  CO_ProcMonitor(APL_OUT_FILE,"Exiting Successfully Out Of IV_Proc_CalcMandCACommAmt() \n", NULL, NULL);
		}
	return APL_SUCCESS;

	RETURN_FAILURE:
		APL_IF_DEBUG
		{
		   CO_ProcMonitor(APL_OUT_FILE,"Exiting Unsuccessfully Out Of IV_Proc_CalcMandCACommAmt() \n", NULL, NULL);
		}
	return APL_FAILURE;
}

/*Added by siva.ganapathi for Annexures on  02/06/2009*/
/* This Function used to calculate the depositary charges for each transaction for Fees/Charge Basis is OUNTERVALUE/COUNTERVALUE
   Tha calculate value is updated into the table "IV_DEAL_OTHFEE"
   While updatation, first we will check the record is already available in the table using Client code and Identiy no.
   If the record is availble then the calculated value is updated into the table for that corresponding record
   If the record is not availble then the calculated value and the corresponding details such as Client,Identiy_no,dateof billing are inserted into the table.We will insert the value 0 for the column LATE_TRANS_FEE
*/

int IV_Proc_CalcDepoCommAmtCntVal( char *chr_p_client, 
								   char *h_identiy_no,
								   char *chr_h_bl_upto_dt,
								   double p_charge,
								   int *int_p_retstat,
						           DEBUG_INFO_STRUCT_H **l_debug_info_ptr
								 )

{	
	printf("\n In IV_Proc_CalcDepoCommAmtCntVal() funtion ");
	char h_dl_client[APL_CLIENT_LENGTH] = APL_NULL_STRING;
	int l_rec_count=0;	
	//char h_str_depo_comm_amt[20] ;
	//double h_depo_comm_amt;
	double l_late_trans_fee ;
	struct sqlca sqlca;

	EXEC SQL BEGIN DECLARE SECTION;
	EXEC SQL VAR h_dl_client IS STRING;
	EXEC SQL END DECLARE SECTION;
	
	IV_DEAL_OTHFEE_STRUCT_H l_iv_deal_othfee_struct_h;
	IV_DEAL_OTHFEE_STRUCT_I l_iv_deal_othfee_struct_i = {0, 0, 0, 0, 0, 0};
	

	memset(h_dl_client,APL_NULL_CHAR,sizeof(h_dl_client));
	
	strcpy(h_dl_client,chr_p_client);

	printf("\n In IV_Proc_CalcDepoCommAmtCntVal() function client is %s",h_dl_client);
	printf("\n In IV_Proc_CalcDepoCommAmtCntVal() function Bill date is %s",chr_h_bl_upto_dt);
	printf("\n In IV_Proc_CalcDepoCommAmtCntVal() function Identiy No is %s",h_identiy_no);
	printf("\n In IV_Proc_CalcDepoCommAmtCntVal() function charge is %f",p_charge);
	
	//h_depo_comm_amt = p_charge ; 
	
	strcpy(l_iv_deal_othfee_struct_h.h_client,h_dl_client);
	strcpy(l_iv_deal_othfee_struct_h.h_identiy_no,h_identiy_no);
	strcpy(l_iv_deal_othfee_struct_h.h_bill_date,chr_h_bl_upto_dt);
	
	
	l_iv_deal_othfee_struct_h.h_depo_trans_fee = p_charge ;
					
	l_late_trans_fee = 0.0;
	
	l_iv_deal_othfee_struct_h.h_late_trans_fee = l_late_trans_fee;
					
	strcpy(l_iv_deal_othfee_struct_h.h_depo_late_flag,"D");

	printf("\n Before inserting the record into IV_DEAL_OTHFEE");

	printf("\n l_iv_deal_othfee_struct_h.h_client is %s and indicator is %d ",l_iv_deal_othfee_struct_h.h_client,l_iv_deal_othfee_struct_i.i_client);
	printf("\n l_iv_deal_othfee_struct_h.h_identiy_no is %s and indicator is %d",l_iv_deal_othfee_struct_h.h_identiy_no,l_iv_deal_othfee_struct_i.i_identiy_no);
	printf("\n l_iv_deal_othfee_struct_h.h_bill_date is %s and indicator is %d",l_iv_deal_othfee_struct_h.h_bill_date,l_iv_deal_othfee_struct_i.i_bill_date);
	printf("\n l_iv_deal_othfee_struct_h.h_depo_trans_fee is %f and indicator is %d ",l_iv_deal_othfee_struct_h.h_depo_trans_fee,l_iv_deal_othfee_struct_i.i_depo_trans_fee);
	printf("\n l_iv_deal_othfee_struct_h.h_late_trans_fee is %f and indicator is %d ",l_iv_deal_othfee_struct_h.h_late_trans_fee,l_iv_deal_othfee_struct_i.i_late_trans_fee);
	printf("\n l_iv_deal_othfee_struct_h.h_depo_late_flag is %s and indicator is %d ",l_iv_deal_othfee_struct_h.h_depo_late_flag,l_iv_deal_othfee_struct_i.i_depo_late_flag);

	
	EXEC SQL INSERT INTO
		IV_DEAL_OTHFEE VALUES (:l_iv_deal_othfee_struct_h:l_iv_deal_othfee_struct_i);
	
	printf("\n **2113** sqlca.sqlcode is %d",sqlca.sqlcode);

	IS_ANY_ORA_ERROR

	
	/*EXEC SQL SELECT COUNT(*) INTO :l_rec_count
			 FROM IV_DEAL_OTHFEE
			 WHERE CLIENT = :h_dl_client AND 
				   IDENTIY_NO = :h_identiy_no ;

	printf("\n **2111** Oracle error after getting the count from   IV_DEAL_OTHFEE is %d",sqlca.sqlcode);
	
	printf("\n l_rec_count is %d",l_rec_count);

	if(l_rec_count != 0 )
	{
		printf("\n Identiy no. already exists in the table ");
		printf("\n Identiy no. %s",h_identiy_no);
		// updating the depo_amt in the table 
		EXEC SQL UPDATE IV_DEAL_OTHFEE
						SET    DEPO_TRANS_FEE = :h_depo_comm_amt,
							   DEPO_CHRG_IND = 'Y'
						WHERE  CLIENT     = :h_dl_client AND
							   IDENTIY_NO = :h_identiy_no ;
		
		printf("\n **2112** sqlca.sqlcode is %d",sqlca.sqlcode);
	}
	else
	{
		printf("\n Inserting record into the table IV_DEAL_OTHFEE ");	
		
		fflush(stdout);
			
		strcpy(l_iv_deal_othfee_struct_h.h_client,h_dl_client);
		strcpy(l_iv_deal_othfee_struct_h.h_identiy_no,h_identiy_no);
		strcpy(l_iv_deal_othfee_struct_h.h_bill_date,chr_h_bl_upto_dt);
		
		//sprintf(h_str_depo_comm_amt,"%f",h_depo_comm_amt);
		l_iv_deal_othfee_struct_h.h_depo_trans_fee=h_depo_comm_amt ;
		
		l_late_trans_fee =0;
		//sprintf(l_str_late_trans_fee,"%f",l_late_trans_fee);

		l_iv_deal_othfee_struct_h.h_late_trans_fee = l_late_trans_fee;
		
		strcpy(l_iv_deal_othfee_struct_h.h_late_trans_ind,"N");
		strcpy(l_iv_deal_othfee_struct_h.h_depo_chrg_ind,"Y");

		printf("\n l_iv_deal_othfee_struct_h.h_client is %s",l_iv_deal_othfee_struct_h.h_client);
		printf("\n l_iv_deal_othfee_struct_h.h_identiy_no is %s",l_iv_deal_othfee_struct_h.h_identiy_no);
		printf("\n l_iv_deal_othfee_struct_h.h_bill_dateis %s",l_iv_deal_othfee_struct_h.h_bill_date);
		printf("\n l_iv_deal_othfee_struct_h.h_depo_trans_fee is %f ",l_iv_deal_othfee_struct_h.h_depo_trans_fee);
		printf("\n l_iv_deal_othfee_struct_h.h_late_trans_fee is %f ",l_iv_deal_othfee_struct_h.h_late_trans_fee);
		printf("\n l_iv_deal_othfee_struct_h.h_late_trans_ind is %s ",l_iv_deal_othfee_struct_h.h_late_trans_ind);
		printf("\n l_iv_deal_othfee_struct_h.h_depo_chrg_ind is %s ",l_iv_deal_othfee_struct_h.h_depo_chrg_ind);
		
		EXEC SQL INSERT INTO
			IV_DEAL_OTHFEE VALUES (:l_iv_deal_othfee_struct_h:l_iv_deal_othfee_struct_i);
		
		printf("\n **2113** Oracle error during insertion of record into the IV_DEAL_OTHFEE sqlca.sqlcode is %d",sqlca.sqlcode);

		
		IS_ANY_ORA_ERROR
	}*/

APL_GOBACK_SUCCESS // AIX - Warnings

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
		  CO_ProcMonitor(APL_OUT_FILE,"Exiting Successfully Out Of IV_Proc_CalcDepoCommAmtCntVal() \n", NULL, NULL);
		}
	return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
		   CO_ProcMonitor(APL_OUT_FILE,"Exiting Unsuccessfully Out Of IV_Proc_CalcDepoCommAmtCntVal() \n", NULL, NULL);
		}
	return APL_FAILURE;
}


/*added by shruthi kumbla ISKB_1737 start*/



/*Addition of PLine Security Service    ISKB_1737  Shruthi Kumbla */
int IV_Proc_GenPLSecurityCharges(char *chr_p_client, char *p_cltt_str,char *p_mstclt_a,int *int_p_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	printf("\n\n****** Inside IV_Proc_GenPLSecurityCharges **********\n\n");
	EXEC SQL BEGIN DECLARE SECTION;

	char chr_h_param_code[IV_PARAM_LEN],h_company[11],chr_h_company[11];
	short i_company=0;
	short i_h_company=0;
	
	
	char chr_l_bl_upto_dt[APL_DATE_LEN] = APL_NULL_STRING;

	
	char chr_h_instr_ccy[APL_CCYCODE_LEN];
	char chr_instr_curr[APL_CCYCODE_LEN];
	char chr_sec_curr[APL_CCYCODE_LEN];
	short i_instr_curr=0;
	short i_sec_curr=0;
	char chr_mst_fee_ccycode[APL_CCYCODE_LEN],chr_mst_bl_ccycode[APL_CCYCODE_LEN];
	char h_dl_client[APL_CLIENT_LENGTH]= APL_NULL_STRING;
	char chr_h_pls_stmt[5000] = APL_NULL_STRING;
	char chr_h_bl_upto_dt[APL_DATE_LEN];
	char chr_h_first_bdt[APL_DATE_LEN];
	char chr_h_last_bdt[APL_DATE_LEN];
	char h_deal_dt[APL_DATE_LEN];
	char chr_h_chrg_type=NULL;
	char chr_h_srv_ind[50];
	double no_of_days = 0.0;
	double dbl_billing_date_diff = 0.0;
	char chr_pls_monthdt[20]=APL_NULL_STRING;
	char chr_pls_mdt[20]=APL_NULL_STRING;
	char chr_pls_last_billdt[20]=APL_NULL_STRING;
	char chr_pls_month[APL_CCYCODE_LEN]=APL_NULL_STRING;
	char chr_group_ind[4]=APL_NULL_STRING;
	int int_l_uptodate_year=0;

        
	int int_l_err_flg = IV_SUCCESS; 
	int int_h_mst_fee_decimallen=0, int_h_mst_bl_decimallen=0;
	int int_l_uptodate_mon=0;
	int int_l_pls_mon=0;
	int int_l_next_year=0;
	double dbl_pro_data_days=0;
	short i_deal_dt=0;
	long h_pline_security = PERLINE_SECURITY;
	

	char chr_pro_flag=NULL;
	
	short i_first_bdt = 0;
	short i_last_bdt = 0;
	short i_chrg_type=0;
	char *chr_l_last = (char *)NULL;
	char chr_l_uptodate_yyyy[5] = APL_NULL_STRING;
	char chr_l_uptodt_yyyy[5] = APL_NULL_STRING;
	char chr_l_nextyr_yyyy[5] = APL_NULL_STRING;
	char chr_l_uptodate_mm[3] = APL_NULL_STRING;
	
	
	EXEC SQL VAR chr_h_bl_upto_dt IS STRING;
	EXEC SQL VAR chr_l_bl_upto_dt IS STRING;
	EXEC SQL VAR h_deal_dt IS STRING;
	EXEC SQL VAR h_dl_client  	IS STRING;
	EXEC SQL VAR chr_h_param_code  	IS STRING;
	EXEC SQL VAR chr_pls_month		IS STRING;
	EXEC SQL VAR chr_group_ind		IS STRING;
	EXEC SQL VAR h_company 		IS STRING;
	EXEC SQL VAR chr_h_company 		IS STRING;
	EXEC SQL VAR chr_pls_monthdt 		IS STRING;
	EXEC SQL VAR chr_pls_mdt 		IS STRING;
	EXEC SQL VAR chr_pls_last_billdt 		IS STRING;
      
	
	
	EXEC SQL VAR chr_h_pls_stmt 	IS STRING;
	
	

	EXEC SQL VAR chr_h_first_bdt 		IS STRING;
	EXEC SQL VAR chr_h_last_bdt 		IS STRING;
	EXEC SQL VAR chr_l_uptodate_yyyy 		IS STRING;
	EXEC SQL VAR chr_l_uptodt_yyyy 		IS STRING;
	EXEC SQL VAR chr_l_nextyr_yyyy 		IS STRING;
	EXEC SQL VAR chr_l_uptodate_mm 		IS STRING;

	
	struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	int int_i_cnt=0;
        
	
	char proc_data[IV_PARAM_LEN],chr_prev_param_str[IV_PARAM_LEN];
	char chr_acct_str[IV_CLT_LEN],chr_l_buf[BUFFER_LEN];
	char chr_l_param_code[IV_PARAM_LEN];
	char chr_mstacctstr[IV_CLT_LEN];
	
	double srv_charge=0.0,tot_pls_chg=0.0;

	double l_nil_fees=0.0,l_minimumfee=0.0,l_maximum_fee=0.0;
	double l_minimumfee_adj=0.0, l_maximum_fee_adj=0.0;
	double l_exchg_rt=1.0,l_subbl_mstbl_rt = 1.0;
	double h_exchg_rt_mstfee_bl=1.0; 
  int l_int_cnt=0;
	int int_retstat=0;
	int int_is_trcnt_cur_open = 0;
	char chr_l_charge_type,chr_l_fee_type,*chr_h_actcode = NULL,*k,chr_h_pls_stmt1[1500]= APL_NULL_STRING;
	char chr_h_pls_stmt2[1500]= APL_NULL_STRING;
	char chr_l_charge_basis[IV_STRING_LEN],chr_l_fee_basis[IV_STRING_LEN]; 
	char *chr_l_param_dep = NULL,*chr_newtdep, *int_pos = NULL,*chr_tdep;
	IV_DATA_STRUCT_H l_iv_data_struct_h_dlgrp[50];
	IV_CLIENTPARAM_STRUCT_H l_iv_clientparam_struct_hb;
	IV_CLIENT_SERV_BASIS_STRUCT l_iv_client_serv_basis_structa;
	IV_CLIENTSETUP_STRUCT l_iv_clientsetup_struct;
	double l_holdings =0;
	int int_chk_for_pro = 0;
	int int_nopos = 0;

	char l_str_monthenddt[APL_DATE_LEN];
	char l_str_custdt[APL_DATE_LEN];

	short i_holdings =0;
	sqlca.sqlcode = 0;
	int int_pls_mon_exists=0,int_ann_no_days=365;
	int int_record_exists=0;
 k = (char *) calloc(IV_PARAM_LEN,sizeof(char));
 chr_newtdep = (char *) calloc(IV_PARAM_LEN,sizeof(char));
 chr_tdep = (char *) calloc(IV_PARAM_LEN,sizeof(char));
	
	memset(l_iv_data_struct_h_dlgrp[0].proc_data,APL_NULL_CHAR,100);
	memset(chr_acct_str,APL_NULL_CHAR,IV_CLT_LEN);
	memset(chr_mstacctstr,APL_NULL_CHAR,IV_CLT_LEN);
	memset(chr_l_charge_basis,APL_NULL_CHAR,IV_STRING_LEN);
	memset(chr_l_fee_basis,APL_NULL_CHAR,IV_STRING_LEN);
	memset(chr_l_param_code,APL_NULL_CHAR,IV_PARAM_LEN);
	memset(chr_pls_month,APL_NULL_CHAR,APL_CCYCODE_LEN);
	memset(chr_group_ind,APL_NULL_CHAR,4);
	memset(chr_h_bl_upto_dt,APL_NULL_CHAR,APL_DATE_LEN);
	memset(chr_l_bl_upto_dt,APL_NULL_CHAR,APL_DATE_LEN);
	
	memset(chr_h_first_bdt,APL_NULL_CHAR,APL_DATE_LEN);
	memset(chr_h_last_bdt,APL_NULL_CHAR,APL_DATE_LEN);
	memset(h_deal_dt,APL_NULL_CHAR,APL_DATE_LEN);
	memset(chr_h_pls_stmt1,APL_NULL_CHAR,1500);
	memset(chr_h_pls_stmt2,APL_NULL_CHAR,1500);
	memset(chr_h_pls_stmt, APL_NULL_CHAR, 5000); 
	memset(chr_pls_monthdt, APL_NULL_CHAR, sizeof(chr_pls_monthdt)); 
	memset(chr_pls_mdt, APL_NULL_CHAR, sizeof(chr_pls_mdt)); 
	memset(chr_pls_last_billdt, APL_NULL_CHAR, sizeof(chr_pls_last_billdt)); 
	memset(h_company, APL_NULL_CHAR, 11); 
	memset(chr_h_company, APL_NULL_CHAR, 11); 

	memset(chr_h_instr_ccy, APL_NULL_CHAR, APL_CCYCODE_LEN);
	memset(chr_instr_curr, APL_NULL_CHAR, APL_CCYCODE_LEN);
	memset(chr_sec_curr, APL_NULL_CHAR, APL_CCYCODE_LEN);
	memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
	memset(chr_prev_param_str,APL_NULL_CHAR,IV_PARAM_LEN);
	memset(proc_data,APL_NULL_CHAR,IV_PARAM_LEN);
	memset(l_str_custdt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_str_monthenddt, APL_NULL_CHAR, APL_DATE_LEN);
	
	memset(chr_h_srv_ind,APL_NULL_CHAR,51);
	memset(chr_mst_fee_ccycode,APL_NULL_CHAR,APL_CCYCODE_LEN);
	memset(chr_mst_bl_ccycode,APL_NULL_CHAR,APL_CCYCODE_LEN);
	memset(chr_l_uptodate_yyyy,APL_NULL_CHAR,5);
	memset(chr_l_uptodt_yyyy,APL_NULL_CHAR,5);
	memset(chr_l_nextyr_yyyy,APL_NULL_CHAR,5);
	memset(chr_l_uptodate_mm,APL_NULL_CHAR,3);
	memset(&l_iv_clientsetup_struct, NULL, sizeof(IV_CLIENTSETUP_STRUCT));
	memset(&l_iv_clientparam_struct_hb, NULL, sizeof(IV_CLIENTPARAM_STRUCT_H));
	memset(&l_iv_client_serv_basis_structa, NULL, sizeof(IV_CLIENT_SERV_BASIS_STRUCT));

	/* PJ Calloc needed for actcode */
	chr_h_actcode =  (char *)calloc(APL_CLIENT_LENGTH,sizeof(char));
	APL_MALLOC_FAIL(chr_h_actcode);
	memset(chr_h_actcode,NULL,sizeof(char));
	
	*int_p_retstat = IV_SUCCESS;
	APL_IF_DEBUG
	{
		Alert("Generating Per Line Security Charges for client");
  		CO_ProcMonitor(TechRep,"Generating Per Line Security Charges for client ",NULL,NULL);
  		memset(chr_l_buf,NULL,BUFFER_LEN);
  		sprintf(chr_l_buf," %s",chr_p_client);
  		CO_ProcMonitor(TechRep,chr_l_buf,NULL,NULL);
	}
	memset(h_dl_client,APL_NULL_CHAR,sizeof(h_dl_client));
	strcpy(h_dl_client,chr_p_client);
	Alert("chr_g_bl_upto_dt is |%s|",chr_g_bl_upto_dt);
	strcpy(chr_h_bl_upto_dt,chr_g_bl_upto_dt);
	strcpy(chr_h_bl_upto_dt,strtok_r(chr_h_bl_upto_dt," ",&int_pos));
	strcat(chr_h_bl_upto_dt," 23:59:59");
	Alert("chr_h_bl_upto_dt is |%s|",chr_h_bl_upto_dt);
	strcpy(chr_acct_str,p_cltt_str);

	chr_h_actcode = strtok_r(chr_acct_str,";",&k);

	Alert("Client is |%s|",chr_h_actcode);
	strcpy(chr_l_bl_upto_dt,chr_g_bl_upto_dt);
	strcpy(chr_l_buf, strtok(chr_l_bl_upto_dt, " "));
	Alert("chr_l_bl_upto_dt is |%s|",chr_l_bl_upto_dt);

	strtok_r(chr_l_buf, "/", &chr_l_last);
	strcpy(chr_l_uptodate_mm, strtok_r(NULL, "/", &chr_l_last));
	strcpy(chr_l_uptodate_yyyy, strtok_r(NULL, "/", &chr_l_last));
	Alert("chr_l_uptodate_mm |%s|",chr_l_uptodate_mm);
	Alert("chr_l_uptodate_yyyy |%s|",chr_l_uptodate_yyyy);
	int_l_uptodate_year = atoi(chr_l_uptodate_yyyy);
	int_l_next_year=	int_l_uptodate_year+1;
	Alert("int_l_uptodate_year |%d|",int_l_uptodate_year);
	Alert("int_l_next_year |%d|",int_l_next_year);
	snprintf(chr_l_nextyr_yyyy, 5,"%d",int_l_next_year);
	Alert("chr_l_nextyr_yyyy |%s|",chr_l_nextyr_yyyy);

	strcpy(l_str_custdt,chr_g_bl_upto_dt);
	if( APL_FAILURE == CO_GetPrevBusinessDay(l_str_custdt, l_str_monthenddt, l_debug_info_ptr))
			{
				*int_p_retstat = int_retstat;
				APL_GOBACK_FAIL
			}

	strcpy(l_str_custdt, l_str_monthenddt);

	
	
	


	if(chr_g_bl_gen == 'M')
	{
		strcpy(chr_mstacctstr,p_mstclt_a);
		strcat(chr_mstacctstr,";");
	
		if(APL_FAILURE == IV_Rtv_IVCUSTSETUP(p_mstclt_a,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error : Account %s  not int_found in billing system\n",p_mstclt_a);
				fflush(fp);
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				APL_GOBACK_FAIL;
			}
		}
	
		strcat(chr_mstacctstr,l_iv_clientsetup_struct.default_feeclt);
		strcat(chr_mstacctstr,";");
		//strcat(chr_mstacctstr,chr_g_cb_code);
		strcat(chr_mstacctstr,";");
		strcat(chr_mstacctstr,APL_NULL_STRING);

	
		strcpy(chr_mst_fee_ccycode,APL_NULL_STRING);
		strcpy(chr_mst_fee_ccycode,l_iv_clientsetup_struct.fees_ccy);
		strcpy(chr_mst_bl_ccycode,APL_NULL_STRING);
		strcpy(chr_mst_bl_ccycode,l_iv_clientsetup_struct.b_ccycd);


      if ( APL_FAILURE == CR_Rtv_CCYFldVal(chr_mst_fee_ccycode,"decimallen",&int_h_mst_fee_decimallen,l_debug_info_ptr))
      {
         fprintf(fp,"Error : Could not fetch decimal length for currency %s\n", chr_mst_fee_ccycode);
         fflush(fp);
         int_bl_err_level = 1;
         *int_p_retstat = int_retstat;
         if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
         {
            CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
            CO_FreeErrLst(l_debug_info_ptr);
         }
      }


		h_exchg_rt_mstfee_bl = 1.0;
      if (strcmp(chr_mst_bl_ccycode, chr_mst_fee_ccycode) != 0)
      {
         int_retstat = IV_SUCCESS;
         if(APL_FAILURE == IV_Rtv_ExchRate(chr_mst_fee_ccycode,chr_mst_bl_ccycode,chr_g_bl_upto_dt,&h_exchg_rt_mstfee_bl, &int_retstat,l_debug_info_ptr))
         {
            fprintf(fp,"Error : Exchange Rate not int_found for currency %s %s\n",chr_mst_fee_ccycode,chr_mst_bl_ccycode);
            fflush(fp);
            int_bl_err_level = 1;
            *int_p_retstat = int_retstat;
         }
       }

      if ( APL_FAILURE == CR_Rtv_CCYFldVal(chr_mst_bl_ccycode,"decimallen",&int_h_mst_bl_decimallen,l_debug_info_ptr))
      {
         fprintf(fp,"Error : Could not fetch decimal length for currency %s\n", chr_mst_bl_ccycode);
         fflush(fp);
         int_bl_err_level = 1;
         *int_p_retstat = int_retstat;
         if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
         {
            CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
            CO_FreeErrLst(l_debug_info_ptr);
         }
      }

		

      l_subbl_mstbl_rt = 1.0;
      if (strcmp(chr_mst_bl_ccycode, chr_g_bl_ccycode) != 0)
      {
         int_retstat = IV_SUCCESS;
         if(APL_FAILURE == IV_Rtv_ExchRate(chr_g_bl_ccycode,chr_mst_bl_ccycode,chr_g_bl_upto_dt,&l_subbl_mstbl_rt, &int_retstat,l_debug_info_ptr))
         {
            fprintf(fp,"Error : Exchange Rate not int_found for currency %s %s\n",chr_g_bl_ccycode,chr_mst_bl_ccycode);
            fflush(fp);
            int_bl_err_level = 1;
            *int_p_retstat = int_retstat;
         }
       }

		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Rtv_GetServBasis( chr_mstacctstr,PERLINE_SECURITY,&l_iv_client_serv_basis_structa,&int_retstat,l_debug_info_ptr))
		{
			fprintf(fp,"Error : Service basis not int_found for service %d for master client of client %s\n",PERLINE_SECURITY, chr_p_client);
			fflush(fp);
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}

			*int_p_retstat = int_retstat;
			APL_GOBACK_FAIL;

		}
		strcpy(chr_l_fee_basis,l_iv_client_serv_basis_structa.fees_base);
		strcpy(chr_l_charge_basis,l_iv_client_serv_basis_structa.chrg_base);
		chr_l_charge_type = l_iv_client_serv_basis_structa.chrg_clas;
		chr_l_fee_type = l_iv_client_serv_basis_structa.fees_class;
		/*added by shruthi kumbla for ISKB_1901*/
			if((l_iv_client_serv_basis_structa.incld_in_ann_min_fee)!='Y')
				l_iv_client_serv_basis_structa.incld_in_ann_min_fee = 'N';
	}


	int_retstat = IV_SUCCESS;
	if(APL_FAILURE == IV_Rtv_GetServBasis(p_cltt_str,PERLINE_SECURITY,&l_iv_client_serv_basis_structa,&int_retstat,l_debug_info_ptr))
	{
		fprintf(fp,"Error : Service basis not int_found for service %d for client  %s\n",PERLINE_SECURITY,chr_p_client);
		fflush(fp);
		int_bl_err_level = 1;
		if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		{
			CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
			CO_FreeErrLst(l_debug_info_ptr);
		}

		*int_p_retstat = int_retstat;
		APL_GOBACK_FAIL;


	}



		
		Alert("l_iv_client_serv_basis_structa.apl_frm_date |%s|",l_iv_client_serv_basis_structa.apl_frm_date);
		memset(&l_iv_clientparam_struct_hb, NULL, sizeof(IV_CLIENTPARAM_STRUCT_H));
		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Rtv_IVCUSTPARAM(l_iv_client_serv_basis_structa.client,PERLINE_SECURITY,l_iv_client_serv_basis_structa.apl_frm_date,&l_iv_clientparam_struct_hb,&int_retstat,l_debug_info_ptr))
		{	Alert("Its failure");
			if(int_retstat != IV_CRITCAL_ERROR_IND)
			{
				
			}
			else
			{	
				fprintf(fp,"Error : Service dependencies not defined for client %s\n",h_dl_client);
				
				
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}

				APL_GOBACK_FAIL;
			}
		}
		else
		{
			
		 Alert("Success from IV_Rtv_IVCUSTPARAM fn");
		 
		}
	
	strcpy(chr_h_param_code,l_iv_clientparam_struct_hb.parameter_cd);
	strcpy(chr_l_param_code,chr_h_param_code);
	Alert("chr_l_param_code:|%s|",chr_l_param_code);
	/* Added by Monica for kotak ISKB_1737 ends*/
	if(strlen(l_iv_client_serv_basis_structa.pls_month)==0)
	{
		fprintf(fp, "Per line charges wont be calculated for client %s\n", chr_p_client);
		APL_GOBACK_FAIL;
		
	}
	if(strcmp(chr_l_param_code,";")==0)
	{
		fprintf(fp, "Company code not maintained for client %s\n", chr_p_client);
		APL_GOBACK_FAIL;
		
	}
	if(chr_g_bl_gen != 'M')
	{
		strcpy(chr_l_fee_basis,l_iv_client_serv_basis_structa.fees_base);
		strcpy(chr_l_charge_basis,l_iv_client_serv_basis_structa.chrg_base);
	
	}
	chr_l_charge_type = l_iv_client_serv_basis_structa.chrg_clas; 
	chr_l_fee_type = l_iv_client_serv_basis_structa.fees_class;
	l_nil_fees   = l_iv_client_serv_basis_structa.nil_fees;
	l_minimumfee   = l_iv_client_serv_basis_structa.minimumfee;
	l_maximum_fee   = l_iv_client_serv_basis_structa.maximum_fee;
	/*added by shruthi kumbla for ISKB_1901*/
	if((l_iv_client_serv_basis_structa.incld_in_ann_min_fee)!='Y')
		l_iv_client_serv_basis_structa.incld_in_ann_min_fee = 'N';
	
		#ifdef BILLDEBUG 

		fprintf(TestRep, "Depo. Charges: Account: %s, Master Acc: %s\n", chr_p_client, p_mstclt_a);
		fprintf(TestRep, "Fee Basis: %s, Charge Basis: %s, Fee Type: %c, Charge Type: %c\n", chr_l_fee_basis, chr_l_charge_basis, chr_l_fee_type, chr_l_charge_type);
		fprintf(TestRep, "Nil Fee: %lf, Min Fee: %lf, Max Fee: %lf\n", l_nil_fees, l_minimumfee, l_maximum_fee);
		fflush(TestRep);

	#endif 
printf("Bagee l_iv_client_serv_basis_structa.client |%s|, h_dl_client |%s|",l_iv_client_serv_basis_structa.client,h_dl_client);

	if(strcmp(l_iv_client_serv_basis_structa.client,h_dl_client) != 0)
	{
		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Rtv_IVCUSTSETUP(l_iv_client_serv_basis_structa.client,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error : Account %s  not int_found in billing system\n",l_iv_client_serv_basis_structa.client);
				fflush(fp);
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}

				*int_p_retstat = int_retstat;
				APL_GOBACK_FAIL;
			}
		}

		l_exchg_rt = 1.0;
		if(strcmp(l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode) != 0)   
		{
			int_retstat = IV_SUCCESS;
			if(APL_FAILURE == IV_Rtv_ExchRate(  l_iv_clientsetup_struct.fees_ccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,
														&l_exchg_rt,&int_retstat,l_debug_info_ptr)) 
			{
				fprintf(fp,"Error : Exchange Rate not int_found for currency %s %s\n",l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode);                                                                   
      
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
			}
		}

		 

		CO_Round(l_nil_fees * l_exchg_rt, int_g_ccy_decimallen, &l_nil_fees);
                CO_Round(l_minimumfee * l_exchg_rt, int_g_ccy_decimallen, &l_minimumfee);
                CO_Round(l_maximum_fee * l_exchg_rt, int_g_ccy_decimallen, &l_maximum_fee);
	}
      

    l_nil_fees = l_nil_fees * g_exchg_rt_fee_bl;   
    l_minimumfee = l_minimumfee * g_exchg_rt_fee_bl;   
    l_maximum_fee = l_maximum_fee * g_exchg_rt_fee_bl;   
	Alert("Nil Fee: %lf, Min Fee: %lf, Max Fee: %lf\n, Exchange Rate is %lf\n", l_nil_fees, l_minimumfee, l_maximum_fee,l_exchg_rt);

	#ifdef BILLDEBUG 

		fprintf(TestRep, "Exchange Rate is %lf\n", l_exchg_rt);

	#endif 

		printf("chr_l_fee_basis:|%s|chr_l_charge_basis:|%s|",chr_l_fee_basis,chr_l_charge_basis);


	Alert("chr_l_param_code:|%s|",chr_l_param_code);
		//chr_l_param_dep = strtok_r(chr_l_param_code,";",&chr_newtdep);
/*	if(strlen(l_iv_client_serv_basis_structa.pls_month) == 0)
	{
		APL_GOBACK_FAIL;
	}*/

	
		
	EXEC SQL SELECT to_char(to_date(:l_iv_client_serv_basis_structa.pls_month,'mon'),'mm') INTO :chr_pls_month FROM SYS_IVCONTROLPARAM;
	IS_ANY_ORA_ERROR
	
	Alert("PL security month is |%s|",l_iv_client_serv_basis_structa.pls_month);
	int_l_uptodate_mon = atoi(chr_l_uptodate_mm);  
	int_l_pls_mon = atoi(chr_pls_month);  
	Alert("int_l_uptodate_mon |%d|",int_l_uptodate_mon);
	Alert("int_l_pls_mon |%d|",int_l_pls_mon);
	if(int_l_uptodate_mon<int_l_pls_mon )/*modified by shruthi kumbla for 11753*/
	{
	
		snprintf(chr_l_uptodt_yyyy, 5,"%d",int_l_uptodate_year);

	}
	else
	{
		
		snprintf(chr_l_uptodt_yyyy, 5,"%d",int_l_next_year);

	}
	
	/*month upto which charge is to be calculated*/
	strcpy(chr_pls_monthdt,l_iv_client_serv_basis_structa.pls_month);	
	strcat(chr_pls_monthdt,chr_l_uptodt_yyyy);
	strcat(chr_pls_monthdt," 12:00:00");
	/* pls month with current year */
	strcpy(chr_pls_mdt,l_iv_client_serv_basis_structa.pls_month);	
	strcat(chr_pls_mdt,chr_l_uptodate_yyyy);
	strcat(chr_pls_mdt," 12:00:00");
	/* pls month with next year */
	strcpy(chr_pls_last_billdt,l_iv_client_serv_basis_structa.pls_month);
	strcat(chr_pls_last_billdt,chr_l_nextyr_yyyy);
	strcat(chr_pls_last_billdt," 12:00:00");
	
	/*added and commented by shruthi kumbla for 11753*/
	if((atoi(chr_l_uptodt_yyyy) % 4) == 0)
		int_ann_no_days = 366;
	/*EXEC SQL SELECT 
	((LAST_DAY(TO_DATE((:chr_pls_last_billdt),'MMYYYY hh24:mi:ss')))-(LAST_DAY(TO_DATE((:chr_pls_mdt),'MMYYYY hh24:mi:ss'))+1))+1 INTO :int_ann_no_days FROM PRO_SYS_DATE;
	IS_ANY_ORA_ERROR*/
	
	Alert("chr_pls_monthdt |%s|",chr_pls_monthdt);
	Alert("chr_pls_mdt |%s|",chr_pls_mdt);
	Alert("chr_pls_last_billdt |%s|",chr_pls_last_billdt);
	
	
	
	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_pls_mon_exists FROM SYS_IVCONTROLPARAM WHERE :l_iv_client_serv_basis_structa.pls_month BETWEEN TO_CHAR(B_PREV_DATE+1,'MON') AND TO_CHAR(B_UPTO_DATE,'MON');
	IS_ANY_ORA_ERROR
		
	Alert("int_pls_mon_exists |%d|",int_pls_mon_exists);
	
	
	
	Alert("int_ann_no_days |%d|",int_ann_no_days);
	Alert("chr_g_bl_prv_dt |%s|",chr_g_bl_prv_dt);
	Alert("chr_h_bl_upto_dt |%s|",chr_h_bl_upto_dt);



/*fetching companies basis deals and hissafek postions*/
	strcpy(chr_h_pls_stmt," SELECT DISTINCT CMP_CODE FROM (SELECT INS.CMP_CODE as CMP_CODE");
	strcat(chr_h_pls_stmt," FROM MT_INSTRUMENT INS, DL_DEAL DL");
	strcat(chr_h_pls_stmt," WHERE DL.CLIENT = '");
	strcat(chr_h_pls_stmt,h_dl_client);
	strcat(chr_h_pls_stmt,"'  AND DL.INSTR_CODE = INS.INSTR_CODE ");
	strcat(chr_h_pls_stmt, " AND DL.DEAL_STAT      NOT IN ('DU','UU','OR') ");
	strcat(chr_h_pls_stmt," AND DL.DEAL_CD    IN ('2','4') ");
	strcat(chr_h_pls_stmt," AND DL.DL_CLASS='1' ");/*added by shruthi kumbla for ISKB_10076*/

	strcat(chr_h_pls_stmt," AND DL.DEAL_DATE > TO_DATE('");
	strcat(chr_h_pls_stmt,chr_g_bl_prv_dt);
	strcat(chr_h_pls_stmt,"','DD/MM/YYYY HH24:MI:SS')");
	
	strcat(chr_h_pls_stmt," AND DL.DEAL_DATE <= TO_DATE('");
	strcat(chr_h_pls_stmt,chr_h_bl_upto_dt);
	strcat(chr_h_pls_stmt,"','DD/MM/YYYY hh24:mi:ss') ");
	

	if(int_pls_mon_exists ==1)/*to be run only when per line ane bill month is same*/
	{
		strcat(chr_h_pls_stmt2," UNION ALL");
		strcat(chr_h_pls_stmt2,"  SELECT INS.CMP_CODE as CMP_CODE");
		strcat(chr_h_pls_stmt2," FROM MT_INSTRUMENT INS,DL_HISSAFEK DL");
		strcat(chr_h_pls_stmt2," WHERE DL.CLIENT = '");
		strcat(chr_h_pls_stmt2,h_dl_client);
		strcat(chr_h_pls_stmt2,"' AND DL.INSTR_CODE     = INS.INSTR_CODE"); 
		strcat(chr_h_pls_stmt2," AND DL.POSIT_DATE = TO_DATE('");
		strcat(chr_h_pls_stmt2,l_str_custdt);
		strcat(chr_h_pls_stmt2,"','DD/MM/YYYY HH24:MI:SS') ");
		strcat(chr_h_pls_stmt2," and (NVL((nvalreceive),0.0)-NVL((nvaldeliver),0.0)+NVL((val_rec),0.0) ");
		strcat(chr_h_pls_stmt2,"-NVL((val_del),0.0)+NVL((dp_rec),0.0)-NVL((dp_del),0.0) +NVL((SAFEKEEP_POS),0.0))>0  ");
	}	
	
	

	
	
	
	//strcat(chr_h_pls_stmt1,chr_h_pls_stmt2);
	strcat(chr_h_pls_stmt,chr_h_pls_stmt2);
	strcat(chr_h_pls_stmt,APL_NULL_STRING);
		Alert("chr_l_param_code:|%s|",chr_l_param_code);
	chr_l_param_dep = strtok_r(chr_l_param_code,";",&chr_newtdep);

	Alert("chr_l_param_dep:|%s|",chr_l_param_dep);
	while((chr_l_param_dep != (char *)NULL) && (strlen(chr_l_param_dep) > 0))
	{
		if(strcmp(chr_l_param_dep,"COMPANY") == 0)
		{
				strcat(chr_h_pls_stmt,") ORDER BY ");
				strcat(chr_h_pls_stmt, "1");
				
			
		}
		
		
		if(chr_newtdep == (char *)NULL)
			strcpy(chr_l_param_dep, APL_NULL_STRING);
		else
			chr_l_param_dep = strtok_r(NULL,";",&chr_newtdep); 
	}	
			Alert("\n2958 - strlen of chr_h_pls_stmt : |%d| and chr_h_pls_stmt1 |%d|\n and chr_h_pls_stmt2 |%d|\n",(int)strlen(chr_h_pls_stmt),(int)strlen(chr_h_pls_stmt1),(int)strlen(chr_h_pls_stmt2));
	printf("\n\nPL Line Security Query:|%s|",chr_h_pls_stmt);
		Alert(" 2958 - account: %s\n",h_dl_client);
		
	strcpy(chr_l_param_code,chr_h_param_code);	
	
	Alert(" chr_l_param_code %s\n",chr_l_param_code);
		EXEC SQL PREPARE S FROM :chr_h_pls_stmt;

	EXEC SQL DECLARE tr_plscur CURSOR FOR S;

	EXEC SQL OPEN tr_plscur;

	if(sqlca.sqlcode < 0)
	{
		fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
		fprintf(fp,"SQL Statement: %s\n",chr_h_pls_stmt);
		fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
		fflush(fp);
		int_bl_err_level = 1;
		*int_p_retstat = IV_CRITCAL_ERROR_IND;
	}

	IS_ANY_ORA_ERROR;

	int_is_trcnt_cur_open = 1; 
	int rec_count=0;
	int chk_hissafek=0;
	for( ; ; )
	{
		memset(h_company,APL_NULL_CHAR,11);
		
		memset(h_deal_dt,APL_NULL_CHAR,APL_DATE_LEN);
		memset(chr_h_first_bdt,APL_NULL_CHAR,APL_DATE_LEN);
		memset(chr_h_last_bdt,APL_NULL_CHAR,APL_DATE_LEN);
		memset(chr_prev_param_str,APL_NULL_CHAR,IV_PARAM_LEN);
		memset(chr_instr_curr,APL_NULL_CHAR,APL_CCYCODE_LEN);
		memset(chr_sec_curr,APL_NULL_CHAR,APL_CCYCODE_LEN);
		dbl_pro_data_days=0;
		l_holdings=0;
		rec_count=0;
		chk_hissafek=0;
		
		int_record_exists=0;
		chr_h_chrg_type = NULL;
		chr_pro_flag = NULL;
		dbl_billing_date_diff=0;
		no_of_days = 0.0;
		int_chk_for_pro = 0;
		
		EXEC SQL FETCH tr_plscur 
		INTO 	:h_company:i_company;	
	
		Alert("sqlca.sqlcode |%d|",sqlca.sqlcode);
		
		
		Alert("Holding for company |%s| is  i_company |%d|\n",h_company,i_company);	
		
			if( APL_ZERO_RESULT_SET )
			{
				//int_chk_for_pro =1;
				break;
			}
			
	/*checking positions for the comp code present in billing period*/
			if(int_pls_mon_exists ==1)/*to be run only when per line ane bill month is same*/
		{
			no_of_days=0;
			sqlca.sqlcode=0;
			EXEC SQL SELECT  INS.CURRENCY_CD  into :chr_instr_curr:i_instr_curr
							FROM DL_HISSAFEK DL,MT_INSTRUMENT INS WHERE CLIENT= :h_dl_client 
							AND INS.INSTR_CODE=DL.INSTR_CODE AND INS.CMP_CODE = :h_company
							AND POSIT_DATE  = TO_DATE(:l_str_custdt,'DD/MM/YYYY HH24:MI:SS')    and (nvl((nvalreceive),0.0)-nvl((nvaldeliver),0.0)+nvl((val_rec),0.0)-nvl((val_del),0.0)+nvl((dp_rec),0.0)-nvl((dp_del),0.0)
							+NVL((SAFEKEEP_POS),0.0))>0 GROUP BY INS.CURRENCY_CD;
			Alert("sqlca.sqlcode |%d|",sqlca.sqlcode);
			Alert("chr_instr_curr |%s|",chr_instr_curr);
			
			IS_ANY_ORA_ERROR
			
			 Alert("Holding for company |%s| is   |%lf|\n",h_company,l_holdings);
			if(sqlca.sqlcode == 0)
			{
				
					 
				chr_pro_flag='F';
				 
				no_of_days=int_ann_no_days;
			}	
								
			Alert("no_of_days |%lf|",no_of_days);		 
				
		}
		sqlca.sqlcode=0;

			/*EXEC SQL  SELECT
				 min(DL.DEAL_DATE),
				 ceil(((LAST_DAY(TO_DATE((:chr_pls_mdt),'MMYYYY hh24:mi:ss')))-min(DL.DEAL_DATE))+1),
				 INS.CURRENCY_CD 
				 INTO :h_deal_dt:i_deal_dt,:dbl_pro_data_days,:chr_sec_curr:i_sec_curr
				  FROM MT_INSTRUMENT INS,DL_DEAL DL 
				  WHERE DL.CLIENT = :h_dl_client 
				  AND DL.INSTR_CODE     = INS.INSTR_CODE   
				  AND INS.CMP_CODE =:h_company
				 AND DL.DEAL_STAT      NOT IN ('DU','UU','OR')  
				 AND DL.DEAL_CD    IN ('2','4') 
				 AND DL.DEAL_DATE  > TO_DATE(:chr_g_bl_prv_dt,'DD/MM/YYYY HH24:MI:SS')
				 AND DL.DEAL_DATE  <= TO_DATE(:chr_h_bl_upto_dt,'DD/MM/YYYY hh24:mi:ss') 
				 AND   DL.DEAL_DATE >(select MAX(FULL_LAST_BILLDATE) 
								from IV_PLSECURITY IV
								where  DL.CLIENT =  IV.CLIENT  AND INS.CMP_CODE = IV.CMP_CODE)
				GROUP BY  INS.CURRENCY_CD 
				ORDER BY 1;
				 
				Alert("sqlca.sqlcode |%d|",sqlca.sqlcode);
			IS_ANY_ORA_ERROR	
			 
			 if( APL_ZERO_RESULT_SET )
			{
				sqlca.sqlcode=0;
				 
			
			
			}*/
					
			/*fetching comp codes that are not already billed for per line*/
					dbl_pro_data_days=0;
					 EXEC SQL  SELECT
					 min(DL.DEAL_DATE),
					 ceil(((LAST_DAY(trunc(TO_DATE((:chr_pls_monthdt),'MMYYYY hh24:mi:ss'))))-min(trunc(DL.DEAL_DATE)))+1),
					 INS.CURRENCY_CD 
					 INTO :h_deal_dt:i_deal_dt,:dbl_pro_data_days,:chr_sec_curr:i_sec_curr
					FROM MT_INSTRUMENT INS, DL_DEAL DL WHERE DL.CLIENT = :h_dl_client AND DL.INSTR_CODE =     INS.INSTR_CODE  AND INS.CMP_CODE = :h_company
				AND DL.DEAL_STAT      NOT IN ('DU','UU','OR')  AND DL.DEAL_CD    IN ('2','4')   AND DL.DL_CLASS='1'/*added by shruthi kumbla for ISKB_10076*/
				AND DL.DEAL_DATE  > TO_DATE(:chr_g_bl_prv_dt,'DD/MM/YYYY HH24:MI:SS')
				AND DL.DEAL_DATE  <= TO_DATE(:chr_h_bl_upto_dt,'DD/MM/YYYY hh24:mi:ss') 
				GROUP BY INS.CURRENCY_CD  ORDER BY 1;
				
				 Alert("sqlca.sqlcode |%d|",sqlca.sqlcode);
				 IS_ANY_ORA_ERROR

			Alert("no_of_days |%lf|",no_of_days);	
			Alert("dbl_pro_data_days |%lf|",dbl_pro_data_days);	
			if(no_of_days==0)
				chr_pro_flag='P';	
			if(sqlca.sqlcode==0)
			{
				sqlca.sqlcode=0;
				
					EXEC SQL  SELECT COUNT(*) 
					INTO :int_record_exists 
					from IV_PLSECURITY 
					WHERE CLIENT =:h_dl_client 
					and CMP_CODE=:h_company
					AND FULL_LAST_BILLDATE=(LAST_DAY(TO_DATE((:chr_pls_monthdt),'MMYYYY hh24:mi:ss')));
				
				Alert("int_record_exists |%d|",int_record_exists);
				Alert("sqlca.sqlcode |%d|",sqlca.sqlcode);
				 IS_ANY_ORA_ERROR
				
				if(int_record_exists>0)
				{
					if(no_of_days >0 &&  dbl_pro_data_days >0)
						dbl_pro_data_days=0;
						
					if(no_of_days ==0 &&  dbl_pro_data_days >0)
					{
						dbl_pro_data_days=0;
						no_of_days=0;
					}
				}
			}
			no_of_days=no_of_days+dbl_pro_data_days;
			Alert("no_of_days |%lf|",no_of_days);	
			
			
				if(no_of_days==0)
					continue;
				else
				{	
					no_of_days=(double)no_of_days/int_ann_no_days;
						
					Alert("final no of days |%lf|",no_of_days);		
					/*ISKB_9958 shruthi kumbla-full year calc issue :last bill date not getting set to upto next yr start*/
					if(int_l_uptodate_mon==int_l_pls_mon )/*pro rata charges were not getting calculated ISKKB_10273 shruthi kumbla*/
					{
						if(chr_pro_flag=='F')/*added by shruthi kumbla for ISKB_10076*/
						{
						EXEC SQL INSERT INTO IV_PLSECURITY (CLIENT,CMP_CODE,CHARGE,RATE,NO_OF_DAYS,PRO_FIRST_BILLDATE,FULL_LAST_BILLDATE,LAST_CHRG_TYPE,GROUP_ID) VALUES(:h_dl_client,:h_company,0.0,0.0,:no_of_days,:chr_g_bl_upto_dt,(LAST_DAY(TO_DATE((:chr_pls_last_billdt),'MMYYYY hh24:mi:ss'))),:chr_pro_flag,NULL);
					}
					}
				       else
				       {
				
				EXEC SQL INSERT INTO IV_PLSECURITY (CLIENT,CMP_CODE,CHARGE,RATE,NO_OF_DAYS,PRO_FIRST_BILLDATE,FULL_LAST_BILLDATE,LAST_CHRG_TYPE,GROUP_ID) VALUES(:h_dl_client,:h_company,0.0,0.0,:no_of_days,:chr_g_bl_upto_dt,(LAST_DAY(TO_DATE((:chr_pls_monthdt),'MMYYYY hh24:mi:ss'))),:chr_pro_flag,NULL);
					}
				/*ISKB_9958 shruthi kumbla-full year calc issue :last bill date not getting set to upto next yr end*/
				IS_ANY_ORA_ERROR
				Alert("sqlca.sqlcode |%d|",sqlca.sqlcode);
					
					
				
				if(strlen(chr_instr_curr)>0)
					strcpy(chr_h_instr_ccy,chr_instr_curr);
				else if(strlen(chr_sec_curr)>0)
					strcpy(chr_h_instr_ccy,chr_sec_curr);

		
		Alert("chr_h_instr_ccy |%s|",chr_h_instr_ccy);

			


				Alert(" 2958 - account: %s\n",h_dl_client);
			
				
			/******************************************/
			
					Alert("Company is |%s|\n Deal date is |%s|\n Pro data is |%lf|\n",h_company,h_deal_dt,dbl_pro_data_days);
					
			
				memset(proc_data, APL_NULL_CHAR, IV_PARAM_LEN);
				chr_l_param_dep = strtok_r(chr_l_param_code,";",&chr_tdep);

			
					
				
			
				
				Alert("chr_l_param_dep |%s| \n",chr_l_param_dep);	
				
				while((chr_l_param_dep != (char *)NULL) && (strlen(chr_l_param_dep) > 0))
				{
					if(strcmp(chr_l_param_dep,"COMPANY") == 0)
					{
						if(strlen(proc_data) != 0)
							strcat(proc_data,";");
						strcat(proc_data,h_company);
					}
					
					
					if(chr_tdep == (char *)NULL)
					   strcpy(chr_l_param_dep, APL_NULL_STRING);	
					else
						chr_l_param_dep = strtok_r(NULL,";",&chr_tdep);
				}

				if(strlen(proc_data) == 0)
				{
					strcpy(proc_data,";");
				}

				strcpy(chr_l_param_code,chr_h_param_code);
				strcat(proc_data,APL_NULL_STRING);
				strcpy(chr_prev_param_str,proc_data);
			
				Alert("proc_data |%s|",proc_data);
				
				/*query to find logical postions */ 
				sqlca.sqlcode=0;
				
				
			





			
				strcpy(chr_acct_str,p_cltt_str);
				srv_charge = 0.0;
				int_retstat = IV_SUCCESS;
				fflush(fp);

				Alert("Entering IV_Proc_CalcFee --- chr_acct_str:|%s|",chr_acct_str);
				printf("\n before calling IV_Proc_CalcFee() chr_prev_param_str is %s",chr_prev_param_str);
				printf("\n before calling IV_Proc_CalcFee() chr_h_param_code is %s",chr_h_param_code);
				Alert("\n before calling IV_Proc_CalcFee() no_of_days is %f",no_of_days);
				
					if(APL_FAILURE == IV_Proc_CalcFee("O",chr_acct_str,PERLINE_SECURITY,chr_prev_param_str,APL_NULL_STRING,
												chr_h_param_code,no_of_days,no_of_days,chr_l_charge_type,chr_l_fee_type,
												&srv_charge,l_iv_data_struct_h_dlgrp,'I',p_mstclt_a,chr_l_charge_basis,
												chr_l_fee_basis,chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
					{
						if(int_retstat == IV_CRITCAL_ERROR_IND)
						{
							fprintf(fp,"Error in accessing table for client %s. Please contact support\n", h_dl_client);
							fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
							fflush(fp);
							int_bl_err_level = 1;
							if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
							{
								CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
								CO_FreeErrLst(l_debug_info_ptr);
							}
							*int_p_retstat = int_retstat;
						}
						
					}
					else
					{
						Alert("Advance charges for company |%s| is |%lf| ",h_company,srv_charge);
						fprintf(fp, "Advance charges for company |%s| is |%lf|\n",h_company, srv_charge);
						Alert("chr_h_srv_ind for  company |%s| is |%s| ",h_company,chr_h_srv_ind);
						Alert(" (l_iv_data_struct_h_dlgrp+int_i_cnt)->proc_data) |%s|",(l_iv_data_struct_h_dlgrp+int_i_cnt)->proc_data);
						Alert(" (l_iv_data_struct_h_dlgrp+int_i_cnt)->param_flag) |%s|",(l_iv_data_struct_h_dlgrp+int_i_cnt)->param_flag);
						if(((strcmp(chr_h_srv_ind,"G;"))==0)) //srv_charge == 0.0)
						{	
							
							strcpy(chr_h_srv_ind,APL_NULL_STRING);
						}
					//	Alert("chr_h_srv_ind for  company |%s| is |%s| int_updatetoF |%d|",h_company,chr_h_srv_ind,int_updatetoF);
						
						
					}

		}

		

		
		
		strcpy(chr_acct_str,p_cltt_str);
		
   
	
		strcpy(chr_prev_param_str,proc_data); 
	
	
	
		l_exchg_rt = 1.0;
 	Alert("chr_h_instr_ccy |%s| chr_g_fee_ccycode |%s|",chr_h_instr_ccy,chr_g_fee_ccycode);	

		if (strcmp(chr_h_instr_ccy, chr_g_fee_ccycode) != 0)                   
		{
			int_retstat = IV_SUCCESS;
			if(APL_FAILURE == IV_Rtv_ExchRate(chr_h_instr_ccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,
									&l_exchg_rt, &int_retstat,l_debug_info_ptr))														
			{
				fprintf(fp,"Error : Exchange Rate not int_found for currency %s %s\n",chr_h_instr_ccy,chr_g_fee_ccycode);

				fflush(fp);
				int_bl_err_level = 1;
				*int_p_retstat = int_retstat;
			}
		}
	

		
		Alert("l_exchg_rt is |%lf|",l_exchg_rt);
		//Alert("chk_hissafek is |%d|",chk_hissafek);
		/*if(chk_hissafek == 1)
		    goto LOOP;*/

		
	}


	EXEC SQL CLOSE tr_plscur;
	int_is_trcnt_cur_open = 0;




	int_i_cnt = 0;
	int_l_err_flg = IV_SUCCESS;

	Alert("proc_data:|%s|",(l_iv_data_struct_h_dlgrp+int_i_cnt)->proc_data);
	
	while (strlen((l_iv_data_struct_h_dlgrp+int_i_cnt)->proc_data)> 0)
	{
		strcpy(chr_acct_str,p_cltt_str);
		srv_charge = 0.0;

		int_retstat = IV_SUCCESS;

		Alert("\n for pls chgs chr_acct_str is %s",chr_acct_str);
	
		Alert("\n fees_qty is %lf",(l_iv_data_struct_h_dlgrp+int_i_cnt)->fees_qty);
		Alert("\n chrg_quant is %lf",(l_iv_data_struct_h_dlgrp+int_i_cnt)->chrg_quant);
		if((l_iv_data_struct_h_dlgrp+int_i_cnt)->fees_qty > 0)
		{
			if(APL_FAILURE == IV_Proc_CalcFee("O",chr_acct_str,PERLINE_SECURITY,(l_iv_data_struct_h_dlgrp+int_i_cnt)->proc_data,
				APL_NULL_STRING,
				chr_h_param_code,
				(l_iv_data_struct_h_dlgrp+int_i_cnt)->fees_qty,(l_iv_data_struct_h_dlgrp+int_i_cnt)->chrg_quant,
				chr_l_charge_type,chr_l_fee_type,&srv_charge,l_iv_data_struct_h_dlgrp,'I',p_mstclt_a,
				chr_l_charge_basis,chr_l_fee_basis,chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
			{
				if(int_retstat == IV_CRITCAL_ERROR_IND)
				{
					fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
					fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
					fflush(fp);
					int_bl_err_level = 1;
					if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
					{
						CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
						CO_FreeErrLst(l_debug_info_ptr);
					}

					*int_p_retstat = int_retstat;
					int_l_err_flg = IV_CRITCAL_ERROR_IND; 
				}
				
				
				
			}
			else
			{
				Alert("Advance charges for company |%s| is |%lf| for client |%s| ",h_company,srv_charge,h_dl_client);
			
				
			}
			printf("\n srv_charge is %lf",srv_charge);

		}
	
	
		Alert("Advance charges for company |%s| is |%lf|",h_company,srv_charge);
		
		
							
	
		
		
		++int_i_cnt;
	}


	
	EXEC SQL SELECT COUNT(*) into :l_int_cnt FROM IV_PLSECURITY 
		WHERE CLIENT=:h_dl_client AND PRO_FIRST_BILLDATE=:chr_g_bl_upto_dt;
		IS_ANY_ORA_ERROR
    	if(l_int_cnt>0)
			{
			EXEC SQL SELECT  NVL(SUM(CHARGE*FEESCCY_EXCH_RT),0) into :tot_pls_chg FROM  IV_PLSECURITY 
			WHERE CLIENT=:h_dl_client AND PRO_FIRST_BILLDATE=:chr_g_bl_upto_dt;
			IS_ANY_ORA_ERROR
			}
	Alert("Advance charges for Client |%s| is |%lf|",h_dl_client,tot_pls_chg);	
	fprintf(fp, "Advance charges for Client |%s| is |%lf|\n",h_dl_client, tot_pls_chg);
//	tot_pls_chg = tot_pls_chg * l_exchg_rt;
//	Alert("Advance charges for Client |%s| after applying exchange rate |%lf| is |%lf|",h_dl_client,l_exchg_rt,tot_pls_chg);	
	if( int_l_err_flg != IV_CRITCAL_ERROR_IND ) 
	{ 
		Alert("int_l_err_flg |%d|",int_l_err_flg);
		Alert("tot_pls_chg |%lf|",tot_pls_chg);
		Alert("l_nil_fees |%lf|",l_nil_fees);
		Alert("date of billing is chr_h_bl_upto_dt |%s|",chr_h_bl_upto_dt);
		Alert("chr_g_bl_upto_dt for pls is |%s|",chr_g_bl_upto_dt);
		if ((tot_pls_chg == 0) && (l_nil_fees > 0) )
		{
			int_retstat = IV_SUCCESS;
		#ifdef BILLDEBUG 
         
			fprintf(TestRep, "\nInserting Record into IV_SERVICE_CHRG\n");     
			fprintf(TestRep, "account: %s\n",h_dl_client);
			fprintf(TestRep, "nil fees: %lf",l_nil_fees);
			fprintf(TestRep, " min fees adjust: %lf",0.0);
			fprintf(TestRep, " MAX fees adjust: %lf",0.0); 
			fprintf(TestRep, " tot_chg: %lf\n",0.0);
			fprintf(TestRep, "currency :%s\n",chr_g_bl_ccycode);
			fflush(TestRep);

		#endif 
		
			EXEC SQL DELETE FROM IV_SERVICE_CHRG 
								WHERE CLIENT = :h_dl_client
								AND DATEOF_BILLING = :chr_g_bl_upto_dt 
								AND MASTER_CLT = :p_mstclt_a
								AND SERVICE_CD = :h_pline_security  
								AND CONS_FLAG = 'I' ;
			fflush(stdout);

			IS_ANY_ORA_ERROR
			/*added incld_in_ann_min_fee by shruthi kumbla for ISKB_1901*/
			if(APL_FAILURE == IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,h_dl_client,l_nil_fees,0.0,0.0,0.0,
										chr_g_bl_ccycode,'I',PERLINE_SECURITY,p_mstclt_a,l_iv_client_serv_basis_structa.incld_in_ann_min_fee,&int_retstat,l_debug_info_ptr))
			{
				fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				Alert("failure in IV_Mod_IVSRVCHRGNew");
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
			}
		}
		else if(tot_pls_chg > 0)
		{ 
			Alert("tot_pls_chg |%lf|",tot_pls_chg);
			Alert("l_minimumfee |%lf|",l_minimumfee);
			Alert("l_maximum_fee |%lf|",l_maximum_fee);
			if(tot_pls_chg < l_minimumfee)
				l_minimumfee_adj = l_minimumfee - tot_pls_chg;
			else
				l_minimumfee_adj = 0;
			if((tot_pls_chg > l_maximum_fee) && (l_maximum_fee != 0))
			{
				l_maximum_fee_adj = l_maximum_fee - tot_pls_chg;
			}
			else
				l_maximum_fee_adj = 0;

			int_retstat = IV_SUCCESS;
		/*#ifdef BILLDEBUG */
         
			printf("\nInserting Record into BSERVCHARGE\n");     
			printf("account: %s %d \n",h_dl_client,__LINE__);
			printf("nil fees: %lf",0.0);
			printf(" min fees adjust: %lf",l_minimumfee_adj);
			printf(" MAX fees adjust: %lf",l_maximum_fee_adj); 
			printf(" tot_chg: %lf\n",tot_pls_chg);
			printf("currency :%s\n",chr_g_bl_ccycode);
			fflush(stdout);

		/*#endif*/
			EXEC SQL DELETE FROM IV_SERVICE_CHRG 
								WHERE CLIENT = :h_dl_client
								AND DATEOF_BILLING = :chr_g_bl_upto_dt 
								AND MASTER_CLT = :p_mstclt_a
								AND SERVICE_CD = :h_pline_security  
								AND CONS_FLAG = 'I' ;
			fflush(stdout);

			IS_ANY_ORA_ERROR
			/*added incld_in_ann_min_fee by shruthi kumbla for ISKB_1901*/
			if(APL_FAILURE == IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,h_dl_client,0.0,l_minimumfee_adj,
							l_maximum_fee_adj,tot_pls_chg,chr_g_bl_ccycode,'I',PERLINE_SECURITY,p_mstclt_a,l_iv_client_serv_basis_structa.incld_in_ann_min_fee,&int_retstat,l_debug_info_ptr))
			{
				fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);

					CO_FreeErrLst(l_debug_info_ptr);
				}
				Alert("failure in IV_Mod_IVSRVCHRGNew");
				*int_p_retstat = int_retstat;
				int_bl_err_level = 1;
			}
		}

	}
		
	int_i_cnt =0;
	

	if (*int_p_retstat != IV_SUCCESS)
	{
		APL_GOBACK_FAIL;
	}
	else
	{
		*int_p_retstat = IV_SUCCESS;
		APL_GOBACK_SUCCESS;
	}

RETURN_SUCCESS: 
	if(int_is_trcnt_cur_open == 1)
	{
		EXEC SQL CLOSE tr_plscur;
	}
	APL_IF_DEBUG
	{
	  CO_ProcMonitor(APL_OUT_FILE,"Exiting Successfully Out Of IV_Proc_GenPLSecurityCharges() \n", NULL, NULL);
	}
	return APL_SUCCESS;

RETURN_FAILURE:
	if(int_is_trcnt_cur_open == 1)
	{
		EXEC SQL CLOSE tr_plscur;
	}
	APL_IF_DEBUG
	{
	  CO_ProcMonitor(APL_OUT_FILE,"Exiting Successfully Out Of IV_Proc_GenPLSecurityCharges() \n", NULL, NULL);
	}
	return APL_FAILURE;
}


int IV_Mod_SchFeeIV_PLSECURITY(char *p_client,long p_serv_code,double p_schl_fee,  char *chr_p_fee_str,double h_charge_qty,
			char *chr_p_param_ind,double g_exchg_rt_fee_bl,int *int_p_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca sqlca;
	

	EXEC SQL BEGIN DECLARE SECTION;

	char h_dl_client[APL_CLIENT_LENGTH],chr_l_buf[BUFFER_LEN];
	int int_record_exists =0;
	double dbl_serv_charge=0.0;
	char chr_l_param_ind[4]=APL_NULL_STRING;
	EXEC SQL VAR h_dl_client IS STRING;
	EXEC SQL VAR chr_l_param_ind IS STRING;
	
	EXEC SQL END DECLARE SECTION;

	sqlca.sqlcode = 0;

	memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
	memset(h_dl_client, APL_NULL_CHAR,APL_CLIENT_LENGTH);
	memset(chr_l_param_ind, APL_NULL_CHAR,4);
	
	strcpy(h_dl_client,p_client);


	*int_p_retstat = IV_SUCCESS;

	APL_IF_DEBUG
	{
  		CO_ProcMonitor(TechRep,"Entered in Function IV_Mod_SchFeeIV_PLSECURITY",
			 NULL,NULL);
  		memset(chr_l_buf,NULL,BUFFER_LEN);
  		sprintf(chr_l_buf," for client %s",h_dl_client);
  		CO_ProcMonitor(TechRep,chr_l_buf,NULL,NULL);
	}
	printf("\n=========== h_dl_client |%s| p_serv_code |%ld| p_schl_fee |%lf| chr_p_fee_str|%s| h_charge_qty |%lf| chr_p_param_ind |%s|\n",h_dl_client,p_serv_code,p_schl_fee,chr_p_fee_str,h_charge_qty,chr_p_param_ind);
	Alert("chr_g_bl_upto_dt |%s|",chr_g_bl_upto_dt);
	Alert("g_exchg_rt_fee_bl |%lf|",g_exchg_rt_fee_bl);
	if(strcmp(chr_p_fee_str,"ALL")!=0)
	{
		/*EXEC SQL SELECT NVL(COUNT(*),0)
		INTO :int_record_exists
		FROM IV_PLSECURITY WHERE CLIENT= :h_dl_client AND CMP_CODE=:chr_p_fee_str and PRO_FIRST_BILLDATE=:chr_g_bl_upto_dt;
		Alert("sqlca.sqlcode |%d|",sqlca.sqlcode);
		Alert("int_record_exists |%d|",int_record_exists);*/
		dbl_serv_charge = p_schl_fee*h_charge_qty;
		Alert(" Service charge for company |%s| is |%lf|",chr_p_fee_str,dbl_serv_charge);
		strcpy(chr_l_param_ind,chr_p_param_ind);
		if(!strcmp(chr_p_param_ind,"G;"))
		{
			strcpy(chr_l_param_ind,APL_NULL_STRING);
		}	
		
			Alert("Its update");
			EXEC SQL UPDATE IV_PLSECURITY SET RATE=:p_schl_fee,CHARGE=:dbl_serv_charge,no_of_days=:h_charge_qty,GROUP_ID= :chr_l_param_ind,FEESCCY_EXCH_RT=:g_exchg_rt_fee_bl WHERE CLIENT= :h_dl_client AND CMP_CODE=:chr_p_fee_str and PRO_FIRST_BILLDATE=:chr_g_bl_upto_dt ;
			IS_ANY_ORA_ERROR
			Alert("sqlca.sqlcode |%d|",sqlca.sqlcode);
		
		/*else
		{
			Alert("Its insert ");
			short i_charge_qty = 0;
			EXEC SQL INSERT INTO IV_PLSECURITY (CLIENT,CMP_CODE,CHARGE,RATE,NO_OF_DAYS,PRO_FIRST_BILLDATE,FULL_LAST_BILLDATE,LAST_CHRG_TYPE,GROUP_ID)
			VALUES(:h_dl_client,:chr_p_fee_str,:dbl_serv_charge,:p_schl_fee,:h_charge_qty:i_charge_qty,:chr_g_bl_upto_dt,NULL,NULL,:chr_l_param_ind);
			IS_ANY_ORA_ERROR
			Alert("sqlca.sqlcode |%d|",sqlca.sqlcode);
			
		}*/
	}
	if(strcmp(chr_p_fee_str,"ALL")==0)
	{
		Alert("Its update all");
		EXEC SQL UPDATE IV_PLSECURITY SET RATE=:p_schl_fee,CHARGE=:p_schl_fee*no_of_days,GROUP_ID= :chr_p_param_ind ,FEESCCY_EXCH_RT=:g_exchg_rt_fee_bl WHERE CLIENT= :h_dl_client AND GROUP_ID is null  and PRO_FIRST_BILLDATE=:chr_g_bl_upto_dt;
		IS_ANY_ORA_ERROR
		Alert("sqlca.sqlcode |%d|",sqlca.sqlcode);
	}
	
			if(sqlca.sqlcode < 0)
				*int_p_retstat = IV_CRITCAL_ERROR_IND;

			IS_ANY_ORA_ERROR;
		

		

		*int_p_retstat = IV_SUCCESS;
		APL_GOBACK_SUCCESS;

RETURN_SUCCESS:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting Successfully Out Of  IV_Mod_SchFeeIV_PLSECURITY\n",
			 NULL, NULL);
	}
	return APL_SUCCESS;

RETURN_FAILURE:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting Unsuccessfully Out Of  IV_Mod_SchFeeIV_PLSECURITY\n",
			 NULL, NULL);
	}
	return APL_FAILURE;
}



/*added by shruthi kumbla ISKB_1737 end*/

/*added by shruthi kumbla for ISKB_1901 SEBI AUC charge end*/
int IV_Proc_GenSebiAUC_Charges(char *chr_p_client, char *p_cltt_str,char *p_mstclt_a,int *int_p_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	printf("\n\n****** Inside IV_Proc_GenSebiAUC_Charges **********\n\n");
	EXEC SQL BEGIN DECLARE SECTION;

	char chr_mst_fee_ccycode[APL_CCYCODE_LEN],chr_mst_bl_ccycode[APL_CCYCODE_LEN];
	char h_dl_client[APL_CLIENT_LENGTH]= APL_NULL_STRING;
	char chr_h_srv_ind[50];
	char chr_l_portfolio_eval='\0';	
	char chr_l_nav_ind='\0';	
	int int_l_err_flg = IV_SUCCESS; 
	int int_h_mst_fee_decimallen=0, int_h_mst_bl_decimallen=0;
	long h_sebiauc_chrg = SEBI_AUC;
	long h_custody_fee = CUSTODYFEE;
	double dbl_f_portfolio =0.0;
	double dbl_portfolio =0.0;

	EXEC SQL VAR h_dl_client  	IS STRING;
	struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	int int_i_cnt=0;
        
	
	
	char chr_acct_str[IV_CLT_LEN],chr_l_buf[BUFFER_LEN];
	char chr_mstacctstr[IV_CLT_LEN];
	double srv_charge=0.0,tot_sebiauc_chg=0.0;
	double l_nil_fees=0.0,l_minimumfee=0.0,l_maximum_fee=0.0;
	double l_minimumfee_adj=0.0, l_maximum_fee_adj=0.0;
	double l_exchg_rt=1.0,l_subbl_mstbl_rt = 1.0;
	double h_exchg_rt_mstfee_bl=1.0; 
	int int_retstat=0;
	char chr_l_charge_type,chr_l_fee_type,*chr_h_actcode = NULL,*k;
	char chr_l_charge_basis[IV_STRING_LEN],chr_l_fee_basis[IV_STRING_LEN]; 
	IV_DATA_STRUCT_H l_iv_data_struct_h_dlgrp[50];
	IV_CLIENT_SERV_BASIS_STRUCT l_iv_client_serv_basis_structa;
	IV_CLIENTSETUP_STRUCT l_iv_clientsetup_struct;
	sqlca.sqlcode = 0;
	k = (char *) calloc(IV_PARAM_LEN,sizeof(char));

	memset(chr_acct_str,APL_NULL_CHAR,IV_CLT_LEN);
	memset(chr_mstacctstr,APL_NULL_CHAR,IV_CLT_LEN);
	memset(chr_l_charge_basis,APL_NULL_CHAR,IV_STRING_LEN);
	memset(chr_l_fee_basis,APL_NULL_CHAR,IV_STRING_LEN);
	memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
	memset(chr_h_srv_ind,APL_NULL_CHAR,51);
	memset(chr_mst_fee_ccycode,APL_NULL_CHAR,APL_CCYCODE_LEN);
	memset(chr_mst_bl_ccycode,APL_NULL_CHAR,APL_CCYCODE_LEN);
	memset(&l_iv_clientsetup_struct, NULL, sizeof(IV_CLIENTSETUP_STRUCT));
	memset(&l_iv_client_serv_basis_structa, NULL, sizeof(IV_CLIENT_SERV_BASIS_STRUCT));

	
	chr_h_actcode =  (char *)calloc(APL_CLIENT_LENGTH,sizeof(char));
	APL_MALLOC_FAIL(chr_h_actcode);
	memset(chr_h_actcode,NULL,sizeof(char));
	*int_p_retstat = IV_SUCCESS;
	APL_IF_DEBUG
	{
		
  		CO_ProcMonitor(TechRep,"Generating SEBI AUC Charges for client ",NULL,NULL);
  		memset(chr_l_buf,NULL,BUFFER_LEN);
  		sprintf(chr_l_buf," %s",chr_p_client);
  		CO_ProcMonitor(TechRep,chr_l_buf,NULL,NULL);
	}
	memset(h_dl_client,APL_NULL_CHAR,sizeof(h_dl_client));
	strcpy(h_dl_client,chr_p_client);
	
	
	
	strcpy(chr_acct_str,p_cltt_str);
	chr_h_actcode = strtok_r(chr_acct_str,";",&k);
	Alert("Client is |%s|",chr_h_actcode);
	
	if(strlen(chr_p_client) > 0)
	{
		strcpy(chr_mstacctstr,chr_p_client);
		strcat(chr_mstacctstr,";");
		int_retstat = IV_SUCCESS;
		if( APL_FAILURE == IV_Rtv_IVCUSTSETUP(chr_p_client,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error : Billing setup not found for Account %s \n",chr_p_client);
				fflush(fp);
				*int_p_retstat = int_retstat;
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
				APL_GOBACK_FAIL;
			}
		}
		chr_l_portfolio_eval = l_iv_clientsetup_struct.portfolio_eval;
		chr_l_nav_ind = l_iv_clientsetup_struct.nav_ind;
		printf("\n  portfolio evaluation %c \n ",  chr_l_portfolio_eval);
		printf("\n  chr_l_nav_ind %c \n ",  chr_l_nav_ind);
		
	


	}
	
	
	
	

	if(chr_g_bl_gen == 'M')
	{
		strcpy(chr_mstacctstr,p_mstclt_a);
		strcat(chr_mstacctstr,";");
		if(APL_FAILURE == IV_Rtv_IVCUSTSETUP(p_mstclt_a,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error : Account %s  not int_found in billing system\n",p_mstclt_a);
				fflush(fp);
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				APL_GOBACK_FAIL;
			}
		}
	
		strcat(chr_mstacctstr,l_iv_clientsetup_struct.default_feeclt);
		strcat(chr_mstacctstr,";");
		strcat(chr_mstacctstr,chr_g_cb_code);
		strcat(chr_mstacctstr,";");
		strcat(chr_mstacctstr,APL_NULL_STRING);

		
		strcpy(chr_mst_fee_ccycode,APL_NULL_STRING);
		strcpy(chr_mst_fee_ccycode,l_iv_clientsetup_struct.fees_ccy);
		strcpy(chr_mst_bl_ccycode,APL_NULL_STRING);
      strcpy(chr_mst_bl_ccycode,l_iv_clientsetup_struct.b_ccycd);


      if ( APL_FAILURE == CR_Rtv_CCYFldVal(chr_mst_fee_ccycode,"decimallen",&int_h_mst_fee_decimallen,l_debug_info_ptr))
      {
         fprintf(fp,"Error : Could not fetch decimal length for currency %s\n", chr_mst_fee_ccycode);
         fflush(fp);
         int_bl_err_level = 1;
         *int_p_retstat = int_retstat;
         if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
         {
            CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
            CO_FreeErrLst(l_debug_info_ptr);
         }
      }

		
		h_exchg_rt_mstfee_bl = 1.0;
      if (strcmp(chr_mst_bl_ccycode, chr_mst_fee_ccycode) != 0)
      {
         int_retstat = IV_SUCCESS;
         if(APL_FAILURE == IV_Rtv_ExchRate(chr_mst_fee_ccycode,chr_mst_bl_ccycode,chr_g_bl_upto_dt,&h_exchg_rt_mstfee_bl, &int_retstat,l_debug_info_ptr))
         {
            fprintf(fp,"Error : Exchange Rate not int_found for currency %s %s\n",chr_mst_fee_ccycode,chr_mst_bl_ccycode);
            fflush(fp);
            int_bl_err_level = 1;
            *int_p_retstat = int_retstat;
         }
       }

      if ( APL_FAILURE == CR_Rtv_CCYFldVal(chr_mst_bl_ccycode,"decimallen",&int_h_mst_bl_decimallen,l_debug_info_ptr))
      {
         fprintf(fp,"Error : Could not fetch decimal length for currency %s\n", chr_mst_bl_ccycode);
         fflush(fp);
         int_bl_err_level = 1;
         *int_p_retstat = int_retstat;
         if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
         {
            CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
            CO_FreeErrLst(l_debug_info_ptr);
         }
      }

		

      l_subbl_mstbl_rt = 1.0;
      if (strcmp(chr_mst_bl_ccycode, chr_g_bl_ccycode) != 0)
      {
         int_retstat = IV_SUCCESS;
         if(APL_FAILURE == IV_Rtv_ExchRate(chr_g_bl_ccycode,chr_mst_bl_ccycode,chr_g_bl_upto_dt,&l_subbl_mstbl_rt, &int_retstat,l_debug_info_ptr))
         {
            fprintf(fp,"Error : Exchange Rate not int_found for currency %s %s\n",chr_g_bl_ccycode,chr_mst_bl_ccycode);
            fflush(fp);
            int_bl_err_level = 1;
            *int_p_retstat = int_retstat;
         }
       }

		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Rtv_GetServBasis(chr_mstacctstr,SEBI_AUC,&l_iv_client_serv_basis_structa,&int_retstat,l_debug_info_ptr))
		{
			fprintf(fp,"Error : Service basis not int_found for service %d for master client of client %s\n",SEBI_AUC, chr_p_client);
			fflush(fp);
			int_bl_err_level = 1;
			if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
				CO_FreeErrLst(l_debug_info_ptr);
			}

			*int_p_retstat = int_retstat;
			APL_GOBACK_FAIL;

		}
		strcpy(chr_l_fee_basis,l_iv_client_serv_basis_structa.fees_base);
		strcpy(chr_l_charge_basis,l_iv_client_serv_basis_structa.chrg_base);
		chr_l_charge_type = l_iv_client_serv_basis_structa.chrg_clas;
		chr_l_fee_type = l_iv_client_serv_basis_structa.fees_class;
		/*added by shruthi kumbla for ISKB_1901*/
			if((l_iv_client_serv_basis_structa.incld_in_ann_min_fee)!='Y')
				l_iv_client_serv_basis_structa.incld_in_ann_min_fee = 'N';
	}

	strcpy(chr_acct_str,p_cltt_str);
	int_retstat = IV_SUCCESS;
	if(APL_FAILURE == IV_Rtv_GetServBasis(chr_acct_str,SEBI_AUC,&l_iv_client_serv_basis_structa,&int_retstat,l_debug_info_ptr))
	{
		fprintf(fp,"Error : Service basis not int_found for service %d for client  %s\n",SEBI_AUC,chr_p_client);
		fflush(fp);
		int_bl_err_level = 1;
		if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		{
			CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
			CO_FreeErrLst(l_debug_info_ptr);
		}

		*int_p_retstat = int_retstat;
		APL_GOBACK_FAIL;

	}
	if(chr_g_bl_gen != 'M')
	{
		strcpy(chr_l_fee_basis,l_iv_client_serv_basis_structa.fees_base);
		strcpy(chr_l_charge_basis,l_iv_client_serv_basis_structa.chrg_base);
	
	}
	chr_l_charge_type = l_iv_client_serv_basis_structa.chrg_clas; 
	chr_l_fee_type = l_iv_client_serv_basis_structa.fees_class;
	l_nil_fees   = l_iv_client_serv_basis_structa.nil_fees;
	l_minimumfee   = l_iv_client_serv_basis_structa.minimumfee;
	l_maximum_fee   = l_iv_client_serv_basis_structa.maximum_fee;
	/*added by shruthi kumbla for ISKB_1901*/
	if((l_iv_client_serv_basis_structa.incld_in_ann_min_fee)!='Y')
		l_iv_client_serv_basis_structa.incld_in_ann_min_fee = 'N';
	

	#ifdef BILLDEBUG 

		fprintf(TestRep, "Depo. Charges: Account: %s, Master Acc: %s\n", chr_p_client, p_mstclt_a);
		fprintf(TestRep, "Fee Basis: %s, Charge Basis: %s, Fee Type: %c, Charge Type: %c\n", chr_l_fee_basis, chr_l_charge_basis, chr_l_fee_type, chr_l_charge_type);
		fprintf(TestRep, "Nil Fee: %lf, Min Fee: %lf, Max Fee: %lf\n", l_nil_fees, l_minimumfee, l_maximum_fee);
		fflush(TestRep);

	#endif 
Alert("Bagee l_iv_client_serv_basis_structa.client |%s|, h_dl_client |%s|",l_iv_client_serv_basis_structa.client,h_dl_client);

	if(strcmp(l_iv_client_serv_basis_structa.client,h_dl_client) != 0)
	{
		int_retstat = IV_SUCCESS;
		if(APL_FAILURE == IV_Rtv_IVCUSTSETUP(l_iv_client_serv_basis_structa.client,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error : Account %s  not int_found in billing system\n",l_iv_client_serv_basis_structa.client);
				fflush(fp);
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}

				*int_p_retstat = int_retstat;
				APL_GOBACK_FAIL;
			}
		}

		l_exchg_rt = 1.0;
		if(strcmp(l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode) != 0)   
		{
			int_retstat = IV_SUCCESS;
			if(APL_FAILURE == IV_Rtv_ExchRate(  l_iv_clientsetup_struct.fees_ccy,chr_g_fee_ccycode,chr_g_bl_upto_dt,
														&l_exchg_rt,&int_retstat,l_debug_info_ptr)) 
			{
				fprintf(fp,"Error : Exchange Rate not int_found for currency %s %s\n",l_iv_clientsetup_struct.fees_ccy, chr_g_fee_ccycode);                                                                   
      
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
			}
		}

		CO_Round(l_nil_fees * l_exchg_rt, int_g_ccy_decimallen, &l_nil_fees);
                CO_Round(l_minimumfee * l_exchg_rt, int_g_ccy_decimallen, &l_minimumfee);
                CO_Round(l_maximum_fee * l_exchg_rt, int_g_ccy_decimallen, &l_maximum_fee);
	}
      

    l_nil_fees = l_nil_fees * g_exchg_rt_fee_bl;   
    l_minimumfee = l_minimumfee * g_exchg_rt_fee_bl;   
    l_maximum_fee = l_maximum_fee * g_exchg_rt_fee_bl;   
	Alert("Nil Fee: %lf, Min Fee: %lf, Max Fee: %lf\n, Exchange Rate is %lf\n", l_nil_fees, l_minimumfee, l_maximum_fee,l_exchg_rt);

	#ifdef BILLDEBUG 

		fprintf(TestRep, "Exchange Rate is %lf\n", l_exchg_rt);

	#endif 

	Alert("Calculating sum of  F_PORTFOLIO for client |%s| and billing date |%s| AND SERVICE CODE |%ld| ",h_dl_client,chr_g_bl_upto_dt,h_custody_fee);



	Alert("chr_l_portfolio_eval |%c|",chr_l_portfolio_eval);
	strcpy(chr_acct_str,p_cltt_str);
	if(chr_l_nav_ind=='N')
	{
		
	if(chr_l_portfolio_eval=='M')
	{
			EXEC SQL SELECT NVL(SUM(qty*mkt_prc*feesccy_exch_rt),0) INTO :dbl_f_portfolio FROM IV_CUST_PRINT WHERE BILLING_DT 	 = :chr_g_bl_upto_dt AND CLIENT   = :h_dl_client AND SERVICE_CD <> 11;
		IS_ANY_ORA_ERROR
	}
else if(chr_l_portfolio_eval=='D')	
	{
			EXEC SQL SELECT NVL(SUM(qty*mkt_prc*feesccy_exch_rt),0) INTO :dbl_f_portfolio FROM IV_CUST_PRINT WHERE BILLING_DT 	 = :chr_g_bl_upto_dt AND CLIENT   = :h_dl_client and B_TO_DATE=:chr_g_bl_upto_dt AND SERVICE_CD <> 11;
			IS_ANY_ORA_ERROR
		}
			
	}
	else if(chr_l_nav_ind=='Y') 
	{
		
			EXEC SQL SELECT NVL(SUM(SERVICE_QTY),0) INTO :dbl_f_portfolio FROM IV_SERV_OTH WHERE B_UPTO_DATE= :chr_g_bl_upto_dt AND CLIENT= :h_dl_client and SERVICE_CD=1 ;
		IS_ANY_ORA_ERROR
	}
		Alert("sum of portfolio value for client |%s| is |%lf|",h_dl_client,dbl_f_portfolio);
	
		if(dbl_f_portfolio > 0.0)
			dbl_portfolio=dbl_f_portfolio;
		else
		{
			fprintf(fp,"Error : Since custody fees is not calculated for %s ,SEBI AUC Charges wont be calculated for this client \n",h_dl_client);
			fflush(fp);
			APL_GOBACK_FAIL
		
		}
		
		
		srv_charge = 0.0;
		int_retstat = IV_SUCCESS;
		fflush(fp);

		
		if(APL_FAILURE == IV_Proc_CalcFee("O",chr_acct_str,SEBI_AUC,";",APL_NULL_STRING,
									" ",dbl_portfolio,dbl_portfolio,chr_l_charge_type,chr_l_fee_type,
									&srv_charge,l_iv_data_struct_h_dlgrp,'I',p_mstclt_a,chr_l_charge_basis,
									chr_l_fee_basis,chr_h_srv_ind,&int_retstat,l_debug_info_ptr))
		{
			if(int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fp,"Error in accessing table for client %s. Please contact support\n", h_dl_client);
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
			}
			
		}
		
		if(srv_charge > 0)
			tot_sebiauc_chg = srv_charge;
			
			Alert("SEBI AUC charges for Client |%s| is |%lf| and srv_charge is |%lf|",h_dl_client,tot_sebiauc_chg,srv_charge);	
	
	
	
	int_i_cnt = 0;
	int_l_err_flg = IV_SUCCESS;

	Alert("Sebi AUC charges for Client |%s| is |%lf|",h_dl_client,tot_sebiauc_chg);	
	if( int_l_err_flg != IV_CRITCAL_ERROR_IND ) 
	{ 
		Alert("int_l_err_flg |%d|",int_l_err_flg);
	
		Alert("l_nil_fees |%lf|",l_nil_fees);
	
		if ((tot_sebiauc_chg == 0) && (l_nil_fees > 0) )
		{
			int_retstat = IV_SUCCESS;
		#ifdef BILLDEBUG 
         
			fprintf(TestRep, "\nInserting Record into IV_SERVICE_CHRG\n");     
			fprintf(TestRep, "account: %s\n",h_dl_client);
			fprintf(TestRep, "nil fees: %lf",l_nil_fees);
			fprintf(TestRep, " min fees adjust: %lf",0.0);
			fprintf(TestRep, " MAX fees adjust: %lf",0.0); 
			fprintf(TestRep, " tot_chg: %lf\n",0.0);
			fprintf(TestRep, "currency :%s\n",chr_g_bl_ccycode);
			fflush(TestRep);

		#endif 
		
			EXEC SQL DELETE FROM IV_SERVICE_CHRG 
								WHERE CLIENT = :h_dl_client
								AND DATEOF_BILLING = :chr_g_bl_upto_dt 
								AND MASTER_CLT = :p_mstclt_a
								AND SERVICE_CD = :h_sebiauc_chrg  
								AND CONS_FLAG = 'I' ;
			fflush(stdout);

			IS_ANY_ORA_ERROR
	/*added incld_in_ann_min_fee by shruthi kumbla for ISKB_1901*/
			if(APL_FAILURE == IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,h_dl_client,l_nil_fees,0.0,0.0,0.0,
										chr_g_bl_ccycode,'I',SEBI_AUC,p_mstclt_a,l_iv_client_serv_basis_structa.incld_in_ann_min_fee,&int_retstat,l_debug_info_ptr))
			{
				fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				Alert("failure in IV_Mod_IVSRVCHRGNew");
				int_bl_err_level = 1;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);
					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
			}
		}
		else if(tot_sebiauc_chg > 0)
		{ 
			Alert("tot_sebiauc_chg |%lf|",tot_sebiauc_chg);
			Alert("l_minimumfee |%lf|",l_minimumfee);
			Alert("l_maximum_fee |%lf|",l_maximum_fee);
			if(tot_sebiauc_chg < l_minimumfee)
				l_minimumfee_adj = l_minimumfee - tot_sebiauc_chg;
			else
				l_minimumfee_adj = 0;
			if((tot_sebiauc_chg > l_maximum_fee) && (l_maximum_fee != 0))
			{
				l_maximum_fee_adj = l_maximum_fee - tot_sebiauc_chg;
			}
			else
				l_maximum_fee_adj = 0;

			int_retstat = IV_SUCCESS;
	
         
			printf("\nInserting Record into IV_SERVICE_CHRG\n");     
			printf("account: %s %d \n",h_dl_client,__LINE__);
			printf("nil fees: %lf",0.0);
			printf(" min fees adjust: %lf",l_minimumfee_adj);
			printf(" MAX fees adjust: %lf",l_maximum_fee_adj); 
			printf(" tot_chg: %lf\n",tot_sebiauc_chg);
			printf("currency :%s\n",chr_g_bl_ccycode);
			fflush(stdout);

	
			EXEC SQL DELETE FROM IV_SERVICE_CHRG 
								WHERE CLIENT = :h_dl_client
								AND DATEOF_BILLING = :chr_g_bl_upto_dt 
								AND MASTER_CLT = :p_mstclt_a
								AND SERVICE_CD = :h_sebiauc_chrg  
								AND CONS_FLAG = 'I' ;
			fflush(stdout);

			IS_ANY_ORA_ERROR
			/*added incld_in_ann_min_fee by shruthi kumbla for ISKB_1901*/
			if(APL_FAILURE == IV_Mod_IVSRVCHRGNew(chr_g_bl_upto_dt,h_dl_client,0.0,l_minimumfee_adj,
							l_maximum_fee_adj,tot_sebiauc_chg,chr_g_bl_ccycode,'I',SEBI_AUC,p_mstclt_a,l_iv_client_serv_basis_structa.incld_in_ann_min_fee, &int_retstat,l_debug_info_ptr))
			{
				fprintf(fp,"Error in accessing table for client %s. Please contact support\n",h_dl_client);
				fprintf(fp, "File: %s, Line: %d\n", __FILE__, __LINE__);
				fflush(fp);
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
				if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
				{
					CO_ProcMonitor(TechRep,APL_NULL_STRING,l_debug_info_ptr,NULL);

					CO_FreeErrLst(l_debug_info_ptr);
				}
				*int_p_retstat = int_retstat;
				int_bl_err_level = 1;
			}
		}
		else
		{
			fprintf(fp,"Error : SEBI AUC Charges 0 for client %s \n",h_dl_client);
			fflush(fp);
			APL_GOBACK_FAIL
		
		}			

	}
		
	int_i_cnt =0;
	

	if (*int_p_retstat != IV_SUCCESS)
	{
		APL_GOBACK_FAIL;
	}
	else
	{
		*int_p_retstat = IV_SUCCESS;
		APL_GOBACK_SUCCESS;
	}

RETURN_SUCCESS: 
	APL_IF_DEBUG
	{
	  CO_ProcMonitor(APL_OUT_FILE,"Exiting Successfully Out Of IV_Proc_GenSebiAUC_Charges() \n", NULL, NULL);
	}
	return APL_SUCCESS;

RETURN_FAILURE:
	APL_IF_DEBUG
	{
	  CO_ProcMonitor(APL_OUT_FILE,"Exiting UnSuccessfully Out Of IV_Proc_GenSebiAUC_Charges() \n", NULL, NULL);
	}
	return APL_FAILURE;
}
/*added by shruthi kumbla for ISKB_1901 SEBI AUC charge end*/
