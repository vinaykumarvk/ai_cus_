







#include "CO_HostStructdef.h"
EXEC SQL INCLUDE SQLCA.H;



int CR_Chk_MktPrTrd(	FILE *p_logfile,
							char **argv,
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	

	struct sqlca sqlca;	

	char		chr_l_buf[BUFFER_LEN]				= APL_NULL_STRING;
	char		chr_l_h_instrcode_A[APL_INSTRUMENTCODE_LEN]	= APL_NULL_STRING;
	char		chr_l_h_trdt_a[APL_DATE_LEN]		= APL_NULL_STRING;

	short		l_i_instr_code						= 0;
	short		l_i_trdt							= 0;

	int		int_l_reccount						= 0;
   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;

EXEC SQL VAR chr_g_restart_data is string;



	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	

	#ifdef SYS_DEBUG
		CO_ProcMonitor(	p_logfile, 
						"Entered Function CR_Chk_MktPrTrd\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
	#endif

	

	

   EXEC SQL SELECT PROCESSING_STATUS  INTO :chr_g_restart_data:g_restart_data_i
	FROM SYS_BATCHPROC
   WHERE PROCESS_NAME=:argv[0]
   AND   PROC_INIT=:argv[1]
   AND   STARTDATE=:argv[2]
   AND   STATUS='started'
   FOR UPDATE OF PROCESSING_STATUS,STATUS;

   if(APL_ZERO_RESULT_SET)
   {
      CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
      APL_GOBACK_FAIL
   }

	

	EXEC SQL DECLARE mkt_cursor CURSOR FOR
	SELECT DISTINCT INSTR_CODE, DEAL_DATE FROM DL_DEAL
	WHERE NOT EXISTS (	SELECT INSTR_CODE FROM MT_DLYMKTPRC
								WHERE INSTR_CODE = DL_DEAL.INSTR_CODE
								AND PRICE_DATE	 = DL_DEAL.DEAL_DATE );

	EXEC SQL OPEN mkt_cursor;
	IS_ANY_ORA_ERROR

	for (int_l_reccount=0; ;int_l_reccount++)
	{
		

		memset(chr_l_h_instrcode_A, NULL, APL_INSTRUMENTCODE_LEN);
		memset(chr_l_h_trdt_a, NULL, APL_DATE_LEN);
		l_i_instr_code = 0;
		l_i_trdt = 0;

		EXEC SQL FETCH mkt_cursor INTO 	:chr_l_h_instrcode_A:l_i_instr_code,
													:chr_l_h_trdt_a:l_i_trdt;

		if (APL_ZERO_RESULT_SET) break;
		IS_ANY_ORA_ERROR

		sprintf(	chr_l_buf, 
					"No Market Price record int_found for Instrurity : %9s, Date : %.11s", 
					chr_l_h_instrcode_A, 
					chr_l_h_trdt_a );
		CO_ProcMonitor(p_logfile, chr_l_buf, NULL, NULL);
	}

	EXEC SQL CLOSE mkt_cursor;

	
	
	if (!int_l_reccount)
	{
		CO_ProcMonitor(p_logfile, "Market Prices exist for all trades.", NULL, NULL);
		APL_GOBACK_SUCCESS
	}
	else
	{
		APL_GOBACK_FAIL
	}

   RETURN_SUCCESS :
		#ifdef SYS_DEBUG
			CO_ProcMonitor(	p_logfile, 
							"Leaving Function CR_Chk_MktPrTrd with success\n",
							NULL,
							NULL);
		#endif
      return(APL_SUCCESS);

   RETURN_FAILURE :
		#ifdef SYS_DEBUG
			CO_ProcMonitor(	p_logfile, 
							"Leaving Function CR_Chk_MktPrTrd with errors\n",
							NULL,
							NULL);
		#endif
      return(APL_FAILURE);

}



main(int argc,char **argv)
{
   DEBUG_INFO_STRUCT_H *l_debug_info_ptr ;
	FILE *l_finifile;

   int int_l_retval=0;
	int int_num = 0;

   char chr_uname[APL_USERID_LEN] 	= APL_NULL_STRING;
   char chr_passwd[APL_USERID_LEN] 	= APL_NULL_STRING;
	char chr_l_logdir[PATH_LENGTH] 	= APL_NULL_STRING;
	char chr_l_logname[PATH_LENGTH] 	= APL_NULL_STRING;
	char chr_l_inifile[PATH_LENGTH] 	= APL_NULL_STRING;

	FILE *l_flogfile = NULL;

   EXEC SQL VAR chr_uname IS STRING;
   EXEC SQL VAR chr_passwd IS STRING;

	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

	if ( ( l_finifile=fopen(chr_l_inifile,"r") ) == NULL)
	{
		exit(-1);
	}

	if ( APL_FAILURE == CO_ReadToken(	l_finifile,
													"DB_ID",
													chr_uname,
													&l_debug_info_ptr ))
	{
		exit(-1);
	}

	if ( APL_FAILURE == CO_ReadToken(	l_finifile,
													"DB_PWD",
													chr_passwd,
													&l_debug_info_ptr ))
	{
		exit(-1);
	}

	if ( APL_FAILURE == CO_ReadToken(	l_finifile,
													"INTL_LOG_PATH",
													chr_l_logdir,
													&l_debug_info_ptr ))
	{
		exit(-1);
	}

	

	if (fclose(l_finifile)) 
	{
		exit(-1);
	}

   

   strcpy(chr_l_logname, chr_l_logdir);
   strcat(chr_l_logname, "MPX");
   strncat(chr_l_logname, argv[3], 5);
   strcat(chr_l_logname, ".LOG");

   l_flogfile = fopen(chr_l_logname, "w");

   if (l_flogfile == NULL)
   {
      exit(-1);
   }

   EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;

   if (sqlca.sqlcode)
   {
		CO_ProcMonitor(l_flogfile, "Could not connect to database", NULL, NULL);
      APL_GOBACK_FAIL
   }
   else
   {
      int_l_retval = CR_Chk_MktPrTrd(l_flogfile, argv, &l_debug_info_ptr);
      if ( int_l_retval == APL_FAILURE )
      {
			CO_ProcMonitor(l_flogfile, "CDBChkMPTrdFn returned failure", NULL, NULL);
         APL_GOBACK_FAIL
      }
      else
      {
         EXEC SQL UPDATE SYS_BATCHPROC
         SET  status = 'completed'
         WHERE PROCESS_NAME=:argv[0]
         AND   PROC_INIT=:argv[1]
         AND   STARTDATE=:argv[2]
         AND   STATUS='started';

			if (sqlca.sqlcode)
			{
				CO_ProcMonitor(l_flogfile, "Could not update batch_in_proc", NULL, NULL);
				APL_GOBACK_FAIL
			}

         EXEC SQL COMMIT WORK RELEASE;
			if (sqlca.sqlcode)
			{
				CO_ProcMonitor(l_flogfile, "Could not do final commit", NULL, NULL);
				APL_GOBACK_FAIL
			}

         APL_GOBACK_SUCCESS
      }
   }

	RETURN_SUCCESS :
		fclose(l_flogfile);
		return(APL_SUCCESS);

	RETURN_FAILURE :
		fclose(l_flogfile);
		return(APL_FAILURE);
}
