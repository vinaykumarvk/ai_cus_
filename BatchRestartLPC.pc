


   
   
   
   
   
   
   
   
   
   
   
   




#include "stdio_64.h" 
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>
#include <sys/types.h>
#include "Intellect_Interface.h"
#include "CR_Common.h"


#define S_RESTART 10
#define S_START 11
#define S_CANNOT_EXECUTE 12
#define S_CONFLICT 13
#define S_PREDECESSOR 14
#define ERROR_LENGTH 200 
#define S_NOTGOTLOCK sqlca.sqlcode==-54


EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

char						chr_inifile[PATH_LENGTH];
FILE*						chr_finifile=NULL;
extern	char						chr_db_id[APL_USERID_LEN];
extern	char						chr_db_pwd[APL_USERID_LEN];

int	CO_GetDbCon(DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL CONNECT :chr_db_id IDENTIFIED BY :chr_db_pwd;
	IS_ANY_ORA_ERROR

	RETURN_SUCCESS:
	{
		return APL_SUCCESS;
	}
	RETURN_FAILURE:
	{
		return APL_FAILURE;
	}
}


static int CO_Pro_ChkConflicts(char **p_conflictprograms,
										char *p_sysdate,
										int *p_status_ind,
										DEBUG_INFO_STRUCT_H **l_debug_info_ptr,
										INTL_ENV_DATA_STRUCT_H *p_intl_env_datastruct_h) 
{
	int int_h_count,i;
	int int_l_noconflicts;
	char chr_errmsg[ERROR_LENGTH];
	*p_status_ind=1;

	for(i=0;p_conflictprograms[i];i++) 
	{
		EXEC SQL SELECT NVL(count(*),0) INTO :int_h_count
			FROM SYS_BATCHPROC
				WHERE PROCESS_NAME=:p_conflictprograms[i] 
				AND STATUS='started'
				AND TO_CHAR(TO_DATE(STARTDATE),'ddmmyy')=TO_CHAR(TO_DATE(:p_sysdate),'ddmmyy');
		IS_ANY_ORA_ERROR

		
		if(int_h_count) 
			break;
	}

	
	if(p_conflictprograms[i])
	{
		sprintf(chr_errmsg,"Conflict program %s running\n",p_conflictprograms[i]);
		CO_ProcMonitor(APL_OUT_FILE,chr_errmsg,NULL,p_intl_env_datastruct_h);
		*p_status_ind=0;
		APL_GOBACK_SUCCESS
	}
RETURN_SUCCESS:
{
	return APL_SUCCESS;
}
RETURN_FAILURE:
{
	return APL_FAILURE;
}
}




static int CO_Pro_ChkPredecessors(char **p_predecessorprograms,
											 char *p_sysdate,
											 int *p_status_ind,
											 DEBUG_INFO_STRUCT_H **l_debug_info_ptr,
											 INTL_ENV_DATA_STRUCT_H *p_intl_env_datastruct_h) {
	int int_h_count;
	int i;
	char chr_errmsg[ERROR_LENGTH];

	*p_status_ind=1;
	for(i=0;p_predecessorprograms[i];i++) 
	{
		EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_h_count
			FROM SYS_BATCHPROC
				WHERE PROCESS_NAME=:p_predecessorprograms[i]
				AND TO_CHAR(TO_DATE(STARTDATE),'ddmmyy')=TO_CHAR(TO_DATE(:p_sysdate),'ddmmyy')
				  AND STATUS='completed';
		IS_ANY_ORA_ERROR

		if(!int_h_count) 
			break;
	}

	if(p_predecessorprograms[i])
	{
		sprintf(chr_errmsg,"PRE_PROCESS %s not executed\n",p_predecessorprograms[i]);
		CO_ProcMonitor(APL_OUT_FILE,chr_errmsg,NULL,p_intl_env_datastruct_h);
		*p_status_ind=0;
		APL_GOBACK_SUCCESS
	}

RETURN_SUCCESS:
{
	return APL_SUCCESS;
}
RETURN_FAILURE:
{
	return APL_FAILURE;
}
}



static int CO_Pro_ChkAborted(char *p_programname,
									  char *chr_p_key_a,
									  char *p_sysdate,
									  int *p_status_ind,
									  DEBUG_INFO_STRUCT_H **l_debug_info_ptr,
									  INTL_ENV_DATA_STRUCT_H *p_intl_env_datastruct_h) {

   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;

EXEC SQL VAR chr_g_restart_data is string;

	*p_status_ind=1;
	
	EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
		FROM SYS_BATCHPROC
			WHERE PROCESS_NAME=:p_programname
			  AND PROC_INIT	  =:chr_p_key_a
			  AND STATUS  ='started'
				AND TO_CHAR(TO_DATE(STARTDATE),'ddmmyy')=TO_CHAR(TO_DATE(:p_sysdate),'ddmmyy')
			  FOR UPDATE OF STATUS NOWAIT;
	if(S_NOTGOTLOCK) {
		printf("A copy of program running\n");
		*p_status_ind=0;
		APL_GOBACK_SUCCESS
		}
	IS_ANY_ORA_ERROR			
RETURN_SUCCESS:
{
	return APL_SUCCESS;
}
RETURN_FAILURE:
{
	return APL_FAILURE;
}

}



static int CO_Pro_ChkDuplicate(char *p_programname,
									  	 char *chr_p_key_a,
										 char *p_sysdate,
										 int *p_status_ind,
										 DEBUG_INFO_STRUCT_H **l_debug_info_ptr,
										 INTL_ENV_DATA_STRUCT_H *p_intl_env_datastruct_h) 
{
	int int_h_count;
	int int_funcreturnstatus;
	char chr_errmsg[ERROR_LENGTH];
	*p_status_ind=1;

	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_h_count
		FROM SYS_BATCHPROC 
			WHERE 	PROCESS_NAME=:p_programname
				  AND	PROC_INIT	  =:chr_p_key_a
				AND TO_CHAR(TO_DATE(STARTDATE),'ddmmyy')=TO_CHAR(TO_DATE(:p_sysdate),'ddmmyy')
				  AND STATUS ='started';
	IS_ANY_ORA_ERROR

	if(int_h_count>1) 
	{
	 
		sprintf(chr_errmsg,"Duplicate entry for process %s\n",p_programname);
		CO_ProcMonitor(APL_OUT_FILE,chr_errmsg,NULL,p_intl_env_datastruct_h);
		*p_status_ind=S_CANNOT_EXECUTE;
		APL_GOBACK_SUCCESS
	}

	if(int_h_count==0) {
		*p_status_ind=S_START;
		APL_GOBACK_SUCCESS
		}

	if(CO_Pro_ChkAborted(p_programname,
								chr_p_key_a,
								p_sysdate,
								&int_funcreturnstatus,
								l_debug_info_ptr,
								p_intl_env_datastruct_h)==APL_SUCCESS){
		if(int_funcreturnstatus)
		*p_status_ind=S_RESTART;
		else
		*p_status_ind=S_CANNOT_EXECUTE;
		APL_GOBACK_SUCCESS
		}
APL_GOBACK_FAIL 
RETURN_SUCCESS:
{
	return APL_SUCCESS;
}

RETURN_FAILURE:
{
	return APL_FAILURE;
}
}

static void CO_Pro_FreeArray(char **freeThis) {
int i;
printf("Calling from FreeArray\n");
for(i=0;freeThis[i];i++)
	free(freeThis[i]);
free(freeThis);
				
}




int CO_Pro_BatchRestartLPC(char *p_progname,
						  char *chr_p_key_a,
						  char *p_funcparam,
						  int *int_p_funcreturnstate,
						  int *p_funcpid,
						  DEBUG_INFO_STRUCT_H **l_debug_info_ptr,
						  INTL_ENV_DATA_STRUCT_H *p_intl_env_datastruct_h)
{
	fprintf(APL_OUT_FILE,"Inside CO_Pro_BatchRestartLPC");
	short i_restartDataInd;
	int int_l_created;
	int int_h_progcount;
	char *chr_tempchar;
	char chr_h_checkthisprogram[PATH_LENGTH];
	int int_l_chpid;
	int int_l_status;
	int int_deleteit;
	char chr_errmsg[ERROR_LENGTH];
	int i;
	int int_l_howtostart;
	char chr_l_predecessor[PATH_LENGTH],chr_l_conflict[PATH_LENGTH];
	short l_predecessorInd,l_conflictInd;
	char chr_l_sysdate_a[APL_DATE_LEN];
	char **chr_l_predecessorarray;
	char **chr_l_conflictarray;
	int int_funcreturnstatus;
	int int_returnflag;
	char chr_sesamexecdir[PATH_LENGTH];

	chr_l_predecessorarray=chr_l_conflictarray=NULL;
	EXEC SQL VAR chr_l_predecessor IS STRING;
	EXEC SQL VAR chr_l_conflict IS STRING;
	EXEC SQL VAR chr_h_checkthisprogram IS STRING;
	int_deleteit=0;

	if((chr_tempchar=getenv("INTL_ROOT_PATH"))==NULL) 
		return(APL_FAILURE);
	sprintf(chr_inifile,"%s/intl_sun.cfg",chr_tempchar);
	if((chr_finifile=fopen(chr_inifile,"r"))==NULL)
		return(APL_FAILURE);

	if(CO_RtvSysDtTime(chr_l_sysdate_a,l_debug_info_ptr)==APL_SUCCESS)
		fprintf(APL_OUT_FILE,"The sysDate is %s\n",chr_l_sysdate_a);
	else{
		sprintf(chr_errmsg,"Could not get date");
		CO_ProcMonitor(APL_OUT_FILE,chr_errmsg,NULL,p_intl_env_datastruct_h);
		APL_GOBACK_FAIL
		}



	int_funcreturnstatus=CO_Pro_ChkDuplicate(p_progname,
												chr_p_key_a,
												chr_l_sysdate_a,
												&int_l_howtostart,
												l_debug_info_ptr,
												p_intl_env_datastruct_h);
	int_l_created=0;
   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;

EXEC SQL VAR chr_g_restart_data is string;

	if(int_funcreturnstatus==APL_FAILURE) {
		APL_GOBACK_FAIL
		}
	*int_p_funcreturnstate=S_RESTART;

	if(int_l_howtostart==S_CANNOT_EXECUTE) 
	{
		sprintf(chr_errmsg,"A copy of program still running");
		CO_ProcMonitor(APL_OUT_FILE,chr_errmsg,NULL,p_intl_env_datastruct_h);
		*int_p_funcreturnstate=S_CANNOT_EXECUTE;
		int_deleteit=1;
		APL_GOBACK_SUCCESS
	}

	if(int_l_howtostart==S_START) {
		*int_p_funcreturnstate=S_START;
		EXEC SQL INSERT INTO SYS_BATCHPROC (PROCESS_NAME,PROC_INIT,STATUS,STARTDATE,USR)
			VALUES(:p_progname,:chr_p_key_a,'started',:chr_l_sysdate_a,:p_intl_env_datastruct_h->usr);
		IS_ANY_ORA_ERROR


		EXEC SQL COMMIT;
		IS_ANY_ORA_ERROR
		
		  EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
			 FROM SYS_BATCHPROC
			  WHERE PROCESS_NAME=:p_progname
			  AND 	PROC_INIT	  =:chr_p_key_a
			  AND	STATUS  ='started'
			  AND 	STARTDATE=:chr_l_sysdate_a
		     FOR UPDATE OF STATUS,PROCESSING_STATUS NOWAIT;
		if(S_NOTGOTLOCK) {
			CO_ProcMonitor(APL_OUT_FILE,"A copy of program running",NULL,p_intl_env_datastruct_h);
			*int_p_funcreturnstate=S_CANNOT_EXECUTE;
			int_deleteit=0;
			APL_GOBACK_SUCCESS
			}

			  int_l_created=1;
		}


	EXEC SQL SELECT NVL(COUNT(PRE_PROCESS),0) INTO :int_h_progcount
		FROM SYS_BATCH_CNTRL
			WHERE PROCESS_NAME=:p_progname;
	IS_ANY_ORA_ERROR


	chr_l_predecessorarray=(char **)(malloc(sizeof(char *)*(int_h_progcount+1)));
	APL_MALLOC_FAIL(chr_l_predecessorarray)



	for(i=0;i<int_h_progcount+1;i++)
		chr_l_predecessorarray[i]=NULL;
	chr_l_predecessorarray[int_h_progcount]=NULL;

	EXEC SQL DECLARE predCursor CURSOR FOR
		SELECT PRE_PROCESS
			FROM SYS_BATCH_CNTRL
				WHERE PROCESS_NAME=:p_progname;
   IS_ANY_ORA_ERROR

	EXEC SQL OPEN predCursor;
	IS_ANY_ORA_ERROR

	for(i=0;i<int_h_progcount;i++) {
		EXEC SQL FETCH predCursor INTO :chr_h_checkthisprogram;
		IS_ANY_ORA_ERROR_CURSOR
		chr_l_predecessorarray[i]=(char *)(malloc(sizeof(char *)*(strlen(chr_h_checkthisprogram)+1)));
		APL_MALLOC_FAIL(chr_l_predecessorarray[i])

		strcpy(chr_l_predecessorarray[i],chr_h_checkthisprogram);
		}


	chr_l_predecessorarray[int_h_progcount]=NULL;

	EXEC SQL CLOSE predCursor;
	IS_ANY_ORA_ERROR
#ifdef SYS_DEBUG
	for(i=0;chr_l_predecessorarray[i];i++)
		printf("%s\n",chr_l_predecessorarray[i]);
#endif

	EXEC SQL SELECT NVL(COUNT(MISMATCH),0) INTO :int_h_progcount
		FROM SYS_BATCH_CNTRL
			WHERE PROCESS_NAME=:p_progname;
	IS_ANY_ORA_ERROR


	chr_l_conflictarray=(char **)(malloc(sizeof(char *)*(int_h_progcount+1)));
	APL_MALLOC_FAIL(chr_l_conflictarray)



	for(i=0;i<int_h_progcount;i++)
		chr_l_conflictarray[i]=NULL;
	chr_l_conflictarray[int_h_progcount]=NULL;

	EXEC SQL DECLARE confCursor CURSOR FOR
		SELECT MISMATCH
			FROM SYS_BATCH_CNTRL
				WHERE PROCESS_NAME=:p_progname;
	IS_ANY_ORA_ERROR

	EXEC SQL OPEN confCursor;

	IS_ANY_ORA_ERROR
	for(i=0;i<int_h_progcount;i++) {
		EXEC SQL FETCH confCursor INTO :chr_h_checkthisprogram;
	IS_ANY_ORA_ERROR
		chr_l_conflictarray[i]=(char *)(malloc(sizeof(char *)*(strlen(chr_h_checkthisprogram)+1)));
		APL_MALLOC_FAIL(chr_l_conflictarray[i])

		strcpy(chr_l_conflictarray[i],chr_h_checkthisprogram);
		}


	chr_l_conflictarray[int_h_progcount]=NULL;

	EXEC SQL CLOSE predCursor;
	IS_ANY_ORA_ERROR

#ifdef SYS_DEBUG
	for(i=0;chr_l_conflictarray[i];i++)
		printf("%s\n",chr_l_conflictarray[i]);
#endif

	int_funcreturnstatus=CO_Pro_ChkConflicts(chr_l_conflictarray,
													 chr_l_sysdate_a,
													 &int_returnflag,
													 l_debug_info_ptr,
													 p_intl_env_datastruct_h);
   if(int_funcreturnstatus==APL_FAILURE)
		APL_GOBACK_FAIL

	if(!int_returnflag)
	{
		sprintf(chr_errmsg,"Conflict program running\n");
		CO_ProcMonitor(APL_OUT_FILE,chr_errmsg,NULL,p_intl_env_datastruct_h);
		*int_p_funcreturnstate= S_CONFLICT;
		int_deleteit=1;
		 APL_GOBACK_SUCCESS
	}
	
	int_funcreturnstatus=CO_Pro_ChkPredecessors(chr_l_predecessorarray,
														 chr_l_sysdate_a,
														 &int_returnflag,
														 l_debug_info_ptr,
														 p_intl_env_datastruct_h);
	if(int_funcreturnstatus==APL_FAILURE)
		APL_GOBACK_FAIL
	if(!int_returnflag)
	{
		sprintf(chr_errmsg,"PRE_PROCESS not executed as yet\n");
		CO_ProcMonitor(APL_OUT_FILE,chr_errmsg,NULL,p_intl_env_datastruct_h);
		*int_p_funcreturnstate=S_PREDECESSOR;
		int_deleteit=1;
		APL_GOBACK_SUCCESS
	}
	if ( CO_ReadToken(chr_finifile,"INTL_PROG_PATH",chr_sesamexecdir,l_debug_info_ptr)
			== APL_FAILURE)
		APL_GOBACK_FAIL

	Alert("\n Inside BatchRestartLPC.pc: before waitpid...");
	fflush(stdout);

	waitpid(-1,NULL,WNOHANG);
	signal(SIGCHLD,SIG_DFL);  // AIX -Change

	Alert("\n Inside BatchRestartLPC.pc: after waitpid...");
	fflush(stdout);

	if((int_l_chpid=fork())==-1) 
	{
	printf("\n Inside BatchRestartLPC.pc: after fork inside ...int_l_chpid=|%d|",int_l_chpid);
		fprintf(APL_OUT_FILE,"Cannot fork");
		APL_GOBACK_FAIL
	}
	printf("\n Inside BatchRestartLPC.pc: after fork outside ...int_l_chpid=|%d|",int_l_chpid);
	

	if(int_l_chpid) 
	{

		printf("\n Inside BatchRestartLPC.pc: Inside if after fork inside int_l_chpid is Calling fork now ... |%d|\n",int_l_chpid);

	EXEC SQL VAR chr_l_sysdate_a IS STRING;
	EXEC SQL VAR p_intl_env_datastruct_h->processtion IS STRING;

	*p_funcpid = int_l_chpid;

	EXEC SQL UPDATE SYS_BATCHPROC
		SET PROC_ID=:int_l_chpid,
			 PROC_ENDFLG='N',
			 STARTDATE=:chr_l_sysdate_a,
			 PROCESS_DESC=:p_intl_env_datastruct_h->processtion,
			 USR=:p_intl_env_datastruct_h->usr
		WHERE PROCESS_NAME=:p_progname
		AND	PROC_INIT	  =:chr_p_key_a
		AND TO_CHAR(TO_DATE(STARTDATE),'ddmmyy')=TO_CHAR(TO_DATE(:chr_l_sysdate_a),'ddmmyy')
		AND	STATUS='started';
	IS_ANY_ORA_ERROR

	

	EXEC SQL INSERT INTO AUDIT_LOG
	VALUES (	:p_intl_env_datastruct_h->usr,
				:p_intl_env_datastruct_h->h_mode,
				:p_intl_env_datastruct_h->processtion,
				:p_intl_env_datastruct_h->auth_req,
				:p_intl_env_datastruct_h->subprocess,
				:p_intl_env_datastruct_h->h_process,
				:chr_l_sysdate_a,
				NULL );
	IS_ANY_ORA_ERROR

	if(int_l_howtostart==S_START) {
			sprintf(chr_errmsg,"Successfully started %s",p_progname);
			CO_ProcMonitor(APL_OUT_FILE,chr_errmsg,NULL,p_intl_env_datastruct_h);
			EXEC SQL COMMIT;
	IS_ANY_ORA_ERROR
			}
		else {
			sprintf(chr_errmsg,"Successfully restarted %s",p_progname);
			CO_ProcMonitor(APL_OUT_FILE,chr_errmsg,NULL,p_intl_env_datastruct_h);
			}
		APL_GOBACK_SUCCESS
	}
	else 
	{
		
		printf("\n Inside BatchRestartLPC.pc: Inside else after fork inside int_l_chpid is Calling fork now ... |%d|\n",int_l_chpid);
		strcat(chr_sesamexecdir,p_progname);
printf("\n Inside BatchRestartLPC.pc: Inside else |%s|%s|%s|%s|\n",chr_sesamexecdir, p_progname,chr_p_key_a,chr_l_sysdate_a);

		execlp(chr_sesamexecdir,
				 p_progname,
				 chr_p_key_a,
				 chr_l_sysdate_a,
				 p_intl_env_datastruct_h->usr,
				 p_intl_env_datastruct_h->h_mode,
				 p_intl_env_datastruct_h->processtion,
				 p_intl_env_datastruct_h->auth_req,
				 p_intl_env_datastruct_h->subprocess,
				 p_intl_env_datastruct_h->h_process,
				 p_funcparam,
				 (char *)NULL);  //AIX -Warning Removal
		sprintf(chr_errmsg,"Could not execute the program %s",p_progname);
		CO_ProcMonitor(APL_OUT_FILE,chr_errmsg,NULL,p_intl_env_datastruct_h);
		int_l_created=0;
			exit(-1);
	}




RETURN_SUCCESS:	
{
	fclose(chr_finifile);
	printf("Inside BatchRestartLPC.pc: In the return block\n");
	 if(chr_l_predecessorarray) 
		CO_Pro_FreeArray(chr_l_predecessorarray);
	 if(chr_l_conflictarray) 
		CO_Pro_FreeArray(chr_l_conflictarray);
	printf("Inside BatchRestartLPC.pc: Returned from FreeArrays\n");
	printf("Inside BatchRestartLPC.pc: Going to commit\n");
	printf("\n AmitN--- Inside BatchRestart: fflush \n");
	fflush(stdout); 
	printf("\n AmitN--- Inside BatchRestart: Before Commit \n");
	EXEC SQL COMMIT ;
	printf("\n AmitN--- Inside BatchRestart: After Commit \n");
	printf("Inside BatchRestartLPC.pc: Returning from BatchRestart\n");
   fflush(stdout);
	return APL_SUCCESS;
}

RETURN_FAILURE:
{
	if(chr_l_predecessorarray) 
		CO_Pro_FreeArray(chr_l_predecessorarray);
	if(chr_l_conflictarray) 
		CO_Pro_FreeArray(chr_l_conflictarray);
	if(int_l_created) {
		EXEC SQL DELETE SYS_BATCHPROC
			WHERE PROCESS_NAME=:p_progname
			AND 	PROC_INIT	  =:chr_p_key_a
			AND	STATUS  ='started'
			AND 	STARTDATE=:chr_l_sysdate_a;
		EXEC SQL COMMIT;
	}
	CO_ProcMonitor(APL_OUT_FILE,NULL,l_debug_info_ptr,p_intl_env_datastruct_h);
	EXEC SQL COMMIT ;
	fclose(chr_finifile);
	return APL_FAILURE;
	}
} 
