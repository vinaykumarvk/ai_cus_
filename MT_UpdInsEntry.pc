/*Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         : MASTERS MAINTAINANCE
 *
 * File Name           : MT_UpdInsEntry.pc
 *
 * Description         : This file contains all functions for maintenance of
 *                        Client instrument details
 *
 *
 *
 *
 *            Version Control Block
 *
 * Date        Version          Author               Description
 * ---------   --------  ---------------  ---------------------------
 *             1.0           ANIL                  NEW FILE RFS No HDFCMT_006
 * 14/12/2005  1.2           Sonali                Changed update statement HDFCMT_006
 *
 *********************************************************************/


#include  "CO_IndStructdef.h"
#include  "MT_Interface.h"
#include  "CR_Common.h"
#include  "CO_Commdef.h"
#include  "Intellect_Error.h"
#include "Intellect_Common.h"
#include "sqlca.h"

int MT_DbInslEntryFn(MT_INSL_ENTRY_STRUCT_H *p_mt_insl_entry_struct_h,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
  {
  MT_INSL_ENTRY_STRUCT_I *l_mt_insl_entry_struct_i;
struct sqlca sqlca;
      char chr_acc_stamp_compare[APL_DATE_LEN];
      char chr_sys_time_stamp[APL_DATE_LEN];
      short l_maker, l_makerdt, l_checker, l_checkerdt, l_access_stamp;
      short l_access_stamp_compare;
      int int_error_flag = APL_SUCCESS;
      int int_ret_val = 0;
#ifdef APL_THREADS
    APL_SET_CONTEXT
    EXEC SQL CONTEXT USE :my_ctx_local;
#endif
    APL_IF_DEBUG
      {
       CO_ProcMonitor(APL_OUT_FILE, "Entered Function MT_DbInslEntryFn\n",
                NULL,p_intl_envdatastruct_h);
      }
l_mt_insl_entry_struct_i = (MT_INSL_ENTRY_STRUCT_I *)calloc(1,sizeof(MT_INSL_ENTRY_STRUCT_I));
APL_MALLOC_FAIL(l_mt_insl_entry_struct_i)
  l_maker =0;
  l_makerdt =0;
  l_checker =0;
  l_checkerdt =0;
  l_access_stamp =0;
  l_access_stamp_compare =0;

   APL_IF_DEBUG
{
 CO_ProcMonitor(APL_OUT_FILE, "Entered Function MT_DbInslEntryFn\n", NULL,p_intl_envdatastruct_h);
     }
 if (!strlen(p_mt_insl_entry_struct_h->h_depo_code)) l_mt_insl_entry_struct_i->i_depo_code =-1;
     else l_mt_insl_entry_struct_i->i_depo_code =0;
if (!strlen(p_mt_insl_entry_struct_h->h_depo_part_code)) l_mt_insl_entry_struct_i->i_depo_part_code =-1;
     else l_mt_insl_entry_struct_i->i_depo_part_code =0;
 if (!strlen(p_mt_insl_entry_struct_h->h_cln_code)) l_mt_insl_entry_struct_i->i_cln_code =-1;
     else l_mt_insl_entry_struct_i->i_cln_code =0;
 if (!strlen(p_mt_insl_entry_struct_h->h_trans_type)) l_mt_insl_entry_struct_i->i_trans_type =-1;
     else l_mt_insl_entry_struct_i->i_trans_type =0;
if (!strlen(p_mt_insl_entry_struct_h->h_slip_series)) l_mt_insl_entry_struct_i->i_slip_series=-1;
     else l_mt_insl_entry_struct_i->i_slip_series =0;
 if (p_mt_insl_entry_struct_h->h_sr_no_from ==0) l_mt_insl_entry_struct_i->i_sr_no_from =-1;
     else l_mt_insl_entry_struct_i->i_sr_no_from =0;
if (p_mt_insl_entry_struct_h->h_sr_no_to ==0) l_mt_insl_entry_struct_i->i_sr_no_to=-1;
     else l_mt_insl_entry_struct_i->i_sr_no_to =0;
 if (p_mt_insl_entry_struct_h->h_sr_avl_qty ==0) l_mt_insl_entry_struct_i->i_sr_avl_qty =-1;
     else l_mt_insl_entry_struct_i->i_sr_avl_qty =0;
if (!strlen(p_mt_insl_entry_struct_h->h_maker)) l_mt_insl_entry_struct_i->i_maker =-1;
     else l_mt_insl_entry_struct_i->i_maker =0;
 if (!strlen(p_mt_insl_entry_struct_h->h_maker_dt)) l_mt_insl_entry_struct_i->i_maker_dt =-1;
     else l_mt_insl_entry_struct_i->i_maker_dt =0;
 if (!strlen(p_mt_insl_entry_struct_h->h_access_stamp)) l_mt_insl_entry_struct_i->i_access_stamp =-1;
     else l_mt_insl_entry_struct_i->i_access_stamp =0;
 if (!strlen(p_mt_insl_entry_struct_h->h_status)) l_mt_insl_entry_struct_i->i_status =-1;
       else l_mt_insl_entry_struct_i->i_status =0;


 if(CO_RtvSysDtTime(chr_sys_time_stamp,l_debug_info_ptr) !=APL_SUCCESS)
  {
        APL_GOBACK_FAIL
  }

 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_INPUT))
 {
     APL_IF_DEBUG
      {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Input h_mode of Function MT_DbInslEntryFn\n",
                NULL,p_intl_envdatastruct_h);
      }
    strcpy(p_mt_insl_entry_struct_h->h_status,STATUS_UAUTH);
             l_mt_insl_entry_struct_i->i_status =0;
    strcpy(p_mt_insl_entry_struct_h->h_maker,p_intl_envdatastruct_h->usr);
              l_mt_insl_entry_struct_i->i_maker =0;
    strcpy(p_mt_insl_entry_struct_h->h_maker_dt,chr_sys_time_stamp);
            l_mt_insl_entry_struct_i->i_maker_dt =0;
    strcpy(p_mt_insl_entry_struct_h->h_access_stamp,chr_sys_time_stamp);
            l_mt_insl_entry_struct_i->i_access_stamp =0;
    strcpy(p_mt_insl_entry_struct_h->h_checker,APL_NULL_STRING);
    strcpy(p_mt_insl_entry_struct_h->h_checker_dt,APL_NULL_STRING);

     EXEC SQL INSERT INTO MT_INSL_ENTRY VALUES (:p_mt_insl_entry_struct_h:l_mt_insl_entry_struct_i);

     IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_INSTRUCTIONSLIP_EXISTS,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
  }
if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_MODIFY))
     {
       l_checker =-1;
       l_checkerdt =-1;
       strcpy(p_mt_insl_entry_struct_h->h_checker,APL_NULL_STRING);
       strcpy(p_mt_insl_entry_struct_h->h_checker_dt,APL_NULL_STRING);
CO_ProcMonitor(APL_OUT_FILE, "Entered Modify h_mode of Function  MT_DbInslEntryFn\n",NULL,p_intl_envdatastruct_h);
       EXEC SQL SELECT ACCESS_STAMP, STATUS
         INTO   :chr_acc_stamp_compare:l_access_stamp_compare,
             :p_mt_insl_entry_struct_h->h_status:l_mt_insl_entry_struct_i->i_status
                 FROM  MT_INSL_ENTRY
          WHERE DEPO_CODE =:p_mt_insl_entry_struct_h->h_depo_code
           AND DEPO_PART_CODE =:p_mt_insl_entry_struct_h->h_depo_part_code
           AND       CLN_CODE =:p_mt_insl_entry_struct_h->h_cln_code
           AND      TRANS_TYPE =:p_mt_insl_entry_struct_h->h_trans_type
                  FOR UPDATE;
            IS_ANY_ORA_ERROR;
    if (!strcmp(p_mt_insl_entry_struct_h->h_access_stamp,chr_acc_stamp_compare))
       {
      if(strcmp(p_mt_insl_entry_struct_h->h_status,STATUS_DEL_UAUTH))
       {
         strcpy(p_mt_insl_entry_struct_h->h_access_stamp,chr_sys_time_stamp);
         l_mt_insl_entry_struct_i->i_access_stamp =0;
         strcpy(p_mt_insl_entry_struct_h->h_status,STATUS_UAUTH);
         l_mt_insl_entry_struct_i->i_status =0;
         strcpy(p_mt_insl_entry_struct_h->h_maker,p_intl_envdatastruct_h->usr);
          l_mt_insl_entry_struct_i->i_maker =0;

         EXEC SQL UPDATE MT_INSL_ENTRY SET
         SLIP_SERIES=:p_mt_insl_entry_struct_h->h_slip_series:l_mt_insl_entry_struct_i->i_slip_series,
         SR_NO_FROM=:p_mt_insl_entry_struct_h->h_sr_no_from:l_mt_insl_entry_struct_i->i_sr_no_from,
         SR_NO_TO=:p_mt_insl_entry_struct_h->h_sr_no_to:l_mt_insl_entry_struct_i->i_sr_no_to,
			SR_AVL_QTY=:p_mt_insl_entry_struct_h->h_sr_avl_qty:l_mt_insl_entry_struct_i->i_sr_avl_qty,
         MAKER =:p_intl_envdatastruct_h->usr:l_maker,
         MAKER_DT =:chr_sys_time_stamp:l_makerdt,
         CHECKER_DT =:p_mt_insl_entry_struct_h->h_checker_dt:l_checkerdt,
         STATUS =:p_mt_insl_entry_struct_h->h_status:l_mt_insl_entry_struct_i->i_status,
         ACCESS_STAMP =:chr_sys_time_stamp:l_access_stamp
         WHERE DEPO_CODE =:p_mt_insl_entry_struct_h->h_depo_code
        AND DEPO_PART_CODE =:p_mt_insl_entry_struct_h->h_depo_part_code
           AND       CLN_CODE =:p_mt_insl_entry_struct_h->h_cln_code
           AND      TRANS_TYPE =:p_mt_insl_entry_struct_h->h_trans_type;
         IS_ANY_ORA_ERROR;
      }
 else
     {
         if (CO_InsertErr
                        (l_debug_info_ptr,
                         ERR_INSLIPMODIFY_NOTALLOWED,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         __LINE__,
                         __FILE__
                        ) != APL_SUCCESS)
                        APL_GOBACK_FAIL
                        APL_GOBACK_FAIL
     }
  }
      else
        {
         if (CO_InsertErr
                        (l_debug_info_ptr,
                         ERR_ACCESSSTAMP_CHGD,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         __LINE__,
                         __FILE__
                        ) != APL_SUCCESS)
                        APL_GOBACK_FAIL
                        APL_GOBACK_FAIL
           }
   }
if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_AUTHORISE))
        {
        APL_IF_DEBUG
         {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Authorize h_mode of Function MT_DbInslEntryFn\n",
                NULL,p_intl_envdatastruct_h);
         }
        memset(p_mt_insl_entry_struct_h->h_status, NULL, APL_STATUS_LEN);

        EXEC SQL SELECT ACCESS_STAMP, STATUS
         INTO   :chr_acc_stamp_compare:l_access_stamp_compare,
                :p_mt_insl_entry_struct_h->h_status:l_mt_insl_entry_struct_i->i_status
                 FROM  MT_INSL_ENTRY
          WHERE DEPO_CODE =:p_mt_insl_entry_struct_h->h_depo_code
           AND DEPO_PART_CODE =:p_mt_insl_entry_struct_h->h_depo_part_code
        AND        CLN_CODE =:p_mt_insl_entry_struct_h->h_cln_code
          AND      TRANS_TYPE =:p_mt_insl_entry_struct_h->h_trans_type
         FOR UPDATE;
IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_INSTRUCTIONSLIP_EXISTS,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
        IS_ANY_ORA_ERROR
        if (!strcmp(p_mt_insl_entry_struct_h->h_access_stamp,chr_acc_stamp_compare))
           {
        if(strcmp(p_mt_insl_entry_struct_h->h_status,STATUS_DEL_UAUTH))
            {
            strcpy(p_mt_insl_entry_struct_h->h_access_stamp,chr_sys_time_stamp);
            l_mt_insl_entry_struct_i->i_access_stamp =0;
             strcpy(p_mt_insl_entry_struct_h->h_checker,p_intl_envdatastruct_h->usr);
            l_mt_insl_entry_struct_i->i_checker=0;
            strcpy(p_mt_insl_entry_struct_h->h_checker_dt,chr_sys_time_stamp);
            l_mt_insl_entry_struct_i->i_checker_dt=0;
            strcpy(p_mt_insl_entry_struct_h->h_status,STATUS_AUTH);
            l_mt_insl_entry_struct_i->i_status =0;
       EXEC SQL UPDATE MT_INSL_ENTRY SET
       CHECKER =:p_intl_envdatastruct_h->usr:l_checker,
       CHECKER_DT =:chr_sys_time_stamp:l_checkerdt,
       ACCESS_STAMP =:chr_sys_time_stamp:l_access_stamp,
       STATUS =:p_mt_insl_entry_struct_h->h_status:l_mt_insl_entry_struct_i->i_status
          WHERE DEPO_CODE =:p_mt_insl_entry_struct_h->h_depo_code
          AND DEPO_PART_CODE =:p_mt_insl_entry_struct_h->h_depo_part_code
             AND       CLN_CODE =:p_mt_insl_entry_struct_h->h_cln_code
             AND TRANS_TYPE =:p_mt_insl_entry_struct_h->h_trans_type;
                IS_ANY_ORA_ERROR;
 }
            else
 {
            EXEC SQL DELETE MT_INSL_ENTRY
     WHERE DEPO_CODE =:p_mt_insl_entry_struct_h->h_depo_code
       AND DEPO_PART_CODE =:p_mt_insl_entry_struct_h->h_depo_part_code
       AND       CLN_CODE =:p_mt_insl_entry_struct_h->h_cln_code
                 AND TRANS_TYPE =:p_mt_insl_entry_struct_h->h_trans_type;
            IS_ANY_ORA_ERROR
            }
           }
        else
           {
                if (CO_InsertErr
                        (l_debug_info_ptr,
                         ERR_ACCESSSTAMP_CHGD,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         __LINE__,
                         __FILE__
                        ) != APL_SUCCESS)
                        APL_GOBACK_FAIL
                        APL_GOBACK_FAIL
           }

  }
if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_RESET))
        {
          APL_IF_DEBUG
          {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Reset h_mode of Function MT_DbInslEntryFn\n",
                NULL,p_intl_envdatastruct_h);
          }
        memset(p_mt_insl_entry_struct_h->h_status, NULL, APL_STATUS_LEN);

        EXEC SQL SELECT ACCESS_STAMP, STATUS
                 INTO   :chr_acc_stamp_compare:l_access_stamp_compare,
                        :p_mt_insl_entry_struct_h->h_status:l_mt_insl_entry_struct_i->i_status
                 FROM MT_INSL_ENTRY
                  WHERE DEPO_CODE =:p_mt_insl_entry_struct_h->h_depo_code
          AND DEPO_PART_CODE =:p_mt_insl_entry_struct_h->h_depo_part_code
       AND       CLN_CODE =:p_mt_insl_entry_struct_h->h_cln_code
                 AND TRANS_TYPE =:p_mt_insl_entry_struct_h->h_trans_type
                  FOR UPDATE ;
IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_INSTRUCTIONSLIP_EXISTS,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
        IS_ANY_ORA_ERROR

        if (!strcmp(p_mt_insl_entry_struct_h->h_access_stamp,chr_acc_stamp_compare))
           {
        if(!strcmp(p_mt_insl_entry_struct_h->h_status,STATUS_DEL_UAUTH))
            {
            strcpy(p_mt_insl_entry_struct_h->h_access_stamp,chr_sys_time_stamp);
            l_mt_insl_entry_struct_i->i_access_stamp =0;
             strcpy(p_mt_insl_entry_struct_h->h_checker,p_intl_envdatastruct_h->usr);
            l_mt_insl_entry_struct_i->i_checker=0;
            strcpy(p_mt_insl_entry_struct_h->h_checker_dt,chr_sys_time_stamp);
            l_mt_insl_entry_struct_i->i_checker_dt=0;
            strcpy(p_mt_insl_entry_struct_h->h_status,STATUS_AUTH);
            l_mt_insl_entry_struct_i->i_status =0;
          EXEC SQL UPDATE MT_INSL_ENTRY SET
           CHECKER =:p_intl_envdatastruct_h->usr:l_checker,
           CHECKER_DT =:chr_sys_time_stamp:l_checkerdt,
           ACCESS_STAMP =:chr_sys_time_stamp:l_access_stamp,
                STATUS =:p_mt_insl_entry_struct_h->h_status:l_mt_insl_entry_struct_i->i_status
                  WHERE DEPO_CODE =:p_mt_insl_entry_struct_h->h_depo_code
           AND DEPO_PART_CODE =:p_mt_insl_entry_struct_h->h_depo_part_code
       AND       CLN_CODE =:p_mt_insl_entry_struct_h->h_cln_code
                 AND TRANS_TYPE =:p_mt_insl_entry_struct_h->h_trans_type;
 IS_ANY_ORA_ERROR;
                }
         else
{

                 if (CO_InsertErr
                        (l_debug_info_ptr,
                         ERR_INSLIPRESET_NOTALLOWED,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         __LINE__,
                         __FILE__
                        ) != APL_SUCCESS)
                        APL_GOBACK_FAIL
                             APL_GOBACK_FAIL
           }
}
        else
 {
                if (CO_InsertErr
                        (l_debug_info_ptr,
                         ERR_ACCESSSTAMP_CHGD,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         __LINE__,
                         __FILE__
                        ) != APL_SUCCESS)
                        APL_GOBACK_FAIL
                        APL_GOBACK_FAIL
           }
        }
if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_DELETE))
        {
        l_checker =-1;
        l_checkerdt =-1;
       strcpy(p_mt_insl_entry_struct_h->h_checker,APL_NULL_STRING);
       strcpy(p_mt_insl_entry_struct_h->h_checker_dt,APL_NULL_STRING);
          APL_IF_DEBUG
           {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Delete h_mode of Function  MT_DbInslEntryFn\n",
                NULL,p_intl_envdatastruct_h);
              }
 EXEC SQL SELECT ACCESS_STAMP
                  INTO :chr_acc_stamp_compare:l_access_stamp_compare
                  FROM MT_INSL_ENTRY
                  WHERE DEPO_CODE =:p_mt_insl_entry_struct_h->h_depo_code
                  AND DEPO_PART_CODE =:p_mt_insl_entry_struct_h->h_depo_part_code
                  AND       CLN_CODE =:p_mt_insl_entry_struct_h->h_cln_code
                  AND TRANS_TYPE =:p_mt_insl_entry_struct_h->h_trans_type
                  FOR UPDATE ;
        IS_ANY_ORA_ERROR

        if (!strcmp(p_mt_insl_entry_struct_h->h_access_stamp,chr_acc_stamp_compare))
           {
        strcpy(p_mt_insl_entry_struct_h->h_access_stamp,chr_sys_time_stamp);
        l_mt_insl_entry_struct_i->i_access_stamp =0;
        strcpy(p_mt_insl_entry_struct_h->h_status,STATUS_DEL_UAUTH);
        l_mt_insl_entry_struct_i->i_status =0;

         EXEC SQL UPDATE MT_INSL_ENTRY SET
        MAKER =:p_intl_envdatastruct_h->usr:l_maker,
         MAKER_DT =:chr_sys_time_stamp:l_makerdt,
       CHECKER =:p_intl_envdatastruct_h->usr:l_checker,
       CHECKER_DT =:chr_sys_time_stamp:l_checkerdt,
       ACCESS_STAMP =:chr_sys_time_stamp:l_access_stamp,
       STATUS =:p_mt_insl_entry_struct_h->h_status:l_mt_insl_entry_struct_i->i_status
          WHERE DEPO_CODE =:p_mt_insl_entry_struct_h->h_depo_code
          AND DEPO_PART_CODE =:p_mt_insl_entry_struct_h->h_depo_part_code
           AND       CLN_CODE =:p_mt_insl_entry_struct_h->h_cln_code
          AND TRANS_TYPE =:p_mt_insl_entry_struct_h->h_trans_type;
        IS_ANY_ORA_ERROR
           }
        else
          {
                if (CO_InsertErr
                        (l_debug_info_ptr,
                         ERR_ACCESSSTAMP_CHGD,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         __LINE__,
                         __FILE__
                        ) != APL_SUCCESS)
                        APL_GOBACK_FAIL
                        APL_GOBACK_FAIL
   }
}
 if (int_error_flag == APL_FAILURE)
        {
        APL_GOBACK_FAIL
        }
        APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
        {
          CO_ProcMonitor(APL_OUT_FILE, "Function MT_DbInslEntryFn successful\n",NULL,p_intl_envdatastruct_h);
        free(l_mt_insl_entry_struct_i);
        return(APL_SUCCESS);
        }
   RETURN_FAILURE :
        {
        CO_ProcMonitor(APL_OUT_FILE, "Function MT_DbInslEntryFn successful\n",NULL,p_intl_envdatastruct_h);
        free(l_mt_insl_entry_struct_i);
        return(APL_FAILURE);
   }

}

int MTMkrCkrInstrFn(char *p_depo_code,char *p_depo_part_code,char *p_cln_code,char *p_trans_type,char *p_user,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
  struct sqlca sqlca;
  char maker[15];
  short l_maker = 0;
  int int_error_flag = APL_SUCCESS;

#ifdef APL_THREADS
    APL_SET_CONTEXT
    EXEC SQL CONTEXT USE :my_ctx_local;
#endif

APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Function MTMkrCkrInstrFn\n",
                NULL,NULL);
 }


  if (!strlen(p_depo_code))
        {
        APL_DATA_MISSING("Depository Code",APL_NULL_STRING,APL_NULL_STRING);
        int_error_flag = APL_FAILURE;
        }
if (!strlen(p_depo_part_code))
        {
        APL_DATA_MISSING("Depository Participant Code",APL_NULL_STRING,APL_NULL_STRING);
        int_error_flag = APL_FAILURE;
        }
   if (!strlen(p_cln_code))
    {
      APL_DATA_MISSING("CLIENT CODE",APL_NULL_STRING,APL_NULL_STRING);
      int_error_flag = APL_FAILURE;
    }

    if (!strlen(p_trans_type))
    {
      APL_DATA_MISSING("TRANSACTION TYPE",APL_NULL_STRING,APL_NULL_STRING);
      int_error_flag = APL_FAILURE;
     }
  if (!strlen(p_user))
        {
        APL_DATA_MISSING("User",APL_NULL_STRING,APL_NULL_STRING);
        int_error_flag = APL_FAILURE;
        }

  if (int_error_flag == APL_FAILURE)
        {
        APL_GOBACK_FAIL
        }
  EXEC SQL VAR maker IS STRING(15);
 EXEC SQL SELECT MAKER
                INTO :maker:l_maker
                FROM MT_INSL_ENTRY
                WHERE DEPO_CODE =:p_depo_code
                 AND DEPO_Part_CODE =:p_depo_part_code
                 AND CLN_CODE =:p_cln_code
                 AND TRANS_TYPE =:p_trans_type;

        IS_ANY_ORA_ERROR
  if (strcmp(p_user,maker)==0)
        {
         if (CO_InsertErr
                        (l_debug_info_ptr,
                        ERR_MAKER_CHECKER_SAME,
                        APL_NULL_STRING,
                        APL_NULL_STRING,
                        APL_NULL_STRING,
                        __LINE__,
                         __FILE__
                        ) == APL_SUCCESS)
        APL_GOBACK_FAIL
        int_error_flag = APL_FAILURE;
        }

  if (int_error_flag == APL_FAILURE)
        {
        APL_GOBACK_FAIL
        }
  APL_GOBACK_SUCCESS
 RETURN_SUCCESS :
        {
APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "MTMkrCkrInstrFn Successful\n",
                NULL,NULL);
 }
        return(APL_SUCCESS);
        }
  RETURN_FAILURE :
        {
APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "MTMkrCkrInstrFn unsuccessful\n",
                NULL,NULL);
 }
        return(APL_FAILURE);
        }

}
int CR_Chk_ValAtClient(MT_INSL_ENTRY_STRUCT_H *p_mt_insl_entry_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
        struct sqlca sqlca;
        char chr_p_Clstatus[3];
        short l_CStatus;
        char chr_p_Dstatus[3];
        short l_Dstatus;
       int      l_instr_count = 0;
#ifdef APL_THREADS
        APL_SET_CONTEXT
                EXEC SQL CONTEXT USE :my_ctx_local;
#endif

        APL_IF_DEBUG
        {
                CO_ProcMonitor(APL_OUT_FILE, "Entered Function CR_Chk_ValAtClient \n",
                                NULL,NULL);
        }
        
        memset(chr_p_Clstatus,NULL,3);


EXEC SQL SELECT STATUS into :chr_p_Clstatus:l_CStatus
                FROM MT_CLIENT
                WHERE CLN_CODE =:p_mt_insl_entry_struct_h->h_cln_code;
     IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
        if (!strcmp(chr_p_Clstatus,STATUS_UAUTH))
        {
                APL_GOBACK_FAIL
        }
 EXEC SQL SELECT STATUS into :chr_p_Dstatus:l_Dstatus
                 FROM MT_DEPO_PART
                 WHERE DEPO_PART_CODE =:p_mt_insl_entry_struct_h->h_depo_part_code;
IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
     if (!strcmp(chr_p_Dstatus,STATUS_UAUTH))
        {
                APL_GOBACK_FAIL
        }

 if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
        {
         APL_GOBACK_FAIL
         }
 else
      APL_GOBACK_SUCCESS
RETURN_SUCCESS :
               {
          APL_IF_DEBUG
                {
                 CO_ProcMonitor(APL_OUT_FILE, "Function CR_Chk_ValAtClient is successful\n",
                                        NULL,NULL);
                }
                return(APL_SUCCESS);
                }
RETURN_FAILURE :
                  {
                APL_IF_DEBUG
                {
                CO_ProcMonitor(APL_OUT_FILE, " CR_Chk_ValAtClient is failed\n",
                                        NULL,NULL);
                }
               return(APL_FAILURE);
                  }
}
int ChkInstrSlip(MT_INSL_ENTRY_STRUCT_H *p_mt_insl_entry_struct_h,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
      struct sqlca   sqlca;
      int      l_instr_count = 0;
      APL_IF_DEBUG
      {
         CO_ProcMonitor(APL_OUT_FILE,"Entered Processation ChkInstrSlip \n",NULL,NULL);

      }

      sqlca.sqlcode = 0;
         EXEC SQL SELECT NVL(COUNT(*),0) INTO :l_instr_count
                  FROM  MT_INSL_ENTRY 
                  WHERE    DEPO_CODE =:p_mt_insl_entry_struct_h->h_depo_code
                  AND DEPO_PART_CODE =:p_mt_insl_entry_struct_h->h_depo_part_code
                  AND      CLN_CODE =:p_mt_insl_entry_struct_h->h_cln_code
                  AND   TRANS_TYPE =:p_mt_insl_entry_struct_h->h_trans_type;
                  
          if (l_instr_count == 0)
           {
                if(CO_InsertErr(
                        l_debug_info_ptr,
                        ERR_INSTRUCTIONSLIP_NOTFND,
                       APL_NULL_STRING,
                        APL_NULL_STRING,
                       APL_NULL_STRING,
                        __LINE__,
                        __FILE__
                        ) != APL_SUCCESS)
 APL_GOBACK_FAIL
 APL_GOBACK_FAIL
           }
 if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
        {
         APL_GOBACK_FAIL
         }
 else
      APL_GOBACK_SUCCESS

      RETURN_SUCCESS :
      {
      APL_IF_DEBUG
    CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion ChkInstrSlip with Success\n",NULL,p_intl_envdatastruct_h);
      return(APL_SUCCESS);
      }

      RETURN_FAILURE :
      {
      APL_IF_DEBUG
  CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion ChkInstrSlip with Failure\n",NULL,p_intl_envdatastruct_h);
    return(APL_FAILURE);//AIX Migration Changes
      }
}


