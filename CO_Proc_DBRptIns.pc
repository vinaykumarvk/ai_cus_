/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
/*********************************************************************
 *
 * Module Name         :      
 *
 * File Name           :     CO_Proc_DBRptIns.pc 
 *
 * Description         :      
 *
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author           Description          RFS No.
 * ---------   --------  ---------------  ------------------   ---------
 * 18/10/2011             Sana Bhatkar    batch.out in seperate  Retro done for AIX mig for ISKB_4872
 *                                        log files
 *************************************************************************/



#include "CO_HostStructdef.h"
EXEC SQL INCLUDE SQLCA.H;



#define APL_PID_LEN 6
/* Retro Done for AIX migration */
/* Changes done by Vilin Patil for ISKB_4872 on 19/08/2011 -- start */
int g_int_sleep_dup2_flg = 0;
/* Changes done by Vilin Patil for ISKB_4872 on 19/08/2011 -- end */

int RtvNewFileName(	char *p_rep_st,
							char *chr_l_rname,
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{
	struct sqlca sqlca;
	int	int_l_jdate = 0;
	int	i=0, j=0;
	int int_l_sleep_val = 0;
	int int_l_count = 0;
	char 	chr_l_itime[8] 					= APL_NULL_STRING;
	char	chr_l_sjdate[4] 				= APL_NULL_STRING;
	char	chr_l_now[APL_DATE_LEN] 		= APL_NULL_STRING;
	char	chr_l_tnow[APL_DATE_LEN] 	= APL_NULL_STRING;
	char	chr_l_fname[PATH_LENGTH] 	= APL_NULL_STRING;
	char  	chr_l_name[36]			= APL_NULL_STRING;   /*Changed by Shweta*/
	char	chr_l_rep_desc[31] 			= APL_NULL_STRING;
	char	chr_l_h_statinfo[71] 			= APL_NULL_STRING;	
	char    p_rep_desc  			= "XLS_REPORT";
	short	l_i_statinfo = 0;
	pid_t 	l_myid;	/* JC - ISKB_530 */ 
	char	chr_l_pid[APL_PID_LEN] = APL_NULL_STRING; /* JC - ISKB_530 */

	INTL_REPT_STRUCT_H *l_intl_rept_struct_ha = NULL;	
	memset(chr_l_fname, APL_NULL_CHAR, PATH_LENGTH); /* JC - 5-June-2009 */
	memset(chr_l_name, APL_NULL_CHAR, 35); /* JC - 5-June-2009 */
		
	sqlca.sqlcode = 0;
	l_intl_rept_struct_ha = (INTL_REPT_STRUCT_H *)calloc(1, sizeof(INTL_REPT_STRUCT_H));
	APL_MALLOC_FAIL(l_intl_rept_struct_ha);

	Alert("Hm 1");

	strcpy(chr_l_name, p_rep_st);

	l_myid = getpid();
	Alert("\nJC::::: PID -- [%d]\n", l_myid);

	if(l_myid < 10)
	{
		sprintf(chr_l_pid, "0000%d", l_myid);
	}
	else if(l_myid < 100)
	{
		sprintf(chr_l_pid, "000%d", l_myid);
	}
	else if(l_myid < 1000)
	{
		sprintf(chr_l_pid, "00%d", l_myid);
	}
	else if(l_myid < 10000)
	{
		sprintf(chr_l_pid, "0%d", l_myid);
	}
	else
	{
		sprintf(chr_l_pid, "%d", l_myid);
	}

	printf("JC::::: Final Char PID -- [%s]\n", chr_l_pid);

	strcat(chr_l_name, chr_l_pid);
	/* JC - ISKB_530 -- End */

	printf("JC::: After PID chr_l_name - [%s]\n", chr_l_name);

	if (APL_FAILURE == CO_RtvSysDtTime(	chr_l_now,
						l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}


	strcpy(chr_l_tnow, chr_l_now);

	printf("\n 124" );


	chr_l_tnow[0] = '0';
	chr_l_tnow[1] = '1';
	chr_l_tnow[3] = '0';
	chr_l_tnow[4] = '1';


	if (APL_FAILURE == CO_Pro_DateComp(	chr_l_tnow,
												chr_l_now,
												&int_l_jdate,
												l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}


	if (int_l_jdate < 10)
	{
		sprintf(chr_l_sjdate, "00%d", int_l_jdate);
	}
	else if (int_l_jdate < 100)
	{
		sprintf(chr_l_sjdate, "0%d", int_l_jdate);
	}
	else
	{
		sprintf(chr_l_sjdate, "%d", int_l_jdate);
	}

	strcat(chr_l_name, chr_l_sjdate);

	printf("JC::: 111 chr_l_name - [%s]\n", chr_l_name);
	fflush(stdout);

	Alert("Hm 1");
	for (	i=11,j=0; j<9; )
	{	 
		if (chr_l_now[i++] != ':') chr_l_itime[j++] = chr_l_now[i-1];
		if (j==3) chr_l_itime[j++] = '.';
	}

	Alert("Hm 1");
	strcat(chr_l_name, chr_l_itime);

	strcat(chr_l_name,".xls"); /**** Vinay kalaskar ******/
	strcat(chr_l_name,APL_NULL_STRING); /**** Vinay kalaskar ******/ //Changed by kotubabu

	strcat(chr_l_fname, chr_l_name);
	strcpy(chr_l_rname, chr_l_fname);

	Alert("\n **** done **** %s ",chr_l_rname);

	
	APL_GOBACK_SUCCESS

	RETURN_FAILURE:
		Alert("Fail");
		return(APL_FAILURE);

	RETURN_SUCCESS:
		Alert("Success");
		return(APL_SUCCESS);
} 

int CO_Rtv_RptFileName(	char *p_rep_st,
							char *p_rep_desc,
							int   p_repwidateh,
							char *p_funcdesc,
							char **argv,
							FILE **p_file_handle,
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{


	struct sqlca sqlca;

	int	int_l_jdate = 0;
	int	i=0, j=0;
/* Retro Done for AIX migration */
 /* Changes done by Vilin Patil for ISKB_4872 on 19/08/2011 -- start */
  int int_l_sleep_val = 0;
  int int_l_count = 0;
 /* Changes done by Vilin Patil for ISKB_4872 on 19/08/2011 -- end */

	char 	chr_l_itime[8] 					= APL_NULL_STRING;
	char	chr_l_sjdate[4] 				= APL_NULL_STRING;
	char	chr_l_now[APL_DATE_LEN] 		= APL_NULL_STRING;
	char	chr_l_tnow[APL_DATE_LEN] 	= APL_NULL_STRING;
	char	chr_l_fname[PATH_LENGTH] 	= APL_NULL_STRING;
//	char	chr_l_name[31] 			= APL_NULL_STRING; Commented by JC - 5-June-2009 
	//char  	chr_l_name[35]			= APL_NULL_STRING;  JC - 5-June-2009 
        char  	chr_l_name[36]			= APL_NULL_STRING;   /*Changed by Shweta*/
/* Retro Done for AIX migration */
/* Changes done by Vilin Patil for ISKB_4872 on 19/08/2011 -- start */
        char  chr_l_dup2_file_name[PATH_LENGTH] = APL_NULL_STRING;
/* Changes end by Vilin Patil for ISKB_4872 on 19/08/2011 -- end */
	char	chr_l_inifile[PATH_LENGTH] 	= APL_NULL_STRING;
	char	chr_l_rep_desc[31] 			= APL_NULL_STRING;
	char	chr_l_h_statinfo[71] 			= APL_NULL_STRING;
	char 	chr_l_tmp[APL_DATE_LEN]		=	APL_NULL_STRING;
	short	l_i_statinfo = 0;
	pid_t 	l_myid;	/* JC - ISKB_530 */ 
	char	chr_l_pid[APL_PID_LEN] = APL_NULL_STRING; /* JC - ISKB_530 */

	INTL_REPT_STRUCT_H *l_intl_rept_struct_ha = NULL;	

	FILE *l_finifile = NULL;
/* Retro Done for AIX migration */
  /* Changes done by Vilin Patil for ISKB_4872 on 19/08/2011 -- start */
        int int_l_retval = -1;
        FILE *l_fdup2file = NULL;
  /* Changes done by Vilin Patil for ISKB_4872 on 19/08/2011 -- end  */
	
	memset(chr_l_inifile, APL_NULL_CHAR, PATH_LENGTH); /* PJ */
	memset(chr_l_tmp, APL_NULL_CHAR, APL_DATE_LEN);

	memset(chr_l_fname, APL_NULL_CHAR, PATH_LENGTH); /* JC - 5-June-2009 */
	memset(chr_l_name, APL_NULL_CHAR, 35); /* JC - 5-June-2009 */
	
   #ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE	:my_ctx_local;
	#endif

	EXEC SQL VAR chr_l_h_statinfo IS STRING;

	sqlca.sqlcode = 0;


	l_intl_rept_struct_ha = (INTL_REPT_STRUCT_H *)calloc(1, sizeof(INTL_REPT_STRUCT_H));
	APL_MALLOC_FAIL(l_intl_rept_struct_ha);


	if (strlen(p_rep_desc) > 30)
	{
		strncpy(chr_l_rep_desc, p_rep_desc, 30);
		chr_l_rep_desc[30] = '\0';
	}
	else
	{
		strcpy(chr_l_rep_desc, p_rep_desc);
	}


	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE, "Entered processtion GBGenRepFileFn", NULL, NULL);
	}

   strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
   strcat(chr_l_inifile,"intl_sun.cfg");


   if ( ( l_finifile=fopen(chr_l_inifile,"r") ) == NULL)
   {
Alert("Error while opening intl_sun.cfg");
      APL_GOBACK_FAIL
   }

	if (!strcmp(chr_l_rep_desc, APL_LOGFILE_DESC))
	{
   	if ( APL_FAILURE == CO_ReadToken(   l_finifile,
      	                                 "INTL_LOG_PATH",
         	                              chr_l_fname,
            	                           l_debug_info_ptr ))
   	{
Alert("Error From CO_ReadToken");
      	APL_GOBACK_FAIL
   	}
	}
	else
	{
   	if ( APL_FAILURE == CO_ReadToken(   l_finifile,
      	                                 "INTL_REP_PATH",
         	                              chr_l_fname,
            	                           l_debug_info_ptr ))
   	{
Alert("Error From CO_ReadToken 1");
      	APL_GOBACK_FAIL
   	}
	}

	strcpy(chr_l_name, p_rep_st);


	/* JC - ISKB_530 -- Start */
	l_myid = getpid();
	printf("\nJC::::: PID -- [%d]\n", l_myid);

	if(l_myid < 10)
	{
		sprintf(chr_l_pid, "0000%d", l_myid);
	}
	else if(l_myid < 100)
	{
		sprintf(chr_l_pid, "000%d", l_myid);
	}
	else if(l_myid < 1000)
	{
		sprintf(chr_l_pid, "00%d", l_myid);
	}
	else if(l_myid < 10000)
	{
		sprintf(chr_l_pid, "0%d", l_myid);
	}
	else
	{
		sprintf(chr_l_pid, "%d", l_myid);
	}

	printf("JC::::: Final Char PID -- [%s]\n", chr_l_pid);

	strcat(chr_l_name, chr_l_pid);
	/* JC - ISKB_530 -- End */

	printf("JC::: After PID chr_l_name - [%s]\n", chr_l_name);

	if (APL_FAILURE == CO_RtvSysDtTime(	chr_l_now,
															l_debug_info_ptr ))
	{
Alert("Error From CO_RtvSysDtTime ");
		APL_GOBACK_FAIL
	}


	strcpy(chr_l_tnow, chr_l_now);

	printf("\n 124" );


	chr_l_tnow[0] = '0';
	chr_l_tnow[1] = '1';
	chr_l_tnow[3] = '0';
	chr_l_tnow[4] = '1';


	if (APL_FAILURE == CO_Pro_DateComp(	chr_l_tnow,
												chr_l_now,
												&int_l_jdate,
												l_debug_info_ptr ))
	{

Alert("Error from CO_Pro_DateComp ");
		APL_GOBACK_FAIL
	}


	if (int_l_jdate < 10)
	{
		sprintf(chr_l_sjdate, "00%d", int_l_jdate);
	}
	else if (int_l_jdate < 100)
	{
		sprintf(chr_l_sjdate, "0%d", int_l_jdate);
	}
	else
	{
		sprintf(chr_l_sjdate, "%d", int_l_jdate);
	}

	strcat(chr_l_name, chr_l_sjdate);

	printf("JC::: 111 chr_l_name - [%s]\n", chr_l_name);
	fflush(stdout);

	for (	i=11,j=0; j<9; )
	{	 
		if (chr_l_now[i++] != ':') chr_l_itime[j++] = chr_l_now[i-1];
		if (j==3) chr_l_itime[j++] = '.';
	}

	strcat(chr_l_name, chr_l_itime);

	strcat(chr_l_name,".txt"); /**** Vinay kalaskar ******/
	strcat(chr_l_name,APL_NULL_STRING); /**** Vinay kalaskar ******/ //Changed by kotubabu

	strcat(chr_l_fname, chr_l_name);

	*p_file_handle = fopen(chr_l_fname,"w");


	if (*p_file_handle == NULL)
	{
		APL_GOBACK_FAIL
	}
       
	strcpy(l_intl_rept_struct_ha->report_name, chr_l_name); 
	strcpy(l_intl_rept_struct_ha->report_desc, chr_l_rep_desc);
	printf("\n **** 173 **** \n");

	if (NULL != argv)
	{
                strcpy(l_intl_rept_struct_ha->report_date, argv[2]);  
	}
	else
	{
		strcpy(l_intl_rept_struct_ha->report_date, chr_l_now);
	}
	
	l_intl_rept_struct_ha->report_width = p_repwidateh;
	
	if(p_funcdesc) strcpy(l_intl_rept_struct_ha->task_desc, p_funcdesc);
   strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);

	if (NULL != argv)
	{
   	strcpy(l_intl_rept_struct_ha->usr, argv[3]);
	}

	/* PJ Adding below code as structure not getting proper memory */

	if (NULL != argv)
	{
	if (APL_FAILURE == CO_Proc_DBRptIns_New	(chr_l_name,chr_l_rep_desc, argv[2],p_repwidateh,p_funcdesc,APL_BE_IND,argv[3],l_debug_info_ptr))
	{
Alert("Error From CO_Proc_DBRptIns_New ");
		APL_GOBACK_FAIL
	}
	}
	else
	{
	if (APL_FAILURE == CO_Proc_DBRptIns_New	(chr_l_name,chr_l_rep_desc, chr_l_now,p_repwidateh,p_funcdesc,APL_BE_IND,l_intl_rept_struct_ha->usr,l_debug_info_ptr))
	{
Alert("Error From CO_Proc_DBRptIns_New  1 ");
		APL_GOBACK_FAIL
	}
	}
	
	/*if (APL_FAILURE == CO_Proc_DBRptIns(	&l_intl_rept_struct_ha, l_debug_info_ptr))
	{
		APL_GOBACK_FAIL
	}*/


/* Retro Done for AIX migration */
    /* Changes done by Vilin Patil for ISKB_4872 --- start  */
       if(!strlen(g_mt_commonsys_params_struct_h.nation_code))
       {

          if ( CO_RtvSysParams(l_debug_info_ptr) == APL_FAILURE)
          {
             fprintf(APL_OUT_FILE, "Returned Failure from CO_RtvSysParams()");
             APL_GOBACK_FAIL
          }
       }
       IF_COND_EXISTS("APL_SLEEP_DUP2", "YES")
       {
          printf("APL_SLEEP_DUP2 = YES\n");
          printf("g_int_sleep_dup2_flg = |%d|\n", g_int_sleep_dup2_flg);
          if(g_int_sleep_dup2_flg == 0)
          {
             // Now dup2
             IF_COND_EXISTS("APL_DUP2", "YES")
             {
                if (!strcmp(chr_l_rep_desc, APL_LOGFILE_DESC))
                 {
                   strcpy(chr_l_dup2_file_name, chr_l_fname);
                   strcat(chr_l_dup2_file_name, ".batch.log");
                    l_fdup2file = fopen(chr_l_dup2_file_name,"w");
                   if (l_fdup2file == NULL)
                    {
                       printf("|%s| file creation failed\n", chr_l_dup2_file_name);
                         APL_GOBACK_FAIL
                    }
                   if(argv != NULL)
                      printf("Batch log of |%s| is being redirected to |%s|\n", argv[0], chr_l_dup2_file_name);
                   printf("**********************************************************\n");
                   fflush(stdout);
                   int_l_retval = dup2(fileno(l_fdup2file), 1);
                   printf("dup2 retval = |%d|\n", int_l_retval);
                   if(int_l_retval)
                   {
                      if(argv != NULL)
                         printf("Log of |%s| |%d| from Daemon_Batch.out\n", argv[0], l_myid);
                      printf("**********************************************************\n");
                      printf("* Below contents would have ended up in Daemon_Batch.out *\n");
                      printf("**********************************************************\n");
                   }
                   int_l_count = 0;
                   if(argv != NULL)
                   {
                      EXEC SQL SELECT NVL(COUNT(*), 0)
                      INTO :int_l_count
                      FROM PRO_GSSPLVAL
                      WHERE TRIM(MAIN_FUN) = 'APL_DUP2'
                      AND TRIM(SUB_PROCESS) = 'BATCH_LOG'
                      AND TRIM(FIELD_VAL) = :argv[0]
                      AND NATION = :g_mt_commonsys_params_struct_h.nation_code;
                     IS_ANY_ORA_ERROR
                   }
                  if(int_l_count)
                   {
                     printf("******************************************************\n");
                      printf("* File content is redirected to |%s| *\n", chr_l_fname);
                      printf("******************************************************\n");
                      if(argv != NULL)
                         printf("Batch log of |%s| is being redirected to |%s|\n", argv[0], chr_l_fname);
                      fflush(l_fdup2file);
                      int_l_retval = dup2(fileno(*p_file_handle), 1);
                      printf("dup2 retval = |%d|\n", int_l_retval);
                      if(int_l_retval)
                      {
                         printf("**********************************************************\n");
                         printf("* Below contents would have ended up in |%s.batch.log| *\n",chr_l_fname);
                         printf("**********************************************************\n");
                      }
                   }
                }
             }
             else
             {
                printf("APL_DUP2 = NO\n");
             }
             // Now Sleep
             IF_COND_EXISTS("APL_SLEEP", "YES")
             {
                if(argv != NULL)
                {
                printf("Checking for Sleep condition\n");
                EXEC SQL SELECT TO_NUMBER(TRIM(FIELD_VAL))
                INTO :int_l_sleep_val
                FROM PRO_GSSPLVAL
                WHERE TRIM(MAIN_FUN) = 'APL_SLEEP_TIME'
                AND TRIM(SUB_PROCESS) = :argv[0]
                AND NATION = :g_mt_commonsys_params_struct_h.nation_code
                AND ROWNUM < 2;
                IS_ANY_ORA_ERROR
               if(sqlca.sqlcode == 0)
                {
                   printf("|%s| Sleeping for |%d| seconds\n", argv[0], int_l_sleep_val);
                   sleep(int_l_sleep_val);
                }
                else
                {
                   printf("No sleep for |%s|. sqlcode = |%d|\n", argv[0], sqlca.sqlcode);
                sqlca.sqlcode = 0;
                }
                }
             }
             else
             {
                printf("APL_SLEEP = NO\n");
             }
             g_int_sleep_dup2_flg = 1;
          } /* g_int_sleep_dup2_flg */
       }
       else
       {
          printf("APL_SLEEP_DUP2 = NO\n");
       }
    /* Changes end by Vilin Patil for ISKB_4872 --- end */
	
	printf("\n **** done **** \n");

	
	APL_GOBACK_SUCCESS

	RETURN_FAILURE:
	fclose(l_finifile);
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE, 
						"Leaving processtion GBGenRepFileFn with errors",
						NULL,
						NULL);
		return(APL_FAILURE);

	RETURN_SUCCESS:
	fclose(l_finifile);
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE, 
						"Leaving processtion GBGenRepFileFn successfully",
						NULL,
						NULL);
		return(APL_SUCCESS);
} 



int CO_Proc_RptClose(	FILE *p_fhandle,
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{
	struct sqlca sqlca;
	int int_retval;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE	:my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	APL_IF_DEBUG
		CO_ProcMonitor(APL_OUT_FILE, "Entered processtion GDBClosRepFileFn", NULL, NULL);

	if (p_fhandle != NULL)
	{
		int_retval = fclose(p_fhandle);
	}

	if (int_retval)
	{
		APL_GOBACK_FAIL
	}
	else
	{
		APL_GOBACK_SUCCESS
	}

	RETURN_FAILURE:
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE, 
						"Leaving processtion CO_Proc_RptClose with errors",
						l_debug_info_ptr,
						NULL );
		return(APL_FAILURE);

	RETURN_SUCCESS:
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE, 
						"Leaving processtion CO_Proc_RptClose successfully",
						NULL,
						NULL );
		return(APL_SUCCESS);
} 



int CO_Proc_DBRptIns(	INTL_REPT_STRUCT_H *p_intl_rept_struct_h,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{
	struct sqlca sqlca;
	char chr_l_dir_alias[PATH_LENGTH] = APL_NULL_STRING;
	char chr_my_report   [PATH_LENGTH] = APL_NULL_STRING;
	char chr_inifile     [PATH_LENGTH]  = APL_NULL_STRING;
	char chr_temp_report [PATH_LENGTH]  = APL_NULL_STRING;
	FILE                 *chr_finifile, *f_my_report;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE	:my_ctx_local;
	#endif


		/**AMOL**/
		EXEC SQL BEGIN DECLARE SECTION;
			char chr_path_report [501]  = APL_NULL_STRING;/**AMOL**/
			EXEC SQL  VAR chr_path_report IS STRING;
		EXEC SQL END DECLARE SECTION;

	memset(chr_path_report,APL_NULL_CHAR,501);

	strcpy(chr_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_inifile,"/intl_sun.cfg");

	if ( ( chr_finifile=fopen(chr_inifile,"r") ) == NULL)
		APL_GOBACK_FAIL


	if (!strcmp(p_intl_rept_struct_h->report_desc, APL_HOFF_FILE_DESC))
	{

		if ( CO_ReadToken(chr_finifile,"INTL_HF_PATH",chr_my_report,l_debug_info_ptr) == APL_FAILURE)
			APL_GOBACK_FAIL

		strcpy(chr_temp_report,chr_my_report);
		if ((f_my_report = fopen(strcat(chr_temp_report,p_intl_rept_struct_h->report_name),"r")) == NULL)
		{
			if ( CO_ReadToken(chr_finifile,"INTL_AE_PATH",chr_my_report,l_debug_info_ptr) == APL_FAILURE)
				APL_GOBACK_FAIL

			strcpy(chr_temp_report,chr_my_report);
			if ((f_my_report = fopen(strcat(chr_temp_report,p_intl_rept_struct_h->report_name),"r")) == NULL)
			{
			
				
				if ( CO_ReadToken(chr_finifile,"INTL_CUST_HF_PATH",chr_my_report,l_debug_info_ptr) == APL_FAILURE)
					APL_GOBACK_FAIL
				strcpy(chr_temp_report,chr_my_report);
				if ((f_my_report = fopen(strcat(chr_temp_report,p_intl_rept_struct_h->report_name),"r")) == NULL)
				{
					if ( CO_ReadToken(chr_finifile,"INTL_HF_EIPATH",chr_my_report,l_debug_info_ptr) == APL_FAILURE)
						APL_GOBACK_FAIL
					strcpy(chr_l_dir_alias,"INTL_HF_EIPATH");
				}
				else
				{
					fclose(f_my_report);
					strcpy(chr_l_dir_alias,"INTL_CUST_HF_PATH");
					
				}
			}
			else
			{
				fclose(f_my_report);
				strcpy(chr_l_dir_alias,"INTL_AE_PATH");
			}
			
		}
		else
		{
			fclose(f_my_report);
			strcpy(chr_l_dir_alias,"INTL_HF_PATH");
		}

	
	}
	else if (!strcmp(p_intl_rept_struct_h->report_desc, APL_LOGFILE_DESC))
	{
		strcpy(chr_l_dir_alias,"INTL_LOG_PATH");
	}
	else
	{
		if ( CO_ReadToken(chr_finifile,"INTL_REP_PATH",chr_my_report,l_debug_info_ptr) == APL_FAILURE)
			APL_GOBACK_FAIL

		strcpy(chr_temp_report,chr_my_report);
		if ((f_my_report = fopen(strcat(chr_temp_report,p_intl_rept_struct_h->report_name),"r")) == NULL)
		{
			strcpy(chr_l_dir_alias,"INTL_LOG_PATH");
		}
		else
			strcpy(chr_l_dir_alias,"INTL_REP_PATH");
	}


	if ( CO_ReadToken(chr_finifile,chr_l_dir_alias,chr_path_report,l_debug_info_ptr) == APL_FAILURE)
		APL_GOBACK_FAIL



		APL_IF_DEBUG
		printf("Report path Before report name: |%s|\n",chr_path_report);

		strcat(chr_path_report,p_intl_rept_struct_h->report_name);
		
		APL_IF_DEBUG
		printf("Report path After report name: |%s|\n",chr_path_report);
                printf("shyam::p_intl_rept_struct_h = %s",p_intl_rept_struct_h);

	#ifdef DCE_INSTALLED
		EXEC SQL INSERT INTO PRO_COMMON_REPORT VALUES (:p_intl_rept_struct_h,NULL);
	#else
		/*EXEC SQL INSERT INTO PRO_COMMON_REPORT VALUES (:p_intl_rept_struct_h,bfilename(:chr_l_dir_alias,:p_intl_rept_struct_h->report_name));*/
/*****AMOL***/


		EXEC SQL INSERT INTO PRO_COMMON_REPORT VALUES (:p_intl_rept_struct_h,:chr_path_report);
	#endif

	IS_ANY_ORA_ERROR

	APL_GOBACK_SUCCESS

	RETURN_FAILURE:
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE, 
						"Leaving processtion CO_Proc_DBRptIns with errors",
						NULL,
						NULL );
		return(APL_FAILURE);

	RETURN_SUCCESS:
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE, 
						"Leaving processtion CO_Proc_DBRptIns successfully",
						NULL,
						NULL );
		return(APL_SUCCESS);
	
}



int CO_Proc_RptIns(	char *p_repname,
						char *p_repdesc,
						int p_repwidateh,
						INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{
	

	char						chr_l_now[APL_DATE_LEN]	= APL_NULL_STRING;
	INTL_REPT_STRUCT_H 			*l_intl_rept_struct_ha = NULL;

	

   l_intl_rept_struct_ha = (INTL_REPT_STRUCT_H *)calloc(1, sizeof(INTL_REPT_STRUCT_H));
	APL_MALLOC_FAIL(l_intl_rept_struct_ha);

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered GBInsReptFn",NULL,NULL);
	}

	

	if (!strlen(p_repname))
	{
		APL_DATA_MISSING("Report Name", APL_NULL_STRING, APL_NULL_STRING);
		APL_GOBACK_FAIL
	}

	

	if (APL_FAILURE == CO_RtvSysDtTime(	chr_l_now,
															l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	

  	strncpy(l_intl_rept_struct_ha->report_name, p_repname, APL_REPNAME_LENGTH - 1);
	l_intl_rept_struct_ha->report_name[APL_REPNAME_LENGTH - 1] = '\0';
	strncpy(l_intl_rept_struct_ha->report_desc, p_repdesc, APL_REPDESC_LENGTH - 1);
	l_intl_rept_struct_ha->report_desc[APL_REPDESC_LENGTH - 1] = '\0';
	strcpy(l_intl_rept_struct_ha->report_date, chr_l_now);
	l_intl_rept_struct_ha->report_width = p_repwidateh;
	strcpy(l_intl_rept_struct_ha->task_desc, p_intl_envdatastruct_h->processtion);
	strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_FE_IND);
	strcpy(l_intl_rept_struct_ha->usr, p_intl_envdatastruct_h->usr);

	

	if (APL_FAILURE == CO_Proc_DBRptIns(	l_intl_rept_struct_ha,
												l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	APL_GOBACK_SUCCESS

	RETURN_FAILURE:
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE, 
						"Leaving processtion CO_Proc_RptIns with errors",
						NULL,
						p_intl_envdatastruct_h );
		return(APL_FAILURE);

	RETURN_SUCCESS:
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE, 
						"Leaving processtion CO_Proc_RptIns successfully",
						NULL,
						p_intl_envdatastruct_h );
		return(APL_SUCCESS);
	
}



int CO_Proc_RptInsNew(INTL_REPT_STRUCT_H *p_intl_rept_struct_h, char *p_token, DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{
	struct sqlca sqlca;
	char chr_l_dir_alias[PATH_LENGTH] = APL_NULL_STRING;
	char chr_my_report   [PATH_LENGTH] = APL_NULL_STRING;
	char chr_inifile     [PATH_LENGTH]  = APL_NULL_STRING;
	char chr_temp_report [501]  = APL_NULL_STRING;
	char chr_intl_name [51]  = APL_NULL_STRING;
	FILE *chr_finifile = (FILE *)NULL;
	FILE *f_my_report;
	char *ptr_path=NULL;

	INTL_REPT_STRUCT_H *l_intl_rept_struct_ha;
	l_intl_rept_struct_ha = (INTL_REPT_STRUCT_H *)calloc(1, sizeof(INTL_REPT_STRUCT_H));
        APL_MALLOC_FAIL(l_intl_rept_struct_ha);

	char l_chr_temp_rep_name[51] = APL_NULL_STRING;		/* UAT Fix to copy report name in a temp var -- Sana -- AIX Mig */

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE	:my_ctx_local;
	#endif


		/**AMOL**/
		EXEC SQL BEGIN DECLARE SECTION;
		EXEC SQL  VAR chr_temp_report IS STRING; 
		EXEC SQL  VAR p_intl_rept_struct_h->report_name IS STRING;
		EXEC SQL  VAR p_intl_rept_struct_h->report_desc IS STRING;
		EXEC SQL  VAR p_intl_rept_struct_h->report_date IS STRING;
		EXEC SQL  VAR p_intl_rept_struct_h->task_desc IS STRING;
		EXEC SQL  VAR p_intl_rept_struct_h->usr IS STRING;
		EXEC SQL END DECLARE SECTION;

   	CO_ProcMonitor(APL_OUT_FILE, "Entered processtion CO_Proc_RptInsNew \n", NULL, NULL );

		memset(l_chr_temp_rep_name,APL_NULL_CHAR,sizeof(l_chr_temp_rep_name));
		strcpy(l_chr_temp_rep_name,p_intl_rept_struct_h->report_name);

		/* Added To Copy Report Structure Into a New Variable [start] */
		memset(l_intl_rept_struct_ha->report_name,APL_NULL_CHAR,51);
                memset(l_intl_rept_struct_ha->report_desc,APL_NULL_CHAR,APL_REPDESC_LENGTH);
                memset(l_intl_rept_struct_ha->report_date,APL_NULL_CHAR,APL_DATE_LEN);
                memset(l_intl_rept_struct_ha->task_desc,APL_NULL_CHAR,61);
                memset(l_intl_rept_struct_ha->fe_be_ind,APL_NULL_CHAR,APL_FLAG_LENGTH);
                memset(l_intl_rept_struct_ha->usr,APL_NULL_CHAR,15);
		Alert("Report Name is |%s| - Amit ",l_chr_temp_rep_name);
		strcpy(l_intl_rept_struct_ha->report_name,l_chr_temp_rep_name);
		strcpy(l_intl_rept_struct_ha->report_desc,p_intl_rept_struct_h->report_name);
		strcpy(l_intl_rept_struct_ha->report_date,p_intl_rept_struct_h->report_date);
		strcpy(l_intl_rept_struct_ha->task_desc,p_intl_rept_struct_h->task_desc);
		strcpy(l_intl_rept_struct_ha->fe_be_ind,p_intl_rept_struct_h->fe_be_ind);
		strcpy(l_intl_rept_struct_ha->usr,p_intl_rept_struct_h->usr);
		l_intl_rept_struct_ha->report_width = 100;


		/* Added To Copy Report Structure Into a New Variable [end] */

		memset(chr_inifile,APL_NULL_CHAR,sizeof(chr_inifile));
		memset(chr_l_dir_alias,APL_NULL_CHAR,sizeof(chr_l_dir_alias));
		memset(chr_my_report,APL_NULL_CHAR,sizeof(chr_my_report));
		memset(chr_temp_report,APL_NULL_CHAR,sizeof(chr_temp_report));
		memset(chr_intl_name,APL_NULL_CHAR,sizeof(chr_intl_name));
		ptr_path = (char *) calloc (500,sizeof(char));
	
		strcpy(chr_inifile,getenv("INTL_ROOT_PATH"));
		strcat(chr_inifile,"/intl_sun.cfg");
		printf("\nINTL_ROOT_PATH |%s|\n",chr_inifile);
		fflush(stdout);

		if ( ( chr_finifile=fopen(chr_inifile,"r") ) == NULL)
		{
			printf("\nFailed in Opening File");
			APL_GOBACK_FAIL
		}

	Alert("Token is = |%s|",p_token);
	fflush(stdout);
								/* PJ adding & */ 
	if ( CO_ReadToken(chr_finifile,p_token,&chr_temp_report,l_debug_info_ptr) == APL_FAILURE)
	{
		printf("\nFailed in ReadToken Function\nToken Name|%s|",p_token);
		APL_GOBACK_FAIL
	}
	printf("Gouse :: After CO_ReadToken \n");
	fflush(stdout);

	if ( CO_ReadToken(chr_finifile,"INTL_NAME",chr_intl_name,l_debug_info_ptr) == APL_FAILURE)
	{
		APL_GOBACK_FAIL
		
	}

		printf("\nValue of chr_temp_report=|%s|",chr_temp_report);
		fflush(stdout);

		strcpy(chr_my_report,chr_temp_report);
		ptr_path=strstr(chr_temp_report,chr_intl_name);
		printf("\nValue of ptr_path=|%s|",ptr_path);
		fflush(stdout);

		memset(chr_temp_report,APL_NULL_CHAR,sizeof(chr_temp_report));
		strcpy(chr_temp_report,ptr_path+strlen(chr_intl_name));

		//strcat(chr_temp_report,p_intl_rept_struct_h->report_name);
		strcat(chr_temp_report,l_chr_temp_rep_name);
		strcat(chr_my_report,l_chr_temp_rep_name);

		printf("Link To File is = |%s|", chr_my_report);

		strcpy(p_intl_rept_struct_h->report_name, l_chr_temp_rep_name);
		Alert("Report Name is = |%s|",p_intl_rept_struct_h->report_name);


		Alert("PATH OF THE REPORT IS |%s|",chr_temp_report);
		fflush(stdout);

		printf("\n 852|%s| ", p_intl_rept_struct_h->fe_be_ind);
		fflush(stdout);
		strcpy(p_intl_rept_struct_h->fe_be_ind,"B");	
		printf("\n 852|%s| ", p_intl_rept_struct_h->fe_be_ind);
		fflush(stdout);

	EXEC SQL INSERT INTO PRO_COMMON_REPORT VALUES (:p_intl_rept_struct_h,:chr_my_report);
		IS_ANY_ORA_ERROR
	/* PJ KOTAK AIX UAT Stucture not working passing single values to table EXEC SQL INSERT INTO PRO_COMMON_REPORT VALUES (:l_intl_rept_struct_ha,:chr_my_report); */
		/*if (APL_FAILURE == CO_Proc_DBRptIns_New(l_chr_temp_rep_name,p_intl_rept_struct_h->report_desc,p_intl_rept_struct_h->report_date,100,p_intl_rept_struct_h->task_desc,p_intl_rept_struct_h->fe_be_ind,p_intl_rept_struct_h->usr,l_debug_info_ptr))
		{
			printf("\n Failed 854 while inserting into pro_common_report ");
			APL_GOBACK_FAIL
		}*/

		free(l_intl_rept_struct_ha);
	APL_GOBACK_SUCCESS

	RETURN_FAILURE:
		fclose(chr_finifile);
			CO_ProcMonitor(APL_OUT_FILE, "Leaving processtion CO_Proc_RptInsNew with errors", NULL, NULL );
		return(APL_FAILURE);

	RETURN_SUCCESS:
		fclose(chr_finifile);
			CO_ProcMonitor(APL_OUT_FILE, "Leaving processtion CO_Proc_RptInsNew successfully", NULL, NULL );
		return(APL_SUCCESS);
	
}

int CO_Proc_DBRptIns_New( char *report_name,char *report_desc,char *report_date,int report_width,char *report_task_desc,char *fe_be_ind,char *p_usr,DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{
	struct sqlca sqlca;
	char chr_l_dir_alias[PATH_LENGTH] = APL_NULL_STRING;
	char chr_my_report   [PATH_LENGTH] = APL_NULL_STRING;
	char chr_inifile     [PATH_LENGTH]  = APL_NULL_STRING;
	char chr_temp_report [PATH_LENGTH]  = APL_NULL_STRING;
	FILE                 *chr_finifile, *f_my_report;

		INTL_REPT_STRUCT_H *l_intl_rept_struct_h = NULL ;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE	:my_ctx_local;
	#endif


		EXEC SQL BEGIN DECLARE SECTION;
		char chr_path_report [501]  = APL_NULL_STRING;
			EXEC SQL  VAR chr_path_report IS STRING;
		short i_col=0;	
		EXEC SQL END DECLARE SECTION;

	strcpy(chr_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_inifile,"/intl_sun.cfg");

	if ( ( chr_finifile=fopen(chr_inifile,"r") ) == NULL)
            {
     Alert("ERROR IN READING  intl_sun.cfg INSIDE FAIL");
		APL_GOBACK_FAIL
            }

	if (!strcmp(report_desc, APL_HOFF_FILE_DESC)||strstr(report_desc,APL_HOFF_FILE_DESC))
	{


		if ( CO_ReadToken(chr_finifile,"INTL_HF_PATH",chr_my_report,l_debug_info_ptr) == APL_FAILURE)
                      {
Alert("ERROR FROM CO_ReadToken INTL_HF_PATH ");
			APL_GOBACK_FAIL
                      }
		strcpy(chr_temp_report,chr_my_report);
		if ((f_my_report = fopen(strcat(chr_temp_report,report_name),"r")) == NULL)
		{
Alert("Failure  ");
			if ( CO_ReadToken(chr_finifile,"INTL_AE_PATH",chr_my_report,l_debug_info_ptr) == APL_FAILURE)
                           {
Alert("ERROR FROM CO_ReadToken INTL_AE_PATH ");
				APL_GOBACK_FAIL
                           }
			strcpy(chr_temp_report,chr_my_report);
			if ((f_my_report = fopen(strcat(chr_temp_report,report_name),"r")) == NULL)
			{
			
				
				if ( CO_ReadToken(chr_finifile,"INTL_CUST_HF_PATH",chr_my_report,l_debug_info_ptr) == APL_FAILURE)
{
Alert("Failure From INTL_CUST_HF_PATH");
					APL_GOBACK_FAIL

}
				strcpy(chr_temp_report,chr_my_report);
				if ((f_my_report = fopen(strcat(chr_temp_report,report_name),"r")) == NULL)
				{
					if ( CO_ReadToken(chr_finifile,"INTL_HF_EIPATH",chr_my_report,l_debug_info_ptr) == APL_FAILURE)

{
Alert("Failure From INTL_HF_EIPATH");
						APL_GOBACK_FAIL

}
					strcpy(chr_l_dir_alias,"INTL_HF_EIPATH");
				}
				else
				{
					fclose(f_my_report);
					strcpy(chr_l_dir_alias,"INTL_CUST_HF_PATH");
					
				}
			}
			else
			{
				fclose(f_my_report);
				strcpy(chr_l_dir_alias,"INTL_AE_PATH");
			}
			
		}
		else
		{
			fclose(f_my_report);
			strcpy(chr_l_dir_alias,"INTL_HF_PATH");
		}

	
	}
	else if (!strcmp(report_desc, APL_LOGFILE_DESC))
	{
		strcpy(chr_l_dir_alias,"INTL_LOG_PATH");
	}
	else
	{
		if ( CO_ReadToken(chr_finifile,"INTL_REP_PATH",chr_my_report,l_debug_info_ptr) == APL_FAILURE)
              {
Alert("FILURE FOR INTL_REP_PATH");
			APL_GOBACK_FAIL
              }
		strcpy(chr_temp_report,chr_my_report);
		if ((f_my_report = fopen(strcat(chr_temp_report,report_name),"r")) == NULL)
		{
			strcpy(chr_l_dir_alias,"INTL_LOG_PATH");
		}
		else
			strcpy(chr_l_dir_alias,"INTL_REP_PATH");
	}


	if ( CO_ReadToken(chr_finifile,chr_l_dir_alias,chr_path_report,l_debug_info_ptr) == APL_FAILURE)
{
Alert("FAILURE FOR chr_l_dir_alias");
		APL_GOBACK_FAIL
}


		APL_IF_DEBUG
		printf("Report path Before report name: |%s|\n",chr_path_report);

		strcat(chr_path_report,report_name);
		
		APL_IF_DEBUG
		printf("Report path After report name: |%s|\n",chr_path_report);
		/* PJ KOTAK AIX UAT initializing to 0 */
		sqlca.sqlcode = 0;

	l_intl_rept_struct_h = (INTL_REPT_STRUCT_H *)calloc(1, sizeof(INTL_REPT_STRUCT_H));
	APL_MALLOC_FAIL(l_intl_rept_struct_h);
  
	strncpy(l_intl_rept_struct_h->report_name, report_name, APL_REPNAME_LENGTH - 1);
	l_intl_rept_struct_h->report_name[APL_REPNAME_LENGTH - 1] = '\0';
	strncpy(l_intl_rept_struct_h->report_desc, report_desc, APL_REPDESC_LENGTH - 1);
	l_intl_rept_struct_h->report_desc[APL_REPDESC_LENGTH - 1] = '\0';
	strcpy(l_intl_rept_struct_h->report_date, report_date);
	l_intl_rept_struct_h->report_width = report_width;
	strcpy(l_intl_rept_struct_h->task_desc, report_task_desc);
	strcpy(l_intl_rept_struct_h->fe_be_ind, fe_be_ind);

	strcpy(l_intl_rept_struct_h->usr, p_usr);

/*
		EXEC SQL INSERT INTO PRO_COMMON_REPORT VALUES (:report_name:i_col,:report_desc,:report_date, :report_width,:report_task_desc,:fe_be_ind:i_col,:p_usr,:chr_path_report);
*/
		EXEC SQL INSERT INTO PRO_COMMON_REPORT VALUES (:l_intl_rept_struct_h,:chr_path_report); 
Alert("sqlca.sqlcode [%d]",sqlca.sqlcode);
	IS_ANY_ORA_ERROR

		free(l_intl_rept_struct_h);

	APL_GOBACK_SUCCESS

	RETURN_FAILURE:
	fclose(chr_finifile);
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE, 
						"Leaving processtion CO_Proc_DBRptIns with errors",
						NULL,
						NULL );
		return(APL_FAILURE);

	RETURN_SUCCESS:
	fclose(chr_finifile);
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE, 
						"Leaving processtion CO_Proc_DBRptIns successfully",
						NULL,
						NULL );
		return(APL_SUCCESS);
	
}

