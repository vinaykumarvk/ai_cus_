/*
 **    COPYRIGHT NOTICE
 **
 **   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 **
 **   These materials are confidential and proprietary to
 **    Polaris Software Lab Limited and no part of these materials should
 **    be reproduced, published, transmitted or distributed in any form or
 **    by any means, electronic, mechanical, photocopying, recording or
 **    otherwise, or stored in any information storage or retrieval system
 **    of any nature nor should the materials be disclosed to third parties
 **    or used in any other manner for which this is not authorized, without
 **    the prior express written authorization of Polaris Software Lab Limited.
 **/
/*********************************************************************
 **
 ** Module Name         :      DEAL PROCESSING
 **
 ** File Name           :      DL_BCN_MAP.pc
 **
 ** Description         :      DEAL BCN MAPPING
 **
 **
 **
 **            Version Control Block
 **
 ** Date        Version     Author           Description        RFS No.
 ** ---------   --------  ---------------  ------------------   ---------
 ** 03/08/2006   1.0       AMOL             New File            HDFCDL_010
 **************************************************************************/

#include<stdio_64.h>
#include <stdlib.h>
#include "Intellect_Common.h"
#include "Intellect_Interface.h"
#include "DL_Interface.h"
#include "BT_Common.h"
#include "Intellect_Error.h"
#include "CO_IndStructdef.h"


EXEC SQL INCLUDE SQLCA.H;

int DL_ModDBDL_BSE_OBL(DL_BSE_OBL_STRUCT_H *p_dl_bse_obl_struct_h,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	  /* Variable Declarations */
	  DL_BSE_OBL_STRUCT_I *l_dl_bse_obl_struct_i;
	  DL_EXCHOBLIGATION_STRUCT_H *l_dl_exchobligation_rec=NULL;
	  DL_EXCHOBLIGATION_STRUCT_I *l_dl_exchobligation_rec_ind=NULL;
	  
	  struct sqlca sqlca;

		/*
	  int   int_retval = APL_SUCCESS;
	  int   l_h_obgcumsalvol=APL_SUCCESS;
	  int   l_h_obgcumbuyvol=APL_SUCCESS;
		*/
	  
		printf("\n\n********************Inside Wrapper*********************");
	  
	  /*Calloc*/
     l_dl_exchobligation_rec=(DL_EXCHOBLIGATION_STRUCT_H *)calloc(1,sizeof(DL_EXCHOBLIGATION_STRUCT_H));
	  l_dl_exchobligation_rec_ind=(DL_EXCHOBLIGATION_STRUCT_I *)calloc(1,sizeof(DL_EXCHOBLIGATION_STRUCT_I));
	  l_dl_bse_obl_struct_i=(DL_BSE_OBL_STRUCT_I*)calloc(1,sizeof(DL_BSE_OBL_STRUCT_I));

	  /*MemSet*/
	  memset(l_dl_exchobligation_rec, NULL, sizeof(DL_EXCHOBLIGATION_STRUCT_H));
	  memset(l_dl_exchobligation_rec_ind, NULL, sizeof(DL_EXCHOBLIGATION_STRUCT_I));
	  
		APL_MALLOC_FAIL(l_dl_bse_obl_struct_i)


		printf("\n\n********************After memory allocation*********************");
		if (!strlen(p_dl_bse_obl_struct_h->h_instr_code)) l_dl_bse_obl_struct_i->i_instr_code =-1;
		     else l_dl_bse_obl_struct_i->i_instr_code =0;

		if (!strlen(p_dl_bse_obl_struct_h->h_buy_qty)) l_dl_bse_obl_struct_i->i_buy_qty =-1;
		     else l_dl_bse_obl_struct_i->i_buy_qty =0;

		if (!strlen(p_dl_bse_obl_struct_h->h_buy_val)) l_dl_bse_obl_struct_i->i_buy_val =-1;
		     else l_dl_bse_obl_struct_i->i_buy_val =0;
		
		if (!strlen(p_dl_bse_obl_struct_h->h_sell_qty)) l_dl_bse_obl_struct_i->i_sell_qty =-1;
		     else l_dl_bse_obl_struct_i->i_sell_qty =0;

		if (!strlen(p_dl_bse_obl_struct_h->h_sell_val)) l_dl_bse_obl_struct_i->i_sell_val =-1;
		     else l_dl_bse_obl_struct_i->i_sell_val =0;
		
		if (!strlen(p_dl_bse_obl_struct_h->h_net_qty)) l_dl_bse_obl_struct_i->i_net_qty =-1;
		     else l_dl_bse_obl_struct_i->i_net_qty =0;

		if (!strlen(p_dl_bse_obl_struct_h->h_net_val)) l_dl_bse_obl_struct_i->i_net_val =-1;
		     else l_dl_bse_obl_struct_i->i_net_val =0;

		if (!strlen(p_dl_bse_obl_struct_h->h_std_rate)) l_dl_bse_obl_struct_i->i_std_rate =-1;
		     else l_dl_bse_obl_struct_i->i_std_rate =0;

		if (!strlen(p_dl_bse_obl_struct_h->h_net_std_diff)) l_dl_bse_obl_struct_i->i_net_std_diff =-1;
		     else l_dl_bse_obl_struct_i->i_net_std_diff =0;

		if (!strlen(p_dl_bse_obl_struct_h->h_std_rate_diff)) l_dl_bse_obl_struct_i->i_std_rate_diff =-1;
		     else l_dl_bse_obl_struct_i->i_std_rate_diff =0;

		if (!strlen(p_dl_bse_obl_struct_h->h_net_amt)) l_dl_bse_obl_struct_i->i_net_amt =-1;
		     else l_dl_bse_obl_struct_i->i_net_amt =0;
		
		if (!strlen(p_dl_bse_obl_struct_h->h_cfqty)) l_dl_bse_obl_struct_i->i_cfqty =-1;
		     else l_dl_bse_obl_struct_i->i_cfqty =0;

		if (!strlen(p_dl_bse_obl_struct_h->h_calldivflag)) l_dl_bse_obl_struct_i->i_calldivflag =-1;
		     else l_dl_bse_obl_struct_i->i_calldivflag =0;
		
		if (!strlen(p_dl_bse_obl_struct_h->h_calldivamt)) l_dl_bse_obl_struct_i->i_calldivamt =-1;
		     else l_dl_bse_obl_struct_i->i_calldivamt =0;

		if (!strlen(p_dl_bse_obl_struct_h->h_bank_qty)) l_dl_bse_obl_struct_i->i_bank_qty =-1;
		     else l_dl_bse_obl_struct_i->i_bank_qty =0;

		if (!strlen(p_dl_bse_obl_struct_h->h_bank_val)) l_dl_bse_obl_struct_i->i_bank_val =-1;
		     else l_dl_bse_obl_struct_i->i_bank_val =0;

		if (!strlen(p_dl_bse_obl_struct_h->h_settlement_no)) l_dl_bse_obl_struct_i->i_settlement_no=-1;
		     else l_dl_bse_obl_struct_i->i_settlement_no=0;

		if (!strlen(p_dl_bse_obl_struct_h->h_mkt_type)) l_dl_bse_obl_struct_i->i_mkt_type=-1;
		     else l_dl_bse_obl_struct_i->i_mkt_type=0;

		if (!strlen(p_dl_bse_obl_struct_h->h_deal_dt)) l_dl_bse_obl_struct_i->i_deal_dt=-1;
		     else l_dl_bse_obl_struct_i->i_deal_dt=0;
			  
		printf("\n\n*********************Before Insert*********************");
                
                /*** Added (int) for AIX Migration********/
		printf("\nINSTR_CODE |%s|, Length |%d|",p_dl_bse_obl_struct_h->h_instr_code,(int)strlen(p_dl_bse_obl_struct_h->h_instr_code));
		printf("\nBUY_QTY |%s|, Length |%d|",p_dl_bse_obl_struct_h->h_buy_qty,(int)strlen(p_dl_bse_obl_struct_h->h_buy_qty));
		printf("\nBUY_VAL |%s|, Length |%d|",p_dl_bse_obl_struct_h->h_buy_val,(int)strlen(p_dl_bse_obl_struct_h->h_buy_val));
		printf("\nSELL_QTY |%s|, Length |%d|",p_dl_bse_obl_struct_h->h_sell_qty,(int)strlen(p_dl_bse_obl_struct_h->h_sell_qty));
		printf("\nSELL_VAL |%s|, Length |%d|",p_dl_bse_obl_struct_h->h_sell_val,(int)strlen(p_dl_bse_obl_struct_h->h_sell_val));
		printf("\nNET_QTY |%s|, Length |%d|",p_dl_bse_obl_struct_h->h_net_qty,(int)strlen(p_dl_bse_obl_struct_h->h_net_qty));
		printf("\nNET_VAL |%s|, Length |%d|",p_dl_bse_obl_struct_h->h_net_val,(int)strlen(p_dl_bse_obl_struct_h->h_net_val));
		printf("\nSTD_RATE |%s|, Length |%d|",p_dl_bse_obl_struct_h->h_std_rate,(int)strlen(p_dl_bse_obl_struct_h->h_std_rate));
		printf("\nNET_STD_DIFF |%s|, Length |%d|",p_dl_bse_obl_struct_h->h_net_std_diff,(int)strlen(p_dl_bse_obl_struct_h->h_net_std_diff));
		printf("\nSTD_RATE_DIFF |%s|, Length |%d|",p_dl_bse_obl_struct_h->h_std_rate_diff,(int)strlen(p_dl_bse_obl_struct_h->h_std_rate_diff));
		printf("\nNET_AMT |%s|, Length |%d|",p_dl_bse_obl_struct_h->h_net_amt,(int)strlen(p_dl_bse_obl_struct_h->h_net_amt));
		printf("\nCFQTY |%s|, Length |%d|",p_dl_bse_obl_struct_h->h_cfqty,(int)strlen(p_dl_bse_obl_struct_h->h_cfqty));
		printf("\nCALLDIVFLAG |%s|, Length |%d|",p_dl_bse_obl_struct_h->h_calldivflag,(int)strlen(p_dl_bse_obl_struct_h->h_calldivflag));
		printf("\nCALLDIVAMT |%s|, Length |%d|",p_dl_bse_obl_struct_h->h_calldivamt,(int)strlen(p_dl_bse_obl_struct_h->h_calldivamt));
		printf("\nBANK_QTY |%s|, Length |%d|",p_dl_bse_obl_struct_h->h_bank_qty,(int)strlen(p_dl_bse_obl_struct_h->h_bank_qty));
		printf("\nBANK_VAL |%s|, Length |%d|",p_dl_bse_obl_struct_h->h_bank_val,(int)strlen(p_dl_bse_obl_struct_h->h_bank_val));
		printf("\nSETTLEMENT_NO |%s|, Length |%d|",p_dl_bse_obl_struct_h->h_settlement_no,(int)strlen(p_dl_bse_obl_struct_h->h_settlement_no));
		printf("\nMKT_TYPE |%s|, Length |%d|",p_dl_bse_obl_struct_h->h_mkt_type,(int)strlen(p_dl_bse_obl_struct_h->h_mkt_type));
		printf("\nDEAL_DT |%s|, Length |%d|",p_dl_bse_obl_struct_h->h_deal_dt,(int)strlen(p_dl_bse_obl_struct_h->h_deal_dt));

	
		EXEC SQL INSERT INTO DL_BSE_OBL VALUES (:p_dl_bse_obl_struct_h:l_dl_bse_obl_struct_i);
		if(sqlca.sqlcode)
		{
			printf("\n Failed SQLCODE is |%d|\n ",sqlca.sqlcode);
		 }
		IS_ANY_ORA_ERROR

		printf("\nData addition for exchobligation");
		strcpy(l_dl_exchobligation_rec->h_settlement_no,p_dl_bse_obl_struct_h->h_settlement_no);
		strcpy(l_dl_exchobligation_rec->h_instr_cd,p_dl_bse_obl_struct_h->h_instr_code);
		strcpy(l_dl_exchobligation_rec->h_mkt_type,p_dl_bse_obl_struct_h->h_mkt_type);
		strcpy(l_dl_exchobligation_rec->h_exch_code,"BSE");
		strcpy(l_dl_exchobligation_rec->h_status,"");
		strcpy( l_dl_exchobligation_rec->h_deal_dt,p_dl_bse_obl_struct_h->h_deal_dt);
		l_dl_exchobligation_rec->h_aggr_qty=atof(p_dl_bse_obl_struct_h->h_net_qty);
		l_dl_exchobligation_rec->h_agg_amt=atof(p_dl_bse_obl_struct_h->h_net_val);

		if(l_dl_exchobligation_rec->h_aggr_qty<0)
		{
			printf("\nInside Sell Condition");
			strcpy(l_dl_exchobligation_rec->h_deal_cd,"S");
			l_dl_exchobligation_rec->h_aggr_qty=l_dl_exchobligation_rec->h_aggr_qty * (-1);
		}
		else
		{
			printf("\nInside Buy Condition");
			strcpy(l_dl_exchobligation_rec->h_deal_cd,"P");
			l_dl_exchobligation_rec->h_agg_amt=l_dl_exchobligation_rec->h_agg_amt * (-1);
		}
/*		if(l_dl_exchobligation_rec->h_agg_amt<0)
		{
			l_dl_exchobligation_rec->h_agg_amt=l_dl_exchobligation_rec->h_agg_amt * (-1);
		}
*/
		printf("\n Settlement No= |%s|",l_dl_exchobligation_rec->h_settlement_no);
		printf("\nInstr CD= |%s|",l_dl_exchobligation_rec->h_instr_cd);
		printf("\nAgg QTY= |%f|",l_dl_exchobligation_rec->h_aggr_qty);
		printf("\nAgg AMT= |%f|",l_dl_exchobligation_rec->h_agg_amt);
		printf("\nMkt Type= |%s|",l_dl_exchobligation_rec->h_mkt_type);
		printf("\nDeal CD= |%s|",l_dl_exchobligation_rec->h_deal_cd);
		printf("\nDeal Date= |%s|",l_dl_exchobligation_rec->h_deal_dt);
		printf("\nStatus= |%s|",l_dl_exchobligation_rec->h_status);
		printf("\nExch Code= |%s|",l_dl_exchobligation_rec->h_exch_code);

		EXEC SQL INSERT INTO DL_EXCHOBLIGATION VALUES (:l_dl_exchobligation_rec:l_dl_exchobligation_rec_ind);
		if(sqlca.sqlcode)
		{
			printf("\n Failed DL_EXCHOBLIGATION SQLCODE is |%d|\n ",sqlca.sqlcode);
		}
		IS_ANY_ORA_ERROR
			
		APL_GOBACK_SUCCESS							

		RETURN_SUCCESS: 

		printf("\n Sucess Inside DL_ModDBDL_BSE_OBL \n");		
		return(APL_SUCCESS);

		RETURN_FAILURE:
	
		printf("\n Error Inside DL_ModDBDL_BSE_OBL \n");
		return(APL_FAILURE);

} 
