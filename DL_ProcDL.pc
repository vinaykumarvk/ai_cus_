/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2014 Polaris Financial Technology Limited. All rights reserved.
 *
 *    These materials are confidential and proprietary to 
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or 
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 *
 *******************************************************************************
 *
 * Module Name         :         Deal Processing
 *
 * File Name           :         DL_ProcDL.pc
 *
 * Description         :        
 *
 *                         Version Control Block
 *
 * Date        Version		 Author         Description		    RFS No.
 * ---------   --------	 ---------------  -----------------   --------------
 * 07/04/2014  1.1       Prateek Singh    Changes done for KB_6652

 * *****************************************************************************/


#include "CO_HostStructdef.h"
EXEC SQL INCLUDE SQLCA.H;



int DL_Chk_DLDet(	char *p_client, 
						char *p_ident, 
						char p_exist, 
						char p_auth, 
						char p_del, 
						char p_conf, 
						char p_parconf, 
						char p_instrsetl, 
						char p_moneysetl,
						char p_manifld, 
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{




	

	struct sqlca sqlca;	
	SYS_DL_DEAL_STRUCT_H l_sys_dl_deal_struct_hc;
	SYS_DL_DEAL_STRUCT_I l_sys_dl_deal_struct_ij;
	char chr_h_manif_print = NULL;
	char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	int int_l_error_flag = APL_SUCCESS;
 
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
						"Entered Function DL_Chk_DLDet\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Account is 1: %s\n", 
						p_client);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Reference No. is : %s\n", 
						p_ident);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Exist Flag. is : %c\n", 
						p_exist);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Authorisation Flag is : %c\n", 
						p_auth);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Delete Flag is : %c\n", 
						p_del);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Confirmed Flag is : %c\n", 
						p_conf);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Partial Confirmed Flag is : %c\n", 
						p_parconf);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Instrurity Settlement Flag is : %c\n", 
						p_instrsetl);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Money Settlement Flag is : %c\n", 
						p_moneysetl);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Manifold Flag is : %c\n", 
						p_manifld);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
	}

	

	if (!strlen(p_client))
	{
		APL_DATA_MISSING(	"Account", 
								APL_NULL_STRING, 
								APL_NULL_STRING );
		int_l_error_flag = APL_FAILURE;
	}
	if (!strlen(p_ident))
	{
		APL_DATA_MISSING(	"Reference No.", 
								APL_NULL_STRING, 
								APL_NULL_STRING );
		int_l_error_flag = APL_FAILURE;
	}

	if (APL_FAILURE == int_l_error_flag) APL_GOBACK_FAIL


	

	if (p_exist == NULL) p_exist = 'Y';

	

	EXEC SQL SELECT manifld_print_ind INTO :chr_h_manif_print FROM MT_CORE_SYS_PARAMS;
	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_VAL_NF, 
														APL_NULL_STRING, 
														APL_NULL_STRING, 
														APL_NULL_STRING );

	IS_ANY_ORA_ERROR; 

	

	EXEC SQL SELECT * INTO :l_sys_dl_deal_struct_hc:l_sys_dl_deal_struct_ij FROM dl_deal 
	WHERE client=:p_client AND IDENTIY_NO=:p_ident;
	IS_ANY_ORA_ERROR;
	

	

	if ((sqlca.sqlcode == 1403) && (p_exist == 'Y'))
	{
		CO_InsertErr(	l_debug_info_ptr, 
								ERR_DEAL_NF, 
								p_client, 
								p_ident, 
								APL_NULL_STRING, 
								__LINE__, 
								__FILE__ );
		APL_GOBACK_FAIL
	}	

	if ((sqlca.sqlcode == 0) && (p_exist == 'N'))
	{
		if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
														ERR_DEAL_EXIST, 
														p_client, 
														p_ident, 
														APL_NULL_STRING, 
														__LINE__, 
														__FILE__ ))
		{
			APL_GOBACK_FAIL
		}   
		int_l_error_flag = APL_FAILURE;
	}

	

	l_sys_dl_deal_struct_hc.h_deal_status[2]='\0';	
	if ((l_sys_dl_deal_struct_ij.i_checker_dt == -1) && (p_auth=='Y'))
	{
		if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
														ERR_DEAL_UNAUTH, 
														p_client, 
														p_ident, 
														APL_NULL_STRING, 
														__LINE__, 
														__FILE__ ))
		{
			APL_GOBACK_FAIL
		}
		int_l_error_flag = APL_FAILURE;
	}


	if ((l_sys_dl_deal_struct_ij.i_checker_dt == 0) && (p_auth=='N') &&
		 (strcmp(l_sys_dl_deal_struct_hc.h_deal_status,"SA") != 0) &&
		 (strcmp(l_sys_dl_deal_struct_hc.h_deal_status,"DA") != 0) &&
       (strcmp(l_sys_dl_deal_struct_hc.h_deal_status,"CD") != 0) &&
       (strcmp(l_sys_dl_deal_struct_hc.h_deal_status,"CQ") != 0))
	{	
		if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
														ERR_DEAL_AUTH, 
														p_client, 
														p_ident, 
														APL_NULL_STRING, 
														__LINE__, 
														__FILE__ ))
		{
			APL_GOBACK_FAIL
		}
		int_l_error_flag = APL_FAILURE;
	}

	

	if ( (strcmp(l_sys_dl_deal_struct_hc.h_deal_status, STATUS_DEL_UAUTH)) && 
		  (strcmp(l_sys_dl_deal_struct_hc.h_deal_status, STATUS_SMI_DELAUTH)) && 
		  (strcmp(l_sys_dl_deal_struct_hc.h_deal_status, STATUS_SMI_DELUAUTH)) && 
		  (p_del=='Y') )
	{
		if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
														ERR_DEAL_NMARKDEL, 
														p_client, 
														p_ident, 
														APL_NULL_STRING, 
														__LINE__, 
														__FILE__ ))
		{
			APL_GOBACK_FAIL
		}
		int_l_error_flag = APL_FAILURE;
	}

	if ((!strcmp(l_sys_dl_deal_struct_hc.h_deal_status, STATUS_DEL_UAUTH)) && (p_del=='N'))
	{
		if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
														ERR_DEAL_MARKDEL, 
														p_client, 
														p_ident, 
														APL_NULL_STRING, 
														__LINE__, 
														__FILE__ ))
		{
			APL_GOBACK_FAIL
		}
		int_l_error_flag = APL_FAILURE;
	}

	
	IF_COND_EXISTS("DL_DEAL","CONFDT")
	{	
		if ((l_sys_dl_deal_struct_ij.i_confdate == -1) && (p_conf == 'Y'))
		{
			if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
															ERR_DEAL_NCONF, 
															p_client, 
															p_ident, 
															APL_NULL_STRING, 
															__LINE__, 
															__FILE__ ))
			{
				APL_GOBACK_FAIL
			}
			int_l_error_flag = APL_FAILURE;
		}
	}
	
	if ((l_sys_dl_deal_struct_ij.i_confdate == 0) && (p_conf == 'N'))
	{
		if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
														ERR_DEAL_CONF, 
														p_client, 
														p_ident, 
														APL_NULL_STRING, 
														__LINE__, 
														__FILE__ ))
		{
			APL_GOBACK_FAIL
		}
		int_l_error_flag = APL_FAILURE;
	}

	

	if ((l_sys_dl_deal_struct_hc.h_qty == l_sys_dl_deal_struct_hc.h_origquantity ) && (p_parconf == 'Y'))
	{
		if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
														ERR_DEAL_NPARTCONF, 
														p_client, 
														p_ident, 
														APL_NULL_STRING, 
														__LINE__, 
														__FILE__ ))
		{
			APL_GOBACK_FAIL
		}
		int_l_error_flag = APL_FAILURE;
	}

	if ((l_sys_dl_deal_struct_hc.h_qty != l_sys_dl_deal_struct_hc.h_origquantity ) && (p_parconf == 'N'))
	{
	   printf("\n Inside DL_Chk_DLDet ...... l_sys_dl_deal_struct_hc.h_qty=|%lf|, l_sys_dl_deal_struct_hc.h_origquantity=|%lf|",l_sys_dl_deal_struct_hc.h_qty,l_sys_dl_deal_struct_hc.h_origquantity);	
		if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
														ERR_DEAL_PARTCONF, 
														p_client, 
														p_ident, 
														APL_NULL_STRING, 
														__LINE__, 
														__FILE__ ))
		{
			APL_GOBACK_FAIL
		}
		int_l_error_flag = APL_FAILURE;
	}

	

	if ((l_sys_dl_deal_struct_ij.i_instrdate == -1) && (p_instrsetl == 'Y'))
	{
		if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
														ERR_DEAL_NINSTRSETL, 
														p_client, 
														p_ident, 
														APL_NULL_STRING, 
														__LINE__, 
														__FILE__ ))
		{
			APL_GOBACK_FAIL
		}
		int_l_error_flag = APL_FAILURE;
	}

	if ((l_sys_dl_deal_struct_ij.i_instrdate == 0) && (p_instrsetl == 'N'))
	{
		if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
														ERR_DEAL_INSTRSETL, 
														p_client, 
														p_ident, 
														APL_NULL_STRING, 
														__LINE__, 
														__FILE__ ))
		{
			APL_GOBACK_FAIL
		}
		int_l_error_flag = APL_FAILURE;
	}

	
	
	if ((l_sys_dl_deal_struct_ij.i_moneydate == -1) && (p_moneysetl == 'Y'))
	{
		if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
														ERR_DEAL_NMONSETL, 
														p_client, 
														p_ident, 
														APL_NULL_STRING, 
														__LINE__, 
														__FILE__ ))
		{
			APL_GOBACK_FAIL
		}
		int_l_error_flag = APL_FAILURE;
	}

	if ((l_sys_dl_deal_struct_ij.i_moneydate == 0) && (p_moneysetl == 'N'))
	{
		if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
														ERR_DEAL_MONSETL, 
														p_client, 
														p_ident, 
														APL_NULL_STRING, 
														__LINE__, 
														__FILE__ ))
		{
			APL_GOBACK_FAIL
		}
		int_l_error_flag = APL_FAILURE;
	}


	

	if (chr_h_manif_print == 'Y')
	{
		switch(p_manifld)
		{
			case 'R' : 	if ((l_sys_dl_deal_struct_ij.i_delrecdate==-1) && 
								 ((!strcmp(l_sys_dl_deal_struct_hc.h_dealcd, "2")) || 
								 (!strcmp(l_sys_dl_deal_struct_hc.h_dealcd, "4")) ||
									(!strcmp(l_sys_dl_deal_struct_hc.h_dealcd, "6")) ||
									(!strcmp(l_sys_dl_deal_struct_hc.h_dealcd, "8"))))
							{
								if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
																				ERR_DEAL_RCVTKT_NPRINT, 
																				p_client, 
																				p_ident, 
																				APL_NULL_STRING, 
																				__LINE__, 
																				__FILE__ ))
								{
									APL_GOBACK_FAIL
								}
								int_l_error_flag = APL_FAILURE;
							}
							break;

			case 'D' : 	if ((l_sys_dl_deal_struct_ij.i_delrecdate==-1) && 
								 ((!strcmp(l_sys_dl_deal_struct_hc.h_dealcd, "1")) || 
								 (!strcmp(l_sys_dl_deal_struct_hc.h_dealcd, "3")) ||
									(!strcmp(l_sys_dl_deal_struct_hc.h_dealcd, "5")) ||
									(!strcmp(l_sys_dl_deal_struct_hc.h_dealcd, "7"))))
							{
								if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
																				ERR_DEAL_DELTKT_NPRINT, 
																				p_client, 
																				p_ident, 
																				APL_NULL_STRING, 
																				__LINE__, 
																				__FILE__ ))
								{
									APL_GOBACK_FAIL
								}
								int_l_error_flag = APL_FAILURE;
							}
							break;
							
			case 'O' : 	if ((l_sys_dl_deal_struct_ij.i_tmpoutdate==-1) && 
								 ((!strcmp(l_sys_dl_deal_struct_hc.h_dealcd, "2")) || 
								 (!strcmp(l_sys_dl_deal_struct_hc.h_dealcd, "4")) ||
									(!strcmp(l_sys_dl_deal_struct_hc.h_dealcd, "6")) ||
									(!strcmp(l_sys_dl_deal_struct_hc.h_dealcd, "8"))))
							{
								if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
																				ERR_DEAL_TMPOUTTKT_NPRINT, 
																				p_client, 
																				p_ident, 
																				APL_NULL_STRING, 
																				__LINE__, 
																				__FILE__ ))
								{
									APL_GOBACK_FAIL
								}
								int_l_error_flag = APL_FAILURE;
							}
							break;

			case 'T' : 	if ((l_sys_dl_deal_struct_ij.i_tmpretdate==-1) && 
								 ((!strcmp(l_sys_dl_deal_struct_hc.h_dealcd, "2")) || 
								 (!strcmp(l_sys_dl_deal_struct_hc.h_dealcd, "4")) ||
									(!strcmp(l_sys_dl_deal_struct_hc.h_dealcd, "6")) ||
									(!strcmp(l_sys_dl_deal_struct_hc.h_dealcd, "8"))))
							{
								if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
																				ERR_DEAL_TMPRETTKT_NPRINT, 
																				p_client, 
																				p_ident, 
																				APL_NULL_STRING, 
																				__LINE__, 
																				__FILE__ ))
								{
									APL_GOBACK_FAIL
								}
								int_l_error_flag = APL_FAILURE;
							}
							break;
		}
	}

	

	if (APL_FAILURE == int_l_error_flag) APL_GOBACK_FAIL
	else APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	APL_IF_DEBUG
	{
	 CO_ProcMonitor(	APL_OUT_FILE,
						"Leaving Function DL_Chk_DLDet with success\n",
						NULL,
						NULL);
	}
	return(APL_SUCCESS);

  	RETURN_FAILURE :
	APL_IF_DEBUG
	{
	 CO_ProcMonitor(	APL_OUT_FILE,
						"Leaving Function DL_Chk_DLDet with errors\n",
						NULL,
						NULL);
	}
	return(APL_FAILURE);
	
}							
/* ISKB 1023 Chirag 01-Apr-2008 */
int DL_Chk_Trade_Status(char *chr_p_client,char *chr_p_refno,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	char l_trd_status[3] = APL_NULL_STRING;
	char l_trd_class[3] = APL_NULL_STRING;
	
	EXEC SQL SELECT DEAL_STAT,DL_CLASS INTO :l_trd_status,:l_trd_class FROM DL_DEAL
						WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	IS_ANY_ORA_ERROR

	if(strcmp(l_trd_status,"UU") == 0 || strcmp(l_trd_status,"AA") == 0 || strcmp(l_trd_class,"19") == 0)
	{
		APL_GOBACK_SUCCESS
	}
	else
	{
		APL_GOBACK_FAIL
	}

	RETURN_SUCCESS :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function DL_Chk_Trade_Status with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);

  	RETURN_FAILURE :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function DL_Chk_Trade_Status with errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);

}

/* ISKB 1023 Chirag 01-Apr-2008 */

int DL_Rtv_TrdChrVal(	char *chr_p_client, 
							char *chr_p_refno, 
							char *p_ind, 
							char *int_p_retval, 
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	


	

	struct sqlca sqlca;
	char int_l_retval[40] = APL_NULL_STRING;
	char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	

	EXEC SQL VAR int_l_retval IS STRING (40);

	
	
	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
						"Entered Function DL_Rtv_TrdChrVal\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Account is 11: %s\n", 
						chr_p_client);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Reference No. is : %s\n", 
						chr_p_refno);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Indicator is     : %s\n", 
						p_ind);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
	}

	
	
	sqlca.sqlcode = 0;

	if (!strcmp(p_ind, "access_stamp"))
		EXEC SQL SELECT ACCESS_STAMP INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "isspottrd"))
		EXEC SQL SELECT SPOTTRD_IND INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "instr_code"))
		EXEC SQL SELECT INSTR_CODE INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "trcode"))
		EXEC SQL SELECT DEAL_CD INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "locncode"))
		EXEC SQL SELECT LOCATION_CD INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);
	
	if (!strcmp(p_ind, "delrecdt"))
		EXEC SQL SELECT DEL_REC_DATE INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);
	
	if (!strcmp(p_ind, "transmitdt"))
		EXEC SQL SELECT TRANS_DATE INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "domcpac"))
		EXEC SQL SELECT DOMESTIC_CPCLT INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "countacc"))
		EXEC SQL SELECT CP_CLT INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "entrytype"))
		EXEC SQL SELECT ENTRY INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "posn_status"))
		EXEC SQL SELECT STATUS_POS INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "trdfromord"))
		EXEC SQL SELECT DEAL_FRM_ORD INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "failcode"))
		EXEC SQL SELECT FAILREASON_CD INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "confdt"))
		EXEC SQL SELECT VAL_FDT INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "ispartial"))
		EXEC SQL SELECT PARTIAL_IND_B INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "origrefno"))
		EXEC SQL SELECT ORIG_REFNO INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "exarena"))
		EXEC SQL SELECT EX_ARENA INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "trade_status"))
		EXEC SQL SELECT DEAL_STAT INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "ccycode"))
		EXEC SQL SELECT CURRENCY_CD INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "lrtrdtype"))
		EXEC SQL SELECT LR_DL_CLASS INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "instr_dt"))
		EXEC SQL SELECT INSTRUMENT_DT INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "moneydt"))
		EXEC SQL SELECT MONEY_SETL_DT INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "ndsdt"))
		EXEC SQL SELECT NDS_DATE INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "ndsbldt"))
		EXEC SQL SELECT NDS_BLK_DT INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "maker"))
		EXEC SQL SELECT MAKER INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "checker"))
		EXEC SQL SELECT CHECKER INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "trdt"))
		EXEC SQL SELECT DEAL_DATE INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "settledt"))
		EXEC SQL SELECT SETL_DATE INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "custreqddelflg"))
		EXEC SQL SELECT CLT_REQDEL_IND INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "rowid"))
		EXEC SQL SELECT ROWID INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno) 
		FOR UPDATE NOWAIT;

	if (!strcmp(p_ind, "ferowid"))
		EXEC SQL SELECT ROWID INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	

	if (!strcmp(p_ind, "exists_flg"))
		EXEC SQL SELECT 'Y'   INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno); 

	if (!strcmp(p_ind, "typeoftrd"))
		EXEC SQL SELECT dl_class INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	
	if (!strcmp(p_ind, "locnchng_flg"))
		EXEC SQL SELECT loc_chng_ind INTO :int_l_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (sqlca.sqlcode != -1405)
	{ // AIX - Warnings
		
		if (sqlca.sqlcode == -54)
                {
			CO_InsertErr(   l_debug_info_ptr,
                                                                        ERR_RESOURCE_BUSY,
                                                                        APL_NULL_STRING,
                                                                        APL_NULL_STRING,
                                                                        APL_NULL_STRING,
                                                                        __LINE__,
                                                                        __FILE__ );
                }
		else	
		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_DEAL_NF,
													chr_p_client,
													chr_p_refno,
													APL_NULL_STRING);
	}

	strcpy(int_p_retval, int_l_retval);
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function DL_Rtv_TrdChrVal with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);
 
	RETURN_FAILURE :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function DL_Rtv_TrdChrVal with errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);

}




int DL_Rtv_TrdNumVal(	char *chr_p_client, 
							char *chr_p_refno, 
							char *p_ind, 	
							double *int_p_retval, 
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	

	

	struct sqlca sqlca;
	char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
						"Entered Function DL_Rtv_TrdNumVal\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Account is 12: %s\n", 
						chr_p_client);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Reference No. is : %s\n", 
						chr_p_refno);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Indicator is     : %s\n", 
						p_ind);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
	}


	

	sqlca.sqlcode = 0;
	if (!strcmp(p_ind, "qty"))
		EXEC SQL SELECT QTY INTO :int_p_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	if (!strcmp(p_ind, "amount"))
		EXEC SQL SELECT AMOUNT INTO :int_p_retval 
		FROM DL_DEAL 
		WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);


	if (!strcmp(p_ind, "subfailcode"))
			EXEC SQL SELECT NVL(SUB_FAIL_CD,0) INTO :int_p_retval
					FROM DL_DEAL
					WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);
	


	if (sqlca.sqlcode != -1405)
	{ // AIX - Warnings
		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_DEAL_NF,
															chr_p_client,
															chr_p_refno,
															APL_NULL_STRING);
	}

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function DL_Rtv_TrdNumVal with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);
 
	RETURN_FAILURE :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function DL_Rtv_TrdNumVal with errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);

}




int DL_Proc_TrdAmtCalc(	double chr_p_amount, 
					      	double p_quantity, 
							   double p_split_qty, 	
							   double *p_new_amount, 
					    		DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	

	

	char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	

	double	 chr_l_new_amount = 0;
	int		 int_l_amt_dec = 0;	
	short		 i_amt_dec = 0;

	struct sqlca sqlca;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
						"Entered Function DL_Proc_TrdAmtCalc\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Amount is       : %lf\n", 
						chr_p_amount);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Total Quantity of Instrurity is : %lf\n", 
						p_quantity);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Splitup Quantity as per SRN is : %lf\n", 
						p_split_qty);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
	}


	

	if (p_quantity == 0 )
	{
		APL_GOBACK_FAIL
	}
	else
	{
		chr_l_new_amount = (chr_p_amount / p_quantity) * p_split_qty;
		
		EXEC SQL SELECT AMOUNT_DECIMAL_LEN INTO :int_l_amt_dec:i_amt_dec
					FROM MT_CORE_SYS_PARAMS; 
		IS_ANY_ORA_ERROR
			
		if ( CO_Round(chr_l_new_amount,int_l_amt_dec,p_new_amount) == APL_FAILURE )
		{
			APL_GOBACK_FAIL
		}
	}

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function DL_Proc_TrdAmtCalc with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);
 
	RETURN_FAILURE :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function DL_Proc_TrdAmtCalc with errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);

}



int DL_Proc_PosLock(	char *p_client,
							char *p_instrcode,
							char *p_locncode,
							char *p_posnstatus,
							char *p_block_type,
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr ) 
{
	struct sqlca sqlca;
	//short l_i_safek = 0;
	//double l_h_safekeep_pos = 0;
	char	chr_l_buf[BUFFER_LEN] 		= APL_NULL_STRING;
	char	chr_l_now[APL_DATE_LEN] 	= APL_NULL_STRING;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0; 

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE,
						"Entering Function DL_Proc_PosLock\n",
						NULL,
					   NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf( 	chr_l_buf,
						"The Account is 2: %s\n",
						p_client);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						NULL );
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf( 	chr_l_buf,
						"The Instrurity is : %s\n",
						p_instrcode);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						NULL );
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf( 	chr_l_buf,
						"The Location Code is : %s\n",
						p_locncode);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						NULL );
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf( 	chr_l_buf,
						"The Position Status is : %s\n",
						p_posnstatus);	
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						NULL );
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf( 	chr_l_buf,
						"Block Type is : %s\n",
						p_block_type);	
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						NULL );
	}

	

	if ( !strlen(p_client) )
	{
		APL_DATA_MISSING(	"Account",
								APL_NULL_STRING,
								APL_NULL_STRING );
	}

	if ( !strlen(p_instrcode) )
	{
		APL_DATA_MISSING(	"Instrode",
								APL_NULL_STRING,
								APL_NULL_STRING );
	}

	if ( !strlen(p_block_type) )
	{
		APL_DATA_MISSING(	"Block Type",
								APL_NULL_STRING,
								APL_NULL_STRING );
	}
	
	
	if (APL_FAILURE == CO_RtvSysDtTime(chr_l_now, l_debug_info_ptr))
	{
		APL_GOBACK_FAIL
	}

	
	if ( strlen(p_locncode) && strlen(p_posnstatus) )
	{
		EXEC SQL UPDATE DL_SAFEK 
			SET   ACCESS_STAMP = :chr_l_now
			WHERE CLIENT 		= :p_client
			AND	INSTR_CODE  		= :p_instrcode
			AND	LOCATION_CD 	= :p_locncode
			AND  	STATUS = :p_posnstatus AND BLOCK_TYPE = :p_block_type;
	}	

	IS_ANY_ORA_ERROR

	if ( !strlen(p_locncode) && strlen(p_posnstatus) )
	{
		EXEC SQL UPDATE DL_SAFEK 
			SET   ACCESS_STAMP = :chr_l_now
			WHERE CLIENT 		= :p_client
			AND	INSTR_CODE  		= :p_instrcode
			AND  	STATUS = :p_posnstatus AND BLOCK_TYPE = :p_block_type;
	}	

	IS_ANY_ORA_ERROR

	if ( strlen(p_locncode) && !strlen(p_posnstatus) )
	{

		EXEC SQL UPDATE DL_SAFEK 
			SET   ACCESS_STAMP = :chr_l_now
			WHERE CLIENT 		= :p_client
			AND	INSTR_CODE  		= :p_instrcode
			AND	LOCATION_CD 	= :p_locncode AND BLOCK_TYPE = :p_block_type;
		printf("sqlcode %d\n",sqlca.sqlcode);
	}	

	IS_ANY_ORA_ERROR

	if ( !strlen(p_locncode) && !strlen(p_posnstatus) )
	{
		EXEC SQL UPDATE DL_SAFEK 
			SET   ACCESS_STAMP = :chr_l_now
			WHERE CLIENT 		= :p_client
			AND	INSTR_CODE  		= :p_instrcode AND BLOCK_TYPE = :p_block_type;
	}	

	printf("sqlca code %d\n",sqlca.sqlcode);
	IS_ANY_ORA_ERROR

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function DL_Proc_PosLock with success\n",
							NULL,
							NULL );
		}
		return(APL_SUCCESS);

	RETURN_FAILURE :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function DL_Proc_PosLock with errors\n",
							NULL,
							NULL );
		}
		return(APL_FAILURE);
}





int CR_Mod_CLHAudTrail(	DL_DEALAUDIT_STRUCT_H *p_dl_dealaudit_struct_h, 
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	

	struct sqlca sqlca;	
	DL_DEALAUDIT_STRUCT_I *l_dl_dealaudit_struct_i=NULL;
	int int_l_error_flag = APL_SUCCESS;
	char	chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	char	chr_l_instrcode_a[APL_INSTRUMENTCODE_LEN] = APL_NULL_STRING;
	double l_quantity = 0.0;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	
	
	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE,
						"Entered Function CR_Mod_CLHAudTrail:\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Account is 3: %s\n", 
						p_dl_dealaudit_struct_h->h_dl_client);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The RefNo is : %s\n", 
						p_dl_dealaudit_struct_h->h_indentity_no);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 	
						"The Trailfor is : %s\n", 
						p_dl_dealaudit_struct_h->h_trail_for);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The FuncDesc is : %s\n", 
						p_dl_dealaudit_struct_h->h_processdetail);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The LogUser is : %s\n", 
						p_dl_dealaudit_struct_h->h_proc_usr);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The SubFun is : %s\n", 
						p_dl_dealaudit_struct_h->h_subprocess);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Failcode is : %s\n", 
						p_dl_dealaudit_struct_h->h_fail_cd);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Quantity is 1: %lf\n", 
						p_dl_dealaudit_struct_h->h_qty);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The TrdFromOrd is : %s\n", 
						p_dl_dealaudit_struct_h->h_dlfromord);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,	
						NULL,
						NULL);
	}


	
	
	l_dl_dealaudit_struct_i = (DL_DEALAUDIT_STRUCT_I *)calloc(1,sizeof(DL_DEALAUDIT_STRUCT_I));	
	APL_MALLOC_FAIL(l_dl_dealaudit_struct_i);


	

	if (!strlen(p_dl_dealaudit_struct_h->h_dl_client))
	{
		APL_DATA_MISSING("Account", APL_NULL_STRING, APL_NULL_STRING);
		int_l_error_flag = APL_FAILURE;
	}
	if (!strlen(p_dl_dealaudit_struct_h->h_indentity_no))
	{
		APL_DATA_MISSING("Reference No.", APL_NULL_STRING, APL_NULL_STRING);
		int_l_error_flag = APL_FAILURE;
	}
	if (!strlen(p_dl_dealaudit_struct_h->h_processdetail))
	{
		APL_DATA_MISSING("Function", APL_NULL_STRING, APL_NULL_STRING);
		int_l_error_flag = APL_FAILURE;
	}
	if (!strlen(p_dl_dealaudit_struct_h->h_proc_usr))
	{
		APL_DATA_MISSING("Log User", APL_NULL_STRING, APL_NULL_STRING);
		int_l_error_flag = APL_FAILURE;
	}
	if (!strlen(p_dl_dealaudit_struct_h->h_trail_for))
	{
		APL_DATA_MISSING("Trail For", APL_NULL_STRING, APL_NULL_STRING);
		int_l_error_flag = APL_FAILURE;
	}
	
	if (!strlen(p_dl_dealaudit_struct_h->h_dlfromord)) 
	{		
		APL_DATA_MISSING("TrdFromOrd", APL_NULL_STRING, APL_NULL_STRING);
		int_l_error_flag = APL_FAILURE;
	}
	 
	if (APL_FAILURE == int_l_error_flag) APL_GOBACK_FAIL

	

	/*if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr)) APL_GOBACK_FAIL*/

	


   
	
	

   if ( !strlen(p_dl_dealaudit_struct_h->h_logdate) )
   {
      if( CO_RtvSysDtTime(p_dl_dealaudit_struct_h->h_logdate,l_debug_info_ptr) ==
                                                                  APL_FAILURE )
         APL_GOBACK_FAIL
   }

	 			

	l_dl_dealaudit_struct_i->i_dl_client = 0;
	l_dl_dealaudit_struct_i->i_indentity_no = 0;
	l_dl_dealaudit_struct_i->i_trail_for = 0;
	l_dl_dealaudit_struct_i->i_processdetail = 0;
	l_dl_dealaudit_struct_i->i_proc_usr = 0;
	l_dl_dealaudit_struct_i->i_logdate = 0;
	l_dl_dealaudit_struct_i->i_dlfromord = 0;
	l_dl_dealaudit_struct_i->i_subprocess = 0;
	l_dl_dealaudit_struct_i->i_failreas_cd = 0;
	l_dl_dealaudit_struct_i->i_qty = 0;
	l_dl_dealaudit_struct_i->i_subfailreas_cd = 0;
	
	if (!strlen(p_dl_dealaudit_struct_h->h_subprocess)) 
			l_dl_dealaudit_struct_i->i_subprocess = -1;
	
	if (!strlen(p_dl_dealaudit_struct_h->h_fail_cd))
	{
		l_dl_dealaudit_struct_i->i_failreas_cd = -1;
		l_dl_dealaudit_struct_i->i_subfailreas_cd = -1;
	}	


	if(!strcmp(p_dl_dealaudit_struct_h->h_trail_for,"O"))
	{
		CR_Rtv_OrdChrVal(p_dl_dealaudit_struct_h->h_dl_client,p_dl_dealaudit_struct_h->h_indentity_no,"instr_code",chr_l_instrcode_a,l_debug_info_ptr);
	}
	else if(!strcmp(p_dl_dealaudit_struct_h->h_trail_for,"T"))
	{
		DL_Rtv_TrdChrVal(p_dl_dealaudit_struct_h->h_dl_client,p_dl_dealaudit_struct_h->h_indentity_no,"instr_code",chr_l_instrcode_a,l_debug_info_ptr);
	}		
	
	

	CR_Proc_InstrQtyRound(p_dl_dealaudit_struct_h->h_qty,chr_l_instrcode_a,&l_quantity,l_debug_info_ptr);

	p_dl_dealaudit_struct_h->h_qty = l_quantity;
	
		printf("\n HM :DEbug started");
		printf("\n p_dl_dealaudit_client |%s|", p_dl_dealaudit_struct_h->h_dl_client);
		printf("\n p_dl_dealaudit_indentity_no |%s|",p_dl_dealaudit_struct_h->h_indentity_no);
		printf("\n p_dl_dealaudit_trail |%s|",p_dl_dealaudit_struct_h->h_trail_for);
		printf("\n p_dl_dealaudit_processdtl |%s|", p_dl_dealaudit_struct_h->h_processdetail);
		printf("\n p_dl_dealaudit_proc_usr |%s|",  p_dl_dealaudit_struct_h->h_proc_usr);
		printf("\n p_dl_dealaudit_logdate |%s|", p_dl_dealaudit_struct_h->h_logdate);
		printf("\n p_dl_dealaudit_dl_fromord |%s|",p_dl_dealaudit_struct_h->h_dlfromord);
		printf("\n p_dl_dealaudit_subpross |%s|",p_dl_dealaudit_struct_h->h_subprocess);
		printf("\n p_dl_dealaudit_failrs_cd |%s|",p_dl_dealaudit_struct_h->h_fail_cd);
		printf("\n p_dl_dealaudit_qty |%lf|",p_dl_dealaudit_struct_h->h_qty);
		printf("\n p_dl_dealaudit_subfailrs_cd |%d|",p_dl_dealaudit_struct_h->h_subfailreas_cd);	
	

	EXEC SQL INSERT INTO DL_DEALAUDIT VALUES (:p_dl_dealaudit_struct_h:l_dl_dealaudit_struct_i);
	IS_ANY_ORA_ERROR;	

	

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
		free(l_dl_dealaudit_struct_i);
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
         				"Leaving Function CR_Mod_CLHAudTrail with success\n",
							NULL,
						   NULL);
		}
      return(APL_SUCCESS);
 
	RETURN_FAILURE :
		free(l_dl_dealaudit_struct_i);
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
         				"Leaving Function CR_Mod_CLHAudTrail with errors\n",
							NULL,
						   NULL);
		}
      return(APL_FAILURE);

}
							



int DL_Mod_Posn(char *p_client, 
						char *p_mt_instrument_struct_h, 
						char *p_location, 
						char *p_posnstatus, 
						char p_postype, 
						char p_trcode, 
						double *p_qty, 
						char p_incdec, 
						char *p_block_type,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	

	struct sqlca sqlca;	
	double l_retposn = 0.0, l_round_quantity = 0;
	double *l_retposn_ptr = NULL;
	char 	chr_l_posntype[4],
			chr_l_h_rowid[APL_ROWID_LEN],
			chr_l_h_access_stamp[APL_DATE_LEN],
			chr_l_buf[BUFFER_LEN];
	short int_l_error_flg = APL_SUCCESS, 
			int_l_retval = APL_SUCCESS, 
			l_i_rowid = 0, 
			l_IncDecSign = 1, 
			l_i_temp_qty = 0, 
			l_i_access_stamp = 0;
	double l_h_temp_quantity=0.0;
	double l_h_temp_quantity_rnd=0.0;
	double l_total_safeks=0.0;
	DL_SAFEK_STRUCT_H l_dl_safek_struct_h;
	DL_SAFEK_STRUCT_I l_dl_safek_struct_i;
	char	chr_h_splacc[APL_CLIENT_LENGTH]=APL_NULL_STRING;

	/* JC - ISKB 645 -- Start */
	char 	l_instr_sub_type_h[TYPEOF_INSTR_LEN] = APL_NULL_STRING;
	short 	l_instr_sub_type_i = 0;
	double 	l_qty_safek = 0.0; 
	char 	chr_l_h_dec_len[2]=APL_NULL_STRING;
	short 	l_i_dec_len = 0;
	double 	l_h_temp_qty_rnd = 0.0;
	/* JC - ISKB 645 -- End */
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	l_retposn_ptr = &l_retposn;
	strcpy(chr_l_posntype, APL_NULL_STRING);
	strcpy(chr_l_h_rowid, APL_NULL_STRING);
	strcpy(chr_l_h_access_stamp, APL_NULL_STRING);
	strcpy(chr_l_buf, APL_NULL_STRING);

	sqlca.sqlcode = 0;
	
	EXEC SQL VAR chr_l_h_rowid IS STRING;
	EXEC SQL VAR chr_h_splacc IS STRING;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE,
        				"Entering Function DL_Mod_Posn\n",
						NULL,
					   NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Account is 4: %s\n", 
						p_client);
		CO_ProcMonitor(	APL_OUT_FILE,
        				chr_l_buf,
						NULL,
					   NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Instrurity is : %s\n", 
						p_mt_instrument_struct_h);
		CO_ProcMonitor(	APL_OUT_FILE,
        				chr_l_buf,
						NULL,
					   NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Location is : %s\n", 
						p_location); 
		CO_ProcMonitor(	APL_OUT_FILE,
        				chr_l_buf,
						NULL,
					   NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Position Status is : %s\n", 
						p_posnstatus);
		CO_ProcMonitor(	APL_OUT_FILE,
        				chr_l_buf,
						NULL,
					   NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Position Type is : %c\n", 
						p_postype);
		CO_ProcMonitor(	APL_OUT_FILE,
        				chr_l_buf,
						NULL,
					   NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Transaction Code is : %c\n",
				 		p_trcode);
		CO_ProcMonitor(	APL_OUT_FILE,
        				chr_l_buf,
						NULL,
					   NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Quantity is 2: %f\n", 
						*p_qty);
		CO_ProcMonitor(	APL_OUT_FILE,
        				chr_l_buf,
						NULL,
					   NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Inc/Dec chr_flag is : %c\n", 
						p_incdec);
		CO_ProcMonitor(	APL_OUT_FILE,
        				chr_l_buf,
						NULL,
					   NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"Block Type is : %s\n", 
						p_block_type);
		CO_ProcMonitor(	APL_OUT_FILE,
        				chr_l_buf,
						NULL,
					   NULL);

	}

	

	if (!strlen(p_client))
	{
		APL_DATA_MISSING(	"Account", 
								APL_NULL_STRING, 
								APL_NULL_STRING);
		int_l_error_flg = APL_FAILURE;
	} 
	
	if (!strlen(p_mt_instrument_struct_h))
	{
		APL_DATA_MISSING(	"Instrurity", 
								APL_NULL_STRING, 
								APL_NULL_STRING);
		int_l_error_flg = APL_FAILURE;
	} 

	if (!strlen(p_block_type))
	{
		APL_DATA_MISSING(	"Block Type", 
								APL_NULL_STRING, 
								APL_NULL_STRING);
		int_l_error_flg = APL_FAILURE;
	} 
	
	if ( ( !strlen(p_location) ) && 
			( !strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind, "Y") ) ) 
	{	
		APL_DATA_MISSING(	"Location", 
								APL_NULL_STRING, 
								APL_NULL_STRING);
		int_l_error_flg = APL_FAILURE;
	}

	if ( ( !strlen(p_posnstatus) ) 
			&& ( !strcmp(l_mt_core_sys_params_struct_h.proc_reg_ind, "Y" ) ) ) 
	{
		APL_DATA_MISSING(	"Position Status", 
								APL_NULL_STRING, 
								APL_NULL_STRING);
		int_l_error_flg = APL_FAILURE;
	}

	if (p_postype == NULL)
	{
		printf("HERE inside posntype\n");
		APL_DATA_MISSING(	"Update Pos. Type", 
								APL_NULL_STRING, 
								APL_NULL_STRING);
		int_l_error_flg = APL_FAILURE;
	}

	if (p_trcode == NULL)
	{
		APL_DATA_MISSING(	"Trade Code", 
								APL_NULL_STRING, 
								APL_NULL_STRING);
		int_l_error_flg = APL_FAILURE;
	}

	if ((*p_qty <= 0) && (p_trcode != '5' && p_trcode != '6'))
	{
		APL_DATA_MISSING(	"Quantity", 
								APL_NULL_STRING, 
								APL_NULL_STRING);
		int_l_error_flg = APL_FAILURE;
	} 

	if ( APL_FAILURE == int_l_error_flg )
	{
		APL_GOBACK_FAIL;
	}

	

	if (p_incdec == NULL)
	{		
	 	p_incdec = 'I';
	}
	 
	
	switch (p_postype)
	{
		case 'U' :
			if ( ( p_trcode == '2' ) || ( p_trcode == '4' ) || ( p_trcode == '6' ) || ( p_trcode == '8' ) ) 
			{
				strcpy(chr_l_posntype, "NCR");
				int_l_retval = DL_Proc_PosCalc( p_client, 
												p_mt_instrument_struct_h, 
												p_location, 
												p_posnstatus, 
												APL_NULL_STRING, 
												chr_l_posntype, 
												l_retposn_ptr, p_block_type,
												l_debug_info_ptr); 		
			} 
			else if ( ( p_trcode == '1' ) || ( p_trcode == '3' ) || ( p_trcode == '5' ) || ( p_trcode == '7' ) )
			{
				strcpy(chr_l_posntype, "NCD");
				int_l_retval = DL_Proc_PosCalc( p_client, 
												p_mt_instrument_struct_h, 
												p_location, 
												p_posnstatus, 
												APL_NULL_STRING, 
												chr_l_posntype, 
												l_retposn_ptr, p_block_type,
												l_debug_info_ptr); 		
			} 
			break; 

		case 'C' :
			if ( ( p_trcode == '2' ) || ( p_trcode == '4' ) || ( p_trcode == '6' ) || ( p_trcode == '8' ) ) 
			{
				strcpy(chr_l_posntype, "CR");
				int_l_retval = DL_Proc_PosCalc( p_client, 
												p_mt_instrument_struct_h, 
												p_location, 
												p_posnstatus, 
												APL_NULL_STRING, 
												chr_l_posntype, 
												l_retposn_ptr, p_block_type,
												l_debug_info_ptr); 		
			} 
			else if ( ( p_trcode == '1' ) || ( p_trcode == '3' ) || ( p_trcode == '5' ) || ( p_trcode == '7' ) )
			{
				strcpy(chr_l_posntype, "CD");
				int_l_retval = DL_Proc_PosCalc( p_client, 
												p_mt_instrument_struct_h, 
												p_location, 
												p_posnstatus, 
												APL_NULL_STRING, 
												chr_l_posntype, 
												l_retposn_ptr, p_block_type,
												l_debug_info_ptr); 		
			} 
			break;

 		case 'D' :
			if ( ( p_trcode == '2' ) || ( p_trcode == '4' ) || ( p_trcode == '6' ) || ( p_trcode == '8' ) ) 
			{
				strcpy(chr_l_posntype, "DPR");
				int_l_retval = DL_Proc_PosCalc( p_client, 
												p_mt_instrument_struct_h, 
												p_location, 
												p_posnstatus, 
												APL_NULL_STRING, 
												chr_l_posntype, 
												l_retposn_ptr, p_block_type,
												l_debug_info_ptr); 		
			} 
			else if ( ( p_trcode == '1' ) || ( p_trcode == '3' ) || ( p_trcode == '5' ) || ( p_trcode == '7' ) )
			{
				strcpy(chr_l_posntype, "DPD");
				int_l_retval = DL_Proc_PosCalc( p_client, 
												p_mt_instrument_struct_h, 
												p_location, 
												p_posnstatus, 
												APL_NULL_STRING, 
												chr_l_posntype, 
												l_retposn_ptr, p_block_type,
												l_debug_info_ptr); 		
			} 
			break;

		case 'S' :
			{
				strcpy(chr_l_posntype, "SFK");
				int_l_retval = DL_Proc_PosCalc( p_client, 
												p_mt_instrument_struct_h, 
												p_location, 
												p_posnstatus, 
												APL_NULL_STRING, 
												chr_l_posntype, 
												l_retposn_ptr, p_block_type,
												l_debug_info_ptr); 		
			}
			break;
 
		case 'T' :
			{
				strcpy(chr_l_posntype, "STS");
				int_l_retval = DL_Proc_PosCalc( p_client, 
												p_mt_instrument_struct_h, 
												p_location, 
												p_posnstatus, 
												APL_NULL_STRING, 
												chr_l_posntype, 
												l_retposn_ptr, p_block_type,
												l_debug_info_ptr); 		
			} 
			break;
	
	}

	if ( int_l_retval == APL_FAILURE )
	{
		APL_GOBACK_FAIL;
	}
	printf("\n\n pos=%lf pqty=%lf \n\n", l_retposn , *p_qty );	
	if ( l_retposn < *p_qty && p_incdec == 'D' )
	{
		#ifdef EMU_PROCESSING
         EXEC SQL SELECT FIELD_VAL
         INTO  :chr_h_splacc
         FROM PRO_GSSPLVAL
         WHERE MAIN_FUN='EMUCONV'
         AND   SUB_PROCESS='SPLACC'
         AND NATION=:g_mt_commonsys_params_struct_h.nation_code;

		   IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"SPECIAL A/C","FOR DIFF TRADE",APL_NULL_STRING)

		if ( strcmp(chr_h_splacc,p_client) )
		{
			CO_InsertErr(l_debug_info_ptr, 
							ERR_DEAL_NENUFPOSN, 
							p_client, 
							p_mt_instrument_struct_h, 
							APL_NULL_STRING, 
							__LINE__, 
							__FILE__);
				APL_GOBACK_FAIL;	
		}

		#else 
		/* CO_InsertErr(l_debug_info_ptr, 
							ERR_DEAL_NENUFPOSN, 
							p_client, 
							p_mt_instrument_struct_h, 
							APL_NULL_STRING, 
							__LINE__, 
							__FILE__);
      APL_GOBACK_FAIL;	*/

		#endif
  	}

	/*if ( APL_SUCCESS == CO_ChkErr( *l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL;
	}*/

	if ( !strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind, "N") && 
			!strcmp(l_mt_core_sys_params_struct_h.proc_reg_ind, "N") )
	{
		EXEC SQL SELECT ROWID INTO :chr_l_h_rowid:l_i_rowid FROM DL_SAFEK WHERE
				CLIENT = :p_client AND INSTR_CODE = :p_mt_instrument_struct_h AND BLOCK_TYPE = :p_block_type;
	}
	else if ( !strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind, "N") && 
					!strcmp(l_mt_core_sys_params_struct_h.proc_reg_ind, "Y") )
	{
		EXEC SQL SELECT ROWID INTO :chr_l_h_rowid:l_i_rowid 
				FROM 	DL_SAFEK 
				WHERE CLIENT 		= :p_client 
				AND 	INSTR_CODE 		= :p_mt_instrument_struct_h AND
						STATUS = :p_posnstatus AND BLOCK_TYPE = :p_block_type;
	}
	else if ( !strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind, "Y") && 
					!strcmp(l_mt_core_sys_params_struct_h.proc_reg_ind, "N") )
	{
		EXEC SQL SELECT ROWID INTO :chr_l_h_rowid:l_i_rowid 
				FROM 	DL_SAFEK 
				WHERE CLIENT 	= :p_client 
				AND 	INSTR_CODE 	= :p_mt_instrument_struct_h 
				AND 	LOCATION_CD = :p_location AND BLOCK_TYPE = :p_block_type;
	printf("sqlca.sqlcode is %d\n",sqlca.sqlcode);
	}
	else if ( !strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind, "Y") && 
					!strcmp(l_mt_core_sys_params_struct_h.proc_reg_ind, "Y") )
	{ 
		EXEC SQL SELECT ROWID INTO :chr_l_h_rowid:l_i_rowid 
				FROM 	DL_SAFEK 
				WHERE CLIENT 		= :p_client 
				AND 	INSTR_CODE 		= :p_mt_instrument_struct_h 
				AND 	LOCATION_CD 	= :p_location 
				AND 	STATUS = :p_posnstatus AND BLOCK_TYPE = :p_block_type;
	}

	IS_ANY_ORA_ERROR;

	if ( APL_ZERO_RESULT_SET )
	{
		memset(&l_dl_safek_struct_h,NULL,sizeof(DL_SAFEK_STRUCT_H));
		strcpy(l_dl_safek_struct_h.h_dl_client, p_client);
		l_dl_safek_struct_i.i_dl_client  = 0;
		strcpy(l_dl_safek_struct_h.h_instr_code, p_mt_instrument_struct_h);
		l_dl_safek_struct_i.i_instr_code   = 0;
		strcpy(l_dl_safek_struct_h.h_block_type, p_block_type);
		l_dl_safek_struct_i.i_block_type   = 0;
		l_dl_safek_struct_h.h_stsafekeep_pos  = 0;
		l_dl_safek_struct_i.i_stsafekeep_pos  = 0;
		l_dl_safek_struct_h.h_safekeep_pos    = 0;
		l_dl_safek_struct_i.i_safekeep_pos    = 0;
		l_dl_safek_struct_h.h_nval_rec = 0;
		l_dl_safek_struct_i.i_nval_rec = 0;
		l_dl_safek_struct_h.h_nval_del = 0;
		l_dl_safek_struct_i.i_nval_del = 0;
		l_dl_safek_struct_h.h_val_rec  = 0;
		l_dl_safek_struct_i.i_val_rec  = 0;
		l_dl_safek_struct_h.h_val_del  = 0;
		l_dl_safek_struct_i.i_val_del  = 0;

		/* Start - Maintain DP_REC & DP_DEL at 0 - RahulC - 23May2007 */
				   l_dl_safek_struct_h.h_dp_rec   = 0;
				   l_dl_safek_struct_i.i_dp_rec   = 0;
				   l_dl_safek_struct_h.h_dp_del   = 0;
				   l_dl_safek_struct_i.i_dp_del   = 0;
	   /* End - Maintain DP_REC & DP_DEL at 0 - RahulC - 23May2007 */

		if ( APL_FAILURE == CO_RtvSysDtTime( l_dl_safek_struct_h.h_access_stamp, 
																l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL;
		}
		else
		{
			l_dl_safek_struct_i.i_access_stamp = 0;
		}

		if ( !strcmp(p_location, APL_NULL_STRING) )
		{
			strcpy(l_dl_safek_struct_h.h_loccode, APL_NULL_STRING);
			l_dl_safek_struct_i.i_loccode = -1;
		}
		else 
		{
			strcpy(l_dl_safek_struct_h.h_loccode, p_location);
			l_dl_safek_struct_i.i_loccode = 0;
		}
		if ( !strcmp(p_posnstatus, APL_NULL_STRING) )
		{
			strcpy(l_dl_safek_struct_h.h_pos_stat, APL_NULL_STRING);
			l_dl_safek_struct_i.i_status_pos = -1;
		}
		else
		{
			strcpy(l_dl_safek_struct_h.h_pos_stat, p_posnstatus);
			l_dl_safek_struct_i.i_status_pos = 0;
		}	

		CR_Proc_InstrQtyRound(*p_qty,p_mt_instrument_struct_h,&l_round_quantity,l_debug_info_ptr);

		switch ( p_postype )
		{
			case 'U' :
				if ( p_trcode == '1' || p_trcode == '3' || p_trcode == '5' || p_trcode == '7' )
				{
					l_dl_safek_struct_h.h_nval_del = l_round_quantity;
			}
				else if ( p_trcode == '2' || p_trcode == '4' || p_trcode == '6' || p_trcode == '8' )
				{
					l_dl_safek_struct_h.h_nval_rec = l_round_quantity;
				}
				break;

			case 'C' :
				if  ( p_trcode == '1' || p_trcode == '3' || p_trcode == '5' || p_trcode == '7' )
				{
					l_dl_safek_struct_h.h_val_del = l_round_quantity;
				}
				else if ( p_trcode == '2' || p_trcode == '4' || p_trcode == '6' || p_trcode == '8' )
				{
					l_dl_safek_struct_h.h_val_rec = l_round_quantity;
				}
				break;

			case 'S' :
				if  ( (p_trcode == '1' ) && ( strlen(chr_h_splacc) ) && ( !strcmp(chr_h_splacc,p_client))  )
				{
					l_dl_safek_struct_h.h_safekeep_pos =   - l_round_quantity;
				}
				else
				{
					l_dl_safek_struct_h.h_safekeep_pos = l_round_quantity;
				}
				break;
		
			case 'T' :
				l_dl_safek_struct_h.h_stsafekeep_pos = l_round_quantity;
				break;

			case 'D' :
				if  ( p_trcode == '1' || p_trcode == '3' || p_trcode == '5' || p_trcode == '7' )
				{
					l_dl_safek_struct_h.h_dp_del = l_round_quantity;
				}
				else if ( p_trcode == '2' || p_trcode == '4' || p_trcode == '6' || p_trcode == '8' )
				{
					l_dl_safek_struct_h.h_dp_rec = l_round_quantity;
				}
				break;

		}
		printf("\n h_instr_code |%s|",l_dl_safek_struct_h.h_instr_code);
		printf("\n h_location_cd |%s|",l_dl_safek_struct_h.h_loccode);
		printf("\n h_client |%s|", l_dl_safek_struct_h.h_dl_client);
		printf("\n h_access_stamp |%s|", l_dl_safek_struct_h.h_access_stamp);
		printf("\n h_status_pos |%s|",  l_dl_safek_struct_h.h_pos_stat);
		printf("\n h_start_safek|%lf|", l_dl_safek_struct_h.h_stsafekeep_pos);
		printf("\n h_safekeep_pos|%lf|",l_dl_safek_struct_h.h_safekeep_pos);
		printf("\n h_nvalreceive|%lf|",l_dl_safek_struct_h.h_nval_rec);
		printf("\n h_nvaldeliver|%lf|",l_dl_safek_struct_h.h_nval_del);
		printf("\n h_val_rec|%lf|",l_dl_safek_struct_h.h_val_rec);
		printf("\n h_val_del|%lf|",l_dl_safek_struct_h.h_val_del);
		printf("\n h_dp_rec|%lf|",l_dl_safek_struct_h.h_dp_rec);
		printf("\n h_dp_del|%lf|",l_dl_safek_struct_h.h_dp_del);
		printf("\n   h_block_type |%s|",l_dl_safek_struct_h.h_block_type);

		EXEC SQL INSERT INTO DL_SAFEK 
				VALUES (:l_dl_safek_struct_h:l_dl_safek_struct_i);
		IS_ANY_ORA_ERROR ;
	}   			
	else
	{
		if ( p_incdec == 'I' )
		{
			l_IncDecSign = 1;
		}
		else
		{
			l_IncDecSign = -1;
		}

		if ( APL_FAILURE == CO_RtvSysDtTime( chr_l_h_access_stamp, 
																l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL;
		}
		else
		{
			l_i_access_stamp = 0;
		}

		/* Changes done by Prateek for KB_6652(Added "for Update" and IS_ANY_ORA_ERROR in  all Select/Update Queries) - START */

		switch ( p_postype )
		{
			case 'U' :
				if ( p_trcode == '1' || p_trcode == '3' || p_trcode == '5' || p_trcode == '7' )
				{
					EXEC SQL SELECT NVALDELIVER 
					INTO :l_h_temp_quantity:l_i_temp_qty
					FROM DL_SAFEK
					WHERE ROWID = :chr_l_h_rowid for update;
				
					IS_ANY_ORA_ERROR;

					CR_Proc_InstrQtyRound(l_h_temp_quantity + (l_IncDecSign * (*p_qty)),p_mt_instrument_struct_h,&l_h_temp_quantity_rnd,l_debug_info_ptr);

					EXEC SQL UPDATE DL_SAFEK 
							SET	NVALDELIVER = :l_h_temp_quantity_rnd, 
							ACCESS_STAMP = :chr_l_h_access_stamp:l_i_access_stamp 
							WHERE ROWID = :chr_l_h_rowid;
					IS_ANY_ORA_ERROR;
			}
				else if ( p_trcode == '2' || p_trcode == '4' || p_trcode == '6' || p_trcode == '8' )
				{
					EXEC SQL SELECT NVALRECEIVE
					INTO :l_h_temp_quantity:l_i_temp_qty
					FROM DL_SAFEK
					WHERE ROWID = :chr_l_h_rowid for update;

					IS_ANY_ORA_ERROR;
				
					CR_Proc_InstrQtyRound(l_h_temp_quantity + (l_IncDecSign * (*p_qty)),p_mt_instrument_struct_h,&l_h_temp_quantity_rnd,l_debug_info_ptr);

					EXEC SQL UPDATE DL_SAFEK 
							SET 	NVALRECEIVE = :l_h_temp_quantity_rnd, 
									ACCESS_STAMP = :chr_l_h_access_stamp:l_i_access_stamp 
							WHERE ROWID = :chr_l_h_rowid;
					IS_ANY_ORA_ERROR;
				}
				break;

			case 'C' :
				if  ( p_trcode == '1' || p_trcode == '3' || p_trcode == '5' || p_trcode == '7' )
				{
					EXEC SQL SELECT VAL_DEL
					INTO :l_h_temp_quantity:l_i_temp_qty
					FROM DL_SAFEK
					WHERE ROWID = :chr_l_h_rowid for update;

					IS_ANY_ORA_ERROR;
				
					CR_Proc_InstrQtyRound(l_h_temp_quantity + (l_IncDecSign * (*p_qty)),p_mt_instrument_struct_h,&l_h_temp_quantity_rnd,l_debug_info_ptr);

					EXEC SQL UPDATE DL_SAFEK 
							SET 	VAL_DEL = :l_h_temp_quantity_rnd,
									ACCESS_STAMP = :chr_l_h_access_stamp:l_i_access_stamp 
							WHERE ROWID = :chr_l_h_rowid;
						IS_ANY_ORA_ERROR;
				}	
				else if ( p_trcode == '2' || p_trcode == '4' || p_trcode == '6' || p_trcode == '8' )
				{
					EXEC SQL SELECT VAL_REC
					INTO :l_h_temp_quantity:l_i_temp_qty
					FROM DL_SAFEK
					WHERE ROWID = :chr_l_h_rowid for update;
					
					IS_ANY_ORA_ERROR;
				
					CR_Proc_InstrQtyRound(l_h_temp_quantity + (l_IncDecSign * (*p_qty)),p_mt_instrument_struct_h,&l_h_temp_quantity_rnd,l_debug_info_ptr);

					EXEC SQL UPDATE DL_SAFEK 
							SET 	VAL_REC = :l_h_temp_quantity_rnd,
									ACCESS_STAMP = :chr_l_h_access_stamp:l_i_access_stamp 
							WHERE ROWID = :chr_l_h_rowid;
					IS_ANY_ORA_ERROR;
				}
				break;

			case 'S' :
				EXEC SQL SELECT SAFEKEEP_POS
				INTO :l_h_temp_quantity:l_i_temp_qty
				FROM DL_SAFEK
				WHERE ROWID = :chr_l_h_rowid for update;

				IS_ANY_ORA_ERROR;
			
				/* JC - ISKB 645 -- Start */	

				EXEC SQL SELECT INSTR_SUB_TYPE
						INTO :l_instr_sub_type_h:l_instr_sub_type_i
						FROM MT_INSTRUMENT
						WHERE instr_code = RTRIM(:p_mt_instrument_struct_h);
						IS_ANY_ORA_ERROR;
				printf("JC::: ORA for select of instr sub type - [%d]\n", sqlca.sqlcode);
				printf("JC::: Instr sub type is [%s]\n", l_instr_sub_type_h);

				if((strcmp(l_instr_sub_type_h, "ME") == 0) || (strcmp(l_instr_sub_type_h, "MD") == 0))
				{
					printf("JC::: Instr sub type is ME or MD\n");

					l_qty_safek = l_h_temp_quantity + (l_IncDecSign * (*p_qty));

					printf("JC::: Qty to be updated in dl_safek --- [%f]\n", l_qty_safek);

					EXEC SQL SELECT FIELD_VAL INTO :chr_l_h_dec_len:l_i_dec_len
					FROM PRO_GSSPLVAL
					WHERE MAIN_FUN = 'QUANTITY_DEC_LEN'
					AND SUB_PROCESS = 'DEC_FOR_ME_MD'
					AND NATION = :g_mt_commonsys_params_struct_h.nation_code;
					IS_ANY_ORA_ERROR

					printf("JC::: Deci length in int - [%d]\n", atoi(chr_l_h_dec_len));

					CO_Round(l_qty_safek, atoi(chr_l_h_dec_len), &l_h_temp_qty_rnd);

					printf("JC::: Qty ----------- [%f]\n", l_h_temp_qty_rnd);
					l_h_temp_quantity_rnd = l_h_temp_qty_rnd;
					printf("JC::: Qty to be inserted into safekeep - [%f]\n", l_h_temp_quantity_rnd);

				/*
					EXEC SQL UPDATE DL_SAFEK
					SET     SAFEKEEP_POS = :l_h_temp_qty_rnd,
					ACCESS_STAMP = :chr_l_h_access_stamp:l_i_access_stamp
											WHERE ROWID = :chr_l_h_rowid;

					printf("JC::: ORA for insert into dl_safek - [%d]\n", sqlca.sqlcode);
				*/
				}
				else
				{

				/* JC - ISKB 645 -- End */

				CR_Proc_InstrQtyRound(l_h_temp_quantity + (l_IncDecSign * (*p_qty)),p_mt_instrument_struct_h,&l_h_temp_quantity_rnd,l_debug_info_ptr);
				}

				EXEC SQL UPDATE DL_SAFEK 
					SET 	SAFEKEEP_POS = :l_h_temp_quantity_rnd,
					ACCESS_STAMP = :chr_l_h_access_stamp:l_i_access_stamp 
					WHERE ROWID = :chr_l_h_rowid;
					IS_ANY_ORA_ERROR;
				
				break;
	
			case 'T' :
				EXEC SQL SELECT START_SAFEK
				INTO :l_h_temp_quantity:l_i_temp_qty
				FROM DL_SAFEK
				WHERE ROWID = :chr_l_h_rowid for update;
				
				IS_ANY_ORA_ERROR;

				CR_Proc_InstrQtyRound(l_h_temp_quantity + (l_IncDecSign * (*p_qty)),p_mt_instrument_struct_h,&l_h_temp_quantity_rnd,l_debug_info_ptr);

				EXEC SQL UPDATE DL_SAFEK 
							SET 	START_SAFEK = :l_h_temp_quantity_rnd,
									ACCESS_STAMP = :chr_l_h_access_stamp:l_i_access_stamp 
							WHERE ROWID = :chr_l_h_rowid;
							IS_ANY_ORA_ERROR;	
				break;

			case 'D' :
				if  ( p_trcode == '1' || p_trcode == '3' || p_trcode == '5' || p_trcode == '7' )
				{
					EXEC SQL SELECT DP_DEL
					INTO :l_h_temp_quantity:l_i_temp_qty
					FROM DL_SAFEK
					WHERE ROWID = :chr_l_h_rowid for update;

					IS_ANY_ORA_ERROR;
				
					CR_Proc_InstrQtyRound(l_h_temp_quantity + (l_IncDecSign * (*p_qty)),p_mt_instrument_struct_h,&l_h_temp_quantity_rnd,l_debug_info_ptr);

					EXEC SQL UPDATE DL_SAFEK 
							SET 	DP_DEL = :l_h_temp_quantity_rnd,
									ACCESS_STAMP = :chr_l_h_access_stamp:l_i_access_stamp 
							WHERE ROWID = :chr_l_h_rowid;
							IS_ANY_ORA_ERROR;
				}	
				else if ( p_trcode == '2' || p_trcode == '4' || p_trcode == '6' || p_trcode == '8' )
				{
					EXEC SQL SELECT DP_REC
					INTO :l_h_temp_quantity:l_i_temp_qty
					FROM DL_SAFEK
					WHERE ROWID = :chr_l_h_rowid for update;
					
					IS_ANY_ORA_ERROR;
				
					CR_Proc_InstrQtyRound(l_h_temp_quantity + (l_IncDecSign * (*p_qty)),p_mt_instrument_struct_h,&l_h_temp_quantity_rnd,l_debug_info_ptr);

					EXEC SQL UPDATE DL_SAFEK 
							SET 	DP_REC = :l_h_temp_quantity_rnd,
									ACCESS_STAMP = :chr_l_h_access_stamp:l_i_access_stamp 
							WHERE ROWID = :chr_l_h_rowid;
						IS_ANY_ORA_ERROR;
				}
				break;
		}
	}  
		
	/* Changes done by Prateek for KB_6652(Added "for Update" and IS_ANY_ORA_ERROR in  all Select/Update Queries) - End */

	printf("sqlca.sqlcode is %d\n",sqlca.sqlcode);

	EXEC SQL SELECT nvl(sum(safekeep_pos)+sum(NVALRECEIVE)+sum(VAL_REC)+sum(DP_REC)-sum(NVALDELIVER)-sum(VAL_DEL)-sum(DP_DEL),0)
			INTO :l_total_safeks
			FROM DL_SAFEK
			WHERE CLIENT = :p_client AND INSTR_CODE = :p_mt_instrument_struct_h and BLOCK_TYPE =:p_block_type;
	IS_ANY_ORA_ERROR;


	if (l_total_safeks == 0)
	{
		EXEC SQL UPDATE CAMESGLINK SET TYPEOF_MSG_LNK ='VX' 
		WHERE CLIENT = :p_client AND
		TYPEOF_MSG_LNK = 'VN' AND
		CORP_ID IN 
		(
			SELECT CORP_ID FROM CAEVENT 
			WHERE INSTR_CODE = :p_mt_instrument_struct_h AND
			STATUS IN ('RE','RP','PP')
		);
		IS_ANY_ORA_ERROR;
			
		EXEC SQL UPDATE CAMESGLINK SET TYPEOF_MSG_LNK ='TX' 
		WHERE CLIENT = :p_client AND
		TYPEOF_MSG_LNK = 'TN' AND
		CORP_ID IN 
		(
			SELECT A.CORP_ID FROM CAEVENT A, CACHGEVENT B
			WHERE A.CORP_ID = B.CORP_ID AND
			A.INSTR_CODE = :p_mt_instrument_struct_h AND
			A.STATUS IN ('RE','RP','PP')
		);
		IS_ANY_ORA_ERROR;

		EXEC SQL UPDATE CAMESGLINK SET TYPEOF_MSG_LNK ='XC' 
		WHERE CLIENT = :p_client AND
		TYPEOF_MSG_LNK = 'TC' AND
		CORP_ID IN 
		(
			SELECT A.CORP_ID FROM CAEVENT A, CACHGEVENT B
			WHERE A.CORP_ID = B.CORP_ID AND
			A.INSTR_CODE = :p_mt_instrument_struct_h AND
			A.STATUS IN ('RE','RP','PP')
		);
		IS_ANY_ORA_ERROR;
	}



	


	
	
	IS_ANY_ORA_ERROR;
	
	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
							"Exiting processtion DL_Mod_Posn with success\n",
							NULL,
						   NULL);
		}
		return(APL_SUCCESS);
	
	RETURN_FAILURE : 
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
							"Exiting processtion DL_Mod_Posn with errors\n",
							NULL,
						   NULL);
		}
		return(APL_FAILURE);

}
							



int DL_Proc_PosCalc(	char *p_client, 
							char *p_mt_instrument_struct_h, 
							char *p_location, 
							char *p_posnstatus, 
							char *p_date, 
							char *p_sun_type, 
							double *p_retposn, 
							char *p_block_type,
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr)



{

	struct sqlca sqlca;
	double l_h_retposn = 0;
	short l_i_retposn, int_l_error_flg = APL_SUCCESS;
	double	l_h_dp_rec	=	0.0;
	double	l_h_dp_del	=	0.0;
	double	l_h_nval_del	=	0.0;
	double	l_h_nval_rec	=	0.0;
	double	l_h_val_del		=	0.0;
	double	l_h_val_rec		=	0.0;
	double	l_h_safekeep_pos		=	0.0;
	double	l_h_stsafekeep_pos		=	0.0;
	short		l_i_dp_rec	=	0;	
	short		l_i_dp_del	=	0;	
	short		l_i_nconfdel	=	0;	
	short		l_i_nconfrec	=	0;	
	short		l_i_confdel		=	0;	
	short		l_i_confrec		=	0;	
	short		l_i_safek		=	0;	
	short		l_i_stsafek		=	0;	
	char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	/* int l_i_includeBothDp = 0; PJ */

	char p_type[10] = APL_NULL_STRING;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	strcpy(p_type,p_sun_type);
	l_i_retposn = 0;
	sqlca.sqlcode = 0;



	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE,
						"Entering processtion DL_Proc_PosCalc\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf,	
					"The Account is 5: %s\n", 
					p_client);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf,
					"The Instrurity is : %s\n", 
					p_mt_instrument_struct_h);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf,
					"The Location is : %s\n", 
					p_location);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf,
					"The Position Status is : %s\n", 
					p_posnstatus);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf,
					"The Date is : %s\n", 
					p_date);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf,
					"The Position Type is : %s\n", 
					p_type);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf,
					"The Quantity is 3: %f\n", 
					*p_retposn);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						NULL);
	}



	if (!strcmp( p_client, APL_NULL_STRING )) 
	{
		APL_DATA_MISSING(	"CLIENT",
								APL_NULL_STRING,
								APL_NULL_STRING);
		int_l_error_flg = APL_FAILURE;
	}

	if (!strcmp( p_mt_instrument_struct_h, APL_NULL_STRING )) 
	{
		APL_DATA_MISSING(	"INSTRUMENT", 
								APL_NULL_STRING, 
								APL_NULL_STRING);
		int_l_error_flg = APL_FAILURE;
	}

	if (!strcmp( p_block_type, APL_NULL_STRING )) 
	{
		APL_DATA_MISSING(	"BLOCK TYPE", 
								APL_NULL_STRING, 
								APL_NULL_STRING);
		int_l_error_flg = APL_FAILURE;
	}


	if ( APL_FAILURE == int_l_error_flg )
	{
  		APL_GOBACK_FAIL;
	}
	
	/* Fix For indian market to consider all locations pass p_type as DAL */
	/* DP Code will be always NSDL Or CDSL. Hence this check is not required for Indian Market 
	if ((strcmp(p_location,"NSDL") == 0) || (strcmp(p_location,"CDSL") == 0))
	{
		l_i_includeBothDp = 1;
	}
	else
	{
		l_i_includeBothDp = 0;
	} */


	if (!strcmp( p_type, APL_NULL_STRING ))
	{
		printf("please 90  -- Biju\n");
		 strcpy( p_type, "SFK") ;
		printf("please 80  -- Biju\n");
	}


	if ( !strlen(p_date) ) 
	{
     	if ( ( strcmp(p_location, APL_NULL_STRING) == 0 ) && 
				(strcmp(p_posnstatus, APL_NULL_STRING) == 0 ) )
		{
			EXEC SQL SELECT 	SUM(NVL(START_SAFEK,0)),
									SUM(NVL(SAFEKEEP_POS,0)),
									SUM(NVL(VAL_REC,0)),
									SUM(NVL(VAL_DEL,0)),
									SUM(NVL(NVALRECEIVE,0)),
									SUM(NVL(NVALDELIVER,0)),
									SUM(NVL(DP_REC,0)),
									SUM(NVL(DP_DEL,0))
						INTO		:l_h_stsafekeep_pos:l_i_stsafek,
									:l_h_safekeep_pos:l_i_safek,
									:l_h_val_rec:l_i_confrec,
									:l_h_val_del:l_i_confdel,
									:l_h_nval_rec:l_i_nconfrec,
									:l_h_nval_del:l_i_nconfdel,
									:l_h_dp_rec:l_i_dp_rec,
									:l_h_dp_del:l_i_dp_del
						FROM 		DL_SAFEK
						WHERE 	CLIENT	=:p_client 
						AND 		INSTR_CODE	=:p_mt_instrument_struct_h
						AND			BLOCK_TYPE =:p_block_type;

			IS_ANY_ORA_ERROR;
		}
			
		else if ( ( strcmp(p_location, APL_NULL_STRING) == 0 ) && 
					 (	strcmp(p_posnstatus, APL_NULL_STRING) != 0 ) )
		{
			EXEC SQL SELECT 	SUM(NVL(START_SAFEK,0)),
									SUM(NVL(SAFEKEEP_POS,0)),
									SUM(NVL(VAL_REC,0)),
									SUM(NVL(VAL_DEL,0)),
									SUM(NVL(NVALRECEIVE,0)),
									SUM(NVL(NVALDELIVER,0)),
									SUM(NVL(DP_REC,0)),
									SUM(NVL(DP_DEL,0))
			INTO		:l_h_stsafekeep_pos:l_i_stsafek,
									:l_h_safekeep_pos:l_i_safek,
									:l_h_val_rec:l_i_confrec,
									:l_h_val_del:l_i_confdel,
									:l_h_nval_rec:l_i_nconfrec,
									:l_h_nval_del:l_i_nconfdel,
									:l_h_dp_rec:l_i_dp_rec,
									:l_h_dp_del:l_i_dp_del
			FROM 		DL_SAFEK
						WHERE 	CLIENT	=:p_client 
						AND 		INSTR_CODE	=:p_mt_instrument_struct_h
						AND 		STATUS	=:p_posnstatus
						AND			BLOCK_TYPE =:p_block_type;

			IS_ANY_ORA_ERROR;
		}
			
		else if ( ( strcmp(p_location, APL_NULL_STRING) != 0) && 
					(strcmp(p_posnstatus, APL_NULL_STRING) == 0 )) 
		{
			if (strcmp(p_type,"DAL") == 0)
			{
			EXEC SQL SELECT 	SUM(NVL(START_SAFEK,0)),
									SUM(NVL(SAFEKEEP_POS,0)),
									SUM(NVL(VAL_REC,0)),
									SUM(NVL(VAL_DEL,0)),
									SUM(NVL(NVALRECEIVE,0)),
									SUM(NVL(NVALDELIVER,0)),
									SUM(NVL(DP_REC,0)),
									SUM(NVL(DP_DEL,0))
			INTO		:l_h_stsafekeep_pos:l_i_stsafek,
									:l_h_safekeep_pos:l_i_safek,
									:l_h_val_rec:l_i_confrec,
									:l_h_val_del:l_i_confdel,
									:l_h_nval_rec:l_i_nconfrec,
									:l_h_nval_del:l_i_nconfdel,
									:l_h_dp_rec:l_i_dp_rec,
									:l_h_dp_del:l_i_dp_del
			FROM 		DL_SAFEK
						WHERE 	CLIENT	=:p_client 
						AND 		INSTR_CODE	=:p_mt_instrument_struct_h
						AND			BLOCK_TYPE =:p_block_type;

			}
			else
			{
			EXEC SQL SELECT 	SUM(NVL(START_SAFEK,0)),
									SUM(NVL(SAFEKEEP_POS,0)),
									SUM(NVL(VAL_REC,0)),
									SUM(NVL(VAL_DEL,0)),
									SUM(NVL(NVALRECEIVE,0)),
									SUM(NVL(NVALDELIVER,0)),
									SUM(NVL(DP_REC,0)),
									SUM(NVL(DP_DEL,0))
			INTO		:l_h_stsafekeep_pos:l_i_stsafek,
									:l_h_safekeep_pos:l_i_safek,
									:l_h_val_rec:l_i_confrec,
									:l_h_val_del:l_i_confdel,
									:l_h_nval_rec:l_i_nconfrec,
									:l_h_nval_del:l_i_nconfdel,
									:l_h_dp_rec:l_i_dp_rec,
									:l_h_dp_del:l_i_dp_del
			FROM 		DL_SAFEK
						WHERE 	CLIENT	=:p_client 
						AND 		INSTR_CODE	=:p_mt_instrument_struct_h
						AND 		LOCATION_CD	=:p_location
						AND			BLOCK_TYPE =:p_block_type;

			}
			IS_ANY_ORA_ERROR;
		}
			
		else if ( (strcmp(p_location, APL_NULL_STRING) != 0 ) && 
					 (strcmp(p_posnstatus, APL_NULL_STRING) != 0 ) )
		{
			EXEC SQL SELECT 	SUM(NVL(START_SAFEK,0)),
									SUM(NVL(SAFEKEEP_POS,0)),
									SUM(NVL(VAL_REC,0)),
									SUM(NVL(VAL_DEL,0)),
									SUM(NVL(NVALRECEIVE,0)),
									SUM(NVL(NVALDELIVER,0)),
									SUM(NVL(DP_REC,0)),
									SUM(NVL(DP_DEL,0))
			INTO		:l_h_stsafekeep_pos:l_i_stsafek,
									:l_h_safekeep_pos:l_i_safek,
									:l_h_val_rec:l_i_confrec,
									:l_h_val_del:l_i_confdel,
									:l_h_nval_rec:l_i_nconfrec,
									:l_h_nval_del:l_i_nconfdel,
									:l_h_dp_rec:l_i_dp_rec,
									:l_h_dp_del:l_i_dp_del
			FROM 		DL_SAFEK
						WHERE 	CLIENT		=:p_client 
						AND 		INSTR_CODE		=:p_mt_instrument_struct_h
						AND 		LOCATION_CD		=:p_location
						AND 		STATUS	=:p_posnstatus
						AND			BLOCK_TYPE =:p_block_type;

			IS_ANY_ORA_ERROR;
		}
	}
	else
	{
		printf("please -- 7 --Biju\n");	
     	if ( ( strcmp(p_location, APL_NULL_STRING) == 0 ) && 
				(strcmp(p_posnstatus, APL_NULL_STRING) == 0 ) )
		{
			EXEC SQL SELECT 	SUM(NVL(START_SAFEK,0)),
									SUM(NVL(SAFEKEEP_POS,0)),
									SUM(NVL(VAL_REC,0)),
									SUM(NVL(VAL_DEL,0)),
									SUM(NVL(NVALRECEIVE,0)),
									SUM(NVL(NVALDELIVER,0)),
									SUM(NVL(DP_REC,0)),
									SUM(NVL(DP_DEL,0))
			INTO		:l_h_stsafekeep_pos:l_i_stsafek,
									:l_h_safekeep_pos:l_i_safek,
									:l_h_val_rec:l_i_confrec,
									:l_h_val_del:l_i_confdel,
									:l_h_nval_rec:l_i_nconfrec,
									:l_h_nval_del:l_i_nconfdel,
									:l_h_dp_rec:l_i_dp_rec,
								:l_h_dp_del:l_i_dp_del
			FROM 		DL_HISSAFEK
						WHERE 	POSIT_DATE	=TO_DATE(:p_date,'DD/MM/YYYY HH24:MI:SS')
						AND 		CLIENT	=:p_client 
						AND 		INSTR_CODE	=:p_mt_instrument_struct_h
						AND			BLOCK_TYPE =:p_block_type;
			IS_ANY_ORA_ERROR;
		}
			
     	else if ( ( strcmp(p_location, APL_NULL_STRING) == 0 ) && 
					 ( strcmp(p_posnstatus, APL_NULL_STRING) != 0 ) )
		{
			EXEC SQL SELECT 	SUM(NVL(START_SAFEK,0)),
									SUM(NVL(SAFEKEEP_POS,0)),
									SUM(NVL(VAL_REC,0)),
									SUM(NVL(VAL_DEL,0)),
									SUM(NVL(NVALRECEIVE,0)),
									SUM(NVL(NVALDELIVER,0)),
									SUM(NVL(DP_REC,0)),
									SUM(NVL(DP_DEL,0))
			INTO		:l_h_stsafekeep_pos:l_i_stsafek,
									:l_h_safekeep_pos:l_i_safek,
									:l_h_val_rec:l_i_confrec,
									:l_h_val_del:l_i_confdel,
									:l_h_nval_rec:l_i_nconfrec,
									:l_h_nval_del:l_i_nconfdel,
									:l_h_dp_rec:l_i_dp_rec,
								:l_h_dp_del:l_i_dp_del
			FROM 		DL_HISSAFEK
						WHERE 	POSIT_DATE		=TO_DATE(:p_date,'DD/MM/YYYY HH24:MI:SS')
						AND 		CLIENT		=:p_client 
						AND 		INSTR_CODE		=:p_mt_instrument_struct_h
						AND		STATUS = :p_posnstatus
						AND			BLOCK_TYPE =:p_block_type;

			IS_ANY_ORA_ERROR;
		}
			
    	else if ( ( strcmp(p_location, APL_NULL_STRING) != 0 ) && 
					 ( strcmp(p_posnstatus, APL_NULL_STRING) == 0 ) )
		{
			if (strcmp(p_type,"DAL") == 0)
			{
			EXEC SQL SELECT 	SUM(NVL(START_SAFEK,0)),
									SUM(NVL(SAFEKEEP_POS,0)),
									SUM(NVL(VAL_REC,0)),
									SUM(NVL(VAL_DEL,0)),
									SUM(NVL(NVALRECEIVE,0)),
									SUM(NVL(NVALDELIVER,0)),
									SUM(NVL(DP_REC,0)),
									SUM(NVL(DP_DEL,0))
			INTO		:l_h_stsafekeep_pos:l_i_stsafek,
									:l_h_safekeep_pos:l_i_safek,
									:l_h_val_rec:l_i_confrec,
									:l_h_val_del:l_i_confdel,
									:l_h_nval_rec:l_i_nconfrec,
									:l_h_nval_del:l_i_nconfdel,
									:l_h_dp_rec:l_i_dp_rec,
									:l_h_dp_del:l_i_dp_del
			FROM 		DL_HISSAFEK
						WHERE 	POSIT_DATE	=TO_DATE(:p_date,'DD/MM/YYYY HH24:MI:SS')
						AND 		CLIENT	=:p_client 
						AND 		INSTR_CODE	=:p_mt_instrument_struct_h
						AND			BLOCK_TYPE =:p_block_type;
			}
			else
			{
			EXEC SQL SELECT 	SUM(NVL(START_SAFEK,0)),
									SUM(NVL(SAFEKEEP_POS,0)),
									SUM(NVL(VAL_REC,0)),
									SUM(NVL(VAL_DEL,0)),
									SUM(NVL(NVALRECEIVE,0)),
									SUM(NVL(NVALDELIVER,0)),
									SUM(NVL(DP_REC,0)),
									SUM(NVL(DP_DEL,0))
			INTO		:l_h_stsafekeep_pos:l_i_stsafek,
									:l_h_safekeep_pos:l_i_safek,
									:l_h_val_rec:l_i_confrec,
									:l_h_val_del:l_i_confdel,
									:l_h_nval_rec:l_i_nconfrec,
									:l_h_nval_del:l_i_nconfdel,
									:l_h_dp_rec:l_i_dp_rec,
									:l_h_dp_del:l_i_dp_del
			FROM 		DL_HISSAFEK
						WHERE 	POSIT_DATE	=TO_DATE(:p_date,'DD/MM/YYYY HH24:MI:SS')
						AND 		CLIENT	=:p_client 
						AND 		INSTR_CODE	=:p_mt_instrument_struct_h
						AND 		LOCATION_CD	=:p_location
						AND			BLOCK_TYPE =:p_block_type;
			}
			IS_ANY_ORA_ERROR;
		}
			
    	else if ( ( strcmp(p_location, APL_NULL_STRING) != 0 ) &&
					 ( strcmp(p_posnstatus, APL_NULL_STRING) != 0 ) )
		{
			EXEC SQL SELECT 	SUM(NVL(START_SAFEK,0)),
									SUM(NVL(SAFEKEEP_POS,0)),
									SUM(NVL(VAL_REC,0)),
									SUM(NVL(VAL_DEL,0)),
									SUM(NVL(NVALRECEIVE,0)),
									SUM(NVL(NVALDELIVER,0)),
									SUM(NVL(DP_REC,0)),
									SUM(NVL(DP_DEL,0))
			INTO		:l_h_stsafekeep_pos:l_i_stsafek,
									:l_h_safekeep_pos:l_i_safek,
									:l_h_val_rec:l_i_confrec,
									:l_h_val_del:l_i_confdel,
									:l_h_nval_rec:l_i_nconfrec,
									:l_h_nval_del:l_i_nconfdel,
									:l_h_dp_rec:l_i_dp_rec,
									:l_h_dp_del:l_i_dp_del
			FROM 		DL_HISSAFEK
						WHERE 	POSIT_DATE		=TO_DATE(:p_date,'DD/MM/YYYY HH24:MI:SS')
						AND 		CLIENT		=:p_client 
						AND 		INSTR_CODE		=:p_mt_instrument_struct_h
						AND 		LOCATION_CD		=:p_location
						AND 		STATUS	=:p_posnstatus
						AND			BLOCK_TYPE =:p_block_type;

			IS_ANY_ORA_ERROR;
		}
	}

	if (strcmp(p_type,"NCD") == 0)
	{
		*p_retposn = l_h_nval_del;
	}
	else if (strcmp(p_type,"NCR") == 0)
	{
		*p_retposn = l_h_nval_rec;
	}
	else if (strcmp(p_type,"CD") == 0)
	{
		*p_retposn = l_h_val_del;
	}
	else if (strcmp(p_type,"CR") == 0)
	{
		*p_retposn = l_h_val_rec;
	}
	else if (strcmp(p_type,"SFK") == 0)
	{
		*p_retposn = l_h_safekeep_pos;
	}
	else if (strcmp(p_type,"STS") == 0)
	{
		*p_retposn = l_h_stsafekeep_pos;
	}
	else if (strcmp(p_type,"DPD") == 0)
	{
		*p_retposn = l_h_dp_del;
	}
	else if (strcmp(p_type,"DPR") == 0)
	{
		*p_retposn = l_h_dp_rec;
	}
	else if (strcmp(p_type,"DAL") == 0)
	{
		*p_retposn = l_h_safekeep_pos;
	}
	printf("\n Returning = |%lf|\n\n",*p_retposn );
	
	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS :
	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE,
						"Exiting Function DL_Proc_PosCalc with Success\n",
						NULL,
						NULL );
	}
	return(APL_SUCCESS);

	RETURN_FAILURE :
	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE,
						"Exiting Function DL_Proc_PosCalc with Errors\n",
						NULL,
						NULL );
	}
	return(APL_FAILURE); 

}





int DL_Chk_VDPPos( char 	 *chr_p_client,
						char 	 *p_instr_code, 
						char 	 *p_location, 
						char 	 *p_status_ind,
						double  p_quantity,
						char   *p_dt, 
						int    *int_p_enuf,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{

	

	struct sqlca 	sqlca;	
	char				chr_l_now[APL_DATE_LEN] = APL_NULL_STRING;
	char				chr_l_prev_date[APL_DATE_LEN] = APL_NULL_STRING;
	char				chr_l_del_date[APL_DATE_LEN] = APL_NULL_STRING;
	char				chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	char				chr_l_trd_status[RECORD_STAT_LEN]	= APL_NULL_STRING;
	double			l_curr_posn  		= 0.0;
	double			l_start_posn 		= 0.0;
	double			l_new_posn   		= 0.0;
	double			l_startsfk_posn 	= 0.0;
	double			l_starttot_posn 	= 0.0;
	int 				int_l_error_flag   = APL_SUCCESS;
	int				int_l_warning_flag = APL_SUCCESS;
	int				int_cursor_flag = 0; 
	int				int_l_diff = 0;
	int 				int_l_ruclscodechk=0; 

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0; 

	

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
						"Entered Function DL_Chk_VDPPos\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Account is  : %s\n", 
						chr_p_client);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Instrode is   : %s\n", 
						p_instr_code);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Location is : %s\n", 
						p_location);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Status is   : %s\n", 
						p_status_ind);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Quantity is : %f\n", 
						p_quantity);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Date is     : %s\n", 
						p_dt);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,
						NULL,
						NULL);
	}
	
	

	if (!strlen(chr_p_client))
	{
		APL_DATA_MISSING(	"Account", 
								APL_NULL_STRING, 
								APL_NULL_STRING );
		int_l_error_flag = APL_FAILURE;
	}
	if (!strlen(p_instr_code))
	{
		APL_DATA_MISSING(	"Instrurity Code", 
								APL_NULL_STRING, 
								APL_NULL_STRING );
		int_l_error_flag = APL_FAILURE;
	}
	if ((!strlen(p_location)) && (l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y'))
	{
		APL_DATA_MISSING(	"Location", 
								APL_NULL_STRING, 
								APL_NULL_STRING );
		int_l_error_flag = APL_FAILURE;
	}
	if ((!strlen(p_status_ind)) && (l_mt_core_sys_params_struct_h.proc_reg_ind[0] == 'Y'))
	{
		APL_DATA_MISSING(	"Position Status", 
								APL_NULL_STRING, 
								APL_NULL_STRING );
		int_l_error_flag = APL_FAILURE;
	}
	if (!p_quantity)
	{
		APL_DATA_MISSING(	"Quantity", 
								APL_NULL_STRING, 
								APL_NULL_STRING );
		int_l_error_flag = APL_FAILURE;
	}
	if (!strlen(p_dt))
	{
		APL_DATA_MISSING(	"Date", 
								APL_NULL_STRING, 
								APL_NULL_STRING );
		int_l_error_flag = APL_FAILURE;
	}

	if (APL_FAILURE == int_l_error_flag) APL_GOBACK_FAIL

	

	*int_p_enuf = APL_SUCCESS;

	
	

	

	if (APL_FAILURE == CO_RtvSysDt(	chr_l_now,
														l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	if (APL_FAILURE == DL_Proc_RstPmtSkip(p_instr_code, &int_l_ruclscodechk, l_debug_info_ptr))
	   APL_GOBACK_FAIL 
	
	if (APL_FAILURE == DL_Proc_PosCalc(	chr_p_client,
													p_instr_code,
													p_location,
													p_status_ind,
													APL_NULL_STRING,
													"SFK",
													&l_startsfk_posn,"FREE",
													l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	if (APL_FAILURE == DL_Proc_VDPPocCalc(	APL_NULL_STRING,
												chr_l_now,
												chr_p_client,
												p_instr_code,
												p_location,
												p_status_ind,
												&l_startsfk_posn,
												&l_starttot_posn,
												l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	l_start_posn = l_starttot_posn;

	APL_IF_DEBUG
	{
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"Positions as of today : %f\n", 
						l_start_posn);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						NULL);
	}

	

	

	if (APL_FAILURE == CO_Pro_DateComp(	chr_l_now,
												p_dt,
												&int_l_diff,
												l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	if (int_l_diff <= 0)
	{
		l_curr_posn = l_start_posn;
	}
	else
	{
		if (APL_FAILURE == DL_Proc_VDPPocCalc(	chr_l_now,
													p_dt,
													chr_p_client,
													p_instr_code,
													p_location,
													p_status_ind,
													&l_start_posn,
													&l_curr_posn,
													l_debug_info_ptr ))
		{
			APL_GOBACK_FAIL
		}
	}

	APL_IF_DEBUG
	{
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"Positions as of VDP Date : %f\n", 
						l_curr_posn);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						NULL );
	}
	/*
	if ( APL_LESS(l_curr_posn , p_quantity) )
	{
		if (l_mt_core_sys_params_struct_h.vdp_ind[0] == 'N')
		{
			if( int_l_ruclscodechk != 1 ) 
			{
			*int_p_enuf = APL_FAILURE;
			CO_InsertErr(	l_debug_info_ptr,
									ERR_DEAL_NENUF_VDP,
									APL_NULL_STRING,
									APL_NULL_STRING,
									APL_NULL_STRING,
									__LINE__,
									__FILE__ );
			APL_GOBACK_FAIL
			}
		}
		else
		{
			int_l_warning_flag = APL_FAILURE;
		}
	}
	
	*/	

	
	

	strcpy(chr_l_trd_status, APL_NULL_STRING);
	strcpy(chr_l_trd_status, STATUS_DEL_UAUTH);

	

	if ( 	l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y' &&
			l_mt_core_sys_params_struct_h.proc_reg_ind[0] == 'Y' )
	{
		EXEC SQL DECLARE vdpcur_yy CURSOR FOR
		SELECT DISTINCT(GREATEST(VAL_FDT, setl_date)) 
		FROM dl_deal
		WHERE client      = :chr_p_client
		AND	instr_code       = :p_instr_code
		AND	location_cd     = :p_location
		AND	STATUS_POS  = :p_status_ind
		AND	deal_cd IN ('1', '3', '5', '7')
		AND   GREATEST(VAL_FDT, setl_date) > GREATEST(TO_DATE(:p_dt),TO_DATE(:chr_l_now))
		AND   VAL_FDT IS NOT NULL
		AND   INSTRUMENT_DT IS NULL
		AND   DEAL_STAT != :chr_l_trd_status
		ORDER BY GREATEST(VAL_FDT, setl_date);

		EXEC SQL OPEN vdpcur_yy;
		int_cursor_flag = 1;	
	}
	else if ( 	l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'N' &&
					l_mt_core_sys_params_struct_h.proc_reg_ind[0] == 'Y' )
	{
		EXEC SQL DECLARE vdpcur_ny CURSOR FOR
		SELECT DISTINCT(GREATEST(VAL_FDT, setl_date)) 
		FROM dl_deal
		WHERE client     = :chr_p_client
		AND	instr_code      = :p_instr_code
		AND	STATUS_POS = :p_status_ind
		AND	deal_cd IN ('1', '3', '5', '7')
		AND   GREATEST(VAL_FDT, setl_date) > GREATEST(TO_DATE(:p_dt),TO_DATE(:chr_l_now))
		AND   VAL_FDT IS NOT NULL
		AND   INSTRUMENT_DT IS NULL
		AND   DEAL_STAT != :chr_l_trd_status
		ORDER BY GREATEST(VAL_FDT, setl_date);

		EXEC SQL OPEN vdpcur_ny;
		int_cursor_flag = 2;	
	}
	else if ( 	l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y' &&
					l_mt_core_sys_params_struct_h.proc_reg_ind[0] == 'N' )
	{
		EXEC SQL DECLARE vdpcur_yn CURSOR FOR
		SELECT DISTINCT(GREATEST(VAL_FDT, setl_date)) 
		FROM dl_deal
		WHERE client  = :chr_p_client
		AND	instr_code   = :p_instr_code
		AND	location_cd = :p_location
		AND	deal_cd IN ('1', '3', '5', '7')
		AND   GREATEST(VAL_FDT, setl_date) > GREATEST(TO_DATE(:p_dt),TO_DATE(:chr_l_now))
		AND   VAL_FDT IS NOT NULL
		AND   INSTRUMENT_DT IS NULL
		AND   DEAL_STAT != :chr_l_trd_status
		ORDER BY GREATEST(VAL_FDT, setl_date);
	
		EXEC SQL OPEN vdpcur_yn;
		int_cursor_flag = 3;	
	}
	else if ( 	l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'N' &&
					l_mt_core_sys_params_struct_h.proc_reg_ind[0] == 'N' )
	{
		EXEC SQL DECLARE vdpcur_nn CURSOR FOR
		SELECT DISTINCT(GREATEST(VAL_FDT, setl_date)) 
		FROM dl_deal 
		WHERE client  = :chr_p_client
		AND	instr_code   = :p_instr_code
		AND	deal_cd IN ('1', '3', '5', '7')
		AND   GREATEST(VAL_FDT, setl_date) > GREATEST(TO_DATE(:p_dt),TO_DATE(:chr_l_now))
		AND   VAL_FDT IS NOT NULL
		AND   INSTRUMENT_DT IS NULL
		AND   DEAL_STAT != :chr_l_trd_status
		ORDER BY GREATEST(VAL_FDT, setl_date);

		EXEC SQL OPEN vdpcur_nn;
		int_cursor_flag = 4;	
	}

	
	
	IS_ANY_ORA_ERROR;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
						"Opened Cursor for Future Deliver Dates\n",
						NULL,
						NULL);
	}

	strcpy(chr_l_prev_date, p_dt);
	
	for ( ; ; )
	{
		switch(int_cursor_flag)
		{
			case 1 :	EXEC SQL FETCH vdpcur_yy INTO :chr_l_del_date;
						break;
			case 2 :	EXEC SQL FETCH vdpcur_ny INTO :chr_l_del_date;
						break;
			case 3 :	EXEC SQL FETCH vdpcur_yn INTO :chr_l_del_date;
						break;
			case 4 :	EXEC SQL FETCH vdpcur_nn INTO :chr_l_del_date;
						break;
		}

		if ( APL_ZERO_RESULT_SET ) break;
		
		IS_ANY_ORA_ERROR;

		if (APL_FAILURE == DL_Proc_VDPPocCalc(	chr_l_prev_date,
													chr_l_del_date,
													chr_p_client,
													p_instr_code,
													p_location,
													p_status_ind,
													&l_curr_posn,
													&l_new_posn,
													l_debug_info_ptr ))
		{
			APL_GOBACK_FAIL
		}

		APL_IF_DEBUG
		{
			memset( chr_l_buf, NULL, BUFFER_LEN );
			sprintf(		chr_l_buf, 
							"Deliver Date : %s,\n", 
							chr_l_del_date);
			CO_ProcMonitor(	APL_OUT_FILE,
							chr_l_buf,
							NULL,
							NULL);
			memset( chr_l_buf, NULL, BUFFER_LEN );
			sprintf(		chr_l_buf, 
							"Old Position : %f,\n", 
							l_curr_posn);
			CO_ProcMonitor(	APL_OUT_FILE,
							chr_l_buf,
							NULL,
							NULL);
			memset( chr_l_buf, NULL, BUFFER_LEN );
			sprintf(		chr_l_buf, 
							"New Position : %f,\n", 
							l_new_posn);
			CO_ProcMonitor(	APL_OUT_FILE,
							chr_l_buf,
							NULL,
							NULL);
		}

		if ( APL_LESS(l_new_posn , p_quantity) )
		{
			if (l_mt_core_sys_params_struct_h.vdp_ind[0] == 'N')
			{
            
            if( int_l_ruclscodechk != 1 )
            {
					*int_p_enuf = APL_FAILURE;
					CO_InsertErr(	l_debug_info_ptr,
										ERR_DEAL_NENUF_VDP,
										APL_NULL_STRING,
										APL_NULL_STRING,
										APL_NULL_STRING,
										__LINE__,
										__FILE__ );
					APL_GOBACK_FAIL
				}
			}
			else
			{
				int_l_warning_flag = APL_FAILURE;
			}
		}
		l_curr_posn = l_new_posn;
		l_new_posn = 0.0;
		strcpy(chr_l_prev_date, chr_l_del_date);
	}	
	
	switch(int_cursor_flag)
	{
		case 1: 	EXEC SQL CLOSE vdpcur_yy;
					break;
		case 2: 	EXEC SQL CLOSE vdpcur_ny;
					break;
		case 3: 	EXEC SQL CLOSE vdpcur_yn;
					break;
		case 4: 	EXEC SQL CLOSE vdpcur_nn;
					break;
	}

	

	if (int_l_warning_flag == APL_FAILURE)
	{
		*int_p_enuf = APL_FAILURE;
		if (APL_FAILURE == CO_InsertWarning(	l_debug_info_ptr,
															ERR_DEAL_NENUF_VDP,
															APL_NULL_STRING,
															APL_NULL_STRING,
															APL_NULL_STRING,
															__LINE__,
															__FILE__ ))
		{
			APL_GOBACK_FAIL
		}
	}	

	

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function DL_Chk_VDPPos with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);

  	RETURN_FAILURE :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function DL_Chk_VDPPos with errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);
	
}							
		



int DL_Proc_VDPPocCalc(	char *chr_p_startdt,
						char *chr_p_enddt,
						char *chr_p_client,
						char *p_instr_code,
						char *p_loccode,
						char *p_posn_status,
						double *p_start_qty,
						double *p_calc_qty,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr )

{

	

	struct sqlca sqlca;
	short l_i_calc_qty = 0, int_l_error_flg = APL_SUCCESS;
   char chr_l_df[APL_FLAG_LENGTH] = APL_NULL_STRING;
	char chr_l_rf[APL_FLAG_LENGTH] = APL_NULL_STRING;
	char chr_l_dvp[APL_FLAG_LENGTH] = APL_NULL_STRING; 
	char chr_l_rvp[APL_FLAG_LENGTH] = APL_NULL_STRING;
   char chr_l_cd[APL_FLAG_LENGTH] = APL_NULL_STRING;
	char chr_l_cr[APL_FLAG_LENGTH] = APL_NULL_STRING;
	char chr_l_dcd[APL_FLAG_LENGTH] = APL_NULL_STRING; 
	char chr_l_rcr[APL_FLAG_LENGTH] = APL_NULL_STRING;
	char chr_l_buf[BUFFER_LEN]	= APL_NULL_STRING;
	char chr_l_trd_status[RECORD_STAT_LEN] = APL_NULL_STRING;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;
 
	*p_calc_qty = 0;
	chr_l_df[0] = '1';
	chr_l_rf[0] = '2';
	chr_l_dvp[0] = '3';
	chr_l_rvp[0] = '4';
	chr_l_cd[0] = '5';
	chr_l_cr[0] = '6';
	chr_l_dcd[0] = '7';
	chr_l_rcr[0] = '8';

	
	
	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
						"Entering Function DL_Proc_VDPPocCalc\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf, 
					"The VDP Start Date is : %s\n", 
					chr_p_startdt);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The VDP End Date is : %s\n", 
						chr_p_enddt);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The client is : %s\n", 
						chr_p_client);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Instrurity is : %s\n", 
						p_instr_code);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Location is : %s\n", 
						p_loccode);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Position Status is : %s\n", 
						p_posn_status);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Starting Qty is : %f\n", 
						*p_start_qty); 
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
	}

	

	

	if ( !strcmp(chr_p_enddt, APL_NULL_STRING) )
	{
		APL_DATA_MISSING(	"VDP End Date", 
								APL_NULL_STRING, 
								APL_NULL_STRING	);
		int_l_error_flg = APL_FAILURE;
	}
	
	if ( !strcmp(chr_p_client, APL_NULL_STRING) )
	{
		APL_DATA_MISSING(	"Account", 
								APL_NULL_STRING, 
								APL_NULL_STRING	);
		int_l_error_flg = APL_FAILURE;
	}
	
	if ( !strcmp(p_instr_code, APL_NULL_STRING) )
	{
		APL_DATA_MISSING(	"Instrurity", 
								APL_NULL_STRING, 
								APL_NULL_STRING	);
		int_l_error_flg = APL_FAILURE;
	}
	
	if ( 	!strcmp(p_loccode, APL_NULL_STRING) && 
			l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y' )
	{
		APL_DATA_MISSING(	"Location", 
								APL_NULL_STRING, 
								APL_NULL_STRING	);
		int_l_error_flg = APL_FAILURE;
	}
	
	if ( 	!strcmp(p_posn_status, APL_NULL_STRING) &&
			l_mt_core_sys_params_struct_h.proc_reg_ind[0] == 'Y' )
	{
		APL_DATA_MISSING(	"Position Status", 
								APL_NULL_STRING, 
								APL_NULL_STRING	);
		int_l_error_flg = APL_FAILURE;
	}
	
	if ( int_l_error_flg == APL_FAILURE )
	{
		APL_GOBACK_FAIL;
	}

	

	

	strcpy(chr_l_trd_status, APL_NULL_STRING);
	strcpy(chr_l_trd_status, STATUS_DEL_UAUTH);

	if ( 	l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y' &&
			l_mt_core_sys_params_struct_h.proc_reg_ind[0] == 'Y' )
	{
		EXEC SQL SELECT SUM(DECODE(deal_cd,	:chr_l_df,  - QTY,
												 	 	:chr_l_rf,  + QTY,
												 	 	:chr_l_dvp, - QTY,
														:chr_l_rvp, + QTY,
														:chr_l_cd, - QTY,
														:chr_l_cr, + QTY,
														:chr_l_dcd, - QTY,
														:chr_l_rcr, + QTY))
					INTO 	 :p_calc_qty:l_i_calc_qty 
					FROM 	 DL_DEAL
					WHERE  CLIENT = :chr_p_client
					AND 	 INSTR_CODE  = :p_instr_code
					AND 	 LOCATION_CD = :p_loccode
					AND    STATUS_POS = :p_posn_status
					AND  	 ( (  greatest(VAL_FDT, setl_date) > :chr_p_startdt 
									AND :chr_p_startdt IS NOT NULL ) 
									OR ( :chr_p_startdt IS NULL ) )
					AND    greatest(VAL_FDT, setl_date) <= :chr_p_enddt
					AND    VAL_FDT IS NOT NULL
					AND	 INSTRUMENT_DT IS NULL
					AND	 DEAL_STAT != :chr_l_trd_status;
	}
	else if ( 	l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'N' &&
					l_mt_core_sys_params_struct_h.proc_reg_ind[0] == 'Y' )
	{
		EXEC SQL SELECT SUM(DECODE(deal_cd,	:chr_l_df,  - QTY,
												 	 	:chr_l_rf,  + QTY,
												 	 	:chr_l_dvp, - QTY,
														:chr_l_rvp, + QTY,
														:chr_l_cd, - QTY,
														:chr_l_cr, + QTY,
														:chr_l_dcd, - QTY,
														:chr_l_rcr, + QTY))
					INTO 	 :p_calc_qty:l_i_calc_qty 
					FROM 	 DL_DEAL 
					WHERE  CLIENT = :chr_p_client
					AND 	 INSTR_CODE  = :p_instr_code
					AND    STATUS_POS = :p_posn_status
					AND  	 ( (  greatest(VAL_FDT, setl_date) > :chr_p_startdt
									AND :chr_p_startdt IS NOT NULL )
									OR ( :chr_p_startdt IS NULL ) )
					AND    greatest(VAL_FDT, setl_date) <= :chr_p_enddt
					AND    VAL_FDT IS NOT NULL
					AND	 INSTRUMENT_DT IS NULL
					AND	 DEAL_STAT != :chr_l_trd_status;
	}
	else if ( 	l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y' &&
					l_mt_core_sys_params_struct_h.proc_reg_ind[0] == 'N' )
	{
		EXEC SQL SELECT SUM(DECODE(deal_cd,	:chr_l_df,  - QTY,
												 	 	:chr_l_rf,  + QTY,
												 	 	:chr_l_dvp, - QTY,
														:chr_l_rvp, + QTY,
														:chr_l_cd, - QTY,
														:chr_l_cr, + QTY,
														:chr_l_dcd, - QTY,
														:chr_l_rcr, + QTY))
					INTO 	 :p_calc_qty:l_i_calc_qty 
					FROM 	 DL_DEAL 
					WHERE  CLIENT = :chr_p_client
					AND 	 INSTR_CODE  = :p_instr_code
					AND 	 LOCATION_CD = :p_loccode
					AND  	 ( (  greatest(VAL_FDT, setl_date) > :chr_p_startdt
									AND :chr_p_startdt IS NOT NULL )
									OR ( :chr_p_startdt IS NULL ) )
					AND    greatest(VAL_FDT, setl_date) <= :chr_p_enddt
					AND    VAL_FDT IS NOT NULL
					AND	 INSTRUMENT_DT IS NULL
					AND	 DEAL_STAT != :chr_l_trd_status;
	}
	else if ( 	l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'N' &&
					l_mt_core_sys_params_struct_h.proc_reg_ind[0] == 'N' )
	{
		EXEC SQL SELECT SUM(DECODE(deal_cd,	:chr_l_df,  - QTY,
												 	 	:chr_l_rf,  + QTY,
												 	 	:chr_l_dvp, - QTY,
														:chr_l_rvp, + QTY,
														:chr_l_cd, - QTY,
														:chr_l_cr, + QTY,
														:chr_l_dcd, - QTY,
														:chr_l_rcr, + QTY))
					INTO 	 :p_calc_qty:l_i_calc_qty 
					FROM 	 DL_DEAL 
					WHERE  CLIENT = :chr_p_client
					AND 	 INSTR_CODE  = :p_instr_code
					AND  	 ( ( greatest(VAL_FDT, setl_date) > :chr_p_startdt
								  AND :chr_p_startdt IS NOT NULL )
								  OR ( :chr_p_startdt IS NULL ) )
					AND    greatest(VAL_FDT, setl_date) <= :chr_p_enddt
					AND    VAL_FDT IS NOT NULL
					AND	 INSTRUMENT_DT IS NULL
					AND	 DEAL_STAT != :chr_l_trd_status;
	}

	IS_ANY_ORA_ERROR;

	*p_calc_qty = *p_start_qty + *p_calc_qty;

	APL_GOBACK_SUCCESS;

	
	
	RETURN_SUCCESS :
		APL_IF_DEBUG
		{
			memset( chr_l_buf, NULL, BUFFER_LEN ); 
			sprintf(	chr_l_buf, 
						"The Calculated VD Position is : %f\n", 
						*p_calc_qty);
			CO_ProcMonitor(	APL_OUT_FILE,
							chr_l_buf,
							NULL,
							NULL );
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Exiting Function DL_Proc_VDPPocCalc with success\n",
							NULL,
							NULL);
		}
		return(APL_SUCCESS);

	RETURN_FAILURE :
		APL_IF_DEBUG
		{
			memset( chr_l_buf, NULL, BUFFER_LEN ); 
			sprintf(	chr_l_buf, 
						"The Calculated VD Position is : %f\n", 
						*p_calc_qty);
			CO_ProcMonitor(	APL_OUT_FILE,
							chr_l_buf,
							NULL,
							NULL );
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Exiting Function DL_Proc_VDPPocCalc with errors\n",
							NULL,
							NULL);
		}
		return(APL_FAILURE);
}




int DL_Chk_AvlPos(	char *p_client,
							char *p_instrcode,
							char *p_locncode,
							char p_chr_settled, 
							char p_chr_nConfRec, 
							char p_chr_nConfDel, 
							char p_chr_confRec, 
							char p_chr_confDel, 
							char p_chr_dpRec, 
							char p_chr_dpDel, 
							char p_chr_includeBlock, 
							char *p_block_type,
							double *p_availqty,
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr ) 
{
	struct sqlca sqlca;
	double l_h_totquantity = 0;
	short	 l_i_totqty = 0;
	char	 chr_l_buf[BUFFER_LEN];
	int l_i_includeBothDp = 0;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0; 
	strcpy(chr_l_buf, APL_NULL_STRING);

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
						"Entering Function DL_Chk_AvlPos\n",
						NULL,
					   NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf( 	chr_l_buf,
						"The Client Code is : %s\n",
						p_client);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
					   NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf( 	chr_l_buf,
						"The Instrument Code is : %s\n",
						p_instrcode);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
					   NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf,
						"The Location Code is : %s\n",
						p_locncode);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
					   NULL);
	}

	

	if ( !strlen(p_client) )
	{
		APL_DATA_MISSING(	"Client Code",
								APL_NULL_STRING,
								APL_NULL_STRING );
	}

	if ( !strlen(p_instrcode) )
	{
		APL_DATA_MISSING(	"Instrument Code",
								APL_NULL_STRING,
								APL_NULL_STRING );
	}

	if ( !strlen(p_locncode) )
	{
		APL_DATA_MISSING(	"Location Code",
								APL_NULL_STRING,
								APL_NULL_STRING );
	}

	/* DP Code will be always NSDL Or CDSL. Hence this check is not required for Indian Market 
	 CDSL Processing is available now.. Hence following check is not required ...
	if ((strcmp(p_locncode,"NSDL") == 0) || (strcmp(p_locncode,"CDSL") == 0))
	{
		l_i_includeBothDp = 1;
	}
	else
	{
		l_i_includeBothDp = 0;
	}
	*/
		l_i_includeBothDp = 0;
	/**********************************************************************************************
		Passed parameters are : 
				p_chr_settled, 
				p_chr_nConfRec, 
				p_chr_nConfDel, 
				p_chr_confRec, 
				p_chr_confDel, 
				p_chr_dpRec, 
				p_chr_dpDel, 
				p_chr_includeBlock, 
	**************************************************************************************************/
	/*	Addition of SUM condition for includeBlock is N	UAT */
	if ( l_i_includeBothDp == 1)
	{
			if (p_chr_includeBlock == 'N')
			{
				EXEC SQL SELECT SUM(NVL( 
					DECODE(:p_chr_settled,'Y',SAFEKEEP_POS,0)
					+
					DECODE(:p_chr_confRec,'Y',VAL_REC,0)
					-
					DECODE(:p_chr_confDel,'Y',VAL_DEL,0)
					+
					DECODE(:p_chr_nConfRec,'Y',NVALRECEIVE,0)
					-
					DECODE(:p_chr_nConfDel,'Y',NVALDELIVER,0)
					+
					DECODE(:p_chr_dpRec,'Y',DP_REC,0)
					-
					DECODE(:p_chr_dpDel,'Y',DP_DEL,0)
					, 0 ))
					INTO	:l_h_totquantity:l_i_totqty
		            from DL_SAFEK 
					WHERE	CLIENT  = :p_client
					AND	INSTR_CODE	= :p_instrcode
					AND BLOCK_TYPE = :p_block_type;		/** Changed By Biju HDFCCA_036 **/
			}
			else
			{
				EXEC SQL SELECT SUM(NVL( 
					DECODE(:p_chr_settled,'Y',SAFEKEEP_POS,0)
					+
					NVL(DECODE(:p_chr_confRec,'Y',VAL_REC,0),0)
					-
					NVL(DECODE(:p_chr_confDel,'Y',VAL_DEL,0),0)
					+
					NVL(DECODE(:p_chr_nConfRec,'Y',NVALRECEIVE,0),0)
					-
					NVL(DECODE(:p_chr_nConfDel,'Y',NVALDELIVER,0),0)
					+
					NVL(DECODE(:p_chr_dpRec,'Y',DP_REC,0),0)
					-
					NVL(DECODE(:p_chr_dpDel,'Y',DP_DEL,0),0)
					, 0 ))
					INTO	:l_h_totquantity:l_i_totqty
					FROM 	DL_SAFEK
					WHERE	CLIENT  = :p_client
					AND	INSTR_CODE	= :p_instrcode;
			}
	}
	else
	{
			if (p_chr_includeBlock == 'N')
			{
				EXEC SQL SELECT SUM(NVL( 
					DECODE(:p_chr_settled,'Y',SAFEKEEP_POS,0)
					+
					DECODE(:p_chr_confRec,'Y',VAL_REC,0)
					-
					DECODE(:p_chr_confDel,'Y',VAL_DEL,0)
					+
					DECODE(:p_chr_nConfRec,'Y',NVALRECEIVE,0)
					-
					DECODE(:p_chr_nConfDel,'Y',NVALDELIVER,0)
					+
					DECODE(:p_chr_dpRec,'Y',DP_REC,0)
					-
					DECODE(:p_chr_dpDel,'Y',DP_DEL,0)
					, 0 ))
					INTO	:l_h_totquantity:l_i_totqty
		            from DL_SAFEK 
					WHERE	CLIENT  = :p_client
					AND	INSTR_CODE	= :p_instrcode
					AND	LOCATION_CD	= :p_locncode
					AND BLOCK_TYPE = :p_block_type;		/** Changed By Biju HDFCCA_036 **/
			}
			else
			{
				EXEC SQL SELECT SUM(NVL( 
					DECODE(:p_chr_settled,'Y',SAFEKEEP_POS,0)
					+
					NVL(DECODE(:p_chr_confRec,'Y',VAL_REC,0),0)
					-
					NVL(DECODE(:p_chr_confDel,'Y',VAL_DEL,0),0)
					+
					NVL(DECODE(:p_chr_nConfRec,'Y',NVALRECEIVE,0),0)
					-
					NVL(DECODE(:p_chr_nConfDel,'Y',NVALDELIVER,0),0)
					+
					NVL(DECODE(:p_chr_dpRec,'Y',DP_REC,0),0)
					-
					NVL(DECODE(:p_chr_dpDel,'Y',DP_DEL,0),0)
					, 0 ))
					INTO	:l_h_totquantity:l_i_totqty
					FROM 	DL_SAFEK
					WHERE	CLIENT  = :p_client
					AND	INSTR_CODE	= :p_instrcode
					AND	LOCATION_CD	= :p_locncode;
			}
	}

	IS_ANY_ORA_ERROR


	*p_availqty = l_h_totquantity;

	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Leaving Function DL_Chk_AvlPos with success\n",
							NULL,
							NULL);
		}
		return(APL_SUCCESS);

	RETURN_FAILURE :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Leaving Function DL_Chk_AvlPos with errors\n",
							NULL,
							NULL);
		}
		return(APL_FAILURE);
}




int DL_Chk_TrCdInstr(	char *p_instr_code, 
							char p_dealcd, 
							char *int_p_retval, 
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	

	struct sqlca sqlca;	
	char chr_l_h_candf[APL_FLAG_LENGTH] 	= APL_NULL_STRING;
	char chr_l_h_canrf[APL_FLAG_LENGTH] 	= APL_NULL_STRING;
	char chr_l_h_candvp[APL_FLAG_LENGTH] = APL_NULL_STRING;  
	char chr_l_h_canrvp[APL_FLAG_LENGTH] = APL_NULL_STRING; 
	char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	short l_i_candf 	= 0; 
	short	l_i_canrf   = 0; 
	short	l_i_candvp  = 0;
	short	l_i_canrvp  = 0;
	int int_l_error_flag = APL_SUCCESS;


	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
						"Entered Function DL_Chk_TrCdInstr\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Instrurity Code is : %s\n", 
						p_instr_code);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Trcode is : %c\n", 
						p_dealcd);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
	}

	
	

	if (!strlen(p_instr_code))
	{
		APL_DATA_MISSING("Instrurity", APL_NULL_STRING, APL_NULL_STRING);
		int_l_error_flag = APL_FAILURE;
	} 
	if (p_dealcd == NULL)
	{
		APL_DATA_MISSING("Txn. Code", APL_NULL_STRING, APL_NULL_STRING);
		int_l_error_flag = APL_FAILURE;
	} 

	if (APL_FAILURE == int_l_error_flag) APL_GOBACK_FAIL

	

	EXEC SQL SELECT ALLOW_DF, ALLOW_RF, ALLOW_DVP, ALLOW_RVP 
	INTO 	:chr_l_h_candf:l_i_candf, 
			:chr_l_h_canrf:l_i_canrf, 
			:chr_l_h_candvp:l_i_candvp, 
			:chr_l_h_canrvp:l_i_canrvp 
	FROM MT_INSTRUMENT 
	WHERE INSTR_CODE = :p_instr_code;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_VAL_NF, 
														APL_NULL_STRING, 
														APL_NULL_STRING, 
														APL_NULL_STRING );
 
	if (p_dealcd == '1') *int_p_retval = chr_l_h_candf[0];
	if (p_dealcd == '2') *int_p_retval = chr_l_h_canrf[0];
	if (p_dealcd == '3') *int_p_retval = chr_l_h_candvp[0];
	if (p_dealcd == '4') *int_p_retval = chr_l_h_canrvp[0];

	if (p_dealcd == '5' || p_dealcd == '6' || p_dealcd == '7' || p_dealcd == '8')
		*int_p_retval = 'Y';

	
	
	
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Leaving Function DL_Chk_TrCdInstr with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);

	RETURN_FAILURE :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Leaving Function DL_Chk_TrCdInstr with errors\n",
							l_debug_info_ptr,
							NULL);
		}
      return(APL_FAILURE);

}





int DL_Chk_FXAcc(	char *p_client, 
							char p_trcode, 
							char *p_fxrqflg, 
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	

	struct sqlca sqlca;	
	int int_l_error_flg = APL_SUCCESS;
	char chr_l_h_fxflg[APL_FLAG_LENGTH] = APL_NULL_STRING;
	char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	short l_i_fxflg = 0;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
						"Entered Function DL_Chk_FXAcc\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf, 
					"The Account Number is : %s\n", 
					p_client);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf, 
					"The Trcode is : %c\n", 
					p_trcode);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
	}
	
	

	if (!strlen(p_client))
	{
		APL_DATA_MISSING(	"Account", 
								APL_NULL_STRING, 
								APL_NULL_STRING);
		int_l_error_flg = APL_FAILURE;
	} 
	if (p_trcode == NULL)
	{
		APL_DATA_MISSING(	"Txn. Code", 
								APL_NULL_STRING, 
								APL_NULL_STRING);
		int_l_error_flg = APL_FAILURE;
	} 

	if (APL_FAILURE == int_l_error_flg ) 
	{
		APL_GOBACK_FAIL;
	}

	

	if ( l_mt_message_sys_params_struct_h.gen_fx_adv_ind[0] == 'Y' )
	{
		if ( p_trcode == '3' || p_trcode == '7' )
		{ 
			EXEC SQL SELECT CLN_FX_SELL_IND 
					INTO :chr_l_h_fxflg:l_i_fxflg 
					FROM MT_CLIENT 
					WHERE cln_code = :p_client;
		}
		else if ( p_trcode == '4' || p_trcode == '8' )
		{
			EXEC SQL SELECT CLN_FX_BUY_IND 
					INTO :chr_l_h_fxflg:l_i_fxflg 
					FROM MT_CLIENT 
					WHERE cln_code = :p_client;
		}
		else
		{
			*p_fxrqflg = 'N';
			APL_GOBACK_SUCCESS;		
		}
		
		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_ACCNOT_FND, 
															APL_NULL_STRING, 
															APL_NULL_STRING, 
															APL_NULL_STRING);
		if ( chr_l_h_fxflg[0] == 'Y'  )
		{
			*p_fxrqflg = 'Y';
			APL_GOBACK_SUCCESS;
		}
		else
		{
			*p_fxrqflg = 'N';
			APL_GOBACK_SUCCESS;
		} 
	}
	else
	{	
		*p_fxrqflg = 'N';
		APL_GOBACK_SUCCESS;
	}	
 
	
	
   RETURN_SUCCESS :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function DL_Chk_FXAcc with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);

   RETURN_FAILURE :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function DL_Chk_FXAcc with errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);

}





int DL_Chk_LRRefTrd(	char	*chr_p_client,
								char	*chr_p_refno,
								char *p_locident, 
								short *p_locrefexists, 
								DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	

	struct sqlca sqlca;
	short l_h_locrefcnt = 0;
	short l_i_locrefcnt = 0;
	int	int_l_error_flg   = APL_SUCCESS;
	char 	chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	
	
	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
						"Entered Function DL_Chk_LRRefTrd\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Account is : %s\n", 
						chr_p_client);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Trade Ref Number is : %s\n", 
						chr_p_refno);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Local Ref Number is : %s\n", 
						p_locident);
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						NULL);
	}

	if ( !strcmp(p_locident, APL_NULL_STRING) )
	{
      APL_DATA_MISSING(	"Local Ref No.",
								APL_NULL_STRING,
								APL_NULL_STRING);
		int_l_error_flg = APL_FAILURE;
	}

	if ( int_l_error_flg == APL_FAILURE )
	{
		APL_GOBACK_FAIL;
	}

	
	
	if ((strlen(chr_p_client)) && (strlen(chr_p_refno)))
	{
		EXEC SQL SELECT NVL(count(*),0) 
				INTO 	:l_h_locrefcnt:l_i_locrefcnt 
				FROM 	DL_DEAL 
				WHERE client != RTRIM(:chr_p_client)
				AND	IDENTIY_NO	  != RTRIM(:chr_p_refno)
				AND   lcl_identno = RTRIM(:p_locident) ;
	}
	else
	{
		EXEC SQL SELECT NVL(count(*),0) 
				INTO 	:l_h_locrefcnt:l_i_locrefcnt 
				FROM 	DL_DEAL 
				WHERE lcl_identno = RTRIM(:p_locident) ;
	}

	IS_ANY_ORA_ERROR

	*p_locrefexists = l_h_locrefcnt;

	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function DL_Chk_LRRefTrd with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);
 
	RETURN_FAILURE :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function DL_Chk_LRRefTrd with errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);

}



int DL_Rtv_TrdRprChrVal(	int 	*int_p_trdrepseqnum,
								char 	*p_ind,
								char	*int_p_retval,
								DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{
	struct sqlca sqlca;
	
	char 	chr_l_h_retval[40] = APL_NULL_STRING;
	char	chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	short	l_i_retval = 0;
	int	int_l_error_flg = APL_SUCCESS;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;
	EXEC SQL VAR chr_l_h_retval IS STRING;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE,
						"Entering Function DL_Rtv_TrdRprChrVal\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf( chr_l_buf,
					"The Trade Repair Sequence Number is: %d\n",
					*int_p_trdrepseqnum );
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf,
					"The Field Value to be retrieved is : %s\n",
					p_ind );
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,	
						NULL,
						NULL);
	}

	

	if ( *int_p_trdrepseqnum == 0 )
	{
		APL_DATA_MISSING(	"Trade Sequence Num",
								APL_NULL_STRING,
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	}

	if( !strlen(p_ind) )
	{
		APL_DATA_MISSING(	"Field Indicator",
								APL_NULL_STRING,
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	}

	if ( int_l_error_flg == APL_FAILURE )
	{
		APL_GOBACK_FAIL;
	}

	if ( !strcmp( p_ind, "access_stamp" ) )
	{
		EXEC SQL SELECT ACCESS_STAMP
					INTO	:chr_l_h_retval:l_i_retval
					FROM 	DL_DEALREPAIR
					WHERE DL_REP_IDENTNO = :int_p_trdrepseqnum
					FOR UPDATE OF ACCESS_STAMP;
	}

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_DEAL_NF,
														"Repair Trade",
														APL_NULL_STRING,
														APL_NULL_STRING );

	strcpy(int_p_retval, chr_l_h_retval);

	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function DL_Rtv_TrdRprChrVal with success\n",
							NULL,
							NULL );
		}
		return(APL_SUCCESS);

	RETURN_FAILURE :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function DL_Rtv_TrdRprChrVal with errors\n",
							NULL,
							NULL );
		}
		return(APL_FAILURE); 

}




int DL_Proc_MPPrnt(	DL_MANIPRNT_STRUCT_H		*p_dl_maniprnt_struct_h,
							char						*chr_p_now,
							FILE						*p_logfile,
							INTL_ENV_DATA_STRUCT_H	*p_intl_envdatastruct_h,
							DEBUG_INFO_STRUCT_H			**l_debug_info_ptr )
{
	

	char		chr_l_buf[BUFFER_LEN]							= APL_NULL_STRING;
	char		chr_l_inifile[PATH_LENGTH]					= APL_NULL_STRING;
	char		chr_l_h_trdt_a[APL_DATE_LEN]					= APL_NULL_STRING;
	char		chr_l_h_settledt_a[APL_DATE_LEN]				= APL_NULL_STRING;
	char		chr_l_h_domcpac[APL_CLIENT_LENGTH]			= APL_NULL_STRING;
	char		chr_l_h_countacc_a[APL_COUNTACC_LEN]		= APL_NULL_STRING;  
	char		chr_l_h_locrefno_a[APL_TXNREFNO_LEN]		= APL_NULL_STRING;
	char		chr_l_h_trcode_a[APL_FLAG_LENGTH]				= APL_NULL_STRING;
	char		chr_l_h_instrcode_A[APL_INSTRUMENTCODE_LEN]				= APL_NULL_STRING;
	char		chr_l_h_isspottrd[APL_FLAG_LENGTH]			= APL_NULL_STRING;
	char		chr_l_h_locncode_a[APL_LOCNCODE_LENGTH]		= APL_NULL_STRING;
	char		chr_l_h_posn_status[STATUS_POS_LEN]	= APL_NULL_STRING;
	char		chr_l_h_ccycode[APL_CCYCODE_LEN]			= APL_NULL_STRING;
	char		chr_l_h_cname[CNAME_LEN_A]					= APL_NULL_STRING;
	char		chr_l_h_countaccnm[CNAME_LEN_A]			= APL_NULL_STRING;
	char		chr_l_h_clhclient[CLH_CLIENT_LEN_A]		= APL_NULL_STRING;
	char		chr_l_h_regname[REG_NAME_LEN]				= APL_NULL_STRING;
	char		chr_l_h_shortname[SHORT_NAME_LEN]		= APL_NULL_STRING;
	char		chr_l_h_cpcname[CNAME_LEN_A]				= APL_NULL_STRING;
	char		chr_l_h_instrdesc[INSTR_NAME_LEN_D]				= APL_NULL_STRING;
	char		chr_l_h_certofownflg[APL_FLAG_LENGTH]		= APL_NULL_STRING;
	char		chr_l_h_locndesc[LOCDET_LEN]			= APL_NULL_STRING;
	char		chr_l_h_trdesc[DEALDET_LEN]				= APL_NULL_STRING;
	char		chr_l_h_posn_desc[POS_DET_LEN]			= APL_NULL_STRING;
	char		chr_l_tmp[PATH_LENGTH]						= APL_NULL_STRING;
	char		chr_l_date[11]									= APL_NULL_STRING;
	char		chr_l_posn_arr[6][POS_DET_LEN]			= {	APL_NULL_STRING,
																		APL_NULL_STRING,
																		APL_NULL_STRING,
																		APL_NULL_STRING,
																		APL_NULL_STRING,
																		APL_NULL_STRING };
	char		chr_l_chr_qty[27]								= APL_NULL_STRING;
	char		chr_l_chr_amount[20]							= APL_NULL_STRING;
	char		chr_l_h_note1[66]								= APL_NULL_STRING;
	
	char		chr_l_h_tmpoutdt[APL_DATE_LEN]				= APL_NULL_STRING;
	char		chr_l_h_tmpretdt[APL_DATE_LEN]				= APL_NULL_STRING;

	int		int_l_h_ccy_decimallen = 0;

	double	l_h_quantity_a				= 0.0;
	double	chr_l_h_amount			= 0.0;
	double	l_round_quantity			= 0.0;
	double	l_round_amount		= 0.0;

	short		l_i_trdt				= 0;
	short		l_i_settledt		= 0;
	short		l_i_domcpac			= 0;
	short		l_i_countacc		= 0;
	short		l_i_locrefno		= 0;
	short		int_l_i_trcode			= 0;
	short		l_i_instr_code			= 0;
	short		l_i_isspottrd		= 0;
	short		l_i_locncode		= 0;
	short		l_i_posn_status	= 0;
	short		l_i_ccycode			= 0;
	short		int_l_i_qty				= 0;
	short		l_i_amount			= 0;
	short		l_i_cname			= 0;
	short		l_i_clhaccount		= 0;
	short		l_i_regname			= 0;
	short		l_i_shortname		= 0;
	short		l_i_cpcname			= 0;
	short		l_i_instr_name			= 0;
	short		l_i_certofownflg	= 0;
	short		l_i_locndesc		= 0;
	short		l_i_trdesc			= 0;
	short		l_i_posn_desc		= 0;
	short		int_l_flag				= 0;
	short		l_i_countaccnm		= 0;
	short		l_i_note1			= 0;
	
	short		l_i_tmpoutdt		= 0;
	short		l_i_tmpretdt		= 0;

	FILE		*l_manfile 	= NULL;
	FILE		*l_fptr		= NULL;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	
	
	EXEC SQL VAR chr_l_h_trdt_a IS STRING;
	EXEC SQL VAR chr_l_h_settledt_a IS STRING;
	EXEC SQL VAR chr_l_h_domcpac IS STRING;
	EXEC SQL VAR chr_l_h_countacc_a IS STRING;
	EXEC SQL VAR chr_l_h_locrefno_a IS STRING;
	EXEC SQL VAR chr_l_h_trcode_a IS STRING;
	EXEC SQL VAR chr_l_h_instrcode_A IS STRING;
	EXEC SQL VAR chr_l_h_isspottrd IS STRING;
	EXEC SQL VAR chr_l_h_locncode_a IS STRING;
	EXEC SQL VAR chr_l_h_posn_status IS STRING;
	EXEC SQL VAR chr_l_h_ccycode IS STRING;
	EXEC SQL VAR chr_l_h_cname IS STRING;
	EXEC SQL VAR chr_l_h_clhclient IS STRING;
	EXEC SQL VAR chr_l_h_regname IS STRING;
	EXEC SQL VAR chr_l_h_shortname IS STRING;
	EXEC SQL VAR chr_l_h_cpcname IS STRING;
	EXEC SQL VAR chr_l_h_instrdesc IS STRING;
	EXEC SQL VAR chr_l_h_certofownflg IS STRING;
	EXEC SQL VAR chr_l_h_locndesc IS STRING;
	EXEC SQL VAR chr_l_h_trdesc IS STRING;
	EXEC SQL VAR chr_l_h_posn_desc IS STRING;
	EXEC SQL VAR chr_l_h_countaccnm IS STRING;
	EXEC SQL VAR chr_l_h_tmpoutdt		IS STRING;
	EXEC SQL VAR chr_l_h_tmpretdt		IS STRING;

	memset(chr_l_h_tmpoutdt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(chr_l_h_tmpretdt, APL_NULL_CHAR, APL_DATE_LEN);

	

	if (p_logfile != NULL)
	{
		#ifdef SYS_DEBUG 
			CO_ProcMonitor(	p_logfile, 
							"Entered Function DL_Proc_MPPrnt\n",
							NULL,
							NULL);
			memset( chr_l_buf, NULL, BUFFER_LEN );
			sprintf(	chr_l_buf, 
						"The Account is : %s",
						p_dl_maniprnt_struct_h->h_dl_client);
			CO_ProcMonitor(	p_logfile, 
							chr_l_buf,	
							NULL,
							NULL);
			memset( chr_l_buf, NULL, BUFFER_LEN );
			sprintf( chr_l_buf,
						"The Refno is : %s\n",
						p_dl_maniprnt_struct_h->h_indentity_no);
			CO_ProcMonitor(	p_logfile, 
							chr_l_buf,	
							NULL,
							NULL);
			memset( chr_l_buf, NULL, BUFFER_LEN );
			sprintf(	chr_l_buf,
						"The Ticket type is : %s\n",
						p_dl_maniprnt_struct_h->h_tktclass);
			CO_ProcMonitor(	p_logfile, 
							chr_l_buf,	
							NULL,
							NULL);
			memset( chr_l_buf, NULL, BUFFER_LEN );
			sprintf( chr_l_buf,
						"The Duplicate Flag is : %s\n",
						p_dl_maniprnt_struct_h->h_dupl);
			CO_ProcMonitor(	p_logfile, 
							chr_l_buf,	
							NULL,
							NULL);
			memset( chr_l_buf, NULL, BUFFER_LEN );
			sprintf( chr_l_buf,
						"The Serial No. is : %d\n",
						p_dl_maniprnt_struct_h->h_srl_no);
			CO_ProcMonitor(	p_logfile, 
							chr_l_buf,	
							NULL,
							NULL);
			memset( chr_l_buf, NULL, BUFFER_LEN );
			sprintf( chr_l_buf,
						"The Quantity is : %lf\n",
						p_dl_maniprnt_struct_h->h_qty);
			CO_ProcMonitor(	p_logfile, 
							chr_l_buf,	
							NULL,
							NULL);
		#endif	
	}

	

	

	EXEC SQL SELECT 	deal_date, setl_date, domestic_cpclt, cp_clt,
							lcl_identno, deal_cd, instr_code, SPOTTRD_IND,
							location_cd, STATUS_POS, QTY, currency_cd,
							NVL(AMOUNT,0), CP_CLTNAME, substr(INFO1, 1, 65),
							TMP_OUT_DT, TMP_OUT_DATE
	INTO	:chr_l_h_trdt_a:l_i_trdt,
			:chr_l_h_settledt_a:l_i_settledt,
			:chr_l_h_domcpac:l_i_domcpac,
			:chr_l_h_countacc_a:l_i_countacc,
			:chr_l_h_locrefno_a:l_i_locrefno,
			:chr_l_h_trcode_a:int_l_i_trcode,
			:chr_l_h_instrcode_A:l_i_instr_code,
			:chr_l_h_isspottrd:l_i_isspottrd,
			:chr_l_h_locncode_a:l_i_locncode,
			:chr_l_h_posn_status:l_i_posn_status,
			:l_h_quantity_a:int_l_i_qty,
			:chr_l_h_ccycode:l_i_ccycode,
			:chr_l_h_amount:l_i_amount,
			:chr_l_h_countaccnm:l_i_countaccnm,
			:chr_l_h_note1:l_i_note1,
			:chr_l_h_tmpoutdt:l_i_tmpoutdt,
			:chr_l_h_tmpretdt:l_i_tmpretdt
	FROM DL_DEAL
	WHERE client	= 	RTRIM(:p_dl_maniprnt_struct_h->h_dl_client)
	AND	IDENTIY_NO		=  RTRIM(:p_dl_maniprnt_struct_h->h_indentity_no);

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_DEAL_NF,
														p_dl_maniprnt_struct_h->h_dl_client,
														p_dl_maniprnt_struct_h->h_indentity_no,
														APL_NULL_STRING );

	

	EXEC SQL SELECT cln_name, CLN_CLH, CLN_REG_NAME, CLN_SHORTNM
	INTO	:chr_l_h_cname:l_i_cname,
			:chr_l_h_clhclient:l_i_clhaccount,
			:chr_l_h_regname:l_i_regname,
			:chr_l_h_shortname:l_i_shortname
	FROM MT_CLIENT
	WHERE cln_code = RTRIM(:p_dl_maniprnt_struct_h->h_dl_client);

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_ACCNOT_FND,
														p_dl_maniprnt_struct_h->h_dl_client,
														APL_NULL_STRING,
														APL_NULL_STRING );

	if (!strcmp(chr_l_h_domcpac, l_mt_core_sys_params_struct_h.custody_clt_cd))
	{
		if ( strlen(chr_l_h_countacc_a))
		{
          
			EXEC SQL SELECT cln_name 
			INTO	:chr_l_h_cpcname:l_i_cpcname
			FROM MT_CLIENT
			WHERE cln_code = RTRIM(rtrim(SUBSTR(:chr_l_h_countacc_a,1,11-1)));

			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_ACCNOT_FND,
																chr_l_h_countacc_a,
																APL_NULL_STRING,
																APL_NULL_STRING );
		}
		else
		{
			strcpy( chr_l_h_cpcname, chr_l_h_countaccnm );
		}
	}
	else
	{
		EXEC SQL SELECT cln_name 
		INTO	:chr_l_h_cpcname:l_i_cpcname
		FROM MT_CLIENT
		WHERE cln_code = RTRIM(:chr_l_h_domcpac);

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_ACCNOT_FND,
															chr_l_h_domcpac,
															APL_NULL_STRING,
															APL_NULL_STRING );
	}

	

	EXEC SQL SELECT instr_name, CERT_OF_OWN_IN
	INTO	:chr_l_h_instrdesc:l_i_instr_name,
			:chr_l_h_certofownflg:l_i_certofownflg
	FROM MT_INSTRUMENT
	WHERE instr_code = RTRIM(:chr_l_h_instrcode_A);

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_INSTR_NOTFND,
														chr_l_h_instrcode_A,
														APL_NULL_STRING,
														APL_NULL_STRING);

	

	if (l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y')
	{
		EXEC SQL SELECT LOCATION_DESC
		INTO :chr_l_h_locndesc:l_i_locndesc
		FROM MT_LOCATION
		WHERE location_cd = RTRIM(:chr_l_h_locncode_a);

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_LOCN_NOTFND,
															chr_l_h_locncode_a,
															APL_NULL_STRING,
															APL_NULL_STRING);
	}

	

	EXEC SQL SELECT map_desc
	INTO :chr_l_h_trdesc:l_i_trdesc
	FROM PRO_SGENSTAT
	WHERE map_type = 'TRCODE'
	AND	map_val = RTRIM(:chr_l_h_trcode_a);

	IS_ANY_ORA_ERROR

	EXEC SQL SELECT map_desc
	INTO :chr_l_h_posn_desc:l_i_posn_desc
	FROM PRO_SGENSTAT
	WHERE map_type = 'POSN_STATUS'
	AND 	map_val = RTRIM(:chr_l_h_posn_status);

	IS_ANY_ORA_ERROR

	EXEC SQL SELECT map_desc
	INTO :chr_l_posn_arr
	FROM PRO_SGENSTAT
	WHERE map_type = 'POSN_STATUS'
	ORDER BY map_type;

	IS_ANY_ORA_ERROR

	

	

	if(!(l_fptr=fopen(strcat(strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH")),
                                     	             "intl_sun.cfg"),"r")))
	{
   	APL_GOBACK_FAIL
	}

	memset(chr_l_buf, NULL, BUFFER_LEN);
	if(CO_ReadToken(l_fptr,"INTL_REP_PATH",chr_l_buf,l_debug_info_ptr)==APL_FAILURE)
	{
      APL_GOBACK_FAIL
	}

	

	strcpy(chr_l_tmp, chr_l_buf);
	strncat(chr_l_tmp,p_intl_envdatastruct_h->usr, 4);
	chr_l_tmp[strlen(chr_l_tmp)] = '\0';
	sprintf(chr_l_tmp, "%s%ld.man", chr_l_tmp, random());//AIX Warning Removal

	

	l_manfile = fopen(chr_l_tmp, "w");
	if (l_manfile == NULL) APL_GOBACK_FAIL

	

	strncpy(chr_l_date, chr_p_now, 10);
	chr_l_date[10] = '\0';

	fprintf(	l_manfile, 
				"%s                %s                %s\n\n", 
				chr_l_date, 
				g_mt_commonsys_params_struct_h.ca_identname, 
				(chr_p_now + 11) );


	if (p_dl_maniprnt_struct_h->h_tktclass[0] == TKTTYPE_REC)
	{
		fprintf(l_manfile, "                      RECEIVE TICKET");
	}
	else if (p_dl_maniprnt_struct_h->h_tktclass[0] == TKTTYPE_DEL)
	{
		fprintf(l_manfile, "                      DELIVER TICKET");
	}
	else if (p_dl_maniprnt_struct_h->h_tktclass[0] == TEMP_OUTTKT_IND)
	{
		fprintf(l_manfile, "                      TEMP OUT TICKET");
	}
	else if (p_dl_maniprnt_struct_h->h_tktclass[0] == TEMP_RET_IND)
	{
		fprintf(l_manfile, "                    TEMP RETURN TICKET");
	}

	if (p_dl_maniprnt_struct_h->h_dupl[0] == 'Y')
	{
		fprintf(l_manfile, "  (DUPLICATE)\n\n");
	}
	else
	{
		fprintf(l_manfile, "\n\n");
	}

	fprintf(l_manfile, "Account No.             %s", p_dl_maniprnt_struct_h->h_dl_client);

	if (APL_FAILURE == CO_Chk_CntryEnabled(	"TRD_MANIFOLD",
														"PRN_CDCACC_MANIF",
														&int_l_flag,
														l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	if (int_l_flag)
	{
		fprintf(l_manfile, "    CDC A/c  %s\n", chr_l_h_clhclient);
	}
	else
	{
		fprintf(l_manfile, "\n");
	}

	fprintf(l_manfile, "Account Name            %s\n", chr_l_h_cname);
	fprintf(l_manfile, "Reg. Name               %s\n", chr_l_h_regname);
	fprintf(l_manfile, "Short Name              %s\n", chr_l_h_shortname);

	if ((p_dl_maniprnt_struct_h->h_tktclass[0] == TKTTYPE_REC) ||
		 (p_dl_maniprnt_struct_h->h_tktclass[0] == TKTTYPE_DEL))
	{
		memset(chr_l_date, NULL, 11);
		strncpy(chr_l_date, chr_l_h_trdt_a, 10);
		chr_l_date[10] = '\0';
		fprintf(l_manfile, "Instruction Date        %s", chr_l_date);
		memset(chr_l_date, NULL, 11);
		strncpy(chr_l_date, chr_l_h_settledt_a, 10);
		chr_l_date[10] = '\0';
		fprintf(l_manfile, "               Settlement Date   %s\n", chr_l_date);
	}

	if (!strcmp(chr_l_h_domcpac, l_mt_core_sys_params_struct_h.custody_clt_cd))
	{
		fprintf(l_manfile, "Counterparty A/c No.    %s\n", chr_l_h_countacc_a);
	}
	else
	{
		fprintf(l_manfile, "Counterparty A/c No.    %s\n", chr_l_h_domcpac);
	}

	fprintf(l_manfile, "Counterparty Name       %s\n", chr_l_h_cpcname);

	

	fprintf(l_manfile, "Wording                 %s\n", chr_l_h_note1);

	fprintf(l_manfile, "Cust. Ref. No.          %s\n", p_dl_maniprnt_struct_h->h_indentity_no);
	fprintf(l_manfile, "Local Ref. No.          %s", chr_l_h_locrefno_a);

	if (((p_dl_maniprnt_struct_h->h_tktclass[0] == TEMP_OUTTKT_IND) ||
		  (p_dl_maniprnt_struct_h->h_tktclass[0] == TEMP_RET_IND)) &&
		 (l_mt_core_sys_params_struct_h.part_reg_ind[0] == 'Y'))
	{
		fprintf(l_manfile, "          / %d\n", p_dl_maniprnt_struct_h->h_srl_no);
	}
	else
	{
		fprintf(l_manfile, "\n");
	}

	if ((p_dl_maniprnt_struct_h->h_tktclass[0] == TKTTYPE_REC) ||
		 (p_dl_maniprnt_struct_h->h_tktclass[0] == TKTTYPE_DEL))
	{
		fprintf(l_manfile, "Transaction Code        %s  %3s             ", chr_l_h_trcode_a, chr_l_h_trdesc);
		fprintf(l_manfile, "      Instrurity No.      %s\n", chr_l_h_instrcode_A);
	}
	else if (p_dl_maniprnt_struct_h->h_tktclass[0] == TEMP_OUTTKT_IND)
	{
		
		strtok(chr_l_h_tmpoutdt, " ");
		if(p_dl_maniprnt_struct_h->h_dupl[0] == 'Y')
			fprintf(l_manfile, "Temp Out Date           %s\n", chr_l_h_tmpoutdt);
		else
			fprintf(l_manfile, "Temp Out Date           %s\n", chr_l_date);
		
		fprintf(l_manfile, "Instrurity No.            %s\n", chr_l_h_instrcode_A);
	}
	else if (p_dl_maniprnt_struct_h->h_tktclass[0] == TEMP_RET_IND)
	{
		
		strtok(chr_l_h_tmpretdt, " ");
		if(p_dl_maniprnt_struct_h->h_dupl[0] == 'Y')
			fprintf(l_manfile, "Temp Return Date        %s\n", chr_l_h_tmpretdt);
		else
			fprintf(l_manfile, "Temp Return Date        %s\n", chr_l_date);
	
		fprintf(l_manfile, "Instrurity No.            %s\n", chr_l_h_instrcode_A);
	}

	fprintf(l_manfile, "Instrurity Name           %.50s\n", chr_l_h_instrdesc);

	if ((p_dl_maniprnt_struct_h->h_tktclass[0] == TKTTYPE_REC) ||
		 (p_dl_maniprnt_struct_h->h_tktclass[0] == TKTTYPE_DEL))
	{
		if (l_mt_core_sys_params_struct_h.proc_spot_dl_ind[0] == 'Y')
		{
			fprintf(l_manfile, "Spot Trade              %s\n", chr_l_h_isspottrd);
		}
	}
	else
	{
		int_l_flag = 0;
		if (APL_FAILURE == CO_Chk_CntryEnabled(	"TRD_MANIFLD",
															"PRN_CERTOWN_MANIF",
															&int_l_flag,
															l_debug_info_ptr ))
		{
			APL_GOBACK_FAIL
		}
		
		if ((int_l_flag) &&
			 (chr_l_h_certofownflg[0] == 'Y'))
		{
			fprintf(l_manfile, "ATTN : MUST SEND CERTIFICATE OF OWNERSHIP\n");
		}	
	}

	if (l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y')
	{
		fprintf(l_manfile, "Instrurity Location :     %s  %s\n", chr_l_h_locncode_a, chr_l_h_locndesc);
	}

	if (l_mt_core_sys_params_struct_h.proc_reg_ind[0] == 'Y')
	{
		if (p_dl_maniprnt_struct_h->h_tktclass[0] == TKTTYPE_DEL)
		{
			fprintf(l_manfile, "Instructed Position\n");
			fprintf(l_manfile, "For Delivery            %s  %s\n", chr_l_h_posn_status, chr_l_h_posn_desc);
			fprintf(l_manfile, "                                Delivery Details \n");
			fprintf(l_manfile, "Code		        Description\n");
			fprintf(l_manfile, "000			%s ____________________________\n", chr_l_posn_arr[0]);
			fprintf(l_manfile, "001			%s ____________________________\n", chr_l_posn_arr[1]);
			fprintf(l_manfile, "003			%s ____________________________\n", chr_l_posn_arr[3]);
		}
		else if (p_dl_maniprnt_struct_h->h_tktclass[0] == TKTTYPE_REC)
		{
			fprintf(l_manfile, "Receive Into Position   %s  %s\n", chr_l_h_posn_status, chr_l_h_posn_desc);
		}
	}

	if ((p_dl_maniprnt_struct_h->h_tktclass[0] == TKTTYPE_REC) ||
		 (p_dl_maniprnt_struct_h->h_tktclass[0] == TKTTYPE_DEL))
	{
		CR_Proc_InstrQtyRound( l_h_quantity_a, chr_l_h_instrcode_A, &l_round_quantity,l_debug_info_ptr );
		CR_Proc_InstrQtyRoundToStr( l_round_quantity, 26, chr_l_h_instrcode_A, chr_l_chr_qty, l_debug_info_ptr );
		fprintf(l_manfile, "Quantity Of Instr.        %s\n", (strrchr(chr_l_chr_qty,' ') + 1));
		if (VAL_VP_DEAL(chr_l_h_trcode_a[0]))
		{
			EXEC SQL SELECT DEC_LEN
						INTO	 :int_l_h_ccy_decimallen
						FROM	 DL_CURRENCY
						WHERE	 CURRENCY_CD = :chr_l_h_ccycode;

			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_CCY_NOTFND,
															  	chr_l_h_ccycode,
																APL_NULL_STRING,
																APL_NULL_STRING );

			CO_Round( chr_l_h_amount, int_l_h_ccy_decimallen, &l_round_amount );
			CO_ToStr( l_round_amount, 19, int_l_h_ccy_decimallen, chr_l_chr_amount );

			fprintf(l_manfile, "Counter Value (%3s)     %s\n", chr_l_h_ccycode, (strrchr(chr_l_chr_amount,' ') + 1));
		}
	}
	else
	{
		CR_Proc_InstrQtyRound( p_dl_maniprnt_struct_h->h_qty, chr_l_h_instrcode_A, &l_round_quantity, l_debug_info_ptr );
		CR_Proc_InstrQtyRoundToStr( l_round_quantity, 26, chr_l_h_instrcode_A, chr_l_chr_qty, l_debug_info_ptr );
		fprintf(l_manfile, "Quantity Of Instr.        %s\n", (strrchr(chr_l_chr_qty,' ') + 1));
	}

	if (p_dl_maniprnt_struct_h->h_tktclass[0] == TKTTYPE_DEL)
	{
		int_l_flag = 0;
		if (APL_FAILURE == CO_Chk_CntryEnabled(	"TRD_MANIFOLD",
															"DEL_TEXT_NOTREQD",
															&int_l_flag,
															l_debug_info_ptr ))
		{
			APL_GOBACK_FAIL
		}
		if(!int_l_flag)
		{
			fprintf(	l_manfile, 
					"RECEIVED FROM %s THE DESCRIBED INSTRUMENT\n", 
					g_mt_commonsys_params_struct_h.ca_identname );
			fprintf(	l_manfile, 
					"IT IS HEREBY ACKNOWLEDGED THAT A INSTRUMENT INTEREST IN THE SAID INSTRUMENT REMAINS\n");
			fprintf(	l_manfile,
					"AND WILL REMAIN IN CITIBANK N.A., UNTIL THE RECEIPT OF PAYMENT THEREOF IN CASH\n");
		}
	}

	fprintf(l_manfile, "\n\n\nSigned _________________________________\n");

	

	fclose(l_manfile);

	

	if (APL_FAILURE == CO_Prnt(	chr_l_tmp,
											APL_NULL_STRING,
											p_intl_envdatastruct_h,
											l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	

	

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
		if (p_logfile != NULL)
		{
			#ifdef SYS_DEBUG
				CO_ProcMonitor(	p_logfile,
								"Leaving Function DL_Proc_MPPrnt with Success\n",
								NULL,
								NULL);
			#endif
		}
		return(APL_SUCCESS);

	RETURN_FAILURE :
		if (p_logfile != NULL)
		{
			#ifdef SYS_DEBUG
				CO_ProcMonitor(	p_logfile,
								"Leaving Function DL_Proc_MPPrnt with Errors\n",
								NULL,
								NULL);
			#endif
		}
		return(APL_FAILURE);

}




int DL_Proc_Reg(	char		*chr_p_client,
							char		*chr_p_refno,
							char		*p_delrecdate,
							char		*p_txndate,
							double	*p_quantity,
							double	*p_qtymoved,
							char		p_regstcode,
							INTL_ENV_DATA_STRUCT_H	*p_intl_envdatastruct_h,
							DEBUG_INFO_STRUCT_H	**l_debug_info_ptr )
{
	struct sqlca sqlca;
	DL_REGDET_STRUCT_H	*l_dl_regdetstruct_h					= 	NULL;
	REQDETAILS_STRUCT_H	*l_reqdetails_struct_ha					=	NULL;
	DL_MANIPRNT_STRUCT_H	*l_dl_maniprnt_struct_h					= 	NULL;
	char		chr_l_buf[BUFFER_LEN]								=	APL_NULL_STRING;
	char		chr_l_str_srlno[SEQ_NO_LEN]	 				=	APL_NULL_STRING;
	char		chr_l_regstcode										= 	APL_NULL_CHAR;
	char		chr_l_tmpout_prevreg								= 	APL_NULL_CHAR;
	char		chr_l_tmpret_prevreg								= 	APL_NULL_CHAR;
	char		chr_l_tkttype[APL_FLAG_LENGTH]						=	APL_NULL_STRING;
	char		chr_l_str_regstcode[APL_FLAG_LENGTH]				=	APL_NULL_STRING;
	char		chr_l_sysdatetime_A[APL_FLAG_LENGTH]				=	APL_NULL_STRING;
	char		chr_l_h_regstcode[APL_FLAG_LENGTH]				= 	APL_NULL_STRING;
	char		chr_l_h_prevreg[APL_FLAG_LENGTH]					= 	APL_NULL_STRING;
	char		chr_l_h_regdet_access_stamp[APL_DATE_LEN]	=	APL_NULL_STRING;
	char		*chr_l_regstcode_arr								=	NULL;
	char		*chr_l_prevreg_arr									= 	NULL;
	char		*chr_l_regrec_arr									= 	NULL;
	int		int_l_nbr_rows										= 	0;
	int		int_l_srlno											= 	0;
	int		int_l_prnt_srlno									= 	0;
	int		int_l_man_srlno										= 	0;
	int		i													= 	0;
	int		j													= 	0;
	short		l_i_regstcode									= 	0;
	short		l_i_prevreg										= 	0;
	short		int_l_error_flg										=	APL_SUCCESS;
	FILE		*fp												=	NULL;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	

	EXEC SQL VAR chr_l_h_regstcode					IS STRING;
	EXEC SQL VAR chr_l_h_prevreg					IS STRING;
	EXEC SQL VAR chr_l_h_regdet_access_stamp	IS STRING;

	

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
						"Entered Function CDBTrdInsRegRecsFn\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Account is : %s\n", 
						chr_p_client);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Reference No. is : %s\n", 
						chr_p_refno);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The DelRecDt is : %s\n", 
						p_delrecdate);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The TxnDt is : %s\n", 
						p_txndate);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Quantity is : %f\n", 
						*p_quantity);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Quantity moved forward is : %f\n", 
						*p_qtymoved);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The RegStCode is : %c\n", 
						p_regstcode);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
	}


	

	if ( l_mt_core_sys_params_struct_h.proc_reg_ind[0] == 'N' )
	{
		CO_InsertErr( 	l_debug_info_ptr,
								ERR_DATA_INTEGRITY,
								"Regn. Not Supported",
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__ );
		APL_GOBACK_FAIL;
	}

	

	if ( !strlen(chr_p_client) )
	{
		APL_DATA_MISSING(	"Account",
								APL_NULL_STRING,
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	}

	if ( !strlen(chr_p_refno) )
	{
		APL_DATA_MISSING(	"Reference No.",
								APL_NULL_STRING,
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	}

	if ( p_quantity == 0 )
	{
		APL_DATA_MISSING(	"Quantity",
								APL_NULL_STRING,
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	}

	if ( p_qtymoved == 0 )
	{
		APL_DATA_MISSING(	"Qty Moved Fwd.",
								APL_NULL_STRING,
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	}

	if ( p_regstcode == NULL )
	{
		APL_DATA_MISSING(	"Reg. Status Code",
								APL_NULL_STRING,
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	}

	if ( int_l_error_flg == APL_FAILURE )
	{
		APL_GOBACK_FAIL;
	}	

	

	if ( *p_quantity < *p_qtymoved )
	{
		CO_InsertErr(	l_debug_info_ptr,
								ERR_DATA_INTEGRITY,
								"Qty Moved > Qty",
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__ );
		APL_GOBACK_FAIL;
	}

	

	EXEC SQL DECLARE l_regcurs CURSOR FOR
			SELECT 	REG_ST_CD, PREV_REG
			FROM		DL_REGCYCLE
			WHERE		NATION	= :g_mt_commonsys_params_struct_h.nation_code;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_REC_NOTFND,
														"Static Reg. Dtls",
														APL_NULL_STRING,
														APL_NULL_STRING );

	EXEC SQL OPEN l_regcurs;

	IS_ANY_ORA_ERROR;

	for ( ; ;)
	{
		EXEC SQL FETCH l_regcurs INTO 	:chr_l_h_regstcode:l_i_regstcode,
													:chr_l_h_prevreg:l_i_prevreg ;

		if ( APL_ZERO_RESULT_SET )
		{
			break;
		}

		

		if ( int_l_nbr_rows == 0 )
		{
			chr_l_regstcode_arr 	= (char*)calloc( 1,sizeof(char) );
			APL_MALLOC_FAIL(chr_l_regstcode_arr);

			chr_l_prevreg_arr 		= (char*)calloc( 1,sizeof(char) );
			APL_MALLOC_FAIL(chr_l_prevreg_arr);
		}
		else
		{
			chr_l_regstcode_arr	= (char*)realloc( chr_l_regstcode_arr,
															(int_l_nbr_rows+1)*sizeof(char) );
			APL_MALLOC_FAIL(chr_l_regstcode_arr);
		
			chr_l_prevreg_arr		= (char*)realloc( chr_l_prevreg_arr,
															(int_l_nbr_rows+1)*sizeof(char) );
			APL_MALLOC_FAIL(chr_l_prevreg_arr);
		}

		chr_l_regstcode_arr[int_l_nbr_rows]=chr_l_h_regstcode[0];
		chr_l_prevreg_arr[int_l_nbr_rows]	=chr_l_h_prevreg[0];

		int_l_nbr_rows++;
	}

	EXEC SQL CLOSE l_regcurs;

	

	if ( strlen(p_delrecdate) )
	{
		i = 0;
		while (i<int_l_nbr_rows)
		{
			if ( chr_l_regstcode_arr[i] == TEMP_OUTREG_CD )
			{
				chr_l_tmpout_prevreg = chr_l_prevreg_arr[i];
			}
			if ( chr_l_regstcode_arr[i] == TEMP_RETREG_CD )
			{
				chr_l_tmpret_prevreg = chr_l_prevreg_arr[i];
			}
			i++;
		}
	}

	

	j = 0;
	i = 0;
	chr_l_regstcode = p_regstcode;

	while (1)
	{
		if ( chr_l_regstcode_arr[i] != chr_l_regstcode )
		{
			if ( i == int_l_nbr_rows )
			{
				chr_l_str_regstcode[0]	=	p_regstcode;
				chr_l_str_regstcode[1]	=	'\0';
				CO_InsertErr(	l_debug_info_ptr,
										ERR_REC_NOTFND,
										"Static Reg. Dtls",
										chr_l_str_regstcode,
										APL_NULL_STRING,
										__LINE__,
										__FILE__ );
				APL_GOBACK_FAIL;
			}

			i++;
		}
		else
		{
			if ( j == 0 )
			{
				chr_l_regrec_arr 	= (char*)calloc( 1,sizeof(char) );
				APL_MALLOC_FAIL(chr_l_regrec_arr);
			}
			else
			{
				chr_l_regrec_arr	= (char*)realloc( chr_l_regrec_arr,
															(j+1)*sizeof(char) );
				APL_MALLOC_FAIL(chr_l_regrec_arr);
			}
			chr_l_regrec_arr[j] = chr_l_regstcode_arr[i];
			if ( chr_l_prevreg_arr[i] == '\0' )
			{
				break;
			}
			else
			{
				chr_l_regstcode = chr_l_prevreg_arr[i];
				j++;

				

				if ( strlen(p_delrecdate) )
				{
					if ( chr_l_regstcode == chr_l_tmpret_prevreg )
					{
						chr_l_regrec_arr	= (char*)realloc( chr_l_regrec_arr,
																(j+1)*sizeof(char) );
						APL_MALLOC_FAIL(chr_l_regrec_arr);
						chr_l_regrec_arr[j] = TEMP_RETREG_CD;
						j++;
					}
					else if ( chr_l_regstcode == chr_l_tmpout_prevreg )
					{
						chr_l_regrec_arr	= (char*)realloc( chr_l_regrec_arr,
																(j+1)*sizeof(char) );
						APL_MALLOC_FAIL(chr_l_regrec_arr);
						chr_l_regrec_arr[j] = TEMP_OUTREG_CD;
						j++;
					}
				}
				i = 0;
			}
		}
	}

	

	l_dl_regdetstruct_h = (DL_REGDET_STRUCT_H*)calloc(1,sizeof(DL_REGDET_STRUCT_H));
	APL_MALLOC_FAIL(l_dl_regdetstruct_h);

	l_reqdetails_struct_ha = (REQDETAILS_STRUCT_H*)calloc(1,sizeof(REQDETAILS_STRUCT_H));
	APL_MALLOC_FAIL(l_reqdetails_struct_ha);

	l_reqdetails_struct_ha->h_element_cnt = 0;
	strcpy(l_dl_regdetstruct_h->h_dl_client, 	chr_p_client );
	strcpy(l_dl_regdetstruct_h->h_indentity_no,		chr_p_refno );
	strcpy(l_dl_regdetstruct_h->h_txndate,		p_txndate );
	l_dl_regdetstruct_h->h_qty = *p_quantity;
	int_l_srlno	= 0;
	sprintf(	chr_l_str_srlno, "%d", int_l_srlno );//AIX Warning Removal
	l_dl_regdetstruct_h->h_reg_st_cd[0] = chr_l_regrec_arr[j];
	l_dl_regdetstruct_h->h_reg_st_cd[1] = '\0';

	while (j>=0)
	{
	/*
	 	if ( APL_FAILURE == DL_Mod_DLRegStat(	l_dl_regdetstruct_h,
														l_reqdetails_struct_ha,
														p_intl_envdatastruct_h,
														l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL;
		}	
	*/
		int_l_srlno++;

		EXEC SQL SELECT 	ACCESS_STAMP 
					INTO		:chr_l_h_regdet_access_stamp
					FROM		DL_REGDET
					WHERE		CLIENT	=	:chr_p_client
					AND		IDENTIY_NO		=	:chr_p_refno
					AND		SRL_NO	=	:int_l_srlno;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_REC_NOTFND,
															chr_p_client,
															chr_p_refno,
															chr_l_str_srlno );

		if ( strlen( p_delrecdate ) )
		{
			if ( l_dl_regdetstruct_h->h_reg_st_cd[0] == TEMP_OUTREG_CD )
			{
				chr_l_tkttype[0] = 'O';
				chr_l_tkttype[1] = '\0';
			}
			else if ( l_dl_regdetstruct_h->h_reg_st_cd[0] == TEMP_RETREG_CD )
			{
				chr_l_tkttype[0] = 'T';
				chr_l_tkttype[1] = '\0';
			}
			else
			{
				int_l_prnt_srlno = int_l_srlno;
				l_reqdetails_struct_ha->h_srl_no = &int_l_prnt_srlno;	
			}
		}
		else
		{
			int_l_prnt_srlno = int_l_srlno;
			l_reqdetails_struct_ha->h_srl_no = &int_l_prnt_srlno;	
		}

		j--;
		l_dl_regdetstruct_h->h_reg_st_cd[0] = chr_l_regrec_arr[j];
		l_dl_regdetstruct_h->h_reg_st_cd[1] = '\0';
		l_dl_regdetstruct_h->h_qty = *p_qtymoved;
		l_reqdetails_struct_ha->h_element_cnt = 1;
		l_reqdetails_struct_ha->h_qty = p_qtymoved;
		l_reqdetails_struct_ha->h_access_stamp = chr_l_h_regdet_access_stamp;
	}

	

	if ( strcmp( chr_l_tkttype, APL_NULL_STRING ) )
	{
		l_dl_maniprnt_struct_h = (DL_MANIPRNT_STRUCT_H*)calloc(1,sizeof(DL_MANIPRNT_STRUCT_H)); 
		APL_MALLOC_FAIL(l_dl_maniprnt_struct_h);

		strcpy(l_dl_maniprnt_struct_h->h_dl_client, chr_p_client);
		strcpy(l_dl_maniprnt_struct_h->h_indentity_no, chr_p_refno);
		strcpy(l_dl_maniprnt_struct_h->h_tktclass, chr_l_tkttype);
		l_dl_maniprnt_struct_h->h_dupl[0] = 'N';
		l_dl_maniprnt_struct_h->h_dupl[1] = '\0';
		l_dl_maniprnt_struct_h->h_srl_no	= int_l_man_srlno;
		l_dl_maniprnt_struct_h->h_qty	= *p_qtymoved;

		if ( APL_FAILURE == CO_RtvSysDtTime(	chr_l_sysdatetime_A,
																l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL;
		}

		if ( APL_FAILURE == DL_Proc_MPPrnt(	l_dl_maniprnt_struct_h,
														chr_l_sysdatetime_A,
														fp,
														p_intl_envdatastruct_h,
														l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL;
		}
	}

	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CDBTrdInsRegRecsFn with success\n",
							NULL,
							NULL );
		}
		APL_FREE(l_dl_regdetstruct_h);
		APL_FREE(l_reqdetails_struct_ha);
		APL_FREE(chr_l_regstcode_arr);
		APL_FREE(chr_l_prevreg_arr);
		APL_FREE(chr_l_regrec_arr);
		APL_FREE(l_dl_maniprnt_struct_h);
		return(APL_SUCCESS);

	RETURN_FAILURE :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CDBTrdInsRegRecsFn with errors\n",
							NULL,
							NULL );
		}
		APL_FREE(l_dl_regdetstruct_h);
		APL_FREE(l_reqdetails_struct_ha);
		APL_FREE(chr_l_regstcode_arr);
		APL_FREE(chr_l_prevreg_arr);
		APL_FREE(chr_l_regrec_arr);
		APL_FREE(l_dl_maniprnt_struct_h);
		return(APL_FAILURE); 

}



int DL_Chk_Pos(	char	*chr_p_client,
							char	*p_instr_code,
							char	*p_loccode,
							double *p_quantity,
							char *p_block_type,
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{
	

	char		chr_l_sellflg[APL_FLAG_LENGTH]				= APL_NULL_STRING;
	char		chr_l_canc_astatus[APL_STATUS_LEN]	= APL_NULL_STRING;	
	char		chr_l_canc_ustatus[APL_STATUS_LEN]	= APL_NULL_STRING;	
	char		chr_l_del_status[APL_STATUS_LEN]		= APL_NULL_STRING;	
	char     chr_l_exec_status[APL_STATUS_LEN]    = APL_NULL_STRING;
	char		chr_l_buf[BUFFER_LEN]						= APL_NULL_STRING;

	double	l_avquantity									= 0.0;
	double	l_h_blkquantity								= 0.0;
	double	l_h_safekeep_pos								= 0.0;
	double	l_h_val_rec								= 0.0;
	double	l_h_val_del								= 0.0;
	double	l_h_nval_del							= 0.0;
	double	l_h_dp_rec							= 0.0;
	double	l_h_dp_del							= 0.0;

	short		l_i_blkqty								= 0;
	short		l_i_safek								= 0;
	short		l_i_confrec								= 0;
	short		l_i_confdel								= 0;
	short		l_i_nconfdel							= 0;
	short		l_iflag									= 0;

	
	char     chr_l_systemdate[APL_DATE_LEN]       = APL_NULL_STRING;

	EXEC SQL BEGIN DECLARE SECTION;
	EXEC SQL VAR chr_l_systemdate IS STRING;
	EXEC SQL END DECLARE SECTION;
   

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE, "Entered processtion CDBChkPosnsFn", NULL, NULL);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "Account is : %s", chr_p_client);
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, NULL);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "Instrode is : %s", p_instr_code);
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, NULL);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "Locncode is : %s", p_loccode);
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, NULL);
	}

	if (l_mt_core_sys_params_struct_h.proc_reg_ind[0] == 'Y')
	{
		if (l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y')
		{
			EXEC SQL SELECT safekeep_pos, VAL_REC, VAL_DEL, NVALDELIVER
			INTO 	:l_h_safekeep_pos:l_i_safek,
					:l_h_val_rec:l_i_confrec,
					:l_h_val_del:l_i_confdel,
					:l_h_nval_del:l_i_nconfdel
			FROM DL_SAFEK
			WHERE client = RTRIM(:chr_p_client)
			AND	instr_code  = RTRIM(:p_instr_code)
			AND	location_cd = RTRIM(:p_loccode)
			AND STATUS = '000' and block_type= :p_block_type;
		}
		else
		{
			EXEC SQL SELECT safekeep_pos, VAL_REC, VAL_DEL, NVALDELIVER
			INTO 	:l_h_safekeep_pos:l_i_safek,
					:l_h_val_rec:l_i_confrec,
					:l_h_val_del:l_i_confdel,
					:l_h_nval_del:l_i_nconfdel
			FROM DL_SAFEK
			WHERE client = RTRIM(:chr_p_client)
			AND	instr_code  = RTRIM(:p_instr_code)
			AND STATUS = '000' and block_type= :p_block_type;
		}
	}
	else 
	{
		if (l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y')
		{
			EXEC SQL SELECT safekeep_pos, VAL_REC, VAL_DEL, NVALDELIVER
			INTO 	:l_h_safekeep_pos:l_i_safek,
					:l_h_val_rec:l_i_confrec,
					:l_h_val_del:l_i_confdel,
					:l_h_nval_del:l_i_nconfdel
			FROM DL_SAFEK
			WHERE client = RTRIM(:chr_p_client)
			AND	instr_code  = RTRIM(:p_instr_code)
			AND	location_cd = RTRIM(:p_loccode) and block_type= :p_block_type;
		}
		else
		{
			EXEC SQL SELECT safekeep_pos, VAL_REC, VAL_DEL, NVALDELIVER
			INTO 	:l_h_safekeep_pos:l_i_safek,
					:l_h_val_rec:l_i_confrec,
					:l_h_val_del:l_i_confdel,
					:l_h_nval_del:l_i_nconfdel
			FROM DL_SAFEK
			WHERE client = RTRIM(:chr_p_client)
			AND	instr_code  = RTRIM(:p_instr_code) and block_type= :p_block_type;
		}
	}

	IS_ANY_ORA_ERROR

	if (l_i_safek == -1) l_h_safekeep_pos = 0.0;
	if (l_i_confrec == -1) l_h_val_rec = 0.0;
	if (l_i_confdel == -1) l_h_val_del = 0.0;
	if (l_i_nconfdel == -1) l_h_nval_del = 0.0;

	

	if (APL_FAILURE == CO_Chk_CntryEnabled(	"ORD_MAINT",
														"NCNFDL_FOR_POSN_CHK",
														&l_iflag,
														l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	if (l_iflag)
	{
		l_avquantity = l_h_safekeep_pos - l_h_val_del - l_h_nval_del;
	}
	else
	{
		l_avquantity = l_h_safekeep_pos + l_h_val_rec - l_h_val_del;
	}
	
   

    if (APL_FAILURE == CO_RtvSysDt(chr_l_systemdate, l_debug_info_ptr))
    {
       return(APL_FAILURE);
    }

	

	chr_l_sellflg[0] = SELL_ORD_IND;
	chr_l_sellflg[1] = '\0';
	strcpy(chr_l_canc_astatus, STATUS_CANC_AUTH);	
	strcpy(chr_l_canc_ustatus, STATUS_CANC_UAUTH);	
	strcpy(chr_l_del_status, STATUS_DEL_UAUTH);	
	strcpy(chr_l_exec_status, STATUS_EXEC);
	

	EXEC SQL SELECT sum(ORD_QTY-EXEC_QTY)
	INTO	:l_h_blkquantity:l_i_blkqty
	FROM OR_ORDERDETAILS
	WHERE client = RTRIM(:chr_p_client)
	AND	instr_code  = RTRIM(:p_instr_code)
	AND 	BUY_SELL_IND = :chr_l_sellflg
	AND   (EXP_DATE >= :chr_l_systemdate OR EXP_DATE IS NULL)
	AND   ORD_STAT NOT IN (:chr_l_canc_astatus, :chr_l_canc_ustatus, :chr_l_del_status,:chr_l_exec_status);

	IS_ANY_ORA_ERROR

	if (l_i_blkqty == -1) l_h_blkquantity = 0.0;

	*p_quantity = l_avquantity - l_h_blkquantity;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
      APL_IF_DEBUG
      {
         CO_ProcMonitor(   APL_OUT_FILE,
                     "Leaving Function DL_Chk_Pos with success\n",
                     NULL,
                     NULL);
      }
      return(APL_SUCCESS);

	RETURN_FAILURE :
      APL_IF_DEBUG
      {
         CO_ProcMonitor(   APL_OUT_FILE,
                     "Leaving Function DL_Chk_Pos with errors\n",
                     NULL,
                     NULL);
      }
      return(APL_FAILURE);

}




int DL_Chk_TrdCanDrop(	char	*p_candropdate,
								char	*chr_p_client,
								char	*chr_p_refno,
								DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{
	

	struct sqlca sqlca;
	char		chr_l_buf[BUFFER_LEN]						= 	APL_NULL_STRING;
	int		int_l_error_flg								=	APL_SUCCESS;


	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE, "Entered processtion CDBUpdCanDropDtFn", NULL, NULL);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "CanDropDate is : %s", p_candropdate);
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, NULL);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "Account is : %s", chr_p_client);
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, NULL);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "Refno is : %s", chr_p_refno);
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, NULL);
	}


	

	if ( strlen(p_candropdate) == 0 )
	{
		APL_DATA_MISSING(	"Can Drop Date",
								APL_NULL_STRING,
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	}

	if ( strlen(chr_p_client) == 0 )
	{
		APL_DATA_MISSING( "Account Of Trade",
								APL_NULL_STRING,
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	}

	if ( strlen(chr_p_refno) == 0 )
	{
		APL_DATA_MISSING( "Refno Of Trade",
								APL_NULL_STRING,
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	}

	if ( int_l_error_flg == APL_FAILURE )
	{
		APL_GOBACK_FAIL;
	}

	

	EXEC SQL UPDATE DL_DEAL SET ALLOW_DROPDT = :p_candropdate
				WHERE	 CLIENT	=	:chr_p_client
				AND	 IDENTIY_NO	=	:chr_p_refno;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_DEAL_NF,
														chr_p_client,
														chr_p_refno,
														APL_NULL_STRING );

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
      APL_IF_DEBUG
      {
         CO_ProcMonitor(   APL_OUT_FILE,
                     "Leaving Function DL_Chk_TrdCanDrop with success\n",
                     NULL,
                     NULL);
      }
      return(APL_SUCCESS);

	RETURN_FAILURE :
      APL_IF_DEBUG
      {
         CO_ProcMonitor(   APL_OUT_FILE,
                     "Leaving Function DL_Chk_TrdCanDrop with errors\n",
                     NULL,
                     NULL);
      }
      return(APL_FAILURE);

}

int DL_Rtv_SplAcc(char *spl_clt, 
									DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	char chr_l_splacc[APL_CLIENT_LENGTH] = APL_NULL_STRING;
	struct sqlca sqlca;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	EXEC SQL VAR chr_l_splacc IS STRING;

         EXEC SQL SELECT FIELD_VAL
         INTO  :chr_l_splacc
         FROM PRO_GSSPLVAL
         WHERE MAIN_FUN='EMUCONV'
         AND   SUB_PROCESS='SPLACC'
         AND NATION=:g_mt_commonsys_params_struct_h.nation_code;

		   IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"SPECIAL A/C","FOR DIFF TRADE",APL_NULL_STRING)

	strcpy(spl_clt,chr_l_splacc);

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
      APL_IF_DEBUG
      {
         CO_ProcMonitor(   APL_OUT_FILE,
                     "Leaving Function DL_Rtv_SplAcc with success\n",
                     NULL,
                     NULL);
      }
      return(APL_SUCCESS);

	RETURN_FAILURE :
      APL_IF_DEBUG
      {
         CO_ProcMonitor(   APL_OUT_FILE,
                     "Leaving Function DL_Rtv_SplAcc with errors\n",
                     NULL,
                     NULL);
      }
      return(APL_FAILURE);
}


int DL_Proc_RstPmtSkip(char *p_instr_code, int *p_retcode, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct 	sqlca sqlca;
	char		chr_l_clscode_a[5]							=	APL_NULL_STRING;
	short		i_classcd								=  0;
	char		chr_l_buf[51]								=  APL_NULL_STRING;

	EXEC SQL VAR chr_l_clscode_a IS STRING;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;
	memset(chr_l_clscode_a,APL_NULL_CHAR,sizeof(chr_l_clscode_a));
  
	strcpy(chr_l_buf,"instr_code=");
	strcat(chr_l_buf,p_instr_code);
	strcat(chr_l_buf,",countrycode=");       
	strcat(chr_l_buf,g_mt_commonsys_params_struct_h.nation_code);
	CO_ProcMonitor(   APL_OUT_FILE,chr_l_buf, NULL, NULL);

	EXEC SQL SELECT CLASSCD into :chr_l_clscode_a:i_classcd from MT_INSTRUMENT where instr_code=:p_instr_code;
	IS_ANY_ORA_ERROR
	strcpy(chr_l_buf,"clscode=");
	strcat(chr_l_buf,chr_l_clscode_a);
	CO_ProcMonitor(   APL_OUT_FILE,chr_l_buf, NULL, NULL);
	
	if( (strcmp(chr_l_clscode_a,"MIN")==0) && (strcmp(g_mt_commonsys_params_struct_h.nation_code,"RU")==0 ) )
	{
		CO_ProcMonitor(   APL_OUT_FILE,"Return Code=1", NULL, NULL);
		*p_retcode=1;
	}
	else
	{
		CO_ProcMonitor(   APL_OUT_FILE,"Return Code=0", NULL, NULL);
		*p_retcode=0;
	}

		APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
      APL_IF_DEBUG
      {
         CO_ProcMonitor(   APL_OUT_FILE,
                     "Leaving Function DL_Proc_RstPmtSkip with success\n",
                     NULL,
                     NULL);
      }
      return(APL_SUCCESS);

	RETURN_FAILURE :
      APL_IF_DEBUG
      {
         CO_ProcMonitor(   APL_OUT_FILE,
                     "Leaving Function DL_Proc_RstPmtSkip with errors\n",
                     NULL,
                     NULL);
      }
      return(APL_FAILURE);

 }

/***********ADDED BY AMISH -----------08/05----*/
int DL_chk_brkcom_stx(double p_brk_comm,
						double p_stx_comm,
						double p_dl_amt,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr)

{

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
		char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
		int int_error_flag=APL_SUCCESS;
	
	APL_IF_DEBUG
	{
      CO_ProcMonitor(	APL_OUT_FILE, 
						"Entered Function DL_chk_brkcom_stx\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
	   sprintf(		chr_l_buf, 
						"The brk commissison  is : %lf\n", 
						p_brk_comm);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(		chr_l_buf, 
						"The stx commision  is : %lf\n", 
						p_stx_comm);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(		chr_l_buf, 
						"The amount is is : %lf\n", 
						p_dl_amt);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
	}

		
	
				
	float l_brokerage = 0.0;
	float l_sttrate = 0.0;
	
	float l_brk_amt = 0;
	float l_stt_amt = 0;


	/*
	EXEC SQL SELECT BROKERCOMM,NET_AMT,STX_COMM,AMOUNT INTO :l_brokercomm:l_i_brokercomm,l_amount:l_li_amount,
	  :l_stx_comm:l_i_stx_comm,l_dl_amt:i_dl_amt
	FROM DL_DEAL WHERE CLIENT =:p_cln_code
	AND IDENTIY_NO =:p_ref_no;

	IS_ANY_ORA_ERROR

	*/
		


	EXEC SQL SELECT BROKERAGE,STTRATE INTO :l_brokerage,:l_sttrate FROM MT_CORE_SYS_PARAMS WHERE PART_CONFIRM = 'Y';
		printf("sql code %d\n",sqlca.sqlcode);
		IS_ANY_ORA_ERROR
	/* chgs by amish --02/05 --comparision oonly till 4 decimal places */
		
	l_brk_amt = (p_brk_comm*100/p_dl_amt);
	EXEC SQL select round(:l_brk_amt,4) into :l_brk_amt from dual;
	printf("sql code %d\n",sqlca.sqlcode);
	IS_ANY_ORA_ERROR;
	   
		
	printf("\n%%%%%%%%%%%%%%5brk amout is |%f|",l_brk_amt);
	printf("\namish##########brokerage(core sys) is |%f|",l_brokerage);//AIX Warning Removal
		
	if(p_brk_comm != 0) 
	{
		/*
		if((l_brokercomm*100/l_amount) > l_brokerage)  
		*/
		/* chgs by amish */
		printf("\n%%%%%%%%%%%%%%in iff loop --broker comm");
		if(l_brk_amt > l_brokerage)
		{
			/*
			 printf("\n%%%%%%%amish##########%%%%%%%5brokerage is |%lf|",l_brokerage);
			 */
			if(CO_InsertErr(l_debug_info_ptr,
						ERR_BCN_BROKERAGE_HIGH,
						APL_NULL_STRING,
						APL_NULL_STRING,
						APL_NULL_STRING,
						__LINE__,
						__FILE__
						) == APL_SUCCESS)
			int_error_flag = APL_FAILURE;
		}

	}
	l_stt_amt = (p_stx_comm*100/p_dl_amt);



	EXEC SQL select round(:l_stt_amt,4) into :l_stt_amt from dual;
	printf("sql code %d\n",sqlca.sqlcode);
	IS_ANY_ORA_ERROR;
	printf("\n%%%%%%%%%%%%%%5stt amount is  is |%f|",l_stt_amt);
	printf("\namish##########stt rate (core sys) is |%f|",l_sttrate);//AIX Warning Removal


	/*
	printf("\n%%%%%%%am5 STT AMOUNT  is |%f|",l_stt_amt);
	*/

	if(p_stx_comm != 0)
	{
		/*
		if((l_stx_comm*100/l_amount) > l_sttrate)   
		*/
		/* chgs by amish */
		if(l_stt_amt > l_sttrate)
		{
			printf("\n%%%%%%%%%%%%%%in 2nd iff loop --stx commision");
		
			if(CO_InsertErr(l_debug_info_ptr,
						ERR_BCN_STTAMT_HIGH,
						APL_NULL_STRING,
						APL_NULL_STRING,
						APL_NULL_STRING,
						__LINE__,
						__FILE__
						 ) == APL_SUCCESS)
				int_error_flag = APL_FAILURE;
		}
	}

	if (int_error_flag == APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}

	APL_GOBACK_SUCCESS // AIX - Warnings
	
	RETURN_SUCCESS :
	APL_IF_DEBUG
	{
		CO_ProcMonitor(   APL_OUT_FILE,
                     "Leaving Function DL_chk_brkcom_stx with success\n",
                     NULL,
                     NULL);
	}
	return(APL_SUCCESS);

	RETURN_FAILURE :
	APL_IF_DEBUG
	{
		CO_ProcMonitor(   APL_OUT_FILE,
				 "Leaving Function DL_chk_brkcom_stx with errors\n",
				 NULL,
				 NULL);
	}
      return(APL_FAILURE);




}

/***********ADDED BY AMOL -----------23/12----*/
int DL_calGrossAmt(double p_brk_comm,
						double p_stx_comm,
						double p_stamp_duty,
						double *p_dl_amt,
						double p_net_amt,
						char *p_dl_dealcd,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr)

{

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
		int int_error_flag=APL_SUCCESS;
	
	APL_IF_DEBUG
	{
		fprintf(APL_OUT_FILE,"Entered Function DL_calGrossAmt\n");
		fprintf(APL_OUT_FILE,"The brk commissison  is : %lf\n",p_brk_comm);
		fprintf(APL_OUT_FILE,"The stx commision  is : %lf\n",p_stx_comm);
		fprintf(APL_OUT_FILE,"The stamp duty commision  is : %lf\n",p_stamp_duty);
		fprintf(APL_OUT_FILE,"The amount is is : %lf\n",*p_dl_amt);
		fprintf(APL_OUT_FILE,"The net amount is is : %lf\n",p_net_amt);
		fprintf(APL_OUT_FILE,"The Deal Code is is : |%s|\n",p_dl_dealcd);
	}

	if(*p_dl_amt == 0)
	{

		if((!strcmp(p_dl_dealcd,"1")) || (!strcmp(p_dl_dealcd,"3")))
		{
			fprintf(APL_OUT_FILE,"Entered into Sale\n");
			*p_dl_amt = p_net_amt +  ( p_stx_comm + p_brk_comm + p_stamp_duty);
		}
		else if((!strcmp(p_dl_dealcd,"2")) || (!strcmp(p_dl_dealcd,"4")))
		{
			fprintf(APL_OUT_FILE,"Entered into Purchase\n");
			*p_dl_amt = p_net_amt - ( p_stx_comm + p_brk_comm + p_stamp_duty);
		}

		fprintf(APL_OUT_FILE,"New Gross AMT = |%lf| \n",*p_dl_amt);

	}

	APL_GOBACK_SUCCESS // AIX - Warnings

	RETURN_SUCCESS :
	APL_IF_DEBUG
	{
		CO_ProcMonitor(   APL_OUT_FILE,
				 "Leaving Function DL_calGrossAmt with success\n",
				 NULL,
				 NULL);
	}
      return(APL_SUCCESS);
	/* AIX - Warnings
	RETURN_FAILURE :
      APL_IF_DEBUG
      {
         CO_ProcMonitor(   APL_OUT_FILE,
                     "Leaving Function DL_calGrossAmt with errors\n",
                     NULL,
                     NULL);
      }
      return(APL_FAILURE);
	*/
}

//Below functions added by Dipak for PMS T+0 confirmation - start
int DL_Chk_MasterSubAvlPos(	char *p_client,
							char *p_instrcode,
							char *p_locncode,
							char p_chr_settled, 
							char p_chr_nConfRec, 
							char p_chr_nConfDel, 
							char p_chr_confRec, 
							char p_chr_confDel, 
							char p_chr_dpRec, 
							char p_chr_dpDel, 
							char p_chr_includeBlock, 
							char *p_block_type,
							double *p_availqty,
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr ) 
{
	struct sqlca sqlca;
	double l_h_totquantity = 0;
	short	 l_i_totqty = 0;
	char	 chr_l_buf[BUFFER_LEN];
	int l_i_includeBothDp = 0;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0; 
	strcpy(chr_l_buf, APL_NULL_STRING);

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
						"Entering Function DL_Chk_MasterSubAvlPos\n",
						NULL,
					   NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf( 	chr_l_buf,
						"The Client Code is : %s\n",
						p_client);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
					   NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf( 	chr_l_buf,
						"The Instrument Code is : %s\n",
						p_instrcode);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
					   NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf,
						"The Location Code is : %s\n",
						p_locncode);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
					   NULL);
	}

	if ( !strlen(p_client) )
	{
		APL_DATA_MISSING(	"Client Code",
								APL_NULL_STRING,
								APL_NULL_STRING );
	}

	if ( !strlen(p_instrcode) )
	{
		APL_DATA_MISSING(	"Instrument Code",
								APL_NULL_STRING,
								APL_NULL_STRING );
	}

	if ( !strlen(p_locncode) )
	{
		APL_DATA_MISSING(	"Location Code",
								APL_NULL_STRING,
								APL_NULL_STRING );
	}

	/**********************************************************************************************
		Passed parameters are : 
				p_chr_settled, 
				p_chr_nConfRec, 
				p_chr_nConfDel, 
				p_chr_confRec, 
				p_chr_confDel, 
				p_chr_dpRec, 
				p_chr_dpDel, 
				p_chr_includeBlock, 
	**************************************************************************************************/
			
	EXEC SQL SELECT SUM(NVL( 
		DECODE(:p_chr_settled,'Y',SAFEKEEP_POS,0)
		+
		DECODE(:p_chr_confRec,'Y',VAL_REC,0)
		-
		DECODE(:p_chr_confDel,'Y',VAL_DEL,0)
		+
		DECODE(:p_chr_nConfRec,'Y',NVALRECEIVE,0)
		-
		DECODE(:p_chr_nConfDel,'Y',NVALDELIVER,0)
		+
		DECODE(:p_chr_dpRec,'Y',DP_REC,0)
		-
		DECODE(:p_chr_dpDel,'Y',DP_DEL,0)
		, 0 ))
		INTO	:l_h_totquantity:l_i_totqty
		from DL_SAFEK 
		//WHERE	CLIENT  = :p_client
		WHERE	CLIENT in (Select cln_code from mt_client where cln_master =:p_client)
		AND	INSTR_CODE	= :p_instrcode
		AND BLOCK_TYPE = :p_block_type;		
			
	
	IS_ANY_ORA_ERROR


	*p_availqty = l_h_totquantity;

	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Leaving Function DL_Chk_MasterSubAvlPos with success\n",
							NULL,
							NULL);
		}
		return(APL_SUCCESS);

	RETURN_FAILURE :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Leaving Function DL_Chk_MasterSubAvlPos with errors\n",
							NULL,
							NULL);
		}
		return(APL_FAILURE);
}

int DL_Call_Avl_Pos_Chk(SYS_DL_DEAL_STRUCT_H *p_sys_dl_deal_struct_h_a,
						char *l_block_type,
						double *l_availquantity,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca sqlca;
	double p_qty = 0;
	char l_chr_sub_pos_chk[2] = APL_NULL_STRING;
	EXEC SQL SELECT GETCLIENTPARAMBYID('SUBACC_POS_SELL',:p_sys_dl_deal_struct_h_a->h_dl_client) INTO :l_chr_sub_pos_chk FROM DUAL;
	Alert("\n l_chr_sub_pos_chk = |%s|", l_chr_sub_pos_chk);
	Alert("\n p_sys_dl_deal_struct_h_a->h_classofdl = |%s|", p_sys_dl_deal_struct_h_a->h_classofdl);
	Alert("\n p_sys_dl_deal_struct_h_a-> h_clh_flg = |%s|", p_sys_dl_deal_struct_h_a-> h_clh_flg);
	Alert("\n p_sys_dl_deal_struct_h_a->h_ex_arena = |%s|", p_sys_dl_deal_struct_h_a->h_ex_arena);
	Alert("\n p_sys_dl_deal_struct_h_a->h_dealcd = |%s|", p_sys_dl_deal_struct_h_a->h_dealcd);
	
	
	if	(	(!strcmp(l_chr_sub_pos_chk,"Y"))
		&&	(!strcmp(p_sys_dl_deal_struct_h_a->h_ex_arena,"1")) 
		&& 	(!strcmp(p_sys_dl_deal_struct_h_a->h_clh_flg,"C")) 
		&&  (!strcmp(p_sys_dl_deal_struct_h_a->h_classofdl,"1")) 
		&& 	(	(!strcmp(p_sys_dl_deal_struct_h_a->h_dealcd,"1")) 
				|| (!strcmp(p_sys_dl_deal_struct_h_a->h_dealcd,"3"))
			)
		)
	{
		Alert("Calling function DL_Chk_MasterSubAvlPos \n");
		if ( APL_FAILURE == DL_Chk_MasterSubAvlPos(  p_sys_dl_deal_struct_h_a->h_dl_client,
					  p_sys_dl_deal_struct_h_a->h_instr_code,
					  p_sys_dl_deal_struct_h_a->h_loccode,
					'Y','N','Y','N','Y','N','Y','N',l_block_type,
					&p_qty,
					l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL;
		}
	}
	else
	{
		Alert("Calling function DL_Chk_AvlPos \n");
		if ( APL_FAILURE == DL_Chk_AvlPos(  p_sys_dl_deal_struct_h_a->h_dl_client,
					  p_sys_dl_deal_struct_h_a->h_instr_code,
					  p_sys_dl_deal_struct_h_a->h_loccode,
					'Y','N','Y','N','Y','N','Y','N',l_block_type,
					&p_qty,
					l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL;
		}
	}
	
	Alert("l_availquantity |%lf| \n",l_availquantity);
	Alert("p_qty |%lf| \n",p_qty);
	
	*l_availquantity = p_qty;
	
	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Leaving Function DL_Call_Avl_Pos_Chk with success\n",
							NULL,
							NULL);
		}
		return(APL_SUCCESS);

	RETURN_FAILURE :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Leaving Function DL_Call_Avl_Pos_Chk with errors\n",
							NULL,
							NULL);
		}
		return(APL_FAILURE);
}

int DL_Chk_SubAcc_Mod_Posn(char *p_client, 
						char *p_mt_instrument_struct_h, 
						char *p_location, 
						char *p_posnstatus, 
						char p_postype, 
						char p_trcode, 
						double *p_qty, 
						char p_incdec, 
						char *p_block_type,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	

	struct sqlca sqlca;	
	double l_retposn = 0.0, l_round_quantity = 0;
	double *l_retposn_ptr = NULL;
	char 	chr_l_posntype[4],
			chr_l_h_rowid[APL_ROWID_LEN],
			chr_l_h_access_stamp[APL_DATE_LEN],
			chr_l_buf[BUFFER_LEN];
	short int_l_error_flg = APL_SUCCESS, 
			int_l_retval = APL_SUCCESS, 
			l_i_rowid = 0, 
			l_IncDecSign = 1, 
			l_i_temp_qty = 0, 
			l_i_access_stamp = 0;
	double l_h_temp_quantity=0.0;
	double l_h_temp_quantity_rnd=0.0;
	double l_total_safeks=0.0;
	DL_SAFEK_STRUCT_H l_dl_safek_struct_h;
	DL_SAFEK_STRUCT_I l_dl_safek_struct_i;
	char	chr_h_splacc[APL_CLIENT_LENGTH]=APL_NULL_STRING;

	/* JC - ISKB 645 -- Start */
	char 	l_instr_sub_type_h[TYPEOF_INSTR_LEN] = APL_NULL_STRING;
	short 	l_instr_sub_type_i = 0;
	double 	l_qty_safek = 0.0; 
	char 	chr_l_h_dec_len[2]=APL_NULL_STRING;
	short 	l_i_dec_len = 0;
	double 	l_h_temp_qty_rnd = 0.0;
	/* JC - ISKB 645 -- End */
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	l_retposn_ptr = &l_retposn;
	strcpy(chr_l_posntype, APL_NULL_STRING);
	strcpy(chr_l_h_rowid, APL_NULL_STRING);
	strcpy(chr_l_h_access_stamp, APL_NULL_STRING);
	strcpy(chr_l_buf, APL_NULL_STRING);

	sqlca.sqlcode = 0;
	
	EXEC SQL VAR chr_l_h_rowid IS STRING;
	EXEC SQL VAR chr_h_splacc IS STRING;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE,
        				"Entering Function DL_Chk_SubAcc_Mod_Posn\n",
						NULL,
					   NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Account is : %s\n", 
						p_client);
		CO_ProcMonitor(	APL_OUT_FILE,
        				chr_l_buf,
						NULL,
					   NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Instrurity is : %s\n", 
						p_mt_instrument_struct_h);
		CO_ProcMonitor(	APL_OUT_FILE,
        				chr_l_buf,
						NULL,
					   NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Location is : %s\n", 
						p_location); 
		CO_ProcMonitor(	APL_OUT_FILE,
        				chr_l_buf,
						NULL,
					   NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Position Status is : %s\n", 
						p_posnstatus);
		CO_ProcMonitor(	APL_OUT_FILE,
        				chr_l_buf,
						NULL,
					   NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Position Type is : %c\n", 
						p_postype);
		CO_ProcMonitor(	APL_OUT_FILE,
        				chr_l_buf,
						NULL,
					   NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Transaction Code is : %c\n",
				 		p_trcode);
		CO_ProcMonitor(	APL_OUT_FILE,
        				chr_l_buf,
						NULL,
					   NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Quantity is : %f\n", 
						*p_qty);
		CO_ProcMonitor(	APL_OUT_FILE,
        				chr_l_buf,
						NULL,
					   NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Inc/Dec chr_flag is : %c\n", 
						p_incdec);
		CO_ProcMonitor(	APL_OUT_FILE,
        				chr_l_buf,
						NULL,
					   NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"Block Type is : %s\n", 
						p_block_type);
		CO_ProcMonitor(	APL_OUT_FILE,
        				chr_l_buf,
						NULL,
					   NULL);

	}

	

	if (!strlen(p_client))
	{
		APL_DATA_MISSING(	"Account", 
								APL_NULL_STRING, 
								APL_NULL_STRING);
		int_l_error_flg = APL_FAILURE;
	} 
	
	if (!strlen(p_mt_instrument_struct_h))
	{
		APL_DATA_MISSING(	"Instrurity", 
								APL_NULL_STRING, 
								APL_NULL_STRING);
		int_l_error_flg = APL_FAILURE;
	} 

	if (!strlen(p_block_type))
	{
		APL_DATA_MISSING(	"Block Type", 
								APL_NULL_STRING, 
								APL_NULL_STRING);
		int_l_error_flg = APL_FAILURE;
	} 
	
	if ( ( !strlen(p_location) ) && 
			( !strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind, "Y") ) ) 
	{	
		APL_DATA_MISSING(	"Location", 
								APL_NULL_STRING, 
								APL_NULL_STRING);
		int_l_error_flg = APL_FAILURE;
	}

	if ( ( !strlen(p_posnstatus) ) 
			&& ( !strcmp(l_mt_core_sys_params_struct_h.proc_reg_ind, "Y" ) ) ) 
	{
		APL_DATA_MISSING(	"Position Status", 
								APL_NULL_STRING, 
								APL_NULL_STRING);
		int_l_error_flg = APL_FAILURE;
	}

	if (p_postype == NULL)
	{
		printf("HERE inside posntype\n");
		APL_DATA_MISSING(	"Update Pos. Type", 
								APL_NULL_STRING, 
								APL_NULL_STRING);
		int_l_error_flg = APL_FAILURE;
	}

	if (p_trcode == NULL)
	{
		APL_DATA_MISSING(	"Trade Code", 
								APL_NULL_STRING, 
								APL_NULL_STRING);
		int_l_error_flg = APL_FAILURE;
	}

	if ((*p_qty <= 0) && (p_trcode != '5' && p_trcode != '6'))
	{
		APL_DATA_MISSING(	"Quantity", 
								APL_NULL_STRING, 
								APL_NULL_STRING);
		int_l_error_flg = APL_FAILURE;
	} 

	if ( APL_FAILURE == int_l_error_flg )
	{
		APL_GOBACK_FAIL;
	}

	

	if (p_incdec == NULL)
	{		
	 	p_incdec = 'I';
	}
	 
	//The Position Type is : U
	//The Transaction Code is : 3
	strcpy(chr_l_posntype, "NCD");
	int_l_retval = DL_Proc_PosCalc( p_client, 
									p_mt_instrument_struct_h, 
									p_location, 
									p_posnstatus, 
									APL_NULL_STRING, 
									chr_l_posntype, 
									l_retposn_ptr, p_block_type,
									l_debug_info_ptr); 		
 

	if ( int_l_retval == APL_FAILURE )
	{
		APL_GOBACK_FAIL;
	}
	printf("\n\n pos=%lf pqty=%lf \n\n", l_retposn , *p_qty );	

	if ( APL_SUCCESS == CO_ChkErr( *l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL;
	}

	if ( !strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind, "N") && 
			!strcmp(l_mt_core_sys_params_struct_h.proc_reg_ind, "N") )
	{
		EXEC SQL SELECT ROWID INTO :chr_l_h_rowid:l_i_rowid FROM DL_SAFEK WHERE
				CLIENT = :p_client AND INSTR_CODE = :p_mt_instrument_struct_h AND BLOCK_TYPE = :p_block_type;
	}
	else if ( !strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind, "N") && 
					!strcmp(l_mt_core_sys_params_struct_h.proc_reg_ind, "Y") )
	{
		EXEC SQL SELECT ROWID INTO :chr_l_h_rowid:l_i_rowid 
				FROM 	DL_SAFEK 
				WHERE CLIENT 		= :p_client 
				AND 	INSTR_CODE 		= :p_mt_instrument_struct_h AND
						STATUS = :p_posnstatus AND BLOCK_TYPE = :p_block_type;
	}
	else if ( !strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind, "Y") && 
					!strcmp(l_mt_core_sys_params_struct_h.proc_reg_ind, "N") )
	{
		EXEC SQL SELECT ROWID INTO :chr_l_h_rowid:l_i_rowid 
				FROM 	DL_SAFEK 
				WHERE CLIENT 	= :p_client 
				AND 	INSTR_CODE 	= :p_mt_instrument_struct_h 
				AND 	LOCATION_CD = :p_location AND BLOCK_TYPE = :p_block_type;
	printf("sqlca.sqlcode is %d\n",sqlca.sqlcode);
	}
	else if ( !strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind, "Y") && 
					!strcmp(l_mt_core_sys_params_struct_h.proc_reg_ind, "Y") )
	{ 
		EXEC SQL SELECT ROWID INTO :chr_l_h_rowid:l_i_rowid 
				FROM 	DL_SAFEK 
				WHERE CLIENT 		= :p_client 
				AND 	INSTR_CODE 		= :p_mt_instrument_struct_h 
				AND 	LOCATION_CD 	= :p_location 
				AND 	STATUS = :p_posnstatus AND BLOCK_TYPE = :p_block_type;
	}
	Alert("After DL_SAFEK check ");
	IS_ANY_ORA_ERROR;

	if ( APL_ZERO_RESULT_SET )
	{
		Alert("Inside zero result check ");
		memset(&l_dl_safek_struct_h,NULL,sizeof(DL_SAFEK_STRUCT_H));
		strcpy(l_dl_safek_struct_h.h_dl_client, p_client);
		l_dl_safek_struct_i.i_dl_client  = 0;
		strcpy(l_dl_safek_struct_h.h_instr_code, p_mt_instrument_struct_h);
		l_dl_safek_struct_i.i_instr_code   = 0;
		strcpy(l_dl_safek_struct_h.h_block_type, p_block_type);
		l_dl_safek_struct_i.i_block_type   = 0;
		l_dl_safek_struct_h.h_stsafekeep_pos  = 0;
		l_dl_safek_struct_i.i_stsafekeep_pos  = 0;
		l_dl_safek_struct_h.h_safekeep_pos    = 0;
		l_dl_safek_struct_i.i_safekeep_pos    = 0;
		l_dl_safek_struct_h.h_nval_rec = 0;
		l_dl_safek_struct_i.i_nval_rec = 0;
		l_dl_safek_struct_h.h_nval_del = 0;
		l_dl_safek_struct_i.i_nval_del = 0;
		l_dl_safek_struct_h.h_val_rec  = 0;
		l_dl_safek_struct_i.i_val_rec  = 0;
		l_dl_safek_struct_h.h_val_del  = 0;
		l_dl_safek_struct_i.i_val_del  = 0;

		l_dl_safek_struct_h.h_dp_rec   = 0;
		l_dl_safek_struct_i.i_dp_rec   = 0;
		l_dl_safek_struct_h.h_dp_del   = 0;
		l_dl_safek_struct_i.i_dp_del   = 0;

		if ( APL_FAILURE == CO_RtvSysDtTime( l_dl_safek_struct_h.h_access_stamp, 
																l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL;
		}
		else
		{
			l_dl_safek_struct_i.i_access_stamp = 0;
		}

		if ( !strcmp(p_location, APL_NULL_STRING) )
		{
			strcpy(l_dl_safek_struct_h.h_loccode, APL_NULL_STRING);
			l_dl_safek_struct_i.i_loccode = -1;
		}
		else 
		{
			strcpy(l_dl_safek_struct_h.h_loccode, p_location);
			l_dl_safek_struct_i.i_loccode = 0;
		}
		if ( !strcmp(p_posnstatus, APL_NULL_STRING) )
		{
			strcpy(l_dl_safek_struct_h.h_pos_stat, APL_NULL_STRING);
			l_dl_safek_struct_i.i_status_pos = -1;
		}
		else
		{
			strcpy(l_dl_safek_struct_h.h_pos_stat, p_posnstatus);
			l_dl_safek_struct_i.i_status_pos = 0;
		}	

		CR_Proc_InstrQtyRound(*p_qty,p_mt_instrument_struct_h,&l_round_quantity,l_debug_info_ptr);

		//The Position Type is : U
		if ( p_trcode == '1' || p_trcode == '3' || p_trcode == '5' || p_trcode == '7' )
		{
			l_dl_safek_struct_h.h_nval_del = l_round_quantity;
		}
		else if ( p_trcode == '2' || p_trcode == '4' || p_trcode == '6' || p_trcode == '8' )
		{
			l_dl_safek_struct_h.h_nval_rec = l_round_quantity;
		}
		
		printf("\n h_instr_code |%s|",l_dl_safek_struct_h.h_instr_code);
		printf("\n h_location_cd |%s|",l_dl_safek_struct_h.h_loccode);
		printf("\n h_client |%s|", l_dl_safek_struct_h.h_dl_client);
		printf("\n h_access_stamp |%s|", l_dl_safek_struct_h.h_access_stamp);
		printf("\n h_status_pos |%s|",  l_dl_safek_struct_h.h_pos_stat);
		printf("\n h_start_safek|%lf|", l_dl_safek_struct_h.h_stsafekeep_pos);
		printf("\n h_safekeep_pos|%lf|",l_dl_safek_struct_h.h_safekeep_pos);
		printf("\n h_nvalreceive|%lf|",l_dl_safek_struct_h.h_nval_rec);
		printf("\n h_nvaldeliver|%lf|",l_dl_safek_struct_h.h_nval_del);
		printf("\n h_val_rec|%lf|",l_dl_safek_struct_h.h_val_rec);
		printf("\n h_val_del|%lf|",l_dl_safek_struct_h.h_val_del);
		printf("\n h_dp_rec|%lf|",l_dl_safek_struct_h.h_dp_rec);
		printf("\n h_dp_del|%lf|",l_dl_safek_struct_h.h_dp_del);
		printf("\n   h_block_type |%s|",l_dl_safek_struct_h.h_block_type);

		EXEC SQL INSERT INTO DL_SAFEK 
				VALUES (:l_dl_safek_struct_h:l_dl_safek_struct_i);
		IS_ANY_ORA_ERROR ;
	}   			
	else
	{
		Alert("Inside record exist check ");
		if ( p_incdec == 'I' )
		{
			l_IncDecSign = 1;
		}
		else
		{
			l_IncDecSign = -1;
		}

		if ( APL_FAILURE == CO_RtvSysDtTime( chr_l_h_access_stamp, 
																l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL;
		}
		else
		{
			l_i_access_stamp = 0;
		}

		/* Changes done by Prateek for KB_6652(Added "for Update" and IS_ANY_ORA_ERROR in  all Select/Update Queries) - START */

		//The Position Type is : U
		if ( p_trcode == '1' || p_trcode == '3' || p_trcode == '5' || p_trcode == '7' )
		{
			EXEC SQL SELECT NVALDELIVER 
			INTO :l_h_temp_quantity:l_i_temp_qty
			FROM DL_SAFEK
			WHERE ROWID = :chr_l_h_rowid for update;
		
			IS_ANY_ORA_ERROR;

			CR_Proc_InstrQtyRound(l_h_temp_quantity + (l_IncDecSign * (*p_qty)),p_mt_instrument_struct_h,&l_h_temp_quantity_rnd,l_debug_info_ptr);

			EXEC SQL UPDATE DL_SAFEK 
					SET	NVALDELIVER = :l_h_temp_quantity_rnd, 
					ACCESS_STAMP = :chr_l_h_access_stamp:l_i_access_stamp 
					WHERE ROWID = :chr_l_h_rowid;
			IS_ANY_ORA_ERROR;
		}
		else if ( p_trcode == '2' || p_trcode == '4' || p_trcode == '6' || p_trcode == '8' )
		{
			EXEC SQL SELECT NVALRECEIVE
			INTO :l_h_temp_quantity:l_i_temp_qty
			FROM DL_SAFEK
			WHERE ROWID = :chr_l_h_rowid for update;

			IS_ANY_ORA_ERROR;
		
			CR_Proc_InstrQtyRound(l_h_temp_quantity + (l_IncDecSign * (*p_qty)),p_mt_instrument_struct_h,&l_h_temp_quantity_rnd,l_debug_info_ptr);

			EXEC SQL UPDATE DL_SAFEK 
					SET 	NVALRECEIVE = :l_h_temp_quantity_rnd, 
							ACCESS_STAMP = :chr_l_h_access_stamp:l_i_access_stamp 
					WHERE ROWID = :chr_l_h_rowid;
			IS_ANY_ORA_ERROR;
		}
		
	}  
		
	/* Changes done by Prateek for KB_6652(Added "for Update" and IS_ANY_ORA_ERROR in  all Select/Update Queries) - End */

	printf("sqlca.sqlcode is %d\n",sqlca.sqlcode);
	Alert("sqlca.sqlcode is %d\n",sqlca.sqlcode);

	EXEC SQL SELECT nvl(sum(safekeep_pos)+sum(NVALRECEIVE)+sum(VAL_REC)+sum(DP_REC)-sum(NVALDELIVER)-sum(VAL_DEL)-sum(DP_DEL),0)
			INTO :l_total_safeks
			FROM DL_SAFEK
			WHERE CLIENT = :p_client AND INSTR_CODE = :p_mt_instrument_struct_h and BLOCK_TYPE =:p_block_type;
	IS_ANY_ORA_ERROR;


	if (l_total_safeks == 0)
	{
		EXEC SQL UPDATE CAMESGLINK SET TYPEOF_MSG_LNK ='VX' 
		WHERE CLIENT = :p_client AND
		TYPEOF_MSG_LNK = 'VN' AND
		CORP_ID IN 
		(
			SELECT CORP_ID FROM CAEVENT 
			WHERE INSTR_CODE = :p_mt_instrument_struct_h AND
			STATUS IN ('RE','RP','PP')
		);
		IS_ANY_ORA_ERROR;
			
		EXEC SQL UPDATE CAMESGLINK SET TYPEOF_MSG_LNK ='TX' 
		WHERE CLIENT = :p_client AND
		TYPEOF_MSG_LNK = 'TN' AND
		CORP_ID IN 
		(
			SELECT A.CORP_ID FROM CAEVENT A, CACHGEVENT B
			WHERE A.CORP_ID = B.CORP_ID AND
			A.INSTR_CODE = :p_mt_instrument_struct_h AND
			A.STATUS IN ('RE','RP','PP')
		);
		IS_ANY_ORA_ERROR;

		EXEC SQL UPDATE CAMESGLINK SET TYPEOF_MSG_LNK ='XC' 
		WHERE CLIENT = :p_client AND
		TYPEOF_MSG_LNK = 'TC' AND
		CORP_ID IN 
		(
			SELECT A.CORP_ID FROM CAEVENT A, CACHGEVENT B
			WHERE A.CORP_ID = B.CORP_ID AND
			A.INSTR_CODE = :p_mt_instrument_struct_h AND
			A.STATUS IN ('RE','RP','PP')
		);
		IS_ANY_ORA_ERROR;
	}

	
	IS_ANY_ORA_ERROR;
	
	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
							"Exiting processtion DL_Chk_SubAcc_Mod_Posn with success\n",
							NULL,
						   NULL);
		}
		return(APL_SUCCESS);
	
	RETURN_FAILURE : 
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
							"Exiting processtion DL_Chk_SubAcc_Mod_Posn with errors\n",
							NULL,
						   NULL);
		}
		return(APL_FAILURE);

}

int DL_Call_DL_Mod_Posn(SYS_DL_DEAL_STRUCT_H *p_sys_dl_deal_struct_h_a,
						char *l_block_type,
						double *l_availquantity,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca sqlca;
	double p_qty = 0;
	char l_chr_sub_pos_chk[2] = APL_NULL_STRING;
	EXEC SQL SELECT GETCLIENTPARAMBYID('SUBACC_POS_SELL',:p_sys_dl_deal_struct_h_a->h_dl_client) INTO :l_chr_sub_pos_chk FROM DUAL;
	Alert("\n l_chr_sub_pos_chk = |%s|", l_chr_sub_pos_chk);
	Alert("\n p_sys_dl_deal_struct_h_a->h_classofdl = |%s|", p_sys_dl_deal_struct_h_a->h_classofdl);
	Alert("\n p_sys_dl_deal_struct_h_a-> h_clh_flg = |%s|", p_sys_dl_deal_struct_h_a-> h_clh_flg);
	Alert("\n p_sys_dl_deal_struct_h_a->h_ex_arena = |%s|", p_sys_dl_deal_struct_h_a->h_ex_arena);
	Alert("\n p_sys_dl_deal_struct_h_a->h_dealcd = |%s|", p_sys_dl_deal_struct_h_a->h_dealcd);
	
	
	if	(	(!strcmp(l_chr_sub_pos_chk,"Y"))
		&&	(!strcmp(p_sys_dl_deal_struct_h_a->h_ex_arena,"1")) 
		&& 	(!strcmp(p_sys_dl_deal_struct_h_a->h_clh_flg,"C")) 
		&&  (!strcmp(p_sys_dl_deal_struct_h_a->h_classofdl,"1")) 
		&& 	(	(!strcmp(p_sys_dl_deal_struct_h_a->h_dealcd,"1")) 
				|| (!strcmp(p_sys_dl_deal_struct_h_a->h_dealcd,"3"))
			)
		)
	{
		Alert("Calling function DL_Chk_SubAcc_Mod_Posn \n");
		if ( APL_FAILURE == DL_Chk_SubAcc_Mod_Posn(	p_sys_dl_deal_struct_h_a->h_dl_client, 
											p_sys_dl_deal_struct_h_a->h_instr_code, 
											p_sys_dl_deal_struct_h_a->h_loccode, 
											p_sys_dl_deal_struct_h_a->h_pos_stat,
											'U', 
											p_sys_dl_deal_struct_h_a->h_dealcd[0], 
											&p_sys_dl_deal_struct_h_a->h_qty, 
											'I', l_block_type,
											l_debug_info_ptr))
		{
			APL_GOBACK_FAIL;
		}
	}
	else
	{
		Alert("Calling function DL_Mod_Posn \n");
		if ( APL_FAILURE == DL_Mod_Posn(	p_sys_dl_deal_struct_h_a->h_dl_client, 
										p_sys_dl_deal_struct_h_a->h_instr_code, 
										p_sys_dl_deal_struct_h_a->h_loccode, 
										p_sys_dl_deal_struct_h_a->h_pos_stat,
										'U', 
										p_sys_dl_deal_struct_h_a->h_dealcd[0], 
										&p_sys_dl_deal_struct_h_a->h_qty, 
										'I', l_block_type,
										l_debug_info_ptr) )
		{
			APL_GOBACK_FAIL;
		}
	}
	
	Alert("l_availquantity |%lf| \n",l_availquantity);
	Alert("p_qty |%lf| \n",p_qty);
	
	*l_availquantity = p_qty;
	
	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Leaving Function DL_Call_DL_Mod_Posn with success\n",
							NULL,
							NULL);
		}
		return(APL_SUCCESS);

	RETURN_FAILURE :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Leaving Function DL_Call_DL_Mod_Posn with errors\n",
							NULL,
							NULL);
		}
		return(APL_FAILURE);
}

//Below functions added by Dipak for PMS T+0 confirmation - End