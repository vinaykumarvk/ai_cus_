


   
   
   
   
   
   
   
   
   
   
   
   




#include "CR_Common.h"
#include <time.h>

#define	S_TIME_LEN	9
#define	S_DATE_LENGTH	11
#define	S_DATETIME_LENGTH	20
#define	S_YR_ADJUSTMENT 1900	
#define	S_MM_ADJUSTMENT 1
	
EXEC SQL INCLUDE sqlca;



int CO_RtvSysDt(char *chr_p_sys_date, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;

	struct sqlca  sqlca;
	char     	  chr_l_sys_date[S_DATE_LENGTH];

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
	APL_SET_CONTEXT
	EXEC SQL CONTEXT USE	:my_ctx_local;
	#endif
	/* PJ */	
	EXEC SQL SELECT TO_CHAR(SYS_DATE,'DD/MM/YYYY') 
	INTO :chr_l_sys_date 
	FROM PRO_SYS_DATE;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_DATE_NOT_SET,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	strcpy(chr_p_sys_date,chr_l_sys_date);
	strcat(chr_p_sys_date,APL_NULL_TIME);

	
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS	:
	{
		return (APL_SUCCESS);
	}
	RETURN_FAILURE	:
	{
		return (APL_FAILURE);
	}
}



int CO_RtvSysDtTime(char *p_sys_date_time, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;

	struct sqlca  sqlca;
	char     	  chr_l_sys_date[S_DATE_LENGTH];
	short 		  i_chr_l_sys_date=0;

	EXEC SQL VAR chr_l_sys_date IS STRING;


	EXEC SQL END DECLARE SECTION;

	struct tm 		*sys_time=NULL;
	time_t	 		t;
	char		 		chr_time_buf[S_TIME_LEN];
	memset(chr_l_sys_date, APL_NULL_CHAR, sizeof(chr_l_sys_date));
	memset(chr_time_buf,APL_NULL_CHAR,sizeof(chr_time_buf));

	#ifdef APL_THREADS
	APL_SET_CONTEXT
	EXEC SQL CONTEXT USE	:my_ctx_local;
	#endif

	

	sys_time = (struct tm *)calloc(1,sizeof(struct tm));
	APL_MALLOC_FAIL(sys_time)

	t = time(NULL);
	
	localtime_r(&t, sys_time);

	sprintf(chr_time_buf, "%02d:%02d:%02d",sys_time->tm_hour, sys_time->tm_min, sys_time->tm_sec);

	

	EXEC SQL SELECT TO_CHAR(SYS_DATE, 'DD/MM/YYYY') 
	INTO :chr_l_sys_date:i_chr_l_sys_date 
	FROM PRO_SYS_DATE;
	

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_DATE_NOT_SET,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	strcpy(p_sys_date_time,chr_l_sys_date);

	strcat(p_sys_date_time," ");

	strcat(p_sys_date_time,chr_time_buf);



	
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS	:
	{
		free(sys_time);
		return (APL_SUCCESS);
	}
	RETURN_FAILURE	:
	{
		free(sys_time);
		return (APL_FAILURE);
	}
}




int CO_RtvMachDtTime(char *p_mac_date_time, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;
            //AIX - Warnings Removal -- commented unused variable
	//struct sqlca  sqlca;
	//char     	  chr_l_mac_date[S_DATE_LENGTH];
	//short			  i_mac_date = 0;
//	EXEC SQL VAR chr_l_mac_date IS STRING;

	EXEC SQL END DECLARE SECTION;

	struct tm 		*sys_time=NULL;
	time_t	 		t;
	char		 		chr_time_buf[S_DATETIME_LENGTH];
	int				int_year_adj=S_YR_ADJUSTMENT;
	int				int_month_adj=S_MM_ADJUSTMENT;

	#ifdef APL_THREADS
	APL_SET_CONTEXT
	EXEC SQL CONTEXT USE	:my_ctx_local;
	#endif

	

	sys_time = (struct tm *)calloc(1,sizeof(struct tm));
	APL_MALLOC_FAIL(sys_time)

	t = time(NULL);
	
	//gmtime_r(&t, sys_time); // Commented by Kalyan 

	localtime_r(&t, sys_time); // Added by Kalyan this function fetches Local time

	 
	
	sprintf(chr_time_buf, "%02d/%02d/%04d %02d:%02d:%02d",sys_time->tm_mday,sys_time->tm_mon + int_month_adj,sys_time->tm_year + int_year_adj,sys_time->tm_hour, sys_time->tm_min, sys_time->tm_sec);

	


	strcpy(p_mac_date_time,chr_time_buf);

	
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS	:
	{
		free(sys_time);
		return (APL_SUCCESS);
	}
	RETURN_FAILURE	:
	{
		free(sys_time);
		return (APL_FAILURE);
	}
}
