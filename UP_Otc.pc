








#include "Intellect_Common.h"
#include "CO_HostStructdef.h"
#include "DL_Interface.h" 
#include<stdlib.h>
#define FEED_LINERR_LENGTH 500
#define HDAT_LOCNCODE "BOG"
#define MS_MSGNO_534 "534"
#define DLCD_BUY "BUY"
#define SELL_DLCODE "SELL"

char chr_g_client[11];
double dbl_g_acc_tol=0.0;

EXEC SQL INCLUDE SQLCA.H;
int main(int argc,char **argv)// AIX Warning Removal
{
   DEBUG_INFO_STRUCT_H *l_debug_info_ptr = (DEBUG_INFO_STRUCT_H *) NULL;
   INTL_ENV_DATA_STRUCT_H l_intl_env_data_h;
   FILE *l_logfile, *l_finifile;
		char l_temp_processing_status[51] = APL_NULL_STRING;
		/* Added by kotubabu for Linux Migration -Start*/
    #ifdef OS_LINUX
	FILE *l_mat_rept_file=NULL;
	FILE *l_unmat_rept_file=NULL;
	FILE *l_mis_rept_file=NULL;
    #else
    FILE *l_mat_rept_file = APL_OUT_FILE;
    FILE *l_unmat_rept_file = APL_OUT_FILE;
	FILE *l_mis_rept_file = APL_OUT_FILE;
    #endif
    #ifdef OS_LINUX
     l_mat_rept_file = APL_OUT_FILE;
	 l_unmat_rept_file = APL_OUT_FILE;
	 l_mis_rept_file = APL_OUT_FILE;
    #endif
   /* Added by kotubabu for Linux Migration-End*/
   char **temp;
   int int_num=0;
   char chr_l_hoff_file[PATH_LENGTH]=APL_NULL_STRING;
   char chr_l_inifile[PATH_LENGTH] = APL_NULL_STRING;
   struct sqlca sqlca;
   char chr_l_sys_date[11] = APL_NULL_STRING;
   int int_retval=0;

   char chr_uname[APL_USERID_LEN] = APL_NULL_STRING;
   char chr_custody_id_b[APL_USERID_LEN] = APL_NULL_STRING;
   char chr_passwd[APL_USERID_LEN] = APL_NULL_STRING;

   EXEC SQL BEGIN DECLARE SECTION;
   int int_l_count =0;

   EXEC SQL VAR chr_l_sys_date         IS STRING;
   EXEC SQL VAR chr_uname IS STRING;
   EXEC SQL VAR chr_passwd IS STRING;
   EXEC SQL VAR chr_g_client IS STRING;
	EXEC SQL END DECLARE SECTION;

   memset(&l_intl_env_data_h, NULL, sizeof(INTL_ENV_DATA_STRUCT_H));
   strcpy(l_intl_env_data_h.usr, argv[3]);
   strcpy(l_intl_env_data_h.h_mode, argv[4]);
   strcpy(l_intl_env_data_h.processtion, argv[5]);
   strcpy(l_intl_env_data_h.auth_req, argv[6]);
   strcpy(l_intl_env_data_h.subprocess, argv[7]);
   strcpy(l_intl_env_data_h.h_process, argv[8]);



   strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
   strcat(chr_l_inifile,"intl_sun.cfg");
   if ( ( l_finifile=fopen(chr_l_inifile,"r") ) == NULL)
   {
	APL_GOBACK_FAIL
   }
   sqlca.sqlcode=0;
   APL_FETCH_DB_LOGIN_DETAILS(l_finifile, chr_custody_id_b, chr_uname, chr_passwd, APL_OUT_FILE, &l_debug_info_ptr)
   IS_ANY_ORA_ERROR
   EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;
  
  IS_ANY_ORA_ERROR

    if (APL_FAILURE == CO_Rtv_RptFileName( "ot",
				APL_LOGFILE_DESC,
			        100,
					  argv[5],
			        argv,
			        &l_logfile,
			        &l_debug_info_ptr ))	
   {
	APL_GOBACK_FAIL
   }
    if (APL_FAILURE == CO_Rtv_RptFileName( "OT",
				"OTC Matching Report",
			        100,
					  argv[5],
			        argv,
			        &l_mat_rept_file,
			        &l_debug_info_ptr ))	
   {
	APL_GOBACK_FAIL
   }

	fprintf(l_mat_rept_file,"\n");
	fprintf(l_mat_rept_file,"              Details of Matching OTC Trades    \n");
	fprintf(l_mat_rept_file,"\n");
	fprintf(l_mat_rept_file,"\n");
   fprintf(l_mat_rept_file,"Account           Reference           Instrurity Code  Trade Dt    Settle Dt   TradeCode   Qty    Amount   CounterParty Desc    SMAC-Account  SMAC-RefNo  Matching Remark\n");
fprintf(l_mat_rept_file,"-----------------------------------------------------------------------------------------------------------------------------------\n");

	sleep(1);

    if (APL_FAILURE == CO_Rtv_RptFileName( "OT",
				"OTC UnMatch Report",
			        100,
					  argv[5],
			        argv,
			        &l_unmat_rept_file,
			        &l_debug_info_ptr ))	
   {
	APL_GOBACK_FAIL
   }

	fprintf(l_unmat_rept_file,"\n");
	fprintf(l_unmat_rept_file,"              Details of UnMatching OTC Trades    \n");
	fprintf(l_unmat_rept_file,"\n");
	fprintf(l_unmat_rept_file,"\n");
   fprintf(l_unmat_rept_file,"Account           Reference           Instrurity Code  Trade Dt    Settle Dt   TradeCode   Qty    Amount   CounterParty Desc    SMAC-Account  SMAC-RefNo  UnMatch Remark\n");	
fprintf(l_unmat_rept_file,"----------------------------------------------------------------------------------------------------------------------------------\n");

	sleep(1);
    if (APL_FAILURE == CO_Rtv_RptFileName( "OT",
				"OTC Missing Report",
			        100,
					  argv[5],
			        argv,
			        &l_mis_rept_file,
			        &l_debug_info_ptr ))	
   {
	APL_GOBACK_FAIL
   }

	fprintf(l_mis_rept_file,"\n");
	fprintf(l_mis_rept_file,"              Details of Missing OTC Trades in SMAC   \n");
	fprintf(l_mis_rept_file,"\n");
   fprintf(l_mis_rept_file,"Account           Reference           Instrurity Code  Trade Dt    Settle Dt   TradeCode   Qty    Amount   CounterParty Desc   Missing Remark\n"); 
fprintf(l_mis_rept_file,"-------------------------------------------------------------------------------------------------------------\n");

	sleep(1);
   if ( APL_FAILURE == CO_ReadToken(l_finifile,
				    "INTL_UPL_PATH",
				    chr_l_hoff_file,
				    &l_debug_info_ptr ))
    {
	fprintf(l_logfile,"\nReturning unsuccessfully from CO_ReadToken\n");
	APL_GOBACK_FAIL
    }


   if (APL_FAILURE == CO_SplitStr( argv[9],
				    '|',
				    &int_num,
				    &temp ))
   {
	fprintf(l_logfile,"Returns unsuccessfully from CO_SplitStr\n");
   }
   if (int_num < 2)
   {
	fprintf(l_logfile,"\n InValid Arguments\n");
   APL_GOBACK_FAIL
	}

     EXEC SQL SELECT PROCESSING_STATUS into :l_temp_processing_status
     FROM SYS_BATCHPROC
     WHERE PROCESS_NAME=:argv[0]
     AND   PROC_INIT=:argv[1]
     AND   STARTDATE=:argv[2]
     AND   STATUS='started'
     FOR UPDATE OF PROCESSING_STATUS,STATUS; 

   if(APL_ZERO_RESULT_SET)
   {
      CO_ProcMonitor(l_logfile,"E:No entry in batch_in_proc\n",NULL,NULL);
      APL_GOBACK_FAIL
   }

   if (APL_FAILURE == CO_RtvSysParams(&l_debug_info_ptr))
   {
   	CO_ProcMonitor(l_logfile, "Error In Getting System Parameters", NULL, NULL);
   	CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
   	APL_GOBACK_FAIL
  	} 

   EXEC SQL SELECT to_char(SYS_DATE,'DD/MM/YYYY') 
		into :chr_l_sys_date FROM PRO_SYS_DATE;

   strcat(chr_l_hoff_file,temp[1]);
	strcpy(chr_g_client,temp[2]);
	fprintf(l_logfile,"OTC File Name : %s\n",chr_l_hoff_file);
	fprintf(l_logfile,"Account No    : %s\n",chr_g_client);
	fprintf(l_logfile,"System Date   : %s\n",chr_l_sys_date);

   CO_ProcMonitor(l_logfile,"Start Processing\n",&l_debug_info_ptr,&l_intl_env_data_h);

 	if(APL_FAILURE==ReadRecord(l_mat_rept_file,l_unmat_rept_file,l_mis_rept_file,&l_intl_env_data_h,chr_l_hoff_file,chr_l_sys_date,l_logfile,&l_debug_info_ptr))
    {
	    APL_GOBACK_FAIL 
    }

fprintf(l_mis_rept_file,"\n\n-------------------------------------------------------------------------------------------------------------\n");
   fprintf(l_mis_rept_file,"              Transactions Not Found in OTC File");
fprintf(l_mis_rept_file,"\n-------------------------------------------------------------------------------------------------------------\n");
   int_retval=CR_Proc_MisTxnrRpt(l_mis_rept_file,&l_intl_env_data_h,l_logfile,&l_debug_info_ptr);

  CO_ProcMonitor(l_logfile,"Finished Processing\n",&l_debug_info_ptr,&l_intl_env_data_h);
  
  APL_GOBACK_SUCCESS

  RETURN_SUCCESS : 
	  EXEC SQL UPDATE SYS_BATCHPROC
	  SET  status = 'completed'
	  WHERE PROCESS_NAME=:argv[0]
	  AND   PROC_INIT=:argv[1]
	  AND   STARTDATE=:argv[2]
	  AND   STATUS='started';

  	  EXEC SQL COMMIT WORK RELEASE;			   
	  fprintf(l_logfile,"Successfully Exiting the program OTC_Uplaod\n"); 
	  CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
	  CO_Proc_RptClose(l_mat_rept_file, &l_debug_info_ptr);
	  CO_Proc_RptClose(l_unmat_rept_file, &l_debug_info_ptr);
	  CO_Proc_RptClose(l_mis_rept_file, &l_debug_info_ptr);
	  fclose(l_finifile);
	  exit(APL_SUCCESS);

  RETURN_FAILURE :
  	  EXEC SQL COMMIT WORK RELEASE;			   
	  fprintf(l_logfile,"Unsuccessfully Exiting the program OTC_Upload\n"); 
	  CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
	  CO_Proc_RptClose(l_mat_rept_file, &l_debug_info_ptr);
	  CO_Proc_RptClose(l_unmat_rept_file, &l_debug_info_ptr);
	  CO_Proc_RptClose(l_mis_rept_file, &l_debug_info_ptr);
	  fclose(l_finifile);
	  exit(APL_FAILURE);
}

 


int ReadRecord(FILE *p_matrpt_file,FILE *p_unmatrpt_file, FILE *p_misrpt_file,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,char *p_hoff_file,char *chr_p_sys_date,FILE *p_logfile,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
/* Added by kotubabu for Linux Migration -Start*/
#ifdef OS_LINUX
FILE *l_fhoff_file;
FILE *l_logfile;
#else
FILE *l_fhoff_file = APL_OUT_FILE;
FILE *l_logfile = APL_OUT_FILE;
#endif
/* Added by kotubabu for Linux Migration-End*/
char *chr_l_hoff_file;
char chr_tempbuff_a[500] = APL_NULL_STRING;
char chr_l_sys_date[11]=APL_NULL_STRING;
char chr_l_hdat_line[500] = APL_NULL_STRING;
int int_retval=0;
int int_l_rec = 1;
char chr_l_lot_qty[21];


l_logfile=p_logfile;

chr_l_hoff_file=p_hoff_file;
strcpy(chr_l_sys_date,chr_p_sys_date);
   if ( ( l_fhoff_file=fopen(chr_l_hoff_file,"r") ) == NULL)
	{ 
	 fprintf(l_logfile,"Could not open the handoff h_file \n");
	 APL_GOBACK_FAIL 
   }
   else 
	 { 
	 fprintf(l_logfile,"Opened the handoff h_file \n");
	 }

 
		
memset(chr_tempbuff_a,APL_NULL_CHAR,500);
fgets(chr_tempbuff_a,FEED_LINERR_LENGTH,l_fhoff_file);     
for ( ; ; )
	{
	memset(chr_l_hdat_line,APL_NULL_CHAR,500);
	strcpy(chr_l_hdat_line,chr_tempbuff_a);	
	memset(chr_tempbuff_a,APL_NULL_CHAR,500);
	fgets(chr_tempbuff_a,FEED_LINERR_LENGTH,l_fhoff_file);
fprintf(p_logfile,"--------------------------------------------------------------------------------------------\n");
	fprintf(l_logfile,"Record No : %d\n",int_l_rec);
	int_l_rec++;
	    int_retval=CR_Proc_EOCUpd(p_matrpt_file,p_unmatrpt_file,p_misrpt_file,p_intl_envdatastruct_h,chr_l_hdat_line,chr_l_sys_date,l_logfile,l_debug_info_ptr);
	memset(chr_l_hdat_line,APL_NULL_CHAR,500);

		if (feof(l_fhoff_file))
		{
	   	 break;
		}
	}
 
 APL_GOBACK_SUCCESS

 RETURN_SUCCESS  :
   {
      fprintf(p_logfile,"Success from ReadRecord \n");
		CO_FreeErrLst(l_debug_info_ptr);
      fclose(l_fhoff_file);
		return(APL_SUCCESS);
   }

   RETURN_FAILURE  :
   {
      fprintf(p_logfile,"Failure from ReadRecord \n");
		CO_FreeErrLst(l_debug_info_ptr);
      fclose(l_fhoff_file);
      return(APL_FAILURE);
   }
}

 

int CR_Proc_EOCUpd(FILE *p_matrpt_file, FILE *p_unmatrpt_file, FILE *p_misrpt_file,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,char *p_hdat_line,char *chr_p_sys_date,FILE *p_logfile,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{ 
int int_l_decimallen = 0;
double dbl_l_amount_a = 0.0,h_amt=0.0,h_safekeep_pos=0.0,h_val_rec=0.0,h_val_del=0.0,h_nval_del=0.0,h_nval_rec=0.0;
double l_quantity = 0,h_qty=0;
char chr_l_amount_temp[25] = APL_NULL_STRING;
int int_noelem =  0;
int int_l_rpr_seq_num = 0;
int i = 0;
int int_l_amount_len=0;
char h_ora_rowid[APL_ROWID_LEN] = APL_NULL_STRING;
char **chr_l_param;
char chr_h_smacaccount[APL_CLIENT_LENGTH] = APL_NULL_STRING;
char chr_l_cclient[APL_CLIENT_LENGTH] = APL_NULL_STRING;
char chr_l_cname[66] = APL_NULL_STRING;
char chr_l_cbiccode[13] = APL_NULL_STRING;
char h_loccode[5]= APL_NULL_STRING;
char h_instr_code[APL_INSTRUMENTCODE_LEN] = APL_NULL_STRING;
char h_dealcd[2] = APL_NULL_STRING;
char chr_h_countacc_desc[66] = APL_NULL_STRING;
char h_dlt[APL_DATE_LEN]=APL_NULL_STRING;
char h_setldt[APL_DATE_LEN]=APL_NULL_STRING;
char h_fail_cd[3] = APL_NULL_STRING;
char h_instr_isin[13]=APL_NULL_STRING;
char chr_l_systemdatetime[APL_DATE_LEN] = APL_NULL_STRING;
char chr_l_trdt_temp[APL_DATE_LEN] = APL_NULL_STRING;
char chr_l_settledt_temp[APL_DATE_LEN] = APL_NULL_STRING;
char chr_l_isin[13]=APL_NULL_STRING;
char chr_l_reason[100]=APL_NULL_STRING;
short i_qty=0;
short i_amt=0;
short i_countacc_desc=0;
short i_failreas_cd=0;
short i_smacaccount=0;

char chr_l_refno_a[17] = APL_NULL_STRING;
char chr_l_smacrefno[17] = APL_NULL_STRING;
char chr_l_locncode_c[5]= APL_NULL_STRING;
char chr_l_instrcode_a[APL_INSTRUMENTCODE_LEN] = APL_NULL_STRING;
char chr_l_ccycode[4] = APL_NULL_STRING;
char chr_l_trcode_a[2] = APL_NULL_STRING;
char chr_l_opptrcode[2] = APL_NULL_STRING;
char chr_l_failcode_A[3] = APL_NULL_STRING;
char chr_l_countacc_desc[66] = APL_NULL_STRING;
char chr_l_trcode_temp[5] = APL_NULL_STRING;
char chr_t_trcode[4] = APL_NULL_STRING;

char chr_l_acc[13] = APL_NULL_STRING;
char chr_l_trdt_a[APL_DATE_LEN] = APL_NULL_STRING;
char chr_l_settledt_a[APL_DATE_LEN] = APL_NULL_STRING;
char chr_l_sd[11] = APL_NULL_STRING;
char chr_l_pad_qty[6] = APL_NULL_STRING;
int	int_l_ccseligfail_flg	= 0;
int int_l_length = 0;
struct sqlca sqlca;
char chr_l_line_read[500]=APL_NULL_STRING;
char chr_l_sys_date[11]=APL_NULL_STRING;
DL_DEALAUDIT_STRUCT_H	 l_dl_dealaudit_struct_h;
short i_dl_client = 0;
short i_reg_bcl_ind = 0;
short i_instr_code	=0;
short i_currencycode	=0;
short i_loccode	=0;
short i_regbrflag	=0;
short i_indentity_no	=0;
short i_trdt_temp=0;
short i_settledt_temp=0;
short i_smacrefno=0;
short countnotprop=0;

EXEC SQL BEGIN DECLARE SECTION;
   int int_l_count = 0;
EXEC SQL VAR h_instr_code IS STRING;
EXEC SQL VAR h_fail_cd IS STRING;
EXEC SQL VAR chr_h_countacc_desc IS STRING;
EXEC SQL VAR h_dlt IS STRING;
EXEC SQL VAR h_setldt IS STRING;
EXEC SQL VAR chr_l_instrcode_a IS STRING;
EXEC SQL VAR chr_l_refno_a IS STRING;
EXEC SQL VAR chr_l_smacrefno IS STRING;
EXEC SQL VAR chr_l_failcode_A IS STRING;
EXEC SQL VAR chr_l_ccycode IS STRING;
EXEC SQL VAR chr_l_countacc_desc IS STRING;
EXEC SQL VAR chr_l_trdt_a IS STRING;
EXEC SQL VAR chr_l_settledt_a IS STRING;
EXEC SQL VAR chr_l_systemdatetime IS STRING;
EXEC SQL VAR h_ora_rowid IS STRING;
EXEC SQL VAR chr_l_amount_temp IS STRING;
EXEC SQL VAR chr_l_settledt_temp IS STRING;
EXEC SQL VAR chr_l_trdt_temp IS STRING;
EXEC SQL VAR chr_l_trcode_temp IS STRING;
EXEC SQL VAR chr_t_trcode IS STRING;
EXEC SQL VAR chr_l_opptrcode IS STRING;
EXEC SQL VAR chr_h_smacaccount IS STRING;
EXEC SQL VAR chr_l_cclient IS STRING;
EXEC SQL VAR chr_l_cname IS STRING;
EXEC SQL VAR chr_l_cbiccode IS STRING;



EXEC SQL END DECLARE SECTION;
sqlca.sqlcode = 0;

memset(&l_dl_dealaudit_struct_h,NULL,sizeof(DL_DEALAUDIT_STRUCT_H));
memset(chr_h_countacc_desc,APL_NULL_CHAR,66);
memset(chr_h_smacaccount,APL_NULL_CHAR,APL_CLIENT_LENGTH);
memset(chr_l_cclient,APL_NULL_CHAR,APL_CLIENT_LENGTH);
memset(chr_l_cname,APL_NULL_CHAR,66);
memset(chr_l_cbiccode,APL_NULL_CHAR,13);
memset(chr_l_trcode_temp,APL_NULL_CHAR,5);
memset(chr_t_trcode,APL_NULL_CHAR,4);
memset(chr_l_opptrcode,APL_NULL_CHAR,2);

strcpy(chr_l_sys_date,chr_p_sys_date);
strcpy(chr_l_line_read,p_hdat_line);

memset(h_ora_rowid,APL_NULL_CHAR,APL_ROWID_LEN);

int_l_length = strlen(chr_l_line_read);

for (i = 0;i <int_l_length;i++)
{
	if ((chr_l_line_read[i] == '\r') || (chr_l_line_read[i] == '\n'))
	{
		chr_l_line_read[i]=',';
		chr_l_line_read[i+1]=APL_NULL_CHAR;
		break;
	}

}	

CO_SplitStr(chr_l_line_read,',', &int_noelem, &chr_l_param);
if (int_noelem < 11)
{
fprintf(p_logfile,"11 elements not int_found - The record details are not complete. \n");
fprintf(p_misrpt_file,"Invalid Record --"); 
fprintf(p_misrpt_file,"[[[%s]]]\n",p_hdat_line); 
countnotprop=1;
APL_GOBACK_FAIL;
}

strcpy(chr_l_refno_a,chr_l_param[8]);
strcpy(chr_l_trdt_a,chr_l_param[1]);
strcpy(chr_l_trcode_temp,chr_l_param[6]);
strcpy(chr_l_isin,chr_l_param[4]);
l_quantity = atol(chr_l_param[3]);
strcpy(chr_l_countacc_desc,chr_l_param[10]);
dbl_l_amount_a = atof(chr_l_param[7]);
strcpy(chr_l_settledt_a,chr_l_param[2]);
strcat(chr_l_trdt_a," 12:00:00"); 
strcat(chr_l_settledt_a," 12:00:00"); 
fprintf(p_logfile,"before my change \n");
EXEC SQL SELECT TRIM(:chr_l_trcode_temp) INTO :chr_t_trcode FROM DUAL;
fprintf(p_logfile,"before 1 my change \n");
IS_ANY_ORA_ERROR
fprintf(p_logfile,"before 2 my change \n");
memset(chr_l_trcode_temp,APL_NULL_CHAR,5);
strcpy(chr_l_trcode_temp,chr_t_trcode);


if (strlen(chr_l_trdt_a) !=19) 
	{
	fprintf(p_logfile,"Trade Date is not proper\n");
	fprintf(p_logfile,"Invalid Trade Date:[%s]\n",chr_l_trdt_a);
   memset(chr_l_reason,APL_NULL_CHAR,100);
   sprintf(chr_l_reason,"Invalid Trade Date:[%s]",chr_l_trdt_a); 
	APL_GOBACK_FAIL;
	}

if ((strcmp(chr_l_trcode_temp,"RVP") == 0)||(strcmp(chr_l_trcode_temp,"rvp") == 0)) 
   {
   strcpy(chr_l_trcode_a,"4"); 
   strcpy(chr_l_opptrcode,"3"); 
	}
else if ((strcmp(chr_l_trcode_temp,"RF")==0)||(strcmp(chr_l_trcode_temp,"rf") == 0))
	{
   strcpy(chr_l_trcode_a,"2"); 
   strcpy(chr_l_opptrcode,"1"); 
	}
else if ((strcmp(chr_l_trcode_temp,"DF")==0)||(strcmp(chr_l_trcode_temp,"df") == 0))
	{
   strcpy(chr_l_trcode_a,"1"); 
   strcpy(chr_l_opptrcode,"2"); 
	}
else if ((strcmp(chr_l_trcode_temp,"DVP")==0)||(strcmp(chr_l_trcode_temp,"dvp") == 0))
	{
   strcpy(chr_l_trcode_a,"3"); 
   strcpy(chr_l_opptrcode,"4"); 
	}
else
	{
	  fprintf(p_logfile,"Trade Code is not proper\n");
	  fprintf(p_logfile,"Invalid Trade Code:[%s]\n",chr_l_trcode_temp);
     memset(chr_l_reason,APL_NULL_CHAR,100); 
     sprintf(chr_l_reason,"Invalid Trade Code:[%s]",chr_l_trcode_temp);
	  APL_GOBACK_FAIL;
	}

if (strlen(chr_l_isin)>12)
	{
	fprintf(p_logfile,"ISIN invalid:[%s]\n",chr_l_isin);
   memset(chr_l_reason,APL_NULL_CHAR,100);
   sprintf(chr_l_reason,"ISIN invalid:[%s]",chr_l_isin);
	APL_GOBACK_FAIL;
	}

if (strlen(chr_l_settledt_a) !=19) 
	{
	fprintf(p_logfile,"Settle Date is not proper:[%s]\n",chr_l_settledt_a);
   memset(chr_l_reason,APL_NULL_CHAR,100);
   sprintf(chr_l_reason,"Settle Date is not proper:[%s]",chr_l_settledt_a);
	APL_GOBACK_FAIL;
	}

if (strlen(chr_l_trdt_a) !=19) 
	{
	fprintf(p_logfile,"Trade Date is not proper:[%s]\n",chr_l_trdt_a);
   memset(chr_l_reason,APL_NULL_CHAR,100);
   sprintf(chr_l_reason,"Trade Date is not proper:[%s]",chr_l_trdt_a);
	APL_GOBACK_FAIL;
	}

if(APL_FAILURE == CO_RtvSysDtTime(chr_l_systemdatetime,l_debug_info_ptr))
{
	//fprintf(p_logfile,"Error in retrieving the system chr_date time \n",l_debug_info_ptr); AIX Migration Changes
	fprintf(p_logfile,"Error in retrieving the system chr_date time \n");
   memset(chr_l_reason,APL_NULL_CHAR,100);
   sprintf(chr_l_reason,"Error in retrieving the system chr_date time");
	APL_GOBACK_FAIL
}
memset(chr_l_instrcode_a,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);

EXEC SQL SELECT instr_code
INTO 	:chr_l_instrcode_a:i_instr_code
FROM MT_INSTRUMENT
where instr_isin = rtrim(:chr_l_isin) ;


if( sqlca.sqlcode==1403 )
{
	fprintf(p_logfile,"Instrode Not Found For ISIN = [%s]\n",chr_l_isin);
   memset(chr_l_reason,APL_NULL_CHAR,100);
   sprintf(chr_l_reason,"Instrode Not Found For ISIN = [%s]",chr_l_isin);
	APL_GOBACK_FAIL;
}
else
IS_ANY_ORA_ERROR

if (!strcmp(chr_l_trdt_a,APL_NULL_STRING))
{
	fprintf(p_logfile,"Trade Date not int_found \n");
   memset(chr_l_reason,APL_NULL_CHAR,100);
   sprintf(chr_l_reason,"Trade Date not found");
	APL_GOBACK_FAIL
}

if (!strcmp(chr_l_settledt_a,APL_NULL_STRING))
{
	fprintf(p_logfile,"Settle Date not int_found \n");
    memset(chr_l_reason,APL_NULL_CHAR,100);
    sprintf(chr_l_reason,"Settle Date not int_found ");
	APL_GOBACK_FAIL
}
fprintf(p_logfile,"\nA/C Number  :%s:\n",chr_g_client);
fprintf(p_logfile,"  Trade Date :%s:\n",chr_l_trdt_a);
fprintf(p_logfile,"  Settle Date :%s:\n",chr_l_settledt_a);
fprintf(p_logfile,"  Instrode :%s:\n",chr_l_instrcode_a);
fprintf(p_logfile,"  Quantity :%lf:\n",l_quantity);
fprintf(p_logfile,"  Opp Trcode :%s:\n",chr_l_opptrcode);

fprintf(p_logfile,"  Trade Ref No :%s:\n",chr_l_refno_a);
fprintf(p_logfile,"  Trcode :%s:\n",chr_l_trcode_temp);
fprintf(p_logfile,"  ISIN :%s:\n",chr_l_isin);
fprintf(p_logfile,"  Counterparty Desc :%s:\n",chr_l_countacc_desc);
fprintf(p_logfile,"  Amount :%lf:\n",dbl_l_amount_a);

EXEC SQL SELECT ROWID,INSTR_CODE,DEAL_DATE,SETL_DATE,QTY,DEAL_CD,AMOUNT,TRIM(CP_CLTNAME),FAILREASON_CD,CLIENT,IDENTIY_NO
			  INTO :h_ora_rowid,:h_instr_code,:h_dlt,:h_setldt,:h_qty:i_qty,:h_dealcd,:h_amt:i_amt,:chr_h_countacc_desc:i_countacc_desc,:h_fail_cd:i_failreas_cd,:chr_h_smacaccount:i_smacaccount,:chr_l_smacrefno:i_smacrefno
           FROM DL_DEAL
          WHERE DOMESTIC_CPCLT=:chr_g_client
            AND DEAL_DATE =:chr_l_trdt_a
				AND SETL_DATE =:chr_l_settledt_a 
				AND INSTR_CODE =:chr_l_instrcode_a
				AND QTY =:l_quantity
				AND DEAL_CD =:chr_l_opptrcode
            AND (COMM_IDENT_NO <> 'OTC-MATCH' OR COMM_IDENT_NO IS NULL)
				AND LOCATION_CD='BOG'
				AND (FAILREASON_CD IS NULL OR FAILREASON_CD IN ('41','98','30'))
            AND DEAL_STAT in ('CQ','CD','AA');
fprintf(p_logfile,"REACHED MATCHING QUERY:%d: \n",sqlca.sqlcode);
fprintf(p_logfile," SMAC  Trade Ref No :%s:\n",chr_l_smacrefno);
fprintf(p_logfile,"\nSMAC A/C Number  :%s:\n",chr_h_smacaccount);

fprintf(p_logfile,"AFTER MATCHING QUERY \n");

if (sqlca.sqlcode == -2112 )
	{
     fprintf(p_logfile,"\nMultiple Trades Found for Account:[%s] RefNo:[%s]",chr_g_client,chr_l_refno_a);
     memset(chr_l_reason,APL_NULL_CHAR,100);
	  sprintf(chr_l_reason,"\nMultiple Trades Found for Account:[%s] RefNo:[%s]",chr_g_client,chr_l_refno_a);
//fprintf(p_unmatrpt_file,"\n%s  %s  %s %s  %s  %s  %lf  %lf  %s  Not Available  Not Available  %s %s",chr_g_client,chr_l_refno_a,chr_l_instrcode_a,chr_l_trdt_a,chr_l_settledt_a,chr_l_trcode_temp,l_quantity,dbl_l_amount_a,chr_l_countacc_desc,chr_l_reason); AIX Migration Changes
fprintf(p_unmatrpt_file,"\n%s  %s  %s %s  %s  %s  %lf  %lf  %s  Not Available  Not Available  %s",chr_g_client,chr_l_refno_a,chr_l_instrcode_a,chr_l_trdt_a,chr_l_settledt_a,chr_l_trcode_temp,l_quantity,dbl_l_amount_a,chr_l_countacc_desc,chr_l_reason); 
     countnotprop=1;
	  APL_GOBACK_FAIL
	}

if (sqlca.sqlcode == 1403 )
	{
     fprintf(p_logfile,"\nNo Corresponding Trade Found in SMAC Account:[%s] Refno:[%s]",chr_g_client, chr_l_refno_a);
     memset(chr_l_reason,APL_NULL_CHAR,100);
     sprintf(chr_l_reason,"No Corresponding Trade Found in SMAC Account:[%s] Refno:[%s]",chr_g_client, chr_l_refno_a);
	  APL_GOBACK_FAIL
	}

if (sqlca.sqlcode !=0 )
	{
     fprintf(p_logfile,"\n Error Occured while processing records for Account:[%s] Refno:[%s]",chr_g_client,chr_l_refno_a);
     memset(chr_l_reason,APL_NULL_CHAR,100);
     sprintf(chr_l_reason,"Error Occured while processing records [%d]",sqlca.sqlcode);
     APL_GOBACK_FAIL
	}

    fprintf(p_logfile,"hinstr_code[%s]\n",h_instr_code);
    fprintf(p_logfile,"linstr_code[%s]\n",chr_l_instrcode_a);
    fprintf(p_logfile,"h_trdt[%s]\n",h_dlt);
    fprintf(p_logfile,"l_trdt[%s]\n",chr_l_trdt_a);
    fprintf(p_logfile,"h_settledt[%s]\n",h_setldt);
    fprintf(p_logfile,"l_settledt[%s]\n",chr_l_settledt_a);
    fprintf(p_logfile,"h_qty[%f]\n",h_qty);
    fprintf(p_logfile,"l_qty[%f]\n",l_quantity);
    fprintf(p_logfile,"h_countacc_desc[%s]\n",chr_h_countacc_desc);
    fprintf(p_logfile,"l_countacc_desc[%s]\n",chr_l_countacc_desc);

EXEC SQL SELECT CLN_TOLERANCE INTO :dbl_g_acc_tol
           FROM MT_CLIENT WHERE CLN_CODE = :chr_h_smacaccount;

if (sqlca.sqlcode == 1403 )
   {
     fprintf(p_logfile,"Account Not Found :[%s]",chr_g_client);
     return(1);
   }
else if (sqlca.sqlcode !=0)
   {
     fprintf(p_logfile,"Error Occured while fetching Cash tolerance for Account [%s]",chr_g_client);
     return(1);
   }
else
   fprintf(p_logfile,"Cash Tolerance for Account [%s] is :[%lf]",chr_g_client,dbl_g_acc_tol);


   if ( VAL_DELIVER_DEAL(h_dealcd[0]) ) 
   {  
      EXEC SQL SELECT SUM(NVL(SAFEKEEP_POS,0)),
                      SUM(NVL(VAL_REC,0)),
                      SUM(NVL(VAL_DEL,0)),
                      SUM(NVL(NVALRECEIVE,0)),
                      SUM(NVL(NVALDELIVER,0))
                 INTO :h_safekeep_pos, h_val_rec,h_val_del, h_nval_rec,h_nval_del
                 FROM DL_SAFEK
                WHERE CLIENT =:chr_h_smacaccount
                  AND INSTR_CODE=:h_instr_code
                  AND LOCATION_CD='BOG'; 

      fprintf(p_logfile,"\n Checking Position %d hahaha\n",sqlca.sqlcode);
      IS_ANY_ORA_ERROR
    } 

if (h_amt == dbl_l_amount_a)
{
	memset(&l_dl_dealaudit_struct_h, NULL, sizeof(DL_DEALAUDIT_STRUCT_H));
   fprintf(p_logfile,"\n No Cash Difference for Account:[%s] Refno:[%s] SMAC Amount:[%lf] OTC Amt:[%lf]",chr_g_client,chr_l_refno_a,h_amt, dbl_l_amount_a);
 
      if ((h_qty > (h_safekeep_pos+h_val_rec-h_val_del))&&(VAL_DELIVER_DEAL(h_dealcd[0])))
      {
        if (strcmp(h_fail_cd,"15"))
          {
	    	EXEC SQL UPDATE DL_DEAL SET 
		   COMM_IDENT_NO='OTC-SHORT',	
	  	   FAILREASON_CD='15',
	  	   SUB_FAIL_CD=0
	  	   WHERE ROWID=:h_ora_rowid;
         fprintf(p_logfile,"\n Updating Failcode %d hahaha\n",sqlca.sqlcode);

     	   IS_ANY_ORA_ERROR
	  	   strcpy(l_dl_dealaudit_struct_h.h_fail_cd, "15");
         fprintf(p_logfile,"Trade Failcoded with 15 Account:[%s] Refno:[%s] due to lack of Positions ",chr_h_smacaccount, chr_l_smacrefno);
			}
         memset(chr_l_reason,APL_NULL_CHAR,100);
         sprintf(chr_l_reason,"Perfect Match But Short Position");
	      fprintf(p_matrpt_file,"\n%s  %s  %s  %s  %s  %s   %lf  %lf  %s  %s  %s  %s",chr_g_client,chr_l_refno_a,chr_l_instrcode_a,chr_l_trdt_a,chr_l_settledt_a,chr_l_trcode_temp,l_quantity,dbl_l_amount_a,chr_l_countacc_desc,chr_h_smacaccount,chr_l_smacrefno,chr_l_reason);
       }
       else
      {
        if (strcmp(h_fail_cd,"90")) 
		  {
	    	EXEC SQL UPDATE DL_DEAL SET 
         COMM_IDENT_NO='OTC-MATCH',
	  	   FAILREASON_CD='90',
	  	   SUB_FAIL_CD=0
	  	   WHERE ROWID=:h_ora_rowid;
         fprintf(p_logfile,"\n Updating Failcode %d hahaha\n",sqlca.sqlcode);

     	   IS_ANY_ORA_ERROR
	  	   strcpy(l_dl_dealaudit_struct_h.h_fail_cd, "90");
         fprintf(p_logfile,"Trade Failcoded with 90 Account:[%s] Refno:[%s] for perfect mactch  ",chr_h_smacaccount, chr_l_smacrefno);
		  }
         memset(chr_l_reason,APL_NULL_CHAR,100);
         sprintf(chr_l_reason,"Perfect Match");
	      fprintf(p_matrpt_file,"\n%s  %s  %s  %s  %s  %s %lf  %lf  %s  %s  %s  %s",chr_g_client,chr_l_refno_a,chr_l_instrcode_a,chr_l_trdt_a,chr_l_settledt_a,chr_l_trcode_temp,l_quantity,dbl_l_amount_a,chr_l_countacc_desc,chr_h_smacaccount,chr_l_smacrefno,chr_l_reason);

      }  
   if (!strcmp(l_dl_dealaudit_struct_h.h_fail_cd, "90") || !strcmp(l_dl_dealaudit_struct_h.h_fail_cd, "15"))
   {
	  	   strcpy(l_dl_dealaudit_struct_h.h_dl_client, chr_h_smacaccount);
	  	   strcpy(l_dl_dealaudit_struct_h.h_indentity_no, chr_l_smacrefno);
	  	   strcpy(l_dl_dealaudit_struct_h.h_trail_for, "T");
	  	   strcpy(l_dl_dealaudit_struct_h.h_processdetail, "Update Fail Reason");
	  	   strcpy(l_dl_dealaudit_struct_h.h_proc_usr, "SYSTEM");
	  	   strcpy(l_dl_dealaudit_struct_h.h_subprocess, APL_NULL_STRING);
	  	   strcpy(l_dl_dealaudit_struct_h.h_logdate, APL_NULL_STRING);
	  	   l_dl_dealaudit_struct_h.h_qty = h_qty;
	  	   strcpy(l_dl_dealaudit_struct_h.h_dlfromord, "N");

	  	   if (APL_FAILURE == CR_Mod_CLHAudTrail(&l_dl_dealaudit_struct_h, l_debug_info_ptr))
		  	{
           fprintf(p_logfile,"\n Fail Updating Audit %d hahaha\n",sqlca.sqlcode);
           memset(chr_l_reason,APL_NULL_CHAR,100);
           sprintf(chr_l_reason,"Failed To Update AuditTrail");
			  APL_GOBACK_FAIL
		  	}
	  	   fprintf(p_logfile,"\nTrade & Audit Trail Updated");

	  	   if (sqlca.sqlcode == 0)
         {    
			  if ( APL_FAILURE == GBDbInsIMSGENT( MS_MSGNO_534,
                                             chr_l_smacrefno,
                                             chr_h_smacaccount,
                                             'Y',
                                             APL_NULL_STRING,
                                             l_debug_info_ptr ) )
     		  {
        		 fprintf(p_logfile,"Failed To Insert into IMSGENT table\n");
             memset(chr_l_reason,APL_NULL_CHAR,100);
             sprintf(chr_l_reason,"Failed To Insert into IMSGENT table");
        		 APL_GOBACK_FAIL
     		  }

     		  if (APL_FAILURE==EI_Mod_MQData(chr_h_smacaccount,
                                   		 chr_l_smacrefno,
                                        NULL,
                                        NULL,
                                        "B",
                                        l_debug_info_ptr))
     		  {
        		 fprintf(p_logfile,"Failed To Insert into MQ Datawarehouse table\n");
             memset(chr_l_reason,APL_NULL_CHAR,100);
             sprintf(chr_l_reason,"Failed To Insert into MQ Datawarehouse table");
        		 APL_GOBACK_FAIL
     		  }
         }
     }
}
else if( ( h_amt > dbl_l_amount_a + dbl_g_acc_tol ) || ( h_amt < dbl_l_amount_a - dbl_g_acc_tol ) )
{
     fprintf(p_logfile,"\n Cash Difference for Account:[%s] Refno:[%s] SMAC Amount:[%lf] OTC Amt:[%lf]",chr_g_client,chr_l_refno_a,h_amt, dbl_l_amount_a);
	  memset(chr_l_reason,APL_NULL_CHAR,100);
     sprintf(chr_l_reason,"Out Side Tolerence Limit");
	  fprintf(p_unmatrpt_file,"\n%s  %s  %s  %s  %s  %s  %lf  %lf  %s %s  %s %s",chr_g_client,chr_l_refno_a,chr_l_instrcode_a,chr_l_trdt_a,chr_l_settledt_a,chr_l_trcode_temp,l_quantity,dbl_l_amount_a,chr_l_countacc_desc,chr_h_smacaccount,chr_l_smacrefno,chr_l_reason);
     if (strcmp(h_fail_cd,"21"))
	  {
	  		EXEC SQL UPDATE DL_DEAL SET 
         COMM_IDENT_NO='OTC-UNMATCH',
	  		FAILREASON_CD='21',
	  		SUB_FAIL_CD='0'
	  		WHERE CLIENT = :chr_h_smacaccount
			AND IDENTIY_NO = :chr_l_smacrefno;

     		IS_ANY_ORA_ERROR

	  		memset(&l_dl_dealaudit_struct_h, NULL, sizeof(DL_DEALAUDIT_STRUCT_H));
	  		strcpy(l_dl_dealaudit_struct_h.h_dl_client, chr_h_smacaccount);
	  		strcpy(l_dl_dealaudit_struct_h.h_indentity_no, chr_l_smacrefno);
	  		strcpy(l_dl_dealaudit_struct_h.h_trail_for, "T");
	  		strcpy(l_dl_dealaudit_struct_h.h_processdetail, "Update Fail Reason");
	  		strcpy(l_dl_dealaudit_struct_h.h_proc_usr, "SYSTEM");
	  		strcpy(l_dl_dealaudit_struct_h.h_subprocess, APL_NULL_STRING);
	  		strcpy(l_dl_dealaudit_struct_h.h_logdate, APL_NULL_STRING);
	  		strcpy(l_dl_dealaudit_struct_h.h_fail_cd, "21");
	  		l_dl_dealaudit_struct_h.h_qty = h_qty;
	  		strcpy(l_dl_dealaudit_struct_h.h_dlfromord, "N");

	  		if (APL_FAILURE == CR_Mod_CLHAudTrail(&l_dl_dealaudit_struct_h, l_debug_info_ptr))
		  	{
			  memset(chr_l_reason,APL_NULL_CHAR,100);
           sprintf(chr_l_reason,"Failed To Update AuditTrail");
			  APL_GOBACK_FAIL
		  	}
	  		fprintf(p_logfile,"\nTrade & Audit Trail Updated");

	  		if (sqlca.sqlcode == 0)
         {   
				if ( APL_FAILURE == GBDbInsIMSGENT( MS_MSGNO_534,
                                                chr_l_smacrefno,
                                                chr_h_smacaccount,
                                                'Y',
                                                APL_NULL_STRING,
                                                l_debug_info_ptr ) )
      		{
         		fprintf(p_logfile,"Failed To Insert into IMSGENT table\n");
               memset(chr_l_reason,APL_NULL_CHAR,100);
               sprintf(chr_l_reason,"Failed To Insert into IMSGENT table");
         		APL_GOBACK_FAIL
      		}

      		if (APL_FAILURE==EI_Mod_MQData(chr_h_smacaccount,
                                    		 chr_l_smacrefno,
                                           NULL,
                                           NULL,
                                           "B",
                                           l_debug_info_ptr))
      		{
         		fprintf(p_logfile,"Failed To Insert into MQ Datawarehouse table\n");
				   memset(chr_l_reason,APL_NULL_CHAR,100);
               sprintf(chr_l_reason,"Failed To Insert into MQ Datawarehouse table");
         		APL_GOBACK_FAIL
      		}
          }
	  
       	 fprintf(p_logfile,"Trade Failcoded with 21 Account:[%s] Refno:[%s]",chr_h_smacaccount, chr_l_refno_a);
	    }
       else
       { 
       	 fprintf(p_logfile,"Trade is already Failcoded..No Failcode done for Account:[%s] Refno:[%s]",chr_h_smacaccount, chr_l_smacrefno);
       }
}
else
{
	  	memset(&l_dl_dealaudit_struct_h, NULL, sizeof(DL_DEALAUDIT_STRUCT_H));
     fprintf(p_logfile,"\nTrade is within the Cash Tolerance for Account:[%s] Refno:[%s] \n SMAC Amount:[%lf] OTC Amt:[%lf]",chr_h_smacaccount,chr_l_refno_a,h_amt, dbl_l_amount_a);

if ((h_qty >(h_safekeep_pos+h_val_rec-h_val_del))&&(VAL_DELIVER_DEAL(h_dealcd[0])))
		{
       if (strcmp(h_fail_cd,"15"))
        {
       EXEC SQL UPDATE DL_DEAL SET
       COMM_IDENT_NO='OTC-SHORT',
		 AMOUNT=:dbl_l_amount_a,
		 FAILREASON_CD='15',
		 SUB_FAIL_CD='0'
		 WHERE CLIENT = :chr_h_smacaccount
		 AND IDENTIY_NO = :chr_l_smacrefno;
       fprintf(p_logfile,"\n SQLCODE is [%d] \n",sqlca.sqlcode);
       IS_ANY_ORA_ERROR

	  	 strcpy(l_dl_dealaudit_struct_h.h_fail_cd,"15");
		 
       if ( APL_FAILURE ==  DL_Mod_CCSPendDL(chr_h_smacaccount,
                                             chr_l_smacrefno,
                                             MS_CCS_T4,
                                             APL_NULL_STRING,
                                             APL_NULL_STRING,
                                             APL_NULL_STRING,
                                             &l_debug_info_ptr) )
       {
         APL_GOBACK_FAIL
       }
        }
    	 memset(chr_l_reason,APL_NULL_CHAR,100);
       sprintf(chr_l_reason,"Matched But Tolerence Not Applied As Position Short");
       fprintf(p_matrpt_file,"\n%s  %s  %s  %s  %s  %s  %lf  %lf  %s  %s  %s  %s",chr_g_client,chr_l_refno_a,chr_l_instrcode_a,chr_l_trdt_a,chr_l_settledt_a,chr_l_trcode_temp,l_quantity,dbl_l_amount_a,chr_l_countacc_desc,chr_h_smacaccount,chr_l_smacrefno,chr_l_reason);

      }
     else
 		{
       if (strcmp(h_fail_cd,"90"))
        { 
	  	  EXEC SQL UPDATE DL_DEAL SET 
        COMM_IDENT_NO='OTC-MATCH',
	  	  AMOUNT=:dbl_l_amount_a,
	  	  FAILREASON_CD='90',
        SUB_FAIL_CD='0'
        WHERE CLIENT = :chr_h_smacaccount
		  AND IDENTIY_NO = :chr_l_smacrefno;
        fprintf(p_logfile,"\n SQLCODE is [%d] \n",sqlca.sqlcode);
     	  IS_ANY_ORA_ERROR

	  	  strcpy(l_dl_dealaudit_struct_h.h_fail_cd,"90");
		 
       if ( APL_FAILURE ==  DL_Mod_CCSPendDL(chr_h_smacaccount,
                                             chr_l_smacrefno,
                                             MS_CCS_T4,
                                             APL_NULL_STRING,
                                             APL_NULL_STRING,
                                             APL_NULL_STRING,
                                             &l_debug_info_ptr) )
       {
         APL_GOBACK_FAIL
       }
        }
	     memset(chr_l_reason,APL_NULL_CHAR,100);
        sprintf(chr_l_reason,"Tolerence Applied and Matched ");
	     fprintf(p_matrpt_file,"\n%s  %s  %s  %s  %s  %s  %lf  %lf  %s  %s  %s  %s",chr_g_client,chr_l_refno_a,chr_l_instrcode_a,chr_l_trdt_a,chr_l_settledt_a,chr_l_trcode_temp,l_quantity,dbl_l_amount_a,chr_l_countacc_desc,chr_h_smacaccount,chr_l_smacrefno,chr_l_reason);
		}
 if (!strcmp(l_dl_dealaudit_struct_h.h_fail_cd, "90") || !strcmp(l_dl_dealaudit_struct_h.h_fail_cd, "15"))
    {
	  	strcpy(l_dl_dealaudit_struct_h.h_dl_client, chr_h_smacaccount);
	  	strcpy(l_dl_dealaudit_struct_h.h_indentity_no, chr_l_smacrefno);
	  	strcpy(l_dl_dealaudit_struct_h.h_trail_for,"T");
	  	strcpy(l_dl_dealaudit_struct_h.h_processdetail,"Applied Cash tolerance");
	  	strcpy(l_dl_dealaudit_struct_h.h_proc_usr, "SYSTEM");
	  	strcpy(l_dl_dealaudit_struct_h.h_subprocess, APL_NULL_STRING);
	  	strcpy(l_dl_dealaudit_struct_h.h_logdate, APL_NULL_STRING);
	  	l_dl_dealaudit_struct_h.h_qty = h_qty;
	  	strcpy(l_dl_dealaudit_struct_h.h_dlfromord, "N");

	  	if (APL_FAILURE == CR_Mod_CLHAudTrail(&l_dl_dealaudit_struct_h, l_debug_info_ptr))
	  	{
        fprintf(p_logfile,"\n Failure in Audit Trail \n");
        memset(chr_l_reason,APL_NULL_CHAR,100);
        sprintf(chr_l_reason,"Failed To Update AuditTrail");
		  APL_GOBACK_FAIL
	  	}
		fprintf(p_logfile,"\nTrade & Audit Trail Updated");

	  	if ( (sqlca.sqlcode == 0) && (strcmp(chr_l_failcode_A,"90")!=0))
        {   
			if ( APL_FAILURE == GBDbInsIMSGENT( MS_MSGNO_534,
                                             chr_l_smacrefno,
                                             chr_h_smacaccount,
                                             'Y',
                                             APL_NULL_STRING,
                                             l_debug_info_ptr ) )
     		  {
        		fprintf(p_logfile,"Failed To Insert into IMSGENT table\n");
            memset(chr_l_reason,APL_NULL_CHAR,100);
            sprintf(chr_l_reason,"Failed To Insert into IMSGENT table");
        		APL_GOBACK_FAIL
     		  }

     		if (APL_FAILURE==EI_Mod_MQData(chr_h_smacaccount,
                                   		 chr_l_smacrefno,
                                        NULL,
                                        NULL,
                                        "B",
                                        l_debug_info_ptr))
     		 {
        		fprintf(p_logfile,"Failed To Insert into MQ Datawarehouse table\n");
            memset(chr_l_reason,APL_NULL_CHAR,100);
            sprintf(chr_l_reason,"Failed To Insert into MQ Datawarehouse table");
        		APL_GOBACK_FAIL
     		 }
        }
     }
}


   int_l_ccseligfail_flg = 0;
   if (APL_FAILURE == DL_Chk_DLFailCd(l_dl_dealaudit_struct_h.h_fail_cd,&int_l_ccseligfail_flg,l_debug_info_ptr))
   {
      APL_GOBACK_FAIL
   }
   if (int_l_ccseligfail_flg)
   {
      if ( APL_FAILURE ==  DL_Mod_CCSPendDL(chr_h_smacaccount,
                                             chr_l_smacrefno,
                                             MS_CCS_FC,
                                             l_dl_dealaudit_struct_h.h_fail_cd,
                                             APL_NULL_STRING,
                                             APL_NULL_STRING,
                                             &l_debug_info_ptr) )
      {
         APL_GOBACK_FAIL
      }
   }



fprintf(p_logfile," Finished processing ..Now Updating Commref no:%d: /n",sqlca.sqlcode);

IS_ANY_ORA_ERROR

EXEC SQL COMMIT WORK;
IS_ANY_ORA_ERROR

APL_GOBACK_SUCCESS

   RETURN_SUCCESS  :
   {
      fprintf(p_logfile,"Success from CR_Proc_EOCUpd \n");
		CO_FreeErrLst(l_debug_info_ptr);
		fflush(p_logfile);
		fflush(p_matrpt_file);
		fflush(p_unmatrpt_file);
		fflush(p_misrpt_file);
      return(APL_SUCCESS);
   }

   RETURN_FAILURE  :
   {
      fprintf(p_logfile,"Failure from CR_Proc_EOCUpd \n");
		CO_FreeErrLst(l_debug_info_ptr);
      if (countnotprop== 0)
      {
       if (strlen(chr_l_reason)==0)
			 {
             memset(chr_l_reason,APL_NULL_CHAR,100);
             sprintf(chr_l_reason," Error Message [[[%d]]]",sqlca.sqlcode);
          }
       fprintf(p_misrpt_file,"%s  %s  %s  %s  %s  %s %lf  %lf  %s %s \n",chr_g_client,chr_l_refno_a,chr_l_instrcode_a,chr_l_trdt_a,chr_l_settledt_a,chr_l_trcode_temp,l_quantity,dbl_l_amount_a,chr_l_countacc_desc,chr_l_reason);
      }
		fflush(p_logfile);
		fflush(p_matrpt_file);
		fflush(p_unmatrpt_file);
		fflush(p_misrpt_file);
      return(APL_FAILURE);
   }
}


int CR_Proc_MisTxnrRpt(FILE *p_misrpt_file,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,FILE *p_logfile,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{ 
char h_indentity_no[17] = APL_NULL_STRING;
char h_dl_client[APL_CLIENT_LENGTH] = APL_NULL_STRING;
char chr_h_countacc_desc[66] = APL_NULL_STRING;
char h_dlt[11]=APL_NULL_STRING;
char h_setldt[11]=APL_NULL_STRING;
char chr_l_trcode_a[4]=APL_NULL_STRING;
char h_fail_cd[3] = APL_NULL_STRING;
char h_instr_code[APL_INSTRUMENTCODE_LEN] = APL_NULL_STRING;
double h_qty=0.0;
double h_amt=0.0;
DL_DEALAUDIT_STRUCT_H  l_dl_dealaudit_struct_h;

EXEC SQL BEGIN DECLARE SECTION;
EXEC SQL VAR h_indentity_no IS STRING;
EXEC SQL VAR h_dl_client IS STRING;
EXEC SQL VAR chr_h_countacc_desc IS STRING;
EXEC SQL VAR h_dlt is STRING;
EXEC SQL VAR h_setldt IS STRING;
EXEC SQL VAR h_instr_code IS STRING;
EXEC SQL VAR h_fail_cd IS STRING;
EXEC SQL VAR chr_l_trcode_a IS STRING;
EXEC SQL END DECLARE SECTION;
sqlca.sqlcode = 0;

EXEC SQL DECLARE mistxns CURSOR FOR
	SELECT IDENTIY_NO,DEAL_DATE,SETL_DATE,QTY,nvl(AMOUNT,0),nvl(CP_CLTNAME,' '),CLIENT,decode(deal_cd,1,'DF',2,'RF',3,'DVP',4,'RVP') as deal_cd,nvl(FAILREASON_CD,' '),INSTR_CODE
				FROM DL_DEAL
           WHERE DOMESTIC_CPCLT=:chr_g_client
				 AND LOCATION_CD='BOG'
             AND DEAL_STAT in ('CD','CQ','AA')
             AND COMM_IDENT_NO IS NULL
				 AND (FAILREASON_CD IS NULL OR FAILREASON_CD IN ('41','98'));

IS_ANY_ORA_ERROR

EXEC SQL OPEN mistxns;
IS_ANY_ORA_ERROR

for(;;)
{
   EXEC SQL FETCH mistxns INTO :h_indentity_no,:h_dlt,:h_setldt,:h_qty,:h_amt,:chr_h_countacc_desc,h_dl_client,chr_l_trcode_a,h_fail_cd,h_instr_code;		
   IS_ANY_ORA_ERROR

   if(APL_ZERO_RESULT_SET)
   break;
if (strcmp(h_fail_cd,"30"))
  {
   EXEC SQL UPDATE DL_DEAL SET
   COMM_IDENT_NO ='OTC-MIS',
   FAILREASON_CD='30',
   SUB_FAIL_CD=0
   WHERE CLIENT = :h_dl_client
   AND IDENTIY_NO = :h_indentity_no;

   IS_ANY_ORA_ERROR

   memset(&l_dl_dealaudit_struct_h,NULL,sizeof(DL_DEALAUDIT_STRUCT_H)); 
   strcpy(l_dl_dealaudit_struct_h.h_dl_client, h_dl_client);
   strcpy(l_dl_dealaudit_struct_h.h_indentity_no, h_indentity_no);
   strcpy(l_dl_dealaudit_struct_h.h_trail_for, "T");
   strcpy(l_dl_dealaudit_struct_h.h_processdetail, "Update Fail Reason");
   strcpy(l_dl_dealaudit_struct_h.h_proc_usr, "SYSTEM");
   strcpy(l_dl_dealaudit_struct_h.h_subprocess, APL_NULL_STRING);
   strcpy(l_dl_dealaudit_struct_h.h_logdate, APL_NULL_STRING);
   strcpy(l_dl_dealaudit_struct_h.h_fail_cd, "30");
   l_dl_dealaudit_struct_h.h_qty = h_qty;
   strcpy(l_dl_dealaudit_struct_h.h_dlfromord, "N");

   if (APL_FAILURE == CR_Mod_CLHAudTrail(&l_dl_dealaudit_struct_h, l_debug_info_ptr))
     {
       APL_GOBACK_FAIL
     }
    fprintf(p_logfile,"\nTrade -30& Audit Trail Updated");

   if (sqlca.sqlcode == 0)
     {
      if ( APL_FAILURE == GBDbInsIMSGENT( MS_MSGNO_534,
                                          h_indentity_no,
                                          h_dl_client,
			                                 'Y',
                                          APL_NULL_STRING,
                                          l_debug_info_ptr ) )
            {
               fprintf(p_logfile,"Failed To Insert into IMSGENT table\n");
               APL_GOBACK_FAIL
            }

            if (APL_FAILURE==EI_Mod_MQData(h_dl_client,
                                           h_indentity_no,
                                           NULL,
                                           NULL,
                                           "B",
                                           l_debug_info_ptr))
            {
               fprintf(p_logfile,"Failed To Insert into MQ Datawarehouse table\n");
               APL_GOBACK_FAIL
            }
		 
       if ( APL_FAILURE ==  DL_Mod_CCSPendDL(h_dl_client,
                                             h_indentity_no,
                                             MS_CCS_T4,
                                             APL_NULL_STRING,
                                             APL_NULL_STRING,
                                             APL_NULL_STRING,
                                             &l_debug_info_ptr) )
       {
         APL_GOBACK_FAIL
       }
     }
  }
	fprintf(p_misrpt_file,"%s  %s  %s %s  %s %s %lf  %lf  %s\n",chr_g_client,h_indentity_no,h_instr_code,h_dlt,h_setldt,chr_l_trcode_a,h_qty,h_amt,chr_h_countacc_desc);
}

EXEC SQL CLOSE mistxns;
IS_ANY_ORA_ERROR

APL_GOBACK_SUCCESS

   RETURN_SUCCESS  :
   {
      fprintf(p_logfile,"Success from CR_Proc_MisTxnrRpt \n");
		CO_FreeErrLst(l_debug_info_ptr);
		fflush(p_logfile);
      fflush(p_misrpt_file);
      return(APL_SUCCESS);
   }

   RETURN_FAILURE  :
   {
      fprintf(p_logfile,"Failure from CR_Proc_MisTxnrRpt \n");
		CO_FreeErrLst(l_debug_info_ptr);
		fflush(p_logfile);
      fflush(p_misrpt_file);
        return(APL_FAILURE);//AIX Migration Changes
   }
}

