




#include "stdio_64.h"
#include <string.h>
#include <stdlib.h>  
#include "IV_Control_A.h"
#define APL_BLACCGEN 'G'
#define APL_BLACCPASS 'Y'

EXEC SQL INCLUDE SQLCA;



int IV_Mod_IVCNTLPARAMAccGenFlg( int *int_p_retstat, 
		       						DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	char	chr_h_acc_gen_flg	= APL_NULL_CHAR;
	char	chr_l_acc_gen_flg	= APL_NULL_CHAR;


	EXEC SQL BEGIN DECLARE SECTION;
		
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif


	EXEC SQL SELECT AE_IND 
				INTO	:chr_l_acc_gen_flg  
				FROM SYS_IVCONTROLPARAM
				FOR UPDATE OF AE_IND;

	IS_ANY_ORA_ERROR



	chr_h_acc_gen_flg = APL_BLACCGEN; 

	EXEC SQL UPDATE SYS_IVCONTROLPARAM
				SET  AE_IND 	=:chr_h_acc_gen_flg;


	if ( !sqlca.sqlcode )
	{
		*int_p_retstat = IV_SUCCESS;

		APL_GOBACK_SUCCESS
	}
	else
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
BBDbUpdAccgenFlgBCNTLPARM().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
 IV_Mod_IVCNTLPARAMAccGenFlg().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}
		return APL_FAILURE;
}





int IV_Proc_IVCNTLPARAMPassAccGenFlg( int *int_p_retstat, 
		       						DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	char	chr_h_acc_gen_flg	= APL_NULL_CHAR;
	char	chr_l_acc_gen_flg	= APL_NULL_CHAR;


	EXEC SQL BEGIN DECLARE SECTION;
		
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif


	EXEC SQL SELECT AE_IND 
				INTO	:chr_l_acc_gen_flg  
				FROM SYS_IVCONTROLPARAM
				FOR UPDATE OF AE_IND;

	IS_ANY_ORA_ERROR

	chr_h_acc_gen_flg = APL_BLACCPASS; 

	EXEC SQL UPDATE SYS_IVCONTROLPARAM
				SET  AE_IND 	=:chr_h_acc_gen_flg ;

	if ( !sqlca.sqlcode )
	{
		*int_p_retstat = IV_SUCCESS;

		APL_GOBACK_SUCCESS
	}
	else
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
BBDbUpdAccgenFlgBCNTLPARM().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
 IV_Mod_IVCNTLPARAMAccGenFlg().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}
		return APL_FAILURE;
}
