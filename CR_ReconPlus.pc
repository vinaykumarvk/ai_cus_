

#include "CO_HostStructdef.h" 
#include "CA_Common.h"


#define  PAGELENGTH 55
#define  APL_FILENAME_LENGTH 50 
#define  APL_MAXLINE_SIZE 451 
#define  BUFFER_LEN_A 224
#define  RTV_SYSTEM_DATA
#define	 P_STATIC_AFTER "_RECTRADE." 
#define  APL_BOOKINGOFFICE_LEN 3
EXEC SQL INCLUDE SQLCA.H;


int CR_Proc_Recon(FILE *p_fp_inifile,
             	FILE *p_fp_logfile,
             	char **argv,
             	DEBUG_INFO_STRUCT_H **l_debug_info_ptr);


int main(int argc,char **argv) // AIX - Warnings removal
{
	struct sqlca sqlca;
   	DEBUG_INFO_STRUCT_H *l_debug_info_ptr = (DEBUG_INFO_STRUCT_H *) NULL;
	FILE *p_fp_logfile;
	FILE *p_fp_inifile;
	
	
	char	chr_p_progname[APL_BATCH_PROGNAME_LEN]= APL_NULL_STRING;
	char	chr_p_key_a[APL_BATCH_KEY_LEN]= APL_NULL_STRING;
	char	chr_p_start_date[APL_DATE_LEN]= APL_NULL_STRING;
	char  chr_p_funccode[CA_FUNC_CD_LEN]= APL_NULL_STRING;
	
	
	
	char 	chr_uname[APL_USERID_LEN] = APL_NULL_STRING;
   	char 	chr_custody_id_b[APL_USERID_LEN] = APL_NULL_STRING;
   	char 	chr_passwd[APL_USERID_LEN] = APL_NULL_STRING;
	
	char 	chr_p_inifile[PATH_LENGTH] = APL_NULL_STRING;
	int 	int_h_prog_status=0;
	int 	int_p_retval=0;
 	
	EXEC SQL VAR chr_uname IS STRING;
   	EXEC SQL VAR chr_passwd IS STRING;

	
	strcpy(chr_p_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_p_inifile,"intl_sun.cfg");
	
	if ( ( p_fp_inifile=fopen(chr_p_inifile,"r") ) == NULL)
	exit(-1);
  
  	
	APL_FETCH_DB_LOGIN_DETAILS(p_fp_inifile, chr_custody_id_b, chr_uname, chr_passwd, APL_OUT_FILE, &l_debug_info_ptr)

   	EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;

   	if (sqlca.sqlcode)
   	{
   		APL_GOBACK_FAIL
   	}
   	else
   	{
		strcpy(chr_p_progname,argv[0]);
		strcpy(chr_p_key_a,argv[1]);
		strcpy(chr_p_start_date,argv[2]);
		strcpy(chr_p_funccode,argv[5]);

		
   		if (APL_FAILURE == CO_Rtv_RptFileName("3Z", 
				APL_LOGFILE_DESC,
				100,
				argv[5],
				argv,
				&p_fp_logfile,
				&l_debug_info_ptr ))
      		{
         		APL_GOBACK_FAIL
      		} 
	
      		
		printf("Eric :Just after gdbgenrep\n");	
      		EXEC SQL COMMIT WORK;

      		if (sqlca.sqlcode)
      		{
			CO_ProcMonitor(p_fp_logfile, "Could not commit after opening chr_log file", NULL, NULL);
         		APL_GOBACK_FAIL
      		}
	
		

		if (APL_FAILURE == CO_RtvSysParams(&l_debug_info_ptr))
		{
			fprintf(p_fp_logfile, "\nFailed in Get System Params\n");
         		APL_GOBACK_FAIL
		}
		printf("Eric :Just after get system params\n");	
		EXEC SQL select count(*)
   		INTO  :int_h_prog_status
   		FROM  SYS_BATCHPROC
   		WHERE PROCESS_NAME=:argv[0]
   		AND   PROC_INIT=:argv[1]
		AND   TO_CHAR(TO_DATE(STARTDATE),'ddmmyy')=TO_CHAR(TO_DATE(:argv[2]),'ddmmyy')
   		AND   STATUS='completed';

   		IS_ANY_ORA_ERROR

  		if (int_h_prog_status != 0)
   		{
			CO_ProcMonitor(p_fp_logfile, "Program Already Completed for Today", NULL, NULL);
      			APL_GOBACK_SUCCESS
   		}
		printf("Eric :Just before calling wrapper processtion\n");	


		int_p_retval = CR_Proc_Recon( p_fp_inifile, 
					p_fp_logfile, 
					argv,
					&l_debug_info_ptr);

 	    	if ( int_p_retval == APL_FAILURE )
     		{
			fprintf(p_fp_logfile, "Unsuccessful in CR_Proc_Recon Exiting from main\n");
			APL_GOBACK_FAIL
     		}
     		else
     		{
     	 		EXEC SQL UPDATE SYS_BATCHPROC
     			SET  status = 'completed'
  			WHERE PROCESS_NAME=:argv[0]
  			AND   PROC_INIT=:argv[1]
  			AND   STARTDATE=:argv[2]
  			AND   STATUS='started';

        		EXEC SQL COMMIT WORK RELEASE;
			fprintf(p_fp_logfile, "Record Committed. \n CR_Proc_Recon Successful , Exiting from main\n");
        		APL_GOBACK_SUCCESS
     		}
	}

  	RETURN_SUCCESS:
  	{
   		CO_Proc_RptClose(p_fp_logfile, &l_debug_info_ptr); 
		exit(0);
 	}
  	RETURN_FAILURE:
  	{	
   		CO_Proc_RptClose(p_fp_logfile, &l_debug_info_ptr); 
  		exit(-1);
  	}
}

int CR_Proc_Recon(FILE *p_fp_inifile, 
		FILE *p_fp_logfile, 
		char **argv,
		DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

struct sqlca sqlca;





typedef struct 
{
	char  h_instr_isin[APL_ISIN_LEN]; 
	double h_last_pos;
	char  h_dl_client[APL_CLIENT_LENGTH]; 
	char  h_ccy[APL_CCYCODE_LEN]; 
	char  h_instr_code[APL_INSTRUMENTCODE_LEN]; 
}A_ACCOUNT_STRUCT_H;

typedef struct
{
	short i_instr_isin;
	short i_last_pos;
	short i_dl_client;
	short i_ccy;
	short i_instr_code;
} A_ACCOUNT_STRUCT_I;



typedef struct
{
	char h_dl_client[APL_CLIENT_LENGTH]; 
	char h_master_clt[APL_CLIENT_LENGTH]; 
	char h_instr_isin[APL_ISIN_LEN]; 
	char h_indentity_no[APL_TXNREFNO_LEN];
	double h_qty;
	double h_amt;
	char h_setl_dt[APL_DATE_LEN];
	char h_loc[APL_LOCNCODE_LENGTH]; 
	char h_db_cr_ind[APL_FLAG_LENGTH];
	char h_ccy[APL_CCYCODE_LEN]; 
	char h_instr[APL_FLAG_LENGTH];
	char h_instr_code[APL_INSTRUMENTCODE_LEN]; 
	char h_instr_dt[APL_DATE_LEN];   
}A_TRADE_H;

typedef struct
{
	short i_dl_client;
	short i_master_clt;
	short i_instr_isin;
	short i_indentity_no;
	short i_qty;
	short i_amt;
	short i_setl_dt;
	short i_loc;
	short i_db_cr_ind;
	short i_ccy;
	short i_instr;
	short i_instr_code;
	short i_instrdate;   
}A_TRADE_I;

A_ACCOUNT_STRUCT_H h_safekeeping;
A_ACCOUNT_STRUCT_I i_safekeeping;



A_TRADE_H h_settlement;
A_TRADE_I i_settlement;
INTL_REPT_STRUCT_H *l_intl_rept_struct_ha = NULL;

char chr_today_date[APL_DATE_LEN]=APL_NULL_STRING;
char chr_file_date[7]=APL_NULL_STRING;
char chr_bookingoffice[APL_BOOKINGOFFICE_LEN]=APL_NULL_STRING;
char chr_l_typeofinstr[4]=APL_NULL_STRING;
char chr_l_fmtrptflg[2]=APL_NULL_STRING;
double l_nominal_value = 0;
char chr_p_filename_a[20]=APL_NULL_STRING;
char chr_p_recon[PATH_LENGTH]=APL_NULL_STRING;
char chr_p_reconfile_name[PATH_LENGTH]=APL_NULL_STRING;
char chr_p_reconfinal_name[PATH_LENGTH]=APL_NULL_STRING;
char chr_p_buf[BUFFER_LEN_A]=APL_NULL_STRING;
char chr_dcip[APL_FLAG_LENGTH]=APL_NULL_STRING;

FILE *fp = NULL;

   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;



memset(&h_safekeeping, NULL, sizeof(A_ACCOUNT_STRUCT_H));
memset(&i_safekeeping, NULL, sizeof(A_ACCOUNT_STRUCT_I));



memset(&h_settlement, NULL, sizeof(A_TRADE_H));
memset(&i_settlement, NULL, sizeof(A_TRADE_I));

EXEC SQL VAR h_settlement.h_dl_client IS STRING;
EXEC SQL VAR h_settlement.h_master_clt IS STRING;
EXEC SQL VAR h_settlement.h_instr_isin IS STRING;
EXEC SQL VAR h_settlement.h_indentity_no IS STRING;
EXEC SQL VAR h_settlement.h_instr_code IS STRING;



EXEC SQL VAR h_safekeeping.h_instr_isin IS STRING;
EXEC SQL VAR h_safekeeping.h_instr_code IS STRING;
EXEC SQL VAR h_safekeeping.h_dl_client IS STRING;
EXEC SQL VAR chr_g_restart_data is string;
	
EXEC SQL SELECT to_char(SYS_DATE,'ddmmyy') INTO :chr_file_date
FROM PRO_SYS_DATE;
IS_ANY_ORA_ERROR
	
	strcat(chr_p_filename_a,g_mt_commonsys_params_struct_h.nation_code);
	strcat(chr_p_filename_a,P_STATIC_AFTER);
	strcat(chr_p_filename_a,chr_file_date);
	
	
	printf("Eric: Before reading chr_token for hoff\n");	
	
	if ( APL_FAILURE ==CO_ReadToken(p_fp_inifile,"SESAM_RECONPLUS_DIR",chr_p_recon,l_debug_info_ptr)) // AIX
	{
		CO_ProcMonitor(p_fp_logfile,"E:Could not read the RECONPLUS directory from intl_sun.cfg",NULL,NULL);
		APL_GOBACK_FAIL	
	}
	printf("Eric: After reading chr_token for hoff\n");	

   	
   	strcpy(chr_p_reconfile_name, chr_p_recon);
   	strcat(chr_p_reconfile_name, chr_p_filename_a);
	strcat(chr_p_reconfile_name,".tmp");

	printf("Eric : Just checking the h_file names \n");
	if ((strcmp(chr_p_reconfile_name,APL_NULL_STRING) == 0))
	{
  		if (CO_InsertErr
  				(l_debug_info_ptr,
  				ERR_FDFILE_NOTVALID,
  				
  				APL_NULL_STRING,
  				APL_NULL_STRING,
  				APL_NULL_STRING,
  				__LINE__,
  				__FILE__
  				) != APL_SUCCESS)
  				APL_GOBACK_FAIL
	}
	printf("Eric: Argument0 is %s \n",argv[0]);
	printf("Eric: Argument1 is %s \n",argv[1]);
	printf("Eric: Argument2 is %s \n",argv[2]);


  	EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
     	FROM SYS_BATCHPROC
     	WHERE PROCESS_NAME=:argv[0]
        AND   PROC_INIT=:argv[1]
        AND   STARTDATE=:argv[2]
        AND   STATUS='started'
     	FOR UPDATE OF PROCESSING_STATUS,STATUS;


  	if(APL_ZERO_RESULT_SET)
   	{
      	CO_ProcMonitor(p_fp_logfile,"E:No entry in batch_in_proc",NULL,NULL);
      	APL_GOBACK_FAIL
   	}

  	IS_ANY_ORA_ERROR

	fprintf(p_fp_logfile, "SMACRECONFn successfully locked the batch record\n");




EXEC SQL SELECT SYS_DATE INTO :chr_today_date
FROM PRO_SYS_DATE;
IS_ANY_ORA_ERROR

EXEC SQL SELECT nation_code INTO :chr_bookingoffice
FROM MT_COMMON_SYS_PARAMS;
IS_ANY_ORA_ERROR 



fp = fopen(chr_p_reconfile_name, "w+");







EXEC SQL DECLARE SAFEKEEPING CURSOR FOR
SELECT s.INSTR_ISIN, NVL(SUM(sk.safekeep_pos),0), sk.client, s.currency_cd, sk.instr_code 
FROM DL_SAFEK sk, MT_INSTRUMENT s
WHERE sk.instr_code=s.instr_code
group by sk.instr_code, sk.client,  s.INSTR_ISIN, s.currency_cd;
IS_ANY_ORA_ERROR


EXEC SQL DECLARE TRADE CURSOR FOR
SELECT a.cln_master, t.client, s.INSTR_ISIN, t.IDENTIY_NO, decode(s.INSTR_TYPE,'BON',decode(a.CLN_FMT_RPTIND,'Y',t.QTY*s.NOMINAL_VALUE,t.QTY),t.QTY), t.AMOUNT, t.setl_date, t.location_cd, t.deal_cd, t.currency_cd, t.ENTRY, t.instr_code, t.INSTRUMENT_DT
FROM DL_DEAL t, MT_INSTRUMENT s, MT_CLIENT a
WHERE t.instr_code = s.instr_code
AND t.client = a.CLN_CODE
AND t.instr_code = rtrim(:h_safekeeping.h_instr_code) 
AND t.client =rtrim(:h_safekeeping.h_dl_client)
AND (t.INSTRUMENT_DT =: chr_today_date
OR t.MOD_HISPOS_IND = 'Y');
IS_ANY_ORA_ERROR 



EXEC SQL OPEN SAFEKEEPING;
printf("Eric: Opening Cursor SAFEKEEPING_ID\n");
IS_ANY_ORA_ERROR
printf("Eric: Checking errors for opening cursor SAFEKEEPING\n");



for(;;)
{
	memset(&h_safekeeping, NULL, sizeof(A_ACCOUNT_STRUCT_H));
	memset(&i_safekeeping, NULL, sizeof(A_ACCOUNT_STRUCT_I));	

	
	EXEC SQL FETCH SAFEKEEPING INTO :h_safekeeping:i_safekeeping;
	IS_ANY_ORA_ERROR
	printf("The client selected is %s\n",h_safekeeping.h_dl_client);
	printf("The instr_code selected is %s\n",h_safekeeping.h_instr_code);
	if (sqlca.sqlcode==1403)
	{
		break;
	}

		

	EXEC SQL OPEN TRADE;
	printf("Eric: Opening Cursor TRADE\n");
	IS_ANY_ORA_ERROR
	printf("Eric: Checking errors for opening cursor TRADE\n");

	for(;;)
	{
		memset(&h_settlement, NULL, sizeof(A_TRADE_H));
		memset(&i_settlement, NULL, sizeof(A_TRADE_I));
		EXEC SQL FETCH TRADE INTO :h_settlement:i_settlement;
		IS_ANY_ORA_ERROR
		if (sqlca.sqlcode==1403)
		{
			break;
		}

		

		if (	(strcmp(h_settlement.h_db_cr_ind, "1") == 0) ||
		   	(strcmp(h_settlement.h_db_cr_ind, "3") == 0))
		{
			strcpy(chr_dcip,"D");
		}

		else if((strcmp(h_settlement.h_db_cr_ind, "2") == 0) ||
		   	(strcmp(h_settlement.h_db_cr_ind, "4") == 0))
		{
			strcpy(chr_dcip,"C");
		}			

		

		fprintf(fp, "Set");
		fprintf(fp, "%-2s", chr_bookingoffice);
		fprintf(fp, "%-10s", h_settlement.h_master_clt);
 		fprintf(fp, "%-10s", h_settlement.h_dl_client);
		fprintf(fp, "%-12s", h_settlement.h_instr_isin);
		fprintf(fp, "%-16s", h_settlement.h_indentity_no);
		fprintf(fp, "%-16s", h_settlement.h_indentity_no);
		fprintf(fp, "%-25.4lf", h_settlement.h_qty);
		fprintf(fp, "%-18.3lf", h_settlement.h_amt);
		fprintf(fp, "%-20s", h_settlement.h_instr_dt);   
		fprintf(fp, "%-20s", h_settlement.h_setl_dt);
		fprintf(fp, "%-4s", h_settlement.h_loc);
		fprintf(fp, "%-1s", chr_dcip);
		fprintf(fp, "%-3s", h_settlement.h_ccy);
		fprintf(fp, "%-1s", h_settlement.h_instr);
		fprintf(fp, "%-8s\n", h_settlement.h_instr_code);
	}

	

	

 
	if(	(strcmp(h_safekeeping.h_instr_code,APL_NULL_STRING)!=0) && 
		(strcmp(h_safekeeping.h_dl_client,APL_NULL_STRING)!=0))
	{
      EXEC SQL SELECT INSTR_TYPE,NOMINAL_VALUE INTO :chr_l_typeofinstr,l_nominal_value FROM MT_INSTRUMENT
      WHERE INSTR_CODE = :h_safekeeping.h_instr_code;
  
      IS_ANY_ORA_ERROR     

      EXEC SQL SELECT CLN_FMT_RPTIND INTO :chr_l_fmtrptflg FROM MT_CLIENT 
      WHERE CLN_CODE = :h_safekeeping.h_dl_client;

      IS_ANY_ORA_ERROR

      if (strcmp(chr_l_typeofinstr,"BON")==0 && strcmp(chr_l_fmtrptflg,"Y")==0)
			{
				h_safekeeping.h_last_pos = h_safekeeping.h_last_pos * l_nominal_value;
			}

		fprintf(fp, "Pos");
		fprintf(fp, "%-2s", chr_bookingoffice);
		fprintf(fp, "%-12s", h_safekeeping.h_instr_isin);
		fprintf(fp, "%-25.4lf", h_safekeeping.h_last_pos);
		fprintf(fp, "%-10s", h_safekeeping.h_dl_client);
		fprintf(fp, "%-20s", chr_today_date);
		fprintf(fp, "%-3s", h_safekeeping.h_ccy);
		fprintf(fp, "%-8s\n", h_safekeeping.h_instr_code);
	}
}


CO_Proc_RptClose(fp, &l_debug_info_ptr);

strcpy(chr_p_reconfinal_name, chr_p_recon);
strcat(chr_p_reconfinal_name, chr_p_filename_a);
printf("Eric: Before the handoff h_file movement\n");	
memset(chr_p_buf,APL_NULL_CHAR,BUFFER_LEN_A);
sprintf(chr_p_buf,"rm -f %s",chr_p_reconfinal_name);
system(chr_p_buf);

link(chr_p_reconfile_name,chr_p_reconfinal_name);
unlink(chr_p_reconfile_name);
printf("Eric: After UNLINK\n");	
	
l_intl_rept_struct_ha = (INTL_REPT_STRUCT_H *)calloc(1, sizeof(INTL_REPT_STRUCT_H));
APL_MALLOC_FAIL(l_intl_rept_struct_ha) ;


strncpy(l_intl_rept_struct_ha->report_name, chr_p_filename_a, APL_REPNAME_LENGTH + 2);
l_intl_rept_struct_ha->report_name[APL_REPNAME_LENGTH + 3] = '\0';
strncpy(l_intl_rept_struct_ha->report_desc, APL_HOFF_FILE_DESC, APL_REPDESC_LENGTH - 1);
l_intl_rept_struct_ha->report_desc[APL_REPDESC_LENGTH - 1] = '\0';
strcpy(l_intl_rept_struct_ha->report_date,argv[2]);
l_intl_rept_struct_ha->report_width = 100;
strcpy(l_intl_rept_struct_ha->task_desc,argv[5]);
strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
strcpy(l_intl_rept_struct_ha->usr,argv[3]);

printf("Eric: Before CO_Proc_RptInsNew\n");	
if (APL_FAILURE == CO_Proc_RptInsNew( l_intl_rept_struct_ha,"RECONPLUS_DIR", l_debug_info_ptr))
{
APL_GOBACK_FAIL
	printf("Eric: Failure CO_Proc_RptInsNew\n");	
}
printf("Eric: After CO_Proc_RptInsNew\n");
APL_GOBACK_SUCCESS

RETURN_SUCCESS :
	{
CO_ProcMonitor(p_fp_logfile," Successful ! in SMACRECON",l_debug_info_ptr,NULL);
		CO_Proc_RptClose(fp, &l_debug_info_ptr);
		printf("Eric: SUCCESS AT LAST \n");
   		return(APL_SUCCESS);
	}
RETURN_FAILURE :
	{
		CO_ProcMonitor(p_fp_logfile," Failure in SMACRECON",l_debug_info_ptr,NULL);
		CO_Proc_RptClose(fp, &l_debug_info_ptr);	
		printf("Eric: FAILURE.... TRY AGAIN\n");
   		return(APL_FAILURE);
	}
}




