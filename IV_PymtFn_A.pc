




#include "stdio_64.h"
#include <string.h>
#include <stdlib.h>

#include "IV_Control_A.h"

EXEC SQL INCLUDE SQLCA;



int IV_Chk_PymtAcc(const int p_pymntclt, const char *p_blccycode, 
		   int *int_p_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)

	
{
	
	if(strcmp(g_mt_commonsys_params_struct_h.nation_code,"IN"))	/* Vedavati HDFCIV_006  */
	{

	extern int IV_Rtv_IVACC(IV_CLIENT_STRUCT *l_iv_client_struct, int *int_l_retstat, 
				DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	int IV_Chk_AccGLCode(const char *l_blccycode, const char *l_ibbscode, 
			      int *int_l_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	

	char chr_l_ccy_part[4], chr_l_ac_pay[APL_CLIENT_LENGTH];
	int int_l_status = 0;
	IV_CLIENT_STRUCT l_iv_client_struct;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	memset(l_iv_client_struct.comm_a, APL_NULL_CHAR, APL_CLIENT_LENGTH);
	memset(l_iv_client_struct.payacc_a, APL_NULL_CHAR, APL_CLIENT_LENGTH);
	memset(l_iv_client_struct.maker, APL_NULL_CHAR, APL_USERID_LEN);
	memset(l_iv_client_struct.maker_dt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_iv_client_struct.access_stamp, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_iv_client_struct.checker, APL_NULL_CHAR, APL_USERID_LEN);
	memset(l_iv_client_struct.checker_dt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_iv_client_struct.comm_b, APL_NULL_CHAR, APL_CLIENT_LENGTH);
	memset(l_iv_client_struct.comm_c, APL_NULL_CHAR, APL_CLIENT_LENGTH);
	memset(l_iv_client_struct.comm_d, APL_NULL_CHAR, APL_CLIENT_LENGTH);
	memset(l_iv_client_struct.comm_e, APL_NULL_CHAR, APL_CLIENT_LENGTH);
	memset(l_iv_client_struct.comm_f, APL_NULL_CHAR, APL_CLIENT_LENGTH);
	memset(l_iv_client_struct.comm_g, APL_NULL_CHAR, APL_CLIENT_LENGTH);
	memset(l_iv_client_struct.comm_h, APL_NULL_CHAR, APL_CLIENT_LENGTH);
	memset(l_iv_client_struct.tax_acc, APL_NULL_CHAR, APL_CLIENT_LENGTH);
	memset(l_iv_client_struct.payacc_b, APL_NULL_CHAR, APL_CLIENT_LENGTH);

	int_l_status = 0;

	if ( APL_FAILURE == IV_Rtv_IVACC(&l_iv_client_struct, &int_l_status, l_debug_info_ptr) )
	{
		if ( int_l_status == IV_CRITCAL_ERROR_IND )
		{
			*int_p_retstat = int_l_status;

			APL_GOBACK_FAIL
		}
		else if ( int_l_status == IV_NO_DATA_FOUND_ERR )
		{
			*int_p_retstat = IV_CRITCAL_ERROR_IND;

			CO_InsertErr(l_debug_info_ptr, ERR_BILLACC_FIRST, 
				       APL_NULL_STRING, APL_NULL_STRING, 
				       APL_NULL_STRING, __LINE__, __FILE__);

			APL_GOBACK_FAIL
		}
		else if ( (int_l_status == IV_COLUMN_NULL_ERR) && 
			  !strcmp(l_iv_client_struct.checker, " ") )
		{
			*int_p_retstat = IV_CRITCAL_ERROR_IND;

			CO_InsertErr(l_debug_info_ptr, ERR_BILLACC_NOTAUTHORIZED, 
				       APL_NULL_STRING, APL_NULL_STRING, 
				       APL_NULL_STRING, __LINE__, __FILE__);

			APL_GOBACK_FAIL
		}
	}

	if ( p_pymntclt == 1 )
	{
		strcpy(chr_l_ac_pay, l_iv_client_struct.payacc_a);
	}
	else if ( p_pymntclt == 2 )
	{
		if ( !strcmp(l_iv_client_struct.payacc_b, " ") )
		{
			*int_p_retstat = IV_CRITCAL_ERROR_IND;

			CO_InsertErr(l_debug_info_ptr, ERR_BILLACC_FIRST, 
				       APL_NULL_STRING, APL_NULL_STRING, 
				       APL_NULL_STRING, __LINE__, __FILE__);

			APL_GOBACK_FAIL
		}

		strcpy(chr_l_ac_pay, l_iv_client_struct.payacc_b);
	}

	

	if ( chr_l_ac_pay[0] != '9' )
	{
		*int_p_retstat = IV_SUCCESS;

		APL_GOBACK_SUCCESS
	}

	memset(chr_l_ccy_part, APL_NULL_CHAR, 4);

	chr_l_ccy_part[0] = chr_l_ac_pay[6];
	chr_l_ccy_part[1] = chr_l_ac_pay[7];
	chr_l_ccy_part[2] = chr_l_ac_pay[8];
	chr_l_ccy_part[3] = APL_NULL_CHAR;

	int_l_status = 0;

	if ( APL_FAILURE == IV_Chk_AccGLCode(p_blccycode, chr_l_ccy_part, 
					      &int_l_status, l_debug_info_ptr) )
	{
		if ( int_l_status == IV_CRITCAL_ERROR_IND )
		{
			*int_p_retstat = int_l_status;

			APL_GOBACK_FAIL
		}
		else if ( int_l_status == IV_NO_DATA_FOUND_ERR )
		{
			*int_p_retstat = IV_CRITCAL_ERROR_IND;

			CO_InsertErr(l_debug_info_ptr, ERR_BILLCCY_PAYMNTCCY_MISMATCH, 
				       APL_NULL_STRING, APL_NULL_STRING, 
				       APL_NULL_STRING, __LINE__, __FILE__);

			

			APL_GOBACK_FAIL
		}
	}
}//AIX Warning Removal

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Chk_PymtAcc().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
IV_Chk_PymtAcc().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;

/*	} Commented for AIX Warning Removal**/
}




int IV_Chk_CustEntitlement(const IV_CLIENTSETUP_STRUCT *p_iv_clientsetup_struct_a, int *int_p_retstat, 
		     DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	extern int CO_Chk_AccValid(char *chr_l_client, char int_l_exist, char l_cubk, 
			       char l_orderac, char l_mastclt, char l_auth, 
			       char l_del, char l_frozen, char l_closed, 
			       DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	

	IV_CLIENTSETUP_STRUCT l_iv_cltsetup_struct;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	l_iv_cltsetup_struct = *p_iv_clientsetup_struct_a;

	if ( !strcmp(l_mt_core_sys_params_struct_h.custody_clt_cd, l_iv_cltsetup_struct.client) )
	{
		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, ERR_CUST_CANT_PAYMNTS, APL_NULL_STRING, 
			       APL_NULL_STRING, APL_NULL_STRING, __LINE__, 
			       __FILE__);

	     

		APL_GOBACK_FAIL
	}

	if ( APL_FAILURE == CO_Chk_AccValid(l_iv_cltsetup_struct.client, 'Y', NULL, NULL, NULL, 
					NULL, NULL, NULL, NULL, l_debug_info_ptr) )
	{
		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		APL_GOBACK_FAIL
	}

	if ( l_iv_cltsetup_struct.b_gen_ind != 'S' )
	{
		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, ERR_ACCC_NOTSELF, APL_NULL_STRING, 
			       APL_NULL_STRING, APL_NULL_STRING, __LINE__, 
			       __FILE__);

		

		APL_GOBACK_FAIL
	}
	
	if ( l_iv_cltsetup_struct.stat_ind != 'A' )
	{
		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_UNAUTH, APL_NULL_STRING, 
			       APL_NULL_STRING, APL_NULL_STRING, __LINE__, 
			       __FILE__);

		

		APL_GOBACK_FAIL
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Chk_CustEntitlement().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
IV_Chk_CustEntitlement().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_Chk_PymtDt(const char *p_pymntdate, int *int_p_retstat, 
		  DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	extern int CO_RtvSysDt(char *chr_l_sys_date, 
				    DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	extern int CO_Pro_DateComp(char *chr_l_from_date, char *chr_l_to_date, int *int_l_diff,
				DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	

	char chr_l_sys_date[APL_DATE_LEN];
	int int_l_diff = 0;

	memset(chr_l_sys_date, APL_NULL_CHAR, APL_DATE_LEN);

	if ( APL_FAILURE == CO_RtvSysDt(chr_l_sys_date, l_debug_info_ptr) )
	{
		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		APL_GOBACK_FAIL
	}

	if ( APL_FAILURE == CO_Pro_DateComp((char *) p_pymntdate, chr_l_sys_date, 
					 &int_l_diff, l_debug_info_ptr) )
	{
		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		APL_GOBACK_FAIL
	}
	else if ( int_l_diff < 0 ) 
	{
		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, ERR_PAYDT_CANT_FUTURE, APL_NULL_STRING, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		

		APL_GOBACK_FAIL
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Chk_PymtDt().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
IV_Chk_PymtDt().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_Proc_ServPymt(const char *p_client, const long p_servcode, 
		       const double p_pymntamt, const int p_pymntseqnum, 
		       const char *p_blccycode, int *int_p_retstat, 
		       DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	extern int CO_RtvSysDt(char *chr_l_sys_date, 
				    DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	extern int IV_Mod_IVLEDGERAmt(const IV_LEDGER_STRUCT *l_iv_ledger_struct, 
				      const char *l_rowid, int *int_l_retstat, 
				      DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	extern int IV_Rtv_IVLEDGERSrvOSAmt(const char *chr_l_client, 
					  const long l_servcode, 
					  double *l_srvosamt, 
					  int *int_l_retstat, 
					  DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	extern int IV_Mod_IVLEDGERNew(IV_LEDGER_STRUCT *l_iv_ledger_struct, int *int_l_retstat, 
				  DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	

	char chr_l_buffer1[BUFFER_LEN];
	char chr_l_isopenservpymntcursor = 'N';
	int int_l_status = 0;
	double l_totpymntamount = p_pymntamt, l_allocamount = 0.0;
	double l_RunBal = 0.0;

	EXEC SQL BEGIN DECLARE SECTION;

		char h_sys_dt[APL_DATE_LEN], chr_h_rowid[APL_ROWID_LEN];
		EXEC SQL VAR h_sys_dt IS STRING;
		EXEC SQL VAR chr_h_rowid IS STRING;

		IV_LEDGER_STRUCT l_iv_ledger_structa;
		EXEC SQL VAR l_iv_ledger_structa.client IS STRING;
		EXEC SQL VAR l_iv_ledger_structa.dateof_doc IS STRING;
		EXEC SQL VAR l_iv_ledger_structa.b_ccycd IS STRING;

		short int int_i_rowid = 0;
		I_IV_LEDGER_STRUCT l_i_iv_ledger_struct = {0, 0, 0, 0, 0, 0, 0, 0, 0};
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	memset(h_sys_dt, APL_NULL_CHAR, APL_DATE_LEN);

	if ( APL_FAILURE == CO_RtvSysDt(h_sys_dt, l_debug_info_ptr) )
	{
		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		APL_GOBACK_FAIL
	}

	EXEC SQL DECLARE ServPymntCursor CURSOR FOR
		 SELECT ROWID, SERVICE_CD, CLIENT, DATEOF_DOC, INDEN_NUM, 
			SERVICE_AMT, RUN_BALANCE, OUT_STAND_AMT, CLASS_IND, B_CCYCD
		 FROM IV_LEDGER
		 WHERE ((CLIENT = :p_client) AND
			(SERVICE_CD = :p_servcode) AND
			(CLASS_IND = 'B') AND
			(OUT_STAND_AMT > 0.0))
		 ORDER BY DATEOF_DOC;

	EXEC SQL OPEN ServPymntCursor;

	chr_l_isopenservpymntcursor = 'Y';

	for ( ; l_totpymntamount > 0.0; )
	{
		l_allocamount = 0;

		EXEC SQL FETCH ServPymntcursor 
			 INTO :chr_h_rowid INDICATOR :int_i_rowid, 
			      :l_iv_ledger_structa INDICATOR :l_i_iv_ledger_struct;

		if ( sqlca.sqlcode < 0 )
		{
			char chr_l_buffer[KEY_LENGTH];

			memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

			ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

			*int_p_retstat = IV_CRITCAL_ERROR_IND;

			CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
				       APL_NULL_STRING, APL_NULL_STRING, 
				       __LINE__, __FILE__);

			APL_GOBACK_FAIL
		}
		else if ( sqlca.sqlcode == 1403 )
		{
			break;
		}

		l_allocamount = MIN(l_iv_ledger_structa.out_stand_amt, l_totpymntamount);

		l_totpymntamount -= l_allocamount;

		l_iv_ledger_structa.out_stand_amt -= l_allocamount;

		l_iv_ledger_structa.class_ind = 'P';

		int_l_status = 0;

		if (APL_FAILURE == IV_Mod_IVLEDGERAmt(&l_iv_ledger_structa, chr_h_rowid, 
						      &int_l_status, l_debug_info_ptr))
		{
			*int_p_retstat = IV_CRITCAL_ERROR_IND;

			APL_GOBACK_FAIL
		}

	} 

	EXEC SQL CLOSE ServPymntCursor;

	chr_l_isopenservpymntcursor = 'N';

	int_l_status = 0;

	if ( APL_FAILURE == IV_Rtv_IVLEDGERSrvOSAmt(p_client, p_servcode, 
						   &l_RunBal, &int_l_status, 
						   l_debug_info_ptr) )
	{
		if ( int_l_status == IV_CRITCAL_ERROR_IND )
		{
			*int_p_retstat = int_l_status;

			APL_GOBACK_FAIL
		}
	}

	l_iv_ledger_structa.out_stand_amt = 0.0;
	l_iv_ledger_structa.class_ind = 'P';
	l_iv_ledger_structa.service_amt = p_pymntamt;
	l_iv_ledger_structa.run_balance = l_RunBal;
	l_iv_ledger_structa.inden_num = p_pymntseqnum;
	strcpy(l_iv_ledger_structa.dateof_doc, h_sys_dt);
	strcpy(l_iv_ledger_structa.b_ccycd, p_blccycode);

	int_l_status = 0;

	if ( APL_FAILURE == IV_Mod_IVLEDGERNew(&l_iv_ledger_structa, &int_l_status, 
					   l_debug_info_ptr) )
	{
		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		APL_GOBACK_FAIL
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Proc_ServPymt().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		if ( chr_l_isopenservpymntcursor == 'Y' )
		{
			EXEC SQL CLOSE ServPymntCursor;
		}

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
IV_Proc_ServPymt().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}
