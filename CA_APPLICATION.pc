/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
*/
/*********************************************************************
 *
 * Module Name         :      Master Maintenance
 *
 * File Name           :      CA_APPLICATION.pc
 *
 * Description         :      This file contains db functions for updating
 *                            Master Details.
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author         Description       RFS No.
 * ---------   --------  ------------     -------------     ---------
 * 06/03/2006   1.0       Vaibhav        New file       CA_APPLICATION
 *
 *********************************************************************/


#include "CO_HostStructdef.h"
#include "CA_InterFace.h"
#include "CA_Common.h"

EXEC SQL INCLUDE SQLCA.H;




int CA_ModDbCA_APPLICATION(CA_APPLICATION_STRUCT_H *p_ca_application_struct_h,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr) 
{
	/* Variable Declarations */
  CA_APPLICATION_STRUCT_I *l_ca_application_struct_i;
  CA_APPLICATION_STRUCT_H	l_ca_application_struct_h;
  CA_APPLICATION_STRUCT_I	l_ca_application_struct_i1;


  struct sqlca sqlca;

  char chr_acc_stamp_compare[APL_DATE_LEN] = APL_NULL_STRING;
  char chr_status_compare[APL_STATUS_LEN] = APL_NULL_STRING;
  char chr_sys_access_stamp[APL_DATE_LEN] = APL_NULL_STRING;
  short p_i_maker, p_i_makerdt, p_i_checker, p_i_checkerdt, p_i_access_stamp;
  short p_i_access_stamp_compare;
  short p_i_status = 0;
  int int_error_flag = APL_SUCCESS;
  int int_l_rowexists = 0;
  char  *l_key_codes[4];
  char  *l_key_values[4];
  char  chr_l_table_name[50] = APL_NULL_STRING;
  char  chr_l_field_val[40] = APL_NULL_STRING;
  char l_ca_event[3];	
  int	int_retval = APL_SUCCESS;
  char  txn_indentity_no[APL_TXNREFNO_LEN];	
  char deal_cd[DEALTYPE_LEN_A]        = APL_NULL_STRING;
  char l_loccode[5];
  short i_loccode = 0;
  char l_instr_cd[9];
  char l_postype = APL_NULL_CHAR;
  double apply_qty_i = 0;
  double apply_qty_d = 0;
  double total_qty_appl_rt_i = 0;
  double total_qty_appl_rt_d = 0;

  char     chr_msg_param_struct[4] = APL_NULL_STRING;	

	/* PJ */ 
  double	dbl_maxqty=0.0, h_safekeep_pos=0.0;
  char l_auth_status[3];

  CA_DEAL_STRUCT_H        l_ca_deal_struct_h;
  char l_refno[APL_TXNREFNO_LEN] = APL_NULL_STRING;

  /* Added By Sana for BB event closure enhancement [kotak][start] */
int l_closure_no_of_days = 0;
short i_closure_no_of_days  = 0;
char  chr_l_closure_dt[APL_DATE_LEN] = APL_NULL_STRING;
char chr_l_sysdate_b[APL_DATE_LEN] = APL_NULL_STRING;
char chr_l_ca_event[3]=APL_NULL_STRING;
short i_l_closure_dt = 0;
short i_l_ca_event = 0;
int l_date_diff =0;
memset(chr_l_closure_dt,APL_NULL_CHAR,APL_DATE_LEN);
memset(chr_l_sysdate_b,APL_NULL_CHAR,APL_DATE_LEN);
memset(chr_l_ca_event,APL_NULL_CHAR,3);
/* Added By Sana for BB event closure enhancement [kotak][end] */
  
#ifdef APL_THREADS
    APL_SET_CONTEXT
    EXEC SQL CONTEXT USE :my_ctx_local;
#endif

	 APL_FUNCTION_ENTER(APL_OUT_FILE)

  l_ca_application_struct_i=(CA_APPLICATION_STRUCT_I*)calloc(1,sizeof(CA_APPLICATION_STRUCT_I));

  APL_MALLOC_FAIL(l_ca_application_struct_i)
	/* PJ */
  		memset(l_loccode, APL_NULL_CHAR, 5);
		memset(l_auth_status,APL_NULL_CHAR, 3);
  		strcpy(l_auth_status,"AA");

  p_i_maker =0;
  p_i_makerdt =0;
  p_i_checker =0;
  p_i_checkerdt =0;
  p_i_access_stamp =0;
  p_i_access_stamp_compare =0;

if (!strlen(p_ca_application_struct_h->h_corp_id)) l_ca_application_struct_i->i_corp_id =-1;
     else l_ca_application_struct_i->i_corp_id =0;
 
if (!strlen(p_ca_application_struct_h->h_cln_code)) l_ca_application_struct_i->i_cln_code =-1;
     else l_ca_application_struct_i->i_cln_code =0;
 
if (!strlen(p_ca_application_struct_h->h_application_date)) l_ca_application_struct_i->i_application_date =-1;
     else l_ca_application_struct_i->i_application_date =0;
 
if (!strlen(p_ca_application_struct_h->h_remark)) l_ca_application_struct_i->i_remark =-1;
     else l_ca_application_struct_i->i_remark =0;
 
if (!strlen(p_ca_application_struct_h->h_depo_code)) l_ca_application_struct_i->i_depo_code =-1;
     else l_ca_application_struct_i->i_depo_code =0;
 
if (!strlen(p_ca_application_struct_h->h_depo_cln_id)) l_ca_application_struct_i->i_depo_cln_id =-1;
     else l_ca_application_struct_i->i_depo_cln_id =0;
 
if (!strlen(p_ca_application_struct_h->h_dp_id)) l_ca_application_struct_i->i_dp_id =-1;
     else l_ca_application_struct_i->i_dp_id =0;

if (!strlen(p_ca_application_struct_h->h_cln_refno)) l_ca_application_struct_i->i_cln_refno =-1;
     else l_ca_application_struct_i->i_cln_refno =0;

if (!strlen(p_ca_application_struct_h->h_hf_date)) l_ca_application_struct_i->i_hf_date=-1;
		else l_ca_application_struct_i->i_hf_date =0;

if (!strlen(p_ca_application_struct_h->h_clt_seqnum)) l_ca_application_struct_i->i_clt_seqnum=-1;
		else l_ca_application_struct_i->i_clt_seqnum =0;

if (!strlen(p_ca_application_struct_h->h_ae_passind)) l_ca_application_struct_i->i_ae_passind=-1;
		else l_ca_application_struct_i->i_ae_passind =0;

if (!strlen(p_ca_application_struct_h->h_processed_date)) l_ca_application_struct_i->i_processed_date=-1;
		else l_ca_application_struct_i->i_processed_date =0;


if (!strlen(p_ca_application_struct_h->h_maker)) l_ca_application_struct_i->i_maker =-1;
     else l_ca_application_struct_i->i_maker =0;
 
if (!strlen(p_ca_application_struct_h->h_maker_dt)) l_ca_application_struct_i->i_maker_dt =-1;
     else l_ca_application_struct_i->i_maker_dt =0;
 
if (!strlen(p_ca_application_struct_h->h_checker)) l_ca_application_struct_i->i_checker =-1;
     else l_ca_application_struct_i->i_checker =0;

if (!strlen(p_ca_application_struct_h->h_checker_dt)) l_ca_application_struct_i->i_checker_dt =-1;
     else l_ca_application_struct_i->i_checker_dt =0;

if (!strlen(p_ca_application_struct_h->h_access_stamp)) l_ca_application_struct_i->i_access_stamp =-1;
     else l_ca_application_struct_i->i_access_stamp =0;




 if(CO_RtvSysDtTime(chr_sys_access_stamp,l_debug_info_ptr) !=APL_SUCCESS)
	{
		APL_GOBACK_FAIL
	}

		/* Added By Sana for BB event closure enhancement [kotak][start] */
		if(APL_FAILURE == CO_RtvSysDt(chr_l_sysdate_b,l_debug_info_ptr))
		 {
			printf("Error in getting date");
			APL_GOBACK_FAIL
		 }

		EXEC SQL SELECT FIELD_VAL into :l_closure_no_of_days:i_closure_no_of_days 
			FROM PRO_GSSPLVAL
			WHERE MAIN_FUN = 'CAEVENT'
				AND SUB_PROCESS = 'NS_BB_CLOSE_DT_DAYS';
		if (sqlca.sqlcode == 1403)
		{
			printf("\n\nNo Cut-Over Date maintained. Hence the event will remain in RA status\n\n");
			l_closure_no_of_days = 0;
		}
		else if (sqlca.sqlcode <0)
		{
			printf("\n\nDB Error Occured. SQLCA.SQLCODE is |%d|\n",sqlca.sqlcode);
			APL_GOBACK_FAIL
		}
		printf("\nClosure no of days maintained is : |%d|\n",l_closure_no_of_days);

		if(l_closure_no_of_days > 0)
		{
			EXEC SQL SELECT DECODE(DEAL_TO_DATE,NULL,NULL,DEAL_TO_DATE+:l_closure_no_of_days),CA_EVENT
										into :chr_l_closure_dt:i_l_closure_dt,:chr_l_ca_event:i_l_ca_event
							FROM CAEVENT
							WHERE CORP_ID = :p_ca_application_struct_h->h_corp_id;
			IS_ANY_ORA_ERROR

			printf("\nCut-Over date for the event is |%s|\n",chr_l_closure_dt);
			printf("\nCA event is |%s|\n",chr_l_ca_event);
			if(strlen(chr_l_closure_dt) > 0 && (strcmp(chr_l_ca_event,EVT_BUY_BACK) ==0))
			{

				if(APL_FAILURE == CO_Pro_DateComp(chr_l_sysdate_b,chr_l_closure_dt,&l_date_diff,l_debug_info_ptr))
				{
					printf("\n\nFailed in CO_Pro_DateComp function\n\n");
					APL_GOBACK_FAIL
				}
				printf("\n\nDate diff we got is |%d|\n\n",l_date_diff);
				if(l_date_diff >= 0)
				{
					printf("Cut-Over Date has not passed. Application entries allowed\n\n");
				}
				else
				{
					if (CO_InsertErr(l_debug_info_ptr,
									ERR_CUTOVER_DT_PASS,
									APL_NULL_STRING,
									APL_NULL_STRING,
									APL_NULL_STRING,
									__LINE__,
									__FILE__) != APL_SUCCESS)
									APL_GOBACK_FAIL
				}
			}
		}
		/* Added By Sana for BB event closure enhancement [kotak][end] */

	
 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_INPUT))
	{

		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered Input of Function CA_ModDbCA_APPLICATION\n",
													NULL,p_intl_envdatastruct_h);
 	}

		strcpy(p_ca_application_struct_h->h_status,STATUS_UAUTH);
		l_ca_application_struct_i->i_status =0;
		strcpy(p_ca_application_struct_h->h_maker,p_intl_envdatastruct_h->usr);
		l_ca_application_struct_i->i_maker=0;
	  	strcpy(p_ca_application_struct_h->h_maker_dt,chr_sys_access_stamp);
		l_ca_application_struct_i->i_maker_dt=0;
		strcpy(p_ca_application_struct_h->h_access_stamp,chr_sys_access_stamp);
		l_ca_application_struct_i->i_access_stamp =0;
		strcpy(p_ca_application_struct_h->h_checker,APL_NULL_STRING);
		strcpy(p_ca_application_struct_h->h_checker_dt,APL_NULL_STRING);

		printf("CORPID =|%s|\n",p_ca_application_struct_h->h_corp_id);
		printf("clncode =|%s|\n",p_ca_application_struct_h->h_cln_code);
		printf("MAKER =|%s|\n",p_ca_application_struct_h->h_maker);
		printf("MAKER_DT =|%s|\n",p_ca_application_struct_h->h_maker_dt);
		printf("CHECKER =|%s|\n",p_ca_application_struct_h->h_checker);
		printf("CHECKER_DT =|%s|\n",p_ca_application_struct_h->h_checker_dt);
		printf("STATUS =|%s|\n",p_ca_application_struct_h->h_status);
		printf("APPLICATION_DATE =|%s|\n",p_ca_application_struct_h->h_application_date);
		printf("APPLIED_QTY =|%lf|\n",p_ca_application_struct_h->h_applied_qty);
		printf("AVL_QTY =|%lf|\n",p_ca_application_struct_h->h_avl_qty);
		printf("ADDQTY_APP =|%lf|\n",p_ca_application_struct_h->h_addqty_app);
		printf("PRICE =|%lf|\n",p_ca_application_struct_h->h_price);
		printf("AMT_PAYABLE =|%lf|\n",p_ca_application_struct_h->h_amt_payable);
		printf("AMT_DUE =|%lf|\n",p_ca_application_struct_h->h_amt_due);
		printf("DEPO_CODE =|%s|\n",p_ca_application_struct_h->h_depo_code);
		printf("DEPO_CLN_ID =|%s|\n",p_ca_application_struct_h->h_depo_cln_id);
		printf("DP_ID =|%s|\n",p_ca_application_struct_h->h_dp_id);
		printf("CLN_REFNO =|%s|\n",p_ca_application_struct_h->h_cln_refno);
		printf("CLN_SRNO =|%d|\n",p_ca_application_struct_h->h_cln_srno);
		printf("REMARK =|%s|\n",p_ca_application_struct_h->h_remark);
		printf("ACCESS_STAMP =|%s|\n",p_ca_application_struct_h->h_access_stamp);


		EXEC SQL INSERT INTO CA_APPLICATION VALUES (:p_ca_application_struct_h:l_ca_application_struct_i);

		IS_ANY_ORA_ERROR_AND_DUPLICATE(MAP_DET_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
	}
	else
	{

	l_key_codes[0]="CORP_ID";
	l_key_codes[1]="CLN_CODE";
	l_key_codes[2]="CLN_SRNO";
	l_key_codes[3]=APL_NULL_STRING;
	
	l_key_values[0]=p_ca_application_struct_h -> h_corp_id;
	l_key_values[1]=p_ca_application_struct_h -> h_cln_code;
	l_key_values[2]=ltoa(p_ca_application_struct_h -> h_cln_srno);
	l_key_values[3] = APL_NULL_STRING;

		
   strcpy(chr_l_table_name,"CA_APPLICATION");

	printf("Before all to rtvmast for accesstamp\n");
    int_retval = CR_Rtv_MastChldChrVal( l_key_codes,
                                        l_key_values,
                                        chr_l_table_name,
                                        "ACCESS_STAMP",
                                        chr_l_field_val,
                                        l_debug_info_ptr);
	printf("after all to rtvmast for accesstamp\n");

	printf("\nACCESS STAMMP IS-------|%s|\n",chr_l_field_val);
    if (int_retval != APL_SUCCESS)
         APL_GOBACK_FAIL

		strcpy(chr_acc_stamp_compare,chr_l_field_val);
    

		int_retval = CR_Rtv_MastChldChrVal( l_key_codes,
                                        l_key_values,
                                        chr_l_table_name,
                                        "STATUS",
                                        chr_l_field_val,
                                        l_debug_info_ptr);

    if (int_retval != APL_SUCCESS)
         APL_GOBACK_FAIL

		strcpy(chr_status_compare,chr_l_field_val);
	}

 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_MODIFY))
	{
  	p_i_checker =-1;
  	p_i_checkerdt =-1;
		strcpy(p_ca_application_struct_h->h_checker,APL_NULL_STRING);
		strcpy(p_ca_application_struct_h->h_checker_dt,APL_NULL_STRING);

		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered modify of Function MT_ModDBNoDlvDet\n",
													NULL,p_intl_envdatastruct_h);
 	}

	   if (!strcmp(p_ca_application_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   {
			strcpy(p_ca_application_struct_h->h_access_stamp,chr_sys_access_stamp);
			l_ca_application_struct_i->i_access_stamp =0;
       strcpy(p_ca_application_struct_h->h_status,STATUS_UAUTH);
			l_ca_application_struct_i->i_status =0;



                printf("CLN_REFNO =|%s|\n",p_ca_application_struct_h->h_cln_refno);
		printf("CLN_SRNO =|%d|\n",p_ca_application_struct_h->h_cln_srno);




			EXEC SQL UPDATE CA_APPLICATION  SET 
           		MAKER =:p_intl_envdatastruct_h->usr:p_i_maker,
			MAKER_DT =:chr_sys_access_stamp:p_i_makerdt,
			CHECKER =:p_ca_application_struct_h->h_checker:p_i_checker,
			CHECKER_DT =:p_ca_application_struct_h->h_checker_dt:p_i_checkerdt,
			STATUS =:p_ca_application_struct_h->h_status:l_ca_application_struct_i->i_status,
			APPLICATION_DATE =:p_ca_application_struct_h->h_application_date:l_ca_application_struct_i->i_application_date,
			APPLIED_QTY =:p_ca_application_struct_h->h_applied_qty:l_ca_application_struct_i->i_applied_qty,
			AVL_QTY =:p_ca_application_struct_h->h_avl_qty:l_ca_application_struct_i->i_avl_qty,
			ADDQTY_APP =:p_ca_application_struct_h->h_addqty_app:l_ca_application_struct_i->i_addqty_app,
			PRICE =:p_ca_application_struct_h->h_price:l_ca_application_struct_i->i_price,
			AMT_PAYABLE =:p_ca_application_struct_h->h_amt_payable:l_ca_application_struct_i->i_amt_payable,
			AMT_DUE =:p_ca_application_struct_h->h_amt_due:l_ca_application_struct_i->i_amt_due,
			DEPO_CODE =:p_ca_application_struct_h->h_depo_code:l_ca_application_struct_i->i_depo_code,
			DEPO_CLN_ID =:p_ca_application_struct_h->h_depo_cln_id:l_ca_application_struct_i->i_depo_cln_id,
			DP_ID =:p_ca_application_struct_h->h_dp_id:l_ca_application_struct_i->i_dp_id,
			CLN_REFNO =:p_ca_application_struct_h->h_cln_refno:l_ca_application_struct_i->i_cln_refno,
			CLN_SRNO =:p_ca_application_struct_h->h_cln_srno:l_ca_application_struct_i->i_cln_srno,
			REMARK =:p_ca_application_struct_h->h_remark:l_ca_application_struct_i->i_remark,
			ACCESS_STAMP =:p_ca_application_struct_h->h_access_stamp:l_ca_application_struct_i->i_access_stamp
			WHERE 
				CORP_ID =:p_ca_application_struct_h->h_corp_id AND 
				CLN_CODE =:p_ca_application_struct_h->h_cln_code AND         
				CLN_SRNO =:p_ca_application_struct_h->h_cln_srno ;          
	
				IS_ANY_ORA_ERROR;	
   }
		else 
	   {
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   } 
	}

 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_AUTHORISE))
	{

		APL_IF_DEBUG
 	{
  			CO_ProcMonitor(APL_OUT_FILE, "Entered authorize of Function MT_ModDBNoDlvDet\n",														NULL,p_intl_envdatastruct_h);
	}	
		if (!strcmp(p_ca_application_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   {
			
			EXEC SQL SELECT CA_EVENT,INSTR_CODE INTO :l_ca_event,:l_instr_cd
						FROM CAEVENT
						WHERE CORP_ID =:p_ca_application_struct_h->h_corp_id;

			IS_ANY_ORA_ERROR

			/**EXEC SQL SELECT LOCATION_CD INTO :l_loccode:i_loccode
						FROM MT_INSTRUMENT
						WHERE INSTR_CODE =:l_instr_cd;

			IS_ANY_ORA_ERROR**/
			
			printf("Event type |%s| of CORP_ID |%s|\n",l_ca_event,p_ca_application_struct_h->h_corp_id);
			/*printf("Location code is |%s|\n",l_loccode);*/	
		
		 apply_qty_i = p_ca_application_struct_h->h_applied_qty;
		 apply_qty_d = p_ca_application_struct_h->h_applied_qty;
		/** total_qty_appl_rt_i = p_ca_application_struct_h->h_applied_qty + p_ca_application_struct_h->h_addqty_app;
	 	 total_qty_appl_rt_d = p_ca_application_struct_h->h_applied_qty + p_ca_application_struct_h->h_addqty_app;**/				 
			if(strcmp(p_ca_application_struct_h->h_status,STATUS_DEL_UAUTH))
	    	{
	    		strcpy(p_ca_application_struct_h->h_access_stamp,chr_sys_access_stamp);
	    		l_ca_application_struct_i->i_access_stamp =0;
   	    	strcpy(p_ca_application_struct_h->h_checker,p_intl_envdatastruct_h->usr);
	    		l_ca_application_struct_i->i_checker=0;
  	    		strcpy(p_ca_application_struct_h->h_checker_dt,chr_sys_access_stamp);
	    		l_ca_application_struct_i->i_checker_dt=0;
         	 strcpy(p_ca_application_struct_h->h_status,STATUS_AUTH);
	    		l_ca_application_struct_i->i_status =0;
				
				EXEC SQL SELECT *
							INTO :l_ca_application_struct_h:l_ca_application_struct_i1
							FROM CA_APPLICATION
							WHERE	CORP_ID	=	:p_ca_application_struct_h->h_corp_id
							AND	CLN_CODE	=	:p_ca_application_struct_h-> h_cln_code
							AND	CLN_SRNO	=	:p_ca_application_struct_h->h_cln_srno	;
				IS_ANY_ORA_ERROR
				if(sqlca.sqlcode == 1403)
					APL_GOBACK_FAIL
				if(!strcmp(l_ca_event,EVT_BUY_BACK))
				{
					/* Open Offer Enh PJ */
					/* 1. Get Max applied qty from table CA_APPLICATION_CABL 
					 * 2. If no record found then move all position to CABL considering all depo in hand
					 * 3. If record found with more qty don't move any position to CABL
					 * 4. If record found with less qty then find difference and now again move that much qty to CABL */
					
					/* 1. */		
					Alert(" %s %s %s ", p_ca_application_struct_h->h_corp_id, p_ca_application_struct_h-> h_cln_code,l_auth_status );
					EXEC SQL SELECT MAX(NVL(APPLIED_QTY,0)) INTO :dbl_maxqty
						FROM CA_APPLICATION 
						WHERE CORP_ID = :p_ca_application_struct_h->h_corp_id 
						AND CLN_CODE = :p_ca_application_struct_h-> h_cln_code
					  	AND STATUS = :l_auth_status;
					
					Alert(" %lf %d", dbl_maxqty , sqlca.sqlcode);

					/* 2 */
					
					if ( apply_qty_d > dbl_maxqty	&& dbl_maxqty > 0 )
					{
						apply_qty_d = apply_qty_d - dbl_maxqty ;
					}
					else if (apply_qty_d < dbl_maxqty && dbl_maxqty > 0 )
					{
						apply_qty_d = 0;
					}

					Alert (" %lf ", apply_qty_d);	

					EXEC SQL DECLARE Cur_movecabl  CURSOR  FOR 
						SELECT LOCATION_CD,SAFEKEEP_POS FROM DL_SAFEK 
						WHERE 
						INSTR_CODE = :l_instr_cd 
						AND CLIENT = :p_ca_application_struct_h-> h_cln_code 
						AND BLOCK_TYPE = 'FREE'
						AND SAFEKEEP_POS > 0
						ORDER BY LOCATION_CD; 
					
					EXEC SQL OPEN Cur_movecabl;
					
					if(sqlca.sqlcode < 0)
					{
						APL_GOBACK_FAIL		
					}
					
					IS_ANY_ORA_ERROR	

					for(;;)
					{
  						memset(l_loccode, APL_NULL_CHAR, 5); /* Just precaution */
						h_safekeep_pos = 0.0;

						EXEC SQL FETCH Cur_movecabl INTO :l_loccode:i_loccode,:h_safekeep_pos;
					
						IS_ANY_ORA_ERROR
						Alert("%lf", apply_qty_d );

						if(APL_ZERO_RESULT_SET || apply_qty_d == 0)
						{
							Alert("No data found");
							break;
						}
						
						/* Find appropriate qty to move for each depo */
							
						if ( apply_qty_d < h_safekeep_pos )
								apply_qty_i = apply_qty_d;
						else
								apply_qty_i = h_safekeep_pos;

						
								/** Moving positions From settled free to settled cabl **/
								if(DL_Mod_Posn(l_ca_application_struct_h.h_cln_code,
									l_instr_cd,
									l_loccode,
									"",
									'S',
									'2',
									&(apply_qty_i),
									'D',
									"FREE",
									l_debug_info_ptr)== APL_FAILURE)
									APL_GOBACK_FAIL

								if(DL_Mod_Posn(l_ca_application_struct_h.h_cln_code,
											l_instr_cd,
											l_loccode,
											"",
											'S',
											'2',
											&(apply_qty_i),
											'I',
											"CABL",
											l_debug_info_ptr)== APL_FAILURE)
									APL_GOBACK_FAIL		

						/* Insert trace path into CA_APPLICATION_CABL For Rights PJ */
						if(DL_Ins_CABL(p_ca_application_struct_h->h_corp_id,
											l_ca_application_struct_h.h_cln_code,
											p_ca_application_struct_h->h_cln_srno,
											l_loccode,
											apply_qty_i,
											l_ca_application_struct_h.h_price,
											l_debug_info_ptr) == APL_FAILURE) 
							APL_GOBACK_FAIL


										
						/* Update remaining qty */
						apply_qty_d = apply_qty_d - apply_qty_i ;
					}
					
					EXEC SQL CLOSE Cur_movecabl;

					Alert("End of cursor ");
					/* End of for cursor */
					
				}

				else if(!strcmp(l_ca_event,EVT_RHTS))
				{	
					/** For Rights DF Deal should be created for applied qty**/
					/** Creation Of Deal **/
					/**1. Populateing CA Deal Structure **/
					/**2. Rtv Refno for the Deal **/
					/**3. Create the Deal **/
					/**5. Generate 566N09 Message **/

					memset(&l_ca_deal_struct_h,APL_NULL_CHAR,sizeof(l_ca_deal_struct_h));
					if(CA_Rtv_ApplDeal(	CA_RT_APPL_IND,
												APL_DEAL_DF,
												&l_ca_application_struct_h,
												&l_ca_deal_struct_h,
												l_debug_info_ptr) == APL_FAILURE)
						APL_GOBACK_FAIL

					if(APL_FAILURE == CO_GenRefno(CA_RT_APPL_IND,
										APL_NULL_STRING,
										APL_DEAL_DF,
										l_ca_deal_struct_h.h_indentity_no,
										l_debug_info_ptr))
						APL_GOBACK_FAIL

					if ( CA_Mod_NewTrade( 	&(l_ca_deal_struct_h),
													p_intl_envdatastruct_h,
													l_refno,
													l_debug_info_ptr) == APL_FAILURE)
						APL_GOBACK_FAIL

						/* 4. Insert trace path into CA_APPLICATION_CABL PJ */
						if(DL_Ins_CABL(p_ca_application_struct_h->h_corp_id,
											l_ca_application_struct_h.h_cln_code,
											p_ca_application_struct_h->h_cln_srno,
											l_ca_application_struct_h.h_depo_code,
											l_ca_application_struct_h.h_applied_qty,
											l_ca_application_struct_h.h_price,
											l_debug_info_ptr) == APL_FAILURE) 
							APL_GOBACK_FAIL

						/* 5. Generate 566N09 Message */
						strcpy(chr_msg_param_struct,ltoa(p_ca_application_struct_h->h_cln_srno));
						strcat(chr_msg_param_struct,";");
	
						if (GBDbInsIMSGENT(	"566N09",
													p_ca_application_struct_h->h_corp_id,
													l_ca_application_struct_h.h_cln_code,
													'Y',
													chr_msg_param_struct,
													l_debug_info_ptr) == APL_FAILURE)
							APL_GOBACK_FAIL

				}

	    		EXEC SQL UPDATE CA_APPLICATION SET 
            	CHECKER =:p_intl_envdatastruct_h->usr:p_i_checker,
            	CHECKER_DT =:chr_sys_access_stamp:p_i_access_stamp,
				ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp,
            	STATUS =:p_ca_application_struct_h->h_status:l_ca_application_struct_i->i_status
				WHERE 
					CORP_ID =:p_ca_application_struct_h->h_corp_id AND 
					CLN_CODE =:p_ca_application_struct_h->h_cln_code AND         
					CLN_SRNO =:p_ca_application_struct_h->h_cln_srno ;          

				IS_ANY_ORA_ERROR	
			}
   	   else  
	    	{
	    		
			/**
			 if(!strcmp(l_ca_event,EVT_BUY_BACK))
				
			if(strcmp(p_ca_application_struct_h->h_status,STATUS_DEL_UAUTH))
			{	
					if(DL_Mod_Posn(p_ca_application_struct_h->h_cln_code,
										l_instr_cd,
										p_ca_application_struct_h->h_depo_code,
										"",
										'S',
										'2',	
										&(apply_qty_i),
										'I',
										"FREE",
										l_debug_info_ptr)== APL_FAILURE)
						APL_GOBACK_FAIL
					

					if(DL_Mod_Posn(p_ca_application_struct_h->h_cln_code,
										l_instr_cd,
										p_ca_application_struct_h->h_depo_code,
										"",
										'S',
										'2',
										&(apply_qty_d),
										'D',
										"CABL",
										l_debug_info_ptr)== APL_FAILURE)
						APL_GOBACK_FAIL
				
			}		
			  
			if(!strcmp(l_ca_event,EVT_RHTS))
			{	
					if(DL_Mod_Posn(p_ca_application_struct_h->h_cln_code,
										l_instr_cd,
										p_ca_application_struct_h->h_depo_code,
										"",
										'S',
										'1',	
										&(apply_qty_i),
										'I',
										"FREE",
										l_debug_info_ptr)== APL_FAILURE)
						APL_GOBACK_FAIL
					

					if(DL_Mod_Posn(p_ca_application_struct_h->h_cln_code,
										l_instr_cd,
										p_ca_application_struct_h->h_depo_code,
										"",
										'S',
										'1',
										&(apply_qty_d),
										'D',
										"CABL",
										l_debug_info_ptr)== APL_FAILURE)
						APL_GOBACK_FAIL
			}**/
				
				EXEC SQL DELETE CA_APPLICATION 
				WHERE 
					CORP_ID =:p_ca_application_struct_h->h_corp_id AND 
					CLN_CODE =:p_ca_application_struct_h->h_cln_code AND          
					CLN_SRNO =:p_ca_application_struct_h->h_cln_srno;          
          
			   IS_ANY_ORA_ERROR
	    	}
	   }
		else 
	   {
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   } 
	}

 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_RESET))
	{

		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered reset of Function MT_ModDBNoDlvDet\n",
													NULL,p_intl_envdatastruct_h);
 	}

		if (!strcmp(p_ca_application_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   {
   		if(!strcmp(p_ca_application_struct_h->h_status,STATUS_DEL_UAUTH))
	    	{
	    		strcpy(p_ca_application_struct_h->h_access_stamp,chr_sys_access_stamp);
	    		l_ca_application_struct_i->i_access_stamp =0;
   	    	strcpy(p_ca_application_struct_h->h_checker,p_intl_envdatastruct_h->usr);
	    		l_ca_application_struct_i->i_checker=0;
  	    	strcpy(p_ca_application_struct_h->h_checker_dt,chr_sys_access_stamp);
	    		l_ca_application_struct_i->i_checker_dt=0;
          strcpy(p_ca_application_struct_h->h_status,STATUS_AUTH);
	    		l_ca_application_struct_i->i_status =0;

	    		EXEC SQL UPDATE CA_APPLICATION SET 
           	CHECKER =:p_intl_envdatastruct_h->usr:p_i_checker,
            	CHECKER_DT =:chr_sys_access_stamp:p_i_access_stamp,
					ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp,
            	STATUS =:p_ca_application_struct_h->h_status:l_ca_application_struct_i->i_status
				WHERE 
					CORP_ID =:p_ca_application_struct_h->h_corp_id AND 
					CLN_CODE =:p_ca_application_struct_h->h_cln_code AND
					CLN_SRNO =:p_ca_application_struct_h->h_cln_srno;

				IS_ANY_ORA_ERROR;	
			}
	   }
		else 
	   {
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   } 
	}

 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_DELETE))
	{
  	p_i_checker =-1;
  	p_i_checkerdt =-1;
		strcpy(p_ca_application_struct_h->h_checker,APL_NULL_STRING);
		strcpy(p_ca_application_struct_h->h_checker_dt,APL_NULL_STRING);

		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered delete of Function MT_ModDBNoDlvDet\n",
													NULL,p_intl_envdatastruct_h);
 	}

	   if (!strcmp(p_ca_application_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   {
			strcpy(p_ca_application_struct_h->h_access_stamp,chr_sys_access_stamp);
			l_ca_application_struct_i->i_access_stamp =0;
       strcpy(p_ca_application_struct_h->h_status,STATUS_DEL_UAUTH);
			l_ca_application_struct_i->i_status =0;

			EXEC SQL UPDATE CA_APPLICATION SET 
            	MAKER =:p_intl_envdatastruct_h->usr:p_i_maker,
					MAKER_DT =:chr_sys_access_stamp:p_i_makerdt,
					CHECKER =:p_ca_application_struct_h->h_checker:p_i_checker,
					CHECKER_DT =:p_ca_application_struct_h->h_checker:p_i_checkerdt,
            	STATUS =:p_ca_application_struct_h->h_status:l_ca_application_struct_i->i_status,
					ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp
				WHERE 
					CORP_ID =:p_ca_application_struct_h->h_corp_id AND 
					CLN_CODE =:p_ca_application_struct_h->h_cln_code AND 
					CLN_SRNO =:p_ca_application_struct_h->h_cln_srno ; 
 
              
					IS_ANY_ORA_ERROR;	
	   }
		else 
	   {
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   } 
	}


 if (int_error_flag == APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}
 APL_GOBACK_SUCCESS

 RETURN_SUCCESS :
	{
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
		free(l_ca_application_struct_i);
		return(APL_SUCCESS);
	}
  RETURN_FAILURE :
	{
 	APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
		free(l_ca_application_struct_i);
		return(APL_FAILURE);
	}

}

int DL_Ins_CABL(char *p_corpid, char *p_cln_code, int p_cln_srno, char *p_depo_code, double p_dbl_applied_qty,
						double p_price,DEBUG_INFO_STRUCT_H **l_debug_info_ptr ) //AIX -Warning Removal - * added for p_cln_srno
{

  CA_APPLICATION_CABL_STRUCT_H	l_ca_application_cabl_struct_h;
  CA_APPLICATION_CABL_STRUCT_I	l_ca_application_cabl_struct_i;

	double l_moved_qty = 0;
	short i_corpid = 0;
	short i_cln_code = 0; 
	short i_cln_srno = 0; 
	short i_depo_code = 0; 
	short i_dbl_applied_qty = 0;
	short i_moved_qty = 0;
	short i_price = 0;

	memset(&l_ca_application_cabl_struct_h,NULL,sizeof(CA_APPLICATION_CABL_STRUCT_H));
	
	strcpy(l_ca_application_cabl_struct_h.h_corp_id , p_corpid);
	Alert("Check corp_id = |%s|",l_ca_application_cabl_struct_h.h_corp_id);
	fflush(stdout);

	strcpy(l_ca_application_cabl_struct_h.h_cln_code, p_cln_code);
	Alert("Check cln code = |%s|",l_ca_application_cabl_struct_h.h_cln_code);
	fflush(stdout);

	l_ca_application_cabl_struct_h.h_cln_srno 	= p_cln_srno;
	Alert("Check serial no = |%d|",l_ca_application_cabl_struct_h.h_cln_srno);
	fflush(stdout);

	strcpy(l_ca_application_cabl_struct_h.h_depo_code,p_depo_code);
	Alert("Check depo code= |%s|",l_ca_application_cabl_struct_h.h_depo_code);
	fflush(stdout);

	l_ca_application_cabl_struct_h.h_applied_qty = p_dbl_applied_qty;
	l_moved_qty = p_dbl_applied_qty;
	l_ca_application_cabl_struct_h.h_moved_qty   = l_moved_qty;
	Alert("Check Applied Quantity : |%lf| and Moved quantity : |%lf|",l_ca_application_cabl_struct_h.h_applied_qty,l_ca_application_cabl_struct_h.h_moved_qty);
	fflush(stdout);

	l_ca_application_cabl_struct_h.h_price			= p_price;
	Alert("Check price = |%lf|",l_ca_application_cabl_struct_h.h_price);
	fflush(stdout);

	//EXEC SQL INSERT INTO CA_APPLICATION_CABL VALUES (:l_ca_application_cabl_struct_h:l_ca_application_cabl_struct_i);
	EXEC SQL INSERT INTO CA_APPLICATION_CABL (CORP_ID,CLN_CODE,CLN_SRNO,DEPO_CODE,APPLIED_QTY,MOVED_QTY,PRICE)
				VALUES	(:p_corpid:i_corpid, 
						:p_cln_code:i_cln_code, 
						:p_cln_srno:i_cln_srno, 
						:p_depo_code:i_depo_code, 
						:p_dbl_applied_qty:i_dbl_applied_qty,
						:l_moved_qty:i_moved_qty,
						:p_price:i_price);

	IS_ANY_ORA_ERROR
	
 APL_GOBACK_SUCCESS

 RETURN_SUCCESS :
	{
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
		return(APL_SUCCESS);
	}
  RETURN_FAILURE :
	{
 	APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
		return(APL_FAILURE);
	}

}
