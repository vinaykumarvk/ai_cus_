





#include "stdio_64.h"
#include <string.h>
#include <stdlib.h>
#include "IV_Control_A.h"

EXEC SQL INCLUDE SQLCA;

int	IV_Proc_DecodeCommAcc(char				*chr_p_client,
								char				*p_com_ac,
								int				*int_p_retstat,
								DEBUG_INFO_STRUCT_H	**l_debug_info_ptr)
{

char	chr_h_com_ac[APL_CLIENT_LENGTH]	= APL_NULL_STRING;
char	h_dl_client[APL_CLIENT_LENGTH]	= APL_NULL_STRING;

EXEC SQL BEGIN DECLARE SECTION;


EXEC SQL VAR chr_h_com_ac 	IS STRING;
EXEC SQL VAR h_dl_client 	IS STRING;
short		i_com_ac =0;
struct	sqlca sqlca;
EXEC SQL END DECLARE SECTION;

 #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif


strcpy(h_dl_client,chr_p_client);

EXEC SQL SELECT DECODE(a.COMM_CLT,1,b.COMM_A,
										  2,b.COMM_B,
										  3,b.COMM_C,
										  4,b.COMM_D,
										  5,b.COMM_E,
										  6,b.COMM_F,
										  7,b.COMM_G,
										  8,b.COMM_H,
										  9,b.COMM_I)
			INTO	:chr_h_com_ac:i_com_ac
			FROM IV_CLIENTSETUP a, IV_CLIENT b
			WHERE a.CLIENT = :h_dl_client;

IS_ANY_ORA_ERROR

printf("the  comisssion client is %s\n",chr_h_com_ac);

if (sqlca.sqlcode < 0)
{
		char chr_l_buffer[KEY_LENGTH];

      memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

      ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

      *int_p_retstat = IV_CRITCAL_ERROR_IND;

      CO_InsertErr(l_debug_info_ptr, 
							DB_ERR_NO, 
							chr_l_buffer,
                		APL_NULL_STRING, 
							APL_NULL_STRING,
                		__LINE__, 
							__FILE__);

      APL_GOBACK_FAIL
}
else if (sqlca.sqlcode == 1403)
{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;
		
		APL_GOBACK_FAIL;

}

if (i_com_ac == -1)

{
		*int_p_retstat = IV_COLUMN_NULL_ERR;
		
		APL_GOBACK_FAIL

}

strcpy(p_com_ac,chr_h_com_ac);

*int_p_retstat = IV_SUCCESS;

APL_GOBACK_SUCCESS



RETURN_FAILURE:
	return (APL_FAILURE);

RETURN_SUCCESS:
	return (APL_SUCCESS);
}
