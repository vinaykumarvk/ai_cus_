

   
   
   
   
   
   
   
   
   
   
   
   


#include "Intellect_Common.h"
#include "CO_HostStructdef.h"
#include "DL_Interface.h" 
#include <stdlib.h>
#include "DL_Ipo.h"
EXEC SQL INCLUDE SQLCA.H;



int int_g_del_rept_line = 0,int_g_create_rept_line = 0,int_g_rej_rept_line = 0,int_g_rej_sat_rept_line = 0,int_g_upd_sat_rept_line = 0,int_g_unmatch_rept_line = 0; 
extern   char* chr_g_error_messages[];
char chr_g_running_acc[APL_CLIENT_LENGTH];
int int_g_running_acc_set ;

//main(int argc,char **argv)
int main(int argc,char **argv)//Changes done for AIX Migration
{
   DEBUG_INFO_STRUCT_H **l_debug_info_ptr = (DEBUG_INFO_STRUCT_H **)NULL ;
  	INTL_ENV_DATA_STRUCT_H p_intlenv_data_struct_h;

   FILE *l_logfile, *l_finifile = (FILE *)NULL;
   FILE *l_ipo_del_rept_file = (FILE *)NULL,*l_ipo_create_rept_file = (FILE *)NULL,*l_ipo_reject_rept_file = (FILE *)NULL,*l_sat_reject_rept_file = (FILE *)NULL,*l_sat_update_rept_file = (FILE *)NULL, *l_unmatch_rept_file =(FILE *)NULL;	 

   char **temp = (char **)NULL,**chr_l_param = (char **)NULL,l_function[4];
	  char l_temp_processing_status[51] = APL_NULL_STRING;
   int int_num=0,int_noelem =0;
   char chr_l_ipo_file[PATH_LENGTH]=APL_NULL_STRING;
   char chr_l_inifile[PATH_LENGTH] = APL_NULL_STRING;
   struct sqlca sqlca;
   char chr_l_sys_date[APL_DATE_LEN] = APL_NULL_STRING;
   int int_retval=0;
   short int_l_condexists_A =0;

   char chr_uname[APL_USERID_LEN] = APL_NULL_STRING;
   char chr_custody_id_b[APL_USERID_LEN] = APL_NULL_STRING;
   char chr_passwd[APL_USERID_LEN] = APL_NULL_STRING;

   EXEC SQL BEGIN DECLARE SECTION;
 	  	int int_l_count =0;

 	  	EXEC SQL VAR chr_l_sys_date  IS STRING;
   	EXEC SQL VAR chr_uname		IS STRING;
   	EXEC SQL VAR chr_passwd		IS STRING;

  	EXEC SQL END DECLARE SECTION;
	
   
   
	
   
	int_g_running_acc_set = 0;
   if(APL_FAILURE == CO_SplitStr(argv[9],';',&int_noelem,&chr_l_param))
   {
			CO_ProcMonitor(APL_OUT_FILE,"Failed in CO_SplitStr\n",NULL,NULL);
      APL_GOBACK_FAIL
   }
   if(int_noelem < 3)
   {
    	CO_ProcMonitor(APL_OUT_FILE,"Parameter string not proper\n",NULL,NULL);
   }
   strcpy(l_function,chr_l_param[0]);
   strcat(l_function,chr_l_param[1]);
   memset(&p_intlenv_data_struct_h, NULL, sizeof(INTL_ENV_DATA_STRUCT_H));

	if ( ( (l_debug_info_ptr) = (DEBUG_INFO_STRUCT_H **)calloc(1,sizeof(DEBUG_INFO_STRUCT_H *)) ) == NULL )
		APL_GOBACK_FAIL;

   strcpy(p_intlenv_data_struct_h.usr, argv[3]);
   strcpy(p_intlenv_data_struct_h.h_mode, argv[4]);
   strcpy(p_intlenv_data_struct_h.processtion, argv[5]);
   strcpy(p_intlenv_data_struct_h.auth_req, argv[6]);
   strcpy(p_intlenv_data_struct_h.subprocess, argv[7]);
   strcpy(p_intlenv_data_struct_h.h_process, argv[8]);
   
   strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
   strcat(chr_l_inifile,"intl_sun.cfg");
   if ( ( l_finifile=fopen(chr_l_inifile,"r") ) == NULL)
   {
		CO_ProcMonitor(APL_OUT_FILE,"Failed to open .ini h_file\n",NULL,NULL);
		APL_GOBACK_FAIL
   }
   sqlca.sqlcode =0; 
   APL_FETCH_DB_LOGIN_DETAILS(l_finifile, chr_custody_id_b, chr_uname, chr_passwd, APL_OUT_FILE, l_debug_info_ptr)
   IS_ANY_ORA_ERROR
   EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;
  
   IS_ANY_ORA_ERROR
 	if (APL_FAILURE == CO_RtvSysParams(l_debug_info_ptr))
   {
      CO_ProcMonitor(APL_OUT_FILE, "Error In Getting System Parameters", NULL, NULL);
      APL_GOBACK_FAIL
   }

   if ( APL_FAILURE == CO_Chk_CntryEnabled( "IPO_PROC",
                                           "IPO_MENU_AVAILABLE",
                                             &int_l_condexists_A,
                                             l_debug_info_ptr ) )
   {
      CO_ProcMonitor(APL_OUT_FILE,"Failed in CO_Chk_CntryEnabled \n",NULL,NULL);
      APL_GOBACK_FAIL
   }
   if(int_l_condexists_A == 0)
   {
      CO_ProcMonitor(APL_OUT_FILE,"IPO Processing Not Allowed\n",NULL,NULL);
      APL_GOBACK_FAIL
   }
	  
 
			        

	if (APL_FAILURE == CO_Rtv_RptFileName( "PO",
													APL_LOGFILE_DESC,
			        								100,
					  								argv[5],
			        								argv,
			        								&l_logfile,
			        								l_debug_info_ptr ))	
   {
		APL_GOBACK_FAIL
   }

	if (APL_FAILURE == CO_Rtv_RptFileName( "ID",
													"IPO-Trade Deletion Report",
			        								100,
					  								argv[5],
			        								argv,
			        								&l_ipo_del_rept_file,
			        								l_debug_info_ptr ))	
   {
		APL_GOBACK_FAIL
   }

	DL_Prnt_IPOHdr( 	l_ipo_del_rept_file,"delete");

	if (APL_FAILURE == CO_Rtv_RptFileName( "IC",
													"IPO-Trade Creation Report",
			        								100,
					  								argv[5],
			        								argv,
			        								&l_ipo_create_rept_file,
			        								l_debug_info_ptr ))	
   {
		APL_GOBACK_FAIL
   }
	if(!strcmp(l_function,IPO_MODIFY_TRADE) || !strcmp(l_function,IPO_MODIFY_BOTH))
	{
		DL_Prnt_IPOHdr(l_ipo_create_rept_file,"updtrd");
	}
	else
	{
		DL_Prnt_IPOHdr(l_ipo_create_rept_file,"create");
	}
	if (APL_FAILURE == CO_Rtv_RptFileName( "IR",
													"IPO-Trade Rejection Report",
			        								100,
					  								argv[5],
			        								argv,
			        								&l_ipo_reject_rept_file,
			        								l_debug_info_ptr ))	
   {
		APL_GOBACK_FAIL
   }

	DL_Prnt_IPOHdr(l_ipo_reject_rept_file,"rejtrd");
	
	if (APL_FAILURE == CO_Rtv_RptFileName( "IS",
													"IPO-SAT Rejection Report",
			        								100,
					  								argv[5],
			        								argv,
			        								&l_sat_reject_rept_file,
			        								l_debug_info_ptr ))	
   {
		APL_GOBACK_FAIL
   }
	
	DL_Prnt_IPOHdr(l_sat_reject_rept_file,"rejsat");
	
	if (APL_FAILURE == CO_Rtv_RptFileName( "IU",
													"IPO-SAT updation Report",
			        								100,
					  								argv[5],
			        								argv,
			        								&l_sat_update_rept_file,
			        								l_debug_info_ptr ))	
   {
	APL_GOBACK_FAIL
   }

	DL_Prnt_IPOHdr(l_sat_update_rept_file,"updsat");


	if (APL_FAILURE == CO_Rtv_RptFileName( "PM",
													"IPO-Trade Modify Unmatch",
													100,
													argv[5],
													argv,
													&l_unmatch_rept_file,
													l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	DL_Prnt_IPOHdr(l_unmatch_rept_file,"unmatch");

   if ( APL_FAILURE == CO_ReadToken(	l_finifile,
				    								"INTL_UPL_PATH",
				   							 	chr_l_ipo_file,
				    								l_debug_info_ptr ))
   {
		fprintf(l_logfile,"\nReturning unsuccessfully from CO_ReadToken\n");
		APL_GOBACK_FAIL
   }

    EXEC SQL SELECT PROCESSING_STATUS into :l_temp_processing_status
    FROM SYS_BATCHPROC
    WHERE PROCESS_NAME=:argv[0]
    AND   PROC_INIT=:argv[1]
    AND   STARTDATE=:argv[2]
    AND   STATUS='started'
    FOR UPDATE OF PROCESSING_STATUS,STATUS; 

	if(APL_ZERO_RESULT_SET)
	{
      CO_ProcMonitor(l_logfile,"E:No entry in batch_in_proc\n",NULL,NULL);
      APL_GOBACK_FAIL
	}
	
	if(APL_FAILURE == CO_RtvSysDtTime (chr_l_sys_date,l_debug_info_ptr))
	{
		CO_ProcMonitor(l_logfile,"Failed To Get DataTime \n",l_debug_info_ptr,NULL);
		APL_GOBACK_FAIL
	} 
	strcat(chr_l_ipo_file,chr_l_param[2]);
   CO_ProcMonitor(l_logfile,"Start Processing\n",l_debug_info_ptr,&p_intlenv_data_struct_h);
	
	CO_FreeErrLst(l_debug_info_ptr);
	if(APL_FAILURE == DL_Proc_IPOFile(	l_function,
												chr_l_param[2],
												l_ipo_del_rept_file,
												l_ipo_create_rept_file,
												l_ipo_reject_rept_file,
												l_sat_reject_rept_file,
												l_sat_update_rept_file,
												l_unmatch_rept_file,
												chr_l_ipo_file,
												chr_l_sys_date,
												l_logfile,
												argv,
												&p_intlenv_data_struct_h,
												l_debug_info_ptr))
	{
		CO_ProcMonitor(l_logfile,"Finished Processing\n",l_debug_info_ptr,&p_intlenv_data_struct_h);
		APL_GOBACK_FAIL
	}
	
	APL_GOBACK_SUCCESS


  RETURN_SUCCESS : 
	 	EXEC SQL UPDATE SYS_BATCHPROC
	  	SET  status = 'completed'
	  	WHERE PROCESS_NAME=:argv[0]
	  	AND   PROC_INIT=:argv[1]
	  	AND   STARTDATE=:argv[2]
	  	AND   STATUS='started';

  	  EXEC SQL COMMIT WORK RELEASE;			   
	  if(l_logfile != (FILE *)NULL)fprintf(l_logfile,"Successfully Exiting the program IPO_Uplaod\n"); 
	  CO_Proc_RptClose(l_logfile, l_debug_info_ptr);
	  CO_Proc_RptClose(l_ipo_del_rept_file, l_debug_info_ptr);
	  CO_Proc_RptClose(l_ipo_create_rept_file, l_debug_info_ptr);
	  CO_Proc_RptClose(l_ipo_reject_rept_file, l_debug_info_ptr);
	  CO_Proc_RptClose(l_sat_reject_rept_file, l_debug_info_ptr);
	  CO_Proc_RptClose(l_sat_update_rept_file, l_debug_info_ptr);
	  CO_Proc_RptClose(l_unmatch_rept_file, l_debug_info_ptr);
	  if(l_finifile != (FILE *)NULL)fclose(l_finifile);
	  CO_FreeErrLst(l_debug_info_ptr);
	  APL_FREE(l_debug_info_ptr);
	  exit(APL_SUCCESS);

  RETURN_FAILURE :
  	  EXEC SQL ROLLBACK;			   
	  if(l_logfile != (FILE *)NULL)fprintf(l_logfile,"Unsuccessfully Exiting the program IPO_Upload\n"); 
	  CO_Proc_RptClose(l_logfile, l_debug_info_ptr);
	  CO_Proc_RptClose(l_ipo_del_rept_file, l_debug_info_ptr);
	  CO_Proc_RptClose(l_ipo_create_rept_file, l_debug_info_ptr);
	  CO_Proc_RptClose(l_ipo_reject_rept_file, l_debug_info_ptr);
	  CO_Proc_RptClose(l_sat_reject_rept_file, l_debug_info_ptr);
	  CO_Proc_RptClose(l_sat_update_rept_file, l_debug_info_ptr);
	  CO_Proc_RptClose(l_unmatch_rept_file, l_debug_info_ptr);
	  if(l_finifile != (FILE *)NULL)fclose(l_finifile);
	  CO_FreeErrLst(l_debug_info_ptr);
     APL_FREE(l_debug_info_ptr);
  	  exit(APL_FAILURE);
}	






int DL_Proc_IPOFile(	char *p_function,
						char *p_file_name,
						FILE *p_ipo_del_rept_file,
						FILE *p_ipo_create_rept_file,
						FILE *p_ipo_reject_rept_file,
						FILE *p_sat_reject_rept_file,
						FILE *p_sat_update_rept_file,
						FILE *p_unmatch_rept_file,
						char *p_ipo_file,
						char *chr_p_sys_date,
						FILE *p_logfile,
						char **argv,
						INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	FILE *l_fipo_file = (FILE *)NULL;
	DL_IPO_HEADER_POS_STRUCT_H *p_dl_ipo_header_pos_struct_h = (DL_IPO_HEADER_POS_STRUCT_H *)NULL; 
	char chr_tempbuff_a[IPO_LINERR_LENGTH] = APL_NULL_STRING;
	char chr_l_ipo_line[500] = APL_NULL_STRING;	
 char l_temp_processing_status[51] = APL_NULL_STRING;
	int int_l_rec = 1;
	char chr_l_buf[IPO_BUFSIZE];

	CO_ProcMonitor(p_logfile,"Inside DL_Proc_IPOFile Function\n",NULL,p_intlenv_data_struct_h);

	p_dl_ipo_header_pos_struct_h= (DL_IPO_HEADER_POS_STRUCT_H *)calloc(1,sizeof(DL_IPO_HEADER_POS_STRUCT_H));
	memset(p_dl_ipo_header_pos_struct_h,NULL,sizeof(DL_IPO_HEADER_POS_STRUCT_H));

	
	if ( ( l_fipo_file=fopen(p_ipo_file,"r") ) == NULL)
	{ 
		 fprintf(p_logfile,"Could not open the IPO h_file :|%s|\n",p_ipo_file);
		 APL_GOBACK_FAIL
   }
   else 
	{ 
		CO_ProcMonitor(p_logfile,"Opened the IPO h_file \n",NULL,p_intlenv_data_struct_h);
	}

	memset(chr_tempbuff_a,APL_NULL_CHAR,500);
   fgets(chr_tempbuff_a,IPO_LINERR_LENGTH,l_fipo_file);    
	if(chr_tempbuff_a[strlen(chr_tempbuff_a) - 1] == '\n')
		chr_tempbuff_a[strlen(chr_tempbuff_a) - 1] = IPO_FILERR_SEP;
	else
		strcat(chr_tempbuff_a,IPO_FILERR_SEP_STRING);
	if(strchr(chr_tempbuff_a,',') == NULL)
	{
		fprintf(p_logfile,"Header Not Proper :contains no delimitor:\n");
		APL_GOBACK_FAIL
	}
	
	if(APL_FAILURE == DL_Rtv_IPOHdr(p_dl_ipo_header_pos_struct_h,chr_tempbuff_a,p_logfile))
	{
		fprintf(p_logfile,"Failed in DL_Rtv_IPOHdr processtion\n");
		APL_GOBACK_FAIL
	}

	for ( ; ; )
	{
		if (feof(l_fipo_file))
		{
	   	 break;
		}
		memset(chr_l_ipo_line,APL_NULL_CHAR,IPO_LINERR_LENGTH);
		memset(chr_tempbuff_a,APL_NULL_CHAR,IPO_LINERR_LENGTH);
		fgets(chr_tempbuff_a,IPO_LINERR_LENGTH,l_fipo_file);

		if(strlen(chr_tempbuff_a) == 0)break;
		if(chr_tempbuff_a[strlen(chr_tempbuff_a) - 1] == '\n')
			chr_tempbuff_a[strlen(chr_tempbuff_a) - 1] = IPO_FILERR_SEP;	
		else
			strcat(chr_tempbuff_a,IPO_FILERR_SEP_STRING);	
		strcpy(chr_l_ipo_line,chr_tempbuff_a);	
		
		fprintf(p_logfile,"------------------------------------------------------------\n");
		fprintf(p_logfile,"line :|%s|\n",chr_l_ipo_line);
 	   fprintf(p_logfile,"Record No : %d\n",int_l_rec);
	   if(strchr(chr_tempbuff_a,',') == NULL)
		{
			fprintf(p_logfile,"line not contains any delimitor:|%d|\n",int_l_rec);
		}
		else 
		{
			CO_FreeErrLst(l_debug_info_ptr);
	   	if(APL_FAILURE == DL_Proc_IPORec(	p_function,
															p_file_name,
															p_dl_ipo_header_pos_struct_h,
															chr_l_ipo_line,
															p_ipo_del_rept_file,
															p_ipo_create_rept_file,
															p_ipo_reject_rept_file,
															p_sat_reject_rept_file,
															p_sat_update_rept_file,
															p_unmatch_rept_file,
															p_logfile,
															chr_p_sys_date,
															l_debug_info_ptr,
															p_intlenv_data_struct_h))
			{
				fprintf(p_logfile,"Error in Processing Record No : %d",int_l_rec);
			}
			memset(chr_l_ipo_line,APL_NULL_CHAR,IPO_LINERR_LENGTH);
			memset(chr_tempbuff_a,APL_NULL_CHAR,IPO_LINERR_LENGTH);
		}
		if(!(int_l_rec%IPO_COMMITSIZE))	
		{			
			memset(chr_l_buf, NULL, IPO_BUFSIZE);			
			sprintf(chr_l_buf, "Processed %d Records", int_l_rec);			
			EXEC SQL UPDATE SYS_BATCHPROC			
						SET STAT_DET = :chr_l_buf			
						WHERE PROCESS_NAME=:argv[0]			
						AND   PROC_INIT=:argv[1]			
						AND   STARTDATE=:argv[2]			
						AND   STATUS='started';			
			EXEC SQL COMMIT WORK;			
			IS_ANY_ORA_ERROR			
			
			CO_ProcMonitor(p_logfile, "Record Committed", NULL, NULL);
		  EXEC SQL 	SELECT PROCESSING_STATUS		 into :l_temp_processing_status
					  	FROM SYS_BATCHPROC		  
						WHERE PROCESS_NAME=:argv[0]		  
						AND   PROC_INIT=:argv[1]		  
						AND   STARTDATE=:argv[2]		  
						AND   STATUS='started'		  
						FOR UPDATE OF PROCESSING_STATUS,STATUS;		  
			IS_ANY_ORA_ERROR		  
			if(APL_ZERO_RESULT_SET)		  
			{			  
				CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);			  
				APL_GOBACK_FAIL		  
			}
		}

		int_l_rec++;
	}
	if(!strcmp(p_function, IPO_MAKERR_DEAL))
	{
		if(APL_FAILURE == DL_Proc_MarkRecDel(p_logfile,p_ipo_del_rept_file,p_intlenv_data_struct_h,l_debug_info_ptr))
		{	
			CO_ProcMonitor(p_logfile,"Failure In MarkTradeRecordForDeletion",NULL,NULL);
			APL_GOBACK_FAIL
		}
	}
	
	memset(chr_l_buf, NULL, IPO_BUFSIZE);
   sprintf(chr_l_buf, "Processed %d Records", --int_l_rec);
   EXEC SQL UPDATE SYS_BATCHPROC
            SET STAT_DET = :chr_l_buf
            WHERE PROCESS_NAME=:argv[0]
            AND   PROC_INIT=:argv[1]
            AND   STARTDATE=:argv[2]
            AND   STATUS='started';
	
	IS_ANY_ORA_ERROR
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:
		fprintf(p_logfile,"Successfully Exiting the program DL_Proc_IPOFile processtion\n"); 
		fclose(l_fipo_file);
		APL_FREE(p_dl_ipo_header_pos_struct_h);
		return(APL_SUCCESS);

	RETURN_FAILURE :
 		fprintf(p_logfile,"Unsuccessfully Exiting the program DL_Proc_IPOFile processtion\n"); 
		fclose(l_fipo_file);
		APL_FREE(p_dl_ipo_header_pos_struct_h);
		return(APL_FAILURE);
}


int DL_Rtv_IPOHdr(DL_IPO_HEADER_POS_STRUCT_H *p_dl_ipo_header_pos_struct_h_a, char *l_header_string,FILE *p_logfile)
{
	DL_IPO_HEADER_POS_STRUCT_H *l_dl_ipo_header_pos_struct_h=p_dl_ipo_header_pos_struct_h_a;

	int i,int_l_no_elements=0,int_l_man_field_count=0;
	char **chr_l_param = (char **)NULL;

	
	CO_ProcMonitor(p_logfile,"Entered DL_Rtv_IPOHdr Function\n",NULL,NULL);
	CO_SplitStr(l_header_string,IPO_FILERR_SEP,&int_l_no_elements,&chr_l_param);
	fprintf(p_logfile,"Header |%s|\n",l_header_string);
	if(int_l_no_elements < IPO_MAN_FLD_CNT)
	{
		fprintf(p_logfile,"split : mandatory field missing in chr_header|%d|\n",int_l_no_elements);
		APL_GOBACK_FAIL
	}
		


	for(i=0;i<int_l_no_elements;i++)
	{
		IPO_IF_DEBUG
		{
			printf("in the loop : |%s| \n",chr_l_param[i]);
		}
		if(strlen(chr_l_param[i]) == 0)
				break;
		if(!strcasecmp(chr_l_param[i],IPO_ACCOUNT))
		{
			l_dl_ipo_header_pos_struct_h->h_clt_pos=i;
			int_l_man_field_count++;
		}
		else if(!strcasecmp(chr_l_param[i],IPO_REF))
		{
			l_dl_ipo_header_pos_struct_h->h_ident_pos=i;
			int_l_man_field_count++;
		}
		else if(!strcasecmp(chr_l_param[i],IPO_QTY))
		{
			l_dl_ipo_header_pos_struct_h->h_quantity_pos=i;
			int_l_man_field_count++;
		}
		else if(!strcasecmp(chr_l_param[i],IPO_DOM_CP))
		{
			l_dl_ipo_header_pos_struct_h->h_domestic_cp_pos=i;
			int_l_man_field_count++;
		}
		else if(!strcasecmp(chr_l_param[i],IPO_CP_DESC))
		{
			l_dl_ipo_header_pos_struct_h->h_cp_detail_pos=i;
			int_l_man_field_count++;
		}
		else if(!strcasecmp(chr_l_param[i],IPO_CP_ACC))
		{
			l_dl_ipo_header_pos_struct_h->h_cp_clt_pos=i;
			int_l_man_field_count++;
		}
		else if(!strcasecmp(chr_l_param[i],IPO_SAT_ACC))
		{
			l_dl_ipo_header_pos_struct_h->h_satclt_pos=i;
			int_l_man_field_count++;
		}
		else if(!strcasecmp(chr_l_param[i],IPO_SAT_CODE))
		{
			l_dl_ipo_header_pos_struct_h->h_sat_cd_pos=i;
			int_l_man_field_count++;
		}
		else if(!strcasecmp(chr_l_param[i],IPO_OPER_CODE))
		{
			l_dl_ipo_header_pos_struct_h->h_oper_cd_pos=i;
			int_l_man_field_count++;
		}
		else if(!strcasecmp(chr_l_param[i],IPO_DEAL_DT))
		{
			l_dl_ipo_header_pos_struct_h->h_dldt_pos=i;
			int_l_man_field_count++;
		}
		else if(!strcasecmp(chr_l_param[i],IPO_SETTL_DT))
		{
			l_dl_ipo_header_pos_struct_h->h_setldt_pos=i;
			int_l_man_field_count++;
		}
		else if(!strcasecmp(chr_l_param[i],IPO_ISIN))
		{
			l_dl_ipo_header_pos_struct_h->h_instr_isin_pos=i;
			int_l_man_field_count++;
		}
		else if(!strcasecmp(chr_l_param[i],IPO_INSTRU_DESC))
		{
			l_dl_ipo_header_pos_struct_h->h_instr_name_pos=i;
			int_l_man_field_count++; 
		}
		else if(!strcasecmp(chr_l_param[i],IPO_COUNTER_VALUE))
		{
			l_dl_ipo_header_pos_struct_h->h_counter_val_pos=i;
			int_l_man_field_count++;
		}
		else if(!strcasecmp(chr_l_param[i],IPO_PRICE))
		{
			l_dl_ipo_header_pos_struct_h->h_ipo_pr_pos=i;
			int_l_man_field_count++;
		}
	}
	if(int_l_man_field_count < IPO_MAN_FLD_CNT)
	{
		CO_ProcMonitor(p_logfile,"mandatory field missing in chr_header\n",NULL,NULL);
		APL_GOBACK_FAIL
	}

 	APL_GOBACK_SUCCESS 
	RETURN_SUCCESS:						
		CO_ProcMonitor(p_logfile,"Successfully Out Of IPOSetHeader Function\n",NULL,NULL);
		fflush(p_logfile);
		return(APL_SUCCESS);
	RETURN_FAILURE:
		CO_ProcMonitor(p_logfile,"Failure in IPOSetHeader Function\n",NULL,NULL);
		fflush(p_logfile);	
		return(APL_FAILURE);
}





int DL_Proc_IPORec( 	char *p_function,
								char *p_file_name,
								DL_IPO_HEADER_POS_STRUCT_H *p_dl_ipo_header_pos_struct_h,
								char *p_ipo_line,
								FILE *p_ipo_del_rept_file,
								FILE *p_ipo_create_rept_file,
								FILE *p_ipo_reject_rept_file,
								FILE *p_sat_reject_rept_file,
								FILE *p_sat_update_rept_file,
								FILE *p_unmatch_rept_file,
								FILE *p_logfile,
								char *chr_p_sys_date,
								DEBUG_INFO_STRUCT_H **l_debug_info_ptr,
								INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h)
{
	DL_DEAL_IPO_STRUCT_H *l_dl_deal_ipo_struct_h;
	
	int i=0,int_ret_val_create_trade = 0,int_l_exists =0;
	char **chr_l_param = (char **)NULL;
	int int_noelem;
	char chr_l_line_read[IPO_LINERR_LENGTH];
	char int_l_domcpac[11]=APL_NULL_STRING;
	char chr_l_typeoftrd[3]=APL_NULL_STRING;


	EXEC SQL BEGIN DECLARE SECTION;
	EXEC SQL VAR l_dl_deal_ipo_struct_h->h_dl_client IS STRING;
	EXEC SQL VAR l_dl_deal_ipo_struct_h->h_indentity_no IS STRING;
	EXEC SQL VAR l_dl_deal_ipo_struct_h->h_domestic_cp IS STRING;
	EXEC SQL VAR l_dl_deal_ipo_struct_h->h_cp_detail IS STRING;
	EXEC SQL VAR l_dl_deal_ipo_struct_h->h_cp_clt IS STRING;
	EXEC SQL VAR l_dl_deal_ipo_struct_h->h_cp_clt IS STRING;
	EXEC SQL VAR l_dl_deal_ipo_struct_h->h_satclt IS STRING; /*Veda -- 10GM */
	EXEC SQL VAR l_dl_deal_ipo_struct_h->h_sat_cd IS STRING;
	EXEC SQL VAR l_dl_deal_ipo_struct_h->h_oper_cd IS STRING;
	EXEC SQL VAR l_dl_deal_ipo_struct_h->h_dlt IS STRING;
	EXEC SQL VAR l_dl_deal_ipo_struct_h->h_setldt IS STRING;
	EXEC SQL VAR l_dl_deal_ipo_struct_h->h_instr_isin IS STRING;
	EXEC SQL VAR l_dl_deal_ipo_struct_h->h_instr_name IS STRING;
	EXEC SQL VAR int_l_domcpac IS STRING;
	EXEC SQL VAR chr_l_typeoftrd IS STRING;
	EXEC SQL END DECLARE SECTION;
	CO_ProcMonitor(p_logfile,"Entered DL_Proc_IPORec Function\n",NULL,p_intlenv_data_struct_h);
	

	memset(chr_l_line_read,APL_NULL_CHAR,IPO_LINERR_LENGTH);


	l_dl_deal_ipo_struct_h=(DL_DEAL_IPO_STRUCT_H *)calloc(1,sizeof(DL_DEAL_IPO_STRUCT_H));
	memset(l_dl_deal_ipo_struct_h,NULL,sizeof(DL_DEAL_IPO_STRUCT_H));

	strcpy(chr_l_line_read,p_ipo_line);	

	CO_SplitStr(chr_l_line_read,IPO_FILERR_SEP, &int_noelem, &chr_l_param);	

	
	if (int_noelem < IPO_MAN_FLD_CNT)
	{
		fprintf(p_logfile,"All Mandatory elements not int_found - The record details are not complete. \n");
		DL_Prnt_IPOHdr(p_ipo_reject_rept_file,"rejtrd");
		fprintf(p_ipo_reject_rept_file,"Invalid Record --");
		fprintf(p_ipo_reject_rept_file,"[%s]\n",p_ipo_line);
		APL_GOBACK_FAIL;
	}




	
	strncpy(l_dl_deal_ipo_struct_h->h_dl_client,chr_l_param[p_dl_ipo_header_pos_struct_h->h_clt_pos],10);
   l_dl_deal_ipo_struct_h->h_dl_client[10] ='\0';
	if (int_g_running_acc_set == 0)
	{
		strcpy(chr_g_running_acc,APL_NULL_STRING);
   	strcpy(chr_g_running_acc,l_dl_deal_ipo_struct_h->h_dl_client);
		int_g_running_acc_set = 1;
	}

	strncpy(l_dl_deal_ipo_struct_h->h_indentity_no,chr_l_param[p_dl_ipo_header_pos_struct_h->h_ident_pos],16);
   l_dl_deal_ipo_struct_h->h_indentity_no[16] ='\0';	
	l_dl_deal_ipo_struct_h->h_qty = atof(chr_l_param[p_dl_ipo_header_pos_struct_h->h_quantity_pos]);
   memset(l_dl_deal_ipo_struct_h->h_domestic_cp,APL_NULL_CHAR,66);	
	strncpy(l_dl_deal_ipo_struct_h->h_domestic_cp,chr_l_param[p_dl_ipo_header_pos_struct_h->h_domestic_cp_pos],66);
   l_dl_deal_ipo_struct_h->h_domestic_cp[66] ='\0';
	strncpy(l_dl_deal_ipo_struct_h->h_cp_detail,chr_l_param[p_dl_ipo_header_pos_struct_h->h_cp_detail_pos],49);
   l_dl_deal_ipo_struct_h->h_cp_detail[49] ='\0';
	strncpy(l_dl_deal_ipo_struct_h->h_cp_clt,chr_l_param[p_dl_ipo_header_pos_struct_h->h_cp_clt_pos],10);
   l_dl_deal_ipo_struct_h->h_cp_clt[10] ='\0';
	
	/*Veda -- 10GM */
	strncpy(l_dl_deal_ipo_struct_h->h_satclt,chr_l_param[p_dl_ipo_header_pos_struct_h->h_satclt_pos],12);
   l_dl_deal_ipo_struct_h->h_satclt[12] ='\0';
	
	strncpy(l_dl_deal_ipo_struct_h->h_sat_cd,chr_l_param[p_dl_ipo_header_pos_struct_h->h_sat_cd_pos],12);
   l_dl_deal_ipo_struct_h->h_sat_cd[12] ='\0';
	
	strncpy(l_dl_deal_ipo_struct_h->h_oper_cd,chr_l_param[p_dl_ipo_header_pos_struct_h->h_oper_cd_pos],11);
   l_dl_deal_ipo_struct_h->h_oper_cd[11] ='\0';
	strncpy(l_dl_deal_ipo_struct_h->h_dlt,chr_l_param[p_dl_ipo_header_pos_struct_h->h_dldt_pos],10);
   l_dl_deal_ipo_struct_h->h_dlt[10] ='\0';

	strncpy(l_dl_deal_ipo_struct_h->h_setldt,chr_l_param[p_dl_ipo_header_pos_struct_h->h_setldt_pos],10);
   l_dl_deal_ipo_struct_h->h_setldt[10] ='\0';

	strncpy(l_dl_deal_ipo_struct_h->h_instr_isin,chr_l_param[p_dl_ipo_header_pos_struct_h->h_instr_isin_pos],12);
   l_dl_deal_ipo_struct_h->h_instr_isin[12] ='\0';

	strncpy(l_dl_deal_ipo_struct_h->h_instr_name,chr_l_param[p_dl_ipo_header_pos_struct_h->h_instr_name_pos],8);
   l_dl_deal_ipo_struct_h->h_instr_name[8] ='\0';
	l_dl_deal_ipo_struct_h->h_counter_val = atof(chr_l_param[p_dl_ipo_header_pos_struct_h->h_counter_val_pos]);
	l_dl_deal_ipo_struct_h->h_pr = atof(chr_l_param[p_dl_ipo_header_pos_struct_h->h_ipo_pr_pos]);
        strcat(l_dl_deal_ipo_struct_h->h_dlt," 12:00:00");
        strcat(l_dl_deal_ipo_struct_h->h_setldt," 12:00:00");
	

	
	fprintf(p_logfile,"Account                      |%s|\n",l_dl_deal_ipo_struct_h->h_dl_client);
	fprintf(p_logfile,"Trade Ref No                 |%s|\n",l_dl_deal_ipo_struct_h->h_indentity_no);
	fprintf(p_logfile,"Trade Date                   |%s|\n",l_dl_deal_ipo_struct_h->h_dlt);
	fprintf(p_logfile,"Quantity                     |%lf|\n",l_dl_deal_ipo_struct_h->h_qty);
	fprintf(p_logfile,"Domestic Counter Party       |%s|\n",l_dl_deal_ipo_struct_h->h_domestic_cp);
	fprintf(p_logfile,"Counter Party Description    |%s|\n",l_dl_deal_ipo_struct_h->h_cp_detail);
	fprintf(p_logfile,"Counter Party Accoun         |%s|\n",l_dl_deal_ipo_struct_h->h_cp_clt);
	fprintf(p_logfile,"SAT Account                  |%s|\n",l_dl_deal_ipo_struct_h->h_satclt); /*Veda -- 10GM */
	fprintf(p_logfile,"SAT Code                     |%s|\n",l_dl_deal_ipo_struct_h->h_sat_cd);
	fprintf(p_logfile,"Operator Code                |%s|\n",l_dl_deal_ipo_struct_h->h_oper_cd);
	fprintf(p_logfile,"Settlement Date              |%s|\n",l_dl_deal_ipo_struct_h->h_setldt);
	fprintf(p_logfile,"ISIN                         |%s|\n",l_dl_deal_ipo_struct_h->h_instr_isin);
	fprintf(p_logfile,"Instrurity Desc                |%s|\n",l_dl_deal_ipo_struct_h->h_instr_name);
	fprintf(p_logfile,"Counter Value                |%lf|\n",l_dl_deal_ipo_struct_h->h_counter_val);
	fprintf(p_logfile,"Price                        |%lf|\n",l_dl_deal_ipo_struct_h->h_pr);
	

	IPO_IF_DEBUG
			fprintf(p_logfile,"Function : |%s|\n",p_function);
	CO_FreeErrLst(l_debug_info_ptr);

	if(!strcmp(p_function,IPO_MAKERR_DEAL))
	{
		int_ret_val_create_trade =	DL_Mod_IPODLAdd(		&int_l_exists,
																	p_function,	
																	l_dl_deal_ipo_struct_h,
																	p_ipo_del_rept_file,
																	p_ipo_create_rept_file,
																	p_ipo_reject_rept_file,
																	p_sat_reject_rept_file,
																	p_sat_update_rept_file, 
																	p_logfile,
																	chr_p_sys_date,
																	p_intlenv_data_struct_h,
																	l_debug_info_ptr);
	 
		if(int_ret_val_create_trade == APL_SUCCESS)
			if(APL_FAILURE == DL_Mod_SATDet(	p_sat_reject_rept_file,
															p_sat_update_rept_file,
															l_dl_deal_ipo_struct_h,
															p_logfile,
															l_debug_info_ptr,
															p_intlenv_data_struct_h))
        	{
    	     		CO_ProcMonitor(p_logfile,"Failed in DL_Mod_SATDet Function",NULL,NULL);
        	}
		if((int_ret_val_create_trade == APL_SUCCESS)||(int_l_exists != 0))		
			if(APL_FAILURE == DL_Mod_IPOFileAudit(  p_file_name,
        		                                    chr_p_sys_date,
           		                                 l_dl_deal_ipo_struct_h -> h_dl_client,
              		                              l_dl_deal_ipo_struct_h -> h_indentity_no,
                 		                           p_logfile,
                    		                        p_intlenv_data_struct_h,
                       		                     l_debug_info_ptr))
     		{
        		CO_ProcMonitor(p_logfile,"Failed in DL_Mod_IPOFileAudit Function\n",NULL,NULL);
        		APL_GOBACK_FAIL
     		}
		if(int_ret_val_create_trade == APL_FAILURE)
		{
			CO_ProcMonitor(p_logfile,"Failed in DL_Mod_IPODLAdd\n",NULL,NULL);
			APL_GOBACK_FAIL
		}	

	}
	if(!strcmp(p_function,IPO_MODIFY_TRADE) || !strcmp(p_function,IPO_MODIFY_BOTH))
	{	
		if(APL_FAILURE == DL_Mod_IPODlLMod(	p_function,
														l_dl_deal_ipo_struct_h,
														p_ipo_del_rept_file,
														p_ipo_create_rept_file,
														p_ipo_reject_rept_file,
														p_sat_reject_rept_file,
														p_sat_update_rept_file, 
														p_unmatch_rept_file,
														p_logfile,
														chr_p_sys_date,
														p_intlenv_data_struct_h,
														l_debug_info_ptr))
		{
			CO_ProcMonitor(p_logfile,"Failed in IP_ModifyTrade\n",NULL,NULL);
			APL_GOBACK_FAIL	
		}
	}
	if(!strcmp(p_function,IPO_MODIFY_SAT) || !strcmp(p_function,IPO_MODIFY_BOTH))
	{
		
		if (!strcmp(p_function,IPO_MODIFY_SAT))
		{
			memset(int_l_domcpac,APL_NULL_CHAR,11);
			memset(chr_l_typeoftrd,APL_NULL_CHAR,3);

		   EXEC SQL SELECT DOMESTIC_CPCLT,DL_CLASS
						  INTO :int_l_domcpac,:chr_l_typeoftrd
						  FROM DL_DEAL
                   WHERE CLIENT=:l_dl_deal_ipo_struct_h->h_dl_client
							AND IDENTIY_NO=:l_dl_deal_ipo_struct_h->h_indentity_no;

         if (sqlca.sqlcode==1403)
			{
				DL_Prnt_IPOHdr(p_sat_reject_rept_file,"rejsat");
				fprintf(p_sat_reject_rept_file,IPO_RPT_REJ_SAT,l_dl_deal_ipo_struct_h->h_dl_client,l_dl_deal_ipo_struct_h->h_indentity_no,l_dl_deal_ipo_struct_h->h_sat_cd,l_dl_deal_ipo_struct_h->h_satclt,l_dl_deal_ipo_struct_h->h_oper_cd,"Trade Not Found"); /*Veda -- 10GM */
            APL_GOBACK_FAIL
         }
			if (sqlca.sqlcode !=0)
         {
				fprintf(p_logfile,"\n Error Ocurred during Selecting Trade Details |%d|",sqlca.sqlcode);
				fflush(p_logfile);
				APL_GOBACK_FAIL
         }

			if ((strcmp(chr_l_typeoftrd,IPO_BT_DEAL)!=0) && (strcmp(chr_l_typeoftrd,IPO_NORM_DEAL)!=0))
			{
            if (!strcmp(int_l_domcpac,l_mt_core_sys_params_struct_h.custody_clt_cd))
				   strcpy(chr_l_typeoftrd,IPO_BT_DEAL);
            else
				   strcpy(chr_l_typeoftrd,IPO_NORM_DEAL);

            EXEC SQL UPDATE DL_DEAL SET DL_CLASS=:chr_l_typeoftrd
							  WHERE CLIENT=:l_dl_deal_ipo_struct_h->h_dl_client
								 AND IDENTIY_NO=:l_dl_deal_ipo_struct_h->h_indentity_no;

				if (sqlca.sqlcode == 0)
				{
				  fprintf(p_logfile,"\nTrade Type Modified to IPO |%s|",chr_l_typeoftrd);
              fflush(p_logfile);
            }
				else
				{
				  fprintf(p_logfile,"\nError Ocurred During TypeOfTrd Updation |%d|",sqlca.sqlcode);
				  fflush(p_logfile);
              APL_GOBACK_FAIL
            }
			}
		}

		if(APL_FAILURE == DL_Mod_SATDet(	p_sat_reject_rept_file,
														p_sat_update_rept_file,
														l_dl_deal_ipo_struct_h,
														p_logfile,
														l_debug_info_ptr,
													   p_intlenv_data_struct_h))
		{
			CO_ProcMonitor(p_logfile,"Failed in DL_Mod_SATDet Function",NULL,NULL);
			fflush(p_logfile);
			APL_GOBACK_FAIL
		}
	}




	
	APL_GOBACK_SUCCESS


	RETURN_SUCCESS  :
		fprintf(p_logfile,"Success from DL_Proc_IPORec \n");
		fflush(p_logfile);
	   APL_FREE(l_dl_deal_ipo_struct_h);
		return(APL_SUCCESS);

   RETURN_FAILURE  :
		fprintf(p_logfile,"Failure from ProcessipoRecord \n");
	   APL_FREE(l_dl_deal_ipo_struct_h);
		fflush(p_logfile);
		return(APL_FAILURE);
}



int DL_Mod_IPODLAdd(		int *p_exists,
								char *p_function,
								DL_DEAL_IPO_STRUCT_H *p_dl_deal_ipo_struct_h,
								FILE *p_ipo_del_rept_file,
								FILE *p_ipo_create_rept_file,
								FILE *p_ipo_reject_rept_file,
								FILE *p_sat_reject_rept_file,
								FILE *p_sat_update_rept_file,	
								FILE *p_logfile,
								char *chr_p_sys_date,
								INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h,
								DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
		SYS_DL_DEAL_STRUCT_H	*p_sys_dl_deal_struct_h_g = (SYS_DL_DEAL_STRUCT_H  *)NULL;
		DL_DEAL_IPO_STRUCT_H *l_dl_deal_ipo_struct_hd = p_dl_deal_ipo_struct_h;
		int int_l_trdrepseqnum = 0;
		char  chr_h_error_str[4000] = APL_NULL_STRING;
		int	int_ret_val = 0;

		CO_ProcMonitor(p_logfile,"Entered DL_Mod_IPODLAdd Function\n",l_debug_info_ptr,p_intlenv_data_struct_h);

		p_sys_dl_deal_struct_h_g = (SYS_DL_DEAL_STRUCT_H	*)calloc(1,sizeof(SYS_DL_DEAL_STRUCT_H));
		memset(p_sys_dl_deal_struct_h_g,NULL,sizeof(SYS_DL_DEAL_STRUCT_H));
	
		strcpy(chr_h_error_str,APL_NULL_STRING);
	
		EXEC SQL SELECT NVL(COUNT(*),0) 
					INTO :*p_exists
				 	FROM	DL_DEAL
					WHERE CLIENT =:p_dl_deal_ipo_struct_h->h_dl_client
					AND	IDENTIY_NO = :p_dl_deal_ipo_struct_h->h_indentity_no;

		IS_ANY_ORA_ERROR
		if(*p_exists)
		{
			DL_Prnt_IPOHdr(p_ipo_reject_rept_file,"rejtrd");
			fprintf(p_ipo_reject_rept_file,IPO_RPT_REJ_DEAL,l_dl_deal_ipo_struct_hd -> h_dl_client,l_dl_deal_ipo_struct_hd ->h_indentity_no,"Trade Exists");
			APL_GOBACK_FAIL
		} 


		if(APL_FAILURE == DL_Rtv_IPODLStruct(	p_function,	
																	l_dl_deal_ipo_struct_hd,
																	p_sys_dl_deal_struct_h_g,
																	p_ipo_reject_rept_file,
																	p_logfile,
																	chr_p_sys_date,
																	p_intlenv_data_struct_h,
																	l_debug_info_ptr))
		{
			CO_ProcMonitor(p_logfile,"Failed in DL_Rtv_IPODLStruct	\n",NULL,NULL);
			APL_GOBACK_FAIL
		}
	

        
    	strcpy(p_intlenv_data_struct_h->usr,"SYSTEM");
		strcpy(p_intlenv_data_struct_h->h_mode,APL_FUNC_INPUT);
     	strcpy(p_intlenv_data_struct_h->processtion,"TRADE INPUT - IPO");
		strcpy(p_intlenv_data_struct_h->subprocess,"INP");
		strcpy(p_intlenv_data_struct_h->h_process,"B"); 
		
	
		CO_FreeErrLst(l_debug_info_ptr);	
		if(APL_FAILURE == DL_Proc_Trd(		p_sys_dl_deal_struct_h_g,
													&int_l_trdrepseqnum,
													p_intlenv_data_struct_h,
													l_debug_info_ptr))
		{
			DL_Prnt_IPOHdr(p_ipo_reject_rept_file,"rejtrd");
			
			memset(chr_h_error_str,APL_NULL_CHAR,4000);
			int_ret_val = CO_Rtv_ErrString(l_debug_info_ptr,chr_h_error_str);
			fprintf(p_ipo_reject_rept_file,"%-12s\t%-20s\t%s\n",l_dl_deal_ipo_struct_hd -> h_dl_client,l_dl_deal_ipo_struct_hd ->h_indentity_no,chr_h_error_str);
			CO_ProcMonitor(p_logfile,"Failed in GBGenTrade Function\n",l_debug_info_ptr,p_intlenv_data_struct_h);
			APL_GOBACK_FAIL
		}
	
	
		DL_Prnt_IPOHdr(p_ipo_create_rept_file,"create");
		fprintf(p_ipo_create_rept_file,IPO_RPT_CRT_DEAL,l_dl_deal_ipo_struct_hd -> h_dl_client,l_dl_deal_ipo_struct_hd -> h_indentity_no);
				
		if(APL_FAILURE == EI_Mod_MQData(  	(char *)p_sys_dl_deal_struct_h_g -> h_dl_client,
                                          (char *)p_sys_dl_deal_struct_h_g -> h_indentity_no,
                                          (char *)NULL,
                                          (char *)NULL,
                                          "B",
                                          l_debug_info_ptr))
		{
			CO_ProcMonitor(p_logfile,"Failure in DbUpdMqDataFn",l_debug_info_ptr,p_intlenv_data_struct_h);
		}



		APL_GOBACK_SUCCESS

		RETURN_SUCCESS :
			CO_ProcMonitor(p_logfile,"Leaving DL_Mod_IPODLAdd Function successfully", l_debug_info_ptr,p_intlenv_data_struct_h);
			APL_FREE(p_sys_dl_deal_struct_h_g);	
			return(APL_SUCCESS);

		RETURN_FAILURE :
			CO_ProcMonitor(p_logfile,"Leaving DL_Mod_IPODLAdd Function with errors", l_debug_info_ptr,p_intlenv_data_struct_h);
			APL_FREE(p_sys_dl_deal_struct_h_g);	
			return(APL_FAILURE);

}



int DL_Rtv_IPODLStruct(	char *p_function,
										DL_DEAL_IPO_STRUCT_H *p_dl_deal_ipo_struct_h,
										SYS_DL_DEAL_STRUCT_H	*p_sys_dl_deal_struct_h_g,
										FILE *p_ipo_reject_rept_file,
										FILE *p_logfile,
										char *chr_p_sys_date,
										INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h,
										DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	
	DL_DEAL_IPO_STRUCT_H *l_dl_deal_ipo_struct_hd = p_dl_deal_ipo_struct_h;
	SYS_DL_DEAL_STRUCT_H	*l_sys_dl_deal_struct_hj =  p_sys_dl_deal_struct_h_g;
	SYS_DL_DEAL_STRUCT_I *l_sys_dl_deal_struct_if =(SYS_DL_DEAL_STRUCT_I *)NULL;
	char chr_l_instrcode_a[9],chr_l_ccycode[4],chr_l_locncode_c[5],chr_l_exarena[3],chr_l_date[APL_DATE_LEN],chr_l_access_stamp[APL_DATE_LEN],chr_l_note[261];
	short i_info = 0;
	char int_l_domcpac[11] = APL_NULL_STRING;
	char int_l_countacc[11] = APL_NULL_STRING;
	short i_domcpclt_cd =0;
	   
   EXEC SQL BEGIN DECLARE SECTION;
		EXEC SQL VAR chr_l_instrcode_a	IS STRING;
		EXEC SQL VAR int_l_domcpac	IS STRING;
		EXEC SQL VAR int_l_countacc	IS STRING;
		EXEC SQL VAR chr_l_ccycode	IS STRING;
		EXEC SQL VAR chr_l_locncode_c IS STRING;
		EXEC SQL VAR chr_l_exarena	IS STRING;
		EXEC SQL VAR chr_l_access_stamp IS STRING;
		EXEC SQL VAR chr_l_note IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_dl_client IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_indentity_no IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_dlt IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_setldt IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_ex_arena IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_instrdate IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_moneydate IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_domcpclt_cd IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_isspotdl IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_dlfromord IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_entry IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_reapired_ind IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_domcp_custodyclt IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_countclt IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_countcltnm IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_clientof IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_custinfo IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_fx_reqd IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_ispymtlocal IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_verfied_with IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_brkrno IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_fail_cd IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_failinfo IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_ispart_ IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_report_at_eom_ind IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_billdate IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_locindentity_no IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_instruct_person IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_dealcd IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_instr_code IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_currencycode IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_classofdl IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_origindentity_no IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_newdt IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_maker IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_maker_dt IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_deal_status IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_access_stamp IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_info1 IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_loccode IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_reginstr_ind IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_pos_stat IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_status_reg IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_confdate IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_matchindentity_no IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_markfaildate IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_candropdate IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_checker IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_checker_dt IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_instrconv_ind IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_ndsbldate IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_lrdltype IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_ndsdate IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_ublckdate IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_delrecdate IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_lastregdate IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_lr_chkdate IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_lr_confdate IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_lr_instrdate IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_tmpoutdate IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_tmpretdate IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_transmitdate IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_hostdate IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_lr_ndsbldate IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_lr_ndsdate IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_lr_ublckdate IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_clt_reqdel_flag IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_mod_hispos_ind IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_updhispos_date IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_cash_client IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_msg_stat IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_allow_part_s IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_locchng_flg IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_comm_indentity_no IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_instruct_personnm IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_clientofcode IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_inter_med_person IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_inter_med_personnm IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_fxccy IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_uniq_ident_no IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj -> h_exp_setl_date IS STRING;
		EXEC SQL VAR l_dl_deal_ipo_struct_hd -> h_domestic_cp IS STRING;
	
	EXEC SQL END DECLARE SECTION;
		
	
	CO_ProcMonitor(p_logfile,"Entered DL_Rtv_IPODLStruct Function\n",NULL,NULL);

	l_sys_dl_deal_struct_if = (SYS_DL_DEAL_STRUCT_I *)calloc(1,sizeof(SYS_DL_DEAL_STRUCT_I));
	memset(l_sys_dl_deal_struct_if,NULL,sizeof(SYS_DL_DEAL_STRUCT_I));
	
	

   
   EXEC SQL SELECT INSTR_CODE,CURRENCY_CD,LOCATION_CD,EX_ARENA
            INTO :chr_l_instrcode_a,:chr_l_ccycode,:chr_l_locncode_c,:chr_l_exarena
            FROM    MT_INSTRUMENT
            WHERE  INSTR_ISIN =:l_dl_deal_ipo_struct_hd->h_instr_isin;

	IS_ANY_ORA_ERROR
   if(APL_ZERO_RESULT_SET)
 	{
  		CO_ProcMonitor(p_logfile,"Error in getting sec h_code from cinstrument",NULL,p_intlenv_data_struct_h);
      DL_Prnt_IPOHdr(p_ipo_reject_rept_file,"rejtrd");
		fprintf(p_ipo_reject_rept_file,"%-12s\t%-20s\t%-50s\n",p_dl_deal_ipo_struct_h -> h_dl_client,p_dl_deal_ipo_struct_h ->h_indentity_no,"ISIN Not Found");
      APL_GOBACK_FAIL
   }
	
	

	
	if(!strcmp(p_function,IPO_MAKERR_DEAL))
	{

		

	
		strcpy(l_sys_dl_deal_struct_hj -> h_dl_client,l_dl_deal_ipo_struct_hd -> h_dl_client);
		strcpy(l_sys_dl_deal_struct_hj -> h_indentity_no,l_dl_deal_ipo_struct_hd -> h_indentity_no);
		
		
		strcpy(l_sys_dl_deal_struct_hj -> h_dealcd, IPO_DEAL_CODE);
	
		fprintf(p_logfile,"INSTR_CODE|%s|CCY|%s|LOCN|%s|EXARENA|%s|Access_stamp|%s|\n",chr_l_instrcode_a,chr_l_ccycode,chr_l_locncode_c,chr_l_exarena,chr_p_sys_date);
	
	
		
		strcpy(l_sys_dl_deal_struct_hj -> h_deal_status,APL_STS_AUTH);



		

	
		l_sys_dl_deal_struct_hj -> h_custodycomm	= 0;
		l_sys_dl_deal_struct_hj -> h_brokercomm	= 0;
		l_sys_dl_deal_struct_hj -> h_stx_comm	= 0;
		l_sys_dl_deal_struct_hj -> h_oth_comm	= 0;
		strcpy(l_sys_dl_deal_struct_hj -> h_instrdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_moneydate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_isspotdl,APL_NO_IND);
		l_sys_dl_deal_struct_hj -> h_origquantity = l_sys_dl_deal_struct_hj -> h_qty;
		l_sys_dl_deal_struct_hj -> h_origamount = l_sys_dl_deal_struct_hj -> h_amt;  
		strcpy(l_sys_dl_deal_struct_hj -> h_dlfromord,APL_NO_IND);
		strcpy(l_sys_dl_deal_struct_hj -> h_reapired_ind,APL_NO_IND);
		strcpy(l_sys_dl_deal_struct_hj -> h_clientof,APL_NULL_STRING);
	
		strcpy(l_sys_dl_deal_struct_hj -> h_custinfo,APL_NULL_STRING);
	
		strcpy(l_sys_dl_deal_struct_hj -> h_fx_reqd,APL_NO_IND);
		strcpy(l_sys_dl_deal_struct_hj -> h_ispymtlocal,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_verfied_with,APL_NULL_STRING);
		l_sys_dl_deal_struct_hj -> h_diffamount	=	0;
		strcpy(l_sys_dl_deal_struct_hj -> h_brkrno,"00050");
		strcpy(l_sys_dl_deal_struct_hj -> h_failinfo,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_ispart_,APL_NULL_STRING);
		l_sys_dl_deal_struct_hj -> h_fx_rt	=	0;
		l_sys_dl_deal_struct_hj -> h_amend_count	=	0;
		l_sys_dl_deal_struct_hj -> h_number_a		=	0;
		strcpy(l_sys_dl_deal_struct_hj -> h_report_at_eom_ind,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_billdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_locindentity_no,	APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_instruct_person,APL_NULL_STRING);
		l_sys_dl_deal_struct_hj -> h_rec_int_000	=	0;
		strcpy(l_sys_dl_deal_struct_hj -> h_origindentity_no,l_sys_dl_deal_struct_hj -> h_indentity_no);
		strcpy(l_sys_dl_deal_struct_hj -> h_newdt,chr_p_sys_date);
		strcpy(l_sys_dl_deal_struct_hj -> h_maker,"SYSTEM");
		strcpy(l_sys_dl_deal_struct_hj -> h_maker_dt,chr_p_sys_date);
		strcpy(l_sys_dl_deal_struct_hj -> h_access_stamp,chr_p_sys_date);
		strcpy(l_sys_dl_deal_struct_hj -> h_info1,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_reginstr_ind,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_pos_stat,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_status_reg,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_confdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_matchindentity_no,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_markfaildate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_candropdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_checker,"SYSTEM");
		strcpy(l_sys_dl_deal_struct_hj -> h_checker_dt,chr_p_sys_date);
		strcpy(l_sys_dl_deal_struct_hj -> h_instrconv_ind,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_ndsbldate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_lrdltype,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_ndsdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_ublckdate,APL_NULL_STRING);
		l_sys_dl_deal_struct_hj -> h_delta_000	=	0;
		l_sys_dl_deal_struct_hj -> h_delta_001	=	0;
		l_sys_dl_deal_struct_hj -> h_delta_002	=	0;
		strcpy(l_sys_dl_deal_struct_hj -> h_delrecdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_lastregdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_lr_chkdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_lr_confdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_lr_instrdate,APL_NULL_STRING);
		l_sys_dl_deal_struct_hj -> h_regmsgquantity	=	0;
		strcpy(l_sys_dl_deal_struct_hj -> h_tmpoutdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_tmpretdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_transmitdate,APL_NULL_STRING);
		l_sys_dl_deal_struct_hj -> h_complquantity	=	0;
		l_sys_dl_deal_struct_hj -> h_lostquantity	=	0;
		l_sys_dl_deal_struct_hj -> h_marktrfquantity	=	0;
		l_sys_dl_deal_struct_hj -> h_mcomplquantity		=	0;
		l_sys_dl_deal_struct_hj -> h_outregquantity		=	0;
		l_sys_dl_deal_struct_hj -> h_pendregquantity	=	0;
		l_sys_dl_deal_struct_hj -> h_retregquantity		=	0;
		l_sys_dl_deal_struct_hj -> h_stampquantity		=	0;
		l_sys_dl_deal_struct_hj -> h_tempoutquantity	=	0;
		l_sys_dl_deal_struct_hj -> h_tempretquantity	=	0;
		l_sys_dl_deal_struct_hj -> h_valdeedquantity	=	0;
		strcpy(l_sys_dl_deal_struct_hj -> h_hostdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_lr_ndsbldate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_lr_ndsdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_lr_ublckdate,APL_NULL_STRING);
		l_sys_dl_deal_struct_hj -> h_number_b	=	0;
		strcpy(l_sys_dl_deal_struct_hj -> h_clt_reqdel_flag,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_mod_hispos_ind,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_updhispos_date,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_cash_client,APL_NULL_STRING);
		l_sys_dl_deal_struct_hj -> h_cpamt	=	0;
		strcpy(l_sys_dl_deal_struct_hj -> h_msg_stat	,APL_NULL_STRING);
		l_sys_dl_deal_struct_hj -> h_subfailreas_cd	=	0;
		strcpy(l_sys_dl_deal_struct_hj -> h_allow_part_s,APL_NO_IND);
		strcpy(l_sys_dl_deal_struct_hj -> h_locchng_flg,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_comm_indentity_no,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_instruct_personnm,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_clientofcode,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_inter_med_person,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_inter_med_personnm,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_fxccy,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_uniq_ident_no,APL_NULL_STRING);
		l_sys_dl_deal_struct_hj -> h_548cnt	=	0;
		strcpy(l_sys_dl_deal_struct_hj -> h_exp_setl_date,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_entry,"B");
	}
	else
	{
		EXEC SQL SELECT 	* 
					INTO 		:l_sys_dl_deal_struct_hj:l_sys_dl_deal_struct_if
					FROM		DL_DEAL
					WHERE 	CLIENT =:l_dl_deal_ipo_struct_hd -> h_dl_client
					AND		IDENTIY_NO	  =:l_dl_deal_ipo_struct_hd -> h_indentity_no
					AND 		DEAL_STAT ='AA'; 
					
		IS_ANY_ORA_ERROR
		if(APL_ZERO_RESULT_SET)
		{
	   	DL_Prnt_IPOHdr(p_ipo_reject_rept_file,"rejtrd");
			fprintf(p_ipo_reject_rept_file,IPO_RPT_REJ_DEAL,p_dl_deal_ipo_struct_h -> h_dl_client,p_dl_deal_ipo_struct_h ->h_indentity_no,"Trade Not Found/Not in proper format");	
			APL_GOBACK_FAIL
		}	
	}

      strcpy(l_sys_dl_deal_struct_hj -> h_dlt,l_dl_deal_ipo_struct_hd -> h_dlt);
      strcpy(l_sys_dl_deal_struct_hj -> h_setldt,l_dl_deal_ipo_struct_hd -> h_setldt);

      l_sys_dl_deal_struct_hj -> h_pr      =  l_dl_deal_ipo_struct_hd -> h_pr;
      l_sys_dl_deal_struct_hj -> h_amt  =  l_dl_deal_ipo_struct_hd -> h_counter_val;
      l_sys_dl_deal_struct_hj -> h_qty     =  l_dl_deal_ipo_struct_hd -> h_qty;

		strcpy(l_sys_dl_deal_struct_hj -> h_instr_code,chr_l_instrcode_a);
      
		
			memset(int_l_domcpac,APL_NULL_CHAR,11);
			i_domcpclt_cd = 0;
		fprintf(p_logfile,"before int_l_domcpac is |%s|,in h_file is |%s|\n",int_l_domcpac,l_dl_deal_ipo_struct_hd -> h_domestic_cp);
			EXEC SQL SELECT CLN_CODE INTO :int_l_domcpac:i_domcpclt_cd
						FROM MT_CLIENT WHERE CLN_NAME = ltrim(rtrim(:l_dl_deal_ipo_struct_hd -> h_domestic_cp)) 
												  OR CLN_CODE =ltrim(rtrim(:l_dl_deal_ipo_struct_hd -> h_domestic_cp)) 
												  OR SUBSTR(CLN_BRK_CD,1,8) =SUBSTR(ltrim(rtrim(:l_dl_deal_ipo_struct_hd -> h_domestic_cp)),1,8);
												  
			IS_ANY_ORA_ERROR
		fprintf(p_logfile,"l_domcpac is |%s|,in h_file is |%s|\n",int_l_domcpac,l_dl_deal_ipo_struct_hd -> h_domestic_cp);
		if(APL_ZERO_RESULT_SET)
		{
			memset(l_dl_deal_ipo_struct_hd -> h_domestic_cp,APL_NULL_CHAR,66);
			DL_Prnt_IPOHdr(p_ipo_reject_rept_file,"rejtrd");
			fprintf(p_ipo_reject_rept_file,IPO_RPT_REJ_DEAL,p_dl_deal_ipo_struct_h -> h_dl_client,p_dl_deal_ipo_struct_h ->h_indentity_no,"Domestic party Not Valid");
         APL_GOBACK_FAIL
		}
		else
		{
			memset(l_dl_deal_ipo_struct_hd -> h_domestic_cp,APL_NULL_CHAR,66);
			strcpy(l_dl_deal_ipo_struct_hd -> h_domestic_cp,int_l_domcpac);
		}
      if (!strcmp(l_dl_deal_ipo_struct_hd -> h_domestic_cp,l_mt_core_sys_params_struct_h.custody_clt_cd))
      {
         strcpy(l_sys_dl_deal_struct_hj -> h_classofdl,IPO_BT_DEAL);
      }
      else
      {
         strcpy(l_sys_dl_deal_struct_hj -> h_classofdl,IPO_NORM_DEAL);
      } 
      strcpy(l_sys_dl_deal_struct_hj -> h_domcpclt_cd,l_dl_deal_ipo_struct_hd -> h_domestic_cp);
      strcpy(l_sys_dl_deal_struct_hj -> h_domcp_custodyclt,l_dl_deal_ipo_struct_hd -> h_domestic_cp);
		memset(l_sys_dl_deal_struct_hj->h_countclt,APL_NULL_CHAR,11);
		if(strcmp(l_sys_dl_deal_struct_hj -> h_domcpclt_cd,l_mt_core_sys_params_struct_h.custody_clt_cd)==0)
		{
			if(strcmp(l_dl_deal_ipo_struct_hd -> h_cp_clt,APL_NULL_STRING)==0)
			{
				
				memset(int_l_countacc,APL_NULL_CHAR,11);
				EXEC SQL SELECT CLN_CODE INTO :int_l_countacc
						   FROM MT_CLIENT WHERE SUBSTR(CLN_BRK_CD,1,8) =SUBSTR(ltrim(rtrim(:l_dl_deal_ipo_struct_hd -> h_cp_detail)),1,8);
				
 				IS_ANY_ORA_ERROR
				if(APL_ZERO_RESULT_SET)
				{
					DL_Prnt_IPOHdr(p_ipo_reject_rept_file,"rejtrd");
					fprintf(p_ipo_reject_rept_file,IPO_RPT_REJ_DEAL,p_dl_deal_ipo_struct_h -> h_dl_client,p_dl_deal_ipo_struct_h ->h_indentity_no,"Counter party Mandatory for Internal trades");
         		APL_GOBACK_FAIL
				}
      	   else
               strcpy(l_sys_dl_deal_struct_hj -> h_countclt,int_l_countacc);
			}		
         else
      	 strcpy(l_sys_dl_deal_struct_hj -> h_countclt,l_dl_deal_ipo_struct_hd -> h_cp_clt);
		}
      strcpy(l_sys_dl_deal_struct_hj -> h_countcltnm,l_dl_deal_ipo_struct_hd -> h_cp_detail);	

		strcpy(l_sys_dl_deal_struct_hj -> h_ex_arena,chr_l_exarena);
		
		
		strcpy(l_sys_dl_deal_struct_hj -> h_fail_cd,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj -> h_loccode,chr_l_locncode_c);
		strcpy(l_sys_dl_deal_struct_hj -> h_currencycode,chr_l_ccycode);
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
		APL_FREE(l_sys_dl_deal_struct_if);
		CO_ProcMonitor(p_logfile,"Leaving Function Populate Trade Function successfully", NULL,NULL);
		return(APL_SUCCESS);

	RETURN_FAILURE :
		APL_FREE(l_sys_dl_deal_struct_if);
     	CO_ProcMonitor(p_logfile,"Leaving Function Populate Trade Function with errors", l_debug_info_ptr,NULL);
		return(APL_FAILURE);

}








int DL_Mod_IPOFileAudit(	char *p_file_name,
								char *chr_p_sys_date,
								char *p_ipo_client,
								char *p_ipo_ident,
								FILE *p_logfile,
								INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h,
								DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	
	int int_l_srno = 0;
	char int_l_status[3] = APL_NULL_STRING;

	short i_status_ind=0;

	EXEC SQL VAR int_l_status IS STRING;
	IPO_IF_DEBUG
		printf("Account |%s| Refno |%s|\n",p_ipo_client,p_ipo_ident);

	EXEC SQL SELECT STATUS
				INTO :int_l_status:i_status_ind
				FROM DL_IPOAUDIT
				WHERE CLIENT =:p_ipo_client
				AND		IDENTIY_NO =:p_ipo_ident
				FOR UPDATE;

	IPO_IF_DEBUG
	{
		printf("\n******************Audit |%d|*******statuc |%d|***\n",sqlca.sqlcode,i_status_ind);
	}
	IS_ANY_ORA_ERROR
	if(APL_ZERO_RESULT_SET)
	{
		EXEC SQL SELECT NVL(MAX(SRLNUM),0)
					INTO :int_l_srno
					FROM DL_IPOAUDIT;

		int_l_srno = int_l_srno + 1;


		EXEC SQL INSERT INTO DL_IPOAUDIT
					VALUES(:p_file_name,:int_l_srno,:p_ipo_client,:p_ipo_ident,'D',:chr_p_sys_date,NULL);
	
		IPO_IF_DEBUG
		{
			printf("***********%d***",sqlca.sqlcode);	
		}
		IS_ANY_ORA_ERROR
	}
	else if(i_status_ind == -1) 
	{
		EXEC SQL UPDATE DL_IPOAUDIT
					SET STATUS =	'R'
					WHERE CLIENT =:p_ipo_client
					AND		IDENTIY_NO =:p_ipo_ident			;

		IS_ANY_ORA_ERROR

	}
	else
	{
		fprintf(p_logfile,"Problem in getting |%s| refno |%s| from cipoaudit",p_ipo_client,p_ipo_ident);	
	}
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:
		CO_ProcMonitor(p_logfile,"Success From IPOAuditUpdate Function",NULL,NULL);
		return(APL_SUCCESS);	
   RETURN_FAILURE:
		CO_ProcMonitor(p_logfile,"Failure From IPOAuditUpdate Function",NULL,NULL);
		return(APL_SUCCESS);
}






int DL_Mod_SATDet(	FILE *p_sat_reject_rept_file,
								FILE *p_sat_update_rept_file,
								DL_DEAL_IPO_STRUCT_H *l_dl_deal_ipo_struct_h,
								FILE *p_logfile,
								DEBUG_INFO_STRUCT_H **l_debug_info_ptr,
								INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h)
{
	int int_l_no_sat_present = 3;
	int int_l_temp_count=0;
	char chr_l_error_string[100] = APL_NULL_STRING;
	CO_ProcMonitor(p_logfile,"Entered DL_Mod_SATDet\n",NULL,NULL);
        

	fprintf(p_logfile,"\n before sqlca.sqlcode is |%d|",sqlca.sqlcode);
	fflush(p_logfile);
	EXEC SQL SELECT COUNT(*) INTO :int_l_temp_count
				FROM DL_DEAL WHERE 
				CLIENT=:l_dl_deal_ipo_struct_h->h_dl_client AND 
				IDENTIY_NO = :l_dl_deal_ipo_struct_h->h_indentity_no AND
				DEAL_STAT ='AA'; 
	fprintf(p_logfile,"\n after sqlca.sqlcode is |%d|",sqlca.sqlcode);
	fflush(p_logfile);

	IS_ANY_ORA_ERROR

	if  (int_l_temp_count == 0) 
	{
	fprintf(p_logfile,"\n Inside count 0  sqlca.sqlcode is |%d|",sqlca.sqlcode);
	fflush(p_logfile);
       DL_Prnt_IPOHdr(p_sat_reject_rept_file,"rejsat");
       fprintf(p_sat_reject_rept_file,IPO_RPT_REJ_SAT,l_dl_deal_ipo_struct_h->h_dl_client,l_dl_deal_ipo_struct_h->h_indentity_no,l_dl_deal_ipo_struct_h->h_sat_cd,l_dl_deal_ipo_struct_h->h_satclt,l_dl_deal_ipo_struct_h->h_oper_cd,"Trade Not Found"); /*Veda -- 10GM */
		 APL_GOBACK_FAIL 
	fprintf(p_logfile,"\n Inside count 0  sqlca.sqlcode is |%d|",sqlca.sqlcode);
	fflush(p_logfile);
	}

	fprintf(p_logfile,"Before calling Satdataexists %s,%s,%s %s,%d\n",l_dl_deal_ipo_struct_h->h_satclt,l_dl_deal_ipo_struct_h->h_sat_cd,l_dl_deal_ipo_struct_h->h_oper_cd,chr_l_error_string,int_l_no_sat_present); /*Veda -- 10GM */
   if(APL_FAILURE ==DL_Chk_SATDataExt(	&int_l_no_sat_present,
												chr_l_error_string,
												l_dl_deal_ipo_struct_h->h_satclt, /*Veda -- 10GM */ 
												l_dl_deal_ipo_struct_h->h_sat_cd,
												l_dl_deal_ipo_struct_h->h_oper_cd,
												p_logfile,
												p_sat_reject_rept_file))

   {
	
   }
	fprintf(p_logfile,"After calling Satdataexists %s,%s,%s %s,%d\n",l_dl_deal_ipo_struct_h->h_satclt,l_dl_deal_ipo_struct_h->h_sat_cd,l_dl_deal_ipo_struct_h->h_oper_cd,chr_l_error_string,int_l_no_sat_present); /*Veda -- 10GM */
	int_l_no_sat_present = 3;
   if(APL_FAILURE == DL_Chk_SATDet(  &int_l_no_sat_present,
														p_sat_reject_rept_file,
														l_dl_deal_ipo_struct_h,
														p_logfile,
														l_debug_info_ptr))
   {	
	  	if(int_l_no_sat_present == 0)
			APL_GOBACK_FAIL
   }
	
  	if(APL_FAILURE == DL_Mod_SATDetMod(	p_sat_reject_rept_file,
													p_sat_update_rept_file,
													l_dl_deal_ipo_struct_h,
													p_logfile,
													l_debug_info_ptr,
													p_intlenv_data_struct_h))
  	{
    	APL_GOBACK_FAIL
  	}

  	RETURN_SUCCESS  :
    	fprintf(p_logfile,"Success from ProcessUpdateSATDetails \n");
    	fflush(p_logfile);
  	 	return(APL_SUCCESS);

  	RETURN_FAILURE  :
    	fprintf(p_logfile,"Failure from ProcessUpdateSATDetails \n");
    	fflush(p_logfile);
    	return(APL_FAILURE);
}


int DL_Chk_SATDataExt(	int  *p_no_sat_present,
							char *p_error_string,
							char *p_satclt, 
							char *p_sat_code,
							char *p_operator_code,
							FILE *p_logfile, 
							FILE *p_sat_reject_rept_file)
{
  	memset(p_error_string,APL_NULL_CHAR,100);
	strcpy(p_error_string,"|");
	if (strlen(p_satclt) == 0)
	{
		(*p_no_sat_present)--;
		strcat(p_error_string,"SAT ACCOUNT|");
	}
	if(strlen(p_sat_code) == 0)
	{
		(*p_no_sat_present)--;
		strcat(p_error_string,"SAT CODE|");
	}
	if(strlen(p_operator_code) == 0)
	{
		(*p_no_sat_present)--;
		strcat(p_error_string,"OPERATOR CODE|");
	}
	if((*p_no_sat_present) == 3)  
  		APL_GOBACK_SUCCESS
	else
	{
		strcat(p_error_string,"\t Are/is not present");
      APL_GOBACK_FAIL
	}
	strcat(p_error_string,APL_NULL_STRING);

   RETURN_SUCCESS:
       fprintf(p_logfile,"Success from Process DL_Chk_SATDataExt  \n");
		 fflush(p_logfile);
       return(APL_SUCCESS);
 
  RETURN_FAILURE:
       fprintf(p_logfile,"UnSuccefully exited from Process DL_Chk_SATDataExt \n");
		 fflush(p_logfile);
       return(APL_FAILURE);
}






int DL_Chk_SATDet(	int *p_no_sat_present,
								FILE *p_sat_reject_rept_file,
								DL_DEAL_IPO_STRUCT_H *l_dl_deal_ipo_struct_h,
								FILE *p_logfile,
								DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	char chr_l_error_string[100] = APL_NULL_STRING;
	char chr_l_err_alp_string[100] = APL_NULL_STRING;
	char chr_l_temp_str[100] = APL_NULL_STRING;	
  	char chr_l_satacc[SAT_ACCOUNT_LEN+1]=APL_NULL_STRING;
  	char chr_l_temp_satacc[SAT_ACCOUNT_LEN+1]=APL_NULL_STRING;
  	char chr_l_satacc1[SAT_ACCOUNT_LEN+1]=APL_NULL_STRING;
  	char chr_l_sat_code[SAT_ACCOUNT_LEN+1]=APL_NULL_STRING;
  	char chr_l_temp_sat_code[SAT_ACCOUNT_LEN+1]=APL_NULL_STRING;
  	char chr_l_sat_code1[SAT_ACCOUNT_LEN+1]=APL_NULL_STRING;
  	char chr_l_operator_code[SAT_OPER_CODE_LEN+1]=APL_NULL_STRING;
  	char chr_l_temp_operator_code[SAT_OPER_CODE_LEN+1]=APL_NULL_STRING;
  	char chr_l_operator_code1[SAT_OPER_CODE_LEN+1]=APL_NULL_STRING;

   EXEC SQL VAR chr_l_satacc  IS STRING; 
   EXEC SQL VAR chr_l_sat_code  IS STRING; 
   EXEC SQL VAR chr_l_operator_code  IS STRING; 
   EXEC SQL VAR chr_l_temp_satacc  IS STRING; 
   EXEC SQL VAR chr_l_temp_sat_code  IS STRING; 
   EXEC SQL VAR chr_l_temp_operator_code  IS STRING; 

  	strcpy(chr_l_satacc,l_dl_deal_ipo_struct_h->h_satclt); /*Veda -- 10GM */
  	strcpy(chr_l_satacc1,l_dl_deal_ipo_struct_h->h_satclt); /*Veda -- 10GM */
  	strcpy(chr_l_sat_code,l_dl_deal_ipo_struct_h->h_sat_cd);
  	strcpy(chr_l_sat_code1,l_dl_deal_ipo_struct_h->h_sat_cd);
  	strcpy(chr_l_operator_code,l_dl_deal_ipo_struct_h->h_oper_cd);
  	strcpy(chr_l_operator_code1,l_dl_deal_ipo_struct_h->h_oper_cd);
	strcpy(chr_l_error_string,"|");
	strcpy(chr_l_err_alp_string,"|");
  	if(strlen(chr_l_satacc) > 0)
	{
		if (strlen(chr_l_satacc)==(SAT_ACCOUNT_LEN - 1)) 
		{
       
         sqlca.sqlcode = 0;
         EXEC SQL SELECT TO_NUMBER(:chr_l_satacc) INTO :chr_l_temp_satacc FROM DUAL;
			fprintf(p_logfile,"l_satacc is %s\n",chr_l_satacc);
			fflush(p_logfile);
			
         if (sqlca.sqlcode)
			{
				strcat(chr_l_err_alp_string,"SAT ACCOUNT");
				chr_l_err_alp_string[strlen(chr_l_err_alp_string)]='\0';
				strcpy(l_dl_deal_ipo_struct_h->h_satclt,APL_NULL_STRING);	 /*Veda -- 10GM */
				(*p_no_sat_present)--;
			}
		}
		else
		{
			strcat(chr_l_error_string,"SAT ACCOUNT|");
			chr_l_error_string[strlen(chr_l_error_string)]='\0';
			strcpy(l_dl_deal_ipo_struct_h->h_satclt,APL_NULL_STRING);	 /*Veda -- 10GM */
				(*p_no_sat_present)--;
		}
	}
	if(strlen(chr_l_sat_code)>0)
	{
		if (strlen(chr_l_sat_code)==(SAT_ACCOUNT_LEN - 1))
		{
         
         sqlca.sqlcode = 0;
         EXEC SQL SELECT TO_NUMBER(:chr_l_sat_code) INTO :chr_l_temp_sat_code FROM DUAL;
			fprintf(p_logfile,"l_sat_code is %s\n",chr_l_sat_code);
			fflush(p_logfile);

			
         if (sqlca.sqlcode)
			{
					strcat(chr_l_err_alp_string,"SAT CODE");
					chr_l_err_alp_string[strlen(chr_l_err_alp_string)]='\0';
					strcpy(l_dl_deal_ipo_struct_h->h_sat_cd,APL_NULL_STRING);
				(*p_no_sat_present)--;
			}
		}
		else
		{
			strcat(chr_l_error_string,"SAT CODE|");
			chr_l_error_string[strlen(chr_l_error_string)]='\0';
			strcpy(l_dl_deal_ipo_struct_h->h_sat_cd,APL_NULL_STRING);
				(*p_no_sat_present)--;
		}
	}
	if(strlen(chr_l_operator_code)>0)			
	{
		if (strlen(chr_l_operator_code)==(SAT_OPER_CODE_LEN - 1))
		{
         
         sqlca.sqlcode = 0;
         EXEC SQL SELECT TO_NUMBER(:chr_l_operator_code) INTO :chr_l_temp_operator_code FROM DUAL;
			fprintf(p_logfile,"l_operator_code is %s\n",chr_l_operator_code);
			fflush(p_logfile);
			
         if (sqlca.sqlcode)
			{
					strcat(chr_l_err_alp_string,"OPERATOR CODE");
					chr_l_err_alp_string[strlen(chr_l_err_alp_string)]='\0';
					strcpy(l_dl_deal_ipo_struct_h->h_oper_cd,APL_NULL_STRING);
				(*p_no_sat_present)--;
			}
		}
		else
		{
			strcat(chr_l_error_string,"OPERATOR CODE");
			chr_l_error_string[strlen(chr_l_error_string)]='\0';
			strcpy(l_dl_deal_ipo_struct_h->h_oper_cd,APL_NULL_STRING);
				(*p_no_sat_present)--;
		}
	}	
	if((strlen(chr_l_err_alp_string) == 1) && (strlen(chr_l_error_string) == 1))
		APL_GOBACK_SUCCESS

	if(strlen(chr_l_err_alp_string) > 1)
	{
			strcpy(chr_l_temp_str,"Alphabetic int_found in :");
			strcat(chr_l_temp_str,chr_l_err_alp_string);
			chr_l_temp_str[strlen(chr_l_temp_str)]='\0';	
        	fprintf(p_logfile,"Alphabetic Characters Found in  SAT details \n");
	}
	if(strlen(chr_l_error_string) > 1)
	{
			strcat(chr_l_temp_str,"Not Enough Length for:");
			strcat(chr_l_temp_str,chr_l_error_string);
			chr_l_temp_str[strlen(chr_l_temp_str)]='\0';	
	}
   DL_Prnt_IPOHdr(p_sat_reject_rept_file,"rejsat"); 
	
	fprintf(p_sat_reject_rept_file,IPO_RPT_REJ_SAT,l_dl_deal_ipo_struct_h->h_dl_client,l_dl_deal_ipo_struct_h->h_indentity_no,chr_l_satacc1,chr_l_sat_code1,chr_l_operator_code1,chr_l_temp_str);
 	
	APL_GOBACK_FAIL	
	   

  	APL_GOBACK_SUCCESS

  	RETURN_SUCCESS:
                
		fprintf(p_logfile,"Successfully Exiting the program DL_Chk_SATDet\n");
		fflush(p_logfile);
      return(APL_SUCCESS);
      
  RETURN_FAILURE:
  
      fprintf(p_logfile,"Un Successfully Exiting the program DL_Chk_SATDet\n");
		fflush(p_logfile);
      return(APL_FAILURE);
}








int DL_Proc_MarkRecDel(	FILE *p_logfile,
											FILE *p_ipo_del_rept_file,
											INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h,
											DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

				
	DL_DEAL_OTH_STRUCT_H *l_trade_oth_struct_h = (DL_DEAL_OTH_STRUCT_H *)NULL;
	DL_DEAL_OTH_STRUCT_I *l_trade_oth_struct_i = (DL_DEAL_OTH_STRUCT_I *)NULL;
	struct sqlca sqlca;
	

	int	int_ret_val = 0;
	char *chr_h_error_desc;

	EXEC SQL BEGIN DECLARE SECTION;
		EXEC SQL VAR l_trade_oth_struct_h->h_dl_client IS STRING;
		EXEC SQL VAR l_trade_oth_struct_h->h_indentity_no IS STRING;
		EXEC SQL VAR l_trade_oth_struct_h->h_locindentity_no IS STRING;
		EXEC SQL VAR l_trade_oth_struct_h->h_brkrno IS STRING;
		EXEC SQL VAR l_trade_oth_struct_h->h_clt_reqdel_flag IS STRING;
		EXEC SQL VAR l_trade_oth_struct_h->h_dealcd IS STRING;
		EXEC SQL VAR l_trade_oth_struct_h->h_classofdl IS STRING;
		EXEC SQL VAR l_trade_oth_struct_h->h_lrdltype IS STRING;
		EXEC SQL VAR l_trade_oth_struct_h->h_domcpclt_cd IS STRING;
		EXEC SQL VAR l_trade_oth_struct_h->h_custinfo IS STRING;
		EXEC SQL VAR l_trade_oth_struct_h->h_access_stamp IS STRING;
		EXEC SQL VAR l_trade_oth_struct_h->h_dlt IS STRING;
		EXEC SQL VAR l_trade_oth_struct_h->h_setldt IS STRING;
		EXEC SQL VAR l_trade_oth_struct_h->h_lr_ndsdate IS STRING;
	EXEC SQL END DECLARE SECTION;



	l_trade_oth_struct_h = (DL_DEAL_OTH_STRUCT_H *)calloc(1,sizeof(DL_DEAL_OTH_STRUCT_H ));
	memset(l_trade_oth_struct_h,NULL,sizeof(DL_DEAL_OTH_STRUCT_H));

	l_trade_oth_struct_i = ( DL_DEAL_OTH_STRUCT_I *)calloc(1,sizeof( DL_DEAL_OTH_STRUCT_I ));
	memset(l_trade_oth_struct_i,NULL,sizeof(DL_DEAL_OTH_STRUCT_I));

	
	strcpy(p_intlenv_data_struct_h->h_mode,APL_FUNC_DELETE);
	strcpy(p_intlenv_data_struct_h->usr,"SYSTEM");
	strcpy(p_intlenv_data_struct_h->processtion,"TRADE DELETION - IPO");
	strcpy(p_intlenv_data_struct_h->subprocess,"DEL");


	chr_h_error_desc =  (char *)calloc(4000,sizeof(char));
	APL_MALLOC_FAIL(chr_h_error_desc);

	memset(chr_h_error_desc,NULL,sizeof(char));

	
	sqlca.sqlcode = 0;


	EXEC SQL DECLARE mark_delete_trd CURSOR FOR
		SELECT 	A.CLIENT,
			A.IDENTIY_NO,
			A.LCL_IDENTNO,
			A.BRK_NO,
			A.CLT_REQDEL_IND,
			A.ACCESS_STAMP,
			A.DEAL_CD,
			TO_CHAR(A.DEAL_DATE,'DD/MM/YYYY hh:mi:ss'),
			TO_CHAR( A.SETL_DATE,'DD/MM/YYYY hh:mi:ss'),
			A.DL_CLASS,
			A.LR_DL_CLASS,
			A.AMOUNT,
			A.COST,
			A.DOMESTIC_CPCLT,
			A.CLIENT_NOTE,
			TO_CHAR(A.LRNDS_DATE,'DD/MM/YYYY hh:mi:ss')
		FROM 	DL_DEAL A,
				DL_IPOAUDIT B
		WHERE A.CLIENT = :chr_g_running_acc	
		AND   A.CLIENT = B.CLIENT 
		AND	A.IDENTIY_NO =	B.IDENTIY_NO
		AND	B.STATUS IS NULL;

	IS_ANY_ORA_ERROR
	EXEC SQL OPEN mark_delete_trd;

	IS_ANY_ORA_ERROR

	for(;;)
	{
		memset(l_trade_oth_struct_h,NULL,sizeof(DL_DEAL_OTH_STRUCT_H));
		memset(chr_h_error_desc,NULL,sizeof(char));


		EXEC SQL FETCH mark_delete_trd 
					INTO :l_trade_oth_struct_h:l_trade_oth_struct_i;
		
		IS_ANY_ORA_ERROR	

		if(APL_ZERO_RESULT_SET)break;
		
		CO_FreeErrLst(l_debug_info_ptr);

      l_trade_oth_struct_h->h_clt_reqdel_flag[0]='Y';
      l_trade_oth_struct_h->h_clt_reqdel_flag[1]='\0';
		
		if (APL_FAILURE == DL_Proc_TrdOth(l_trade_oth_struct_h, p_intlenv_data_struct_h, l_debug_info_ptr) )
		{
			CO_ProcMonitor(p_logfile,"Failed in DL_Proc_TrdOth\n",l_debug_info_ptr,p_intlenv_data_struct_h);
			int_ret_val = CO_Rtv_ErrString(l_debug_info_ptr,chr_h_error_desc);
			DL_Prnt_IPOHdr(p_ipo_del_rept_file,"delete");
			fprintf(p_ipo_del_rept_file,IPO_RPT_DEL_DEAL_REAS,l_trade_oth_struct_h->h_dl_client,l_trade_oth_struct_h->h_indentity_no,chr_h_error_desc);
		}
		else
		{
			DL_Prnt_IPOHdr(p_ipo_del_rept_file,"delete");
			fprintf(p_ipo_del_rept_file,IPO_RPT_DEL_DEAL,l_trade_oth_struct_h->h_dl_client,l_trade_oth_struct_h->h_indentity_no);
		}
	}
		
	EXEC SQL CLOSE mark_delete_trd;

	
	if(APL_FAILURE == DL_Proc_IPOAuditRst(l_debug_info_ptr))
	{
		CO_ProcMonitor(p_logfile,"Failed in DL_Proc_IPOAuditRst\n",NULL,NULL);
		APL_GOBACK_FAIL
	}
		
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:
					
				APL_FREE(l_trade_oth_struct_h);
				APL_FREE(l_trade_oth_struct_i);
					
				CO_ProcMonitor(p_logfile,"Success From DL_Proc_MarkRecDel\n",NULL,NULL);
				return(APL_SUCCESS);
		
   RETURN_FAILURE:
	
				CO_ProcMonitor(p_logfile,"Failure From DL_Proc_MarkRecDel\n",NULL,NULL);
            APL_FREE(l_trade_oth_struct_h);
				APL_FREE(l_trade_oth_struct_i);
				return(APL_FAILURE);
}




int DL_Proc_IPOAuditRst( DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	EXEC SQL UPDATE DL_IPOAUDIT
				SET STATUS = NULL;
	IS_ANY_ORA_ERROR
	
	RETURN_SUCCESS:
			return(APL_SUCCESS);

	RETURN_FAILURE:
			return(APL_FAILURE);
}




int DL_Mod_IPODlLMod(	char *p_function,	
							DL_DEAL_IPO_STRUCT_H *p_dl_deal_ipo_struct_h,
							FILE *p_ipo_del_rept_file,
							FILE *p_ipo_create_rept_file,
							FILE *p_ipo_reject_rept_file,
							FILE *p_sat_reject_rept_file,
							FILE *p_sat_update_rept_file,
							FILE *p_unmatch_rept_file,	
							FILE *p_logfile,
							char *chr_p_sys_date,
							INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h,
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
		SYS_DL_DEAL_STRUCT_H	*p_sys_dl_deal_struct_h_g = (SYS_DL_DEAL_STRUCT_H *)NULL;
		DL_DEAL_IPO_STRUCT_H *l_dl_deal_ipo_struct_hd = p_dl_deal_ipo_struct_h;
		int int_l_trdrepseqnum = 0,int_l_match =0;
		char chr_l_unmatch_string[400];
		FILE *l_umatch_rept_file = (FILE *)NULL;
		char *chr_h_error_desc;

		int int_ret_val=0;
		memset(chr_l_unmatch_string,APL_NULL_CHAR,400);
		CO_ProcMonitor(p_logfile,"Entered DL_Mod_IPODlLMod Function\n",l_debug_info_ptr,p_intlenv_data_struct_h);

		p_sys_dl_deal_struct_h_g = (SYS_DL_DEAL_STRUCT_H	*)calloc(1,sizeof(SYS_DL_DEAL_STRUCT_H));
		memset(p_sys_dl_deal_struct_h_g,NULL,sizeof(SYS_DL_DEAL_STRUCT_H));
	
		chr_h_error_desc =  (char *)calloc(4000,sizeof(char));
		APL_MALLOC_FAIL(chr_h_error_desc);
	
		if(APL_FAILURE == DL_Proc_MatchIPODL(	&int_l_match,
														chr_l_unmatch_string,
														l_dl_deal_ipo_struct_hd,
														p_ipo_reject_rept_file,
														p_logfile,
														l_debug_info_ptr))
		{
			CO_ProcMonitor(p_logfile,"Failed in DL_Proc_MatchIPODL Function\n",NULL,NULL);
			APL_GOBACK_FAIL
		}
		


		if(int_l_match)
		{
			DL_Prnt_IPOHdr(p_unmatch_rept_file,"unmatch");
			fprintf(p_unmatch_rept_file,"\n\n%-12s||%-20s:\tMatching",l_dl_deal_ipo_struct_hd->h_dl_client,l_dl_deal_ipo_struct_hd->h_indentity_no);	
			APL_GOBACK_SUCCESS
		}
		
		fprintf(p_logfile,"\nThe fields info not matched :\n\t%-20s\t%-20s\t%-20s\n%sGoing for modification\n","FIELD","ORIGINAL","NEW",chr_l_unmatch_string);
		DL_Prnt_IPOHdr(p_unmatch_rept_file,"unmatch");
		int_g_unmatch_rept_line = int_g_unmatch_rept_line + 5;
		fprintf(p_unmatch_rept_file,"\n\n%-12s||%-20s:\n==============================\n\t\n%s",l_dl_deal_ipo_struct_hd->h_dl_client,l_dl_deal_ipo_struct_hd->h_indentity_no,chr_l_unmatch_string);

		if(APL_FAILURE == DL_Rtv_IPODLStruct(	p_function,	
																	l_dl_deal_ipo_struct_hd,
																	p_sys_dl_deal_struct_h_g,
																	p_ipo_reject_rept_file,
																	p_logfile,
																	chr_p_sys_date,
																	p_intlenv_data_struct_h,
																	l_debug_info_ptr))
		{
			CO_ProcMonitor(p_logfile,"Failed in DL_Rtv_IPODLStruct	inside modify processtion\n",l_debug_info_ptr,p_intlenv_data_struct_h);
			APL_GOBACK_FAIL
		}

      
      strcpy(p_intlenv_data_struct_h->h_mode,APL_FUNC_MODIFY);
      strcpy(p_intlenv_data_struct_h->processtion,"TRADE MODIFY - IPO ");
		strcpy(p_intlenv_data_struct_h->subprocess,"MOD");
		strcpy(p_intlenv_data_struct_h->usr,"SYSTEM");
		strcpy(p_intlenv_data_struct_h->h_process,"B"); 
	   

		CO_FreeErrLst(l_debug_info_ptr);

		memset(chr_h_error_desc,NULL,sizeof(char));
		if(APL_FAILURE == DL_Proc_Trd(	p_sys_dl_deal_struct_h_g,
												&int_l_trdrepseqnum,
												p_intlenv_data_struct_h,
												l_debug_info_ptr))
		{
			DL_Prnt_IPOHdr(p_ipo_reject_rept_file,"rejtrd");
			
			int_ret_val = CO_Rtv_ErrString(l_debug_info_ptr,chr_h_error_desc);
			fprintf(p_ipo_reject_rept_file,"%-12s\t%-20s\t%s\n",l_dl_deal_ipo_struct_hd -> h_dl_client,l_dl_deal_ipo_struct_hd ->h_indentity_no,chr_h_error_desc);
			
			CO_ProcMonitor(p_logfile,"Failed in GBGenTrade Function\n",l_debug_info_ptr,p_intlenv_data_struct_h);
			APL_GOBACK_FAIL
		}
	
	
		DL_Prnt_IPOHdr(p_ipo_create_rept_file,"updtrd");	
		fprintf(p_ipo_create_rept_file,IPO_RPT_UPD_DEAL,l_dl_deal_ipo_struct_hd -> h_dl_client,l_dl_deal_ipo_struct_hd -> h_indentity_no,"Trade Updated Successfully");
				
		APL_GOBACK_SUCCESS

		RETURN_SUCCESS :
			CO_ProcMonitor(p_logfile,"Leaving DL_Mod_IPODlLMod Function successfully",l_debug_info_ptr,p_intlenv_data_struct_h);
			APL_FREE(p_sys_dl_deal_struct_h_g);
			return(APL_SUCCESS);

		RETURN_FAILURE :
			CO_ProcMonitor(p_logfile,"Leaving DL_Mod_IPODlLMod Function with errors",l_debug_info_ptr,p_intlenv_data_struct_h);
			APL_FREE(p_sys_dl_deal_struct_h_g);
			return(APL_FAILURE);

}









int DL_Proc_MatchIPODL(	int *p_match,
								char *p_unmatch_string,
								DL_DEAL_IPO_STRUCT_H *p_dl_deal_ipo_struct_h,
								FILE *p_ipo_reject_rept_file,
								FILE *p_logfile,
						   	DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
														
							
{	

	double	l_quantity = 0.0,l_cost = 0.0;
	char chr_l_dom_cp[APL_CLIENT_LENGTH],chr_l_cp_acc[APL_CLIENT_LENGTH],chr_l_trdt_a[APL_DATE_LEN],chr_l_settledt_a[APL_DATE_LEN],chr_l_typeoftrd[3],chr_l_ipo_typeoftrd[3],chr_l_domcp_desc[66],chr_l_domcp_bic[13];
	short i_qty=0,i_dom_cp=0,i_cp_acc=0,i_dlt=0,i_setldt=0,i_pr=0,i_classofdl=0,i_domcp_desc=0,i_domcp_bic=0;
   short i_cp_desc=0;

   char  chr_l_cp_bic[13],chr_l_cp_desc[66];
	char	chr_l_file_price[22] = APL_NULL_STRING;
	char	chr_l_db_price[22] = APL_NULL_STRING;

	EXEC SQL BEGIN DECLARE SECTION;
		EXEC SQL VAR chr_l_dom_cp	IS STRING;
		EXEC SQL VAR chr_l_domcp_desc	IS STRING;
		EXEC SQL VAR chr_l_domcp_bic	IS STRING;
		EXEC SQL VAR chr_l_cp_bic	IS STRING;
		EXEC SQL VAR chr_l_cp_desc	IS STRING;
		EXEC SQL VAR chr_l_cp_acc	IS STRING;
		EXEC SQL VAR chr_l_trdt_a		IS STRING;
		EXEC SQL VAR chr_l_settledt_a	IS STRING;
		EXEC SQL VAR chr_l_typeoftrd IS STRING;
	EXEC SQL END DECLARE SECTION;


	memset(chr_l_dom_cp,APL_NULL_CHAR,66);
	memset(chr_l_cp_acc,APL_NULL_CHAR,APL_CLIENT_LENGTH);
	memset(chr_l_trdt_a,APL_NULL_CHAR,APL_DATE_LEN);
	memset(chr_l_typeoftrd,APL_NULL_CHAR,3);
	memset(chr_l_ipo_typeoftrd,APL_NULL_CHAR,3);
	sqlca.sqlcode = 0;		

	EXEC SQL SELECT QTY,
						 DOMESTIC_CPCLT,
						 CP_CLT,
						 CP_CLTNAME,
						 DEAL_DATE,
						 SETL_DATE,
						 COST,
						 DL_CLASS
				INTO	 :l_quantity:i_qty,
						 :chr_l_dom_cp:i_dom_cp,
						 :chr_l_cp_acc:i_cp_acc,
						 :chr_l_cp_desc:i_cp_desc,
						 :chr_l_trdt_a:i_dlt,
						 :chr_l_settledt_a:i_setldt,
						 :l_cost:i_pr,
						 :chr_l_typeoftrd:i_classofdl	
				FROM 	DL_DEAL 
				WHERE CLIENT 	= :p_dl_deal_ipo_struct_h ->h_dl_client
				AND  	IDENTIY_NO		= :p_dl_deal_ipo_struct_h ->h_indentity_no;			

		IS_ANY_ORA_ERROR

	if (APL_ZERO_RESULT_SET)
	{
		DL_Prnt_IPOHdr(p_ipo_reject_rept_file,"rejtrd");
		fprintf(p_ipo_reject_rept_file,IPO_RPT_REJ_DEAL,p_dl_deal_ipo_struct_h -> h_dl_client,p_dl_deal_ipo_struct_h ->h_indentity_no,"Trade Not Found");
		APL_GOBACK_FAIL
	}
   else  
	{
			EXEC SQL SELECT CLN_NAME,CLN_BRK_CD INTO :chr_l_domcp_desc:i_domcp_desc,:chr_l_domcp_bic:i_domcp_bic FROM MT_CLIENT WHERE CLN_CODE = :chr_l_dom_cp;
	}
  
	if(i_cp_acc==-1)
	{
		strcpy(chr_l_cp_acc,APL_NULL_STRING);
	}
   else
   {
		EXEC SQL SELECT NVL(SUBSTR(CLN_BRK_CD,1,8),'') INTO :chr_l_cp_bic FROM MT_CLIENT WHERE CLN_CODE = :chr_l_cp_acc;
   } 

	if (!strcmp(chr_l_dom_cp,l_mt_core_sys_params_struct_h.custody_clt_cd))
   {
      strcpy(chr_l_ipo_typeoftrd,IPO_BT_DEAL);
   }
   else
   {
      strcpy(chr_l_ipo_typeoftrd,IPO_NORM_DEAL);
   }	
	

   fprintf(p_logfile,"\nfile:\n\tqty\t|%lf|\n\tprice\t|%lf|\n\ttftrd\t|%s|\n\tdomcp\t|%s|\n\tcpacc\t|%s|\n\ttrdt\t|%s|\n\tset dat\t|%s|\n",p_dl_deal_ipo_struct_h ->h_qty,p_dl_deal_ipo_struct_h ->h_pr,chr_l_ipo_typeoftrd,p_dl_deal_ipo_struct_h ->h_domestic_cp,p_dl_deal_ipo_struct_h ->h_cp_clt,p_dl_deal_ipo_struct_h ->h_dlt,p_dl_deal_ipo_struct_h ->h_setldt);

   fprintf(p_logfile,"\ntable:\n\tqty\t|%lf|\n\tprice\t|%lf|\n\ttftrd\t|%s|\n\tdomcp\t|%s|\n\tcpacc\t|%s|\n\ttrdt\t|%s|\n\tset dat\t|%s|\n",l_quantity,l_cost,chr_l_typeoftrd,chr_l_dom_cp,chr_l_cp_acc,chr_l_trdt_a,chr_l_settledt_a);

   if(p_dl_deal_ipo_struct_h ->h_qty != l_quantity)
       sprintf(p_unmatch_string,"\t%-20s\t%-20lf\t%-20lf\n","QTY",l_quantity,p_dl_deal_ipo_struct_h ->h_qty);

	memset(chr_l_file_price,APL_NULL_CHAR,22);
	memset(chr_l_db_price,APL_NULL_CHAR,22);
	sprintf(chr_l_file_price,"%lf",p_dl_deal_ipo_struct_h->h_pr);
	chr_l_file_price[strlen(chr_l_file_price)] = '\0';

	sprintf(chr_l_db_price,"%lf",l_cost);
	chr_l_db_price[strlen(chr_l_db_price)] = '\0';

   if(strcmp(chr_l_file_price,chr_l_db_price)!=0)
	{
	    sprintf(p_unmatch_string,"%s\t%-20s\t%-20lf\t%-20lf\n",p_unmatch_string,"COST",l_cost,p_dl_deal_ipo_struct_h ->h_pr);
	}
   if(strcmp(chr_l_ipo_typeoftrd,chr_l_typeoftrd))
		 sprintf(p_unmatch_string,"%s\t%-20s\t%-20s\t%-20s\n",p_unmatch_string,"TYPEOFTRADE",chr_l_typeoftrd,chr_l_ipo_typeoftrd);


   if(strcmp(p_dl_deal_ipo_struct_h ->h_domestic_cp,chr_l_dom_cp))
      {
       if (strcmp(p_dl_deal_ipo_struct_h ->h_domestic_cp,chr_l_domcp_desc))
         {
          if (strncmp(p_dl_deal_ipo_struct_h ->h_domestic_cp,chr_l_domcp_bic,8))
             {
      
       sprintf(p_unmatch_string,"%s\t%-20s\t%-20s\t%-20s\n",p_unmatch_string,"Domestic Counter Party",chr_l_dom_cp,p_dl_deal_ipo_struct_h ->h_domestic_cp);
      
              }
         }
      }

   if (strcmp(p_dl_deal_ipo_struct_h->h_cp_clt,APL_NULL_STRING)!=0)
   {
   	if(strcmp(p_dl_deal_ipo_struct_h ->h_cp_clt,chr_l_cp_acc))
       	sprintf(p_unmatch_string,"%s\t%-20s\t%-20s\t%-20s\n",p_unmatch_string,"Counterparty Account",chr_l_cp_acc,p_dl_deal_ipo_struct_h ->h_cp_clt);
   }
   else
   {
   	   if(strcmp(p_dl_deal_ipo_struct_h ->h_cp_detail,chr_l_cp_desc))
          {  	
            if(strncmp(p_dl_deal_ipo_struct_h ->h_cp_detail,chr_l_cp_bic,8))
              {      	
              sprintf(p_unmatch_string,"%s\t%-20s\t%-20s\t%-20s\n",p_unmatch_string,"Counterparty Account",chr_l_cp_desc,p_dl_deal_ipo_struct_h ->h_cp_detail);
              }  
          }
    } 

   if(strcmp(p_dl_deal_ipo_struct_h ->h_dlt,chr_l_trdt_a))
       sprintf(p_unmatch_string,"%s\t%-20s\t%-20s\t%-20s\n",p_unmatch_string,"Trade Date",chr_l_trdt_a,p_dl_deal_ipo_struct_h->h_dlt);

   if(strcmp(p_dl_deal_ipo_struct_h ->h_setldt,chr_l_settledt_a))
       sprintf(p_unmatch_string,"%s\t%-20s\t%-20s\t%-20s\n",p_unmatch_string,"Settlement Date",chr_l_settledt_a,p_dl_deal_ipo_struct_h ->h_setldt);

     

	if(strlen(p_unmatch_string) > 0 )
		*p_match = 0;	
	else
		*p_match = 1;

	APL_GOBACK_SUCCESS

      RETURN_SUCCESS :
         CO_ProcMonitor(p_logfile,"Leaving Match Function successfully",l_debug_info_ptr,NULL);
			return(APL_SUCCESS);

      RETURN_FAILURE :
         CO_ProcMonitor(p_logfile,"Leaving Match Function with errors",l_debug_info_ptr,NULL);
         return(APL_FAILURE);	
}




int DL_Proc_MatchIPOSAT(	char *p_string_from_sat,
							char *p_string1_from_smac,
							char *p_string2_from_smac,
							char *p_new_line,
							FILE *p_logfile)
{

	char chr_l_string_from_smac[500] = APL_NULL_STRING;
	strcpy(chr_l_string_from_smac,p_string1_from_smac);
	strcat(chr_l_string_from_smac,p_new_line);
	strcat(chr_l_string_from_smac,p_string2_from_smac);
	strcat(chr_l_string_from_smac,p_new_line);
	if(!strcmp(chr_l_string_from_smac,p_string_from_sat))APL_GOBACK_SUCCESS	
	APL_GOBACK_FAIL
	
	RETURN_SUCCESS :
		fprintf(p_logfile,"note from sat |%s|info from smac |%s|\n",p_string_from_sat,chr_l_string_from_smac);
		CO_ProcMonitor(p_logfile,"Success From DL_Proc_MatchIPOSAT\n",NULL,NULL);
		fflush(p_logfile);
		return(APL_SUCCESS);

	RETURN_FAILURE :
		fprintf(p_logfile,"note from sat |%s|info from smac |%s|\n",p_string_from_sat,chr_l_string_from_smac);
		CO_ProcMonitor(p_logfile,"Failure From DL_Proc_MatchIPOSAT\n",NULL,NULL);
		fflush(p_logfile);
		return(APL_FAILURE);

}


int DL_Prnt_IPOHdr(	FILE *p_file,
						char *p_rept_name)//Changes done for AIX Migration

{
		char chr_l_rept_header[500] = APL_NULL_STRING,chr_l_temp_rept_str[500] = APL_NULL_STRING;
   	int int_l_line_count = 0;
	
		if(!strcmp(p_rept_name,"delete"))
		{
			strcpy(chr_l_rept_header,"\n\n\t\t\t\tIPO Trade Deletion Report\n\t\t\t\t=========================\n\n\n");
			sprintf(chr_l_temp_rept_str,IPO_RPT_DEL_DEAL,IPO_ACCOUNT,IPO_REF);
			strcat(chr_l_rept_header,chr_l_temp_rept_str);
			strcat(chr_l_rept_header,"------------------------------\n");
			int_l_line_count = int_g_del_rept_line++;
		}
		else if(!strcmp(p_rept_name,"create"))
		{
			strcpy(chr_l_rept_header,"\n\n\t\t\t\tIPO Trade Creation Report\n\t\t\t\t=========================\n\n\n");
			sprintf(chr_l_temp_rept_str,IPO_RPT_CRT_DEAL,IPO_ACCOUNT,IPO_REF);
			strcat(chr_l_rept_header,chr_l_temp_rept_str);
			strcat(chr_l_rept_header,"------------------------------\n");
			int_l_line_count = int_g_create_rept_line++;
		}
		else if(!strcmp(p_rept_name,"updtrd"))
		{
			strcpy(chr_l_rept_header,"\n\n\t\t\t\tIPO Trade Updation Report\n\t\t\t\t=========================\n\n\n");
			sprintf(chr_l_temp_rept_str,IPO_RPT_UPD_DEAL,IPO_ACCOUNT,IPO_REF,"Trade Updation Status");
			strcat(chr_l_rept_header,chr_l_temp_rept_str);
			strcat(chr_l_rept_header,"-------------------------------------------------------------\n");
			int_l_line_count = int_g_create_rept_line++;
		}
		else if(!strcmp(p_rept_name,"rejtrd"))
		{
			strcpy(chr_l_rept_header,"\n\n\t\t\t\tIPO Trade Rejection Report\n\t\t\t\t==========================\n\n\n");
			sprintf(chr_l_temp_rept_str,IPO_RPT_REJ_DEAL,IPO_ACCOUNT,IPO_REF,"REAS");
			strcat(chr_l_rept_header,chr_l_temp_rept_str);
			strcat(chr_l_rept_header,"----------------------------------------------------------------------\n");
			int_l_line_count = int_g_rej_rept_line++;
		}
		else if(!strcmp(p_rept_name,"rejsat"))
		{
			strcpy(chr_l_rept_header,"\n\n\t\t\t\tIPO SAT Rejection Report\n\t\t\t\t========================\n\n\n");
			sprintf(chr_l_temp_rept_str,IPO_RPT_REJ_SAT,IPO_ACCOUNT,IPO_REF,IPO_SAT_CODE,IPO_SAT_ACC,IPO_OPER_CODE,"REAS");
			strcat(chr_l_rept_header,chr_l_temp_rept_str);
			strcat(chr_l_rept_header,"----------------------------------------------------------------------------------------------\n");
			int_l_line_count = int_g_rej_sat_rept_line++;
		}
		else if(!strcmp(p_rept_name,"updsat"))
		{
		 	strcpy(chr_l_rept_header,"\n\n\t\t\t\t\t\t\t\t\tIPO SAT Updation Report\n\t\t\t\t\t\t\t\t\t=======================\n\n\n");
			sprintf(chr_l_temp_rept_str,IPO_RPT_UPD_SAT,IPO_ACCOUNT,IPO_REF,IPO_SAT_ACC,IPO_SAT_CODE,"OP CODE","File SAT Account","File SAT Code","File OP Code","REAS");
			strcat(chr_l_rept_header,chr_l_temp_rept_str);
			strcat(chr_l_rept_header,"------------------------------------------------------------------------------------------------");
			strcat(chr_l_rept_header,"------------------------------------------------------------------------------------------------\n");
			int_l_line_count = int_g_upd_sat_rept_line++;
		}			
		else if(!strcmp(p_rept_name,"unmatch"))
		{
			strcpy(chr_l_rept_header,"\n\n\t\tIPO Modify Unmatched Fields\n\t\t=============================\n\n\n");
			sprintf(chr_l_temp_rept_str,"=============================\n%-20s\t\t%-20s\n=============================\n","CLIENT","IDENTIY_NO");
			strcat(chr_l_rept_header,chr_l_temp_rept_str);
			sprintf(chr_l_temp_rept_str,"\n\t%-20s\t%-20s\t%-20s\n\t=====\t\t\t\t\t\t========\t\t\t\t\t===\n","FIELD","ORIGINAL","NEW");
			strcat(chr_l_rept_header,chr_l_temp_rept_str);
			int_l_line_count = int_g_unmatch_rept_line++;
		}

		if(!(int_l_line_count%IPO_REPT_PAGERR_SIZE)) /*Veda -- 10GM */
		{	
			fprintf(p_file,chr_l_rept_header);
	   }	
 return(APL_SUCCESS);//AIX Migration Changes

}
		



int DL_Mod_SATDetMod(   FILE *p_sat_reject_rept_file,
								FILE *p_sat_update_rept_file,
								DL_DEAL_IPO_STRUCT_H *l_dl_deal_ipo_struct_h,
								FILE *p_logfile,
								DEBUG_INFO_STRUCT_H **l_debug_info_ptr,
								INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h)
{
	
   struct sqlca           sqlca;
  	char chr_l_note[261]=APL_NULL_STRING;
  	char chr_l_trade_note1[261]=APL_NULL_STRING;
  	int int_noelem = 0;
	short i_info = 0,i_access_stamp = 0;
   char     chr_l_h_sat_client[13]                 = APL_NULL_STRING;
   char     chr_l_h_sat_code[13]                    = APL_NULL_STRING;
   char     chr_l_h_op_code[12]                    = APL_NULL_STRING;

  	char chr_l_enter[3]=APL_NULL_STRING,chr_l_new_line[2]= APL_NULL_STRING,chr_l_sys_date[APL_DATE_LEN]= APL_NULL_STRING,chr_l_access_stamp1[APL_DATE_LEN] = APL_NULL_STRING,chr_l_access_stamp2[APL_DATE_LEN] = APL_NULL_STRING;
	DL_DEALAUDIT_STRUCT_H *l_dl_dealaudit_struct_hb_a = (DL_DEALAUDIT_STRUCT_H *)NULL;

	SYS_DL_DEAL_STRUCT_H  *l_sys_dl_deal_struct_hm    = (SYS_DL_DEAL_STRUCT_H *)NULL;
	SYS_DL_DEAL_STRUCT_I  *l_sys_dl_deal_struct_ie    = (SYS_DL_DEAL_STRUCT_I *)NULL;


   int      int_l_unmatched_reason = 0;

	EXEC SQL BEGIN DECLARE SECTION;	
		EXEC SQL VAR chr_l_trade_note1 IS STRING; 
		EXEC SQL VAR chr_l_access_stamp1 IS STRING;
		EXEC SQL VAR chr_l_access_stamp2 IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hm->h_dealcd            IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hm->h_info1            IS STRING;
	   EXEC SQL VAR chr_l_sys_date 		IS STRING;	
		EXEC SQL VAR l_dl_deal_ipo_struct_h->h_dl_client	IS STRING;
		EXEC SQL VAR l_dl_deal_ipo_struct_h->h_indentity_no IS STRING; 
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_dl_client         IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_indentity_no           IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_dlt            IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_setldt        IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_ex_arena         IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_instrdate           IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_moneydate         IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_domcpclt_cd         IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_isspotdl       IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_dlfromord      IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_entry       IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_reapired_ind       IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_domcp_custodyclt      IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_countclt        IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_countcltnm      IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_clientof       IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_custinfo        IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_fx_reqd          IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_ispymtlocal      IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_verfied_with         IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_brkrno        IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_fail_cd        IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_failinfo        IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_ispart_       IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_report_at_eom_ind        IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_billdate          IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_locindentity_no        IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_instruct_person       IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_dealcd          IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_instr_code          IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_currencycode         IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_classofdl       IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_origindentity_no       IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_newdt         IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_maker           IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_maker_dt         IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_deal_status    IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_access_stamp    IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_info1           IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_loccode        IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_reginstr_ind        IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_pos_stat     IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_status_reg       IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_confdate          IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_matchindentity_no      IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_markfaildate      IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_candropdate       IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_checker         IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_checker_dt       IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_instrconv_ind       IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_ndsbldate         IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_lrdltype       IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_ndsdate           IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_ublckdate         IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_delrecdate        IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_lastregdate       IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_lr_chkdate        IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_lr_confdate       IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_lr_instrdate        IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_tmpoutdate        IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_tmpretdate        IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_transmitdate      IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_hostdate          IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_lr_ndsbldate      IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_lr_ndsdate        IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_lr_ublckdate      IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_clt_reqdel_flag  IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_mod_hispos_ind    IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_updhispos_date    IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_cash_client    IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_instruct_personnm     IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_clientofcode   IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_inter_med_person       IS STRING;
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_inter_med_personnm     IS STRING; 
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_fxccy     IS STRING; 
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_exp_setl_date     IS STRING; 
   EXEC SQL VAR l_sys_dl_deal_struct_hm->h_misinfo         IS STRING; 
	EXEC SQL END DECLARE SECTION;

	l_sys_dl_deal_struct_hm   = (SYS_DL_DEAL_STRUCT_H *)calloc(1, sizeof(SYS_DL_DEAL_STRUCT_H));
	l_sys_dl_deal_struct_ie   = (SYS_DL_DEAL_STRUCT_I *)calloc(1, sizeof(SYS_DL_DEAL_STRUCT_I));

   memset(chr_l_h_sat_client,APL_NULL_CHAR,13);
   memset(chr_l_h_sat_code,APL_NULL_CHAR,13);
   memset(chr_l_h_op_code,APL_NULL_CHAR,12);
	memset(chr_l_sys_date,APL_NULL_CHAR,APL_DATE_LEN);
	l_sys_dl_deal_struct_ie->i_info1 = 0;
	chr_l_enter[0] = putchar(13);
	chr_l_enter[1] = putchar(10);
	chr_l_enter[2] = '\0';
	chr_l_new_line[0] = putchar(10);
	chr_l_new_line[1] = '\0';
  	IPO_IF_DEBUG
	{
		printf("\n**************Account|%s|Ref|%s|****************",l_dl_deal_ipo_struct_h->h_dl_client,l_dl_deal_ipo_struct_h->h_indentity_no);
	}
	
	l_dl_dealaudit_struct_hb_a = (DL_DEALAUDIT_STRUCT_H *)calloc(1,sizeof(DL_DEALAUDIT_STRUCT_H));
	memset(l_dl_dealaudit_struct_hb_a,NULL,sizeof(DL_DEALAUDIT_STRUCT_H));

   memset(l_sys_dl_deal_struct_hm, NULL, sizeof(SYS_DL_DEAL_STRUCT_H));
   memset(l_sys_dl_deal_struct_ie, NULL, sizeof(SYS_DL_DEAL_STRUCT_I));

	fprintf(p_logfile,"\nNow in Modify SAT .. Acc=|%s|, refno=|%s|\n",l_dl_deal_ipo_struct_h->h_dl_client,l_dl_deal_ipo_struct_h->h_indentity_no);
	fflush(p_logfile); 
   EXEC SQL SELECT dl_deal.* INTO :l_sys_dl_deal_struct_hm:l_sys_dl_deal_struct_ie
   FROM DL_DEAL  WHERE CLIENT=:l_dl_deal_ipo_struct_h->h_dl_client and IDENTIY_NO=:l_dl_deal_ipo_struct_h->h_indentity_no;
	fflush(p_logfile); 

   IS_ANY_ORA_ERROR;
	fprintf(p_logfile,"\nNow in Modify SAT .. Acc=|%s|, refno=|%s|\n",l_dl_deal_ipo_struct_h->h_dl_client,l_dl_deal_ipo_struct_h->h_indentity_no);
	fflush(p_logfile); 
   sqlca.sqlcode=0;
	
   int_l_unmatched_reason = 0;
	fprintf(p_logfile,"\nNow comparing SAT details for Account:|%s| Refno:|%s|",l_dl_deal_ipo_struct_h->h_dl_client,l_dl_deal_ipo_struct_h->h_indentity_no);
	fflush(p_logfile); 
   if (APL_FAILURE == DL_Rtv_IPOSATDet( l_sys_dl_deal_struct_hm, l_sys_dl_deal_struct_ie,p_logfile, chr_l_h_sat_client, chr_l_h_sat_code, chr_l_h_op_code,   l_debug_info_ptr))
   {
      CO_ProcMonitor(p_logfile, "Failure from CDBGetSATOPDetails", NULL, NULL);
      APL_GOBACK_FAIL
   }
	fprintf(p_logfile,"\nSAT details from Database SAT Account:|%s| SAT Code:|%s| OP Code: |%s|\n",chr_l_h_sat_client,chr_l_h_sat_code,chr_l_h_op_code);
	fflush(p_logfile); 
	fprintf(p_logfile,"\nSAT details from File SAT Account:|%s| SAT Code:|%s| OP Code: |%s|\n",l_dl_deal_ipo_struct_h->h_satclt,l_dl_deal_ipo_struct_h->h_sat_cd,l_dl_deal_ipo_struct_h->h_oper_cd); /*Veda -- 10GM */
	fflush(p_logfile); 

	if ( (!strcmp(chr_l_h_sat_client,l_dl_deal_ipo_struct_h->h_satclt)) && 
	     (!strcmp(chr_l_h_sat_code,l_dl_deal_ipo_struct_h->h_sat_cd)) &&
	     (!strcmp(chr_l_h_op_code,l_dl_deal_ipo_struct_h->h_oper_cd))
		)/*Veda -- 10GM */
	{
		
		fprintf(p_logfile,"\nSAT details are matching .. Hence no Database updates done \n");
		fprintf(p_sat_update_rept_file,IPO_RPT_UPD_SAT,l_dl_deal_ipo_struct_h->h_dl_client,l_dl_deal_ipo_struct_h->h_indentity_no,chr_l_h_sat_client,chr_l_h_sat_code,chr_l_h_op_code,l_dl_deal_ipo_struct_h ->h_satclt,l_dl_deal_ipo_struct_h ->h_sat_cd,l_dl_deal_ipo_struct_h ->h_oper_cd,"Matched.");	 /*Veda -- 10GM */
	fflush(p_logfile); 
	}
	else
	{
		
		fprintf(p_logfile,"\nSAT details are not matching .. Hence updating Database ... \n");
		fprintf(p_logfile,"\nSAT details before string updates Note:|%s| \n",l_sys_dl_deal_struct_hm->h_info1);
	fflush(p_logfile); 
   	if (APL_FAILURE == DL_Mod_IPOSATDet( l_sys_dl_deal_struct_hm->h_info1, l_dl_deal_ipo_struct_h->h_satclt,l_dl_deal_ipo_struct_h->h_sat_cd,l_dl_deal_ipo_struct_h->h_oper_cd,p_logfile,   l_debug_info_ptr)) /*Veda -- 10GM */
   	{
      	CO_ProcMonitor(p_logfile, "Failure from CDBUpdSATOPDetails", NULL, NULL);
      	APL_GOBACK_FAIL
   	}
		fprintf(p_logfile,"\nSAT details after string updates Note:|%s| \n",l_sys_dl_deal_struct_hm->h_info1);

		if(APL_FAILURE == CO_RtvSysDtTime(chr_l_sys_date,l_debug_info_ptr))
		{
			CO_ProcMonitor(p_logfile,"Failed to get chr_date and time :SAT Modify\n",NULL,NULL);
			APL_GOBACK_FAIL
		}
		sqlca.sqlcode=0;
   	EXEC SQL UPDATE DL_DEAL
            	SET   INFO1 = :l_sys_dl_deal_struct_hm->h_info1,
							ACCESS_STAMP = :chr_l_sys_date  
            	WHERE client=LTRIM(RTRIM(:l_dl_deal_ipo_struct_h->h_dl_client))
            	AND IDENTIY_NO= LTRIM(RTRIM(:l_dl_deal_ipo_struct_h->h_indentity_no));
 		IS_ANY_ORA_ERROR 
		
		if (APL_ZERO_RESULT_SET|| (sqlca.sqlcode==100))
		{
   	DL_Prnt_IPOHdr(p_sat_update_rept_file,"updsat");
		fprintf(p_sat_update_rept_file,IPO_RPT_UPD_SAT,l_dl_deal_ipo_struct_h->h_dl_client,l_dl_deal_ipo_struct_h->h_indentity_no,chr_l_h_sat_client,chr_l_h_sat_code,chr_l_h_op_code,l_dl_deal_ipo_struct_h ->h_satclt,l_dl_deal_ipo_struct_h ->h_sat_cd,l_dl_deal_ipo_struct_h ->h_oper_cd,"Trade Not Found.");	 /*Veda -- 10GM */
		}
		else
		{
		sqlca.sqlcode=0;
 		strcpy(l_dl_dealaudit_struct_hb_a->h_dl_client,l_dl_deal_ipo_struct_h->h_dl_client);
		strcpy(l_dl_dealaudit_struct_hb_a->h_indentity_no,l_dl_deal_ipo_struct_h->h_indentity_no);
		strcpy(l_dl_dealaudit_struct_hb_a->h_trail_for,"T");
		strcpy(l_dl_dealaudit_struct_hb_a->h_processdetail,"SAT UPDATION - IPO");
		strcpy(l_dl_dealaudit_struct_hb_a->h_proc_usr,"SYSTEM");
		strcpy(l_dl_dealaudit_struct_hb_a->h_subprocess,"SAT");
		strcpy(l_dl_dealaudit_struct_hb_a->h_fail_cd,APL_NULL_STRING);
		l_dl_dealaudit_struct_hb_a->h_qty = 0;
		l_dl_dealaudit_struct_hb_a->h_subfailreas_cd = 0;
		strcpy(l_dl_dealaudit_struct_hb_a->h_dlfromord,APL_NO_IND);
		CO_FreeErrLst(l_debug_info_ptr);

		if(APL_FAILURE ==  CR_Mod_CLHAudTrail( 	l_dl_dealaudit_struct_hb_a, 
														l_debug_info_ptr) ) 
   	{
   	printf("Successfully Exiting the program DL_Mod_SATDetMod Inside fail \n");
      	CO_ProcMonitor(p_logfile,"Failed in CR_Mod_CLHAudTrail\n",NULL,NULL);
			APL_GOBACK_FAIL;
   	}	  
			
   	DL_Prnt_IPOHdr(p_sat_update_rept_file,"updsat");
fprintf(p_sat_update_rept_file,"%-12s\t%-20s\t%-12s\t%-12s\t%-12s\t%-12s\t%-12s\t%-12s\t%-30s\n",l_dl_deal_ipo_struct_h->h_dl_client,l_dl_deal_ipo_struct_h->h_indentity_no,chr_l_h_sat_client,chr_l_h_sat_code,chr_l_h_op_code,l_dl_deal_ipo_struct_h ->h_satclt,l_dl_deal_ipo_struct_h ->h_sat_cd,l_dl_deal_ipo_struct_h ->h_oper_cd,"Not matched."); /*Veda -- 10GM */
		}
	fflush(p_logfile); 
	}
   APL_GOBACK_SUCCESS

   RETURN_SUCCESS:
          fprintf(p_logfile,"Successfully Exiting the program DL_Mod_SATDetMod\n");
			 fflush(p_logfile);
			 return(APL_SUCCESS);
     
   RETURN_FAILURE:
			fprintf(p_logfile,"UnSuccessfully Exiting the program DL_Mod_SATDetMod\n");
			fflush(p_logfile);
			return(APL_FAILURE);                                     

}

int DL_Rtv_IPOSATDet( SYS_DL_DEAL_STRUCT_H *l_sys_dl_deal_struct_ho, SYS_DL_DEAL_STRUCT_I *l_sys_dl_deal_struct_iq,FILE *p_logfile,
							char *p_sat_client_outer, char *p_sat_code_outer, char *p_op_code_outer, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   struct sqlca           sqlca;
   char     **temp;

   int    int_num=0;
   short  i_sat_account_outer = 0;
   short  i_sat_code_outer = 0;
   short  i_op_code_outer = 0;
	char	chr_l_sat_line4_outer[261]=APL_NULL_STRING;
	char	chr_l_remstring[261]=APL_NULL_STRING;
	char	chr_l_remstring1[261]=APL_NULL_STRING;
	char  chr_l_sat_client_outer[13]                 = APL_NULL_STRING;
	char  chr_l_sat_code_outer[13]                 = APL_NULL_STRING;
	char  chr_l_op_code_outer[12]                 = APL_NULL_STRING;

	EXEC SQL VAR chr_l_sat_client_outer IS STRING;
	EXEC SQL VAR l_sys_dl_deal_struct_ho->h_dl_client IS STRING;

	memset(chr_l_sat_line4_outer,APL_NULL_CHAR,261);
	memset(chr_l_sat_client_outer,APL_NULL_CHAR,13);
	memset(chr_l_sat_code_outer,APL_NULL_CHAR,13);
	memset(chr_l_op_code_outer,APL_NULL_CHAR,12);
	memset(chr_l_remstring,APL_NULL_CHAR,261);
	memset(chr_l_remstring1,APL_NULL_CHAR,261);

	
	
	if (strlen(l_sys_dl_deal_struct_ho->h_info1) == 0) 
	{
		fprintf(p_logfile,"\nInside processtion.. info is null |%s|,|%d|",l_sys_dl_deal_struct_ho->h_info1,l_sys_dl_deal_struct_iq->i_info1);
		strcpy(chr_l_sat_client_outer,APL_NULL_STRING);
		strcpy(chr_l_sat_code_outer,APL_NULL_STRING);
		strcpy(chr_l_op_code_outer,APL_NULL_STRING);
	}
	else
	{
		fprintf(p_logfile,"\nInside processtion.. info is not null |%s|,|%d|",l_sys_dl_deal_struct_ho->h_info1,l_sys_dl_deal_struct_iq->i_info1);
		int_num = 0;
		strcat(l_sys_dl_deal_struct_ho->h_info1,"\n");
		if (APL_FAILURE == CO_SplitStr(	l_sys_dl_deal_struct_ho->h_info1, '\n', &int_num, &temp ))
		{
			CO_ProcMonitor(p_logfile, "Failure from StrSplitFn", NULL, NULL);
			APL_GOBACK_FAIL;
		}
		if (int_num>3)
		{
			strcpy(chr_l_sat_line4_outer,temp[3]);
		}
		else
		{
			strcpy(chr_l_sat_line4_outer,APL_NULL_STRING);
		}
		if (strlen(chr_l_sat_line4_outer))
		{
			fprintf(p_logfile,"\nInside processtion.. h_line 4 is not null |%s|,|%d|",l_sys_dl_deal_struct_ho->h_info1,l_sys_dl_deal_struct_iq->i_info1);
			int_num = 0;
			temp = (char **)NULL;
			strcat(chr_l_sat_line4_outer,"_");
			if (APL_FAILURE == CO_SplitStr(	chr_l_sat_line4_outer, '_', &int_num, &temp ))
			{
				CO_ProcMonitor(p_logfile, "Failure from StrSplitFn", NULL, NULL);
				APL_GOBACK_FAIL;
			}
			strcpy(chr_l_sat_client_outer,temp[0]);
			strcpy(chr_l_remstring,temp[1]);

			fprintf(p_logfile,"\nInside processtion.. After fisrt fetch sat clt=|%s| sat h_code=|%s| op h_code=|%s|",chr_l_sat_client_outer,chr_l_sat_code_outer,chr_l_op_code_outer);
			int_num = 0;
			temp = (char **)NULL;
			strcat(chr_l_remstring,"+");
			if (APL_FAILURE == CO_SplitStr(	chr_l_remstring, '+', &int_num, &temp ))
			{
				CO_ProcMonitor(p_logfile, "Failure from StrSplitFn", NULL, NULL);
				APL_GOBACK_FAIL;
			}
			strcpy(chr_l_sat_code_outer,temp[0]);
			strcpy(chr_l_remstring1,temp[1]);

			fprintf(p_logfile,"\nInside processtion.. After second fetch sat clt=|%s| sat h_code=|%s| op h_code=|%s|",chr_l_sat_client_outer,chr_l_sat_code_outer,chr_l_op_code_outer);
			int_num = 0;
			temp = (char **)NULL;
			strcat(chr_l_remstring1,"\n");
			if (APL_FAILURE == CO_SplitStr(	chr_l_remstring1, '\n', &int_num, &temp ))
			{
				CO_ProcMonitor(p_logfile, "Failure from StrSplitFn", NULL, NULL);
				APL_GOBACK_FAIL;
			}
			strcpy(chr_l_op_code_outer,temp[0]);
			fprintf(p_logfile,"\nInside processtion.. After third fetch sat clt=|%s| sat h_code=|%s| op h_code=|%s|",chr_l_sat_client_outer,chr_l_sat_code_outer,chr_l_op_code_outer);

			
		}
		else
		{
			fprintf(p_logfile,"\nInside processtion.. h_line 4 is null |%s|,|%d|",l_sys_dl_deal_struct_ho->h_info1,l_sys_dl_deal_struct_iq->i_info1);
			strcpy(chr_l_sat_client_outer,APL_NULL_STRING);
			strcpy(chr_l_sat_code_outer,APL_NULL_STRING);
			strcpy(chr_l_op_code_outer,APL_NULL_STRING);
		}
	}

	strcpy(p_sat_client_outer,chr_l_sat_client_outer);
	strcpy(p_sat_code_outer,chr_l_sat_code_outer);
	strcpy(p_op_code_outer,chr_l_op_code_outer);


	RETURN_SUCCESS : return(APL_SUCCESS);
	RETURN_FAILURE : return(APL_FAILURE);
}


int DL_Mod_IPOSATDet( char *p_ctrade_note, char *p_sat_client_outer, char *p_sat_code_outer, char *p_op_code_outer, FILE *p_logfile, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   struct sqlca           sqlca;
   char     **temp = NULL;
	char	chr_l_final_note[261]=APL_NULL_STRING;
	char	chr_l_remain_str[261]=APL_NULL_STRING;
	char chr_l_enter[3]=APL_NULL_STRING;

	int i =0;

	int int_num_of_lines = 0;

	memset(chr_l_final_note,APL_NULL_CHAR,261);
	memset(chr_l_remain_str,APL_NULL_CHAR,261);

	int_num_of_lines = 0;

	chr_l_enter[0] = putchar(13);
	chr_l_enter[1] = putchar(10);
	chr_l_enter[2] = '\0';
	if (strlen(p_ctrade_note))
	{
		if ((p_ctrade_note[strlen(p_ctrade_note)-1] != chr_l_enter[1])
		&& (p_ctrade_note[strlen(p_ctrade_note)-2] != chr_l_enter[0]))
		{
		}
		else
		{
			p_ctrade_note[strlen(p_ctrade_note)-1] = chr_l_enter[0];
			p_ctrade_note[strlen(p_ctrade_note)] = chr_l_enter[1];
			p_ctrade_note[strlen(p_ctrade_note)+1] = '\0';
		}
		if (APL_FAILURE == CO_SplitStr(	p_ctrade_note, chr_l_enter[0], &int_num_of_lines, &temp ))
		{
			CO_ProcMonitor(p_logfile, "Failure from StrSplitFn", NULL, NULL);
			APL_GOBACK_FAIL;
		}
	}
	if (int_num_of_lines == 0)
	{
		if((strcmp(p_sat_client_outer,APL_NULL_STRING)==0)
   	&& (strcmp(p_sat_code_outer,APL_NULL_STRING)==0)
   	&& (strcmp(p_op_code_outer,APL_NULL_STRING)==0))
   	{
			strcpy(chr_l_final_note,APL_NULL_STRING);	
		}
		else
		{
			strcpy(chr_l_final_note,chr_l_enter);
			strcat(chr_l_final_note,chr_l_enter);
			strcat(chr_l_final_note,"A/AIPO");
			strcat(chr_l_final_note,chr_l_enter);
			strcat(chr_l_final_note,p_sat_client_outer);
			strcat(chr_l_final_note,"_");
			strcat(chr_l_final_note,p_sat_code_outer);
			strcat(chr_l_final_note,"+");
			strcat(chr_l_final_note,p_op_code_outer);
	
		}
	}
	else if (int_num_of_lines == 1)
	{
		strcpy(chr_l_final_note,APL_NULL_STRING);
		strcat(chr_l_final_note,temp[0]);
		
      if((strcmp(p_sat_client_outer,APL_NULL_STRING)==0)
      && (strcmp(p_sat_code_outer,APL_NULL_STRING)==0)
      && (strcmp(p_op_code_outer,APL_NULL_STRING)==0))
      {
			strcat(chr_l_final_note,APL_NULL_STRING);
		}
		else
		{
			strcat(chr_l_final_note,chr_l_enter);
			strcat(chr_l_final_note,chr_l_enter);
			strcat(chr_l_final_note,"A/AIPO");
			strcat(chr_l_final_note,chr_l_enter);
			strcat(chr_l_final_note,p_sat_client_outer);
			strcat(chr_l_final_note,"_");
			strcat(chr_l_final_note,p_sat_code_outer);
			strcat(chr_l_final_note,"+");
			strcat(chr_l_final_note,p_op_code_outer);
		
		}
	}
	else if (int_num_of_lines == 2)
	{
		strcpy(chr_l_final_note,APL_NULL_STRING);
		strcat(chr_l_final_note,temp[0]);
		strcat(chr_l_final_note,chr_l_enter);
	
		strcat(chr_l_final_note,temp[1]+1);
		if((strcmp(p_sat_client_outer,APL_NULL_STRING)==0)
      && (strcmp(p_sat_code_outer,APL_NULL_STRING)==0)
      && (strcmp(p_op_code_outer,APL_NULL_STRING)==0))
      {
			strcat(chr_l_final_note,APL_NULL_STRING);
		}
		else
		{
			strcat(chr_l_final_note,chr_l_enter); 
			strcat(chr_l_final_note,"A/AIPO");
			strcat(chr_l_final_note,chr_l_enter);
			strcat(chr_l_final_note,p_sat_client_outer);
			strcat(chr_l_final_note,"_");
			strcat(chr_l_final_note,p_sat_code_outer);
			strcat(chr_l_final_note,"+");
			strcat(chr_l_final_note,p_op_code_outer);
	
		}
	}
	else if (int_num_of_lines == 3)
	{
		strcpy(chr_l_final_note,APL_NULL_STRING);
		strcat(chr_l_final_note,temp[0]);
		strcat(chr_l_final_note,chr_l_enter);
		strcat(chr_l_final_note,temp[1]+1);
	
      if((strcmp(p_sat_client_outer,APL_NULL_STRING)==0)
      && (strcmp(p_sat_code_outer,APL_NULL_STRING)==0)
      && (strcmp(p_op_code_outer,APL_NULL_STRING)==0))
      {
         strcat(chr_l_final_note,APL_NULL_STRING);
      }
      else
      {
			strcat(chr_l_final_note,chr_l_enter); 
			strcat(chr_l_final_note,"A/AIPO");
			strcat(chr_l_final_note,chr_l_enter); 
			strcat(chr_l_final_note,p_sat_client_outer);
			strcat(chr_l_final_note,"_");
			strcat(chr_l_final_note,p_sat_code_outer);
			strcat(chr_l_final_note,"+");
			strcat(chr_l_final_note,p_op_code_outer);
		
		}
	}
	else if (int_num_of_lines == 4)
	{
		strcpy(chr_l_final_note,APL_NULL_STRING);
		strcat(chr_l_final_note,temp[0]);
		strcat(chr_l_final_note,chr_l_enter);
		strcat(chr_l_final_note,temp[1]+1);
		strcat(chr_l_final_note,chr_l_enter);
      if((strcmp(p_sat_client_outer,APL_NULL_STRING)==0)
      && (strcmp(p_sat_code_outer,APL_NULL_STRING)==0)
      && (strcmp(p_op_code_outer,APL_NULL_STRING)==0))
      {
         strcat(chr_l_final_note,APL_NULL_STRING);
      }
      else
      {
			strcat(chr_l_final_note,"A/AIPO");
			strcat(chr_l_final_note,chr_l_enter);
			strcat(chr_l_final_note,p_sat_client_outer);
			strcat(chr_l_final_note,"_");
			strcat(chr_l_final_note,p_sat_code_outer);
			strcat(chr_l_final_note,"+");
			strcat(chr_l_final_note,p_op_code_outer);

		}
	}
	else if (int_num_of_lines > 4)
	{
		strcpy(chr_l_final_note,APL_NULL_STRING);
		strcat(chr_l_final_note,temp[0]);
		strcat(chr_l_final_note,chr_l_enter);
		strcat(chr_l_final_note,temp[1]+1);
		strcat(chr_l_final_note,chr_l_enter);
	   if((strcmp(p_sat_client_outer,APL_NULL_STRING)==0)
      && (strcmp(p_sat_code_outer,APL_NULL_STRING)==0)
      && (strcmp(p_op_code_outer,APL_NULL_STRING)==0))
      {
			strcat(chr_l_final_note,chr_l_enter);
			strcat(chr_l_final_note,chr_l_enter);
		}
		else
		{
			strcat(chr_l_final_note,"A/AIPO");
			strcat(chr_l_final_note,chr_l_enter);
			strcat(chr_l_final_note,p_sat_client_outer);
			strcat(chr_l_final_note,"_");
			strcat(chr_l_final_note,p_sat_code_outer);
			strcat(chr_l_final_note,"+");
			strcat(chr_l_final_note,p_op_code_outer);
			strcat(chr_l_final_note,chr_l_enter);
		}
		for (i=4 ; i < int_num_of_lines ; ++i )
		{
			strcat(chr_l_final_note,temp[i]+1);
			strcat(chr_l_final_note,chr_l_enter);
		}
	}



	 strcpy(p_ctrade_note,chr_l_final_note);

	APL_GOBACK_SUCCESS
	
	RETURN_SUCCESS : return(APL_SUCCESS);
	RETURN_FAILURE : return(APL_FAILURE);
} 
