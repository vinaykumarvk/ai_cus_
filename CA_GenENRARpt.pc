


   
   
   
   
   
   
   
   
   
   
   
   




#include <CA_Common.h>

EXEC SQL INCLUDE sqlca;

#define FILENAME_LEN_A			80
 /* OPT:AIX */
 #ifdef BUFFER_LEN
 #undef BUFFER_LEN
 #endif
#define BUFFER_LEN				100
#define QUANTITY_LEN				27
#define CURRENCY_LEN				20

//main(int argc,char **argv)
int main(int argc,char **argv)//Changes done for AIX Migration
{
	DEBUG_INFO_STRUCT_H			*l_debug_info_ptr = NULL;
	FILE						*l_ptr_ini_file = NULL;
	FILE						*l_ptr_log_file = NULL;
	INTL_ENV_DATA_STRUCT_H	l_intl_envdatastruct_h;
	char						chr_l_inifile[FILENAME_LEN_A]   = APL_NULL_STRING;
	char						chr_uname[APL_USERID_LEN]   = APL_NULL_STRING;
	char						chr_passwd[APL_PASSWD_LEN]  = APL_NULL_STRING;
	char						chr_custody_id_b[APL_USERID_LEN]  = APL_NULL_STRING;
	int						int_l_flg = 0;
	int						int_retval = 0;
	struct sqlca			sqlca;

	memset(&l_intl_envdatastruct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H));
	
	

	strcpy(l_intl_envdatastruct_h.usr, argv[3]);
	strcpy(l_intl_envdatastruct_h.h_mode, argv[4]);
	strcpy(l_intl_envdatastruct_h.processtion, argv[5]);
	strcpy(l_intl_envdatastruct_h.auth_req, argv[6]);
	strcpy(l_intl_envdatastruct_h.subprocess, argv[7]);
	strcpy(l_intl_envdatastruct_h.h_process, argv[8]);
	
	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

	if ((l_ptr_ini_file = fopen(chr_l_inifile,"r")) == NULL)
		exit(-1);

	APL_FETCH_DB_LOGIN_DETAILS(l_ptr_ini_file,chr_custody_id_b,chr_uname,chr_passwd,APL_OUT_FILE,&l_debug_info_ptr)
	
	
	
	if (CA_DatabaseConnect(chr_uname,chr_passwd,&l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL

	

	int_retval = CO_Rtv_RptFileName("2R",APL_LOGFILE_DESC,100,argv[5],argv,&l_ptr_log_file,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL
	}

	

	EXEC SQL COMMIT WORK;
	
	if (sqlca.sqlcode != 0)
	{
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL
	}

	CO_ProcMonitor(l_ptr_log_file,"ENRA Report",NULL,NULL);
	CO_ProcMonitor(l_ptr_log_file,"____________\n",NULL,NULL);
	
	CO_ProcMonitor(l_ptr_log_file,"Work Committed after chr_logfile creation \n",NULL,&l_intl_envdatastruct_h);

	

	if (CO_RtvSysParams(&l_debug_info_ptr) != APL_SUCCESS)
	{
		CO_ProcMonitor(l_ptr_log_file,"Unable to get system parameters - Rollback done \n",NULL,&l_intl_envdatastruct_h);
		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);
		
		EXEC SQL ROLLBACK WORK RELEASE;
		
		APL_GOBACK_FAIL	
	}

	
	 
	int_retval = CA_LockRec(argv,l_ptr_log_file,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		CO_ProcMonitor(l_ptr_log_file,"Unable to lock BATCH_IN_PROC record - Rollback done \n",NULL,&l_intl_envdatastruct_h);
		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		EXEC SQL ROLLBACK WORK RELEASE;
		
		APL_GOBACK_FAIL
	}

	

	int_retval = CA_Rpt_ENRA(argv,l_ptr_log_file,&l_intl_envdatastruct_h,&l_debug_info_ptr);
	if (int_retval != APL_SUCCESS)
	{
		int_l_flg = 1;

	   CA_Proc_Final(argv,l_ptr_log_file,&l_debug_info_ptr,int_l_flg);
		
		if (CO_ChkErr(l_debug_info_ptr) == APL_SUCCESS)
		{
			
			CO_ProcMonitor(l_ptr_log_file,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_envdatastruct_h);
			CO_FreeErrLst(&l_debug_info_ptr);
			
		}

		CO_ProcMonitor(l_ptr_log_file,"FAILURE from ENRA report generation program \n",NULL,&l_intl_envdatastruct_h);

		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		APL_GOBACK_FAIL	
	}
	else
	{
		int_l_flg = 0;

		CA_Proc_Final(argv,l_ptr_log_file,&l_debug_info_ptr,int_l_flg);

		if (CO_ChkErr(l_debug_info_ptr) == APL_SUCCESS)
		{
			
			CO_ProcMonitor(l_ptr_log_file,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_envdatastruct_h);
			CO_FreeErrLst(&l_debug_info_ptr);

		}

		CO_ProcMonitor(l_ptr_log_file,"SUCCESS from ENRA report generation program \n",NULL,&l_intl_envdatastruct_h);

		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		APL_GOBACK_SUCCESS
	}

	RETURN_SUCCESS	: 
	{
		fclose(l_ptr_ini_file);
	   return(0);
	}

	RETURN_FAILURE	: 
	{
		fclose(l_ptr_ini_file);
  		return(-1);	
	}
}


 
 int CA_Rpt_ENRA(char **argv,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca			sqlca;
	char						**temp = NULL;
	int						int_num = 0;
	char						chr_l_gen_regen_flg[APL_FLAG_LENGTH] = APL_NULL_STRING;
	CA_CAEVENT_STRUCT_H    l_ca_caevent_struct_hb;
	CA_CAEVENT_STRUCT_I		l_ca_caevent_struct_ib;
	CA_CAENTITLEMENT_STRUCT_H   l_ca_caentitlement_struct_hb;
	CA_CAENTITLEMENT_STRUCT_I	l_ca_caentitlement_struct_i;
	int						int_l_cond = 0;
	int						int_l_enra_lapse_1;
	int						int_l_enra_lapse_2;
	int						int_l_enra_lapse_3;
	char						chr_l_typeofinstr[4] = APL_NULL_STRING;
	int						int_retval;
	FILE						*l_ptr_first_ENRA_rpt_file = NULL;
	FILE						*l_ptr_second_ENRA_rpt_file = NULL;
	char						chr_l_sys_date_time[APL_DATE_LEN] = APL_NULL_STRING;
	char						chr_l_row_id_event_rec[APL_ROWID_LEN];
	char						chr_l_row_id_entitl_rec[APL_ROWID_LEN];
	int						int_l_sqlcode;
	int						int_l_flg = 0;
	char						chr_l_enra_2_rept = 'N';
	int						int_l_count = 0;

	EXEC SQL VAR l_ca_caevent_struct_hb.h_corp_id IS STRING;
	EXEC SQL VAR l_ca_caevent_struct_hb.h_ex_date IS STRING;
	EXEC SQL VAR l_ca_caevent_struct_hb.h_decl_date IS STRING;
	EXEC SQL VAR l_ca_caevent_struct_hb.h_rec_date IS STRING;
	EXEC SQL VAR l_ca_caevent_struct_hb.h_pymt_dt IS STRING;
	EXEC SQL VAR l_ca_caevent_struct_hb.h_nrepdate1 IS STRING;
	EXEC SQL VAR l_ca_caentitlement_struct_hb.h_nrepdate2 IS STRING;
	EXEC SQL VAR l_ca_caentitlement_struct_hb.h_nrepdate3 IS STRING;
	EXEC SQL VAR chr_l_typeofinstr IS STRING;
	EXEC SQL VAR l_ca_caevent_struct_hb.h_instr_code IS STRING;
	EXEC SQL VAR l_ca_caevent_struct_hb.h_evt_class IS STRING;
	EXEC SQL VAR l_ca_caentitlement_struct_hb.h_dl_client IS STRING;
	EXEC SQL VAR l_ca_caentitlement_struct_hb.h_entitl_ccy IS STRING;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CA_Rpt_ENRA \n",NULL,p_intl_env_data_struct_h_d);

	sqlca.sqlcode = 0;

  

	if (CO_SplitStr(argv[9],'|',&int_num,&temp) != APL_SUCCESS)
		return(APL_FAILURE);

	strcpy(chr_l_gen_regen_flg,temp[0]);

	if (strlen(chr_l_gen_regen_flg) == 0)
		APL_DATA_MISSING("GEN/REGEN FLG",APL_NULL_STRING,APL_NULL_STRING)

	if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
		return(APL_FAILURE);

	
	
	int_retval = CO_Rtv_RptFileName("EN","ENRA Rep 1",80,p_intl_env_data_struct_h_d->processtion,argv,&l_ptr_first_ENRA_rpt_file,l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
		return(APL_FAILURE);

	

	int_retval = CA_WriteENRARptHdr(l_ptr_first_ENRA_rpt_file,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
		return(APL_FAILURE);

	sleep(2);

	
	
	int_retval = CO_Rtv_RptFileName("EN","ENRA Rep 2",80,p_intl_env_data_struct_h_d->processtion,argv,&l_ptr_second_ENRA_rpt_file,l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
		return(APL_FAILURE);

	

	int_retval = CA_WriteENRARptHdr(l_ptr_second_ENRA_rpt_file,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
		return(APL_FAILURE);

	if (CO_RtvSysDtTime(chr_l_sys_date_time, l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL

	EXEC SQL DECLARE EvntRecs CURSOR FOR
		SELECT CAEVENT.*,CAEVENT.ROWID FROM CAEVENT
		WHERE status IN ('RP','PP') /*Smita - Changed Col NAme - HDFCCA_BaseVer*/
		FOR UPDATE OF access_stamp;

	EXEC SQL OPEN EvntRecs;

	IS_ANY_ORA_ERROR

	for(;;)
	{
		EXEC SQL FETCH EvntRecs INTO :l_ca_caevent_struct_hb:l_ca_caevent_struct_ib,:chr_l_row_id_event_rec;

		IS_ANY_ORA_ERROR

		if (APL_ZERO_RESULT_SET)
			break;

		if (l_ca_caevent_struct_ib.i_ex_date == -1)
			continue;

		l_ca_caentitlement_struct_i.i_nrepdate2 = -1;
		l_ca_caentitlement_struct_i.i_nrepdate3 = -1;

		int_l_flg = 1;

		EXEC SQL DECLARE EntitleRecs CURSOR FOR
			SELECT CAENTITLEMENT.*,CAENTITLEMENT.ROWID FROM CAENTITLEMENT
			WHERE corp_id = :l_ca_caevent_struct_hb.h_corp_id
			AND status IN ('RP','PP')
			FOR UPDATE OF access_stamp;
	
		EXEC SQL OPEN EntitleRecs;
		
		IS_ANY_ORA_ERROR
			
		for(;;)
		{
			EXEC SQL FETCH EntitleRecs INTO :l_ca_caentitlement_struct_hb:l_ca_caentitlement_struct_i,:chr_l_row_id_entitl_rec;
			IS_ANY_ORA_ERROR

			int_l_sqlcode = sqlca.sqlcode;
			
			if (sqlca.sqlcode == 0)
				int_l_count = int_l_count + 1;

			if ((int_l_count > 0) && (sqlca.sqlcode == 1403))
				break;

			EXEC SQL SELECT INSTR_TYPE
			INTO :chr_l_typeofinstr
			FROM MT_INSTRUMENT
			WHERE instr_code = :l_ca_caevent_struct_hb.h_instr_code;
			
			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
			
			EXEC SQL SELECT ENRA_LAPSE_A,ENRA_LAPSE_B,ENRA_LAPSE_C
			INTO :int_l_enra_lapse_1,:int_l_enra_lapse_2,:int_l_enra_lapse_3
			FROM CASECEVENT
			WHERE CA_EVENT = :l_ca_caevent_struct_hb.h_evt_class
			AND INSTR_TYPE = :chr_l_typeofinstr;

			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
			
			if (l_ca_caevent_struct_ib.i_nrepdate1 == -1)
				strcpy(l_ca_caevent_struct_hb.h_nrepdate1,APL_NULL_STRING);
			if (l_ca_caentitlement_struct_i.i_nrepdate2 == -1)
				strcpy(l_ca_caentitlement_struct_hb.h_nrepdate2,APL_NULL_STRING);
			if (l_ca_caentitlement_struct_i.i_nrepdate3 == -1)
				strcpy(l_ca_caentitlement_struct_hb.h_nrepdate3,APL_NULL_STRING);
				
			int_retval = CA_ChkCondENRARpt(l_ca_caevent_struct_hb.h_ex_date,int_l_enra_lapse_1,int_l_enra_lapse_2,int_l_enra_lapse_3,l_ca_caevent_struct_hb.h_nrepdate1,l_ca_caentitlement_struct_hb.h_nrepdate2,l_ca_caentitlement_struct_hb.h_nrepdate3,&int_l_cond,chr_l_gen_regen_flg,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);

			if (int_retval != APL_SUCCESS)
				APL_GOBACK_FAIL
	
			if (strcmp(chr_l_gen_regen_flg,"G") == 0)
			{
				if (int_l_cond == 1)
				{
					int_retval = CA_WriteENRAEventRptHdr(l_ptr_first_ENRA_rpt_file,l_ca_caevent_struct_hb,1,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);

					if (int_retval != APL_SUCCESS)
						APL_GOBACK_FAIL

					int_retval = CA_WriteFirstENRARptDet(l_ptr_first_ENRA_rpt_file,l_ca_caevent_struct_hb,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);

					if (int_retval != APL_SUCCESS)
						APL_GOBACK_FAIL

					EXEC SQL UPDATE CAEVENT
					SET NREP_DATE_A = :chr_l_sys_date_time,
						 access_stamp = :chr_l_sys_date_time
					WHERE ROWID = :chr_l_row_id_event_rec;

					IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

					break;

				}
				else if ((int_l_cond == 2) || (int_l_cond == 3))
				{
					if (int_l_flg == 1)
					{
						chr_l_enra_2_rept = 'Y';

						int_retval = CA_WriteENRAEventRptHdr(l_ptr_second_ENRA_rpt_file,l_ca_caevent_struct_hb,2,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);

						if (int_retval != APL_SUCCESS)
							APL_GOBACK_FAIL

						int_l_flg = 0;
					}

					int_retval = CA_WriteInstrondENRARptDet(l_ptr_second_ENRA_rpt_file,l_ca_caevent_struct_hb,l_ca_caentitlement_struct_hb,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr );

					if (int_retval != APL_SUCCESS)
						APL_GOBACK_FAIL

					if (int_l_cond == 2)
					{
						EXEC SQL UPDATE CAENTITLEMENT
						SET NREP_DATE_B = :chr_l_sys_date_time,
							 access_stamp = :chr_l_sys_date_time
						WHERE ROWID = :chr_l_row_id_entitl_rec;
					
						IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
					}
					else if (int_l_cond == 3)
					{
						EXEC SQL UPDATE CAENTITLEMENT
						SET NREP_DATE_C = :chr_l_sys_date_time,
							 access_stamp = :chr_l_sys_date_time
						WHERE ROWID = :chr_l_row_id_entitl_rec;
					
						IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

					}
				}
			}
			else if (strcmp(chr_l_gen_regen_flg,"R") == 0)
			{
				if (int_l_cond == 4)
				{
					int_retval = CA_WriteENRAEventRptHdr(l_ptr_first_ENRA_rpt_file,l_ca_caevent_struct_hb,1,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);

					if (int_retval != APL_SUCCESS)
						APL_GOBACK_FAIL

					int_retval = CA_WriteFirstENRARptDet(l_ptr_first_ENRA_rpt_file,l_ca_caevent_struct_hb,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);

					if (int_retval != APL_SUCCESS)
						APL_GOBACK_FAIL
					
					EXEC SQL UPDATE CAEVENT
					SET NREP_DATE_A = :chr_l_sys_date_time,
						 access_stamp = :chr_l_sys_date_time
					WHERE ROWID = :chr_l_row_id_event_rec;

					IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

					break;

				}
				else if ((int_l_cond == 5) || (int_l_cond == 6))
				{
					if (int_l_flg == 1)
					{
						chr_l_enra_2_rept = 'Y';

						int_retval = CA_WriteENRAEventRptHdr(l_ptr_second_ENRA_rpt_file,l_ca_caevent_struct_hb,2,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);

						if (int_retval != APL_SUCCESS)
							APL_GOBACK_FAIL

						int_l_flg = 0;
					}

					int_retval = CA_WriteInstrondENRARptDet(l_ptr_second_ENRA_rpt_file,l_ca_caevent_struct_hb,l_ca_caentitlement_struct_hb,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr );

					if (int_retval != APL_SUCCESS)
						APL_GOBACK_FAIL
					
					if (int_l_cond == 5)
					{
						EXEC SQL UPDATE CAENTITLEMENT
						SET NREP_DATE_B = :chr_l_sys_date_time,
							 access_stamp = :chr_l_sys_date_time
						WHERE ROWID = :chr_l_row_id_entitl_rec;
					
						IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
					}
					else if (int_l_cond == 6)
					{
						EXEC SQL UPDATE CAENTITLEMENT
						SET NREP_DATE_C = :chr_l_sys_date_time,
							 access_stamp = :chr_l_sys_date_time
						WHERE ROWID = :chr_l_row_id_entitl_rec;
					
						IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
					}
				}
			}
			
			if (int_l_sqlcode == 1403)
				break;
		}

		EXEC SQL CLOSE EntitleRecs;
	
		if (chr_l_enra_2_rept == 'Y')
		{
			int_retval = CA_WriteInstrondENRARptTrailer(l_ptr_second_ENRA_rpt_file,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);

			if (int_retval != APL_SUCCESS)
				APL_GOBACK_FAIL
		}

		chr_l_enra_2_rept = 'N';
	}

	EXEC SQL CLOSE EvntRecs;
				
	if (sqlca.sqlerrd[2] == 0)
	{
		CO_InsertErr(l_debug_info_ptr,ERR_NOEVNT_RECORD_FOR_ENRA_GEN,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);

		APL_GOBACK_FAIL
	}
	
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		

		int_retval = CO_Proc_RptClose(l_ptr_first_ENRA_rpt_file,l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
			return(APL_FAILURE);
		
		int_retval = CO_Proc_RptClose(l_ptr_second_ENRA_rpt_file,l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
			return(APL_FAILURE);

		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CA_Rpt_ENRA successfully \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		

		int_retval = CO_Proc_RptClose(l_ptr_first_ENRA_rpt_file,l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
			return(APL_FAILURE);
		
		int_retval = CO_Proc_RptClose(l_ptr_second_ENRA_rpt_file,l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
			return(APL_FAILURE);
		
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CA_Rpt_ENRA with failure \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_FAILURE);
	}
}


 
 int CA_ChkCondENRARpt(char *p_ex_date,int p_enra_lapse_1,int p_enra_lapse_2,int p_enra_lapse_3,char *p_nrepdate1,char *p_nrepdate2,char *p_nrepdate3,int *p_cond,char *p_gen_regen_flg,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca		sqlca;
	char 					chr_l_dt1[APL_DATE_LEN] = APL_NULL_STRING;
	char 					chr_l_dt2[APL_DATE_LEN] = APL_NULL_STRING;
	char 					chr_l_dt3[APL_DATE_LEN] = APL_NULL_STRING;
	char 					chr_l_tmpdt[APL_DATE_LEN] = APL_NULL_STRING;
	int					int_l_flg = 0;
	short					shr_l_tmpdt = 0;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CA_ChkCondENRARpt\n",NULL,NULL);

	sqlca.sqlcode = 0;

	EXEC SQL SELECT TO_CHAR(TO_DATE(:p_ex_date,'DD/MM/YYYY HH24:MI:SS') + :p_enra_lapse_1,'DD/MM/YYYY HH24:MI:SS') INTO :chr_l_dt1 FROM DUAL;
	
	IS_ANY_ORA_ERROR
			
	EXEC SQL SELECT TO_CHAR(TO_DATE(:p_ex_date,'DD/MM/YYYY HH24:MI:SS') + :p_enra_lapse_2,'DD/MM/YYYY HH24:MI:SS') INTO :chr_l_dt2 FROM DUAL;

	IS_ANY_ORA_ERROR
	
	EXEC SQL SELECT TO_CHAR(TO_DATE(:p_ex_date,'DD/MM/YYYY HH24:MI:SS') + :p_enra_lapse_3,'DD/MM/YYYY HH24:MI:SS') INTO :chr_l_dt3 FROM DUAL;

	IS_ANY_ORA_ERROR

	if (strcmp(p_gen_regen_flg,"G") == 0)
	{
		EXEC SQL SELECT SYS_DATE INTO :chr_l_tmpdt:shr_l_tmpdt
		FROM PRO_SYS_DATE
		WHERE SYS_DATE BETWEEN :chr_l_dt1 AND :chr_l_dt2; 

		IS_ANY_ORA_ERROR

		if (sqlca.sqlcode != 1403)
			int_l_flg = 1;
		
		if ((int_l_flg == 1) && (strcmp(p_nrepdate1,APL_NULL_STRING) == 0))
		{
			*p_cond = 1;

			APL_GOBACK_SUCCESS
		}

		int_l_flg = 0;
		
		EXEC SQL SELECT SYS_DATE INTO :chr_l_tmpdt:shr_l_tmpdt
		FROM PRO_SYS_DATE
		WHERE SYS_DATE BETWEEN :chr_l_dt2 AND :chr_l_dt3; 

		IS_ANY_ORA_ERROR

		if (sqlca.sqlcode != 1403)
			int_l_flg = 1;

		if ((int_l_flg == 1) && (strcmp(p_nrepdate2,APL_NULL_STRING) == 0))
		{
			*p_cond = 2;

			APL_GOBACK_SUCCESS
		}

		int_l_flg = 0;
		
		EXEC SQL SELECT SYS_DATE INTO :chr_l_tmpdt:shr_l_tmpdt
		FROM PRO_SYS_DATE
		WHERE SYS_DATE >= :chr_l_dt3; 

		IS_ANY_ORA_ERROR
		
		if (sqlca.sqlcode != 1403)
			int_l_flg = 1;

		if ((int_l_flg == 1) && (strcmp(p_nrepdate3,APL_NULL_STRING) == 0))
		{
			*p_cond = 3;

			APL_GOBACK_SUCCESS
		}

		*p_cond = 0;

		APL_GOBACK_SUCCESS

	}
	else if (strcmp(p_gen_regen_flg,"R") == 0)
	{
		EXEC SQL SELECT SYS_DATE INTO :chr_l_tmpdt:shr_l_tmpdt
		FROM PRO_SYS_DATE
		WHERE SYS_DATE BETWEEN :chr_l_dt1 AND :chr_l_dt2; 

		IS_ANY_ORA_ERROR

		if (sqlca.sqlcode != 1403)
			int_l_flg = 1;
		
		if ((int_l_flg == 1) && (strcmp(p_nrepdate1,APL_NULL_STRING) != 0))
		{
			*p_cond = 4;

			APL_GOBACK_SUCCESS
		}

		int_l_flg = 0;
		
		EXEC SQL SELECT SYS_DATE INTO :chr_l_tmpdt:shr_l_tmpdt
		FROM PRO_SYS_DATE
		WHERE SYS_DATE BETWEEN :chr_l_dt2 AND :chr_l_dt3;

		IS_ANY_ORA_ERROR

		if (sqlca.sqlcode != 1403)
			int_l_flg = 1;
	
		if ((int_l_flg == 1) && (strcmp(p_nrepdate2,APL_NULL_STRING) != 0))
		{
			*p_cond = 5;

			APL_GOBACK_SUCCESS
		}

		int_l_flg = 0;
		
		EXEC SQL SELECT SYS_DATE INTO :chr_l_tmpdt:shr_l_tmpdt
		FROM PRO_SYS_DATE
		WHERE SYS_DATE >= :chr_l_dt3;

		IS_ANY_ORA_ERROR

		if (sqlca.sqlcode != 1403)
			int_l_flg = 1;
	
		if ((int_l_flg == 1) && (strcmp(p_nrepdate3,APL_NULL_STRING) != 0))
		{
			*p_cond = 6;

			APL_GOBACK_SUCCESS
		}

		*p_cond = 0;

		APL_GOBACK_SUCCESS
	}
	
	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CA_ChkCondENRARpt successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CA_ChkCondENRARpt with failure \n",NULL,NULL);

		return(APL_FAILURE);
	}
}


 
 int CA_WriteENRARptHdr(FILE *p_ptr_enra_rpt_file,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca			sqlca;
	char						chr_l_sys_date[9] = APL_NULL_STRING;
	char						chr_l_corp_name[41] = APL_NULL_STRING;
	short						i_ca_clr_name;
	int						i;

	EXEC SQL VAR chr_l_sys_date IS STRING;
	EXEC SQL VAR chr_l_corp_name IS STRING;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CA_WriteENRARptHdr\n",NULL,NULL);
	
	sqlca.sqlcode = 0;

	EXEC SQL SELECT TO_CHAR(SYS_DATE,'DD/MM/YY')
	INTO :chr_l_sys_date
	FROM PRO_SYS_DATE;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_DATE_NOT_SET,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	EXEC SQL SELECT ca_identname
	INTO :chr_l_corp_name:i_ca_clr_name
	FROM MT_COMMON_SYS_PARAMS;
	
	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_DATE_NOT_SET,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	fprintf(p_ptr_enra_rpt_file,"\n");

	for (i=0;i<135;i++)
		fprintf(p_ptr_enra_rpt_file,"-");
		
	fprintf(p_ptr_enra_rpt_file,"\n%s                      %s\n\n",chr_l_sys_date,chr_l_corp_name);
	
	fprintf(p_ptr_enra_rpt_file,"             ENTITLEMENT NON-RECEIPT ALERT REPORT\n");
		
	for (i=0;i<135;i++)
		fprintf(p_ptr_enra_rpt_file,"-");
		
	fprintf(p_ptr_enra_rpt_file,"\n");

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CA_WriteENRARptHdr successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CA_WriteENRARptHdr with failure \n",NULL,NULL);

		return(APL_FAILURE);
	}
}


 
 int CA_WriteENRAEventRptHdr(FILE *p_ptr_enra_rpt_file,CA_CAEVENT_STRUCT_H	p_ca_caevent_struct_h_e,int p_rept_no,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca			sqlca;
	char						chr_l_corp_name[61] = APL_NULL_STRING;
	char						chr_l_corp_addr[181] = APL_NULL_STRING;
	char						chr_l_instrdesc[131] = APL_NULL_STRING;
	char						chr_l_event_desc[41] = APL_NULL_STRING;
	short						i_evnt_desc,i_ca_clr_name,i_ca_addrdet,i_instr_name;
	int						i;
	char						chr_l_decl_dt[11] = APL_NULL_STRING;
	char						chr_l_ex_dt[11] = APL_NULL_STRING;
	char						chr_l_rec_dt[11] = APL_NULL_STRING;
	char						chr_l_pay_dt[11] = APL_NULL_STRING;

	EXEC SQL VAR chr_l_corp_name IS STRING;
	EXEC SQL VAR chr_l_corp_addr IS STRING;
	EXEC SQL VAR chr_l_instrdesc IS STRING;
	EXEC SQL VAR chr_l_event_desc IS STRING;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CA_WriteENRAEventRptHdr\n",NULL,NULL);
	
	sqlca.sqlcode = 0;

	
	fprintf(p_ptr_enra_rpt_file,"\n\f");

	chr_l_decl_dt[0] = p_ca_caevent_struct_h_e.h_decl_date[0];
	chr_l_decl_dt[1] = p_ca_caevent_struct_h_e.h_decl_date[1];
	chr_l_decl_dt[2] = p_ca_caevent_struct_h_e.h_decl_date[2];
	chr_l_decl_dt[3] = p_ca_caevent_struct_h_e.h_decl_date[3];
	chr_l_decl_dt[4] = p_ca_caevent_struct_h_e.h_decl_date[4];
	chr_l_decl_dt[5] = p_ca_caevent_struct_h_e.h_decl_date[5];
	chr_l_decl_dt[6] = p_ca_caevent_struct_h_e.h_decl_date[6];
	chr_l_decl_dt[7] = p_ca_caevent_struct_h_e.h_decl_date[7];
	chr_l_decl_dt[8] = p_ca_caevent_struct_h_e.h_decl_date[8];
	chr_l_decl_dt[9] = p_ca_caevent_struct_h_e.h_decl_date[9];
	chr_l_decl_dt[10] = '\0';
	
	chr_l_ex_dt[0] = p_ca_caevent_struct_h_e.h_ex_date[0];
	chr_l_ex_dt[1] = p_ca_caevent_struct_h_e.h_ex_date[1];
	chr_l_ex_dt[2] = p_ca_caevent_struct_h_e.h_ex_date[2];
	chr_l_ex_dt[3] = p_ca_caevent_struct_h_e.h_ex_date[3];
	chr_l_ex_dt[4] = p_ca_caevent_struct_h_e.h_ex_date[4];
	chr_l_ex_dt[5] = p_ca_caevent_struct_h_e.h_ex_date[5];
	chr_l_ex_dt[6] = p_ca_caevent_struct_h_e.h_ex_date[6];
	chr_l_ex_dt[7] = p_ca_caevent_struct_h_e.h_ex_date[7];
	chr_l_ex_dt[8] = p_ca_caevent_struct_h_e.h_ex_date[8];
	chr_l_ex_dt[9] = p_ca_caevent_struct_h_e.h_ex_date[9];
	chr_l_ex_dt[10] = '\0';
	
	chr_l_rec_dt[0] = p_ca_caevent_struct_h_e.h_rec_date[0];
	chr_l_rec_dt[1] = p_ca_caevent_struct_h_e.h_rec_date[1];
	chr_l_rec_dt[2] = p_ca_caevent_struct_h_e.h_rec_date[2];
	chr_l_rec_dt[3] = p_ca_caevent_struct_h_e.h_rec_date[3];
	chr_l_rec_dt[4] = p_ca_caevent_struct_h_e.h_rec_date[4];
	chr_l_rec_dt[5] = p_ca_caevent_struct_h_e.h_rec_date[5];
	chr_l_rec_dt[6] = p_ca_caevent_struct_h_e.h_rec_date[6];
	chr_l_rec_dt[7] = p_ca_caevent_struct_h_e.h_rec_date[7];
	chr_l_rec_dt[8] = p_ca_caevent_struct_h_e.h_rec_date[8];
	chr_l_rec_dt[9] = p_ca_caevent_struct_h_e.h_rec_date[9];
	chr_l_rec_dt[10] = '\0';
	
	chr_l_pay_dt[0] = p_ca_caevent_struct_h_e.h_pymt_dt[0];
	chr_l_pay_dt[1] = p_ca_caevent_struct_h_e.h_pymt_dt[1];
	chr_l_pay_dt[2] = p_ca_caevent_struct_h_e.h_pymt_dt[2];
	chr_l_pay_dt[3] = p_ca_caevent_struct_h_e.h_pymt_dt[3];
	chr_l_pay_dt[4] = p_ca_caevent_struct_h_e.h_pymt_dt[4];
	chr_l_pay_dt[5] = p_ca_caevent_struct_h_e.h_pymt_dt[5];
	chr_l_pay_dt[6] = p_ca_caevent_struct_h_e.h_pymt_dt[6];
	chr_l_pay_dt[7] = p_ca_caevent_struct_h_e.h_pymt_dt[7];
	chr_l_pay_dt[8] = p_ca_caevent_struct_h_e.h_pymt_dt[8];
	chr_l_pay_dt[9] = p_ca_caevent_struct_h_e.h_pymt_dt[9];
	chr_l_pay_dt[10] = '\0';

	EXEC SQL SELECT CA_NAME,CA_ADDRDET,instr_name
	INTO :chr_l_corp_name:i_ca_clr_name,:chr_l_corp_addr:i_ca_addrdet,:chr_l_instrdesc:i_instr_name
	FROM MT_INSTRUMENT
	WHERE instr_code = :p_ca_caevent_struct_h_e.h_instr_code;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	

	CO_NewLine(chr_l_corp_name);
	CO_NewLine(chr_l_corp_addr);
	CO_NewLine(chr_l_instrdesc);

	fprintf(p_ptr_enra_rpt_file,"\n\n\n");

	fprintf(p_ptr_enra_rpt_file,"To:\n%s\n%s\n\n",chr_l_corp_name,chr_l_corp_addr);
	fprintf(p_ptr_enra_rpt_file,"Instrurity:       %s,%s\n\n",p_ca_caevent_struct_h_e.h_instr_code,chr_l_instrdesc);

	EXEC SQL SELECT map_desc 
	INTO :chr_l_event_desc:i_evnt_desc
	FROM PRO_SGENSTAT
	WHERE map_type = 'EVENT_TYPE'
	AND map_val = :p_ca_caevent_struct_h_e.h_evt_class;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	fprintf(p_ptr_enra_rpt_file,"Corporate Event:    %s   %s   #%d      Ex-Date: %s\n\n",chr_l_event_desc,chr_l_decl_dt,p_ca_caevent_struct_h_e.h_evt_nbr,chr_l_ex_dt);

	fprintf(p_ptr_enra_rpt_file,"Record Date:        %s                             Pay Date: %s\n\n",chr_l_rec_dt,chr_l_pay_dt);

	for (i=0;i<135;i++)
		fprintf(p_ptr_enra_rpt_file,"-");

	if (p_rept_no == 2)
	{
		fprintf(p_ptr_enra_rpt_file,"\nDear Sir/Madam, \n");
	
		fprintf(p_ptr_enra_rpt_file,"\nThis is with identity to the captioned issue, please be advised that we have the following entitlements outstanding in our books as of todate:\n");
	
		if (strcmp(l_mt_core_sys_params_struct_h.proc_reg_ind, "Y") == 0)
		{
			fprintf(p_ptr_enra_rpt_file,"\nAccount           Registered Name                               Entitled Position           Quantity Due          Income Due\n");
		}
		else
		{
			fprintf(p_ptr_enra_rpt_file,"\nAccount           Entitled Position           Quantity Due          Income Due\n");
		}
	}

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CA_WriteENRAEventRptHdr successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CA_WriteENRAEventRptHdr with failure \n",NULL,NULL);

		return(APL_FAILURE);
	}
}


 
 int CA_WriteFirstENRARptDet(FILE *p_ptr_first_enra_rpt_file,CA_CAEVENT_STRUCT_H p_ca_caevent_struct_h_e,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca			sqlca;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CA_WriteFirstENRARptDet\n",NULL,NULL);
	
	fprintf(p_ptr_first_enra_rpt_file,"\nDear Sir/Madam, \n");
	
	fprintf(p_ptr_first_enra_rpt_file,"\nPlease be advised that we have not yet received the entitlements of our non-resident client(s) for captioned issue. \n\nWe shall appreciate your advising progress on this issue alongwith a tentative chr_date of providing entitlement to us.\n\nThanking you,\n\nVery truly yours,\n\nOfficer, Corporate Actions\nInstrurities Services");

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CA_WriteFirstENRARptDet successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CA_WriteFirstENRARptDet with failure \n",NULL,NULL);

		return(APL_FAILURE);
	}
}


 
 int CA_WriteInstrondENRARptDet(FILE *p_ptr_second_enra_rpt_file,CA_CAEVENT_STRUCT_H p_ca_caevent_struct_h_e,CA_CAENTITLEMENT_STRUCT_H p_ca_caentitlement_struct_h_c,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca			sqlca;
	char						chr_l_regname[81];
	short						i_regclr_name;
	char						chr_l_rep_out_ent_pos[27];
	char						chr_l_rep_out_qty_due[27];
	char						chr_l_rep_out_inc_due[20];
	char						chr_l_ent_pos[27];
	char						l_quantity_bal[27];
	char						l_instr_inc_bal[20];
	int						int_l_start = 0;
	int						i = 0;
	int						int_l_ccylen;

	EXEC SQL VAR chr_l_regname IS STRING;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CA_WriteInstrondENRARptDet\n",NULL,NULL);
	
	sqlca.sqlcode = 0;

	
	
	

	

	if (APL_FAILURE == CR_Proc_InstrQtyRoundToStr(	p_ca_caentitlement_struct_h_c.h_entitl_pos,
															QUANTITY_LEN,
															p_ca_caevent_struct_h_e.h_instr_code,
															chr_l_rep_out_ent_pos,
															l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	if (APL_FAILURE == CR_Proc_InstrQtyRoundToStr(	p_ca_caentitlement_struct_h_c.h_quantity_due,
															QUANTITY_LEN,
															p_ca_caevent_struct_h_e.h_instr_code,
															chr_l_rep_out_qty_due,
															l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	
	
	while (isspace(chr_l_rep_out_ent_pos[i]))
		i++;
	
	while(chr_l_rep_out_ent_pos[i] != APL_NULL_CHAR)
		chr_l_ent_pos[int_l_start++] = chr_l_rep_out_ent_pos[i++];

	chr_l_ent_pos[int_l_start] = APL_NULL_CHAR;

	i = 0;
	int_l_start = 0;
	
	while (isspace(chr_l_rep_out_qty_due[i]))
		i++;
	
	while(chr_l_rep_out_qty_due[i] != APL_NULL_CHAR)
		l_quantity_bal[int_l_start++] = chr_l_rep_out_qty_due[i++];

	l_quantity_bal[int_l_start] = APL_NULL_CHAR;
	
	

	
	
	

	EXEC SQL SELECT DEC_LEN
	INTO :int_l_ccylen
	FROM DL_CURRENCY
	WHERE currency_cd = :p_ca_caentitlement_struct_h_c.h_entitl_ccy;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
	
	CO_ToStr(p_ca_caentitlement_struct_h_c.h_instr_inc_bal,CURRENCY_LEN,int_l_ccylen,chr_l_rep_out_inc_due);
	

	i = 0;
	int_l_start = 0;
	
	while (isspace(chr_l_rep_out_inc_due[i]))
		i++;
	
	while(chr_l_rep_out_inc_due[i] != APL_NULL_CHAR)
		l_instr_inc_bal[int_l_start++] = chr_l_rep_out_inc_due[i++];

	l_instr_inc_bal[int_l_start] = APL_NULL_CHAR;

	
	
	

	if (strcmp(l_mt_core_sys_params_struct_h.proc_reg_ind, "Y") == 0)
	{
		EXEC SQL SELECT CLN_REG_NAME
		INTO :chr_l_regname:i_regclr_name
		FROM MT_CLIENT
		WHERE cln_code = :p_ca_caentitlement_struct_h_c.h_dl_client;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

		fprintf(p_ptr_second_enra_rpt_file,"\n%-18s%-46s%-28s%-22s%-10s \n",p_ca_caentitlement_struct_h_c.h_dl_client,chr_l_regname,chr_l_ent_pos,l_quantity_bal,l_instr_inc_bal);
	}
	else
	{
		fprintf(p_ptr_second_enra_rpt_file,"\n%-18s%-28s%-22s%-10s \n",p_ca_caentitlement_struct_h_c.h_dl_client,chr_l_ent_pos,l_quantity_bal,l_instr_inc_bal);
	}

	fprintf(p_ptr_second_enra_rpt_file,"\n");
	
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CA_WriteInstrondENRARptDet successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CA_WriteInstrondENRARptDet with failure \n",NULL,NULL);

		return(APL_FAILURE);
	}
}


 
 int CA_WriteInstrondENRARptTrailer(FILE *p_ptr_second_enra_rpt_file,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CA_WriteInstrondENRARptTrailer \n",NULL,p_intl_env_data_struct_h_d);
	
	fprintf(p_ptr_second_enra_rpt_file,"\nDespite lapse of considerable time, we are yet to receive these outstanding entitlements.\n\nYour immediate h_process is much appreciated to resolve these issues as our non-resident clients are continuously following up with us for the same.\n\nThanking you,\n\nVery truly yours,\n\nOfficer, Corporate Actions\nInstrurities Services");
	
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CA_WriteInstrondENRARptTrailer successfully \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CA_WriteInstrondENRARptTrailer with failure \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_FAILURE);
	}
}


 
 int CA_LockRec(char **argv,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca					sqlca;
	char	l_processing_status[51];
	short i_processing_status = 0;
	sqlca.sqlcode = 0;
		
	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CA_LockRec\n",NULL,NULL);

	EXEC SQL SELECT processing_status INTO :l_processing_status:i_processing_status
	FROM SYS_BATCHPROC
	WHERE process_name = :argv[0]
	AND   proc_init = :argv[1]
	AND STARTDATE = :argv[2]
	AND status = 'started'
	FOR UPDATE OF processing_status,status;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CA_LockRec successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CA_LockRec with failure \n",NULL,NULL);

		return(APL_FAILURE);
	}
}


 
 int CA_Proc_Final(char **argv,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr,int p_flg)
 {
	struct sqlca					sqlca;
	char								chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;

	sqlca.sqlcode = 0;
		
	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CA_Proc_Final\n",NULL,NULL);
	if (p_flg == 0)
	{
		

		if (CO_ChkErr(*l_debug_info_ptr) != APL_SUCCESS)
		{
			memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
			sprintf(chr_l_buf,"Finished ENRA Report Generation");

			EXEC SQL UPDATE SYS_BATCHPROC
			SET stat_det = :chr_l_buf,
				 status = 'completed'
			WHERE process_name = :argv[0]
			AND   proc_init = :argv[1]
			AND STARTDATE = :argv[2]
			AND status = 'started';
	
			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

		}

		EXEC SQL COMMIT WORK RELEASE;

		CO_ProcMonitor(p_ptr_log_file,"Work Committed \n",NULL,NULL);
	}
	else if (p_flg == 1)
	{
		EXEC SQL ROLLBACK WORK RELEASE;

		CO_ProcMonitor(p_ptr_log_file,"Rollback done \n",NULL,NULL);
	}

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CA_Proc_Final successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CA_Proc_Final with failure \n",NULL,NULL);

		return(APL_FAILURE);
	}
}


 
 int CA_DatabaseConnect(char *p_username,char *p_passwd,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca					sqlca;

	sqlca.sqlcode = 0;
		
	CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CA_DatabaseConnect\n",NULL,NULL);
	
	EXEC SQL CONNECT :p_username IDENTIFIED BY :p_passwd;

	if (sqlca.sqlcode != 0)
		APL_GOBACK_FAIL

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(APL_OUT_FILE, "Leaving processtion CA_DatabaseConnect successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(APL_OUT_FILE, "Leaving processtion CA_DatabaseConnect with failure \n",NULL,NULL);

		return(APL_FAILURE);
	}
}
