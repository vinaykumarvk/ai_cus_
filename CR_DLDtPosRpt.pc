




#include "CO_Commdef.h"
#include "CO_HostStructdef.h"
EXEC SQL INCLUDE SQLCA.H;
#define PAGELENGTH 50
#define APL_REFNO_LENGTH 17

int CR_Rtv_DLDtPosAcc(char *p_instr_code,char *p_asofdate,char *chr_p_client,char p_listdeal,char p_noholdings,char **argv,FILE *p_logfile,DEBUG_INFO_STRUCT_H  **l_debug_info_ptr);

int CR_Rtv_DLDtPosPendFailDL(char *p_instr_code,char *p_asofdate,char *chr_p_client,char p_listdeal,FILE *p_repfile,FILE *p_logfile,DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

int PrntReport(char *chr_l_instrcode_a,char *chr_l_asofdate,char *chr_l_client_a,char *chr_l_refno_a,char chr_l_trcode_a,char *chr_l_trdt_a,char *chr_l_settledt_a,char *chr_l_instr_dt,char *int_l_domcpac,double l_quantity,double dbl_l_amount_a,int *rowcount,FILE *l_repfile,DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

//main(int argc,char **argv)
int main(int argc,char **argv)//Changes done for AIX Migration
{
   struct sqlca sqlca;
   DEBUG_INFO_STRUCT_H *l_debug_info_ptr             =  NULL;
   INTL_ENV_DATA_STRUCT_H l_intl_env_data_h;
   FILE  *l_finifile                      =  NULL;
   FILE  *l_logfile                       =  NULL;
   FILE  *l_repfile                       =  NULL;
   char  chr_l_logfile_name[PATH_LENGTH]      =  APL_NULL_STRING;
   int   int_l_retval                         =  0;
   char  chr_uname[APL_USERID_LEN]            =  APL_NULL_STRING;
   char  chr_custody_id_b[APL_USERID_LEN]           =  APL_NULL_STRING;
   char  chr_passwd[APL_PASSWD_LEN]           =  APL_NULL_STRING;
   char  chr_l_logdir[PATH_LENGTH]            =  APL_NULL_STRING;
   char  chr_l_inifile[PATH_LENGTH]           =  APL_NULL_STRING;
	char  chr_l_asofdate[APL_DATE_LEN]   		=  APL_NULL_STRING;
	char  chr_l_instrcode_a[APL_INSTRUMENTCODE_LEN]         =  APL_NULL_STRING;
	char  chr_l_client_a[APL_CLIENT_LENGTH]      	=  APL_NULL_STRING;
	char  chr_l_listtrd;
	char  chr_l_noholdings;
   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;

   EXEC SQL VAR chr_uname IS STRING;
   EXEC SQL VAR chr_custody_id_b IS STRING;
   EXEC SQL VAR chr_passwd IS STRING;
EXEC SQL VAR chr_g_restart_data is string;
	
	int int_num =0;
	char **temp =NULL;
   sqlca.sqlcode = 0;


    strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
    strcat(chr_l_inifile,"intl_sun.cfg");

   if ( ( l_finifile=fopen(chr_l_inifile,"r") ) == NULL)
   {
      APL_GOBACK_FAIL
   }



	  

   APL_FETCH_DB_LOGIN_DETAILS(l_finifile, chr_custody_id_b, chr_uname, chr_passwd, APL_OUT_FILE, &l_debug_info_ptr)

   EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;

   if (sqlca.sqlcode)
   {
      APL_GOBACK_FAIL
   }
   else
   {
      

      if (APL_FAILURE == CO_Rtv_RptFileName( "3g",
                                          APL_LOGFILE_DESC,
                                          100,
                                          argv[5],
                                          argv,
                                          &l_logfile,
                                          &l_debug_info_ptr ) )
      {
         APL_GOBACK_FAIL
      }


      

	 EXEC SQL COMMIT WORK;

      if (sqlca.sqlcode)
      {
         CO_ProcMonitor(l_logfile, "Could not commit after opening chr_log file", NULL, NULL);
         CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
         APL_GOBACK_FAIL
      }

      

      if (APL_FAILURE == CO_RtvSysParams(&l_debug_info_ptr))
      {
         CO_ProcMonitor(l_logfile, "Error In Getting System Parameters", NULL, NULL);
         CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
         APL_GOBACK_FAIL
      }
	
	   

      if (APL_FAILURE == CO_SplitStr( argv[9],
                                       '|',
                                       &int_num,
                                       &temp ))
      {
         CO_ProcMonitor(l_logfile, "Failure from StrSplitFn", NULL, NULL);
         CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
         APL_GOBACK_FAIL
      }

      if (int_num != 5)
      {
         CO_ProcMonitor(l_logfile, "Improper Number of arguments", NULL, NULL);
         CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
         APL_GOBACK_FAIL
      }

		strcpy(chr_l_instrcode_a,temp[0]);
      strcpy(chr_l_asofdate, temp[1]);
		chr_l_listtrd=temp[2][0];
      strcpy(chr_l_client_a,temp[3]);
      chr_l_noholdings=temp[4][0];
      

      strcpy(l_intl_env_data_h.usr, argv[3]);
      strcpy(l_intl_env_data_h.h_mode, argv[4]);
      strcpy(l_intl_env_data_h.processtion, argv[5]);
      strcpy(l_intl_env_data_h.auth_req, argv[6]);
      strcpy(l_intl_env_data_h.subprocess, argv[7]);
      strcpy(l_intl_env_data_h.h_process, argv[8]);


      
		
      CO_ProcMonitor(l_logfile, "Calling CM_GetAccounts", NULL, NULL);
      EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
		FROM SYS_BATCHPROC
		WHERE PROCESS_NAME=:argv[0]
		AND PROC_INIT =:argv[1]
		AND STARTDATE=:argv[2]
		AND STATUS ='started'
		FOR UPDATE  OF PROCESSING_STATUS,STATUS;

      int_l_retval = CR_Rtv_DLDtPosAcc( chr_l_instrcode_a,
											chr_l_asofdate,
											chr_l_client_a,
											chr_l_listtrd,
											chr_l_noholdings,
											argv,
                                 l_logfile,
                                 &l_debug_info_ptr);

      CO_ProcMonitor(l_logfile, "Returned from CM_GetAccounts", NULL, NULL);

      if ( int_l_retval == APL_FAILURE )
      {
         CO_ProcMonitor(l_logfile, "CM_GetAccounts returned failure", NULL, NULL);
         CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
			EXEC SQL ROLLBACK WORK RELEASE;
         APL_GOBACK_FAIL

		}
      else
      {
         EXEC SQL UPDATE SYS_BATCHPROC
         SET  status = 'completed'
         WHERE PROCESS_NAME=:argv[0]
         AND   PROC_INIT=:argv[1]
         AND   STARTDATE=:argv[2]
         AND   STATUS='started';

			EXEC SQL COMMIT WORK RELEASE;
         CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
         APL_GOBACK_SUCCESS
      }
   }
	
	fclose (l_finifile);

   RETURN_SUCCESS:exit(0);

   RETURN_FAILURE : exit(-1);

}

int CR_Rtv_DLDtPosAcc(char *p_instr_code,char *p_asofdate,char *chr_p_client,char p_listdeal,char p_noholdings,char **argv,FILE *p_logfile,DEBUG_INFO_STRUCT_H  **l_debug_info_ptr)
{

char chr_l_client_a[APL_CLIENT_LENGTH]	=	APL_NULL_STRING;
char chr_l_sysdate_b[APL_DATE_LEN]		=	APL_NULL_STRING;
int int_l_retval							=	0;
short i_dl_client						=	0;
short int_l_condexists_A					=	0;					
char  chr_l_instrcode_a[APL_INSTRUMENTCODE_LEN]   =  APL_NULL_STRING;	
short i_instr_code							=	0;						
FILE *l_repfile 						= 	NULL;
EXEC SQL VAR chr_l_client_a IS STRING;
EXEC SQL VAR chr_l_instrcode_a IS STRING;


	if ( APL_FAILURE == CO_Chk_CntryEnabled( "TRD_DT_POS_REP",
                                             "INSTR_CODE_OPT",
                                             &int_l_condexists_A,
                                             l_debug_info_ptr ) )
   {
      APL_GOBACK_FAIL;
   }

   if ( int_l_condexists_A > 0 )
   {
		if(strcmp(p_instr_code,APL_NULL_STRING) == 0)
		{
			strcpy(p_instr_code,"%");
		}
		if(strcmp(chr_p_client,APL_NULL_STRING) == 0)
		{
			strcpy(chr_p_client,"%");
		}
	}
	else
	{
		if(strcmp(p_instr_code,APL_NULL_STRING) == 0)
		{
 			APL_DATA_MISSING("INSTRUMENT CODE",APL_NULL_STRING,APL_NULL_STRING)
		}
	}
	int_l_condexists_A = 0;


	if(strcmp(p_asofdate,APL_NULL_STRING) == 0)
	{
		APL_DATA_MISSING("DATE MISSING",APL_NULL_STRING,APL_NULL_STRING)
	}

	int_l_retval=CO_ProcMonitor(p_logfile,"Entered CR_Rtv_DLDtPosAcc Function",NULL,NULL);
	if(int_l_retval == APL_FAILURE) // AIX - Warnings
		APL_GOBACK_FAIL



	if(APL_FAILURE ==CO_Rtv_RptFileName("TD",
											  "Trade Date Position Report",
											  100,
											  argv[5],
											  argv,
											  &l_repfile,
											  l_debug_info_ptr))

	{
		APL_GOBACK_FAIL
	}
	if(APL_FAILURE == CO_RtvSysDt(chr_l_sysdate_b,l_debug_info_ptr))
	{
		APL_GOBACK_FAIL
	}


 	if ( APL_FAILURE == CO_Chk_CntryEnabled( "TRD_DT_POS_REP",
                                             "INSTR_CODE_OPT",
                                             &int_l_condexists_A,
                                             l_debug_info_ptr ) )
   {
      APL_GOBACK_FAIL;
   }

   if ( int_l_condexists_A > 0 )
   {
		

		EXEC SQL DECLARE selaccounts_HU CURSOR FOR
      SELECT B.CLIENT CLIENT, B.INSTR_CODE FROM DL_DEAL B, MT_CLIENT A  
			WHERE B.INSTR_CODE LIKE :p_instr_code 
			AND A.CLN_CODE LIKE :chr_p_client AND A.CLN_CODE=B.CLIENT AND A.CLN_BRK_ALL <> 'B'
		UNION
		SELECT C.CLIENT CLIENT, C.INSTR_CODE FROM DL_HISDEAL C, MT_CLIENT D 
			WHERE C.INSTR_CODE LIKE :p_instr_code 
			AND D.CLN_CODE LIKE :chr_p_client AND C.CLIENT=D.CLN_CODE AND D.CLN_BRK_ALL <> 'B'
		UNION
		SELECT E.CLIENT CLIENT, E.INSTR_CODE FROM DL_SAFEK E, MT_CLIENT F 
			WHERE E.INSTR_CODE LIKE :p_instr_code 
			AND F.CLN_CODE LIKE :chr_p_client AND E.CLIENT=F.CLN_CODE AND F.CLN_BRK_ALL <> 'B'
		UNION
		SELECT G.CLIENT CLIENT, G.INSTR_CODE FROM DL_HISSAFEK G, MT_CLIENT H 
			WHERE G.INSTR_CODE LIKE :p_instr_code 
			AND H.CLN_CODE LIKE :chr_p_client AND G.CLIENT=H.CLN_CODE AND H.CLN_BRK_ALL <> 'B'
		ORDER BY CLIENT; 

		EXEC SQL OPEN selaccounts_HU;
		IS_ANY_ORA_ERROR
		for(;;)
		{
			EXEC SQL FETCH selaccounts_HU INTO 	:chr_l_client_a:i_dl_client,
															:chr_l_instrcode_a:i_instr_code;
			IS_ANY_ORA_ERROR
			if(APL_ZERO_RESULT_SET)
			{
				break;
			}
			int_l_retval = CO_ProcMonitor(p_logfile,"Entering CM_PendFailTrds",NULL,NULL);	
			if (int_l_retval == APL_FAILURE)
				APL_GOBACK_FAIL
			
			if(APL_FAILURE == CR_Rtv_DLDtPosPendFailDL(chr_l_instrcode_a,p_asofdate,chr_l_client_a,p_listdeal,l_repfile,p_logfile,l_debug_info_ptr))
				APL_GOBACK_FAIL
			fprintf(l_repfile,"\n\n%25sEND OF REPORT FOR %s\f"," ",chr_l_client_a);
		}
		EXEC SQL CLOSE selaccounts_HU;
		IS_ANY_ORA_ERROR	
	}
	else
	{
   
	
		if(strcmp(chr_p_client,APL_NULL_STRING) == 0)
		{
			EXEC SQL DECLARE selaccounts CURSOR FOR
			SELECT A.CLN_CODE FROM MT_CLIENT A
      	WHERE A.CLN_BRK_ALL='C'
      		AND (EXISTS(SELECT B.CLIENT FROM DL_DEAL B WHERE B.INSTR_CODE =:p_instr_code
      				AND B.CLIENT = A.CLN_CODE )
					OR EXISTS(SELECT C.CLIENT FROM DL_HISDEAL C WHERE C.INSTR_CODE=:p_instr_code 
						AND C .CLIENT=A.CLN_CODE)
      			or exists(select d.client from DL_SAFEK d where d.INSTR_CODE=:p_instr_code AND d.CLIENT=A.CLN_CODE)
					or exists(select e.client from DL_HISSAFEK e where e.INSTR_CODE=:p_instr_code AND e.CLIENT=A.CLN_CODE))
	  		ORDER BY A.CLN_CODE; 

			EXEC SQL OPEN SELACCOUNTS;
			IS_ANY_ORA_ERROR
			for(;;)
			{
				EXEC SQL FETCH selaccounts INTO :chr_l_client_a:i_dl_client;
	 
				IS_ANY_ORA_ERROR;
				if(APL_ZERO_RESULT_SET)
				{
					break;
				}
				int_l_retval = CO_ProcMonitor(p_logfile,"Entering CM_PendFailTrds",NULL,NULL);
				if (int_l_retval == APL_FAILURE)
					APL_GOBACK_FAIL
	     
				if(APL_FAILURE == CR_Rtv_DLDtPosPendFailDL(p_instr_code,p_asofdate,chr_l_client_a,p_listdeal,l_repfile,p_logfile,l_debug_info_ptr))
				{
					APL_GOBACK_FAIL
				}
	
				fprintf(l_repfile,"\n\n%25sEND OF REPORT FOR %s\f"," ",chr_l_client_a);
			}
			EXEC SQL CLOSE selaccounts;
			IS_ANY_ORA_ERROR
		}
	
		if(strcmp(chr_p_client,APL_NULL_STRING))
		{
			int_l_retval = CO_ProcMonitor(p_logfile,"Entering CM_PendFailTrds",NULL,NULL);
			if (int_l_retval == APL_FAILURE)
				APL_GOBACK_FAIL
	
			if(APL_FAILURE == CR_Rtv_DLDtPosPendFailDL(p_instr_code,p_asofdate,chr_p_client,p_listdeal,l_repfile,p_logfile,l_debug_info_ptr))
			{
				APL_GOBACK_FAIL
			}
			fprintf(l_repfile,"\n\n%25sEND OF REPORT FOR %s\f"," ",chr_p_client);
		}
	}
	int_l_condexists_A = 0;


	
	if(p_noholdings == 'Y')
	{
		int_l_retval = CO_ProcMonitor(p_logfile,"Entering Function For NoHoldings",NULL,NULL);
	


		if ( APL_FAILURE == CO_Chk_CntryEnabled( "TRD_DT_POS_REP",
                                             "INSTR_CODE_OPT",
                                             &int_l_condexists_A,
                                             l_debug_info_ptr ) )
   	{
      	APL_GOBACK_FAIL;
   	}

   	if ( int_l_condexists_A > 0 )
   	{
			EXEC SQL DECLARE selinstr_code CURSOR FOR
			SELECT INSTR_CODE FROM MT_INSTRUMENT
			WHERE INSTR_CODE LIKE :p_instr_code;
			
			EXEC SQL OPEN selinstr_code;
			for(;;)
      	{
         	EXEC SQL FETCH selinstr_code INTO :chr_l_instrcode_a:i_instr_code;
         	IS_ANY_ORA_ERROR
         	if(APL_ZERO_RESULT_SET)
         	{
            	break;
         	}
				if( CR_Prnt_DLDtPosRpt(chr_l_instrcode_a,p_asofdate,l_repfile,l_debug_info_ptr) == APL_FAILURE)
         	{
            	APL_GOBACK_FAIL
         	}
			}
			EXEC SQL CLOSE selinstr_code;
		}
		else
		{
			if( CR_Prnt_DLDtPosRpt(p_instr_code,p_asofdate,l_repfile,l_debug_info_ptr) == APL_FAILURE)
		 	{		
				APL_GOBACK_FAIL
		 	}
		}		
		int_l_condexists_A = 0;
 

		fprintf(l_repfile,"\n    END OF REPORT");
   }

APL_GOBACK_SUCCESS // AIX - Warnings

RETURN_SUCCESS:
	CO_Proc_RptClose(l_repfile,l_debug_info_ptr);
	return(APL_SUCCESS);
RETURN_FAILURE:
	CO_ProcMonitor(p_logfile,"Got Errors:",l_debug_info_ptr,NULL);
	CO_Proc_RptClose(l_repfile,l_debug_info_ptr);
	return(APL_FAILURE);

}

int CR_Rtv_DLDtPosPendFailDL(char *p_instr_code,char *p_asofdate,char *chr_p_client,char p_listdeal,FILE *p_repfile,FILE *p_logfile,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{



char chr_l_refno_a[APL_REFNO_LENGTH]	=	APL_NULL_STRING;
char chr_l_trcode_a[2]					=	APL_NULL_STRING;
char chr_l_trdt_a[APL_DATE_LEN]		=	APL_NULL_STRING;
char chr_l_settledt_a[APL_DATE_LEN]	=	APL_NULL_STRING;
char chr_l_instr_dt[APL_DATE_LEN]		=	APL_NULL_STRING;
char int_l_domcpac[DOMCPCLIENT_LEN]	=	APL_NULL_STRING;
char chr_l_str_famount[20];
char chr_f_str_famount[30];
char chr_l_str_pendtotal[26]=APL_NULL_STRING;
char chr_l_str_failedtotal[26]=APL_NULL_STRING;
char chr_l_client_a[APL_CLIENT_LENGTH] =APL_NULL_STRING;
char chr_l_str_pamount[20];
char chr_f_str_pamount[30];
int int_l_count =0;
int int_pageno =1;
int int_l_retval =0;
short i_indentity_no =0;
short i_dealcd=0;
short i_dlt =0;
short i_setldt = 0;
short i_instrdate =0;
short i_domcpclt_cd = 0;
short i_qty = 0;
short i_amt = 0;
short i_dl_client=0;
double l_PendTotal =0.0;
double l_FailedTotal =0.0;
double l_quantity =0.0;
double l_dl_deal_amt_struct_h =0.0;
double l_Pamount =0.0;
double l_Famount = 0.0;


EXEC SQL VAR chr_l_refno_a IS STRING;
EXEC SQL VAR int_l_domcpac IS STRING;
EXEC SQL VAR chr_l_trcode_a IS STRING;

memset(chr_l_str_pamount,APL_NULL_CHAR,20);
memset(chr_l_str_famount,APL_NULL_CHAR,20);

if(APL_FAILURE == CR_Prnt_DLDtPosRptHdr(p_instr_code,p_asofdate,chr_p_client,p_repfile,l_debug_info_ptr))
		{
			APL_GOBACK_FAIL
		}
if(p_listdeal == 'Y')
{
fprintf(p_repfile,"\n------------------------------------------------------------------------------------------------------------------------\n");
fprintf(p_repfile,"Reference        Txn  Trade     Contractual    Actual     Broker                        Quantity             Amount");
fprintf(p_repfile,"            \n%17sCode Date      SettlDate      SettlDate", " ");
fprintf(p_repfile,"\n------------------------------------------------------------------------------------------------------------------------\n");
}


	EXEC SQL DECLARE pending CURSOR FOR
   SELECT CLIENT,IDENTIY_NO,DEAL_CD,DEAL_DATE,SETL_DATE,INSTRUMENT_DT,DOMESTIC_CPCLT,QTY,AMOUNT 
   FROM DL_DEAL WHERE
	DEAL_STAT != 'DU' AND
   CLIENT =:chr_p_client AND
   SETL_DATE > :p_asofdate AND 
   DEAL_DATE <=:p_asofdate AND 
	INSTR_CODE = :p_instr_code AND
  ( ((deal_cd in ('1','2')) and (INSTRUMENT_DT is null or INSTRUMENT_DT >:p_asofdate)) OR  ((deal_cd in ('3','4','5','6','7','8')) and ((INSTRUMENT_DT is null or INSTRUMENT_DT >:p_asofdate) or (MONEY_SETL_DT is null or MONEY_SETL_DT >:p_asofdate) )))
UNION
   SELECT CLIENT,IDENTIY_NO,DEAL_CD,DEAL_DATE,SETL_DATE,INSTRUMENT_DT,DOMESTIC_CPCLT,QTY,AMOUNT 
   FROM DL_HISDEAL WHERE
	DEAL_STAT != 'DD' AND
   CLIENT =:chr_p_client AND
   SETL_DATE > :p_asofdate AND 
   DEAL_DATE <=:p_asofdate AND 
	INSTR_CODE = :p_instr_code AND
  ( ((deal_cd in ('1','2')) and (INSTRUMENT_DT is null or INSTRUMENT_DT >:p_asofdate)) OR  ((deal_cd in ('3','4','5','6','7','8')) and ((INSTRUMENT_DT is null or INSTRUMENT_DT >:p_asofdate) or (MONEY_SETL_DT is null or MONEY_SETL_DT>:p_asofdate) )))
  ORDER BY CLIENT,IDENTIY_NO;

		fprintf(p_repfile,"Pending Transactions\n");
   EXEC SQL OPEN pending;
	IS_ANY_ORA_ERROR
   for (;;)
	{
		EXEC SQL FETCH pending INTO
		:chr_p_client:i_dl_client,
		:chr_l_refno_a:i_indentity_no,
		:chr_l_trcode_a:i_dealcd,
		:chr_l_trdt_a:i_dlt,
		:chr_l_settledt_a:i_setldt,
		:chr_l_instr_dt:i_instrdate,
		:int_l_domcpac:i_domcpclt_cd,
		:l_quantity:i_qty,
	   :l_dl_deal_amt_struct_h:i_amt;

		IS_ANY_ORA_ERROR
      
		if (APL_ZERO_RESULT_SET)
		{
			break;
      }
		
		if(p_listdeal == 'Y')
		{

			if(PrntReport(p_instr_code,p_asofdate,chr_p_client,chr_l_refno_a,chr_l_trcode_a[0],chr_l_trdt_a,chr_l_settledt_a,chr_l_instr_dt,int_l_domcpac,l_quantity,l_dl_deal_amt_struct_h,&int_l_count,p_repfile,l_debug_info_ptr)==APL_FAILURE)
			{
			APL_GOBACK_FAIL
			}
		}
		if(chr_l_trcode_a[0] == DEALCD_DF || chr_l_trcode_a[0] == DEALCD_DVP)
		{
			l_quantity = -1*l_quantity;
      }
		if(chr_l_trcode_a[0] == DEALCD_RF || chr_l_trcode_a[0] == DEALCD_RVP)
		{
			l_dl_deal_amt_struct_h = -1*l_dl_deal_amt_struct_h;
      }

				l_PendTotal = l_PendTotal+l_quantity;
				l_Pamount=l_Pamount+l_dl_deal_amt_struct_h;
	}

	if(!sqlca.sqlerrd[2])
	{
		fprintf(p_repfile,"       No Transactions\n");
	}
	else
	{

		if(APL_FAILURE == CO_ToStr(l_PendTotal,18,0,chr_l_str_pendtotal))
		{
			APL_GOBACK_FAIL
		}
memset(chr_f_str_pamount,APL_NULL_CHAR,30);
CO_Rtv_FormatAmt(l_Pamount,chr_f_str_pamount,'Y','Y',l_debug_info_ptr);
strcpy(chr_l_str_pamount,chr_f_str_pamount+10);

		fprintf(p_repfile,"\n------------------------------------------------------------------------------------------------------------------------\n");
		fprintf(p_repfile,"Totals%73s%s %s"," ",chr_l_str_pendtotal,chr_l_str_pamount);
		fprintf(p_repfile,"\n------------------------------------------------------------------------------------------------------------------------\n");
	}
	EXEC SQL CLOSE pending;
	IS_ANY_ORA_ERROR

	
	EXEC SQL DECLARE failed CURSOR FOR
	SELECT CLIENT,IDENTIY_NO,DEAL_CD,DEAL_DATE,SETL_DATE,INSTRUMENT_DT,DOMESTIC_CPCLT,QTY,AMOUNT 
	FROM DL_DEAL WHERE
	INSTR_CODE=:p_instr_code AND
	DEAL_STAT !='DU' AND
	SETL_DATE <= :p_asofdate AND
  ( ((deal_cd in ('1','2')) and (INSTRUMENT_DT is null or INSTRUMENT_DT >:p_asofdate)) OR  ((deal_cd in ('3','4','5','6','7','8')) and ((INSTRUMENT_DT is null or INSTRUMENT_DT >:p_asofdate) or (MONEY_SETL_DT is null or MONEY_SETL_DT >:p_asofdate) )))AND
   CLIENT=:chr_p_client
	UNION
	SELECT CLIENT,IDENTIY_NO,DEAL_CD,DEAL_DATE,SETL_DATE,INSTRUMENT_DT,DOMESTIC_CPCLT,QTY,AMOUNT 
	FROM DL_HISDEAL WHERE
	INSTR_CODE=:p_instr_code AND
	DEAL_STAT !='DD' AND
	SETL_DATE <= :p_asofdate AND
  ( ((deal_cd in ('1','2')) and (INSTRUMENT_DT is null or INSTRUMENT_DT >:p_asofdate)) OR  ((deal_cd in ('3','4','5','6','7','8')) and ((INSTRUMENT_DT is null or INSTRUMENT_DT >:p_asofdate) or (MONEY_SETL_DT is null or MONEY_SETL_DT >:p_asofdate) )))AND
   CLIENT=:chr_p_client
	ORDER BY CLIENT,IDENTIY_NO;


			fprintf(p_repfile,"\nFailed Transactions\n");
	EXEC SQL OPEN failed;
	IS_ANY_ORA_ERROR
   for(;;)
   {
		EXEC SQL FETCH failed INTO
		:chr_l_client_a:i_dl_client,
		:chr_l_refno_a:i_indentity_no,
		:chr_l_trcode_a:i_dealcd,
		:chr_l_trdt_a:i_dlt,
		:chr_l_settledt_a:i_setldt,
		:chr_l_instr_dt:i_instrdate,
		:int_l_domcpac:i_domcpclt_cd,
		:l_quantity:i_qty,
		:l_dl_deal_amt_struct_h:i_amt;

		IS_ANY_ORA_ERROR;
 
   	if(APL_ZERO_RESULT_SET)
		{
			break;
		}

		if(p_listdeal == 'Y')
		{
			if(PrntReport(p_instr_code,p_asofdate,chr_p_client,chr_l_refno_a,chr_l_trcode_a[0],chr_l_trdt_a,chr_l_settledt_a,chr_l_instr_dt,int_l_domcpac,l_quantity,l_dl_deal_amt_struct_h,&int_l_count,p_repfile,l_debug_info_ptr)==APL_FAILURE)
			{
				APL_GOBACK_FAIL
			}
		}
		if(chr_l_trcode_a[0] == DEALCD_DF ||chr_l_trcode_a[0] == DEALCD_DVP)
		{
			l_quantity =-1*l_quantity;
      }
		if(chr_l_trcode_a[0] == DEALCD_RF ||chr_l_trcode_a[0] == DEALCD_RVP)
		{
			l_dl_deal_amt_struct_h =-1*l_dl_deal_amt_struct_h;
      }
		l_FailedTotal=l_FailedTotal+l_quantity;
		l_Famount=l_Famount+l_dl_deal_amt_struct_h;
	}
	if(!sqlca.sqlerrd[2])
	{
		fprintf(p_repfile,"        No Transactions\n");
	}

	else 
	{

		if(APL_FAILURE == CO_ToStr(l_FailedTotal,18,0,chr_l_str_failedtotal))
		{
			APL_GOBACK_FAIL
		}
memset(chr_f_str_famount,APL_NULL_CHAR,30);
CO_Rtv_FormatAmt(l_Famount,chr_f_str_famount,'Y','Y',l_debug_info_ptr);
strcpy(chr_l_str_famount,chr_f_str_famount+10);
		fprintf(p_repfile,"\n------------------------------------------------------------------------------------------------------------------------\n");
		fprintf(p_repfile,"Totals%73s%s %s"," ",chr_l_str_failedtotal,chr_l_str_famount);
   	fprintf(p_repfile,"\n------------------------------------------------------------------------------------------------------------------------\n");
	}
	EXEC SQL CLOSE failed;
	IS_ANY_ORA_ERROR
if(APL_FAILURE == CR_Prnt_DLDtPosRptFtr(p_instr_code,p_asofdate,chr_p_client,l_PendTotal,l_FailedTotal,p_repfile,l_debug_info_ptr))
	{
		APL_GOBACK_FAIL
	}

APL_GOBACK_SUCCESS // AIX - Warnings

RETURN_SUCCESS:
	CO_ProcMonitor(p_logfile,"Exiting successfully from CM_PendFailTrds",NULL,NULL);
	return(APL_SUCCESS);

RETURN_FAILURE:
	CO_ProcMonitor(p_logfile,"Exiting Unsuccessfully from CM_PendFailTrds",l_debug_info_ptr,NULL);
	return(APL_FAILURE);
}
	

int CR_Prnt_DLDtPosRptHdr(char *chr_l_instrcode_a,char *chr_l_asofdate,char *chr_l_client_a,FILE *l_repfile,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)//Changes done for AIX Migration
{
short i_mstclt =0;
short i_clnt_clr_name =0;
short i_mstcname=0;
short i_instr_name=0;
char chr_l_sysdate_b[APL_DATE_LEN] = APL_NULL_STRING;
char chr_l_mstacc_a[APL_CLIENT_LENGTH]=APL_NULL_STRING;
char chr_l_cname[CNAME_LEN_A]=APL_NULL_STRING;
char chr_l_mstcname[CNAME_LEN_A]=APL_NULL_STRING;
char chr_l_instrdesc[131]=APL_NULL_STRING;

if(APL_FAILURE == CO_RtvSysDt(chr_l_sysdate_b,l_debug_info_ptr))
{
	APL_GOBACK_FAIL
}
EXEC SQL SELECT MT_CLIENT.CLN_MASTER,MT_CLIENT.CLN_NAME,CACCOUNT1.CLN_NAME
						INTO :chr_l_mstacc_a:i_mstclt,
							  :chr_l_cname:i_clnt_clr_name,
							  :chr_l_mstcname:i_mstcname
                  FROM MT_CLIENT MT_CLIENT,MT_CLIENT CACCOUNT1
                  WHERE MT_CLIENT.CLN_CODE=:chr_l_client_a AND
						MT_CLIENT.CLN_MASTER=CACCOUNT1.CLN_CODE;

if(APL_ZERO_RESULT_SET)
	APL_GOBACK_FAIL
EXEC SQL SELECT INSTR_NAME INTO :chr_l_instrdesc:i_instr_name FROM MT_INSTRUMENT WHERE INSTR_CODE=:chr_l_instrcode_a;
if(APL_ZERO_RESULT_SET)
	APL_GOBACK_FAIL
fprintf(l_repfile,"\n%30sTrade Date Positions Report\n", " ");
fprintf(l_repfile,"%30s---------------------------\n"," ");
fprintf(l_repfile,"%.11s",chr_l_sysdate_b);
fprintf(l_repfile,"%20s%s", " ",g_mt_commonsys_params_struct_h.ca_identname);

fprintf(l_repfile,"\n\n");
fprintf(l_repfile,"\n------------------------------------------------------------------------------------------------------------------------\n");
fprintf(l_repfile,"%20sI/S/D Report For Entitlements as of %.11s"," ",chr_l_asofdate);
fprintf(l_repfile,"\n------------------------------------------------------------------------------------------------------------------------\n");
fprintf(l_repfile,"\n\n\n");
fprintf(l_repfile,"Master Account: %s   %s",chr_l_mstacc_a,chr_l_mstcname);
fprintf(l_repfile,"\n\nSub Account    :%s       %s",chr_l_client_a,chr_l_cname);
fprintf(l_repfile,"\n\nIssue          :%s     %s",chr_l_instrcode_a,chr_l_instrdesc);
fprintf(l_repfile,"\n");
APL_GOBACK_SUCCESS
RETURN_SUCCESS:
return(APL_SUCCESS);
RETURN_FAILURE:
return(APL_FAILURE);
}


int PrntReport(char *chr_l_instrcode_a,char *chr_l_asofdate,char *chr_l_client_a,char *chr_l_refno_a,char chr_l_trcode_a,char *chr_l_trdt_a,char *chr_l_settledt_a,char *chr_l_instr_dt,char *int_l_domcpac,double l_quantity,double dbl_l_amount_a,int *rowcount,FILE *l_repfile,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
char chr_l_trcodedesc[4]=APL_NULL_STRING;
char chr_l_str_qty[26]=APL_NULL_STRING;
char chr_l_shortname[13]=APL_NULL_STRING;
char chr_f_str_amount[30];
char chr_l_str_amount[20];
short i_shortclr_name=0;

EXEC SQL SELECT CLN_SHORTNM INTO chr_l_shortname:i_shortclr_name FROM MT_CLIENT WHERE CLN_CODE=:int_l_domcpac;
IS_ANY_ORA_ERROR
memset(chr_l_str_amount,APL_NULL_CHAR,20);
if(chr_l_trcode_a == DEALCD_DVP)
{
	strcpy(chr_l_trcodedesc,"DVP");
}
else if(chr_l_trcode_a == DEALCD_DF)
{
	strcpy(chr_l_trcodedesc,"DF ");
}
else if(chr_l_trcode_a == DEALCD_RF)
{
	strcpy(chr_l_trcodedesc,"RF ");
}
else if(chr_l_trcode_a == DEALCD_RVP)
{
	strcpy(chr_l_trcodedesc,"RVP");
}
if(chr_l_trcode_a == DEALCD_CD)
{
	strcpy(chr_l_trcodedesc,"CD");
}
else if(chr_l_trcode_a == DEALCD_CR)
{
	strcpy(chr_l_trcodedesc,"CR ");
}
else if(chr_l_trcode_a == DEALCD_DCD)
{
	strcpy(chr_l_trcodedesc,"DCD");
}
else if(chr_l_trcode_a == DEALCD_RCR)
{
	strcpy(chr_l_trcodedesc,"RCR");
}
if(APL_FAILURE==CO_PadString(chr_l_refno_a,"R",16," ",l_debug_info_ptr))
{
	APL_GOBACK_FAIL
}
if(APL_FAILURE==CO_PadString(int_l_domcpac,"R",13," ",l_debug_info_ptr))
{
	APL_GOBACK_FAIL
}
if(strlen(chr_l_instr_dt) == 0)
{
	strcpy(chr_l_instr_dt,"           ");
}
if(APL_FAILURE == CO_ToStr(l_quantity,25,0,chr_l_str_qty))
{
	APL_GOBACK_FAIL
}


memset(chr_f_str_amount,APL_NULL_CHAR,30);
CO_Rtv_FormatAmt(dbl_l_amount_a,chr_f_str_amount,'Y','Y',l_debug_info_ptr);
strcpy(chr_l_str_amount,chr_f_str_amount+10);
fprintf(l_repfile,"%s %s  %.10s %.10s    %.10s %s  %s   %s",chr_l_refno_a,chr_l_trcodedesc,chr_l_trdt_a,chr_l_settledt_a,chr_l_instr_dt,chr_l_shortname,chr_l_str_qty,chr_l_str_amount);
fprintf(l_repfile,"\n");
APL_GOBACK_SUCCESS
RETURN_SUCCESS:
return(APL_SUCCESS);
RETURN_FAILURE:
return(APL_FAILURE);
}

int CR_Prnt_DLDtPosRptFtr(char *chr_l_instrcode_a,char *chr_l_asofdate,char *chr_l_client_a,double l_PendingQty,double l_FailedQty,FILE *l_repfile,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)//Changes done for AIX Migration
{
short i_holdings = 0;
short i_dl_client =0;
short i_instr_code = 0;
short i_asofdate = 0;

char chr_l_sysdate_b[APL_DATE_LEN]	=	APL_NULL_STRING;
double l_holdings =0;
double flt_l_sum = 0;
char chr_l_str_pendingqty[19]=APL_NULL_STRING;
char chr_l_str_failedqty[19]=APL_NULL_STRING;
char chr_l_str_holdings[19]=APL_NULL_STRING;
char chr_l_str_sum[19]=APL_NULL_STRING;

if(APL_FAILURE == CO_RtvSysDt(chr_l_sysdate_b,l_debug_info_ptr))
{
	APL_GOBACK_FAIL
}

if(strcmp(chr_l_sysdate_b,chr_l_asofdate)==0)
{
	EXEC SQL SELECT SUM(SAFEKEEP_POS) 
	INTO :l_holdings:i_holdings
	FROM DL_SAFEK 
	WHERE INSTR_CODE=:chr_l_instrcode_a:i_instr_code 
	AND CLIENT =:chr_l_client_a:i_dl_client;

}
else
{
	EXEC SQL SELECT SUM(SAFEKEEP_POS)
	INTO :l_holdings:i_holdings
   FROM DL_HISSAFEK 
	WHERE INSTR_CODE=:chr_l_instrcode_a:i_instr_code
	AND CLIENT=:chr_l_client_a:i_dl_client
	AND POSIT_DATE=:chr_l_asofdate:i_asofdate;
}	
IS_ANY_ORA_ERROR;
	if(APL_FAILURE == CO_ToStr(l_PendingQty,18,0,chr_l_str_pendingqty))
	{
		APL_GOBACK_FAIL
	}
	if(APL_FAILURE == CO_ToStr(l_FailedQty,18,0,chr_l_str_failedqty))
	{
		APL_GOBACK_FAIL
	}
	if(APL_FAILURE == CO_ToStr(l_holdings,18,0,chr_l_str_holdings))
	{
		APL_GOBACK_FAIL
	}
fprintf(l_repfile,"\n\n");
fprintf(l_repfile,"%20sSummary", " ");
fprintf(l_repfile,"\n%25sHeld In SafeKeeping%10s%s"," "," ",chr_l_str_holdings);
fprintf(l_repfile,"\n%25sPending%22s%s", " "," ",chr_l_str_pendingqty);
fprintf(l_repfile,"\n%25sFailed%23s%s", " "," ",chr_l_str_failedqty);
flt_l_sum=l_holdings+l_PendingQty+l_FailedQty;
	if(APL_FAILURE == CO_ToStr(flt_l_sum,18,0,chr_l_str_sum))
	{
		APL_GOBACK_FAIL
	}
fprintf(l_repfile,"\n%20sTotal Eligible For Entitlements%3s%s"," "," ",chr_l_str_sum);
fprintf(l_repfile,"\n%20sAs Of %.10s"," ",chr_l_asofdate);
APL_GOBACK_SUCCESS
RETURN_SUCCESS:
return(APL_SUCCESS);
RETURN_FAILURE:
return(APL_FAILURE);
}

int CR_Prnt_DLDtPosRpt(char *chr_l_instrcode_a,char *chr_l_asofdate,FILE *l_repfile,DEBUG_INFO_STRUCT_H **l_debug_info_ptr) //Changes done for AIX Migration
{
char chr_l_sysdate_b[APL_DATE_LEN]=APL_NULL_STRING;
char chr_l_nextdate[APL_DATE_LEN]=APL_NULL_STRING;
char chr_l_client_a[APL_CLIENT_LENGTH]=	APL_NULL_STRING;
char chr_l_mstacc_a[APL_CLIENT_LENGTH] =	APL_NULL_STRING;
char chr_l_cname[CNAME_LEN_A]	    =	APL_NULL_STRING;
char chr_l_mstcname[CNAME_LEN_A]	 =	APL_NULL_STRING;
char chr_l_newcname[26]	    =	APL_NULL_STRING;
char chr_l_newmstcname[26]	 =	APL_NULL_STRING;
char chr_l_cubk[2] =APL_NULL_STRING;
char chr_l_accstatus[3]=APL_NULL_STRING;
double l_safekeep_pos ;
double l_val_rec ;
double l_nval_rec ;
double l_val_del ;
double l_nval_del ;
short i_safekeep_pos=0 ;
short i_val_rec=0 ;
short i_nval_rec=0 ;
short  i_val_del=0 ;
short i_nval_del=0 ;
float flt_l_sum=0.0;
short i_sum=0;
short i_dl_client =0;
short i_mstclt =0;
short i_clnt_clr_name =0;
short i_mstcname =0;
short i_clt_brk_all = 0;
short i_cltstatus = 0;
EXEC SQL VAR chr_l_client_a IS STRING;
EXEC SQL VAR chr_l_mstacc_a IS STRING;
EXEC SQL VAR chr_l_cname IS STRING;
EXEC SQL VAR chr_l_mstcname IS STRING;
EXEC SQL VAR chr_l_accstatus IS STRING;

if(APL_FAILURE == CO_RtvSysDt(chr_l_sysdate_b,l_debug_info_ptr))
{
	APL_GOBACK_FAIL
}

		fprintf(l_repfile,"\n\nAccounts which hold no positions for instrument %s",chr_l_instrcode_a);
fprintf(l_repfile,"\n------------------------------------------------------------------------------------------------------------------------\n");
		fprintf(l_repfile,"Master Account  Master Account Name  Account      Account Name ");                 
fprintf(l_repfile,"\n------------------------------------------------------------------------------------------------------------------------\n");


if(strcmp(chr_l_sysdate_b,chr_l_asofdate)==0)
{
	EXEC SQL DECLARE acclive CURSOR FOR 
		SELECT MT_CLIENT.CLN_CODE,MT_CLIENT.CLN_MASTER,MT_CLIENT.CLN_NAME,CACCOUNT1.CLN_NAME
      FROM MT_CLIENT MT_CLIENT,MT_CLIENT CACCOUNT1
      WHERE MT_CLIENT.CLN_BRK_ALL <> 'B' AND MT_CLIENT.STATUS <>'CA'
      	AND MT_CLIENT.CLN_MASTER=CACCOUNT1.CLN_CODE
         AND  NOT EXISTS  (SELECT CLIENT FROM DL_SAFEK B WHERE MT_CLIENT.CLN_CODE = B.CLIENT
         	AND B.INSTR_CODE = :chr_l_instrcode_a
            GROUP BY B.CLIENT,
            SAFEKEEP_POS+VAL_REC+NVALRECEIVE+DP_REC-VAL_DEL-NVALDELIVER-DP_DEL
            HAVING SUM( SAFEKEEP_POS+VAL_REC+NVALRECEIVE+DP_REC-VAL_DEL-NVALDELIVER-DP_DEL ) > 0 ) 
   	ORDER BY MT_CLIENT.CLN_CODE;

   	EXEC SQL OPEN acclive;

	IS_ANY_ORA_ERROR
	for(;;)
	{
		EXEC SQL FETCH acclive INTO 	:chr_l_client_a:i_dl_client,
										 		:chr_l_mstacc_a:i_mstclt,
         	                    		:chr_l_cname:i_clnt_clr_name,
            	                 		:chr_l_mstcname:i_mstcname;

		IS_ANY_ORA_ERROR

 		if(APL_ZERO_RESULT_SET)
		{
			break;
		}

		strncpy(chr_l_newcname,chr_l_cname,25);
		strncpy(chr_l_newmstcname,chr_l_mstcname,25);
		chr_l_newcname[25]='\0';
		chr_l_newmstcname[25]='\0';
		fprintf(l_repfile,"%-10s %-25s %-10s %-25s\n",chr_l_mstacc_a,chr_l_newmstcname,chr_l_client_a,chr_l_newcname); 
	}
}
else
{
	EXEC SQL SELECT TO_DATE(:chr_l_asofdate)+1 INTO :chr_l_nextdate FROM DUAL;
	
	EXEC SQL DECLARE acco CURSOR FOR 
		SELECT MT_CLIENT.CLN_CODE,MT_CLIENT.CLN_MASTER,MT_CLIENT.CLN_NAME,CACCOUNT1.CLN_NAME
      FROM MT_CLIENT MT_CLIENT,MT_CLIENT CACCOUNT1
      WHERE MT_CLIENT.CLN_BRK_ALL <> 'B' AND MT_CLIENT.STATUS <>'CA'
      	AND MT_CLIENT.CLN_MASTER=CACCOUNT1.CLN_CODE
         AND  NOT EXISTS  (SELECT CLIENT FROM DL_HISSAFEK B WHERE MT_CLIENT.CLN_CODE = B.CLIENT
         	AND B.INSTR_CODE = :chr_l_instrcode_a
            AND B.POSIT_DATE >= :chr_l_asofdate AND B.POSIT_DATE <=:chr_l_nextdate  
            GROUP BY B.CLIENT, SAFEKEEP_POS+VAL_REC+NVALRECEIVE-VAL_DEL-NVALDELIVER
            HAVING SUM( SAFEKEEP_POS+VAL_REC+NVALRECEIVE-VAL_DEL-NVALDELIVER ) > 0 ) 
   	ORDER BY MT_CLIENT.CLN_MASTER,MT_CLIENT.CLN_CODE;

   	EXEC SQL OPEN acco;
	
	IS_ANY_ORA_ERROR
	for(;;)
	{
		EXEC SQL FETCH acco INTO :chr_l_client_a:i_dl_client,
										 :chr_l_mstacc_a:i_mstclt,
                               :chr_l_cname:i_clnt_clr_name,
                               :chr_l_mstcname:i_mstcname;
		
		if(APL_ZERO_RESULT_SET)
		{	
			break;
		}
		strncpy(chr_l_newcname,chr_l_cname,25);
		strncpy(chr_l_newmstcname,chr_l_mstcname,25);
		chr_l_newcname[25]='\0';
		chr_l_newmstcname[25]='\0';
		fprintf(l_repfile,"%-10s %-25s %-10s %-25s\n",chr_l_mstacc_a,chr_l_newmstcname,chr_l_client_a,chr_l_newcname); 
	}
}
	APL_GOBACK_SUCCESS
RETURN_SUCCESS:
	return(APL_SUCCESS);
RETURN_FAILURE:
	return(APL_FAILURE);
}
