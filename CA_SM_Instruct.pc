/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*******************************************************************************
 *
 * Module Name         :         Corporate Actions
 *
 * File Name           :         CA_SM_Instruct.pc
 *
 * Description         :	This exe deletes and/or updates records and/or 
				re numbers the resolution number for a particular
				SM event in the tables CA_SM_RESOLUTION and
				CA_INSTRUCTION
				It also inserts a new record in the tables
				CA_SM_RESOLUTION and CA_INSTRUCTION
 *
 *            Version Control Block
 *
 * Date        Version          Author          Description         RFS No.
 * ---------   --------  ---------------------  ------------------  --------------
 * 09/01/2007   1.0       	Jiger 		New File            RFS_CA_020 / RFS_CA_021    
 * 21/12/2011   1.1             Gouse         Program is modified
 *                                              to get the DB login
 *                                              details in preceden
 *                                              ce order first from
 *                                              config file, and if
 *                                              unavailable,   then
 *                                              a  decrypted  value
 *                                              from  an  encrypted
 *                                              file by calling the
 *                                              remote application.
 * *****************************************************************************/



#include "Intellect_Common.h"
#include "Intellect_Interface.h"
#include "BT_Common.h"
#include "CO_IndStructdef.h"
#include "CO_Commdef.h"
//#include<stdlib.h>



/********** Web Custody Single Login Changes : Gouse *********/

char g_custody_web_ind[2];
#define WEB_INDICATOR  "W"

/**********************************************************************/

EXEC SQL INCLUDE SQLCA.H;

char chr_l_sys_date[APL_DATE_LEN] = APL_NULL_STRING;

int main(int argc,char **argv)
{

	/********** Web Custody Single Login Changes : Gouse *********/

	char *chr_webdata;
	char g_proc_data[4001] = APL_NULL_STRING;
	char p_web_data[4001] = APL_NULL_STRING;

	/**********************************************************************/

	FILE *c_flogfile = NULL;
	FILE* c_logfile = APL_OUT_FILE;

	printf("\n\t********* Entered main of CA_SM_Instruct.pc *********\n");
	FILE *l_finifile;

	DEBUG_INFO_STRUCT_H *l_debug_info_ptr = (DEBUG_INFO_STRUCT_H *) NULL;
	INTL_ENV_DATA_STRUCT_H l_intl_env_data_h;

	char l_temp_processing_status[51] = APL_NULL_STRING;
	short i_temp_processing_status = -1;

	char chr_l_hoff_file[PATH_LENGTH] = APL_NULL_STRING;
	char chr_l_inifile[PATH_LENGTH] = APL_NULL_STRING;
	struct sqlca sqlca;
	int int_retval = 0;

	/* char chr_uname[APL_USERID_LEN] = APL_NULL_STRING; * Commented for Web Intellect Encryption - Decryption Changes - Naren V */
	char chr_uname[APL_USERID_LEN+20] = APL_NULL_STRING;   /* Increased the size of User Id for Web Intellect Encryption - Decryption Changes - NarenV */
	char chr_custody_id_b[APL_USERID_LEN] = APL_NULL_STRING;
	/* char chr_passwd[APL_USERID_LEN] = APL_NULL_STRING; * Commented for Web Intellect Encryption - Decryption Changes - Naren V */
	char chr_passwd[APL_PASSWD_LEN] = APL_NULL_STRING; /* Added for Web Intellect Encryption - Decryption Changes - Naren V */

	EXEC SQL BEGIN DECLARE SECTION;
	int int_l_count = 0;
	EXEC SQL VAR chr_l_sys_date IS STRING;
	EXEC SQL VAR chr_uname IS STRING;
	EXEC SQL VAR chr_passwd IS STRING;
	EXEC SQL END DECLARE SECTION;

	memset(&l_intl_env_data_h, NULL, sizeof(INTL_ENV_DATA_STRUCT_H));
   	strcpy(l_intl_env_data_h.usr, argv[3]);
   	strcpy(l_intl_env_data_h.h_mode, argv[4]);
   	strcpy(l_intl_env_data_h.processtion, argv[5]);
   	strcpy(l_intl_env_data_h.auth_req, argv[6]);
   	strcpy(l_intl_env_data_h.subprocess, argv[7]);
   	strcpy(l_intl_env_data_h.h_process, argv[8]);


	/********** Web Custody Single Login Changes : Vinay Kalaskar *********/

	strcpy(g_proc_data,argv[9]);
	
	printf("\n\n=== Displaying PROC_DATA ====== :|%s|\n",g_proc_data);
	fflush(stdout);

    strcpy(p_web_data,strtok_r(g_proc_data,WEB_INDICATOR,&chr_webdata));

	if(chr_webdata != NULL)
	{
		strcpy(g_custody_web_ind,"W");
	    printf("=== System Running As Web : |%s|\n\n",g_custody_web_ind);
	}
    else
	{
		strcpy(g_custody_web_ind,"C");
	    printf("=== System Running As Custody : |%s|\n\n",g_custody_web_ind);
	}


	/**********************************************************************/


	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");
	if ( ( l_finifile = fopen(chr_l_inifile,"r") ) == NULL)
	{
		APL_GOBACK_FAIL
	}
	sqlca.sqlcode = 0;
	//APL_FETCH_DB_LOGIN_DETAILS(l_finifile, chr_custody_id_b, chr_uname, chr_passwd, APL_OUT_FILE, &l_debug_info_ptr)
     /* if ( CO_ReadToken(l_finifile,"WEB_INTL_DB_USR",chr_uname,l_debug_info_ptr) == APL_FAILURE)
        {
                printf("KS --- Could not find DB username \n EXITING \n FAILED IN SM_Resolution");
		APL_GOBACK_FAIL
        }
        if ( CO_ReadToken(l_finifile,"WEB_INTL_DB_PWD",chr_passwd,l_debug_info_ptr) == APL_FAILURE)
        {
                printf("KS --- Could not find DB password \n EXITING \n FAILED IN SM_Resolution");
		APL_GOBACK_FAIL
        } **** Commented for Web Intellect Encryption - Decryption Changes **** Naren V */


	/** Web Intellect Encryption - Decryption Changes - Start - Naren V **/
	APL_FETCH_DB_LOGIN_DETAILS(l_finifile, "W", chr_uname, chr_passwd, APL_OUT_FILE, &l_debug_info_ptr)

	if ( !strlen(chr_uname) )
	{
		CO_ProcMonitor(APL_OUT_FILE,"\n Could not find Web Int DB username \n EXITING \n FAILED IN SM_Resolution",NULL,NULL);
		APL_GOBACK_FAIL
        }

	if ( !strlen(chr_passwd) )
	{
	CO_ProcMonitor(APL_OUT_FILE,"\n Could not find Web Int DB password \n EXITING \n FAILED IN SM_Resolution",NULL,NULL);
                APL_GOBACK_FAIL
	}
	/** Web Intellect Encryption - Decryption Changes - End   - Naren V **/

	printf("\t********* Connecting to Database .........\n");
	
	EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;

	IS_ANY_ORA_ERROR
	printf("\t********* argv[0] |%s| argv[1] |%s| argv[2] |%s| \n",argv[0],argv[1],argv[2]);


	if (APL_FAILURE == CO_Rtv_RptFileName( "SM",
						APL_LOGFILE_DESC,
						100,
						argv[5],
						argv,
						&c_flogfile,
						&l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	printf("\t*********Entering SYS_BATCHPROC for update\n");
	EXEC SQL 
	SELECT PROCESSING_STATUS into :l_temp_processing_status:i_temp_processing_status
	FROM SYS_BATCHPROC
	WHERE PROCESS_NAME=:argv[0]
		AND PROC_INIT=:argv[1]
		AND STARTDATE=:argv[2]
		AND STATUS='started'
	FOR UPDATE OF PROCESSING_STATUS, STATUS;

	IS_ANY_ORA_ERROR

	if(APL_ZERO_RESULT_SET)
	{
		CO_ProcMonitor(c_flogfile,"E:No entry in batch_in_proc\n",NULL,NULL);
		APL_GOBACK_FAIL
	}

	if (APL_FAILURE == CO_RtvSysParams(&l_debug_info_ptr))
	{
		CO_ProcMonitor(c_flogfile, "Error In Getting System Parameters", NULL, NULL);
		CO_Proc_RptClose(c_flogfile, &l_debug_info_ptr);
		APL_GOBACK_FAIL
	}

	/* Not required
	EXEC SQL SELECT to_char(SYS_DATE, 'DD/MM/YYYY')
	into :chr_l_sys_date FROM PRO_SYS_DATE;

	IS_ANY_ORA_ERROR

	printf("\n\t********* ORA ERROR -- [%d]\n", sqlca.sqlcode);
	printf("\t********* System date |%s|\n", chr_l_sys_date);

	fprintf(c_flogfile,"System Date : %s\n",chr_l_sys_date);
	*/
	fflush(stdout);

	CO_ProcMonitor(c_flogfile,"Start Processing\n",&l_debug_info_ptr,&l_intl_env_data_h);

	printf("\t********* Param string recd is [%s]\n", argv[9]);
	printf("\t********* Calling function Upd_Resolution\n");
	int_retval = Upd_Resolution(argv[9], &l_intl_env_data_h, c_flogfile, &l_debug_info_ptr);

	if(int_retval == APL_FAILURE)
	{
		CO_ProcMonitor(c_flogfile,"Returned unsucessfully from Upd_Resolution\n",&l_debug_info_ptr,&l_intl_env_data_h);
	}

	CO_ProcMonitor(c_flogfile,"Finished Processing\n",&l_debug_info_ptr,&l_intl_env_data_h);

	RETURN_SUCCESS :
	EXEC SQL UPDATE SYS_BATCHPROC
	SET  status = 'completed'
	WHERE PROCESS_NAME=:argv[0]
	AND   PROC_INIT=:argv[1]
	AND   STARTDATE=:argv[2]
	AND   STATUS='started';

	EXEC SQL COMMIT WORK RELEASE;
	fprintf(c_flogfile,"Successfully Exiting the program CA SM Resolution update\n");
	CO_Proc_RptClose(c_flogfile, &l_debug_info_ptr);
	fclose(l_finifile);
	exit(APL_SUCCESS);


	RETURN_FAILURE :
	EXEC SQL ROLLBACK WORK RELEASE;
	fprintf(c_flogfile,"Unsuccessfully Exiting the program CA SM Resolution update\n");
	fclose(l_finifile);
	exit(APL_FAILURE);

}


int Upd_Resolution(char *p_param_str,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,FILE *p_logfile,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	printf("\n\t********* Entered function Upd_Resolution *********\n");

	FILE *c_flogfile;
        INTL_ENV_DATA_STRUCT_H l_intl_env_data_h;

	c_flogfile = p_logfile;

	char **temp;
        char l_del[4000] = APL_NULL_STRING;
        char l_update[4000] = APL_NULL_STRING;
        char l_insert[4000] = APL_NULL_STRING;
        char l_tot_resolu_num[3] = APL_NULL_STRING;
	char l_resolution_str[3] = APL_NULL_STRING;
        char l_corp_id[21] = APL_NULL_STRING;
        char l_cln_code[20] = APL_NULL_STRING;
	char l_auto_auth[2] = APL_NULL_STRING;
        char l_update_rec[20][100];
        char l_del_rec[20][100];
        char l_access_stamp[APL_DATE_LEN] = APL_NULL_STRING;
        char l_access_stamp_tab[APL_DATE_LEN] = APL_NULL_STRING;
	char chr_sys_access_stamp[APL_DATE_LEN] = APL_NULL_STRING;
	char dt_of_instr[APL_DATE_LEN] = APL_NULL_STRING;
	char l_instr_code[10] = APL_NULL_STRING;

	int i = 0;
        int l_int_num = 0;
        int l_int_num1 = 0;
        int l_num_of_resolution = 0;
        int l_min = 0;
        int l_max = 0;
        int l_count = 0;

	int l_unauthcount=0; // Added By Kalyan on 18/05/2007

	short l_auto_auth_i = -1;

	fprintf(c_flogfile,"Entered function Upd_Resolution\n");

	// Retrieve the system date & time in string - chr_sys_access_stamp
        if(CO_RtvMachDtTime(chr_sys_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
        {
        	APL_GOBACK_FAIL
        }

        strcpy(dt_of_instr, chr_sys_access_stamp);
        printf("Retrieved sys date = |%s|\n", chr_sys_access_stamp);
        printf("Dt of Instruction = |%s|\n", dt_of_instr);
	fprintf(c_flogfile,"Access Stamp -- |%s|\n", chr_sys_access_stamp);

	printf("\t********* Splitting the main param string [%s]\n", p_param_str);
	fflush(stdout);
	fprintf(c_flogfile,"Main Param String is [%s]\n", p_param_str);
	if(APL_FAILURE == CO_SplitStr(p_param_str, '|', &l_int_num, &temp))
	{
	CO_ProcMonitor(c_flogfile,"Failure from first CO_SplitStr with seperator as |",l_debug_info_ptr,NULL);
		APL_GOBACK_FAIL
	}

	if(l_int_num != 7)
	{
		printf("\t********* Total number of arguments for | = |%d|\n", l_int_num);
		CO_ProcMonitor(c_flogfile,"Wrong number of arguments for |",l_debug_info_ptr, NULL);
		APL_GOBACK_FAIL
	}

	printf("\t********* Number of arguments = |%d|\n", l_int_num);
	fflush(stdout);

	strcpy(l_del, temp[1]);
	strcpy(l_update, temp[2]);
	strcpy(l_insert, temp[3]);
	strcpy(l_corp_id, temp[4]);
	strcpy(l_cln_code, temp[5]);
	strcpy(l_tot_resolu_num, temp[6]);

	printf("l_del 		|%s|\n", l_del);
	printf("l_update 	|%s|\n", l_update);
	printf("l_insert 	|%s|\n", l_insert);
	printf("l_corp_id 	|%s|\n", l_corp_id);
	printf("l_cln_code 	|%s|\n", l_cln_code);
	printf("l_tot_resolu_num|%s|\n", l_tot_resolu_num);

	fprintf(c_flogfile,"String for Delete is |%s|\n", l_del);
	fprintf(c_flogfile,"String for Update is |%s|\n", l_update);
	fprintf(c_flogfile,"String for Insert is |%s|\n", l_insert);
	fprintf(c_flogfile,"String for CorpID is |%s|\n", l_corp_id);
	fprintf(c_flogfile,"String for Client is |%s|\n", l_cln_code);
	fprintf(c_flogfile,"String for Resolu is |%s|\n", l_tot_resolu_num);

	// Check the Auto Authorization flag in WI_CLIENT_MAP for the given Client
	EXEC SQL
	SELECT 	distinct AUTO_AUTH into :l_auto_auth:l_auto_auth_i
	FROM	WI_CLIENT_MAP
	WHERE WI_LOGIN = :p_intl_envdatastruct_h->usr;
        /*
	WHERE	CLN_CODE = :l_cln_code
		OR CLN_MASTER = :l_cln_code;
	*/
	IS_ANY_ORA_ERROR

	printf("l_auto_auth |%s|\n", l_auto_auth);
	fprintf(c_flogfile," Auto Authorization flag is |%s|\n", l_auto_auth);

	if(strlen(l_del) != 0)
	{
		/* Foll will return the num of resolution and access stamp for all records to be deleted */
		printf("\n\t********* Entered the del loop \n");
		if(APL_FAILURE == CO_SplitStr(l_del, ';', &l_int_num, &temp))
		{
			CO_ProcMonitor(c_flogfile,"Failure from CO_SplitStr", l_debug_info_ptr, NULL);
			APL_GOBACK_FAIL
		}

		printf("Number of arguments for del |%d|\n", l_int_num);
		fprintf(c_flogfile,"Number of records to be deleted -- |%d|\n", l_int_num);

		for(i=0; i<l_int_num; i++)
		{
			strcpy(l_del_rec[i], temp[i]);
			printf("\ttemp[%d] -- |%s|.....l_del_rec[%d] -- |%s|\n",i , temp[i], i, l_del_rec[i]);
			fprintf(c_flogfile,"Record %d for Deleting -- |%s|\n", i+1, l_del_rec[i]);
		}

		/* Commented -- Not required
		// Define cursor to fetch the access stamp
		EXEC SQL
		DECLARE acc_stmp_cursor CURSOR FOR
		SELECT  ACCESS_STAMP
		FROM    CA_SM_RESOLUTION
		WHERE   CORP_ID = :l_corp_id
			AND CLN_CODE = :l_cln_code;
		IS_ANY_ORA_ERROR

		// Open cursor acc_stmp_cursor
                EXEC SQL OPEN acc_stmp_cursor;
		IS_ANY_ORA_ERROR
		Commented -- Not required */

		for(i=0; i<l_int_num; i++)
		{

			fprintf(c_flogfile,"Processing Record %d -- |%s|\n", i+1, l_del_rec[i]);

			// Foll will return the num of resolution and access stamp for a particular record
			if(APL_FAILURE == CO_SplitStr(l_del_rec[i], '^', &l_int_num1, &temp))
			{
				CO_ProcMonitor(c_flogfile, "Failure from CO_SplitStr", l_debug_info_ptr, NULL);
				APL_GOBACK_FAIL
			}
			printf("Number of Arguments -- |%d|\n", l_int_num1); 

			strcpy(l_resolution_str, temp[0]);
			l_num_of_resolution = atoi(l_resolution_str); 
			strcpy(l_access_stamp, temp[1]);

			printf("l_num_of_resolution -- |%d| ..... for i = |%d|\n", l_num_of_resolution, i);
			printf("l_access_stamp -- |%s| ..... for i = |%d|\n", l_access_stamp, i);

			/* Commented -- Not required
			// Fetch value from cursor acc_stmp_cursor
			EXEC SQL FETCH acc_stmp_cursor INTO :l_access_stamp_tab;
			IS_ANY_ORA_ERROR
			Commented -- Not required */

			EXEC SQL
			SELECT ACCESS_STAMP into :l_access_stamp_tab
			FROM	CA_SM_RESOLUTION
			WHERE	CORP_ID = :l_corp_id
				AND CLN_CODE = :l_cln_code
				AND RESOLUTION = :l_num_of_resolution;
			IS_ANY_ORA_ERROR

			// If access stamp does not match, then break
			if(strcmp(l_access_stamp_tab, l_access_stamp) != 0)
			{
				break;
			}

			printf("Access Stamp matched..... now deleting record from ca_sm_instruction\n");

			fprintf(c_flogfile,"Deleting record with Corp id |%s|, Client code |%s| and Resolution number |%d|\n", l_corp_id, l_cln_code, l_num_of_resolution);

			EXEC SQL
			DELETE from CA_SM_RESOLUTION
			WHERE	CORP_ID = :l_corp_id
				AND RESOLUTION = :l_num_of_resolution
				AND CLN_CODE = :l_cln_code;
			IS_ANY_ORA_ERROR

			printf("For delete statement of CA_SM_INSTRUCTION -- ORA -- [%d]\n", sqlca.sqlcode);
			fprintf(c_flogfile,"Deleted successfully\n");

			/* 
			Commented -- not required -- Updating CA_INSTRUCTION in the end
			if(l_tot_resolu_num == 0)
			{
				printf("..... DELETING record from CA_INSTRUCTION\n");

				EXEC SQL
				DELETE from CA_INSTRUCTION
				WHERE	CORP_ID = :l_corp_id
					AND CLN_CODE = :l_cln_code;
				IS_ANY_ORA_ERROR
				printf("For del statement of CA_INSTRUCTION -- ORA -- [%d]\n", sqlca.sqlcode);
			}
			else
			{
				printf("..... UPDATING record in CA_INSTRUCTION\n");

				EXEC SQL
				UPDATE CA_INSTRUCTION
				SET NUM_OF_RESOLUTIONS = :l_tot_resolu_num
				WHERE	CORP_ID = :l_corp_id
					AND CLN_CODE = :l_cln_code;
				IS_ANY_ORA_ERROR
				printf("For update statement of CA_INSTRUCTION -- ORA -- [%d]\n", sqlca.sqlcode);
			}
			Commented -- not required -- Updating CA_INSTRUCTION in the end 
			*/
		}
	}

	if(strlen(l_update) != 0)
	{
		printf("\t********* In the update loop\n");
		if(APL_FAILURE == CO_SplitStr(l_update, '@', &l_int_num, &temp))
		{
			CO_ProcMonitor(c_flogfile, "Failure from CO_SplitStr", l_debug_info_ptr, NULL);
			APL_GOBACK_FAIL
		}

		printf("Number of arguments for update -- |%d|\n", l_int_num);
		for(i=0; i<l_int_num; i++)
                {
                        strcpy(l_update_rec[i], temp[i]);
			printf("l_update_rec[%d] -- |%s|\n", i, l_update_rec[i]);
			fprintf(c_flogfile,"Record %d for Updating -- |%s|\n", i+1, l_update_rec[i]);
		}

		for(i=0; i<l_int_num; i++)
		{
			printf("\tIn update for loop\n");
			printf("l_update_rec[%d] -- |%s|\n", i, l_update_rec[i]);
			if(APL_FAILURE == CO_SplitStr(l_update_rec[i], '^', &l_int_num1, &temp))
			{
				CO_ProcMonitor(c_flogfile, "Failure from CO_SplitStr", l_debug_info_ptr, NULL);
				APL_GOBACK_FAIL
			}
			printf("Number of arguments = |%d|\n", l_int_num1);

			if(l_int_num1 != 7)
			{
				printf("\t!!!!!!!!! Total number of arguments = |%d| i.e. != 7", l_int_num1);
				printf(" ..... Hence failed\n");
                		CO_ProcMonitor(c_flogfile, "Wrong number of arguments", l_debug_info_ptr, NULL);
                		APL_GOBACK_FAIL
			}
			else
			{
				printf("In the == 7 loop\n");
				printf("temp[0] -- Consent Yes = |%s|\n", temp[0]);
				printf("temp[1] -- Consent No = |%s|\n", temp[1]);
				printf("temp[2] -- Abstain = |%s|\n", temp[2]);
				printf("temp[3] -- Date of Instruction = |%s|\n", dt_of_instr); 
				printf("temp[4] -- Status = |%s|\n", temp[4]);
				printf("temp[5] -- Access Stamp = |%s|\n", chr_sys_access_stamp); 
				printf("temp[6] -- Resolution = |%s|\n", temp[6]);
				printf("Corp Id = |%s|\n", l_corp_id); 
				printf("Cln Code = |%s|\n", l_cln_code);
				printf("Maker = |%s|\n", p_intl_envdatastruct_h->usr);
				printf("Maker Date = |%s|\n", chr_sys_access_stamp);

				strncpy(l_instr_code, l_corp_id, 8);
				printf("Instr code = |%s|\n", l_instr_code);
				fprintf(c_flogfile,"Updating record with Corp id |%s|, Client code |%s| and Resolution number |%s|\n", l_corp_id, l_cln_code, temp[6]);

				if(strcmp(l_auto_auth, "Y") == 0)
				{
					EXEC SQL
					UPDATE 	CA_SM_RESOLUTION
					SET 	CONSENT_YES = :temp[0], 
						CONSENT_NO = :temp[1], 
						ABSTAIN = :temp[2],
						DT_OF_INST = :dt_of_instr, 
						STATUS = 'AA', 
						ACCESS_STAMP = :chr_sys_access_stamp,
						MAKER = :p_intl_envdatastruct_h->usr,
						MAKER_DT = :chr_sys_access_stamp,
						CHECKER = 'SYSTEM',
						CHECKER_DT = :chr_sys_access_stamp
					WHERE 	CORP_ID = :l_corp_id
       		                         	AND CLN_CODE = :l_cln_code
       		                         	AND RESOLUTION = :temp[6];
					IS_ANY_ORA_ERROR
				}
				else
				{
					EXEC SQL
					UPDATE 	CA_SM_RESOLUTION
					SET 	CONSENT_YES = :temp[0], 
						CONSENT_NO = :temp[1], 
						ABSTAIN = :temp[2],
						DT_OF_INST = :dt_of_instr, 
						STATUS = :temp[4], 
						ACCESS_STAMP = :chr_sys_access_stamp,  
						MAKER = :p_intl_envdatastruct_h->usr,
						MAKER_DT = :chr_sys_access_stamp,
						CHECKER = '',
						CHECKER_DT = '' 
					WHERE 	CORP_ID = :l_corp_id
       		                         	AND CLN_CODE = :l_cln_code
       		                         	AND RESOLUTION = :temp[6];
					IS_ANY_ORA_ERROR
				}

				fprintf(c_flogfile,"Updated successfully");
			}
		}
	}

	if((strlen(l_del) !=0) || (strlen(l_update) != 0))
	{ 
		printf("\t********* Re numbering loop\n");
		fprintf(c_flogfile,"Re numbering the Resolution numbers\n");

		// Rearranging the records and re-numbering the Resolution number -- Start -- 
		EXEC SQL
		SELECT 	count(RESOLUTION) INTO l_count
		FROM 	CA_SM_RESOLUTION
		WHERE   CORP_ID = :l_corp_id
			AND CLN_CODE = :l_cln_code;

		IS_ANY_ORA_ERROR

		printf("\t\tCount -- [%d] ********\n", l_count);

		int temp_resolution[20] ;
		short i_temp_resolution[20];

	/* 
	Commented coz defining a cursor is not required 
		// Define cursor to fetch resolution numbers of all the records
		EXEC SQL
		DECLARE resolu_cursor CURSOR for
		SELECT	RESOLUTION 
		FROM	CA_SM_RESOLUTION
		WHERE   CORP_ID = :l_corp_id
			AND CLN_CODE = :l_cln_code;

		IS_ANY_ORA_ERROR

		// Open cursor resolu_cursor
		EXEC SQL OPEN resolu_cursor;

		// Fetch values for cursor resolu_cursor
		for(;;)
		{
			EXEC SQL
			FETCH resolu_cursor INTO :temp_resolution:i_temp_resolution;

			if(sqlca.sqlcode == 1403)
			{
				printf("\nBreaking out of fetch cursor resolu_cursor\n");
				break;
			}
		}
	Commented coz defining a cursor is not required 
	*/

		// Fetch the resolution numbers of all the records
		EXEC SQL
		SELECT RESOLUTION INTO :temp_resolution:i_temp_resolution
		FROM    CA_SM_RESOLUTION
                WHERE   CORP_ID = :l_corp_id
                        AND CLN_CODE = :l_cln_code;
		IS_ANY_ORA_ERROR

		for(i=0; i<l_count;i++)
		{
			printf("temp resolution [%d] -- |%d|\n", i, temp_resolution[i]);
		}

		for(i=1; i<=l_count; i++)
		{
			EXEC SQL
			UPDATE 	CA_SM_RESOLUTION
			SET	RESOLUTION = :i
			WHERE	RESOLUTION = :temp_resolution[i-1]
				AND CORP_ID = :l_corp_id
				AND CLN_CODE = :l_cln_code;

			IS_ANY_ORA_ERROR
		}
		fprintf(c_flogfile,"Re numbering completed successfully");
		// Rearranging the records and re-numbering the Resolution number -- End --
	}
	
	if(strlen(l_insert) > 0)
        {
		printf("\n\t********* In the insert loop\n");
		printf("l_insert |%s|\n", l_insert);
                if(APL_FAILURE == CO_SplitStr(l_insert, '@', &l_int_num, &temp))
                {
                        CO_ProcMonitor(c_flogfile, "Failure from CO_SplitStr", l_debug_info_ptr, NULL);
                        APL_GOBACK_FAIL
                }
		printf("Num of arguments for l_insert = |%d|\n", l_int_num);
		
		for(i=0; i<l_int_num; i++)
		{
                        strcpy(l_update_rec[i], temp[i]);
			printf("l_update_rec[%d] = |%s|\n", i, l_update_rec[i]);
			fprintf(c_flogfile,"Record %d for Inserting -- |%s|\n", i+1, l_update_rec[i]);
		}

		for(i=0; i<l_int_num; i++)
                {
			printf("In the insert insert loop\n");
                        //strcpy(l_update_rec[i], temp[i]);

			printf("l_update_rec[%d] = |%s|\n", i, l_update_rec[i]);

                        if(APL_FAILURE == CO_SplitStr(l_update_rec[i], '^', &l_int_num1, &temp))
                        {
                                CO_ProcMonitor(c_flogfile, "Failure from CO_SplitStr", l_debug_info_ptr, NULL);
                                APL_GOBACK_FAIL
                        }

                        if(l_int_num1 != 7)
                        {
                                printf("\n\t********* Total number of arguments ^ = |%d|\n", l_int_num1);
                                CO_ProcMonitor(c_flogfile, "Wrong number of arguments", l_debug_info_ptr, NULL);
                                APL_GOBACK_FAIL
                        }
                        else
                        {
				printf("temp[0] -- Consent Yes = |%s|\n", temp[0]);
				printf("temp[1] -- Consent No = |%s|\n", temp[1]);
				printf("temp[2] -- Abstain = |%s|\n", temp[2]);
				printf("temp[3] -- Date of Instruction = |%s|\n", chr_sys_access_stamp);
				printf("temp[4] -- Status = |%s|\n", temp[4]);
				printf("temp[5] -- Access Stamp = |%s|\n", chr_sys_access_stamp); 
				printf("temp[6] -- Resolution = |%s|\n", temp[6]);
				printf("Corp Id = |%s|\n", l_corp_id); 
				printf("Cln Code = |%s|\n", l_cln_code);
				printf("Maker = |%s|\n", p_intl_envdatastruct_h->usr);
				printf("Maker Date = |%s|\n", chr_sys_access_stamp);

				/* Extracting Instr Code frm Corp Id */
				//strncpy(l_instr_code, l_corp_id, 8);
				strncpy(l_instr_code, l_corp_id, strlen(l_corp_id)-11);

				printf("Instr code = |%s|\n", l_instr_code);
				fprintf(c_flogfile,"Inserting new record with Corp id |%s| and Client code |%s|\n", l_corp_id, l_cln_code);

				sqlca.sqlcode = 0;
				printf("Before insert - ORA -- [%d]\n", sqlca.sqlcode);

				printf("Auto Authorize flag is |%s|\n", l_auto_auth);
				if(strcmp(l_auto_auth, "Y") == 0)
				{
					printf("Auto Auth flag is Y, ");
					printf("hence inserting the record with AA status\n");
					EXEC SQL
					INSERT INTO CA_SM_RESOLUTION
					(CONSENT_YES,   CONSENT_NO,
					ABSTAIN,        DT_OF_INST,
					STATUS,         ACCESS_STAMP,
					RESOLUTION,     CORP_ID,
					CLN_CODE,       MAKER,
					MAKER_DT,       TOT_RESOLUTION,
					CHECKER,	CHECKER_DT)
					values
					(:temp[0],      :temp[1],
					:temp[2],       :chr_sys_access_stamp,
					'AA',       	:chr_sys_access_stamp,
					:temp[6],       :l_corp_id,
					:l_cln_code,    :p_intl_envdatastruct_h->usr,
					:chr_sys_access_stamp, :l_tot_resolu_num,
					:p_intl_envdatastruct_h->usr, :chr_sys_access_stamp);

					printf("For new record - ORA -- [%d]\n", sqlca.sqlcode);
					IS_ANY_ORA_ERROR
				}
				else
				{
					printf("Auto Auth flag is N, ");
					printf("hence inserting the record with UU status\n");
                                	EXEC SQL
					INSERT INTO CA_SM_RESOLUTION
					(CONSENT_YES, 	CONSENT_NO, 
					ABSTAIN, 	DT_OF_INST, 
					STATUS, 	ACCESS_STAMP, 
					RESOLUTION, 	CORP_ID, 
					CLN_CODE, 	MAKER, 
					MAKER_DT, 	TOT_RESOLUTION)
					values
					(:temp[0], 	:temp[1], 
					:temp[2], 	:chr_sys_access_stamp, 
					:temp[4], 	:chr_sys_access_stamp, 
					:temp[6], 	:l_corp_id, 
					:l_cln_code, 	:p_intl_envdatastruct_h->usr, 
					:chr_sys_access_stamp, :l_tot_resolu_num);

					printf("For new record - ORA -- [%d]\n", sqlca.sqlcode);
					IS_ANY_ORA_ERROR
				}

				fprintf(c_flogfile,"Inserted new record sucessfully\n");
			}
		}
	}

	//Finding the number of records in CA_SM_RESOLUTION
	EXEC SQL
	SELECT COUNT(*) INTO :l_count
	FROM	CA_SM_RESOLUTION
	WHERE	CORP_ID = :l_corp_id
		AND CLN_CODE = :l_cln_code;

	printf("For Count of Resolutions - ORA -- [%d]\n", sqlca.sqlcode);
	IS_ANY_ORA_ERROR

	if(l_count == 0)
	{
		printf("..... DELETING record from CA_INSTRUCTION\n");
		fprintf(c_flogfile,"Deleting record with Corp id |%s| from CA_INSTRUCTION\n", l_corp_id);

		EXEC SQL
		DELETE from CA_INSTRUCTION
		WHERE   CORP_ID = :l_corp_id
		AND CLN_CODE = :l_cln_code;
		IS_ANY_ORA_ERROR

		printf("For del statement of CA_INSTRUCTION -- ORA -- [%d]\n", sqlca.sqlcode);
		fprintf(c_flogfile,"Deleted successfully from CA_INSTRUCTION\n");
	}
	else
	{
		printf("..... UPDATING record in CA_INSTRUCTION\n");
		fprintf(c_flogfile,"Updating record with Corp id |%s| from CA_INSTRUCTION\n", l_corp_id);

		/* Changed By Kalyan to Check the Un Auth Records in CA_SM_RESOULTION TABLE and if Un Auth Records are present then not to update the CA_INSTRUCTION Table */

		printf("KS -- Selecting the count of Un Authorised Rows in CA_SM_RESOLUTION ...\n");
		
		EXEC SQL SELECT 
				COUNT(*) 
			INTO 
				:l_unauthcount 
			FROM 
				CA_SM_RESOLUTION 
			WHERE 
				CORP_ID = :l_corp_id
               			AND CLN_CODE = :l_cln_code
				AND STATUS='UU';

		IS_ANY_ORA_ERROR
		printf("KS -- sqlcode is [%d]...\nCount of Un Auth rows Selected ...[%d] \n",sqlca.sqlcode,l_unauthcount);


		if((strcmp(l_auto_auth, "Y") == 0)&& (l_unauthcount ==0))
		{
			EXEC SQL
			UPDATE 	CA_INSTRUCTION
			SET 	NUM_OF_RESOLUTIONS = :l_tot_resolu_num,
				CHECKER = 'SYSTEM',
				CHECKER_DT = :chr_sys_access_stamp,
				MAKER = :p_intl_envdatastruct_h->usr,
				MAKER_DT = :chr_sys_access_stamp,
				INSTRUC_DATE = :chr_sys_access_stamp
			WHERE   CORP_ID = :l_corp_id
				AND CLN_CODE = :l_cln_code;
			IS_ANY_ORA_ERROR
		}
		else if (strcmp(l_auto_auth, "Y") ==0)
		{
			EXEC SQL
			UPDATE 	CA_INSTRUCTION
			SET 	NUM_OF_RESOLUTIONS = :l_tot_resolu_num,
				CHECKER = '',
                                CHECKER_DT = '',
				STATUS = 'UU',
				INSTRUC_DATE = :chr_sys_access_stamp
			WHERE	CORP_ID = :l_corp_id
				AND CLN_CODE = :l_cln_code;
			IS_ANY_ORA_ERROR
		}
		else if (l_unauthcount ==0)
		{
			EXEC SQL
			UPDATE 	CA_INSTRUCTION
			SET 	NUM_OF_RESOLUTIONS = :l_tot_resolu_num,
				CHECKER = 'SYSTEM',
                                CHECKER_DT = :chr_sys_access_stamp,
				STATUS = 'AA'
			WHERE	CORP_ID = :l_corp_id
				AND CLN_CODE = :l_cln_code;
			IS_ANY_ORA_ERROR
		}
		else 
		{
			EXEC SQL
			UPDATE 	CA_INSTRUCTION
			SET 	NUM_OF_RESOLUTIONS = :l_tot_resolu_num,
				CHECKER = '',
                                CHECKER_DT = '',
				STATUS = 'UU',
				MAKER = :p_intl_envdatastruct_h->usr,
				MAKER_DT = :chr_sys_access_stamp,
				INSTRUC_DATE = :chr_sys_access_stamp
			WHERE	CORP_ID = :l_corp_id
				AND CLN_CODE = :l_cln_code;
			IS_ANY_ORA_ERROR
		}

		printf("For update statement of CA_INSTRUCTION -- ORA -- [%d]\n", sqlca.sqlcode);
		printf("For update statement of CA_INSTRUCTION -- rows affected -- [%d]\n", sqlca.sqlerrd[2]);

		if(sqlca.sqlerrd[2] == 0)
		{
			printf("Since record does not exist in CA_INSTRUCTION,");
			printf(" inserting record in CA_INSTRUCTION\n");
			if(strcmp(l_auto_auth, "Y") == 0)
			{
				EXEC SQL
				INSERT into CA_INSTRUCTION
				(CORP_ID,       CLN_CODE,
				CA_EVENT,       INSTRUC_DATE,
				MAKER,          MAKER_DT,
				ACCESS_STAMP,   INSTRUCTED,
				STATUS,         NUM_OF_RESOLUTIONS,
				INSTR_CODE,	CHECKER,
				CHECKER_DT)
				values
				(:l_corp_id,    :l_cln_code,
				'SM',           :temp[3],
				:p_intl_envdatastruct_h->usr, :chr_sys_access_stamp,
				:chr_sys_access_stamp, 'Y',
				'AA',       	:l_tot_resolu_num,
				:l_instr_code,	:p_intl_envdatastruct_h->usr,
				:chr_sys_access_stamp);

				printf("For Inserting new record in CA_INSTRUCTION ORA -- [%d]\n", sqlca.sqlcode);
				IS_ANY_ORA_ERROR
			}
			else
			{
				EXEC SQL
                		INSERT into CA_INSTRUCTION
                		(CORP_ID, 	CLN_CODE, 
				CA_EVENT, 	INSTRUC_DATE, 
				MAKER, 		MAKER_DT, 
				ACCESS_STAMP, 	INSTRUCTED, 
				STATUS, 	NUM_OF_RESOLUTIONS, 
				INSTR_CODE)
                		values
				(:l_corp_id, 	:l_cln_code, 
				'SM', 		:temp[3], 
				:p_intl_envdatastruct_h->usr, :chr_sys_access_stamp, 
				:chr_sys_access_stamp, 'Y', 
				:temp[4], 	:l_tot_resolu_num, 
				:l_instr_code);

				printf("For Inserting new record in CA_INSTRUCTION ORA -- [%d]\n", sqlca.sqlcode);
                		IS_ANY_ORA_ERROR
			}
		}
		fprintf(c_flogfile,"Updated CA_INSTRUCTION successfully\n");
	}

	/*EXEC SQL COMMIT;
	IS_ANY_ORA_ERROR */

	RETURN_SUCCESS  :
	{
		fprintf(c_flogfile,"Success from function StringSplit \n");
		return(APL_SUCCESS);
	}

	RETURN_FAILURE  :
	{
		fprintf(c_flogfile,"Failure from function StringSplit -- ORA - [%d]\n",sqlca.sqlcode);
		return(APL_FAILURE);
	}

}

