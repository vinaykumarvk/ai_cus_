


   
   
   
   
   
   
   
   
   
   
   
   




#include <CO_HostStructdef.h>

EXEC SQL INCLUDE sqlca; 

 

 int CDBCustChrValFn(char *chr_p_acct,char *p_link_val,char *p_field_val,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
   struct sqlca           sqlca;
   char                   chr_h_field_val[40];
   short                  i_field_val;
   char                   chr_l_buf[BUFFER_LEN];

   EXEC SQL VAR chr_h_field_val IS STRING;

   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CDBCustChrValFn \n",NULL,NULL);
      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Account is %s \n",chr_p_acct);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Field name is %s \n",p_link_val);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
   }

   memset(chr_h_field_val,APL_NULL_CHAR,sizeof(chr_h_field_val));

   sqlca.sqlcode = 0;

   if (strcmp(p_link_val, "account") == 0)
   {
      EXEC SQL SELECT client
      INTO :chr_h_field_val:i_field_val
      FROM DL_RUCLIENT
      WHERE client = RTRIM(:chr_p_acct);
   }

   if (strcmp(p_link_val, "access_stamp") == 0)
   {
      EXEC SQL SELECT access_stamp
      INTO :chr_h_field_val:i_field_val
      FROM DL_RUCLIENT
      WHERE client = RTRIM(:chr_p_acct);
   }

   if (strcmp(p_link_val, "accstatus") == 0)
   {
      EXEC SQL SELECT RU_CLIENT_STAT
      INTO :chr_h_field_val:i_field_val
      FROM DL_RUCLIENT
      WHERE client = RTRIM(:chr_p_acct);
   }

   if (strcmp(p_link_val, "ROWID") == 0)
   {
      EXEC SQL SELECT ROWID
      INTO :chr_h_field_val:i_field_val
      FROM DL_RUCLIENT
      WHERE client = RTRIM(:chr_p_acct)
      FOR UPDATE OF access_stamp;
   }

   if (strcmp(p_link_val, "FEROWID") == 0)
   {
      EXEC SQL SELECT ROWID
      INTO :chr_h_field_val:i_field_val
      FROM DL_RUCLIENT
      WHERE client = RTRIM(:chr_p_acct);
   }

   IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"CLIENT",APL_NULL_STRING,APL_NULL_STRING)

   if (i_field_val == -1)
      strcpy((char *)p_field_val, APL_NULL_STRING);
   else
      strcpy((char *)p_field_val, chr_h_field_val);

   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBCustChrValFn \n",NULL,NULL);
      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBCustChrValFn \n",NULL,NULL);
      return(APL_FAILURE);
   }
}



 int CDBRRLocChrValFn(char *chr_p_rrloc,char *p_link_val,char *p_field_val,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
   struct sqlca           sqlca;
   char                   chr_h_field_val[40];
   short                  i_field_val;
   char                   chr_l_buf[BUFFER_LEN];

   EXEC SQL VAR chr_h_field_val IS STRING;
	
	#ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CDBRRLocChrValFn \n",NULL,NULL);
      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Location is %s \n",chr_p_rrloc);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Field name is %s \n",p_link_val);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
   }

   memset(chr_h_field_val,APL_NULL_CHAR,sizeof(chr_h_field_val));

   sqlca.sqlcode = 0;

   if (strcmp(p_link_val, "location") == 0)
	{
      EXEC SQL SELECT LOC 
		INTO :chr_h_field_val:i_field_val
      FROM DL_RULOCATION 
      WHERE LOC = RTRIM(:chr_p_rrloc);
	}
	
	if (strcmp(p_link_val, "access_stamp") == 0)
   {
      EXEC SQL SELECT access_stamp
     INTO :chr_h_field_val:i_field_val
      FROM DL_RULOCATION
      WHERE LOC = RTRIM(:chr_p_rrloc);
   }

   if (strcmp(p_link_val, "rulocstatus") == 0)
   {
      EXEC SQL SELECT RU_LOC_STAT
		INTO :chr_h_field_val:i_field_val
      FROM DL_RULOCATION
		WHERE LOC = RTRIM(:chr_p_rrloc);
   }

   if (strcmp(p_link_val, "ROWID") == 0)
   {
      EXEC SQL SELECT ROWID
      INTO :chr_h_field_val:i_field_val
      FROM DL_RULOCATION
		WHERE LOC = RTRIM(:chr_p_rrloc)
		FOR UPDATE OF access_stamp;
   }

   if (strcmp(p_link_val, "FEROWID") == 0)
   {
      EXEC SQL SELECT ROWID
      INTO :chr_h_field_val:i_field_val
      FROM DL_RULOCATION 
		WHERE LOC = RTRIM(:chr_p_rrloc);
	}

   IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"LOC",APL_NULL_STRING,APL_NULL_STRING)

   if (i_field_val == -1)
      strcpy((char *)p_field_val, APL_NULL_STRING);
   else
      strcpy((char *)p_field_val, chr_h_field_val);

   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBRRLocChrValFn \n",NULL,NULL);
      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBRRLocChrValFn \n",NULL,NULL);
      return(APL_FAILURE);
   }
}



 int CDBRRProdChrValFn(char *chr_p_rrprod,char *p_link_val,char *p_field_val,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
   struct sqlca           sqlca;
   char                   chr_h_field_val[40];
   short                  i_field_val;
   char                   chr_l_buf[BUFFER_LEN];

   EXEC SQL VAR chr_h_field_val IS STRING;

   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CDBRRProdChrValFn \n",NULL,NULL);
      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Product is %s \n",chr_p_rrprod);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Field name is %s \n",p_link_val);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
   }

   memset(chr_h_field_val,APL_NULL_CHAR,sizeof(chr_h_field_val));

   sqlca.sqlcode = 0;

   if (strcmp(p_link_val, "prcode") == 0)
   {
      EXEC SQL SELECT PR_CODE 
      INTO :chr_h_field_val:i_field_val
      FROM DL_RUPRODUCT
		WHERE PR_CODE = RTRIM(:chr_p_rrprod);
   }

   if (strcmp(p_link_val, "access_stamp") == 0)
   {
      EXEC SQL SELECT access_stamp
     INTO :chr_h_field_val:i_field_val
      FROM DL_RUPRODUCT
		WHERE PR_CODE = RTRIM(:chr_p_rrprod);
	}

	if (strcmp(p_link_val, "prodstatus") == 0)
   {
      EXEC SQL SELECT STATUS
		INTO :chr_h_field_val:i_field_val
      FROM DL_RUPRODUCT
      WHERE PR_CODE = RTRIM(:chr_p_rrprod);
   }

    if (strcmp(p_link_val, "ROWID") == 0)
   {
      EXEC SQL SELECT ROWID
      INTO :chr_h_field_val:i_field_val
      FROM DL_RUPRODUCT
      WHERE PR_CODE = RTRIM(:chr_p_rrprod);
   }

   if (strcmp(p_link_val, "FEROWID") == 0)
   {
      EXEC SQL SELECT ROWID
      INTO :chr_h_field_val:i_field_val
      FROM DL_RUPRODUCT
      WHERE PR_CODE = RTRIM(:chr_p_rrprod);
   }

   IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"PRODUCT",APL_NULL_STRING,APL_NULL_STRING)

   if (i_field_val == -1)
      strcpy((char *)p_field_val, APL_NULL_STRING);
   else
      strcpy((char *)p_field_val, chr_h_field_val);

   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :

   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBRRProdChrValFn \n",NULL,NULL);
      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBRRProdChrValFn \n",NULL,NULL);
      return(APL_FAILURE);
   }
}



 int CDBRRSRNChrValFn(char *p_rrsrn, char *p_rrinstrode,char *p_link_val,char *p_field_val,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
   struct sqlca           sqlca;
   char                   chr_h_field_val[40];
   short                  i_field_val;
   char                   chr_l_buf[BUFFER_LEN];

   EXEC SQL VAR chr_h_field_val IS STRING;

	#ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CDBRRSRNChrValFn \n",NULL,NULL);
      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"SRN is %s \n",p_rrsrn);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Field name is %s \n",p_link_val);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
   }

   memset(chr_h_field_val,APL_NULL_CHAR,sizeof(chr_h_field_val));

   sqlca.sqlcode = 0;

   if (strcmp(p_link_val, "statregno") == 0)
   {
      EXEC SQL SELECT STAT_REG_NO
		INTO :chr_h_field_val:i_field_val
      FROM DL_RUSRN
		WHERE STAT_REG_NO = RTRIM(:p_rrsrn) and  instr_code = RTRIM(:p_rrinstrode) ;
   }
	
	if (strcmp(p_link_val, "INSTR_CODE") == 0)
   {
      EXEC SQL SELECT instr_code
		INTO :chr_h_field_val:i_field_val
      FROM DL_RUSRN
      WHERE STAT_REG_NO = RTRIM(:p_rrsrn) and instr_code = RTRIM(:p_rrinstrode);
	}

   if (strcmp(p_link_val, "access_stamp") == 0)
   {
      EXEC SQL SELECT access_stamp
     INTO :chr_h_field_val:i_field_val
      FROM DL_RUSRN
		WHERE STAT_REG_NO = RTRIM(:p_rrsrn) and instr_code = RTRIM(:p_rrinstrode);
   }

   if (strcmp(p_link_val, "srnstatus") == 0)
   {
      EXEC SQL SELECT srn_stat
		INTO :chr_h_field_val:i_field_val
      FROM DL_RUSRN
		WHERE STAT_REG_NO = RTRIM(:p_rrsrn) and instr_code = RTRIM(:p_rrinstrode);
   }

    if (strcmp(p_link_val, "ROWID") == 0)
   {
      EXEC SQL SELECT ROWID
      INTO :chr_h_field_val:i_field_val
      FROM DL_RUSRN
		WHERE STAT_REG_NO = RTRIM(:p_rrsrn) and instr_code = RTRIM(:p_rrinstrode);
   }

   if (strcmp(p_link_val, "FEROWID") == 0)
   {
      EXEC SQL SELECT ROWID
      INTO :chr_h_field_val:i_field_val
      FROM DL_RUSRN
		WHERE STAT_REG_NO = RTRIM(:p_rrsrn) and instr_code = RTRIM(:p_rrinstrode);
   }

	if (strcmp(p_link_val, "refnum") == 0)
   {
      EXEC SQL SELECT IDENTIY_NUM
		INTO :chr_h_field_val:i_field_val
      FROM DL_RUSRN
      WHERE STAT_REG_NO = RTRIM(:p_rrsrn) and instr_code = RTRIM(:p_rrinstrode);
   }

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"SRN",APL_NULL_STRING,APL_NULL_STRING)

   if (i_field_val == -1)
      strcpy((char *)p_field_val, APL_NULL_STRING);
   else
      strcpy((char *)p_field_val, chr_h_field_val);

   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :

   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBRRSRNChrValFn \n",NULL,NULL);
      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBRRSRNChrValFn \n",NULL,NULL);
      return(APL_FAILURE);
   }
}



 int CDBRRInstrChrValFn(char *p_rrinstr,char *p_link_val,char *p_field_val,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
   struct sqlca           sqlca;
   char                   chr_h_field_val[40];
   short                  i_field_val;
   char                   chr_l_buf[BUFFER_LEN];

   EXEC SQL VAR chr_h_field_val IS STRING;

   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CDBRRInstrChrValFn \n",NULL,NULL);
      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"INSTR_CODE is %s \n",p_rrinstr);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Field name is %s \n",p_link_val);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
   }

   memset(chr_h_field_val,APL_NULL_CHAR,sizeof(chr_h_field_val));

   sqlca.sqlcode = 0;

   if (strcmp(p_link_val, "instr_code") == 0)
   {
      EXEC SQL SELECT instr_code
		INTO :chr_h_field_val:i_field_val
      FROM DL_RUINSTRUMENT
		WHERE instr_code = RTRIM(:p_rrinstr);
   }

	if (strcmp(p_link_val, "access_stamp") == 0)
   {
      EXEC SQL SELECT access_stamp
		INTO :chr_h_field_val:i_field_val
      FROM DL_RUINSTRUMENT
      WHERE instr_code = RTRIM(:p_rrinstr);
   }

	if (strcmp(p_link_val, "ruinstrstatus") == 0)
   {
      EXEC SQL SELECT RU_INSTR_STAT
		INTO :chr_h_field_val:i_field_val
      FROM DL_RUINSTRUMENT
      WHERE instr_code = RTRIM(:p_rrinstr);
   }

	if (strcmp(p_link_val, "ROWID") == 0)
   {
      EXEC SQL SELECT ROWID
		INTO :chr_h_field_val:i_field_val
      FROM DL_RUINSTRUMENT
      WHERE instr_code = RTRIM(:p_rrinstr);
   }

	if (strcmp(p_link_val, "statregno") == 0)
   {
      EXEC SQL SELECT STAT_REG_NO
		INTO :chr_h_field_val:i_field_val
      FROM DL_RUINSTRUMENT
      WHERE instr_code = RTRIM(:p_rrinstr);
   }

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"INSTR_CODE",APL_NULL_STRING,APL_NULL_STRING)

   if (i_field_val == -1)
      strcpy((char *)p_field_val, APL_NULL_STRING);
   else
      strcpy((char *)p_field_val, chr_h_field_val);

   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :

   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBRRInstrChrValFn \n",NULL,NULL);
      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBRRInstrChrValFn \n",NULL,NULL);
      return(APL_FAILURE);
   }
}

