






#include "IV_Control_A.h"
#include "CR_Common.h"
#include "CO_OthStructdef.h"
#include "CO_Commdef.h"
#include <sys/types.h>
#include <sys/stat.h>  /* Bageshri --10GM */
#include <unistd.h>
#define APL_SHORTDT_LEN 9
/* OPT:AIX */
#ifdef MAX
#undef MAX
#endif
#define MAX		20
EXEC SQL INCLUDE SQLCA.H;





//main (int argc,char **argv)
int main(int argc,char **argv)//Changes done for AIX Migration
{
	

	struct					sqlca sqlca;

	DEBUG_INFO_STRUCT_H			*l_debug_info_struct 				= NULL;
	DEBUG_INFO_STRUCT_H			**l_debug_info_ptr					= NULL;
	INTL_ENV_DATA_STRUCT_H	*p_intlenv_data_struct_h 			= (INTL_ENV_DATA_STRUCT_H *) NULL;
	FILE   					*fl_techlog 					= (FILE *) NULL;
	FILE						*fl_userlog 					= (FILE *) NULL;
	FILE						*chr_finifile 						= (FILE *) NULL;
	char						chr_inifile[PATH_LENGTH]	 		= APL_NULL_STRING;
	char						chr_l_sys_date[APL_DATE_LEN]	= APL_NULL_STRING;
	char						chr_l_techlog[PATH_LENGTH]		= APL_NULL_STRING;
	char						chr_l_userlog[PATH_LENGTH]	   = APL_NULL_STRING;
	char  					chr_logfile[PATH_LENGTH]			= APL_NULL_STRING;
	char						chr_custody_id_b[APL_USERID_LEN]		= APL_NULL_STRING;
	char						chr_uname[APL_USERID_LEN];
	char						chr_passwd[APL_PASSWD_LEN];
	char						chr_rep_st[3]						= APL_NULL_STRING;
	char						chr_rep_st1[3]						= APL_NULL_STRING;
	int						int_num								= 0;
	int						int_l_retstat						= 0;
	int 						int_l_rec_count						= 0;
	char						**temp;
	char						chr_flag;
	char     				chr_p_batchdate[APL_DATE_LEN]  = APL_NULL_STRING;
   char     				chr_h_passflg[APL_FLAG_LENGTH]    = APL_NULL_STRING;
   char     				chr_p_modident[APL_FLAG_LENGTH]   = APL_NULL_STRING;
   char    					chr_p_batchno[6]               = APL_NULL_STRING;

   char     chr_h_restart_data[50]                      = APL_NULL_STRING;
   char     chr_h_batch_in_proc_rowid[APL_ROWID_LEN]    = APL_NULL_STRING;
   char     chr_h_batch_in_proc_status[15]              = APL_NULL_STRING;
   short    i_restart_info = 0;
   short    int_i_batch_in_proc_rowid = 0;
   short    i_batch_in_proc_statinfo = -1;

	EXEC SQL BEGIN DECLARE SECTION;
   EXEC SQL VAR chr_h_batch_in_proc_rowid IS STRING;
   EXEC SQL VAR chr_h_batch_in_proc_status IS STRING;
   EXEC SQL VAR chr_h_restart_data IS STRING;
   EXEC SQL VAR chr_p_batchdate IS STRING;
	EXEC SQL VAR chr_uname IS STRING;
	EXEC SQL VAR chr_passwd IS STRING;
	EXEC SQL END DECLARE SECTION;

	SYS_IVCONTROLPARAM_STRUCT l_sys_ivcontrol_param_struct;
	EXEC SQL BEGIN DECLARE SECTION;
   EXEC SQL VAR l_sys_ivcontrol_param_struct.b_prev_date IS STRING;
   EXEC SQL VAR l_sys_ivcontrol_param_struct.b_upto_date IS STRING;
   EXEC SQL VAR l_sys_ivcontrol_param_struct.b_processdt IS STRING;
   EXEC SQL VAR l_sys_ivcontrol_param_struct.b_dlv_date IS STRING;
   EXEC SQL VAR l_sys_ivcontrol_param_struct.last_dlv_date IS STRING;
   EXEC SQL VAR l_sys_ivcontrol_param_struct.archival_dt IS STRING;
   EXEC SQL VAR l_sys_ivcontrol_param_struct.last_rpt_date IS STRING;
	EXEC SQL END DECLARE SECTION;

	

	p_intlenv_data_struct_h   =  (INTL_ENV_DATA_STRUCT_H*)calloc(1,sizeof(INTL_ENV_DATA_STRUCT_H));
   APL_MALLOC_FAIL(p_intlenv_data_struct_h);

	l_debug_info_ptr	= &l_debug_info_struct; 
 

	

	strcpy(chr_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_inifile,"intl_sun.cfg");

	if ( (chr_finifile = fopen(chr_inifile,"r") ) == NULL )
	{
		fprintf(APL_OUT_FILE,"Unable to open intl_sun.cfg\n");
		APL_GOBACK_FAIL
	}

	APL_FETCH_DB_LOGIN_DETAILS(chr_finifile, chr_custody_id_b, chr_uname, chr_passwd , APL_OUT_FILE , l_debug_info_ptr)
	EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;
	IS_ANY_ORA_ERROR	

   
   if (APL_FAILURE == CO_RtvSysParams(l_debug_info_ptr))
   {
      fprintf(APL_OUT_FILE,"Failed To Get System Parameters\n");
      APL_GOBACK_FAIL
   }
	 

   strcpy(p_intlenv_data_struct_h->usr	, argv[3]);   
   strcpy(p_intlenv_data_struct_h->h_mode		, argv[4]);   
	strcpy(p_intlenv_data_struct_h->processtion, argv[5]);
	strcpy(p_intlenv_data_struct_h->auth_req, argv[6]);
	strcpy(p_intlenv_data_struct_h->subprocess	, argv[7]);
	strcpy(p_intlenv_data_struct_h->h_process	, argv[8]);

	

	

	

	if (APL_FAILURE == CO_SplitStr( argv[9],
												',',
												&int_num,
												&temp) )
	{
		fprintf(APL_OUT_FILE,"Failed to split input string\n");
		APL_GOBACK_FAIL;
	}	

	if (int_num ==0 )
	{
		fprintf(APL_OUT_FILE,"No Parameters were passed to the processtion\n");
		APL_GOBACK_FAIL;
	}
	
	strcpy(chr_h_passflg,temp[0]);
	strcpy(chr_p_modident,temp[1]);
	strcpy(chr_p_batchno,temp[2]);
	strcpy(chr_p_batchdate,temp[3]);

	
	if (!strcmp(chr_h_passflg ,APL_NULL_STRING))  
	{
		chr_flag = 1;
		fprintf(APL_OUT_FILE,"PASS FLG IS MISSING \n");
	}
	
	if (!strcmp(chr_p_modident,APL_NULL_STRING))
	{
		chr_flag = 1;
		fprintf(APL_OUT_FILE,"MOD_IDENT ind IS EMPTY\n");
	}
	
	if (!strcmp(chr_p_batchno ,APL_NULL_STRING))
	{
		chr_flag = 1;
		fprintf(APL_OUT_FILE,"BATCH_NO IS EMPTY\n");
	}

	if (!strcmp(chr_p_batchdate ,APL_NULL_STRING))
	{
		chr_flag = 1;
		fprintf(APL_OUT_FILE,"BATCH_DATE IS EMPTY\n");
	}
	
	if (chr_flag ==1)
	{
      APL_GOBACK_FAIL
	}

	if (!strcmp(chr_p_modident, "B") )
	{
		strcpy(chr_rep_st,"1H");
		strcpy(chr_rep_st1,"1h");
	}
	if (!strcmp(chr_p_modident, "C") )
	{
		strcpy(chr_rep_st,"3A");
		strcpy(chr_rep_st1,"3a");
	}

	if (APL_FAILURE == CO_Rtv_RptFileName( chr_rep_st,
                                       APL_LOGFILE_DESC,
                                       100,
                                       argv[5], 
                                       argv,
                                       &fl_userlog,
                                       l_debug_info_ptr) )
   {
		APL_GOBACK_FAIL
   }

   if (APL_FAILURE == CO_Rtv_RptFileName( chr_rep_st1,
                                       APL_LOGFILE_DESC,
                                       100,
                                      	argv[5], 
                                       argv,
                                       &fl_techlog,
                                       l_debug_info_ptr) )
   {
		APL_GOBACK_FAIL
   }

	{
		EXEC SQL COMMIT ;
   	IS_ANY_ORA_ERROR
	}

	

   EXEC SQL SELECT ROWID, PROCESSING_STATUS
            INTO :chr_h_batch_in_proc_rowid :int_i_batch_in_proc_rowid ,:chr_h_restart_data :i_restart_info
            FROM SYS_BATCHPROC
            WHERE PROCESS_NAME = :argv[0]
				AND PROC_INIT			= :argv[1]
            AND STARTDATE  = :argv[2]
            AND STATUS     = 'started';

   printf("after locking the batch table\n");
   
   IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,
                                         ltoa(sqlca.sqlcode),
                                         APL_NULL_STRING,
                                         APL_NULL_STRING);
	if (chr_p_modident[0] == 'B')
	{
		int_l_retstat = 0;

   	 IV_Rtv_IVCNTLPARAM(&l_sys_ivcontrol_param_struct, &int_l_retstat,
                    l_debug_info_ptr );

       if ( int_l_retstat == IV_NO_DATA_FOUND_ERR )
       {
        	CO_InsertErr(l_debug_info_ptr, ERR_BILLCNTRL_PARAM_NOTFND,
                   APL_NULL_STRING, APL_NULL_STRING,
                   APL_NULL_STRING, __LINE__, __FILE__);
       }

 	  	if ( l_sys_ivcontrol_param_struct.ae_ind != 'G' )
   	{
      	CO_InsertErr(l_debug_info_ptr, ERR_BILLS_NOT_GENERATED, APL_NULL_STRING,
                APL_NULL_STRING, APL_NULL_STRING,
                __LINE__, __FILE__);
   	 }
	}

	if ( !strcmp(chr_h_passflg , "Y"))
	{
	  if( APL_FAILURE == EL_PassGrAccEnt( chr_p_modident[0],  
													 chr_p_batchno,
													 chr_p_batchdate,
													 argv,
													 fl_userlog,
													 chr_finifile,
													 p_intlenv_data_struct_h,
													 l_debug_info_ptr))
		{
            fprintf(fl_userlog,"Failed To pass entries .Try Passing Again\n");
            APL_GOBACK_FAIL;
      }
		else if (chr_p_modident[0] == 'B')
		{
			EXEC SQL SELECT NVL(COUNT(*),0) into :int_l_rec_count
                  FROM PRO_GRACCTENT
                  WHERE MODULE_IND = 'B' AND STATUS = 'G';

         if (int_l_rec_count == 0 ) 
         {
				int_l_retstat = IV_SUCCESS;

				if ( APL_FAILURE == IV_Proc_IVCNTLPARAMPassAccGenFlg(&int_l_retstat, l_debug_info_ptr) )	
				{
					fprintf(fl_userlog, "Failed to update Accounting Entries Flag to 'Y'.\n");
					APL_GOBACK_FAIL
				}
         }
		}
	
   }

	else  
	{
		if (!strcmp(chr_p_modident, "C") )
		{
			if (APL_FAILURE ==  DL_Proc_AccEntRst(  chr_p_batchdate,
															 chr_p_batchno,
															 fl_userlog,
															 argv,
															 p_intlenv_data_struct_h,
															 l_debug_info_ptr))	
     		{ 
				EXEC SQL ROLLBACK WORK RELEASE;
         	IS_ANY_ORA_ERROR
				APL_GOBACK_FAIL
			}
		 }

			

			if (APL_FAILURE ==  CM_DelIGRACCTENTFn ( chr_p_batchno,
															     chr_p_batchdate,
																  chr_p_modident[0],
																  p_intlenv_data_struct_h,
                                             	  l_debug_info_ptr))
			{
				fprintf(fl_userlog,"Failed to Update status_ind record from IGRACCTENT\n");
			   EXEC SQL ROLLBACK WORK RELEASE;
            IS_ANY_ORA_ERROR
				APL_GOBACK_FAIL
			}
		}

         {
				strcpy(chr_h_batch_in_proc_status,"completed");

				EXEC SQL UPDATE SYS_BATCHPROC 
                     SET STATUS = :chr_h_batch_in_proc_status
							WHERE PROCESS_NAME    = :argv[0]
							AND PROC_INIT           = :argv[1]
            			AND STARTDATE     = :argv[2]
            			AND STATUS        = 'started';

				IS_ANY_ORA_ERROR
				fprintf(APL_OUT_FILE,"BATCH_IN_PROC updated.\n");

            EXEC SQL COMMIT WORK RELEASE;
				IS_ANY_ORA_ERROR
				fprintf(APL_OUT_FILE,"Commit Done.\n");
				APL_GOBACK_SUCCESS
         }

	

	RETURN_SUCCESS:

	CO_ProcMonitor(fl_userlog,"Exiting With Success\n",NULL,NULL);
	CO_Proc_RptClose(fl_techlog,l_debug_info_ptr);
   CO_Proc_RptClose(fl_userlog,l_debug_info_ptr);
	APL_FREE(p_intlenv_data_struct_h);
	exit(0); 

	RETURN_FAILURE:

	CO_ProcMonitor(fl_userlog,"Exiting With Failure\n",l_debug_info_ptr,NULL);
	CO_Proc_RptClose(fl_techlog,l_debug_info_ptr);
   CO_Proc_RptClose(fl_userlog,l_debug_info_ptr);
	APL_FREE(p_intlenv_data_struct_h);
	exit(1); 
}


int	EL_PassGrAccEnt(char				chr_p_modident,
							char				*chr_p_batchno,
							char				*chr_p_batchdate,
							char				**argv,
							FILE				*fl_userlog,
							FILE				*chr_finifile,
							INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h,
							DEBUG_INFO_STRUCT_H   **l_debug_info_ptr)		
{

	
	
   struct sqlca sqlca;
	
	char     chr_b_system_date[9] 									= APL_NULL_STRING;
   char     chr_h_batch_in_proc_rowid[APL_ROWID_LEN]      = APL_NULL_STRING;
	char     chr_h_restart_data[50]                        = APL_NULL_STRING;
	char		chr_l_std_dt[APL_SHORTDT_LEN]							= APL_NULL_STRING;
	char     chr_l_shortdate[APL_SHORTDT_LEN]  				= APL_NULL_STRING;
	FILE		*fp1			  		                        = (FILE *) NULL;
	FILE     *fp2                                      = (FILE *) NULL;
	char     *chr_gsesam[PATH_LENGTH];
	char     *chr_gfile[PATH_LENGTH];
	char     chr_sesam_handoff_dir[PATH_LENGTH] 				=  APL_NULL_STRING;
	char     chr_l_handoff_esesam[2*PATH_LENGTH]           =  APL_NULL_STRING;
	char     chr_l_handoff_efile[2*PATH_LENGTH]            =  APL_NULL_STRING;
	char		chr_l_handoff_gsesam[2*PATH_LENGTH]           =  APL_NULL_STRING;
	char		chr_l_handoff_gfile[2*PATH_LENGTH]            =  APL_NULL_STRING;
    
	char     chr_l_valdate[7]  				                  = APL_NULL_STRING;
   char     chr_l_param_str[100]                          = APL_NULL_STRING;
   char     *chr_l_client_a                                = APL_NULL_STRING;
	char     *chr_l_refno_a                                  = APL_NULL_STRING;
	
 char     *chr_l_txn_ref											= APL_NULL_STRING;
	

	char chr_command[(2*PATH_LENGTH)+20];
	int                  int_l_fetch_count                 = 0;
	int						int_l_retval								= 0;
	char						chr_l_str_batchno[6]					=  APL_NULL_STRING;
	int 						int_l_count								= 0;
	double 					l_deb_total                   = 0.0;
	double					l_cred_total						= 0.0;
   char            		chr_l_trans_amount[14]				=  APL_NULL_STRING;
   char            		chr_l_qty_items[15]					=  APL_NULL_STRING;
	char						chr_l_fcy_amount[14]					=  APL_NULL_STRING;
	char						chr_l_mis_spread[12]					=  APL_NULL_STRING;
	char						l_ae_rate[12]							=  APL_NULL_STRING;
	char						chr_l_str_debtotal[18]				=  APL_NULL_STRING;
	char						chr_l_str_credtotal[18]				=  APL_NULL_STRING;
	char  					chr_l_str_count[6]						=  APL_NULL_STRING;
	
   short    i_restart_info = 0;
   short    int_i_batch_in_proc_rowid = 0;

	short 					i_deb_total							= 0;
	short                i_cred_total                  = 0;

	PRO_GRACCTENT_STRUCT_H     *l_pro_gracctent_struct_ha;
	PRO_GRACCTENT_STRUCT_I     *l_pro_gracctent_struct_i;
   INTL_REPT_STRUCT_H *l_intl_rept_struct_ha = NULL;	
	PRO_GSEQNUM_STRUCT_H		l_progseqnum_struct_h;
	struct stat buf; /* Bageshri --10GM */

 	EXEC SQL BEGIN DECLARE SECTION;

   EXEC SQL VAR chr_h_batch_in_proc_rowid IS STRING;
   EXEC SQL VAR chr_h_restart_data IS STRING;

	EXEC SQL VAR chr_l_trans_amount					IS STRING;
	EXEC SQL VAR chr_l_qty_items						IS STRING;
	EXEC SQL VAR chr_l_fcy_amount                 IS STRING;
	EXEC SQL VAR chr_l_mis_spread                 IS STRING;
	EXEC SQL VAR l_ae_rate                       IS STRING;	
	EXEC SQL VAR chr_l_str_debtotal               IS STRING;
	EXEC SQL VAR chr_l_str_credtotal              IS STRING;
	EXEC SQL VAR chr_l_str_count                  IS STRING;
	EXEC SQL VAR chr_l_str_batchno                IS STRING;

	EXEC SQL VAR l_pro_gracctent_struct_ha->h_module_ind    IS STRING;
	EXEC SQL VAR l_pro_gracctent_struct_ha->h_proc_num     IS STRING;
	EXEC SQL VAR l_pro_gracctent_struct_ha->h_batch_dt   IS STRING;
	EXEC SQL VAR l_pro_gracctent_struct_ha->h_instr_class      IS STRING; /* Bageshri --10GM */
	EXEC SQL VAR l_pro_gracctent_struct_ha->h_rec_class     IS STRING;
	EXEC SQL VAR l_pro_gracctent_struct_ha->h_status_ind       IS STRING;
	EXEC SQL VAR l_pro_gracctent_struct_ha->h_entry    IS STRING;
	EXEC SQL VAR l_pro_gracctent_struct_ha->h_dl_client      IS STRING;
	EXEC SQL VAR l_pro_gracctent_struct_ha->h_currencycode      IS STRING;
	EXEC SQL VAR l_pro_gracctent_struct_ha->h_value_date     IS STRING;
	EXEC SQL VAR l_pro_gracctent_struct_ha->h_deal_cd     IS STRING;
	EXEC SQL VAR l_pro_gracctent_struct_ha->h_db_cr_flag      IS STRING;
	EXEC SQL VAR l_pro_gracctent_struct_ha->h_splgr_clt_cd     IS STRING;
	EXEC SQL VAR l_pro_gracctent_struct_ha->h_statistic   IS STRING;
	EXEC SQL VAR l_pro_gracctent_struct_ha->h_trans_bog     IS STRING;
	EXEC SQL VAR l_pro_gracctent_struct_ha->h_offset_client  	 IS STRING;
	EXEC SQL VAR l_pro_gracctent_struct_ha->h_broker_cd    IS STRING;
	EXEC SQL VAR l_pro_gracctent_struct_ha->h_nationality      IS STRING;
	EXEC SQL VAR l_pro_gracctent_struct_ha->h_instr_isin         IS STRING;
	EXEC SQL VAR l_pro_gracctent_struct_ha->h_special_tax      IS STRING;
	EXEC SQL VAR l_pro_gracctent_struct_ha->h_indentity_no     	 IS STRING;
	EXEC SQL VAR l_pro_gracctent_struct_ha->h_auto_rec_flag    IS STRING;
	EXEC SQL VAR l_pro_gracctent_struct_ha->h_note_a     	 IS STRING;
	EXEC SQL VAR l_pro_gracctent_struct_ha->h_note_b     	 IS STRING;
	EXEC SQL VAR l_pro_gracctent_struct_ha->h_safekeep_pos  	 IS STRING;
	EXEC SQL VAR l_pro_gracctent_struct_ha->h_sequence          IS STRING;
	EXEC SQL VAR l_pro_gracctent_struct_ha->h_reas_cd  IS STRING;
	EXEC SQL VAR l_pro_gracctent_struct_ha->h_deal_ident      IS STRING;


	EXEC SQL VAR l_intl_rept_struct_ha->report_name IS STRING;
	EXEC SQL VAR l_intl_rept_struct_ha->report_desc IS STRING;
	EXEC SQL VAR l_intl_rept_struct_ha->task_desc IS STRING;
	EXEC SQL VAR l_intl_rept_struct_ha->usr IS STRING;

	EXEC SQL END DECLARE SECTION;



	

	l_pro_gracctent_struct_ha = ( PRO_GRACCTENT_STRUCT_H *) calloc( 1,sizeof(PRO_GRACCTENT_STRUCT_H ));
   APL_MALLOC_FAIL(l_pro_gracctent_struct_ha);
   memset(l_pro_gracctent_struct_ha , NULL , sizeof(PRO_GRACCTENT_STRUCT_H));

	l_pro_gracctent_struct_i = ( PRO_GRACCTENT_STRUCT_I *) calloc( 1,sizeof(PRO_GRACCTENT_STRUCT_I ));
   APL_MALLOC_FAIL(l_pro_gracctent_struct_i);
   memset(l_pro_gracctent_struct_i , NULL , sizeof(PRO_GRACCTENT_STRUCT_I));

   l_intl_rept_struct_ha=(INTL_REPT_STRUCT_H *)calloc(1,sizeof(INTL_REPT_STRUCT_H));
   APL_MALLOC_FAIL(l_intl_rept_struct_ha);
   memset(l_intl_rept_struct_ha,NULL,sizeof(INTL_REPT_STRUCT_H));

	memset(chr_b_system_date,APL_NULL_CHAR,9);
 chr_l_txn_ref = (char *) calloc(31,sizeof(char));
 chr_l_client_a = (char *) calloc(10,sizeof(char));
 chr_l_refno_a = (char *) calloc(16,sizeof(char));

	

	if ( chr_p_modident == ' ')
   {
      fprintf(fl_userlog,"MOD_IDENT ind IS EMPTY\n");
      APL_DATA_MISSING("MODULE_IND",APL_NULL_STRING,APL_NULL_STRING);
   }

   if (!strcmp(chr_p_batchno ,APL_NULL_STRING))
   {
      fprintf(fl_userlog,"BATCH_NO IS EMPTY\n");
      APL_DATA_MISSING("PROC_NUM",APL_NULL_STRING,APL_NULL_STRING);
   }

   if (!strcmp(chr_p_batchdate ,APL_NULL_STRING))
   {
      fprintf(fl_userlog,"BATCH_DATE IS EMPTY\n");
      APL_DATA_MISSING("PROC_DT",APL_NULL_STRING,APL_NULL_STRING);
   }

   if(CO_ChkErr(*l_debug_info_ptr)== APL_SUCCESS)
         APL_GOBACK_FAIL
	
   if(CO_ReadToken(chr_finifile,"INTL_HF_PATH",chr_sesam_handoff_dir,l_debug_info_ptr)==APL_FAILURE) 
	{
      CO_ProcMonitor(fl_userlog,"could not get SESAM_HANDOFF_DIR from chr_inifile..quitting\n",l_debug_info_ptr, NULL);
      APL_GOBACK_FAIL
    }


	

	

	memset(&l_progseqnum_struct_h, NULL, sizeof(PRO_GSEQNUM_STRUCT_H));
	strcpy(l_progseqnum_struct_h.sequencename, "HOFFFILEEXT");
	strcpy(l_progseqnum_struct_h.seq_attrb_a, APL_NULL_STRING);
	strcpy(l_progseqnum_struct_h.seq_attrb_b, APL_NULL_STRING);
	strcpy(l_progseqnum_struct_h.seq_attrb_c, APL_NULL_STRING);
	l_progseqnum_struct_h.seq_stepby = 1;
	l_progseqnum_struct_h.seq_start = 0;
	l_progseqnum_struct_h.last_seqnum = 99999;
	l_progseqnum_struct_h.recycle_ind=RECYCLE_YES;

	int_l_retval = CO_RtvNxtSeqNum(&l_progseqnum_struct_h, l_debug_info_ptr);
	if (int_l_retval == APL_FAILURE) APL_GOBACK_FAIL

	

	sprintf(chr_l_handoff_esesam, "%sESESAM.%d", chr_sesam_handoff_dir, int_l_retval);
	sprintf(chr_l_handoff_efile, "%sEFILE.%d", chr_sesam_handoff_dir, int_l_retval);

	strcpy(chr_l_str_batchno,chr_p_batchno);

	if ( APL_FAILURE == CO_PadString(chr_l_str_batchno,'L' , 5,"0",l_debug_info_ptr))
   {
      APL_GOBACK_FAIL      
    }  
   

	 

               if (APL_FAILURE == IV_Rtv_SysDate(chr_b_system_date,l_debug_info_ptr) )
               {
                  APL_IF_DEBUG
                  {
                     fprintf(fl_userlog,"Failed to get system chr_date in yyyymmdd format\n");
                  }
                  APL_GOBACK_FAIL
               }

	EXEC SQL SELECT SUM(DECODE(DB_CR_IND,'D',NVL(DEAL_AMOUNT,0),0)),SUM(DECODE(DB_CR_IND,'C',NVL(DEAL_AMOUNT,0),0))
						 INTO :l_deb_total:i_deb_total, :l_cred_total:i_cred_total
						 FROM PRO_GRACCTENT
						 WHERE MODULE_IND  = :chr_p_modident
     		   	    AND   PROC_NUM   = :chr_p_batchno
           			 AND   BATCH_DATE = :chr_p_batchdate;

	IS_ANY_ORA_ERROR

	if ( APL_FAILURE == CO_Pro_DoubleToStr(l_deb_total ,chr_l_str_debtotal))
         {
            APL_GOBACK_FAIL
         }
			
         if ( APL_FAILURE == CO_PadString(chr_l_str_debtotal,'L' , 18,"0",l_debug_info_ptr))
         {
            APL_GOBACK_FAIL
         }
	if ( APL_FAILURE == CO_Pro_DoubleToStr(l_cred_total ,chr_l_str_credtotal))
         {
            APL_GOBACK_FAIL
         }
			
         if ( APL_FAILURE == CO_PadString(chr_l_str_credtotal,'L' , 18,"0",l_debug_info_ptr))
         {
            APL_GOBACK_FAIL
         }

	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_count FROM PRO_GRACCTENT 
				WHERE MODULE_IND  = :chr_p_modident
		      AND	PROC_NUM   = :chr_p_batchno
				AND	BATCH_DATE = :chr_p_batchdate;

	IS_ANY_ORA_ERROR

	strcpy(chr_l_str_count,ltoa(int_l_count));

	if ( APL_FAILURE == CO_PadString(chr_l_str_count,'L' , 5,"0",l_debug_info_ptr))
   {
     APL_GOBACK_FAIL      
   }  

	if ( int_l_count > 0 ) 
	{
		

		strcpy(chr_l_handoff_gsesam,chr_sesam_handoff_dir);
  		strcat(chr_l_handoff_gsesam,"GSESAM.TXT");

   	strcpy(chr_l_handoff_gfile,chr_sesam_handoff_dir);
   	strcat(chr_l_handoff_gfile,"GFILE.TXT");

		fp1 = fopen(chr_l_handoff_gfile, "w");
		fp2 = fopen(chr_l_handoff_gsesam,"w"); 
		
		fprintf(fp1,"ESESAM.TXT");

		fclose(fp1);
		

		
		
		fprintf(fp2,"HDR%s%s%s%s%s%195s\n",chr_b_system_date,chr_l_str_batchno,chr_l_str_count,chr_l_str_debtotal,chr_l_str_credtotal," ");

		

 	   EXEC SQL DECLARE PASSGRAE CURSOR FOR
   		      SELECT * FROM PRO_GRACCTENT
    				WHERE  PROC_NUM    = :chr_p_batchno
           		AND    BATCH_DATE  = :chr_p_batchdate
          	   AND    MODULE_IND   = :chr_p_modident
           		AND    STATUS      = 'G'
    				ORDER BY to_number(SEQUENCE)
					FOR UPDATE OF REC_CLASS;

 	   EXEC SQL OPEN PASSGRAE;

 	   IS_ANY_ORA_ERROR;

		memset(chr_l_shortdate, APL_NULL_CHAR, APL_SHORTDT_LEN);

		for(;;)
		{
			EXEC SQL FETCH PASSGRAE
						INTO :l_pro_gracctent_struct_ha:l_pro_gracctent_struct_i;
		
			IS_ANY_ORA_ERROR;
		
			if (sqlca.sqlcode == 1403)
         {
            if (int_l_fetch_count  == 0)
            {
               /* OPT:AIX CO_InsertErr(l_debug_info_ptr,ERR_BATCHNO_NOTFND,
                              chr_p_batchno, APL_OUT_FILE,
                              APL_OUT_FILE,__LINE__,__FILE__); */
               CO_InsertErr(l_debug_info_ptr,ERR_BATCHNO_NOTFND,
                              chr_p_batchno, APL_NULL_STRING,
                              APL_NULL_STRING,__LINE__,__FILE__);

               fprintf(fl_userlog,"No records in IGRACCTENT TABLE\n");
               APL_GOBACK_FAIL
            }
            else
            {
               fprintf(APL_OUT_FILE,"NO MORE RECORDS IN IGRACCTENT.\n");
               break;
            }
         } 

         int_l_fetch_count++;



		   if ( APL_FAILURE == CO_Pro_DoubleToStr( l_pro_gracctent_struct_ha->h_trans_amt,chr_l_trans_amount))
			{
				APL_GOBACK_FAIL
			}
			if ( APL_FAILURE == CO_PadString(chr_l_trans_amount,'L' , 13,"0",l_debug_info_ptr))
         {
            APL_GOBACK_FAIL
         }


		   
			
			

			if ( !strlen(chr_l_shortdate) )
			{
				EXEC SQL SELECT 
						TO_CHAR(TO_DATE(:l_pro_gracctent_struct_ha->h_value_date),'YYYYMMDD')
				INTO :chr_l_shortdate
				FROM DUAL;

				IS_ANY_ORA_ERROR
			}

   		strcpy(chr_l_std_dt,chr_l_shortdate);
	
			if (l_pro_gracctent_struct_i->i_statistic == -1)
			{
	   	 	strcpy(l_pro_gracctent_struct_ha->h_statistic,"    ");	
			}
			else
			{
				if ( APL_FAILURE == CO_PadString(l_pro_gracctent_struct_ha->h_statistic,'L' , 4,"0",l_debug_info_ptr))
      		{
         		APL_GOBACK_FAIL
      		}
			}
			
			if (l_pro_gracctent_struct_i->i_trans_bog == -1)
         {
            strcpy(l_pro_gracctent_struct_ha->h_trans_bog,"     ");
         }

			if (l_pro_gracctent_struct_i->i_quantity_items == -1)
      	{
         	strcpy(chr_l_qty_items,"              "); 
      	}
      	else
      	{
				strcpy(chr_l_qty_items ,ltoa(l_pro_gracctent_struct_ha->h_quantity_items));

  		      if ( APL_FAILURE == CO_PadString(chr_l_qty_items,'L' , 14,"0",l_debug_info_ptr))
      	   {
        		    APL_GOBACK_FAIL
         	}
      	}

			if (l_pro_gracctent_struct_i->i_offset_client == -1 )
			{

         	strcpy(l_pro_gracctent_struct_ha->h_offset_client,"          ");
      	}

			if (l_pro_gracctent_struct_i->i_broker_cd == -1 )
      	{
         	strcpy(l_pro_gracctent_struct_ha->h_broker_cd,"     ");
      	}

			if ( l_pro_gracctent_struct_i->i_nationality == -1 )
      	{
         	strcpy(l_pro_gracctent_struct_ha->h_nationality,"   ");
      	}

			if (l_pro_gracctent_struct_i->i_instr_isin == -1 )
   	   {
      	   strcpy(l_pro_gracctent_struct_ha->h_instr_isin,"            ");
      	}
	
			if (l_pro_gracctent_struct_i->i_special_tax == -1 )
      	{
         	strcpy(l_pro_gracctent_struct_ha->h_special_tax,"                    ");
      	}
		
			if (l_pro_gracctent_struct_i->i_indentity_no == -1)
      	{
         	strcpy(l_pro_gracctent_struct_ha->h_indentity_no,"          ");
      	}
	
			if (l_pro_gracctent_struct_i->i_auto_rec_flag == -1)
      	{
         	strcpy(l_pro_gracctent_struct_ha->h_auto_rec_flag,"          ");
      	}

			if (l_pro_gracctent_struct_i->i_note_a == -1)
      	{
         	strcpy(l_pro_gracctent_struct_ha->h_note_a,"                                ");
      	}
			else
      	{
         	if ( APL_FAILURE == CO_PadString(l_pro_gracctent_struct_ha->h_note_a,'R' , 32," ",l_debug_info_ptr))
         	{
            	APL_GOBACK_FAIL
         	}
      	}

		   if (l_pro_gracctent_struct_i->i_note_b == -1)
      	{
         	strcpy(l_pro_gracctent_struct_ha->h_note_b,"                                ");
      	}
      	else
      	{
         	if ( APL_FAILURE == CO_PadString(l_pro_gracctent_struct_ha->h_note_b,'R' , 32," ",l_debug_info_ptr))
         	{
            	APL_GOBACK_FAIL
         	}
      	}

			if (l_pro_gracctent_struct_i->i_fcy_amt == -1)
     		{
        		l_pro_gracctent_struct_ha->h_fcy_amt = 0.0; 
        		strcpy(chr_l_fcy_amount,"             ");
     		}
     		else
     		{
				if ( APL_FAILURE == CO_Pro_DoubleToStr( l_pro_gracctent_struct_ha->h_fcy_amt,chr_l_fcy_amount))
             {
               APL_GOBACK_FAIL
             }

            if ( APL_FAILURE == CO_PadString(chr_l_fcy_amount,'L' , 13,"0",l_debug_info_ptr))
            {
               APL_GOBACK_FAIL
            }
        	}

	   	if (l_pro_gracctent_struct_i->i_mis_sprd == -1)
      	{
         	strcpy(chr_l_mis_spread,"           "); 
      	}
      	else
      	{
			   strcpy(chr_l_mis_spread , ltoa(l_pro_gracctent_struct_ha->h_mis_sprd));	
         	if ( APL_FAILURE == CO_PadString( chr_l_mis_spread,'L' , 11,"0",l_debug_info_ptr))
         	{
            	APL_GOBACK_FAIL
         	}
      	}
			
		if (l_pro_gracctent_struct_i->i_rt == -1)
      {  
        	strcpy(l_ae_rate,"           ");
      }  
      else  
      {  
			if ( APL_FAILURE == CO_Pro_DoubleToStr( l_pro_gracctent_struct_ha->h_rt,l_ae_rate))
         {
           APL_GOBACK_FAIL
          }

          if ( APL_FAILURE == CO_PadString(l_ae_rate,'L' , 11,"0",l_debug_info_ptr))
          {
            APL_GOBACK_FAIL
          }
   	 }   

			if (l_pro_gracctent_struct_i->i_safekeep_pos == -1)
      	{
      	   strcpy(l_pro_gracctent_struct_ha->h_safekeep_pos," ");
      	}
			if (l_pro_gracctent_struct_i->i_sequence == -1)
			{
				strcpy(l_pro_gracctent_struct_ha->h_sequence,"     ");	
			}
			else
			{
		   	if ( APL_FAILURE == CO_PadString( l_pro_gracctent_struct_ha->h_sequence,'L' , 5,"0",l_debug_info_ptr))
     	   	{
         	   	APL_GOBACK_FAIL
        		}
			}
	
			if (l_pro_gracctent_struct_i->i_reas_cd == -1)
   	   {
				



            strcpy(l_pro_gracctent_struct_ha->h_reas_cd,APL_NULL_STRING);
      	}

			fprintf(fp2,"%s%s%s%s%s%s%s%s%s%s%s%s%s%s",
						  l_pro_gracctent_struct_ha->h_rec_class,
						  l_pro_gracctent_struct_ha->h_entry,
						  l_pro_gracctent_struct_ha->h_dl_client,
						  l_pro_gracctent_struct_ha->h_currencycode,
                    chr_l_trans_amount,
						  chr_l_std_dt,
						  l_pro_gracctent_struct_ha->h_deal_cd,
						  l_pro_gracctent_struct_ha->h_db_cr_flag,
						  l_pro_gracctent_struct_ha->h_splgr_clt_cd,
						  l_pro_gracctent_struct_ha->h_statistic,
 			  			  l_pro_gracctent_struct_ha->h_trans_bog,
						  chr_l_qty_items,
						  l_pro_gracctent_struct_ha->h_offset_client,
						  l_pro_gracctent_struct_ha->h_broker_cd);
			
				fprintf(fp2,"%s%s%s%s%s%s%s%s%s%s%s%s%s\n",
			 			  l_pro_gracctent_struct_ha->h_nationality,
                    l_pro_gracctent_struct_ha->h_instr_isin,
                    l_pro_gracctent_struct_ha->h_special_tax,
                    l_pro_gracctent_struct_ha->h_indentity_no,
                    l_pro_gracctent_struct_ha->h_auto_rec_flag,
                    l_pro_gracctent_struct_ha->h_note_a,
                    l_pro_gracctent_struct_ha->h_note_b,
                    chr_l_fcy_amount,
                    chr_l_mis_spread,
                    l_ae_rate,
                    l_pro_gracctent_struct_ha->h_safekeep_pos,
                    l_pro_gracctent_struct_ha->h_sequence,
                    l_pro_gracctent_struct_ha->h_reas_cd);

			

  
		
		    
				
				
           fprintf(fl_userlog,"PRINT_IND2 :%s:",l_pro_gracctent_struct_ha->h_deal_ident);
           fprintf(fl_userlog,"PRINT_IND2 :%f:",l_pro_gracctent_struct_ha->h_trans_amt); //AIX- Warnings Removal
           fprintf(fl_userlog,"PRINT_IND2 :%f:",l_pro_gracctent_struct_ha->h_trans_amt);
			 if ((strlen(l_pro_gracctent_struct_ha->h_deal_ident)) && (l_pro_gracctent_struct_ha->h_trans_amt != 1)
				  && (l_pro_gracctent_struct_ha->h_trans_amt > 0 ) )
			 {
			 	EXEC SQL SELECT
			          TO_CHAR(TO_DATE(:l_pro_gracctent_struct_ha->h_value_date),'YYMMDD')
			          INTO :chr_l_valdate
		             FROM DUAL;
			 
			 	IS_ANY_ORA_ERROR

				
			 	strcpy(chr_l_txn_ref, l_pro_gracctent_struct_ha->h_deal_ident);
          	strcpy(chr_l_client_a, strtok(chr_l_txn_ref,"^"));
			 	strcpy(chr_l_refno_a, strtok(NULL,"^"));
			 
			 	memset(chr_l_param_str,NULL,100);
				
			 	sprintf(chr_l_param_str,"%s;%s;%s;%f;%s;%s;%s;",chr_l_valdate,l_pro_gracctent_struct_ha->h_currencycode,l_pro_gracctent_struct_ha->h_currencycode,
															(l_pro_gracctent_struct_ha->h_trans_amt/100),l_pro_gracctent_struct_ha->h_db_cr_flag,
															l_pro_gracctent_struct_ha->h_instr_isin,l_pro_gracctent_struct_ha->h_module_ind);   
		fprintf(fl_userlog,"BEFORE MESSAGE2 :%s:\n",chr_l_refno_a);
      fprintf(fl_userlog,"BEFORE MESSAGE2 :%s:\n",chr_l_client_a);
      fprintf(fl_userlog,"BEFORE MESSAGE2 :%s:\n",chr_l_param_str);
	
			 	if (APL_FAILURE == GBDbInsIMSGENT("100N01",
															 chr_l_refno_a,
	                                           chr_l_client_a,
                                              'Y',
															 chr_l_param_str,
															 l_debug_info_ptr))
              {
                 
                     fprintf(fl_userlog,"AFTER FAIL MESSAGE2 :%s:\n",chr_l_refno_a);
							fprintf(fl_userlog,"MT100 Message Not generated for client %s refno %s\n",chr_l_client_a,chr_l_refno_a);
              }
            fprintf(fl_userlog,"AFTER MESSAGE2 :%s:\n",chr_l_refno_a);
          }
       

  


		 }

		 EXEC SQL UPDATE PRO_GRACCTENT SET STATUS = 'P'
					 WHERE PROC_NUM    = :chr_p_batchno AND    
							 BATCH_DATE  = :chr_p_batchdate AND   
							 MODULE_IND   = :chr_p_modident;

		 IS_ANY_ORA_ERROR

		 EXEC SQL CLOSE PASSGRAE;
		 fprintf(APL_OUT_FILE,"Cursor Closed\n"); 

       IS_ANY_ORA_ERROR;

		 
		 fclose(fp2);
		fprintf(APL_OUT_FILE,"fp2 closed\n");

		   

		fprintf(APL_OUT_FILE,"Started Renaming Files\n");

		strcpy(chr_command,"mv -f ");
      strcat(chr_command,chr_l_handoff_gsesam );
		strcat(chr_command," ");
      strcat(chr_command,chr_l_handoff_esesam);
      system(chr_command);

		strcpy(chr_command,"mv -f ");
      strcat(chr_command,chr_l_handoff_gfile);
		strcat(chr_command," ");
      strcat(chr_command,chr_l_handoff_efile);
      system(chr_command);

		fprintf(APL_OUT_FILE,"Renaming Done\n");

		fprintf(fl_userlog,"No.of Records Processed is  %d \n", int_l_count);	
	   fprintf(APL_OUT_FILE,"No.of Records Processed is  %d \n", int_l_count);	

         
       sprintf(l_intl_rept_struct_ha->report_name,"ESESAM.%d", int_l_retval);
		 strcpy(l_intl_rept_struct_ha->report_desc,"HANDOFF");
		 strcpy(l_intl_rept_struct_ha->report_date,argv[2]);
	    l_intl_rept_struct_ha->report_width=100;
		 strcpy(l_intl_rept_struct_ha->task_desc,p_intlenv_data_struct_h->processtion);
		 strcpy(l_intl_rept_struct_ha->fe_be_ind,APL_BE_IND);
		 strcpy(l_intl_rept_struct_ha->usr,p_intlenv_data_struct_h->usr);
		 if(APL_FAILURE==CO_Proc_DBRptIns(l_intl_rept_struct_ha,l_debug_info_ptr))
       {
			APL_GOBACK_FAIL
 		 }

       sprintf(l_intl_rept_struct_ha->report_name,"EFILE.%d", int_l_retval);
		 strcpy(l_intl_rept_struct_ha->report_desc,"HANDOFF");
		 strcpy(l_intl_rept_struct_ha->report_date,argv[2]);
	    l_intl_rept_struct_ha->report_width=100;
		 strcpy(l_intl_rept_struct_ha->task_desc,p_intlenv_data_struct_h->processtion);
		 strcpy(l_intl_rept_struct_ha->fe_be_ind,APL_BE_IND);
		 strcpy(l_intl_rept_struct_ha->usr,p_intlenv_data_struct_h->usr);
		 if(APL_FAILURE==CO_Proc_DBRptIns(l_intl_rept_struct_ha,l_debug_info_ptr))
       {
			APL_GOBACK_FAIL
 		 }


		 
		
          fprintf(APL_OUT_FILE,"Calling CO_Pro_GrAccRep()\n");
          if ( APL_FAILURE == CO_Pro_GrAccRep(  chr_p_batchno,
                                              	 chr_p_batchdate,
                                              	 chr_p_modident,
                                              	 argv,
                                              	 p_intlenv_data_struct_h,
                                              	 l_debug_info_ptr))
          {
            fprintf(APL_OUT_FILE,"Returning with failure from CO_Pro_GrAccRep()\n");   
            APL_GOBACK_FAIL;
          }

          fprintf(APL_OUT_FILE,"Returning with success from CO_Pro_GrAccRep()\n");
          APL_GOBACK_SUCCESS;
	  }

	 else 
    {
		 unlink(chr_l_handoff_gsesam);
		 unlink(chr_l_handoff_gfile);

		 fprintf(fl_userlog,"No Records Were Processed\n"); 

		 APL_GOBACK_SUCCESS;
	
	  }

	  

   	APL_GOBACK_SUCCESS
   	RETURN_SUCCESS  :
   	{
			APL_FREE(l_pro_gracctent_struct_ha);
			APL_FREE(l_pro_gracctent_struct_i);
         APL_FREE(l_intl_rept_struct_ha);

      	CO_ProcMonitor(fl_userlog,"Leaving EL_PassGrAccEnt() successfully\n" ,NULL,p_intlenv_data_struct_h);
      	return (APL_SUCCESS);
   	}

   	RETURN_FAILURE  :
   	{
			APL_FREE(l_pro_gracctent_struct_ha);
         APL_FREE(l_pro_gracctent_struct_i);
		   APL_FREE(l_intl_rept_struct_ha);

      	CO_ProcMonitor(fl_userlog,"Leaving EL_PassGrAccEnt()  with failure\n",NULL,p_intlenv_data_struct_h);
      	return (APL_FAILURE);
   	}

	}




	int CO_Pro_DoubleToStr (  double chr_p_val,
 	                	  char  *int_p_retval)

	{
   	char chr_temp_str[MAX] ;
   	sprintf(chr_temp_str, "%lf", chr_p_val);
   	sscanf(chr_temp_str, "%[^.]", int_p_retval);
   	return(APL_SUCCESS);
	}


