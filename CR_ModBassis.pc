













 
#include "CO_HostStructdef.h"
EXEC SQL INCLUDE SQLCA.H;

#define CLT_GRP_LBRK	"LBRK"
#define CLT_GRP_FBD 	"FBD"

 

 int DL_Rtv_AssisFldVal(char *p_assis_code,char *p_lbrk_code,char *p_link_val,char *p_field_val,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   struct sqlca           sqlca;
   char                   chr_h_field_val[40] = APL_NULL_STRING;
   short                  i_field_val = 0;
   char                   chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	

   EXEC SQL VAR chr_h_field_val IS STRING;

   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Entered processtion DL_Rtv_AssisFldVal\n",NULL,NULL);
      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Assis Code is %s \n",p_assis_code);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Local Broker Code is %s \n",p_lbrk_code);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Field name is %s \n",p_link_val);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
   }
   
	memset(chr_h_field_val,APL_NULL_CHAR,sizeof(chr_h_field_val));

   sqlca.sqlcode = 0;

	if (strcmp(p_link_val, "access_stamp") == 0)
   {
      EXEC SQL SELECT access_stamp
      INTO :chr_h_field_val:i_field_val
      FROM MHLP_CODE
      WHERE MHLP_CODE = RTRIM(:p_assis_code)
		AND	LCL_BRKCD  = RTRIM(:p_lbrk_code);
   }

	if (strcmp(p_link_val,"maker") == 0)
	{
		EXEC SQL SELECT maker
		INTO :chr_h_field_val:i_field_val
		FROM MHLP_CODE
		WHERE MHLP_CODE = RTRIM(:p_assis_code)
		AND	LCL_BRKCD = RTRIM(:p_lbrk_code);
	}

	if (strcmp(p_link_val, "ROWID") == 0)
   {
      EXEC SQL SELECT ROWID
      INTO :chr_h_field_val:i_field_val
      FROM MHLP_CODE
      WHERE MHLP_CODE = RTRIM(:p_assis_code)
      AND   LCL_BRKCD  = RTRIM(:p_lbrk_code);
   }

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"MHLP_CODE","LCL_BRKCD",APL_NULL_STRING)

	if (i_field_val == -1)
      strcpy((char *)p_field_val, APL_NULL_STRING);
   else
      strcpy((char *)p_field_val, chr_h_field_val);

	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion DL_Rtv_AssisFldVal \n",NULL,NULL);
      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion DL_Rtv_AssisFldVal \n",NULL,NULL);
      return(APL_FAILURE);
   }
}




int DL_Chk_AssisDET(MHLP_CODE_STRUCT_H *p_mhlp_code_struct_h,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   struct sqlca      	sqlca;
   int               	int_retval = 0;
   char              	chr_h_field_val[40] = APL_NULL_STRING;
   char              	chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
   int               	int_l_count=0;
   char              	chr_h_assisstatus[APL_STATUS_LEN] = APL_NULL_STRING;
	char     				chr_l_maker[APL_USERID_LEN] = APL_NULL_STRING;
	MHLP_CODE_STRUCT_H	l_mhlp_code_struct_h;
	MHLP_CODE_STRUCT_I	l_mhlp_code_struct_i;
	int						int_l_error_flag = APL_SUCCESS;
	char						chr_h_accgrp[5] = APL_NULL_STRING;
	char						h_sat_oper_cd[11] = APL_NULL_STRING;
	short						i_accgrp = 0;
	short						i_sat_oper_cd = 0;

   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   sqlca.sqlcode = 0;

   APL_IF_DEBUG
   {

     CO_ProcMonitor(APL_OUT_FILE,"Entered processtion DL_Chk_AssisDET \n",NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Assis Code is %s \n",p_mhlp_code_struct_h->h_mhlp_code);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Assis Code is %s \n",p_mhlp_code_struct_h->h_lcl_brkcd);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h_d->h_mode);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
   }

	memset(&l_mhlp_code_struct_h, NULL, sizeof(MHLP_CODE_STRUCT_H));
   memset(&l_mhlp_code_struct_i, NULL, sizeof(MHLP_CODE_STRUCT_I));



	EXEC SQL VAR chr_h_accgrp IS STRING;
	EXEC SQL VAR h_sat_oper_cd IS STRING;

	

	EXEC SQL SELECT * 
   INTO :l_mhlp_code_struct_h:l_mhlp_code_struct_i
   FROM  MHLP_CODE
   WHERE MHLP_CODE = RTRIM(:p_mhlp_code_struct_h->h_mhlp_code)
	AND	LCL_BRKCD  = RTRIM(:p_mhlp_code_struct_h->h_lcl_brkcd);

	IS_ANY_ORA_ERROR
	
	if (sqlca.sqlcode == 0) 
	{
		if ( !strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_INPUT) ) 
		{
			if (APL_FAILURE == CO_InsertErr(  l_debug_info_ptr,
      	                                    ERR_ASSISCD_EXISTS,
        		                                 (char *)p_mhlp_code_struct_h->h_mhlp_code,
                                          	(char *)p_mhlp_code_struct_h->h_lcl_brkcd,
                                          	APL_NULL_STRING,
                                          	__LINE__,
                                          	__FILE__ ))
      	{
         	APL_GOBACK_FAIL
      	}
      	int_l_error_flag = APL_FAILURE;
		}
	}


	if((sqlca.sqlcode == 1403) && (!strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_MODIFY))) 
	{
		if (APL_FAILURE == CO_InsertErr(  l_debug_info_ptr,
                                          ERR_ASSISCD_NOTFND,
                                          (char *)p_mhlp_code_struct_h->h_mhlp_code,
                                          (char *)p_mhlp_code_struct_h->h_lcl_brkcd,
                                          APL_NULL_STRING,
                                          __LINE__,
                                          __FILE__ ))
      {
         APL_GOBACK_FAIL
      }
      int_l_error_flag = APL_FAILURE;


	}
	 
	

	if(strlen(p_mhlp_code_struct_h->h_dl_client))
	{
		if ( APL_FAILURE == CO_Chk_AccValid((char *)p_mhlp_code_struct_h->h_dl_client,
												  'Y',
												  NULL,
												  NULL,
												  NULL,
												  'Y',
												  'N',
												  'N',
												  'N',
													l_debug_info_ptr
												))

		{
			int_l_error_flag = APL_FAILURE;
		}
	}

	

	if(strlen(p_mhlp_code_struct_h->h_mstclt))
   {
      if ( APL_FAILURE == CO_Chk_AccValid((char *)p_mhlp_code_struct_h->h_mstclt,
                       					  'Y',
												  NULL,
												  NULL,
												  'Y',
												  'Y',
												  'N',
												  'N',
												  'N',
												  l_debug_info_ptr 
                                    ))

      {  
          int_l_error_flag = APL_FAILURE;
      }
   }


	

	if(strlen(p_mhlp_code_struct_h->h_lbrk_mstclt))
   {
      if ( APL_FAILURE == CO_Chk_AccValid((char *)p_mhlp_code_struct_h->h_lbrk_mstclt,
                       					  'Y',
												  NULL,
												  NULL,
												  'Y',
												  'Y',
												  'N',
												  'N',
												  'N',
												  l_debug_info_ptr 
                                    ))

      {
			int_l_error_flag = APL_FAILURE;  
      }
   }

	

   EXEC SQL SELECT CLN_GRP,CLN_SAT_OPER_CD
   INTO  :chr_h_accgrp:i_accgrp,
         :h_sat_oper_cd:i_sat_oper_cd
   FROM  MT_CLIENT
   WHERE cln_code = RTRIM(:p_mhlp_code_struct_h->h_lcl_brkcd)
   AND   STATUS = 'AA';

   IS_ANY_ORA_ERROR

   if(sqlca.sqlcode == 0)
   {
		
      if(strcmp(chr_h_accgrp,CLT_GRP_LBRK) && strcmp(chr_h_accgrp,CLT_GRP_FBD) )
      {
         if (APL_FAILURE == CO_InsertErr( l_debug_info_ptr,
                                            ERR_INVALID_ACCGRP_FOR_LOCALBRK,
                                            (char *)p_mhlp_code_struct_h->h_mhlp_code,
                                            (char *)p_mhlp_code_struct_h->h_lcl_brkcd,
                                            APL_NULL_STRING,
                                            __LINE__,
                                            __FILE__ 
                        						))
			{
				int_l_error_flag = APL_FAILURE;
			}
       } 

		
		if (!strcmp(chr_h_accgrp,CLT_GRP_FBD) && 
				!strcmp(h_sat_oper_cd,APL_NULL_STRING) )
		{
			if(APL_FAILURE == CO_InsertErr( l_debug_info_ptr,
                                            ERR_INVALID_ACCGRP_FOR_LOCALBRK,
                                            (char *)p_mhlp_code_struct_h->h_mhlp_code,
                                            (char *)p_mhlp_code_struct_h->h_lcl_brkcd,
                                            APL_NULL_STRING,
                                            __LINE__,
                                            __FILE__ 
														)) 
			{
				int_l_error_flag = APL_FAILURE;
			}
		}
			 
    }

	 
	
	EXEC SQL SELECT CLN_GRP
   INTO  :chr_h_accgrp:i_accgrp
   FROM  MT_CLIENT
   WHERE CLN_SAT_OPER_CD = RTRIM(:p_mhlp_code_struct_h->h_lcl_opcd)
   AND   STATUS = 'AA';

   IS_ANY_ORA_ERROR;

   if(sqlca.sqlcode == 0)
	{
      
      if(strcmp(chr_h_accgrp,CLT_GRP_LBRK) && strcmp(chr_h_accgrp,CLT_GRP_FBD) )
      {
         if(APL_FAILURE == CO_InsertErr(l_debug_info_ptr,
														ERR_INVALID_ACCGRP_FOR_OPRCODE,
                                          (char *)p_mhlp_code_struct_h->h_mhlp_code,
                                          (char *)p_mhlp_code_struct_h->h_lcl_brkcd,
                                          APL_NULL_STRING,
                                          __LINE__,
                                          __FILE__
                        					))
			{
				int_l_error_flag = APL_FAILURE;
			}
       } 

      
      if (!strcmp(chr_h_accgrp,CLT_GRP_FBD) && 
            !strcmp(p_mhlp_code_struct_h->h_lcl_opcd,APL_NULL_STRING) )
      {
         if(APL_FAILURE == CO_InsertErr(l_debug_info_ptr,
                           			ERR_INVALID_ACCGRP_FOR_OPRCODE,
                           			(char *)p_mhlp_code_struct_h->h_mhlp_code,
                           			(char *)p_mhlp_code_struct_h->h_lcl_brkcd,
                           			APL_NULL_STRING,
                           			__LINE__,
                           			__FILE__
                        		) )
			{
				int_l_error_flag = APL_FAILURE;
			}
      }
	}

	if (APL_FAILURE == int_l_error_flag) 
			APL_GOBACK_FAIL
	else
			APL_GOBACK_SUCCESS


	RETURN_SUCCESS :
      APL_IF_DEBUG
      {
         CO_ProcMonitor(   APL_OUT_FILE,
                     "Leaving Function DL_Chk_AssisDET with success\n",
                     NULL,
                     NULL);
      }
      return(APL_SUCCESS);

   RETURN_FAILURE :
      APL_IF_DEBUG
      {
         CO_ProcMonitor(   APL_OUT_FILE,
                     "Leaving Function DL_Chk_AssisDET with errors\n",
                     NULL,
                     NULL);
      }
      return(APL_FAILURE);
}





int DL_Mod_AssisCd(MHLP_CODE_STRUCT_H *p_mhlp_code_struct_h,char *p_ora_rowid,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H	**l_debug_info_ptr)
{
	struct sqlca        	sqlca;
   int                 	int_retval = 0;
   char                	chr_h_field_val[40] = APL_NULL_STRING;
   char                	chr_h_sys_access_stamp[APL_DATE_LEN] = APL_NULL_STRING;
   char                	h_clt_status[APL_STATUS_LEN] = APL_NULL_STRING;
	char						chr_l_assis_status[APL_STATUS_LEN] = APL_NULL_STRING;
	MHLP_CODE_STRUCT_I	*l_mhlp_code_struct_i_ptr = NULL; 
	char                 chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	int                  int_l_rowexists=0;

	EXEC SQL VAR p_mhlp_code_struct_h->h_mhlp_code is STRING;
	EXEC SQL VAR p_mhlp_code_struct_h->h_lcl_brkcd is STRING;
	EXEC SQL VAR p_mhlp_code_struct_h->h_lcl_opcd is STRING;
	EXEC SQL VAR p_mhlp_code_struct_h->h_dl_client is STRING;
	EXEC SQL VAR p_mhlp_code_struct_h->h_mstclt is STRING;
	EXEC SQL VAR p_mhlp_code_struct_h->h_custodian_clt is STRING;
	EXEC SQL VAR p_mhlp_code_struct_h->h_manual_ind_intn is STRING;
	EXEC SQL VAR p_mhlp_code_struct_h->h_mhlp_stat is STRING;
	EXEC SQL VAR p_mhlp_code_struct_h->h_lbrk_mstclt is STRING;

	
	 #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

	sqlca.sqlcode = 0;

   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Entered processtion DL_Mod_AssisCd \n",NULL,p_intl_env_data_struct_h_d);


		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Assis Code  is %s \n",p_mhlp_code_struct_h->h_mhlp_code);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Local Broker Code  is %s \n",p_mhlp_code_struct_h->h_lcl_brkcd);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h_d->h_mode);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
	}

	

	l_mhlp_code_struct_i_ptr = (MHLP_CODE_STRUCT_I *)calloc(1,sizeof(MHLP_CODE_STRUCT_I));
	APL_MALLOC_FAIL(l_mhlp_code_struct_i_ptr)

	
	l_mhlp_code_struct_i_ptr->i_mhlp_code = 0;
	l_mhlp_code_struct_i_ptr->i_lcl_brkcd  = 0;
	l_mhlp_code_struct_i_ptr->i_lcl_opcd= 0;
	l_mhlp_code_struct_i_ptr->i_custodian_clt  = 0;
	l_mhlp_code_struct_i_ptr->i_manual_ind_intn= 0;
	l_mhlp_code_struct_i_ptr->i_maker		 = 0;
	l_mhlp_code_struct_i_ptr->i_maker_dt	 = 0;
	l_mhlp_code_struct_i_ptr->i_mhlp_stat = 0;
	l_mhlp_code_struct_i_ptr->i_access_stamp = 0; 


	
	
	if(strlen(p_mhlp_code_struct_h->h_dl_client) == 0)
		l_mhlp_code_struct_i_ptr->i_dl_client = -1;
	else
		l_mhlp_code_struct_i_ptr->i_dl_client = 0;

	if(strlen(p_mhlp_code_struct_h->h_mstclt) == 0)
		l_mhlp_code_struct_i_ptr->i_mstclt = -1;
	else
		l_mhlp_code_struct_i_ptr->i_mstclt = 0;

	if(strlen(p_mhlp_code_struct_h->h_checker) == 0)
		l_mhlp_code_struct_i_ptr->i_checker = -1;
	else
		l_mhlp_code_struct_i_ptr->i_checker = 0;

	if(strlen(p_mhlp_code_struct_h->h_checker_dt) == 0)
		l_mhlp_code_struct_i_ptr->i_checker_dt = -1;
	else
		l_mhlp_code_struct_i_ptr->i_checker_dt = 0;

	if(strlen(p_mhlp_code_struct_h->h_lbrk_mstclt) == 0)
		l_mhlp_code_struct_i_ptr->i_lbrk_mstclt = -1;
	else
		l_mhlp_code_struct_i_ptr->i_lbrk_mstclt = 0;


	if (CO_RtvSysDtTime(chr_h_sys_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
      APL_GOBACK_FAIL

  	if (strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_INPUT) == 0)
  	{
		strcpy(p_mhlp_code_struct_h->h_mhlp_stat,STATUS_UAUTH);
		strcpy(p_mhlp_code_struct_h->h_maker,p_intl_env_data_struct_h_d->usr);
		strcpy(p_mhlp_code_struct_h->h_maker_dt,chr_h_sys_access_stamp);
		strcpy(p_mhlp_code_struct_h->h_checker,APL_NULL_STRING);
		strcpy(p_mhlp_code_struct_h->h_checker_dt,APL_NULL_STRING);
		strcpy(p_mhlp_code_struct_h->h_access_stamp,chr_h_sys_access_stamp);
	
		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         APL_GOBACK_FAIL

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
     	sprintf(chr_l_buf,"Assis Code  is %s \n",p_mhlp_code_struct_h->h_mhlp_code);
     	CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);			

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
     	sprintf(chr_l_buf,"Local Broker Code  is %s \n",p_mhlp_code_struct_h->h_lcl_brkcd);
     	CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
     	sprintf(chr_l_buf,"Operator Code  is %s \n",p_mhlp_code_struct_h->h_lcl_opcd);
     	CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
     	sprintf(chr_l_buf,"Account is %s \n",p_mhlp_code_struct_h->h_dl_client);
     	CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
     	sprintf(chr_l_buf,"Mstacc  is %s \n",p_mhlp_code_struct_h->h_mstclt);
     	CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
     	sprintf(chr_l_buf,"Custodian is %s \n",p_mhlp_code_struct_h->h_custodian_clt);
     	CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
     	sprintf(chr_l_buf,"Manual intn is %s \n",p_mhlp_code_struct_h->h_manual_ind_intn);
     	CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
     	sprintf(chr_l_buf,"Maker is %s \n",p_mhlp_code_struct_h->h_maker);
     	CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
     	sprintf(chr_l_buf,"Makerdt is %s \n",p_mhlp_code_struct_h->h_maker_dt);
     	CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
     	sprintf(chr_l_buf,"Checker is %s \n",p_mhlp_code_struct_h->h_checker);
     	CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
     	sprintf(chr_l_buf,"checkerdt is %s \n",p_mhlp_code_struct_h->h_checker_dt);
     	CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
     	sprintf(chr_l_buf,"Assis Status is %s \n",p_mhlp_code_struct_h->h_mhlp_stat);
     	CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
     	sprintf(chr_l_buf,"Access Stamp is %s \n",p_mhlp_code_struct_h->h_access_stamp);
     	CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
     	sprintf(chr_l_buf,"Lbrk Mstacc is %s \n",p_mhlp_code_struct_h->h_lbrk_mstclt);
     	CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

		EXEC SQL INSERT INTO MHLP_CODE
		VALUES (:p_mhlp_code_struct_h:l_mhlp_code_struct_i_ptr);

		IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_REC_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
	}
	else if (strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_MODIFY) == 0)
	{
		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
        	APL_GOBACK_FAIL

		strcpy((char *)chr_l_assis_status,STATUS_UAUTH);

		EXEC SQL UPDATE MHLP_CODE 
		SET	MHLP_CODE = :p_mhlp_code_struct_h->h_mhlp_code:l_mhlp_code_struct_i_ptr->i_mhlp_code,
		LCL_BRKCD	= :p_mhlp_code_struct_h->h_lcl_brkcd:l_mhlp_code_struct_i_ptr->i_lcl_brkcd,
		LCL_OPCD	= :p_mhlp_code_struct_h->h_lcl_opcd:l_mhlp_code_struct_i_ptr->i_lcl_opcd,
		client		= :p_mhlp_code_struct_h->h_dl_client:l_mhlp_code_struct_i_ptr->i_dl_client,
		master_clt		= :p_mhlp_code_struct_h->h_mstclt:l_mhlp_code_struct_i_ptr->i_mstclt,
		CUSTODIAN_CLT	= :p_mhlp_code_struct_h->h_custodian_clt:l_mhlp_code_struct_i_ptr->i_custodian_clt,
		MANUAL_IND = :p_mhlp_code_struct_h->h_manual_ind_intn:l_mhlp_code_struct_i_ptr->i_manual_ind_intn,
		maker			= :p_mhlp_code_struct_h->h_maker:l_mhlp_code_struct_i_ptr->i_maker,
		maker_dt		= :p_mhlp_code_struct_h->h_maker_dt:l_mhlp_code_struct_i_ptr->i_maker_dt,
		checker		= NULL,
		checker_dt	= NULL,
		MHLP_STAT= :chr_l_assis_status,
		access_stamp= :chr_h_sys_access_stamp:l_mhlp_code_struct_i_ptr->i_access_stamp,
		LCL_BRK_MAST	= :p_mhlp_code_struct_h->h_lbrk_mstclt:l_mhlp_code_struct_i_ptr->i_lbrk_mstclt
		WHERE ROWID = :p_ora_rowid;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	}

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
  	{
     	APL_FREE(l_mhlp_code_struct_i_ptr)

     	APL_IF_DEBUG
      CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion DL_Mod_AssisCd SUCCESS \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
     	APL_FREE(l_mhlp_code_struct_i_ptr)

     	APL_IF_DEBUG
     	CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion DL_Mod_AssisCd FAILURE \n",NULL,p_intl_env_data_struct_h_d);

     	return(APL_FAILURE);
   }

}

	



int DL_Rtv_MastAcc(char						*chr_p_client,
							char						*p_lbrk_mstclt,
							DEBUG_INFO_STRUCT_H			**l_debug_info_ptr)
{
	struct sqlca sqlca;

	char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	char chr_l_h_lbrk_mstacc[APL_CLIENT_LENGTH] = APL_NULL_STRING;

	short l_i_lbrk_mstacc = 0;

	EXEC SQL VAR chr_l_h_lbrk_mstacc IS STRING;
	
	 #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

	sqlca.sqlcode = 0;

	APL_IF_DEBUG
   {

     CO_ProcMonitor(APL_OUT_FILE,"Entered processtion DL_Rtv_MastAcc \n",NULL,NULL);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Account is %s \n",chr_p_client);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
	}


	EXEC SQL SELECT cln_master
   INTO  :chr_l_h_lbrk_mstacc:l_i_lbrk_mstacc
   FROM MT_CLIENT
   WHERE cln_code=RTRIM(:chr_p_client)
   AND STATUS = 'AA';

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	if(sqlca.sqlcode == 0)
		strcpy(p_lbrk_mstclt,chr_l_h_lbrk_mstacc);

	APL_GOBACK_SUCCESS


   RETURN_SUCCESS :
   {
      APL_IF_DEBUG
      	CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion DL_Rtv_MastAcc SUCCESS \n",NULL,NULL);

      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      APL_IF_DEBUG
      	CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion DL_Rtv_MastAcc FAILURE \n",NULL,NULL);

      return(APL_FAILURE);
   }

}


int DL_Chk_AssisOTH(char *p_str_assiscode,char *p_str_lbrkcode,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_e,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	struct sqlca sqlca;

	int int_l_error_flag = APL_SUCCESS;
	int int_retval = 0;

   char 	chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
   char 	chr_l_h_checkerdt[APL_DATE_LEN] = APL_NULL_STRING;
	char  chr_l_maker[APL_USERID_LEN] = APL_NULL_STRING;
	char	chr_l_h_status[APL_STATUS_LEN] = APL_NULL_STRING;

   short l_i_checkerdt = 0;
	short l_i_status = 0;

   EXEC SQL VAR chr_l_h_checkerdt IS STRING;
	EXEC SQL VAR chr_l_h_status IS STRING;

    #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   sqlca.sqlcode = 0;

   APL_IF_DEBUG
   {

     CO_ProcMonitor(APL_OUT_FILE,"Entered processtion DL_Chk_AssisOTH\n",NULL,NULL);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Assis Code is %s \n",p_str_assiscode);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
   }
	

	EXEC SQL SELECT checker_dt,MHLP_STAT
	INTO	:chr_l_h_checkerdt:l_i_checkerdt,
			:chr_l_h_status:l_i_status
	FROM MHLP_CODE
	WHERE MHLP_CODE = :p_str_assiscode
	AND	LCL_BRKCD  = :p_str_lbrkcode;

	IS_ANY_ORA_ERROR

	
 	if(!strcmp(p_intl_env_data_struct_h_e->h_mode,APL_FUNC_DELETE))
   {
      if(!strcmp((char *)chr_l_h_status,STATUS_DEL_UAUTH))
      {
         if (APL_FAILURE == CO_InsertErr(  l_debug_info_ptr,
                                             ERR_ASSISCD_MARKEDFORDEL,
                                             (char *)p_str_assiscode,
                                             (char *)p_str_lbrkcode,
                                             APL_NULL_STRING,
                                             __LINE__,
                                             __FILE__ ))
         {
				APL_GOBACK_FAIL
         }
			int_l_error_flag = APL_FAILURE;
      }
   }

	if (!strcmp(p_intl_env_data_struct_h_e->h_mode,APL_FUNC_AUTHORISE) )
   {
      

      if  (l_i_checkerdt == 0)
      {
         if (APL_FAILURE == CO_InsertErr(  l_debug_info_ptr,
                                             ERR_ASSISCD_AUTHORIZED,
                                             p_str_assiscode,
                                             p_str_lbrkcode,
                                             APL_NULL_STRING,
                                             __LINE__,
                                             __FILE__ ))
         {
            APL_GOBACK_FAIL
         }
			int_l_error_flag = APL_FAILURE;
      }

      
      CO_ProcMonitor(APL_OUT_FILE,"Calling DL_Rtv_AssisFldVal to obtain maker  in Authorise mode",NULL,NULL);

      int_retval = DL_Rtv_AssisFldVal(p_str_assiscode,
                                p_str_lbrkcode,
                                 "maker",
                                 chr_l_maker,
                                 l_debug_info_ptr);

      if(int_retval!=APL_SUCCESS)
         APL_GOBACK_FAIL  

      if(!strcmp(p_intl_env_data_struct_h_e->usr,chr_l_maker))
      {
         if (APL_FAILURE == CO_InsertErr(l_debug_info_ptr,
                                           ERR_MAKER_CHECKER_SAME,
                                           p_str_assiscode,
                                           p_str_lbrkcode,
                                           APL_NULL_STRING,
                                           __LINE__,
                                           __FILE__ ))
         {
				APL_GOBACK_FAIL
         }
			int_l_error_flag = APL_FAILURE;
      }

   }

	if (APL_FAILURE == int_l_error_flag)
         APL_GOBACK_FAIL
   else
		APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion DL_Chk_AssisOTH SUCCESS \n",NULL,NULL);

      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion DL_Chk_AssisOTH FAILURE \n",NULL,NULL);

      return(APL_FAILURE);
	}
}



int DL_Mod_AssisOTH(char *p_assis_code,char *p_lbrk_code,char *p_row_id_assis,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca         sqlca;
   int                  int_retval = 0;
   char                 h_mhlp_stat[APL_STATUS_LEN] = APL_NULL_STRING;
   char                 chr_h_sys_access_stamp[APL_DATE_LEN] = APL_NULL_STRING;
   int                  int_h_flg = 0;
   char                 chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	short						i_mhlp_stat = 0;

   EXEC SQL VAR h_mhlp_stat IS STRING;
	EXEC SQL VAR chr_h_sys_access_stamp IS STRING;

   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   sqlca.sqlcode = 0;

   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Entered processtion DL_Mod_AssisOTH\n",NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Assis Code is %s \n",p_assis_code);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Broker is %s \n",p_lbrk_code);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h_d->h_mode);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
   }

   if(CO_RtvSysDtTime(chr_h_sys_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
      APL_GOBACK_FAIL

	int_h_flg = 0;

	EXEC SQL SELECT MHLP_STAT
   INTO :h_mhlp_stat:i_mhlp_stat
   FROM MHLP_CODE
   WHERE ROWID = :p_row_id_assis;

   IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	if (strcmp(p_intl_env_data_struct_h_d->h_mode, APL_FUNC_RESET) == 0)
   {
		if (strcmp(h_mhlp_stat, STATUS_DEL_UAUTH) == 0)
			strcpy((char *)h_mhlp_stat, STATUS_AUTH);
		else
			int_h_flg = 1;

		if(int_h_flg == 0)
		{	
			if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
            APL_GOBACK_FAIL

			EXEC SQL UPDATE MHLP_CODE
         SET checker = :p_intl_env_data_struct_h_d->usr,
             checker_dt = :chr_h_sys_access_stamp,
             MHLP_STAT = :h_mhlp_stat,
				 access_stamp = :chr_h_sys_access_stamp
         WHERE ROWID = :p_row_id_assis;

			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
		

		}
	}

	if (strcmp(p_intl_env_data_struct_h_d->h_mode, APL_FUNC_AUTHORISE) == 0)
   {
		if (strcmp(h_mhlp_stat, STATUS_UAUTH) == 0)
       	strcpy((char *)h_mhlp_stat, STATUS_AUTH);
		else if (!strcmp(h_mhlp_stat,STATUS_DEL_UAUTH))
				strcpy((char *)h_mhlp_stat, STATUS_DEL_UAUTH);
		else
			int_h_flg = 1;
		if (int_h_flg == 0)
		{
			if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         	APL_GOBACK_FAIL
			if (strcmp(h_mhlp_stat,STATUS_AUTH) == 0)	
			{
				EXEC SQL UPDATE MHLP_CODE
				SET checker 		= :p_intl_env_data_struct_h_d->usr,
					 checker_dt 		= :chr_h_sys_access_stamp,
				 	 MHLP_STAT 	= :h_mhlp_stat,
				 	 access_stamp 	= :chr_h_sys_access_stamp
				WHERE ROWID = :p_row_id_assis;

				IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
			}
			else if (strcmp(h_mhlp_stat,STATUS_DEL_UAUTH) == 0)
			{
				EXEC SQL DELETE FROM MHLP_CODE 
				WHERE ROWID = :p_row_id_assis;

				IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
			}
		}
   }
	else if (strcmp(p_intl_env_data_struct_h_d->h_mode, APL_FUNC_DELETE) == 0)
	{
		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
            APL_GOBACK_FAIL
	
		strcpy((char *)h_mhlp_stat,STATUS_DEL_UAUTH);

      EXEC SQL UPDATE MHLP_CODE
      SET 	maker 		  = :p_intl_env_data_struct_h_d->usr,
				maker_dt 		  = :chr_h_sys_access_stamp,
				checker       = NULL,
           	checker_dt     = NULL,
           	MHLP_STAT  = :h_mhlp_stat,
           	access_stamp  = :chr_h_sys_access_stamp
      WHERE ROWID = :p_row_id_assis;

      IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
	}

	APL_GOBACK_SUCCESS

   
	RETURN_SUCCESS :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion DL_Mod_AssisOTH SUCCESS \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion DL_Mod_AssisOTH FAILURE \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_FAILURE);
   }
}
