
/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to 
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, pheaderocopying, recording or 
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*******************************************************************************
 *
 * Module Name         :         Dynamic Reports	
 *
 * File Name           :         IntlReportsNew.pc
 *
 * Description         :         This file contains all functions for Reports.
 *
 *            Version Control Block
 *
 * Date        Version		Author              Description		RFS No.
 * ---------   --------	 ---------------  ----------------------------------
 * 16/08/2006   1.0        Vinay kalaskar			New File	     HDFC_Reports1
 * AIX - Warnings Removal -- Typecasted to (int) for strlen -- 12032010
 * *****************************************************************************/


#include "Reports_Common.h"
#include "Intellect_Interface.h"
#include "CO_IndStructdef.h"

#define	PARAMSEP		'' 
#define	FIELDVALSEP		''
#define COMASEP			','
#define PIPESEP  		'|'
#define SEMISEP			';'
#define CAPSEP		 	'^'

extern FILE* g_logfile ;

/*Pasha Added for Amfi compress flag naming convention */
extern int g_dynamic_seq;
extern char g_chr_dynamic_seq[10];
EXEC SQL INCLUDE SQLCA.H;

/* ISKB-503:  ASHISH 21-11-2007 */
/*#define STYLE "<STYLE>.heading{font-family: Arial, Helvetica, sans-serif; font-size: 10pt; font-weight: bold; color: #000000}.normal{font-family: Arial, Helvetica, sans-serif; font-size: 11pt; color: #000000}.ez1{background:#e8eff9;; color: #000090; font-family: Arial, Helvetica, sans-serif; font-size: 9pt; font-weight: normal; text-decoration: none}.ez3{background:########; color: #000090; font-family: Arial, Helvetica, sans-serif; font-size: 9pt; font-weight: bold; text-decoration: none}.ez4{background:#e8eff9; color: #000090; font-family: Arial, Helvetica, sans-serif; font-size: 9pt; font-weight: bold; text-decoration: none text-align: center}.ez5{background:#e8eff9;; color: #FFFFFF font-family: Arial, Helvetica, sans-serif; font-size: 11pt; font-weight: bold; text-decoration: none text-align: center}.ez8{background:#E3F5FD;; color: #094D66; font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-weight: bold; text-decoration: none}.ez9{color: #000090; font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-weight: bold; text-decoration: none}.ez10{color: #094D66; font-family: Arial, Helvetica, sans-serif; font-size: 10pt; font-weight: bold; text-decoration: none}.ez11{font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-weight: bold; text-decoration: none}.hot{background:#ffeeef; font-family: Arial, Helvetica, sans-serif; font-size: 9pt; color: #aa1133; font-weight: bold;}.hot1{background:#F2FDFF;; color:#000090; font-family: Arial, Helvetica, sans-serif; font-size: 9pt; font-weight: normal; text-decoration: none}.footer{color: #000090; font-family: Arial, Helvetica, sans-serif; font-size: 9pt; font-weight: normal; text-decoration: none}.record{background:#F2FDFF;; color:#000090; font-family: Arial, Helvetica, sans-serif; font-size: 9pt; font-weight: normal; text-decoration: none}.xlsnumber{background:#F2FDFF;; color:#000090; font-family: Arial, Helvetica, sans-serif; font-size: 9pt; font-weight: normal; text-decoration: none;mso-number-format:\"_(* #,##0.00##_);_(* \(#,##0.00##\);_(* 0.00## ??_);_(@_)\";white-space:normal;}</STYLE>"*/
#define STYLE "<STYLE>.heading{font-family: Arial, Helvetica, sans-serif; font-size: 10pt; font-weight: bold; color: #000000}.normal{font-family: Arial, Helvetica, sans-serif; font-size: 11pt; color: #000000}.ez1{background:#e8eff9;; color: #000090; font-family: Arial, Helvetica, sans-serif; font-size: 9pt; font-weight: normal; text-decoration: none}.ez3{background:########; color: #000090; font-family: Arial, Helvetica, sans-serif; font-size: 9pt; font-weight: bold; text-decoration: none}.ez4{background:#e8eff9; color: #000090; font-family: Arial, Helvetica, sans-serif; font-size: 9pt; font-weight: bold; text-decoration: none text-align: center}.ez5{background:#e8eff9;; color: #FFFFFF font-family: Arial, Helvetica, sans-serif; font-size: 11pt; font-weight: bold; text-decoration: none text-align: center}.ez8{background:#E3F5FD;; color: #094D66; font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-weight: bold; text-decoration: none}.ez9{color: #000090; font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-weight: bold; text-decoration: none}.ez10{color: #094D66; font-family: Arial, Helvetica, sans-serif; font-size: 10pt; font-weight: bold; text-decoration: none}.ez11{font-family: Arial, Helvetica, sans-serif; font-size: 8pt; font-weight: bold; text-decoration: none}.hot{background:#ffeeef; font-family: Arial, Helvetica, sans-serif; font-size: 9pt; color: #aa1133; font-weight: bold;}.hot1{background:#F2FDFF;; color:#000090; font-family: Arial, Helvetica, sans-serif; font-size: 9pt; font-weight: normal; text-decoration: none}.footer{color: #000090; font-family: Arial, Helvetica, sans-serif; font-size: 9pt; font-weight: normal; text-decoration: none}.record{background:#F2FDFF;; color:#000090; font-family: Arial, Helvetica, sans-serif; font-size: 9pt; font-weight: normal; text-decoration: none}.xlsnumber{background:#F2FDFF;; color:#000090; font-family: Arial, Helvetica, sans-serif; font-size: 9pt; font-weight: normal; text-decoration: none;mso-number-format:\"_*\#\\\,\#\#0\.00##;_\(\@_\)\"; mso-pattern:auto none;white-space:normal;}</STYLE>"


int DynamicReportFn(char *p_chr_repid,char *p_chr_repname,char *p_chr_repformat,
		char *p_chr_runparamstr,char *p_start_date,char *p_compress_flag,
		char *p_default_param,char *p_web_login_id,char *p_web_rpt_id,char *p_web_source_from,char *p_web_report_dt,char *p_web_proc_id,char *p_user, 
		FILE *fl_userlog,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	printf("p_chr_repid:|%s|\n",p_chr_repid);
	printf("p_chr_repname:|%s|\n",p_chr_repname);
	printf("p_chr_repformat:|%s|\n",p_chr_repformat);
	printf("p_chr_runparamstr:|%s|\n",p_chr_runparamstr);
	printf("p_start_date:|%s|\n",p_start_date);
	printf("p_compress_flag:|%s|\n",p_compress_flag);
	printf("p_default_param:|%s|\n",p_default_param);
	printf("p_web_login_id:|%s|\n",p_web_login_id);
	printf("p_web_rpt_id:|%s|\n",p_web_rpt_id);
	printf("p_web_source_from:|%s|\n",p_web_source_from);
	printf("p_web_report_dt:|%s|\n",p_web_report_dt);
	printf("p_web_proc_id:|%s|\n",p_web_proc_id);
	printf("p_user:|%s|\n",p_user);
	printf("FIELDVALSEP:|%c|\n",FIELDVALSEP);/*** SUBU AIX***/
	fprintf(fl_userlog,"Inside DynamicReportFn\n");
	fprintf(fl_userlog,"p_chr_repid:|%s|\n",p_chr_repid);
	fprintf(fl_userlog,"p_chr_repname:|%s|\n",p_chr_repname);
	fprintf(fl_userlog,"p_chr_repformat:|%s|\n",p_chr_repformat);
	fprintf(fl_userlog,"p_chr_runparamstr:|%s|\n",p_chr_runparamstr);
	fprintf(fl_userlog,"p_start_date:|%s|\n",p_start_date);
	fprintf(fl_userlog,"p_compress_flag:|%s|\n",p_compress_flag);
	fprintf(fl_userlog,"p_default_param:|%s|\n",p_default_param);
	fprintf(fl_userlog,"p_web_login_id:|%s|\n",p_web_login_id);
	fprintf(fl_userlog,"p_web_rpt_id:|%s|\n",p_web_rpt_id);
	fprintf(fl_userlog,"p_web_source_from:|%s|\n",p_web_source_from);
	fprintf(fl_userlog,"p_web_report_dt:|%s|\n",p_web_report_dt);
	fprintf(fl_userlog,"p_web_proc_id:|%s|\n",p_web_proc_id);
	fprintf(fl_userlog,"p_user:|%s|\n",p_user);
	fprintf(fl_userlog,"FIELDVALSEP:|%c|\n",FIELDVALSEP);/*** SUBU AIX***/
	char  l_chr_rep_id[11]				= APL_NULL_STRING;
	char  l_chr_rep_format[10]			= APL_NULL_STRING;
	char  l_chr_rep_name[100]			= APL_NULL_STRING;
	char  l_chr_client[11]				= APL_NULL_STRING;
	char  l_chr_fieldval[4000]			= APL_NULL_STRING;
	char  l_chr_run_paramstr[2000]   		= APL_NULL_STRING;
	char  l_start_date[20]   	      		= APL_NULL_STRING;
	char  l_user[20]				= APL_NULL_STRING;
	char  l_client_flag[3]				= APL_NULL_STRING;
	char  l_default_query[8001]      		= APL_NULL_STRING;
	char  l_default_query1[8001]      		= APL_NULL_STRING;
	char  l_default_query2[10001]      		= APL_NULL_STRING;
	char  l_all_web_cln_qry[10001]      		= APL_NULL_STRING;
	char  l_all_web_cln_qry_replace[10001]      		= APL_NULL_STRING;
	char  l_all_web_cln_list[50001]      		= APL_NULL_STRING;
	char  l_all_web_cln_list_sep[50001]      		= APL_NULL_STRING;
	VARCHAR chr_l_sql_stmt[200];
	VARCHAR chr_l_h_select_stmt_replace[501];
	
	FILE *l_init_file 				= (FILE *)NULL;
	char l_init_path[300]				= APL_NULL_STRING;
	char l_tar_path[2000]				= APL_NULL_STRING;
	char l_mode_path[2000]				= APL_NULL_STRING;
	char l_zip_path[2000]				= APL_NULL_STRING;
	char l_remove_path[2000]			= APL_NULL_STRING;
	char l_move_path[2000]				= APL_NULL_STRING;
	char l_common_path[2000]			= APL_NULL_STRING;
	char l_report_path[400]				= APL_NULL_STRING;
	char l_temp_path[400]				= APL_NULL_STRING;
	char l_compress_flag[5]				= APL_NULL_STRING;
	char l_default_param[5]				= APL_NULL_STRING;
	char l_time_stamp[30]				= APL_NULL_STRING;

	char g_style[4000] = APL_NULL_STRING;
	char g_style_lt[4000]= APL_NULL_STRING;
	char g_setting_flag[2]= APL_NULL_STRING;
	char g_table_border[2]= APL_NULL_STRING;
	
	//changes for report generation through api start
	char l_web_login_id[101]				= APL_NULL_STRING;
	char l_web_rpt_id[101]				= APL_NULL_STRING;
	char l_web_source_from[101]				= APL_NULL_STRING;
	char l_web_report_dt[101]				= APL_NULL_STRING;
	char l_web_proc_id[101]				= APL_NULL_STRING;
	//changes for report generation through api end
	
	memset(l_init_path,APL_NULL_CHAR,sizeof(l_init_path));
	memset(l_report_path,APL_NULL_CHAR,sizeof(l_report_path));
	memset(l_temp_path,APL_NULL_CHAR,sizeof(l_temp_path));
	memset(l_tar_path,APL_NULL_CHAR,sizeof(l_tar_path));
	memset(l_mode_path,APL_NULL_CHAR,sizeof(l_mode_path));
	memset(l_zip_path,APL_NULL_CHAR,sizeof(l_zip_path));
	memset(l_remove_path,APL_NULL_CHAR,sizeof(l_remove_path));
	memset(l_move_path,APL_NULL_CHAR,sizeof(l_move_path));
	memset(l_common_path,APL_NULL_CHAR,sizeof(l_common_path));
	
	
	char **chr_fldval_list				= NULL;
	char **chr_fldval_list_web_cln_qry				= NULL;
	char **chr_field_val				= NULL;
	char l_chr_paramsep[3]				= APL_NULL_STRING;
	int l_int_no_fldvalelm 				= 0;
	int l_int_no_fldvalelm_web_cln_qry 				= 0;
	int l_int_no_field    				= 0;
	int	l_int_cnt 						= 0;
	int	int_no   						= 0;
	char *l_chr_ptr_param				= NULL;
	int int_count						= 0;

	char l_parameter1[50]				=	APL_NULL_STRING;
	char l_parameter2[50]				=	APL_NULL_STRING;
	char l_parameter3[50]				=	APL_NULL_STRING;
	char l_parameter4[50]				=	APL_NULL_STRING;
	char l_parameter5[50]				=	APL_NULL_STRING;
	char l_parameter6[50]				=	APL_NULL_STRING;

	char l_default_parameter[2000]		=	APL_NULL_STRING;
	char l_report_type[10]				=	APL_NULL_STRING;

	EXEC SQL BEGIN DECLARE SECTION;
	
	EXEC SQL VAR l_chr_client IS STRING;
	EXEC SQL VAR l_start_date IS STRING;
	EXEC SQL VAR l_client_flag IS STRING;
	EXEC SQL VAR l_default_param IS STRING;
	EXEC SQL VAR l_default_query IS STRING;
	EXEC SQL VAR l_default_query1 IS STRING;
	EXEC SQL VAR l_default_query2 IS STRING;
	EXEC SQL VAR l_all_web_cln_qry IS STRING;
	EXEC SQL VAR l_all_web_cln_qry_replace IS STRING;
	EXEC SQL VAR l_all_web_cln_list IS STRING;
	EXEC SQL VAR l_all_web_cln_list_sep IS STRING;
	EXEC SQL VAR l_time_stamp IS STRING;

	EXEC SQL VAR l_parameter1 IS STRING;
	EXEC SQL VAR l_parameter2 IS STRING;
	EXEC SQL VAR l_parameter3 IS STRING;
	EXEC SQL VAR l_parameter4 IS STRING;
	EXEC SQL VAR l_parameter5 IS STRING;
	EXEC SQL VAR l_parameter6 IS STRING;
	EXEC SQL VAR l_web_login_id IS STRING;
	EXEC SQL VAR l_web_rpt_id IS STRING;
	EXEC SQL VAR l_web_source_from IS STRING;
	EXEC SQL VAR l_web_report_dt IS STRING;
	EXEC SQL VAR l_web_proc_id IS STRING;
	

	EXEC SQL END DECLARE SECTION;
	
	strcpy(l_chr_rep_id,p_chr_repid);
	strcpy(l_chr_rep_name,p_chr_repname);
	strcpy(l_chr_rep_format,p_chr_repformat);
	strcpy(l_compress_flag,p_compress_flag);
	strcpy(l_default_param,p_default_param);
	strcpy(l_web_login_id,p_web_login_id);
	strcpy(l_web_rpt_id,p_web_rpt_id);
	strcpy(l_web_source_from,p_web_source_from);
	strcpy(l_web_report_dt,p_web_report_dt);
	strcpy(l_web_proc_id,p_web_proc_id);
	strcpy(l_chr_run_paramstr,p_chr_runparamstr);
	strcpy(l_start_date,p_start_date);
	strcpy(l_user,p_user);
	
	sprintf(l_chr_paramsep,"%c",PARAMSEP);

	INTL_REPT_STRUCT_H   l_intl_rept_struct_ha;
	memset(&l_intl_rept_struct_ha,APL_NULL_CHAR,sizeof(INTL_REPT_STRUCT_H));

	l_chr_ptr_param=strstr(l_chr_run_paramstr,l_chr_paramsep);
	
	printf("l_chr_ptr_param :|%s|\n",l_chr_ptr_param);
	//printf("strlen(l_chr_ptr_param) :|%d|\n",strlen(l_chr_ptr_param));Changes done for AIX Migration
	printf("strlen(l_chr_ptr_param) :|%d|\n",(int)strlen(l_chr_ptr_param));
     
	fprintf(fl_userlog,"l_chr_ptr_param is |%s|\n",l_chr_ptr_param);
	//fprintf(fl_userlog,"strlen(l_chr_ptr_param) is |%d|\n",strlen(l_chr_ptr_param));Changes done for AIX Migration
	fprintf(fl_userlog,"strlen(l_chr_ptr_param) is |%d|\n",(int)strlen(l_chr_ptr_param));
    
	strcpy(l_default_parameter,l_chr_ptr_param);
	 
	fprintf(fl_userlog,"l_chr_run_paramstr:|%s|\n",l_chr_run_paramstr);
	
	if(CO_SplitStr(l_chr_run_paramstr,FIELDVALSEP,&l_int_no_fldvalelm,&chr_fldval_list) == APL_FAILURE)
	{
		 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_chr_run_paramstr);
		 APL_GOBACK_FAIL
	}

	//changes to handle all client scenario from web custody starts
	printf("l_int_no_fldvalelm:%d",l_int_no_fldvalelm);
	
	if((strlen(l_web_source_from) > 0) && !(strcmp(l_web_source_from,"W")))
	{
		if (strstr(l_chr_run_paramstr, "ALL_WEB_CLIENTS@") != NULL )
		{
			if(CO_SplitStr(l_chr_run_paramstr,'@',&l_int_no_fldvalelm_web_cln_qry,&chr_fldval_list_web_cln_qry) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_chr_run_paramstr);
				APL_GOBACK_FAIL
			}

			printf("\v chr_fldval_list_web_cln_qry:%s",chr_fldval_list_web_cln_qry[1]);
		
		
			strcpy(l_all_web_cln_qry_replace,chr_fldval_list_web_cln_qry[1]);
		
			strcpy((char *)chr_l_h_select_stmt_replace.arr, APL_NULL_STRING);
			strcat((char *)chr_l_h_select_stmt_replace.arr,"SELECT REPLACE(REPLACE('");
			strcat((char *)chr_l_h_select_stmt_replace.arr,l_all_web_cln_qry_replace);
			strcat((char *)chr_l_h_select_stmt_replace.arr,"','-',' '),");
			sprintf((char *)chr_l_h_select_stmt_replace.arr,"%s'\%c',',') from dual",(char *)chr_l_h_select_stmt_replace.arr,FIELDVALSEP);
			
			chr_l_h_select_stmt_replace.len = strlen((char *)chr_l_h_select_stmt_replace.arr);
			chr_l_h_select_stmt_replace.arr[chr_l_h_select_stmt_replace.len] = '\0';
			chr_l_h_select_stmt_replace.len++;
		
			printf("\nchr_l_h_select_stmt_replace: %s\n",chr_l_h_select_stmt_replace.arr);
						
			EXEC SQL PREPARE s FROM :chr_l_h_select_stmt_replace;
		
			IS_ANY_ORA_ERROR
	
		
			EXEC SQL DECLARE sel_data_replace_cur CURSOR FOR s;
		
			IS_ANY_ORA_ERROR
		
			EXEC SQL OPEN sel_data_replace_cur;
	
			IS_ANY_ORA_ERROR
		
			EXEC SQL FETCH sel_data_replace_cur INTO :l_all_web_cln_qry;

			IS_ANY_ORA_ERROR
		
			EXEC SQL CLOSE sel_data_replace_cur;
		
			strcpy((char *)chr_l_sql_stmt.arr, APL_NULL_STRING);
		
			sprintf((char *)chr_l_sql_stmt.arr,l_all_web_cln_qry);
		
			chr_l_sql_stmt.len = strlen((char *)chr_l_sql_stmt.arr);
			chr_l_sql_stmt.arr[chr_l_sql_stmt.len] = '\0';
			chr_l_sql_stmt.len++;
						
			EXEC SQL PREPARE s FROM :chr_l_sql_stmt;
		
			EXEC SQL DECLARE sel_data_cur CURSOR FOR s;
		
			IS_ANY_ORA_ERROR
		
			EXEC SQL OPEN sel_data_cur;

			IS_ANY_ORA_ERROR
		
			EXEC SQL FETCH sel_data_cur INTO :l_all_web_cln_list;

			IS_ANY_ORA_ERROR
		
			EXEC SQL CLOSE sel_data_cur;
		
			strcpy((char *)chr_l_h_select_stmt_replace.arr, APL_NULL_STRING);
			strcat((char *)chr_l_h_select_stmt_replace.arr,"SELECT REPLACE('");
			strcat((char *)chr_l_h_select_stmt_replace.arr,l_all_web_cln_list);
			strcat((char *)chr_l_h_select_stmt_replace.arr,"',',','");
			sprintf((char *)chr_l_h_select_stmt_replace.arr,"%s\%c",(char *)chr_l_h_select_stmt_replace.arr,FIELDVALSEP);
			strcat((char *)chr_l_h_select_stmt_replace.arr,"') from dual ");
			
			chr_l_h_select_stmt_replace.len = strlen((char *)chr_l_h_select_stmt_replace.arr);
			chr_l_h_select_stmt_replace.arr[chr_l_h_select_stmt_replace.len] = '\0';
			chr_l_h_select_stmt_replace.len++;
		
			printf("\nchr_l_h_select_stmt_replace: %s\n",chr_l_h_select_stmt_replace.arr);
						
			EXEC SQL PREPARE s FROM :chr_l_h_select_stmt_replace;
		
			IS_ANY_ORA_ERROR
	
		
			EXEC SQL DECLARE sel_data_replace_cur CURSOR FOR s;
		
			IS_ANY_ORA_ERROR
		
			EXEC SQL OPEN sel_data_replace_cur;

			IS_ANY_ORA_ERROR
		
			EXEC SQL FETCH sel_data_replace_cur INTO :l_all_web_cln_list_sep;

			IS_ANY_ORA_ERROR
		
			EXEC SQL CLOSE sel_data_replace_cur;
		
			printf("\nFIELDVALSEP:%c\n",FIELDVALSEP);
			sprintf(l_all_web_cln_list_sep,"%s\%c",l_all_web_cln_list_sep,FIELDVALSEP);
			strcpy(l_chr_run_paramstr,l_all_web_cln_list_sep);
	
			printf("\n l_chr_run_paramstr: %s\n",l_chr_run_paramstr);

			l_int_no_fldvalelm=0;
	if(CO_SplitStr(l_chr_run_paramstr,FIELDVALSEP,&l_int_no_fldvalelm,&chr_fldval_list) == APL_FAILURE)
	{
		 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_chr_run_paramstr);
		 APL_GOBACK_FAIL
	}
			printf("\nl_int_no_fldvalelm:|%d|\n",l_int_no_fldvalelm);
		}
	}
	//changes to handle all client scenario from web custody ends

	/************ For Dynamic Style Sheet Display *************************/

	fprintf(fl_userlog,"Before REPORT_SYSPARM ---- \n");
     
	EXEC SQL SELECT A.DEFAULT_SETTING,A.STYLE,A.STYLE_LT 
	         INTO :g_setting_flag,:g_style,:g_style_lt
		 FROM REPORT_SYSPARAM A, MT_COMMON_SYS_PARAMS B 
		 WHERE A.BANK_CODE=B.INSTALLED_AT_BANK;

        fprintf(fl_userlog,"After REPORT_SYSPARM Ora Error :|%d|\n",sqlca.sqlcode);
        
	fprintf(fl_userlog,"DEFAULT_SETTING :|%s|\n",g_setting_flag);

	/***********************************************************************/
	
	fprintf(fl_userlog,"DEFAULT_PARAM :|%s|\n",l_default_param);

	EXEC SQL SELECT CLIENT_FLAG,REPORT_TYPE 
	         INTO :l_client_flag,:l_report_type
		 FROM REPORT_MAIN WHERE REPORT_ID=:l_chr_rep_id;

	fprintf(fl_userlog,"After Getting CLIENT_FLAG/REPORT_TYPE -- ORA Error :|%d|\n",sqlca.sqlcode);
	printf("After Getting CLIENT_FLAG/REPORT_TYPE -- ORA Error :|%d|\n",sqlca.sqlcode);
	/****** Spliting Parameters for Default Query *****************************************/
	
	if(CO_SplitStr(l_default_parameter,PARAMSEP,&l_int_no_field,&chr_field_val) == APL_FAILURE)
	{
		 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_default_parameter);
		 APL_GOBACK_FAIL
	}

	for(int_count=0;int_count<l_int_no_field;int_count++)
	{
		if(int_count==1)
			strcpy(l_parameter1,chr_field_val[int_count]);
		else if(int_count==2)
			strcpy(l_parameter2,chr_field_val[int_count]);
		else if(int_count==3)
			strcpy(l_parameter3,chr_field_val[int_count]);
		else if(int_count==4)
			strcpy(l_parameter4,chr_field_val[int_count]);
		else if(int_count==5)
			strcpy(l_parameter5,chr_field_val[int_count]);
		else if(int_count==6)
			strcpy(l_parameter6,chr_field_val[int_count]);
	}

	/***************** Report Start Criteria Procedure Function *************************/
	
	fprintf(fl_userlog,"Entering CO_Rpt_StartProcedure Function For Report ID :|%s|\n",l_chr_rep_id);
    
	if(APL_FAILURE == CO_Rpt_StartProcedure(l_chr_rep_id,l_parameter1,l_parameter2,l_parameter3,
				l_parameter4,l_parameter5,l_parameter6,fl_userlog,l_debug_info_ptr))
	{
		fprintf(fl_userlog,"Error : Failure From CO_Rpt_StartProcedure Function For :|%s|\n",l_chr_rep_id);
		printf("Error : Failure From CO_Rpt_StartProcedure Function For :|%s|\n",l_chr_rep_id);
		APL_GOBACK_FAIL

	}

	/************************************************************************************/
	fprintf(fl_userlog,"l_default_param :|%s|\n",l_default_param);
	fprintf(fl_userlog,"l_parameter1 :|%s|\n",l_parameter1);
	fprintf(fl_userlog,"l_parameter2 :|%s|\n",l_parameter2);
	fprintf(fl_userlog,"l_parameter3 :|%s|\n",l_parameter3);
	fprintf(fl_userlog,"l_parameter4 :|%s|\n",l_parameter4);
	fprintf(fl_userlog,"l_parameter5 :|%s|\n",l_parameter5);
	fprintf(fl_userlog,"l_parameter6 :|%s|\n",l_parameter6);
     
	printf("l_default_query :|%s|\n",l_default_query);
   
	EXEC SQL SELECT REPLACE(DEFAULT_QUERY,'DEFAULT_PARAM',:l_default_param),
			REPLACE(DEFAULT_QUERY1,'DEFAULT_PARAM',:l_default_param) 
		INTO :l_default_query,:l_default_query1 FROM REPORT_MAIN WHERE REPORT_ID=:l_chr_rep_id;

	printf("After DEFAULT_PARAM Ora Error :|%d|\n",sqlca.sqlcode);
    
	EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(:l_default_query,
			'@PARAM1',:l_parameter1),
			'@PARAM2',:l_parameter2),
			'@PARAM3',:l_parameter3),
			'@PARAM4',:l_parameter4),
			'@PARAM5',:l_parameter5),
			'@PARAM6',:l_parameter6),
			REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(:l_default_query1,
			'@PARAM1',:l_parameter1),
			'@PARAM2',:l_parameter2),
			'@PARAM3',:l_parameter3),
			'@PARAM4',:l_parameter4),
			'@PARAM5',:l_parameter5),
			'@PARAM6',:l_parameter6)
		INTO :l_default_query,:l_default_query1 FROM DUAL;

	printf("After Default Query Ora Error :|%d|\n",sqlca.sqlcode);
 
   	/********* For Master Client Fetch : Vinay kalaskar ************************************/

	strcat(l_default_query,l_default_query1);

	strcpy(l_default_query2,"SELECT DISTINCT CLN_MASTER FROM MT_CLIENT ");
	strcat(l_default_query2,"WHERE CLN_CODE IN ( ");
	strcat(l_default_query2,l_default_query);
	strcat(l_default_query2," ) ");
	strcat(l_default_query2," UNION ");
	strcat(l_default_query2,l_default_query);
	
	/***************************************************************************************/
	
	//fprintf(fl_userlog,"DEFAULT_QUERY1 :|%s|\n",l_default_query2);
	fprintf(fl_userlog,"REPORT_TYPE 1:|%s|\n",l_report_type);
	fprintf(fl_userlog,"CLIENT_FLAG 1:|%s|\n",l_client_flag);
	if(!strcmp(l_report_type,"L"))
	{
		if(strlen(l_client_flag) > 0)
		{
			if(strcmp(l_chr_rep_format,"*.HTM"))
			{
				printf("Error : Letter Are Generated Only In HTML Format\n");
				fprintf(fl_userlog,"Error : Letter Are Generated Only In HTML Format\n");
                 
				strcpy(l_chr_rep_format,"*.HTM");
			}

			strcpy(l_chr_fieldval,l_chr_rep_name);
			
			fprintf(fl_userlog,"REPORT FORMAT :|%s|\n",l_chr_rep_format);
			
			fprintf(fl_userlog,"Entering CO_CreateReport_LETR1 for Report ID :|%s|\n",l_chr_rep_id);
				
			if(APL_FAILURE == CO_CreateReport_LETR1(l_chr_rep_id,
								l_chr_rep_format,
								l_chr_rep_name, 
								l_chr_fieldval,
								l_chr_ptr_param,
								l_start_date,
								l_compress_flag, 
								l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
								fl_userlog,
								l_debug_info_ptr))
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_CreateReport_LETR1", NULL, NULL);
				fprintf(fl_userlog,"Failure from CO_CreateReport_LETR1 :|%s|\n",l_chr_rep_id);
				APL_GOBACK_FAIL
			}

			fprintf(fl_userlog,"COMPRESS FLAG is 1:|%s|\n",l_compress_flag);
			
			if(strlen(l_compress_flag) > 0 && !strcmp(l_compress_flag,"Y"))
			{
				if(APL_FAILURE == CO_ReportFileScript(l_chr_rep_id,
								l_chr_fieldval,
								l_chr_rep_format, 
								l_compress_flag,
								l_int_no_fldvalelm, 
								l_start_date,
								l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
								fl_userlog,
								l_debug_info_ptr))
				{
					fprintf(fl_userlog,"Failure from CO_ReportFileScript Function\n");
					
					APL_GOBACK_FAIL
				}
			}
			
		}
		else
		{
			if(strcmp(l_chr_rep_format,"*.HTM"))
			{
				printf("Error : Letter Are Generated Only In HTML Format\n");
				fprintf(fl_userlog,"Error : Letter Are Generated Only In HTML Format\n");
                
				strcpy(l_chr_rep_format,"*.HTM");
			}

			fprintf(fl_userlog,"l_int_no_fldvalelm:|%d|\n",l_int_no_fldvalelm);
			 
			if(l_int_no_fldvalelm!=0)
			{
				for(l_int_cnt=0;l_int_cnt<l_int_no_fldvalelm;l_int_cnt++)
				{
					strcpy(l_chr_fieldval,chr_fldval_list[l_int_cnt]);
				
					fprintf(fl_userlog,"Entering CO_CreateReport_LETR2 :|%s|\n",l_chr_rep_id);
				    
					if(APL_FAILURE == CO_CreateReport_LETR2(l_chr_rep_id,
									l_chr_rep_format,
									l_chr_rep_name, 
									l_chr_fieldval,
									l_chr_ptr_param,
									l_start_date,
									l_compress_flag, 
									l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
									fl_userlog,
									l_debug_info_ptr))
					{
						CO_ProcMonitor(g_logfile, "Failure from CO_CreateReport_LETR2", NULL, NULL);
						fprintf(fl_userlog,"Failure from CO_CreateReport_LETR2 :|%s|\n",l_chr_rep_id);
						APL_GOBACK_FAIL
					}

					/******* Report Stop Criteria Procedure Function *******/
				
					fprintf(fl_userlog,"Entering CO_Rpt_StopProcedure :|%s|\n",l_chr_rep_id);
                   
					if(APL_FAILURE == CO_Rpt_StopProcedure(l_chr_rep_id,
									l_chr_fieldval,
									l_parameter1,
									l_parameter2, 
									l_parameter3,
									l_parameter4,
									l_parameter5,
									fl_userlog,
									l_debug_info_ptr))
					{
						fprintf(fl_userlog,"Error : Failure From CO_Rpt_StopProcedure :|%s|\n",l_chr_rep_id);
						
						APL_GOBACK_FAIL

					}

					/**************************************************/
				}

				fprintf(fl_userlog,"COMPRESS FLAG is 2:|%s|\n",l_compress_flag);
				
				if(strlen(l_compress_flag) > 0 && !strcmp(l_compress_flag,"Y"))
				{
					if(APL_FAILURE == CO_ReportFileScript(l_chr_rep_id,l_chr_fieldval,
									l_chr_rep_format, l_compress_flag,
									l_int_no_fldvalelm, l_start_date,
									l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,fl_userlog,l_debug_info_ptr))
					{
						fprintf(fl_userlog,"Failure from CO_ReportFileScript Function\n");
						
						APL_GOBACK_FAIL
					}
				}

			}
			else
			{
				if(strlen(l_default_query2) > 0)
				{
					EXEC SQL PREPARE LETR_DEFAULT FROM :l_default_query2;
					EXEC SQL DECLARE defaultletrcurr CURSOR FOR LETR_DEFAULT;
					EXEC SQL OPEN defaultletrcurr;
				
					for(;;)
					{
						EXEC SQL FETCH defaultletrcurr INTO :l_chr_client;
						
						fprintf(fl_userlog,"After Fetch defaultletrcurr:|%d|\n",sqlca.sqlcode);
						
						if(sqlca.sqlcode == 1403)
						break;

						if(sqlca.sqlcode < 0)
						{
							fprintf(fl_userlog,"Error : DEFAULT QUERY Critical Error Occured ORA ERROR:|%d|\n",sqlca.sqlcode);
							
							break;
						}

						strcpy(l_chr_fieldval,l_chr_client);
				
						fprintf(fl_userlog,"Entering CO_CreateReport_LETR2 :|%s|\n",l_chr_rep_id);
						
						if(APL_FAILURE == CO_CreateReport_LETR2(l_chr_rep_id,
										l_chr_rep_format,
										l_chr_rep_name, 
										l_chr_fieldval,
										l_chr_ptr_param,
										l_start_date,
										l_compress_flag,
										l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
										fl_userlog,
										l_debug_info_ptr))
						{
							CO_ProcMonitor(g_logfile, "Failure from CO_CreateReport_LETR2", NULL, NULL);
							fprintf(fl_userlog,"Failure from CO_CreateReport_LETR2 for Report ID:|%s|\n",l_chr_rep_id);
							
							APL_GOBACK_FAIL
						}
	
						/*** Report Stop Criteria Procedure Function ******/
					
						fprintf(fl_userlog,"Entering CO_Rpt_StopProcedure :|%s|\n",l_chr_rep_id);
					   
						if(APL_FAILURE == CO_Rpt_StopProcedure(l_chr_rep_id,
										l_chr_fieldval,
										l_parameter1,
										l_parameter2, 
										l_parameter3,
										l_parameter4,
										l_parameter5,
										fl_userlog,
										l_debug_info_ptr))
						{
							fprintf(fl_userlog,"Error : Failure From CO_Rpt_StopProcedure Function For :|%s|\n",l_chr_rep_id);
							
							APL_GOBACK_FAIL

						}

						/************************************************/

					}
					EXEC SQL CLOSE defaultletrcurr;
				}
				
				fprintf(fl_userlog,"COMPRESS FLAG is 3:|%s|\n",l_compress_flag);
				
				if(strlen(l_compress_flag) > 0 && !strcmp(l_compress_flag,"Y"))
				{
					if(APL_FAILURE == CO_ReportFileScript(l_chr_rep_id,
									l_chr_fieldval,
									l_chr_rep_format, 
									l_compress_flag,
									l_int_no_fldvalelm, 
									l_start_date,
									l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
									fl_userlog,
									l_debug_info_ptr))
					{
						fprintf(fl_userlog,"Failure from CO_ReportFileScript Function\n");
						
						APL_GOBACK_FAIL
					}
				}				
			}
		}
	}
	else
	{
		if(strlen(l_client_flag) > 0)
		{
			strcpy(l_chr_fieldval,l_chr_rep_name);
			
			fprintf(fl_userlog,"REPORT FORMAT :|%s|\n",l_chr_rep_format);
			
			if(!strcmp(l_chr_rep_format,"*.HTM"))
			{
				fprintf(fl_userlog,"Entering CO_CreateReport_HTML1 for Report ID :|%s|\n",l_chr_rep_id);
				
				if(APL_FAILURE == CO_CreateReport_HTML1(l_chr_rep_id,
									l_chr_rep_format,
									l_chr_rep_name, 
									l_chr_fieldval,
									l_chr_ptr_param,
									l_start_date,
									l_compress_flag, 
									l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
									fl_userlog,
									l_debug_info_ptr))
				{
					CO_ProcMonitor(g_logfile, "Failure from CO_CreateReport_HTML1", NULL, NULL);
					fprintf(fl_userlog,"Failure from CO_CreateReport_HTML1 :|%s|\n",l_chr_rep_id);
					
					APL_GOBACK_FAIL
				}
					fprintf(fl_userlog,"COMPRESS FLAG is 4:|%s|\n",l_compress_flag);
					
					if(strlen(l_compress_flag) > 0 && !strcmp(l_compress_flag,"Y"))
					{
						if(APL_FAILURE == CO_ReportFileScript(l_chr_rep_id,
										l_chr_fieldval,
										l_chr_rep_format, 
										l_compress_flag,
										l_int_no_fldvalelm, 
										l_start_date,
										l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
										fl_userlog,
										l_debug_info_ptr))
						{
							fprintf(fl_userlog,"Failure from CO_ReportFileScript Function\n");
							
							APL_GOBACK_FAIL
						}
					}
					
			}
			else if(!strcmp(l_chr_rep_format,"*.CSV"))
			{
				fprintf(fl_userlog,"Entering CO_CreateReport_CSV1 for Report ID :|%s|\n",l_chr_rep_id);
				
				if(APL_FAILURE == CO_CreateReport_CSV1(l_chr_rep_id,
								l_chr_rep_format,
								l_chr_rep_name, 
								l_chr_fieldval,
								l_chr_ptr_param,
								l_start_date,
								l_compress_flag, 
								l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
								fl_userlog,
								l_debug_info_ptr))
				{
					CO_ProcMonitor(g_logfile, "Failure from CO_CreateReport_CSV1", NULL, NULL);
					fprintf(fl_userlog,"Failure from CO_CreateReport_CSV1 :|%s|\n",l_chr_rep_id);
					
					APL_GOBACK_FAIL
				}
					
					fprintf(fl_userlog,"COMPRESS FLAG is 5:|%s|\n",l_compress_flag);
					
					if(strlen(l_compress_flag) > 0 && !strcmp(l_compress_flag,"Y"))
					{

						/*Pasha Added for Amfi compress flag naming convention */


						if (strstr(l_chr_rep_name, "@PARAM@") != NULL ) 
						  {

							if(APL_FAILURE == CO_ReportFileScript_Format(
											l_chr_rep_format, 
											l_start_date,
											l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
											fl_userlog,
											l_debug_info_ptr))
							{
							fprintf(fl_userlog,"Failure from CO_ReportFileScript Function\n");
							
							APL_GOBACK_FAIL
							}
						}
						else
						{
					  /* End of Change */	
						
						if(APL_FAILURE == CO_ReportFileScript(l_chr_rep_id,
										l_chr_fieldval,
										l_chr_rep_format, 
										l_compress_flag,
										l_int_no_fldvalelm, 
										l_start_date,
										l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
										fl_userlog,
										l_debug_info_ptr))
							{
							fprintf(fl_userlog,"Failure from CO_ReportFileScript Function\n");
							
							APL_GOBACK_FAIL
							}
						
						
						}
							



					}
					
			}
			else
			{
				fprintf(fl_userlog,"Entering CO_CreateReport_XLS1 for Report ID :|%s|\n",l_chr_rep_id);
				
				if(APL_FAILURE == CO_CreateReport_XLS1(l_chr_rep_id,
								l_chr_rep_format,
								l_chr_rep_name, 
								l_chr_fieldval,
								l_chr_ptr_param,
								l_start_date,
								l_compress_flag,
								l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
								fl_userlog,
								l_debug_info_ptr))
				{
					CO_ProcMonitor(g_logfile, "Failure from CO_CreateReport_XLS1", NULL, NULL);
					fprintf(fl_userlog,"Failure from CO_CreateReport_XLS1 :|%s|\n",l_chr_rep_id);
					
					APL_GOBACK_FAIL
				}
					
					fprintf(fl_userlog,"COMPRESS FLAG is 6:|%s|\n",l_compress_flag);
					
					if(strlen(l_compress_flag) > 0 && !strcmp(l_compress_flag,"Y"))
					{

						/*Pasha Added for Amfi compress flag naming convention */


						if ( strstr(l_chr_rep_name, "@PARAM@") != NULL ) 
						  {

							if(APL_FAILURE == CO_ReportFileScript_Format(
											l_chr_rep_format, 
											l_start_date,
											l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
											fl_userlog,
											l_debug_info_ptr))
							{
							fprintf(fl_userlog,"Failure from CO_ReportFileScript Function\n");
							
							APL_GOBACK_FAIL
							}
						}
						else
						{
				/* End of Change */		
						
						if(APL_FAILURE == CO_ReportFileScript(l_chr_rep_id,
										l_chr_fieldval,
										l_chr_rep_format, 
										l_compress_flag,
										l_int_no_fldvalelm, 
										l_start_date,
										l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
										fl_userlog,
										l_debug_info_ptr))
							{
							fprintf(fl_userlog,"Failure from CO_ReportFileScript Function\n");
							
							APL_GOBACK_FAIL
							}
						}
					}
					
			}
		
			/******* Report Stop Criteria Procedure Function ******************/
		
			fprintf(fl_userlog,"Entering CO_Rpt_StopProcedure Function For Report ID :|%s|\n",l_chr_rep_id);
             
			if(APL_FAILURE == CO_Rpt_StopProcedure(l_chr_rep_id,l_parameter1,
						       l_parameter2,l_parameter3,
						       l_parameter4,l_parameter5,
						       l_parameter6,fl_userlog,
						       l_debug_info_ptr))
			{
				fprintf(fl_userlog,"Error : Failure From CO_Rpt_StopProcedure Function :|%s|\n",l_chr_rep_id);
				
				APL_GOBACK_FAIL

			}
			
			/****************************************************************/
					
		}
		else
		{	
			fprintf(fl_userlog,"REPORT FORMAT :|%s|\n",l_chr_rep_format);
			
			if(!strcmp(l_chr_rep_format,"*.HTM"))
			{
				fprintf(fl_userlog,"l_int_no_fldvalelm:|%d|\n",l_int_no_fldvalelm);
				
				if(l_int_no_fldvalelm!=0)
				{
					for(l_int_cnt=0;l_int_cnt<l_int_no_fldvalelm;l_int_cnt++)
					{

						strcpy(l_chr_fieldval,chr_fldval_list[l_int_cnt]);
					
						fprintf(fl_userlog,"Entering CO_CreateReport_HTML2 :|%s|\n",l_chr_rep_id);
					     
						if(APL_FAILURE == CO_CreateReport_HTML2(l_chr_rep_id,
										l_chr_rep_format,
										l_chr_rep_name, 
										l_chr_fieldval,
										l_chr_ptr_param,
										l_start_date,
										l_compress_flag, 
										l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
										fl_userlog,
										l_debug_info_ptr))
						{
							CO_ProcMonitor(g_logfile, "Failure from CO_CreateReport_HTML2", NULL, NULL);
							fprintf(fl_userlog,"Failure from CO_CreateReport_HTML2 :|%s|\n",l_chr_rep_id);
							APL_GOBACK_FAIL
						}

						/******* Report Stop Criteria Procedure Function *******/
					
						fprintf(fl_userlog,"Entering CO_Rpt_StopProcedure :|%s|\n",l_chr_rep_id);
                         
						if(APL_FAILURE == CO_Rpt_StopProcedure(l_chr_rep_id,
										l_chr_fieldval,
										l_parameter1,
										l_parameter2, 
										l_parameter3,
										l_parameter4,
										l_parameter5,
										fl_userlog,
										l_debug_info_ptr))
						{
							fprintf(fl_userlog,"Error : Failure From CO_Rpt_StopProcedure :|%s|\n",l_chr_rep_id);
							
							APL_GOBACK_FAIL

						}

						/**************************************************/
					}

					fprintf(fl_userlog,"COMPRESS FLAG is 7:|%s|\n",l_compress_flag);
					
					if(strlen(l_compress_flag) > 0 && !strcmp(l_compress_flag,"Y"))
					{
						if(APL_FAILURE == CO_ReportFileScript(l_chr_rep_id,l_chr_fieldval,
										l_chr_rep_format, l_compress_flag,
										l_int_no_fldvalelm, l_start_date,
										l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,fl_userlog,l_debug_info_ptr))
						{
							fprintf(fl_userlog,"Failure from CO_ReportFileScript Function\n");
							
							APL_GOBACK_FAIL
						}
					}

				}
				else
				{
					if(strlen(l_default_query2) > 0)
					{
						EXEC SQL PREPARE HTML_DEFAULT FROM :l_default_query2;
						EXEC SQL DECLARE defaulthtmlcurr CURSOR FOR HTML_DEFAULT;
						EXEC SQL OPEN defaulthtmlcurr;
					
						for(;;)
						{
							EXEC SQL FETCH defaulthtmlcurr INTO :l_chr_client;
							
							fprintf(fl_userlog,"After Fetch defaulthtmlcurr:|%d|\n",sqlca.sqlcode);
							
							if(sqlca.sqlcode == 1403)
							break;

							if(sqlca.sqlcode < 0)
							{
								fprintf(fl_userlog,"Error : DEFAULT QUERY Critical Error Occured ORA ERROR:|%d|\n",sqlca.sqlcode);
								
								break;
							}

							strcpy(l_chr_fieldval,l_chr_client);
					
							fprintf(fl_userlog,"Entering CO_CreateReport_HTML2 :|%s|\n",l_chr_rep_id);
							
							
							if(APL_FAILURE == CO_CreateReport_HTML2(l_chr_rep_id,
											l_chr_rep_format,
											l_chr_rep_name, 
											l_chr_fieldval,
											l_chr_ptr_param,
											l_start_date,
											l_compress_flag,
											l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
											fl_userlog,
											l_debug_info_ptr))
							{
								CO_ProcMonitor(g_logfile, "Failure from CO_CreateReport_HTML2", NULL, NULL);
								fprintf(fl_userlog,"Failure from CO_CreateReport_HTML2 for Report ID:|%s|\n",l_chr_rep_id);
								
								APL_GOBACK_FAIL
							}
		
							/*** Report Stop Criteria Procedure Function ******/
						
							fprintf(fl_userlog,"Entering CO_Rpt_StopProcedure :|%s|\n",l_chr_rep_id);
						 
							if(APL_FAILURE == CO_Rpt_StopProcedure(l_chr_rep_id,
											l_chr_fieldval,
											l_parameter1,
											l_parameter2, 
											l_parameter3,
											l_parameter4,
											l_parameter5,
											fl_userlog,
											l_debug_info_ptr))
							{
								fprintf(fl_userlog,"Error : Failure From CO_Rpt_StopProcedure Function For :|%s|\n",l_chr_rep_id);
								
								APL_GOBACK_FAIL

							}

							/************************************************/

						}
						EXEC SQL CLOSE defaulthtmlcurr;
					}
					
					fprintf(fl_userlog,"COMPRESS FLAG is 8:|%s|\n",l_compress_flag);
					
					if(strlen(l_compress_flag) > 0 && !strcmp(l_compress_flag,"Y"))
					{
						if(APL_FAILURE == CO_ReportFileScript(l_chr_rep_id,
										l_chr_fieldval,
										l_chr_rep_format, 
										l_compress_flag,
										l_int_no_fldvalelm, 
										l_start_date,
										l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
										fl_userlog,
										l_debug_info_ptr))
						{
							fprintf(fl_userlog,"Failure from CO_ReportFileScript Function\n");
							
							APL_GOBACK_FAIL
						}
					}
					
				}

			}
			else if(!strcmp(l_chr_rep_format,"*.CSV"))
			{
				fprintf(fl_userlog,"l_int_no_fldvalelm:|%d|\n",l_int_no_fldvalelm);
				
				
				if(l_int_no_fldvalelm!=0)
				{
					for(l_int_cnt=0;l_int_cnt<l_int_no_fldvalelm;l_int_cnt++)
					{

						strcpy(l_chr_fieldval,chr_fldval_list[l_int_cnt]);
					
						fprintf(fl_userlog,"Entering CO_CreateReport_CSV2 :|%s|\n",l_chr_rep_id);
					 
						if(APL_FAILURE == CO_CreateReport_CSV2(l_chr_rep_id,
										l_chr_rep_format,
										l_chr_rep_name, 
										l_chr_fieldval,
										l_chr_ptr_param,
										l_start_date,
										l_compress_flag, 
										l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
										fl_userlog,
										l_debug_info_ptr))
						{
							CO_ProcMonitor(g_logfile, "Failure from CO_CreateReport_CSV2", NULL, NULL);
							fprintf(fl_userlog,"Failure from CO_CreateReport_CSV2 :|%s|\n",l_chr_rep_id);
							
							APL_GOBACK_FAIL
						}

						/***** Report Stop Criteria Procedure Function **********/
					
						fprintf(fl_userlog,"Entering CO_Rpt_StopProcedure  :|%s|\n",l_chr_rep_id);
                         
						if(APL_FAILURE == CO_Rpt_StopProcedure(l_chr_rep_id,l_chr_fieldval,
										l_parameter1,l_parameter2,
										l_parameter3,l_parameter4,
										l_parameter5,fl_userlog,l_debug_info_ptr))
						{
							fprintf(fl_userlog,"Error : Failure From CO_Rpt_StopProcedure :|%s|\n",l_chr_rep_id);
							
							APL_GOBACK_FAIL

						}

						/***************************************************/
					
					}
					
					fprintf(fl_userlog,"COMPRESS FLAG is 9:|%s|\n",l_compress_flag);
					
					if(strlen(l_compress_flag) > 0 && !strcmp(l_compress_flag,"Y"))
					{

				/*Pasha Added for Amfi compress flag naming convention */


						if ( strstr(l_chr_rep_name, "@PARAM@") != NULL ) 
						  {
						if(APL_FAILURE == CO_ReportFileScript_Format(
											l_chr_rep_format, 
											l_start_date,
											l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
											fl_userlog,
											l_debug_info_ptr))
						{
							fprintf(fl_userlog,"Failure from CO_ReportFileScript Function\n");
							
							APL_GOBACK_FAIL
						}
						}
						else
						{
                       /* End of Change */

							if(APL_FAILURE == CO_ReportFileScript(l_chr_rep_id,
										l_chr_fieldval,
										l_chr_rep_format, 
										l_compress_flag,
										l_int_no_fldvalelm, 
										l_start_date,
										l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
										fl_userlog,
										l_debug_info_ptr))
						{
							fprintf(fl_userlog,"Failure from CO_ReportFileScript Function\n");
							
							APL_GOBACK_FAIL
						}
						}
					}
				   
				}
				else
				{
					if(strlen(l_default_query2) > 0)
					{
						EXEC SQL PREPARE CSV_DEFAULT FROM :l_default_query2;
						EXEC SQL DECLARE defaultcsvcurr CURSOR FOR CSV_DEFAULT;
						EXEC SQL OPEN defaultcsvcurr;

						for(;;)
						{
							EXEC SQL FETCH defaultcsvcurr INTO :l_chr_client;
							
							fprintf(fl_userlog,"After Fetch defaultcsvcurr :|%d|\n",sqlca.sqlcode);
                             
							if(sqlca.sqlcode == 1403)
							break;

							if(sqlca.sqlcode < 0)
							{
								fprintf(fl_userlog,"Error: DEFAULT QUERY Critical Error Occured ORA ERROR:|%d|\n",sqlca.sqlcode);
								
								break;
							}

							strcpy(l_chr_fieldval,l_chr_client);
					
							fprintf(fl_userlog,"Entering CO_CreateReport_CSV2 :|%s|\n",l_chr_rep_id);
							
							if(APL_FAILURE == CO_CreateReport_CSV2(l_chr_rep_id,
											l_chr_rep_format,
											l_chr_rep_name, 
											l_chr_fieldval,
											l_chr_ptr_param,
											l_start_date,
											l_compress_flag, 
											l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
											fl_userlog,
											l_debug_info_ptr))
							{
								CO_ProcMonitor(g_logfile, "Failure from CO_CreateReport_CSV2", NULL, NULL);
								fprintf(fl_userlog,"Failure from CO_CreateReport_CSV2 for Report ID:|%s|\n",l_chr_rep_id);
								
								APL_GOBACK_FAIL
							}

							/**** Report Stop Criteria Procedure Function ******/
						
							fprintf(fl_userlog,"Entering CO_Rpt_StopProcedure :|%s|\n",l_chr_rep_id);
							
							if(APL_FAILURE == CO_Rpt_StopProcedure(l_chr_rep_id,
											l_chr_fieldval,
											l_parameter1,
											l_parameter2,
											l_parameter3,
											l_parameter4,
											l_parameter5,
											fl_userlog,
											l_debug_info_ptr))
							{
								fprintf(fl_userlog,"Error : Failure From CO_Rpt_StopProcedure Function For :|%s|\n",l_chr_rep_id);
								
								APL_GOBACK_FAIL

							}

							/**********************************************/

						}
						EXEC SQL CLOSE defaultcsvcurr;
					}
					
					fprintf(fl_userlog,"COMPRESS FLAG is 10:|%s|\n",l_compress_flag);
					
					if(strlen(l_compress_flag) > 0 && !strcmp(l_compress_flag,"Y"))
					{

				/*Pasha Added for Amfi compress flag naming convention */

						if ( strstr(l_chr_rep_name, "@PARAM@") != NULL ) 
						  {
						if(APL_FAILURE == CO_ReportFileScript_Format(
											l_chr_rep_format, 
											l_start_date,
											l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
											fl_userlog,
											l_debug_info_ptr))
						{
							fprintf(fl_userlog,"Failure from CO_ReportFileScript Function\n");
							
							APL_GOBACK_FAIL
						}
						}
						else
						{

				/* End of Change */

							if(APL_FAILURE == CO_ReportFileScript(l_chr_rep_id,
										l_chr_fieldval,
										l_chr_rep_format, 
										l_compress_flag,
										l_int_no_fldvalelm, 
										l_start_date,
										l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
										fl_userlog,
										l_debug_info_ptr))
						{
							fprintf(fl_userlog,"Failure from CO_ReportFileScript Function\n");
							
							APL_GOBACK_FAIL
						}
						}
					}
				
				}	
			}
			else
			{
				fprintf(fl_userlog,"l_int_no_fldvalelm:|%d|\n",l_int_no_fldvalelm);
				
				if(l_int_no_fldvalelm!=0)
				{
					for(l_int_cnt=0;l_int_cnt<l_int_no_fldvalelm;l_int_cnt++)
					{

						strcpy(l_chr_fieldval,chr_fldval_list[l_int_cnt]);
					
						fprintf(fl_userlog,"Entering CO_CreateReport_XLS2 :|%s|\n",l_chr_rep_id);
						
						fprintf(fl_userlog,"Inside loop \n");
                        
						if(APL_FAILURE == CO_CreateReport_XLS2(l_chr_rep_id,
										l_chr_rep_format,
										l_chr_rep_name, 
										l_chr_fieldval,
										l_chr_ptr_param,
										l_start_date,
										l_compress_flag, 
										l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
										fl_userlog,
										l_debug_info_ptr))
						{
							CO_ProcMonitor(g_logfile, "Failure from CO_CreateReport_XLS2", NULL, NULL);
							fprintf(fl_userlog,"Failure from CO_CreateReport_XLS2 for Report ID:|%s|\n",l_chr_rep_id);
							
							APL_GOBACK_FAIL
						}

						/*****Report Stop Criteria Procedure Function **********/
					
						fprintf(fl_userlog,"Entering CO_Rpt_StopProcedure  :|%s|\n",l_chr_rep_id);
						

						if(APL_FAILURE == CO_Rpt_StopProcedure(l_chr_rep_id,l_chr_fieldval,
										l_parameter1,l_parameter2,
										l_parameter3,l_parameter4,
										l_parameter5,fl_userlog,
										l_debug_info_ptr))
						{
							fprintf(fl_userlog,"Error : Failure From CO_Rpt_StopProcedure :|%s|\n",l_chr_rep_id);
							
							APL_GOBACK_FAIL

						}

						/**************************************************/
					
					}
				   
					fprintf(fl_userlog,"COMPRESS FLAG is :|%s|\n",l_compress_flag);
					
					if(strlen(l_compress_flag) > 0 && !strcmp(l_compress_flag,"Y"))
					{

			/*Pasha Added for Amfi compress flag naming convention */

						if ( strstr(l_chr_rep_name, "@PARAM@") != NULL ) 
						  {
						if(APL_FAILURE == CO_ReportFileScript_Format(
											l_chr_rep_format, 
											l_start_date,
											l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
											fl_userlog,
											l_debug_info_ptr))
						{
							fprintf(fl_userlog,"Failure from CO_ReportFileScript Function\n");
							APL_GOBACK_FAIL
						}
						}
						else
						{

			/* End of Change */

							if(APL_FAILURE == CO_ReportFileScript(l_chr_rep_id,
										l_chr_fieldval,
										l_chr_rep_format, 
										l_compress_flag,
										l_int_no_fldvalelm, 
										l_start_date,
										l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
										fl_userlog,
										l_debug_info_ptr))
						{
							fprintf(fl_userlog,"Failure from CO_ReportFileScript Function\n");
							
							APL_GOBACK_FAIL
						}
						}
					}
					
				}
				else
				{
					if(strlen(l_default_query2) > 0)
					{
						EXEC SQL PREPARE XLS_DEFAULT FROM :l_default_query2;
						EXEC SQL DECLARE defaultxlscurr CURSOR FOR XLS_DEFAULT;
						EXEC SQL OPEN defaultxlscurr;
					
						for(;;)
						{
							EXEC SQL FETCH defaultxlscurr INTO :l_chr_client;
							
							fprintf(fl_userlog,"After Fetch defaultxlscurr :|%d|\n",sqlca.sqlcode);
                             
							if(sqlca.sqlcode == 1403)
							break;

							if(sqlca.sqlcode < 0)
							{
								fprintf(fl_userlog,"Error :DEFAULT QUERY Critical Error Occured ORA ERROR:|%d|\n",sqlca.sqlcode);
								
								break;
							}

							strcpy(l_chr_fieldval,l_chr_client);
					
							fprintf(fl_userlog,"Entering CO_CreateReport_XLS2 :|%s|\n",l_chr_rep_id);
							

							if(APL_FAILURE == CO_CreateReport_XLS2(l_chr_rep_id,
											l_chr_rep_format,
											l_chr_rep_name, 
											l_chr_fieldval,
											l_chr_ptr_param,
											l_start_date,
											l_compress_flag,
											l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
											fl_userlog,
											l_debug_info_ptr))
							{
								CO_ProcMonitor(g_logfile, "Failure from CO_CreateReport_XLS2", NULL, NULL);
								fprintf(fl_userlog,"Failure from CO_CreateReport_XLS2 for Report ID:|%s|\n",l_chr_rep_id);
								
								APL_GOBACK_FAIL
							}

							/***** Report Stop Criteria Procedure Function *******/
						
							fprintf(fl_userlog,"Entering CO_Rpt_StopProcedure :|%s|\n",l_chr_rep_id);
							

							if(APL_FAILURE == CO_Rpt_StopProcedure(l_chr_rep_id,
											l_chr_fieldval,
											l_parameter1,
											l_parameter2, 
											l_parameter3,
											l_parameter4,
											l_parameter5,
											fl_userlog,
											l_debug_info_ptr))
							{
								fprintf(fl_userlog,"Error : Failure From CO_Rpt_StopProcedure Function For :|%s|\n",l_chr_rep_id);
								
								APL_GOBACK_FAIL

							}

							/**********************************************/

						}
						EXEC SQL CLOSE defaultxlscurr;

					}

					fprintf(fl_userlog,"COMPRESS FLAG is 12:|%s|\n",l_compress_flag);
					
					if(strlen(l_compress_flag) > 0 && !strcmp(l_compress_flag,"Y"))
					{

				/*Pasha Added for Amfi compress flag naming convention */

						if (strstr(l_chr_rep_name, "@PARAM@") != NULL ) 
						  {
						if(APL_FAILURE == CO_ReportFileScript_Format(
											l_chr_rep_format, 
											l_start_date,
											l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
											fl_userlog,
											l_debug_info_ptr))
						{
							fprintf(fl_userlog,"Failure from CO_ReportFileScript Function\n");
							
							APL_GOBACK_FAIL
						}
						}
						else
						{

				/* End of Change */

							if(APL_FAILURE == CO_ReportFileScript(l_chr_rep_id,
										l_chr_fieldval,
										l_chr_rep_format, 
										l_compress_flag,
										l_int_no_fldvalelm, 
										l_start_date,
										l_user,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,
										fl_userlog,
										l_debug_info_ptr))
						{
							fprintf(fl_userlog,"Failure from CO_ReportFileScript Function\n");
							
							APL_GOBACK_FAIL
						}
						}
					}					
				}	
				fprintf(fl_userlog,"Intellect_1\n");
			}					
		}	
	}

	if((strlen(l_web_source_from) > 0) && !(strcmp(l_web_source_from,"W")))
	{	
		EXEC SQL CALL SP_MARK_WEB_PROCESS_COMPLETED('REPORT',:l_web_report_dt,:l_web_login_id,:l_web_proc_id);
	
		if(sqlca.sqlcode < 0)
		{
			printf("Error : Failed From Stored Procedure SP_MARK_WEB_PROCESS_COMPLETED ERR DESC :|%d|\n",sqlca.sqlcode);
			fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_MARK_WEB_PROCESS_COMPLETED ERR DESC :|%d|\n",sqlca.sqlcode);
		}
	}
	
	APL_GOBACK_SUCCESS
	

	RETURN_SUCCESS:
	{
		//fclose(l_init_file);
		CO_ProcMonitor(g_logfile,"Success from DynamicReportFn",NULL,NULL);
		fprintf(fl_userlog,"Success From DynamicReportFn Function\n");
		return(APL_SUCCESS);
	}


	RETURN_FAILURE:
	{
		//fclose(l_init_file);
		CO_ProcMonitor(g_logfile,"Failed from D`ynamicReportFn",l_debug_info_ptr,NULL);
		fprintf(fl_userlog,"Failure From DynamicReportFn Function\n");
		return(APL_FAILURE);
	}
}


int CO_CreateReport_HTML1(char *p_rept_id,char *p_rep_type,char *p_rep_name,
		      	char *p_param_str,char *p_chr_ptr_param,char *p_start_date,
			char *p_compress_flag,char *p_user,char *p_web_login_id,char *p_web_rpt_id,char *p_web_source_from,char *p_web_report_dt,char *p_web_proc_id,FILE *fl_userlog,
			DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	printf("Entered Inside CO_CreateReport_HTML1 Function \n");

	FILE	*l_init_file  		= (FILE *)NULL;
	FILE	*l_report_HTML1 	= (FILE *)NULL;
	char l_init_path[200]	= APL_NULL_STRING;
	char l_report_path[300] = APL_NULL_STRING;
	char l_report_name[300] = APL_NULL_STRING;
	char l_compress_flag[5]	= APL_NULL_STRING;
	char l_time_stamp[30]	= APL_NULL_STRING;
	
	memset(l_init_path,APL_NULL_CHAR,200);	
	memset(l_report_path,APL_NULL_CHAR,200);	
	memset(l_report_name,APL_NULL_CHAR,200);	

	REPORT_MAIN_STRUCT_H  h_report_main_struct;
	REPORT_MAIN_STRUCT_I  i_report_main_struct;
	
	REPORT_DETAILS_STRUCT_H h_report_details_struct;
	REPORT_DETAILS_STRUCT_I i_report_details_struct;

	INTL_REPT_STRUCT_H   l_intl_rept_struct_ha;
	memset(&l_intl_rept_struct_ha,APL_NULL_CHAR,sizeof(INTL_REPT_STRUCT_H));
	

	memset(&h_report_main_struct,APL_NULL_CHAR,sizeof(REPORT_MAIN_STRUCT_H));	
	memset(&i_report_main_struct,APL_NULL_CHAR,sizeof(REPORT_MAIN_STRUCT_I));

	memset(&h_report_details_struct,APL_NULL_CHAR,sizeof(REPORT_DETAILS_STRUCT_H));
	memset(&i_report_details_struct,APL_NULL_CHAR,sizeof(REPORT_DETAILS_STRUCT_I));

		
	char l_rept_id[11]		   	   = APL_NULL_STRING;
	char l_rep_type[10]	   	   = APL_NULL_STRING;
	char l_client[20]  			   = APL_NULL_STRING;
	char l_sub_client[20]  		   = APL_NULL_STRING;
	char l_rep_name[100]    	   = APL_NULL_STRING;
	char l_param_str[4000]  	   = APL_NULL_STRING;
	char l_chr_param[4000]  	   = APL_NULL_STRING;
	char l_start_date[20]   	   = APL_NULL_STRING;
	char l_user[20]  				   = APL_NULL_STRING;
	char l_client_name[100] 	   = APL_NULL_STRING;
	char l_gen_query[4001]  	   = APL_NULL_STRING;

    //changes for report generation through api start
	char l_web_login_id[101]				= APL_NULL_STRING;
	char l_web_rpt_id[101]				= APL_NULL_STRING;
	char l_web_source_from[101]				= APL_NULL_STRING;
	char l_web_report_dt[101]				= APL_NULL_STRING;
	char l_web_proc_id[101]				= APL_NULL_STRING;
	//changes for report generation through api end

	char l_more_qry_flag[3]     = APL_NULL_STRING;
	char table_query[24001] 	= APL_NULL_STRING;
	char l_table_query[4001] 	= APL_NULL_STRING;
	char l_table_query1[4001] 	= APL_NULL_STRING;
	char l_table_query2[4001] 	= APL_NULL_STRING;
	char l_table_query3[4001] 	= APL_NULL_STRING;
	char l_table_query4[4001] 	= APL_NULL_STRING;
	char l_table_query5[4001] 	= APL_NULL_STRING;

	char l_criteria_query1[4001]  = APL_NULL_STRING;
	char l_criteria_query2[4001]  = APL_NULL_STRING;
	char l_criteria_query3[4001]  = APL_NULL_STRING;
	char l_system_date[20]  	   = APL_NULL_STRING;
	char l_column_value[200]		= APL_NULL_STRING;
	char l_column_header[4001]		= APL_NULL_STRING;
	char l_table_parameter[6000]	= APL_NULL_STRING;
	char l_general_parameter[6000]= APL_NULL_STRING;
	char l_general_param[6000]		= APL_NULL_STRING;
	char l_param[2000]				= APL_NULL_STRING;
	char l_column_parameter[6000]	= APL_NULL_STRING;
	char l_column[2000]				= APL_NULL_STRING;
	char l_error_desc[2000]			= APL_NULL_STRING;
	char l_param1[100]             = APL_NULL_STRING;
	char l_param2[100]             = APL_NULL_STRING;
	char l_param3[100]             = APL_NULL_STRING;
	char l_param4[100]             = APL_NULL_STRING;
	char l_param5[100]             = APL_NULL_STRING;
	char l_param6[100]             = APL_NULL_STRING;

	char g_style[4000]	= APL_NULL_STRING;
	char g_style_lt[4000]	= APL_NULL_STRING;
	char g_setting_flag[2]	= APL_NULL_STRING;
	char g_table_border[2]= APL_NULL_STRING;
	
	char  l_group_query[4001]       = APL_NULL_STRING;
	char  l_group_desc[4001]        = APL_NULL_STRING;
	char  l_group_pos[11]			  = APL_NULL_STRING;
	char  l_group_parameter[2001]   = APL_NULL_STRING;
	
	char  **l_group_parameter_value		=	NULL;
	char  **l_group_pos_value 				=	NULL;

	int  l_group_pos_no			= 0;
	int  l_group_parameter_no	= 0;
	int  l_group_break_flag 	= 0;

	char  l_prev_param1[100]            = APL_NULL_STRING;
	char  l_prev_param2[100]            = APL_NULL_STRING;
	char  l_prev_param3[100]            = APL_NULL_STRING;
	char  l_prev_param4[100]            = APL_NULL_STRING;
	char  l_prev_param5[100]            = APL_NULL_STRING;
	char  l_prev_param6[100]            = APL_NULL_STRING;

	char l_grand_round1[200]	= APL_NULL_STRING;
	char l_grand_round2[200]	= APL_NULL_STRING;
	char l_grand_round3[200]	= APL_NULL_STRING;
	
	
	char  **l_col_value		=	NULL;
	char  **l_field_val		=	NULL;
	char  **l_column_val		=	NULL;
	char  **l_param_val		=	NULL;
	
	int i=0,j=0,k=0;
	int l_col_no				= 0;
	int l_column_num			= 0;
	int l_param_num			= 0;
	int l_fetch_count 		= 0;
	int l_before_title_break= 0;
	int l_no_of_columns     = 0;
	int l_table_id		      = 0;
	int l_column_no         = 0;
	int l_page_header			= 0;
	int l_before_title      = 0;
	int l_before_title1		= 0;
	int l_before_title2		= 0;
	int l_before_title3     = 0;
	int l_report_title		= 0;
	int l_after_title			= 0;
	int l_table_hdr			= 0;
	int l_before_table		= 0;
	int l_after_table		   = 0;
	int l_col_hdr				= 0;
	int l_table					= 0;
	int l_table_footer		= 0;
	int l_page_footer			= 0;
	int l_int_no_field      = 0;
	int int_no					= 0;
	double l_grand_total1		= 0;
	double l_grand_total2		= 0;
	double l_grand_total3		= 0;
	
	char l_criteria_value1[200]   = APL_NULL_STRING;
	char l_criteria_value2[200]   = APL_NULL_STRING;
	char l_criteria_value3[200]   = APL_NULL_STRING;
	double l_criteria1_total = 0.0;
	double l_criteria2_total = 0.0;
	double l_criteria3_total = 0.0;

	/************ Paging Varibles Declaration **********************/

	int p_page_no = 0;
	int rec_no = 0;
	int p_total_page_no = 0;
	int l_page_break_chk = 0;
   	int l_next_page_break = 0;
   	int l_main_page_break = 0;
	int p_final_break = 0;
	int l_final_break = 0;
	int l_main_page_recs = 0;
	int l_next_page_recs = 0;
	int l_tolarence = 0;
	int l_landscape = 0;
	int l_portrait = 0;
	int g_line_count = 0;

	char l_paging_flag[2] = APL_NULL_STRING;
	char l_print_flag[2] = APL_NULL_STRING;

	char l_grand_display[20] = APL_NULL_STRING;

	/******* Complex Criteria Variables ***************************/

	char l_report_type[3] 			= APL_NULL_STRING;
	
	char  **l_complex_val			= NULL;
	int l_complex_num			= 0;
	char l_complex_column[2000]		= APL_NULL_STRING;
	char l_complex_parameter[2000] 		= APL_NULL_STRING;
	
	char  **l_complex_pos_val		= NULL;
	int l_complex_pos_num			= 0;
	char l_complex_pos_column[2000]		= APL_NULL_STRING;
	char l_complex_pos_parameter[2000] 	= APL_NULL_STRING;
		
	int l_complex_break_flag 		= 0;
	
	char complex_criteria_query[8001] 	= APL_NULL_STRING;
	char complex_criteria_query1[4001] 	= APL_NULL_STRING;
	char complex_criteria_label[4001] 	= APL_NULL_STRING;
	char complex_criteria_pos[101] 		= APL_NULL_STRING;

	char l_header_query[8001] 		= APL_NULL_STRING;
	char l_header_query1[4001] 		= APL_NULL_STRING;
	char header_query[4001] 		= APL_NULL_STRING;	
	char l_header_query_value[4001] 	= APL_NULL_STRING;	
	int l_header_num 			= 0;
	char **l_header_val			= NULL;
	char l_header_data[6001]		= APL_NULL_STRING;
	int l_header_brk			= 0;

	char l_footer_query[8001] 		= APL_NULL_STRING;	
	char l_footer_query1[4001] 		= APL_NULL_STRING;
	char footer_query[4001] 		= APL_NULL_STRING;	
	char l_footer_query_value[4001] 	= APL_NULL_STRING;	
	int l_footer_num 			= 0;
	char **l_footer_val			= NULL;
	char l_footer_data[6001]		= APL_NULL_STRING;
	int l_footer_data_brk			= 0;

	char l_header1[200] 			= APL_NULL_STRING;
	char l_header2[200] 			= APL_NULL_STRING;
	char l_header3[200] 			= APL_NULL_STRING;
	char l_header4[200] 			= APL_NULL_STRING;
	char l_header5[200] 			= APL_NULL_STRING;
	char l_header6[200] 			= APL_NULL_STRING;
	char l_header7[200] 			= APL_NULL_STRING;
	char l_header8[200] 			= APL_NULL_STRING;
	char l_header9[200] 			= APL_NULL_STRING;
	char l_header10[200] 			= APL_NULL_STRING;
	char l_header11[200] 			= APL_NULL_STRING;
	char l_header12[200] 			= APL_NULL_STRING;
	char l_header13[200] 			= APL_NULL_STRING;
	char l_header14[200] 			= APL_NULL_STRING;
	char l_header15[200] 			= APL_NULL_STRING;

	char l_footer1[200] 			= APL_NULL_STRING;
	char l_footer2[200] 			= APL_NULL_STRING;
	char l_footer3[200] 			= APL_NULL_STRING;
	char l_footer4[200] 			= APL_NULL_STRING;
	char l_footer5[200] 			= APL_NULL_STRING;
	char l_footer6[200] 			= APL_NULL_STRING;
	char l_footer7[200] 			= APL_NULL_STRING;
	char l_footer8[200] 			= APL_NULL_STRING;
	char l_footer9[200] 			= APL_NULL_STRING;
	char l_footer10[200] 			= APL_NULL_STRING;
	char l_footer11[200] 			= APL_NULL_STRING;
	char l_footer12[200] 			= APL_NULL_STRING;
	char l_footer13[200] 			= APL_NULL_STRING;
	char l_footer14[200] 			= APL_NULL_STRING;
	char l_footer15[200] 			= APL_NULL_STRING;


	int m					= 0;
	
	char l_complex_parameter1[500]		= APL_NULL_STRING;
	char l_complex_parameter2[500]		= APL_NULL_STRING;
	char l_complex_parameter3[500]		= APL_NULL_STRING;
	char l_complex_parameter4[500]		= APL_NULL_STRING;
	char l_complex_parameter5[500]		= APL_NULL_STRING;
	char l_complex_parameter6[500]		= APL_NULL_STRING;
	char l_complex_parameter7[500]		= APL_NULL_STRING;
	char l_complex_parameter8[500]		= APL_NULL_STRING;
	char l_complex_parameter9[500]		= APL_NULL_STRING;
	char l_complex_parameter10[500]		= APL_NULL_STRING;
	char l_complex_parameter11[500]		= APL_NULL_STRING;
	char l_complex_parameter12[500]		= APL_NULL_STRING;
	char l_complex_parameter13[500]		= APL_NULL_STRING;
	char l_complex_parameter14[500]		= APL_NULL_STRING;
	char l_complex_parameter15[500]		= APL_NULL_STRING;
	char l_complex_parameter16[500]		= APL_NULL_STRING;
	char l_complex_parameter17[500]		= APL_NULL_STRING;
	char l_complex_parameter18[500]		= APL_NULL_STRING;
	char l_complex_parameter19[500]		= APL_NULL_STRING;
	char l_complex_parameter20[500]		= APL_NULL_STRING;

	double g_complex_parameter1		= 0.0;
	double g_complex_parameter2 		= 0.0;
	double g_complex_parameter3 		= 0.0;
	double g_complex_parameter4 		= 0.0;
	double g_complex_parameter5 		= 0.0;
	double g_complex_parameter6 		= 0.0;
	double g_complex_parameter7 		= 0.0;
	double g_complex_parameter8 		= 0.0;
	double g_complex_parameter9 		= 0.0;
	double g_complex_parameter10 		= 0.0;
	double g_complex_parameter11 		= 0.0;
	double g_complex_parameter12 		= 0.0;
	double g_complex_parameter13 		= 0.0;
	double g_complex_parameter14 		= 0.0;
	double g_complex_parameter15 		= 0.0;
	double g_complex_parameter16 		= 0.0;
	double g_complex_parameter17 		= 0.0;
	double g_complex_parameter18 		= 0.0;
	double g_complex_parameter19 		= 0.0;
	double g_complex_parameter20		= 0.0;
	
	double f_complex_parameter1		= 0.0;
	double f_complex_parameter2 		= 0.0;
	double f_complex_parameter3 		= 0.0;
	double f_complex_parameter4 		= 0.0;
	double f_complex_parameter5 		= 0.0;
	double f_complex_parameter6 		= 0.0;
	double f_complex_parameter7 		= 0.0;
	double f_complex_parameter8 		= 0.0;
	double f_complex_parameter9 		= 0.0;
	double f_complex_parameter10 		= 0.0;
	double f_complex_parameter11 		= 0.0;
	double f_complex_parameter12 		= 0.0;
	double f_complex_parameter13 		= 0.0;
	double f_complex_parameter14 		= 0.0;
	double f_complex_parameter15 		= 0.0;
	double f_complex_parameter16 		= 0.0;
	double f_complex_parameter17 		= 0.0;
	double f_complex_parameter18 		= 0.0;
	double f_complex_parameter19 		= 0.0;
	double f_complex_parameter20		= 0.0;

	char complex_criteria[4001]		= APL_NULL_STRING;
	char l_complex_criteria_data[4001]      = APL_NULL_STRING;

	char l_multiple_col_flag[3]		= APL_NULL_STRING;
	char l_multiple_col_header[4001]	= APL_NULL_STRING;
	char l_multiple_colspan_sep[2001]	= APL_NULL_STRING;

	int l_multiple_col_header_no		= 0;
	int l_multiple_colspan_sep_no		= 0;

	char **l_multiple_col_header_value	= NULL;
	char **l_multiple_colspan_sep_value	= NULL;

	char l_level_header[2000]		= APL_NULL_STRING;
	char l_level_colspan[500]		= APL_NULL_STRING;
	char l_level_column[500]		= APL_NULL_STRING;
	char l_level_col_span[10]		= APL_NULL_STRING;

	int l_level_header_no			= 0;
	int l_level_colspan_no			= 0;
	int int_aa				= 0;
	int int_bb				= 0;
	int int_a				= 0;
	int int_b				= 0;

	char **l_level_header_value		= NULL;
	char **l_level_colspan_value		= NULL;

	char l_zip_image_path[200]		= APL_NULL_STRING;

	int l_format_col_flag		= 0;
	int l_format_col_no         = 0;
	char **l_format_col_val		= NULL;
	char l_format_col_value[10] = APL_NULL_STRING;
	char l_format_col_pos[500]	= APL_NULL_STRING;

	char l_record_count_query_final[8001]   = APL_NULL_STRING;
	char l_record_count_query[4001]   = APL_NULL_STRING;
	char l_record_count_query1[4001]   = APL_NULL_STRING;
	int l_record_count_flag = 0;
	int l_record_count = 0;
	int l_table_numbers = 0;
	int l_table_num = 0;

	int l_return_param = 0;
	
	
	strcpy(l_rept_id,p_rept_id);
	strcpy(l_rep_type,p_rep_type);
	strcpy(l_rep_name,p_rep_name);
	strcpy(l_param_str,p_param_str);
	strcpy(l_chr_param,p_chr_ptr_param);
	strcpy(l_client,l_param_str);
	strcpy(l_start_date,p_start_date);
	strcpy(l_compress_flag,p_compress_flag);
	strcpy(l_user,p_user);
	strcpy(l_web_login_id,p_web_login_id);
	strcpy(l_web_rpt_id,p_web_rpt_id);
	strcpy(l_web_source_from,p_web_source_from);
	strcpy(l_web_report_dt,p_web_report_dt);
	strcpy(l_web_proc_id,p_web_proc_id);

	EXEC SQL BEGIN DECLARE SECTION;
		
	EXEC SQL VAR l_rept_id IS STRING;
	EXEC SQL VAR l_gen_query IS STRING;

	EXEC SQL VAR table_query IS STRING;
	EXEC SQL VAR l_table_query IS STRING;
	EXEC SQL VAR l_table_query1 IS STRING;
	EXEC SQL VAR l_table_query2 IS STRING;
	EXEC SQL VAR l_table_query3 IS STRING;
	EXEC SQL VAR l_table_query4 IS STRING;
	EXEC SQL VAR l_table_query5 IS STRING;

	EXEC SQL VAR l_criteria_query1 IS STRING;
	EXEC SQL VAR l_criteria_query2 IS STRING;
	EXEC SQL VAR l_criteria_query3 IS STRING;
	EXEC SQL VAR l_table_parameter IS STRING;
	EXEC SQL VAR l_general_param IS STRING;
	EXEC SQL VAR l_client IS STRING;
	EXEC SQL VAR l_sub_client IS STRING;
	EXEC SQL VAR l_start_date IS STRING;
	EXEC SQL VAR l_group_parameter IS STRING;
	EXEC SQL VAR l_group_query IS STRING;
	EXEC SQL VAR l_group_desc IS STRING;
	EXEC SQL VAR l_web_login_id IS STRING;
	EXEC SQL VAR l_web_rpt_id IS STRING;
	EXEC SQL VAR l_web_source_from IS STRING;
	EXEC SQL VAR l_web_report_dt IS STRING;
	EXEC SQL VAR l_web_proc_id IS STRING;

	EXEC SQL VAR l_grand_round1 IS STRING;
	EXEC SQL VAR l_grand_round2 IS STRING;
	EXEC SQL VAR l_grand_round3 IS STRING;

	EXEC SQL VAR g_setting_flag IS STRING;
	EXEC SQL VAR l_grand_display IS STRING;

	EXEC SQL VAR complex_criteria_query IS STRING;
	EXEC SQL VAR complex_criteria_query1 IS STRING;
	EXEC SQL VAR l_header_query IS STRING;
	EXEC SQL VAR l_header_query1 IS STRING;
	EXEC SQL VAR l_footer_query IS STRING;
	EXEC SQL VAR l_footer_query1 IS STRING;
	EXEC SQL VAR l_complex_criteria_data IS STRING;
	EXEC SQL VAR complex_criteria IS STRING;
	
	EXEC SQL END DECLARE SECTION;
	
	strcpy(l_init_path,getenv("INTL_ROOT_PATH"));
	strcat(l_init_path,"intl_sun.cfg");
	
	if((l_init_file = fopen(l_init_path,"r")) == (FILE *)NULL)
	{
		fprintf(fl_userlog,"Failed to Open file for PATH :|%s|\n",l_init_path);
		printf("Failed to Open file for PATH :|%s|\n",l_init_path);
		APL_GOBACK_FAIL
	}

	fprintf(fl_userlog,"COMPRESS FLAG :|%s|\n",l_compress_flag);
	
	if(strlen(l_compress_flag) > 0 && !strcmp(l_compress_flag,"Y"))
	{
		if (APL_FAILURE == CO_ReadToken(l_init_file,"INTL_TEMP_PATH",l_report_path,l_debug_info_ptr))
		{
			fprintf(fl_userlog,"Error : INTL_TEMP_PATH not set in intl_sun.cfg File \n");
			printf("Error : INTL_TEMP_PATH not set in intl_sun.cfg File \n");
			APL_GOBACK_FAIL
		}
	}
	else
	{
		if (APL_FAILURE == CO_ReadToken(l_init_file,"INTL_REP_PATH",l_report_path,l_debug_info_ptr))
		{
			fprintf(fl_userlog,"Error :\'INTL_REP_PATH \' not set in intl_sun.cfg File \n");
			printf("Error :\'INTL_REP_PATH \' not set in intl_sun.cfg File \n");
			APL_GOBACK_FAIL
		}
	}
		
	EXEC SQL SELECT TO_CHAR(SYSDATE,'DD_MON_YYYY')||CHR(95)||TO_CHAR(SYSDATE,'HH24_MI_SS')		
				INTO :l_time_stamp
				FROM DUAL;

	sprintf(l_report_name,"%s_%s_%s.htm",l_rep_name,l_rept_id,l_time_stamp);

	sprintf(l_report_path, "%s%s",l_report_path,l_report_name);
		
	fprintf(fl_userlog,"l_chr_param:|%s|\n",l_chr_param);
	
	if (CO_SplitStr(l_chr_param,PARAMSEP,&l_int_no_field,&l_field_val) == APL_FAILURE)
	{
		CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_chr_param);
		APL_GOBACK_FAIL
	}

	fprintf(fl_userlog,"l_int_no_field:|%d|\n",l_int_no_field);
	
	if(l_int_no_field > 0)
	{
		for(int_no=0;int_no<l_int_no_field;int_no++)
		{
			if(int_no == 1)
			strcpy(l_param1,l_field_val[int_no]);
			else if(int_no == 2)
			strcpy(l_param2,l_field_val[int_no]);
			else if(int_no == 3)
			strcpy(l_param3,l_field_val[int_no]);
			else if(int_no == 4)
			strcpy(l_param4,l_field_val[int_no]);
			else if(int_no == 5)
			strcpy(l_param5,l_field_val[int_no]);
		}
	}
	
	fprintf(fl_userlog,"REPORT FILE PATH :|%s|\n",l_report_path);

	if((l_report_HTML1 = fopen(l_report_path,"w")) == (FILE *) NULL)
	{
		CO_InsertErr(l_debug_info_ptr,"FILE NOT FOUND",APL_NULL_STRING,
						APL_NULL_STRING,APL_NULL_STRING,	
						 __LINE__,__FILE__);
		fprintf(fl_userlog,"Error : File not Found For Report PATH :|%s|\n",l_report_path);
		APL_GOBACK_FAIL
	}


	/**** For Entry in PRO_COMMON_REPORT ********************/

	//fprintf(fl_userlog,"LENGTH OF l_compress_flag :|%d|\n",strlen(l_compress_flag));Changes done for AIX Migration
	fprintf(fl_userlog,"LENGTH OF l_compress_flag :|%d|\n",(int)strlen(l_compress_flag));

	if(strlen(l_compress_flag) == 0 ||   !strcmp(l_compress_flag,"N"))
	{	
	    strcpy(l_intl_rept_struct_ha.report_name,l_report_name);
	    strcat(l_intl_rept_struct_ha.report_name,"\0");
	    strcpy(l_intl_rept_struct_ha.report_desc,APL_REP_DESC);
	    strcat(l_intl_rept_struct_ha.report_desc,"\0");
	    strcpy(l_intl_rept_struct_ha.report_date,l_start_date);
	    l_intl_rept_struct_ha.report_width = 200 ;
	    strcpy(l_intl_rept_struct_ha.task_desc,"DynamicReport");
	    strcpy(l_intl_rept_struct_ha.fe_be_ind,"B");
	    strcpy(l_intl_rept_struct_ha.usr,l_user);

		 fprintf(fl_userlog,"Entering CO_Proc_RptIns\n");
		 fprintf(fl_userlog,"report_name:|%s|\n",l_intl_rept_struct_ha.report_name);
		 fprintf(fl_userlog,"report_desc:|%s|\n",l_intl_rept_struct_ha.report_desc);
		 fprintf(fl_userlog,"report_date:|%s|\n",l_intl_rept_struct_ha.report_date);
		 //fprintf(fl_userlog,"report_width:|%ld|\n",l_intl_rept_struct_ha.report_width);Changes done for AIX Migration
		 fprintf(fl_userlog,"report_width:|%d|\n",l_intl_rept_struct_ha.report_width);
		 fprintf(fl_userlog,"task_desc:|%s|\n",l_intl_rept_struct_ha.task_desc);
		 fprintf(fl_userlog,"fe_be_ind:|%s|\n",l_intl_rept_struct_ha.fe_be_ind);
		 fprintf(fl_userlog,"usr:|%s|\n",l_intl_rept_struct_ha.usr);
	   
	   // if(APL_FAILURE == CO_Proc_DBRptIns(l_intl_rept_struct_ha,l_debug_info_ptr))
if(APL_FAILURE == CO_Proc_DBRptIns(&l_intl_rept_struct_ha,l_debug_info_ptr)) //AIX - Migration Chnages
	    {
			fprintf(fl_userlog,"Error : Failure From CO_Proc_RptIns\n");
		  	APL_GOBACK_FAIL
	    }
		
		if((strlen(l_web_source_from) > 0) && !(strcmp(l_web_source_from,"W")))
		{	
		EXEC SQL CALL SP_SHOW_REAL_TIME_REPORT_IN_WC(:l_report_name,:l_web_report_dt,:l_web_login_id,:l_report_path,:l_rept_id);
	
		if(sqlca.sqlcode < 0)
		{
			printf("Error : Failed From Stored Procedure SP_SHOW_REAL_TIME_REPORT_IN_WC ERR DESC :|%d|\n",sqlca.sqlcode);
			fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_SHOW_REAL_TIME_REPORT_IN_WC ERR DESC :|%d|\n",sqlca.sqlcode);
		}
		}
	}
	
	/**********************************************************************/
		 
 	/******** Starting of HTML1 and META tag ****************************/
	
	fprintf(l_report_HTML1,"<HTML><HEAD><META http-equiv='Content-Type' content='text/html; charset=UTF-8'></META>\n");


	fprintf(fl_userlog,"Fetching Report Main Details :|%s|\n",l_rept_id);
	
	EXEC SQL SELECT * INTO :h_report_main_struct
				FROM REPORT_MAIN
				WHERE REPORT_ID=:l_rept_id;	

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Failed to Access REPORT_MAIN Table --- ORA ERROR :|%d|\n",sqlca.sqlcode);
	}

	/******* Report Type Check ********************************/
	
	strcpy(l_report_type,h_report_main_struct.report_type);
	strcpy(header_query,h_report_main_struct.header_query);

	printf("l_report_type :|%s|\n",l_report_type);

	fprintf(fl_userlog,"Report_Type :|%s|\n",l_report_type);

	/************ For Dynamic Style Sheet Display *************************/

	fprintf(fl_userlog,"Before REPORT_SYSPARM ---- \n");

	EXEC SQL SELECT A.DEFAULT_SETTING,A.STYLE,A.STYLE_LT 
	         INTO :g_setting_flag,:g_style,:g_style_lt
		 FROM REPORT_SYSPARAM A, MT_COMMON_SYS_PARAMS B 
		 WHERE A.BANK_CODE=B.INSTALLED_AT_BANK;

        fprintf(fl_userlog,"After REPORT_SYSPARM Ora Error :|%d|\n",sqlca.sqlcode);

	fprintf(fl_userlog,"DEFAULT_SETTING :|%s|\n",g_setting_flag);

	/***********************************************************************/

	if(!strcmp(l_report_type,"L"))
	{			
		fprintf(l_report_HTML1,"%s\n",g_style_lt);
		strcpy(g_table_border,"1");
	}
	else
	{
		fprintf(l_report_HTML1,"%s\n",g_style);
		strcpy(g_table_border,"1");
	}
	
	/************************************************************/

	fprintf(l_report_HTML1,"</HEAD>\n");

	fprintf(l_report_HTML1,"<BODY>\n");
	
	/***** Image path ****************************************************************************/

	fprintf(fl_userlog,"Before Image :- Compress Flag :|%s|\n",l_compress_flag);

	if(strlen(h_report_main_struct.image_path) > 0)
	{
		fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" class=\'heading\'><TR><TD WIDTH=\"20%%\" ALIGN=\"LEFT\"><IMG id=\"image\" SRC=\"%s\" ALIGN=\"LEFT\" HEIGHT=\"60\" WIDTH=\"150\"/></TD>\n",h_report_main_struct.image_path);
	}

	/******* Page Header ********************************/
	
	if(strlen(h_report_main_struct.page_hdr_align) > 0)
	{
		if(strlen(h_report_main_struct.page_header) > 0 )
		{
			fprintf(l_report_HTML1,"<TD WIDTH=\"80%%\" ALIGN=\"%s\" class=\'heading\'><I>%s</I></TD></TR></TABLE>\n",h_report_main_struct.page_hdr_align,h_report_main_struct.page_header);
		}
	}
	else
	{
		if(strlen(h_report_main_struct.page_header) > 0 )
		{
			fprintf(l_report_HTML1,"<TD WIDTH=\"50%%\" ALIGN=\"LEFT\" class=\'heading\'><I>%s</I></TD></TR></TABLE>\n",h_report_main_struct.page_header);
		}

	}
	
	l_page_header = h_report_main_struct.page_hdr_brk;	
	while(l_page_header > 0 )
	{
		fprintf(l_report_HTML1,"</BR>\n");
				
		l_page_header -- ;
	}

	if(strcmp(l_report_type,"L"))
	{			
		fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
		fprintf(l_report_HTML1,"<TD ALIGN=\"LEFT\" class=\'ez4\'>Date : %s</TD>\n",l_start_date);
		fprintf(l_report_HTML1,"<TR></TABLE>\n");
		fprintf(l_report_HTML1,"</BR>\n");
	}
	
	/******* Stored procedure for REPORT MAIN ******************************************/
	
	fprintf(fl_userlog,"l_rept_id:|%s|\n",l_rept_id);
	fprintf(fl_userlog,"l_param1:|%s|\tl_param2:|%s|\n",l_param1,l_param2);
	fprintf(fl_userlog,"l_param3:|%s|\tl_param4:|%s|\n",l_param3,l_param4);
	fprintf(fl_userlog,"l_param5:|%s|\tl_param6:|%s|\n",l_param5,l_param6);

		
	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_MAIN for Report ID :|%s||%s|\n",l_rept_id,l_param1);		
	if((strlen(l_web_source_from) > 0) && !(strcmp(l_web_source_from,"W")))
	{
	EXEC SQL CALL SP_REPORT_MAIN(:l_rept_id,:l_param1,:l_param2,:l_param3,:l_param4,
										  :l_param5,:l_param6,:l_gen_query,:l_error_desc);
	
	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Failure From SP_REPORT_MAIN ORA ERROR :|%d|\n",sqlca.sqlcode );
	}
	}
	
	fprintf(fl_userlog,"GENERAL QUERY :|%s|\n",l_gen_query);

	if(strlen(l_gen_query) > 0)
	{	
	EXEC SQL PREPARE HTML1_GEN FROM :l_gen_query;
	EXEC SQL DECLARE HTML1genquerycurr CURSOR FOR HTML1_GEN;
	EXEC SQL OPEN HTML1genquerycurr;
	
	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Failed to OPEN HTML1genquerycurr CURSOR ");
	}

	for(;;)
	{
		EXEC SQL FETCH HTML1genquerycurr
			INTO :l_general_param;

		
		if(sqlca.sqlcode == 1403)
		break;
		
	    	 if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		 {
		    fprintf(fl_userlog,"Error : GENERAL QUERY Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
		    break;
		 }
		 
		fprintf(fl_userlog,"l_general_param 1:|%s|\n",l_general_param);

		strcpy(l_general_parameter,l_general_param);
	
		/**** Split General Query and fetch the value in seperate parameter *******************/
		
		if (CO_SplitStr(l_general_parameter,CAPSEP,&l_param_num,&l_param_val) == APL_FAILURE)
		{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_general_parameter);
			 	APL_GOBACK_FAIL
		}

	
		fprintf(fl_userlog,"l_param_num:|%d|\n",l_param_num);	
		
		for(k=0;k<l_param_num;k++)
		{
			strcpy(l_param,l_param_val[k]);

			fprintf(fl_userlog,"l_param:|%s||%d|\n",l_param,k);

			/********* Before Title of report ***********************/
			
			if(k == 0)
			{
				if(strlen(h_report_main_struct.before_title_align) > 0)
				{	
					if(strlen(h_report_main_struct.before_title) > 0)
					{
						fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						fprintf(l_report_HTML1,"<TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'ez4\'>%s %s</TD>\n",h_report_main_struct.before_title_align,h_report_main_struct.before_title,l_param);
						fprintf(l_report_HTML1,"</TR></TABLE>\n");
					}
				}
				else
				{
					if(strlen(h_report_main_struct.before_title) > 0)
					{
						fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						fprintf(l_report_HTML1,"<TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'ez4\'>%s %s</TD>\n",h_report_main_struct.before_title,l_param);
						fprintf(l_report_HTML1,"</TR></TABLE>\n");
					}

				}
	
				l_before_title = h_report_main_struct.before_title_brk;
				while(l_before_title > 0)
				{
					fprintf(l_report_HTML1,"</BR>\n");
					l_before_title --;
				}
			}
			else if(k == 1)
			{
				if(strlen(h_report_main_struct.before_title1_align) > 0)
				{	
					if(strlen(h_report_main_struct.before_title1) > 0)
					{
						fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						fprintf(l_report_HTML1,"<TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'ez4\'>%s %s</TD>\n",h_report_main_struct.before_title1_align,h_report_main_struct.before_title1,l_param);
						fprintf(l_report_HTML1,"</TR></TABLE>\n");
					}
				}
				else
				{
					if(strlen(h_report_main_struct.before_title1) > 0)
					{
						fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						fprintf(l_report_HTML1,"<TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'ez4\'>%s %s</TD>\n",h_report_main_struct.before_title1,l_param);
						fprintf(l_report_HTML1,"</TR></TABLE>\n");
					}

				}
	
				l_before_title1 = h_report_main_struct.before_title1_brk;
				while(l_before_title1 > 0)
				{
					fprintf(l_report_HTML1,"</BR>\n");
					l_before_title1 --;
				}
			}
			else if(k == 2)
			{
				if(strlen(h_report_main_struct.before_title2_align) > 0)
				{	
					if(strlen(h_report_main_struct.before_title2) > 0)
					{
						fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						fprintf(l_report_HTML1,"<TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'ez4\'>%s %s</TD>\n",h_report_main_struct.before_title2_align,h_report_main_struct.before_title2,l_param);
						fprintf(l_report_HTML1,"</TR></TABLE>\n");
					}
				}
				else
				{
					if(strlen(h_report_main_struct.before_title2) > 0)
					{
						fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						fprintf(l_report_HTML1,"<TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'ez4\'>%s %s</TD>\n",h_report_main_struct.before_title2,l_param);
						fprintf(l_report_HTML1,"</TR></TABLE>\n");
					}

				}
	
				l_before_title2 = h_report_main_struct.before_title2_brk;
				while(l_before_title2 > 0)
				{
					fprintf(l_report_HTML1,"</BR>\n");
					l_before_title2 --;
				}
			}
			else if(k == 3)
			{
				if(strlen(h_report_main_struct.before_title3_align) > 0)
				{	
					if(strlen(h_report_main_struct.before_title3) > 0)
					{
						fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						fprintf(l_report_HTML1,"<TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'ez4\'>%s %s</TD>\n",h_report_main_struct.before_title3_align,h_report_main_struct.before_title3,l_param);
						fprintf(l_report_HTML1,"</TR></TABLE>\n");
					}
				}
				else
				{
					if(strlen(h_report_main_struct.before_title3) > 0)
					{
						fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						fprintf(l_report_HTML1,"<TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'ez4\'>%s %s</TD>\n",h_report_main_struct.before_title3,l_param);
						fprintf(l_report_HTML1,"</TR></TABLE>\n");
					}
				}
	
				l_before_title3 = h_report_main_struct.before_title3_brk;
				while(l_before_title3 > 0)
				{
					fprintf(l_report_HTML1,"</BR>\n");
					l_before_title3 --;
				}
			}	

		}

	}
	EXEC SQL CLOSE HTML1genquerycurr;

	}

	/******* Dynamic Header Display ********************************/

	fprintf(fl_userlog,"strlen(header_query) :|%d|\n",strlen(header_query));

	if(strlen(header_query) > 0)
	{

	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_HEADER :|%s||%s|\n",l_rept_id,l_param1);		
	printf("Calling Stored Procedure SP_REPORT_HEADER :|%s||%s|\n",l_rept_id,l_param1);		
	
	if((strlen(l_web_source_from) > 0) && !(strcmp(l_web_source_from,"W")))
	{
	EXEC SQL CALL SP_REPORT_HEADER(:l_rept_id,:l_param1,:l_param2,
				:l_param3,:l_param4, :l_param5,
				:l_param6,:l_header_query,:l_header_query1,:l_error_desc); 

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_HEADER ERR DESC :|%s|\n",l_error_desc);
	}
	}

	strcat(l_header_query,l_header_query1);

	fprintf(fl_userlog,"HEADER QUERY :|%s|\n",l_header_query);

	EXEC SQL PREPARE HTML1_HEADER_CURR FROM :l_header_query;

	EXEC SQL DECLARE html1_header_curr CURSOR FOR HTML1_HEADER_CURR;
	
	fprintf(fl_userlog,"After DECLARE html1_header_curr Ora Error :|%d|\n",sqlca.sqlcode);

	EXEC SQL OPEN html1_header_curr;

	EXEC SQL FETCH html1_header_curr INTO :l_header_query_value;

	fprintf(fl_userlog,"After FETCH html1_header_curr Ora Error :|%d|\n",sqlca.sqlcode);

	EXEC SQL CLOSE html1_header_curr;

	fprintf(fl_userlog,"l_header_query_value :|%s|\n",l_header_query_value);
	
	if (CO_SplitStr(l_header_query_value,CAPSEP,&l_header_num,&l_header_val) == APL_FAILURE)
	{
		CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_header_query_value);
		APL_GOBACK_FAIL
	}

	fprintf(fl_userlog,"l_header_num :|%d|\n",l_header_num);
	if(l_header_num > 0)
	{
		for(i=0;i<l_header_num;i++)
		{
			if(i == 0)
			strcpy(l_header1,l_header_val[i]);
			else if(i == 1)
			strcpy(l_header2,l_header_val[i]);
			else if(i == 2)
			strcpy(l_header3,l_header_val[i]);
			else if(i == 3)
			strcpy(l_header4,l_header_val[i]);
			else if(i == 4)
			strcpy(l_header5,l_header_val[i]);
			else if(i == 5)
			strcpy(l_header6,l_header_val[i]);
			else if(i == 6)
			strcpy(l_header7,l_header_val[i]);
			else if(i == 7)
			strcpy(l_header8,l_header_val[i]);
			else if(i == 8)
			strcpy(l_header9,l_header_val[i]);
			else if(i == 9)
			strcpy(l_header10,l_header_val[i]);
			else if(i == 10)
			strcpy(l_header11,l_header_val[i]);
			else if(i == 11)
			strcpy(l_header12,l_header_val[i]);
			else if(i == 12)
			strcpy(l_header13,l_header_val[i]);
			else if(i == 13)
			strcpy(l_header14,l_header_val[i]);
			else if(i == 14)
			strcpy(l_header15,l_header_val[i]);
		}
	}

	/****** Stored Procedure : SP_REPORT_HEADER_DATA ***********************************/

	fprintf(fl_userlog,"l_header1 :|%s|\t l_header2 :|%s|\n",l_header1,l_header2);
	fprintf(fl_userlog,"l_header3 :|%s|\t l_header4 :|%s|\n",l_header3,l_header4);
	fprintf(fl_userlog,"l_header5 :|%s|\t l_header6 :|%s|\n",l_header5,l_header6);
	fprintf(fl_userlog,"l_header7 :|%s|\t l_header8 :|%s|\n",l_header7,l_header8);
	fprintf(fl_userlog,"l_header9 :|%s|\t l_header10 :|%s|\n",l_header9,l_header10);
	fprintf(fl_userlog,"l_header11 :|%s|\t l_header12 :|%s|\n",l_header11,l_header12);
	fprintf(fl_userlog,"l_header13 :|%s|\t l_header14 :|%s|\n",l_header13,l_header14);
	fprintf(fl_userlog,"l_header15 :|%s|\t\n",l_header15);

	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_HEADER_DATA :|%s|\n",l_rept_id);		
	printf("Calling Stored Procedure SP_REPORT_HEADER_DATA :|%s|\n",l_rept_id);		
	
	if((strlen(l_web_source_from) > 0) && !(strcmp(l_web_source_from,"W")))
	{
	EXEC SQL CALL SP_REPORT_HEADER_DATA(:l_rept_id,:l_header1,
					    :l_header2,:l_header3,
					    :l_header4,:l_header5,
					    :l_header6,:l_header7,
					    :l_header8,:l_header9,
					    :l_header10,:l_header11,
					    :l_header12,:l_header13,
					    :l_header14,:l_header15,
					    :l_header_data,:l_error_desc); 

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_HEADER_DATA ERR DESC :|%s|\n",l_error_desc);
	}
	}

	fprintf(fl_userlog,"HEADER DATA :|%s|\n",l_header_data);

	/************ Dynamic Formating Procedure ********************************************/
	
	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);	
	printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
	
	if((strlen(l_web_source_from) > 0) && !(strcmp(l_web_source_from,"W")))
	{
	EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_header_data,:l_error_desc); 

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
	}
	}

	fprintf(fl_userlog,"HEADER DATA After Formatting -- :|%s|\n",l_header_data);

	/*************************************************************************************/

	fprintf(fl_userlog,"strlen(l_header_data) :|%d|\n",strlen(l_header_data));
	
	if(strlen(l_header_data) > 0)
	{
		fprintf(fl_userlog,"Displaying Header Data ----- \n");

		fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\"><TR>\n");
		fprintf(l_report_HTML1,"<TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'headerdata\'>%s</TD>\n",h_report_main_struct.header_data_align,l_header_data);
		fprintf(l_report_HTML1,"</TR></TABLE>\n");
	}

	l_header_brk = h_report_main_struct.header_brk;
	while(l_header_brk > 0)
	{
		fprintf(l_report_HTML1,"</BR>\n");
		l_header_brk --;
		g_line_count++;
	}

	}

	/**********************  End Of Dynamic Header Display   ***************************/


	fprintf(l_report_HTML1,"</BR>\n");
	
	/***** Report Title *************************************************************************/

	if(strlen(h_report_main_struct.report_title_align) > 0)
	{	
		if(strlen(h_report_main_struct.report_title) > 0)	
		{
 			fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\"  class=\'ez4\'><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'ez4\'>%s</TD></TR></TABLE>\n",h_report_main_struct.report_title_align,h_report_main_struct.report_title);	 
		}
	}
	else
	{
		if(strlen(h_report_main_struct.report_title) > 0)	
		{
 			fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\"  class=\'ez4\'><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'ez4\'>%s</TD></TR></TABLE>\n",h_report_main_struct.report_title);	 
		}

	}
	
	l_report_title = h_report_main_struct.report_title_brk;	
	while(l_report_title > 0)
	{
		fprintf(l_report_HTML1,"</BR>\n");
		l_report_title --;
	}
	

	/******** After report title ****************************************************************/
	
	if(strlen(h_report_main_struct.after_title_align) > 0)
	{
		if(strlen(h_report_main_struct.after_title) > 0)
		{
			fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" class=\'ez4\'><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'ez4\'>%s</TD><TR></TABLE>\n",h_report_main_struct.after_title_align,h_report_main_struct.after_title);
		}
	}
	else
	{
		if(strlen(h_report_main_struct.after_title) > 0)
		{
			fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" class=\'ez4\'><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'ez4\'>%s</TD><TR></TABLE>\n",h_report_main_struct.after_title);
		}

	}
	
	l_after_title = h_report_main_struct.after_title_brk;
	while(l_after_title > 0)
	{
		fprintf(l_report_HTML1,"</BR>\n");
		l_after_title --;
	}
	

	l_table_id = 1;
	
	fprintf(fl_userlog,"NO OF TABLES :|%d|\n",h_report_main_struct.no_of_tables);
	printf("NO OF TABLES :|%d|\n",h_report_main_struct.no_of_tables);
	
	if(!strcmp(h_report_main_struct.report_type,"G"))/*added by siva.ganapathi for Enh. Log 121 on 2/20/2009 -- started*/
	{
		
		
			EXEC SQL SELECT * INTO :h_report_details_struct
							FROM REPORT_DETAILS 
							WHERE REPORT_ID=:l_rept_id
							AND TABLE_ID=:l_table_id;
			
		strcpy(l_group_query,h_report_details_struct.group_query);
		
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM1',:l_param1) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM2',:l_param2) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM3',:l_param3) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM4',:l_param4) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM5',:l_param5) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM6',:l_param6) INTO :l_group_query FROM DUAL;
					
		fprintf(fl_userlog,"GROUP QUERY :|%s|\n",l_group_query);
		
		EXEC SQL PREPARE HTML1_GROUP FROM :l_group_query;
		EXEC SQL DECLARE html1_group_g CURSOR FOR HTML1_GROUP;
		EXEC SQL OPEN html1_group_g;

		if(sqlca.sqlcode < 0)
		{
				fprintf(fl_userlog,"Error : Cursor Open html1_group_g ORA ERROR :|%d|\n",sqlca.sqlcode);
		}

		for(;;)
		{
			
			EXEC SQL FETCH html1_group_g INTO :l_group_parameter;

			if((sqlca.sqlcode == 1403)||(l_group_break_flag == 1))
			break;

			for(l_table_id=1; l_table_id <= h_report_main_struct.no_of_tables; l_table_id++)
			{
				g_complex_parameter1 = 0.0;
				g_complex_parameter2 = 0.0;
				g_complex_parameter3 = 0.0;
				g_complex_parameter4 = 0.0;
				g_complex_parameter5 = 0.0;
				g_complex_parameter6 = 0.0;
				g_complex_parameter7 = 0.0;
				g_complex_parameter8 = 0.0;
				g_complex_parameter9 = 0.0;
				g_complex_parameter10 = 0.0;
				g_complex_parameter11 = 0.0;
				g_complex_parameter12 = 0.0;
				g_complex_parameter13 = 0.0;
				g_complex_parameter14 = 0.0;
				g_complex_parameter15 = 0.0;
				g_complex_parameter16 = 0.0;
				g_complex_parameter17 = 0.0;
				g_complex_parameter18 = 0.0;
				g_complex_parameter19 = 0.0;
				g_complex_parameter20 = 0.0;

				fprintf(fl_userlog,"l_rept_id:|%s|l_table_id:|%d|\n",l_rept_id,l_table_id);
				
				/******* Fetch the REPORT DETAILS for the perticular report ID and table ID ******************/
				
				
					EXEC SQL SELECT * INTO :h_report_details_struct
							FROM REPORT_DETAILS 
							WHERE REPORT_ID=:l_rept_id
							AND TABLE_ID=:l_table_id;
				
				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Failed to Access REPORT_DETAILS --- ORA ERROR :|%d|\n",sqlca.sqlcode);
				}
				
						/***** Table header *******************************************/

						fprintf(fl_userlog,"h_report_details_struct.table_hdr:|%s|\n",h_report_details_struct.table_hdr);
						
						if(strlen(h_report_details_struct.table_hdr_align) > 0)
						{
							if(strlen(h_report_details_struct.table_hdr) > 0)
							{
								fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" class=\'lableredbg\'><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'lableredbg\'>%s</TD><TR></TABLE>\n",h_report_details_struct.table_hdr_align,h_report_details_struct.table_hdr);
							}
						}
						else
						{
							if(strlen(h_report_details_struct.table_hdr) > 0)
							{
								fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" class=\'lableredbg\'><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'lableredbg\'>%s</TD><TR></TABLE>\n",h_report_details_struct.table_hdr);
							}
							
						}

						l_table_hdr = h_report_details_struct.table_hdr_brk;
						while(l_table_hdr > 0)
						{
							fprintf(l_report_HTML1,"</BR>\n");
							l_table_hdr --;
						}

		if(l_table_id == 1)
		{		
							
						fprintf(fl_userlog,"table id is:|%d|\n",l_table_id);

						fprintf(fl_userlog,"h_report_details_struct.group_desc:|%s|\n",h_report_details_struct.group_desc);
						fprintf(fl_userlog,"h_report_details_struct.group_pos:|%s|\n",h_report_details_struct.group_pos);
					
						strcpy(l_group_pos,h_report_details_struct.group_pos);

						strcpy(l_group_desc,h_report_details_struct.group_desc);
							/******** Split Group Parameter **************************************/
							
								fprintf(fl_userlog,"l_group_pos:|%s|\n",l_group_pos);
								
								if(CO_SplitStr(l_group_pos,COMASEP,&l_group_pos_no,&l_group_pos_value) == APL_FAILURE)
								{
									 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
									fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_pos);
									APL_GOBACK_FAIL
								}
								
								fprintf(fl_userlog,"l_group_parameter:|%s|\n",l_group_parameter);
								
								if(CO_SplitStr(l_group_parameter,CAPSEP,&l_group_parameter_no,&l_group_parameter_value) == APL_FAILURE)
								{
									 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
									fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_parameter);
									APL_GOBACK_FAIL
								}

								fprintf(fl_userlog,"l_group_pos_no:|%d|l_group_parameter_no:|%d|\n",l_group_pos_no,l_group_parameter_no);
								
								if((l_group_pos_no > 0) && (l_group_parameter_no > 0)
									&& (l_group_pos_no == l_group_parameter_no))
								{	
									l_group_break_flag=0;
								
									for(i=0;i<l_group_pos_no;i++)
									{
										if(!strcmp(l_group_pos_value[i],"2"))
										{
											fprintf(fl_userlog,"l_param2:|%s|l_prev_param2:|%s|\n",l_param2,l_prev_param2);
											if(!strcmp(l_param2,l_prev_param2))
											{
												strcpy(l_param2,l_group_parameter_value[i]);
												strcpy(l_prev_param2,l_param2);
											}
											else
												l_group_break_flag=1;
										}
										else if(!strcmp(l_group_pos_value[i],"3"))
										{
											fprintf(fl_userlog,"l_param3:|%s|l_prev_param3:|%s|\n",l_param3,l_prev_param3);
											
											if(!strcmp(l_param3,l_prev_param3))
											{
												strcpy(l_param3,l_group_parameter_value[i]);
												strcpy(l_prev_param3,l_param3);
											}
											else
												l_group_break_flag=1;
										}
										else if(!strcmp(l_group_pos_value[i],"4"))
										{
											fprintf(fl_userlog,"l_param4:|%s|l_prev_param4:|%s|\n",l_param4,l_prev_param4);
											
											if(!strcmp(l_param4,l_prev_param4))
											{
												strcpy(l_param4,l_group_parameter_value[i]);
												strcpy(l_prev_param4,l_param4);
											}
											else
												l_group_break_flag=1;
										}
										else if(!strcmp(l_group_pos_value[i],"5"))
										{
											fprintf(fl_userlog,"l_param5:|%s|l_prev_param5:|%s|\n",l_param5,l_prev_param5);
											
											if(!strcmp(l_param5,l_prev_param5))
											{
												strcpy(l_param5,l_group_parameter_value[i]);
												strcpy(l_prev_param5,l_param5);
											}
											else
												l_group_break_flag=1;
										}
										else if(!strcmp(l_group_pos_value[i],"6"))
										{
											fprintf(fl_userlog,"l_param6:|%s|l_prev_param6:|%s|\n",l_param6,l_prev_param6);
											
											if(!strcmp(l_param6,l_prev_param6))
											{
												strcpy(l_param6,l_group_parameter_value[i]);
												strcpy(l_prev_param6,l_param6);
											}
											else
												l_group_break_flag=1;
										}
									}
								}
								else
								{
									fprintf(fl_userlog,"Error: Mismatch in Group Parameters :|%d||%d|",l_group_pos_no,l_group_parameter_no);
									break;
								}
								
					

					/****************************************************************************/

					/********************* Record Count Query Part *****************************/
								
								EXEC SQL SELECT COUNT(TABLE_ID) INTO :l_table_numbers 
										 FROM REPORT_DETAILS
										 WHERE REPORT_ID=:l_rept_id;
								
								fprintf(fl_userlog,"AFTER COUNT(TABLE_ID) -- ORA Error 896:|%d|\n",sqlca.sqlcode);

								fprintf(fl_userlog,"l_table_numbers 896:|%d|\n",l_table_numbers);

								l_table_num = 1 ;

								l_record_count_flag = 0;

								l_record_count = 0;

								while(l_table_num <= l_table_numbers)
								{
									EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
														RECORD_COUNT_QUERY,'@PARAM1',:l_param1),
																		   '@PARAM2',:l_param2),
																		   '@PARAM3',:l_param3),
																		   '@PARAM4',:l_param4),
																		   '@PARAM5',:l_param5),
																		   '@PARAM6',:l_param6),
												REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
														RECORD_COUNT_QUERY1,'@PARAM1',:l_param1),
																		   '@PARAM2',:l_param2),
																		   '@PARAM3',:l_param3),
																		   '@PARAM4',:l_param4),
																		   '@PARAM5',:l_param5),
																		   '@PARAM6',:l_param6)
									  INTO :l_record_count_query,:l_record_count_query1
									  FROM REPORT_DETAILS 
									  WHERE REPORT_ID=:l_rept_id 
									  AND TABLE_ID = :l_table_num;

										fprintf(fl_userlog,"AFTER RECORD_COUNT_QUERY Select -- ORA Error :|%d|\n",sqlca.sqlcode);

									strcpy(l_record_count_query_final,l_record_count_query);
									strcat(l_record_count_query_final,l_record_count_query1);
									strcat(l_record_count_query_final,APL_NULL_STRING);

									fprintf(fl_userlog,"l_record_count_query_final :|%s|\n",l_record_count_query_final);

									if(strlen(l_record_count_query_final) > 0)
									{
										EXEC SQL PREPARE HTML1_RECORD_COUNT FROM :l_record_count_query_final;

										EXEC SQL DECLARE html1_record_count_curr_g CURSOR FOR HTML1_RECORD_COUNT;

										EXEC SQL OPEN  html1_record_count_curr_g;

										if(sqlca.sqlcode < 0)
										{
											fprintf(fl_userlog,"Error : Failed To OPEN html1_record_count_curr_g CURSOR -- ORA Error :|%d|\n",sqlca.sqlcode);
											l_record_count_flag = 0;
										}

										EXEC SQL FETCH html1_record_count_curr_g INTO :l_record_count;

										if(sqlca.sqlcode < 0)
										{
											fprintf(fl_userlog,"Error : Failed To FETCH html1_record_count_curr_g CURSOR -- ORA Error :|%d|\n",sqlca.sqlcode);
											l_record_count_flag = 0;
										}

										EXEC SQL CLOSE html1_record_count_curr_g;
									}


									fprintf(fl_userlog,"l_record_count :|%d|\n",l_record_count);
									if(l_record_count > 0)
										l_record_count_flag = 1;

									l_table_num ++;

								}

						 
							fprintf(fl_userlog,"RECORD COUNT FLAG :|%d|\n",l_record_count_flag);
							printf("RECORD COUNT FLAG :|%d|\n",l_record_count_flag);

						   /***********************************************************************************/

					if((l_record_count_flag == 1)||(strlen(l_record_count_query_final) == 0))
					{
						
						fprintf(fl_userlog,"l_param1:|%s|\n",l_param1);
						fprintf(fl_userlog,"l_param2:|%s|\n",l_param2);
						fprintf(fl_userlog,"l_param3:|%s|\n",l_param3);
						fprintf(fl_userlog,"l_param4:|%s|\n",l_param4);
						fprintf(fl_userlog,"l_param5:|%s|\n",l_param5);
						fprintf(fl_userlog,"l_param6:|%s|\n",l_param6);


					/**** Stored procedure for REPORT DETAILS GROUPING **************************/
					
					fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID :|%s|\n",l_rept_id);
					printf("Calling Stored Procedure SP_REPORT_DETAIL for Report ID :|%s|\n",l_rept_id);
					
					EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
							:l_param2,:l_param3,:l_param4,
							:l_param5,:l_param6,
							:l_table_query,:l_table_query1,:l_table_query2,
							:l_table_query3,:l_table_query4,:l_table_query5,
							:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
							:l_group_desc,:l_error_desc);

					strcpy(table_query,l_table_query);
					strcat(table_query," ");
					
					if(strlen(l_table_query1) > 0)
					{
						strcat(table_query,l_table_query1);
						strcat(table_query," ");
					}
					if(strlen(l_table_query2) > 0)
					{
						strcat(table_query,l_table_query2);
						strcat(table_query," ");
					}
					if(strlen(l_table_query3) > 0)
					{
						strcat(table_query,l_table_query3);
						strcat(table_query," ");
					}
					if(strlen(l_table_query4) > 0)
					{
						strcat(table_query,l_table_query4);
						strcat(table_query," ");
					}
					if(strlen(l_table_query5) > 0)
					{
						strcat(table_query,l_table_query5);
						strcat(table_query," ");
					}
					
					strcat(table_query,APL_NULL_STRING);
						
					fprintf(fl_userlog,"After Stored Procedure SP_REPORT_DETAIL ORA ERROR :|%d|\n",sqlca.sqlcode);
					
					if(sqlca.sqlcode < 0)
					{
						fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
					}
					
					//fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
					fprintf(fl_userlog,"l_criteria_query1:|%s|\n",l_criteria_query1);
					fprintf(fl_userlog,"l_criteria_query2:|%s|\n",l_criteria_query2);
					fprintf(fl_userlog,"l_criteria_query3:|%s|\n",l_criteria_query3);
					fprintf(fl_userlog,"l_group_desc:|%s|\n",l_group_desc);

																
								/********* Group Description ****************************/
							
							if(strlen(l_group_desc) > 0)
							{
								fprintf(l_report_HTML1,"</BR>\n");
								fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR><TD WIDTH=\'100%%\' class=\'ez4\'>%s</TD></TR></TABLE>\n",l_group_desc);
								fprintf(l_report_HTML1,"</BR>\n");
							}

							/****** Before table ************************************/

								if(strlen(h_report_details_struct.before_table_align) > 0)
							{
								if(strlen(h_report_details_struct.before_table) > 0)
								{	
									fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\"ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.before_table_align,h_report_details_struct.before_table);
								}
							}
							else
							{
								if(strlen(h_report_details_struct.before_table) > 0)
								{	
									fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\"ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.before_table);
								}

							}	
							
							l_before_table = h_report_details_struct.before_table_brk;
							while(l_before_table > 0)
							{
								fprintf(l_report_HTML1,"</BR>\n");
								l_before_table --;
							}

				/******* Column Heading *****************************************************/
				
				/****** Multiple Column Level **************************************/

				strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
				strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
				strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
				
				fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);

				if(strlen(l_multiple_col_flag) > 0)
				{
					fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
					fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);

					if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
							&l_multiple_col_header_value) == APL_FAILURE)
					{
						 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
						 APL_GOBACK_FAIL
					}

					if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
							&l_multiple_colspan_sep_value) == APL_FAILURE)
					{
						 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
						 APL_GOBACK_FAIL
					}


					fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
					fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);

					fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" border=\'%s\' cellSpacing=\'0\' cellPadding=\'1\'>\n",g_table_border);

					if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
					{
						for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
						{
							for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
							{
							
							if(int_a == int_b )
							{
							
							strcpy(l_level_header,l_multiple_col_header_value[int_a]);
							strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

							fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
							fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);

							if (CO_SplitStr(l_level_header,
									SEMISEP,
									&l_level_header_no,
									&l_level_header_value) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
								 APL_GOBACK_FAIL
							}

							if (CO_SplitStr(l_level_colspan,
									SEMISEP,
									&l_level_colspan_no,
									&l_level_colspan_value) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
								 APL_GOBACK_FAIL
							}

							fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
							fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);

							if(l_level_header_no == l_level_colspan_no)
							{

							fprintf(l_report_HTML1,"<TR>\n");
							for(int_aa=0;int_aa<l_level_header_no;int_aa++)
							{
								for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
								{
									if(int_aa == int_bb)
									{	
									
									strcpy(l_level_column,l_level_header_value[int_aa]);
									strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

									fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
									fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
									
									if(strlen(l_level_column) > 0)
										fprintf(l_report_HTML1,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >%s</TD> \n", l_level_col_span,l_level_column);
									else
										fprintf(l_report_HTML1,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >&nbsp;</TD> \n", l_level_col_span);


									}
								}
							}
							fprintf(l_report_HTML1,"</TR>\n");

							}/*** End Of Inner Condition check *****/

							}
							
													
							}/*** End Of 2st Main For Loop *******/

						}/*** End Of 1st Main For Loop *******/

					}/*** End Of Multiple col condition check *****/

					l_column_no=h_report_details_struct.no_of_columns;
					l_no_of_columns = h_report_details_struct.no_of_columns;
				}
				else
				{

				fprintf(fl_userlog,"COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
				printf("COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
				
				/**** Split the Column Header and print *****************/
				
				strcpy(l_column_header,h_report_details_struct.column_hdr);
				if (CO_SplitStr(l_column_header,COMASEP,&l_col_no,&l_col_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_header);
					 APL_GOBACK_FAIL
				}

				/***** Table Column Heading and its records  *********/
				
								
							fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");

							fprintf(l_report_HTML1,"<TR>\n");
							for(i=0;i<l_col_no;i++)
							{
								strcpy(l_column_value,l_col_value[i]);

								printf("l_column_value[%d] : |%s|\n",i,l_column_value);
								
								fprintf(l_report_HTML1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
							}
							fprintf(l_report_HTML1,"</TR>\n");

							l_column_no=h_report_details_struct.no_of_columns;
							l_no_of_columns = h_report_details_struct.no_of_columns;
							
							l_col_hdr = h_report_details_struct.col_hdr_brk;
							
							}/**** End Of Column Header Else Part ******************/
				
						EXEC SQL PREPARE HTML1_SUB1 FROM :table_query;	
							EXEC SQL DECLARE html1tablequery1_g CURSOR FOR HTML1_SUB1;
							EXEC SQL OPEN html1tablequery1_g;

							l_fetch_count=0;

							l_return_param=0;

							fprintf(fl_userlog,"Calling Procedure SP_REPORT_DATA_PROC :|%s|\n",l_rept_id);
							printf("Calling Procedure SP_REPORT_DATA_PROC :|%s|\n",l_rept_id);

							EXEC SQL CALL SP_REPORT_DATA_PROC(:l_rept_id,
															  :l_param1,:l_param2,
															  :l_param3,:l_param4,
															  :l_param5,:l_param6,
															  :l_return_param,:l_error_desc);

						   fprintf(fl_userlog,"Error : After SP_REPORT_DATA_PROC --- ORA ERROR:|%s|\n",l_error_desc);

						   fprintf(fl_userlog,"l_return_param :|%d|\n",l_return_param);


							for(;;)
							{
								EXEC SQL FETCH html1tablequery1_g
									INTO :l_table_parameter;

								if(sqlca.sqlcode == 1403)
								{
									fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
									if(l_fetch_count == 0)
									{
										fprintf(l_report_HTML1,"<TR>\n");
										fprintf(l_report_HTML1,"<TD WIDTH=\'100%%\' COLSPAN=\'%d\' class=\'ez4\'>NO RECORDS FOUND </TD>\n",l_column_no);
										fprintf(l_report_HTML1,"</TR>\n");
									}
									break;
								}

								if(sqlca.sqlcode < 0)
								{
								   fprintf(fl_userlog,"Error : Critical Error Occured in html1tablequery1_g --- ORA ERROR:|%d|\n",sqlca.sqlcode);
									break;
								}

								strcpy(l_column_parameter,l_table_parameter);

								if(l_return_param == 1)
								{
									fprintf(l_report_HTML1,"<TR>\n");

									if((strlen(l_column_parameter) > 0) && (strcmp(l_column_parameter," ")))
										fprintf(l_report_HTML1,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column_parameter);
									else
										fprintf(l_report_HTML1,"<TD class=\'record\'  >&nbsp</TD>\n");

									fprintf(l_report_HTML1,"</TR>\n");

								}
								else
								{				
									/***** Split the string and fetch the column data ******/
								
									if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
									{
										CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
										fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
										APL_GOBACK_FAIL
									}

									/***** For Number Formatting ***************************************************/

									strcpy(l_format_col_pos,h_report_details_struct.format_col_pos);
									if (CO_SplitStr(l_format_col_pos,COMASEP,&l_format_col_no,&l_format_col_val) == APL_FAILURE)
									{
										 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
										 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_format_col_pos);
										 APL_GOBACK_FAIL
									}

									fprintf(l_report_HTML1,"<TR>\n");

									for(j=0;j<l_column_num;j++)
									{
										strcpy(l_column,l_column_val[j]);
										
										l_format_col_flag = 0;
										if(l_format_col_no > 0)
										{
											for (k=0;k<l_format_col_no;k++)
											{
												strcpy(l_format_col_value,l_format_col_val[k]);

												if(j==(atoi(l_format_col_value)-1))
													l_format_col_flag = 1;
											}

											if((strlen(l_column) > 0) && (strcmp(l_column," ")))
											{
												if(l_format_col_flag == 1)
												{
													EXEC SQL CALL SP_NUMBER_FORMATTING(:l_column,:l_error_desc);

													if(strlen(l_error_desc) > 0)
														fprintf(l_report_HTML1,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
													else
														fprintf(l_report_HTML1,"<TD class=\'record\' ALIGN=\"RIGHT\">%s</TD>\n",l_column);
												}
												else
												{
													fprintf(l_report_HTML1,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
												}
											}
											else
												 fprintf(l_report_HTML1,"<TD class=\'record\'  >&nbsp</TD>\n");

										}
										else
										{
											if((strlen(l_column) > 0) && (strcmp(l_column," ")))
												fprintf(l_report_HTML1,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
											else
												fprintf(l_report_HTML1,"<TD class=\'record\'  >&nbsp</TD>\n");
										}

									}
									fprintf(l_report_HTML1,"</TR>\n");


								}/****** End Of SP_REPORT_DATA_PROC Check ****************************/


								/***********************************************************************************/


								l_fetch_count ++;

							}
							EXEC SQL CLOSE html1tablequery1_g;

							/******* For Criteria column value display **************************/
							
							if(h_report_details_struct.tot_criteria_cols > 0)
							{
								if(strlen(h_report_details_struct.criteria_col1_query) > 0)
								{
									EXEC SQL PREPARE HTML1_CR11 FROM :l_criteria_query1;
									EXEC SQL DECLARE HTML1_criteria11_g CURSOR FOR HTML1_CR11;
									EXEC SQL OPEN HTML1_criteria11_g;
									
										if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
									{
										fprintf(fl_userlog,"Error : Failed to Open HTML1_criteria11_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
									}

									for(;;)
									{
										   EXEC SQL FETCH HTML1_criteria11_g INTO :l_criteria_value1;
									
										   if(sqlca.sqlcode == 1403)
										   break;

												   if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
										   {
											fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
											break;
										   }
									}
									EXEC SQL CLOSE HTML1_criteria11_g;

									if(strcmp(l_criteria_value1,APL_NULL_STRING))
									{
									EXEC SQL SELECT (:l_criteria_value1) INTO :l_criteria1_total FROM DUAL;
									
									l_grand_total1=l_grand_total1+l_criteria1_total;
									
									fprintf(fl_userlog,"l_grand_total1 :|%lf|\n",l_grand_total1);

									EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value1,:l_error_desc);

									fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);

										fprintf(l_report_HTML1,"<TR>\n");
										fprintf(l_report_HTML1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col1_name,l_criteria_value1);
										fprintf(l_report_HTML1,"</TR>\n");
									}
								}

								if(strlen(h_report_details_struct.criteria_col2_query) > 0)
								{
									EXEC SQL PREPARE HTML1_CR22 FROM :l_criteria_query2;
									EXEC SQL DECLARE HTML1_criteria22_g CURSOR FOR HTML1_CR22;
									EXEC SQL OPEN HTML1_criteria22_g;
									
											if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
									{
										fprintf(fl_userlog,"Error : Failed to Open HTML1_criteria22_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
									}

									for(;;)
									{
										   EXEC SQL FETCH HTML1_criteria22_g INTO :l_criteria_value2;
									
										   if(sqlca.sqlcode == 1403)
										   break;

												   if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
										   {
											fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
											break;
										   }
									}
									EXEC SQL CLOSE HTML1_criteria22_g;

									
									if(strcmp(l_criteria_value2,APL_NULL_STRING))	
									{
									
										EXEC SQL SELECT (:l_criteria_value2) INTO :l_criteria2_total FROM DUAL;
										l_grand_total2=l_grand_total2+l_criteria2_total;
									
										fprintf(fl_userlog,"l_grand_total2 :|%lf|\n",l_grand_total2);

										EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value2,:l_error_desc);

										fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);

										fprintf(l_report_HTML1,"<TR>\n");
										fprintf(l_report_HTML1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col2_name,l_criteria_value2);

										fprintf(l_report_HTML1,"</TR>\n");
									}
								}

								if(strlen(h_report_details_struct.criteria_col3_query) > 0)
								{
									EXEC SQL PREPARE HTML1_CR33 FROM :l_criteria_query3;
									EXEC SQL DECLARE HTML1_criteria33_g CURSOR FOR HTML1_CR33;
									EXEC SQL OPEN HTML1_criteria33_g;
									
											if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
									{
										fprintf(fl_userlog,"Error : Failed to Open HTML1_criteria33_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
									}

									for(;;)
									{
										   EXEC SQL FETCH HTML1_criteria33_g INTO :l_criteria_value3;
									
										   if(sqlca.sqlcode == 1403)
										   break;

												   if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
										   {
											printf("Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
											break;
										   }
									}
									EXEC SQL CLOSE HTML1_criteria33_g;
													
									if(strcmp(l_criteria_value3,APL_NULL_STRING))
									{
										EXEC SQL SELECT (:l_criteria_value3) INTO :l_criteria3_total FROM DUAL;
										l_grand_total3=l_grand_total3+l_criteria3_total;
									
										fprintf(fl_userlog,"l_grand_total3 :|%lf|\n",l_grand_total3);

										EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value3,:l_error_desc);

										fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);

										fprintf(l_report_HTML1,"<TR>\n");
										fprintf(l_report_HTML1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col3_name,l_criteria_value3);
										fprintf(l_report_HTML1,"</TR>\n");
									}
								}
							}

							/******* Complex Criteria Part ***************************************/

							strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
							strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
							strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
							strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

							if(strlen(complex_criteria_query) > 0)
							{
							
							EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									:complex_criteria_query,
									'@PARAM1',:l_param1),
									'@PARAM2',:l_param2),
									'@PARAM3',:l_param3),
									'@PARAM4',:l_param4),
									'@PARAM5',:l_param5),
									'@PARAM6',:l_param6),
									REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									:complex_criteria_query1,
									'@PARAM1',:l_param1),
									'@PARAM2',:l_param2),
									'@PARAM3',:l_param3),
									'@PARAM4',:l_param4),
									'@PARAM5',:l_param5),
									'@PARAM6',:l_param6)
								INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;
							
							strcat(complex_criteria_query,complex_criteria_query1);
							
							fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);

							EXEC SQL PREPARE HTML11_CMPX_CURR FROM :complex_criteria_query;

							EXEC SQL DECLARE html11_complex_curr_g CURSOR FOR HTML11_CMPX_CURR;

							fprintf(fl_userlog,"After DECLARE html11_complex_curr_g :|%d|\n",sqlca.sqlcode);

							EXEC SQL OPEN html11_complex_curr_g;

							EXEC SQL FETCH html11_complex_curr_g INTO :l_complex_parameter;

							fprintf(fl_userlog,"After FETCH html11_complex_curr_g :|%d|\n",sqlca.sqlcode);

							EXEC SQL CLOSE html11_complex_curr_g;

							fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);

							if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
							{
								CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
								APL_GOBACK_FAIL
							}
							
							fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);

							if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
							{
								CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
								APL_GOBACK_FAIL
							}


							fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
							fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);

							l_complex_break_flag = 0;
							
							if(l_complex_num == l_complex_pos_num)
							{

							fprintf(l_report_HTML1,"<TR>\n");

							for(i=0;i<l_column_num;i++)
							{
								for(j=0;j<l_complex_pos_num;j++)
								{

								strcpy(l_complex_pos_column,l_complex_pos_val[j]);

								if((i==0)&&(j==0))
								{
									if(strlen(complex_criteria_label) > 0)
									{
										fprintf(l_report_HTML1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" >%s</TD>\n",complex_criteria_label);
										l_complex_break_flag=1;
									}
									else
									fprintf(l_report_HTML1,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
								}

								if(i== (atoi(l_complex_pos_column)-1))
								{				  
								  strcpy(l_complex_column,l_complex_val[j]);

								  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);

								  l_complex_break_flag=1;

								  if(strlen(l_complex_column) > 0)
								  {
									  EXEC SQL CALL SP_NUMBER_FORMATTING(:l_complex_column,:l_error_desc);

									  if(strlen(l_error_desc) > 0)
										fprintf(l_report_HTML1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">%s</TD>\n",l_complex_column);
									  else
										fprintf(l_report_HTML1,"<TD class=\'lableredbg\' ALIGN=\"RIGHT\">%s</TD>\n",l_complex_column);
								  }
								  else
								  {
										fprintf(l_report_HTML1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">&nbsp;</TD>\n");
								  }				  			
								
								  break;
								}
								else
								{
									 l_complex_break_flag = 0;
									 continue;
								} 

								}
									 
								if(i != 0)
								{
								  if(l_complex_break_flag != 1)
									 fprintf(l_report_HTML1,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
								}
							}

							}
							else
							{
								fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
							}

							fprintf(l_report_HTML1,"</TR>\n");

							}
							
							/*****************	End Of Complex Part     *********************/

							fprintf(l_report_HTML1,"</TABLE>\n");

						/****** After table ***************************************************/
					
							l_after_table = h_report_details_struct.after_table_brk;
							while(l_after_table > 0)
							{
								fprintf(l_report_HTML1,"</BR>\n");
								l_after_table --;
							}

							if(strlen(h_report_details_struct.after_table_align) > 0)
							{
								if(strlen(h_report_details_struct.after_table) > 0)
								{		
									fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.after_table_align,h_report_details_struct.after_table);
								}
							}
							else
							{
								if(strlen(h_report_details_struct.after_table) > 0)
								{	
									fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.after_table);
								}

							}	

				/********* Table Footer note **********************************************/

				
					l_table_footer = h_report_details_struct.table_footer_brk;
					if(l_table_footer > 0)
					{
						fprintf(l_report_HTML1,"</BR>\n");
						l_table_footer --;
					}
				
					if(strlen(h_report_details_struct.table_footer_align) > 0)
					{
						if(strlen(h_report_details_struct.table_footer) > 0)
						{
							fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",h_report_details_struct.table_footer_align,h_report_details_struct.table_footer);
						}
					}
					else
					{
						if(strlen(h_report_details_struct.table_footer) > 0)
						{
							fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",h_report_details_struct.table_footer);
						}

					}

					l_table = h_report_main_struct.table_brk;
					if(l_table > 0)
					{
						fprintf(l_report_HTML1,"</BR>\n");
						l_table --;
					}
							

				if(l_fetch_count > 0 )
				{
				
				for(m=0;m<l_complex_num;m++)
				{
					if(m == 0)
					{
						strcpy(l_complex_parameter1,l_complex_val[m]);
						g_complex_parameter1=g_complex_parameter1+atof(l_complex_parameter1);
					}
					else if(m == 1)
					{
						strcpy(l_complex_parameter2,l_complex_val[m]);
						g_complex_parameter2=g_complex_parameter2+atof(l_complex_parameter2);
					}
					else if(m == 2)
					{
						strcpy(l_complex_parameter3,l_complex_val[m]);
						g_complex_parameter3=g_complex_parameter3+atof(l_complex_parameter3);
					}
					else if(m == 3)
					{
						strcpy(l_complex_parameter4,l_complex_val[m]);
						g_complex_parameter4=g_complex_parameter4+atof(l_complex_parameter4);
					}
					else if(m == 4)
					{
						strcpy(l_complex_parameter5,l_complex_val[m]);
						g_complex_parameter5=g_complex_parameter5+atof(l_complex_parameter5);
					}
					else if(m == 5)
					{
						strcpy(l_complex_parameter6,l_complex_val[m]);
						g_complex_parameter6=g_complex_parameter6+atof(l_complex_parameter6);
					}
					else if(m == 6)
					{
						strcpy(l_complex_parameter7,l_complex_val[m]);
						g_complex_parameter7=g_complex_parameter7+atof(l_complex_parameter7);
					}
					else if(m == 7)
					{
						strcpy(l_complex_parameter8,l_complex_val[m]);
						g_complex_parameter8=g_complex_parameter8+atof(l_complex_parameter8);
					}
					else if(m == 8)
					{
						strcpy(l_complex_parameter9,l_complex_val[m]);
						g_complex_parameter9=g_complex_parameter9+atof(l_complex_parameter9);
					}
					else if(m == 9)
					{
							strcpy(l_complex_parameter10,l_complex_val[m]);
							g_complex_parameter10=g_complex_parameter10+atof(l_complex_parameter10);
					}
					else if(m == 10)
					{
						strcpy(l_complex_parameter11,l_complex_val[m]);
						g_complex_parameter11=g_complex_parameter11+atof(l_complex_parameter11);
					}
					else if(m == 11)
					{
						strcpy(l_complex_parameter12,l_complex_val[m]);			
						g_complex_parameter12=g_complex_parameter12+atof(l_complex_parameter12);
					}
					else if(m == 12)
					{
						strcpy(l_complex_parameter13,l_complex_val[m]);
						g_complex_parameter13=g_complex_parameter13+atof(l_complex_parameter13);
					}
					else if(m == 13)
					{
						strcpy(l_complex_parameter14,l_complex_val[m]);
						g_complex_parameter14=g_complex_parameter14+atof(l_complex_parameter14);
					}
					else if(m == 14)
					{
						strcpy(l_complex_parameter15,l_complex_val[m]);
						g_complex_parameter15=g_complex_parameter15+atof(l_complex_parameter15);
					}
						else if(m == 15)
						{
							strcpy(l_complex_parameter16,l_complex_val[m]);
							g_complex_parameter16=g_complex_parameter16+atof(l_complex_parameter16);
						}
						else if(m == 16)
						{
							strcpy(l_complex_parameter17,l_complex_val[m]);
							g_complex_parameter17=g_complex_parameter17+atof(l_complex_parameter17);
						}
						else if(m == 17)
						{
							strcpy(l_complex_parameter18,l_complex_val[m]);
							g_complex_parameter18=g_complex_parameter18+atof(l_complex_parameter18);
						}
						else if(m == 18)
						{
							strcpy(l_complex_parameter19,l_complex_val[m]);
							g_complex_parameter19=g_complex_parameter19+atof(l_complex_parameter19);
						}
						else if(m == 19)
						{
							strcpy(l_complex_parameter20,l_complex_val[m]);
							g_complex_parameter20=g_complex_parameter20+atof(l_complex_parameter20);
						}
					}

					}/*** End Of Fetch Count check ******/

					}/*** End Of Record Count check Part ***********/

		}
		else
		{
						
						/**** Stored procedure for REPORT DETAILS *************************************/
							
						fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID :|%s|\n",l_rept_id);
						printf("Calling Stored Procedure SP_REPORT_DETAIL for Report ID :|%s|\n",l_rept_id);
						
						EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
								:l_param2,:l_param3,:l_param4,
								:l_param5,:l_param6,
								:l_table_query,:l_table_query1,:l_table_query2,
								:l_table_query3,:l_table_query4,:l_table_query5,
								:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
								:l_group_desc,:l_error_desc);

						strcpy(table_query,l_table_query);
						strcat(table_query," ");
						
						if(strlen(l_table_query1) > 0)
						{
							strcat(table_query,l_table_query1);
							strcat(table_query," ");
						}
						if(strlen(l_table_query2) > 0)
						{
							strcat(table_query,l_table_query2);
							strcat(table_query," ");
						}
						if(strlen(l_table_query3) > 0)
						{
							strcat(table_query,l_table_query3);
							strcat(table_query," ");
						}
						if(strlen(l_table_query4) > 0)
						{
							strcat(table_query,l_table_query4);
							strcat(table_query," ");
						}
						if(strlen(l_table_query5) > 0)
						{
							strcat(table_query,l_table_query5);
							strcat(table_query," ");
						}
						
						strcat(table_query,APL_NULL_STRING);
							
						if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
						{
							fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
						}
						
						//fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
						fprintf(fl_userlog,"l_criteria_query1:|%s|\n",l_criteria_query1);
						fprintf(fl_userlog,"l_criteria_query2:|%s|\n",l_criteria_query2);
						fprintf(fl_userlog,"l_criteria_query3:|%s|\n",l_criteria_query3);
						
						/****** Before table *************************************************************/
						
						if(strlen(h_report_details_struct.before_table_align) > 0)
						{
							if(strlen(h_report_details_struct.before_table) > 0)
							{	
								fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\"ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.before_table_align,h_report_details_struct.before_table);
							}
						}
						else
						{
							if(strlen(h_report_details_struct.before_table) > 0)
							{	
								fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\"ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.before_table);
							}

						}	
						
						l_before_table = h_report_details_struct.before_table_brk;
						while(l_before_table > 0)
						{
							fprintf(l_report_HTML1,"</BR>\n");
							l_before_table --;
						}

						/******* Column Heading *********************************************************/
						
						/****** Multiple Column Level **************************************/

						strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
						strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
						strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
						
						fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);

						if(strlen(l_multiple_col_flag) > 0)
						{
							fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
							fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);

							if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
									&l_multiple_col_header_value) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
								 APL_GOBACK_FAIL
							}

							if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
									&l_multiple_colspan_sep_value) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
								 APL_GOBACK_FAIL
							}


							fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
							fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);

							fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" border=\'%s\' cellSpacing=\'0\' cellPadding=\'1\' >\n",g_table_border);

							if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
							{
								for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
								{
									for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
									{

									if(int_a == int_b )
									{
									
									strcpy(l_level_header,l_multiple_col_header_value[int_a]);
									strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

									fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
									fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);

									if (CO_SplitStr(l_level_header,
											SEMISEP,
											&l_level_header_no,
											&l_level_header_value) == APL_FAILURE)
									{
										 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
										 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
										 APL_GOBACK_FAIL
									}

									if (CO_SplitStr(l_level_colspan,
											SEMISEP,
											&l_level_colspan_no,
											&l_level_colspan_value) == APL_FAILURE)
									{
										 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
										 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
										 APL_GOBACK_FAIL
									}

									fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
									fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);

									if(l_level_header_no == l_level_colspan_no)
									{

									fprintf(l_report_HTML1,"<TR>\n");
									for(int_aa=0;int_aa<l_level_header_no;int_aa++)
									{
										for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
										{
											if(int_aa == int_bb)
											{	
											
											strcpy(l_level_column,l_level_header_value[int_aa]);
											strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

											fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
											fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
											
											if(strlen(l_level_column) > 0)
												fprintf(l_report_HTML1,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >%s</TD> \n", l_level_col_span,l_level_column);
											else
												fprintf(l_report_HTML1,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >&nbsp;</TD> \n", l_level_col_span);


											}
										}
									}
									fprintf(l_report_HTML1,"</TR>\n");

									}/*** End Of Inner Condition check *****/

									}					
															
									}/*** End Of 2st Main For Loop *******/

								}/*** End Of 1st Main For Loop *******/

							}/*** End Of Multiple col condition check *****/

							l_column_no=h_report_details_struct.no_of_columns;
							l_no_of_columns = h_report_details_struct.no_of_columns;
						}
						else
						{

						
						/**** Split the Column Header and print *****************/
						
						strcpy(l_column_header,h_report_details_struct.column_hdr);
						if (CO_SplitStr(l_column_header,COMASEP,&l_col_no,&l_col_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_header);
							 APL_GOBACK_FAIL
						}

						/***** Table Column Heading and its records  *********/
						
						fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" border=\'%s\' cellSpacing=\'0\' cellPadding=\'1\' >\n",g_table_border);

						fprintf(l_report_HTML1,"<TR>\n");
						for(i=0;i<l_col_no;i++)
						{
							strcpy(l_column_value,l_col_value[i]);

							fprintf(l_report_HTML1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
						}
						fprintf(l_report_HTML1,"</TR>\n");

						l_column_no=h_report_details_struct.no_of_columns;
						l_no_of_columns = h_report_details_struct.no_of_columns;
						
						l_col_hdr = h_report_details_struct.col_hdr_brk;
						
						}/*** End Of Column Header Else Part ******/

						EXEC SQL PREPARE HTML1_SUB FROM :table_query;	
						EXEC SQL DECLARE HTML1tablequery_g CURSOR FOR HTML1_SUB;
						EXEC SQL OPEN HTML1tablequery_g;

						l_fetch_count=0;

						l_return_param=0;

						fprintf(fl_userlog,"Entering SP_REPORT_DATA_PROC :|%s|\n",l_rept_id);
						printf("Entering SP_REPORT_DATA_PROC :|%s|\n",l_rept_id);

						EXEC SQL CALL SP_REPORT_DATA_PROC(:l_rept_id,
														  :l_param1,:l_param2,
														  :l_param3,:l_param4,
														  :l_param5,:l_param6,
														  :l_return_param,:l_error_desc);

					   fprintf(fl_userlog,"Error : After SP_REPORT_DATA_PROC --- ORA ERROR:|%s|\n",l_error_desc);

					   fprintf(fl_userlog,"l_return_param :|%d|\n",l_return_param);

						for(;;)
						{
							EXEC SQL FETCH HTML1tablequery_g
								INTO :l_table_parameter;

							 if(sqlca.sqlcode == 1403)
							 {
								fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
								if(l_fetch_count == 0)
								{
								   fprintf(l_report_HTML1,"<TR>\n");
								   fprintf(l_report_HTML1,"<TD WIDTH=\'100%%\' COLSPAN=\'%d\' class=\'ez4\'>NO RECORDS FOUND </TD>\n",l_column_no);
								   fprintf(l_report_HTML1,"</TR>\n");
								}
								break;
							 }

							 if(sqlca.sqlcode < 0)
							 {
								fprintf(fl_userlog,"Error :Critical Error Occured HTML1tablequery_g --- ORA ERROR:|%d|\n",sqlca.sqlcode);
								break;
							 }

							strcpy(l_column_parameter,l_table_parameter);


							if(l_return_param == 1)
							{
								fprintf(l_report_HTML1,"<TR>\n");

								if((strlen(l_column_parameter) > 0) && (strcmp(l_column_parameter," ")))
									fprintf(l_report_HTML1,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column_parameter);
								else
									fprintf(l_report_HTML1,"<TD class=\'record\'  >&nbsp</TD>\n");

								fprintf(l_report_HTML1,"</TR>\n");

							}
							else
							{				
								/**** Split the string and fetch the column data *********/
								
								if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
								{
									CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
									fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
									APL_GOBACK_FAIL
								}

								/***** For Number Formatting ***************************************************/

								strcpy(l_format_col_pos,h_report_details_struct.format_col_pos);
								if (CO_SplitStr(l_format_col_pos,COMASEP,&l_format_col_no,&l_format_col_val) == APL_FAILURE)
								{
									 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
									 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_format_col_pos);
									 APL_GOBACK_FAIL
								}

								fprintf(l_report_HTML1,"<TR>\n");

								for(j=0;j<l_column_num;j++)
								{
									strcpy(l_column,l_column_val[j]);
									
									l_format_col_flag = 0;
									if(l_format_col_no > 0)
									{
										for (k=0;k<l_format_col_no;k++)
										{
											strcpy(l_format_col_value,l_format_col_val[k]);

											if(j==(atoi(l_format_col_value)-1))
												l_format_col_flag = 1;
										}

										if((strlen(l_column) > 0) && (strcmp(l_column," ")))
										{
											if(l_format_col_flag == 1)
											{
												EXEC SQL CALL SP_NUMBER_FORMATTING(:l_column,:l_error_desc);

												if(strlen(l_error_desc) > 0)
													fprintf(l_report_HTML1,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
												else
													fprintf(l_report_HTML1,"<TD class=\'record\' ALIGN=\"RIGHT\">%s</TD>\n",l_column);
											}
											else
											{
												fprintf(l_report_HTML1,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
											}
										}
										else
											 fprintf(l_report_HTML1,"<TD class=\'record\'  >&nbsp</TD>\n");

									}
									else
									{
										if((strlen(l_column) > 0) && (strcmp(l_column," ")))
											fprintf(l_report_HTML1,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
										else
											fprintf(l_report_HTML1,"<TD class=\'record\'  >&nbsp</TD>\n");
									}

								}
								fprintf(l_report_HTML1,"</TR>\n");

							
							}/****** End Of SP_REPORT_DATA_PROC Check ****************************/


							/***********************************************************************************/

							l_fetch_count ++;

						}
						EXEC SQL CLOSE HTML1tablequery_g;


						/********* For Criteria column value display ************/
						
						if(h_report_details_struct.tot_criteria_cols > 0)
						{
							if(strlen(h_report_details_struct.criteria_col1_query) > 0)
							{
								EXEC SQL PREPARE HTML1_CR1 FROM :l_criteria_query1;
								EXEC SQL DECLARE HTML1criteria1_g CURSOR FOR HTML1_CR1;
								EXEC SQL OPEN HTML1criteria1_g;
								
											if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
								{
									fprintf(fl_userlog,"Error : Failed to Open HTML1criteria1_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
								}

								for(;;)
								{
								EXEC SQL FETCH HTML1criteria1_g INTO :l_criteria_value1;
							
									   if(sqlca.sqlcode == 1403)
									   break;

												   if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
									   {
											fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
											break;
									   }
								}
								EXEC SQL CLOSE HTML1criteria1_g;
								
								/****** For Grand Total Of Criteria Value *********/
										
								if(strcmp(l_criteria_value1,APL_NULL_STRING))
								{
									EXEC SQL SELECT (:l_criteria_value1) INTO :l_criteria1_total FROM DUAL;
									
									l_grand_total1=l_grand_total1+l_criteria1_total;
									
									fprintf(fl_userlog,"l_grand_total1 :|%lf|\n",l_grand_total1);

									fprintf(l_report_HTML1,"<TR>\n");
									fprintf(l_report_HTML1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col1_name,l_criteria_value1);
									fprintf(l_report_HTML1,"</TR>\n");
								}
							}

							if(strlen(h_report_details_struct.criteria_col2_query) > 0)
							{
								EXEC SQL PREPARE HTML1_CR2 FROM :l_criteria_query2;
								EXEC SQL DECLARE HTML1criteria2_g CURSOR FOR HTML1_CR2;
								EXEC SQL OPEN HTML1criteria2_g;
								
									if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
								{
									fprintf(fl_userlog,"Error : Failed to Open HTML1criteria2_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
								}

								for(;;)
								{
									   EXEC SQL FETCH HTML1criteria2_g INTO :l_criteria_value2;
							
									   if(sqlca.sqlcode == 1403)
									   break;

											   if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
									   {
											fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
											break;
									   }
								}
								EXEC SQL CLOSE HTML1criteria2_g;
						
								if(strcmp(l_criteria_value2,APL_NULL_STRING))
								{
									EXEC SQL SELECT (:l_criteria_value2) INTO :l_criteria2_total FROM DUAL;
									
									l_grand_total2=l_grand_total2+l_criteria2_total;
									
									fprintf(fl_userlog,"l_grand_total2 :|%lf|\n",l_grand_total2);

									fprintf(l_report_HTML1,"<TR>\n");
									fprintf(l_report_HTML1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col2_name,l_criteria_value2);

									fprintf(l_report_HTML1,"</TR>\n");
								}
							}

							if(strlen(h_report_details_struct.criteria_col3_query) > 0)
							{
								EXEC SQL PREPARE HTML1_CR3 FROM :l_criteria_query3;
								EXEC SQL DECLARE HTML1criteria3_g CURSOR FOR HTML1_CR3;
								EXEC SQL OPEN HTML1criteria3_g;
								
									if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
								{
									fprintf(fl_userlog,"Error : Failed to Open HTML1criteria3_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
								}

								for(;;)
								{
									   EXEC SQL FETCH HTML1criteria3_g INTO :l_criteria_value3;
								
									   if(sqlca.sqlcode == 1403)
									   break;

											   if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
									   {
											fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
											break;
									   }
								}
								EXEC SQL CLOSE HTML1criteria3_g;
									
									
								if(strcmp(l_criteria_value3,APL_NULL_STRING))
								{
									EXEC SQL SELECT (:l_criteria_value3) INTO :l_criteria3_total FROM DUAL;
									
									l_grand_total3=l_grand_total3+l_criteria3_total;
									
									fprintf(fl_userlog,"l_grand_total3 :|%lf|\n",l_grand_total3);

									fprintf(l_report_HTML1,"<TR>\n");

									fprintf(l_report_HTML1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col3_name,l_criteria_value3);

									fprintf(l_report_HTML1,"</TR>\n");
								}
							}
						}

						/******* Complex Criteria Part ***************************************/

						strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
						strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
						strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
						strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

						if(strlen(complex_criteria_query) > 0)
						{
						
						EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								:complex_criteria_query,
								'@PARAM1',:l_param1),
								'@PARAM2',:l_param2),
								'@PARAM3',:l_param3),
								'@PARAM4',:l_param4),
								'@PARAM5',:l_param5),
								'@PARAM6',:l_param6),
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								:complex_criteria_query1,
								'@PARAM1',:l_param1),
								'@PARAM2',:l_param2),
								'@PARAM3',:l_param3),
								'@PARAM4',:l_param4),
								'@PARAM5',:l_param5),
								'@PARAM6',:l_param6)
							INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;
						
						strcat(complex_criteria_query,complex_criteria_query1);
						
						fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);

						EXEC SQL PREPARE HTML12_CMPX_CURR FROM :complex_criteria_query;

						EXEC SQL DECLARE html12_complex_curr_g CURSOR FOR HTML12_CMPX_CURR;

						fprintf(fl_userlog,"After DECLARE html12_complex_curr_g :|%d|\n",sqlca.sqlcode);

						EXEC SQL OPEN html12_complex_curr_g;

						EXEC SQL FETCH html12_complex_curr_g INTO :l_complex_parameter;

						fprintf(fl_userlog,"After FETCH html12_complex_curr_g :|%d|\n",sqlca.sqlcode);

						EXEC SQL CLOSE html12_complex_curr_g;

						fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);

						if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
						{
							CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
							APL_GOBACK_FAIL
						}
						
						fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);

						if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
						{
							CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
							APL_GOBACK_FAIL
						}


						fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
						fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);

						l_complex_break_flag = 0;
						
						if(l_complex_num == l_complex_pos_num)
						{

						fprintf(l_report_HTML1,"<TR>\n");

						for(i=0;i<l_column_num;i++)
						{
							for(j=0;j<l_complex_pos_num;j++)
							{

							strcpy(l_complex_pos_column,l_complex_pos_val[j]);

							if((i==0)&&(j==0))
							{
								if(strlen(complex_criteria_label) > 0)
								{
									fprintf(l_report_HTML1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" >%s</TD>\n",complex_criteria_label);
									l_complex_break_flag=1;
								}
								else
								fprintf(l_report_HTML1,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
							}

							if(i== (atoi(l_complex_pos_column)-1))
							{				  
							  strcpy(l_complex_column,l_complex_val[j]);

							  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);

							  l_complex_break_flag=1;
										
							  if(strlen(l_complex_column) > 0)
							  {
								  EXEC SQL CALL SP_NUMBER_FORMATTING(:l_complex_column,:l_error_desc);

								  if(strlen(l_error_desc) > 0)
									fprintf(l_report_HTML1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">%s</TD>\n",l_complex_column);
								  else
									fprintf(l_report_HTML1,"<TD class=\'lableredbg\' ALIGN=\"RIGHT\">%s</TD>\n",l_complex_column);
							  }
							  else
							  {
									fprintf(l_report_HTML1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">&nbsp;</TD>\n");
							  }		
							
							  break;
							}
							else
							{
								 l_complex_break_flag = 0;
								 continue;
							} 

							}
								 
							if(i != 0)
							{
							  if(l_complex_break_flag != 1)
								 fprintf(l_report_HTML1,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
							}
						}

						}
						else
						{
							fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
						}

						fprintf(l_report_HTML1,"</TR>\n");

						}
						
						/*****************	End Of Complex Part     *********************/

						fprintf(l_report_HTML1,"</TABLE>\n");
				  
						/****** After table ****************************************/
						
						l_after_table = h_report_details_struct.after_table_brk;
						while(l_after_table > 0)
						{
							fprintf(l_report_HTML1,"</BR>\n");
							l_after_table --;
						}

						if(strlen(h_report_details_struct.after_table_align) > 0)
						{
							if(strlen(h_report_details_struct.after_table) > 0)
							{	
								fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.after_table_align,h_report_details_struct.after_table);
							}
						}
						else
						{
							if(strlen(h_report_details_struct.after_table) > 0)
							{	
								fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.after_table);
							}

						}	
				  
						/********** Table Footer note ******************************/
					
						l_table_footer = h_report_details_struct.table_footer_brk;
						if(l_table_footer > 0)
						{
							fprintf(l_report_HTML1,"</BR>\n");
							l_table_footer --;
						}
						
						if(strlen(h_report_details_struct.table_footer_align) > 0)
						{
							if(strlen(h_report_details_struct.table_footer) > 0)
							{
								fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",h_report_details_struct.table_footer_align,h_report_details_struct.table_footer);
							}
						}
						else
						{
							if(strlen(h_report_details_struct.table_footer) > 0)
							{
								fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",h_report_details_struct.table_footer);
							}

						}

						l_table = h_report_main_struct.table_brk;
						if(l_table > 0)
						{
							fprintf(l_report_HTML1,"</BR>\n");
							l_table --;
						}


						if( l_fetch_count > 0 )
						{
							for(m=0;m<l_complex_num;m++)
							{
								if(m == 0)
								{
									strcpy(l_complex_parameter1,l_complex_val[m]);
									g_complex_parameter1=atof(l_complex_parameter1);
								}
								else if(m == 1)
								{
									strcpy(l_complex_parameter2,l_complex_val[m]);
									g_complex_parameter2=atof(l_complex_parameter2);
								}
								else if(m == 2)
								{
									strcpy(l_complex_parameter3,l_complex_val[m]);
									g_complex_parameter3=atof(l_complex_parameter3);
								}
								else if(m == 3)
								{
									strcpy(l_complex_parameter4,l_complex_val[m]);
									g_complex_parameter4=atof(l_complex_parameter4);
								}
								else if(m == 4)
								{
									strcpy(l_complex_parameter5,l_complex_val[m]);
									g_complex_parameter5=atof(l_complex_parameter5);
								}
								else if(m == 5)
								{
									strcpy(l_complex_parameter6,l_complex_val[m]);
									g_complex_parameter6=atof(l_complex_parameter6);
								}
								else if(m == 6)
								{
									strcpy(l_complex_parameter7,l_complex_val[m]);
									g_complex_parameter7=atof(l_complex_parameter7);
								}
								else if(m == 7)
								{
									strcpy(l_complex_parameter8,l_complex_val[m]);
									g_complex_parameter8=atof(l_complex_parameter8);
								}
								else if(m == 8)
								{
									strcpy(l_complex_parameter9,l_complex_val[m]);
									g_complex_parameter9=atof(l_complex_parameter9);
								}
								else if(m == 9)
								{
									strcpy(l_complex_parameter10,l_complex_val[m]);
									g_complex_parameter10=atof(l_complex_parameter10);
								}
								else if(m == 10)
								{
									strcpy(l_complex_parameter11,l_complex_val[m]);
									g_complex_parameter11=atof(l_complex_parameter11);
								}
								else if(m == 11)
								{
									strcpy(l_complex_parameter12,l_complex_val[m]);			
									g_complex_parameter12=atof(l_complex_parameter12);
								}
								else if(m == 12)
								{
									strcpy(l_complex_parameter13,l_complex_val[m]);
									g_complex_parameter13=atof(l_complex_parameter13);
								}
								else if(m == 13)
								{
									strcpy(l_complex_parameter14,l_complex_val[m]);
									g_complex_parameter14=atof(l_complex_parameter14);
								}
								else if(m == 14)
								{
									strcpy(l_complex_parameter15,l_complex_val[m]);
									g_complex_parameter15=atof(l_complex_parameter15);
								}
								else if(m == 15)
								{
									strcpy(l_complex_parameter16,l_complex_val[m]);
									g_complex_parameter16=atof(l_complex_parameter16);
								}
								else if(m == 16)
								{
									strcpy(l_complex_parameter17,l_complex_val[m]);
									g_complex_parameter17=atof(l_complex_parameter17);
								}
								else if(m == 17)
								{
									strcpy(l_complex_parameter18,l_complex_val[m]);
									g_complex_parameter18=atof(l_complex_parameter18);
								}
								else if(m == 18)
								{
									strcpy(l_complex_parameter19,l_complex_val[m]);
									g_complex_parameter19=atof(l_complex_parameter19);
								}
								else if(m == 19)
								{
									strcpy(l_complex_parameter20,l_complex_val[m]);
									g_complex_parameter20=atof(l_complex_parameter20);
								}

							}/*** End of Complex For Loop ***/

						}/*** End Of Fetch Count Check ****/

			}/******* End Of Else Block **********/



	/*************** Complex Criteria Individual  *********************/
				
				if(l_fetch_count > 0 )
				{
					fprintf(fl_userlog,"g_complex_parameter1 :|%lf|\tg_complex_parameter2 :|%lf|\n",g_complex_parameter1,g_complex_parameter2);
					fprintf(fl_userlog,"g_complex_parameter3 :|%lf|\tg_complex_parameter4 :|%lf|\n",g_complex_parameter3,g_complex_parameter4);
					fprintf(fl_userlog,"g_complex_parameter5 :|%lf|\tg_complex_parameter6 :|%lf|\n",g_complex_parameter5,g_complex_parameter6);
					fprintf(fl_userlog,"g_complex_parameter7 :|%lf|\tg_complex_parameter8 :|%lf|\n",g_complex_parameter7,g_complex_parameter8);
					fprintf(fl_userlog,"g_complex_parameter9 :|%lf|\tg_complex_parameter10 :|%lf|\n",g_complex_parameter9,g_complex_parameter10);
					fprintf(fl_userlog,"g_complex_parameter11 :|%lf|\tg_complex_parameter12 :|%lf|\n",g_complex_parameter11,g_complex_parameter12);
					fprintf(fl_userlog,"g_complex_parameter13 :|%lf|\tg_complex_parameter14 :|%lf|\n",g_complex_parameter13,g_complex_parameter14);
					fprintf(fl_userlog,"g_complex_parameter15 :|%lf|\tg_complex_parameter16 :|%lf|\n",g_complex_parameter15,g_complex_parameter16);
					fprintf(fl_userlog,"g_complex_parameter17 :|%lf|\tg_complex_parameter18 :|%lf|\n",g_complex_parameter17,g_complex_parameter18);
					fprintf(fl_userlog,"g_complex_parameter19 :|%lf|\tg_complex_parameter20 :|%lf|\n",g_complex_parameter19,g_complex_parameter20);
				}


				/*******************************************************************/


										/********* Dynamic Footer Display ****************************************/

						strcpy(footer_query,h_report_details_struct.footer_query);
						
						if(strlen(footer_query) > 0)
						{

						/**** Stored Procedure : SP_REPORT_FOOTER ***********************************/

						fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
						printf("Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
						
						EXEC SQL CALL SP_REPORT_FOOTER(:l_rept_id,:l_table_id,:l_param1,:l_param2,
									:l_param3,:l_param4, :l_param5,
									:l_param6,:l_footer_query,:l_footer_query1,:l_error_desc); 

						strcat(l_footer_query,l_footer_query1);

						if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
						{
							fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER ERR DESC :|%s|\n",l_error_desc);
						}

						fprintf(fl_userlog,"HTML1_FOOTER QUERY :|%s|\n",l_footer_query);

						strcpy(l_footer_query_value,APL_NULL_STRING);

						EXEC SQL PREPARE HTML1_FOOTER_CURR FROM :l_footer_query;

						EXEC SQL DECLARE html1_footer_curr_g CURSOR FOR HTML1_FOOTER_CURR;
						
						fprintf(fl_userlog,"After DECLARE html1_footer_curr_g :|%d|\n",sqlca.sqlcode);

						EXEC SQL OPEN html1_footer_curr_g;

						EXEC SQL FETCH html1_footer_curr_g INTO :l_footer_query_value;
						fprintf(fl_userlog,"After FETCH html1_footer_curr_g :|%d|\n",sqlca.sqlcode);

						EXEC SQL CLOSE html1_footer_curr_g;

						fprintf(fl_userlog,"l_footer_query_value :|%s|\n",l_footer_query_value);

						l_footer_num = 0;

						strcpy(l_footer1,APL_NULL_STRING);
						strcpy(l_footer2,APL_NULL_STRING);
						strcpy(l_footer3,APL_NULL_STRING);
						strcpy(l_footer4,APL_NULL_STRING);
						strcpy(l_footer5,APL_NULL_STRING);
						strcpy(l_footer6,APL_NULL_STRING);
						strcpy(l_footer7,APL_NULL_STRING);
						strcpy(l_footer8,APL_NULL_STRING);
						strcpy(l_footer9,APL_NULL_STRING);
						strcpy(l_footer10,APL_NULL_STRING);
						strcpy(l_footer11,APL_NULL_STRING);
						strcpy(l_footer12,APL_NULL_STRING);
						strcpy(l_footer13,APL_NULL_STRING);
						strcpy(l_footer14,APL_NULL_STRING);
						strcpy(l_footer15,APL_NULL_STRING);

						if(strlen(l_footer_query_value) > 0)
						{		
							if (CO_SplitStr(l_footer_query_value,CAPSEP,&l_footer_num,&l_footer_val) == APL_FAILURE)
							{
								CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_footer_query_value);
								APL_GOBACK_FAIL
							}

							fprintf(fl_userlog,"l_footer_num :|%d|\n",l_footer_num);
							if(l_footer_num > 0)
							{
								for(i=0;i<l_footer_num;i++)
								{
									if(i == 0)
									strcpy(l_footer1,l_footer_val[i]);
									else if(i == 1)
									strcpy(l_footer2,l_footer_val[i]);
									else if(i == 2)
									strcpy(l_footer3,l_footer_val[i]);
									else if(i == 3)
									strcpy(l_footer4,l_footer_val[i]);
									else if(i == 4)
									strcpy(l_footer5,l_footer_val[i]);
									else if(i == 5)
									strcpy(l_footer6,l_footer_val[i]);
									else if(i == 6)
									strcpy(l_footer7,l_footer_val[i]);
									else if(i == 7)
									strcpy(l_footer8,l_footer_val[i]);
									else if(i == 8)
									strcpy(l_footer9,l_footer_val[i]);
									else if(i == 9)
									strcpy(l_footer10,l_footer_val[i]);
									else if(i == 10)
									strcpy(l_footer11,l_footer_val[i]);
									else if(i == 11)
									strcpy(l_footer12,l_footer_val[i]);
									else if(i == 12)
									strcpy(l_footer13,l_footer_val[i]);
									else if(i == 13)
									strcpy(l_footer14,l_footer_val[i]);
									else if(i == 14)
									strcpy(l_footer15,l_footer_val[i]);
								}
							}

						}/****** End Of Footer Value Check ******************************************/

						/****** Stored Procedure : SP_REPORT_FOOTER_DATA ***********************************/

						fprintf(fl_userlog,"l_footer1 :|%s|\t l_footer2 :|%s|\n",l_footer1,l_footer2);
						fprintf(fl_userlog,"l_footer3 :|%s|\t l_footer4 :|%s|\n",l_footer3,l_footer4);
						fprintf(fl_userlog,"l_footer5 :|%s|\t l_footer6 :|%s|\n",l_footer5,l_footer6);
						fprintf(fl_userlog,"l_footer7 :|%s|\t l_footer8 :|%s|\n",l_footer7,l_footer8);
						fprintf(fl_userlog,"l_footer9 :|%s|\t l_footer10 :|%s|\n",l_footer9,l_footer10);
						fprintf(fl_userlog,"l_footer11 :|%s|\t l_footer12 :|%s|\n",l_footer11,l_footer12);
						fprintf(fl_userlog,"l_footer13 :|%s|\t l_footer14 :|%s|\n",l_footer13,l_footer14);
						fprintf(fl_userlog,"l_footer15 :|%s|\n",l_footer15);

						fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);	
						printf("Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);		
						
						EXEC SQL CALL SP_REPORT_FOOTER_DATA(:l_rept_id,:l_table_id,
										:l_footer1,:l_footer2,
										:l_footer3,:l_footer4,
										:l_footer5,:l_footer6,
										:l_footer7,:l_footer8,
										:l_footer9,:l_footer10,
										:l_footer11,:l_footer12,
										:l_footer13,:l_footer14,
										:l_footer15,
										:g_complex_parameter1,:g_complex_parameter2,
										:g_complex_parameter3,:g_complex_parameter4,
										:g_complex_parameter5,:g_complex_parameter6,
										:g_complex_parameter7,:g_complex_parameter8,
										:g_complex_parameter9,:g_complex_parameter10,
										:g_complex_parameter11,:g_complex_parameter12,
										:g_complex_parameter13,:g_complex_parameter14,
										:g_complex_parameter15,:g_complex_parameter16,
										:g_complex_parameter17,:g_complex_parameter18,
										:g_complex_parameter19,:g_complex_parameter20,
										:l_footer_data,:l_error_desc); 

						if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
						{
							fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER_DATA ERR DESC :|%s|\n",l_error_desc);
						}

						fprintf(fl_userlog,"FOOTER DATA :|%s|\n",l_footer_data);

						/************ Dynamic Formating Procedure ***************************************/
						
						fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);	
						printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
						
						EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_footer_data,:l_error_desc); 

						if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
						{
							fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
						}

						fprintf(fl_userlog,"FOOTER DATA After Formatting -- :|%s|\n",l_footer_data);


						/*******************************************************************************/

						/************ Dynamic Footer Data Display **********************************************/
						
						fprintf(fl_userlog,"strlen(l_footer_data) :|%d|\n",strlen(l_footer_data));

						if(strlen(l_footer_data) > 0)
						{
							fprintf(fl_userlog,"Displaying Footer Data --- \n");

							fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\"><TR>\n");
							fprintf(l_report_HTML1,"<TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'headerdata\'>%s</TD>\n",h_report_details_struct.footer_data_align,l_footer_data);
							fprintf(l_report_HTML1,"</TR></TABLE>\n");
						}

						l_footer_data_brk = h_report_details_struct.footer_data_brk;
						while(l_footer_data_brk > 0)
						{
							fprintf(l_report_HTML1,"</BR>\n");
							l_footer_data_brk --;
							g_line_count++;
						}

						}

						/***************** End Of Dynamic Footer Display  ***************************/

				/***************** Final Complex Criteria Calculation *************************/

				fprintf(fl_userlog,"\n--- l_table_id --- 1:|%d|\n",l_table_id);

				if(l_table_id == 1)
				{
					f_complex_parameter1=f_complex_parameter1+g_complex_parameter1;
					f_complex_parameter2=f_complex_parameter2+g_complex_parameter2;
					f_complex_parameter3=f_complex_parameter3+g_complex_parameter3;
					f_complex_parameter4=f_complex_parameter4+g_complex_parameter4;
					f_complex_parameter5=f_complex_parameter5+g_complex_parameter5;
					f_complex_parameter6=f_complex_parameter6+g_complex_parameter6;
					f_complex_parameter7=f_complex_parameter7+g_complex_parameter7;
					f_complex_parameter8=f_complex_parameter8+g_complex_parameter8;
					f_complex_parameter9=f_complex_parameter9+g_complex_parameter9;
					f_complex_parameter10=f_complex_parameter10+g_complex_parameter10;
					f_complex_parameter11=f_complex_parameter11+g_complex_parameter11;
					f_complex_parameter12=f_complex_parameter12+g_complex_parameter12;
					f_complex_parameter13=f_complex_parameter13+g_complex_parameter13;
					f_complex_parameter14=f_complex_parameter14+g_complex_parameter14;
					f_complex_parameter15=f_complex_parameter15+g_complex_parameter15;
					f_complex_parameter16=f_complex_parameter16+g_complex_parameter16;
					f_complex_parameter17=f_complex_parameter17+g_complex_parameter17;
					f_complex_parameter18=f_complex_parameter18+g_complex_parameter18;
					f_complex_parameter19=f_complex_parameter19+g_complex_parameter19;
					f_complex_parameter20=f_complex_parameter20+g_complex_parameter20;
				}


				/**********************************************************************************/
		}
	}
	EXEC SQL CLOSE html1_group_g;
   }/*added by siva.ganapathi for Enh. Log 121 on 2/20/2009 -- Ended*/
	else
	{
	while(l_table_id <= h_report_main_struct.no_of_tables)
	{

		g_complex_parameter1 = 0.0;
		g_complex_parameter2 = 0.0;
		g_complex_parameter3 = 0.0;
		g_complex_parameter4 = 0.0;
		g_complex_parameter5 = 0.0;
		g_complex_parameter6 = 0.0;
		g_complex_parameter7 = 0.0;
		g_complex_parameter8 = 0.0;
		g_complex_parameter9 = 0.0;
		g_complex_parameter10 = 0.0;
		g_complex_parameter11 = 0.0;
		g_complex_parameter12 = 0.0;
		g_complex_parameter13 = 0.0;
		g_complex_parameter14 = 0.0;
		g_complex_parameter15 = 0.0;
		g_complex_parameter16 = 0.0;
		g_complex_parameter17 = 0.0;
		g_complex_parameter18 = 0.0;
		g_complex_parameter19 = 0.0;
		g_complex_parameter20 = 0.0;

		fprintf(fl_userlog,"l_rept_id:|%s|l_table_id:|%d|\n",l_rept_id,l_table_id);
		
		/******* Fetch the REPORT DETAILS for the perticular report ID and table ID ******/
		
		EXEC SQL SELECT * INTO :h_report_details_struct
					FROM REPORT_DETAILS 
					WHERE REPORT_ID=:l_rept_id
					AND TABLE_ID=:l_table_id;
		
	   	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Failed to Access REPORT_DETAILS --- ORA ERROR :|%d|\n",sqlca.sqlcode);
		}

		/***** Table header *******************************************/

		fprintf(fl_userlog,"h_report_details_struct.table_hdr:|%s|\n",h_report_details_struct.table_hdr);
		
		if(strlen(h_report_details_struct.table_hdr_align) > 0)
		{
			if(strlen(h_report_details_struct.table_hdr) > 0)
			{
				fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" class=\'lableredbg\'><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'lableredbg\'>%s</TD><TR></TABLE>\n",h_report_details_struct.table_hdr_align,h_report_details_struct.table_hdr);
			}
		}
		else
		{
			if(strlen(h_report_details_struct.table_hdr) > 0)
			{
				fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" class=\'lableredbg\'><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'lableredbg\'>%s</TD><TR></TABLE>\n",h_report_details_struct.table_hdr);
			}
			
		}

		l_table_hdr = h_report_details_struct.table_hdr_brk;
		while(l_table_hdr > 0)
		{
			fprintf(l_report_HTML1,"</BR>\n");
			l_table_hdr --;
		}

		/*********** Grouping Condition Check ***********************/

		fprintf(fl_userlog,"h_report_details_struct.group_desc:|%s|\n",h_report_details_struct.group_desc);
		fprintf(fl_userlog,"h_report_details_struct.group_pos:|%s|\n",h_report_details_struct.group_pos);
			
		strcpy(l_group_pos,h_report_details_struct.group_pos);

		strcpy(l_group_query,h_report_details_struct.group_query);
		strcpy(l_group_desc,h_report_details_struct.group_desc);
	
		if(strlen(l_group_query) > 0)	
		{
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM1',:l_param1) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM2',:l_param2) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM3',:l_param3) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM4',:l_param4) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM5',:l_param5) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM6',:l_param6) INTO :l_group_query FROM DUAL;
			
			fprintf(fl_userlog,"GROUP QUERY :|%s|\n",l_group_query);

			EXEC SQL PREPARE HTML1_GROUP FROM :l_group_query;
			EXEC SQL DECLARE html1_group CURSOR FOR HTML1_GROUP;
			EXEC SQL OPEN html1_group;

			if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
			{
				fprintf(fl_userlog,"Error : Cursor Open html1_group ORA ERROR :|%d|\n",sqlca.sqlcode);
			}

			for(;;)
			{
				EXEC SQL FETCH html1_group
					INTO :l_group_parameter;

				if((sqlca.sqlcode == 1403)||(l_group_break_flag == 1))
					break;

			   	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Cursor Fetch html1_group ORA ERROR :|%d|\n",sqlca.sqlcode);
				}

				/******** Split Group Parameter **************************************/
			
				fprintf(fl_userlog,"l_group_pos:|%s|\n",l_group_pos);
				
				if(CO_SplitStr(l_group_pos,COMASEP,&l_group_pos_no,&l_group_pos_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 	fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_pos);
				 	APL_GOBACK_FAIL
				}
				
				fprintf(fl_userlog,"l_group_parameter:|%s|\n",l_group_parameter);
				
				if(CO_SplitStr(l_group_parameter,CAPSEP,&l_group_parameter_no,&l_group_parameter_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 	fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_parameter);
				 	APL_GOBACK_FAIL
				}

				fprintf(fl_userlog,"l_group_pos_no:|%d|l_group_parameter_no:|%d|\n",l_group_pos_no,l_group_parameter_no);
				
				if((l_group_pos_no > 0) && (l_group_parameter_no > 0)
					&& (l_group_pos_no == l_group_parameter_no))
				{	
					l_group_break_flag=0;
				
					for(i=0;i<l_group_pos_no;i++)
					{
						if(!strcmp(l_group_pos_value[i],"2"))
						{
							fprintf(fl_userlog,"l_param2:|%s|l_prev_param2:|%s|\n",l_param2,l_prev_param2);
							if(!strcmp(l_param2,l_prev_param2))
							{
								strcpy(l_param2,l_group_parameter_value[i]);
								strcpy(l_prev_param2,l_param2);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"3"))
						{
							fprintf(fl_userlog,"l_param3:|%s|l_prev_param3:|%s|\n",l_param3,l_prev_param3);
							
							if(!strcmp(l_param3,l_prev_param3))
							{
								strcpy(l_param3,l_group_parameter_value[i]);
								strcpy(l_prev_param3,l_param3);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"4"))
						{
							fprintf(fl_userlog,"l_param4:|%s|l_prev_param4:|%s|\n",l_param4,l_prev_param4);
							
							if(!strcmp(l_param4,l_prev_param4))
							{
								strcpy(l_param4,l_group_parameter_value[i]);
								strcpy(l_prev_param4,l_param4);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"5"))
						{
							fprintf(fl_userlog,"l_param5:|%s|l_prev_param5:|%s|\n",l_param5,l_prev_param5);
							
							if(!strcmp(l_param5,l_prev_param5))
							{
								strcpy(l_param5,l_group_parameter_value[i]);
								strcpy(l_prev_param5,l_param5);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"6"))
						{
							fprintf(fl_userlog,"l_param6:|%s|l_prev_param6:|%s|\n",l_param6,l_prev_param6);
							
							if(!strcmp(l_param6,l_prev_param6))
							{
								strcpy(l_param6,l_group_parameter_value[i]);
								strcpy(l_prev_param6,l_param6);
							}
							else
								l_group_break_flag=1;
						}
					}
				}
				else
				{
					fprintf(fl_userlog,"Error: Mismatch in Group Parameters :|%d||%d|",l_group_pos_no,l_group_parameter_no);
					break;
				}
				
				/*****************************************************************/


				/********************* Record Count Query Part *****************************/
				
				EXEC SQL SELECT COUNT(TABLE_ID) INTO :l_table_numbers 
						 FROM REPORT_DETAILS
						 WHERE REPORT_ID=:l_rept_id;
				
				fprintf(fl_userlog,"AFTER COUNT(TABLE_ID) -- ORA Error 895:|%d|\n",sqlca.sqlcode);

				fprintf(fl_userlog,"l_table_numbers 895:|%d|\n",l_table_numbers);

				l_table_num = 1 ;

				l_record_count_flag = 0;

				l_record_count = 0;

				while(l_table_num <= l_table_numbers)
				{
					EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
										RECORD_COUNT_QUERY,'@PARAM1',:l_param1),
														   '@PARAM2',:l_param2),
														   '@PARAM3',:l_param3),
														   '@PARAM4',:l_param4),
														   '@PARAM5',:l_param5),
														   '@PARAM6',:l_param6),
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
										RECORD_COUNT_QUERY1,'@PARAM1',:l_param1),
														   '@PARAM2',:l_param2),
														   '@PARAM3',:l_param3),
														   '@PARAM4',:l_param4),
														   '@PARAM5',:l_param5),
														   '@PARAM6',:l_param6)
					  INTO :l_record_count_query,:l_record_count_query1
					  FROM REPORT_DETAILS 
					  WHERE REPORT_ID=:l_rept_id 
					  AND TABLE_ID = :l_table_num;

						fprintf(fl_userlog,"AFTER RECORD_COUNT_QUERY Select -- ORA Error :|%d|\n",sqlca.sqlcode);

					strcpy(l_record_count_query_final,l_record_count_query);
					strcat(l_record_count_query_final,l_record_count_query1);
					strcat(l_record_count_query_final,APL_NULL_STRING);

					fprintf(fl_userlog,"l_record_count_query_final :|%s|\n",l_record_count_query_final);

					if(strlen(l_record_count_query_final) > 0)
					{
						EXEC SQL PREPARE HTML1_RECORD_COUNT FROM :l_record_count_query_final;

						EXEC SQL DECLARE html1_record_count_curr CURSOR FOR HTML1_RECORD_COUNT;

						EXEC SQL OPEN  html1_record_count_curr;

						if(sqlca.sqlcode < 0)
						{
							fprintf(fl_userlog,"Error : Failed To OPEN html1_record_count_curr CURSOR -- ORA Error :|%d|\n",sqlca.sqlcode);
							l_record_count_flag = 0;
						}

						EXEC SQL FETCH html1_record_count_curr INTO :l_record_count;

						if(sqlca.sqlcode < 0)
						{
							fprintf(fl_userlog,"Error : Failed To FETCH html1_record_count_curr CURSOR -- ORA Error :|%d|\n",sqlca.sqlcode);
							l_record_count_flag = 0;
						}

						EXEC SQL CLOSE html1_record_count_curr;
					}


					fprintf(fl_userlog,"l_record_count :|%d|\n",l_record_count);
					if(l_record_count > 0)
						l_record_count_flag = 1;

					l_table_num ++;

				}

		 
			fprintf(fl_userlog,"RECORD COUNT FLAG :|%d|\n",l_record_count_flag);
			printf("RECORD COUNT FLAG :|%d|\n",l_record_count_flag);

		   /***********************************************************************************/

			if((l_record_count_flag == 1)||(strlen(l_record_count_query_final) == 0))
			{				
				fprintf(fl_userlog,"l_param1:|%s|\n",l_param1);
				fprintf(fl_userlog,"l_param2:|%s|\n",l_param2);
				fprintf(fl_userlog,"l_param3:|%s|\n",l_param3);
				fprintf(fl_userlog,"l_param4:|%s|\n",l_param4);
				fprintf(fl_userlog,"l_param5:|%s|\n",l_param5);
				fprintf(fl_userlog,"l_param6:|%s|\n",l_param6);


			/********* Stored procedure for REPORT DETAILS GROUPING *******************/
			
			fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID :|%s|\n",l_rept_id);
			printf("Calling Stored Procedure SP_REPORT_DETAIL for Report ID :|%s|\n",l_rept_id);
			
			EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
					:l_param2,:l_param3,:l_param4,
					:l_param5,:l_param6,
					:l_table_query,:l_table_query1,:l_table_query2,
					:l_table_query3,:l_table_query4,:l_table_query5,
					:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
					:l_group_desc,:l_error_desc);

			strcpy(table_query,l_table_query);
			strcat(table_query," ");
			
			if(strlen(l_table_query1) > 0)
			{
				strcat(table_query,l_table_query1);
				strcat(table_query," ");
			}
			if(strlen(l_table_query2) > 0)
			{
				strcat(table_query,l_table_query2);
				strcat(table_query," ");
			}
			if(strlen(l_table_query3) > 0)
			{
				strcat(table_query,l_table_query3);
				strcat(table_query," ");
			}
			if(strlen(l_table_query4) > 0)
			{
				strcat(table_query,l_table_query4);
				strcat(table_query," ");
			}
			if(strlen(l_table_query5) > 0)
			{
				strcat(table_query,l_table_query5);
				strcat(table_query," ");
			}
			
			strcat(table_query,APL_NULL_STRING);
				
			fprintf(fl_userlog,"After Stored Procedure SP_REPORT_DETAIL ORA ERROR :|%d|\n",sqlca.sqlcode);
			
			if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
			{
				fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
			}
			
			//fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
			fprintf(fl_userlog,"l_criteria_query1:|%s|\n",l_criteria_query1);
			fprintf(fl_userlog,"l_criteria_query2:|%s|\n",l_criteria_query2);
			fprintf(fl_userlog,"l_criteria_query3:|%s|\n",l_criteria_query3);
			fprintf(fl_userlog,"l_group_desc:|%s|\n",l_group_desc);

			/********* Group Description ****************************/
			
			if(strlen(l_group_desc) > 0)
			{
				fprintf(l_report_HTML1,"</BR>\n");
				fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR><TD WIDTH=\'100%%\' class=\'ez4\'>%s</TD></TR></TABLE>\n",l_group_desc);
				fprintf(l_report_HTML1,"</BR>\n");
			}


			/****** Before table ************************************/
			
			if(strlen(h_report_details_struct.before_table_align) > 0)
			{
				if(strlen(h_report_details_struct.before_table) > 0)
				{	
					fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\"ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.before_table_align,h_report_details_struct.before_table);
				}
			}
			else
			{
				if(strlen(h_report_details_struct.before_table) > 0)
				{	
					fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\"ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.before_table);
				}

			}	
			
			l_before_table = h_report_details_struct.before_table_brk;
			while(l_before_table > 0)
			{
				fprintf(l_report_HTML1,"</BR>\n");
				l_before_table --;
			}

			/******* Column Heading **********************************/
			
			/****** Multiple Column Level **************************/

			strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
			strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
			strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
			
			fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);

			if(strlen(l_multiple_col_flag) > 0)
			{
				fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
				fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);

				if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
						&l_multiple_col_header_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
					 APL_GOBACK_FAIL
				}

				if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
						&l_multiple_colspan_sep_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
					 APL_GOBACK_FAIL
				}


				fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
				fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);

				fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" border=\'%s\' cellSpacing=\'0\' cellPadding=\'1\'>\n",g_table_border);

				if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
				{
					for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
					{
						for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
						{

						if(int_a == int_b )
						{
						
						strcpy(l_level_header,l_multiple_col_header_value[int_a]);
						strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

						fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
						fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);

						if (CO_SplitStr(l_level_header,
								SEMISEP,
								&l_level_header_no,
								&l_level_header_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
							 APL_GOBACK_FAIL
						}

						if (CO_SplitStr(l_level_colspan,
								SEMISEP,
								&l_level_colspan_no,
								&l_level_colspan_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
							 APL_GOBACK_FAIL
						}

						fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
						fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);

						if(l_level_header_no == l_level_colspan_no)
						{

						fprintf(l_report_HTML1,"<TR>\n");
						for(int_aa=0;int_aa<l_level_header_no;int_aa++)
						{
							for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
							{
								if(int_aa == int_bb)
								{	
								
								strcpy(l_level_column,l_level_header_value[int_aa]);
								strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

								fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
								fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
								
								if(strlen(l_level_column) > 0)
									fprintf(l_report_HTML1,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >%s</TD> \n", l_level_col_span,l_level_column);
								else
									fprintf(l_report_HTML1,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >&nbsp;</TD> \n", l_level_col_span);


								}
							}
						}
						fprintf(l_report_HTML1,"</TR>\n");

						}/*** End Of Inner Condition check *****/

						}
						
												
						}/*** End Of 2st Main For Loop *******/

					}/*** End Of 1st Main For Loop *******/

				}/*** End Of Multiple col condition check *****/

				l_column_no=h_report_details_struct.no_of_columns;
				l_no_of_columns = h_report_details_struct.no_of_columns;
			}
			else
			{

			fprintf(fl_userlog,"COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
			printf("COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
			
			/**** Split the Column Header and print *****************/
			
			strcpy(l_column_header,h_report_details_struct.column_hdr);
			if (CO_SplitStr(l_column_header,COMASEP,&l_col_no,&l_col_value) == APL_FAILURE)
			{
				 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_header);
				 APL_GOBACK_FAIL
			}

			/***** Table Column Heading and its records  *********/
			
			fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");

			fprintf(l_report_HTML1,"<TR>\n");
			for(i=0;i<l_col_no;i++)
			{
				strcpy(l_column_value,l_col_value[i]);

				printf("l_column_value[%d] : |%s|\n",i,l_column_value);
				
				fprintf(l_report_HTML1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
			}
			fprintf(l_report_HTML1,"</TR>\n");

			l_column_no=h_report_details_struct.no_of_columns;
			l_no_of_columns = h_report_details_struct.no_of_columns;
			
			l_col_hdr = h_report_details_struct.col_hdr_brk;
			
			}/**** End Of Column Header Else Part ******************/

			EXEC SQL PREPARE HTML1_SUB1 FROM :table_query;	
			EXEC SQL DECLARE html1tablequery1 CURSOR FOR HTML1_SUB1;
			EXEC SQL OPEN html1tablequery1;

			l_fetch_count=0;

			l_return_param=0;

			fprintf(fl_userlog,"Calling Procedure SP_REPORT_DATA_PROC :|%s|\n",l_rept_id);
			printf("Calling Procedure SP_REPORT_DATA_PROC :|%s|\n",l_rept_id);

			EXEC SQL CALL SP_REPORT_DATA_PROC(:l_rept_id,
											  :l_param1,:l_param2,
											  :l_param3,:l_param4,
											  :l_param5,:l_param6,
											  :l_return_param,:l_error_desc);

		   fprintf(fl_userlog,"Error : After SP_REPORT_DATA_PROC --- ORA ERROR:|%s|\n",l_error_desc);

		   fprintf(fl_userlog,"l_return_param :|%d|\n",l_return_param);


			for(;;)
			{
				EXEC SQL FETCH html1tablequery1
					INTO :l_table_parameter;

				if(sqlca.sqlcode == 1403)
				{
					fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
					if(l_fetch_count == 0)
					{
						fprintf(l_report_HTML1,"<TR>\n");
						fprintf(l_report_HTML1,"<TD WIDTH=\'100%%\' COLSPAN=\'%d\' class=\'ez4\'>NO RECORDS FOUND </TD>\n",l_column_no);
						fprintf(l_report_HTML1,"</TR>\n");
					}
					break;
				}

			   	if(sqlca.sqlcode < 0)
				{
				   fprintf(fl_userlog,"Error : Critical Error Occured in html1tablequery1 --- ORA ERROR:|%d|\n",sqlca.sqlcode);
					break;
				}

				strcpy(l_column_parameter,l_table_parameter);

				if(l_return_param == 1)
				{
					fprintf(l_report_HTML1,"<TR>\n");

					if((strlen(l_column_parameter) > 0) && (strcmp(l_column_parameter," ")))
						fprintf(l_report_HTML1,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column_parameter);
					else
						fprintf(l_report_HTML1,"<TD class=\'record\'  >&nbsp</TD>\n");

					fprintf(l_report_HTML1,"</TR>\n");

				}
				else
				{				
					/***** Split the string and fetch the column data ******/
				
					if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
					{
						CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
						APL_GOBACK_FAIL
					}

					/***** For Number Formatting ***************************************************/

					strcpy(l_format_col_pos,h_report_details_struct.format_col_pos);
					if (CO_SplitStr(l_format_col_pos,COMASEP,&l_format_col_no,&l_format_col_val) == APL_FAILURE)
					{
						 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_format_col_pos);
						 APL_GOBACK_FAIL
					}

					fprintf(l_report_HTML1,"<TR>\n");

					for(j=0;j<l_column_num;j++)
					{
						strcpy(l_column,l_column_val[j]);
						
						l_format_col_flag = 0;
						if(l_format_col_no > 0)
						{
							for (k=0;k<l_format_col_no;k++)
							{
								strcpy(l_format_col_value,l_format_col_val[k]);

								if(j==(atoi(l_format_col_value)-1))
									l_format_col_flag = 1;
							}

							if((strlen(l_column) > 0) && (strcmp(l_column," ")))
							{
								if(l_format_col_flag == 1)
								{
									EXEC SQL CALL SP_NUMBER_FORMATTING(:l_column,:l_error_desc);

									if(strlen(l_error_desc) > 0)
										fprintf(l_report_HTML1,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
									else
										fprintf(l_report_HTML1,"<TD class=\'record\' ALIGN=\"RIGHT\">%s</TD>\n",l_column);
								}
								else
								{
									fprintf(l_report_HTML1,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
								}
							}
							else
								 fprintf(l_report_HTML1,"<TD class=\'record\'  >&nbsp</TD>\n");

						}
						else
						{
							if((strlen(l_column) > 0) && (strcmp(l_column," ")))
								fprintf(l_report_HTML1,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
							else
								fprintf(l_report_HTML1,"<TD class=\'record\'  >&nbsp</TD>\n");
						}

					}
					fprintf(l_report_HTML1,"</TR>\n");


				}/****** End Of SP_REPORT_DATA_PROC Check ****************************/


				/***********************************************************************************/


				l_fetch_count ++;

			}
			EXEC SQL CLOSE html1tablequery1;

		   	/******* For Criteria column value display **************************/
			
			if(h_report_details_struct.tot_criteria_cols > 0)
			{
				if(strlen(h_report_details_struct.criteria_col1_query) > 0)
				{
					EXEC SQL PREPARE HTML1_CR11 FROM :l_criteria_query1;
					EXEC SQL DECLARE HTML1_criteria11 CURSOR FOR HTML1_CR11;
					EXEC SQL OPEN HTML1_criteria11;
					
			      		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					{
						fprintf(fl_userlog,"Error : Failed to Open HTML1_criteria11 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
					}

					for(;;)
					{
					       EXEC SQL FETCH HTML1_criteria11 INTO :l_criteria_value1;
					
					       if(sqlca.sqlcode == 1403)
					       break;

			                       if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					       {
							fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
							break;
					       }
					}
					EXEC SQL CLOSE HTML1_criteria11;

					if(strcmp(l_criteria_value1,APL_NULL_STRING))
					{
					EXEC SQL SELECT (:l_criteria_value1) INTO :l_criteria1_total FROM DUAL;
					
					l_grand_total1=l_grand_total1+l_criteria1_total;
					
					fprintf(fl_userlog,"l_grand_total1 :|%lf|\n",l_grand_total1);

					EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value1,:l_error_desc);

					fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);

						fprintf(l_report_HTML1,"<TR>\n");
						fprintf(l_report_HTML1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col1_name,l_criteria_value1);
						fprintf(l_report_HTML1,"</TR>\n");
					}
				}

				if(strlen(h_report_details_struct.criteria_col2_query) > 0)
				{
					EXEC SQL PREPARE HTML1_CR22 FROM :l_criteria_query2;
					EXEC SQL DECLARE HTML1_criteria22 CURSOR FOR HTML1_CR22;
					EXEC SQL OPEN HTML1_criteria22;
					
			                if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					{
						fprintf(fl_userlog,"Error : Failed to Open HTML1_criteria22 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
					}

					for(;;)
					{
					       EXEC SQL FETCH HTML1_criteria22 INTO :l_criteria_value2;
					
					       if(sqlca.sqlcode == 1403)
					       break;

			                       if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					       {
							fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
							break;
					       }
					}
					EXEC SQL CLOSE HTML1_criteria22;

					
					if(strcmp(l_criteria_value2,APL_NULL_STRING))	
					{
					
						EXEC SQL SELECT (:l_criteria_value2) INTO :l_criteria2_total FROM DUAL;
						l_grand_total2=l_grand_total2+l_criteria2_total;
					
						fprintf(fl_userlog,"l_grand_total2 :|%lf|\n",l_grand_total2);

						EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value2,:l_error_desc);

						fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);

						fprintf(l_report_HTML1,"<TR>\n");
						fprintf(l_report_HTML1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col2_name,l_criteria_value2);

						fprintf(l_report_HTML1,"</TR>\n");
					}
				}

				if(strlen(h_report_details_struct.criteria_col3_query) > 0)
				{
					EXEC SQL PREPARE HTML1_CR33 FROM :l_criteria_query3;
					EXEC SQL DECLARE HTML1_criteria33 CURSOR FOR HTML1_CR33;
					EXEC SQL OPEN HTML1_criteria33;
					
			                if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					{
						fprintf(fl_userlog,"Error : Failed to Open HTML1_criteria33 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
					}

					for(;;)
					{
					       EXEC SQL FETCH HTML1_criteria33 INTO :l_criteria_value3;
					
					       if(sqlca.sqlcode == 1403)
					       break;

			                       if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					       {
							printf("Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
							break;
					       }
					}
					EXEC SQL CLOSE HTML1_criteria33;
									
					if(strcmp(l_criteria_value3,APL_NULL_STRING))
					{
						EXEC SQL SELECT (:l_criteria_value3) INTO :l_criteria3_total FROM DUAL;
						l_grand_total3=l_grand_total3+l_criteria3_total;
					
						fprintf(fl_userlog,"l_grand_total3 :|%lf|\n",l_grand_total3);

						EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value3,:l_error_desc);

						fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);

						fprintf(l_report_HTML1,"<TR>\n");
						fprintf(l_report_HTML1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col3_name,l_criteria_value3);
						fprintf(l_report_HTML1,"</TR>\n");
					}
				}
			}

			/******* Complex Criteria Part ***************************************/

			strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
			strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
			strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
			strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

			if(strlen(complex_criteria_query) > 0)
			{
			
			EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
					:complex_criteria_query,
					'@PARAM1',:l_param1),
					'@PARAM2',:l_param2),
					'@PARAM3',:l_param3),
					'@PARAM4',:l_param4),
					'@PARAM5',:l_param5),
					'@PARAM6',:l_param6),
					REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
					:complex_criteria_query1,
					'@PARAM1',:l_param1),
					'@PARAM2',:l_param2),
					'@PARAM3',:l_param3),
					'@PARAM4',:l_param4),
					'@PARAM5',:l_param5),
					'@PARAM6',:l_param6)
				INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;
			
			strcat(complex_criteria_query,complex_criteria_query1);
			
			fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);

			EXEC SQL PREPARE HTML11_CMPX_CURR FROM :complex_criteria_query;

			EXEC SQL DECLARE html11_complex_curr CURSOR FOR HTML11_CMPX_CURR;

			fprintf(fl_userlog,"After DECLARE html11_complex_curr :|%d|\n",sqlca.sqlcode);

			EXEC SQL OPEN html11_complex_curr;

			EXEC SQL FETCH html11_complex_curr INTO :l_complex_parameter;

			fprintf(fl_userlog,"After FETCH html11_complex_curr :|%d|\n",sqlca.sqlcode);

			EXEC SQL CLOSE html11_complex_curr;

			fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);

			if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
				APL_GOBACK_FAIL
			}
			
			fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);

			if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
				APL_GOBACK_FAIL
			}


			fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
			fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);

			l_complex_break_flag = 0;
			
			if(l_complex_num == l_complex_pos_num)
			{

			fprintf(l_report_HTML1,"<TR>\n");

			for(i=0;i<l_column_num;i++)
			{
				for(j=0;j<l_complex_pos_num;j++)
				{

				strcpy(l_complex_pos_column,l_complex_pos_val[j]);

				if((i==0)&&(j==0))
				{
					if(strlen(complex_criteria_label) > 0)
					{
						fprintf(l_report_HTML1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" >%s</TD>\n",complex_criteria_label);
						l_complex_break_flag=1;
					}
					else
					fprintf(l_report_HTML1,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
				}

				if(i== (atoi(l_complex_pos_column)-1))
				{				  
				  strcpy(l_complex_column,l_complex_val[j]);

				  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);

				  l_complex_break_flag=1;

				  if(strlen(l_complex_column) > 0)
				  {
					  EXEC SQL CALL SP_NUMBER_FORMATTING(:l_complex_column,:l_error_desc);

					  if(strlen(l_error_desc) > 0)
						fprintf(l_report_HTML1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">%s</TD>\n",l_complex_column);
					  else
						fprintf(l_report_HTML1,"<TD class=\'lableredbg\' ALIGN=\"RIGHT\">%s</TD>\n",l_complex_column);
				  }
				  else
				  {
						fprintf(l_report_HTML1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">&nbsp;</TD>\n");
				  }				  			
				
				  break;
				}
				else
				{
				     l_complex_break_flag = 0;
				     continue;
				} 

				}
				     
				if(i != 0)
				{
				  if(l_complex_break_flag != 1)
				     fprintf(l_report_HTML1,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
				}
			}

			}
			else
			{
				fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
			}

			fprintf(l_report_HTML1,"</TR>\n");

			}
			
			/*****************	End Of Complex Part     *********************/

			fprintf(l_report_HTML1,"</TABLE>\n");

			/****** After table ***************************************************/
	
			l_after_table = h_report_details_struct.after_table_brk;
			while(l_after_table > 0)
			{
				fprintf(l_report_HTML1,"</BR>\n");
				l_after_table --;
			}

			if(strlen(h_report_details_struct.after_table_align) > 0)
			{
				if(strlen(h_report_details_struct.after_table) > 0)
				{		
					fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.after_table_align,h_report_details_struct.after_table);
				}
			}
			else
			{
				if(strlen(h_report_details_struct.after_table) > 0)
				{	
					fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.after_table);
				}

			}	
  
			/******** Table Footer note *********************************************/
	
			l_table_footer = h_report_details_struct.table_footer_brk;
			if(l_table_footer > 0)
			{
				fprintf(l_report_HTML1,"</BR>\n");
				l_table_footer --;
			}
		
			if(strlen(h_report_details_struct.table_footer_align) > 0)
			{
				if(strlen(h_report_details_struct.table_footer) > 0)
				{
					fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",h_report_details_struct.table_footer_align,h_report_details_struct.table_footer);
				}
			}
			else
			{
				if(strlen(h_report_details_struct.table_footer) > 0)
				{
					fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",h_report_details_struct.table_footer);
				}

			}

			l_table = h_report_main_struct.table_brk;
			if(l_table > 0)
			{
				fprintf(l_report_HTML1,"</BR>\n");
				l_table --;
			}
			
			if(l_fetch_count > 0 )
			{
			
			for(m=0;m<l_complex_num;m++)
			{
				if(m == 0)
				{
					strcpy(l_complex_parameter1,l_complex_val[m]);
					g_complex_parameter1=g_complex_parameter1+atof(l_complex_parameter1);
				}
				else if(m == 1)
				{
					strcpy(l_complex_parameter2,l_complex_val[m]);
					g_complex_parameter2=g_complex_parameter2+atof(l_complex_parameter2);
				}
				else if(m == 2)
				{
					strcpy(l_complex_parameter3,l_complex_val[m]);
					g_complex_parameter3=g_complex_parameter3+atof(l_complex_parameter3);
				}
				else if(m == 3)
				{
					strcpy(l_complex_parameter4,l_complex_val[m]);
					g_complex_parameter4=g_complex_parameter4+atof(l_complex_parameter4);
				}
				else if(m == 4)
				{
					strcpy(l_complex_parameter5,l_complex_val[m]);
					g_complex_parameter5=g_complex_parameter5+atof(l_complex_parameter5);
				}
				else if(m == 5)
				{
					strcpy(l_complex_parameter6,l_complex_val[m]);
					g_complex_parameter6=g_complex_parameter6+atof(l_complex_parameter6);
				}
				else if(m == 6)
				{
					strcpy(l_complex_parameter7,l_complex_val[m]);
					g_complex_parameter7=g_complex_parameter7+atof(l_complex_parameter7);
				}
				else if(m == 7)
				{
					strcpy(l_complex_parameter8,l_complex_val[m]);
					g_complex_parameter8=g_complex_parameter8+atof(l_complex_parameter8);
				}
				else if(m == 8)
				{
					strcpy(l_complex_parameter9,l_complex_val[m]);
					g_complex_parameter9=g_complex_parameter9+atof(l_complex_parameter9);
				}
				else if(m == 9)
				{
				        strcpy(l_complex_parameter10,l_complex_val[m]);
				        g_complex_parameter10=g_complex_parameter10+atof(l_complex_parameter10);
				}
				else if(m == 10)
				{
					strcpy(l_complex_parameter11,l_complex_val[m]);
					g_complex_parameter11=g_complex_parameter11+atof(l_complex_parameter11);
				}
				else if(m == 11)
				{
					strcpy(l_complex_parameter12,l_complex_val[m]);			
					g_complex_parameter12=g_complex_parameter12+atof(l_complex_parameter12);
				}
				else if(m == 12)
				{
					strcpy(l_complex_parameter13,l_complex_val[m]);
					g_complex_parameter13=g_complex_parameter13+atof(l_complex_parameter13);
				}
				else if(m == 13)
				{
					strcpy(l_complex_parameter14,l_complex_val[m]);
					g_complex_parameter14=g_complex_parameter14+atof(l_complex_parameter14);
				}
				else if(m == 14)
				{
					strcpy(l_complex_parameter15,l_complex_val[m]);
					g_complex_parameter15=g_complex_parameter15+atof(l_complex_parameter15);
				}
				else if(m == 15)
				{
					strcpy(l_complex_parameter16,l_complex_val[m]);
					g_complex_parameter16=g_complex_parameter16+atof(l_complex_parameter16);
				}
				else if(m == 16)
				{
					strcpy(l_complex_parameter17,l_complex_val[m]);
					g_complex_parameter17=g_complex_parameter17+atof(l_complex_parameter17);
				}
				else if(m == 17)
				{
					strcpy(l_complex_parameter18,l_complex_val[m]);
					g_complex_parameter18=g_complex_parameter18+atof(l_complex_parameter18);
				}
				else if(m == 18)
				{
					strcpy(l_complex_parameter19,l_complex_val[m]);
					g_complex_parameter19=g_complex_parameter19+atof(l_complex_parameter19);
				}
				else if(m == 19)
				{
					strcpy(l_complex_parameter20,l_complex_val[m]);
					g_complex_parameter20=g_complex_parameter20+atof(l_complex_parameter20);
				}
			}

			}/*** End Of Fetch Count check ******/

			}/*** End Of Record Count check Part ***********/

			}/*** End Of Grouping For Loop ******/
			EXEC SQL CLOSE html1_group;	
		}
		else
		{
		
		/**** Stored procedure for REPORT DETAILS *************************************/
			
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID :|%s|\n",l_rept_id);
		printf("Calling Stored Procedure SP_REPORT_DETAIL for Report ID :|%s|\n",l_rept_id);
		
		EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
				:l_param2,:l_param3,:l_param4,
				:l_param5,:l_param6,
				:l_table_query,:l_table_query1,:l_table_query2,
				:l_table_query3,:l_table_query4,:l_table_query5,
				:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
				:l_group_desc,:l_error_desc);

		strcpy(table_query,l_table_query);
		strcat(table_query," ");
		
		if(strlen(l_table_query1) > 0)
		{
			strcat(table_query,l_table_query1);
			strcat(table_query," ");
		}
		if(strlen(l_table_query2) > 0)
		{
			strcat(table_query,l_table_query2);
			strcat(table_query," ");
		}
		if(strlen(l_table_query3) > 0)
		{
			strcat(table_query,l_table_query3);
			strcat(table_query," ");
		}
		if(strlen(l_table_query4) > 0)
		{
			strcat(table_query,l_table_query4);
			strcat(table_query," ");
		}
		if(strlen(l_table_query5) > 0)
		{
			strcat(table_query,l_table_query5);
			strcat(table_query," ");
		}
		
		strcat(table_query,APL_NULL_STRING);
			
	   	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
		}
		
		//fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
		fprintf(fl_userlog,"l_criteria_query1:|%s|\n",l_criteria_query1);
		fprintf(fl_userlog,"l_criteria_query2:|%s|\n",l_criteria_query2);
		fprintf(fl_userlog,"l_criteria_query3:|%s|\n",l_criteria_query3);
		
		/****** Before table *************************************************************/
		
		if(strlen(h_report_details_struct.before_table_align) > 0)
		{
			if(strlen(h_report_details_struct.before_table) > 0)
			{	
				fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\"ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.before_table_align,h_report_details_struct.before_table);
			}
		}
		else
		{
			if(strlen(h_report_details_struct.before_table) > 0)
			{	
				fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\"ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.before_table);
			}

		}	
		
		l_before_table = h_report_details_struct.before_table_brk;
		while(l_before_table > 0)
		{
			fprintf(l_report_HTML1,"</BR>\n");
			l_before_table --;
		}

		/******* Column Heading *********************************************************/
		
		/****** Multiple Column Level **************************************/

		strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
		strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
		strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
		
		fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);

		if(strlen(l_multiple_col_flag) > 0)
		{
			fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
			fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);

			if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
					&l_multiple_col_header_value) == APL_FAILURE)
			{
				 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
				 APL_GOBACK_FAIL
			}

			if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
					&l_multiple_colspan_sep_value) == APL_FAILURE)
			{
				 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
				 APL_GOBACK_FAIL
			}


			fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
			fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);

			fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" border=\'%s\' cellSpacing=\'0\' cellPadding=\'1\' >\n",g_table_border);

			if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
			{
				for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
				{
					for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
					{

					if(int_a == int_b )
					{
					
					strcpy(l_level_header,l_multiple_col_header_value[int_a]);
					strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

					fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
					fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);

					if (CO_SplitStr(l_level_header,
							SEMISEP,
							&l_level_header_no,
							&l_level_header_value) == APL_FAILURE)
					{
						 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
						 APL_GOBACK_FAIL
					}

					if (CO_SplitStr(l_level_colspan,
							SEMISEP,
							&l_level_colspan_no,
							&l_level_colspan_value) == APL_FAILURE)
					{
						 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
						 APL_GOBACK_FAIL
					}

					fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
					fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);

					if(l_level_header_no == l_level_colspan_no)
					{

					fprintf(l_report_HTML1,"<TR>\n");
					for(int_aa=0;int_aa<l_level_header_no;int_aa++)
					{
						for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
						{
							if(int_aa == int_bb)
							{	
							
							strcpy(l_level_column,l_level_header_value[int_aa]);
							strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

							fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
							fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
							
							if(strlen(l_level_column) > 0)
								fprintf(l_report_HTML1,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >%s</TD> \n", l_level_col_span,l_level_column);
							else
								fprintf(l_report_HTML1,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >&nbsp;</TD> \n", l_level_col_span);


							}
						}
					}
					fprintf(l_report_HTML1,"</TR>\n");

					}/*** End Of Inner Condition check *****/

					}					
											
					}/*** End Of 2st Main For Loop *******/

				}/*** End Of 1st Main For Loop *******/

			}/*** End Of Multiple col condition check *****/

			l_column_no=h_report_details_struct.no_of_columns;
			l_no_of_columns = h_report_details_struct.no_of_columns;
		}
		else
		{

		
		/**** Split the Column Header and print *****************/
		
		strcpy(l_column_header,h_report_details_struct.column_hdr);
		if (CO_SplitStr(l_column_header,COMASEP,&l_col_no,&l_col_value) == APL_FAILURE)
		{
			 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
			 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_header);
			 APL_GOBACK_FAIL
		}

		/***** Table Column Heading and its records  *********/
		
		fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" border=\'%s\' cellSpacing=\'0\' cellPadding=\'1\' >\n",g_table_border);

		fprintf(l_report_HTML1,"<TR>\n");
		for(i=0;i<l_col_no;i++)
		{
			strcpy(l_column_value,l_col_value[i]);

			fprintf(l_report_HTML1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
		}
		fprintf(l_report_HTML1,"</TR>\n");

		l_column_no=h_report_details_struct.no_of_columns;
		l_no_of_columns = h_report_details_struct.no_of_columns;
		
		l_col_hdr = h_report_details_struct.col_hdr_brk;
		
		}/*** End Of Column Header Else Part ******/

		EXEC SQL PREPARE HTML1_SUB FROM :table_query;	
		EXEC SQL DECLARE HTML1tablequery CURSOR FOR HTML1_SUB;
		EXEC SQL OPEN HTML1tablequery;

		l_fetch_count=0;

		l_return_param=0;

		fprintf(fl_userlog,"Entering SP_REPORT_DATA_PROC :|%s|\n",l_rept_id);
		printf("Entering SP_REPORT_DATA_PROC :|%s|\n",l_rept_id);

		EXEC SQL CALL SP_REPORT_DATA_PROC(:l_rept_id,
										  :l_param1,:l_param2,
										  :l_param3,:l_param4,
										  :l_param5,:l_param6,
										  :l_return_param,:l_error_desc);

	   fprintf(fl_userlog,"Error : After SP_REPORT_DATA_PROC --- ORA ERROR:|%s|\n",l_error_desc);

	   fprintf(fl_userlog,"l_return_param :|%d|\n",l_return_param);

		for(;;)
		{
			EXEC SQL FETCH HTML1tablequery
				INTO :l_table_parameter;

			 if(sqlca.sqlcode == 1403)
			 {
			    fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
			    if(l_fetch_count == 0)
			    {
			       fprintf(l_report_HTML1,"<TR>\n");
			       fprintf(l_report_HTML1,"<TD WIDTH=\'100%%\' COLSPAN=\'%d\' class=\'ez4\'>NO RECORDS FOUND </TD>\n",l_column_no);
			       fprintf(l_report_HTML1,"</TR>\n");
			    }
			    break;
			 }

       		 if(sqlca.sqlcode < 0)
			 {
			    fprintf(fl_userlog,"Error :Critical Error Occured HTML1tablequery --- ORA ERROR:|%d|\n",sqlca.sqlcode);
			    break;
			 }

			strcpy(l_column_parameter,l_table_parameter);


			if(l_return_param == 1)
			{
				fprintf(l_report_HTML1,"<TR>\n");

				if((strlen(l_column_parameter) > 0) && (strcmp(l_column_parameter," ")))
					fprintf(l_report_HTML1,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column_parameter);
				else
					fprintf(l_report_HTML1,"<TD class=\'record\'  >&nbsp</TD>\n");

				fprintf(l_report_HTML1,"</TR>\n");

			}
			else
			{				
				/**** Split the string and fetch the column data *********/
				
				if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
				{
					CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
					APL_GOBACK_FAIL
				}

				/***** For Number Formatting ***************************************************/

				strcpy(l_format_col_pos,h_report_details_struct.format_col_pos);
				if (CO_SplitStr(l_format_col_pos,COMASEP,&l_format_col_no,&l_format_col_val) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_format_col_pos);
					 APL_GOBACK_FAIL
				}

				fprintf(l_report_HTML1,"<TR>\n");

				for(j=0;j<l_column_num;j++)
				{
					strcpy(l_column,l_column_val[j]);
					
					l_format_col_flag = 0;
					if(l_format_col_no > 0)
					{
						for (k=0;k<l_format_col_no;k++)
						{
							strcpy(l_format_col_value,l_format_col_val[k]);

							if(j==(atoi(l_format_col_value)-1))
								l_format_col_flag = 1;
						}

						if((strlen(l_column) > 0) && (strcmp(l_column," ")))
						{
							if(l_format_col_flag == 1)
							{
								EXEC SQL CALL SP_NUMBER_FORMATTING(:l_column,:l_error_desc);

								if(strlen(l_error_desc) > 0)
									fprintf(l_report_HTML1,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
								else
									fprintf(l_report_HTML1,"<TD class=\'record\' ALIGN=\"RIGHT\">%s</TD>\n",l_column);
							}
							else
							{
								fprintf(l_report_HTML1,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
							}
						}
						else
							 fprintf(l_report_HTML1,"<TD class=\'record\'  >&nbsp</TD>\n");

					}
					else
					{
						if((strlen(l_column) > 0) && (strcmp(l_column," ")))
							fprintf(l_report_HTML1,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
						else
							fprintf(l_report_HTML1,"<TD class=\'record\'  >&nbsp</TD>\n");
					}

				}
				fprintf(l_report_HTML1,"</TR>\n");

			
			}/****** End Of SP_REPORT_DATA_PROC Check ****************************/


			/***********************************************************************************/

			l_fetch_count ++;

		}
		EXEC SQL CLOSE HTML1tablequery;


		/********* For Criteria column value display ************/
		
		if(h_report_details_struct.tot_criteria_cols > 0)
		{
			if(strlen(h_report_details_struct.criteria_col1_query) > 0)
			{
				EXEC SQL PREPARE HTML1_CR1 FROM :l_criteria_query1;
				EXEC SQL DECLARE HTML1criteria1 CURSOR FOR HTML1_CR1;
				EXEC SQL OPEN HTML1criteria1;
				
	                        if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Failed to Open HTML1criteria1 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
				}

				for(;;)
				{
				EXEC SQL FETCH HTML1criteria1 INTO :l_criteria_value1;
			
				       if(sqlca.sqlcode == 1403)
				       break;

	                               if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				       {
							fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
					  		break;
				       }
				}
				EXEC SQL CLOSE HTML1criteria1;
				
				/****** For Grand Total Of Criteria Value *********/
						
				if(strcmp(l_criteria_value1,APL_NULL_STRING))
				{
					EXEC SQL SELECT (:l_criteria_value1) INTO :l_criteria1_total FROM DUAL;
					
					l_grand_total1=l_grand_total1+l_criteria1_total;
					
					fprintf(fl_userlog,"l_grand_total1 :|%lf|\n",l_grand_total1);

					fprintf(l_report_HTML1,"<TR>\n");
					fprintf(l_report_HTML1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col1_name,l_criteria_value1);
					fprintf(l_report_HTML1,"</TR>\n");
				}
			}

			if(strlen(h_report_details_struct.criteria_col2_query) > 0)
			{
				EXEC SQL PREPARE HTML1_CR2 FROM :l_criteria_query2;
				EXEC SQL DECLARE HTML1criteria2 CURSOR FOR HTML1_CR2;
				EXEC SQL OPEN HTML1criteria2;
				
	         		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Failed to Open HTML1criteria2 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
				}

				for(;;)
				{
				       EXEC SQL FETCH HTML1criteria2 INTO :l_criteria_value2;
			
				       if(sqlca.sqlcode == 1403)
				       break;

	                	       if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				       {
							fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
					  		break;
				       }
				}
				EXEC SQL CLOSE HTML1criteria2;
		
				if(strcmp(l_criteria_value2,APL_NULL_STRING))
				{
					EXEC SQL SELECT (:l_criteria_value2) INTO :l_criteria2_total FROM DUAL;
					
					l_grand_total2=l_grand_total2+l_criteria2_total;
					
					fprintf(fl_userlog,"l_grand_total2 :|%lf|\n",l_grand_total2);

					fprintf(l_report_HTML1,"<TR>\n");
					fprintf(l_report_HTML1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col2_name,l_criteria_value2);

					fprintf(l_report_HTML1,"</TR>\n");
				}
			}

			if(strlen(h_report_details_struct.criteria_col3_query) > 0)
			{
				EXEC SQL PREPARE HTML1_CR3 FROM :l_criteria_query3;
				EXEC SQL DECLARE HTML1criteria3 CURSOR FOR HTML1_CR3;
				EXEC SQL OPEN HTML1criteria3;
				
	         		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Failed to Open HTML1criteria3 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
				}

				for(;;)
				{
				       EXEC SQL FETCH HTML1criteria3 INTO :l_criteria_value3;
				
				       if(sqlca.sqlcode == 1403)
				       break;

	                	       if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				       {
							fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
					  		break;
				       }
				}
				EXEC SQL CLOSE HTML1criteria3;
					
					
				if(strcmp(l_criteria_value3,APL_NULL_STRING))
				{
					EXEC SQL SELECT (:l_criteria_value3) INTO :l_criteria3_total FROM DUAL;
					
					l_grand_total3=l_grand_total3+l_criteria3_total;
					
					fprintf(fl_userlog,"l_grand_total3 :|%lf|\n",l_grand_total3);

					fprintf(l_report_HTML1,"<TR>\n");

					fprintf(l_report_HTML1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col3_name,l_criteria_value3);

					fprintf(l_report_HTML1,"</TR>\n");
				}
			}
		}

		/******* Complex Criteria Part ***************************************/

		strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
		strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
		strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
		strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

		if(strlen(complex_criteria_query) > 0)
		{
		
		EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
				:complex_criteria_query,
				'@PARAM1',:l_param1),
				'@PARAM2',:l_param2),
				'@PARAM3',:l_param3),
				'@PARAM4',:l_param4),
				'@PARAM5',:l_param5),
				'@PARAM6',:l_param6),
				REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
				:complex_criteria_query1,
				'@PARAM1',:l_param1),
				'@PARAM2',:l_param2),
				'@PARAM3',:l_param3),
				'@PARAM4',:l_param4),
				'@PARAM5',:l_param5),
				'@PARAM6',:l_param6)
			INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;
		
		strcat(complex_criteria_query,complex_criteria_query1);
		
		fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);

		EXEC SQL PREPARE HTML12_CMPX_CURR FROM :complex_criteria_query;

		EXEC SQL DECLARE html12_complex_curr CURSOR FOR HTML12_CMPX_CURR;

		fprintf(fl_userlog,"After DECLARE html12_complex_curr :|%d|\n",sqlca.sqlcode);

		EXEC SQL OPEN html12_complex_curr;

		EXEC SQL FETCH html12_complex_curr INTO :l_complex_parameter;

		fprintf(fl_userlog,"After FETCH html12_complex_curr :|%d|\n",sqlca.sqlcode);

		EXEC SQL CLOSE html12_complex_curr;

		fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);

		if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
		{
			CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
			fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
			APL_GOBACK_FAIL
		}
		
		fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);

		if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
		{
			CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
			fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
			APL_GOBACK_FAIL
		}


		fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
		fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);

		l_complex_break_flag = 0;
		
		if(l_complex_num == l_complex_pos_num)
		{

		fprintf(l_report_HTML1,"<TR>\n");

		for(i=0;i<l_column_num;i++)
		{
			for(j=0;j<l_complex_pos_num;j++)
			{

			strcpy(l_complex_pos_column,l_complex_pos_val[j]);

			if((i==0)&&(j==0))
			{
				if(strlen(complex_criteria_label) > 0)
				{
					fprintf(l_report_HTML1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" >%s</TD>\n",complex_criteria_label);
					l_complex_break_flag=1;
				}
				else
				fprintf(l_report_HTML1,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
			}

			if(i== (atoi(l_complex_pos_column)-1))
			{				  
			  strcpy(l_complex_column,l_complex_val[j]);

			  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);

			  l_complex_break_flag=1;
						
			  if(strlen(l_complex_column) > 0)
			  {
				  EXEC SQL CALL SP_NUMBER_FORMATTING(:l_complex_column,:l_error_desc);

				  if(strlen(l_error_desc) > 0)
					fprintf(l_report_HTML1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">%s</TD>\n",l_complex_column);
				  else
					fprintf(l_report_HTML1,"<TD class=\'lableredbg\' ALIGN=\"RIGHT\">%s</TD>\n",l_complex_column);
			  }
			  else
			  {
					fprintf(l_report_HTML1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">&nbsp;</TD>\n");
			  }		
			
			  break;
			}
			else
			{
			     l_complex_break_flag = 0;
			     continue;
			} 

			}
			     
			if(i != 0)
			{
			  if(l_complex_break_flag != 1)
			     fprintf(l_report_HTML1,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
			}
		}

		}
		else
		{
			fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
		}

		fprintf(l_report_HTML1,"</TR>\n");

		}
		
		/*****************	End Of Complex Part     *********************/

		fprintf(l_report_HTML1,"</TABLE>\n");
  
		/****** After table ****************************************/
		
		l_after_table = h_report_details_struct.after_table_brk;
		while(l_after_table > 0)
		{
			fprintf(l_report_HTML1,"</BR>\n");
			l_after_table --;
		}

		if(strlen(h_report_details_struct.after_table_align) > 0)
		{
			if(strlen(h_report_details_struct.after_table) > 0)
			{	
				fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.after_table_align,h_report_details_struct.after_table);
			}
		}
		else
		{
			if(strlen(h_report_details_struct.after_table) > 0)
			{	
				fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.after_table);
			}

		}	
  
		/********** Table Footer note ******************************/
	
		l_table_footer = h_report_details_struct.table_footer_brk;
		if(l_table_footer > 0)
		{
			fprintf(l_report_HTML1,"</BR>\n");
			l_table_footer --;
		}
		
		if(strlen(h_report_details_struct.table_footer_align) > 0)
		{
			if(strlen(h_report_details_struct.table_footer) > 0)
			{
				fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",h_report_details_struct.table_footer_align,h_report_details_struct.table_footer);
			}
		}
		else
		{
			if(strlen(h_report_details_struct.table_footer) > 0)
			{
				fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",h_report_details_struct.table_footer);
			}

		}

		l_table = h_report_main_struct.table_brk;
		if(l_table > 0)
		{
			fprintf(l_report_HTML1,"</BR>\n");
			l_table --;
		}


		if( l_fetch_count > 0 )
		{
			for(m=0;m<l_complex_num;m++)
			{
				if(m == 0)
				{
					strcpy(l_complex_parameter1,l_complex_val[m]);
					g_complex_parameter1=atof(l_complex_parameter1);
				}
				else if(m == 1)
				{
					strcpy(l_complex_parameter2,l_complex_val[m]);
					g_complex_parameter2=atof(l_complex_parameter2);
				}
				else if(m == 2)
				{
					strcpy(l_complex_parameter3,l_complex_val[m]);
					g_complex_parameter3=atof(l_complex_parameter3);
				}
				else if(m == 3)
				{
					strcpy(l_complex_parameter4,l_complex_val[m]);
					g_complex_parameter4=atof(l_complex_parameter4);
				}
				else if(m == 4)
				{
					strcpy(l_complex_parameter5,l_complex_val[m]);
					g_complex_parameter5=atof(l_complex_parameter5);
				}
				else if(m == 5)
				{
					strcpy(l_complex_parameter6,l_complex_val[m]);
					g_complex_parameter6=atof(l_complex_parameter6);
				}
				else if(m == 6)
				{
					strcpy(l_complex_parameter7,l_complex_val[m]);
					g_complex_parameter7=atof(l_complex_parameter7);
				}
				else if(m == 7)
				{
					strcpy(l_complex_parameter8,l_complex_val[m]);
					g_complex_parameter8=atof(l_complex_parameter8);
				}
				else if(m == 8)
				{
					strcpy(l_complex_parameter9,l_complex_val[m]);
					g_complex_parameter9=atof(l_complex_parameter9);
				}
				else if(m == 9)
				{
					strcpy(l_complex_parameter10,l_complex_val[m]);
					g_complex_parameter10=atof(l_complex_parameter10);
				}
				else if(m == 10)
				{
					strcpy(l_complex_parameter11,l_complex_val[m]);
					g_complex_parameter11=atof(l_complex_parameter11);
				}
				else if(m == 11)
				{
					strcpy(l_complex_parameter12,l_complex_val[m]);			
					g_complex_parameter12=atof(l_complex_parameter12);
				}
				else if(m == 12)
				{
					strcpy(l_complex_parameter13,l_complex_val[m]);
					g_complex_parameter13=atof(l_complex_parameter13);
				}
				else if(m == 13)
				{
					strcpy(l_complex_parameter14,l_complex_val[m]);
					g_complex_parameter14=atof(l_complex_parameter14);
				}
				else if(m == 14)
				{
					strcpy(l_complex_parameter15,l_complex_val[m]);
					g_complex_parameter15=atof(l_complex_parameter15);
				}
				else if(m == 15)
				{
					strcpy(l_complex_parameter16,l_complex_val[m]);
					g_complex_parameter16=atof(l_complex_parameter16);
				}
				else if(m == 16)
				{
					strcpy(l_complex_parameter17,l_complex_val[m]);
					g_complex_parameter17=atof(l_complex_parameter17);
				}
				else if(m == 17)
				{
					strcpy(l_complex_parameter18,l_complex_val[m]);
					g_complex_parameter18=atof(l_complex_parameter18);
				}
				else if(m == 18)
				{
					strcpy(l_complex_parameter19,l_complex_val[m]);
					g_complex_parameter19=atof(l_complex_parameter19);
				}
				else if(m == 19)
				{
					strcpy(l_complex_parameter20,l_complex_val[m]);
					g_complex_parameter20=atof(l_complex_parameter20);
				}

			}/*** End of Complex For Loop ***/

		}/*** End Of Fetch Count Check ****/

		}/******* End Of Grouping Else Block **********/

		/*************** Complex Criteria Individual  *********************/
		
		if(l_fetch_count > 0 )
		{
			fprintf(fl_userlog,"g_complex_parameter1 :|%lf|\tg_complex_parameter2 :|%lf|\n",g_complex_parameter1,g_complex_parameter2);
			fprintf(fl_userlog,"g_complex_parameter3 :|%lf|\tg_complex_parameter4 :|%lf|\n",g_complex_parameter3,g_complex_parameter4);
			fprintf(fl_userlog,"g_complex_parameter5 :|%lf|\tg_complex_parameter6 :|%lf|\n",g_complex_parameter5,g_complex_parameter6);
			fprintf(fl_userlog,"g_complex_parameter7 :|%lf|\tg_complex_parameter8 :|%lf|\n",g_complex_parameter7,g_complex_parameter8);
			fprintf(fl_userlog,"g_complex_parameter9 :|%lf|\tg_complex_parameter10 :|%lf|\n",g_complex_parameter9,g_complex_parameter10);
			fprintf(fl_userlog,"g_complex_parameter11 :|%lf|\tg_complex_parameter12 :|%lf|\n",g_complex_parameter11,g_complex_parameter12);
			fprintf(fl_userlog,"g_complex_parameter13 :|%lf|\tg_complex_parameter14 :|%lf|\n",g_complex_parameter13,g_complex_parameter14);
			fprintf(fl_userlog,"g_complex_parameter15 :|%lf|\tg_complex_parameter16 :|%lf|\n",g_complex_parameter15,g_complex_parameter16);
			fprintf(fl_userlog,"g_complex_parameter17 :|%lf|\tg_complex_parameter18 :|%lf|\n",g_complex_parameter17,g_complex_parameter18);
			fprintf(fl_userlog,"g_complex_parameter19 :|%lf|\tg_complex_parameter20 :|%lf|\n",g_complex_parameter19,g_complex_parameter20);
		}


		/*******************************************************************/


		/********* Dynamic Footer Display ****************************************/

		strcpy(footer_query,h_report_details_struct.footer_query);
		
		if(strlen(footer_query) > 0)
		{

		/**** Stored Procedure : SP_REPORT_FOOTER ***********************************/

		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
		printf("Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
		
		EXEC SQL CALL SP_REPORT_FOOTER(:l_rept_id,:l_table_id,:l_param1,:l_param2,
					:l_param3,:l_param4, :l_param5,
					:l_param6,:l_footer_query,:l_footer_query1,:l_error_desc); 

		strcat(l_footer_query,l_footer_query1);

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER ERR DESC :|%s|\n",l_error_desc);
		}

		fprintf(fl_userlog,"HTML1_FOOTER QUERY :|%s|\n",l_footer_query);

		strcpy(l_footer_query_value,APL_NULL_STRING);

		EXEC SQL PREPARE HTML1_FOOTER_CURR FROM :l_footer_query;

		EXEC SQL DECLARE html1_footer_curr CURSOR FOR HTML1_FOOTER_CURR;
		
		fprintf(fl_userlog,"After DECLARE html1_footer_curr :|%d|\n",sqlca.sqlcode);

		EXEC SQL OPEN html1_footer_curr;

		EXEC SQL FETCH html1_footer_curr INTO :l_footer_query_value;
		fprintf(fl_userlog,"After FETCH html1_footer_curr :|%d|\n",sqlca.sqlcode);

		EXEC SQL CLOSE html1_footer_curr;

		fprintf(fl_userlog,"l_footer_query_value :|%s|\n",l_footer_query_value);

		l_footer_num = 0;

		strcpy(l_footer1,APL_NULL_STRING);
		strcpy(l_footer2,APL_NULL_STRING);
		strcpy(l_footer3,APL_NULL_STRING);
		strcpy(l_footer4,APL_NULL_STRING);
		strcpy(l_footer5,APL_NULL_STRING);
		strcpy(l_footer6,APL_NULL_STRING);
		strcpy(l_footer7,APL_NULL_STRING);
		strcpy(l_footer8,APL_NULL_STRING);
		strcpy(l_footer9,APL_NULL_STRING);
		strcpy(l_footer10,APL_NULL_STRING);
		strcpy(l_footer11,APL_NULL_STRING);
		strcpy(l_footer12,APL_NULL_STRING);
		strcpy(l_footer13,APL_NULL_STRING);
		strcpy(l_footer14,APL_NULL_STRING);
		strcpy(l_footer15,APL_NULL_STRING);

		if(strlen(l_footer_query_value) > 0)
		{		
			if (CO_SplitStr(l_footer_query_value,CAPSEP,&l_footer_num,&l_footer_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_footer_query_value);
				APL_GOBACK_FAIL
			}

			fprintf(fl_userlog,"l_footer_num :|%d|\n",l_footer_num);
			if(l_footer_num > 0)
			{
				for(i=0;i<l_footer_num;i++)
				{
					if(i == 0)
					strcpy(l_footer1,l_footer_val[i]);
					else if(i == 1)
					strcpy(l_footer2,l_footer_val[i]);
					else if(i == 2)
					strcpy(l_footer3,l_footer_val[i]);
					else if(i == 3)
					strcpy(l_footer4,l_footer_val[i]);
					else if(i == 4)
					strcpy(l_footer5,l_footer_val[i]);
					else if(i == 5)
					strcpy(l_footer6,l_footer_val[i]);
					else if(i == 6)
					strcpy(l_footer7,l_footer_val[i]);
					else if(i == 7)
					strcpy(l_footer8,l_footer_val[i]);
					else if(i == 8)
					strcpy(l_footer9,l_footer_val[i]);
					else if(i == 9)
					strcpy(l_footer10,l_footer_val[i]);
					else if(i == 10)
					strcpy(l_footer11,l_footer_val[i]);
					else if(i == 11)
					strcpy(l_footer12,l_footer_val[i]);
					else if(i == 12)
					strcpy(l_footer13,l_footer_val[i]);
					else if(i == 13)
					strcpy(l_footer14,l_footer_val[i]);
					else if(i == 14)
					strcpy(l_footer15,l_footer_val[i]);
				}
			}

		}/****** End Of Footer Value Check ******************************************/

		/****** Stored Procedure : SP_REPORT_FOOTER_DATA ***********************************/

		fprintf(fl_userlog,"l_footer1 :|%s|\t l_footer2 :|%s|\n",l_footer1,l_footer2);
		fprintf(fl_userlog,"l_footer3 :|%s|\t l_footer4 :|%s|\n",l_footer3,l_footer4);
		fprintf(fl_userlog,"l_footer5 :|%s|\t l_footer6 :|%s|\n",l_footer5,l_footer6);
		fprintf(fl_userlog,"l_footer7 :|%s|\t l_footer8 :|%s|\n",l_footer7,l_footer8);
		fprintf(fl_userlog,"l_footer9 :|%s|\t l_footer10 :|%s|\n",l_footer9,l_footer10);
		fprintf(fl_userlog,"l_footer11 :|%s|\t l_footer12 :|%s|\n",l_footer11,l_footer12);
		fprintf(fl_userlog,"l_footer13 :|%s|\t l_footer14 :|%s|\n",l_footer13,l_footer14);
		fprintf(fl_userlog,"l_footer15 :|%s|\n",l_footer15);

		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);	
		printf("Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);		
		
		EXEC SQL CALL SP_REPORT_FOOTER_DATA(:l_rept_id,:l_table_id,
						:l_footer1,:l_footer2,
						:l_footer3,:l_footer4,
						:l_footer5,:l_footer6,
						:l_footer7,:l_footer8,
						:l_footer9,:l_footer10,
						:l_footer11,:l_footer12,
						:l_footer13,:l_footer14,
						:l_footer15,
						:g_complex_parameter1,:g_complex_parameter2,
						:g_complex_parameter3,:g_complex_parameter4,
						:g_complex_parameter5,:g_complex_parameter6,
						:g_complex_parameter7,:g_complex_parameter8,
						:g_complex_parameter9,:g_complex_parameter10,
						:g_complex_parameter11,:g_complex_parameter12,
						:g_complex_parameter13,:g_complex_parameter14,
						:g_complex_parameter15,:g_complex_parameter16,
						:g_complex_parameter17,:g_complex_parameter18,
						:g_complex_parameter19,:g_complex_parameter20,
						:l_footer_data,:l_error_desc); 

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER_DATA ERR DESC :|%s|\n",l_error_desc);
		}

		fprintf(fl_userlog,"FOOTER DATA :|%s|\n",l_footer_data);

		/************ Dynamic Formating Procedure ***************************************/
		
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);	
		printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
		
		EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_footer_data,:l_error_desc); 

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
		}

		fprintf(fl_userlog,"FOOTER DATA After Formatting -- :|%s|\n",l_footer_data);


		/*******************************************************************************/

		/************ Dynamic Footer Data Display **********************************************/
		
		fprintf(fl_userlog,"strlen(l_footer_data) :|%d|\n",strlen(l_footer_data));

		if(strlen(l_footer_data) > 0)
		{
			fprintf(fl_userlog,"Displaying Footer Data --- \n");

			fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\"><TR>\n");
			fprintf(l_report_HTML1,"<TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'headerdata\'>%s</TD>\n",h_report_details_struct.footer_data_align,l_footer_data);
			fprintf(l_report_HTML1,"</TR></TABLE>\n");
		}

		l_footer_data_brk = h_report_details_struct.footer_data_brk;
		while(l_footer_data_brk > 0)
		{
			fprintf(l_report_HTML1,"</BR>\n");
			l_footer_data_brk --;
			g_line_count++;
		}

		}

		/***************** End Of Dynamic Footer Display  ***************************/

		/***************** Final Complex Criteria Calculation **********************/

		fprintf(fl_userlog,"\n--- l_table_id --- 2:|%d|\n",l_table_id);

		if(l_table_id == 1)
		{
			f_complex_parameter1=f_complex_parameter1+g_complex_parameter1;
			f_complex_parameter2=f_complex_parameter2+g_complex_parameter2;
			f_complex_parameter3=f_complex_parameter3+g_complex_parameter3;
			f_complex_parameter4=f_complex_parameter4+g_complex_parameter4;
			f_complex_parameter5=f_complex_parameter5+g_complex_parameter5;
			f_complex_parameter6=f_complex_parameter6+g_complex_parameter6;
			f_complex_parameter7=f_complex_parameter7+g_complex_parameter7;
			f_complex_parameter8=f_complex_parameter8+g_complex_parameter8;
			f_complex_parameter9=f_complex_parameter9+g_complex_parameter9;
			f_complex_parameter10=f_complex_parameter10+g_complex_parameter10;
			f_complex_parameter11=f_complex_parameter11+g_complex_parameter11;
			f_complex_parameter12=f_complex_parameter12+g_complex_parameter12;
			f_complex_parameter13=f_complex_parameter13+g_complex_parameter13;
			f_complex_parameter14=f_complex_parameter14+g_complex_parameter14;
			f_complex_parameter15=f_complex_parameter15+g_complex_parameter15;
			f_complex_parameter16=f_complex_parameter16+g_complex_parameter16;
			f_complex_parameter17=f_complex_parameter17+g_complex_parameter17;
			f_complex_parameter18=f_complex_parameter18+g_complex_parameter18;
			f_complex_parameter19=f_complex_parameter19+g_complex_parameter19;
			f_complex_parameter20=f_complex_parameter20+g_complex_parameter20;
		}

		/******************************************************************************/

		l_table_id ++;
	}
	}

	/********** For Displaying Grand Criteria Total ****************************************/

	fprintf(fl_userlog,"GRAND TOTAL FLAG is 2:|%s|\n",h_report_details_struct.grand_total_flag);
	printf("GRAND TOTAL FLAG is 2:|%s|\n",h_report_details_struct.grand_total_flag);
	
	EXEC SQL SELECT ROUND(:l_grand_total1,2),ROUND(:l_grand_total2,2),ROUND(:l_grand_total3,2)
			   INTO :l_grand_round1,:l_grand_round2,:l_grand_round3
				FROM DUAL;

	fprintf(fl_userlog,"After Grand Total Round -- ORA ERROR 2:|%d|\n",sqlca.sqlcode);
	printf("After Grand Total Round -- ORA ERROR 2:|%d|\n",sqlca.sqlcode);

	fprintf(fl_userlog,"l_grand_round1:|%s|\n",l_grand_round1);
	fprintf(fl_userlog,"l_grand_round2:|%s|\n",l_grand_round2);
	fprintf(fl_userlog,"l_grand_round3:|%s|\n",l_grand_round3);

	printf("l_grand_round1:|%s|\n",l_grand_round1);
	printf("l_grand_round2:|%s|\n",l_grand_round2);
	printf("l_grand_round3:|%s|\n",l_grand_round3);	

	/********* Grand display Check ************************************************/

	fprintf(fl_userlog,"g_setting_flag:|%s|\n",g_setting_flag);
	printf("g_setting_flag:|%s|\n",g_setting_flag);

	if(!strcmp(g_setting_flag,"U"))
		strcpy(l_grand_display,"GRAND");
	else if(!strcmp(g_setting_flag,"L"))
		strcpy(l_grand_display,"grand");
	else 
		strcpy(l_grand_display,"Grand");

	/********************************************************************************/
	
	if(strlen(h_report_details_struct.grand_total_flag) > 0)
	{
		
		EXEC SQL CALL SP_NUMBER_FORMATTING(:l_grand_round1,:l_error_desc);

		fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);

		fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" class=\'ez4\'>\n");
		if(l_grand_total1 > 0)
		fprintf(l_report_HTML1,"<TR><TD WIDTH=\"100%%\" ALIGN=\"RIGHT\" class=\'ez4\'>%s %s = %s</TD></TR>\n",l_grand_display,h_report_details_struct.criteria_col1_name,l_grand_round1);

		EXEC SQL CALL SP_NUMBER_FORMATTING(:l_grand_round2,:l_error_desc);

		fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
		
		if(l_grand_total2 > 0)
		fprintf(l_report_HTML1,"<TR><TD WIDTH=\"100%%\" ALIGN=\"RIGHT\" class=\'ez4\'>%s %s = %s</TD></TR>\n",l_grand_display,h_report_details_struct.criteria_col2_name,l_grand_round2);
		
		EXEC SQL CALL SP_NUMBER_FORMATTING(:l_grand_round3,:l_error_desc);

		fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);

		if(l_grand_total3 > 0)
		fprintf(l_report_HTML1,"<TR><TD WIDTH=\"100%%\" ALIGN=\"RIGHT\" class=\'ez4\'>%s %s = %s</TD></TR>\n",l_grand_display,h_report_details_struct.criteria_col3_name,l_grand_round3);
		
		fprintf(l_report_HTML1,"</TABLE>\n");
		fprintf(l_report_HTML1,"</BR>\n");

	}

	/************* Grand Complex Criteria Display ******************************************/
		
	fprintf(fl_userlog,"f_complex_parameter1 :|%lf|\tf_complex_parameter2 :|%lf|\n",f_complex_parameter1,f_complex_parameter2);
	fprintf(fl_userlog,"f_complex_parameter3 :|%lf|\tf_complex_parameter4 :|%lf|\n",f_complex_parameter3,f_complex_parameter4);
	fprintf(fl_userlog,"f_complex_parameter5 :|%lf|\tf_complex_parameter6 :|%lf|\n",f_complex_parameter5,f_complex_parameter6);
	fprintf(fl_userlog,"f_complex_parameter7 :|%lf|\tf_complex_parameter8 :|%lf|\n",f_complex_parameter7,f_complex_parameter8);
	fprintf(fl_userlog,"f_complex_parameter9 :|%lf|\tf_complex_parameter10 :|%lf|\n",f_complex_parameter9,f_complex_parameter10);
	fprintf(fl_userlog,"f_complex_parameter11 :|%lf|\tf_complex_parameter12 :|%lf|\n",f_complex_parameter11,f_complex_parameter12);
	fprintf(fl_userlog,"f_complex_parameter13 :|%lf|\tf_complex_parameter14 :|%lf|\n",f_complex_parameter13,f_complex_parameter14);
	fprintf(fl_userlog,"f_complex_parameter15 :|%lf|\tf_complex_parameter16 :|%lf|\n",f_complex_parameter15,f_complex_parameter16);
	fprintf(fl_userlog,"f_complex_parameter17 :|%lf|\tf_complex_parameter18 :|%lf|\n",f_complex_parameter17,f_complex_parameter18);
	fprintf(fl_userlog,"f_complex_parameter19 :|%lf|\tf_complex_parameter20 :|%lf|\n",f_complex_parameter19,f_complex_parameter20);

	strcpy(complex_criteria,h_report_details_struct.complex_criteria);

	fprintf(fl_userlog,"strlen(complex_criteria) :|%d|\n",strlen(complex_criteria));

	if(strlen(complex_criteria) > 0 )
	{
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_CRITERIA :|%s|\n",l_rept_id);	
		printf("Calling Stored Procedure SP_REPORT_CRITERIA :|%s|\n",l_rept_id);	
		
		EXEC SQL CALL SP_REPORT_CRITERIA(:complex_criteria,
						 :f_complex_parameter1,:f_complex_parameter2,
						 :f_complex_parameter3,:f_complex_parameter4,
						 :f_complex_parameter5,:f_complex_parameter6,
						 :f_complex_parameter7,:f_complex_parameter8,
						 :f_complex_parameter9,:f_complex_parameter10,
						 :f_complex_parameter11,:f_complex_parameter12,
						 :f_complex_parameter13,:f_complex_parameter14,
						 :f_complex_parameter15,:f_complex_parameter16,
						 :f_complex_parameter17,:f_complex_parameter18,
						 :f_complex_parameter19,:f_complex_parameter20,
						 :l_complex_criteria_data,:l_error_desc); 

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_CRITERIA ERR DESC :|%s|\n",l_error_desc);
		}

		fprintf(fl_userlog,"COMPLEX CRITERIA DATA :|%s|\n",l_complex_criteria_data);

		/************ Dynamic Formating Procedure ************************/
		
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);	
		printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
		
		EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_complex_criteria_data,:l_error_desc); 

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
		}

		fprintf(fl_userlog,"COMPLEX CRITERIA DATA After Formatting -- :|%s|\n",l_complex_criteria_data);


		/***************************************************************/

		/************ COMPLEX CRITERIA DATA Display *******************/
		
		fprintf(fl_userlog,"strlen(l_complex_criteria_data) :|%d|\n",strlen(l_complex_criteria_data));

		if(strlen(l_complex_criteria_data) > 0)
		{
			fprintf(fl_userlog,"Displaying l_complex_criteria_data Data --- \n");

			fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\"><TR>\n");
			fprintf(l_report_HTML1,"<TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'headerdata\'>%s</TD>\n",l_complex_criteria_data);
			fprintf(l_report_HTML1,"</TR></TABLE>\n");
		}

	}


	/***********************************************************************/
	
	/******* Page Footer note ********************************************/
		
	if(strlen(h_report_main_struct.page_footer_align) > 0)
	{
		if(strlen(h_report_main_struct.page_footer) > 0)
		{
			fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" class=\'footer\'><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'footer\'>%s</TD><TR></TABLE>\n",h_report_main_struct.page_footer_align,h_report_main_struct.page_footer);
		}
	}
	else
	{
		if(strlen(h_report_main_struct.page_footer) > 0)
		{
			fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" class=\'footer\'><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'footer\'>%s</TD><TR></TABLE>\n",h_report_main_struct.page_footer);
		}

	}

	l_page_footer = h_report_main_struct.page_footer_brk;
	if(l_page_footer > 0)
	{
		fprintf(l_report_HTML1,"</BR>\n");
		l_page_footer --;
	}
	
	
	/******* Disclaimer **************************************************/
		
	if(strlen(h_report_main_struct.disclaimer) > 0)
	{
		fprintf(l_report_HTML1,"<TABLE WIDTH=\"100%%\" class=\'footer\'><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'footer\'>%s</TD><TR></TABLE>\n",h_report_main_struct.disclaimer);

	}

	/********************************************************************/

	
	fprintf(l_report_HTML1,"</BODY></HTML>\n");
	fprintf(l_report_HTML1,"</BR></BR></BR>\n");

	
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:
	{
		fclose(l_report_HTML1);
		fclose(l_init_file);
		CO_ProcMonitor(g_logfile,"Success from CO_CreateReport_HTML1",NULL,NULL);
		fprintf(fl_userlog,"Success From CO_CreateReport_HTML1 Function\n");
		return(APL_SUCCESS);
	}


	RETURN_FAILURE:
	{
		fclose(l_report_HTML1);
		fclose(l_init_file);
		CO_ProcMonitor(g_logfile,"Failed from CO_CreateReport_HTML1",l_debug_info_ptr,NULL);
		fprintf(fl_userlog,"Failure From CO_CreateReport_HTML1 Function\n ");
		return(APL_FAILURE);
	}
}

int CO_CreateReport_XLS1(char *p_rept_id,char *p_rep_type,char *p_rep_name,
		      	char *p_param_str,char *p_chr_ptr_param,char *p_start_date,
			char *p_compress_flag,char *p_user,char *p_web_login_id,char *p_web_rpt_id,char *p_web_source_from,char *p_web_report_dt,char *p_web_proc_id,FILE *fl_userlog,
			DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	printf("Entered Inside CO_CreateReport_XLS1 Function \n");

	FILE	*l_init_file  		= (FILE *)NULL;
	FILE	*l_report_XLS1 	= (FILE *)NULL;
	char l_init_path[200]	= APL_NULL_STRING;
	char l_report_path[200] = APL_NULL_STRING;
	char l_report_name[200] = APL_NULL_STRING;
	char l_compress_flag[5]	= APL_NULL_STRING;
	char l_time_stamp[30]	= APL_NULL_STRING;

	memset(l_init_path,APL_NULL_CHAR,200);	
	memset(l_report_path,APL_NULL_CHAR,200);	
	memset(l_report_name,APL_NULL_CHAR,200);	

	REPORT_MAIN_STRUCT_H  h_report_main_struct;
	REPORT_MAIN_STRUCT_I  i_report_main_struct;
	
	REPORT_DETAILS_STRUCT_H h_report_details_struct;
	REPORT_DETAILS_STRUCT_I i_report_details_struct;
	
	INTL_REPT_STRUCT_H   l_intl_rept_struct_ha;
	memset(&l_intl_rept_struct_ha,APL_NULL_CHAR,sizeof(INTL_REPT_STRUCT_H));

	memset(&h_report_main_struct,APL_NULL_CHAR,sizeof(REPORT_MAIN_STRUCT_H));	
	memset(&i_report_main_struct,APL_NULL_CHAR,sizeof(REPORT_MAIN_STRUCT_I));

	memset(&h_report_details_struct,APL_NULL_CHAR,sizeof(REPORT_DETAILS_STRUCT_H));
	memset(&i_report_details_struct,APL_NULL_CHAR,sizeof(REPORT_DETAILS_STRUCT_I));
		
	char l_rept_id[11]		   	= APL_NULL_STRING;
	char l_rep_type[10]	   	= APL_NULL_STRING;
	char l_client[20]  			= APL_NULL_STRING;
	char l_sub_client[20]  		= APL_NULL_STRING;
	char l_rep_name[100]    	= APL_NULL_STRING;
	char l_param_str[4000]  	= APL_NULL_STRING;
	char l_chr_param[4000]  	= APL_NULL_STRING;
	char l_start_date[20]   	= APL_NULL_STRING;
	char l_user[20]  				= APL_NULL_STRING;
	char l_client_name[100] 	= APL_NULL_STRING;
	char l_gen_query[4001]  	= APL_NULL_STRING;

    //changes for report generation through api start
	char l_web_login_id[101]				= APL_NULL_STRING;
	char l_web_rpt_id[101]				= APL_NULL_STRING;
	char l_web_source_from[101]				= APL_NULL_STRING;
	char l_web_report_dt[101]				= APL_NULL_STRING;
	char l_web_proc_id[101]				= APL_NULL_STRING;
	//changes for report generation through api end

	char l_more_qry_flag[3]     = APL_NULL_STRING;
	char table_query[24001] 	= APL_NULL_STRING;
	char l_table_query[4001] 	= APL_NULL_STRING;
	char l_table_query1[4001] 	= APL_NULL_STRING;
	char l_table_query2[4001] 	= APL_NULL_STRING;
	char l_table_query3[4001] 	= APL_NULL_STRING;
	char l_table_query4[4001] 	= APL_NULL_STRING;
	char l_table_query5[4001] 	= APL_NULL_STRING;
	
	char l_criteria_query1[4001] = APL_NULL_STRING;
	char l_criteria_query2[4001] = APL_NULL_STRING;
	char l_criteria_query3[4001] = APL_NULL_STRING;
	char l_system_date[20]  	   = APL_NULL_STRING;
	char l_column_value[200]		= APL_NULL_STRING;
	char l_column_header[4001]		=APL_NULL_STRING;
	char l_table_parameter[6000]	=APL_NULL_STRING;
	char l_general_parameter[6000]=APL_NULL_STRING;
	char l_general_param[6000]		=APL_NULL_STRING;
	char l_param[2000]				=APL_NULL_STRING;
	char l_column_parameter[6000]	=APL_NULL_STRING;
	char l_column[2000]				=APL_NULL_STRING;
	char l_error_desc[2000]			=APL_NULL_STRING;
	char l_param1[100]             = APL_NULL_STRING;
	char l_param2[100]             = APL_NULL_STRING;
	char l_param3[100]             = APL_NULL_STRING;
	char l_param4[100]             = APL_NULL_STRING;
	char l_param5[100]             = APL_NULL_STRING;
	char l_param6[100]             = APL_NULL_STRING;

	char g_style[4000]	= APL_NULL_STRING;
	char g_style_lt[4000]	= APL_NULL_STRING;
	char g_setting_flag[2]	= APL_NULL_STRING;
	char g_table_border[2]= APL_NULL_STRING;
	
	char  l_group_query[4001]       = APL_NULL_STRING;
	char  l_group_desc[4001]        = APL_NULL_STRING;
	char  l_group_pos[11]			  = APL_NULL_STRING;
	char  l_group_parameter[2001]   = APL_NULL_STRING;
	
	char  **l_group_parameter_value		=	NULL;
	char  **l_group_pos_value 				=	NULL;

	int  l_group_pos_no			= 0;
	int  l_group_parameter_no	= 0;
	int  l_group_break_flag 	= 0;

	char  l_prev_param1[100]            = APL_NULL_STRING;
	char  l_prev_param2[100]            = APL_NULL_STRING;
	char  l_prev_param3[100]            = APL_NULL_STRING;
	char  l_prev_param4[100]            = APL_NULL_STRING;
	char  l_prev_param5[100]            = APL_NULL_STRING;
	char  l_prev_param6[100]            = APL_NULL_STRING;

	char l_grand_round1[200]	= APL_NULL_STRING;
	char l_grand_round2[200]	= APL_NULL_STRING;
	char l_grand_round3[200]	= APL_NULL_STRING;
	
	
	char  **l_col_value		=	NULL;
	char  **l_field_val		=	NULL;
	char  **l_column_val		=	NULL;
	char  **l_param_val		=	NULL;
	
	int i=0,j=0,k=0;
	int l_col_no				= 0;
	int l_column_num			= 0;
	int l_param_num			= 0;
	int l_fetch_count 		= 0;
	int l_before_title_break= 0;
	int l_no_of_columns     = 0;
	int l_table_id		      = 0;
	int l_column_no         = 0;
	int l_page_header			= 0;
	int l_before_title      = 0;
	int l_before_title1		= 0;
	int l_before_title2		= 0;
	int l_before_title3     = 0;
	int l_report_title		= 0;
	int l_after_title			= 0;
	int l_table_hdr			= 0;
	int l_before_table		= 0;
	int l_after_table		   = 0;
	int l_col_hdr				= 0;
	int l_table					= 0;
	int l_table_footer		= 0;
	int l_page_footer			= 0;
	int l_int_no_field      = 0;
	int int_no					= 0;
	int l_colspan           = 0;
	double l_grand_total1		= 0;
	double l_grand_total2		= 0;
	double l_grand_total3		= 0;
	
	char l_criteria_value1[200]   = APL_NULL_STRING;
	char l_criteria_value2[200]   = APL_NULL_STRING;
	char l_criteria_value3[200]   = APL_NULL_STRING;
	double l_criteria1_total = 0.0;
	double l_criteria2_total = 0.0;
	double l_criteria3_total = 0.0;

	/************ Paging Varibles Declaration **********************/

	int p_page_no = 0;
	int rec_no = 0;
	int p_total_page_no = 0;
	int l_page_break_chk = 0;
   	int l_next_page_break = 0;
   	int l_main_page_break = 0;
	int p_final_break = 0;
	int l_final_break = 0;
	int l_main_page_recs = 0;
	int l_next_page_recs = 0;
	int l_tolarence = 0;
	int l_landscape = 0;
	int l_portrait = 0;
	int g_line_count = 0;

	char l_paging_flag[2] = APL_NULL_STRING;
	char l_print_flag[2] = APL_NULL_STRING;

	char l_grand_display[20] = APL_NULL_STRING;

	/******* Complex Criteria Variables ***************************/

	char l_report_type[3] 			= APL_NULL_STRING;
	
	char  **l_complex_val			= NULL;
	int l_complex_num			= 0;
	char l_complex_column[2000]		= APL_NULL_STRING;
	char l_complex_parameter[2000] 		= APL_NULL_STRING;
	
	char  **l_complex_pos_val		= NULL;
	int l_complex_pos_num			= 0;
	char l_complex_pos_column[2000]		= APL_NULL_STRING;
	char l_complex_pos_parameter[2000] 	= APL_NULL_STRING;
		
	int l_complex_break_flag 		= 0;
	
	char complex_criteria_query[8001] 	= APL_NULL_STRING;
	char complex_criteria_query1[4001] 	= APL_NULL_STRING;
	char complex_criteria_label[4001] 	= APL_NULL_STRING;
	char complex_criteria_pos[101] 		= APL_NULL_STRING;

	char l_header_query[8001] 		= APL_NULL_STRING;
	char l_header_query1[4001] 		= APL_NULL_STRING;
	char header_query[4001] 		= APL_NULL_STRING;	
	char l_header_query_value[4001] 	= APL_NULL_STRING;	
	int l_header_num 			= 0;
	char **l_header_val			= NULL;
	char l_header_data[6001]		= APL_NULL_STRING;
	int l_header_brk			= 0;

	char l_footer_query[8001] 		= APL_NULL_STRING;	
	char l_footer_query1[4001] 		= APL_NULL_STRING;
	char footer_query[4001] 		= APL_NULL_STRING;	
	char l_footer_query_value[4001] 	= APL_NULL_STRING;	
	int l_footer_num 			= 0;
	char **l_footer_val			= NULL;
	char l_footer_data[6001]		= APL_NULL_STRING;
	int l_footer_data_brk			= 0;

	char l_header1[200] 			= APL_NULL_STRING;
	char l_header2[200] 			= APL_NULL_STRING;
	char l_header3[200] 			= APL_NULL_STRING;
	char l_header4[200] 			= APL_NULL_STRING;
	char l_header5[200] 			= APL_NULL_STRING;
	char l_header6[200] 			= APL_NULL_STRING;
	char l_header7[200] 			= APL_NULL_STRING;
	char l_header8[200] 			= APL_NULL_STRING;
	char l_header9[200] 			= APL_NULL_STRING;
	char l_header10[200] 			= APL_NULL_STRING;
	char l_header11[200] 			= APL_NULL_STRING;
	char l_header12[200] 			= APL_NULL_STRING;
	char l_header13[200] 			= APL_NULL_STRING;
	char l_header14[200] 			= APL_NULL_STRING;
	char l_header15[200] 			= APL_NULL_STRING;

	char l_footer1[200] 			= APL_NULL_STRING;
	char l_footer2[200] 			= APL_NULL_STRING;
	char l_footer3[200] 			= APL_NULL_STRING;
	char l_footer4[200] 			= APL_NULL_STRING;
	char l_footer5[200] 			= APL_NULL_STRING;
	char l_footer6[200] 			= APL_NULL_STRING;
	char l_footer7[200] 			= APL_NULL_STRING;
	char l_footer8[200] 			= APL_NULL_STRING;
	char l_footer9[200] 			= APL_NULL_STRING;
	char l_footer10[200] 			= APL_NULL_STRING;
	char l_footer11[200] 			= APL_NULL_STRING;
	char l_footer12[200] 			= APL_NULL_STRING;
	char l_footer13[200] 			= APL_NULL_STRING;
	char l_footer14[200] 			= APL_NULL_STRING;
	char l_footer15[200] 			= APL_NULL_STRING;

	int m					= 0;
	
	char l_complex_parameter1[500]		= APL_NULL_STRING;
	char l_complex_parameter2[500]		= APL_NULL_STRING;
	char l_complex_parameter3[500]		= APL_NULL_STRING;
	char l_complex_parameter4[500]		= APL_NULL_STRING;
	char l_complex_parameter5[500]		= APL_NULL_STRING;
	char l_complex_parameter6[500]		= APL_NULL_STRING;
	char l_complex_parameter7[500]		= APL_NULL_STRING;
	char l_complex_parameter8[500]		= APL_NULL_STRING;
	char l_complex_parameter9[500]		= APL_NULL_STRING;
	char l_complex_parameter10[500]		= APL_NULL_STRING;
	char l_complex_parameter11[500]		= APL_NULL_STRING;
	char l_complex_parameter12[500]		= APL_NULL_STRING;
	char l_complex_parameter13[500]		= APL_NULL_STRING;
	char l_complex_parameter14[500]		= APL_NULL_STRING;
	char l_complex_parameter15[500]		= APL_NULL_STRING;
	char l_complex_parameter16[500]		= APL_NULL_STRING;
	char l_complex_parameter17[500]		= APL_NULL_STRING;
	char l_complex_parameter18[500]		= APL_NULL_STRING;
	char l_complex_parameter19[500]		= APL_NULL_STRING;
	char l_complex_parameter20[500]		= APL_NULL_STRING;

	double g_complex_parameter1		= 0.0;
	double g_complex_parameter2 		= 0.0;
	double g_complex_parameter3 		= 0.0;
	double g_complex_parameter4 		= 0.0;
	double g_complex_parameter5 		= 0.0;
	double g_complex_parameter6 		= 0.0;
	double g_complex_parameter7 		= 0.0;
	double g_complex_parameter8 		= 0.0;
	double g_complex_parameter9 		= 0.0;
	double g_complex_parameter10 		= 0.0;
	double g_complex_parameter11 		= 0.0;
	double g_complex_parameter12 		= 0.0;
	double g_complex_parameter13 		= 0.0;
	double g_complex_parameter14 		= 0.0;
	double g_complex_parameter15 		= 0.0;
	double g_complex_parameter16 		= 0.0;
	double g_complex_parameter17 		= 0.0;
	double g_complex_parameter18 		= 0.0;
	double g_complex_parameter19 		= 0.0;
	double g_complex_parameter20		= 0.0;
	
	double f_complex_parameter1		= 0.0;
	double f_complex_parameter2 		= 0.0;
	double f_complex_parameter3 		= 0.0;
	double f_complex_parameter4 		= 0.0;
	double f_complex_parameter5 		= 0.0;
	double f_complex_parameter6 		= 0.0;
	double f_complex_parameter7 		= 0.0;
	double f_complex_parameter8 		= 0.0;
	double f_complex_parameter9 		= 0.0;
	double f_complex_parameter10 		= 0.0;
	double f_complex_parameter11 		= 0.0;
	double f_complex_parameter12 		= 0.0;
	double f_complex_parameter13 		= 0.0;
	double f_complex_parameter14 		= 0.0;
	double f_complex_parameter15 		= 0.0;
	double f_complex_parameter16 		= 0.0;
	double f_complex_parameter17 		= 0.0;
	double f_complex_parameter18 		= 0.0;
	double f_complex_parameter19 		= 0.0;
	double f_complex_parameter20		= 0.0;

	char complex_criteria[4001]		= APL_NULL_STRING;
	char l_complex_criteria_data[4001]      = APL_NULL_STRING;

	char l_multiple_col_flag[3]		= APL_NULL_STRING;
	char l_multiple_col_header[4001]	= APL_NULL_STRING;
	char l_multiple_colspan_sep[2001]	= APL_NULL_STRING;

	int l_multiple_col_header_no		= 0;
	int l_multiple_colspan_sep_no		= 0;

	char **l_multiple_col_header_value	= NULL;
	char **l_multiple_colspan_sep_value	= NULL;

	char l_level_header[2000]		= APL_NULL_STRING;
	char l_level_colspan[500]		= APL_NULL_STRING;
	char l_level_column[500]		= APL_NULL_STRING;
	char l_level_col_span[10]		= APL_NULL_STRING;

	int l_level_header_no			= 0;
	int l_level_colspan_no			= 0;
	int int_aa				= 0;
	int int_bb				= 0;
	int int_a				= 0;
	int int_b				= 0;

	char **l_level_header_value		= NULL;
	char **l_level_colspan_value		= NULL;

	char l_zip_image_path[200]		= APL_NULL_STRING;

	int l_format_col_flag		= 0;
	int l_format_col_no         = 0;
	char **l_format_col_val		= NULL;
	char l_format_col_value[10] = APL_NULL_STRING;
	char l_format_col_pos[500]	= APL_NULL_STRING;

	char l_record_count_query_final[8001]   = APL_NULL_STRING;
	char l_record_count_query[4001]   = APL_NULL_STRING;
	char l_record_count_query1[4001]   = APL_NULL_STRING;
	int l_record_count_flag = 0;
	int l_record_count = 0;
	int l_table_numbers = 0;
	int l_table_num = 0;

	int l_return_param = 0;	

		/*Pasha Added for AMFI Enhancement Report Naming convention */

	char l_char_dd[3] = APL_NULL_STRING;
	char l_char_mm[3] = APL_NULL_STRING;
	char l_char_yy[3] = APL_NULL_STRING;
	char temp[20] = APL_NULL_STRING;
	
	strcpy(l_rept_id,p_rept_id);
	
	strcpy(l_rept_id,p_rept_id);
	strcpy(l_rep_type,p_rep_type);
	strcpy(l_rep_name,p_rep_name);
	strcpy(l_param_str,p_param_str);
	strcpy(l_chr_param,p_chr_ptr_param);
	strcpy(l_client,l_param_str);
	strcpy(l_start_date,p_start_date);
	strcpy(l_compress_flag,p_compress_flag);
	strcpy(l_user,p_user);
	strcpy(l_web_login_id,p_web_login_id);
	strcpy(l_web_rpt_id,p_web_rpt_id);
	strcpy(l_web_source_from,p_web_source_from);
	strcpy(l_web_report_dt,p_web_report_dt);
	strcpy(l_web_proc_id,p_web_proc_id);

	EXEC SQL BEGIN DECLARE SECTION;
		
	EXEC SQL VAR l_rept_id IS STRING;
	EXEC SQL VAR l_gen_query IS STRING;

	EXEC SQL VAR table_query IS STRING;
	EXEC SQL VAR l_table_query IS STRING;
	EXEC SQL VAR l_table_query1 IS STRING;
	EXEC SQL VAR l_table_query2 IS STRING;
	EXEC SQL VAR l_table_query3 IS STRING;
	EXEC SQL VAR l_table_query4 IS STRING;
	EXEC SQL VAR l_table_query5 IS STRING;
	
	EXEC SQL VAR l_criteria_query1 IS STRING;
	EXEC SQL VAR l_criteria_query2 IS STRING;
	EXEC SQL VAR l_criteria_query3 IS STRING;
	EXEC SQL VAR l_table_parameter IS STRING;
	EXEC SQL VAR l_general_param IS STRING;
	EXEC SQL VAR l_client IS STRING;
	EXEC SQL VAR l_sub_client IS STRING;
	EXEC SQL VAR l_start_date IS STRING;
	EXEC SQL VAR l_group_parameter IS STRING;
	EXEC SQL VAR l_group_query IS STRING;
	EXEC SQL VAR l_group_desc IS STRING;

	EXEC SQL VAR l_grand_round1 IS STRING;
	EXEC SQL VAR l_grand_round2 IS STRING;
	EXEC SQL VAR l_grand_round3 IS STRING;

	EXEC SQL VAR g_setting_flag IS STRING;
	EXEC SQL VAR l_grand_display IS STRING;

	EXEC SQL VAR complex_criteria_query IS STRING;
	EXEC SQL VAR complex_criteria_query1 IS STRING;
	EXEC SQL VAR l_header_query IS STRING;
	EXEC SQL VAR l_header_query1 IS STRING;
	EXEC SQL VAR l_footer_query IS STRING;
	EXEC SQL VAR l_footer_query1 IS STRING;
	EXEC SQL VAR l_complex_criteria_data IS STRING;
	EXEC SQL VAR complex_criteria IS STRING;
	EXEC SQL VAR l_web_login_id IS STRING;
	EXEC SQL VAR l_web_rpt_id IS STRING;
	EXEC SQL VAR l_web_source_from IS STRING;
	EXEC SQL VAR l_web_report_dt IS STRING;
	EXEC SQL VAR l_web_proc_id IS STRING;
	EXEC SQL END DECLARE SECTION;
	
	strcpy(l_init_path,getenv("INTL_ROOT_PATH"));
	strcat(l_init_path,"intl_sun.cfg");
	
	if((l_init_file = fopen(l_init_path,"r")) == (FILE *)NULL)
	{
		fprintf(fl_userlog,"Failed to Open file for PATH :|%s|\n",l_init_path);
		printf("Failed to Open file for PATH :|%s|\n",l_init_path);
		APL_GOBACK_FAIL
	}

	fprintf(fl_userlog,"COMPRESS FLAG :|%s|\n",l_compress_flag);
	
	if(strlen(l_compress_flag) > 0 && !strcmp(l_compress_flag,"Y"))
	{
		if (APL_FAILURE == CO_ReadToken(l_init_file,"INTL_TEMP_PATH",l_report_path,l_debug_info_ptr))
		{
			fprintf(fl_userlog,"Error : INTL_TEMP_PATH not set in intl_sun.cfg File \n");
			
			printf("Error : INTL_TEMP_PATH not set in intl_sun.cfg File \n");
			
			APL_GOBACK_FAIL
		}
	}
	else
	{
		if (APL_FAILURE == CO_ReadToken(l_init_file,"INTL_REP_PATH",l_report_path,l_debug_info_ptr))
		{
			fprintf(fl_userlog,"Error :\'INTL_REP_PATH \' not set in intl_sun.cfg File \n");
			
			printf("Error :INTL_REP_PATH not set in intl_sun.cfg File \n");
			
			APL_GOBACK_FAIL
		}
	}
		
	l_int_no_field = 0;

	fprintf(fl_userlog,"l_chr_param:|%s|\n",l_chr_param);
	
	if (CO_SplitStr(l_chr_param,PARAMSEP,&l_int_no_field,&l_field_val) == APL_FAILURE)
	{
		CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_chr_param);
		APL_GOBACK_FAIL
	}

	fprintf(fl_userlog,"l_int_no_field:|%d|\n",l_int_no_field);
	
	if(l_int_no_field > 0)
	{
		for(int_no=0;int_no<l_int_no_field;int_no++)
		{
			if(int_no == 1)
			strcpy(l_param1,l_field_val[int_no]);
			else if(int_no == 2)
			strcpy(l_param2,l_field_val[int_no]);
			else if(int_no == 3)
			strcpy(l_param3,l_field_val[int_no]);
			else if(int_no == 4)
			strcpy(l_param4,l_field_val[int_no]);
			else if(int_no == 5)
			strcpy(l_param5,l_field_val[int_no]);
		}
	}
	
	
			/*Pasha Added for AMFI Enhancement Report Naming convention */

	l_int_no_field = 0;

	Alert("l_rep_name |%s|\n",l_rep_name);


	if (CO_SplitStr(l_rep_name,'@',&l_int_no_field,&l_field_val) == APL_FAILURE)
	{
		CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_chr_param);
		APL_GOBACK_FAIL
	}


	fprintf(fl_userlog,"l_int_no_field:|%d|\n",l_int_no_field);
		
	if(l_int_no_field > 0)
	{
				EXEC SQL select to_char(sys_date,'dd'), to_char(sys_date,'mm'),to_char(sys_date,'yy')
					INTO :l_char_dd, :l_char_mm, :l_char_yy
					from  pro_sys_date;

			Alert(" l_client |%s|\n",l_client);
			Alert(" l_char_dd |%s|\n",l_char_dd);
			Alert(" l_char_mm |%s|\n",l_char_mm);
			Alert(" l_char_yy |%s|\n",l_char_yy);
			

		for(int_no=1;int_no<l_int_no_field;int_no++)
		{
				memset(temp,APL_NULL_CHAR,20);	

			strcpy(temp,l_field_val[int_no]);
			
			if(!strcmp(temp,"DD"))
			{
				if(strlen(l_report_name) > 0)
					strcat(l_report_name,l_char_dd);
				else
					strcpy(l_report_name,l_char_dd);
			}
			else if(!strcmp(temp, "MM"))
			{
				if(strlen(l_report_name) > 0)
					strcat(l_report_name,l_char_mm);
				else
					strcpy(l_report_name,l_char_mm);
			}
			else if(!strcmp(temp, "YY"))
			{
				if(strlen(l_report_name) > 0)
					strcat(l_report_name,l_char_yy);
				else
					strcpy(l_report_name,l_char_yy);
			}
			else if(!strcmp(temp, "PARAM"))
			{
				if(strlen(l_report_name) > 0)
					strcat(l_report_name,"PARAM");
				else
					strcpy(l_report_name,"PARAM");
			}
			else 
			{
				if(strlen(l_report_name) > 0)
					strcat(l_report_name,temp);
				else
					strcpy(l_report_name,temp);
			}

		}
		strcat(l_report_name,".xls");

	Alert("Bagee - l_report_name:|%s|\n",l_report_name);

	}

	else
	{

		EXEC SQL SELECT TO_CHAR(SYSDATE,'DD_MON_YYYY')||CHR(95)||TO_CHAR(SYSDATE,'HH24_MI_SS')		
					INTO :l_time_stamp
					FROM DUAL;

		sprintf(l_report_name,"%s_%s_%s.xls",l_client,l_rept_id,l_time_stamp);

	}

	sprintf(l_report_path, "%s%s",l_report_path,l_report_name);

	if(strlen(l_compress_flag) > 0 && !strcmp(l_compress_flag,"Y"))
	{
		EXEC SQL INSERT INTO REPORT_LIST VALUES (:g_dynamic_seq,:l_report_name);

		IS_ANY_ORA_ERROR
	}

			/* End of Change */

	fprintf(fl_userlog,"REPORT FILE PATH 2:|%s|\n",l_report_path);
   
	if((l_report_XLS1 = fopen(l_report_path,"w")) == (FILE *) NULL)
	{
		CO_InsertErr(l_debug_info_ptr,"FILE NOT FOUND",APL_NULL_STRING,
						APL_NULL_STRING,APL_NULL_STRING,	
						 __LINE__,__FILE__);
		fprintf(fl_userlog,"Error : File not Found For Report PATH :|%s|\n",l_report_path);
		APL_GOBACK_FAIL
	}

	/**** For Entry in PRO_COMMON_REPORT ********************************************************/
	
	//fprintf(fl_userlog,"LENGTH OF l_compress_flag :|%d|\n",strlen(l_compress_flag)); Changes done for AIX Migration
	fprintf(fl_userlog,"LENGTH OF l_compress_flag :|%d|\n",(int)strlen(l_compress_flag));

	if(strlen(l_compress_flag) == 0 || !strcmp(l_compress_flag,"N"))
	{
	    strcpy(l_intl_rept_struct_ha.report_name,l_report_name);
	    strcat(l_intl_rept_struct_ha.report_name,"\0");
	    strcpy(l_intl_rept_struct_ha.report_desc,APL_REP_DESC);
	    strcat(l_intl_rept_struct_ha.report_desc,"\0");
	    strcpy(l_intl_rept_struct_ha.report_date,l_start_date);
	    l_intl_rept_struct_ha.report_width = 200 ;
	    strcpy(l_intl_rept_struct_ha.task_desc,"DynamicReport");
	    strcpy(l_intl_rept_struct_ha.fe_be_ind,"B");
	    strcpy(l_intl_rept_struct_ha.usr,l_user);

		 fprintf(fl_userlog,"Entering CO_Proc_RptIns2\n");
		
		 fprintf(fl_userlog,"report_name:|%s|\n",l_intl_rept_struct_ha.report_name);
		 
		 fprintf(fl_userlog,"report_desc:|%s|\n",l_intl_rept_struct_ha.report_desc);
		 
		 fprintf(fl_userlog,"report_date:|%s|\n",l_intl_rept_struct_ha.report_date);
		 //fflush(fl_userlog);
		 //fprintf(fl_userlog,"report_width:|%ld|\n",l_intl_rept_struct_ha.report_width); Changes done for AIX Migration
		 fprintf(fl_userlog,"report_width:|%d|\n",l_intl_rept_struct_ha.report_width);
		
		 fprintf(fl_userlog,"task_desc:|%s|\n",l_intl_rept_struct_ha.task_desc);
		 
		 fprintf(fl_userlog,"fe_be_ind:|%s|\n",l_intl_rept_struct_ha.fe_be_ind);
		
		 fprintf(fl_userlog,"usr:|%s|\n",l_intl_rept_struct_ha.usr);
	   
	    //if(APL_FAILURE == CO_Proc_DBRptIns(l_intl_rept_struct_ha,l_debug_info_ptr))
if(APL_FAILURE == CO_Proc_DBRptIns(&l_intl_rept_struct_ha,l_debug_info_ptr))/*'&'Added For AIX Migration*/
	    {
			fprintf(fl_userlog,"Error : Failure From CO_Proc_RptIns\n");
		  	APL_GOBACK_FAIL
	    }
		
		if((strlen(l_web_source_from) > 0) && !(strcmp(l_web_source_from,"W")))
		{
			EXEC SQL CALL SP_SHOW_REAL_TIME_REPORT_IN_WC(:l_report_name,:l_web_report_dt,:l_web_login_id,:l_report_path,:l_rept_id);
			
			if(sqlca.sqlcode < 0)
			{
				printf("Error : Failed From Stored Procedure SP_SHOW_REAL_TIME_REPORT_IN_WC ERR DESC :|%d|\n",sqlca.sqlcode);
				fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_SHOW_REAL_TIME_REPORT_IN_WC ERR DESC :|%d|\n",sqlca.sqlcode);
			}
	    }
	}

	/****************************************************************************************/

   	/******** Starting of HTML and META tag *************************************************/
	
	fprintf(l_report_XLS1,"<HTML xmlns:v=\"urn:schemas-microsoft-com:vml\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns:o=\"urn:schemas-microsoft-com:office:office\"><HEAD>\n");
   
	
	fprintf(l_report_XLS1,"<META http-equiv='Content-Type' content='text/html; charset=UTF-8'></META>\n");
  

	fprintf(fl_userlog,"REPORT ID :|%s|\n",l_rept_id);
	EXEC SQL SELECT * INTO :h_report_main_struct
				FROM REPORT_MAIN
				WHERE REPORT_ID=:l_rept_id;	

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Failed to Access REPORT_MAIN Table --- ORA ERROR :|%d|\n",sqlca.sqlcode);
	}


	EXEC SQL SELECT MAX(NO_OF_COLUMNS) INTO :l_colspan FROM REPORT_DETAILS WHERE REPORT_ID=:l_rept_id;

    /*   vivekananda.k added for UAT Issue Log 5.7 --- 17/02/2009 ----start  */
	if( l_colspan <= 3 )
	{
	   l_colspan = l_colspan + 4;
	}
	
      /*   vivekananda.k added for UAT Issue Log 5.7 --- 17/02/2009 ----end  */
	 
	/****** Report_Type check ******************************************/

	strcpy(l_report_type,h_report_main_struct.report_type);
	strcpy(header_query,h_report_main_struct.header_query);

	printf("l_report_type :|%s|\n",l_report_type);

	fprintf(fl_userlog,"Report_Type 3:|%s|\n",l_report_type);
	
	/************ For Dynamic Style Sheet Display *************************/

	fprintf(fl_userlog,"Before REPORT_SYSPARM ---- \n");

	EXEC SQL SELECT A.DEFAULT_SETTING,A.STYLE,A.STYLE_LT 
	         INTO :g_setting_flag,:g_style,:g_style_lt
		 FROM REPORT_SYSPARAM A, MT_COMMON_SYS_PARAMS B 
		 WHERE A.BANK_CODE=B.INSTALLED_AT_BANK;

        fprintf(fl_userlog,"After REPORT_SYSPARM Ora Error :|%d|\n",sqlca.sqlcode);

	fprintf(fl_userlog,"DEFAULT_SETTING :|%s|\n",g_setting_flag);

	/***********************************************************************/

	if(!strcmp(l_report_type,"L"))
	{			
		fprintf(l_report_XLS1,"%s\n",g_style_lt);
		strcpy(g_table_border,"1");
	}
	else
	{
		fprintf(l_report_XLS1,"%s\n",g_style);
		strcpy(g_table_border,"1");
	}
	
	/*********************************************************************/

	fprintf(l_report_XLS1,"</HEAD>\n");

	fprintf(l_report_XLS1,"<BODY>\n");
	
	fprintf(l_report_XLS1,"<TABLE WIDTH = \"100%\">\n");
	
	
	/***** Image path ****************************************************************/

   	fprintf(fl_userlog,"Before Image :- Compress Flag :|%s|\n",l_compress_flag);

	if(strlen(h_report_main_struct.image_path) > 0)
	{
		fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" class=\'heading\'><TR><TD WIDTH=\"20%%\" ALIGN=\"LEFT\"><IMG id=\"image\" SRC=\"%s\" ALIGN=\"LEFT\" HEIGHT=\"60\" WIDTH=\"150\"/></TD>\n",h_report_main_struct.image_path);
	}


	
	/******* Page Header *************************************************************/
	
	if(strlen(h_report_main_struct.page_header) > 0 )
	{
		fprintf(l_report_XLS1,"<TABLE WIDTH=\"80%\"><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"CENTER\" class=\'heading\' ><I>%s</I></TD></TR></TABLE>\n",l_colspan,h_report_main_struct.page_header);
      
		g_line_count =2;
	}



	fprintf(l_report_XLS1,"</TABLE>\n");
	l_page_header = h_report_main_struct.page_hdr_brk;
	
	if(l_page_header > 0)
	{
		fprintf(l_report_XLS1,"<TABLE>\n");
		while(l_page_header > 0 )
		{
			fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
			
					
			l_page_header -- ;
			g_line_count++;
		}
		fprintf(l_report_XLS1,"</TABLE>\n");
	}

	if(strcmp(l_report_type,"L"))
	{			
		fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
		fprintf(l_report_XLS1,"<TD ALIGN=\"LEFT\" COLSPAN=\'%d\' class=\'ez4\'>Date : %s</TD>\n",l_colspan,l_start_date);
		fprintf(l_report_XLS1,"<TR></TABLE>\n");
		g_line_count++;
	}
	
	fprintf(l_report_XLS1,"<TABLE><TR><TD></TD></TR></TABLE>\n");
	g_line_count++;

	
	/********** Page Break Variables *************************/

	p_total_page_no = 1;

	l_landscape = 36;
	l_portrait = 56;
	l_tolarence = 2;

	strcpy(l_paging_flag,h_report_main_struct.paging_flag);
	strcpy(l_print_flag,h_report_main_struct.print_type);
	l_main_page_recs=h_report_main_struct.main_page_recs;
	l_next_page_recs=h_report_main_struct.next_page_recs;

	fprintf(fl_userlog,"l_paging_flag :|%s|\n",l_paging_flag);
	fprintf(fl_userlog,"l_print_flag :|%s|\n",l_print_flag);
	fprintf(fl_userlog,"l_main_page_recs :|%d|\n",l_main_page_recs);
	fprintf(fl_userlog,"l_next_page_recs :|%d|\n",l_next_page_recs);


	/******* Stored procedure for REPORT MAIN ******************************************/
		
	fprintf(fl_userlog,"l_rept_id:|%s|\n",l_rept_id);
	fprintf(fl_userlog,"l_param1:|%s|\t l_param2:|%s|\n",l_param1,l_param2);
	fprintf(fl_userlog,"l_param3:|%s|\t l_param4:|%s|\n",l_param3,l_param4);
	fprintf(fl_userlog,"l_param5:|%s|\t l_param6:|%s|\n",l_param5,l_param6);
	
	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_MAIN for Report ID 2:|%s||%s|\n",l_rept_id,l_param1);	
	
	EXEC SQL CALL SP_REPORT_MAIN(:l_rept_id,:l_param1,:l_param2,:l_param3,:l_param4,
					:l_param5,:l_param6,:l_gen_query,:l_error_desc);
	
	if(sqlca.sqlcode < 0)
	{
		fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_MAIN ERR DESC :|%s|\n",l_error_desc);
		//fflush(fl_userlog);
	}
	
	fprintf(fl_userlog,"GENERAL QUERY 2:|%s|\n",l_gen_query);
	if(strlen(l_gen_query) > 0)
	{
	
	EXEC SQL PREPARE XLS1_GEN FROM :l_gen_query;
	EXEC SQL DECLARE XLS1genquerycurr CURSOR FOR XLS1_GEN;
	EXEC SQL OPEN XLS1genquerycurr;
	
	if(sqlca.sqlcode < 0)
	{
		fprintf(fl_userlog,"Error : Failed to OPEN XLS1genquerycurr CURSOR :|%d|\n",sqlca.sqlcode);
	}

	for(;;)
	{
		EXEC SQL FETCH XLS1genquerycurr
			INTO :l_general_param;
		
		if(sqlca.sqlcode == 1403)
		break;
		
	         if(sqlca.sqlcode < 0)
		 {
		    fprintf(fl_userlog,"Error : GENERAL QUERY Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
			
		    break;
		 }
		
		fprintf(fl_userlog,"l_general_param 2:|%s|\n",l_general_param);

		strcpy(l_general_parameter,l_general_param);
	
		/**** Split General Query and fetch the value in seperate parameter *******************/
		
		if (CO_SplitStr(l_general_parameter,CAPSEP,&l_param_num,&l_param_val) == APL_FAILURE)
		{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_general_parameter);
				
			 	APL_GOBACK_FAIL
		}

	
		fprintf(fl_userlog,"l_param_num:|%d|\n",l_param_num);	
		
		for(k=0;k<l_param_num;k++)
		{
			strcpy(l_param,l_param_val[k]);

			/********* Before Title of report ***************************************************/
			
			if(k == 0)
			{
				if(strlen(h_report_main_struct.before_title_align) > 0)
				{	
					if(strlen(h_report_main_struct.before_title) > 0)
					{
						fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						
						fprintf(l_report_XLS1,"<TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\" class=\'ez4\'>%s %s</TD>\n",l_colspan,h_report_main_struct.before_title_align,h_report_main_struct.before_title,l_param);
						
						fprintf(l_report_XLS1,"</TR></TABLE>\n");
						

						g_line_count++;
					}
				}
				else
				{
					if(strlen(h_report_main_struct.before_title) > 0)
					{
						fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						
						fprintf(l_report_XLS1,"<TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\" class=\'ez4\'>%s %s</TD>\n",l_colspan,h_report_main_struct.before_title,l_param);
						
						fprintf(l_report_XLS1,"</TR></TABLE>\n");
						

						g_line_count++;
					}

				}
	
				l_before_title = h_report_main_struct.before_title_brk;

				if(l_before_title > 0)
				{
					fprintf(l_report_XLS1,"<TABLE>\n");
					
					while(l_before_title > 0 )
					{
						fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
						
								
						l_before_title -- ;
						g_line_count++;
					}
					fprintf(l_report_XLS1,"</TABLE>\n");
					
				}


			}
			else if(k == 1)
			{
				if(strlen(h_report_main_struct.before_title1_align) > 0)
				{	
					if(strlen(h_report_main_struct.before_title1) > 0)
					{
						fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						
						fprintf(l_report_XLS1,"<TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\" class=\'ez4\'>%s %s</TD>\n",l_colspan,h_report_main_struct.before_title1_align,h_report_main_struct.before_title1,l_param);
						
						fprintf(l_report_XLS1,"</TR></TABLE>\n");
						

						g_line_count++;
					}
				}
				else
				{
					if(strlen(h_report_main_struct.before_title1) > 0)
					{
						fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						
						fprintf(l_report_XLS1,"<TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\" class=\'ez4\'>%s %s</TD>\n",l_colspan,h_report_main_struct.before_title1,l_param);
						
						fprintf(l_report_XLS1,"</TR></TABLE>\n");
						

						g_line_count++;
					}

				}
	
				l_before_title1 = h_report_main_struct.before_title1_brk;
				if(l_before_title1 > 0)
				{
					fprintf(l_report_XLS1,"<TABLE>\n");
					
					while(l_before_title1 > 0 )
					{
						fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
						
								
						l_before_title1 -- ;
						g_line_count++;
					}
					fprintf(l_report_XLS1,"</TABLE>\n");
					
				}
			}
			else if(k == 2)
			{
				if(strlen(h_report_main_struct.before_title2_align) > 0)
				{	
					if(strlen(h_report_main_struct.before_title2) > 0)
					{
						fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						
						fprintf(l_report_XLS1,"<TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\" class=\'ez4\'>%s %s</TD>\n",l_colspan,h_report_main_struct.before_title2_align,h_report_main_struct.before_title2,l_param);
						
						fprintf(l_report_XLS1,"</TR></TABLE>\n");
						

						g_line_count++;
					}
				}
				else
				{
					if(strlen(h_report_main_struct.before_title2) > 0)
					{
						fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						
						fprintf(l_report_XLS1,"<TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\" class=\'ez4\'>%s %s</TD>\n",l_colspan,h_report_main_struct.before_title2,l_param);
						
						fprintf(l_report_XLS1,"</TR></TABLE>\n");
						

						g_line_count++;
					}

				}
	
				l_before_title2 = h_report_main_struct.before_title2_brk;
				if(l_before_title2 > 0)
				{
					fprintf(l_report_XLS1,"<TABLE>\n");
					
					while(l_before_title2 > 0 )
					{
						fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
						
								
						l_before_title2 -- ;
						g_line_count++;
					}
					fprintf(l_report_XLS1,"</TABLE>\n");
					
				}
			}
			else if(k == 3)
			{
				if(strlen(h_report_main_struct.before_title3_align) > 0)
				{	
					if(strlen(h_report_main_struct.before_title3) > 0)
					{
						fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						
						fprintf(l_report_XLS1,"<TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\" class=\'ez4\'>%s %s</TD>\n",l_colspan,h_report_main_struct.before_title3_align,h_report_main_struct.before_title3,l_param);
						
						fprintf(l_report_XLS1,"</TR></TABLE>\n");
						

						g_line_count++;
					}
				}
				else
				{
					if(strlen(h_report_main_struct.before_title3) > 0)
					{
						fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						
						fprintf(l_report_XLS1,"<TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\" class=\'ez4\'>%s %s</TD>\n",l_colspan,h_report_main_struct.before_title3,l_param);
						
						fprintf(l_report_XLS1,"</TR></TABLE>\n");
						

						g_line_count++;
					}
				}
	
				l_before_title3 = h_report_main_struct.before_title3_brk;
				if(l_before_title3 > 0)
				{
					fprintf(l_report_XLS1,"<TABLE>\n");
					
					while(l_before_title3 > 0 )
					{
						fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
						
								
						l_before_title3 -- ;
						g_line_count++;
					}
					fprintf(l_report_XLS1,"</TABLE>\n");
					
				}
			}	

		}

	}
	EXEC SQL CLOSE XLS1genquerycurr;
	
	}
	
/******* Dynamic Header Display ************************************************/

	fprintf(fl_userlog,"strlen(header_query) :|%d|\n",strlen(header_query));
  
	if(strlen(header_query) > 0)
	{

	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_HEADER :|%s||%s|\n",l_rept_id,l_param1);	
	
	printf("Calling Stored Procedure SP_REPORT_HEADER :|%s||%s|\n",l_rept_id,l_param1);		
	EXEC SQL CALL SP_REPORT_HEADER(:l_rept_id,:l_param1,:l_param2,
				:l_param3,:l_param4, :l_param5,
				:l_param6,:l_header_query,:l_header_query1,:l_error_desc);

	strcat(l_header_query,l_header_query1);

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_HEADER ERR DESC :|%s|\n",l_error_desc);
	}

	fprintf(fl_userlog,"HEADER QUERY :|%s|\n",l_header_query);
    
	EXEC SQL PREPARE XLS1_HEADER_CURR FROM :l_header_query;

	EXEC SQL DECLARE xls1_header_curr CURSOR FOR XLS1_HEADER_CURR;
	
	fprintf(fl_userlog,"After DECLARE xls1_header_curr Ora Error :|%d|\n",sqlca.sqlcode);

	EXEC SQL OPEN xls1_header_curr;

	EXEC SQL FETCH xls1_header_curr INTO :l_header_query_value;

	fprintf(fl_userlog,"After FETCH xls1_header_curr Ora Error :|%d|\n",sqlca.sqlcode);
   
	EXEC SQL CLOSE xls1_header_curr;

	fprintf(fl_userlog,"l_header_query_value :|%s|\n",l_header_query_value);
	if (CO_SplitStr(l_header_query_value,CAPSEP,&l_header_num,&l_header_val) == APL_FAILURE)
	{
		CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_header_query_value);
	//	//fflush(fl_userlog);
		APL_GOBACK_FAIL
	}

	fprintf(fl_userlog,"l_header_num :|%d|\n",l_header_num);
	if(l_header_num > 0)
	{
		for(i=0;i<l_header_num;i++)
		{
			if(i == 0)
			strcpy(l_header1,l_header_val[i]);
			else if(i == 1)
			strcpy(l_header2,l_header_val[i]);
			else if(i == 2)
			strcpy(l_header3,l_header_val[i]);
			else if(i == 3)
			strcpy(l_header4,l_header_val[i]);
			else if(i == 4)
			strcpy(l_header5,l_header_val[i]);
			else if(i == 5)
			strcpy(l_header6,l_header_val[i]);
			else if(i == 6)
			strcpy(l_header7,l_header_val[i]);
			else if(i == 7)
			strcpy(l_header8,l_header_val[i]);
			else if(i == 8)
			strcpy(l_header9,l_header_val[i]);
			else if(i == 9)
			strcpy(l_header10,l_header_val[i]);
			else if(i == 10)
			strcpy(l_header11,l_header_val[i]);
			else if(i == 11)
			strcpy(l_header12,l_header_val[i]);
			else if(i == 12)
			strcpy(l_header13,l_header_val[i]);
			else if(i == 13)
			strcpy(l_header14,l_header_val[i]);
			else if(i == 14)
			strcpy(l_header15,l_header_val[i]);
		}
	}

	/****** Stored Procedure : SP_REPORT_HEADER_DATA ***********************************/

	fprintf(fl_userlog,"l_header1 :|%s|\t l_header2 :|%s|\n",l_header1,l_header2);
	fprintf(fl_userlog,"l_header3 :|%s|\t l_header4 :|%s|\n",l_header3,l_header4);
	fprintf(fl_userlog,"l_header5 :|%s|\t l_header6 :|%s|\n",l_header5,l_header6);
     
	fprintf(fl_userlog,"l_header7 :|%s|\t l_header8 :|%s|\n",l_header7,l_header8);
	fprintf(fl_userlog,"l_header9 :|%s|\t l_header10 :|%s|\n",l_header9,l_header10);
	fprintf(fl_userlog,"l_header11 :|%s|\t l_header12 :|%s|\n",l_header11,l_header12);
	fprintf(fl_userlog,"l_header13 :|%s|\t l_header14 :|%s|\n",l_header13,l_header14);
	fprintf(fl_userlog,"l_header15 :|%s|\t\n",l_header15);

	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_HEADER_DATA :|%s|\n",l_rept_id);	
    	
	printf("Calling Stored Procedure SP_REPORT_HEADER_DATA :|%s|\n",l_rept_id);		
	EXEC SQL CALL SP_REPORT_HEADER_DATA(:l_rept_id,:l_header1,
					    :l_header2,:l_header3,
					    :l_header4,:l_header5,
					    :l_header6,:l_header7,
					    :l_header8,:l_header9,
					    :l_header10,:l_header11,
					    :l_header12,:l_header13,
					    :l_header14,:l_header15,
					    :l_header_data,:l_error_desc); 

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_HEADER_DATA ERR DESC :|%s|\n",l_error_desc);
	}

	fprintf(fl_userlog,"HEADER DATA :|%s|\n",l_header_data);

	/************ Dynamic Formating Procedure ********************************************/
	
	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);	
	printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);	
      	
	
	EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_header_data,:l_error_desc); 

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
	}

	fprintf(fl_userlog,"HEADER DATA After Formatting -- :|%s|\n",l_header_data);

	/*************************************************************************************/

	fprintf(fl_userlog,"strlen(l_header_data) :|%d|\n",strlen(l_header_data));
	
	if(strlen(l_header_data) > 0)
	{
		fprintf(fl_userlog,"Displaying Header Data ----- \n");

		fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\"><TR>\n");
		fprintf(l_report_XLS1,"<TD WIDTH=\"100%%\" colspan=\'%d\' ALIGN=\"%s\" class=\'headerdata\'>%s</TD>\n",l_colspan,h_report_main_struct.header_data_align,l_header_data);
		fprintf(l_report_XLS1,"</TR></TABLE>\n");
	}

	l_header_brk = h_report_main_struct.header_brk;
	while(l_header_brk > 0)
	{
		fprintf(l_report_XLS1,"</BR>\n");
		l_header_brk --;
		g_line_count++;
	}

	}
	
	/**********************  End Of Dynamic Header Display   ***************************/


	/***** Report Title ****************************************************************/

	if(strlen(h_report_main_struct.report_title_align) > 0)
	{	
		if(strlen(h_report_main_struct.report_title) > 0)	
		{
 			fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\"  class=\'ez4\'><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\" class=\'ez4\'>%s</TD></TR></TABLE>\n",l_colspan,h_report_main_struct.report_title_align,h_report_main_struct.report_title);
			
			g_line_count++;
		}
	}
	else
	{
		if(strlen(h_report_main_struct.report_title) > 0)	
		{
 			fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\"  class=\'ez4\'><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\'  ALIGN=\"LEFT\" class=\'ez4\'>%s</TD></TR></TABLE>\n",l_colspan,h_report_main_struct.report_title);	
			
			g_line_count++;
		}

	}
	
	l_report_title = h_report_main_struct.report_title_brk;	
	if(l_report_title > 0)
	{
		fprintf(l_report_XLS1,"<TABLE>\n");
		while(l_report_title > 0 )
		{
			fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
			
			l_report_title -- ;
			g_line_count++;
		}
		fprintf(l_report_XLS1,"</TABLE>\n");
	}
	

	/******** After report title ****************************************************************/
	
	if(strlen(h_report_main_struct.after_title_align) > 0)
	{
		if(strlen(h_report_main_struct.after_title) > 0)
		{
			fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" class=\'ez4\'><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\'  ALIGN=\"%s\" class=\'ez4\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_main_struct.after_title_align,h_report_main_struct.after_title);
         
			g_line_count++;
		}
	}
	else
	{
		if(strlen(h_report_main_struct.after_title) > 0)
		{
			fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" class=\'ez4\'><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\'  ALIGN=\"LEFT\" class=\'ez4\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_main_struct.after_title);
        
			g_line_count++;
		}

	}
	
	l_after_title = h_report_main_struct.after_title_brk;
	if(l_after_title > 0)
	{
		fprintf(l_report_XLS1,"<TABLE>\n");
		while(l_after_title > 0 )
		{
			fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
			//fflush(fl_userlog);
					
			l_after_title -- ;
			g_line_count++;
		}
		fprintf(l_report_XLS1,"</TABLE>\n");
	}
	

	l_table_id = 1;
	
	fprintf(fl_userlog,"NO OF TABLES :|%d|\n",h_report_main_struct.no_of_tables);
	
	fprintf(fl_userlog,"Report Type is |%s|\n",h_report_main_struct.report_type);

	if(!strcmp(h_report_main_struct.report_type,"G"))/*added by siva.ganapathi for Enh. Log 121 on 2/20/2009 -- started*/
	{
		
		
			EXEC SQL SELECT * INTO :h_report_details_struct
							FROM REPORT_DETAILS 
							WHERE REPORT_ID=:l_rept_id
							AND TABLE_ID=:l_table_id;
			
		strcpy(l_group_query,h_report_details_struct.group_query);
		
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM1',:l_param1) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM2',:l_param2) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM3',:l_param3) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM4',:l_param4) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM5',:l_param5) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM6',:l_param6) INTO :l_group_query FROM DUAL;
					
		fprintf(fl_userlog,"GROUP QUERY :|%s|\n",l_group_query);
		
		EXEC SQL PREPARE XLS1_GROUP FROM :l_group_query;
		EXEC SQL DECLARE xls1_group_g CURSOR FOR XLS1_GROUP;
		EXEC SQL OPEN xls1_group_g;

		if(sqlca.sqlcode < 0)
		{
				fprintf(fl_userlog,"Error : Cursor Open xls1_group_g ORA ERROR :|%d|\n",sqlca.sqlcode);
				
		}

		for(;;)
		{
			
			EXEC SQL FETCH xls1_group_g INTO :l_group_parameter;

			if((sqlca.sqlcode == 1403)||(l_group_break_flag == 1))
			break;

			for(l_table_id=1; l_table_id <= h_report_main_struct.no_of_tables; l_table_id++)
			{
				g_complex_parameter1 = 0.0;
				g_complex_parameter2 = 0.0;
				g_complex_parameter3 = 0.0;
				g_complex_parameter4 = 0.0;
				g_complex_parameter5 = 0.0;
				g_complex_parameter6 = 0.0;
				g_complex_parameter7 = 0.0;
				g_complex_parameter8 = 0.0;
				g_complex_parameter9 = 0.0;
				g_complex_parameter10 = 0.0;
				g_complex_parameter11 = 0.0;
				g_complex_parameter12 = 0.0;
				g_complex_parameter13 = 0.0;
				g_complex_parameter14 = 0.0;
				g_complex_parameter15 = 0.0;
				g_complex_parameter16 = 0.0;
				g_complex_parameter17 = 0.0;
				g_complex_parameter18 = 0.0;
				g_complex_parameter19 = 0.0;
				g_complex_parameter20 = 0.0;

				fprintf(fl_userlog,"l_rept_id:|%s|l_table_id:|%d|\n",l_rept_id,l_table_id);
				
				
				/******* Fetch the REPORT DETAILS for the perticular report ID and table ID ******************/
				
				
					EXEC SQL SELECT * INTO :h_report_details_struct
							FROM REPORT_DETAILS 
							WHERE REPORT_ID=:l_rept_id
							AND TABLE_ID=:l_table_id;
				
				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Failed to Access REPORT_DETAILS --- ORA ERROR :|%d|\n",sqlca.sqlcode);
					
				}
				
				/***** Table header *********************************************************************/

				fprintf(fl_userlog,"h_report_details_struct.table_hdr:|%s|\n",h_report_details_struct.table_hdr);
				
				if(strlen(h_report_details_struct.table_hdr_align) > 0)
				{
					if(strlen(h_report_details_struct.table_hdr) > 0)
					{
						fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" class=\'lableredbg\'><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\" class=\'lableredbg\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.table_hdr_align,h_report_details_struct.table_hdr);
                       
						g_line_count++;
					}
				}
				else
				{
					if(strlen(h_report_details_struct.table_hdr) > 0)
					{
						fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" class=\'lableredbg\'><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\" class=\'lableredbg\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.table_hdr);
                        
						g_line_count++;
					}
					
				}

				l_table_hdr = h_report_details_struct.table_hdr_brk;
				if(l_table_hdr > 0)
				{
					fprintf(l_report_XLS1,"<TABLE>\n");
					
					while(l_table_hdr > 0 )
					{
						fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
						
								
						l_table_hdr -- ;
						g_line_count++;
					}
					fprintf(l_report_XLS1,"</TABLE>\n");
					
				}

				fprintf(fl_userlog,"table id is:|%d|\n",l_table_id);
				

		if(l_table_id == 1)
		{		
							
						fprintf(fl_userlog,"table id is:|%d|\n",l_table_id);
						

						fprintf(fl_userlog,"h_report_details_struct.group_desc:|%s|\n",h_report_details_struct.group_desc);
						
						fprintf(fl_userlog,"h_report_details_struct.group_pos:|%s|\n",h_report_details_struct.group_pos);
						
					
						strcpy(l_group_pos,h_report_details_struct.group_pos);

						strcpy(l_group_desc,h_report_details_struct.group_desc);
						/******* Split Group Parameter ***************************************/
					
						fprintf(fl_userlog,"l_group_pos:|%s|\n",l_group_pos);
						
						
						if(CO_SplitStr(l_group_pos,COMASEP,&l_group_pos_no,&l_group_pos_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_pos);
							
							APL_GOBACK_FAIL
						}
						
						fprintf(fl_userlog,"l_group_parameter:|%s|\n",l_group_parameter);
						
						
						if(CO_SplitStr(l_group_parameter,CAPSEP,&l_group_parameter_no,&l_group_parameter_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_parameter);
							
							APL_GOBACK_FAIL
						}

						fprintf(fl_userlog,"l_group_pos_no:|%d|l_group_parameter_no:|%d|\n",l_group_pos_no,l_group_parameter_no);
						
						
						if((l_group_pos_no > 0) && (l_group_parameter_no > 0)
							&& (l_group_pos_no == l_group_parameter_no))
						{	
							l_group_break_flag=0;
						
							for(i=0;i<l_group_pos_no;i++)
							{
								if(!strcmp(l_group_pos_value[i],"2"))
								{
									fprintf(fl_userlog,"l_param2:|%s|l_prev_param2:|%s|\n",l_param2,l_prev_param2);
									
									
									if(!strcmp(l_param2,l_prev_param2))
									{
										strcpy(l_param2,l_group_parameter_value[i]);
										strcpy(l_prev_param2,l_param2);
									}
									else
										l_group_break_flag=1;
								}
								else if(!strcmp(l_group_pos_value[i],"3"))
								{
									fprintf(fl_userlog,"l_param3:|%s|l_prev_param3:|%s|\n",l_param3,l_prev_param3);
									
									
									if(!strcmp(l_param3,l_prev_param3))
									{
										strcpy(l_param3,l_group_parameter_value[i]);
										strcpy(l_prev_param3,l_param3);
									}
									else
										l_group_break_flag=1;
								}
								else if(!strcmp(l_group_pos_value[i],"4"))
								{
									fprintf(fl_userlog,"l_param4:|%s|l_prev_param4:|%s|\n",l_param4,l_prev_param4);
									
									
									if(!strcmp(l_param4,l_prev_param4))
									{
										strcpy(l_param4,l_group_parameter_value[i]);
										strcpy(l_prev_param4,l_param4);
									}
									else
										l_group_break_flag=1;
								}
								else if(!strcmp(l_group_pos_value[i],"5"))
								{
									fprintf(fl_userlog,"l_param5:|%s|l_prev_param5:|%s|\n",l_param5,l_prev_param5);
									
									if(!strcmp(l_param5,l_prev_param5))
									{
										strcpy(l_param5,l_group_parameter_value[i]);
										strcpy(l_prev_param5,l_param5);
									}
									else
										l_group_break_flag=1;
								}
								else if(!strcmp(l_group_pos_value[i],"6"))
								{
									fprintf(fl_userlog,"l_param6:|%s|l_prev_param6:|%s|\n",l_param6,l_prev_param6);
									
									if(!strcmp(l_param6,l_prev_param6))
									{
										strcpy(l_param6,l_group_parameter_value[i]);
										strcpy(l_prev_param6,l_param6);
									}
									else
										l_group_break_flag=1;
								}
							}
						}
						else
						{
							fprintf(fl_userlog,"Error: Mismatch in Group Parameters :|%d||%d|",l_group_pos_no,l_group_parameter_no);
							
							break;
						}


					/****************************************************************************/

					/********************* Record Count Query Part *****************************/
						
						EXEC SQL SELECT COUNT(TABLE_ID) INTO :l_table_numbers 
								 FROM REPORT_DETAILS
								 WHERE REPORT_ID=:l_rept_id;
						
						fprintf(fl_userlog,"AFTER COUNT(TABLE_ID) -- ORA Error 894:|%d|\n",sqlca.sqlcode);
                        
						fprintf(fl_userlog,"l_table_numbers 894:|%d|\n",l_table_numbers);
                        
						l_table_num = 1 ;

						l_record_count_flag = 0;

						l_record_count = 0;

						while(l_table_num <= l_table_numbers)
						{
							EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
												RECORD_COUNT_QUERY,'@PARAM1',:l_param1),
																   '@PARAM2',:l_param2),
																   '@PARAM3',:l_param3),
																   '@PARAM4',:l_param4),
																   '@PARAM5',:l_param5),
																   '@PARAM6',:l_param6),
										REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
												RECORD_COUNT_QUERY1,'@PARAM1',:l_param1),
																   '@PARAM2',:l_param2),
																   '@PARAM3',:l_param3),
																   '@PARAM4',:l_param4),
																   '@PARAM5',:l_param5),
																   '@PARAM6',:l_param6)
								  INTO :l_record_count_query,:l_record_count_query1
								  FROM REPORT_DETAILS 
								  WHERE REPORT_ID=:l_rept_id 
								  AND TABLE_ID = :l_table_num;

								fprintf(fl_userlog,"AFTER RECORD_COUNT_QUERY Select -- ORA Error :|%d|\n",sqlca.sqlcode);
								 //  //fflush(fl_userlog);

							strcpy(l_record_count_query_final,l_record_count_query);
							strcat(l_record_count_query_final,l_record_count_query1);

							fprintf(fl_userlog,"l_record_count_query_final :|%s|\n",l_record_count_query_final);
                            
							if(strlen(l_record_count_query_final) > 0)
							{
								EXEC SQL PREPARE XLS1_RECORD_COUNT FROM :l_record_count_query_final;

								EXEC SQL DECLARE XLS1_record_count_curr_g CURSOR FOR XLS1_RECORD_COUNT;

								EXEC SQL OPEN  XLS1_record_count_curr_g;

								if(sqlca.sqlcode < 0)
								{
									fprintf(fl_userlog,"Error : Failed To OPEN XLS1_record_count_curr_g CURSOR -- ORA Error :|%d|\n",sqlca.sqlcode);
									//fflush(fl_userlog);
									l_record_count_flag = 0;
								}

								EXEC SQL FETCH XLS1_record_count_curr_g INTO :l_record_count;

								if(sqlca.sqlcode < 0)
								{
									fprintf(fl_userlog,"Error : Failed To FETCH XLS1_record_count_curr_g CURSOR -- ORA Error :|%d|\n",sqlca.sqlcode);
									
									l_record_count_flag = 0;
								}

								EXEC SQL CLOSE XLS1_record_count_curr_g;

							}


							fprintf(fl_userlog,"l_record_count :|%d|\n",l_record_count);
							
							if(l_record_count > 0)
								l_record_count_flag = 1;

							l_table_num ++;

						}

				 
					fprintf(fl_userlog,"RECORD COUNT FLAG :|%d|\n",l_record_count_flag);
					
					printf("RECORD COUNT FLAG :|%d|\n",l_record_count_flag);
					

				   /***********************************************************************************/

					if((l_record_count_flag == 1)||(strlen(l_record_count_query_final) == 0))
					{
						
						fprintf(fl_userlog,"l_param1:|%s|\n",l_param1);
						
						fprintf(fl_userlog,"l_param2:|%s|\n",l_param2);
						
						fprintf(fl_userlog,"l_param3:|%s|\n",l_param3);
						
						fprintf(fl_userlog,"l_param4:|%s|\n",l_param4);
						
						fprintf(fl_userlog,"l_param5:|%s|\n",l_param5);
						
						fprintf(fl_userlog,"l_param6:|%s|\n",l_param6);
						


					/**** Stored procedure for REPORT DETAILS GROUPING **************************/
					
					fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID 9:|%s|\n",l_rept_id);
					
					printf("Calling Stored Procedure SP_REPORT_DETAIL for Report ID 10:|%s|\n",l_rept_id);
					
					
					EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
							:l_param2,:l_param3,:l_param4,
							:l_param5,:l_param6,
							:l_table_query,:l_table_query1,:l_table_query2,
							:l_table_query3,:l_table_query4,:l_table_query5,
							:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
							:l_group_desc,:l_error_desc);

					strcpy(table_query,l_table_query);
					strcat(table_query," ");
					
					if(strlen(l_table_query1) > 0)
					{
						strcat(table_query,l_table_query1);
						strcat(table_query," ");
					}
					if(strlen(l_table_query2) > 0)
					{
						strcat(table_query,l_table_query2);
						strcat(table_query," ");
					}
					if(strlen(l_table_query3) > 0)
					{
						strcat(table_query,l_table_query3);
						strcat(table_query," ");
					}
					if(strlen(l_table_query4) > 0)
					{
						strcat(table_query,l_table_query4);
						strcat(table_query," ");
					}
					if(strlen(l_table_query5) > 0)
					{
						strcat(table_query,l_table_query5);
						strcat(table_query," ");
					}
					
					strcat(table_query,APL_NULL_STRING);
						
					fprintf(fl_userlog,"After Stored Procedure SP_REPORT_DETAIL ORA ERROR 3:|%d|\n",sqlca.sqlcode);
					
					
					if(sqlca.sqlcode < 0)
					{
						fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
						
					}
					
					/*fprintf(fl_userlog,"table_query:|%s|\n",table_query);
					 //fflush(fl_userlog);*/
					fprintf(fl_userlog,"l_criteria_query1:|%s|\n",l_criteria_query1);
					
					fprintf(fl_userlog,"l_criteria_query2:|%s|\n",l_criteria_query2);
					
					fprintf(fl_userlog,"l_criteria_query3:|%s|\n",l_criteria_query3);
					
					fprintf(fl_userlog,"l_group_desc:|%s|\n",l_group_desc);
					

								/********* Group Description ***************************************************************/
								
								if(strlen(l_group_desc) > 0)
								{
									fprintf(l_report_XLS1,"<TABLE><TR><TD></TD></TR></TABLE>\n");
									
									fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR><TD COLSPAN=\'%d\' WIDTH=\'100%%\' class=\'ez4\'>%s</TD></TR></TABLE>\n",l_colspan,l_group_desc);
									
									fprintf(l_report_XLS1,"<TABLE><TR><TD></TD></TR></TABLE>\n");
									
									
									g_line_count++;
								}


								/****** Before table *******************************************************/
								
								if(strlen(h_report_details_struct.before_table_align) > 0)
								{
									if(strlen(h_report_details_struct.before_table) > 0)
									{	
										fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.before_table_align,h_report_details_struct.before_table);
                                          
										g_line_count++;
									}
								}
								else
								{
									if(strlen(h_report_details_struct.before_table) > 0)
									{	
										fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.before_table);
                                         
										g_line_count++;
									}

								}	
								
								l_before_table = h_report_details_struct.before_table_brk;
								if(l_before_table > 0)
								{
									fprintf(l_report_XLS1,"<TABLE>\n");
									
									while(l_before_table > 0 )
									{
										fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
										
												
										l_before_table -- ;
										g_line_count++;
									}
									fprintf(l_report_XLS1,"</TABLE>\n");
									
								}

				/******* Column Heading *****************************************************/
				
				/****** Multiple Column Level **************************************/

				strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
				strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
				strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
				
				fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);
				

				if(strlen(l_multiple_col_flag) > 0)
				{
					fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
					
					fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);
					

					if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
							&l_multiple_col_header_value) == APL_FAILURE)
					{
						 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
						
						 APL_GOBACK_FAIL
					}

					if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
							&l_multiple_colspan_sep_value) == APL_FAILURE)
					{
						 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
						 
						 APL_GOBACK_FAIL
					}


					fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
					
					fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);
					

					fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border=\'%s\' cellSpacing=\'0\' cellPadding=\'1\'>\n",g_table_border);
					

					if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
					{
						for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
						{
							for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
							{
							
							if(int_a == int_b )
							{
							
							strcpy(l_level_header,l_multiple_col_header_value[int_a]);
							strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

							fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
						//	//fflush(fl_userlog);
							fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);
							

							if (CO_SplitStr(l_level_header,
									SEMISEP,
									&l_level_header_no,
									&l_level_header_value) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
								 
								 APL_GOBACK_FAIL
							}

							if (CO_SplitStr(l_level_colspan,
									SEMISEP,
									&l_level_colspan_no,
									&l_level_colspan_value) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
								
								 APL_GOBACK_FAIL
							}

							fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
							
							fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);
							

							if(l_level_header_no == l_level_colspan_no)
							{

							fprintf(l_report_XLS1,"<TR>\n");
							
							for(int_aa=0;int_aa<l_level_header_no;int_aa++)
							{
								for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
								{
									if(int_aa == int_bb)
									{	
									
									strcpy(l_level_column,l_level_header_value[int_aa]);
									strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

									fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
									
									fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
									
									
									if(strlen(l_level_column) > 0)
									{
										fprintf(l_report_XLS1,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >%s</TD> \n", l_level_col_span,l_level_column);
									
									}
									else
									{
										fprintf(l_report_XLS1,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >&nbsp;</TD> \n", l_level_col_span);
                                      
									}

									}
								}
							}
							fprintf(l_report_XLS1,"</TR>\n");
							

							}/*** End Of Inner Condition check *****/

							}
							
													
							}/*** End Of 2st Main For Loop *******/

						}/*** End Of 1st Main For Loop *******/

					}/*** End Of Multiple col condition check *****/

					l_column_no=h_report_details_struct.no_of_columns;
					l_no_of_columns = h_report_details_struct.no_of_columns;
				}
				else
				{

				fprintf(fl_userlog,"COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
				
				printf("COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
				
				/**** Split the Column Header and print *****************/
				
				strcpy(l_column_header,h_report_details_struct.column_hdr);
				if (CO_SplitStr(l_column_header,COMASEP,&l_col_no,&l_col_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_header);
					 
					 APL_GOBACK_FAIL
				}

				/***** Table Column Heading and its records  *********/
				
				/*********** Page Break Testing  *********************/
				
				p_page_no = 1;
				rec_no = 1;

				if(!strcmp(l_paging_flag,"Y"))
				{
					if(p_page_no == 1)
					{
						fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
						

						fprintf(l_report_XLS1,"<TR>\n");
						
						for(i=0;i<l_col_no;i++)
						{
							strcpy(l_column_value,l_col_value[i]);

							fprintf(l_report_XLS1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
							//fflush(fl_userlog);
						}
						fprintf(l_report_XLS1,"</TR>\n");
						

						g_line_count++;
					}
				}
				else
				{
					fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
					

					fprintf(l_report_XLS1,"<TR>\n");
					
					for(i=0;i<l_col_no;i++)
					{
						strcpy(l_column_value,l_col_value[i]);

						fprintf(l_report_XLS1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
						
					}
					fprintf(l_report_XLS1,"</TR>\n");
					

					g_line_count ++;
				}

				g_line_count ++;

				/***************************************************************/		
				
				l_column_no=h_report_details_struct.no_of_columns;
				l_no_of_columns = h_report_details_struct.no_of_columns;
				
				l_col_hdr = h_report_details_struct.col_hdr_brk;

				}/***** End Of Column Header else Part ****************/
				
				EXEC SQL PREPARE XLS1_SUB1 FROM :table_query;	
				EXEC SQL DECLARE xls1tablequery1_g CURSOR FOR XLS1_SUB1;
				EXEC SQL OPEN xls1tablequery1_g;

				l_fetch_count=0;

				l_return_param=0;

				fprintf(fl_userlog,"Entering SP_REPORT_DATA_PROC :|%s|\n",l_rept_id);
				
				printf("Entering SP_REPORT_DATA_PROC :|%s|\n",l_rept_id);
				
				EXEC SQL CALL SP_REPORT_DATA_PROC(:l_rept_id,
												  :l_param1,:l_param2,
												  :l_param3,:l_param4,
												  :l_param5,:l_param6,
												  :l_return_param,:l_error_desc);

			   fprintf(fl_userlog,"Error : After SP_REPORT_DATA_PROC --- ORA ERROR:|%s|\n",l_error_desc);
                 
			   fprintf(fl_userlog,"l_return_param :|%d|\n",l_return_param);
            
				for(;;)
				{
					EXEC SQL FETCH xls1tablequery1_g
						INTO :l_table_parameter;

					if(sqlca.sqlcode == 1403)
					{
						fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
						
						if(l_fetch_count == 0)
						{
							fprintf(l_report_XLS1,"<TR>\n");
						//	//fflush(fl_userlog);
							fprintf(l_report_XLS1,"<TD WIDTH=\'100%%\' COLSPAN=\'%d\' class=\'ez4\'>NO RECORDS FOUND </TD>\n",l_column_no);
							
							fprintf(l_report_XLS1,"</TR>\n");
							

							g_line_count++;
						}
						break;
					}

					if(sqlca.sqlcode < 0)
					{
					   fprintf(fl_userlog,"Error : Critical Error Occured in xls1tablequery1_g --- ORA ERROR:|%d|\n",sqlca.sqlcode);
					 //  //fflush(fl_userlog);
						break;
					}


					/********* Page Break Test  ******************************/

					 if(!strcmp(l_paging_flag,"Y"))
					 {
						if(!strcmp(l_print_flag,"L"))
						{
							 if(p_page_no == 1)
							 {
								 if(l_fetch_count > 0)
								 {
									 l_page_break_chk=(l_fetch_count%l_main_page_recs);
									
									 if(l_page_break_chk == 0)
									 {
										fprintf(l_report_XLS1,"</TABLE>\n");
										

										l_main_page_break = (((l_landscape  * p_total_page_no) - g_line_count)+l_tolarence);

										if(l_main_page_break > 0)
										{
											fprintf(l_report_XLS1,"<TABLE>\n");
											
											while(l_main_page_break > 0)
											{
												fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
												l_main_page_break --;

												g_line_count ++;
											}
											fprintf(l_report_XLS1,"</TABLE>\n");
											//fflush(fl_userlog);
										}

										fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
										

										fprintf(l_report_XLS1,"<TR>\n");
										
										for(i=0;i<l_col_no;i++)
										{
											strcpy(l_column_value,l_col_value[i]);

											fprintf(l_report_XLS1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
											
										}
										fprintf(l_report_XLS1,"</TR>\n");
										

										g_line_count++;

										p_page_no++;
										p_total_page_no++;

									 }
									 else
									 {
										p_final_break = 1;
									 }
								}
								else
								{
									p_final_break = 1;
								}
							}
							else if(p_page_no > 1)
							{
								 l_page_break_chk =(l_fetch_count%(l_main_page_recs+(l_next_page_recs * rec_no)));

								 if(l_page_break_chk == 0)
								 {
									fprintf(l_report_XLS1,"</TABLE>\n");
									

									l_next_page_break = (((l_landscape * p_total_page_no) - g_line_count)+l_tolarence);

									if(l_next_page_break > 0)
									{
										fprintf(l_report_XLS1,"<TABLE>\n");
										
										while(l_next_page_break > 0)
										{
											fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
											
											l_next_page_break --;

											g_line_count++;

										}
										fprintf(l_report_XLS1,"</TABLE>\n");
										
									}

									fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
                                    
									fprintf(l_report_XLS1,"<TR>\n");
									
									for(i=0;i<l_col_no;i++)
									{
										strcpy(l_column_value,l_col_value[i]);

										fprintf(l_report_XLS1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
									}
									fprintf(l_report_XLS1,"</TR>\n");
									

									g_line_count ++;
									p_page_no ++;
									p_total_page_no ++;
									rec_no++;
								 }
								 else
								 {
									p_final_break = 1;					
								 }
							}
						}
						else if(!strcmp(l_print_flag,"P"))
						{
							 if(p_page_no == 1)
							 {
								 if(l_fetch_count > 0)
								 {
									 l_page_break_chk=(l_fetch_count%l_main_page_recs);
									
									 if(l_page_break_chk == 0)
									 {
										fprintf(l_report_XLS1,"</TABLE>\n");
                                        
										l_main_page_break = (((l_portrait  * p_total_page_no) - g_line_count)+l_tolarence);

										if(l_main_page_break > 0)
										{
											fprintf(l_report_XLS1,"<TABLE>\n");
											
											while(l_main_page_break > 0)
											{
												fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
												
												l_main_page_break --;

												g_line_count ++;
											}
											fprintf(l_report_XLS1,"</TABLE>\n");
											
										}

										fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
										

										fprintf(l_report_XLS1,"<TR>\n");
										
										for(i=0;i<l_col_no;i++)
										{
											strcpy(l_column_value,l_col_value[i]);

											fprintf(l_report_XLS1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
										}
										fprintf(l_report_XLS1,"</TR>\n");
										

										g_line_count++;

										p_page_no++;
										p_total_page_no++;

									 }
									 else
									 {
										p_final_break = 1;
									 }
								}
								else
								{
									p_final_break = 1;
								}
							}
							else if(p_page_no > 1)
							{
								 l_page_break_chk =(l_fetch_count%(l_main_page_recs+(l_next_page_recs * rec_no)));

								 if(l_page_break_chk == 0)
								 {
									fprintf(l_report_XLS1,"</TABLE>\n");
									

									l_next_page_break = (((l_portrait * p_total_page_no) - g_line_count)+l_tolarence);

									if(l_next_page_break > 0)
									{
										fprintf(l_report_XLS1,"<TABLE>\n");
										
										while(l_next_page_break > 0)
										{
											fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
											
											l_next_page_break --;

											g_line_count++;

										}
										fprintf(l_report_XLS1,"</TABLE>\n");
										
									}

									fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
									

									fprintf(l_report_XLS1,"<TR>\n");
									
									for(i=0;i<l_col_no;i++)
									{
										strcpy(l_column_value,l_col_value[i]);

										fprintf(l_report_XLS1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
										
									}
									fprintf(l_report_XLS1,"</TR>\n");
									

									g_line_count ++;
									p_page_no ++;
									p_total_page_no ++;
									rec_no++;
								 }
								 else
								 {
									p_final_break = 1;					
								 }
							}
						}
					}

							/**************************************************************/

							strcpy(l_column_parameter,l_table_parameter);

							if(l_return_param == 1)
							{
								fprintf(l_report_XLS1,"<TR>\n");
                               
									if((strlen(l_column_parameter) > 0) && (strcmp(l_column_parameter," ")))
									{
										fprintf(l_report_XLS1,"<TD class=\'record\' ALIGN=\"LEFT\" 	x:str=\"%s\">%s</TD>\n",l_column_parameter,l_column_parameter);
										
									}
									else
									{
										fprintf(l_report_XLS1,"<TD class=\'record\'  >&nbsp</TD>\n");
										
								   }

								fprintf(l_report_XLS1,"</TR>\n");
								

							}
							else
							{
							
							/******* Split the string and fetch the column data into seperate variables *********/
						
							if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
							{
								CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
								
								APL_GOBACK_FAIL
							}

							/***** For Number Formatting ***************************************************/

							strcpy(l_format_col_pos,h_report_details_struct.format_col_pos);
							if (CO_SplitStr(l_format_col_pos,COMASEP,&l_format_col_no,&l_format_col_val) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_format_col_pos);
								 
								 APL_GOBACK_FAIL
							}

							fprintf(l_report_XLS1,"<TR>\n");
							

							for(j=0;j<l_column_num;j++)
							{
								strcpy(l_column,l_column_val[j]);
								
								l_format_col_flag = 0;
								if(l_format_col_no > 0)
								{
									for (k=0;k<l_format_col_no;k++)
									{
										strcpy(l_format_col_value,l_format_col_val[k]);

										if(j==(atoi(l_format_col_value)-1))
											l_format_col_flag = 1;
									}

									if((strlen(l_column) > 0) && (strcmp(l_column," ")))
									{
										if(l_format_col_flag == 1)
										{
											fprintf(l_report_XLS1,"<TD class=\'xlsnumber\' ALIGN=\"RIGHT\" 	x:num=\"%s\">%s</TD>\n",l_column,l_column);
										  
										}
										else
										{
										fprintf(l_report_XLS1,"<TD class=\'record\' ALIGN=\"LEFT\" 	x:str=\"%s\">%s</TD>\n",l_column,l_column);
										
										}
									}
									else
									{
										 fprintf(l_report_XLS1,"<TD class=\'record\'  >&nbsp</TD>\n");
										 
									}

								}
								else
								{
									if((strlen(l_column) > 0) && (strcmp(l_column," ")))
									{
										fprintf(l_report_XLS1,"<TD class=\'record\' ALIGN=\"LEFT\" 					x:str=\"%s\">%s</TD>\n",l_column,l_column);
									 
									}
									else
									{
										fprintf(l_report_XLS1,"<TD class=\'record\'  >&nbsp</TD>\n");
								    
								}
								}

							}
							fprintf(l_report_XLS1,"</TR>\n");
							


							}

							/***********************************************************************************/

							l_fetch_count ++;

							g_line_count++;

						}
						EXEC SQL CLOSE xls1tablequery1_g;

						/********* For Criteria column value display ********************************/
						
						if(h_report_details_struct.tot_criteria_cols > 0)
						{
							if(strlen(h_report_details_struct.criteria_col1_query) > 0)
							{
								EXEC SQL PREPARE XLS1_CR1 FROM :l_criteria_query1;
								EXEC SQL DECLARE XLS1_criteria1_g CURSOR FOR XLS1_CR1;
								EXEC SQL OPEN XLS1_criteria1_g;
								
								if(sqlca.sqlcode < 0)
								{
									fprintf(fl_userlog,"Error : Failed to Open XLS1_criteria1_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
									
								}

								for(;;)
								{
									   EXEC SQL FETCH XLS1_criteria1_g INTO :l_criteria_value1;
								
									   if(sqlca.sqlcode == 1403)
									   break;

									   if(sqlca.sqlcode < 0)
									   {
										fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
										
										break;
									   }
								}
								EXEC SQL CLOSE XLS1_criteria1_g;

								if(strcmp(l_criteria_value1,APL_NULL_STRING))
								{
									EXEC SQL SELECT (:l_criteria_value1) INTO :l_criteria1_total FROM DUAL;
									
									l_grand_total1=l_grand_total1+l_criteria1_total;
									
									fprintf(fl_userlog,"l_grand_total1 :|%lf|\n",l_grand_total1);
									

									EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value1,:l_error_desc);

									fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
									

									fprintf(l_report_XLS1,"<TR>\n");
									
									fprintf(l_report_XLS1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col1_name,l_criteria_value1);
									
									fprintf(l_report_XLS1,"</TR>\n");
									

									g_line_count++;
								}
							}

							if(strlen(h_report_details_struct.criteria_col2_query) > 0)
							{
								EXEC SQL PREPARE XLS1_CR2 FROM :l_criteria_query2;
								EXEC SQL DECLARE XLS1_criteria2_g CURSOR FOR XLS1_CR2;
								EXEC SQL OPEN XLS1_criteria2_g;
								
								if(sqlca.sqlcode < 0)
								{
									fprintf(fl_userlog,"Error : Failed to Open XLS1_criteria2_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
									
								}

								for(;;)
								{
									   EXEC SQL FETCH XLS1_criteria2_g INTO :l_criteria_value2;
								
									   if(sqlca.sqlcode == 1403)
									   break;

									   if(sqlca.sqlcode < 0)
									   {
										fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
										break;
									   }
								}
								EXEC SQL CLOSE XLS1_criteria2_g;
								
								
								if(strcmp(l_criteria_value2,APL_NULL_STRING))	
								{
									EXEC SQL SELECT (:l_criteria_value2) INTO :l_criteria2_total FROM DUAL;
								
									l_grand_total2=l_grand_total2+l_criteria2_total;
								
									fprintf(fl_userlog,"l_grand_total2 :|%lf|\n",l_grand_total2);
									

									EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value2,:l_error_desc);

									fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
									

									fprintf(l_report_XLS1,"<TR>\n");
									
									fprintf(l_report_XLS1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col2_name,l_criteria_value2);
                                     
									fprintf(l_report_XLS1,"</TR>\n");
									

									g_line_count++;
								}
							}

							if(strlen(h_report_details_struct.criteria_col3_query) > 0)
							{
								EXEC SQL PREPARE XLS1_CR3 FROM :l_criteria_query3;
								EXEC SQL DECLARE XLS1_criteria3_g CURSOR FOR XLS1_CR3;
								EXEC SQL OPEN XLS1_criteria3_g;
								
								if(sqlca.sqlcode < 0)
								{
									fprintf(fl_userlog,"Error : Failed to Open XLS1_criteria3_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
									
								}

								for(;;)
								{
									  EXEC SQL FETCH XLS1_criteria3_g INTO :l_criteria_value3;
								
									   if(sqlca.sqlcode == 1403)
									   break;

									   if(sqlca.sqlcode < 0)
									   {
										fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
										
										break;
									   }
								}
								EXEC SQL CLOSE XLS1_criteria3_g;
									
								
								if(strcmp(l_criteria_value3,APL_NULL_STRING))
								{
									EXEC SQL SELECT (:l_criteria_value3) INTO :l_criteria3_total FROM DUAL;
								
									l_grand_total3=l_grand_total3+l_criteria3_total;
								
									fprintf(fl_userlog,"l_grand_total3 :|%lf|\n",l_grand_total3);
									

									EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value3,:l_error_desc);

									fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
									

									fprintf(l_report_XLS1,"<TR>\n");
									
									fprintf(l_report_XLS1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col3_name,l_criteria_value3);
									
									fprintf(l_report_XLS1,"</TR>\n");
									

									g_line_count++;
								}
							}
						}

						/******* Complex Criteria Part *********************************************/

						strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
						strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query);
						strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
						strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

						if(strlen(complex_criteria_query) > 0)
						{
						
						EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								:complex_criteria_query,
								'@PARAM1',:l_param1),
								'@PARAM2',:l_param2),
								'@PARAM3',:l_param3),
								'@PARAM4',:l_param4),
								'@PARAM5',:l_param5),
								'@PARAM6',:l_param6),
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								:complex_criteria_query1,
								'@PARAM1',:l_param1),
								'@PARAM2',:l_param2),
								'@PARAM3',:l_param3),
								'@PARAM4',:l_param4),
								'@PARAM5',:l_param5),
								'@PARAM6',:l_param6)
							INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;

						strcat(complex_criteria_query,complex_criteria_query1);
						
						fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);
						

						EXEC SQL PREPARE XLS11_CMPX_CURR FROM :complex_criteria_query;

						EXEC SQL DECLARE xls11_complex_curr_g CURSOR FOR XLS11_CMPX_CURR;

						fprintf(fl_userlog,"After DECLARE xls11_complex_curr_g :|%d|\n",sqlca.sqlcode);
						

						EXEC SQL OPEN xls11_complex_curr_g;

						EXEC SQL FETCH xls11_complex_curr_g INTO :l_complex_parameter;

						fprintf(fl_userlog,"After FETCH xls11_complex_curr_g :|%d|\n",sqlca.sqlcode);
						

						EXEC SQL CLOSE xls11_complex_curr_g;

						fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);
						

						if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
						{
							CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
							APL_GOBACK_FAIL
						}
						
						fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);
                         
						if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
						{
							CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
							
							APL_GOBACK_FAIL
						}


						fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
						
						fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);
						

						l_complex_break_flag = 0;
						
						if(l_complex_num == l_complex_pos_num)
						{

						fprintf(l_report_XLS1,"<TR>\n");

						for(i=0;i<l_column_num;i++)
						{
							for(j=0;j<l_complex_pos_num;j++)
							{

					strcpy(l_complex_pos_column,l_complex_pos_val[j]);

					if((i==0)&&(j==0))
					{
						if(strlen(complex_criteria_label) > 0)
						{
							fprintf(l_report_XLS1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" >%s</TD>\n",complex_criteria_label);
							
							l_complex_break_flag=1;
						}
						else
						{
						fprintf(l_report_XLS1,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
						
						}
					}

					if(i== (atoi(l_complex_pos_column)-1))
					{				  
					  strcpy(l_complex_column,l_complex_val[j]);

					  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);
					 

					  l_complex_break_flag=1;

					  if(strlen(l_complex_column) > 0)
					  {
						  EXEC SQL CALL SP_NUMBER_FORMATTING(:l_complex_column,:l_error_desc);

						  if(strlen(l_error_desc) > 0)
						  {
							fprintf(l_report_XLS1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" 								x:str=\"%s\">%s</TD>\n",l_complex_column,l_complex_column);
						  
						  }
						  else
						  {
							fprintf(l_report_XLS1,"<TD class=\'lableredbg\' ALIGN=\"RIGHT\" 								x:str=\"%s\">%s</TD>\n",l_complex_column,l_complex_column);
					         
					 }
					 }
					  else
					  {
							fprintf(l_report_XLS1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">&nbsp;</TD>\n");
							
					  }				  			
				
					  break;
					}
					else
					{
						 l_complex_break_flag = 0;
						 continue;
					} 

					}
						 
					if(i != 0)
					{
					  if(l_complex_break_flag != 1)
						 fprintf(l_report_XLS1,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
						 
					}
				}

				}
				else
				{
					fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
					
				}

				fprintf(l_report_XLS1,"</TR>\n");
				

				}
				
				/*****************	End Of Complex Part     *********************/

				fprintf(l_report_XLS1,"</TABLE>\n");
				

				/****** After table ******************************************************/

				l_after_table = h_report_details_struct.after_table_brk;
				if(l_after_table > 0)
				{
					fprintf(l_report_XLS1,"<TABLE>\n");
					
					while(l_after_table > 0 )
					{
						fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
						
								
						l_after_table -- ;
						g_line_count++;
					}
					fprintf(l_report_XLS1,"</TABLE>\n");
					
				}

				if(strlen(h_report_details_struct.after_table_align) > 0)
				{
					if(strlen(h_report_details_struct.after_table) > 0)
					{		
						fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.after_table_align,h_report_details_struct.after_table);
                        
						g_line_count++;
					}
				}
				else
				{
					if(strlen(h_report_details_struct.after_table) > 0)
					{	
						fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\'  ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.after_table);
                         
						g_line_count++;
					}

				}	

				/********* Table Footer note **********************************************/

				l_table_footer = h_report_details_struct.table_footer_brk;
				if(l_table_footer > 0)
				{
					fprintf(l_report_XLS1,"<TABLE>\n");
					
					while(l_table_footer > 0 )
					{
						fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
						
								
						l_table_footer -- ;
						g_line_count++;
					}
					fprintf(l_report_XLS1,"</TABLE>\n");
					
				}

				if(strlen(h_report_details_struct.table_footer_align) > 0)
				{
					if(strlen(h_report_details_struct.table_footer) > 0)
					{
						fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.table_footer_align,h_report_details_struct.table_footer);
                          
						g_line_count++;
					}
				}
				else
				{
					if(strlen(h_report_details_struct.table_footer) > 0)
					{
						fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.table_footer);
                        
						g_line_count++;
					}

				}

				l_table = h_report_main_struct.table_brk;
				if(l_table > 0)
				{
					fprintf(l_report_XLS1,"<TABLE>\n");
					
					while(l_table > 0 )
					{
						fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
						
								
						l_table -- ;
						g_line_count++;
					}
					fprintf(l_report_XLS1,"</TABLE>\n");
					
				}

				if(l_fetch_count > 0 )
				{
				
				for(m=0;m<l_complex_num;m++)
				{
					if(m == 0)
					{
						strcpy(l_complex_parameter1,l_complex_val[m]);
						g_complex_parameter1=g_complex_parameter1+atof(l_complex_parameter1);
					}
					else if(m == 1)
					{
						strcpy(l_complex_parameter2,l_complex_val[m]);
						g_complex_parameter2=g_complex_parameter2+atof(l_complex_parameter2);
					}
					else if(m == 2)
					{
						strcpy(l_complex_parameter3,l_complex_val[m]);
						g_complex_parameter3=g_complex_parameter3+atof(l_complex_parameter3);
					}
					else if(m == 3)
					{
						strcpy(l_complex_parameter4,l_complex_val[m]);
						g_complex_parameter4=g_complex_parameter4+atof(l_complex_parameter4);
					}
					else if(m == 4)
					{
						strcpy(l_complex_parameter5,l_complex_val[m]);
						g_complex_parameter5=g_complex_parameter5+atof(l_complex_parameter5);
					}
					else if(m == 5)
					{
						strcpy(l_complex_parameter6,l_complex_val[m]);
						g_complex_parameter6=g_complex_parameter6+atof(l_complex_parameter6);
					}
					else if(m == 6)
					{
						strcpy(l_complex_parameter7,l_complex_val[m]);
						g_complex_parameter7=g_complex_parameter7+atof(l_complex_parameter7);
					}
					else if(m == 7)
					{
						strcpy(l_complex_parameter8,l_complex_val[m]);
						g_complex_parameter8=g_complex_parameter8+atof(l_complex_parameter8);
					}
					else if(m == 8)
					{
						strcpy(l_complex_parameter9,l_complex_val[m]);
						g_complex_parameter9=g_complex_parameter9+atof(l_complex_parameter9);
					}
					else if(m == 9)
					{
							strcpy(l_complex_parameter10,l_complex_val[m]);
							g_complex_parameter10=g_complex_parameter10+atof(l_complex_parameter10);
					}
					else if(m == 10)
					{
						strcpy(l_complex_parameter11,l_complex_val[m]);
						g_complex_parameter11=g_complex_parameter11+atof(l_complex_parameter11);
					}
					else if(m == 11)
					{
						strcpy(l_complex_parameter12,l_complex_val[m]);			
						g_complex_parameter12=g_complex_parameter12+atof(l_complex_parameter12);
					}
					else if(m == 12)
					{
						strcpy(l_complex_parameter13,l_complex_val[m]);
						g_complex_parameter13=g_complex_parameter13+atof(l_complex_parameter13);
					}
					else if(m == 13)
					{
						strcpy(l_complex_parameter14,l_complex_val[m]);
						g_complex_parameter14=g_complex_parameter14+atof(l_complex_parameter14);
					}
					else if(m == 14)
					{
						strcpy(l_complex_parameter15,l_complex_val[m]);
						g_complex_parameter15=g_complex_parameter15+atof(l_complex_parameter15);
					}
						else if(m == 15)
						{
							strcpy(l_complex_parameter16,l_complex_val[m]);
							g_complex_parameter16=g_complex_parameter16+atof(l_complex_parameter16);
						}
						else if(m == 16)
						{
							strcpy(l_complex_parameter17,l_complex_val[m]);
							g_complex_parameter17=g_complex_parameter17+atof(l_complex_parameter17);
						}
						else if(m == 17)
						{
							strcpy(l_complex_parameter18,l_complex_val[m]);
							g_complex_parameter18=g_complex_parameter18+atof(l_complex_parameter18);
						}
						else if(m == 18)
						{
							strcpy(l_complex_parameter19,l_complex_val[m]);
							g_complex_parameter19=g_complex_parameter19+atof(l_complex_parameter19);
						}
						else if(m == 19)
						{
							strcpy(l_complex_parameter20,l_complex_val[m]);
							g_complex_parameter20=g_complex_parameter20+atof(l_complex_parameter20);
						}
					}

					}/*** End Of Fetch Count check ******/

					}/*** End Of Record Count check Part ***********/

		}
		else
		{
				
				/**** Stored procedure for REPORT DETAILS ******************************************/
				
				fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID 11:|%s|\n",l_rept_id);
				
				printf("Calling Stored Procedure SP_REPORT_DETAIL for Report ID 12:|%s|\n",l_rept_id);
				
				EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
						:l_param2,:l_param3,:l_param4,
						:l_param5,:l_param6,
						:l_table_query,:l_table_query1,:l_table_query2,
						:l_table_query3,:l_table_query4,:l_table_query5,
						:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
						:l_group_desc,:l_error_desc);

				strcpy(table_query,l_table_query);
				strcat(table_query," ");
				
				if(strlen(l_table_query1) > 0)
				{
					strcat(table_query,l_table_query1);
					strcat(table_query," ");
				}
				if(strlen(l_table_query2) > 0)
				{
					strcat(table_query,l_table_query2);
					strcat(table_query," ");
				}
				if(strlen(l_table_query3) > 0)
				{
					strcat(table_query,l_table_query3);
					strcat(table_query," ");
				}
				if(strlen(l_table_query4) > 0)
				{
					strcat(table_query,l_table_query4);
					strcat(table_query," ");
				}
				if(strlen(l_table_query5) > 0)
				{
					strcat(table_query,l_table_query5);
					strcat(table_query," ");
				}
				
				strcat(table_query,APL_NULL_STRING);
					
				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
					
				}
				
				/*fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
				//fflush(fl_userlog);*/
				fprintf(fl_userlog,"l_criteria_query1:|%s|\n",l_criteria_query1);
				
				fprintf(fl_userlog,"l_criteria_query2:|%s|\n",l_criteria_query2);
				
				fprintf(fl_userlog,"l_criteria_query3:|%s|\n",l_criteria_query3);
				

				/****** Before table *********************************************************/
				
				if(strlen(h_report_details_struct.before_table_align) > 0)
				{
					if(strlen(h_report_details_struct.before_table) > 0)
					{	
						fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.before_table_align,h_report_details_struct.before_table);
                        
						g_line_count++;
					}
				}
				else
				{
					if(strlen(h_report_details_struct.before_table) > 0)
					{	
						fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.before_table);
                      
						g_line_count++;
					}

				}	
				
				l_before_table = h_report_details_struct.before_table_brk;
				if(l_before_table > 0)
				{
					fprintf(l_report_XLS1,"<TABLE>\n");
					
					while(l_before_table > 0 )
					{
						fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
						
								
						l_before_table -- ;
						g_line_count++;
					}
					fprintf(l_report_XLS1,"</TABLE>\n");
					
				}

				/******* Column Heading **************************************************/
				
				/****** Multiple Column Level **************************************/

				strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
				strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
				strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
				
				fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);
				

				if(strlen(l_multiple_col_flag) > 0)
				{
					fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
					
					fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);
					

					if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
							&l_multiple_col_header_value) == APL_FAILURE)
					{
						 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
						 //fflush(fl_userlog);
						 APL_GOBACK_FAIL
					}

					if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
							&l_multiple_colspan_sep_value) == APL_FAILURE)
					{
						 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
						 
						 APL_GOBACK_FAIL
					}


					fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
					
					fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);
					

					fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border=\'%s\' cellSpacing=\'0\' cellPadding=\'1\' >\n",g_table_border);
					

					if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
					{
						for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
						{
							for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
							{
					
							if(int_a == int_b )
							{
							
							strcpy(l_level_header,l_multiple_col_header_value[int_a]);
							strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

							fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
							
							fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);
							

							if (CO_SplitStr(l_level_header,
									SEMISEP,
									&l_level_header_no,
									&l_level_header_value) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
								
								 APL_GOBACK_FAIL
							}

							if (CO_SplitStr(l_level_colspan,
									SEMISEP,
									&l_level_colspan_no,
									&l_level_colspan_value) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
								 
								 APL_GOBACK_FAIL
							}

							fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
							
							fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);
							

							if(l_level_header_no == l_level_colspan_no)
							{

							fprintf(l_report_XLS1,"<TR>\n");
							
							for(int_aa=0;int_aa<l_level_header_no;int_aa++)
							{
								for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
								{
									if(int_aa == int_bb)
									{	
									
									strcpy(l_level_column,l_level_header_value[int_aa]);
									strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

									fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
									
									fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
									
									
									if(strlen(l_level_column) > 0)
									{
										fprintf(l_report_XLS1,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >%s</TD> \n", l_level_col_span,l_level_column);
									
									}
									else
									{
									
										fprintf(l_report_XLS1,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >&nbsp;</TD> \n", l_level_col_span);
                                       
									}

									}
								}
							}
							fprintf(l_report_XLS1,"</TR>\n");
							

							}/*** End Of Inner Condition check *****/

							}
							
													
							}/*** End Of 2st Main For Loop *******/

						}/*** End Of 1st Main For Loop *******/

					}/*** End Of Multiple col condition check *****/

					l_column_no=h_report_details_struct.no_of_columns;
					l_no_of_columns = h_report_details_struct.no_of_columns;

				}
				else
				{

				fprintf(fl_userlog,"COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
				
				printf("COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
				
				
				/**** Split the Column Header and print *****************/
				
				strcpy(l_column_header,h_report_details_struct.column_hdr);
				if (CO_SplitStr(l_column_header,COMASEP,&l_col_no,&l_col_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_header);
					 
					 APL_GOBACK_FAIL
				}

				/***** Table Column Heading and its records  *********/
				
				/*********** Page Break Testing  :vinay ***********************/
				
				p_page_no = 1;
				rec_no = 1;

				if(!strcmp(l_paging_flag,"Y"))
				{
					if(p_page_no == 1)
					{
						fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
                        
						fprintf(l_report_XLS1,"<TR>\n");
						
						for(i=0;i<l_col_no;i++)
						{
							strcpy(l_column_value,l_col_value[i]);

							fprintf(l_report_XLS1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
							
						}
						fprintf(l_report_XLS1,"</TR>\n");
						

						g_line_count++;
					}
				}
				else
				{
					fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
					

					fprintf(l_report_XLS1,"<TR>\n");
					
					for(i=0;i<l_col_no;i++)
					{
						strcpy(l_column_value,l_col_value[i]);

						fprintf(l_report_XLS1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
						
					}
					fprintf(l_report_XLS1,"</TR>\n");
					

					g_line_count ++;
				}

				g_line_count ++;

				/*******************************************************************************/

				l_column_no=h_report_details_struct.no_of_columns;
				l_no_of_columns = h_report_details_struct.no_of_columns;
				
				l_col_hdr = h_report_details_struct.col_hdr_brk;

				}/**** End Of Header Else Part **************************/
				
				EXEC SQL PREPARE XLS1_SUB FROM :table_query;	
				EXEC SQL DECLARE XLS1tablequery_g CURSOR FOR XLS1_SUB;
				EXEC SQL OPEN XLS1tablequery_g;

				l_fetch_count=0;

				l_return_param=0;

				fprintf(fl_userlog,"Entering SP_REPORT_DATA_PROC :|%s|\n",l_rept_id);
				
				printf("Entering SP_REPORT_DATA_PROC :|%s|\n",l_rept_id);
                
				EXEC SQL CALL SP_REPORT_DATA_PROC(:l_rept_id,
												  :l_param1,:l_param2,
												  :l_param3,:l_param4,
												  :l_param5,:l_param6,
												  :l_return_param,:l_error_desc);

			   fprintf(fl_userlog,"Error : After SP_REPORT_DATA_PROC --- ORA ERROR:|%s|\n",l_error_desc);
                
			   fprintf(fl_userlog,"l_return_param :|%d|\n",l_return_param);
			   


				for(;;)
				{
					EXEC SQL FETCH XLS1tablequery_g
						INTO :l_table_parameter;

					 if(sqlca.sqlcode == 1403)
					 {
						fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
						//fflush(fl_userlog);
						if(l_fetch_count == 0)
						{
						   fprintf(l_report_XLS1,"<TR>\n");
						   
						   fprintf(l_report_XLS1,"<TD WIDTH=\'100%%\' COLSPAN=\'%d\' class=\'ez4\'>NO RECORDS FOUND </TD>\n",l_column_no);
						   
						   fprintf(l_report_XLS1,"</TR>\n");
						   

						   g_line_count++;
						}
						break;
					 }

					 if(sqlca.sqlcode < 0)
					 {
						fprintf(fl_userlog,"Error : TABLE QUERY  Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
						
						break;
					 }

					/********* Page Break Test : vinay ******************************/

					 if(!strcmp(l_paging_flag,"Y"))
					 {
						if(!strcmp(l_print_flag,"L"))
						{
							 if(p_page_no == 1)
							 {
								 if(l_fetch_count > 0)
								 {
									 l_page_break_chk=(l_fetch_count%l_main_page_recs);
									
									 if(l_page_break_chk == 0)
									 {
										fprintf(l_report_XLS1,"</TABLE>\n");
										

										l_main_page_break = (((l_landscape  * p_total_page_no) - g_line_count)+l_tolarence);

										if(l_main_page_break > 0)
										{
											fprintf(l_report_XLS1,"<TABLE>\n");
											
											while(l_main_page_break > 0)
											{
												fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
												
												l_main_page_break --;

												g_line_count ++;
											}
											fprintf(l_report_XLS1,"</TABLE>\n");
											
										}

										fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
										

										fprintf(l_report_XLS1,"<TR>\n");
										
										for(i=0;i<l_col_no;i++)
										{
											strcpy(l_column_value,l_col_value[i]);

											fprintf(l_report_XLS1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
											
										}
										fprintf(l_report_XLS1,"</TR>\n");
										

										g_line_count++;

										p_page_no++;
										p_total_page_no++;

									 }
									 else
									 {
										p_final_break = 1;
									 }
								}
								else
								{
									p_final_break = 1;
								}
							}
							else if(p_page_no > 1)
							{
								 l_page_break_chk =(l_fetch_count%(l_main_page_recs+(l_next_page_recs * rec_no)));

													
								 if(l_page_break_chk == 0)
								 {
									fprintf(l_report_XLS1,"</TABLE>\n");
									

									l_next_page_break = (((l_landscape * p_total_page_no) - g_line_count)+l_tolarence);

									if(l_next_page_break > 0)
									{
										fprintf(l_report_XLS1,"<TABLE>\n");
										
										while(l_next_page_break > 0)
										{
											fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
											
											l_next_page_break --;

											g_line_count++;

										}
										fprintf(l_report_XLS1,"</TABLE>\n");
										
									}

									fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
									

									fprintf(l_report_XLS1,"<TR>\n");
									
									for(i=0;i<l_col_no;i++)
									{
										strcpy(l_column_value,l_col_value[i]);

										fprintf(l_report_XLS1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
										
									}
									fprintf(l_report_XLS1,"</TR>\n");
									

									g_line_count ++;
									p_page_no ++;
									p_total_page_no ++;
									rec_no++;
								 }
								 else
								 {
									p_final_break = 1;					
								 }
							}
						}
						else if(!strcmp(l_print_flag,"P"))
						{
							 if(p_page_no == 1)
							 {
								 if(l_fetch_count > 0)
								 {
									 l_page_break_chk=(l_fetch_count%l_main_page_recs);
									
									 if(l_page_break_chk == 0)
									 {
										fprintf(l_report_XLS1,"</TABLE>\n");
										

										l_main_page_break = (((l_portrait  * p_total_page_no) - g_line_count)+l_tolarence);

										if(l_main_page_break > 0)
										{
											fprintf(l_report_XLS1,"<TABLE>\n");
											
											while(l_main_page_break > 0)
											{
												fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
												
												l_main_page_break --;

												g_line_count ++;
											}
											fprintf(l_report_XLS1,"</TABLE>\n");
											
										}

										fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
										

										fprintf(l_report_XLS1,"<TR>\n");
										
										for(i=0;i<l_col_no;i++)
										{
											strcpy(l_column_value,l_col_value[i]);

											fprintf(l_report_XLS1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
											
										}
										fprintf(l_report_XLS1,"</TR>\n");
										

										g_line_count++;

										p_page_no++;
										p_total_page_no++;

									 }
									 else
									 {
										p_final_break = 1;
									 }
								}
								else
								{
									p_final_break = 1;
								}
							}
							else if(p_page_no > 1)
							{
								 l_page_break_chk =(l_fetch_count%(l_main_page_recs+(l_next_page_recs * rec_no)));

								 if(l_page_break_chk == 0)
								 {
									fprintf(l_report_XLS1,"</TABLE>\n");
									

									l_next_page_break = (((l_portrait * p_total_page_no) - g_line_count)+l_tolarence);

									if(l_next_page_break > 0)
									{
										fprintf(l_report_XLS1,"<TABLE>\n");
										
										while(l_next_page_break > 0)
										{
											fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
											
											l_next_page_break --;

											g_line_count++;

										}
										fprintf(l_report_XLS1,"</TABLE>\n");
										
									}

									fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
									

									fprintf(l_report_XLS1,"<TR>\n");
									
									for(i=0;i<l_col_no;i++)
									{
										strcpy(l_column_value,l_col_value[i]);

										fprintf(l_report_XLS1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
										
									}
									fprintf(l_report_XLS1,"</TR>\n");
									

									g_line_count ++;
									p_page_no ++;
									p_total_page_no ++;
									rec_no++;
								 }
								 else
								 {
									p_final_break = 1;					
								 }
							}
						}
					}

					/*******************************************************************/
					
					strcpy(l_column_parameter,l_table_parameter);

					if(l_return_param == 1)
					{
						fprintf(l_report_XLS1,"<TR>\n");
						

							if((strlen(l_column_parameter) > 0) && (strcmp(l_column_parameter," ")))
							{
								fprintf(l_report_XLS1,"<TD class=\'record\' ALIGN=\"LEFT\" 					x:str=\"%s\">%s</TD>\n",l_column_parameter,l_column_parameter);
							
							}
							else
							{
								fprintf(l_report_XLS1,"<TD class=\'record\'  >&nbsp</TD>\n");
								
								}

						fprintf(l_report_XLS1,"</TR>\n");
						

					}
					else
					{			
						/******* Split the string and fetch the column date *********/
						
						if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
						{
							CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
							
							APL_GOBACK_FAIL
						}

						/***** For Number Formatting ***************************************************/

						strcpy(l_format_col_pos,h_report_details_struct.format_col_pos);
						if (CO_SplitStr(l_format_col_pos,COMASEP,&l_format_col_no,&l_format_col_val) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_format_col_pos);
							 
							 APL_GOBACK_FAIL
						}

						fprintf(l_report_XLS1,"<TR>\n");
						

						for(j=0;j<l_column_num;j++)
						{
							strcpy(l_column,l_column_val[j]);
							
							l_format_col_flag = 0;
							if(l_format_col_no > 0)
							{
								for (k=0;k<l_format_col_no;k++)
								{
									strcpy(l_format_col_value,l_format_col_val[k]);

									if(j==(atoi(l_format_col_value)-1))
										l_format_col_flag = 1;
								}

								if((strlen(l_column) > 0) && (strcmp(l_column," ")))
								{
									if(l_format_col_flag == 1)
									{
										fprintf(l_report_XLS1,"<TD class=\'xlsnumber\' ALIGN=\"RIGHT\" 	x:num=\"%s\">%s</TD>\n",l_column,l_column);
									
									}
									else
									{
											fprintf(l_report_XLS1,"<TD class=\'record\' ALIGN=\"LEFT\" 			x:str=\"%s\">%s</TD>\n",l_column,l_column);
									
									}
								}
								else
								{
									 fprintf(l_report_XLS1,"<TD class=\'record\'  >&nbsp</TD>\n");
									
								}
							}
							else
							{
								if((strlen(l_column) > 0) && (strcmp(l_column," ")))
								{
									fprintf(l_report_XLS1,"<TD class=\'record\' ALIGN=\"LEFT\" 					x:str=\"%s\">%s</TD>\n",l_column,l_column);
								
								}
								else
								{
									fprintf(l_report_XLS1,"<TD class=\'record\'  >&nbsp</TD>\n");
									
									}
							}

						}
						fprintf(l_report_XLS1,"</TR>\n");
						

					}

					/***********************************************************************************/

					l_fetch_count ++;

					g_line_count++;

				}
				EXEC SQL CLOSE XLS1tablequery_g;

				/********* For Criteria column value display ***************/
				
				if(h_report_details_struct.tot_criteria_cols > 0)
				{
					if(strlen(h_report_details_struct.criteria_col1_query) > 0)
					{
						EXEC SQL PREPARE XLS1_CR1 FROM :l_criteria_query1;
						EXEC SQL DECLARE XLS1criteria1_g CURSOR FOR XLS1_CR1;
						EXEC SQL OPEN XLS1criteria1_g;
						
						if(sqlca.sqlcode < 0)
						{
							fprintf(fl_userlog,"Error : Failed to Open XLS1criteria1_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
							
						}

						for(;;)
						{
						EXEC SQL FETCH XLS1criteria1_g INTO :l_criteria_value1;
						
							   if(sqlca.sqlcode == 1403)
							   break;

							   if(sqlca.sqlcode < 0)
							   {
									fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
									//fflush(fl_userlog);
									break;
							   }
						}
						EXEC SQL CLOSE XLS1criteria1_g;
						
						/****** For Grand Total Of Criteria Value *********/
							
						if(strcmp(l_criteria_value1,APL_NULL_STRING))
						{
							EXEC SQL SELECT (:l_criteria_value1) INTO :l_criteria1_total FROM DUAL;
							
							l_grand_total1=l_grand_total1+l_criteria1_total;
							
							fprintf(fl_userlog,"l_grand_total1 :|%lf|\n",l_grand_total1);
							

							EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value1,:l_error_desc);

							fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
							

							fprintf(l_report_XLS1,"<TR>\n");
							
							fprintf(l_report_XLS1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col1_name,l_criteria_value1);
							
							fprintf(l_report_XLS1,"</TR>\n");
							

							g_line_count++;
						}
					}

					if(strlen(h_report_details_struct.criteria_col2_query) > 0)
					{
						EXEC SQL PREPARE XLS1_CR2 FROM :l_criteria_query2;
						EXEC SQL DECLARE XLS1criteria2_g CURSOR FOR XLS1_CR2;
						EXEC SQL OPEN XLS1criteria2_g;
						
						if(sqlca.sqlcode < 0)
						{
							fprintf(fl_userlog,"Error : Failed to Open XLS1criteria2_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
							
						}

						for(;;)
						{
						EXEC SQL FETCH XLS1criteria2_g INTO :l_criteria_value2;
						
							   if(sqlca.sqlcode == 1403)
							   break;

							   if(sqlca.sqlcode < 0)
							   {
									fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
									
									break;
							   }
						}
						EXEC SQL CLOSE XLS1criteria2_g;
							
							
						if(strcmp(l_criteria_value2,APL_NULL_STRING))
						{
							EXEC SQL SELECT (:l_criteria_value2) INTO :l_criteria2_total FROM DUAL;
							
							l_grand_total2=l_grand_total2+l_criteria2_total;
							
							fprintf(fl_userlog,"l_grand_total2 :|%lf|\n",l_grand_total2);
							//fflush(fl_userlog);

							EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value2,:l_error_desc);

							fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
							

							fprintf(l_report_XLS1,"<TR>\n");
							
							fprintf(l_report_XLS1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col2_name,l_criteria_value2);
                             
							fprintf(l_report_XLS1,"</TR>\n");
							

							g_line_count++;
						}
					}

					if(strlen(h_report_details_struct.criteria_col3_query) > 0)
					{
						EXEC SQL PREPARE XLS1_CR3 FROM :l_criteria_query3;
						EXEC SQL DECLARE XLS1criteria3_g CURSOR FOR XLS1_CR3;
						EXEC SQL OPEN XLS1criteria3_g;
						
						if(sqlca.sqlcode < 0)
						{
							fprintf(fl_userlog,"Error : Failed to Open XLS1criteria3_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
							
						}

						for(;;)
						{
						EXEC SQL FETCH XLS1criteria3_g INTO :l_criteria_value3;
						
							   if(sqlca.sqlcode == 1403)
							   break;

							   if(sqlca.sqlcode < 0)
							   {
									fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
									
									break;
							   }
						}
						EXEC SQL CLOSE XLS1criteria3_g;
				
						
						if(strcmp(l_criteria_value3,APL_NULL_STRING))
						{
							EXEC SQL SELECT (:l_criteria_value3) INTO :l_criteria3_total FROM DUAL;
							
							l_grand_total3=l_grand_total3+l_criteria3_total;
							
							fprintf(fl_userlog,"l_grand_total3 :|%lf|\n",l_grand_total3);
							

							EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value3,:l_error_desc);

							fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
							

							fprintf(l_report_XLS1,"<TR>\n");
							
							fprintf(l_report_XLS1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col3_name,l_criteria_value3);
							
							fprintf(l_report_XLS1,"</TR>\n");
							

							g_line_count++;
						}
					}
				}

				/******* Complex Criteria Part *********************************************/


				strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
				strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
				strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
				strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

				fprintf(fl_userlog,"Before Complex Part -- l_fetch_count 1:|%d|\n",l_fetch_count);
				

				if(l_fetch_count > 0)
				{

				if(strlen(complex_criteria_query) > 0)
				{
				
					EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
							:complex_criteria_query,
							'@PARAM1',:l_param1),
							'@PARAM2',:l_param2),
							'@PARAM3',:l_param3),
							'@PARAM4',:l_param4),
							'@PARAM5',:l_param5),
							'@PARAM6',:l_param6),
							REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
							:complex_criteria_query1,
							'@PARAM1',:l_param1),
							'@PARAM2',:l_param2),
							'@PARAM3',:l_param3),
							'@PARAM4',:l_param4),
							'@PARAM5',:l_param5),
							'@PARAM6',:l_param6)
						INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;
			
				strcat(complex_criteria_query,complex_criteria_query1);

				fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);
				

				EXEC SQL PREPARE XLS12_CMPX_CURR FROM :complex_criteria_query;

				EXEC SQL DECLARE xls12_complex_curr_g CURSOR FOR XLS12_CMPX_CURR;

				fprintf(fl_userlog,"After DECLARE xls12_complex_curr_g :|%d|\n",sqlca.sqlcode);
				

				EXEC SQL OPEN xls12_complex_curr_g;

				EXEC SQL FETCH xls12_complex_curr_g INTO :l_complex_parameter;

				fprintf(fl_userlog,"After FETCH xls12_complex_curr_g :|%d|\n",sqlca.sqlcode);
				

				EXEC SQL CLOSE xls12_complex_curr_g;

				fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);
				

				if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
				{
					CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
					
					APL_GOBACK_FAIL
				}
				
				fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);
				//fflush(fl_userlog);

				if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
				{
					CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
					
					APL_GOBACK_FAIL
				}


				fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
				
				fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);
				

				l_complex_break_flag = 0;

				
				if(l_complex_num == l_complex_pos_num)
				{

				fprintf(l_report_XLS1,"<TR>\n");
				

				for(i=0;i<l_column_num;i++)
				{
					for(j=0;j<l_complex_pos_num;j++)
					{

					strcpy(l_complex_pos_column,l_complex_pos_val[j]);

					if((i==0)&&(j==0))
					{
						if(strlen(complex_criteria_label) > 0)
						{
							fprintf(l_report_XLS1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" >%s</TD>\n",complex_criteria_label);
							
							l_complex_break_flag=1;
						}
						else
						{
							fprintf(l_report_XLS1,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
							
						}
					}

					if(i== (atoi(l_complex_pos_column)-1))
					{				  
					  strcpy(l_complex_column,l_complex_val[j]);

					  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);
					 

					  l_complex_break_flag=1;
					  
					  if(strlen(l_complex_column) > 0)
					  {
						  EXEC SQL CALL SP_NUMBER_FORMATTING(:l_complex_column,:l_error_desc);

						  if(strlen(l_error_desc) > 0)
						  {
							fprintf(l_report_XLS1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" 								x:str=\"%s\">%s</TD>\n",l_complex_column,l_complex_column);
						 
						  }
						  else
						  {
							fprintf(l_report_XLS1,"<TD class=\'lableredbg\' ALIGN=\"RIGHT\" 								x:str=\"%s\">%s</TD>\n",l_complex_column,l_complex_column);
					       
							}
					  }
					  else
					  {
							fprintf(l_report_XLS1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">&nbsp;</TD>\n");
							
					  }
					
					  break;
					}
					else
					{
						 l_complex_break_flag = 0;
						 continue;
					} 

					}
						 
					if(i != 0)
					{
					  if(l_complex_break_flag != 1)
						 fprintf(l_report_XLS1,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
						
					}
				}

				}
				else
				{
					fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
					
				}

				fprintf(l_report_XLS1,"</TR>\n");
				

				}

				}
				else
				{			
					fprintf(fl_userlog," No Records Found -- So No Need To Display Criteria \n");
					
				}
				

				/***************************************************************************/

				fprintf(l_report_XLS1,"</TABLE>\n");
				
				
				/****** After table ***************************************************************/
				
				l_after_table = h_report_details_struct.after_table_brk;
				if(l_after_table > 0)
				{
					fprintf(l_report_XLS1,"<TABLE>\n");
					
					while(l_after_table > 0 )
					{
						fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
						
								
						l_after_table -- ;
						g_line_count++;
					}
					fprintf(l_report_XLS1,"</TABLE>\n");
					
				}

				if(strlen(h_report_details_struct.after_table_align) > 0)
				{
					if(strlen(h_report_details_struct.after_table) > 0)
					{	
						fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN='%d\' ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.after_table_align,h_report_details_struct.after_table);
                        
						g_line_count++;
					}
				}
				else
				{
					if(strlen(h_report_details_struct.after_table) > 0)
					{	
						fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN='%d\' ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.after_table);
                          
						g_line_count++;
					}

				}	
		  
				/************ Table Footer note **************************************************/
			
				l_table_footer = h_report_details_struct.table_footer_brk;
				if(l_table_footer > 0)
				{
					fprintf(l_report_XLS1,"<TABLE>\n");
					
					while(l_table_footer > 0 )
					{
						fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
						
								
						l_table_footer -- ;
						g_line_count++;
					}
					fprintf(l_report_XLS1,"</TABLE>\n");
					
				}
				
				if(strlen(h_report_details_struct.table_footer_align) > 0)
				{
					if(strlen(h_report_details_struct.table_footer) > 0)
					{
						fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.table_footer_align,h_report_details_struct.table_footer);
                         
						g_line_count++;
					}
				}
				else
				{
					if(strlen(h_report_details_struct.table_footer) > 0)
					{
						fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.table_footer);
                       
						g_line_count++;
					}

				}

				l_table = h_report_main_struct.table_brk;
				if(l_table > 0)
				{
					fprintf(l_report_XLS1,"<TABLE>\n");
					
					while(l_table > 0 )
					{
						fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
						
								
						l_table -- ;
						g_line_count++;
					}
					fprintf(l_report_XLS1,"</TABLE>\n");
					
				}


				if( l_fetch_count > 0 )
				{
					for(m=0;m<l_complex_num;m++)
					{
						if(m == 0)
						{
							strcpy(l_complex_parameter1,l_complex_val[m]);
							g_complex_parameter1=atof(l_complex_parameter1);
						}
						else if(m == 1)
						{
							strcpy(l_complex_parameter2,l_complex_val[m]);
							g_complex_parameter2=atof(l_complex_parameter2);
						}
						else if(m == 2)
						{
							strcpy(l_complex_parameter3,l_complex_val[m]);
							g_complex_parameter3=atof(l_complex_parameter3);
						}
						else if(m == 3)
						{
							strcpy(l_complex_parameter4,l_complex_val[m]);
							g_complex_parameter4=atof(l_complex_parameter4);
						}
						else if(m == 4)
						{
							strcpy(l_complex_parameter5,l_complex_val[m]);
							g_complex_parameter5=atof(l_complex_parameter5);
						}
						else if(m == 5)
						{
							strcpy(l_complex_parameter6,l_complex_val[m]);
							g_complex_parameter6=atof(l_complex_parameter6);
						}
						else if(m == 6)
						{
							strcpy(l_complex_parameter7,l_complex_val[m]);
							g_complex_parameter7=atof(l_complex_parameter7);
						}
						else if(m == 7)
						{
							strcpy(l_complex_parameter8,l_complex_val[m]);
							g_complex_parameter8=atof(l_complex_parameter8);
						}
						else if(m == 8)
						{
							strcpy(l_complex_parameter9,l_complex_val[m]);
							g_complex_parameter9=atof(l_complex_parameter9);
						}
						else if(m == 9)
						{
							strcpy(l_complex_parameter10,l_complex_val[m]);
							g_complex_parameter10=atof(l_complex_parameter10);
						}
						else if(m == 10)
						{
							strcpy(l_complex_parameter11,l_complex_val[m]);
							g_complex_parameter11=atof(l_complex_parameter11);
						}
						else if(m == 11)
						{
							strcpy(l_complex_parameter12,l_complex_val[m]);			
							g_complex_parameter12=atof(l_complex_parameter12);
						}
						else if(m == 12)
						{
							strcpy(l_complex_parameter13,l_complex_val[m]);
							g_complex_parameter13=atof(l_complex_parameter13);
						}
						else if(m == 13)
						{
							strcpy(l_complex_parameter14,l_complex_val[m]);
							g_complex_parameter14=atof(l_complex_parameter14);
						}
						else if(m == 14)
						{
							strcpy(l_complex_parameter15,l_complex_val[m]);
							g_complex_parameter15=atof(l_complex_parameter15);
						}
						else if(m == 15)
						{
							strcpy(l_complex_parameter16,l_complex_val[m]);
							g_complex_parameter16=atof(l_complex_parameter16);
						}
						else if(m == 16)
						{
							strcpy(l_complex_parameter17,l_complex_val[m]);
							g_complex_parameter17=atof(l_complex_parameter17);
						}
						else if(m == 17)
						{
							strcpy(l_complex_parameter18,l_complex_val[m]);
							g_complex_parameter18=atof(l_complex_parameter18);
						}
						else if(m == 18)
						{
							strcpy(l_complex_parameter19,l_complex_val[m]);
							g_complex_parameter19=atof(l_complex_parameter19);
						}
						else if(m == 19)
						{
							strcpy(l_complex_parameter20,l_complex_val[m]);
							g_complex_parameter20=atof(l_complex_parameter20);
						}

					}/*** End of Complex For Loop ***/

				}/*** End Of Fetch Count Check ****/

		}/******* End Of  Else Block **********/				


	/*************** Complex Criteria Individual  *********************/
				
				if(l_fetch_count > 0 )
				{
					fprintf(fl_userlog,"g_complex_parameter1 :|%lf|\tg_complex_parameter2 :|%lf|\n",g_complex_parameter1,g_complex_parameter2);
					
					fprintf(fl_userlog,"g_complex_parameter3 :|%lf|\tg_complex_parameter4 :|%lf|\n",g_complex_parameter3,g_complex_parameter4);
					
					fprintf(fl_userlog,"g_complex_parameter5 :|%lf|\tg_complex_parameter6 :|%lf|\n",g_complex_parameter5,g_complex_parameter6);
					
					fprintf(fl_userlog,"g_complex_parameter7 :|%lf|\tg_complex_parameter8 :|%lf|\n",g_complex_parameter7,g_complex_parameter8);
					
					fprintf(fl_userlog,"g_complex_parameter9 :|%lf|\tg_complex_parameter10 :|%lf|\n",g_complex_parameter9,g_complex_parameter10);
					
					fprintf(fl_userlog,"g_complex_parameter11 :|%lf|\tg_complex_parameter12 :|%lf|\n",g_complex_parameter11,g_complex_parameter12);
					
					fprintf(fl_userlog,"g_complex_parameter13 :|%lf|\tg_complex_parameter14 :|%lf|\n",g_complex_parameter13,g_complex_parameter14);
					
					fprintf(fl_userlog,"g_complex_parameter15 :|%lf|\tg_complex_parameter16 :|%lf|\n",g_complex_parameter15,g_complex_parameter16);
					
					fprintf(fl_userlog,"g_complex_parameter17 :|%lf|\tg_complex_parameter18 :|%lf|\n",g_complex_parameter17,g_complex_parameter18);
					
					fprintf(fl_userlog,"g_complex_parameter19 :|%lf|\tg_complex_parameter20 :|%lf|\n",g_complex_parameter19,g_complex_parameter20);
					
				}


				/*******************************************************************/


				/********* Dynamic Footer Display ****************************************/

				strcpy(footer_query,h_report_details_struct.footer_query);
				
				if(strlen(footer_query) > 0)
				{

				/**** Stored Procedure : SP_REPORT_FOOTER ***********************************/

				fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
				
				printf("Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
				
				EXEC SQL CALL SP_REPORT_FOOTER(:l_rept_id,:l_table_id,:l_param1,:l_param2,
							:l_param3,:l_param4, :l_param5,
							:l_param6,:l_footer_query,:l_footer_query1,:l_error_desc); 

				strcat(l_footer_query,l_footer_query1);

				if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER ERR DESC :|%s|\n",l_error_desc);
					//fflush(fl_userlog);
				}

				fprintf(fl_userlog,"FOOTER QUERY :|%s|\n",l_footer_query);
				

				strcpy(l_footer_query_value,APL_NULL_STRING);

				EXEC SQL PREPARE XLS1_FOOTER_CURR FROM :l_footer_query;

				EXEC SQL DECLARE xls1_footer_curr_g CURSOR FOR XLS1_FOOTER_CURR;
				
				fprintf(fl_userlog,"After DECLARE xls1_footer_curr_g :|%d|\n",sqlca.sqlcode);
				

				EXEC SQL OPEN xls1_footer_curr_g;

				EXEC SQL FETCH xls1_footer_curr_g INTO :l_footer_query_value;
				fprintf(fl_userlog,"After FETCH xls1_footer_curr_g :|%d|\n",sqlca.sqlcode);
				

				EXEC SQL CLOSE xls1_footer_curr_g;

				fprintf(fl_userlog,"l_footer_query_value :|%s|\n",l_footer_query_value);
				

				l_footer_num = 0;

				strcpy(l_footer1,APL_NULL_STRING);
				strcpy(l_footer2,APL_NULL_STRING);
				strcpy(l_footer3,APL_NULL_STRING);
				strcpy(l_footer4,APL_NULL_STRING);
				strcpy(l_footer5,APL_NULL_STRING);
				strcpy(l_footer6,APL_NULL_STRING);
				strcpy(l_footer7,APL_NULL_STRING);
				strcpy(l_footer8,APL_NULL_STRING);
				strcpy(l_footer9,APL_NULL_STRING);
				strcpy(l_footer10,APL_NULL_STRING);
				strcpy(l_footer11,APL_NULL_STRING);
				strcpy(l_footer12,APL_NULL_STRING);
				strcpy(l_footer13,APL_NULL_STRING);
				strcpy(l_footer14,APL_NULL_STRING);
				strcpy(l_footer15,APL_NULL_STRING);

				if(strlen(l_footer_query_value) > 0)
				{		
					if (CO_SplitStr(l_footer_query_value,CAPSEP,&l_footer_num,&l_footer_val) == APL_FAILURE)
					{
						CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_footer_query_value);
						
						APL_GOBACK_FAIL
					}

					fprintf(fl_userlog,"l_footer_num :|%d|\n",l_footer_num);
					
					if(l_footer_num > 0)
					{
						for(i=0;i<l_footer_num;i++)
						{
							if(i == 0)
							strcpy(l_footer1,l_footer_val[i]);
							else if(i == 1)
							strcpy(l_footer2,l_footer_val[i]);
							else if(i == 2)
							strcpy(l_footer3,l_footer_val[i]);
							else if(i == 3)
							strcpy(l_footer4,l_footer_val[i]);
							else if(i == 4)
							strcpy(l_footer5,l_footer_val[i]);
							else if(i == 5)
							strcpy(l_footer6,l_footer_val[i]);
							else if(i == 6)
							strcpy(l_footer7,l_footer_val[i]);
							else if(i == 7)
							strcpy(l_footer8,l_footer_val[i]);
							else if(i == 8)
							strcpy(l_footer9,l_footer_val[i]);
							else if(i == 9)
							strcpy(l_footer10,l_footer_val[i]);
							else if(i == 10)
							strcpy(l_footer11,l_footer_val[i]);
							else if(i == 11)
							strcpy(l_footer12,l_footer_val[i]);
							else if(i == 12)
							strcpy(l_footer13,l_footer_val[i]);
							else if(i == 13)
							strcpy(l_footer14,l_footer_val[i]);
							else if(i == 14)
							strcpy(l_footer15,l_footer_val[i]);
						}
					}

				}/**************** End Of Footer Value check ********************************/

				/****** Stored Procedure : SP_REPORT_FOOTER_DATA ***********************************/

				fprintf(fl_userlog,"l_footer1 :|%s|\t l_footer2 :|%s|\n",l_footer1,l_footer2);
			//	//fflush(fl_userlog);
				fprintf(fl_userlog,"l_footer3 :|%s|\t l_footer4 :|%s|\n",l_footer3,l_footer4);
				
				fprintf(fl_userlog,"l_footer5 :|%s|\t l_footer6 :|%s|\n",l_footer5,l_footer6);
				
				fprintf(fl_userlog,"l_footer7 :|%s|\t l_footer8 :|%s|\n",l_footer7,l_footer8);
				
				fprintf(fl_userlog,"l_footer9 :|%s|\t l_footer10 :|%s|\n",l_footer9,l_footer10);
				
				fprintf(fl_userlog,"l_footer11 :|%s|\t l_footer12 :|%s|\n",l_footer11,l_footer12);
				
				fprintf(fl_userlog,"l_footer13 :|%s|\t l_footer14 :|%s|\n",l_footer13,l_footer14);
				
				fprintf(fl_userlog,"l_footer15 :|%s|\n",l_footer15);
				

				fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);	
				
				printf("Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);		
				
				EXEC SQL CALL SP_REPORT_FOOTER_DATA(:l_rept_id,:l_table_id,
									:l_footer1,:l_footer2,
									:l_footer3,:l_footer4,
									:l_footer5,:l_footer6,
									:l_footer7,:l_footer8,
									:l_footer9,:l_footer10,
									:l_footer11,:l_footer12,
									:l_footer13,:l_footer14,
									:l_footer15,
									:g_complex_parameter1,:g_complex_parameter2,
									:g_complex_parameter3,:g_complex_parameter4,
									:g_complex_parameter5,:g_complex_parameter6,
									:g_complex_parameter7,:g_complex_parameter8,
									:g_complex_parameter9,:g_complex_parameter10,
									:g_complex_parameter11,:g_complex_parameter12,
									:g_complex_parameter13,:g_complex_parameter14,
									:g_complex_parameter15,:g_complex_parameter16,
									:g_complex_parameter17,:g_complex_parameter18,
									:g_complex_parameter19,:g_complex_parameter20,
									:l_footer_data,:l_error_desc);

				if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER_DATA ERR DESC :|%s|\n",l_error_desc);
					
				}

				fprintf(fl_userlog,"FOOTER DATA :|%s|\n",l_footer_data);
				

				/************ Dynamic Formating Procedure ********************************************/
				
				fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);
                 				
				printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
				
				EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_footer_data,:l_error_desc); 

				if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
					
				}

				fprintf(fl_userlog,"FOOTER DATA After Formatting -- :|%s|\n",l_footer_data);
				


				/*************************************************************************************/

				/************ Dynamic Footer Data Display **********************************************/
				
				fprintf(fl_userlog,"strlen(l_footer_data) :|%d|\n",strlen(l_footer_data));
				

				if(strlen(l_footer_data) > 0)
				{
					fprintf(fl_userlog,"Displaying Footer Data --- \n");
					

					fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\"><TR>\n");
					
					fprintf(l_report_XLS1,"<TD WIDTH=\"100%%\" colspan=\'%d\' ALIGN=\"%s\" class=\'headerdata\' >%s</TD> \n",l_colspan,h_report_details_struct.footer_data_align,l_footer_data);
					
					fprintf(l_report_XLS1,"</TR></TABLE>\n");
				}

				l_footer_data_brk = h_report_details_struct.footer_data_brk;
				while(l_footer_data_brk > 0)
				{
					fprintf(l_report_XLS1,"</BR>\n");
					
					l_footer_data_brk --;
					g_line_count++;
				}
				}

				/***************** End Of Dynamic Footer Display  *****************************/

				/***************** Final Complex Criteria Calculation *************************/

				fprintf(fl_userlog,"\n--- l_table_id --- 3:|%d|\n",l_table_id);
				

				if(l_table_id == 1)
				{
					f_complex_parameter1=f_complex_parameter1+g_complex_parameter1;
					f_complex_parameter2=f_complex_parameter2+g_complex_parameter2;
					f_complex_parameter3=f_complex_parameter3+g_complex_parameter3;
					f_complex_parameter4=f_complex_parameter4+g_complex_parameter4;
					f_complex_parameter5=f_complex_parameter5+g_complex_parameter5;
					f_complex_parameter6=f_complex_parameter6+g_complex_parameter6;
					f_complex_parameter7=f_complex_parameter7+g_complex_parameter7;
					f_complex_parameter8=f_complex_parameter8+g_complex_parameter8;
					f_complex_parameter9=f_complex_parameter9+g_complex_parameter9;
					f_complex_parameter10=f_complex_parameter10+g_complex_parameter10;
					f_complex_parameter11=f_complex_parameter11+g_complex_parameter11;
					f_complex_parameter12=f_complex_parameter12+g_complex_parameter12;
					f_complex_parameter13=f_complex_parameter13+g_complex_parameter13;
					f_complex_parameter14=f_complex_parameter14+g_complex_parameter14;
					f_complex_parameter15=f_complex_parameter15+g_complex_parameter15;
					f_complex_parameter16=f_complex_parameter16+g_complex_parameter16;
					f_complex_parameter17=f_complex_parameter17+g_complex_parameter17;
					f_complex_parameter18=f_complex_parameter18+g_complex_parameter18;
					f_complex_parameter19=f_complex_parameter19+g_complex_parameter19;
					f_complex_parameter20=f_complex_parameter20+g_complex_parameter20;
				}


				/**********************************************************************************/
		}
	}
	EXEC SQL CLOSE xls1_group_g;
   }/*added by siva.ganapathi for Enh. Log 121 on 2/20/2009 -- Ended*/
	else
	{		
	while(l_table_id <= h_report_main_struct.no_of_tables)
	{
		g_complex_parameter1 = 0.0;
		g_complex_parameter2 = 0.0;
		g_complex_parameter3 = 0.0;
		g_complex_parameter4 = 0.0;
		g_complex_parameter5 = 0.0;
		g_complex_parameter6 = 0.0;
		g_complex_parameter7 = 0.0;
		g_complex_parameter8 = 0.0;
		g_complex_parameter9 = 0.0;
		g_complex_parameter10 = 0.0;
		g_complex_parameter11 = 0.0;
		g_complex_parameter12 = 0.0;
		g_complex_parameter13 = 0.0;
		g_complex_parameter14 = 0.0;
		g_complex_parameter15 = 0.0;
		g_complex_parameter16 = 0.0;
		g_complex_parameter17 = 0.0;
		g_complex_parameter18 = 0.0;
		g_complex_parameter19 = 0.0;
		g_complex_parameter20 = 0.0;

		fprintf(fl_userlog,"l_rept_id:|%s|l_table_id:|%d|\n",l_rept_id,l_table_id);
		
		/******* Fetch the REPORT DETAILS for the perticular report ID and table ID ******************/
		
		EXEC SQL SELECT * INTO :h_report_details_struct
					FROM REPORT_DETAILS 
					WHERE REPORT_ID=:l_rept_id
					AND TABLE_ID=:l_table_id;
		
		if(sqlca.sqlcode < 0)
		{
			fprintf(fl_userlog,"Failed to Access REPORT_DETAILS --- ORA ERROR :|%d|\n",sqlca.sqlcode);
			
		}

		/***** Table header *********************************************************************/

		fprintf(fl_userlog,"h_report_details_struct.table_hdr:|%s|\n",h_report_details_struct.table_hdr);
		
		if(strlen(h_report_details_struct.table_hdr_align) > 0)
		{
			if(strlen(h_report_details_struct.table_hdr) > 0)
			{
				fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" class=\'lableredbg\'><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\" class=\'lableredbg\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.table_hdr_align,h_report_details_struct.table_hdr);
                
				g_line_count++;
			}
		}
		else
		{
			if(strlen(h_report_details_struct.table_hdr) > 0)
			{
				fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" class=\'lableredbg\'><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\" class=\'lableredbg\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.table_hdr);
                 
				g_line_count++;
			}
			
		}

		l_table_hdr = h_report_details_struct.table_hdr_brk;
		if(l_table_hdr > 0)
		{
			fprintf(l_report_XLS1,"<TABLE>\n");
			
			while(l_table_hdr > 0 )
			{
				fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
				
						
				l_table_hdr -- ;
				g_line_count++;
			}
			fprintf(l_report_XLS1,"</TABLE>\n");
			
		}


		/*********** Grouping Condition Check **************************************************/

		fprintf(fl_userlog,"h_report_details_struct.group_desc:|%s|\n",h_report_details_struct.group_desc);
		fprintf(fl_userlog,"h_report_details_struct.group_pos:|%s|\n",h_report_details_struct.group_pos);
			
		strcpy(l_group_pos,h_report_details_struct.group_pos);

		strcpy(l_group_query,h_report_details_struct.group_query);
		strcpy(l_group_desc,h_report_details_struct.group_desc);
	
		if(strlen(l_group_query) > 0)
		{
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM1',:l_param1) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM2',:l_param2) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM3',:l_param3) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM4',:l_param4) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM5',:l_param5) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM6',:l_param6) INTO :l_group_query FROM DUAL;
			
			fprintf(fl_userlog,"GROUP QUERY :|%s|\n",l_group_query);
			

			EXEC SQL PREPARE XLS1_GROUP FROM :l_group_query;
			EXEC SQL DECLARE xls1_group CURSOR FOR XLS1_GROUP;
			EXEC SQL OPEN xls1_group;

			if(sqlca.sqlcode < 0)
			{
				fprintf(fl_userlog,"Error : Cursor Open xls1_group ORA ERROR :|%d|\n",sqlca.sqlcode);
				
			}

			for(;;)
			{
				EXEC SQL FETCH xls1_group
						INTO :l_group_parameter;

				if((sqlca.sqlcode == 1403)||(l_group_break_flag == 1))
					break;

				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Error : Cursor Fetch xls1_group ORA ERROR :|%d|\n",sqlca.sqlcode);
					
				}

				/******* Split Group Parameter ***************************************/
			
				fprintf(fl_userlog,"l_group_pos:|%s|\n",l_group_pos);
				
				
				if(CO_SplitStr(l_group_pos,COMASEP,&l_group_pos_no,&l_group_pos_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 	fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_pos);
					
				 	APL_GOBACK_FAIL
				}
				
				fprintf(fl_userlog,"l_group_parameter:|%s|\n",l_group_parameter);
				
				
				if(CO_SplitStr(l_group_parameter,CAPSEP,&l_group_parameter_no,&l_group_parameter_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 	fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_parameter);
				//	//fflush(fl_userlog);
				 	APL_GOBACK_FAIL
				}

				fprintf(fl_userlog,"l_group_pos_no:|%d|l_group_parameter_no:|%d|\n",l_group_pos_no,l_group_parameter_no);
				
				
				if((l_group_pos_no > 0) && (l_group_parameter_no > 0)
					&& (l_group_pos_no == l_group_parameter_no))
				{	
					l_group_break_flag=0;
				
					for(i=0;i<l_group_pos_no;i++)
					{
						if(!strcmp(l_group_pos_value[i],"2"))
						{
							fprintf(fl_userlog,"l_param2:|%s|l_prev_param2:|%s|\n",l_param2,l_prev_param2);
							//fflush(fl_userlog);
							
							if(!strcmp(l_param2,l_prev_param2))
							{
								strcpy(l_param2,l_group_parameter_value[i]);
								strcpy(l_prev_param2,l_param2);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"3"))
						{
							fprintf(fl_userlog,"l_param3:|%s|l_prev_param3:|%s|\n",l_param3,l_prev_param3);
							
							
							if(!strcmp(l_param3,l_prev_param3))
							{
								strcpy(l_param3,l_group_parameter_value[i]);
								strcpy(l_prev_param3,l_param3);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"4"))
						{
							fprintf(fl_userlog,"l_param4:|%s|l_prev_param4:|%s|\n",l_param4,l_prev_param4);
							
							
							if(!strcmp(l_param4,l_prev_param4))
							{
								strcpy(l_param4,l_group_parameter_value[i]);
								strcpy(l_prev_param4,l_param4);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"5"))
						{
							fprintf(fl_userlog,"l_param5:|%s|l_prev_param5:|%s|\n",l_param5,l_prev_param5);
							
							
							if(!strcmp(l_param5,l_prev_param5))
							{
								strcpy(l_param5,l_group_parameter_value[i]);
								strcpy(l_prev_param5,l_param5);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"6"))
						{
							fprintf(fl_userlog,"l_param6:|%s|l_prev_param6:|%s|\n",l_param6,l_prev_param6);
							
							
							if(!strcmp(l_param6,l_prev_param6))
							{
								strcpy(l_param6,l_group_parameter_value[i]);
								strcpy(l_prev_param6,l_param6);
							}
							else
								l_group_break_flag=1;
						}
					}
				}
				else
				{
					fprintf(fl_userlog,"Error: Mismatch in Group Parameters :|%d||%d|",l_group_pos_no,l_group_parameter_no);
					
					break;
				}
				

			/****************************************************************************/

			/********************* Record Count Query Part *****************************/
				
				EXEC SQL SELECT COUNT(TABLE_ID) INTO :l_table_numbers 
						 FROM REPORT_DETAILS
						 WHERE REPORT_ID=:l_rept_id;
				
				fprintf(fl_userlog,"AFTER COUNT(TABLE_ID) -- ORA Error 893:|%d|\n",sqlca.sqlcode);
				

				fprintf(fl_userlog,"l_table_numbers 893:|%d|\n",l_table_numbers);
				

				l_table_num = 1 ;

				l_record_count_flag = 0;

				l_record_count = 0;

				while(l_table_num <= l_table_numbers)
				{
					EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
										RECORD_COUNT_QUERY,'@PARAM1',:l_param1),
														   '@PARAM2',:l_param2),
														   '@PARAM3',:l_param3),
														   '@PARAM4',:l_param4),
														   '@PARAM5',:l_param5),
														   '@PARAM6',:l_param6),
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
										RECORD_COUNT_QUERY1,'@PARAM1',:l_param1),
														   '@PARAM2',:l_param2),
														   '@PARAM3',:l_param3),
														   '@PARAM4',:l_param4),
														   '@PARAM5',:l_param5),
														   '@PARAM6',:l_param6)
						  INTO :l_record_count_query,:l_record_count_query1
						  FROM REPORT_DETAILS 
						  WHERE REPORT_ID=:l_rept_id 
						  AND TABLE_ID = :l_table_num;

						fprintf(fl_userlog,"AFTER RECORD_COUNT_QUERY Select -- ORA Error :|%d|\n",sqlca.sqlcode);
                  //   //fflush(fl_userlog);						

					strcpy(l_record_count_query_final,l_record_count_query);
					strcat(l_record_count_query_final,l_record_count_query1);

					fprintf(fl_userlog,"l_record_count_query_final :|%s|\n",l_record_count_query_final);
					

					if(strlen(l_record_count_query_final) > 0)
					{
						EXEC SQL PREPARE XLS1_RECORD_COUNT FROM :l_record_count_query_final;

						EXEC SQL DECLARE XLS1_record_count_curr CURSOR FOR XLS1_RECORD_COUNT;

						EXEC SQL OPEN  XLS1_record_count_curr;

						if(sqlca.sqlcode < 0)
						{
							fprintf(fl_userlog,"Error : Failed To OPEN XLS1_record_count_curr CURSOR -- ORA Error :|%d|\n",sqlca.sqlcode);
							//fflush(fl_userlog);
							l_record_count_flag = 0;
						}

						EXEC SQL FETCH XLS1_record_count_curr INTO :l_record_count;

						if(sqlca.sqlcode < 0)
						{
							fprintf(fl_userlog,"Error : Failed To FETCH XLS1_record_count_curr CURSOR -- ORA Error :|%d|\n",sqlca.sqlcode);
							
							l_record_count_flag = 0;
						}

						EXEC SQL CLOSE XLS1_record_count_curr;

					}


					fprintf(fl_userlog,"l_record_count :|%d|\n",l_record_count);
					
					if(l_record_count > 0)
						l_record_count_flag = 1;

					l_table_num ++;

				}

		 
			fprintf(fl_userlog,"RECORD COUNT FLAG :|%d|\n",l_record_count_flag);
			
			printf("RECORD COUNT FLAG :|%d|\n",l_record_count_flag);
            
		   /***********************************************************************************/

			if((l_record_count_flag == 1)||(strlen(l_record_count_query_final) == 0))
			{
				
				fprintf(fl_userlog,"l_param1:|%s|\n",l_param1);
				
				fprintf(fl_userlog,"l_param2:|%s|\n",l_param2);
				
				fprintf(fl_userlog,"l_param3:|%s|\n",l_param3);
				
				fprintf(fl_userlog,"l_param4:|%s|\n",l_param4);
				
				fprintf(fl_userlog,"l_param5:|%s|\n",l_param5);
				
				fprintf(fl_userlog,"l_param6:|%s|\n",l_param6);
				


			/**** Stored procedure for REPORT DETAILS GROUPING **************************/
			
			fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID 13:|%s|\n",l_rept_id);
			
			printf("Calling Stored Procedure SP_REPORT_DETAIL for Report ID 14:|%s|\n",l_rept_id);
			
			EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
					:l_param2,:l_param3,:l_param4,
					:l_param5,:l_param6,
					:l_table_query,:l_table_query1,:l_table_query2,
					:l_table_query3,:l_table_query4,:l_table_query5,
					:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
					:l_group_desc,:l_error_desc);

			strcpy(table_query,l_table_query);
			strcat(table_query," ");
			
			if(strlen(l_table_query1) > 0)
			{
				strcat(table_query,l_table_query1);
				strcat(table_query," ");
			}
			if(strlen(l_table_query2) > 0)
			{
				strcat(table_query,l_table_query2);
				strcat(table_query," ");
			}
			if(strlen(l_table_query3) > 0)
			{
				strcat(table_query,l_table_query3);
				strcat(table_query," ");
			}
			if(strlen(l_table_query4) > 0)
			{
				strcat(table_query,l_table_query4);
				strcat(table_query," ");
			}
			if(strlen(l_table_query5) > 0)
			{
				strcat(table_query,l_table_query5);
				strcat(table_query," ");
			}
			
			strcat(table_query,APL_NULL_STRING);
				
			fprintf(fl_userlog,"After Stored Procedure SP_REPORT_DETAIL ORA ERROR 4:|%d|\n",sqlca.sqlcode);
		//	//fflush(fl_userlog);
			
			if(sqlca.sqlcode < 0)
			{
				fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
				
			}
			
			/*fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
			//fflush(fl_userlog);*/
			fprintf(fl_userlog,"l_criteria_query1:|%s|\n",l_criteria_query1);
			
			fprintf(fl_userlog,"l_criteria_query2:|%s|\n",l_criteria_query2);
			
			fprintf(fl_userlog,"l_criteria_query3:|%s|\n",l_criteria_query3);
			
			fprintf(fl_userlog,"l_group_desc:|%s|\n",l_group_desc);
			

			/********* Group Description ***************************************************************/
			
			if(strlen(l_group_desc) > 0)
			{
				fprintf(l_report_XLS1,"<TABLE><TR><TD></TD></TR></TABLE>\n");
				
				fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR><TD COLSPAN=\'%d\' WIDTH=\'100%%\' class=\'ez4\'>%s</TD></TR></TABLE>\n",l_colspan,l_group_desc);
				
				fprintf(l_report_XLS1,"<TABLE><TR><TD></TD></TR></TABLE>\n");
				
				
				g_line_count++;
			}


			/****** Before table *******************************************************/
			
			if(strlen(h_report_details_struct.before_table_align) > 0)
			{
				if(strlen(h_report_details_struct.before_table) > 0)
				{	
					fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.before_table_align,h_report_details_struct.before_table);
                     
					g_line_count++;
				}
			}
			else
			{
				if(strlen(h_report_details_struct.before_table) > 0)
				{	
					fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.before_table);
                    
					g_line_count++;
				}

			}	
			
			l_before_table = h_report_details_struct.before_table_brk;
			if(l_before_table > 0)
			{
				fprintf(l_report_XLS1,"<TABLE>\n");
				
				while(l_before_table > 0 )
				{
					fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
					
							
					l_before_table -- ;
					g_line_count++;
				}
				fprintf(l_report_XLS1,"</TABLE>\n");
				
			}

			/******* Column Heading *****************************************************/
			
			/****** Multiple Column Level **************************************/

			strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
			strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
			strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
			
			fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);
			

			if(strlen(l_multiple_col_flag) > 0)
			{
				fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
				
				fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);
				

				if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
						&l_multiple_col_header_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
					
					 APL_GOBACK_FAIL
				}

				if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
						&l_multiple_colspan_sep_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
					
					 APL_GOBACK_FAIL
				}


				fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
				
				fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);
				

				fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border=\'%s\' cellSpacing=\'0\' cellPadding=\'1\'>\n",g_table_border);
                
				if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
				{
					for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
					{
						for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
						{
						
						if(int_a == int_b )
						{
						
						strcpy(l_level_header,l_multiple_col_header_value[int_a]);
						strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

						fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
						
						fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);
						

						if (CO_SplitStr(l_level_header,
								SEMISEP,
								&l_level_header_no,
								&l_level_header_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
							 
							 APL_GOBACK_FAIL
						}

						if (CO_SplitStr(l_level_colspan,
								SEMISEP,
								&l_level_colspan_no,
								&l_level_colspan_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
							 
							 APL_GOBACK_FAIL
						}

						fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
						
						fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);
						

						if(l_level_header_no == l_level_colspan_no)
						{

						fprintf(l_report_XLS1,"<TR>\n");
						
						for(int_aa=0;int_aa<l_level_header_no;int_aa++)
						{
							for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
							{
								if(int_aa == int_bb)
								{	
								
								strcpy(l_level_column,l_level_header_value[int_aa]);
								strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

								fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
								
								fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
								
								
								if(strlen(l_level_column) > 0)
								{
									fprintf(l_report_XLS1,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >%s</TD> \n", l_level_col_span,l_level_column);
								
								}
								else
								{
									fprintf(l_report_XLS1,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >&nbsp;</TD> \n", l_level_col_span);
                                   
								   }

								}
							}
						}
						fprintf(l_report_XLS1,"</TR>\n");
						

						}/*** End Of Inner Condition check *****/

						}
						
												
						}/*** End Of 2st Main For Loop *******/

					}/*** End Of 1st Main For Loop *******/

				}/*** End Of Multiple col condition check *****/

				l_column_no=h_report_details_struct.no_of_columns;
				l_no_of_columns = h_report_details_struct.no_of_columns;
			}
			else
			{

			fprintf(fl_userlog,"COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
			
			printf("COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
			
			
			/**** Split the Column Header and print *****************/
			
			strcpy(l_column_header,h_report_details_struct.column_hdr);
			if (CO_SplitStr(l_column_header,COMASEP,&l_col_no,&l_col_value) == APL_FAILURE)
			{
				 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_header);
				
				 APL_GOBACK_FAIL
			}

			/***** Table Column Heading and its records  *********/
			
			/*********** Page Break Testing  *********************/
			
			p_page_no = 1;
			rec_no = 1;

			if(!strcmp(l_paging_flag,"Y"))
			{
				if(p_page_no == 1)
				{
					fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
					

					fprintf(l_report_XLS1,"<TR>\n");
					
					for(i=0;i<l_col_no;i++)
					{
						strcpy(l_column_value,l_col_value[i]);

						fprintf(l_report_XLS1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
						
					}
					fprintf(l_report_XLS1,"</TR>\n");
					

					g_line_count++;
				}
			}
			else
			{
				fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
				

				fprintf(l_report_XLS1,"<TR>\n");
				
				for(i=0;i<l_col_no;i++)
				{
					strcpy(l_column_value,l_col_value[i]);

					fprintf(l_report_XLS1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
					
				}
				fprintf(l_report_XLS1,"</TR>\n");
				

				g_line_count ++;
			}

			g_line_count ++;

			/***************************************************************/		
			
			l_column_no=h_report_details_struct.no_of_columns;
			l_no_of_columns = h_report_details_struct.no_of_columns;
			
			l_col_hdr = h_report_details_struct.col_hdr_brk;

			}/***** End Of Column Header else Part ****************/
			
			EXEC SQL PREPARE XLS1_SUB1 FROM :table_query;	
			EXEC SQL DECLARE xls1tablequery1 CURSOR FOR XLS1_SUB1;
			EXEC SQL OPEN xls1tablequery1;

			l_fetch_count=0;

			l_return_param=0;

			fprintf(fl_userlog,"Entering SP_REPORT_DATA_PROC :|%s|\n",l_rept_id);
			
			printf("Entering SP_REPORT_DATA_PROC :|%s|\n",l_rept_id);
			

			EXEC SQL CALL SP_REPORT_DATA_PROC(:l_rept_id,
											  :l_param1,:l_param2,
											  :l_param3,:l_param4,
											  :l_param5,:l_param6,
											  :l_return_param,:l_error_desc);

		   fprintf(fl_userlog,"Error : After SP_REPORT_DATA_PROC --- ORA ERROR:|%s|\n",l_error_desc);
		   

		   fprintf(fl_userlog,"l_return_param :|%d|\n",l_return_param);
		   

			for(;;)
			{
				EXEC SQL FETCH xls1tablequery1
					INTO :l_table_parameter;

				if(sqlca.sqlcode == 1403)
				{
					fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
					
					if(l_fetch_count == 0)
					{
						fprintf(l_report_XLS1,"<TR>\n");
						
						fprintf(l_report_XLS1,"<TD WIDTH=\'100%%\' COLSPAN=\'%d\' class=\'ez4\'>NO RECORDS FOUND </TD>\n",l_column_no);
						
						fprintf(l_report_XLS1,"</TR>\n");
						

						g_line_count++;
					}
					break;
				}

				if(sqlca.sqlcode < 0)
				{
				   fprintf(fl_userlog,"Error : Critical Error Occured in xls1tablequery1 --- ORA ERROR:|%d|\n",sqlca.sqlcode);
				   
					break;
				}


				/********* Page Break Test  ******************************/

				 if(!strcmp(l_paging_flag,"Y"))
				 {
					if(!strcmp(l_print_flag,"L"))
					{
						 if(p_page_no == 1)
						 {
							 if(l_fetch_count > 0)
							 {
								 l_page_break_chk=(l_fetch_count%l_main_page_recs);
								
								 if(l_page_break_chk == 0)
								 {
									fprintf(l_report_XLS1,"</TABLE>\n");
									

									l_main_page_break = (((l_landscape  * p_total_page_no) - g_line_count)+l_tolarence);

									if(l_main_page_break > 0)
									{
										fprintf(l_report_XLS1,"<TABLE>\n");
										
										while(l_main_page_break > 0)
										{
											fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
											
											l_main_page_break --;

											g_line_count ++;
										}
										fprintf(l_report_XLS1,"</TABLE>\n");
										
									}

									fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
									

									fprintf(l_report_XLS1,"<TR>\n");
									
									for(i=0;i<l_col_no;i++)
									{
										strcpy(l_column_value,l_col_value[i]);

										fprintf(l_report_XLS1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
										
									}
									fprintf(l_report_XLS1,"</TR>\n");
									

									g_line_count++;

									p_page_no++;
									p_total_page_no++;

								 }
								 else
								 {
									p_final_break = 1;
								 }
							}
							else
							{
								p_final_break = 1;
							}
						}
						else if(p_page_no > 1)
						{
							 l_page_break_chk =(l_fetch_count%(l_main_page_recs+(l_next_page_recs * rec_no)));

							 if(l_page_break_chk == 0)
							 {
								fprintf(l_report_XLS1,"</TABLE>\n");
								

								l_next_page_break = (((l_landscape * p_total_page_no) - g_line_count)+l_tolarence);

								if(l_next_page_break > 0)
								{
									fprintf(l_report_XLS1,"<TABLE>\n");
									
									while(l_next_page_break > 0)
									{
										fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
										l_next_page_break --;

										g_line_count++;

									}
									fprintf(l_report_XLS1,"</TABLE>\n");
									
								}

								fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
								

								fprintf(l_report_XLS1,"<TR>\n");
								
								for(i=0;i<l_col_no;i++)
								{
									strcpy(l_column_value,l_col_value[i]);

									fprintf(l_report_XLS1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
									
								}
								fprintf(l_report_XLS1,"</TR>\n");
								

								g_line_count ++;
								p_page_no ++;
								p_total_page_no ++;
								rec_no++;
							 }
							 else
							 {
								p_final_break = 1;					
							 }
						}
					}
					else if(!strcmp(l_print_flag,"P"))
					{
						 if(p_page_no == 1)
						 {
							 if(l_fetch_count > 0)
							 {
								 l_page_break_chk=(l_fetch_count%l_main_page_recs);
								
								 if(l_page_break_chk == 0)
								 {
									fprintf(l_report_XLS1,"</TABLE>\n");
									

									l_main_page_break = (((l_portrait  * p_total_page_no) - g_line_count)+l_tolarence);

									if(l_main_page_break > 0)
									{
										fprintf(l_report_XLS1,"<TABLE>\n");
										
										while(l_main_page_break > 0)
										{
											fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
											
											l_main_page_break --;

											g_line_count ++;
										}
										fprintf(l_report_XLS1,"</TABLE>\n");
										
									}

									fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
									

									fprintf(l_report_XLS1,"<TR>\n");
									
									for(i=0;i<l_col_no;i++)
									{
										strcpy(l_column_value,l_col_value[i]);

										fprintf(l_report_XLS1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
										
									}
									fprintf(l_report_XLS1,"</TR>\n");
									

									g_line_count++;

									p_page_no++;
									p_total_page_no++;

								 }
								 else
								 {
									p_final_break = 1;
								 }
							}
							else
							{
								p_final_break = 1;
							}
						}
						else if(p_page_no > 1)
						{
							 l_page_break_chk =(l_fetch_count%(l_main_page_recs+(l_next_page_recs * rec_no)));

							 if(l_page_break_chk == 0)
							 {
								fprintf(l_report_XLS1,"</TABLE>\n");
								

								l_next_page_break = (((l_portrait * p_total_page_no) - g_line_count)+l_tolarence);

								if(l_next_page_break > 0)
								{
									//fprintf(l_report_XLS1,"<TABLE>\n");
									//fflush(fl_userlog);
									while(l_next_page_break > 0)
									{
										fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
										
										l_next_page_break --;

										g_line_count++;

									}
									fprintf(l_report_XLS1,"</TABLE>\n");
									
								}

								fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
								

								fprintf(l_report_XLS1,"<TR>\n");
								
								for(i=0;i<l_col_no;i++)
								{
									strcpy(l_column_value,l_col_value[i]);

									fprintf(l_report_XLS1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
									
								}
								fprintf(l_report_XLS1,"</TR>\n");
								

								g_line_count ++;
								p_page_no ++;
								p_total_page_no ++;
								rec_no++;
							 }
							 else
							 {
								p_final_break = 1;					
							 }
						}
					}
				}

				/**************************************************************/

				strcpy(l_column_parameter,l_table_parameter);

				if(l_return_param == 1)
				{
					fprintf(l_report_XLS1,"<TR>\n");
					

						if((strlen(l_column_parameter) > 0) && (strcmp(l_column_parameter," ")))
						{
							fprintf(l_report_XLS1,"<TD class=\'record\' ALIGN=\"LEFT\" 					x:str=\"%s\">%s</TD>\n",l_column_parameter,l_column_parameter);
						
						}
						else
						{
							fprintf(l_report_XLS1,"<TD class=\'record\'  >&nbsp</TD>\n");
							
							}

					fprintf(l_report_XLS1,"</TR>\n");
					

				}
				else
				{
				
				/******* Split the string and fetch the column data into seperate variables *********/
			
				if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
				{
					CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
					
					APL_GOBACK_FAIL
				}

				/***** For Number Formatting ***************************************************/

				strcpy(l_format_col_pos,h_report_details_struct.format_col_pos);
				if (CO_SplitStr(l_format_col_pos,COMASEP,&l_format_col_no,&l_format_col_val) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_format_col_pos);
					 
					 APL_GOBACK_FAIL
				}

				fprintf(l_report_XLS1,"<TR>\n");
				

				for(j=0;j<l_column_num;j++)
				{
					strcpy(l_column,l_column_val[j]);
					
					l_format_col_flag = 0;
					if(l_format_col_no > 0)
					{
						for (k=0;k<l_format_col_no;k++)
						{
							strcpy(l_format_col_value,l_format_col_val[k]);

							if(j==(atoi(l_format_col_value)-1))
								l_format_col_flag = 1;
						}

						if((strlen(l_column) > 0) && (strcmp(l_column," ")))
						{
							if(l_format_col_flag == 1)
							{
								fprintf(l_report_XLS1,"<TD class=\'xlsnumber\' ALIGN=\"RIGHT\" 	x:num=\"%s\">%s</TD>\n",l_column,l_column);
							
							}
							else
							{
									fprintf(l_report_XLS1,"<TD class=\'record\' ALIGN=\"LEFT\" 			x:str=\"%s\">%s</TD>\n",l_column,l_column);
							     
							}
						}
						else
						{
							 fprintf(l_report_XLS1,"<TD class=\'record\'  >&nbsp</TD>\n");
							 
						}

					}
					else
					{
						if((strlen(l_column) > 0) && (strcmp(l_column," ")))
						{
							fprintf(l_report_XLS1,"<TD class=\'record\' ALIGN=\"LEFT\" 					x:str=\"%s\">%s</TD>\n",l_column,l_column);
						
						}
						else
						{
							fprintf(l_report_XLS1,"<TD class=\'record\'  >&nbsp</TD>\n");
							
						}
					}

				}
				fprintf(l_report_XLS1,"</TR>\n");
				


				}

				/***********************************************************************************/

				l_fetch_count ++;

				g_line_count++;

			}
			EXEC SQL CLOSE xls1tablequery1;

		   	/********* For Criteria column value display ********************************/
			
			if(h_report_details_struct.tot_criteria_cols > 0)
			{
				if(strlen(h_report_details_struct.criteria_col1_query) > 0)
				{
					EXEC SQL PREPARE XLS1_CR1 FROM :l_criteria_query1;
					EXEC SQL DECLARE XLS1_criteria1 CURSOR FOR XLS1_CR1;
					EXEC SQL OPEN XLS1_criteria1;
					
					if(sqlca.sqlcode < 0)
					{
						fprintf(fl_userlog,"Error : Failed to Open XLS1_criteria1 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
						
					}

					for(;;)
					{
					       EXEC SQL FETCH XLS1_criteria1 INTO :l_criteria_value1;
					
					       if(sqlca.sqlcode == 1403)
					       break;

					       if(sqlca.sqlcode < 0)
					       {
							fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
							
							break;
					       }
					}
					EXEC SQL CLOSE XLS1_criteria1;

					if(strcmp(l_criteria_value1,APL_NULL_STRING))
					{
						EXEC SQL SELECT (:l_criteria_value1) INTO :l_criteria1_total FROM DUAL;
						
						l_grand_total1=l_grand_total1+l_criteria1_total;
						
						fprintf(fl_userlog,"l_grand_total1 :|%lf|\n",l_grand_total1);
						

						EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value1,:l_error_desc);

						fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
						

						fprintf(l_report_XLS1,"<TR>\n");
						
						fprintf(l_report_XLS1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col1_name,l_criteria_value1);
						
						fprintf(l_report_XLS1,"</TR>\n");
						

						g_line_count++;
					}
				}

				if(strlen(h_report_details_struct.criteria_col2_query) > 0)
				{
					EXEC SQL PREPARE XLS1_CR2 FROM :l_criteria_query2;
					EXEC SQL DECLARE XLS1_criteria2 CURSOR FOR XLS1_CR2;
					EXEC SQL OPEN XLS1_criteria2;
					
					if(sqlca.sqlcode < 0)
					{
						fprintf(fl_userlog,"Error : Failed to Open XLS1_criteria2 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
						//fflush(fl_userlog);
					}

					for(;;)
					{
					       EXEC SQL FETCH XLS1_criteria2 INTO :l_criteria_value2;
					
					       if(sqlca.sqlcode == 1403)
					       break;

					       if(sqlca.sqlcode < 0)
					       {
							fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
							//fflush(fl_userlog);
							break;
					       }
					}
					EXEC SQL CLOSE XLS1_criteria2;
					
					
					if(strcmp(l_criteria_value2,APL_NULL_STRING))	
					{
						EXEC SQL SELECT (:l_criteria_value2) INTO :l_criteria2_total FROM DUAL;
					
						l_grand_total2=l_grand_total2+l_criteria2_total;
					
						fprintf(fl_userlog,"l_grand_total2 :|%lf|\n",l_grand_total2);
						//fflush(fl_userlog);

						EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value2,:l_error_desc);

						fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
						//fflush(fl_userlog);

						fprintf(l_report_XLS1,"<TR>\n");
						//fflush(fl_userlog);
						fprintf(l_report_XLS1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col2_name,l_criteria_value2);
                         //fflush(fl_userlog);
						fprintf(l_report_XLS1,"</TR>\n");
						//fflush(fl_userlog);

						g_line_count++;
					}
				}

				if(strlen(h_report_details_struct.criteria_col3_query) > 0)
				{
					EXEC SQL PREPARE XLS1_CR3 FROM :l_criteria_query3;
					EXEC SQL DECLARE XLS1_criteria3 CURSOR FOR XLS1_CR3;
					EXEC SQL OPEN XLS1_criteria3;
					
					if(sqlca.sqlcode < 0)
					{
						fprintf(fl_userlog,"Error : Failed to Open XLS1_criteria3 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
						//fflush(fl_userlog);
					}

					for(;;)
					{
					      EXEC SQL FETCH XLS1_criteria3 INTO :l_criteria_value3;
					
					       if(sqlca.sqlcode == 1403)
					       break;

					       if(sqlca.sqlcode < 0)
					       {
							fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
							//fflush(fl_userlog);
							break;
					       }
					}
					EXEC SQL CLOSE XLS1_criteria3;
						
					
					if(strcmp(l_criteria_value3,APL_NULL_STRING))
					{
					    EXEC SQL SELECT (:l_criteria_value3) INTO :l_criteria3_total FROM DUAL;
					
						l_grand_total3=l_grand_total3+l_criteria3_total;
					
						fprintf(fl_userlog,"l_grand_total3 :|%lf|\n",l_grand_total3);
						//fflush(fl_userlog);

						EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value3,:l_error_desc);

						fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
						//fflush(fl_userlog);

						fprintf(l_report_XLS1,"<TR>\n");
						//fflush(fl_userlog);
						fprintf(l_report_XLS1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col3_name,l_criteria_value3);
						//fflush(fl_userlog);
						fprintf(l_report_XLS1,"</TR>\n");
						//fflush(fl_userlog);

						g_line_count++;
					}
				}
			}

			/******* Complex Criteria Part *********************************************/

			strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
			strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query);
			strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
			strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

			if(strlen(complex_criteria_query) > 0)
			{
			
			EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
					:complex_criteria_query,
					'@PARAM1',:l_param1),
					'@PARAM2',:l_param2),
					'@PARAM3',:l_param3),
					'@PARAM4',:l_param4),
					'@PARAM5',:l_param5),
					'@PARAM6',:l_param6),
					REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
					:complex_criteria_query1,
					'@PARAM1',:l_param1),
					'@PARAM2',:l_param2),
					'@PARAM3',:l_param3),
					'@PARAM4',:l_param4),
					'@PARAM5',:l_param5),
					'@PARAM6',:l_param6)
				INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;

			strcat(complex_criteria_query,complex_criteria_query1);
			
			fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);
			//fflush(fl_userlog);

			EXEC SQL PREPARE XLS11_CMPX_CURR FROM :complex_criteria_query;

			EXEC SQL DECLARE xls11_complex_curr CURSOR FOR XLS11_CMPX_CURR;

			fprintf(fl_userlog,"After DECLARE xls11_complex_curr :|%d|\n",sqlca.sqlcode);
			//fflush(fl_userlog);

			EXEC SQL OPEN xls11_complex_curr;

			EXEC SQL FETCH xls11_complex_curr INTO :l_complex_parameter;

			fprintf(fl_userlog,"After FETCH xls11_complex_curr :|%d|\n",sqlca.sqlcode);
			//fflush(fl_userlog);

			EXEC SQL CLOSE xls11_complex_curr;

			fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);
			//fflush(fl_userlog);

			if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
				APL_GOBACK_FAIL
			}
			
			fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);
			//fflush(fl_userlog);

			if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
				//fflush(fl_userlog);
				APL_GOBACK_FAIL
			}


			fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);
			//fflush(fl_userlog);

			l_complex_break_flag = 0;
			
			if(l_complex_num == l_complex_pos_num)
			{

			fprintf(l_report_XLS1,"<TR>\n");
			//fflush(fl_userlog);

			for(i=0;i<l_column_num;i++)
			{
				for(j=0;j<l_complex_pos_num;j++)
				{

				strcpy(l_complex_pos_column,l_complex_pos_val[j]);

				if((i==0)&&(j==0))
				{
					if(strlen(complex_criteria_label) > 0)
					{
						fprintf(l_report_XLS1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" >%s</TD>\n",complex_criteria_label);
						//fflush(fl_userlog);
						l_complex_break_flag=1;
					}
					else
					{
					fprintf(l_report_XLS1,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
					//fflush(fl_userlog);
					}
				}

				if(i== (atoi(l_complex_pos_column)-1))
				{				  
				  strcpy(l_complex_column,l_complex_val[j]);

				  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);
				  //fflush(fl_userlog);

				  l_complex_break_flag=1;

				  if(strlen(l_complex_column) > 0)
				  {
					  EXEC SQL CALL SP_NUMBER_FORMATTING(:l_complex_column,:l_error_desc);

					  if(strlen(l_error_desc) > 0)
					  {
						fprintf(l_report_XLS1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" 	x:str=\"%s\">%s</TD>\n",l_complex_column,l_complex_column);
						//fflush(fl_userlog);
						}
						
					  else
					  {
					fprintf(l_report_XLS1,"<TD class=\'lableredbg\' ALIGN=\"RIGHT\"  x:str=\"%s\">%s</TD>\n",l_complex_column,l_complex_column);
				     //fflush(fl_userlog);
					 }
				 }
				  else
				  {
						fprintf(l_report_XLS1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">&nbsp;</TD>\n");
						//fflush(fl_userlog);
				  }				  			
			
				  break;
				}
				else
				{
				     l_complex_break_flag = 0;
				     continue;
				} 

				}
				     
				if(i != 0)
				{
				  if(l_complex_break_flag != 1)
				     fprintf(l_report_XLS1,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
					 //fflush(fl_userlog);
				}
			}

			}
			else
			{
				fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
				//fflush(fl_userlog);
			}

			fprintf(l_report_XLS1,"</TR>\n");
			//fflush(fl_userlog);

			}
			
			/*****************	End Of Complex Part     *********************/

			fprintf(l_report_XLS1,"</TABLE>\n");
			//fflush(fl_userlog);

			/****** After table ******************************************************/
		
			l_after_table = h_report_details_struct.after_table_brk;
			if(l_after_table > 0)
			{
				fprintf(l_report_XLS1,"<TABLE>\n");
				//fflush(fl_userlog);
				while(l_after_table > 0 )
				{
					fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
					//fflush(fl_userlog);
							
					l_after_table -- ;
					g_line_count++;
				}
				fprintf(l_report_XLS1,"</TABLE>\n");
				//fflush(fl_userlog);
			}

			if(strlen(h_report_details_struct.after_table_align) > 0)
			{
				if(strlen(h_report_details_struct.after_table) > 0)
				{		
					fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.after_table_align,h_report_details_struct.after_table);
                     //fflush(fl_userlog);
					g_line_count++;
				}
			}
			else
			{
				if(strlen(h_report_details_struct.after_table) > 0)
				{	
					fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\'  ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.after_table);
                     //fflush(fl_userlog);
					g_line_count++;
				}

			}	
  
			/********* Table Footer note **********************************************/

			l_table_footer = h_report_details_struct.table_footer_brk;
			if(l_table_footer > 0)
			{
				fprintf(l_report_XLS1,"<TABLE>\n");
				//fflush(fl_userlog);
				while(l_table_footer > 0 )
				{
					fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
					//fflush(fl_userlog);
							
					l_table_footer -- ;
					g_line_count++;
				}
				fprintf(l_report_XLS1,"</TABLE>\n");
				//fflush(fl_userlog);
			}
		
			if(strlen(h_report_details_struct.table_footer_align) > 0)
			{
				if(strlen(h_report_details_struct.table_footer) > 0)
				{
					fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.table_footer_align,h_report_details_struct.table_footer);
                    //fflush(fl_userlog);
					g_line_count++;
				}
			}
			else
			{
				if(strlen(h_report_details_struct.table_footer) > 0)
				{
					fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.table_footer);
                  //fflush(fl_userlog);
				  g_line_count++;
				}

			}

			l_table = h_report_main_struct.table_brk;
			if(l_table > 0)
			{
				fprintf(l_report_XLS1,"<TABLE>\n");
				//fflush(fl_userlog);
				while(l_table > 0 )
				{
					fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
					//fflush(fl_userlog);
							
					l_table -- ;
					g_line_count++;
				}
				fprintf(l_report_XLS1,"</TABLE>\n");
				//fflush(fl_userlog);
			}

			if(l_fetch_count > 0 )
			{
			
			for(m=0;m<l_complex_num;m++)
			{
				if(m == 0)
				{
					strcpy(l_complex_parameter1,l_complex_val[m]);
					g_complex_parameter1=g_complex_parameter1+atof(l_complex_parameter1);
				}
				else if(m == 1)
				{
					strcpy(l_complex_parameter2,l_complex_val[m]);
					g_complex_parameter2=g_complex_parameter2+atof(l_complex_parameter2);
				}
				else if(m == 2)
				{
					strcpy(l_complex_parameter3,l_complex_val[m]);
					g_complex_parameter3=g_complex_parameter3+atof(l_complex_parameter3);
				}
				else if(m == 3)
				{
					strcpy(l_complex_parameter4,l_complex_val[m]);
					g_complex_parameter4=g_complex_parameter4+atof(l_complex_parameter4);
				}
				else if(m == 4)
				{
					strcpy(l_complex_parameter5,l_complex_val[m]);
					g_complex_parameter5=g_complex_parameter5+atof(l_complex_parameter5);
				}
				else if(m == 5)
				{
					strcpy(l_complex_parameter6,l_complex_val[m]);
					g_complex_parameter6=g_complex_parameter6+atof(l_complex_parameter6);
				}
				else if(m == 6)
				{
					strcpy(l_complex_parameter7,l_complex_val[m]);
					g_complex_parameter7=g_complex_parameter7+atof(l_complex_parameter7);
				}
				else if(m == 7)
				{
					strcpy(l_complex_parameter8,l_complex_val[m]);
					g_complex_parameter8=g_complex_parameter8+atof(l_complex_parameter8);
				}
				else if(m == 8)
				{
					strcpy(l_complex_parameter9,l_complex_val[m]);
					g_complex_parameter9=g_complex_parameter9+atof(l_complex_parameter9);
				}
				else if(m == 9)
				{
				        strcpy(l_complex_parameter10,l_complex_val[m]);
				        g_complex_parameter10=g_complex_parameter10+atof(l_complex_parameter10);
				}
				else if(m == 10)
				{
					strcpy(l_complex_parameter11,l_complex_val[m]);
					g_complex_parameter11=g_complex_parameter11+atof(l_complex_parameter11);
				}
				else if(m == 11)
				{
					strcpy(l_complex_parameter12,l_complex_val[m]);			
					g_complex_parameter12=g_complex_parameter12+atof(l_complex_parameter12);
				}
				else if(m == 12)
				{
					strcpy(l_complex_parameter13,l_complex_val[m]);
					g_complex_parameter13=g_complex_parameter13+atof(l_complex_parameter13);
				}
				else if(m == 13)
				{
					strcpy(l_complex_parameter14,l_complex_val[m]);
					g_complex_parameter14=g_complex_parameter14+atof(l_complex_parameter14);
				}
				else if(m == 14)
				{
					strcpy(l_complex_parameter15,l_complex_val[m]);
					g_complex_parameter15=g_complex_parameter15+atof(l_complex_parameter15);
				}
				else if(m == 15)
				{
					strcpy(l_complex_parameter16,l_complex_val[m]);
					g_complex_parameter16=g_complex_parameter16+atof(l_complex_parameter16);
				}
				else if(m == 16)
				{
					strcpy(l_complex_parameter17,l_complex_val[m]);
					g_complex_parameter17=g_complex_parameter17+atof(l_complex_parameter17);
				}
				else if(m == 17)
				{
					strcpy(l_complex_parameter18,l_complex_val[m]);
					g_complex_parameter18=g_complex_parameter18+atof(l_complex_parameter18);
				}
				else if(m == 18)
				{
					strcpy(l_complex_parameter19,l_complex_val[m]);
					g_complex_parameter19=g_complex_parameter19+atof(l_complex_parameter19);
				}
				else if(m == 19)
				{
					strcpy(l_complex_parameter20,l_complex_val[m]);
					g_complex_parameter20=g_complex_parameter20+atof(l_complex_parameter20);
				}
			}

			}/*** End Of Fetch Count check ******/

			}/*** End Of Record Count check Part ***********/

			}/**** End Of Grouping Block ****************/

			EXEC SQL CLOSE xls1_group;
		}
		else
		{
		
		/**** Stored procedure for REPORT DETAILS ******************************************/
		
fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID 15:|%s|\n",l_rept_id);
//fflush(fl_userlog);
		printf("Calling Stored Procedure SP_REPORT_DETAIL for Report ID 16:|%s|\n",l_rept_id);
		//fflush(fl_userlog);
		EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
				:l_param2,:l_param3,:l_param4,
				:l_param5,:l_param6,
				:l_table_query,:l_table_query1,:l_table_query2,
				:l_table_query3,:l_table_query4,:l_table_query5,
				:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
				:l_group_desc,:l_error_desc);

		strcpy(table_query,l_table_query);
		strcat(table_query," ");
		
		if(strlen(l_table_query1) > 0)
		{
			strcat(table_query,l_table_query1);
			strcat(table_query," ");
		}
		if(strlen(l_table_query2) > 0)
		{
			strcat(table_query,l_table_query2);
			strcat(table_query," ");
		}
		if(strlen(l_table_query3) > 0)
		{
			strcat(table_query,l_table_query3);
			strcat(table_query," ");
		}
		if(strlen(l_table_query4) > 0)
		{
			strcat(table_query,l_table_query4);
			strcat(table_query," ");
		}
		if(strlen(l_table_query5) > 0)
		{
			strcat(table_query,l_table_query5);
			strcat(table_query," ");
		}
		
		strcat(table_query,APL_NULL_STRING);
			
		if(sqlca.sqlcode < 0)
		{
			fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
			//fflush(fl_userlog);
		}
		
		/*fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
		//fflush(fl_userlog);*/
		fprintf(fl_userlog,"l_criteria_query1:|%s|\n",l_criteria_query1);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_criteria_query2:|%s|\n",l_criteria_query2);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_criteria_query3:|%s|\n",l_criteria_query3);
		//fflush(fl_userlog);

		/****** Before table *********************************************************/
		
		if(strlen(h_report_details_struct.before_table_align) > 0)
		{
			if(strlen(h_report_details_struct.before_table) > 0)
			{	
				fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.before_table_align,h_report_details_struct.before_table);
                 //fflush(fl_userlog);
				g_line_count++;
			}
		}
		else
		{
			if(strlen(h_report_details_struct.before_table) > 0)
			{	
				fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.before_table);
                //fflush(fl_userlog);
				g_line_count++;
			}

		}	
		
		l_before_table = h_report_details_struct.before_table_brk;
		if(l_before_table > 0)
		{
			fprintf(l_report_XLS1,"<TABLE>\n");
			//fflush(fl_userlog);
			while(l_before_table > 0 )
			{
				fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
				//fflush(fl_userlog);
						
				l_before_table -- ;
				g_line_count++;
			}
			fprintf(l_report_XLS1,"</TABLE>\n");
			//fflush(fl_userlog);
		}

		/******* Column Heading **************************************************/
		
		/****** Multiple Column Level **************************************/

		strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
		strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
		strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
		
		fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);
		//fflush(fl_userlog);

		if(strlen(l_multiple_col_flag) > 0)
		{
			fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);
			//fflush(fl_userlog);

			if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
					&l_multiple_col_header_value) == APL_FAILURE)
			{
				 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
				 //fflush(fl_userlog);
				 APL_GOBACK_FAIL
			}

			if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
					&l_multiple_colspan_sep_value) == APL_FAILURE)
			{
				 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
				 //fflush(fl_userlog);
				 APL_GOBACK_FAIL
			}


			fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);
			//fflush(fl_userlog);

			fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border=\'%s\' cellSpacing=\'0\' cellPadding=\'1\' >\n",g_table_border);
			//fflush(fl_userlog);

			if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
			{
				for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
				{
					for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
					{
			
					if(int_a == int_b )
					{
					
					strcpy(l_level_header,l_multiple_col_header_value[int_a]);
					strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

					fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);
					//fflush(fl_userlog);

					if (CO_SplitStr(l_level_header,
							SEMISEP,
							&l_level_header_no,
							&l_level_header_value) == APL_FAILURE)
					{
						 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
						 //fflush(fl_userlog);
						 APL_GOBACK_FAIL
					}

					if (CO_SplitStr(l_level_colspan,
							SEMISEP,
							&l_level_colspan_no,
							&l_level_colspan_value) == APL_FAILURE)
					{
						 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
						 //fflush(fl_userlog);
						 APL_GOBACK_FAIL
					}

					fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);
					//fflush(fl_userlog);

					if(l_level_header_no == l_level_colspan_no)
					{

					fprintf(l_report_XLS1,"<TR>\n");
					//fflush(fl_userlog);
					for(int_aa=0;int_aa<l_level_header_no;int_aa++)
					{
						for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
						{
							if(int_aa == int_bb)
							{	
							
							strcpy(l_level_column,l_level_header_value[int_aa]);
							strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

							fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
							//fflush(fl_userlog);
							fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
							//fflush(fl_userlog);
							
							if(strlen(l_level_column) > 0)
							{
								fprintf(l_report_XLS1,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >%s</TD> \n", l_level_col_span,l_level_column);
							//fflush(fl_userlog);
							}
							else
							{
								fprintf(l_report_XLS1,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >&nbsp;</TD> \n", l_level_col_span);
								//fflush(fl_userlog);
							}
   

							}
						}
					}
					fprintf(l_report_XLS1,"</TR>\n");
					//fflush(fl_userlog);

					}/*** End Of Inner Condition check *****/

					}
					
											
					}/*** End Of 2st Main For Loop *******/

				}/*** End Of 1st Main For Loop *******/

			}/*** End Of Multiple col condition check *****/

			l_column_no=h_report_details_struct.no_of_columns;
			l_no_of_columns = h_report_details_struct.no_of_columns;

		}
		else
		{

		fprintf(fl_userlog,"COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
		//fflush(fl_userlog);
		printf("COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
		//fflush(fl_userlog);
		/**** Split the Column Header and print *****************/
		
		strcpy(l_column_header,h_report_details_struct.column_hdr);
		if (CO_SplitStr(l_column_header,COMASEP,&l_col_no,&l_col_value) == APL_FAILURE)
		{
			 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
			 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_header);
			 //fflush(fl_userlog);
			 APL_GOBACK_FAIL
		}

		/***** Table Column Heading and its records  *********/
		
		/*********** Page Break Testing  :vinay ***********************/
		
		p_page_no = 1;
		rec_no = 1;

		if(!strcmp(l_paging_flag,"Y"))
		{
			if(p_page_no == 1)
			{
				fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
				//fflush(fl_userlog);

				fprintf(l_report_XLS1,"<TR>\n");
				//fflush(fl_userlog);
				for(i=0;i<l_col_no;i++)
				{
					strcpy(l_column_value,l_col_value[i]);

					fprintf(l_report_XLS1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
				}
				fprintf(l_report_XLS1,"</TR>\n");
				//fflush(fl_userlog);

				g_line_count++;
			}
		}
		else
		{
			fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
			//fflush(fl_userlog);

			fprintf(l_report_XLS1,"<TR>\n");
			//fflush(fl_userlog);
			for(i=0;i<l_col_no;i++)
			{
				strcpy(l_column_value,l_col_value[i]);

				fprintf(l_report_XLS1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
				//fflush(fl_userlog);
			}
			fprintf(l_report_XLS1,"</TR>\n");
			//fflush(fl_userlog);

			g_line_count ++;
		}

		g_line_count ++;

		/*******************************************************************************/

		l_column_no=h_report_details_struct.no_of_columns;
		l_no_of_columns = h_report_details_struct.no_of_columns;
		
		l_col_hdr = h_report_details_struct.col_hdr_brk;

		}/**** End Of Header Else Part **************************/
		
		EXEC SQL PREPARE XLS1_SUB FROM :table_query;	
		EXEC SQL DECLARE XLS1tablequery CURSOR FOR XLS1_SUB;
		EXEC SQL OPEN XLS1tablequery;

		l_fetch_count=0;

		l_return_param=0;

		fprintf(fl_userlog,"Entering SP_REPORT_DATA_PROC :|%s|\n",l_rept_id);
		//fflush(fl_userlog);
		printf("Entering SP_REPORT_DATA_PROC :|%s|\n",l_rept_id);
//fflush(fl_userlog);
		EXEC SQL CALL SP_REPORT_DATA_PROC(:l_rept_id,
										  :l_param1,:l_param2,
										  :l_param3,:l_param4,
										  :l_param5,:l_param6,
										  :l_return_param,:l_error_desc);

	   fprintf(fl_userlog,"Error : After SP_REPORT_DATA_PROC --- ORA ERROR:|%s|\n",l_error_desc);
	   //fflush(fl_userlog);

	   fprintf(fl_userlog,"l_return_param :|%d|\n",l_return_param);
	   //fflush(fl_userlog);


		for(;;)
		{
			EXEC SQL FETCH XLS1tablequery
				INTO :l_table_parameter;

			 if(sqlca.sqlcode == 1403)
			 {
			    fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
				//fflush(fl_userlog);
			    if(l_fetch_count == 0)
			    {
			       fprintf(l_report_XLS1,"<TR>\n");
				   //fflush(fl_userlog);
			       fprintf(l_report_XLS1,"<TD WIDTH=\'100%%\' COLSPAN=\'%d\' class=\'ez4\'>NO RECORDS FOUND </TD>\n",l_column_no);
				   //fflush(fl_userlog);
			       fprintf(l_report_XLS1,"</TR>\n");
				   //fflush(fl_userlog);

			       g_line_count++;
			    }
			    break;
			 }

			 if(sqlca.sqlcode < 0)
			 {
			    fprintf(fl_userlog,"Error : TABLE QUERY  Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
				//fflush(fl_userlog);
			    break;
			 }

			/********* Page Break Test : vinay ******************************/

			 if(!strcmp(l_paging_flag,"Y"))
			 {
				if(!strcmp(l_print_flag,"L"))
				{
					 if(p_page_no == 1)
					 {
						 if(l_fetch_count > 0)
						 {
							 l_page_break_chk=(l_fetch_count%l_main_page_recs);
							
							 if(l_page_break_chk == 0)
							 {
								fprintf(l_report_XLS1,"</TABLE>\n");
								//fflush(fl_userlog);

								l_main_page_break = (((l_landscape  * p_total_page_no) - g_line_count)+l_tolarence);

								if(l_main_page_break > 0)
								{
									fprintf(l_report_XLS1,"<TABLE>\n");
									//fflush(fl_userlog);
									while(l_main_page_break > 0)
									{
										fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
										//fflush(fl_userlog);
										l_main_page_break --;

										g_line_count ++;
									}
									fprintf(l_report_XLS1,"</TABLE>\n");
									//fflush(fl_userlog);
								}

								fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
								//fflush(fl_userlog);

								fprintf(l_report_XLS1,"<TR>\n");
								//fflush(fl_userlog);
								for(i=0;i<l_col_no;i++)
								{
									strcpy(l_column_value,l_col_value[i]);

									fprintf(l_report_XLS1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
									//fflush(fl_userlog);
								}
								fprintf(l_report_XLS1,"</TR>\n");
								//fflush(fl_userlog);

								g_line_count++;

								p_page_no++;
								p_total_page_no++;

							 }
							 else
							 {
								p_final_break = 1;
							 }
						}
						else
						{
							p_final_break = 1;
						}
					}
					else if(p_page_no > 1)
					{
						 l_page_break_chk =(l_fetch_count%(l_main_page_recs+(l_next_page_recs * rec_no)));

											
						 if(l_page_break_chk == 0)
						 {
							fprintf(l_report_XLS1,"</TABLE>\n");
							//fflush(fl_userlog);

							l_next_page_break = (((l_landscape * p_total_page_no) - g_line_count)+l_tolarence);

							if(l_next_page_break > 0)
							{
								fprintf(l_report_XLS1,"<TABLE>\n");
								//fflush(fl_userlog);
								while(l_next_page_break > 0)
								{
									fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
									//fflush(fl_userlog);
									l_next_page_break --;

									g_line_count++;

								}
								fprintf(l_report_XLS1,"</TABLE>\n");
								//fflush(fl_userlog);
							}

							fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
							//fflush(fl_userlog);

							fprintf(l_report_XLS1,"<TR>\n");
							//fflush(fl_userlog);
							for(i=0;i<l_col_no;i++)
							{
								strcpy(l_column_value,l_col_value[i]);

								fprintf(l_report_XLS1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
								//fflush(fl_userlog);
							}
							fprintf(l_report_XLS1,"</TR>\n");
							//fflush(fl_userlog);

							g_line_count ++;
							p_page_no ++;
							p_total_page_no ++;
							rec_no++;
						 }
						 else
						 {
							p_final_break = 1;					
						 }
					}
				}
				else if(!strcmp(l_print_flag,"P"))
				{
					 if(p_page_no == 1)
					 {
						 if(l_fetch_count > 0)
						 {
							 l_page_break_chk=(l_fetch_count%l_main_page_recs);
							
							 if(l_page_break_chk == 0)
							 {
								fprintf(l_report_XLS1,"</TABLE>\n");
								//fflush(fl_userlog);

								l_main_page_break = (((l_portrait  * p_total_page_no) - g_line_count)+l_tolarence);

								if(l_main_page_break > 0)
								{
									fprintf(l_report_XLS1,"<TABLE>\n");
									//fflush(fl_userlog);
									while(l_main_page_break > 0)
									{
										fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
										//fflush(fl_userlog);
										l_main_page_break --;

										g_line_count ++;
									}
									fprintf(l_report_XLS1,"</TABLE>\n");
									//fflush(fl_userlog);
								}

								fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
								//fflush(fl_userlog);

								fprintf(l_report_XLS1,"<TR>\n");
								//fflush(fl_userlog);
								for(i=0;i<l_col_no;i++)
								{
									strcpy(l_column_value,l_col_value[i]);

									fprintf(l_report_XLS1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
									//fflush(fl_userlog);
								}
								fprintf(l_report_XLS1,"</TR>\n");
								//fflush(fl_userlog);

								g_line_count++;

								p_page_no++;
								p_total_page_no++;

							 }
							 else
							 {
								p_final_break = 1;
							 }
						}
						else
						{
							p_final_break = 1;
						}
					}
					else if(p_page_no > 1)
					{
						 l_page_break_chk =(l_fetch_count%(l_main_page_recs+(l_next_page_recs * rec_no)));

						 if(l_page_break_chk == 0)
						 {
							fprintf(l_report_XLS1,"</TABLE>\n");
							//fflush(fl_userlog);

							l_next_page_break = (((l_portrait * p_total_page_no) - g_line_count)+l_tolarence);

							if(l_next_page_break > 0)
							{
								fprintf(l_report_XLS1,"<TABLE>\n");
								//fflush(fl_userlog);
								while(l_next_page_break > 0)
								{
									fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
									//fflush(fl_userlog);
									l_next_page_break --;

									g_line_count++;

								}
								fprintf(l_report_XLS1,"</TABLE>\n");
								//fflush(fl_userlog);
							}

							fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
							//fflush(fl_userlog);

							fprintf(l_report_XLS1,"<TR>\n");
							//fflush(fl_userlog);
							for(i=0;i<l_col_no;i++)
							{
								strcpy(l_column_value,l_col_value[i]);

								fprintf(l_report_XLS1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
								//fflush(fl_userlog);
							}
							fprintf(l_report_XLS1,"</TR>\n");
							//fflush(fl_userlog);

							g_line_count ++;
							p_page_no ++;
							p_total_page_no ++;
							rec_no++;
						 }
						 else
						 {
							p_final_break = 1;					
						 }
					}
				}
			}

			/*******************************************************************/
			
			strcpy(l_column_parameter,l_table_parameter);

			if(l_return_param == 1)
			{
				fprintf(l_report_XLS1,"<TR>\n");
				//fflush(fl_userlog);

					if((strlen(l_column_parameter) > 0) && (strcmp(l_column_parameter," ")))
					{
						fprintf(l_report_XLS1,"<TD class=\'record\' ALIGN=\"LEFT\" 					x:str=\"%s\">%s</TD>\n",l_column_parameter,l_column_parameter);
					//fflush(fl_userlog);
					}
					 else
					 {
						fprintf(l_report_XLS1,"<TD class=\'record\'  >&nbsp</TD>\n");
						//fflush(fl_userlog);
					 }

				fprintf(l_report_XLS1,"</TR>\n");
				//fflush(fl_userlog);

			}
			else
			{			
				/******* Split the string and fetch the column date *********/
				
				if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
				{
					CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
					//fflush(fl_userlog);
					APL_GOBACK_FAIL
				}

				/***** For Number Formatting ***************************************************/

				strcpy(l_format_col_pos,h_report_details_struct.format_col_pos);
				if (CO_SplitStr(l_format_col_pos,COMASEP,&l_format_col_no,&l_format_col_val) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_format_col_pos);
					 //fflush(fl_userlog);
					 APL_GOBACK_FAIL
				}

				fprintf(l_report_XLS1,"<TR>\n");
				//fflush(fl_userlog);

				for(j=0;j<l_column_num;j++)
				{
					strcpy(l_column,l_column_val[j]);
					
					l_format_col_flag = 0;
					if(l_format_col_no > 0)
					{
						for (k=0;k<l_format_col_no;k++)
						{
							strcpy(l_format_col_value,l_format_col_val[k]);

							if(j==(atoi(l_format_col_value)-1))
								l_format_col_flag = 1;
						}

						if((strlen(l_column) > 0) && (strcmp(l_column," ")))
						{
							if(l_format_col_flag == 1)
							{
								fprintf(l_report_XLS1,"<TD class=\'xlsnumber\' ALIGN=\"RIGHT\" 	x:num=\"%s\">%s</TD>\n",l_column,l_column);
								//fflush(fl_userlog);
							}
							else
							{
									fprintf(l_report_XLS1,"<TD class=\'record\' ALIGN=\"LEFT\" 			x:str=\"%s\">%s</TD>\n",l_column,l_column);
							//fflush(fl_userlog);
							}
						}
						else
						{
							 fprintf(l_report_XLS1,"<TD class=\'record\'  >&nbsp</TD>\n");
							 //fflush(fl_userlog);
						}

					}
					else
					{
						if((strlen(l_column) > 0) && (strcmp(l_column," ")))
						{
							fprintf(l_report_XLS1,"<TD class=\'record\' ALIGN=\"LEFT\" 					x:str=\"%s\">%s</TD>\n",l_column,l_column);
						//fflush(fl_userlog);
						}
						else
						{
							fprintf(l_report_XLS1,"<TD class=\'record\'  >&nbsp</TD>\n");
							//fflush(fl_userlog);
					   }
					}

				}
				fprintf(l_report_XLS1,"</TR>\n");
				//fflush(fl_userlog);

			}

			/***********************************************************************************/

			l_fetch_count ++;

			g_line_count++;

		}
		EXEC SQL CLOSE XLS1tablequery;

		/********* For Criteria column value display ***************/
		
		if(h_report_details_struct.tot_criteria_cols > 0)
		{
			if(strlen(h_report_details_struct.criteria_col1_query) > 0)
			{
				EXEC SQL PREPARE XLS1_CR1 FROM :l_criteria_query1;
				EXEC SQL DECLARE XLS1criteria1 CURSOR FOR XLS1_CR1;
				EXEC SQL OPEN XLS1criteria1;
				
				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Error : Failed to Open XLS1criteria1 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
					//fflush(fl_userlog);
				}

				for(;;)
				{
				EXEC SQL FETCH XLS1criteria1 INTO :l_criteria_value1;
				
				       if(sqlca.sqlcode == 1403)
				       break;

				       if(sqlca.sqlcode < 0)
				       {
					  		fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
							//fflush(fl_userlog);
					  		break;
				       }
				}
				EXEC SQL CLOSE XLS1criteria1;
				
				/****** For Grand Total Of Criteria Value *********/
					
				if(strcmp(l_criteria_value1,APL_NULL_STRING))
				{
					EXEC SQL SELECT (:l_criteria_value1) INTO :l_criteria1_total FROM DUAL;
					
					l_grand_total1=l_grand_total1+l_criteria1_total;
					
					fprintf(fl_userlog,"l_grand_total1 :|%lf|\n",l_grand_total1);
					//fflush(fl_userlog);

					EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value1,:l_error_desc);

					fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
					//fflush(fl_userlog);

					fprintf(l_report_XLS1,"<TR>\n");
					//fflush(fl_userlog);
					fprintf(l_report_XLS1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col1_name,l_criteria_value1);
					//fflush(fl_userlog);
					fprintf(l_report_XLS1,"</TR>\n");
					//fflush(fl_userlog);

					g_line_count++;
				}
			}

			if(strlen(h_report_details_struct.criteria_col2_query) > 0)
			{
				EXEC SQL PREPARE XLS1_CR2 FROM :l_criteria_query2;
				EXEC SQL DECLARE XLS1criteria2 CURSOR FOR XLS1_CR2;
				EXEC SQL OPEN XLS1criteria2;
				
				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Error : Failed to Open XLS1criteria2 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
					//fflush(fl_userlog);
				}

				for(;;)
				{
				EXEC SQL FETCH XLS1criteria2 INTO :l_criteria_value2;
				
				       if(sqlca.sqlcode == 1403)
				       break;

				       if(sqlca.sqlcode < 0)
				       {
					  		fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
							//fflush(fl_userlog);
					  		break;
				       }
				}
				EXEC SQL CLOSE XLS1criteria2;
					
					
				if(strcmp(l_criteria_value2,APL_NULL_STRING))
				{
					EXEC SQL SELECT (:l_criteria_value2) INTO :l_criteria2_total FROM DUAL;
					
					l_grand_total2=l_grand_total2+l_criteria2_total;
					
					fprintf(fl_userlog,"l_grand_total2 :|%lf|\n",l_grand_total2);
					//fflush(fl_userlog);

					EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value2,:l_error_desc);

					fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
					//fflush(fl_userlog);

					fprintf(l_report_XLS1,"<TR>\n");
					//fflush(fl_userlog);
					fprintf(l_report_XLS1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col2_name,l_criteria_value2);
                       //fflush(fl_userlog);
					fprintf(l_report_XLS1,"</TR>\n");
					//fflush(fl_userlog);

					g_line_count++;
				}
			}

			if(strlen(h_report_details_struct.criteria_col3_query) > 0)
			{
				EXEC SQL PREPARE XLS1_CR3 FROM :l_criteria_query3;
				EXEC SQL DECLARE XLS1criteria3 CURSOR FOR XLS1_CR3;
				EXEC SQL OPEN XLS1criteria3;
				
				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Error : Failed to Open XLS1criteria3 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
					//fflush(fl_userlog);
				}

				for(;;)
				{
				EXEC SQL FETCH XLS1criteria3 INTO :l_criteria_value3;
				
				       if(sqlca.sqlcode == 1403)
				       break;

				       if(sqlca.sqlcode < 0)
				       {
					  		fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
							//fflush(fl_userlog);
					  		break;
				       }
				}
				EXEC SQL CLOSE XLS1criteria3;
		
				
				if(strcmp(l_criteria_value3,APL_NULL_STRING))
				{
					EXEC SQL SELECT (:l_criteria_value3) INTO :l_criteria3_total FROM DUAL;
					
					l_grand_total3=l_grand_total3+l_criteria3_total;
					
					fprintf(fl_userlog,"l_grand_total3 :|%lf|\n",l_grand_total3);
					//fflush(fl_userlog);

					EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value3,:l_error_desc);

					fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
					//fflush(fl_userlog);

					fprintf(l_report_XLS1,"<TR>\n");
					//fflush(fl_userlog);
					fprintf(l_report_XLS1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col3_name,l_criteria_value3);
					//fflush(fl_userlog);
					fprintf(l_report_XLS1,"</TR>\n");
					//fflush(fl_userlog);

					g_line_count++;
				}
			}
		}

		/******* Complex Criteria Part *********************************************/


		strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
		strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
		strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
		strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

		fprintf(fl_userlog,"Before Complex Part -- l_fetch_count 2:|%d|\n",l_fetch_count);
		//fflush(fl_userlog);

		if(l_fetch_count > 0)
		{

		if(strlen(complex_criteria_query) > 0)
		{
		
			EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
					:complex_criteria_query,
					'@PARAM1',:l_param1),
					'@PARAM2',:l_param2),
					'@PARAM3',:l_param3),
					'@PARAM4',:l_param4),
					'@PARAM5',:l_param5),
					'@PARAM6',:l_param6),
					REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
					:complex_criteria_query1,
					'@PARAM1',:l_param1),
					'@PARAM2',:l_param2),
					'@PARAM3',:l_param3),
					'@PARAM4',:l_param4),
					'@PARAM5',:l_param5),
					'@PARAM6',:l_param6)
				INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;
	
		strcat(complex_criteria_query,complex_criteria_query1);

		fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);
		//fflush(fl_userlog);

		EXEC SQL PREPARE XLS12_CMPX_CURR FROM :complex_criteria_query;

		EXEC SQL DECLARE xls12_complex_curr CURSOR FOR XLS12_CMPX_CURR;

		fprintf(fl_userlog,"After DECLARE xls12_complex_curr :|%d|\n",sqlca.sqlcode);
		//fflush(fl_userlog);

		EXEC SQL OPEN xls12_complex_curr;

		EXEC SQL FETCH xls12_complex_curr INTO :l_complex_parameter;

		fprintf(fl_userlog,"After FETCH xls12_complex_curr :|%d|\n",sqlca.sqlcode);
		//fflush(fl_userlog);

		EXEC SQL CLOSE xls12_complex_curr;

		fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);
		//fflush(fl_userlog);

		if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
		{
			CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		 	fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
			//fflush(fl_userlog);
		 	APL_GOBACK_FAIL
		}
		
		fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);

		if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
		{
			CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		 	fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
			//fflush(fl_userlog);
		 	APL_GOBACK_FAIL
		}


		fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);
		//fflush(fl_userlog);

		l_complex_break_flag = 0;

		
		if(l_complex_num == l_complex_pos_num)
		{

		fprintf(l_report_XLS1,"<TR>\n");
		//fflush(fl_userlog);

		for(i=0;i<l_column_num;i++)
		{
			for(j=0;j<l_complex_pos_num;j++)
			{

			strcpy(l_complex_pos_column,l_complex_pos_val[j]);

			if((i==0)&&(j==0))
			{
				if(strlen(complex_criteria_label) > 0)
				{
					fprintf(l_report_XLS1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" >%s</TD>\n",complex_criteria_label);
					//fflush(fl_userlog);
			  		l_complex_break_flag=1;
				}
				else
				{
			     	fprintf(l_report_XLS1,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
					//fflush(fl_userlog);
				}
			}

			if(i== (atoi(l_complex_pos_column)-1))
			{				  
			  strcpy(l_complex_column,l_complex_val[j]);

			  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);
			  //fflush(fl_userlog);

			  l_complex_break_flag=1;
			  
			  if(strlen(l_complex_column) > 0)
			  {
				  EXEC SQL CALL SP_NUMBER_FORMATTING(:l_complex_column,:l_error_desc);

				  if(strlen(l_error_desc) > 0)
				  {
					fprintf(l_report_XLS1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" 								x:str=\"%s\">%s</TD>\n",l_complex_column,l_complex_column);
				 //fflush(fl_userlog);
				 }
				 else
				 {
					fprintf(l_report_XLS1,"<TD class=\'lableredbg\' ALIGN=\"RIGHT\" 								x:str=\"%s\">%s</TD>\n",l_complex_column,l_complex_column);
			          //fflush(fl_userlog);
				}
			 }
			  else
			  {
					fprintf(l_report_XLS1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">&nbsp;</TD>\n");
					//fflush(fl_userlog);
			  }
			
			  break;
			}
			else
			{
			     l_complex_break_flag = 0;
			     continue;
			} 

			}
			     
			if(i != 0)
			{
			  if(l_complex_break_flag != 1)
			     fprintf(l_report_XLS1,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
				 //fflush(fl_userlog);
			}
		}

		}
		else
		{
			fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
			//fflush(fl_userlog);
		}

		fprintf(l_report_XLS1,"</TR>\n");
		//fflush(fl_userlog);

		}

		}
		else
		{			
			fprintf(fl_userlog," No Records Found -- So No Need To Display Criteria \n");
			//fflush(fl_userlog);
		}
		

		/***************************************************************************/

		fprintf(l_report_XLS1,"</TABLE>\n");
		//fflush(fl_userlog);
		
		/****** After table ***************************************************************/
		
		l_after_table = h_report_details_struct.after_table_brk;
		if(l_after_table > 0)
		{
			fprintf(l_report_XLS1,"<TABLE>\n");
			//fflush(fl_userlog);
			while(l_after_table > 0 )
			{
				fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
				//fflush(fl_userlog);
						
				l_after_table -- ;
				g_line_count++;
			}
			fprintf(l_report_XLS1,"</TABLE>\n");
			//fflush(fl_userlog);
		}

		if(strlen(h_report_details_struct.after_table_align) > 0)
		{
			if(strlen(h_report_details_struct.after_table) > 0)
			{	
				fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN='%d\' ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.after_table_align,h_report_details_struct.after_table);
               //fflush(fl_userlog);
			   g_line_count++;
			}
		}
		else
		{
			if(strlen(h_report_details_struct.after_table) > 0)
			{	
				fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN='%d\' ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.after_table);
              //fflush(fl_userlog);
				g_line_count++;
			}

		}	
  
		/************ Table Footer note **************************************************/
	
		l_table_footer = h_report_details_struct.table_footer_brk;
		if(l_table_footer > 0)
		{
			fprintf(l_report_XLS1,"<TABLE>\n");
			//fflush(fl_userlog);
			while(l_table_footer > 0 )
			{
				fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
				//fflush(fl_userlog);
						
				l_table_footer -- ;
				g_line_count++;
			}
			fprintf(l_report_XLS1,"</TABLE>\n");
			//fflush(fl_userlog);
		}
		
		if(strlen(h_report_details_struct.table_footer_align) > 0)
		{
			if(strlen(h_report_details_struct.table_footer) > 0)
			{
				fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.table_footer_align,h_report_details_struct.table_footer);
                    //fflush(fl_userlog);
				g_line_count++;
			}
		}
		else
		{
			if(strlen(h_report_details_struct.table_footer) > 0)
			{
				fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.table_footer);
                 //fflush(fl_userlog);
				g_line_count++;
			}

		}

		l_table = h_report_main_struct.table_brk;
		if(l_table > 0)
		{
			fprintf(l_report_XLS1,"<TABLE>\n");
			//fflush(fl_userlog);
			while(l_table > 0 )
			{
				fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
				//fflush(fl_userlog);
						
				l_table -- ;
				g_line_count++;
			}
			fprintf(l_report_XLS1,"</TABLE>\n");
			//fflush(fl_userlog);
		}


		if( l_fetch_count > 0 )
		{
			for(m=0;m<l_complex_num;m++)
			{
				if(m == 0)
				{
					strcpy(l_complex_parameter1,l_complex_val[m]);
					g_complex_parameter1=atof(l_complex_parameter1);
				}
				else if(m == 1)
				{
					strcpy(l_complex_parameter2,l_complex_val[m]);
					g_complex_parameter2=atof(l_complex_parameter2);
				}
				else if(m == 2)
				{
					strcpy(l_complex_parameter3,l_complex_val[m]);
					g_complex_parameter3=atof(l_complex_parameter3);
				}
				else if(m == 3)
				{
					strcpy(l_complex_parameter4,l_complex_val[m]);
					g_complex_parameter4=atof(l_complex_parameter4);
				}
				else if(m == 4)
				{
					strcpy(l_complex_parameter5,l_complex_val[m]);
					g_complex_parameter5=atof(l_complex_parameter5);
				}
				else if(m == 5)
				{
					strcpy(l_complex_parameter6,l_complex_val[m]);
					g_complex_parameter6=atof(l_complex_parameter6);
				}
				else if(m == 6)
				{
					strcpy(l_complex_parameter7,l_complex_val[m]);
					g_complex_parameter7=atof(l_complex_parameter7);
				}
				else if(m == 7)
				{
					strcpy(l_complex_parameter8,l_complex_val[m]);
					g_complex_parameter8=atof(l_complex_parameter8);
				}
				else if(m == 8)
				{
					strcpy(l_complex_parameter9,l_complex_val[m]);
					g_complex_parameter9=atof(l_complex_parameter9);
				}
				else if(m == 9)
				{
					strcpy(l_complex_parameter10,l_complex_val[m]);
					g_complex_parameter10=atof(l_complex_parameter10);
				}
				else if(m == 10)
				{
					strcpy(l_complex_parameter11,l_complex_val[m]);
					g_complex_parameter11=atof(l_complex_parameter11);
				}
				else if(m == 11)
				{
					strcpy(l_complex_parameter12,l_complex_val[m]);			
					g_complex_parameter12=atof(l_complex_parameter12);
				}
				else if(m == 12)
				{
					strcpy(l_complex_parameter13,l_complex_val[m]);
					g_complex_parameter13=atof(l_complex_parameter13);
				}
				else if(m == 13)
				{
					strcpy(l_complex_parameter14,l_complex_val[m]);
					g_complex_parameter14=atof(l_complex_parameter14);
				}
				else if(m == 14)
				{
					strcpy(l_complex_parameter15,l_complex_val[m]);
					g_complex_parameter15=atof(l_complex_parameter15);
				}
				else if(m == 15)
				{
					strcpy(l_complex_parameter16,l_complex_val[m]);
					g_complex_parameter16=atof(l_complex_parameter16);
				}
				else if(m == 16)
				{
					strcpy(l_complex_parameter17,l_complex_val[m]);
					g_complex_parameter17=atof(l_complex_parameter17);
				}
				else if(m == 17)
				{
					strcpy(l_complex_parameter18,l_complex_val[m]);
					g_complex_parameter18=atof(l_complex_parameter18);
				}
				else if(m == 18)
				{
					strcpy(l_complex_parameter19,l_complex_val[m]);
					g_complex_parameter19=atof(l_complex_parameter19);
				}
				else if(m == 19)
				{
					strcpy(l_complex_parameter20,l_complex_val[m]);
					g_complex_parameter20=atof(l_complex_parameter20);
				}

			}/*** End of Complex For Loop ***/

		}/*** End Of Fetch Count Check ****/

		}/******* End Of Grouping Else Block **********/

		/*************** Complex Criteria Individual  *********************/
		
		if(l_fetch_count > 0 )
		{
			fprintf(fl_userlog,"g_complex_parameter1 :|%lf|\tg_complex_parameter2 :|%lf|\n",g_complex_parameter1,g_complex_parameter2);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter3 :|%lf|\tg_complex_parameter4 :|%lf|\n",g_complex_parameter3,g_complex_parameter4);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter5 :|%lf|\tg_complex_parameter6 :|%lf|\n",g_complex_parameter5,g_complex_parameter6);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter7 :|%lf|\tg_complex_parameter8 :|%lf|\n",g_complex_parameter7,g_complex_parameter8);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter9 :|%lf|\tg_complex_parameter10 :|%lf|\n",g_complex_parameter9,g_complex_parameter10);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter11 :|%lf|\tg_complex_parameter12 :|%lf|\n",g_complex_parameter11,g_complex_parameter12);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter13 :|%lf|\tg_complex_parameter14 :|%lf|\n",g_complex_parameter13,g_complex_parameter14);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter15 :|%lf|\tg_complex_parameter16 :|%lf|\n",g_complex_parameter15,g_complex_parameter16);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter17 :|%lf|\tg_complex_parameter18 :|%lf|\n",g_complex_parameter17,g_complex_parameter18);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter19 :|%lf|\tg_complex_parameter20 :|%lf|\n",g_complex_parameter19,g_complex_parameter20);
			//fflush(fl_userlog);
		}


		/*******************************************************************/


		/********* Dynamic Footer Display ****************************************/

		strcpy(footer_query,h_report_details_struct.footer_query);
		
		if(strlen(footer_query) > 0)
		{

		/**** Stored Procedure : SP_REPORT_FOOTER ***********************************/

		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
		//fflush(fl_userlog);
		printf("Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
		//fflush(fl_userlog);
		EXEC SQL CALL SP_REPORT_FOOTER(:l_rept_id,:l_table_id,:l_param1,:l_param2,
					:l_param3,:l_param4, :l_param5,
					:l_param6,:l_footer_query,:l_footer_query1,:l_error_desc); 

		strcat(l_footer_query,l_footer_query1);

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER ERR DESC :|%s|\n",l_error_desc);
			//fflush(fl_userlog);
		}

		fprintf(fl_userlog,"FOOTER QUERY :|%s|\n",l_footer_query);
		//fflush(fl_userlog);

		strcpy(l_footer_query_value,APL_NULL_STRING);

		EXEC SQL PREPARE XLS1_FOOTER_CURR FROM :l_footer_query;

		EXEC SQL DECLARE xls1_footer_curr CURSOR FOR XLS1_FOOTER_CURR;
		
		fprintf(fl_userlog,"After DECLARE xls1_footer_curr :|%d|\n",sqlca.sqlcode);
		//fflush(fl_userlog);

		EXEC SQL OPEN xls1_footer_curr;

		EXEC SQL FETCH xls1_footer_curr INTO :l_footer_query_value;
		
		fprintf(fl_userlog,"After FETCH xls1_footer_curr :|%d|\n",sqlca.sqlcode);
		//fflush(fl_userlog);

		EXEC SQL CLOSE xls1_footer_curr;

		fprintf(fl_userlog,"l_footer_query_value :|%s|\n",l_footer_query_value);
		//fflush(fl_userlog);

		l_footer_num = 0;

		strcpy(l_footer1,APL_NULL_STRING);
		strcpy(l_footer2,APL_NULL_STRING);
		strcpy(l_footer3,APL_NULL_STRING);
		strcpy(l_footer4,APL_NULL_STRING);
		strcpy(l_footer5,APL_NULL_STRING);
		strcpy(l_footer6,APL_NULL_STRING);
		strcpy(l_footer7,APL_NULL_STRING);
		strcpy(l_footer8,APL_NULL_STRING);
		strcpy(l_footer9,APL_NULL_STRING);
		strcpy(l_footer10,APL_NULL_STRING);
		strcpy(l_footer11,APL_NULL_STRING);
		strcpy(l_footer12,APL_NULL_STRING);
		strcpy(l_footer13,APL_NULL_STRING);
		strcpy(l_footer14,APL_NULL_STRING);
		strcpy(l_footer15,APL_NULL_STRING);

		if(strlen(l_footer_query_value) > 0)
		{		
			if (CO_SplitStr(l_footer_query_value,CAPSEP,&l_footer_num,&l_footer_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_footer_query_value);
				//fflush(fl_userlog);
				APL_GOBACK_FAIL
			}

			fprintf(fl_userlog,"l_footer_num :|%d|\n",l_footer_num);
			//fflush(fl_userlog);
			if(l_footer_num > 0)
			{
				for(i=0;i<l_footer_num;i++)
				{
					if(i == 0)
					strcpy(l_footer1,l_footer_val[i]);
					else if(i == 1)
					strcpy(l_footer2,l_footer_val[i]);
					else if(i == 2)
					strcpy(l_footer3,l_footer_val[i]);
					else if(i == 3)
					strcpy(l_footer4,l_footer_val[i]);
					else if(i == 4)
					strcpy(l_footer5,l_footer_val[i]);
					else if(i == 5)
					strcpy(l_footer6,l_footer_val[i]);
					else if(i == 6)
					strcpy(l_footer7,l_footer_val[i]);
					else if(i == 7)
					strcpy(l_footer8,l_footer_val[i]);
					else if(i == 8)
					strcpy(l_footer9,l_footer_val[i]);
					else if(i == 9)
					strcpy(l_footer10,l_footer_val[i]);
					else if(i == 10)
					strcpy(l_footer11,l_footer_val[i]);
					else if(i == 11)
					strcpy(l_footer12,l_footer_val[i]);
					else if(i == 12)
					strcpy(l_footer13,l_footer_val[i]);
					else if(i == 13)
					strcpy(l_footer14,l_footer_val[i]);
					else if(i == 14)
					strcpy(l_footer15,l_footer_val[i]);
				}
			}

		}/**************** End Of Footer Value check ********************************/

		/****** Stored Procedure : SP_REPORT_FOOTER_DATA ***********************************/

		fprintf(fl_userlog,"l_footer1 :|%s|\t l_footer2 :|%s|\n",l_footer1,l_footer2);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer3 :|%s|\t l_footer4 :|%s|\n",l_footer3,l_footer4);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer5 :|%s|\t l_footer6 :|%s|\n",l_footer5,l_footer6);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer7 :|%s|\t l_footer8 :|%s|\n",l_footer7,l_footer8);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer9 :|%s|\t l_footer10 :|%s|\n",l_footer9,l_footer10);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer11 :|%s|\t l_footer12 :|%s|\n",l_footer11,l_footer12);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer13 :|%s|\t l_footer14 :|%s|\n",l_footer13,l_footer14);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer15 :|%s|\n",l_footer15);
		//fflush(fl_userlog);

		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);	
		//fflush(fl_userlog);
		printf("Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);		
		//fflush(fl_userlog);
		
		EXEC SQL CALL SP_REPORT_FOOTER_DATA(:l_rept_id,:l_table_id,
							:l_footer1,:l_footer2,
							:l_footer3,:l_footer4,
							:l_footer5,:l_footer6,
							:l_footer7,:l_footer8,
							:l_footer9,:l_footer10,
							:l_footer11,:l_footer12,
							:l_footer13,:l_footer14,
							:l_footer15,
							:g_complex_parameter1,:g_complex_parameter2,
							:g_complex_parameter3,:g_complex_parameter4,
							:g_complex_parameter5,:g_complex_parameter6,
							:g_complex_parameter7,:g_complex_parameter8,
							:g_complex_parameter9,:g_complex_parameter10,
							:g_complex_parameter11,:g_complex_parameter12,
							:g_complex_parameter13,:g_complex_parameter14,
							:g_complex_parameter15,:g_complex_parameter16,
							:g_complex_parameter17,:g_complex_parameter18,
							:g_complex_parameter19,:g_complex_parameter20,
							:l_footer_data,:l_error_desc);

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER_DATA ERR DESC :|%s|\n",l_error_desc);
			//fflush(fl_userlog);
		}

		fprintf(fl_userlog,"FOOTER DATA :|%s|\n",l_footer_data);

		/************ Dynamic Formating Procedure ********************************************/
		
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);	
		printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
		
		EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_footer_data,:l_error_desc); 

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
			//fflush(fl_userlog);
		}

		fprintf(fl_userlog,"FOOTER DATA After Formatting -- :|%s|\n",l_footer_data);
		//fflush(fl_userlog);


		/*************************************************************************************/

		/************ Dynamic Footer Data Display **********************************************/
		
		fprintf(fl_userlog,"strlen(l_footer_data) :|%d|\n",strlen(l_footer_data));
		//fflush(fl_userlog);

		if(strlen(l_footer_data) > 0)
		{
			fprintf(fl_userlog,"Displaying Footer Data --- \n");
			//fflush(fl_userlog);

			fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\"><TR>\n");
			//fflush(fl_userlog);
			fprintf(l_report_XLS1,"<TD WIDTH=\"100%%\" colspan=\'%d\' ALIGN=\"%s\" class=\'headerdata\' >%s</TD> \n",l_colspan,h_report_details_struct.footer_data_align,l_footer_data);
			//fflush(fl_userlog);
			fprintf(l_report_XLS1,"</TR></TABLE>\n");
			//fflush(fl_userlog);
		}

		l_footer_data_brk = h_report_details_struct.footer_data_brk;
		while(l_footer_data_brk > 0)
		{
			fprintf(l_report_XLS1,"</BR>\n");
			//fflush(fl_userlog);
			l_footer_data_brk --;
			g_line_count++;
		}
		}

		/***************** End Of Dynamic Footer Display  *****************************/

		/***************** Final Complex Criteria Calculation *************************/

		fprintf(fl_userlog,"\n--- l_table_id --- 4:|%d|\n",l_table_id);
		//fflush(fl_userlog);

		if(l_table_id == 1)
		{
			f_complex_parameter1=f_complex_parameter1+g_complex_parameter1;
			f_complex_parameter2=f_complex_parameter2+g_complex_parameter2;
			f_complex_parameter3=f_complex_parameter3+g_complex_parameter3;
			f_complex_parameter4=f_complex_parameter4+g_complex_parameter4;
			f_complex_parameter5=f_complex_parameter5+g_complex_parameter5;
			f_complex_parameter6=f_complex_parameter6+g_complex_parameter6;
			f_complex_parameter7=f_complex_parameter7+g_complex_parameter7;
			f_complex_parameter8=f_complex_parameter8+g_complex_parameter8;
			f_complex_parameter9=f_complex_parameter9+g_complex_parameter9;
			f_complex_parameter10=f_complex_parameter10+g_complex_parameter10;
			f_complex_parameter11=f_complex_parameter11+g_complex_parameter11;
			f_complex_parameter12=f_complex_parameter12+g_complex_parameter12;
			f_complex_parameter13=f_complex_parameter13+g_complex_parameter13;
			f_complex_parameter14=f_complex_parameter14+g_complex_parameter14;
			f_complex_parameter15=f_complex_parameter15+g_complex_parameter15;
			f_complex_parameter16=f_complex_parameter16+g_complex_parameter16;
			f_complex_parameter17=f_complex_parameter17+g_complex_parameter17;
			f_complex_parameter18=f_complex_parameter18+g_complex_parameter18;
			f_complex_parameter19=f_complex_parameter19+g_complex_parameter19;
			f_complex_parameter20=f_complex_parameter20+g_complex_parameter20;
		}


		/**********************************************************************************/

		l_table_id ++;
	}
	}
	
	/********** For Displaying Grand Criteria Total ****************************************/

	fprintf(fl_userlog,"GRAND TOTAL FLAG is 3:|%s|\n",h_report_details_struct.grand_total_flag);
	//fflush(fl_userlog);
	//fflush(fl_userlog);
	EXEC SQL SELECT ROUND(:l_grand_total1,2),ROUND(:l_grand_total2,2),ROUND(:l_grand_total3,2)
			   INTO :l_grand_round1,:l_grand_round2,:l_grand_round3
				FROM DUAL;

	fprintf(fl_userlog,"After Grand Total Round -- ORA ERROR 3:|%d|\n",sqlca.sqlcode);
	//fflush(fl_userlog);

	fprintf(fl_userlog,"l_grand_round1:|%s|\n",l_grand_round1);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"l_grand_round2:|%s|\n",l_grand_round2);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"l_grand_round3:|%s|\n",l_grand_round3);
	//fflush(fl_userlog);

	printf("l_grand_round1:|%s|\n",l_grand_round1);
	//fflush(fl_userlog);
	printf("l_grand_round2:|%s|\n",l_grand_round2);
	//fflush(fl_userlog);
	printf("l_grand_round3:|%s|\n",l_grand_round3);	
	//fflush(fl_userlog);

	
	/********* Grand display Check ************************************************/

	fprintf(fl_userlog,"g_setting_flag:|%s|\n",g_setting_flag);
	//fflush(fl_userlog);
	printf("g_setting_flag:|%s|\n",g_setting_flag);
	
	if(!strcmp(g_setting_flag,"U"))
		strcpy(l_grand_display,"GRAND");
	else if(!strcmp(g_setting_flag,"L"))
		strcpy(l_grand_display,"grand");
	else 
		strcpy(l_grand_display,"Grand");

	/********************************************************************************/

	if(strlen(h_report_details_struct.grand_total_flag) > 0)
	{
		fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" class=\'ez4\'>\n");
		//fflush(fl_userlog);
		
		if(l_grand_total1 > 0)
		{
			EXEC SQL CALL SP_NUMBER_FORMATTING(:l_grand_round1,:l_error_desc);

			fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
			//fflush(fl_userlog);

			fprintf(l_report_XLS1,"<TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"RIGHT\" class=\'ez4\'>%s %s = %s</TD></TR>\n",l_colspan,l_grand_display,h_report_details_struct.criteria_col1_name,l_grand_round1);
             //fflush(fl_userlog);
			 
			g_line_count++;
		}
		
		if(l_grand_total2 > 0)
		{

			EXEC SQL CALL SP_NUMBER_FORMATTING(:l_grand_round2,:l_error_desc);

			fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
			//fflush(fl_userlog);

			fprintf(l_report_XLS1,"<TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"RIGHT\" class=\'ez4\'>%s %s = %s</TD></TR>\n",l_colspan,l_grand_display,h_report_details_struct.criteria_col2_name,l_grand_round2);
            //fflush(fl_userlog);
			g_line_count++;
		}
		
		if(l_grand_total3 > 0)
		{

			EXEC SQL CALL SP_NUMBER_FORMATTING(:l_grand_round3,:l_error_desc);

			fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
			//fflush(fl_userlog);

			fprintf(l_report_XLS1,"<TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"RIGHT\" class=\'ez4\'>%s %s = %s</TD></TR>\n",l_colspan,l_grand_display,h_report_details_struct.criteria_col3_name,l_grand_round3);
            //fflush(fl_userlog);
			g_line_count++;
		}
		
		fprintf(l_report_XLS1,"</TABLE>\n");
		//fflush(fl_userlog);
		
	}

	/************* Grand Complex Criteria Display ******************************************/
		
	fprintf(fl_userlog,"f_complex_parameter1 :|%lf|\tf_complex_parameter2 :|%lf|\n",f_complex_parameter1,f_complex_parameter2);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"f_complex_parameter3 :|%lf|\tf_complex_parameter4 :|%lf|\n",f_complex_parameter3,f_complex_parameter4);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"f_complex_parameter5 :|%lf|\tf_complex_parameter6 :|%lf|\n",f_complex_parameter5,f_complex_parameter6);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"f_complex_parameter7 :|%lf|\tf_complex_parameter8 :|%lf|\n",f_complex_parameter7,f_complex_parameter8);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"f_complex_parameter9 :|%lf|\tf_complex_parameter10 :|%lf|\n",f_complex_parameter9,f_complex_parameter10);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"f_complex_parameter11 :|%lf|\tf_complex_parameter12 :|%lf|\n",f_complex_parameter11,f_complex_parameter12);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"f_complex_parameter13 :|%lf|\tf_complex_parameter14 :|%lf|\n",f_complex_parameter13,f_complex_parameter14);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"f_complex_parameter15 :|%lf|\tf_complex_parameter16 :|%lf|\n",f_complex_parameter15,f_complex_parameter16);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"f_complex_parameter17 :|%lf|\tf_complex_parameter18 :|%lf|\n",f_complex_parameter17,f_complex_parameter18);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"f_complex_parameter19 :|%lf|\tf_complex_parameter20 :|%lf|\n",f_complex_parameter19,f_complex_parameter20);
	//fflush(fl_userlog);

	strcpy(complex_criteria,h_report_details_struct.complex_criteria);

	fprintf(fl_userlog,"strlen(complex_criteria) :|%d|\n",strlen(complex_criteria));
	//fflush(fl_userlog);

	if(strlen(complex_criteria) > 0 )
	{
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_CRITERIA :|%s|\n",l_rept_id);	
		//fflush(fl_userlog);
		printf("Calling Stored Procedure SP_REPORT_CRITERIA :|%s|\n",l_rept_id);
       //fflush(fl_userlog);		
		
		EXEC SQL CALL SP_REPORT_CRITERIA(:complex_criteria,
						 :f_complex_parameter1,:f_complex_parameter2,
						 :f_complex_parameter3,:f_complex_parameter4,
						 :f_complex_parameter5,:f_complex_parameter6,
						 :f_complex_parameter7,:f_complex_parameter8,
						 :f_complex_parameter9,:f_complex_parameter10,
						 :f_complex_parameter11,:f_complex_parameter12,
						 :f_complex_parameter13,:f_complex_parameter14,
						 :f_complex_parameter15,:f_complex_parameter16,
						 :f_complex_parameter17,:f_complex_parameter18,
						 :f_complex_parameter19,:f_complex_parameter20,
						 :l_complex_criteria_data,:l_error_desc); 

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_CRITERIA ERR DESC :|%s|\n",l_error_desc);
			//fflush(fl_userlog);
		}

		fprintf(fl_userlog,"COMPLEX CRITERIA DATA :|%s|\n",l_complex_criteria_data);
		//fflush(fl_userlog);

		/************ Dynamic Formating Procedure ********************************************/
		
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);	
		//fflush(fl_userlog);
		printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
		//fflush(fl_userlog);
		
		EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_complex_criteria_data,:l_error_desc); 

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
			//fflush(fl_userlog);
		}

		fprintf(fl_userlog,"COMPLEX CRITERIA DATA After Formatting -- :|%s|\n",l_complex_criteria_data);
		//fflush(fl_userlog);


		/*********************************************************************************/

		/************ COMPLEX CRITERIA DATA Display **************************************/
		
		fprintf(fl_userlog,"strlen(l_complex_criteria_data) :|%d|\n",strlen(l_complex_criteria_data));
		//fflush(fl_userlog);

		if(strlen(l_complex_criteria_data) > 0)
		{
			fprintf(fl_userlog,"Displaying l_complex_criteria_data Data --- \n");
			//fflush(fl_userlog);

			fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\"><TR>\n");
			//fflush(fl_userlog);
			fprintf(l_report_XLS1,"<TD WIDTH=\"100%%\"  colspan=\'%d\' ALIGN=\"LEFT\" class=\'headerdata\'>%s</TD>\n",l_colspan,l_complex_criteria_data);
			//fflush(fl_userlog);
			fprintf(l_report_XLS1,"</TR></TABLE>\n");
			//fflush(fl_userlog);
		}

	}


	/***************************************************************************************/


	/******* Page Footer note ***************************************************************/
		
	if(strlen(h_report_main_struct.page_footer_align) > 0)
	{
		if(strlen(h_report_main_struct.page_footer) > 0)
		{
			fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" class=\'footer\'><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\" class=\'footer\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_main_struct.page_footer_align,h_report_main_struct.page_footer);
             //fflush(fl_userlog);
			g_line_count++;
		}
	}
	else
	{
		if(strlen(h_report_main_struct.page_footer) > 0)
		{
			fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" class=\'footer\'><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\" class=\'footer\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_main_struct.page_footer);
           //fflush(fl_userlog);
			g_line_count++;
		}

	}

	l_page_footer = h_report_main_struct.page_footer_brk;
	if(l_page_footer > 0)
	{
		fprintf(l_report_XLS1,"<TABLE>\n");
		//fflush(fl_userlog);
		while(l_page_footer > 0 )
		{
			fprintf(l_report_XLS1,"<TR><TD></TD></TR>\n");
			//fflush(fl_userlog);
					
			l_page_footer -- ;
			g_line_count++;
		}
		fprintf(l_report_XLS1,"</TABLE>\n");
		//fflush(fl_userlog);
	}
	
	/******* Disclaimer **************************************************/
		
	if(strlen(h_report_main_struct.disclaimer) > 0)
	{
		fprintf(l_report_XLS1,"<TABLE WIDTH=\"100%%\" class=\'footer\'><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'footer\' COLSPAN=\'%d\' >%s</TD><TR></TABLE>\n",l_colspan,h_report_main_struct.disclaimer);
        //fflush(fl_userlog);
	}

	/********************************************************************/

	
	fprintf(l_report_XLS1,"</BODY></HTML>\n");
	//fflush(fl_userlog);

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:
	{
		fclose(l_report_XLS1);
		fclose(l_init_file);
		CO_ProcMonitor(g_logfile,"Success from CO_CreateReport_XLS1",NULL,NULL);
		fprintf(fl_userlog,"Success From CO_CreateReport_XLS1 Function\n");
		//fflush(fl_userlog);
		return(APL_SUCCESS);
	}


	RETURN_FAILURE:
	{
		fclose(l_report_XLS1);
		fclose(l_init_file);
		CO_ProcMonitor(g_logfile,"Failed from CO_CreateReport_XLS1",l_debug_info_ptr,NULL);
		fprintf(fl_userlog,"Failure From CO_CreateReport_XLS1 Function\n ");
		//fflush(fl_userlog);
		return(APL_FAILURE);
	}
}

int CO_CreateReport_CSV1(char *p_rept_id,char *p_rep_type,char *p_rep_name,
		      	char *p_param_str,char *p_chr_ptr_param,char *p_start_date,
			char *p_compress_flag,char *p_user,char *p_web_login_id,char *p_web_rpt_id,char *p_web_source_from,char *p_web_report_dt,char *p_web_proc_id,FILE *fl_userlog,
			DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	printf("Entered Inside CO_CreateReport_CSV1 Function \n");

	FILE	*l_init_file  		= (FILE *)NULL;
	FILE	*l_report_CSV1 	= (FILE *)NULL;
	char l_init_path[200]	= APL_NULL_STRING;
	char l_report_path[200] = APL_NULL_STRING;
	char l_report_name[200] = APL_NULL_STRING;
	char l_compress_flag[5]	= APL_NULL_STRING;
	char l_time_stamp[30]	= APL_NULL_STRING;
	
	memset(l_init_path,APL_NULL_CHAR,200);	
	memset(l_report_path,APL_NULL_CHAR,200);	
	memset(l_report_name,APL_NULL_CHAR,200);	

	REPORT_MAIN_STRUCT_H  h_report_main_struct;
	REPORT_MAIN_STRUCT_I  i_report_main_struct;
	
	REPORT_DETAILS_STRUCT_H h_report_details_struct;
	REPORT_DETAILS_STRUCT_I i_report_details_struct;
	
	INTL_REPT_STRUCT_H   l_intl_rept_struct_ha;
	memset(&l_intl_rept_struct_ha,APL_NULL_CHAR,sizeof(INTL_REPT_STRUCT_H));

	memset(&h_report_main_struct,APL_NULL_CHAR,sizeof(REPORT_MAIN_STRUCT_H));	
	memset(&i_report_main_struct,APL_NULL_CHAR,sizeof(REPORT_MAIN_STRUCT_I));

	memset(&h_report_details_struct,APL_NULL_CHAR,sizeof(REPORT_DETAILS_STRUCT_H));
	memset(&i_report_details_struct,APL_NULL_CHAR,sizeof(REPORT_DETAILS_STRUCT_I));
		
	char l_rept_id[11]		   	= APL_NULL_STRING;
	char l_rep_type[10]	   	= APL_NULL_STRING;
	char l_client[20]  			= APL_NULL_STRING;
	char l_sub_client[20]  		= APL_NULL_STRING;
	char l_rep_name[100]    	= APL_NULL_STRING;
	char l_param_str[4000]  	= APL_NULL_STRING;
	char l_chr_param[4000]  	= APL_NULL_STRING;
	char l_start_date[20]   	= APL_NULL_STRING;
	char l_user[20]  				= APL_NULL_STRING;
	char l_client_name[100] 	= APL_NULL_STRING;
	char l_gen_query[4001]  	= APL_NULL_STRING;

    //changes for report generation through api start
	char l_web_login_id[101]				= APL_NULL_STRING;
	char l_web_rpt_id[101]				= APL_NULL_STRING;
	char l_web_source_from[101]				= APL_NULL_STRING;
	char l_web_report_dt[101]				= APL_NULL_STRING;
	char l_web_proc_id[101]				= APL_NULL_STRING;
	//changes for report generation through api end

	char l_more_qry_flag[3]     = APL_NULL_STRING;
	char table_query[24001] 	= APL_NULL_STRING;
	char l_table_query[4001] 	= APL_NULL_STRING;
	char l_table_query1[4001] 	= APL_NULL_STRING;
	char l_table_query2[4001] 	= APL_NULL_STRING;
	char l_table_query3[4001] 	= APL_NULL_STRING;
	char l_table_query4[4001] 	= APL_NULL_STRING;
	char l_table_query5[4001] 	= APL_NULL_STRING;


	char l_criteria_query1[4001] = APL_NULL_STRING;
	char l_criteria_query2[4001] = APL_NULL_STRING;
	char l_criteria_query3[4001] = APL_NULL_STRING;
	char l_system_date[20]  	   = APL_NULL_STRING;
	char l_column_value[200]		= APL_NULL_STRING;
	char l_column_header[4001]		=APL_NULL_STRING;
	char l_table_parameter[6000]	=APL_NULL_STRING;
	char l_general_parameter[6000]=APL_NULL_STRING;
	char l_general_param[6000]		=APL_NULL_STRING;
	char l_param[2000]				=APL_NULL_STRING;
	char l_column_parameter[6000]	=APL_NULL_STRING;
	char l_column[2000]				=APL_NULL_STRING;
	char l_error_desc[2000]			=APL_NULL_STRING;
	char  l_param1[100]            = APL_NULL_STRING;
	char  l_param2[100]            = APL_NULL_STRING;
	char  l_param3[100]            = APL_NULL_STRING;
	char  l_param4[100]            = APL_NULL_STRING;
	char  l_param5[100]            = APL_NULL_STRING;
	char  l_param6[100]            = APL_NULL_STRING;

	char g_style[4000]	= APL_NULL_STRING;
	char g_style_lt[4000]	= APL_NULL_STRING;
	char g_setting_flag[2]	= APL_NULL_STRING;
	char g_table_border[2]= APL_NULL_STRING;
	
	char  l_group_query[4001]       = APL_NULL_STRING;
	char  l_group_desc[4001]        = APL_NULL_STRING;
	char  l_group_pos[11]			  = APL_NULL_STRING;
	char  l_group_parameter[2001]   = APL_NULL_STRING;
	
	char  **l_group_parameter_value		=	NULL;
	char  **l_group_pos_value 				=	NULL;

	int  l_group_pos_no			= 0;
	int  l_group_parameter_no	= 0;
	int  l_group_break_flag 	= 0;

	char  l_prev_param1[100]            = APL_NULL_STRING;
	char  l_prev_param2[100]            = APL_NULL_STRING;
	char  l_prev_param3[100]            = APL_NULL_STRING;
	char  l_prev_param4[100]            = APL_NULL_STRING;
	char  l_prev_param5[100]            = APL_NULL_STRING;
	char  l_prev_param6[100]            = APL_NULL_STRING;

	char l_grand_round1[200]	= APL_NULL_STRING;
	char l_grand_round2[200]	= APL_NULL_STRING;
	char l_grand_round3[200]	= APL_NULL_STRING;
	
	char  **l_col_value		=	NULL;
	char  **l_field_val		=	NULL;
	char  **l_column_val		=	NULL;
	char  **l_param_val		=	NULL;
	
	int i=0,j=0,k=0;
	int l_col_no				= 0;
	int l_column_num			= 0;
	int l_param_num			= 0;
	int l_fetch_count 		= 0;
	int l_before_title_break= 0;
	int l_no_of_columns     = 0;
	int l_no_of_cols        = 0;
	int l_table_id		      = 0;
	int l_column_no         = 0;
	int l_page_header			= 0;
	int l_before_title      = 0;
	int l_before_title1		= 0;
	int l_before_title2		= 0;
	int l_before_title3     = 0;
	int l_report_title		= 0;
	int l_after_title			= 0;
	int l_table_hdr			= 0;
	int l_before_table		= 0;
	int l_after_table		   = 0;
	int l_col_hdr				= 0;
	int l_table					= 0;
	int l_table_footer		= 0;
	int l_page_footer			= 0;
	int l_int_no_field      = 0;
	int int_no					= 0;
	double l_grand_total1		= 0;
	double l_grand_total2		= 0;
	double l_grand_total3		= 0;
	
	char l_criteria_value1[200]   = APL_NULL_STRING;
	char l_criteria_value2[200]   = APL_NULL_STRING;
	char l_criteria_value3[200]   = APL_NULL_STRING;
	double l_criteria1_total = 0.0;
	double l_criteria2_total = 0.0;
	double l_criteria3_total = 0.0;

	/************ Paging Varibles Declaration **********************/

	int p_page_no = 0;
	int rec_no = 0;
	int p_total_page_no = 0;
	int l_page_break_chk = 0;
   	int l_next_page_break = 0;
   	int l_main_page_break = 0;
	int p_final_break = 0;
	int l_final_break = 0;
	int l_main_page_recs = 0;
	int l_next_page_recs = 0;
	int l_tolarence = 0;
	int l_landscape = 0;
	int l_portrait = 0;
	int g_line_count = 0;

	char l_paging_flag[2] = APL_NULL_STRING;
	char l_print_flag[2] = APL_NULL_STRING;

	char l_grand_display[20] = APL_NULL_STRING;	

	/******* Complex Criteria Variables ***************************/

	char l_report_type[3] 			= APL_NULL_STRING;
	
	char  **l_complex_val			= NULL;
	int l_complex_num			= 0;
	char l_complex_column[2000]		= APL_NULL_STRING;
	char l_complex_parameter[2000] 		= APL_NULL_STRING;
	
	char  **l_complex_pos_val		= NULL;
	int l_complex_pos_num			= 0;
	char l_complex_pos_column[2000]		= APL_NULL_STRING;
	char l_complex_pos_parameter[2000] 	= APL_NULL_STRING;
		
	int l_complex_break_flag 		= 0;
	
	char complex_criteria_query[8001] 	= APL_NULL_STRING;
	char complex_criteria_query1[4001] 	= APL_NULL_STRING;
	char complex_criteria_label[4001] 	= APL_NULL_STRING;
	char complex_criteria_pos[101] 		= APL_NULL_STRING;

	char l_header_query[8001] 		= APL_NULL_STRING;
	char l_header_query1[4001] 		= APL_NULL_STRING;
	char header_query[4001] 		= APL_NULL_STRING;	
	char l_header_query_value[4001] 	= APL_NULL_STRING;	
	int l_header_num 			= 0;
	char **l_header_val			= NULL;
	char l_header_data[6001]		= APL_NULL_STRING;
	int l_header_brk			= 0;

	char l_footer_query[8001] 		= APL_NULL_STRING;	
	char l_footer_query1[4001] 		= APL_NULL_STRING;
	char footer_query[4001] 		= APL_NULL_STRING;	
	char l_footer_query_value[4001] 	= APL_NULL_STRING;	
	int l_footer_num 			= 0;
	char **l_footer_val			= NULL;
	char l_footer_data[6001]		= APL_NULL_STRING;
	int l_footer_data_brk			= 0;

	char l_header1[200] 			= APL_NULL_STRING;
	char l_header2[200] 			= APL_NULL_STRING;
	char l_header3[200] 			= APL_NULL_STRING;
	char l_header4[200] 			= APL_NULL_STRING;
	char l_header5[200] 			= APL_NULL_STRING;
	char l_header6[200] 			= APL_NULL_STRING;
	char l_header7[200] 			= APL_NULL_STRING;
	char l_header8[200] 			= APL_NULL_STRING;
	char l_header9[200] 			= APL_NULL_STRING;
	char l_header10[200] 			= APL_NULL_STRING;
	char l_header11[200] 			= APL_NULL_STRING;
	char l_header12[200] 			= APL_NULL_STRING;
	char l_header13[200] 			= APL_NULL_STRING;
	char l_header14[200] 			= APL_NULL_STRING;
	char l_header15[200] 			= APL_NULL_STRING;

	char l_footer1[200] 			= APL_NULL_STRING;
	char l_footer2[200] 			= APL_NULL_STRING;
	char l_footer3[200] 			= APL_NULL_STRING;
	char l_footer4[200] 			= APL_NULL_STRING;
	char l_footer5[200] 			= APL_NULL_STRING;
	char l_footer6[200] 			= APL_NULL_STRING;
	char l_footer7[200] 			= APL_NULL_STRING;
	char l_footer8[200] 			= APL_NULL_STRING;
	char l_footer9[200] 			= APL_NULL_STRING;
	char l_footer10[200] 			= APL_NULL_STRING;
	char l_footer11[200] 			= APL_NULL_STRING;
	char l_footer12[200] 			= APL_NULL_STRING;
	char l_footer13[200] 			= APL_NULL_STRING;
	char l_footer14[200] 			= APL_NULL_STRING;
	char l_footer15[200] 			= APL_NULL_STRING;

	int m					= 0;
	
	char l_complex_parameter1[500]		= APL_NULL_STRING;
	char l_complex_parameter2[500]		= APL_NULL_STRING;
	char l_complex_parameter3[500]		= APL_NULL_STRING;
	char l_complex_parameter4[500]		= APL_NULL_STRING;
	char l_complex_parameter5[500]		= APL_NULL_STRING;
	char l_complex_parameter6[500]		= APL_NULL_STRING;
	char l_complex_parameter7[500]		= APL_NULL_STRING;
	char l_complex_parameter8[500]		= APL_NULL_STRING;
	char l_complex_parameter9[500]		= APL_NULL_STRING;
	char l_complex_parameter10[500]		= APL_NULL_STRING;
	char l_complex_parameter11[500]		= APL_NULL_STRING;
	char l_complex_parameter12[500]		= APL_NULL_STRING;
	char l_complex_parameter13[500]		= APL_NULL_STRING;
	char l_complex_parameter14[500]		= APL_NULL_STRING;
	char l_complex_parameter15[500]		= APL_NULL_STRING;
	char l_complex_parameter16[500]		= APL_NULL_STRING;
	char l_complex_parameter17[500]		= APL_NULL_STRING;
	char l_complex_parameter18[500]		= APL_NULL_STRING;
	char l_complex_parameter19[500]		= APL_NULL_STRING;
	char l_complex_parameter20[500]		= APL_NULL_STRING;

	double g_complex_parameter1		= 0.0;
	double g_complex_parameter2 		= 0.0;
	double g_complex_parameter3 		= 0.0;
	double g_complex_parameter4 		= 0.0;
	double g_complex_parameter5 		= 0.0;
	double g_complex_parameter6 		= 0.0;
	double g_complex_parameter7 		= 0.0;
	double g_complex_parameter8 		= 0.0;
	double g_complex_parameter9 		= 0.0;
	double g_complex_parameter10 		= 0.0;
	double g_complex_parameter11 		= 0.0;
	double g_complex_parameter12 		= 0.0;
	double g_complex_parameter13 		= 0.0;
	double g_complex_parameter14 		= 0.0;
	double g_complex_parameter15 		= 0.0;
	double g_complex_parameter16 		= 0.0;
	double g_complex_parameter17 		= 0.0;
	double g_complex_parameter18 		= 0.0;
	double g_complex_parameter19 		= 0.0;
	double g_complex_parameter20		= 0.0;
	
	double f_complex_parameter1		= 0.0;
	double f_complex_parameter2 		= 0.0;
	double f_complex_parameter3 		= 0.0;
	double f_complex_parameter4 		= 0.0;
	double f_complex_parameter5 		= 0.0;
	double f_complex_parameter6 		= 0.0;
	double f_complex_parameter7 		= 0.0;
	double f_complex_parameter8 		= 0.0;
	double f_complex_parameter9 		= 0.0;
	double f_complex_parameter10 		= 0.0;
	double f_complex_parameter11 		= 0.0;
	double f_complex_parameter12 		= 0.0;
	double f_complex_parameter13 		= 0.0;
	double f_complex_parameter14 		= 0.0;
	double f_complex_parameter15 		= 0.0;
	double f_complex_parameter16 		= 0.0;
	double f_complex_parameter17 		= 0.0;
	double f_complex_parameter18 		= 0.0;
	double f_complex_parameter19 		= 0.0;
	double f_complex_parameter20		= 0.0;

	char complex_criteria[4001]		= APL_NULL_STRING;
	char l_complex_criteria_data[4001]      = APL_NULL_STRING;

	char l_multiple_col_flag[3]		= APL_NULL_STRING;
	char l_multiple_col_header[4001]	= APL_NULL_STRING;
	char l_multiple_colspan_sep[2001]	= APL_NULL_STRING;

	int l_multiple_col_header_no		= 0;
	int l_multiple_colspan_sep_no		= 0;

	char **l_multiple_col_header_value	= NULL;
	char **l_multiple_colspan_sep_value	= NULL;

	char l_level_header[2000]		= APL_NULL_STRING;
	char l_level_colspan[500]		= APL_NULL_STRING;
	char l_level_column[500]		= APL_NULL_STRING;
	char l_level_col_span[10]		= APL_NULL_STRING;

	int l_level_header_no			= 0;
	int l_level_colspan_no			= 0;
	int int_aa				= 0;
	int int_bb				= 0;
	int int_a				= 0;
	int int_b				= 0;

	char **l_level_header_value		= NULL;
	char **l_level_colspan_value		= NULL;

	char l_zip_image_path[200]		= APL_NULL_STRING;

	int l_format_col_flag		= 0;
	int l_format_col_no         = 0;
	char **l_format_col_val		= NULL;
	char l_format_col_value[10] = APL_NULL_STRING;
	char l_format_col_pos[500]	= APL_NULL_STRING;

	char l_record_count_query_final[8001]   = APL_NULL_STRING;
	char l_record_count_query[4001]   = APL_NULL_STRING;
	char l_record_count_query1[4001]   = APL_NULL_STRING;
	int l_record_count_flag = 0;
	int l_record_count = 0;
	int l_table_numbers = 0;
	int l_table_num = 0;

	int l_return_param = 0;	

		/*Pasha Added for AMFI Enhancement Report Naming convention */
	char l_char_dd[3] = APL_NULL_STRING;
	char l_char_mm[3] = APL_NULL_STRING;
	char l_char_yy[3] = APL_NULL_STRING;

	char temp[20] = APL_NULL_STRING;
	strcpy(l_rept_id,p_rept_id);
	strcpy(l_rep_type,p_rep_type);
	strcpy(l_rep_name,p_rep_name);
	strcpy(l_param_str,p_param_str);
	strcpy(l_chr_param,p_chr_ptr_param);
	strcpy(l_client,l_param_str);
	strcpy(l_start_date,p_start_date);
	strcpy(l_compress_flag,p_compress_flag);
	strcpy(l_user,p_user);
	strcpy(l_web_login_id,p_web_login_id);
	strcpy(l_web_rpt_id,p_web_rpt_id);
	strcpy(l_web_source_from,p_web_source_from);
	strcpy(l_web_report_dt,p_web_report_dt);
	strcpy(l_web_proc_id,p_web_proc_id);
	
	strcpy(l_rept_id,p_rept_id);
	strcpy(l_rep_type,p_rep_type);
	strcpy(l_rep_name,p_rep_name);
	strcpy(l_param_str,p_param_str);
	strcpy(l_chr_param,p_chr_ptr_param);
	strcpy(l_client,l_param_str);
	strcpy(l_start_date,p_start_date);
	strcpy(l_compress_flag,p_compress_flag);
	strcpy(l_user,p_user);

	EXEC SQL BEGIN DECLARE SECTION;
		
	EXEC SQL VAR l_rept_id IS STRING;
	EXEC SQL VAR l_gen_query IS STRING;

	EXEC SQL VAR table_query IS STRING;
	EXEC SQL VAR l_table_query IS STRING;
	EXEC SQL VAR l_table_query1 IS STRING;
	EXEC SQL VAR l_table_query2 IS STRING;
	EXEC SQL VAR l_table_query3 IS STRING;
	EXEC SQL VAR l_table_query4 IS STRING;
	EXEC SQL VAR l_table_query5 IS STRING;

	EXEC SQL VAR l_criteria_query1 IS STRING;
	EXEC SQL VAR l_criteria_query2 IS STRING;
	EXEC SQL VAR l_criteria_query3 IS STRING;
	EXEC SQL VAR l_table_parameter IS STRING;
	EXEC SQL VAR l_general_param IS STRING;
	EXEC SQL VAR l_client IS STRING;
	EXEC SQL VAR l_sub_client IS STRING;
	EXEC SQL VAR l_start_date IS STRING;
	EXEC SQL VAR l_group_parameter IS STRING;
	EXEC SQL VAR l_group_query IS STRING;
	EXEC SQL VAR l_group_desc IS STRING;

	EXEC SQL VAR l_grand_round1 IS STRING;
	EXEC SQL VAR l_grand_round2 IS STRING;
	EXEC SQL VAR l_grand_round3 IS STRING;

	EXEC SQL VAR complex_criteria_query IS STRING;
	EXEC SQL VAR complex_criteria_query1 IS STRING;
	EXEC SQL VAR l_header_query IS STRING;
	EXEC SQL VAR l_header_query1 IS STRING;
	EXEC SQL VAR l_footer_query IS STRING;
	EXEC SQL VAR l_footer_query1 IS STRING;
	EXEC SQL VAR l_complex_criteria_data IS STRING;
	EXEC SQL VAR complex_criteria IS STRING;
	EXEC SQL VAR l_web_login_id IS STRING;
	EXEC SQL VAR l_web_rpt_id IS STRING;
	EXEC SQL VAR l_web_source_from IS STRING;
	EXEC SQL VAR l_web_report_dt IS STRING;
	EXEC SQL VAR l_web_proc_id IS STRING;
	EXEC SQL END DECLARE SECTION;
	
	strcpy(l_init_path,getenv("INTL_ROOT_PATH"));
	strcat(l_init_path,"intl_sun.cfg");
	
	if((l_init_file = fopen(l_init_path,"r")) == (FILE *)NULL)
	{
		fprintf(fl_userlog,"Failed to Open file for PATH :|%s|\n",l_init_path);
		//fflush(fl_userlog);
		printf("Failed to Open file for PATH :|%s|\n",l_init_path);
		APL_GOBACK_FAIL
	}

	fprintf(fl_userlog,"COMPRESS FLAG :|%s|\n",l_compress_flag);
	//fflush(fl_userlog);
	
	if(strlen(l_compress_flag) > 0 && !strcmp(l_compress_flag,"Y"))
	{
		if (APL_FAILURE == CO_ReadToken(l_init_file,"INTL_TEMP_PATH",l_report_path,l_debug_info_ptr))
		{
			fprintf(fl_userlog,"Error : INTL_TEMP_PATH not set in intl_sun.cfg File \n");
			//fflush(fl_userlog);
			printf("Error : INTL_TEMP_PATH not set in intl_sun.cfg File \n");
			//fflush(fl_userlog);
			APL_GOBACK_FAIL
		}
	}
	else
	{
		if (APL_FAILURE == CO_ReadToken(l_init_file,"INTL_REP_PATH",l_report_path,l_debug_info_ptr))
		{
			fprintf(fl_userlog,"Error : INTL_REP_PATH not set in intl_sun.cfg File \n");
			//fflush(fl_userlog);
			printf("Error : INTL_REP_PATH not set in intl_sun.cfg File \n");
			//fflush(fl_userlog);
			APL_GOBACK_FAIL
		}
	}


	l_int_no_field = 0;

	fprintf(fl_userlog,"l_chr_param:|%s|\n",l_chr_param);
	//fflush(fl_userlog);
	
	if (CO_SplitStr(l_chr_param,PARAMSEP,&l_int_no_field,&l_field_val) == APL_FAILURE)
	{
		CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_chr_param);
		//fflush(fl_userlog);
		APL_GOBACK_FAIL
	}

	fprintf(fl_userlog,"l_int_no_field:|%d|\n",l_int_no_field);
	//fflush(fl_userlog);
	
	if(l_int_no_field > 0)
	{
		for(int_no=0;int_no<l_int_no_field;int_no++)
		{
			if(int_no == 1)
			strcpy(l_param1,l_field_val[int_no]);
			else if(int_no == 2)
			strcpy(l_param2,l_field_val[int_no]);
			else if(int_no == 3)
			strcpy(l_param3,l_field_val[int_no]);
			else if(int_no == 4)
			strcpy(l_param4,l_field_val[int_no]);
			else if(int_no == 5)
			strcpy(l_param5,l_field_val[int_no]);
		}
	}

                        /*Pasha Added for AMFI Enhancement Report Naming convention */
	l_int_no_field = 0;

			Alert("l_rep_name |%s|\n",l_rep_name);


	if (CO_SplitStr(l_rep_name,'@',&l_int_no_field,&l_field_val) == APL_FAILURE)
	{
		CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_chr_param);
		//fflush(fl_userlog);
		APL_GOBACK_FAIL
	}


	fprintf(fl_userlog,"l_int_no_field:|%d|\n",l_int_no_field);
	//fflush(fl_userlog);
		
	if(l_int_no_field > 0)
	{
				EXEC SQL select to_char(sys_date,'dd'), to_char(sys_date,'mm') ,to_char(sys_date,'yy')
					INTO :l_char_dd, :l_char_mm, :l_char_yy
					from  pro_sys_date;

			Alert(" l_client |%s|\n",l_client);
			Alert(" l_char_dd |%s|\n",l_char_dd);
			Alert(" l_char_mm |%s|\n",l_char_mm);
			Alert(" l_char_yy |%s|\n",l_char_yy);


		for(int_no=1;int_no<l_int_no_field;int_no++)
		{
				memset(temp,APL_NULL_CHAR,20);	

			strcpy(temp,l_field_val[int_no]);
			
			if(!strcmp(temp,"DD"))
			{
				if(strlen(l_report_name) > 0)
					strcat(l_report_name,l_char_dd);
				else
					strcpy(l_report_name,l_char_dd);
			}
			else if(!strcmp(temp, "MM"))
			{
				if(strlen(l_report_name) > 0)
					strcat(l_report_name,l_char_mm);
				else
					strcpy(l_report_name,l_char_mm);
			}
			else if(!strcmp(temp, "YY"))
			{
				if(strlen(l_report_name) > 0)
					strcat(l_report_name,l_char_yy);
				else
					strcpy(l_report_name,l_char_yy);
			}
			else if(!strcmp(temp, "PARAM"))
			{
				if(strlen(l_report_name) > 0)
					strcat(l_report_name,"PARAM");
				else
					strcpy(l_report_name,"PARAM");
			}
			else 
			{
				if(strlen(l_report_name) > 0)
					strcat(l_report_name,temp);
				else
					strcpy(l_report_name,temp);
			}

	Alert("Bagee - l_report_name |%s| at iteration  int_no %d and val %s:\n",l_report_name, int_no, temp);
		}
		strcat(l_report_name,".CSV");

	Alert("Bagee - l_report_name:|%s|\n",l_report_name);

	}

	else
	{

		EXEC SQL SELECT TO_CHAR(SYSDATE,'DD_MON_YYYY')||CHR(95)||TO_CHAR(SYSDATE,'HH24_MI_SS')		
				INTO :l_time_stamp
				FROM DUAL;

		sprintf(l_report_name,"%s_%s_%s.csv",l_rep_name,l_rept_id,l_time_stamp);
	}

	sprintf(l_report_path, "%s%s",l_report_path,l_report_name);

	if(strlen(l_compress_flag) > 0 && !strcmp(l_compress_flag,"Y"))
	{
		EXEC SQL INSERT INTO REPORT_LIST VALUES (:g_dynamic_seq,:l_report_name);

		IS_ANY_ORA_ERROR
	}

			/* End of Change */
	
	fprintf(fl_userlog,"REPORT FILE PATH 3:|%s|\n",l_report_path);
//fflush(fl_userlog);
	if((l_report_CSV1 = fopen(l_report_path,"w")) == (FILE *) NULL)
	{
		CO_InsertErr(l_debug_info_ptr,"FILE NOT FOUND",APL_NULL_STRING,
						APL_NULL_STRING,APL_NULL_STRING,	
						 __LINE__,__FILE__);
		fprintf(fl_userlog,"Error : File not Found For Report PATH :|%s|\n",l_report_path);
		//fflush(fl_userlog);
		APL_GOBACK_FAIL
	}

	/**** For Entry in PRO_COMMON_REPORT ********************************************************/
	
	//fprintf(fl_userlog,"LENGTH OF l_compress_flag :|%d|\n",strlen(l_compress_flag)); Changes done for AIX Migration
	fprintf(fl_userlog,"LENGTH OF l_compress_flag :|%d|\n",(int)strlen(l_compress_flag));
	//fflush(fl_userlog);

	if(strlen(l_compress_flag) == 0 || !strcmp(l_compress_flag,"N"))
	{
	    strcpy(l_intl_rept_struct_ha.report_name,l_report_name);
	    strcat(l_intl_rept_struct_ha.report_name,"\0");
	    strcpy(l_intl_rept_struct_ha.report_desc,APL_REP_DESC);
	    strcat(l_intl_rept_struct_ha.report_desc,"\0");
	    strcpy(l_intl_rept_struct_ha.report_date,l_start_date);
	    l_intl_rept_struct_ha.report_width = 200 ;
	    strcpy(l_intl_rept_struct_ha.task_desc,"DynamicReport");
	    strcpy(l_intl_rept_struct_ha.fe_be_ind,"B");
	    strcpy(l_intl_rept_struct_ha.usr,l_user);

		 fprintf(fl_userlog,"Entering CO_Proc_RptIns3\n");
		 //fflush(fl_userlog);
		 fprintf(fl_userlog,"report_name:|%s|\n",l_intl_rept_struct_ha.report_name);
		 //fflush(fl_userlog);
		 fprintf(fl_userlog,"report_desc:|%s|\n",l_intl_rept_struct_ha.report_desc);
		 //fflush(fl_userlog);
		 fprintf(fl_userlog,"report_date:|%s|\n",l_intl_rept_struct_ha.report_date);
		 //fflush(fl_userlog);
		 //fprintf(fl_userlog,"report_width:|%ld|\n",l_intl_rept_struct_ha.report_width); Changes done for AIX Migration
		 fprintf(fl_userlog,"report_width:|%d|\n",l_intl_rept_struct_ha.report_width);
		 //fflush(fl_userlog);
		 fprintf(fl_userlog,"task_desc:|%s|\n",l_intl_rept_struct_ha.task_desc);
		 //fflush(fl_userlog);
		 fprintf(fl_userlog,"fe_be_ind:|%s|\n",l_intl_rept_struct_ha.fe_be_ind);
		 //fflush(fl_userlog);
		 fprintf(fl_userlog,"usr:|%s|\n",l_intl_rept_struct_ha.usr);
	    //fflush(fl_userlog);
	    //if(APL_FAILURE == CO_Proc_DBRptIns(l_intl_rept_struct_ha,l_debug_info_ptr))
if(APL_FAILURE == CO_Proc_DBRptIns(&l_intl_rept_struct_ha,l_debug_info_ptr))/*'&'Added For AIX Migration*/
	    {
			fprintf(fl_userlog,"Error : Failure From CO_Proc_RptIns\n");
			//fflush(fl_userlog);
		  	APL_GOBACK_FAIL
	    }
		
		if((strlen(l_web_source_from) > 0) && !(strcmp(l_web_source_from,"W")))
		{
			EXEC SQL CALL SP_SHOW_REAL_TIME_REPORT_IN_WC(:l_report_name,:l_web_report_dt,:l_web_login_id,:l_report_path,:l_rept_id);
	
			if(sqlca.sqlcode < 0)
			{
				printf("Error : Failed From Stored Procedure SP_SHOW_REAL_TIME_REPORT_IN_WC ERR DESC :|%d|\n",sqlca.sqlcode);
				fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_SHOW_REAL_TIME_REPORT_IN_WC ERR DESC :|%d|\n",sqlca.sqlcode);
			}
		}
	}

	/*********************************************************************************************/

	fprintf(fl_userlog,"REPORT ID :|%s|\n",l_rept_id);
	//fflush(fl_userlog);
	
	EXEC SQL SELECT * INTO :h_report_main_struct
				FROM REPORT_MAIN
				WHERE REPORT_ID=:l_rept_id;	

	if(sqlca.sqlcode < 0)
	{
		fprintf(fl_userlog,"Error : Failed to Access REPORT_MAIN Table --- ORA ERROR :|%d|\n",sqlca.sqlcode);
		//fflush(fl_userlog);
	}


	/******* Page Header **************************************************************************/
	
	strcpy(l_report_type,h_report_main_struct.report_type);
	strcpy(header_query,h_report_main_struct.header_query);

	if(strlen(h_report_main_struct.page_hdr_align) > 0)
	{
		if(strlen(h_report_main_struct.page_header) > 0 )
		{
			fprintf(l_report_CSV1,"%s\n",h_report_main_struct.page_header);
			//fflush(fl_userlog);
		}
	}
	else
	{
		if(strlen(h_report_main_struct.page_header) > 0 )
		{
			fprintf(l_report_CSV1,"%s\n",h_report_main_struct.page_header);
			//fflush(fl_userlog);
		}

	}
	
	l_page_header = h_report_main_struct.page_hdr_brk;	
	while(l_page_header > 0 )
	{
		fprintf(l_report_CSV1,"\n");
		//fflush(fl_userlog);
				
		l_page_header -- ;
	}
		
	EXEC SQL SELECT MAX(NO_OF_COLUMNS)-2 INTO :l_no_of_cols FROM REPORT_DETAILS WHERE REPORT_ID=:l_rept_id;

	/*while(l_no_of_cols > 0) 
	{
		fprintf(l_report_CSV1,",");
		//fflush(fl_userlog);
		l_no_of_cols--;
	}*/
	
	if(strcmp(l_report_type,"L"))
	{			
		fprintf(l_report_CSV1,"Date : %s\n",l_start_date);
	}
	
	fprintf(l_report_CSV1,"\n");
	//fflush(fl_userlog);
	

	/******* Stored procedure for REPORT MAIN ******************************************/
	
	//strcpy(l_param1,l_sub_client);	
	
	fprintf(fl_userlog,"l_rept_id:|%s|\n",l_rept_id);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"l_param1:|%s|\t l_param2:|%s|\n",l_param1,l_param2);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"l_param3:|%s|\t l_param4:|%s|\n",l_param3,l_param4);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"l_param5:|%s|\t l_param6:|%s|\n",l_param5,l_param6);
	//fflush(fl_userlog);
	
	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_MAIN :|%s||%s|\n",l_rept_id,l_param1);	
//fflush(fl_userlog);	
	
	EXEC SQL CALL SP_REPORT_MAIN(:l_rept_id,:l_param1,:l_param2,
				     :l_param3,:l_param4, 
				     :l_param5,:l_param6,
                                     :l_gen_query,:l_error_desc);
	
	if(sqlca.sqlcode < 0)
	{
		fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_MAIN ERR DESC :|%s|\n",l_error_desc);
		//fflush(fl_userlog);
	}
	
	
	fprintf(fl_userlog,"GENERAL QUERY 3:|%s|\n",l_gen_query);
	//fflush(fl_userlog);
	if(strlen(l_gen_query) > 0 )
	{
	
	EXEC SQL PREPARE CSV1_GEN FROM :l_gen_query;
	EXEC SQL DECLARE CSV1genquerycurr CURSOR FOR CSV1_GEN;
	EXEC SQL OPEN CSV1genquerycurr;
	
	if(sqlca.sqlcode < 0)
	{
		fprintf(fl_userlog,"Error : Failed to OPEN CSV1genquerycurr CURSOR :|%d|",sqlca.sqlcode);
		//fflush(fl_userlog);
	}
	

	for(;;)
	{
		EXEC SQL FETCH CSV1genquerycurr
			INTO :l_general_param;

		if(sqlca.sqlcode == 1403)
		break;

	    	 if(sqlca.sqlcode < 0)
		 {
		    fprintf(fl_userlog,"Error : GENERAL QUERY Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
			//fflush(fl_userlog);
		    break;
		 }
		
		
		fprintf(fl_userlog,"l_general_param 3:|%s|\n",l_general_param);
		//fflush(fl_userlog);

		strcpy(l_general_parameter,l_general_param);
	
		/**** Split General Query and fetch the value in seperate parameter *********/
		
		if (CO_SplitStr(l_general_parameter,CAPSEP,&l_param_num,&l_param_val) == APL_FAILURE)
		{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_general_parameter);
				//fflush(fl_userlog);
			 	APL_GOBACK_FAIL
		}

	
		fprintf(fl_userlog,"l_param_num:|%d|\n",l_param_num);	
		//fflush(fl_userlog);
		
		for(k=0;k<l_param_num;k++)
		{
			strcpy(l_param,l_param_val[k]);

			/********* Before Title of report ****************************/
			
			if(k == 0)
			{
				if(strlen(h_report_main_struct.before_title_align) > 0)
				{	
					if(strlen(h_report_main_struct.before_title) > 0)
					{
						fprintf(l_report_CSV1,"%s,%s\n",h_report_main_struct.before_title,l_param);
						//fflush(fl_userlog);
					}
				}
				else
				{
					if(strlen(h_report_main_struct.before_title) > 0)
					{
						fprintf(l_report_CSV1,"%s,%s\n",h_report_main_struct.before_title,l_param);
						//fflush(fl_userlog);
					}

				}
	
				l_before_title = h_report_main_struct.before_title_brk;
				while(l_before_title > 0)
				{
					fprintf(l_report_CSV1,"\n");
					//fflush(fl_userlog);
					l_before_title --;
				}
			}
			else if(k == 1)
			{
				if(strlen(h_report_main_struct.before_title1_align) > 0)
				{	
					if(strlen(h_report_main_struct.before_title1) > 0)
					{
						fprintf(l_report_CSV1,"%s,%s\n",h_report_main_struct.before_title1,l_param);
						//fflush(fl_userlog);
					}
				}
				else
				{
					if(strlen(h_report_main_struct.before_title1) > 0)
					{
						fprintf(l_report_CSV1,"%s,%s",h_report_main_struct.before_title1,l_param);
						//fflush(fl_userlog);
					}

				}
	
				l_before_title1 = h_report_main_struct.before_title1_brk;
				while(l_before_title1 > 0)
				{
					fprintf(l_report_CSV1,"\n");
					//fflush(fl_userlog);
					l_before_title1 --;
				}
			}
			else if(k == 2)
			{
				if(strlen(h_report_main_struct.before_title2_align) > 0)
				{	
					if(strlen(h_report_main_struct.before_title2) > 0)
					{
						fprintf(l_report_CSV1,"%s,%s\n",h_report_main_struct.before_title2,l_param);
						//fflush(fl_userlog);
					}
				}
				else
				{
					if(strlen(h_report_main_struct.before_title2) > 0)
					{
						fprintf(l_report_CSV1,"%s,%s\n",h_report_main_struct.before_title2,l_param);
						//fflush(fl_userlog);
					}

				}
	
				l_before_title2 = h_report_main_struct.before_title2_brk;
				while(l_before_title2 > 0)
				{
					fprintf(l_report_CSV1,"\n");
					//fflush(fl_userlog);
					l_before_title2 --;
				}
			}
			else if(k == 3)
			{
				if(strlen(h_report_main_struct.before_title3_align) > 0)
				{	
					if(strlen(h_report_main_struct.before_title3) > 0)
					{
						fprintf(l_report_CSV1,"%s,%s\n",h_report_main_struct.before_title3,l_param);
						//fflush(fl_userlog);
					}
				}
				else
				{
					if(strlen(h_report_main_struct.before_title3) > 0)
					{
						fprintf(l_report_CSV1,"%s,%s\n",h_report_main_struct.before_title3,l_param);
						//fflush(fl_userlog);
					}
				}
	
				l_before_title3 = h_report_main_struct.before_title3_brk;
				while(l_before_title3 > 0)
				{
					fprintf(l_report_CSV1,"\n");
					//fflush(fl_userlog);
					l_before_title3 --;
				}
			}	

		}

	}
	EXEC SQL CLOSE CSV1genquerycurr;

	}

	fprintf(l_report_CSV1,"\n");
	//fflush(fl_userlog);


	/******* Dynamic Header Display ************************************************/

	fprintf(fl_userlog,"strlen(header_query) :|%d|\n",strlen(header_query));
	//fflush(fl_userlog);

	if(strlen(header_query) > 0)
	{

	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_HEADER :|%s||%s|\n",l_rept_id,l_param1);	
//fflush(fl_userlog);	
	printf("Calling Stored Procedure SP_REPORT_HEADER :|%s||%s|\n",l_rept_id,l_param1);		
	//fflush(fl_userlog);
	EXEC SQL CALL SP_REPORT_HEADER(:l_rept_id,:l_param1,:l_param2,
				:l_param3,:l_param4, :l_param5,
				:l_param6,:l_header_query,:l_header_query1,:l_error_desc);
	
	strcat(l_header_query,l_header_query1);

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_HEADER ERR DESC :|%s|\n",l_error_desc);
		//fflush(fl_userlog);
	}

	fprintf(fl_userlog,"HEADER QUERY :|%s|\n",l_header_query);
	//fflush(fl_userlog);

	EXEC SQL PREPARE CSV1_HEADER_CURR FROM :l_header_query;

	EXEC SQL DECLARE CSV1_header_curr CURSOR FOR CSV1_HEADER_CURR;
	
	fprintf(fl_userlog,"After DECLARE CSV1_header_curr Ora Error :|%d|\n",sqlca.sqlcode);
	//fflush(fl_userlog);

	EXEC SQL OPEN CSV1_header_curr;

	EXEC SQL FETCH CSV1_header_curr INTO :l_header_query_value;

	fprintf(fl_userlog,"After FETCH CSV1_header_curr Ora Error :|%d|\n",sqlca.sqlcode);
	//fflush(fl_userlog);

	EXEC SQL CLOSE CSV1_header_curr;

	fprintf(fl_userlog,"l_header_query_value :|%s|\n",l_header_query_value);
	//fflush(fl_userlog);
	
	if (CO_SplitStr(l_header_query_value,CAPSEP,&l_header_num,&l_header_val) == APL_FAILURE)
	{
		CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_header_query_value);
		//fflush(fl_userlog);
		APL_GOBACK_FAIL
	}

	fprintf(fl_userlog,"l_header_num :|%d|\n",l_header_num);
	//fflush(fl_userlog);
	if(l_header_num > 0)
	{
		for(i=0;i<l_header_num;i++)
		{

			if(i == 0)
			strcpy(l_header1,l_header_val[i]);
			else if(i == 1)
			strcpy(l_header2,l_header_val[i]);
			else if(i == 2)
			strcpy(l_header3,l_header_val[i]);
			else if(i == 3)
			strcpy(l_header4,l_header_val[i]);
			else if(i == 4)
			strcpy(l_header5,l_header_val[i]);
			else if(i == 5)
			strcpy(l_header6,l_header_val[i]);
			else if(i == 6)
			strcpy(l_header7,l_header_val[i]);
			else if(i == 7)
			strcpy(l_header8,l_header_val[i]);
			else if(i == 8)
			strcpy(l_header9,l_header_val[i]);
			else if(i == 9)
			strcpy(l_header10,l_header_val[i]);
			else if(i == 10)
			strcpy(l_header11,l_header_val[i]);
			else if(i == 11)
			strcpy(l_header12,l_header_val[i]);
			else if(i == 12)
			strcpy(l_header13,l_header_val[i]);
			else if(i == 13)
			strcpy(l_header14,l_header_val[i]);
			else if(i == 14)
			strcpy(l_header15,l_header_val[i]);
		}
	}

	/****** Stored Procedure : SP_REPORT_HEADER_DATA ***********************************/

	fprintf(fl_userlog,"l_header1 :|%s|\t l_header2 :|%s|\n",l_header1,l_header2);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"l_header3 :|%s|\t l_header4 :|%s|\n",l_header3,l_header4);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"l_header5 :|%s|\t l_header6 :|%s|\n",l_header5,l_header6);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"l_header7 :|%s|\t l_header8 :|%s|\n",l_header7,l_header8);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"l_header9 :|%s|\t l_header10 :|%s|\n",l_header9,l_header10);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"l_header11 :|%s|\t l_header12 :|%s|\n",l_header11,l_header12);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"l_header13 :|%s|\t l_header14 :|%s|\n",l_header13,l_header14);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"l_header15 :|%s|\t\n",l_header15);
	//fflush(fl_userlog);

	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_HEADER_DATA :|%s|\n",l_rept_id);	
//fflush(fl_userlog);	
	printf("Calling Stored Procedure SP_REPORT_HEADER_DATA :|%s|\n",l_rept_id);		
	//fflush(fl_userlog);

	EXEC SQL CALL SP_REPORT_HEADER_DATA(:l_rept_id,:l_header1,
					    :l_header2,:l_header3,
					    :l_header4,:l_header5,
					    :l_header6,:l_header7,
					    :l_header8,:l_header9,
					    :l_header10,:l_header11,
					    :l_header12,:l_header13,
					    :l_header14,:l_header15,
					    :l_header_data,:l_error_desc); 

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_HEADER_DATA ERR DESC :|%s|\n",l_error_desc);
		//fflush(fl_userlog);
	}

	fprintf(fl_userlog,"HEADER DATA :|%s|\n",l_header_data);
	//fflush(fl_userlog);

	/************ Dynamic Formating Procedure ********************************************/
	
	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);	
//fflush(fl_userlog);	
	printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
	
	EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_header_data,:l_error_desc); 

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
		//fflush(fl_userlog);
	}

	fprintf(fl_userlog,"HEADER DATA After Formatting -- :|%s|\n",l_header_data);
	//fflush(fl_userlog);

	/*************************************************************************************/

	fprintf(fl_userlog,"strlen(l_header_data) :|%d|\n",strlen(l_header_data));
	//fflush(fl_userlog);
	
	if(strlen(l_header_data) > 0)
	{
		fprintf(fl_userlog,"Displaying Header Data ----- \n");
		//fflush(fl_userlog);
		fprintf(l_report_CSV1,"%s\n",l_header_data);
		//fflush(fl_userlog);
	}

	l_header_brk = h_report_main_struct.header_brk;
	while(l_header_brk > 0)
	{
		fprintf(l_report_CSV1,"\n");
		//fflush(fl_userlog);
		l_header_brk --;
		g_line_count++;
	}

	}

	/**********************  End Of Dynamic Header Display   ***************************/

	
	/***** Report Title *************************************************************************/

	if(strlen(h_report_main_struct.report_title_align) > 0)
	{	
		if(strlen(h_report_main_struct.report_title) > 0)	
		{
 			fprintf(l_report_CSV1,"%s\n",h_report_main_struct.report_title);
            //fflush(fl_userlog);			
		}
	}
	else
	{
		if(strlen(h_report_main_struct.report_title) > 0)	
		{
 			fprintf(l_report_CSV1,"%s\n",h_report_main_struct.report_title);	
           //fflush(fl_userlog);			
		}

	}
	
	l_report_title = h_report_main_struct.report_title_brk;	
	while(l_report_title > 0)
	{
		fprintf(l_report_CSV1,"\n");
		l_report_title --;
	}
	

	/******** After report title ****************************************************************/
	
	if(strlen(h_report_main_struct.after_title_align) > 0)
	{
		if(strlen(h_report_main_struct.after_title) > 0)
		{
			fprintf(l_report_CSV1,"%s\n",h_report_main_struct.after_title);
			//fflush(fl_userlog);
		}
	}
	else
	{
		if(strlen(h_report_main_struct.after_title) > 0)
		{
			fprintf(l_report_CSV1,"%s\n",h_report_main_struct.after_title);
			//fflush(fl_userlog);
		}

	}
	
	l_after_title = h_report_main_struct.after_title_brk;
	while(l_after_title > 0)
	{
		fprintf(l_report_CSV1,"\n");
		//fflush(fl_userlog);
		l_after_title --;
	}
	

	l_table_id = 1;
	
	fprintf(fl_userlog,"NO OF TABLES :|%d|\n",h_report_main_struct.no_of_tables);
	//fflush(fl_userlog);
	printf("NO OF TABLES :|%d|\n",h_report_main_struct.no_of_tables);
	//fflush(fl_userlog);
	if(!strcmp(h_report_main_struct.report_type,"G"))/*added by siva.ganapathi for Enh. Log 121 on 2/20/2009 -- started*/
	{
		
	
			EXEC SQL SELECT * INTO :h_report_details_struct
							FROM REPORT_DETAILS 
							WHERE REPORT_ID=:l_rept_id
							AND TABLE_ID=:l_table_id;
			
		strcpy(l_group_query,h_report_details_struct.group_query);
		
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM1',:l_param1) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM2',:l_param2) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM3',:l_param3) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM4',:l_param4) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM5',:l_param5) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM6',:l_param6) INTO :l_group_query FROM DUAL;
					
		fprintf(fl_userlog,"GROUP QUERY :|%s|\n",l_group_query);
		//fflush(fl_userlog);
		
		EXEC SQL PREPARE CSV1_GROUP FROM :l_group_query;
		EXEC SQL DECLARE csv1_group_g CURSOR FOR CSV1_GROUP;
		EXEC SQL OPEN csv1_group_g;

		if(sqlca.sqlcode < 0)
		{
				fprintf(fl_userlog,"Error : Cursor Open csv1_group_g ORA ERROR :|%d|\n",sqlca.sqlcode);
				//fflush(fl_userlog);
		}
		

		for(;;)
		{
			
			EXEC SQL FETCH csv1_group_g INTO :l_group_parameter;

			if((sqlca.sqlcode == 1403)||(l_group_break_flag == 1))
			break;

			for(l_table_id=1; l_table_id <= h_report_main_struct.no_of_tables; l_table_id++)
			{
				g_complex_parameter1 = 0.0;
				g_complex_parameter2 = 0.0;
				g_complex_parameter3 = 0.0;
				g_complex_parameter4 = 0.0;
				g_complex_parameter5 = 0.0;
				g_complex_parameter6 = 0.0;
				g_complex_parameter7 = 0.0;
				g_complex_parameter8 = 0.0;
				g_complex_parameter9 = 0.0;
				g_complex_parameter10 = 0.0;
				g_complex_parameter11 = 0.0;
				g_complex_parameter12 = 0.0;
				g_complex_parameter13 = 0.0;
				g_complex_parameter14 = 0.0;
				g_complex_parameter15 = 0.0;
				g_complex_parameter16 = 0.0;
				g_complex_parameter17 = 0.0;
				g_complex_parameter18 = 0.0;
				g_complex_parameter19 = 0.0;
				g_complex_parameter20 = 0.0;

				fprintf(fl_userlog,"l_rept_id:|%s|l_table_id:|%d|\n",l_rept_id,l_table_id);
				//fflush(fl_userlog);
				
				/******* Fetch the REPORT DETAILS for the perticular report ID and table ID ******************/
				
				
					EXEC SQL SELECT * INTO :h_report_details_struct
							FROM REPORT_DETAILS 
							WHERE REPORT_ID=:l_rept_id
							AND TABLE_ID=:l_table_id;
				
				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Failed to Access REPORT_DETAILS --- ORA ERROR :|%d|\n",sqlca.sqlcode);
					//fflush(fl_userlog);
				}
				
			/***** Table header *******************************/

						fprintf(fl_userlog,"h_report_details_struct.table_hdr:|%s|\n",h_report_details_struct.table_hdr);
						//fflush(fl_userlog);
						
						if(strlen(h_report_details_struct.table_hdr) > 0)
						{
							fprintf(l_report_CSV1,"%s\n",h_report_details_struct.table_hdr);
							//fflush(fl_userlog);
						}

						l_table_hdr = h_report_details_struct.table_hdr_brk;
						while(l_table_hdr > 0)
						{
							fprintf(l_report_CSV1,"\n");
							//fflush(fl_userlog);
							l_table_hdr --;
						}

		if(l_table_id == 1)
		{		
							
						fprintf(fl_userlog,"table id is:|%d|\n",l_table_id);
						//fflush(fl_userlog);

						fprintf(fl_userlog,"h_report_details_struct.group_desc:|%s|\n",h_report_details_struct.group_desc);
						//fflush(fl_userlog);
						fprintf(fl_userlog,"h_report_details_struct.group_pos:|%s|\n",h_report_details_struct.group_pos);
						//fflush(fl_userlog);
					
						strcpy(l_group_pos,h_report_details_struct.group_pos);

						strcpy(l_group_desc,h_report_details_struct.group_desc);
						/******* Split Group Parameter ***************************************/
					
						fprintf(fl_userlog,"l_group_pos:|%s|\n",l_group_pos);
						//fflush(fl_userlog);
								
						if(CO_SplitStr(l_group_pos,COMASEP,&l_group_pos_no,&l_group_pos_value) == APL_FAILURE)
						{
									 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
									fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_pos);
									//fflush(fl_userlog);
									APL_GOBACK_FAIL
						}
								
						fprintf(fl_userlog,"l_group_parameter:|%s|\n",l_group_parameter);
						//fflush(fl_userlog);
								
						if(CO_SplitStr(l_group_parameter,CAPSEP,&l_group_parameter_no,&l_group_parameter_value) == APL_FAILURE)
						{
									 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
									fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_parameter);
									//fflush(fl_userlog);
									APL_GOBACK_FAIL
						}

						fprintf(fl_userlog,"l_group_pos_no:|%d|l_group_parameter_no:|%d|\n",l_group_pos_no,l_group_parameter_no);
						//fflush(fl_userlog);
						
						if((l_group_pos_no > 0) && (l_group_parameter_no > 0)
										&& (l_group_pos_no == l_group_parameter_no))
						{	
							l_group_break_flag=0;
						
							for(i=0;i<l_group_pos_no;i++)
							{
								if(!strcmp(l_group_pos_value[i],"2"))
								{
									fprintf(fl_userlog,"l_param2:|%s|l_prev_param2:|%s|\n",l_param2,l_prev_param2);
									//fflush(fl_userlog);
									
									if(!strcmp(l_param2,l_prev_param2))
									{
										strcpy(l_param2,l_group_parameter_value[i]);
										strcpy(l_prev_param2,l_param2);
									}
									else
										l_group_break_flag=1;
								}
								else if(!strcmp(l_group_pos_value[i],"3"))
								{
									fprintf(fl_userlog,"l_param3:|%s|l_prev_param3:|%s|\n",l_param3,l_prev_param3);
									//fflush(fl_userlog);
									
									if(!strcmp(l_param3,l_prev_param3))
									{
										strcpy(l_param3,l_group_parameter_value[i]);
										strcpy(l_prev_param3,l_param3);
									}
									else
										l_group_break_flag=1;
								}
								else if(!strcmp(l_group_pos_value[i],"4"))
								{
									fprintf(fl_userlog,"l_param4:|%s|l_prev_param4:|%s|\n",l_param4,l_prev_param4);
									//fflush(fl_userlog);
									
									if(!strcmp(l_param4,l_prev_param4))
									{
										strcpy(l_param4,l_group_parameter_value[i]);
										strcpy(l_prev_param4,l_param4);
									}
									else
										l_group_break_flag=1;
								}
								else if(!strcmp(l_group_pos_value[i],"5"))
								{
									fprintf(fl_userlog,"l_param5:|%s|l_prev_param5:|%s|\n",l_param5,l_prev_param5);
									//fflush(fl_userlog);
									
									if(!strcmp(l_param5,l_prev_param5))
									{
										strcpy(l_param5,l_group_parameter_value[i]);
										strcpy(l_prev_param5,l_param5);
									}
									else
										l_group_break_flag=1;
								}
								else if(!strcmp(l_group_pos_value[i],"6"))
								{
									fprintf(fl_userlog,"l_param6:|%s|l_prev_param6:|%s|\n",l_param6,l_prev_param6);
									//fflush(fl_userlog);
									
									if(!strcmp(l_param6,l_prev_param6))
									{
										strcpy(l_param6,l_group_parameter_value[i]);
										strcpy(l_prev_param6,l_param6);
									}
									else
										l_group_break_flag=1;
								}
							}
						}
						else
						{
									fprintf(fl_userlog,"Error: Mismatch in Group Parameters :|%d||%d|",l_group_pos_no,l_group_parameter_no);
									//fflush(fl_userlog);
									break;
						}


					/****************************************************************************/

					/********************* Record Count Query Part *****************************/
						
						EXEC SQL SELECT COUNT(TABLE_ID) INTO :l_table_numbers 
								 FROM REPORT_DETAILS
								 WHERE REPORT_ID=:l_rept_id;
						
						fprintf(fl_userlog,"AFTER COUNT(TABLE_ID) -- ORA Error 892:|%d|\n",sqlca.sqlcode);
						//fflush(fl_userlog);

						fprintf(fl_userlog,"l_table_numbers 892:|%d|\n",l_table_numbers);
						//fflush(fl_userlog);

						l_table_num = 1 ;

						l_record_count_flag = 0;

						l_record_count = 0;

					while(l_table_num <= l_table_numbers)
					{
								EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
														RECORD_COUNT_QUERY,'@PARAM1',:l_param1),
																		   '@PARAM2',:l_param2),
																		   '@PARAM3',:l_param3),
																		   '@PARAM4',:l_param4),
																		   '@PARAM5',:l_param5),
																		   '@PARAM6',:l_param6),
												REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
														RECORD_COUNT_QUERY1,'@PARAM1',:l_param1),
																		   '@PARAM2',:l_param2),
																		   '@PARAM3',:l_param3),
																		   '@PARAM4',:l_param4),
																		   '@PARAM5',:l_param5),
																		   '@PARAM6',:l_param6)
										  INTO :l_record_count_query,:l_record_count_query1
										  FROM REPORT_DETAILS 
										  WHERE REPORT_ID=:l_rept_id 
										  AND TABLE_ID = :l_table_num;

								fprintf(fl_userlog,"AFTER RECORD_COUNT_QUERY Select -- ORA Error :|%d|\n",sqlca.sqlcode);
								//fflush(fl_userlog);


								strcpy(l_record_count_query_final,l_record_count_query);
								strcat(l_record_count_query_final,l_record_count_query1);

								fprintf(fl_userlog,"l_record_count_query_final :|%s|\n",l_record_count_query_final);
								//fflush(fl_userlog);

								if(strlen(l_record_count_query_final) > 0)
								{

									EXEC SQL PREPARE CSV1_RECORD_COUNT FROM :l_record_count_query_final;

									EXEC SQL DECLARE CSV1_record_count_curr_g CURSOR FOR CSV1_RECORD_COUNT;

									EXEC SQL OPEN  CSV1_record_count_curr_g;

									if(sqlca.sqlcode < 0)
									{
										fprintf(fl_userlog,"Error : Failed To OPEN CSV1_record_count_curr_g CURSOR -- ORA Error :|%d|\n",sqlca.sqlcode);
										//fflush(fl_userlog);
										l_record_count_flag = 0;
									}

									EXEC SQL FETCH CSV1_record_count_curr_g INTO :l_record_count;

									if(sqlca.sqlcode < 0)
									{
										fprintf(fl_userlog,"Error : Failed To FETCH CSV1_record_count_curr_g CURSOR -- ORA Error :|%d|\n",sqlca.sqlcode);
										//fflush(fl_userlog);
										l_record_count_flag = 0;
									}

									EXEC SQL CLOSE CSV1_record_count_curr_g;

								}


								fprintf(fl_userlog,"l_record_count :|%d|\n",l_record_count);
								//fflush(fl_userlog);
								if(l_record_count > 0)
									l_record_count_flag = 1;

								l_table_num ++;

							}

				 
					fprintf(fl_userlog,"RECORD COUNT FLAG :|%d|\n",l_record_count_flag);
					//fflush(fl_userlog);
					printf("RECORD COUNT FLAG :|%d|\n",l_record_count_flag);
                    //fflush(fl_userlog);
				   /***********************************************************************************/

						if((l_record_count_flag == 1)||(strlen(l_record_count_query_final) == 0))
						{
								
								fprintf(fl_userlog,"l_param1:|%s|\n",l_param1);
								//fflush(fl_userlog);
								fprintf(fl_userlog,"l_param2:|%s|\n",l_param2);
								//fflush(fl_userlog);
								fprintf(fl_userlog,"l_param3:|%s|\n",l_param3);
								//fflush(fl_userlog);
								fprintf(fl_userlog,"l_param4:|%s|\n",l_param4);
								//fflush(fl_userlog);
								fprintf(fl_userlog,"l_param5:|%s|\n",l_param5);
								//fflush(fl_userlog);
								fprintf(fl_userlog,"l_param6:|%s|\n",l_param6);
								//fflush(fl_userlog);


							/**** Stored procedure for REPORT DETAILS GROUPING **************************/
					
					fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID 17:|%s|\n",l_rept_id);
					//fflush(fl_userlog);
					printf("Calling Stored Procedure SP_REPORT_DETAIL for Report ID 18:|%s|\n",l_rept_id);
					//fflush(fl_userlog);
					
					EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
							:l_param2,:l_param3,:l_param4,
							:l_param5,:l_param6,
							:l_table_query,:l_table_query1,:l_table_query2,
							:l_table_query3,:l_table_query4,:l_table_query5,
							:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
							:l_group_desc,:l_error_desc);

					strcpy(table_query,l_table_query);
					strcat(table_query," ");
					
					if(strlen(l_table_query1) > 0)
					{
						strcat(table_query,l_table_query1);
						strcat(table_query," ");
					}
					if(strlen(l_table_query2) > 0)
					{
						strcat(table_query,l_table_query2);
						strcat(table_query," ");
					}
					if(strlen(l_table_query3) > 0)
					{
						strcat(table_query,l_table_query3);
						strcat(table_query," ");
					}
					if(strlen(l_table_query4) > 0)
					{
						strcat(table_query,l_table_query4);
						strcat(table_query," ");
					}
					if(strlen(l_table_query5) > 0)
					{
						strcat(table_query,l_table_query5);
						strcat(table_query," ");
					}
					
					strcat(table_query,APL_NULL_STRING);
						
					fprintf(fl_userlog,"After Stored Procedure SP_REPORT_DETAIL ORA ERROR 5:|%d|\n",sqlca.sqlcode);
					//fflush(fl_userlog);
					
					if(sqlca.sqlcode < 0)
					{
						fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
						//fflush(fl_userlog);
					}
					
					/*fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
					//fflush(fl_userlog);*/
					fprintf(fl_userlog,"l_criteria_query1:|%s|\n",l_criteria_query1);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"l_criteria_query2:|%s|\n",l_criteria_query2);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"l_criteria_query3:|%s|\n",l_criteria_query3);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"l_group_desc:|%s|\n",l_group_desc);
					//fflush(fl_userlog);

								/********* Group Description ***************************************************************/
								
								if(strlen(l_group_desc) > 0)
								{
									fprintf(l_report_CSV1,"%s\n\n",l_group_desc);
									//fflush(fl_userlog);
								}


						/****** Before table ******************************************/
							
							if(strlen(h_report_details_struct.before_table) > 0)
							{	
								fprintf(l_report_CSV1,"%s\n",h_report_details_struct.before_table);
								//fflush(fl_userlog);
							}
							
							l_before_table = h_report_details_struct.before_table_brk;
							while(l_before_table > 0)
							{
								fprintf(l_report_CSV1,"\n");
								//fflush(fl_userlog);
								l_before_table --;
							}

				/******* Column Heading *****************************************************/
				
							/****** Multiple Column Level **************************************/

							strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
							strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
							strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
							
							fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);
							//fflush(fl_userlog);

							if(strlen(l_multiple_col_flag) > 0)
							{
								fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
								//fflush(fl_userlog);
								fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);
								//fflush(fl_userlog);

								if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
										&l_multiple_col_header_value) == APL_FAILURE)
								{
									 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
									 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
									 //fflush(fl_userlog);
									 APL_GOBACK_FAIL
								}

								if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
										&l_multiple_colspan_sep_value) == APL_FAILURE)
								{
									 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
									 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
									 //fflush(fl_userlog);
									 APL_GOBACK_FAIL
								}


								fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
								//fflush(fl_userlog);
								fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);
								//fflush(fl_userlog);

								
								if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
								{
									for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
									{
										for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
										{				

										if(int_a == int_b )
										{
										
										strcpy(l_level_header,l_multiple_col_header_value[int_a]);
										strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

										fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
										//fflush(fl_userlog);
										fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);
										//fflush(fl_userlog);

										if (CO_SplitStr(l_level_header,
												SEMISEP,
												&l_level_header_no,
												&l_level_header_value) == APL_FAILURE)
										{
											 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
											 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
											 //fflush(fl_userlog);
											 APL_GOBACK_FAIL
										}

										if (CO_SplitStr(l_level_colspan,
												SEMISEP,
												&l_level_colspan_no,
												&l_level_colspan_value) == APL_FAILURE)
										{
											 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
											 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
											 //fflush(fl_userlog);
											 APL_GOBACK_FAIL
										}

										fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
										//fflush(fl_userlog);
										fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);
										//fflush(fl_userlog);

										if(l_level_header_no == l_level_colspan_no)
										{

										for(int_aa=0;int_aa<l_level_header_no;int_aa++)
										{
											for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
											{
												if(int_aa == int_bb)
												{	
												
												strcpy(l_level_column,l_level_header_value[int_aa]);
												strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

												fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
												//fflush(fl_userlog);
												fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
												//fflush(fl_userlog);
												
												if(strlen(l_level_column) > 0)
												{
													fprintf(l_report_CSV1,"%s,", l_level_column);
													//fflush(fl_userlog);
												}
												else
												{
													fprintf(l_report_CSV1,",");
													//fflush(fl_userlog);
												}

												for(i=0;i<(atoi(l_level_col_span)-1);i++)
												{
													fprintf(l_report_CSV1,",");
													//fflush(fl_userlog);

												}


												}
											}
										}
										fprintf(l_report_CSV1,"\n");
										//fflush(fl_userlog);

										}/*** End Of Inner Condition check *****/

										}
										
																
										}/*** End Of 2st Main For Loop *******/

									}/*** End Of 1st Main For Loop *******/

								}/*** End Of Multiple col condition check *****/

								l_column_no=h_report_details_struct.no_of_columns;
								l_no_of_columns = h_report_details_struct.no_of_columns;
					}
					else
					{						
								fprintf(fl_userlog,"COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
								//fflush(fl_userlog);
								printf("COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
								//fflush(fl_userlog);
								
								/**** Split the Column Header and print *****************/
								
								strcpy(l_column_header,h_report_details_struct.column_hdr);
								if (CO_SplitStr(l_column_header,COMASEP,&l_col_no,&l_col_value) == APL_FAILURE)
								{
									 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
									 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_header);
									 //fflush(fl_userlog);
									 APL_GOBACK_FAIL
								}

								/***** Table Column Heading and its records  *********/
								
								for(i=0;i<l_col_no;i++)
								{
									strcpy(l_column_value,l_col_value[i]);
									if(i+1==l_col_no)
									{
										fprintf(l_report_CSV1,"%s",l_column_value);
										//fflush(fl_userlog);
									}
									else
									{
										fprintf(l_report_CSV1,"%s,",l_column_value);
										//fflush(fl_userlog);
									}
								}
								fprintf(l_report_CSV1,"\n");
								//fflush(fl_userlog);

								l_column_no=h_report_details_struct.no_of_columns;
								l_no_of_columns = h_report_details_struct.no_of_columns;
								
								l_col_hdr = h_report_details_struct.col_hdr_brk;
								
					}

					EXEC SQL PREPARE CSV1_SUB1 FROM :table_query;	
							EXEC SQL DECLARE csv1tablequery1_g CURSOR FOR CSV1_SUB1;
							EXEC SQL OPEN csv1tablequery1_g;

							fprintf(l_report_CSV1,"\n");
							//fflush(fl_userlog);

							l_fetch_count=0;

							l_return_param=0;

							fprintf(fl_userlog,"Entering SP_REPORT_DATA_PROC :|%s|\n",l_rept_id);
							//fflush(fl_userlog);
							printf("Entering SP_REPORT_DATA_PROC :|%s|\n",l_rept_id);
                            //fflush(fl_userlog);
							EXEC SQL CALL SP_REPORT_DATA_PROC(:l_rept_id,
															  :l_param1,:l_param2,
															  :l_param3,:l_param4,
															  :l_param5,:l_param6,
															  :l_return_param,:l_error_desc);

						   fprintf(fl_userlog,"Error : After SP_REPORT_DATA_PROC --- ORA ERROR:|%s|\n",l_error_desc);
                            //fflush(fl_userlog);  
						   fprintf(fl_userlog,"l_return_param :|%d|\n",l_return_param);
						   //fflush(fl_userlog);


							for(;;)
							{
								EXEC SQL FETCH csv1tablequery1_g
									INTO :l_table_parameter;

								if(sqlca.sqlcode == 1403)
								{
									fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
									if(l_fetch_count == 0)
									{
										fprintf(l_report_CSV1,"\nNO RECORDS FOUND\n",l_column_no);
									}
									break;
								}

								if(sqlca.sqlcode < 0)
								{
								   fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
									break;
								}

								strcpy(l_column_parameter,l_table_parameter);
								
								if(l_return_param == 1)
								{
									if((strlen(l_column_parameter) > 0) && (strcmp(l_column_parameter," ")))
										fprintf(l_report_CSV1,"%s,",l_column_parameter);
									else
										fprintf(l_report_CSV1,",");
								}
								else
								{
									/*** Split and fetch the column data into seperate variables **/
								
									if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
									{
										CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
										fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
										APL_GOBACK_FAIL
									}

						
									for(j=0;j<l_column_num;j++)
									{
										strcpy(l_column,l_column_val[j]);
										
										if((strlen(l_column) > 0) && (strcmp(l_column," ")))
										{
											if(j+1 == l_column_num)
												fprintf(l_report_CSV1,"%s",l_column);
											else
												fprintf(l_report_CSV1,"%s,",l_column);
										}
										else
										{
											if(j+1 != l_column_num)
												fprintf(l_report_CSV1,",");
												//fflush(fl_userlog);
											}

									}
									fprintf(l_report_CSV1,"\n");

								}

								/***********************************************************************************/

								l_fetch_count ++;

							}
							EXEC SQL CLOSE csv1tablequery1_g;

							fprintf(l_report_CSV1,"\n");
					
								/********* For Criteria column value display **************/
							
							if(h_report_details_struct.tot_criteria_cols > 0)
							{
								if(strlen(h_report_details_struct.criteria_col1_query) > 0)
								{
									EXEC SQL PREPARE CSV1_CR1 FROM :l_criteria_query1;
									EXEC SQL DECLARE CSV1_criteria1_g CURSOR FOR CSV1_CR1;
									EXEC SQL OPEN CSV1_criteria1_g;
									
									if(sqlca.sqlcode < 0)
									{
										fprintf(fl_userlog,"Error : Failed to Open CSV1_criteria1_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
									}

									for(;;)
									{
									EXEC SQL FETCH CSV1_criteria1_g INTO :l_criteria_value1;
									
										   if(sqlca.sqlcode == 1403)
										   break;

										   if(sqlca.sqlcode < 0)
										   {
											fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
											break;
										   }
									}
									EXEC SQL CLOSE CSV1_criteria1_g;

									/****** For Grand Total Of Criteria Value *********/
									
									
									if(strcmp(l_criteria_value1,APL_NULL_STRING))
									{
									EXEC SQL SELECT (:l_criteria_value1) INTO :l_criteria1_total FROM DUAL;
									
									l_grand_total1=l_grand_total1+l_criteria1_total;
									
									fprintf(fl_userlog,"l_grand_total1 :|%lf|\n",l_grand_total1);

									fprintf(l_report_CSV1,"\n%s = %s\n",h_report_details_struct.criteria_col1_name,l_criteria_value1);
									}
								}

								if(strlen(h_report_details_struct.criteria_col2_query) > 0)
								{
									EXEC SQL PREPARE CSV1_CR2 FROM :l_criteria_query2;
									EXEC SQL DECLARE CSV1_criteria2_g CURSOR FOR CSV1_CR2;
									EXEC SQL OPEN CSV1_criteria2_g;
									
									if(sqlca.sqlcode < 0)
									{
										fprintf(fl_userlog,"Error : Failed to Open CSV1_criteria2_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
									}

									for(;;)
									{
									EXEC SQL FETCH CSV1_criteria2_g INTO :l_criteria_value2;
									
										   if(sqlca.sqlcode == 1403)
										   break;

										   if(sqlca.sqlcode < 0)
										   {
											fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
											break;
										   }
									}
									EXEC SQL CLOSE CSV1_criteria2_g;
									
									
									if(strcmp(l_criteria_value2,APL_NULL_STRING))	
									{
									EXEC SQL SELECT (:l_criteria_value2) INTO :l_criteria2_total FROM DUAL;
									
									l_grand_total2=l_grand_total2+l_criteria2_total;
									
									fprintf(fl_userlog,"l_grand_total2 :|%lf|\n",l_grand_total2);

									fprintf(l_report_CSV1,"\n%s = %s\n",h_report_details_struct.criteria_col2_name,l_criteria_value2);
									}

								}

								if(strlen(h_report_details_struct.criteria_col3_query) > 0)
								{
									EXEC SQL PREPARE CSV1_CR3 FROM :l_criteria_query3;
									EXEC SQL DECLARE CSV1_criteria3_g CURSOR FOR CSV1_CR3;
									EXEC SQL OPEN CSV1_criteria3_g;
									
									if(sqlca.sqlcode < 0)
									{
										fprintf(fl_userlog,"Error : Failed to Open CSV1_criteria3_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
									}

									for(;;)
									{
									EXEC SQL FETCH CSV1_criteria3_g INTO :l_criteria_value3;
									
										   if(sqlca.sqlcode == 1403)
										   break;

										   if(sqlca.sqlcode < 0)
										   {
											fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
											break;
										   }
									}
									EXEC SQL CLOSE CSV1_criteria3_g;
										
									
									if(strcmp(l_criteria_value3,APL_NULL_STRING))
									{
									EXEC SQL SELECT (:l_criteria_value3) INTO :l_criteria3_total FROM DUAL;
									
									l_grand_total3=l_grand_total3+l_criteria3_total;
									
									fprintf(l_report_CSV1,"\n%s = %s\n",h_report_details_struct.criteria_col3_name,l_criteria_value3);
									}

								}
							}


						/******* Complex Criteria Part *********************************************/

							strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
							strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
							strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
							strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

							if(strlen(complex_criteria_query) > 0)
							{
							
							EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									:complex_criteria_query,
									'@PARAM1',:l_param1),
									'@PARAM2',:l_param2),
									'@PARAM3',:l_param3),
									'@PARAM4',:l_param4),
									'@PARAM5',:l_param5),
									'@PARAM6',:l_param6),
									REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									:complex_criteria_query1,
									'@PARAM1',:l_param1),
									'@PARAM2',:l_param2),
									'@PARAM3',:l_param3),
									'@PARAM4',:l_param4),
									'@PARAM5',:l_param5),
									'@PARAM6',:l_param6)
								INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;
					
							strcat(complex_criteria_query,complex_criteria_query1);
							
							fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);

							EXEC SQL PREPARE CSV1_CMPX_CURR1 FROM :complex_criteria_query;

							EXEC SQL DECLARE CSV1_complex_curr1_g CURSOR FOR CSV1_CMPX_CURR1;

							fprintf(fl_userlog,"After DECLARE CSV1_complex_curr1_g :|%d|\n",sqlca.sqlcode);

							EXEC SQL OPEN CSV1_complex_curr1_g;

							EXEC SQL FETCH CSV1_complex_curr1_g INTO :l_complex_parameter;

							fprintf(fl_userlog,"After FETCH CSV1_complex_curr1_g :|%d|\n",sqlca.sqlcode);

							EXEC SQL CLOSE CSV1_complex_curr1_g;

							fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);

							if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
							{
								CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
								APL_GOBACK_FAIL
							}
							
							fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);

							if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
							{
								CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
								APL_GOBACK_FAIL
							}


							fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
							fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);

							l_complex_break_flag = 0;
							
							if(l_complex_num == l_complex_pos_num)
							{

							for(i=0;i<l_column_num;i++)
							{
								for(j=0;j<l_complex_pos_num;j++)
								{

								strcpy(l_complex_pos_column,l_complex_pos_val[j]);

								if((i==0)&&(j==0))
								{
									if(strlen(complex_criteria_label) > 0)
									{
										fprintf(l_report_CSV1,"%s\n",complex_criteria_label);
										l_complex_break_flag=1;
									}
									else
									fprintf(l_report_CSV1,"\n");
								}

								if(i== (atoi(l_complex_pos_column)-1))
								{				  
								  strcpy(l_complex_column,l_complex_val[j]);

								  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);

								  l_complex_break_flag=1;
				 
								  if(strlen(l_complex_column) > 0)
									fprintf(l_report_CSV1,"%s,",l_complex_column);
								  else
									fprintf(l_report_CSV1,",");
								
								  break;
								}
								else
								{
									 l_complex_break_flag = 0;
									 continue;
								} 

								}
									 
								if(i != 0)
								{
								  if(l_complex_break_flag != 1)
									 fprintf(l_report_CSV1,",");
								}
							}

							}
							else
							{
								fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
							}

							fprintf(l_report_CSV1,"\n");

							}
							
				/*****************	End Of Complex Part     *********************/		

				/****** After table *********************************************************/
					
							l_after_table = h_report_details_struct.after_table_brk;
							while(l_after_table > 0)
							{
								fprintf(l_report_CSV1,"\n");
								l_after_table --;
							}

							if(strlen(h_report_details_struct.after_table) > 0)
							{		
								fprintf(l_report_CSV1,"%s\n",h_report_details_struct.after_table);
							}

				/********* Table Footer note **********************************************/

				l_table_footer = h_report_details_struct.table_footer_brk;
						
				if(l_table_footer > 0)
					{
								fprintf(l_report_CSV1,"\n");
								l_table_footer --;
					}
						
				if(strlen(h_report_details_struct.table_footer) > 0)
					{
								fprintf(l_report_CSV1,"%s\n",h_report_details_struct.table_footer);
					}

				l_table = h_report_main_struct.table_brk;
				
				if(l_table > 0)
					{
								fprintf(l_report_CSV1,"\n");
								l_table --;
					}


				if(l_fetch_count > 0 )
				{
				
				for(m=0;m<l_complex_num;m++)
				{
					if(m == 0)
					{
						strcpy(l_complex_parameter1,l_complex_val[m]);
						g_complex_parameter1=g_complex_parameter1+atof(l_complex_parameter1);
					}
					else if(m == 1)
					{
						strcpy(l_complex_parameter2,l_complex_val[m]);
						g_complex_parameter2=g_complex_parameter2+atof(l_complex_parameter2);
					}
					else if(m == 2)
					{
						strcpy(l_complex_parameter3,l_complex_val[m]);
						g_complex_parameter3=g_complex_parameter3+atof(l_complex_parameter3);
					}
					else if(m == 3)
					{
						strcpy(l_complex_parameter4,l_complex_val[m]);
						g_complex_parameter4=g_complex_parameter4+atof(l_complex_parameter4);
					}
					else if(m == 4)
					{
						strcpy(l_complex_parameter5,l_complex_val[m]);
						g_complex_parameter5=g_complex_parameter5+atof(l_complex_parameter5);
					}
					else if(m == 5)
					{
						strcpy(l_complex_parameter6,l_complex_val[m]);
						g_complex_parameter6=g_complex_parameter6+atof(l_complex_parameter6);
					}
					else if(m == 6)
					{
						strcpy(l_complex_parameter7,l_complex_val[m]);
						g_complex_parameter7=g_complex_parameter7+atof(l_complex_parameter7);
					}
					else if(m == 7)
					{
						strcpy(l_complex_parameter8,l_complex_val[m]);
						g_complex_parameter8=g_complex_parameter8+atof(l_complex_parameter8);
					}
					else if(m == 8)
					{
						strcpy(l_complex_parameter9,l_complex_val[m]);
						g_complex_parameter9=g_complex_parameter9+atof(l_complex_parameter9);
					}
					else if(m == 9)
					{
							strcpy(l_complex_parameter10,l_complex_val[m]);
							g_complex_parameter10=g_complex_parameter10+atof(l_complex_parameter10);
					}
					else if(m == 10)
					{
						strcpy(l_complex_parameter11,l_complex_val[m]);
						g_complex_parameter11=g_complex_parameter11+atof(l_complex_parameter11);
					}
					else if(m == 11)
					{
						strcpy(l_complex_parameter12,l_complex_val[m]);			
						g_complex_parameter12=g_complex_parameter12+atof(l_complex_parameter12);
					}
					else if(m == 12)
					{
						strcpy(l_complex_parameter13,l_complex_val[m]);
						g_complex_parameter13=g_complex_parameter13+atof(l_complex_parameter13);
					}
					else if(m == 13)
					{
						strcpy(l_complex_parameter14,l_complex_val[m]);
						g_complex_parameter14=g_complex_parameter14+atof(l_complex_parameter14);
					}
					else if(m == 14)
					{
						strcpy(l_complex_parameter15,l_complex_val[m]);
						g_complex_parameter15=g_complex_parameter15+atof(l_complex_parameter15);
					}
						else if(m == 15)
						{
							strcpy(l_complex_parameter16,l_complex_val[m]);
							g_complex_parameter16=g_complex_parameter16+atof(l_complex_parameter16);
						}
						else if(m == 16)
						{
							strcpy(l_complex_parameter17,l_complex_val[m]);
							g_complex_parameter17=g_complex_parameter17+atof(l_complex_parameter17);
						}
						else if(m == 17)
						{
							strcpy(l_complex_parameter18,l_complex_val[m]);
							g_complex_parameter18=g_complex_parameter18+atof(l_complex_parameter18);
						}
						else if(m == 18)
						{
							strcpy(l_complex_parameter19,l_complex_val[m]);
							g_complex_parameter19=g_complex_parameter19+atof(l_complex_parameter19);
						}
						else if(m == 19)
						{
							strcpy(l_complex_parameter20,l_complex_val[m]);
							g_complex_parameter20=g_complex_parameter20+atof(l_complex_parameter20);
						}
					}

					}/*** End Of Fetch Count check ******/

					}/*** End Of Record Count check Part ***********/

		}
		else
		{
					
						/**** Stored procedure for REPORT DETAILS ***********************/
						
						fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID 19:|%s|\n",l_rept_id);
						printf("Calling Stored Procedure SP_REPORT_DETAIL for Report ID 20:|%s|\n",l_rept_id);
						
						EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
								:l_param2,:l_param3,:l_param4,
								:l_param5,:l_param6,
								:l_table_query,:l_table_query1,:l_table_query2,
								:l_table_query3,:l_table_query4,:l_table_query5,
								:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
								:l_group_desc,:l_error_desc);

						strcpy(table_query,l_table_query);
						strcat(table_query," ");
						
						if(strlen(l_table_query1) > 0)
						{
							strcat(table_query,l_table_query1);
							strcat(table_query," ");
						}
						if(strlen(l_table_query2) > 0)
						{
							strcat(table_query,l_table_query2);
							strcat(table_query," ");
						}
						if(strlen(l_table_query3) > 0)
						{
							strcat(table_query,l_table_query3);
							strcat(table_query," ");
						}
						if(strlen(l_table_query4) > 0)
						{
							strcat(table_query,l_table_query4);
							strcat(table_query," ");
						}
						if(strlen(l_table_query5) > 0)
						{
							strcat(table_query,l_table_query5);
							strcat(table_query," ");
						}
						
						strcat(table_query,APL_NULL_STRING);
							
						if(sqlca.sqlcode < 0)
						{
							fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
						}
						
						//fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
						fprintf(fl_userlog,"l_criteria_query1:|%s|\n",l_criteria_query1);
						fprintf(fl_userlog,"l_criteria_query2:|%s|\n",l_criteria_query2);
						fprintf(fl_userlog,"l_criteria_query3:|%s|\n",l_criteria_query3);

						/****** Before table *************************************************************/
						
						if(strlen(h_report_details_struct.before_table_align) > 0)
						{
							if(strlen(h_report_details_struct.before_table) > 0)
							{	
								fprintf(l_report_CSV1,"%s\n",h_report_details_struct.before_table);
							}
						}
						else
						{
							if(strlen(h_report_details_struct.before_table) > 0)
							{	
								fprintf(l_report_CSV1,"%s\n",h_report_details_struct.before_table);
							}

						}	
						
						l_before_table = h_report_details_struct.before_table_brk;
						while(l_before_table > 0)
						{
							fprintf(l_report_CSV1,"\n");
							l_before_table --;
						}

						/******* Column Heading *********************************************************/

						/****** Multiple Column Level **************************************/

						strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
						strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
						strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
						
						fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);

						if(strlen(l_multiple_col_flag) > 0)
						{
							fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
							fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);

							if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
									&l_multiple_col_header_value) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
								 APL_GOBACK_FAIL
							}

							if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
									&l_multiple_colspan_sep_value) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
								 APL_GOBACK_FAIL
							}


							fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
							fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);


							if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
							{
								for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
								{
									for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
									{
								
									if(int_a == int_b )
									{
									
									strcpy(l_level_header,l_multiple_col_header_value[int_a]);
									strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

									fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
									fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);

									if (CO_SplitStr(l_level_header,
											SEMISEP,
											&l_level_header_no,
											&l_level_header_value) == APL_FAILURE)
									{
										 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
										 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
										 APL_GOBACK_FAIL
									}

									if (CO_SplitStr(l_level_colspan,
											SEMISEP,
											&l_level_colspan_no,
											&l_level_colspan_value) == APL_FAILURE)
									{
										 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
										 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
										 APL_GOBACK_FAIL
									}

									fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
									fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);

									if(l_level_header_no == l_level_colspan_no)
									{

									for(int_aa=0;int_aa<l_level_header_no;int_aa++)
									{
										for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
										{
											if(int_aa == int_bb)
											{	
											
											strcpy(l_level_column,l_level_header_value[int_aa]);
											strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

											fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
											fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
											
											if(strlen(l_level_column) > 0)
												fprintf(l_report_CSV1,"%s,", l_level_column);
											else
												fprintf(l_report_CSV1,",");


											for(i=0;i<(atoi(l_level_col_span)-1);i++)
											{
												fprintf(l_report_CSV1,",");

											}

											}
										}
									}
									fprintf(l_report_CSV1,"\n");

									}/*** End Of Inner Condition check *****/

									}
									
															
									}/*** End Of 2st Main For Loop *******/

								}/*** End Of 1st Main For Loop *******/

							}/*** End Of Multiple col condition check *****/

							l_column_no=h_report_details_struct.no_of_columns;
							l_no_of_columns = h_report_details_struct.no_of_columns;

						}
						else
						{		
						
							fprintf(fl_userlog,"COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
							printf("COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
							//fflush(fl_userlog);
							/**** Split the Column Header and print *****************/
							
							strcpy(l_column_header,h_report_details_struct.column_hdr);
							if (CO_SplitStr(l_column_header,COMASEP,&l_col_no,&l_col_value) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_header);
								 APL_GOBACK_FAIL
							}

							/***** Table Column Heading and its records  *********/
							
							for(i=0;i<l_col_no;i++)
							{
								strcpy(l_column_value,l_col_value[i]);
								if(i+1==l_col_no)
									fprintf(l_report_CSV1,"%s",l_column_value);
								else
									fprintf(l_report_CSV1,"%s,",l_column_value);
								
								fprintf(l_report_CSV1,"%s,",l_column_value);
							}

							l_column_no=h_report_details_struct.no_of_columns;
							l_no_of_columns = h_report_details_struct.no_of_columns;
							
							l_col_hdr = h_report_details_struct.col_hdr_brk;
								
						}
						
						fprintf(l_report_CSV1,"\n");
						
						EXEC SQL PREPARE CSV1_SUB FROM :table_query;	
						EXEC SQL DECLARE CSV1tablequery_g CURSOR FOR CSV1_SUB;
						EXEC SQL OPEN CSV1tablequery_g;

						l_fetch_count=0;

						l_return_param=0;

						fprintf(fl_userlog,"Entering SP_REPORT_DATA_PROC :|%s|\n",l_rept_id);
						printf("Entering SP_REPORT_DATA_PROC :|%s|\n",l_rept_id);
//fflush(fl_userlog);
						EXEC SQL CALL SP_REPORT_DATA_PROC(:l_rept_id,
														  :l_param1,:l_param2,
														  :l_param3,:l_param4,
														  :l_param5,:l_param6,
														  :l_return_param,:l_error_desc);

					   fprintf(fl_userlog,"Error : After SP_REPORT_DATA_PROC --- ORA ERROR:|%s|\n",l_error_desc);

					   fprintf(fl_userlog,"l_return_param :|%d|\n",l_return_param);

						for(;;)
						{
							sqlca.sqlcode = 0;
							EXEC SQL FETCH CSV1tablequery_g
								INTO :l_table_parameter;

							 if(sqlca.sqlcode == 1403)
							 {
								fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
								if(l_fetch_count == 0)
								{
								   fprintf(l_report_CSV1,"\nNO RECORDS FOUND\n");
								}
								break;
							 }

							 if(sqlca.sqlcode < 0)
							 {
								fprintf(fl_userlog,"Error : TABLE QUERY Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
								break;
							 }

							strcpy(l_column_parameter,l_table_parameter);

							if(l_return_param == 1)
							{
								if((strlen(l_column_parameter) > 0) && (strcmp(l_column_parameter," ")))
									fprintf(l_report_CSV1,"%s,",l_column_parameter);
								else
									fprintf(l_report_CSV1,",");
							}
							else
							{			
								/******* Split the string and fetch the column date into seperate variables *********/
								
								if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
								{
									CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
									fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
									APL_GOBACK_FAIL
								}

								for(j=0;j<l_column_num;j++)
								{
									strcpy(l_column,l_column_val[j]);
									
										if((strlen(l_column) > 0) && (strcmp(l_column," ")))
										{
											if(j+1 == l_column_num)
												fprintf(l_report_CSV1,"%s",l_column);
											else
												fprintf(l_report_CSV1,"%s,",l_column);
										}
										else
										{
											if(j+1 != l_column_num)
												fprintf(l_report_CSV1,",");
												//fflush(fl_userlog);
											}
								}
								fprintf(l_report_CSV1,"\n");

							}

							l_fetch_count ++;

						}
						EXEC SQL CLOSE CSV1tablequery_g;
							
						fprintf(l_report_CSV1,"\n\n");

						/********* For Criteria column value display **********************/
						
						if(h_report_details_struct.tot_criteria_cols > 0)
						{
							if(strlen(h_report_details_struct.criteria_col1_query) > 0)
							{
								EXEC SQL PREPARE CSV1_CR1 FROM :l_criteria_query1;
								EXEC SQL DECLARE CSV1criteria1_g CURSOR FOR CSV1_CR1;
								EXEC SQL OPEN CSV1criteria1_g;
								
								if(sqlca.sqlcode < 0)
								{
									fprintf(fl_userlog,"Error : Failed to Open CSV1criteria1_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
								}

								for(;;)
								{
									EXEC SQL FETCH CSV1criteria1_g INTO :l_criteria_value1;
								
									if(sqlca.sqlcode == 1403)
									break;
									
								   if(sqlca.sqlcode < 0)
									{
										fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
										break;
									}
								}
								EXEC SQL CLOSE CSV1criteria1_g;
								
								/****** For Grand Total Of Criteria Value *********/
									

								if(strcmp(l_criteria_value1,APL_NULL_STRING))
								{
									EXEC SQL SELECT (:l_criteria_value1) INTO :l_criteria1_total FROM DUAL;
									
									l_grand_total1=l_grand_total1+l_criteria1_total;
									
									fprintf(fl_userlog,"l_grand_total1 :|%lf|\n",l_grand_total1);

									fprintf(l_report_CSV1,"%s = %s\n",h_report_details_struct.criteria_col1_name,l_criteria_value1);
								}
							}

							if(strlen(h_report_details_struct.criteria_col2_query) > 0)
							{
								EXEC SQL PREPARE CSV1_CR2 FROM :l_criteria_query2;
								EXEC SQL DECLARE CSV1criteria2_g CURSOR FOR CSV1_CR2;
								EXEC SQL OPEN CSV1criteria2_g;
								
								if(sqlca.sqlcode < 0)
								{
									fprintf(fl_userlog,"Error : Failed to Open CSV1criteria2_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
								}

								for(;;)
								{
								EXEC SQL FETCH CSV1criteria2_g INTO :l_criteria_value2;
								
									   if(sqlca.sqlcode == 1403)
									   break;

									   if(sqlca.sqlcode < 0)
									   {
											fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
											break;
									   }
								}
								EXEC SQL CLOSE CSV1criteria2_g;
								
									
								if(strcmp(l_criteria_value2,APL_NULL_STRING))	
								{
									EXEC SQL SELECT (:l_criteria_value2) INTO :l_criteria2_total FROM DUAL;
									
									l_grand_total2=l_grand_total2+l_criteria2_total;
									
									fprintf(fl_userlog,"l_grand_total2 :|%lf|\n",l_grand_total2);

									fprintf(l_report_CSV1,"%s = %s\n",h_report_details_struct.criteria_col2_name,l_criteria_value2);
								}

							}

							if(strlen(h_report_details_struct.criteria_col3_query) > 0)
							{
								EXEC SQL PREPARE CSV1_CR3 FROM :l_criteria_query3;
								EXEC SQL DECLARE CSV1criteria3_g CURSOR FOR CSV1_CR3;
								EXEC SQL OPEN CSV1criteria3_g;
								
								if(sqlca.sqlcode < 0)
								{
									fprintf(fl_userlog,"Error : Failed to Open CSV1criteria3_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
								}

								for(;;)
								{
								EXEC SQL FETCH CSV1criteria3_g INTO :l_criteria_value3;
								
									   if(sqlca.sqlcode == 1403)
									   break;

									   if(sqlca.sqlcode < 0)
									   {
											fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
											break;
									   }
								}
								EXEC SQL CLOSE CSV1criteria3_g;
								
							
								if(strcmp(l_criteria_value3,APL_NULL_STRING))
								{
									EXEC SQL SELECT (:l_criteria_value3) INTO :l_criteria3_total FROM DUAL;
									
									l_grand_total3=l_grand_total3+l_criteria3_total;
									
									fprintf(fl_userlog,"l_grand_total3 :|%lf|\n",l_grand_total3);

									fprintf(l_report_CSV1,"%s = %s\n",h_report_details_struct.criteria_col3_name,l_criteria_value3);
								}

							}
						}


						/******* Complex Criteria Part *********************************************/


						strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
						strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
						strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
						strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

						fprintf(fl_userlog,"Before Complex Part -- l_fetch_count 3:|%d|\n",l_fetch_count);

						if(l_fetch_count > 0)
						{

						if(strlen(complex_criteria_query) > 0)
						{
						
						EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								:complex_criteria_query,
								'@PARAM1',:l_param1),
								'@PARAM2',:l_param2),
								'@PARAM3',:l_param3),
								'@PARAM4',:l_param4),
								'@PARAM5',:l_param5),
								'@PARAM6',:l_param6),
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								:complex_criteria_query1,
								'@PARAM1',:l_param1),
								'@PARAM2',:l_param2),
								'@PARAM3',:l_param3),
								'@PARAM4',:l_param4),
								'@PARAM5',:l_param5),
								'@PARAM6',:l_param6)
							INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;

						
						strcat(complex_criteria_query,complex_criteria_query1);
						
						fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);

						EXEC SQL PREPARE CSV1_CMPX_CURR2 FROM :complex_criteria_query;

						EXEC SQL DECLARE CSV1_complex_curr2_g CURSOR FOR CSV1_CMPX_CURR2;

						fprintf(fl_userlog,"After DECLARE CSV1_complex_curr2_g :|%d|\n",sqlca.sqlcode);

						EXEC SQL OPEN CSV1_complex_curr2_g;

						EXEC SQL FETCH CSV1_complex_curr2_g INTO :l_complex_parameter;

						fprintf(fl_userlog,"After FETCH CSV1_complex_curr2_g :|%d|\n",sqlca.sqlcode);

						EXEC SQL CLOSE CSV1_complex_curr2_g;

						fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);

						if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
						{
							CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
							APL_GOBACK_FAIL
						}
						
						fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);

						if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
						{
							CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
							APL_GOBACK_FAIL
						}


						fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
						fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);

						l_complex_break_flag = 0;

						
						if(l_complex_num == l_complex_pos_num)
						{

						for(i=0;i<l_column_num;i++)
						{
							for(j=0;j<l_complex_pos_num;j++)
							{

							strcpy(l_complex_pos_column,l_complex_pos_val[j]);

							if((i==0)&&(j==0))
							{
								if(strlen(complex_criteria_label) > 0)
								{
									fprintf(l_report_CSV1,"%s,",complex_criteria_label);
									l_complex_break_flag=1;
								}
								else
									fprintf(l_report_CSV1,",");
							}

							if(i== (atoi(l_complex_pos_column)-1))
							{				  
							  strcpy(l_complex_column,l_complex_val[j]);

							  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);

							  l_complex_break_flag=1;

							  if(strlen(l_complex_column) > 0)
								fprintf(l_report_CSV1,"%s,",l_complex_column);
							  else
								fprintf(l_report_CSV1,",");
							
							  break;
							}
							else
							{
								 l_complex_break_flag = 0;
								 continue;
							} 

							}
								 
							if(i != 0)
							{
							  if(l_complex_break_flag != 1)
								 fprintf(l_report_CSV1,",");
							}
						}

						}
						else
						{
							fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
						}

						fprintf(l_report_CSV1,"\n");

						}

						}
						else
						{			
							fprintf(fl_userlog," No Records Found -- So No Need To Display Criteria \n");
						}
						

						/***************************************************************************/

						
						/****** After table **************************************************************/
						
						l_after_table = h_report_details_struct.after_table_brk;
						while(l_after_table > 0)
						{
							fprintf(l_report_CSV1,"\n");
							l_after_table --;
						}

						if(strlen(h_report_details_struct.after_table_align) > 0)
						{
							if(strlen(h_report_details_struct.after_table) > 0)
							{	
								fprintf(l_report_CSV1,"%s\n",h_report_details_struct.after_table);
							}
						}
						else
						{
							if(strlen(h_report_details_struct.after_table) > 0)
							{	
								fprintf(l_report_CSV1,"%s\n",h_report_details_struct.after_table);
							}

						}	
						
						/************ Table Footer note ******************************/
					
						l_table_footer = h_report_details_struct.table_footer_brk;
						if(l_table_footer > 0)
						{
							fprintf(l_report_CSV1,"\n");
							l_table_footer --;
						}
						
						if(strlen(h_report_details_struct.table_footer_align) > 0)
						{
							if(strlen(h_report_details_struct.table_footer) > 0)
							{
								fprintf(l_report_CSV1,"%s\n",h_report_details_struct.table_footer);
							}
						}
						else
						{
							if(strlen(h_report_details_struct.table_footer) > 0)
							{
								fprintf(l_report_CSV1,"%s\n",h_report_details_struct.table_footer);
							}

						}

						l_table = h_report_main_struct.table_brk;
						if(l_table > 0)
						{
							fprintf(l_report_CSV1,"\n");
							l_table --;
						}
						
						if( l_fetch_count > 0 )
						{
							for(m=0;m<l_complex_num;m++)
							{
								if(m == 0)
								{
									strcpy(l_complex_parameter1,l_complex_val[m]);
									g_complex_parameter1=atof(l_complex_parameter1);
								}
								else if(m == 1)
								{
									strcpy(l_complex_parameter2,l_complex_val[m]);
									g_complex_parameter2=atof(l_complex_parameter2);
								}
								else if(m == 2)
								{
									strcpy(l_complex_parameter3,l_complex_val[m]);
									g_complex_parameter3=atof(l_complex_parameter3);
								}
								else if(m == 3)
								{
									strcpy(l_complex_parameter4,l_complex_val[m]);
									g_complex_parameter4=atof(l_complex_parameter4);
								}
								else if(m == 4)
								{
									strcpy(l_complex_parameter5,l_complex_val[m]);
									g_complex_parameter5=atof(l_complex_parameter5);
								}
								else if(m == 5)
								{
									strcpy(l_complex_parameter6,l_complex_val[m]);
									g_complex_parameter6=atof(l_complex_parameter6);
								}
								else if(m == 6)
								{
									strcpy(l_complex_parameter7,l_complex_val[m]);
									g_complex_parameter7=atof(l_complex_parameter7);
								}
								else if(m == 7)
								{
									strcpy(l_complex_parameter8,l_complex_val[m]);
									g_complex_parameter8=atof(l_complex_parameter8);
								}
								else if(m == 8)
								{
									strcpy(l_complex_parameter9,l_complex_val[m]);
									g_complex_parameter9=atof(l_complex_parameter9);
								}
								else if(m == 9)
								{
									strcpy(l_complex_parameter10,l_complex_val[m]);
									g_complex_parameter10=atof(l_complex_parameter10);
								}
								else if(m == 10)
								{
									strcpy(l_complex_parameter11,l_complex_val[m]);
									g_complex_parameter11=atof(l_complex_parameter11);
								}
								else if(m == 11)
								{
									strcpy(l_complex_parameter12,l_complex_val[m]);			
									g_complex_parameter12=atof(l_complex_parameter12);
								}
								else if(m == 12)
								{
									strcpy(l_complex_parameter13,l_complex_val[m]);
									g_complex_parameter13=atof(l_complex_parameter13);
								}
								else if(m == 13)
								{
									strcpy(l_complex_parameter14,l_complex_val[m]);
									g_complex_parameter14=atof(l_complex_parameter14);
								}
								else if(m == 14)
								{
									strcpy(l_complex_parameter15,l_complex_val[m]);
									g_complex_parameter15=atof(l_complex_parameter15);
								}
								else if(m == 15)
								{
									strcpy(l_complex_parameter16,l_complex_val[m]);
									g_complex_parameter16=atof(l_complex_parameter16);
								}
								else if(m == 16)
								{
									strcpy(l_complex_parameter17,l_complex_val[m]);
									g_complex_parameter17=atof(l_complex_parameter17);
								}
								else if(m == 17)
								{
									strcpy(l_complex_parameter18,l_complex_val[m]);
									g_complex_parameter18=atof(l_complex_parameter18);
								}
								else if(m == 18)
								{
									strcpy(l_complex_parameter19,l_complex_val[m]);
									g_complex_parameter19=atof(l_complex_parameter19);
								}
								else if(m == 19)
								{
									strcpy(l_complex_parameter20,l_complex_val[m]);
									g_complex_parameter20=atof(l_complex_parameter20);
								}

							}/*** End of Complex For Loop ***/

						}/*** End Of Fetch Count Check ****/

			}/******* End Of  Else Block **********/			
	

	/*************** Complex Criteria Individual  *********************/
						
						if(l_fetch_count > 0 )
						{
							fprintf(fl_userlog,"g_complex_parameter1 :|%lf|\tg_complex_parameter2 :|%lf|\n",g_complex_parameter1,g_complex_parameter2);
							fprintf(fl_userlog,"g_complex_parameter3 :|%lf|\tg_complex_parameter4 :|%lf|\n",g_complex_parameter3,g_complex_parameter4);
							fprintf(fl_userlog,"g_complex_parameter5 :|%lf|\tg_complex_parameter6 :|%lf|\n",g_complex_parameter5,g_complex_parameter6);
							fprintf(fl_userlog,"g_complex_parameter7 :|%lf|\tg_complex_parameter8 :|%lf|\n",g_complex_parameter7,g_complex_parameter8);
							fprintf(fl_userlog,"g_complex_parameter9 :|%lf|\tg_complex_parameter10 :|%lf|\n",g_complex_parameter9,g_complex_parameter10);
							fprintf(fl_userlog,"g_complex_parameter11 :|%lf|\tg_complex_parameter12 :|%lf|\n",g_complex_parameter11,g_complex_parameter12);
							fprintf(fl_userlog,"g_complex_parameter13 :|%lf|\tg_complex_parameter14 :|%lf|\n",g_complex_parameter13,g_complex_parameter14);
							fprintf(fl_userlog,"g_complex_parameter15 :|%lf|\tg_complex_parameter16 :|%lf|\n",g_complex_parameter15,g_complex_parameter16);
							fprintf(fl_userlog,"g_complex_parameter17 :|%lf|\tg_complex_parameter18 :|%lf|\n",g_complex_parameter17,g_complex_parameter18);
							fprintf(fl_userlog,"g_complex_parameter19 :|%lf|\tg_complex_parameter20 :|%lf|\n",g_complex_parameter19,g_complex_parameter20);
						}


						/*******************************************************************/

			/********* Dynamic Footer Display ****************************************/

			strcpy(footer_query,h_report_details_struct.footer_query);
						
			if(strlen(footer_query) > 0)
			{

						/**** Stored Procedure : SP_REPORT_FOOTER ***********************************/

						fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
						printf("Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
						
						EXEC SQL CALL SP_REPORT_FOOTER(:l_rept_id,:l_table_id,:l_param1,:l_param2,
									:l_param3,:l_param4, :l_param5,
									:l_param6,:l_footer_query,:l_footer_query1,:l_error_desc); 

						strcat(l_footer_query,l_footer_query1);

						if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
						{
							fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER ERR DESC :|%s|\n",l_error_desc);
						}

						fprintf(fl_userlog,"FOOTER QUERY :|%s|\n",l_footer_query);

						strcpy(l_footer_query_value,APL_NULL_STRING);

						EXEC SQL PREPARE CSV1_FOOTER_CURR FROM :l_footer_query;

						EXEC SQL DECLARE CSV1_footer_curr_g CURSOR FOR CSV1_FOOTER_CURR;
						
						fprintf(fl_userlog,"After DECLARE CSV1_footer_curr_g :|%d|\n",sqlca.sqlcode);

						EXEC SQL OPEN CSV1_footer_curr_g;

						EXEC SQL FETCH CSV1_footer_curr_g INTO :l_footer_query_value;
						fprintf(fl_userlog,"After FETCH CSV1_footer_curr_g :|%d|\n",sqlca.sqlcode);

						EXEC SQL CLOSE CSV1_footer_curr_g;

						fprintf(fl_userlog,"l_footer_query_value :|%s|\n",l_footer_query_value);

						l_footer_num = 0;

						strcpy(l_footer1,APL_NULL_STRING);
						strcpy(l_footer2,APL_NULL_STRING);
						strcpy(l_footer3,APL_NULL_STRING);
						strcpy(l_footer4,APL_NULL_STRING);
						strcpy(l_footer5,APL_NULL_STRING);
						strcpy(l_footer6,APL_NULL_STRING);
						strcpy(l_footer7,APL_NULL_STRING);
						strcpy(l_footer8,APL_NULL_STRING);
						strcpy(l_footer9,APL_NULL_STRING);
						strcpy(l_footer10,APL_NULL_STRING);
						strcpy(l_footer11,APL_NULL_STRING);
						strcpy(l_footer12,APL_NULL_STRING);
						strcpy(l_footer13,APL_NULL_STRING);
						strcpy(l_footer14,APL_NULL_STRING);
						strcpy(l_footer15,APL_NULL_STRING);

						if(strlen(l_footer_query_value) > 0)
						{		
							if (CO_SplitStr(l_footer_query_value,CAPSEP,&l_footer_num,&l_footer_val) == APL_FAILURE)
							{
								CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_footer_query_value);
								APL_GOBACK_FAIL
							}

							fprintf(fl_userlog,"l_footer_num :|%d|\n",l_footer_num);
							if(l_footer_num > 0)
							{
								for(i=0;i<l_footer_num;i++)
								{
									if(i == 0)
									strcpy(l_footer1,l_footer_val[i]);
									else if(i == 1)
									strcpy(l_footer2,l_footer_val[i]);
									else if(i == 2)
									strcpy(l_footer3,l_footer_val[i]);
									else if(i == 3)
									strcpy(l_footer4,l_footer_val[i]);
									else if(i == 4)
									strcpy(l_footer5,l_footer_val[i]);
									else if(i == 5)
									strcpy(l_footer6,l_footer_val[i]);
									else if(i == 6)
									strcpy(l_footer7,l_footer_val[i]);
									else if(i == 7)
									strcpy(l_footer8,l_footer_val[i]);
									else if(i == 8)
									strcpy(l_footer9,l_footer_val[i]);
									else if(i == 9)
									strcpy(l_footer10,l_footer_val[i]);
									else if(i == 10)
									strcpy(l_footer11,l_footer_val[i]);
									else if(i == 11)
									strcpy(l_footer12,l_footer_val[i]);
									else if(i == 12)
									strcpy(l_footer13,l_footer_val[i]);
									else if(i == 13)
									strcpy(l_footer14,l_footer_val[i]);
									else if(i == 14)
									strcpy(l_footer15,l_footer_val[i]);
								}
							}

						}/************** End Of Footer Value Check ****************************/

						/****** Stored Procedure : SP_REPORT_FOOTER_DATA ***********************************/

						fprintf(fl_userlog,"l_footer1 :|%s|\t l_footer2 :|%s|\n",l_footer1,l_footer2);
						fprintf(fl_userlog,"l_footer3 :|%s|\t l_footer4 :|%s|\n",l_footer3,l_footer4);
						fprintf(fl_userlog,"l_footer5 :|%s|\t l_footer6 :|%s|\n",l_footer5,l_footer6);
						fprintf(fl_userlog,"l_footer7 :|%s|\t l_footer8 :|%s|\n",l_footer7,l_footer8);
						fprintf(fl_userlog,"l_footer9 :|%s|\t l_footer10 :|%s|\n",l_footer9,l_footer10);
						fprintf(fl_userlog,"l_footer11 :|%s|\t l_footer12 :|%s|\n",l_footer11,l_footer12);
						fprintf(fl_userlog,"l_footer13 :|%s|\t l_footer14 :|%s|\n",l_footer13,l_footer14);
						fprintf(fl_userlog,"l_footer15 :|%s|\n",l_footer15);

						fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);	
						printf("Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);		
						
						EXEC SQL CALL SP_REPORT_FOOTER_DATA(:l_rept_id,:l_table_id,
											:l_footer1,:l_footer2,
											:l_footer3,:l_footer4,
											:l_footer5,:l_footer6,
											:l_footer7,:l_footer8,
											:l_footer9,:l_footer10,
											:l_footer11,:l_footer12,
											:l_footer13,:l_footer14,
											:l_footer15,
											:g_complex_parameter1,:g_complex_parameter2,
											:g_complex_parameter3,:g_complex_parameter4,
											:g_complex_parameter5,:g_complex_parameter6,
											:g_complex_parameter7,:g_complex_parameter8,
											:g_complex_parameter9,:g_complex_parameter10,
											:g_complex_parameter11,:g_complex_parameter12,
											:g_complex_parameter13,:g_complex_parameter14,
											:g_complex_parameter15,:g_complex_parameter16,
											:g_complex_parameter17,:g_complex_parameter18,
											:g_complex_parameter19,:g_complex_parameter20,
											:l_footer_data,:l_error_desc);

						if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
						{
							fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER_DATA ERR DESC :|%s|\n",l_error_desc);
						}

						fprintf(fl_userlog,"FOOTER DATA :|%s|\n",l_footer_data);

						/************ Dynamic Formating Procedure ***************************************/
						
						fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);	
						printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
						
						EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_footer_data,:l_error_desc); 

						if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
						{
							fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
						}

						fprintf(fl_userlog,"FOOTER DATA After Formatting -- :|%s|\n",l_footer_data);


						/**********************************************************************************/

						/************ Dynamic Footer Data Display ****************************************/
						
						fprintf(fl_userlog,"strlen(l_footer_data) :|%d|\n",strlen(l_footer_data));

						if(strlen(l_footer_data) > 0)
						{
							fprintf(fl_userlog,"Displaying Footer Data --- \n");

							fprintf(l_report_CSV1,"%s\n",l_footer_data);
						}

						l_footer_data_brk = h_report_details_struct.footer_data_brk;
						while(l_footer_data_brk > 0)
						{
							fprintf(l_report_CSV1,"\n");
							l_footer_data_brk --;
							g_line_count++;
						}
				}

			/***************** End Of Dynamic Footer Display  *****************************/


				/***************** Final Complex Criteria Calculation *************************/

				fprintf(fl_userlog,"\n--- l_table_id --- 5:|%d|\n",l_table_id);

				if(l_table_id == 1)
				{
					f_complex_parameter1=f_complex_parameter1+g_complex_parameter1;
					f_complex_parameter2=f_complex_parameter2+g_complex_parameter2;
					f_complex_parameter3=f_complex_parameter3+g_complex_parameter3;
					f_complex_parameter4=f_complex_parameter4+g_complex_parameter4;
					f_complex_parameter5=f_complex_parameter5+g_complex_parameter5;
					f_complex_parameter6=f_complex_parameter6+g_complex_parameter6;
					f_complex_parameter7=f_complex_parameter7+g_complex_parameter7;
					f_complex_parameter8=f_complex_parameter8+g_complex_parameter8;
					f_complex_parameter9=f_complex_parameter9+g_complex_parameter9;
					f_complex_parameter10=f_complex_parameter10+g_complex_parameter10;
					f_complex_parameter11=f_complex_parameter11+g_complex_parameter11;
					f_complex_parameter12=f_complex_parameter12+g_complex_parameter12;
					f_complex_parameter13=f_complex_parameter13+g_complex_parameter13;
					f_complex_parameter14=f_complex_parameter14+g_complex_parameter14;
					f_complex_parameter15=f_complex_parameter15+g_complex_parameter15;
					f_complex_parameter16=f_complex_parameter16+g_complex_parameter16;
					f_complex_parameter17=f_complex_parameter17+g_complex_parameter17;
					f_complex_parameter18=f_complex_parameter18+g_complex_parameter18;
					f_complex_parameter19=f_complex_parameter19+g_complex_parameter19;
					f_complex_parameter20=f_complex_parameter20+g_complex_parameter20;
				}


				/**********************************************************************************/
		}
	}
	EXEC SQL CLOSE csv1_group_g;
   }/*added by siva.ganapathi for Enh. Log 121 on 2/20/2009 -- Ended*/
	else
	{
	while(l_table_id <= h_report_main_struct.no_of_tables)
	{
		g_complex_parameter1 = 0.0;
		g_complex_parameter2 = 0.0;
		g_complex_parameter3 = 0.0;
		g_complex_parameter4 = 0.0;
		g_complex_parameter5 = 0.0;
		g_complex_parameter6 = 0.0;
		g_complex_parameter7 = 0.0;
		g_complex_parameter8 = 0.0;
		g_complex_parameter9 = 0.0;
		g_complex_parameter10 = 0.0;
		g_complex_parameter11 = 0.0;
		g_complex_parameter12 = 0.0;
		g_complex_parameter13 = 0.0;
		g_complex_parameter14 = 0.0;
		g_complex_parameter15 = 0.0;
		g_complex_parameter16 = 0.0;
		g_complex_parameter17 = 0.0;
		g_complex_parameter18 = 0.0;
		g_complex_parameter19 = 0.0;
		g_complex_parameter20 = 0.0;

		fprintf(fl_userlog,"l_rept_id:|%s|l_table_id:|%d|\n",l_rept_id,l_table_id);
		
		/******* Fetch the REPORT DETAILS for the perticular report ID and table ID *****/
		
		EXEC SQL SELECT * INTO :h_report_details_struct
					FROM REPORT_DETAILS 
					WHERE REPORT_ID=:l_rept_id
					AND TABLE_ID=:l_table_id;
		
		if(sqlca.sqlcode < 0)
		{
			fprintf(fl_userlog,"Failed to Access REPORT_DETAILS --- ORA ERROR :|%d|\n",sqlca.sqlcode);
		}


		/***** Table header *******************************/

		fprintf(fl_userlog,"h_report_details_struct.table_hdr:|%s|\n",h_report_details_struct.table_hdr);
		
		if(strlen(h_report_details_struct.table_hdr) > 0)
		{
			fprintf(l_report_CSV1,"%s\n",h_report_details_struct.table_hdr);
		}

		l_table_hdr = h_report_details_struct.table_hdr_brk;
		while(l_table_hdr > 0)
		{
			fprintf(l_report_CSV1,"\n");
			l_table_hdr --;
		}

		/*********** Grouping Condition Check **************************************************/

		fprintf(fl_userlog,"h_report_details_struct.group_desc:|%s|\n",h_report_details_struct.group_desc);
		fprintf(fl_userlog,"h_report_details_struct.group_pos:|%s|\n",h_report_details_struct.group_pos);
			
		strcpy(l_group_pos,h_report_details_struct.group_pos);

		strcpy(l_group_query,h_report_details_struct.group_query);
		strcpy(l_group_desc,h_report_details_struct.group_desc);
	
		if(strlen(l_group_query) >0 )
		{
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM1',:l_param1) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM2',:l_param2) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM3',:l_param3) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM4',:l_param4) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM5',:l_param5) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM6',:l_param6) INTO :l_group_query FROM DUAL;
			
			fprintf(fl_userlog,"GROUP QUERY :|%s|\n",l_group_query);

			EXEC SQL PREPARE CSV1_GROUP FROM :l_group_query;
			EXEC SQL DECLARE csv1_group CURSOR FOR CSV1_GROUP;
			EXEC SQL OPEN csv1_group;

			if(sqlca.sqlcode < 0)
			{
				fprintf(fl_userlog,"Error : Cursor Open csv1_group ORA ERROR :|%d|\n",sqlca.sqlcode);
			}

			for(;;)
			{
				EXEC SQL FETCH csv1_group
						INTO :l_group_parameter;

				if((sqlca.sqlcode == 1403)||(l_group_break_flag == 1))
					break;

				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Error : Cursor Fetch csv1_group ORA ERROR :|%d|\n",sqlca.sqlcode);
				}

				/********* Split Group Parameter ************************************/
			
				fprintf(fl_userlog,"l_group_pos:|%s|\n",l_group_pos);
				
				if(CO_SplitStr(l_group_pos,COMASEP,&l_group_pos_no,&l_group_pos_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 	fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_pos);
				 	APL_GOBACK_FAIL
				}
				
				fprintf(fl_userlog,"l_group_parameter:|%s|\n",l_group_parameter);
				
				if(CO_SplitStr(l_group_parameter,CAPSEP,&l_group_parameter_no,&l_group_parameter_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 	fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_parameter);
				 	APL_GOBACK_FAIL
				}

				fprintf(fl_userlog,"l_group_pos_no:|%d|l_group_parameter_no:|%d|\n",l_group_pos_no,l_group_parameter_no);
				
				if((l_group_pos_no > 0) && (l_group_parameter_no > 0)
					&& (l_group_pos_no == l_group_parameter_no))
				{	
					l_group_break_flag=0;
				
					for(i=0;i<l_group_pos_no;i++)
					{
						if(!strcmp(l_group_pos_value[i],"2"))
						{
							fprintf(fl_userlog,"l_param2:|%s|l_prev_param2:|%s|\n",l_param2,l_prev_param2);
							
							if(!strcmp(l_param2,l_prev_param2))
							{
								strcpy(l_param2,l_group_parameter_value[i]);
								strcpy(l_prev_param2,l_param2);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"3"))
						{
							fprintf(fl_userlog,"l_param3:|%s|l_prev_param3:|%s|\n",l_param3,l_prev_param3);
							
							if(!strcmp(l_param3,l_prev_param3))
							{
								strcpy(l_param3,l_group_parameter_value[i]);
								strcpy(l_prev_param3,l_param3);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"4"))
						{
							fprintf(fl_userlog,"l_param4:|%s|l_prev_param4:|%s|\n",l_param4,l_prev_param4);
							
							if(!strcmp(l_param4,l_prev_param4))
							{
								strcpy(l_param4,l_group_parameter_value[i]);
								strcpy(l_prev_param4,l_param4);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"5"))
						{
							fprintf(fl_userlog,"l_param5:|%s|l_prev_param5:|%s|\n",l_param5,l_prev_param5);
							
							if(!strcmp(l_param5,l_prev_param5))
							{
								strcpy(l_param5,l_group_parameter_value[i]);
								strcpy(l_prev_param5,l_param5);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"6"))
						{
							fprintf(fl_userlog,"l_param6:|%s|l_prev_param6:|%s|\n",l_param6,l_prev_param6);
							
							if(!strcmp(l_param6,l_prev_param6))
							{
								strcpy(l_param6,l_group_parameter_value[i]);
								strcpy(l_prev_param6,l_param6);
							}
							else
								l_group_break_flag=1;
						}
					}
				}
				else
				{
					fprintf(fl_userlog,"Error: Mismatch in Group Parameters :|%d||%d|",l_group_pos_no,l_group_parameter_no);
					break;
				}
				

			/****************************************************************************/

			/********************* Record Count Query Part *****************************/
			
			EXEC SQL SELECT COUNT(TABLE_ID) INTO :l_table_numbers 
					 FROM REPORT_DETAILS
					 WHERE REPORT_ID=:l_rept_id;
			
			fprintf(fl_userlog,"AFTER COUNT(TABLE_ID) -- ORA Error 891:|%d|\n",sqlca.sqlcode);

			fprintf(fl_userlog,"l_table_numbers 891:|%d|\n",l_table_numbers);

			l_table_num = 1 ;

			l_record_count_flag = 0;

			l_record_count = 0;

			while(l_table_num <= l_table_numbers)
			{
				EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
										RECORD_COUNT_QUERY,'@PARAM1',:l_param1),
														   '@PARAM2',:l_param2),
														   '@PARAM3',:l_param3),
														   '@PARAM4',:l_param4),
														   '@PARAM5',:l_param5),
														   '@PARAM6',:l_param6),
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
										RECORD_COUNT_QUERY1,'@PARAM1',:l_param1),
														   '@PARAM2',:l_param2),
														   '@PARAM3',:l_param3),
														   '@PARAM4',:l_param4),
														   '@PARAM5',:l_param5),
														   '@PARAM6',:l_param6)
						  INTO :l_record_count_query,:l_record_count_query1
						  FROM REPORT_DETAILS 
						  WHERE REPORT_ID=:l_rept_id 
						  AND TABLE_ID = :l_table_num;

				fprintf(fl_userlog,"AFTER RECORD_COUNT_QUERY Select -- ORA Error :|%d|\n",sqlca.sqlcode);


				strcpy(l_record_count_query_final,l_record_count_query);
				strcat(l_record_count_query_final,l_record_count_query1);

				fprintf(fl_userlog,"l_record_count_query_final :|%s|\n",l_record_count_query_final);

				if(strlen(l_record_count_query_final) > 0)
				{

					EXEC SQL PREPARE CSV1_RECORD_COUNT FROM :l_record_count_query_final;

					EXEC SQL DECLARE CSV1_record_count_curr CURSOR FOR CSV1_RECORD_COUNT;

					EXEC SQL OPEN  CSV1_record_count_curr;

					if(sqlca.sqlcode < 0)
					{
						fprintf(fl_userlog,"Error : Failed To OPEN CSV1_record_count_curr CURSOR -- ORA Error :|%d|\n",sqlca.sqlcode);
						l_record_count_flag = 0;
					}

					EXEC SQL FETCH CSV1_record_count_curr INTO :l_record_count;

					if(sqlca.sqlcode < 0)
					{
						fprintf(fl_userlog,"Error : Failed To FETCH CSV1_record_count_curr CURSOR -- ORA Error :|%d|\n",sqlca.sqlcode);
						l_record_count_flag = 0;
					}

					EXEC SQL CLOSE CSV1_record_count_curr;

				}


				fprintf(fl_userlog,"l_record_count :|%d|\n",l_record_count);
				if(l_record_count > 0)
					l_record_count_flag = 1;

				l_table_num ++;

			}

	 
		fprintf(fl_userlog,"RECORD COUNT FLAG :|%d|\n",l_record_count_flag);
		printf("RECORD COUNT FLAG :|%d|\n",l_record_count_flag);
//fflush(fl_userlog);
	   /***********************************************************************************/

		if((l_record_count_flag == 1)||(strlen(l_record_count_query_final) == 0))
		{
				
				fprintf(fl_userlog,"l_param1:|%s|\n",l_param1);
				fprintf(fl_userlog,"l_param2:|%s|\n",l_param2);
				fprintf(fl_userlog,"l_param3:|%s|\n",l_param3);
				fprintf(fl_userlog,"l_param4:|%s|\n",l_param4);
				fprintf(fl_userlog,"l_param5:|%s|\n",l_param5);
				fprintf(fl_userlog,"l_param6:|%s|\n",l_param6);


			/**** Stored procedure for REPORT DETAILS GROUPING **************************/
			
			fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID 21:|%s|\n",l_rept_id);
			printf("Calling Stored Procedure SP_REPORT_DETAIL for Report ID 22:|%s|\n",l_rept_id);
			
			EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
					:l_param2,:l_param3,:l_param4,
					:l_param5,:l_param6,
					:l_table_query,:l_table_query1,:l_table_query2,
					:l_table_query3,:l_table_query4,:l_table_query5,
					:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
					:l_group_desc,:l_error_desc);

			strcpy(table_query,l_table_query);
			strcat(table_query," ");
			
			if(strlen(l_table_query1) > 0)
			{
				strcat(table_query,l_table_query1);
				strcat(table_query," ");
			}
			if(strlen(l_table_query2) > 0)
			{
				strcat(table_query,l_table_query2);
				strcat(table_query," ");
			}
			if(strlen(l_table_query3) > 0)
			{
				strcat(table_query,l_table_query3);
				strcat(table_query," ");
			}
			if(strlen(l_table_query4) > 0)
			{
				strcat(table_query,l_table_query4);
				strcat(table_query," ");
			}
			if(strlen(l_table_query5) > 0)
			{
				strcat(table_query,l_table_query5);
				strcat(table_query," ");
			}
			
			strcat(table_query,APL_NULL_STRING);
				
			fprintf(fl_userlog,"After Stored Procedure SP_REPORT_DETAIL ORA ERROR 6:|%d|\n",sqlca.sqlcode);
			
			if(sqlca.sqlcode < 0)
			{
				fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
			}
			
			//fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
			fprintf(fl_userlog,"l_criteria_query1:|%s|\n",l_criteria_query1);
			fprintf(fl_userlog,"l_criteria_query2:|%s|\n",l_criteria_query2);
			fprintf(fl_userlog,"l_criteria_query3:|%s|\n",l_criteria_query3);
			fprintf(fl_userlog,"l_group_desc:|%s|\n",l_group_desc);

			/********* Group Description ************************************/
			
			if(strlen(l_group_desc) > 0)
			{
				fprintf(l_report_CSV1,"%s\n\n",l_group_desc);
			}


			/****** Before table ******************************************/
			
			if(strlen(h_report_details_struct.before_table) > 0)
			{	
				fprintf(l_report_CSV1,"%s\n",h_report_details_struct.before_table);
			}
			
			l_before_table = h_report_details_struct.before_table_brk;
			while(l_before_table > 0)
			{
				fprintf(l_report_CSV1,"\n");
				l_before_table --;
			}

			/******* Column Heading *************************************/

			/****** Multiple Column Level **************************************/

			strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
			strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
			strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
			
			fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);

			if(strlen(l_multiple_col_flag) > 0)
			{
				fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
				fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);

				if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
						&l_multiple_col_header_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
					 APL_GOBACK_FAIL
				}

				if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
						&l_multiple_colspan_sep_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
					 APL_GOBACK_FAIL
				}


				fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
				fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);

				
				if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
				{
					for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
					{
						for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
						{				

						if(int_a == int_b )
						{
						
						strcpy(l_level_header,l_multiple_col_header_value[int_a]);
						strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

						fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
						fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);

						if (CO_SplitStr(l_level_header,
								SEMISEP,
								&l_level_header_no,
								&l_level_header_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
							 APL_GOBACK_FAIL
						}

						if (CO_SplitStr(l_level_colspan,
								SEMISEP,
								&l_level_colspan_no,
								&l_level_colspan_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
							 APL_GOBACK_FAIL
						}

						fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
						fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);

						if(l_level_header_no == l_level_colspan_no)
						{

						for(int_aa=0;int_aa<l_level_header_no;int_aa++)
						{
							for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
							{
								if(int_aa == int_bb)
								{	
								
								strcpy(l_level_column,l_level_header_value[int_aa]);
								strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

								fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
								fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
								
								if(strlen(l_level_column) > 0)
									fprintf(l_report_CSV1,"%s,", l_level_column);
								else
									fprintf(l_report_CSV1,",");

								for(i=0;i<(atoi(l_level_col_span)-1);i++)
								{
									fprintf(l_report_CSV1,",");

								}


								}
							}
						}
						fprintf(l_report_CSV1,"\n");

						}/*** End Of Inner Condition check *****/

						}
						
												
						}/*** End Of 2st Main For Loop *******/

					}/*** End Of 1st Main For Loop *******/

				}/*** End Of Multiple col condition check *****/

				l_column_no=h_report_details_struct.no_of_columns;
				l_no_of_columns = h_report_details_struct.no_of_columns;
			}
			else
			{						
				fprintf(fl_userlog,"COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
				printf("COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
				//fflush(fl_userlog);
				/**** Split the Column Header and print *****************/
				
				strcpy(l_column_header,h_report_details_struct.column_hdr);
				if (CO_SplitStr(l_column_header,COMASEP,&l_col_no,&l_col_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_header);
					 APL_GOBACK_FAIL
				}

				/***** Table Column Heading and its records  *********/
				
				for(i=0;i<l_col_no;i++)
				{
					strcpy(l_column_value,l_col_value[i]);
					if(i+1==l_col_no)
						fprintf(l_report_CSV1,"%s",l_column_value);
					else
						fprintf(l_report_CSV1,"%s,",l_column_value);

				}
				fprintf(l_report_CSV1,"\n");

				l_column_no=h_report_details_struct.no_of_columns;
				l_no_of_columns = h_report_details_struct.no_of_columns;
				
				l_col_hdr = h_report_details_struct.col_hdr_brk;
				
			}

			EXEC SQL PREPARE CSV1_SUB1 FROM :table_query;	
			EXEC SQL DECLARE csv1tablequery1 CURSOR FOR CSV1_SUB1;
			EXEC SQL OPEN csv1tablequery1;

			fprintf(l_report_CSV1,"\n");

			l_fetch_count=0;

			l_return_param=0;

			fprintf(fl_userlog,"Entering SP_REPORT_DATA_PROC :|%s|\n",l_rept_id);
			printf("Entering SP_REPORT_DATA_PROC :|%s|\n",l_rept_id);

			EXEC SQL CALL SP_REPORT_DATA_PROC(:l_rept_id,
											  :l_param1,:l_param2,
											  :l_param3,:l_param4,
											  :l_param5,:l_param6,
											  :l_return_param,:l_error_desc);

		   fprintf(fl_userlog,"Error : After SP_REPORT_DATA_PROC --- ORA ERROR:|%s|\n",l_error_desc);

		   fprintf(fl_userlog,"l_return_param :|%d|\n",l_return_param);


			for(;;)
			{
				EXEC SQL FETCH csv1tablequery1
					INTO :l_table_parameter;

				if(sqlca.sqlcode == 1403)
				{
					fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
					if(l_fetch_count == 0)
					{
						fprintf(l_report_CSV1,"\nNO RECORDS FOUND\n",l_column_no);
					}
					break;
				}

				if(sqlca.sqlcode < 0)
				{
				   fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
					break;
				}

				strcpy(l_column_parameter,l_table_parameter);
				
				if(l_return_param == 1)
				{
					if((strlen(l_column_parameter) > 0) && (strcmp(l_column_parameter," ")))
						fprintf(l_report_CSV1,"%s,",l_column_parameter);
					else
						fprintf(l_report_CSV1,",");
				}
				else
				{
					/*** Split and fetch the column data into seperate variables **/
				
					if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
					{
						CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
						APL_GOBACK_FAIL
					}

		
					for(j=0;j<l_column_num;j++)
					{
						strcpy(l_column,l_column_val[j]);
						
						if((strlen(l_column) > 0) && (strcmp(l_column," ")))
						{
							if(j+1 == l_column_num)
								fprintf(l_report_CSV1,"%s",l_column);
							else
								fprintf(l_report_CSV1,"%s,",l_column);
						}
						else
							if(j+1 != l_column_num)
								fprintf(l_report_CSV1,",");
					}
					fprintf(l_report_CSV1,"\n");

				}

				/***********************************************************************************/

				l_fetch_count ++;

			}
			EXEC SQL CLOSE csv1tablequery1;

			fprintf(l_report_CSV1,"\n");

		   	/********* For Criteria column value display **************/
			
			if(h_report_details_struct.tot_criteria_cols > 0)
			{
				if(strlen(h_report_details_struct.criteria_col1_query) > 0)
				{
					EXEC SQL PREPARE CSV1_CR1 FROM :l_criteria_query1;
					EXEC SQL DECLARE CSV1_criteria1 CURSOR FOR CSV1_CR1;
					EXEC SQL OPEN CSV1_criteria1;
					
					if(sqlca.sqlcode < 0)
					{
						fprintf(fl_userlog,"Error : Failed to Open CSV1_criteria1 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
					}

					for(;;)
					{
					EXEC SQL FETCH CSV1_criteria1 INTO :l_criteria_value1;
					
					       if(sqlca.sqlcode == 1403)
					       break;

					       if(sqlca.sqlcode < 0)
					       {
							fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
							break;
					       }
					}
					EXEC SQL CLOSE CSV1_criteria1;

					/****** For Grand Total Of Criteria Value *********/
					
					
					if(strcmp(l_criteria_value1,APL_NULL_STRING))
					{
					EXEC SQL SELECT (:l_criteria_value1) INTO :l_criteria1_total FROM DUAL;
					
					l_grand_total1=l_grand_total1+l_criteria1_total;
					
					fprintf(fl_userlog,"l_grand_total1 :|%lf|\n",l_grand_total1);

					fprintf(l_report_CSV1,"\n%s = %s\n",h_report_details_struct.criteria_col1_name,l_criteria_value1);
					}
				}

				if(strlen(h_report_details_struct.criteria_col2_query) > 0)
				{
					EXEC SQL PREPARE CSV1_CR2 FROM :l_criteria_query2;
					EXEC SQL DECLARE CSV1_criteria2 CURSOR FOR CSV1_CR2;
					EXEC SQL OPEN CSV1_criteria2;
					
					if(sqlca.sqlcode < 0)
					{
						fprintf(fl_userlog,"Error : Failed to Open CSV1_criteria2 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
					}

					for(;;)
					{
					EXEC SQL FETCH CSV1_criteria2 INTO :l_criteria_value2;
					
					       if(sqlca.sqlcode == 1403)
					       break;

					       if(sqlca.sqlcode < 0)
					       {
							fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
							break;
					       }
					}
					EXEC SQL CLOSE CSV1_criteria2;
					
					
					if(strcmp(l_criteria_value2,APL_NULL_STRING))	
					{
					EXEC SQL SELECT (:l_criteria_value2) INTO :l_criteria2_total FROM DUAL;
					
					l_grand_total2=l_grand_total2+l_criteria2_total;
					
					fprintf(fl_userlog,"l_grand_total2 :|%lf|\n",l_grand_total2);

					fprintf(l_report_CSV1,"\n%s = %s\n",h_report_details_struct.criteria_col2_name,l_criteria_value2);
					}

				}

				if(strlen(h_report_details_struct.criteria_col3_query) > 0)
				{
					EXEC SQL PREPARE CSV1_CR3 FROM :l_criteria_query3;
					EXEC SQL DECLARE CSV1_criteria3 CURSOR FOR CSV1_CR3;
					EXEC SQL OPEN CSV1_criteria3;
					
					if(sqlca.sqlcode < 0)
					{
						fprintf(fl_userlog,"Error : Failed to Open CSV1_criteria3 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
					}

					for(;;)
					{
					EXEC SQL FETCH CSV1_criteria3 INTO :l_criteria_value3;
					
					       if(sqlca.sqlcode == 1403)
					       break;

					       if(sqlca.sqlcode < 0)
					       {
							fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
							break;
					       }
					}
					EXEC SQL CLOSE CSV1_criteria3;
						
					
					if(strcmp(l_criteria_value3,APL_NULL_STRING))
					{
					EXEC SQL SELECT (:l_criteria_value3) INTO :l_criteria3_total FROM DUAL;
					
					l_grand_total3=l_grand_total3+l_criteria3_total;
					
					fprintf(l_report_CSV1,"\n%s = %s\n",h_report_details_struct.criteria_col3_name,l_criteria_value3);
					}

				}
			}

			/******* Complex Criteria Part *********************************************/

			strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
			strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
			strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
			strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

			if(strlen(complex_criteria_query) > 0)
			{
			
			EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
					:complex_criteria_query,
					'@PARAM1',:l_param1),
					'@PARAM2',:l_param2),
					'@PARAM3',:l_param3),
					'@PARAM4',:l_param4),
					'@PARAM5',:l_param5),
					'@PARAM6',:l_param6),
					REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
					:complex_criteria_query1,
					'@PARAM1',:l_param1),
					'@PARAM2',:l_param2),
					'@PARAM3',:l_param3),
					'@PARAM4',:l_param4),
					'@PARAM5',:l_param5),
					'@PARAM6',:l_param6)
				INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;
	
			strcat(complex_criteria_query,complex_criteria_query1);
			
			fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);

			EXEC SQL PREPARE CSV1_CMPX_CURR1 FROM :complex_criteria_query;

			EXEC SQL DECLARE CSV1_complex_curr1 CURSOR FOR CSV1_CMPX_CURR1;

			fprintf(fl_userlog,"After DECLARE CSV1_complex_curr1 :|%d|\n",sqlca.sqlcode);

			EXEC SQL OPEN CSV1_complex_curr1;

			EXEC SQL FETCH CSV1_complex_curr1 INTO :l_complex_parameter;

			fprintf(fl_userlog,"After FETCH CSV1_complex_curr1 :|%d|\n",sqlca.sqlcode);

			EXEC SQL CLOSE CSV1_complex_curr1;

			fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);

			if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
				APL_GOBACK_FAIL
			}
			
			fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);

			if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
				APL_GOBACK_FAIL
			}


			fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
			fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);

			l_complex_break_flag = 0;
			
			if(l_complex_num == l_complex_pos_num)
			{

			for(i=0;i<l_column_num;i++)
			{
				for(j=0;j<l_complex_pos_num;j++)
				{

				strcpy(l_complex_pos_column,l_complex_pos_val[j]);

				if((i==0)&&(j==0))
				{
					if(strlen(complex_criteria_label) > 0)
					{
						fprintf(l_report_CSV1,"%s\n",complex_criteria_label);
						l_complex_break_flag=1;
					}
					else
					fprintf(l_report_CSV1,"\n");
				}

				if(i== (atoi(l_complex_pos_column)-1))
				{				  
				  strcpy(l_complex_column,l_complex_val[j]);

				  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);

				  l_complex_break_flag=1;
 
				  if(strlen(l_complex_column) > 0)
					fprintf(l_report_CSV1,"%s,",l_complex_column);
				  else
					fprintf(l_report_CSV1,",");
				
				  break;
				}
				else
				{
				     l_complex_break_flag = 0;
				     continue;
				} 

				}
				     
				if(i != 0)
				{
				  if(l_complex_break_flag != 1)
				     fprintf(l_report_CSV1,",");
				}
			}

			}
			else
			{
				fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
			}

			fprintf(l_report_CSV1,"\n");

			}
			
			/*****************	End Of Complex Part     *********************/


			/****** After table *********************************************************/
	
			l_after_table = h_report_details_struct.after_table_brk;
			while(l_after_table > 0)
			{
				fprintf(l_report_CSV1,"\n");
				l_after_table --;
			}

			if(strlen(h_report_details_struct.after_table) > 0)
			{		
				fprintf(l_report_CSV1,"%s\n",h_report_details_struct.after_table);
			}
  
			/********** Table Footer note ***********************************************/
	
			l_table_footer = h_report_details_struct.table_footer_brk;
			if(l_table_footer > 0)
			{
				fprintf(l_report_CSV1,"\n");
				l_table_footer --;
			}
		
			if(strlen(h_report_details_struct.table_footer) > 0)
			{
				fprintf(l_report_CSV1,"%s\n",h_report_details_struct.table_footer);
			}

			l_table = h_report_main_struct.table_brk;
			if(l_table > 0)
			{
				fprintf(l_report_CSV1,"\n");
				l_table --;
			}

			
			if(l_fetch_count > 0 )
			{
			
			for(m=0;m<l_complex_num;m++)
			{
				if(m == 0)
				{
					strcpy(l_complex_parameter1,l_complex_val[m]);
					g_complex_parameter1=g_complex_parameter1+atof(l_complex_parameter1);
				}
				else if(m == 1)
				{
					strcpy(l_complex_parameter2,l_complex_val[m]);
					g_complex_parameter2=g_complex_parameter2+atof(l_complex_parameter2);
				}
				else if(m == 2)
				{
					strcpy(l_complex_parameter3,l_complex_val[m]);
					g_complex_parameter3=g_complex_parameter3+atof(l_complex_parameter3);
				}
				else if(m == 3)
				{
					strcpy(l_complex_parameter4,l_complex_val[m]);
					g_complex_parameter4=g_complex_parameter4+atof(l_complex_parameter4);
				}
				else if(m == 4)
				{
					strcpy(l_complex_parameter5,l_complex_val[m]);
					g_complex_parameter5=g_complex_parameter5+atof(l_complex_parameter5);
				}
				else if(m == 5)
				{
					strcpy(l_complex_parameter6,l_complex_val[m]);
					g_complex_parameter6=g_complex_parameter6+atof(l_complex_parameter6);
				}
				else if(m == 6)
				{
					strcpy(l_complex_parameter7,l_complex_val[m]);
					g_complex_parameter7=g_complex_parameter7+atof(l_complex_parameter7);
				}
				else if(m == 7)
				{
					strcpy(l_complex_parameter8,l_complex_val[m]);
					g_complex_parameter8=g_complex_parameter8+atof(l_complex_parameter8);
				}
				else if(m == 8)
				{
					strcpy(l_complex_parameter9,l_complex_val[m]);
					g_complex_parameter9=g_complex_parameter9+atof(l_complex_parameter9);
				}
				else if(m == 9)
				{
				        strcpy(l_complex_parameter10,l_complex_val[m]);
				        g_complex_parameter10=g_complex_parameter10+atof(l_complex_parameter10);
				}
				else if(m == 10)
				{
					strcpy(l_complex_parameter11,l_complex_val[m]);
					g_complex_parameter11=g_complex_parameter11+atof(l_complex_parameter11);
				}
				else if(m == 11)
				{
					strcpy(l_complex_parameter12,l_complex_val[m]);			
					g_complex_parameter12=g_complex_parameter12+atof(l_complex_parameter12);
				}
				else if(m == 12)
				{
					strcpy(l_complex_parameter13,l_complex_val[m]);
					g_complex_parameter13=g_complex_parameter13+atof(l_complex_parameter13);
				}
				else if(m == 13)
				{
					strcpy(l_complex_parameter14,l_complex_val[m]);
					g_complex_parameter14=g_complex_parameter14+atof(l_complex_parameter14);
				}
				else if(m == 14)
				{
					strcpy(l_complex_parameter15,l_complex_val[m]);
					g_complex_parameter15=g_complex_parameter15+atof(l_complex_parameter15);
				}
				else if(m == 15)
				{
					strcpy(l_complex_parameter16,l_complex_val[m]);
					g_complex_parameter16=g_complex_parameter16+atof(l_complex_parameter16);
				}
				else if(m == 16)
				{
					strcpy(l_complex_parameter17,l_complex_val[m]);
					g_complex_parameter17=g_complex_parameter17+atof(l_complex_parameter17);
				}
				else if(m == 17)
				{
					strcpy(l_complex_parameter18,l_complex_val[m]);
					g_complex_parameter18=g_complex_parameter18+atof(l_complex_parameter18);
				}
				else if(m == 18)
				{
					strcpy(l_complex_parameter19,l_complex_val[m]);
					g_complex_parameter19=g_complex_parameter19+atof(l_complex_parameter19);
				}
				else if(m == 19)
				{
					strcpy(l_complex_parameter20,l_complex_val[m]);
					g_complex_parameter20=g_complex_parameter20+atof(l_complex_parameter20);
				}
			}

			}/*** End Of Fetch Count check ******/

			}/*** End Of Record Count check Part ******/

			}/*** End Of Grouping For Loop ******/
		
			EXEC SQL CLOSE csv1_group;
		}
		else
		{
		
		/**** Stored procedure for REPORT DETAILS ***********************/
		
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID 23:|%s|\n",l_rept_id);
		printf("Calling Stored Procedure SP_REPORT_DETAIL for Report ID 24:|%s|\n",l_rept_id);
		//fflush(fl_userlog);
		EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
				:l_param2,:l_param3,:l_param4,
				:l_param5,:l_param6,
				:l_table_query,:l_table_query1,:l_table_query2,
				:l_table_query3,:l_table_query4,:l_table_query5,
				:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
				:l_group_desc,:l_error_desc);

		strcpy(table_query,l_table_query);
		strcat(table_query," ");
		
		if(strlen(l_table_query1) > 0)
		{
			strcat(table_query,l_table_query1);
			strcat(table_query," ");
		}
		if(strlen(l_table_query2) > 0)
		{
			strcat(table_query,l_table_query2);
			strcat(table_query," ");
		}
		if(strlen(l_table_query3) > 0)
		{
			strcat(table_query,l_table_query3);
			strcat(table_query," ");
		}
		if(strlen(l_table_query4) > 0)
		{
			strcat(table_query,l_table_query4);
			strcat(table_query," ");
		}
		if(strlen(l_table_query5) > 0)
		{
			strcat(table_query,l_table_query5);
			strcat(table_query," ");
		}
		
		strcat(table_query,APL_NULL_STRING);
			
		if(sqlca.sqlcode < 0)
		{
			fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
		}
		
		//fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
		fprintf(fl_userlog,"l_criteria_query1:|%s|\n",l_criteria_query1);
		fprintf(fl_userlog,"l_criteria_query2:|%s|\n",l_criteria_query2);
		fprintf(fl_userlog,"l_criteria_query3:|%s|\n",l_criteria_query3);

		/****** Before table *************************************************************/
		
		if(strlen(h_report_details_struct.before_table_align) > 0)
		{
			if(strlen(h_report_details_struct.before_table) > 0)
			{	
				fprintf(l_report_CSV1,"%s\n",h_report_details_struct.before_table);
			}
		}
		else
		{
			if(strlen(h_report_details_struct.before_table) > 0)
			{	
				fprintf(l_report_CSV1,"%s\n",h_report_details_struct.before_table);
			}

		}	
		
		l_before_table = h_report_details_struct.before_table_brk;
		while(l_before_table > 0)
		{
			fprintf(l_report_CSV1,"\n");
			l_before_table --;
		}

		/******* Column Heading *********************************************************/

		/****** Multiple Column Level **************************************/

		strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
		strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
		strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
		
		fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);

		if(strlen(l_multiple_col_flag) > 0)
		{
			fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
			fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);

			if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
					&l_multiple_col_header_value) == APL_FAILURE)
			{
				 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
				 APL_GOBACK_FAIL
			}

			if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
					&l_multiple_colspan_sep_value) == APL_FAILURE)
			{
				 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
				 APL_GOBACK_FAIL
			}


			fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
			fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);


			if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
			{
				for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
				{
					for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
					{
				
					if(int_a == int_b )
					{
					
					strcpy(l_level_header,l_multiple_col_header_value[int_a]);
					strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

					fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
					fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);

					if (CO_SplitStr(l_level_header,
							SEMISEP,
							&l_level_header_no,
							&l_level_header_value) == APL_FAILURE)
					{
						 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
						 APL_GOBACK_FAIL
					}

					if (CO_SplitStr(l_level_colspan,
							SEMISEP,
							&l_level_colspan_no,
							&l_level_colspan_value) == APL_FAILURE)
					{
						 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
						 APL_GOBACK_FAIL
					}

					fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
					fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);

					if(l_level_header_no == l_level_colspan_no)
					{

					for(int_aa=0;int_aa<l_level_header_no;int_aa++)
					{
						for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
						{
							if(int_aa == int_bb)
							{	
							
							strcpy(l_level_column,l_level_header_value[int_aa]);
							strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

							fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
							fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
							
							if(strlen(l_level_column) > 0)
								fprintf(l_report_CSV1,"%s,", l_level_column);
							else
								fprintf(l_report_CSV1,",");


							for(i=0;i<(atoi(l_level_col_span)-1);i++)
							{
								fprintf(l_report_CSV1,",");

							}

							}
						}
					}
					fprintf(l_report_CSV1,"\n");

					}/*** End Of Inner Condition check *****/

					}
					
											
					}/*** End Of 2st Main For Loop *******/

				}/*** End Of 1st Main For Loop *******/

			}/*** End Of Multiple col condition check *****/

			l_column_no=h_report_details_struct.no_of_columns;
			l_no_of_columns = h_report_details_struct.no_of_columns;

		}
		else
		{		
		
			fprintf(fl_userlog,"COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
			printf("COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
			
			/**** Split the Column Header and print *****************/
			
			strcpy(l_column_header,h_report_details_struct.column_hdr);
			if (CO_SplitStr(l_column_header,COMASEP,&l_col_no,&l_col_value) == APL_FAILURE)
			{
				 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_header);
				 APL_GOBACK_FAIL
			}

			/***** Table Column Heading and its records  *********/
			
			for(i=0;i<l_col_no;i++)
			{
				strcpy(l_column_value,l_col_value[i]);
				
				if(i+1==l_col_no)
					fprintf(l_report_CSV1,"%s",l_column_value);
				else
					fprintf(l_report_CSV1,"%s,",l_column_value);
			}

			l_column_no=h_report_details_struct.no_of_columns;
			l_no_of_columns = h_report_details_struct.no_of_columns;
			
			l_col_hdr = h_report_details_struct.col_hdr_brk;
				
		}
		
		fprintf(l_report_CSV1,"\n");
		
		EXEC SQL PREPARE CSV1_SUB FROM :table_query;	
		EXEC SQL DECLARE CSV1tablequery CURSOR FOR CSV1_SUB;
		EXEC SQL OPEN CSV1tablequery;

		l_fetch_count=0;

		l_return_param=0;

		fprintf(fl_userlog,"Entering SP_REPORT_DATA_PROC :|%s|\n",l_rept_id);
		printf("Entering SP_REPORT_DATA_PROC :|%s|\n",l_rept_id);
//fflush(fl_userlog);
		EXEC SQL CALL SP_REPORT_DATA_PROC(:l_rept_id,
										  :l_param1,:l_param2,
										  :l_param3,:l_param4,
										  :l_param5,:l_param6,
										  :l_return_param,:l_error_desc);

	   fprintf(fl_userlog,"Error : After SP_REPORT_DATA_PROC --- ORA ERROR:|%s|\n",l_error_desc);

	   fprintf(fl_userlog,"l_return_param :|%d|\n",l_return_param);

		//fprintf(fl_userlog,"table_query:|%s|\n",table_query);	


		if(sqlca.sqlcode < 0)
		{
			fprintf(fl_userlog,"Error : Failed to Open CSV1tablequery CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
		}

		for(;;)
		{
			sqlca.sqlcode = 0;
			memset(l_table_parameter,APL_NULL_CHAR,sizeof(l_table_parameter));	

			EXEC SQL FETCH CSV1tablequery
				INTO :l_table_parameter;

			 if(sqlca.sqlcode == 1403)
			 {
			    fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
			    if(l_fetch_count == 0)
			    {
			       fprintf(l_report_CSV1,"\nNO RECORDS FOUND\n");
			    }
			    break;
			 }

			 if(sqlca.sqlcode < 0)
			 {
			    fprintf(fl_userlog,"Error : TABLE QUERY Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
			    break;
			 }

			strcpy(l_column_parameter,l_table_parameter);

			if(l_return_param == 1)
			{
				if((strlen(l_column_parameter) > 0) && (strcmp(l_column_parameter," ")))
					fprintf(l_report_CSV1,"%s,",l_column_parameter);
				else
					fprintf(l_report_CSV1,",");
			}
			else
			{			
				/******* Split the string and fetch the column date into seperate variables *********/
				
				if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
				{
					CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
					APL_GOBACK_FAIL
				}

				for(j=0;j<l_column_num;j++)
				{
					strcpy(l_column,l_column_val[j]);
					
					if((strlen(l_column) > 0) && (strcmp(l_column," ")))
					{
						if(j+1 == l_column_num)
							fprintf(l_report_CSV1,"%s",l_column);
						else
							fprintf(l_report_CSV1,"%s,",l_column);
					}
					else
					{
						if(j+1 != l_column_num)
							fprintf(l_report_CSV1,",");
							//fflush(fl_userlog);
					}
				}
				fprintf(l_report_CSV1,"\n");

			}

			l_fetch_count ++;

		}
		EXEC SQL CLOSE CSV1tablequery;
			
		fprintf(l_report_CSV1,"\n\n");

		/********* For Criteria column value display **********************/
		
		if(h_report_details_struct.tot_criteria_cols > 0)
		{
			if(strlen(h_report_details_struct.criteria_col1_query) > 0)
			{
				EXEC SQL PREPARE CSV1_CR1 FROM :l_criteria_query1;
				EXEC SQL DECLARE CSV1criteria1 CURSOR FOR CSV1_CR1;
				EXEC SQL OPEN CSV1criteria1;
				
				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Error : Failed to Open CSV1criteria1 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
				}

				for(;;)
				{
					EXEC SQL FETCH CSV1criteria1 INTO :l_criteria_value1;
				
					if(sqlca.sqlcode == 1403)
					break;
					
				   if(sqlca.sqlcode < 0)
					{
						fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
						break;
					}
				}
				EXEC SQL CLOSE CSV1criteria1;
				
				/****** For Grand Total Of Criteria Value *********/
					

				if(strcmp(l_criteria_value1,APL_NULL_STRING))
				{
					EXEC SQL SELECT (:l_criteria_value1) INTO :l_criteria1_total FROM DUAL;
					
					l_grand_total1=l_grand_total1+l_criteria1_total;
					
					fprintf(fl_userlog,"l_grand_total1 :|%lf|\n",l_grand_total1);

					fprintf(l_report_CSV1,"%s = %s\n",h_report_details_struct.criteria_col1_name,l_criteria_value1);
				}
			}

			if(strlen(h_report_details_struct.criteria_col2_query) > 0)
			{
				EXEC SQL PREPARE CSV1_CR2 FROM :l_criteria_query2;
				EXEC SQL DECLARE CSV1criteria2 CURSOR FOR CSV1_CR2;
				EXEC SQL OPEN CSV1criteria2;
				
				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Error : Failed to Open CSV1criteria2 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
				}

				for(;;)
				{
				EXEC SQL FETCH CSV1criteria2 INTO :l_criteria_value2;
				
				       if(sqlca.sqlcode == 1403)
				       break;

				       if(sqlca.sqlcode < 0)
				       {
							fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
					  		break;
				       }
				}
				EXEC SQL CLOSE CSV1criteria2;
				
					
				if(strcmp(l_criteria_value2,APL_NULL_STRING))	
				{
					EXEC SQL SELECT (:l_criteria_value2) INTO :l_criteria2_total FROM DUAL;
					
					l_grand_total2=l_grand_total2+l_criteria2_total;
					
					fprintf(fl_userlog,"l_grand_total2 :|%lf|\n",l_grand_total2);

					fprintf(l_report_CSV1,"%s = %s\n",h_report_details_struct.criteria_col2_name,l_criteria_value2);
				}

			}

			if(strlen(h_report_details_struct.criteria_col3_query) > 0)
			{
				EXEC SQL PREPARE CSV1_CR3 FROM :l_criteria_query3;
				EXEC SQL DECLARE CSV1criteria3 CURSOR FOR CSV1_CR3;
				EXEC SQL OPEN CSV1criteria3;
				
				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Error : Failed to Open CSV1criteria3 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
				}

				for(;;)
				{
				EXEC SQL FETCH CSV1criteria3 INTO :l_criteria_value3;
				
				       if(sqlca.sqlcode == 1403)
				       break;

				       if(sqlca.sqlcode < 0)
				       {
							fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
					  		break;
				       }
				}
				EXEC SQL CLOSE CSV1criteria3;
				
			
				if(strcmp(l_criteria_value3,APL_NULL_STRING))
				{
					EXEC SQL SELECT (:l_criteria_value3) INTO :l_criteria3_total FROM DUAL;
					
					l_grand_total3=l_grand_total3+l_criteria3_total;
					
					fprintf(fl_userlog,"l_grand_total3 :|%lf|\n",l_grand_total3);

					fprintf(l_report_CSV1,"%s = %s\n",h_report_details_struct.criteria_col3_name,l_criteria_value3);
				}

			}
		}


		/******* Complex Criteria Part *********************************************/


		strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
		strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
		strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
		strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

		fprintf(fl_userlog,"Before Complex Part -- l_fetch_count 4:|%d|\n",l_fetch_count);

		if(l_fetch_count > 0)
		{

		if(strlen(complex_criteria_query) > 0)
		{
		
		EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
				:complex_criteria_query,
				'@PARAM1',:l_param1),
				'@PARAM2',:l_param2),
				'@PARAM3',:l_param3),
				'@PARAM4',:l_param4),
				'@PARAM5',:l_param5),
				'@PARAM6',:l_param6),
				REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
				:complex_criteria_query1,
				'@PARAM1',:l_param1),
				'@PARAM2',:l_param2),
				'@PARAM3',:l_param3),
				'@PARAM4',:l_param4),
				'@PARAM5',:l_param5),
				'@PARAM6',:l_param6)
			INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;

		
		strcat(complex_criteria_query,complex_criteria_query1);
		
		fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);

		EXEC SQL PREPARE CSV1_CMPX_CURR2 FROM :complex_criteria_query;

		EXEC SQL DECLARE CSV1_complex_curr2 CURSOR FOR CSV1_CMPX_CURR2;

		fprintf(fl_userlog,"After DECLARE CSV1_complex_curr2 :|%d|\n",sqlca.sqlcode);

		EXEC SQL OPEN CSV1_complex_curr2;

		EXEC SQL FETCH CSV1_complex_curr2 INTO :l_complex_parameter;

		fprintf(fl_userlog,"After FETCH CSV1_complex_curr2 :|%d|\n",sqlca.sqlcode);

		EXEC SQL CLOSE CSV1_complex_curr2;

		fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);

		if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
		{
			CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		 	fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
		 	APL_GOBACK_FAIL
		}
		
		fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);

		if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
		{
			CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		 	fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
		 	APL_GOBACK_FAIL
		}


		fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
		fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);

		l_complex_break_flag = 0;

		
		if(l_complex_num == l_complex_pos_num)
		{

		for(i=0;i<l_column_num;i++)
		{
			for(j=0;j<l_complex_pos_num;j++)
			{

			strcpy(l_complex_pos_column,l_complex_pos_val[j]);

			if((i==0)&&(j==0))
			{
				if(strlen(complex_criteria_label) > 0)
				{
					fprintf(l_report_CSV1,"%s,",complex_criteria_label);
			  		l_complex_break_flag=1;
				}
				else
			     	fprintf(l_report_CSV1,",");
			}

			if(i== (atoi(l_complex_pos_column)-1))
			{				  
			  strcpy(l_complex_column,l_complex_val[j]);

			  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);

			  l_complex_break_flag=1;

			  if(strlen(l_complex_column) > 0)
				fprintf(l_report_CSV1,"%s,",l_complex_column);
			  else
				fprintf(l_report_CSV1,",");
			
			  break;
			}
			else
			{
			     l_complex_break_flag = 0;
			     continue;
			} 

			}
			     
			if(i != 0)
			{
			  if(l_complex_break_flag != 1)
			     fprintf(l_report_CSV1,",");
			}
		}

		}
		else
		{
			fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
		}

		fprintf(l_report_CSV1,"\n");

		}

		}
		else
		{			
			fprintf(fl_userlog," No Records Found -- So No Need To Display Criteria \n");
		}
		

		/***************************************************************************/

		
		/****** After table **************************************************************/
		
		l_after_table = h_report_details_struct.after_table_brk;
		while(l_after_table > 0)
		{
			fprintf(l_report_CSV1,"\n");
			l_after_table --;
		}

		if(strlen(h_report_details_struct.after_table_align) > 0)
		{
			if(strlen(h_report_details_struct.after_table) > 0)
			{	
				fprintf(l_report_CSV1,"%s\n",h_report_details_struct.after_table);
			}
		}
		else
		{
			if(strlen(h_report_details_struct.after_table) > 0)
			{	
				fprintf(l_report_CSV1,"%s\n",h_report_details_struct.after_table);
			}

		}	
		
		/************ Table Footer note ******************************/
	
		l_table_footer = h_report_details_struct.table_footer_brk;
		if(l_table_footer > 0)
		{
			fprintf(l_report_CSV1,"\n");
			l_table_footer --;
		}
		
		if(strlen(h_report_details_struct.table_footer_align) > 0)
		{
			if(strlen(h_report_details_struct.table_footer) > 0)
			{
				fprintf(l_report_CSV1,"%s\n",h_report_details_struct.table_footer);
			}
		}
		else
		{
			if(strlen(h_report_details_struct.table_footer) > 0)
			{
				fprintf(l_report_CSV1,"%s\n",h_report_details_struct.table_footer);
			}

		}

		l_table = h_report_main_struct.table_brk;
		if(l_table > 0)
		{
			fprintf(l_report_CSV1,"\n");
			l_table --;
		}
		
		if( l_fetch_count > 0 )
		{
			for(m=0;m<l_complex_num;m++)
			{
				if(m == 0)
				{
					strcpy(l_complex_parameter1,l_complex_val[m]);
					g_complex_parameter1=atof(l_complex_parameter1);
				}
				else if(m == 1)
				{
					strcpy(l_complex_parameter2,l_complex_val[m]);
					g_complex_parameter2=atof(l_complex_parameter2);
				}
				else if(m == 2)
				{
					strcpy(l_complex_parameter3,l_complex_val[m]);
					g_complex_parameter3=atof(l_complex_parameter3);
				}
				else if(m == 3)
				{
					strcpy(l_complex_parameter4,l_complex_val[m]);
					g_complex_parameter4=atof(l_complex_parameter4);
				}
				else if(m == 4)
				{
					strcpy(l_complex_parameter5,l_complex_val[m]);
					g_complex_parameter5=atof(l_complex_parameter5);
				}
				else if(m == 5)
				{
					strcpy(l_complex_parameter6,l_complex_val[m]);
					g_complex_parameter6=atof(l_complex_parameter6);
				}
				else if(m == 6)
				{
					strcpy(l_complex_parameter7,l_complex_val[m]);
					g_complex_parameter7=atof(l_complex_parameter7);
				}
				else if(m == 7)
				{
					strcpy(l_complex_parameter8,l_complex_val[m]);
					g_complex_parameter8=atof(l_complex_parameter8);
				}
				else if(m == 8)
				{
					strcpy(l_complex_parameter9,l_complex_val[m]);
					g_complex_parameter9=atof(l_complex_parameter9);
				}
				else if(m == 9)
				{
					strcpy(l_complex_parameter10,l_complex_val[m]);
					g_complex_parameter10=atof(l_complex_parameter10);
				}
				else if(m == 10)
				{
					strcpy(l_complex_parameter11,l_complex_val[m]);
					g_complex_parameter11=atof(l_complex_parameter11);
				}
				else if(m == 11)
				{
					strcpy(l_complex_parameter12,l_complex_val[m]);			
					g_complex_parameter12=atof(l_complex_parameter12);
				}
				else if(m == 12)
				{
					strcpy(l_complex_parameter13,l_complex_val[m]);
					g_complex_parameter13=atof(l_complex_parameter13);
				}
				else if(m == 13)
				{
					strcpy(l_complex_parameter14,l_complex_val[m]);
					g_complex_parameter14=atof(l_complex_parameter14);
				}
				else if(m == 14)
				{
					strcpy(l_complex_parameter15,l_complex_val[m]);
					g_complex_parameter15=atof(l_complex_parameter15);
				}
				else if(m == 15)
				{
					strcpy(l_complex_parameter16,l_complex_val[m]);
					g_complex_parameter16=atof(l_complex_parameter16);
				}
				else if(m == 16)
				{
					strcpy(l_complex_parameter17,l_complex_val[m]);
					g_complex_parameter17=atof(l_complex_parameter17);
				}
				else if(m == 17)
				{
					strcpy(l_complex_parameter18,l_complex_val[m]);
					g_complex_parameter18=atof(l_complex_parameter18);
				}
				else if(m == 18)
				{
					strcpy(l_complex_parameter19,l_complex_val[m]);
					g_complex_parameter19=atof(l_complex_parameter19);
				}
				else if(m == 19)
				{
					strcpy(l_complex_parameter20,l_complex_val[m]);
					g_complex_parameter20=atof(l_complex_parameter20);
				}

			}/*** End of Complex For Loop ***/

		}/*** End Of Fetch Count Check ****/

		}/******* End Of Grouping Else Block **********/

		/*************** Complex Criteria Individual  *********************/
		
		if(l_fetch_count > 0 )
		{
			fprintf(fl_userlog,"g_complex_parameter1 :|%lf|\tg_complex_parameter2 :|%lf|\n",g_complex_parameter1,g_complex_parameter2);
			fprintf(fl_userlog,"g_complex_parameter3 :|%lf|\tg_complex_parameter4 :|%lf|\n",g_complex_parameter3,g_complex_parameter4);
			fprintf(fl_userlog,"g_complex_parameter5 :|%lf|\tg_complex_parameter6 :|%lf|\n",g_complex_parameter5,g_complex_parameter6);
			fprintf(fl_userlog,"g_complex_parameter7 :|%lf|\tg_complex_parameter8 :|%lf|\n",g_complex_parameter7,g_complex_parameter8);
			fprintf(fl_userlog,"g_complex_parameter9 :|%lf|\tg_complex_parameter10 :|%lf|\n",g_complex_parameter9,g_complex_parameter10);
			fprintf(fl_userlog,"g_complex_parameter11 :|%lf|\tg_complex_parameter12 :|%lf|\n",g_complex_parameter11,g_complex_parameter12);
			fprintf(fl_userlog,"g_complex_parameter13 :|%lf|\tg_complex_parameter14 :|%lf|\n",g_complex_parameter13,g_complex_parameter14);
			fprintf(fl_userlog,"g_complex_parameter15 :|%lf|\tg_complex_parameter16 :|%lf|\n",g_complex_parameter15,g_complex_parameter16);
			fprintf(fl_userlog,"g_complex_parameter17 :|%lf|\tg_complex_parameter18 :|%lf|\n",g_complex_parameter17,g_complex_parameter18);
			fprintf(fl_userlog,"g_complex_parameter19 :|%lf|\tg_complex_parameter20 :|%lf|\n",g_complex_parameter19,g_complex_parameter20);
		}


		/*******************************************************************/


		/********* Dynamic Footer Display ****************************************/

		strcpy(footer_query,h_report_details_struct.footer_query);
		
		if(strlen(footer_query) > 0)
		{

		/**** Stored Procedure : SP_REPORT_FOOTER ***********************************/

		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
		printf("Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
		
		EXEC SQL CALL SP_REPORT_FOOTER(:l_rept_id,:l_table_id,:l_param1,:l_param2,
					:l_param3,:l_param4, :l_param5,
					:l_param6,:l_footer_query,:l_footer_query1,:l_error_desc); 

		strcat(l_footer_query,l_footer_query1);

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER ERR DESC :|%s|\n",l_error_desc);
		}

		fprintf(fl_userlog,"FOOTER QUERY :|%s|\n",l_footer_query);

		strcpy(l_footer_query_value,APL_NULL_STRING);

		EXEC SQL PREPARE CSV1_FOOTER_CURR FROM :l_footer_query;

		EXEC SQL DECLARE CSV1_footer_curr CURSOR FOR CSV1_FOOTER_CURR;
		
		fprintf(fl_userlog,"After DECLARE CSV1_footer_curr :|%d|\n",sqlca.sqlcode);

		EXEC SQL OPEN CSV1_footer_curr;

		EXEC SQL FETCH CSV1_footer_curr INTO :l_footer_query_value;
		fprintf(fl_userlog,"After FETCH CSV1_footer_curr :|%d|\n",sqlca.sqlcode);

		EXEC SQL CLOSE CSV1_footer_curr;

		fprintf(fl_userlog,"l_footer_query_value :|%s|\n",l_footer_query_value);

		l_footer_num = 0;

		strcpy(l_footer1,APL_NULL_STRING);
		strcpy(l_footer2,APL_NULL_STRING);
		strcpy(l_footer3,APL_NULL_STRING);
		strcpy(l_footer4,APL_NULL_STRING);
		strcpy(l_footer5,APL_NULL_STRING);
		strcpy(l_footer6,APL_NULL_STRING);
		strcpy(l_footer7,APL_NULL_STRING);
		strcpy(l_footer8,APL_NULL_STRING);
		strcpy(l_footer9,APL_NULL_STRING);
		strcpy(l_footer10,APL_NULL_STRING);
		strcpy(l_footer11,APL_NULL_STRING);
		strcpy(l_footer12,APL_NULL_STRING);
		strcpy(l_footer13,APL_NULL_STRING);
		strcpy(l_footer14,APL_NULL_STRING);
		strcpy(l_footer15,APL_NULL_STRING);

		if(strlen(l_footer_query_value) > 0)
		{		
			if (CO_SplitStr(l_footer_query_value,CAPSEP,&l_footer_num,&l_footer_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_footer_query_value);
				APL_GOBACK_FAIL
			}

			fprintf(fl_userlog,"l_footer_num :|%d|\n",l_footer_num);
			if(l_footer_num > 0)
			{
				for(i=0;i<l_footer_num;i++)
				{
					if(i == 0)
					strcpy(l_footer1,l_footer_val[i]);
					else if(i == 1)
					strcpy(l_footer2,l_footer_val[i]);
					else if(i == 2)
					strcpy(l_footer3,l_footer_val[i]);
					else if(i == 3)
					strcpy(l_footer4,l_footer_val[i]);
					else if(i == 4)
					strcpy(l_footer5,l_footer_val[i]);
					else if(i == 5)
					strcpy(l_footer6,l_footer_val[i]);
					else if(i == 6)
					strcpy(l_footer7,l_footer_val[i]);
					else if(i == 7)
					strcpy(l_footer8,l_footer_val[i]);
					else if(i == 8)
					strcpy(l_footer9,l_footer_val[i]);
					else if(i == 9)
					strcpy(l_footer10,l_footer_val[i]);
					else if(i == 10)
					strcpy(l_footer11,l_footer_val[i]);
					else if(i == 11)
					strcpy(l_footer12,l_footer_val[i]);
					else if(i == 12)
					strcpy(l_footer13,l_footer_val[i]);
					else if(i == 13)
					strcpy(l_footer14,l_footer_val[i]);
					else if(i == 14)
					strcpy(l_footer15,l_footer_val[i]);
				}
			}

		}/************** End Of Footer Value Check ****************************/

		/****** Stored Procedure : SP_REPORT_FOOTER_DATA ***********************************/

		fprintf(fl_userlog,"l_footer1 :|%s|\t l_footer2 :|%s|\n",l_footer1,l_footer2);
		fprintf(fl_userlog,"l_footer3 :|%s|\t l_footer4 :|%s|\n",l_footer3,l_footer4);
		fprintf(fl_userlog,"l_footer5 :|%s|\t l_footer6 :|%s|\n",l_footer5,l_footer6);
		fprintf(fl_userlog,"l_footer7 :|%s|\t l_footer8 :|%s|\n",l_footer7,l_footer8);
		fprintf(fl_userlog,"l_footer9 :|%s|\t l_footer10 :|%s|\n",l_footer9,l_footer10);
		fprintf(fl_userlog,"l_footer11 :|%s|\t l_footer12 :|%s|\n",l_footer11,l_footer12);
		fprintf(fl_userlog,"l_footer13 :|%s|\t l_footer14 :|%s|\n",l_footer13,l_footer14);
		fprintf(fl_userlog,"l_footer15 :|%s|\n",l_footer15);

		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);	
		printf("Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);		
		//fflush(fl_userlog);
		EXEC SQL CALL SP_REPORT_FOOTER_DATA(:l_rept_id,:l_table_id,
							:l_footer1,:l_footer2,
							:l_footer3,:l_footer4,
							:l_footer5,:l_footer6,
							:l_footer7,:l_footer8,
							:l_footer9,:l_footer10,
							:l_footer11,:l_footer12,
							:l_footer13,:l_footer14,
							:l_footer15,
							:g_complex_parameter1,:g_complex_parameter2,
							:g_complex_parameter3,:g_complex_parameter4,
							:g_complex_parameter5,:g_complex_parameter6,
							:g_complex_parameter7,:g_complex_parameter8,
							:g_complex_parameter9,:g_complex_parameter10,
							:g_complex_parameter11,:g_complex_parameter12,
							:g_complex_parameter13,:g_complex_parameter14,
							:g_complex_parameter15,:g_complex_parameter16,
							:g_complex_parameter17,:g_complex_parameter18,
							:g_complex_parameter19,:g_complex_parameter20,
							:l_footer_data,:l_error_desc);

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER_DATA ERR DESC :|%s|\n",l_error_desc);
		}

		fprintf(fl_userlog,"FOOTER DATA :|%s|\n",l_footer_data);

		/************ Dynamic Formating Procedure ***************************************/
		
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);	
		printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
		
		EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_footer_data,:l_error_desc); 

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
		}

		fprintf(fl_userlog,"FOOTER DATA After Formatting -- :|%s|\n",l_footer_data);


		/**********************************************************************************/

		/************ Dynamic Footer Data Display ****************************************/
		
		fprintf(fl_userlog,"strlen(l_footer_data) :|%d|\n",strlen(l_footer_data));

		if(strlen(l_footer_data) > 0)
		{
			fprintf(fl_userlog,"Displaying Footer Data --- \n");

			fprintf(l_report_CSV1,"%s\n",l_footer_data);
		}

		l_footer_data_brk = h_report_details_struct.footer_data_brk;
		while(l_footer_data_brk > 0)
		{
			fprintf(l_report_CSV1,"\n");
			l_footer_data_brk --;
			g_line_count++;
		}
		}

		/***************** End Of Dynamic Footer Display  *****************************/


		/***************** Final Complex Criteria Calculation *************************/

		fprintf(fl_userlog,"\n--- l_table_id --- 6:|%d|\n",l_table_id);

		if(l_table_id == 1)
		{
			f_complex_parameter1=f_complex_parameter1+g_complex_parameter1;
			f_complex_parameter2=f_complex_parameter2+g_complex_parameter2;
			f_complex_parameter3=f_complex_parameter3+g_complex_parameter3;
			f_complex_parameter4=f_complex_parameter4+g_complex_parameter4;
			f_complex_parameter5=f_complex_parameter5+g_complex_parameter5;
			f_complex_parameter6=f_complex_parameter6+g_complex_parameter6;
			f_complex_parameter7=f_complex_parameter7+g_complex_parameter7;
			f_complex_parameter8=f_complex_parameter8+g_complex_parameter8;
			f_complex_parameter9=f_complex_parameter9+g_complex_parameter9;
			f_complex_parameter10=f_complex_parameter10+g_complex_parameter10;
			f_complex_parameter11=f_complex_parameter11+g_complex_parameter11;
			f_complex_parameter12=f_complex_parameter12+g_complex_parameter12;
			f_complex_parameter13=f_complex_parameter13+g_complex_parameter13;
			f_complex_parameter14=f_complex_parameter14+g_complex_parameter14;
			f_complex_parameter15=f_complex_parameter15+g_complex_parameter15;
			f_complex_parameter16=f_complex_parameter16+g_complex_parameter16;
			f_complex_parameter17=f_complex_parameter17+g_complex_parameter17;
			f_complex_parameter18=f_complex_parameter18+g_complex_parameter18;
			f_complex_parameter19=f_complex_parameter19+g_complex_parameter19;
			f_complex_parameter20=f_complex_parameter20+g_complex_parameter20;
		}

		/******************************************************************************/

		l_table_id ++;
	}
	}
	/********** For Displaying Grand Criteria Total ****************************************/

	fprintf(fl_userlog,"GRAND TOTAL FLAG is 4:|%s|\n",h_report_details_struct.grand_total_flag);
	//fflush(fl_userlog);
	EXEC SQL SELECT ROUND(:l_grand_total1,2),ROUND(:l_grand_total2,2),ROUND(:l_grand_total3,2)
			   INTO :l_grand_round1,:l_grand_round2,:l_grand_round3
				FROM DUAL;

	fprintf(fl_userlog,"After Grand Total Round -- ORA ERROR 4:|%d|\n",sqlca.sqlcode);

	fprintf(fl_userlog,"l_grand_round1:|%s|\n",l_grand_round1);
	fprintf(fl_userlog,"l_grand_round2:|%s|\n",l_grand_round2);
	fprintf(fl_userlog,"l_grand_round3:|%s|\n",l_grand_round3);

	printf("l_grand_round1:|%s|\n",l_grand_round1);
	//fflush(fl_userlog);
	printf("l_grand_round2:|%s|\n",l_grand_round2);
	//fflush(fl_userlog);
	printf("l_grand_round3:|%s|\n",l_grand_round3);	
//fflush(fl_userlog);
	/********* Grand display Check ************************************************/

	fprintf(fl_userlog,"g_setting_flag:|%s|\n",g_setting_flag);
	printf("g_setting_flag:|%s|\n",g_setting_flag);
//fflush(fl_userlog);
	if(!strcmp(g_setting_flag,"U"))
		strcpy(l_grand_display,"GRAND");
	else if(!strcmp(g_setting_flag,"L"))
		strcpy(l_grand_display,"grand");
	else 
		strcpy(l_grand_display,"Grand");

	/********************************************************************************/
	
	if(strlen(h_report_details_struct.grand_total_flag) > 0)
	{

		if(l_grand_total1 > 0)
		fprintf(l_report_CSV1,"%s %s = %s\n",l_grand_display,h_report_details_struct.criteria_col1_name,l_grand_round1);
		
		if(l_grand_total2 > 0)
		fprintf(l_report_CSV1,"%s %s = %s\n",l_grand_display,h_report_details_struct.criteria_col2_name,l_grand_round2);
		
		if(l_grand_total3 > 0)
		fprintf(l_report_CSV1,"%s %s = %s\n",l_grand_display,h_report_details_struct.criteria_col3_name,l_grand_round3);
		
		fprintf(l_report_CSV1,"\n");

	}


	/************* Grand Complex Criteria Display ******************************************/
		
	fprintf(fl_userlog,"f_complex_parameter1 :|%lf|\tf_complex_parameter2 :|%lf|\n",f_complex_parameter1,f_complex_parameter2);
	fprintf(fl_userlog,"f_complex_parameter3 :|%lf|\tf_complex_parameter4 :|%lf|\n",f_complex_parameter3,f_complex_parameter4);
	fprintf(fl_userlog,"f_complex_parameter5 :|%lf|\tf_complex_parameter6 :|%lf|\n",f_complex_parameter5,f_complex_parameter6);
	fprintf(fl_userlog,"f_complex_parameter7 :|%lf|\tf_complex_parameter8 :|%lf|\n",f_complex_parameter7,f_complex_parameter8);
	fprintf(fl_userlog,"f_complex_parameter9 :|%lf|\tf_complex_parameter10 :|%lf|\n",f_complex_parameter9,f_complex_parameter10);
	fprintf(fl_userlog,"f_complex_parameter11 :|%lf|\tf_complex_parameter12 :|%lf|\n",f_complex_parameter11,f_complex_parameter12);
	fprintf(fl_userlog,"f_complex_parameter13 :|%lf|\tf_complex_parameter14 :|%lf|\n",f_complex_parameter13,f_complex_parameter14);
	fprintf(fl_userlog,"f_complex_parameter15 :|%lf|\tf_complex_parameter16 :|%lf|\n",f_complex_parameter15,f_complex_parameter16);
	fprintf(fl_userlog,"f_complex_parameter17 :|%lf|\tf_complex_parameter18 :|%lf|\n",f_complex_parameter17,f_complex_parameter18);
	fprintf(fl_userlog,"f_complex_parameter19 :|%lf|\tf_complex_parameter20 :|%lf|\n",f_complex_parameter19,f_complex_parameter20);

	strcpy(complex_criteria,h_report_details_struct.complex_criteria);

	fprintf(fl_userlog,"strlen(complex_criteria) :|%d|\n",strlen(complex_criteria));

	if(strlen(complex_criteria) > 0 )
	{
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_CRITERIA :|%s|\n",l_rept_id);	
		printf("Calling Stored Procedure SP_REPORT_CRITERIA :|%s|\n",l_rept_id);	
		//fflush(fl_userlog);
		EXEC SQL CALL SP_REPORT_CRITERIA(:complex_criteria,
						 :f_complex_parameter1,:f_complex_parameter2,
						 :f_complex_parameter3,:f_complex_parameter4,
						 :f_complex_parameter5,:f_complex_parameter6,
						 :f_complex_parameter7,:f_complex_parameter8,
						 :f_complex_parameter9,:f_complex_parameter10,
						 :f_complex_parameter11,:f_complex_parameter12,
						 :f_complex_parameter13,:f_complex_parameter14,
						 :f_complex_parameter15,:f_complex_parameter16,
						 :f_complex_parameter17,:f_complex_parameter18,
						 :f_complex_parameter19,:f_complex_parameter20,
						 :l_complex_criteria_data,:l_error_desc); 

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_CRITERIA ERR DESC :|%s|\n",l_error_desc);
		}

		fprintf(fl_userlog,"COMPLEX CRITERIA DATA :|%s|\n",l_complex_criteria_data);

		/************ Dynamic Formating Procedure ********************************************/
		
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);	
		printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
		//fflush(fl_userlog);
		EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_complex_criteria_data,:l_error_desc); 

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
		}

		fprintf(fl_userlog,"COMPLEX CRITERIA DATA After Formatting -- :|%s|\n",l_complex_criteria_data);


		/*********************************************************************************/

		/************ COMPLEX CRITERIA DATA Display **************************************/
		
		fprintf(fl_userlog,"strlen(l_complex_criteria_data) :|%d|\n",strlen(l_complex_criteria_data));

		if(strlen(l_complex_criteria_data) > 0)
		{
			fprintf(fl_userlog,"Displaying l_complex_criteria_data Data --- \n");

			fprintf(l_report_CSV1,"%s\n",l_complex_criteria_data);
		}

	}

	/***************************************************************************************/

	
	/******* Page Footer note ***************************************************************/
		
	if(strlen(h_report_main_struct.page_footer_align) > 0)
	{
		if(strlen(h_report_main_struct.page_footer) > 0)
		{
			fprintf(l_report_CSV1,"%s\n",h_report_main_struct.page_footer);
		}
	}
	else
	{
		if(strlen(h_report_main_struct.page_footer) > 0)
		{
			fprintf(l_report_CSV1,"%s\n",h_report_main_struct.page_footer);
		}

	}

	l_page_footer = h_report_main_struct.page_footer_brk;
	if(l_page_footer > 0)
	{
		fprintf(l_report_CSV1,"\n");
		l_page_footer --;
	}
	
	
	/******* Disclaimer **************************************************/
		
	if(strlen(h_report_main_struct.disclaimer) > 0)
	{
		fprintf(l_report_CSV1,"%s\n",h_report_main_struct.disclaimer);

	}

	/********************************************************************/

	fprintf(l_report_CSV1,"\n\n\n");


	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:
	{
		fclose(l_report_CSV1);
		fclose(l_init_file);
		CO_ProcMonitor(g_logfile,"Success from CO_CreateReport_CSV1",NULL,NULL);
		fprintf(fl_userlog,"Success From CO_CreateReport_CSV1 Function\n");
		return(APL_SUCCESS);
	}


	RETURN_FAILURE:
	{
		fclose(l_report_CSV1);
		fclose(l_init_file);
		CO_ProcMonitor(g_logfile,"Failed from CO_CreateReport_CSV1",l_debug_info_ptr,NULL);
		fprintf(fl_userlog,"Failure From CO_CreateReport_CSV1 Function\n ");
		return(APL_FAILURE);
	}
}

int CO_CreateReport_HTML2(char *p_rept_id,char *p_rep_type,char *p_rep_name,
		      	char *p_param_str,char *p_chr_ptr_param,char *p_start_date,
		        char *p_compress_flag,char *p_user,char *p_web_login_id,char *p_web_rpt_id,char *p_web_source_from,char *p_web_report_dt,char *p_web_proc_id,FILE *fl_userlog,
			DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	printf("Entered Inside CO_CreateReport_HTML2 Function \n");

	FILE	*l_init_file  		= (FILE *)NULL;
	FILE	*l_report_HTML2 	= (FILE *)NULL;
	char l_init_path[200]	= APL_NULL_STRING;
	char l_report_path[200] = APL_NULL_STRING;
	char l_report_name[200] = APL_NULL_STRING;
	char l_compress_flag[5]	= APL_NULL_STRING;
	char l_time_stamp[30]	= APL_NULL_STRING;
	
	char l_remove_file_path[200] = APL_NULL_STRING;
	int  l_remove_count = 0;
	int  l_remove_flag = 0;
	int  l_client_fetch_count = 0;
	int  no_of_table_count = 0;
	
	memset(l_remove_file_path,APL_NULL_CHAR,200);	
	

	memset(l_init_path,APL_NULL_CHAR,200);	
	memset(l_report_path,APL_NULL_CHAR,200);	
	memset(l_report_name,APL_NULL_CHAR,200);	

	REPORT_MAIN_STRUCT_H  h_report_main_struct;
	REPORT_MAIN_STRUCT_I  i_report_main_struct;
	
	REPORT_DETAILS_STRUCT_H h_report_details_struct;
	REPORT_DETAILS_STRUCT_I i_report_details_struct;
	
	INTL_REPT_STRUCT_H   l_intl_rept_struct_ha;
	memset(&l_intl_rept_struct_ha,APL_NULL_CHAR,sizeof(INTL_REPT_STRUCT_H));

	memset(&h_report_main_struct,APL_NULL_CHAR,sizeof(REPORT_MAIN_STRUCT_H));	
	memset(&i_report_main_struct,APL_NULL_CHAR,sizeof(REPORT_MAIN_STRUCT_I));

	memset(&h_report_details_struct,APL_NULL_CHAR,sizeof(REPORT_DETAILS_STRUCT_H));
	memset(&i_report_details_struct,APL_NULL_CHAR,sizeof(REPORT_DETAILS_STRUCT_I));
		
	char l_rept_id[11]		   	= APL_NULL_STRING;
	char l_rep_type[10]	   	= APL_NULL_STRING;
	char l_client[20]  			= APL_NULL_STRING;
	char l_sub_client[20]  		= APL_NULL_STRING;
	char l_rep_name[100]    	= APL_NULL_STRING;
	char l_param_str[4000]  	= APL_NULL_STRING;
	char l_chr_param[4000]  	= APL_NULL_STRING;
	char l_start_date[20]   	= APL_NULL_STRING;
	char l_user[20]  				= APL_NULL_STRING;
	char l_client_name[100] 	= APL_NULL_STRING;
	char l_gen_query[4001]  	= APL_NULL_STRING;

    //changes for report generation through api start
	char l_web_login_id[101]				= APL_NULL_STRING;
	char l_web_rpt_id[101]				= APL_NULL_STRING;
	char l_web_source_from[101]				= APL_NULL_STRING;
	char l_web_report_dt[101]				= APL_NULL_STRING;
	char l_web_proc_id[101]				= APL_NULL_STRING;
	//changes for report generation through api end

	char l_more_qry_flag[3]     = APL_NULL_STRING;
	char table_query[24001] 	= APL_NULL_STRING;
	char l_table_query[4001] 	= APL_NULL_STRING;
	char l_table_query1[4001] 	= APL_NULL_STRING;
	char l_table_query2[4001] 	= APL_NULL_STRING;
	char l_table_query3[4001] 	= APL_NULL_STRING;
	char l_table_query4[4001] 	= APL_NULL_STRING;
	char l_table_query5[4001] 	= APL_NULL_STRING;


	char l_criteria_query1[4001] = APL_NULL_STRING;
	char l_criteria_query2[4001] = APL_NULL_STRING;
	char l_criteria_query3[4001] = APL_NULL_STRING;
	char l_system_date[20]  	   = APL_NULL_STRING;
	char l_column_value[200]		= APL_NULL_STRING;
	char l_column_header[4001]		=APL_NULL_STRING;
	char l_table_parameter[6000]	=APL_NULL_STRING;
	char l_general_parameter[6000]=APL_NULL_STRING;
	char l_general_param[6000]		=APL_NULL_STRING;
	char l_param[2000]				=APL_NULL_STRING;
	char l_column_parameter[6000]	=APL_NULL_STRING;
	char l_column[2000]				=APL_NULL_STRING;
	char l_error_desc[2000]			=APL_NULL_STRING;
	char  l_param1[100]            = APL_NULL_STRING;
	char  l_param2[100]            = APL_NULL_STRING;
	char  l_param3[100]            = APL_NULL_STRING;
	char  l_param4[100]            = APL_NULL_STRING;
	char  l_param5[100]            = APL_NULL_STRING;
	char  l_param6[100]            = APL_NULL_STRING;
	char  l_master_query[4001]    = APL_NULL_STRING;

	char g_style[4000]	= APL_NULL_STRING;
	char g_style_lt[4000]	= APL_NULL_STRING;
	char g_setting_flag[2]	= APL_NULL_STRING;
	char g_table_border[2]= APL_NULL_STRING;

	char  l_group_query[4001]       = APL_NULL_STRING;
	char  l_group_desc[4001]        = APL_NULL_STRING;
	char  l_group_pos[11]			  = APL_NULL_STRING;
	char  l_group_parameter[2001]   = APL_NULL_STRING;
	
	char  **l_group_parameter_value		=	NULL;
	char  **l_group_pos_value 				=	NULL;

	int  l_group_pos_no			= 0;
	int  l_group_parameter_no	= 0;
	int  l_group_break_flag 	= 0;

	char  l_prev_param1[100]            = APL_NULL_STRING;
	char  l_prev_param2[100]            = APL_NULL_STRING;
	char  l_prev_param3[100]            = APL_NULL_STRING;
	char  l_prev_param4[100]            = APL_NULL_STRING;
	char  l_prev_param5[100]            = APL_NULL_STRING;
	char  l_prev_param6[100]            = APL_NULL_STRING;
	
	char l_grand_round1[200]	= APL_NULL_STRING;
	char l_grand_round2[200]	= APL_NULL_STRING;
	char l_grand_round3[200]	= APL_NULL_STRING;	
	
	char  **l_col_value						=	NULL;
	char  **l_field_val						=	NULL;
	char  **l_column_val						=	NULL;
	char  **l_param_val						=	NULL;
	
	int i=0,j=0,k=0;
	int l_col_no				= 0;
	int l_column_num			= 0;
	int l_param_num			= 0;
	int l_fetch_count 		= 0;
	int l_before_title_break= 0;
	int l_no_of_columns     = 0;
	int l_table_id		      = 0;
	int l_column_no         = 0;
	int l_page_header			= 0;
	int l_before_title      = 0;
	int l_before_title1		= 0;
	int l_before_title2		= 0;
	int l_before_title3     = 0;
	int l_report_title		= 0;
	int l_after_title			= 0;
	int l_table_hdr			= 0;
	int l_before_table		= 0;
	int l_after_table		   = 0;
	int l_col_hdr				= 0;
	int l_table					= 0;
	int l_table_footer		= 0;
	int l_page_footer			= 0;
	int l_int_no_field      = 0;
	int int_no					= 0;
	double l_grand_total1		= 0.0;
	double l_grand_total2		= 0.0;
	double l_grand_total3		= 0.0;

	char l_criteria_value1[200]   = APL_NULL_STRING;
	char l_criteria_value2[200]   = APL_NULL_STRING;
	char l_criteria_value3[200]   = APL_NULL_STRING;
	double l_criteria1_total = 0.0;
	double l_criteria2_total = 0.0;
	double l_criteria3_total = 0.0;

	/************ Paging Varibles Declaration **********************/

	int p_page_no = 0;
	int rec_no = 0;
	int p_total_page_no = 0;
	int l_page_break_chk = 0;
	int l_next_page_break = 0;
	int l_main_page_break = 0;
	int p_final_break = 0;
	int l_final_break = 0;
	int l_main_page_recs = 0;
	int l_next_page_recs = 0;
	int l_tolarence = 0;
	int l_landscape = 0;
	int l_portrait = 0;
	int g_line_count = 0;

	char l_paging_flag[2] = APL_NULL_STRING;
	char l_print_flag[2] = APL_NULL_STRING;

	char l_grand_display[20] = APL_NULL_STRING;

	/******* Complex Criteria Variables ***************************/

	char l_report_type[3] 			= APL_NULL_STRING;
	
	char  **l_complex_val			= NULL;
	int l_complex_num			= 0;
	char l_complex_column[2000]		= APL_NULL_STRING;
	char l_complex_parameter[2000] 		= APL_NULL_STRING;
	
	char  **l_complex_pos_val		= NULL;
	int l_complex_pos_num			= 0;
	char l_complex_pos_column[2000]		= APL_NULL_STRING;
	char l_complex_pos_parameter[2000] 	= APL_NULL_STRING;
		
	int l_complex_break_flag 		= 0;
	
	char complex_criteria_query[8001] 	= APL_NULL_STRING;
	char complex_criteria_query1[4001] 	= APL_NULL_STRING;
	char complex_criteria_label[4001] 	= APL_NULL_STRING;
	char complex_criteria_pos[101] 		= APL_NULL_STRING;

	char l_header_query[8001] 		= APL_NULL_STRING;
	char l_header_query1[4001] 		= APL_NULL_STRING;
	char header_query[4001] 		= APL_NULL_STRING;	
	char l_header_query_value[4001] 	= APL_NULL_STRING;	
	int l_header_num 			= 0;
	char **l_header_val			= NULL;
	char l_header_data[6001]		= APL_NULL_STRING;
	int l_header_brk			= 0;

	char l_footer_query[8001] 		= APL_NULL_STRING;	
	char l_footer_query1[4001] 		= APL_NULL_STRING;
	char footer_query[4001] 		= APL_NULL_STRING;	
	char l_footer_query_value[4001] 	= APL_NULL_STRING;	
	int l_footer_num 			= 0;
	char **l_footer_val			= NULL;
	char l_footer_data[6001]		= APL_NULL_STRING;
	int l_footer_data_brk			= 0;

	char l_header1[200] 			= APL_NULL_STRING;
	char l_header2[200] 			= APL_NULL_STRING;
	char l_header3[200] 			= APL_NULL_STRING;
	char l_header4[200] 			= APL_NULL_STRING;
	char l_header5[200] 			= APL_NULL_STRING;
	char l_header6[200] 			= APL_NULL_STRING;
	char l_header7[200] 			= APL_NULL_STRING;
	char l_header8[200] 			= APL_NULL_STRING;
	char l_header9[200] 			= APL_NULL_STRING;
	char l_header10[200] 			= APL_NULL_STRING;
	char l_header11[200] 			= APL_NULL_STRING;
	char l_header12[200] 			= APL_NULL_STRING;
	char l_header13[200] 			= APL_NULL_STRING;
	char l_header14[200] 			= APL_NULL_STRING;
	char l_header15[200] 			= APL_NULL_STRING;	

	char l_footer1[200] 			= APL_NULL_STRING;
	char l_footer2[200] 			= APL_NULL_STRING;
	char l_footer3[200] 			= APL_NULL_STRING;
	char l_footer4[200] 			= APL_NULL_STRING;
	char l_footer5[200] 			= APL_NULL_STRING;
	char l_footer6[200] 			= APL_NULL_STRING;
	char l_footer7[200] 			= APL_NULL_STRING;
	char l_footer8[200] 			= APL_NULL_STRING;
	char l_footer9[200] 			= APL_NULL_STRING;
	char l_footer10[200] 			= APL_NULL_STRING;
	char l_footer11[200] 			= APL_NULL_STRING;
	char l_footer12[200] 			= APL_NULL_STRING;
	char l_footer13[200] 			= APL_NULL_STRING;
	char l_footer14[200] 			= APL_NULL_STRING;
	char l_footer15[200] 			= APL_NULL_STRING;

	int m					= 0;
	
	char l_complex_parameter1[500]		= APL_NULL_STRING;
	char l_complex_parameter2[500]		= APL_NULL_STRING;
	char l_complex_parameter3[500]		= APL_NULL_STRING;
	char l_complex_parameter4[500]		= APL_NULL_STRING;
	char l_complex_parameter5[500]		= APL_NULL_STRING;
	char l_complex_parameter6[500]		= APL_NULL_STRING;
	char l_complex_parameter7[500]		= APL_NULL_STRING;
	char l_complex_parameter8[500]		= APL_NULL_STRING;
	char l_complex_parameter9[500]		= APL_NULL_STRING;
	char l_complex_parameter10[500]		= APL_NULL_STRING;
	char l_complex_parameter11[500]		= APL_NULL_STRING;
	char l_complex_parameter12[500]		= APL_NULL_STRING;
	char l_complex_parameter13[500]		= APL_NULL_STRING;
	char l_complex_parameter14[500]		= APL_NULL_STRING;
	char l_complex_parameter15[500]		= APL_NULL_STRING;
	char l_complex_parameter16[500]		= APL_NULL_STRING;
	char l_complex_parameter17[500]		= APL_NULL_STRING;
	char l_complex_parameter18[500]		= APL_NULL_STRING;
	char l_complex_parameter19[500]		= APL_NULL_STRING;
	char l_complex_parameter20[500]		= APL_NULL_STRING;

	double g_complex_parameter1		= 0.0;
	double g_complex_parameter2 		= 0.0;
	double g_complex_parameter3 		= 0.0;
	double g_complex_parameter4 		= 0.0;
	double g_complex_parameter5 		= 0.0;
	double g_complex_parameter6 		= 0.0;
	double g_complex_parameter7 		= 0.0;
	double g_complex_parameter8 		= 0.0;
	double g_complex_parameter9 		= 0.0;
	double g_complex_parameter10 		= 0.0;
	double g_complex_parameter11 		= 0.0;
	double g_complex_parameter12 		= 0.0;
	double g_complex_parameter13 		= 0.0;
	double g_complex_parameter14 		= 0.0;
	double g_complex_parameter15 		= 0.0;
	double g_complex_parameter16 		= 0.0;
	double g_complex_parameter17 		= 0.0;
	double g_complex_parameter18 		= 0.0;
	double g_complex_parameter19 		= 0.0;
	double g_complex_parameter20		= 0.0;
	
	double f_complex_parameter1		= 0.0;
	double f_complex_parameter2 		= 0.0;
	double f_complex_parameter3 		= 0.0;
	double f_complex_parameter4 		= 0.0;
	double f_complex_parameter5 		= 0.0;
	double f_complex_parameter6 		= 0.0;
	double f_complex_parameter7 		= 0.0;
	double f_complex_parameter8 		= 0.0;
	double f_complex_parameter9 		= 0.0;
	double f_complex_parameter10 		= 0.0;
	double f_complex_parameter11 		= 0.0;
	double f_complex_parameter12 		= 0.0;
	double f_complex_parameter13 		= 0.0;
	double f_complex_parameter14 		= 0.0;
	double f_complex_parameter15 		= 0.0;
	double f_complex_parameter16 		= 0.0;
	double f_complex_parameter17 		= 0.0;
	double f_complex_parameter18 		= 0.0;
	double f_complex_parameter19 		= 0.0;
	double f_complex_parameter20		= 0.0;

	char complex_criteria[4001]		= APL_NULL_STRING;
	char l_complex_criteria_data[4001]      = APL_NULL_STRING;

	char l_multiple_col_flag[3]		= APL_NULL_STRING;
	char l_multiple_col_header[4001]	= APL_NULL_STRING;
	char l_multiple_colspan_sep[2001]	= APL_NULL_STRING;

	int l_multiple_col_header_no		= 0;
	int l_multiple_colspan_sep_no		= 0;

	char **l_multiple_col_header_value	= NULL;
	char **l_multiple_colspan_sep_value	= NULL;

	char l_level_header[2000]		= APL_NULL_STRING;
	char l_level_colspan[500]		= APL_NULL_STRING;
	char l_level_column[500]		= APL_NULL_STRING;
	char l_level_col_span[10]		= APL_NULL_STRING;

	int l_level_header_no			= 0;
	int l_level_colspan_no			= 0;
	int int_aa				= 0;
	int int_bb				= 0;
	int int_a				= 0;
	int int_b				= 0;

	char **l_level_header_value		= NULL;
	char **l_level_colspan_value		= NULL;

	char l_zip_image_path[200]		= APL_NULL_STRING;

	int l_format_col_flag		= 0;
	int l_format_col_no         = 0;
	char **l_format_col_val		= NULL;
	char l_format_col_value[10] = APL_NULL_STRING;
	char l_format_col_pos[500]	= APL_NULL_STRING;

	char l_record_count_query_final[8001]   = APL_NULL_STRING;
	char l_record_count_query[4001]   = APL_NULL_STRING;
	char l_record_count_query1[4001]   = APL_NULL_STRING;
	int l_record_count_flag = 0;
	int l_record_count = 0;
	int l_table_numbers = 0;
	int l_table_num = 0;


	strcpy(l_rept_id,p_rept_id);
	strcpy(l_rep_type,p_rep_type);
	strcpy(l_rep_name,p_rep_name);
	strcpy(l_param_str,p_param_str);
	strcpy(l_chr_param,p_chr_ptr_param);
	strcpy(l_client,l_param_str);
	strcpy(l_start_date,p_start_date);
	strcpy(l_compress_flag,p_compress_flag);
	strcpy(l_user,p_user);
	strcpy(l_web_login_id,p_web_login_id);
	strcpy(l_web_rpt_id,p_web_rpt_id);
	strcpy(l_web_source_from,p_web_source_from);
	strcpy(l_web_report_dt,p_web_report_dt);
	strcpy(l_web_proc_id,p_web_proc_id);

	EXEC SQL BEGIN DECLARE SECTION;
		
	EXEC SQL VAR l_rept_id IS STRING;
	EXEC SQL VAR l_gen_query IS STRING;
	
	EXEC SQL VAR table_query IS STRING;
	EXEC SQL VAR l_table_query IS STRING;
	EXEC SQL VAR l_table_query1 IS STRING;
	EXEC SQL VAR l_table_query2 IS STRING;
	EXEC SQL VAR l_table_query3 IS STRING;
	EXEC SQL VAR l_table_query4 IS STRING;
	EXEC SQL VAR l_table_query5 IS STRING;

	EXEC SQL VAR l_criteria_query1 IS STRING;
	EXEC SQL VAR l_criteria_query2 IS STRING;
	EXEC SQL VAR l_criteria_query3 IS STRING;
	EXEC SQL VAR l_table_parameter IS STRING;
	EXEC SQL VAR l_general_param IS STRING;
	EXEC SQL VAR l_client IS STRING;
	EXEC SQL VAR l_sub_client IS STRING;
	EXEC SQL VAR l_start_date IS STRING;
	EXEC SQL VAR l_master_query IS STRING;
	EXEC SQL VAR l_group_parameter IS STRING;
	EXEC SQL VAR l_group_query IS STRING;
	EXEC SQL VAR l_group_desc IS STRING;

	EXEC SQL VAR l_grand_round1 IS STRING;
	EXEC SQL VAR l_grand_round1 IS STRING;
	EXEC SQL VAR l_grand_round1 IS STRING;

	EXEC SQL VAR g_setting_flag IS STRING;
	EXEC SQL VAR l_grand_display IS STRING;

	EXEC SQL VAR complex_criteria_query IS STRING;
	EXEC SQL VAR complex_criteria_query1 IS STRING;
	EXEC SQL VAR l_header_query IS STRING;
	EXEC SQL VAR l_header_query1 IS STRING;
	EXEC SQL VAR l_footer_query IS STRING;
	EXEC SQL VAR l_footer_query1 IS STRING;
	EXEC SQL VAR l_complex_criteria_data IS STRING;
	EXEC SQL VAR complex_criteria IS STRING;
	EXEC SQL VAR l_web_login_id IS STRING;
	EXEC SQL VAR l_web_rpt_id IS STRING;
	EXEC SQL VAR l_web_source_from IS STRING;
	EXEC SQL VAR l_web_report_dt IS STRING;
	EXEC SQL VAR l_web_proc_id IS STRING;
	EXEC SQL END DECLARE SECTION;
	
	strcpy(l_init_path,getenv("INTL_ROOT_PATH"));
	strcat(l_init_path,"intl_sun.cfg");
	
	if((l_init_file = fopen(l_init_path,"r")) == (FILE *)NULL)
	{
		fprintf(fl_userlog,"Failed to Open file for PATH :|%s|\n",l_init_path);
		printf("Failed to Open file for PATH :|%s|\n",l_init_path);
		APL_GOBACK_FAIL
	}

	fprintf(fl_userlog,"COMPRESS FLAG :|%s|\n",l_compress_flag);
	
	if(strlen(l_compress_flag) > 0 && !strcmp(l_compress_flag,"Y"))
	{
		if (APL_FAILURE == CO_ReadToken(l_init_file,"INTL_TEMP_PATH",l_report_path,l_debug_info_ptr))
		{
			fprintf(fl_userlog,"Error : INTL_TEMP_PATH not set in intl_sun.cfg File \n");
			printf("Error : INTL_TEMP_PATH not set in intl_sun.cfg File \n");
			APL_GOBACK_FAIL
		}
	}
	else
	{
		if (APL_FAILURE == CO_ReadToken(l_init_file,"INTL_REP_PATH",l_report_path,l_debug_info_ptr))
		{
			fprintf(fl_userlog,"Error : INTL_REP_PATH not set in intl_sun.cfg File \n");
			printf("Error : INTL_REP_PATH not set in intl_sun.cfg File \n");
			APL_GOBACK_FAIL
		}
	}
		
	EXEC SQL SELECT TO_CHAR(SYSDATE,'DD_MON_YYYY')||CHR(95)||TO_CHAR(SYSDATE,'HH24_MI_SS')		
				INTO :l_time_stamp
				FROM DUAL;

	sprintf(l_report_name,"%s_%s_%s.htm",l_client,l_rept_id,l_time_stamp);

	sprintf(l_report_path, "%s%s",l_report_path,l_report_name);
	
	fprintf(fl_userlog,"l_chr_param:|%s|\n",l_chr_param);
	
	if (CO_SplitStr(l_chr_param,PARAMSEP,&l_int_no_field,&l_field_val) == APL_FAILURE)
	{
		CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_chr_param);
		APL_GOBACK_FAIL
	}

	fprintf(fl_userlog,"l_int_no_field:|%d|\n",l_int_no_field);
	
	if(l_int_no_field > 0)
	{
		for(int_no=0;int_no<l_int_no_field;int_no++)
		{
			if(int_no == 1)
			strcpy(l_param2,l_field_val[int_no]);
			else if(int_no == 2)
			strcpy(l_param3,l_field_val[int_no]);
			else if(int_no == 3)
			strcpy(l_param4,l_field_val[int_no]);
			else if(int_no == 4)
			strcpy(l_param5,l_field_val[int_no]);
			else if(int_no == 5)
			strcpy(l_param6,l_field_val[int_no]);
		}
	}

	fprintf(fl_userlog,"REPORT FILE PATH 4:|%s|\n",l_report_path);
//fflush(fl_userlog);
	if((l_report_HTML2 = fopen(l_report_path,"w")) == (FILE *) NULL)
	{
		CO_InsertErr(l_debug_info_ptr,"FILE NOT FOUND",APL_NULL_STRING,
						APL_NULL_STRING,APL_NULL_STRING,	
						 __LINE__,__FILE__);
		fprintf(fl_userlog,"Error : File not Found For Report PATH :|%s|\n",l_report_path);
		APL_GOBACK_FAIL
	}


	/**** For Entry in PRO_COMMON_REPORT ********************************************************/
	
	//fprintf(fl_userlog,"LENGTH OF l_compress_flag :|%d|\n",strlen(l_compress_flag)); Changes done for AIX Migration
	fprintf(fl_userlog,"LENGTH OF l_compress_flag :|%d|\n",(int)strlen(l_compress_flag));

	if(strlen(l_compress_flag) == 0 || !strcmp(l_compress_flag,"N"))
	{
	    strcpy(l_intl_rept_struct_ha.report_name,l_report_name);
	    strcat(l_intl_rept_struct_ha.report_name,"\0");
	    strcpy(l_intl_rept_struct_ha.report_desc,APL_REP_DESC);
	    strcat(l_intl_rept_struct_ha.report_desc,"\0");
	    strcpy(l_intl_rept_struct_ha.report_date,l_start_date);
	    l_intl_rept_struct_ha.report_width = 200 ;
	    strcpy(l_intl_rept_struct_ha.task_desc,"DynamicReport");
	    strcpy(l_intl_rept_struct_ha.fe_be_ind,"B");
	    strcpy(l_intl_rept_struct_ha.usr,l_user);

		 fprintf(fl_userlog,"Entering CO_Proc_RptIns4\n");
		 //fflush(fl_userlog);
		 fprintf(fl_userlog,"report_name:|%s|\n",l_intl_rept_struct_ha.report_name);
		 fprintf(fl_userlog,"report_desc:|%s|\n",l_intl_rept_struct_ha.report_desc);
		 fprintf(fl_userlog,"report_date:|%s|\n",l_intl_rept_struct_ha.report_date);
		 //fprintf(fl_userlog,"report_width:|%ld|\n",l_intl_rept_struct_ha.report_width); Changes done for AIX Migration
		 fprintf(fl_userlog,"report_width:|%d|\n",l_intl_rept_struct_ha.report_width);
		 fprintf(fl_userlog,"task_desc:|%s|\n",l_intl_rept_struct_ha.task_desc);
		 fprintf(fl_userlog,"fe_be_ind:|%s|\n",l_intl_rept_struct_ha.fe_be_ind);
		 fprintf(fl_userlog,"usr:|%s|\n",l_intl_rept_struct_ha.usr);
	   //fflush(fl_userlog);
	    //if(APL_FAILURE == CO_Proc_DBRptIns(l_intl_rept_struct_ha,l_debug_info_ptr))
            if(APL_FAILURE == CO_Proc_DBRptIns(&l_intl_rept_struct_ha,l_debug_info_ptr))   // AIX - Migration Changes
	    {
			fprintf(fl_userlog,"Error : Failure From CO_Proc_RptIns\n");
		  	APL_GOBACK_FAIL
	    }
		
	 }

	/**************************************************************************************/

   	/******** Starting of HTML and META tag ************************************************/
	
	fprintf(l_report_HTML2,"<HTML><HEAD><META http-equiv='Content-Type' content='text/html; charset=UTF-8'></META>\n");


	fprintf(fl_userlog,"Fetching Report Main Details :|%s|\n",l_rept_id);
	
	EXEC SQL SELECT * INTO :h_report_main_struct
				FROM REPORT_MAIN
				WHERE REPORT_ID=:l_rept_id;	

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Failed to Access REPORT_MAIN Table --- ORA ERROR :|%d|\n",sqlca.sqlcode);
	}

	/******* Report Type Check ********************************/
	
	strcpy(l_report_type,h_report_main_struct.report_type);
	strcpy(header_query,h_report_main_struct.header_query);

	printf("l_report_type :|%s|\n",l_report_type);
//fflush(fl_userlog);
	fprintf(fl_userlog,"Report_Type 4:|%s|\n",l_report_type);
	
	/************ For Dynamic Style Sheet Display *************************/

	fprintf(fl_userlog,"Before REPORT_SYSPARM ---- \n");

	EXEC SQL SELECT A.DEFAULT_SETTING,A.STYLE,A.STYLE_LT 
	         INTO :g_setting_flag,:g_style,:g_style_lt
		 FROM REPORT_SYSPARAM A, MT_COMMON_SYS_PARAMS B 
		 WHERE A.BANK_CODE=B.INSTALLED_AT_BANK;

        fprintf(fl_userlog,"After REPORT_SYSPARM Ora Error :|%d|\n",sqlca.sqlcode);

	fprintf(fl_userlog,"DEFAULT_SETTING :|%s|\n",g_setting_flag);

	/***********************************************************************/

	if(!strcmp(l_report_type,"L"))
	{			
		fprintf(l_report_HTML2,"%s\n",g_style_lt);
		strcpy(g_table_border,"1");
	}
	else
	{
		fprintf(l_report_HTML2,"%s\n",g_style);
		strcpy(g_table_border,"1");
	}
	
	/************************************************************/

	fprintf(l_report_HTML2,"</HEAD>\n");

	fprintf(l_report_HTML2,"<BODY>\n");
	
	/***** Image path *************************************/

   	fprintf(fl_userlog,"Before Image :- Compress Flag :|%s|\n",l_compress_flag);

	if(strlen(h_report_main_struct.image_path) > 0)
	{
		fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" class=\'heading\'><TR><TD WIDTH=\"20%%\" ALIGN=\"LEFT\"><IMG id=\"image\" SRC=\"%s\" ALIGN=\"LEFT\" HEIGHT=\"60\" WIDTH=\"150\"/></TD>\n",h_report_main_struct.image_path);
	}
	
	/******* Page Header **************************************************************************/
	
	if(strlen(h_report_main_struct.page_hdr_align) > 0)
	{
		if(strlen(h_report_main_struct.page_header) > 0 )
		{
			fprintf(l_report_HTML2,"<TD WIDTH=\"80%%\" ALIGN=\"%s\" class=\'heading\'><I>%s</I></TD></TR></TABLE>\n",h_report_main_struct.page_hdr_align,h_report_main_struct.page_header);

			g_line_count = 4;
		}
	}
	else
	{
		if(strlen(h_report_main_struct.page_header) > 0 )
		{
			fprintf(l_report_HTML2,"<TD WIDTH=\"50%%\" ALIGN=\"LEFT\" class=\'heading\'><I>%s</I></TD></TR></TABLE>\n",h_report_main_struct.page_header);

			g_line_count = 2;
		}

	}
	
	l_page_header = h_report_main_struct.page_hdr_brk;	
	while(l_page_header > 0 )
	{
		fprintf(l_report_HTML2,"</BR>\n");				
		l_page_header -- ;
		g_line_count++;
	}
	
	if(strcmp(l_report_type,"L"))
	{			
		fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
		fprintf(l_report_HTML2,"<TD ALIGN=\"LEFT\" class=\'ez4\'>Date : %s</TD>\n",l_start_date);
		fprintf(l_report_HTML2,"<TR></TABLE>\n");
		g_line_count++;
	}
	

	fprintf(l_report_HTML2,"</BR>\n");
	g_line_count++;
	

	/************** For Master Account, display all sub Accounts records  ***************/
	
	if(strlen(h_report_main_struct.mst_sub_query) > 0)
	{
		strcpy(l_master_query,h_report_main_struct.mst_sub_query);
	}
	else
	{
		strcat(l_master_query,"SELECT '");
		strcat(l_master_query,l_client);
		strcat(l_master_query,"' FROM DUAL");
	}

	EXEC SQL SELECT REPLACE((:l_master_query),'@PARAM1',:l_client) INTO :l_master_query FROM DUAL;
	
	if(sqlca.sqlcode < 0)
	{
		fprintf(fl_userlog,"Error : Critical Error in Master Sub Query ORA ERROR :|%d|\n",sqlca.sqlcode);
		APL_GOBACK_FAIL
	}

	/******************************************************************************************/

	fprintf(fl_userlog,"MASTER SUB QUERY 1:|%s|\n",l_master_query);
	//fflush(fl_userlog);
	EXEC SQL PREPARE MAST_HTML_QUERY FROM :l_master_query;
	EXEC SQL DECLARE htmlsubclient CURSOR FOR MAST_HTML_QUERY;
	EXEC SQL OPEN htmlsubclient;


   	if(sqlca.sqlcode < 0)
   	{
     	   fprintf(fl_userlog,"Error : Critical Error Occured in Master Sub Query ORA ERROR :|%d|\n",sqlca.sqlcode);
     	   APL_GOBACK_FAIL
   	}
	
	l_remove_count=0;
	l_client_fetch_count=0;
	
	no_of_table_count=h_report_main_struct.no_of_tables;
	fprintf(fl_userlog,"no_of_table_count :|%d|\n",no_of_table_count);
	printf("no_of_table_count :|%d|\n",no_of_table_count);
	//fflush(fl_userlog);
	for(;;)
	{
		EXEC SQL FETCH htmlsubclient INTO :l_sub_client;	

		printf("l_sub_client :|%s|\n",l_sub_client);
	//fflush(fl_userlog);
		if(sqlca.sqlcode == 1403)
		{
			fprintf(fl_userlog,"l_client_fetch_count :|%d|\n",l_client_fetch_count);
			fprintf(fl_userlog,"l_remove_count :|%d|\n",l_remove_count);
			fprintf(fl_userlog,"no_of_table_count :|%d|\n",no_of_table_count);
			
			if((l_client_fetch_count*no_of_table_count) == l_remove_count)
			{
				strcpy(l_remove_file_path,"rm -f ");
				strcat(l_remove_file_path,l_report_path);
				l_remove_flag = 1;
			}
			break;
		}
	
		if(sqlca.sqlcode < 0)
   		{
			fprintf(fl_userlog,"Error : Critical Error Occured in Master Sub Query ORA ERROR :|%d|\n",sqlca.sqlcode);
			APL_GOBACK_FAIL
   		}


		/********************* Record Count Query Part *****************************/
		
		EXEC SQL SELECT COUNT(TABLE_ID) INTO :l_table_numbers 
				 FROM REPORT_DETAILS
				 WHERE REPORT_ID=:l_rept_id;
		
		fprintf(fl_userlog,"AFTER COUNT(TABLE_ID) -- ORA Error 890:|%d|\n",sqlca.sqlcode);

		fprintf(fl_userlog,"l_table_numbers 890:|%d|\n",l_table_numbers);

		l_table_num = 1 ;

		l_record_count_flag = 0;

		l_record_count = 0;

		while(l_table_num <= l_table_numbers)
		{
			EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									RECORD_COUNT_QUERY,'@PARAM1',:l_sub_client),
													   '@PARAM2',:l_param2),
													   '@PARAM3',:l_param3),
													   '@PARAM4',:l_param4),
													   '@PARAM5',:l_param5),
													   '@PARAM6',:l_param6),
							REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									RECORD_COUNT_QUERY1,'@PARAM1',:l_sub_client),
													   '@PARAM2',:l_param2),
													   '@PARAM3',:l_param3),
													   '@PARAM4',:l_param4),
													   '@PARAM5',:l_param5),
													   '@PARAM6',:l_param6)
					  INTO :l_record_count_query,:l_record_count_query1
					  FROM REPORT_DETAILS 
					  WHERE REPORT_ID=:l_rept_id 
					  AND TABLE_ID = :l_table_num;

			fprintf(fl_userlog,"AFTER RECORD_COUNT_QUERY Select -- ORA Error :|%d|\n",sqlca.sqlcode);


			strcpy(l_record_count_query_final,l_record_count_query);
			strcat(l_record_count_query_final,l_record_count_query1);

			fprintf(fl_userlog,"l_record_count_query_final :|%s|\n",l_record_count_query_final);

			if(strlen(l_record_count_query_final) > 0)
			{

				EXEC SQL PREPARE HTML2_RECORD_COUNT FROM :l_record_count_query_final;

				EXEC SQL DECLARE html2_record_count_curr CURSOR FOR HTML2_RECORD_COUNT;

				EXEC SQL OPEN  html2_record_count_curr;

				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Error : Failed To OPEN html2_record_count_curr CURSOR -- ORA Error :|%d|\n",sqlca.sqlcode);
					l_record_count_flag = 0;
				}

				EXEC SQL FETCH html2_record_count_curr INTO :l_record_count;

				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Error : Failed To FETCH html2_record_count_curr CURSOR -- ORA Error :|%d|\n",sqlca.sqlcode);
					l_record_count_flag = 0;
				}

				EXEC SQL CLOSE html2_record_count_curr;

			}


			fprintf(fl_userlog,"l_record_count :|%d|\n",l_record_count);
			if(l_record_count > 0)
				l_record_count_flag = 1;

			l_table_num ++;

		}

 
	fprintf(fl_userlog,"RECORD COUNT FLAG :|%d|\n",l_record_count_flag);
	printf("RECORD COUNT FLAG :|%d|\n",l_record_count_flag);
//fflush(fl_userlog);
   /***********************************************************************************/

	if((l_record_count_flag == 1)||(strlen(l_record_count_query_final) == 0))
	{
    
	/******* Stored Procedure : SP_REPORT_HEADER ***************************************/

	strcpy(l_param1,l_sub_client);	
	
	printf("PARAMETER 1 ----- :|%s|\n",l_param1);
//fflush(fl_userlog);
	fprintf(fl_userlog,"l_rept_id:|%s|\n",l_rept_id);
	fprintf(fl_userlog,"l_param1:|%s|\t l_param2:|%s|\n",l_param1,l_param2);
	fprintf(fl_userlog,"l_param3:|%s|\t l_param4:|%s|\n",l_param3,l_param4);
	fprintf(fl_userlog,"l_param5:|%s|\t l_param6:|%s|\n",l_param5,l_param6);
		
	/******* Stored procedure for REPORT MAIN ******************************************/
	
	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_MAIN :|%s||%s|\n",l_rept_id,l_param1);		 
	printf("Calling Stored Procedure SP_REPORT_MAIN :|%s||%s|\n",l_rept_id,l_param1);		
	//fflush(fl_userlog);
	EXEC SQL CALL SP_REPORT_MAIN(:l_rept_id,:l_param1,:l_param2,
				:l_param3,:l_param4, :l_param5,
				:l_param6,:l_gen_query,:l_error_desc); 

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_MAIN ERR DESC :|%s|\n",l_error_desc);
	}


	/**************************************************************************/
	
	
	fprintf(fl_userlog,"GENERAL QUERY 4:|%s|\n",l_gen_query);
	printf("GENERAL QUERY 5:|%s|\n",l_gen_query);
	//fflush(fl_userlog);
	if(strlen(l_gen_query) > 0)
	{
	
	EXEC SQL PREPARE HTML_GEN FROM :l_gen_query;
	EXEC SQL DECLARE htmlgenquerycurr CURSOR FOR HTML_GEN;
	EXEC SQL OPEN htmlgenquerycurr;
	
	if(sqlca.sqlcode < 0)
	{
		fprintf(fl_userlog,"Error : Failed to OPEN HTMLgenquerycurr CURSOR ");
	}


	for(;;)
	{
		EXEC SQL FETCH htmlgenquerycurr
			INTO :l_general_param;

		
		if(sqlca.sqlcode == 1403)
		break;

		 if(sqlca.sqlcode < 0)
		 {
		    fprintf(fl_userlog,"Error : GENERAL QUERY Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
		    break;
		 }
		
		
		fprintf(fl_userlog,"l_general_param 4:|%s|\n",l_general_param);

		strcpy(l_general_parameter,l_general_param);
	
		/**** Split General Query and fetch the value in seperate parameter *******************/
		
		if (CO_SplitStr(l_general_parameter,CAPSEP,&l_param_num,&l_param_val) == APL_FAILURE)
		{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_general_parameter);
			 	APL_GOBACK_FAIL
		}

	
		fprintf(fl_userlog,"l_param_num:|%d|\n",l_param_num);	
		
		for(k=0;k<l_param_num;k++)
		{
			strcpy(l_param,l_param_val[k]);

			/********* Before Title of report ***************************************************/
			
			if(k == 0)
			{
				if(strlen(h_report_main_struct.before_title_align) > 0)
				{
					if(strlen(h_report_main_struct.before_title) > 0)
					{
						fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						fprintf(l_report_HTML2,"<TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'ez4\'>%s %s</TD>\n",h_report_main_struct.before_title_align,h_report_main_struct.before_title,l_param);
						fprintf(l_report_HTML2,"</TR></TABLE>\n");

						g_line_count++;
					}
				}
				else
				{
					if(strlen(h_report_main_struct.before_title) > 0)
					{
						fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR  >\n");
						fprintf(l_report_HTML2,"<TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'ez4\'>%s %s</TD>\n",h_report_main_struct.before_title,l_param);
						fprintf(l_report_HTML2,"</TR></TABLE>\n");

						g_line_count++;
					}

				}
	
				l_before_title = h_report_main_struct.before_title_brk;
				while(l_before_title > 0)
				{
					fprintf(l_report_HTML2,"</BR>\n");
					l_before_title --;
					g_line_count++;
				}
			}
			else if(k == 1)
			{
				if(strlen(h_report_main_struct.before_title1_align) > 0)
				{	
					if(strlen(h_report_main_struct.before_title1) > 0)
					{
						fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR >\n");
						fprintf(l_report_HTML2,"<TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'ez4\'>%s %s</TD>\n",h_report_main_struct.before_title1_align,h_report_main_struct.before_title1,l_param);
						fprintf(l_report_HTML2,"</TR></TABLE>\n");

						g_line_count++;
					}
				}
				else
				{
					if(strlen(h_report_main_struct.before_title1) > 0)
					{
						fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR >\n");
						fprintf(l_report_HTML2,"<TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'ez4\'>%s %s</TD>\n",h_report_main_struct.before_title1,l_param);
						fprintf(l_report_HTML2,"</TR></TABLE>\n");

						g_line_count++;
					}

				}
	
				l_before_title1 = h_report_main_struct.before_title1_brk;
				while(l_before_title1 > 0)
				{
					fprintf(l_report_HTML2,"</BR>\n");
					l_before_title1 --;
					g_line_count++;
				}
			}
			else if(k == 2)
			{
				if(strlen(h_report_main_struct.before_title2_align) > 0)
				{	
					if(strlen(h_report_main_struct.before_title2) > 0)
					{
						fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR >\n");
						fprintf(l_report_HTML2,"<TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'ez4\'>%s %s</TD>\n",h_report_main_struct.before_title2_align,h_report_main_struct.before_title2,l_param);
						fprintf(l_report_HTML2,"</TR></TABLE>\n");

						g_line_count++;
					}
				}
				else
				{
					if(strlen(h_report_main_struct.before_title2) > 0)
					{
						fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR >\n");
						fprintf(l_report_HTML2,"<TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'ez4\'>%s %s</TD>\n",h_report_main_struct.before_title2,l_param);
						fprintf(l_report_HTML2,"</TR></TABLE>\n");

						g_line_count++;
					}

				}
	
				l_before_title2 = h_report_main_struct.before_title2_brk;
				while(l_before_title2 > 0)
				{
					fprintf(l_report_HTML2,"</BR>\n");
					l_before_title2 --;
					g_line_count++;
				}
			}
			else if(k == 3)
			{
				if(strlen(h_report_main_struct.before_title3_align) > 0)
				{	
					if(strlen(h_report_main_struct.before_title3) > 0)
					{
						fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR >\n");
						fprintf(l_report_HTML2,"<TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'ez4\'>%s %s</TD>\n",h_report_main_struct.before_title3_align,h_report_main_struct.before_title3,l_param);
						fprintf(l_report_HTML2,"</TR></TABLE>\n");

						g_line_count++;
					}
				}
				else
				{
					if(strlen(h_report_main_struct.before_title3) > 0)
					{
						fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR >\n");
						fprintf(l_report_HTML2,"<TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'ez4\'>%s %s</TD>\n",h_report_main_struct.before_title3,l_param);
						fprintf(l_report_HTML2,"</TR></TABLE>\n");

						g_line_count++;
					}
				}
	
				l_before_title3 = h_report_main_struct.before_title3_brk;
				while(l_before_title3 > 0)
				{
					fprintf(l_report_HTML2,"</BR>\n");
					l_before_title3 --;

					g_line_count++;
				}
			}	

		}

	}
	EXEC SQL CLOSE htmlgenquerycurr;

	}

	/******* Dynamic Header Display ************************************************/

	fprintf(fl_userlog,"strlen(header_query) :|%d|\n",strlen(header_query));

	if(strlen(header_query) > 0)
	{

	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_HEADER :|%s||%s|\n",l_rept_id,l_param1);		
	printf("Calling Stored Procedure SP_REPORT_HEADER :|%s||%s|\n",l_rept_id,l_param1);		
	//fflush(fl_userlog);
	EXEC SQL CALL SP_REPORT_HEADER(:l_rept_id,:l_param1,:l_param2,
				:l_param3,:l_param4, :l_param5,
				:l_param6,:l_header_query,:l_header_query1,:l_error_desc);

	strcat(l_header_query,l_header_query1);

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_HEADER ERR DESC :|%s|\n",l_error_desc);
	}

	fprintf(fl_userlog,"HEADER QUERY :|%s|\n",l_header_query);

	EXEC SQL PREPARE HEADER_CURR FROM :l_header_query;

	EXEC SQL DECLARE header_curr CURSOR FOR HEADER_CURR;
	
	fprintf(fl_userlog,"After DECLARE header_curr Ora Error :|%d|\n",sqlca.sqlcode);

	EXEC SQL OPEN header_curr;

	EXEC SQL FETCH header_curr INTO :l_header_query_value;

	fprintf(fl_userlog,"After FETCH header_curr Ora Error :|%d|\n",sqlca.sqlcode);

	EXEC SQL CLOSE header_curr;

	fprintf(fl_userlog,"l_header_query_value :|%s|\n",l_header_query_value);
	
	if (CO_SplitStr(l_header_query_value,CAPSEP,&l_header_num,&l_header_val) == APL_FAILURE)
	{
		CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_header_query_value);
		APL_GOBACK_FAIL
	}

	fprintf(fl_userlog,"l_header_num :|%d|\n",l_header_num);
	if(l_header_num > 0)
	{
		for(i=0;i<l_header_num;i++)
		{
			if(i == 0)
			strcpy(l_header1,l_header_val[i]);
			else if(i == 1)
			strcpy(l_header2,l_header_val[i]);
			else if(i == 2)
			strcpy(l_header3,l_header_val[i]);
			else if(i == 3)
			strcpy(l_header4,l_header_val[i]);
			else if(i == 4)
			strcpy(l_header5,l_header_val[i]);
			else if(i == 5)
			strcpy(l_header6,l_header_val[i]);
			else if(i == 6)
			strcpy(l_header7,l_header_val[i]);
			else if(i == 7)
			strcpy(l_header8,l_header_val[i]);
			else if(i == 8)
			strcpy(l_header9,l_header_val[i]);
			else if(i == 9)
			strcpy(l_header10,l_header_val[i]);
			else if(i == 10)
			strcpy(l_header11,l_header_val[i]);
			else if(i == 11)
			strcpy(l_header12,l_header_val[i]);
			else if(i == 12)
			strcpy(l_header13,l_header_val[i]);
			else if(i == 13)
			strcpy(l_header14,l_header_val[i]);
			else if(i == 14)
			strcpy(l_header15,l_header_val[i]);
		}
	}

	/****** Stored Procedure : SP_REPORT_HEADER_DATA ***********************************/

	fprintf(fl_userlog,"l_header1 :|%s|\t l_header2 :|%s|\n",l_header1,l_header2);
	fprintf(fl_userlog,"l_header3 :|%s|\t l_header4 :|%s|\n",l_header3,l_header4);
	fprintf(fl_userlog,"l_header5 :|%s|\t l_header6 :|%s|\n",l_header5,l_header6);
	fprintf(fl_userlog,"l_header7 :|%s|\t l_header8 :|%s|\n",l_header7,l_header8);
	fprintf(fl_userlog,"l_header9 :|%s|\t l_header10 :|%s|\n",l_header9,l_header10);
	fprintf(fl_userlog,"l_header11 :|%s|\t l_header12 :|%s|\n",l_header11,l_header12);
	fprintf(fl_userlog,"l_header13 :|%s|\t l_header14 :|%s|\n",l_header13,l_header14);
	fprintf(fl_userlog,"l_header15 :|%s|\t\n",l_header15);

	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_HEADER_DATA :|%s|\n",l_rept_id);		
	printf("Calling Stored Procedure SP_REPORT_HEADER_DATA :|%s|\n",l_rept_id);		
	//fflush(fl_userlog);
	EXEC SQL CALL SP_REPORT_HEADER_DATA(:l_rept_id,:l_header1,
					    :l_header2,:l_header3,
					    :l_header4,:l_header5,
					    :l_header6,:l_header7,
					    :l_header8,:l_header9,
					    :l_header10,:l_header11,
					    :l_header12,:l_header13,
					    :l_header14,:l_header15,
					    :l_header_data,:l_error_desc); 

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_HEADER_DATA ERR DESC :|%s|\n",l_error_desc);
	}

	fprintf(fl_userlog,"HEADER DATA :|%s|\n",l_header_data);

	/************ Dynamic Formating Procedure ********************************************/
	
	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
	printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
	//fflush(fl_userlog);
	EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_header_data,:l_error_desc); 

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
	}

	fprintf(fl_userlog,"HEADER DATA After Formatting -- :|%s|\n",l_header_data);

	/*************************************************************************************/

	fprintf(fl_userlog,"strlen(l_header_data) :|%d|\n",strlen(l_header_data));
	
	if(strlen(l_header_data) > 0)
	{
		fprintf(fl_userlog,"Displaying Header Data ----- \n");

		fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\"><TR>\n");
		fprintf(l_report_HTML2,"<TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'headerdata\'>%s</TD>\n",h_report_main_struct.header_data_align,l_header_data);
		fprintf(l_report_HTML2,"</TR></TABLE>\n");
	}

	l_header_brk = h_report_main_struct.header_brk;
	while(l_header_brk > 0)
	{
		fprintf(l_report_HTML2,"</BR>\n");
		l_header_brk --;
		g_line_count++;
	}

	/**********************  End Of Dynamic Header Display   ***************************/

	}

	
	fprintf(l_report_HTML2,"</BR>\n");
	g_line_count++;
	
	/***** Report Title *************************************************************/

	if(strlen(h_report_main_struct.report_title_align) > 0)
	{	
		if(strlen(h_report_main_struct.report_title) > 0)	
		{
 			fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\"  class=\'ez4\'><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'ez4\'>%s</TD></TR></TABLE>\n",h_report_main_struct.report_title_align,h_report_main_struct.report_title);
			
			g_line_count++;
		}
	}
	else
	{
		if(strlen(h_report_main_struct.report_title) > 0)	
		{
 			fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\"  class=\'ez4\'><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'ez4\'>%s</TD></TR></TABLE>\n",h_report_main_struct.report_title);	
 
			g_line_count++;
		}

	}
	
	l_report_title = h_report_main_struct.report_title_brk;	
	while(l_report_title > 0)
	{
		fprintf(l_report_HTML2,"</BR>\n");
		l_report_title --;
		g_line_count++;
	}
	

	/******** After report title ****************************************************************/
	
	if(strlen(h_report_main_struct.after_title_align) > 0)
	{
		if(strlen(h_report_main_struct.after_title) > 0)
		{
			fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" class=\'ez4\'><TR ><TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'ez4\'>%s</TD></TR></TABLE>\n",h_report_main_struct.after_title_align,h_report_main_struct.after_title);

			g_line_count++;
		}
	}
	else
	{
		if(strlen(h_report_main_struct.after_title) > 0)
		{
			fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" class=\'ez4\'><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'ez4\'>%s</TD></TR></TABLE>\n",h_report_main_struct.after_title);

			g_line_count++;
		}

	}
	
	l_after_title = h_report_main_struct.after_title_brk;
	while(l_after_title > 0)
	{
		fprintf(l_report_HTML2,"</BR>\n");
		l_after_title --;
		g_line_count++;
	}
	

	l_table_id = 1;
	
	fprintf(fl_userlog,"NO OF TABLES :|%d|\n",h_report_main_struct.no_of_tables);
	printf("NO OF TABLES :|%d|\n",h_report_main_struct.no_of_tables);
	//fflush(fl_userlog);
	if(!strcmp(h_report_main_struct.report_type,"G"))/*added by siva.ganapathi for Enh. Log 121 on 2/20/2009 -- started*/
	{
		
	
			EXEC SQL SELECT * INTO :h_report_details_struct
							FROM REPORT_DETAILS 
							WHERE REPORT_ID=:l_rept_id
							AND TABLE_ID=:l_table_id;
			
		strcpy(l_group_query,h_report_details_struct.group_query);
		
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM1',:l_param1) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM2',:l_param2) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM3',:l_param3) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM4',:l_param4) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM5',:l_param5) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM6',:l_param6) INTO :l_group_query FROM DUAL;
					
		fprintf(fl_userlog,"GROUP QUERY :|%s|\n",l_group_query);
		
		EXEC SQL PREPARE HTML2_GROUP FROM :l_group_query;
		EXEC SQL DECLARE html2_group_g CURSOR FOR HTML2_GROUP;
		EXEC SQL OPEN html2_group_g;

		if(sqlca.sqlcode < 0)
		{
				fprintf(fl_userlog,"Error : Cursor Open xls1_group ORA ERROR :|%d|\n",sqlca.sqlcode);
		}

		for(;;)
		{
			
			EXEC SQL FETCH html2_group_g INTO :l_group_parameter;

			if((sqlca.sqlcode == 1403)||(l_group_break_flag == 1))
			break;

			for(l_table_id=1; l_table_id <= h_report_main_struct.no_of_tables; l_table_id++)
			{
				g_complex_parameter1 = 0.0;
				g_complex_parameter2 = 0.0;
				g_complex_parameter3 = 0.0;
				g_complex_parameter4 = 0.0;
				g_complex_parameter5 = 0.0;
				g_complex_parameter6 = 0.0;
				g_complex_parameter7 = 0.0;
				g_complex_parameter8 = 0.0;
				g_complex_parameter9 = 0.0;
				g_complex_parameter10 = 0.0;
				g_complex_parameter11 = 0.0;
				g_complex_parameter12 = 0.0;
				g_complex_parameter13 = 0.0;
				g_complex_parameter14 = 0.0;
				g_complex_parameter15 = 0.0;
				g_complex_parameter16 = 0.0;
				g_complex_parameter17 = 0.0;
				g_complex_parameter18 = 0.0;
				g_complex_parameter19 = 0.0;
				g_complex_parameter20 = 0.0;

				fprintf(fl_userlog,"l_rept_id:|%s|l_table_id:|%d|\n",l_rept_id,l_table_id);
				
				/******* Fetch the REPORT DETAILS for the perticular report ID and table ID ******************/
				
				
					EXEC SQL SELECT * INTO :h_report_details_struct
							FROM REPORT_DETAILS 
							WHERE REPORT_ID=:l_rept_id
							AND TABLE_ID=:l_table_id;
				
				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Failed to Access REPORT_DETAILS --- ORA ERROR :|%d|\n",sqlca.sqlcode);
				}
				
				/***** Table header ************************************************/

				fprintf(fl_userlog,"h_report_details_struct.table_hdr:|%s|\n",h_report_details_struct.table_hdr);
					
				if(strlen(h_report_details_struct.table_hdr_align) > 0)
				{
						if(strlen(h_report_details_struct.table_hdr) > 0)
						{
							fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" class=\'lableredbg\'><TR ><TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'lableredbg\'>%s</TD></TR></TABLE>\n",h_report_details_struct.table_hdr_align,h_report_details_struct.table_hdr);

							g_line_count++;
						}
				}
				else
				{
						if(strlen(h_report_details_struct.table_hdr) > 0)
						{
							fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" class=\'lableredbg\'><TR ><TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'lableredbg\'>%s</TD></TR></TABLE>\n",h_report_details_struct.table_hdr);

							g_line_count++;
						}
						
				}

				l_table_hdr = h_report_details_struct.table_hdr_brk;
				while(l_table_hdr > 0)
				{
						fprintf(l_report_HTML2,"</BR>\n");
						l_table_hdr --;
						g_line_count++;
				}

				fprintf(fl_userlog,"table id is:|%d|\n",l_table_id);

		if(l_table_id == 1)
		{		
							
						fprintf(fl_userlog,"table id is:|%d|\n",l_table_id);

						fprintf(fl_userlog,"h_report_details_struct.group_desc:|%s|\n",h_report_details_struct.group_desc);
						fprintf(fl_userlog,"h_report_details_struct.group_pos:|%s|\n",h_report_details_struct.group_pos);
					
						strcpy(l_group_pos,h_report_details_struct.group_pos);

						strcpy(l_group_desc,h_report_details_struct.group_desc);
				
						/********* Split Group Parameter ***********************************/
						
							fprintf(fl_userlog,"l_group_parameter:|%s|\n",l_group_parameter);
							
							if(CO_SplitStr(l_group_parameter,CAPSEP,&l_group_parameter_no,&l_group_parameter_value) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_parameter);
								APL_GOBACK_FAIL
							}
					
							fprintf(fl_userlog,"l_group_pos:|%s|\n",l_group_pos);
							
							if(CO_SplitStr(l_group_pos,COMASEP,&l_group_pos_no,&l_group_pos_value) == APL_FAILURE)
							{
						 
								CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_pos);
								APL_GOBACK_FAIL
							}

							fprintf(fl_userlog,"l_group_pos_no:|%d|l_group_parameter_no:|%d|\n",l_group_pos_no,l_group_parameter_no);
							
							if((l_group_pos_no > 0) && (l_group_parameter_no > 0)
								&& (l_group_pos_no == l_group_parameter_no))
							{	
								l_group_break_flag=0;
							
								for(i=0;i<l_group_pos_no;i++)
								{
									if(!strcmp(l_group_pos_value[i],"2"))
									{
										fprintf(fl_userlog,"l_param2:|%s|l_prev_param2:|%s|\n",l_param2,l_prev_param2);
										
										if(!strcmp(l_param2,l_prev_param2))
										{
											strcpy(l_param2,l_group_parameter_value[i]);
											strcpy(l_prev_param2,l_param2);
										}
										else
											l_group_break_flag=1;
									}
									else if(!strcmp(l_group_pos_value[i],"3"))
									{
										fprintf(fl_userlog,"l_param3:|%s|l_prev_param3:|%s|\n",l_param3,l_prev_param3);
										
										if(!strcmp(l_param3,l_prev_param3))
										{
											strcpy(l_param3,l_group_parameter_value[i]);
											strcpy(l_prev_param3,l_param3);
										}
										else
											l_group_break_flag=1;
									}
									else if(!strcmp(l_group_pos_value[i],"4"))
									{
										fprintf(fl_userlog,"l_param4:|%s|l_prev_param4:|%s|\n",l_param4,l_prev_param4);
										
										if(!strcmp(l_param4,l_prev_param4))
										{
											strcpy(l_param4,l_group_parameter_value[i]);
											strcpy(l_prev_param4,l_param4);
										}
										else
											l_group_break_flag=1;
									}
									else if(!strcmp(l_group_pos_value[i],"5"))
									{
										fprintf(fl_userlog,"l_param5:|%s|l_prev_param5:|%s|\n",l_param5,l_prev_param5);
										
										if(!strcmp(l_param5,l_prev_param5))
										{
											strcpy(l_param5,l_group_parameter_value[i]);
											strcpy(l_prev_param5,l_param5);
										}
										else
											l_group_break_flag=1;
									}
									else if(!strcmp(l_group_pos_value[i],"6"))
									{
										fprintf(fl_userlog,"l_param6:|%s|l_prev_param6:|%s|\n",l_param6,l_prev_param6);
										
										if(!strcmp(l_param6,l_prev_param6))
										{
											strcpy(l_param6,l_group_parameter_value[i]);
											strcpy(l_prev_param6,l_param6);
										}
										else
											l_group_break_flag=1;
									}
								}
							}
							else
							{
								fprintf(fl_userlog,"Error: Mismatch in Group Parameters :|%d||%d|",l_group_pos_no,l_group_parameter_no);
								break;
							}
							

						/*********************************************************************/
						fprintf(fl_userlog,"l_param1:|%s|\n",l_param1);
						fprintf(fl_userlog,"l_param2:|%s|\n",l_param2);
						fprintf(fl_userlog,"l_param3:|%s|\n",l_param3);
						fprintf(fl_userlog,"l_param4:|%s|\n",l_param4);
						fprintf(fl_userlog,"l_param5:|%s|\n",l_param5);
						fprintf(fl_userlog,"l_param6:|%s|\n",l_param6);

					/**** Stored procedure for REPORT DETAILS GROUPING **************************/
						
						fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL  :|%s|\n",l_rept_id);
						
						EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
								:l_param2,:l_param3,:l_param4,
								:l_param5,:l_param6,
								:l_table_query,:l_table_query1,:l_table_query2,
								:l_table_query3,:l_table_query4,:l_table_query5,
								:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
								:l_group_desc,:l_error_desc);

						strcpy(table_query,l_table_query);
						strcat(table_query," ");
						
						if(strlen(l_table_query1) > 0)
						{
							strcat(table_query,l_table_query1);
							strcat(table_query," ");
						}
						if(strlen(l_table_query2) > 0)
						{
							strcat(table_query,l_table_query2);
							strcat(table_query," ");
						}
						if(strlen(l_table_query3) > 0)
						{
							strcat(table_query,l_table_query3);
							strcat(table_query," ");
						}
						if(strlen(l_table_query4) > 0)
						{
							strcat(table_query,l_table_query4);
							strcat(table_query," ");
						}
						if(strlen(l_table_query5) > 0)
						{
							strcat(table_query,l_table_query5);
							strcat(table_query," ");
						}
						
						strcat(table_query,APL_NULL_STRING);
							
						fprintf(fl_userlog,"After Stored Procedure SP_REPORT_DETAIL ORA ERROR 7:|%d|\n",sqlca.sqlcode);
						
						if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
						{
							fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
						}
						
						//fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
						fprintf(fl_userlog,"l_criteria_query1:|%s|\n",l_criteria_query1);
						fprintf(fl_userlog,"l_criteria_query2:|%s|\n",l_criteria_query2);
						fprintf(fl_userlog,"l_criteria_query3:|%s|\n",l_criteria_query3);
						fprintf(fl_userlog,"l_group_desc:|%s|\n",l_group_desc);

						/********* Group Description ******************************************/
						
						if(strlen(l_group_desc) > 0)
						{
							fprintf(l_report_HTML2,"</BR>\n");
							fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR><TD WIDTH=\'100%%\' class=\'ez4\'>%s</TD></TR></TABLE>\n",l_group_desc);
							fprintf(l_report_HTML2,"</BR>\n");
						}
			
				/****** Before table ****************************************************/
						
						if(strlen(h_report_details_struct.before_table_align) > 0)
						{
							if(strlen(h_report_details_struct.before_table) > 0)
							{	
								fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\"ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.before_table_align,h_report_details_struct.before_table);
							}
						}
						else
						{
							if(strlen(h_report_details_struct.before_table) > 0)
							{	
								fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\"ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.before_table);
							}

						}	
						
						l_before_table = h_report_details_struct.before_table_brk;
						while(l_before_table > 0)
						{
							fprintf(l_report_HTML2,"</BR>\n");
							l_before_table --;
						}

				/******* Column Heading *****************************************************/
				
				/****** Multiple Column Level **************************************/

						strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
						strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
						strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
						
						fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);

						if(strlen(l_multiple_col_flag) > 0)
						{
							fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
							fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);

							if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
									&l_multiple_col_header_value) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
								 APL_GOBACK_FAIL
							}

							if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
									&l_multiple_colspan_sep_value) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
								 APL_GOBACK_FAIL
							}


							fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
							fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);

							fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" border=\'%s\' cellSpacing=\'0\' cellPadding=\'1\' >\n",g_table_border);

							if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
							{
								for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
								{
									for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
									{				

									if(int_a == int_b )
									{
									
									strcpy(l_level_header,l_multiple_col_header_value[int_a]);
									strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

									fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
									fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);

									if (CO_SplitStr(l_level_header,
											SEMISEP,
											&l_level_header_no,
											&l_level_header_value) == APL_FAILURE)
									{
										 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
										 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
										 APL_GOBACK_FAIL
									}

									if (CO_SplitStr(l_level_colspan,
											SEMISEP,
											&l_level_colspan_no,
											&l_level_colspan_value) == APL_FAILURE)
									{
										 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
										 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
										 APL_GOBACK_FAIL
									}

									fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
									fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);

									if(l_level_header_no == l_level_colspan_no)
									{

									fprintf(l_report_HTML2,"<TR>\n");
									for(int_aa=0;int_aa<l_level_header_no;int_aa++)
									{
										for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
										{
											if(int_aa == int_bb)
											{	
											
											strcpy(l_level_column,l_level_header_value[int_aa]);
											strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

											fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
											fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
											
											if(strlen(l_level_column) > 0)
												fprintf(l_report_HTML2,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >%s</TD> \n", l_level_col_span,l_level_column);
											else
												fprintf(l_report_HTML2,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >&nbsp;</TD> \n", l_level_col_span);


											}
										}
									}
									fprintf(l_report_HTML2,"</TR>\n");

									}/*** End Of Inner Condition check *****/

									}
									
															
									}/*** End Of 2st Main For Loop *******/

								}/*** End Of 1st Main For Loop *******/

							}/*** End Of Multiple col condition check *****/

							l_column_no=h_report_details_struct.no_of_columns;
							l_no_of_columns = h_report_details_struct.no_of_columns;
						}
						else
						{
						
						fprintf(fl_userlog,"COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
						
						/**** Split the Column Header and print ***************************/
						
						strcpy(l_column_header,h_report_details_struct.column_hdr);
						if (CO_SplitStr(l_column_header,COMASEP,&l_col_no,&l_col_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_header);
							 APL_GOBACK_FAIL
						}

						/***** Table Column Heading and its records  **********************/
						
						fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" border=\'%s\'  cellSpacing=\'0\' cellPadding=\'1\' >\n",g_table_border);

						fprintf(l_report_HTML2,"<TR>\n");
						for(i=0;i<l_col_no;i++)
						{
							strcpy(l_column_value,l_col_value[i]);

							fprintf(l_report_HTML2,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
						}
						fprintf(l_report_HTML2,"</TR>\n");

						l_column_no=h_report_details_struct.no_of_columns;
						l_no_of_columns = h_report_details_struct.no_of_columns;
						
						l_col_hdr = h_report_details_struct.col_hdr_brk;
						

						}/**** End Of Column Header Else Part ******************/
				
						EXEC SQL PREPARE HTML2_SUB1 FROM :table_query;	
						EXEC SQL DECLARE html2tablequery1_g CURSOR FOR HTML2_SUB1;
						EXEC SQL OPEN html2tablequery1_g;

						if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
						{
							fprintf(fl_userlog,"Error : Open Cursor html2tablequery1_g ORA ERROR :|%d|\n",sqlca.sqlcode);
						}
						

						l_fetch_count=0;

						for(;;)
						{
							EXEC SQL FETCH html2tablequery1_g
								INTO :l_table_parameter;

							if(sqlca.sqlcode == 1403)
							{
								fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
								if(l_fetch_count == 0)
								{
									fprintf(l_report_HTML2,"<TR>\n");
									fprintf(l_report_HTML2,"<TD WIDTH=\'100%%\' COLSPAN=\'%d\' class=\'ez4\'>NO RECORDS FOUND </TD>\n",l_column_no);
									fprintf(l_report_HTML2,"</TR>\n");

									l_remove_count ++;
								}
								break;
							}

							if(sqlca.sqlcode < 0)
							{
							   fprintf(fl_userlog,"Error : Fetch Cursor html2tablequery1_g --- ORA ERROR:|%d|\n",sqlca.sqlcode);
								break;
							}

							strcpy(l_column_parameter,l_table_parameter);
							
							/**** Split and fetch the column data into seperate variables ******/
						
							if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
							{
								CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
								APL_GOBACK_FAIL
							}

							/***** For Number Formatting ***************************************************/

							strcpy(l_format_col_pos,h_report_details_struct.format_col_pos);
							if (CO_SplitStr(l_format_col_pos,COMASEP,&l_format_col_no,&l_format_col_val) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_format_col_pos);
								 APL_GOBACK_FAIL
							}

							fprintf(l_report_HTML2,"<TR>\n");

							for(j=0;j<l_column_num;j++)
							{
								strcpy(l_column,l_column_val[j]);
								
								l_format_col_flag = 0;
								if(l_format_col_no > 0)
								{
									for (k=0;k<l_format_col_no;k++)
									{
										strcpy(l_format_col_value,l_format_col_val[k]);

										if(j==(atoi(l_format_col_value)-1))
											l_format_col_flag = 1;
									}

									if((strlen(l_column) > 0) && (strcmp(l_column," ")))
									{
										if(l_format_col_flag == 1)
										{
											EXEC SQL CALL SP_NUMBER_FORMATTING(:l_column,:l_error_desc);

											if(strlen(l_error_desc) > 0)
												fprintf(l_report_HTML2,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
											else
												fprintf(l_report_HTML2,"<TD class=\'record\' ALIGN=\"RIGHT\">%s</TD>\n",l_column);
										}
										else
										{
											fprintf(l_report_HTML2,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
										}
									}
									else
										 fprintf(l_report_HTML2,"<TD class=\'record\'  >&nbsp</TD>\n");

								}
								else
								{
									if((strlen(l_column) > 0) && (strcmp(l_column," ")))
										fprintf(l_report_HTML2,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
									else
										fprintf(l_report_HTML2,"<TD class=\'record\'  >&nbsp</TD>\n");
								}

							}
							fprintf(l_report_HTML2,"</TR>\n");


							/***********************************************************************************/


							l_fetch_count ++;

						}
						EXEC SQL CLOSE html2tablequery1_g;

						/********* For Criteria column value display **************************/
						
						if(h_report_details_struct.tot_criteria_cols > 0)
						{
							if(strlen(h_report_details_struct.criteria_col1_query) > 0)
							{
								EXEC SQL PREPARE HTML2_CR1 FROM :l_criteria_query1;
								EXEC SQL DECLARE HTML2_criteria1_g CURSOR FOR HTML2_CR1;
								EXEC SQL OPEN HTML2_criteria1_g;
								
								if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
								{
									fprintf(fl_userlog,"Error : Failed to Open HTML2_criteria1_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
								}

								for(;;)
								{
									EXEC SQL FETCH HTML2_criteria1_g INTO :l_criteria_value1;
								
									   if(sqlca.sqlcode == 1403)
									   break;

									   if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
									   {
											fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
											break;
									   }
								}
								EXEC SQL CLOSE HTML2_criteria1_g;

								/****** For Grand Total Of Criteria Value *********/
								
								
								if(strcmp(l_criteria_value1,APL_NULL_STRING))
								{
								EXEC SQL SELECT (:l_criteria_value1) INTO :l_criteria1_total FROM DUAL;
								
								l_grand_total1=l_grand_total1+l_criteria1_total;
								
								fprintf(fl_userlog,"l_grand_total1 :|%lf|\n",l_grand_total1);

								EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value1,:l_error_desc);

								fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);

								fprintf(l_report_HTML2,"<TR>\n");
								fprintf(l_report_HTML2,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col1_name,l_criteria_value1);
								fprintf(l_report_HTML2,"</TR>\n");
								}
							}

							if(strlen(h_report_details_struct.criteria_col2_query) > 0)
							{
								EXEC SQL PREPARE HTML2_CR2 FROM :l_criteria_query2;
								EXEC SQL DECLARE HTML2_criteria2_g CURSOR FOR HTML2_CR2;
								EXEC SQL OPEN HTML2_criteria2_g;
								
								if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
								{
									fprintf(fl_userlog,"Error : Failed to Open HTML2_criteria2_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
								}

								for(;;)
								{
								EXEC SQL FETCH HTML2_criteria2_g INTO :l_criteria_value2;
								
									   if(sqlca.sqlcode == 1403)
									   break;

									   if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
									   {
										fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
											break;
									   }
								}
								EXEC SQL CLOSE HTML2_criteria2_g;

								
								if(strcmp(l_criteria_value2,APL_NULL_STRING))
								{
								EXEC SQL SELECT (:l_criteria_value2) INTO :l_criteria2_total FROM DUAL;
								
								l_grand_total2=l_grand_total2+l_criteria2_total;
								
								fprintf(fl_userlog,"l_grand_total2 :|%lf|\n",l_grand_total2);

								EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value2,:l_error_desc);

								fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);

								fprintf(l_report_HTML2,"<TR>\n");
								fprintf(l_report_HTML2,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col2_name,l_criteria_value2);

								fprintf(l_report_HTML2,"</TR>\n");
								}
							}

							if(strlen(h_report_details_struct.criteria_col3_query) > 0)
							{
								EXEC SQL PREPARE HTML2_CR3 FROM :l_criteria_query3;
								EXEC SQL DECLARE HTML2_criteria3_g CURSOR FOR HTML2_CR3;
								EXEC SQL OPEN HTML2_criteria3_g;
								
								if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
								{
									fprintf(fl_userlog,"Error : Failed to Open HTML2_criteria3_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
								}

								for(;;)
								{
								EXEC SQL FETCH HTML2_criteria3_g INTO :l_criteria_value3;
								
									   if(sqlca.sqlcode == 1403)
									   break;

									   if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
									   {
										fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
											break;
									   }
								}
								EXEC SQL CLOSE HTML2_criteria3_g;
									
								
								if(strcmp(l_criteria_value3,APL_NULL_STRING))
								{
								EXEC SQL SELECT (:l_criteria_value3) INTO :l_criteria3_total FROM DUAL;
								
								l_grand_total3=l_grand_total3+l_criteria3_total;
								
								fprintf(fl_userlog,"l_grand_total3 :|%lf|\n",l_grand_total3);

								EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value2,:l_error_desc);

								fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);

								fprintf(l_report_HTML2,"<TR>\n");
								fprintf(l_report_HTML2,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col3_name,l_criteria_value3);
								fprintf(l_report_HTML2,"</TR>\n");
								}
							}
						}

					/******* Complex Criteria Part *********************************************/

						strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
						strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
						strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
						strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

						if(strlen(complex_criteria_query) > 0)
						{
						
						EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								:complex_criteria_query,
								'@PARAM1',:l_param1),
								'@PARAM2',:l_param2),
								'@PARAM3',:l_param3),
								'@PARAM4',:l_param4),
								'@PARAM5',:l_param5),
								'@PARAM6',:l_param6),
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								:complex_criteria_query1,
								'@PARAM1',:l_param1),
								'@PARAM2',:l_param2),
								'@PARAM3',:l_param3),
								'@PARAM4',:l_param4),
								'@PARAM5',:l_param5),
								'@PARAM6',:l_param6)
							INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;
					
						strcat(complex_criteria_query,complex_criteria_query1);
						
						fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);

						EXEC SQL PREPARE CMPX_CURR1 FROM :complex_criteria_query;

						EXEC SQL DECLARE complex_curr1_g CURSOR FOR CMPX_CURR1;

						fprintf(fl_userlog,"After DECLARE complex_curr1_g :|%d|\n",sqlca.sqlcode);

						EXEC SQL OPEN complex_curr1_g;

						EXEC SQL FETCH complex_curr1_g INTO :l_complex_parameter;

						fprintf(fl_userlog,"After FETCH complex_curr1_g :|%d|\n",sqlca.sqlcode);

						EXEC SQL CLOSE complex_curr1_g;

						fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);

						if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
						{
							CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
							APL_GOBACK_FAIL
						}
						
						fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);

						if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
						{
							CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
							APL_GOBACK_FAIL
						}


						fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
						fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);

						l_complex_break_flag = 0;
						
						if(l_complex_num == l_complex_pos_num)
						{

						fprintf(l_report_HTML2,"<TR>\n");

						for(i=0;i<l_column_num;i++)
						{
							for(j=0;j<l_complex_pos_num;j++)
							{

							strcpy(l_complex_pos_column,l_complex_pos_val[j]);

							if((i==0)&&(j==0))
							{
								if(strlen(complex_criteria_label) > 0)
								{
									fprintf(l_report_HTML2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" >%s</TD>\n",complex_criteria_label);
									l_complex_break_flag=1;
								}
								else
								fprintf(l_report_HTML2,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
							}

							if(i== (atoi(l_complex_pos_column)-1))
							{				  
							  strcpy(l_complex_column,l_complex_val[j]);

							  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);

							  l_complex_break_flag=1;
										
							  if(strlen(l_complex_column) > 0)
							  {
								  EXEC SQL CALL SP_NUMBER_FORMATTING(:l_complex_column,:l_error_desc);

								  if(strlen(l_error_desc) > 0)
									fprintf(l_report_HTML2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">%s</TD>\n",l_complex_column);
								  else
									fprintf(l_report_HTML2,"<TD class=\'lableredbg\' ALIGN=\"RIGHT\">%s</TD>\n",l_complex_column);
							  }
							  else
							  {
									fprintf(l_report_HTML2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">&nbsp;</TD>\n");
							  }
						
							  break;
							}
							else
							{
								 l_complex_break_flag = 0;
								 continue;
							} 

							}
								 
							if(i != 0)
							{
							  if(l_complex_break_flag != 1)
								 fprintf(l_report_HTML2,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
							}
						}

						}
						else
						{
							fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
						}

						fprintf(l_report_HTML2,"</TR>\n");

						}
						
						/*****************	End Of Complex Part     *********************/

						fprintf(l_report_HTML2,"</TABLE>\n");

				/****** After table ************************************/
				
						l_after_table = h_report_details_struct.after_table_brk;
						while(l_after_table > 0)
						{
							fprintf(l_report_HTML2,"</BR>\n");
							l_after_table --;
						}

						if(strlen(h_report_details_struct.after_table_align) > 0)
						{
							if(strlen(h_report_details_struct.after_table) > 0)
							{		
								fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.after_table_align,h_report_details_struct.after_table);
							}
						}
						else
						{
							if(strlen(h_report_details_struct.after_table) > 0)
							{	
								fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.after_table);
							}

						}	
			  

				/******** Table Footer note ************************************/
				
						l_table_footer = h_report_details_struct.table_footer_brk;
						if(l_table_footer > 0)
						{
							fprintf(l_report_HTML2,"</BR>\n");
							l_table_footer --;
						}
					
						if(strlen(h_report_details_struct.table_footer_align) > 0)
						{
							if(strlen(h_report_details_struct.table_footer) > 0)
							{
								fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",h_report_details_struct.table_footer_align,h_report_details_struct.table_footer);
							}
						}
						else
						{
							if(strlen(h_report_details_struct.table_footer) > 0)
							{
								fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",h_report_details_struct.table_footer);
							}

						}

						l_table = h_report_main_struct.table_brk;
						if(l_table > 0)
						{
							fprintf(l_report_HTML2,"</BR>\n");
							l_table --;
						}

						if(l_fetch_count > 0 )
						{
						
						for(m=0;m<l_complex_num;m++)
						{
							if(m == 0)
							{
								strcpy(l_complex_parameter1,l_complex_val[m]);
								g_complex_parameter1=g_complex_parameter1+atof(l_complex_parameter1);
							}
							else if(m == 1)
							{
								strcpy(l_complex_parameter2,l_complex_val[m]);
								g_complex_parameter2=g_complex_parameter2+atof(l_complex_parameter2);
							}
							else if(m == 2)
							{
								strcpy(l_complex_parameter3,l_complex_val[m]);
								g_complex_parameter3=g_complex_parameter3+atof(l_complex_parameter3);
							}
							else if(m == 3)
							{
								strcpy(l_complex_parameter4,l_complex_val[m]);
								g_complex_parameter4=g_complex_parameter4+atof(l_complex_parameter4);
							}
							else if(m == 4)
							{
								strcpy(l_complex_parameter5,l_complex_val[m]);
								g_complex_parameter5=g_complex_parameter5+atof(l_complex_parameter5);
							}
							else if(m == 5)
							{
								strcpy(l_complex_parameter6,l_complex_val[m]);
								g_complex_parameter6=g_complex_parameter6+atof(l_complex_parameter6);
							}
							else if(m == 6)
							{
								strcpy(l_complex_parameter7,l_complex_val[m]);
								g_complex_parameter7=g_complex_parameter7+atof(l_complex_parameter7);
							}
							else if(m == 7)
							{
								strcpy(l_complex_parameter8,l_complex_val[m]);
								g_complex_parameter8=g_complex_parameter8+atof(l_complex_parameter8);
							}
							else if(m == 8)
							{
								strcpy(l_complex_parameter9,l_complex_val[m]);
								g_complex_parameter9=g_complex_parameter9+atof(l_complex_parameter9);
							}
							else if(m == 9)
							{
									strcpy(l_complex_parameter10,l_complex_val[m]);
									g_complex_parameter10=g_complex_parameter10+atof(l_complex_parameter10);
							}
							else if(m == 10)
							{
								strcpy(l_complex_parameter11,l_complex_val[m]);
								g_complex_parameter11=g_complex_parameter11+atof(l_complex_parameter11);
							}
							else if(m == 11)
							{
								strcpy(l_complex_parameter12,l_complex_val[m]);			
								g_complex_parameter12=g_complex_parameter12+atof(l_complex_parameter12);
							}
							else if(m == 12)
							{
								strcpy(l_complex_parameter13,l_complex_val[m]);
								g_complex_parameter13=g_complex_parameter13+atof(l_complex_parameter13);
							}
							else if(m == 13)
							{
								strcpy(l_complex_parameter14,l_complex_val[m]);
								g_complex_parameter14=g_complex_parameter14+atof(l_complex_parameter14);
							}
							else if(m == 14)
							{
								strcpy(l_complex_parameter15,l_complex_val[m]);
								g_complex_parameter15=g_complex_parameter15+atof(l_complex_parameter15);
							}
							else if(m == 15)
							{
								strcpy(l_complex_parameter16,l_complex_val[m]);
								g_complex_parameter16=g_complex_parameter16+atof(l_complex_parameter16);
							}
							else if(m == 16)
							{
								strcpy(l_complex_parameter17,l_complex_val[m]);
								g_complex_parameter17=g_complex_parameter17+atof(l_complex_parameter17);
							}
							else if(m == 17)
							{
								strcpy(l_complex_parameter18,l_complex_val[m]);
								g_complex_parameter18=g_complex_parameter18+atof(l_complex_parameter18);
							}
							else if(m == 18)
							{
								strcpy(l_complex_parameter19,l_complex_val[m]);
								g_complex_parameter19=g_complex_parameter19+atof(l_complex_parameter19);
							}
							else if(m == 19)
							{
								strcpy(l_complex_parameter20,l_complex_val[m]);
								g_complex_parameter20=g_complex_parameter20+atof(l_complex_parameter20);
							}
						}

						}/*** End Of Fetch Count check ******/
	
		}
		else
		{
				
				/**** Stored procedure for REPORT DETAILS ***********************************************/
					
					fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID 25:|%s|\n",l_rept_id);
					printf("Calling Stored Procedure SP_REPORT_DETAIL for Report ID 26:|%s|\n",l_rept_id);
					//fflush(fl_userlog);
					EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
							:l_param2,:l_param3,:l_param4,
							:l_param5,:l_param6,
							:l_table_query,:l_table_query1,:l_table_query2,
							:l_table_query3,:l_table_query4,:l_table_query5,
							:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
							:l_group_desc,:l_error_desc);

					strcpy(table_query,l_table_query);
					strcat(table_query," ");
					
					if(strlen(l_table_query1) > 0)
					{
						strcat(table_query,l_table_query1);
						strcat(table_query," ");
					}
					if(strlen(l_table_query2) > 0)
					{
						strcat(table_query,l_table_query2);
						strcat(table_query," ");
					}
					if(strlen(l_table_query3) > 0)
					{
						strcat(table_query,l_table_query3);
						strcat(table_query," ");
					}
					if(strlen(l_table_query4) > 0)
					{
						strcat(table_query,l_table_query4);
						strcat(table_query," ");
					}
					if(strlen(l_table_query5) > 0)
					{
						strcat(table_query,l_table_query5);
						strcat(table_query," ");
					}
					
					strcat(table_query,APL_NULL_STRING);
						
					fprintf(fl_userlog," Inside Else Stored Procedure SP_REPORT_DETAIL ORA ERROR :|%d|\n",sqlca.sqlcode);
					
					if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					{
						fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
					}
					
					//fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
					fprintf(fl_userlog,"l_criteria_query1:|%s|\n",l_criteria_query1);
					fprintf(fl_userlog,"l_criteria_query2:|%s|\n",l_criteria_query2);
					fprintf(fl_userlog,"l_criteria_query3:|%s|\n",l_criteria_query3);

				/****** Before table ***********************************************************************/
					
					if(strlen(h_report_details_struct.before_table_align) > 0)
					{
						if(strlen(h_report_details_struct.before_table) > 0)
						{	
							fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\"ALIGN=\"%s\"  class=\'beforetable\'>%s</TD></TR></TABLE>\n",h_report_details_struct.before_table_align,h_report_details_struct.before_table);

							g_line_count++;
						}
					}
					else
					{
						if(strlen(h_report_details_struct.before_table) > 0)
						{	
							fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\"ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD></TR></TABLE>\n",h_report_details_struct.before_table);

							g_line_count++;
						}

					}	
					
					l_before_table = h_report_details_struct.before_table_brk;
					while(l_before_table > 0)
					{
						fprintf(l_report_HTML2,"</BR>\n");
						l_before_table --;
						g_line_count++;
					}

				/******* Column Heading ******************************************************************/
				
				/****** Multiple Column Level **************************************/

				strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
				strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
				strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
					
				fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);

				if(strlen(l_multiple_col_flag) > 0)
				{
						fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
						fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);

						if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
								&l_multiple_col_header_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
							 APL_GOBACK_FAIL
						}

						if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
								&l_multiple_colspan_sep_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
							 APL_GOBACK_FAIL
						}


						fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
						fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);

						fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" border=\'%s\' cellSpacing=\'0\' cellPadding=\'1\'>\n",g_table_border);

						if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
						{
							for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
							{
								for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
								{
							
								if(int_a == int_b )
								{
								
								strcpy(l_level_header,l_multiple_col_header_value[int_a]);
								strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

								fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
								fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);

								if (CO_SplitStr(l_level_header,
										SEMISEP,
										&l_level_header_no,
										&l_level_header_value) == APL_FAILURE)
								{
									 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
									 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
									 APL_GOBACK_FAIL
								}

								if (CO_SplitStr(l_level_colspan,
										SEMISEP,
										&l_level_colspan_no,
										&l_level_colspan_value) == APL_FAILURE)
								{
									 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
									 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
									 APL_GOBACK_FAIL
								}

								fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
								fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);

								if(l_level_header_no == l_level_colspan_no)
								{

								fprintf(l_report_HTML2,"<TR>\n");
								for(int_aa=0;int_aa<l_level_header_no;int_aa++)
								{
									for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
									{
										if(int_aa == int_bb)
										{	
										
										strcpy(l_level_column,l_level_header_value[int_aa]);
										strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

										fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
										fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
										
										if(strlen(l_level_column) > 0)
											fprintf(l_report_HTML2,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >%s</TD> \n", l_level_col_span,l_level_column);
										else
											fprintf(l_report_HTML2,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >&nbsp;</TD> \n", l_level_col_span);


										}
									}
								}
								fprintf(l_report_HTML2,"</TR>\n");

								}/*** End Of Inner Condition check *****/

								}
								
														
								}/*** End Of 2st Main For Loop *******/

							}/*** End Of 1st Main For Loop *******/

						}/*** End Of Multiple col condition check *****/

						l_column_no=h_report_details_struct.no_of_columns;
						l_no_of_columns = h_report_details_struct.no_of_columns;

				}
				else
				{
					
					fprintf(fl_userlog,"COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
					printf("COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
					//fflush(fl_userlog);
					/**** Split the Column Header and print *****************/
					
					strcpy(l_column_header,h_report_details_struct.column_hdr);
					if (CO_SplitStr(l_column_header,COMASEP,&l_col_no,&l_col_value) == APL_FAILURE)
					{
						 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_header);
						 APL_GOBACK_FAIL
					}

					/***** Table Column Heading and its records  *********/

					fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" border=\'%s\'  cellSpacing=\'0\' cellPadding=\'1\' >\n",g_table_border);

					fprintf(l_report_HTML2,"<TR >\n");
					for(i=0;i<l_col_no;i++)
					{
						strcpy(l_column_value,l_col_value[i]);

						fprintf(l_report_HTML2,"<TD class=\'ez4\'  >%s</TD>\n",l_column_value);
					}
					fprintf(l_report_HTML2,"</TR>\n");

					
					l_column_no=h_report_details_struct.no_of_columns;
					l_no_of_columns = h_report_details_struct.no_of_columns;
					
					l_col_hdr = h_report_details_struct.col_hdr_brk;
					
				}
				
					EXEC SQL PREPARE HTML2_SUB2 FROM :table_query;	
					EXEC SQL DECLARE html2tablequery2_g CURSOR FOR HTML2_SUB2;
					EXEC SQL OPEN html2tablequery2_g;

					if(sqlca.sqlcode < 0)
					{
						fprintf(fl_userlog,"Error : Open Cursor html2tablequery2_g ORA ERROR :|%d|\n",sqlca.sqlcode);
					}

					l_fetch_count=0;

					for(;;)
					{
						EXEC SQL FETCH html2tablequery2_g
							INTO :l_table_parameter;

						if(sqlca.sqlcode == 1403)
						{
							fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
							if(l_fetch_count == 0)
							{
								fprintf(l_report_HTML2,"<TR>\n");
								fprintf(l_report_HTML2,"<TD WIDTH=\'100%%\' COLSPAN=\'%d\' class=\'ez4\'>NO RECORDS FOUND </TD>\n",l_column_no);
								fprintf(l_report_HTML2,"</TR>\n");
									
								l_remove_count ++;
								g_line_count++;
							}
							break;
						}

						if(sqlca.sqlcode < 0)
						{
						   fprintf(fl_userlog,"Error : Fetch Cursor html2tablequery2_g --- ORA ERROR:|%d|\n",sqlca.sqlcode);
						   break;
						}


						strcpy(l_column_parameter,l_table_parameter);
						
						/******* Split the string and fetch the column data into seperate variables *********/
					
						if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
						{
							CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
							APL_GOBACK_FAIL
						}

						/***** For Number Formatting ***************************************************/

						strcpy(l_format_col_pos,h_report_details_struct.format_col_pos);
						if (CO_SplitStr(l_format_col_pos,COMASEP,&l_format_col_no,&l_format_col_val) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_format_col_pos);
							 APL_GOBACK_FAIL
						}

						fprintf(l_report_HTML2,"<TR>\n");

						for(j=0;j<l_column_num;j++)
						{
							strcpy(l_column,l_column_val[j]);
							
							l_format_col_flag = 0;
							if(l_format_col_no > 0)
							{
								for (k=0;k<l_format_col_no;k++)
								{
									strcpy(l_format_col_value,l_format_col_val[k]);

									if(j==(atoi(l_format_col_value)-1))
										l_format_col_flag = 1;
								}

								if((strlen(l_column) > 0) && (strcmp(l_column," ")))
								{
									if(l_format_col_flag == 1)
									{
										EXEC SQL CALL SP_NUMBER_FORMATTING(:l_column,:l_error_desc);

										if(strlen(l_error_desc) > 0)
											fprintf(l_report_HTML2,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
										else
											fprintf(l_report_HTML2,"<TD class=\'record\' ALIGN=\"RIGHT\">%s</TD>\n",l_column);
									}
									else
									{
										fprintf(l_report_HTML2,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
									}
								}
								else
									 fprintf(l_report_HTML2,"<TD class=\'record\'  >&nbsp</TD>\n");

							}
							else
							{
								if((strlen(l_column) > 0) && (strcmp(l_column," ")))
									fprintf(l_report_HTML2,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
								else
									fprintf(l_report_HTML2,"<TD class=\'record\'  >&nbsp</TD>\n");
							}

						}
						fprintf(l_report_HTML2,"</TR>\n");


						/***********************************************************************************/

						l_fetch_count ++;

					}
					EXEC SQL CLOSE html2tablequery2_g;

				/********* For Criteria column value display********************************************/
					
					if(h_report_details_struct.tot_criteria_cols > 0)
					{
						if(strlen(h_report_details_struct.criteria_col1_query) > 0)
						{
							EXEC SQL PREPARE CR1 FROM :l_criteria_query1;
							EXEC SQL DECLARE criteria1_g CURSOR FOR CR1;
							EXEC SQL OPEN criteria1_g;
							
							if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
							{
								fprintf(fl_userlog,"Error : Failed to Open criteria1_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
							}

							for(;;)
							{
							EXEC SQL FETCH criteria1_g INTO :l_criteria_value1;
							
								   if(sqlca.sqlcode == 1403)
								   break;

								   if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
								   {
									fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
										break;
								   }
							}
							EXEC SQL CLOSE criteria1_g;

							if(strcmp(l_criteria_value1,APL_NULL_STRING))
							{
							EXEC SQL SELECT (:l_criteria_value1) INTO :l_criteria1_total FROM DUAL;
							
							l_grand_total1=l_grand_total1+l_criteria1_total;

							fprintf(fl_userlog,"l_grand_total1 :|%lf|\n",l_grand_total1);

							EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value1,:l_error_desc);

							fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);

							fprintf(l_report_HTML2,"<TR>\n");
							fprintf(l_report_HTML2,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col1_name,l_criteria_value1);
							fprintf(l_report_HTML2,"</TR>\n");

							g_line_count++;

							}
						}

						if(strlen(h_report_details_struct.criteria_col2_query) > 0)
						{
							EXEC SQL PREPARE CR2 FROM :l_criteria_query2;
							EXEC SQL DECLARE criteria2_g CURSOR FOR CR2;
							EXEC SQL OPEN criteria2_g;
							
							if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
							{
								fprintf(fl_userlog,"Error : Failed to Open criteria2_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
							}

							for(;;)
							{
							EXEC SQL FETCH criteria2_g INTO :l_criteria_value2;
							
								   if(sqlca.sqlcode == 1403)
								   break;

								   if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
								   {
										fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
										break;
								   }
							}
							EXEC SQL CLOSE criteria2_g;
							
							
							if(strcmp(l_criteria_value2,APL_NULL_STRING))
							{
							EXEC SQL SELECT (:l_criteria_value2) INTO :l_criteria2_total FROM DUAL;
							
							l_grand_total2=l_grand_total2+l_criteria2_total;
							
							fprintf(fl_userlog,"l_grand_total2 :|%lf|\n",l_grand_total2);

							EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value2,:l_error_desc);

							fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);

							fprintf(l_report_HTML2,"<TR>\n");
							fprintf(l_report_HTML2,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col2_name,l_criteria_value2);

							fprintf(l_report_HTML2,"</TR>\n");

							g_line_count++;

							}
						}

						if(strlen(h_report_details_struct.criteria_col3_query) > 0)
						{
							EXEC SQL PREPARE CR3 FROM :l_criteria_query3;
							EXEC SQL DECLARE criteria3_g CURSOR FOR CR3;
							EXEC SQL OPEN criteria3_g;
							
							if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
							{
								fprintf(fl_userlog,"Error : Failed to Open criteria3_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
							}

							for(;;)
							{
							EXEC SQL FETCH criteria3_g INTO :l_criteria_value3;
							
								   if(sqlca.sqlcode == 1403)
								   break;

								   if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
								   {
										fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
										break;
								   }
							}
							EXEC SQL CLOSE criteria3_g;
							
							
							if(strcmp(l_criteria_value3,APL_NULL_STRING))
							{
							EXEC SQL SELECT (:l_criteria_value3) INTO :l_criteria3_total FROM DUAL;
						
							l_grand_total3=l_grand_total3+l_criteria3_total;
							
							fprintf(fl_userlog,"l_grand_total3 :|%lf|\n",l_grand_total3);

							EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value3,:l_error_desc);

							fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);

							fprintf(l_report_HTML2,"<TR>\n");
							fprintf(l_report_HTML2,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col3_name,l_criteria_value3);
							fprintf(l_report_HTML2,"</TR>\n");

							g_line_count++;

							}
						}
					}

					/******* Complex Criteria Part *********************************************/


					strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
					strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
					strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
					strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

					fprintf(fl_userlog,"Before Complex Part -- l_fetch_count 5:|%d|\n",l_fetch_count);

					if(l_fetch_count > 0)
					{

					if(strlen(complex_criteria_query) > 0)
					{
					
					EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
							:complex_criteria_query,
							'@PARAM1',:l_param1),
							'@PARAM2',:l_param2),
							'@PARAM3',:l_param3),
							'@PARAM4',:l_param4),
							'@PARAM5',:l_param5),
							'@PARAM6',:l_param6),
							REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
							:complex_criteria_query1,
							'@PARAM1',:l_param1),
							'@PARAM2',:l_param2),
							'@PARAM3',:l_param3),
							'@PARAM4',:l_param4),
							'@PARAM5',:l_param5),
							'@PARAM6',:l_param6)
						INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;
					
					strcat(complex_criteria_query,complex_criteria_query1);

					fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);

					EXEC SQL PREPARE CMPX_CURR FROM :complex_criteria_query;

					EXEC SQL DECLARE complex_curr_g CURSOR FOR CMPX_CURR;

					fprintf(fl_userlog,"After DECLARE complex_curr_g :|%d|\n",sqlca.sqlcode);

					EXEC SQL OPEN complex_curr_g;

					EXEC SQL FETCH complex_curr_g INTO :l_complex_parameter;

					fprintf(fl_userlog,"After FETCH complex_curr_g :|%d|\n",sqlca.sqlcode);

					EXEC SQL CLOSE complex_curr_g;

					fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);

					if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
					{
						CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
						APL_GOBACK_FAIL
					}
					
					fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);

					if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
					{
						CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
						APL_GOBACK_FAIL
					}


					fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
					fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);

					l_complex_break_flag = 0;

					
					if(l_complex_num == l_complex_pos_num)
					{

					fprintf(l_report_HTML2,"<TR>\n");

					for(i=0;i<l_column_num;i++)
					{
						for(j=0;j<l_complex_pos_num;j++)
						{

						strcpy(l_complex_pos_column,l_complex_pos_val[j]);

						if((i==0)&&(j==0))
						{
							if(strlen(complex_criteria_label) > 0)
							{
								fprintf(l_report_HTML2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" >%s</TD>\n",complex_criteria_label);
								l_complex_break_flag=1;
							}
							else
								fprintf(l_report_HTML2,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
						}

						if(i== (atoi(l_complex_pos_column)-1))
						{				  
						  strcpy(l_complex_column,l_complex_val[j]);

						  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);

						  l_complex_break_flag=1;
						  
						  if(strlen(l_complex_column) > 0)
						  {
							  EXEC SQL CALL SP_NUMBER_FORMATTING(:l_complex_column,:l_error_desc);

							  if(strlen(l_error_desc) > 0)
								fprintf(l_report_HTML2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">%s</TD>\n",l_complex_column);
							  else
								fprintf(l_report_HTML2,"<TD class=\'lableredbg\' ALIGN=\"RIGHT\">%s</TD>\n",l_complex_column);
						  }
						  else
						  {
								fprintf(l_report_HTML2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">&nbsp;</TD>\n");
						  }
						
						  break;
						}
						else
						{
							 l_complex_break_flag = 0;
							 continue;
						} 

						}
							 
						if(i != 0)
						{
						  if(l_complex_break_flag != 1)
							 fprintf(l_report_HTML2,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
						}
					}

					}
					else
					{
						fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
					}

					fprintf(l_report_HTML2,"</TR>\n");

					}

					}
					else
					{			
						fprintf(fl_userlog," No Records Found -- So No Need To Display Criteria \n");
					}
					

					/***************************************************************************/
							
					fprintf(l_report_HTML2,"</TABLE>\n");

					/****** After table ********************************************************/
					
					l_after_table = h_report_details_struct.after_table_brk;
					while(l_after_table > 0)
					{
						fprintf(l_report_HTML2,"</BR>\n");
						l_after_table --;
						g_line_count++;
					}

					if(strlen(h_report_details_struct.after_table_align) > 0)
					{
						if(strlen(h_report_details_struct.after_table) > 0)
						{	
							fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'beforetable\'>%s</TD></TR></TABLE>\n",h_report_details_struct.after_table_align,h_report_details_struct.after_table);

							g_line_count++;
						}
					}
					else
					{
						if(strlen(h_report_details_struct.after_table) > 0)
						{	
							fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD></TR></TABLE>\n",h_report_details_struct.after_table);

							g_line_count++;
						}

					}	
			  
					/************ Table Footer note *************************************/
				
					l_table_footer = h_report_details_struct.table_footer_brk;
					if(l_table_footer > 0)
					{
						fprintf(l_report_HTML2,"</BR>\n");
						l_table_footer --;
						g_line_count++;
					}
					
					if(strlen(h_report_details_struct.table_footer_align) > 0)
					{
						if(strlen(h_report_details_struct.table_footer) > 0)
						{
							fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'lableredbg\'>%s</TD></TR></TABLE>\n",h_report_details_struct.table_footer_align,h_report_details_struct.table_footer);

							g_line_count++;
						}
					}
					else
					{
						if(strlen(h_report_details_struct.table_footer) > 0)
						{
							fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'lableredbg\'>%s</TD></TR></TABLE>\n",h_report_details_struct.table_footer);

							g_line_count++;
						}

					}

					l_table = h_report_main_struct.table_brk;
					if(l_table > 0)
					{
						fprintf(l_report_HTML2,"</BR>\n");
						l_table --;
						g_line_count++;
					}

					if( l_fetch_count > 0 )
					{
						for(m=0;m<l_complex_num;m++)
						{
							if(m == 0)
							{
								strcpy(l_complex_parameter1,l_complex_val[m]);
								g_complex_parameter1=atof(l_complex_parameter1);
							}
							else if(m == 1)
							{
								strcpy(l_complex_parameter2,l_complex_val[m]);
								g_complex_parameter2=atof(l_complex_parameter2);
							}
							else if(m == 2)
							{
								strcpy(l_complex_parameter3,l_complex_val[m]);
								g_complex_parameter3=atof(l_complex_parameter3);
							}
							else if(m == 3)
							{
								strcpy(l_complex_parameter4,l_complex_val[m]);
								g_complex_parameter4=atof(l_complex_parameter4);
							}
							else if(m == 4)
							{
								strcpy(l_complex_parameter5,l_complex_val[m]);
								g_complex_parameter5=atof(l_complex_parameter5);
							}
							else if(m == 5)
							{
								strcpy(l_complex_parameter6,l_complex_val[m]);
								g_complex_parameter6=atof(l_complex_parameter6);
							}
							else if(m == 6)
							{
								strcpy(l_complex_parameter7,l_complex_val[m]);
								g_complex_parameter7=atof(l_complex_parameter7);
							}
							else if(m == 7)
							{
								strcpy(l_complex_parameter8,l_complex_val[m]);
								g_complex_parameter8=atof(l_complex_parameter8);
							}
							else if(m == 8)
							{
								strcpy(l_complex_parameter9,l_complex_val[m]);
								g_complex_parameter9=atof(l_complex_parameter9);
							}
							else if(m == 9)
							{
								strcpy(l_complex_parameter10,l_complex_val[m]);
								g_complex_parameter10=atof(l_complex_parameter10);
							}
							else if(m == 10)
							{
								strcpy(l_complex_parameter11,l_complex_val[m]);
								g_complex_parameter11=atof(l_complex_parameter11);
							}
							else if(m == 11)
							{
								strcpy(l_complex_parameter12,l_complex_val[m]);			
								g_complex_parameter12=atof(l_complex_parameter12);
							}
							else if(m == 12)
							{
								strcpy(l_complex_parameter13,l_complex_val[m]);
								g_complex_parameter13=atof(l_complex_parameter13);
							}
							else if(m == 13)
							{
								strcpy(l_complex_parameter14,l_complex_val[m]);
								g_complex_parameter14=atof(l_complex_parameter14);
							}
							else if(m == 14)
							{
								strcpy(l_complex_parameter15,l_complex_val[m]);
								g_complex_parameter15=atof(l_complex_parameter15);
							}
							else if(m == 15)
							{
								strcpy(l_complex_parameter16,l_complex_val[m]);
								g_complex_parameter16=atof(l_complex_parameter16);
							}
							else if(m == 16)
							{
								strcpy(l_complex_parameter17,l_complex_val[m]);
								g_complex_parameter17=atof(l_complex_parameter17);
							}
							else if(m == 17)
							{
								strcpy(l_complex_parameter18,l_complex_val[m]);
								g_complex_parameter18=atof(l_complex_parameter18);
							}
							else if(m == 18)
							{
								strcpy(l_complex_parameter19,l_complex_val[m]);
								g_complex_parameter19=atof(l_complex_parameter19);
							}
							else if(m == 19)
							{
								strcpy(l_complex_parameter20,l_complex_val[m]);
								g_complex_parameter20=atof(l_complex_parameter20);
							}

						}/*** End of Complex For Loop ***/

					}/*** End Of Fetch Count Check ****/

		}/******* End Of  Else Block **********/				


	/*************** Complex Criteria Individual  *********************/
				
				if(l_fetch_count > 0 )
				{
					fprintf(fl_userlog,"g_complex_parameter1 :|%lf|\tg_complex_parameter2 :|%lf|\n",g_complex_parameter1,g_complex_parameter2);
					fprintf(fl_userlog,"g_complex_parameter3 :|%lf|\tg_complex_parameter4 :|%lf|\n",g_complex_parameter3,g_complex_parameter4);
					fprintf(fl_userlog,"g_complex_parameter5 :|%lf|\tg_complex_parameter6 :|%lf|\n",g_complex_parameter5,g_complex_parameter6);
					fprintf(fl_userlog,"g_complex_parameter7 :|%lf|\tg_complex_parameter8 :|%lf|\n",g_complex_parameter7,g_complex_parameter8);
					fprintf(fl_userlog,"g_complex_parameter9 :|%lf|\tg_complex_parameter10 :|%lf|\n",g_complex_parameter9,g_complex_parameter10);
					fprintf(fl_userlog,"g_complex_parameter11 :|%lf|\tg_complex_parameter12 :|%lf|\n",g_complex_parameter11,g_complex_parameter12);
					fprintf(fl_userlog,"g_complex_parameter13 :|%lf|\tg_complex_parameter14 :|%lf|\n",g_complex_parameter13,g_complex_parameter14);
					fprintf(fl_userlog,"g_complex_parameter15 :|%lf|\tg_complex_parameter16 :|%lf|\n",g_complex_parameter15,g_complex_parameter16);
					fprintf(fl_userlog,"g_complex_parameter17 :|%lf|\tg_complex_parameter18 :|%lf|\n",g_complex_parameter17,g_complex_parameter18);
					fprintf(fl_userlog,"g_complex_parameter19 :|%lf|\tg_complex_parameter20 :|%lf|\n",g_complex_parameter19,g_complex_parameter20);
				}


				/*******************************************************************/


				/********* Dynamic Footer Display ****************************************/

				strcpy(footer_query,h_report_details_struct.footer_query);
				
				if(strlen(footer_query) > 0)
				{

				/**** Stored Procedure : SP_REPORT_FOOTER ***********************************/

				fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
				printf("Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
				//fflush(fl_userlog);
				EXEC SQL CALL SP_REPORT_FOOTER(:l_rept_id,:l_table_id,:l_param1,:l_param2,
							:l_param3,:l_param4, :l_param5,
							:l_param6,:l_footer_query,:l_footer_query1,:l_error_desc); 

				strcat(l_footer_query,l_footer_query1);

				if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER ERR DESC :|%s|\n",l_error_desc);
				}

				fprintf(fl_userlog,"FOOTER QUERY :|%s|\n",l_footer_query);

				strcpy(l_footer_query_value,APL_NULL_STRING);

				EXEC SQL PREPARE XLS1_FOOTER_CURR FROM :l_footer_query;

				EXEC SQL DECLARE xls1_footer_curr1_g CURSOR FOR XLS1_FOOTER_CURR;
				
				fprintf(fl_userlog,"After DECLARE xls1_footer_curr1_g :|%d|\n",sqlca.sqlcode);

				EXEC SQL OPEN xls1_footer_curr1_g;

				EXEC SQL FETCH xls1_footer_curr1_g INTO :l_footer_query_value;
				fprintf(fl_userlog,"After FETCH xls1_footer_curr1_g :|%d|\n",sqlca.sqlcode);

				EXEC SQL CLOSE xls1_footer_curr1_g;

				fprintf(fl_userlog,"l_footer_query_value :|%s|\n",l_footer_query_value);

				l_footer_num = 0;

				strcpy(l_footer1,APL_NULL_STRING);
				strcpy(l_footer2,APL_NULL_STRING);
				strcpy(l_footer3,APL_NULL_STRING);
				strcpy(l_footer4,APL_NULL_STRING);
				strcpy(l_footer5,APL_NULL_STRING);
				strcpy(l_footer6,APL_NULL_STRING);
				strcpy(l_footer7,APL_NULL_STRING);
				strcpy(l_footer8,APL_NULL_STRING);
				strcpy(l_footer9,APL_NULL_STRING);
				strcpy(l_footer10,APL_NULL_STRING);
				strcpy(l_footer11,APL_NULL_STRING);
				strcpy(l_footer12,APL_NULL_STRING);
				strcpy(l_footer13,APL_NULL_STRING);
				strcpy(l_footer14,APL_NULL_STRING);
				strcpy(l_footer15,APL_NULL_STRING);

				if(strlen(l_footer_query_value) > 0)
				{		
					if (CO_SplitStr(l_footer_query_value,CAPSEP,&l_footer_num,&l_footer_val) == APL_FAILURE)
					{
						CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_footer_query_value);
						APL_GOBACK_FAIL
					}

					fprintf(fl_userlog,"l_footer_num :|%d|\n",l_footer_num);
					if(l_footer_num > 0)
					{
						for(i=0;i<l_footer_num;i++)
						{
							if(i == 0)
							strcpy(l_footer1,l_footer_val[i]);
							else if(i == 1)
							strcpy(l_footer2,l_footer_val[i]);
							else if(i == 2)
							strcpy(l_footer3,l_footer_val[i]);
							else if(i == 3)
							strcpy(l_footer4,l_footer_val[i]);
							else if(i == 4)
							strcpy(l_footer5,l_footer_val[i]);
							else if(i == 5)
							strcpy(l_footer6,l_footer_val[i]);
							else if(i == 6)
							strcpy(l_footer7,l_footer_val[i]);
							else if(i == 7)
							strcpy(l_footer8,l_footer_val[i]);
							else if(i == 8)
							strcpy(l_footer9,l_footer_val[i]);
							else if(i == 9)
							strcpy(l_footer10,l_footer_val[i]);
							else if(i == 10)
							strcpy(l_footer11,l_footer_val[i]);
							else if(i == 11)
							strcpy(l_footer12,l_footer_val[i]);
							else if(i == 12)
							strcpy(l_footer13,l_footer_val[i]);
							else if(i == 13)
							strcpy(l_footer14,l_footer_val[i]);
							else if(i == 14)
							strcpy(l_footer15,l_footer_val[i]);
						}
					}

				}/**************** End Of Footer Value check ********************************/

				/****** Stored Procedure : SP_REPORT_FOOTER_DATA ***********************************/

				fprintf(fl_userlog,"l_footer1 :|%s|\t l_footer2 :|%s|\n",l_footer1,l_footer2);
				fprintf(fl_userlog,"l_footer3 :|%s|\t l_footer4 :|%s|\n",l_footer3,l_footer4);
				fprintf(fl_userlog,"l_footer5 :|%s|\t l_footer6 :|%s|\n",l_footer5,l_footer6);
				fprintf(fl_userlog,"l_footer7 :|%s|\t l_footer8 :|%s|\n",l_footer7,l_footer8);
				fprintf(fl_userlog,"l_footer9 :|%s|\t l_footer10 :|%s|\n",l_footer9,l_footer10);
				fprintf(fl_userlog,"l_footer11 :|%s|\t l_footer12 :|%s|\n",l_footer11,l_footer12);
				fprintf(fl_userlog,"l_footer13 :|%s|\t l_footer14 :|%s|\n",l_footer13,l_footer14);
				fprintf(fl_userlog,"l_footer15 :|%s|\n",l_footer15);

				fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);	
				printf("Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);		
				//fflush(fl_userlog);
				EXEC SQL CALL SP_REPORT_FOOTER_DATA(:l_rept_id,:l_table_id,
									:l_footer1,:l_footer2,
									:l_footer3,:l_footer4,
									:l_footer5,:l_footer6,
									:l_footer7,:l_footer8,
									:l_footer9,:l_footer10,
									:l_footer11,:l_footer12,
									:l_footer13,:l_footer14,
									:l_footer15,
									:g_complex_parameter1,:g_complex_parameter2,
									:g_complex_parameter3,:g_complex_parameter4,
									:g_complex_parameter5,:g_complex_parameter6,
									:g_complex_parameter7,:g_complex_parameter8,
									:g_complex_parameter9,:g_complex_parameter10,
									:g_complex_parameter11,:g_complex_parameter12,
									:g_complex_parameter13,:g_complex_parameter14,
									:g_complex_parameter15,:g_complex_parameter16,
									:g_complex_parameter17,:g_complex_parameter18,
									:g_complex_parameter19,:g_complex_parameter20,
									:l_footer_data,:l_error_desc);

				if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER_DATA ERR DESC :|%s|\n",l_error_desc);
				}

				fprintf(fl_userlog,"FOOTER DATA :|%s|\n",l_footer_data);

				/************ Dynamic Formating Procedure ********************************************/
				
				fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);	
				printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
				//fflush(fl_userlog);
				EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_footer_data,:l_error_desc); 

				if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
				}

				fprintf(fl_userlog,"FOOTER DATA After Formatting -- :|%s|\n",l_footer_data);


				/*************************************************************************************/

				/************ Dynamic Footer Data Display **********************************************/
				
				fprintf(fl_userlog,"strlen(l_footer_data) :|%d|\n",strlen(l_footer_data));

					if(strlen(l_footer_data) > 0)
					{
						fprintf(fl_userlog,"Displaying Footer Data --- \n");

						fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\"><TR>\n");
						fprintf(l_report_HTML2,"<TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'headerdata\'>%s</TD>\n",h_report_details_struct.footer_data_align,l_footer_data);
						fprintf(l_report_HTML2,"</TR></TABLE>\n");
					}

					l_footer_data_brk = h_report_details_struct.footer_data_brk;
					while(l_footer_data_brk > 0)
					{
						fprintf(l_report_HTML2,"</BR>\n");
						l_footer_data_brk --;
						g_line_count++;
					}

				}

				/***************** End Of Dynamic Footer Display  *****************************/

				/***************** Final Complex Criteria Calculation *************************/

				fprintf(fl_userlog,"\n--- l_table_id ---7 :|%d|\n",l_table_id);

				if(l_table_id == 1)
				{
					f_complex_parameter1=f_complex_parameter1+g_complex_parameter1;
					f_complex_parameter2=f_complex_parameter2+g_complex_parameter2;
					f_complex_parameter3=f_complex_parameter3+g_complex_parameter3;
					f_complex_parameter4=f_complex_parameter4+g_complex_parameter4;
					f_complex_parameter5=f_complex_parameter5+g_complex_parameter5;
					f_complex_parameter6=f_complex_parameter6+g_complex_parameter6;
					f_complex_parameter7=f_complex_parameter7+g_complex_parameter7;
					f_complex_parameter8=f_complex_parameter8+g_complex_parameter8;
					f_complex_parameter9=f_complex_parameter9+g_complex_parameter9;
					f_complex_parameter10=f_complex_parameter10+g_complex_parameter10;
					f_complex_parameter11=f_complex_parameter11+g_complex_parameter11;
					f_complex_parameter12=f_complex_parameter12+g_complex_parameter12;
					f_complex_parameter13=f_complex_parameter13+g_complex_parameter13;
					f_complex_parameter14=f_complex_parameter14+g_complex_parameter14;
					f_complex_parameter15=f_complex_parameter15+g_complex_parameter15;
					f_complex_parameter16=f_complex_parameter16+g_complex_parameter16;
					f_complex_parameter17=f_complex_parameter17+g_complex_parameter17;
					f_complex_parameter18=f_complex_parameter18+g_complex_parameter18;
					f_complex_parameter19=f_complex_parameter19+g_complex_parameter19;
					f_complex_parameter20=f_complex_parameter20+g_complex_parameter20;
				}


				/**********************************************************************************/
		}
	}
	EXEC SQL CLOSE html2_group_g;
   }/*added by siva.ganapathi for Enh. Log 121 on 2/20/2009 -- Ended*/
	else
	{
	while(l_table_id <= h_report_main_struct.no_of_tables)
	{

		g_complex_parameter1 = 0.0;
		g_complex_parameter2 = 0.0;
		g_complex_parameter3 = 0.0;
		g_complex_parameter4 = 0.0;
		g_complex_parameter5 = 0.0;
		g_complex_parameter6 = 0.0;
		g_complex_parameter7 = 0.0;
		g_complex_parameter8 = 0.0;
		g_complex_parameter9 = 0.0;
		g_complex_parameter10 = 0.0;
		g_complex_parameter11 = 0.0;
		g_complex_parameter12 = 0.0;
		g_complex_parameter13 = 0.0;
		g_complex_parameter14 = 0.0;
		g_complex_parameter15 = 0.0;
		g_complex_parameter16 = 0.0;
		g_complex_parameter17 = 0.0;
		g_complex_parameter18 = 0.0;
		g_complex_parameter19 = 0.0;
		g_complex_parameter20 = 0.0;

		fprintf(fl_userlog,"Fetching Report Details :|%s||%d|\n",l_rept_id,l_table_id);
		
		/******* Fetch the REPORT DETAILS for the perticular report ID and table ID ******************/
		
		EXEC SQL SELECT * INTO :h_report_details_struct
					FROM REPORT_DETAILS 
					WHERE REPORT_ID=:l_rept_id
					AND TABLE_ID=:l_table_id;

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Failed to Access REPORT_DETAILS --- ORA ERROR :|%d|\n",sqlca.sqlcode);
		}

		strcpy(footer_query,h_report_details_struct.footer_query);


		/***** Table header ************************************************/

		fprintf(fl_userlog,"h_report_details_struct.table_hdr:|%s|\n",h_report_details_struct.table_hdr);
		
		if(strlen(h_report_details_struct.table_hdr_align) > 0)
		{
			if(strlen(h_report_details_struct.table_hdr) > 0)
			{
				fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" class=\'lableredbg\'><TR ><TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'lableredbg\'>%s</TD></TR></TABLE>\n",h_report_details_struct.table_hdr_align,h_report_details_struct.table_hdr);

				g_line_count++;
			}
		}
		else
		{
			if(strlen(h_report_details_struct.table_hdr) > 0)
			{
				fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" class=\'lableredbg\'><TR ><TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'lableredbg\'>%s</TD></TR></TABLE>\n",h_report_details_struct.table_hdr);

				g_line_count++;
			}
			
		}

		l_table_hdr = h_report_details_struct.table_hdr_brk;
		while(l_table_hdr > 0)
		{
			fprintf(l_report_HTML2,"</BR>\n");
			l_table_hdr --;
			g_line_count++;
		}
		
		/*********** Grouping Condition Check **************************************************/

		fprintf(fl_userlog,"h_report_details_struct.group_desc:|%s|\n",h_report_details_struct.group_desc);
		fprintf(fl_userlog,"h_report_details_struct.group_pos:|%s|\n",h_report_details_struct.group_pos);
			
		strcpy(l_group_pos,h_report_details_struct.group_pos);

		strcpy(l_group_query,h_report_details_struct.group_query);
		strcpy(l_group_desc,h_report_details_struct.group_desc);
	
		//fprintf(fl_userlog,"strlen(l_group_query) :|%d|\n",strlen(l_group_query));	 Changes done for AIX Migration
		fprintf(fl_userlog,"strlen(l_group_query) :|%d|\n",(int)strlen(l_group_query));	

		if(strlen(l_group_query) > 0 )
		{
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM1',:l_param1) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM2',:l_param2) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM3',:l_param3) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM4',:l_param4) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM5',:l_param5) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM6',:l_param6) INTO :l_group_query FROM DUAL;
			
			fprintf(fl_userlog,"GROUP QUERY :|%s|\n",l_group_query);

			EXEC SQL PREPARE HTML2_GROUP FROM :l_group_query;
			EXEC SQL DECLARE html2_group CURSOR FOR HTML2_GROUP;
			EXEC SQL OPEN html2_group;

			if(sqlca.sqlcode < 0)
			{
				fprintf(fl_userlog,"Error : Cursor Open html2_group ORA ERROR :|%d|\n",sqlca.sqlcode);
			}

			for(;;)
			{
				EXEC SQL FETCH html2_group
						INTO :l_group_parameter;

				fprintf(fl_userlog,"SQLCODE :|%d| And l_group_break_flag :|%d|\n",sqlca.sqlcode,l_group_break_flag);
				
				if((sqlca.sqlcode == 1403)||(l_group_break_flag == 1))
					break;

				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Error : Fetch Cursor html2_group ORA ERROR :|%d|\n",sqlca.sqlcode);
				}

				/********* Split Group Parameter ***********************************/
			
				fprintf(fl_userlog,"l_group_parameter:|%s|\n",l_group_parameter);
				
				if(CO_SplitStr(l_group_parameter,CAPSEP,&l_group_parameter_no,&l_group_parameter_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 	fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_parameter);
				 	APL_GOBACK_FAIL
				}
		
				fprintf(fl_userlog,"l_group_pos:|%s|\n",l_group_pos);
				
				if(CO_SplitStr(l_group_pos,COMASEP,&l_group_pos_no,&l_group_pos_value) == APL_FAILURE)
				{
			 
					CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
 		 	 		fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_pos);
			 		APL_GOBACK_FAIL
	   			}

				fprintf(fl_userlog,"l_group_pos_no:|%d|l_group_parameter_no:|%d|\n",l_group_pos_no,l_group_parameter_no);
				
				if((l_group_pos_no > 0) && (l_group_parameter_no > 0)
					&& (l_group_pos_no == l_group_parameter_no))
				{	
					l_group_break_flag=0;
				
					for(i=0;i<l_group_pos_no;i++)
					{
					    if(!strcmp(l_group_pos_value[i],"2"))
						{
							fprintf(fl_userlog,"l_param2:|%s|l_prev_param2:|%s|\n",l_param2,l_prev_param2);
							
							if(!strcmp(l_param2,l_prev_param2))
							{
								strcpy(l_param2,l_group_parameter_value[i]);
								strcpy(l_prev_param2,l_param2);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"3"))
						{
							fprintf(fl_userlog,"l_param3:|%s|l_prev_param3:|%s|\n",l_param3,l_prev_param3);
							
							if(!strcmp(l_param3,l_prev_param3))
							{
								strcpy(l_param3,l_group_parameter_value[i]);
								strcpy(l_prev_param3,l_param3);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"4"))
						{
							fprintf(fl_userlog,"l_param4:|%s|l_prev_param4:|%s|\n",l_param4,l_prev_param4);
							
							if(!strcmp(l_param4,l_prev_param4))
							{
								strcpy(l_param4,l_group_parameter_value[i]);
								strcpy(l_prev_param4,l_param4);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"5"))
						{
							fprintf(fl_userlog,"l_param5:|%s|l_prev_param5:|%s|\n",l_param5,l_prev_param5);
							
							if(!strcmp(l_param5,l_prev_param5))
							{
								strcpy(l_param5,l_group_parameter_value[i]);
								strcpy(l_prev_param5,l_param5);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"6"))
						{
							fprintf(fl_userlog,"l_param6:|%s|l_prev_param6:|%s|\n",l_param6,l_prev_param6);
							
							if(!strcmp(l_param6,l_prev_param6))
							{
								strcpy(l_param6,l_group_parameter_value[i]);
								strcpy(l_prev_param6,l_param6);
							}
							else
								l_group_break_flag=1;
						}
					}
				}
				else
				{
					fprintf(fl_userlog,"Error: Mismatch in Group Parameters :|%d||%d|",l_group_pos_no,l_group_parameter_no);
					break;
				}
				

			/*********************************************************************/
			
			fprintf(fl_userlog,"l_param1:|%s|\n",l_param1);
			fprintf(fl_userlog,"l_param2:|%s|\n",l_param2);
			fprintf(fl_userlog,"l_param3:|%s|\n",l_param3);
			fprintf(fl_userlog,"l_param4:|%s|\n",l_param4);
			fprintf(fl_userlog,"l_param5:|%s|\n",l_param5);
			fprintf(fl_userlog,"l_param6:|%s|\n",l_param6);
				
			/**** Stored procedure for REPORT DETAILS GROUPING **************************/
			
			fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL  :|%s|\n",l_rept_id);
			
			EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
					:l_param2,:l_param3,:l_param4,
					:l_param5,:l_param6,
				    :l_table_query,:l_table_query1,:l_table_query2,
  				    :l_table_query3,:l_table_query4,:l_table_query5,
					:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
					:l_group_desc,:l_error_desc);

			strcpy(table_query,l_table_query);
			strcat(table_query," ");
			
			if(strlen(l_table_query1) > 0)
			{
				strcat(table_query,l_table_query1);
				strcat(table_query," ");
			}
			if(strlen(l_table_query2) > 0)
			{
				strcat(table_query,l_table_query2);
				strcat(table_query," ");
			}
			if(strlen(l_table_query3) > 0)
			{
				strcat(table_query,l_table_query3);
				strcat(table_query," ");
			}
			if(strlen(l_table_query4) > 0)
			{
				strcat(table_query,l_table_query4);
				strcat(table_query," ");
			}
			if(strlen(l_table_query5) > 0)
			{
				strcat(table_query,l_table_query5);
				strcat(table_query," ");
			}
			
			strcat(table_query,APL_NULL_STRING);
				
			fprintf(fl_userlog,"After Stored Procedure SP_REPORT_DETAIL ORA ERROR 8:|%d|\n",sqlca.sqlcode);
			
			if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
			{
				fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
			}
			
			//fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
			fprintf(fl_userlog,"l_criteria_query1:|%s|\n",l_criteria_query1);
			fprintf(fl_userlog,"l_criteria_query2:|%s|\n",l_criteria_query2);
			fprintf(fl_userlog,"l_criteria_query3:|%s|\n",l_criteria_query3);
			fprintf(fl_userlog,"l_group_desc:|%s|\n",l_group_desc);

			/********* Group Description ******************************************/
			
			if(strlen(l_group_desc) > 0)
			{
				fprintf(l_report_HTML2,"</BR>\n");
				fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR><TD WIDTH=\'100%%\' class=\'ez4\'>%s</TD></TR></TABLE>\n",l_group_desc);
				fprintf(l_report_HTML2,"</BR>\n");
			}


			/****** Before table ****************************************************/
			
			if(strlen(h_report_details_struct.before_table_align) > 0)
			{
				if(strlen(h_report_details_struct.before_table) > 0)
				{	
					fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\"ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.before_table_align,h_report_details_struct.before_table);
				}
			}
			else
			{
				if(strlen(h_report_details_struct.before_table) > 0)
				{	
					fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\"ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.before_table);
				}

			}	
			
			l_before_table = h_report_details_struct.before_table_brk;
			while(l_before_table > 0)
			{
				fprintf(l_report_HTML2,"</BR>\n");
				l_before_table --;
			}

			/******* Column Heading ********************************************/

			/****** Multiple Column Level **************************************/

			strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
			strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
			strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
			
			fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);

			if(strlen(l_multiple_col_flag) > 0)
			{
				fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
				fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);

				if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
						&l_multiple_col_header_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
					 APL_GOBACK_FAIL
				}

				if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
						&l_multiple_colspan_sep_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
					 APL_GOBACK_FAIL
				}


				fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
				fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);

				fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" border=\'%s\' cellSpacing=\'0\' cellPadding=\'1\' >\n",g_table_border);

				if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
				{
					for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
					{
						for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
						{				

						if(int_a == int_b )
						{
						
						strcpy(l_level_header,l_multiple_col_header_value[int_a]);
						strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

						fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
						fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);

						if (CO_SplitStr(l_level_header,
								SEMISEP,
								&l_level_header_no,
								&l_level_header_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
							 APL_GOBACK_FAIL
						}

						if (CO_SplitStr(l_level_colspan,
								SEMISEP,
								&l_level_colspan_no,
								&l_level_colspan_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
							 APL_GOBACK_FAIL
						}

						fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
						fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);

						if(l_level_header_no == l_level_colspan_no)
						{

						fprintf(l_report_HTML2,"<TR>\n");
						for(int_aa=0;int_aa<l_level_header_no;int_aa++)
						{
							for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
							{
								if(int_aa == int_bb)
								{	
								
								strcpy(l_level_column,l_level_header_value[int_aa]);
								strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

								fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
								fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
								
								if(strlen(l_level_column) > 0)
									fprintf(l_report_HTML2,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >%s</TD> \n", l_level_col_span,l_level_column);
								else
									fprintf(l_report_HTML2,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >&nbsp;</TD> \n", l_level_col_span);


								}
							}
						}
						fprintf(l_report_HTML2,"</TR>\n");

						}/*** End Of Inner Condition check *****/

						}
						
												
						}/*** End Of 2st Main For Loop *******/

					}/*** End Of 1st Main For Loop *******/

				}/*** End Of Multiple col condition check *****/

				l_column_no=h_report_details_struct.no_of_columns;
				l_no_of_columns = h_report_details_struct.no_of_columns;
			}
			else
			{
			
			fprintf(fl_userlog,"COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
			
			/**** Split the Column Header and print ***************************/
			
			strcpy(l_column_header,h_report_details_struct.column_hdr);
			if (CO_SplitStr(l_column_header,COMASEP,&l_col_no,&l_col_value) == APL_FAILURE)
			{
				 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_header);
				 APL_GOBACK_FAIL
			}

			/***** Table Column Heading and its records  **********************/
			
			fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" border=\'%s\'  cellSpacing=\'0\' cellPadding=\'1\' >\n",g_table_border);

			fprintf(l_report_HTML2,"<TR>\n");
			for(i=0;i<l_col_no;i++)
			{
				strcpy(l_column_value,l_col_value[i]);

				fprintf(l_report_HTML2,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
			}
			fprintf(l_report_HTML2,"</TR>\n");

			l_column_no=h_report_details_struct.no_of_columns;
			l_no_of_columns = h_report_details_struct.no_of_columns;
			
			l_col_hdr = h_report_details_struct.col_hdr_brk;
			

			}/**** End Of Column Header Else Part ******************/


			EXEC SQL PREPARE HTML2_SUB1 FROM :table_query;	
			EXEC SQL DECLARE html2tablequery1 CURSOR FOR HTML2_SUB1;
			EXEC SQL OPEN html2tablequery1;

			if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
			{
				fprintf(fl_userlog,"Error : Open Cursor html2tablequery1 ORA ERROR :|%d|\n",sqlca.sqlcode);
			}
			

			l_fetch_count=0;

			for(;;)
			{
				EXEC SQL FETCH html2tablequery1
					INTO :l_table_parameter;

				if(sqlca.sqlcode == 1403)
				{
					fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
					if(l_fetch_count == 0)
					{
						fprintf(l_report_HTML2,"<TR>\n");
						fprintf(l_report_HTML2,"<TD WIDTH=\'100%%\' COLSPAN=\'%d\' class=\'ez4\'>NO RECORDS FOUND </TD>\n",l_column_no);
						fprintf(l_report_HTML2,"</TR>\n");

						l_remove_count ++;
					}
					break;
				}

				if(sqlca.sqlcode < 0)
				{
				   fprintf(fl_userlog,"Error : Fetch Cursor html2tablequery1 --- ORA ERROR:|%d|\n",sqlca.sqlcode);
					break;
				}

				strcpy(l_column_parameter,l_table_parameter);
				
				/**** Split and fetch the column data into seperate variables ******/
			
				if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
				{
					CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
					APL_GOBACK_FAIL
				}

				/***** For Number Formatting ***************************************************/

				strcpy(l_format_col_pos,h_report_details_struct.format_col_pos);
				if (CO_SplitStr(l_format_col_pos,COMASEP,&l_format_col_no,&l_format_col_val) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_format_col_pos);
					 APL_GOBACK_FAIL
				}

				fprintf(l_report_HTML2,"<TR>\n");

				for(j=0;j<l_column_num;j++)
				{
					strcpy(l_column,l_column_val[j]);
					
					l_format_col_flag = 0;
					if(l_format_col_no > 0)
					{
						for (k=0;k<l_format_col_no;k++)
						{
							strcpy(l_format_col_value,l_format_col_val[k]);

							if(j==(atoi(l_format_col_value)-1))
								l_format_col_flag = 1;
						}

						if((strlen(l_column) > 0) && (strcmp(l_column," ")))
						{
							if(l_format_col_flag == 1)
							{
								EXEC SQL CALL SP_NUMBER_FORMATTING(:l_column,:l_error_desc);

								if(strlen(l_error_desc) > 0)
									fprintf(l_report_HTML2,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
								else
									fprintf(l_report_HTML2,"<TD class=\'record\' ALIGN=\"RIGHT\">%s</TD>\n",l_column);
							}
							else
							{
								fprintf(l_report_HTML2,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
							}
						}
						else
							 fprintf(l_report_HTML2,"<TD class=\'record\'  >&nbsp</TD>\n");

					}
					else
					{
						if((strlen(l_column) > 0) && (strcmp(l_column," ")))
							fprintf(l_report_HTML2,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
						else
							fprintf(l_report_HTML2,"<TD class=\'record\'  >&nbsp</TD>\n");
					}

				}
				fprintf(l_report_HTML2,"</TR>\n");


				/***********************************************************************************/


				l_fetch_count ++;

			}
			EXEC SQL CLOSE html2tablequery1;

		   	/********* For Criteria column value display **************************/
			
			if(h_report_details_struct.tot_criteria_cols > 0)
			{
				if(strlen(h_report_details_struct.criteria_col1_query) > 0)
				{
					EXEC SQL PREPARE HTML2_CR1 FROM :l_criteria_query1;
					EXEC SQL DECLARE HTML2_criteria1 CURSOR FOR HTML2_CR1;
					EXEC SQL OPEN HTML2_criteria1;
					
					if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					{
						fprintf(fl_userlog,"Error : Failed to Open HTML2_criteria1 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
					}

					for(;;)
					{
						EXEC SQL FETCH HTML2_criteria1 INTO :l_criteria_value1;
					
					       if(sqlca.sqlcode == 1403)
					       break;

					       if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					       {
								fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
								break;
					       }
					}
					EXEC SQL CLOSE HTML2_criteria1;

					/****** For Grand Total Of Criteria Value *********/
					
					
					if(strcmp(l_criteria_value1,APL_NULL_STRING))
					{
					EXEC SQL SELECT (:l_criteria_value1) INTO :l_criteria1_total FROM DUAL;
					
					l_grand_total1=l_grand_total1+l_criteria1_total;
					
					fprintf(fl_userlog,"l_grand_total1 :|%lf|\n",l_grand_total1);

					EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value1,:l_error_desc);

					fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);

					fprintf(l_report_HTML2,"<TR>\n");
					fprintf(l_report_HTML2,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col1_name,l_criteria_value1);
					fprintf(l_report_HTML2,"</TR>\n");
					}
				}

				if(strlen(h_report_details_struct.criteria_col2_query) > 0)
				{
					EXEC SQL PREPARE HTML2_CR2 FROM :l_criteria_query2;
					EXEC SQL DECLARE HTML2_criteria2 CURSOR FOR HTML2_CR2;
					EXEC SQL OPEN HTML2_criteria2;
					
					if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					{
						fprintf(fl_userlog,"Error : Failed to Open HTML2_criteria2 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
					}

					for(;;)
					{
					EXEC SQL FETCH HTML2_criteria2 INTO :l_criteria_value2;
					
					       if(sqlca.sqlcode == 1403)
					       break;

					       if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					       {
							fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
								break;
					       }
					}
					EXEC SQL CLOSE HTML2_criteria2;

					
					if(strcmp(l_criteria_value2,APL_NULL_STRING))
					{
					EXEC SQL SELECT (:l_criteria_value2) INTO :l_criteria2_total FROM DUAL;
					
					l_grand_total2=l_grand_total2+l_criteria2_total;
					
					fprintf(fl_userlog,"l_grand_total2 :|%lf|\n",l_grand_total2);

					EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value2,:l_error_desc);

					fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);

					fprintf(l_report_HTML2,"<TR>\n");
					fprintf(l_report_HTML2,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col2_name,l_criteria_value2);

					fprintf(l_report_HTML2,"</TR>\n");
					}
				}

				if(strlen(h_report_details_struct.criteria_col3_query) > 0)
				{
					EXEC SQL PREPARE HTML2_CR3 FROM :l_criteria_query3;
					EXEC SQL DECLARE HTML2_criteria3 CURSOR FOR HTML2_CR3;
					EXEC SQL OPEN HTML2_criteria3;
					
					if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					{
						fprintf(fl_userlog,"Error : Failed to Open HTML2_criteria3 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
					}

					for(;;)
					{
					EXEC SQL FETCH HTML2_criteria3 INTO :l_criteria_value3;
					
					       if(sqlca.sqlcode == 1403)
					       break;

					       if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					       {
							fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
								break;
					       }
					}
					EXEC SQL CLOSE HTML2_criteria3;
						
					
					if(strcmp(l_criteria_value3,APL_NULL_STRING))
					{
					EXEC SQL SELECT (:l_criteria_value3) INTO :l_criteria3_total FROM DUAL;
					
					l_grand_total3=l_grand_total3+l_criteria3_total;
					
					fprintf(fl_userlog,"l_grand_total3 :|%lf|\n",l_grand_total3);

					EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value2,:l_error_desc);

					fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);

					fprintf(l_report_HTML2,"<TR>\n");
					fprintf(l_report_HTML2,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col3_name,l_criteria_value3);
					fprintf(l_report_HTML2,"</TR>\n");
					}
				}
			}

			/******* Complex Criteria Part *********************************************/

			strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
			strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
			strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
			strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

			if(strlen(complex_criteria_query) > 0)
			{
			
			EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
					:complex_criteria_query,
					'@PARAM1',:l_param1),
					'@PARAM2',:l_param2),
					'@PARAM3',:l_param3),
					'@PARAM4',:l_param4),
					'@PARAM5',:l_param5),
					'@PARAM6',:l_param6),
					REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
					:complex_criteria_query1,
					'@PARAM1',:l_param1),
					'@PARAM2',:l_param2),
					'@PARAM3',:l_param3),
					'@PARAM4',:l_param4),
					'@PARAM5',:l_param5),
					'@PARAM6',:l_param6)
				INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;
		
			strcat(complex_criteria_query,complex_criteria_query1);
			
			fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);

			EXEC SQL PREPARE CMPX_CURR1 FROM :complex_criteria_query;

			EXEC SQL DECLARE complex_curr1 CURSOR FOR CMPX_CURR1;

			fprintf(fl_userlog,"After DECLARE complex_curr1 :|%d|\n",sqlca.sqlcode);

			EXEC SQL OPEN complex_curr1;

			EXEC SQL FETCH complex_curr1 INTO :l_complex_parameter;

			fprintf(fl_userlog,"After FETCH complex_curr1 :|%d|\n",sqlca.sqlcode);

			EXEC SQL CLOSE complex_curr1;

			fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);

			if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
				APL_GOBACK_FAIL
			}
			
			fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);

			if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
				APL_GOBACK_FAIL
			}


			fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
			fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);

			l_complex_break_flag = 0;
			
			if(l_complex_num == l_complex_pos_num)
			{

			fprintf(l_report_HTML2,"<TR>\n");

			for(i=0;i<l_column_num;i++)
			{
				for(j=0;j<l_complex_pos_num;j++)
				{

				strcpy(l_complex_pos_column,l_complex_pos_val[j]);

				if((i==0)&&(j==0))
				{
					if(strlen(complex_criteria_label) > 0)
					{
						fprintf(l_report_HTML2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" >%s</TD>\n",complex_criteria_label);
						l_complex_break_flag=1;
					}
					else
					fprintf(l_report_HTML2,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
				}

				if(i== (atoi(l_complex_pos_column)-1))
				{				  
				  strcpy(l_complex_column,l_complex_val[j]);

				  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);

				  l_complex_break_flag=1;
				  			
				  if(strlen(l_complex_column) > 0)
				  {
					  EXEC SQL CALL SP_NUMBER_FORMATTING(:l_complex_column,:l_error_desc);

					  if(strlen(l_error_desc) > 0)
						fprintf(l_report_HTML2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">%s</TD>\n",l_complex_column);
					  else
						fprintf(l_report_HTML2,"<TD class=\'lableredbg\' ALIGN=\"RIGHT\">%s</TD>\n",l_complex_column);
				  }
				  else
				  {
						fprintf(l_report_HTML2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">&nbsp;</TD>\n");
				  }
			
				  break;
				}
				else
				{
				     l_complex_break_flag = 0;
				     continue;
				} 

				}
				     
				if(i != 0)
				{
				  if(l_complex_break_flag != 1)
				     fprintf(l_report_HTML2,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
				}
			}

			}
			else
			{
				fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
			}

			fprintf(l_report_HTML2,"</TR>\n");

			}
			
			/*****************	End Of Complex Part     *********************/

			fprintf(l_report_HTML2,"</TABLE>\n");

			/****** After table ************************************/
	
			l_after_table = h_report_details_struct.after_table_brk;
			while(l_after_table > 0)
			{
				fprintf(l_report_HTML2,"</BR>\n");
				l_after_table --;
			}

			if(strlen(h_report_details_struct.after_table_align) > 0)
			{
				if(strlen(h_report_details_struct.after_table) > 0)
				{		
					fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.after_table_align,h_report_details_struct.after_table);
				}
			}
			else
			{
				if(strlen(h_report_details_struct.after_table) > 0)
				{	
					fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.after_table);
				}

			}	
  
			/******** Table Footer note ************************************/
	
			l_table_footer = h_report_details_struct.table_footer_brk;
			if(l_table_footer > 0)
			{
				fprintf(l_report_HTML2,"</BR>\n");
				l_table_footer --;
			}
		
			if(strlen(h_report_details_struct.table_footer_align) > 0)
			{
				if(strlen(h_report_details_struct.table_footer) > 0)
				{
					fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",h_report_details_struct.table_footer_align,h_report_details_struct.table_footer);
				}
			}
			else
			{
				if(strlen(h_report_details_struct.table_footer) > 0)
				{
					fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",h_report_details_struct.table_footer);
				}

			}

			l_table = h_report_main_struct.table_brk;
			if(l_table > 0)
			{
				fprintf(l_report_HTML2,"</BR>\n");
				l_table --;
			}

			if(l_fetch_count > 0 )
			{
			
			for(m=0;m<l_complex_num;m++)
			{
				if(m == 0)
				{
					strcpy(l_complex_parameter1,l_complex_val[m]);
					g_complex_parameter1=g_complex_parameter1+atof(l_complex_parameter1);
				}
				else if(m == 1)
				{
					strcpy(l_complex_parameter2,l_complex_val[m]);
					g_complex_parameter2=g_complex_parameter2+atof(l_complex_parameter2);
				}
				else if(m == 2)
				{
					strcpy(l_complex_parameter3,l_complex_val[m]);
					g_complex_parameter3=g_complex_parameter3+atof(l_complex_parameter3);
				}
				else if(m == 3)
				{
					strcpy(l_complex_parameter4,l_complex_val[m]);
					g_complex_parameter4=g_complex_parameter4+atof(l_complex_parameter4);
				}
				else if(m == 4)
				{
					strcpy(l_complex_parameter5,l_complex_val[m]);
					g_complex_parameter5=g_complex_parameter5+atof(l_complex_parameter5);
				}
				else if(m == 5)
				{
					strcpy(l_complex_parameter6,l_complex_val[m]);
					g_complex_parameter6=g_complex_parameter6+atof(l_complex_parameter6);
				}
				else if(m == 6)
				{
					strcpy(l_complex_parameter7,l_complex_val[m]);
					g_complex_parameter7=g_complex_parameter7+atof(l_complex_parameter7);
				}
				else if(m == 7)
				{
					strcpy(l_complex_parameter8,l_complex_val[m]);
					g_complex_parameter8=g_complex_parameter8+atof(l_complex_parameter8);
				}
				else if(m == 8)
				{
					strcpy(l_complex_parameter9,l_complex_val[m]);
					g_complex_parameter9=g_complex_parameter9+atof(l_complex_parameter9);
				}
				else if(m == 9)
				{
				        strcpy(l_complex_parameter10,l_complex_val[m]);
				        g_complex_parameter10=g_complex_parameter10+atof(l_complex_parameter10);
				}
				else if(m == 10)
				{
					strcpy(l_complex_parameter11,l_complex_val[m]);
					g_complex_parameter11=g_complex_parameter11+atof(l_complex_parameter11);
				}
				else if(m == 11)
				{
					strcpy(l_complex_parameter12,l_complex_val[m]);			
					g_complex_parameter12=g_complex_parameter12+atof(l_complex_parameter12);
				}
				else if(m == 12)
				{
					strcpy(l_complex_parameter13,l_complex_val[m]);
					g_complex_parameter13=g_complex_parameter13+atof(l_complex_parameter13);
				}
				else if(m == 13)
				{
					strcpy(l_complex_parameter14,l_complex_val[m]);
					g_complex_parameter14=g_complex_parameter14+atof(l_complex_parameter14);
				}
				else if(m == 14)
				{
					strcpy(l_complex_parameter15,l_complex_val[m]);
					g_complex_parameter15=g_complex_parameter15+atof(l_complex_parameter15);
				}
				else if(m == 15)
				{
					strcpy(l_complex_parameter16,l_complex_val[m]);
					g_complex_parameter16=g_complex_parameter16+atof(l_complex_parameter16);
				}
				else if(m == 16)
				{
					strcpy(l_complex_parameter17,l_complex_val[m]);
					g_complex_parameter17=g_complex_parameter17+atof(l_complex_parameter17);
				}
				else if(m == 17)
				{
					strcpy(l_complex_parameter18,l_complex_val[m]);
					g_complex_parameter18=g_complex_parameter18+atof(l_complex_parameter18);
				}
				else if(m == 18)
				{
					strcpy(l_complex_parameter19,l_complex_val[m]);
					g_complex_parameter19=g_complex_parameter19+atof(l_complex_parameter19);
				}
				else if(m == 19)
				{
					strcpy(l_complex_parameter20,l_complex_val[m]);
					g_complex_parameter20=g_complex_parameter20+atof(l_complex_parameter20);
				}
			}

			}/*** End Of Fetch Count check ******/

			}/*** End Of Grouping For Loop ******/
			EXEC SQL CLOSE html2_group;			
		}
		else
		{
		
		/**** Stored procedure for REPORT DETAILS ***********************************************/
		
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID 27:|%s|\n",l_rept_id);
		printf("Calling Stored Procedure SP_REPORT_DETAIL for Report ID 28:|%s|\n",l_rept_id);
		//fflush(fl_userlog);
		EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
				:l_param2,:l_param3,:l_param4,
				:l_param5,:l_param6,
				:l_table_query,:l_table_query1,:l_table_query2,
				:l_table_query3,:l_table_query4,:l_table_query5,
				:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
				:l_group_desc,:l_error_desc);

		strcpy(table_query,l_table_query);
		strcat(table_query," ");
		
		if(strlen(l_table_query1) > 0)
		{
			strcat(table_query,l_table_query1);
			strcat(table_query," ");
		}
		if(strlen(l_table_query2) > 0)
		{
			strcat(table_query,l_table_query2);
			strcat(table_query," ");
		}
		if(strlen(l_table_query3) > 0)
		{
			strcat(table_query,l_table_query3);
			strcat(table_query," ");
		}
		if(strlen(l_table_query4) > 0)
		{
			strcat(table_query,l_table_query4);
			strcat(table_query," ");
		}
		if(strlen(l_table_query5) > 0)
		{
			strcat(table_query,l_table_query5);
			strcat(table_query," ");
		}
		
		strcat(table_query,APL_NULL_STRING);
			
		fprintf(fl_userlog," Inside Else Stored Procedure SP_REPORT_DETAIL ORA ERROR :|%d|\n",sqlca.sqlcode);
		
		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
		}
		
		//fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
		fprintf(fl_userlog,"l_criteria_query1:|%s|\n",l_criteria_query1);
		fprintf(fl_userlog,"l_criteria_query2:|%s|\n",l_criteria_query2);
		fprintf(fl_userlog,"l_criteria_query3:|%s|\n",l_criteria_query3);


		/****** Before table ***********************************************************************/
		
		if(strlen(h_report_details_struct.before_table_align) > 0)
		{
			if(strlen(h_report_details_struct.before_table) > 0)
			{	
				fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\"ALIGN=\"%s\"  class=\'beforetable\'>%s</TD></TR></TABLE>\n",h_report_details_struct.before_table_align,h_report_details_struct.before_table);

				g_line_count++;
			}
		}
		else
		{
			if(strlen(h_report_details_struct.before_table) > 0)
			{	
				fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\"ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD></TR></TABLE>\n",h_report_details_struct.before_table);

				g_line_count++;
			}

		}	
		
		l_before_table = h_report_details_struct.before_table_brk;
		while(l_before_table > 0)
		{
			fprintf(l_report_HTML2,"</BR>\n");
			l_before_table --;
			g_line_count++;
		}

		/******* Column Heading ******************************************************************/

		/****** Multiple Column Level **************************************/

		strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
		strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
		strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
		
		fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);

		if(strlen(l_multiple_col_flag) > 0)
		{
			fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
			fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);

			if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
					&l_multiple_col_header_value) == APL_FAILURE)
			{
				 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
				 APL_GOBACK_FAIL
			}

			if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
					&l_multiple_colspan_sep_value) == APL_FAILURE)
			{
				 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
				 APL_GOBACK_FAIL
			}


			fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
			fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);

			fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" border=\'%s\' cellSpacing=\'0\' cellPadding=\'1\'>\n",g_table_border);

			if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
			{
				for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
				{
					for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
					{
				
					if(int_a == int_b )
					{
					
					strcpy(l_level_header,l_multiple_col_header_value[int_a]);
					strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

					fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
					fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);

					if (CO_SplitStr(l_level_header,
							SEMISEP,
							&l_level_header_no,
							&l_level_header_value) == APL_FAILURE)
					{
						 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
						 APL_GOBACK_FAIL
					}

					if (CO_SplitStr(l_level_colspan,
							SEMISEP,
							&l_level_colspan_no,
							&l_level_colspan_value) == APL_FAILURE)
					{
						 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
						 APL_GOBACK_FAIL
					}

					fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
					fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);

					if(l_level_header_no == l_level_colspan_no)
					{

					fprintf(l_report_HTML2,"<TR>\n");
					for(int_aa=0;int_aa<l_level_header_no;int_aa++)
					{
						for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
						{
							if(int_aa == int_bb)
							{	
							
							strcpy(l_level_column,l_level_header_value[int_aa]);
							strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

							fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
							fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
							
							if(strlen(l_level_column) > 0)
								fprintf(l_report_HTML2,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >%s</TD> \n", l_level_col_span,l_level_column);
							else
								fprintf(l_report_HTML2,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >&nbsp;</TD> \n", l_level_col_span);


							}
						}
					}
					fprintf(l_report_HTML2,"</TR>\n");

					}/*** End Of Inner Condition check *****/

					}
					
											
					}/*** End Of 2st Main For Loop *******/

				}/*** End Of 1st Main For Loop *******/

			}/*** End Of Multiple col condition check *****/

			l_column_no=h_report_details_struct.no_of_columns;
			l_no_of_columns = h_report_details_struct.no_of_columns;

		}
		else
		{
		
		fprintf(fl_userlog,"COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
		printf("COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
		//fflush(fl_userlog);
		/**** Split the Column Header and print *****************/
		
		strcpy(l_column_header,h_report_details_struct.column_hdr);
		if (CO_SplitStr(l_column_header,COMASEP,&l_col_no,&l_col_value) == APL_FAILURE)
		{
			 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
			 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_header);
			 APL_GOBACK_FAIL
		}

		/***** Table Column Heading and its records  *********/

		fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" border=\'%s\'  cellSpacing=\'0\' cellPadding=\'1\' >\n",g_table_border);

		fprintf(l_report_HTML2,"<TR >\n");
		for(i=0;i<l_col_no;i++)
		{
			strcpy(l_column_value,l_col_value[i]);

			fprintf(l_report_HTML2,"<TD class=\'ez4\'  >%s</TD>\n",l_column_value);
		}
		fprintf(l_report_HTML2,"</TR>\n");

		
		l_column_no=h_report_details_struct.no_of_columns;
		l_no_of_columns = h_report_details_struct.no_of_columns;
		
		l_col_hdr = h_report_details_struct.col_hdr_brk;
		
		}

		EXEC SQL PREPARE HTML2_SUB2 FROM :table_query;	
		EXEC SQL DECLARE html2tablequery2 CURSOR FOR HTML2_SUB2;
		EXEC SQL OPEN html2tablequery2;

		if(sqlca.sqlcode < 0)
		{
			fprintf(fl_userlog,"Error : Open Cursor html2tablequery2 ORA ERROR :|%d|\n",sqlca.sqlcode);
		}

		l_fetch_count=0;

		for(;;)
		{
			EXEC SQL FETCH html2tablequery2
				INTO :l_table_parameter;

			if(sqlca.sqlcode == 1403)
			{
				fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
				if(l_fetch_count == 0)
				{
					fprintf(l_report_HTML2,"<TR>\n");
					fprintf(l_report_HTML2,"<TD WIDTH=\'100%%\' COLSPAN=\'%d\' class=\'ez4\'>NO RECORDS FOUND </TD>\n",l_column_no);
					fprintf(l_report_HTML2,"</TR>\n");
						
					l_remove_count ++;
					g_line_count++;
				}
				break;
			}

			if(sqlca.sqlcode < 0)
			{
			   fprintf(fl_userlog,"Error : Fetch Cursor html2tablequery2 --- ORA ERROR:|%d|\n",sqlca.sqlcode);
			   break;
			}


			strcpy(l_column_parameter,l_table_parameter);
			
			/******* Split the string and fetch the column data into seperate variables *********/
		
			if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
			 	fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
			 	APL_GOBACK_FAIL
			}

			/***** For Number Formatting ***************************************************/

			strcpy(l_format_col_pos,h_report_details_struct.format_col_pos);
			if (CO_SplitStr(l_format_col_pos,COMASEP,&l_format_col_no,&l_format_col_val) == APL_FAILURE)
			{
				 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_format_col_pos);
				 APL_GOBACK_FAIL
			}

			fprintf(l_report_HTML2,"<TR>\n");

			for(j=0;j<l_column_num;j++)
			{
				strcpy(l_column,l_column_val[j]);
				
				l_format_col_flag = 0;
				if(l_format_col_no > 0)
				{
					for (k=0;k<l_format_col_no;k++)
					{
						strcpy(l_format_col_value,l_format_col_val[k]);

						if(j==(atoi(l_format_col_value)-1))
							l_format_col_flag = 1;
					}

					if((strlen(l_column) > 0) && (strcmp(l_column," ")))
					{
						if(l_format_col_flag == 1)
						{
							EXEC SQL CALL SP_NUMBER_FORMATTING(:l_column,:l_error_desc);

							if(strlen(l_error_desc) > 0)
								fprintf(l_report_HTML2,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
							else
								fprintf(l_report_HTML2,"<TD class=\'record\' ALIGN=\"RIGHT\">%s</TD>\n",l_column);
						}
						else
						{
							fprintf(l_report_HTML2,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
						}
					}
					else
						 fprintf(l_report_HTML2,"<TD class=\'record\'  >&nbsp</TD>\n");

				}
				else
				{
					if((strlen(l_column) > 0) && (strcmp(l_column," ")))
						fprintf(l_report_HTML2,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
					else
						fprintf(l_report_HTML2,"<TD class=\'record\'  >&nbsp</TD>\n");
				}

			}
			fprintf(l_report_HTML2,"</TR>\n");


			/***********************************************************************************/

			l_fetch_count ++;

		}
		EXEC SQL CLOSE html2tablequery2;

		/********* For Criteria column value display ********************************************/
		
		if(h_report_details_struct.tot_criteria_cols > 0)
		{
			if(strlen(h_report_details_struct.criteria_col1_query) > 0)
			{
				EXEC SQL PREPARE CR1 FROM :l_criteria_query1;
				EXEC SQL DECLARE criteria1 CURSOR FOR CR1;
				EXEC SQL OPEN criteria1;
				
				if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Failed to Open criteria1 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
				}

				for(;;)
				{
				EXEC SQL FETCH criteria1 INTO :l_criteria_value1;
				
				       if(sqlca.sqlcode == 1403)
				       break;

				       if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				       {
						fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
					  		break;
				       }
				}
				EXEC SQL CLOSE criteria1;

				if(strcmp(l_criteria_value1,APL_NULL_STRING))
				{
				EXEC SQL SELECT (:l_criteria_value1) INTO :l_criteria1_total FROM DUAL;
				
				l_grand_total1=l_grand_total1+l_criteria1_total;

				fprintf(fl_userlog,"l_grand_total1 :|%lf|\n",l_grand_total1);

				EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value1,:l_error_desc);

				fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);

				fprintf(l_report_HTML2,"<TR>\n");
				fprintf(l_report_HTML2,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col1_name,l_criteria_value1);
				fprintf(l_report_HTML2,"</TR>\n");

				g_line_count++;

				}
			}

			if(strlen(h_report_details_struct.criteria_col2_query) > 0)
			{
				EXEC SQL PREPARE CR2 FROM :l_criteria_query2;
				EXEC SQL DECLARE criteria2 CURSOR FOR CR2;
				EXEC SQL OPEN criteria2;
				
				if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Failed to Open criteria2 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
				}

				for(;;)
				{
				EXEC SQL FETCH criteria2 INTO :l_criteria_value2;
				
				       if(sqlca.sqlcode == 1403)
				       break;

				       if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				       {
							fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
					  		break;
				       }
				}
				EXEC SQL CLOSE criteria2;
				
				
				if(strcmp(l_criteria_value2,APL_NULL_STRING))
				{
				EXEC SQL SELECT (:l_criteria_value2) INTO :l_criteria2_total FROM DUAL;
				
				l_grand_total2=l_grand_total2+l_criteria2_total;
				
				fprintf(fl_userlog,"l_grand_total2 :|%lf|\n",l_grand_total2);

				EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value2,:l_error_desc);

				fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);

				fprintf(l_report_HTML2,"<TR>\n");
				fprintf(l_report_HTML2,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col2_name,l_criteria_value2);

				fprintf(l_report_HTML2,"</TR>\n");

				g_line_count++;

				}
			}

			if(strlen(h_report_details_struct.criteria_col3_query) > 0)
			{
				EXEC SQL PREPARE CR3 FROM :l_criteria_query3;
				EXEC SQL DECLARE criteria3 CURSOR FOR CR3;
				EXEC SQL OPEN criteria3;
				
				if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Failed to Open criteria3 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
				}

				for(;;)
				{
				EXEC SQL FETCH criteria3 INTO :l_criteria_value3;
				
				       if(sqlca.sqlcode == 1403)
				       break;

				       if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				       {
							fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
					  		break;
				       }
				}
				EXEC SQL CLOSE criteria3;
				
				
				if(strcmp(l_criteria_value3,APL_NULL_STRING))
				{
				EXEC SQL SELECT (:l_criteria_value3) INTO :l_criteria3_total FROM DUAL;
			
				l_grand_total3=l_grand_total3+l_criteria3_total;
				
				fprintf(fl_userlog,"l_grand_total3 :|%lf|\n",l_grand_total3);

				EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value3,:l_error_desc);

				fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);

				fprintf(l_report_HTML2,"<TR>\n");
				fprintf(l_report_HTML2,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col3_name,l_criteria_value3);
				fprintf(l_report_HTML2,"</TR>\n");

				g_line_count++;

				}
			}
		}

		/******* Complex Criteria Part *********************************************/


		strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
		strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
		strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
		strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

		fprintf(fl_userlog,"Before Complex Part -- l_fetch_count 6:|%d|\n",l_fetch_count);

		if(l_fetch_count > 0)
		{

		if(strlen(complex_criteria_query) > 0)
		{
		
		EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
				:complex_criteria_query,
				'@PARAM1',:l_param1),
				'@PARAM2',:l_param2),
				'@PARAM3',:l_param3),
				'@PARAM4',:l_param4),
				'@PARAM5',:l_param5),
				'@PARAM6',:l_param6),
				REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
				:complex_criteria_query1,
				'@PARAM1',:l_param1),
				'@PARAM2',:l_param2),
				'@PARAM3',:l_param3),
				'@PARAM4',:l_param4),
				'@PARAM5',:l_param5),
				'@PARAM6',:l_param6)
			INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;
		
		strcat(complex_criteria_query,complex_criteria_query1);

		fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);

		EXEC SQL PREPARE CMPX_CURR FROM :complex_criteria_query;

		EXEC SQL DECLARE complex_curr CURSOR FOR CMPX_CURR;

		fprintf(fl_userlog,"After DECLARE complex_curr :|%d|\n",sqlca.sqlcode);

		EXEC SQL OPEN complex_curr;

		EXEC SQL FETCH complex_curr INTO :l_complex_parameter;

		fprintf(fl_userlog,"After FETCH complex_curr :|%d|\n",sqlca.sqlcode);

		EXEC SQL CLOSE complex_curr;

		fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);

		if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
		{
			CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		 	fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
		 	APL_GOBACK_FAIL
		}
		
		fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);

		if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
		{
			CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		 	fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
		 	APL_GOBACK_FAIL
		}


		fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
		fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);

		l_complex_break_flag = 0;

		
		if(l_complex_num == l_complex_pos_num)
		{

		fprintf(l_report_HTML2,"<TR>\n");

		for(i=0;i<l_column_num;i++)
		{
			for(j=0;j<l_complex_pos_num;j++)
			{

			strcpy(l_complex_pos_column,l_complex_pos_val[j]);

			if((i==0)&&(j==0))
			{
				if(strlen(complex_criteria_label) > 0)
				{
					fprintf(l_report_HTML2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" >%s</TD>\n",complex_criteria_label);
			  		l_complex_break_flag=1;
				}
				else
			     	fprintf(l_report_HTML2,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
			}

			if(i== (atoi(l_complex_pos_column)-1))
			{				  
			  strcpy(l_complex_column,l_complex_val[j]);

			  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);

			  l_complex_break_flag=1;
			  
			  if(strlen(l_complex_column) > 0)
			  {
				  EXEC SQL CALL SP_NUMBER_FORMATTING(:l_complex_column,:l_error_desc);

				  if(strlen(l_error_desc) > 0)
					fprintf(l_report_HTML2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">%s</TD>\n",l_complex_column);
				  else
					fprintf(l_report_HTML2,"<TD class=\'lableredbg\' ALIGN=\"RIGHT\">%s</TD>\n",l_complex_column);
			  }
			  else
			  {
					fprintf(l_report_HTML2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">&nbsp;</TD>\n");
			  }
			
			  break;
			}
			else
			{
			     l_complex_break_flag = 0;
			     continue;
			} 

			}
			     
			if(i != 0)
			{
			  if(l_complex_break_flag != 1)
			     fprintf(l_report_HTML2,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
			}
		}

		}
		else
		{
			fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
		}

		fprintf(l_report_HTML2,"</TR>\n");

		}

		}
		else
		{			
			fprintf(fl_userlog," No Records Found -- So No Need To Display Criteria \n");
		}
		

		/***************************************************************************/
				
		fprintf(l_report_HTML2,"</TABLE>\n");

		/****** After table ********************************************************/
		
		l_after_table = h_report_details_struct.after_table_brk;
		while(l_after_table > 0)
		{
			fprintf(l_report_HTML2,"</BR>\n");
			l_after_table --;
			g_line_count++;
		}

		if(strlen(h_report_details_struct.after_table_align) > 0)
		{
			if(strlen(h_report_details_struct.after_table) > 0)
			{	
				fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'beforetable\'>%s</TD></TR></TABLE>\n",h_report_details_struct.after_table_align,h_report_details_struct.after_table);

				g_line_count++;
			}
		}
		else
		{
			if(strlen(h_report_details_struct.after_table) > 0)
			{	
				fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD></TR></TABLE>\n",h_report_details_struct.after_table);

				g_line_count++;
			}

		}	
  
		/************ Table Footer note *************************************/
	
		l_table_footer = h_report_details_struct.table_footer_brk;
		if(l_table_footer > 0)
		{
			fprintf(l_report_HTML2,"</BR>\n");
			l_table_footer --;
			g_line_count++;
		}
		
		if(strlen(h_report_details_struct.table_footer_align) > 0)
		{
			if(strlen(h_report_details_struct.table_footer) > 0)
			{
				fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'lableredbg\'>%s</TD></TR></TABLE>\n",h_report_details_struct.table_footer_align,h_report_details_struct.table_footer);

				g_line_count++;
			}
		}
		else
		{
			if(strlen(h_report_details_struct.table_footer) > 0)
			{
				fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'lableredbg\'>%s</TD></TR></TABLE>\n",h_report_details_struct.table_footer);

				g_line_count++;
			}

		}

		l_table = h_report_main_struct.table_brk;
		if(l_table > 0)
		{
			fprintf(l_report_HTML2,"</BR>\n");
			l_table --;
			g_line_count++;
		}

		if( l_fetch_count > 0 )
		{
			for(m=0;m<l_complex_num;m++)
			{
				if(m == 0)
				{
					strcpy(l_complex_parameter1,l_complex_val[m]);
					g_complex_parameter1=atof(l_complex_parameter1);
				}
				else if(m == 1)
				{
					strcpy(l_complex_parameter2,l_complex_val[m]);
					g_complex_parameter2=atof(l_complex_parameter2);
				}
				else if(m == 2)
				{
					strcpy(l_complex_parameter3,l_complex_val[m]);
					g_complex_parameter3=atof(l_complex_parameter3);
				}
				else if(m == 3)
				{
					strcpy(l_complex_parameter4,l_complex_val[m]);
					g_complex_parameter4=atof(l_complex_parameter4);
				}
				else if(m == 4)
				{
					strcpy(l_complex_parameter5,l_complex_val[m]);
					g_complex_parameter5=atof(l_complex_parameter5);
				}
				else if(m == 5)
				{
					strcpy(l_complex_parameter6,l_complex_val[m]);
					g_complex_parameter6=atof(l_complex_parameter6);
				}
				else if(m == 6)
				{
					strcpy(l_complex_parameter7,l_complex_val[m]);
					g_complex_parameter7=atof(l_complex_parameter7);
				}
				else if(m == 7)
				{
					strcpy(l_complex_parameter8,l_complex_val[m]);
					g_complex_parameter8=atof(l_complex_parameter8);
				}
				else if(m == 8)
				{
					strcpy(l_complex_parameter9,l_complex_val[m]);
					g_complex_parameter9=atof(l_complex_parameter9);
				}
				else if(m == 9)
				{
					strcpy(l_complex_parameter10,l_complex_val[m]);
					g_complex_parameter10=atof(l_complex_parameter10);
				}
				else if(m == 10)
				{
					strcpy(l_complex_parameter11,l_complex_val[m]);
					g_complex_parameter11=atof(l_complex_parameter11);
				}
				else if(m == 11)
				{
					strcpy(l_complex_parameter12,l_complex_val[m]);			
					g_complex_parameter12=atof(l_complex_parameter12);
				}
				else if(m == 12)
				{
					strcpy(l_complex_parameter13,l_complex_val[m]);
					g_complex_parameter13=atof(l_complex_parameter13);
				}
				else if(m == 13)
				{
					strcpy(l_complex_parameter14,l_complex_val[m]);
					g_complex_parameter14=atof(l_complex_parameter14);
				}
				else if(m == 14)
				{
					strcpy(l_complex_parameter15,l_complex_val[m]);
					g_complex_parameter15=atof(l_complex_parameter15);
				}
				else if(m == 15)
				{
					strcpy(l_complex_parameter16,l_complex_val[m]);
					g_complex_parameter16=atof(l_complex_parameter16);
				}
				else if(m == 16)
				{
					strcpy(l_complex_parameter17,l_complex_val[m]);
					g_complex_parameter17=atof(l_complex_parameter17);
				}
				else if(m == 17)
				{
					strcpy(l_complex_parameter18,l_complex_val[m]);
					g_complex_parameter18=atof(l_complex_parameter18);
				}
				else if(m == 18)
				{
					strcpy(l_complex_parameter19,l_complex_val[m]);
					g_complex_parameter19=atof(l_complex_parameter19);
				}
				else if(m == 19)
				{
					strcpy(l_complex_parameter20,l_complex_val[m]);
					g_complex_parameter20=atof(l_complex_parameter20);
				}

			}/*** End of Complex For Loop ***/

		}/*** End Of Fetch Count Check ****/

		}/******* End Of Grouping Else Block **********/

		/*************** Complex Criteria Individual  *********************/
		
		if(l_fetch_count > 0 )
		{
			fprintf(fl_userlog,"g_complex_parameter1 :|%lf|\tg_complex_parameter2 :|%lf|\n",g_complex_parameter1,g_complex_parameter2);
			fprintf(fl_userlog,"g_complex_parameter3 :|%lf|\tg_complex_parameter4 :|%lf|\n",g_complex_parameter3,g_complex_parameter4);
			fprintf(fl_userlog,"g_complex_parameter5 :|%lf|\tg_complex_parameter6 :|%lf|\n",g_complex_parameter5,g_complex_parameter6);
			fprintf(fl_userlog,"g_complex_parameter7 :|%lf|\tg_complex_parameter8 :|%lf|\n",g_complex_parameter7,g_complex_parameter8);
			fprintf(fl_userlog,"g_complex_parameter9 :|%lf|\tg_complex_parameter10 :|%lf|\n",g_complex_parameter9,g_complex_parameter10);
			fprintf(fl_userlog,"g_complex_parameter11 :|%lf|\tg_complex_parameter12 :|%lf|\n",g_complex_parameter11,g_complex_parameter12);
			fprintf(fl_userlog,"g_complex_parameter13 :|%lf|\tg_complex_parameter14 :|%lf|\n",g_complex_parameter13,g_complex_parameter14);
			fprintf(fl_userlog,"g_complex_parameter15 :|%lf|\tg_complex_parameter16 :|%lf|\n",g_complex_parameter15,g_complex_parameter16);
			fprintf(fl_userlog,"g_complex_parameter17 :|%lf|\tg_complex_parameter18 :|%lf|\n",g_complex_parameter17,g_complex_parameter18);
			fprintf(fl_userlog,"g_complex_parameter19 :|%lf|\tg_complex_parameter20 :|%lf|\n",g_complex_parameter19,g_complex_parameter20);
		}


		/*******************************************************************/


		/********* Dynamic Footer Display ****************************************/

		strcpy(footer_query,h_report_details_struct.footer_query);
		
		if(strlen(footer_query) > 0)
		{

		/**** Stored Procedure : SP_REPORT_FOOTER ***********************************/

		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
		printf("Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
		//fflush(fl_userlog);
		EXEC SQL CALL SP_REPORT_FOOTER(:l_rept_id,:l_table_id,:l_param1,:l_param2,
					:l_param3,:l_param4, :l_param5,
					:l_param6,:l_footer_query,:l_footer_query1,:l_error_desc); 

		strcat(l_footer_query,l_footer_query1);

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER ERR DESC :|%s|\n",l_error_desc);
		}

		fprintf(fl_userlog,"FOOTER QUERY :|%s|\n",l_footer_query);

		strcpy(l_footer_query_value,APL_NULL_STRING);

		EXEC SQL PREPARE FOOTER_CURR FROM :l_footer_query;

		EXEC SQL DECLARE footer_curr CURSOR FOR FOOTER_CURR;
		
		fprintf(fl_userlog,"After DECLARE footer_curr :|%d|\n",sqlca.sqlcode);

		EXEC SQL OPEN footer_curr;

		EXEC SQL FETCH footer_curr INTO :l_footer_query_value;
		fprintf(fl_userlog,"After FETCH footer_curr :|%d|\n",sqlca.sqlcode);

		EXEC SQL CLOSE footer_curr;

		fprintf(fl_userlog,"l_footer_query_value :|%s|\n",l_footer_query_value);

		l_footer_num = 0;

		strcpy(l_footer1,APL_NULL_STRING);
		strcpy(l_footer2,APL_NULL_STRING);
		strcpy(l_footer3,APL_NULL_STRING);
		strcpy(l_footer4,APL_NULL_STRING);
		strcpy(l_footer5,APL_NULL_STRING);
		strcpy(l_footer6,APL_NULL_STRING);
		strcpy(l_footer7,APL_NULL_STRING);
		strcpy(l_footer8,APL_NULL_STRING);
		strcpy(l_footer9,APL_NULL_STRING);
		strcpy(l_footer10,APL_NULL_STRING);
		strcpy(l_footer11,APL_NULL_STRING);
		strcpy(l_footer12,APL_NULL_STRING);
		strcpy(l_footer13,APL_NULL_STRING);
		strcpy(l_footer14,APL_NULL_STRING);
		strcpy(l_footer15,APL_NULL_STRING);

		if(strlen(l_footer_query_value) > 0)
		{		
			if (CO_SplitStr(l_footer_query_value,CAPSEP,&l_footer_num,&l_footer_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_footer_query_value);
				APL_GOBACK_FAIL
			}

			fprintf(fl_userlog,"l_footer_num :|%d|\n",l_footer_num);
			if(l_footer_num > 0)
			{
				for(i=0;i<l_footer_num;i++)
				{
					if(i == 0)
					strcpy(l_footer1,l_footer_val[i]);
					else if(i == 1)
					strcpy(l_footer2,l_footer_val[i]);
					else if(i == 2)
					strcpy(l_footer3,l_footer_val[i]);
					else if(i == 3)
					strcpy(l_footer4,l_footer_val[i]);
					else if(i == 4)
					strcpy(l_footer5,l_footer_val[i]);
					else if(i == 5)
					strcpy(l_footer6,l_footer_val[i]);
					else if(i == 6)
					strcpy(l_footer7,l_footer_val[i]);
					else if(i == 7)
					strcpy(l_footer8,l_footer_val[i]);
					else if(i == 8)
					strcpy(l_footer9,l_footer_val[i]);
					else if(i == 9)
					strcpy(l_footer10,l_footer_val[i]);
					else if(i == 10)
					strcpy(l_footer11,l_footer_val[i]);
					else if(i == 11)
					strcpy(l_footer12,l_footer_val[i]);
					else if(i == 12)
					strcpy(l_footer13,l_footer_val[i]);
					else if(i == 13)
					strcpy(l_footer14,l_footer_val[i]);
					else if(i == 14)
					strcpy(l_footer15,l_footer_val[i]);
				}
			}

		}/************ End Of Footer Value Check ***************************************/

		/****** Stored Procedure : SP_REPORT_FOOTER_DATA ***********************************/

		fprintf(fl_userlog,"l_footer1 :|%s|\t l_footer2 :|%s|\n",l_footer1,l_footer2);
		fprintf(fl_userlog,"l_footer3 :|%s|\t l_footer4 :|%s|\n",l_footer3,l_footer4);
		fprintf(fl_userlog,"l_footer5 :|%s|\t l_footer6 :|%s|\n",l_footer5,l_footer6);
		fprintf(fl_userlog,"l_footer7 :|%s|\t l_footer8 :|%s|\n",l_footer7,l_footer8);
		fprintf(fl_userlog,"l_footer9 :|%s|\t l_footer10 :|%s|\n",l_footer9,l_footer10);
		fprintf(fl_userlog,"l_footer11 :|%s|\t l_footer12 :|%s|\n",l_footer11,l_footer12);
		fprintf(fl_userlog,"l_footer13 :|%s|\t l_footer14 :|%s|\n",l_footer13,l_footer14);
		fprintf(fl_userlog,"l_footer15 :|%s|\n",l_footer15);

		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);	
		printf("Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);		
		//fflush(fl_userlog);
		EXEC SQL CALL SP_REPORT_FOOTER_DATA(:l_rept_id,:l_table_id,
							:l_footer1,:l_footer2,
							:l_footer3,:l_footer4,
							:l_footer5,:l_footer6,
							:l_footer7,:l_footer8,
							:l_footer9,:l_footer10,
							:l_footer11,:l_footer12,
							:l_footer13,:l_footer14,
							:l_footer15,
							:g_complex_parameter1,:g_complex_parameter2,
							:g_complex_parameter3,:g_complex_parameter4,
							:g_complex_parameter5,:g_complex_parameter6,
							:g_complex_parameter7,:g_complex_parameter8,
							:g_complex_parameter9,:g_complex_parameter10,
							:g_complex_parameter11,:g_complex_parameter12,
							:g_complex_parameter13,:g_complex_parameter14,
							:g_complex_parameter15,:g_complex_parameter16,
							:g_complex_parameter17,:g_complex_parameter18,
							:g_complex_parameter19,:g_complex_parameter20,
							:l_footer_data,:l_error_desc);

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER_DATA ERR DESC :|%s|\n",l_error_desc);
		}

		fprintf(fl_userlog,"FOOTER DATA :|%s|\n",l_footer_data);

		/************ Dynamic Formating Procedure ********************************************/
		
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);	
		printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
		//fflush(fl_userlog);
		EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_footer_data,:l_error_desc); 

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
		}

		fprintf(fl_userlog,"FOOTER DATA After Formatting -- :|%s|\n",l_footer_data);


		/*************************************************************************************/

		/************ Dynamic Footer Data Display **********************************************/
		
		fprintf(fl_userlog,"strlen(l_footer_data) :|%d|\n",strlen(l_footer_data));

		if(strlen(l_footer_data) > 0)
		{
			fprintf(fl_userlog,"Displaying Footer Data --- \n");

			fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\"><TR>\n");
			fprintf(l_report_HTML2,"<TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'headerdata\'>%s</TD>\n",h_report_details_struct.footer_data_align,l_footer_data);
			fprintf(l_report_HTML2,"</TR></TABLE>\n");
		}

		l_footer_data_brk = h_report_details_struct.footer_data_brk;
		while(l_footer_data_brk > 0)
		{
			fprintf(l_report_HTML2,"</BR>\n");
			l_footer_data_brk --;
			g_line_count++;
		}

		}

		/***************** End Of Dynamic Footer Display  *****************************/



		/***************** Final Complex Criteria Calculation *************************/

		fprintf(fl_userlog,"\n--- l_table_id --- 7:|%d|\n",l_table_id);

		if(l_table_id == 1)
		{
			f_complex_parameter1=f_complex_parameter1+g_complex_parameter1;
			f_complex_parameter2=f_complex_parameter2+g_complex_parameter2;
			f_complex_parameter3=f_complex_parameter3+g_complex_parameter3;
			f_complex_parameter4=f_complex_parameter4+g_complex_parameter4;
			f_complex_parameter5=f_complex_parameter5+g_complex_parameter5;
			f_complex_parameter6=f_complex_parameter6+g_complex_parameter6;
			f_complex_parameter7=f_complex_parameter7+g_complex_parameter7;
			f_complex_parameter8=f_complex_parameter8+g_complex_parameter8;
			f_complex_parameter9=f_complex_parameter9+g_complex_parameter9;
			f_complex_parameter10=f_complex_parameter10+g_complex_parameter10;
			f_complex_parameter11=f_complex_parameter11+g_complex_parameter11;
			f_complex_parameter12=f_complex_parameter12+g_complex_parameter12;
			f_complex_parameter13=f_complex_parameter13+g_complex_parameter13;
			f_complex_parameter14=f_complex_parameter14+g_complex_parameter14;
			f_complex_parameter15=f_complex_parameter15+g_complex_parameter15;
			f_complex_parameter16=f_complex_parameter16+g_complex_parameter16;
			f_complex_parameter17=f_complex_parameter17+g_complex_parameter17;
			f_complex_parameter18=f_complex_parameter18+g_complex_parameter18;
			f_complex_parameter19=f_complex_parameter19+g_complex_parameter19;
			f_complex_parameter20=f_complex_parameter20+g_complex_parameter20;
		}

		/******************************************************************************/

		l_table_id ++;

	}/***** End Of Table Id Fetch ***************************************/
	
	}
	l_client_fetch_count ++;


	}/***** End Of Record Count check ****************************/

	}/***** End Of Sub Client Fetch *****************************/

	EXEC SQL CLOSE htmlsubclient;

	/********** For Displaying Grand Criteria Total ****************************************/

	fprintf(fl_userlog,"GRAND TOTAL FLAG is 5:|%s|\n",h_report_details_struct.grand_total_flag);
	//fflush(fl_userlog);
	EXEC SQL SELECT ROUND(:l_grand_total1,2),ROUND(:l_grand_total2,2),ROUND(:l_grand_total3,2)
			   INTO :l_grand_round1,:l_grand_round2,:l_grand_round3
				FROM DUAL;

	fprintf(fl_userlog,"After Grand Total Round -- ORA ERROR 5:|%d|\n",sqlca.sqlcode);

	fprintf(fl_userlog,"l_grand_round1:|%s|\n",l_grand_round1);
	fprintf(fl_userlog,"l_grand_round2:|%s|\n",l_grand_round2);
	fprintf(fl_userlog,"l_grand_round3:|%s|\n",l_grand_round3);

	printf("l_grand_round1:|%s|\n",l_grand_round1);
	//fflush(fl_userlog);
	printf("l_grand_round2:|%s|\n",l_grand_round2);
	//fflush(fl_userlog);
	printf("l_grand_round3:|%s|\n",l_grand_round3);	
//fflush(fl_userlog);

	/********* Grand display Check ************************************************/

	fprintf(fl_userlog,"g_setting_flag:|%s|\n",g_setting_flag);
	printf("g_setting_flag:|%s|\n",g_setting_flag);
//fflush(fl_userlog);
	if(!strcmp(g_setting_flag,"U"))
		strcpy(l_grand_display,"GRAND");
	else if(!strcmp(g_setting_flag,"L"))
		strcpy(l_grand_display,"grand");
	else 
		strcpy(l_grand_display,"Grand");

	/********************************************************************************/

	if(strlen(h_report_details_struct.grand_total_flag) > 0)
	{
		fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" class=\'ez4\'>\n");

		EXEC SQL CALL SP_NUMBER_FORMATTING(:l_grand_round1,:l_error_desc);

		fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
		
		if(l_grand_total1 > 0)
		fprintf(l_report_HTML2,"<TR><TD WIDTH=\"100%%\" ALIGN=\"RIGHT\" class=\'ez4\'>%s %s = %s</TD></TR>\n",l_grand_display,h_report_details_struct.criteria_col1_name,l_grand_round1);

		EXEC SQL CALL SP_NUMBER_FORMATTING(:l_grand_round2,:l_error_desc);

		fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
		
		if(l_grand_total2 > 0)
		fprintf(l_report_HTML2,"<TR><TD WIDTH=\"100%%\" ALIGN=\"RIGHT\" class=\'ez4\'>%s %s = %s</TD></TR>\n",l_grand_display,h_report_details_struct.criteria_col2_name,l_grand_round2);

		EXEC SQL CALL SP_NUMBER_FORMATTING(:l_grand_round3,:l_error_desc);

		fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
		
		if(l_grand_total3 > 0)
		fprintf(l_report_HTML2,"<TR><TD WIDTH=\"100%%\" ALIGN=\"RIGHT\" class=\'ez4\'>%s %s = %s</TD></TR>\n",l_grand_display,h_report_details_struct.criteria_col3_name,l_grand_round3);
		
		fprintf(l_report_HTML2,"</TABLE>\n");
		fprintf(l_report_HTML2,"</BR>\n");

	}

	/************* Grand Complex Criteria Display ******************************************/
		
	fprintf(fl_userlog,"f_complex_parameter1 :|%lf|\tf_complex_parameter2 :|%lf|\n",f_complex_parameter1,f_complex_parameter2);
	fprintf(fl_userlog,"f_complex_parameter3 :|%lf|\tf_complex_parameter4 :|%lf|\n",f_complex_parameter3,f_complex_parameter4);
	fprintf(fl_userlog,"f_complex_parameter5 :|%lf|\tf_complex_parameter6 :|%lf|\n",f_complex_parameter5,f_complex_parameter6);
	fprintf(fl_userlog,"f_complex_parameter7 :|%lf|\tf_complex_parameter8 :|%lf|\n",f_complex_parameter7,f_complex_parameter8);
	fprintf(fl_userlog,"f_complex_parameter9 :|%lf|\tf_complex_parameter10 :|%lf|\n",f_complex_parameter9,f_complex_parameter10);
	fprintf(fl_userlog,"f_complex_parameter11 :|%lf|\tf_complex_parameter12 :|%lf|\n",f_complex_parameter11,f_complex_parameter12);
	fprintf(fl_userlog,"f_complex_parameter13 :|%lf|\tf_complex_parameter14 :|%lf|\n",f_complex_parameter13,f_complex_parameter14);
	fprintf(fl_userlog,"f_complex_parameter15 :|%lf|\tf_complex_parameter16 :|%lf|\n",f_complex_parameter15,f_complex_parameter16);
	fprintf(fl_userlog,"f_complex_parameter17 :|%lf|\tf_complex_parameter18 :|%lf|\n",f_complex_parameter17,f_complex_parameter18);
	fprintf(fl_userlog,"f_complex_parameter19 :|%lf|\tf_complex_parameter20 :|%lf|\n",f_complex_parameter19,f_complex_parameter20);

	strcpy(complex_criteria,h_report_details_struct.complex_criteria);

	fprintf(fl_userlog,"strlen(complex_criteria) :|%d|\n",strlen(complex_criteria));

	if(strlen(complex_criteria) > 0 )
	{
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_CRITERIA :|%s|\n",l_rept_id);	
		printf("Calling Stored Procedure SP_REPORT_CRITERIA :|%s|\n",l_rept_id);	
		//fflush(fl_userlog);
		EXEC SQL CALL SP_REPORT_CRITERIA(:complex_criteria,
						 :f_complex_parameter1,:f_complex_parameter2,
						 :f_complex_parameter3,:f_complex_parameter4,
						 :f_complex_parameter5,:f_complex_parameter6,
						 :f_complex_parameter7,:f_complex_parameter8,
						 :f_complex_parameter9,:f_complex_parameter10,
						 :f_complex_parameter11,:f_complex_parameter12,
						 :f_complex_parameter13,:f_complex_parameter14,
						 :f_complex_parameter15,:f_complex_parameter16,
						 :f_complex_parameter17,:f_complex_parameter18,
						 :f_complex_parameter19,:f_complex_parameter20,
						 :l_complex_criteria_data,:l_error_desc); 

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_CRITERIA ERR DESC :|%s|\n",l_error_desc);
		}

		fprintf(fl_userlog,"COMPLEX CRITERIA DATA :|%s|\n",l_complex_criteria_data);

		/************ Dynamic Formating Procedure ********************************************/
		
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);	
		printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
		//fflush(fl_userlog);
		EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_complex_criteria_data,:l_error_desc); 

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
		}

		fprintf(fl_userlog,"COMPLEX CRITERIA DATA After Formatting -- :|%s|\n",l_complex_criteria_data);


		/***************************************************************************/

		/************ COMPLEX CRITERIA DATA Display ********************************/
		
		fprintf(fl_userlog,"strlen(l_complex_criteria_data) :|%d|\n",strlen(l_complex_criteria_data));

		if(strlen(l_complex_criteria_data) > 0)
		{
			fprintf(fl_userlog,"Displaying l_complex_criteria_data Data --- \n");

			fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\"><TR>\n");
			fprintf(l_report_HTML2,"<TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'headerdata\'>%s</TD>\n",l_complex_criteria_data);
			fprintf(l_report_HTML2,"</TR></TABLE>\n");
		}

	}


	/***************************************************************************/

	/******* Page Footer note **************************************************/
		
	if(strlen(h_report_main_struct.page_footer_align) > 0)
	{
		if(strlen(h_report_main_struct.page_footer) > 0)
		{
			fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" class=\'footer\'><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'footer\'>%s</TD><TR></TABLE>\n",h_report_main_struct.page_footer_align,h_report_main_struct.page_footer);
		}
	}
	else
	{
		if(strlen(h_report_main_struct.page_footer) > 0)
		{
			fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" class=\'footer\'><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'footer\'>%s</TD><TR></TABLE>\n",h_report_main_struct.page_footer);
		}

	}

	l_page_footer = h_report_main_struct.page_footer_brk;
	if(l_page_footer > 0)
	{
		fprintf(l_report_HTML2,"</BR>\n");
		l_page_footer --;
	}
	
	
	/******* Disclaimer **************************************************/
		
	if(strlen(h_report_main_struct.disclaimer) > 0)
	{
		fprintf(l_report_HTML2,"<TABLE WIDTH=\"100%%\" class=\'footer\'><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'footer\'>%s</TD><TR></TABLE>\n",h_report_main_struct.disclaimer);

	}

	/********************************************************************/



	fprintf(l_report_HTML2,"</BODY></HTML>\n");
	

	fprintf(fl_userlog,"REMOVE FLAG :|%d|\n",l_remove_flag);
	fprintf(fl_userlog,"REMOVE PATH :|%s|\n",l_remove_file_path);
	
	if(l_remove_flag == 1)
	{
		system(l_remove_file_path);

		fprintf(fl_userlog,"Removing File Since No Data Found For The Report\n");
		fprintf(fl_userlog,"Delete File Name :- |%s|\n",l_report_name);
		printf("Removing File Since No Data Found For The Report\n");
		//fflush(fl_userlog);
		printf("Delete File Name :- |%s|\n",l_report_name);
//fflush(fl_userlog);
		EXEC SQL DELETE FROM PRO_COMMON_REPORT 
			 WHERE REPORT_NAME=:l_report_name;

		fprintf(fl_userlog,"After DELETE File ORA ERROR :|%d|\n",sqlca.sqlcode); 
   	}
	else
	{
	if(strlen(l_compress_flag) == 0 || !strcmp(l_compress_flag,"N"))
	{
		if((strlen(l_web_source_from) > 0) && !(strcmp(l_web_source_from,"W")))
		{
			EXEC SQL CALL SP_SHOW_REAL_TIME_REPORT_IN_WC(:l_report_name,:l_web_report_dt,:l_web_login_id,:l_report_path,:l_rept_id);
	
			if(sqlca.sqlcode < 0)
			{
				printf("Error : Failed From Stored Procedure SP_SHOW_REAL_TIME_REPORT_IN_WC ERR DESC :|%d|\n",sqlca.sqlcode);
				fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_SHOW_REAL_TIME_REPORT_IN_WC ERR DESC :|%d|\n",sqlca.sqlcode);
				APL_GOBACK_FAIL
			}
		}
	}
	}
	
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:
	{
		fclose(l_report_HTML2);
		fclose(l_init_file);
		CO_ProcMonitor(g_logfile,"Success from CO_CreateReport_HTML2",NULL,NULL);
		fprintf(fl_userlog,"Success From CO_CreateReport_HTML2 Function\n");
		return(APL_SUCCESS);
	}


	RETURN_FAILURE:
	{
		fclose(l_report_HTML2);
		fclose(l_init_file);
		CO_ProcMonitor(g_logfile,"Failed from CO_CreateReport_HTML2",l_debug_info_ptr,NULL);
		fprintf(fl_userlog,"Failure From CO_CreateReport_HTML2 Function\n ");
		return(APL_FAILURE);
	}
}

int CO_CreateReport_XLS2(char *p_rept_id,char *p_rep_type,char *p_rep_name,
		      	char *p_param_str,char *p_chr_ptr_param,char *p_start_date,
			char *p_compress_flag,char *p_user,char *p_web_login_id,char *p_web_rpt_id,char *p_web_source_from,char *p_web_report_dt,char *p_web_proc_id,FILE *fl_userlog,
			DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{	
	printf("Entered Inside CO_CreateReport_XLS2 Function \n");

	FILE	*l_init_file  		= (FILE *)NULL;
	FILE	*l_report_XLS2 	= (FILE *)NULL;
	char l_init_path[200]	= APL_NULL_STRING;
	char l_report_path[200] = APL_NULL_STRING;
	char l_report_name[200] = APL_NULL_STRING;
	char l_compress_flag[5]	= APL_NULL_STRING;
	char l_time_stamp[30]	= APL_NULL_STRING;
	
	char l_remove_file_path[200] = APL_NULL_STRING;
	int  l_remove_count = 0;
	int  l_remove_flag = 0;
	int  l_client_fetch_count = 0;
	int  no_of_table_count = 0;
	
	memset(l_remove_file_path,APL_NULL_CHAR,200);	
	

	memset(l_init_path,APL_NULL_CHAR,200);	
	memset(l_report_path,APL_NULL_CHAR,200);	
	memset(l_report_name,APL_NULL_CHAR,200);	

	REPORT_MAIN_STRUCT_H  h_report_main_struct;
	REPORT_MAIN_STRUCT_I  i_report_main_struct;
	
	REPORT_DETAILS_STRUCT_H h_report_details_struct;
	REPORT_DETAILS_STRUCT_I i_report_details_struct;
	
	INTL_REPT_STRUCT_H   l_intl_rept_struct_ha;
	memset(&l_intl_rept_struct_ha,APL_NULL_CHAR,sizeof(INTL_REPT_STRUCT_H));

	memset(&h_report_main_struct,APL_NULL_CHAR,sizeof(REPORT_MAIN_STRUCT_H));	
	memset(&i_report_main_struct,APL_NULL_CHAR,sizeof(REPORT_MAIN_STRUCT_I));

	memset(&h_report_details_struct,APL_NULL_CHAR,sizeof(REPORT_DETAILS_STRUCT_H));
	memset(&i_report_details_struct,APL_NULL_CHAR,sizeof(REPORT_DETAILS_STRUCT_I));
		
	char l_rept_id[11]		   	= APL_NULL_STRING;
	char l_rep_type[10]	   	= APL_NULL_STRING;
	char l_client[20]  			= APL_NULL_STRING;
	char l_sub_client[20]  		= APL_NULL_STRING;
	char l_rep_name[100]    	= APL_NULL_STRING;
	char l_param_str[4000]  	= APL_NULL_STRING;
	char l_chr_param[4000]  	= APL_NULL_STRING;
	char l_start_date[20]   	= APL_NULL_STRING;
	char l_user[20]  				= APL_NULL_STRING;
	char l_client_name[100] 	= APL_NULL_STRING;
	char l_gen_query[4001]  	= APL_NULL_STRING;

    //changes for report generation through api start
	char l_web_login_id[101]				= APL_NULL_STRING;
	char l_web_rpt_id[101]				= APL_NULL_STRING;
	char l_web_source_from[101]				= APL_NULL_STRING;
	char l_web_report_dt[101]				= APL_NULL_STRING;
	char l_web_proc_id[101]				= APL_NULL_STRING;
	//changes for report generation through api end

	char l_more_qry_flag[3]     = APL_NULL_STRING;
	char table_query[24001] 	= APL_NULL_STRING;
	char l_table_query[4001] 	= APL_NULL_STRING;
	char l_table_query1[4001] 	= APL_NULL_STRING;
	char l_table_query2[4001] 	= APL_NULL_STRING;
	char l_table_query3[4001] 	= APL_NULL_STRING;
	char l_table_query4[4001] 	= APL_NULL_STRING;
	char l_table_query5[4001] 	= APL_NULL_STRING;
	
	char l_criteria_query1[4001] = APL_NULL_STRING;
	char l_criteria_query2[4001] = APL_NULL_STRING;
	char l_criteria_query3[4001] = APL_NULL_STRING;
	char l_system_date[20]  	   = APL_NULL_STRING;
	char l_column_value[200]		= APL_NULL_STRING;
	char l_column_header[4001]		=APL_NULL_STRING;
	char l_table_parameter[6000]	=APL_NULL_STRING;
	char l_general_parameter[6000]=APL_NULL_STRING;
	char l_general_param[6000]		=APL_NULL_STRING;
	char l_param[2000]				=APL_NULL_STRING;
	char l_column_parameter[6000]	=APL_NULL_STRING;
	char l_column[2000]				=APL_NULL_STRING;
	char l_error_desc[2000]			=APL_NULL_STRING;
	char  l_param1[100]            = APL_NULL_STRING;
	char  l_param2[100]            = APL_NULL_STRING;
	char  l_param3[100]            = APL_NULL_STRING;
	char  l_param4[100]            = APL_NULL_STRING;
	char  l_param5[100]            = APL_NULL_STRING;
	char  l_param6[100]            = APL_NULL_STRING;
	char  l_master_query[4001]    = APL_NULL_STRING;

	char g_style[4000]	= APL_NULL_STRING;
	char g_style_lt[4000]	= APL_NULL_STRING;
	char g_setting_flag[2]	= APL_NULL_STRING;
	char g_table_border[2]= APL_NULL_STRING;
	
	char  l_group_query[4001]       = APL_NULL_STRING;
	char  l_group_desc[4001]        = APL_NULL_STRING;
	char  l_group_pos[11]			  = APL_NULL_STRING;
	char  l_group_parameter[2001]   = APL_NULL_STRING;
	
	char  **l_group_parameter_value		=	NULL;
	char  **l_group_pos_value 				=	NULL;

	int  l_group_pos_no			= 0;
	int  l_group_parameter_no	= 0;
	int  l_group_break_flag 	= 0;
	
	char  l_prev_param1[100]            = APL_NULL_STRING;
	char  l_prev_param2[100]            = APL_NULL_STRING;
	char  l_prev_param3[100]            = APL_NULL_STRING;
	char  l_prev_param4[100]            = APL_NULL_STRING;
	char  l_prev_param5[100]            = APL_NULL_STRING;
	char  l_prev_param6[100]            = APL_NULL_STRING;

	char l_grand_round1[200]	= APL_NULL_STRING;
	char l_grand_round2[200]	= APL_NULL_STRING;
	char l_grand_round3[200]	= APL_NULL_STRING;
	
	char  **l_col_value		=	NULL;
	char  **l_field_val		=	NULL;
	char  **l_column_val		=	NULL;
	char  **l_param_val		=	NULL;
	
	int i=0,j=0,k=0;
	int l_col_no				= 0;
	int l_column_num			= 0;
	int l_param_num			= 0;
	int l_fetch_count 		= 0;
	int l_before_title_break= 0;
	int l_no_of_columns     = 0;
	int l_table_id		      = 0;
	int l_column_no         = 0;
	int l_page_header			= 0;
	int l_before_title      = 0;
	int l_before_title1		= 0;
	int l_before_title2		= 0;
	int l_before_title3     = 0;
	int l_report_title		= 0;
	int l_after_title			= 0;
	int l_table_hdr			= 0;
	int l_before_table		= 0;
	int l_after_table		   = 0;
	int l_col_hdr				= 0;
	int l_table					= 0;
	int l_table_footer		= 0;
	int l_page_footer			= 0;
	int l_int_no_field      = 0;
	int int_no					= 0;
	int l_colspan           = 0;
	double l_grand_total1		= 0;
	double l_grand_total2		= 0;
	double l_grand_total3		= 0;

	/************ Paging Varibles Declaration **********************/

	int p_page_no = 0;
	int rec_no = 0;
	int p_total_page_no = 0;
	int l_page_break_chk = 0;
	int l_next_page_break = 0;
	int l_main_page_break = 0;
	int p_final_break = 0;
	int l_final_break = 0;
	int l_main_page_recs = 0;
	int l_next_page_recs = 0;
	int l_tolarence = 0;
	int l_landscape = 0;
	int l_portrait = 0;
	int g_line_count = 0;

	char l_paging_flag[2] = APL_NULL_STRING;
	char l_print_flag[2] = APL_NULL_STRING;

	char l_grand_display[20] = APL_NULL_STRING;

	char l_criteria_value1[200]   = APL_NULL_STRING;
	char l_criteria_value2[200]   = APL_NULL_STRING;
	char l_criteria_value3[200]   = APL_NULL_STRING;
	double l_criteria1_total = 0.0;
	double l_criteria2_total = 0.0;
	double l_criteria3_total = 0.0;

	/******* Complex Criteria Variables ***************************/

	char l_report_type[3] 			= APL_NULL_STRING;
	
	char  **l_complex_val			= NULL;
	int l_complex_num			= 0;
	char l_complex_column[2000]		= APL_NULL_STRING;
	char l_complex_parameter[2000] 		= APL_NULL_STRING;
	
	char  **l_complex_pos_val		= NULL;
	int l_complex_pos_num			= 0;
	char l_complex_pos_column[2000]		= APL_NULL_STRING;
	char l_complex_pos_parameter[2000] 	= APL_NULL_STRING;
		
	int l_complex_break_flag 		= 0;
	
	char complex_criteria_query[8001] 	= APL_NULL_STRING;
	char complex_criteria_query1[4001] 	= APL_NULL_STRING;
	char complex_criteria_label[4001] 	= APL_NULL_STRING;
	char complex_criteria_pos[101] 		= APL_NULL_STRING;

	char l_header_query[8001] 		= APL_NULL_STRING;
	char l_header_query1[4001] 		= APL_NULL_STRING;
	char header_query[4001] 		= APL_NULL_STRING;	
	char l_header_query_value[4001] 	= APL_NULL_STRING;	
	int l_header_num 			= 0;
	char **l_header_val			= NULL;
	char l_header_data[6001]		= APL_NULL_STRING;
	int l_header_brk			= 0;

	char l_footer_query[8001] 		= APL_NULL_STRING;	
	char l_footer_query1[4001] 		= APL_NULL_STRING;	
	char footer_query[4001] 		= APL_NULL_STRING;	
	char l_footer_query_value[4001] 	= APL_NULL_STRING;	
	int l_footer_num 			= 0;
	char **l_footer_val			= NULL;
	char l_footer_data[6001]		= APL_NULL_STRING;
	int l_footer_data_brk			= 0;

	char l_header1[200] 			= APL_NULL_STRING;
	char l_header2[200] 			= APL_NULL_STRING;
	char l_header3[200] 			= APL_NULL_STRING;
	char l_header4[200] 			= APL_NULL_STRING;
	char l_header5[200] 			= APL_NULL_STRING;
	char l_header6[200] 			= APL_NULL_STRING;
	char l_header7[200] 			= APL_NULL_STRING;
	char l_header8[200] 			= APL_NULL_STRING;
	char l_header9[200] 			= APL_NULL_STRING;
	char l_header10[200] 			= APL_NULL_STRING;
	char l_header11[200] 			= APL_NULL_STRING;
	char l_header12[200] 			= APL_NULL_STRING;
	char l_header13[200] 			= APL_NULL_STRING;
	char l_header14[200] 			= APL_NULL_STRING;
	char l_header15[200] 			= APL_NULL_STRING;	

	char l_footer1[200] 			= APL_NULL_STRING;
	char l_footer2[200] 			= APL_NULL_STRING;
	char l_footer3[200] 			= APL_NULL_STRING;
	char l_footer4[200] 			= APL_NULL_STRING;
	char l_footer5[200] 			= APL_NULL_STRING;
	char l_footer6[200] 			= APL_NULL_STRING;
	char l_footer7[200] 			= APL_NULL_STRING;
	char l_footer8[200] 			= APL_NULL_STRING;
	char l_footer9[200] 			= APL_NULL_STRING;
	char l_footer10[200] 			= APL_NULL_STRING;
	char l_footer11[200] 			= APL_NULL_STRING;
	char l_footer12[200] 			= APL_NULL_STRING;
	char l_footer13[200] 			= APL_NULL_STRING;
	char l_footer14[200] 			= APL_NULL_STRING;
	char l_footer15[200] 			= APL_NULL_STRING;

	int m					= 0;
	
	char l_complex_parameter1[500]		= APL_NULL_STRING;
	char l_complex_parameter2[500]		= APL_NULL_STRING;
	char l_complex_parameter3[500]		= APL_NULL_STRING;
	char l_complex_parameter4[500]		= APL_NULL_STRING;
	char l_complex_parameter5[500]		= APL_NULL_STRING;
	char l_complex_parameter6[500]		= APL_NULL_STRING;
	char l_complex_parameter7[500]		= APL_NULL_STRING;
	char l_complex_parameter8[500]		= APL_NULL_STRING;
	char l_complex_parameter9[500]		= APL_NULL_STRING;
	char l_complex_parameter10[500]		= APL_NULL_STRING;
	char l_complex_parameter11[500]		= APL_NULL_STRING;
	char l_complex_parameter12[500]		= APL_NULL_STRING;
	char l_complex_parameter13[500]		= APL_NULL_STRING;
	char l_complex_parameter14[500]		= APL_NULL_STRING;
	char l_complex_parameter15[500]		= APL_NULL_STRING;
	char l_complex_parameter16[500]		= APL_NULL_STRING;
	char l_complex_parameter17[500]		= APL_NULL_STRING;
	char l_complex_parameter18[500]		= APL_NULL_STRING;
	char l_complex_parameter19[500]		= APL_NULL_STRING;
	char l_complex_parameter20[500]		= APL_NULL_STRING;

	double g_complex_parameter1		= 0.0;
	double g_complex_parameter2 		= 0.0;
	double g_complex_parameter3 		= 0.0;
	double g_complex_parameter4 		= 0.0;
	double g_complex_parameter5 		= 0.0;
	double g_complex_parameter6 		= 0.0;
	double g_complex_parameter7 		= 0.0;
	double g_complex_parameter8 		= 0.0;
	double g_complex_parameter9 		= 0.0;
	double g_complex_parameter10 		= 0.0;
	double g_complex_parameter11 		= 0.0;
	double g_complex_parameter12 		= 0.0;
	double g_complex_parameter13 		= 0.0;
	double g_complex_parameter14 		= 0.0;
	double g_complex_parameter15 		= 0.0;
	double g_complex_parameter16 		= 0.0;
	double g_complex_parameter17 		= 0.0;
	double g_complex_parameter18 		= 0.0;
	double g_complex_parameter19 		= 0.0;
	double g_complex_parameter20		= 0.0;
	
	double f_complex_parameter1		= 0.0;
	double f_complex_parameter2 		= 0.0;
	double f_complex_parameter3 		= 0.0;
	double f_complex_parameter4 		= 0.0;
	double f_complex_parameter5 		= 0.0;
	double f_complex_parameter6 		= 0.0;
	double f_complex_parameter7 		= 0.0;
	double f_complex_parameter8 		= 0.0;
	double f_complex_parameter9 		= 0.0;
	double f_complex_parameter10 		= 0.0;
	double f_complex_parameter11 		= 0.0;
	double f_complex_parameter12 		= 0.0;
	double f_complex_parameter13 		= 0.0;
	double f_complex_parameter14 		= 0.0;
	double f_complex_parameter15 		= 0.0;
	double f_complex_parameter16 		= 0.0;
	double f_complex_parameter17 		= 0.0;
	double f_complex_parameter18 		= 0.0;
	double f_complex_parameter19 		= 0.0;
	double f_complex_parameter20		= 0.0;

	char complex_criteria[4001]		= APL_NULL_STRING;
	char l_complex_criteria_data[4001]      = APL_NULL_STRING;

	char l_multiple_col_flag[3]		= APL_NULL_STRING;
	char l_multiple_col_header[4001]	= APL_NULL_STRING;
	char l_multiple_colspan_sep[2001]	= APL_NULL_STRING;

	int l_multiple_col_header_no		= 0;
	int l_multiple_colspan_sep_no		= 0;

	char **l_multiple_col_header_value	= NULL;
	char **l_multiple_colspan_sep_value	= NULL;

	char l_level_header[2000]		= APL_NULL_STRING;
	char l_level_colspan[500]		= APL_NULL_STRING;
	char l_level_column[500]		= APL_NULL_STRING;
	char l_level_col_span[10]		= APL_NULL_STRING;

	int l_level_header_no			= 0;
	int l_level_colspan_no			= 0;
	int int_aa				= 0;
	int int_bb				= 0;
	int int_a				= 0;
	int int_b				= 0;

	char **l_level_header_value		= NULL;
	char **l_level_colspan_value		= NULL;

	char l_zip_image_path[200]		= APL_NULL_STRING;

	int l_format_col_flag		= 0;
	int l_format_col_no         = 0;
	char **l_format_col_val		= NULL;
	char l_format_col_value[10] = APL_NULL_STRING;
	char l_format_col_pos[500]	= APL_NULL_STRING;

	char l_record_count_query_final[8001]   = APL_NULL_STRING;
	char l_record_count_query[4001]   = APL_NULL_STRING;
	char l_record_count_query1[4001]   = APL_NULL_STRING;
	int l_record_count_flag = 0;
	int l_record_count = 0;
	int l_table_numbers = 0;
	int l_table_num = 0;
	
	char l_char_dd[3] = APL_NULL_STRING;
	char l_char_mm[3] = APL_NULL_STRING;
	char l_char_yy[3] = APL_NULL_STRING;

	char temp[20] = APL_NULL_STRING;
	strcpy(l_rept_id,p_rept_id);
	strcpy(l_rep_type,p_rep_type);
	strcpy(l_rep_name,p_rep_name);
	strcpy(l_param_str,p_param_str);
	strcpy(l_chr_param,p_chr_ptr_param);
	strcpy(l_client,l_param_str);
	strcpy(l_start_date,p_start_date);
	strcpy(l_compress_flag,p_compress_flag);
	strcpy(l_user,p_user);
	strcpy(l_web_login_id,p_web_login_id);
	strcpy(l_web_rpt_id,p_web_rpt_id);
	strcpy(l_web_source_from,p_web_source_from);
	strcpy(l_web_report_dt,p_web_report_dt);
	strcpy(l_web_proc_id,p_web_proc_id);

	EXEC SQL BEGIN DECLARE SECTION;
		
	EXEC SQL VAR l_rept_id IS STRING;
	EXEC SQL VAR l_gen_query IS STRING;

	EXEC SQL VAR table_query IS STRING;
	EXEC SQL VAR l_table_query IS STRING;
	EXEC SQL VAR l_table_query1 IS STRING;
	EXEC SQL VAR l_table_query2 IS STRING;
	EXEC SQL VAR l_table_query3 IS STRING;
	EXEC SQL VAR l_table_query4 IS STRING;
	EXEC SQL VAR l_table_query5 IS STRING;
	
	EXEC SQL VAR l_criteria_query1 IS STRING;
	EXEC SQL VAR l_criteria_query2 IS STRING;
	EXEC SQL VAR l_criteria_query3 IS STRING;
	EXEC SQL VAR l_table_parameter IS STRING;
	EXEC SQL VAR l_general_param IS STRING;
	EXEC SQL VAR l_client IS STRING;
	EXEC SQL VAR l_sub_client IS STRING;
	EXEC SQL VAR l_start_date IS STRING;
	EXEC SQL VAR l_master_query IS STRING;
	EXEC SQL VAR l_group_parameter IS STRING;
	EXEC SQL VAR l_group_query IS STRING;
	EXEC SQL VAR l_group_desc IS STRING;

	EXEC SQL VAR l_grand_round1 IS STRING;
	EXEC SQL VAR l_grand_round2 IS STRING;
	EXEC SQL VAR l_grand_round3 IS STRING;

	EXEC SQL VAR g_setting_flag IS STRING;
	EXEC SQL VAR l_grand_display IS STRING;

	EXEC SQL VAR complex_criteria_query IS STRING;
	EXEC SQL VAR complex_criteria_query1 IS STRING;
	EXEC SQL VAR l_header_query IS STRING;
	EXEC SQL VAR l_header_query1 IS STRING;
	EXEC SQL VAR l_footer_query IS STRING;
	EXEC SQL VAR l_footer_query1 IS STRING;
	EXEC SQL VAR l_complex_criteria_data IS STRING;
	EXEC SQL VAR complex_criteria IS STRING;
	EXEC SQL VAR l_web_login_id IS STRING;
	EXEC SQL VAR l_web_rpt_id IS STRING;
	EXEC SQL VAR l_web_source_from IS STRING;
	EXEC SQL VAR l_web_report_dt IS STRING;
	EXEC SQL VAR l_web_proc_id IS STRING;
	EXEC SQL END DECLARE SECTION;
	
		strcpy(l_init_path,getenv("INTL_ROOT_PATH"));
	strcat(l_init_path,"intl_sun.cfg");
	
	if((l_init_file = fopen(l_init_path,"r")) == (FILE *)NULL)
	{
		fprintf(fl_userlog,"Failed to Open file for PATH :|%s|\n",l_init_path);
		printf("Failed to Open file for PATH :|%s|\n",l_init_path);
		APL_GOBACK_FAIL
	}

	fprintf(fl_userlog,"COMPRESS FLAG :|%s|\n",l_compress_flag);
	
	if(strlen(l_compress_flag) > 0 && !strcmp(l_compress_flag,"Y"))
	{
		if (APL_FAILURE == CO_ReadToken(l_init_file,"INTL_TEMP_PATH",l_report_path,l_debug_info_ptr))
		{
			fprintf(fl_userlog,"Error : INTL_TEMP_PATH not set in intl_sun.cfg File \n");
			printf("Error : INTL_TEMP_PATH not set in intl_sun.cfg File \n");
			APL_GOBACK_FAIL
		}
	}
	else
	{
		if (APL_FAILURE == CO_ReadToken(l_init_file,"INTL_REP_PATH",l_report_path,l_debug_info_ptr))
		{
			fprintf(fl_userlog,"Error : INTL_REP_PATH  not set in intl_sun.cfg File \n");
			printf("Error : INTL_REP_PATH  not set in intl_sun.cfg File \n");
			APL_GOBACK_FAIL
		}
	}
		

	l_int_no_field = 0;

	fprintf(fl_userlog,"l_chr_param:|%s|\n",l_chr_param);
	
	if (CO_SplitStr(l_chr_param,PARAMSEP,&l_int_no_field,&l_field_val) == APL_FAILURE)
	{
		CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_chr_param);
		APL_GOBACK_FAIL
	}

	fprintf(fl_userlog,"l_int_no_field:|%d|\n",l_int_no_field);
	if(l_int_no_field > 0)
	{
		for(int_no=0;int_no<l_int_no_field;int_no++)
		{
			if(int_no == 1)
			strcpy(l_param2,l_field_val[int_no]);
			else if(int_no == 2)
			strcpy(l_param3,l_field_val[int_no]);
			else if(int_no == 3)
			strcpy(l_param4,l_field_val[int_no]);
			else if(int_no == 4)
			strcpy(l_param5,l_field_val[int_no]);
			else if(int_no == 5)
			strcpy(l_param6,l_field_val[int_no]);
		}
	}
	
		/*Pasha Added for AMFI Enhancement Report Naming convention */

	l_int_no_field = 0;

	Alert("l_rep_name |%s|\n",l_rep_name);


	if (CO_SplitStr(l_rep_name,'@',&l_int_no_field,&l_field_val) == APL_FAILURE)
	{
		CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_chr_param);
		APL_GOBACK_FAIL
	}

	fprintf(fl_userlog,"l_int_no_field:|%d|\n",l_int_no_field);
		
	if(l_int_no_field > 0)
	{
				EXEC SQL select to_char(sys_date,'dd'), to_char(sys_date,'mm') ,to_char(sys_date,'yy')
					INTO :l_char_dd, :l_char_mm, :l_char_yy
					from  pro_sys_date;

			Alert(" l_client |%s|\n",l_client);
			Alert(" l_char_dd |%s|\n",l_char_dd);
			Alert(" l_char_mm |%s|\n",l_char_mm);
			Alert(" l_char_yy |%s|\n",l_char_yy);


		for(int_no=1;int_no<l_int_no_field;int_no++)
		{
				memset(temp,APL_NULL_CHAR,20);	

			strcpy(temp,l_field_val[int_no]);
			
			if(!strcmp(temp,"DD"))
			{
				if(strlen(l_report_name) > 0)
					strcat(l_report_name,l_char_dd);
				else
					strcpy(l_report_name,l_char_dd);
			}
			else if(!strcmp(temp, "MM"))
			{
				if(strlen(l_report_name) > 0)
					strcat(l_report_name,l_char_mm);
				else
					strcpy(l_report_name,l_char_mm);
			}
			else if(!strcmp(temp, "YY"))
			{
				if(strlen(l_report_name) > 0)
					strcat(l_report_name,l_char_yy);
				else
					strcpy(l_report_name,l_char_yy);
			}
			else if(!strcmp(temp, "PARAM"))
			{
				if(strlen(l_report_name) > 0)
					strcat(l_report_name,l_client);
				else
					strcpy(l_report_name,l_client);
			}
			else 
			{
				if(strlen(l_report_name) > 0)
					strcat(l_report_name,temp);
				else
					strcpy(l_report_name,temp);
			}

		}
		strcat(l_report_name,".xls");

	Alert("Bagee - l_report_name:|%s|\n",l_report_name);

	}

	else /* Added for AMFI Changes - Pasha - Nov 2009 **/
	{
		EXEC SQL SELECT TO_CHAR(SYSDATE,'DD_MON_YYYY')||CHR(95)||TO_CHAR(SYSDATE,'HH24_MI_SS')		
		           INTO :l_time_stamp
	           	FROM DUAL;

		sprintf(l_report_name,"%s_%s_%s.xls",l_client,l_rept_id,l_time_stamp);
	}

	sprintf(l_report_path, "%s%s",l_report_path,l_report_name);

	if(strlen(l_compress_flag) > 0 && !strcmp(l_compress_flag,"Y"))
	{
		EXEC SQL INSERT INTO REPORT_LIST VALUES (:g_dynamic_seq,:l_report_name);

		IS_ANY_ORA_ERROR
	}

			/* End of Change */
	fprintf(fl_userlog,"REPORT FILE PATH 5:|%s|\n",l_report_path);
//fflush(fl_userlog);
	if((l_report_XLS2 = fopen(l_report_path,"w")) == (FILE *) NULL)
	{
		CO_InsertErr(l_debug_info_ptr,"FILE NOT FOUND",APL_NULL_STRING,
						APL_NULL_STRING,APL_NULL_STRING,	
						 __LINE__,__FILE__);
		fprintf(fl_userlog,"Error : File not Found For Report PATH :|%s|\n",l_report_path);
		APL_GOBACK_FAIL
	}

	/**** For Entry in PRO_COMMON_REPORT ********************************************************/
	
	//fprintf(fl_userlog,"LENGTH OF l_compress_flag :|%d|\n",strlen(l_compress_flag)); Changes done for AIX Migration
	fprintf(fl_userlog,"LENGTH OF l_compress_flag :|%d|\n",(int)strlen(l_compress_flag));

	if(strlen(l_compress_flag) == 0 || !strcmp(l_compress_flag,"N"))
	{ 
	    strcpy(l_intl_rept_struct_ha.report_name,l_report_name);
  	    strcat(l_intl_rept_struct_ha.report_name,"\0");
	    strcpy(l_intl_rept_struct_ha.report_desc,APL_REP_DESC);
	    strcat(l_intl_rept_struct_ha.report_desc,"\0");
	    strcpy(l_intl_rept_struct_ha.report_date,l_start_date);
	    l_intl_rept_struct_ha.report_width = 200 ;
	    strcpy(l_intl_rept_struct_ha.task_desc,"DynamicReport");
	    strcpy(l_intl_rept_struct_ha.fe_be_ind,"B");
	    strcpy(l_intl_rept_struct_ha.usr,l_user);

	    fprintf(fl_userlog,"Entering CO_Proc_RptIns5\n");
		//fflush(fl_userlog);
	    fprintf(fl_userlog,"report_name:|%s|\n",l_intl_rept_struct_ha.report_name);
	    fprintf(fl_userlog,"report_desc:|%s|\n",l_intl_rept_struct_ha.report_desc);
	    fprintf(fl_userlog,"report_date:|%s|\n",l_intl_rept_struct_ha.report_date);
	    //fprintf(fl_userlog,"report_width:|%ld|\n",l_intl_rept_struct_ha.report_width); Changes done for AIX Migration
	    fprintf(fl_userlog,"report_width:|%d|\n",l_intl_rept_struct_ha.report_width);
	    fprintf(fl_userlog,"task_desc:|%s|\n",l_intl_rept_struct_ha.task_desc);
	    fprintf(fl_userlog,"fe_be_ind:|%s|\n",l_intl_rept_struct_ha.fe_be_ind);
	    fprintf(fl_userlog,"usr:|%s|\n",l_intl_rept_struct_ha.usr);
	   //fflush(fl_userlog);
	    if(APL_FAILURE == CO_Proc_DBRptIns(&l_intl_rept_struct_ha,l_debug_info_ptr))/*'&'Added For AIX Migration*/
	    {
			fprintf(fl_userlog,"Error : Failure From CO_Proc_RptIns\n");
		  	APL_GOBACK_FAIL
	    }
	}

	/**************************************************************************************/

   	/******** Starting of HTML and META tag ***********************************************/
	
	fprintf(l_report_XLS2,"<HTML xmlns:v=\"urn:schemas-microsoft-com:vml\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns:o=\"urn:schemas-microsoft-com:office:office\"><HEAD>\n");


	fprintf(fl_userlog,"REPORT ID :|%s|\n",l_rept_id);
	
	EXEC SQL SELECT * INTO :h_report_main_struct
				FROM REPORT_MAIN
				WHERE REPORT_ID=:l_rept_id;	

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Failed to Access REPORT_MAIN Table --- ORA ERROR :|%d|\n",sqlca.sqlcode);
	}


	EXEC SQL SELECT MAX(NO_OF_COLUMNS) INTO :l_colspan FROM REPORT_DETAILS WHERE REPORT_ID=:l_rept_id;

	strcpy(l_report_type,h_report_main_struct.report_type);
	strcpy(header_query,h_report_main_struct.header_query);

	printf("l_report_type :|%s|\n",l_report_type);
//fflush(fl_userlog);
	fprintf(fl_userlog,"Report_Type 5:|%s|\n",l_report_type);
	
	/************ For Dynamic Style Sheet Display *************************/

	fprintf(fl_userlog,"Before REPORT_SYSPARM ---- \n");

	EXEC SQL SELECT A.DEFAULT_SETTING,A.STYLE,A.STYLE_LT 
	         INTO :g_setting_flag,:g_style,:g_style_lt
		 FROM REPORT_SYSPARAM A, MT_COMMON_SYS_PARAMS B 
		 WHERE A.BANK_CODE=B.INSTALLED_AT_BANK;

        fprintf(fl_userlog,"After REPORT_SYSPARM Ora Error :|%d|\n",sqlca.sqlcode);

	fprintf(fl_userlog,"DEFAULT_SETTING :|%s|\n",g_setting_flag);

	/***********************************************************************/

	if(!strcmp(l_report_type,"L"))
	{			
		fprintf(l_report_XLS2,"%s\n",g_style_lt);
		strcpy(g_table_border,"1");
	}
	else
	{
		fprintf(l_report_XLS2,"%s\n",g_style);
		strcpy(g_table_border,"1");
	}
	

	fprintf(l_report_XLS2,"</HEAD>\n");

	fprintf(l_report_XLS2,"<BODY>\n");
	
	fprintf(l_report_XLS2,"<TABLE WIDTH = \"100%\">\n");
	
	
	/***** Image path ****************************************************************/
	
   	fprintf(fl_userlog,"Before Image :- Compress Flag :|%s|\n",l_compress_flag);

	if(strlen(h_report_main_struct.image_path) > 0)
	{
		 fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" class=\'heading\'><TR><TD WIDTH=\"20%%\" ALIGN=\"LEFT\"><IMG id=\"image\" SRC=\"%s\" ALIGN=\"LEFT\" HEIGHT=\"60\" WIDTH=\"150\"/></TD>\n",h_report_main_struct.image_path);
	}


	/******* Page Header *************************************************************/
	
	if(strlen(h_report_main_struct.page_header) > 0 )
	{
		fprintf(l_report_XLS2,"<TABLE WIDTH=\"80%\"><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"CENTER\" class=\'heading\' ><I>%s</I></TD></TR></TABLE>\n",l_colspan,h_report_main_struct.page_header);

		g_line_count =2;
	}


	fprintf(l_report_XLS2,"</TABLE>\n");
	
	l_page_header = h_report_main_struct.page_hdr_brk;
	
	if(l_page_header > 0 )
	{
		fprintf(l_report_XLS2,"<TABLE>\n");
		while(l_page_header > 0 )
		{
			fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");				
			l_page_header -- ;
			g_line_count ++;
		}
		fprintf(l_report_XLS2,"</TABLE>\n");
	}
	
	if(strcmp(l_report_type,"L"))
	{			
		fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
		fprintf(l_report_XLS2,"<TD ALIGN=\"LEFT\" WIDTH=\"100%%\" COLSPAN=\'%d\' class=\'ez4\'>Date : %s</TD>\n",l_colspan,l_start_date);
		fprintf(l_report_XLS2,"</TR></TABLE>\n");
		g_line_count++;
	}


	fprintf(l_report_XLS2,"<TABLE><TR><TD></TD></TR></TABLE>\n");
	g_line_count++;


	/************** For Master Account, display all sub Accounts records  ***************/
	
	if(strlen(h_report_main_struct.mst_sub_query) > 0)
	{
		strcpy(l_master_query,h_report_main_struct.mst_sub_query);
	}
	else
	{
		strcat(l_master_query,"SELECT '");
		strcat(l_master_query,l_client);
		strcat(l_master_query,"' FROM DUAL");
	}

	EXEC SQL SELECT REPLACE((:l_master_query),'@PARAM1',:l_client) INTO :l_master_query FROM DUAL;
	
	if(sqlca.sqlcode < 0)
	{
		fprintf(fl_userlog,"Error : Critical Error in Master Sub Query ORA ERROR :|%d|\n",sqlca.sqlcode);
		APL_GOBACK_FAIL
	}

	/*******************************************************************************/

	/********** Page Break Variables ***********************************************/

	p_total_page_no = 1;

	l_landscape = 36;
	l_portrait = 56;
	l_tolarence = 2;

	strcpy(l_paging_flag,h_report_main_struct.paging_flag);
	strcpy(l_print_flag,h_report_main_struct.print_type);
	l_main_page_recs=h_report_main_struct.main_page_recs;
	l_next_page_recs=h_report_main_struct.next_page_recs;

	fprintf(fl_userlog,"l_paging_flag :|%s|\n",l_paging_flag);
	fprintf(fl_userlog,"l_print_flag :|%s|\n",l_print_flag);
	fprintf(fl_userlog,"l_main_page_recs :|%d|\n",l_main_page_recs);
	fprintf(fl_userlog,"l_next_page_recs :|%d|\n",l_next_page_recs);

	/*****************************************************************************/

	fprintf(fl_userlog,"MASTER SUB QUERY 2:|%s|\n",l_master_query);
	//fflush(fl_userlog);
	EXEC SQL PREPARE MAST_XLS_QUERY FROM :l_master_query;
	EXEC SQL DECLARE xlssubclient CURSOR FOR MAST_XLS_QUERY;
	EXEC SQL OPEN xlssubclient;

	   if(sqlca.sqlcode < 0)
	   {
	     fprintf(fl_userlog,"Error : Critical Error Occured in Master Sub Query ORA ERROR :|%d|\n",sqlca.sqlcode);
	     APL_GOBACK_FAIL
	   }
	
	l_remove_count=0;
	l_client_fetch_count=0;
	
   no_of_table_count=h_report_main_struct.no_of_tables;
   fprintf(fl_userlog,"no_of_table_count :|%d|\n",no_of_table_count);
   printf("no_of_table_count :|%d|\n",no_of_table_count);
   //fflush(fl_userlog);
   
	for(;;)
	{
		EXEC SQL FETCH xlssubclient INTO :l_sub_client;	
	
		if(sqlca.sqlcode == 1403)
		{
			fprintf(fl_userlog,"l_client_fetch_count :|%d|\n",l_client_fetch_count);
			fprintf(fl_userlog,"l_remove_count :|%d|\n",l_remove_count);
			fprintf(fl_userlog,"no_of_table_count :|%d|\n",no_of_table_count);
			//fflush(fl_userlog);

         if((l_client_fetch_count*no_of_table_count) == l_remove_count)
			{
				strcpy(l_remove_file_path,"rm -f ");
				strcat(l_remove_file_path,l_report_path);
				l_remove_flag = 1;
			}
			break;			
		}
   
		if(sqlca.sqlcode < 0)
		{
     			fprintf(fl_userlog,"Error : Critical Error Occured in Master Sub Query ORA ERROR :|%d|\n",sqlca.sqlcode);
     			APL_GOBACK_FAIL
   		}

		/********************* Record Count Query Part *****************************/
		
		EXEC SQL SELECT COUNT(TABLE_ID) INTO :l_table_numbers 
				 FROM REPORT_DETAILS
				 WHERE REPORT_ID=:l_rept_id;
		
		fprintf(fl_userlog,"AFTER COUNT(TABLE_ID) -- ORA Error 889:|%d|\n",sqlca.sqlcode);

		fprintf(fl_userlog,"l_table_numbers :|%d|\n",l_table_numbers);

		l_table_num = 1 ;

		l_record_count_flag = 0;

		l_record_count = 0;

		while(l_table_num <= l_table_numbers)
		{
			EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									RECORD_COUNT_QUERY,'@PARAM1',:l_sub_client),
													   '@PARAM2',:l_param2),
													   '@PARAM3',:l_param3),
													   '@PARAM4',:l_param4),
													   '@PARAM5',:l_param5),
													   '@PARAM6',:l_param6),
							REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									RECORD_COUNT_QUERY1,'@PARAM1',:l_sub_client),
													   '@PARAM2',:l_param2),
													   '@PARAM3',:l_param3),
													   '@PARAM4',:l_param4),
													   '@PARAM5',:l_param5),
													   '@PARAM6',:l_param6)
					  INTO :l_record_count_query,:l_record_count_query1
					  FROM REPORT_DETAILS 
					  WHERE REPORT_ID=:l_rept_id 
					  AND TABLE_ID = :l_table_num;

			fprintf(fl_userlog,"AFTER RECORD_COUNT_QUERY Select -- ORA Error :|%d|\n",sqlca.sqlcode);


			strcpy(l_record_count_query_final,l_record_count_query);
			strcat(l_record_count_query_final,l_record_count_query1);

			fprintf(fl_userlog,"l_record_count_query_final 100:|%s|\n",l_record_count_query_final);

			if(strlen(l_record_count_query_final) > 0)
			{

				EXEC SQL PREPARE XLS2_RECORD_COUNT FROM :l_record_count_query_final;

				EXEC SQL DECLARE xls2_record_count_curr CURSOR FOR XLS2_RECORD_COUNT;

				EXEC SQL OPEN  xls2_record_count_curr;

				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Error : Failed To OPEN xls2_record_count_curr CURSOR -- ORA Error :|%d|\n",sqlca.sqlcode);
					//fflush(fl_userlog);
					l_record_count_flag = 0;
				}

				EXEC SQL FETCH xls2_record_count_curr INTO :l_record_count;

				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Error : Failed To FETCH xls2_record_count_curr CURSOR -- ORA Error :|%d|\n",sqlca.sqlcode);
					l_record_count_flag = 0;
				}

				EXEC SQL CLOSE xls2_record_count_curr;

			}


			fprintf(fl_userlog,"l_record_count 100:|%d|\n",l_record_count);
			//fflush(fl_userlog);
			if(l_record_count > 0)
				l_record_count_flag = 1;

			l_table_num ++;

		}

 
	fprintf(fl_userlog,"RECORD COUNT FLAG 11:|%d|\n",l_record_count_flag);
	//fflush(fl_userlog);
	printf("RECORD COUNT FLAG 12:|%d|\n",l_record_count_flag);
	//fflush(fl_userlog);
	
   /***********************************************************************************/

	if((l_record_count_flag == 1)||(strlen(l_record_count_query_final) == 0))
	{

	/******* Stored procedure for REPORT MAIN ******************************************/
	
	strcpy(l_param1,l_sub_client);	
	
	printf("PARAMETER 1 ----- :|%s|\n",l_param1);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"l_rept_id:|%s|\n",l_rept_id);
	fprintf(fl_userlog,"l_param1:|%s|\t l_param2:|%s|\n",l_param1,l_param2);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"l_param3:|%s|\t l_param4:|%s|\n",l_param3,l_param4);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"l_param5:|%s|\t l_param6:|%s|\n",l_param5,l_param6);
	//fflush(fl_userlog);
	
	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_MAIN for Report ID 3:|%s||%s|\n",l_rept_id,l_param1);
      	//fflush(fl_userlog);
	EXEC SQL CALL SP_REPORT_MAIN(:l_rept_id,:l_param1,:l_param2,:l_param3,:l_param4,
				     :l_param5,:l_param6,:l_gen_query,:l_error_desc);
	
	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_MAIN ERR DESC :|%s|\n",l_error_desc);
		//fflush(fl_userlog);
	}
	
	//fflush(fl_userlog);
	fprintf(fl_userlog,"GENERAL QUERY 6:|%s|\n",l_gen_query);
    //fflush(fl_userlog);
	if(strlen(l_gen_query) > 0)
	{
	
	EXEC SQL PREPARE XLS_GEN FROM :l_gen_query;
	EXEC SQL DECLARE xlsgenquerycurr CURSOR FOR XLS_GEN;
	EXEC SQL OPEN xlsgenquerycurr;
	
	if(sqlca.sqlcode < 0)
	{
		fprintf(fl_userlog,"Error : Failed to OPEN xlsgenquerycurr CURSOR ");
	}
    //fflush(fl_userlog);
	for(;;)
	{
		
		fprintf(fl_userlog,"Inside xlsgenquerycurr CURSOR ");//fflush(fl_userlog);
		memset(l_general_param,APL_NULL_CHAR,6001);	
		
		EXEC SQL FETCH xlsgenquerycurr
			INTO :l_general_param;

		
		if(sqlca.sqlcode == 1403)
		break;
		
		 if(sqlca.sqlcode < 0)
		 {
		    fprintf(fl_userlog,"Error :Critical Error Occured xlsgenquerycurr --- ORA ERROR:|%d|\n",sqlca.sqlcode);
		    break;
		 }
		
		Alert("HM ------");
		//fprintf(fl_userlog,"l_general_param 5:|%s|\n",l_general_param);
        
		strcpy(l_general_parameter,l_general_param);
	
		/**** Split General Query and fetch the value in seperate parameter *******************/
		
		if (CO_SplitStr(l_general_parameter,CAPSEP,&l_param_num,&l_param_val) == APL_FAILURE)
		{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_general_parameter);
			 	APL_GOBACK_FAIL
		}

	
		fprintf(fl_userlog,"l_param_num:|%d|\n",l_param_num);	
		//fflush(fl_userlog);
		for(k=0;k<l_param_num;k++)
		{
			strcpy(l_param,l_param_val[k]);

			/********* Before Title of report ***************************************************/
			
			if(k == 0)
			{
				if(strlen(h_report_main_struct.before_title_align) > 0)
				{	
					if(strlen(h_report_main_struct.before_title) > 0)
					{
						fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						fprintf(l_report_XLS2,"<TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\" class=\'ez4\'>%s %s</TD>\n",l_colspan,h_report_main_struct.before_title_align,h_report_main_struct.before_title,l_param);
						fprintf(l_report_XLS2,"</TR></TABLE>\n");

						g_line_count++;
					}
				}
				else
				{
					if(strlen(h_report_main_struct.before_title) > 0)
					{
						fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						fprintf(l_report_XLS2,"<TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\" class=\'ez4\'>%s %s</TD>\n",l_colspan,h_report_main_struct.before_title,l_param);
						fprintf(l_report_XLS2,"</TR></TABLE>\n");

						g_line_count++;
					}

				}
	
				l_before_title = h_report_main_struct.before_title_brk;

				
				if(l_before_title > 0)
				{
					fprintf(l_report_XLS2,"<TABLE>\n");
					while(l_before_title > 0)
					{
						fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
						l_before_title --;
						g_line_count++;
					}
					fprintf(l_report_XLS2,"</TABLE>\n");
				}

			}
			else if(k == 1)
			{
				if(strlen(h_report_main_struct.before_title1_align) > 0)
				{	
					if(strlen(h_report_main_struct.before_title1) > 0)
					{
						fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						fprintf(l_report_XLS2,"<TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\" class=\'ez4\'>%s %s</TD>\n",l_colspan,h_report_main_struct.before_title1_align,h_report_main_struct.before_title1,l_param);
						fprintf(l_report_XLS2,"</TR></TABLE>\n");

						g_line_count++;
					}
				}
				else
				{
					if(strlen(h_report_main_struct.before_title1) > 0)
					{
						fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						fprintf(l_report_XLS2,"<TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\" class=\'ez4\'>%s %s</TD>\n",l_colspan,h_report_main_struct.before_title1,l_param);
						fprintf(l_report_XLS2,"</TR></TABLE>\n");

						g_line_count++;
					}

				}
	
				l_before_title1 = h_report_main_struct.before_title1_brk;
				
				if(l_before_title1 > 0)
				{
					fprintf(l_report_XLS2,"<TABLE>\n");
					while(l_before_title1 > 0)
					{
						fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
						l_before_title1 --;
						g_line_count++;
					}
					fprintf(l_report_XLS2,"</TABLE>\n");
				}

			}
			else if(k == 2)
			{
				if(strlen(h_report_main_struct.before_title2_align) > 0)
				{	
					if(strlen(h_report_main_struct.before_title2) > 0)
					{
						fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						fprintf(l_report_XLS2,"<TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\" class=\'ez4\'>%s %s</TD>\n",l_colspan,h_report_main_struct.before_title2_align,h_report_main_struct.before_title2,l_param);
						fprintf(l_report_XLS2,"</TR></TABLE>\n");

						g_line_count++;
					}
				}
				else
				{
					if(strlen(h_report_main_struct.before_title2) > 0)
					{
						fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						fprintf(l_report_XLS2,"<TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\" class=\'ez4\'>%s %s</TD>\n",l_colspan,h_report_main_struct.before_title2,l_param);
						fprintf(l_report_XLS2,"</TR></TABLE>\n");

						g_line_count++;
					}

				}
	
				l_before_title2 = h_report_main_struct.before_title2_brk;
				
				if(l_before_title2 > 0)
				{
					fprintf(l_report_XLS2,"<TABLE>\n");
					while(l_before_title2 > 0)
					{
						fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
						l_before_title2 --;
						g_line_count++;
					}
					fprintf(l_report_XLS2,"</TABLE>\n");
				}

			}
			else if(k == 3)
			{
				if(strlen(h_report_main_struct.before_title3_align) > 0)
				{	
					if(strlen(h_report_main_struct.before_title3) > 0)
					{
						fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						fprintf(l_report_XLS2,"<TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\" class=\'ez4\'>%s %s</TD>\n",l_colspan,h_report_main_struct.before_title3_align,h_report_main_struct.before_title3,l_param);
						fprintf(l_report_XLS2,"</TR></TABLE>\n");

						g_line_count++;
					}
				}
				else
				{
					if(strlen(h_report_main_struct.before_title3) > 0)
					{
						fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						fprintf(l_report_XLS2,"<TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\" class=\'ez4\'>%s %s</TD>\n",l_colspan,h_report_main_struct.before_title3,l_param);
						fprintf(l_report_XLS2,"</TR></TABLE>\n");

						g_line_count++;
					}
				}
	
				l_before_title3 = h_report_main_struct.before_title3_brk;
				
				if(l_before_title3 > 0)
				{
					fprintf(l_report_XLS2,"<TABLE>\n");
					while(l_before_title3 > 0)
					{
						fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
						l_before_title3 --;
						g_line_count++;
					}
					fprintf(l_report_XLS2,"</TABLE>\n");
				}

			}	

		}

	}
	EXEC SQL CLOSE xlsgenquerycurr;

	}

	
	/******* Dynamic Header Display ************************************************/

	fprintf(fl_userlog,"strlen(header_query) :|%d|\n",strlen(header_query));

	if(strlen(header_query) > 0)
	{

	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_HEADER :|%s||%s|\n",l_rept_id,l_param1);		
	printf("Calling Stored Procedure SP_REPORT_HEADER :|%s||%s|\n",l_rept_id,l_param1);		
	//fflush(fl_userlog);
	EXEC SQL CALL SP_REPORT_HEADER(:l_rept_id,:l_param1,:l_param2,
				:l_param3,:l_param4, :l_param5,
				:l_param6,:l_header_query,:l_header_query1,:l_error_desc);

	strcat(l_header_query,l_header_query1);


	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_HEADER ERR DESC :|%s|\n",l_error_desc);
	}

	fprintf(fl_userlog,"HEADER QUERY :|%s|\n",l_header_query);

	EXEC SQL PREPARE XLS2_HEADER_CURR FROM :l_header_query;

	EXEC SQL DECLARE xls2_header_curr CURSOR FOR XLS2_HEADER_CURR;
	
	fprintf(fl_userlog,"After DECLARE xls2_header_curr Ora Error :|%d|\n",sqlca.sqlcode);

	EXEC SQL OPEN xls2_header_curr;

	EXEC SQL FETCH xls2_header_curr INTO :l_header_query_value;

	fprintf(fl_userlog,"After FETCH xls2_header_curr Ora Error :|%d|\n",sqlca.sqlcode);

	EXEC SQL CLOSE xls2_header_curr;

	fprintf(fl_userlog,"l_header_query_value :|%s|\n",l_header_query_value);
	
	if (CO_SplitStr(l_header_query_value,CAPSEP,&l_header_num,&l_header_val) == APL_FAILURE)
	{
		CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_header_query_value);
		APL_GOBACK_FAIL
	}

	fprintf(fl_userlog,"l_header_num :|%d|\n",l_header_num);
	if(l_header_num > 0)
	{
		for(i=0;i<l_header_num;i++)
		{
			if(i == 0)
			strcpy(l_header1,l_header_val[i]);
			else if(i == 1)
			strcpy(l_header2,l_header_val[i]);
			else if(i == 2)
			strcpy(l_header3,l_header_val[i]);
			else if(i == 3)
			strcpy(l_header4,l_header_val[i]);
			else if(i == 4)
			strcpy(l_header5,l_header_val[i]);
			else if(i == 5)
			strcpy(l_header6,l_header_val[i]);
			else if(i == 6)
			strcpy(l_header7,l_header_val[i]);
			else if(i == 7)
			strcpy(l_header8,l_header_val[i]);
			else if(i == 8)
			strcpy(l_header9,l_header_val[i]);
			else if(i == 9)
			strcpy(l_header10,l_header_val[i]);
			else if(i == 10)
			strcpy(l_header11,l_header_val[i]);
			else if(i == 11)
			strcpy(l_header12,l_header_val[i]);
			else if(i == 12)
			strcpy(l_header13,l_header_val[i]);
			else if(i == 13)
			strcpy(l_header14,l_header_val[i]);
			else if(i == 14)
			strcpy(l_header15,l_header_val[i]);
		}
	}

	/****** Stored Procedure : SP_REPORT_HEADER_DATA ***********************************/

	fprintf(fl_userlog,"l_header1 :|%s|\t l_header2 :|%s|\n",l_header1,l_header2);
	fprintf(fl_userlog,"l_header3 :|%s|\t l_header4 :|%s|\n",l_header3,l_header4);
	fprintf(fl_userlog,"l_header5 :|%s|\t l_header6 :|%s|\n",l_header5,l_header6);
	fprintf(fl_userlog,"l_header7 :|%s|\t l_header8 :|%s|\n",l_header7,l_header8);
	fprintf(fl_userlog,"l_header9 :|%s|\t l_header10 :|%s|\n",l_header9,l_header10);
	fprintf(fl_userlog,"l_header11 :|%s|\t l_header12 :|%s|\n",l_header11,l_header12);
	fprintf(fl_userlog,"l_header13 :|%s|\t l_header14 :|%s|\n",l_header13,l_header14);
	fprintf(fl_userlog,"l_header15 :|%s|\t\n",l_header15);

	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_HEADER_DATA :|%s|\n",l_rept_id);		
	printf("Calling Stored Procedure SP_REPORT_HEADER_DATA :|%s|\n",l_rept_id);		
	//fflush(fl_userlog);
	EXEC SQL CALL SP_REPORT_HEADER_DATA(:l_rept_id,:l_header1,
					    :l_header2,:l_header3,
					    :l_header4,:l_header5,
					    :l_header6,:l_header7,
					    :l_header8,:l_header9,
					    :l_header10,:l_header11,
					    :l_header12,:l_header13,
					    :l_header14,:l_header15,
					    :l_header_data,:l_error_desc); 

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_HEADER_DATA ERR DESC :|%s|\n",l_error_desc);
	}

	fprintf(fl_userlog,"HEADER DATA :|%s|\n",l_header_data);

	/************ Dynamic Formating Procedure ********************************************/
	
	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);	
	printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
	
	EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_header_data,:l_error_desc); 

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
	}

	fprintf(fl_userlog,"HEADER DATA After Formatting -- :|%s|\n",l_header_data);

	/*************************************************************************************/

	fprintf(fl_userlog,"strlen(l_header_data) :|%d|\n",strlen(l_header_data));
	
	if(strlen(l_header_data) > 0)
	{
		fprintf(fl_userlog,"Displaying Header Data ----- \n");

		fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\"><TR>\n");
		fprintf(l_report_XLS2,"<TD WIDTH=\"100%%\" colspan=\'%d\' ALIGN=\"%s\" class=\'headerdata\'>%s</TD>\n",l_colspan,h_report_main_struct.header_data_align,l_header_data);
		fprintf(l_report_XLS2,"</TR></TABLE>\n");
	}

	l_header_brk = h_report_main_struct.header_brk;
	while(l_header_brk > 0)
	{
		fprintf(l_report_XLS2,"</BR>\n");
		l_header_brk --;
		g_line_count++;
	}

	}/**********************  End Of Dynamic Header Display   ***************************/


	/***** Report Title *************************************************************************/

	if(strlen(h_report_main_struct.report_title_align) > 0)
	{	
		if(strlen(h_report_main_struct.report_title) > 0)	
		{
 			fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\"  class=\'ez4\'><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\" class=\'ez4\'>%s</TD></TR></TABLE>\n",l_colspan,h_report_main_struct.report_title_align,h_report_main_struct.report_title);
			
			g_line_count++;
		}
	}
	else
	{
		if(strlen(h_report_main_struct.report_title) > 0)	
		{
 			fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\"  class=\'ez4\'><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\'  ALIGN=\"LEFT\" class=\'ez4\'>%s</TD></TR></TABLE>\n",l_colspan,h_report_main_struct.report_title);	 
			g_line_count++;
		}

	}
	
	l_report_title = h_report_main_struct.report_title_brk;	

	if(l_report_title > 0)
	{
		fprintf(l_report_XLS2,"<TABLE>\n");
		while(l_report_title > 0)
		{
			fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
			l_report_title --;
			g_line_count++;
		}
		fprintf(l_report_XLS2,"</TABLE>\n");
	}


	/******** After report title ****************************************************************/
	
	if(strlen(h_report_main_struct.after_title_align) > 0)
	{
		if(strlen(h_report_main_struct.after_title) > 0)
		{
			fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" class=\'ez4\'><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\'  ALIGN=\"%s\" class=\'ez4\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_main_struct.after_title_align,h_report_main_struct.after_title);

			g_line_count++;
		}
	}
	else
	{
		if(strlen(h_report_main_struct.after_title) > 0)
		{
			fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" class=\'ez4\'><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\'  ALIGN=\"LEFT\" class=\'ez4\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_main_struct.after_title);
			
			g_line_count++;
		}

	}
	
	l_after_title = h_report_main_struct.after_title_brk;

	if(l_after_title > 0)
	{
		fprintf(l_report_XLS2,"<TABLE>\n");
		while(l_after_title > 0)
		{
			fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
			l_after_title --;
			g_line_count++;
		}
		fprintf(l_report_XLS2,"</TABLE>\n");
	}

	l_table_id = 1;
	
	fprintf(fl_userlog,"NO OF TABLES :|%d|\n",h_report_main_struct.no_of_tables);
	printf("NO OF TABLES :|%d|\n",h_report_main_struct.no_of_tables);
	//fflush(fl_userlog);
	if(!strcmp(h_report_main_struct.report_type,"G"))/*added by siva.ganapathi for Enh. Log 121 on 2/20/2009 -- started*/
	{
		
	
			EXEC SQL SELECT * INTO :h_report_details_struct
							FROM REPORT_DETAILS 
							WHERE REPORT_ID=:l_rept_id
							AND TABLE_ID=:l_table_id;
			
		strcpy(l_group_query,h_report_details_struct.group_query);
		
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM1',:l_param1) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM2',:l_param2) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM3',:l_param3) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM4',:l_param4) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM5',:l_param5) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM6',:l_param6) INTO :l_group_query FROM DUAL;
					
		fprintf(fl_userlog,"GROUP QUERY :|%s|\n",l_group_query);
		
		EXEC SQL PREPARE XLS2_GROUP FROM :l_group_query;
		EXEC SQL DECLARE xls2_group_g CURSOR FOR XLS2_GROUP;
		EXEC SQL OPEN xls2_group_g;

		if(sqlca.sqlcode < 0)
		{
				fprintf(fl_userlog,"Error : Cursor Open xls2_group_g ORA ERROR :|%d|\n",sqlca.sqlcode);
		}

		for(;;)
		{
			
			EXEC SQL FETCH xls2_group_g INTO :l_group_parameter;

			if((sqlca.sqlcode == 1403)||(l_group_break_flag == 1))
			break;

			for(l_table_id=1; l_table_id <= h_report_main_struct.no_of_tables; l_table_id++)
			{
				g_complex_parameter1 = 0.0;
				g_complex_parameter2 = 0.0;
				g_complex_parameter3 = 0.0;
				g_complex_parameter4 = 0.0;
				g_complex_parameter5 = 0.0;
				g_complex_parameter6 = 0.0;
				g_complex_parameter7 = 0.0;
				g_complex_parameter8 = 0.0;
				g_complex_parameter9 = 0.0;
				g_complex_parameter10 = 0.0;
				g_complex_parameter11 = 0.0;
				g_complex_parameter12 = 0.0;
				g_complex_parameter13 = 0.0;
				g_complex_parameter14 = 0.0;
				g_complex_parameter15 = 0.0;
				g_complex_parameter16 = 0.0;
				g_complex_parameter17 = 0.0;
				g_complex_parameter18 = 0.0;
				g_complex_parameter19 = 0.0;
				g_complex_parameter20 = 0.0;

				fprintf(fl_userlog,"l_rept_id:|%s|l_table_id:|%d|\n",l_rept_id,l_table_id);
				
				/******* Fetch the REPORT DETAILS for the perticular report ID and table ID ******************/
				
				
					EXEC SQL SELECT * INTO :h_report_details_struct
							FROM REPORT_DETAILS 
							WHERE REPORT_ID=:l_rept_id
							AND TABLE_ID=:l_table_id;
				
				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Failed to Access REPORT_DETAILS --- ORA ERROR :|%d|\n",sqlca.sqlcode);
				}
				
				/***** Table header *********************************************************************/

				fprintf(fl_userlog,"h_report_details_struct.table_hdr:|%s|\n",h_report_details_struct.table_hdr);
				
				if(strlen(h_report_details_struct.table_hdr_align) > 0)
				{
					if(strlen(h_report_details_struct.table_hdr) > 0)
					{
						fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" class=\'lableredbg\'><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\" class=\'lableredbg\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.table_hdr_align,h_report_details_struct.table_hdr);

						g_line_count++;
					}
				}
				else
				{
					if(strlen(h_report_details_struct.table_hdr) > 0)
					{
						fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" class=\'lableredbg\'><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\" class=\'lableredbg\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.table_hdr);

						g_line_count++;
					}
					
				}

				l_table_hdr = h_report_details_struct.table_hdr_brk;
				if(l_table_hdr > 0)
				{
					fprintf(l_report_XLS2,"<TABLE>\n");
					while(l_table_hdr > 0 )
					{
						fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
								
						l_table_hdr -- ;
						g_line_count++;
					}
					fprintf(l_report_XLS2,"</TABLE>\n");
				}

				fprintf(fl_userlog,"table id is:|%d|\n",l_table_id);

		if(l_table_id == 1)
		{		
							
						fprintf(fl_userlog,"table id is:|%d|\n",l_table_id);

						fprintf(fl_userlog,"h_report_details_struct.group_desc:|%s|\n",h_report_details_struct.group_desc);
						fprintf(fl_userlog,"h_report_details_struct.group_pos:|%s|\n",h_report_details_struct.group_pos);
					
						strcpy(l_group_pos,h_report_details_struct.group_pos);

						strcpy(l_group_desc,h_report_details_struct.group_desc);
						/******* Split Group Parameter ***************************************/
					
						fprintf(fl_userlog,"l_group_pos:|%s|\n",l_group_pos);
						
						if(CO_SplitStr(l_group_pos,COMASEP,&l_group_pos_no,&l_group_pos_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_pos);
							APL_GOBACK_FAIL
						}
						
						fprintf(fl_userlog,"l_group_parameter:|%s|\n",l_group_parameter);
						
						if(CO_SplitStr(l_group_parameter,CAPSEP,&l_group_parameter_no,&l_group_parameter_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_parameter);
							APL_GOBACK_FAIL
						}

						fprintf(fl_userlog,"l_group_pos_no:|%d|l_group_parameter_no:|%d|\n",l_group_pos_no,l_group_parameter_no);
						
						if((l_group_pos_no > 0) && (l_group_parameter_no > 0)
							&& (l_group_pos_no == l_group_parameter_no))
						{	
							l_group_break_flag=0;
						
							for(i=0;i<l_group_pos_no;i++)
							{
								if(!strcmp(l_group_pos_value[i],"2"))
								{
									fprintf(fl_userlog,"l_param2:|%s|l_prev_param2:|%s|\n",l_param2,l_prev_param2);
									
									if(!strcmp(l_param2,l_prev_param2))
									{
										strcpy(l_param2,l_group_parameter_value[i]);
										strcpy(l_prev_param2,l_param2);
									}
									else
										l_group_break_flag=1;
								}
								else if(!strcmp(l_group_pos_value[i],"3"))
								{
									fprintf(fl_userlog,"l_param3:|%s|l_prev_param3:|%s|\n",l_param3,l_prev_param3);
									
									if(!strcmp(l_param3,l_prev_param3))
									{
										strcpy(l_param3,l_group_parameter_value[i]);
										strcpy(l_prev_param3,l_param3);
									}
									else
										l_group_break_flag=1;
								}
								else if(!strcmp(l_group_pos_value[i],"4"))
								{
									fprintf(fl_userlog,"l_param4:|%s|l_prev_param4:|%s|\n",l_param4,l_prev_param4);
									
									if(!strcmp(l_param4,l_prev_param4))
									{
										strcpy(l_param4,l_group_parameter_value[i]);
										strcpy(l_prev_param4,l_param4);
									}
									else
										l_group_break_flag=1;
								}
								else if(!strcmp(l_group_pos_value[i],"5"))
								{
									fprintf(fl_userlog,"l_param5:|%s|l_prev_param5:|%s|\n",l_param5,l_prev_param5);
									
									if(!strcmp(l_param5,l_prev_param5))
									{
										strcpy(l_param5,l_group_parameter_value[i]);
										strcpy(l_prev_param5,l_param5);
									}
									else
										l_group_break_flag=1;
								}
								else if(!strcmp(l_group_pos_value[i],"6"))
								{
									fprintf(fl_userlog,"l_param6:|%s|l_prev_param6:|%s|\n",l_param6,l_prev_param6);
									
									if(!strcmp(l_param6,l_prev_param6))
									{
										strcpy(l_param6,l_group_parameter_value[i]);
										strcpy(l_prev_param6,l_param6);
									}
									else
										l_group_break_flag=1;
								}
							}
						}
						else
						{
							fprintf(fl_userlog,"Error: Mismatch in Group Parameters :|%d||%d|",l_group_pos_no,l_group_parameter_no);
							break;
						}


					/****************************************************************************/
						
						fprintf(fl_userlog,"l_param1:|%s|\n",l_param1);
						fprintf(fl_userlog,"l_param2:|%s|\n",l_param2);
						fprintf(fl_userlog,"l_param3:|%s|\n",l_param3);
						fprintf(fl_userlog,"l_param4:|%s|\n",l_param4);
						fprintf(fl_userlog,"l_param5:|%s|\n",l_param5);
						fprintf(fl_userlog,"l_param6:|%s|\n",l_param6);

					/**** Stored procedure for REPORT DETAILS GROUPING **************************/
					
					fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID 29:|%s|\n",l_rept_id);
					printf("Calling Stored Procedure SP_REPORT_DETAIL for Report ID 30:|%s|\n",l_rept_id);
					//fflush(fl_userlog);
					EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
							:l_param2,:l_param3,:l_param4,
							:l_param5,:l_param6,
							:l_table_query,:l_table_query1,:l_table_query2,
							:l_table_query3,:l_table_query4,:l_table_query5,
							:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
							:l_group_desc,:l_error_desc);

					strcpy(table_query,l_table_query);
					strcat(table_query," ");
					
					if(strlen(l_table_query1) > 0)
					{
						strcat(table_query,l_table_query1);
						strcat(table_query," ");
					}
					if(strlen(l_table_query2) > 0)
					{
						strcat(table_query,l_table_query2);
						strcat(table_query," ");
					}
					if(strlen(l_table_query3) > 0)
					{
						strcat(table_query,l_table_query3);
						strcat(table_query," ");
					}
					if(strlen(l_table_query4) > 0)
					{
						strcat(table_query,l_table_query4);
						strcat(table_query," ");
					}
					if(strlen(l_table_query5) > 0)
					{
						strcat(table_query,l_table_query5);
						strcat(table_query," ");
					}
					
					strcat(table_query,APL_NULL_STRING);
						
					fprintf(fl_userlog,"After Stored Procedure SP_REPORT_DETAIL ORA ERROR 9:|%d|\n",sqlca.sqlcode);
					
					if(sqlca.sqlcode < 0)
					{
						fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
					}
					
					//fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
					fprintf(fl_userlog,"l_criteria_query1:|%s|\n",l_criteria_query1);
					fprintf(fl_userlog,"l_criteria_query2:|%s|\n",l_criteria_query2);
					fprintf(fl_userlog,"l_criteria_query3:|%s|\n",l_criteria_query3);
					fprintf(fl_userlog,"l_group_desc:|%s|\n",l_group_desc);

					/********* Group Description ***************************************************************/
								
					if(strlen(l_group_desc) > 0)
						{
							fprintf(l_report_XLS2,"<TABLE><TR><TD></TD></TR></TABLE>\n");
							fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR><TD COLSPAN=\'%d\' WIDTH=\'100%%\' class=\'ez4\'>%s</TD></TR></TABLE>\n",l_colspan,l_group_desc);
							fprintf(l_report_XLS2,"<TABLE><TR><TD></TD></TR></TABLE>\n");
							
							g_line_count++;
						}


					/****** Before table ***********************************************************************/
						
						if(strlen(h_report_details_struct.before_table_align) > 0)
						{
							if(strlen(h_report_details_struct.before_table) > 0)
							{	
								fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.before_table_align,h_report_details_struct.before_table);

								g_line_count++;
							}
						}
						else
						{
							if(strlen(h_report_details_struct.before_table) > 0)
							{	
								fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.before_table);

								g_line_count++;
							}

						}	
						
						l_before_table = h_report_details_struct.before_table_brk;
						if(l_before_table > 0)
						{
							fprintf(l_report_XLS2,"<TABLE>\n");
							while(l_before_table > 0 )
							{
								fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
										
								l_before_table -- ;
								g_line_count++;
							}
							fprintf(l_report_XLS2,"</TABLE>\n");
						}

				/******* Column Heading ***********************************************/
				
				/****** Multiple Column Level **************************************/

						strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
						strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
						strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
						
						fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);

						if(strlen(l_multiple_col_flag) > 0)
						{
							fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
							fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);

							if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
									&l_multiple_col_header_value) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
								 APL_GOBACK_FAIL
							}

							if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
									&l_multiple_colspan_sep_value) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
								 APL_GOBACK_FAIL
							}


							fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
							fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);

							fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border=\'%s\' cellSpacing=\'0\' cellPadding=\'1\'>\n",g_table_border);

							if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
							{
								for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
								{
									for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
									{

									if(int_a == int_b )
									{
									
									strcpy(l_level_header,l_multiple_col_header_value[int_a]);
									strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

									fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
									fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);

									if (CO_SplitStr(l_level_header,
											SEMISEP,
											&l_level_header_no,
											&l_level_header_value) == APL_FAILURE)
									{
										 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
										 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
										 APL_GOBACK_FAIL
									}

									if (CO_SplitStr(l_level_colspan,
											SEMISEP,
											&l_level_colspan_no,
											&l_level_colspan_value) == APL_FAILURE)
									{
										 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
										 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
										 APL_GOBACK_FAIL
									}

									fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
									fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);

									if(l_level_header_no == l_level_colspan_no)
									{

									fprintf(l_report_XLS2,"<TR>\n");
									for(int_aa=0;int_aa<l_level_header_no;int_aa++)
									{
										for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
										{
											if(int_aa == int_bb)
											{	
											
											strcpy(l_level_column,l_level_header_value[int_aa]);
											strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

											fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
											fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
											
											if(strlen(l_level_column) > 0)
												fprintf(l_report_XLS2,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >%s</TD> \n", l_level_col_span,l_level_column);
											else
												fprintf(l_report_XLS2,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >&nbsp;</TD> \n", l_level_col_span);


											}
										}
									}
									fprintf(l_report_XLS2,"</TR>\n");

									}/*** End Of Inner Condition check *****/

									}
									
															
									}/*** End Of 2st Main For Loop *******/

								}/*** End Of 1st Main For Loop *******/

							}/*** End Of Multiple col condition check *****/

							l_column_no=h_report_details_struct.no_of_columns;
							l_no_of_columns = h_report_details_struct.no_of_columns;
						}
						else
						{
						
						fprintf(fl_userlog,"COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
						
						/**** Split the Column Header and print *****************/
						
						strcpy(l_column_header,h_report_details_struct.column_hdr);
						if (CO_SplitStr(l_column_header,COMASEP,&l_col_no,&l_col_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_header);
							 APL_GOBACK_FAIL
						}

						/***** Table Column Heading and its records  *********/
						
						/*********** Page Break Testing  :vinay ***********************/
						
						p_page_no = 1;
						rec_no = 1;

						if(!strcmp(l_paging_flag,"Y"))
						{
							if(p_page_no == 1)
							{
								fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");

								fprintf(l_report_XLS2,"<TR>\n");
								for(i=0;i<l_col_no;i++)
								{
									strcpy(l_column_value,l_col_value[i]);

									fprintf(l_report_XLS2,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
								}
								fprintf(l_report_XLS2,"</TR>\n");

								g_line_count++;
							}
						}
						else
						{
							fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");

							fprintf(l_report_XLS2,"<TR>\n");
							for(i=0;i<l_col_no;i++)
							{
								strcpy(l_column_value,l_col_value[i]);

								fprintf(l_report_XLS2,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
							}
							fprintf(l_report_XLS2,"</TR>\n");

							g_line_count ++;
						}

						g_line_count ++;

						/****************************************************************************/

						l_column_no=h_report_details_struct.no_of_columns;
						l_no_of_columns = h_report_details_struct.no_of_columns;
						
						l_col_hdr = h_report_details_struct.col_hdr_brk;

						}
				
															
						EXEC SQL PREPARE XLS2_SUB1 FROM :table_query;	
						EXEC SQL DECLARE xls2tablequery1_g CURSOR FOR XLS2_SUB1;
						EXEC SQL OPEN xls2tablequery1_g;

						l_fetch_count=0;

						for(;;)
						{
							EXEC SQL FETCH xls2tablequery1_g
								INTO :l_table_parameter;

							if(sqlca.sqlcode == 1403)
							{
								fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
								if(l_fetch_count == 0)
								{
									fprintf(l_report_XLS2,"<TR>\n");
									fprintf(l_report_XLS2,"<TD WIDTH=\'100%%\' COLSPAN=\'%d\' class=\'ez4\'>NO RECORDS FOUND </TD>\n",l_column_no);
									fprintf(l_report_XLS2,"</TR>\n");
									
									l_remove_count ++;

									g_line_count++;
								}
								break;
							}

							if(sqlca.sqlcode < 0)
							{
							   fprintf(fl_userlog,"Error : Critical Error Occured in xls2tablequery1_g --- ORA ERROR:|%d|\n",sqlca.sqlcode);
							   break;
							}

							/********* Page Break Test : vinay ******************************/

							 if(!strcmp(l_paging_flag,"Y"))
							 {
								if(!strcmp(l_print_flag,"L"))
								{
									 if(p_page_no == 1)
									 {
										 if(l_fetch_count > 0)
										 {
											 l_page_break_chk=(l_fetch_count%l_main_page_recs);
											
											 if(l_page_break_chk == 0)
											 {
												fprintf(l_report_XLS2,"</TABLE>\n");

												l_main_page_break = (((l_landscape  * p_total_page_no) - g_line_count)+l_tolarence);

												if(l_main_page_break > 0)
												{
													fprintf(l_report_XLS2,"<TABLE>\n");
													while(l_main_page_break > 0)
													{
														fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
														l_main_page_break --;

														g_line_count ++;
													}
													fprintf(l_report_XLS2,"</TABLE>\n");
												}

												fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");

												fprintf(l_report_XLS2,"<TR>\n");
												for(i=0;i<l_col_no;i++)
												{
													strcpy(l_column_value,l_col_value[i]);

													fprintf(l_report_XLS2,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
												}
												fprintf(l_report_XLS2,"</TR>\n");

												g_line_count++;

												p_page_no++;
												p_total_page_no++;

											 }
											 else
											 {
												p_final_break = 1;
											 }
										}
										else
										{
											p_final_break = 1;
										}
									}
									else if(p_page_no > 1)
									{
										 l_page_break_chk =(l_fetch_count%(l_main_page_recs+(l_next_page_recs * rec_no)));

															
										 if(l_page_break_chk == 0)
										 {
											fprintf(l_report_XLS2,"</TABLE>\n");

											l_next_page_break = (((l_landscape * p_total_page_no) - g_line_count)+l_tolarence);

											if(l_next_page_break > 0)
											{
												fprintf(l_report_XLS2,"<TABLE>\n");
												while(l_next_page_break > 0)
												{
													fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
													l_next_page_break --;

													g_line_count++;

												}
												fprintf(l_report_XLS2,"</TABLE>\n");
											}

											fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");

											fprintf(l_report_XLS2,"<TR>\n");
											for(i=0;i<l_col_no;i++)
											{
												strcpy(l_column_value,l_col_value[i]);

												fprintf(l_report_XLS2,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
											}
											fprintf(l_report_XLS2,"</TR>\n");

											g_line_count ++;
											p_page_no ++;
											p_total_page_no ++;
											rec_no++;
										 }
										 else
										 {
											p_final_break = 1;					
										 }
									}
								}
								else if(!strcmp(l_print_flag,"P"))
								{
									 if(p_page_no == 1)
									 {
										 if(l_fetch_count > 0)
										 {
											 l_page_break_chk=(l_fetch_count%l_main_page_recs);
											
											 if(l_page_break_chk == 0)
											 {
												fprintf(l_report_XLS2,"</TABLE>\n");

												l_main_page_break = (((l_portrait  * p_total_page_no) - g_line_count)+l_tolarence);

												if(l_main_page_break > 0)
												{
													fprintf(l_report_XLS2,"<TABLE>\n");
													while(l_main_page_break > 0)
													{
														fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
														l_main_page_break --;

														g_line_count ++;
													}
													fprintf(l_report_XLS2,"</TABLE>\n");
												}

												fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");

												fprintf(l_report_XLS2,"<TR>\n");
												for(i=0;i<l_col_no;i++)
												{
													strcpy(l_column_value,l_col_value[i]);

													fprintf(l_report_XLS2,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
												}
												fprintf(l_report_XLS2,"</TR>\n");

												g_line_count++;

												p_page_no++;
												p_total_page_no++;

											 }
											 else
											 {
												p_final_break = 1;
											 }
										}
										else
										{
											p_final_break = 1;
										}
									}
									else if(p_page_no > 1)
									{
										 l_page_break_chk =(l_fetch_count%(l_main_page_recs+(l_next_page_recs * rec_no)));

										 if(l_page_break_chk == 0)
										 {
											fprintf(l_report_XLS2,"</TABLE>\n");

											l_next_page_break = (((l_portrait * p_total_page_no) - g_line_count)+l_tolarence);

											if(l_next_page_break > 0)
											{
												fprintf(l_report_XLS2,"<TABLE>\n");
												while(l_next_page_break > 0)
												{
													fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
													l_next_page_break --;

													g_line_count++;

												}
												fprintf(l_report_XLS2,"</TABLE>\n");
											}

											fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");

											fprintf(l_report_XLS2,"<TR>\n");
											for(i=0;i<l_col_no;i++)
											{
												strcpy(l_column_value,l_col_value[i]);

												fprintf(l_report_XLS2,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
											}
											fprintf(l_report_XLS2,"</TR>\n");

											g_line_count ++;
											p_page_no ++;
											p_total_page_no ++;
											rec_no++;
										 }
										 else
										 {
											p_final_break = 1;					
										 }
									}
								}
							}

							/**********************************************************/

							strcpy(l_column_parameter,l_table_parameter);
							
							/******* Split the string and fetch the column data into seperate variables *********/
						
							if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
							{
								CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
								APL_GOBACK_FAIL
							}

							/***** For Number Formatting ***************************************************/

							strcpy(l_format_col_pos,h_report_details_struct.format_col_pos);
							if (CO_SplitStr(l_format_col_pos,COMASEP,&l_format_col_no,&l_format_col_val) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_format_col_pos);
								 APL_GOBACK_FAIL
							}

							fprintf(l_report_XLS2,"<TR>\n");

							for(j=0;j<l_column_num;j++)
							{
								strcpy(l_column,l_column_val[j]);
								
								l_format_col_flag = 0;
								if(l_format_col_no > 0)
								{
									for (k=0;k<l_format_col_no;k++)
									{
										strcpy(l_format_col_value,l_format_col_val[k]);

										if(j==(atoi(l_format_col_value)-1))
											l_format_col_flag = 1;
									}

									if((strlen(l_column) > 0) && (strcmp(l_column," ")))
									{
										if(l_format_col_flag == 1)
										{
											fprintf(l_report_XLS2,"<TD class=\'xlsnumber\' ALIGN=\"RIGHT\" 	x:num=\"%s\">%s</TD>\n",l_column,l_column);
										}
										else
										{
												fprintf(l_report_XLS2,"<TD class=\'record\' ALIGN=\"LEFT\" 			x:str=\"%s\">%s</TD>\n",l_column,l_column);
										}
									}
									else
										 fprintf(l_report_XLS2,"<TD class=\'record\'  >&nbsp</TD>\n");

								}
								else
								{
									if((strlen(l_column) > 0) && (strcmp(l_column," ")))
										fprintf(l_report_XLS2,"<TD class=\'record\' ALIGN=\"LEFT\" 					x:str=\"%s\">%s</TD>\n",l_column,l_column);
									else
										fprintf(l_report_XLS2,"<TD class=\'record\'  >&nbsp</TD>\n");
								}

							}
							fprintf(l_report_XLS2,"</TR>\n");

							/***********************************************************************************/

							l_fetch_count ++;

							g_line_count++;

						}
						EXEC SQL CLOSE xls2tablequery1_g;

						 /********* For Criteria column value display********************************************/
						
						if(h_report_details_struct.tot_criteria_cols > 0)
						{
							if(strlen(h_report_details_struct.criteria_col1_query) > 0)
							{
								EXEC SQL PREPARE XLS2_CR1 FROM :l_criteria_query1;
								EXEC SQL DECLARE XLS2_criteria1_g CURSOR FOR XLS2_CR1;
								EXEC SQL OPEN XLS2_criteria1_g;
								
								if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
								{
									fprintf(fl_userlog,"Error : Failed to Open XLS2_criteria1_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
								}

								for(;;)
								{
								EXEC SQL FETCH XLS2_criteria1_g INTO :l_criteria_value1;
								
									   if(sqlca.sqlcode == 1403)
									   break;

									   if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
									   {
										fprintf(fl_userlog,"Critical Error Occured XLS2_criteria1_g --- ORA ERROR:|%d|\n",sqlca.sqlcode);
										break;
									   }
								}
								EXEC SQL CLOSE XLS2_criteria1_g;

								/****** For Grand Total Of Criteria Value *********/
								

							  if(strcmp(l_criteria_value1,APL_NULL_STRING))
							  { 
								EXEC SQL SELECT (:l_criteria_value1) INTO :l_criteria1_total FROM DUAL;
								
								l_grand_total1=l_grand_total1+l_criteria1_total;
								
								fprintf(fl_userlog,"l_grand_total1 :|%lf|\n",l_grand_total1);
								fprintf(fl_userlog,"l_criteria_value1:|%s|\n",l_criteria_value1);

								EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value1,:l_error_desc);

								fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
								
								fprintf(l_report_XLS2,"<TR>\n");
								fprintf(l_report_XLS2,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col1_name,l_criteria_value1);
								fprintf(l_report_XLS2,"</TR>\n");

								g_line_count++;
							  }
							}

							if(strlen(h_report_details_struct.criteria_col2_query) > 0)
							{
								EXEC SQL PREPARE XLS2_CR2 FROM :l_criteria_query2;
								EXEC SQL DECLARE XLS2_criteria2_g CURSOR FOR XLS2_CR2;
								EXEC SQL OPEN XLS2_criteria2_g;
								
								if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
								{
									fprintf(fl_userlog,"Error : Failed to Open XLS2_criteria2_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
								}

								for(;;)
								{
								EXEC SQL FETCH XLS2_criteria2_g INTO :l_criteria_value2;
								
									   if(sqlca.sqlcode == 1403)
									   break;

									   if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
									   {
										fprintf(fl_userlog,"Critical Error Occured XLS2_criteria2_g--- ORA ERROR:|%d|\n",sqlca.sqlcode);
										break;
									   }
								}
								EXEC SQL CLOSE XLS2_criteria2_g;
								


							  if(strcmp(l_criteria_value2,APL_NULL_STRING))
							  {
								EXEC SQL SELECT (:l_criteria_value2) INTO :l_criteria2_total FROM DUAL;
								
								l_grand_total2=l_grand_total2+l_criteria2_total;
								
								fprintf(fl_userlog,"l_grand_total2 :|%lf|\n",l_grand_total2);
								fprintf(fl_userlog,"l_criteria_value2:|%s|\n",l_criteria_value2);


								EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value2,:l_error_desc);

								fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
								
								fprintf(l_report_XLS2,"<TR>\n");
								fprintf(l_report_XLS2,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col2_name,l_criteria_value2);

								fprintf(l_report_XLS2,"</TR>\n");

								g_line_count++;
							  }
							}

							if(strlen(h_report_details_struct.criteria_col3_query) > 0)
							{
								EXEC SQL PREPARE XLS2_CR3 FROM :l_criteria_query3;
								EXEC SQL DECLARE XLS2_criteria3_g CURSOR FOR XLS2_CR3;
								EXEC SQL OPEN XLS2_criteria3_g;
								
								if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
								{
									fprintf(fl_userlog,"Error : Failed to Open XLS2_criteria3_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
								}

								for(;;)
								{
								EXEC SQL FETCH XLS2_criteria3_g INTO :l_criteria_value3;
								
									   if(sqlca.sqlcode == 1403)
									   break;

									   if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
									   {
										fprintf(fl_userlog,"Critical Error Occured XLS2_criteria3_g --- ORA ERROR:|%d|\n",sqlca.sqlcode);
										break;
									   }
								}
								EXEC SQL CLOSE XLS2_criteria3_g;
									

							 
							 if(strcmp(l_criteria_value3,APL_NULL_STRING))
							 {
								EXEC SQL SELECT (:l_criteria_value3) INTO :l_criteria3_total FROM DUAL;
								
								l_grand_total3=l_grand_total3+l_criteria3_total;
								
								fprintf(fl_userlog,"l_grand_total3 :|%lf|\n",l_grand_total3);
								fprintf(fl_userlog,"l_criteria_value3:|%s|\n",l_criteria_value3);


								EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value3,:l_error_desc);

								fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
							   
								fprintf(l_report_XLS2,"<TR>\n");
								fprintf(l_report_XLS2,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col3_name,l_criteria_value3);
								fprintf(l_report_XLS2,"</TR>\n");

								g_line_count++;
							 }
						  }
						}


				/******* Complex Criteria Part *********************************************/

					strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
					strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
					strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
					strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

					if(strlen(complex_criteria_query) > 0)
					{
						
						EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								:complex_criteria_query,
								'@PARAM1',:l_param1),
								'@PARAM2',:l_param2),
								'@PARAM3',:l_param3),
								'@PARAM4',:l_param4),
								'@PARAM5',:l_param5),
								'@PARAM6',:l_param6),
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								:complex_criteria_query1,
								'@PARAM1',:l_param1),
								'@PARAM2',:l_param2),
								'@PARAM3',:l_param3),
								'@PARAM4',:l_param4),
								'@PARAM5',:l_param5),
								'@PARAM6',:l_param6)
							INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;
				
						strcat(complex_criteria_query,complex_criteria_query1);
						
						fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);

						EXEC SQL PREPARE XLS21_CMPX_CURR FROM :complex_criteria_query;

						EXEC SQL DECLARE xls21_complex_curr_g CURSOR FOR XLS21_CMPX_CURR;

						fprintf(fl_userlog,"After DECLARE xls21_complex_curr_g :|%d|\n",sqlca.sqlcode);

						EXEC SQL OPEN xls21_complex_curr_g;

						EXEC SQL FETCH xls21_complex_curr_g INTO :l_complex_parameter;

						fprintf(fl_userlog,"After FETCH xls21_complex_curr_g :|%d|\n",sqlca.sqlcode);

						EXEC SQL CLOSE xls21_complex_curr_g;

						fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);

						if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
						{
							CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
							APL_GOBACK_FAIL
						}
						
						fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);

						if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
						{
							CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
							APL_GOBACK_FAIL
						}


						fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
						fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);

						l_complex_break_flag = 0;
						
						if(l_complex_num == l_complex_pos_num)
						{

						fprintf(l_report_XLS2,"<TR>\n");

						for(i=0;i<l_column_num;i++)
						{
							for(j=0;j<l_complex_pos_num;j++)
							{

							strcpy(l_complex_pos_column,l_complex_pos_val[j]);

							if((i==0)&&(j==0))
							{
								if(strlen(complex_criteria_label) > 0)
								{
									fprintf(l_report_XLS2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" >%s</TD>\n",complex_criteria_label);
									l_complex_break_flag=1;
								}
								else
								fprintf(l_report_XLS2,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
							}

							if(i== (atoi(l_complex_pos_column)-1))
							{				  
							  strcpy(l_complex_column,l_complex_val[j]);

							  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);

							  l_complex_break_flag=1;
										
							  if(strlen(l_complex_column) > 0)
							  {
								  EXEC SQL CALL SP_NUMBER_FORMATTING(:l_complex_column,:l_error_desc);

								  if(strlen(l_error_desc) > 0)
									fprintf(l_report_XLS2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" 								x:str=\"%s\">%s</TD>\n",l_complex_column,l_complex_column);
								  else
									fprintf(l_report_XLS2,"<TD class=\'lableredbg\' ALIGN=\"RIGHT\" 								x:str=\"%s\">%s</TD>\n",l_complex_column,l_complex_column);
							  }
							  else
							  {
									fprintf(l_report_XLS2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">&nbsp;</TD>\n");
							  }			  
							
							  break;
							}
							else
							{
								 l_complex_break_flag = 0;
								 continue;
							} 

							}
								 
							if(i != 0)
							{
							  if(l_complex_break_flag != 1)
								 fprintf(l_report_XLS2,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
							}
						}

						}
						else
						{
							fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
						}

						fprintf(l_report_XLS2,"</TR>\n");

				}
						
				/*****************	End Of Complex Part     *********************/

				fprintf(l_report_XLS2,"</TABLE>\n");		

				/****** After table ***********************************************************************/
				
						l_after_table = h_report_details_struct.after_table_brk;
						if(l_after_table > 0)
						{
							fprintf(l_report_XLS2,"<TABLE>\n");
							while(l_after_table > 0 )
							{
								fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
										
								l_after_table -- ;
								g_line_count++;
							}
							fprintf(l_report_XLS2,"</TABLE>\n");
						}

						if(strlen(h_report_details_struct.after_table_align) > 0)
						{
							if(strlen(h_report_details_struct.after_table) > 0)
							{		
								fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.after_table_align,h_report_details_struct.after_table);

								g_line_count++;
							}
						}
						else
						{
							if(strlen(h_report_details_struct.after_table) > 0)
							{	
								fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\'  ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.after_table);

								g_line_count++;
							}

						}	
			  	

				/********* Table Footer note **********************************************/

					l_table_footer = h_report_details_struct.table_footer_brk;
						if(l_table_footer > 0)
						{
							fprintf(l_report_XLS2,"<TABLE>\n");
							while(l_table_footer > 0 )
							{
								fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
										
								l_table_footer -- ;
								g_line_count++;
							}
							fprintf(l_report_XLS2,"</TABLE>\n");
						}
							
						if(strlen(h_report_details_struct.table_footer_align) > 0)
						{
							if(strlen(h_report_details_struct.table_footer) > 0)
							{
								fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.table_footer_align,h_report_details_struct.table_footer);

								g_line_count++;
							}
						}
						else
						{
							if(strlen(h_report_details_struct.table_footer) > 0)
							{
								fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.table_footer);

								g_line_count++;
							}

						}

						l_table = h_report_main_struct.table_brk;
						if(l_table > 0)
						{
							fprintf(l_report_XLS2,"<TABLE>\n");
							while(l_table > 0 )
							{
								fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
										
								l_table -- ;
								g_line_count++;
							}
							fprintf(l_report_XLS2,"</TABLE>\n");
						}

				if(l_fetch_count > 0 )
				{
				
				for(m=0;m<l_complex_num;m++)
				{
					if(m == 0)
					{
						strcpy(l_complex_parameter1,l_complex_val[m]);
						g_complex_parameter1=g_complex_parameter1+atof(l_complex_parameter1);
					}
					else if(m == 1)
					{
						strcpy(l_complex_parameter2,l_complex_val[m]);
						g_complex_parameter2=g_complex_parameter2+atof(l_complex_parameter2);
					}
					else if(m == 2)
					{
						strcpy(l_complex_parameter3,l_complex_val[m]);
						g_complex_parameter3=g_complex_parameter3+atof(l_complex_parameter3);
					}
					else if(m == 3)
					{
						strcpy(l_complex_parameter4,l_complex_val[m]);
						g_complex_parameter4=g_complex_parameter4+atof(l_complex_parameter4);
					}
					else if(m == 4)
					{
						strcpy(l_complex_parameter5,l_complex_val[m]);
						g_complex_parameter5=g_complex_parameter5+atof(l_complex_parameter5);
					}
					else if(m == 5)
					{
						strcpy(l_complex_parameter6,l_complex_val[m]);
						g_complex_parameter6=g_complex_parameter6+atof(l_complex_parameter6);
					}
					else if(m == 6)
					{
						strcpy(l_complex_parameter7,l_complex_val[m]);
						g_complex_parameter7=g_complex_parameter7+atof(l_complex_parameter7);
					}
					else if(m == 7)
					{
						strcpy(l_complex_parameter8,l_complex_val[m]);
						g_complex_parameter8=g_complex_parameter8+atof(l_complex_parameter8);
					}
					else if(m == 8)
					{
						strcpy(l_complex_parameter9,l_complex_val[m]);
						g_complex_parameter9=g_complex_parameter9+atof(l_complex_parameter9);
					}
					else if(m == 9)
					{
							strcpy(l_complex_parameter10,l_complex_val[m]);
							g_complex_parameter10=g_complex_parameter10+atof(l_complex_parameter10);
					}
					else if(m == 10)
					{
						strcpy(l_complex_parameter11,l_complex_val[m]);
						g_complex_parameter11=g_complex_parameter11+atof(l_complex_parameter11);
					}
					else if(m == 11)
					{
						strcpy(l_complex_parameter12,l_complex_val[m]);			
						g_complex_parameter12=g_complex_parameter12+atof(l_complex_parameter12);
					}
					else if(m == 12)
					{
						strcpy(l_complex_parameter13,l_complex_val[m]);
						g_complex_parameter13=g_complex_parameter13+atof(l_complex_parameter13);
					}
					else if(m == 13)
					{
						strcpy(l_complex_parameter14,l_complex_val[m]);
						g_complex_parameter14=g_complex_parameter14+atof(l_complex_parameter14);
					}
					else if(m == 14)
					{
						strcpy(l_complex_parameter15,l_complex_val[m]);
						g_complex_parameter15=g_complex_parameter15+atof(l_complex_parameter15);
					}
						else if(m == 15)
						{
							strcpy(l_complex_parameter16,l_complex_val[m]);
							g_complex_parameter16=g_complex_parameter16+atof(l_complex_parameter16);
						}
						else if(m == 16)
						{
							strcpy(l_complex_parameter17,l_complex_val[m]);
							g_complex_parameter17=g_complex_parameter17+atof(l_complex_parameter17);
						}
						else if(m == 17)
						{
							strcpy(l_complex_parameter18,l_complex_val[m]);
							g_complex_parameter18=g_complex_parameter18+atof(l_complex_parameter18);
						}
						else if(m == 18)
						{
							strcpy(l_complex_parameter19,l_complex_val[m]);
							g_complex_parameter19=g_complex_parameter19+atof(l_complex_parameter19);
						}
						else if(m == 19)
						{
							strcpy(l_complex_parameter20,l_complex_val[m]);
							g_complex_parameter20=g_complex_parameter20+atof(l_complex_parameter20);
						}
					}

					}/*** End Of Fetch Count check ******/
	
		}
		else
		{
				
						fprintf(fl_userlog,"l_param1:|%s|\n",l_param1);
						fprintf(fl_userlog,"l_param2:|%s|\n",l_param2);
						fprintf(fl_userlog,"l_param3:|%s|\n",l_param3);
						fprintf(fl_userlog,"l_param4:|%s|\n",l_param4);
						fprintf(fl_userlog,"l_param5:|%s|\n",l_param5);
						fprintf(fl_userlog,"l_param6:|%s|\n",l_param6);

						/**** Stored procedure for REPORT DETAILS GROUPING ************************/

						fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID 31:|%s|\n",l_rept_id);
						EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
								:l_param2,:l_param3,:l_param4,
								:l_param5,:l_param6,
								:l_table_query,:l_table_query1,:l_table_query2,
								:l_table_query3,:l_table_query4,:l_table_query5,
								:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
								:l_group_desc,:l_error_desc);

						strcpy(table_query,l_table_query);
						strcat(table_query," ");
						
						if(strlen(l_table_query1) > 0)
						{
							strcat(table_query,l_table_query1);
							strcat(table_query," ");
						}
						if(strlen(l_table_query2) > 0)
						{
							strcat(table_query,l_table_query2);
							strcat(table_query," ");
						}
						if(strlen(l_table_query3) > 0)
						{
							strcat(table_query,l_table_query3);
							strcat(table_query," ");
						}
						if(strlen(l_table_query4) > 0)
						{
							strcat(table_query,l_table_query4);
							strcat(table_query," ");
						}
						if(strlen(l_table_query5) > 0)
						{
							strcat(table_query,l_table_query5);
							strcat(table_query," ");
						}
						
						strcat(table_query,APL_NULL_STRING);

							
						fprintf(fl_userlog,"After Stored Procedure SP_REPORT_DETAIL ORA ERROR 10:|%d|\n",sqlca.sqlcode);
						
						if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
						{
							fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
						}
						
						//fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
						fprintf(fl_userlog,"l_criteria_query1:|%s|\n",l_criteria_query1);
						fprintf(fl_userlog,"l_criteria_query2:|%s|\n",l_criteria_query2);
						fprintf(fl_userlog,"l_criteria_query3:|%s|\n",l_criteria_query3);
						fprintf(fl_userlog,"l_group_desc:|%s|\n",l_group_desc);

				/****** Before table ***********************************************************************/
					
				if(strlen(h_report_details_struct.before_table_align) > 0)
				{
							if(strlen(h_report_details_struct.before_table) > 0)
							{	
								fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.before_table_align,h_report_details_struct.before_table);

								g_line_count++;
							}
				}
				else
				{
							if(strlen(h_report_details_struct.before_table) > 0)
							{	
								fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.before_table);

								g_line_count++;
							}

					}		
					
						l_before_table = h_report_details_struct.before_table_brk;

						if(l_before_table > 0)
						{
							fprintf(l_report_XLS2,"<TABLE>\n");
							while(l_before_table > 0)
							{
								fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
								l_before_table --;
								g_line_count++;
							}
							fprintf(l_report_XLS2,"</TABLE>\n");
						}

				/******* Column Heading ******************************************************************/
		
				/****** Multiple Column Level **************************************/

						strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
						strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
						strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
						
						fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);

						if(strlen(l_multiple_col_flag) > 0)
						{
							fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
							fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);

							if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
									&l_multiple_col_header_value) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
								 APL_GOBACK_FAIL
							}

							if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
									&l_multiple_colspan_sep_value) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
								 APL_GOBACK_FAIL
							}


							fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
							fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);

							fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border=\'%s\' cellSpacing=\'0\' cellPadding=\'1\' >\n",g_table_border);


							if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
							{
								for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
								{
									for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
									{
															
									if(int_a == int_b )
									{
									
									strcpy(l_level_header,l_multiple_col_header_value[int_a]);
									strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

									fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
									fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);

									if (CO_SplitStr(l_level_header,
											SEMISEP,
											&l_level_header_no,
											&l_level_header_value) == APL_FAILURE)
									{
										 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
										 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
										 APL_GOBACK_FAIL
									}

									if (CO_SplitStr(l_level_colspan,
											SEMISEP,
											&l_level_colspan_no,
											&l_level_colspan_value) == APL_FAILURE)
									{
										 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
										 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
										 APL_GOBACK_FAIL
									}

									fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
									fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);

									if(l_level_header_no == l_level_colspan_no)
									{

									fprintf(l_report_XLS2,"<TR>\n");
									for(int_aa=0;int_aa<l_level_header_no;int_aa++)
									{
										for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
										{
											if(int_aa == int_bb)
											{	
											
											strcpy(l_level_column,l_level_header_value[int_aa]);
											strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

											fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
											fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
											
											if(strlen(l_level_column) > 0)
												fprintf(l_report_XLS2,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >%s</TD> \n", l_level_col_span,l_level_column);
											else
												fprintf(l_report_XLS2,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >&nbsp;</TD> \n", l_level_col_span);


											}
										}
									}
									fprintf(l_report_XLS2,"</TR>\n");

									}/*** End Of Inner Condition check *****/

									}						
															
									}/*** End Of 2st Main For Loop *******/

								}/*** End Of 1st Main For Loop *******/

							}/*** End Of Multiple col condition check *****/

							l_column_no=h_report_details_struct.no_of_columns;
							l_no_of_columns = h_report_details_struct.no_of_columns;

					}
					else
					{
					
					/**** Split the Column Header and print *****************/
					
					strcpy(l_column_header,h_report_details_struct.column_hdr);
					if (CO_SplitStr(l_column_header,COMASEP,&l_col_no,&l_col_value) == APL_FAILURE)
					{
						 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_header);
						 APL_GOBACK_FAIL
					}

					/***** Table Column Heading and its records  *********/
					
					/*********** Page Break Testing  :vinay ***********************/
					
					p_page_no = 1;
					rec_no = 1;

					if(!strcmp(l_paging_flag,"Y"))
					{
						if(p_page_no == 1)
						{
							fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");

							fprintf(l_report_XLS2,"<TR>\n");
							for(i=0;i<l_col_no;i++)
							{
								strcpy(l_column_value,l_col_value[i]);

								fprintf(l_report_XLS2,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
							}
							fprintf(l_report_XLS2,"</TR>\n");

							g_line_count++;
						}
					}
					else
					{
						fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");

						fprintf(l_report_XLS2,"<TR>\n");
						for(i=0;i<l_col_no;i++)
						{
							strcpy(l_column_value,l_col_value[i]);

							fprintf(l_report_XLS2,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
						}
						fprintf(l_report_XLS2,"</TR>\n");

						g_line_count ++;
					}

					g_line_count ++;

					/****************************************************************************/

					l_column_no=h_report_details_struct.no_of_columns;
					l_no_of_columns = h_report_details_struct.no_of_columns;
					
					l_col_hdr = h_report_details_struct.col_hdr_brk;

					}
					
					EXEC SQL PREPARE XLS_SUB FROM :table_query;	
					EXEC SQL DECLARE xlstablequery_g CURSOR FOR XLS_SUB;
					EXEC SQL OPEN xlstablequery_g;

					l_fetch_count=0;

					for(;;)
					{
						EXEC SQL FETCH xlstablequery_g
							INTO :l_table_parameter;

						 if(sqlca.sqlcode == 1403)
						 {
							fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);

							if(l_fetch_count == 0)
							{
							   fprintf(l_report_XLS2,"<TR>\n");
							   fprintf(l_report_XLS2,"<TD WIDTH=\'100%%\' COLSPAN=\'%d\' class=\'ez4\'>NO RECORDS FOUND </TD>\n",l_column_no);
							   fprintf(l_report_XLS2,"</TR>\n");
								
							   l_remove_count ++;
							   g_line_count++;
							}
							break;
						 }

						 if(sqlca.sqlcode < 0)
						 {
							fprintf(fl_userlog,"Error : Critical Error Occured in xlstablequery_g --- ORA ERROR:|%d|\n",sqlca.sqlcode);
							break;
						 }


						/********* Page Break Test : vinay ******************************/

						 if(!strcmp(l_paging_flag,"Y"))
						 {
							if(!strcmp(l_print_flag,"L"))
							{
								 if(p_page_no == 1)
								 {
									 if(l_fetch_count > 0)
									 {
										 l_page_break_chk=(l_fetch_count%l_main_page_recs);
										
										 if(l_page_break_chk == 0)
										 {
											fprintf(l_report_XLS2,"</TABLE>\n");

											l_main_page_break = (((l_landscape  * p_total_page_no) - g_line_count)+l_tolarence);

											if(l_main_page_break > 0)
											{
												fprintf(l_report_XLS2,"<TABLE>\n");
												while(l_main_page_break > 0)
												{
													fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
													l_main_page_break --;

													g_line_count ++;
												}
												fprintf(l_report_XLS2,"</TABLE>\n");
											}

											fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");

											fprintf(l_report_XLS2,"<TR>\n");
											for(i=0;i<l_col_no;i++)
											{
												strcpy(l_column_value,l_col_value[i]);

												fprintf(l_report_XLS2,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
											}
											fprintf(l_report_XLS2,"</TR>\n");

											g_line_count++;

											p_page_no++;
											p_total_page_no++;

										 }
										 else
										 {
											p_final_break = 1;
										 }
									}
									else
									{
										p_final_break = 1;
									}
								}
								else if(p_page_no > 1)
								{
									 l_page_break_chk =(l_fetch_count%(l_main_page_recs+(l_next_page_recs * rec_no)));

									 if(l_page_break_chk == 0)
									 {
										fprintf(l_report_XLS2,"</TABLE>\n");

										l_next_page_break = (((l_landscape * p_total_page_no) - g_line_count)+l_tolarence);

										if(l_next_page_break > 0)
										{
											fprintf(l_report_XLS2,"<TABLE>\n");
											while(l_next_page_break > 0)
											{
												fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
												l_next_page_break --;

												g_line_count++;

											}
											fprintf(l_report_XLS2,"</TABLE>\n");
										}

										fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");

										fprintf(l_report_XLS2,"<TR>\n");
										for(i=0;i<l_col_no;i++)
										{
											strcpy(l_column_value,l_col_value[i]);

											fprintf(l_report_XLS2,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
										}
										fprintf(l_report_XLS2,"</TR>\n");

										g_line_count ++;
										p_page_no ++;
										p_total_page_no ++;
										rec_no++;
									 }
									 else
									 {
										p_final_break = 1;					
									 }
								}
							}
							else if(!strcmp(l_print_flag,"P"))
							{
								 if(p_page_no == 1)
								 {
									 if(l_fetch_count > 0)
									 {
										 l_page_break_chk=(l_fetch_count%l_main_page_recs);
										
										 if(l_page_break_chk == 0)
										 {
											fprintf(l_report_XLS2,"</TABLE>\n");

											l_main_page_break = (((l_portrait  * p_total_page_no) - g_line_count)+l_tolarence);

											if(l_main_page_break > 0)
											{
												fprintf(l_report_XLS2,"<TABLE>\n");
												while(l_main_page_break > 0)
												{
													fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
													l_main_page_break --;

													g_line_count ++;
												}
												fprintf(l_report_XLS2,"</TABLE>\n");
											}

											fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");

											fprintf(l_report_XLS2,"<TR>\n");
											for(i=0;i<l_col_no;i++)
											{
												strcpy(l_column_value,l_col_value[i]);

												fprintf(l_report_XLS2,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
											}
											fprintf(l_report_XLS2,"</TR>\n");

											g_line_count++;

											p_page_no++;
											p_total_page_no++;

										 }
										 else
										 {
											p_final_break = 1;
										 }
									}
									else
									{
										p_final_break = 1;
									}
								}
								else if(p_page_no > 1)
								{
									 l_page_break_chk =(l_fetch_count%(l_main_page_recs+(l_next_page_recs * rec_no)));

									 if(l_page_break_chk == 0)
									 {
										fprintf(l_report_XLS2,"</TABLE>\n");

										l_next_page_break = (((l_portrait * p_total_page_no) - g_line_count)+l_tolarence);

										if(l_next_page_break > 0)
										{
											fprintf(l_report_XLS2,"<TABLE>\n");
											while(l_next_page_break > 0)
											{
												fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
												l_next_page_break --;

												g_line_count++;

											}
											fprintf(l_report_XLS2,"</TABLE>\n");
										}

										fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");

										fprintf(l_report_XLS2,"<TR>\n");
										for(i=0;i<l_col_no;i++)
										{
											strcpy(l_column_value,l_col_value[i]);

											fprintf(l_report_XLS2,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
										}
										fprintf(l_report_XLS2,"</TR>\n");

										g_line_count ++;
										p_page_no ++;
										p_total_page_no ++;
										rec_no++;
									 }
									 else
									 {
										p_final_break = 1;					
									 }
								}
							}
						}

						/**********************************************************/
					
						strcpy(l_column_parameter,l_table_parameter);
						
						/******* Split the string and fetch the column date into seperate variables **/
						
						if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
						{
							CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
							APL_GOBACK_FAIL
						}

						/***** For Number Formatting ***************************************************/

						strcpy(l_format_col_pos,h_report_details_struct.format_col_pos);
						if (CO_SplitStr(l_format_col_pos,COMASEP,&l_format_col_no,&l_format_col_val) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_format_col_pos);
							 APL_GOBACK_FAIL
						}

						fprintf(l_report_XLS2,"<TR>\n");

						for(j=0;j<l_column_num;j++)
						{
							strcpy(l_column,l_column_val[j]);
							
							l_format_col_flag = 0;
							if(l_format_col_no > 0)
							{
								for (k=0;k<l_format_col_no;k++)
								{
									strcpy(l_format_col_value,l_format_col_val[k]);

									if(j==(atoi(l_format_col_value)-1))
										l_format_col_flag = 1;
								}

								if((strlen(l_column) > 0) && (strcmp(l_column," ")))
								{
									if(l_format_col_flag == 1)
									{
										fprintf(l_report_XLS2,"<TD class=\'xlsnumber\' ALIGN=\"RIGHT\" 	x:num=\"%s\">%s</TD>\n",l_column,l_column);
									}
									else
									{
										fprintf(l_report_XLS2,"<TD class=\'record\' ALIGN=\"LEFT\" 			x:str=\"%s\">%s</TD>\n",l_column,l_column);
									}
								}
								else
									 fprintf(l_report_XLS2,"<TD class=\'record\'  >&nbsp</TD>\n");

							}
							else
							{
								if((strlen(l_column) > 0) && (strcmp(l_column," ")))
									fprintf(l_report_XLS2,"<TD class=\'record\' ALIGN=\"LEFT\" 					x:str=\"%s\">%s</TD>\n",l_column,l_column);
								else
									fprintf(l_report_XLS2,"<TD class=\'record\'  >&nbsp</TD>\n");
							}

						}
						fprintf(l_report_XLS2,"</TR>\n");

						/***********************************************************************************/


						l_fetch_count ++;
						g_line_count++;
					}
					EXEC SQL CLOSE xlstablequery_g;

					/********* For Criteria column value display **********************/
					
					if(h_report_details_struct.tot_criteria_cols > 0)
					{
						if(strlen(h_report_details_struct.criteria_col1_query) > 0)
						{
							EXEC SQL PREPARE XLS_CR1 FROM :l_criteria_query1;
							EXEC SQL DECLARE xlscriteria1_g CURSOR FOR XLS_CR1;
							EXEC SQL OPEN xlscriteria1_g;
							
							if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
							{
								fprintf(fl_userlog,"Error : Failed to Open xlscriteria1_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
							}

							for(;;)
							{
							EXEC SQL FETCH xlscriteria1_g INTO :l_criteria_value1;
							
								   if(sqlca.sqlcode == 1403)
								   break;

								   if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
								   {
										fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
										break;
								   }
							}
							EXEC SQL CLOSE xlscriteria1_g;

							/****** For Grand Total Of Criteria Value *********/
								
							if(strcmp(l_criteria_value1,APL_NULL_STRING))
							{
								EXEC SQL SELECT (:l_criteria_value1) INTO :l_criteria1_total FROM DUAL;
								
								l_grand_total1=l_grand_total1+l_criteria1_total;
								
								fprintf(fl_userlog,"l_grand_total1 :|%lf|\n",l_grand_total1);
								fprintf(fl_userlog,"l_criteria_value1:|%s|\n",l_criteria_value1);

								EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value1,:l_error_desc);

								fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);

								fprintf(l_report_XLS2,"<TR>\n");
								fprintf(l_report_XLS2,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col1_name,l_criteria_value1);
								fprintf(l_report_XLS2,"</TR>\n");

								g_line_count++;
							 }

						}

						if(strlen(h_report_details_struct.criteria_col2_query) > 0)
						{
							EXEC SQL PREPARE XLS_CR2 FROM :l_criteria_query2;
							EXEC SQL DECLARE xlscriteria2_g CURSOR FOR XLS_CR2;
							EXEC SQL OPEN xlscriteria2_g;
							
							if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
							{
								fprintf(fl_userlog,"Error : Failed to Open xlscriteria2_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
							}

							for(;;)
							{
							EXEC SQL FETCH xlscriteria2_g INTO :l_criteria_value2;
							
								   if(sqlca.sqlcode == 1403)
								   break;

								   if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
								   {
										fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
										break;
								   }
							}
							EXEC SQL CLOSE xlscriteria2_g;
							

							if(strcmp(l_criteria_value2,APL_NULL_STRING))
							{
								EXEC SQL SELECT (:l_criteria_value2) INTO :l_criteria2_total FROM DUAL;
								
								l_grand_total2=l_grand_total2+l_criteria2_total;
								
								fprintf(fl_userlog,"l_grand_total2 :|%lf|\n",l_grand_total2);
								fprintf(fl_userlog,"l_criteria_value2:|%s|\n",l_criteria_value2);

								EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value2,:l_error_desc);

								fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);

								fprintf(l_report_XLS2,"<TR>\n");
								fprintf(l_report_XLS2,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col2_name,l_criteria_value2);

								fprintf(l_report_XLS2,"</TR>\n");

								g_line_count++;
							 }
						}

						if(strlen(h_report_details_struct.criteria_col3_query) > 0)
						{
							EXEC SQL PREPARE XLS_CR3 FROM :l_criteria_query3;
							EXEC SQL DECLARE xlscriteria3_g CURSOR FOR XLS_CR3;
							EXEC SQL OPEN xlscriteria3_g;
							
							if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
							{
								fprintf(fl_userlog,"Error : Failed to Open xlscriteria3_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
							}

							for(;;)
							{
							EXEC SQL FETCH xlscriteria3_g INTO :l_criteria_value3;
							
								   if(sqlca.sqlcode == 1403)
								   break;

								   if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
								   {
										fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
										break;
								   }
							}
							EXEC SQL CLOSE xlscriteria3_g;
								
							if(strcmp(l_criteria_value3,APL_NULL_STRING))
							{
								EXEC SQL SELECT (:l_criteria_value3) INTO :l_criteria3_total FROM DUAL;
								
								l_grand_total3=l_grand_total3+l_criteria3_total;
								
								fprintf(fl_userlog,"l_grand_total3 :|%lf|\n",l_grand_total3);
								fprintf(fl_userlog,"l_criteria_value3:|%s|\n",l_criteria_value3);

								EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value3,:l_error_desc);

								fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);


								fprintf(l_report_XLS2,"<TR>\n");
								fprintf(l_report_XLS2,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col3_name,l_criteria_value3);
								fprintf(l_report_XLS2,"</TR>\n");

								g_line_count++;
							 }
						}
					}

					/******* Complex Criteria Part *********************************************/

					strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
					strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
					strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
					strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

					fprintf(fl_userlog,"Before Complex Part -- l_fetch_count 7:|%d|\n",l_fetch_count);

					if(l_fetch_count > 0)
					{

					if(strlen(complex_criteria_query) > 0)
					{
					
					EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
							:complex_criteria_query,
							'@PARAM1',:l_param1),
							'@PARAM2',:l_param2),
							'@PARAM3',:l_param3),
							'@PARAM4',:l_param4),
							'@PARAM5',:l_param5),
							'@PARAM6',:l_param6),
							REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
							:complex_criteria_query1,
							'@PARAM1',:l_param1),
							'@PARAM2',:l_param2),
							'@PARAM3',:l_param3),
							'@PARAM4',:l_param4),
							'@PARAM5',:l_param5),
							'@PARAM6',:l_param6)
						INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;

					strcat(complex_criteria_query,complex_criteria_query1);
					
					fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);

					EXEC SQL PREPARE XLS22_CMPX_CURR FROM :complex_criteria_query;

					EXEC SQL DECLARE xls22_complex_curr_g CURSOR FOR XLS22_CMPX_CURR;

					fprintf(fl_userlog,"After DECLARE xls22_complex_curr_g :|%d|\n",sqlca.sqlcode);

					EXEC SQL OPEN xls22_complex_curr_g;

					EXEC SQL FETCH xls22_complex_curr_g INTO :l_complex_parameter;

					fprintf(fl_userlog,"After FETCH xls22_complex_curr_g :|%d|\n",sqlca.sqlcode);

					EXEC SQL CLOSE xls22_complex_curr_g;

					fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);

					if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
					{
						CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
						APL_GOBACK_FAIL
					}
					
					fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);

					if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
					{
						CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
						APL_GOBACK_FAIL
					}


					fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
					fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);

					l_complex_break_flag = 0;

					
					if(l_complex_num == l_complex_pos_num)
					{

					fprintf(l_report_XLS2,"<TR>\n");

					for(i=0;i<l_column_num;i++)
					{
						for(j=0;j<l_complex_pos_num;j++)
						{

						strcpy(l_complex_pos_column,l_complex_pos_val[j]);

						if((i==0)&&(j==0))
						{
							if(strlen(complex_criteria_label) > 0)
							{
								fprintf(l_report_XLS2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" >%s</TD>\n",complex_criteria_label);
								l_complex_break_flag=1;
							}
							else
								fprintf(l_report_XLS2,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
						}

						if(i== (atoi(l_complex_pos_column)-1))
						{				  
						  strcpy(l_complex_column,l_complex_val[j]);

						  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);

						  l_complex_break_flag=1;

						  if(strlen(l_complex_column) > 0)
						  {
							  EXEC SQL CALL SP_NUMBER_FORMATTING(:l_complex_column,:l_error_desc);

							  if(strlen(l_error_desc) > 0)
								fprintf(l_report_XLS2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" 								x:str=\"%s\">%s</TD>\n",l_complex_column,l_complex_column);
							  else
								fprintf(l_report_XLS2,"<TD class=\'lableredbg\' ALIGN=\"RIGHT\" 								x:str=\"%s\">%s</TD>\n",l_complex_column,l_complex_column);
						  }
						  else
						  {
								fprintf(l_report_XLS2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">&nbsp;</TD>\n");
						  }			  

						  break;
						}
						else
						{
							 l_complex_break_flag = 0;
							 continue;
						} 

						}
							 
						if(i != 0)
						{
						  if(l_complex_break_flag != 1)
							 fprintf(l_report_XLS2,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
						}
					}

					}
					else
					{
						fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
					}

					fprintf(l_report_XLS2,"</TR>\n");

					}

					}
					else
					{			
						fprintf(fl_userlog," No Records Found -- So No Need To Display Criteria \n");
					}
					

					/***************************************************************************/

					fprintf(l_report_XLS2,"</TABLE>\n");
					
					/****** After table ***************************************************/
					
					l_after_table = h_report_details_struct.after_table_brk;

					if(l_after_table > 0)
					{
						fprintf(l_report_XLS2,"<TABLE>\n");
						while(l_after_table > 0)
						{
							fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
							l_after_table --;
							g_line_count++;
						}
						fprintf(l_report_XLS2,"</TABLE>\n");
					}

					if(strlen(h_report_details_struct.after_table_align) > 0)
					{
						if(strlen(h_report_details_struct.after_table) > 0)
						{	
							fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR><TD WIDTH=\"100%%\" COLSPAN='%d\' ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.after_table_align,h_report_details_struct.after_table);

							g_line_count++;
						}
					}
					else
					{
						if(strlen(h_report_details_struct.after_table) > 0)
						{	
							fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR><TD WIDTH=\"100%%\" COLSPAN='%d\' ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.after_table);

							g_line_count++;
						}

					}	
			  
		  
				/************ Table Footer note **************************************/
				
					l_table_footer = h_report_details_struct.table_footer_brk;
					
					if(l_table_footer > 0)
					{
						fprintf(l_report_XLS2,"<TABLE>\n");
						while(l_table_footer > 0)
						{
							fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
							l_table_footer --;
							g_line_count++;
						}
						fprintf(l_report_XLS2,"</TABLE>\n");
					}

					if(strlen(h_report_details_struct.table_footer_align) > 0)
					{
						if(strlen(h_report_details_struct.table_footer) > 0)
						{
							fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.table_footer_align,h_report_details_struct.table_footer);

							g_line_count++;
						}
					}
					else
					{
						if(strlen(h_report_details_struct.table_footer) > 0)
						{
							fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.table_footer);

							g_line_count++;
						}
					}

					l_table = h_report_main_struct.table_brk;
					
					if(l_table > 0)
					{
						fprintf(l_report_XLS2,"<TABLE>\n");
						while(l_table > 0)
						{
							fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
							l_table --;
							g_line_count++;
						}
						fprintf(l_report_XLS2,"</TABLE>\n");
					}

					/************** Final Page Break *******************************************************/

					if(!strcmp(l_paging_flag,"Y"))
					{
						if(!strcmp(l_print_flag,"L"))
						{		
							if((p_final_break == 1)||(l_fetch_count == 0))
							{
								if(l_client_fetch_count == 0)
								{
									l_final_break = ((l_landscape * p_total_page_no) - (g_line_count - l_tolarence));
								}
								else if (l_client_fetch_count > 0)
								{
									l_final_break = ((l_landscape * p_total_page_no) - (g_line_count - l_tolarence));
								}

								fprintf(l_report_XLS2,"<TABLE>\n");
								while(l_final_break > 0)
								{
									fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
									l_final_break --;

									g_line_count++;
								}
								fprintf(l_report_XLS2,"</TABLE>\n");

								p_final_break = 0;
								p_total_page_no++;
								
							}
						}
						else if(!strcmp(l_print_flag,"P"))
						{		
							if((p_final_break == 1)||(l_fetch_count == 0))
							{
								if(l_client_fetch_count == 0)
								{
									l_final_break = ((l_portrait * p_total_page_no) - (g_line_count - l_tolarence));
								}
								else if (l_client_fetch_count > 0)
								{
									l_final_break = ((l_portrait * p_total_page_no) - (g_line_count - l_tolarence));
								}

								fprintf(l_report_XLS2,"<TABLE>\n");
								while(l_final_break > 0)
								{
									fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
									l_final_break --;

									g_line_count++;
								}
								fprintf(l_report_XLS2,"</TABLE>\n");

								p_final_break = 0;
								p_total_page_no++;
								
							}
						}
					}

				if( l_fetch_count > 0 )
					{
						for(m=0;m<l_complex_num;m++)
						{
							if(m == 0)
							{
								strcpy(l_complex_parameter1,l_complex_val[m]);
								g_complex_parameter1=atof(l_complex_parameter1);
							}
							else if(m == 1)
							{
								strcpy(l_complex_parameter2,l_complex_val[m]);
								g_complex_parameter2=atof(l_complex_parameter2);
							}
							else if(m == 2)
							{
								strcpy(l_complex_parameter3,l_complex_val[m]);
								g_complex_parameter3=atof(l_complex_parameter3);
							}
							else if(m == 3)
							{
								strcpy(l_complex_parameter4,l_complex_val[m]);
								g_complex_parameter4=atof(l_complex_parameter4);
							}
							else if(m == 4)
							{
								strcpy(l_complex_parameter5,l_complex_val[m]);
								g_complex_parameter5=atof(l_complex_parameter5);
							}
							else if(m == 5)
							{
								strcpy(l_complex_parameter6,l_complex_val[m]);
								g_complex_parameter6=atof(l_complex_parameter6);
							}
							else if(m == 6)
							{
								strcpy(l_complex_parameter7,l_complex_val[m]);
								g_complex_parameter7=atof(l_complex_parameter7);
							}
							else if(m == 7)
							{
								strcpy(l_complex_parameter8,l_complex_val[m]);
								g_complex_parameter8=atof(l_complex_parameter8);
							}
							else if(m == 8)
							{
								strcpy(l_complex_parameter9,l_complex_val[m]);
								g_complex_parameter9=atof(l_complex_parameter9);
							}
							else if(m == 9)
							{
								strcpy(l_complex_parameter10,l_complex_val[m]);
								g_complex_parameter10=atof(l_complex_parameter10);
							}
							else if(m == 10)
							{
								strcpy(l_complex_parameter11,l_complex_val[m]);
								g_complex_parameter11=atof(l_complex_parameter11);
							}
							else if(m == 11)
							{
								strcpy(l_complex_parameter12,l_complex_val[m]);			
								g_complex_parameter12=atof(l_complex_parameter12);
							}
							else if(m == 12)
							{
								strcpy(l_complex_parameter13,l_complex_val[m]);
								g_complex_parameter13=atof(l_complex_parameter13);
							}
							else if(m == 13)
							{
								strcpy(l_complex_parameter14,l_complex_val[m]);
								g_complex_parameter14=atof(l_complex_parameter14);
							}
							else if(m == 14)
							{
								strcpy(l_complex_parameter15,l_complex_val[m]);
								g_complex_parameter15=atof(l_complex_parameter15);
							}
							else if(m == 15)
							{
								strcpy(l_complex_parameter16,l_complex_val[m]);
								g_complex_parameter16=atof(l_complex_parameter16);
							}
							else if(m == 16)
							{
								strcpy(l_complex_parameter17,l_complex_val[m]);
								g_complex_parameter17=atof(l_complex_parameter17);
							}
							else if(m == 17)
							{
								strcpy(l_complex_parameter18,l_complex_val[m]);
								g_complex_parameter18=atof(l_complex_parameter18);
							}
							else if(m == 18)
							{
								strcpy(l_complex_parameter19,l_complex_val[m]);
								g_complex_parameter19=atof(l_complex_parameter19);
							}
							else if(m == 19)
							{
								strcpy(l_complex_parameter20,l_complex_val[m]);
								g_complex_parameter20=atof(l_complex_parameter20);
							}

						}/*** End of Complex For Loop ***/

					}/*** End Of Fetch Count Check ****/

				

		}/******* End Of  Else Block **********/				



		/*************** Complex Criteria Individual  *********************/
					
		if(l_fetch_count > 0 )
			{
						fprintf(fl_userlog,"g_complex_parameter1 :|%lf|\tg_complex_parameter2 :|%lf|\n",g_complex_parameter1,g_complex_parameter2);
						fprintf(fl_userlog,"g_complex_parameter3 :|%lf|\tg_complex_parameter4 :|%lf|\n",g_complex_parameter3,g_complex_parameter4);
						fprintf(fl_userlog,"g_complex_parameter5 :|%lf|\tg_complex_parameter6 :|%lf|\n",g_complex_parameter5,g_complex_parameter6);
						fprintf(fl_userlog,"g_complex_parameter7 :|%lf|\tg_complex_parameter8 :|%lf|\n",g_complex_parameter7,g_complex_parameter8);
						fprintf(fl_userlog,"g_complex_parameter9 :|%lf|\tg_complex_parameter10 :|%lf|\n",g_complex_parameter9,g_complex_parameter10);
						fprintf(fl_userlog,"g_complex_parameter11 :|%lf|\tg_complex_parameter12 :|%lf|\n",g_complex_parameter11,g_complex_parameter12);
						fprintf(fl_userlog,"g_complex_parameter13 :|%lf|\tg_complex_parameter14 :|%lf|\n",g_complex_parameter13,g_complex_parameter14);
						fprintf(fl_userlog,"g_complex_parameter15 :|%lf|\tg_complex_parameter16 :|%lf|\n",g_complex_parameter15,g_complex_parameter16);
						fprintf(fl_userlog,"g_complex_parameter17 :|%lf|\tg_complex_parameter18 :|%lf|\n",g_complex_parameter17,g_complex_parameter18);
						fprintf(fl_userlog,"g_complex_parameter19 :|%lf|\tg_complex_parameter20 :|%lf|\n",g_complex_parameter19,g_complex_parameter20);
			}


					/*******************************************************************/

					/********* Dynamic Footer Display ****************************************/

					strcpy(footer_query,h_report_details_struct.footer_query);
					
					fprintf(fl_userlog,"strlen(footer_query) :|%d|\n",strlen(footer_query));

					if(strlen(footer_query) > 0)
					{

					/**** Stored Procedure : SP_REPORT_FOOTER ***********************************/

					fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
					printf("Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
					
					EXEC SQL CALL SP_REPORT_FOOTER(:l_rept_id,:l_table_id,:l_param1,:l_param2,
								:l_param3,:l_param4, :l_param5,
								:l_param6,:l_footer_query,:l_footer_query1,:l_error_desc); 

					strcat(l_footer_query,l_footer_query1);

					if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					{
						fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER ERR DESC :|%s|\n",l_error_desc);
					}

					fprintf(fl_userlog,"FOOTER QUERY :|%s|\n",l_footer_query);

					strcpy(l_footer_query_value,APL_NULL_STRING);

					EXEC SQL PREPARE XLS2_FOOTER_CURR FROM :l_footer_query;

					EXEC SQL DECLARE xls2_footer_curr_g CURSOR FOR XLS2_FOOTER_CURR;
					
					fprintf(fl_userlog,"After DECLARE xls2_footer_curr_g :|%d|\n",sqlca.sqlcode);

					EXEC SQL OPEN xls2_footer_curr_g;

					EXEC SQL FETCH xls2_footer_curr_g INTO :l_footer_query_value;
					fprintf(fl_userlog,"After FETCH xls2_footer_curr_g :|%d|\n",sqlca.sqlcode);

					EXEC SQL CLOSE xls2_footer_curr_g;

					fprintf(fl_userlog,"l_footer_query_value :|%s|\n",l_footer_query_value);

					l_footer_num = 0;

					strcpy(l_footer1,APL_NULL_STRING);
					strcpy(l_footer2,APL_NULL_STRING);
					strcpy(l_footer3,APL_NULL_STRING);
					strcpy(l_footer4,APL_NULL_STRING);
					strcpy(l_footer5,APL_NULL_STRING);
					strcpy(l_footer6,APL_NULL_STRING);
					strcpy(l_footer7,APL_NULL_STRING);
					strcpy(l_footer8,APL_NULL_STRING);
					strcpy(l_footer9,APL_NULL_STRING);
					strcpy(l_footer10,APL_NULL_STRING);
					strcpy(l_footer11,APL_NULL_STRING);
					strcpy(l_footer12,APL_NULL_STRING);
					strcpy(l_footer13,APL_NULL_STRING);
					strcpy(l_footer14,APL_NULL_STRING);
					strcpy(l_footer15,APL_NULL_STRING);

					if(strlen(l_footer_query_value) > 0)
					{		
						if (CO_SplitStr(l_footer_query_value,CAPSEP,&l_footer_num,&l_footer_val) == APL_FAILURE)
						{
							CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_footer_query_value);
							APL_GOBACK_FAIL
						}

						fprintf(fl_userlog,"l_footer_num :|%d|\n",l_footer_num);
						if(l_footer_num > 0)
						{
							for(i=0;i<l_footer_num;i++)
							{

								if(i == 0)
								strcpy(l_footer1,l_footer_val[i]);
								else if(i == 1)
								strcpy(l_footer2,l_footer_val[i]);
								else if(i == 2)
								strcpy(l_footer3,l_footer_val[i]);
								else if(i == 3)
								strcpy(l_footer4,l_footer_val[i]);
								else if(i == 4)
								strcpy(l_footer5,l_footer_val[i]);
								else if(i == 5)
								strcpy(l_footer6,l_footer_val[i]);
								else if(i == 6)
								strcpy(l_footer7,l_footer_val[i]);
								else if(i == 7)
								strcpy(l_footer8,l_footer_val[i]);
								else if(i == 8)
								strcpy(l_footer9,l_footer_val[i]);
								else if(i == 9)
								strcpy(l_footer10,l_footer_val[i]);
								else if(i == 10)
								strcpy(l_footer11,l_footer_val[i]);
								else if(i == 11)
								strcpy(l_footer12,l_footer_val[i]);
								else if(i == 12)
								strcpy(l_footer13,l_footer_val[i]);
								else if(i == 13)
								strcpy(l_footer14,l_footer_val[i]);
								else if(i == 14)
								strcpy(l_footer15,l_footer_val[i]);
							}
						}

					}/******* End Of Footer Value Check *******************************************/

					/****** Stored Procedure : SP_REPORT_FOOTER_DATA ***********************************/

					fprintf(fl_userlog,"l_footer1 :|%s|\t l_footer2 :|%s|\n",l_footer1,l_footer2);
					fprintf(fl_userlog,"l_footer3 :|%s|\t l_footer4 :|%s|\n",l_footer3,l_footer4);
					fprintf(fl_userlog,"l_footer5 :|%s|\t l_footer6 :|%s|\n",l_footer5,l_footer6);
					fprintf(fl_userlog,"l_footer7 :|%s|\t l_footer8 :|%s|\n",l_footer7,l_footer8);
					fprintf(fl_userlog,"l_footer9 :|%s|\t l_footer10 :|%s|\n",l_footer9,l_footer10);
					fprintf(fl_userlog,"l_footer11 :|%s|\t l_footer12 :|%s|\n",l_footer11,l_footer12);
					fprintf(fl_userlog,"l_footer13 :|%s|\t l_footer14 :|%s|\n",l_footer13,l_footer14);
					fprintf(fl_userlog,"l_footer15 :|%s|\n",l_footer15);

					fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);	
					printf("Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);		
					//fflush(fl_userlog);
					EXEC SQL CALL SP_REPORT_FOOTER_DATA(:l_rept_id,:l_table_id,
										:l_footer1,:l_footer2,
										:l_footer3,:l_footer4,
										:l_footer5,:l_footer6,
										:l_footer7,:l_footer8,
										:l_footer9,:l_footer10,
										:l_footer11,:l_footer12,
										:l_footer13,:l_footer14,
										:l_footer15,
										:g_complex_parameter1,:g_complex_parameter2,
										:g_complex_parameter3,:g_complex_parameter4,
										:g_complex_parameter5,:g_complex_parameter6,
										:g_complex_parameter7,:g_complex_parameter8,
										:g_complex_parameter9,:g_complex_parameter10,
										:g_complex_parameter11,:g_complex_parameter12,
										:g_complex_parameter13,:g_complex_parameter14,
										:g_complex_parameter15,:g_complex_parameter16,
										:g_complex_parameter17,:g_complex_parameter18,
										:g_complex_parameter19,:g_complex_parameter20,
										:l_footer_data,:l_error_desc);

					if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					{
						fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER_DATA ERR DESC :|%s|\n",l_error_desc);
					}

					fprintf(fl_userlog,"FOOTER DATA :|%s|\n",l_footer_data);

					/************ Dynamic Formating Procedure ********************************************/
					
					fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);	
					printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
					
					EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_footer_data,:l_error_desc); 

					if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					{
						fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
					}

					fprintf(fl_userlog,"FOOTER DATA After Formatting -- :|%s|\n",l_footer_data);


					/*************************************************************************************/

					/************ Dynamic Footer Data Display **********************************************/
					
					fprintf(fl_userlog,"strlen(l_footer_data) :|%d|\n",strlen(l_footer_data));

					if(strlen(l_footer_data) > 0)
					{
						fprintf(fl_userlog,"Displaying Footer Data --- \n");

						fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\"><TR>\n");
						fprintf(l_report_XLS2,"<TD WIDTH=\"100%%\" colspan=\'%d\' ALIGN=\"%s\" class=\'headerdata\' >%s</TD> \n",l_colspan,h_report_details_struct.footer_data_align,l_footer_data);
						fprintf(l_report_XLS2,"</TR></TABLE>\n");
					}

					l_footer_data_brk = h_report_details_struct.footer_data_brk;
					while(l_footer_data_brk > 0)
					{
						fprintf(l_report_XLS2,"</BR>\n");
						l_footer_data_brk --;
						g_line_count++;
					}

					}

				/***************** End Of Dynamic Footer Display  *****************************/

			/***************** Final Complex Criteria Calculation *************************/

					fprintf(fl_userlog,"\n--- l_table_id --- 8:|%d|\n",l_table_id);

					if(l_table_id == 1)
					{
						f_complex_parameter1=f_complex_parameter1+g_complex_parameter1;
						f_complex_parameter2=f_complex_parameter2+g_complex_parameter2;
						f_complex_parameter3=f_complex_parameter3+g_complex_parameter3;
						f_complex_parameter4=f_complex_parameter4+g_complex_parameter4;
						f_complex_parameter5=f_complex_parameter5+g_complex_parameter5;
						f_complex_parameter6=f_complex_parameter6+g_complex_parameter6;
						f_complex_parameter7=f_complex_parameter7+g_complex_parameter7;
						f_complex_parameter8=f_complex_parameter8+g_complex_parameter8;
						f_complex_parameter9=f_complex_parameter9+g_complex_parameter9;
						f_complex_parameter10=f_complex_parameter10+g_complex_parameter10;
						f_complex_parameter11=f_complex_parameter11+g_complex_parameter11;
						f_complex_parameter12=f_complex_parameter12+g_complex_parameter12;
						f_complex_parameter13=f_complex_parameter13+g_complex_parameter13;
						f_complex_parameter14=f_complex_parameter14+g_complex_parameter14;
						f_complex_parameter15=f_complex_parameter15+g_complex_parameter15;
						f_complex_parameter16=f_complex_parameter16+g_complex_parameter16;
						f_complex_parameter17=f_complex_parameter17+g_complex_parameter17;
						f_complex_parameter18=f_complex_parameter18+g_complex_parameter18;
						f_complex_parameter19=f_complex_parameter19+g_complex_parameter19;
						f_complex_parameter20=f_complex_parameter20+g_complex_parameter20;
					}


					/**********************************************************************************/
		}
	}
	EXEC SQL CLOSE xls2_group_g;
   }/*added by siva.ganapathi for Enh. Log 121 on 2/20/2009 -- Ended*/
	else
	{
	while(l_table_id <= h_report_main_struct.no_of_tables)
	{
		g_complex_parameter1 = 0.0;
		g_complex_parameter2 = 0.0;
		g_complex_parameter3 = 0.0;
		g_complex_parameter4 = 0.0;
		g_complex_parameter5 = 0.0;
		g_complex_parameter6 = 0.0;
		g_complex_parameter7 = 0.0;
		g_complex_parameter8 = 0.0;
		g_complex_parameter9 = 0.0;
		g_complex_parameter10 = 0.0;
		g_complex_parameter11 = 0.0;
		g_complex_parameter12 = 0.0;
		g_complex_parameter13 = 0.0;
		g_complex_parameter14 = 0.0;
		g_complex_parameter15 = 0.0;
		g_complex_parameter16 = 0.0;
		g_complex_parameter17 = 0.0;
		g_complex_parameter18 = 0.0;
		g_complex_parameter19 = 0.0;
		g_complex_parameter20 = 0.0;

		/******* Fetch the REPORT DETAILS for the perticular report ID and table ID **********/
		
		EXEC SQL SELECT * INTO :h_report_details_struct
					FROM REPORT_DETAILS 
					WHERE REPORT_ID=:l_rept_id
					AND TABLE_ID=:l_table_id;
		
		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Failed to Access REPORT_DETAILS --- ORA ERROR :|%d|\n",sqlca.sqlcode);
		}


		/***** Table header *****************************************************/

		fprintf(fl_userlog,"h_report_details_struct.table_hdr:|%s|\n",h_report_details_struct.table_hdr);
		
		if(strlen(h_report_details_struct.table_hdr_align) > 0)
		{
			if(strlen(h_report_details_struct.table_hdr) > 0)
			{
				fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" class=\'lableredbg\'><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\" class=\'lableredbg\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.table_hdr_align,h_report_details_struct.table_hdr);

				g_line_count++;
			}
		}
		else
		{
			if(strlen(h_report_details_struct.table_hdr) > 0)
			{
				fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" class=\'lableredbg\'><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\" class=\'lableredbg\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.table_hdr);
			
				g_line_count++;
			}
			
		}

		l_table_hdr = h_report_details_struct.table_hdr_brk;

		if(l_table_hdr > 0)
		{
			fprintf(l_report_XLS2,"<TABLE>\n");
			while(l_table_hdr > 0)
			{
				fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
				l_table_hdr --;
				g_line_count++;
			}
			fprintf(l_report_XLS2,"</TABLE>\n");
		}

		/*********** Grouping Condition Check **************************************************/

		fprintf(fl_userlog,"h_report_details_struct.group_desc:|%s|\n",h_report_details_struct.group_desc);
		fprintf(fl_userlog,"h_report_details_struct.group_pos:|%s|\n",h_report_details_struct.group_pos);
			
		strcpy(l_group_query,h_report_details_struct.group_query);
		strcpy(l_group_desc,h_report_details_struct.group_desc);
		strcpy(l_group_pos,h_report_details_struct.group_pos);
	
		//fprintf(fl_userlog,"strlen(l_group_query) :|%d|\n",strlen(l_group_query));	 Changes done for AIX Migration
		fprintf(fl_userlog,"strlen(l_group_query) :|%d|\n",(int)strlen(l_group_query));	
		if(strlen(l_group_query) > 0 )
		{
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM1',:l_param1) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM2',:l_param2) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM3',:l_param3) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM4',:l_param4) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM5',:l_param5) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM6',:l_param6) INTO :l_group_query FROM DUAL;
			
			fprintf(fl_userlog,"GROUP QUERY :|%s|\n",l_group_query);

			EXEC SQL PREPARE XLS2_GROUP FROM :l_group_query;
			EXEC SQL DECLARE xls2_group CURSOR FOR XLS2_GROUP;
			EXEC SQL OPEN xls2_group;

			if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
			{
				fprintf(fl_userlog,"Error : Cursor Open xls2_group ORA ERROR :|%d|\n",sqlca.sqlcode);
			}

			for(;;)
			{
				EXEC SQL FETCH xls2_group
						INTO :l_group_parameter;

				if((sqlca.sqlcode == 1403)||(l_group_break_flag == 1))
					break;

				if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Cursor Fetch xls2_group ORA ERROR :|%d|\n",sqlca.sqlcode);
				}

				/********* Split Group Parameter ***********************************/
			
				fprintf(fl_userlog,"l_group_pos:|%s|\n",l_group_pos);
				
				if(CO_SplitStr(l_group_pos,COMASEP,&l_group_pos_no,&l_group_pos_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 	fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_pos);
				 	APL_GOBACK_FAIL
				}
				
				fprintf(fl_userlog,"l_group_parameter:|%s|\n",l_group_parameter);
				
				if(CO_SplitStr(l_group_parameter,CAPSEP,&l_group_parameter_no,&l_group_parameter_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 	fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_parameter);
				 	APL_GOBACK_FAIL
				}

				fprintf(fl_userlog,"l_group_pos_no:|%d|l_group_parameter_no:|%d|\n",l_group_pos_no,l_group_parameter_no);
				
				if((l_group_pos_no > 0) && (l_group_parameter_no > 0)
					&& (l_group_pos_no == l_group_parameter_no))
				{	
					l_group_break_flag=0;
				
					for(i=0;i<l_group_pos_no;i++)
					{
						if(!strcmp(l_group_pos_value[i],"2"))
						{
							fprintf(fl_userlog,"l_param2:|%s|l_prev_param2:|%s|\n",l_param2,l_prev_param2);
							
							if(!strcmp(l_param2,l_prev_param2))
							{
								strcpy(l_param2,l_group_parameter_value[i]);
								strcpy(l_prev_param2,l_param2);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"3"))
						{
							fprintf(fl_userlog,"l_param3:|%s|l_prev_param3:|%s|\n",l_param3,l_prev_param3);
							
							if(!strcmp(l_param3,l_prev_param3))
							{
								strcpy(l_param3,l_group_parameter_value[i]);
								strcpy(l_prev_param3,l_param3);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"4"))
						{
							fprintf(fl_userlog,"l_param4:|%s|l_prev_param4:|%s|\n",l_param4,l_prev_param4);
							
							if(!strcmp(l_param4,l_prev_param4))
							{
								strcpy(l_param4,l_group_parameter_value[i]);
								strcpy(l_prev_param4,l_param4);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"5"))
						{
							fprintf(fl_userlog,"l_param5:|%s|l_prev_param5:|%s|\n",l_param5,l_prev_param5);
							
							if(!strcmp(l_param5,l_prev_param5))
							{
								strcpy(l_param5,l_group_parameter_value[i]);
								strcpy(l_prev_param5,l_param5);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"6"))
						{
							fprintf(fl_userlog,"l_param6:|%s|l_prev_param6:|%s|\n",l_param6,l_prev_param6);
							
							if(!strcmp(l_param6,l_prev_param6))
							{
								strcpy(l_param6,l_group_parameter_value[i]);
								strcpy(l_prev_param6,l_param6);
							}
							else
								l_group_break_flag=1;
						}
					}
				}
				else
				{
					fprintf(fl_userlog,"Error: Mismatch in Group Parameters :|%d||%d|",l_group_pos_no,l_group_parameter_no);
					break;
				}
				

			/****************************************************************************/
				
				fprintf(fl_userlog,"l_param1:|%s|\n",l_param1);
				fprintf(fl_userlog,"l_param2:|%s|\n",l_param2);
				fprintf(fl_userlog,"l_param3:|%s|\n",l_param3);
				fprintf(fl_userlog,"l_param4:|%s|\n",l_param4);
				fprintf(fl_userlog,"l_param5:|%s|\n",l_param5);
				fprintf(fl_userlog,"l_param6:|%s|\n",l_param6);


			/**** Stored procedure for REPORT DETAILS GROUPING ***************************/

			fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID 32:|%s|\n",l_rept_id);
			EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
					:l_param2,:l_param3,:l_param4,
					:l_param5,:l_param6,
					:l_table_query,:l_table_query1,:l_table_query2,
					:l_table_query3,:l_table_query4,:l_table_query5,
					:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
					:l_group_desc,:l_error_desc);

			strcpy(table_query,l_table_query);
			strcat(table_query," ");
			
			if(strlen(l_table_query1) > 0)
			{
				strcat(table_query,l_table_query1);
				strcat(table_query," ");
			}
			if(strlen(l_table_query2) > 0)
			{
				strcat(table_query,l_table_query2);
				strcat(table_query," ");
			}
			if(strlen(l_table_query3) > 0)
			{
				strcat(table_query,l_table_query3);
				strcat(table_query," ");
			}
			if(strlen(l_table_query4) > 0)
			{
				strcat(table_query,l_table_query4);
				strcat(table_query," ");
			}
			if(strlen(l_table_query5) > 0)
			{
				strcat(table_query,l_table_query5);
				strcat(table_query," ");
			}
			
			strcat(table_query,APL_NULL_STRING);

				
			fprintf(fl_userlog,"After Stored Procedure SP_REPORT_DETAIL ORA ERROR 11:|%d|\n",sqlca.sqlcode);
			
			if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
			{
				fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
			}
			
			//fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
			fprintf(fl_userlog,"l_criteria_query1:|%s|\n",l_criteria_query1);
			fprintf(fl_userlog,"l_criteria_query2:|%s|\n",l_criteria_query2);
			fprintf(fl_userlog,"l_criteria_query3:|%s|\n",l_criteria_query3);
			fprintf(fl_userlog,"l_group_desc:|%s|\n",l_group_desc);

			/********* Group Description *******************************************/
			
			if(strlen(l_group_desc) > 0)
			{
				fprintf(l_report_XLS2,"<TABLE><TR><TD></TD></TR></TABLE>\n");
				fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR><TD COLSPAN=\'%d\' WIDTH=\'100%%\' class=\'ez4\'>%s</TD></TR></TABLE>\n",l_colspan,l_group_desc);
				fprintf(l_report_XLS2,"<TABLE><TR><TD></TD></TR></TABLE>\n");

				g_line_count++;
			}


			/****** Before table ***********************************************************************/
			
			if(strlen(h_report_details_struct.before_table_align) > 0)
			{
				if(strlen(h_report_details_struct.before_table) > 0)
				{	
					fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.before_table_align,h_report_details_struct.before_table);

					g_line_count++;
				}
			}
			else
			{
				if(strlen(h_report_details_struct.before_table) > 0)
				{	
					fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.before_table);

					g_line_count++;
				}

			}	
			
			l_before_table = h_report_details_struct.before_table_brk;
			if(l_before_table > 0)
			{
				fprintf(l_report_XLS2,"<TABLE>\n");
				while(l_before_table > 0 )
				{
					fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
							
					l_before_table -- ;
					g_line_count++;
				}
				fprintf(l_report_XLS2,"</TABLE>\n");
			}

			/******* Column Heading ***********************************************/

			/****** Multiple Column Level **************************************/

			strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
			strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
			strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
			
			fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);

			if(strlen(l_multiple_col_flag) > 0)
			{
				fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
				fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);

				if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
						&l_multiple_col_header_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
					 APL_GOBACK_FAIL
				}

				if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
						&l_multiple_colspan_sep_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
					 APL_GOBACK_FAIL
				}


				fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
				fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);

				fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border=\'%s\' cellSpacing=\'0\' cellPadding=\'1\'>\n",g_table_border);

				if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
				{
					for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
					{
						for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
						{

						if(int_a == int_b )
						{
						
						strcpy(l_level_header,l_multiple_col_header_value[int_a]);
						strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

						fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
						fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);

						if (CO_SplitStr(l_level_header,
								SEMISEP,
								&l_level_header_no,
								&l_level_header_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
							 APL_GOBACK_FAIL
						}

						if (CO_SplitStr(l_level_colspan,
								SEMISEP,
								&l_level_colspan_no,
								&l_level_colspan_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
							 APL_GOBACK_FAIL
						}

						fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
						fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);

						if(l_level_header_no == l_level_colspan_no)
						{

						fprintf(l_report_XLS2,"<TR>\n");
						for(int_aa=0;int_aa<l_level_header_no;int_aa++)
						{
							for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
							{
								if(int_aa == int_bb)
								{	
								
								strcpy(l_level_column,l_level_header_value[int_aa]);
								strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

								fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
								fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
								
								if(strlen(l_level_column) > 0)
									fprintf(l_report_XLS2,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >%s</TD> \n", l_level_col_span,l_level_column);
								else
									fprintf(l_report_XLS2,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >&nbsp;</TD> \n", l_level_col_span);


								}
							}
						}
						fprintf(l_report_XLS2,"</TR>\n");

						}/*** End Of Inner Condition check *****/

						}
						
												
						}/*** End Of 2st Main For Loop *******/

					}/*** End Of 1st Main For Loop *******/

				}/*** End Of Multiple col condition check *****/

				l_column_no=h_report_details_struct.no_of_columns;
				l_no_of_columns = h_report_details_struct.no_of_columns;
			}
			else
			{
			
			fprintf(fl_userlog,"COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
			
			/**** Split the Column Header and print *****************/
			
			strcpy(l_column_header,h_report_details_struct.column_hdr);
			if (CO_SplitStr(l_column_header,COMASEP,&l_col_no,&l_col_value) == APL_FAILURE)
			{
				 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_header);
				 APL_GOBACK_FAIL
			}

			/***** Table Column Heading and its records  *********/
			
			/*********** Page Break Testing  :vinay ***********************/
			
			p_page_no = 1;
			rec_no = 1;

			if(!strcmp(l_paging_flag,"Y"))
			{
				if(p_page_no == 1)
				{
					fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");

					fprintf(l_report_XLS2,"<TR>\n");
					for(i=0;i<l_col_no;i++)
					{
						strcpy(l_column_value,l_col_value[i]);

						fprintf(l_report_XLS2,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
					}
					fprintf(l_report_XLS2,"</TR>\n");

					g_line_count++;
				}
			}
			else
			{
				fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");

				fprintf(l_report_XLS2,"<TR>\n");
				for(i=0;i<l_col_no;i++)
				{
					strcpy(l_column_value,l_col_value[i]);

					fprintf(l_report_XLS2,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
				}
				fprintf(l_report_XLS2,"</TR>\n");

				g_line_count ++;
			}

			g_line_count ++;

			/****************************************************************************/

			l_column_no=h_report_details_struct.no_of_columns;
			l_no_of_columns = h_report_details_struct.no_of_columns;
			
			l_col_hdr = h_report_details_struct.col_hdr_brk;

			}
			
			EXEC SQL PREPARE XLS2_SUB1 FROM :table_query;	
			EXEC SQL DECLARE xls2tablequery1 CURSOR FOR XLS2_SUB1;
			EXEC SQL OPEN xls2tablequery1;

			l_fetch_count=0;

			for(;;)
			{
				EXEC SQL FETCH xls2tablequery1
					INTO :l_table_parameter;

				if(sqlca.sqlcode == 1403)
				{
					fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
					if(l_fetch_count == 0)
					{
						fprintf(l_report_XLS2,"<TR>\n");
						fprintf(l_report_XLS2,"<TD WIDTH=\'100%%\' COLSPAN=\'%d\' class=\'ez4\'>NO RECORDS FOUND </TD>\n",l_column_no);
						fprintf(l_report_XLS2,"</TR>\n");
						
						l_remove_count ++;

						g_line_count++;
					}
					break;
				}

				if(sqlca.sqlcode < 0)
				{
				   fprintf(fl_userlog,"Error : Critical Error Occured in xls2tablequery1 --- ORA ERROR:|%d|\n",sqlca.sqlcode);
				   break;
				}

				/********* Page Break Test : vinay ******************************/

				 if(!strcmp(l_paging_flag,"Y"))
				 {
					if(!strcmp(l_print_flag,"L"))
					{
						 if(p_page_no == 1)
						 {
							 if(l_fetch_count > 0)
							 {
								 l_page_break_chk=(l_fetch_count%l_main_page_recs);
								
								 if(l_page_break_chk == 0)
								 {
									fprintf(l_report_XLS2,"</TABLE>\n");

									l_main_page_break = (((l_landscape  * p_total_page_no) - g_line_count)+l_tolarence);

									if(l_main_page_break > 0)
									{
										fprintf(l_report_XLS2,"<TABLE>\n");
										while(l_main_page_break > 0)
										{
											fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
											l_main_page_break --;

											g_line_count ++;
										}
										fprintf(l_report_XLS2,"</TABLE>\n");
									}

									fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");

									fprintf(l_report_XLS2,"<TR>\n");
									for(i=0;i<l_col_no;i++)
									{
										strcpy(l_column_value,l_col_value[i]);

										fprintf(l_report_XLS2,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
									}
									fprintf(l_report_XLS2,"</TR>\n");

									g_line_count++;

									p_page_no++;
									p_total_page_no++;

								 }
								 else
								 {
									p_final_break = 1;
								 }
							}
							else
							{
								p_final_break = 1;
							}
						}
						else if(p_page_no > 1)
						{
							 l_page_break_chk =(l_fetch_count%(l_main_page_recs+(l_next_page_recs * rec_no)));

												
							 if(l_page_break_chk == 0)
							 {
								fprintf(l_report_XLS2,"</TABLE>\n");

								l_next_page_break = (((l_landscape * p_total_page_no) - g_line_count)+l_tolarence);

								if(l_next_page_break > 0)
								{
									fprintf(l_report_XLS2,"<TABLE>\n");
									while(l_next_page_break > 0)
									{
										fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
										l_next_page_break --;

										g_line_count++;

									}
									fprintf(l_report_XLS2,"</TABLE>\n");
								}

								fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");

								fprintf(l_report_XLS2,"<TR>\n");
								for(i=0;i<l_col_no;i++)
								{
									strcpy(l_column_value,l_col_value[i]);

									fprintf(l_report_XLS2,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
								}
								fprintf(l_report_XLS2,"</TR>\n");

								g_line_count ++;
								p_page_no ++;
								p_total_page_no ++;
								rec_no++;
							 }
							 else
							 {
								p_final_break = 1;					
							 }
						}
					}
					else if(!strcmp(l_print_flag,"P"))
					{
						 if(p_page_no == 1)
						 {
							 if(l_fetch_count > 0)
							 {
								 l_page_break_chk=(l_fetch_count%l_main_page_recs);
								
								 if(l_page_break_chk == 0)
								 {
									fprintf(l_report_XLS2,"</TABLE>\n");

									l_main_page_break = (((l_portrait  * p_total_page_no) - g_line_count)+l_tolarence);

									if(l_main_page_break > 0)
									{
										fprintf(l_report_XLS2,"<TABLE>\n");
										while(l_main_page_break > 0)
										{
											fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
											l_main_page_break --;

											g_line_count ++;
										}
										fprintf(l_report_XLS2,"</TABLE>\n");
									}

									fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");

									fprintf(l_report_XLS2,"<TR>\n");
									for(i=0;i<l_col_no;i++)
									{
										strcpy(l_column_value,l_col_value[i]);

										fprintf(l_report_XLS2,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
									}
									fprintf(l_report_XLS2,"</TR>\n");

									g_line_count++;

									p_page_no++;
									p_total_page_no++;

								 }
								 else
								 {
									p_final_break = 1;
								 }
							}
							else
							{
								p_final_break = 1;
							}
						}
						else if(p_page_no > 1)
						{
							 l_page_break_chk =(l_fetch_count%(l_main_page_recs+(l_next_page_recs * rec_no)));

							 if(l_page_break_chk == 0)
							 {
								fprintf(l_report_XLS2,"</TABLE>\n");

								l_next_page_break = (((l_portrait * p_total_page_no) - g_line_count)+l_tolarence);

								if(l_next_page_break > 0)
								{
									fprintf(l_report_XLS2,"<TABLE>\n");
									while(l_next_page_break > 0)
									{
										fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
										l_next_page_break --;

										g_line_count++;

									}
									fprintf(l_report_XLS2,"</TABLE>\n");
								}

								fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");

								fprintf(l_report_XLS2,"<TR>\n");
								for(i=0;i<l_col_no;i++)
								{
									strcpy(l_column_value,l_col_value[i]);

									fprintf(l_report_XLS2,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
								}
								fprintf(l_report_XLS2,"</TR>\n");

								g_line_count ++;
								p_page_no ++;
								p_total_page_no ++;
								rec_no++;
							 }
							 else
							 {
								p_final_break = 1;					
							 }
						}
					}
				}

				/**********************************************************/

				strcpy(l_column_parameter,l_table_parameter);
				
				/******* Split the string and fetch the column data into seperate variables *********/
			
				if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
				{
					CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
					APL_GOBACK_FAIL
				}

				/***** For Number Formatting ***************************************************/

				strcpy(l_format_col_pos,h_report_details_struct.format_col_pos);
				if (CO_SplitStr(l_format_col_pos,COMASEP,&l_format_col_no,&l_format_col_val) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_format_col_pos);
					 APL_GOBACK_FAIL
				}

				fprintf(l_report_XLS2,"<TR>\n");

				for(j=0;j<l_column_num;j++)
				{
					strcpy(l_column,l_column_val[j]);
					
					l_format_col_flag = 0;
					if(l_format_col_no > 0)
					{
						for (k=0;k<l_format_col_no;k++)
						{
							strcpy(l_format_col_value,l_format_col_val[k]);

							if(j==(atoi(l_format_col_value)-1))
								l_format_col_flag = 1;
						}

						if((strlen(l_column) > 0) && (strcmp(l_column," ")))
						{
							if(l_format_col_flag == 1)
							{
								fprintf(l_report_XLS2,"<TD class=\'xlsnumber\' ALIGN=\"RIGHT\" 	x:num=\"%s\">%s</TD>\n",l_column,l_column);
							}
							else
							{
									fprintf(l_report_XLS2,"<TD class=\'record\' ALIGN=\"LEFT\" 			x:str=\"%s\">%s</TD>\n",l_column,l_column);
							}
						}
						else
							 fprintf(l_report_XLS2,"<TD class=\'record\'  >&nbsp</TD>\n");

					}
					else
					{
						if((strlen(l_column) > 0) && (strcmp(l_column," ")))
							fprintf(l_report_XLS2,"<TD class=\'record\' ALIGN=\"LEFT\" 					x:str=\"%s\">%s</TD>\n",l_column,l_column);
						else
							fprintf(l_report_XLS2,"<TD class=\'record\'  >&nbsp</TD>\n");
					}

				}
				fprintf(l_report_XLS2,"</TR>\n");

				/***********************************************************************************/

				l_fetch_count ++;

				g_line_count++;

			}
			EXEC SQL CLOSE xls2tablequery1;

		   /********* For Criteria column value display ********************************************/
			
			if(h_report_details_struct.tot_criteria_cols > 0)
			{
				if(strlen(h_report_details_struct.criteria_col1_query) > 0)
				{
					EXEC SQL PREPARE XLS2_CR1 FROM :l_criteria_query1;
					EXEC SQL DECLARE XLS2_criteria1 CURSOR FOR XLS2_CR1;
					EXEC SQL OPEN XLS2_criteria1;
					
					if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					{
						fprintf(fl_userlog,"Error : Failed to Open XLS2_criteria1 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
					}

					for(;;)
					{
					EXEC SQL FETCH XLS2_criteria1 INTO :l_criteria_value1;
					
					       if(sqlca.sqlcode == 1403)
					       break;

					       if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					       {
							fprintf(fl_userlog,"Critical Error Occured XLS2_criteria1 --- ORA ERROR:|%d|\n",sqlca.sqlcode);
							break;
					       }
					}
					EXEC SQL CLOSE XLS2_criteria1;

					/****** For Grand Total Of Criteria Value *********/
					

				  if(strcmp(l_criteria_value1,APL_NULL_STRING))
				  { 
					EXEC SQL SELECT (:l_criteria_value1) INTO :l_criteria1_total FROM DUAL;
					
					l_grand_total1=l_grand_total1+l_criteria1_total;
					
					fprintf(fl_userlog,"l_grand_total1 :|%lf|\n",l_grand_total1);
			        fprintf(fl_userlog,"l_criteria_value1:|%s|\n",l_criteria_value1);

					EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value1,:l_error_desc);

					fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
					
					fprintf(l_report_XLS2,"<TR>\n");
					fprintf(l_report_XLS2,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col1_name,l_criteria_value1);
					fprintf(l_report_XLS2,"</TR>\n");

					g_line_count++;
				  }
				}

				if(strlen(h_report_details_struct.criteria_col2_query) > 0)
				{
					EXEC SQL PREPARE XLS2_CR2 FROM :l_criteria_query2;
					EXEC SQL DECLARE XLS2_criteria2 CURSOR FOR XLS2_CR2;
					EXEC SQL OPEN XLS2_criteria2;
					
					if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					{
						fprintf(fl_userlog,"Error : Failed to Open XLS2_criteria2 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
					}

					for(;;)
					{
					EXEC SQL FETCH XLS2_criteria2 INTO :l_criteria_value2;
					
					       if(sqlca.sqlcode == 1403)
					       break;

					       if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					       {
							fprintf(fl_userlog,"Critical Error Occured XLS2_criteria2--- ORA ERROR:|%d|\n",sqlca.sqlcode);
							break;
					       }
					}
					EXEC SQL CLOSE XLS2_criteria2;
					


				  if(strcmp(l_criteria_value2,APL_NULL_STRING))
				  {
					EXEC SQL SELECT (:l_criteria_value2) INTO :l_criteria2_total FROM DUAL;
					
					l_grand_total2=l_grand_total2+l_criteria2_total;
					
					fprintf(fl_userlog,"l_grand_total2 :|%lf|\n",l_grand_total2);
			        fprintf(fl_userlog,"l_criteria_value2:|%s|\n",l_criteria_value2);


					EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value2,:l_error_desc);

					fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
					
					fprintf(l_report_XLS2,"<TR>\n");
					fprintf(l_report_XLS2,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col2_name,l_criteria_value2);

					fprintf(l_report_XLS2,"</TR>\n");

					g_line_count++;
				  }
				}

				if(strlen(h_report_details_struct.criteria_col3_query) > 0)
				{
					EXEC SQL PREPARE XLS2_CR3 FROM :l_criteria_query3;
					EXEC SQL DECLARE XLS2_criteria3 CURSOR FOR XLS2_CR3;
					EXEC SQL OPEN XLS2_criteria3;
					
					if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					{
						fprintf(fl_userlog,"Error : Failed to Open XLS2_criteria3 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
					}

					for(;;)
					{
					EXEC SQL FETCH XLS2_criteria3 INTO :l_criteria_value3;
					
					       if(sqlca.sqlcode == 1403)
					       break;

					       if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					       {
							fprintf(fl_userlog,"Critical Error Occured XLS2_criteria3 --- ORA ERROR:|%d|\n",sqlca.sqlcode);
							break;
					       }
					}
					EXEC SQL CLOSE XLS2_criteria3;
						

				 
				 if(strcmp(l_criteria_value3,APL_NULL_STRING))
				 {
					EXEC SQL SELECT (:l_criteria_value3) INTO :l_criteria3_total FROM DUAL;
					
					l_grand_total3=l_grand_total3+l_criteria3_total;
					
					fprintf(fl_userlog,"l_grand_total3 :|%lf|\n",l_grand_total3);
					fprintf(fl_userlog,"l_criteria_value3:|%s|\n",l_criteria_value3);


					EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value3,:l_error_desc);

					fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
				   
					fprintf(l_report_XLS2,"<TR>\n");
					fprintf(l_report_XLS2,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col3_name,l_criteria_value3);
					fprintf(l_report_XLS2,"</TR>\n");

					g_line_count++;
				 }
			  }
			}

			
			/******* Complex Criteria Part *********************************************/

			strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
			strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
			strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
			strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

			if(strlen(complex_criteria_query) > 0)
			{
			
			EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
					:complex_criteria_query,
					'@PARAM1',:l_param1),
					'@PARAM2',:l_param2),
					'@PARAM3',:l_param3),
					'@PARAM4',:l_param4),
					'@PARAM5',:l_param5),
					'@PARAM6',:l_param6),
					REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
					:complex_criteria_query1,
					'@PARAM1',:l_param1),
					'@PARAM2',:l_param2),
					'@PARAM3',:l_param3),
					'@PARAM4',:l_param4),
					'@PARAM5',:l_param5),
					'@PARAM6',:l_param6)
				INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;
	
			strcat(complex_criteria_query,complex_criteria_query1);
			
			fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);

			EXEC SQL PREPARE XLS21_CMPX_CURR FROM :complex_criteria_query;

			EXEC SQL DECLARE xls21_complex_curr CURSOR FOR XLS21_CMPX_CURR;

			fprintf(fl_userlog,"After DECLARE xls21_complex_curr :|%d|\n",sqlca.sqlcode);

			EXEC SQL OPEN xls21_complex_curr;

			EXEC SQL FETCH xls21_complex_curr INTO :l_complex_parameter;

			fprintf(fl_userlog,"After FETCH xls21_complex_curr :|%d|\n",sqlca.sqlcode);

			EXEC SQL CLOSE xls21_complex_curr;

			fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);

			if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
				APL_GOBACK_FAIL
			}
			
			fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);

			if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
				APL_GOBACK_FAIL
			}


			fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
			fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);

			l_complex_break_flag = 0;
			
			if(l_complex_num == l_complex_pos_num)
			{

			fprintf(l_report_XLS2,"<TR>\n");

			for(i=0;i<l_column_num;i++)
			{
				for(j=0;j<l_complex_pos_num;j++)
				{

				strcpy(l_complex_pos_column,l_complex_pos_val[j]);

				if((i==0)&&(j==0))
				{
					if(strlen(complex_criteria_label) > 0)
					{
						fprintf(l_report_XLS2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" >%s</TD>\n",complex_criteria_label);
						l_complex_break_flag=1;
					}
					else
					fprintf(l_report_XLS2,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
				}

				if(i== (atoi(l_complex_pos_column)-1))
				{				  
				  strcpy(l_complex_column,l_complex_val[j]);

				  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);

				  l_complex_break_flag=1;
				  			
				  if(strlen(l_complex_column) > 0)
				  {
					  EXEC SQL CALL SP_NUMBER_FORMATTING(:l_complex_column,:l_error_desc);

					  if(strlen(l_error_desc) > 0)
						fprintf(l_report_XLS2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" 								x:str=\"%s\">%s</TD>\n",l_complex_column,l_complex_column);
					  else
						fprintf(l_report_XLS2,"<TD class=\'lableredbg\' ALIGN=\"RIGHT\" 								x:str=\"%s\">%s</TD>\n",l_complex_column,l_complex_column);
				  }
				  else
				  {
						fprintf(l_report_XLS2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">&nbsp;</TD>\n");
				  }			  
				
				  break;
				}
				else
				{
				     l_complex_break_flag = 0;
				     continue;
				} 

				}
				     
				if(i != 0)
				{
				  if(l_complex_break_flag != 1)
				     fprintf(l_report_XLS2,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
				}
			}

			}
			else
			{
				fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
			}

			fprintf(l_report_XLS2,"</TR>\n");

			}
			
			/*****************	End Of Complex Part     *********************/

			fprintf(l_report_XLS2,"</TABLE>\n");

			/****** After table ***********************************************************************/
	
			l_after_table = h_report_details_struct.after_table_brk;
			if(l_after_table > 0)
			{
				fprintf(l_report_XLS2,"<TABLE>\n");
				while(l_after_table > 0 )
				{
					fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
							
					l_after_table -- ;
					g_line_count++;
				}
				fprintf(l_report_XLS2,"</TABLE>\n");
			}

			if(strlen(h_report_details_struct.after_table_align) > 0)
			{
				if(strlen(h_report_details_struct.after_table) > 0)
				{		
					fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.after_table_align,h_report_details_struct.after_table);

					g_line_count++;
				}
			}
			else
			{
				if(strlen(h_report_details_struct.after_table) > 0)
				{	
					fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\'  ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.after_table);

					g_line_count++;
				}

			}	
  
			/******* Table Footer note ***************************************************************/
	
			l_table_footer = h_report_details_struct.table_footer_brk;
			if(l_table_footer > 0)
			{
				fprintf(l_report_XLS2,"<TABLE>\n");
				while(l_table_footer > 0 )
				{
					fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
							
					l_table_footer -- ;
					g_line_count++;
				}
				fprintf(l_report_XLS2,"</TABLE>\n");
			}
				
			if(strlen(h_report_details_struct.table_footer_align) > 0)
			{
				if(strlen(h_report_details_struct.table_footer) > 0)
				{
					fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.table_footer_align,h_report_details_struct.table_footer);

					g_line_count++;
				}
			}
			else
			{
				if(strlen(h_report_details_struct.table_footer) > 0)
				{
					fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.table_footer);

					g_line_count++;
				}

			}

			l_table = h_report_main_struct.table_brk;
			if(l_table > 0)
			{
				fprintf(l_report_XLS2,"<TABLE>\n");
				while(l_table > 0 )
				{
					fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
							
					l_table -- ;
					g_line_count++;
				}
				fprintf(l_report_XLS2,"</TABLE>\n");
			}

			if(l_fetch_count > 0 )
			{
			
			for(m=0;m<l_complex_num;m++)
			{
				if(m == 0)
				{
					strcpy(l_complex_parameter1,l_complex_val[m]);
					g_complex_parameter1=g_complex_parameter1+atof(l_complex_parameter1);
				}
				else if(m == 1)
				{
					strcpy(l_complex_parameter2,l_complex_val[m]);
					g_complex_parameter2=g_complex_parameter2+atof(l_complex_parameter2);
				}
				else if(m == 2)
				{
					strcpy(l_complex_parameter3,l_complex_val[m]);
					g_complex_parameter3=g_complex_parameter3+atof(l_complex_parameter3);
				}
				else if(m == 3)
				{
					strcpy(l_complex_parameter4,l_complex_val[m]);
					g_complex_parameter4=g_complex_parameter4+atof(l_complex_parameter4);
				}
				else if(m == 4)
				{
					strcpy(l_complex_parameter5,l_complex_val[m]);
					g_complex_parameter5=g_complex_parameter5+atof(l_complex_parameter5);
				}
				else if(m == 5)
				{
					strcpy(l_complex_parameter6,l_complex_val[m]);
					g_complex_parameter6=g_complex_parameter6+atof(l_complex_parameter6);
				}
				else if(m == 6)
				{
					strcpy(l_complex_parameter7,l_complex_val[m]);
					g_complex_parameter7=g_complex_parameter7+atof(l_complex_parameter7);
				}
				else if(m == 7)
				{
					strcpy(l_complex_parameter8,l_complex_val[m]);
					g_complex_parameter8=g_complex_parameter8+atof(l_complex_parameter8);
				}
				else if(m == 8)
				{
					strcpy(l_complex_parameter9,l_complex_val[m]);
					g_complex_parameter9=g_complex_parameter9+atof(l_complex_parameter9);
				}
				else if(m == 9)
				{
				        strcpy(l_complex_parameter10,l_complex_val[m]);
				        g_complex_parameter10=g_complex_parameter10+atof(l_complex_parameter10);
				}
				else if(m == 10)
				{
					strcpy(l_complex_parameter11,l_complex_val[m]);
					g_complex_parameter11=g_complex_parameter11+atof(l_complex_parameter11);
				}
				else if(m == 11)
				{
					strcpy(l_complex_parameter12,l_complex_val[m]);			
					g_complex_parameter12=g_complex_parameter12+atof(l_complex_parameter12);
				}
				else if(m == 12)
				{
					strcpy(l_complex_parameter13,l_complex_val[m]);
					g_complex_parameter13=g_complex_parameter13+atof(l_complex_parameter13);
				}
				else if(m == 13)
				{
					strcpy(l_complex_parameter14,l_complex_val[m]);
					g_complex_parameter14=g_complex_parameter14+atof(l_complex_parameter14);
				}
				else if(m == 14)
				{
					strcpy(l_complex_parameter15,l_complex_val[m]);
					g_complex_parameter15=g_complex_parameter15+atof(l_complex_parameter15);
				}
				else if(m == 15)
				{
					strcpy(l_complex_parameter16,l_complex_val[m]);
					g_complex_parameter16=g_complex_parameter16+atof(l_complex_parameter16);
				}
				else if(m == 16)
				{
					strcpy(l_complex_parameter17,l_complex_val[m]);
					g_complex_parameter17=g_complex_parameter17+atof(l_complex_parameter17);
				}
				else if(m == 17)
				{
					strcpy(l_complex_parameter18,l_complex_val[m]);
					g_complex_parameter18=g_complex_parameter18+atof(l_complex_parameter18);
				}
				else if(m == 18)
				{
					strcpy(l_complex_parameter19,l_complex_val[m]);
					g_complex_parameter19=g_complex_parameter19+atof(l_complex_parameter19);
				}
				else if(m == 19)
				{
					strcpy(l_complex_parameter20,l_complex_val[m]);
					g_complex_parameter20=g_complex_parameter20+atof(l_complex_parameter20);
				}
			}

			}/*** End Of Fetch Count check ******/

			}/*** End Of Grouping For Loop ******/
			EXEC SQL CLOSE xls2_group;
		}
		else
		{
			fprintf(fl_userlog,"l_param1:|%s|\n",l_param1);
			fprintf(fl_userlog,"l_param2:|%s|\n",l_param2);
			fprintf(fl_userlog,"l_param3:|%s|\n",l_param3);
			fprintf(fl_userlog,"l_param4:|%s|\n",l_param4);
			fprintf(fl_userlog,"l_param5:|%s|\n",l_param5);
			fprintf(fl_userlog,"l_param6:|%s|\n",l_param6);

			/**** Stored procedure for REPORT DETAILS GROUPING ************************/

			fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID 33:|%s|\n",l_rept_id);/*ok*/
			//fflush(fl_userlog);
			EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
					:l_param2,:l_param3,:l_param4,
					:l_param5,:l_param6,
					:l_table_query,:l_table_query1,:l_table_query2,
					:l_table_query3,:l_table_query4,:l_table_query5,
					:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
					:l_group_desc,:l_error_desc);

			strcpy(table_query,l_table_query);
			strcat(table_query," ");
			//fflush(fl_userlog);
			if(strlen(l_table_query1) > 0)
			{
				strcat(table_query,l_table_query1);
				strcat(table_query," ");
			}
			if(strlen(l_table_query2) > 0)
			{
				strcat(table_query,l_table_query2);
				strcat(table_query," ");
			}
			if(strlen(l_table_query3) > 0)
			{
				strcat(table_query,l_table_query3);
				strcat(table_query," ");
			}
			if(strlen(l_table_query4) > 0)
			{
				strcat(table_query,l_table_query4);
				strcat(table_query," ");
			}
			if(strlen(l_table_query5) > 0)
			{
				strcat(table_query,l_table_query5);
				strcat(table_query," ");
			}
			
			strcat(table_query,APL_NULL_STRING);

				
			fprintf(fl_userlog,"After Stored Procedure SP_REPORT_DETAIL ORA ERROR 12:|%d|\n",sqlca.sqlcode);/*ok*/
			//fflush(fl_userlog);
			if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
			{
				fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
			}
			
			//fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
			fprintf(fl_userlog,"l_criteria_query111:|%s|\n",l_criteria_query1);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"l_criteria_query222:|%s|\n",l_criteria_query2);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"l_criteria_query333:|%s|\n",l_criteria_query3);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"l_group_desc4444:|%s|\n",l_group_desc);
          //fflush(fl_userlog);
			/****** Before table ***********************************************************************/
		
			if(strlen(h_report_details_struct.before_table_align) > 0)
			{
				if(strlen(h_report_details_struct.before_table) > 0)
				{	
					fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.before_table_align,h_report_details_struct.before_table);
                     //fflush(fl_userlog);
					g_line_count++;
				}
			}
			else
			{
				if(strlen(h_report_details_struct.before_table) > 0)
				{	
					fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.before_table);
                    //fflush(fl_userlog);
					g_line_count++;
				}

			}		
		
			l_before_table = h_report_details_struct.before_table_brk;

			if(l_before_table > 0)
			{
				fprintf(l_report_XLS2,"<TABLE>\n");
				//fflush(fl_userlog);
				while(l_before_table > 0)
				{
					fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
					//fflush(fl_userlog);
					l_before_table --;
					g_line_count++;
				}
				fprintf(l_report_XLS2,"</TABLE>\n");
				//fflush(fl_userlog);
			}

			/******* Column Heading ******************************************************************/

			/****** Multiple Column Level **************************************/

			strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
			strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
			strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
			
			fprintf(fl_userlog,"l_multiple_col_flag222 :|%s|\n",l_multiple_col_flag);
            //fflush(fl_userlog);
			if(strlen(l_multiple_col_flag) > 0)
			{
				fprintf(fl_userlog,"l_multiple_col_header111 :|%s|\n",l_multiple_col_header);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_multiple_colspan_sep111 :|%s|\n",l_multiple_colspan_sep);
                 //fflush(fl_userlog);
				if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
						&l_multiple_col_header_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
					 //fflush(fl_userlog);
					 APL_GOBACK_FAIL
				}

				if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
						&l_multiple_colspan_sep_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
					 //fflush(fl_userlog);
					 APL_GOBACK_FAIL
				}


				fprintf(fl_userlog,"l_multiple_col_header_no9999 :|%d|\n",l_multiple_col_header_no);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_multiple_colspan_sep_no9999 :|%d|\n",l_multiple_colspan_sep_no);
                //fflush(fl_userlog);
				fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border=\'%s\' cellSpacing=\'0\' cellPadding=\'1\' >\n",g_table_border);
                //fflush(fl_userlog);

				if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
				{
					for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
					{
						for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
						{
												
						if(int_a == int_b )
						{
						
						strcpy(l_level_header,l_multiple_col_header_value[int_a]);
						strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

						fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
						//fflush(fl_userlog);
						fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);
                        //fflush(fl_userlog);
						if (CO_SplitStr(l_level_header,
								SEMISEP,
								&l_level_header_no,
								&l_level_header_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
							 APL_GOBACK_FAIL
						}

						if (CO_SplitStr(l_level_colspan,
								SEMISEP,
								&l_level_colspan_no,
								&l_level_colspan_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
							 APL_GOBACK_FAIL
						}

						fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
						//fflush(fl_userlog);
						fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);
                          //fflush(fl_userlog);
						if(l_level_header_no == l_level_colspan_no)
						{

						fprintf(l_report_XLS2,"<TR>\n");
						//fflush(fl_userlog);
						for(int_aa=0;int_aa<l_level_header_no;int_aa++)
						{
							for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
							{
								if(int_aa == int_bb)
								{	
								
								strcpy(l_level_column,l_level_header_value[int_aa]);
								strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

								fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
								//fflush(fl_userlog);
								fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
								//fflush(fl_userlog);
								if(strlen(l_level_column) > 0)
									fprintf(l_report_XLS2,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >%s</TD> \n", l_level_col_span,l_level_column);
								else
									fprintf(l_report_XLS2,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >&nbsp;</TD> \n", l_level_col_span);


								}
							}
						}
						fprintf(l_report_XLS2,"</TR>\n");

						}/*** End Of Inner Condition check *****/

						}						
												
						}/*** End Of 2st Main For Loop *******/

					}/*** End Of 1st Main For Loop *******/

				}/*** End Of Multiple col condition check *****/

				l_column_no=h_report_details_struct.no_of_columns;
				l_no_of_columns = h_report_details_struct.no_of_columns;

		}
		else
		{
		
		/**** Split the Column Header and print *****************/
		
		strcpy(l_column_header,h_report_details_struct.column_hdr);
		if (CO_SplitStr(l_column_header,COMASEP,&l_col_no,&l_col_value) == APL_FAILURE)
		{
			 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
			 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_header);
			 APL_GOBACK_FAIL
		}

		/***** Table Column Heading and its records  *********/
		fprintf(fl_userlog,"HM 1 \n"); //fflush(fl_userlog);
								
		/*********** Page Break Testing  :vinay ***********************/
		
		p_page_no = 1;
		rec_no = 1;

		fprintf(fl_userlog,"HM 2 \n"); //fflush(fl_userlog);
		
		if(!strcmp(l_paging_flag,"Y"))
		{
			if(p_page_no == 1)
			{
				fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");

				fprintf(l_report_XLS2,"<TR>\n");
				for(i=0;i<l_col_no;i++)
				{
					strcpy(l_column_value,l_col_value[i]);

					fprintf(l_report_XLS2,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
				}
				fprintf(l_report_XLS2,"</TR>\n");

				g_line_count++;
			}
			fprintf(fl_userlog,"HM 3 \n"); //fflush(fl_userlog);
		}
		else
		{
			fprintf(fl_userlog,"HM 4 \n"); //fflush(fl_userlog);
			fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
                  //fflush(fl_userlog);
			fprintf(l_report_XLS2,"<TR>\n");
			for(i=0;i<l_col_no;i++)
			{
				strcpy(l_column_value,l_col_value[i]);

				fprintf(l_report_XLS2,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
			}
			fprintf(l_report_XLS2,"</TR>\n");

			g_line_count ++;
		}

		g_line_count ++;

		/****************************************************************************/
		
		fprintf(fl_userlog,"HM 5 \n"); //fflush(fl_userlog);

		l_column_no=h_report_details_struct.no_of_columns;
		l_no_of_columns = h_report_details_struct.no_of_columns;
		
		l_col_hdr = h_report_details_struct.col_hdr_brk;

		}
		
		EXEC SQL PREPARE XLS_SUB FROM :table_query;	
		EXEC SQL DECLARE xlstablequery CURSOR FOR XLS_SUB;
		EXEC SQL OPEN xlstablequery;
		
		fprintf(fl_userlog,"HM 6 \n"); //fflush(fl_userlog);

		l_fetch_count=0;

		for(;;)
		{
			EXEC SQL FETCH xlstablequery
				INTO :l_table_parameter;

			fprintf(fl_userlog,"HM 7 \n"); //fflush(fl_userlog);	
				
			 if(sqlca.sqlcode == 1403)
			 {
			    fprintf(fl_userlog,"l_fetch_count1111111:|%d|\n",l_fetch_count);
				//fflush(fl_userlog);

			    if(l_fetch_count == 0)
			    {
			       fprintf(l_report_XLS2,"<TR>\n");
				   //fflush(fl_userlog);
			       fprintf(l_report_XLS2,"<TD WIDTH=\'100%%\' COLSPAN=\'%d\' class=\'ez4\'>NO RECORDS FOUND </TD>\n",l_column_no);
				   //fflush(fl_userlog);
			       fprintf(l_report_XLS2,"</TR>\n");
					
			       l_remove_count ++;
			       g_line_count++;
			    }
			    break;
			 }

			 fprintf(fl_userlog,"HM 8 \n"); //fflush(fl_userlog);
			 
			 if(sqlca.sqlcode < 0)
			 {
			    fprintf(fl_userlog,"Error : Critical Error Occured in xlstablequery --- ORA ERROR:|%d|\n",sqlca.sqlcode);
				//fflush(fl_userlog);
			    break;
			 }


			/********* Page Break Test : vinay ******************************/

			 if(!strcmp(l_paging_flag,"Y"))
			 {
				if(!strcmp(l_print_flag,"L"))
				{
					 if(p_page_no == 1)
					 {
						 if(l_fetch_count > 0)
						 {
							 l_page_break_chk=(l_fetch_count%l_main_page_recs);
							
							 if(l_page_break_chk == 0)
							 {
								fprintf(l_report_XLS2,"</TABLE>\n");
								//fflush(fl_userlog);

								l_main_page_break = (((l_landscape  * p_total_page_no) - g_line_count)+l_tolarence);

								if(l_main_page_break > 0)
								{
									fprintf(l_report_XLS2,"<TABLE>\n");
									//fflush(fl_userlog);
									while(l_main_page_break > 0)
									{
										fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
										//fflush(fl_userlog);
										l_main_page_break --;

										g_line_count ++;
									}
									fprintf(l_report_XLS2,"</TABLE>\n");
									//fflush(fl_userlog);
								}

								fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
								//fflush(fl_userlog);

								fprintf(l_report_XLS2,"<TR>\n");
								//fflush(fl_userlog);
								for(i=0;i<l_col_no;i++)
								{
									strcpy(l_column_value,l_col_value[i]);

									fprintf(l_report_XLS2,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
									//fflush(fl_userlog);
								}
								fprintf(l_report_XLS2,"</TR>\n");
								//fflush(fl_userlog);

								g_line_count++;

								p_page_no++;
								p_total_page_no++;

							 }
							 else
							 {
								p_final_break = 1;
							 }
						}
						else
						{
							p_final_break = 1;
						}
					}
					else if(p_page_no > 1)
					{
						 l_page_break_chk =(l_fetch_count%(l_main_page_recs+(l_next_page_recs * rec_no)));

						 if(l_page_break_chk == 0)
						 {
							fprintf(l_report_XLS2,"</TABLE>\n");
							//fflush(fl_userlog);

							l_next_page_break = (((l_landscape * p_total_page_no) - g_line_count)+l_tolarence);

							if(l_next_page_break > 0)
							{
								fprintf(l_report_XLS2,"<TABLE>\n");
								//fflush(fl_userlog);
								while(l_next_page_break > 0)
								{
									fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
									//fflush(fl_userlog);
									l_next_page_break --;

									g_line_count++;

								}
								fprintf(l_report_XLS2,"</TABLE>\n");
							}

							fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");

							fprintf(l_report_XLS2,"<TR>\n");
							for(i=0;i<l_col_no;i++)
							{
								strcpy(l_column_value,l_col_value[i]);

								fprintf(l_report_XLS2,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
								//fflush(fl_userlog);
							}
							fprintf(l_report_XLS2,"</TR>\n");
							//fflush(fl_userlog);

							g_line_count ++;
							p_page_no ++;
							p_total_page_no ++;
							rec_no++;
						 }
						 else
						 {
							p_final_break = 1;					
						 }
					}
				}
				else if(!strcmp(l_print_flag,"P"))
				{
					 if(p_page_no == 1)
					 {
						 if(l_fetch_count > 0)
						 {
							 l_page_break_chk=(l_fetch_count%l_main_page_recs);
							
							 if(l_page_break_chk == 0)
							 {
								fprintf(l_report_XLS2,"</TABLE>\n");

								l_main_page_break = (((l_portrait  * p_total_page_no) - g_line_count)+l_tolarence);

								if(l_main_page_break > 0)
								{
									fprintf(l_report_XLS2,"<TABLE>\n");
									while(l_main_page_break > 0)
									{
										fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
										l_main_page_break --;

										g_line_count ++;
									}
									fprintf(l_report_XLS2,"</TABLE>\n");
								}

								fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");

								fprintf(l_report_XLS2,"<TR>\n");
								for(i=0;i<l_col_no;i++)
								{
									strcpy(l_column_value,l_col_value[i]);

									fprintf(l_report_XLS2,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
								}
								fprintf(l_report_XLS2,"</TR>\n");

								g_line_count++;

								p_page_no++;
								p_total_page_no++;

							 }
							 else
							 {
								p_final_break = 1;
							 }
						}
						else
						{
							p_final_break = 1;
						}
					}
					else if(p_page_no > 1)
					{
						 l_page_break_chk =(l_fetch_count%(l_main_page_recs+(l_next_page_recs * rec_no)));

						 if(l_page_break_chk == 0)
						 {
							fprintf(l_report_XLS2,"</TABLE>\n");

							l_next_page_break = (((l_portrait * p_total_page_no) - g_line_count)+l_tolarence);

							if(l_next_page_break > 0)
							{
								fprintf(l_report_XLS2,"<TABLE>\n");
								//fflush(fl_userlog);
								while(l_next_page_break > 0)
								{
									fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
									l_next_page_break --;

									g_line_count++;

								}
								fprintf(l_report_XLS2,"</TABLE>\n");
							}

							fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");

							fprintf(l_report_XLS2,"<TR>\n");
							for(i=0;i<l_col_no;i++)
							{
								strcpy(l_column_value,l_col_value[i]);

								fprintf(l_report_XLS2,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
							}
							fprintf(l_report_XLS2,"</TR>\n");
//fflush(fl_userlog);
							g_line_count ++;
							p_page_no ++;
							p_total_page_no ++;
							rec_no++;
						 }
						 else
						 {
							p_final_break = 1;					
						 }
					}
				}
			}

			/**********************************************************/
		
			strcpy(l_column_parameter,l_table_parameter);
			
			/******* Split the string and fetch the column date into seperate variables **/
			
			if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
			 	fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
			 	APL_GOBACK_FAIL
			}

			/***** For Number Formatting ***************************************************/

			strcpy(l_format_col_pos,h_report_details_struct.format_col_pos);
			if (CO_SplitStr(l_format_col_pos,COMASEP,&l_format_col_no,&l_format_col_val) == APL_FAILURE)
			{
				 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_format_col_pos);
				 APL_GOBACK_FAIL
			}

			fprintf(l_report_XLS2,"<TR>\n");

			for(j=0;j<l_column_num;j++)
			{
				strcpy(l_column,l_column_val[j]);
				
				l_format_col_flag = 0;
				if(l_format_col_no > 0)
				{
					for (k=0;k<l_format_col_no;k++)
					{
						strcpy(l_format_col_value,l_format_col_val[k]);

						if(j==(atoi(l_format_col_value)-1))
							l_format_col_flag = 1;
					}

					if((strlen(l_column) > 0) && (strcmp(l_column," ")))
					{
						if(l_format_col_flag == 1)
						{
							fprintf(l_report_XLS2,"<TD class=\'xlsnumber\' ALIGN=\"RIGHT\" 	x:num=\"%s\">%s</TD>\n",l_column,l_column);
						}
						else
						{
							fprintf(l_report_XLS2,"<TD class=\'record\' ALIGN=\"LEFT\" 			x:str=\"%s\">%s</TD>\n",l_column,l_column);
						}
					}
					else
						 fprintf(l_report_XLS2,"<TD class=\'record\'  >&nbsp</TD>\n");

				}
				else
				{
					if((strlen(l_column) > 0) && (strcmp(l_column," ")))
						fprintf(l_report_XLS2,"<TD class=\'record\' ALIGN=\"LEFT\" 					x:str=\"%s\">%s</TD>\n",l_column,l_column);
					else
						fprintf(l_report_XLS2,"<TD class=\'record\'  >&nbsp</TD>\n");
				}

			}
			fprintf(l_report_XLS2,"</TR>\n");
//fflush(fl_userlog);
			/***********************************************************************************/


			l_fetch_count ++;
			g_line_count++;
		}
		EXEC SQL CLOSE xlstablequery;

		/********* For Criteria column value display **********************/
		
		if(h_report_details_struct.tot_criteria_cols > 0)
		{
			if(strlen(h_report_details_struct.criteria_col1_query) > 0)
			{
				EXEC SQL PREPARE XLS_CR1 FROM :l_criteria_query1;
				EXEC SQL DECLARE xlscriteria1 CURSOR FOR XLS_CR1;
				EXEC SQL OPEN xlscriteria1;
				
				if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Failed to Open xlscriteria1 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
				}

				for(;;)
				{
				EXEC SQL FETCH xlscriteria1 INTO :l_criteria_value1;
				
				       if(sqlca.sqlcode == 1403)
				       break;

				       if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				       {
					  		fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
					  		break;
				       }
				}
				EXEC SQL CLOSE xlscriteria1;

				/****** For Grand Total Of Criteria Value *********/
					
				if(strcmp(l_criteria_value1,APL_NULL_STRING))
				{
					EXEC SQL SELECT (:l_criteria_value1) INTO :l_criteria1_total FROM DUAL;
					
					l_grand_total1=l_grand_total1+l_criteria1_total;
					
					fprintf(fl_userlog,"l_grand_total1 :|%lf|\n",l_grand_total1);
			        fprintf(fl_userlog,"l_criteria_value1:|%s|\n",l_criteria_value1);

					EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value1,:l_error_desc);

					fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
//fflush(fl_userlog);
					fprintf(l_report_XLS2,"<TR>\n");
					fprintf(l_report_XLS2,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col1_name,l_criteria_value1);
					fprintf(l_report_XLS2,"</TR>\n");

					g_line_count++;
				 }

			}

			if(strlen(h_report_details_struct.criteria_col2_query) > 0)
			{
				EXEC SQL PREPARE XLS_CR2 FROM :l_criteria_query2;
				EXEC SQL DECLARE xlscriteria2 CURSOR FOR XLS_CR2;
				EXEC SQL OPEN xlscriteria2;
				
				if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Failed to Open xlscriteria2 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
				}

				for(;;)
				{
				EXEC SQL FETCH xlscriteria2 INTO :l_criteria_value2;
				
				       if(sqlca.sqlcode == 1403)
				       break;

				       if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				       {
					  		fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
					  		break;
				       }
				}
				EXEC SQL CLOSE xlscriteria2;
				

				if(strcmp(l_criteria_value2,APL_NULL_STRING))
				{
					EXEC SQL SELECT (:l_criteria_value2) INTO :l_criteria2_total FROM DUAL;
					
					l_grand_total2=l_grand_total2+l_criteria2_total;
					
					fprintf(fl_userlog,"l_grand_total2 :|%lf|\n",l_grand_total2);
			        fprintf(fl_userlog,"l_criteria_value2:|%s|\n",l_criteria_value2);

					EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value2,:l_error_desc);

					fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);

					fprintf(l_report_XLS2,"<TR>\n");
					fprintf(l_report_XLS2,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col2_name,l_criteria_value2);

					fprintf(l_report_XLS2,"</TR>\n");

					g_line_count++;
				 }
			}

			if(strlen(h_report_details_struct.criteria_col3_query) > 0)
			{
				EXEC SQL PREPARE XLS_CR3 FROM :l_criteria_query3;
				EXEC SQL DECLARE xlscriteria3 CURSOR FOR XLS_CR3;
				EXEC SQL OPEN xlscriteria3;
				
				if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Failed to Open xlscriteria3 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
				}

				for(;;)
				{
				EXEC SQL FETCH xlscriteria3 INTO :l_criteria_value3;
				
				       if(sqlca.sqlcode == 1403)
				       break;

				       if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				       {
					  		fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
					  		break;
				       }
				}
				EXEC SQL CLOSE xlscriteria3;
					
				if(strcmp(l_criteria_value3,APL_NULL_STRING))
				{
					EXEC SQL SELECT (:l_criteria_value3) INTO :l_criteria3_total FROM DUAL;
					
					l_grand_total3=l_grand_total3+l_criteria3_total;
					
					fprintf(fl_userlog,"l_grand_total3 :|%lf|\n",l_grand_total3);
			        fprintf(fl_userlog,"l_criteria_value3:|%s|\n",l_criteria_value3);

					EXEC SQL CALL SP_NUMBER_FORMATTING(:l_criteria_value3,:l_error_desc);

					fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);


					fprintf(l_report_XLS2,"<TR>\n");
					fprintf(l_report_XLS2,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col3_name,l_criteria_value3);
					fprintf(l_report_XLS2,"</TR>\n");

					g_line_count++;
				 }
			}
		}

		
		/******* Complex Criteria Part *********************************************/

		strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
		strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
		strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
		strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

		fprintf(fl_userlog,"Before Complex Part -- l_fetch_count 8:|%d|\n",l_fetch_count);

		if(l_fetch_count > 0)
		{

		if(strlen(complex_criteria_query) > 0)
		{
		
		EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
				:complex_criteria_query,
				'@PARAM1',:l_param1),
				'@PARAM2',:l_param2),
				'@PARAM3',:l_param3),
				'@PARAM4',:l_param4),
				'@PARAM5',:l_param5),
				'@PARAM6',:l_param6),
				REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
				:complex_criteria_query1,
				'@PARAM1',:l_param1),
				'@PARAM2',:l_param2),
				'@PARAM3',:l_param3),
				'@PARAM4',:l_param4),
				'@PARAM5',:l_param5),
				'@PARAM6',:l_param6)
			INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;

		strcat(complex_criteria_query,complex_criteria_query1);
		
		fprintf(fl_userlog,"complex_criteria_query 100:|%s|\n",complex_criteria_query);
		//fflush(fl_userlog);

		EXEC SQL PREPARE XLS22_CMPX_CURR FROM :complex_criteria_query;

		EXEC SQL DECLARE xls22_complex_curr CURSOR FOR XLS22_CMPX_CURR;

		fprintf(fl_userlog,"After DECLARE xls22_complex_curr123 :|%d|\n",sqlca.sqlcode);
		//fflush(fl_userlog);

		EXEC SQL OPEN xls22_complex_curr;

		EXEC SQL FETCH xls22_complex_curr INTO :l_complex_parameter;

		fprintf(fl_userlog,"After FETCH xls22_complex_curr321 :|%d|\n",sqlca.sqlcode);
		//fflush(fl_userlog);

		EXEC SQL CLOSE xls22_complex_curr;

		fprintf(fl_userlog,"l_complex_parameter 111:|%s|\n",l_complex_parameter);
		//fflush(fl_userlog);

		if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
		{
			CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		 	fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
			//fflush(fl_userlog);
		 	APL_GOBACK_FAIL
		}
		
		fprintf(fl_userlog,"complex_criteria_pos 66:|%s|\n",complex_criteria_pos);
		//fflush(fl_userlog);

		if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
		{
			CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		 	fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
			//fflush(fl_userlog);
		 	APL_GOBACK_FAIL
		}


		fprintf(fl_userlog,"l_complex_num 678:|%d|\n",l_complex_num);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_complex_pos_num 987:|%d|\n",l_complex_pos_num);
		//fflush(fl_userlog);

		l_complex_break_flag = 0;

		
		if(l_complex_num == l_complex_pos_num)
		{

		fprintf(l_report_XLS2,"<TR>\n");

		for(i=0;i<l_column_num;i++)
		{
			for(j=0;j<l_complex_pos_num;j++)
			{

			strcpy(l_complex_pos_column,l_complex_pos_val[j]);

			if((i==0)&&(j==0))
			{
				if(strlen(complex_criteria_label) > 0)
				{
					fprintf(l_report_XLS2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" >%s</TD>\n",complex_criteria_label);
			  		l_complex_break_flag=1;
				}
				else
			     	fprintf(l_report_XLS2,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
			}

			if(i== (atoi(l_complex_pos_column)-1))
			{				  
			  strcpy(l_complex_column,l_complex_val[j]);

			  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);
               //fflush(fl_userlog);
			   
			  l_complex_break_flag=1;

			  if(strlen(l_complex_column) > 0)
			  {
				  EXEC SQL CALL SP_NUMBER_FORMATTING(:l_complex_column,:l_error_desc);

				  if(strlen(l_error_desc) > 0)
					fprintf(l_report_XLS2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" 								x:str=\"%s\">%s</TD>\n",l_complex_column,l_complex_column);
				  else
					fprintf(l_report_XLS2,"<TD class=\'lableredbg\' ALIGN=\"RIGHT\" 								x:str=\"%s\">%s</TD>\n",l_complex_column,l_complex_column);
			  }
			  else
			  {
					fprintf(l_report_XLS2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">&nbsp;</TD>\n");
					//fflush(fl_userlog);
			  }			  

			  break;
			}
			else
			{
			     l_complex_break_flag = 0;
			     continue;
			} 

			}
			     
			if(i != 0)
			{
			  if(l_complex_break_flag != 1)
			     fprintf(l_report_XLS2,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
			}
		}

		}
		else
		{
			fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
		}

		fprintf(l_report_XLS2,"</TR>\n");

		}

		}
		else
		{			
			fprintf(fl_userlog," No Records Found -- So No Need To Display Criteria \n");
		}
		

		/***************************************************************************/

		fprintf(l_report_XLS2,"</TABLE>\n");
		
		/****** After table ***************************************************/
		
		l_after_table = h_report_details_struct.after_table_brk;

		if(l_after_table > 0)
		{
			fprintf(l_report_XLS2,"<TABLE>\n");
			//fflush(fl_userlog);
			while(l_after_table > 0)
			{
				fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
				//fflush(fl_userlog);
				l_after_table --;
				g_line_count++;
			}
			fprintf(l_report_XLS2,"</TABLE>\n");
			//fflush(fl_userlog);
		}

		if(strlen(h_report_details_struct.after_table_align) > 0)
		{
			if(strlen(h_report_details_struct.after_table) > 0)
			{	
				fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR><TD WIDTH=\"100%%\" COLSPAN='%d\' ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.after_table_align,h_report_details_struct.after_table);

				g_line_count++;
			}
		}
		else
		{
			if(strlen(h_report_details_struct.after_table) > 0)
			{	
				fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR><TD WIDTH=\"100%%\" COLSPAN='%d\' ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.after_table);

				g_line_count++;
			}

		}	
  
		/************ Table Footer note **************************************/
	
		l_table_footer = h_report_details_struct.table_footer_brk;
		
		if(l_table_footer > 0)
		{
			fprintf(l_report_XLS2,"<TABLE>\n");
			while(l_table_footer > 0)
			{
				fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
				l_table_footer --;
				g_line_count++;
			}
			fprintf(l_report_XLS2,"</TABLE>\n");
		}

		if(strlen(h_report_details_struct.table_footer_align) > 0)
		{
			if(strlen(h_report_details_struct.table_footer) > 0)
			{
				fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.table_footer_align,h_report_details_struct.table_footer);

				g_line_count++;
			}
		}
		else
		{
			if(strlen(h_report_details_struct.table_footer) > 0)
			{
				fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_details_struct.table_footer);

				g_line_count++;
			}
		}

		l_table = h_report_main_struct.table_brk;
		
		if(l_table > 0)
		{
			fprintf(l_report_XLS2,"<TABLE>\n");
			while(l_table > 0)
			{
				fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
				l_table --;
				g_line_count++;
			}
			fprintf(l_report_XLS2,"</TABLE>\n");
		}

		/************** Final Page Break *******************************************************/

		if(!strcmp(l_paging_flag,"Y"))
		{
			if(!strcmp(l_print_flag,"L"))
			{		
				if((p_final_break == 1)||(l_fetch_count == 0))
				{
					if(l_client_fetch_count == 0)
					{
						l_final_break = ((l_landscape * p_total_page_no) - (g_line_count - l_tolarence));
					}
					else if (l_client_fetch_count > 0)
					{
						l_final_break = ((l_landscape * p_total_page_no) - (g_line_count - l_tolarence));
					}

					fprintf(l_report_XLS2,"<TABLE>\n");
					while(l_final_break > 0)
					{
						fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
						l_final_break --;

						g_line_count++;
					}
					fprintf(l_report_XLS2,"</TABLE>\n");

					p_final_break = 0;
					p_total_page_no++;
					
				}
			}
			else if(!strcmp(l_print_flag,"P"))
			{		
				if((p_final_break == 1)||(l_fetch_count == 0))
				{
					if(l_client_fetch_count == 0)
					{
						l_final_break = ((l_portrait * p_total_page_no) - (g_line_count - l_tolarence));
					}
					else if (l_client_fetch_count > 0)
					{
						l_final_break = ((l_portrait * p_total_page_no) - (g_line_count - l_tolarence));
					}

					fprintf(l_report_XLS2,"<TABLE>\n");
					while(l_final_break > 0)
					{
						fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
						l_final_break --;

						g_line_count++;
					}
					fprintf(l_report_XLS2,"</TABLE>\n");

					p_final_break = 0;
					p_total_page_no++;
					
				}
			}
		}


		if( l_fetch_count > 0 )
		{
			for(m=0;m<l_complex_num;m++)
			{
				if(m == 0)
				{
					strcpy(l_complex_parameter1,l_complex_val[m]);
					g_complex_parameter1=atof(l_complex_parameter1);
				}
				else if(m == 1)
				{
					strcpy(l_complex_parameter2,l_complex_val[m]);
					g_complex_parameter2=atof(l_complex_parameter2);
				}
				else if(m == 2)
				{
					strcpy(l_complex_parameter3,l_complex_val[m]);
					g_complex_parameter3=atof(l_complex_parameter3);
				}
				else if(m == 3)
				{
					strcpy(l_complex_parameter4,l_complex_val[m]);
					g_complex_parameter4=atof(l_complex_parameter4);
				}
				else if(m == 4)
				{
					strcpy(l_complex_parameter5,l_complex_val[m]);
					g_complex_parameter5=atof(l_complex_parameter5);
				}
				else if(m == 5)
				{
					strcpy(l_complex_parameter6,l_complex_val[m]);
					g_complex_parameter6=atof(l_complex_parameter6);
				}
				else if(m == 6)
				{
					strcpy(l_complex_parameter7,l_complex_val[m]);
					g_complex_parameter7=atof(l_complex_parameter7);
				}
				else if(m == 7)
				{
					strcpy(l_complex_parameter8,l_complex_val[m]);
					g_complex_parameter8=atof(l_complex_parameter8);
				}
				else if(m == 8)
				{
					strcpy(l_complex_parameter9,l_complex_val[m]);
					g_complex_parameter9=atof(l_complex_parameter9);
				}
				else if(m == 9)
				{
					strcpy(l_complex_parameter10,l_complex_val[m]);
					g_complex_parameter10=atof(l_complex_parameter10);
				}
				else if(m == 10)
				{
					strcpy(l_complex_parameter11,l_complex_val[m]);
					g_complex_parameter11=atof(l_complex_parameter11);
				}
				else if(m == 11)
				{
					strcpy(l_complex_parameter12,l_complex_val[m]);			
					g_complex_parameter12=atof(l_complex_parameter12);
				}
				else if(m == 12)
				{
					strcpy(l_complex_parameter13,l_complex_val[m]);
					g_complex_parameter13=atof(l_complex_parameter13);
				}
				else if(m == 13)
				{
					strcpy(l_complex_parameter14,l_complex_val[m]);
					g_complex_parameter14=atof(l_complex_parameter14);
				}
				else if(m == 14)
				{
					strcpy(l_complex_parameter15,l_complex_val[m]);
					g_complex_parameter15=atof(l_complex_parameter15);
				}
				else if(m == 15)
				{
					strcpy(l_complex_parameter16,l_complex_val[m]);
					g_complex_parameter16=atof(l_complex_parameter16);
				}
				else if(m == 16)
				{
					strcpy(l_complex_parameter17,l_complex_val[m]);
					g_complex_parameter17=atof(l_complex_parameter17);
				}
				else if(m == 17)
				{
					strcpy(l_complex_parameter18,l_complex_val[m]);
					g_complex_parameter18=atof(l_complex_parameter18);
				}
				else if(m == 18)
				{
					strcpy(l_complex_parameter19,l_complex_val[m]);
					g_complex_parameter19=atof(l_complex_parameter19);
				}
				else if(m == 19)
				{
					strcpy(l_complex_parameter20,l_complex_val[m]);
					g_complex_parameter20=atof(l_complex_parameter20);
				}

			}/*** End of Complex For Loop ***/

		}/*** End Of Fetch Count Check ****/

		}/******* End Of Grouping Else Block **********/

		/*************** Complex Criteria Individual  *********************/
		
		if(l_fetch_count > 0 )
		{
			fprintf(fl_userlog,"g_complex_parameter1 :|%lf|\tg_complex_parameter2 :|%lf|\n",g_complex_parameter1,g_complex_parameter2);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter3 :|%lf|\tg_complex_parameter4 :|%lf|\n",g_complex_parameter3,g_complex_parameter4);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter5 :|%lf|\tg_complex_parameter6 :|%lf|\n",g_complex_parameter5,g_complex_parameter6);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter7 :|%lf|\tg_complex_parameter8 :|%lf|\n",g_complex_parameter7,g_complex_parameter8);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter9 :|%lf|\tg_complex_parameter10 :|%lf|\n",g_complex_parameter9,g_complex_parameter10);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter11 :|%lf|\tg_complex_parameter12 :|%lf|\n",g_complex_parameter11,g_complex_parameter12);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter13 :|%lf|\tg_complex_parameter14 :|%lf|\n",g_complex_parameter13,g_complex_parameter14);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter15 :|%lf|\tg_complex_parameter16 :|%lf|\n",g_complex_parameter15,g_complex_parameter16);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter17 :|%lf|\tg_complex_parameter18 :|%lf|\n",g_complex_parameter17,g_complex_parameter18);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter19 :|%lf|\tg_complex_parameter20 :|%lf|\n",g_complex_parameter19,g_complex_parameter20);
			//fflush(fl_userlog);
		}


		/*******************************************************************/


		/********* Dynamic Footer Display ****************************************/

		strcpy(footer_query,h_report_details_struct.footer_query);
		
		/*fprintf(fl_userlog,"strlen(footer_query) 9900:|%d|\n",strlen(footer_query));
		//fflush(fl_userlog);*/

		if(strlen(footer_query) > 0)
		{

		/**** Stored Procedure : SP_REPORT_FOOTER ***********************************/

		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER 121:|%s||%s|\n",l_rept_id,l_param1);	
		//fflush(fl_userlog);
		printf("Calling Stored Procedure SP_REPORT_FOOTER 121:|%s||%s|\n",l_rept_id,l_param1);	
		
		EXEC SQL CALL SP_REPORT_FOOTER(:l_rept_id,:l_table_id,:l_param1,:l_param2,
					:l_param3,:l_param4, :l_param5,
					:l_param6,:l_footer_query,:l_footer_query1,:l_error_desc); 

		strcat(l_footer_query,l_footer_query1);

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER ERR DESC :|%s|\n",l_error_desc);
		}

		/*fprintf(fl_userlog,"FOOTER QUERY 5555:|%s|\n",l_footer_query);
		//fflush(fl_userlog);*/

		strcpy(l_footer_query_value,APL_NULL_STRING);

		EXEC SQL PREPARE XLS2_FOOTER_CURR FROM :l_footer_query;

		EXEC SQL DECLARE xls2_footer_curr CURSOR FOR XLS2_FOOTER_CURR;
		
		fprintf(fl_userlog,"After DECLARE xls2_footer_curr 666:|%d|\n",sqlca.sqlcode);
		//fflush(fl_userlog);

		EXEC SQL OPEN xls2_footer_curr;

		EXEC SQL FETCH xls2_footer_curr INTO :l_footer_query_value;
		fprintf(fl_userlog,"After FETCH xls2_footer_curr 666:|%d|\n",sqlca.sqlcode);
		//fflush(fl_userlog);

		EXEC SQL CLOSE xls2_footer_curr;

		fprintf(fl_userlog,"l_footer_query_value 3344:|%s|\n",l_footer_query_value);
		//fflush(fl_userlog);

		l_footer_num = 0;

		strcpy(l_footer1,APL_NULL_STRING);
		strcpy(l_footer2,APL_NULL_STRING);
		strcpy(l_footer3,APL_NULL_STRING);
		strcpy(l_footer4,APL_NULL_STRING);
		strcpy(l_footer5,APL_NULL_STRING);
		strcpy(l_footer6,APL_NULL_STRING);
		strcpy(l_footer7,APL_NULL_STRING);
		strcpy(l_footer8,APL_NULL_STRING);
		strcpy(l_footer9,APL_NULL_STRING);
		strcpy(l_footer10,APL_NULL_STRING);
		strcpy(l_footer11,APL_NULL_STRING);
		strcpy(l_footer12,APL_NULL_STRING);
		strcpy(l_footer13,APL_NULL_STRING);
		strcpy(l_footer14,APL_NULL_STRING);
		strcpy(l_footer15,APL_NULL_STRING);

		if(strlen(l_footer_query_value) > 0)
		{		
			if (CO_SplitStr(l_footer_query_value,CAPSEP,&l_footer_num,&l_footer_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_footer_query_value);
				//fflush(fl_userlog);
				APL_GOBACK_FAIL
			}

			fprintf(fl_userlog,"l_footer_num 789:|%d|\n",l_footer_num);
			//fflush(fl_userlog);
			if(l_footer_num > 0)
			{
				for(i=0;i<l_footer_num;i++)
				{

					if(i == 0)
					strcpy(l_footer1,l_footer_val[i]);
					else if(i == 1)
					strcpy(l_footer2,l_footer_val[i]);
					else if(i == 2)
					strcpy(l_footer3,l_footer_val[i]);
					else if(i == 3)
					strcpy(l_footer4,l_footer_val[i]);
					else if(i == 4)
					strcpy(l_footer5,l_footer_val[i]);
					else if(i == 5)
					strcpy(l_footer6,l_footer_val[i]);
					else if(i == 6)
					strcpy(l_footer7,l_footer_val[i]);
					else if(i == 7)
					strcpy(l_footer8,l_footer_val[i]);
					else if(i == 8)
					strcpy(l_footer9,l_footer_val[i]);
					else if(i == 9)
					strcpy(l_footer10,l_footer_val[i]);
					else if(i == 10)
					strcpy(l_footer11,l_footer_val[i]);
					else if(i == 11)
					strcpy(l_footer12,l_footer_val[i]);
					else if(i == 12)
					strcpy(l_footer13,l_footer_val[i]);
					else if(i == 13)
					strcpy(l_footer14,l_footer_val[i]);
					else if(i == 14)
					strcpy(l_footer15,l_footer_val[i]);
				}
			}

		}/******* End Of Footer Value Check *******************************************/

		/****** Stored Procedure : SP_REPORT_FOOTER_DATA ***********************************/

		fprintf(fl_userlog,"l_footer1 :|%s|\t l_footer2 :|%s|\n",l_footer1,l_footer2);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer3 :|%s|\t l_footer4 :|%s|\n",l_footer3,l_footer4);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer5 :|%s|\t l_footer6 :|%s|\n",l_footer5,l_footer6);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer7 :|%s|\t l_footer8 :|%s|\n",l_footer7,l_footer8);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer9 :|%s|\t l_footer10 :|%s|\n",l_footer9,l_footer10);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer11 :|%s|\t l_footer12 :|%s|\n",l_footer11,l_footer12);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer13 :|%s|\t l_footer14 :|%s|\n",l_footer13,l_footer14);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer15 :|%s|\n",l_footer15);
		//fflush(fl_userlog);

		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER_DATA 213:|%s|\n",l_rept_id);	
		printf("Calling Stored Procedure SP_REPORT_FOOTER_DATA 14:|%s|\n",l_rept_id);		
		
		EXEC SQL CALL SP_REPORT_FOOTER_DATA(:l_rept_id,:l_table_id,
							:l_footer1,:l_footer2,
							:l_footer3,:l_footer4,
							:l_footer5,:l_footer6,
							:l_footer7,:l_footer8,
							:l_footer9,:l_footer10,
							:l_footer11,:l_footer12,
							:l_footer13,:l_footer14,
							:l_footer15,
							:g_complex_parameter1,:g_complex_parameter2,
							:g_complex_parameter3,:g_complex_parameter4,
							:g_complex_parameter5,:g_complex_parameter6,
							:g_complex_parameter7,:g_complex_parameter8,
							:g_complex_parameter9,:g_complex_parameter10,
							:g_complex_parameter11,:g_complex_parameter12,
							:g_complex_parameter13,:g_complex_parameter14,
							:g_complex_parameter15,:g_complex_parameter16,
							:g_complex_parameter17,:g_complex_parameter18,
							:g_complex_parameter19,:g_complex_parameter20,
							:l_footer_data,:l_error_desc);

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER_DATA ERR DESC :|%s|\n",l_error_desc);
			//fflush(fl_userlog);
		}

		fprintf(fl_userlog,"FOOTER DATA 122:|%s|\n",l_footer_data);

		/************ Dynamic Formating Procedure ********************************************/
		
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT211 --- :|%s|\n",l_rep_type);	
		//fflush(fl_userlog);
		printf("Calling Stored Procedure SP_REPORT_FORMAT 212--- :|%s|\n",l_rep_type);		
		
		EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_footer_data,:l_error_desc); 

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
		}

		fprintf(fl_userlog,"FOOTER DATA After Formatting 89-- :|%s|\n",l_footer_data);
		//fflush(fl_userlog);


		/*************************************************************************************/

		/************ Dynamic Footer Data Display **********************************************/
		
		fprintf(fl_userlog,"strlen(l_footer_data) :|%d|\n",strlen(l_footer_data));

		if(strlen(l_footer_data) > 0)
		{
			fprintf(fl_userlog,"Displaying Footer Data --- \n");

			fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\"><TR>\n");
			fprintf(l_report_XLS2,"<TD WIDTH=\"100%%\" colspan=\'%d\' ALIGN=\"%s\" class=\'headerdata\' >%s</TD> \n",l_colspan,h_report_details_struct.footer_data_align,l_footer_data);
			fprintf(l_report_XLS2,"</TR></TABLE>\n");
		}

		l_footer_data_brk = h_report_details_struct.footer_data_brk;
		while(l_footer_data_brk > 0)
		{
			fprintf(l_report_XLS2,"</BR>\n");
			l_footer_data_brk --;
			g_line_count++;
		}

		}

		/***************** End Of Dynamic Footer Display  *****************************/

		/***************** Final Complex Criteria Calculation *************************/

		fprintf(fl_userlog,"\n--- l_table_id --- 9:|%d|\n",l_table_id);
		//fflush(fl_userlog);

		if(l_table_id == 1)
		{
			f_complex_parameter1=f_complex_parameter1+g_complex_parameter1;
			f_complex_parameter2=f_complex_parameter2+g_complex_parameter2;
			f_complex_parameter3=f_complex_parameter3+g_complex_parameter3;
			f_complex_parameter4=f_complex_parameter4+g_complex_parameter4;
			f_complex_parameter5=f_complex_parameter5+g_complex_parameter5;
			f_complex_parameter6=f_complex_parameter6+g_complex_parameter6;
			f_complex_parameter7=f_complex_parameter7+g_complex_parameter7;
			f_complex_parameter8=f_complex_parameter8+g_complex_parameter8;
			f_complex_parameter9=f_complex_parameter9+g_complex_parameter9;
			f_complex_parameter10=f_complex_parameter10+g_complex_parameter10;
			f_complex_parameter11=f_complex_parameter11+g_complex_parameter11;
			f_complex_parameter12=f_complex_parameter12+g_complex_parameter12;
			f_complex_parameter13=f_complex_parameter13+g_complex_parameter13;
			f_complex_parameter14=f_complex_parameter14+g_complex_parameter14;
			f_complex_parameter15=f_complex_parameter15+g_complex_parameter15;
			f_complex_parameter16=f_complex_parameter16+g_complex_parameter16;
			f_complex_parameter17=f_complex_parameter17+g_complex_parameter17;
			f_complex_parameter18=f_complex_parameter18+g_complex_parameter18;
			f_complex_parameter19=f_complex_parameter19+g_complex_parameter19;
			f_complex_parameter20=f_complex_parameter20+g_complex_parameter20;
		}


		/**********************************************************************************/

		l_table_id ++;

	}/***** End Of Table Id Fetch ***************************************/
	}
	
	l_client_fetch_count ++;


	}/***** End Of Record Count check ****************************/

	}/***** End Of Sub Client Fetch *****************************/

	EXEC SQL CLOSE xlssubclient;
	
	/********** For Displaying Grand Criteria Total ****************************************/

	fprintf(fl_userlog,"GRAND TOTAL FLAG is 6:|%s|\n",h_report_details_struct.grand_total_flag);
    //fflush(fl_userlog);
	printf("l_grand_total1:|%lf|\n",l_grand_total1);
	printf("l_grand_total2:|%lf|\n",l_grand_total2);
	printf("l_grand_total2:|%lf|\n",l_grand_total3);
//fflush(fl_userlog);
	EXEC SQL SELECT ROUND(:l_grand_total1,2),ROUND(:l_grand_total2,2),ROUND(:l_grand_total3,2)
	INTO :l_grand_round1,:l_grand_round2,:l_grand_round3
	FROM DUAL;

	fprintf(fl_userlog,"After Grand Total Round -- ORA ERROR 6:|%d|\n",sqlca.sqlcode);
	printf("After Grand Total Round -- ORA ERROR 6:|%d|\n",sqlca.sqlcode);

	fprintf(fl_userlog,"l_grand_round1:|%s|\n",l_grand_round1);
	fprintf(fl_userlog,"l_grand_round2:|%s|\n",l_grand_round2);
	fprintf(fl_userlog,"l_grand_round3:|%s|\n",l_grand_round3);

	printf("l_grand_round1:|%s|\n",l_grand_round1);
	printf("l_grand_round2:|%s|\n",l_grand_round2);
	printf("l_grand_round3:|%s|\n",l_grand_round3);


	fprintf(fl_userlog,"g_setting_flag:|%s|\n",g_setting_flag);
	printf("g_setting_flag:|%s|\n",g_setting_flag);

	if(!strcmp(g_setting_flag,"U"))
		strcpy(l_grand_display,"GRAND");
	else if(!strcmp(g_setting_flag,"L"))
		strcpy(l_grand_display,"grand");
	else 
		strcpy(l_grand_display,"Grand");

	/********************************************************************************/

	
	if(strlen(h_report_details_struct.grand_total_flag) > 0)
	{
		fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" class=\'ez4\'>\n");
		
		if(l_grand_total1 > 0)
		{
			EXEC SQL CALL SP_NUMBER_FORMATTING(:l_grand_round1,:l_error_desc);

			fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);

			fprintf(l_report_XLS2,"<TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"RIGHT\" class=\'ez4\'>%s %s = %s</TD></TR>\n",l_colspan,l_grand_display,h_report_details_struct.criteria_col1_name,l_grand_round1);
			g_line_count++;
		}
		
		if(l_grand_total2 > 0)
		{
			EXEC SQL CALL SP_NUMBER_FORMATTING(:l_grand_total2,:l_error_desc);

			fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);

			fprintf(l_report_XLS2,"<TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"RIGHT\" class=\'ez4\'>%s %s = %s</TD></TR>\n",l_colspan,l_grand_display,h_report_details_struct.criteria_col2_name,l_grand_round2);
			g_line_count++;
		}
		
		if(l_grand_total3 > 0)
		{
			EXEC SQL CALL SP_NUMBER_FORMATTING(:l_grand_total3,:l_error_desc);

			fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);

			fprintf(l_report_XLS2,"<TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"RIGHT\" class=\'ez4\'>%s %s = %s</TD></TR>\n",l_colspan,l_grand_display,h_report_details_struct.criteria_col3_name,l_grand_round3);			
			g_line_count++;
		}
		
		fprintf(l_report_XLS2,"</TABLE>\n");

	}

	/************* Grand Complex Criteria Display ******************************************/
		
	fprintf(fl_userlog,"f_complex_parameter1 :|%lf|\tf_complex_parameter2 :|%lf|\n",f_complex_parameter1,f_complex_parameter2);
	fprintf(fl_userlog,"f_complex_parameter3 :|%lf|\tf_complex_parameter4 :|%lf|\n",f_complex_parameter3,f_complex_parameter4);
	fprintf(fl_userlog,"f_complex_parameter5 :|%lf|\tf_complex_parameter6 :|%lf|\n",f_complex_parameter5,f_complex_parameter6);
	fprintf(fl_userlog,"f_complex_parameter7 :|%lf|\tf_complex_parameter8 :|%lf|\n",f_complex_parameter7,f_complex_parameter8);
	fprintf(fl_userlog,"f_complex_parameter9 :|%lf|\tf_complex_parameter10 :|%lf|\n",f_complex_parameter9,f_complex_parameter10);
	fprintf(fl_userlog,"f_complex_parameter11 :|%lf|\tf_complex_parameter12 :|%lf|\n",f_complex_parameter11,f_complex_parameter12);
	fprintf(fl_userlog,"f_complex_parameter13 :|%lf|\tf_complex_parameter14 :|%lf|\n",f_complex_parameter13,f_complex_parameter14);
	fprintf(fl_userlog,"f_complex_parameter15 :|%lf|\tf_complex_parameter16 :|%lf|\n",f_complex_parameter15,f_complex_parameter16);
	fprintf(fl_userlog,"f_complex_parameter17 :|%lf|\tf_complex_parameter18 :|%lf|\n",f_complex_parameter17,f_complex_parameter18);
	fprintf(fl_userlog,"f_complex_parameter19 :|%lf|\tf_complex_parameter20 :|%lf|\n",f_complex_parameter19,f_complex_parameter20);

	strcpy(complex_criteria,h_report_details_struct.complex_criteria);

	//fprintf(fl_userlog,"strlen(complex_criteria) :|%d|\n",strlen(complex_criteria));

	if(strlen(complex_criteria) > 0 )
	{
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_CRITERIA :|%s|\n",l_rept_id);	
		printf("Calling Stored Procedure SP_REPORT_CRITERIA :|%s|\n",l_rept_id);	
		
		EXEC SQL CALL SP_REPORT_CRITERIA(:complex_criteria,
						 :f_complex_parameter1,:f_complex_parameter2,
						 :f_complex_parameter3,:f_complex_parameter4,
						 :f_complex_parameter5,:f_complex_parameter6,
						 :f_complex_parameter7,:f_complex_parameter8,
						 :f_complex_parameter9,:f_complex_parameter10,
						 :f_complex_parameter11,:f_complex_parameter12,
						 :f_complex_parameter13,:f_complex_parameter14,
						 :f_complex_parameter15,:f_complex_parameter16,
						 :f_complex_parameter17,:f_complex_parameter18,
						 :f_complex_parameter19,:f_complex_parameter20,
						 :l_complex_criteria_data,:l_error_desc); 

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_CRITERIA ERR DESC :|%s|\n",l_error_desc);
		}

		//fprintf(fl_userlog,"COMPLEX CRITERIA DATA :|%s|\n",l_complex_criteria_data);

		/************ Dynamic Formating Procedure ********************************************/
		
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);	
		printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
		//fflush(fl_userlog);
		EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_complex_criteria_data,:l_error_desc); 

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
		}

		//fprintf(fl_userlog,"COMPLEX CRITERIA DATA After Formatting -- :|%s|\n",l_complex_criteria_data);


		/*******************************************************************/

		/************ COMPLEX CRITERIA DATA Display ************************/
		
		//fprintf(fl_userlog,"strlen(l_complex_criteria_data) :|%d|\n",strlen(l_complex_criteria_data));

		if(strlen(l_complex_criteria_data) > 0)
		{
			fprintf(fl_userlog,"Displaying l_complex_criteria_data Data --- \n");

			fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\"><TR>\n");
			fprintf(l_report_XLS2,"<TD WIDTH=\"100%%\"  colspan=\'%d\' ALIGN=\"LEFT\" class=\'headerdata\'>%s</TD>\n",l_colspan,l_complex_criteria_data);
			fprintf(l_report_XLS2,"</TR></TABLE>\n");
		}

		fprintf(fl_userlog,"33618 line nos --- \n");
		//fflush(fl_userlog);
	}


	/**********************************************************************/

	
	/******* Page Footer note ********************************************/
		
	if(strlen(h_report_main_struct.page_footer_align) > 0)
	{
		if(strlen(h_report_main_struct.page_footer) > 0)
		{
			fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" class=\'footer\'><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"%s\" class=\'footer\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_main_struct.page_footer_align,h_report_main_struct.page_footer);

			g_line_count++;
		}
	}
	else
	{
		if(strlen(h_report_main_struct.page_footer) > 0)
		{
			fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" class=\'footer\'><TR><TD WIDTH=\"100%%\" COLSPAN=\'%d\' ALIGN=\"LEFT\" class=\'footer\'>%s</TD><TR></TABLE>\n",l_colspan,h_report_main_struct.page_footer);

			g_line_count++;
		}

	}

	l_page_footer = h_report_main_struct.page_footer_brk;
	
	if(l_page_footer > 0)
	{
		fprintf(l_report_XLS2,"<TABLE>\n");
		while(l_page_footer > 0 )
		{
			fprintf(l_report_XLS2,"<TR><TD></TD></TR>\n");
					
			l_page_footer -- ;
			g_line_count++;
		}
		fprintf(l_report_XLS2,"</TABLE>\n");
	}
	
	/******* Disclaimer **************************************************/
		
	if(strlen(h_report_main_struct.disclaimer) > 0)
	{
		fprintf(l_report_XLS2,"<TABLE WIDTH=\"100%%\" class=\'footer\'><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'footer\' COLSPAN=\'%d\' >%s</TD><TR></TABLE>\n",l_colspan,h_report_main_struct.disclaimer);

	}

	/********************************************************************/

	
	fprintf(l_report_XLS2,"</BODY></HTML>\n");


	fprintf(fl_userlog,"REMOVE FLAG :|%d|\n",l_remove_flag);
	fprintf(fl_userlog,"REMOVE PATH :|%s|\n",l_remove_file_path);
	
	if(l_remove_flag == 1)
	{
		system(l_remove_file_path);

		fprintf(fl_userlog,"Removing File Since No Data Found For The Report\n");
		fprintf(fl_userlog,"Delete File Name :- |%s|\n",l_report_name);
		printf("Removing File Since No Data Found For The Report\n");
		//fflush(fl_userlog);
		printf("Delete File Name :- |%s|\n",l_report_name);
//fflush(fl_userlog);
		EXEC SQL DELETE FROM PRO_COMMON_REPORT 
			 WHERE REPORT_NAME=:l_report_name;

		fprintf(fl_userlog,"After DELETE File ORA ERROR :|%d|\n",sqlca.sqlcode); 
	}
	else
	{
	if(strlen(l_compress_flag) == 0 || !strcmp(l_compress_flag,"N"))
	{
		if((strlen(l_web_source_from) > 0) && !(strcmp(l_web_source_from,"W")))
		{
			EXEC SQL CALL SP_SHOW_REAL_TIME_REPORT_IN_WC(:l_report_name,:l_web_report_dt,:l_web_login_id,:l_report_path,:l_rept_id);
	
			if(sqlca.sqlcode < 0)
			{
				printf("Error : Failed From Stored Procedure SP_SHOW_REAL_TIME_REPORT_IN_WC ERR DESC :|%d|\n",sqlca.sqlcode);
				fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_SHOW_REAL_TIME_REPORT_IN_WC ERR DESC :|%d|\n",sqlca.sqlcode);
			}
		}
	}
	}
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:
	{
		fclose(l_report_XLS2);
		fclose(l_init_file);
		CO_ProcMonitor(g_logfile,"Success from CO_CreateReport_XLS2",NULL,NULL);
		fprintf(fl_userlog,"Success From CO_CreateReport_XLS2 Function\n");
		return(APL_SUCCESS);
	}


	RETURN_FAILURE:
	{
		fclose(l_report_XLS2);
		fclose(l_init_file);		
		CO_ProcMonitor(g_logfile,"Failed from CO_CreateReport_XLS2",l_debug_info_ptr,NULL);
		fprintf(fl_userlog,"Failure From CO_CreateReport_XLS2 Function\n ");
		return(APL_FAILURE);
	}
}

int CO_CreateReport_CSV2(char *p_rept_id,char *p_rep_type,char *p_rep_name,
		      	char *p_param_str,char *p_chr_ptr_param,char *p_start_date,
		        char *p_compress_flag,char *p_user,char *p_web_login_id,char *p_web_rpt_id,char *p_web_source_from,char *p_web_report_dt,char *p_web_proc_id,FILE *fl_userlog,
			DEBUG_INFO_STRUCT_H **l_debug_info_ptr)	
{
	printf("Entered Inside CO_CreateReport_CSV2 Function \n");

	FILE	*l_init_file  	= (FILE *)NULL;
	FILE	*l_report_CSV2 	= (FILE *)NULL;
	char l_init_path[200]	= APL_NULL_STRING;
	char l_report_path[200] = APL_NULL_STRING;
	char l_report_name[200] = APL_NULL_STRING;
	char l_compress_flag[5]	= APL_NULL_STRING;
	char l_time_stamp[30]	= APL_NULL_STRING;

	char l_remove_file_path[200] = APL_NULL_STRING;
	int  l_remove_count = 0;
	int  l_remove_flag = 0;
	int  l_client_fetch_count = 0;
	int  no_of_table_count = 0;
	
	memset(l_remove_file_path,APL_NULL_CHAR,200);	
	
	memset(l_init_path,APL_NULL_CHAR,200);	
	memset(l_report_path,APL_NULL_CHAR,200);	
	memset(l_report_name,APL_NULL_CHAR,200);	

	REPORT_MAIN_STRUCT_H  h_report_main_struct;
	REPORT_MAIN_STRUCT_I  i_report_main_struct;
	
	REPORT_DETAILS_STRUCT_H h_report_details_struct;
	REPORT_DETAILS_STRUCT_I i_report_details_struct;
	
	INTL_REPT_STRUCT_H   l_intl_rept_struct_ha;
	memset(&l_intl_rept_struct_ha,APL_NULL_CHAR,sizeof(INTL_REPT_STRUCT_H));

	memset(&h_report_main_struct,APL_NULL_CHAR,sizeof(REPORT_MAIN_STRUCT_H));	
	memset(&i_report_main_struct,APL_NULL_CHAR,sizeof(REPORT_MAIN_STRUCT_I));

	memset(&h_report_details_struct,APL_NULL_CHAR,sizeof(REPORT_DETAILS_STRUCT_H));
	memset(&i_report_details_struct,APL_NULL_CHAR,sizeof(REPORT_DETAILS_STRUCT_I));
		
	char l_rept_id[11]	   	= APL_NULL_STRING;
	char l_rep_type[10]	   	= APL_NULL_STRING;
	char l_client[20]  		= APL_NULL_STRING;
	char l_sub_client[20]  		= APL_NULL_STRING;
	char l_rep_name[100]    	= APL_NULL_STRING;
	char l_param_str[4000]  	= APL_NULL_STRING;
	char l_chr_param[4000]  	= APL_NULL_STRING;
	char l_start_date[20]   	= APL_NULL_STRING;
	char l_user[20]  		= APL_NULL_STRING;
	char l_client_name[100] 	= APL_NULL_STRING;
	char l_gen_query[4001]  	= APL_NULL_STRING;

    //changes for report generation through api start
	char l_web_login_id[101]				= APL_NULL_STRING;
	char l_web_rpt_id[101]				= APL_NULL_STRING;
	char l_web_source_from[101]				= APL_NULL_STRING;
	char l_web_report_dt[101]				= APL_NULL_STRING;
	char l_web_proc_id[101]				= APL_NULL_STRING;
	//changes for report generation through api end

	char l_more_qry_flag[3]     = APL_NULL_STRING;
	char table_query[24001] 	= APL_NULL_STRING;
	char l_table_query[4001] 	= APL_NULL_STRING;
	char l_table_query1[4001] 	= APL_NULL_STRING;
	char l_table_query2[4001] 	= APL_NULL_STRING;
	char l_table_query3[4001] 	= APL_NULL_STRING;
	char l_table_query4[4001] 	= APL_NULL_STRING;
	char l_table_query5[4001] 	= APL_NULL_STRING;
	
	char l_criteria_query1[4001]    = APL_NULL_STRING;
	char l_criteria_query2[4001]    = APL_NULL_STRING;
	char l_criteria_query3[4001]    = APL_NULL_STRING;
	char l_system_date[20]          = APL_NULL_STRING;
	char l_column_value[200]	= APL_NULL_STRING;
	char l_column_header[4001]	= APL_NULL_STRING;
	char l_table_parameter[6000]	= APL_NULL_STRING;
	char l_general_parameter[6000]  = APL_NULL_STRING;
	char l_general_param[6000]	= APL_NULL_STRING;
	char l_param[2000]		= APL_NULL_STRING;
	char l_column_parameter[6000]	= APL_NULL_STRING;
	char l_column[2000]		= APL_NULL_STRING;
	char l_error_desc[2000]		= APL_NULL_STRING;
	char  l_param1[100]              = APL_NULL_STRING;
	char  l_param2[100]              = APL_NULL_STRING;
	char  l_param3[100]              = APL_NULL_STRING;
	char  l_param4[100]              = APL_NULL_STRING;
	char  l_param5[100]              = APL_NULL_STRING;
	char  l_param6[100]              = APL_NULL_STRING;
	char  l_master_query[4001]      = APL_NULL_STRING;

	char g_style[4000]	= APL_NULL_STRING;
	char g_style_lt[4000]	= APL_NULL_STRING;
	char g_setting_flag[2]	= APL_NULL_STRING;
	char g_table_border[2]= APL_NULL_STRING;
	
	char  l_group_query[4001]       = APL_NULL_STRING;
	char  l_group_desc[4001]        = APL_NULL_STRING;
	char  l_group_pos[11]	        = APL_NULL_STRING;
	char  l_group_parameter[2001]   = APL_NULL_STRING;
	
	char  **l_group_parameter_value	=	NULL;
	char  **l_group_pos_value 	=	NULL;

	int  l_group_pos_no		= 0;
	int  l_group_parameter_no	= 0;
	int  l_group_break_flag 	= 0;
	
	char  l_prev_param1[100]            = APL_NULL_STRING;
	char  l_prev_param2[100]            = APL_NULL_STRING;
	char  l_prev_param3[100]            = APL_NULL_STRING;
	char  l_prev_param4[100]            = APL_NULL_STRING;
	char  l_prev_param5[100]            = APL_NULL_STRING;
	char  l_prev_param6[100]            = APL_NULL_STRING;
	
	char l_grand_round1[200]	= APL_NULL_STRING;
	char l_grand_round2[200]	= APL_NULL_STRING;
	char l_grand_round3[200]	= APL_NULL_STRING;
	
	char  **l_col_value		=	NULL;
	char  **l_field_val		=	NULL;
	char  **l_column_val		=	NULL;
	char  **l_param_val		=	NULL;
	
	int i=0,j=0,k=0;
	int l_col_no			= 0;
	int l_column_num		= 0;
	int l_param_num			= 0;
	int l_fetch_count 		= 0;
	int l_before_title_break= 0;
	int l_no_of_columns     = 0;
	int l_no_of_cols        = 0;
	int l_table_id		= 0;
	int l_column_no         = 0;
	int l_page_header	= 0;
	int l_before_title      = 0;
	int l_before_title1	= 0;
	int l_before_title2	= 0;
	int l_before_title3     = 0;
	int l_report_title	= 0;
	int l_after_title	= 0;
	int l_table_hdr		= 0;
	int l_before_table	= 0;
	int l_after_table       = 0;
	int l_col_hdr		= 0;
	int l_table		= 0;
	int l_table_footer	= 0;
	int l_page_footer	= 0;
	int l_int_no_field      = 0;
	int int_no		= 0;
	double l_grand_total1	= 0;
	double l_grand_total2	= 0;
	double l_grand_total3	= 0;
	
	char l_criteria_value1[200]   = APL_NULL_STRING;
	char l_criteria_value2[200]   = APL_NULL_STRING;
	char l_criteria_value3[200]   = APL_NULL_STRING;
	double l_criteria1_total = 0.0;
	double l_criteria2_total = 0.0;
	double l_criteria3_total = 0.0;

	/************ Paging Varibles Declaration **********************/

	int p_page_no = 0;
	int rec_no = 0;
	int p_total_page_no = 0;
	int l_page_break_chk = 0;
	int l_next_page_break = 0;
	int l_main_page_break = 0;
	int p_final_break = 0;
	int l_final_break = 0;
	int l_main_page_recs = 0;
	int l_next_page_recs = 0;
	int l_tolarence = 0;
	int l_landscape = 0;
	int l_portrait = 0;
	int g_line_count = 0;

	char l_paging_flag[2] = APL_NULL_STRING;
	char l_print_flag[2] = APL_NULL_STRING;

	char l_grand_display[20] = APL_NULL_STRING;

	/******* Complex Criteria Variables ***************************/

	char l_report_type[3] 			= APL_NULL_STRING;
	
	char  **l_complex_val			= NULL;
	int l_complex_num			= 0;
	char l_complex_column[2000]		= APL_NULL_STRING;
	char l_complex_parameter[2000] 		= APL_NULL_STRING;
	
	char  **l_complex_pos_val		= NULL;
	int l_complex_pos_num			= 0;
	char l_complex_pos_column[2000]		= APL_NULL_STRING;
	char l_complex_pos_parameter[2000] 	= APL_NULL_STRING;
		
	int l_complex_break_flag 		= 0;
	
	char complex_criteria_query[8001] 	= APL_NULL_STRING;
	char complex_criteria_query1[4001] 	= APL_NULL_STRING;
	char complex_criteria_label[4001] 	= APL_NULL_STRING;
	char complex_criteria_pos[101] 		= APL_NULL_STRING;

	char l_header_query[8001] 		= APL_NULL_STRING;
	char l_header_query1[4001] 		= APL_NULL_STRING;
	char header_query[4001] 		= APL_NULL_STRING;	
	char l_header_query_value[4001] 	= APL_NULL_STRING;	
	int l_header_num 			= 0;
	char **l_header_val			= NULL;
	char l_header_data[6001]		= APL_NULL_STRING;
	int l_header_brk			= 0;

	char l_footer_query[8001] 		= APL_NULL_STRING;	
	char l_footer_query1[4001] 		= APL_NULL_STRING;	
	char footer_query[4001] 		= APL_NULL_STRING;	
	char l_footer_query_value[4001] 	= APL_NULL_STRING;	
	int l_footer_num 			= 0;
	char **l_footer_val			= NULL;
	char l_footer_data[6001]		= APL_NULL_STRING;
	int l_footer_data_brk			= 0;

	char l_header1[200] 			= APL_NULL_STRING;
	char l_header2[200] 			= APL_NULL_STRING;
	char l_header3[200] 			= APL_NULL_STRING;
	char l_header4[200] 			= APL_NULL_STRING;
	char l_header5[200] 			= APL_NULL_STRING;
	char l_header6[200] 			= APL_NULL_STRING;
	char l_header7[200] 			= APL_NULL_STRING;
	char l_header8[200] 			= APL_NULL_STRING;
	char l_header9[200] 			= APL_NULL_STRING;
	char l_header10[200] 			= APL_NULL_STRING;
	char l_header11[200] 			= APL_NULL_STRING;
	char l_header12[200] 			= APL_NULL_STRING;
	char l_header13[200] 			= APL_NULL_STRING;
	char l_header14[200] 			= APL_NULL_STRING;
	char l_header15[200] 			= APL_NULL_STRING;	

	char l_footer1[200] 			= APL_NULL_STRING;
	char l_footer2[200] 			= APL_NULL_STRING;
	char l_footer3[200] 			= APL_NULL_STRING;
	char l_footer4[200] 			= APL_NULL_STRING;
	char l_footer5[200] 			= APL_NULL_STRING;
	char l_footer6[200] 			= APL_NULL_STRING;
	char l_footer7[200] 			= APL_NULL_STRING;
	char l_footer8[200] 			= APL_NULL_STRING;
	char l_footer9[200] 			= APL_NULL_STRING;
	char l_footer10[200] 			= APL_NULL_STRING;
	char l_footer11[200] 			= APL_NULL_STRING;
	char l_footer12[200] 			= APL_NULL_STRING;
	char l_footer13[200] 			= APL_NULL_STRING;
	char l_footer14[200] 			= APL_NULL_STRING;
	char l_footer15[200] 			= APL_NULL_STRING;

	int m					= 0;
	
	char l_complex_parameter1[500]		= APL_NULL_STRING;
	char l_complex_parameter2[500]		= APL_NULL_STRING;
	char l_complex_parameter3[500]		= APL_NULL_STRING;
	char l_complex_parameter4[500]		= APL_NULL_STRING;
	char l_complex_parameter5[500]		= APL_NULL_STRING;
	char l_complex_parameter6[500]		= APL_NULL_STRING;
	char l_complex_parameter7[500]		= APL_NULL_STRING;
	char l_complex_parameter8[500]		= APL_NULL_STRING;
	char l_complex_parameter9[500]		= APL_NULL_STRING;
	char l_complex_parameter10[500]		= APL_NULL_STRING;
	char l_complex_parameter11[500]		= APL_NULL_STRING;
	char l_complex_parameter12[500]		= APL_NULL_STRING;
	char l_complex_parameter13[500]		= APL_NULL_STRING;
	char l_complex_parameter14[500]		= APL_NULL_STRING;
	char l_complex_parameter15[500]		= APL_NULL_STRING;
	char l_complex_parameter16[500]		= APL_NULL_STRING;
	char l_complex_parameter17[500]		= APL_NULL_STRING;
	char l_complex_parameter18[500]		= APL_NULL_STRING;
	char l_complex_parameter19[500]		= APL_NULL_STRING;
	char l_complex_parameter20[500]		= APL_NULL_STRING;

	double g_complex_parameter1		= 0.0;
	double g_complex_parameter2 		= 0.0;
	double g_complex_parameter3 		= 0.0;
	double g_complex_parameter4 		= 0.0;
	double g_complex_parameter5 		= 0.0;
	double g_complex_parameter6 		= 0.0;
	double g_complex_parameter7 		= 0.0;
	double g_complex_parameter8 		= 0.0;
	double g_complex_parameter9 		= 0.0;
	double g_complex_parameter10 		= 0.0;
	double g_complex_parameter11 		= 0.0;
	double g_complex_parameter12 		= 0.0;
	double g_complex_parameter13 		= 0.0;
	double g_complex_parameter14 		= 0.0;
	double g_complex_parameter15 		= 0.0;
	double g_complex_parameter16 		= 0.0;
	double g_complex_parameter17 		= 0.0;
	double g_complex_parameter18 		= 0.0;
	double g_complex_parameter19 		= 0.0;
	double g_complex_parameter20		= 0.0;
	
	double f_complex_parameter1		= 0.0;
	double f_complex_parameter2 		= 0.0;
	double f_complex_parameter3 		= 0.0;
	double f_complex_parameter4 		= 0.0;
	double f_complex_parameter5 		= 0.0;
	double f_complex_parameter6 		= 0.0;
	double f_complex_parameter7 		= 0.0;
	double f_complex_parameter8 		= 0.0;
	double f_complex_parameter9 		= 0.0;
	double f_complex_parameter10 		= 0.0;
	double f_complex_parameter11 		= 0.0;
	double f_complex_parameter12 		= 0.0;
	double f_complex_parameter13 		= 0.0;
	double f_complex_parameter14 		= 0.0;
	double f_complex_parameter15 		= 0.0;
	double f_complex_parameter16 		= 0.0;
	double f_complex_parameter17 		= 0.0;
	double f_complex_parameter18 		= 0.0;
	double f_complex_parameter19 		= 0.0;
	double f_complex_parameter20		= 0.0;

	char complex_criteria[4001]		= APL_NULL_STRING;
	char l_complex_criteria_data[4001]      = APL_NULL_STRING;

	char l_multiple_col_flag[3]		= APL_NULL_STRING;
	char l_multiple_col_header[4001]	= APL_NULL_STRING;
	char l_multiple_colspan_sep[2001]	= APL_NULL_STRING;

	int l_multiple_col_header_no		= 0;
	int l_multiple_colspan_sep_no		= 0;

	char **l_multiple_col_header_value	= NULL;
	char **l_multiple_colspan_sep_value	= NULL;

	char l_level_header[2000]		= APL_NULL_STRING;
	char l_level_colspan[500]		= APL_NULL_STRING;
	char l_level_column[500]		= APL_NULL_STRING;
	char l_level_col_span[10]		= APL_NULL_STRING;

	int l_level_header_no			= 0;
	int l_level_colspan_no			= 0;
	int int_aa				= 0;
	int int_bb				= 0;
	int int_a				= 0;
	int int_b				= 0;

	char **l_level_header_value		= NULL;
	char **l_level_colspan_value	= NULL;

	char l_zip_image_path[200]		= APL_NULL_STRING;	

	int l_format_col_flag		= 0;
	int l_format_col_no         = 0;
	char **l_format_col_val		= NULL;
	char l_format_col_value[10] = APL_NULL_STRING;
	char l_format_col_pos[500]	= APL_NULL_STRING;

	char l_record_count_query_final[8001]   = APL_NULL_STRING;
	char l_record_count_query[4001]   = APL_NULL_STRING;
	char l_record_count_query1[4001]   = APL_NULL_STRING;
	int l_record_count_flag = 0;
	int l_record_count = 0;
	int l_table_numbers = 0;
	int l_table_num = 0;

		/*Pasha Added for AMFI Enhancement Report Naming convention */
	char l_char_dd[3] = APL_NULL_STRING;
	char l_char_mm[3] = APL_NULL_STRING;
	char l_char_yy[3] = APL_NULL_STRING;
	
	char temp[20] = APL_NULL_STRING;


	strcpy(l_rept_id,p_rept_id);
	strcpy(l_rep_type,p_rep_type);
	strcpy(l_rep_name,p_rep_name);
	strcpy(l_param_str,p_param_str);
	strcpy(l_chr_param,p_chr_ptr_param);
	strcpy(l_client,l_param_str);
	strcpy(l_start_date,p_start_date);
	strcpy(l_compress_flag,p_compress_flag);
	strcpy(l_user,p_user);

	strcpy(l_rept_id,p_rept_id);
	strcpy(l_rep_type,p_rep_type);
	strcpy(l_rep_name,p_rep_name);
	strcpy(l_param_str,p_param_str);
	strcpy(l_chr_param,p_chr_ptr_param);
	strcpy(l_client,l_param_str);
	strcpy(l_start_date,p_start_date);
	strcpy(l_compress_flag,p_compress_flag);
	strcpy(l_user,p_user);
	strcpy(l_web_login_id,p_web_login_id);
	strcpy(l_web_rpt_id,p_web_rpt_id);
	strcpy(l_web_source_from,p_web_source_from);
	strcpy(l_web_report_dt,p_web_report_dt);
	strcpy(l_web_proc_id,p_web_proc_id);

	EXEC SQL BEGIN DECLARE SECTION;
		
	EXEC SQL VAR l_rept_id IS STRING;
	EXEC SQL VAR l_gen_query IS STRING;
	
	EXEC SQL VAR table_query IS STRING;
	EXEC SQL VAR l_table_query IS STRING;
	EXEC SQL VAR l_table_query1 IS STRING;
	EXEC SQL VAR l_table_query2 IS STRING;
	EXEC SQL VAR l_table_query3 IS STRING;
	EXEC SQL VAR l_table_query4 IS STRING;
	EXEC SQL VAR l_table_query5 IS STRING;
	
	EXEC SQL VAR l_criteria_query1 IS STRING;
	EXEC SQL VAR l_criteria_query2 IS STRING;
	EXEC SQL VAR l_criteria_query3 IS STRING;
	EXEC SQL VAR l_table_parameter IS STRING;
	EXEC SQL VAR l_general_param IS STRING;
	EXEC SQL VAR l_client IS STRING;
	EXEC SQL VAR l_sub_client IS STRING;
	EXEC SQL VAR l_start_date IS STRING;
	EXEC SQL VAR l_master_query IS STRING;
	EXEC SQL VAR l_group_parameter IS STRING;
	EXEC SQL VAR l_group_query IS STRING;
	EXEC SQL VAR l_group_desc IS STRING;

	EXEC SQL VAR l_grand_round1 IS STRING;
	EXEC SQL VAR l_grand_round1 IS STRING;
	EXEC SQL VAR l_grand_round1 IS STRING;

	EXEC SQL VAR g_setting_flag IS STRING;
	EXEC SQL VAR l_grand_display IS STRING;

	EXEC SQL VAR complex_criteria_query IS STRING;
	EXEC SQL VAR complex_criteria_query1 IS STRING;
	EXEC SQL VAR l_header_query IS STRING;
	EXEC SQL VAR l_header_query1 IS STRING;
	EXEC SQL VAR l_footer_query IS STRING;
	EXEC SQL VAR l_footer_query1 IS STRING;
	EXEC SQL VAR l_complex_criteria_data IS STRING;
	EXEC SQL VAR complex_criteria IS STRING;
	EXEC SQL VAR l_web_login_id IS STRING;
	EXEC SQL VAR l_web_rpt_id IS STRING;
	EXEC SQL VAR l_web_source_from IS STRING;
	EXEC SQL VAR l_web_report_dt IS STRING;
	EXEC SQL VAR l_web_proc_id IS STRING;
	EXEC SQL END DECLARE SECTION;
	
	strcpy(l_init_path,getenv("INTL_ROOT_PATH"));
	strcat(l_init_path,"intl_sun.cfg");
	
	if((l_init_file = fopen(l_init_path,"r")) == (FILE *)NULL)
	{
		fprintf(fl_userlog,"Failed to Open file for PATH :|%s|\n",l_init_path);
		printf("Failed to Open file for PATH :|%s|\n",l_init_path);
		APL_GOBACK_FAIL
	}

	fprintf(fl_userlog,"COMPRESS FLAG :|%s|\n",l_compress_flag);
	
	if(strlen(l_compress_flag) > 0 && !strcmp(l_compress_flag,"Y"))
	{
		if (APL_FAILURE == CO_ReadToken(l_init_file,"INTL_TEMP_PATH",l_report_path,l_debug_info_ptr))
		{
			fprintf(fl_userlog,"Error : INTL_TEMP_PATH not set in intl_sun.cfg File \n");
			printf("Error : INTL_TEMP_PATH not set in intl_sun.cfg File \n");
			APL_GOBACK_FAIL
		}
	}
	else
	{
		if (APL_FAILURE == CO_ReadToken(l_init_file,"INTL_REP_PATH",l_report_path,l_debug_info_ptr))
		{
			fprintf(fl_userlog,"Error : INTL_REP_PATH not set in intl_sun.cfg File \n");
			printf("Error : INTL_REP_PATH not set in intl_sun.cfg File \n");
			APL_GOBACK_FAIL
		}
	}
		
	l_int_no_field = 0;

	fprintf(fl_userlog,"l_chr_param:|%s|\n",l_chr_param);
	
	if (CO_SplitStr(l_chr_param,PARAMSEP,&l_int_no_field,&l_field_val) == APL_FAILURE)
	{
		CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_chr_param);
		APL_GOBACK_FAIL
	}

	fprintf(fl_userlog,"l_int_no_field:|%d|\n",l_int_no_field);
		
	if(l_int_no_field > 0)
	{
		for(int_no=0;int_no<l_int_no_field;int_no++)
		{
			if(int_no == 1)
			strcpy(l_param2,l_field_val[int_no]);
			else if(int_no == 2)
			strcpy(l_param3,l_field_val[int_no]);
			else if(int_no == 3)
			strcpy(l_param4,l_field_val[int_no]);
			else if(int_no == 4)
			strcpy(l_param5,l_field_val[int_no]);
			else if(int_no == 5)
			strcpy(l_param6,l_field_val[int_no]);
		}
	}
	
		/*Pasha Added for AMFI Enhancement Report Naming convention */

	l_int_no_field = 0;

			Alert("l_rep_name |%s|\n",l_rep_name);


	if (CO_SplitStr(l_rep_name,'@',&l_int_no_field,&l_field_val) == APL_FAILURE)
	{
		CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_chr_param);
		APL_GOBACK_FAIL
	}


	fprintf(fl_userlog,"l_int_no_field:|%d|\n",l_int_no_field);
		
	if(l_int_no_field > 0)
	{
				EXEC SQL select to_char(sys_date,'dd'), to_char(sys_date,'mm') ,to_char(sys_date,'yy')
					INTO :l_char_dd, :l_char_mm, :l_char_yy
					from  pro_sys_date;

			Alert(" l_client |%s|\n",l_client);
			Alert(" l_char_dd |%s|\n",l_char_dd);
			Alert(" l_char_mm |%s|\n",l_char_mm);
			Alert(" l_char_yy |%s|\n",l_char_yy);
	
		for(int_no=1;int_no<l_int_no_field;int_no++)
		{
				memset(temp,APL_NULL_CHAR,20);	

			strcpy(temp,l_field_val[int_no]);
			
			if(!strcmp(temp,"DD"))
			{
				if(strlen(l_report_name) > 0)
					strcat(l_report_name,l_char_dd);
				else
					strcpy(l_report_name,l_char_dd);
			}
			else if(!strcmp(temp, "MM"))
			{
				if(strlen(l_report_name) > 0)
					strcat(l_report_name,l_char_mm);
				else
					strcpy(l_report_name,l_char_mm);
			}
			else if(!strcmp(temp, "YY"))
			{
				if(strlen(l_report_name) > 0)
					strcat(l_report_name,l_char_yy);
				else
					strcpy(l_report_name,l_char_yy);
			}
			else if(!strcmp(temp, "PARAM"))
			{
				if(strlen(l_report_name) > 0)
					strcat(l_report_name,l_client);
				else
					strcpy(l_report_name,l_client);
			}
			else 
			{
				if(strlen(l_report_name) > 0)
					strcat(l_report_name,temp);
				else
					strcpy(l_report_name,temp);
			}

		}
		strcat(l_report_name,".CSV");

	Alert("Bagee - l_report_name:|%s|\n",l_report_name);

	}

	else
	{

		EXEC SQL SELECT TO_CHAR(SYSDATE,'DD_MON_YYYY')||CHR(95)||TO_CHAR(SYSDATE,'HH24_MI_SS')		
					INTO :l_time_stamp
					FROM DUAL;

	sprintf(l_report_name,"%s_%s_%s.csv",l_client,l_rept_id,l_time_stamp);
	}

	sprintf(l_report_path, "%s%s",l_report_path,l_report_name);

	if(strlen(l_compress_flag) > 0 && !strcmp(l_compress_flag,"Y"))
	{
		EXEC SQL INSERT INTO REPORT_LIST VALUES (:g_dynamic_seq,:l_report_name);

		IS_ANY_ORA_ERROR
	}

		/* End of Change */

	fprintf(fl_userlog,"REPORT FILE PATH 6:|%s|\n",l_report_path);
//fflush(fl_userlog);
	if((l_report_CSV2 = fopen(l_report_path,"w")) == (FILE *) NULL)
	{
		CO_InsertErr(l_debug_info_ptr,"FILE NOT FOUND",APL_NULL_STRING,
						APL_NULL_STRING,APL_NULL_STRING,	
						 __LINE__,__FILE__);
		fprintf(fl_userlog,"Error : File not Found For Report PATH :|%s|\n",l_report_path);
		APL_GOBACK_FAIL
	}

	/**** For Entry in PRO_COMMON_REPORT ********************************************************/
	
	//fprintf(fl_userlog,"LENGTH OF l_compress_flag :|%d|\n",strlen(l_compress_flag)); Changes done for AIX Migration
	fprintf(fl_userlog,"LENGTH OF l_compress_flag :|%d|\n",(int)strlen(l_compress_flag));

	if(strlen(l_compress_flag) == 0 || !strcmp(l_compress_flag,"N"))
	{
	    strcpy(l_intl_rept_struct_ha.report_name,l_report_name);
	    strcat(l_intl_rept_struct_ha.report_name,"\0");
	    strcpy(l_intl_rept_struct_ha.report_desc,APL_REP_DESC);
	    strcat(l_intl_rept_struct_ha.report_desc,"\0");
	    strcpy(l_intl_rept_struct_ha.report_date,l_start_date);
	    l_intl_rept_struct_ha.report_width = 200 ;
	    strcpy(l_intl_rept_struct_ha.task_desc,"DynamicReport");
	    strcpy(l_intl_rept_struct_ha.fe_be_ind,"B");
	    strcpy(l_intl_rept_struct_ha.usr,l_user);

		 fprintf(fl_userlog,"Entering CO_Proc_RptIns6\n");
		 //fflush(fl_userlog);
		 fprintf(fl_userlog,"report_name:|%s|\n",l_intl_rept_struct_ha.report_name);
		 fprintf(fl_userlog,"report_desc:|%s|\n",l_intl_rept_struct_ha.report_desc);
		 fprintf(fl_userlog,"report_date:|%s|\n",l_intl_rept_struct_ha.report_date);
		 //fprintf(fl_userlog,"report_width:|%ld|\n",l_intl_rept_struct_ha.report_width); Changes done for AIX Migration
		 fprintf(fl_userlog,"report_width:|%d|\n",l_intl_rept_struct_ha.report_width);
		 fprintf(fl_userlog,"task_desc:|%s|\n",l_intl_rept_struct_ha.task_desc);
		 fprintf(fl_userlog,"fe_be_ind:|%s|\n",l_intl_rept_struct_ha.fe_be_ind);
		 fprintf(fl_userlog,"usr:|%s|\n",l_intl_rept_struct_ha.usr);
	   //fflush(fl_userlog);
	    if(APL_FAILURE == CO_Proc_DBRptIns(&l_intl_rept_struct_ha,l_debug_info_ptr))/*'&' Added For AIX Migration*/
	    {
			fprintf(fl_userlog,"Error : Failure From CO_Proc_RptIns\n");
		  	APL_GOBACK_FAIL
	    }
	}
	
	/*********************************************************************************************/

	fprintf(fl_userlog,"REPORT ID:|%s|\n",l_rept_id);
	
	EXEC SQL SELECT * INTO :h_report_main_struct
				FROM REPORT_MAIN
				WHERE REPORT_ID=:l_rept_id;	

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Failed to Access REPORT_MAIN Table --- ORA ERROR :|%d|\n",sqlca.sqlcode);
	}


	/******* Page Header **************************************************************************/
	
	strcpy(l_report_type,h_report_main_struct.report_type);
	strcpy(header_query,h_report_main_struct.header_query);

	
	if(strlen(h_report_main_struct.page_header) > 0 )
	{
		fprintf(l_report_CSV2,"%s\n",h_report_main_struct.page_header);
	}
	
	l_page_header = h_report_main_struct.page_hdr_brk;	
	while(l_page_header > 0 )
	{
		fprintf(l_report_CSV2,"\n");
				
		l_page_header -- ;
	}
		
	EXEC SQL SELECT MAX(NO_OF_COLUMNS)-2 INTO :l_no_of_cols FROM REPORT_DETAILS WHERE REPORT_ID=:l_rept_id;

	/*while(l_no_of_cols > 0) 
	{
		fprintf(l_report_CSV2,",");
		l_no_of_cols--;
	}*/


	if(strcmp(l_report_type,"L"))
	{
		fprintf(l_report_CSV2,"Date : %s\n",l_start_date);
	}
	
	fprintf(l_report_CSV2,"\n");
	

	/************** For Master Account, display all sub Accounts records  ***************/
	
	if(strlen(h_report_main_struct.mst_sub_query) > 0)
	{
		strcpy(l_master_query,h_report_main_struct.mst_sub_query);
	}
	else
	{
		strcat(l_master_query,"SELECT '");
		strcat(l_master_query,l_client);
		strcat(l_master_query,"' FROM DUAL");
	}

	EXEC SQL SELECT REPLACE((:l_master_query),'@PARAM1',:l_client) INTO :l_master_query FROM DUAL;
	
	if(sqlca.sqlcode < 0)
	{
		fprintf(fl_userlog,"Error : Critical Error in Master Sub Query ORA ERROR :|%d|\n",sqlca.sqlcode);
		APL_GOBACK_FAIL
	}

	/*******************************************************************************************/

	fprintf(fl_userlog,"MASTER SUB QUERY 3:|%s|\n",l_master_query);
	//fflush(fl_userlog);
	EXEC SQL PREPARE MAST_CSV_QUERY FROM :l_master_query;
	EXEC SQL DECLARE csvsubclient CURSOR FOR MAST_CSV_QUERY;
	EXEC SQL OPEN csvsubclient;

	if(sqlca.sqlcode < 0)
   	{
     		fprintf(fl_userlog,"Error : Critical Error Occured in Master Sub Query ORA ERROR :|%d|\n",sqlca.sqlcode);
     		APL_GOBACK_FAIL
   	}
	
	l_remove_count=0;
	l_client_fetch_count=0;
	
   no_of_table_count=h_report_main_struct.no_of_tables;
	fprintf(fl_userlog,"no_of_table_count :|%d|\n",no_of_table_count);
	printf("no_of_table_count :|%d|\n",no_of_table_count);
	//fflush(fl_userlog);
	for(;;)
	{
		EXEC SQL FETCH csvsubclient INTO :l_sub_client;	
	
		if(sqlca.sqlcode == 1403)
		{
			fprintf(fl_userlog,"l_client_fetch_count :|%d|\n",l_client_fetch_count);
			fprintf(fl_userlog,"l_remove_count :|%d|\n",l_remove_count);
	      fprintf(fl_userlog,"no_of_table_count :|%d|\n",no_of_table_count);

         if((l_client_fetch_count*no_of_table_count) == l_remove_count)
			{
				strcpy(l_remove_file_path,"rm -f ");
				strcat(l_remove_file_path,l_report_path);
				l_remove_flag = 1;
			}
			break;
		}
	
		if(sqlca.sqlcode < 0)
   		{
			fprintf(fl_userlog,"Error : Critical Error Occured in Master Sub Query ORA ERROR :|%d|\n",sqlca.sqlcode);
			APL_GOBACK_FAIL
   		}

		/********************* Record Count Query Part *****************************/
		
		EXEC SQL SELECT COUNT(TABLE_ID) INTO :l_table_numbers 
				 FROM REPORT_DETAILS
				 WHERE REPORT_ID=:l_rept_id;
		
		fprintf(fl_userlog,"AFTER COUNT(TABLE_ID) -- ORA Error 888:|%d|\n",sqlca.sqlcode);
		//fflush(fl_userlog);

		fprintf(fl_userlog,"l_table_numbers 888:|%d|\n",l_table_numbers);
		//fflush(fl_userlog);

		l_table_num = 1 ;

		l_record_count_flag = 0;

		l_record_count = 0;

		while(l_table_num <= l_table_numbers)
		{
			EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									RECORD_COUNT_QUERY,'@PARAM1',:l_sub_client),
													   '@PARAM2',:l_param2),
													   '@PARAM3',:l_param3),
													   '@PARAM4',:l_param4),
													   '@PARAM5',:l_param5),
													   '@PARAM6',:l_param6),
							REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									RECORD_COUNT_QUERY1,'@PARAM1',:l_sub_client),
													   '@PARAM2',:l_param2),
													   '@PARAM3',:l_param3),
													   '@PARAM4',:l_param4),
													   '@PARAM5',:l_param5),
													   '@PARAM6',:l_param6)
					  INTO :l_record_count_query,:l_record_count_query1
					  FROM REPORT_DETAILS 
					  WHERE REPORT_ID=:l_rept_id 
					  AND TABLE_ID = :l_table_num;

			fprintf(fl_userlog,"AFTER RECORD_COUNT_QUERY Select -- ORA Error :|%d|\n",sqlca.sqlcode);


			strcpy(l_record_count_query_final,l_record_count_query);
			strcat(l_record_count_query_final,l_record_count_query1);

			fprintf(fl_userlog,"l_record_count_query_final :|%s|\n",l_record_count_query_final);

			if(strlen(l_record_count_query_final) > 0)
			{

				EXEC SQL PREPARE CSV2_RECORD_COUNT FROM :l_record_count_query_final;

				EXEC SQL DECLARE csv2_record_count_curr CURSOR FOR CSV2_RECORD_COUNT;

				EXEC SQL OPEN  csv2_record_count_curr;

				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Error : Failed To OPEN csv2_record_count_curr CURSOR -- ORA Error :|%d|\n",sqlca.sqlcode);
					l_record_count_flag = 0;
				}

				EXEC SQL FETCH csv2_record_count_curr INTO :l_record_count;

				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Error : Failed To FETCH csv2_record_count_curr CURSOR -- ORA Error :|%d|\n",sqlca.sqlcode);
					l_record_count_flag = 0;
				}

				EXEC SQL CLOSE csv2_record_count_curr;
			
			}

			fprintf(fl_userlog,"l_record_count :|%d|\n",l_record_count);
			if(l_record_count > 0)
				l_record_count_flag = 1;

			l_table_num ++;

		}

 
	fprintf(fl_userlog,"RECORD COUNT FLAG :|%d|\n",l_record_count_flag);
	printf("RECORD COUNT FLAG :|%d|\n",l_record_count_flag);
//fflush(fl_userlog);
   /***********************************************************************************/

	if((l_record_count_flag == 1)||(strlen(l_record_count_query_final) == 0))
	{

	/******* Stored procedure for REPORT MAIN ******************************************/
	
	strcpy(l_param1,l_sub_client);	
	
	printf("PARAMETER 1 ----- :|%s|\n",l_param1);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"l_rept_id:|%s|\n",l_rept_id);
	fprintf(fl_userlog,"l_param1:|%s|\t l_param2:|%s|\n",l_param1,l_param2);
	fprintf(fl_userlog,"l_param3:|%s|\t l_param4:|%s|\n",l_param3,l_param4);
	fprintf(fl_userlog,"l_param5:|%s|\t l_param6:|%s|\n",l_param5,l_param6);
	
	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_MAIN for Report ID 4:|%s||%s|\n",l_rept_id,l_param1);		
	EXEC SQL CALL SP_REPORT_MAIN(:l_rept_id,:l_param1,:l_param2,:l_param3,:l_param4, 
					:l_param5,:l_param6,:l_gen_query,:l_error_desc);
	
	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_MAIN ERR DESC :|%s|\n",l_error_desc);
	}
	
	
	fprintf(fl_userlog,"GENERAL QUERY 7:|%s|\n",l_gen_query);
//fflush(fl_userlog);
	if(strlen(l_gen_query) > 0)
	{
		
	EXEC SQL PREPARE CSV_GEN FROM :l_gen_query;
	EXEC SQL DECLARE csvgenquerycurr CURSOR FOR CSV_GEN;
	EXEC SQL OPEN csvgenquerycurr;
	
	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Failed to OPEN CSVgenquerycurr CURSOR ");
	}

	for(;;)
	{
		EXEC SQL FETCH csvgenquerycurr
			INTO :l_general_param;

		if(sqlca.sqlcode == 1403)
		break;
		
		 if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		 {
		    fprintf(fl_userlog,"Error : GENERAL QUERY Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
		    break;
		 }
		
		fprintf(fl_userlog,"l_general_param 6:|%s|\n",l_general_param);

		strcpy(l_general_parameter,l_general_param);
	
		/**** Split General Query and fetch the value in seperate parameter *******************/
		
		if (CO_SplitStr(l_general_parameter,CAPSEP,&l_param_num,&l_param_val) == APL_FAILURE)
		{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_general_parameter);
			 	APL_GOBACK_FAIL
		}

	
		fprintf(fl_userlog,"l_param_num:|%d|\n",l_param_num);	
		
		for(k=0;k<l_param_num;k++)
		{
			strcpy(l_param,l_param_val[k]);

			/********* Before Title of report ***************************************************/
			
			if(k == 0)
			{
				if(strlen(h_report_main_struct.before_title) > 0)
				{
					fprintf(l_report_CSV2,"%s,%s\n",h_report_main_struct.before_title,l_param);
				}
	
				l_before_title = h_report_main_struct.before_title_brk;
				while(l_before_title > 0)
				{
					fprintf(l_report_CSV2,"\n");
					l_before_title --;
				}
			}
			else if(k == 1)
			{
				if(strlen(h_report_main_struct.before_title1) > 0)
				{
					fprintf(l_report_CSV2,"%s,%s\n",h_report_main_struct.before_title1,l_param);
				}
	
				l_before_title1 = h_report_main_struct.before_title1_brk;
				while(l_before_title1 > 0)
				{
					fprintf(l_report_CSV2,"\n");
					l_before_title1 --;
				}
			}
			else if(k == 2)
			{
				if(strlen(h_report_main_struct.before_title2) > 0)
				{
					fprintf(l_report_CSV2,"%s,%s\n",h_report_main_struct.before_title2,l_param);
				}
	
				l_before_title2 = h_report_main_struct.before_title2_brk;
				while(l_before_title2 > 0)
				{
					fprintf(l_report_CSV2,"\n");
					l_before_title2 --;
				}
			}
			else if(k == 3)
			{
				if(strlen(h_report_main_struct.before_title3) > 0)
				{
					fprintf(l_report_CSV2,"%s,%s\n",h_report_main_struct.before_title3,l_param);
				}
	
				l_before_title3 = h_report_main_struct.before_title3_brk;
				while(l_before_title3 > 0)
				{
					fprintf(l_report_CSV2,"\n");
					l_before_title3 --;
				}
			}	

		}

	}
	EXEC SQL CLOSE csvgenquerycurr;

	}

	/******* Dynamic Header Display ************************************************/

	fprintf(fl_userlog,"strlen(header_query) :|%d|\n",strlen(header_query));

	if(strlen(header_query) > 0)
	{

	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_HEADER :|%s||%s|\n",l_rept_id,l_param1);		
	printf("Calling Stored Procedure SP_REPORT_HEADER :|%s||%s|\n",l_rept_id,l_param1);		
	
	EXEC SQL CALL SP_REPORT_HEADER(:l_rept_id,:l_param1,:l_param2,
				:l_param3,:l_param4, :l_param5,
				:l_param6,:l_header_query,:l_header_query1,:l_error_desc);

	strcat(l_header_query,l_header_query1);

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_HEADER ERR DESC :|%s|\n",l_error_desc);
	}

	fprintf(fl_userlog,"HEADER QUERY :|%s|\n",l_header_query);

	EXEC SQL PREPARE CSV2_HEADER_CURR FROM :l_header_query;

	EXEC SQL DECLARE csv2_header_curr CURSOR FOR CSV2_HEADER_CURR;
	
	fprintf(fl_userlog,"After DECLARE csv2_header_curr Ora Error :|%d|\n",sqlca.sqlcode);

	EXEC SQL OPEN csv2_header_curr;

	EXEC SQL FETCH csv2_header_curr INTO :l_header_query_value;

	fprintf(fl_userlog,"After FETCH csv2_header_curr Ora Error :|%d|\n",sqlca.sqlcode);

	EXEC SQL CLOSE csv2_header_curr;

	fprintf(fl_userlog,"l_header_query_value :|%s|\n",l_header_query_value);
	
	if (CO_SplitStr(l_header_query_value,CAPSEP,&l_header_num,&l_header_val) == APL_FAILURE)
	{
		CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_header_query_value);
		APL_GOBACK_FAIL
	}

	fprintf(fl_userlog,"l_header_num :|%d|\n",l_header_num);
	if(l_header_num > 0)
	{
		for(i=0;i<l_header_num;i++)
		{
			if(i == 0)
			strcpy(l_header1,l_header_val[i]);
			else if(i == 1)
			strcpy(l_header2,l_header_val[i]);
			else if(i == 2)
			strcpy(l_header3,l_header_val[i]);
			else if(i == 3)
			strcpy(l_header4,l_header_val[i]);
			else if(i == 4)
			strcpy(l_header5,l_header_val[i]);
			else if(i == 5)
			strcpy(l_header6,l_header_val[i]);
			else if(i == 6)
			strcpy(l_header7,l_header_val[i]);
			else if(i == 7)
			strcpy(l_header8,l_header_val[i]);
			else if(i == 8)
			strcpy(l_header9,l_header_val[i]);
			else if(i == 9)
			strcpy(l_header10,l_header_val[i]);
			else if(i == 10)
			strcpy(l_header11,l_header_val[i]);
			else if(i == 11)
			strcpy(l_header12,l_header_val[i]);
			else if(i == 12)
			strcpy(l_header13,l_header_val[i]);
			else if(i == 13)
			strcpy(l_header14,l_header_val[i]);
			else if(i == 14)
			strcpy(l_header15,l_header_val[i]);
		}
	}

	/****** Stored Procedure : SP_REPORT_HEADER_DATA ***********************************/

	fprintf(fl_userlog,"l_header1 :|%s|\t l_header2 :|%s|\n",l_header1,l_header2);
	fprintf(fl_userlog,"l_header3 :|%s|\t l_header4 :|%s|\n",l_header3,l_header4);
	fprintf(fl_userlog,"l_header5 :|%s|\t l_header6 :|%s|\n",l_header5,l_header6);
	fprintf(fl_userlog,"l_header7 :|%s|\t l_header8 :|%s|\n",l_header7,l_header8);
	fprintf(fl_userlog,"l_header9 :|%s|\t l_header10 :|%s|\n",l_header9,l_header10);
	fprintf(fl_userlog,"l_header11 :|%s|\t l_header12 :|%s|\n",l_header11,l_header12);
	fprintf(fl_userlog,"l_header13 :|%s|\t l_header14 :|%s|\n",l_header13,l_header14);
	fprintf(fl_userlog,"l_header15 :|%s|\t\n",l_header15);

	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_HEADER_DATA :|%s|\n",l_rept_id);		
	printf("Calling Stored Procedure SP_REPORT_HEADER_DATA :|%s|\n",l_rept_id);		
	//fflush(fl_userlog);
	EXEC SQL CALL SP_REPORT_HEADER_DATA(:l_rept_id,:l_header1,
					    :l_header2,:l_header3,
					    :l_header4,:l_header5,
					    :l_header6,:l_header7,
					    :l_header8,:l_header9,
					    :l_header10,:l_header11,
					    :l_header12,:l_header13,
					    :l_header14,:l_header15,
					    :l_header_data,:l_error_desc); 

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_HEADER_DATA ERR DESC :|%s|\n",l_error_desc);
	}

	fprintf(fl_userlog,"HEADER DATA :|%s|\n",l_header_data);

	/************ Dynamic Formating Procedure ********************************************/
	
	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
	printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
	
	EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_header_data,:l_error_desc); 

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
	}

	fprintf(fl_userlog,"HEADER DATA After Formatting -- :|%s|\n",l_header_data);

	/*************************************************************************************/

	fprintf(fl_userlog,"strlen(l_header_data) :|%d|\n",strlen(l_header_data));
	
	if(strlen(l_header_data) > 0)
	{
		fprintf(fl_userlog,"Displaying Header Data ----- \n");
		fprintf(l_report_CSV2,"%s\n",l_header_data);
	}

	l_header_brk = h_report_main_struct.header_brk;
	while(l_header_brk > 0)
	{
		fprintf(l_report_CSV2,"\n");
		l_header_brk --;
		g_line_count++;
	}

	/**********************  End Of Dynamic Header Display   ***************************/

	}


	
	/***** Report Title *************************************************************************/

	if(strlen(h_report_main_struct.report_title) > 0)	
	{
 		fprintf(l_report_CSV2,"%s\n",h_report_main_struct.report_title);	 
	}
	
	l_report_title = h_report_main_struct.report_title_brk;	
	while(l_report_title > 0)
	{
		fprintf(l_report_CSV2,"\n");
		l_report_title --;
	}
	

	/******** After report title ****************************************************************/
	
	if(strlen(h_report_main_struct.after_title) > 0)
	{
		fprintf(l_report_CSV2,"%s\n",h_report_main_struct.after_title);
	}
	
	l_after_title = h_report_main_struct.after_title_brk;
	while(l_after_title > 0)
	{
		fprintf(l_report_CSV2,"\n");
		l_after_title --;
	}
	

	l_table_id = 1;
	
	fprintf(fl_userlog,"NO OF TABLES :|%d|\n",h_report_main_struct.no_of_tables);
	printf("NO OF TABLES :|%d|\n",h_report_main_struct.no_of_tables);
	//fflush(fl_userlog);

	if(!strcmp(h_report_main_struct.report_type,"G"))/*added by siva.ganapathi for Enh. Log 121 on 2/20/2009 -- started*/
	{
		
		
			EXEC SQL SELECT * INTO :h_report_details_struct
							FROM REPORT_DETAILS 
							WHERE REPORT_ID=:l_rept_id
							AND TABLE_ID=:l_table_id;
			
		strcpy(l_group_query,h_report_details_struct.group_query);
		
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM1',:l_param1) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM2',:l_param2) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM3',:l_param3) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM4',:l_param4) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM5',:l_param5) INTO :l_group_query FROM DUAL;
		EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM6',:l_param6) INTO :l_group_query FROM DUAL;
					
		fprintf(fl_userlog,"GROUP QUERY :|%s|\n",l_group_query);
		
		EXEC SQL PREPARE CSV2_GROUP FROM :l_group_query;
		EXEC SQL DECLARE csv2_group_g CURSOR FOR CSV2_GROUP;
		EXEC SQL OPEN csv2_group_g;

		if(sqlca.sqlcode < 0)
		{
				fprintf(fl_userlog,"Error : Cursor Open xls1_group ORA ERROR :|%d|\n",sqlca.sqlcode);
		}

		for(;;)
		{
			
			EXEC SQL FETCH csv2_group_g INTO :l_group_parameter;

			if((sqlca.sqlcode == 1403)||(l_group_break_flag == 1))
			break;

			for(l_table_id=1; l_table_id <= h_report_main_struct.no_of_tables; l_table_id++)
			{
				g_complex_parameter1 = 0.0;
				g_complex_parameter2 = 0.0;
				g_complex_parameter3 = 0.0;
				g_complex_parameter4 = 0.0;
				g_complex_parameter5 = 0.0;
				g_complex_parameter6 = 0.0;
				g_complex_parameter7 = 0.0;
				g_complex_parameter8 = 0.0;
				g_complex_parameter9 = 0.0;
				g_complex_parameter10 = 0.0;
				g_complex_parameter11 = 0.0;
				g_complex_parameter12 = 0.0;
				g_complex_parameter13 = 0.0;
				g_complex_parameter14 = 0.0;
				g_complex_parameter15 = 0.0;
				g_complex_parameter16 = 0.0;
				g_complex_parameter17 = 0.0;
				g_complex_parameter18 = 0.0;
				g_complex_parameter19 = 0.0;
				g_complex_parameter20 = 0.0;

				fprintf(fl_userlog,"l_rept_id:|%s|l_table_id:|%d|\n",l_rept_id,l_table_id);
				
				/******* Fetch the REPORT DETAILS for the perticular report ID and table ID ******************/
				
				
					EXEC SQL SELECT * INTO :h_report_details_struct
							FROM REPORT_DETAILS 
							WHERE REPORT_ID=:l_rept_id
							AND TABLE_ID=:l_table_id;
				
				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Failed to Access REPORT_DETAILS --- ORA ERROR :|%d|\n",sqlca.sqlcode);
				}
				
				/***** Table header *********************************************************************/

				fprintf(fl_userlog,"h_report_details_struct.table_hdr:|%s|\n",h_report_details_struct.table_hdr);
					
					if(strlen(h_report_details_struct.table_hdr) > 0)
					{
						fprintf(l_report_CSV2,"%s\n",h_report_details_struct.table_hdr);
					}

					l_table_hdr = h_report_details_struct.table_hdr_brk;
					while(l_table_hdr > 0)
					{
						fprintf(l_report_CSV2,"\n");
						l_table_hdr --;
					}
					

		if(l_table_id == 1)
		{		
							
						fprintf(fl_userlog,"table id is:|%d|\n",l_table_id);

						fprintf(fl_userlog,"h_report_details_struct.group_desc:|%s|\n",h_report_details_struct.group_desc);
						fprintf(fl_userlog,"h_report_details_struct.group_pos:|%s|\n",h_report_details_struct.group_pos);
					
						strcpy(l_group_pos,h_report_details_struct.group_pos);

						strcpy(l_group_desc,h_report_details_struct.group_desc);

						
						/********* Split Group Parameter ************************************/
						
							fprintf(fl_userlog,"l_group_pos:|%s|\n",l_group_pos);
							
							if(CO_SplitStr(l_group_pos,COMASEP,&l_group_pos_no,&l_group_pos_value) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_pos);
								APL_GOBACK_FAIL
							}
							
							fprintf(fl_userlog,"l_group_parameter:|%s|\n",l_group_parameter);
							
							if(CO_SplitStr(l_group_parameter,CAPSEP,&l_group_parameter_no,&l_group_parameter_value) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_parameter);
								APL_GOBACK_FAIL
							}

							fprintf(fl_userlog,"l_group_pos_no:|%d|l_group_parameter_no:|%d|\n",l_group_pos_no,l_group_parameter_no);
							
							if((l_group_pos_no > 0) && (l_group_parameter_no > 0)
								&& (l_group_pos_no == l_group_parameter_no))
							{	
								l_group_break_flag=0;
							
								for(i=0;i<l_group_pos_no;i++)
								{
									if(!strcmp(l_group_pos_value[i],"2"))
									{
										fprintf(fl_userlog,"l_param2:|%s|l_prev_param2:|%s|\n",l_param2,l_prev_param2);
										
										if(!strcmp(l_param2,l_prev_param2))
										{
											strcpy(l_param2,l_group_parameter_value[i]);
											strcpy(l_prev_param2,l_param2);
										}
										else
											l_group_break_flag=1;
									}
									else if(!strcmp(l_group_pos_value[i],"3"))
									{
										fprintf(fl_userlog,"l_param3:|%s|l_prev_param3:|%s|\n",l_param3,l_prev_param3);
										
										if(!strcmp(l_param3,l_prev_param3))
										{
											strcpy(l_param3,l_group_parameter_value[i]);
											strcpy(l_prev_param3,l_param3);
										}
										else
											l_group_break_flag=1;
									}
									else if(!strcmp(l_group_pos_value[i],"4"))
									{
										fprintf(fl_userlog,"l_param4:|%s|l_prev_param4:|%s|\n",l_param4,l_prev_param4);
										
										if(!strcmp(l_param4,l_prev_param4))
										{
											strcpy(l_param4,l_group_parameter_value[i]);
											strcpy(l_prev_param4,l_param4);
										}
										else
											l_group_break_flag=1;
									}
									else if(!strcmp(l_group_pos_value[i],"5"))
									{
										fprintf(fl_userlog,"l_param5:|%s|l_prev_param5:|%s|\n",l_param5,l_prev_param5);
										
										if(!strcmp(l_param5,l_prev_param5))
										{
											strcpy(l_param5,l_group_parameter_value[i]);
											strcpy(l_prev_param5,l_param5);
										}
										else
											l_group_break_flag=1;
									}
									else if(!strcmp(l_group_pos_value[i],"6"))
									{
										fprintf(fl_userlog,"l_param6:|%s|l_prev_param6:|%s|\n",l_param6,l_prev_param6);
										
										if(!strcmp(l_param6,l_prev_param6))
										{
											strcpy(l_param6,l_group_parameter_value[i]);
											strcpy(l_prev_param6,l_param6);
										}
										else
											l_group_break_flag=1;
									}
								}
							}
							else
							{
								fprintf(fl_userlog,"Error: Mismatch in Group Parameters :|%d||%d|",l_group_pos_no,l_group_parameter_no);
								break;
							}
							

					/****************************************************************************/

							fprintf(fl_userlog,"l_param1:|%s|\n",l_param1);
							fprintf(fl_userlog,"l_param2:|%s|\n",l_param2);
							fprintf(fl_userlog,"l_param3:|%s|\n",l_param3);
							fprintf(fl_userlog,"l_param4:|%s|\n",l_param4);
							fprintf(fl_userlog,"l_param5:|%s|\n",l_param5);
							fprintf(fl_userlog,"l_param6:|%s|\n",l_param6);

						/**** Stored procedure for REPORT DETAILS GROUPING *************************/

						fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID 34:|%s|\n",l_rept_id);
						EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
								:l_param2,:l_param3,:l_param4,
								:l_param5,:l_param6,
								:l_table_query,:l_table_query1,:l_table_query2,
								:l_table_query3,:l_table_query4,:l_table_query5,
								:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
								:l_group_desc,:l_error_desc);

						strcpy(table_query,l_table_query);
						strcat(table_query," ");
						
						if(strlen(l_table_query1) > 0)
						{
							strcat(table_query,l_table_query1);
							strcat(table_query," ");
						}
						if(strlen(l_table_query2) > 0)
						{
							strcat(table_query,l_table_query2);
							strcat(table_query," ");
						}
						if(strlen(l_table_query3) > 0)
						{
							strcat(table_query,l_table_query3);
							strcat(table_query," ");
						}
						if(strlen(l_table_query4) > 0)
						{
							strcat(table_query,l_table_query4);
							strcat(table_query," ");
						}
						if(strlen(l_table_query5) > 0)
						{
							strcat(table_query,l_table_query5);
							strcat(table_query," ");
						}
						
						strcat(table_query,APL_NULL_STRING);

							
						fprintf(fl_userlog,"After Stored Procedure SP_REPORT_DETAIL ORA ERROR 13:|%d|\n",sqlca.sqlcode);
						
						if(sqlca.sqlcode < 0)
						{
							fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
						}
						
						//fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
						fprintf(fl_userlog,"l_criteria_query1:|%s|\n",l_criteria_query1);
						fprintf(fl_userlog,"l_criteria_query2:|%s|\n",l_criteria_query2);
						fprintf(fl_userlog,"l_criteria_query3:|%s|\n",l_criteria_query3);
						fprintf(fl_userlog,"l_group_desc:|%s|\n",l_group_desc);

						/********* Group Description ****************************************/
						
						if(strlen(l_group_desc) > 0)
						{
							fprintf(l_report_CSV2,"%s\n\n",l_group_desc);
						}


						/****** Before table ***********************************************/
						
						if(strlen(h_report_details_struct.before_table) > 0)
						{	
							fprintf(l_report_CSV2,"%s\n",h_report_details_struct.before_table);
						}
						
						l_before_table = h_report_details_struct.before_table_brk;
						while(l_before_table > 0)
						{
							fprintf(l_report_CSV2,"\n");
							l_before_table --;
						}

					/******* Column Heading *******************************************/
				
					/****** Multiple Column Level **************************************/

						strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
						strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
						strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
						
						fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);

						if(strlen(l_multiple_col_flag) > 0)
						{
							fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
							fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);

							if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
									&l_multiple_col_header_value) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
								 APL_GOBACK_FAIL
							}

							if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
									&l_multiple_colspan_sep_value) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
								 APL_GOBACK_FAIL
							}


							fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
							fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);

							
							if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
							{
								for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
								{
									for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
									{				

									if(int_a == int_b )
									{
									
									strcpy(l_level_header,l_multiple_col_header_value[int_a]);
									strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

									fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
									fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);

									if (CO_SplitStr(l_level_header,
											SEMISEP,
											&l_level_header_no,
											&l_level_header_value) == APL_FAILURE)
									{
										 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
										 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
										 APL_GOBACK_FAIL
									}

									if (CO_SplitStr(l_level_colspan,
											SEMISEP,
											&l_level_colspan_no,
											&l_level_colspan_value) == APL_FAILURE)
									{
										 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
										 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
										 APL_GOBACK_FAIL
									}

									fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
									fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);

									if(l_level_header_no == l_level_colspan_no)
									{

									for(int_aa=0;int_aa<l_level_header_no;int_aa++)
									{
										for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
										{
											if(int_aa == int_bb)
											{	
											
											strcpy(l_level_column,l_level_header_value[int_aa]);
											strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

											fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
											fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
											
											if(strlen(l_level_column) > 0)
												fprintf(l_report_CSV2,"%s,", l_level_column);
											else
												fprintf(l_report_CSV2,",");

											for(i=0;i<(atoi(l_level_col_span)-1);i++)
											{
												fprintf(l_report_CSV2,",");

											}


											}
										}
									}
									fprintf(l_report_CSV2,"\n");

									}/*** End Of Inner Condition check *****/

									}
									
															
									}/*** End Of 2st Main For Loop *******/

								}/*** End Of 1st Main For Loop *******/

							}/*** End Of Multiple col condition check *****/

							l_column_no=h_report_details_struct.no_of_columns;
							l_no_of_columns = h_report_details_struct.no_of_columns;
						}
						else
						{			
							fprintf(fl_userlog,"COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
							printf("COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
							
							/**** Split the Column Header and print *****************/
							
							strcpy(l_column_header,h_report_details_struct.column_hdr);
							if (CO_SplitStr(l_column_header,COMASEP,&l_col_no,&l_col_value) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_header);
								 APL_GOBACK_FAIL
							}

							/***** Table Column Heading and its records  *********/
							

							for(i=0;i<l_col_no;i++)
							{
								strcpy(l_column_value,l_col_value[i]);

								if(i+1==l_col_no)
									fprintf(l_report_CSV2,"%s",l_column_value);
								else
									fprintf(l_report_CSV2,"%s,",l_column_value);
							}
							fprintf(l_report_CSV2,"\n");

							l_column_no=h_report_details_struct.no_of_columns;
							l_no_of_columns = h_report_details_struct.no_of_columns;
							
							l_col_hdr = h_report_details_struct.col_hdr_brk;
							
						}
				
						EXEC SQL PREPARE CSV2_SUB1 FROM :table_query;	
						EXEC SQL DECLARE csv2tablequery1_g CURSOR FOR CSV2_SUB1;
						EXEC SQL OPEN csv2tablequery1_g;

						fprintf(l_report_CSV2,"\n");

						l_fetch_count=0;

						for(;;)
						{
							EXEC SQL FETCH csv2tablequery1_g
								INTO :l_table_parameter;

							if(sqlca.sqlcode == 1403)
							{
								fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
								if(l_fetch_count == 0)
								{
									fprintf(l_report_CSV2,"\nNO RECORDS FOUND\n",l_column_no);
									l_remove_count ++;
								}
								break;
							}

							if(sqlca.sqlcode < 0)
							{
							   fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
								break;
							}

							strcpy(l_column_parameter,l_table_parameter);
							
							/******* Split the string and fetch the column data into seperate variables *********/
						
							if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
							{
								CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
								APL_GOBACK_FAIL
							}

							/***** For Number Formatting ***************************************************/

							strcpy(l_format_col_pos,h_report_details_struct.format_col_pos);
							if (CO_SplitStr(l_format_col_pos,COMASEP,&l_format_col_no,&l_format_col_val) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_format_col_pos);
								 APL_GOBACK_FAIL
							}


							for(j=0;j<l_column_num;j++)
							{
								strcpy(l_column,l_column_val[j]);
								
								l_format_col_flag = 0;
								if(l_format_col_no > 0)
								{
									for (k=0;k<l_format_col_no;k++)
									{
										strcpy(l_format_col_value,l_format_col_val[k]);

										if(j==(atoi(l_format_col_value)-1))
											l_format_col_flag = 1;
									}

									if((strlen(l_column) > 0) && (strcmp(l_column," ")))
									{
										if(l_format_col_flag == 1)
										{
											EXEC SQL CALL SP_NUMBER_FORMATTING(:l_column,:l_error_desc);

											fprintf(l_report_CSV2,"%s,",l_column);
										}
											if(j+1 == l_column_num)
												fprintf(l_report_CSV2,"%s",l_column);
											else
												fprintf(l_report_CSV2,"%s,",l_column);
									}
									else
									{
										if(j+1 != l_column_num)
											fprintf(l_report_CSV2,",");
									}
								}
								else
								{
									if((strlen(l_column) > 0) && (strcmp(l_column," ")))
									{
										if(j+1 == l_column_num)
											fprintf(l_report_CSV2,"%s",l_column);
										else
											fprintf(l_report_CSV2,"%s,",l_column);
									}
									else
										if(j+1 != l_column_num)
											fprintf(l_report_CSV2,",");
								}

							}
							fprintf(l_report_CSV2,"\n");

							/***********************************************************************************/

							l_fetch_count ++;

						}
						EXEC SQL CLOSE csv2tablequery1_g;

						fprintf(l_report_CSV2,"\n");

						/********* For Criteria column value display ************************/
						
						if(h_report_details_struct.tot_criteria_cols > 0)
						{
							if(strlen(h_report_details_struct.criteria_col1_query) > 0)
							{
								EXEC SQL PREPARE CSV2_CR1 FROM :l_criteria_query1;
								EXEC SQL DECLARE CSV2_criteria1_g CURSOR FOR CSV2_CR1;
								EXEC SQL OPEN CSV2_criteria1_g;
								
								if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
								{
									fprintf(fl_userlog,"Error : Failed to Open CSV2_criteria1_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
								}

								for(;;)
								{
								EXEC SQL FETCH CSV2_criteria1_g INTO :l_criteria_value1;
								
									   if(sqlca.sqlcode == 1403)
									   break;

									   if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
									   {
										fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
										break;
									   }
								}
								EXEC SQL CLOSE CSV2_criteria1_g;

								/****** For Grand Total Of Criteria Value *********/
								
								
								if(strcmp(l_criteria_value1,APL_NULL_STRING))
								{
								EXEC SQL SELECT (:l_criteria_value1) INTO :l_criteria1_total FROM DUAL;
								
								l_grand_total1=l_grand_total1+l_criteria1_total;
								
								fprintf(fl_userlog,"l_grand_total1 :|%lf|\n",l_grand_total1);

								fprintf(l_report_CSV2,"\n%s = %s\n",h_report_details_struct.criteria_col1_name,l_criteria_value1);
								}
							}

							if(strlen(h_report_details_struct.criteria_col2_query) > 0)
							{
								EXEC SQL PREPARE CSV2_CR2 FROM :l_criteria_query2;
								EXEC SQL DECLARE CSV2_criteria2_g CURSOR FOR CSV2_CR2;
								EXEC SQL OPEN CSV2_criteria2_g;
								
								if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
								{
									fprintf(fl_userlog,"Error : Failed to Open CSV2_criteria2_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
								}

								for(;;)
								{
								EXEC SQL FETCH CSV2_criteria2_g INTO :l_criteria_value2;
								
									   if(sqlca.sqlcode == 1403)
									   break;

									   if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
									   {
										fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
										break;
									   }
								}
								EXEC SQL CLOSE CSV2_criteria2_g;
								
							
								if(strcmp(l_criteria_value2,APL_NULL_STRING))
								{
								EXEC SQL SELECT (:l_criteria_value2) INTO :l_criteria2_total FROM DUAL;
								
								l_grand_total2=l_grand_total2+l_criteria2_total;
								
								fprintf(fl_userlog,"l_grand_total2 :|%lf|\n",l_grand_total2);

								fprintf(l_report_CSV2,"\n%s = %s\n",h_report_details_struct.criteria_col2_name,l_criteria_value2);
								}

							}

							if(strlen(h_report_details_struct.criteria_col3_query) > 0)
							{
								EXEC SQL PREPARE CSV2_CR3 FROM :l_criteria_query3;
								EXEC SQL DECLARE CSV2_criteria3_g CURSOR FOR CSV2_CR3;
								EXEC SQL OPEN CSV2_criteria3_g;
								
								if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
								{
									fprintf(fl_userlog,"Error : Failed to Open CSV2_criteria3_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
								}

								for(;;)
								{
								EXEC SQL FETCH CSV2_criteria3_g INTO :l_criteria_value3;
								
									   if(sqlca.sqlcode == 1403)
									   break;

									   if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
									   {
										fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
										break;
									   }
								}
								EXEC SQL CLOSE CSV2_criteria3_g;
									
						
								if(strcmp(l_criteria_value3,APL_NULL_STRING))
								{
								EXEC SQL SELECT (:l_criteria_value3) INTO :l_criteria3_total FROM DUAL;
								
								l_grand_total3=l_grand_total3+l_criteria3_total;
								
								fprintf(fl_userlog,"l_grand_total3 :|%lf|\n",l_grand_total3);

								fprintf(l_report_CSV2,"\n%s = %s\n",h_report_details_struct.criteria_col3_name,l_criteria_value3);
								}

							}
						}
				/******* Complex Criteria Part *********************************************/

						strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
						strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
						strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
						strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

						if(strlen(complex_criteria_query) > 0)
						{
						
						EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								:complex_criteria_query,
								'@PARAM1',:l_param1),
								'@PARAM2',:l_param2),
								'@PARAM3',:l_param3),
								'@PARAM4',:l_param4),
								'@PARAM5',:l_param5),
								'@PARAM6',:l_param6),
								REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
								:complex_criteria_query1,
								'@PARAM1',:l_param1),
								'@PARAM2',:l_param2),
								'@PARAM3',:l_param3),
								'@PARAM4',:l_param4),
								'@PARAM5',:l_param5),
								'@PARAM6',:l_param6)
							INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;
				
						strcat(complex_criteria_query,complex_criteria_query1);

						
						fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);

						EXEC SQL PREPARE CSV2_CMPX_CURR1 FROM :complex_criteria_query;

						EXEC SQL DECLARE csv2_complex_curr1_g CURSOR FOR CSV2_CMPX_CURR1;

						fprintf(fl_userlog,"After DECLARE csv2_complex_curr1_g :|%d|\n",sqlca.sqlcode);

						EXEC SQL OPEN csv2_complex_curr1_g;

						EXEC SQL FETCH csv2_complex_curr1_g INTO :l_complex_parameter;

						fprintf(fl_userlog,"After FETCH csv2_complex_curr1_g :|%d|\n",sqlca.sqlcode);

						EXEC SQL CLOSE csv2_complex_curr1_g;

						fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);

						if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
						{
							CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
							APL_GOBACK_FAIL
						}
						
						fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);

						if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
						{
							CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
							APL_GOBACK_FAIL
						}


						fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
						fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);

						l_complex_break_flag = 0;
						
						if(l_complex_num == l_complex_pos_num)
						{

						for(i=0;i<l_column_num;i++)
						{
							for(j=0;j<l_complex_pos_num;j++)
							{

							strcpy(l_complex_pos_column,l_complex_pos_val[j]);

							if((i==0)&&(j==0))
							{
								if(strlen(complex_criteria_label) > 0)
								{
									fprintf(l_report_CSV2,"%s\n",complex_criteria_label);
									l_complex_break_flag=1;
								}
								else
								fprintf(l_report_CSV2,"\n");
							}

							if(i== (atoi(l_complex_pos_column)-1))
							{				  
							  strcpy(l_complex_column,l_complex_val[j]);

							  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);

							  l_complex_break_flag=1;
										

							  if(strlen(l_complex_column) > 0)
								fprintf(l_report_CSV2,"%s,",l_complex_column);
							  else
								fprintf(l_report_CSV2,",");
											
							  break;
							}
							else
							{
								 l_complex_break_flag = 0;
								 continue;
							} 

							}
								 
							if(i != 0)
							{
							  if(l_complex_break_flag != 1)
								 fprintf(l_report_CSV2,",");
							}
						}

						}
						else
						{
							fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
						}

						fprintf(l_report_CSV2,"\n");

						}
						
						/*****************	End Of Complex Part     *********************/


						/****** After table ****************************************/
				
						l_after_table = h_report_details_struct.after_table_brk;
						while(l_after_table > 0)
						{
							fprintf(l_report_CSV2,"\n");
							l_after_table --;
						}

						if(strlen(h_report_details_struct.after_table) > 0)
						{		
							fprintf(l_report_CSV2,"%s\n",h_report_details_struct.after_table);
						}
			  
						/******** Table Footer note ****************************************/
				
						l_table_footer = h_report_details_struct.table_footer_brk;
						if(l_table_footer > 0)
						{
							fprintf(l_report_CSV2,"\n");
							l_table_footer --;
						}
					
						if(strlen(h_report_details_struct.table_footer) > 0)
						{
							fprintf(l_report_CSV2,"%s\n",h_report_details_struct.table_footer);
						}

						l_table = h_report_main_struct.table_brk;
						if(l_table > 0)
						{
							fprintf(l_report_CSV2,"\n");
							l_table --;
						}

				if(l_fetch_count > 0 )
				{
				
				for(m=0;m<l_complex_num;m++)
				{
					if(m == 0)
					{
						strcpy(l_complex_parameter1,l_complex_val[m]);
						g_complex_parameter1=g_complex_parameter1+atof(l_complex_parameter1);
					}
					else if(m == 1)
					{
						strcpy(l_complex_parameter2,l_complex_val[m]);
						g_complex_parameter2=g_complex_parameter2+atof(l_complex_parameter2);
					}
					else if(m == 2)
					{
						strcpy(l_complex_parameter3,l_complex_val[m]);
						g_complex_parameter3=g_complex_parameter3+atof(l_complex_parameter3);
					}
					else if(m == 3)
					{
						strcpy(l_complex_parameter4,l_complex_val[m]);
						g_complex_parameter4=g_complex_parameter4+atof(l_complex_parameter4);
					}
					else if(m == 4)
					{
						strcpy(l_complex_parameter5,l_complex_val[m]);
						g_complex_parameter5=g_complex_parameter5+atof(l_complex_parameter5);
					}
					else if(m == 5)
					{
						strcpy(l_complex_parameter6,l_complex_val[m]);
						g_complex_parameter6=g_complex_parameter6+atof(l_complex_parameter6);
					}
					else if(m == 6)
					{
						strcpy(l_complex_parameter7,l_complex_val[m]);
						g_complex_parameter7=g_complex_parameter7+atof(l_complex_parameter7);
					}
					else if(m == 7)
					{
						strcpy(l_complex_parameter8,l_complex_val[m]);
						g_complex_parameter8=g_complex_parameter8+atof(l_complex_parameter8);
					}
					else if(m == 8)
					{
						strcpy(l_complex_parameter9,l_complex_val[m]);
						g_complex_parameter9=g_complex_parameter9+atof(l_complex_parameter9);
					}
					else if(m == 9)
					{
							strcpy(l_complex_parameter10,l_complex_val[m]);
							g_complex_parameter10=g_complex_parameter10+atof(l_complex_parameter10);
					}
					else if(m == 10)
					{
						strcpy(l_complex_parameter11,l_complex_val[m]);
						g_complex_parameter11=g_complex_parameter11+atof(l_complex_parameter11);
					}
					else if(m == 11)
					{
						strcpy(l_complex_parameter12,l_complex_val[m]);			
						g_complex_parameter12=g_complex_parameter12+atof(l_complex_parameter12);
					}
					else if(m == 12)
					{
						strcpy(l_complex_parameter13,l_complex_val[m]);
						g_complex_parameter13=g_complex_parameter13+atof(l_complex_parameter13);
					}
					else if(m == 13)
					{
						strcpy(l_complex_parameter14,l_complex_val[m]);
						g_complex_parameter14=g_complex_parameter14+atof(l_complex_parameter14);
					}
					else if(m == 14)
					{
						strcpy(l_complex_parameter15,l_complex_val[m]);
						g_complex_parameter15=g_complex_parameter15+atof(l_complex_parameter15);
					}
						else if(m == 15)
						{
							strcpy(l_complex_parameter16,l_complex_val[m]);
							g_complex_parameter16=g_complex_parameter16+atof(l_complex_parameter16);
						}
						else if(m == 16)
						{
							strcpy(l_complex_parameter17,l_complex_val[m]);
							g_complex_parameter17=g_complex_parameter17+atof(l_complex_parameter17);
						}
						else if(m == 17)
						{
							strcpy(l_complex_parameter18,l_complex_val[m]);
							g_complex_parameter18=g_complex_parameter18+atof(l_complex_parameter18);
						}
						else if(m == 18)
						{
							strcpy(l_complex_parameter19,l_complex_val[m]);
							g_complex_parameter19=g_complex_parameter19+atof(l_complex_parameter19);
						}
						else if(m == 19)
						{
							strcpy(l_complex_parameter20,l_complex_val[m]);
							g_complex_parameter20=g_complex_parameter20+atof(l_complex_parameter20);
						}
					}

					}/*** End Of Fetch Count check ******/
					
		}
		else
		{
					/**** Stored procedure for REPORT DETAILS **********************/
						
						fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID 35:|%s|\n",l_rept_id);		
						EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
								:l_param2,:l_param3,:l_param4,
								:l_param5,:l_param6,
								:l_table_query,:l_table_query1,:l_table_query2,
								:l_table_query3,:l_table_query4,:l_table_query5,
								:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
								:l_group_desc,:l_error_desc);

						strcpy(table_query,l_table_query);
						strcat(table_query," ");
						
						if(strlen(l_table_query1) > 0)
						{
							strcat(table_query,l_table_query1);
							strcat(table_query," ");
						}
						if(strlen(l_table_query2) > 0)
						{
							strcat(table_query,l_table_query2);
							strcat(table_query," ");
						}
						if(strlen(l_table_query3) > 0)
						{
							strcat(table_query,l_table_query3);
							strcat(table_query," ");
						}
						if(strlen(l_table_query4) > 0)
						{
							strcat(table_query,l_table_query4);
							strcat(table_query," ");
						}
						if(strlen(l_table_query5) > 0)
						{
							strcat(table_query,l_table_query5);
							strcat(table_query," ");
						}
						
						strcat(table_query,APL_NULL_STRING);

						
					if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					{
						fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
					}
					
					//fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
					fprintf(fl_userlog,"l_criteria_query1:|%s|\n",l_criteria_query1);
					fprintf(fl_userlog,"l_criteria_query2:|%s|\n",l_criteria_query2);
					fprintf(fl_userlog,"l_criteria_query3:|%s|\n",l_criteria_query3);

					/****** Before table ***********************************************************************/
					
					if(strlen(h_report_details_struct.before_table) > 0)
					{	
						fprintf(l_report_CSV2,"%s\n",h_report_details_struct.before_table);
					}
					
					l_before_table = h_report_details_struct.before_table_brk;
					while(l_before_table > 0)
					{
						fprintf(l_report_CSV2,"\n");
						l_before_table --;
					}

					/******* Column Heading ***********************************/

					/****** Multiple Column Level **************************************/

					strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
					strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
					strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
					
					fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);

					if(strlen(l_multiple_col_flag) > 0)
					{
						fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
						fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);

						if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
								&l_multiple_col_header_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
							 APL_GOBACK_FAIL
						}

						if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
								&l_multiple_colspan_sep_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
							 APL_GOBACK_FAIL
						}


						fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
						fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);


						if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
						{
							for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
							{
								for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
								{
							
								if(int_a == int_b )
								{
								
								strcpy(l_level_header,l_multiple_col_header_value[int_a]);
								strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

								fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
								fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);

								if (CO_SplitStr(l_level_header,
										SEMISEP,
										&l_level_header_no,
										&l_level_header_value) == APL_FAILURE)
								{
									 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
									 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
									 APL_GOBACK_FAIL
								}

								if (CO_SplitStr(l_level_colspan,
										SEMISEP,
										&l_level_colspan_no,
										&l_level_colspan_value) == APL_FAILURE)
								{
									 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
									 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
									 APL_GOBACK_FAIL
								}

								fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
								fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);

								if(l_level_header_no == l_level_colspan_no)
								{

								for(int_aa=0;int_aa<l_level_header_no;int_aa++)
								{
									for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
									{
										if(int_aa == int_bb)
										{	
										
										strcpy(l_level_column,l_level_header_value[int_aa]);
										strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

										fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
										fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
										
										if(strlen(l_level_column) > 0)
											fprintf(l_report_CSV2,"%s,", l_level_column);
										else
											fprintf(l_report_CSV2,",");


										for(i=0;i<(atoi(l_level_col_span)-1);i++)
										{
											fprintf(l_report_CSV2,",");

										}

										}
									}
								}
								fprintf(l_report_CSV2,"\n");

								}/*** End Of Inner Condition check *****/

								}
								
														
								}/*** End Of 2st Main For Loop *******/

							}/*** End Of 1st Main For Loop *******/

						}/*** End Of Multiple col condition check *****/

						l_column_no=h_report_details_struct.no_of_columns;
						l_no_of_columns = h_report_details_struct.no_of_columns;

					}
					else
					{		
						fprintf(fl_userlog,"COLUMN HEADER:|%s|\n",h_report_details_struct.column_hdr);
						printf("COLUMN HEADER:|%s|\n",h_report_details_struct.column_hdr);
						//fflush(fl_userlog);
						/**** Split the Column Header and print *****************/
						
						strcpy(l_column_header,h_report_details_struct.column_hdr);
						if (CO_SplitStr(l_column_header,COMASEP,&l_col_no,&l_col_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_header);
							 APL_GOBACK_FAIL
						}

						/***** Table Column Heading and its records  *********/
						
						for(i=0;i<l_col_no;i++)
						{
							strcpy(l_column_value,l_col_value[i]);

							if(i+1==l_col_no)
								fprintf(l_report_CSV2,"%s",l_column_value);
							else
								fprintf(l_report_CSV2,"%s,",l_column_value);
						}

						l_column_no=h_report_details_struct.no_of_columns;
						l_no_of_columns = h_report_details_struct.no_of_columns;
						
						l_col_hdr = h_report_details_struct.col_hdr_brk;
							
					}
							
					fprintf(l_report_CSV2,"\n");
					
					EXEC SQL PREPARE CSV_SUB FROM :table_query;	
					EXEC SQL DECLARE csvtablequery_g CURSOR FOR CSV_SUB;
					EXEC SQL OPEN csvtablequery_g;

					l_fetch_count=0;

					for(;;)
					{
						EXEC SQL FETCH csvtablequery_g
							INTO :l_table_parameter;

						if(sqlca.sqlcode == 1403)
						 {
							fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
							if(l_fetch_count == 0)
							{
							   fprintf(l_report_CSV2,"\nNO RECORDS FOUND\n");
								 l_remove_count ++;
							}
							break;
						 }

						 if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
						 {
							fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
							break;
						 }

						strcpy(l_column_parameter,l_table_parameter);
						
						/******* Split the string and fetch the column date into seperate variables *********/
						
						if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
						{
							CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
							APL_GOBACK_FAIL
						}

						/***** For Number Formatting ***************************************************/

						strcpy(l_format_col_pos,h_report_details_struct.format_col_pos);
						if (CO_SplitStr(l_format_col_pos,COMASEP,&l_format_col_no,&l_format_col_val) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_format_col_pos);
							 APL_GOBACK_FAIL
						}


						for(j=0;j<l_column_num;j++)
						{
							strcpy(l_column,l_column_val[j]);
							
							if((strlen(l_column) > 0) && (strcmp(l_column," ")))
							{
								if(j+1 == l_column_num)
									fprintf(l_report_CSV2,"%s",l_column);
								else
									fprintf(l_report_CSV2,"%s,",l_column);
							}
							else
							{
								if(j+1 != l_column_num)
									fprintf(l_report_CSV2,",");	
							}								
						}
						fprintf(l_report_CSV2,"\n");

						/***********************************************************************************/

						l_fetch_count ++;

					}
					EXEC SQL CLOSE csvtablequery_g;
						
					fprintf(l_report_CSV2,"\n");

					/********* For Criteria column value display ********************************************/
					
					if(h_report_details_struct.tot_criteria_cols > 0)
					{
						if(strlen(h_report_details_struct.criteria_col1_query) > 0)
						{
							EXEC SQL PREPARE CSV_CR1 FROM :l_criteria_query1;
							EXEC SQL DECLARE csvcriteria1_g CURSOR FOR CSV_CR1;
							EXEC SQL OPEN csvcriteria1_g;
							
							if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
							{
								fprintf(fl_userlog,"Error : Failed to Open csvcriteria1_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
							}

							for(;;)
							{
							EXEC SQL FETCH csvcriteria1_g INTO :l_criteria_value1;
							
								   if(sqlca.sqlcode == 1403)
								   break;

								   if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
								   {
									fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
									break;
								   }
							}
							EXEC SQL CLOSE csvcriteria1_g;

							/****** For Grand Total Of Criteria Value *********/
								

							if(strcmp(l_criteria_value1,APL_NULL_STRING))
							{
							EXEC SQL SELECT (:l_criteria_value1) INTO :l_criteria1_total FROM DUAL;
							
							l_grand_total1=l_grand_total1+l_criteria1_total;
							
							fprintf(fl_userlog,"l_grand_total1 :|%lf|\n",l_grand_total1);

							fprintf(l_report_CSV2,"%s = %s\n",h_report_details_struct.criteria_col1_name,l_criteria_value1);
							}
						}

						if(strlen(h_report_details_struct.criteria_col2_query) > 0)
						{
							EXEC SQL PREPARE CSV_CR2 FROM :l_criteria_query2;
							EXEC SQL DECLARE csvcriteria2_g CURSOR FOR CSV_CR2;
							EXEC SQL OPEN csvcriteria2_g;
							
							if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
							{
								fprintf(fl_userlog,"Error : Failed to Open csvcriteria2_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
							}

							for(;;)
							{
							EXEC SQL FETCH csvcriteria2_g INTO :l_criteria_value2;
							
								   if(sqlca.sqlcode == 1403)
								   break;

								   if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
								   {
									fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
									break;
								   }
							}
							EXEC SQL CLOSE csvcriteria2_g;
							
						
							if(strcmp(l_criteria_value2,APL_NULL_STRING))
							{
							EXEC SQL SELECT (:l_criteria_value2) INTO :l_criteria2_total FROM DUAL;
							
							l_grand_total2=l_grand_total2+l_criteria2_total;
							
							fprintf(fl_userlog,"l_grand_total2 :|%lf|\n",l_grand_total2);

							fprintf(l_report_CSV2,"%s = %s\n",h_report_details_struct.criteria_col2_name,l_criteria_value2);
							}

						}

						if(strlen(h_report_details_struct.criteria_col3_query) > 0)
						{
							EXEC SQL PREPARE CSV_CR3 FROM :l_criteria_query3;
							EXEC SQL DECLARE csvcriteria3_g CURSOR FOR CSV_CR3;
							EXEC SQL OPEN csvcriteria3_g;
							
							if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
							{
								fprintf(fl_userlog,"Error : Failed to Open csvcriteria3_g CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
							}

							for(;;)
							{
							EXEC SQL FETCH csvcriteria3_g INTO :l_criteria_value3;
							
								   if(sqlca.sqlcode == 1403)
								   break;

								   if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
								   {
									fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
									break;
								   }
							}
							EXEC SQL CLOSE criteria3;
							
							
							if(strcmp(l_criteria_value3,APL_NULL_STRING))
							{
							EXEC SQL SELECT (:l_criteria_value3) INTO :l_criteria3_total FROM DUAL;
							
							l_grand_total3=l_grand_total3+l_criteria3_total;
							
							fprintf(fl_userlog,"l_grand_total3 :|%lf|\n",l_grand_total3);

							fprintf(l_report_CSV2,"%s = %s\n",h_report_details_struct.criteria_col3_name,l_criteria_value3);
							}

						}
					}

					/******* Complex Criteria Part *********************************************/


					strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
					strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
					strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
					strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

					fprintf(fl_userlog,"Before Complex Part -- l_fetch_count 9:|%d|\n",l_fetch_count);

					if(l_fetch_count > 0)
					{

					if(strlen(complex_criteria_query) > 0)
					{
					
					EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
							:complex_criteria_query,
							'@PARAM1',:l_param1),
							'@PARAM2',:l_param2),
							'@PARAM3',:l_param3),
							'@PARAM4',:l_param4),
							'@PARAM5',:l_param5),
							'@PARAM6',:l_param6),
							REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
							:complex_criteria_query1,
							'@PARAM1',:l_param1),
							'@PARAM2',:l_param2),
							'@PARAM3',:l_param3),
							'@PARAM4',:l_param4),
							'@PARAM5',:l_param5),
							'@PARAM6',:l_param6)
						INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;

					strcat(complex_criteria_query,complex_criteria_query1);

					
					fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);

					EXEC SQL PREPARE CSV2_CMPX_CURR2 FROM :complex_criteria_query;

					EXEC SQL DECLARE csv2_complex_curr2_g CURSOR FOR CSV2_CMPX_CURR2;

					fprintf(fl_userlog,"After DECLARE csv2_complex_curr2_g :|%d|\n",sqlca.sqlcode);

					EXEC SQL OPEN csv2_complex_curr2_g;

					EXEC SQL FETCH csv2_complex_curr2_g INTO :l_complex_parameter;

					fprintf(fl_userlog,"After FETCH csv2_complex_curr2_g :|%d|\n",sqlca.sqlcode);

					EXEC SQL CLOSE csv2_complex_curr2_g;

					fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);

					if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
					{
						CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
						APL_GOBACK_FAIL
					}
					
					fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);

					if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
					{
						CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
						APL_GOBACK_FAIL
					}


					fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
					fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);

					l_complex_break_flag = 0;

					
					if(l_complex_num == l_complex_pos_num)
					{

					for(i=0;i<l_column_num;i++)
					{
						for(j=0;j<l_complex_pos_num;j++)
						{

						strcpy(l_complex_pos_column,l_complex_pos_val[j]);

						if((i==0)&&(j==0))
						{
							if(strlen(complex_criteria_label) > 0)
							{
								fprintf(l_report_CSV2,"%s,",complex_criteria_label);
								l_complex_break_flag=1;
							}
							else
								fprintf(l_report_CSV2,",");
						}

						if(i== (atoi(l_complex_pos_column)-1))
						{				  
						  strcpy(l_complex_column,l_complex_val[j]);

						  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);

						  l_complex_break_flag=1;
			 
						  if(strlen(l_complex_column) > 0)
							fprintf(l_report_CSV2,"%s,",l_complex_column);
						  else
							fprintf(l_report_CSV2,",");
						
						  break;
						}
						else
						{
							 l_complex_break_flag = 0;
							 continue;
						} 

						}
							 
						if(i != 0)
						{
						  if(l_complex_break_flag != 1)
							 fprintf(l_report_CSV2,",");
						}
					}

					}
					else
					{
						fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
					}

					fprintf(l_report_CSV2,"\n");

					}

					}
					else
					{			
						fprintf(fl_userlog," No Records Found -- So No Need To Display Criteria \n");
					}
					

					/***************************************************************************/

					
					/****** After table *******************************************/
					
					l_after_table = h_report_details_struct.after_table_brk;
					while(l_after_table > 0)
					{
						fprintf(l_report_CSV2,"\n");
						l_after_table --;
					}

					if(strlen(h_report_details_struct.after_table) > 0)
					{	
						fprintf(l_report_CSV2,"%s\n",h_report_details_struct.after_table);
					}
			  
					/************ Table Footer note ************************************/
				
					l_table_footer = h_report_details_struct.table_footer_brk;
					if(l_table_footer > 0)
					{
						fprintf(l_report_CSV2,"\n");
						l_table_footer --;
					}
					
					if(strlen(h_report_details_struct.table_footer) > 0)
					{
						fprintf(l_report_CSV2,"%s\n",h_report_details_struct.table_footer);
					}

					l_table = h_report_main_struct.table_brk;
					if(l_table > 0)
					{
						fprintf(l_report_CSV2,"\n");
						l_table --;
					}


					if( l_fetch_count > 0 )
					{
						for(m=0;m<l_complex_num;m++)
						{
							if(m == 0)
							{
								strcpy(l_complex_parameter1,l_complex_val[m]);
								g_complex_parameter1=atof(l_complex_parameter1);
							}
							else if(m == 1)
							{
								strcpy(l_complex_parameter2,l_complex_val[m]);
								g_complex_parameter2=atof(l_complex_parameter2);
							}
							else if(m == 2)
							{
								strcpy(l_complex_parameter3,l_complex_val[m]);
								g_complex_parameter3=atof(l_complex_parameter3);
							}
							else if(m == 3)
							{
								strcpy(l_complex_parameter4,l_complex_val[m]);
								g_complex_parameter4=atof(l_complex_parameter4);
							}
							else if(m == 4)
							{
								strcpy(l_complex_parameter5,l_complex_val[m]);
								g_complex_parameter5=atof(l_complex_parameter5);
							}
							else if(m == 5)
							{
								strcpy(l_complex_parameter6,l_complex_val[m]);
								g_complex_parameter6=atof(l_complex_parameter6);
							}
							else if(m == 6)
							{
								strcpy(l_complex_parameter7,l_complex_val[m]);
								g_complex_parameter7=atof(l_complex_parameter7);
							}
							else if(m == 7)
							{
								strcpy(l_complex_parameter8,l_complex_val[m]);
								g_complex_parameter8=atof(l_complex_parameter8);
							}
							else if(m == 8)
							{
								strcpy(l_complex_parameter9,l_complex_val[m]);
								g_complex_parameter9=atof(l_complex_parameter9);
							}
							else if(m == 9)
							{
								strcpy(l_complex_parameter10,l_complex_val[m]);
								g_complex_parameter10=atof(l_complex_parameter10);
							}
							else if(m == 10)
							{
								strcpy(l_complex_parameter11,l_complex_val[m]);
								g_complex_parameter11=atof(l_complex_parameter11);
							}
							else if(m == 11)
							{
								strcpy(l_complex_parameter12,l_complex_val[m]);			
								g_complex_parameter12=atof(l_complex_parameter12);
							}
							else if(m == 12)
							{
								strcpy(l_complex_parameter13,l_complex_val[m]);
								g_complex_parameter13=atof(l_complex_parameter13);
							}
							else if(m == 13)
							{
								strcpy(l_complex_parameter14,l_complex_val[m]);
								g_complex_parameter14=atof(l_complex_parameter14);
							}
							else if(m == 14)
							{
								strcpy(l_complex_parameter15,l_complex_val[m]);
								g_complex_parameter15=atof(l_complex_parameter15);
							}
							else if(m == 15)
							{
								strcpy(l_complex_parameter16,l_complex_val[m]);
								g_complex_parameter16=atof(l_complex_parameter16);
							}
							else if(m == 16)
							{
								strcpy(l_complex_parameter17,l_complex_val[m]);
								g_complex_parameter17=atof(l_complex_parameter17);
							}
							else if(m == 17)
							{
								strcpy(l_complex_parameter18,l_complex_val[m]);
								g_complex_parameter18=atof(l_complex_parameter18);
							}
							else if(m == 18)
							{
								strcpy(l_complex_parameter19,l_complex_val[m]);
								g_complex_parameter19=atof(l_complex_parameter19);
							}
							else if(m == 19)
							{
								strcpy(l_complex_parameter20,l_complex_val[m]);
								g_complex_parameter20=atof(l_complex_parameter20);
							}

						}/*** End of Complex For Loop ***/

					}/*** End Of Fetch Count Check ****/	
			

		}/******* End Of  Else Block **********/				

		/*************** Complex Criteria Individual  *********************/
					
					if(l_fetch_count > 0 )
					{
						fprintf(fl_userlog,"g_complex_parameter1 :|%lf|\tg_complex_parameter2 :|%lf|\n",g_complex_parameter1,g_complex_parameter2);
						fprintf(fl_userlog,"g_complex_parameter3 :|%lf|\tg_complex_parameter4 :|%lf|\n",g_complex_parameter3,g_complex_parameter4);
						fprintf(fl_userlog,"g_complex_parameter5 :|%lf|\tg_complex_parameter6 :|%lf|\n",g_complex_parameter5,g_complex_parameter6);
						fprintf(fl_userlog,"g_complex_parameter7 :|%lf|\tg_complex_parameter8 :|%lf|\n",g_complex_parameter7,g_complex_parameter8);
						fprintf(fl_userlog,"g_complex_parameter9 :|%lf|\tg_complex_parameter10 :|%lf|\n",g_complex_parameter9,g_complex_parameter10);
						fprintf(fl_userlog,"g_complex_parameter11 :|%lf|\tg_complex_parameter12 :|%lf|\n",g_complex_parameter11,g_complex_parameter12);
						fprintf(fl_userlog,"g_complex_parameter13 :|%lf|\tg_complex_parameter14 :|%lf|\n",g_complex_parameter13,g_complex_parameter14);
						fprintf(fl_userlog,"g_complex_parameter15 :|%lf|\tg_complex_parameter16 :|%lf|\n",g_complex_parameter15,g_complex_parameter16);
						fprintf(fl_userlog,"g_complex_parameter17 :|%lf|\tg_complex_parameter18 :|%lf|\n",g_complex_parameter17,g_complex_parameter18);
						fprintf(fl_userlog,"g_complex_parameter19 :|%lf|\tg_complex_parameter20 :|%lf|\n",g_complex_parameter19,g_complex_parameter20);
					}


					/*******************************************************************/


					/********* Dynamic Footer Display ****************************************/

					strcpy(footer_query,h_report_details_struct.footer_query);
					
					if(strlen(footer_query) > 0)
					{

					/**** Stored Procedure : SP_REPORT_FOOTER ***********************************/

					fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
					printf("Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
					//fflush(fl_userlog);
					EXEC SQL CALL SP_REPORT_FOOTER(:l_rept_id,:l_table_id,:l_param1,:l_param2,
								:l_param3,:l_param4, :l_param5,
								:l_param6,:l_footer_query,:l_footer_query1,:l_error_desc); 

					strcat(l_footer_query,l_footer_query1);

					if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					{
						fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER ERR DESC :|%s|\n",l_error_desc);
					}

					fprintf(fl_userlog,"FOOTER QUERY :|%s|\n",l_footer_query);

					strcpy(l_footer_query_value,APL_NULL_STRING);

					EXEC SQL PREPARE CSV2_FOOTER_CURR FROM :l_footer_query;

					EXEC SQL DECLARE csv2_footer_curr_g CURSOR FOR CSV2_FOOTER_CURR;
					
					fprintf(fl_userlog,"After DECLARE csv2_footer_curr_g :|%d|\n",sqlca.sqlcode);

					EXEC SQL OPEN csv2_footer_curr_g;

					EXEC SQL FETCH csv2_footer_curr_g INTO :l_footer_query_value;
					fprintf(fl_userlog,"After FETCH csv2_footer_curr_g :|%d|\n",sqlca.sqlcode);

					EXEC SQL CLOSE csv2_footer_curr_g;

					fprintf(fl_userlog,"l_footer_query_value :|%s|\n",l_footer_query_value);

					l_footer_num = 0;

					strcpy(l_footer1,APL_NULL_STRING);
					strcpy(l_footer2,APL_NULL_STRING);
					strcpy(l_footer3,APL_NULL_STRING);
					strcpy(l_footer4,APL_NULL_STRING);
					strcpy(l_footer5,APL_NULL_STRING);
					strcpy(l_footer6,APL_NULL_STRING);
					strcpy(l_footer7,APL_NULL_STRING);
					strcpy(l_footer8,APL_NULL_STRING);
					strcpy(l_footer9,APL_NULL_STRING);
					strcpy(l_footer10,APL_NULL_STRING);
					strcpy(l_footer11,APL_NULL_STRING);
					strcpy(l_footer12,APL_NULL_STRING);
					strcpy(l_footer13,APL_NULL_STRING);
					strcpy(l_footer14,APL_NULL_STRING);
					strcpy(l_footer15,APL_NULL_STRING);

					if(strlen(l_footer_query_value) > 0)
					{		
						if (CO_SplitStr(l_footer_query_value,CAPSEP,&l_footer_num,&l_footer_val) == APL_FAILURE)
						{
							CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_footer_query_value);
							APL_GOBACK_FAIL
						}

						fprintf(fl_userlog,"l_footer_num :|%d|\n",l_footer_num);
						if(l_footer_num > 0)
						{
							for(i=0;i<l_footer_num;i++)
							{
								if(i == 0)
								strcpy(l_footer1,l_footer_val[i]);
								else if(i == 1)
								strcpy(l_footer2,l_footer_val[i]);
								else if(i == 2)
								strcpy(l_footer3,l_footer_val[i]);
								else if(i == 3)
								strcpy(l_footer4,l_footer_val[i]);
								else if(i == 4)
								strcpy(l_footer5,l_footer_val[i]);
								else if(i == 5)
								strcpy(l_footer6,l_footer_val[i]);
								else if(i == 6)
								strcpy(l_footer7,l_footer_val[i]);
								else if(i == 7)
								strcpy(l_footer8,l_footer_val[i]);
								else if(i == 8)
								strcpy(l_footer9,l_footer_val[i]);
								else if(i == 9)
								strcpy(l_footer10,l_footer_val[i]);
								else if(i == 10)
								strcpy(l_footer11,l_footer_val[i]);
								else if(i == 11)
								strcpy(l_footer12,l_footer_val[i]);
								else if(i == 12)
								strcpy(l_footer13,l_footer_val[i]);
								else if(i == 13)
								strcpy(l_footer14,l_footer_val[i]);
								else if(i == 14)
								strcpy(l_footer15,l_footer_val[i]);
							}
						}

					}/************** End Of Footer Value Check *************************************/

					/****** Stored Procedure : SP_REPORT_FOOTER_DATA ***********************************/

					fprintf(fl_userlog,"l_footer1 :|%s|\t l_footer2 :|%s|\n",l_footer1,l_footer2);
					fprintf(fl_userlog,"l_footer3 :|%s|\t l_footer4 :|%s|\n",l_footer3,l_footer4);
					fprintf(fl_userlog,"l_footer5 :|%s|\t l_footer6 :|%s|\n",l_footer5,l_footer6);
					fprintf(fl_userlog,"l_footer7 :|%s|\t l_footer8 :|%s|\n",l_footer7,l_footer8);
					fprintf(fl_userlog,"l_footer9 :|%s|\t l_footer10 :|%s|\n",l_footer9,l_footer10);
					fprintf(fl_userlog,"l_footer11 :|%s|\t l_footer12 :|%s|\n",l_footer11,l_footer12);
					fprintf(fl_userlog,"l_footer13 :|%s|\t l_footer14 :|%s|\n",l_footer13,l_footer14);
					fprintf(fl_userlog,"l_footer15 :|%s|\n",l_footer15);

					fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);	
					printf("Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);		
                       //fflush(fl_userlog);					

					EXEC SQL CALL SP_REPORT_FOOTER_DATA(:l_rept_id,:l_table_id,
										:l_footer1,:l_footer2,
										:l_footer3,:l_footer4,
										:l_footer5,:l_footer6,
										:l_footer7,:l_footer8,
										:l_footer9,:l_footer10,
										:l_footer11,:l_footer12,
										:l_footer13,:l_footer14,
										:l_footer15,
										:g_complex_parameter1,:g_complex_parameter2,
										:g_complex_parameter3,:g_complex_parameter4,
										:g_complex_parameter5,:g_complex_parameter6,
										:g_complex_parameter7,:g_complex_parameter8,
										:g_complex_parameter9,:g_complex_parameter10,
										:g_complex_parameter11,:g_complex_parameter12,
										:g_complex_parameter13,:g_complex_parameter14,
										:g_complex_parameter15,:g_complex_parameter16,
										:g_complex_parameter17,:g_complex_parameter18,
										:g_complex_parameter19,:g_complex_parameter20,
										:l_footer_data,:l_error_desc);

					if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					{
						fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER_DATA ERR DESC :|%s|\n",l_error_desc);
					}

					fprintf(fl_userlog,"FOOTER DATA :|%s|\n",l_footer_data);

					/************ Dynamic Formating Procedure ********************************************/
					
					fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);	
					printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
					
					EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_footer_data,:l_error_desc); 

					if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					{
						fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
					}

					fprintf(fl_userlog,"FOOTER DATA After Formatting -- :|%s|\n",l_footer_data);


					/*************************************************************************************/

					/************ Dynamic Footer Data Display **********************************************/
					
					fprintf(fl_userlog,"strlen(l_footer_data) :|%d|\n",strlen(l_footer_data));

					if(strlen(l_footer_data) > 0)
					{
						fprintf(fl_userlog,"Displaying Footer Data --- \n");

						fprintf(l_report_CSV2,"%s\n",l_footer_data);
					}

					l_footer_data_brk = h_report_details_struct.footer_data_brk;
					while(l_footer_data_brk > 0)
					{
						fprintf(l_report_CSV2,"\n");
						l_footer_data_brk --;
						g_line_count++;
					}

			}

			/***************** End Of Dynamic Footer Display  *****************************/
		

								/***************** Final Complex Criteria Calculation *************************/

					fprintf(fl_userlog,"\n--- l_table_id --- 10:|%d|\n",l_table_id);

					if(l_table_id == 1)
					{
						f_complex_parameter1=f_complex_parameter1+g_complex_parameter1;
						f_complex_parameter2=f_complex_parameter2+g_complex_parameter2;
						f_complex_parameter3=f_complex_parameter3+g_complex_parameter3;
						f_complex_parameter4=f_complex_parameter4+g_complex_parameter4;
						f_complex_parameter5=f_complex_parameter5+g_complex_parameter5;
						f_complex_parameter6=f_complex_parameter6+g_complex_parameter6;
						f_complex_parameter7=f_complex_parameter7+g_complex_parameter7;
						f_complex_parameter8=f_complex_parameter8+g_complex_parameter8;
						f_complex_parameter9=f_complex_parameter9+g_complex_parameter9;
						f_complex_parameter10=f_complex_parameter10+g_complex_parameter10;
						f_complex_parameter11=f_complex_parameter11+g_complex_parameter11;
						f_complex_parameter12=f_complex_parameter12+g_complex_parameter12;
						f_complex_parameter13=f_complex_parameter13+g_complex_parameter13;
						f_complex_parameter14=f_complex_parameter14+g_complex_parameter14;
						f_complex_parameter15=f_complex_parameter15+g_complex_parameter15;
						f_complex_parameter16=f_complex_parameter16+g_complex_parameter16;
						f_complex_parameter17=f_complex_parameter17+g_complex_parameter17;
						f_complex_parameter18=f_complex_parameter18+g_complex_parameter18;
						f_complex_parameter19=f_complex_parameter19+g_complex_parameter19;
						f_complex_parameter20=f_complex_parameter20+g_complex_parameter20;
					}


				/**********************************************************************************/
		}
	}
	EXEC SQL CLOSE csv2_group_g;
   }/*added by siva.ganapathi for Enh. Log 121 on 2/20/2009 -- Ended*/
	else
	{
	while(l_table_id <= h_report_main_struct.no_of_tables)
	{

		g_complex_parameter1 = 0.0;
		g_complex_parameter2 = 0.0;
		g_complex_parameter3 = 0.0;
		g_complex_parameter4 = 0.0;
		g_complex_parameter5 = 0.0;
		g_complex_parameter6 = 0.0;
		g_complex_parameter7 = 0.0;
		g_complex_parameter8 = 0.0;
		g_complex_parameter9 = 0.0;
		g_complex_parameter10 = 0.0;
		g_complex_parameter11 = 0.0;
		g_complex_parameter12 = 0.0;
		g_complex_parameter13 = 0.0;
		g_complex_parameter14 = 0.0;
		g_complex_parameter15 = 0.0;
		g_complex_parameter16 = 0.0;
		g_complex_parameter17 = 0.0;
		g_complex_parameter18 = 0.0;
		g_complex_parameter19 = 0.0;
		g_complex_parameter20 = 0.0;

		fprintf(fl_userlog,"l_rept_id:|%s|l_table_id:|%d|\n",l_rept_id,l_table_id);
		
		/******* Fetch the REPORT DETAILS for the perticular report ID and table ID ******/
		
		EXEC SQL SELECT * INTO :h_report_details_struct
					FROM REPORT_DETAILS 
					WHERE REPORT_ID=:l_rept_id
					AND TABLE_ID=:l_table_id;

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Failed to Access REPORT_DETAILS --- ORA ERROR :|%d|\n",sqlca.sqlcode);
		}

		/***** Table header *********************************************************************/

		fprintf(fl_userlog,"h_report_details_struct.table_hdr:|%s|\n",h_report_details_struct.table_hdr);
		
		if(strlen(h_report_details_struct.table_hdr) > 0)
		{
			fprintf(l_report_CSV2,"%s\n",h_report_details_struct.table_hdr);
		}

		l_table_hdr = h_report_details_struct.table_hdr_brk;
		while(l_table_hdr > 0)
		{
			fprintf(l_report_CSV2,"\n");
			l_table_hdr --;
		}
		
		/*********** Grouping Condition Check **************************************************/

		fprintf(fl_userlog,"h_report_details_struct.group_desc:|%s|\n",h_report_details_struct.group_desc);
		fprintf(fl_userlog,"h_report_details_struct.group_pos:|%s|\n",h_report_details_struct.group_pos);
			
		strcpy(l_group_query,h_report_details_struct.group_query);
		strcpy(l_group_desc,h_report_details_struct.group_desc);
		strcpy(l_group_pos,h_report_details_struct.group_pos);
	
		//fprintf(fl_userlog,"strlen(l_group_query) :|%d|\n",strlen(l_group_query)); Changes done for AIX Migration
		fprintf(fl_userlog,"strlen(l_group_query) :|%d|\n",(int)strlen(l_group_query));
		
		if(strlen(l_group_query) > 0 )
		{
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM1',:l_param1) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM2',:l_param2) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM3',:l_param3) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM4',:l_param4) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM5',:l_param5) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM6',:l_param6) INTO :l_group_query FROM DUAL;
			
			fprintf(fl_userlog,"GROUP QUERY :|%s|\n",l_group_query);

			EXEC SQL PREPARE CSV2_GROUP FROM :l_group_query;
			EXEC SQL DECLARE csv2_group CURSOR FOR CSV2_GROUP;
			EXEC SQL OPEN csv2_group;

			if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
			{
				fprintf(fl_userlog,"Error : Cursor Open csv2_group ORA ERROR :|%d|\n",sqlca.sqlcode);
			}

			for(;;)
			{
				EXEC SQL FETCH csv2_group
				   	 INTO :l_group_parameter;

				if((sqlca.sqlcode == 1403)||(l_group_break_flag == 1))
				break;

				if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Cursor Fetch csv2_group ORA ERROR :|%d|\n",sqlca.sqlcode);
				}

				/********* Split Group Parameter ************************************/
			
				fprintf(fl_userlog,"l_group_pos:|%s|\n",l_group_pos);
				
				if(CO_SplitStr(l_group_pos,COMASEP,&l_group_pos_no,&l_group_pos_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 	fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_pos);
				 	APL_GOBACK_FAIL
				}
				
				fprintf(fl_userlog,"l_group_parameter:|%s|\n",l_group_parameter);
				
				if(CO_SplitStr(l_group_parameter,CAPSEP,&l_group_parameter_no,&l_group_parameter_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 	fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_parameter);
				 	APL_GOBACK_FAIL
				}

				fprintf(fl_userlog,"l_group_pos_no:|%d|l_group_parameter_no:|%d|\n",l_group_pos_no,l_group_parameter_no);
				
				if((l_group_pos_no > 0) && (l_group_parameter_no > 0)
					&& (l_group_pos_no == l_group_parameter_no))
				{	
					l_group_break_flag=0;
				
					for(i=0;i<l_group_pos_no;i++)
					{
						if(!strcmp(l_group_pos_value[i],"2"))
						{
							fprintf(fl_userlog,"l_param2:|%s|l_prev_param2:|%s|\n",l_param2,l_prev_param2);
							
							if(!strcmp(l_param2,l_prev_param2))
							{
								strcpy(l_param2,l_group_parameter_value[i]);
								strcpy(l_prev_param2,l_param2);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"3"))
						{
							fprintf(fl_userlog,"l_param3:|%s|l_prev_param3:|%s|\n",l_param3,l_prev_param3);
							
							if(!strcmp(l_param3,l_prev_param3))
							{
								strcpy(l_param3,l_group_parameter_value[i]);
								strcpy(l_prev_param3,l_param3);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"4"))
						{
							fprintf(fl_userlog,"l_param4:|%s|l_prev_param4:|%s|\n",l_param4,l_prev_param4);
							
							if(!strcmp(l_param4,l_prev_param4))
							{
								strcpy(l_param4,l_group_parameter_value[i]);
								strcpy(l_prev_param4,l_param4);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"5"))
						{
							fprintf(fl_userlog,"l_param5:|%s|l_prev_param5:|%s|\n",l_param5,l_prev_param5);
							
							if(!strcmp(l_param5,l_prev_param5))
							{
								strcpy(l_param5,l_group_parameter_value[i]);
								strcpy(l_prev_param5,l_param5);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"6"))
						{
							fprintf(fl_userlog,"l_param6:|%s|l_prev_param6:|%s|\n",l_param6,l_prev_param6);
							
							if(!strcmp(l_param6,l_prev_param6))
							{
								strcpy(l_param6,l_group_parameter_value[i]);
								strcpy(l_prev_param6,l_param6);
							}
							else
								l_group_break_flag=1;
						}
					}
				}
				else
				{
					fprintf(fl_userlog,"Error: Mismatch in Group Parameters :|%d||%d|",l_group_pos_no,l_group_parameter_no);
					break;
				}
				

			/************************************************************************/
				
				fprintf(fl_userlog,"l_param1:|%s|\n",l_param1);
				fprintf(fl_userlog,"l_param2:|%s|\n",l_param2);
				fprintf(fl_userlog,"l_param3:|%s|\n",l_param3);
				fprintf(fl_userlog,"l_param4:|%s|\n",l_param4);
				fprintf(fl_userlog,"l_param5:|%s|\n",l_param5);
				fprintf(fl_userlog,"l_param6:|%s|\n",l_param6);


			/**** Stored procedure for REPORT DETAILS GROUPING *************************/

			fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID 36:|%s|\n",l_rept_id);
			EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
					:l_param2,:l_param3,:l_param4,
					:l_param5,:l_param6,
					:l_table_query,:l_table_query1,:l_table_query2,
					:l_table_query3,:l_table_query4,:l_table_query5,
					:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
					:l_group_desc,:l_error_desc);

			strcpy(table_query,l_table_query);
			strcat(table_query," ");
			
			if(strlen(l_table_query1) > 0)
			{
				strcat(table_query,l_table_query1);
				strcat(table_query," ");
			}
			if(strlen(l_table_query2) > 0)
			{
				strcat(table_query,l_table_query2);
				strcat(table_query," ");
			}
			if(strlen(l_table_query3) > 0)
			{
				strcat(table_query,l_table_query3);
				strcat(table_query," ");
			}
			if(strlen(l_table_query4) > 0)
			{
				strcat(table_query,l_table_query4);
				strcat(table_query," ");
			}
			if(strlen(l_table_query5) > 0)
			{
				strcat(table_query,l_table_query5);
				strcat(table_query," ");
			}
			
			strcat(table_query,APL_NULL_STRING);

				
			fprintf(fl_userlog,"After Stored Procedure SP_REPORT_DETAIL ORA ERROR 14:|%d|\n",sqlca.sqlcode);
			
			if(sqlca.sqlcode < 0)
			{
				fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
			}
			
			//fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
			fprintf(fl_userlog,"l_criteria_query1:|%s|\n",l_criteria_query1);
			fprintf(fl_userlog,"l_criteria_query2:|%s|\n",l_criteria_query2);
			fprintf(fl_userlog,"l_criteria_query3:|%s|\n",l_criteria_query3);
			fprintf(fl_userlog,"l_group_desc:|%s|\n",l_group_desc);

			/********* Group Description ****************************************/
			
			if(strlen(l_group_desc) > 0)
			{
				fprintf(l_report_CSV2,"%s\n\n",l_group_desc);
			}


			/****** Before table ***********************************************/
			
			if(strlen(h_report_details_struct.before_table) > 0)
			{	
				fprintf(l_report_CSV2,"%s\n",h_report_details_struct.before_table);
			}
			
			l_before_table = h_report_details_struct.before_table_brk;
			while(l_before_table > 0)
			{
				fprintf(l_report_CSV2,"\n");
				l_before_table --;
			}

			/******* Column Heading *******************************************/

			/****** Multiple Column Level **************************************/

			strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
			strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
			strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
			
			fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);

			if(strlen(l_multiple_col_flag) > 0)
			{
				fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
				fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);

				if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
						&l_multiple_col_header_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
					 APL_GOBACK_FAIL
				}

				if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
						&l_multiple_colspan_sep_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
					 APL_GOBACK_FAIL
				}


				fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
				fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);

				
				if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
				{
					for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
					{
						for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
						{				

						if(int_a == int_b )
						{
						
						strcpy(l_level_header,l_multiple_col_header_value[int_a]);
						strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

						fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
						fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);

						if (CO_SplitStr(l_level_header,
								SEMISEP,
								&l_level_header_no,
								&l_level_header_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
							 APL_GOBACK_FAIL
						}

						if (CO_SplitStr(l_level_colspan,
								SEMISEP,
								&l_level_colspan_no,
								&l_level_colspan_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
							 APL_GOBACK_FAIL
						}

						fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
						fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);

						if(l_level_header_no == l_level_colspan_no)
						{

						for(int_aa=0;int_aa<l_level_header_no;int_aa++)
						{
							for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
							{
								if(int_aa == int_bb)
								{	
								
								strcpy(l_level_column,l_level_header_value[int_aa]);
								strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

								fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
								fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
								
								if(strlen(l_level_column) > 0)
									fprintf(l_report_CSV2,"%s,", l_level_column);
								else
									fprintf(l_report_CSV2,",");

								for(i=0;i<(atoi(l_level_col_span)-1);i++)
								{
									fprintf(l_report_CSV2,",");

								}


								}
							}
						}
						fprintf(l_report_CSV2,"\n");

						}/*** End Of Inner Condition check *****/

						}
						
												
						}/*** End Of 2st Main For Loop *******/

					}/*** End Of 1st Main For Loop *******/

				}/*** End Of Multiple col condition check *****/

				l_column_no=h_report_details_struct.no_of_columns;
				l_no_of_columns = h_report_details_struct.no_of_columns;
			}
			else
			{			
				fprintf(fl_userlog,"COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
				printf("COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
				
				/**** Split the Column Header and print *****************/
				
				strcpy(l_column_header,h_report_details_struct.column_hdr);
				if (CO_SplitStr(l_column_header,COMASEP,&l_col_no,&l_col_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_header);
					 APL_GOBACK_FAIL
				}

				/***** Table Column Heading and its records  *********/
				

				for(i=0;i<l_col_no;i++)
				{
					strcpy(l_column_value,l_col_value[i]);

					if(i+1==l_col_no)
						fprintf(l_report_CSV2,"%s",l_column_value);
					else
						fprintf(l_report_CSV2,"%s,",l_column_value);
				}
				fprintf(l_report_CSV2,"\n");

				l_column_no=h_report_details_struct.no_of_columns;
				l_no_of_columns = h_report_details_struct.no_of_columns;
				
				l_col_hdr = h_report_details_struct.col_hdr_brk;
				
			}

			EXEC SQL PREPARE CSV2_SUB1 FROM :table_query;	
			EXEC SQL DECLARE csv2tablequery1 CURSOR FOR CSV2_SUB1;
			EXEC SQL OPEN csv2tablequery1;

			fprintf(l_report_CSV2,"\n");

			l_fetch_count=0;

			for(;;)
			{
				EXEC SQL FETCH csv2tablequery1
					INTO :l_table_parameter;

				if(sqlca.sqlcode == 1403)
				{
					fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
					if(l_fetch_count == 0)
					{
						fprintf(l_report_CSV2,"\nNO RECORDS FOUND\n",l_column_no);
						l_remove_count ++;
					}
					break;
				}

				if(sqlca.sqlcode < 0)
				{
				   fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
					break;
				}

				strcpy(l_column_parameter,l_table_parameter);
				
				/******* Split the string and fetch the column data into seperate variables *********/
			
				if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
				{
					CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
					APL_GOBACK_FAIL
				}

				/***** For Number Formatting ***************************************************/

				strcpy(l_format_col_pos,h_report_details_struct.format_col_pos);
				if (CO_SplitStr(l_format_col_pos,COMASEP,&l_format_col_no,&l_format_col_val) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_format_col_pos);
					 APL_GOBACK_FAIL
				}


				for(j=0;j<l_column_num;j++)
				{
					strcpy(l_column,l_column_val[j]);
					
					l_format_col_flag = 0;
					if(l_format_col_no > 0)
					{
						for (k=0;k<l_format_col_no;k++)
						{
							strcpy(l_format_col_value,l_format_col_val[k]);

							if(j==(atoi(l_format_col_value)-1))
								l_format_col_flag = 1;
						}

						if((strlen(l_column) > 0) && (strcmp(l_column," ")))
						{
							if(l_format_col_flag == 1)
							{
								EXEC SQL CALL SP_NUMBER_FORMATTING(:l_column,:l_error_desc);

								fprintf(l_report_CSV2,"%s,",l_column);
							}
							if(j+1 == l_column_num)
								fprintf(l_report_CSV2,"%s",l_column);
							else
							{
								fprintf(l_report_CSV2,"%s,",l_column);
							}
						}
						else
							if(j+1 != l_column_num)
								fprintf(l_report_CSV2,",");					}
					else
					{
						if((strlen(l_column) > 0) && (strcmp(l_column," ")))
						{
							if(j+1 == l_column_num)
								fprintf(l_report_CSV2,"%s",l_column);
							else
								fprintf(l_report_CSV2,"%s,",l_column);
						}
						else
						{
							if(j+1 != l_column_num)
								fprintf(l_report_CSV2,",");	
						}							
					}

				}
				fprintf(l_report_CSV2,"\n");

				/***********************************************************************************/

				l_fetch_count ++;

			}
			EXEC SQL CLOSE csv2tablequery1;

			fprintf(l_report_CSV2,"\n");

		   	/********* For Criteria column value display ************************/
			
			if(h_report_details_struct.tot_criteria_cols > 0)
			{
				if(strlen(h_report_details_struct.criteria_col1_query) > 0)
				{
					EXEC SQL PREPARE CSV2_CR1 FROM :l_criteria_query1;
					EXEC SQL DECLARE CSV2_criteria1 CURSOR FOR CSV2_CR1;
					EXEC SQL OPEN CSV2_criteria1;
					
					if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					{
						fprintf(fl_userlog,"Error : Failed to Open CSV2_criteria1 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
					}

					for(;;)
					{
					EXEC SQL FETCH CSV2_criteria1 INTO :l_criteria_value1;
					
					       if(sqlca.sqlcode == 1403)
					       break;

					       if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					       {
							fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
							break;
					       }
					}
					EXEC SQL CLOSE CSV2_criteria1;

					/****** For Grand Total Of Criteria Value *********/
					
					
					if(strcmp(l_criteria_value1,APL_NULL_STRING))
					{
					EXEC SQL SELECT (:l_criteria_value1) INTO :l_criteria1_total FROM DUAL;
					
					l_grand_total1=l_grand_total1+l_criteria1_total;
					
					fprintf(fl_userlog,"l_grand_total1 :|%lf|\n",l_grand_total1);

					fprintf(l_report_CSV2,"\n%s = %s\n",h_report_details_struct.criteria_col1_name,l_criteria_value1);
					}
				}

				if(strlen(h_report_details_struct.criteria_col2_query) > 0)
				{
					EXEC SQL PREPARE CSV2_CR2 FROM :l_criteria_query2;
					EXEC SQL DECLARE CSV2_criteria2 CURSOR FOR CSV2_CR2;
					EXEC SQL OPEN CSV2_criteria2;
					
					if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					{
						fprintf(fl_userlog,"Error : Failed to Open CSV2_criteria2 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
					}

					for(;;)
					{
					EXEC SQL FETCH CSV2_criteria2 INTO :l_criteria_value2;
					
					       if(sqlca.sqlcode == 1403)
					       break;

					       if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					       {
							fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
							break;
					       }
					}
					EXEC SQL CLOSE CSV2_criteria2;
					
				
					if(strcmp(l_criteria_value2,APL_NULL_STRING))
					{
					EXEC SQL SELECT (:l_criteria_value2) INTO :l_criteria2_total FROM DUAL;
					
					l_grand_total2=l_grand_total2+l_criteria2_total;
					
					fprintf(fl_userlog,"l_grand_total2 :|%lf|\n",l_grand_total2);

					fprintf(l_report_CSV2,"\n%s = %s\n",h_report_details_struct.criteria_col2_name,l_criteria_value2);
					}

				}

				if(strlen(h_report_details_struct.criteria_col3_query) > 0)
				{
					EXEC SQL PREPARE CSV2_CR3 FROM :l_criteria_query3;
					EXEC SQL DECLARE CSV2_criteria3 CURSOR FOR CSV2_CR3;
					EXEC SQL OPEN CSV2_criteria3;
					
					if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					{
						fprintf(fl_userlog,"Error : Failed to Open CSV2_criteria3 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
					}

					for(;;)
					{
					EXEC SQL FETCH CSV2_criteria3 INTO :l_criteria_value3;
					
					       if(sqlca.sqlcode == 1403)
					       break;

					       if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					       {
							fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
							break;
					       }
					}
					EXEC SQL CLOSE CSV2_criteria3;
						
			
					if(strcmp(l_criteria_value3,APL_NULL_STRING))
					{
					EXEC SQL SELECT (:l_criteria_value3) INTO :l_criteria3_total FROM DUAL;
					
					l_grand_total3=l_grand_total3+l_criteria3_total;
					
					fprintf(fl_userlog,"l_grand_total3 :|%lf|\n",l_grand_total3);

					fprintf(l_report_CSV2,"\n%s = %s\n",h_report_details_struct.criteria_col3_name,l_criteria_value3);
					}

				}
			}

			/******* Complex Criteria Part *********************************************/

			strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
			strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
			strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
			strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

			if(strlen(complex_criteria_query) > 0)
			{
			
			EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
					:complex_criteria_query,
					'@PARAM1',:l_param1),
					'@PARAM2',:l_param2),
					'@PARAM3',:l_param3),
					'@PARAM4',:l_param4),
					'@PARAM5',:l_param5),
					'@PARAM6',:l_param6),
					REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
					:complex_criteria_query1,
					'@PARAM1',:l_param1),
					'@PARAM2',:l_param2),
					'@PARAM3',:l_param3),
					'@PARAM4',:l_param4),
					'@PARAM5',:l_param5),
					'@PARAM6',:l_param6)
				INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;
	
			strcat(complex_criteria_query,complex_criteria_query1);

			
			fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);

			EXEC SQL PREPARE CSV2_CMPX_CURR1 FROM :complex_criteria_query;

			EXEC SQL DECLARE csv2_complex_curr1 CURSOR FOR CSV2_CMPX_CURR1;

			fprintf(fl_userlog,"After DECLARE csv2_complex_curr1 :|%d|\n",sqlca.sqlcode);

			EXEC SQL OPEN csv2_complex_curr1;

			EXEC SQL FETCH csv2_complex_curr1 INTO :l_complex_parameter;

			fprintf(fl_userlog,"After FETCH csv2_complex_curr1 :|%d|\n",sqlca.sqlcode);

			EXEC SQL CLOSE csv2_complex_curr1;

			fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);

			if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
				APL_GOBACK_FAIL
			}
			
			fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);

			if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
				APL_GOBACK_FAIL
			}


			fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
			fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);

			l_complex_break_flag = 0;
			
			if(l_complex_num == l_complex_pos_num)
			{

			for(i=0;i<l_column_num;i++)
			{
				for(j=0;j<l_complex_pos_num;j++)
				{

				strcpy(l_complex_pos_column,l_complex_pos_val[j]);

				if((i==0)&&(j==0))
				{
					if(strlen(complex_criteria_label) > 0)
					{
						fprintf(l_report_CSV2,"%s\n",complex_criteria_label);
						l_complex_break_flag=1;
					}
					else
					fprintf(l_report_CSV2,"\n");
				}

				if(i== (atoi(l_complex_pos_column)-1))
				{				  
				  strcpy(l_complex_column,l_complex_val[j]);

				  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);

				  l_complex_break_flag=1;
				  			

				  if(strlen(l_complex_column) > 0)
					fprintf(l_report_CSV2,"%s,",l_complex_column);
				  else
					fprintf(l_report_CSV2,",");
				  				
				  break;
				}
				else
				{
				     l_complex_break_flag = 0;
				     continue;
				} 

				}
				     
				if(i != 0)
				{
				  if(l_complex_break_flag != 1)
				     fprintf(l_report_CSV2,",");
				}
			}

			}
			else
			{
				fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
			}

			fprintf(l_report_CSV2,"\n");

			}
			
			/*****************	End Of Complex Part     *********************/


			/****** After table ****************************************/
	
			l_after_table = h_report_details_struct.after_table_brk;
			while(l_after_table > 0)
			{
				fprintf(l_report_CSV2,"\n");
				l_after_table --;
			}

			if(strlen(h_report_details_struct.after_table) > 0)
			{		
				fprintf(l_report_CSV2,"%s\n",h_report_details_struct.after_table);
			}
  
			/******** Table Footer note ****************************************/
	
			l_table_footer = h_report_details_struct.table_footer_brk;
			if(l_table_footer > 0)
			{
				fprintf(l_report_CSV2,"\n");
				l_table_footer --;
			}
		
			if(strlen(h_report_details_struct.table_footer) > 0)
			{
				fprintf(l_report_CSV2,"%s\n",h_report_details_struct.table_footer);
			}

			l_table = h_report_main_struct.table_brk;
			if(l_table > 0)
			{
				fprintf(l_report_CSV2,"\n");
				l_table --;
			}

			if(l_fetch_count > 0 )
			{
			
			for(m=0;m<l_complex_num;m++)
			{
				if(m == 0)
				{
					strcpy(l_complex_parameter1,l_complex_val[m]);
					g_complex_parameter1=g_complex_parameter1+atof(l_complex_parameter1);
				}
				else if(m == 1)
				{
					strcpy(l_complex_parameter2,l_complex_val[m]);
					g_complex_parameter2=g_complex_parameter2+atof(l_complex_parameter2);
				}
				else if(m == 2)
				{
					strcpy(l_complex_parameter3,l_complex_val[m]);
					g_complex_parameter3=g_complex_parameter3+atof(l_complex_parameter3);
				}
				else if(m == 3)
				{
					strcpy(l_complex_parameter4,l_complex_val[m]);
					g_complex_parameter4=g_complex_parameter4+atof(l_complex_parameter4);
				}
				else if(m == 4)
				{
					strcpy(l_complex_parameter5,l_complex_val[m]);
					g_complex_parameter5=g_complex_parameter5+atof(l_complex_parameter5);
				}
				else if(m == 5)
				{
					strcpy(l_complex_parameter6,l_complex_val[m]);
					g_complex_parameter6=g_complex_parameter6+atof(l_complex_parameter6);
				}
				else if(m == 6)
				{
					strcpy(l_complex_parameter7,l_complex_val[m]);
					g_complex_parameter7=g_complex_parameter7+atof(l_complex_parameter7);
				}
				else if(m == 7)
				{
					strcpy(l_complex_parameter8,l_complex_val[m]);
					g_complex_parameter8=g_complex_parameter8+atof(l_complex_parameter8);
				}
				else if(m == 8)
				{
					strcpy(l_complex_parameter9,l_complex_val[m]);
					g_complex_parameter9=g_complex_parameter9+atof(l_complex_parameter9);
				}
				else if(m == 9)
				{
				        strcpy(l_complex_parameter10,l_complex_val[m]);
				        g_complex_parameter10=g_complex_parameter10+atof(l_complex_parameter10);
				}
				else if(m == 10)
				{
					strcpy(l_complex_parameter11,l_complex_val[m]);
					g_complex_parameter11=g_complex_parameter11+atof(l_complex_parameter11);
				}
				else if(m == 11)
				{
					strcpy(l_complex_parameter12,l_complex_val[m]);			
					g_complex_parameter12=g_complex_parameter12+atof(l_complex_parameter12);
				}
				else if(m == 12)
				{
					strcpy(l_complex_parameter13,l_complex_val[m]);
					g_complex_parameter13=g_complex_parameter13+atof(l_complex_parameter13);
				}
				else if(m == 13)
				{
					strcpy(l_complex_parameter14,l_complex_val[m]);
					g_complex_parameter14=g_complex_parameter14+atof(l_complex_parameter14);
				}
				else if(m == 14)
				{
					strcpy(l_complex_parameter15,l_complex_val[m]);
					g_complex_parameter15=g_complex_parameter15+atof(l_complex_parameter15);
				}
				else if(m == 15)
				{
					strcpy(l_complex_parameter16,l_complex_val[m]);
					g_complex_parameter16=g_complex_parameter16+atof(l_complex_parameter16);
				}
				else if(m == 16)
				{
					strcpy(l_complex_parameter17,l_complex_val[m]);
					g_complex_parameter17=g_complex_parameter17+atof(l_complex_parameter17);
				}
				else if(m == 17)
				{
					strcpy(l_complex_parameter18,l_complex_val[m]);
					g_complex_parameter18=g_complex_parameter18+atof(l_complex_parameter18);
				}
				else if(m == 18)
				{
					strcpy(l_complex_parameter19,l_complex_val[m]);
					g_complex_parameter19=g_complex_parameter19+atof(l_complex_parameter19);
				}
				else if(m == 19)
				{
					strcpy(l_complex_parameter20,l_complex_val[m]);
					g_complex_parameter20=g_complex_parameter20+atof(l_complex_parameter20);
				}
			}

			}/*** End Of Fetch Count check ******/

			}/*** End Of Grouping For Loop ******/
			EXEC SQL CLOSE csv2_group;
		}
		else
		{	
		
		/**** Stored procedure for REPORT DETAILS **********************/
			
			fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID 37:|%s|\n",l_rept_id);		
			EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
					:l_param2,:l_param3,:l_param4,
					:l_param5,:l_param6,
					:l_table_query,:l_table_query1,:l_table_query2,
					:l_table_query3,:l_table_query4,:l_table_query5,
					:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
					:l_group_desc,:l_error_desc);

			strcpy(table_query,l_table_query);
			strcat(table_query," ");
			
			if(strlen(l_table_query1) > 0)
			{
				strcat(table_query,l_table_query1);
				strcat(table_query," ");
			}
			if(strlen(l_table_query2) > 0)
			{
				strcat(table_query,l_table_query2);
				strcat(table_query," ");
			}
			if(strlen(l_table_query3) > 0)
			{
				strcat(table_query,l_table_query3);
				strcat(table_query," ");
			}
			if(strlen(l_table_query4) > 0)
			{
				strcat(table_query,l_table_query4);
				strcat(table_query," ");
			}
			if(strlen(l_table_query5) > 0)
			{
				strcat(table_query,l_table_query5);
				strcat(table_query," ");
			}
			
			strcat(table_query,APL_NULL_STRING);

			
		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
		}
		
		//fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
		fprintf(fl_userlog,"l_criteria_query1:|%s|\n",l_criteria_query1);
		fprintf(fl_userlog,"l_criteria_query2:|%s|\n",l_criteria_query2);
		fprintf(fl_userlog,"l_criteria_query3:|%s|\n",l_criteria_query3);

		/****** Before table ***********************************************************************/
		
		if(strlen(h_report_details_struct.before_table) > 0)
		{	
			fprintf(l_report_CSV2,"%s\n",h_report_details_struct.before_table);
		}
		
		l_before_table = h_report_details_struct.before_table_brk;
		while(l_before_table > 0)
		{
			fprintf(l_report_CSV2,"\n");
			l_before_table --;
		}

		/******* Column Heading ***********************************/

		/****** Multiple Column Level **************************************/

		strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
		strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
		strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
		
		fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);

		if(strlen(l_multiple_col_flag) > 0)
		{
			fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
			fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);

			if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
					&l_multiple_col_header_value) == APL_FAILURE)
			{
				 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
				 APL_GOBACK_FAIL
			}

			if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
					&l_multiple_colspan_sep_value) == APL_FAILURE)
			{
				 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
				 APL_GOBACK_FAIL
			}


			fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
			fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);


			if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
			{
				for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
				{
					for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
					{
				
					if(int_a == int_b )
					{
					
					strcpy(l_level_header,l_multiple_col_header_value[int_a]);
					strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

					fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
					fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);

					if (CO_SplitStr(l_level_header,
							SEMISEP,
							&l_level_header_no,
							&l_level_header_value) == APL_FAILURE)
					{
						 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
						 APL_GOBACK_FAIL
					}

					if (CO_SplitStr(l_level_colspan,
							SEMISEP,
							&l_level_colspan_no,
							&l_level_colspan_value) == APL_FAILURE)
					{
						 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
						 APL_GOBACK_FAIL
					}

					fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
					fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);

					if(l_level_header_no == l_level_colspan_no)
					{

					for(int_aa=0;int_aa<l_level_header_no;int_aa++)
					{
						for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
						{
							if(int_aa == int_bb)
							{	
							
							strcpy(l_level_column,l_level_header_value[int_aa]);
							strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

							fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
							fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
							
							if(strlen(l_level_column) > 0)
								fprintf(l_report_CSV2,"%s,", l_level_column);
							else
								fprintf(l_report_CSV2,",");


							for(i=0;i<(atoi(l_level_col_span)-1);i++)
							{
								fprintf(l_report_CSV2,",");

							}

							}
						}
					}
					fprintf(l_report_CSV2,"\n");

					}/*** End Of Inner Condition check *****/

					}
					
											
					}/*** End Of 2st Main For Loop *******/

				}/*** End Of 1st Main For Loop *******/

			}/*** End Of Multiple col condition check *****/

			l_column_no=h_report_details_struct.no_of_columns;
			l_no_of_columns = h_report_details_struct.no_of_columns;

		}
		else
		{		
			fprintf(fl_userlog,"COLUMN HEADER:|%s|\n",h_report_details_struct.column_hdr);
			printf("COLUMN HEADER:|%s|\n",h_report_details_struct.column_hdr);
			//fflush(fl_userlog);
			/**** Split the Column Header and print *****************/
			
			strcpy(l_column_header,h_report_details_struct.column_hdr);
			if (CO_SplitStr(l_column_header,COMASEP,&l_col_no,&l_col_value) == APL_FAILURE)
			{
				 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_header);
				 APL_GOBACK_FAIL
			}

			/***** Table Column Heading and its records  *********/
			
			for(i=0;i<l_col_no;i++)
			{
				strcpy(l_column_value,l_col_value[i]);

				if(i+1==l_col_no)
					fprintf(l_report_CSV2,"%s",l_column_value);
				else
					fprintf(l_report_CSV2,"%s,",l_column_value);
			}

			l_column_no=h_report_details_struct.no_of_columns;
			l_no_of_columns = h_report_details_struct.no_of_columns;
			
			l_col_hdr = h_report_details_struct.col_hdr_brk;
				
		}
				
		fprintf(l_report_CSV2,"\n");
		
		EXEC SQL PREPARE CSV_SUB FROM :table_query;	
		EXEC SQL DECLARE csvtablequery CURSOR FOR CSV_SUB;
		EXEC SQL OPEN csvtablequery;

		l_fetch_count=0;

		for(;;)
		{
			EXEC SQL FETCH csvtablequery
				INTO :l_table_parameter;

			if(sqlca.sqlcode == 1403)
			 {
			    fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
			    if(l_fetch_count == 0)
			    {
			       fprintf(l_report_CSV2,"\nNO RECORDS FOUND\n");
					 l_remove_count ++;
			    }
			    break;
			 }

			 if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
			 {
			    fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
			    break;
			 }

			strcpy(l_column_parameter,l_table_parameter);
			
			/******* Split the string and fetch the column date into seperate variables *********/
			
			if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
			 	fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
			 	APL_GOBACK_FAIL
			}

			/***** For Number Formatting ***************************************************/

			strcpy(l_format_col_pos,h_report_details_struct.format_col_pos);
			if (CO_SplitStr(l_format_col_pos,COMASEP,&l_format_col_no,&l_format_col_val) == APL_FAILURE)
			{
				 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_format_col_pos);
				 APL_GOBACK_FAIL
			}

			/* 
			for(j=0;j<l_column_num;j++)
			{
				strcpy(l_column,l_column_val[j]);
				
				if((strlen(l_column) > 0) && (strcmp(l_column," ")))
					fprintf(l_report_CSV2,"%s,",l_column);
				else
					fprintf(l_report_CSV2,",");
			}
			*/
		/*Pasha Added for AMFI Enhancement Report Naming convention */
				for(j=0;j<l_column_num;j++)

				{
					strcpy(l_column,l_column_val[j]);
					
					l_format_col_flag = 0;
					if(l_format_col_no > 0)
					{
						for (k=0;k<l_format_col_no;k++)
						{
							strcpy(l_format_col_value,l_format_col_val[k]);

							if(j==(atoi(l_format_col_value)-1))
								l_format_col_flag = 1;
						}
						if((strlen(l_column) > 0) && (strcmp(l_column," ")))
						{
							if(l_format_col_flag == 1)
							{
								EXEC SQL CALL SP_NUMBER_FORMATTING(:l_column,:l_error_desc);
							}
							if(j+1 == l_column_num)
								fprintf(l_report_CSV2,"%s",l_column);
							else
								fprintf(l_report_CSV2,"%s,",l_column);
						}
						else
						{
							if(j+1 != l_column_num)
								fprintf(l_report_CSV2,",");
							//fflush(fl_userlog);
						}
					}
					else
					{
						if((strlen(l_column) > 0) && (strcmp(l_column," ")))
						{
							if(j+1 == l_column_num)
								fprintf(l_report_CSV2,"%s",l_column);
							else
								fprintf(l_report_CSV2,"%s,",l_column);
						}
						else
						{
							if(j+1 != l_column_num)
								fprintf(l_report_CSV2,",");		
						}							
				   }

				}



			fprintf(l_report_CSV2,"\n");

			/***********************************************************************************/

			l_fetch_count ++;

		}
		EXEC SQL CLOSE csvtablequery;
			
		fprintf(l_report_CSV2,"\n");

		/********* For Criteria column value display ********************************************/
		
		if(h_report_details_struct.tot_criteria_cols > 0)
		{
			if(strlen(h_report_details_struct.criteria_col1_query) > 0)
			{
				EXEC SQL PREPARE CSV_CR1 FROM :l_criteria_query1;
				EXEC SQL DECLARE csvcriteria1 CURSOR FOR CSV_CR1;
				EXEC SQL OPEN csvcriteria1;
				
				if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Failed to Open csvcriteria1 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
				}

				for(;;)
				{
				EXEC SQL FETCH csvcriteria1 INTO :l_criteria_value1;
				
				       if(sqlca.sqlcode == 1403)
				       break;

				       if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				       {
				  		fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
				  		break;
				       }
				}
				EXEC SQL CLOSE csvcriteria1;

				/****** For Grand Total Of Criteria Value *********/
					

				if(strcmp(l_criteria_value1,APL_NULL_STRING))
				{
				EXEC SQL SELECT (:l_criteria_value1) INTO :l_criteria1_total FROM DUAL;
				
				l_grand_total1=l_grand_total1+l_criteria1_total;
				
				fprintf(fl_userlog,"l_grand_total1 :|%lf|\n",l_grand_total1);

				fprintf(l_report_CSV2,"%s = %s\n",h_report_details_struct.criteria_col1_name,l_criteria_value1);
				}
			}

			if(strlen(h_report_details_struct.criteria_col2_query) > 0)
			{
				EXEC SQL PREPARE CSV_CR2 FROM :l_criteria_query2;
				EXEC SQL DECLARE csvcriteria2 CURSOR FOR CSV_CR2;
				EXEC SQL OPEN csvcriteria2;
				
				if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Failed to Open csvcriteria2 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
				}

				for(;;)
				{
				EXEC SQL FETCH csvcriteria2 INTO :l_criteria_value2;
				
				       if(sqlca.sqlcode == 1403)
				       break;

				       if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				       {
				  		fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
					  	break;
				       }
				}
				EXEC SQL CLOSE csvcriteria2;
				
			
				if(strcmp(l_criteria_value2,APL_NULL_STRING))
				{
				EXEC SQL SELECT (:l_criteria_value2) INTO :l_criteria2_total FROM DUAL;
				
				l_grand_total2=l_grand_total2+l_criteria2_total;
				
				fprintf(fl_userlog,"l_grand_total2 :|%lf|\n",l_grand_total2);

				fprintf(l_report_CSV2,"%s = %s\n",h_report_details_struct.criteria_col2_name,l_criteria_value2);
				}

			}

			if(strlen(h_report_details_struct.criteria_col3_query) > 0)
			{
				EXEC SQL PREPARE CSV_CR3 FROM :l_criteria_query3;
				EXEC SQL DECLARE csvcriteria3 CURSOR FOR CSV_CR3;
				EXEC SQL OPEN csvcriteria3;
				
				if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Failed to Open csvcriteria3 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
				}

				for(;;)
				{
				EXEC SQL FETCH csvcriteria3 INTO :l_criteria_value3;
				
				       if(sqlca.sqlcode == 1403)
				       break;

				       if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				       {
				  		fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
					  	break;
				       }
				}
				EXEC SQL CLOSE criteria3;
				
				
				if(strcmp(l_criteria_value3,APL_NULL_STRING))
				{
				EXEC SQL SELECT (:l_criteria_value3) INTO :l_criteria3_total FROM DUAL;
				
				l_grand_total3=l_grand_total3+l_criteria3_total;
				
				fprintf(fl_userlog,"l_grand_total3 :|%lf|\n",l_grand_total3);

				fprintf(l_report_CSV2,"%s = %s\n",h_report_details_struct.criteria_col3_name,l_criteria_value3);
				}

			}
		}

		/******* Complex Criteria Part *********************************************/


		strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
		strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
		strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
		strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

		fprintf(fl_userlog,"Before Complex Part -- l_fetch_count 10:|%d|\n",l_fetch_count);

		if(l_fetch_count > 0)
		{

		if(strlen(complex_criteria_query) > 0)
		{
		
		EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
				:complex_criteria_query,
				'@PARAM1',:l_param1),
				'@PARAM2',:l_param2),
				'@PARAM3',:l_param3),
				'@PARAM4',:l_param4),
				'@PARAM5',:l_param5),
				'@PARAM6',:l_param6),
				REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
				:complex_criteria_query1,
				'@PARAM1',:l_param1),
				'@PARAM2',:l_param2),
				'@PARAM3',:l_param3),
				'@PARAM4',:l_param4),
				'@PARAM5',:l_param5),
				'@PARAM6',:l_param6)
			INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;

		strcat(complex_criteria_query,complex_criteria_query1);

		
		fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);

		EXEC SQL PREPARE CSV2_CMPX_CURR2 FROM :complex_criteria_query;

		EXEC SQL DECLARE csv2_complex_curr2 CURSOR FOR CSV2_CMPX_CURR2;

		fprintf(fl_userlog,"After DECLARE csv2_complex_curr2 :|%d|\n",sqlca.sqlcode);

		EXEC SQL OPEN csv2_complex_curr2;

		EXEC SQL FETCH csv2_complex_curr2 INTO :l_complex_parameter;

		fprintf(fl_userlog,"After FETCH csv2_complex_curr2 :|%d|\n",sqlca.sqlcode);

		EXEC SQL CLOSE csv2_complex_curr2;

		fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);

		if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
		{
			CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		 	fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
		 	APL_GOBACK_FAIL
		}
		
		fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);

		if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
		{
			CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		 	fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
		 	APL_GOBACK_FAIL
		}


		fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
		fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);

		l_complex_break_flag = 0;

		
		if(l_complex_num == l_complex_pos_num)
		{

		for(i=0;i<l_column_num;i++)
		{
			for(j=0;j<l_complex_pos_num;j++)
			{

			strcpy(l_complex_pos_column,l_complex_pos_val[j]);

			if((i==0)&&(j==0))
			{
				if(strlen(complex_criteria_label) > 0)
				{
					fprintf(l_report_CSV2,"%s,",complex_criteria_label);
			  		l_complex_break_flag=1;
				}
				else
			     	fprintf(l_report_CSV2,",");
			}

			if(i== (atoi(l_complex_pos_column)-1))
			{				  
			  strcpy(l_complex_column,l_complex_val[j]);

			  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);

			  l_complex_break_flag=1;
 
			  if(strlen(l_complex_column) > 0)
				fprintf(l_report_CSV2,"%s,",l_complex_column);
			  else
				fprintf(l_report_CSV2,",");
			
			  break;
			}
			else
			{
			     l_complex_break_flag = 0;
			     continue;
			} 

			}
			     
			if(i != 0)
			{
			  if(l_complex_break_flag != 1)
			     fprintf(l_report_CSV2,",");
			}
		}

		}
		else
		{
			fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
		}

		fprintf(l_report_CSV2,"\n");

		}

		}
		else
		{			
			fprintf(fl_userlog," No Records Found -- So No Need To Display Criteria \n");
		}
		

		/***************************************************************************/

		
		/****** After table *******************************************/
		
		l_after_table = h_report_details_struct.after_table_brk;
		while(l_after_table > 0)
		{
			fprintf(l_report_CSV2,"\n");
			l_after_table --;
		}

		if(strlen(h_report_details_struct.after_table) > 0)
		{	
			fprintf(l_report_CSV2,"%s\n",h_report_details_struct.after_table);
		}
  
		/************ Table Footer note ************************************/
	
		l_table_footer = h_report_details_struct.table_footer_brk;
		if(l_table_footer > 0)
		{
			fprintf(l_report_CSV2,"\n");
			l_table_footer --;
		}
		
		if(strlen(h_report_details_struct.table_footer) > 0)
		{
			fprintf(l_report_CSV2,"%s\n",h_report_details_struct.table_footer);
		}

		l_table = h_report_main_struct.table_brk;
		if(l_table > 0)
		{
			fprintf(l_report_CSV2,"\n");
			l_table --;
		}


		if( l_fetch_count > 0 )
		{
			for(m=0;m<l_complex_num;m++)
			{
				if(m == 0)
				{
					strcpy(l_complex_parameter1,l_complex_val[m]);
					g_complex_parameter1=atof(l_complex_parameter1);
				}
				else if(m == 1)
				{
					strcpy(l_complex_parameter2,l_complex_val[m]);
					g_complex_parameter2=atof(l_complex_parameter2);
				}
				else if(m == 2)
				{
					strcpy(l_complex_parameter3,l_complex_val[m]);
					g_complex_parameter3=atof(l_complex_parameter3);
				}
				else if(m == 3)
				{
					strcpy(l_complex_parameter4,l_complex_val[m]);
					g_complex_parameter4=atof(l_complex_parameter4);
				}
				else if(m == 4)
				{
					strcpy(l_complex_parameter5,l_complex_val[m]);
					g_complex_parameter5=atof(l_complex_parameter5);
				}
				else if(m == 5)
				{
					strcpy(l_complex_parameter6,l_complex_val[m]);
					g_complex_parameter6=atof(l_complex_parameter6);
				}
				else if(m == 6)
				{
					strcpy(l_complex_parameter7,l_complex_val[m]);
					g_complex_parameter7=atof(l_complex_parameter7);
				}
				else if(m == 7)
				{
					strcpy(l_complex_parameter8,l_complex_val[m]);
					g_complex_parameter8=atof(l_complex_parameter8);
				}
				else if(m == 8)
				{
					strcpy(l_complex_parameter9,l_complex_val[m]);
					g_complex_parameter9=atof(l_complex_parameter9);
				}
				else if(m == 9)
				{
					strcpy(l_complex_parameter10,l_complex_val[m]);
					g_complex_parameter10=atof(l_complex_parameter10);
				}
				else if(m == 10)
				{
					strcpy(l_complex_parameter11,l_complex_val[m]);
					g_complex_parameter11=atof(l_complex_parameter11);
				}
				else if(m == 11)
				{
					strcpy(l_complex_parameter12,l_complex_val[m]);			
					g_complex_parameter12=atof(l_complex_parameter12);
				}
				else if(m == 12)
				{
					strcpy(l_complex_parameter13,l_complex_val[m]);
					g_complex_parameter13=atof(l_complex_parameter13);
				}
				else if(m == 13)
				{
					strcpy(l_complex_parameter14,l_complex_val[m]);
					g_complex_parameter14=atof(l_complex_parameter14);
				}
				else if(m == 14)
				{
					strcpy(l_complex_parameter15,l_complex_val[m]);
					g_complex_parameter15=atof(l_complex_parameter15);
				}
				else if(m == 15)
				{
					strcpy(l_complex_parameter16,l_complex_val[m]);
					g_complex_parameter16=atof(l_complex_parameter16);
				}
				else if(m == 16)
				{
					strcpy(l_complex_parameter17,l_complex_val[m]);
					g_complex_parameter17=atof(l_complex_parameter17);
				}
				else if(m == 17)
				{
					strcpy(l_complex_parameter18,l_complex_val[m]);
					g_complex_parameter18=atof(l_complex_parameter18);
				}
				else if(m == 18)
				{
					strcpy(l_complex_parameter19,l_complex_val[m]);
					g_complex_parameter19=atof(l_complex_parameter19);
				}
				else if(m == 19)
				{
					strcpy(l_complex_parameter20,l_complex_val[m]);
					g_complex_parameter20=atof(l_complex_parameter20);
				}

			}/*** End of Complex For Loop ***/

		}/*** End Of Fetch Count Check ****/

		}/******* End Of Grouping Else Block **********/

		/*************** Complex Criteria Individual  *********************/
		
		if(l_fetch_count > 0 )
		{
			fprintf(fl_userlog,"g_complex_parameter1 :|%lf|\tg_complex_parameter2 :|%lf|\n",g_complex_parameter1,g_complex_parameter2);
			fprintf(fl_userlog,"g_complex_parameter3 :|%lf|\tg_complex_parameter4 :|%lf|\n",g_complex_parameter3,g_complex_parameter4);
			fprintf(fl_userlog,"g_complex_parameter5 :|%lf|\tg_complex_parameter6 :|%lf|\n",g_complex_parameter5,g_complex_parameter6);
			fprintf(fl_userlog,"g_complex_parameter7 :|%lf|\tg_complex_parameter8 :|%lf|\n",g_complex_parameter7,g_complex_parameter8);
			fprintf(fl_userlog,"g_complex_parameter9 :|%lf|\tg_complex_parameter10 :|%lf|\n",g_complex_parameter9,g_complex_parameter10);
			fprintf(fl_userlog,"g_complex_parameter11 :|%lf|\tg_complex_parameter12 :|%lf|\n",g_complex_parameter11,g_complex_parameter12);
			fprintf(fl_userlog,"g_complex_parameter13 :|%lf|\tg_complex_parameter14 :|%lf|\n",g_complex_parameter13,g_complex_parameter14);
			fprintf(fl_userlog,"g_complex_parameter15 :|%lf|\tg_complex_parameter16 :|%lf|\n",g_complex_parameter15,g_complex_parameter16);
			fprintf(fl_userlog,"g_complex_parameter17 :|%lf|\tg_complex_parameter18 :|%lf|\n",g_complex_parameter17,g_complex_parameter18);
			fprintf(fl_userlog,"g_complex_parameter19 :|%lf|\tg_complex_parameter20 :|%lf|\n",g_complex_parameter19,g_complex_parameter20);
		}


		/*******************************************************************/


		/********* Dynamic Footer Display ****************************************/

		strcpy(footer_query,h_report_details_struct.footer_query);
		
		if(strlen(footer_query) > 0)
		{

		/**** Stored Procedure : SP_REPORT_FOOTER ***********************************/

		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
		printf("Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
		
		EXEC SQL CALL SP_REPORT_FOOTER(:l_rept_id,:l_table_id,:l_param1,:l_param2,
					:l_param3,:l_param4, :l_param5,
					:l_param6,:l_footer_query,:l_footer_query1,:l_error_desc); 

		strcat(l_footer_query,l_footer_query1);

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER ERR DESC :|%s|\n",l_error_desc);
		}

		fprintf(fl_userlog,"FOOTER QUERY :|%s|\n",l_footer_query);

		strcpy(l_footer_query_value,APL_NULL_STRING);

		EXEC SQL PREPARE CSV2_FOOTER_CURR FROM :l_footer_query;

		EXEC SQL DECLARE csv2_footer_curr CURSOR FOR CSV2_FOOTER_CURR;
		
		fprintf(fl_userlog,"After DECLARE csv2_footer_curr :|%d|\n",sqlca.sqlcode);

		EXEC SQL OPEN csv2_footer_curr;

		EXEC SQL FETCH csv2_footer_curr INTO :l_footer_query_value;
		fprintf(fl_userlog,"After FETCH csv2_footer_curr :|%d|\n",sqlca.sqlcode);

		EXEC SQL CLOSE csv2_footer_curr;

		fprintf(fl_userlog,"l_footer_query_value :|%s|\n",l_footer_query_value);

		l_footer_num = 0;

		strcpy(l_footer1,APL_NULL_STRING);
		strcpy(l_footer2,APL_NULL_STRING);
		strcpy(l_footer3,APL_NULL_STRING);
		strcpy(l_footer4,APL_NULL_STRING);
		strcpy(l_footer5,APL_NULL_STRING);
		strcpy(l_footer6,APL_NULL_STRING);
		strcpy(l_footer7,APL_NULL_STRING);
		strcpy(l_footer8,APL_NULL_STRING);
		strcpy(l_footer9,APL_NULL_STRING);
		strcpy(l_footer10,APL_NULL_STRING);
		strcpy(l_footer11,APL_NULL_STRING);
		strcpy(l_footer12,APL_NULL_STRING);
		strcpy(l_footer13,APL_NULL_STRING);
		strcpy(l_footer14,APL_NULL_STRING);
		strcpy(l_footer15,APL_NULL_STRING);

		if(strlen(l_footer_query_value) > 0)
		{		
			if (CO_SplitStr(l_footer_query_value,CAPSEP,&l_footer_num,&l_footer_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_footer_query_value);
				APL_GOBACK_FAIL
			}

			fprintf(fl_userlog,"l_footer_num :|%d|\n",l_footer_num);
			if(l_footer_num > 0)
			{
				for(i=0;i<l_footer_num;i++)
				{
					if(i == 0)
					strcpy(l_footer1,l_footer_val[i]);
					else if(i == 1)
					strcpy(l_footer2,l_footer_val[i]);
					else if(i == 2)
					strcpy(l_footer3,l_footer_val[i]);
					else if(i == 3)
					strcpy(l_footer4,l_footer_val[i]);
					else if(i == 4)
					strcpy(l_footer5,l_footer_val[i]);
					else if(i == 5)
					strcpy(l_footer6,l_footer_val[i]);
					else if(i == 6)
					strcpy(l_footer7,l_footer_val[i]);
					else if(i == 7)
					strcpy(l_footer8,l_footer_val[i]);
					else if(i == 8)
					strcpy(l_footer9,l_footer_val[i]);
					else if(i == 9)
					strcpy(l_footer10,l_footer_val[i]);
					else if(i == 10)
					strcpy(l_footer11,l_footer_val[i]);
					else if(i == 11)
					strcpy(l_footer12,l_footer_val[i]);
					else if(i == 12)
					strcpy(l_footer13,l_footer_val[i]);
					else if(i == 13)
					strcpy(l_footer14,l_footer_val[i]);
					else if(i == 14)
					strcpy(l_footer15,l_footer_val[i]);
				}
			}

		}/************** End Of Footer Value Check *************************************/

		/****** Stored Procedure : SP_REPORT_FOOTER_DATA ***********************************/

		fprintf(fl_userlog,"l_footer1 :|%s|\t l_footer2 :|%s|\n",l_footer1,l_footer2);
		fprintf(fl_userlog,"l_footer3 :|%s|\t l_footer4 :|%s|\n",l_footer3,l_footer4);
		fprintf(fl_userlog,"l_footer5 :|%s|\t l_footer6 :|%s|\n",l_footer5,l_footer6);
		fprintf(fl_userlog,"l_footer7 :|%s|\t l_footer8 :|%s|\n",l_footer7,l_footer8);
		fprintf(fl_userlog,"l_footer9 :|%s|\t l_footer10 :|%s|\n",l_footer9,l_footer10);
		fprintf(fl_userlog,"l_footer11 :|%s|\t l_footer12 :|%s|\n",l_footer11,l_footer12);
		fprintf(fl_userlog,"l_footer13 :|%s|\t l_footer14 :|%s|\n",l_footer13,l_footer14);
		fprintf(fl_userlog,"l_footer15 :|%s|\n",l_footer15);

		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);	
		printf("Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);		
		

		EXEC SQL CALL SP_REPORT_FOOTER_DATA(:l_rept_id,:l_table_id,
							:l_footer1,:l_footer2,
							:l_footer3,:l_footer4,
							:l_footer5,:l_footer6,
							:l_footer7,:l_footer8,
							:l_footer9,:l_footer10,
							:l_footer11,:l_footer12,
							:l_footer13,:l_footer14,
							:l_footer15,
							:g_complex_parameter1,:g_complex_parameter2,
							:g_complex_parameter3,:g_complex_parameter4,
							:g_complex_parameter5,:g_complex_parameter6,
							:g_complex_parameter7,:g_complex_parameter8,
							:g_complex_parameter9,:g_complex_parameter10,
							:g_complex_parameter11,:g_complex_parameter12,
							:g_complex_parameter13,:g_complex_parameter14,
							:g_complex_parameter15,:g_complex_parameter16,
							:g_complex_parameter17,:g_complex_parameter18,
							:g_complex_parameter19,:g_complex_parameter20,
							:l_footer_data,:l_error_desc);

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER_DATA ERR DESC :|%s|\n",l_error_desc);
		}

		fprintf(fl_userlog,"FOOTER DATA :|%s|\n",l_footer_data);

		/************ Dynamic Formating Procedure ********************************************/
		
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);	
		printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
		//fflush(fl_userlog);
		EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_footer_data,:l_error_desc); 

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
		}

		fprintf(fl_userlog,"FOOTER DATA After Formatting -- :|%s|\n",l_footer_data);


		/*************************************************************************************/

		/************ Dynamic Footer Data Display **********************************************/
		
		fprintf(fl_userlog,"strlen(l_footer_data) :|%d|\n",strlen(l_footer_data));

		if(strlen(l_footer_data) > 0)
		{
			fprintf(fl_userlog,"Displaying Footer Data --- \n");

			fprintf(l_report_CSV2,"%s\n",l_footer_data);
		}

		l_footer_data_brk = h_report_details_struct.footer_data_brk;
		while(l_footer_data_brk > 0)
		{
			fprintf(l_report_CSV2,"\n");
			l_footer_data_brk --;
			g_line_count++;
		}

		}

		/***************** End Of Dynamic Footer Display  *****************************/

		/***************** Final Complex Criteria Calculation *************************/

		fprintf(fl_userlog,"\n--- l_table_id --- 11:|%d|\n",l_table_id);

		if(l_table_id == 1)
		{
			f_complex_parameter1=f_complex_parameter1+g_complex_parameter1;
			f_complex_parameter2=f_complex_parameter2+g_complex_parameter2;
			f_complex_parameter3=f_complex_parameter3+g_complex_parameter3;
			f_complex_parameter4=f_complex_parameter4+g_complex_parameter4;
			f_complex_parameter5=f_complex_parameter5+g_complex_parameter5;
			f_complex_parameter6=f_complex_parameter6+g_complex_parameter6;
			f_complex_parameter7=f_complex_parameter7+g_complex_parameter7;
			f_complex_parameter8=f_complex_parameter8+g_complex_parameter8;
			f_complex_parameter9=f_complex_parameter9+g_complex_parameter9;
			f_complex_parameter10=f_complex_parameter10+g_complex_parameter10;
			f_complex_parameter11=f_complex_parameter11+g_complex_parameter11;
			f_complex_parameter12=f_complex_parameter12+g_complex_parameter12;
			f_complex_parameter13=f_complex_parameter13+g_complex_parameter13;
			f_complex_parameter14=f_complex_parameter14+g_complex_parameter14;
			f_complex_parameter15=f_complex_parameter15+g_complex_parameter15;
			f_complex_parameter16=f_complex_parameter16+g_complex_parameter16;
			f_complex_parameter17=f_complex_parameter17+g_complex_parameter17;
			f_complex_parameter18=f_complex_parameter18+g_complex_parameter18;
			f_complex_parameter19=f_complex_parameter19+g_complex_parameter19;
			f_complex_parameter20=f_complex_parameter20+g_complex_parameter20;
		}

		/******************************************************************************/
		
		l_table_id ++;

	}/***** End Of Table Id Fetch ***************************************/
	}
	
	l_client_fetch_count ++;


	}/***** End Of Record Count check ****************************/

	}/***** End Of Sub Client Fetch *****************************/

	EXEC SQL CLOSE csvsubclient;
	
	/********** For Displaying Grand Criteria Total ****************************************/

	fprintf(fl_userlog,"GRAND TOTAL FLAG is 7:|%s|\n",h_report_details_struct.grand_total_flag);
   //fflush(fl_userlog);
	EXEC SQL SELECT ROUND(:l_grand_total1,2),ROUND(:l_grand_total2,2),ROUND(:l_grand_total3,2)
		INTO :l_grand_round1,:l_grand_round2,:l_grand_round3
		FROM DUAL;

	fprintf(fl_userlog,"After Grand Total Round -- ORA ERROR 7:|%d|\n",sqlca.sqlcode);

	fprintf(fl_userlog,"l_grand_round1:|%s|\n",l_grand_round1);
	fprintf(fl_userlog,"l_grand_round2:|%s|\n",l_grand_round2);
	fprintf(fl_userlog,"l_grand_round3:|%s|\n",l_grand_round3);

	printf("l_grand_round1:|%s|\n",l_grand_round1);
	//fflush(fl_userlog);
	printf("l_grand_round2:|%s|\n",l_grand_round2);
	//fflush(fl_userlog);
	printf("l_grand_round3:|%s|\n",l_grand_round3);
//fflush(fl_userlog);
	
	/********* Grand display Check ************************************************/

	fprintf(fl_userlog,"g_setting_flag:|%s|\n",g_setting_flag);
	printf("g_setting_flag:|%s|\n",g_setting_flag);
//fflush(fl_userlog);
	if(!strcmp(g_setting_flag,"U"))
		strcpy(l_grand_display,"GRAND");
	else if(!strcmp(g_setting_flag,"L"))
		strcpy(l_grand_display,"grand");
	else 
		strcpy(l_grand_display,"Grand");

	/********************************************************************************/

	if(strlen(h_report_details_struct.grand_total_flag) > 0)
	{

		if(l_grand_total1 > 0)
		fprintf(l_report_CSV2,"%s %s = %s\n",l_grand_display,h_report_details_struct.criteria_col1_name,l_grand_round1);

		if(l_grand_total2 > 0)
		fprintf(l_report_CSV2,"%s %s = %s\n",l_grand_display,h_report_details_struct.criteria_col2_name,l_grand_round2);

		if(l_grand_total3 > 0)
		fprintf(l_report_CSV2,"%s %s = %s\n",l_grand_display,h_report_details_struct.criteria_col3_name,l_grand_round3);
		
		fprintf(l_report_CSV2,"\n");

	}

	/************* Grand Complex Criteria Display ******************************************/
		
	fprintf(fl_userlog,"f_complex_parameter1 :|%lf|\tf_complex_parameter2 :|%lf|\n",f_complex_parameter1,f_complex_parameter2);
	fprintf(fl_userlog,"f_complex_parameter3 :|%lf|\tf_complex_parameter4 :|%lf|\n",f_complex_parameter3,f_complex_parameter4);
	fprintf(fl_userlog,"f_complex_parameter5 :|%lf|\tf_complex_parameter6 :|%lf|\n",f_complex_parameter5,f_complex_parameter6);
	fprintf(fl_userlog,"f_complex_parameter7 :|%lf|\tf_complex_parameter8 :|%lf|\n",f_complex_parameter7,f_complex_parameter8);
	fprintf(fl_userlog,"f_complex_parameter9 :|%lf|\tf_complex_parameter10 :|%lf|\n",f_complex_parameter9,f_complex_parameter10);
	fprintf(fl_userlog,"f_complex_parameter11 :|%lf|\tf_complex_parameter12 :|%lf|\n",f_complex_parameter11,f_complex_parameter12);
	fprintf(fl_userlog,"f_complex_parameter13 :|%lf|\tf_complex_parameter14 :|%lf|\n",f_complex_parameter13,f_complex_parameter14);
	fprintf(fl_userlog,"f_complex_parameter15 :|%lf|\tf_complex_parameter16 :|%lf|\n",f_complex_parameter15,f_complex_parameter16);
	fprintf(fl_userlog,"f_complex_parameter17 :|%lf|\tf_complex_parameter18 :|%lf|\n",f_complex_parameter17,f_complex_parameter18);
	fprintf(fl_userlog,"f_complex_parameter19 :|%lf|\tf_complex_parameter20 :|%lf|\n",f_complex_parameter19,f_complex_parameter20);

	strcpy(complex_criteria,h_report_details_struct.complex_criteria);

	fprintf(fl_userlog,"strlen(complex_criteria) :|%d|\n",strlen(complex_criteria));

	if(strlen(complex_criteria) > 0 )
	{
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_CRITERIA :|%s|\n",l_rept_id);	
		printf("Calling Stored Procedure SP_REPORT_CRITERIA :|%s|\n",l_rept_id);	
		//fflush(fl_userlog);
		EXEC SQL CALL SP_REPORT_CRITERIA(:complex_criteria,
						 :f_complex_parameter1,:f_complex_parameter2,
						 :f_complex_parameter3,:f_complex_parameter4,
						 :f_complex_parameter5,:f_complex_parameter6,
						 :f_complex_parameter7,:f_complex_parameter8,
						 :f_complex_parameter9,:f_complex_parameter10,
						 :f_complex_parameter11,:f_complex_parameter12,
						 :f_complex_parameter13,:f_complex_parameter14,
						 :f_complex_parameter15,:f_complex_parameter16,
						 :f_complex_parameter17,:f_complex_parameter18,
						 :f_complex_parameter19,:f_complex_parameter20,
						 :l_complex_criteria_data,:l_error_desc); 

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_CRITERIA ERR DESC :|%s|\n",l_error_desc);
		}

		fprintf(fl_userlog,"COMPLEX CRITERIA DATA :|%s|\n",l_complex_criteria_data);

		/************ Dynamic Formating Procedure ********************************************/
		
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);	
		printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
		//fflush(fl_userlog);
		EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_complex_criteria_data,:l_error_desc); 

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
		}

		fprintf(fl_userlog,"COMPLEX CRITERIA DATA After Formatting -- :|%s|\n",l_complex_criteria_data);


		/*********************************************************************************/

		/************ COMPLEX CRITERIA DATA Display **************************************/
		
		fprintf(fl_userlog,"strlen(l_complex_criteria_data) :|%d|\n",strlen(l_complex_criteria_data));

		if(strlen(l_complex_criteria_data) > 0)
		{
			fprintf(fl_userlog,"Displaying l_complex_criteria_data Data --- \n");

			fprintf(l_report_CSV2,"%s\n",l_complex_criteria_data);
		}

	}


	/***************************************************************************************/

	
	/******* Page Footer note ***************************************************************/
		
	if(strlen(h_report_main_struct.page_footer) > 0)
	{
		fprintf(l_report_CSV2,"%s\n",h_report_main_struct.page_footer);
	}

	l_page_footer = h_report_main_struct.page_footer_brk;
	if(l_page_footer > 0)
	{
		fprintf(l_report_CSV2,"\n");
		l_page_footer --;
	}
	

	/******* Disclaimer **************************************************/
		
	if(strlen(h_report_main_struct.disclaimer) > 0)
	{
		fprintf(l_report_CSV2,"%s\n",h_report_main_struct.disclaimer);

	}

	/********************************************************************/
	
	fprintf(l_report_CSV2,"\n\n");
	
	fprintf(fl_userlog,"REMOVE FLAG :|%d|\n",l_remove_flag);
	fprintf(fl_userlog,"REMOVE PATH :|%s|\n",l_remove_file_path);
	
	if(l_remove_flag == 1)
	{
		system(l_remove_file_path);

		fprintf(fl_userlog,"Removing File Since No Data Found For The Report\n");
		fprintf(fl_userlog,"Delete File Name :- |%s|\n",l_report_name);
		printf("Removing File Since No Data Found For The Report\n");
		//fflush(fl_userlog);
		printf("Delete File Name :- |%s|\n",l_report_name);
       //fflush(fl_userlog);
		EXEC SQL DELETE FROM PRO_COMMON_REPORT 
					WHERE REPORT_NAME=:l_report_name;

		fprintf(fl_userlog,"After DELETE File ORA ERROR :|%d|\n",sqlca.sqlcode); 
	}
	else
	{
	if(strlen(l_compress_flag) == 0 || !strcmp(l_compress_flag,"N"))
	{
		if((strlen(l_web_source_from) > 0) && !(strcmp(l_web_source_from,"W")))
		{
			EXEC SQL CALL SP_SHOW_REAL_TIME_REPORT_IN_WC(:l_report_name,:l_web_report_dt,:l_web_login_id,:l_report_path,:l_rept_id);
	
			if(sqlca.sqlcode < 0)
			{
				printf("Error : Failed From Stored Procedure SP_SHOW_REAL_TIME_REPORT_IN_WC ERR DESC :|%d|\n",sqlca.sqlcode);
				fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_SHOW_REAL_TIME_REPORT_IN_WC ERR DESC :|%d|\n",sqlca.sqlcode);
			}
		}
	}
	}
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:
	{
		fclose(l_report_CSV2);
		fclose(l_init_file);
		CO_ProcMonitor(g_logfile,"Success from CO_CreateReport_CSV2",NULL,NULL);
		fprintf(fl_userlog,"Success From CO_CreateReport_CSV2 Function\n");
		return(APL_SUCCESS);
	}


	RETURN_FAILURE:
	{
		fclose(l_report_CSV2);
		fclose(l_init_file);
		CO_ProcMonitor(g_logfile,"Failed from CO_CreateReport_CSV2",l_debug_info_ptr,NULL);
		fprintf(fl_userlog,"Failure From CO_CreateReport_CSV2 Function\n");
		return(APL_FAILURE);
	}
}

int CO_CreateReport_LETR1(char *p_rept_id,char *p_rep_type,char *p_rep_name,
		      	char *p_param_str,char *p_chr_ptr_param,char *p_start_date,
			char *p_compress_flag,char *p_user,char *p_web_login_id,char *p_web_rpt_id,char *p_web_source_from,char *p_web_report_dt,char *p_web_proc_id,FILE *fl_userlog,
			DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	printf("Entered Inside CO_CreateReport_LETR1 Function \n");

	FILE	*l_init_file  		= (FILE *)NULL;
	FILE	*l_report_LETR1 	= (FILE *)NULL;
	char l_init_path[200]	= APL_NULL_STRING;
	char l_report_path[300] = APL_NULL_STRING;
	char l_report_name[300] = APL_NULL_STRING;
	char l_compress_flag[5]	= APL_NULL_STRING;
	char l_time_stamp[30]	= APL_NULL_STRING;
	
	memset(l_init_path,APL_NULL_CHAR,200);	
	memset(l_report_path,APL_NULL_CHAR,200);	
	memset(l_report_name,APL_NULL_CHAR,200);	

	REPORT_MAIN_STRUCT_H  h_report_main_struct;
	REPORT_MAIN_STRUCT_I  i_report_main_struct;
	
	REPORT_DETAILS_STRUCT_H h_report_details_struct;
	REPORT_DETAILS_STRUCT_I i_report_details_struct;

	INTL_REPT_STRUCT_H   l_intl_rept_struct_ha;
	memset(&l_intl_rept_struct_ha,APL_NULL_CHAR,sizeof(INTL_REPT_STRUCT_H));
	

	memset(&h_report_main_struct,APL_NULL_CHAR,sizeof(REPORT_MAIN_STRUCT_H));	
	memset(&i_report_main_struct,APL_NULL_CHAR,sizeof(REPORT_MAIN_STRUCT_I));

	memset(&h_report_details_struct,APL_NULL_CHAR,sizeof(REPORT_DETAILS_STRUCT_H));
	memset(&i_report_details_struct,APL_NULL_CHAR,sizeof(REPORT_DETAILS_STRUCT_I));

		
	char l_rept_id[11]		   	   = APL_NULL_STRING;
	char l_rep_type[10]	   	   = APL_NULL_STRING;
	char l_client[20]  			   = APL_NULL_STRING;
	char l_sub_client[20]  		   = APL_NULL_STRING;
	char l_rep_name[100]    	   = APL_NULL_STRING;
	char l_param_str[4000]  	   = APL_NULL_STRING;
	char l_chr_param[4000]  	   = APL_NULL_STRING;
	char l_start_date[20]   	   = APL_NULL_STRING;
	char l_user[20]  				   = APL_NULL_STRING;
	char l_client_name[100] 	   = APL_NULL_STRING;
	char l_gen_query[4001]  	   = APL_NULL_STRING;

    //changes for report generation through api start
	char l_web_login_id[101]				= APL_NULL_STRING;
	char l_web_rpt_id[101]				= APL_NULL_STRING;
	char l_web_source_from[101]				= APL_NULL_STRING;
	char l_web_report_dt[101]				= APL_NULL_STRING;
	char l_web_proc_id[101]				= APL_NULL_STRING;
	//changes for report generation through api end

	char l_more_qry_flag[3]     = APL_NULL_STRING;
	char table_query[24001] 	= APL_NULL_STRING;
	char l_table_query[4001] 	= APL_NULL_STRING;
	char l_table_query1[4001] 	= APL_NULL_STRING;
	char l_table_query2[4001] 	= APL_NULL_STRING;
	char l_table_query3[4001] 	= APL_NULL_STRING;
	char l_table_query4[4001] 	= APL_NULL_STRING;
	char l_table_query5[4001] 	= APL_NULL_STRING;
	
	char l_criteria_query1[4001]  = APL_NULL_STRING;
	char l_criteria_query2[4001]  = APL_NULL_STRING;
	char l_criteria_query3[4001]  = APL_NULL_STRING;
	char l_system_date[20]  	   = APL_NULL_STRING;
	char l_column_value[200]		= APL_NULL_STRING;
	char l_column_header[4001]		= APL_NULL_STRING;
	char l_table_parameter[6000]	= APL_NULL_STRING;
	char l_general_parameter[6000]= APL_NULL_STRING;
	char l_general_param[6000]		= APL_NULL_STRING;
	char l_param[2000]				= APL_NULL_STRING;
	char l_column_parameter[6000]	= APL_NULL_STRING;
	char l_column[2000]				= APL_NULL_STRING;
	char l_error_desc[2000]			= APL_NULL_STRING;
	char l_param1[100]             = APL_NULL_STRING;
	char l_param2[100]             = APL_NULL_STRING;
	char l_param3[100]             = APL_NULL_STRING;
	char l_param4[100]             = APL_NULL_STRING;
	char l_param5[100]             = APL_NULL_STRING;
	char l_param6[100]             = APL_NULL_STRING;

	char g_style[4000]	= APL_NULL_STRING;
	char g_style_lt[4000]	= APL_NULL_STRING;
	char g_setting_flag[2]	= APL_NULL_STRING;
	char g_table_border[2]= APL_NULL_STRING;
	
	char  l_group_query[4001]       = APL_NULL_STRING;
	char  l_group_desc[4001]        = APL_NULL_STRING;
	char  l_group_pos[11]			  = APL_NULL_STRING;
	char  l_group_parameter[2001]   = APL_NULL_STRING;
	
	char  **l_group_parameter_value		=	NULL;
	char  **l_group_pos_value 				=	NULL;

	int  l_group_pos_no			= 0;
	int  l_group_parameter_no	= 0;
	int  l_group_break_flag 	= 0;

	char  l_prev_param1[100]            = APL_NULL_STRING;
	char  l_prev_param2[100]            = APL_NULL_STRING;
	char  l_prev_param3[100]            = APL_NULL_STRING;
	char  l_prev_param4[100]            = APL_NULL_STRING;
	char  l_prev_param5[100]            = APL_NULL_STRING;
	char  l_prev_param6[100]            = APL_NULL_STRING;

	char l_grand_round1[200]	= APL_NULL_STRING;
	char l_grand_round2[200]	= APL_NULL_STRING;
	char l_grand_round3[200]	= APL_NULL_STRING;
	
	
	char  **l_col_value		=	NULL;
	char  **l_field_val		=	NULL;
	char  **l_column_val		=	NULL;
	char  **l_param_val		=	NULL;
	
	int i=0,j=0,k=0;
	int l_col_no				= 0;
	int l_column_num			= 0;
	int l_param_num			= 0;
	int l_fetch_count 		= 0;
	int l_before_title_break= 0;
	int l_no_of_columns     = 0;
	int l_table_id		      = 0;
	int l_column_no         = 0;
	int l_page_header			= 0;
	int l_before_title      = 0;
	int l_before_title1		= 0;
	int l_before_title2		= 0;
	int l_before_title3     = 0;
	int l_report_title		= 0;
	int l_after_title			= 0;
	int l_table_hdr			= 0;
	int l_before_table		= 0;
	int l_after_table		   = 0;
	int l_col_hdr				= 0;
	int l_table					= 0;
	int l_table_footer		= 0;
	int l_page_footer			= 0;
	int l_int_no_field      = 0;
	int int_no					= 0;
	double l_grand_total1		= 0;
	double l_grand_total2		= 0;
	double l_grand_total3		= 0;
	
	char l_criteria_value1[200]   = APL_NULL_STRING;
	char l_criteria_value2[200]   = APL_NULL_STRING;
	char l_criteria_value3[200]   = APL_NULL_STRING;
	double l_criteria1_total = 0.0;
	double l_criteria2_total = 0.0;
	double l_criteria3_total = 0.0;

	/************ Paging Varibles Declaration **********************/

	int p_page_no = 0;
	int rec_no = 0;
	int p_total_page_no = 0;
	int l_page_break_chk = 0;
   	int l_next_page_break = 0;
   	int l_main_page_break = 0;
	int p_final_break = 0;
	int l_final_break = 0;
	int l_main_page_recs = 0;
	int l_next_page_recs = 0;
	int l_tolarence = 0;
	int l_landscape = 0;
	int l_portrait = 0;
	int g_line_count = 0;

	char l_paging_flag[2] = APL_NULL_STRING;
	char l_print_flag[2] = APL_NULL_STRING;

	char l_grand_display[20] = APL_NULL_STRING;

	/******* Complex Criteria Variables ***************************/

	char l_report_type[3] 			= APL_NULL_STRING;
	
	char  **l_complex_val			= NULL;
	int l_complex_num			= 0;
	char l_complex_column[2000]		= APL_NULL_STRING;
	char l_complex_parameter[2000] 		= APL_NULL_STRING;
	
	char  **l_complex_pos_val		= NULL;
	int l_complex_pos_num			= 0;
	char l_complex_pos_column[2000]		= APL_NULL_STRING;
	char l_complex_pos_parameter[2000] 	= APL_NULL_STRING;
		
	int l_complex_break_flag 		= 0;
	
	char complex_criteria_query[8001] 	= APL_NULL_STRING;
	char complex_criteria_query1[4001] 	= APL_NULL_STRING;
	char complex_criteria_label[4001] 	= APL_NULL_STRING;
	char complex_criteria_pos[101] 		= APL_NULL_STRING;

	char l_header_query[8001] 		= APL_NULL_STRING;
	char l_header_query1[4001] 		= APL_NULL_STRING;
	char header_query[4001] 		= APL_NULL_STRING;	
	char l_header_query_value[4001] 	= APL_NULL_STRING;	
	int l_header_num 			= 0;
	char **l_header_val			= NULL;
	char l_header_data[6001]		= APL_NULL_STRING;
	int l_header_brk			= 0;

	char l_footer_query[8001] 		= APL_NULL_STRING;	
	char l_footer_query1[4001] 		= APL_NULL_STRING;
	char footer_query[4001] 		= APL_NULL_STRING;	
	char l_footer_query_value[4001] 	= APL_NULL_STRING;	
	int l_footer_num 			= 0;
	char **l_footer_val			= NULL;
	char l_footer_data[6001]		= APL_NULL_STRING;
	int l_footer_data_brk			= 0;

	char l_header1[200] 			= APL_NULL_STRING;
	char l_header2[200] 			= APL_NULL_STRING;
	char l_header3[200] 			= APL_NULL_STRING;
	char l_header4[200] 			= APL_NULL_STRING;
	char l_header5[200] 			= APL_NULL_STRING;
	char l_header6[200] 			= APL_NULL_STRING;
	char l_header7[200] 			= APL_NULL_STRING;
	char l_header8[200] 			= APL_NULL_STRING;
	char l_header9[200] 			= APL_NULL_STRING;
	char l_header10[200] 			= APL_NULL_STRING;
	char l_header11[200] 			= APL_NULL_STRING;
	char l_header12[200] 			= APL_NULL_STRING;
	char l_header13[200] 			= APL_NULL_STRING;
	char l_header14[200] 			= APL_NULL_STRING;
	char l_header15[200] 			= APL_NULL_STRING;

	char l_footer1[200] 			= APL_NULL_STRING;
	char l_footer2[200] 			= APL_NULL_STRING;
	char l_footer3[200] 			= APL_NULL_STRING;
	char l_footer4[200] 			= APL_NULL_STRING;
	char l_footer5[200] 			= APL_NULL_STRING;
	char l_footer6[200] 			= APL_NULL_STRING;
	char l_footer7[200] 			= APL_NULL_STRING;
	char l_footer8[200] 			= APL_NULL_STRING;
	char l_footer9[200] 			= APL_NULL_STRING;
	char l_footer10[200] 			= APL_NULL_STRING;
	char l_footer11[200] 			= APL_NULL_STRING;
	char l_footer12[200] 			= APL_NULL_STRING;
	char l_footer13[200] 			= APL_NULL_STRING;
	char l_footer14[200] 			= APL_NULL_STRING;
	char l_footer15[200] 			= APL_NULL_STRING;


	int m					= 0;
	
	char l_complex_parameter1[500]		= APL_NULL_STRING;
	char l_complex_parameter2[500]		= APL_NULL_STRING;
	char l_complex_parameter3[500]		= APL_NULL_STRING;
	char l_complex_parameter4[500]		= APL_NULL_STRING;
	char l_complex_parameter5[500]		= APL_NULL_STRING;
	char l_complex_parameter6[500]		= APL_NULL_STRING;
	char l_complex_parameter7[500]		= APL_NULL_STRING;
	char l_complex_parameter8[500]		= APL_NULL_STRING;
	char l_complex_parameter9[500]		= APL_NULL_STRING;
	char l_complex_parameter10[500]		= APL_NULL_STRING;
	char l_complex_parameter11[500]		= APL_NULL_STRING;
	char l_complex_parameter12[500]		= APL_NULL_STRING;
	char l_complex_parameter13[500]		= APL_NULL_STRING;
	char l_complex_parameter14[500]		= APL_NULL_STRING;
	char l_complex_parameter15[500]		= APL_NULL_STRING;
	char l_complex_parameter16[500]		= APL_NULL_STRING;
	char l_complex_parameter17[500]		= APL_NULL_STRING;
	char l_complex_parameter18[500]		= APL_NULL_STRING;
	char l_complex_parameter19[500]		= APL_NULL_STRING;
	char l_complex_parameter20[500]		= APL_NULL_STRING;

	double g_complex_parameter1		= 0.0;
	double g_complex_parameter2 		= 0.0;
	double g_complex_parameter3 		= 0.0;
	double g_complex_parameter4 		= 0.0;
	double g_complex_parameter5 		= 0.0;
	double g_complex_parameter6 		= 0.0;
	double g_complex_parameter7 		= 0.0;
	double g_complex_parameter8 		= 0.0;
	double g_complex_parameter9 		= 0.0;
	double g_complex_parameter10 		= 0.0;
	double g_complex_parameter11 		= 0.0;
	double g_complex_parameter12 		= 0.0;
	double g_complex_parameter13 		= 0.0;
	double g_complex_parameter14 		= 0.0;
	double g_complex_parameter15 		= 0.0;
	double g_complex_parameter16 		= 0.0;
	double g_complex_parameter17 		= 0.0;
	double g_complex_parameter18 		= 0.0;
	double g_complex_parameter19 		= 0.0;
	double g_complex_parameter20		= 0.0;
	
	double f_complex_parameter1		= 0.0;
	double f_complex_parameter2 		= 0.0;
	double f_complex_parameter3 		= 0.0;
	double f_complex_parameter4 		= 0.0;
	double f_complex_parameter5 		= 0.0;
	double f_complex_parameter6 		= 0.0;
	double f_complex_parameter7 		= 0.0;
	double f_complex_parameter8 		= 0.0;
	double f_complex_parameter9 		= 0.0;
	double f_complex_parameter10 		= 0.0;
	double f_complex_parameter11 		= 0.0;
	double f_complex_parameter12 		= 0.0;
	double f_complex_parameter13 		= 0.0;
	double f_complex_parameter14 		= 0.0;
	double f_complex_parameter15 		= 0.0;
	double f_complex_parameter16 		= 0.0;
	double f_complex_parameter17 		= 0.0;
	double f_complex_parameter18 		= 0.0;
	double f_complex_parameter19 		= 0.0;
	double f_complex_parameter20		= 0.0;

	char complex_criteria[4001]		= APL_NULL_STRING;
	char l_complex_criteria_data[4001]      = APL_NULL_STRING;

	char l_multiple_col_flag[3]		= APL_NULL_STRING;
	char l_multiple_col_header[4001]	= APL_NULL_STRING;
	char l_multiple_colspan_sep[2001]	= APL_NULL_STRING;

	int l_multiple_col_header_no		= 0;
	int l_multiple_colspan_sep_no		= 0;

	char **l_multiple_col_header_value	= NULL;
	char **l_multiple_colspan_sep_value	= NULL;

	char l_level_header[2000]		= APL_NULL_STRING;
	char l_level_colspan[500]		= APL_NULL_STRING;
	char l_level_column[500]		= APL_NULL_STRING;
	char l_level_col_span[10]		= APL_NULL_STRING;

	int l_level_header_no			= 0;
	int l_level_colspan_no			= 0;
	int int_aa				= 0;
	int int_bb				= 0;
	int int_a				= 0;
	int int_b				= 0;

	char **l_level_header_value		= NULL;
	char **l_level_colspan_value		= NULL;

	char l_zip_image_path[200]		= APL_NULL_STRING;

	int l_format_col_flag		= 0;
	int l_format_col_no         = 0;
	char **l_format_col_val		= NULL;
	char l_format_col_value[10] = APL_NULL_STRING;
	char l_format_col_pos[500]	= APL_NULL_STRING;

	char l_record_count_query_final[8001]   = APL_NULL_STRING;
	char l_record_count_query[4001]   = APL_NULL_STRING;
	char l_record_count_query1[4001]   = APL_NULL_STRING;
	int l_record_count_flag = 0;
	int l_record_count = 0;
	int l_table_numbers = 0;
	int l_table_num = 0;

	char l_letter_header[4001] = APL_NULL_STRING;
	
	strcpy(l_rept_id,p_rept_id);
	strcpy(l_rep_type,p_rep_type);
	strcpy(l_rep_name,p_rep_name);
	strcpy(l_param_str,p_param_str);
	strcpy(l_chr_param,p_chr_ptr_param);
	strcpy(l_client,l_param_str);
	strcpy(l_start_date,p_start_date);
	strcpy(l_compress_flag,p_compress_flag);
	strcpy(l_user,p_user);
	strcpy(l_web_login_id,p_web_login_id);
	strcpy(l_web_rpt_id,p_web_rpt_id);
	strcpy(l_web_source_from,p_web_source_from);
	strcpy(l_web_report_dt,p_web_report_dt);
	strcpy(l_web_proc_id,p_web_proc_id);

	EXEC SQL BEGIN DECLARE SECTION;
		
	EXEC SQL VAR l_rept_id IS STRING;
	EXEC SQL VAR l_gen_query IS STRING;
	
	EXEC SQL VAR table_query IS STRING;
	EXEC SQL VAR l_table_query IS STRING;
	EXEC SQL VAR l_table_query1 IS STRING;
	EXEC SQL VAR l_table_query2 IS STRING;
	EXEC SQL VAR l_table_query3 IS STRING;
	EXEC SQL VAR l_table_query4 IS STRING;
	EXEC SQL VAR l_table_query5 IS STRING;
	
	EXEC SQL VAR l_criteria_query1 IS STRING;
	EXEC SQL VAR l_criteria_query2 IS STRING;
	EXEC SQL VAR l_criteria_query3 IS STRING;
	EXEC SQL VAR l_table_parameter IS STRING;
	EXEC SQL VAR l_general_param IS STRING;
	EXEC SQL VAR l_client IS STRING;
	EXEC SQL VAR l_sub_client IS STRING;
	EXEC SQL VAR l_start_date IS STRING;
	EXEC SQL VAR l_group_parameter IS STRING;
	EXEC SQL VAR l_group_query IS STRING;
	EXEC SQL VAR l_group_desc IS STRING;

	EXEC SQL VAR l_grand_round1 IS STRING;
	EXEC SQL VAR l_grand_round2 IS STRING;
	EXEC SQL VAR l_grand_round3 IS STRING;

	EXEC SQL VAR g_setting_flag IS STRING;
	EXEC SQL VAR l_grand_display IS STRING;

	EXEC SQL VAR complex_criteria_query IS STRING;
	EXEC SQL VAR complex_criteria_query1 IS STRING;
	EXEC SQL VAR l_header_query IS STRING;
	EXEC SQL VAR l_header_query1 IS STRING;
	EXEC SQL VAR l_footer_query IS STRING;
	EXEC SQL VAR l_footer_query1 IS STRING;
	EXEC SQL VAR l_complex_criteria_data IS STRING;
	EXEC SQL VAR complex_criteria IS STRING;
	EXEC SQL VAR l_web_login_id IS STRING;
	EXEC SQL VAR l_web_rpt_id IS STRING;
	EXEC SQL VAR l_web_source_from IS STRING;
	EXEC SQL VAR l_web_report_dt IS STRING;
	EXEC SQL VAR l_web_proc_id IS STRING;
	EXEC SQL END DECLARE SECTION;
	
	strcpy(l_init_path,getenv("INTL_ROOT_PATH"));
	strcat(l_init_path,"intl_sun.cfg");
	
	if((l_init_file = fopen(l_init_path,"r")) == (FILE *)NULL)
	{
		fprintf(fl_userlog,"Failed to Open file for PATH :|%s|\n",l_init_path);
		printf("Failed to Open file for PATH :|%s|\n",l_init_path);
		APL_GOBACK_FAIL
	}

	fprintf(fl_userlog,"COMPRESS FLAG :|%s|\n",l_compress_flag);
	
	if(strlen(l_compress_flag) > 0 && !strcmp(l_compress_flag,"Y"))
	{
		if (APL_FAILURE == CO_ReadToken(l_init_file,"INTL_TEMP_PATH",l_report_path,l_debug_info_ptr))
		{
			fprintf(fl_userlog,"Error : INTL_TEMP_PATH not set in intl_sun.cfg File \n");
			printf("Error : INTL_TEMP_PATH not set in intl_sun.cfg File \n");
			//fflush(fl_userlog);
			APL_GOBACK_FAIL
		}
	}
	else
	{
		if (APL_FAILURE == CO_ReadToken(l_init_file,"INTL_REP_PATH",l_report_path,l_debug_info_ptr))
		{
			fprintf(fl_userlog,"Error :\'INTL_REP_PATH \' not set in intl_sun.cfg File \n");
			printf("Error :\'INTL_REP_PATH \' not set in intl_sun.cfg File \n");
			//fflush(fl_userlog);
			APL_GOBACK_FAIL
		}
	}
		
	EXEC SQL SELECT TO_CHAR(SYSDATE,'DD_MON_YYYY')||CHR(95)||TO_CHAR(SYSDATE,'HH24_MI_SS')		
				INTO :l_time_stamp
				FROM DUAL;

	sprintf(l_report_name,"%s_%s_%s.htm",l_rep_name,l_rept_id,l_time_stamp);

	sprintf(l_report_path, "%s%s",l_report_path,l_report_name);
		
	fprintf(fl_userlog,"l_chr_param:|%s|\n",l_chr_param);
	
	if (CO_SplitStr(l_chr_param,PARAMSEP,&l_int_no_field,&l_field_val) == APL_FAILURE)
	{
		CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_chr_param);
		APL_GOBACK_FAIL
	}

	fprintf(fl_userlog,"l_int_no_field:|%d|\n",l_int_no_field);
	
	if(l_int_no_field > 0)
	{
		for(int_no=0;int_no<l_int_no_field;int_no++)
		{
			if(int_no == 1)
			strcpy(l_param1,l_field_val[int_no]);
			else if(int_no == 2)
			strcpy(l_param2,l_field_val[int_no]);
			else if(int_no == 3)
			strcpy(l_param3,l_field_val[int_no]);
			else if(int_no == 4)
			strcpy(l_param4,l_field_val[int_no]);
			else if(int_no == 5)
			strcpy(l_param5,l_field_val[int_no]);
		}
	}
	
	fprintf(fl_userlog,"REPORT FILE PATH 7:|%s|\n",l_report_path);
//fflush(fl_userlog);
	if((l_report_LETR1 = fopen(l_report_path,"w")) == (FILE *) NULL)
	{
		CO_InsertErr(l_debug_info_ptr,"FILE NOT FOUND",APL_NULL_STRING,
						APL_NULL_STRING,APL_NULL_STRING,	
						 __LINE__,__FILE__);
		fprintf(fl_userlog,"Error : File not Found For Report PATH :|%s|\n",l_report_path);
		APL_GOBACK_FAIL
	}


	/**** For Entry in PRO_COMMON_REPORT ********************/

	fprintf(fl_userlog,"LENGTH OF l_compress_flag :|%d|\n",strlen(l_compress_flag));

	if(strlen(l_compress_flag) == 0 || !strcmp(l_compress_flag,"N"))
	{	
	    strcpy(l_intl_rept_struct_ha.report_name,l_report_name);
	    strcat(l_intl_rept_struct_ha.report_name,"\0");
	    strcpy(l_intl_rept_struct_ha.report_desc,APL_REP_DESC);
	    strcat(l_intl_rept_struct_ha.report_desc,"\0");
	    strcpy(l_intl_rept_struct_ha.report_date,l_start_date);
	    l_intl_rept_struct_ha.report_width = 200 ;
	    strcpy(l_intl_rept_struct_ha.task_desc,"DynamicReport");
	    strcpy(l_intl_rept_struct_ha.fe_be_ind,"B");
	    strcpy(l_intl_rept_struct_ha.usr,l_user);

		 fprintf(fl_userlog,"Entering CO_Proc_RptIns7\n");
		 //fflush(fl_userlog);
		 fprintf(fl_userlog,"report_name:|%s|\n",l_intl_rept_struct_ha.report_name);
		 fprintf(fl_userlog,"report_desc:|%s|\n",l_intl_rept_struct_ha.report_desc);
		 fprintf(fl_userlog,"report_date:|%s|\n",l_intl_rept_struct_ha.report_date);
		 //fprintf(fl_userlog,"report_width:|%ld|\n",l_intl_rept_struct_ha.report_width);
                  fprintf(fl_userlog,"report_width:|%d|\n",l_intl_rept_struct_ha.report_width);
		 fprintf(fl_userlog,"task_desc:|%s|\n",l_intl_rept_struct_ha.task_desc);
		 fprintf(fl_userlog,"fe_be_ind:|%s|\n",l_intl_rept_struct_ha.fe_be_ind);
		 fprintf(fl_userlog,"usr:|%s|\n",l_intl_rept_struct_ha.usr);
	   //fflush(fl_userlog);
	    if(APL_FAILURE == CO_Proc_DBRptIns(l_intl_rept_struct_ha,l_debug_info_ptr))
	    {
			fprintf(fl_userlog,"Error : Failure From CO_Proc_RptIns\n");
		  	APL_GOBACK_FAIL
	    }
		
		if((strlen(l_web_source_from) > 0) && !(strcmp(l_web_source_from,"W")))
		{
			EXEC SQL CALL SP_SHOW_REAL_TIME_REPORT_IN_WC(:l_report_name,:l_web_report_dt,:l_web_login_id,:l_report_path,:l_rept_id);
	
			if(sqlca.sqlcode < 0)
			{
				printf("Error : Failed From Stored Procedure SP_SHOW_REAL_TIME_REPORT_IN_WC ERR DESC :|%d|\n",sqlca.sqlcode);
				fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_SHOW_REAL_TIME_REPORT_IN_WC ERR DESC :|%d|\n",sqlca.sqlcode);
			}
		}
	}
	
	/**********************************************************************/
		 
 	/******** Starting of LETR1 and META tag ****************************/
	
	fprintf(l_report_LETR1,"<HTML><HEAD><META http-equiv='Content-Type' content='text/html; charset=UTF-8'></META>\n");


	fprintf(fl_userlog,"Fetching Report Main Details :|%s|\n",l_rept_id);
	
	EXEC SQL SELECT * INTO :h_report_main_struct
				FROM REPORT_MAIN
				WHERE REPORT_ID=:l_rept_id;	

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Failed to Access REPORT_MAIN Table --- ORA ERROR :|%d|\n",sqlca.sqlcode);
	}

	/******* Report Type Check ********************************/
	
	strcpy(l_report_type,h_report_main_struct.report_type);
	strcpy(header_query,h_report_main_struct.header_query);

	printf("l_report_type :|%s|\n",l_report_type);

	fprintf(fl_userlog,"Report_Type 6:|%s|\n",l_report_type);

	/************ For Dynamic Style Sheet Display *************************/

	fprintf(fl_userlog,"Before REPORT_SYSPARM ---- \n");

	EXEC SQL SELECT A.DEFAULT_SETTING,A.STYLE,A.STYLE_LT 
	         INTO :g_setting_flag,:g_style,:g_style_lt
		 FROM REPORT_SYSPARAM A, MT_COMMON_SYS_PARAMS B 
		 WHERE A.BANK_CODE=B.INSTALLED_AT_BANK;

        fprintf(fl_userlog,"After REPORT_SYSPARM Ora Error :|%d|\n",sqlca.sqlcode);

	fprintf(fl_userlog,"DEFAULT_SETTING :|%s|\n",g_setting_flag);

	/***********************************************************************/

	if(!strcmp(l_report_type,"L"))
	{			
		fprintf(l_report_LETR1,"%s\n",g_style_lt);
		strcpy(g_table_border,"1");
	}
	else
	{
		fprintf(l_report_LETR1,"%s\n",g_style);
		strcpy(g_table_border,"1");
	}
	
	/************************************************************/

	fprintf(l_report_LETR1,"</HEAD>\n");

	fprintf(l_report_LETR1,"<BODY>\n");
	
	
	fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" class=\'heading\'><TR>\n");

	/***** Image path ****************************************************************************/

	fprintf(fl_userlog,"Before Image :- Compress Flag :|%s|\n",l_compress_flag);

	if(strlen(h_report_main_struct.image_path) > 0)
	{
		fprintf(l_report_LETR1,"<TD WIDTH=\"20%%\" ALIGN=\"LEFT\"><IMG id=\"image\" SRC=\"%s\" ALIGN=\"LEFT\" HEIGHT=\"60\" WIDTH=\"150\"/></TD>\n", h_report_main_struct.image_path);
	}



	/********* Letter Header Display ************************************************************/

	EXEC SQL SELECT CA_IDENTNAME||'</BR>'||REPLACE(CA_ADDRESS,'|','</BR>') 
		     INTO :l_letter_header FROM MT_COMMON_SYS_PARAMS;

	fprintf(fl_userlog,"After Letter Address ORA ERROR :|%d|\n",sqlca.sqlcode );

	if(strlen(h_report_main_struct.page_hdr_align) > 0)
	{
		if(strlen(h_report_main_struct.page_header) > 0 )
		{
			fprintf(l_report_LETR1,"<TD WIDTH=\"80%%\" ALIGN=\"%s\" class=\'heading\'><I>%s</I></TD>\n", h_report_main_struct.page_hdr_align,l_letter_header);
		}
	}
	else
	{
		if(strlen(h_report_main_struct.page_header) > 0 )
		{
			fprintf(l_report_LETR1,"<TR><TD WIDTH=\"80%%\" ALIGN=\"LEFT\" class=\'heading\'><I>%s</I></TD>\n",l_letter_header);
		}

	}

	fprintf(l_report_LETR1,"</TR></TABLE>\n");

	/*************************************************************************************/


		
	l_page_header = h_report_main_struct.page_hdr_brk;	
	
	fprintf(l_report_LETR1,"</BR>\n");

	while(l_page_header > 0 )
	{
		fprintf(l_report_LETR1,"</BR>\n");
				
		l_page_header -- ;
	}

	if(strcmp(l_report_type,"L"))
	{			
		fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
		fprintf(l_report_LETR1,"<TD ALIGN=\"LEFT\" class=\'ez4\'>Date : %s</TD>\n",l_start_date);
		fprintf(l_report_LETR1,"<TR></TABLE>\n");
		fprintf(l_report_LETR1,"</BR>\n");
	}
	
	/******* Stored procedure for REPORT MAIN ******************************************/
	
	fprintf(fl_userlog,"l_rept_id:|%s|\n",l_rept_id);
	fprintf(fl_userlog,"l_param1:|%s|\tl_param2:|%s|\n",l_param1,l_param2);
	fprintf(fl_userlog,"l_param3:|%s|\tl_param4:|%s|\n",l_param3,l_param4);
	fprintf(fl_userlog,"l_param5:|%s|\tl_param6:|%s|\n",l_param5,l_param6);

		
	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_MAIN for Report ID 5:|%s||%s|\n",l_rept_id,l_param1);		/*ok*/
	EXEC SQL CALL SP_REPORT_MAIN(:l_rept_id,:l_param1,:l_param2,:l_param3,:l_param4,
										  :l_param5,:l_param6,:l_gen_query,:l_error_desc);
	
	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Failure From SP_REPORT_MAIN ORA ERROR :|%d|\n",sqlca.sqlcode );
	}
	
	fprintf(fl_userlog,"GENERAL QUERY 8:|%s|\n",l_gen_query);/*ok*/
//fflush(fl_userlog);
	if(strlen(l_gen_query) > 0)
	{	
	EXEC SQL PREPARE LETR1_GEN FROM :l_gen_query;
	EXEC SQL DECLARE LETR1genquerycurr CURSOR FOR LETR1_GEN;
	EXEC SQL OPEN LETR1genquerycurr;
	
	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Failed to OPEN LETR1genquerycurr CURSOR ");
	}

	for(;;)
	{
		EXEC SQL FETCH LETR1genquerycurr
			INTO :l_general_param;

		
		if(sqlca.sqlcode == 1403)
		break;
		
	     if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		 {
		    fprintf(fl_userlog,"Error : GENERAL QUERY Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
		    break;
		 }
		 
		fprintf(fl_userlog,"l_general_param 7:|%s|\n",l_general_param);

		strcpy(l_general_parameter,l_general_param);
	
		/**** Split General Query and fetch the value in seperate parameter *******************/
		
		if (CO_SplitStr(l_general_parameter,CAPSEP,&l_param_num,&l_param_val) == APL_FAILURE)
		{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_general_parameter);
			 	APL_GOBACK_FAIL
		}

	
		fprintf(fl_userlog,"l_param_num:|%d|\n",l_param_num);	
		
		for(k=0;k<l_param_num;k++)
		{
			strcpy(l_param,l_param_val[k]);

			fprintf(fl_userlog,"l_param:|%s||%d|\n",l_param,k);

			/********* Before Title of report ***********************/
			
			if(k == 0)
			{
				if(strlen(h_report_main_struct.before_title_align) > 0)
				{	
					if(strlen(h_report_main_struct.before_title) > 0)
					{
						fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						fprintf(l_report_LETR1,"<TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'ez4\'>%s %s</TD>\n",h_report_main_struct.before_title_align,h_report_main_struct.before_title,l_param);
						fprintf(l_report_LETR1,"</TR></TABLE>\n");
					}
				}
				else
				{
					if(strlen(h_report_main_struct.before_title) > 0)
					{
						fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						fprintf(l_report_LETR1,"<TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'ez4\'>%s %s</TD>\n",h_report_main_struct.before_title,l_param);
						fprintf(l_report_LETR1,"</TR></TABLE>\n");
					}

				}
	
				l_before_title = h_report_main_struct.before_title_brk;
				while(l_before_title > 0)
				{
					fprintf(l_report_LETR1,"</BR>\n");
					l_before_title --;
				}
			}
			else if(k == 1)
			{
				if(strlen(h_report_main_struct.before_title1_align) > 0)
				{	
					if(strlen(h_report_main_struct.before_title1) > 0)
					{
						fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						fprintf(l_report_LETR1,"<TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'ez4\'>%s %s</TD>\n",h_report_main_struct.before_title1_align,h_report_main_struct.before_title1,l_param);
						fprintf(l_report_LETR1,"</TR></TABLE>\n");
					}
				}
				else
				{
					if(strlen(h_report_main_struct.before_title1) > 0)
					{
						fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						fprintf(l_report_LETR1,"<TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'ez4\'>%s %s</TD>\n",h_report_main_struct.before_title1,l_param);
						fprintf(l_report_LETR1,"</TR></TABLE>\n");
					}

				}
	
				l_before_title1 = h_report_main_struct.before_title1_brk;
				while(l_before_title1 > 0)
				{
					fprintf(l_report_LETR1,"</BR>\n");
					l_before_title1 --;
				}
			}
			else if(k == 2)
			{
				if(strlen(h_report_main_struct.before_title2_align) > 0)
				{	
					if(strlen(h_report_main_struct.before_title2) > 0)
					{
						fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						fprintf(l_report_LETR1,"<TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'ez4\'>%s %s</TD>\n",h_report_main_struct.before_title2_align,h_report_main_struct.before_title2,l_param);
						fprintf(l_report_LETR1,"</TR></TABLE>\n");
					}
				}
				else
				{
					if(strlen(h_report_main_struct.before_title2) > 0)
					{
						fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						fprintf(l_report_LETR1,"<TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'ez4\'>%s %s</TD>\n",h_report_main_struct.before_title2,l_param);
						fprintf(l_report_LETR1,"</TR></TABLE>\n");
					}

				}
	
				l_before_title2 = h_report_main_struct.before_title2_brk;
				while(l_before_title2 > 0)
				{
					fprintf(l_report_LETR1,"</BR>\n");
					l_before_title2 --;
				}
			}
			else if(k == 3)
			{
				if(strlen(h_report_main_struct.before_title3_align) > 0)
				{	
					if(strlen(h_report_main_struct.before_title3) > 0)
					{
						fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						fprintf(l_report_LETR1,"<TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'ez4\'>%s %s</TD>\n",h_report_main_struct.before_title3_align,h_report_main_struct.before_title3,l_param);
						fprintf(l_report_LETR1,"</TR></TABLE>\n");
					}
				}
				else
				{
					if(strlen(h_report_main_struct.before_title3) > 0)
					{
						fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR>\n");
						fprintf(l_report_LETR1,"<TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'ez4\'>%s %s</TD>\n",h_report_main_struct.before_title3,l_param);
						fprintf(l_report_LETR1,"</TR></TABLE>\n");
					}
				}
	
				l_before_title3 = h_report_main_struct.before_title3_brk;
				while(l_before_title3 > 0)
				{
					fprintf(l_report_LETR1,"</BR>\n");
					l_before_title3 --;
				}
			}	

		}

	}
	EXEC SQL CLOSE LETR1genquerycurr;

	}

	/******* Dynamic Header Display ********************************/

	fprintf(fl_userlog,"strlen(header_query) :|%d|\n",strlen(header_query));

	if(strlen(header_query) > 0)
	{

	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_HEADER :|%s||%s|\n",l_rept_id,l_param1);		
	printf("Calling Stored Procedure SP_REPORT_HEADER :|%s||%s|\n",l_rept_id,l_param1);		
	//fflush(fl_userlog);
	EXEC SQL CALL SP_REPORT_HEADER(:l_rept_id,:l_param1,:l_param2,
				:l_param3,:l_param4, :l_param5,
				:l_param6,:l_header_query,:l_header_query1,:l_error_desc); 

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_HEADER ERR DESC :|%s|\n",l_error_desc);
	}

	strcat(l_header_query,l_header_query1);

	fprintf(fl_userlog,"HEADER QUERY :|%s|\n",l_header_query);

	EXEC SQL PREPARE LETR1_HEADER_CURR FROM :l_header_query;

	EXEC SQL DECLARE LETR1_header_curr CURSOR FOR LETR1_HEADER_CURR;
	
	fprintf(fl_userlog,"After DECLARE LETR1_header_curr Ora Error :|%d|\n",sqlca.sqlcode);

	EXEC SQL OPEN LETR1_header_curr;

	EXEC SQL FETCH LETR1_header_curr INTO :l_header_query_value;

	fprintf(fl_userlog,"After FETCH LETR1_header_curr Ora Error :|%d|\n",sqlca.sqlcode);

	EXEC SQL CLOSE LETR1_header_curr;

	fprintf(fl_userlog,"l_header_query_value :|%s|\n",l_header_query_value);
	
	if (CO_SplitStr(l_header_query_value,CAPSEP,&l_header_num,&l_header_val) == APL_FAILURE)
	{
		CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_header_query_value);
		APL_GOBACK_FAIL
	}

	fprintf(fl_userlog,"l_header_num :|%d|\n",l_header_num);
	if(l_header_num > 0)
	{
		for(i=0;i<l_header_num;i++)
		{
			if(i == 0)
			strcpy(l_header1,l_header_val[i]);
			else if(i == 1)
			strcpy(l_header2,l_header_val[i]);
			else if(i == 2)
			strcpy(l_header3,l_header_val[i]);
			else if(i == 3)
			strcpy(l_header4,l_header_val[i]);
			else if(i == 4)
			strcpy(l_header5,l_header_val[i]);
			else if(i == 5)
			strcpy(l_header6,l_header_val[i]);
			else if(i == 6)
			strcpy(l_header7,l_header_val[i]);
			else if(i == 7)
			strcpy(l_header8,l_header_val[i]);
			else if(i == 8)
			strcpy(l_header9,l_header_val[i]);
			else if(i == 9)
			strcpy(l_header10,l_header_val[i]);
			else if(i == 10)
			strcpy(l_header11,l_header_val[i]);
			else if(i == 11)
			strcpy(l_header12,l_header_val[i]);
			else if(i == 12)
			strcpy(l_header13,l_header_val[i]);
			else if(i == 13)
			strcpy(l_header14,l_header_val[i]);
			else if(i == 14)
			strcpy(l_header15,l_header_val[i]);
		}
	}

	/****** Stored Procedure : SP_REPORT_HEADER_DATA ***********************************/

	fprintf(fl_userlog,"l_header1 :|%s|\t l_header2 :|%s|\n",l_header1,l_header2);
	fprintf(fl_userlog,"l_header3 :|%s|\t l_header4 :|%s|\n",l_header3,l_header4);
	fprintf(fl_userlog,"l_header5 :|%s|\t l_header6 :|%s|\n",l_header5,l_header6);
	fprintf(fl_userlog,"l_header7 :|%s|\t l_header8 :|%s|\n",l_header7,l_header8);
	fprintf(fl_userlog,"l_header9 :|%s|\t l_header10 :|%s|\n",l_header9,l_header10);
	fprintf(fl_userlog,"l_header11 :|%s|\t l_header12 :|%s|\n",l_header11,l_header12);
	fprintf(fl_userlog,"l_header13 :|%s|\t l_header14 :|%s|\n",l_header13,l_header14);
	fprintf(fl_userlog,"l_header15 :|%s|\t\n",l_header15);

	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_HEADER_DATA :|%s|\n",l_rept_id);		
	printf("Calling Stored Procedure SP_REPORT_HEADER_DATA :|%s|\n",l_rept_id);		
	//fflush(fl_userlog);
	EXEC SQL CALL SP_REPORT_HEADER_DATA(:l_rept_id,:l_header1,
					    :l_header2,:l_header3,
					    :l_header4,:l_header5,
					    :l_header6,:l_header7,
					    :l_header8,:l_header9,
					    :l_header10,:l_header11,
					    :l_header12,:l_header13,
					    :l_header14,:l_header15,
					    :l_header_data,:l_error_desc); 

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_HEADER_DATA ERR DESC :|%s|\n",l_error_desc);
	}

	fprintf(fl_userlog,"HEADER DATA :|%s|\n",l_header_data);

	/************ Dynamic Formating Procedure ********************************************/
	
	fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);	
	printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
	
	EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_header_data,:l_error_desc); 

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
	}

	fprintf(fl_userlog,"HEADER DATA After Formatting -- :|%s|\n",l_header_data);

	/*************************************************************************************/

	fprintf(fl_userlog,"strlen(l_header_data) :|%d|\n",strlen(l_header_data));
	
	if(strlen(l_header_data) > 0)
	{
		fprintf(fl_userlog,"Displaying Header Data ----- \n");

		fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\"><TR>\n");
		fprintf(l_report_LETR1,"<TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'headerdata\'>%s</TD>\n",h_report_main_struct.header_data_align,l_header_data);
		fprintf(l_report_LETR1,"</TR></TABLE>\n");
	}

	l_header_brk = h_report_main_struct.header_brk;
	while(l_header_brk > 0)
	{
		fprintf(l_report_LETR1,"</BR>\n");
		l_header_brk --;
		g_line_count++;
	}

	}

	/**********************  End Of Dynamic Header Display   ***************************/


	fprintf(l_report_LETR1,"</BR>\n");
	
	/***** Report Title *************************************************************************/

	if(strlen(h_report_main_struct.report_title_align) > 0)
	{	
		if(strlen(h_report_main_struct.report_title) > 0)	
		{
 			fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\"  class=\'ez4\'><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'ez4\'>%s</TD></TR></TABLE>\n",h_report_main_struct.report_title_align,h_report_main_struct.report_title);	 
		//fflush(fl_userlog);
		}
	}
	else
	{
		if(strlen(h_report_main_struct.report_title) > 0)	
		{
 			fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\"  class=\'ez4\'><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'ez4\'>%s</TD></TR></TABLE>\n",h_report_main_struct.report_title);	 
		//fflush(fl_userlog);
		}

	}
	
	l_report_title = h_report_main_struct.report_title_brk;	
	while(l_report_title > 0)
	{
		fprintf(l_report_LETR1,"</BR>\n");
		//fflush(fl_userlog);
		l_report_title --;
	}
	

	/******** After report title ****************************************************************/
	
	if(strlen(h_report_main_struct.after_title_align) > 0)
	{
		if(strlen(h_report_main_struct.after_title) > 0)
		{
			fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" class=\'ez4\'><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'ez4\'>%s</TD><TR></TABLE>\n",h_report_main_struct.after_title_align,h_report_main_struct.after_title);
		//fflush(fl_userlog);
		}
	}
	else
	{
		if(strlen(h_report_main_struct.after_title) > 0)
		{
			fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" class=\'ez4\'><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'ez4\'>%s</TD><TR></TABLE>\n",h_report_main_struct.after_title);
		//fflush(fl_userlog);
		}

	}
	
	l_after_title = h_report_main_struct.after_title_brk;
	while(l_after_title > 0)
	{
		fprintf(l_report_LETR1,"</BR>\n");
		//fflush(fl_userlog);
		l_after_title --;
	}
	

	l_table_id = 1;
	
	fprintf(fl_userlog,"NO OF TABLES :|%d|\n",h_report_main_struct.no_of_tables);
	//fflush(fl_userlog);
	printf("NO OF TABLES :|%d|\n",h_report_main_struct.no_of_tables);
	//fflush(fl_userlog);
	while(l_table_id <= h_report_main_struct.no_of_tables)
	{

		g_complex_parameter1 = 0.0;
		g_complex_parameter2 = 0.0;
		g_complex_parameter3 = 0.0;
		g_complex_parameter4 = 0.0;
		g_complex_parameter5 = 0.0;
		g_complex_parameter6 = 0.0;
		g_complex_parameter7 = 0.0;
		g_complex_parameter8 = 0.0;
		g_complex_parameter9 = 0.0;
		g_complex_parameter10 = 0.0;
		g_complex_parameter11 = 0.0;
		g_complex_parameter12 = 0.0;
		g_complex_parameter13 = 0.0;
		g_complex_parameter14 = 0.0;
		g_complex_parameter15 = 0.0;
		g_complex_parameter16 = 0.0;
		g_complex_parameter17 = 0.0;
		g_complex_parameter18 = 0.0;
		g_complex_parameter19 = 0.0;
		g_complex_parameter20 = 0.0;

		fprintf(fl_userlog,"l_rept_id:|%s|l_table_id:|%d|\n",l_rept_id,l_table_id);
		//fflush(fl_userlog);
		
		/******* Fetch the REPORT DETAILS for the perticular report ID and table ID ******/
		
		EXEC SQL SELECT * INTO :h_report_details_struct
					FROM REPORT_DETAILS 
					WHERE REPORT_ID=:l_rept_id
					AND TABLE_ID=:l_table_id;
		
	   	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Failed to Access REPORT_DETAILS --- ORA ERROR :|%d|\n",sqlca.sqlcode);
			//fflush(fl_userlog);
		}

		/***** Table header *******************************************/

		fprintf(fl_userlog,"h_report_details_struct.table_hdr:|%s|\n",h_report_details_struct.table_hdr);
		//fflush(fl_userlog);
		
		if(strlen(h_report_details_struct.table_hdr_align) > 0)
		{
			if(strlen(h_report_details_struct.table_hdr) > 0)
			{
				fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" class=\'lableredbg\'><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'lableredbg\'>%s</TD><TR></TABLE>\n",h_report_details_struct.table_hdr_align,h_report_details_struct.table_hdr);
			//fflush(fl_userlog);
			}
		}
		else
		{
			if(strlen(h_report_details_struct.table_hdr) > 0)
			{
				fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" class=\'lableredbg\'><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'lableredbg\'>%s</TD><TR></TABLE>\n",h_report_details_struct.table_hdr);
			//fflush(fl_userlog);
			}
			
		}

		l_table_hdr = h_report_details_struct.table_hdr_brk;
		while(l_table_hdr > 0)
		{
			fprintf(l_report_LETR1,"</BR>\n");
			//fflush(fl_userlog);
			l_table_hdr --;
		}

		/*********** Grouping Condition Check ***********************/

		fprintf(fl_userlog,"h_report_details_struct.group_desc:|%s|\n",h_report_details_struct.group_desc);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"h_report_details_struct.group_pos:|%s|\n",h_report_details_struct.group_pos);
		//fflush(fl_userlog);
			
		strcpy(l_group_pos,h_report_details_struct.group_pos);

		strcpy(l_group_query,h_report_details_struct.group_query);
		strcpy(l_group_desc,h_report_details_struct.group_desc);
	
		if(strlen(l_group_query) > 0)	
		{
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM1',:l_param1) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM2',:l_param2) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM3',:l_param3) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM4',:l_param4) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM5',:l_param5) INTO :l_group_query FROM DUAL;
			EXEC SQL SELECT REPLACE(:l_group_query,'@PARAM6',:l_param6) INTO :l_group_query FROM DUAL;
			
			fprintf(fl_userlog,"GROUP QUERY :|%s|\n",l_group_query);
			//fflush(fl_userlog);

			EXEC SQL PREPARE LETR1_GROUP1 FROM :l_group_query;
			EXEC SQL DECLARE LETR1_group1 CURSOR FOR LETR1_GROUP1;
			EXEC SQL OPEN LETR1_group1;

			if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
			{
				fprintf(fl_userlog,"Error : Cursor Open LETR1_group1 ORA ERROR :|%d|\n",sqlca.sqlcode);
				//fflush(fl_userlog);
			}

			for(;;)
			{
				EXEC SQL FETCH LETR1_group1
					INTO :l_group_parameter;

				if((sqlca.sqlcode == 1403)||(l_group_break_flag == 1))
					break;

			   	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Cursor Fetch LETR1_group1 ORA ERROR :|%d|\n",sqlca.sqlcode);
					//fflush(fl_userlog);
				}

				/******** Split Group Parameter **************************************/
			
				fprintf(fl_userlog,"l_group_pos:|%s|\n",l_group_pos);
				//fflush(fl_userlog);
				
				if(CO_SplitStr(l_group_pos,COMASEP,&l_group_pos_no,&l_group_pos_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 	fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_pos);
					//fflush(fl_userlog);
				 	APL_GOBACK_FAIL
				}
				
				fprintf(fl_userlog,"l_group_parameter:|%s|\n",l_group_parameter);
				//fflush(fl_userlog);
				
				if(CO_SplitStr(l_group_parameter,CAPSEP,&l_group_parameter_no,&l_group_parameter_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 	fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_parameter);
					//fflush(fl_userlog);
				 	APL_GOBACK_FAIL
				}

				fprintf(fl_userlog,"l_group_pos_no:|%d|l_group_parameter_no:|%d|\n",l_group_pos_no,l_group_parameter_no);
				//fflush(fl_userlog);
				
				if((l_group_pos_no > 0) && (l_group_parameter_no > 0)
					&& (l_group_pos_no == l_group_parameter_no))
				{	
					l_group_break_flag=0;
				
					for(i=0;i<l_group_pos_no;i++)
					{
						if(!strcmp(l_group_pos_value[i],"2"))
						{
							fprintf(fl_userlog,"l_param2:|%s|l_prev_param2:|%s|\n",l_param2,l_prev_param2);
							//fflush(fl_userlog);
							if(!strcmp(l_param2,l_prev_param2))
							{
								strcpy(l_param2,l_group_parameter_value[i]);
								strcpy(l_prev_param2,l_param2);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"3"))
						{
							fprintf(fl_userlog,"l_param3:|%s|l_prev_param3:|%s|\n",l_param3,l_prev_param3);
							//fflush(fl_userlog);
							
							if(!strcmp(l_param3,l_prev_param3))
							{
								strcpy(l_param3,l_group_parameter_value[i]);
								strcpy(l_prev_param3,l_param3);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"4"))
						{
							fprintf(fl_userlog,"l_param4:|%s|l_prev_param4:|%s|\n",l_param4,l_prev_param4);
							//fflush(fl_userlog);
							
							if(!strcmp(l_param4,l_prev_param4))
							{
								strcpy(l_param4,l_group_parameter_value[i]);
								strcpy(l_prev_param4,l_param4);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"5"))
						{
							fprintf(fl_userlog,"l_param5:|%s|l_prev_param5:|%s|\n",l_param5,l_prev_param5);
							//fflush(fl_userlog);
							
							if(!strcmp(l_param5,l_prev_param5))
							{
								strcpy(l_param5,l_group_parameter_value[i]);
								strcpy(l_prev_param5,l_param5);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"6"))
						{
							fprintf(fl_userlog,"l_param6:|%s|l_prev_param6:|%s|\n",l_param6,l_prev_param6);
							//fflush(fl_userlog);
							
							if(!strcmp(l_param6,l_prev_param6))
							{
								strcpy(l_param6,l_group_parameter_value[i]);
								strcpy(l_prev_param6,l_param6);
							}
							else
								l_group_break_flag=1;
						}
					}
				}
				else
				{
					fprintf(fl_userlog,"Error: Mismatch in Group Parameters :|%d||%d|",l_group_pos_no,l_group_parameter_no);
					//fflush(fl_userlog);
					break;
				}
				
				/*****************************************************************/
				
				fprintf(fl_userlog,"l_param1:|%s|\n",l_param1);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_param2:|%s|\n",l_param2);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_param3:|%s|\n",l_param3);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_param4:|%s|\n",l_param4);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_param5:|%s|\n",l_param5);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_param6:|%s|\n",l_param6);
				//fflush(fl_userlog);


			/********* Stored procedure for REPORT DETAILS GROUPING *******************/
			
			fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID 38:|%s|\n",l_rept_id);	
              //fflush(fl_userlog);			
			EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
					:l_param2,:l_param3,:l_param4,
					:l_param5,:l_param6,
					:l_table_query,:l_table_query1,:l_table_query2,
					:l_table_query3,:l_table_query4,:l_table_query5,
					:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
					:l_group_desc,:l_error_desc);

			strcpy(table_query,l_table_query);
			strcat(table_query," ");
			
			if(strlen(l_table_query1) > 0)
			{
				strcat(table_query,l_table_query1);
				strcat(table_query," ");
			}
			if(strlen(l_table_query2) > 0)
			{
				strcat(table_query,l_table_query2);
				strcat(table_query," ");
			}
			if(strlen(l_table_query3) > 0)
			{
				strcat(table_query,l_table_query3);
				strcat(table_query," ");
			}
			if(strlen(l_table_query4) > 0)
			{
				strcat(table_query,l_table_query4);
				strcat(table_query," ");
			}
			if(strlen(l_table_query5) > 0)
			{
				strcat(table_query,l_table_query5);
				strcat(table_query," ");
			}
			
			strcat(table_query,APL_NULL_STRING);

				
			fprintf(fl_userlog,"After Stored Procedure SP_REPORT_DETAIL ORA ERROR 15:|%d|\n",sqlca.sqlcode);
			//fflush(fl_userlog);
			
			if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
			{
				fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
				//fflush(fl_userlog);
			}
			
			//fprintf(fl_userlog,"table_query:|%s|\n",table_query);
              			
			fprintf(fl_userlog,"l_criteria_query1:|%s|\n",l_criteria_query1);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"l_criteria_query2:|%s|\n",l_criteria_query2);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"l_criteria_query3:|%s|\n",l_criteria_query3);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"l_group_desc:|%s|\n",l_group_desc);
			//fflush(fl_userlog);

			/********* Group Description ****************************/
			
			if(strlen(l_group_desc) > 0)
			{
				fprintf(l_report_LETR1,"</BR>\n");
				//fflush(fl_userlog);
				fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR><TD WIDTH=\'100%%\' class=\'ez4\'>%s</TD></TR></TABLE>\n",l_group_desc);
				//fflush(fl_userlog);
				fprintf(l_report_LETR1,"</BR>\n");
				//fflush(fl_userlog);
			}


			/****** Before table ************************************/
			
			if(strlen(h_report_details_struct.before_table_align) > 0)
			{
				if(strlen(h_report_details_struct.before_table) > 0)
				{	
					fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\"ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.before_table_align,h_report_details_struct.before_table);
				//fflush(fl_userlog);
				}
			}
			else
			{
				if(strlen(h_report_details_struct.before_table) > 0)
				{	
					fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\"ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.before_table);
				//fflush(fl_userlog);
				}

			}	
			
			l_before_table = h_report_details_struct.before_table_brk;
			while(l_before_table > 0)
			{
				fprintf(l_report_LETR1,"</BR>\n");
				//fflush(fl_userlog);
				l_before_table --;
			}

			/******* Column Heading **********************************/
			
			/****** Multiple Column Level **************************/

			strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
			strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
			strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
			
			fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);
			//fflush(fl_userlog);

			if(strlen(l_multiple_col_flag) > 0)
			{
				fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);
				//fflush(fl_userlog);

				if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
						&l_multiple_col_header_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
					 //fflush(fl_userlog);
					 APL_GOBACK_FAIL
				}

				if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
						&l_multiple_colspan_sep_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
					 //fflush(fl_userlog);
					 APL_GOBACK_FAIL
				}


				fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);\
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);
				//fflush(fl_userlog);

				fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" border=\'%s\' cellSpacing=\'0\' cellPadding=\'1\'>\n",g_table_border);
				//fflush(fl_userlog);

				if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
				{
					for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
					{
						for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
						{

						if(int_a == int_b )
						{
						
						strcpy(l_level_header,l_multiple_col_header_value[int_a]);
						strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

						fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
						//fflush(fl_userlog);
						fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);
						//fflush(fl_userlog);

						if (CO_SplitStr(l_level_header,
								SEMISEP,
								&l_level_header_no,
								&l_level_header_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
							 //fflush(fl_userlog);
							 APL_GOBACK_FAIL
						}

						if (CO_SplitStr(l_level_colspan,
								SEMISEP,
								&l_level_colspan_no,
								&l_level_colspan_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
							 //fflush(fl_userlog);
							 APL_GOBACK_FAIL
						}

						fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
						//fflush(fl_userlog);
						fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);
						//fflush(fl_userlog);

						if(l_level_header_no == l_level_colspan_no)
						{

						fprintf(l_report_LETR1,"<TR>\n");
						//fflush(fl_userlog);
						for(int_aa=0;int_aa<l_level_header_no;int_aa++)
						{
							for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
							{
								if(int_aa == int_bb)
								{	
								
								strcpy(l_level_column,l_level_header_value[int_aa]);
								strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

								fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
								//fflush(fl_userlog);
								fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
								//fflush(fl_userlog);
								
								if(strlen(l_level_column) > 0)
								{
									fprintf(l_report_LETR1,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >%s</TD> \n", l_level_col_span,l_level_column);
								//fflush(fl_userlog);
								}
								else
								{
									fprintf(l_report_LETR1,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >&nbsp;</TD> \n", l_level_col_span);
                                   //fflush(fl_userlog);
								}

								}
							}
						}
						fprintf(l_report_LETR1,"</TR>\n");
						//fflush(fl_userlog);

						}/*** End Of Inner Condition check *****/

						}
						
												
						}/*** End Of 2st Main For Loop *******/

					}/*** End Of 1st Main For Loop *******/

				}/*** End Of Multiple col condition check *****/

				l_column_no=h_report_details_struct.no_of_columns;
				l_no_of_columns = h_report_details_struct.no_of_columns;
			}
			else
			{

			fprintf(fl_userlog,"COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
			//fflush(fl_userlog);
			printf("COLUMN HEADER :|%s|\n",h_report_details_struct.column_hdr);
			//fflush(fl_userlog);
			/**** Split the Column Header and print *****************/
			
			strcpy(l_column_header,h_report_details_struct.column_hdr);
			if (CO_SplitStr(l_column_header,COMASEP,&l_col_no,&l_col_value) == APL_FAILURE)
			{
				 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_header);
				 //fflush(fl_userlog);
				 APL_GOBACK_FAIL
			}

			/***** Table Column Heading and its records  *********/
			
			fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
			//fflush(fl_userlog);

			fprintf(l_report_LETR1,"<TR>\n");
			//fflush(fl_userlog);
			for(i=0;i<l_col_no;i++)
			{
				strcpy(l_column_value,l_col_value[i]);

				printf("l_column_value[%d] : |%s|\n",i,l_column_value);
				//fflush(fl_userlog);
				fprintf(l_report_LETR1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
				//fflush(fl_userlog);
			}
			fprintf(l_report_LETR1,"</TR>\n");
			//fflush(fl_userlog);

			l_column_no=h_report_details_struct.no_of_columns;
			l_no_of_columns = h_report_details_struct.no_of_columns;
			
			l_col_hdr = h_report_details_struct.col_hdr_brk;
			
			}/**** End Of Column Header Else Part ******************/

			EXEC SQL PREPARE LETR1_SUB1 FROM :table_query;	
			EXEC SQL DECLARE LETR1tablequery1 CURSOR FOR LETR1_SUB1;
			EXEC SQL OPEN LETR1tablequery1;

			l_fetch_count=0;

			for(;;)
			{
				EXEC SQL FETCH LETR1tablequery1
					INTO :l_table_parameter;

				if(sqlca.sqlcode == 1403)
				{
					fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
					if(l_fetch_count == 0)
					{
						fprintf(l_report_LETR1,"<TR>\n");
						//fflush(fl_userlog);
						fprintf(l_report_LETR1,"<TD WIDTH=\'100%%\' COLSPAN=\'%d\' class=\'ez4\'>NO RECORDS FOUND </TD>\n",l_column_no);
						//fflush(fl_userlog);
						fprintf(l_report_LETR1,"</TR>\n");
						//fflush(fl_userlog);
					}
					break;
				}

			   	if(sqlca.sqlcode < 0)
				{
				   fprintf(fl_userlog,"Error : Critical Error Occured in LETR1tablequery1 --- ORA ERROR:|%d|\n",sqlca.sqlcode);
				   //fflush(fl_userlog);
					break;
				}

				strcpy(l_column_parameter,l_table_parameter);
				
				/***** Split the string and fetch the column data ******/
			
				if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
				{
					CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
					//fflush(fl_userlog);
					APL_GOBACK_FAIL
				}

				/***** For Number Formatting ***************************************************/

				strcpy(l_format_col_pos,h_report_details_struct.format_col_pos);
				if (CO_SplitStr(l_format_col_pos,COMASEP,&l_format_col_no,&l_format_col_val) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_format_col_pos);
					 //fflush(fl_userlog);
					 APL_GOBACK_FAIL
				}

				fprintf(l_report_LETR1,"<TR>\n");
				//fflush(fl_userlog);

				for(j=0;j<l_column_num;j++)
				{
					strcpy(l_column,l_column_val[j]);
					
					l_format_col_flag = 0;
					if(l_format_col_no > 0)
					{
						for (k=0;k<l_format_col_no;k++)
						{
							strcpy(l_format_col_value,l_format_col_val[k]);

							if(j==(atoi(l_format_col_value)-1))
								l_format_col_flag = 1;
						}

						if((strlen(l_column) > 0) && (strcmp(l_column," ")))
						{
							if(l_format_col_flag == 1)
							{
								EXEC SQL CALL SP_NUMBER_FORMATTING(:l_column,:l_error_desc);

								if(strlen(l_error_desc) > 0)
								{
									fprintf(l_report_LETR1,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
									//fflush(fl_userlog);
								}
								else
								{
									fprintf(l_report_LETR1,"<TD class=\'record\' ALIGN=\"RIGHT\">%s</TD>\n",l_column);
									//fflush(fl_userlog);
								}
							}
							else
							{
								fprintf(l_report_LETR1,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
								//fflush(fl_userlog);
							}
						}
						else{
							 fprintf(l_report_LETR1,"<TD class=\'record\'  >&nbsp</TD>\n");
							 //fflush(fl_userlog);
						}
					}
					else
					{
						if((strlen(l_column) > 0) && (strcmp(l_column," ")))
						{
							fprintf(l_report_LETR1,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
							//fflush(fl_userlog);
						}
						else
						{
							fprintf(l_report_LETR1,"<TD class=\'record\'  >&nbsp</TD>\n");
							//fflush(fl_userlog);
						}
							
					}

				}
				fprintf(l_report_LETR1,"</TR>\n");
				//fflush(fl_userlog);

				/***********************************************************************************/

				l_fetch_count ++;

			}
			EXEC SQL CLOSE LETR1tablequery1;

		   	/******* For Criteria column value display **************************/
			
			if(h_report_details_struct.tot_criteria_cols > 0)
			{
				if(strlen(h_report_details_struct.criteria_col1_query) > 0)
				{
					EXEC SQL PREPARE LETR1_CR11 FROM :l_criteria_query1;
					EXEC SQL DECLARE LETR1_criteria11 CURSOR FOR LETR1_CR11;
					EXEC SQL OPEN LETR1_criteria11;
					
			      		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					{
						fprintf(fl_userlog,"Error : Failed to Open LETR1_criteria1 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
						//fflush(fl_userlog);
					}

					for(;;)
					{
					       EXEC SQL FETCH LETR1_criteria11 INTO :l_criteria_value1;
					
					       if(sqlca.sqlcode == 1403)
					       break;

			               if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					       {
							fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
							//fflush(fl_userlog);
							break;
					       }
					}
					EXEC SQL CLOSE LETR1_criteria11;

					if(strcmp(l_criteria_value1,APL_NULL_STRING))
					{
					EXEC SQL SELECT (:l_criteria_value1) INTO :l_criteria1_total FROM DUAL;
					
					l_grand_total1=l_grand_total1+l_criteria1_total;
					
					fprintf(fl_userlog,"l_grand_total1 :|%lf|\n",l_grand_total1);
					//fflush(fl_userlog);

						fprintf(l_report_LETR1,"<TR>\n");
						//fflush(fl_userlog);
						fprintf(l_report_LETR1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col1_name,l_criteria_value1);
						//fflush(fl_userlog);
						fprintf(l_report_LETR1,"</TR>\n");
						//fflush(fl_userlog);
					}
				}

				if(strlen(h_report_details_struct.criteria_col2_query) > 0)
				{
					EXEC SQL PREPARE LETR1_CR22 FROM :l_criteria_query2;
					EXEC SQL DECLARE LETR1_criteria22 CURSOR FOR LETR1_CR22;
					EXEC SQL OPEN LETR1_criteria22;
					
			                if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					{
						fprintf(fl_userlog,"Error : Failed to Open LETR1_criteria2 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
						//fflush(fl_userlog);
					}

					for(;;)
					{
					       EXEC SQL FETCH LETR1_criteria22 INTO :l_criteria_value2;
					
					       if(sqlca.sqlcode == 1403)
					       break;

			                       if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					       {
							fprintf(fl_userlog,"Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
							//fflush(fl_userlog);
							break;
					       }
					}
					EXEC SQL CLOSE LETR1_criteria22;

					
					if(strcmp(l_criteria_value2,APL_NULL_STRING))	
					{
					
						EXEC SQL SELECT (:l_criteria_value2) INTO :l_criteria2_total FROM DUAL;
						l_grand_total2=l_grand_total2+l_criteria2_total;
					
						fprintf(fl_userlog,"l_grand_total2 :|%lf|\n",l_grand_total2);
						//fflush(fl_userlog);

						fprintf(l_report_LETR1,"<TR>\n");
						//fflush(fl_userlog);
						fprintf(l_report_LETR1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col2_name,l_criteria_value2);
						//fflush(fl_userlog);

						fprintf(l_report_LETR1,"</TR>\n");
						//fflush(fl_userlog);
					}
				}

				if(strlen(h_report_details_struct.criteria_col3_query) > 0)
				{
					EXEC SQL PREPARE LETR1_CR33 FROM :l_criteria_query3;
					EXEC SQL DECLARE LETR1_criteria33 CURSOR FOR LETR1_CR33;
					EXEC SQL OPEN LETR1_criteria33;
					
			                if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					{
						fprintf(fl_userlog,"Error : Failed to Open LETR1_criteria3 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
						//fflush(fl_userlog);
					}

					for(;;)
					{
					       EXEC SQL FETCH LETR1_criteria33 INTO :l_criteria_value3;
					
					       if(sqlca.sqlcode == 1403)
					       break;

			                       if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					       {
							printf("Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
							//fflush(fl_userlog);
							break;
					       }
					}
					EXEC SQL CLOSE LETR1_criteria33;
									
					if(strcmp(l_criteria_value3,APL_NULL_STRING))
					{
						EXEC SQL SELECT (:l_criteria_value3) INTO :l_criteria3_total FROM DUAL;
						l_grand_total3=l_grand_total3+l_criteria3_total;
					
						fprintf(fl_userlog,"l_grand_total3 :|%lf|\n",l_grand_total3);
						//fflush(fl_userlog);

						fprintf(l_report_LETR1,"<TR>\n");
						//fflush(fl_userlog);

						fprintf(l_report_LETR1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col3_name,l_criteria_value3);
                         //fflush(fl_userlog);
						
						fprintf(l_report_LETR1,"</TR>\n");
						//fflush(fl_userlog);
					}
				}
			}

			/******* Complex Criteria Part ***************************************/

			strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
			strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
			strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
			strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

			if(strlen(complex_criteria_query) > 0)
			{
			
			EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
					:complex_criteria_query,
					'@PARAM1',:l_param1),
					'@PARAM2',:l_param2),
					'@PARAM3',:l_param3),
					'@PARAM4',:l_param4),
					'@PARAM5',:l_param5),
					'@PARAM6',:l_param6),
					REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
					:complex_criteria_query1,
					'@PARAM1',:l_param1),
					'@PARAM2',:l_param2),
					'@PARAM3',:l_param3),
					'@PARAM4',:l_param4),
					'@PARAM5',:l_param5),
					'@PARAM6',:l_param6)
				INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;
			
			strcat(complex_criteria_query,complex_criteria_query1);
			
			fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);
			//fflush(fl_userlog);

			EXEC SQL PREPARE LETR11_CMPX_CURR FROM :complex_criteria_query;

			EXEC SQL DECLARE LETR11_complex_curr CURSOR FOR LETR11_CMPX_CURR;

			fprintf(fl_userlog,"After DECLARE LETR11_complex_curr :|%d|\n",sqlca.sqlcode);
			//fflush(fl_userlog);

			EXEC SQL OPEN LETR11_complex_curr;

			EXEC SQL FETCH LETR11_complex_curr INTO :l_complex_parameter;

			fprintf(fl_userlog,"After FETCH LETR11_complex_curr :|%d|\n",sqlca.sqlcode);
			//fflush(fl_userlog);

			EXEC SQL CLOSE LETR11_complex_curr;

			fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);
			//fflush(fl_userlog);

			if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
				//fflush(fl_userlog);
				APL_GOBACK_FAIL
			}
			
			fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);

			if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
				//fflush(fl_userlog);
				APL_GOBACK_FAIL
			}


			fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);
			//fflush(fl_userlog);

			l_complex_break_flag = 0;
			
			if(l_complex_num == l_complex_pos_num)
			{

			fprintf(l_report_LETR1,"<TR>\n");
			//fflush(fl_userlog);

			for(i=0;i<l_column_num;i++)
			{
				for(j=0;j<l_complex_pos_num;j++)
				{

				strcpy(l_complex_pos_column,l_complex_pos_val[j]);

				if((i==0)&&(j==0))
				{
					if(strlen(complex_criteria_label) > 0)
					{
						fprintf(l_report_LETR1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" >%s</TD>\n",complex_criteria_label);
						//fflush(fl_userlog);
						l_complex_break_flag=1;
					}
					else {
					fprintf(l_report_LETR1,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
					//fflush(fl_userlog);
					}
				}

				if(i== (atoi(l_complex_pos_column)-1))
				{				  
				  strcpy(l_complex_column,l_complex_val[j]);

				  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);
				  //fflush(fl_userlog);

				  l_complex_break_flag=1;

				  if(strlen(l_complex_column) > 0)
				  {
					  EXEC SQL CALL SP_NUMBER_FORMATTING(:l_complex_column,:l_error_desc);

					  if(strlen(l_error_desc) > 0)
					  {
						fprintf(l_report_LETR1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">%s</TD>\n",l_complex_column);
						//fflush(fl_userlog);
					  }
					  else
					  {
						fprintf(l_report_LETR1,"<TD class=\'lableredbg\' ALIGN=\"RIGHT\">%s</TD>\n",l_complex_column);
						//fflush(fl_userlog);
					  }
				  }
				  else
				  {
						fprintf(l_report_LETR1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">&nbsp;</TD>\n");
						//fflush(fl_userlog);
				  } 			
		
				  break;
				}
				else
				{
				     l_complex_break_flag = 0;
				     continue;
				} 

				}
				     
				if(i != 0)
				{
				  if(l_complex_break_flag != 1)
				     fprintf(l_report_LETR1,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
					 //fflush(fl_userlog);
				}
			}

			}
			else
			{
				fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
				//fflush(fl_userlog);
			}

			fprintf(l_report_LETR1,"</TR>\n");
			//fflush(fl_userlog);

			}
			
			/*****************	End Of Complex Part     *********************/

			fprintf(l_report_LETR1,"</TABLE>\n");
			//fflush(fl_userlog);

			/****** After table ***************************************************/
	
			l_after_table = h_report_details_struct.after_table_brk;
			while(l_after_table > 0)
			{
				fprintf(l_report_LETR1,"</BR>\n");
				//fflush(fl_userlog);
				l_after_table --;
			}

			if(strlen(h_report_details_struct.after_table_align) > 0)
			{
				if(strlen(h_report_details_struct.after_table) > 0)
				{		
					fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.after_table_align,h_report_details_struct.after_table);
				//fflush(fl_userlog);
				}
			}
			else
			{
				if(strlen(h_report_details_struct.after_table) > 0)
				{	
					fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.after_table);
				//fflush(fl_userlog);
				}

			}	
  
			/******** Table Footer note *********************************************/
	
			l_table_footer = h_report_details_struct.table_footer_brk;
			if(l_table_footer > 0)
			{
				fprintf(l_report_LETR1,"</BR>\n");
				//fflush(fl_userlog);
				l_table_footer --;
			}
		
			if(strlen(h_report_details_struct.table_footer_align) > 0)
			{
				if(strlen(h_report_details_struct.table_footer) > 0)
				{
					fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",h_report_details_struct.table_footer_align,h_report_details_struct.table_footer);
				//fflush(fl_userlog);
				}
			}
			else
			{
				if(strlen(h_report_details_struct.table_footer) > 0)
				{
					fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",h_report_details_struct.table_footer);
				//fflush(fl_userlog);
				}

			}

			l_table = h_report_main_struct.table_brk;
			if(l_table > 0)
			{
				fprintf(l_report_LETR1,"</BR>\n");
				//fflush(fl_userlog);
				l_table --;
			}
			
			if(l_fetch_count > 0 )
			{
			
			for(m=0;m<l_complex_num;m++)
			{
				if(m == 0)
				{
					strcpy(l_complex_parameter1,l_complex_val[m]);
					g_complex_parameter1=g_complex_parameter1+atof(l_complex_parameter1);
				}
				else if(m == 1)
				{
					strcpy(l_complex_parameter2,l_complex_val[m]);
					g_complex_parameter2=g_complex_parameter2+atof(l_complex_parameter2);
				}
				else if(m == 2)
				{
					strcpy(l_complex_parameter3,l_complex_val[m]);
					g_complex_parameter3=g_complex_parameter3+atof(l_complex_parameter3);
				}
				else if(m == 3)
				{
					strcpy(l_complex_parameter4,l_complex_val[m]);
					g_complex_parameter4=g_complex_parameter4+atof(l_complex_parameter4);
				}
				else if(m == 4)
				{
					strcpy(l_complex_parameter5,l_complex_val[m]);
					g_complex_parameter5=g_complex_parameter5+atof(l_complex_parameter5);
				}
				else if(m == 5)
				{
					strcpy(l_complex_parameter6,l_complex_val[m]);
					g_complex_parameter6=g_complex_parameter6+atof(l_complex_parameter6);
				}
				else if(m == 6)
				{
					strcpy(l_complex_parameter7,l_complex_val[m]);
					g_complex_parameter7=g_complex_parameter7+atof(l_complex_parameter7);
				}
				else if(m == 7)
				{
					strcpy(l_complex_parameter8,l_complex_val[m]);
					g_complex_parameter8=g_complex_parameter8+atof(l_complex_parameter8);
				}
				else if(m == 8)
				{
					strcpy(l_complex_parameter9,l_complex_val[m]);
					g_complex_parameter9=g_complex_parameter9+atof(l_complex_parameter9);
				}
				else if(m == 9)
				{
				        strcpy(l_complex_parameter10,l_complex_val[m]);
				        g_complex_parameter10=g_complex_parameter10+atof(l_complex_parameter10);
				}
				else if(m == 10)
				{
					strcpy(l_complex_parameter11,l_complex_val[m]);
					g_complex_parameter11=g_complex_parameter11+atof(l_complex_parameter11);
				}
				else if(m == 11)
				{
					strcpy(l_complex_parameter12,l_complex_val[m]);			
					g_complex_parameter12=g_complex_parameter12+atof(l_complex_parameter12);
				}
				else if(m == 12)
				{
					strcpy(l_complex_parameter13,l_complex_val[m]);
					g_complex_parameter13=g_complex_parameter13+atof(l_complex_parameter13);
				}
				else if(m == 13)
				{
					strcpy(l_complex_parameter14,l_complex_val[m]);
					g_complex_parameter14=g_complex_parameter14+atof(l_complex_parameter14);
				}
				else if(m == 14)
				{
					strcpy(l_complex_parameter15,l_complex_val[m]);
					g_complex_parameter15=g_complex_parameter15+atof(l_complex_parameter15);
				}
				else if(m == 15)
				{
					strcpy(l_complex_parameter16,l_complex_val[m]);
					g_complex_parameter16=g_complex_parameter16+atof(l_complex_parameter16);
				}
				else if(m == 16)
				{
					strcpy(l_complex_parameter17,l_complex_val[m]);
					g_complex_parameter17=g_complex_parameter17+atof(l_complex_parameter17);
				}
				else if(m == 17)
				{
					strcpy(l_complex_parameter18,l_complex_val[m]);
					g_complex_parameter18=g_complex_parameter18+atof(l_complex_parameter18);
				}
				else if(m == 18)
				{
					strcpy(l_complex_parameter19,l_complex_val[m]);
					g_complex_parameter19=g_complex_parameter19+atof(l_complex_parameter19);
				}
				else if(m == 19)
				{
					strcpy(l_complex_parameter20,l_complex_val[m]);
					g_complex_parameter20=g_complex_parameter20+atof(l_complex_parameter20);
				}
			}

			}/*** End Of Fetch Count check ******/

			}/*** End Of Grouping For Loop ******/
			EXEC SQL CLOSE LETR1_group1;	
		}
		else
		{
		
		/**** Stored procedure for REPORT DETAILS *************************************/
			
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID 39:|%s|\n",l_rept_id);
		//fflush(fl_userlog);
			EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
					:l_param2,:l_param3,:l_param4,
					:l_param5,:l_param6,
					:l_table_query,:l_table_query1,:l_table_query2,
					:l_table_query3,:l_table_query4,:l_table_query5,
					:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
					:l_group_desc,:l_error_desc);

			strcpy(table_query,l_table_query);
			strcat(table_query," ");
			
			if(strlen(l_table_query1) > 0)
			{
				strcat(table_query,l_table_query1);
				strcat(table_query," ");
			}
			if(strlen(l_table_query2) > 0)
			{
				strcat(table_query,l_table_query2);
				strcat(table_query," ");
			}
			if(strlen(l_table_query3) > 0)
			{
				strcat(table_query,l_table_query3);
				strcat(table_query," ");
			}
			if(strlen(l_table_query4) > 0)
			{
				strcat(table_query,l_table_query4);
				strcat(table_query," ");
			}
			if(strlen(l_table_query5) > 0)
			{
				strcat(table_query,l_table_query5);
				strcat(table_query," ");
			}
			
			strcat(table_query,APL_NULL_STRING);

			
	   	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
			//fflush(fl_userlog);
		}
		
		/*fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
		//fflush(fl_userlog);*/
		fprintf(fl_userlog,"l_criteria_query1:|%s|\n",l_criteria_query1);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_criteria_query2:|%s|\n",l_criteria_query2);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_criteria_query3:|%s|\n",l_criteria_query3);
		//fflush(fl_userlog);
		
		/****** Before table *************************************************************/
		
		if(strlen(h_report_details_struct.before_table_align) > 0)
		{
			if(strlen(h_report_details_struct.before_table) > 0)
			{	
				fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\"ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.before_table_align,h_report_details_struct.before_table);
			//fflush(fl_userlog);
			}
		}
		else
		{
			if(strlen(h_report_details_struct.before_table) > 0)
			{	
				fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\"ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.before_table);
			     //fflush(fl_userlog);
			}

		}	
		
		l_before_table = h_report_details_struct.before_table_brk;
		while(l_before_table > 0)
		{
			fprintf(l_report_LETR1,"</BR>\n");
			//fflush(fl_userlog);
			l_before_table --;
		}

		/******* Column Heading *********************************************************/
		
		/****** Multiple Column Level **************************************/

		strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
		strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
		strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
		
		fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);
		//fflush(fl_userlog);

		if(strlen(l_multiple_col_flag) > 0)
		{
			fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);
			//fflush(fl_userlog);

			if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
					&l_multiple_col_header_value) == APL_FAILURE)
			{
				 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
				 //fflush(fl_userlog);
				 APL_GOBACK_FAIL
			}

			if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
					&l_multiple_colspan_sep_value) == APL_FAILURE)
			{
				 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
				 //fflush(fl_userlog);
				 APL_GOBACK_FAIL
			}


			fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);
			//fflush(fl_userlog);

			fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" border=\'%s\' cellSpacing=\'0\' cellPadding=\'1\'>\n",g_table_border);
			//fflush(fl_userlog);

			if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
			{
				for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
				{
					for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
					{

					if(int_a == int_b )
					{
					
					strcpy(l_level_header,l_multiple_col_header_value[int_a]);
					strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

					fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);
					//fflush(fl_userlog);

					if (CO_SplitStr(l_level_header,
							SEMISEP,
							&l_level_header_no,
							&l_level_header_value) == APL_FAILURE)
					{
						 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
						 //fflush(fl_userlog);
						 APL_GOBACK_FAIL
					}

					if (CO_SplitStr(l_level_colspan,
							SEMISEP,
							&l_level_colspan_no,
							&l_level_colspan_value) == APL_FAILURE)
					{
						 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
						 //fflush(fl_userlog);
						 APL_GOBACK_FAIL
					}

					fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);
                     //fflush(fl_userlog);
					 
					if(l_level_header_no == l_level_colspan_no)
					{

					fprintf(l_report_LETR1,"<TR>\n");
					//fflush(fl_userlog);
					for(int_aa=0;int_aa<l_level_header_no;int_aa++)
					{
						for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
						{
							if(int_aa == int_bb)
							{	
							
							strcpy(l_level_column,l_level_header_value[int_aa]);
							strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

							fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
							//fflush(fl_userlog);
							fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
							//fflush(fl_userlog);
							
							if(strlen(l_level_column) > 0)
							{
							fprintf(l_report_LETR1,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >%s</TD> \n", l_level_col_span,l_level_column);
							//fflush(fl_userlog);
							}
							else
							{
								fprintf(l_report_LETR1,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >&nbsp;</TD> \n", l_level_col_span);
                                  //fflush(fl_userlog);
							}

							}
						}
					}
					fprintf(l_report_LETR1,"</TR>\n");
					//fflush(fl_userlog);

					}/*** End Of Inner Condition check *****/

					}					
											
					}/*** End Of 2st Main For Loop *******/

				}/*** End Of 1st Main For Loop *******/

			}/*** End Of Multiple col condition check *****/

			l_column_no=h_report_details_struct.no_of_columns;
			l_no_of_columns = h_report_details_struct.no_of_columns;
		}
		else
		{

		
		/**** Split the Column Header and print *****************/
		
		strcpy(l_column_header,h_report_details_struct.column_hdr);
		if (CO_SplitStr(l_column_header,COMASEP,&l_col_no,&l_col_value) == APL_FAILURE)
		{
			 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
			 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_header);
			 //fflush(fl_userlog);
			 APL_GOBACK_FAIL
		}

		/***** Table Column Heading and its records  *********/
		
		fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" border='1'  cellSpacing=\'0\' cellPadding=\'1\' >\n");
		//fflush(fl_userlog);

		fprintf(l_report_LETR1,"<TR>\n");
		//fflush(fl_userlog);
		for(i=0;i<l_col_no;i++)
		{
			strcpy(l_column_value,l_col_value[i]);

			fprintf(l_report_LETR1,"<TD class=\'ez4\'>%s</TD>\n",l_column_value);
			//fflush(fl_userlog);
		}
		fprintf(l_report_LETR1,"</TR>\n");
		//fflush(fl_userlog);

		l_column_no=h_report_details_struct.no_of_columns;
		l_no_of_columns = h_report_details_struct.no_of_columns;
		
		l_col_hdr = h_report_details_struct.col_hdr_brk;
		
		}/*** End Of Column Header Else Part ******/

		EXEC SQL PREPARE LETR1_SUB FROM :table_query;	
		EXEC SQL DECLARE LETR1tablequery CURSOR FOR LETR1_SUB;
		EXEC SQL OPEN LETR1tablequery;

		l_fetch_count=0;

		for(;;)
		{
			EXEC SQL FETCH LETR1tablequery
				INTO :l_table_parameter;

			 if(sqlca.sqlcode == 1403)
			 {
			    fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
				//fflush(fl_userlog);
			    if(l_fetch_count == 0)
			    {
			       fprintf(l_report_LETR1,"<TR>\n");
				   //fflush(fl_userlog);
			       fprintf(l_report_LETR1,"<TD WIDTH=\'100%%\' COLSPAN=\'%d\' class=\'ez4\'>NO RECORDS FOUND </TD>\n",l_column_no);
				   //fflush(fl_userlog);
			       fprintf(l_report_LETR1,"</TR>\n");
				   //fflush(fl_userlog);
			    }
			    break;
			 }

	       		 if(sqlca.sqlcode < 0)
			 {
			    fprintf(fl_userlog,"Error :Critical Error Occured LETR1tablequery --- ORA ERROR:|%d|\n",sqlca.sqlcode);
				//fflush(fl_userlog);
			    break;
			 }

			strcpy(l_column_parameter,l_table_parameter);
			
			/**** Split the string and fetch the column date *********/
			
			if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
			 	fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
				//fflush(fl_userlog);
			 	APL_GOBACK_FAIL
			}

			/***** For Number Formatting ***************************************************/

			strcpy(l_format_col_pos,h_report_details_struct.format_col_pos);
			if (CO_SplitStr(l_format_col_pos,COMASEP,&l_format_col_no,&l_format_col_val) == APL_FAILURE)
			{
				 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_format_col_pos);
				 //fflush(fl_userlog);
				 APL_GOBACK_FAIL
			}

			fprintf(l_report_LETR1,"<TR>\n");
			//fflush(fl_userlog);

			for(j=0;j<l_column_num;j++)
			{
				strcpy(l_column,l_column_val[j]);
				
				l_format_col_flag = 0;
				if(l_format_col_no > 0)
				{
					for (k=0;k<l_format_col_no;k++)
					{
						strcpy(l_format_col_value,l_format_col_val[k]);

						if(j==(atoi(l_format_col_value)-1))
							l_format_col_flag = 1;
					}

					if((strlen(l_column) > 0) && (strcmp(l_column," ")))
					{
						if(l_format_col_flag == 1)
						{
							EXEC SQL CALL SP_NUMBER_FORMATTING(:l_column,:l_error_desc);

							if(strlen(l_error_desc) > 0)
							{
								fprintf(l_report_LETR1,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
								//fflush(fl_userlog);
								}
							else
							{
								fprintf(l_report_LETR1,"<TD class=\'record\' ALIGN=\"RIGHT\">%s</TD>\n",l_column);
								//fflush(fl_userlog);
								}
						}
						else
						{
							fprintf(l_report_LETR1,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
							//fflush(fl_userlog);
						}
					}
					else 
						 fprintf(l_report_LETR1,"<TD class=\'record\'  >&nbsp</TD>\n");
						 

				}
				else
				{
					if((strlen(l_column) > 0) && (strcmp(l_column," ")))
					{
						fprintf(l_report_LETR1,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
						//fflush(fl_userlog);
					}
					else
					{
						fprintf(l_report_LETR1,"<TD class=\'record\'  >&nbsp</TD>\n");
						//fflush(fl_userlog);
					}
				}

			}
			fprintf(l_report_LETR1,"</TR>\n");
			//fflush(fl_userlog);

			/***********************************************************************************/

			l_fetch_count ++;

		}
		EXEC SQL CLOSE LETR1tablequery;


		/********* For Criteria column value display ************/
		
		if(h_report_details_struct.tot_criteria_cols > 0)
		{
			if(strlen(h_report_details_struct.criteria_col1_query) > 0)
			{
				EXEC SQL PREPARE LETR1_CR1 FROM :l_criteria_query1;
				EXEC SQL DECLARE LETR1criteria1 CURSOR FOR LETR1_CR1;
				EXEC SQL OPEN LETR1criteria1;
				
	                        if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Failed to Open LETR1criteria1 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
					//fflush(fl_userlog);
				}

				for(;;)
				{
				EXEC SQL FETCH LETR1criteria1 INTO :l_criteria_value1;
			
				       if(sqlca.sqlcode == 1403)
				       break;

	                               if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				       {
							fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
							//fflush(fl_userlog);
					  		break;
				       }
				}
				EXEC SQL CLOSE LETR1criteria1;
				
				/****** For Grand Total Of Criteria Value *********/
						
				if(strcmp(l_criteria_value1,APL_NULL_STRING))
				{
					EXEC SQL SELECT (:l_criteria_value1) INTO :l_criteria1_total FROM DUAL;
					
					l_grand_total1=l_grand_total1+l_criteria1_total;
					
					fprintf(fl_userlog,"l_grand_total1 :|%lf|\n",l_grand_total1);
                     //fflush(fl_userlog);
					fprintf(l_report_LETR1,"<TR>\n");
					//fflush(fl_userlog);
					fprintf(l_report_LETR1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col1_name,l_criteria_value1);
					//fflush(fl_userlog);
					fprintf(l_report_LETR1,"</TR>\n");
					//fflush(fl_userlog);
				}
			}

			if(strlen(h_report_details_struct.criteria_col2_query) > 0)
			{
				EXEC SQL PREPARE LETR1_CR2 FROM :l_criteria_query2;
				EXEC SQL DECLARE LETR1criteria2 CURSOR FOR LETR1_CR2;
				EXEC SQL OPEN LETR1criteria2;
				
	         		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Failed to Open LETR1criteria2 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
					//fflush(fl_userlog);
				}

				for(;;)
				{
				       EXEC SQL FETCH LETR1criteria2 INTO :l_criteria_value2;
			
				       if(sqlca.sqlcode == 1403)
				       break;

	                	       if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				       {
							fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
							//fflush(fl_userlog);
					  		break;
				       }
				}
				EXEC SQL CLOSE LETR1criteria2;
		
				if(strcmp(l_criteria_value2,APL_NULL_STRING))
				{
					EXEC SQL SELECT (:l_criteria_value2) INTO :l_criteria2_total FROM DUAL;
					
					l_grand_total2=l_grand_total2+l_criteria2_total;
					
					fprintf(fl_userlog,"l_grand_total2 :|%lf|\n",l_grand_total2);
					//fflush(fl_userlog);

					fprintf(l_report_LETR1,"<TR>\n");
					//fflush(fl_userlog);
					fprintf(l_report_LETR1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col2_name,l_criteria_value2);
                      //fflush(fl_userlog);
					fprintf(l_report_LETR1,"</TR>\n");
					//fflush(fl_userlog);
				}
			}

			if(strlen(h_report_details_struct.criteria_col3_query) > 0)
			{
				EXEC SQL PREPARE LETR1_CR3 FROM :l_criteria_query3;
				EXEC SQL DECLARE LETR1criteria3 CURSOR FOR LETR1_CR3;
				EXEC SQL OPEN LETR1criteria3;
				
	         		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Failed to Open LETR1criteria3 CURSOR -- ORA ERROR :|%d|\n",sqlca.sqlcode);
					//fflush(fl_userlog);
				}

				for(;;)
				{
				       EXEC SQL FETCH LETR1criteria3 INTO :l_criteria_value3;
				
				       if(sqlca.sqlcode == 1403)
				       break;

	                	       if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				       {
							fprintf(fl_userlog,"Error : Critical Error Occured --- ORA ERROR:|%d|\n",sqlca.sqlcode);
							//fflush(fl_userlog);
					  		break;
				       }
				}
				EXEC SQL CLOSE LETR1criteria3;
					
					
				if(strcmp(l_criteria_value3,APL_NULL_STRING))
				{
					EXEC SQL SELECT (:l_criteria_value3) INTO :l_criteria3_total FROM DUAL;
					
					l_grand_total3=l_grand_total3+l_criteria3_total;
					
					fprintf(fl_userlog,"l_grand_total3 :|%lf|\n",l_grand_total3);
                     //fflush(fl_userlog);
					fprintf(l_report_LETR1,"<TR>\n");
                     //fflush(fl_userlog);
					fprintf(l_report_LETR1,"<TD ALIGN=\"RIGHT\" COLSPAN=\'%d\' class='ez4'>%s = %s</TD>\n",l_column_no,h_report_details_struct.criteria_col3_name,l_criteria_value3);
                    //fflush(fl_userlog);
					fprintf(l_report_LETR1,"</TR>\n");
					//fflush(fl_userlog);
				}
			}
		}

		/******* Complex Criteria Part ***************************************/

		strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
		strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
		strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
		strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

		if(strlen(complex_criteria_query) > 0)
		{
		
		EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
				:complex_criteria_query,
				'@PARAM1',:l_param1),
				'@PARAM2',:l_param2),
				'@PARAM3',:l_param3),
				'@PARAM4',:l_param4),
				'@PARAM5',:l_param5),
				'@PARAM6',:l_param6),
				REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
				:complex_criteria_query1,
				'@PARAM1',:l_param1),
				'@PARAM2',:l_param2),
				'@PARAM3',:l_param3),
				'@PARAM4',:l_param4),
				'@PARAM5',:l_param5),
				'@PARAM6',:l_param6)
			INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;
		
		strcat(complex_criteria_query,complex_criteria_query1);
		
		fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);
		//fflush(fl_userlog);

		EXEC SQL PREPARE LETR12_CMPX_CURR FROM :complex_criteria_query;

		EXEC SQL DECLARE LETR12_complex_curr CURSOR FOR LETR12_CMPX_CURR;

		fprintf(fl_userlog,"After DECLARE LETR12_complex_curr :|%d|\n",sqlca.sqlcode);
		//fflush(fl_userlog);

		EXEC SQL OPEN LETR12_complex_curr;

		EXEC SQL FETCH LETR12_complex_curr INTO :l_complex_parameter;

		fprintf(fl_userlog,"After FETCH LETR12_complex_curr :|%d|\n",sqlca.sqlcode);
		//fflush(fl_userlog);

		EXEC SQL CLOSE LETR12_complex_curr;

		fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);
		//fflush(fl_userlog);

		if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
		{
			CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
			fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
			APL_GOBACK_FAIL
		}
		
		fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);
		//fflush(fl_userlog);

		if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
		{
			CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
			fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
			//fflush(fl_userlog);
			APL_GOBACK_FAIL
		}


		fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);
		//fflush(fl_userlog);

		l_complex_break_flag = 0;
		
		if(l_complex_num == l_complex_pos_num)
		{

		fprintf(l_report_LETR1,"<TR>\n");
		//fflush(fl_userlog);

		for(i=0;i<l_column_num;i++)
		{
			for(j=0;j<l_complex_pos_num;j++)
			{

			strcpy(l_complex_pos_column,l_complex_pos_val[j]);

			if((i==0)&&(j==0))
			{
				if(strlen(complex_criteria_label) > 0)
				{
					fprintf(l_report_LETR1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" >%s</TD>\n",complex_criteria_label);
					//fflush(fl_userlog);
					l_complex_break_flag=1;
				}
				else
				fprintf(l_report_LETR1,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
				
			}

			if(i== (atoi(l_complex_pos_column)-1))
			{				  
			  strcpy(l_complex_column,l_complex_val[j]);

			  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);
			  //fflush(fl_userlog);

			  l_complex_break_flag=1;
						
			  if(strlen(l_complex_column) > 0)
			  {
				  EXEC SQL CALL SP_NUMBER_FORMATTING(:l_complex_column,:l_error_desc);

				  if(strlen(l_error_desc) > 0)
				  {
					fprintf(l_report_LETR1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">%s</TD>\n",l_complex_column);
					//fflush(fl_userlog);
					}
				  else
				  {
					fprintf(l_report_LETR1,"<TD class=\'lableredbg\' ALIGN=\"RIGHT\">%s</TD>\n",l_complex_column);
					//fflush(fl_userlog);
					}
			  }
			  else
			  {
					fprintf(l_report_LETR1,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">&nbsp;</TD>\n");
					//fflush(fl_userlog);
			  }
			
			  break;
			}
			else
			{
			     l_complex_break_flag = 0;
			     continue;
			} 

			}
			     
			if(i != 0)
			{
			  if(l_complex_break_flag != 1)
			     fprintf(l_report_LETR1,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
				 //fflush(fl_userlog);
			}
		}

		}
		else
		{
			fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
			//fflush(fl_userlog);
		}

		fprintf(l_report_LETR1,"</TR>\n");
		//fflush(fl_userlog);

		}
		
		/*****************	End Of Complex Part     *********************/

		fprintf(l_report_LETR1,"</TABLE>\n");
		//fflush(fl_userlog);
  
		/****** After table ****************************************/
		
		l_after_table = h_report_details_struct.after_table_brk;
		while(l_after_table > 0)
		{
			fprintf(l_report_LETR1,"</BR>\n");
			//fflush(fl_userlog);
			l_after_table --;
		}

		if(strlen(h_report_details_struct.after_table_align) > 0)
		{
			if(strlen(h_report_details_struct.after_table) > 0)
			{	
				fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.after_table_align,h_report_details_struct.after_table);
			//fflush(fl_userlog);
			}
		}
		else
		{
			if(strlen(h_report_details_struct.after_table) > 0)
			{	
				fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.after_table);
			//fflush(fl_userlog);
			}

		}	
  
		/********** Table Footer note ******************************/
	
		l_table_footer = h_report_details_struct.table_footer_brk;
		if(l_table_footer > 0)
		{
			fprintf(l_report_LETR1,"</BR>\n");
			//fflush(fl_userlog);
			l_table_footer --;
		}
		
		if(strlen(h_report_details_struct.table_footer_align) > 0)
		{
			if(strlen(h_report_details_struct.table_footer) > 0)
			{
				fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",h_report_details_struct.table_footer_align,h_report_details_struct.table_footer);
			//fflush(fl_userlog);
			}
		}
		else
		{
			if(strlen(h_report_details_struct.table_footer) > 0)
			{
				fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",h_report_details_struct.table_footer);
			//fflush(fl_userlog);
			}

		}

		l_table = h_report_main_struct.table_brk;
		if(l_table > 0)
		{
			fprintf(l_report_LETR1,"</BR>\n");
			//fflush(fl_userlog);
			l_table --;
		}


		if( l_fetch_count > 0 )
		{
			for(m=0;m<l_complex_num;m++)
			{
				if(m == 0)
				{
					strcpy(l_complex_parameter1,l_complex_val[m]);
					g_complex_parameter1=atof(l_complex_parameter1);
				}
				else if(m == 1)
				{
					strcpy(l_complex_parameter2,l_complex_val[m]);
					g_complex_parameter2=atof(l_complex_parameter2);
				}
				else if(m == 2)
				{
					strcpy(l_complex_parameter3,l_complex_val[m]);
					g_complex_parameter3=atof(l_complex_parameter3);
				}
				else if(m == 3)
				{
					strcpy(l_complex_parameter4,l_complex_val[m]);
					g_complex_parameter4=atof(l_complex_parameter4);
				}
				else if(m == 4)
				{
					strcpy(l_complex_parameter5,l_complex_val[m]);
					g_complex_parameter5=atof(l_complex_parameter5);
				}
				else if(m == 5)
				{
					strcpy(l_complex_parameter6,l_complex_val[m]);
					g_complex_parameter6=atof(l_complex_parameter6);
				}
				else if(m == 6)
				{
					strcpy(l_complex_parameter7,l_complex_val[m]);
					g_complex_parameter7=atof(l_complex_parameter7);
				}
				else if(m == 7)
				{
					strcpy(l_complex_parameter8,l_complex_val[m]);
					g_complex_parameter8=atof(l_complex_parameter8);
				}
				else if(m == 8)
				{
					strcpy(l_complex_parameter9,l_complex_val[m]);
					g_complex_parameter9=atof(l_complex_parameter9);
				}
				else if(m == 9)
				{
					strcpy(l_complex_parameter10,l_complex_val[m]);
					g_complex_parameter10=atof(l_complex_parameter10);
				}
				else if(m == 10)
				{
					strcpy(l_complex_parameter11,l_complex_val[m]);
					g_complex_parameter11=atof(l_complex_parameter11);
				}
				else if(m == 11)
				{
					strcpy(l_complex_parameter12,l_complex_val[m]);			
					g_complex_parameter12=atof(l_complex_parameter12);
				}
				else if(m == 12)
				{
					strcpy(l_complex_parameter13,l_complex_val[m]);
					g_complex_parameter13=atof(l_complex_parameter13);
				}
				else if(m == 13)
				{
					strcpy(l_complex_parameter14,l_complex_val[m]);
					g_complex_parameter14=atof(l_complex_parameter14);
				}
				else if(m == 14)
				{
					strcpy(l_complex_parameter15,l_complex_val[m]);
					g_complex_parameter15=atof(l_complex_parameter15);
				}
				else if(m == 15)
				{
					strcpy(l_complex_parameter16,l_complex_val[m]);
					g_complex_parameter16=atof(l_complex_parameter16);
				}
				else if(m == 16)
				{
					strcpy(l_complex_parameter17,l_complex_val[m]);
					g_complex_parameter17=atof(l_complex_parameter17);
				}
				else if(m == 17)
				{
					strcpy(l_complex_parameter18,l_complex_val[m]);
					g_complex_parameter18=atof(l_complex_parameter18);
				}
				else if(m == 18)
				{
					strcpy(l_complex_parameter19,l_complex_val[m]);
					g_complex_parameter19=atof(l_complex_parameter19);
				}
				else if(m == 19)
				{
					strcpy(l_complex_parameter20,l_complex_val[m]);
					g_complex_parameter20=atof(l_complex_parameter20);
				}

			}/*** End of Complex For Loop ***/

		}/*** End Of Fetch Count Check ****/

		}/******* End Of Grouping Else Block **********/

		/*************** Complex Criteria Individual  *********************/
		
		if(l_fetch_count > 0 )
		{
			fprintf(fl_userlog,"g_complex_parameter1 :|%lf|\tg_complex_parameter2 :|%lf|\n",g_complex_parameter1,g_complex_parameter2);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter3 :|%lf|\tg_complex_parameter4 :|%lf|\n",g_complex_parameter3,g_complex_parameter4);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter5 :|%lf|\tg_complex_parameter6 :|%lf|\n",g_complex_parameter5,g_complex_parameter6);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter7 :|%lf|\tg_complex_parameter8 :|%lf|\n",g_complex_parameter7,g_complex_parameter8);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter9 :|%lf|\tg_complex_parameter10 :|%lf|\n",g_complex_parameter9,g_complex_parameter10);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter11 :|%lf|\tg_complex_parameter12 :|%lf|\n",g_complex_parameter11,g_complex_parameter12);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter13 :|%lf|\tg_complex_parameter14 :|%lf|\n",g_complex_parameter13,g_complex_parameter14);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter15 :|%lf|\tg_complex_parameter16 :|%lf|\n",g_complex_parameter15,g_complex_parameter16);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter17 :|%lf|\tg_complex_parameter18 :|%lf|\n",g_complex_parameter17,g_complex_parameter18);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter19 :|%lf|\tg_complex_parameter20 :|%lf|\n",g_complex_parameter19,g_complex_parameter20);
			//fflush(fl_userlog);
		}


		/*******************************************************************/


		/********* Dynamic Footer Display ****************************************/

		strcpy(footer_query,h_report_details_struct.footer_query);
		
		if(strlen(footer_query) > 0)
		{

		/**** Stored Procedure : SP_REPORT_FOOTER ***********************************/

		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
		//fflush(fl_userlog);
		printf("Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
		//fflush(fl_userlog);
		
		EXEC SQL CALL SP_REPORT_FOOTER(:l_rept_id,:l_table_id,:l_param1,:l_param2,
					:l_param3,:l_param4, :l_param5,
					:l_param6,:l_footer_query,:l_footer_query1,:l_error_desc); 

		strcat(l_footer_query,l_footer_query1);

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER ERR DESC :|%s|\n",l_error_desc);
			//fflush(fl_userlog);
		}

		fprintf(fl_userlog,"LETR1_FOOTER QUERY :|%s|\n",l_footer_query);
		//fflush(fl_userlog);

		strcpy(l_footer_query_value,APL_NULL_STRING);

		EXEC SQL PREPARE LETR1_FOOTER_CURR FROM :l_footer_query;

		EXEC SQL DECLARE LETR1_footer_curr CURSOR FOR LETR1_FOOTER_CURR;
		
		fprintf(fl_userlog,"After DECLARE LETR1_footer_curr :|%d|\n",sqlca.sqlcode);
		//fflush(fl_userlog);

		EXEC SQL OPEN LETR1_footer_curr;

		EXEC SQL FETCH LETR1_footer_curr INTO :l_footer_query_value;
		fprintf(fl_userlog,"After FETCH LETR1_footer_curr :|%d|\n",sqlca.sqlcode);
		//fflush(fl_userlog);

		EXEC SQL CLOSE LETR1_footer_curr;

		fprintf(fl_userlog,"l_footer_query_value :|%s|\n",l_footer_query_value);
		//fflush(fl_userlog);

		l_footer_num = 0;

		strcpy(l_footer1,APL_NULL_STRING);
		strcpy(l_footer2,APL_NULL_STRING);
		strcpy(l_footer3,APL_NULL_STRING);
		strcpy(l_footer4,APL_NULL_STRING);
		strcpy(l_footer5,APL_NULL_STRING);
		strcpy(l_footer6,APL_NULL_STRING);
		strcpy(l_footer7,APL_NULL_STRING);
		strcpy(l_footer8,APL_NULL_STRING);
		strcpy(l_footer9,APL_NULL_STRING);
		strcpy(l_footer10,APL_NULL_STRING);
		strcpy(l_footer11,APL_NULL_STRING);
		strcpy(l_footer12,APL_NULL_STRING);
		strcpy(l_footer13,APL_NULL_STRING);
		strcpy(l_footer14,APL_NULL_STRING);
		strcpy(l_footer15,APL_NULL_STRING);

		if(strlen(l_footer_query_value) > 0)
		{		
			if (CO_SplitStr(l_footer_query_value,CAPSEP,&l_footer_num,&l_footer_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_footer_query_value);
				//fflush(fl_userlog);
				APL_GOBACK_FAIL
			}

			fprintf(fl_userlog,"l_footer_num :|%d|\n",l_footer_num);
			//fflush(fl_userlog);
			if(l_footer_num > 0)
			{
				for(i=0;i<l_footer_num;i++)
				{
					if(i == 0)
					strcpy(l_footer1,l_footer_val[i]);
					else if(i == 1)
					strcpy(l_footer2,l_footer_val[i]);
					else if(i == 2)
					strcpy(l_footer3,l_footer_val[i]);
					else if(i == 3)
					strcpy(l_footer4,l_footer_val[i]);
					else if(i == 4)
					strcpy(l_footer5,l_footer_val[i]);
					else if(i == 5)
					strcpy(l_footer6,l_footer_val[i]);
					else if(i == 6)
					strcpy(l_footer7,l_footer_val[i]);
					else if(i == 7)
					strcpy(l_footer8,l_footer_val[i]);
					else if(i == 8)
					strcpy(l_footer9,l_footer_val[i]);
					else if(i == 9)
					strcpy(l_footer10,l_footer_val[i]);
					else if(i == 10)
					strcpy(l_footer11,l_footer_val[i]);
					else if(i == 11)
					strcpy(l_footer12,l_footer_val[i]);
					else if(i == 12)
					strcpy(l_footer13,l_footer_val[i]);
					else if(i == 13)
					strcpy(l_footer14,l_footer_val[i]);
					else if(i == 14)
					strcpy(l_footer15,l_footer_val[i]);
				}
			}

		}/**************** End Of Footer Value Check *********************************/

		/****** Stored Procedure : SP_REPORT_FOOTER_DATA ***********************************/

		fprintf(fl_userlog,"l_footer1 :|%s|\t l_footer2 :|%s|\n",l_footer1,l_footer2);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer3 :|%s|\t l_footer4 :|%s|\n",l_footer3,l_footer4);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer5 :|%s|\t l_footer6 :|%s|\n",l_footer5,l_footer6);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer7 :|%s|\t l_footer8 :|%s|\n",l_footer7,l_footer8);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer9 :|%s|\t l_footer10 :|%s|\n",l_footer9,l_footer10);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer11 :|%s|\t l_footer12 :|%s|\n",l_footer11,l_footer12);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer13 :|%s|\t l_footer14 :|%s|\n",l_footer13,l_footer14);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer15 :|%s|\n",l_footer15);
		//fflush(fl_userlog);

		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);	
		//fflush(fl_userlog);
		printf("Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);
        //fflush(fl_userlog);		
		//fflush(fl_userlog);
		EXEC SQL CALL SP_REPORT_FOOTER_DATA(:l_rept_id,:l_table_id,
							:l_footer1,:l_footer2,
							:l_footer3,:l_footer4,
							:l_footer5,:l_footer6,
							:l_footer7,:l_footer8,
							:l_footer9,:l_footer10,
							:l_footer11,:l_footer12,
							:l_footer13,:l_footer14,
							:l_footer15,
							:g_complex_parameter1,:g_complex_parameter2,
							:g_complex_parameter3,:g_complex_parameter4,
							:g_complex_parameter5,:g_complex_parameter6,
							:g_complex_parameter7,:g_complex_parameter8,
							:g_complex_parameter9,:g_complex_parameter10,
							:g_complex_parameter11,:g_complex_parameter12,
							:g_complex_parameter13,:g_complex_parameter14,
							:g_complex_parameter15,:g_complex_parameter16,
							:g_complex_parameter17,:g_complex_parameter18,
							:g_complex_parameter19,:g_complex_parameter20,
							:l_footer_data,:l_error_desc); 

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER_DATA ERR DESC :|%s|\n",l_error_desc);
			//fflush(fl_userlog);
		}

		fprintf(fl_userlog,"FOOTER DATA :|%s|\n",l_footer_data);
		//fflush(fl_userlog);

		/************ Dynamic Formating Procedure ***************************************/
		
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);	
		//fflush(fl_userlog);
		printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
		
		EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_footer_data,:l_error_desc); 

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
			//fflush(fl_userlog);
		}

		fprintf(fl_userlog,"FOOTER DATA After Formatting -- :|%s|\n",l_footer_data);
		//fflush(fl_userlog);


		/*******************************************************************************/

		/************ Dynamic Footer Data Display **********************************************/
		
		fprintf(fl_userlog,"strlen(l_footer_data) :|%d|\n",strlen(l_footer_data));
		//fflush(fl_userlog);

		if(strlen(l_footer_data) > 0)
		{
			fprintf(fl_userlog,"Displaying Footer Data --- \n");
			//fflush(fl_userlog);

			fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\"><TR>\n");
			//fflush(fl_userlog);
			fprintf(l_report_LETR1,"<TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'headerdata\'>%s</TD>\n",h_report_details_struct.footer_data_align,l_footer_data);
			//fflush(fl_userlog);
			fprintf(l_report_LETR1,"</TR></TABLE>\n");
			//fflush(fl_userlog);
		}

		l_footer_data_brk = h_report_details_struct.footer_data_brk;
		while(l_footer_data_brk > 0)
		{
			fprintf(l_report_LETR1,"</BR>\n");
			l_footer_data_brk --;
			g_line_count++;
		}		
		}

		/***************** End Of Dynamic Footer Display  ***************************/

		/***************** Final Complex Criteria Calculation **********************/

		fprintf(fl_userlog,"\n--- l_table_id --- 12:|%d|\n",l_table_id);
		//fflush(fl_userlog);

		if(l_table_id == 1)
		{
			f_complex_parameter1=f_complex_parameter1+g_complex_parameter1;
			f_complex_parameter2=f_complex_parameter2+g_complex_parameter2;
			f_complex_parameter3=f_complex_parameter3+g_complex_parameter3;
			f_complex_parameter4=f_complex_parameter4+g_complex_parameter4;
			f_complex_parameter5=f_complex_parameter5+g_complex_parameter5;
			f_complex_parameter6=f_complex_parameter6+g_complex_parameter6;
			f_complex_parameter7=f_complex_parameter7+g_complex_parameter7;
			f_complex_parameter8=f_complex_parameter8+g_complex_parameter8;
			f_complex_parameter9=f_complex_parameter9+g_complex_parameter9;
			f_complex_parameter10=f_complex_parameter10+g_complex_parameter10;
			f_complex_parameter11=f_complex_parameter11+g_complex_parameter11;
			f_complex_parameter12=f_complex_parameter12+g_complex_parameter12;
			f_complex_parameter13=f_complex_parameter13+g_complex_parameter13;
			f_complex_parameter14=f_complex_parameter14+g_complex_parameter14;
			f_complex_parameter15=f_complex_parameter15+g_complex_parameter15;
			f_complex_parameter16=f_complex_parameter16+g_complex_parameter16;
			f_complex_parameter17=f_complex_parameter17+g_complex_parameter17;
			f_complex_parameter18=f_complex_parameter18+g_complex_parameter18;
			f_complex_parameter19=f_complex_parameter19+g_complex_parameter19;
			f_complex_parameter20=f_complex_parameter20+g_complex_parameter20;
		}

		/******************************************************************************/

		l_table_id ++;
	}

	/********** For Displaying Grand Criteria Total ****************************************/

	fprintf(fl_userlog,"GRAND TOTAL FLAG is 8:|%s|\n",h_report_details_struct.grand_total_flag);
	//fflush(fl_userlog);
	printf("GRAND TOTAL FLAG is 9:|%s|\n",h_report_details_struct.grand_total_flag);
	//fflush(fl_userlog);
	//fflush(fl_userlog);
	EXEC SQL SELECT ROUND(:l_grand_total1,2),ROUND(:l_grand_total2,2),ROUND(:l_grand_total3,2)
			   INTO :l_grand_round1,:l_grand_round2,:l_grand_round3
				FROM DUAL;

	fprintf(fl_userlog,"After Grand Total Round -- ORA ERROR 8:|%d|\n",sqlca.sqlcode);
	//fflush(fl_userlog);
	printf("After Grand Total Round -- ORA ERROR 8:|%d|\n",sqlca.sqlcode);
	//fflush(fl_userlog);

	fprintf(fl_userlog,"l_grand_round1:|%s|\n",l_grand_round1);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"l_grand_round2:|%s|\n",l_grand_round2);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"l_grand_round3:|%s|\n",l_grand_round3);
    //fflush(fl_userlog);
	printf("l_grand_round1:|%s|\n",l_grand_round1);
	//fflush(fl_userlog);
	printf("l_grand_round2:|%s|\n",l_grand_round2);
	//fflush(fl_userlog);
	printf("l_grand_round3:|%s|\n",l_grand_round3);	
    //fflush(fl_userlog);
	/********* Grand display Check ************************************************/

	fprintf(fl_userlog,"g_setting_flag:|%s|\n",g_setting_flag);
	//fflush(fl_userlog);
	printf("g_setting_flag:|%s|\n",g_setting_flag);
    //fflush(fl_userlog);
	if(!strcmp(g_setting_flag,"U"))
		strcpy(l_grand_display,"GRAND");
	else if(!strcmp(g_setting_flag,"L"))
		strcpy(l_grand_display,"grand");
	else 
		strcpy(l_grand_display,"Grand");

	/********************************************************************************/
	
	if(strlen(h_report_details_struct.grand_total_flag) > 0)
	{

		EXEC SQL CALL SP_NUMBER_FORMATTING(:l_grand_round1,:l_error_desc);

		fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
		//fflush(fl_userlog);
		
		fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" class=\'ez4\'>\n");
		//fflush(fl_userlog);
		if(l_grand_total1 > 0)
		fprintf(l_report_LETR1,"<TR><TD WIDTH=\"100%%\" ALIGN=\"RIGHT\" class=\'ez4\'>%s %s = %s</TD></TR>\n",l_grand_display,h_report_details_struct.criteria_col1_name,l_grand_round1);
        //fflush(fl_userlog);
		EXEC SQL CALL SP_NUMBER_FORMATTING(:l_grand_round2,:l_error_desc);

		fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
		//fflush(fl_userlog);
		if(l_grand_total2 > 0)
		fprintf(l_report_LETR1,"<TR><TD WIDTH=\"100%%\" ALIGN=\"RIGHT\" class=\'ez4\'>%s %s = %s</TD></TR>\n",l_grand_display,h_report_details_struct.criteria_col2_name,l_grand_round2);
         //fflush(fl_userlog);
		EXEC SQL CALL SP_NUMBER_FORMATTING(:l_grand_round3,:l_error_desc);

		fprintf(fl_userlog,"After SP_NUMBER_FORMATTING Ora Error -- :|%d|\n",sqlca.sqlcode);
		//fflush(fl_userlog);
		if(l_grand_total3 > 0)
		fprintf(l_report_LETR1,"<TR><TD WIDTH=\"100%%\" ALIGN=\"RIGHT\" class=\'ez4\'>%s %s = %s</TD></TR>\n",l_grand_display,h_report_details_struct.criteria_col3_name,l_grand_round3);
		//fflush(fl_userlog);
		fprintf(l_report_LETR1,"</TABLE>\n");
		//fflush(fl_userlog);
		fprintf(l_report_LETR1,"</BR>\n");
		//fflush(fl_userlog);

	}

	/************* Grand Complex Criteria Display ******************************************/
		
	fprintf(fl_userlog,"f_complex_parameter1 :|%lf|\tf_complex_parameter2 :|%lf|\n",f_complex_parameter1,f_complex_parameter2);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"f_complex_parameter3 :|%lf|\tf_complex_parameter4 :|%lf|\n",f_complex_parameter3,f_complex_parameter4);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"f_complex_parameter5 :|%lf|\tf_complex_parameter6 :|%lf|\n",f_complex_parameter5,f_complex_parameter6);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"f_complex_parameter7 :|%lf|\tf_complex_parameter8 :|%lf|\n",f_complex_parameter7,f_complex_parameter8);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"f_complex_parameter9 :|%lf|\tf_complex_parameter10 :|%lf|\n",f_complex_parameter9,f_complex_parameter10);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"f_complex_parameter11 :|%lf|\tf_complex_parameter12 :|%lf|\n",f_complex_parameter11,f_complex_parameter12);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"f_complex_parameter13 :|%lf|\tf_complex_parameter14 :|%lf|\n",f_complex_parameter13,f_complex_parameter14);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"f_complex_parameter15 :|%lf|\tf_complex_parameter16 :|%lf|\n",f_complex_parameter15,f_complex_parameter16);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"f_complex_parameter17 :|%lf|\tf_complex_parameter18 :|%lf|\n",f_complex_parameter17,f_complex_parameter18);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"f_complex_parameter19 :|%lf|\tf_complex_parameter20 :|%lf|\n",f_complex_parameter19,f_complex_parameter20);
	//fflush(fl_userlog);

	strcpy(complex_criteria,h_report_details_struct.complex_criteria);

	fprintf(fl_userlog,"strlen(complex_criteria) :|%d|\n",strlen(complex_criteria));
	//fflush(fl_userlog);

	if(strlen(complex_criteria) > 0 )
	{
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_CRITERIA :|%s|\n",l_rept_id);
        //fflush(fl_userlog);		
		printf("Calling Stored Procedure SP_REPORT_CRITERIA :|%s|\n",l_rept_id);	
		//fflush(fl_userlog);
		EXEC SQL CALL SP_REPORT_CRITERIA(:complex_criteria,
						 :f_complex_parameter1,:f_complex_parameter2,
						 :f_complex_parameter3,:f_complex_parameter4,
						 :f_complex_parameter5,:f_complex_parameter6,
						 :f_complex_parameter7,:f_complex_parameter8,
						 :f_complex_parameter9,:f_complex_parameter10,
						 :f_complex_parameter11,:f_complex_parameter12,
						 :f_complex_parameter13,:f_complex_parameter14,
						 :f_complex_parameter15,:f_complex_parameter16,
						 :f_complex_parameter17,:f_complex_parameter18,
						 :f_complex_parameter19,:f_complex_parameter20,
						 :l_complex_criteria_data,:l_error_desc); 

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_CRITERIA ERR DESC :|%s|\n",l_error_desc);
			//fflush(fl_userlog);
		}

		fprintf(fl_userlog,"COMPLEX CRITERIA DATA :|%s|\n",l_complex_criteria_data);
		//fflush(fl_userlog);

		/************ Dynamic Formating Procedure ************************/
		
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);
        //fflush(fl_userlog);		
		printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
		//fflush(fl_userlog);
		EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_complex_criteria_data,:l_error_desc); 

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
			//fflush(fl_userlog);
		}

		fprintf(fl_userlog,"COMPLEX CRITERIA DATA After Formatting -- :|%s|\n",l_complex_criteria_data);
		//fflush(fl_userlog);


		/***************************************************************/

		/************ COMPLEX CRITERIA DATA Display *******************/
		
		fprintf(fl_userlog,"strlen(l_complex_criteria_data) :|%d|\n",strlen(l_complex_criteria_data));
		//fflush(fl_userlog);

		if(strlen(l_complex_criteria_data) > 0)
		{
			fprintf(fl_userlog,"Displaying l_complex_criteria_data Data --- \n");
			//fflush(fl_userlog);

			fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\"><TR>\n");
			//fflush(fl_userlog);
			fprintf(l_report_LETR1,"<TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'headerdata\'>%s</TD>\n",l_complex_criteria_data);
			//fflush(fl_userlog);
			fprintf(l_report_LETR1,"</TR></TABLE>\n");
			//fflush(fl_userlog);
		}

	}


	/***********************************************************************/
	
	/******* Page Footer note ********************************************/
		
	if(strlen(h_report_main_struct.page_footer_align) > 0)
	{
		if(strlen(h_report_main_struct.page_footer) > 0)
		{
			fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" class=\'footer\'><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'footer\'>%s</TD><TR></TABLE>\n",h_report_main_struct.page_footer_align,h_report_main_struct.page_footer);
		//fflush(fl_userlog);
		}
	}
	else
	{
		if(strlen(h_report_main_struct.page_footer) > 0)
		{
			fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" class=\'footer\'><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'footer\'>%s</TD><TR></TABLE>\n",h_report_main_struct.page_footer);
		//fflush(fl_userlog);
		}

	}

	l_page_footer = h_report_main_struct.page_footer_brk;
	if(l_page_footer > 0)
	{
		fprintf(l_report_LETR1,"</BR>\n");
		//fflush(fl_userlog);
		l_page_footer --;
	}
	
	
	/******* Disclaimer **************************************************/
		
	if(strlen(h_report_main_struct.disclaimer) > 0)
	{
		fprintf(l_report_LETR1,"<TABLE WIDTH=\"100%%\" class=\'footer\'><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'footer\'>%s</TD><TR></TABLE>\n",h_report_main_struct.disclaimer);
      //fflush(fl_userlog);
	}

	/********************************************************************/

	
	fprintf(l_report_LETR1,"</BODY></HTML>\n");
	//fflush(fl_userlog);
	fprintf(l_report_LETR1,"</BR></BR></BR>\n");
	//fflush(fl_userlog);

	
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:
	{
		fclose(l_report_LETR1);
		fclose(l_init_file);
		CO_ProcMonitor(g_logfile,"Success from CO_CreateReport_LETR1",NULL,NULL);
		fprintf(fl_userlog,"Success From CO_CreateReport_LETR1 Function\n");
		//fflush(fl_userlog);
		return(APL_SUCCESS);
	}


	RETURN_FAILURE:
	{
		fclose(l_report_LETR1);
		fclose(l_init_file);
		CO_ProcMonitor(g_logfile,"Failed from CO_CreateReport_LETR1",l_debug_info_ptr,NULL);
		fprintf(fl_userlog,"Failure From CO_CreateReport_LETR1 Function\n ");
		//fflush(fl_userlog);
		return(APL_FAILURE);
	}
}


int CO_CreateReport_LETR2(char *p_rept_id,char *p_rep_type,char *p_rep_name,
		      	char *p_param_str,char *p_chr_ptr_param,char *p_start_date,
		        char *p_compress_flag,char *p_user,char *p_web_login_id,char *p_web_rpt_id,char *p_web_source_from,char *p_web_report_dt,char *p_web_proc_id,FILE *fl_userlog,
			DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	printf("Entered Inside CO_CreateReport_LETR2 Function \n");
    //fflush(fl_userlog);
	FILE	*l_init_file  		= (FILE *)NULL;
	FILE	*l_report_LETR2 	= (FILE *)NULL;
	char l_init_path[200]	= APL_NULL_STRING;
	char l_report_path[200] = APL_NULL_STRING;
	char l_report_name[200] = APL_NULL_STRING;
	char l_compress_flag[5]	= APL_NULL_STRING;
	char l_time_stamp[30]	= APL_NULL_STRING;
	
	char l_remove_file_path[200] = APL_NULL_STRING;
	int  l_remove_count = 0;
	int  l_remove_flag = 0;
	int  l_client_fetch_count = 0;
	int  no_of_table_count = 0;
	
	memset(l_remove_file_path,APL_NULL_CHAR,200);	
	

	memset(l_init_path,APL_NULL_CHAR,200);	
	memset(l_report_path,APL_NULL_CHAR,200);	
	memset(l_report_name,APL_NULL_CHAR,200);	

	REPORT_MAIN_STRUCT_H  h_report_main_struct;
	REPORT_MAIN_STRUCT_I  i_report_main_struct;
	
	REPORT_DETAILS_STRUCT_H h_report_details_struct;
	REPORT_DETAILS_STRUCT_I i_report_details_struct;
	
	INTL_REPT_STRUCT_H   l_intl_rept_struct_ha;
	memset(&l_intl_rept_struct_ha,APL_NULL_CHAR,sizeof(INTL_REPT_STRUCT_H));

	memset(&h_report_main_struct,APL_NULL_CHAR,sizeof(REPORT_MAIN_STRUCT_H));	
	memset(&i_report_main_struct,APL_NULL_CHAR,sizeof(REPORT_MAIN_STRUCT_I));

	memset(&h_report_details_struct,APL_NULL_CHAR,sizeof(REPORT_DETAILS_STRUCT_H));
	memset(&i_report_details_struct,APL_NULL_CHAR,sizeof(REPORT_DETAILS_STRUCT_I));
		
	char l_rept_id[11]		   	= APL_NULL_STRING;
	char l_rep_type[10]	   	= APL_NULL_STRING;
	char l_client[20]  			= APL_NULL_STRING;
	char l_sub_client[20]  		= APL_NULL_STRING;
	char l_rep_name[100]    	= APL_NULL_STRING;
	char l_param_str[4000]  	= APL_NULL_STRING;
	char l_chr_param[4000]  	= APL_NULL_STRING;
	char l_start_date[20]   	= APL_NULL_STRING;
	char l_user[20]  				= APL_NULL_STRING;
	char l_client_name[100] 	= APL_NULL_STRING;
	char l_gen_query[4001]  	= APL_NULL_STRING;

    //changes for report generation through api start
	char l_web_login_id[101]				= APL_NULL_STRING;
	char l_web_rpt_id[101]				= APL_NULL_STRING;
	char l_web_source_from[101]				= APL_NULL_STRING;
	char l_web_report_dt[101]				= APL_NULL_STRING;
	char l_web_proc_id[101]				= APL_NULL_STRING;
	//changes for report generation through api end

	char l_more_qry_flag[3]     = APL_NULL_STRING;
	char table_query[24001] 	= APL_NULL_STRING;
	char l_table_query[4001] 	= APL_NULL_STRING;
	char l_table_query1[4001] 	= APL_NULL_STRING;
	char l_table_query2[4001] 	= APL_NULL_STRING;
	char l_table_query3[4001] 	= APL_NULL_STRING;
	char l_table_query4[4001] 	= APL_NULL_STRING;
	char l_table_query5[4001] 	= APL_NULL_STRING;
	
	char l_criteria_query1[4001] = APL_NULL_STRING;
	char l_criteria_query2[4001] = APL_NULL_STRING;
	char l_criteria_query3[4001] = APL_NULL_STRING;
	char l_system_date[20]  	   = APL_NULL_STRING;
	char l_column_value[200]		= APL_NULL_STRING;
	char l_column_header[4001]		=APL_NULL_STRING;
	char l_table_parameter[6000]	=APL_NULL_STRING;
	char l_general_parameter[6000]=APL_NULL_STRING;
	char l_general_param[6000]		=APL_NULL_STRING;
	char l_param[2000]				=APL_NULL_STRING;
	char l_column_parameter[6000]	=APL_NULL_STRING;
	char l_column[2000]				=APL_NULL_STRING;
	char l_error_desc[2000]			=APL_NULL_STRING;
	char  l_param1[100]            = APL_NULL_STRING;
	char  l_param2[100]            = APL_NULL_STRING;
	char  l_param3[100]            = APL_NULL_STRING;
	char  l_param4[100]            = APL_NULL_STRING;
	char  l_param5[100]            = APL_NULL_STRING;
	char  l_param6[100]            = APL_NULL_STRING;
	char  l_master_query[4001]    = APL_NULL_STRING;

	char g_style[4000]	= APL_NULL_STRING;
	char g_style_lt[4000]	= APL_NULL_STRING;
	char g_setting_flag[2]	= APL_NULL_STRING;
	char g_table_border[2]= APL_NULL_STRING;

	char  l_group_query[4001]       = APL_NULL_STRING;
	char  l_group_desc[4001]        = APL_NULL_STRING;
	char  l_group_pos[11]			  = APL_NULL_STRING;
	char  l_group_parameter[2001]   = APL_NULL_STRING;
	
	char  **l_group_parameter_value		=	NULL;
	char  **l_group_pos_value 				=	NULL;

	int  l_group_pos_no			= 0;
	int  l_group_parameter_no	= 0;
	int  l_group_break_flag 	= 0;

	char  l_prev_param1[100]            = APL_NULL_STRING;
	char  l_prev_param2[100]            = APL_NULL_STRING;
	char  l_prev_param3[100]            = APL_NULL_STRING;
	char  l_prev_param4[100]            = APL_NULL_STRING;
	char  l_prev_param5[100]            = APL_NULL_STRING;
	char  l_prev_param6[100]            = APL_NULL_STRING;
	
	char l_grand_round1[200]	= APL_NULL_STRING;
	char l_grand_round2[200]	= APL_NULL_STRING;
	char l_grand_round3[200]	= APL_NULL_STRING;	
	
	char  **l_col_value						=	NULL;
	char  **l_field_val						=	NULL;
	char  **l_column_val						=	NULL;
	char  **l_param_val						=	NULL;
	
	int i=0,j=0,k=0;
	int l_col_no				= 0;
	int l_column_num			= 0;
	int l_param_num			= 0;
	int l_fetch_count 		= 0;
	int l_before_title_break= 0;
	int l_no_of_columns     = 0;
	int l_table_id		      = 0;
	int l_column_no         = 0;
	int l_page_header			= 0;
	int l_before_title      = 0;
	int l_before_title1		= 0;
	int l_before_title2		= 0;
	int l_before_title3     = 0;
	int l_report_title		= 0;
	int l_after_title			= 0;
	int l_table_hdr			= 0;
	int l_before_table		= 0;
	int l_after_table		   = 0;
	int l_col_hdr				= 0;
	int l_table					= 0;
	int l_table_footer		= 0;
	int l_page_footer			= 0;
	int l_int_no_field      = 0;
	int int_no					= 0;
	double l_grand_total1		= 0.0;
	double l_grand_total2		= 0.0;
	double l_grand_total3		= 0.0;

	char l_criteria_value1[200]   = APL_NULL_STRING;
	char l_criteria_value2[200]   = APL_NULL_STRING;
	char l_criteria_value3[200]   = APL_NULL_STRING;
	double l_criteria1_total = 0.0;
	double l_criteria2_total = 0.0;
	double l_criteria3_total = 0.0;

	/************ Paging Varibles Declaration **********************/

	int p_page_no = 0;
	int rec_no = 0;
	int p_total_page_no = 0;
	int l_page_break_chk = 0;
	int l_next_page_break = 0;
	int l_main_page_break = 0;
	int p_final_break = 0;
	int l_final_break = 0;
	int l_main_page_recs = 0;
	int l_next_page_recs = 0;
	int l_tolarence = 0;
	int l_landscape = 0;
	int l_portrait = 0;
	int g_line_count = 0;

	char l_paging_flag[2] = APL_NULL_STRING;
	char l_print_flag[2] = APL_NULL_STRING;

	char l_grand_display[20] = APL_NULL_STRING;

	/******* Complex Criteria Variables ***************************/

	char l_report_type[3] 			= APL_NULL_STRING;
	
	char  **l_complex_val			= NULL;
	int l_complex_num			= 0;
	char l_complex_column[2000]		= APL_NULL_STRING;
	char l_complex_parameter[2000] 		= APL_NULL_STRING;
	
	char  **l_complex_pos_val		= NULL;
	int l_complex_pos_num			= 0;
	char l_complex_pos_column[2000]		= APL_NULL_STRING;
	char l_complex_pos_parameter[2000] 	= APL_NULL_STRING;
		
	int l_complex_break_flag 		= 0;
	
	char complex_criteria_query[8001] 	= APL_NULL_STRING;
	char complex_criteria_query1[4001] 	= APL_NULL_STRING;
	char complex_criteria_label[4001] 	= APL_NULL_STRING;
	char complex_criteria_pos[101] 		= APL_NULL_STRING;

	char l_header_query[8001] 		= APL_NULL_STRING;
	char l_header_query1[4001] 		= APL_NULL_STRING;
	char header_query[4001] 		= APL_NULL_STRING;	
	char l_header_query_value[4001] 	= APL_NULL_STRING;	
	int l_header_num 			= 0;
	char **l_header_val			= NULL;
	char l_header_data[6001]		= APL_NULL_STRING;
	int l_header_brk			= 0;

	char l_footer_query[8001] 		= APL_NULL_STRING;	
	char l_footer_query1[4001] 		= APL_NULL_STRING;
	char footer_query[4001] 		= APL_NULL_STRING;	
	char l_footer_query_value[4001] 	= APL_NULL_STRING;	
	int l_footer_num 			= 0;
	char **l_footer_val			= NULL;
	char l_footer_data[6001]		= APL_NULL_STRING;
	int l_footer_data_brk			= 0;

	char l_header1[200] 			= APL_NULL_STRING;
	char l_header2[200] 			= APL_NULL_STRING;
	char l_header3[200] 			= APL_NULL_STRING;
	char l_header4[200] 			= APL_NULL_STRING;
	char l_header5[200] 			= APL_NULL_STRING;
	char l_header6[200] 			= APL_NULL_STRING;
	char l_header7[200] 			= APL_NULL_STRING;
	char l_header8[200] 			= APL_NULL_STRING;
	char l_header9[200] 			= APL_NULL_STRING;
	char l_header10[200] 			= APL_NULL_STRING;
	char l_header11[200] 			= APL_NULL_STRING;
	char l_header12[200] 			= APL_NULL_STRING;
	char l_header13[200] 			= APL_NULL_STRING;
	char l_header14[200] 			= APL_NULL_STRING;
	char l_header15[200] 			= APL_NULL_STRING;	

	char l_footer1[200] 			= APL_NULL_STRING;
	char l_footer2[200] 			= APL_NULL_STRING;
	char l_footer3[200] 			= APL_NULL_STRING;
	char l_footer4[200] 			= APL_NULL_STRING;
	char l_footer5[200] 			= APL_NULL_STRING;
	char l_footer6[200] 			= APL_NULL_STRING;
	char l_footer7[200] 			= APL_NULL_STRING;
	char l_footer8[200] 			= APL_NULL_STRING;
	char l_footer9[200] 			= APL_NULL_STRING;
	char l_footer10[200] 			= APL_NULL_STRING;
	char l_footer11[200] 			= APL_NULL_STRING;
	char l_footer12[200] 			= APL_NULL_STRING;
	char l_footer13[200] 			= APL_NULL_STRING;
	char l_footer14[200] 			= APL_NULL_STRING;
	char l_footer15[200] 			= APL_NULL_STRING;

	int m					= 0;
	
	char l_complex_parameter1[500]		= APL_NULL_STRING;
	char l_complex_parameter2[500]		= APL_NULL_STRING;
	char l_complex_parameter3[500]		= APL_NULL_STRING;
	char l_complex_parameter4[500]		= APL_NULL_STRING;
	char l_complex_parameter5[500]		= APL_NULL_STRING;
	char l_complex_parameter6[500]		= APL_NULL_STRING;
	char l_complex_parameter7[500]		= APL_NULL_STRING;
	char l_complex_parameter8[500]		= APL_NULL_STRING;
	char l_complex_parameter9[500]		= APL_NULL_STRING;
	char l_complex_parameter10[500]		= APL_NULL_STRING;
	char l_complex_parameter11[500]		= APL_NULL_STRING;
	char l_complex_parameter12[500]		= APL_NULL_STRING;
	char l_complex_parameter13[500]		= APL_NULL_STRING;
	char l_complex_parameter14[500]		= APL_NULL_STRING;
	char l_complex_parameter15[500]		= APL_NULL_STRING;
	char l_complex_parameter16[500]		= APL_NULL_STRING;
	char l_complex_parameter17[500]		= APL_NULL_STRING;
	char l_complex_parameter18[500]		= APL_NULL_STRING;
	char l_complex_parameter19[500]		= APL_NULL_STRING;
	char l_complex_parameter20[500]		= APL_NULL_STRING;

	double g_complex_parameter1		= 0.0;
	double g_complex_parameter2 		= 0.0;
	double g_complex_parameter3 		= 0.0;
	double g_complex_parameter4 		= 0.0;
	double g_complex_parameter5 		= 0.0;
	double g_complex_parameter6 		= 0.0;
	double g_complex_parameter7 		= 0.0;
	double g_complex_parameter8 		= 0.0;
	double g_complex_parameter9 		= 0.0;
	double g_complex_parameter10 		= 0.0;
	double g_complex_parameter11 		= 0.0;
	double g_complex_parameter12 		= 0.0;
	double g_complex_parameter13 		= 0.0;
	double g_complex_parameter14 		= 0.0;
	double g_complex_parameter15 		= 0.0;
	double g_complex_parameter16 		= 0.0;
	double g_complex_parameter17 		= 0.0;
	double g_complex_parameter18 		= 0.0;
	double g_complex_parameter19 		= 0.0;
	double g_complex_parameter20		= 0.0;
	
	double f_complex_parameter1		= 0.0;
	double f_complex_parameter2 		= 0.0;
	double f_complex_parameter3 		= 0.0;
	double f_complex_parameter4 		= 0.0;
	double f_complex_parameter5 		= 0.0;
	double f_complex_parameter6 		= 0.0;
	double f_complex_parameter7 		= 0.0;
	double f_complex_parameter8 		= 0.0;
	double f_complex_parameter9 		= 0.0;
	double f_complex_parameter10 		= 0.0;
	double f_complex_parameter11 		= 0.0;
	double f_complex_parameter12 		= 0.0;
	double f_complex_parameter13 		= 0.0;
	double f_complex_parameter14 		= 0.0;
	double f_complex_parameter15 		= 0.0;
	double f_complex_parameter16 		= 0.0;
	double f_complex_parameter17 		= 0.0;
	double f_complex_parameter18 		= 0.0;
	double f_complex_parameter19 		= 0.0;
	double f_complex_parameter20		= 0.0;

	char complex_criteria[4001]		= APL_NULL_STRING;
	char l_complex_criteria_data[4001]      = APL_NULL_STRING;

	char l_multiple_col_flag[3]		= APL_NULL_STRING;
	char l_multiple_col_header[4001]	= APL_NULL_STRING;
	char l_multiple_colspan_sep[2001]	= APL_NULL_STRING;

	int l_multiple_col_header_no		= 0;
	int l_multiple_colspan_sep_no		= 0;

	char **l_multiple_col_header_value	= NULL;
	char **l_multiple_colspan_sep_value	= NULL;

	char l_level_header[2000]		= APL_NULL_STRING;
	char l_level_colspan[500]		= APL_NULL_STRING;
	char l_level_column[500]		= APL_NULL_STRING;
	char l_level_col_span[10]		= APL_NULL_STRING;

	int l_level_header_no			= 0;
	int l_level_colspan_no			= 0;
	int int_aa				= 0;
	int int_bb				= 0;
	int int_a				= 0;
	int int_b				= 0;

	char **l_level_header_value		= NULL;
	char **l_level_colspan_value		= NULL;

	char l_zip_image_path[200]		= APL_NULL_STRING;

	int l_format_col_flag		= 0;
	int l_format_col_no         = 0;
	char **l_format_col_val		= NULL;
	char l_format_col_value[10] = APL_NULL_STRING;
	char l_format_col_pos[500]	= APL_NULL_STRING;

	char l_record_count_query_final[8001]   = APL_NULL_STRING;
	char l_record_count_query[4001]   = APL_NULL_STRING;
	char l_record_count_query1[4001]   = APL_NULL_STRING;
	int l_record_count_flag = 0;
	int l_record_count = 0;
	int l_table_numbers = 0;
	int l_table_num = 0;

	
	char l_letter_grp_query[4001]		= APL_NULL_STRING;
	char l_letter_group_param[4001]		= APL_NULL_STRING;
	char l_letter_grp_flag[10]		= APL_NULL_STRING;

	char l_letter_header[4001] = APL_NULL_STRING;


	int l_report_final_flag = 0;

	strcpy(l_rept_id,p_rept_id);
	strcpy(l_rep_type,p_rep_type);
	strcpy(l_rep_name,p_rep_name);
	strcpy(l_param_str,p_param_str);
	strcpy(l_chr_param,p_chr_ptr_param);
	strcpy(l_client,l_param_str);
	strcpy(l_start_date,p_start_date);
	strcpy(l_compress_flag,p_compress_flag);
	strcpy(l_user,p_user);
	strcpy(l_web_login_id,p_web_login_id);
	strcpy(l_web_rpt_id,p_web_rpt_id);
	strcpy(l_web_source_from,p_web_source_from);
	strcpy(l_web_report_dt,p_web_report_dt);
	strcpy(l_web_proc_id,p_web_proc_id);

	EXEC SQL BEGIN DECLARE SECTION;
		
	EXEC SQL VAR l_rept_id IS STRING;
	EXEC SQL VAR l_gen_query IS STRING;
	
	EXEC SQL VAR table_query IS STRING;
	EXEC SQL VAR l_table_query IS STRING;
	EXEC SQL VAR l_table_query1 IS STRING;
	EXEC SQL VAR l_table_query2 IS STRING;
	EXEC SQL VAR l_table_query3 IS STRING;
	EXEC SQL VAR l_table_query4 IS STRING;
	EXEC SQL VAR l_table_query5 IS STRING;
	
	EXEC SQL VAR l_criteria_query1 IS STRING;
	EXEC SQL VAR l_criteria_query2 IS STRING;
	EXEC SQL VAR l_criteria_query3 IS STRING;
	EXEC SQL VAR l_table_parameter IS STRING;
	EXEC SQL VAR l_general_param IS STRING;
	EXEC SQL VAR l_client IS STRING;
	EXEC SQL VAR l_sub_client IS STRING;
	EXEC SQL VAR l_start_date IS STRING;
	EXEC SQL VAR l_master_query IS STRING;
	EXEC SQL VAR l_group_parameter IS STRING;
	EXEC SQL VAR l_group_query IS STRING;
	EXEC SQL VAR l_group_desc IS STRING;

	EXEC SQL VAR l_grand_round1 IS STRING;
	EXEC SQL VAR l_grand_round1 IS STRING;
	EXEC SQL VAR l_grand_round1 IS STRING;

	EXEC SQL VAR g_setting_flag IS STRING;
	EXEC SQL VAR l_grand_display IS STRING;

	EXEC SQL VAR complex_criteria_query IS STRING;
	EXEC SQL VAR complex_criteria_query1 IS STRING;
	EXEC SQL VAR l_header_query IS STRING;
	EXEC SQL VAR l_header_query1 IS STRING;
	EXEC SQL VAR l_footer_query IS STRING;
	EXEC SQL VAR l_footer_query1 IS STRING;
	EXEC SQL VAR l_complex_criteria_data IS STRING;
	EXEC SQL VAR complex_criteria IS STRING;
	
	EXEC SQL VAR l_letter_grp_query IS STRING;
	EXEC SQL VAR l_letter_group_param IS STRING;
    EXEC SQL VAR l_web_login_id IS STRING;
	EXEC SQL VAR l_web_rpt_id IS STRING;
	EXEC SQL VAR l_web_source_from IS STRING;
	EXEC SQL VAR l_web_report_dt IS STRING;
	EXEC SQL VAR l_web_proc_id IS STRING;
	EXEC SQL END DECLARE SECTION;
	
	strcpy(l_init_path,getenv("INTL_ROOT_PATH"));
	strcat(l_init_path,"intl_sun.cfg");
	
	if((l_init_file = fopen(l_init_path,"r")) == (FILE *)NULL)
	{
		fprintf(fl_userlog,"Failed to Open file for PATH :|%s|\n",l_init_path);
		//fflush(fl_userlog);
		printf("Failed to Open file for PATH :|%s|\n",l_init_path);
		//fflush(fl_userlog);
		APL_GOBACK_FAIL
	}

	fprintf(fl_userlog,"COMPRESS FLAG :|%s|\n",l_compress_flag);
	//fflush(fl_userlog);
	
	if(strlen(l_compress_flag) > 0 && !strcmp(l_compress_flag,"Y"))
	{
		if (APL_FAILURE == CO_ReadToken(l_init_file,"INTL_TEMP_PATH",l_report_path,l_debug_info_ptr))
		{
			fprintf(fl_userlog,"Error : INTL_TEMP_PATH not set in intl_sun.cfg File \n");
			//fflush(fl_userlog);
			printf("Error : INTL_TEMP_PATH not set in intl_sun.cfg File \n");
			//fflush(fl_userlog);
			APL_GOBACK_FAIL
		}
	}
	else
	{
		if (APL_FAILURE == CO_ReadToken(l_init_file,"INTL_REP_PATH",l_report_path,l_debug_info_ptr))
		{
			fprintf(fl_userlog,"Error : INTL_REP_PATH not set in intl_sun.cfg File \n");
			//fflush(fl_userlog);
			printf("Error : INTL_REP_PATH not set in intl_sun.cfg File \n");
			//fflush(fl_userlog);
			APL_GOBACK_FAIL
		}
	}
		
	EXEC SQL SELECT TO_CHAR(SYSDATE,'DD_MON_YYYY')||CHR(95)||TO_CHAR(SYSDATE,'HH24_MI_SS')		
				INTO :l_time_stamp
				FROM DUAL;

	sprintf(l_report_name,"%s_%s_%s.htm",l_client,l_rept_id,l_time_stamp);
	//fflush(fl_userlog);

	sprintf(l_report_path, "%s%s",l_report_path,l_report_name);
	//fflush(fl_userlog);
	
	fprintf(fl_userlog,"l_chr_param:|%s|\n",l_chr_param);
	//fflush(fl_userlog);
	
	if (CO_SplitStr(l_chr_param,PARAMSEP,&l_int_no_field,&l_field_val) == APL_FAILURE)
	{
		CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
		fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_chr_param);
		//fflush(fl_userlog);
		APL_GOBACK_FAIL
	}

	fprintf(fl_userlog,"l_int_no_field:|%d|\n",l_int_no_field);
	//fflush(fl_userlog);
	
	if(l_int_no_field > 0)
	{
		for(int_no=0;int_no<l_int_no_field;int_no++)
		{
			if(int_no == 1)
			strcpy(l_param2,l_field_val[int_no]);
			else if(int_no == 2)
			strcpy(l_param3,l_field_val[int_no]);
			else if(int_no == 3)
			strcpy(l_param4,l_field_val[int_no]);
			else if(int_no == 4)
			strcpy(l_param5,l_field_val[int_no]);
			else if(int_no == 5)
			strcpy(l_param6,l_field_val[int_no]);
		}
	}

	fprintf(fl_userlog,"REPORT FILE PATH 8:|%s|\n",l_report_path);
//fflush(fl_userlog);
	if((l_report_LETR2 = fopen(l_report_path,"w")) == (FILE *) NULL)
	{
		CO_InsertErr(l_debug_info_ptr,"FILE NOT FOUND",APL_NULL_STRING,
						APL_NULL_STRING,APL_NULL_STRING,	
						 __LINE__,__FILE__);
		fprintf(fl_userlog,"Error : File not Found For Report PATH :|%s|\n",l_report_path);
		//fflush(fl_userlog);
		APL_GOBACK_FAIL
	}


	/**** For Entry in PRO_COMMON_REPORT **********************************/
	
	fprintf(fl_userlog,"LENGTH OF l_compress_flag :|%d|\n",strlen(l_compress_flag));
	//fflush(fl_userlog);

	if(strlen(l_compress_flag) == 0 || !strcmp(l_compress_flag,"N"))
	{
	    strcpy(l_intl_rept_struct_ha.report_name,l_report_name);
	    strcat(l_intl_rept_struct_ha.report_name,"\0");
	    strcpy(l_intl_rept_struct_ha.report_desc,APL_REP_DESC);
	    strcat(l_intl_rept_struct_ha.report_desc,"\0");
	    strcpy(l_intl_rept_struct_ha.report_date,l_start_date);
	    l_intl_rept_struct_ha.report_width = 200 ;
	    strcpy(l_intl_rept_struct_ha.task_desc,"DynamicReport");
	    strcpy(l_intl_rept_struct_ha.fe_be_ind,"B");
	    strcpy(l_intl_rept_struct_ha.usr,l_user);

		 fprintf(fl_userlog,"Entering CO_Proc_RptIns8\n");
		 //fflush(fl_userlog);
		 fprintf(fl_userlog,"report_name:|%s|\n",l_intl_rept_struct_ha.report_name);
		 //fflush(fl_userlog);
		 fprintf(fl_userlog,"report_desc:|%s|\n",l_intl_rept_struct_ha.report_desc);
		 //fflush(fl_userlog);
		 fprintf(fl_userlog,"report_date:|%s|\n",l_intl_rept_struct_ha.report_date);
		 //fflush(fl_userlog);
		 //fprintf(fl_userlog,"report_width:|%ld|\n",l_intl_rept_struct_ha.report_width);
         fprintf(fl_userlog,"report_width:|%d|\n",l_intl_rept_struct_ha.report_width);
		 //fflush(fl_userlog);
		 fprintf(fl_userlog,"task_desc:|%s|\n",l_intl_rept_struct_ha.task_desc);
		 //fflush(fl_userlog);
		 fprintf(fl_userlog,"fe_be_ind:|%s|\n",l_intl_rept_struct_ha.fe_be_ind);
		 //fflush(fl_userlog);
		 fprintf(fl_userlog,"usr:|%s|\n",l_intl_rept_struct_ha.usr);
	     //fflush(fl_userlog);
	    if(APL_FAILURE == CO_Proc_DBRptIns(l_intl_rept_struct_ha,l_debug_info_ptr))
	    {
			fprintf(fl_userlog,"Error : Failure From CO_Proc_RptIns\n");
			//fflush(fl_userlog);
		  	APL_GOBACK_FAIL
	    }
		
	 }

	/**************************************************************************************/

   	/******** Starting of HTML and META tag ************************************************/
	
	fprintf(l_report_LETR2,"<HTML><HEAD><META http-equiv='Content-Type' content='text/html; charset=UTF-8'></META>\n");
	//fflush(fl_userlog);


	fprintf(fl_userlog,"Fetching Report Main Details :|%s|\n",l_rept_id);
	//fflush(fl_userlog);
	
	EXEC SQL SELECT * INTO :h_report_main_struct
				FROM REPORT_MAIN
				WHERE REPORT_ID=:l_rept_id;	

	if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
	{
		fprintf(fl_userlog,"Error : Failed to Access REPORT_MAIN Table --- ORA ERROR :|%d|\n",sqlca.sqlcode);
		//fflush(fl_userlog);
	}

	/******* Report Type Check ********************************/
	
	strcpy(l_report_type,h_report_main_struct.report_type);
	strcpy(header_query,h_report_main_struct.header_query);

	printf("l_report_type :|%s|\n",l_report_type);
	//fflush(fl_userlog);

	fprintf(fl_userlog,"Report_Type 7:|%s|\n",l_report_type);
	//fflush(fl_userlog);
	
	/************ For Dynamic Style Sheet Display *************************/

	fprintf(fl_userlog,"Before REPORT_SYSPARM ---- \n");
	//fflush(fl_userlog);

	EXEC SQL SELECT A.DEFAULT_SETTING,A.STYLE,A.STYLE_LT 
	         INTO :g_setting_flag,:g_style,:g_style_lt
		 FROM REPORT_SYSPARAM A, MT_COMMON_SYS_PARAMS B 
		 WHERE A.BANK_CODE=B.INSTALLED_AT_BANK;

        fprintf(fl_userlog,"After REPORT_SYSPARM Ora Error :|%d|\n",sqlca.sqlcode);
		//fflush(fl_userlog);

	fprintf(fl_userlog,"DEFAULT_SETTING :|%s|\n",g_setting_flag);
	//fflush(fl_userlog);

	/***********************************************************************/

	if(!strcmp(l_report_type,"L"))
	{			
		fprintf(l_report_LETR2,"%s\n",g_style_lt);
		//fflush(fl_userlog);
		strcpy(g_table_border,"1");
	}
	else
	{
		fprintf(l_report_LETR2,"%s\n",g_style);
		//fflush(fl_userlog);
		strcpy(g_table_border,"1");
	}
	
	/************************************************************/

	fprintf(l_report_LETR2,"</HEAD>\n");
	//fflush(fl_userlog);

	fprintf(l_report_LETR2,"<BODY>\n");
	//fflush(fl_userlog);


	/******* Initialize @PARAM1 ****************************/
	
	strcpy(l_param1,l_client);

	/********* LETTER MULTIPLE GROUPING QUERY *******************/

	strcpy(l_letter_grp_query,h_report_main_struct.letter_grp_query);
	strcpy(l_letter_grp_flag,h_report_main_struct.letter_grp_flag);

	fprintf(fl_userlog,"strlen(l_letter_grp_flag) :|%d|\n",strlen(l_letter_grp_flag));
	//fflush(fl_userlog);

	/******** For Final Remove File Count in Letters ********************/

	l_report_final_flag = 0;


	if(strlen(l_letter_grp_flag) > 0)
	{

	fprintf(fl_userlog,"strlen(l_letter_grp_query) :|%d|\n",strlen(l_letter_grp_query));
	//fflush(fl_userlog);
	
	if(strlen(l_letter_grp_query) > 0)
	{
		EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
				:l_letter_grp_query,
			    '@PARAM1',:l_param1),
			    '@PARAM2',:l_param2),
				'@PARAM3',:l_param3),
				'@PARAM4',:l_param4),
				'@PARAM5',:l_param5),
				'@PARAM6',:l_param6) 
				INTO :l_letter_grp_query FROM DUAL;
			
			fprintf(fl_userlog,"LETTER GROUP QUERY :|%s|\n",l_letter_grp_query);
			//fflush(fl_userlog);

			EXEC SQL PREPARE LETR_GROUP_QUERY FROM :l_letter_grp_query;
			EXEC SQL DECLARE letter_group_curr CURSOR FOR LETR_GROUP_QUERY;
			EXEC SQL OPEN letter_group_curr;

			if(sqlca.sqlcode < 0)
			{
				fprintf(fl_userlog,"Error : Cursor Open letter_group_curr ORA ERROR :|%d|\n",sqlca.sqlcode);
				//fflush(fl_userlog);
			}

			for(;;)
			{
				EXEC SQL FETCH letter_group_curr
						INTO :l_letter_group_param;
		
				if(sqlca.sqlcode == 1403)
				break;

				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Error : Fetch Cursor letter_group_curr ORA ERROR :|%d|\n",sqlca.sqlcode);
					//fflush(fl_userlog);
				}

				
				/********************* Record Count Query Part *****************************/
				
				EXEC SQL SELECT COUNT(TABLE_ID) INTO :l_table_numbers 
						 FROM REPORT_DETAILS
						 WHERE REPORT_ID=:l_rept_id;
				
				fprintf(fl_userlog,"AFTER COUNT(TABLE_ID) -- ORA Error 898:|%d|\n",sqlca.sqlcode);
				//fflush(fl_userlog);

				fprintf(fl_userlog,"l_table_numbers 898:|%d|\n",l_table_numbers);
				//fflush(fl_userlog);

				l_table_num = 1 ;

				l_record_count_flag = 0;

				l_record_count = 0;

				while(l_table_num <= l_table_numbers)
				{
					EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
											RECORD_COUNT_QUERY,'@PARAM1',:l_param1),
															   '@PARAM2',:l_param2),
															   '@PARAM3',:l_param3),
															   '@PARAM4',:l_param4),
															   '@PARAM5',:l_param5),
															   '@PARAM6',:l_param6),
															   '@GROUP1',:l_letter_group_param),
									REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
											RECORD_COUNT_QUERY1,'@PARAM1',:l_param1),
															   '@PARAM2',:l_param2),
															   '@PARAM3',:l_param3),
															   '@PARAM4',:l_param4),
															   '@PARAM5',:l_param5),
															   '@PARAM6',:l_param6),
															   '@GROUP1',:l_letter_group_param) 
							  INTO :l_record_count_query,:l_record_count_query1
							  FROM REPORT_DETAILS 
							  WHERE REPORT_ID=:l_rept_id 
							  AND TABLE_ID = :l_table_num;

					fprintf(fl_userlog,"AFTER RECORD_COUNT_QUERY Select -- ORA Error :|%d|\n",sqlca.sqlcode);
					//fflush(fl_userlog);


					strcpy(l_record_count_query_final,l_record_count_query);
					strcat(l_record_count_query_final,l_record_count_query1);

					fprintf(fl_userlog,"l_record_count_query_final :|%s|\n",l_record_count_query_final);
					//fflush(fl_userlog);

					if(strlen(l_record_count_query_final) > 0)
					{

						EXEC SQL PREPARE LTR2_RECORD_COUNT1 FROM :l_record_count_query_final;

						EXEC SQL DECLARE ltr2_record_count_curr1 CURSOR FOR LTR2_RECORD_COUNT1;

						EXEC SQL OPEN  ltr2_record_count_curr1;

						if(sqlca.sqlcode < 0)
						{
							fprintf(fl_userlog,"Error : Failed To OPEN ltr2_record_count_curr1 CURSOR -- ORA Error :|%d|\n",sqlca.sqlcode);
							//fflush(fl_userlog);
							l_record_count_flag = 0;
						}

						EXEC SQL FETCH ltr2_record_count_curr1 INTO :l_record_count;

						if(sqlca.sqlcode < 0)
						{
							fprintf(fl_userlog,"Error : Failed To FETCH ltr2_record_count_curr1 CURSOR -- ORA Error :|%d|\n",sqlca.sqlcode);
							//fflush(fl_userlog);
							l_record_count_flag = 0;
						}

						EXEC SQL CLOSE ltr2_record_count_curr1;

					}


					fprintf(fl_userlog,"l_record_count :|%d|\n",l_record_count);
					//fflush(fl_userlog);
					if(l_record_count > 0)
						l_record_count_flag = 1;

					l_table_num ++;

				}

		 
			fprintf(fl_userlog,"RECORD COUNT FLAG :|%d|\n",l_record_count_flag);
			//fflush(fl_userlog);
			printf("RECORD COUNT FLAG :|%d|\n",l_record_count_flag);
           //fflush(fl_userlog);
		   /***********************************************************************************/

			if((l_record_count_flag == 1)||(strlen(l_record_count_query_final) == 0))
			{

				fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" class=\'heading\'><TR>\n");
				//fflush(fl_userlog);

				/***** Image path *******************************************************/

				fprintf(fl_userlog,"Before Image :- Compress Flag :|%s|\n",l_compress_flag);
				//fflush(fl_userlog);

				if(strlen(h_report_main_struct.image_path) > 0)
				{
					fprintf(l_report_LETR2,"<TD WIDTH=\"20%%\" ALIGN=\"LEFT\"><IMG id=\"image\" SRC=\"%s\" ALIGN=\"LEFT\" HEIGHT=\"60\" WIDTH=\"150\"/></TD>\n", h_report_main_struct.image_path);
				//fflush(fl_userlog);
				}



				/********* Letter Header Display ******************************************/

				EXEC SQL SELECT CA_IDENTNAME||'</BR>'||REPLACE(CA_ADDRESS,'|','</BR>') 
						 INTO :l_letter_header FROM MT_COMMON_SYS_PARAMS;

				fprintf(fl_userlog,"After Letter Address ORA ERROR :|%d|\n",sqlca.sqlcode );
				//fflush(fl_userlog);

				if(strlen(h_report_main_struct.page_hdr_align) > 0)
				{
					if(strlen(h_report_main_struct.page_header) > 0 )
					{
						fprintf(l_report_LETR2,"<TD WIDTH=\"80%%\" ALIGN=\"%s\" class=\'heading\'><I>%s</I></TD>\n", h_report_main_struct.page_hdr_align,l_letter_header);
					//fflush(fl_userlog);
					}
				}
				else
				{
					if(strlen(h_report_main_struct.page_header) > 0 )
					{
						fprintf(l_report_LETR2,"<TR><TD WIDTH=\"80%%\" ALIGN=\"LEFT\" class=\'heading\'><I>%s</I></TD>\n",l_letter_header);
						//fflush(fl_userlog);
					}

				}

				fprintf(l_report_LETR2,"</TR></TABLE>\n");
				//fflush(fl_userlog);

				/*************************************************************************************/

				
				l_page_header = h_report_main_struct.page_hdr_brk;	
				while(l_page_header > 0 )
				{
					fprintf(l_report_LETR2,"</BR>\n");	
                    //fflush(fl_userlog);					
					l_page_header -- ;
					g_line_count++;
				}
				

				fprintf(l_report_LETR2,"</BR>\n");
				//fflush(fl_userlog);
				g_line_count++;
			
			
				fprintf(fl_userlog,"l_rept_id:|%s|\n",l_rept_id);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_param1:|%s|\t l_param2:|%s|\n",l_param1,l_param2);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_param3:|%s|\t l_param4:|%s|\n",l_param3,l_param4);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_param5:|%s|\t l_param6:|%s|\n",l_param5,l_param6);
				//fflush(fl_userlog);

				
				/******* Dynamic Header Display ******************/

				fprintf(fl_userlog,"strlen(header_query) :|%d|\n",strlen(header_query));
                //fflush(fl_userlog);
				if(strlen(header_query) > 0)
				{

				fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_HEADER :|%s||%s|\n",l_rept_id,l_param1);	
				 //fflush(fl_userlog);
				printf("Calling Stored Procedure SP_REPORT_HEADER :|%s||%s|\n",l_rept_id,l_param1);		
				//fflush(fl_userlog);
				EXEC SQL CALL SP_REPORT_HEADER(:l_rept_id,:l_param1,:l_param2,
							:l_param3,:l_param4, :l_param5,
							:l_param6,:l_header_query,:l_header_query1,:l_error_desc);

				
				EXEC SQL SELECT REPLACE(:l_header_query,'@GROUP1',:l_letter_group_param),
						REPLACE(:l_header_query1,'@GROUP1',:l_letter_group_param)
						INTO :l_header_query,:l_header_query1
					 FROM DUAL;

				strcat(l_header_query,l_header_query1);

				if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_HEADER ERR DESC :|%s|\n",l_error_desc);
					//fflush(fl_userlog);
				}

				
				fprintf(fl_userlog,"LTR_HEADER QUERY :|%s|\n",l_header_query);
				//fflush(fl_userlog);

				EXEC SQL PREPARE LTR_HEADER_CURR FROM :l_header_query;

				EXEC SQL DECLARE LTR_header_curr CURSOR FOR LTR_HEADER_CURR;
				
				fprintf(fl_userlog,"After DECLARE LTR_header_curr Ora Error :|%d|\n",sqlca.sqlcode);
				//fflush(fl_userlog);

				EXEC SQL OPEN LTR_header_curr;

				EXEC SQL FETCH LTR_header_curr INTO :l_header_query_value;

				fprintf(fl_userlog,"After FETCH LTR_header_curr Ora Error :|%d|\n",sqlca.sqlcode);
				//fflush(fl_userlog);

				EXEC SQL CLOSE LTR_header_curr;

				fprintf(fl_userlog,"l_header_query_value :|%s|\n",l_header_query_value);
				//fflush(fl_userlog);
				
				if (CO_SplitStr(l_header_query_value,CAPSEP,&l_header_num,&l_header_val) == APL_FAILURE)
				{
					CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_header_query_value);
					//fflush(fl_userlog);
					APL_GOBACK_FAIL
				}

				fprintf(fl_userlog,"l_header_num :|%d|\n",l_header_num);
				//fflush(fl_userlog);
				if(l_header_num > 0)
				{
					for(i=0;i<l_header_num;i++)
					{
						if(i == 0)
						strcpy(l_header1,l_header_val[i]);
						else if(i == 1)
						strcpy(l_header2,l_header_val[i]);
						else if(i == 2)
						strcpy(l_header3,l_header_val[i]);
						else if(i == 3)
						strcpy(l_header4,l_header_val[i]);
						else if(i == 4)
						strcpy(l_header5,l_header_val[i]);
						else if(i == 5)
						strcpy(l_header6,l_header_val[i]);
						else if(i == 6)
						strcpy(l_header7,l_header_val[i]);
						else if(i == 7)
						strcpy(l_header8,l_header_val[i]);
						else if(i == 8)
						strcpy(l_header9,l_header_val[i]);
						else if(i == 9)
						strcpy(l_header10,l_header_val[i]);
						else if(i == 10)
						strcpy(l_header11,l_header_val[i]);
						else if(i == 11)
						strcpy(l_header12,l_header_val[i]);
						else if(i == 12)
						strcpy(l_header13,l_header_val[i]);
						else if(i == 13)
						strcpy(l_header14,l_header_val[i]);
						else if(i == 14)
						strcpy(l_header15,l_header_val[i]);
					}
				}

				/****** Stored Procedure : SP_REPORT_HEADER_DATA ***********************************/

				fprintf(fl_userlog,"l_header1 :|%s|\t l_header2 :|%s|\n",l_header1,l_header2);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_header3 :|%s|\t l_header4 :|%s|\n",l_header3,l_header4);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_header5 :|%s|\t l_header6 :|%s|\n",l_header5,l_header6);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_header7 :|%s|\t l_header8 :|%s|\n",l_header7,l_header8);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_header9 :|%s|\t l_header10 :|%s|\n",l_header9,l_header10);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_header11 :|%s|\t l_header12 :|%s|\n",l_header11,l_header12);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_header13 :|%s|\t l_header14 :|%s|\n",l_header13,l_header14);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_header15 :|%s|\t\n",l_header15);
                //fflush(fl_userlog);
				  
				fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_HEADER_DATA :|%s|\n",l_rept_id);	
                 //fflush(fl_userlog);				
				printf("Calling Stored Procedure SP_REPORT_HEADER_DATA :|%s|\n",l_rept_id);		
				//fflush(fl_userlog);
				//fflush(fl_userlog);
				EXEC SQL CALL SP_REPORT_HEADER_DATA(:l_rept_id,:l_header1,
								    :l_header2,:l_header3,
								    :l_header4,:l_header5,
								    :l_header6,:l_header7,
								    :l_header8,:l_header9,
								    :l_header10,:l_header11,
								    :l_header12,:l_header13,
								    :l_header14,:l_header15,
								    :l_header_data,:l_error_desc); 

				if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_HEADER_DATA ERR DESC :|%s|\n",l_error_desc);
					//fflush(fl_userlog);
				}

				fprintf(fl_userlog,"HEADER DATA :|%s|\n",l_header_data);
				//fflush(fl_userlog);

				/************ Dynamic Formating Procedure ********/
				
				fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);	
                 //fflush(fl_userlog);				
				printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
				//fflush(fl_userlog);
				EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_header_data,:l_error_desc); 

				if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
					//fflush(fl_userlog);
				}

				fprintf(fl_userlog,"HEADER DATA After Formatting -- :|%s|\n",l_header_data);
				//fflush(fl_userlog);

				/************************************************/

				fprintf(fl_userlog,"strlen(l_header_data) :|%d|\n",strlen(l_header_data));
				//fflush(fl_userlog);
				
				if(strlen(l_header_data) > 0)
				{
					fprintf(fl_userlog,"Displaying Header Data ----- \n");
					//fflush(fl_userlog);

					fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\"><TR>\n");
					//fflush(fl_userlog);
					fprintf(l_report_LETR2,"<TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'headerdata\'>%s</TD>\n",h_report_main_struct.header_data_align,l_header_data);
					//fflush(fl_userlog);
					fprintf(l_report_LETR2,"</TR></TABLE>\n");
					//fflush(fl_userlog);
				}

				l_header_brk = h_report_main_struct.header_brk;
				while(l_header_brk > 0)
				{
					fprintf(l_report_LETR2,"</BR>\n");
					//fflush(fl_userlog);
					l_header_brk --;
					g_line_count++;
				}

				/********  End Of Dynamic Header Display   *********/

				}


				l_table_id = 1;
				
				fprintf(fl_userlog,"NO OF TABLES :|%d|\n",h_report_main_struct.no_of_tables);
				//fflush(fl_userlog);
				printf("NO OF TABLES :|%d|\n",h_report_main_struct.no_of_tables);
				//fflush(fl_userlog);
				
				while(l_table_id <= h_report_main_struct.no_of_tables)
				{

					g_complex_parameter1 = 0.0;
					g_complex_parameter2 = 0.0;
					g_complex_parameter3 = 0.0;
					g_complex_parameter4 = 0.0;
					g_complex_parameter5 = 0.0;
					g_complex_parameter6 = 0.0;
					g_complex_parameter7 = 0.0;
					g_complex_parameter8 = 0.0;
					g_complex_parameter9 = 0.0;
					g_complex_parameter10 = 0.0;
					g_complex_parameter11 = 0.0;
					g_complex_parameter12 = 0.0;
					g_complex_parameter13 = 0.0;
					g_complex_parameter14 = 0.0;
					g_complex_parameter15 = 0.0;
					g_complex_parameter16 = 0.0;
					g_complex_parameter17 = 0.0;
					g_complex_parameter18 = 0.0;
					g_complex_parameter19 = 0.0;
					g_complex_parameter20 = 0.0;

				
				
				EXEC SQL SELECT * INTO :h_report_details_struct
							FROM REPORT_DETAILS 
							WHERE REPORT_ID=:l_rept_id
							AND TABLE_ID=:l_table_id;

				if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Failed to Access REPORT_DETAILS --- ORA ERROR :|%d|\n",sqlca.sqlcode);
					//fflush(fl_userlog);
				}


				/***** Table header ************************/

				fprintf(fl_userlog,"h_report_details_struct.table_hdr:|%s|\n",h_report_details_struct.table_hdr);
				//fflush(fl_userlog);
				if(strlen(h_report_details_struct.table_hdr_align) > 0)
				{
					if(strlen(h_report_details_struct.table_hdr) > 0)
					{
						fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" class=\'lableredbg\'><TR ><TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'lableredbg\'>%s</TD></TR></TABLE>\n",h_report_details_struct.table_hdr_align,h_report_details_struct.table_hdr);
                       //fflush(fl_userlog);
						g_line_count++;
					}
				}
				else
				{
					if(strlen(h_report_details_struct.table_hdr) > 0)
					{
						fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" class=\'lableredbg\'><TR ><TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'lableredbg\'>%s</TD></TR></TABLE>\n",h_report_details_struct.table_hdr);
                         //fflush(fl_userlog);
						g_line_count++;
					}
					
				}

				l_table_hdr = h_report_details_struct.table_hdr_brk;
				while(l_table_hdr > 0)
				{
					fprintf(l_report_LETR2,"</BR>\n");
					//fflush(fl_userlog);
					l_table_hdr --;
					g_line_count++;
				}

			
				strcpy(footer_query,h_report_details_struct.footer_query);

				/*********** Grouping Condition Check **********************/

				fprintf(fl_userlog,"h_report_details_struct.group_desc:|%s|\n",h_report_details_struct.group_desc);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"h_report_details_struct.group_pos:|%s|\n",h_report_details_struct.group_pos);
					 //fflush(fl_userlog);
				strcpy(l_group_pos,h_report_details_struct.group_pos);

				strcpy(l_group_query,h_report_details_struct.group_query);
				strcpy(l_group_desc,h_report_details_struct.group_desc);

				fprintf(fl_userlog,"strlen(l_group_query) :|%d|\n",strlen(l_group_query));	
				//fflush(fl_userlog);
				printf("strlen(l_group_query) :|%d|\n",strlen(l_group_query));	
                 //fflush(fl_userlog);

				if(strlen(l_group_query) > 0 )
				{
					EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
						:l_group_query,
						'@PARAM1',:l_param1),
						'@PARAM2',:l_param2),
						'@PARAM3',:l_param3),
						'@PARAM4',:l_param4),
						'@PARAM5',:l_param5),
						'@PARAM6',:l_param6), 
						'@GROUP1',:l_letter_group_param) 
						INTO :l_group_query FROM DUAL;
					
					fprintf(fl_userlog,"GROUP QUERY :|%s|\n",l_group_query);
                    //fflush(fl_userlog);
					EXEC SQL PREPARE LETR_GROUP FROM :l_group_query;
					EXEC SQL DECLARE LETR_group CURSOR FOR LETR_GROUP;
					EXEC SQL OPEN LETR_group;

					if(sqlca.sqlcode < 0)
					{
						fprintf(fl_userlog,"Error : Cursor Open LETR_group ORA ERROR :|%d|\n",sqlca.sqlcode);
						//fflush(fl_userlog);
					}

					for(;;)
					{
						EXEC SQL FETCH LETR_group
								INTO :l_group_parameter;

						fprintf(fl_userlog,"After FETCH LETR_group :|%d| And l_group_break_flag :|%d|\n",sqlca.sqlcode,l_group_break_flag);
						//fflush(fl_userlog);
						
						if((sqlca.sqlcode == 1403)||(l_group_break_flag == 1))
							break;

						if(sqlca.sqlcode < 0)
						{
							fprintf(fl_userlog,"Error : Fetch Cursor LETR_group ORA ERROR :|%d|\n",sqlca.sqlcode);
							//fflush(fl_userlog);
						}

						/********* Split Group Parameter ******************/
					
						fprintf(fl_userlog,"l_group_parameter:|%s|\n",l_group_parameter);
						//fflush(fl_userlog);
						
						if(CO_SplitStr(l_group_parameter,CAPSEP,&l_group_parameter_no,&l_group_parameter_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_parameter);
							//fflush(fl_userlog);
							APL_GOBACK_FAIL
						}
				
						fprintf(fl_userlog,"l_group_pos:|%s|\n",l_group_pos);
						//fflush(fl_userlog);
						
						if(CO_SplitStr(l_group_pos,COMASEP,&l_group_pos_no,&l_group_pos_value) == APL_FAILURE)
						{
					 
							CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_pos);
							//fflush(fl_userlog);
							APL_GOBACK_FAIL
						}

						fprintf(fl_userlog,"l_group_pos_no:|%d|l_group_parameter_no:|%d|\n",l_group_pos_no,l_group_parameter_no);
						//fflush(fl_userlog);
						
						if((l_group_pos_no > 0) && (l_group_parameter_no > 0)
							&& (l_group_pos_no == l_group_parameter_no))
						{	
							l_group_break_flag=0;
						
							for(i=0;i<l_group_pos_no;i++)
							{
								if(!strcmp(l_group_pos_value[i],"2"))
								{
									fprintf(fl_userlog,"l_param2:|%s|l_prev_param2:|%s|\n",l_param2,l_prev_param2);
									//fflush(fl_userlog);
									
									if(!strcmp(l_param2,l_prev_param2))
									{
										strcpy(l_param2,l_group_parameter_value[i]);
										strcpy(l_prev_param2,l_param2);
									}
									else
										l_group_break_flag=1;
								}
								else if(!strcmp(l_group_pos_value[i],"3"))
								{
									fprintf(fl_userlog,"l_param3:|%s|l_prev_param3:|%s|\n",l_param3,l_prev_param3);
									//fflush(fl_userlog);
									
									if(!strcmp(l_param3,l_prev_param3))
									{
										strcpy(l_param3,l_group_parameter_value[i]);
										strcpy(l_prev_param3,l_param3);
									}
									else
										l_group_break_flag=1;
								}
								else if(!strcmp(l_group_pos_value[i],"4"))
								{
									fprintf(fl_userlog,"l_param4:|%s|l_prev_param4:|%s|\n",l_param4,l_prev_param4);
									//fflush(fl_userlog);
									
									if(!strcmp(l_param4,l_prev_param4))
									{
										strcpy(l_param4,l_group_parameter_value[i]);
										strcpy(l_prev_param4,l_param4);
									}
									else
										l_group_break_flag=1;
								}
								else if(!strcmp(l_group_pos_value[i],"5"))
								{
									fprintf(fl_userlog,"l_param5:|%s|l_prev_param5:|%s|\n",l_param5,l_prev_param5);
									//fflush(fl_userlog);
									
									if(!strcmp(l_param5,l_prev_param5))
									{
										strcpy(l_param5,l_group_parameter_value[i]);
										strcpy(l_prev_param5,l_param5);
									}
									else
										l_group_break_flag=1;
								}
								else if(!strcmp(l_group_pos_value[i],"6"))
								{
									fprintf(fl_userlog,"l_param6:|%s|l_prev_param6:|%s|\n",l_param6,l_prev_param6);
									//fflush(fl_userlog);
									
									if(!strcmp(l_param6,l_prev_param6))
									{
										strcpy(l_param6,l_group_parameter_value[i]);
										strcpy(l_prev_param6,l_param6);
									}
									else
										l_group_break_flag=1;
								}
							}
						}
						else
						{
							fprintf(fl_userlog,"Error: Mismatch in Group Parameters :|%d||%d|",l_group_pos_no,l_group_parameter_no);
							//fflush(fl_userlog);
							break;
						}
						

					/*********************************************************************/
					
					fprintf(fl_userlog,"l_param1:|%s|\n",l_param1);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"l_param2:|%s|\n",l_param2);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"l_param3:|%s|\n",l_param3);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"l_param4:|%s|\n",l_param4);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"l_param5:|%s|\n",l_param5);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"l_param6:|%s|\n",l_param6);
					//fflush(fl_userlog);
						
					/**** Stored procedure for REPORT DETAILS GROUPING ********/
					
					fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID 40:|%s|\n",l_rept_id);
					//fflush(fl_userlog);
					printf("Calling Stored Procedure SP_REPORT_DETAIL for Report ID :|%s|\n",l_rept_id);
					//fflush(fl_userlog);
					EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
							:l_param2,:l_param3,:l_param4,
							:l_param5,:l_param6,
							:l_table_query,:l_table_query1,:l_table_query2,
							:l_table_query3,:l_table_query4,:l_table_query5,
							:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
							:l_group_desc,:l_error_desc);

					EXEC SQL SELECT REPLACE(:l_table_query,'@GROUP1',:l_letter_group_param),
							REPLACE(:l_table_query1,'@GROUP1',:l_letter_group_param),
							REPLACE(:l_table_query2,'@GROUP1',:l_letter_group_param),
							REPLACE(:l_table_query3,'@GROUP1',:l_letter_group_param),
							REPLACE(:l_table_query4,'@GROUP1',:l_letter_group_param),
							REPLACE(:l_table_query5,'@GROUP1',:l_letter_group_param)  
						INTO :l_table_query,:l_table_query1,:l_table_query2,
                             :l_table_query3,:l_table_query4,:l_table_query5 
						FROM DUAL;

					strcpy(table_query,l_table_query);
					strcat(table_query," ");
					
					if(strlen(l_table_query1) > 0)
					{
						strcat(table_query,l_table_query1);
						strcat(table_query," ");
					}
					if(strlen(l_table_query2) > 0)
					{
						strcat(table_query,l_table_query2);
						strcat(table_query," ");
					}
					if(strlen(l_table_query3) > 0)
					{
						strcat(table_query,l_table_query3);
						strcat(table_query," ");
					}
					if(strlen(l_table_query4) > 0)
					{
						strcat(table_query,l_table_query4);
						strcat(table_query," ");
					}
					if(strlen(l_table_query5) > 0)
					{
						strcat(table_query,l_table_query5);
						strcat(table_query," ");
					}
					
					strcat(table_query,APL_NULL_STRING);
						
					fprintf(fl_userlog,"After Stored Procedure SP_REPORT_DETAIL ORA ERROR 16:|%d|\n",sqlca.sqlcode);
					//fflush(fl_userlog);
					if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					{
						fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
						//fflush(fl_userlog);
					}
					
					/*fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
					//fflush(fl_userlog);*/
					fprintf(fl_userlog,"l_criteria_query1:|%s|\n",l_criteria_query1);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"l_criteria_query2:|%s|\n",l_criteria_query2);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"l_criteria_query3:|%s|\n",l_criteria_query3);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"l_group_desc:|%s|\n",l_group_desc);
					//fflush(fl_userlog);

					/********* Group Description ******************************************/
					
					if(strlen(l_group_desc) > 0)
					{
						fprintf(l_report_LETR2,"</BR>\n");
						//fflush(fl_userlog);
						fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR><TD WIDTH=\'100%%\' class=\'ez4\'>%s</TD></TR></TABLE>\n",l_group_desc);
						//fflush(fl_userlog);
						fprintf(l_report_LETR2,"</BR>\n");
						//fflush(fl_userlog);
					}


					/****** Multiple Column Level **************************************/

					strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
					strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
					strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
					
					fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);
					//fflush(fl_userlog);

					if(strlen(l_multiple_col_flag) > 0)
					{
						fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
						//fflush(fl_userlog);
						fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);
						//fflush(fl_userlog);

						if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
								&l_multiple_col_header_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
							 //fflush(fl_userlog);
							 APL_GOBACK_FAIL
						}

						if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
								&l_multiple_colspan_sep_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
							 //fflush(fl_userlog);
							 APL_GOBACK_FAIL
						}


						fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
						//fflush(fl_userlog);
						fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);
						//fflush(fl_userlog);

						fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" border=\'%s\' cellSpacing=\'0\' cellPadding=\'1\' >\n",g_table_border);
						//fflush(fl_userlog);

						if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
						{
							for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
							{
								for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
								{				

								if(int_a == int_b )
								{
								
								strcpy(l_level_header,l_multiple_col_header_value[int_a]);
								strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

								fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
								//fflush(fl_userlog);
								fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);
								//fflush(fl_userlog);

								if (CO_SplitStr(l_level_header,
										SEMISEP,
										&l_level_header_no,
										&l_level_header_value) == APL_FAILURE)
								{
									 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
									 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
									 //fflush(fl_userlog);
									 APL_GOBACK_FAIL
								}

								if (CO_SplitStr(l_level_colspan,
										SEMISEP,
										&l_level_colspan_no,
										&l_level_colspan_value) == APL_FAILURE)
								{
									 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
									 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
									 //fflush(fl_userlog);
									 APL_GOBACK_FAIL
								}

								fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
								//fflush(fl_userlog);
								fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);
								//fflush(fl_userlog);

								if(l_level_header_no == l_level_colspan_no)
								{

								fprintf(l_report_LETR2,"<TR>\n");
								//fflush(fl_userlog);
								for(int_aa=0;int_aa<l_level_header_no;int_aa++)
								{
									for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
									{
										if(int_aa == int_bb)
										{	
										
										strcpy(l_level_column,l_level_header_value[int_aa]);
										strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

										fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
										//fflush(fl_userlog);
										fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
										//fflush(fl_userlog);
										
										if(strlen(l_level_column) > 0)
										{
											fprintf(l_report_LETR2,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >%s</TD> \n", l_level_col_span,l_level_column);
										//fflush(fl_userlog);
										}
										else
										{
											fprintf(l_report_LETR2,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >&nbsp;</TD> \n", l_level_col_span);
                                            //fflush(fl_userlog);
										}

										}
									}
								}
								fprintf(l_report_LETR2,"</TR>\n");
								//fflush(fl_userlog);

								}/*** End Of Inner Condition check *****/

								}
								
														
								}/*** End Of 2st Main For Loop *******/

							}/*** End Of 1st Main For Loop *******/

						}/*** End Of Multiple col condition check *****/

						l_column_no=h_report_details_struct.no_of_columns;
						l_no_of_columns = h_report_details_struct.no_of_columns;
					}
					

					EXEC SQL PREPARE LETR2_SUB1 FROM :table_query;	
					EXEC SQL DECLARE LETR2tablequery1 CURSOR FOR LETR2_SUB1;
					EXEC SQL OPEN LETR2tablequery1;

					if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
					{
						fprintf(fl_userlog,"Error : Open Cursor LETR2tablequery1 ORA ERROR :|%d|\n",sqlca.sqlcode);
						//fflush(fl_userlog);
					}
					

					l_fetch_count=0;

					for(;;)
					{
						EXEC SQL FETCH LETR2tablequery1
							INTO :l_table_parameter;

						if(sqlca.sqlcode == 1403)
						{
							fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
							//fflush(fl_userlog);
							if(l_fetch_count == 0)
							{
								fprintf(l_report_LETR2,"<TR>\n");
								//fflush(fl_userlog);
								fprintf(l_report_LETR2,"<TD WIDTH=\'100%%\' COLSPAN=\'%d\' class=\'ez4\'>NO RECORDS FOUND </TD>\n",l_column_no);
								//fflush(fl_userlog);
								fprintf(l_report_LETR2,"</TR>\n");
								//fflush(fl_userlog);

								l_remove_count ++;
							}
							break;
						}

						if(sqlca.sqlcode < 0)
						{
						   fprintf(fl_userlog,"Error : Fetch Cursor LETR2tablequery1 --- ORA ERROR:|%d|\n",sqlca.sqlcode);
						   //fflush(fl_userlog);
							break;
						}

						strcpy(l_column_parameter,l_table_parameter);
						
						/**** Split and fetch the column data ******/
					
						if (CO_SplitStr(l_column_parameter,CAPSEP,
								&l_column_num,&l_column_val) == APL_FAILURE)
						{
							CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
							//fflush(fl_userlog);
							APL_GOBACK_FAIL
						}

						/***** For Number Formatting ******************************************/

						strcpy(l_format_col_pos,h_report_details_struct.format_col_pos);
						if (CO_SplitStr(l_format_col_pos,COMASEP,&l_format_col_no,&l_format_col_val) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_format_col_pos);
							 //fflush(fl_userlog);
							 APL_GOBACK_FAIL
						}

						fprintf(l_report_LETR2,"<TR>\n");
						//fflush(fl_userlog);

						for(j=0;j<l_column_num;j++)
						{
							strcpy(l_column,l_column_val[j]);
							
							l_format_col_flag = 0;
							if(l_format_col_no > 0)
							{
								for (k=0;k<l_format_col_no;k++)
								{
									strcpy(l_format_col_value,l_format_col_val[k]);

									if(j==(atoi(l_format_col_value)-1))
										l_format_col_flag = 1;
								}

								if((strlen(l_column) > 0) && (strcmp(l_column," ")))
								{
									if(l_format_col_flag == 1)
									{
										EXEC SQL CALL SP_NUMBER_FORMATTING(:l_column,:l_error_desc);

										if(strlen(l_error_desc) > 0)
										{
											fprintf(l_report_LETR2,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
											//fflush(fl_userlog);
										}
										else
										{
											fprintf(l_report_LETR2,"<TD class=\'record\' ALIGN=\"RIGHT\">%s</TD>\n",l_column);
											//fflush(fl_userlog);
										}
									}
									else
									{
										fprintf(l_report_LETR2,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
										//fflush(fl_userlog);
									}
								}
								else
									 fprintf(l_report_LETR2,"<TD class=\'record\'  >&nbsp</TD>\n");
									 //fflush(fl_userlog);

							}
							else
							{
								if((strlen(l_column) > 0) && (strcmp(l_column," ")))
								{
									fprintf(l_report_LETR2,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
									//fflush(fl_userlog);
								}
								else
								{
									fprintf(l_report_LETR2,"<TD class=\'record\'  >&nbsp</TD>\n");
									//fflush(fl_userlog);
								}
							}

						}
						fprintf(l_report_LETR2,"</TR>\n");
						//fflush(fl_userlog);

						/*********************************************************************/

						l_fetch_count ++;

					}
					EXEC SQL CLOSE LETR2tablequery1;


					/******* Complex Criteria Part **************************/

					strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
					strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
					strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
					strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

					if(strlen(complex_criteria_query) > 0)
					{
					
					EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
							:complex_criteria_query,
							'@PARAM1',:l_param1),
							'@PARAM2',:l_param2),
							'@PARAM3',:l_param3),
							'@PARAM4',:l_param4),
							'@PARAM5',:l_param5),
							'@PARAM6',:l_param6),
							'@GROUP1',:l_letter_group_param),
							REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
							:complex_criteria_query1,
							'@PARAM1',:l_param1),
							'@PARAM2',:l_param2),
							'@PARAM3',:l_param3),
							'@PARAM4',:l_param4),
							'@PARAM5',:l_param5),
							'@PARAM6',:l_param6),
							'@GROUP1',:l_letter_group_param)
						INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;
				
					strcat(complex_criteria_query,complex_criteria_query1);
					
					fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);
                    //fflush(fl_userlog);
					EXEC SQL PREPARE LTR_CMPX_CURR1 FROM :complex_criteria_query;

					EXEC SQL DECLARE LTR_complex_curr1 CURSOR FOR LTR_CMPX_CURR1;

					fprintf(fl_userlog,"After DECLARE LTR_complex_curr1 :|%d|\n",sqlca.sqlcode);
                     //fflush(fl_userlog);
					EXEC SQL OPEN LTR_complex_curr1;

					EXEC SQL FETCH LTR_complex_curr1 INTO :l_complex_parameter;

					fprintf(fl_userlog,"After FETCH LTR_complex_curr1 :|%d|\n",sqlca.sqlcode);
                     //fflush(fl_userlog);
					EXEC SQL CLOSE LTR_complex_curr1;

					fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);
                    //fflush(fl_userlog);
					if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
					{
						CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
						//fflush(fl_userlog);
						APL_GOBACK_FAIL
					}
					
					fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);
					//fflush(fl_userlog);

					if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
					{
						CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
						//fflush(fl_userlog);
						APL_GOBACK_FAIL
					}


					fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);
					//fflush(fl_userlog);

					l_complex_break_flag = 0;
					
					if(l_complex_num == l_complex_pos_num)
					{

					fprintf(l_report_LETR2,"<TR>\n");
					//fflush(fl_userlog);

					for(i=0;i<l_column_num;i++)
					{
						for(j=0;j<l_complex_pos_num;j++)
						{

						strcpy(l_complex_pos_column,l_complex_pos_val[j]);

						if((i==0)&&(j==0))
						{
							if(strlen(complex_criteria_label) > 0)
							{
								fprintf(l_report_LETR2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" >%s</TD>\n",complex_criteria_label);
								//fflush(fl_userlog);
								l_complex_break_flag=1;
							}
							else
							{
							fprintf(l_report_LETR2,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
							//fflush(fl_userlog);
							}
						}

						if(i== (atoi(l_complex_pos_column)-1))
						{				  
						  strcpy(l_complex_column,l_complex_val[j]);

						  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);
						  //fflush(fl_userlog);

						  l_complex_break_flag=1;

						  if(strlen(l_complex_column) > 0)
						  {
							  EXEC SQL CALL SP_NUMBER_FORMATTING(:l_complex_column,:l_error_desc);

							  if(strlen(l_error_desc) > 0)
							  {
								fprintf(l_report_LETR2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">%s</TD>\n",l_complex_column);
								//fflush(fl_userlog);
								}
							  else
							  {
								fprintf(l_report_LETR2,"<TD class=\'lableredbg\' ALIGN=\"RIGHT\">%s</TD>\n",l_complex_column);
								//fflush(fl_userlog);
								}
						  }
						  else
						  {
								fprintf(l_report_LETR2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">&nbsp;</TD>\n");
								//fflush(fl_userlog);
						  }									
						
						  break;
						}
						else
						{
						     l_complex_break_flag = 0;
						     continue;
						} 

						}
						     
						if(i != 0)
						{
						  if(l_complex_break_flag != 1)
						     fprintf(l_report_LETR2,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
							 //fflush(fl_userlog);
						}
					}

					}
					else
					{
						fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
						//fflush(fl_userlog);
					}

					fprintf(l_report_LETR2,"</TR>\n");
					//fflush(fl_userlog);

					}
					
					/*****************	End Of Complex Part     *********************/



					fprintf(l_report_LETR2,"</TABLE>\n");
					//fflush(fl_userlog);

					/****** After table ************************************/
			
					l_after_table = h_report_details_struct.after_table_brk;
					while(l_after_table > 0)
					{
						fprintf(l_report_LETR2,"</BR>\n");
						//fflush(fl_userlog);
						l_after_table --;
					}

					if(strlen(h_report_details_struct.after_table_align) > 0)
					{
						if(strlen(h_report_details_struct.after_table) > 0)
						{		
							fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.after_table_align,h_report_details_struct.after_table);
						//fflush(fl_userlog);
						}
					}
					else
					{
						if(strlen(h_report_details_struct.after_table) > 0)
						{	
							fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.after_table);
						//fflush(fl_userlog);
						}

					}	
		  
					/******** Table Footer note ************************************/
			
					l_table_footer = h_report_details_struct.table_footer_brk;
					if(l_table_footer > 0)
					{
						fprintf(l_report_LETR2,"</BR>\n");
						//fflush(fl_userlog);
						l_table_footer --;
					}
				
					if(strlen(h_report_details_struct.table_footer_align) > 0)
					{
						if(strlen(h_report_details_struct.table_footer) > 0)
						{
							fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",h_report_details_struct.table_footer_align,h_report_details_struct.table_footer);
						//fflush(fl_userlog);
						}
					}
					else
					{
						if(strlen(h_report_details_struct.table_footer) > 0)
						{
							fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",h_report_details_struct.table_footer);
						//fflush(fl_userlog);
						}

					}

					l_table = h_report_main_struct.table_brk;
					if(l_table > 0)
					{
						fprintf(l_report_LETR2,"</BR>\n");
						//fflush(fl_userlog);
						l_table --;
					}

					if(l_fetch_count > 0 )
					{
					
					for(m=0;m<l_complex_num;m++)
					{
						if(m == 0)
						{
							strcpy(l_complex_parameter1,l_complex_val[m]);
							g_complex_parameter1=g_complex_parameter1+atof(l_complex_parameter1);
						}
						else if(m == 1)
						{
							strcpy(l_complex_parameter2,l_complex_val[m]);
							g_complex_parameter2=g_complex_parameter2+atof(l_complex_parameter2);
						}
						else if(m == 2)
						{
							strcpy(l_complex_parameter3,l_complex_val[m]);
							g_complex_parameter3=g_complex_parameter3+atof(l_complex_parameter3);
						}
						else if(m == 3)
						{
							strcpy(l_complex_parameter4,l_complex_val[m]);
							g_complex_parameter4=g_complex_parameter4+atof(l_complex_parameter4);
						}
						else if(m == 4)
						{
							strcpy(l_complex_parameter5,l_complex_val[m]);
							g_complex_parameter5=g_complex_parameter5+atof(l_complex_parameter5);
						}
						else if(m == 5)
						{
							strcpy(l_complex_parameter6,l_complex_val[m]);
							g_complex_parameter6=g_complex_parameter6+atof(l_complex_parameter6);
						}
						else if(m == 6)
						{
							strcpy(l_complex_parameter7,l_complex_val[m]);
							g_complex_parameter7=g_complex_parameter7+atof(l_complex_parameter7);
						}
						else if(m == 7)
						{
							strcpy(l_complex_parameter8,l_complex_val[m]);
							g_complex_parameter8=g_complex_parameter8+atof(l_complex_parameter8);
						}
						else if(m == 8)
						{
							strcpy(l_complex_parameter9,l_complex_val[m]);
							g_complex_parameter9=g_complex_parameter9+atof(l_complex_parameter9);
						}
						else if(m == 9)
						{
							strcpy(l_complex_parameter10,l_complex_val[m]);
							g_complex_parameter10=g_complex_parameter10+atof(l_complex_parameter10);
						}
						else if(m == 10)
						{
							strcpy(l_complex_parameter11,l_complex_val[m]);
							g_complex_parameter11=g_complex_parameter11+atof(l_complex_parameter11);
						}
						else if(m == 11)
						{
							strcpy(l_complex_parameter12,l_complex_val[m]);			
							g_complex_parameter12=g_complex_parameter12+atof(l_complex_parameter12);
						}
						else if(m == 12)
						{
							strcpy(l_complex_parameter13,l_complex_val[m]);
							g_complex_parameter13=g_complex_parameter13+atof(l_complex_parameter13);
						}
						else if(m == 13)
						{
							strcpy(l_complex_parameter14,l_complex_val[m]);
							g_complex_parameter14=g_complex_parameter14+atof(l_complex_parameter14);
						}
						else if(m == 14)
						{
							strcpy(l_complex_parameter15,l_complex_val[m]);
							g_complex_parameter15=g_complex_parameter15+atof(l_complex_parameter15);
						}
						else if(m == 15)
						{
							strcpy(l_complex_parameter16,l_complex_val[m]);
							g_complex_parameter16=g_complex_parameter16+atof(l_complex_parameter16);
						}
						else if(m == 16)
						{
							strcpy(l_complex_parameter17,l_complex_val[m]);
							g_complex_parameter17=g_complex_parameter17+atof(l_complex_parameter17);
						}
						else if(m == 17)
						{
							strcpy(l_complex_parameter18,l_complex_val[m]);
							g_complex_parameter18=g_complex_parameter18+atof(l_complex_parameter18);
						}
						else if(m == 18)
						{
							strcpy(l_complex_parameter19,l_complex_val[m]);
							g_complex_parameter19=g_complex_parameter19+atof(l_complex_parameter19);
						}
						else if(m == 19)
						{
							strcpy(l_complex_parameter20,l_complex_val[m]);
							g_complex_parameter20=g_complex_parameter20+atof(l_complex_parameter20);
						}
					}

					}/*** End Of Fetch Count check ******/

					}/*** End Of Grouping For Loop ******/
					EXEC SQL CLOSE LETR_group;			
				}
				else
				{
		
				/**** Stored procedure for REPORT DETAILS ********************/
				
				fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID 41:|%s|\n",l_rept_id);
				//fflush(fl_userlog);
				printf("Calling Stored Procedure SP_REPORT_DETAIL for Report ID 42:|%s|\n",l_rept_id);
				
				EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
						:l_param2,:l_param3,:l_param4,
						:l_param5,:l_param6,
						:l_table_query,:l_table_query1,:l_table_query2,
						:l_table_query3,:l_table_query4,:l_table_query5,
						:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
						:l_group_desc,:l_error_desc);

				if(strlen(l_table_query) > 0)
				{
			        
				EXEC SQL SELECT REPLACE(:l_table_query,'@GROUP1',:l_letter_group_param),
						REPLACE(:l_table_query1,'@GROUP1',:l_letter_group_param),
						REPLACE(:l_table_query2,'@GROUP1',:l_letter_group_param),
						REPLACE(:l_table_query3,'@GROUP1',:l_letter_group_param),
						REPLACE(:l_table_query4,'@GROUP1',:l_letter_group_param),
						REPLACE(:l_table_query5,'@GROUP1',:l_letter_group_param) 
					INTO :l_table_query,:l_table_query1,:l_table_query2,
                         :l_table_query3,:l_table_query4,:l_table_query5 
					FROM DUAL;

				strcpy(table_query,l_table_query);
				strcat(table_query," ");
				
				if(strlen(l_table_query1) > 0)
				{
					strcat(table_query,l_table_query1);
					strcat(table_query," ");
				}
				if(strlen(l_table_query2) > 0)
				{
					strcat(table_query,l_table_query2);
					strcat(table_query," ");
				}
				if(strlen(l_table_query3) > 0)
				{
					strcat(table_query,l_table_query3);
					strcat(table_query," ");
				}
				if(strlen(l_table_query4) > 0)
				{
					strcat(table_query,l_table_query4);
					strcat(table_query," ");
				}
				if(strlen(l_table_query5) > 0)
				{
					strcat(table_query,l_table_query5);
					strcat(table_query," ");
				}
				
				strcat(table_query,APL_NULL_STRING);



				strcpy(table_query,l_table_query);
				strcat(table_query," ");
				strcat(table_query,l_table_query1);
				strcat(table_query," ");
				strcat(table_query,l_table_query2);
				strcat(table_query,APL_NULL_STRING);
					
				fprintf(fl_userlog," Inside Else Stored Procedure SP_REPORT_DETAIL ORA ERROR :|%d|\n",sqlca.sqlcode);
				 //fflush(fl_userlog);
				if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
				  //fflush(fl_userlog);
				}
				
				/*fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
                 //fflush(fl_userlog);*/

				/****** Before table **********************************************/
				
				if(strlen(h_report_details_struct.before_table_align) > 0)
				{
					if(strlen(h_report_details_struct.before_table) > 0)
					{	
						fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\"ALIGN=\"%s\"  class=\'beforetable\'>%s</TD></TR></TABLE>\n",h_report_details_struct.before_table_align,h_report_details_struct.before_table);
                         //fflush(fl_userlog);
						g_line_count++;
					}
				}
				else
				{
					if(strlen(h_report_details_struct.before_table) > 0)
					{	
						fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\"ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD></TR></TABLE>\n",h_report_details_struct.before_table);
                         //fflush(fl_userlog);
						g_line_count++;
					}

				}	
				
				l_before_table = h_report_details_struct.before_table_brk;
				while(l_before_table > 0)
				{
					fprintf(l_report_LETR2,"</BR>\n");
					//fflush(fl_userlog);
					//fflush(fl_userlog);
					l_before_table --;
					g_line_count++;
				}



				/****** Multiple Column Level **************************************/

				strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
				strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
				strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
				
				fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);
				//fflush(fl_userlog);

				if(strlen(l_multiple_col_flag) > 0)
				{
					fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);
					//fflush(fl_userlog);

					if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
							&l_multiple_col_header_value) == APL_FAILURE)
					{
						 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
						 //fflush(fl_userlog);
						 APL_GOBACK_FAIL
					}

					if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
							&l_multiple_colspan_sep_value) == APL_FAILURE)
					{
						 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
						 //fflush(fl_userlog);
						 APL_GOBACK_FAIL
					}


					fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);
					//fflush(fl_userlog);

					fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" border=\'%s\' cellSpacing=\'0\' cellPadding=\'1\' >\n",g_table_border);
					//fflush(fl_userlog);

					if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
					{
						for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
						{
							for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
							{
						
							if(int_a == int_b )
							{
							
							strcpy(l_level_header,l_multiple_col_header_value[int_a]);
							strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

							fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
							//fflush(fl_userlog);
							fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);
							//fflush(fl_userlog);

							if (CO_SplitStr(l_level_header,
									SEMISEP,
									&l_level_header_no,
									&l_level_header_value) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
								 APL_GOBACK_FAIL
							}

							if (CO_SplitStr(l_level_colspan,
									SEMISEP,
									&l_level_colspan_no,
									&l_level_colspan_value) == APL_FAILURE)
							{
								 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
								 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
								 //fflush(fl_userlog);
								 APL_GOBACK_FAIL
							}

							fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
							//fflush(fl_userlog);
							fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);
							//fflush(fl_userlog);

							if(l_level_header_no == l_level_colspan_no)
							{

							fprintf(l_report_LETR2,"<TR>\n");
							//fflush(fl_userlog);
							for(int_aa=0;int_aa<l_level_header_no;int_aa++)
							{
								for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
								{
									if(int_aa == int_bb)
									{	
									
									strcpy(l_level_column,l_level_header_value[int_aa]);
									strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

									fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
									//fflush(fl_userlog);
									fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
									//fflush(fl_userlog);
									if(strlen(l_level_column) > 0)
									{
										fprintf(l_report_LETR2,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >%s</TD> \n", l_level_col_span,l_level_column);
									//fflush(fl_userlog);
									}
									else
									{
										fprintf(l_report_LETR2,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >&nbsp;</TD> \n", l_level_col_span);
                                        //fflush(fl_userlog);  
									}

									}
								}
							}
							fprintf(l_report_LETR2,"</TR>\n");
							//fflush(fl_userlog);

							}/*** End Of Inner Condition check *****/

							}
							
													
							}/*** End Of 2st Main For Loop *******/

						}/*** End Of 1st Main For Loop *******/

					}/*** End Of Multiple col condition check *****/

					l_column_no=h_report_details_struct.no_of_columns;
					l_no_of_columns = h_report_details_struct.no_of_columns;

				}
				
				
				EXEC SQL PREPARE LETR2_SUB2 FROM :table_query;	
				EXEC SQL DECLARE LETR2tablequery2 CURSOR FOR LETR2_SUB2;
				EXEC SQL OPEN LETR2tablequery2;

				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Error : Open Cursor LETR2tablequery2 ORA ERROR :|%d|\n",sqlca.sqlcode);
					//fflush(fl_userlog);
				}

				l_fetch_count=0;

				for(;;)
				{
					EXEC SQL FETCH LETR2tablequery2
						INTO :l_table_parameter;

					if(sqlca.sqlcode == 1403)
					{
						fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
						if(l_fetch_count == 0)
						{
							fprintf(l_report_LETR2,"<TR>\n");
							//fflush(fl_userlog);
							fprintf(l_report_LETR2,"<TD WIDTH=\'100%%\' COLSPAN=\'%d\' class=\'ez4\'>NO RECORDS FOUND </TD>\n",l_column_no);
							//fflush(fl_userlog);
							fprintf(l_report_LETR2,"</TR>\n");
							//fflush(fl_userlog);
								
							l_remove_count ++;
							g_line_count++;
						}
						break;
					}

					if(sqlca.sqlcode < 0)
					{
					   fprintf(fl_userlog,"Error : Fetch Cursor LETR2tablequery2 --- ORA ERROR:|%d|\n",sqlca.sqlcode);
					   //fflush(fl_userlog);
					   break;
					}


					strcpy(l_column_parameter,l_table_parameter);
					
					/******* Split the string and fetch the column data *********/
				
					if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
					{
						CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
						//fflush(fl_userlog);
						APL_GOBACK_FAIL
					}

					/***** For Number Formatting ******************************************/

					strcpy(l_format_col_pos,h_report_details_struct.format_col_pos);
					if (CO_SplitStr(l_format_col_pos,COMASEP,&l_format_col_no,&l_format_col_val) == APL_FAILURE)
					{
						 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_format_col_pos);
						 //fflush(fl_userlog);
						 APL_GOBACK_FAIL
					}

					fprintf(l_report_LETR2,"<TR>\n");
					//fflush(fl_userlog);

					for(j=0;j<l_column_num;j++)
					{
						strcpy(l_column,l_column_val[j]);
						
						l_format_col_flag = 0;
						if(l_format_col_no > 0)
						{
							for (k=0;k<l_format_col_no;k++)
							{
								strcpy(l_format_col_value,l_format_col_val[k]);

								if(j==(atoi(l_format_col_value)-1))
									l_format_col_flag = 1;
							}

							if((strlen(l_column) > 0) && (strcmp(l_column," ")))
							{
								if(l_format_col_flag == 1)
								{
									EXEC SQL CALL SP_NUMBER_FORMATTING(:l_column,:l_error_desc);

									if(strlen(l_error_desc) > 0)
									{
										fprintf(l_report_LETR2,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
										//fflush(fl_userlog);
									}
									else
									{
										fprintf(l_report_LETR2,"<TD class=\'record\' ALIGN=\"RIGHT\">%s</TD>\n",l_column);
										//fflush(fl_userlog);
									}
								}
								else
								{
									fprintf(l_report_LETR2,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
									//fflush(fl_userlog);
								}
							}
							else
							{
								 fprintf(l_report_LETR2,"<TD class=\'record\'  >&nbsp</TD>\n");
								 //fflush(fl_userlog);
							}

						}
						else
						{
							if((strlen(l_column) > 0) && (strcmp(l_column," ")))
							{
								fprintf(l_report_LETR2,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
								//fflush(fl_userlog);
								}
							else
							{
								fprintf(l_report_LETR2,"<TD class=\'record\'  >&nbsp</TD>\n");
								//fflush(fl_userlog);
								}
						}

					}
					fprintf(l_report_LETR2,"</TR>\n");
					//fflush(fl_userlog);

					/*********************************************************************/

					l_fetch_count ++;

				}
				EXEC SQL CLOSE LETR2tablequery2;

				
				/******* Complex Criteria Part *********************************************/


				strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
				strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
				strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
				strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

				fprintf(fl_userlog,"Before Complex Part -- l_fetch_count 11:|%d|\n",l_fetch_count);
				//fflush(fl_userlog);

				if(l_fetch_count > 0)
				{

				if(strlen(complex_criteria_query) > 0)
				{
				
				EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
						:complex_criteria_query,
						'@PARAM1',:l_param1),
						'@PARAM2',:l_param2),
						'@PARAM3',:l_param3),
						'@PARAM4',:l_param4),
						'@PARAM5',:l_param5),
						'@PARAM6',:l_param6),
						'@GROUP1',:l_letter_group_param),
						REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
						:complex_criteria_query1,
						'@PARAM1',:l_param1),
						'@PARAM2',:l_param2),
						'@PARAM3',:l_param3),
						'@PARAM4',:l_param4),
						'@PARAM5',:l_param5),
						'@PARAM6',:l_param6),
						'@GROUP1',:l_letter_group_param)
					INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;
				
				strcat(complex_criteria_query,complex_criteria_query1);

				fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);
				//fflush(fl_userlog);

				EXEC SQL PREPARE LTR_CMPX_CURR FROM :complex_criteria_query;

				EXEC SQL DECLARE LTR_complex_curr CURSOR FOR LTR_CMPX_CURR;

				fprintf(fl_userlog,"After DECLARE LTR_complex_curr :|%d|\n",sqlca.sqlcode);
				//fflush(fl_userlog);

				EXEC SQL OPEN LTR_complex_curr;

				EXEC SQL FETCH LTR_complex_curr INTO :l_complex_parameter;

				fprintf(fl_userlog,"After FETCH LTR_complex_curr :|%d|\n",sqlca.sqlcode);
				//fflush(fl_userlog);

				EXEC SQL CLOSE LTR_complex_curr;

				fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);
				//fflush(fl_userlog);

				if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
				{
					CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
					APL_GOBACK_FAIL
				}
				
				fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);
				//fflush(fl_userlog);

				if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
				{
					CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
					APL_GOBACK_FAIL
				}


				fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);
                  //fflush(fl_userlog);
				l_complex_break_flag = 0;

				
				if(l_complex_num == l_complex_pos_num)
				{

				fprintf(l_report_LETR2,"<TR>\n");
				//fflush(fl_userlog);

				for(i=0;i<l_column_num;i++)
				{
					for(j=0;j<l_complex_pos_num;j++)
					{

					strcpy(l_complex_pos_column,l_complex_pos_val[j]);

					if((i==0)&&(j==0))
					{
						if(strlen(complex_criteria_label) > 0)
						{
							fprintf(l_report_LETR2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" >%s</TD>\n",complex_criteria_label);
							//fflush(fl_userlog);
							l_complex_break_flag=1;
						}
						else
						{
						fprintf(l_report_LETR2,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
						//fflush(fl_userlog);
						}
					}

					if(i== (atoi(l_complex_pos_column)-1))
					{				  
					  strcpy(l_complex_column,l_complex_val[j]);

					  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);
					  //fflush(fl_userlog);

					  l_complex_break_flag=1;
					  
					  if(strlen(l_complex_column) > 0)
					  {
						  EXEC SQL CALL SP_NUMBER_FORMATTING(:l_complex_column,:l_error_desc);

						  if(strlen(l_error_desc) > 0)
                          {						  
							fprintf(l_report_LETR2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">%s</TD>\n",l_complex_column);
							//fflush(fl_userlog);
							}
						  else
						  {
							fprintf(l_report_LETR2,"<TD class=\'lableredbg\' ALIGN=\"RIGHT\">%s</TD>\n",l_complex_column);
							//fflush(fl_userlog);
							}
					  }
					  else
					  {
							fprintf(l_report_LETR2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">&nbsp;</TD>\n");
							//fflush(fl_userlog);
					  }
					
					  break;
					}
					else
					{
					     l_complex_break_flag = 0;
					     continue;
					} 

					}
					     
					if(i != 0)
					{
					  if(l_complex_break_flag != 1)
					     fprintf(l_report_LETR2,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
						 //fflush(fl_userlog);
					}
				}

				}
				else
				{
					fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
					//fflush(fl_userlog);
				}

				fprintf(l_report_LETR2,"</TR>\n");
				//fflush(fl_userlog);

				}

				}
				else
				{			
					fprintf(fl_userlog," No Records Found -- So No Need To Display Criteria \n");
					//fflush(fl_userlog);
				}
				

				/***************************************************************************/
						
				fprintf(l_report_LETR2,"</TABLE>\n");
				//fflush(fl_userlog);

				/****** After table ********************************************************/
				
				l_after_table = h_report_details_struct.after_table_brk;
				while(l_after_table > 0)
				{
					fprintf(l_report_LETR2,"</BR>\n");
					//fflush(fl_userlog);
					l_after_table --;
					g_line_count++;
				}

				if(strlen(h_report_details_struct.after_table_align) > 0)
				{
					if(strlen(h_report_details_struct.after_table) > 0)
					{	
						fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'beforetable\'>%s</TD></TR></TABLE>\n",h_report_details_struct.after_table_align,h_report_details_struct.after_table);
                        //fflush(fl_userlog);
						g_line_count++;
					}
				}
				else
				{
					if(strlen(h_report_details_struct.after_table) > 0)
					{	
						fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD></TR></TABLE>\n",h_report_details_struct.after_table);
                         //fflush(fl_userlog);
						g_line_count++;
					}

				}	
		  
				/************ Table Footer note *************************************/
			
				l_table_footer = h_report_details_struct.table_footer_brk;
				if(l_table_footer > 0)
				{
					fprintf(l_report_LETR2,"</BR>\n");
					//fflush(fl_userlog);
					l_table_footer --;
					g_line_count++;
				}
				
				if(strlen(h_report_details_struct.table_footer_align) > 0)
				{
					if(strlen(h_report_details_struct.table_footer) > 0)
					{
						fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'lableredbg\'>%s</TD></TR></TABLE>\n",h_report_details_struct.table_footer_align,h_report_details_struct.table_footer);
                         //fflush(fl_userlog);
						g_line_count++;
					}
				}
				else
				{
					if(strlen(h_report_details_struct.table_footer) > 0)
					{
						fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'lableredbg\'>%s</TD></TR></TABLE>\n",h_report_details_struct.table_footer);
                          //fflush(fl_userlog);
						g_line_count++;
					}

				}

				l_table = h_report_main_struct.table_brk;
				if(l_table > 0)
				{
					fprintf(l_report_LETR2,"</BR>\n");
					//fflush(fl_userlog);
					l_table --;
					g_line_count++;
				}

				if( l_fetch_count > 0 )
				{
					for(m=0;m<l_complex_num;m++)
					{
						if(m == 0)
						{
							strcpy(l_complex_parameter1,l_complex_val[m]);
							g_complex_parameter1=atof(l_complex_parameter1);
						}
						else if(m == 1)
						{
							strcpy(l_complex_parameter2,l_complex_val[m]);
							g_complex_parameter2=atof(l_complex_parameter2);
						}
						else if(m == 2)
						{
							strcpy(l_complex_parameter3,l_complex_val[m]);
							g_complex_parameter3=atof(l_complex_parameter3);
						}
						else if(m == 3)
						{
							strcpy(l_complex_parameter4,l_complex_val[m]);
							g_complex_parameter4=atof(l_complex_parameter4);
						}
						else if(m == 4)
						{
							strcpy(l_complex_parameter5,l_complex_val[m]);
							g_complex_parameter5=atof(l_complex_parameter5);
						}
						else if(m == 5)
						{
							strcpy(l_complex_parameter6,l_complex_val[m]);
							g_complex_parameter6=atof(l_complex_parameter6);
						}
						else if(m == 6)
						{
							strcpy(l_complex_parameter7,l_complex_val[m]);
							g_complex_parameter7=atof(l_complex_parameter7);
						}
						else if(m == 7)
						{
							strcpy(l_complex_parameter8,l_complex_val[m]);
							g_complex_parameter8=atof(l_complex_parameter8);
						}
						else if(m == 8)
						{
							strcpy(l_complex_parameter9,l_complex_val[m]);
							g_complex_parameter9=atof(l_complex_parameter9);
						}
						else if(m == 9)
						{
							strcpy(l_complex_parameter10,l_complex_val[m]);
							g_complex_parameter10=atof(l_complex_parameter10);
						}
						else if(m == 10)
						{
							strcpy(l_complex_parameter11,l_complex_val[m]);
							g_complex_parameter11=atof(l_complex_parameter11);
						}
						else if(m == 11)
						{
							strcpy(l_complex_parameter12,l_complex_val[m]);			
							g_complex_parameter12=atof(l_complex_parameter12);
						}
						else if(m == 12)
						{
							strcpy(l_complex_parameter13,l_complex_val[m]);
							g_complex_parameter13=atof(l_complex_parameter13);
						}
						else if(m == 13)
						{
							strcpy(l_complex_parameter14,l_complex_val[m]);
							g_complex_parameter14=atof(l_complex_parameter14);
						}
						else if(m == 14)
						{
							strcpy(l_complex_parameter15,l_complex_val[m]);
							g_complex_parameter15=atof(l_complex_parameter15);
						}
						else if(m == 15)
						{
							strcpy(l_complex_parameter16,l_complex_val[m]);
							g_complex_parameter16=atof(l_complex_parameter16);
						}
						else if(m == 16)
						{
							strcpy(l_complex_parameter17,l_complex_val[m]);
							g_complex_parameter17=atof(l_complex_parameter17);
						}
						else if(m == 17)
						{
							strcpy(l_complex_parameter18,l_complex_val[m]);
							g_complex_parameter18=atof(l_complex_parameter18);
						}
						else if(m == 18)
						{
							strcpy(l_complex_parameter19,l_complex_val[m]);
							g_complex_parameter19=atof(l_complex_parameter19);
						}
						else if(m == 19)
						{
							strcpy(l_complex_parameter20,l_complex_val[m]);
							g_complex_parameter20=atof(l_complex_parameter20);
						}

					}/*** End of Complex For Loop ***/

				}/*** End Of Fetch Count Check ****/

				}/*** End Of Table Query check ****/

				}/******* End Of Grouping Else Block **********/


				/*************** Complex Criteria Individual  **********/
					
				if(l_fetch_count > 0 )
				{
					fprintf(fl_userlog,"g_complex_parameter1 :|%lf|\tg_complex_parameter2 :|%lf|\n",g_complex_parameter1,g_complex_parameter2);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"g_complex_parameter3 :|%lf|\tg_complex_parameter4 :|%lf|\n",g_complex_parameter3,g_complex_parameter4);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"g_complex_parameter5 :|%lf|\tg_complex_parameter6 :|%lf|\n",g_complex_parameter5,g_complex_parameter6);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"g_complex_parameter7 :|%lf|\tg_complex_parameter8 :|%lf|\n",g_complex_parameter7,g_complex_parameter8);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"g_complex_parameter9 :|%lf|\tg_complex_parameter10 :|%lf|\n",g_complex_parameter9,g_complex_parameter10);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"g_complex_parameter11 :|%lf|\tg_complex_parameter12 :|%lf|\n",g_complex_parameter11,g_complex_parameter12);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"g_complex_parameter13 :|%lf|\tg_complex_parameter14 :|%lf|\n",g_complex_parameter13,g_complex_parameter14);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"g_complex_parameter15 :|%lf|\tg_complex_parameter16 :|%lf|\n",g_complex_parameter15,g_complex_parameter16);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"g_complex_parameter17 :|%lf|\tg_complex_parameter18 :|%lf|\n",g_complex_parameter17,g_complex_parameter18);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"g_complex_parameter19 :|%lf|\tg_complex_parameter20 :|%lf|\n",g_complex_parameter19,g_complex_parameter20);
				    //fflush(fl_userlog);
				}



				/****** Dynamic Footer Display ******************/

				strcpy(footer_query,h_report_details_struct.footer_query);
				
				if(strlen(footer_query) > 0)
				{

				/**** Stored Procedure : SP_REPORT_FOOTER ***********************************/

				fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
				//fflush(fl_userlog);
				printf("Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
				//fflush(fl_userlog);
				EXEC SQL CALL SP_REPORT_FOOTER(:l_rept_id,:l_table_id,:l_param1,:l_param2,
							:l_param3,:l_param4, :l_param5,
							:l_param6,:l_footer_query,:l_footer_query1,:l_error_desc); 

				
				EXEC SQL SELECT REPLACE(:l_footer_query,'@GROUP1',:l_letter_group_param),
						REPLACE(:l_footer_query1,'@GROUP1',:l_letter_group_param)
					 INTO :l_footer_query,:l_footer_query1
					 FROM DUAL;

				strcat(l_footer_query,l_footer_query1);

				if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER ERR DESC :|%s|\n",l_error_desc);
					//fflush(fl_userlog);
				}

				fprintf(fl_userlog,"FOOTER QUERY :|%s|\n",l_footer_query);
				//fflush(fl_userlog);

				strcpy(l_footer_query_value,APL_NULL_STRING);

				EXEC SQL PREPARE LTR_FOOTER_CURR FROM :l_footer_query;

				EXEC SQL DECLARE LTR_footer_curr CURSOR FOR LTR_FOOTER_CURR;
				
				fprintf(fl_userlog,"After DECLARE LTR_footer_curr :|%d|\n",sqlca.sqlcode);
				//fflush(fl_userlog);

				EXEC SQL OPEN LTR_footer_curr;

				EXEC SQL FETCH LTR_footer_curr INTO :l_footer_query_value;
				fprintf(fl_userlog,"After FETCH LTR_footer_curr :|%d|\n",sqlca.sqlcode);
				//fflush(fl_userlog);

				EXEC SQL CLOSE LTR_footer_curr;

				fprintf(fl_userlog,"l_footer_query_value :|%s|\n",l_footer_query_value);
				//fflush(fl_userlog);

				l_footer_num = 0;

				strcpy(l_footer1,APL_NULL_STRING);
				strcpy(l_footer2,APL_NULL_STRING);
				strcpy(l_footer3,APL_NULL_STRING);
				strcpy(l_footer4,APL_NULL_STRING);
				strcpy(l_footer5,APL_NULL_STRING);
				strcpy(l_footer6,APL_NULL_STRING);
				strcpy(l_footer7,APL_NULL_STRING);
				strcpy(l_footer8,APL_NULL_STRING);
				strcpy(l_footer9,APL_NULL_STRING);
				strcpy(l_footer10,APL_NULL_STRING);
				strcpy(l_footer11,APL_NULL_STRING);
				strcpy(l_footer12,APL_NULL_STRING);
				strcpy(l_footer13,APL_NULL_STRING);
				strcpy(l_footer14,APL_NULL_STRING);
				strcpy(l_footer15,APL_NULL_STRING);

				if(strlen(l_footer_query_value) > 0)
				{
				
					if (CO_SplitStr(l_footer_query_value,CAPSEP,&l_footer_num,&l_footer_val) == APL_FAILURE)
					{
						CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_footer_query_value);
						//fflush(fl_userlog);
						APL_GOBACK_FAIL
					}

					fprintf(fl_userlog,"l_footer_num :|%d|\n",l_footer_num);
					//fflush(fl_userlog);
					if(l_footer_num > 0)
					{
						for(i=0;i<l_footer_num;i++)
						{
							if(i == 0)
							strcpy(l_footer1,l_footer_val[i]);
							else if(i == 1)
							strcpy(l_footer2,l_footer_val[i]);
							else if(i == 2)
							strcpy(l_footer3,l_footer_val[i]);
							else if(i == 3)
							strcpy(l_footer4,l_footer_val[i]);
							else if(i == 4)
							strcpy(l_footer5,l_footer_val[i]);
							else if(i == 5)
							strcpy(l_footer6,l_footer_val[i]);
							else if(i == 6)
							strcpy(l_footer7,l_footer_val[i]);
							else if(i == 7)
							strcpy(l_footer8,l_footer_val[i]);
							else if(i == 8)
							strcpy(l_footer9,l_footer_val[i]);
							else if(i == 9)
							strcpy(l_footer10,l_footer_val[i]);
							else if(i == 10)
							strcpy(l_footer11,l_footer_val[i]);
							else if(i == 11)
							strcpy(l_footer12,l_footer_val[i]);
							else if(i == 12)
							strcpy(l_footer13,l_footer_val[i]);
							else if(i == 13)
							strcpy(l_footer14,l_footer_val[i]);
							else if(i == 14)
							strcpy(l_footer15,l_footer_val[i]);
						}
					}

				}/***************** End Of footer Value Check ************************/

				/****** Stored Procedure : SP_REPORT_FOOTER_DATA ****************/

				fprintf(fl_userlog,"l_footer1 :|%s|\t l_footer2 :|%s|\n",l_footer1,l_footer2);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_footer3 :|%s|\t l_footer4 :|%s|\n",l_footer3,l_footer4);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_footer5 :|%s|\t l_footer6 :|%s|\n",l_footer5,l_footer6);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_footer7 :|%s|\t l_footer8 :|%s|\n",l_footer7,l_footer8);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_footer9 :|%s|\t l_footer10 :|%s|\n",l_footer9,l_footer10);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_footer11 :|%s|\t l_footer12 :|%s|\n",l_footer11,l_footer12);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_footer13 :|%s|\t l_footer14 :|%s|\n",l_footer13,l_footer14);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_footer15 :|%s|\n",l_footer15);
				//fflush(fl_userlog);

				fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);	
				//fflush(fl_userlog);
				printf("Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);		
				//fflush(fl_userlog);
				EXEC SQL CALL SP_REPORT_FOOTER_DATA(:l_rept_id,:l_table_id,
									:l_footer1,:l_footer2,
									:l_footer3,:l_footer4,
									:l_footer5,:l_footer6,
									:l_footer7,:l_footer8,
									:l_footer9,:l_footer10,
									:l_footer11,:l_footer12,
									:l_footer13,:l_footer14,
									:l_footer15,
									:g_complex_parameter1,:g_complex_parameter2,
									:g_complex_parameter3,:g_complex_parameter4,
									:g_complex_parameter5,:g_complex_parameter6,
									:g_complex_parameter7,:g_complex_parameter8,
									:g_complex_parameter9,:g_complex_parameter10,
									:g_complex_parameter11,:g_complex_parameter12,
									:g_complex_parameter13,:g_complex_parameter14,
									:g_complex_parameter15,:g_complex_parameter16,
									:g_complex_parameter17,:g_complex_parameter18,
									:g_complex_parameter19,:g_complex_parameter20,
									:l_footer_data,:l_error_desc);

				if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER_DATA ERR DESC :|%s|\n",l_error_desc);
					//fflush(fl_userlog);
				}

				fprintf(fl_userlog,"FOOTER DATA :|%s|\n",l_footer_data);
				//fflush(fl_userlog);

				/************ Dynamic Formating Procedure **********************/
				
				fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);	
				//fflush(fl_userlog);
				printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);
                //fflush(fl_userlog);				
				
				EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_footer_data,:l_error_desc); 

				if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
					//fflush(fl_userlog);
				}

				fprintf(fl_userlog,"FOOTER DATA After Formatting -- :|%s|\n",l_footer_data);
				//fflush(fl_userlog);


				/*****************************************************************/

				/************ Dynamic Footer Data Display ************************/
				
				fprintf(fl_userlog,"strlen(l_footer_data) :|%d|\n",strlen(l_footer_data));
                 //fflush(fl_userlog);
				if(strlen(l_footer_data) > 0)
				{
					fprintf(fl_userlog,"Displaying Footer Data --- \n");
                     //fflush(fl_userlog);
					fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\"><TR>\n");
					//fflush(fl_userlog);
					fprintf(l_report_LETR2,"<TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'headerdata\'>%s</TD>\n",h_report_details_struct.footer_data_align,l_footer_data);
					//fflush(fl_userlog);
					fprintf(l_report_LETR2,"</TR></TABLE>\n");
					//fflush(fl_userlog);
				}

				l_footer_data_brk = h_report_details_struct.footer_data_brk;
				while(l_footer_data_brk > 0)
				{
					fprintf(l_report_LETR2,"</BR>\n");
					//fflush(fl_userlog);
					l_footer_data_brk --;
					g_line_count++;
				}		
				}

				/***************** End Of Dynamic Footer Display  ***********************/

				/***************** Final Complex Criteria Calculation **********************/

				fprintf(fl_userlog,"\n--- l_table_id --- 13:|%d|\n",l_table_id);
				//fflush(fl_userlog);

				if(l_table_id == 1)
				{
					f_complex_parameter1=f_complex_parameter1+g_complex_parameter1;
					f_complex_parameter2=f_complex_parameter2+g_complex_parameter2;
					f_complex_parameter3=f_complex_parameter3+g_complex_parameter3;
					f_complex_parameter4=f_complex_parameter4+g_complex_parameter4;
					f_complex_parameter5=f_complex_parameter5+g_complex_parameter5;
					f_complex_parameter6=f_complex_parameter6+g_complex_parameter6;
					f_complex_parameter7=f_complex_parameter7+g_complex_parameter7;
					f_complex_parameter8=f_complex_parameter8+g_complex_parameter8;
					f_complex_parameter9=f_complex_parameter9+g_complex_parameter9;
					f_complex_parameter10=f_complex_parameter10+g_complex_parameter10;
					f_complex_parameter11=f_complex_parameter11+g_complex_parameter11;
					f_complex_parameter12=f_complex_parameter12+g_complex_parameter12;
					f_complex_parameter13=f_complex_parameter13+g_complex_parameter13;
					f_complex_parameter14=f_complex_parameter14+g_complex_parameter14;
					f_complex_parameter15=f_complex_parameter15+g_complex_parameter15;
					f_complex_parameter16=f_complex_parameter16+g_complex_parameter16;
					f_complex_parameter17=f_complex_parameter17+g_complex_parameter17;
					f_complex_parameter18=f_complex_parameter18+g_complex_parameter18;
					f_complex_parameter19=f_complex_parameter19+g_complex_parameter19;
					f_complex_parameter20=f_complex_parameter20+g_complex_parameter20;
				}

				/**************************************************************************/


			/********* Grand Complex Criteria Display ******************************/
				
			fprintf(fl_userlog,"f_complex_parameter1 :|%lf|\tf_complex_parameter2 :|%lf|\n",f_complex_parameter1,f_complex_parameter2);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"f_complex_parameter3 :|%lf|\tf_complex_parameter4 :|%lf|\n",f_complex_parameter3,f_complex_parameter4);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"f_complex_parameter5 :|%lf|\tf_complex_parameter6 :|%lf|\n",f_complex_parameter5,f_complex_parameter6);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"f_complex_parameter7 :|%lf|\tf_complex_parameter8 :|%lf|\n",f_complex_parameter7,f_complex_parameter8);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"f_complex_parameter9 :|%lf|\tf_complex_parameter10 :|%lf|\n",f_complex_parameter9,f_complex_parameter10);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"f_complex_parameter11 :|%lf|\tf_complex_parameter12 :|%lf|\n",f_complex_parameter11,f_complex_parameter12);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"f_complex_parameter13 :|%lf|\tf_complex_parameter14 :|%lf|\n",f_complex_parameter13,f_complex_parameter14);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"f_complex_parameter15 :|%lf|\tf_complex_parameter16 :|%lf|\n",f_complex_parameter15,f_complex_parameter16);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"f_complex_parameter17 :|%lf|\tf_complex_parameter18 :|%lf|\n",f_complex_parameter17,f_complex_parameter18);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"f_complex_parameter19 :|%lf|\tf_complex_parameter20 :|%lf|\n",f_complex_parameter19,f_complex_parameter20);
			//fflush(fl_userlog);

			strcpy(complex_criteria,h_report_details_struct.complex_criteria);

			fprintf(fl_userlog,"strlen(complex_criteria) :|%d|\n",strlen(complex_criteria));
			//fflush(fl_userlog);

			if(strlen(complex_criteria) > 0 )
			{
				fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_CRITERIA :|%s|\n",l_rept_id);
				//fflush(fl_userlog);
				printf("Calling Stored Procedure SP_REPORT_CRITERIA :|%s|\n",l_rept_id);	
				//fflush(fl_userlog);
				EXEC SQL CALL SP_REPORT_CRITERIA(:complex_criteria,
								 :f_complex_parameter1,:f_complex_parameter2,
								 :f_complex_parameter3,:f_complex_parameter4,
								 :f_complex_parameter5,:f_complex_parameter6,
								 :f_complex_parameter7,:f_complex_parameter8,
								 :f_complex_parameter9,:f_complex_parameter10,
								 :f_complex_parameter11,:f_complex_parameter12,
								 :f_complex_parameter13,:f_complex_parameter14,
								 :f_complex_parameter15,:f_complex_parameter16,
								 :f_complex_parameter17,:f_complex_parameter18,
								 :f_complex_parameter19,:f_complex_parameter20,
								 :l_complex_criteria_data,:l_error_desc); 

				if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_CRITERIA ERR DESC :|%s|\n",l_error_desc);
					//fflush(fl_userlog);
				}

				fprintf(fl_userlog,"COMPLEX CRITERIA DATA :|%s|\n",l_complex_criteria_data);
                 //fflush(fl_userlog);
				/************ Dynamic Formating Procedure ********************/
				
				fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);	
				//fflush(fl_userlog);
				printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);
				//fflush(fl_userlog);
				
				EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_complex_criteria_data,:l_error_desc); 

				if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
				{
					fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
					//fflush(fl_userlog);
				}

				fprintf(fl_userlog,"COMPLEX CRITERIA DATA After Formatting -- :|%s|\n",l_complex_criteria_data);
				//fflush(fl_userlog);


				/****************************************************************/

				/************ COMPLEX CRITERIA DATA Display ********************/
				
				fprintf(fl_userlog,"strlen(l_complex_criteria_data) :|%d|\n",strlen(l_complex_criteria_data));
				//fflush(fl_userlog);

				if(strlen(l_complex_criteria_data) > 0)
				{
					fprintf(fl_userlog,"Displaying l_complex_criteria_data Data --- \n");
                     //fflush(fl_userlog);   
					fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\"><TR>\n");
					//fflush(fl_userlog);
					fprintf(l_report_LETR2,"<TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'headerdata\'>%s</TD>\n",l_complex_criteria_data);
					//fflush(fl_userlog);
					fprintf(l_report_LETR2,"</TR></TABLE>\n");
					//fflush(fl_userlog);
				}

			}

				/******************************************************/

				l_table_id ++;

				}



				/******* Page Footer note ****************************/
					
				if(strlen(h_report_main_struct.page_footer_align) > 0)
				{
					if(strlen(h_report_main_struct.page_footer) > 0)
					{
						fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" class=\'footer\'><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'footer\'>%s</TD><TR></TABLE>\n",h_report_main_struct.page_footer_align,h_report_main_struct.page_footer);
					//fflush(fl_userlog);
					}
				}
				else
				{
					if(strlen(h_report_main_struct.page_footer) > 0)
					{
						fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" class=\'footer\'><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'footer\'>%s</TD><TR></TABLE>\n",h_report_main_struct.page_footer);
					//fflush(fl_userlog);
					}

				}

				l_page_footer = h_report_main_struct.page_footer_brk;
				if(l_page_footer > 0)
				{
					fprintf(l_report_LETR2,"</BR>\n");
					//fflush(fl_userlog);
					l_page_footer --;
				}
				
				
				/******* Disclaimer *****************************************/
					
				if(strlen(h_report_main_struct.disclaimer) > 0)
				{
					fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" class=\'footer\'><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'footer\'>%s</TD><TR></TABLE>\n",h_report_main_struct.disclaimer);
                     //fflush(fl_userlog);
				}

				/***********************************************************/


				/********** Letter Page Break Part *******************/
				
				fprintf(l_report_LETR2,"<H3>&nbsp;</H3>");
				//fflush(fl_userlog);

				/*****************************************************/

				l_report_final_flag ++;

			}/**** End Of Record Count Check Part *************/

			}/**** end Of Letter Group cursor *****************/

			EXEC SQL CLOSE letter_group_curr;

	}/****** End Of Letter Group Query ***********/

	}/***** End Of Letter Group Flag check ********/
	else
	{

		/********************* Record Count Query Part *****************************/
				
		EXEC SQL SELECT COUNT(TABLE_ID) INTO :l_table_numbers 
				 FROM REPORT_DETAILS
				 WHERE REPORT_ID=:l_rept_id;
		
		fprintf(fl_userlog,"AFTER COUNT(TABLE_ID) -- ORA Error 897:|%d|\n",sqlca.sqlcode);
		//fflush(fl_userlog);

		fprintf(fl_userlog,"l_table_numbers 897:|%d|\n",l_table_numbers);
		//fflush(fl_userlog);

		l_table_num = 1 ;

		l_record_count_flag = 0;

		l_record_count = 0;

		while(l_table_num <= l_table_numbers)
		{
			EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									RECORD_COUNT_QUERY,'@PARAM1',:l_param1),
													   '@PARAM2',:l_param2),
													   '@PARAM3',:l_param3),
													   '@PARAM4',:l_param4),
													   '@PARAM5',:l_param5),
													   '@PARAM6',:l_param6),
													   '@GROUP1',:l_letter_group_param),
							REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
									RECORD_COUNT_QUERY1,'@PARAM1',:l_param1),
													   '@PARAM2',:l_param2),
													   '@PARAM3',:l_param3),
													   '@PARAM4',:l_param4),
													   '@PARAM5',:l_param5),
													   '@PARAM6',:l_param6),
													   '@GROUP1',:l_letter_group_param) 
					  INTO :l_record_count_query,:l_record_count_query1
					  FROM REPORT_DETAILS 
					  WHERE REPORT_ID=:l_rept_id 
					  AND TABLE_ID = :l_table_num;

			fprintf(fl_userlog,"AFTER RECORD_COUNT_QUERY Select -- ORA Error :|%d|\n",sqlca.sqlcode);
			//fflush(fl_userlog);


			strcpy(l_record_count_query_final,l_record_count_query);
			strcat(l_record_count_query_final,l_record_count_query1);

			fprintf(fl_userlog,"l_record_count_query_final :|%s|\n",l_record_count_query_final);
			//fflush(fl_userlog);

			if(strlen(l_record_count_query_final) > 0)
			{

				EXEC SQL PREPARE LTR2_RECORD_COUNT2 FROM :l_record_count_query_final;

				EXEC SQL DECLARE ltr2_record_count_curr2 CURSOR FOR LTR2_RECORD_COUNT2;

				EXEC SQL OPEN  ltr2_record_count_curr2;

				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Error : Failed To OPEN ltr2_record_count_curr2 CURSOR -- ORA Error :|%d|\n",sqlca.sqlcode);
					//fflush(fl_userlog);
					l_record_count_flag = 0;
				}

				EXEC SQL FETCH ltr2_record_count_curr2 INTO :l_record_count;

				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Error : Failed To FETCH ltr2_record_count_curr2 CURSOR -- ORA Error :|%d|\n",sqlca.sqlcode);
					//fflush(fl_userlog);
					l_record_count_flag = 0;
				}

				EXEC SQL CLOSE ltr2_record_count_curr2;

			}


			fprintf(fl_userlog,"l_record_count :|%d|\n",l_record_count);
			//fflush(fl_userlog);
			if(l_record_count > 0)
				l_record_count_flag = 1;

			l_table_num ++;

		}

 
	fprintf(fl_userlog,"RECORD COUNT FLAG :|%d|\n",l_record_count_flag);
	//fflush(fl_userlog);
	printf("RECORD COUNT FLAG :|%d|\n",l_record_count_flag);
//fflush(fl_userlog);
   /***********************************************************************************/

	if((l_record_count_flag == 1)||(strlen(l_record_count_query_final) == 0))
	{
		fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" class=\'heading\'><TR>\n");
		//fflush(fl_userlog);

		/***** Image path *******************************************************/

		fprintf(fl_userlog,"Before Image :- Compress Flag :|%s|\n",l_compress_flag);
		//fflush(fl_userlog);

		if(strlen(h_report_main_struct.image_path) > 0)
		{
			fprintf(l_report_LETR2,"<TD WIDTH=\"20%%\" ALIGN=\"LEFT\"><IMG id=\"image\" SRC=\"%s\" ALIGN=\"LEFT\" HEIGHT=\"60\" WIDTH=\"150\"/></TD>\n", h_report_main_struct.image_path);
		//fflush(fl_userlog);
		}



		/********* Letter Header Display ******************************************/

		EXEC SQL SELECT CA_IDENTNAME||'</BR>'||REPLACE(CA_ADDRESS,'|','</BR>') 
				 INTO :l_letter_header FROM MT_COMMON_SYS_PARAMS;

		fprintf(fl_userlog,"After Letter Address ORA ERROR :|%d|\n",sqlca.sqlcode );
		//fflush(fl_userlog);

		if(strlen(h_report_main_struct.page_hdr_align) > 0)
		{
			if(strlen(h_report_main_struct.page_header) > 0 )
			{
				fprintf(l_report_LETR2,"<TD WIDTH=\"80%%\" ALIGN=\"%s\" class=\'heading\'><I>%s</I></TD>\n", h_report_main_struct.page_hdr_align,l_letter_header);
			//fflush(fl_userlog);
			}
		}
		else
		{
			if(strlen(h_report_main_struct.page_header) > 0 )
			{
				fprintf(l_report_LETR2,"<TR><TD WIDTH=\"80%%\" ALIGN=\"LEFT\" class=\'heading\'><I>%s</I></TD>\n",l_letter_header);
				//fflush(fl_userlog);
			}

		}

		fprintf(l_report_LETR2,"</TR></TABLE>\n");
		//fflush(fl_userlog);

		/*************************************************************************************/

		
		l_page_header = h_report_main_struct.page_hdr_brk;	
		while(l_page_header > 0 )
		{
			fprintf(l_report_LETR2,"</BR>\n");	
          //fflush(fl_userlog);			
			l_page_header -- ;
			g_line_count++;
		}
		

		fprintf(l_report_LETR2,"</BR>\n");
		//fflush(fl_userlog);
		g_line_count++;

			
		/******* Initialize @PARAM1 ****************************/
		
		strcpy(l_param1,l_client);	

		
		fprintf(fl_userlog,"l_rept_id:|%s|\n",l_rept_id);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_param1:|%s|\t l_param2:|%s|\n",l_param1,l_param2);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_param3:|%s|\t l_param4:|%s|\n",l_param3,l_param4);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_param5:|%s|\t l_param6:|%s|\n",l_param5,l_param6);
		//fflush(fl_userlog);

		
		/******* Dynamic Header Display ******************/

		fprintf(fl_userlog,"strlen(header_query) :|%d|\n",strlen(header_query));
        //fflush(fl_userlog);
		if(strlen(header_query) > 0)
		{

		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_HEADER :|%s||%s|\n",l_rept_id,l_param1);	
        //fflush(fl_userlog);		
		printf("Calling Stored Procedure SP_REPORT_HEADER :|%s||%s|\n",l_rept_id,l_param1);
        //fflush(fl_userlog);		
		//fflush(fl_userlog);
		EXEC SQL CALL SP_REPORT_HEADER(:l_rept_id,:l_param1,:l_param2,
					:l_param3,:l_param4, :l_param5,
					:l_param6,:l_header_query,:l_header_query1,:l_error_desc);

		
		strcat(l_header_query,l_header_query1);

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_HEADER ERR DESC :|%s|\n",l_error_desc);
			//fflush(fl_userlog);
		}

				
		fprintf(fl_userlog,"LTR1_HEADER QUERY :|%s|\n",l_header_query);
         //fflush(fl_userlog);
		EXEC SQL PREPARE LTR1_HEADER_CURR FROM :l_header_query;

		EXEC SQL DECLARE LTR1_header_curr CURSOR FOR LTR1_HEADER_CURR;
		
		fprintf(fl_userlog,"After DECLARE LTR1_header_curr Ora Error :|%d|\n",sqlca.sqlcode);
        //fflush(fl_userlog);
		EXEC SQL OPEN LTR1_header_curr;

		EXEC SQL FETCH LTR1_header_curr INTO :l_header_query_value;

		fprintf(fl_userlog,"After FETCH LTR1_header_curr Ora Error :|%d|\n",sqlca.sqlcode);
         //fflush(fl_userlog);
		EXEC SQL CLOSE LTR1_header_curr;

		fprintf(fl_userlog,"l_header_query_value :|%s|\n",l_header_query_value);
		//fflush(fl_userlog);
		
		if (CO_SplitStr(l_header_query_value,CAPSEP,&l_header_num,&l_header_val) == APL_FAILURE)
		{
			CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
			fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_header_query_value);
			//fflush(fl_userlog);
			APL_GOBACK_FAIL
		}

		fprintf(fl_userlog,"l_header_num :|%d|\n",l_header_num);
		//fflush(fl_userlog);
		if(l_header_num > 0)
		{
			for(i=0;i<l_header_num;i++)
			{
				if(i == 0)
				strcpy(l_header1,l_header_val[i]);
				else if(i == 1)
				strcpy(l_header2,l_header_val[i]);
				else if(i == 2)
				strcpy(l_header3,l_header_val[i]);
				else if(i == 3)
				strcpy(l_header4,l_header_val[i]);
				else if(i == 4)
				strcpy(l_header5,l_header_val[i]);
				else if(i == 5)
				strcpy(l_header6,l_header_val[i]);
				else if(i == 6)
				strcpy(l_header7,l_header_val[i]);
				else if(i == 7)
				strcpy(l_header8,l_header_val[i]);
				else if(i == 8)
				strcpy(l_header9,l_header_val[i]);
				else if(i == 9)
				strcpy(l_header10,l_header_val[i]);
				else if(i == 10)
				strcpy(l_header11,l_header_val[i]);
				else if(i == 11)
				strcpy(l_header12,l_header_val[i]);
				else if(i == 12)
				strcpy(l_header13,l_header_val[i]);
				else if(i == 13)
				strcpy(l_header14,l_header_val[i]);
				else if(i == 14)
				strcpy(l_header15,l_header_val[i]);
			}
		}

		/****** Stored Procedure : SP_REPORT_HEADER_DATA ***********************************/

		fprintf(fl_userlog,"l_header1 :|%s|\t l_header2 :|%s|\n",l_header1,l_header2);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_header3 :|%s|\t l_header4 :|%s|\n",l_header3,l_header4);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_header5 :|%s|\t l_header6 :|%s|\n",l_header5,l_header6);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_header7 :|%s|\t l_header8 :|%s|\n",l_header7,l_header8);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_header9 :|%s|\t l_header10 :|%s|\n",l_header9,l_header10);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_header11 :|%s|\t l_header12 :|%s|\n",l_header11,l_header12);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_header13 :|%s|\t l_header14 :|%s|\n",l_header13,l_header14);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_header15 :|%s|\t\n",l_header15);
		//fflush(fl_userlog);

		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_HEADER_DATA :|%s|\n",l_rept_id);	
       //fflush(fl_userlog);		
		printf("Calling Stored Procedure SP_REPORT_HEADER_DATA :|%s|\n",l_rept_id);		
		//fflush(fl_userlog);
		EXEC SQL CALL SP_REPORT_HEADER_DATA(:l_rept_id,:l_header1,
						    :l_header2,:l_header3,
						    :l_header4,:l_header5,
						    :l_header6,:l_header7,
						    :l_header8,:l_header9,
						    :l_header10,:l_header11,
						    :l_header12,:l_header13,
						    :l_header14,:l_header15,
						    :l_header_data,:l_error_desc); 

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_HEADER_DATA ERR DESC :|%s|\n",l_error_desc);
			//fflush(fl_userlog);
		}

		fprintf(fl_userlog,"HEADER DATA :|%s|\n",l_header_data);
		//fflush(fl_userlog);

		/************ Dynamic Formating Procedure ********/
		
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);
        //fflush(fl_userlog);		
		printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
		//fflush(fl_userlog);
		EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_header_data,:l_error_desc); 

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
			//fflush(fl_userlog);
		}

		fprintf(fl_userlog,"HEADER DATA After Formatting -- :|%s|\n",l_header_data);
		//fflush(fl_userlog);

		/************************************************/

		fprintf(fl_userlog,"strlen(l_header_data) :|%d|\n",strlen(l_header_data));
		//fflush(fl_userlog);
		
		if(strlen(l_header_data) > 0)
		{
			fprintf(fl_userlog,"Displaying Header Data ----- \n");
			//fflush(fl_userlog);

			fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\"><TR>\n");
			//fflush(fl_userlog);
			fprintf(l_report_LETR2,"<TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'headerdata\'>%s</TD>\n",h_report_main_struct.header_data_align,l_header_data);
			//fflush(fl_userlog);
			fprintf(l_report_LETR2,"</TR></TABLE>\n");
			//fflush(fl_userlog);
		}

		l_header_brk = h_report_main_struct.header_brk;
		while(l_header_brk > 0)
		{
			fprintf(l_report_LETR2,"</BR>\n");
			//fflush(fl_userlog);
			l_header_brk --;
			g_line_count++;
		}

		/********  End Of Dynamic Header Display   *********/

		}


		l_table_id = 1;
		
		fprintf(fl_userlog,"NO OF TABLES :|%d|\n",h_report_main_struct.no_of_tables);
		//fflush(fl_userlog);
		printf("NO OF TABLES :|%d|\n",h_report_main_struct.no_of_tables);
		//fflush(fl_userlog);
		while(l_table_id <= h_report_main_struct.no_of_tables)
		{

			g_complex_parameter1 = 0.0;
			g_complex_parameter2 = 0.0;
			g_complex_parameter3 = 0.0;
			g_complex_parameter4 = 0.0;
			g_complex_parameter5 = 0.0;
			g_complex_parameter6 = 0.0;
			g_complex_parameter7 = 0.0;
			g_complex_parameter8 = 0.0;
			g_complex_parameter9 = 0.0;
			g_complex_parameter10 = 0.0;
			g_complex_parameter11 = 0.0;
			g_complex_parameter12 = 0.0;
			g_complex_parameter13 = 0.0;
			g_complex_parameter14 = 0.0;
			g_complex_parameter15 = 0.0;
			g_complex_parameter16 = 0.0;
			g_complex_parameter17 = 0.0;
			g_complex_parameter18 = 0.0;
			g_complex_parameter19 = 0.0;
			g_complex_parameter20 = 0.0;


		
		EXEC SQL SELECT * INTO :h_report_details_struct
					FROM REPORT_DETAILS 
					WHERE REPORT_ID=:l_rept_id
					AND TABLE_ID=:l_table_id;

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Failed to Access REPORT_DETAILS --- ORA ERROR :|%d|\n",sqlca.sqlcode);
			//fflush(fl_userlog);
		}


		/***** Table header ************************/

		fprintf(fl_userlog,"h_report_details_struct.table_hdr:|%s|\n",h_report_details_struct.table_hdr);
		//fflush(fl_userlog);
		
		if(strlen(h_report_details_struct.table_hdr_align) > 0)
		{
			if(strlen(h_report_details_struct.table_hdr) > 0)
			{
				fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" class=\'lableredbg\'><TR ><TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'lableredbg\'>%s</TD></TR></TABLE>\n",h_report_details_struct.table_hdr_align,h_report_details_struct.table_hdr);
                //fflush(fl_userlog);
				g_line_count++;
			}
		}
		else
		{
			if(strlen(h_report_details_struct.table_hdr) > 0)
			{
				fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" class=\'lableredbg\'><TR ><TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'lableredbg\'>%s</TD></TR></TABLE>\n",h_report_details_struct.table_hdr);
                 //fflush(fl_userlog);
				g_line_count++;
			}
			
		}

		l_table_hdr = h_report_details_struct.table_hdr_brk;
		while(l_table_hdr > 0)
		{
			fprintf(l_report_LETR2,"</BR>\n");
			//fflush(fl_userlog);
			l_table_hdr --;
			g_line_count++;
		}

		strcpy(footer_query,h_report_details_struct.footer_query);

		/*********** Grouping Condition Check **********************/

		fprintf(fl_userlog,"h_report_details_struct.group_query:|%s|\n",h_report_details_struct.group_query);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"h_report_details_struct.group_desc:|%s|\n",h_report_details_struct.group_desc);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"h_report_details_struct.group_pos:|%s|\n",h_report_details_struct.group_pos);
		//fflush(fl_userlog);
			
		strcpy(l_group_pos,h_report_details_struct.group_pos);

		strcpy(l_group_query,h_report_details_struct.group_query);
		strcpy(l_group_desc,h_report_details_struct.group_desc);

		fprintf(fl_userlog,"strlen(l_group_query) :|%d|\n",strlen(l_group_query));
        //fflush(fl_userlog);		
		printf("strlen(l_group_query) :|%d|\n",strlen(l_group_query));	
		//fflush(fl_userlog);

        //fflush(fl_userlog);
		if(strlen(l_group_query) > 0 )
		{
			EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
				:l_group_query,
				'@PARAM1',:l_param1),
				'@PARAM2',:l_param2),
				'@PARAM3',:l_param3),
				'@PARAM4',:l_param4),
				'@PARAM5',:l_param5),
				'@PARAM6',:l_param6) 
				INTO :l_group_query FROM DUAL;
			
			fprintf(fl_userlog,"GROUP QUERY :|%s|\n",l_group_query);
			//fflush(fl_userlog);

			EXEC SQL PREPARE LETR2_GROUP1 FROM :l_group_query;
			EXEC SQL DECLARE LETR2_group1 CURSOR FOR LETR2_GROUP1;
			EXEC SQL OPEN LETR2_group1;

			if(sqlca.sqlcode < 0)
			{
				fprintf(fl_userlog,"Error : Cursor Open LETR2_group1 ORA ERROR :|%d|\n",sqlca.sqlcode);
				//fflush(fl_userlog);
			}

			for(;;)
			{
				EXEC SQL FETCH LETR2_group1
						INTO :l_group_parameter;

				fprintf(fl_userlog,"After FETCH LETR2_group1 :|%d| And l_group_break_flag :|%d|\n",sqlca.sqlcode,l_group_break_flag);
				//fflush(fl_userlog);
				
				if((sqlca.sqlcode == 1403)||(l_group_break_flag == 1))
					break;

				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Error : Fetch Cursor LETR2_group1 ORA ERROR :|%d|\n",sqlca.sqlcode);
					//fflush(fl_userlog);
				}

				/********* Split Group Parameter ******************/
			
				fprintf(fl_userlog,"l_group_parameter:|%s|\n",l_group_parameter);
				//fflush(fl_userlog);
				
				if(CO_SplitStr(l_group_parameter,CAPSEP,&l_group_parameter_no,&l_group_parameter_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_parameter);
					//fflush(fl_userlog);
					APL_GOBACK_FAIL
				}
		
				fprintf(fl_userlog,"l_group_pos:|%s|\n",l_group_pos);
				//fflush(fl_userlog);
				
				if(CO_SplitStr(l_group_pos,COMASEP,&l_group_pos_no,&l_group_pos_value) == APL_FAILURE)
				{
			 
					CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					fprintf(fl_userlog,"Error : Failure From CO_SplitStr for Parameter :|%s|\n",l_group_pos);
					//fflush(fl_userlog);
					APL_GOBACK_FAIL
				}

				fprintf(fl_userlog,"l_group_pos_no:|%d|l_group_parameter_no:|%d|\n",l_group_pos_no,l_group_parameter_no);
				//fflush(fl_userlog);
				
				if((l_group_pos_no > 0) && (l_group_parameter_no > 0)
					&& (l_group_pos_no == l_group_parameter_no))
				{	
					l_group_break_flag=0;
				
					for(i=0;i<l_group_pos_no;i++)
					{
						if(!strcmp(l_group_pos_value[i],"2"))
						{
							fprintf(fl_userlog,"l_param2:|%s|l_prev_param2:|%s|\n",l_param2,l_prev_param2);
							//fflush(fl_userlog);
							if(!strcmp(l_param2,l_prev_param2))
							{
								strcpy(l_param2,l_group_parameter_value[i]);
								strcpy(l_prev_param2,l_param2);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"3"))
						{
							fprintf(fl_userlog,"l_param3:|%s|l_prev_param3:|%s|\n",l_param3,l_prev_param3);
							//fflush(fl_userlog);
							
							if(!strcmp(l_param3,l_prev_param3))
							{
								strcpy(l_param3,l_group_parameter_value[i]);
								strcpy(l_prev_param3,l_param3);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"4"))
						{
							fprintf(fl_userlog,"l_param4:|%s|l_prev_param4:|%s|\n",l_param4,l_prev_param4);
							//fflush(fl_userlog);
							
							if(!strcmp(l_param4,l_prev_param4))
							{
								strcpy(l_param4,l_group_parameter_value[i]);
								strcpy(l_prev_param4,l_param4);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"5"))
						{
							fprintf(fl_userlog,"l_param5:|%s|l_prev_param5:|%s|\n",l_param5,l_prev_param5);
							//fflush(fl_userlog);
							
							if(!strcmp(l_param5,l_prev_param5))
							{
								strcpy(l_param5,l_group_parameter_value[i]);
								strcpy(l_prev_param5,l_param5);
							}
							else
								l_group_break_flag=1;
						}
						else if(!strcmp(l_group_pos_value[i],"6"))
						{
							fprintf(fl_userlog,"l_param6:|%s|l_prev_param6:|%s|\n",l_param6,l_prev_param6);
							//fflush(fl_userlog);
							
							if(!strcmp(l_param6,l_prev_param6))
							{
								strcpy(l_param6,l_group_parameter_value[i]);
								strcpy(l_prev_param6,l_param6);
							}
							else
								l_group_break_flag=1;
						}
					}
				}
				else
				{
					fprintf(fl_userlog,"Error: Mismatch in Group Parameters :|%d||%d|",l_group_pos_no,l_group_parameter_no);
					//fflush(fl_userlog);
					break;
				}
				

			/*********************************************************************/
			
			fprintf(fl_userlog,"l_param1:|%s|\n",l_param1);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"l_param2:|%s|\n",l_param2);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"l_param3:|%s|\n",l_param3);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"l_param4:|%s|\n",l_param4);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"l_param5:|%s|\n",l_param5);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"l_param6:|%s|\n",l_param6);
			//fflush(fl_userlog);
				
			/**** Stored procedure for REPORT DETAILS GROUPING ********/
			
			fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID 43:|%s|\n",l_rept_id);
			//fflush(fl_userlog);
			printf("Calling Stored Procedure SP_REPORT_DETAIL for Report ID 44:|%s|\n",l_rept_id);
			//fflush(fl_userlog);
			EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
					:l_param2,:l_param3,:l_param4,
					:l_param5,:l_param6,
					:l_table_query,:l_table_query1,:l_table_query2,
					:l_table_query3,:l_table_query4,:l_table_query5,
					:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
					:l_group_desc,:l_error_desc);

			strcpy(table_query,l_table_query);
			strcat(table_query," ");
			
			if(strlen(l_table_query1) > 0)
			{
				strcat(table_query,l_table_query1);
				strcat(table_query," ");
			}
			if(strlen(l_table_query2) > 0)
			{
				strcat(table_query,l_table_query2);
				strcat(table_query," ");
			}
			if(strlen(l_table_query3) > 0)
			{
				strcat(table_query,l_table_query3);
				strcat(table_query," ");
			}
			if(strlen(l_table_query4) > 0)
			{
				strcat(table_query,l_table_query4);
				strcat(table_query," ");
			}
			if(strlen(l_table_query5) > 0)
			{
				strcat(table_query,l_table_query5);
				strcat(table_query," ");
			}
			
			strcat(table_query,APL_NULL_STRING);
				
			fprintf(fl_userlog,"After Stored Procedure SP_REPORT_DETAIL ORA ERROR 17:|%d|\n",sqlca.sqlcode);
			//fflush(fl_userlog);
			
			if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
			{
				fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
			//fflush(fl_userlog);
			}
			
			/*fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
			//fflush(fl_userlog);*/
			fprintf(fl_userlog,"l_criteria_query1:|%s|\n",l_criteria_query1);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"l_criteria_query2:|%s|\n",l_criteria_query2);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"l_criteria_query3:|%s|\n",l_criteria_query3);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"l_group_desc:|%s|\n",l_group_desc);
			//fflush(fl_userlog);

			/********* Group Description ******************************************/
			
			if(strlen(l_group_desc) > 0)
			{
				fprintf(l_report_LETR2,"</BR>\n");
				//fflush(fl_userlog);
				fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" class=\'ez1\'><TR><TD WIDTH=\'100%%\' class=\'ez4\'>%s</TD></TR></TABLE>\n",l_group_desc);
				//fflush(fl_userlog);
				fprintf(l_report_LETR2,"</BR>\n");
				//fflush(fl_userlog);
			}


			/****** Multiple Column Level **************************************/

			strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
			strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
			strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
			
			fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);
			//fflush(fl_userlog);

			if(strlen(l_multiple_col_flag) > 0)
			{
				fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);
				//fflush(fl_userlog);

				if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
						&l_multiple_col_header_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
					 //fflush(fl_userlog);
					 APL_GOBACK_FAIL
				}

				if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
						&l_multiple_colspan_sep_value) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
					 //fflush(fl_userlog);
					 APL_GOBACK_FAIL
				}


				fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
				//fflush(fl_userlog);
				fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);
				//fflush(fl_userlog);

				fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" border=\'%s\' cellSpacing=\'0\' cellPadding=\'1\' >\n",g_table_border);
				//fflush(fl_userlog);

				if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
				{
					for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
					{
						for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
						{				

						if(int_a == int_b )
						{
						
						strcpy(l_level_header,l_multiple_col_header_value[int_a]);
						strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

						fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
						//fflush(fl_userlog);
						fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);
						//fflush(fl_userlog);

						if (CO_SplitStr(l_level_header,
								SEMISEP,
								&l_level_header_no,
								&l_level_header_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
							 //fflush(fl_userlog);
							 APL_GOBACK_FAIL
						}

						if (CO_SplitStr(l_level_colspan,
								SEMISEP,
								&l_level_colspan_no,
								&l_level_colspan_value) == APL_FAILURE)
						{
							 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
							 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
							 //fflush(fl_userlog);
							 APL_GOBACK_FAIL
						}

						fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
						//fflush(fl_userlog);
						fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);
						//fflush(fl_userlog);

						if(l_level_header_no == l_level_colspan_no)
						{

						fprintf(l_report_LETR2,"<TR>\n");
						//fflush(fl_userlog);
						for(int_aa=0;int_aa<l_level_header_no;int_aa++)
						{
							for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
							{
								if(int_aa == int_bb)
								{	
								
								strcpy(l_level_column,l_level_header_value[int_aa]);
								strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

								fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
								//fflush(fl_userlog);
								fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
								//fflush(fl_userlog);
								
								if(strlen(l_level_column) > 0)
								{
									fprintf(l_report_LETR2,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >%s</TD> \n", l_level_col_span,l_level_column);
								//fflush(fl_userlog);
								}
								else
								{
									fprintf(l_report_LETR2,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >&nbsp;</TD> \n", l_level_col_span);
                                   //fflush(fl_userlog);
								 }

								}
							}
						}
						fprintf(l_report_LETR2,"</TR>\n");
						//fflush(fl_userlog);

						}/*** End Of Inner Condition check *****/

						}
						
												
						}/*** End Of 2st Main For Loop *******/

					}/*** End Of 1st Main For Loop *******/

				}/*** End Of Multiple col condition check *****/

				l_column_no=h_report_details_struct.no_of_columns;
				l_no_of_columns = h_report_details_struct.no_of_columns;
			}
			

			EXEC SQL PREPARE LETR2_SUB11 FROM :table_query;	
			EXEC SQL DECLARE LETR2tablequery11 CURSOR FOR LETR2_SUB11;
			EXEC SQL OPEN LETR2tablequery11;

			if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
			{
				fprintf(fl_userlog,"Error : Open Cursor LETR2tablequery11 ORA ERROR :|%d|\n",sqlca.sqlcode);
				//fflush(fl_userlog);
			}
			

			l_fetch_count=0;

			for(;;)
			{
				EXEC SQL FETCH LETR2tablequery11
					INTO :l_table_parameter;

				if(sqlca.sqlcode == 1403)
				{
					fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
					//fflush(fl_userlog);
					if(l_fetch_count == 0)
					{
						fprintf(l_report_LETR2,"<TR>\n");
						//fflush(fl_userlog);
						fprintf(l_report_LETR2,"<TD WIDTH=\'100%%\' COLSPAN=\'%d\' class=\'ez4\'>NO RECORDS FOUND </TD>\n",l_column_no);
						//fflush(fl_userlog);
						fprintf(l_report_LETR2,"</TR>\n");
						//fflush(fl_userlog);

						l_remove_count ++;
					}
					break;
				}

				if(sqlca.sqlcode < 0)
				{
				   fprintf(fl_userlog,"Error : Fetch Cursor LETR2tablequery11 --- ORA ERROR:|%d|\n",sqlca.sqlcode);
				   //fflush(fl_userlog);
					break;
				}

				strcpy(l_column_parameter,l_table_parameter);
				
				/**** Split and fetch the column data ******/
			
				if (CO_SplitStr(l_column_parameter,CAPSEP,
						&l_column_num,&l_column_val) == APL_FAILURE)
				{
					CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
					//fflush(fl_userlog);
					APL_GOBACK_FAIL
				}

				/***** For Number Formatting ******************************************/

				strcpy(l_format_col_pos,h_report_details_struct.format_col_pos);
				if (CO_SplitStr(l_format_col_pos,COMASEP,&l_format_col_no,&l_format_col_val) == APL_FAILURE)
				{
					 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
					 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_format_col_pos);
					 //fflush(fl_userlog);
					 APL_GOBACK_FAIL
				}

				fprintf(l_report_LETR2,"<TR>\n");
				//fflush(fl_userlog);

				for(j=0;j<l_column_num;j++)
				{
					strcpy(l_column,l_column_val[j]);
					
					l_format_col_flag = 0;
					if(l_format_col_no > 0)
					{
						for (k=0;k<l_format_col_no;k++)
						{
							strcpy(l_format_col_value,l_format_col_val[k]);

							if(j==(atoi(l_format_col_value)-1))
								l_format_col_flag = 1;
						}

						if((strlen(l_column) > 0) && (strcmp(l_column," ")))
						{
							if(l_format_col_flag == 1)
							{
								EXEC SQL CALL SP_NUMBER_FORMATTING(:l_column,:l_error_desc);

								if(strlen(l_error_desc) > 0)
								{
									fprintf(l_report_LETR2,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
									//fflush(fl_userlog);
								}
								else
								{
									fprintf(l_report_LETR2,"<TD class=\'record\' ALIGN=\"RIGHT\">%s</TD>\n",l_column);
									//fflush(fl_userlog);
								}
							}
							else
							{
								fprintf(l_report_LETR2,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
								//fflush(fl_userlog);
							}
						}
						else
						{
							 fprintf(l_report_LETR2,"<TD class=\'record\'  >&nbsp</TD>\n");
							 //fflush(fl_userlog);
						}

					}
					else
					{
						if((strlen(l_column) > 0) && (strcmp(l_column," ")))
						{
							fprintf(l_report_LETR2,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
							//fflush(fl_userlog);
						}
						else
						{
							fprintf(l_report_LETR2,"<TD class=\'record\'  >&nbsp</TD>\n");
							//fflush(fl_userlog);
						}
					}

				}
				fprintf(l_report_LETR2,"</TR>\n");
				//fflush(fl_userlog);

				/*********************************************************************/


				l_fetch_count ++;

			}
			EXEC SQL CLOSE LETR2tablequery11;


			/******* Complex Criteria Part **************************/

			strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
			strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
			strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
			strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

			if(strlen(complex_criteria_query) > 0)
			{
			
			EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
					:complex_criteria_query,
					'@PARAM1',:l_param1),
					'@PARAM2',:l_param2),
					'@PARAM3',:l_param3),
					'@PARAM4',:l_param4),
					'@PARAM5',:l_param5),
					'@PARAM6',:l_param6),
					REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
					:complex_criteria_query1,
					'@PARAM1',:l_param1),
					'@PARAM2',:l_param2),
					'@PARAM3',:l_param3),
					'@PARAM4',:l_param4),
					'@PARAM5',:l_param5),
					'@PARAM6',:l_param6)
				INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;
		
			strcat(complex_criteria_query,complex_criteria_query1);
			
			fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);
			//fflush(fl_userlog);

			EXEC SQL PREPARE LTR1_CMPX_CURR1 FROM :complex_criteria_query;

			EXEC SQL DECLARE LTR1_complex_curr1 CURSOR FOR LTR1_CMPX_CURR1;

			fprintf(fl_userlog,"After DECLARE LTR1_complex_curr1 :|%d|\n",sqlca.sqlcode);
             //fflush(fl_userlog);
			 
			EXEC SQL OPEN LTR1_complex_curr1;

			EXEC SQL FETCH LTR1_complex_curr1 INTO :l_complex_parameter;

			fprintf(fl_userlog,"After FETCH LTR1_complex_curr1 :|%d|\n",sqlca.sqlcode);
			//fflush(fl_userlog);

			EXEC SQL CLOSE LTR1_complex_curr1;

			fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);
			//fflush(fl_userlog);

			if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
				//fflush(fl_userlog);
				APL_GOBACK_FAIL
			}
			
			fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);
			//fflush(fl_userlog);

			if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
				//fflush(fl_userlog);
				APL_GOBACK_FAIL
			}


			fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);
			//fflush(fl_userlog);

			l_complex_break_flag = 0;
			
			if(l_complex_num == l_complex_pos_num)
			{

			fprintf(l_report_LETR2,"<TR>\n");
			//fflush(fl_userlog);

			for(i=0;i<l_column_num;i++)
			{
				for(j=0;j<l_complex_pos_num;j++)
				{

				strcpy(l_complex_pos_column,l_complex_pos_val[j]);

				if((i==0)&&(j==0))
				{
					if(strlen(complex_criteria_label) > 0)
					{
						fprintf(l_report_LETR2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" >%s</TD>\n",complex_criteria_label);
						//fflush(fl_userlog);
						l_complex_break_flag=1;
					}
					else
					{
					fprintf(l_report_LETR2,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
					//fflush(fl_userlog);
					}
				}

				if(i== (atoi(l_complex_pos_column)-1))
				{				  
				  strcpy(l_complex_column,l_complex_val[j]);

				  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);
				  //fflush(fl_userlog);

				  l_complex_break_flag=1;
							
				  if(strlen(l_complex_column) > 0)
				  {
					  EXEC SQL CALL SP_NUMBER_FORMATTING(:l_complex_column,:l_error_desc);

					  if(strlen(l_error_desc) > 0)
					  {
						fprintf(l_report_LETR2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">%s</TD>\n",l_complex_column);
						//fflush(fl_userlog);
					 }
					  else
					  {
						fprintf(l_report_LETR2,"<TD class=\'lableredbg\' ALIGN=\"RIGHT\">%s</TD>\n",l_complex_column);
						//fflush(fl_userlog);
					  }
				  }
				  else
				  {
						fprintf(l_report_LETR2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">&nbsp;</TD>\n");
						//fflush(fl_userlog);
				  }
				
				  break;
				}
				else
				{
				     l_complex_break_flag = 0;
				     continue;
				} 

				}
				     
				if(i != 0)
				{
				  if(l_complex_break_flag != 1)
				     fprintf(l_report_LETR2,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
					 //fflush(fl_userlog);
				}
			}

			}
			else
			{
				fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
			//fflush(fl_userlog);
			}

			fprintf(l_report_LETR2,"</TR>\n");
			//fflush(fl_userlog);

			}
			
			/*****************	End Of Complex Part     *********************/



			fprintf(l_report_LETR2,"</TABLE>\n");
			//fflush(fl_userlog);

			/****** After table ************************************/
	
			l_after_table = h_report_details_struct.after_table_brk;
			while(l_after_table > 0)
			{
				fprintf(l_report_LETR2,"</BR>\n");
				//fflush(fl_userlog);
				l_after_table --;
			}

			if(strlen(h_report_details_struct.after_table_align) > 0)
			{
				if(strlen(h_report_details_struct.after_table) > 0)
				{		
					fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.after_table_align,h_report_details_struct.after_table);
				//fflush(fl_userlog);
				}
			}
			else
			{
				if(strlen(h_report_details_struct.after_table) > 0)
				{	
					fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD><TR></TABLE>\n",h_report_details_struct.after_table);
				//fflush(fl_userlog);
				}

			}	
  
			/******** Table Footer note ************************************/
	
			l_table_footer = h_report_details_struct.table_footer_brk;
			if(l_table_footer > 0)
			{
				fprintf(l_report_LETR2,"</BR>\n");
				//fflush(fl_userlog);
				l_table_footer --;
			}
		
			if(strlen(h_report_details_struct.table_footer_align) > 0)
			{
				if(strlen(h_report_details_struct.table_footer) > 0)
				{
					fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",h_report_details_struct.table_footer_align,h_report_details_struct.table_footer);
				//fflush(fl_userlog);
				}
			}
			else
			{
				if(strlen(h_report_details_struct.table_footer) > 0)
				{
					fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'lableredbg\'>%s</TD><TR></TABLE>\n",h_report_details_struct.table_footer);
				//fflush(fl_userlog);
				}

			}

			l_table = h_report_main_struct.table_brk;
			if(l_table > 0)
			{
				fprintf(l_report_LETR2,"</BR>\n");
				//fflush(fl_userlog);
				l_table --;
			}

			if(l_fetch_count > 0 )
			{
			
			for(m=0;m<l_complex_num;m++)
			{
				if(m == 0)
				{
					strcpy(l_complex_parameter1,l_complex_val[m]);
					g_complex_parameter1=g_complex_parameter1+atof(l_complex_parameter1);
				}
				else if(m == 1)
				{
					strcpy(l_complex_parameter2,l_complex_val[m]);
					g_complex_parameter2=g_complex_parameter2+atof(l_complex_parameter2);
				}
				else if(m == 2)
				{
					strcpy(l_complex_parameter3,l_complex_val[m]);
					g_complex_parameter3=g_complex_parameter3+atof(l_complex_parameter3);
				}
				else if(m == 3)
				{
					strcpy(l_complex_parameter4,l_complex_val[m]);
					g_complex_parameter4=g_complex_parameter4+atof(l_complex_parameter4);
				}
				else if(m == 4)
				{
					strcpy(l_complex_parameter5,l_complex_val[m]);
					g_complex_parameter5=g_complex_parameter5+atof(l_complex_parameter5);
				}
				else if(m == 5)
				{
					strcpy(l_complex_parameter6,l_complex_val[m]);
					g_complex_parameter6=g_complex_parameter6+atof(l_complex_parameter6);
				}
				else if(m == 6)
				{
					strcpy(l_complex_parameter7,l_complex_val[m]);
					g_complex_parameter7=g_complex_parameter7+atof(l_complex_parameter7);
				}
				else if(m == 7)
				{
					strcpy(l_complex_parameter8,l_complex_val[m]);
					g_complex_parameter8=g_complex_parameter8+atof(l_complex_parameter8);
				}
				else if(m == 8)
				{
					strcpy(l_complex_parameter9,l_complex_val[m]);
					g_complex_parameter9=g_complex_parameter9+atof(l_complex_parameter9);
				}
				else if(m == 9)
				{
					strcpy(l_complex_parameter10,l_complex_val[m]);
					g_complex_parameter10=g_complex_parameter10+atof(l_complex_parameter10);
				}
				else if(m == 10)
				{
					strcpy(l_complex_parameter11,l_complex_val[m]);
					g_complex_parameter11=g_complex_parameter11+atof(l_complex_parameter11);
				}
				else if(m == 11)
				{
					strcpy(l_complex_parameter12,l_complex_val[m]);			
					g_complex_parameter12=g_complex_parameter12+atof(l_complex_parameter12);
				}
				else if(m == 12)
				{
					strcpy(l_complex_parameter13,l_complex_val[m]);
					g_complex_parameter13=g_complex_parameter13+atof(l_complex_parameter13);
				}
				else if(m == 13)
				{
					strcpy(l_complex_parameter14,l_complex_val[m]);
					g_complex_parameter14=g_complex_parameter14+atof(l_complex_parameter14);
				}
				else if(m == 14)
				{
					strcpy(l_complex_parameter15,l_complex_val[m]);
					g_complex_parameter15=g_complex_parameter15+atof(l_complex_parameter15);
				}
				else if(m == 15)
				{
					strcpy(l_complex_parameter16,l_complex_val[m]);
					g_complex_parameter16=g_complex_parameter16+atof(l_complex_parameter16);
				}
				else if(m == 16)
				{
					strcpy(l_complex_parameter17,l_complex_val[m]);
					g_complex_parameter17=g_complex_parameter17+atof(l_complex_parameter17);
				}
				else if(m == 17)
				{
					strcpy(l_complex_parameter18,l_complex_val[m]);
					g_complex_parameter18=g_complex_parameter18+atof(l_complex_parameter18);
				}
				else if(m == 18)
				{
					strcpy(l_complex_parameter19,l_complex_val[m]);
					g_complex_parameter19=g_complex_parameter19+atof(l_complex_parameter19);
				}
				else if(m == 19)
				{
					strcpy(l_complex_parameter20,l_complex_val[m]);
					g_complex_parameter20=g_complex_parameter20+atof(l_complex_parameter20);
				}
			}

			}/*** End Of Fetch Count check ******/

			}/*** End Of Grouping For Loop ******/
			EXEC SQL CLOSE LETR2_group1;			
		}
		else
		{
		
		/**** Stored procedure for REPORT DETAILS ********************/
		
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_DETAIL for Report ID 45:|%s|\n",l_rept_id);
		//fflush(fl_userlog);
		printf("Calling Stored Procedure SP_REPORT_DETAIL for Report ID 46:|%s|\n",l_rept_id);
		//fflush(fl_userlog);
		EXEC SQL CALL SP_REPORT_DETAIL(:l_rept_id,:l_table_id,:l_param1,
				:l_param2,:l_param3,:l_param4,
				:l_param5,:l_param6,
				:l_table_query,:l_table_query1,:l_table_query2,
				:l_table_query3,:l_table_query4,:l_table_query5,
				:l_criteria_query1,:l_criteria_query2,:l_criteria_query3,
				:l_group_desc,:l_error_desc);

		if(strlen(l_table_query) > 0)
		{

		strcpy(table_query,l_table_query);
		strcat(table_query," ");
		
		if(strlen(l_table_query1) > 0)
		{
			strcat(table_query,l_table_query1);
			strcat(table_query," ");
		}
		if(strlen(l_table_query2) > 0)
		{
			strcat(table_query,l_table_query2);
			strcat(table_query," ");
		}
		if(strlen(l_table_query3) > 0)
		{
			strcat(table_query,l_table_query3);
			strcat(table_query," ");
		}
		if(strlen(l_table_query4) > 0)
		{
			strcat(table_query,l_table_query4);
			strcat(table_query," ");
		}
		if(strlen(l_table_query5) > 0)
		{
			strcat(table_query,l_table_query5);
			strcat(table_query," ");
		}
		
		strcat(table_query,APL_NULL_STRING);
			
		fprintf(fl_userlog," Inside Else Stored Procedure SP_REPORT_DETAIL ORA ERROR :|%d|\n",sqlca.sqlcode);
		//fflush(fl_userlog);
		
		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_REPORT_DETAIL ERR DESC :|%s|\n",l_error_desc);
			//fflush(fl_userlog);
		}
		
		/*fprintf(fl_userlog,"table_query:|%s|\n",table_query);	
        //fflush(fl_userlog);*/

		/****** Before table **********************************************/
		
		if(strlen(h_report_details_struct.before_table_align) > 0)
		{
			if(strlen(h_report_details_struct.before_table) > 0)
			{	
				fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\"ALIGN=\"%s\"  class=\'beforetable\'>%s</TD></TR></TABLE>\n",h_report_details_struct.before_table_align,h_report_details_struct.before_table);
                 //fflush(fl_userlog);
				g_line_count++;
			}
		}
		else
		{
			if(strlen(h_report_details_struct.before_table) > 0)
			{	
				fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\"ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD></TR></TABLE>\n",h_report_details_struct.before_table);
                  //fflush(fl_userlog);
				g_line_count++;
			}

		}	
		
		l_before_table = h_report_details_struct.before_table_brk;
		while(l_before_table > 0)
		{
			fprintf(l_report_LETR2,"</BR>\n");
			//fflush(fl_userlog);
			l_before_table --;
			g_line_count++;
		}



		/****** Multiple Column Level **************************************/

		strcpy(l_multiple_col_flag,h_report_details_struct.multiple_col_flag);
		strcpy(l_multiple_col_header,h_report_details_struct.multiple_col_header);
		strcpy(l_multiple_colspan_sep,h_report_details_struct.multiple_colspan_sep);
		
		fprintf(fl_userlog,"l_multiple_col_flag :|%s|\n",l_multiple_col_flag);
		//fflush(fl_userlog);

		if(strlen(l_multiple_col_flag) > 0)
		{
			fprintf(fl_userlog,"l_multiple_col_header :|%s|\n",l_multiple_col_header);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"l_multiple_colspan_sep :|%s|\n",l_multiple_colspan_sep);
			//fflush(fl_userlog);

			if (CO_SplitStr(l_multiple_col_header,PIPESEP,&l_multiple_col_header_no,
					&l_multiple_col_header_value) == APL_FAILURE)
			{
				 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_col_header);
				 //fflush(fl_userlog);
				 APL_GOBACK_FAIL
			}

			if (CO_SplitStr(l_multiple_colspan_sep,PIPESEP,&l_multiple_colspan_sep_no,
					&l_multiple_colspan_sep_value) == APL_FAILURE)
			{
				 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_multiple_colspan_sep);
				 //fflush(fl_userlog);
				 APL_GOBACK_FAIL
			}


			fprintf(fl_userlog,"l_multiple_col_header_no :|%d|\n",l_multiple_col_header_no);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"l_multiple_colspan_sep_no :|%d|\n",l_multiple_colspan_sep_no);
			//fflush(fl_userlog);

			fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" border=\'%s\' cellSpacing=\'0\' cellPadding=\'1\' >\n",g_table_border);
			//fflush(fl_userlog);

			if(l_multiple_col_header_no == l_multiple_colspan_sep_no)
			{
				for(int_a=0;int_a<l_multiple_col_header_no;int_a++)
				{
					for(int_b=0;int_b<l_multiple_colspan_sep_no;int_b++)
					{
				
					if(int_a == int_b )
					{
					
					strcpy(l_level_header,l_multiple_col_header_value[int_a]);
					strcpy(l_level_colspan,l_multiple_colspan_sep_value[int_b]);

					fprintf(fl_userlog,"l_level_header :|%s|\n",l_level_header);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"l_level_colspan :|%s|\n",l_level_colspan);
					//fflush(fl_userlog);

					if (CO_SplitStr(l_level_header,
							SEMISEP,
							&l_level_header_no,
							&l_level_header_value) == APL_FAILURE)
					{
						 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_header);
						 //fflush(fl_userlog);
						 APL_GOBACK_FAIL
					}

					if (CO_SplitStr(l_level_colspan,
							SEMISEP,
							&l_level_colspan_no,
							&l_level_colspan_value) == APL_FAILURE)
					{
						 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
						 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function :|%s|\n",l_level_colspan);
						 //fflush(fl_userlog);
						 APL_GOBACK_FAIL
					}

					fprintf(fl_userlog,"l_level_header_no :|%d|\n",l_level_header_no);
					//fflush(fl_userlog);
					fprintf(fl_userlog,"l_level_colspan_no :|%d|\n",l_level_colspan_no);
					//fflush(fl_userlog);

					if(l_level_header_no == l_level_colspan_no)
					{

					fprintf(l_report_LETR2,"<TR>\n");
					//fflush(fl_userlog);
					for(int_aa=0;int_aa<l_level_header_no;int_aa++)
					{
						for(int_bb=0;int_bb<l_level_colspan_no;int_bb++)
						{
							if(int_aa == int_bb)
							{	
							
							strcpy(l_level_column,l_level_header_value[int_aa]);
							strcpy(l_level_col_span,l_level_colspan_value[int_bb]);

							fprintf(fl_userlog,"l_level_column :|%s|\n",l_level_column);
							//fflush(fl_userlog);
							fprintf(fl_userlog,"l_level_col_span :|%s|\n",l_level_col_span);
							//fflush(fl_userlog);
							
							if(strlen(l_level_column) > 0)
							{
								fprintf(l_report_LETR2,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >%s</TD> \n", l_level_col_span,l_level_column);
							//fflush(fl_userlog);
							}
							else
							{
								fprintf(l_report_LETR2,"<TD ALIGN=\"CENTER\" class=\'ez4\' colspan=\'%s\' >&nbsp;</TD> \n", l_level_col_span);
								//fflush(fl_userlog);
							}


							}
						}
					}
					fprintf(l_report_LETR2,"</TR>\n");
					//fflush(fl_userlog);

					}/*** End Of Inner Condition check *****/

					}
					
											
					}/*** End Of 2st Main For Loop *******/

				}/*** End Of 1st Main For Loop *******/

			}/*** End Of Multiple col condition check *****/

			l_column_no=h_report_details_struct.no_of_columns;
			l_no_of_columns = h_report_details_struct.no_of_columns;

		}
		
		
		EXEC SQL PREPARE LETR2_SUB12 FROM :table_query;	
		EXEC SQL DECLARE LETR2tablequery12 CURSOR FOR LETR2_SUB12;
		EXEC SQL OPEN LETR2tablequery12;

		if(sqlca.sqlcode < 0)
		{
			fprintf(fl_userlog,"Error : Open Cursor LETR2tablequery12 ORA ERROR :|%d|\n",sqlca.sqlcode);
			//fflush(fl_userlog);
		}

		l_fetch_count=0;

		for(;;)
		{
			EXEC SQL FETCH LETR2tablequery12
				INTO :l_table_parameter;

			if(sqlca.sqlcode == 1403)
			{
				fprintf(fl_userlog,"l_fetch_count:|%d|\n",l_fetch_count);
				//fflush(fl_userlog);
				if(l_fetch_count == 0)
				{
					fprintf(l_report_LETR2,"<TR>\n");
					//fflush(fl_userlog);
					fprintf(l_report_LETR2,"<TD WIDTH=\'100%%\' COLSPAN=\'%d\' class=\'ez4\'>NO RECORDS FOUND </TD>\n",l_column_no);
					//fflush(fl_userlog);
					fprintf(l_report_LETR2,"</TR>\n");
					//fflush(fl_userlog);
						
					l_remove_count ++;
					g_line_count++;
				}
				break;
			}

			if(sqlca.sqlcode < 0)
			{
			   fprintf(fl_userlog,"Error : Fetch Cursor LETR2tablequery12 --- ORA ERROR:|%d|\n",sqlca.sqlcode);
			   //fflush(fl_userlog);
			   //fflush(fl_userlog);
			   break;
			}


			strcpy(l_column_parameter,l_table_parameter);
			
			/******* Split the string and fetch the column data *********/
		
			if (CO_SplitStr(l_column_parameter,CAPSEP,&l_column_num,&l_column_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_column_parameter);
				//fflush(fl_userlog);
				APL_GOBACK_FAIL
			}

			/***** For Number Formatting ******************************************/

			strcpy(l_format_col_pos,h_report_details_struct.format_col_pos);
			if (CO_SplitStr(l_format_col_pos,COMASEP,&l_format_col_no,&l_format_col_val) == APL_FAILURE)
			{
				 CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				 fprintf(fl_userlog,"Error : Failure From CO_SplitStr Function for Parameter :|%s|\n",l_format_col_pos);
				 //fflush(fl_userlog);
				 APL_GOBACK_FAIL
			}

			fprintf(l_report_LETR2,"<TR>\n");
			//fflush(fl_userlog);

			for(j=0;j<l_column_num;j++)
			{
				strcpy(l_column,l_column_val[j]);
				
				l_format_col_flag = 0;
				if(l_format_col_no > 0)
				{
					for (k=0;k<l_format_col_no;k++)
					{
						strcpy(l_format_col_value,l_format_col_val[k]);

						if(j==(atoi(l_format_col_value)-1))
							l_format_col_flag = 1;
					}

					if((strlen(l_column) > 0) && (strcmp(l_column," ")))
					{
						if(l_format_col_flag == 1)
						{
							EXEC SQL CALL SP_NUMBER_FORMATTING(:l_column,:l_error_desc);

							if(strlen(l_error_desc) > 0)
							{
								fprintf(l_report_LETR2,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
								//fflush(fl_userlog);
							}
							else
							{
								fprintf(l_report_LETR2,"<TD class=\'record\' ALIGN=\"RIGHT\">%s</TD>\n",l_column);
								//fflush(fl_userlog);
							}
						}
						else
						{
							fprintf(l_report_LETR2,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
							//fflush(fl_userlog);
						}
					}
					else
					{
						 fprintf(l_report_LETR2,"<TD class=\'record\'  >&nbsp</TD>\n");
						 //fflush(fl_userlog);
					}

				}
				else
				{
					if((strlen(l_column) > 0) && (strcmp(l_column," ")))
					{
						fprintf(l_report_LETR2,"<TD class=\'record\' ALIGN=\"LEFT\">%s</TD>\n",l_column);
						//fflush(fl_userlog);
					}
					else
					{
						fprintf(l_report_LETR2,"<TD class=\'record\'  >&nbsp</TD>\n");
						//fflush(fl_userlog);
					}
				}

			}
			fprintf(l_report_LETR2,"</TR>\n");
			//fflush(fl_userlog);

			/*********************************************************************/


			l_fetch_count ++;

		}
		EXEC SQL CLOSE LETR2tablequery12;

		
		/******* Complex Criteria Part *********************************************/


		strcpy(complex_criteria_query,h_report_details_struct.comx_criteria_query);
		strcpy(complex_criteria_query1,h_report_details_struct.comx_criteria_query1);
		strcpy(complex_criteria_label,h_report_details_struct.comx_criteria_label);
		strcpy(complex_criteria_pos,h_report_details_struct.comx_criteria_pos);

		fprintf(fl_userlog,"Before Complex Part -- l_fetch_count 12:|%d|\n",l_fetch_count);
		//fflush(fl_userlog);

		if(l_fetch_count > 0)
		{

		if(strlen(complex_criteria_query) > 0)
		{
		
		EXEC SQL SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
				:complex_criteria_query,
				'@PARAM1',:l_param1),
				'@PARAM2',:l_param2),
				'@PARAM3',:l_param3),
				'@PARAM4',:l_param4),
				'@PARAM5',:l_param5),
				'@PARAM6',:l_param6),
				REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
				:complex_criteria_query1,
				'@PARAM1',:l_param1),
				'@PARAM2',:l_param2),
				'@PARAM3',:l_param3),
				'@PARAM4',:l_param4),
				'@PARAM5',:l_param5),
				'@PARAM6',:l_param6)
			INTO :complex_criteria_query,:complex_criteria_query1 FROM DUAL;
		
		strcat(complex_criteria_query,complex_criteria_query1);

		fprintf(fl_userlog,"complex_criteria_query :|%s|\n",complex_criteria_query);
          //fflush(fl_userlog);
		EXEC SQL PREPARE LTR1_CMPX_CURR FROM :complex_criteria_query;

		EXEC SQL DECLARE LTR1_complex_curr CURSOR FOR LTR1_CMPX_CURR;

		fprintf(fl_userlog,"After DECLARE LTR1_complex_curr :|%d|\n",sqlca.sqlcode);
          //fflush(fl_userlog);
		EXEC SQL OPEN LTR1_complex_curr;

		EXEC SQL FETCH LTR1_complex_curr INTO :l_complex_parameter;

		fprintf(fl_userlog,"After FETCH LTR1_complex_curr :|%d|\n",sqlca.sqlcode);
        //fflush(fl_userlog);
		EXEC SQL CLOSE LTR1_complex_curr;

		fprintf(fl_userlog,"l_complex_parameter :|%s|\n",l_complex_parameter);
             //fflush(fl_userlog);
		if (CO_SplitStr(l_complex_parameter,CAPSEP,&l_complex_num,&l_complex_val) == APL_FAILURE)
		{
			CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
			fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
			//fflush(fl_userlog);
			APL_GOBACK_FAIL
		}
		
		fprintf(fl_userlog,"complex_criteria_pos :|%s|\n",complex_criteria_pos);
          //fflush(fl_userlog);
		if (CO_SplitStr(complex_criteria_pos,COMASEP,&l_complex_pos_num,&l_complex_pos_val) == APL_FAILURE)
		{
			CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
			fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_complex_parameter);
			//fflush(fl_userlog);
			APL_GOBACK_FAIL
		}


		fprintf(fl_userlog,"l_complex_num :|%d|\n",l_complex_num);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_complex_pos_num :|%d|\n",l_complex_pos_num);
		//fflush(fl_userlog);

		l_complex_break_flag = 0;

		
		if(l_complex_num == l_complex_pos_num)
		{

		fprintf(l_report_LETR2,"<TR>\n");
		//fflush(fl_userlog);

		for(i=0;i<l_column_num;i++)
		{
			for(j=0;j<l_complex_pos_num;j++)
			{

			strcpy(l_complex_pos_column,l_complex_pos_val[j]);

			if((i==0)&&(j==0))
			{
				if(strlen(complex_criteria_label) > 0)
				{
					fprintf(l_report_LETR2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\" >%s</TD>\n",complex_criteria_label);
					//fflush(fl_userlog);
					l_complex_break_flag=1;
				}
				else
				{
				fprintf(l_report_LETR2,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
				//fflush(fl_userlog);
				}
			}

			if(i== (atoi(l_complex_pos_column)-1))
			{				  
			  strcpy(l_complex_column,l_complex_val[j]);

			  fprintf(fl_userlog,"l_complex_column :|%d|--|%s|\n",atoi(l_complex_pos_column),l_complex_column);
			  //fflush(fl_userlog);

			  l_complex_break_flag=1;
			  
			  if(strlen(l_complex_column) > 0)
			  {
				  EXEC SQL CALL SP_NUMBER_FORMATTING(:l_complex_column,:l_error_desc);

				  if(strlen(l_error_desc) > 0)
				  {
					fprintf(l_report_LETR2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">%s</TD>\n",l_complex_column);
					//fflush(fl_userlog);
					}
				  else
				  {
					fprintf(l_report_LETR2,"<TD class=\'lableredbg\' ALIGN=\"RIGHT\">%s</TD>\n",l_complex_column);
					//fflush(fl_userlog);
				  }
			  }
			  else
			  {
					fprintf(l_report_LETR2,"<TD class=\'lableredbg\' ALIGN=\"LEFT\">&nbsp;</TD>\n");
					//fflush(fl_userlog);
			  }
			
			  break;
			}
			else
			{
			     l_complex_break_flag = 0;
			     continue;
			} 

			}
			     
			if(i != 0)
			{
			  if(l_complex_break_flag != 1)
			     fprintf(l_report_LETR2,"<TD class=\'lableredbg\'  >&nbsp</TD>\n");
				 //fflush(fl_userlog);
			}
		}

		}
		else
		{
			fprintf(fl_userlog,"Error :- Mismatch In Complex Variables :|%d||%d|\n",l_complex_num,l_complex_pos_num);
			//fflush(fl_userlog);
		}

		fprintf(l_report_LETR2,"</TR>\n");
		//fflush(fl_userlog);

		}

		}
		else
		{			
			fprintf(fl_userlog," No Records Found -- So No Need To Display Criteria \n");
			//fflush(fl_userlog);
		}
		

		/***************************************************************************/
				
		fprintf(l_report_LETR2,"</TABLE>\n");
		//fflush(fl_userlog);

		/****** After table ********************************************************/
		
		l_after_table = h_report_details_struct.after_table_brk;
		while(l_after_table > 0)
		{
			fprintf(l_report_LETR2,"</BR>\n");
			//fflush(fl_userlog);
			l_after_table --;
			g_line_count++;
		}

		if(strlen(h_report_details_struct.after_table_align) > 0)
		{
			if(strlen(h_report_details_struct.after_table) > 0)
			{	
				fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'beforetable\'>%s</TD></TR></TABLE>\n",h_report_details_struct.after_table_align,h_report_details_struct.after_table);
                //fflush(fl_userlog);
				g_line_count++;
			}
		}
		else
		{
			if(strlen(h_report_details_struct.after_table) > 0)
			{	
				fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" ><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'beforetable\'>%s</TD></TR></TABLE>\n",h_report_details_struct.after_table);
               //fflush(fl_userlog);
				g_line_count++;
			}

		}	
  
		/************ Table Footer note *************************************/
	
		l_table_footer = h_report_details_struct.table_footer_brk;
		if(l_table_footer > 0)
		{
			fprintf(l_report_LETR2,"</BR>\n");
			//fflush(fl_userlog);
			l_table_footer --;
			g_line_count++;
		}
		
		if(strlen(h_report_details_struct.table_footer_align) > 0)
		{
			if(strlen(h_report_details_struct.table_footer) > 0)
			{
				fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\"  class=\'lableredbg\'>%s</TD></TR></TABLE>\n",h_report_details_struct.table_footer_align,h_report_details_struct.table_footer);
                  //fflush(fl_userlog);
				g_line_count++;
			}
		}
		else
		{
			if(strlen(h_report_details_struct.table_footer) > 0)
			{
				fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\"><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\"  class=\'lableredbg\'>%s</TD></TR></TABLE>\n",h_report_details_struct.table_footer);
               //fflush(fl_userlog);
				g_line_count++;
			}

		}

		l_table = h_report_main_struct.table_brk;
		if(l_table > 0)
		{
			fprintf(l_report_LETR2,"</BR>\n");
			//fflush(fl_userlog);
			l_table --;
			g_line_count++;
		}

		if( l_fetch_count > 0 )
		{
			for(m=0;m<l_complex_num;m++)
			{
				if(m == 0)
				{
					strcpy(l_complex_parameter1,l_complex_val[m]);
					g_complex_parameter1=atof(l_complex_parameter1);
				}
				else if(m == 1)
				{
					strcpy(l_complex_parameter2,l_complex_val[m]);
					g_complex_parameter2=atof(l_complex_parameter2);
				}
				else if(m == 2)
				{
					strcpy(l_complex_parameter3,l_complex_val[m]);
					g_complex_parameter3=atof(l_complex_parameter3);
				}
				else if(m == 3)
				{
					strcpy(l_complex_parameter4,l_complex_val[m]);
					g_complex_parameter4=atof(l_complex_parameter4);
				}
				else if(m == 4)
				{
					strcpy(l_complex_parameter5,l_complex_val[m]);
					g_complex_parameter5=atof(l_complex_parameter5);
				}
				else if(m == 5)
				{
					strcpy(l_complex_parameter6,l_complex_val[m]);
					g_complex_parameter6=atof(l_complex_parameter6);
				}
				else if(m == 6)
				{
					strcpy(l_complex_parameter7,l_complex_val[m]);
					g_complex_parameter7=atof(l_complex_parameter7);
				}
				else if(m == 7)
				{
					strcpy(l_complex_parameter8,l_complex_val[m]);
					g_complex_parameter8=atof(l_complex_parameter8);
				}
				else if(m == 8)
				{
					strcpy(l_complex_parameter9,l_complex_val[m]);
					g_complex_parameter9=atof(l_complex_parameter9);
				}
				else if(m == 9)
				{
					strcpy(l_complex_parameter10,l_complex_val[m]);
					g_complex_parameter10=atof(l_complex_parameter10);
				}
				else if(m == 10)
				{
					strcpy(l_complex_parameter11,l_complex_val[m]);
					g_complex_parameter11=atof(l_complex_parameter11);
				}
				else if(m == 11)
				{
					strcpy(l_complex_parameter12,l_complex_val[m]);			
					g_complex_parameter12=atof(l_complex_parameter12);
				}
				else if(m == 12)
				{
					strcpy(l_complex_parameter13,l_complex_val[m]);
					g_complex_parameter13=atof(l_complex_parameter13);
				}
				else if(m == 13)
				{
					strcpy(l_complex_parameter14,l_complex_val[m]);
					g_complex_parameter14=atof(l_complex_parameter14);
				}
				else if(m == 14)
				{
					strcpy(l_complex_parameter15,l_complex_val[m]);
					g_complex_parameter15=atof(l_complex_parameter15);
				}
				else if(m == 15)
				{
					strcpy(l_complex_parameter16,l_complex_val[m]);
					g_complex_parameter16=atof(l_complex_parameter16);
				}
				else if(m == 16)
				{
					strcpy(l_complex_parameter17,l_complex_val[m]);
					g_complex_parameter17=atof(l_complex_parameter17);
				}
				else if(m == 17)
				{
					strcpy(l_complex_parameter18,l_complex_val[m]);
					g_complex_parameter18=atof(l_complex_parameter18);
				}
				else if(m == 18)
				{
					strcpy(l_complex_parameter19,l_complex_val[m]);
					g_complex_parameter19=atof(l_complex_parameter19);
				}
				else if(m == 19)
				{
					strcpy(l_complex_parameter20,l_complex_val[m]);
					g_complex_parameter20=atof(l_complex_parameter20);
				}

			}/*** End of Complex For Loop ***/

		}/*** End Of Fetch Count Check ****/

		}/**** End Of Table Query check ****/

		}/******* End Of Grouping Else Block **********/


		/*************** Complex Criteria Individual  **********/
			
		if(l_fetch_count > 0 )
		{
			fprintf(fl_userlog,"g_complex_parameter1 :|%lf|\tg_complex_parameter2 :|%lf|\n",g_complex_parameter1,g_complex_parameter2);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter3 :|%lf|\tg_complex_parameter4 :|%lf|\n",g_complex_parameter3,g_complex_parameter4);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter5 :|%lf|\tg_complex_parameter6 :|%lf|\n",g_complex_parameter5,g_complex_parameter6);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter7 :|%lf|\tg_complex_parameter8 :|%lf|\n",g_complex_parameter7,g_complex_parameter8);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter9 :|%lf|\tg_complex_parameter10 :|%lf|\n",g_complex_parameter9,g_complex_parameter10);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter11 :|%lf|\tg_complex_parameter12 :|%lf|\n",g_complex_parameter11,g_complex_parameter12);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter13 :|%lf|\tg_complex_parameter14 :|%lf|\n",g_complex_parameter13,g_complex_parameter14);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter15 :|%lf|\tg_complex_parameter16 :|%lf|\n",g_complex_parameter15,g_complex_parameter16);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter17 :|%lf|\tg_complex_parameter18 :|%lf|\n",g_complex_parameter17,g_complex_parameter18);
			//fflush(fl_userlog);
			fprintf(fl_userlog,"g_complex_parameter19 :|%lf|\tg_complex_parameter20 :|%lf|\n",g_complex_parameter19,g_complex_parameter20);
			//fflush(fl_userlog);
		}



		/****** Dynamic Footer Display ******************/

		strcpy(footer_query,h_report_details_struct.footer_query);
		
		if(strlen(footer_query) > 0)
		{

		/**** Stored Procedure : SP_REPORT_FOOTER ***********************************/

		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
		//fflush(fl_userlog);
		printf("Calling Stored Procedure SP_REPORT_FOOTER :|%s||%s|\n",l_rept_id,l_param1);	
		//fflush(fl_userlog);
		EXEC SQL CALL SP_REPORT_FOOTER(:l_rept_id,:l_table_id,:l_param1,:l_param2,
					:l_param3,:l_param4, :l_param5,
					:l_param6,:l_footer_query,:l_footer_query1,:l_error_desc); 

		
		strcat(l_footer_query,l_footer_query1);

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER ERR DESC :|%s|\n",l_error_desc);
			//fflush(fl_userlog);
		}

		fprintf(fl_userlog,"FOOTER QUERY :|%s|\n",l_footer_query);
        //fflush(fl_userlog);
		strcpy(l_footer_query_value,APL_NULL_STRING);

		EXEC SQL PREPARE LTR1_FOOTER_CURR FROM :l_footer_query;

		EXEC SQL DECLARE LTR1_footer_curr CURSOR FOR LTR1_FOOTER_CURR;
		
		fprintf(fl_userlog,"After DECLARE LTR1_footer_curr :|%d|\n",sqlca.sqlcode);
		//fflush(fl_userlog);

		EXEC SQL OPEN LTR1_footer_curr;

		EXEC SQL FETCH LTR1_footer_curr INTO :l_footer_query_value;
		fprintf(fl_userlog,"After FETCH LTR1_footer_curr :|%d|\n",sqlca.sqlcode);
		//fflush(fl_userlog);

		EXEC SQL CLOSE LTR1_footer_curr;

		fprintf(fl_userlog,"l_footer_query_value :|%s|\n",l_footer_query_value);
		//fflush(fl_userlog);

		l_footer_num = 0;

		strcpy(l_footer1,APL_NULL_STRING);
		strcpy(l_footer2,APL_NULL_STRING);
		strcpy(l_footer3,APL_NULL_STRING);
		strcpy(l_footer4,APL_NULL_STRING);
		strcpy(l_footer5,APL_NULL_STRING);
		strcpy(l_footer6,APL_NULL_STRING);
		strcpy(l_footer7,APL_NULL_STRING);
		strcpy(l_footer8,APL_NULL_STRING);
		strcpy(l_footer9,APL_NULL_STRING);
		strcpy(l_footer10,APL_NULL_STRING);
		strcpy(l_footer11,APL_NULL_STRING);
		strcpy(l_footer12,APL_NULL_STRING);
		strcpy(l_footer13,APL_NULL_STRING);
		strcpy(l_footer14,APL_NULL_STRING);
		strcpy(l_footer15,APL_NULL_STRING);

		if(strlen(l_footer_query_value) > 0)
		{		
			if (CO_SplitStr(l_footer_query_value,CAPSEP,&l_footer_num,&l_footer_val) == APL_FAILURE)
			{
				CO_ProcMonitor(g_logfile, "Failure from CO_SplitStr", NULL, NULL);
				fprintf(fl_userlog,"Error : Failure From CO_SplitStr :|%s|\n",l_footer_query_value);
				//fflush(fl_userlog);
				APL_GOBACK_FAIL
			}

			fprintf(fl_userlog,"l_footer_num :|%d|\n",l_footer_num);
			//fflush(fl_userlog);
			if(l_footer_num > 0)
			{
				for(i=0;i<l_footer_num;i++)
				{
					if(i == 0)
					strcpy(l_footer1,l_footer_val[i]);
					else if(i == 1)
					strcpy(l_footer2,l_footer_val[i]);
					else if(i == 2)
					strcpy(l_footer3,l_footer_val[i]);
					else if(i == 3)
					strcpy(l_footer4,l_footer_val[i]);
					else if(i == 4)
					strcpy(l_footer5,l_footer_val[i]);
					else if(i == 5)
					strcpy(l_footer6,l_footer_val[i]);
					else if(i == 6)
					strcpy(l_footer7,l_footer_val[i]);
					else if(i == 7)
					strcpy(l_footer8,l_footer_val[i]);
					else if(i == 8)
					strcpy(l_footer9,l_footer_val[i]);
					else if(i == 9)
					strcpy(l_footer10,l_footer_val[i]);
					else if(i == 10)
					strcpy(l_footer11,l_footer_val[i]);
					else if(i == 11)
					strcpy(l_footer12,l_footer_val[i]);
					else if(i == 12)
					strcpy(l_footer13,l_footer_val[i]);
					else if(i == 13)
					strcpy(l_footer14,l_footer_val[i]);
					else if(i == 14)
					strcpy(l_footer15,l_footer_val[i]);
				}
			}
		
		}/***************** End Of Footer Value Check  ***********************/

		/****** Stored Procedure : SP_REPORT_FOOTER_DATA ****************/

		fprintf(fl_userlog,"l_footer1 :|%s|\t l_footer2 :|%s|\n",l_footer1,l_footer2);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer3 :|%s|\t l_footer4 :|%s|\n",l_footer3,l_footer4);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer5 :|%s|\t l_footer6 :|%s|\n",l_footer5,l_footer6);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer7 :|%s|\t l_footer8 :|%s|\n",l_footer7,l_footer8);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer9 :|%s|\t l_footer10 :|%s|\n",l_footer9,l_footer10);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer11 :|%s|\t l_footer12 :|%s|\n",l_footer11,l_footer12);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer13 :|%s|\t l_footer14 :|%s|\n",l_footer13,l_footer14);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"l_footer15 :|%s|\n",l_footer15);
		//fflush(fl_userlog);

		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);	
		printf("Calling Stored Procedure SP_REPORT_FOOTER_DATA :|%s|\n",l_rept_id);		
		
		EXEC SQL CALL SP_REPORT_FOOTER_DATA(:l_rept_id,:l_table_id,
							:l_footer1,:l_footer2,
							:l_footer3,:l_footer4,
							:l_footer5,:l_footer6,
							:l_footer7,:l_footer8,
							:l_footer9,:l_footer10,
							:l_footer11,:l_footer12,
							:l_footer13,:l_footer14,
							:l_footer15,
							:g_complex_parameter1,:g_complex_parameter2,
							:g_complex_parameter3,:g_complex_parameter4,
							:g_complex_parameter5,:g_complex_parameter6,
							:g_complex_parameter7,:g_complex_parameter8,
							:g_complex_parameter9,:g_complex_parameter10,
							:g_complex_parameter11,:g_complex_parameter12,
							:g_complex_parameter13,:g_complex_parameter14,
							:g_complex_parameter15,:g_complex_parameter16,
							:g_complex_parameter17,:g_complex_parameter18,
							:g_complex_parameter19,:g_complex_parameter20,
							:l_footer_data,:l_error_desc);

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FOOTER_DATA ERR DESC :|%s|\n",l_error_desc);
			//fflush(fl_userlog);
		}

		fprintf(fl_userlog,"FOOTER DATA :|%s|\n",l_footer_data);
		//fflush(fl_userlog);

		/************ Dynamic Formating Procedure **********************/
		
		fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);	
		//fflush(fl_userlog);
		printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
		
		EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_footer_data,:l_error_desc); 

		if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
		{
			fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
			//fflush(fl_userlog);
		}

		fprintf(fl_userlog,"FOOTER DATA After Formatting -- :|%s|\n",l_footer_data);
		//fflush(fl_userlog);


		/*****************************************************************/

		/************ Dynamic Footer Data Display ************************/
		
		fprintf(fl_userlog,"strlen(l_footer_data) :|%d|\n",strlen(l_footer_data));
		//fflush(fl_userlog);

		if(strlen(l_footer_data) > 0)
		{
			fprintf(fl_userlog,"Displaying Footer Data --- \n");
             //fflush(fl_userlog);
			fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\"><TR>\n");
			//fflush(fl_userlog);
			fprintf(l_report_LETR2,"<TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'headerdata\'>%s</TD>\n",h_report_details_struct.footer_data_align,l_footer_data);
			//fflush(fl_userlog);
			fprintf(l_report_LETR2,"</TR></TABLE>\n");
			//fflush(fl_userlog);
		}

		l_footer_data_brk = h_report_details_struct.footer_data_brk;
		while(l_footer_data_brk > 0)
		{
			fprintf(l_report_LETR2,"</BR>\n");
			//fflush(fl_userlog);
			l_footer_data_brk --;
			g_line_count++;
		}
		}

		/***************** End Of Dynamic Footer Display  ***********************/

		/***************** Final Complex Criteria Calculation **********************/

		fprintf(fl_userlog,"\n--- l_table_id ---14 :|%d|\n",l_table_id);
		//fflush(fl_userlog);

		if(l_table_id == 1)
		{
			f_complex_parameter1=f_complex_parameter1+g_complex_parameter1;
			f_complex_parameter2=f_complex_parameter2+g_complex_parameter2;
			f_complex_parameter3=f_complex_parameter3+g_complex_parameter3;
			f_complex_parameter4=f_complex_parameter4+g_complex_parameter4;
			f_complex_parameter5=f_complex_parameter5+g_complex_parameter5;
			f_complex_parameter6=f_complex_parameter6+g_complex_parameter6;
			f_complex_parameter7=f_complex_parameter7+g_complex_parameter7;
			f_complex_parameter8=f_complex_parameter8+g_complex_parameter8;
			f_complex_parameter9=f_complex_parameter9+g_complex_parameter9;
			f_complex_parameter10=f_complex_parameter10+g_complex_parameter10;
			f_complex_parameter11=f_complex_parameter11+g_complex_parameter11;
			f_complex_parameter12=f_complex_parameter12+g_complex_parameter12;
			f_complex_parameter13=f_complex_parameter13+g_complex_parameter13;
			f_complex_parameter14=f_complex_parameter14+g_complex_parameter14;
			f_complex_parameter15=f_complex_parameter15+g_complex_parameter15;
			f_complex_parameter16=f_complex_parameter16+g_complex_parameter16;
			f_complex_parameter17=f_complex_parameter17+g_complex_parameter17;
			f_complex_parameter18=f_complex_parameter18+g_complex_parameter18;
			f_complex_parameter19=f_complex_parameter19+g_complex_parameter19;
			f_complex_parameter20=f_complex_parameter20+g_complex_parameter20;
		}

		/**************************************************************************/


		/********* Grand Complex Criteria Display ******************************/
			
		fprintf(fl_userlog,"f_complex_parameter1 :|%lf|\tf_complex_parameter2 :|%lf|\n",f_complex_parameter1,f_complex_parameter2);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"f_complex_parameter3 :|%lf|\tf_complex_parameter4 :|%lf|\n",f_complex_parameter3,f_complex_parameter4);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"f_complex_parameter5 :|%lf|\tf_complex_parameter6 :|%lf|\n",f_complex_parameter5,f_complex_parameter6);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"f_complex_parameter7 :|%lf|\tf_complex_parameter8 :|%lf|\n",f_complex_parameter7,f_complex_parameter8);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"f_complex_parameter9 :|%lf|\tf_complex_parameter10 :|%lf|\n",f_complex_parameter9,f_complex_parameter10);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"f_complex_parameter11 :|%lf|\tf_complex_parameter12 :|%lf|\n",f_complex_parameter11,f_complex_parameter12);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"f_complex_parameter13 :|%lf|\tf_complex_parameter14 :|%lf|\n",f_complex_parameter13,f_complex_parameter14);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"f_complex_parameter15 :|%lf|\tf_complex_parameter16 :|%lf|\n",f_complex_parameter15,f_complex_parameter16);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"f_complex_parameter17 :|%lf|\tf_complex_parameter18 :|%lf|\n",f_complex_parameter17,f_complex_parameter18);
		//fflush(fl_userlog);
		fprintf(fl_userlog,"f_complex_parameter19 :|%lf|\tf_complex_parameter20 :|%lf|\n",f_complex_parameter19,f_complex_parameter20);
		//fflush(fl_userlog);

		strcpy(complex_criteria,h_report_details_struct.complex_criteria);

		fprintf(fl_userlog,"strlen(complex_criteria) :|%d|\n",strlen(complex_criteria));
		//fflush(fl_userlog);

		if(strlen(complex_criteria) > 0 )
		{
			fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_CRITERIA :|%s|\n",l_rept_id);	
			//fflush(fl_userlog);
			printf("Calling Stored Procedure SP_REPORT_CRITERIA :|%s|\n",l_rept_id);	
			
			EXEC SQL CALL SP_REPORT_CRITERIA(:complex_criteria,
							 :f_complex_parameter1,:f_complex_parameter2,
							 :f_complex_parameter3,:f_complex_parameter4,
							 :f_complex_parameter5,:f_complex_parameter6,
							 :f_complex_parameter7,:f_complex_parameter8,
							 :f_complex_parameter9,:f_complex_parameter10,
							 :f_complex_parameter11,:f_complex_parameter12,
							 :f_complex_parameter13,:f_complex_parameter14,
							 :f_complex_parameter15,:f_complex_parameter16,
							 :f_complex_parameter17,:f_complex_parameter18,
							 :f_complex_parameter19,:f_complex_parameter20,
							 :l_complex_criteria_data,:l_error_desc); 

			if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
			{
				fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_CRITERIA ERR DESC :|%s|\n",l_error_desc);
				//fflush(fl_userlog);
			}

			fprintf(fl_userlog,"COMPLEX CRITERIA DATA :|%s|\n",l_complex_criteria_data);
			//fflush(fl_userlog);

			/************ Dynamic Formating Procedure ********************/
			
			fprintf(fl_userlog,"Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);
            //fflush(fl_userlog);			
			printf("Calling Stored Procedure SP_REPORT_FORMAT --- :|%s|\n",l_rep_type);		
			
			EXEC SQL CALL SP_REPORT_FORMAT(:l_rep_type,:l_complex_criteria_data,:l_error_desc); 

			if((sqlca.sqlcode < 0)&&(sqlca.sqlcode != -1405))
			{
				fprintf(fl_userlog,"Error : Stored Procedure SP_REPORT_FORMAT ERR DESC :|%s|\n",l_error_desc);
				//fflush(fl_userlog);
			}

			fprintf(fl_userlog,"COMPLEX CRITERIA DATA After Formatting -- :|%s|\n",l_complex_criteria_data);
			//fflush(fl_userlog);


			/****************************************************************/

			/************ COMPLEX CRITERIA DATA Display ********************/
			
			fprintf(fl_userlog,"strlen(l_complex_criteria_data) :|%d|\n",strlen(l_complex_criteria_data));
			//fflush(fl_userlog);

			if(strlen(l_complex_criteria_data) > 0)
			{
				fprintf(fl_userlog,"Displaying l_complex_criteria_data Data --- \n");
              //fflush(fl_userlog);
				fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\"><TR>\n");
				//fflush(fl_userlog);
				fprintf(l_report_LETR2,"<TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'headerdata\'>%s</TD>\n",l_complex_criteria_data);
				//fflush(fl_userlog);
				fprintf(l_report_LETR2,"</TR></TABLE>\n");
				//fflush(fl_userlog);
			}

		}

		/******************************************************/

			l_table_id ++;
		}



		/******* Page Footer note ****************************/
			
		if(strlen(h_report_main_struct.page_footer_align) > 0)
		{
			if(strlen(h_report_main_struct.page_footer) > 0)
			{
				fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" class=\'footer\'><TR><TD WIDTH=\"100%%\" ALIGN=\"%s\" class=\'footer\'>%s</TD><TR></TABLE>\n",h_report_main_struct.page_footer_align,h_report_main_struct.page_footer);
			//fflush(fl_userlog);
			}
		}
		else
		{
			if(strlen(h_report_main_struct.page_footer) > 0)
			{
				
				fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" class=\'footer\'><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'footer\'>%s</TD><TR></TABLE>\n",h_report_main_struct.page_footer);
			//fflush(fl_userlog);
			}

		}

		l_page_footer = h_report_main_struct.page_footer_brk;
		if(l_page_footer > 0)
		{
			fprintf(l_report_LETR2,"</BR>\n");
			//fflush(fl_userlog);
			l_page_footer --;
		}
				
				
		/******* Disclaimer *****************************************/
			
		if(strlen(h_report_main_struct.disclaimer) > 0)
		{
			fprintf(l_report_LETR2,"<TABLE WIDTH=\"100%%\" class=\'footer\'><TR><TD WIDTH=\"100%%\" ALIGN=\"LEFT\" class=\'footer\'>%s</TD><TR></TABLE>\n",h_report_main_struct.disclaimer);
                 //fflush(fl_userlog);
		}

		/***********************************************************/

		/********** Letter Page Break Part *******************/
		
		fprintf(l_report_LETR2,"<H3>&nbsp;</H3>");
		//fflush(fl_userlog);

		/*****************************************************/

		l_report_final_flag ++;

	}/**** End Of Record Count Check Part *****************/

	}/*** End Of Letter Group Else Part *****************/


	fprintf(l_report_LETR2,"</BODY></HTML>\n");
	//fflush(fl_userlog);

	strcpy(l_remove_file_path,"rm -f ");/***** Only For Letters *******/
	strcat(l_remove_file_path,l_report_path);/***** Only For Letters *******/

	fprintf(fl_userlog,"REMOVE FLAG :|%d|\n",l_remove_flag);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"REPORT FINAL FLAG :|%d|\n",l_report_final_flag);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"REMOVE PATH :|%s|\n",l_remove_file_path);
	//fflush(fl_userlog);

	printf("REMOVE FLAG :|%d|\n",l_remove_flag);
	printf("REPORT FINAL FLAG :|%d|\n",l_report_final_flag);
	//fflush(fl_userlog);
	printf("REMOVE PATH :|%s|\n",l_remove_file_path);
	//fflush(fl_userlog);
	if((l_remove_flag == 1)||(l_report_final_flag == 0))
	{
		system(l_remove_file_path);

		fprintf(fl_userlog,"Removing File Since No Data Found For The Letter\n");
		//fflush(fl_userlog);
		fprintf(fl_userlog,"Delete File Name :- |%s|\n",l_report_name);
		//fflush(fl_userlog);
		printf("Removing File Since No Data Found For The Letter\n");
		//fflush(fl_userlog);
		printf("Delete File Name :- |%s|\n",l_report_name);
//fflush(fl_userlog);
		EXEC SQL DELETE FROM PRO_COMMON_REPORT 
			 WHERE REPORT_NAME=:l_report_name;

		fprintf(fl_userlog,"After DELETE FROM PRO_COMMON_REPORT File ORA ERROR :|%d|\n",sqlca.sqlcode); 
		//fflush(fl_userlog);
	}
	else
	{
	if(strlen(l_compress_flag) == 0 || !strcmp(l_compress_flag,"N"))
	{
		if((strlen(l_web_source_from) > 0) && !(strcmp(l_web_source_from,"W")))
		{
			EXEC SQL CALL SP_SHOW_REAL_TIME_REPORT_IN_WC(:l_report_name,:l_web_report_dt,:l_web_login_id,:l_report_path,:l_rept_id);

			if(sqlca.sqlcode < 0)
			{
				printf("Error : Failed From Stored Procedure SP_SHOW_REAL_TIME_REPORT_IN_WC ERR DESC :|%d|\n",sqlca.sqlcode);
				fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_SHOW_REAL_TIME_REPORT_IN_WC ERR DESC :|%d|\n",sqlca.sqlcode);
			}
		}
	}
	}
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:
	{
		fclose(l_report_LETR2);
		fclose(l_init_file);
		CO_ProcMonitor(g_logfile,"Success from CO_CreateReport_LETR2",NULL,NULL);
		fprintf(fl_userlog,"Success From CO_CreateReport_LETR2 Function\n");
		//fflush(fl_userlog);
		return(APL_SUCCESS);
	}


	RETURN_FAILURE:
	{
		fclose(l_report_LETR2);
		fclose(l_init_file);
		CO_ProcMonitor(g_logfile,"Failed from CO_CreateReport_LETR2",l_debug_info_ptr,NULL);
		fprintf(fl_userlog,"Failure From CO_CreateReport_LETR2 Function\n ");
		//fflush(fl_userlog);
		return(APL_FAILURE);
	}
}

int CO_ReportFileScript(char *p_rep_id,char *p_report_desc,char *p_rep_format,
			char *p_compress_flag,int p_field_length,
			char *p_start_date,char *p_user,char *p_web_login_id,char *p_web_rpt_id,char *p_web_source_from,char *p_web_report_dt,char *p_web_proc_id,FILE *fl_userlog,
		      	DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	fprintf(fl_userlog,"Entering Inside CO_ReportFileScript Function\n");
	
	FILE *l_init_file 				= (FILE *)NULL;
	char l_init_path[300]				= APL_NULL_STRING;
	char l_tar_path[2000]				= APL_NULL_STRING;
	char l_mode_path[2000]				= APL_NULL_STRING;
	char l_zip_path[2000]				= APL_NULL_STRING;
	char l_remove_path[2000]			= APL_NULL_STRING;
	char l_move_path[2000]				= APL_NULL_STRING;
	char l_cd_temp_path[2000]				= APL_NULL_STRING;
	char l_common_name[2000]			= APL_NULL_STRING;
	char l_report_path[400]				= APL_NULL_STRING;
	char l_report_path_name[1000]				= APL_NULL_STRING;
	char l_temp_path[400]				= APL_NULL_STRING;
	char l_compress_flag[5]				= APL_NULL_STRING;
	char l_time_stamp[30]				= APL_NULL_STRING;
	char l_rep_id[200]				= APL_NULL_STRING;
	char l_rep_desc[200]				= APL_NULL_STRING;
	char l_rep_format[10]				= APL_NULL_STRING;
	char l_start_date[20]				= APL_NULL_STRING;
	char l_user[20]					= APL_NULL_STRING;
	int  l_field_length				= 0;

	char l_file_name[20]				= APL_NULL_STRING;
	char l_file_extn[10]				= APL_NULL_STRING;
		
    //changes for report generation through api start
	char l_web_login_id[101]				= APL_NULL_STRING;
	char l_web_rpt_id[101]				= APL_NULL_STRING;
	char l_web_source_from[101]				= APL_NULL_STRING;
	char l_web_report_dt[101]				= APL_NULL_STRING;
	char l_web_proc_id[101]				= APL_NULL_STRING;
	//changes for report generation through api end	
		
	memset(l_init_path,APL_NULL_CHAR,sizeof(l_init_path));
	memset(l_report_path,APL_NULL_CHAR,sizeof(l_report_path));
	memset(l_report_path_name,APL_NULL_CHAR,sizeof(l_report_path_name));
	memset(l_temp_path,APL_NULL_CHAR,sizeof(l_temp_path));
	memset(l_tar_path,APL_NULL_CHAR,sizeof(l_tar_path));
	memset(l_mode_path,APL_NULL_CHAR,sizeof(l_mode_path));
	memset(l_zip_path,APL_NULL_CHAR,sizeof(l_zip_path));
	memset(l_remove_path,APL_NULL_CHAR,sizeof(l_remove_path));
	memset(l_move_path,APL_NULL_CHAR,sizeof(l_move_path));
	memset(l_cd_temp_path,APL_NULL_CHAR,sizeof(l_cd_temp_path));
	memset(l_common_name,APL_NULL_CHAR,sizeof(l_common_name));

	INTL_REPT_STRUCT_H   l_intl_rept_struct_ha;
	memset(&l_intl_rept_struct_ha,APL_NULL_CHAR,sizeof(INTL_REPT_STRUCT_H));
	
	strcpy(l_rep_id,p_rep_id);
	strcpy(l_rep_desc,p_report_desc);
	strcpy(l_compress_flag,p_compress_flag);
	strcpy(l_rep_format,p_rep_format);
	strcpy(l_start_date,p_start_date);
	strcpy(l_user,p_user);
	
	strcpy(l_web_login_id,p_web_login_id);
	strcpy(l_web_rpt_id,p_web_rpt_id);
	strcpy(l_web_source_from,p_web_source_from);
	strcpy(l_web_report_dt,p_web_report_dt);
	strcpy(l_web_proc_id,p_web_proc_id);

	l_field_length=p_field_length;

	fprintf(fl_userlog,"l_rep_id:|%s|\n",l_rep_id);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"l_rep_desc:|%s|\n",l_rep_desc);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"l_compress_flag:|%s|\n",l_compress_flag);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"l_rep_format:|%s|\n",l_rep_format);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"l_start_date:|%s|\n",l_start_date);
	//fflush(fl_userlog);
	fprintf(fl_userlog,"l_field_length:|%d|\n",l_field_length);
	//fflush(fl_userlog);
	strcpy(l_init_path,getenv("INTL_ROOT_PATH"));
	strcat(l_init_path,"intl_sun.cfg");

	fprintf(fl_userlog,"l_init_path :|%s|\n",l_init_path);
	//fflush(fl_userlog);
	
	if((l_init_file = fopen(l_init_path,"r")) == (FILE *)NULL)
	{
		fprintf(fl_userlog,"Error : Failed to Open File PATH :|%s|\n",l_init_path);
		//fflush(fl_userlog);
		printf("Error : Failed to Open File PATH :|%s|\n",l_init_path);
		//fflush(fl_userlog);
		APL_GOBACK_FAIL
	}

	fprintf(fl_userlog,"Entering CO_ReadToken Function to read INTL_REP_PATH path \n");
	//fflush(fl_userlog);

	if (APL_FAILURE == CO_ReadToken(l_init_file,"INTL_REP_PATH",l_report_path,l_debug_info_ptr))
	{
		fprintf(fl_userlog,"Error :INTL_REP_PATH not set in intl_sun.cfg File \n");
		//fflush(fl_userlog);
		printf("Error :INTL_REP_PATH not set in intl_sun.cfg File \n");
		//fflush(fl_userlog);
		APL_GOBACK_FAIL
	}
	
	fprintf(fl_userlog,"Entering CO_ReadToken Function to read INTL_TEMP_PATH path \n");
	
	if (APL_FAILURE == CO_ReadToken(l_init_file,"INTL_TEMP_PATH",l_temp_path,l_debug_info_ptr))
	{
		fprintf(fl_userlog,"Error : INTL_TEMP_PATH not set in intl_sun.cfg File \n");
		//fflush(fl_userlog);
		printf("Error :INTL_TEMP_PATH not set in intl_sun.cfg File \n");
		//fflush(fl_userlog);
		APL_GOBACK_FAIL
	}


	EXEC SQL SELECT TO_CHAR(SYSDATE,'DD_MON_YYYY')||CHR(95)||TO_CHAR(SYSDATE,'HH24_MI_SS')
				INTO :l_time_stamp
				FROM DUAL;

	fprintf(fl_userlog,"TIME STAMP is :|%s|\n",l_time_stamp);
	//fflush(fl_userlog);

	fprintf(fl_userlog,"COMPRESS FLAG is 13:|%s|\n",l_compress_flag);
	//fflush(fl_userlog);


	if((l_field_length == 1)||(l_field_length == 0))
	{	
		if(!strcmp(l_rep_format,"*.XLS"))
		{
			strcpy(l_file_name,"XLS_");
			strcpy(l_file_extn,"*.xls");
		}
		else if(!strcmp(l_rep_format,"*.CSV"))
		{
			strcpy(l_file_name,"CSV_");
			strcpy(l_file_extn,"*.csv");
		}
		else
		{
			strcpy(l_file_name,"HTML_");
			strcpy(l_file_extn,"*.htm");
		}
	}
	else if(l_field_length > 0)
	{
		if(!strcmp(l_rep_format,"*.XLS"))
		{
			strcpy(l_file_name,"XLS_MULTIPLE_");
			strcpy(l_file_extn,"*.xls");
		}
		else if(!strcmp(l_rep_format,"*.CSV"))
		{
			strcpy(l_file_name,"CSV_MULTIPLE_");
			strcpy(l_file_extn,"*.csv");
		}
		else
		{
			strcpy(l_file_name,"HTML_MULTIPLE_");
			strcpy(l_file_extn,"*.htm");
		}
	}


	if(l_field_length == 1)
	{
		/*  Changes done By Hardik for ISKB_8078 start */
		/*Issue is -- If there is no record in report so system will delete those files from temp path before zipping.
		Ideally it should not ZIP in such scenario. And that zipped file should not be shown in the batch monitor*/
		 
 		    int count = 1;	
		/*  Changes done By Hardik for ISKB_8078 End */	
			strcpy(l_tar_path,"tar -cvf ");
			//strcat(l_tar_path,l_temp_path);
			strcat(l_tar_path,l_file_name);
			strcat(l_tar_path,l_rep_desc);
			strcat(l_tar_path,"_");
			strcat(l_tar_path,l_rep_id);
			strcat(l_tar_path,"_");
			strcat(l_tar_path,l_time_stamp);
			strcat(l_tar_path,".tar ");
			//strcat(l_tar_path,l_temp_path);
			strcat(l_tar_path,l_rep_desc);
			strcat(l_tar_path,"_");
			strcat(l_tar_path,l_rep_id);
			strcat(l_tar_path,l_file_extn);

			fprintf(fl_userlog,"TAR PATH :|%s|\n",l_tar_path);
			//fflush(fl_userlog);
		/*  Changes done By Hardik for ISKB_8078 start */            
			printf("TAR PATH :|%s|\n",l_tar_path);
			//strcpy(l_cd_temp_path,"cd ");
			//strcpy(l_cd_temp_path,"pwd");
			//strcpy(l_cd_temp_path,"/usr4/SIR06741/mydomain/installedApps/PSLPER05Node01Cell/ICUSTODY.ear/ICUSTODY.war/temp");
			//strcat(l_cd_temp_path,l_temp_path);
	      	//system(l_cd_temp_path);
			chdir(l_temp_path);
			system("pwd");
		    count=	system(l_tar_path);
		/*  Changes done By Hardik for ISKB_8078 End */
			system(l_tar_path);

			/*
			strcpy(l_mode_path,"chmod 755 ");
			strcat(l_mode_path,l_temp_path);
			strcat(l_mode_path,"*.*");

			fprintf(fl_userlog,"MODE PATH :|%s|\n",l_mode_path);
			//fflush(fl_userlog);
			
			system(l_mode_path);
			*/
		/*  Changes done By Hardik for ISKB_8078 start */	
	    fprintf(fl_userlog , "system execution return value is :: |%d|\n" , count);
		//fflush(fl_userlog);
		if(count == 0)
        {
            fprintf(fl_userlog , "Tar Executed successfully\n");
			//fflush(fl_userlog);
		/*  Changes done By Hardik for ISKB_8078 End */
			strcpy(l_zip_path,"gzip -f ");
			//strcat(l_zip_path,l_temp_path);
			strcat(l_zip_path,l_file_name);
			strcat(l_zip_path,l_rep_desc);
			strcat(l_zip_path,"_");
			strcat(l_zip_path,l_rep_id);
			strcat(l_zip_path,"_");
			strcat(l_zip_path,l_time_stamp);
			strcat(l_zip_path,".tar");

			fprintf(fl_userlog,"ZIP PATH :|%s|\n",l_zip_path);
			//system(l_cd_temp_path);
chdir(l_temp_path);
			system(l_zip_path);

			strcpy(l_remove_path,"rm -f ");
			strcat(l_remove_path,l_temp_path);
			strcat(l_remove_path,"*_");
			strcat(l_remove_path,l_rep_id);
			strcat(l_remove_path,l_file_extn);

			fprintf(fl_userlog,"REMOVE PATH :|%s|\n",l_remove_path);
			//fflush(fl_userlog);
			
			system(l_remove_path);

			strcpy(l_move_path,"mv ");
			strcat(l_move_path,l_temp_path);
			strcat(l_move_path,l_file_name);
			strcat(l_move_path,l_rep_desc);
			strcat(l_move_path,"_");
			strcat(l_move_path,l_rep_id);
			strcat(l_move_path,"_");
			strcat(l_move_path,l_time_stamp);
			strcat(l_move_path,".tar");
			strcat(l_move_path,".gz  ");
			strcat(l_move_path,l_report_path);

			fprintf(fl_userlog,"MOVE PATH :|%s|\n",l_move_path);
			//fflush(fl_userlog);
		
			system(l_move_path);

			strcpy(l_common_name,l_file_name);
			strcat(l_common_name,l_rep_desc);
			strcat(l_common_name,"_");
			strcat(l_common_name,l_rep_id);
			strcat(l_common_name,"_");
			strcat(l_common_name,l_time_stamp);
			strcat(l_common_name,".tar");
			strcat(l_common_name,".gz");
			
			strcpy(l_intl_rept_struct_ha.report_name,l_common_name);
			strcat(l_intl_rept_struct_ha.report_name,"\0");
			strcpy(l_intl_rept_struct_ha.report_desc,APL_REP_DESC);
			strcat(l_intl_rept_struct_ha.report_desc,"\0");
			strcpy(l_intl_rept_struct_ha.report_date,l_start_date);
			l_intl_rept_struct_ha.report_width = 100 ;
			strcpy(l_intl_rept_struct_ha.task_desc,"DynamicReport");
			strcpy(l_intl_rept_struct_ha.fe_be_ind,"B");
			strcpy(l_intl_rept_struct_ha.usr,l_user);

			 fprintf(fl_userlog,"Entering CO_Proc_RptIns9\n");
			 //fflush(fl_userlog);
			 fprintf(fl_userlog,"report_name:|%s|\n",l_intl_rept_struct_ha.report_name);
			 //fflush(fl_userlog);
			 fprintf(fl_userlog,"report_desc:|%s|\n",l_intl_rept_struct_ha.report_desc);
			 //fflush(fl_userlog);
			 fprintf(fl_userlog,"report_date:|%s|\n",l_intl_rept_struct_ha.report_date);
			 //fflush(fl_userlog);
			 //fprintf(fl_userlog,"report_width:|%ld|\n",l_intl_rept_struct_ha.report_width); Changes done for AIX Migration
			 fprintf(fl_userlog,"report_width:|%d|\n",l_intl_rept_struct_ha.report_width);
			 //fflush(fl_userlog);
			 fprintf(fl_userlog,"task_desc:|%s|\n",l_intl_rept_struct_ha.task_desc);
			 //fflush(fl_userlog);
			 fprintf(fl_userlog,"fe_be_ind:|%s|\n",l_intl_rept_struct_ha.fe_be_ind);
			 //fflush(fl_userlog);
			 fprintf(fl_userlog,"usr:|%s|\n",l_intl_rept_struct_ha.usr);
		   //fflush(fl_userlog);
		    //if(APL_FAILURE == CO_Proc_DBRptIns(l_intl_rept_struct_ha,l_debug_info_ptr))
if(APL_FAILURE == CO_Proc_DBRptIns(&l_intl_rept_struct_ha,l_debug_info_ptr))/*'&'Added For AIX Migration*/
		    {
				fprintf(fl_userlog,"Error : Failure From CO_Proc_RptIns\n");
				//fflush(fl_userlog);
				printf("Error : Failure From CO_Proc_RptIns\n");
				//fflush(fl_userlog);
				APL_GOBACK_FAIL
		    }
		printf("l_common_name |%s| |%s|",l_common_name,l_report_path);
		sprintf(l_report_path_name,"%s%s",l_report_path,l_common_name);
		
		if((strlen(l_web_source_from) > 0) && !(strcmp(l_web_source_from,"W")))
		{
			EXEC SQL CALL SP_SHOW_REAL_TIME_REPORT_IN_WC(:l_common_name,:l_web_report_dt,:l_web_login_id,:l_report_path_name,:l_rep_id);
	
			if(sqlca.sqlcode < 0)
			{
				printf("Error : Failed From Stored Procedure SP_SHOW_REAL_TIME_REPORT_IN_WC ERR DESC :|%d|\n",sqlca.sqlcode);
				fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_SHOW_REAL_TIME_REPORT_IN_WC ERR DESC :|%d|\n",sqlca.sqlcode);
			}
		}
		/*  Changes done By Hardik for ISKB_8078 start */
	    }
		else
		{
		 memset(l_tar_path,APL_NULL_CHAR,sizeof(l_tar_path));
		 strcpy(l_tar_path,"rm -f ");
		strcat(l_tar_path,l_temp_path);
                        strcat(l_tar_path,l_file_name);
                        strcat(l_tar_path,l_rep_desc);
                        strcat(l_tar_path,"_");
                        strcat(l_tar_path,l_rep_id);
                        strcat(l_tar_path,"_");
                        strcat(l_tar_path,l_time_stamp);
                        strcat(l_tar_path,".tar ");
		 //fprintf(fl_userlog,"REMOVE PATH :|%s|\n",l_tar_path);
		 printf("REMOVE PATH :|%s|\n",l_tar_path);
//fflush(fl_userlog);
		 system (l_tar_path);
		 fprintf(fl_userlog," NO FILES FOR ZIP :: \n REMOVING TAR FROM TEMP PATH \n ");
		 //fflush(fl_userlog);
		}
		/*  Changes done By Hardik for ISKB_8078 End */
	}
	else if((l_field_length > 0)||(l_field_length == 0))
	{
		/*  Changes done By Hardik for ISKB_8078 start */
			int count1 = 1;
		/*  Changes done By Hardik for ISKB_8078 End */
			strcpy(l_tar_path,"tar -cvf ");
			//strcat(l_tar_path,l_temp_path);
			strcat(l_tar_path,l_file_name);
			strcat(l_tar_path,l_rep_id);
			strcat(l_tar_path,"_");
			strcat(l_tar_path,l_time_stamp);
			strcat(l_tar_path,".tar ");
			//strcat(l_tar_path,l_temp_path);
			strcat(l_tar_path,"*_");
			strcat(l_tar_path,l_rep_id);
			strcat(l_tar_path,l_file_extn);

			fprintf(fl_userlog,"TAR PATH :|%s|\n",l_tar_path);
//fflush(fl_userlog);
		//	system(l_tar_path);

			/*
			strcpy(l_mode_path,"chmod 755 ");
			strcat(l_mode_path,l_temp_path);
			strcat(l_mode_path,"*.*");

			fprintf(fl_userlog,"MODE PATH :|%s|\n",l_mode_path);
			//fflush(fl_userlog);
			system(l_mode_path);
			*/
			/*  Changes done By Hardik for ISKB_8078 start */
			printf("TAR PATH :|%s|\n",l_tar_path);
			strcpy(l_cd_temp_path,"cd ");
			strcat(l_cd_temp_path,l_temp_path);
	      	//system(l_cd_temp_path);
			chdir(l_temp_path);
			system("pwd");
			count1   = 		system(l_tar_path);
			fprintf(fl_userlog , "system execution return value1 is :: |%d|\n" , count1);
			//fflush(fl_userlog);
            if(count1 == 0)
			{
			fprintf(fl_userlog , "Tar Executed successfully ::\n");
			/*  Changes done By Hardik for ISKB_8078 End */
			strcpy(l_zip_path,"gzip -f ");
			//strcat(l_zip_path,l_temp_path);
			strcat(l_zip_path,l_file_name);
			strcat(l_zip_path,l_rep_id);
			strcat(l_zip_path,"_");
			strcat(l_zip_path,l_time_stamp);
			strcat(l_zip_path,".tar");

			fprintf(fl_userlog,"ZIP PATH :|%s|\n",l_zip_path);
			//fflush(fl_userlog);
			
			//system(l_cd_temp_path);
                        chdir(l_temp_path);
			system(l_zip_path);

			strcpy(l_remove_path,"rm -f ");
			strcat(l_remove_path,l_temp_path);
			strcat(l_remove_path,"*_");
			strcat(l_remove_path,l_rep_id);
			strcat(l_remove_path,l_file_extn);

			fprintf(fl_userlog,"REMOVE PATH :|%s|\n",l_remove_path);
			//fflush(fl_userlog);
			
			system(l_remove_path);

			strcpy(l_move_path,"mv ");
			strcat(l_move_path,l_temp_path);
			strcat(l_move_path,l_file_name);
			strcat(l_move_path,l_rep_id);
			strcat(l_move_path,"_");
			strcat(l_move_path,l_time_stamp);
			strcat(l_move_path,".tar");
			strcat(l_move_path,".gz  ");
			strcat(l_move_path,l_report_path);

			fprintf(fl_userlog,"MOVE PATH :|%s|\n",l_move_path);
			//fflush(fl_userlog);
		
			system(l_move_path);

			strcpy(l_common_name,l_file_name);
			strcat(l_common_name,l_rep_id);
			strcat(l_common_name,"_");
			strcat(l_common_name,l_time_stamp);
			strcat(l_common_name,".tar");
			strcat(l_common_name,".gz");
			
			strcpy(l_intl_rept_struct_ha.report_name,l_common_name);
			strcat(l_intl_rept_struct_ha.report_name,"\0");
			strcpy(l_intl_rept_struct_ha.report_desc,APL_REP_DESC);
			strcat(l_intl_rept_struct_ha.report_desc,"\0");
			strcpy(l_intl_rept_struct_ha.report_date,l_start_date);
			l_intl_rept_struct_ha.report_width = 100 ;
			strcpy(l_intl_rept_struct_ha.task_desc,"DynamicReport");
			strcpy(l_intl_rept_struct_ha.fe_be_ind,"B");
			strcpy(l_intl_rept_struct_ha.usr,l_user);

			 fprintf(fl_userlog,"Entering CO_Proc_RptIns10\n");
			 //fflush(fl_userlog);
			 fprintf(fl_userlog,"report_name:|%s|\n",l_intl_rept_struct_ha.report_name);
			 //fflush(fl_userlog);
			 fprintf(fl_userlog,"report_desc:|%s|\n",l_intl_rept_struct_ha.report_desc);
			 //fflush(fl_userlog);
			 fprintf(fl_userlog,"report_date:|%s|\n",l_intl_rept_struct_ha.report_date);
			 //fflush(fl_userlog);
			 //fprintf(fl_userlog,"report_width:|%ld|\n",l_intl_rept_struct_ha.report_width); Changes done for AIX Migration
			 fprintf(fl_userlog,"report_width:|%d|\n",l_intl_rept_struct_ha.report_width);
			 //fflush(fl_userlog);
			 fprintf(fl_userlog,"task_desc:|%s|\n",l_intl_rept_struct_ha.task_desc);
			 //fflush(fl_userlog);
			 fprintf(fl_userlog,"fe_be_ind:|%s|\n",l_intl_rept_struct_ha.fe_be_ind);
			 //fflush(fl_userlog);
			 fprintf(fl_userlog,"usr:|%s|\n",l_intl_rept_struct_ha.usr);
		   //fflush(fl_userlog);
		   // if(APL_FAILURE == CO_Proc_DBRptIns(l_intl_rept_struct_ha,l_debug_info_ptr))
if(APL_FAILURE == CO_Proc_DBRptIns(&l_intl_rept_struct_ha,l_debug_info_ptr))/* '&' added for removing core dump at runtime - AIX Migration*/
		    {
				fprintf(fl_userlog,"Error : Failure From CO_Proc_RptIns\n");
				//fflush(fl_userlog);
				printf("Error : Failure From CO_Proc_RptIns\n");
				//fflush(fl_userlog);
				APL_GOBACK_FAIL
		    }
		
		printf(" tar %s %s",l_common_name,l_report_path);
		sprintf(l_report_path_name,"%s%s",l_report_path,l_common_name);
		
		if((strlen(l_web_source_from) > 0) && !(strcmp(l_web_source_from,"W")))
		{
			EXEC SQL CALL SP_SHOW_REAL_TIME_REPORT_IN_WC(:l_common_name,:l_web_report_dt,:l_web_login_id,:l_report_path_name,:l_rep_id);
	
			if(sqlca.sqlcode < 0)
			{
				printf("Error : Failed From Stored Procedure SP_SHOW_REAL_TIME_REPORT_IN_WC ERR DESC :|%d|\n",sqlca.sqlcode);
				fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_SHOW_REAL_TIME_REPORT_IN_WC ERR DESC :|%d|\n",sqlca.sqlcode);
			}
		}
		
			/*  Changes done By Hardik for ISKB_8078 start */
			}
		else
		{
		 memset(l_tar_path,APL_NULL_CHAR,sizeof(l_tar_path));
		 strcpy(l_tar_path,"rm -f ");
		strcat(l_tar_path,l_temp_path);
                        strcat(l_tar_path,l_file_name);
                        strcat(l_tar_path,l_rep_id);
                        strcat(l_tar_path,"_");
                        strcat(l_tar_path,l_time_stamp);
                        strcat(l_tar_path,".tar ");
		 //fprintf(fl_userlog,"REMOVE PATH :|%s|\n",l_tar_path);
		printf("REMOVE PATH :|%s|\n",l_tar_path);
		//fflush(fl_userlog);
		 system (l_tar_path);
		 fprintf(fl_userlog," NO FILES FOR ZIP :: \n REMOVING TAR FROM TEMP PATH ::\n ");
		 //fflush(fl_userlog);
		}
	/*  Changes done By Hardik for ISKB_8078 End */		
	}

	fclose(l_init_file);
	
	APL_GOBACK_SUCCESS

RETURN_FAILURE:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE, "Exiting Unsuccessfully out of CO_ReportFileScript\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		fprintf(fl_userlog,"Exiting Unsuccessfully out of CO_ReportFileScript\n");
	}
	return (APL_FAILURE);

RETURN_SUCCESS:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting Succesfully out of CO_ReportFileScript\n",(DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		fprintf(fl_userlog,"Exiting Successfully out of CO_ReportFileScript\n");
	}
	return (APL_SUCCESS);
}


	/*Pasha Added for AMFI Enhancement Report Naming convention */

int CO_ReportFileScript_Format(char *p_rep_format,
			char *p_start_date,char *p_user,char *p_web_login_id,char *p_web_rpt_id,char *p_web_source_from,char *p_web_report_dt,char *p_web_proc_id,FILE *fl_userlog,
		      	DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	fprintf(fl_userlog,"Entering Inside CO_ReportFileScript_Format Function\n");
	

	FILE *l_init_file 				= (FILE *)NULL;
	char l_init_path[300]				= APL_NULL_STRING;
	char l_tar_path[2000]				= APL_NULL_STRING;
	char l_mode_path[2000]				= APL_NULL_STRING;
	char l_zip_path[2000]				= APL_NULL_STRING;
	char l_remove_path[2000]			= APL_NULL_STRING;
	char l_move_path[2000]				= APL_NULL_STRING;
	char l_common_name[2000]			= APL_NULL_STRING;
	char l_report_path[400]				= APL_NULL_STRING;
	char l_report_path_name[1000]				= APL_NULL_STRING;
	char l_temp_path[400]				= APL_NULL_STRING;
	char l_cd_temp_path[400]				= APL_NULL_STRING;
	char l_compress_flag[5]				= APL_NULL_STRING;
	char l_time_stamp[30]				= APL_NULL_STRING;
	char l_rep_id[200]				= APL_NULL_STRING;
	char l_rep_desc[200]				= APL_NULL_STRING;
	char l_rep_format[10]				= APL_NULL_STRING;
	char l_start_date[20]				= APL_NULL_STRING;
	char l_user[20]					= APL_NULL_STRING;

    //changes for report generation through api start
	char l_web_login_id[101]				= APL_NULL_STRING;
	char l_web_rpt_id[101]				= APL_NULL_STRING;
	char l_web_source_from[101]				= APL_NULL_STRING;
	char l_web_report_dt[101]				= APL_NULL_STRING;
	char l_web_proc_id[101]				= APL_NULL_STRING;
	//changes for report generation through api end

	char l_file_name[20]				= APL_NULL_STRING;
	char l_file_extn[10]				= APL_NULL_STRING;
	char  l_report_name_query[71]      		= APL_NULL_STRING;
	char  l_chr_rep_name[51]      		= APL_NULL_STRING;
	int l_int_rep_name_cnt =0;
		
	memset(l_init_path,APL_NULL_CHAR,sizeof(l_init_path));
	memset(l_report_path,APL_NULL_CHAR,sizeof(l_report_path));
	memset(l_report_path_name,APL_NULL_CHAR,sizeof(l_report_path_name));
	memset(l_temp_path,APL_NULL_CHAR,sizeof(l_temp_path));
	memset(l_cd_temp_path,APL_NULL_CHAR,sizeof(l_cd_temp_path));
	memset(l_tar_path,APL_NULL_CHAR,sizeof(l_tar_path));
	memset(l_mode_path,APL_NULL_CHAR,sizeof(l_mode_path));
	memset(l_zip_path,APL_NULL_CHAR,sizeof(l_zip_path));
	memset(l_remove_path,APL_NULL_CHAR,sizeof(l_remove_path));
	memset(l_move_path,APL_NULL_CHAR,sizeof(l_move_path));
	memset(l_common_name,APL_NULL_CHAR,sizeof(l_common_name));
	memset(l_chr_rep_name,APL_NULL_CHAR,sizeof(l_chr_rep_name));

	INTL_REPT_STRUCT_H   l_intl_rept_struct_ha;
	memset(&l_intl_rept_struct_ha,APL_NULL_CHAR,sizeof(INTL_REPT_STRUCT_H));
	
	strcpy(l_rep_format,p_rep_format);
	strcpy(l_start_date,p_start_date);
	strcpy(l_user,p_user);
	strcpy(l_web_login_id,p_web_login_id);
	strcpy(l_web_rpt_id,p_web_rpt_id);
	strcpy(l_web_source_from,p_web_source_from);
	strcpy(l_web_report_dt,p_web_report_dt);
	strcpy(l_web_proc_id,p_web_proc_id);

	EXEC SQL BEGIN DECLARE SECTION;

	EXEC SQL VAR l_report_name_query IS STRING;

	EXEC SQL END DECLARE SECTION;
	fprintf(fl_userlog,"l_rep_format:|%s|\n",l_rep_format);
	fprintf(fl_userlog,"l_start_date:|%s|\n",l_start_date);
	
	strcpy(l_init_path,getenv("INTL_ROOT_PATH"));
	strcat(l_init_path,"intl_sun.cfg");

	fprintf(fl_userlog,"l_init_path :|%s|\n",l_init_path);
	
	if((l_init_file = fopen(l_init_path,"r")) == (FILE *)NULL)
	{
		fprintf(fl_userlog,"Error : Failed to Open File PATH :|%s|\n",l_init_path);
		printf("Error : Failed to Open File PATH :|%s|\n",l_init_path);
		APL_GOBACK_FAIL
	}

	fprintf(fl_userlog,"Entering CO_ReadToken Function to read INTL_REP_PATH path \n");

	if (APL_FAILURE == CO_ReadToken(l_init_file,"INTL_REP_PATH",l_report_path,l_debug_info_ptr))
	{
		fprintf(fl_userlog,"Error :INTL_REP_PATH not set in intl_sun.cfg File \n");
		printf("Error :INTL_REP_PATH not set in intl_sun.cfg File \n");
		APL_GOBACK_FAIL
	}
	
	fprintf(fl_userlog,"Entering CO_ReadToken Function to read INTL_TEMP_PATH path \n");
	
	if (APL_FAILURE == CO_ReadToken(l_init_file,"INTL_TEMP_PATH",l_temp_path,l_debug_info_ptr))
	{
		fprintf(fl_userlog,"Error : INTL_TEMP_PATH not set in intl_sun.cfg File \n");
		printf("Error :INTL_TEMP_PATH not set in intl_sun.cfg File \n");
		APL_GOBACK_FAIL
	}


	EXEC SQL SELECT TO_CHAR(SYSDATE,'DD_MON_YYYY')||CHR(95)||TO_CHAR(SYSDATE,'HH24_MI_SS')
				INTO :l_time_stamp
				FROM DUAL;

	fprintf(fl_userlog,"TIME STAMP is :|%s|\n",l_time_stamp);

	fprintf(fl_userlog,"COMPRESS FLAG is 14:|%s|\n",l_compress_flag);


		if(!strcmp(l_rep_format,"*.XLS"))
		{
			strcpy(l_file_name,"XLS");
			strcpy(l_file_extn,"*.xls");
		}
		else if(!strcmp(l_rep_format,"*.CSV"))
		{
			strcpy(l_file_name,"CSV");
			strcpy(l_file_extn,"*.csv");
		}
		else
		{
			strcpy(l_file_name,"HTML");
			strcpy(l_file_extn,"*.htm");
		}


			strcpy(g_chr_dynamic_seq, APL_NULL_STRING);
			sprintf(g_chr_dynamic_seq,"%d",g_dynamic_seq);
			strcpy(l_report_name_query,"SELECT REPORT_NAME FROM REPORT_LIST WHERE SEQ_NO = ");
			strcat(l_report_name_query,g_chr_dynamic_seq);

			l_int_rep_name_cnt = 0;

			EXEC SQL PREPARE REPORT_NAME FROM :l_report_name_query;
			EXEC SQL DECLARE report_name_curr CURSOR FOR REPORT_NAME;
			EXEC SQL OPEN report_name_curr;
			fprintf(fl_userlog,"After OPEN report_name_curr:|%d|\n",sqlca.sqlcode);
			

		
			for(;;)
			{
				memset(l_tar_path,APL_NULL_CHAR,sizeof(l_tar_path));
				memset(l_chr_rep_name,APL_NULL_CHAR,sizeof(l_chr_rep_name));
				memset(l_remove_path,APL_NULL_CHAR,sizeof(l_remove_path));

				EXEC SQL FETCH report_name_curr INTO :l_chr_rep_name;

				fprintf(fl_userlog,"After Fetch report_name_curr:|%d|\n",sqlca.sqlcode);
				

				if(sqlca.sqlcode == 1403)
				break;

				if(sqlca.sqlcode < 0)
				{
					fprintf(fl_userlog,"Error : DEFAULT QUERY Critical Error Occured ORA ERROR:|%d|\n",sqlca.sqlcode);
					break;
				}

				if(l_int_rep_name_cnt == 0)
				{
					strcpy(l_tar_path,"tar -cvf ");
					//strcat(l_tar_path,l_temp_path);
					strcat(l_tar_path,l_file_name);
					strcat(l_tar_path,l_rep_id);
					strcat(l_tar_path,"_");
					strcat(l_tar_path,l_time_stamp);
					strcat(l_tar_path,".tar ");
					//strcat(l_tar_path,l_temp_path);
					strcat(l_tar_path,l_chr_rep_name);
				}
				else
				{
					strcpy(l_tar_path,"tar -uvf ");
					//strcat(l_tar_path,l_temp_path);
					strcat(l_tar_path,l_file_name);
					strcat(l_tar_path,l_rep_id);
					strcat(l_tar_path,"_");
					strcat(l_tar_path,l_time_stamp);
					strcat(l_tar_path,".tar ");
					//strcat(l_tar_path,l_temp_path);
					strcat(l_tar_path,l_chr_rep_name);
				}
				//system(l_cd_temp_path);
                                chdir(l_temp_path);
				system(l_tar_path);
				l_int_rep_name_cnt++;

				fprintf(fl_userlog,"TAR PATH :|%s|\n",l_tar_path);
				


				strcpy(l_remove_path,"rm -f ");
				strcat(l_remove_path,l_temp_path);
				strcat(l_remove_path,l_chr_rep_name);

				fprintf(fl_userlog,"REMOVE PATH :|%s|\n",l_remove_path);
				

				system(l_remove_path);

			}

			Alert("Before DELETE FROM REPORT_LIST:|%d|\n",g_dynamic_seq);

			EXEC SQL DELETE FROM REPORT_LIST WHERE SEQ_NO = :g_dynamic_seq;

			IS_ANY_ORA_ERROR

			Alert("After DELETE FROM REPORT_LIST:|%d|\n",sqlca.sqlcode);

			strcpy(l_zip_path,"gzip -f ");
			strcat(l_zip_path,l_temp_path);
			strcat(l_zip_path,l_file_name);
			strcat(l_zip_path,l_rep_id);
			strcat(l_zip_path,"_");
			strcat(l_zip_path,l_time_stamp);
			strcat(l_zip_path,".tar");

			fprintf(fl_userlog,"ZIP PATH :|%s|\n",l_zip_path);
			
			
			system(l_zip_path);

			strcpy(l_move_path,"mv ");
			strcat(l_move_path,l_temp_path);
			strcat(l_move_path,l_file_name);
			strcat(l_move_path,l_rep_id);
			strcat(l_move_path,"_");
			strcat(l_move_path,l_time_stamp);
			strcat(l_move_path,".tar");
			strcat(l_move_path,".gz  ");
			strcat(l_move_path,l_report_path);

			fprintf(fl_userlog,"MOVE PATH :|%s|\n",l_move_path);
			
		
			system(l_move_path);

			strcpy(l_common_name,l_file_name);
			strcat(l_common_name,l_rep_id);
			strcat(l_common_name,"_");
			strcat(l_common_name,l_time_stamp);
			strcat(l_common_name,".tar");
			strcat(l_common_name,".gz");
			
			strcpy(l_intl_rept_struct_ha.report_name,l_common_name);
			strcat(l_intl_rept_struct_ha.report_name,"\0");
			strcpy(l_intl_rept_struct_ha.report_desc,APL_REP_DESC);
			strcat(l_intl_rept_struct_ha.report_desc,"\0");
			strcpy(l_intl_rept_struct_ha.report_date,l_start_date);
			l_intl_rept_struct_ha.report_width = 100 ;
			strcpy(l_intl_rept_struct_ha.task_desc,"DynamicReport");
			strcpy(l_intl_rept_struct_ha.fe_be_ind,"B");
			strcpy(l_intl_rept_struct_ha.usr,l_user);

			 fprintf(fl_userlog,"Entering CO_Proc_RptIns11\n");
			
			 fprintf(fl_userlog,"report_name:|%s|\n",l_intl_rept_struct_ha.report_name);
			
			 fprintf(fl_userlog,"report_desc:|%s|\n",l_intl_rept_struct_ha.report_desc);
			 
			 fprintf(fl_userlog,"report_date:|%s|\n",l_intl_rept_struct_ha.report_date);
			 
			 // fprintf(fl_userlog,"report_width:|%ld|\n",l_intl_rept_struct_ha.report_width);
              fprintf(fl_userlog,"report_width:|%d|\n",l_intl_rept_struct_ha.report_width);
				
			 fprintf(fl_userlog,"task_desc:|%s|\n",l_intl_rept_struct_ha.task_desc);
			 
			 fprintf(fl_userlog,"fe_be_ind:|%s|\n",l_intl_rept_struct_ha.fe_be_ind);
			 
			 fprintf(fl_userlog,"usr:|%s|\n",l_intl_rept_struct_ha.usr);
		   
		    if(APL_FAILURE == CO_Proc_DBRptIns(l_intl_rept_struct_ha,l_debug_info_ptr))
		    {
				fprintf(fl_userlog,"Error : Failure From CO_Proc_RptIns\n");
				printf("Error : Failure From CO_Proc_RptIns\n");
				APL_GOBACK_FAIL
		    }
			sprintf(l_report_path_name,"%s%s",l_report_path,l_common_name);
				
			if((strlen(l_web_source_from) > 0) && !(strcmp(l_web_source_from,"W")))
			{
				EXEC SQL CALL SP_SHOW_REAL_TIME_REPORT_IN_WC(:l_common_name,:l_web_report_dt,:l_web_login_id,:l_report_path_name,:l_rep_id);
				
				if(sqlca.sqlcode < 0)
				{
					printf("Error : Failed From Stored Procedure SP_SHOW_REAL_TIME_REPORT_IN_WC ERR DESC :|%d|\n",sqlca.sqlcode);
					fprintf(fl_userlog,"Error : Failed From Stored Procedure SP_SHOW_REAL_TIME_REPORT_IN_WC ERR DESC :|%d|\n",sqlca.sqlcode);
				}
		    }
				
	
	fclose(l_init_file);
	
	APL_GOBACK_SUCCESS

RETURN_FAILURE:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE, "Exiting Unsuccessfully out of CO_ReportFileScript_Format\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		fprintf(fl_userlog,"Exiting Unsuccessfully out of CO_ReportFileScript_Format\n");
	//fflush(fl_userlog);
	}
	return (APL_FAILURE);

RETURN_SUCCESS:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting Succesfully out of CO_ReportFileScript_Format\n",(DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		fprintf(fl_userlog,"Exiting Successfully out of CO_ReportFileScript_Format\n");
	//	//fflush(fl_userlog);
	}
	return (APL_SUCCESS);
}



int CO_Rpt_StartProcedure(char *p_chr_rep_id,char *p_parameter1,
                          char *p_parameter2,char *p_parameter3,
		 	  char *p_parameter4,char *p_parameter5,
			  char *p_parameter6,FILE *fl_userlog,
			  DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	char l_param1[50] = APL_NULL_STRING;
	char l_param2[50] = APL_NULL_STRING;
	char l_param3[50] = APL_NULL_STRING;
	char l_param4[50] = APL_NULL_STRING;
	char l_param5[50] = APL_NULL_STRING;
	char l_param6[50] = APL_NULL_STRING;

	char l_error_desc[200] = APL_NULL_STRING;
	int l_error_no = 0;

	EXEC SQL VAR l_param1 IS STRING;
	EXEC SQL VAR l_param2 IS STRING;
	EXEC SQL VAR l_param3 IS STRING;
	EXEC SQL VAR l_param4 IS STRING;
	EXEC SQL VAR l_param5 IS STRING;
 	EXEC SQL VAR l_param6 IS STRING;


	strcpy(l_param1,p_parameter1);
	strcpy(l_param2,p_parameter2);
	strcpy(l_param3,p_parameter3);
	strcpy(l_param4,p_parameter4);
	strcpy(l_param5,p_parameter5);
	strcpy(l_param6,p_parameter6);

	fprintf(fl_userlog,"Entered Inside CO_Rpt_StartProcedure Function \n");
    
	fprintf(fl_userlog,"Calling SP_REPORT_START_PROC For REPORT ID :|%s|\n",p_chr_rep_id);
	printf("Calling SP_REPORT_START_PROC For REPORT ID :|%s|\n",p_chr_rep_id);
	//fflush(fl_userlog);
    
	EXEC SQL CALL SP_REPORT_START_PROC(:p_chr_rep_id,:l_param1,:l_param2,
					  :l_param3,:l_param4,:l_param5,
					  :l_param6,:l_error_no,:l_error_desc);

	fprintf(fl_userlog,"After SP_REPORT_START_PROC -- ORA Error :|%d|\n",l_error_no);
	printf("After SP_REPORT_START_PROC -- ORA Error :|%d|\n",l_error_no);
      
	if(strlen(l_error_desc) > 0)
	{		
		fprintf(fl_userlog,"%s\n",l_error_desc);
		printf("%s\n",l_error_desc);
	}


APL_GOBACK_SUCCESS

RETURN_FAILURE:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE, "Exiting Unsuccessfully out of CO_Rpt_StartProcedure \n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		fprintf(fl_userlog,"Exiting Unsuccessfully out of CO_Rpt_StartProcedure \n");
	}
	return (APL_FAILURE);

RETURN_SUCCESS:

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting Succesfully out of CO_Rpt_StartProcedure \n",(DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		fprintf(fl_userlog,"Exiting Successfully out of CO_Rpt_StartProcedure \n");
	}
	return (APL_SUCCESS);

}

int CO_Rpt_StopProcedure(char *p_chr_rep_id,char *p_parameter1,
                         char *p_parameter2,char *p_parameter3,
			 char *p_parameter4,char *p_parameter5,
			 char *p_parameter6,FILE *fl_userlog,
			 DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	char l_param1[200] = APL_NULL_STRING;
	char l_param2[200] = APL_NULL_STRING;
	char l_param3[200] = APL_NULL_STRING;
	char l_param4[200] = APL_NULL_STRING;
	char l_param5[200] = APL_NULL_STRING;
	char l_param6[200] = APL_NULL_STRING;

	char l_error_desc[200] = APL_NULL_STRING;
	int l_error_no = 0;

	EXEC SQL VAR l_param1 IS STRING;
	EXEC SQL VAR l_param2 IS STRING;
	EXEC SQL VAR l_param3 IS STRING;
	EXEC SQL VAR l_param4 IS STRING;
	EXEC SQL VAR l_param5 IS STRING;
	EXEC SQL VAR l_param6 IS STRING;


	strcpy(l_param1,p_parameter1);
	strcpy(l_param2,p_parameter2);
	strcpy(l_param3,p_parameter3);
	strcpy(l_param4,p_parameter4);
	strcpy(l_param5,p_parameter5);
	strcpy(l_param6,p_parameter6);

	fprintf(fl_userlog,"Entered Inside CO_Rpt_StopProcedure Function \n");

	fprintf(fl_userlog,"Calling SP_REPORT_STOP_PROC For REPORT ID :|%s|\n",p_chr_rep_id);
	
	printf("Calling SP_REPORT_STOP_PROC For REPORT ID :|%s|\n",p_chr_rep_id);
   
	EXEC SQL CALL SP_REPORT_STOP_PROC(:p_chr_rep_id,:l_param1,:l_param2,
					  :l_param3,:l_param4,:l_param5,
					  :l_param6,:l_error_no,:l_error_desc);

	fprintf(fl_userlog,"After SP_REPORT_STOP_PROC -- ORA Error :|%d|\n",l_error_no);
	printf("After SP_REPORT_STOP_PROC -- ORA Error :|%d|\n",l_error_no);

	if(strlen(l_error_desc) > 0)
	{		
		fprintf(fl_userlog,"%s\n",l_error_desc);
		printf("%s\n",l_error_desc);
	}


APL_GOBACK_SUCCESS

RETURN_FAILURE:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE, "Exiting Unsuccessfully out of CO_Rpt_StopProcedure \n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		fprintf(fl_userlog,"Exiting Unsuccessfully out of CO_Rpt_StopProcedure \n");
	}
	return (APL_FAILURE);

RETURN_SUCCESS:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting Succesfully out of CO_Rpt_StopProcedure \n",(DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		fprintf(fl_userlog,"Exiting Successfully out of CO_Rpt_StopProcedure \n");
	}
	return (APL_SUCCESS);
}

