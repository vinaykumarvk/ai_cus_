/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to 
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or 
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*******************************************************************************
 *
 * Module Name         :         Dynamic Reports	
 *
 * File Name           :         DynamicReport.pc
 *
 * Description         :         This file contains all functions for Reports.
 *
 *            Version Control Block
 *
 * Date        Version		Author              Description		RFS No.
 * ---------   --------	 ---------------  ----------------   ----------------
 * 18/08/2006   1.0        Vinay kalaskar			New File	    
 * 23/04/2022   1.1        Kotubabu                             Linux Migration
 * *****************************************************************************/


#include "Reports_Common.h"
#include "Intellect_Interface.h"
#include "CO_IndStructdef.h"

#define 	STRSEP '|'
#define	PARAMSEP       '' 
#define	FIELDVALSEP		''

char  chr_g_progname        [APL_BATCH_PROGNAME_LEN] = APL_NULL_STRING;
char  chr_g_key             [APL_BATCH_KEY_LEN] = APL_NULL_STRING;
char  chr_g_start_date      [APL_DATE_LEN] = APL_NULL_STRING;
char  chr_g_to_date 	    [APL_DATE_LEN] = APL_NULL_STRING;
char  chr_g_user	    [APL_USERID_LEN] = APL_NULL_STRING;
/* Added by kotubabu  for Linux Migration -START*/
#ifdef OS_LINUX
FILE* g_logfile =NULL;
#else
FILE* g_logfile         = APL_OUT_FILE;
#endif
/* Added by kotubabu for Linux Migration -END*/

 /* Added by pasha for AMFI Enhancement on 17/11/2009 */ 
int g_dynamic_seq;
char g_chr_dynamic_seq[10];

EXEC SQL INCLUDE SQLCA.H;

int main(int argc,char *argv[])
{	

        /*  Added by kotubabu for Linux Migration -START*/
        #ifdef OS_LINUX
          g_logfile = APL_OUT_FILE;
        #else
          APL_FUNCTION_ENTER(g_logfile)
        #endif
        /*  Added by kotubabu for Linux Migration -END*/

	DEBUG_INFO_STRUCT_H   *l_debug_info_struct = NULL;
	DEBUG_INFO_STRUCT_H   **l_debug_info_ptr = &l_debug_info_struct;	
   	INTL_ENV_DATA_STRUCT_H *l_intl_env_data_h=NULL;

  	FILE *p_logfile  = (FILE *) NULL;
	FILE *fl_userlog = (FILE *) NULL;

  	char	l_chr_paramstr[3000]	=	APL_NULL_STRING;
  	char    **chr_param_list	=	NULL;
  	char	l_rept_id[11]		=	APL_NULL_STRING;
  	char	l_chr_repformat[10]	=	APL_NULL_STRING;
  	char	l_chr_repname[30]	=	APL_NULL_STRING;
  	char	l_chr_compress_flag[5]	=	APL_NULL_STRING;
  	char	l_default_param[5]	=	APL_NULL_STRING;
  	int 	l_int_no_elm		=	0;
	
	char  l_start_time[20]		=  APL_NULL_STRING;
	char  l_end_time[20]		=  APL_NULL_STRING;
	char  l_total_time[20]		=  APL_NULL_STRING;
  
	char chr_uname[APL_USERID_LEN] = APL_NULL_STRING;
   	char chr_custody_id_b[APL_USERID_LEN] = APL_NULL_STRING;
   	char chr_passwd[APL_PASSWD_LEN] = APL_NULL_STRING;
	char chr_l_inifile[PATH_LENGTH] = APL_NULL_STRING;
	 
	//changes for report generation through api start
	char l_web_login_id[101]				= APL_NULL_STRING;
	char l_web_rpt_id[101]				= APL_NULL_STRING;
	char l_web_source_from[101]				= APL_NULL_STRING;
	char l_web_report_dt[101]				= APL_NULL_STRING;
	char l_web_proc_id[101]				= APL_NULL_STRING;
	//changes for report generation through api end
	 
 	EXEC SQL BEGIN DECLARE SECTION;	
   	EXEC SQL VAR chr_uname IS STRING;
   	EXEC SQL VAR chr_custody_id_b IS STRING;
   	EXEC SQL VAR chr_passwd IS STRING;
   	EXEC SQL VAR l_start_time IS STRING;
   	EXEC SQL VAR l_end_time IS STRING;
	 
	EXEC SQL END DECLARE SECTION;
	
	fflush(stdout);

	l_debug_info_ptr = (DEBUG_INFO_STRUCT_H **)calloc(1,sizeof(DEBUG_INFO_STRUCT_H *));
		
	if (  CO_SplitStr(argv[9],STRSEP,&l_int_no_elm,&chr_param_list) == APL_FAILURE)
	{
		CO_ProcMonitor(g_logfile, "Failure from StrSplitFn", NULL, NULL);
		APL_GOBACK_FAIL
	}

	strcpy(chr_g_start_date,argv[2]);	
	strcpy(chr_g_progname,argv[0]);	
	strcpy(chr_g_key,argv[1]);	
	strcpy(chr_g_user,argv[3]);	

	printf("chr_g_start_date:|%s|\n",chr_g_start_date);

	strcpy(l_rept_id,chr_param_list[0]);
	strcpy(l_chr_repname,chr_param_list[1]);
	strcpy(l_chr_repformat,chr_param_list[2]);
	strcpy(l_chr_compress_flag,chr_param_list[3]);
	strcpy(l_chr_paramstr,chr_param_list[4]);

	printf("l_int_no_elm:|%d|\n",l_int_no_elm);
	
	if(l_int_no_elm == 6)
	{
		strcpy(l_default_param,chr_param_list[5]);
	}

	if(l_int_no_elm == 11)
	{
		strcpy(l_default_param,chr_param_list[5]);
		strcpy(l_web_login_id,chr_param_list[6]);
		strcpy(l_web_rpt_id,chr_param_list[7]);
		strcpy(l_web_source_from,chr_param_list[8]);
		strcpy(l_web_report_dt,chr_param_list[9]);
		strcpy(l_web_proc_id,chr_param_list[10]);
	}
	

	printf("l_rept_id:|%s|\n",l_rept_id);
	printf("l_chr_repname:|%s|\n",l_chr_repname);
	printf("l_chr_repformat:|%s|\n",l_chr_repformat);
	printf("l_chr_compress_flag:|%s|\n",l_chr_compress_flag);
	printf("l_default_param:|%s|\n",l_default_param);
	printf("l_web_login_id:|%s|\n",l_web_login_id);
	printf("l_web_rpt_id:|%s|\n",l_web_rpt_id);
	printf("l_web_source_from:|%s|\n",l_web_source_from);
	printf("l_web_report_dt:|%s|\n",l_web_report_dt);
	printf("l_web_proc_id:|%s|\n",l_web_proc_id);
			
	fflush(stdout);

   	if(CO_Get_DBConnect(l_debug_info_ptr) == APL_FAILURE)
   	{
		APL_GOBACK_FAIL
   	}	
		
	fflush(stdout);

	if(APL_FAILURE == CO_Rtv_RptFileName("VR",
						APL_LOGFILE_DESC,
						100,
						argv[5],
						argv,
						&fl_userlog,
						l_debug_info_ptr))
	{
		printf("Failure From CO_Rtv_RptFileName Function |VR|\n");
		exit(-1);
	}

	
		
	if(BT_Status_Update(argv[0],
					argv[1],
					argv[2],
					APL_STARTED_STATUS,
					l_debug_info_ptr) ==APL_FAILURE)
	{
		fprintf(fl_userlog,"Failed To Update Batch Status \n");
		printf("Failed To Update Batch Status \n");
		APL_GOBACK_FAIL
	}
	
	EXEC SQL SELECT SYSDATE INTO :l_start_time FROM DUAL;

	fprintf(fl_userlog,"PERFORMANCE START TIME :|%s|\n",l_start_time);
	
	CO_ProcMonitor(g_logfile, "CALLING DynamicReportFn", NULL, NULL);

	fprintf(fl_userlog,"Entering DynamicReportFn Function For Report ID :|%s||%s|\n",l_rept_id,l_chr_repformat);
		
 /* Added by pasha for AMFI Enhancement on 17/11/2009 */ 
	g_dynamic_seq = 0;
	g_chr_dynamic_seq[10] = APL_NULL_STRING;
	EXEC SQL SELECT DYNAMIC_SEQ.NEXTVAL INTO :g_dynamic_seq FROM DUAL;

	fprintf(fl_userlog,"After LOGICAL_SEQ -- :|%d|\n",sqlca.sqlcode);

	IS_ANY_ORA_ERROR

	fprintf(fl_userlog,"g_dynamic_seq :|%d|\n",g_dynamic_seq);

	fflush(stdout);

   /* End of Change */
		
	if(DynamicReportFn(l_rept_id,l_chr_repname,l_chr_repformat,l_chr_paramstr,chr_g_start_date,
							 l_chr_compress_flag,l_default_param,l_web_login_id,l_web_rpt_id,l_web_source_from,l_web_report_dt,l_web_proc_id,chr_g_user,fl_userlog,l_debug_info_ptr) == APL_FAILURE)
	{
		CO_ProcMonitor(g_logfile, "Failure from DynamicReportFn",NULL,NULL); 
		fprintf(fl_userlog,"Failure From DynamicReportFn Function for Report ID :|%s||%s|\n",l_rept_id,l_chr_repformat);
		APL_GOBACK_FAIL	
	}
	

	
	EXEC SQL SELECT SYSDATE INTO :l_end_time FROM DUAL;

	fprintf(fl_userlog,"PERFORMANCE END TIME :|%s|\n",l_end_time);
	
	EXEC SQL SELECT ROUND(((TO_DATE(:l_end_time,'DD/MM/YYYY HH24:MI:SS')- 
		         TO_DATE(:l_start_time,'DD/MM/YYYY HH24:MI:SS'))*(24*60*60)),2) 
		 INTO :l_total_time
		 FROM DUAL;

	fprintf(fl_userlog,"After l_total_time ... ORA Error :|%d|\n",sqlca.sqlcode);
        printf("After l_total_time ... ORA Error :|%d|\n",sqlca.sqlcode);

	fprintf(fl_userlog,"TOTAL TIME TAKEN TO GENERATE REPORT IS <%s> Seconds\n",l_total_time);
	printf("TOTAL TIME TAKEN TO GENERATE REPORT IS |%s| Seconds\n",l_total_time);
	
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:
	{
		CO_ProcMonitor(g_logfile,"Success From DynamicReport",NULL,NULL);
		fprintf(fl_userlog,"Successfully Generated the Report with Report ID :|%s|\n",l_rept_id);
		CO_Proc_RptClose(fl_userlog,l_debug_info_ptr);

		if(APL_FAILURE == BT_Status_Completed( argv[0],
				argv[1],
				argv[2],
				l_debug_info_ptr))
		APL_GOBACK_FAIL
			
		EXEC SQL COMMIT;
		IS_ANY_ORA_ERROR
		exit(0);
	}


	RETURN_FAILURE  :
	{
		EXEC SQL ROLLBACK ;
		CO_ProcMonitor(g_logfile,"Failure From DynamicReport",l_debug_info_ptr,NULL);
		fprintf(fl_userlog,"Failure in Generating the Report with Report ID :|%s|\n",l_rept_id);
		CO_Proc_RptClose(fl_userlog,l_debug_info_ptr);
		exit(-1);
	}
}


