













 
#include "Intellect_Common.h"
EXEC SQL INCLUDE SQLCA.H;

int EI_Chk_SMIElg(char *p_loccode,
									 char *p_dealdate,
									 char *p_typeofdeal,
									 char *p_instr_code,
									 char *p_locnchng_flg,
									 char *p_ora_rowid,
									 int *int_p_smieligibility_flg,
									 INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
    	                      DEBUG_INFO_STRUCT_H **l_debug_info_ptr
									 )
{
		
		char  h_typeofinstr[4] = APL_NULL_STRING;
		char  h_ipo_ind[2] = APL_NULL_STRING;
		char  h_ipo_valid_date[20] = APL_NULL_STRING;
		short i_ipo_valid_date = 0;
		short i_typeofinstr = 0;
		short i_ipo_ind = 0;
		int int_l_diff = 0;
		char  h_dealcd[2] = APL_NULL_STRING;
		short i_dealcd = 0;
		char  h_info1[261] = APL_NULL_STRING;
		short i_info1 = 0;
		struct sqlca sqlca;

		#ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   	#endif


		EXEC SQL VAR h_typeofinstr IS STRING;
		EXEC SQL VAR h_ipo_ind IS STRING;
		EXEC SQL VAR h_ipo_valid_date IS STRING;
		EXEC SQL VAR h_dealcd IS STRING;
		EXEC SQL VAR h_info1 IS STRING;

		APL_IF_DEBUG
		{
		CO_ProcMonitor(APL_OUT_FILE, 
               "Entered Function EI_Chk_SMIElg\n",
                NULL,
                NULL);
		}

		
		if ((strcmp(p_loccode,"CSD") != 0) && (strcmp(p_loccode,"STLD") != 0))
			{
			CO_ProcMonitor(APL_OUT_FILE,
						"LOCATION CODE SHOULD BE EITHER CSD OR STLD\n",
						NULL,
						NULL);
			*int_p_smieligibility_flg = 0;	
			APL_GOBACK_SUCCESS
			}

		
		if (p_locnchng_flg[0] == 'Y')
			{
         CO_ProcMonitor(APL_OUT_FILE,
                  "TRADE GENERATED OUT OF LOCATION CHANGES\n",
                  NULL,
                  NULL);
			*int_p_smieligibility_flg = 0;	
         APL_GOBACK_SUCCESS
         }
			
		
		if ((strcmp(p_typeofdeal,"1") != 0) && (strcmp(p_typeofdeal,"26") != 0) && (strcmp(p_typeofdeal,"31") != 0) && (strcmp(p_typeofdeal,"35") != 0))
			{
			CO_ProcMonitor(APL_OUT_FILE,
                  "TYPE OF TRADE SHOULD BE EITHER 1 OR 26 OR 31 OR 35\n",
                  NULL,
                  NULL);
			*int_p_smieligibility_flg = 0;
         APL_GOBACK_SUCCESS
			}


		EXEC SQL SELECT INSTR_TYPE,IPO_IND,VALID_IPO_DATE
		INTO :h_typeofinstr:i_typeofinstr,:h_ipo_ind:i_ipo_ind,:h_ipo_valid_date:i_ipo_valid_date
		FROM MT_INSTRUMENT
		WHERE INSTR_CODE=RTRIM(:p_instr_code);

		IS_ANY_ORA_ERROR

		if(h_ipo_ind[0] == 'Y')
		{
		
		if((strcmp(h_typeofinstr,APL_INSTRU_SHARE) != 0) && (strcmp(h_typeofinstr,APL_INSTRU_RIGHTS) != 0))  
			{
			CO_ProcMonitor(APL_OUT_FILE,
                  "TYPE OF INSTRUMENT SHOULD BE SHS\n",
                  NULL,
                  NULL);
         *int_p_smieligibility_flg = 0;
         APL_GOBACK_SUCCESS
			}
  
		
		if (CO_Pro_DateComp(h_ipo_valid_date,p_dealdate,&int_l_diff,l_debug_info_ptr) != APL_SUCCESS)
      	APL_GOBACK_FAIL
	
			
			if (int_l_diff < 0) 
			{
         CO_ProcMonitor(APL_OUT_FILE,
                  "TRADE DATE SHOULD BE GREATER THAN OR EQUAL TO IPO VALID DATE\n",
                  NULL,
                  NULL);
         *int_p_smieligibility_flg = 0;
         APL_GOBACK_SUCCESS
         }
		}

	else if (h_ipo_ind[0] == 'N')
	{
		if((strcmp(h_typeofinstr,APL_INSTRU_SHARE) != 0) && (strcmp(h_typeofinstr,APL_INSTRU_RIGHTS) != 0))  
         {
         CO_ProcMonitor(APL_OUT_FILE,
                  "TYPE OF INSTRUMENT SHOULD BE SHS\n",
                  NULL,
                  NULL);
         *int_p_smieligibility_flg = 0;
         APL_GOBACK_SUCCESS
         }
	}
	
	*int_p_smieligibility_flg = 1;
	APL_GOBACK_SUCCESS

RETURN_SUCCESS:
	return (APL_SUCCESS);

RETURN_FAILURE:
   *int_p_smieligibility_flg = 0;
	return (APL_FAILURE);
}
