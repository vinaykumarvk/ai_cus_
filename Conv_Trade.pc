















#include "CO_HostStructdef.h"
#include "CA_InterFace.h"

EXEC SQL INCLUDE SQLCA.H;

#define  RTV_SYSTEM_DATA


/* Added by kotubabu for Linux Migration -Start*/
#ifdef OS_LINUX
FILE*                g_inifile;
FILE*                g_logfile;
FILE*                l_pr_filept;
FILE*                l_po_filept;
#else
FILE *g_inifile = APL_OUT_FILE;
FILE *g_logfile = APL_OUT_FILE;
FILE *l_pr_filept = APL_OUT_FILE;
FILE *l_po_filept = APL_OUT_FILE;
#endif
/* Added by kotubabu  for Linux Migration -END*/
char                 chr_g_progname        [APL_BATCH_PROGNAME_LEN]= APL_NULL_STRING;
char                 chr_g_key             [APL_BATCH_KEY_LEN]= APL_NULL_STRING;
char                 chr_g_STARTDATE      [APL_DATE_LEN]= APL_NULL_STRING;
char                 chr_g_funccode        [CA_FUNC_CD_LEN]= APL_NULL_STRING;
char                 chr_g_sys_date        [APL_DATE_LEN]= APL_NULL_STRING;
char                 chr_g_sys_date_time   [APL_DATE_LEN]= APL_NULL_STRING;
char                 chr_g_client         [APL_CLIENT_LENGTH]= APL_NULL_STRING;
char                 chr_g_log_buff[MSG_LENGTH]= APL_NULL_STRING;
char                 chr_g_old_ccy      [4]         = APL_NULL_STRING;
char                 chr_g_new_ccy      [4]         = APL_NULL_STRING;


int Conv_Trade( INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h,
								DEBUG_INFO_STRUCT_H      **l_debug_info_ptr);

int rep_func_trade(char *p_pre_post,
									INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h,
									DEBUG_INFO_STRUCT_H      **l_debug_info_ptr);

char get_filename(char *p_pre_post, char *p_tablename, char *p_fileheader,FILE *p_filefp,
							INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h, DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

 


//main(int argc, char **argv)
int main(int argc,char **argv)//Changes done for AIX Migration
{
	/* Added by kotubabu for Linux Migration -Start*/
   #ifdef OS_LINUX
    g_inifile = APL_OUT_FILE;
    g_logfile = APL_OUT_FILE;
    l_pr_filept = APL_OUT_FILE;
    l_po_filept = APL_OUT_FILE;
   #endif
   /* Added by kotubabu for Linux Migration -END*/
	struct sqlca sqlca;

	
   
	DEBUG_INFO_STRUCT_H         **l_debug_info_ptr=NULL,
								*l_debug_info_struct=NULL;
	INTL_ENV_DATA_STRUCT_H   p_intlenv_data_struct_h;
	char                 chr_inifile[PATH_LENGTH]= APL_NULL_STRING;
	char                 chr_logfile[PATH_LENGTH]= APL_NULL_STRING;
	char                 chr_custody_id_b[APL_USERID_LEN];
 
     
	EXEC SQL BEGIN DECLARE SECTION;
	char chr_uname[APL_USERID_LEN];
	char chr_passwd[APL_PASSWD_LEN];
	EXEC SQL END DECLARE SECTION;

	EXEC SQL VAR chr_uname IS STRING;
	EXEC SQL VAR chr_passwd IS STRING;

	l_debug_info_ptr = &l_debug_info_struct;

	strcpy(chr_g_old_ccy, CONV_FROM_TRL);
	strcpy(chr_g_new_ccy, CONV_TO_TRY);
	
	
	strcpy(chr_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_inifile,"/intl_sun.cfg");

	if ( ( g_inifile=fopen(chr_inifile,"r") ) == NULL)
	exit(-1);

	APL_FETCH_DB_LOGIN_DETAILS(g_inifile,chr_custody_id_b,chr_uname,chr_passwd,APL_OUT_FILE,l_debug_info_ptr)
	EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;
	IS_ANY_ORA_ERROR

	
	if ( CO_Rtv_RptFileName("Trade",
								APL_LOGFILE_DESC,
								100,
								argv[5],
								argv,
								&g_logfile,
								l_debug_info_ptr) ==APL_FAILURE)
	{
		APL_GOBACK_FAIL	
	}

   if ( CO_Rtv_RptFileName("PrTRADE",
                        "Pre-Conv Transactions Data",
                        100,
                        argv[5],
                        argv,
                        &l_pr_filept,
                        l_debug_info_ptr) ==APL_FAILURE)
   {
      exit(-1);
   }

   if ( CO_Rtv_RptFileName("PoTRADE",
                        "Post-Conv Transactions Data",
                        100,
                        argv[5],
                        argv,
                        &l_po_filept,
                        l_debug_info_ptr) ==APL_FAILURE)
   {
      exit(-1);
   }

	EXEC SQL COMMIT;
	IS_ANY_ORA_ERROR

	
	if ( argc < 4 )
	{
	CO_ProcMonitor(g_logfile,"All Arguments expected by  program not passed \n",NULL
				,NULL);
	APL_GOBACK_FAIL
	}
	
	strcpy(chr_g_progname,   argv[0]);
	strcpy(chr_g_key,        argv[1]);
	strcpy(chr_g_STARTDATE, argv[2]);
	strcpy(chr_g_funccode,argv[5]);
	
	
	if ( CO_RtvSysParams(l_debug_info_ptr) == APL_FAILURE)
	APL_GOBACK_FAIL
	if(CO_RtvSysDt(chr_g_sys_date,l_debug_info_ptr)==APL_FAILURE)
	APL_GOBACK_FAIL

	
   
	if ( Conv_Trade(&p_intlenv_data_struct_h,
						 l_debug_info_ptr) == APL_FAILURE)
      
	APL_GOBACK_FAIL

	
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS:
	{
	EXEC SQL UPDATE SYS_BATCHPROC
			SET STATUS        = 'completed'
			WHERE process_name    =  RTRIM(:argv[0])
			AND   proc_init         =  RTRIM(:argv[1])
			AND   STARTDATE   =  :argv[2]
			AND   STATUS      =  'started';
	
	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"BATCH_IN_PROC",chr_g_progname,chr_g_key)

	EXEC SQL COMMIT;
	IS_ANY_ORA_ERROR

	CO_ProcMonitor(g_logfile,"Commit Completed \n",NULL,NULL);

	sprintf(chr_g_log_buff,"T:Currency Conversion for Trade exiting successfully\n");
	CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);
	
	CO_ProcMonitor(APL_OUT_FILE,
				"Currency Conversion for Trade exiting successfully",
				NULL,
				NULL);

	fclose(g_logfile);
	fclose(l_pr_filept);
	fclose(l_po_filept);
	exit(0);
	}
	
	RETURN_FAILURE:
	{
	EXEC SQL ROLLBACK;
	IS_ANY_ORA_ERROR
	CO_ProcMonitor(g_logfile,"ROLLING BACK \n",NULL,NULL);

	sprintf(chr_g_log_buff,"T:TRL-TRY conversion for Trade exiting with failure\n");
	CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);
	
	CO_ProcMonitor(APL_OUT_FILE,
				"Currency Conversion for Trade exiting errors",
				NULL,
				NULL);

	fclose(g_logfile);
	fclose(l_pr_filept);
	fclose(l_po_filept);
	exit(-1);
	}
} 



int Conv_Trade(INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h,
					DEBUG_INFO_STRUCT_H      **l_debug_info_ptr)

{
	int int_l_amt_dec_len = 0;
   int int_l_fmt_dec_len = 0;
   int int_l_eqt_dec_len = 0;
   int int_l_max_dec_len	= 0;

   short i_amt_dec_len = 0;	
   short i_fmt_dec_len = 0;
   short i_eqt_dec_len = 0;


	int int_l_conv_amt = CONV_AMT;
	int int_l_conv_qty = CONV_QTY;

	struct sqlca sqlca;

	#ifdef APL_THREADS
	APL_SET_CONTEXT
	EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;
   
	
	APL_IF_DEBUG
	{
	CO_ProcMonitor(APL_OUT_FILE,
				"Entered Function Conv_Trade\n",
				NULL,
				NULL);
	}


   EXEC SQL SELECT AMOUNT_DECIMAL_LEN
            INTO :int_l_amt_dec_len:i_amt_dec_len
            FROM MT_CORE_SYS_PARAMS;

   IS_ANY_ORA_ERROR;


   EXEC SQL SELECT FIELD_VAL
            INTO :int_l_fmt_dec_len:i_fmt_dec_len
            FROM PRO_GSSPLVAL
            WHERE MAIN_FUN = 'QUANTITY_DEC_LEN'
            AND SUB_PROCESS = 'DEC_FOR_BONDS'
            AND NATION = 'TR';

   IS_ANY_ORA_ERROR;


   EXEC SQL SELECT FIELD_VAL
            INTO :int_l_eqt_dec_len:i_eqt_dec_len
            FROM PRO_GSSPLVAL
            WHERE MAIN_FUN = 'QUANTITY_DEC_LEN'
            AND SUB_PROCESS = 'DEC_FOR_EQUITIES'
            AND NATION = 'TR';

   IS_ANY_ORA_ERROR;


	if (int_l_eqt_dec_len > int_l_fmt_dec_len)
		int_l_max_dec_len = int_l_eqt_dec_len;
	else 
		int_l_max_dec_len = int_l_fmt_dec_len;	


	if (rep_func_trade("Pr",p_intlenv_data_struct_h,l_debug_info_ptr) ==APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}


	

	EXEC SQL UPDATE DL_DEAL
			SET COST    = ROUND((COST/:int_l_conv_amt), :int_l_amt_dec_len),
				AMOUNT    = ROUND((AMOUNT/:int_l_conv_amt), :int_l_amt_dec_len),
				CUSTODYCOMM   = ROUND((CUSTODYCOMM/:int_l_conv_amt), :int_l_amt_dec_len),
				BROKERCOMM   = ROUND((BROKERCOMM/:int_l_conv_amt), :int_l_amt_dec_len),
				STX_COMM   = ROUND((STX_COMM/:int_l_conv_amt), :int_l_amt_dec_len),
				OTH_COMM   = ROUND((OTH_COMM/:int_l_conv_amt), :int_l_amt_dec_len),
				ORIG_AMOUNT   = ROUND((ORIG_AMOUNT/:int_l_conv_amt), :int_l_amt_dec_len),
				AMT_DIFFER   = ROUND((AMT_DIFFER/:int_l_conv_amt), :int_l_amt_dec_len),
				CP_AMT  = ROUND((CP_AMT/:int_l_conv_amt), :int_l_amt_dec_len),
				CURRENCY_CD   = :chr_g_new_ccy
			WHERE DEAL_STAT NOT IN ('CS')
				 AND INSTR_CODE IN ( SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE CURRENCY_CD = :chr_g_new_ccy);
   
	IS_ANY_ORA_ERROR; 

	sprintf(chr_g_log_buff,"Updated |%d| row(s) in DL_DEAL table for amounts\n",sqlca.sqlerrd[2]);
	CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);

	printf("Updated |%d| row(s) in DL_DEAL table for amounts\n",sqlca.sqlerrd[2]);

	EXEC SQL UPDATE DL_DEAL
			SET QTY   	 = ROUND((QTY/:int_l_conv_amt), :int_l_max_dec_len),
				ORIG_QTY   = ROUND((ORIG_QTY/:int_l_conv_amt), :int_l_max_dec_len)
			WHERE INSTR_CODE IN ( SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE INSTR_TYPE IN ('FMT', 'BON') AND CURRENCY_CD = :chr_g_new_ccy) 
			AND DEAL_STAT NOT IN ('CS'); 
 
	IS_ANY_ORA_ERROR;

	sprintf(chr_g_log_buff,"Updated |%d| row(s) in DL_DEAL table for FMT instrument\n",sqlca.sqlerrd[2]);
	CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);

	printf("Updated |%d| row(s) in DL_DEAL table for FMT instrument\n",sqlca.sqlerrd[2]);
   
	EXEC SQL UPDATE DL_DEAL
			SET QTY   	 = ROUND((QTY/:int_l_conv_qty), :int_l_max_dec_len),
				ORIG_QTY   = ROUND((ORIG_QTY/:int_l_conv_qty), :int_l_max_dec_len)
			WHERE INSTR_CODE IN (SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE INSTR_TYPE NOT IN ('FMT', 'BON') AND CURRENCY_CD = :chr_g_new_ccy)
			AND DEAL_STAT NOT IN ('CS');

	IS_ANY_ORA_ERROR;

	sprintf(chr_g_log_buff,"Updated |%d| row(s) in DL_DEAL table for NON-FMT instrument\n",sqlca.sqlerrd[2]);
	CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);

	printf("Updated |%d| row(s) in DL_DEAL table for NON-FMT instrument\n",sqlca.sqlerrd[2]);
   



	 

	EXEC SQL UPDATE DL_DEALREPAIR
			SET COST  = ROUND((COST/:int_l_conv_amt), :int_l_amt_dec_len),
				AMOUNT  = ROUND((AMOUNT/:int_l_conv_amt), :int_l_amt_dec_len),
				CUSTODYCOMM = ROUND((CUSTODYCOMM/:int_l_conv_amt), :int_l_amt_dec_len),
				BROKERCOMM = ROUND((BROKERCOMM/:int_l_conv_amt), :int_l_amt_dec_len),
				STX_COMM = ROUND((STX_COMM/:int_l_conv_amt), :int_l_amt_dec_len),
				OTH_COMM = ROUND((OTH_COMM/:int_l_conv_amt), :int_l_amt_dec_len),
				CURRENCY_CD   = :chr_g_new_ccy
			WHERE INSTR_CODE IN ( SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE CURRENCY_CD = :chr_g_new_ccy);

	IS_ANY_ORA_ERROR;

	sprintf(chr_g_log_buff,"Updated |%d| row(s) in CTRADEREPAIR table for amounts\n",sqlca.sqlerrd[2]);
	CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);

	printf("Updated |%d| row(s) in CTRADEREPAIR table for amounts\n",sqlca.sqlerrd[2]);

	EXEC SQL UPDATE DL_DEALREPAIR
			SET QTY  = ROUND((QTY/:int_l_conv_amt), :int_l_max_dec_len)
			WHERE INSTR_CODE IN ( SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE INSTR_TYPE IN ('FMT', 'BON') AND CURRENCY_CD = :chr_g_new_ccy); 

	IS_ANY_ORA_ERROR;

	sprintf(chr_g_log_buff,"Updated |%d| row(s) in CTRADEREPAIR table for FMT instrument\n",sqlca.sqlerrd[2]);
	CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);

	printf("Updated |%d| row(s) in CTRADEREPAIR table for FMT instrument\n",sqlca.sqlerrd[2]);

	EXEC SQL UPDATE DL_DEALREPAIR
			SET QTY  = ROUND((QTY/:int_l_conv_qty), :int_l_max_dec_len)
			WHERE INSTR_CODE IN (SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE INSTR_TYPE NOT IN ('FMT','BON') AND CURRENCY_CD = :chr_g_new_ccy);

	IS_ANY_ORA_ERROR;

	sprintf(chr_g_log_buff,"Updated |%d| row(s) in CTRADEREPAIR table for NON-FMT instrument\n",sqlca.sqlerrd[2]);
	CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);

	printf("Updated |%d| row(s) in CTRADEREPAIR table for NON-FMT instrument\n",sqlca.sqlerrd[2]);

	
	
	
	
	

	EXEC SQL UPDATE DL_EOMDEAL
			SET COST  = ROUND((COST/:int_l_conv_amt), :int_l_amt_dec_len),
				AMOUNT  = ROUND((AMOUNT/:int_l_conv_amt), :int_l_amt_dec_len),
				CUSTODYCOMM = ROUND((CUSTODYCOMM/:int_l_conv_amt), :int_l_amt_dec_len),
				BROKERCOMM = ROUND((BROKERCOMM/:int_l_conv_amt), :int_l_amt_dec_len),
				STX_COMM = ROUND((STX_COMM/:int_l_conv_amt), :int_l_amt_dec_len),
				OTH_COMM = ROUND((OTH_COMM/:int_l_conv_amt), :int_l_amt_dec_len),
				ORIG_AMOUNT = ROUND((ORIG_AMOUNT/:int_l_conv_amt), :int_l_amt_dec_len),
				AMT_DIFFER = ROUND((AMT_DIFFER/:int_l_conv_amt), :int_l_amt_dec_len),
				CP_AMT  = ROUND((CP_AMT/:int_l_conv_amt), :int_l_amt_dec_len),
				CURRENCY_CD   = :chr_g_new_ccy
			WHERE DEAL_STAT NOT IN ('CS')
			AND INSTR_CODE IN ( SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE CURRENCY_CD = :chr_g_new_ccy);
	
	IS_ANY_ORA_ERROR;

	sprintf(chr_g_log_buff,"Updated |%d| row(s) in CEOMTRADE table for amounts\n",sqlca.sqlerrd[2]);
	CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);

	printf("Updated |%d| row(s) in CEOMTRADE table for amounts\n",sqlca.sqlerrd[2]);

	
	EXEC SQL UPDATE DL_EOMDEAL
			SET QTY 	  = ROUND((QTY/:int_l_conv_amt), :int_l_max_dec_len),
				ORIG_QTY = ROUND((ORIG_QTY/:int_l_conv_amt), :int_l_max_dec_len)
			WHERE INSTR_CODE IN ( SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE INSTR_TYPE IN ('FMT', 'BON') AND CURRENCY_CD = :chr_g_new_ccy) 
			AND DEAL_STAT NOT IN ('CS');
	
	IS_ANY_ORA_ERROR;

	sprintf(chr_g_log_buff,"Updated |%d| row(s) in CEOMTRADE table for FMT instrument\n",sqlca.sqlerrd[2]);
	CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);

	printf("Updated |%d| row(s) in CEOMTRADE table for FMT instrument\n",sqlca.sqlerrd[2]);

	
	EXEC SQL UPDATE DL_EOMDEAL
			SET QTY    = ROUND((QTY/:int_l_conv_qty), :int_l_max_dec_len),
				ORIG_QTY = ROUND((ORIG_QTY/:int_l_conv_qty), :int_l_max_dec_len)
			WHERE INSTR_CODE IN ( SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE INSTR_TYPE NOT IN ('FMT','BON') AND CURRENCY_CD = :chr_g_new_ccy)
			AND DEAL_STAT NOT IN ('CS');

	IS_ANY_ORA_ERROR;

	sprintf(chr_g_log_buff,"Updated |%d| row(s) in CEOMTRADE table for NON-FMT instrument\n",sqlca.sqlerrd[2]);
	CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);

	printf("Updated |%d| row(s) in CEOMTRADE table for NON-FMT instrument\n",sqlca.sqlerrd[2]);

	
	
	
	
	
	 
	EXEC SQL UPDATE DL_CASHBAL
			SET CASH_BAL = ROUND((CASH_BAL/:int_l_conv_amt), :int_l_amt_dec_len);

	IS_ANY_ORA_ERROR;

	sprintf(chr_g_log_buff,"Updated |%d| row(s) in CCASHBAL table for cash balance\n",sqlca.sqlerrd[2]);
	CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);

	printf("Updated |%d| row(s) in CCASHBAL table for cash balance\n",sqlca.sqlerrd[2]);

	
	
	
	
	
	EXEC SQL UPDATE DL_MISDEAL
			SET AMOUNT = ROUND((AMOUNT/:int_l_conv_amt), :int_l_amt_dec_len),
				COST  = ROUND((COST/:int_l_conv_amt), :int_l_amt_dec_len)
			WHERE INSTR_CODE IN ( SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE CURRENCY_CD = :chr_g_new_ccy);

	IS_ANY_ORA_ERROR;

	sprintf(chr_g_log_buff,"Updated |%d| row(s) in CMISTXN table for amounts\n",sqlca.sqlerrd[2]);
	CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);

	printf("Updated |%d| row(s) in CMISTXN table for amounts\n",sqlca.sqlerrd[2]);

	EXEC SQL UPDATE DL_MISDEAL
			SET QTY = ROUND((QTY/:int_l_conv_amt), :int_l_max_dec_len)
			WHERE INSTR_CODE IN ( SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE INSTR_TYPE IN ('FMT', 'BON') AND CURRENCY_CD = :chr_g_new_ccy); 
	
	IS_ANY_ORA_ERROR;

	sprintf(chr_g_log_buff,"Updated |%d| row(s) in CMISTXN table for FMT instrument\n",sqlca.sqlerrd[2]);
	CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);

	printf("Updated |%d| row(s) in CMISTXN table for FMT instrument\n",sqlca.sqlerrd[2]);

	EXEC SQL UPDATE DL_MISDEAL
			SET QTY = ROUND((QTY/:int_l_conv_qty), :int_l_max_dec_len)
			WHERE INSTR_CODE IN (SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE INSTR_TYPE NOT IN ('FMT','BON') AND CURRENCY_CD = :chr_g_new_ccy);
 
	IS_ANY_ORA_ERROR;

	sprintf(chr_g_log_buff,"Updated |%d| row(s) in CMISTXN table for NON-FMT instrument\n",sqlca.sqlerrd[2]);
	CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);

	printf("Updated |%d| row(s) in CMISTXN table for NON-FMT instrument\n",sqlca.sqlerrd[2]);

	
	
	
	
	

	EXEC SQL UPDATE DL_DEALCLIENTIMG
			SET	AMOUNT	=	ROUND((AMOUNT/:int_l_conv_amt), :int_l_amt_dec_len),
					CUSTODYCOMM	=	ROUND((CUSTODYCOMM/:int_l_conv_amt), :int_l_amt_dec_len),
					BROKERCOMM	=	ROUND((BROKERCOMM/:int_l_conv_amt), :int_l_amt_dec_len),
					STX_COMM	=	ROUND((STX_COMM/:int_l_conv_amt), :int_l_amt_dec_len),
					OTH_COMM	=	ROUND((OTH_COMM/:int_l_conv_amt), :int_l_amt_dec_len),
					CURRENCY_CD   = :chr_g_new_ccy
			WHERE INSTR_CODE IN (SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE CURRENCY_CD = :chr_g_new_ccy);

	IS_ANY_ORA_ERROR;

	sprintf(chr_g_log_buff,"Updated |%d| row(s) in CTRDACCIMG table for amounts\n",sqlca.sqlerrd[2]);
	CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);

	printf("Updated |%d| row(s) in CTRDACCIMG table for amounts\n",sqlca.sqlerrd[2]);
	
	
	
	
	
	

	EXEC SQL UPDATE DL_DEALAUDIT
			SET	QTY	=	ROUND((QTY/:int_l_conv_amt), :int_l_max_dec_len)
			WHERE CLIENT||IDENTIY_NO IN ( SELECT CLIENT||IDENTIY_NO FROM DL_DEAL 
					WHERE INSTR_CODE IN (SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE INSTR_TYPE IN ('FMT', 'BON') 
					AND CURRENCY_CD = :chr_g_new_ccy) 
					AND DEAL_STAT NOT IN ('CS'));

	IS_ANY_ORA_ERROR;

	sprintf(chr_g_log_buff,"Updated |%d| row(s) in CTRANSAUDIT table for FMT instrument\n",sqlca.sqlerrd[2]);
	CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);

	printf("Updated |%d| row(s) in CTRANSAUDIT table for FMT instrument\n",sqlca.sqlerrd[2]);

	EXEC SQL UPDATE DL_DEALAUDIT
			SET	QTY	=	ROUND((QTY/:int_l_conv_qty), :int_l_max_dec_len)
			WHERE CLIENT||IDENTIY_NO IN ( SELECT CLIENT||IDENTIY_NO FROM DL_DEAL 
					WHERE INSTR_CODE IN (SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE INSTR_TYPE NOT IN ('FMT', 'BON') 
					AND CURRENCY_CD = :chr_g_new_ccy) 
					AND DEAL_STAT NOT IN ('CS'));

	IS_ANY_ORA_ERROR;

	sprintf(chr_g_log_buff,"Updated |%d| row(s) in CTRANSAUDIT table for NON-FMT instrument\n",sqlca.sqlerrd[2]);
	CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);

	printf("Updated |%d| row(s) in CTRANSAUDIT table for NON-FMT instrument\n",sqlca.sqlerrd[2]);

	
	
	
	
	

	EXEC SQL UPDATE DL_DEALRST
			SET	AMOUNT	=	ROUND((AMOUNT/:int_l_conv_amt), :int_l_amt_dec_len)
			WHERE INSTR_CODE IN ( SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE CURRENCY_CD = :chr_g_new_ccy);

	IS_ANY_ORA_ERROR;

	sprintf(chr_g_log_buff,"Updated |%d| row(s) in CTRADERST table for amount\n",sqlca.sqlerrd[2]);
	CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);

	printf("Updated |%d| row(s) in CTRADERST table for amount\n",sqlca.sqlerrd[2]);

	EXEC SQL UPDATE DL_DEALRST
			SET	QTY		=	ROUND((QTY/:int_l_conv_amt), :int_l_max_dec_len),
					ORIG_QTY	=	ROUND((ORIG_QTY/:int_l_conv_amt), :int_l_max_dec_len)
			WHERE INSTR_CODE IN ( SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE INSTR_TYPE IN ('FMT', 'BON') AND CURRENCY_CD = :chr_g_new_ccy);

	IS_ANY_ORA_ERROR;

	sprintf(chr_g_log_buff,"Updated |%d| row(s) in CTRADERST table for FMT instrument\n",sqlca.sqlerrd[2]);
	CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);

	printf("Updated |%d| row(s) in CTRADERST table for FMT instrument\n",sqlca.sqlerrd[2]);

	EXEC SQL UPDATE DL_DEALRST
         SET   QTY      = ROUND((QTY/:int_l_conv_qty), :int_l_max_dec_len),
               ORIG_QTY  = ROUND((ORIG_QTY/:int_l_conv_qty), :int_l_max_dec_len)
			WHERE INSTR_CODE IN (SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE INSTR_TYPE NOT IN ('FMT','BON') AND CURRENCY_CD = :chr_g_new_ccy);

	IS_ANY_ORA_ERROR;

	sprintf(chr_g_log_buff,"Updated |%d| row(s) in CTRADERST table for NON_FMT instrument\n",sqlca.sqlerrd[2]);
	CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);

	printf("Updated |%d| row(s) in CTRADERST table for NON_FMT instrument\n",sqlca.sqlerrd[2]);

	
	
	
	
	

	EXEC SQL UPDATE DL_COPYHISTORY
			SET COST    = ROUND((COST/:int_l_conv_amt), :int_l_amt_dec_len),
            AMOUNT    = ROUND((AMOUNT/:int_l_conv_amt), :int_l_amt_dec_len),
            CUSTODYCOMM   = ROUND((CUSTODYCOMM/:int_l_conv_amt), :int_l_amt_dec_len),
            BROKERCOMM   = ROUND((BROKERCOMM/:int_l_conv_amt), :int_l_amt_dec_len),
            STX_COMM   = ROUND((STX_COMM/:int_l_conv_amt), :int_l_amt_dec_len),
            OTH_COMM   = ROUND((OTH_COMM/:int_l_conv_amt), :int_l_amt_dec_len),
            ORIG_AMOUNT   = ROUND((ORIG_AMOUNT/:int_l_conv_amt), :int_l_amt_dec_len),
            AMT_DIFFER   = ROUND((AMT_DIFFER/:int_l_conv_amt), :int_l_amt_dec_len),
            CP_AMT  = ROUND((CP_AMT/:int_l_conv_amt), :int_l_amt_dec_len),
				CURRENCY_CD  = :chr_g_new_ccy
         WHERE INSTR_CODE IN ( SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE CURRENCY_CD = :chr_g_new_ccy);

   IS_ANY_ORA_ERROR;

	sprintf(chr_g_log_buff,"Updated |%d| row(s) in CCPYHISTRADE table for amounts\n",sqlca.sqlerrd[2]);
	CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);

	printf("Updated |%d| row(s) in CCPYHISTRADE table for amounts\n",sqlca.sqlerrd[2]);

   EXEC SQL UPDATE DL_COPYHISTORY
         SET QTY      = ROUND((QTY/:int_l_conv_amt), :int_l_max_dec_len),
            ORIG_QTY   = ROUND((ORIG_QTY/:int_l_conv_amt), :int_l_max_dec_len)
         WHERE INSTR_CODE IN ( SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE INSTR_TYPE IN ('FMT', 'BON') AND CURRENCY_CD = :chr_g_new_ccy);

   IS_ANY_ORA_ERROR;

	sprintf(chr_g_log_buff,"Updated |%d| row(s) in CCPYHISTRADE table for FMT instrument\n",sqlca.sqlerrd[2]);
	CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);

	printf("Updated |%d| row(s) in CCPYHISTRADE table for FMT instrument\n",sqlca.sqlerrd[2]);

   EXEC SQL UPDATE DL_COPYHISTORY 
         SET QTY      = ROUND((QTY/:int_l_conv_qty), :int_l_max_dec_len),
            ORIG_QTY   = ROUND((ORIG_QTY/:int_l_conv_qty), :int_l_max_dec_len)
         WHERE INSTR_CODE IN (SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE INSTR_TYPE NOT IN ('FMT','BON') AND CURRENCY_CD = :chr_g_new_ccy);

   IS_ANY_ORA_ERROR; 

	sprintf(chr_g_log_buff,"Updated |%d| row(s) in CCPYHISTRADE table for NON-FMT instrument\n",sqlca.sqlerrd[2]);
	CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);

	printf("Updated |%d| row(s) in CCPYHISTRADE table for NON-FMT instrument\n",sqlca.sqlerrd[2]);

	
	
	if (rep_func_trade("Po",p_intlenv_data_struct_h,l_debug_info_ptr) ==APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}

	APL_GOBACK_SUCCESS
	RETURN_SUCCESS:
	{
	APL_IF_DEBUG
	CO_ProcMonitor(APL_OUT_FILE,
				"Leaving processtion Conv_Trade successfully",
				NULL,
				NULL);
	return (APL_SUCCESS);
	}
	RETURN_FAILURE:
	{
	APL_IF_DEBUG
	CO_ProcMonitor(APL_OUT_FILE,
				"Leaving processtion Conv_trade with errors",
				NULL,
				NULL);
	return(APL_FAILURE);
	}
}



int rep_func_trade(char *p_pre_post,INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr) 
{
	struct sqlca sqlca;

	FILE   *l_filefp  = NULL;
	char chr_l_filename_c[31];

	char chr_l_client_a[APL_CLIENT_LENGTH]	 = APL_NULL_STRING;
	char chr_l_refno_a[APL_TXNREFNO_LEN]	 = APL_NULL_STRING;
	char chr_l_glacc[GL_ACCOUNT_LEN] = APL_NULL_STRING;
	double l_cost         = 0.0;
	double dbl_l_amount_a        = 0.0;
	double l_custodycomm       = 0.0;
	double l_brokercomm       = 0.0;
	double l_stx_comm       = 0.0;
	double l_oth_comm       = 0.0;
	double l_quantity           = 0.0;
	double l_orig_qty       = 0.0;
	double l_orig_amount       = 0.0;
	double l_amt_differ       = 0.0;
	double l_cpamount      = 0.0;
	double l_cash_bal    = 0.0; 
	double l_closing_bal		  = 0.0;

	short i_dl_client        = 0;
	short i_indentity_no          = 0;
	short i_ibbsclt        = 0;
	short i_pr          = 0;
	short i_amt         = 0; 
	short i_custodycomm        = 0;
	short i_brokercomm        = 0;
	short i_stx_comm        = 0;
	short i_oth_comm        = 0;
	short i_qty            = 0;
	short i_origquantity        = 0;
	short i_origamount        = 0;
	short i_diffamount        = 0;
	short i_cpamt       = 0;
	short i_cash_bal     = 0;
	short i_closing_bal		  = 0;

	
	EXEC SQL VAR chr_l_client_a           IS STRING;
	EXEC SQL VAR chr_l_refno_a             IS STRING;
	EXEC SQL VAR chr_l_glacc           IS STRING;
	EXEC SQL VAR chr_l_filename_c          IS STRING;


	
	APL_IF_DEBUG
	{
	CO_ProcMonitor( APL_OUT_FILE,
				"Entered Function rep_func_trade\n",
				NULL,
				NULL);
	}
	
   if (strcmp(p_pre_post,"Pr")==0)
      l_filefp = l_pr_filept;
   else
      l_filefp = l_po_filept;	
	
	
	

		sqlca.sqlcode = 0;	
		EXEC SQL DECLARE trd_amt_qty CURSOR FOR 
				SELECT CLIENT, IDENTIY_NO, nvl(COST,0), nvl(AMOUNT,0),
						nvl(CUSTODYCOMM,0), nvl(BROKERCOMM,0), nvl(STX_COMM,0), nvl(OTH_COMM,0),
						nvl(QTY,0), nvl(ORIG_QTY,0), nvl(ORIG_AMOUNT,0), nvl(AMT_DIFFER,0), nvl(CP_AMT,0)
				FROM DL_DEAL
				WHERE DEAL_STAT NOT IN ('CS')
				AND INSTR_CODE IN ( SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE CURRENCY_CD = :chr_g_new_ccy);

		IS_ANY_ORA_ERROR 

		EXEC SQL OPEN trd_amt_qty;

		IS_ANY_ORA_ERROR 

		fprintf(l_filefp,"Transaction records------------------------------------------------------------------------------------------------------------\n");

		fprintf(l_filefp,"%-11s\t%-16s\t%-18s\t%-18s\t%-18s\t%-18s\t%-18s\t%-18s\t%-25s\t%-25s\t%-25s\t%-25s\t%-25s\n\n","CLIENT","IDENTIY_NO","COST","AMOUNT","CUSTODYCOMM","BROKERCOMM","STX_COMM","OTH_COMM","QTY","ORIG_QTY","ORIG_AMOUNT","AMT_DIFFER","CP_AMT");

		fprintf(l_filefp,"-------------------------------------------------------------------------------------------------------------------------------\n");
		
		for(;;)
		{
			EXEC SQL FETCH trd_amt_qty
					INTO :chr_l_client_a:i_dl_client, :chr_l_refno_a:i_indentity_no, :l_cost:i_pr, :dbl_l_amount_a:i_amt, :l_custodycomm:i_custodycomm, :l_brokercomm:i_brokercomm, :l_stx_comm:i_stx_comm, :l_oth_comm:i_oth_comm, :l_quantity:i_qty, :l_orig_qty:i_origquantity, :l_orig_amount:i_origamount, :l_amt_differ:i_diffamount, :l_cpamount:i_cpamt;

			IS_ANY_ORA_ERROR  

			if (APL_ZERO_RESULT_SET)
			break;

			fprintf(l_filefp,"%-11s\t%-16s\t%-18f\t%-18f\t%-18f\t%-18f\t%-18f\t%-18f\t%-25f\t%-25f\t%-18f\t%-18f\t%-18f\n",chr_l_client_a,chr_l_refno_a,l_cost,dbl_l_amount_a,l_custodycomm,l_brokercomm,l_stx_comm,l_oth_comm,l_quantity,l_orig_qty,l_orig_amount,l_amt_differ,l_cpamount);	
		}
		fprintf(l_filefp,"===============================================================================================================================\n\n");
		EXEC SQL CLOSE trd_amt_qty;
	
	
	
	
	
	

	sqlca.sqlcode = 0;
	EXEC SQL DECLARE trdrep_amt_qty CURSOR FOR 
			SELECT CLIENT, IDENTIY_NO, nvl(COST,0), nvl(AMOUNT,0), nvl(CUSTODYCOMM,0), nvl(BROKERCOMM,0), nvl(STX_COMM,0), nvl(OTH_COMM,0), nvl(QTY,0)
			FROM DL_DEALREPAIR
			WHERE INSTR_CODE IN ( SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE CURRENCY_CD = :chr_g_new_ccy);

	IS_ANY_ORA_ERROR

	EXEC SQL OPEN trdrep_amt_qty;

	IS_ANY_ORA_ERROR

		fprintf(l_filefp,"Repair Records-----------------------------------------------------------------------------------------------------------------\n");
	fprintf(l_filefp,"%-11s\t%-16s\t%-18s\t%-18s\t%-18s\t%-18s\t%-18s\t%-18s\t%-25s\n\n","CLIENT","IDENTIY_NO","COST","AMOUNT","CUSTODYCOMM","BROKERCOMM","STX_COMM","OTH_COMM","QTY");

		fprintf(l_filefp,"-------------------------------------------------------------------------------------------------------------------------------\n");
	for(;;)
	{
		EXEC SQL FETCH trdrep_amt_qty
				INTO :chr_l_client_a:i_dl_client, :chr_l_refno_a:i_indentity_no, :l_cost:i_pr, :dbl_l_amount_a:i_amt, :l_custodycomm:i_custodycomm, :l_brokercomm:i_brokercomm, :l_stx_comm:i_stx_comm, :l_oth_comm:i_oth_comm, :l_quantity:i_qty;

		IS_ANY_ORA_ERROR

		if (APL_ZERO_RESULT_SET)
		break;

		fprintf(l_filefp,"%-11s\t%-16s\t%-18f\t%-18f\t%-18f\t%-18f\t%-18f\t%-18f\t%-25f\n",chr_l_client_a,chr_l_refno_a,l_cost,dbl_l_amount_a,l_custodycomm,l_brokercomm,l_stx_comm,l_oth_comm,l_quantity);
	}
		fprintf(l_filefp,"===============================================================================================================================\n\n");
	EXEC SQL CLOSE trdrep_amt_qty;
	
	
	
	
	

	sqlca.sqlcode = 0;
	EXEC SQL DECLARE trdeom_amt_qty CURSOR FOR
			SELECT CLIENT, IDENTIY_NO, nvl(COST,0), nvl(AMOUNT,0), nvl(CUSTODYCOMM,0), nvl(BROKERCOMM,0), nvl(STX_COMM,0), nvl(OTH_COMM,0), nvl(QTY,0), nvl(ORIG_QTY,0), nvl(ORIG_AMOUNT,0), nvl(AMT_DIFFER,0), nvl(CP_AMT,0)
	FROM DL_EOMDEAL
	WHERE DEAL_STAT NOT IN ('CS')
	AND INSTR_CODE IN ( SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE CURRENCY_CD = :chr_g_new_ccy);

	IS_ANY_ORA_ERROR

	EXEC SQL OPEN trdeom_amt_qty;

	IS_ANY_ORA_ERROR

		fprintf(l_filefp,"EOM Transaction Records--------------------------------------------------------------------------------------------------------\n");
	fprintf(l_filefp,"%-11s\t%-16s\t%-18s\t%-18s\t%-18s\t%-18s\t%-18s\t%-18s\t%-25s\t%-25s\t%-18s\t%-18s\t%-18s\n\n","CLIENT","IDENTIY_NO","COST","AMOUNT","CUSTODYCOMM","BROKERCOMM","STX_COMM","OTH_COMM","QTY","ORIG_QTY","ORIG_AMOUNT","AMT_DIFFER","CP_AMT");

		fprintf(l_filefp,"-------------------------------------------------------------------------------------------------------------------------------\n");
	for(;;)
	{
		EXEC SQL FETCH trdeom_amt_qty
				INTO :chr_l_client_a:i_dl_client, :chr_l_refno_a:i_indentity_no, :l_cost:i_pr, :dbl_l_amount_a:i_amt, :l_custodycomm:i_custodycomm, :l_brokercomm:i_brokercomm, :l_stx_comm:i_stx_comm, :l_oth_comm:i_oth_comm, :l_quantity:i_qty, :l_orig_qty:i_origquantity, 
:l_orig_amount:i_origamount, :l_amt_differ:i_diffamount, :l_cpamount:i_cpamt;

		IS_ANY_ORA_ERROR

		if (APL_ZERO_RESULT_SET)
			break;

		fprintf(l_filefp,"%-11s\t%-16s\t%-18f\t%-18f\t%-18f\t%-18f\t%-18f\t%-18f\t%-25f\t%-25f\t%-18f\t%-18f\t%-18f\n",chr_l_client_a,chr_l_refno_a,l_cost,dbl_l_amount_a,l_custodycomm,l_brokercomm,l_stx_comm,l_oth_comm,l_quantity,l_orig_qty,l_orig_amount,l_amt_differ,l_cpamount);	
	}
		fprintf(l_filefp,"===============================================================================================================================\n\n");
	EXEC SQL CLOSE trdeom_amt_qty;
	
	
	
	
	
	
	
	

	sqlca.sqlcode = 0;
	EXEC SQL DECLARE cshbal_amt CURSOR FOR
			SELECT A.CLIENT, B.GL_CLT, nvl(B.CASH_BAL,0) 
			FROM DL_CASHCLT A, DL_CASHBAL B
			WHERE A.GL_ACCOUNT = B.GL_CLT;

	IS_ANY_ORA_ERROR

	EXEC SQL OPEN cshbal_amt;

	IS_ANY_ORA_ERROR

		fprintf(l_filefp,"Cash Account Records-----------------------------------------------------------------------------------------------------------\n");
	fprintf(l_filefp,"%-11s\t%-11s\t%-25s\n\n","CLIENT","GL_CLT","CASH_BAL"); 
		fprintf(l_filefp,"-------------------------------------------------------------------------------------------------------------------------------\n");

	for(;;)
	{	
		EXEC SQL FETCH cshbal_amt 
		INTO :chr_l_client_a:i_dl_client, :chr_l_glacc:i_ibbsclt, :l_cash_bal:i_cash_bal;

		IS_ANY_ORA_ERROR

		if (APL_ZERO_RESULT_SET)
		break;

		fprintf(l_filefp,"%-11s\t%-11s\t%-25f\n",chr_l_client_a,chr_l_glacc,l_cash_bal);
	}
		fprintf(l_filefp,"===============================================================================================================================\n\n");

	EXEC SQL CLOSE cshbal_amt;
	
	
	
	
	
	
	

	sqlca.sqlcode = 0;
	EXEC SQL DECLARE mistxn_amt_qty CURSOR FOR
			SELECT CLIENT, IDENTIY_NO, nvl(COST,0), nvl(AMOUNT,0), nvl(QTY,0)
			FROM DL_MISDEAL
			WHERE INSTR_CODE IN ( SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE CURRENCY_CD = :chr_g_new_ccy);

	IS_ANY_ORA_ERROR

	EXEC SQL OPEN mistxn_amt_qty;

	IS_ANY_ORA_ERROR

		fprintf(l_filefp,"Missing Transaction Records----------------------------------------------------------------------------------------------------\n");
	fprintf(l_filefp,"%-11s\t%-16s\t%-18s\t%-18s\t%-25s\n\n","CLIENT","IDENTIY_NO","COST","AMOUNT","QTY");
		fprintf(l_filefp,"-------------------------------------------------------------------------------------------------------------------------------\n");

	for(;;)
	{
		EXEC SQL FETCH mistxn_amt_qty
				INTO :chr_l_client_a:i_dl_client, :chr_l_refno_a:i_indentity_no, :l_cost:i_pr, :dbl_l_amount_a:i_amt, :l_quantity:i_qty;

		IS_ANY_ORA_ERROR

		if (APL_ZERO_RESULT_SET)
		break;

		fprintf(l_filefp,"%-11s\t%-16s\t%-18f\t%-18f\t%-25f\n",chr_l_client_a,chr_l_refno_a,l_cost,dbl_l_amount_a,l_quantity); 
	}
		fprintf(l_filefp,"===============================================================================================================================\n\n");
	EXEC SQL CLOSE mistxn_amt_qty;

	
	
	
	
	

   sqlca.sqlcode = 0;
	EXEC SQL DECLARE trdaccimg_amt CURSOR FOR
			SELECT CLIENT, IDENTIY_NO, nvl(AMOUNT,0), nvl(CUSTODYCOMM,0), nvl(BROKERCOMM,0), nvl(STX_COMM,0), nvl(OTH_COMM,0)
			FROM DL_DEALCLIENTIMG
			WHERE INSTR_CODE IN ( SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE CURRENCY_CD = :chr_g_new_ccy);

	IS_ANY_ORA_ERROR

	EXEC SQL OPEN trdaccimg_amt;

	IS_ANY_ORA_ERROR

		fprintf(l_filefp,"Transaction Image Records------------------------------------------------------------------------------------------------------\n");
	fprintf(l_filefp,"%-11s\t%-16s\t%-18s\t%-18s\t%-18s\t%-18s\t%-18s\n\n","CLIENT","IDENTIY_NO","AMOUNT","CUSTODYCOMM","BROKERCOMM","STX_COMM","OTH_COMM");
		fprintf(l_filefp,"-------------------------------------------------------------------------------------------------------------------------------\n");

	for(;;)
	{
		EXEC SQL FETCH trdaccimg_amt
				INTO :chr_l_client_a:i_dl_client, :chr_l_refno_a:i_indentity_no, :dbl_l_amount_a:i_amt, :l_custodycomm:i_custodycomm, :l_brokercomm:i_brokercomm, :l_stx_comm:i_stx_comm, :l_oth_comm:i_oth_comm;

		IS_ANY_ORA_ERROR

		if (APL_ZERO_RESULT_SET)
		break;

		fprintf(l_filefp,"%-11s\t%-16s\t%-18f\t%-18f\t%-18f\t%-18f\t%-18f\n",chr_l_client_a,chr_l_refno_a,dbl_l_amount_a,l_custodycomm,l_brokercomm,l_stx_comm,l_oth_comm);
	}
		fprintf(l_filefp,"===============================================================================================================================\n\n");
	EXEC SQL CLOSE trdaccimg_amt;

	
	
	
	
	
	

	sqlca.sqlcode = 0;
	EXEC SQL DECLARE transaudit_qty CURSOR FOR
			SELECT CLIENT, IDENTIY_NO, nvl(QTY,0)
			FROM DL_DEALAUDIT
			WHERE CLIENT||IDENTIY_NO IN (SELECT CLIENT||IDENTIY_NO FROM DL_DEAL WHERE INSTR_CODE IN (SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE CURRENCY_CD = :chr_g_new_ccy) and DEAL_STAT not in ('CS'));

	IS_ANY_ORA_ERROR

	EXEC SQL OPEN transaudit_qty;

	IS_ANY_ORA_ERROR

		fprintf(l_filefp,"Transaction Audit Trail Records------------------------------------------------------------------------------------------------\n");
	fprintf(l_filefp,"%-11s\t%-16s\t%-25s\n\n","CLIENT","IDENTIY_NO","QTY");
		fprintf(l_filefp,"-------------------------------------------------------------------------------------------------------------------------------\n");
	
	for(;;)
	{
		EXEC SQL FETCH transaudit_qty 
				INTO :chr_l_client_a:i_dl_client, :chr_l_refno_a:i_indentity_no, :l_quantity:i_qty;

		IS_ANY_ORA_ERROR

		if (APL_ZERO_RESULT_SET)
		break;

		fprintf(l_filefp,"%-11s\t%-16s\t%-25f\n",chr_l_client_a,chr_l_refno_a,l_quantity);
	}
		fprintf(l_filefp,"===============================================================================================================================\n\n");
	EXEC SQL CLOSE transaudit_qty;

	
	
	
	
	
	

	sqlca.sqlcode = 0;
	EXEC SQL DECLARE traderst_amt_qty CURSOR FOR
			SELECT CLIENT, IDENTIY_NO, nvl(AMOUNT,0), nvl(QTY,0), nvl(ORIG_QTY,0)
			FROM DL_DEALRST
			WHERE INSTR_CODE IN ( SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE CURRENCY_CD = :chr_g_new_ccy);
		
	IS_ANY_ORA_ERROR

	EXEC SQL OPEN traderst_amt_qty;

	IS_ANY_ORA_ERROR

		fprintf(l_filefp,"Transaction Reset Records------------------------------------------------------------------------------------------------------\n");
	fprintf(l_filefp,"%-11s\t%-16s\t%-25s\t%-18s\t%-18s\n\n","CLIENT","IDENTIY_NO","AMOUNT","QTY","ORIG_QTY");
		fprintf(l_filefp,"-------------------------------------------------------------------------------------------------------------------------------\n");

	for(;;)
	{
		EXEC SQL FETCH traderst_amt_qty
				INTO :chr_l_client_a:i_dl_client, :chr_l_refno_a:i_indentity_no, :dbl_l_amount_a:i_amt, :l_quantity:i_qty, :l_orig_qty:i_origquantity;

		IS_ANY_ORA_ERROR

		if (APL_ZERO_RESULT_SET)
		break;

		fprintf(l_filefp,"%-11s\t%-16s\t%-25f\t%-25f\t%-25f\n",chr_l_client_a,chr_l_refno_a,dbl_l_amount_a,l_quantity,l_orig_qty);
	}
		fprintf(l_filefp,"===============================================================================================================================\n\n");
	EXEC SQL CLOSE traderst_amt_qty;

	
	

	sqlca.sqlcode = 0;
	EXEC SQL DECLARE cpyhistrade_amt_qty CURSOR FOR
          SELECT CLIENT, IDENTIY_NO, nvl(COST,0), nvl(AMOUNT,0),
                nvl(CUSTODYCOMM,0), nvl(BROKERCOMM,0), nvl(STX_COMM,0), nvl(OTH_COMM,0),
                nvl(QTY,0), nvl(ORIG_QTY,0), nvl(ORIG_AMOUNT,0), nvl(AMT_DIFFER,0), nvl(CP_AMT,0)
          FROM DL_COPYHISTORY
			 WHERE INSTR_CODE IN ( SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE CURRENCY_CD = :chr_g_new_ccy);

   IS_ANY_ORA_ERROR

   EXEC SQL OPEN cpyhistrade_amt_qty;

   IS_ANY_ORA_ERROR

		fprintf(l_filefp,"Weekly Transaction Statement Msgs Balance--------------------------------------------------------------------------------------\n");
   fprintf(l_filefp,"%-11s\t%-16s\t%-18s\t%-18s\t%-18s\t%-18s\t%-18s\t%-18s\t%-25s\t%-25s\t%-18s\t%-18s\t%-18s\n\n","CLIENT","IDENTIY_NO","COST","AMOUNT","CUSTODYCOMM","BROKERCOMM","STX_COMM","OTH_COMM","QTY","ORIG_QTY","ORIG_AMOUNT","AMT_DIFFER","CP_AMT");
		fprintf(l_filefp,"-------------------------------------------------------------------------------------------------------------------------------\n");

   for(;;)
   {
   	EXEC SQL FETCH cpyhistrade_amt_qty 
            INTO :chr_l_client_a:i_dl_client, :chr_l_refno_a:i_indentity_no, :l_cost:i_pr, :dbl_l_amount_a:i_amt, :l_custodycomm:i_custodycomm, :l_brokercomm:i_brokercomm, :l_stx_comm:i_stx_comm, :l_oth_comm:i_oth_comm, :l_quantity:i_qty, :l_orig_qty:i_origquantity, :l_orig_amount:i_origamount, :l_amt_differ:i_diffamount, :l_cpamount:i_cpamt;

      IS_ANY_ORA_ERROR

      if (APL_ZERO_RESULT_SET)
      break;

      fprintf(l_filefp,"%-11s\t%-16s\t%-18f\t%-18f\t%-18f\t%-18f\t%-18f\t%-18f\t%-25f\t%-25f\t%-18f\t%-18f\t%-18f\n",chr_l_client_a,chr_l_refno_a,l_cost,dbl_l_amount_a,l_custodycomm,l_brokercomm,l_stx_comm,l_oth_comm,l_quantity,l_orig_qty,l_orig_amount,l_amt_differ,l_cpamount);
   }
		fprintf(l_filefp,"===============================================================================================================================\n\n");
	EXEC SQL CLOSE cpyhistrade_amt_qty;

	RETURN_SUCCESS:
	{
	APL_IF_DEBUG
	CO_ProcMonitor(APL_OUT_FILE,
				"Leaving processtion rep_func_trade successfully",
				NULL,
				NULL);
	fflush(l_filefp);
	return (APL_SUCCESS);
	}
	
	RETURN_FAILURE:
	{
	APL_IF_DEBUG
	CO_ProcMonitor(APL_OUT_FILE,
				"Leaving processtion rep_func_trade with errors",
				NULL,
				NULL);
	fflush(l_filefp);
	return(APL_FAILURE);
	}
}

