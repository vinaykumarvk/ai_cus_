


#include "IV_Control_A.h"
#include <string.h> 

EXEC SQL INCLUDE SQLCA.H;

int IV_PrntSumFtr_Web(FILE *bill,
			 FILE *fl_userlog,
			 char *chr_p_billdt,
			 char *chr_p_client,
			 SYS_IVCONTROLPARAM_STRUCT l_sys_ivcntl_param_struct,
			 IV_CLIENTSETUP_STRUCT l_iv_clt_setup_struct,
			 char p_mastsub,
			 double p_tottran,double p_totcust,
			 double p_totca,double p_tototh,double p_totovrundr,
			 double p_totcomm,double p_totdepo,
			 double *p_tot_trans,
			 double *p_tot_cust,
			 double *p_tot_ca,
			 double *p_tot_oth,
			 double *p_tot_comm,
			 double *p_tot_adj,
			 double *p_tot_adj_comm,
			 double *p_tot_tax,
			 double *p_tot_educess,
			 double *p_tot_depo,
			 double *p_tot_outstanding,
			 double *p_final_total,
			 DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

    extern int IV_Prnt_SumCalcTax(FILE *,char *,long ,double ,double ,char ,char ,double *,
							   char *,char *,char *,char *,int *,DEBUG_INFO_STRUCT_H **);

	extern int IV_Prnt_SumTaxCalculation(FILE *,char *,double ,double *,double *,
							char *,DEBUG_INFO_STRUCT_H **);

	struct sqlca sqlca;

	int int_retstat;
	IV_EXCHANGERATE_STRUCT l_iv_exchangerate_struct;
	IV_SERVICE_CHRG_STRUCT l_iv_service_chrg_struct;

	char h_mstclt[APL_CLIENT_LENGTH] = APL_NULL_STRING; 
	double h_exchgrt=0;
	char l_client_name[200] = APL_NULL_STRING;

	EXEC SQL BEGIN DECLARE SECTION;

	EXEC SQL VAR l_iv_clt_setup_struct.b_ccycd IS STRING;
	EXEC SQL VAR h_mstclt IS STRING; 

	EXEC SQL END DECLARE SECTION;

	int int_l_retstat = 0;
	double l_ae_rate = 1.0;
	
	double dbl_h_totcust=0.0;
	double dbl_h_tottran=0.0;
	double dbl_h_totca =0.0;
	double dbl_h_tototh =0.0;
	double dbl_h_totovrundr =0.0;
	double dbl_h_totcomm =0.0;
	double dbl_h_totadj =0.0;
	double dbl_h_totadjcomm =0.0;
	double dbl_h_tottax =0.0;
	double dbl_h_toteducess =0.0;
	double dbl_h_totdepo =0.0;
	double dbl_h_totoutstanding = 0.0;
	double dbl_h_totfinal =0.0;
	double edurate =0.0;

	double l_minimumfee = 0.0;
	double l_maximum_fee = 0.0;

	double l_minimumfee_adj = 0.0;
	double l_maximum_fee_adj = 0.0;

	char chr_acct_str[200] = APL_NULL_STRING;


	char l_return_value[25] = APL_NULL_STRING;	/* JC - 25/07/2007 - HB_IV_007 */
	char l_err_desc[100] = APL_NULL_STRING;		/* JC - 25/07/2007 - HB_IV_007 */
	double l_round_val = 0;				/* ISKB_2316	*/

	memset(l_return_value, APL_NULL_CHAR, sizeof(l_return_value)); /* JC - 25/07/2007 - HB_IV_007 */
	memset(l_err_desc, APL_NULL_CHAR, sizeof(l_err_desc)); /* JC - 25/07/2007 - HB_IV_007 */
	memset(&l_iv_service_chrg_struct, NULL , sizeof(IV_SERVICE_CHRG_STRUCT));

	/*shailesh 11-01-2008 
	--In printing if conversion for different currencies are used,the value gets changed,so commenting the below code
	l_ae_rate = 0.0;

	if (APL_FAILURE == ConvToFxFn_GR(l_iv_clt_setup_struct.b_ccycd,
					 l_iv_clt_setup_struct.fees_ccy,
					 g_mt_commonsys_params_struct_h.dom_ccy,
					 chr_p_billdt, 
					 &l_ae_rate,
					 &int_l_retstat,
					 l_debug_info_ptr) )
	{
		APL_GOBACK_FAIL
	}


	 dbl_h_tottran = p_tottran * l_ae_rate; 
	 dbl_h_totcust = p_totcust * l_ae_rate;
	 dbl_h_totca   = p_totca * l_ae_rate;
	 dbl_h_tototh  = p_tototh * l_ae_rate;
	 dbl_h_totcomm = p_totcomm * l_ae_rate;
	 dbl_h_totdepo = p_totdepo * l_ae_rate;
*/
         dbl_h_tottran = p_tottran ; 
	 dbl_h_totcust = p_totcust ;
	 dbl_h_totca   = p_totca   ;
	 dbl_h_tototh  = p_tototh  ;
	 dbl_h_totovrundr = p_totovrundr ;
	 dbl_h_totcomm = p_totcomm ;
	 dbl_h_totdepo = p_totdepo ;

	printf("dbl_h_tottran :|%lf|\n",dbl_h_tottran);
	printf("dbl_h_totcust :|%lf|\n",dbl_h_totcust);
	printf("dbl_h_totca :|%lf|\n",dbl_h_totca);
	printf("dbl_h_tototh :|%lf|\n",dbl_h_tototh);
	printf("dbl_h_totovrundr :|%lf|\n",dbl_h_totovrundr);
	printf("dbl_h_totcomm :|%lf|\n",dbl_h_totcomm);
	printf("dbl_h_totdepo :|%lf|\n",dbl_h_totdepo);

  	*p_tot_trans = dbl_h_tottran;
	*p_tot_cust = dbl_h_totcust;
	*p_tot_ca = dbl_h_totca;
	*p_tot_oth = dbl_h_tototh;
	//*p_tot_comm = dbl_h_totcomm;
	*p_tot_depo = dbl_h_totdepo;

	EXEC SQL SELECT CLN_NAME INTO :l_client_name FROM MT_CLIENT WHERE CLN_CODE=:chr_p_client;

	fprintf(fl_userlog, "ORA for Client name query -- [%d] \n", sqlca.sqlcode);
	if(sqlca.sqlcode == 1403)
	{
		fprintf(fl_userlog, "Client name not maintained for Cln Code [%s] \n", chr_p_client);
	}

	fprintf(bill,"<tr>\n");
	fprintf(bill,"<td class='record' align='LEFT'>%s</td>\n", l_client_name);

	/*shailesh 26-12-2007 ISKB_430_11C
         EXEC SQL CALL SP_PRINT_FORMATTING(:dbl_h_tottran, :l_return_value, :l_err_desc);
	if(strlen(l_err_desc) > 0)
	{
		printf("JC:::::Error in formatting for dbl_h_tottran: l_err_desc -- %s\n", l_err_desc);
	}
	fprintf(bill,"<td class='tablerecord' align='RIGHT'>%s</td>\n", l_return_value);
        
	EXEC SQL CALL SP_PRINT_FORMATTING(:dbl_h_totcust, :l_return_value, :l_err_desc);
	if(strlen(l_err_desc) > 0)
	{
		printf("JC:::::Error in formatting for dbl_h_totcust: l_err_desc -- %s\n", l_err_desc);
	}
	fprintf(bill,"<td class='tablerecord' align='RIGHT'>%s</td>\n", l_return_value);
        
       

	EXEC SQL CALL SP_PRINT_FORMATTING(:dbl_h_totca, :l_return_value, :l_err_desc);
	if(strlen(l_err_desc) > 0)
	{
		printf("JC:::::Error in formatting for dbl_h_totca: l_err_desc -- %s\n", l_err_desc);
	}
	fprintf(bill,"<td class='tablerecord' align='RIGHT'>%s</td>\n", l_return_value);
      
	EXEC SQL CALL SP_PRINT_FORMATTING(:dbl_h_tototh, :l_return_value, :l_err_desc);
	if(strlen(l_err_desc) > 0)
	{
		printf("JC:::::Error in formatting for dbl_h_tototh: l_err_desc -- %s\n", l_err_desc);
	}
	fprintf(bill,"<td class='tablerecord' align='RIGHT'>%s</td>\n", l_return_value);


	EXEC SQL CALL SP_PRINT_FORMATTING(:dbl_h_totcomm, :l_return_value, :l_err_desc);
	if(strlen(l_err_desc) > 0)
	{
		printf("JC:::::Error in formatting for dbl_h_totcomm: l_err_desc -- %s\n", l_err_desc);
	}
	fprintf(bill,"<td class='tablerecord' align='RIGHT'>%s</td>\n", l_return_value);
         shailesh  26-12-2007 ISKB_430_11C  */
      fprintf(bill,"<td class='record'>&nbsp;</td>\n");
      fprintf(bill,"<td class='record'>&nbsp;</td>\n");
      fprintf(bill,"<td class='record'>&nbsp;</td>\n");
      fprintf(bill,"<td class='record'>&nbsp;</td>\n");
      fprintf(bill,"<td class='record'>&nbsp;</td>\n");
  
 	

	/********* Final Adjustments Calculation *****************************************/

	EXEC SQL SELECT MINIMUMFEE,MAXIMUMFEE 
	INTO :l_minimumfee,:l_maximum_fee
	FROM  IV_CLIENTSETUP WHERE CLIENT=:chr_p_client;
	printf("\n sqlca.sqlcode = [%d]",sqlca.sqlcode);
	IS_ANY_ORA_ERROR


	
	printf("\n l_minimumfee for [%s]=%lf",chr_p_client,l_minimumfee);
	printf("\n l_maximumfee for [%s]=%lf",chr_p_client,l_maximum_fee);

/*shailesh 30-05-2008 changes start*/
	printf("\n Client = %s\n",l_iv_clt_setup_struct.client);
	printf("\n fees_ccy = %s\n",l_iv_clt_setup_struct.fees_ccy);
	printf(" b_ccycd = %s\n",l_iv_clt_setup_struct.b_ccycd);

	if(strcmp(l_iv_clt_setup_struct.fees_ccy, l_iv_clt_setup_struct.b_ccycd) != 0)
	{
           int_retstat = IV_SUCCESS;
           if(APL_FAILURE == ConvToFxFn_GR(l_iv_clt_setup_struct.fees_ccy,l_iv_clt_setup_struct.b_ccycd,g_mt_commonsys_params_struct_h.dom_ccy,chr_p_billdt,&l_ae_rate,&int_retstat,l_debug_info_ptr))
           {
			printf("Error : Exchange Rate not found for client [%s] having FEE_CCY [%s] and B_CCY [%s]\n",l_iv_clt_setup_struct.client,l_iv_clt_setup_struct.fees_ccy, l_iv_clt_setup_struct.b_ccycd);
			fprintf(fl_userlog,"Error : Exchange Rate not found for currency %s %s\n",l_iv_clt_setup_struct.fees_ccy, l_iv_clt_setup_struct.b_ccycd);
			fflush(fl_userlog);
           }
		   else
			   printf("\n l_exchrate for %s is [%lf]",chr_p_client,l_ae_rate);
		  l_minimumfee  = l_minimumfee * l_ae_rate;
          l_maximum_fee = l_maximum_fee * l_ae_rate;
	}


/*shailesh 30-05-2008 changes end*/
       //shailesh 26-12-2007 ISKB_430_11C
       /*	ISKB_2316	Minimum Charges Also Applicable for standard service charges as zero	*/
	if( ((dbl_h_tottran+dbl_h_totcust+dbl_h_totca) >= 0 ) || (l_minimumfee > 0) || (l_maximum_fee != 0) )
	{
		if(((dbl_h_tottran+dbl_h_totcust+dbl_h_totca) < l_minimumfee) && ((dbl_h_tottran+dbl_h_totcust+dbl_h_totca) >= 0))
		{
			 l_minimumfee_adj = l_minimumfee - (dbl_h_tottran+dbl_h_totcust+dbl_h_totca);
			 dbl_h_totadj=l_minimumfee_adj;
		}
		else
		{
			if(((dbl_h_tottran+dbl_h_totcust+dbl_h_totca) > l_maximum_fee) && (l_maximum_fee != 0))
			{
				l_maximum_fee_adj = l_maximum_fee - (dbl_h_tottran+dbl_h_totcust+dbl_h_totca);
				 dbl_h_totadj =l_maximum_fee_adj;
			}
			else
			{
				l_maximum_fee_adj = 0;
				dbl_h_totadj = 0;
			}
		}
	}
       //dbl_h_totadjcomm = dbl_h_totcomm  + dbl_h_totadj;
       /*
	    dbl_h_totadjcomm = dbl_h_tottran+dbl_h_totcust+dbl_h_totca+dbl_h_totadj;
	*/
	printf("dbl_h_totadj |%lf| l_minimumfee |%lf| l_maximum_fee|%lf|\n",dbl_h_totadj,l_minimumfee,l_maximum_fee);
	printf("dbl_h_tottran |%lf| dbl_h_totcust |%lf| dbl_h_totca|%lf| dbl_h_totdepo |%lf| dbl_h_tototh|%lf|\n",dbl_h_tottran,dbl_h_totcust,dbl_h_totca,dbl_h_totdepo,dbl_h_tototh);
	    dbl_h_totadjcomm = dbl_h_tottran+dbl_h_totcust+dbl_h_totca+dbl_h_totadj+dbl_h_totdepo+dbl_h_tototh;

	printf("dbl_h_totadjcomm |%lf|\n",dbl_h_totadjcomm);
	/*EXEC SQL CALL SP_PRINT_FORMATTING(:dbl_h_totadj,:l_return_value, :l_err_desc);
	if(strlen(l_err_desc) > 0)
	{
		printf("JC:::::Error in formatting for l_iv_service_chrg_struct.comm_amt: l_err_desc -- %s\n", l_err_desc);
	}
	fprintf(bill,"<td class='tablerecord' align='RIGHT'>%s</td>\n", l_return_value);

	EXEC SQL CALL SP_PRINT_FORMATTING(:dbl_h_totadjcomm,:l_return_value, :l_err_desc);

	if(strlen(l_err_desc) > 0)
	{
		printf("JC:::::Error in formatting for l_iv_service_chrg_struct.comm_amt: l_err_desc -- %s\n", l_err_desc);
	}
	fprintf(bill,"<td class='tablerecord' align='RIGHT'>%s</td>\n", l_return_value);
        shailesh 26-12-2007 ISKB_430_11C*/
         
	EXEC SQL SELECT CLN_MASTER INTO  :h_mstclt
		FROM MT_CLIENT 
		WHERE CLN_CODE=:chr_p_client;

    IS_ANY_ORA_ERROR

	EXEC SQL SELECT A.CLIENT||';'||A.DEFAULT_FEECLT||';'||B.CUSTODY_CLT_CD||';'  
		INTO :chr_acct_str 
		FROM IV_CLIENTSETUP A,MT_CORE_SYS_PARAMS B 
		WHERE A.CLIENT=:chr_p_client;

    IS_ANY_ORA_ERROR
	
	printf("chr_acct_str :|%s| \n",chr_acct_str);
	
       //shailesh 26-12-2007 ISKB_430_11C
	if(APL_FAILURE == IV_Prnt_SumTaxCalculation(fl_userlog,chr_acct_str,dbl_h_totadjcomm,
									  &dbl_h_tottax,&dbl_h_toteducess,h_mstclt,l_debug_info_ptr));
	{
		 fprintf(fl_userlog,"Failure From IV_Prnt_SumTaxCalculation Function \n");
	}


/*	 shailesh 26-12-2007 ISKB_430_11C
       EXEC SQL CALL SP_PRINT_FORMATTING(:dbl_h_tottax, :l_return_value, :l_err_desc);
	if(strlen(l_err_desc) > 0)
	{
		printf("JC:::::Error in formatting for dbl_h_tottax: l_err_desc -- %s\n", l_err_desc);
	}
	fprintf(bill,"<td class='tablerecord' align='RIGHT'>%s</td>\n", l_return_value);


	EXEC SQL CALL SP_PRINT_FORMATTING(:dbl_h_toteducess, :l_return_value, :l_err_desc);
	if(strlen(l_err_desc) > 0)
	{
		printf("JC:::::Error in formatting for dbl_h_toteducess: l_err_desc -- %s\n", l_err_desc);
	}
	fprintf(bill,"<td class='tablerecord' align='RIGHT'>%s</td>\n", l_return_value);

*/


	/*if (APL_FAILURE == IV_Rtv_IVSRVCHRG(chr_p_billdt,chr_p_client,p_mastsub,TAXFEE,&l_iv_service_chrg_struct,&int_retstat,l_debug_info_ptr))
	{
		if (int_retstat == IV_CRITCAL_ERROR_IND)
		{
			fprintf(fl_userlog,"Error In IV_Rtv_IVSRVCHRG Function \n");
			APL_GOBACK_FAIL
		}
		else if (int_retstat == IV_NO_DATA_FOUND_ERR)
		{
			fprintf(fl_userlog, "No data returned from IV_Rtv_IVSRVCHRG \n");
			l_iv_service_chrg_struct.comm_amt = 0;
		}
	}

	
	fprintf(fl_userlog, "Comm amt -- [%lf] \n", l_iv_service_chrg_struct.comm_amt);
	
	if (l_iv_service_chrg_struct.comm_amt > 0)
	{
		dbl_h_tottax = l_iv_service_chrg_struct.comm_amt;

		EXEC SQL CALL SP_PRINT_FORMATTING(:dbl_h_tottax,:l_return_value, :l_err_desc);

		if(strlen(l_err_desc) > 0)
		{
			printf("JC:::::Error in formatting for l_iv_service_chrg_struct.comm_amt: l_err_desc -- %s\n", l_err_desc);
		}
		fprintf(bill,"<td class='tablerecord' align='RIGHT'>%s</td>\n", l_return_value);

	} 
	else
	{ 
		dbl_h_tottax = 0 ;
		fprintf(bill,"<td class='tablerecord' align='RIGHT'>0.00</td>\n");
	}

  
	EXEC SQL SELECT FIELD_VAL INTO :edurate FROM PRO_GSSPLVAL 
		 WHERE MAIN_FUN = 'BILLING_TAX' 
		 AND SUB_PROCESS = 'EDUCATION_CESS';

	IS_ANY_ORA_ERROR
	
	fprintf(fl_userlog, "edurate -- [%lf] \n", edurate);
	if(sqlca.sqlcode!=0)
	{
		fprintf(fl_userlog,"No Records for edurate in gssplval\n");
		APL_GOBACK_FAIL
	}

	if (dbl_h_tottax > 0 && edurate > 0)
	{
		dbl_h_toteducess =  (dbl_h_tottax * edurate) /100 ;
		
		EXEC SQL CALL SP_PRINT_FORMATTING(:dbl_h_toteducess, :l_return_value, :l_err_desc);
		if(strlen(l_err_desc) > 0)
		{
			printf("JC:::::Error in formatting for dbl_h_toteducess: l_err_desc -- %s\n", l_err_desc);
		}
		fprintf(bill,"<td class='tablerecord' align='RIGHT'>%s</td>\n", l_return_value);

	} 
	else
	{ 	
		dbl_h_toteducess = 0 ;
		fprintf(bill,"<td class='tablerecord' align='RIGHT'>0.00</td>\n");
	}*/



	/*EXEC SQL CALL SP_PRINT_FORMATTING(:dbl_h_totdepo, :l_return_value, :l_err_desc);
	if(strlen(l_err_desc) > 0)
	{
		printf("JC:::::Error in formatting for dbl_h_totdepo: l_err_desc -- %s\n", l_err_desc);
	}
	fprintf(bill,"<td class='tablerecord' align='RIGHT'>%s</td>\n", l_return_value);
        
        shailesh 26-12-2007 ISKB_430_11C*/
        fprintf(bill,"<td class='record' align='RIGHT'>&nbsp;</td>\n");
	fprintf(bill,"<td class='record' align='RIGHT'>&nbsp;</td>\n");
	fprintf(bill,"<td class='record' align='RIGHT'>&nbsp;</td>\n");
	fprintf(bill,"<td class='record' align='RIGHT'>&nbsp;</td>\n");
	/*
       dbl_h_totcomm = dbl_h_totadjcomm+dbl_h_tottax+dbl_h_toteducess+dbl_h_totdepo+dbl_h_tototh;
       */
       dbl_h_totcomm = dbl_h_totadjcomm+dbl_h_tottax+dbl_h_toteducess;
	/*
	fprintf(fl_userlog, "dbl_h_totcomm -- [%lf] \n", dbl_h_totcomm);
	*/
		l_round_val = 0;
		CO_Round(dbl_h_totcomm, 2, &l_round_val);
		dbl_h_totcomm = l_round_val;
		/*
		fprintf(fl_userlog, "Round Value -- [%lf] \n", l_round_val);
		fprintf(fl_userlog, "dbl_h_totcomm -- [%lf] \n", dbl_h_totcomm);
		*/
     	EXEC SQL CALL SP_PRINT_FORMATTING(:dbl_h_totcomm , :l_return_value, :l_err_desc);
	if(strlen(l_err_desc) > 0)
	{
		printf("JC:::::Error in formatting for dbl_h_totdepo: l_err_desc -- %s\n", l_err_desc);
	}
       fprintf(bill,"<td class='record' align='RIGHT'>%s</td>\n", l_return_value);

	/*********** Outstanding Amount Calculation ********************************************/
        //shailesh 26-12-2007 
	//EXEC SQL SELECT TOTAL_OSAMOUNT INTO :dbl_h_totoutstanding 
	//		 FROM IV_CLIENTSETUP WHERE CLIENT=:chr_p_client;

/*	EXEC SQL SELECT NVL(SUM(OUTST_AMT),0) INTO :dbl_h_totoutstanding  FROM
       ( SELECT NVL(SUM(OS_AMT),0) AS OUTST_AMT FROM IV_CHEQUE_A WHERE CLIENT = :chr_p_client  AND 
         TRUNC(BILL_DATE) < TO_DATE(SUBSTR(:chr_p_billdt,0,10),'DD/MM/YYYY')
         UNION 
         SELECT  NVL(SUM(COMM_AMT+NIL_FEES_ADJ+MAXIMUM_FEE_ADJ+MINIMUMFEE_ADJ),0) AS OUTST_AMT
         FROM IV_SERVICE_CHRG WHERE CLIENT = :chr_p_client
         AND CONS_FLAG = :p_mastsub
         AND TRUNC(DATEOF_BILLING)< TO_DATE(SUBSTR(:chr_p_billdt,0,10),'DD/MM/YYYY')
         AND TO_CHAR(DATEOF_BILLING,'DD/MM/YYYY') NOT IN   
         (SELECT TO_CHAR(BILL_DATE,'DD/MM/YYYY') FROM IV_CHEQUE_A WHERE CLIENT =:chr_p_client) 
        ); */

/* Henceforth outstanding amount will be fetched from TOTAL_OSAMOUNT from billing client setup, query modified by Hardik o
n 29072015 for ISKB_7645 */
EXEC SQL SELECT NVL(TOTAL_OSAMOUNT,0) INTO :dbl_h_totoutstanding FROM IV_CLIENTSETUP WHERE CLIENT=:chr_p_client;
IS_ANY_ORA_ERROR
	
	/* If condition is commented and rewritten by Hardik for ISKB_7645 as it should equate dbl_h_totoutstanding = 0.0 if value is  negative */
	/*if((dbl_h_totoutstanding < 0) && (dbl_h_totoutstanding > (-1))) //shailesh 20-12-2007 For negative OS */

	if((dbl_h_totoutstanding < 0) && (dbl_h_totoutstanding < (-1.0)))
			  dbl_h_totoutstanding = 0.0;


	if(sqlca.sqlcode !=0)
	{
		Alert("\n sqlca.sqlcode = [%d]",sqlca.sqlcode);
		APL_GOBACK_FAIL
	}
	
	Alert("hardik dbl_h_totoutstanding : |%lf|\n", dbl_h_totoutstanding);	
	printf("dbl_h_totoutstanding : |%lf|\n", dbl_h_totoutstanding);
	/*
	fprintf(fl_userlog, "dbl_h_totoutstanding -- [%lf] \n", dbl_h_totoutstanding);
	*/
	EXEC SQL CALL SP_PRINT_FORMATTING(:dbl_h_totoutstanding, :l_return_value, :l_err_desc);
	if(strlen(l_err_desc) > 0)
	{
		printf("JC:::::Error in formatting for dbl_h_totoutstanding: l_err_desc -- %s\n", l_err_desc);
	}
	fprintf(bill,"<td class='record' align='RIGHT'>%s</td>\n", l_return_value);

	l_round_val = 0;
	CO_Round(dbl_h_totoutstanding, 2, &l_round_val);
	dbl_h_totoutstanding = l_round_val;
	/*	
	fprintf(fl_userlog, "Round Value -- [%lf] \n", l_round_val);
	fprintf(fl_userlog, "dbl_h_totoutstanding -- [%lf] \n", dbl_h_totoutstanding);
	*/
	dbl_h_totfinal = dbl_h_totcomm+dbl_h_totoutstanding; 
	/*
	fprintf(fl_userlog, "dbl_h_totfinal -- [%lf] \n", dbl_h_totfinal);
	*/	

	EXEC SQL CALL SP_PRINT_FORMATTING(:dbl_h_totfinal,:l_return_value, :l_err_desc);
	if(strlen(l_err_desc) > 0)
	{
		printf("JC:::::Error in formatting for dbl_h_totfinal: l_err_desc -- %s\n", l_err_desc);
	}
	fprintf(bill,"<td class='record' align='RIGHT'>%s</td>\n", l_return_value);

	l_round_val = 0;
	CO_Round(dbl_h_totfinal, 2, &l_round_val);
	dbl_h_totfinal = l_round_val;
	/*
	fprintf(fl_userlog, "Round Value -- [%lf] \n", l_round_val);
	fprintf(fl_userlog, "dbl_h_totfinal -- [%lf] \n", dbl_h_totfinal);
	*/
	*p_tot_adj = dbl_h_totadj;
	*p_tot_adj_comm = dbl_h_totadjcomm;
	*p_tot_tax = dbl_h_tottax;
	*p_tot_educess = dbl_h_toteducess;
	*p_tot_depo = dbl_h_totdepo;
	*p_tot_outstanding = dbl_h_totoutstanding;
	*p_final_total = dbl_h_totfinal;

	*p_tot_comm = dbl_h_totcomm;

	fprintf(bill,"</tr>\n");

	

RETURN_SUCCESS:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting out of IV_PrntSumFtr_Web succesfully\n",NULL,NULL);
	}
return(APL_SUCCESS);

RETURN_FAILURE:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting out of IV_PrntSumFtr_Web unsuccesfully\n",NULL,NULL);
	}
return (APL_FAILURE);

}


/****** For Common Tax Calculation : By Vinay Kalaskar ******************************/

int IV_Prnt_SumCalcTax(FILE *fl_userlog,char *p_cltt_str,long p_serv_code,
		double p_fee_qty,double p_charge_qty,char p_charge_type,char p_fee_type,
		double *p_charge,
		char *p_mstclt_a,char *chr_p_param_str,
		char *p_charge_basis,char *p_fee_basis,
		int *int_p_retstat,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;

	char chr_h_fee_str[IV_PARAM_LEN],chr_h_actcode[APL_CLIENT_LENGTH];
	char h_mstclt[APL_CLIENT_LENGTH],chr_h_group_ind[51];
	double h_fee_quantity=0,h_charge_quantity=0,h_nfee_quantity=0,h_ncharge_quantity=0;
	long int_h_serv_code=0;
	double h_schdl_fee=0.0,h_frm_fbase=0.0,h_tof_base=0.0,h_toc_base=0.0,h_frm_cbase=0.0;
	short i_schdl_fee,i_frm_fbase,i_tof_base,i_frm_cbase,i_toc_base,i_group_id;
	 char h_apl_frm_date[9] = APL_NULL_STRING;  /* Added by monica for kotak ISKB_1737 */
	 short i_apl_frm_date = 0;  /* Added by monica for kotak ISKB_1737 */
	struct sqlca sqlca;

	EXEC SQL VAR chr_h_fee_str   IS STRING;
	EXEC SQL VAR chr_h_group_ind IS STRING;
	EXEC SQL VAR chr_h_actcode   IS STRING;
	EXEC SQL VAR h_mstclt    IS STRING;
	EXEC SQL VAR h_apl_frm_date IS STRING;  /* Added by monica for kotak ISKB_1737 */

	EXEC SQL END DECLARE SECTION;

	char *s,*chr_actcode=NULL,*p,*chr_basis_act=NULL;
	char chr_acct[IV_CLT_LEN],chr_basis_str[IV_CLT_LEN];
	char chr_l_actcode[APL_CLIENT_LENGTH];
	char chr_l_basis_str[IV_CLT_LEN];
	char chr_l_buf[BUFFER_LEN];
	double fees=0.0; 
	int int_retstat=0,int_mismatch_flg=0,int_fee_found=0;

	sqlca.sqlcode = 0;
	
	s=(char *) calloc(IV_CLT_LEN,sizeof(char));
	p=(char *) calloc(IV_CLT_LEN,sizeof(char));
	memset(chr_h_actcode, APL_NULL_CHAR, APL_CLIENT_LENGTH);
	memset(chr_h_fee_str, APL_NULL_CHAR, IV_PARAM_LEN);
	memset(h_mstclt, APL_NULL_CHAR, APL_CLIENT_LENGTH);

	memset(chr_h_group_ind, APL_NULL_CHAR, 51);

	memset(chr_acct,APL_NULL_CHAR,IV_CLT_LEN);
	memset(chr_basis_str,APL_NULL_CHAR,IV_CLT_LEN);
	memset(chr_l_basis_str,APL_NULL_CHAR,IV_CLT_LEN);
	memset(chr_l_actcode,APL_NULL_CHAR,APL_CLIENT_LENGTH);
	memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);


	*int_p_retstat = IV_SUCCESS;

	if (p_fee_qty == 0)
		p_fee_qty = 1;

	//printf("\n *** In calcfee :|%s||%ld||%s||%lf||%lf||%s||%s||%s|\n", p_cltt_str,p_serv_code,chr_p_param_str,p_fee_qty,p_charge,p_mstclt_a,p_charge_basis,p_fee_basis); Changes done for AIX Migration
	printf("\n *** In calcfee :|%s||%ld||%s||%lf||%lf||%s||%s||%s|\n", p_cltt_str,p_serv_code,chr_p_param_str,p_fee_qty,*p_charge,p_mstclt_a,p_charge_basis,p_fee_basis);

	fflush(stdout);

	h_fee_quantity = p_fee_qty;
	h_charge_quantity = p_charge_qty;
	int_h_serv_code = p_serv_code;

	if(h_charge_quantity == 0)
	{
		*int_p_retstat = IV_SUCCESS;
		APL_GOBACK_SUCCESS
	}
	strcpy(chr_h_fee_str,chr_p_param_str);

	strcpy(chr_acct,p_cltt_str);
	strcat(chr_acct,APL_NULL_STRING);
	strcpy(chr_basis_str,p_cltt_str);
	strcat(chr_basis_str,APL_NULL_STRING);
	chr_actcode = strtok_r(chr_acct,";",&s);
	strcpy(chr_l_actcode,chr_actcode);


	printf("chr_actcode:|%s|",chr_actcode);

	while((chr_actcode != (char *)NULL) && (strlen(chr_actcode) > 0))
	{
		if ( strcmp(chr_actcode, " ") == 0  )
		{
			if(s == (char *)NULL)
				strcpy(chr_actcode, APL_NULL_STRING);
			else
				chr_actcode = strtok_r(NULL, ";", &s);
			continue;
		}

		memset(chr_h_actcode, APL_NULL_CHAR, APL_CLIENT_LENGTH);
		strcpy(chr_h_actcode,chr_actcode);

	/* Added by monica for kotak ISKB_1737 starts */
	EXEC SQL SELECT to_char(MAX(to_date(apl_frm_date,'MM/YYYY')),'MON-YYYY') into :h_apl_frm_date:i_apl_frm_date FROM IV_CLIENT_SERV_BASIS,SYS_IVCONTROLPARAM 
	WHERE CLIENT = :chr_h_actcode AND service_cd = :int_h_serv_code AND  to_date(apl_frm_date,'MM/YYYY') <= B_UPTO_DATE;
	IS_ANY_ORA_ERROR
	printf("\n application from date |%s| \n",h_apl_frm_date);
	/* Added by monica for kotak ISKB_1737 ends */


		if((p_charge_type == 'T') && (p_fee_type == 'T'))
		{
			EXEC SQL SELECT SCHDL_FEE,FRM_CBASE,TOC_BASE,
				  FRM_FBASE,TOF_BASE,GROUP_ID
					  INTO  :h_schdl_fee:i_schdl_fee,
				  :h_frm_cbase:i_frm_cbase,
				  :h_toc_base:i_toc_base,
				  :h_frm_fbase:i_frm_fbase,
				  :h_tof_base:i_tof_base,
				  :chr_h_group_ind:i_group_id
					  FROM IV_CLIENTFEE
					  WHERE CLIENT   = :chr_h_actcode
					  AND SERVICE_CD   = :int_h_serv_code
					  AND PROC_DATA_VAL   = :chr_h_fee_str
					  AND FRM_FBASE < :h_fee_quantity
					  AND TOF_BASE   >= :h_fee_quantity
					  AND FRM_CBASE < :h_charge_quantity
					  AND TOC_BASE   >= :h_charge_quantity
					  AND APL_FRM_DATE = :h_apl_frm_date;  /* Added apl_frm_date by Monica for kotak ISKB_1737 */

			if(sqlca.sqlcode < 0)
			{
				*int_p_retstat = IV_CRITCAL_ERROR_IND;
			}

			IS_ANY_ORA_ERROR;

			if( APL_ZERO_RESULT_SET)
			{	
					int_retstat = IV_SUCCESS;
					if(s == (char *)NULL)
						strcpy(chr_actcode, APL_NULL_STRING);
					else
						chr_actcode = strtok_r(NULL,";",&s);
				chr_basis_act = strtok_r(chr_basis_str,";",&p);
				strcpy(chr_l_basis_str,APL_NULL_STRING);

				while(chr_basis_act != (char *)NULL )
				{
					if(p == (char *)NULL)
						strcpy(chr_basis_act, APL_NULL_STRING);
					else
						chr_basis_act = strtok_r(NULL,";",&p);
					if (chr_basis_act == NULL) break; /* PJ */
					if(strlen(chr_basis_act) > 0)
					{
						strcat(chr_l_basis_str,chr_basis_act);
						strcat(chr_l_basis_str,";");
					}
				}
				strcpy(chr_basis_str,chr_l_basis_str);
			}			
			else
			{
				int_fee_found = 1;
				fees  = h_schdl_fee;
				printf("fees **** chrg qty :|%lf| |%lf|",fees,h_charge_quantity);
				*p_charge = fees;

				break;
			}
		}

		if(chr_actcode == (char *)NULL)
			break;
	}

						
RETURN_SUCCESS:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting Successfully Out Of IV_Prnt_SumCalcTax \n",
				NULL , NULL);
	}
	return APL_SUCCESS;

RETURN_FAILURE:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting Unsuccessfully Out Of IV_Prnt_SumCalcTax \n",
				NULL , NULL);
	}
	return APL_FAILURE;
}


int IV_Prnt_SumTaxCalculation(FILE *fl_userlog,
				   char *chr_acct_str,
		  		   double p_taxable,
				   double *p_service_tax,
			  	   double *p_edu_cess,
				   char *h_mstclt,
				   DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	double srv_charge = 0.0; 
	int int_retstat   = 0;
	double l_service_tax = 0.0;
	double l_edu_cess = 0.0;
	double g_edurate=0.0;
	 

	if(p_taxable > 0)
	{
		 fprintf(fl_userlog,"Calling IV_Prnt_SumCalcTax For :|%s|-|%lf|\n",chr_acct_str,p_taxable);

		 if(APL_FAILURE == IV_Prnt_SumCalcTax(fl_userlog,chr_acct_str,TAXFEE,p_taxable,
					p_taxable,'T','T',&srv_charge,h_mstclt,
					 ";"," "," ",&int_retstat,l_debug_info_ptr))
		 {
			 fprintf(fl_userlog,"Failure From IV_Prnt_SumCalcTax Function \n");
			 srv_charge = 0.0;
		 }

		printf("p_taxable :|%lf| srv_charge :|%lf|\n",p_taxable,srv_charge);

		l_service_tax = ( p_taxable * (srv_charge/100) );

		printf("l_service_tax(( g_final_charges * (srv_charge/100) )) = :|%lf| \n",l_service_tax);
		/*
		fprintf(fl_userlog,"l_service_tax :|%lf|\n",l_service_tax);
		*/
	}
	else
	{
		p_taxable = abs(p_taxable);

		fprintf(fl_userlog,"Calling IV_Prnt_SumCalcTax For :|%s|-|%lf|\n",chr_acct_str,p_taxable);

		if(p_taxable > 0)
		{
			if(APL_FAILURE == IV_Prnt_SumCalcTax(fl_userlog,chr_acct_str,TAXFEE,p_taxable,
						p_taxable,'T','T',&srv_charge,h_mstclt,
						 ";"," "," ",&int_retstat,l_debug_info_ptr))
			{
				 fprintf(fl_userlog,"Failure From IV_Prnt_SumCalcTax Function \n");
				 srv_charge = 0.0;
			}

			printf("p_taxable :|%lf| srv_charge :|%lf|\n",p_taxable,srv_charge);

			l_service_tax = ( p_taxable * (srv_charge/100) )*(-1);

			printf("l_service_tax = :|%lf| \n",l_service_tax);
			/*
			fprintf(fl_userlog,"l_service_tax :|%lf|\n",l_service_tax);
			*/
		}
		else
		{
			fprintf(fl_userlog,"p_taxable Is :|%lf| ... No Need To Calculate Tax \n",p_taxable);
		}
	}
	/*      ISKB-1932       Education Cess from Client Fee Structure        */
	/*
	EXEC SQL SELECT FIELD_VAL INTO :g_edurate FROM PRO_GSSPLVAL 
			 WHERE MAIN_FUN = 'BILLING_TAX' 
			 AND SUB_PROCESS = 'EDUCATION_CESS';

	IS_ANY_ORA_ERROR
		
	if(sqlca.sqlcode != 0)
	{
		fprintf(fl_userlog,"No Records for EDUCATION_CESS in PRO_GSSPLVAL \n");
		APL_GOBACK_FAIL
	}
	*/


	if(APL_FAILURE == IV_Prnt_SumCalcTax(fl_userlog,chr_acct_str,EDUCESSFEE,p_taxable,
						p_taxable,'T','T',&g_edurate,h_mstclt,
						 ";"," "," ",&int_retstat,l_debug_info_ptr))
	{
		fprintf(fl_userlog,"Failure From IV_Prnt_SumCalcTax Function \n");
		g_edurate = 0.0;
	}
	printf("g_edurate :|%lf|\n",g_edurate);

	
//	l_edu_cess =  (l_service_tax * g_edurate) /100 ;
	l_edu_cess =  0;
	//fprintf(fl_userlog,"l_edu_cess :|%lf|\n",l_edu_cess);

	//*p_service_tax = l_service_tax;
    *p_service_tax =l_service_tax*(1+g_edurate/100);
	*p_edu_cess    = l_edu_cess;


APL_GOBACK_SUCCESS


RETURN_SUCCESS:
	APL_IF_DEBUG
	{
	CO_ProcMonitor(APL_OUT_FILE,"Exiting out of IV_Prnt_SumTaxCalculation succesfully\n",NULL,NULL);
	}
	return(APL_SUCCESS);

RETURN_FAILURE:
	APL_IF_DEBUG
	{
	CO_ProcMonitor(APL_OUT_FILE,"Exiting out of IV_Prnt_SumTaxCalculation unsuccesfully\n",NULL,NULL);
	}
	return (APL_FAILURE);

}



