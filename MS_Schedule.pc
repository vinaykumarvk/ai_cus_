



/*******  AIX-warningss Removal --commented all unused variables ***/



#include "CO_HostStructdef.h"

#include "MS_Swift.h"

EXEC SQL INCLUDE SQLCA ;



#define	COMMIT_COUNT_G	150
#define	RESTART_SEP_TOK ";"
char	chr_holi_str[8] = APL_NULL_STRING; 

int MS_Proc_MsgSch(	char **argv, 
						FILE *p_logfile,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	

	struct sqlca sqlca;	
	char 		chr_l_buf[BUFFER_LEN] 				= APL_NULL_STRING;
	char		chr_l_h_posdate[APL_DATE_LEN]	= APL_NULL_STRING;
	char		chr_l_now[APL_DATE_LEN]			= APL_NULL_STRING;
	char		chr_l_now_dttime[APL_DATE_LEN]	= APL_NULL_STRING;
	char		chr_l_nextbusi_date[APL_DATE_LEN]	= APL_NULL_STRING;
	char		chr_l_nextbusi_date_new[APL_DATE_LEN]	= APL_NULL_STRING;
	char		chr_l_prevbusi_date[APL_DATE_LEN]	= APL_NULL_STRING;
	char		chr_l_prevbusi_woutdttime[APL_DATE_LEN]	= APL_NULL_STRING;
	char		chr_l_prevbusi_date_new[APL_DATE_LEN]	= APL_NULL_STRING;
	short 		l_i_prevbusi_date					= 0;
	int 		int_l_diff								=0;
   int		int_l_chkflg 							= 0;
	int 		i										= 0;
	int 		x										= 0;
	int 		y										= 0;
	int 		j										= 0;
	char		chr_l_parm_str[500]				= APL_NULL_STRING;
	char		chr_l_parm_str_new[500]				= APL_NULL_STRING;
	char		chr_l_strrefno[500]				= APL_NULL_STRING;
	// char     chr_l_h_refno_A[APL_TXNREFNO_LEN]       = APL_NULL_STRING;
	// char     chr_h_prevclient[APL_TXNREFNO_LEN]       = APL_NULL_STRING;
	char		chr_l_h_swfmsgno[7]				= APL_NULL_STRING;
	char		chr_l_zeromov_flg					= APL_NULL_CHAR;
	char		chr_l_msgopt_ind					= APL_NULL_CHAR;
	char            chr_l_h_restart_data[51]                    = APL_NULL_STRING;
	char            chr_l_h_rowid[APL_ROWID_LEN]        = APL_NULL_STRING;

	int		int_l_h_dayofweek					= 0;
	//int		int_l_h_addrseq_num					= 0;
	int		int_l_reccount						= 0;
	int		int_l_exitcode						= 0;

//      short		l_i_addrseq_num					= 0;
	short		l_i_posdate						= 0;
//	short		l_i_swfmsgno					= 0;
	short           l_i_restart_data                                = 0;
	short           l_i_rowid					= 0;
	//short           l_i_now						= 0;
	//short		l_i_refno					= 0;
 	short    l_i_dayofweek              = 0;
	char  chr_l_msg_flg_572[2];                  
	
	char     chr_l_h_new_prevclient[APL_CLIENT_LENGTH]       = APL_NULL_STRING;
	char     chr_l_h_new_currclient[APL_CLIENT_LENGTH]       = APL_NULL_STRING;
	int		int_l_new_acctcount						= 0;
	char		chr_l_h_new_restart_client[APL_CLIENT_LENGTH]	 = APL_NULL_STRING;
	char		chr_l_new_restart_phase[2]	=	APL_NULL_STRING;
	char		chr_l_tmp_new_restart_client[APL_CLIENT_LENGTH]	 = APL_NULL_STRING;
	char		chr_l_tmp_new_restart_phase[2]	=	APL_NULL_STRING;
	char     chr_l_tmp_restart_data[51]                    = APL_NULL_STRING;
	char     chr_h_msg_sch_no[2]                    = APL_NULL_STRING;
	char l_temp_processing_status[51] = APL_NULL_STRING;

	MT_SCHDET_STRUCT_H *l_mt_schdet_struct_h = NULL;
	MT_SCHDET_STRUCT_I *l_mt_schdet_struct_i = NULL;

	

	EXEC SQL VAR l_mt_schdet_struct_h->h_dl_client IS STRING;
	EXEC SQL VAR l_mt_schdet_struct_h->h_msg_ident_no IS STRING;
	EXEC SQL VAR l_mt_schdet_struct_h->h_eom_msg_ind IS STRING;
	EXEC SQL VAR l_mt_schdet_struct_h->h_generate_day IS STRING;
	EXEC SQL VAR l_mt_schdet_struct_h->h_pos_txn_ind IS STRING;
	EXEC SQL VAR l_mt_schdet_struct_h->h_nil_mov_ind IS STRING;
	EXEC SQL VAR l_mt_schdet_struct_h->h_msg_opt IS STRING;
	EXEC SQL VAR l_mt_schdet_struct_h->h_loc_stat IS STRING;
	EXEC SQL VAR l_mt_schdet_struct_h->h_access_stamp IS STRING;
        EXEC SQL VAR chr_l_h_swfmsgno IS STRING;
        // EXEC SQL VAR chr_l_h_refno_A IS STRING;
	EXEC SQL VAR chr_l_h_restart_data IS STRING;
	EXEC SQL VAR chr_l_h_new_prevclient IS STRING;
	EXEC SQL VAR chr_l_h_new_currclient IS STRING;
	EXEC SQL VAR chr_l_h_new_restart_client IS STRING;
	EXEC SQL VAR chr_h_msg_sch_no IS STRING;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	

l_mt_schdet_struct_h = (MT_SCHDET_STRUCT_H *)calloc(1, sizeof(MT_SCHDET_STRUCT_H));
	APL_MALLOC_FAIL(l_mt_schdet_struct_h);
	l_mt_schdet_struct_i = (MT_SCHDET_STRUCT_I *)calloc(1, sizeof(MT_SCHDET_STRUCT_I));
	APL_MALLOC_FAIL(l_mt_schdet_struct_i);

	

		CO_ProcMonitor(	p_logfile, 
						"Entered Function MS_Proc_MsgSch\n",
						NULL,
						NULL);

	
	
	
	
	
   EXEC SQL SELECT PROCESSING_STATUS
   INTO :chr_l_h_restart_data:l_i_restart_data
   FROM SYS_BATCHPROC
   WHERE PROCESS_NAME=:argv[0]
   AND   PROC_INIT=:argv[1]
   AND   STARTDATE=:argv[2]
   AND   STATUS='started'
   FOR UPDATE OF PROCESSING_STATUS,STATUS;
   IS_ANY_ORA_ERROR
   if(APL_ZERO_RESULT_SET)
   {
      CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
      APL_GOBACK_FAIL
   }

	 if (l_i_restart_data == -1)
    {
       strcpy(chr_l_h_restart_data, APL_NULL_STRING);
		 strcpy(chr_l_new_restart_phase,"A");
		 strcpy(chr_l_h_new_restart_client," ");
    }
	 else
	 {
		strcpy(chr_l_tmp_restart_data,chr_l_h_restart_data);
		strcpy(chr_l_tmp_new_restart_client,strtok(chr_l_tmp_restart_data,RESTART_SEP_TOK));
		strcpy(chr_l_tmp_new_restart_phase,strtok(NULL,RESTART_SEP_TOK));	

		if(!strlen(chr_l_tmp_new_restart_client))
		{
			strcpy(chr_l_h_new_restart_client," ");
		 	strcpy(chr_l_new_restart_phase,chr_l_tmp_new_restart_phase);
		}
		else
		{
			strcpy(chr_l_h_new_restart_client,chr_l_tmp_new_restart_client);
		 	strcpy(chr_l_new_restart_phase,"B");
			memset(chr_l_buf, NULL, BUFFER_LEN);
			sprintf(	chr_l_buf, "\nRestarting with Acct :%s:", chr_l_h_new_restart_client);
			CO_ProcMonitor(p_logfile,chr_l_buf,NULL,NULL);
		}
	 }


   

   if (APL_FAILURE == CO_RtvSysDt(chr_l_now, l_debug_info_ptr ))
   {
      APL_GOBACK_FAIL
   }
   

   
 

	

	memset(chr_h_msg_sch_no,APL_NULL_CHAR,3);
	if (strcmp(argv[0],S_MSG_SCH_HOLDG) == 0)
		strcpy(chr_h_msg_sch_no,"4");
	else if (strcmp(argv[0],S_MSG_SCH_PENDG) == 0)
		strcpy(chr_h_msg_sch_no,"6");
	else if (strcmp(argv[0],S_MSG_SCH_TRANS) == 0)
		strcpy(chr_h_msg_sch_no,"5");

	switch (chr_l_new_restart_phase[0])
  {
	case 'A':
	 
	
	
	case 'B':

		EXEC SQL SELECT TO_NUMBER(TO_CHAR(TO_DATE(:chr_l_now),'D'))
		INTO :int_l_h_dayofweek:l_i_dayofweek
		FROM DUAL ;

		IS_ANY_ORA_ERROR
		if(CO_Chk_LstDtYear(chr_l_now,&int_l_exitcode,l_debug_info_ptr)==APL_FAILURE)
		{
  			APL_GOBACK_FAIL
		}
		EXEC SQL SELECT to_date(:chr_l_now)  + 1
      		            INTO chr_l_nextbusi_date_new
            		      FROM DUAL;
		if (CO_Upd_SToNextBussDt(chr_l_nextbusi_date_new,chr_l_nextbusi_date,l_debug_info_ptr)==APL_FAILURE)
		{
			APL_GOBACK_FAIL
		}
		sprintf(strcpy(chr_l_now_dttime,chr_l_now)+11,"12:00:00");

		EXEC SQL SELECT to_date(:chr_l_now_dttime)-7 
					INTO :chr_l_prevbusi_date:l_i_prevbusi_date
					FROM DUAL;
		IS_ANY_ORA_ERROR;

		int_l_chkflg = 0;
		
      if (APL_FAILURE == CO_Chk_Holiday( chr_l_prevbusi_date,
                                             &int_l_chkflg,
                                             l_debug_info_ptr,APL_NULL_STRING ))
      {
         APL_GOBACK_FAIL;
      }
		if  (int_l_chkflg)
		{
          if(MS_Rtv_NxtBussDtSch(chr_l_prevbusi_date,
                                     chr_l_prevbusi_date_new,
                                     l_debug_info_ptr)==APL_FAILURE)
          APL_GOBACK_FAIL
			 strncpy(chr_l_prevbusi_woutdttime,chr_l_prevbusi_date_new,10);
		}
		else
			strncpy(chr_l_prevbusi_woutdttime,chr_l_prevbusi_date,10);
			chr_l_prevbusi_woutdttime[10]=APL_NULL_CHAR;
		
		printf("l_prevbusi_date %s\n",chr_l_prevbusi_date);
		printf("l_prevbusi_woutdttime %s\n",chr_l_prevbusi_woutdttime);
		printf("l_nextbusi_date %s\n",chr_l_nextbusi_date);
		printf("l_now %s\n",chr_l_now);


		

		EXEC SQL SELECT to_date(:chr_l_nextbusi_date) - to_date(:chr_l_now)
					INTO :int_l_diff FROM DUAL;
		IS_ANY_ORA_ERROR;

		printf("l_diff %d \n",int_l_diff);
		if(( int_l_diff < 7 ) && ( int_l_diff != 1 ))
		{
			strcpy(chr_holi_str,"NNNNNNN");
			x=int_l_h_dayofweek; 
			y= int_l_diff-1 ; 
			j=0;
			for (i=0;i<y;i++)
			{
				if(x+i>=7)
				{
					chr_holi_str[j]='Y';
					j++;
				}
				else
				chr_holi_str[x+i]='Y';	
			}
		}
		else if (int_l_diff!=1)	
		{	
			strcpy(chr_holi_str,"YYYYYYY");
		}
		printf("holi_Str is %s\n",chr_holi_str);
		
		
		
		if (strcmp(argv[0],S_MSG_SCH) == 0)
		{
			EXEC SQL DECLARE acc_cursor CURSOR FOR
			SELECT 	a.*, b.CLN_POS_DT
			FROM MT_SCHDET_VEW a, MT_CLIENT b
			WHERE a.CLIENT = b.CLN_CODE
			AND	(a.client > :chr_l_h_new_restart_client)
			AND 	((SUBSTR(GENERATE_DAY, :int_l_h_dayofweek, 1) = 'Y') OR 
				((:int_l_exitcode = 1) AND (EOM_MSG_IND = 'Y') AND (SUBSTR(GENERATE_DAY, :int_l_h_dayofweek, 1) = 'N'))OR ((nvl(WEEKLYSTMT,' ')= 'Y') AND (substr(:chr_holi_str,instr(GENERATE_DAY,'Y'),1) = 'Y' )))
			ORDER BY a.client, A.MSG_IDENT_NO ;
		}
		else 
		{

         if (strcmp(chr_h_msg_sch_no,"6") == 0)
         {
            EXEC SQL DECLARE acc_cursor2 CURSOR FOR
         	     SELECT  a.*, b.CLN_POS_DT
                 FROM MT_SCHDET_VEW a, MT_CLIENT b
                 WHERE a.CLIENT = b.CLN_CODE
                 AND     a.MSG_IDENT_NO in ('6','36','37')
                 AND     (a.client > :chr_l_h_new_restart_client)
                 AND     ((SUBSTR(GENERATE_DAY, :int_l_h_dayofweek, 1) = 'Y') OR
                 ((:int_l_exitcode = 1) AND (EOM_MSG_IND = 'Y') AND (SUBSTR(GENERATE_DAY, :int_l_h_dayofweek, 1) = 'N'))OR((nvl(WEEKLYSTMT,' ')= 'Y') AND (substr(:chr_holi_str,instr(GENERATE_DAY,'Y'),1) = 'Y' )))
                  ORDER BY a.client, A.MSG_IDENT_NO ;
          }
         else if (strcmp(chr_h_msg_sch_no,"4") == 0)
         {
            EXEC SQL DECLARE acc_cursor3 CURSOR FOR
                 SELECT  a.*, b.CLN_POS_DT
                 FROM MT_SCHDET a, MT_CLIENT b
                 WHERE a.CLN_CODE = b.CLN_CODE
                 AND     a.MSG_IDENT_NO = :chr_h_msg_sch_no
                 AND     (a.cln_code > :chr_l_h_new_restart_client)
                 AND     ((SUBSTR(GENERATE_DAY, :int_l_h_dayofweek, 1) = 'Y') OR
                 ((:int_l_exitcode = 1) AND (EOM_MSG_IND = 'Y') AND (SUBSTR(GENERATE_DAY, :int_l_h_dayofweek, 1)= 'N'))OR((nvl(WEEKLYSTMT,' ')= 'Y') AND (substr(:chr_holi_str,instr(GENERATE_DAY,'Y'),1) = 'Y' )))
                  ORDER BY a.CLN_CODE, A.MSG_IDENT_NO ;
			 }
          else
          {
				EXEC SQL DECLARE acc_cursor1 CURSOR FOR
					SELECT 	a.*, b.CLN_POS_DT
					FROM MT_SCHDET_VEW a, MT_CLIENT b
					WHERE a.CLIENT = b.CLN_CODE
					AND	a.MSG_IDENT_NO	= :chr_h_msg_sch_no
					AND	(a.client > :chr_l_h_new_restart_client)
					AND 	((SUBSTR(GENERATE_DAY, :int_l_h_dayofweek, 1) = 'Y') OR 
					((:int_l_exitcode = 1) AND (EOM_MSG_IND = 'Y') AND (SUBSTR(GENERATE_DAY, :int_l_h_dayofweek, 1) = 'N'))OR((nvl(WEEKLYSTMT,' ')= 'Y') AND (substr(:chr_holi_str,instr(GENERATE_DAY,'Y'),1) = 'Y' )))
					ORDER BY a.client, A.MSG_IDENT_NO ;
			}
		}

	
	  		memset(chr_l_msg_flg_572,APL_NULL_CHAR,2);
	  		strcpy(chr_l_msg_flg_572,MSG_FLG_572);
	
			memset(chr_l_h_new_prevclient,APL_NULL_CHAR,APL_CLIENT_LENGTH);
			if (strcmp(argv[0],S_MSG_SCH) == 0)
				EXEC SQL OPEN acc_cursor ;
			else
			{
            if (strcmp(chr_h_msg_sch_no,"6") == 0)
           	      EXEC SQL OPEN acc_cursor2 ;
            else if (strcmp(chr_h_msg_sch_no,"4") == 0)
                  EXEC SQL OPEN acc_cursor3 ;
            else
         	       EXEC SQL OPEN acc_cursor1 ;
         }
			IS_ANY_ORA_ERROR

			for (int_l_reccount=1; ;int_l_reccount++)
			{
		

				memset(l_mt_schdet_struct_h, NULL, sizeof(MT_SCHDET_STRUCT_H));
				memset(l_mt_schdet_struct_i, NULL, sizeof(MT_SCHDET_STRUCT_I));
				memset(chr_l_h_posdate, NULL, APL_DATE_LEN);
				memset(chr_l_h_rowid, NULL, APL_ROWID_LEN);
				l_i_posdate 	 = 0;
				l_i_rowid                = 0;

				if (strcmp(argv[0],S_MSG_SCH) == 0)
				{
					printf("WE ARE IN LOOP FOR S_MSG_SCH\n");
					EXEC SQL FETCH acc_cursor INTO 	:l_mt_schdet_struct_h:l_mt_schdet_struct_i,
															:chr_l_h_posdate:l_i_posdate ;
				}
				else
				{
            if (strcmp(chr_h_msg_sch_no,"6") == 0)
				{
					printf("WE ARE IN LOOP FOR 6\n");
               EXEC SQL FETCH acc_cursor2 INTO  :l_mt_schdet_struct_h:l_mt_schdet_struct_i,
                                             :chr_l_h_posdate:l_i_posdate ;
				}
            else if (strcmp(chr_h_msg_sch_no,"4") == 0)
				{
               EXEC SQL FETCH acc_cursor3 INTO  :l_mt_schdet_struct_h:l_mt_schdet_struct_i,
                                             :chr_l_h_posdate:l_i_posdate ;
				}
            else
				{
					printf("WE ARE IN LOOP FOR else part\n");
					EXEC SQL FETCH acc_cursor1 INTO 	:l_mt_schdet_struct_h:l_mt_schdet_struct_i,
															:chr_l_h_posdate:l_i_posdate ;
				}
				}

				IS_ANY_ORA_ERROR
		
				if (APL_ZERO_RESULT_SET) break;
		
				printf("l_h_sch_struct->h_generate_day is %s\n",l_mt_schdet_struct_h->h_generate_day);
				printf("l_h_sch_struct->h_msg_ident_no is %s\n",l_mt_schdet_struct_h->h_msg_ident_no);

				if(!strlen(chr_l_h_new_prevclient))
					strcpy(chr_l_h_new_prevclient,l_mt_schdet_struct_h->h_dl_client);
	
				memset(chr_l_h_new_currclient,APL_NULL_CHAR,APL_CLIENT_LENGTH);
				strcpy(chr_l_h_new_currclient,l_mt_schdet_struct_h->h_dl_client);	
				memset(chr_l_buf, NULL, BUFFER_LEN);
				sprintf(	chr_l_buf, 
							"%5d. Picked Acct :%s: ,Mesg No.:%s: ,Sch :%d:", 
							int_l_reccount,
							l_mt_schdet_struct_h->h_dl_client, 
							l_mt_schdet_struct_h->h_msg_ident_no,
							l_mt_schdet_struct_h->h_schsequence_num );
				CO_ProcMonitor(p_logfile, chr_l_buf, NULL, NULL);

				


				if (!strcmp(l_mt_schdet_struct_h->h_msg_ident_no, HOLDINGSMSGNO))
				{
					strcpy(chr_l_h_swfmsgno,"571");
					if (((!strcmp(l_mt_schdet_struct_h->h_nil_mov_ind, "Y")) &&
				  			(!strncmp(chr_l_h_posdate, chr_l_now, 10)) ||
				  			(!strcmp(l_mt_schdet_struct_h->h_pos_txn_ind, "Y"))) ||
				 			((!strncmp(chr_l_h_posdate, chr_l_now, 10)) &&
				  			(!strcmp(l_mt_schdet_struct_h->h_pos_txn_ind, "Y"))))
					{
						chr_l_zeromov_flg = 'Y';
					}
					else
					{
						chr_l_zeromov_flg = 'N';
					}

					memset(chr_l_parm_str, NULL, 500);
					if(((l_mt_schdet_struct_h->h_generate_day[int_l_h_dayofweek-1] == 'Y')&&(int_l_exitcode == 0)) || (strcmp(l_mt_schdet_struct_h->h_weeklystmt,"Y")==0 ))	
					{
				
						sprintf(	chr_l_parm_str, 
									"%s;N;%c;%s;%s;%d;N;",
									chr_l_now,
									chr_l_zeromov_flg,
									APL_NULL_STRING,
									l_mt_schdet_struct_h->h_loc_stat, l_mt_schdet_struct_h->h_schsequence_num );
					}
					else if ((int_l_exitcode == 1) && (strcmp(l_mt_schdet_struct_h->h_eom_msg_ind,"Y") == 0))	
					{
						memset(chr_l_parm_str, NULL, 500);
				
						sprintf(	chr_l_parm_str, 
									"%s;N;%c;%s;%s;%d;Y;",
									chr_l_now,
									chr_l_zeromov_flg,
									APL_NULL_STRING,
									l_mt_schdet_struct_h->h_loc_stat , l_mt_schdet_struct_h->h_schsequence_num );
					}
					else if(l_mt_schdet_struct_h->h_generate_day[int_l_h_dayofweek-1] == 'Y')
					{
						sprintf(	chr_l_parm_str, 
									"%s;N;%c;%s;%s;%d;N;",
									chr_l_now,
									chr_l_zeromov_flg,
									APL_NULL_STRING,
									l_mt_schdet_struct_h->h_loc_stat, l_mt_schdet_struct_h->h_schsequence_num );
					}
				}

				

				else if (!strcmp(l_mt_schdet_struct_h->h_msg_ident_no, STMTPENDINGMSGNO))
				{
					strcpy(chr_l_h_swfmsgno,"573");
					memset(chr_l_parm_str, NULL, 500);

			

				switch (l_mt_schdet_struct_h->h_msg_opt[0])
				{
					case '1':	chr_l_msgopt_ind = 'P';	break;
					case '2':	chr_l_msgopt_ind = 'F';	break;
					case '3':	chr_l_msgopt_ind = 'C';	break;
					case '4':	chr_l_msgopt_ind = 'M';	break;
					case '5':	chr_l_msgopt_ind = 'S';	break;
					case '6':	chr_l_msgopt_ind = 'A';	break;
				}

			

			

			
				if((l_mt_schdet_struct_h->h_generate_day[int_l_h_dayofweek-1] == 'Y') || (strcmp(l_mt_schdet_struct_h->h_weeklystmt,"Y")==0 ))
				{
					
					sprintf(	chr_l_parm_str, 
								"%c;%s;%d;N;",
								chr_l_msgopt_ind,
								l_mt_schdet_struct_h->h_pend_ind, l_mt_schdet_struct_h->h_schsequence_num  );
				}
				else if ((int_l_exitcode == 1) && (strcmp(l_mt_schdet_struct_h->h_eom_msg_ind,"Y") == 0))	
				{
				
					sprintf(	chr_l_parm_str, 
								"%c;%s;%d;Y;",
								chr_l_msgopt_ind,
								l_mt_schdet_struct_h->h_pend_ind , l_mt_schdet_struct_h->h_schsequence_num);
				}
			}

			

			else if (!strcmp(l_mt_schdet_struct_h->h_msg_ident_no, STMTTRANMSGNO))
			{
				memset(chr_l_strrefno, APL_NULL_CHAR, 500);
				strcpy(chr_l_h_swfmsgno,"572");
				memset(chr_l_parm_str, NULL, 500);
				if((l_mt_schdet_struct_h->h_generate_day[int_l_h_dayofweek-1] == 'Y') ||(strcmp(l_mt_schdet_struct_h->h_weeklystmt,"Y")==0 ))	
				{
					
					sprintf(	chr_l_parm_str,
							 "%s;%s;%d;%s;N;", 		
							chr_l_now, 
							l_mt_schdet_struct_h->h_pos_txn_ind,  l_mt_schdet_struct_h->h_schsequence_num ,chr_l_strrefno ); 
				}
				else if ((int_l_exitcode == 1) && (strcmp(l_mt_schdet_struct_h->h_eom_msg_ind,"Y") == 0))	
				{
					
					sprintf(	chr_l_parm_str, 
							"%s;%s;%d:%s;Y;",
							chr_l_now,
							l_mt_schdet_struct_h->h_pos_txn_ind, l_mt_schdet_struct_h->h_schsequence_num,chr_l_strrefno );
				}
			}
         else if (!strcmp(l_mt_schdet_struct_h->h_msg_ident_no, STMTALLEGMSGNO))
         {
            memset(chr_l_strrefno, APL_NULL_CHAR, 500);
            strcpy(chr_l_h_swfmsgno,"586");
            memset(chr_l_parm_str, NULL, 500);
            if((l_mt_schdet_struct_h->h_generate_day[int_l_h_dayofweek-1] == 'Y') ||(strcmp(l_mt_schdet_struct_h->h_weeklystmt,"Y")==0 ))  
            {
               
               sprintf( chr_l_parm_str,
                      "%s;%s;%d;%s;N;",
                     chr_l_now,
                     l_mt_schdet_struct_h->h_pos_txn_ind,  l_mt_schdet_struct_h->h_schsequence_num ,chr_l_strrefno );
            }
            else if ((int_l_exitcode == 1) && (strcmp(l_mt_schdet_struct_h->h_eom_msg_ind,"Y") == 0))   
            {
               
               sprintf( chr_l_parm_str,
                     "%s;%s;%d:%s;Y;",
                     chr_l_now,
                     l_mt_schdet_struct_h->h_pos_txn_ind, l_mt_schdet_struct_h->h_schsequence_num,chr_l_strrefno );
            }
         }
         else if (!strcmp(l_mt_schdet_struct_h->h_msg_ident_no, STMTINTRAPOSADVNO))
         {
            memset(chr_l_strrefno, APL_NULL_CHAR, 500);
            strcpy(chr_l_h_swfmsgno,"538");
            memset(chr_l_parm_str, NULL, 500);
            if((l_mt_schdet_struct_h->h_generate_day[int_l_h_dayofweek-1] == 'Y') ||(strcmp(l_mt_schdet_struct_h->h_weeklystmt,"Y")==0 ))  
            {
               
               sprintf( chr_l_parm_str,
                      "%s;%s;%d;%s;N;",
                     chr_l_now,
                     l_mt_schdet_struct_h->h_nil_mov_ind,  l_mt_schdet_struct_h->h_schsequence_num ,chr_l_strrefno );
            }
            else if ((int_l_exitcode == 1) && (strcmp(l_mt_schdet_struct_h->h_eom_msg_ind,"Y") == 0))   
            {
               
               sprintf( chr_l_parm_str,
                     "%s;%s;%d:%s;Y;",
                     chr_l_now,
                     l_mt_schdet_struct_h->h_nil_mov_ind, l_mt_schdet_struct_h->h_schsequence_num,chr_l_strrefno );
            }
         }
			else
			{
				continue;
			}
			printf("l_parm_str %s\n",chr_l_parm_str);
			printf("l_prevbusi_woutdttime is %s\n",chr_l_prevbusi_woutdttime);
			//printf("l_parm_str_new %s\n");
			
			if(strcmp(l_mt_schdet_struct_h->h_weeklystmt,"Y")==0)
			{
				memset(chr_l_parm_str_new,APL_NULL_CHAR,500);
				strcpy(chr_l_parm_str_new,chr_l_parm_str);
				memset(chr_l_parm_str,APL_NULL_CHAR,500);
				sprintf(chr_l_parm_str,
						  "%s%s;Y;",
							chr_l_parm_str_new,
							chr_l_prevbusi_woutdttime);
			}
			else
			{
				memset(chr_l_parm_str_new,APL_NULL_CHAR,500);
				strcpy(chr_l_parm_str_new,chr_l_parm_str);
				memset(chr_l_parm_str,APL_NULL_CHAR,500);
				sprintf(chr_l_parm_str,
						  "%s%s;N;",
							chr_l_parm_str_new,
							APL_NULL_STRING);
			}
			printf("l_parm_str_new %s\n",chr_l_parm_str_new);
			printf("l_parm_str %s\n",chr_l_parm_str);

		

			if (APL_FAILURE == GBDbInsIMSGENT(	chr_l_h_swfmsgno,
															APL_NULL_STRING,
															l_mt_schdet_struct_h->h_dl_client,
															'Y',
															chr_l_parm_str,
															l_debug_info_ptr ))
			{
				APL_GOBACK_FAIL
			}

			

			printf(" chr_l_h_new_prevclient is %s\n",chr_l_h_new_prevclient);
			printf("l_h_sch_struct->h_dl_client is %s\n",l_mt_schdet_struct_h->h_dl_client);

 	     if ( strcmp(chr_l_h_new_prevclient,l_mt_schdet_struct_h->h_dl_client) != 0 )
			{
				int_l_new_acctcount++;
		
				
				memset(chr_l_buf, NULL, BUFFER_LEN);
				sprintf(	chr_l_buf, 
						"\nUpdate DL_DEAL for MSG_STATUS for Acct :%s:", 
						chr_l_h_new_prevclient);
			
				CO_ProcMonitor(       p_logfile,
            	             chr_l_buf,
               	          NULL,
                  	       NULL);	


				EXEC SQL UPDATE DL_DEAL
				SET MSG_STAT = ltrim(rtrim(MSG_STAT))||'B',
				access_stamp = :chr_l_now
				WHERE CLIENT=:chr_l_h_new_prevclient
				AND INSTR(NVL(MSG_STAT,' '),'I') <> 0
				AND INSTR(NVL(MSG_STAT,' '),'B') = 0
            AND INSTRUMENT_DT IS NOT NULL;
 
            IS_ANY_ORA_ERROR  
         
            EXEC SQL UPDATE DL_DEALRST
            SET MSG_STAT = ltrim(rtrim(MSG_STAT))||'R'
            WHERE CLIENT=:chr_l_h_new_prevclient
            AND INSTR(NVL(MSG_STAT,' '),'I') <> 0
            AND INSTR(NVL(MSG_STAT,' '),'R') = 0
				AND INSTR(NVL(MSG_STAT,' '),'P') = 0;
   
            IS_ANY_ORA_ERROR
         


         

				printf("BEFORE UPDATING CLOCNCHG IN SCHEDULER VALUES ARE l_mt_schdet_struct_h->h_msg_ident_no = %s\n",l_mt_schdet_struct_h->h_msg_ident_no);
				printf("l_h_new_prevaccount is %s\n",chr_l_h_new_prevclient);

					EXEC SQL UPDATE DL_LOCNCHG
								SET LOC_CHNG_STAT='AA',
								access_stamp = :chr_l_now
							   WHERE	 LOC_CHNG_STAT='II'
								AND CLIENT=:chr_l_h_new_prevclient;
								
					printf("sqlca.sqlcode is %d\n",sqlca.sqlcode);
						
					IS_ANY_ORA_ERROR;

				if( int_l_new_acctcount%COMMITSIZE == 0 )		
				{
					memset(chr_l_buf, NULL, BUFFER_LEN);
					sprintf(	chr_l_buf,"Statement Messages:Processed %d Accounts",int_l_new_acctcount); 

					memset(chr_l_h_restart_data,APL_NULL_CHAR,51);
					sprintf(chr_l_h_restart_data,"%s%sB",chr_l_h_new_prevclient,RESTART_SEP_TOK);

					EXEC SQL UPDATE SYS_BATCHPROC
					SET	PROCESSING_STATUS = :chr_l_h_restart_data,
							STAT_DET = :chr_l_buf
					WHERE PROCESS_NAME=:argv[0]
					AND   PROC_INIT=:argv[1]
					AND   STARTDATE=:argv[2]
					AND   STATUS='started';

   	      	IS_ANY_ORA_ERROR
					memset(chr_l_h_restart_data,APL_NULL_CHAR,51);
	
					CO_ProcMonitor(       p_logfile,
      	      	             "Record committed",
         	      	          NULL,
            	      	       NULL);	
					EXEC SQL COMMIT WORK ;
					IS_ANY_ORA_ERROR

					EXEC SQL SELECT PROCESSING_STATUS into :l_temp_processing_status
					FROM SYS_BATCHPROC
					WHERE PROCESS_NAME=:argv[0]
					AND   PROC_INIT=:argv[1]
					AND   STARTDATE=:argv[2]
					AND   STATUS='started'
					FOR UPDATE OF PROCESSING_STATUS,STATUS;

					if(APL_ZERO_RESULT_SET)
					{
						CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
						APL_GOBACK_FAIL
					}
				}
				memset(chr_l_h_new_prevclient,APL_NULL_CHAR,APL_CLIENT_LENGTH);
				
				strcpy(chr_l_h_new_prevclient,l_mt_schdet_struct_h->h_dl_client);
			}	
		}

		if (strcmp(argv[0],S_MSG_SCH) == 0)
			EXEC SQL CLOSE acc_cursor ;
		else
      {
      	if (strcmp(chr_h_msg_sch_no,"6") == 0)
         	EXEC SQL CLOSE acc_cursor2 ;
         else if (strcmp(chr_h_msg_sch_no,"4") == 0)
            EXEC SQL CLOSE acc_cursor3 ;
      	else
         	EXEC SQL CLOSE acc_cursor1 ;
      }
			
		IS_ANY_ORA_ERROR

   	if (!strcmp(chr_l_h_new_prevclient,chr_l_h_new_currclient))
		{
			
			memset(chr_l_buf, NULL, BUFFER_LEN);
			sprintf(	chr_l_buf, 
					"\nUpdate DL_DEAL for MSG_STATUS for Acct :%s:", 
					chr_l_h_new_currclient);
			
			CO_ProcMonitor(       p_logfile,
         	               chr_l_buf,
            	            NULL,
               	         NULL);	

			EXEC SQL UPDATE DL_DEAL
			SET MSG_STAT = ltrim(rtrim(MSG_STAT))||'B',
			access_stamp = :chr_l_now
			WHERE CLIENT=:chr_l_h_new_currclient
			AND INSTR(NVL(MSG_STAT,' '),'I') <> 0
			AND INSTR(NVL(MSG_STAT,' '),'B') = 0
	      AND INSTRUMENT_DT IS NOT NULL;
  
         IS_ANY_ORA_ERROR
      
         EXEC SQL UPDATE DL_DEALRST
         SET MSG_STAT = ltrim(rtrim(MSG_STAT))||'R'
         WHERE CLIENT=:chr_l_h_new_prevclient
         AND INSTR(NVL(MSG_STAT,' '),'I') <> 0
         AND INSTR(NVL(MSG_STAT,' '),'R') = 0
			AND INSTR(NVL(MSG_STAT,' '),'P') = 0;
   
         IS_ANY_ORA_ERROR


			
			int_l_new_acctcount++;
			memset(chr_l_buf, NULL, BUFFER_LEN);
			sprintf(	chr_l_buf,"Statement Messages:Processed %d Accounts",int_l_new_acctcount); 

         EXEC SQL UPDATE DL_LOCNCHG
                  SET LOC_CHNG_STAT='AA',
                  access_stamp = :chr_l_now
                  WHERE  LOC_CHNG_STAT='II'
                  AND CLIENT=:chr_l_h_new_prevclient;

       printf("sqlca.sqlcode is %d\n",sqlca.sqlcode);

       IS_ANY_ORA_ERROR;

			memset(chr_l_h_restart_data,APL_NULL_CHAR,51);
			sprintf(chr_l_h_restart_data,"%s%sB",chr_l_h_new_prevclient,RESTART_SEP_TOK);

			EXEC SQL UPDATE SYS_BATCHPROC
			SET	PROCESSING_STATUS = :chr_l_h_restart_data,
					STAT_DET = :chr_l_buf
			WHERE PROCESS_NAME=:argv[0]
			AND   PROC_INIT=:argv[1]
			AND   STARTDATE=:argv[2]
			AND   STATUS='started';

	      IS_ANY_ORA_ERROR


			CO_ProcMonitor(       p_logfile,
      	                "Record committed",
         	             NULL,
            	          NULL);	
			EXEC SQL COMMIT WORK ;
			IS_ANY_ORA_ERROR

			memset(chr_l_h_restart_data,APL_NULL_CHAR,51);

			EXEC SQL SELECT PROCESSING_STATUS into :l_temp_processing_status
			FROM SYS_BATCHPROC
			WHERE PROCESS_NAME=:argv[0]
			AND   PROC_INIT=:argv[1]
			AND   STARTDATE=:argv[2]
			AND   STATUS='started'
			FOR UPDATE OF PROCESSING_STATUS,STATUS;

			if(APL_ZERO_RESULT_SET)
			{
				CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
				APL_GOBACK_FAIL
			}
		}

         EXEC SQL UPDATE DL_DEAL
         SET MSG_STAT = ltrim(rtrim(MSG_STAT))||'Z',
         access_stamp = :chr_l_now
         WHERE INSTR(NVL(MSG_STAT,' '),'X') <> 0
         AND INSTR(NVL(MSG_STAT,' '),'Z') = 0
         AND INSTRUMENT_DT IS NOT NULL;

         IS_ANY_ORA_ERROR

            EXEC SQL UPDATE DL_DEALRST
            SET MSG_STAT = ltrim(rtrim(MSG_STAT))||'R'
            WHERE  INSTR(NVL(MSG_STAT,' '),'X') <> 0
            AND INSTR(NVL(MSG_STAT,' '),'R') = 0;

            IS_ANY_ORA_ERROR

         EXEC SQL UPDATE DL_COPYHISTORY
         SET MSG_STAT = ltrim(rtrim(MSG_STAT))||'Z',
         access_stamp = :chr_l_now
         WHERE INSTR(NVL(MSG_STAT,' '),'X') <> 0
         AND INSTR(NVL(MSG_STAT,' '),'Z') = 0
         AND INSTRUMENT_DT IS NOT NULL;

         IS_ANY_ORA_ERROR


	default: break;

	}
	
	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
			CO_ProcMonitor(	p_logfile, 
							"Leaving Function MS_Proc_MsgSch with success\n",
							NULL,
							NULL);
      return(APL_SUCCESS);

   RETURN_FAILURE :
			CO_ProcMonitor(	p_logfile, 
							"Leaving Function MS_Proc_MsgSch with errors\n",
							NULL,
							NULL);

		CO_ProcMonitor(p_logfile, APL_NULL_STRING, l_debug_info_ptr, NULL);
		CO_FreeErrLst(l_debug_info_ptr);
      return(APL_FAILURE);

}


int	CO_Upd_SToNextBussDt(const	char		*p_tmp_date,
								char				*p_out_date,
								DEBUG_INFO_STRUCT_H   **l_debug_info_ptr
								)
{
	char	chr_out_date[APL_DATE_LEN]	=	APL_NULL_STRING;
	char chr_p_inp_date[APL_DATE_LEN]=APL_NULL_STRING;
	short	i_out_date	=	0;
	EXEC SQL VAR p_tmp_date IS STRING;
	EXEC SQL VAR chr_p_inp_date IS STRING;
	sprintf(strcpy(chr_p_inp_date,p_tmp_date)+11,"12:00:00");

	/*Smita - HDFCCA Base Version - Changed Col Names*/
	EXEC SQL select MAX(H_DATE) + 1
	into	:chr_out_date:i_out_date
	from MT_HOLIDAY
	where STATUS='AA'
	AND BANK_IND='Y'
	connect by prior H_DATE + 1 = H_DATE
				and prior STATUS = STATUS
				and prior BANK_IND = BANK_IND
	start with H_DATE=:chr_p_inp_date and STATUS='AA' and BANK_IND='Y';

	IS_ANY_ORA_ERROR

	if	(i_out_date	==	-1)
	{
		strcpy(chr_out_date,chr_p_inp_date);
	}

	strcpy(p_out_date,chr_out_date);
	
		APL_GOBACK_SUCCESS
      RETURN_SUCCESS  :
      {
			return (APL_SUCCESS);
      }
      RETURN_FAILURE  :
      {
         return (APL_FAILURE);
		}
}

int CO_Chk_LstDtYear(char *currdate,
								int *int_result,
								DEBUG_INFO_STRUCT_H **l_debug_info_ptr) {

	char chr_nextdate[APL_DATE_LEN];
	char chr_tempdate[APL_DATE_LEN];
	int h_res;
	EXEC SQL VAR chr_nextdate IS STRING;
	EXEC SQL VAR currdate IS STRING;
	EXEC SQL VAR chr_tempdate IS STRING;
	EXEC SQL SELECT TO_DATE(:currdate)+1 INTO :chr_tempdate
	FROM DUAL;
	IS_ANY_ORA_ERROR
	if(CO_Upd_SToNextBussDt(chr_tempdate,chr_nextdate,l_debug_info_ptr)==APL_FAILURE)
		APL_GOBACK_FAIL
	EXEC SQL SELECT LAST_DAY(TO_DATE(:currdate)) INTO :chr_tempdate
	FROM DUAL;
	IS_ANY_ORA_ERROR;
	strncpy(chr_tempdate+11, "12:00:00", 8);
	chr_tempdate[APL_DATE_LEN -1]=APL_NULL_CHAR;
	EXEC SQL SELECT TO_DATE(:chr_tempdate)-TO_DATE(:chr_nextdate) INTO :h_res
	FROM DUAL;
	IS_ANY_ORA_ERROR
	if(h_res<0){
		*int_result=APL_SUCCESS;
		}
	else{
		*int_result=APL_FAILURE;
		}
       APL_GOBACK_SUCCESS 
	RETURN_SUCCESS:
	{
		return APL_SUCCESS;
	}
	RETURN_FAILURE:
	{
		return APL_FAILURE;
	}
	}


int   MS_Rtv_NxtBussDtSch(const char     *chr_p_inp_date,
                           char           *p_out_date,
                           DEBUG_INFO_STRUCT_H   **l_debug_info_ptr
                           )
{
   struct sqlca sqlca;
   char  chr_out_date[APL_DATE_LEN]  =  APL_NULL_STRING;
   short i_out_date  =  0;

	/*Smita - HDFCCA Base Version - Changed Col Names*/
   EXEC SQL select min(H_DATE) - 1
   into  :chr_out_date:i_out_date
   from MT_HOLIDAY
   where STATUS='AA'
	AND BANK_IND='Y'
   connect by prior H_DATE - 1 = H_DATE
   and prior STATUS = STATUS
	and prior BANK_IND = BANK_IND
   start with H_DATE=:chr_p_inp_date and STATUS='AA' and BANK_IND='Y';

   IS_ANY_ORA_ERROR

   if (i_out_date == -1)
   {
      strcpy(chr_out_date,chr_p_inp_date);
   }

   strcpy(p_out_date,chr_out_date);

   APL_GOBACK_SUCCESS
     RETURN_SUCCESS  :
     {
      return (APL_SUCCESS);
     }
     RETURN_FAILURE  :
     {
        return (APL_FAILURE);
   }
}




int main(int argc,char **argv)
{
   DEBUG_INFO_STRUCT_H *l_debug_info_ptr=NULL ;
		/* Added by kotubabu for Linux Migration -Start*/
    #ifdef OS_LINUX
	FILE *l_finifile;
    #else
    FILE *l_finifile = APL_OUT_FILE;
    #endif
    #ifdef OS_LINUX
     l_finifile = APL_OUT_FILE;
    #endif
   /* Added by kotubabu for Linux Migration-End*/

   int int_l_retval=0;
	// int int_num = 0;
	int int_h_prog_status = 0;

   char chr_uname[APL_USERID_LEN] 	= APL_NULL_STRING;
   char chr_passwd[APL_PASSWD_LEN] 	= APL_NULL_STRING;
   char chr_custody_id_b[APL_USERID_LEN] 	= APL_NULL_STRING;
	// char chr_l_logdir[PATH_LENGTH] 	= APL_NULL_STRING;
	// char chr_l_logname[PATH_LENGTH] 	= APL_NULL_STRING;
	char chr_l_inifile[PATH_LENGTH] 	= APL_NULL_STRING;
	char chr_l_rep_file_prefix[3] 		= APL_NULL_STRING;

			/* Added by kotubabu for Linux Migration -Start*/
    #ifdef OS_LINUX
	FILE *l_flogfile = NULL;
    #else
    FILE *l_flogfile = APL_OUT_FILE;
    #endif
    #ifdef OS_LINUX
     l_flogfile = APL_OUT_FILE;
    #endif
   /* Added by kotubabu for Linux Migration-End*/

   EXEC SQL VAR chr_uname IS STRING;
   EXEC SQL VAR chr_passwd IS STRING;

	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

	if ( ( l_finifile=fopen(chr_l_inifile,"r") ) == NULL)
	{
		exit(-1);
	}


  APL_FETCH_DB_LOGIN_DETAILS(l_finifile, chr_custody_id_b, chr_uname, chr_passwd ,APL_OUT_FILE,&l_debug_info_ptr)//AIX - Warnings Removal - added &
   EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;
   IS_ANY_ORA_ERROR

	memset(chr_l_rep_file_prefix,APL_NULL_CHAR,3);
	if (strcmp(argv[0],S_MSG_SCH_HOLDG) == 0)
		strcpy(chr_l_rep_file_prefix,"HA");
	else if (strcmp(argv[0],S_MSG_SCH_PENDG) == 0)
		strcpy(chr_l_rep_file_prefix,"PA");
	else if (strcmp(argv[0],S_MSG_SCH_TRANS) == 0)
		strcpy(chr_l_rep_file_prefix,"TA");
	else if (strcmp(argv[0],S_MSG_SCH) == 0)
		strcpy(chr_l_rep_file_prefix,"4A");

        if (APL_FAILURE == CO_Rtv_RptFileName(chr_l_rep_file_prefix,
     					APL_LOGFILE_DESC,
     					100,
     					argv[5],
     					argv,
     					&l_flogfile,
     					&l_debug_info_ptr) )
        {
                exit(-1);
        }
	EXEC SQL COMMIT;
	IS_ANY_ORA_ERROR
		

	

	if (fclose(l_finifile)) 
	{
		exit(-1);
	}

   
		

	if (APL_FAILURE == CO_RtvSysParams(&l_debug_info_ptr))
	{
		CO_ProcMonitor(l_flogfile, "Could not get system params", &l_debug_info_ptr, NULL);
		APL_GOBACK_FAIL
	}

	EXEC SQL select count(*)
	INTO		int_h_prog_status
	FROM	SYS_BATCHPROC
	WHERE PROCESS_NAME=:argv[0]
	AND   PROC_INIT=:argv[1]
	AND   TO_CHAR(TO_DATE(STARTDATE),'ddmmyy')=TO_CHAR(TO_DATE(:argv[2]),'ddmmyy')
	AND   STATUS='completed';

	IS_ANY_ORA_ERROR

	if (int_h_prog_status != 0)
	{
		CO_ProcMonitor(l_flogfile, "Program Already Completed for Today", NULL, NULL);
		APL_GOBACK_SUCCESS
	}

   int_l_retval = MS_Proc_MsgSch( argv, l_flogfile, &l_debug_info_ptr);
   if ( int_l_retval == APL_FAILURE )
   {
		CO_ProcMonitor(l_flogfile, "IBDbMsgSchFn returned failure", NULL, NULL);
      APL_GOBACK_FAIL
   }
   else
   {
		EXEC SQL UPDATE SYS_BATCHPROC
      SET  status = 'completed'
      WHERE PROCESS_NAME=:argv[0]
      AND   PROC_INIT=:argv[1]
      AND   STARTDATE=:argv[2]
      AND   STATUS='started';

		if (sqlca.sqlcode)
		{
			CO_ProcMonitor(l_flogfile, "Could not update batch_in_proc", NULL, NULL);
			APL_GOBACK_FAIL
		}

      EXEC SQL COMMIT WORK RELEASE;
		if (sqlca.sqlcode)
		{
			CO_ProcMonitor(l_flogfile, "Could not do final commit", NULL, NULL);
			APL_GOBACK_FAIL
		}

      APL_GOBACK_SUCCESS
   }

	

	RETURN_SUCCESS :
		fclose(l_flogfile);
		exit(0);

	RETURN_FAILURE :
		fclose(l_flogfile);
		exit(1);
}


