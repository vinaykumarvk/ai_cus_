













 
#include "CO_HostStructdef.h"
EXEC SQL INCLUDE SQLCA.H;

 
int CBInsdbMsgConv(MS_MSGCONV_STRUCT_H *p_ms_msgconv_struct_h,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   struct sqlca         sqlca;
   MS_MSGCONV_STRUCT_H   l_ms_msgconv_struct_h;
   MS_MSGCONV_STRUCT_I   *l_ms_msgconv_struct_i = NULL;
   char                 chr_l_buf[BUFFER_LEN] = APL_NULL_STRING; 
   char                 chr_h_sys_access_stamp[APL_DATE_LEN] = APL_NULL_STRING;
   char                 chr_p_client[APL_CLIENT_LENGTH] = APL_NULL_STRING;
   char                 h_mstclt[APL_CLIENT_LENGTH] = APL_NULL_STRING;
   short                i_mstclt = 0;
   int                  int_h_count = 0 ;
  
   EXEC SQL VAR l_ms_msgconv_struct_h.h_dl_client is STRING;
   EXEC SQL VAR l_ms_msgconv_struct_h.h_setl_eff_date is STRING;
   EXEC SQL VAR l_ms_msgconv_struct_h.h_stat_eff_date is STRING;
   EXEC SQL VAR l_ms_msgconv_struct_h.h_ca_eff_date is STRING;
   EXEC SQL VAR l_ms_msgconv_struct_h.h_stmsg_eff_date is STRING;
   EXEC SQL VAR l_ms_msgconv_struct_h.h_access_stamp is STRING;   
   EXEC SQL VAR h_mstclt is STRING;   
   EXEC SQL VAR chr_p_client is STRING;   

 
   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   sqlca.sqlcode = 0;
   
  l_ms_msgconv_struct_h = *p_ms_msgconv_struct_h;  
 
   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CBInsdbMsgConv \n",NULL,p_intl_env_data_struct_h_d);
      
      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"ACCOUNT  is %s \n",l_ms_msgconv_struct_h.h_dl_client);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Setl-Date  is %s \n",l_ms_msgconv_struct_h.h_setl_eff_date);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Stat-Date  is %s \n",l_ms_msgconv_struct_h.h_stat_eff_date);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
      
      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"CA-Date  is %s \n",l_ms_msgconv_struct_h.h_ca_eff_date);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"StMsg-Date  is %s \n",l_ms_msgconv_struct_h.h_stmsg_eff_date);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Access_Stamp  is %s \n",l_ms_msgconv_struct_h.h_access_stamp);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
      
   }

      l_ms_msgconv_struct_i = (MS_MSGCONV_STRUCT_I *)calloc(1,sizeof(MS_MSGCONV_STRUCT_I));
      APL_MALLOC_FAIL(l_ms_msgconv_struct_i);
   

      l_ms_msgconv_struct_i->i_dl_client = 0;
      l_ms_msgconv_struct_i->i_access_stamp = 0;


         if(strlen(l_ms_msgconv_struct_h.h_setl_eff_date) == 0)
                   l_ms_msgconv_struct_i->i_setl_eff_date = -1;
         else
                   l_ms_msgconv_struct_i->i_setl_eff_date = 0;

         if(strlen(l_ms_msgconv_struct_h.h_stat_eff_date) == 0)
                   l_ms_msgconv_struct_i->i_stat_eff_date = -1;
         else
                   l_ms_msgconv_struct_i->i_stat_eff_date = 0;

         if(strlen(l_ms_msgconv_struct_h.h_ca_eff_date) == 0)
                   l_ms_msgconv_struct_i->i_ca_eff_date = -1;
         else
                   l_ms_msgconv_struct_i->i_ca_eff_date = 0;

         if(strlen(l_ms_msgconv_struct_h.h_stmsg_eff_date) == 0)
                   l_ms_msgconv_struct_i->i_stmsg_eff_date = -1;
         else
                   l_ms_msgconv_struct_i->i_stmsg_eff_date = 0;
          
	
         if (CO_RtvSysDtTime(chr_h_sys_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
             APL_GOBACK_FAIL
         strcpy(l_ms_msgconv_struct_h.h_access_stamp,chr_h_sys_access_stamp);
         strcpy(chr_p_client,l_ms_msgconv_struct_h.h_dl_client);
         

 
     EXEC SQL SELECT CLN_MASTER 
              INTO :h_mstclt:i_mstclt 
              FROM MT_CLIENT 
              WHERE CLN_CODE = RTRIM(:chr_p_client);
     
		if(sqlca.sqlcode==1403)
		{
			            memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
            sprintf(chr_l_buf,"Account not int_found %s \n",chr_p_client);
            CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
		}
		else
			if(sqlca.sqlcode!=0)
			{
			            memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
            sprintf(chr_l_buf," FATAL ERROR FOR %s \n",chr_p_client);
            CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);	
			}
            memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
            sprintf(chr_l_buf," chr_p_client %s \n",chr_p_client);
            CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
           
           memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
            sprintf(chr_l_buf," h_mstclt %s \n",h_mstclt);
            CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d); 

  if(strcmp(chr_p_client,h_mstclt) == 0)
     {
       
       EXEC SQL SELECT COUNT(*) INTO :int_h_count FROM PRO_MSGCONV WHERE CLIENT = RTRIM(:chr_p_client);
        IS_ANY_ORA_ERROR
        if ( int_h_count == 0 )
           {
            memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
            sprintf(chr_l_buf," Inserting MasterAccount %s \n",chr_p_client);
            CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
            EXEC SQL INSERT INTO PRO_MSGCONV VALUES (:l_ms_msgconv_struct_h:l_ms_msgconv_struct_i);
            IS_ANY_ORA_ERROR

           }
        else
           {
             memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
             sprintf(chr_l_buf," Updating MasterAccount %s \n",chr_p_client);
             CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
             printf(" Updating MasterAccount %s \n",chr_p_client);
             EXEC SQL UPDATE PRO_MSGCONV SET
             SETL_EFFECTIVE_DATE = :l_ms_msgconv_struct_h.h_setl_eff_date:l_ms_msgconv_struct_i->i_setl_eff_date,
             STAT_EFF_DATE = :l_ms_msgconv_struct_h.h_stat_eff_date:l_ms_msgconv_struct_i->i_stat_eff_date,
             CA_EFFECTIVE_DT = :l_ms_msgconv_struct_h.h_ca_eff_date:l_ms_msgconv_struct_i->i_ca_eff_date,
             STMSG_EFFECT_DATE = :l_ms_msgconv_struct_h.h_stmsg_eff_date:l_ms_msgconv_struct_i->i_stmsg_eff_date,
             ACCESS_STAMP = :l_ms_msgconv_struct_h.h_access_stamp:l_ms_msgconv_struct_i->i_access_stamp
             WHERE CLIENT = RTRIM(:chr_p_client);
             IS_ANY_ORA_ERROR                    
           }
             
            
              EXEC SQL UPDATE PRO_MSGCONV SET
              SETL_EFFECTIVE_DATE = :l_ms_msgconv_struct_h.h_setl_eff_date:l_ms_msgconv_struct_i->i_setl_eff_date
              WHERE ( SETL_EFFECTIVE_DATE < to_date(:l_ms_msgconv_struct_h.h_setl_eff_date)
              OR SETL_EFFECTIVE_DATE IS NULL)
              AND CLIENT IN (SELECT CLIENT FROM MT_CLIENT WHERE CLN_MASTER = RTRIM(:chr_p_client));
              IS_ANY_ORA_ERROR

              EXEC SQL UPDATE PRO_MSGCONV SET
              STAT_EFF_DATE = :l_ms_msgconv_struct_h.h_stat_eff_date:l_ms_msgconv_struct_i->i_stat_eff_date 
              WHERE ( STAT_EFF_DATE < to_date(:l_ms_msgconv_struct_h.h_stat_eff_date)
              OR STAT_EFF_DATE IS NULL)
              AND CLIENT IN (SELECT CLIENT FROM MT_CLIENT WHERE CLN_MASTER = RTRIM(:chr_p_client));
              IS_ANY_ORA_ERROR

              EXEC SQL UPDATE PRO_MSGCONV SET
              CA_EFFECTIVE_DT = :l_ms_msgconv_struct_h.h_ca_eff_date:l_ms_msgconv_struct_i->i_ca_eff_date
              WHERE ( CA_EFFECTIVE_DT < to_date(:l_ms_msgconv_struct_h.h_ca_eff_date)
              OR CA_EFFECTIVE_DT IS NULL)
              AND CLIENT IN (SELECT CLIENT FROM MT_CLIENT WHERE CLN_MASTER = RTRIM(:chr_p_client));
              IS_ANY_ORA_ERROR
               
              EXEC SQL UPDATE PRO_MSGCONV SET
              STMSG_EFFECT_DATE = :l_ms_msgconv_struct_h.h_stmsg_eff_date:l_ms_msgconv_struct_i->i_stmsg_eff_date  
              WHERE ( STMSG_EFFECT_DATE < to_date(:l_ms_msgconv_struct_h.h_stmsg_eff_date) 
              OR STMSG_EFFECT_DATE IS NULL )
              AND CLIENT IN (SELECT CLIENT FROM MT_CLIENT WHERE CLN_MASTER = RTRIM(:chr_p_client));
              IS_ANY_ORA_ERROR

     }
  else
     {
  		  
   	  EXEC SQL SELECT COUNT(*) INTO :int_h_count FROM PRO_MSGCONV WHERE CLIENT = RTRIM(:chr_p_client);
   	  IS_ANY_ORA_ERROR
   	  if ( int_h_count == 0 )
      	  {
              memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
              sprintf(chr_l_buf," Inserting SubAccount %s \n",chr_p_client);
              CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

              EXEC SQL INSERT INTO PRO_MSGCONV VALUES (:l_ms_msgconv_struct_h:l_ms_msgconv_struct_i);
              IS_ANY_ORA_ERROR
           
   		  }
         else
			   {
              memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
              sprintf(chr_l_buf," Updating SubAccount %s \n",chr_p_client);
              CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
         
              EXEC SQL UPDATE PRO_MSGCONV SET 
              SETL_EFFECTIVE_DATE = :l_ms_msgconv_struct_h.h_setl_eff_date:l_ms_msgconv_struct_i->i_setl_eff_date,
              STAT_EFF_DATE = :l_ms_msgconv_struct_h.h_stat_eff_date:l_ms_msgconv_struct_i->i_stat_eff_date,
              CA_EFFECTIVE_DT = :l_ms_msgconv_struct_h.h_ca_eff_date:l_ms_msgconv_struct_i->i_ca_eff_date,
              STMSG_EFFECT_DATE = :l_ms_msgconv_struct_h.h_stmsg_eff_date:l_ms_msgconv_struct_i->i_stmsg_eff_date,
              ACCESS_STAMP = :l_ms_msgconv_struct_h.h_access_stamp:l_ms_msgconv_struct_i->i_access_stamp
              WHERE CLIENT = RTRIM(:chr_p_client);
              IS_ANY_ORA_ERROR                   
			   }
    }

    APL_GOBACK_SUCCESS
 
RETURN_SUCCESS :
     APL_IF_DEBUG
      {
       CO_ProcMonitor(   APL_OUT_FILE,
                   "Leaving Function CBInsdbMsgConv with success\n",
                   NULL,
                   NULL);
      }
      return(APL_SUCCESS);

RETURN_FAILURE :
     APL_IF_DEBUG
      {
       CO_ProcMonitor(   APL_OUT_FILE,
                   "Leaving Function CBInsdbMsgConv with errors\n",
                   NULL,
                   NULL);
      }
     return(APL_FAILURE);
    
}
