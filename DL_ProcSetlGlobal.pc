







#include "CO_HostStructdef.h"

#define	CLSCD_LCR	"LCR"	
/* Abhay Aix migration */
#ifdef C_COMMITSIZE
#undef C_COMMITSIZE
#endif
//#define C_COMMITSIZE 1 // optimization
#define C_COMMITSIZE 20
#define S_NOTGOTLOCK sqlca.sqlcode==-54

EXEC SQL INCLUDE SQLCA.H;




	



int	DL_Proc_GbSetl(	char						*p_stx_instrdate,
						char						*p_stx_moneydate,
						char						*p_oth_instrdate,
						char						*p_oth_moneydate,
						char						**argv,
				      char						*chr_l_typeofinstr,	
						char                 *chr_l_trdtypeind,
                  char                 *p_trade_status,
                  char                 *chr_p_confdt,
                  char                 *p_location,
                  char                 *p_settle_no,
                  char                 *p_mkttype,
                  char					*p_deal_dt,//PMS
						FILE						*p_logfile,
				   	FILE						*p_gsf_repfile,
				   	FILE						*p_gss_repfile,
						INTL_ENV_DATA_STRUCT_H	*p_intl_envdatastruct_h,
						DEBUG_INFO_STRUCT_H			**l_debug_info_ptr)
{
	

	char		chr_l_buf[BUFFER_LEN]							= APL_NULL_STRING;
	char		chr_l_h_client_a[APL_CLIENT_LENGTH]			= APL_NULL_STRING;
	char		chr_l_h_refno_A[APL_TXNREFNO_LEN]			= APL_NULL_STRING;
	char		chr_l_h_exarena[EX_ARENA_LEN]				= APL_NULL_STRING;
	char		chr_l_h_posn_status[STATUS_POS_LEN]	= APL_NULL_STRING;
	char		chr_l_h_trcode_a[APL_FLAG_LENGTH]				= APL_NULL_STRING;
	char		chr_l_trd_status[APL_STATUS_LEN]			= APL_NULL_STRING;
	char		chr_l_h_access_stamp[APL_DATE_LEN]		= APL_NULL_STRING;
	char		chr_l_temp_dt[APL_DATE_LEN]		= APL_NULL_STRING;
   
	char 	   int_l_domcpac[DOMCPCLIENT_LEN]				= APL_NULL_STRING;  
   char     chr_l_h_locncode_a[APL_LOCNCODE_LENGTH]		= APL_NULL_STRING;  
   char     chr_l_h_domcpac[DOMCPCLIENT_LEN]				= APL_NULL_STRING;  

	
	char 		chr_l_instrcode_a[APL_INSTRUMENTCODE_LEN]				= APL_NULL_STRING;
	char		chr_l_trdt_a[APL_DATE_LEN]						= APL_NULL_STRING;
	char		chr_l_typeoftrd[DEALTYPE_LEN_A]      		= APL_NULL_STRING;
	char 		chr_l_locncode_c[APL_LOCNCODE_LENGTH]			= APL_NULL_STRING; 
	char 		chr_l_locnchng_flg[2]							= APL_NULL_STRING; 
	char		h_ora_rowid[APL_ROWID_LEN]					= APL_NULL_STRING;
	char		chr_l_access_stamp[APL_DATE_LEN]			= APL_NULL_STRING;
	short		i_ora_rowid										=	0;
	short		l_err											=	0;

	int		int_l_reccount									= 0;
	int		int_p_smieligibility_flg						= 0; 

	double	l_h_cost									= 0.0;
	double	l_h_quantity_a										= 0.0;
	double  l_h_brokercomm
                = 0.0;
	short		int_l_error_flag								= APL_SUCCESS;
	short		l_i_account									= 0;
	short		l_i_refno									= 0;
	short		l_i_exarena									= 0;
	short		l_i_posn_status							= 0;
	short		int_l_i_trcode									= 0;
	short		l_i_access_stamp							= 0;
	short		l_i_price									= 0;
	short		int_l_i_qty										= 0;
	short		l_cond_gr									= 0;
	short           l_i_brkcomm
                        = 0;
     
     
	
	short    l_cond_pl                           = 0;
   short    l_cond_tr                           = 0;
   short    l_cond_ru                           = 0;

	short 	l_i_instr_code									= 0;
	short		l_i_trdt										= 0;
	short		l_i_typeoftrd								= 0;
	short		l_i_locncode								= 0;
	short		l_i_locnchng_flg							= 0;
	short		l_temp_ind									= 0;
	
	#define	GSETL_TRUE	"T"
	short	int_l_flag	=	0; /*Abhay AIX Migration changed int to short*/
	short	int_k_flag	=	0; /*Changes by Sandip for Kotak Optimization*/
	char	chr_l_h_ndsbldt[APL_DATE_LEN]	=	APL_NULL_STRING;
	short	l_i_ndsbldt						=	0;
	char	chr_l_h_nds[APL_FLAG_LENGTH]		=	APL_NULL_STRING;
	char	chr_l_clscode_a[CLSCD_LEN]	=	APL_NULL_STRING;
	short	l_i_clscode						=	0;	
	

	
	

	char 		chr_l_location[APL_LOCNCODE_LENGTH]        = APL_NULL_STRING;   
	char chr_l_srn_str[21]=APL_NULL_STRING;
	char chr_l_str_temp[21]=APL_NULL_STRING;
	char chr_l_statregno[21]=APL_NULL_STRING;


	DL_DEAL_SSTDET_STRUCT_H	*l_deal_sstdet_struct_h			= NULL;
	DL_DEAL_PMTDET_STRUCT_H	*l_dl_deal_pmtdet_struct_h	= NULL;

	

	l_deal_sstdet_struct_h = (DL_DEAL_SSTDET_STRUCT_H *)calloc(1, sizeof(DL_DEAL_SSTDET_STRUCT_H));
	APL_MALLOC_FAIL(l_deal_sstdet_struct_h);
	l_dl_deal_pmtdet_struct_h = (DL_DEAL_PMTDET_STRUCT_H *)calloc(1, sizeof(DL_DEAL_PMTDET_STRUCT_H));
	APL_MALLOC_FAIL(l_dl_deal_pmtdet_struct_h);

   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;

EXEC SQL VAR chr_g_restart_data is string;
	

	EXEC SQL VAR chr_l_h_client_a IS STRING;
	EXEC SQL VAR chr_l_h_refno_A IS STRING;
	EXEC SQL VAR chr_l_h_exarena IS STRING;
	EXEC SQL VAR chr_l_h_posn_status IS STRING;
	EXEC SQL VAR chr_l_h_trcode_a IS STRING;
	EXEC SQL VAR chr_l_h_access_stamp IS STRING;
	EXEC SQL VAR chr_l_temp_dt IS STRING;
	EXEC SQL VAR chr_l_h_locncode_a IS STRING;
	EXEC SQL VAR chr_l_location IS STRING;
	EXEC SQL VAR int_l_domcpac IS STRING;
	EXEC SQL VAR chr_l_h_domcpac IS STRING;
	EXEC SQL VAR h_ora_rowid 	 IS STRING;

	EXEC SQL VAR chr_l_instrcode_a 			IS STRING;
	EXEC SQL VAR chr_l_trdt_a 				IS STRING;
	EXEC SQL VAR chr_l_typeoftrd 		IS STRING;
	EXEC SQL VAR chr_l_locncode_c			IS STRING;
	EXEC SQL VAR chr_l_locnchng_flg 	IS STRING;
	EXEC SQL VAR chr_l_statregno   IS STRING;

	
	EXEC SQL VAR chr_l_h_ndsbldt	IS STRING;
	EXEC SQL VAR chr_l_h_nds			IS STRING;
	EXEC SQL VAR chr_l_clscode_a		IS STRING;
	EXEC SQL VAR chr_l_access_stamp IS STRING;

	memset(chr_l_h_ndsbldt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(chr_l_h_nds, APL_NULL_CHAR, APL_FLAG_LENGTH);
	memset(chr_l_clscode_a, APL_NULL_CHAR, CLSCD_LEN);
	memset(chr_l_access_stamp, APL_NULL_CHAR, APL_DATE_LEN);
	memset(chr_l_temp_dt, APL_NULL_CHAR, APL_DATE_LEN);

	printf("\n ****************** select * from Tables ***********************\n");
	

	

	CO_ProcMonitor(p_logfile, "Entered Function DL_Proc_GbSetl", NULL, p_intl_envdatastruct_h);
	printf("Entered function DL_Proc_GbSetl\n");
	#ifdef SYS_DEBUG
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "Instrurity Settlement Date for STX is : %s", p_stx_instrdate);
		CO_ProcMonitor(p_logfile, chr_l_buf, NULL, p_intl_envdatastruct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "Money Settlement Date for STX is 	 : %s", p_stx_moneydate);
		CO_ProcMonitor(p_logfile, chr_l_buf, NULL, p_intl_envdatastruct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "Instrurity Settlement Date for OTH is : %s", p_oth_instrdate);
		CO_ProcMonitor(p_logfile, chr_l_buf, NULL, p_intl_envdatastruct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "Money Settlement Date for OTH is 	 : %s", p_oth_moneydate);
		CO_ProcMonitor(p_logfile, chr_l_buf, NULL, p_intl_envdatastruct_h);
	#endif

	

   EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
   FROM SYS_BATCHPROC
   WHERE PROCESS_NAME=:argv[0]
   AND   PROC_INIT=:argv[1]
   AND   STARTDATE=:argv[2]
   AND   STATUS='started'
   FOR UPDATE OF PROCESSING_STATUS,STATUS;

	IS_ANY_ORA_ERROR

   if(APL_ZERO_RESULT_SET)
   {
      CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
      APL_GOBACK_FAIL
   }

	

	if (!strlen(p_stx_instrdate))
	{
		APL_DATA_MISSING("STX Instr.Dt.", APL_NULL_STRING, APL_NULL_STRING);
		int_l_error_flag = APL_FAILURE;
	}
	
	if (!strcmp(l_mt_core_sys_params_struct_h.no_stxdl_ind,APL_YES_IND) )
	{
		if (!strlen(p_oth_instrdate))
		{
			APL_DATA_MISSING("OTH Instr.Dt.", APL_NULL_STRING, APL_NULL_STRING);
			int_l_error_flag = APL_FAILURE;
		}
	}
	if (APL_FAILURE == int_l_error_flag) APL_GOBACK_FAIL

	
   if(strcmp(g_mt_commonsys_params_struct_h.nation_code,"GR")==0)
	{
	     if (APL_FAILURE == CO_Chk_CntryEnabled(	"TRD_GST",
			      											"SEL_ONLY_TRX_TRDS",
					      									&l_cond_gr,
							      							l_debug_info_ptr ))
	        {
		       APL_GOBACK_FAIL
	        }
	}
	
   
                 
  if(strcmp(g_mt_commonsys_params_struct_h.nation_code,"PL")==0)
  {
      if (APL_FAILURE == CO_Chk_CntryEnabled(  "TRD_GST",
		   												"SEL_ONLY_NOT18_TRDS",
			   											&l_cond_pl,
				   										l_debug_info_ptr ))
	      {
		     APL_GOBACK_FAIL
	      }
  }
  
    
    
	
 if (APL_FAILURE == CO_Chk_CntryEnabled(	"TRD_GST",
			      								"AUTH_TRADES",
					      						&l_cond_ru,
							      				l_debug_info_ptr ))
 {
		APL_GOBACK_FAIL
 }
 
 

      if (APL_FAILURE == CO_Chk_CntryEnabled(  "TRD_SETTLEMENT",
                                             "NDS_BLK_CONF_REQD",
                                             &int_k_flag,
                                             l_debug_info_ptr ))
      {
		 APL_GOBACK_FAIL /*Changes by Sandip for Kotak Optimization*/
      }
	
	if (APL_FAILURE == CO_Chk_CntryEnabled(  "NDS_BLK_CONF_REQD",
         	                                    "CLSCODE_CHECK",
            	                                 &int_l_flag,
               	                              l_debug_info_ptr ))
      	{
         	APL_GOBACK_FAIL /*Changes by Sandip for Kotak Optimization*/
      	}
	

	 if ( CO_RtvSysParams(l_debug_info_ptr) == APL_FAILURE)
      	 APL_GOBACK_FAIL


	
        
    

	if (chr_l_typeofinstr[0] == 'B')                    									
	{
		 

		 EXEC SQL SELECT FIELD_VAL INTO :int_l_domcpac
		 FROM PRO_GSSPLVAL
		 WHERE MAIN_FUN = 'GLOB_SETTL'
		 AND SUB_PROCESS = 'DOMCPAC'
		 AND NATION = :g_mt_commonsys_params_struct_h.nation_code;
	
	    
		 
		 EXEC SQL SELECT FIELD_VAL INTO :chr_l_location             
	    FROM PRO_GSSPLVAL
 	    WHERE MAIN_FUN = 'GLOB_SETTL' 
  	    AND SUB_PROCESS = 'LOCATION_BOND' 
	    AND NATION = :g_mt_commonsys_params_struct_h.nation_code;
	} 
   else if (chr_l_typeofinstr[0] == 'E')														  
 	{
		 
	   
		 EXEC SQL SELECT FIELD_VAL INTO :chr_l_location
       FROM PRO_GSSPLVAL
       WHERE MAIN_FUN = 'GLOB_SETTL'
       AND SUB_PROCESS = 'LOCATION_EQUITY'
       AND NATION = :g_mt_commonsys_params_struct_h.nation_code;
	}
   else if (chr_l_typeofinstr[0] == 'R')
   {
       EXEC SQL SELECT FIELD_VAL INTO :chr_l_location
		 FROM PRO_GSSPLVAL
       WHERE MAIN_FUN = 'GLOB_SETTL'
       AND SUB_PROCESS = 'LOCATION_REMOTE'
       AND NATION = :g_mt_commonsys_params_struct_h.nation_code;
   }


 
	
	

	

	strcpy(chr_l_trd_status, STATUS_DEL_UAUTH);

	if (l_cond_gr)
	{
	   if (chr_l_typeofinstr[0] == 'B')             								  		  
      { 
			




			
			EXEC SQL DECLARE gr_gst_cursor_B CURSOR FOR
			SELECT 	a.client, a.IDENTIY_NO, a.ex_arena, a.COST, a.STATUS_POS, 
						a.QTY, a.deal_cd, a.access_stamp, a.brokercomm ,
						a.instr_code, a.location_cd , a.deal_date , a.dl_class , a.loc_chng_ind

			FROM DL_DEAL a, MT_CLIENT b , PRO_SYS_DATE c
			WHERE a.INSTRUMENT_DT is NULL
			AND	a.VAL_FDT is not NULL
			AND     a.DEAL_STAT='CC'
			AND 	a.CLIENT = b.CLN_CODE
			AND   (a.location_cd = :chr_l_location
			AND   a.setl_date <= c.SYS_DATE    
			AND   a.checker_dt is not NULL
			AND	(a.TRANS_DATE is NOT NULL
			OR    a.domestic_cpclt = :int_l_domcpac
			OR		(a.domestic_cpclt = :l_mt_core_sys_params_struct_h.custody_clt_cd 
					 AND a.deal_cd in ('2','4','6','8'))
		 	OR		(a.domestic_cpclt = :l_mt_core_sys_params_struct_h.custody_clt_cd
					 AND a.deal_cd in ('1','3','5','7')
					 AND b.CLN_EXT_CLH = (select c.CLN_EXT_CLH from
													 MT_CLIENT c
									 where c.CLN_CODE = a.CP_CLT)))
			AND   a.instr_code in (SELECT d.instr_code FROM MT_INSTRUMENT d
								  WHERE d.INSTR_TYPE in ('BON', 'FMT')))
			AND   (DECODE(:chr_l_trdtypeind[0],'I',a.dl_class,'B','26','O',NULL) in ('26','29')
									OR (:chr_l_trdtypeind[0] = 'O' AND a.dl_class not in ('26','29') ))
			ORDER BY MOD(TO_NUMBER(a.deal_cd),2)
			// FOR UPDATE OF a.access_stamp  //Optimization -  Lock is postponed inside loop.
				;

			EXEC SQL OPEN gr_gst_cursor_B;

			IS_ANY_ORA_ERROR
		}
	  	else if ( chr_l_typeofinstr[0] == 'E' )										    		
     	{
			 
			EXEC SQL DECLARE gr_gst_cursor_E CURSOR FOR
			SELECT 	client, IDENTIY_NO, ex_arena, COST, STATUS_POS,
				QTY, deal_cd, access_stamp, brokercomm,
				instr_code, location_cd , deal_date , dl_class , loc_chng_ind
			FROM DL_DEAL , PRO_SYS_DATE
			WHERE INSTRUMENT_DT is NULL
			AND     VAL_FDT is not NULL 
			AND     DEAL_STAT='CC'
			AND      dl_deal.setl_date <= pro_sys_date.SYS_DATE    
			AND      checker_dt is not NULL
			AND     (location_cd = :chr_l_location           
			AND     instr_code in (SELECT instr_code from MT_INSTRUMENT
									 WHERE INSTR_TYPE in ('SHS', 'RTS')))
			AND   (DECODE(:chr_l_trdtypeind[0],'I',dl_class,'B','26','O',NULL) in ('26','29')
									OR (:chr_l_trdtypeind[0] = 'O' AND dl_class not in ('26','29') ))

			ORDER BY MOD(TO_NUMBER(deal_cd),2)
			// FOR UPDATE OF access_stamp //Optimization -  Lock is postponed inside loop.
				;

			EXEC SQL OPEN gr_gst_cursor_E;

			IS_ANY_ORA_ERROR

		} 
	  	else if ( chr_l_typeofinstr[0] == 'R' ) 	
     	{
			 
			EXEC SQL DECLARE gr_gst_cursor_R CURSOR FOR
			SELECT 	client, IDENTIY_NO, ex_arena, COST, STATUS_POS,
				QTY, deal_cd, access_stamp, brokercomm,
				instr_code, location_cd , deal_date , dl_class , loc_chng_ind
			FROM DL_DEAL , PRO_SYS_DATE
			WHERE INSTRUMENT_DT is NULL
			AND     VAL_FDT is not NULL 
			AND     DEAL_STAT='CC'
			AND      dl_deal.setl_date <= pro_sys_date.SYS_DATE    
			AND      checker_dt is not NULL
			AND     location_cd = :chr_l_location           
			AND     dl_class='50'
			ORDER BY MOD(TO_NUMBER(deal_cd),2)
			// FOR UPDATE OF access_stamp //Optimization -  Lock is postponed inside loop.
				;

			EXEC SQL OPEN gr_gst_cursor_R;

			IS_ANY_ORA_ERROR

		} 
	}
				
	else if(l_cond_pl)
	{   
			
			EXEC SQL DECLARE gst_cursor CURSOR FOR
					SELECT   client, IDENTIY_NO, ex_arena, COST, STATUS_POS,
								QTY, deal_cd, access_stamp, brokercomm ,
								instr_code, location_cd , deal_date , dl_class , loc_chng_ind
					FROM DL_DEAL,PRO_SYS_DATE
					WHERE INSTRUMENT_DT is NULL
					AND   VAL_FDT is not NULL
				   AND   checker_dt is not NULL	
					AND   DEAL_STAT in ('CC','MS','SS')
			      AND   setl_date <= pro_sys_date.SYS_DATE	
					AND   not(deal_cd=4 and dl_class='18')
					AND   (DECODE(:chr_l_trdtypeind[0],'I',dl_class,'B','26','O',NULL) = '26'
								OR (:chr_l_trdtypeind[0] = 'O' AND dl_class <> '26' ))
					AND (FAILREASON_CD IS NULL OR FAILREASON_CD BETWEEN '90' AND '99')
					ORDER BY MOD(TO_NUMBER(deal_cd),2),decode(MOD(TO_NUMBER(deal_cd),2),1,MOD(TO_NUMBER(dl_class),26),decode(MOD(TO_NUMBER(dl_class),26),1,dl_class, MOD(TO_NUMBER(dl_class),99)))
					// FOR UPDATE OF access_stamp //Optimization -  Lock is postponed inside loop.
									;
           
				  EXEC SQL OPEN gst_cursor;

				  IS_ANY_ORA_ERROR
	}
	else if(l_cond_ru)
	{
	CO_ProcMonitor(p_logfile, "Entered ru cursor", NULL, p_intl_envdatastruct_h);
			EXEC SQL DECLARE ru_gst_cursor CURSOR FOR
			SELECT 	client, IDENTIY_NO, ex_arena, COST, STATUS_POS,
				QTY, deal_cd, access_stamp, brokercomm,
				instr_code, location_cd , deal_date , dl_class , loc_chng_ind
			FROM DL_DEAL , PRO_SYS_DATE
			WHERE INSTRUMENT_DT is NULL
			AND     (  (:p_trade_status[0]='A' AND DEAL_STAT='AA')  OR
				        (:p_trade_status[0]='C' AND DEAL_STAT='CC')  )
			AND      dl_deal.setl_date <= pro_sys_date.SYS_DATE    
			AND      checker_dt is not NULL
			AND      location_cd = :p_location
			AND      dl_class='51'
			ORDER BY MOD(TO_NUMBER(deal_cd),2)
			// FOR UPDATE OF access_stamp //Optimization -  Lock is postponed inside loop.
				;

			EXEC SQL OPEN ru_gst_cursor;

			IS_ANY_ORA_ERROR

	}
	else    
	{
		printf("Rakesh here \n");
		/*	Addition Condition of DP Instruction Passing	Rohit	*/	

// Following IF Added For PMS - Offmarket to be allowed 
printf("\n SETTLEMENT NO IS [%s]",p_settle_no);
printf("\n mkt type is [%s]",p_mkttype);
// Follwing If condition changed on 07122015

           if((strcmp(chr_l_trdtypeind,"C") == 0)||((strcmp(chr_l_trdtypeind,"D") == 0)&&(strlen(p_settle_no) != 0)&&(strlen(p_mkttype) != 0)))
           {
               printf("\n Deal Processing For Type CCCCCCCCCCc");

		if (chr_l_typeofinstr[0] == 'B')
		{

			printf("\n Location code is [%s]\n",p_location);	
			/** KB_12434 Below query commented and re-written to include On mkt DVP deal for PMS Payout transaction **/
			/*EXEC SQL DECLARE tr_gst_cursor_B CURSOR FOR
		   SELECT   a.client, IDENTIY_NO, ex_arena, COST, STATUS_POS, 
		            a.QTY, a.deal_cd, a.access_stamp, brokercomm,
						a.instr_code, location_cd , deal_date , dl_class , loc_chng_ind
	      FROM DL_DEAL a, DL_DPINSTRS b, MT_CLI_DEPO_MAP c
			WHERE INSTRUMENT_DT is NULL
		   AND   VAL_FDT is not NULL
			//AND     DEAL_STAT='CC'
			AND DEAL_STAT in ('CC','MS')
			//AND   instr_code in (SELECT instr_code FROM MT_INSTRUMENT
		                    //WHERE INSTR_TYPE in ('BON', 'FMT'))
			AND 		a.settlement_no=:p_settle_no
			AND 	a.mkt_type =:p_mkttype
		   AND      clh_flg = :chr_l_trdtypeind //Changed by Rakesh Singh
			AND 		(((a.deal_cd in ('2','4')) and (a.clh_flg='C' )and (a.QTY = allot_qty) ) 
							or (a.clh_flg ='D')
							or (a.deal_cd in ('1','3'))) //Changed by Vaibhav
			AND      NDS_BLK_DT IS NOT NULL
         AND a.deal_cd = b.deal_cd
         AND a.clh_flg = b.clh_dvp         
         AND a.client = c.cln_code
         AND b.client = c.cln_depo_map_client_id
         AND INSTR(DEAL_REF_NOS,IDENTIY_NO) <> 0
         AND b.status = 'P'
			ORDER BY MOD(TO_NUMBER(a.deal_cd),2)*/
			
		EXEC SQL DECLARE tr_gst_cursor_B CURSOR FOR	
		SELECT client,IDENTIY_NO,ex_arena,COST,STATUS_POS,QTY,deal_Cd,access_stamp,brokercomm,instr_code,location_cd ,deal_date ,dl_class ,loc_chng_ind
		FROM DL_DEAL a
		WHERE INSTRUMENT_DT IS NULL
		AND VAL_FDT         IS NOT NULL
		AND DEAL_STAT IN ('CC','MS')
		AND a.settlement_no=:p_settle_no
		AND a.mkt_type     = :p_mkttype
		AND clh_flg        = :chr_l_trdtypeind
		AND ((
		(((a.deal_cd IN ('2','4'))
		AND (a.clh_flg    ='C' )
		AND (a.QTY        = allot_qty) )
		OR (a.clh_flg     ='D')
		OR (a.deal_cd    IN ('1','3')))
		AND (NDS_BLK_DT is NOT NULL AND NDS_DATE is NOT NULL)
		) OR (
		clh_flg     = 'D'
		AND deal_cd   IN ('2','4')
		AND ex_arena = 1
		and GETCLIENTPARAMBYID('DVP_RECPT_INSTR',client) = 'N'
		)
		OR
		(
		clh_flg   = 'D'
		AND ex_arena = '1'
		AND deal_cd IN ('1','3')
		and dl_class='26'
		AND a.client in (select cln_code from mt_client c where c.cln_code=a.client and c.cln_code=c.cln_master)))
		ORDER BY MOD(TO_NUMBER(deal_cd),2)
		// FOR UPDATE OF access_stamp //Optimization -  Lock is postponed inside loop.
			;

		   EXEC SQL OPEN tr_gst_cursor_B;

		   IS_ANY_ORA_ERROR
	   }
	  else if (chr_l_typeofinstr[0] == 'E')                                     
	   {
		   
			EXEC SQL DECLARE tr_gst_cursor_E CURSOR FOR
			SELECT   a.client, IDENTIY_NO, ex_arena, COST, STATUS_POS,
						a.QTY, a.deal_cd, a.access_stamp, brokercomm,
						a.instr_code, location_cd , deal_date , dl_class , loc_chng_ind
			FROM DL_DEAL a, DL_DPINSTRS b, MT_CLI_DEPO_MAP c
			WHERE INSTRUMENT_DT is NULL
			AND     VAL_FDT is not NULL 
			/*AND     DEAL_STAT='CC'*/
			AND DEAL_STAT in ('CC','MS')
			AND     a.instr_code in (SELECT d.instr_code from MT_INSTRUMENT d
		                      WHERE INSTR_TYPE in ('SHS', 'RTS'))
		   AND      clh_flg = :chr_l_trdtypeind /*Changed by Rakesh Singh*/
			AND  		(((a.deal_cd ='4') and (clh_flg ='C') and (a.QTY =allot_qty) ) 
						  or (clh_flg ='D')
						  or (a.deal_cd ='3'))
			AND      NDS_BLK_DT IS NOT NULL
         AND a.deal_cd = b.deal_cd
         AND a.clh_flg = b.clh_dvp         
         AND a.client = c.cln_code
         AND b.client = c.cln_depo_map_client_id
         AND INSTR(DEAL_REF_NOS,IDENTIY_NO) <> 0
         AND b.status = 'P'
		  	ORDER BY MOD(TO_NUMBER(a.deal_cd),2)
		   // FOR UPDATE OF a.access_stamp //Optimization -  Lock is postponed inside loop.
				;

   	   EXEC SQL OPEN tr_gst_cursor_E;

   	   IS_ANY_ORA_ERROR

	   } 

        }// End of If C Case
     else if(strcmp(chr_l_trdtypeind,"D") == 0 )
     {

         printf("\n Deal Processing For Type DDDDDDDDD:[%s]",chr_l_trdtypeind);
         if(strcmp(p_deal_dt,APL_NULL_STRING)==0)
         {
           printf("\n Deal Date is mandatory. \n");
           CO_ProcMonitor(p_logfile,"\n Deal Date is mandatory. \n", NULL, p_intl_envdatastruct_h); 
           APL_GOBACK_FAIL
         }

         if (chr_l_typeofinstr[0] == 'B')
	{
			/* START -- Changes done in query for PMS Enhancement. */

                     printf("\n CURSOR tr_gst_cursor_B_DVP");

				EXEC SQL DECLARE tr_gst_cursor_B_DVP CURSOR FOR
					SELECT   C.client, C.IDENTIY_NO, C.ex_arena, C.COST, C.STATUS_POS, 
					C.QTY, C.deal_cd, C.access_stamp, C.brokercomm,
					C.instr_code, C.location_cd , C.deal_date , C.dl_class , C.loc_chng_ind,
					C.money_setl_dt
					FROM DL_DEAL C
					WHERE 
					C.INSTRUMENT_DT is NULL
					AND C.VAL_FDT is not NULL
					AND TRUNC(C.DEAL_DATE)= TRUNC(TO_DATE(:p_deal_dt,'DD/MM/YYYY HH24:MI:SS'))
					AND C.DEAL_STAT in ('CC','MS')
					AND C.clh_flg = :chr_l_trdtypeind
					AND C.DL_CLASS IN ('1','26')
                                        AND C.ex_arena = 2
//					AND C.NDS_BLK_DT is NOT NULL
                                        AND ((NDS_BLK_DT is NOT NULL AND NDS_DATE is NOT NULL)
                                                OR (NDS_BLK_DT is NULL AND NDS_DATE is NULL))
					ORDER BY 1,2;

					/* END -- Changes done in query for PMS Enhancement. */


				   EXEC SQL OPEN tr_gst_cursor_B_DVP;

				   IS_ANY_ORA_ERROR

        }
        else if(chr_l_typeofinstr[0] == 'E')
        {
             printf("\n CURSOR tr_gst_cursor_E_DVP");

					EXEC SQL DECLARE tr_gst_cursor_E_DVP CURSOR FOR
					SELECT   client, IDENTIY_NO, ex_arena, COST, STATUS_POS,
								QTY, deal_cd, access_stamp, brokercomm,
								instr_code, location_cd , deal_date , dl_class , loc_chng_ind,
								money_setl_dt
					FROM DL_DEAL
					WHERE INSTRUMENT_DT is NULL
					AND VAL_FDT is not NULL 
					AND DEAL_STAT in ('CC','MS')
                                        AND trunc(DEAL_DATE) = trunc(to_date(:p_deal_dt,'dd/mm/yyyy hh24:mi:ss')) 
					AND instr_code in (SELECT instr_code from MT_INSTRUMENT
									   WHERE INSTR_TYPE in ('SHS', 'RTS'))
					AND clh_flg = :chr_l_trdtypeind
					AND DL_CLASS IN ('1','26')
					AND ((NDS_BLK_DT is NOT NULL AND NDS_DATE is NOT NULL)
						OR (NDS_BLK_DT is NULL AND NDS_DATE is NULL))
					ORDER BY MOD(TO_NUMBER(deal_cd),2),CLIENT,IDENTIY_NO
				   // FOR UPDATE OF access_stamp. //Optimization -  Lock is postponed inside loop.
						;

			   EXEC SQL OPEN tr_gst_cursor_E_DVP;

			   IS_ANY_ORA_ERROR

        }
     }

 }


	printf("sqlcode %d\n",sqlca.sqlcode);
   
 
	for (;;)
	{
		//Optimization - In case of batch rollback e.g. 20 records in batch and 12th record failed. User log will print success fo first 11 records even they were not commited.
		//Solution - SAVEPOUNT mechanism is used

		EXEC SQL SAVEPOINT start_process; 

		memset(chr_l_h_client_a, NULL, APL_CLIENT_LENGTH);
		memset(chr_l_h_refno_A, NULL, APL_TXNREFNO_LEN);
		memset(chr_l_h_exarena, NULL, EX_ARENA_LEN);
		memset(chr_l_h_posn_status, NULL, STATUS_POS_LEN);
		memset(chr_l_h_trcode_a, NULL, APL_FLAG_LENGTH);
		memset(chr_l_h_access_stamp, NULL, APL_DATE_LEN);
		memset(chr_l_temp_dt, NULL, APL_DATE_LEN);
		l_h_cost = 0.0;
		l_h_quantity_a	 = 0.0;
		l_h_brokercomm = 0.0;
		memset(chr_l_h_locncode_a,NULL, APL_LOCNCODE_LENGTH);								
		memset(chr_l_h_domcpac,NULL, DOMCPCLIENT_LEN);									
		l_i_account = 0;
		l_i_refno = 0;
		l_i_exarena = 0;
		l_i_posn_status = 0;
		int_l_i_trcode = 0;
		l_i_access_stamp = 0;
		l_i_price = 0;
		int_l_i_qty = 0;
		l_i_locncode = 0;
		l_temp_ind = 0;	
		l_i_brkcomm = 0;

		memset(chr_l_instrcode_a	,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
		memset(chr_l_trdt_a		,APL_NULL_CHAR,APL_DATE_LEN);
		memset(chr_l_typeoftrd,APL_NULL_CHAR,DEALTYPE_LEN_A);
		memset(chr_l_locncode_c	,APL_NULL_CHAR,APL_LOCNCODE_LENGTH);
		memset(chr_l_locnchng_flg	,APL_NULL_CHAR,2);


		

		if (l_cond_gr)
		{
		   if (chr_l_typeofinstr[0] == 'B')													
		   {
				EXEC SQL FETCH gr_gst_cursor_B INTO	:chr_l_h_client_a:l_i_account,
																:chr_l_h_refno_A:l_i_refno,
																:chr_l_h_exarena:l_i_exarena,
																:l_h_cost:l_i_price,
																:chr_l_h_posn_status:l_i_posn_status,
																:l_h_quantity_a:int_l_i_qty,
																:chr_l_h_trcode_a:int_l_i_trcode,
																:chr_l_h_access_stamp:l_i_access_stamp,
																:l_h_brokercomm:l_i_brkcomm,
																:chr_l_instrcode_a:l_i_instr_code,
																:chr_l_locncode_c:l_i_locncode,
																:chr_l_trdt_a:l_i_trdt,
																:chr_l_typeoftrd:l_i_typeoftrd ,
																:chr_l_locnchng_flg:l_i_locnchng_flg ;

	 	   }
		   else if (chr_l_typeofinstr[0] == 'E')										      	
		   {
				EXEC SQL FETCH gr_gst_cursor_E INTO :chr_l_h_client_a:l_i_account,
																:chr_l_h_refno_A:l_i_refno,
																:chr_l_h_exarena:l_i_exarena,
																:l_h_cost:l_i_price,
																:chr_l_h_posn_status:l_i_posn_status,
																:l_h_quantity_a:int_l_i_qty,
																:chr_l_h_trcode_a:int_l_i_trcode,
																:chr_l_h_access_stamp:l_i_access_stamp,
																:l_h_brokercomm:l_i_brkcomm,
																:chr_l_instrcode_a:l_i_instr_code,
																:chr_l_locncode_c:l_i_locncode,
																:chr_l_trdt_a:l_i_trdt,
																:chr_l_typeoftrd:l_i_typeoftrd ,
																:chr_l_locnchng_flg:l_i_locnchng_flg ;
			}
		   else if (chr_l_typeofinstr[0] == 'R')										      	
		   {
				EXEC SQL FETCH gr_gst_cursor_R INTO :chr_l_h_client_a:l_i_account,
																:chr_l_h_refno_A:l_i_refno,
																:chr_l_h_exarena:l_i_exarena,
																:l_h_cost:l_i_price,
																:chr_l_h_posn_status:l_i_posn_status,
																:l_h_quantity_a:int_l_i_qty,
																:chr_l_h_trcode_a:int_l_i_trcode,
																:chr_l_h_access_stamp:l_i_access_stamp,
																:l_h_brokercomm:l_i_brkcomm,
																:chr_l_instrcode_a:l_i_instr_code,
																:chr_l_locncode_c:l_i_locncode,
																:chr_l_trdt_a:l_i_trdt,
																:chr_l_typeoftrd:l_i_typeoftrd ,
																:chr_l_locnchng_flg:l_i_locnchng_flg ;
			}
		}
		else if (l_cond_pl)
		{
			EXEC SQL FETCH gst_cursor INTO	:chr_l_h_client_a:l_i_account,
														:chr_l_h_refno_A:l_i_refno,
														:chr_l_h_exarena:l_i_exarena,
														:l_h_cost:l_i_price,
														:chr_l_h_posn_status:l_i_posn_status,
														:l_h_quantity_a:int_l_i_qty,
														:chr_l_h_trcode_a:int_l_i_trcode,
														:chr_l_h_access_stamp:l_i_access_stamp,
														:l_h_brokercomm:l_i_brkcomm,
														:chr_l_instrcode_a:l_i_instr_code,
														:chr_l_locncode_c:l_i_locncode,
														:chr_l_trdt_a:l_i_trdt,
														:chr_l_typeoftrd:l_i_typeoftrd ,
														:chr_l_locnchng_flg:l_i_locnchng_flg ;
		}
		else if (l_cond_ru)
		{
			EXEC SQL FETCH ru_gst_cursor INTO	:chr_l_h_client_a:l_i_account,
															:chr_l_h_refno_A:l_i_refno,
															:chr_l_h_exarena:l_i_exarena,
															:l_h_cost:l_i_price,
															:chr_l_h_posn_status:l_i_posn_status,
															:l_h_quantity_a:int_l_i_qty,
															:chr_l_h_trcode_a:int_l_i_trcode,
															:chr_l_h_access_stamp:l_i_access_stamp,
															:l_h_brokercomm:l_i_brkcomm,
															:chr_l_instrcode_a:l_i_instr_code,
															:chr_l_locncode_c:l_i_locncode,
															:chr_l_trdt_a:l_i_trdt,
															:chr_l_typeoftrd:l_i_typeoftrd ,
															:chr_l_locnchng_flg:l_i_locnchng_flg ;
		}
     else
	  {
//Following If chged on 07122015 supriya

	       if((strcmp(chr_l_trdtypeind,"C") == 0)||((strcmp(chr_l_trdtypeind,"D") == 0)&&(strlen(p_settle_no) != 0)&&(strlen(p_mkttype) != 0)))
               {
		 if (chr_l_typeofinstr[0] == 'B')                                       
		 {
			  EXEC SQL FETCH tr_gst_cursor_B INTO :chr_l_h_client_a:l_i_account,
															  :chr_l_h_refno_A:l_i_refno,
															  :chr_l_h_exarena:l_i_exarena,
															  :l_h_cost:l_i_price,
															  :chr_l_h_posn_status:l_i_posn_status,
															  :l_h_quantity_a:int_l_i_qty,
															  :chr_l_h_trcode_a:int_l_i_trcode,
															  :chr_l_h_access_stamp:l_i_access_stamp,
															  :l_h_brokercomm:l_i_brkcomm,
															  :chr_l_instrcode_a:l_i_instr_code,
															  :chr_l_locncode_c:l_i_locncode,
															  :chr_l_trdt_a:l_i_trdt,
															  :chr_l_typeoftrd:l_i_typeoftrd ,
															  :chr_l_locnchng_flg:l_i_locnchng_flg ;
		  }
		 else if (chr_l_typeofinstr[0] == 'E')                                     
		  {
			  EXEC SQL FETCH tr_gst_cursor_E INTO :chr_l_h_client_a:l_i_account,
															  :chr_l_h_refno_A:l_i_refno,
															  :chr_l_h_exarena:l_i_exarena,
															  :l_h_cost:l_i_price,
	    													  :chr_l_h_posn_status:l_i_posn_status,
		            									  :l_h_quantity_a:int_l_i_qty,
															  :chr_l_h_trcode_a:int_l_i_trcode,
															  :chr_l_h_access_stamp:l_i_access_stamp,
															  :l_h_brokercomm:l_i_brkcomm,
															  :chr_l_instrcode_a:l_i_instr_code,
															  :chr_l_locncode_c:l_i_locncode,
															  :chr_l_trdt_a:l_i_trdt,
															  :chr_l_typeoftrd:l_i_typeoftrd ,
															  :chr_l_locnchng_flg:l_i_locnchng_flg ;
		  }
    }
	 else if(strcmp(chr_l_trdtypeind,"D") == 0 )
          {

                      if (chr_l_typeofinstr[0] == 'B')  
                     {

				 memset(chr_l_h_client_a, APL_NULL_CHAR, sizeof(chr_l_h_client_a));
				memset(chr_l_h_refno_A, APL_NULL_CHAR, sizeof(chr_l_h_refno_A));

				  EXEC SQL FETCH tr_gst_cursor_B_DVP INTO :chr_l_h_client_a:l_i_account,
																  :chr_l_h_refno_A:l_i_refno,
																  :chr_l_h_exarena:l_i_exarena,
																  :l_h_cost:l_i_price,
																  :chr_l_h_posn_status:l_i_posn_status,
																  :l_h_quantity_a:int_l_i_qty,
																  :chr_l_h_trcode_a:int_l_i_trcode,
																  :chr_l_h_access_stamp:l_i_access_stamp,
																  :l_h_brokercomm:l_i_brkcomm,
																  :chr_l_instrcode_a:l_i_instr_code,
																  :chr_l_locncode_c:l_i_locncode,
																  :chr_l_trdt_a:l_i_trdt,
																  :chr_l_typeoftrd:l_i_typeoftrd ,
																  :chr_l_locnchng_flg:l_i_locnchng_flg ,
																  :chr_l_temp_dt:l_temp_ind ;
           printf("\n SQLCA.SQLCODE OFFF CURSORS tr_gst_cursor_B_DVP :[%d]",sqlca.sqlcode);

				  Alert("chr_l_h_client_a ::: |%s| \n", chr_l_h_client_a);
				Alert("chr_l_h_refno_A ::: |%s| \n", chr_l_h_refno_A);
                          }
                     else if (chr_l_typeofinstr[0] == 'E')    
                      {

				  EXEC SQL FETCH tr_gst_cursor_E_DVP INTO :chr_l_h_client_a:l_i_account,
																  :chr_l_h_refno_A:l_i_refno,
																  :chr_l_h_exarena:l_i_exarena,
																  :l_h_cost:l_i_price,
																  :chr_l_h_posn_status:l_i_posn_status,
															  :l_h_quantity_a:int_l_i_qty,
																  :chr_l_h_trcode_a:int_l_i_trcode,
																  :chr_l_h_access_stamp:l_i_access_stamp,
																  :l_h_brokercomm:l_i_brkcomm,
																  :chr_l_instrcode_a:l_i_instr_code,
																  :chr_l_locncode_c:l_i_locncode,
																  :chr_l_trdt_a:l_i_trdt,
																  :chr_l_typeoftrd:l_i_typeoftrd ,
																  :chr_l_locnchng_flg:l_i_locnchng_flg ,
																  :chr_l_temp_dt:l_temp_ind ;

                      }

             
          }

    }
	
           printf("\n SQLCA.SQLCODE OFFF CURSORSSS :[%d]",sqlca.sqlcode);
		
		if (APL_ZERO_RESULT_SET) break;	

		IS_ANY_ORA_ERROR  //Optimization - Ideally all IS_ANY_ORA_ERROR with cursor loop should have rollback savepoint. But they are present at many places and unlikely to fail hence not coded.
		//Maximum impact is the batch will rollback but log will print success.

		
      printf("\nTO SETTLE TRADE %s, %s\n", chr_l_h_client_a, chr_l_h_refno_A);
		
		
      if(int_k_flag)
      {
			EXEC SQL SELECT DL_LOCALREPDEALTYPE.NDS_BLK, DL_DEAL.NDS_BLK_DT INTO :chr_l_h_nds, :chr_l_h_ndsbldt:l_i_ndsbldt
      		FROM DL_LOCALREPDEALTYPE, DL_DEAL
      		WHERE DL_DEAL.LR_DL_CLASS=DL_LOCALREPDEALTYPE.DEAL_CLASS
					AND DL_DEAL.CLIENT = :chr_l_h_client_a
					AND DL_DEAL.IDENTIY_NO = :chr_l_h_refno_A;

			IS_ANY_ORA_ERROR
			
      	
      	if(int_l_flag)
      	{	
				EXEC SQL SELECT CLASSCD INTO :chr_l_clscode_a:l_i_clscode
            	FROM MT_INSTRUMENT
            	WHERE INSTR_CODE = :chr_l_instrcode_a;
				IS_ANY_ORA_ERROR

				if((!strcmp(chr_l_h_nds, GSETL_TRUE)) && (l_i_ndsbldt == -1) && (!strcmp(CLSCD_LCR, chr_l_clscode_a)))
				{
					memset(chr_l_buf, NULL, BUFFER_LEN);
         		sprintf(chr_l_buf, "\nFAILED TO SETTLE TRADE %s, %s", chr_l_h_client_a, chr_l_h_refno_A);
         		CO_ProcMonitor(p_logfile, chr_l_buf, l_debug_info_ptr, p_intl_envdatastruct_h);
					CO_ProcMonitor(p_logfile, " NDS Block Confirmation Pending ", l_debug_info_ptr, p_intl_envdatastruct_h);
					continue;
				}	
			}	
			else
			{
				if((!strcmp(chr_l_h_nds, GSETL_TRUE)) && (l_i_ndsbldt == -1))
				{
					memset(chr_l_buf, NULL, BUFFER_LEN);
         		sprintf(chr_l_buf, "\nFAILED TO SETTLE TRADE %s, %s", chr_l_h_client_a, chr_l_h_refno_A);
         		CO_ProcMonitor(p_logfile, chr_l_buf, l_debug_info_ptr, p_intl_envdatastruct_h);
					CO_ProcMonitor(p_logfile, " NDS Block Confirmation Pending ", l_debug_info_ptr, p_intl_envdatastruct_h);
					continue;
				}
			}
		}
		

		if (l_i_price==-1) l_h_cost = 0.0;
                if (l_i_brkcomm==-1) l_h_brokercomm = 0.0;

		

		memset(l_deal_sstdet_struct_h, NULL, sizeof(DL_DEAL_SSTDET_STRUCT_H));
		strcpy(l_deal_sstdet_struct_h->h_dl_client, chr_l_h_client_a);
		strcpy(l_deal_sstdet_struct_h->h_indentity_no, chr_l_h_refno_A);
		strcpy(l_deal_sstdet_struct_h->h_ispart_, "N");
		l_deal_sstdet_struct_h->h_newquantity = 0.0;
		l_deal_sstdet_struct_h->h_newamount = 0.0;
		strcpy(l_deal_sstdet_struct_h->h_newindentity_no, APL_NULL_STRING);
		
		if (!strcmp(chr_l_h_exarena, EX_ARENA_STX))
		{
			strcpy(l_deal_sstdet_struct_h->h_instrdate, p_stx_instrdate);
			if (VAL_VP_DEAL(chr_l_h_trcode_a[0]))
			{
				strcpy(l_deal_sstdet_struct_h->h_moneydate, p_stx_moneydate);
			}
		}
		else
		{
			strcpy(l_deal_sstdet_struct_h->h_instrdate, p_oth_instrdate);
			if (VAL_VP_DEAL(chr_l_h_trcode_a[0]))
			{
				strcpy(l_deal_sstdet_struct_h->h_moneydate, p_oth_moneydate);
			}
		}

		printf("selecting money date from deal for client=|%s|refno=|%s|",chr_l_h_client_a,chr_l_h_refno_A);

		//optimization. Taking deal record lock in Cursor loop. In case record already locked then skip. Print error in log report.
		EXEC SQL SELECT money_setl_dt into :chr_l_temp_dt:l_temp_ind
				   FROM DL_DEAL WHERE CLIENT=:chr_l_h_client_a
				    AND IDENTIY_NO=:chr_l_h_refno_A
		  FOR UPDATE OF access_stamp NOWAIT;

		if(S_NOTGOTLOCK) 
		{
			sprintf(chr_l_buf,"Deal already locked. Skipping... | %s | %s |",chr_l_h_client_a,chr_l_h_refno_A);
			CO_ProcMonitor(p_logfile,chr_l_buf, NULL, p_intl_envdatastruct_h);
			sprintf(chr_l_buf,"Deal already locked. Skipping...");
			fprintf(p_gsf_repfile,"%-20s%-20s%-20s\n",chr_l_h_client_a, chr_l_h_refno_A , chr_l_buf);
			
			continue;
		}

		printf("fetched money date is =|%s|",chr_l_temp_dt);

		IS_ANY_ORA_ERROR
		printf("fetched money date is =|%s|",chr_l_temp_dt);

		if(strlen(chr_l_temp_dt) != 0)
		{
			printf("Populating final money date as =|%s|",chr_l_temp_dt);
			strcpy(l_deal_sstdet_struct_h->h_moneydate,chr_l_temp_dt);
			printf("Done Populating final money date as =|%s|",l_deal_sstdet_struct_h->h_moneydate);
		}

		l_deal_sstdet_struct_h->h_pr = l_h_cost; 
		l_deal_sstdet_struct_h->h_brokercomm = l_h_brokercomm;
		if (l_mt_core_sys_params_struct_h.proc_reg_ind[0] == 'Y')
		{
			if (VAL_DELIVER_DEAL(chr_l_h_trcode_a[0]))
			{
				strcpy(l_deal_sstdet_struct_h->h_sel_forreg, APL_NULL_STRING);
				if (!strcmp(chr_l_h_posn_status, STATUS_POS_000))
				{
					l_deal_sstdet_struct_h->h_delta_000 = l_h_quantity_a;
				}
				else if (!strcmp(chr_l_h_posn_status, STATUS_POS_001))
				{
					l_deal_sstdet_struct_h->h_delta_001 = l_h_quantity_a;
				}
				else if (!strcmp(chr_l_h_posn_status, STATUS_POS_003))
				{
					l_deal_sstdet_struct_h->h_delta_002 = l_h_quantity_a;
				}
				else
				{
					//Optimization - Savepoint to be triggered in loop failure
					EXEC SQL ROLLBACK TO SAVEPOINT start_process;
						IS_ANY_ORA_ERROR
					 EXEC SQL COMMIT WORK;
						IS_ANY_ORA_ERROR

					CO_InsertErr(	l_debug_info_ptr,
											ERR_DATA_INTEGRITY,
											chr_l_h_client_a,
											chr_l_h_refno_A,
											"DeliverTrd:posn",
											__LINE__,
											__FILE__ );
					APL_GOBACK_FAIL
				}
			}
			else 
			{
				strcpy(l_deal_sstdet_struct_h->h_sel_forreg, "N");
				if (!strcmp(chr_l_h_posn_status, STATUS_POS_000))
				{
					l_deal_sstdet_struct_h->h_pendregquantity = 0.0;
					l_deal_sstdet_struct_h->h_marktrfquantity = 0.0;
					l_deal_sstdet_struct_h->h_mcomplquantity  = 0.0;
					l_deal_sstdet_struct_h->h_rec_int_000  = 0.0;
				}
				else
				{
					l_deal_sstdet_struct_h->h_pendregquantity = 0.0;
					l_deal_sstdet_struct_h->h_marktrfquantity = 0.0;
					l_deal_sstdet_struct_h->h_mcomplquantity  = l_h_quantity_a;
					l_deal_sstdet_struct_h->h_rec_int_000  = 0.0;
				}
			}
		}
		else
		{
			strcpy(l_deal_sstdet_struct_h->h_sel_forreg, APL_NULL_STRING);
			l_deal_sstdet_struct_h->h_pendregquantity = 0.0;
			l_deal_sstdet_struct_h->h_marktrfquantity = 0.0;
			l_deal_sstdet_struct_h->h_mcomplquantity  = 0.0;
			l_deal_sstdet_struct_h->h_rec_int_000  = 0.0;
			l_deal_sstdet_struct_h->h_delta_000  = 0.0;
			l_deal_sstdet_struct_h->h_delta_001  = 0.0;
			l_deal_sstdet_struct_h->h_delta_002  = 0.0;
		}

		strcpy(l_deal_sstdet_struct_h->h_access_stamp, chr_l_h_access_stamp);


        

		if (g_mt_commonsys_params_struct_h.ei_smi_ind[0] == 'Y')
		{

			EXEC SQL SELECT rowid 
						INTO :h_ora_rowid:i_ora_rowid
						FROM DL_DEAL 
						WHERE CLIENT=:chr_l_h_client_a
						AND IDENTIY_NO =:chr_l_h_refno_A;
			IS_ANY_ORA_ERROR

			int_p_smieligibility_flg = 0 ;
			if (EI_Chk_SMIElg(chr_l_locncode_c,
												 chr_l_trdt_a,
												 chr_l_typeoftrd,
												 chr_l_instrcode_a,
												 chr_l_locnchng_flg,
												 h_ora_rowid,
												 &int_p_smieligibility_flg,
												 p_intl_envdatastruct_h,
												 l_debug_info_ptr
												 ) == APL_FAILURE)
		   {

				//Optimization - Savepoint to be triggered in loop failure
				EXEC SQL ROLLBACK TO SAVEPOINT start_process;
					IS_ANY_ORA_ERROR
				 EXEC SQL COMMIT WORK;
					IS_ANY_ORA_ERROR

				CO_ProcMonitor(p_logfile,"Failure from SMI_CheckSMIEligibility", NULL, p_intl_envdatastruct_h);
				APL_GOBACK_FAIL;
			}

			if(int_p_smieligibility_flg)
			{
			  CO_ProcMonitor(p_logfile,"SMI Eligible Trade Found\n", NULL, NULL) ;
			  continue ;
			}

		}


		


		if(l_cond_ru) //For Kotak it is OFF as per SIT
		{
         EXEC SQL SELECT STAT_REG_NO INTO :chr_l_statregno FROM DL_RUINSTRUMENT
         WHERE INSTR_CODE=:chr_l_instrcode_a;
         IS_ANY_ORA_ERROR

         strcpy(chr_l_srn_str,chr_l_statregno);
         strcat(chr_l_srn_str,":");
         sprintf(chr_l_str_temp,"%lf",l_h_quantity_a);
         strcat(chr_l_srn_str,chr_l_str_temp);
         strcat(chr_l_srn_str,";");
		}	

		if(l_cond_ru && (strcmp(p_trade_status,"A")==0) )
		{
		   memset(l_dl_deal_pmtdet_struct_h, NULL, sizeof(DL_DEAL_PMTDET_STRUCT_H));
			strcpy(l_dl_deal_pmtdet_struct_h->h_dl_client,l_deal_sstdet_struct_h->h_dl_client);
			strcpy(l_dl_deal_pmtdet_struct_h->h_indentity_no,l_deal_sstdet_struct_h->h_indentity_no);
			strcpy(l_dl_deal_pmtdet_struct_h->h_confdate,chr_p_confdt);
			strcpy(l_dl_deal_pmtdet_struct_h->h_verfied_with,APL_NULL_STRING);
			l_dl_deal_pmtdet_struct_h->h_diffamount=0;
			strcpy(l_dl_deal_pmtdet_struct_h->h_info1,APL_NULL_STRING);
			strcpy(l_dl_deal_pmtdet_struct_h->h_ispart_,"N");
			strcpy(l_dl_deal_pmtdet_struct_h->h_brkrno,APL_NULL_STRING);
			l_dl_deal_pmtdet_struct_h->h_newquantity=0.0;
			l_dl_deal_pmtdet_struct_h->h_newamount=0.0;
			strcpy(l_dl_deal_pmtdet_struct_h->h_newindentity_no,APL_NULL_STRING);
			strcpy(l_dl_deal_pmtdet_struct_h->h_access_stamp,chr_l_h_access_stamp);
			l_dl_deal_pmtdet_struct_h->h_grossamount=0.0;
			l_dl_deal_pmtdet_struct_h->h_cpamt=0.0;
			strcpy(l_dl_deal_pmtdet_struct_h->h_comm_indentity_no,APL_NULL_STRING);
			strcpy(l_dl_deal_pmtdet_struct_h->h_exp_setl_date,APL_NULL_STRING);

			strcpy(p_intl_envdatastruct_h->processtion,"Global Settlement - Intermediate Pre-Match");

			if(APL_FAILURE == CRUDBUpdPmtDetFn( l_dl_deal_pmtdet_struct_h ,chr_l_srn_str,p_intl_envdatastruct_h,l_debug_info_ptr ))
			{
				IS_ANY_ERROR_FATAL
				memset(chr_l_buf, NULL, BUFFER_LEN);
				sprintf(chr_l_buf, "\nFAILED TO PREMATCH TRADE %s, %s", chr_l_h_client_a, chr_l_h_refno_A);
				CO_ProcMonitor(p_logfile, chr_l_buf, l_debug_info_ptr, p_intl_envdatastruct_h);
				fprintf(p_gsf_repfile,"%-20s%-20s%-20s\n",chr_l_h_client_a, chr_l_h_refno_A , (*l_debug_info_ptr)->msg);
				CO_FreeErrLst(l_debug_info_ptr);
			}

			EXEC SQL SELECT ACCESS_STAMP INTO :chr_l_access_stamp FROM DL_DEAL 
			WHERE CLIENT=:l_deal_sstdet_struct_h->h_dl_client AND IDENTIY_NO=:l_deal_sstdet_struct_h->h_indentity_no;
			IS_ANY_ORA_ERROR
			
			strcpy(l_deal_sstdet_struct_h->h_access_stamp,chr_l_access_stamp);

			strcpy(p_intl_envdatastruct_h->processtion,"Global_Settlement");
		}

		l_err=0;
		if(l_cond_ru) 
		{
		if (APL_FAILURE == DL_Proc_DLSetlRRMMSing(	l_deal_sstdet_struct_h,
                                          APL_NULL_STRING,
														p_intl_envdatastruct_h,
														l_debug_info_ptr ))
		{
			IS_ANY_ERROR_FATAL
			memset(chr_l_buf, NULL, BUFFER_LEN);
			sprintf(chr_l_buf, "\nFAILED TO SETTLE TRADE %s, %s", chr_l_h_client_a, chr_l_h_refno_A);
			CO_ProcMonitor(p_logfile, chr_l_buf, l_debug_info_ptr, p_intl_envdatastruct_h);
			fprintf(p_gsf_repfile,"%-20s%-20s%-20s\n",chr_l_h_client_a, chr_l_h_refno_A , (*l_debug_info_ptr)->msg);
			CO_FreeErrLst(l_debug_info_ptr);
			l_err=1;
		}
		}
		else
		{
			//Optmization - access stamp fetched in cursor is verified again with latest deal table timistamp inside DL_Proc_DLSetlSing. So no worry if during processing if deal reset etc happened.
		if (APL_FAILURE == DL_Proc_DLSetlSing(	   l_deal_sstdet_struct_h,
                                          	APL_NULL_STRING,
															p_intl_envdatastruct_h,
															l_debug_info_ptr ))
		{
			//IS_ANY_ERROR_FATAL  //Optimization - Macro is replaced to handle savepoint
			if (CO_ChkFatalErr(*l_debug_info_ptr) == APL_SUCCESS)
			{
				EXEC SQL ROLLBACK TO SAVEPOINT start_process;
					IS_ANY_ORA_ERROR
				EXEC SQL COMMIT WORK;
					IS_ANY_ORA_ERROR

				APL_GOBACK_FAIL
			}

			memset(chr_l_buf, NULL, BUFFER_LEN);
			sprintf(chr_l_buf, "\nFAILED TO SETTLE TRADE %s, %s", chr_l_h_client_a, chr_l_h_refno_A);
			CO_ProcMonitor(p_logfile, chr_l_buf, l_debug_info_ptr, p_intl_envdatastruct_h);
			fprintf(p_gsf_repfile,"%-20s%-20s%-20s\n",chr_l_h_client_a, chr_l_h_refno_A , (*l_debug_info_ptr)->msg);
			CO_FreeErrLst(l_debug_info_ptr);
			l_err=1;
		}
		}		
		if(l_err==0)	
		{
			int_l_reccount++;
			memset(chr_l_buf, NULL, BUFFER_LEN);
			sprintf(chr_l_buf, "\nSETTLED TRADE %s, %s", chr_l_h_client_a, chr_l_h_refno_A);
			CO_ProcMonitor(p_logfile, chr_l_buf, NULL, p_intl_envdatastruct_h);
			fprintf(p_gss_repfile,"%-20s%-20s\n",chr_l_h_client_a, chr_l_h_refno_A);
		
			

			if (!(int_l_reccount%C_COMMITSIZE))
			{
				

				memset(chr_l_buf, NULL, BUFFER_LEN);
				sprintf(chr_l_buf, "Processed %d Records", int_l_reccount);

				EXEC SQL UPDATE SYS_BATCHPROC
				SET STAT_DET = :chr_l_buf
  		    	WHERE PROCESS_NAME=:argv[0]
  		    	AND   PROC_INIT=:argv[1]
  		    	AND   STARTDATE=:argv[2]
  	    		AND   STATUS='started';

				EXEC SQL COMMIT WORK;
				IS_ANY_ORA_ERROR

				CO_ProcMonitor(p_logfile, "Record Committed", NULL, NULL);

				
				/* Oprimization - Cursor reopening is committed.
				if (l_cond_gr)
				{
				   if (chr_l_typeofinstr[0] == 'B')												
						EXEC SQL OPEN gr_gst_cursor_B;
				   else if (chr_l_typeofinstr[0] == 'E')
				   	EXEC SQL OPEN gr_gst_cursor_E;
				   else if (chr_l_typeofinstr[0] == 'R')
				   	EXEC SQL OPEN gr_gst_cursor_R;
				}
				else if (l_cond_pl)
				{
					EXEC SQL OPEN gst_cursor;
				}
				else if (l_cond_ru)
				{
					EXEC SQL OPEN ru_gst_cursor;
				}
            else
				{
                                   //Following If condition added on 07122015 supriya
                                   if((strcmp(chr_l_trdtypeind,"C") == 0)||((strcmp(chr_l_trdtypeind,"D") == 0)&&(strlen(p_settle_no) != 0)&&(strlen(p_mkttype) != 0)))
                                   //if(strcmp(chr_l_trdtypeind,"C") == 0)
		                   {
					if (chr_l_typeofinstr[0] == 'B')                                  
                  EXEC SQL OPEN tr_gst_cursor_B;
               else if (chr_l_typeofinstr[0] == 'E')
                  EXEC SQL OPEN tr_gst_cursor_E;
            }
				   else if(strcmp(chr_l_trdtypeind,"D") == 0 )
				   {
					if (chr_l_typeofinstr[0] == 'B')   
                                        {
					   EXEC SQL OPEN tr_gst_cursor_B_DVP;
                                        }
					else if (chr_l_typeofinstr[0] == 'E')
                                        { 
                                           EXEC SQL OPEN tr_gst_cursor_E_DVP;
                                        }
			            }
                                 }
        
				IS_ANY_ORA_ERROR  */
	
  		    	EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
  		    	FROM SYS_BATCHPROC
  		    	WHERE PROCESS_NAME=:argv[0]
  		    	AND   PROC_INIT=:argv[1]
  		    	AND   STARTDATE=:argv[2]
  	    		AND   STATUS='started'
      		FOR UPDATE OF PROCESSING_STATUS,STATUS;

				IS_ANY_ORA_ERROR

 	     		if(APL_ZERO_RESULT_SET)
   	  		{
      		   CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
        	 		APL_GOBACK_FAIL
      		}
			}
		}

	} 

	

	if (l_cond_gr)
	{
	   if (chr_l_typeofinstr[0] == 'B')													   		
			EXEC SQL CLOSE gr_gst_cursor_B;
	   else if (chr_l_typeofinstr[0] == 'E')
			EXEC SQL CLOSE gr_gst_cursor_E;
	   else if (chr_l_typeofinstr[0] == 'R')
			EXEC SQL CLOSE gr_gst_cursor_R;
	}
	else if (l_cond_pl)
	{
		EXEC SQL CLOSE gst_cursor;
	}
	else if (l_cond_ru)
	{
		EXEC SQL CLOSE ru_gst_cursor;
	}
   else
	{
//Following If condition added on 07122015 supriya
             if((strcmp(chr_l_trdtypeind,"C") == 0)||((strcmp(chr_l_trdtypeind,"D") == 0)&&(strlen(p_settle_no) != 0)&&(strlen(p_mkttype) != 0)))
             {  
		if (chr_l_typeofinstr[0] == 'B')                                              
			EXEC SQL CLOSE tr_gst_cursor_B;
      else if (chr_l_typeofinstr[0] == 'E')
			EXEC SQL CLOSE tr_gst_cursor_E;
   }
             else if(strcmp(chr_l_trdtypeind,"D") == 0 )
             {
		  if (chr_l_typeofinstr[0] == 'B')        
                  {
	        	  EXEC SQL CLOSE tr_gst_cursor_B_DVP;
                  }
		  else if (chr_l_typeofinstr[0] == 'E')
                  {
                        EXEC SQL CLOSE tr_gst_cursor_E_DVP;
                  }
             }
   }
 
	IS_ANY_ORA_ERROR

	if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr)) APL_GOBACK_FAIL

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "Processed %d Records", int_l_reccount);

		CO_ProcMonitor(p_logfile, chr_l_buf, NULL, NULL);
		
		EXEC SQL UPDATE SYS_BATCHPROC
		SET STAT_DET = :chr_l_buf
  	 	WHERE PROCESS_NAME=:argv[0]
  	  	AND   PROC_INIT=:argv[1]
  	  	AND   STARTDATE=:argv[2]
  	  	AND   STATUS='started';

      EXEC SQL COMMIT WORK;
      IS_ANY_ORA_ERROR

		CO_ProcMonitor(p_logfile, "Record Committed", NULL, NULL);

      EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
      FROM SYS_BATCHPROC
      WHERE PROCESS_NAME=:argv[0]
      AND   PROC_INIT=:argv[1]
      AND   STARTDATE=:argv[2]
      AND   STATUS='started'
      FOR UPDATE OF PROCESSING_STATUS,STATUS;

		IS_ANY_ORA_ERROR

      if(APL_ZERO_RESULT_SET)
      {
         CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
         APL_GOBACK_FAIL
      }

		CO_ProcMonitor(	p_logfile,
						"Leaving Function DL_Proc_GbSetl with Success\n",
						NULL,
						NULL);
		return(APL_SUCCESS);

	RETURN_FAILURE :
		CO_ProcMonitor(	p_logfile,
						"Got Errors : ",
						l_debug_info_ptr,
						p_intl_envdatastruct_h );
		CO_FreeErrLst(l_debug_info_ptr);

		CO_ProcMonitor(	p_logfile,
						"Leaving Function DL_Proc_GbSetl with Errors\n",
						NULL,
						NULL);
		return(APL_FAILURE);
}




int main(int argc,char **argv) //AIX- Warnings Removal
{
	struct sqlca sqlca;
   DEBUG_INFO_STRUCT_H *l_debug_info_ptr				= NULL;
	FILE *l_finifile 							= NULL;
	FILE *l_flogfile 							= NULL;
	FILE *l_gsf_repfile 						= NULL;
	FILE *l_gss_repfile 						= NULL;
	INTL_ENV_DATA_STRUCT_H l_intl_env_data_h;

   int int_l_retval	= 0;
	int int_num 			= 0;
	int i 			= 0;

	char **temp 								= NULL;
   char chr_uname[APL_USERID_LEN] 			= APL_NULL_STRING;
   char chr_custody_id_b[APL_USERID_LEN] 			= APL_NULL_STRING;
   char chr_passwd[APL_PASSWD_LEN] 			= APL_NULL_STRING;
	char chr_l_logdir[PATH_LENGTH]				= APL_NULL_STRING;
	char chr_l_logname[PATH_LENGTH] 			= APL_NULL_STRING;
	char chr_l_inifile[PATH_LENGTH] 			= APL_NULL_STRING;
	char chr_l_stx_instr_dt[APL_DATE_LEN]		= APL_NULL_STRING;
	char chr_l_stx_moneydt[APL_DATE_LEN]		= APL_NULL_STRING;
	char chr_l_oth_instr_dt[APL_DATE_LEN]		= APL_NULL_STRING;
	char chr_l_oth_moneydt[APL_DATE_LEN]		= APL_NULL_STRING;
   char chr_l_typeofinstr[APL_FLAG_LENGTH]		   = APL_NULL_STRING;					 
   char chr_l_settle_no[16]		   = APL_NULL_STRING;					 
   char chr_l_mkttype[4]		   = APL_NULL_STRING;					 
   
	char chr_l_trdtypeind[APL_FLAG_LENGTH]     = APL_NULL_STRING;   
	char chr_l_trade_status[3]     = APL_NULL_STRING;   

	char chr_l_location[APL_LOCNCODE_LENGTH]     		= APL_NULL_STRING;   
	/*Changed by Rakesh for */	
	char chr_l_confdt[APL_DATE_LEN]		= APL_NULL_STRING;

    short		HB_l_cond = 0; //PMS
   char chr_l_dealdt[APL_DATE_LEN]		= APL_NULL_STRING; //PMS
   EXEC SQL VAR chr_uname IS STRING;
   EXEC SQL VAR chr_custody_id_b IS STRING;
   EXEC SQL VAR chr_passwd IS STRING;

	sqlca.sqlcode = 0;

	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

	if ( ( l_finifile=fopen(chr_l_inifile,"r") ) == NULL)
	{
   	APL_GOBACK_FAIL
	}

	

	

	APL_FETCH_DB_LOGIN_DETAILS(l_finifile, chr_custody_id_b, chr_uname, chr_passwd, APL_OUT_FILE, &l_debug_info_ptr) 

	

	if (fclose(l_finifile))
	{
		exit(-1);
	}

	

   EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;


   if (sqlca.sqlcode)
   {
   	APL_GOBACK_FAIL
   }
   else
   {
		

		if (APL_FAILURE == CO_Rtv_RptFileName(	"3M",
														APL_LOGFILE_DESC,
														100,
														argv[5],
														argv,
														&l_flogfile,
														&l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL
		}

		if (APL_FAILURE == CO_Rtv_RptFileName(	"GSF",
														"Global Settlement - Failed Trades List",
														100,
														argv[5],
														argv,
														&l_gsf_repfile,
														&l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL
		}

		if (APL_FAILURE == CO_Rtv_RptFileName(	"GSS",
														"Global Settlement - Successful Trades List",
														100,
														argv[5],
														argv,
														&l_gss_repfile,
														&l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL
		}

		

		EXEC SQL COMMIT WORK;

		if (sqlca.sqlcode)
		{
			CO_ProcMonitor(l_flogfile, "Could not commit after opening chr_log file", NULL, NULL);
			CO_Proc_RptClose(l_flogfile, &l_debug_info_ptr);
			APL_GOBACK_FAIL
		}

		

		if (APL_FAILURE == CO_RtvSysParams(&l_debug_info_ptr))
		{
			CO_ProcMonitor(l_flogfile, "Could Not get System Params successfully", NULL, &l_intl_env_data_h);
			CO_Proc_RptClose(l_flogfile, &l_debug_info_ptr);
   		APL_GOBACK_FAIL
		}

		
		Alert("argv[0]: [%s]\n", argv[0]);
		Alert("argv[1]: [%s]\n", argv[1]);
		Alert("argv[2]: [%s]\n", argv[2]);
		Alert("argv[3]: [%s]\n", argv[3]);
		Alert("argv[4]: [%s]\n", argv[4]);
		Alert("argv[5]: [%s]\n", argv[5]);
		Alert("argv[6]: [%s]\n", argv[6]);
		Alert("argv[7]: [%s]\n", argv[7]);
		Alert("argv[8]: [%s]\n", argv[8]);
		Alert("argv[9]: [%s]\n", argv[9]);	
        
        if (strcmp(l_mt_core_sys_params_struct_h.gsetl_ind, "Y") == 0 )
        {
		

		if (APL_FAILURE == CO_SplitStr(	argv[9],
													'|',
													&int_num,
													&temp ))
		{
			CO_ProcMonitor(l_flogfile, "Could not parse input string", NULL, &l_intl_env_data_h);
			CO_Proc_RptClose(l_flogfile, &l_debug_info_ptr);
   		APL_GOBACK_FAIL
		}
   
		
                // Added For PMS 31072015 	
		if (APL_FAILURE == CO_Chk_CntryEnabled(	"GLSET_OFFMK",
			      				"GLOBAL_OFF_MARKET",
					      		&HB_l_cond,
							&l_debug_info_ptr ))
	        {
		       APL_GOBACK_FAIL
	        }
        
	
		if (int_num != 5 && HB_l_cond == 0)  //PMS
        
		{
			CO_ProcMonitor(l_flogfile, "Improper no. of input arguements", NULL, &l_intl_env_data_h);
			CO_Proc_RptClose(l_flogfile, &l_debug_info_ptr);
   		APL_GOBACK_FAIL
		}
                else if (int_num != 6 && HB_l_cond == 1) //PMS
		{
			CO_ProcMonitor(l_flogfile, "Improper no. of input arguements", NULL, &l_intl_env_data_h);
			CO_Proc_RptClose(l_flogfile, &l_debug_info_ptr);
   		APL_GOBACK_FAIL
		}
		printf("Optimization. clh flg |%s|\n",temp[2]);
		printf("settlement no |%s|\n",temp[3]);
		printf("mkttype |%s|\n",temp[4]);
		printf("dealdate|%s|\n",temp[5]);
		fflush(stdout);
		
      strcpy(chr_l_stx_instr_dt, temp[0]);
      strcpy(chr_l_stx_moneydt, temp[1]);
		strcpy(chr_l_trdtypeind,temp[2]);
      strcpy(chr_l_settle_no, temp[3]);
      strcpy(chr_l_mkttype, temp[4]);

		/*	
		strcpy(chr_l_trdtypeind,temp[5]);
		strcpy(chr_l_trade_status,temp[6]); 
		strcpy(chr_l_confdt,temp[8]); 
		
		*/
		/* strcpy(chr_l_location,"NSDL");	*/
		strcpy(chr_l_location,"");	
		printf("flg |%s|\n",chr_l_trdtypeind);

	  if(strcmp(chr_l_trdtypeind,"D") == 0 && HB_l_cond == 1)
	  {
     printf("\n COPYING DEAL DATE");
		  strcpy(chr_l_dealdt, temp[5]);
		  strcpy(chr_l_oth_instr_dt, temp[0]);
		  strcpy(chr_l_oth_moneydt, temp[1]);		 
	  }
		fprintf(l_flogfile,"Instrument Settlement Date[0]=[%s]\n",chr_l_stx_instr_dt);
		fprintf(l_flogfile,"Money Settlement Date[1]=[%s]\n",chr_l_stx_moneydt);
		fprintf(l_flogfile,"CLH Flag[2]=[%s]\n",chr_l_trdtypeind);
		fprintf(l_flogfile,"Settlement No[3]=[%s]\n",chr_l_settle_no);
		fprintf(l_flogfile,"Market Type[4]=[%s]\n",chr_l_mkttype);
		fprintf(l_flogfile,"Deal Date[5]=[%s]\n",chr_l_dealdt);

		printf("param string %s\n",argv[9]);
			

		strcpy(l_intl_env_data_h.usr, argv[3]);
		strcpy(l_intl_env_data_h.h_mode, argv[4]);
		strcpy(l_intl_env_data_h.processtion, argv[5]);
		strcpy(l_intl_env_data_h.auth_req, argv[6]);
		strcpy(l_intl_env_data_h.subprocess, argv[7]);
		strcpy(l_intl_env_data_h.h_process, argv[8]);

		fprintf(l_gsf_repfile,"Unsuccessful Trade List - Global Settlement\n");
		fprintf(l_gsf_repfile,"-------------------------------------------\n\n");
		fprintf(l_gsf_repfile,"%-20s%-20s%-20s\n","Account","Ref.No","Error");
		fprintf(l_gsf_repfile,"%-20s%-20s%-20s\n","-------","------","-----");

		fprintf(l_gss_repfile,"Successful Trade List - Global Settlement\n");
		fprintf(l_gss_repfile,"-----------------------------------------\n\n");
		fprintf(l_gss_repfile,"%-20s%-20s\n","Account","Ref.No");
		fprintf(l_gss_repfile,"%-20s%-20s\n","-------","------");

	   	
		strcpy(chr_l_typeofinstr,"B");
      
		int_l_retval = DL_Proc_GbSetl(	chr_l_stx_instr_dt,
										chr_l_stx_moneydt,
										chr_l_oth_instr_dt,
										chr_l_oth_moneydt,
										argv,
										chr_l_typeofinstr,
										chr_l_trdtypeind,
                              chr_l_trade_status,
                              chr_l_confdt,
										chr_l_location,
										chr_l_settle_no,
										chr_l_mkttype,
                                                chr_l_dealdt, //PMS
										l_flogfile,
										l_gsf_repfile,
										l_gss_repfile,
										&l_intl_env_data_h,
										&l_debug_info_ptr);

	   
      if ( int_l_retval == APL_FAILURE )
      {
			CO_ProcMonitor(l_flogfile, "CDBDoGSTFn returned failure", NULL, &l_intl_env_data_h);
			CO_Proc_RptClose(l_flogfile, &l_debug_info_ptr);
			CO_Proc_RptClose(l_gsf_repfile, &l_debug_info_ptr);
			CO_Proc_RptClose(l_gss_repfile, &l_debug_info_ptr);
			EXEC SQL ROLLBACK WORK RELEASE;  //After Optimization changes this rollback is not usefull. Only IS_ANY_ORA_ERROR in cursor loop can reach here. 
		
         APL_GOBACK_FAIL
      }
      else
      {
         EXEC SQL UPDATE SYS_BATCHPROC
         SET  status = 'completed'
         WHERE PROCESS_NAME=:argv[0]
         AND   PROC_INIT=:argv[1]
         AND   STARTDATE=:argv[2]
         AND   STATUS='started';

			if (sqlca.sqlcode)
			{
				CO_ProcMonitor(	l_flogfile, 
								"Could not update Batch_in_proc record to completed", 
								NULL, 
								&l_intl_env_data_h);
				CO_Proc_RptClose(l_flogfile, &l_debug_info_ptr);
				APL_GOBACK_FAIL
			}

         EXEC SQL COMMIT WORK RELEASE;

			if (sqlca.sqlcode)
			{
				CO_ProcMonitor(	l_flogfile, 
								"Could not perform final COMMIT", 
								NULL, 
								&l_intl_env_data_h);
				CO_Proc_RptClose(l_flogfile, &l_debug_info_ptr);
				APL_GOBACK_FAIL
			}

			CO_Proc_RptClose(l_flogfile, &l_debug_info_ptr);
         APL_GOBACK_SUCCESS
      }

     } 
        else
        {
        CO_ProcMonitor(l_flogfile,"Global settlement not allowed for this country",NULL,&l_intl_env_data_h);
             CO_Proc_RptClose(l_flogfile, &l_debug_info_ptr);
                                APL_GOBACK_FAIL
         }	
	 

			CO_Proc_RptClose(l_gsf_repfile, &l_debug_info_ptr);
			CO_Proc_RptClose(l_gss_repfile, &l_debug_info_ptr);
   }

	RETURN_SUCCESS : exit(0);
	RETURN_FAILURE : exit(-1);
}
