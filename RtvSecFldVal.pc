/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to 
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or 
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         :	
 *
 * File Name           :
 *
 * Description         :	
 *
 *           
 *
 *            Version Control Block
 *
 * Date        Version		Author               Description
 * ---------   --------	 ---------------  ---------------------------
 *					
 *
 *********************************************************************/

   
   
   
   
   
   
   
   
   
   
   
   




#include <CR_Header_C.h>

EXEC SQL INCLUDE sqlca;


 
int CR_Rtv_SecChrVal(char *p_sec_code, char *p_link_val, char *p_field_val, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;

	struct sqlca		sqlca;
	char					chr_h_field_val[100];
	short					i_field_val;
	char					chr_l_buf[BUFFER_LEN];

	EXEC SQL VAR chr_h_field_val IS STRING;
	
	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE	:my_ctx_local;
	#endif

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Rtv_SecChrVal \n",NULL,NULL);
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Security h_code is %s \n",p_sec_code);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
		
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Field name is %s \n",p_link_val);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
	}

	memset(chr_h_field_val,APL_NULL_CHAR,sizeof(chr_h_field_val));

	if (strcmp(p_link_val, "ROWID") == 0)
	{
		EXEC SQL SELECT ROWID
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE security_cd = RTRIM(:p_sec_code)
		FOR UPDATE OF timestamp;
	}

	if (strcmp(p_link_val, "FEROWID") == 0)
	{
		EXEC SQL SELECT ROWID
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE security_cd = RTRIM(:p_sec_code);
	}

	if (strcmp(p_link_val, "regbrind") == 0)
	{
		EXEC SQL SELECT REG_BR_IND
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE security_cd = RTRIM(:p_sec_code);
	}
	
	if (strcmp(p_link_val, "tiposec") == 0)
	{
		EXEC SQL SELECT SECURITY_TYPE
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE security_cd = RTRIM(:p_sec_code);
	}
	
	if (strcmp(p_link_val, "issue_dt") == 0)
	{
		EXEC SQL SELECT ISSUE_DATE
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE security_cd = RTRIM(:p_sec_code);
	}
	
	if (strcmp(p_link_val, "locncode") == 0)
	{
		EXEC SQL SELECT location_cd
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE security_cd = RTRIM(:p_sec_code);
	}
	
	if (strcmp(p_link_val, "int_acctyp") == 0)
	{
		EXEC SQL SELECT CLT_CLASS
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE security_cd = RTRIM(:p_sec_code);
	}
	
	if (strcmp(p_link_val, "prodtype") == 0)
	{
		EXEC SQL SELECT prod_class
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE security_cd = RTRIM(:p_sec_code);
	}
	
	if (strcmp(p_link_val, "ccycode") == 0)
	{
		EXEC SQL SELECT currency_cd
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE security_cd = RTRIM(:p_sec_code);
	}
	
	if (strcmp(p_link_val, "parentsec") == 0)
	{
		EXEC SQL SELECT PARENT_SEC
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE security_cd = RTRIM(:p_sec_code);
	}
	
	if (strcmp(p_link_val, "clscode") == 0)
	{
		EXEC SQL SELECT CLASSCD
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE security_cd = RTRIM(:p_sec_code);
	}
	
	if (strcmp(p_link_val, "access_stamp") == 0)
	{
		EXEC SQL SELECT timestamp
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE security_cd = RTRIM(:p_sec_code);
	}
	
	if (strcmp(p_link_val, "listedflg") == 0)
	{
		EXEC SQL SELECT LISTED_IND
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE security_cd = RTRIM(:p_sec_code);
	}
	if (strcmp(p_link_val, "candf") == 0)
	{
		EXEC SQL SELECT ALLOW_DF
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE security_cd = RTRIM(:p_sec_code);
	}
	if (strcmp(p_link_val, "canrf") == 0)
	{
		EXEC SQL SELECT ALLOW_RF
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE security_cd = RTRIM(:p_sec_code);
	}
	if (strcmp(p_link_val, "candvp") == 0)
	{
		EXEC SQL SELECT ALLOW_DVP
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE security_cd = RTRIM(:p_sec_code);
	}
	if (strcmp(p_link_val, "canrvp") == 0)
	{
		EXEC SQL SELECT ALLOW_RVP
		INTO :chr_h_field_val:i_field_val
		FROM MT_INSTRUMENT
		WHERE security_cd = RTRIM(:p_sec_code);
	}
	
	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"SECURITY",APL_NULL_STRING,APL_NULL_STRING)

	if (i_field_val == -1)
		strcpy((char *)p_field_val, APL_NULL_STRING);
	else	
		strcpy((char *)p_field_val, chr_h_field_val);

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Rtv_SecChrVal With Success\n",NULL,NULL);
		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Rtv_SecChrVal With Errors\n",NULL,NULL);
		return(APL_FAILURE);
	}
}




int CR_Rtv_SecNumVal(	char *p_securitycd, 
							char *p_ind, 	
							double *int_p_retval, 
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	

	

	struct sqlca sqlca;
	char         chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	char         chr_h_field_val[100];
	short			 i_field_val;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
						"Entered Function CR_Rtv_SecNumVal\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Security is       : %s\n", 
						p_securitycd);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Indicator is     : %s\n", 
						p_ind);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
	}


	

	sqlca.sqlcode = 0;
	if (!strcmp(p_ind, "nomval"))
		EXEC SQL SELECT NOMINAL_VAL INTO :int_p_retval 
		FROM MT_INSTRUMENT 
		WHERE SECURITY_CD = RTRIM(:p_securitycd);

	if (sqlca.sqlcode != -1405)
		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_SEC_NOTFND,
															p_securitycd,
															APL_NULL_STRING,
															APL_NULL_STRING);
	
	if (strcmp(p_ind, "minfmttrdqty") == 0)
	{
		EXEC SQL SELECT NVL(MIN_FMT_DL_QTY,0) 
		INTO :int_p_retval
		FROM MT_INSTRUMENT 
		WHERE SECURITY_CD = RTRIM(:p_securitycd);

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_SEC_NOTFND,p_securitycd,APL_NULL_STRING,APL_NULL_STRING)

	}

	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Rtv_SecNumVal with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);
 
   RETURN_FAILURE :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Rtv_SecNumVal with errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);

}
