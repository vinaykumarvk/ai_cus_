

 





#include "CO_HostStructdef.h"
EXEC SQL INCLUDE SQLCA.H;
#include "CR_Common.h"
#include	"string.h"
#include	"stdlib.h"
#include	"math.h"

#define	COMMIT_COUNT_G 100

int DL_Proc_AutoBrkCancel(
						char **argv,
						FILE *p_logfile,
						INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	

	FILE *l_fp_cancel   = NULL;

	struct sqlca sqlca;	

	SYS_DL_DEAL_STRUCT_H *l_sys_dl_deal_struct_hk 			=NULL;
	SYS_DL_DEAL_STRUCT_I *l_sys_dl_deal_struct_ia			=NULL;
	DL_DEAL_OTH_STRUCT_H *l_dl_deal_oth_struct_ha  =NULL;
   DL_DEALAUDIT_STRUCT_H *l_dl_dealaudit_struct_ha 	=NULL;
	char		chr_l_now[APL_DATE_LEN] 					= APL_NULL_STRING;
	char		chr_l_today[APL_DATE_LEN] 				= APL_NULL_STRING;
	char		chr_l_buf[BUFFER_LEN]						= APL_NULL_STRING;
	char		chr_l_client_a[APL_CLIENT_LENGTH]			= APL_NULL_STRING;
	char		chr_l_refno_a[APL_TXNREFNO_LEN]			= APL_NULL_STRING;
	char     chr_l_h_rowid[APL_ROWID_LEN]         = APL_NULL_STRING;
	char     chr_l_str_count_days[4]              = APL_NULL_STRING;
	char     chr_l_auto_canc_flg[2]                = APL_NULL_STRING;
	char     chr_l_settledt_a[11]		                = APL_NULL_STRING;

	int 		int_l_error_flag   						= APL_SUCCESS;
	int		int_l_chkflg     							= 0;
	int		int_l_enuf_posn								= 0;
	int		int_l_rec_count								= 0; 
	int		int_l_count								   = 0; 
	int		i											= 0;
	int      int_l_int_count_days						= 0;

	short		int_l_condexists_A							= 0; 
	short		i_auto_canc_flag						= 0; 

   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;

EXEC SQL VAR chr_g_restart_data is string;

	

  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_dl_client         IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_indentity_no           IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_dlt            IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_setldt        IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_ex_arena         IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_instrdate           IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_moneydate         IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_domcpclt_cd         IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_isspotdl       IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_dlfromord      IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_entry       IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_reapired_ind       IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_domcp_custodyclt      IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_countclt        IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_countcltnm      IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_clientof       IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_custinfo        IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_fx_reqd          IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_ispymtlocal      IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_verfied_with         IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_brkrno        IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_fail_cd        IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_failinfo        IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_ispart_       IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_report_at_eom_ind        IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_billdate          IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_locindentity_no        IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_instruct_person       IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_dealcd          IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_instr_code          IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_currencycode         IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_classofdl       IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_origindentity_no       IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_newdt         IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_maker           IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_maker_dt         IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_deal_status    IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_access_stamp    IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_info1           IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_loccode        IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_reginstr_ind        IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_pos_stat     IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_status_reg       IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_confdate          IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_matchindentity_no      IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_markfaildate      IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_candropdate       IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_checker         IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_checker_dt       IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_instrconv_ind       IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_ndsbldate         IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_lrdltype       IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_ndsdate           IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_ublckdate         IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_delrecdate        IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_lastregdate       IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_lr_chkdate        IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_lr_confdate       IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_lr_instrdate        IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_tmpoutdate        IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_tmpretdate        IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_transmitdate      IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_hostdate          IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_lr_ndsbldate      IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_lr_ndsdate        IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_lr_ublckdate      IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_clt_reqdel_flag  IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_mod_hispos_ind    IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_updhispos_date    IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_instruct_personnm   	 IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_clientofcode   IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_inter_med_person    	 IS STRING;
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_inter_med_personnm     IS STRING; 
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_fxccy     IS STRING; 
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_exp_setl_date     IS STRING; 
  EXEC SQL VAR l_sys_dl_deal_struct_hk->h_misinfo         IS STRING; 

  EXEC SQL VAR l_dl_deal_oth_struct_ha->h_dl_client         IS STRING; 
  EXEC SQL VAR l_dl_deal_oth_struct_ha->h_indentity_no	         IS STRING; 
  EXEC SQL VAR l_dl_deal_oth_struct_ha->h_locindentity_no        IS STRING; 
  EXEC SQL VAR l_dl_deal_oth_struct_ha->h_clt_reqdel_flag  IS STRING; 
  EXEC SQL VAR l_dl_deal_oth_struct_ha->h_access_stamp    IS STRING; 
  EXEC SQL VAR l_dl_deal_oth_struct_ha->h_dealcd          IS STRING; 
  EXEC SQL VAR l_dl_deal_oth_struct_ha->h_dlt            IS STRING; 
  EXEC SQL VAR l_dl_deal_oth_struct_ha->h_setldt        IS STRING; 
  EXEC SQL VAR l_dl_deal_oth_struct_ha->h_classofdl       IS STRING; 
  EXEC SQL VAR l_dl_deal_oth_struct_ha->h_domcpclt_cd         IS STRING; 
  EXEC SQL VAR l_dl_deal_oth_struct_ha->h_custinfo        IS STRING; 
  EXEC SQL VAR l_dl_deal_oth_struct_ha->h_lr_ndsdate        IS STRING; 
  
  EXEC SQL VAR chr_l_auto_canc_flg        IS STRING; 
  EXEC SQL VAR chr_l_settledt_a		        IS STRING; 

  memset(chr_l_auto_canc_flg,APL_NULL_CHAR,sizeof(chr_l_auto_canc_flg));
  memset(chr_l_settledt_a,APL_NULL_CHAR,sizeof(chr_l_settledt_a));
  memset(chr_l_h_rowid,APL_NULL_CHAR,sizeof(chr_l_h_rowid));


	
	l_sys_dl_deal_struct_hk	=(SYS_DL_DEAL_STRUCT_H *)calloc(1, sizeof(SYS_DL_DEAL_STRUCT_H));
	APL_MALLOC_FAIL(l_sys_dl_deal_struct_hk);
	l_sys_dl_deal_struct_ia	=(SYS_DL_DEAL_STRUCT_I *)calloc(1, sizeof(SYS_DL_DEAL_STRUCT_I));
	APL_MALLOC_FAIL(l_sys_dl_deal_struct_ia);
	l_dl_deal_oth_struct_ha =(DL_DEAL_OTH_STRUCT_H *)calloc(1, sizeof(DL_DEAL_OTH_STRUCT_H));
	APL_MALLOC_FAIL(l_dl_deal_oth_struct_ha);

	l_dl_dealaudit_struct_ha = (DL_DEALAUDIT_STRUCT_H*)calloc(1,sizeof(DL_DEALAUDIT_STRUCT_H) );
   APL_MALLOC_FAIL(l_dl_dealaudit_struct_ha);

	

	CO_ProcMonitor(p_logfile, "Entered Function CDBAutoCancelFn", NULL, p_intl_envdatastruct_h);
	memset(chr_l_buf, NULL, BUFFER_LEN);

	if ( APL_FAILURE == CO_Chk_CntryEnabled( "TRD_PROCESSING",
														"AUTO_CANCEL",
														&int_l_condexists_A,
														l_debug_info_ptr ))
	{
		CO_ProcMonitor(p_logfile, "Errors in cntry condn", NULL, p_intl_envdatastruct_h);
		fflush(p_logfile);
		APL_GOBACK_FAIL
	}

	if(!int_l_condexists_A)
	{
		CO_ProcMonitor(p_logfile, "Auto Cancel Feature not available", NULL, p_intl_envdatastruct_h);
		fflush(p_logfile);
		APL_GOBACK_FAIL
	}
	
	if(CO_RtvSysDt(chr_l_today, l_debug_info_ptr) == APL_FAILURE)
	{
		APL_GOBACK_FAIL;
	}

	if (APL_SUCCESS != CO_Rtv_FldVal( "TRD_PROCESSING",
												  "AUTO_CANCEL",
												  &chr_l_str_count_days,
												  l_debug_info_ptr))
	{
		APL_GOBACK_FAIL
   }

	fprintf(p_logfile,"No.Of Days as Crieria=%s\n",chr_l_str_count_days);
		fflush(p_logfile);

	int_l_int_count_days=atoi(chr_l_str_count_days);

	if( (strlen(chr_l_str_count_days)==0) || (int_l_int_count_days==0) )
	{
	 fprintf(p_logfile,"Deletion Days Parameter Not Set\n");
	 APL_GOBACK_FAIL
	}

	

   EXEC SQL SELECT PROCESSING_STATUS  INTO :chr_g_restart_data:g_restart_data_i
   FROM SYS_BATCHPROC
   WHERE PROCESS_NAME=:argv[0]
   AND   PROC_INIT=:argv[1]
   AND   STARTDATE=:argv[2]
   AND   STATUS='started'
   FOR UPDATE OF PROCESSING_STATUS,STATUS;

   if(APL_ZERO_RESULT_SET) 
	{
      CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
      APL_GOBACK_FAIL
   }

   IS_ANY_ORA_ERROR

	

	

	if (APL_FAILURE == CO_RtvSysDtTime(	chr_l_now,
															l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	if (APL_FAILURE == CO_Rtv_RptFileName(	"CREDIT_IND",
													"Canceled Trades Report",
													100,
													p_intl_envdatastruct_h->processtion,
													argv,
													&l_fp_cancel,
													l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	fprintf(l_fp_cancel,"\nCancelled Trades Report\n");
	fprintf(l_fp_cancel,"%s\n\n\n",chr_l_now);
	for ( i=0; i<=75 ;i++)	
		fprintf( l_fp_cancel,"-" );
	fprintf( l_fp_cancel,"\n" );

	fprintf( l_fp_cancel,"%8s%20s%20s%20s\n","Sr.No.", "Account","Reference No.","Settlement Date" );
	for ( i=0; i<=75 ;i++)	
		fprintf( l_fp_cancel,"-" );
	fprintf( l_fp_cancel,"\n\n" );

	
	EXEC SQL DECLARE cur_auto_cancel CURSOR FOR 
	SELECT DL_DEAL.*, rowid FROM DL_DEAL
	WHERE to_date(:chr_l_today, 'DD/MM/YYYY HH24:MI:SS') - setl_date >= :int_l_int_count_days
	AND DEAL_STAT IN ('AA','UU')
	AND (  ( DEAL_CD IN ( '1','3' ) ) OR 
			 ( DEAL_CD IN ( '2','4') AND NVL(FAILREASON_CD,' ') NOT IN ('03','04')) )
	ORDER BY CLIENT, INSTR_CODE
	FOR UPDATE;

	IS_ANY_ORA_ERROR

	EXEC SQL OPEN cur_auto_cancel;
	IS_ANY_ORA_ERROR
	
	for(;;)
	{
		memset(l_sys_dl_deal_struct_hk,NULL,sizeof(SYS_DL_DEAL_STRUCT_H));  
		memset(l_sys_dl_deal_struct_ia,NULL,sizeof(SYS_DL_DEAL_STRUCT_I));
			
		EXEC SQL FETCH cur_auto_cancel INTO :l_sys_dl_deal_struct_hk:l_sys_dl_deal_struct_ia , :chr_l_h_rowid; 
		IS_ANY_ORA_ERROR

		if (sqlca.sqlcode == 1403)
		{
			if(int_l_count==0)
			{
			 fprintf(l_fp_cancel,"No Trades Found For Automatic Cancellation\n");
			}

			for ( i=0; i<=75 ;i++)	
			 fprintf( l_fp_cancel,"-" );
			 fprintf( l_fp_cancel,"\n" );
			break;
		}
	
		IS_ANY_ORA_ERROR;

		
	 	EXEC SQL SELECT CLN_AUTO_CANC_IND INTO :chr_l_auto_canc_flg:i_auto_canc_flag FROM MT_CLIENT
	 	WHERE CLN_CODE=( SELECT CLN_MASTER FROM MT_CLIENT WHERE CLN_CODE=:l_sys_dl_deal_struct_hk->h_dl_client ) ;
		
	 	IS_ANY_ORA_ERROR

	 	if( strcmp(chr_l_auto_canc_flg,"Y" ) != 0 )
			continue;

		int_l_rec_count ++;
		int_l_count	++;

		EXEC SQL SELECT SUBSTR(:l_sys_dl_deal_struct_hk->h_setldt,1,10) INTO :chr_l_settledt_a FROM DUAL;
		IS_ANY_ORA_ERROR

		strcpy(l_dl_deal_oth_struct_ha->h_dl_client,				l_sys_dl_deal_struct_hk->h_dl_client);
		strcpy(l_dl_deal_oth_struct_ha->h_indentity_no,				l_sys_dl_deal_struct_hk->h_indentity_no);
		strcpy(l_dl_deal_oth_struct_ha->h_locindentity_no,			l_sys_dl_deal_struct_hk->h_locindentity_no);
		strcpy(l_dl_deal_oth_struct_ha->h_clt_reqdel_flag, 	l_sys_dl_deal_struct_hk->h_clt_reqdel_flag);
		strcpy(l_dl_deal_oth_struct_ha->h_access_stamp,		l_sys_dl_deal_struct_hk->h_access_stamp );
		strcpy(l_dl_deal_oth_struct_ha->h_dealcd, 				l_sys_dl_deal_struct_hk->h_dealcd );
		strcpy(l_dl_deal_oth_struct_ha->h_dlt, 				l_sys_dl_deal_struct_hk->h_dlt );
		strcpy(l_dl_deal_oth_struct_ha->h_setldt, 			l_sys_dl_deal_struct_hk->h_setldt);
		strcpy(l_dl_deal_oth_struct_ha->h_classofdl, 			l_sys_dl_deal_struct_hk->h_classofdl);
		l_dl_deal_oth_struct_ha->h_amt 						= l_sys_dl_deal_struct_hk->h_amt;
		l_dl_deal_oth_struct_ha->h_pr							= l_sys_dl_deal_struct_hk->h_pr;
		strcpy(l_dl_deal_oth_struct_ha->h_domcpclt_cd,				l_sys_dl_deal_struct_hk->h_domcpclt_cd);
		strcpy(l_dl_deal_oth_struct_ha->h_custinfo,			l_sys_dl_deal_struct_hk->h_custinfo);
		strcpy(l_dl_deal_oth_struct_ha->h_lr_ndsdate,			l_sys_dl_deal_struct_hk->h_lr_ndsdate);

		strcpy(p_intl_envdatastruct_h->h_mode,   APL_FUNC_DELETE);
		strcpy(p_intl_envdatastruct_h->usr, "SYSTEM");

		if ( APL_FAILURE==DL_Mod_DLPos(l_dl_deal_oth_struct_ha,chr_l_h_rowid,p_intl_envdatastruct_h,l_debug_info_ptr) )
			 APL_GOBACK_FAIL


		
		
   	strcpy(l_dl_dealaudit_struct_ha->h_dl_client, 		l_sys_dl_deal_struct_hk->h_dl_client);
   	strcpy(l_dl_dealaudit_struct_ha->h_indentity_no, 			l_sys_dl_deal_struct_hk->h_indentity_no);
   	strcpy(l_dl_dealaudit_struct_ha->h_trail_for, 		"T");
   	strcpy(l_dl_dealaudit_struct_ha->h_processdetail, 		"Automatic Cancellation");
   	strcpy(l_dl_dealaudit_struct_ha->h_proc_usr, 		"SYSTEM");
   	strcpy(l_dl_dealaudit_struct_ha->h_subprocess, 			APL_NULL_STRING);
   	strcpy(l_dl_dealaudit_struct_ha->h_fail_cd, 		APL_NULL_STRING);
   	l_dl_dealaudit_struct_ha->h_qty 						= l_sys_dl_deal_struct_hk->h_qty;
   	strcpy(l_dl_dealaudit_struct_ha->h_dlfromord,    l_sys_dl_deal_struct_hk->h_dlfromord); 

   	if ( APL_FAILURE == CR_Mod_CLHAudTrail(l_dl_dealaudit_struct_ha, l_debug_info_ptr) )
   	{
      	APL_GOBACK_FAIL;
   	}
	
		fprintf( l_fp_cancel,"%8d%20s%20s%20s\n",int_l_count,l_sys_dl_deal_struct_hk->h_dl_client, l_sys_dl_deal_struct_hk->h_indentity_no, chr_l_settledt_a );

		if(int_l_rec_count == COMMIT_COUNT_G)
		{
			CO_ProcMonitor(p_logfile, "Record Committed", NULL, NULL);

			memset(chr_l_buf, NULL, BUFFER_LEN);
			sprintf(chr_l_buf, "Processed %d records", int_l_count);

			EXEC SQL UPDATE SYS_BATCHPROC
			SET STAT_DET = :chr_l_buf
   		WHERE PROCESS_NAME=:argv[0]
  		 	AND   PROC_INIT=:argv[1]
   		AND   STARTDATE=:argv[2]
   		AND   STATUS='started';

   		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_REC_NOTFND, "Batch_in_proc Rec", APL_NULL_STRING, APL_NULL_STRING )

			EXEC SQL COMMIT WORK;
			IS_ANY_ORA_ERROR;
			int_l_rec_count		=0;

			

  		 	EXEC SQL SELECT PROCESSING_STATUS  INTO :chr_g_restart_data:g_restart_data_i
   		FROM SYS_BATCHPROC
   		WHERE PROCESS_NAME=:argv[0]
   		AND   PROC_INIT=:argv[1]
   		AND   STARTDATE=:argv[2]
   		AND   STATUS='started'
   		FOR UPDATE OF PROCESSING_STATUS,STATUS;

   		if(APL_ZERO_RESULT_SET) 
			{
      		CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
      		APL_GOBACK_FAIL
   		}

   		IS_ANY_ORA_ERROR

			EXEC SQL OPEN cur_auto_cancel;
			IS_ANY_ORA_ERROR

		}

	} 


	EXEC SQL CLOSE cur_auto_cancel;
	IS_ANY_ORA_ERROR;

	CO_ProcMonitor(p_logfile, "Record Committed", NULL, NULL);

	memset(chr_l_buf, NULL, BUFFER_LEN);
	sprintf(chr_l_buf, "Processed %d records", int_l_count);

	EXEC SQL UPDATE SYS_BATCHPROC
	SET STAT_DET = :chr_l_buf WHERE PROCESS_NAME=:argv[0] AND   PROC_INIT=:argv[1] AND   STARTDATE=:argv[2] AND   STATUS='started';

   IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_REC_NOTFND, "Batch_in_proc Rec", APL_NULL_STRING, APL_NULL_STRING )

	APL_GOBACK_SUCCESS


   RETURN_SUCCESS :

		CO_FreeErrLst(l_debug_info_ptr);
		if (APL_FAILURE == CO_Proc_RptClose(	l_fp_cancel, l_debug_info_ptr)) 
		{
			APL_GOBACK_FAIL
		}
		APL_FREE(l_sys_dl_deal_struct_hk);
		APL_FREE(l_sys_dl_deal_struct_ia);
		APL_FREE(l_dl_deal_oth_struct_ha);
      CO_ProcMonitor(p_logfile, "Leaving Function DL_Proc_AutoBrkCancel successfully", NULL, p_intl_envdatastruct_h);
      return(APL_SUCCESS);

   RETURN_FAILURE :

		if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		{
			CO_ProcMonitor(p_logfile, "Got Errors : ", l_debug_info_ptr, p_intl_envdatastruct_h);
			CO_FreeErrLst(l_debug_info_ptr);
		}
		APL_FREE(l_sys_dl_deal_struct_hk);
		APL_FREE(l_sys_dl_deal_struct_ia);
		APL_FREE(l_dl_deal_oth_struct_ha);
      CO_ProcMonitor(p_logfile, "Leaving Function DL_Proc_AutoBrkCancel with errors", NULL, p_intl_envdatastruct_h);
		CO_Proc_RptClose(l_fp_cancel, l_debug_info_ptr); 
		EXEC SQL ROLLBACK WORK;
		IS_ANY_ORA_ERROR;
      return(APL_FAILURE);

}





//main(int argc,char **argv)
int main(int argc,char **argv)//Changes done for AIX Migration
{
	struct sqlca sqlca;
   DEBUG_INFO_STRUCT_H *l_debug_info_ptr=NULL ;
	INTL_ENV_DATA_STRUCT_H l_intl_env_data_h;
	FILE *l_finifile = NULL;
	FILE *l_flogfile = NULL;

   int int_l_retval=0;
	int int_num = 0;

   char chr_uname[APL_USERID_LEN] = APL_NULL_STRING;
   char chr_custody_id_b[APL_USERID_LEN] = APL_NULL_STRING;
   char chr_passwd[APL_PASSWD_LEN] = APL_NULL_STRING;
	char chr_l_logdir[PATH_LENGTH] = APL_NULL_STRING;
	char chr_l_inifile[PATH_LENGTH] = APL_NULL_STRING;

   EXEC SQL VAR chr_uname IS STRING;
   EXEC SQL VAR chr_custody_id_b IS STRING;
   EXEC SQL VAR chr_passwd IS STRING;

	sqlca.sqlcode = 0;

	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

	if ( ( l_finifile=fopen(chr_l_inifile,"r") ) == NULL)
	{
		APL_GOBACK_FAIL
	}

	

	APL_FETCH_DB_LOGIN_DETAILS(l_finifile, chr_custody_id_b, chr_uname, chr_passwd, APL_OUT_FILE, &l_debug_info_ptr)

   EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;

   if (sqlca.sqlcode)
   {
      APL_GOBACK_FAIL
   }
   else
   {
		

		if (APL_FAILURE == CO_Rtv_RptFileName(	"3Z",
														APL_LOGFILE_DESC,
														100,
														argv[5],
														argv,
														&l_flogfile,
														&l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL
		}

		

		EXEC SQL COMMIT WORK;

		if (sqlca.sqlcode)
		{
			CO_ProcMonitor(l_flogfile, "Could not commit after opening chr_log file", NULL, NULL);
			CO_Proc_RptClose(l_flogfile, &l_debug_info_ptr);
			APL_GOBACK_FAIL
		}

		

		if (APL_FAILURE == CO_RtvSysParams(&l_debug_info_ptr))
		{
			CO_ProcMonitor(l_flogfile, "Failure from GetSysParams", &l_debug_info_ptr, NULL);
			CO_Proc_RptClose(l_flogfile, &l_debug_info_ptr);
			APL_GOBACK_FAIL
		}

		

		strcpy(l_intl_env_data_h.usr, argv[3]);
		strcpy(l_intl_env_data_h.h_mode, argv[4]);
		strcpy(l_intl_env_data_h.processtion, argv[5]);
		strcpy(l_intl_env_data_h.auth_req, argv[6]);
		strcpy(l_intl_env_data_h.subprocess, argv[7]);
		strcpy(l_intl_env_data_h.h_process, argv[8]);

      int_l_retval = DL_Proc_AutoBrkCancel( argv, l_flogfile, &l_intl_env_data_h, &l_debug_info_ptr);
      if ( int_l_retval == APL_FAILURE )
      {
			CO_ProcMonitor(l_flogfile, "CDBAutoCancelFn returned failure", NULL, NULL);
			CO_Proc_RptClose(l_flogfile, &l_debug_info_ptr);
			EXEC SQL ROLLBACK WORK RELEASE;
         APL_GOBACK_FAIL
      }
      else
      {
         EXEC SQL UPDATE SYS_BATCHPROC
         SET  status = 'completed'
         WHERE PROCESS_NAME=:argv[0]
         AND   PROC_INIT=:argv[1]
         AND   STARTDATE=:argv[2]
         AND   STATUS='started';

         EXEC SQL COMMIT WORK RELEASE;
			CO_Proc_RptClose(l_flogfile, &l_debug_info_ptr);
         APL_GOBACK_SUCCESS
      }
   }

	RETURN_SUCCESS : exit(0);
	RETURN_FAILURE : exit(-1);
}
