














#include "stdio_64.h"
#include <time.h>
#include "Intellect_Common.h"
#include "Intellect_Error.h"
#include "CR_Common.h"
#include "SMP_InterFace.h"
#include "cmqc.h"

EXEC SQL INCLUDE SQLCA;



DEBUG_INFO_STRUCT_H **l_debug_info_ptr;
DEBUG_INFO_STRUCT_H *l_debuginfo 				= (DEBUG_INFO_STRUCT_H *)NULL;

main(int argc,char **argv)
{

	
	extern int MS_Rtv_SMPPendTxn(EI_MQ_DATA_STRUCT_H *,char *,char *,char *, DEBUG_INFO_STRUCT_H **);
	extern int MS_Proc_PutMsg(EI_MQ_DATA_STRUCT_H *,MQHCONN,MQHOBJ,FILE *,MQLONG *,DEBUG_INFO_STRUCT_H **);
	extern int MQGetConn(char *, char *, MQHCONN *, MQHOBJ *, char *);

	
	struct sqlca sqlca;
	struct timespec interval,int_remainder;
	char chr_l_sys_date_time[APL_DATE_LEN] 			= {APL_NULL_STRING};
	FILE *chr_finifile;
	char chr_inifile[PATH_LENGTH],chr_l_uname[APL_USERID_LEN],chr_l_passwd[APL_PASSWD_LEN],chr_custody_id_b[APL_USERID_LEN],chr_buffer[KEY_LENGTH];
	char chr_l_client_a[APL_CLIENT_LENGTH], chr_l_refno_a[APL_TXNREFNO_LEN], chr_mtemp[100],chr_l_eodflag[2], chr_l_reqtype[2];
	EI_MQ_DATA_STRUCT_H l_ei_mq_data_struct_h;
	float flt_l_sleep_interval	= 0.25;	
	int	int_l_count;

	
	MQHCONN	Hcon;
	MQHOBJ	Hobj;
	MQLONG	Reason;
	MQLONG	CompCode;
	char     chr_qmname[QUEUE_MANAGER_LEN]        =  {APL_NULL_STRING};
   char     queue_name[QUEUE_LEN]                 =  {APL_NULL_STRING};

	
	
	memset(chr_inifile,APL_NULL_CHAR,PATH_LENGTH);
	memset(chr_buffer,APL_NULL_CHAR,KEY_LENGTH);
	memset(chr_l_uname,APL_NULL_CHAR,40);
	memset(chr_l_passwd,APL_NULL_CHAR,40);
	memset(chr_l_eodflag,APL_NULL_CHAR,2);
	memset(&l_ei_mq_data_struct_h,APL_NULL_CHAR,sizeof(EI_MQ_DATA_STRUCT_H));
	memset(chr_l_client_a,APL_NULL_CHAR,APL_CLIENT_LENGTH);
	memset(chr_l_refno_a,APL_NULL_CHAR,APL_TXNREFNO_LEN);
	memset(chr_l_reqtype,APL_NULL_CHAR,2);


	EXEC SQL VAR	chr_l_client_a									IS STRING;
	EXEC SQL VAR	chr_l_refno_a										IS STRING;
	EXEC SQL VAR	chr_l_reqtype									IS STRING;
	EXEC SQL VAR	chr_l_sys_date_time							IS STRING;
	EXEC SQL VAR	chr_l_eodflag									IS STRING;

	
	strcpy(chr_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_inifile,"/intl_sun.cfg");
	if ((chr_finifile = fopen(chr_inifile,"r")) == NULL)
      APL_GOBACK_FAIL;

	interval.tv_sec = 0.0;
   if (argc > 1)
   {
      interval.tv_nsec = atof(argv[1]) * 1000000000;
      flt_l_sleep_interval = atof(argv[1]);
   }
   else
   {
      CO_ProcMonitor(APL_OUT_FILE,"Invalid Polling Interval...",NULL,NULL);
      APL_GOBACK_FAIL
      
   }

	sqlca.sqlcode = 0;
	APL_FETCH_DB_LOGIN_DETAILS(chr_finifile, chr_custody_id_b, chr_l_uname, chr_l_passwd , APL_OUT_FILE , &l_debuginfo)
	EXEC SQL CONNECT :chr_l_uname IDENTIFIED BY :chr_l_passwd;
	if(sqlca.sqlcode < 0)
	{
		ltoa_r(sqlca.sqlcode,chr_buffer,KEY_LENGTH-1); 
   	CO_InsertErr(&l_debuginfo,DB_ERR_NO,chr_buffer,
              APL_NULL_STRING,APL_NULL_STRING,
              __LINE__,__FILE__);
		printf("Database Connection Failed with sqlcode %d\n",sqlca.sqlcode);
		APL_GOBACK_FAIL
	}

	sqlca.sqlcode - 0;
	EXEC SQL COMMIT WORK;
   if(sqlca.sqlcode < 0)
   {
     ltoa_r(sqlca.sqlcode,chr_buffer,KEY_LENGTH-1);
     CO_InsertErr(&l_debuginfo,DB_ERR_NO,chr_buffer,
     APL_NULL_STRING,APL_NULL_STRING,
                __LINE__,__FILE__);
     APL_GOBACK_FAIL
	}
	
	sqlca.sqlcode = 0;
	EXEC SQL SELECT to_char(SYS_DATE,'ddmmyyyy') INTO :chr_l_sys_date_time FROM PRO_SYS_DATE;
	if(sqlca.sqlcode < 0)
   {
      ltoa_r(sqlca.sqlcode,chr_buffer,KEY_LENGTH-1);
      CO_InsertErr(&l_debuginfo,DB_ERR_NO,chr_buffer,
              APL_NULL_STRING,APL_NULL_STRING,
              __LINE__,__FILE__);
		printf("Database Query Failed with sqlcode %d\n",sqlca.sqlcode);
      APL_GOBACK_FAIL
   }
	
	
	if (CO_ReadToken(chr_finifile,"INTL_EI_SMI_ADM",chr_qmname,l_debug_info_ptr) == APL_FAILURE)
      APL_GOBACK_FAIL
   if(!strlen(chr_qmname))
      APL_GOBACK_FAIL

   if (CO_ReadToken(chr_finifile,"INTL_MS_OUT_Q",queue_name,l_debug_info_ptr) == APL_FAILURE)
      APL_GOBACK_FAIL
   if(!strlen(queue_name))
      APL_GOBACK_FAIL

	if (MQGetConn(chr_qmname,queue_name,&Hcon,&Hobj,"O") == APL_FAILURE)
      APL_GOBACK_FAIL

	


	printf("****************************************************\n");
  	printf("SMP Trans Server started with sleep interval %s.....\n",argv[1]);
	printf("****************************************************\n");
	int_l_count = 0;																					
	while(1)
	{
		sqlca.sqlcode = 0;
      EXEC SQL SELECT eod_ind INTO :chr_l_eodflag FROM PRO_SYS_DATE;
      if (sqlca.sqlcode < 0)
      {
         ltoa_r(sqlca.sqlcode,chr_buffer,KEY_LENGTH-1);
         CO_InsertErr(&l_debuginfo,DB_ERR_NO,chr_buffer,
                APL_NULL_STRING,APL_NULL_STRING,
                          __LINE__,__FILE__);
			printf("Database Query Failed with sqlca h_code %d\n",sqlca.sqlcode);
			APL_GOBACK_FAIL
      }
      if (strcmp(chr_l_eodflag,"O") != 0)
      {
         
         if (flt_l_sleep_interval >= 1.0)
			{
            sleep((int)flt_l_sleep_interval);
			}
         else
			{
            nanosleep(&interval,&int_remainder);
			}
      }
		else
		{
			if (APL_FAILURE == MS_Rtv_SMPPendTxn(&l_ei_mq_data_struct_h,chr_l_client_a,chr_l_refno_a,chr_l_reqtype,&l_debuginfo))
			{
				if (int_l_count >= 5)
				{
					CO_ProcMonitor(APL_OUT_FILE,"Unexpected Error...Ending SMP_Trans Server process\n\n",NULL,NULL);
					APL_GOBACK_FAIL
				}
				else
				{	
					int_l_count += 1;
					if (flt_l_sleep_interval >= 1.0)
					{
						sleep((int)flt_l_sleep_interval);
					}
					else
					{
        				nanosleep(&interval,&int_remainder);
					}
				}
			}
			else
			{
				int_l_count = 0;
				if (strcmp(l_ei_mq_data_struct_h.status_ind,"S") != 0)
				{
					if (flt_l_sleep_interval >= 1)
					{
            		sleep((int)flt_l_sleep_interval);
					}
         		else
					{
        				nanosleep(&interval,&int_remainder);
					}
				}
				else
				{
					CO_ProcMonitor(APL_OUT_FILE,"Record successfully retrieved from SMI_Pendtxn table",NULL,NULL);
					sprintf(chr_mtemp,"Current SMAC Account No. : %s",chr_l_client_a);
					CO_ProcMonitor(APL_OUT_FILE,chr_mtemp,NULL,NULL);
					strcpy(chr_mtemp,APL_NULL_STRING);
					sprintf(chr_mtemp,"Current Reference No. : %s",chr_l_refno_a);
					CO_ProcMonitor(APL_OUT_FILE,chr_mtemp,NULL,NULL);
					strcpy(chr_mtemp,APL_NULL_STRING);
					if (APL_FAILURE == MS_Proc_PutMsg(&l_ei_mq_data_struct_h,Hcon,Hobj,chr_finifile,&Reason,&l_debuginfo))
					{	
						CO_ProcMonitor(APL_OUT_FILE,"Message delivery to MQ Queue failed\n\n",NULL,NULL);
            		if (flt_l_sleep_interval >= 1)
						{
              			sleep((int)flt_l_sleep_interval);
						}
            		else
						{
        					nanosleep(&interval,&int_remainder);
						}
						if ((Reason == MQRC_CONNECTION_BROKEN) || (Reason == MQRC_HCONN_ERROR) || (Reason == MQRC_HOBJ_ERROR))
            		{
               		MQCLOSE(Hcon,&Hobj,MQCO_NONE,&CompCode,&Reason);
               		{
                  		sprintf(chr_mtemp,"MQ Close ended with reason %ld",Reason);
                  		CO_ProcMonitor(APL_OUT_FILE,chr_mtemp,NULL,NULL);
               		}
               		MQDISC(&Hcon,&CompCode,&Reason);
               		{
                  		sprintf(chr_mtemp,"MQ Disc ended with reason %ld",Reason);
                  		CO_ProcMonitor(APL_OUT_FILE,chr_mtemp,NULL,NULL);
               		}
							sleep(10);
               		CO_ProcMonitor(APL_OUT_FILE,"Attempting to reconnect to MQ Server...",NULL,NULL);
               		if (MQGetConn(chr_qmname,queue_name,&Hcon,&Hobj,"O") == APL_FAILURE)
                  		APL_GOBACK_FAIL
            		}
					}
					else
					{
						sqlca.sqlcode = 0;
						EXEC SQL UPDATE DL_SMI_PENDTXN SET DEAL_STAGE = 'T' WHERE 
						client = :chr_l_client_a AND IDENTIY_NO = :chr_l_refno_a and SMI_REQUEST_TYPE = :chr_l_reqtype
						AND DEAL_STAGE = 'A';
						if(sqlca.sqlcode < 0)
   					{
     						ltoa_r(sqlca.sqlcode,chr_buffer,KEY_LENGTH-1);
     						CO_InsertErr(&l_debuginfo,DB_ERR_NO,chr_buffer,
                 				APL_NULL_STRING,APL_NULL_STRING,
                					 __LINE__,__FILE__);
							printf("Database Update failed with sqlcode %d\n",sqlca.sqlcode);
						}
						sqlca.sqlcode = 0;
						EXEC SQL COMMIT WORK;
						CO_ProcMonitor(APL_OUT_FILE,"Transaction commited in the SMI_Pendtxn table\n\n",NULL,NULL);
            		if (flt_l_sleep_interval >= 1)
						{
              			sleep(flt_l_sleep_interval);
						}
            		else
						{
        					nanosleep(&interval,&int_remainder);
						}
					}
				}
			}
		}
	}


	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS:
		EXEC SQL COMMIT ;
		CO_ProcMonitor(APL_OUT_FILE,"Exiting successfully from SMP_Trans Server\n\n",NULL,NULL);
      MQCLOSE(Hcon,&Hobj,MQCO_NONE,&CompCode,&Reason);
      MQDISC(&Hcon,&CompCode,&Reason);
   	fclose(chr_finifile);
   	exit(0);

	RETURN_FAILURE:
   	EXEC SQL ROLLBACK;
		CO_ProcMonitor(APL_OUT_FILE,"Exiting unsuccessfully from SMP_Trans Server\n\n",NULL,NULL);
      MQCLOSE(Hcon,&Hobj,MQCO_NONE,&CompCode,&Reason);
      MQDISC(&Hcon,&CompCode,&Reason);
   	fclose(chr_finifile);
   	exit(-1);
}

