/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
*/
/*********************************************************************
 *
 * Module Name         :      Master Maintenance
 *
 * File Name           :      WI_UpdCln_Mapping.pc
 *
 * Description         :      This file contains db functions for updating
 *                            Master Details.
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author         Description       RFS No.
 * ---------   --------  ------------     -------------     ---------
 * 26/02/2007   1.0       HARVINDER        New file       RFS_CLN_MAP_001
 *
 *********************************************************************/


#include "CO_HostStructdef.h"

EXEC SQL INCLUDE SQLCA.H;




int WI_ModDb_CLIENT_MAP(WI_CLIENT_MAP_STRUCT_H *p_wi_client_map_struct_h,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr) 
{
	/* Variable Declarations */
  WI_CLIENT_MAP_STRUCT_I *l_wi_client_map_struct_i;

  struct sqlca sqlca;

  char chr_acc_stamp_compare[APL_DATE_LEN] = APL_NULL_STRING;
  // char chr_status_compare[APL_STATUS_LEN] = APL_NULL_STRING;
  char chr_sys_access_stamp[APL_DATE_LEN] = APL_NULL_STRING;
  short p_i_maker, p_i_access_stamp; 
  // short p_i_makerdt, p_i_checker, p_i_checkerdt;

  short p_i_access_stamp_compare;
  // short p_i_status = 0;
  int int_error_flag = APL_SUCCESS;
  int int_l_rowexists = 0;
   char  *l_key_codes[2];
   char  *l_key_values[2];
   char  chr_l_table_name[50] = APL_NULL_STRING;
	char  chr_l_field_val[40] = APL_NULL_STRING;
	int l_count = 0;
	int l_count1 = 0;
	int l_count_clncode = 0;
	int l_count_clncode1 = 0;


		int	int_retval = APL_SUCCESS;
#ifdef APL_THREADS
    APL_SET_CONTEXT
    EXEC SQL CONTEXT USE :my_ctx_local;
#endif

	 APL_FUNCTION_ENTER(APL_OUT_FILE)

  l_wi_client_map_struct_i=(WI_CLIENT_MAP_STRUCT_I*)calloc(1,sizeof(WI_CLIENT_MAP_STRUCT_I));

  APL_MALLOC_FAIL(l_wi_client_map_struct_i)

  p_i_maker =0;
  // p_i_makerdt =0;
  // p_i_checker =0;
  // p_i_checkerdt =0;
  p_i_access_stamp =0;
  p_i_access_stamp_compare =0;


 if(CO_RtvSysDtTime(chr_sys_access_stamp,l_debug_info_ptr) !=APL_SUCCESS)
	{
		APL_GOBACK_FAIL
	}
	
 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_INPUT))
	{

		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered Input of Function WI_ModDb_CLIENT_MAP\n",
													NULL,p_intl_envdatastruct_h);
 	}
		
	/* To get the Client master code */
/* Changes done by Amit Nair for Modify option */
	EXEC SQL SELECT CLN_MASTER INTO :p_wi_client_map_struct_h->h_cln_master FROM MT_CLIENT 
		WHERE CLN_CODE = :p_wi_client_map_struct_h->h_cln_code;

		/* strcpy(p_wi_client_map_struct_h->h_status,STATUS_UAUTH);
    	l_wi_client_map_struct_i->i_status =0; */

   	strcpy(p_wi_client_map_struct_h->h_maker,p_intl_envdatastruct_h->usr);
		l_wi_client_map_struct_i->i_maker=0;
  		
		/* strcpy(p_wi_client_map_struct_h->h_maker_dt,chr_sys_access_stamp);
		l_wi_client_map_struct_i->i_maker_dt=0; */

		strcpy(p_wi_client_map_struct_h->h_access_stamp,chr_sys_access_stamp);
		l_wi_client_map_struct_i->i_access_stamp =0;

		printf("\n ******************************* BAWA ***********************************************\n");
		printf("\n cln_code ->  |%s|\n",p_wi_client_map_struct_h->h_cln_code);
		printf("\n cln_master ->  |%s|\n",p_wi_client_map_struct_h->h_cln_master);
		printf("\n wi_login ->  |%s|\n",p_wi_client_map_struct_h->h_wi_login);
		printf("\n login_rights ->  |%s|\n",p_wi_client_map_struct_h->h_login_rights);
		printf("\n auto_auth ->  |%s|\n",p_wi_client_map_struct_h->h_auto_auth);
		printf("\n authorizer ->  |%s|\n",p_wi_client_map_struct_h->h_authorizer);
		printf("\n maker ->  |%s|\n",p_wi_client_map_struct_h->h_maker);
		printf("\n access_stamp ->  |%s|\n",p_wi_client_map_struct_h->h_access_stamp);
		printf("\n ******************************* BAWA ***********************************************\n");



 if (!strlen(p_wi_client_map_struct_h->h_cln_code)) l_wi_client_map_struct_i->i_cln_code =-1;
     else l_wi_client_map_struct_i->i_cln_code =0;

 if (!strlen(p_wi_client_map_struct_h->h_cln_master)) l_wi_client_map_struct_i->i_cln_master =-1;
     else l_wi_client_map_struct_i->i_cln_master =0;
 
 if (!strlen(p_wi_client_map_struct_h->h_wi_login)) l_wi_client_map_struct_i->i_wi_login =-1;
     else l_wi_client_map_struct_i->i_wi_login =0;
 
 if (!strlen(p_wi_client_map_struct_h->h_login_rights)) l_wi_client_map_struct_i->i_login_rights =-1;
     else l_wi_client_map_struct_i->i_login_rights =0;
 
 if (!strlen(p_wi_client_map_struct_h->h_auto_auth)) l_wi_client_map_struct_i->i_auto_auth =-1;
     else l_wi_client_map_struct_i->i_auto_auth =0;

 if (!strlen(p_wi_client_map_struct_h->h_authorizer)) l_wi_client_map_struct_i->i_authorizer =-1;
     else l_wi_client_map_struct_i->i_authorizer =0;

  if (!strlen(p_wi_client_map_struct_h->h_maker)) l_wi_client_map_struct_i->i_maker =-1;
     else l_wi_client_map_struct_i->i_maker =0; 

  if (!strlen(p_wi_client_map_struct_h->h_access_stamp)) l_wi_client_map_struct_i->i_access_stamp =-1;
     else l_wi_client_map_struct_i->i_access_stamp =0; 

		// To know whether the primary record is exist or not
			EXEC SQL SELECT COUNT(*) INTO :l_count FROM WI_CLIENT_MAP
					WHERE LOGIN_RIGHTS= :p_wi_client_map_struct_h -> h_login_rights AND
							WI_LOGIN = :p_wi_client_map_struct_h -> h_wi_login AND
							AUTHORIZER = :p_wi_client_map_struct_h -> h_authorizer:l_wi_client_map_struct_i->i_authorizer;

		// To know whether the WI_LOGIN mapped or not
//Commented By Amit Nair
	/*		EXEC SQL SELECT  COUNT(*) INTO :l_count1 FROM WI_CLIENT_MAP
						WHERE WI_LOGIN = :p_wi_client_map_struct_h -> h_wi_login;
*/
/*
Dated	: 02/05/2007
Author	: Amit Nair
Purpose: To validate whether CRN ID has been already created with Auto-Autorizer flag as true
*/
		EXEC SQL SELECT COUNT(*) INTO :l_count1 FROM WI_CLIENT_MAP
		WHERE WI_LOGIN = :p_wi_client_map_struct_h -> h_wi_login AND 
		LOGIN_RIGHTS = 'MAKER' AND AUTO_AUTH = 'Y';

		printf(" \n *** *** *** *** COUNT = %d *** *** *** ** ** ** \n", l_count);

		if(l_count > 0)
		{
			printf("\n **** IN *** \n");

			if(CO_InsertErr
        		  (l_debug_info_ptr,
               ERR_RECORD_EXIST,
               APL_NULL_STRING,
               APL_NULL_STRING,
               APL_NULL_STRING,
               __LINE__,
               __FILE__
              ) != APL_SUCCESS)
              APL_GOBACK_FAIL	
              APL_GOBACK_FAIL	
		}
		if(l_count1 > 0)
		{
			printf("\n * IN * \n");

			if(CO_InsertErr
        		  (l_debug_info_ptr,
               ERR_CRN_MAPPED,
               APL_NULL_STRING,
               APL_NULL_STRING,
               APL_NULL_STRING,
               __LINE__,
               __FILE__
              ) != APL_SUCCESS)
              APL_GOBACK_FAIL	
              APL_GOBACK_FAIL	

		}
		/* By Harvinder Singh - Log No 1 Web Discussion - 26-04-2007 - Start */
		/* Commented By Amit Nair	
		if(!strcmp(p_wi_client_map_struct_h->h_login_rights,"CHECKER"))
		{
			printf("\n h_login_rights = |%s|",p_wi_client_map_struct_h->h_login_rights);
			// To know whether the Cln_Code is master or sub
			EXEC SQL SELECT COUNT(*) INTO :l_count_clncode FROM MT_CLIENT 
				WHERE CLN_CODE = :p_wi_client_map_struct_h -> h_cln_code 
				AND CLN_CODE = CLN_MASTER ;

			if(l_count_clncode == 0)
			{
				printf("\n * Sub a/c holder should not be Checker * \n");
				if(CO_InsertErr
				  (l_debug_info_ptr,
		               ERR_SUB_ACNT_CHECKER,
		               APL_NULL_STRING,
		               APL_NULL_STRING,
		               APL_NULL_STRING,
		               __LINE__,
		               __FILE__
		              ) != APL_SUCCESS)
		              APL_GOBACK_FAIL	
		              APL_GOBACK_FAIL	
			}
		}

		if(!strcmp(p_wi_client_map_struct_h->h_login_rights,"MAKER"))
		{
			// To know whether the selected Authorizer is correct or not
			EXEC SQL SELECT COUNT(*) INTO :l_count_clncode1 FROM WI_CLIENT_MAP 
				WHERE LOGIN_RIGHTS = 'CHECKER' 
				AND (CLN_CODE = :p_wi_client_map_struct_h -> h_cln_code OR CLN_MASTER = :p_wi_client_map_struct_h->h_cln_master )
				AND WI_LOGIN  IN (:p_wi_client_map_struct_h->h_authorizer) ;

			if(l_count_clncode1 == 0)
			{
				printf("\n * Please select another authorizer * \n");
				if(CO_InsertErr
				  (l_debug_info_ptr,
		               ERR_AUTHRZR_HAV_CHECKER_RGT,
		               APL_NULL_STRING,
		               APL_NULL_STRING,
		               APL_NULL_STRING,
		               __LINE__,
		               __FILE__
		              ) != APL_SUCCESS)
		              APL_GOBACK_FAIL	
		              APL_GOBACK_FAIL	
			}
		}
		*/
		/* By Harvinder Singh - Log No 1 Web Discussion - 26-04-2007 - End */


		
			EXEC SQL INSERT INTO WI_CLIENT_MAP VALUES (:p_wi_client_map_struct_h:l_wi_client_map_struct_i);
			IS_ANY_ORA_ERROR_AND_DUPLICATE(MAP_DET_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	}
	else
	{

	l_key_codes[0]="CLN_CODE";
	l_key_codes[1]="WI_LOGIN";
	l_key_codes[2]=APL_NULL_STRING;
	
	l_key_values[0]=p_wi_client_map_struct_h -> h_cln_code;
	l_key_values[1]=p_wi_client_map_struct_h -> h_wi_login;
	l_key_values[2] = APL_NULL_STRING;

		
   strcpy(chr_l_table_name,"WI_CLIENT_MAP");

	printf("\n *** *** *** *** *** *** *** *** *** \n");

     /* int_retval = CR_Rtv_MastChldChrVal( l_key_codes,
                                        l_key_values,
                                        chr_l_table_name,
                                        "ACCESS_STAMP",
                                        chr_l_field_val,
                                        l_debug_info_ptr);

    if (int_retval != APL_SUCCESS)
         APL_GOBACK_FAIL

		strcpy(chr_acc_stamp_compare,chr_l_field_val); */
    
		/* int_retval = CR_Rtv_MastChldChrVal( l_key_codes,
                                        l_key_values,
                                        chr_l_table_name,
                                        "STATUS",
                                        chr_l_field_val,
                                        l_debug_info_ptr);

    if (int_retval != APL_SUCCESS)
         APL_GOBACK_FAIL 

		strcpy(chr_status_compare,chr_l_field_val); */
	}

 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_MODIFY))
	{
  		// p_i_checker =-1;
  		// p_i_checkerdt =-1;
		// strcpy(p_wi_client_map_struct_h->h_checker,APL_NULL_STRING);
		// strcpy(p_wi_client_map_struct_h->h_checker_dt,APL_NULL_STRING);

		APL_IF_DEBUG
 		{
  			CO_ProcMonitor(APL_OUT_FILE, "Entered modify of Function WI_ModDb_CLIENT_MAP\n",
													NULL,p_intl_envdatastruct_h);
 		}

		// Added by JC for Nair -- 18-05-2007 -- Start
		// To know whether the primary record exists or no
		EXEC SQL SELECT COUNT(*) INTO :l_count FROM WI_CLIENT_MAP
		WHERE LOGIN_RIGHTS= :p_wi_client_map_struct_h -> h_login_rights AND
		WI_LOGIN = :p_wi_client_map_struct_h -> h_wi_login AND
		AUTHORIZER = :p_wi_client_map_struct_h -> h_authorizer:l_wi_client_map_struct_i->i_authorizer;
		IS_ANY_ORA_ERROR

		if(l_count > 0)
		{
			printf("\n **** IN *** \n");

			if(CO_InsertErr(l_debug_info_ptr,
					ERR_RECORD_EXIST,
					APL_NULL_STRING,
					APL_NULL_STRING,
					APL_NULL_STRING,
					__LINE__,
					__FILE__) != APL_SUCCESS)
				APL_GOBACK_FAIL
				APL_GOBACK_FAIL
		}
		// Added by JC for Nair -- 18-05-2007 -- End

	   if (strcmp(p_wi_client_map_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   {
			strcpy(p_wi_client_map_struct_h->h_access_stamp,chr_sys_access_stamp);
			l_wi_client_map_struct_i->i_access_stamp =0;

       	/* strcpy(p_wi_client_map_struct_h->h_status,STATUS_UAUTH);
			l_wi_client_map_struct_i->i_status =0; */
			if (!strlen(p_wi_client_map_struct_h->h_authorizer)) l_wi_client_map_struct_i->i_authorizer =-1;
				else l_wi_client_map_struct_i->i_authorizer =0;
			printf("\n Amit -- Cln Master Value is %s\n",p_wi_client_map_struct_h->h_cln_master);
			EXEC SQL UPDATE WI_CLIENT_MAP  SET 
            	MAKER =:p_intl_envdatastruct_h->usr:p_i_maker,
					LOGIN_RIGHTS=:p_wi_client_map_struct_h->h_login_rights :l_wi_client_map_struct_i-> i_login_rights,
					AUTO_AUTH=:p_wi_client_map_struct_h->h_auto_auth :l_wi_client_map_struct_i-> i_auto_auth,
					AUTHORIZER=:p_wi_client_map_struct_h->h_authorizer :l_wi_client_map_struct_i-> i_authorizer,
					ACCESS_STAMP=:p_wi_client_map_struct_h->h_access_stamp :l_wi_client_map_struct_i-> i_access_stamp
				WHERE 
					LOGIN_RIGHTS=:p_wi_client_map_struct_h->h_login_rights AND
					WI_LOGIN=:p_wi_client_map_struct_h->h_wi_login AND 
					AUTHORIZER=:p_wi_client_map_struct_h->h_cln_master;
              
					IS_ANY_ORA_ERROR;	
	   }
		else 
	   {
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   } 
	}

/* if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_AUTHORISE))
	{

		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered authorize of Function MT_ModDBNoDlvDet\n",
													NULL,p_intl_envdatastruct_h);
 	}

		if (!strcmp(p_wi_client_map_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   {
   		if(strcmp(p_wi_client_map_struct_h->h_status,STATUS_DEL_UAUTH))
	    	{
	    		strcpy(p_wi_client_map_struct_h->h_access_stamp,chr_sys_access_stamp);
	    		l_wi_client_map_struct_i->i_access_stamp =0;
   	    	strcpy(p_wi_client_map_struct_h->h_checker,p_intl_envdatastruct_h->usr);
	    		l_wi_client_map_struct_i->i_checker=0;
  	    	strcpy(p_wi_client_map_struct_h->h_checker_dt,chr_sys_access_stamp);
	    		l_wi_client_map_struct_i->i_checker_dt=0;
          strcpy(p_wi_client_map_struct_h->h_status,STATUS_AUTH);
	    		l_wi_client_map_struct_i->i_status =0;

	    		EXEC SQL UPDATE WI_CLIENT_MAP SET 
           	CHECKER =:p_intl_envdatastruct_h->usr:p_i_checker,
            	CHECKER_DT =:chr_sys_access_stamp:p_i_access_stamp,
					ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp,
            	STATUS =:p_wi_client_map_struct_h->h_status:l_wi_client_map_struct_i->i_status
				WHERE 
					FLD1 =:p_wi_client_map_struct_h->h_fld1 AND 
					FLD2 =:p_wi_client_map_struct_h->h_fld2 
					:
					:
					:; 

				IS_ANY_ORA_ERROR;	
			}
   	   else  
	    	{
	    		EXEC SQL DELETE WI_CLIENT_MAP 
				WHERE 
					FLD1 =:p_wi_client_map_struct_h->h_fld1 AND 
					FLD2 =:p_wi_client_map_struct_h->h_fld2 
					:
					:
					:; 
          
			   IS_ANY_ORA_ERROR
	    	}
	   }
		else 
	   {
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   } 
	}   */

 /*  if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_RESET))
	{

		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered reset of Function MT_ModDBNoDlvDet\n",
													NULL,p_intl_envdatastruct_h);
 	}

		if (!strcmp(p_wi_client_map_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   {
   		if(!strcmp(p_wi_client_map_struct_h->h_status,STATUS_DEL_UAUTH))
	    	{
	    		strcpy(p_wi_client_map_struct_h->h_access_stamp,chr_sys_access_stamp);
	    		l_wi_client_map_struct_i->i_access_stamp =0;
   	    	strcpy(p_wi_client_map_struct_h->h_checker,p_intl_envdatastruct_h->usr);
	    		l_wi_client_map_struct_i->i_checker=0;
  	    	strcpy(p_wi_client_map_struct_h->h_checker_dt,chr_sys_access_stamp);
	    		l_wi_client_map_struct_i->i_checker_dt=0;
          strcpy(p_wi_client_map_struct_h->h_status,STATUS_AUTH);
	    		l_wi_client_map_struct_i->i_status =0;

	    		EXEC SQL UPDATE WI_CLIENT_MAP SET 
           	CHECKER =:p_intl_envdatastruct_h->usr:p_i_checker,
            	CHECKER_DT =:chr_sys_access_stamp:p_i_access_stamp,
					ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp,
            	STATUS =:p_wi_client_map_struct_h->h_status:l_wi_client_map_struct_i->i_status
				WHERE 
					FLD1 =:p_wi_client_map_struct_h->h_fld1 AND 
					FLD2 =:p_wi_client_map_struct_h->h_fld2 
					:
					:
					:; 

				IS_ANY_ORA_ERROR;	
			}
	   }
		else 
	   {
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   } 
	}    */

 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_DELETE))
	{
  	// p_i_checker =-1;
  	// p_i_checkerdt =-1;
	//		strcpy(p_wi_client_map_struct_h->h_checker,APL_NULL_STRING);
	//		strcpy(p_wi_client_map_struct_h->h_checker_dt,APL_NULL_STRING);

		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered delete of Function MT_ModDBNoDlvDet\n",
													NULL,p_intl_envdatastruct_h);
 	}

	   if (strcmp(p_wi_client_map_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   {
			strcpy(p_wi_client_map_struct_h->h_access_stamp,chr_sys_access_stamp);
			l_wi_client_map_struct_i->i_access_stamp =0;

    	   /* strcpy(p_wi_client_map_struct_h->h_status,STATUS_DEL_UAUTH);
			l_wi_client_map_struct_i->i_status =0; */
			if (!strlen(p_wi_client_map_struct_h->h_authorizer)) l_wi_client_map_struct_i->i_authorizer =-1;
				else l_wi_client_map_struct_i->i_authorizer =0;
			/* Changes done by Amit Nair on 15/05/2007 */
			if (strlen(p_wi_client_map_struct_h->h_authorizer)> 0)
			{
			printf("\n Inside If \n");
			printf("\n Login Rights = %s , WI_Login = %s and Authorizer = %s",p_wi_client_map_struct_h->h_login_rights,p_wi_client_map_struct_h->h_wi_login,p_wi_client_map_struct_h -> h_authorizer);	
			EXEC SQL DELETE FROM WI_CLIENT_MAP 
				WHERE 
					LOGIN_RIGHTS=:p_wi_client_map_struct_h->h_login_rights AND
					WI_LOGIN=:p_wi_client_map_struct_h->h_wi_login AND
					AUTHORIZER = :p_wi_client_map_struct_h -> h_authorizer;
 
					IS_ANY_ORA_ERROR;	
			}
			else
			{
			EXEC SQL DELETE FROM WI_CLIENT_MAP 
				WHERE 
					LOGIN_RIGHTS=:p_wi_client_map_struct_h->h_login_rights AND
					WI_LOGIN=:p_wi_client_map_struct_h->h_wi_login AND
					AUTHORIZER IS NULL;
 
					IS_ANY_ORA_ERROR;	

			}
	   }
		else 
	   {
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   } 
	}


 if (int_error_flag == APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}
 APL_GOBACK_SUCCESS

 RETURN_SUCCESS :
	{
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
		free(l_wi_client_map_struct_i);
		return(APL_SUCCESS);
	}
  RETURN_FAILURE :
	{
 	APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
		free(l_wi_client_map_struct_i);
		return(APL_FAILURE);
	}

}

