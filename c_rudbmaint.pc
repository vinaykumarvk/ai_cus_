


   
   
   
   
   
   
   
   
   
   
   
   



#include "CO_HostStructdef.h"

EXEC SQL INCLUDE sqlca;


int CDBChkCustDetFn(MT_RUCLIENT_STRUCT_H *p_mt_ruclient_struct_h_b, INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   struct sqlca      sqlca;
   int               int_retval;
   char              chr_h_field_val[40];
   char              chr_itype,chr_iexist,chr_icubk_a, chr_iaccclass,chr_iauthorised;
   char              chr_iclosed,chr_ifrozen,chr_ideleted;
   char              chr_l_buf[BUFFER_LEN];
   int               int_l_count=0;
   char 					h_cltstatus[APL_STATUS_LEN];
   
   short             int_l_condexists = 0;
   char              chr_mainfuncarea[APL_MAINFUNCAREA_LEN];
   char              chr_l_condid[APL_CONDID_LEN];
   char              chr_l_acctyp[3]            = APL_NULL_STRING;
   char              chr_l_nobaseacc[7]         = APL_NULL_STRING;
   int               int_l_rowexists;
   char              chr_p_sys_date[APL_DATE_LEN];
   int               int_p_date_diff =0;


   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   sqlca.sqlcode = 0;

   APL_IF_DEBUG
   {
    
     CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CDBChkCustDetFn \n",NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Account is %s \n",p_mt_ruclient_struct_h_b->h_dl_client);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h_d->h_mode);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
   }

   
  

  if (strlen(p_mt_ruclient_struct_h_b->h_dl_client) != 0)
  {
      chr_iexist = 'Y';
      chr_iaccclass = '2';
      chr_iclosed ='N';
      chr_icubk_a   = 'C';
      chr_iauthorised = 'Y';
		chr_ideleted = 'N';
      chr_ifrozen = 'N';

      int_retval = GDBValCustAccFn(p_mt_ruclient_struct_h_b->h_dl_client,chr_iexist,chr_icubk_a,chr_iaccclass,chr_iauthorised,chr_ideleted, chr_ifrozen, chr_iclosed,l_debug_info_ptr);
    
      if (int_retval != APL_SUCCESS)
            APL_GOBACK_FAIL
  }
 
 CO_ProcMonitor(APL_OUT_FILE,"Going to check the synthetic Account ",NULL,p_intl_env_data_struct_h_d); 
 
  
  if ( strlen(p_mt_ruclient_struct_h_b->h_synclt) )
     {
            int_l_rowexists = 0;

            EXEC SQL Select 1
            into :int_l_rowexists
            From PRO_SGENSTAT
            where ((MAP_VAL = :p_mt_ruclient_struct_h_b->h_synclt) AND
                   (MAP_TYPE = 'RUSYNACC') AND
                   (NATION_CODE = :g_mt_commonsys_params_struct_h.nation_code));

            IS_ANY_ORA_ERROR;

            if (!int_l_rowexists)
            {
               if (  CO_InsertErr(   l_debug_info_ptr,
                                       ERR_INVALID_SYNACC,
                                       p_mt_ruclient_struct_h_b->h_synclt,
                                       APL_NULL_STRING,
                                       APL_NULL_STRING,
                                       __LINE__,
                                       __FILE__ ) == APL_FAILURE )
               {
                  APL_GOBACK_FAIL;
               }
            }
     }

   CO_ProcMonitor(APL_OUT_FILE,"Going to check the Account type ",NULL,p_intl_env_data_struct_h_d);


  
  
  if (strlen(p_mt_ruclient_struct_h_b->h_clttyp) != 0)
     {
            int_l_rowexists = 0;

            EXEC SQL Select 1
            into :int_l_rowexists
            From PRO_SGENSTAT
            where ((MAP_VAL = :p_mt_ruclient_struct_h_b->h_clttyp) AND
                   (MAP_TYPE = 'RUACCTYPE') AND
                   (NATION_CODE = :g_mt_commonsys_params_struct_h.nation_code));

            IS_ANY_ORA_ERROR;
            if (!int_l_rowexists)
            {
               if (  CO_InsertErr(   l_debug_info_ptr,
                                       ERR_ACCTYPE_NOTVALID,
                                       p_mt_ruclient_struct_h_b->h_clttyp,
                                       APL_NULL_STRING,
                                       APL_NULL_STRING,
                                       __LINE__,
                                       __FILE__ ) == APL_FAILURE )
               {
                  APL_GOBACK_FAIL;
               }
            }

          EXEC SQL SELECT FIELD_VAL INTO :chr_l_acctyp
          FROM PRO_GSSPLVAL
          WHERE MAIN_FUN = 'RUACC_TYPE'
          AND SUB_PROCESS = 'RUKCOR_TYPE'
          AND NATION = :g_mt_commonsys_params_struct_h.nation_code;


          if (strcmp(p_mt_ruclient_struct_h_b->h_clttyp, chr_l_acctyp) == 0)
          {
            if (strlen(p_mt_ruclient_struct_h_b->h_clt_typ) == 0)
            APL_DATA_MISSING("KCORRESPONDENT TYPE",APL_NULL_STRING,APL_NULL_STRING)
          }
      }
    
  
    CO_ProcMonitor(APL_OUT_FILE,"Going to check the CRACTYPE if it is not empty ",NULL,p_intl_env_data_struct_h_d);
 
    if (strlen(p_mt_ruclient_struct_h_b->h_clt_typ) != 0)
     {
            int_l_rowexists = 0;

            EXEC SQL Select 1
            into :int_l_rowexists
            From PRO_SGENSTAT
            where ((MAP_VAL = :p_mt_ruclient_struct_h_b->h_clt_typ) AND
                   (MAP_TYPE = 'RUKCORTYPE') AND
                   (NATION_CODE = :g_mt_commonsys_params_struct_h.nation_code));

            IS_ANY_ORA_ERROR;

            if (!int_l_rowexists)
            {
               if (  CO_InsertErr(   l_debug_info_ptr,
                                       ERR_INVALID_CORRES_TYPE,
                                       p_mt_ruclient_struct_h_b->h_clt_typ,
                                       APL_NULL_STRING,
                                       APL_NULL_STRING,
                                       __LINE__,
                                       __FILE__ ) == APL_FAILURE )
               {
                  APL_GOBACK_FAIL;
               }
            }
     }
 
    CO_ProcMonitor(APL_OUT_FILE,"Base Acc should not be '000000' or '999999'",NULL,p_intl_env_data_struct_h_d);   

    

       EXEC SQL SELECT FIELD_VAL INTO :chr_l_nobaseacc
       FROM PRO_GSSPLVAL
       WHERE MAIN_FUN = 'RUBASE_NO'
       AND SUB_PROCESS = 'RUBASE_NOA'
       AND NATION = :g_mt_commonsys_params_struct_h.nation_code;

	
   if (strcmp(ltoa(p_mt_ruclient_struct_h_b->h_baseclt), chr_l_nobaseacc) == 0)
        CO_InsertErr(l_debug_info_ptr,ERR_BASENO_NOTALLOWED,ltoa(p_mt_ruclient_struct_h_b->h_baseclt),APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__); //AIX -Warning Removal

       EXEC SQL SELECT FIELD_VAL INTO :chr_l_nobaseacc
       FROM PRO_GSSPLVAL
       WHERE MAIN_FUN = 'RUBASE_NO'
       AND SUB_PROCESS = 'RUBASE_NOT'
       AND NATION = :g_mt_commonsys_params_struct_h.nation_code;

	
   if (strcmp(ltoa(p_mt_ruclient_struct_h_b->h_baseclt), chr_l_nobaseacc) == 0)
      { //AIX -Warning Removal
	//NandlaL
       char tmpBaseClt[5]="";
       sprintf(tmpBaseClt,"%d",p_mt_ruclient_struct_h_b->h_baseclt);
       CO_InsertErr(l_debug_info_ptr,ERR_BASENO_NOTALLOWED,tmpBaseClt,
APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
      }
  
   

    CO_ProcMonitor(APL_OUT_FILE,"AccopDt should bot be greater than system date",NULL,p_intl_env_data_struct_h_d);

 
    EXEC SQL SELECT SYS_DATE INTO :chr_p_sys_date
         FROM PRO_SYS_DATE;

    IS_ANY_ORA_ERROR

    if (CO_RtvSysDtTime(p_mt_ruclient_struct_h_b->h_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
      {APL_GOBACK_FAIL }

      

         int_p_date_diff =0;

         if ( APL_FAILURE == CO_Pro_DateComp(p_mt_ruclient_struct_h_b->h_cltopdt,
                                    chr_p_sys_date,
                                    &int_p_date_diff,
                                    l_debug_info_ptr))
            {
              if(CO_InsertErr(   l_debug_info_ptr,
                           ERR_DATE_CANT_FUTURE,
                           
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           __LINE__,
                           __FILE__
                           ) != APL_SUCCESS)
              APL_GOBACK_FAIL
           }


    

  CO_ProcMonitor(APL_OUT_FILE,"the record come for Modify shoult be an unauthorised record only.",NULL,p_intl_env_data_struct_h_d);


  if(strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_MODIFY) == 0)
  {
      EXEC SQL SELECT RU_CLIENT_STAT
      INTO :h_cltstatus
      FROM DL_RUCLIENT
      WHERE client = :p_mt_ruclient_struct_h_b->h_dl_client; 

      IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

      if ((strcmp(p_mt_ruclient_struct_h_b->h_cltstatus,STATUS_UAUTH) != 0) && (strcmp(p_mt_ruclient_struct_h_b->h_cltstatus, STATUS_OPEN_UAUTH) != 0 ))
      {

         CO_InsertErr(l_debug_info_ptr,ERR_CANT_MODIFY,p_mt_ruclient_struct_h_b->h_cltstatus,APL_NULL_STRING,
APL_NULL_STRING,__LINE__,__FILE__);
      }
  }

  APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBChkCustDetFn SUCCESS \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBChkCustDetFn FAILURE \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_FAILURE);
   }
}


int CDBUpdCustFn (MT_RUCLIENT_STRUCT_H *p_mt_ruclient_struct_h_b,char *p_row_id_cltt,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,        DEBUG_INFO_STRUCT_H **l_debug_info_ptr )

{
   struct sqlca        sqlca;
   int                 int_retval;
   char                chr_h_field_val[40];
   char                chr_h_sys_access_stamp[APL_DATE_LEN];
   char                h_clt_status[APL_STATUS_LEN];
   MT_RUCLIENT_STRUCT_I   *l_mt_ruclient_struct_i = NULL;
   char                chr_l_buf[BUFFER_LEN];
   short               int_l_condexists = 0;
   char chr_mainfuncarea[APL_MAINFUNCAREA_LEN];
   char chr_l_condid[APL_CONDID_LEN];
   char                 h_ibbsclient[APL_CLIENT_LENGTH] = APL_NULL_STRING;
	int 						int_l_rowexists=0;
	char 						chr_iexist = 0;
	char 						chr_iauthorised, chr_ifrozen, chr_iclosed;

  EXEC SQL VAR p_mt_ruclient_struct_h_b->h_dl_client is STRING;
  EXEC SQL VAR p_mt_ruclient_struct_h_b->h_cltnm is STRING;
  EXEC SQL VAR p_mt_ruclient_struct_h_b->h_synclt is STRING;
  EXEC SQL VAR p_mt_ruclient_struct_h_b->h_clttyp is STRING;
  EXEC SQL VAR p_mt_ruclient_struct_h_b->h_clt_typ is STRING;
   
  EXEC SQL VAR p_mt_ruclient_struct_h_b->h_cltopdt is STRING;
  EXEC SQL VAR p_mt_ruclient_struct_h_b->h_cltcldt is STRING;



   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   sqlca.sqlcode = 0;

   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CDBUpdCustFn \n",NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Account is %s \n",p_mt_ruclient_struct_h_b->h_dl_client);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h_d->h_mode);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
   }

   

   l_mt_ruclient_struct_i = (MT_RUCLIENT_STRUCT_I *)calloc(1,sizeof(MT_RUCLIENT_STRUCT_I));
   APL_MALLOC_FAIL(l_mt_ruclient_struct_i)

   
   l_mt_ruclient_struct_i->i_dl_client = 0;
   l_mt_ruclient_struct_i->i_cltnm  = 0;
   l_mt_ruclient_struct_i->i_synclt = 0;
   l_mt_ruclient_struct_i->i_clttyp = 0;
   l_mt_ruclient_struct_i->i_baseclt = 0;
   l_mt_ruclient_struct_i->i_cltopdt = 0;
   l_mt_ruclient_struct_i->i_maker = 0;
   l_mt_ruclient_struct_i->i_maker_dt = 0;
   l_mt_ruclient_struct_i->i_access_stamp = 0;
   l_mt_ruclient_struct_i->i_newdt = 0 ;
   l_mt_ruclient_struct_i->i_cltstatus = 0; 
   
   

   if(strlen(p_mt_ruclient_struct_h_b->h_clt_typ) == 0)
      l_mt_ruclient_struct_i->i_clt_typ = -1;
   else
      l_mt_ruclient_struct_i->i_clt_typ = 0;

   if(strlen(p_mt_ruclient_struct_h_b->h_cltcldt) == 0)
      l_mt_ruclient_struct_i->i_cltcldt = -1;
   else
      l_mt_ruclient_struct_i->i_cltcldt = 0;

   if(strlen(p_mt_ruclient_struct_h_b->h_nostr_cltptyp) == 0)
      l_mt_ruclient_struct_i->i_nostr_cltptyp = -1;
   else
      l_mt_ruclient_struct_i->i_nostr_cltptyp = 0;

   if(strlen(p_mt_ruclient_struct_h_b->h_nostr_clttyp) == 0)
      l_mt_ruclient_struct_i->i_nostr_clttyp = -1;
   else
      l_mt_ruclient_struct_i->i_nostr_clttyp = 0;

   if (CO_RtvSysDtTime(chr_h_sys_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
      APL_GOBACK_FAIL

   if (strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_INPUT) == 0)
   {

   
      strcpy(p_mt_ruclient_struct_h_b->h_cltstatus, STATUS_UAUTH);
      strcpy(p_mt_ruclient_struct_h_b->h_maker, p_intl_env_data_struct_h_d->usr);
      strcpy(p_mt_ruclient_struct_h_b->h_maker_dt, chr_h_sys_access_stamp);
      strcpy(p_mt_ruclient_struct_h_b->h_checker, APL_NULL_STRING);
      strcpy(p_mt_ruclient_struct_h_b->h_checker_dt, APL_NULL_STRING);
      strcpy(p_mt_ruclient_struct_h_b->h_access_stamp, chr_h_sys_access_stamp);
      strcpy(p_mt_ruclient_struct_h_b->h_newdt, chr_h_sys_access_stamp);
      

     if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)

         APL_GOBACK_FAIL
 
     memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Account is %s \n",p_mt_ruclient_struct_h_b->h_dl_client);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d); 

     memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Account Name is %s \n",p_mt_ruclient_struct_h_b->h_cltnm);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
 
     memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Synthetic Account is %s \n",p_mt_ruclient_struct_h_b->h_synclt);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
  
    memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Account Type is %s \n",p_mt_ruclient_struct_h_b->h_clttyp);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

    memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"KCOR TYPE is %s \n",p_mt_ruclient_struct_h_b->h_clt_typ);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

   memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Base Acc is %d",p_mt_ruclient_struct_h_b->h_baseclt);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

   memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"ACCOP DT is %s \n",p_mt_ruclient_struct_h_b->h_cltopdt);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

   memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"ACC CLDT is %s \n",p_mt_ruclient_struct_h_b->h_cltcldt);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

  memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"DocOPNO is %s \n",p_mt_ruclient_struct_h_b->h_nostr_cltptyp);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

  memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"DocCLNO is %s \n",p_mt_ruclient_struct_h_b->h_nostr_clttyp);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
   
  memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Maker is %s \n",p_mt_ruclient_struct_h_b->h_maker);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

  memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"MAKER DT is %s \n",p_mt_ruclient_struct_h_b->h_maker_dt);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

  memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"CHECKER is %s \n",p_mt_ruclient_struct_h_b->h_checker);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

  memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"CHECKER DT IS %s \n",p_mt_ruclient_struct_h_b->h_checker_dt);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
 
  memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"ACCESS STAMP is %s \n",p_mt_ruclient_struct_h_b->h_access_stamp);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

  memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"INPUT DT is %s \n",p_mt_ruclient_struct_h_b->h_newdt);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

  memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"ACC STATUS is %s \n",p_mt_ruclient_struct_h_b->h_cltstatus);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);


     EXEC SQL INSERT INTO DL_RUCLIENT
      VALUES (:p_mt_ruclient_struct_h_b:l_mt_ruclient_struct_i);

    IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_REC_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
  }
  else if (strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_MODIFY) == 0)
  {

   if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         APL_GOBACK_FAIL

      strcpy((char *)h_clt_status,STATUS_UAUTH);

      EXEC SQL UPDATE DL_RUCLIENT
      SET CLIENT_NAME = :p_mt_ruclient_struct_h_b->h_cltnm:l_mt_ruclient_struct_i->i_cltnm,
          SYN_CLIENT = :p_mt_ruclient_struct_h_b->h_synclt:l_mt_ruclient_struct_i->i_synclt,
          CLTTYP = :p_mt_ruclient_struct_h_b->h_clttyp:l_mt_ruclient_struct_i->i_clttyp,
          CLT_TYP =:p_mt_ruclient_struct_h_b->h_clt_typ:l_mt_ruclient_struct_i->i_clt_typ,
          BASECLT = :p_mt_ruclient_struct_h_b->h_baseclt:l_mt_ruclient_struct_i->i_baseclt,
          CLIENT_OPDT = :p_mt_ruclient_struct_h_b->h_cltopdt:l_mt_ruclient_struct_i->i_cltopdt,
			 CLIENT_CLOSE_DT = :p_mt_ruclient_struct_h_b->h_cltcldt:l_mt_ruclient_struct_i->i_cltcldt,
          NOSTR_CLTPID = :p_mt_ruclient_struct_h_b->h_nostr_cltptyp:l_mt_ruclient_struct_i->i_nostr_cltptyp,
          NOSTR_CLTTYP = :p_mt_ruclient_struct_h_b->h_nostr_clttyp:l_mt_ruclient_struct_i->i_nostr_clttyp,
			 maker = :p_intl_env_data_struct_h_d->usr:l_mt_ruclient_struct_i->i_maker,
          maker_dt = :chr_h_sys_access_stamp:l_mt_ruclient_struct_i->i_maker_dt,
          access_stamp = :chr_h_sys_access_stamp:l_mt_ruclient_struct_i->i_access_stamp,
          checker = NULL,
          checker_dt = NULL,
          RU_CLIENT_STAT = :h_clt_status
      WHERE ROWID = :p_row_id_cltt;

      IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

   }
	else if (strcmp(p_intl_env_data_struct_h_d->h_mode,CLS_MODE) == 0)
	{
		

		if ( strlen(p_mt_ruclient_struct_h_b->h_dl_client ))
		{
			int_l_rowexists = 0;

            EXEC SQL Select 1
            into :int_l_rowexists
				From MT_CLIENT
				where CLN_CODE = :p_mt_ruclient_struct_h_b->h_dl_client;

				IS_ANY_ORA_ERROR;

            if (int_l_rowexists)
            {
					chr_iexist = 'Y';
            	chr_iauthorised = 'Y';
            	chr_ifrozen = 'N';
            	chr_iclosed = 'Y';

            int_retval = CO_Chk_AccValid(p_mt_ruclient_struct_h_b->h_dl_client,chr_iexist,NULL,NULL,NULL,chr_iauthorised,NULL,chr_ifrozen,chr_iclosed, l_debug_info_ptr);

 	           if (int_retval != APL_SUCCESS)
               APL_GOBACK_FAIL
   	      }
		}
		
		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         APL_GOBACK_FAIL

      strcpy((char *)h_clt_status,STATUS_CLS_UAUTH);

		EXEC SQL UPDATE DL_RUCLIENT
      SET CLIENT_CLOSE_DT = :p_mt_ruclient_struct_h_b->h_cltcldt:l_mt_ruclient_struct_i->i_cltcldt,
			 NOSTR_CLTTYP = :p_mt_ruclient_struct_h_b->h_nostr_clttyp:l_mt_ruclient_struct_i->i_nostr_clttyp, 
		   	maker = :p_intl_env_data_struct_h_d->usr,
          maker_dt = :chr_h_sys_access_stamp,
          checker = NULL,
          checker_dt = NULL,
          RU_CLIENT_STAT = :h_clt_status,
			 access_stamp = :chr_h_sys_access_stamp
      WHERE ROWID = :p_row_id_cltt;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

      APL_GOBACK_SUCCESS
   }
   
   else if (strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_DELETE) == 0)
   {

      if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         APL_GOBACK_FAIL

      strcpy((char *)h_clt_status,STATUS_DEL_UAUTH);

      
       
         
          
          
          
          
                       
          
      EXEC SQL UPDATE DL_RUCLIENT 	  
      SET maker = :p_intl_env_data_struct_h_d->usr:l_mt_ruclient_struct_i->i_maker,               
          maker_dt = :chr_h_sys_access_stamp:l_mt_ruclient_struct_i->i_maker_dt,
          access_stamp = :chr_h_sys_access_stamp:l_mt_ruclient_struct_i->i_access_stamp,
          checker = NULL,
          checker_dt = NULL,
          RU_CLIENT_STAT = :h_clt_status
      WHERE ROWID = :p_row_id_cltt;

      IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

   }  
   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      APL_FREE(l_mt_ruclient_struct_i)

      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBUpdCustFn SUCCESS \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      APL_FREE(l_mt_ruclient_struct_i)

      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBUpdCustFn FAILURE \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_FAILURE);
   }

}




int CDBUsrAuthCustFn(char *chr_p_acct, char *p_user, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   VARCHAR       h_maker[APL_USERID_LEN];
   struct sqlca  sqlca;
   char          chr_l_buf[BUFFER_LEN];

   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   sqlca.sqlcode = 0;

   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CDBUsrAuthCustFn \n",NULL,NULL);
      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Account is %s \n",chr_p_acct);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"User is %s \n",p_user);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
   }

   EXEC SQL SELECT maker
   INTO :h_maker
   FROM DL_RUCLIENT
   WHERE client = :chr_p_acct;

   IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

   h_maker.arr[h_maker.len] = APL_NULL_CHAR;

   if (strcmp(p_user,(char *)h_maker.arr) == 0)    // AIX -Warnings Removal
   {
      CO_InsertErr(l_debug_info_ptr,ERR_MAKER_CHECKER_SAME,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);

      APL_GOBACK_FAIL
   }

   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBUsrAuthCustFn SUCCESS \n",NULL,NULL);
      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBUsrAuthCustFn FAILURE \n",NULL,NULL);
      return(APL_FAILURE);
   }
}

 

int CDBUpdCustOthFn(char *chr_p_acct,char *p_row_id_cltt,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
   struct sqlca         sqlca;
   int                  int_retval;
   char                 h_clt_status[APL_STATUS_LEN];
   char                 chr_h_sys_access_stamp[APL_DATE_LEN];
   int                  int_h_flg = 0;
   char                 chr_l_buf[BUFFER_LEN];

   EXEC SQL VAR h_clt_status IS STRING;

   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   sqlca.sqlcode = 0;

   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CDBUpdCustOthFn \n",NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Account is %s \n",chr_p_acct);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h_d->h_mode);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
   }

   if(CO_RtvSysDtTime(chr_h_sys_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
      APL_GOBACK_FAIL

 
	if (strcmp(p_intl_env_data_struct_h_d->h_mode, OPEN_MODE) == 0)
      strcpy((char *)h_clt_status, STATUS_OPEN_UAUTH);
   else
      int_h_flg = 1;

   if (int_h_flg == 0)
   {
      if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         APL_GOBACK_FAIL

      EXEC SQL UPDATE DL_RUCLIENT
      SET	CLIENT_CLOSE_DT = NULL, 
		   	maker = :p_intl_env_data_struct_h_d->usr,
          maker_dt = :chr_h_sys_access_stamp,
          checker = NULL,
          checker_dt = NULL,
          RU_CLIENT_STAT = :h_clt_status,
          access_stamp = :chr_h_sys_access_stamp
      WHERE ROWID = :p_row_id_cltt;

      IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

      APL_GOBACK_SUCCESS
   }


   int_h_flg = 0;

   if (strcmp(p_intl_env_data_struct_h_d->h_mode, APL_FUNC_AUTHORISE) == 0)
   {
      EXEC SQL SELECT RU_CLIENT_STAT
      INTO :h_clt_status
      FROM DL_RUCLIENT
      WHERE ROWID = :p_row_id_cltt;

      IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

      if (strcmp(h_clt_status, STATUS_CLS_UAUTH) == 0)
         strcpy((char *)h_clt_status, STATUS_CLS_AUTH);
      else if (strcmp(h_clt_status, STATUS_UAUTH) == 0)
         strcpy((char *)h_clt_status, STATUS_AUTH);
		else if (strcmp(h_clt_status, STATUS_OPEN_UAUTH) == 0)
         strcpy((char *)h_clt_status, STATUS_AUTH);
      else
         int_h_flg = 1;

      if (int_h_flg == 0)
      {
         if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
            APL_GOBACK_FAIL

         EXEC SQL UPDATE DL_RUCLIENT
         SET checker = :p_intl_env_data_struct_h_d->usr,
             checker_dt = :chr_h_sys_access_stamp,
             RU_CLIENT_STAT = :h_clt_status,
             access_stamp = :chr_h_sys_access_stamp
         WHERE ROWID = :p_row_id_cltt;

         IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

         APL_GOBACK_SUCCESS
      }
      
      if (strcmp(h_clt_status, STATUS_DEL_UAUTH) == 0)
      {
	 EXEC SQL DELETE DL_RUCLIENT WHERE client = :chr_p_acct;
	 IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
      }  
   }

   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBUpdCustOthFn SUCCESS \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBUpdCustOthFn FAILURE \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_FAILURE);
   }
}



int CDBChkRRLocDetFn(MT_RULOC_STRUCT_H *p_mt_ruloc_struct_h, INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   struct sqlca      sqlca;
   int               int_retval;
   char              chr_h_field_val[40];
   char              chr_iexist,chr_iauthorised,chr_iclosed,chr_ideleted;
   char              chr_l_buf[BUFFER_LEN];
   int               int_l_count=0;
   char              h_rulocstatus_ind[APL_STATUS_LEN];
	short             int_l_condexists = 0;
   char              chr_mainfuncarea[APL_MAINFUNCAREA_LEN];
   char              chr_l_condid[APL_CONDID_LEN];
   char              chr_l_loctyp[3]		= APL_NULL_STRING;
   char              chr_l_nobasloc[7]  = APL_NULL_STRING;
   int               int_l_rowexists;
   char              chr_p_sys_date[APL_DATE_LEN];
   int               int_p_date_diff =0;


   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   sqlca.sqlcode = 0;

   APL_IF_DEBUG
   {

     CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CDBChkRRLocDetFn \n",NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Location is %s \n",p_mt_ruloc_struct_h->h_loc);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h_d->h_mode);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
   }

   
 

if (strlen(p_mt_ruloc_struct_h->h_loc) != 0)
  {
      chr_iexist = 'Y';
		chr_iauthorised = 'Y';
      chr_ideleted = 'N';
  
      int_retval = GDBValRRLocLocFn(p_mt_ruloc_struct_h->h_loc,chr_iexist,chr_iauthorised,chr_ideleted,l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
            APL_GOBACK_FAIL
  }

  CO_ProcMonitor(APL_OUT_FILE,"Going to check the synthetic Location ",NULL,p_intl_env_data_struct_h_d);

  
  if ( strlen(p_mt_ruloc_struct_h->h_syn_location) )
     {
            int_l_rowexists = 0;

            EXEC SQL Select 1
            into :int_l_rowexists
            From PRO_SGENSTAT
            where ((MAP_VAL = :p_mt_ruloc_struct_h->h_syn_location) AND
                   (MAP_TYPE = 'RUSYNLOC') AND
                   (NATION_CODE = :g_mt_commonsys_params_struct_h.nation_code));

            IS_ANY_ORA_ERROR;

            if (!int_l_rowexists)
            {
               if (  CO_InsertErr(   l_debug_info_ptr,
                                       ERR_INVALID_SYNLOCN,
                                       p_mt_ruloc_struct_h->h_syn_location,
                                       APL_NULL_STRING,
                                       APL_NULL_STRING,
                                       __LINE__,
                                       __FILE__ ) == APL_FAILURE )
               {
                  APL_GOBACK_FAIL;
               }
            }
     }
   
     CO_ProcMonitor(APL_OUT_FILE,"Going to check the Location Type ",NULL,p_intl_env_data_struct_h_d);
  
     if (strlen(p_mt_ruloc_struct_h->h_loc_class) != 0)
     {
            int_l_rowexists = 0;

            EXEC SQL Select 1
            into :int_l_rowexists
            From PRO_SGENSTAT
            where ((MAP_VAL = :p_mt_ruloc_struct_h->h_loc_class) AND
                   (MAP_TYPE = 'RULOCTYPE') AND
                   (NATION_CODE = :g_mt_commonsys_params_struct_h.nation_code));

            IS_ANY_ORA_ERROR;
            if (!int_l_rowexists)
            {
               if (  CO_InsertErr(   l_debug_info_ptr,
                                       ERR_INVALID_LOCNTYPE,
                                       p_mt_ruloc_struct_h->h_loc_class,
                                       APL_NULL_STRING,
                                       APL_NULL_STRING,
                                       __LINE__,
                                       __FILE__ ) == APL_FAILURE )
               {
                  APL_GOBACK_FAIL;
               }
            }
	    }

    CO_ProcMonitor(APL_OUT_FILE,"Base LOC should not be '000000' or '999999'",NULL,p_intl_env_data_struct_h_d);

    

       EXEC SQL SELECT FIELD_VAL INTO :chr_l_nobasloc
       FROM PRO_GSSPLVAL
       WHERE MAIN_FUN = 'RUBASE_NO'
       AND SUB_PROCESS = 'RUBASE_NOA'
       AND NATION = :g_mt_commonsys_params_struct_h.nation_code;

   if (strcmp(ltoa(p_mt_ruloc_struct_h->h_baseloc), chr_l_nobasloc) == 0)
       //Nandlal
       CO_InsertErr(l_debug_info_ptr,ERR_BASENO_NOTALLOWED,ltoa(p_mt_ruloc_struct_h->h_baseloc),APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__); //AIX -Warning Removal

       EXEC SQL SELECT FIELD_VAL INTO :chr_l_nobasloc
       FROM PRO_GSSPLVAL
       WHERE MAIN_FUN = 'RUBASE_NO'
       AND SUB_PROCESS = 'RUBASE_NOT'
       AND NATION = :g_mt_commonsys_params_struct_h.nation_code;

   if (strcmp(ltoa(p_mt_ruloc_struct_h->h_baseloc), chr_l_nobasloc) == 0)
   { //AIX -Warning Removal
       //NandlaL
       char tmpBaseLoc[5]="";
       sprintf(tmpBaseLoc,"%d",p_mt_ruloc_struct_h->h_baseloc);
       CO_InsertErr(l_debug_info_ptr,ERR_BASENO_NOTALLOWED,ltoa(p_mt_ruloc_struct_h->h_baseloc),APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
   }
		

    CO_ProcMonitor(APL_OUT_FILE,"Loc Op DT should bot be greater than system date",NULL,p_intl_env_data_struct_h_d);


    EXEC SQL SELECT SYS_DATE INTO :chr_p_sys_date
         FROM PRO_SYS_DATE;

    IS_ANY_ORA_ERROR

    if (CO_RtvSysDtTime(p_mt_ruloc_struct_h->h_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
      {APL_GOBACK_FAIL }

      

         int_p_date_diff =0;

         if ( APL_FAILURE == CO_Pro_DateComp(p_mt_ruloc_struct_h->h_locopdate,
                                    chr_p_sys_date,
                                    &int_p_date_diff,
                                    l_debug_info_ptr))
            {
              if(CO_InsertErr(   l_debug_info_ptr,
                           ERR_DATE_CANT_FUTURE,
                           
                           APL_NULL_STRING,
									APL_NULL_STRING,
                           APL_NULL_STRING,
                           __LINE__,
                           __FILE__
                           ) != APL_SUCCESS)
              APL_GOBACK_FAIL
           }


    

  CO_ProcMonitor(APL_OUT_FILE,"the record come for Modify shoult be an unauthorised record only.",NULL,p_intl_env_data_struct_h_d);


  if(strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_MODIFY) == 0)
  {
      EXEC SQL SELECT RU_LOC_STAT
      INTO :h_rulocstatus_ind	
      FROM DL_RULOCATION 
      WHERE LOC = :p_mt_ruloc_struct_h->h_loc;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

      if (strcmp(p_mt_ruloc_struct_h->h_rulocstatus_ind,STATUS_UAUTH) !=0)
		{

         CO_InsertErr(l_debug_info_ptr,ERR_CANT_MODIFY,p_mt_ruloc_struct_h->h_rulocstatus_ind,APL_NULL_STRING,
APL_NULL_STRING,__LINE__,__FILE__);
      }
  }

  APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBChkRRLocDetFn SUCCESS \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBChkRRLocDetFn FAILURE \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_FAILURE);
   }
}




int CDBUpdRRLocFn(MT_RULOC_STRUCT_H *p_mt_ruloc_struct_h,char *p_row_id_code,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr )

{
   struct sqlca        sqlca;
   int                 int_retval;
   char                chr_h_field_val[40];
   char                chr_h_sys_access_stamp[APL_DATE_LEN];
   char                chr_h_ruloc_status[APL_STATUS_LEN];
   MT_RULOC_STRUCT_I  *l_mt_ruloc_struct_ia = NULL;
   char                chr_l_buf[BUFFER_LEN];
   short               int_l_condexists = 0;
   char chr_mainfuncarea[APL_MAINFUNCAREA_LEN];
   char chr_l_condid[APL_CONDID_LEN];

   EXEC SQL VAR p_mt_ruloc_struct_h->h_loc is STRING;
   EXEC SQL VAR p_mt_ruloc_struct_h->h_locm is STRING;
	EXEC SQL VAR p_mt_ruloc_struct_h->h_syn_location is STRING;
   EXEC SQL VAR p_mt_ruloc_struct_h->h_license_no is STRING;
   EXEC SQL VAR p_mt_ruloc_struct_h->h_loc_class is STRING;
	EXEC SQL VAR p_mt_ruloc_struct_h->h_depo_cd is STRING;
   EXEC SQL VAR p_mt_ruloc_struct_h->h_locopdate is STRING;
	EXEC SQL VAR p_mt_ruloc_struct_h->h_loccldate is STRING;
   EXEC SQL VAR p_mt_ruloc_struct_h->h_nostr_cltptyp is STRING;
   EXEC SQL VAR p_mt_ruloc_struct_h->h_nostr_clttyp is STRING;
   
   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   sqlca.sqlcode = 0;

   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CDBUpdRRLocFn \n",NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Location is %s \n",p_mt_ruloc_struct_h->h_loc);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h_d->h_mode);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
   }

   

	l_mt_ruloc_struct_ia = (MT_RULOC_STRUCT_I *)calloc(1,sizeof(MT_RULOC_STRUCT_I));
	APL_MALLOC_FAIL(l_mt_ruloc_struct_ia)

   

	l_mt_ruloc_struct_ia->i_loc = 0;
   l_mt_ruloc_struct_ia->i_locm = 0;
   l_mt_ruloc_struct_ia->i_syn_location = 0;
   l_mt_ruloc_struct_ia->i_license_no = 0;
   l_mt_ruloc_struct_ia->i_loc_class = 0;
   l_mt_ruloc_struct_ia->i_depo_cd = 0;
   l_mt_ruloc_struct_ia->i_baseloc = 0;
   l_mt_ruloc_struct_ia->i_locopdate = 0;
   l_mt_ruloc_struct_ia->i_nostr_clttyp = 0;
   l_mt_ruloc_struct_ia->i_maker = 0;
   l_mt_ruloc_struct_ia->i_maker_dt = 0;
	l_mt_ruloc_struct_ia->i_access_stamp = 0;
   l_mt_ruloc_struct_ia->i_newdt = 0;
   l_mt_ruloc_struct_ia->i_rulocstatus_ind = 0;

   

   if(strlen(p_mt_ruloc_struct_h->h_loccldate) == 0)
		l_mt_ruloc_struct_ia->i_loccldate = -1;
	else
		l_mt_ruloc_struct_ia->i_loccldate = 0;

   if(strlen(p_mt_ruloc_struct_h->h_nostr_cltptyp) == 0)
      l_mt_ruloc_struct_ia->i_nostr_cltptyp = -1;
   else
      l_mt_ruloc_struct_ia->i_nostr_cltptyp = 0;

   if (CO_RtvSysDtTime(chr_h_sys_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
      APL_GOBACK_FAIL

   if (strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_INPUT) == 0)
   {

   
      strcpy(p_mt_ruloc_struct_h->h_rulocstatus_ind, STATUS_UAUTH);
      strcpy(p_mt_ruloc_struct_h->h_maker, p_intl_env_data_struct_h_d->usr);
      strcpy(p_mt_ruloc_struct_h->h_maker_dt, chr_h_sys_access_stamp);
      strcpy(p_mt_ruloc_struct_h->h_checker, APL_NULL_STRING);
      strcpy(p_mt_ruloc_struct_h->h_checker_dt, APL_NULL_STRING);
      strcpy(p_mt_ruloc_struct_h->h_access_stamp, chr_h_sys_access_stamp);
      strcpy(p_mt_ruloc_struct_h->h_newdt, chr_h_sys_access_stamp);


      if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)

         APL_GOBACK_FAIL

     memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Location is %s \n",p_mt_ruloc_struct_h->h_loc);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

     memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Location Name is %s \n",p_mt_ruloc_struct_h->h_locm);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

     memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Synthetic Location is %s \n",p_mt_ruloc_struct_h->h_syn_location);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

     memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"License no. is %s \n",p_mt_ruloc_struct_h->h_license_no);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

     memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Loc Type is %s \n",p_mt_ruloc_struct_h->h_loc_class);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

     memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Dep h_code is %s \n",p_mt_ruloc_struct_h->h_depo_cd);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

     memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Base Loc is %d",p_mt_ruloc_struct_h->h_baseloc);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

     memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Loc Op Dt is %s \n",p_mt_ruloc_struct_h->h_locopdate);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

     memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Loc Cl Dt is %s \n",p_mt_ruloc_struct_h->h_loccldate);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

     memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"DOC OP NO is %s \n",p_mt_ruloc_struct_h->h_nostr_cltptyp);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

     memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Nostro A/C Type is  %s \n",p_mt_ruloc_struct_h->h_nostr_clttyp);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Maker is %s \n",p_mt_ruloc_struct_h->h_maker);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Maker DT is <%s>\n",p_mt_ruloc_struct_h->h_maker_dt); // AIX -Warnings Removal
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"CHECKER IS <%s>\n",p_mt_ruloc_struct_h->h_checker); // AIX -Warnings Removal
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"CHECKER DT IS <%s>\n",p_mt_ruloc_struct_h->h_checker_dt); // AIX -Warnings Removal
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"ACCESS STAMP IS <%s>\n",p_mt_ruloc_struct_h->h_access_stamp); // AIX -Warnings Removal
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"INPUT DT IS <%s>\n",p_mt_ruloc_struct_h->h_newdt);  // AIX -Warnings Removal
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"LOCATION STATUS IS <%s>\n",p_mt_ruloc_struct_h->h_rulocstatus_ind); // AIX -Warnings Removal
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      EXEC SQL INSERT INTO DL_RULOCATION 
      VALUES (:p_mt_ruloc_struct_h:l_mt_ruloc_struct_ia);

      IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_REC_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
  }
  else if (strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_MODIFY) == 0)
  {

   if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         APL_GOBACK_FAIL

      strcpy((char *)chr_h_ruloc_status,STATUS_UAUTH);

      EXEC SQL UPDATE DL_RULOCATION
		SET LOC_NAME = :p_mt_ruloc_struct_h->h_locm:l_mt_ruloc_struct_ia->i_locm,
			 SYN_LOCATION = :p_mt_ruloc_struct_h->h_syn_location:l_mt_ruloc_struct_ia->i_syn_location,
          LICENSE_NO = :p_mt_ruloc_struct_h->h_license_no:l_mt_ruloc_struct_ia->i_license_no,
          LOC_TYPE = :p_mt_ruloc_struct_h->h_loc_class:l_mt_ruloc_struct_ia->i_loc_class,
    		 DEPO_CD = :p_mt_ruloc_struct_h->h_depo_cd:l_mt_ruloc_struct_ia->i_depo_cd,
  			 BASELOCATION = :p_mt_ruloc_struct_h->h_baseloc:l_mt_ruloc_struct_ia->i_baseloc,
  			 LOC_OPDATE = :p_mt_ruloc_struct_h->h_locopdate:l_mt_ruloc_struct_ia->i_locopdate,
 			 LOC_CLOSE_DT = :p_mt_ruloc_struct_h->h_loccldate:l_mt_ruloc_struct_ia->i_loccldate,
  			 NOSTR_CLTPID = :p_mt_ruloc_struct_h->h_nostr_cltptyp:l_mt_ruloc_struct_ia->i_nostr_cltptyp,
          NOSTR_CLTTYP = :p_mt_ruloc_struct_h->h_nostr_clttyp:l_mt_ruloc_struct_ia->i_nostr_clttyp,
			 maker = :p_intl_env_data_struct_h_d->usr:l_mt_ruloc_struct_ia->i_maker,
          maker_dt = :chr_h_sys_access_stamp:l_mt_ruloc_struct_ia->i_maker_dt,
          access_stamp = :chr_h_sys_access_stamp:l_mt_ruloc_struct_ia->i_access_stamp,
          checker = NULL,
          checker_dt = NULL,
          RU_LOC_STAT = :chr_h_ruloc_status
 		WHERE ROWID = :p_row_id_code;
	
      IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

   }

   
   else if (strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_DELETE) == 0)
  {

   if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         APL_GOBACK_FAIL

      strcpy((char *)chr_h_ruloc_status,STATUS_DEL_UAUTH);

      
               
                         
          
          
                 
                         
                         
                         
                         
      EXEC SQL UPDATE DL_RULOCATION    
      SET maker = :p_intl_env_data_struct_h_d->usr:l_mt_ruloc_struct_ia->i_maker,
          maker_dt = :chr_h_sys_access_stamp:l_mt_ruloc_struct_ia->i_maker_dt,
          access_stamp = :chr_h_sys_access_stamp:l_mt_ruloc_struct_ia->i_access_stamp,
          checker = NULL,
          checker_dt = NULL,
          RU_LOC_STAT = :chr_h_ruloc_status
                WHERE ROWID = :p_row_id_code;

      IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

   }  

   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      APL_FREE(l_mt_ruloc_struct_ia)

 		APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBUpdRRLocFn  SUCCESS \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      APL_FREE(l_mt_ruloc_struct_ia)

      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBUpdRRLocFn FAILURE \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_FAILURE);
   }

}




int CDBUsrAuthRRLocFn(char *chr_p_rrloc, char *p_user, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   VARCHAR       h_maker[APL_USERID_LEN];
   struct sqlca  sqlca;
   char          chr_l_buf[BUFFER_LEN];

   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   sqlca.sqlcode = 0;

   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CDBUsrAuthRRLocFn \n",NULL,NULL);
      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Location is %s \n",chr_p_rrloc);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);  
   
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"User is %s \n",p_user);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
   }

   EXEC SQL SELECT maker
   INTO :h_maker
   FROM DL_RULOCATION 
	WHERE LOC = :chr_p_rrloc;

   IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

   h_maker.arr[h_maker.len] = APL_NULL_CHAR;

   if (strcmp(p_user,(char *)h_maker.arr) == 0)  // AIX -Warnings Removal
   {
      CO_InsertErr(l_debug_info_ptr,ERR_MAKER_CHECKER_SAME,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);

      APL_GOBACK_FAIL
   }

   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBUsrAuthRRLocFn SUCCESS \n",NULL,NULL);
      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBUsrAuthRRLocFn FAILURE \n",NULL,NULL);
      return(APL_FAILURE);
   }
}




int CDBUpdRRLocOthFn(char *chr_p_rrloc,char *p_row_id_code,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
   struct sqlca         sqlca;
   int                  int_retval;
   char                 chr_h_ruloc_status[APL_STATUS_LEN];
   char                 chr_h_sys_access_stamp[APL_DATE_LEN];
   int                  int_h_flg = 0;
   char                 chr_l_buf[BUFFER_LEN];

   EXEC SQL VAR chr_h_ruloc_status IS STRING;

	#ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   sqlca.sqlcode = 0;

   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CDBUpdRRLocOthFn \n",NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Location is  %s \n",chr_p_rrloc);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h_d->h_mode);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
   }

   if(CO_RtvSysDtTime(chr_h_sys_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
      APL_GOBACK_FAIL

   if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         APL_GOBACK_FAIL

      

   if (strcmp(p_intl_env_data_struct_h_d->h_mode, APL_FUNC_AUTHORISE) == 0)
   {
      EXEC SQL SELECT RU_LOC_STAT
		INTO :chr_h_ruloc_status
		FROM DL_RULOCATION
  		WHERE ROWID = :p_row_id_code;

      IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

     if (strcmp(chr_h_ruloc_status, STATUS_UAUTH) == 0)
         strcpy((char *)chr_h_ruloc_status, STATUS_AUTH);
     else
         int_h_flg = 1;


     if (int_h_flg == 0)
      {
         if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
            APL_GOBACK_FAIL

         EXEC SQL UPDATE DL_RULOCATION 
			SET checker = :p_intl_env_data_struct_h_d->usr,
             checker_dt = :chr_h_sys_access_stamp,
             RU_LOC_STAT = :chr_h_ruloc_status,
				 access_stamp = :chr_h_sys_access_stamp
         WHERE ROWID = :p_row_id_code;

			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

         APL_GOBACK_SUCCESS
      }
      if (strcmp(chr_h_ruloc_status, STATUS_DEL_UAUTH) == 0)
      {
	 if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
            APL_GOBACK_FAIL

	 EXEC SQL DELETE DL_RULOCATION WHERE LOC =:chr_p_rrloc;
	 IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
	 APL_GOBACK_SUCCESS
      }

   }

   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBUpdRRLocOthFn SUCCESS \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBUpdRRLocOthFn FAILURE \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_FAILURE);
   }
}



int CDBChkRRProdDetFn(MT_RUPROD_STRUCT_H *p_mt_ruprod_struct_h_b, INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   struct sqlca      sqlca;
   int               int_retval;
   char              chr_h_field_val[40];
   char              chr_iexist,chr_iauthorised,chr_iclosed;
	char              chr_l_buf[BUFFER_LEN];
   int               int_l_count=0;
   char              h_prodstatus_ind[APL_STATUS_LEN];
   short             int_l_condexists = 0;
   char              chr_mainfuncarea[APL_MAINFUNCAREA_LEN];
   char              chr_l_condid[APL_CONDID_LEN];
   char              chr_l_prodtyp[2]    = APL_NULL_STRING;
	int               int_l_rowexists;
   char              chr_p_sys_date[APL_DATE_LEN];
   int               int_p_date_diff =0;
   int		     int_l_count_prod = 0; 


   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   sqlca.sqlcode = 0;

   APL_IF_DEBUG
   {

     CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CDBChkRRProdDetFn \n",NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Product is %s \n",p_mt_ruprod_struct_h_b->h_pr_code);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h_d->h_mode);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
   }
	
   if(strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_DELETE) == 0) 
   {
      int_l_count_prod = 0;
      EXEC SQL SELECT count(*) INTO :int_l_count_prod FROM DL_RUINSTRUMENT WHERE PR_CODE =:p_mt_ruprod_struct_h_b->h_pr_code;
      IS_ANY_ORA_ERROR

      if (int_l_count_prod != 0)
	{
		CO_InsertErr(l_debug_info_ptr,ERR_PRODCODE_CANT_DEL,p_mt_ruprod_struct_h_b->h_pr_code,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);	
		APL_GOBACK_FAIL
	}
   }  
	
	

    if (strlen(p_mt_ruprod_struct_h_b->h_ccy) != 0)
     {
			 int_retval = CO_Chk_CcyValid(p_mt_ruprod_struct_h_b->h_ccy,'M','Y',l_debug_info_ptr);

     }

		if (int_retval != APL_SUCCESS)
         APL_GOBACK_FAIL

     

     if (strlen(p_mt_ruprod_struct_h_b->h_loc) != 0)
		{
			CO_ProcMonitor(APL_OUT_FILE,"Calling GDBVALRRLocFn to check whether the Location exists in RRMM and authorised and not closed",NULL,NULL);
		
			chr_iexist = 'Y';
	      chr_iclosed = 'N';
   	   chr_iauthorised = 'Y';
      	int_retval = GDBValRRLocFn(p_mt_ruprod_struct_h_b->h_loc,chr_iexist,chr_iauthorised,chr_iclosed,l_debug_info_ptr);
	
   	}

 		  if (int_retval != APL_SUCCESS)
      	APL_GOBACK_FAIL

	  CO_ProcMonitor(APL_OUT_FILE,"Going to check the existence of Product Type",NULL,p_intl_env_data_struct_h_d);

		

      if ( strlen(p_mt_ruprod_struct_h_b->h_prdateyp) )
     {
            int_l_rowexists = 0;

            EXEC SQL Select 1
            into :int_l_rowexists
            From PRO_SGENSTAT
            where ((MAP_VAL = :p_mt_ruprod_struct_h_b->h_prdateyp) AND
                   (MAP_TYPE = 'RUPRDTYPE') AND
                   (NATION_CODE = :g_mt_commonsys_params_struct_h.nation_code));

            IS_ANY_ORA_ERROR;

            if (!int_l_rowexists)
            {
               if (  CO_InsertErr(   l_debug_info_ptr,
                                       ERR_INVALID_PRODTYPE,
													p_mt_ruprod_struct_h_b->h_prdateyp,
													APL_NULL_STRING,
                                       APL_NULL_STRING,
                                       __LINE__,
                                       __FILE__ ) == APL_FAILURE )
               {
                  APL_GOBACK_FAIL;
               }
            }
     }

     CO_ProcMonitor(APL_OUT_FILE,"Going to check the existence of Interest Type",NULL,p_intl_env_data_struct_h_d);
	
		

		if ( strlen(p_mt_ruprod_struct_h_b->h_intclass))
		{
			int_l_rowexists = 0;

            EXEC SQL Select 1
            into :int_l_rowexists
            From PRO_SGENSTAT
            where ((MAP_VAL = :p_mt_ruprod_struct_h_b->h_intclass) AND
                   (MAP_TYPE = 'RUINTTYPE') AND
                   (NATION_CODE = :g_mt_commonsys_params_struct_h.nation_code));

            IS_ANY_ORA_ERROR;

            if (!int_l_rowexists)
            {
               if (  CO_InsertErr(   l_debug_info_ptr,
                                       ERR_INVALID_INTTYPE, 	
                                       p_mt_ruprod_struct_h_b->h_intclass,
                                       APL_NULL_STRING,
                                       APL_NULL_STRING,
                                       __LINE__,
                                       __FILE__ ) == APL_FAILURE )
               {
                  APL_GOBACK_FAIL;
               }
            }
     }

     CO_ProcMonitor(APL_OUT_FILE,"Going to check the existence of DAYS/DT",NULL,p_intl_env_data_struct_h_d);

      

      if ( strlen(p_mt_ruprod_struct_h_b->h_daydate))
      {
         int_l_rowexists = 0;

            EXEC SQL Select 1
            into :int_l_rowexists
            From PRO_SGENSTAT
            where ((MAP_VAL = :p_mt_ruprod_struct_h_b->h_daydate) AND
                   (MAP_TYPE = 'RUDAY_DT') AND
                   (NATION_CODE = :g_mt_commonsys_params_struct_h.nation_code));

            IS_ANY_ORA_ERROR;

            if (!int_l_rowexists)
            {
               if (  CO_InsertErr(   l_debug_info_ptr,
                                       ERR_NOT_VALID_DAYDATE,
													p_mt_ruprod_struct_h_b->h_daydate,
                                       APL_NULL_STRING,
                                       APL_NULL_STRING,
                                       __LINE__,
                                       __FILE__ ) == APL_FAILURE )
               {
                  APL_GOBACK_FAIL;
               }
            }
     }

     CO_ProcMonitor(APL_OUT_FILE,"Going to check the existence of DAYS/YR",NULL,p_intl_env_data_struct_h_d);

      

      if ( strlen(p_mt_ruprod_struct_h_b->h_day_yr))
      {
         int_l_rowexists = 0;

            EXEC SQL Select 1
            into :int_l_rowexists
            From PRO_SGENSTAT
            where ((MAP_VAL = :p_mt_ruprod_struct_h_b->h_day_yr) AND
                   (MAP_TYPE = 'RUDAY_YR') AND
                   (NATION_CODE = :g_mt_commonsys_params_struct_h.nation_code));

            IS_ANY_ORA_ERROR;

            if (!int_l_rowexists)
            {
               if (  CO_InsertErr(   l_debug_info_ptr,
                                       ERR_NOT_VALID_DAYYEAR,
												   p_mt_ruprod_struct_h_b->h_day_yr,
                                       APL_NULL_STRING,
                                       APL_NULL_STRING,
                                       __LINE__,
                                       __FILE__ ) == APL_FAILURE )
               {
                  APL_GOBACK_FAIL;
               }
            }
     }


		

  CO_ProcMonitor(APL_OUT_FILE,"the record come for Modify shoult be an unauthorised record only.",NULL,p_intl_env_data_struct_h_d);


  if(strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_MODIFY) == 0)
  {
      EXEC SQL SELECT STATUS
		INTO :h_prodstatus_ind
		FROM DL_RUPRODUCT
		WHERE PR_CODE = :p_mt_ruprod_struct_h_b->h_pr_code;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

      if (strcmp(p_mt_ruprod_struct_h_b->h_prodstatus_ind,STATUS_UAUTH) !=0)
      {

         CO_InsertErr(l_debug_info_ptr,ERR_CANT_MODIFY,p_mt_ruprod_struct_h_b->h_prodstatus_ind,APL_NULL_STRING,
APL_NULL_STRING,__LINE__,__FILE__);
      }
  }

  APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBChkRRProdDetFn SUCCESS \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBChkRRProdDetFn FAILURE \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_FAILURE);
   }
}





int CDBUpdRRProdFn(MT_RUPROD_STRUCT_H *p_mt_ruprod_struct_h_b,char *p_row_id_code,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr )

{
   struct sqlca        sqlca;
   int                 int_retval;
   char                chr_h_field_val[40];
   char                chr_h_sys_access_stamp[APL_DATE_LEN];
   char                h_prodstatus_ind[APL_STATUS_LEN];
   MT_RUPROD_STRUCT_I  *l_mt_ruprod_struct_ia = NULL;
   char                chr_l_buf[BUFFER_LEN];
   short               int_l_condexists = 0;
   char chr_mainfuncarea[APL_MAINFUNCAREA_LEN];
   char chr_l_condid[APL_CONDID_LEN];

   EXEC SQL VAR p_mt_ruprod_struct_h_b->h_pr_code is STRING;
	EXEC SQL VAR p_mt_ruprod_struct_h_b->h_prdetail is STRING;
	EXEC SQL VAR p_mt_ruprod_struct_h_b->h_ccy is STRING;
	EXEC SQL VAR p_mt_ruprod_struct_h_b->h_daydate is STRING;
	EXEC SQL VAR p_mt_ruprod_struct_h_b->h_day_yr is STRING;
	EXEC SQL VAR p_mt_ruprod_struct_h_b->h_prdateyp is STRING;
	EXEC SQL VAR p_mt_ruprod_struct_h_b->h_intclass is STRING;
   EXEC SQL VAR p_mt_ruprod_struct_h_b->h_loc is STRING;

	#ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   sqlca.sqlcode = 0;

   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CDBUpdRRProdFn \n",NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"PRODUCT is %s \n",p_mt_ruprod_struct_h_b->h_pr_code);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h_d->h_mode);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
   }

   

   l_mt_ruprod_struct_ia = (MT_RUPROD_STRUCT_I *)calloc(1,sizeof(MT_RUPROD_STRUCT_I));
   APL_MALLOC_FAIL(l_mt_ruprod_struct_ia)

   

	l_mt_ruprod_struct_ia->i_pr_code = 0;
	l_mt_ruprod_struct_ia->i_prdetail = 0;
	l_mt_ruprod_struct_ia->i_ccy = 0;
	l_mt_ruprod_struct_ia->i_daydate = 0;
	l_mt_ruprod_struct_ia->i_day_yr = 0;
	l_mt_ruprod_struct_ia->i_prdateyp = 0;
	l_mt_ruprod_struct_ia->i_loc = 0;
   l_mt_ruprod_struct_ia->i_maker = 0;
	l_mt_ruprod_struct_ia->i_maker_dt = 0;
	l_mt_ruprod_struct_ia->i_access_stamp = 0;
	l_mt_ruprod_struct_ia->i_newdt = 0;
	l_mt_ruprod_struct_ia->i_prodstatus_ind = 0;

	

	if(strlen(p_mt_ruprod_struct_h_b->h_intclass) == 0)
      l_mt_ruprod_struct_ia->i_intclass = -1;
	else
		l_mt_ruprod_struct_ia->i_intclass = 0;

if (CO_RtvSysDtTime(chr_h_sys_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
      APL_GOBACK_FAIL

   if (strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_INPUT) == 0)
   {

   
      strcpy(p_mt_ruprod_struct_h_b->h_prodstatus_ind , STATUS_UAUTH);
      strcpy(p_mt_ruprod_struct_h_b->h_maker, p_intl_env_data_struct_h_d->usr);
      strcpy(p_mt_ruprod_struct_h_b->h_maker_dt, chr_h_sys_access_stamp);
      strcpy(p_mt_ruprod_struct_h_b->h_checker, APL_NULL_STRING);
      strcpy(p_mt_ruprod_struct_h_b->h_checker_dt, APL_NULL_STRING);
      strcpy(p_mt_ruprod_struct_h_b->h_access_stamp, chr_h_sys_access_stamp);
      strcpy(p_mt_ruprod_struct_h_b->h_newdt, chr_h_sys_access_stamp);


      if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)

         APL_GOBACK_FAIL

     memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"PRODUCT IS %s \n",p_mt_ruprod_struct_h_b->h_pr_code);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      EXEC SQL INSERT INTO DL_RUPRODUCT
		VALUES (:p_mt_ruprod_struct_h_b:l_mt_ruprod_struct_ia);

      IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_REC_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
  }
  else if (strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_MODIFY) == 0)
  {

   if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         APL_GOBACK_FAIL

		 strcpy((char *)h_prodstatus_ind,STATUS_UAUTH);

      EXEC SQL UPDATE DL_RUPRODUCT
		SET PR_DET = :p_mt_ruprod_struct_h_b->h_prdetail:l_mt_ruprod_struct_ia->i_prdetail,
			 MT_CURRENCY = :p_mt_ruprod_struct_h_b->h_ccy:l_mt_ruprod_struct_ia->i_ccy,
			 DAY_DATE = :p_mt_ruprod_struct_h_b->h_daydate:l_mt_ruprod_struct_ia->i_daydate,
			 DAY_YEAR = :p_mt_ruprod_struct_h_b->h_day_yr:l_mt_ruprod_struct_ia->i_day_yr,
			 PRD_TYPE = :p_mt_ruprod_struct_h_b->h_prdateyp:l_mt_ruprod_struct_ia->i_prdateyp,
			 INTTYPE = :p_mt_ruprod_struct_h_b->h_intclass:l_mt_ruprod_struct_ia->i_intclass,
		    LOC = :p_mt_ruprod_struct_h_b->h_loc:l_mt_ruprod_struct_ia->i_loc,
			 maker = :p_intl_env_data_struct_h_d->usr:l_mt_ruprod_struct_ia->i_maker,
          maker_dt = :chr_h_sys_access_stamp:l_mt_ruprod_struct_ia->i_maker_dt,
          access_stamp = :chr_h_sys_access_stamp:l_mt_ruprod_struct_ia->i_access_stamp,
          checker = NULL,
          checker_dt = NULL,
			 STATUS = :h_prodstatus_ind
		WHERE ROWID  = :p_row_id_code;

      IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

   }
   
   else if (strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_DELETE) == 0)
  {

  	 if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
        	 APL_GOBACK_FAIL

         strcpy((char *)h_prodstatus_ind,STATUS_DEL_UAUTH);

	 
                 
                         
                         
                         
                         
                         
          EXEC SQL UPDATE DL_RUPRODUCT            
          SET maker = :p_intl_env_data_struct_h_d->usr:l_mt_ruprod_struct_ia->i_maker,
          maker_dt = :chr_h_sys_access_stamp:l_mt_ruprod_struct_ia->i_maker_dt,
          access_stamp = :chr_h_sys_access_stamp:l_mt_ruprod_struct_ia->i_access_stamp,
          checker = NULL,
          checker_dt = NULL,
                         STATUS = :h_prodstatus_ind
                WHERE ROWID  = :p_row_id_code;

      IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

   }

   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      APL_FREE(l_mt_ruprod_struct_ia)

		APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBUpdRRProdFn  SUCCESS \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      APL_FREE(l_mt_ruprod_struct_ia)

      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBUpdRRProdFn FAILURE \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_FAILURE);
   }

}



int CDBUsrAuthRRProdFn(char *chr_p_rrprod, char *p_user, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   VARCHAR       h_maker[APL_USERID_LEN];
   struct sqlca  sqlca;
   char          chr_l_buf[BUFFER_LEN];

   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   sqlca.sqlcode = 0;

   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CDBUsrAuthRRProdFn \n",NULL,NULL);
      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Product is %s \n",chr_p_rrprod);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
		
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"User is %s \n",p_user);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
   }

   EXEC SQL SELECT maker
   INTO :h_maker
   FROM DL_RUPRODUCT
	WHERE PR_CODE = :chr_p_rrprod;

   IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

   h_maker.arr[h_maker.len] = APL_NULL_CHAR;

   if (strcmp(p_user,(char *)h_maker.arr) == 0) // AIX -Warnings Removal
   {
      CO_InsertErr(l_debug_info_ptr,ERR_MAKER_CHECKER_SAME,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);

      APL_GOBACK_FAIL
   }

   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBUsrAuthRRProdFn SUCCESS \n",NULL,NULL);
      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBUsrAuthRRProdFn FAILURE \n",NULL,NULL);
      return(APL_FAILURE);
   }
}




int CDBUpdRRProdOthFn(char *chr_p_rrprod,char *p_row_id_code,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
   struct sqlca         sqlca;
   int                  int_retval;
   char                 h_prodstatus_ind[APL_STATUS_LEN];
   char                 chr_h_sys_access_stamp[APL_DATE_LEN];
   int                  int_h_flg = 0;
   char                 chr_l_buf[BUFFER_LEN];

   EXEC SQL VAR h_prodstatus_ind is STRING;
	
	#ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   sqlca.sqlcode = 0;

   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CDBUpdRRProdOthFn \n",NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Product is %s \n",chr_p_rrprod);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h_d->h_mode);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
   }

   if(CO_RtvSysDtTime(chr_h_sys_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
      APL_GOBACK_FAIL

   if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         APL_GOBACK_FAIL

   if (strcmp(p_intl_env_data_struct_h_d->h_mode, APL_FUNC_AUTHORISE) == 0)
   {
      EXEC SQL SELECT STATUS
		INTO :h_prodstatus_ind
		FROM DL_RUPRODUCT
		WHERE ROWID = :p_row_id_code;

      IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

     if (strcmp(h_prodstatus_ind, STATUS_UAUTH) == 0)
         strcpy((char *)h_prodstatus_ind, STATUS_AUTH);
     else
         int_h_flg = 1;


     if (int_h_flg == 0)
      {
         if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
            APL_GOBACK_FAIL

         EXEC SQL UPDATE DL_RUPRODUCT
			SET checker = :p_intl_env_data_struct_h_d->usr,
             checker_dt = :chr_h_sys_access_stamp,
             STATUS = :h_prodstatus_ind,
				 access_stamp = :chr_h_sys_access_stamp
         WHERE ROWID = :p_row_id_code;

         IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

         APL_GOBACK_SUCCESS
      }
      if (strcmp(h_prodstatus_ind, STATUS_DEL_UAUTH) == 0)
      {
	  if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
            APL_GOBACK_FAIL
	  
	  EXEC SQL DELETE DL_RUPRODUCT WHERE PR_CODE =: chr_p_rrprod;
	  IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	  APL_GOBACK_SUCCESS
      } 
   }

   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBUpdRRProdOthFn SUCCESS \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBUpdRRProdOthFn FAILURE \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_FAILURE);
   }
}



int CDBChkRRSRNDetFn(MT_RUSRN_STRUCT_H *p_mt_rusrn_struct_h, INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   struct sqlca      sqlca;
   int               int_retval;
   char              chr_h_field_val[40];
   char              chr_iexist,chr_iauthorised,chr_iclosed,chr_ideleted,chr_ifrozen;
   char              chr_l_buf[BUFFER_LEN];
   int               int_l_count=0;
   char              h_srnstatus_ind[APL_STATUS_LEN];
   short             int_l_condexists = 0;
   char              chr_mainfuncarea[APL_MAINFUNCAREA_LEN];
   char              chr_l_condid[APL_CONDID_LEN];
   int               int_l_rowexists;
   char              chr_p_sys_date[APL_DATE_LEN];
   int               int_p_date_diff =0;
	int 					int_h_flg = 0;


   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   sqlca.sqlcode = 0;

   APL_IF_DEBUG
   {

     CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CDBChkRRSRNDetFn \n",NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"SRN is %s \n",p_mt_rusrn_struct_h->h_stat_reg_no);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"INSTR_CODE %s \n",p_mt_rusrn_struct_h->h_instr_code);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
	
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h_d->h_mode);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
   }

	

	if (strlen(p_mt_rusrn_struct_h->h_instr_code) != 0)
      {
			memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"INSTRUMENT IS :%s: \n",p_mt_rusrn_struct_h->h_instr_code);
			CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

		
         CO_ProcMonitor(APL_OUT_FILE,"Calling GDBVALInstrFn to check whether the instrument exists and authorised",NULL,NULL);

			chr_iexist = 'Y';
	      chr_ideleted = 'N';
   	   chr_ifrozen = 'N';

 	     int_retval = CO_Chk_InstrValid(p_mt_rusrn_struct_h->h_instr_code,chr_iexist,NULL,chr_ideleted,chr_ifrozen,NULL,NULL,l_debug_info_ptr);

		}

			if (int_retval != APL_SUCCESS)
         APL_GOBACK_FAIL


	

  CO_ProcMonitor(APL_OUT_FILE,"the record come for Modify shoult be an unauthorised record only.",NULL,p_intl_env_data_struct_h_d);


  if(strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_MODIFY) == 0)
  {
      EXEC SQL SELECT SRN_STAT INTO :h_srnstatus_ind
      FROM DL_RUSRN
		WHERE STAT_REG_NO = :p_mt_rusrn_struct_h->h_stat_reg_no 
		AND instr_code = :p_mt_rusrn_struct_h->h_instr_code;	

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

      if (strcmp(p_mt_rusrn_struct_h->h_srnstatus_ind,STATUS_UAUTH) !=0)
      {

         CO_InsertErr(l_debug_info_ptr,ERR_CANT_MODIFY,p_mt_rusrn_struct_h->h_srnstatus_ind,APL_NULL_STRING, APL_NULL_STRING,__LINE__,__FILE__);
      }
  }

  APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBChkSRNDetFn SUCCESS \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBChkSRNDetFn FAILURE \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_FAILURE);
   }
}




int CDBUpdRRSRNFn(MT_RUSRN_STRUCT_H *p_mt_rusrn_struct_h,char *p_row_id_code,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr )

{
   struct sqlca        sqlca;
   int                 int_retval;
   char                chr_h_field_val[40];
   char                chr_h_sys_access_stamp[APL_DATE_LEN];
   char                h_srnstatus_ind[APL_STATUS_LEN];
   MT_RUSRN_STRUCT_I  *l_mt_rusrn_struct_ia = NULL;
   char                chr_l_buf[BUFFER_LEN];
   short               int_l_condexists = 0;
   char chr_mainfuncarea[APL_MAINFUNCAREA_LEN];
   char chr_l_condid[APL_CONDID_LEN];
	int 						int_h_flg = 0;

   EXEC SQL VAR p_mt_rusrn_struct_h->h_stat_reg_no is STRING;
	EXEC SQL VAR p_mt_rusrn_struct_h->h_instr_code is STRING;
	EXEC SQL VAR p_mt_rusrn_struct_h->h_instr_name is STRING;
	EXEC SQL VAR p_mt_rusrn_struct_h->h_identiy_num is STRING;
	EXEC SQL VAR p_mt_rusrn_struct_h->h_srnstatus_ind is STRING;
	
	#ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   sqlca.sqlcode = 0;

   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CDBUpdRRSRNFn \n",NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"STATREGNO is <%s>\n",p_mt_rusrn_struct_h->h_stat_reg_no);	 // AIX -Warnings Removal
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
   }

   

	l_mt_rusrn_struct_ia = (MT_RUSRN_STRUCT_I *)calloc(1,sizeof(MT_RUSRN_STRUCT_I));
   APL_MALLOC_FAIL(l_mt_rusrn_struct_ia)

   

   l_mt_rusrn_struct_ia->i_stat_reg_no = 0;
	l_mt_rusrn_struct_ia->i_instr_code = 0;
	l_mt_rusrn_struct_ia->i_identiy_num = 0;
	l_mt_rusrn_struct_ia->i_maker = 0;
	l_mt_rusrn_struct_ia->i_maker_dt = 0;
   l_mt_rusrn_struct_ia->i_access_stamp = 0;
   l_mt_rusrn_struct_ia->i_newdt = 0;
   l_mt_rusrn_struct_ia->i_srnstatus_ind = 0;	

	

   if(strlen(p_mt_rusrn_struct_h->h_instr_name) == 0)
      l_mt_rusrn_struct_ia->i_instr_name = -1;
	else
		l_mt_rusrn_struct_ia->i_instr_name = 0;

	if (CO_RtvSysDtTime(chr_h_sys_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
      APL_GOBACK_FAIL

   if (strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_INPUT) == 0)
   {

   
      strcpy(p_mt_rusrn_struct_h->h_srnstatus_ind , STATUS_UAUTH);
      strcpy(p_mt_rusrn_struct_h->h_maker, p_intl_env_data_struct_h_d->usr);
      strcpy(p_mt_rusrn_struct_h->h_maker_dt, chr_h_sys_access_stamp);
      strcpy(p_mt_rusrn_struct_h->h_checker, APL_NULL_STRING);
  		strcpy(p_mt_rusrn_struct_h->h_checker_dt, APL_NULL_STRING);
      strcpy(p_mt_rusrn_struct_h->h_access_stamp, chr_h_sys_access_stamp);
      strcpy(p_mt_rusrn_struct_h->h_newdt, chr_h_sys_access_stamp);


      if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)

         APL_GOBACK_FAIL 

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"STAT REG NO IS %s \n",p_mt_rusrn_struct_h->h_stat_reg_no);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      EXEC SQL INSERT INTO DL_RUSRN
		VALUES (:p_mt_rusrn_struct_h:l_mt_rusrn_struct_ia);

      IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_REC_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
  }
  else if (strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_MODIFY) == 0)
  {

   if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         APL_GOBACK_FAIL

       strcpy((char *)h_srnstatus_ind,STATUS_UAUTH);

      EXEC SQL UPDATE DL_RUSRN
		SET instr_code =:p_mt_rusrn_struct_h->h_instr_code:l_mt_rusrn_struct_ia->i_instr_code,
			 instr_name = :p_mt_rusrn_struct_h->h_instr_name:l_mt_rusrn_struct_ia->i_instr_name,
			 IDENTIY_NUM = :p_mt_rusrn_struct_h->h_identiy_num:l_mt_rusrn_struct_ia->i_identiy_num,
			  maker = :p_intl_env_data_struct_h_d->usr:l_mt_rusrn_struct_ia->i_maker,
          maker_dt = :chr_h_sys_access_stamp:l_mt_rusrn_struct_ia->i_maker_dt,
          access_stamp = :chr_h_sys_access_stamp:l_mt_rusrn_struct_ia->i_access_stamp,
          checker = NULL,
          checker_dt = NULL,
          SRN_STAT = :h_srnstatus_ind
		WHERE ROWID = :p_row_id_code;

      IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

   }
   
   else if (strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_DELETE) == 0)
  {

   if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         APL_GOBACK_FAIL

       strcpy((char *)h_srnstatus_ind,STATUS_DEL_UAUTH);

      
                 
                         
      EXEC SQL UPDATE DL_RUSRN                   
      SET maker = :p_intl_env_data_struct_h_d->usr:l_mt_rusrn_struct_ia->i_maker,
          maker_dt = :chr_h_sys_access_stamp:l_mt_rusrn_struct_ia->i_maker_dt,
          access_stamp = :chr_h_sys_access_stamp:l_mt_rusrn_struct_ia->i_access_stamp,
          checker = NULL,
          checker_dt = NULL,
          SRN_STAT = :h_srnstatus_ind
                WHERE ROWID = :p_row_id_code;

      IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

   }

	if (strcmp(p_intl_env_data_struct_h_d->h_mode, APL_FUNC_AUTHORISE) == 0)
   {
      EXEC SQL SELECT SRN_STAT
		INTO :h_srnstatus_ind
		FROM DL_RUSRN
		WHERE ROWID =:p_row_id_code;

      IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

     if (strcmp(h_srnstatus_ind, STATUS_UAUTH) == 0)
         strcpy((char *)h_srnstatus_ind, STATUS_AUTH);
     else
         int_h_flg = 1;


     if (int_h_flg == 0)
      {
         if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
            APL_GOBACK_FAIL

         EXEC SQL UPDATE DL_RUSRN
			SET checker = :p_intl_env_data_struct_h_d->usr,
             checker_dt = :chr_h_sys_access_stamp,
             SRN_STAT = :h_srnstatus_ind,
             access_stamp = :chr_h_sys_access_stamp
         WHERE ROWID = :p_row_id_code;

			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

         APL_GOBACK_SUCCESS
      }
      
      if (strcmp(h_srnstatus_ind, STATUS_DEL_UAUTH) == 0)
      {
	 if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
            APL_GOBACK_FAIL

	 EXEC SQL DELETE DL_RUSRN WHERE STAT_REG_NO =: p_mt_rusrn_struct_h->h_stat_reg_no;
	 IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	 APL_GOBACK_SUCCESS
      }
       
   }

   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      APL_FREE(l_mt_rusrn_struct_ia)

		 APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBUpdRRSRNFn  SUCCESS \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      APL_FREE(l_mt_rusrn_struct_ia)

      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBUpdRRSRNFn FAILURE \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_FAILURE);
   }

}




int CDBUsrAuthRRSRNFn(char *p_rrsrn, char *p_rrinstrode, char *p_user, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   VARCHAR       h_maker[APL_USERID_LEN];
   struct sqlca  sqlca;
   char          chr_l_buf[BUFFER_LEN];

   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   sqlca.sqlcode = 0;

   APL_IF_DEBUG
	{
      CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CDBUsrAuthRRSRnFn \n",NULL,NULL);
      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"SRN Is %s \n",p_rrsrn);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"INSTR_CODE is %s \n",p_rrinstrode);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"User is %s \n",p_user);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
   }

   EXEC SQL SELECT maker
   INTO :h_maker
   FROM DL_RUSRN
	WHERE STAT_REG_NO =:p_rrsrn and instr_code = :p_rrinstrode;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

   h_maker.arr[h_maker.len] = APL_NULL_CHAR;

   if (strcmp(p_user,(char *)h_maker.arr) == 0)     // AIX -Warnings Removal
   {
      CO_InsertErr(l_debug_info_ptr,ERR_MAKER_CHECKER_SAME,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);

      APL_GOBACK_FAIL
   }

   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBUsrAuthRRRSrnFn SUCCESS \n",NULL,NULL);
      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBUsrAuthRRSrnFn FAILURE \n",NULL,NULL);
      return(APL_FAILURE);
   }
}



int CDBChkRRInstrDetFn(MT_RUINSTR_STRUCT_H *p_mt_ruinstr_struct_h, INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   struct sqlca      sqlca;
   int               int_retval;
   char              chr_h_field_val[40];
   char              chr_iexist,chr_iauthorised,chr_iclosed,chr_ideleted,chr_ifrozen;
   char              chr_l_buf[BUFFER_LEN];
   int               int_l_count=0;
   short             int_l_condexists = 0;
   char              chr_mainfuncarea[APL_MAINFUNCAREA_LEN];
   char              chr_l_condid[APL_CONDID_LEN];
   int               int_l_rowexists;
   char              chr_p_sys_date[APL_DATE_LEN];
   int               int_p_date_diff =0;
   int               int_h_flg = 0;
	char              chr_l_nobasinstr[7]         = APL_NULL_STRING;
	char              chr_h_secstatus[APL_STATUS_LEN];


   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   sqlca.sqlcode = 0;

   APL_IF_DEBUG
   {

     CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CDBChkRRInstrDetFn \n",NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"INSTR_CODE is %s \n",p_mt_ruinstr_struct_h->h_instr_code);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h_d->h_mode);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
   }

	

	if (strlen(p_mt_ruinstr_struct_h->h_instr_code) != 0)
   {
         memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"INSTRUMENT IS :%s: \n",p_mt_ruinstr_struct_h->h_instr_code);
         CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);


         CO_ProcMonitor(APL_OUT_FILE,"Calling GDBVALInstrFn to check whether the instrument exists and authorised",NULL,NULL);

         chr_iexist = 'Y';
         chr_ideleted = 'N';
         chr_ifrozen = 'N';

        int_retval = CO_Chk_InstrValid(p_mt_ruinstr_struct_h->h_instr_code,chr_iexist,NULL,chr_ideleted,chr_ifrozen,NULL,NULL,l_debug_info_ptr);

   }

	

	if ( strlen(p_mt_ruinstr_struct_h->h_stat_reg_no))
	{
            int_l_rowexists = 0;

            EXEC SQL Select 1
            into :int_l_rowexists
            From DL_RUSRN
				Where (STAT_REG_NO = :p_mt_ruinstr_struct_h->h_stat_reg_no and SRN_STAT = 'AA');

				if (!int_l_rowexists)
					APL_GOBACK_FAIL

	}

				

	

	if (strlen(p_mt_ruinstr_struct_h->h_pr_code) != 0)
   {
         memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"PRODUCT IS :%s:",p_mt_ruinstr_struct_h->h_pr_code);
         CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);


         CO_ProcMonitor(APL_OUT_FILE,"Calling GDBVALRRProdFn to check whether the Product exists and authorised",NULL,NULL);

         chr_iexist = 'Y';
			chr_iauthorised = 'Y';
			int_retval = GDBValRRProdFn(p_mt_ruinstr_struct_h->h_pr_code,chr_iexist,chr_iauthorised,l_debug_info_ptr);

			if (int_retval != APL_SUCCESS)
            APL_GOBACK_FAIL

   }

	CO_ProcMonitor(APL_OUT_FILE,"Going to check the existence of Instr Class  ",NULL,p_intl_env_data_struct_h_d);

  

	if ( strlen(p_mt_ruinstr_struct_h->h_instr_cldate))
	{
            int_l_rowexists = 0;

            EXEC SQL Select 1
            into :int_l_rowexists
            From PRO_SGENSTAT
            where ((MAP_VAL = :p_mt_ruinstr_struct_h->h_instr_cldate) AND
                   (MAP_TYPE = 'RUINSTRCLASS') AND
                   (NATION_CODE = :g_mt_commonsys_params_struct_h.nation_code));

            IS_ANY_ORA_ERROR;

            if (!int_l_rowexists)
            {
               if (  CO_InsertErr(   l_debug_info_ptr,
                                       ERR_INVALID_INSTRCLASS,
                                       p_mt_ruinstr_struct_h->h_instr_cldate,
                                       APL_NULL_STRING,
                                       APL_NULL_STRING,
                                       __LINE__,
                                       __FILE__ ) == APL_FAILURE )
               {
                  APL_GOBACK_FAIL;
               }
            }
     }

	CO_ProcMonitor(APL_OUT_FILE,"Going to check the existence of Instr TYPE ",NULL,p_intl_env_data_struct_h_d);

  

   if ( strlen(p_mt_ruinstr_struct_h->h_instr_class))
   {
            int_l_rowexists = 0;

            EXEC SQL Select 1
            into :int_l_rowexists
            From PRO_SGENSTAT
            where ((MAP_VAL = :p_mt_ruinstr_struct_h->h_instr_class) AND
                   (MAP_TYPE = 'RUTYPEOFINSTR') AND
                   (NATION_CODE = :g_mt_commonsys_params_struct_h.nation_code));

            IS_ANY_ORA_ERROR;

            if (!int_l_rowexists)
            {
               if (  CO_InsertErr(   l_debug_info_ptr,
                                       ERR_INVALID_TYPEOFINSTR,
                                       p_mt_ruinstr_struct_h->h_instr_class,
                                       APL_NULL_STRING,
                                       APL_NULL_STRING,
                                       __LINE__,
                                       __FILE__ ) == APL_FAILURE )
               {
                  APL_GOBACK_FAIL;
               }
            }
   }

	CO_ProcMonitor(APL_OUT_FILE,"BaseSEC should not be '000000' or '999999'",NULL,p_intl_env_data_struct_h_d);

    

       EXEC SQL SELECT FIELD_VAL INTO :chr_l_nobasinstr
       FROM PRO_GSSPLVAL
       WHERE MAIN_FUN = 'RUBASE_NO'
       AND SUB_PROCESS = 'RUBASE_NOA'
       AND NATION = :g_mt_commonsys_params_struct_h.nation_code;

   if (strcmp(ltoa(p_mt_ruinstr_struct_h->h_baseinstrument), chr_l_nobasinstr) == 0) //AIX -Warning Removal
   {
     //NandlaL
       CO_InsertErr(l_debug_info_ptr,ERR_BASENO_NOTALLOWED,ltoa(p_mt_ruinstr_struct_h->h_baseinstrument), APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
   }
   

    CO_ProcMonitor(APL_OUT_FILE,"SEC OP DT should bot be greater than system date",NULL,p_intl_env_data_struct_h_d);


    EXEC SQL SELECT SYS_DATE INTO :chr_p_sys_date
         FROM PRO_SYS_DATE;

    IS_ANY_ORA_ERROR

    if (CO_RtvSysDtTime(p_mt_ruinstr_struct_h->h_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
      {APL_GOBACK_FAIL }

      

         int_p_date_diff =0;

         if ( APL_FAILURE == CO_Pro_DateComp(p_mt_ruinstr_struct_h->h_instr_opdate,
                                    chr_p_sys_date,
                                    &int_p_date_diff,
                                    l_debug_info_ptr))
            {
              if(CO_InsertErr(   l_debug_info_ptr,
                           ERR_DATE_CANT_FUTURE,
                           
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           __LINE__,
                           __FILE__
                           ) != APL_SUCCESS)
              APL_GOBACK_FAIL
           }

	CO_ProcMonitor(APL_OUT_FILE,"the record come for Modify shoult be an unauthorised record only.",NULL,p_intl_env_data_struct_h_d);


  if(strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_MODIFY) == 0)
  {
      EXEC SQL SELECT RU_INSTR_STAT
		INTO :chr_h_secstatus
      FROM DL_RUINSTRUMENT
		WHERE instr_code =:p_mt_ruinstr_struct_h->h_instr_code;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

      if (strcmp(p_mt_ruinstr_struct_h->h_ruinstrstatus_ind,STATUS_UAUTH) !=0)
      {

         CO_InsertErr(l_debug_info_ptr,ERR_CANT_MODIFY,p_mt_ruinstr_struct_h->h_ruinstrstatus_ind,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
      }
  }

  APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBChkRRInstrDetFn SUCCESS \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBChkRRInstrDetFn FAILURE \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_FAILURE);
   }
}



int CDBUsrAuthRRInstrFn(char *p_rrinstr, char *p_user, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   VARCHAR       h_maker[APL_USERID_LEN];
   struct sqlca  sqlca;
   char          chr_l_buf[BUFFER_LEN];

   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   sqlca.sqlcode = 0;

   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CDBUsrAuthRRInstrFn \n",NULL,NULL);
      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"INSTR_CODE IS %s \n",p_rrinstr);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"User is %s \n",p_user);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
   }

   EXEC SQL SELECT maker
   INTO :h_maker
   FROM DL_RUINSTRUMENT
	WHERE instr_code = :p_rrinstr;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

   h_maker.arr[h_maker.len] = APL_NULL_CHAR;

   if (strcmp(p_user,(char *)h_maker.arr) == 0) // AIX -Warnings Removal
   {
      CO_InsertErr(l_debug_info_ptr,ERR_MAKER_CHECKER_SAME,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);

      APL_GOBACK_FAIL
   }

   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBUsrAuthRRInstrFn SUCCESS \n",NULL,NULL);
      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBUsrAuthRRInstrFn FAILURE \n",NULL,NULL);
      return(APL_FAILURE);
   }
}




int CDBUpdRRInstrFn(MT_RUINSTR_STRUCT_H*p_mt_ruinstr_struct_h,char *p_row_id_code,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr )

{
   struct sqlca        sqlca;
   int                 int_retval;
   char                chr_h_field_val[40];
   char                chr_h_sys_access_stamp[APL_DATE_LEN];
   char                h_ruinstrstatus_ind[APL_STATUS_LEN];
   MT_RUINSTR_STRUCT_I  *l_mt_ruinstr_struct_ia = NULL;
	char                chr_l_buf[BUFFER_LEN];
   short               int_l_condexists = 0;
   char chr_mainfuncarea[APL_MAINFUNCAREA_LEN];
   char chr_l_condid[APL_CONDID_LEN];
	int 					  int_h_flg = 0;

   EXEC SQL VAR p_mt_ruinstr_struct_h->h_instr_code is STRING;
	EXEC SQL VAR p_mt_ruinstr_struct_h->h_instr_nm is STRING;
	EXEC SQL VAR p_mt_ruinstr_struct_h->h_snm_ind is STRING;
	EXEC SQL VAR p_mt_ruinstr_struct_h->h_stat_reg_no is STRING;
	EXEC SQL VAR p_mt_ruinstr_struct_h->h_instr_opdate is STRING;
	EXEC SQL VAR p_mt_ruinstr_struct_h->h_instrcldate is STRING;
	EXEC SQL VAR p_mt_ruinstr_struct_h->h_instr_cldate is STRING;
	EXEC SQL VAR p_mt_ruinstr_struct_h->h_instr_class is STRING;
	EXEC SQL VAR p_mt_ruinstr_struct_h->h_pr_code is STRING;
	
	#ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   sqlca.sqlcode = 0;

   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CDBUpdRRInstrFn \n",NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"INSTRUMENTis %s \n",p_mt_ruinstr_struct_h->h_instr_code);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h_d->h_mode);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);
   }

   

	l_mt_ruinstr_struct_ia = (MT_RUINSTR_STRUCT_I *)calloc(1,sizeof(MT_RUINSTR_STRUCT_I));
   APL_MALLOC_FAIL(l_mt_ruinstr_struct_ia)

   


   l_mt_ruinstr_struct_ia->i_instr_code = 0;
	l_mt_ruinstr_struct_ia->i_instr_nm = 0;
	l_mt_ruinstr_struct_ia->i_snm_ind = 0;
	l_mt_ruinstr_struct_ia->i_stat_reg_no = 0;
	l_mt_ruinstr_struct_ia->i_instr_opdate = 0;
	l_mt_ruinstr_struct_ia->i_instr_cldate = 0;
	l_mt_ruinstr_struct_ia->i_baseinstrument = 0;
	l_mt_ruinstr_struct_ia->i_instr_class = 0;
	l_mt_ruinstr_struct_ia->i_pr_code = 0;
	l_mt_ruinstr_struct_ia->i_maker = 0;
	l_mt_ruinstr_struct_ia->i_maker_dt = 0;
	l_mt_ruinstr_struct_ia->i_access_stamp = 0;
	l_mt_ruinstr_struct_ia->i_newdt = 0;
	l_mt_ruinstr_struct_ia->i_ruinstrstatus_ind = 0;
	
	
	
   if(strlen(p_mt_ruinstr_struct_h->h_instrcldate) == 0)
      l_mt_ruinstr_struct_ia->i_instrcldate = -1;
	else
      l_mt_ruinstr_struct_ia->i_instrcldate = 0;

	if (CO_RtvSysDtTime(chr_h_sys_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
      APL_GOBACK_FAIL

   if (strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_INPUT) == 0)
   {

   
      strcpy(p_mt_ruinstr_struct_h->h_ruinstrstatus_ind, STATUS_UAUTH);
      strcpy(p_mt_ruinstr_struct_h->h_maker, p_intl_env_data_struct_h_d->usr);
      strcpy(p_mt_ruinstr_struct_h->h_maker_dt, chr_h_sys_access_stamp);
      strcpy(p_mt_ruinstr_struct_h->h_checker, APL_NULL_STRING);
      strcpy(p_mt_ruinstr_struct_h->h_checker_dt, APL_NULL_STRING);
      strcpy(p_mt_ruinstr_struct_h->h_access_stamp, chr_h_sys_access_stamp);
      strcpy(p_mt_ruinstr_struct_h->h_newdt, chr_h_sys_access_stamp);


      if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)

         APL_GOBACK_FAIL

     memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
      sprintf(chr_l_buf,"INSTR_CODE IS %s \n",p_mt_ruinstr_struct_h->h_instr_code);
      CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

      EXEC SQL INSERT INTO DL_RUINSTRUMENT
		VALUES (:p_mt_ruinstr_struct_h:l_mt_ruinstr_struct_ia);

      IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_REC_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
  }
  else if (strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_MODIFY) == 0)
  {

   if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         APL_GOBACK_FAIL

       strcpy((char *)h_ruinstrstatus_ind,STATUS_UAUTH);

      EXEC SQL UPDATE DL_RUINSTRUMENT
		SET SEC_NM = :p_mt_ruinstr_struct_h->h_instr_nm:l_mt_ruinstr_struct_ia->i_instr_nm,
			 SNM_IND = :p_mt_ruinstr_struct_h->h_snm_ind:l_mt_ruinstr_struct_ia->i_snm_ind,
			 STAT_REG_NO = :p_mt_ruinstr_struct_h->h_stat_reg_no:l_mt_ruinstr_struct_ia->i_stat_reg_no,
          INSTRUMENT_OPDT = :p_mt_ruinstr_struct_h->h_instr_opdate:l_mt_ruinstr_struct_ia->i_instr_opdate,
          SEC_CLDATE = :p_mt_ruinstr_struct_h->h_instrcldate:l_mt_ruinstr_struct_ia->i_instrcldate,
          SEC_CLS = :p_mt_ruinstr_struct_h->h_instr_cldate:l_mt_ruinstr_struct_ia->i_instr_cldate,
			 BASEINSTRUMENT = :p_mt_ruinstr_struct_h->h_baseinstrument:l_mt_ruinstr_struct_ia->i_baseinstrument,
          TYPEOFINSTR = :p_mt_ruinstr_struct_h->h_instr_class:l_mt_ruinstr_struct_ia->i_instr_class,
          PR_CODE = :p_mt_ruinstr_struct_h->h_pr_code:l_mt_ruinstr_struct_ia->i_pr_code,
          maker = :p_intl_env_data_struct_h_d->usr:l_mt_ruinstr_struct_ia->i_maker,
          maker_dt = :chr_h_sys_access_stamp:l_mt_ruinstr_struct_ia->i_maker_dt,
          access_stamp = :chr_h_sys_access_stamp:l_mt_ruinstr_struct_ia->i_access_stamp,
          checker = NULL,
          checker_dt = NULL,
          RU_INSTR_STAT = :h_ruinstrstatus_ind
		WHERE ROWID  = :p_row_id_code;

      IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

   }
   
   else if (strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_DELETE) == 0)
  {

   if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         APL_GOBACK_FAIL

       strcpy((char *)h_ruinstrstatus_ind,STATUS_DEL_UAUTH);

      
                 
                         
                         
          
          
          
                         
          
      EXEC SQL UPDATE DL_RUINSTRUMENT    
      SET maker = :p_intl_env_data_struct_h_d->usr:l_mt_ruinstr_struct_ia->i_maker,
          maker_dt = :chr_h_sys_access_stamp:l_mt_ruinstr_struct_ia->i_maker_dt,
          access_stamp = :chr_h_sys_access_stamp:l_mt_ruinstr_struct_ia->i_access_stamp,
          checker = NULL,
          checker_dt = NULL,
          RU_INSTR_STAT = :h_ruinstrstatus_ind
                WHERE ROWID  = :p_row_id_code;

      IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

   } 

	if (strcmp(p_intl_env_data_struct_h_d->h_mode, APL_FUNC_AUTHORISE) == 0)
   {
      EXEC SQL SELECT RU_INSTR_STAT
		INTO :h_ruinstrstatus_ind
		FROM DL_RUINSTRUMENT
		WHERE ROWID =:p_row_id_code;

      IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

     if (strcmp(h_ruinstrstatus_ind, STATUS_UAUTH) == 0)
         strcpy((char *)h_ruinstrstatus_ind, STATUS_AUTH);
     else
         int_h_flg = 1;


     if (int_h_flg == 0)
      {
         if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
            APL_GOBACK_FAIL

         EXEC SQL UPDATE DL_RUINSTRUMENT
			SET checker = :p_intl_env_data_struct_h_d->usr,
             checker_dt = :chr_h_sys_access_stamp,
             RU_INSTR_STAT = :h_ruinstrstatus_ind,
				 access_stamp = :chr_h_sys_access_stamp
         WHERE ROWID = :p_row_id_code;

         IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

         APL_GOBACK_SUCCESS
      }
      
      if (strcmp(h_ruinstrstatus_ind,STATUS_DEL_UAUTH) == 0)
      {
	 if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
            APL_GOBACK_FAIL

	 EXEC SQL DELETE DL_RUINSTRUMENT WHERE instr_code =:p_mt_ruinstr_struct_h->h_instr_code;
	 IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

         APL_GOBACK_SUCCESS
      }  
   }

	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      APL_FREE(l_mt_ruinstr_struct_ia)

       APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBUpdRRInstrFn  SUCCESS \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      APL_FREE(l_mt_ruinstr_struct_ia)

      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBUpdRRInstrFn FAILURE \n",NULL,p_intl_env_data_struct_h_d);

      return(APL_FAILURE);
   }

}


	



	
 
