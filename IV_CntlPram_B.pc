




#include "stdio_64.h"
#include <stdlib.h>
#include <string.h>

#include "IV_Control_A.h"

EXEC SQL INCLUDE SQLCA;



int IV_Mod_LockIVCNTLPARAM(DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	
 SYS_IVCONTROLPARAM_STRUCT l_sys_ivcontrol_param_struct;
 I_SYS_IVCONTROLPARAM_STRUCT l_i_sys_ivcontrolparam_struct;

	EXEC SQL BEGIN DECLARE SECTION;

		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

 memset(&l_sys_ivcontrol_param_struct,APL_NULL_CHAR,sizeof(SYS_IVCONTROLPARAM_STRUCT));

	EXEC SQL SELECT * into :l_sys_ivcontrol_param_struct:l_i_sys_ivcontrolparam_struct
		 FROM SYS_IVCONTROLPARAM
		 FOR UPDATE OF B_UPTO_DATE;

	IS_ANY_ORA_ERROR

	if APL_ZERO_RESULT_SET
	{
		CO_InsertErr(l_debug_info_ptr, ERR_BILLCNTRL_PARAM_NOTFND, APL_NULL_STRING, 
			       APL_NULL_STRING, APL_NULL_STRING, __LINE__, 
			       __FILE__);

		APL_GOBACK_FAIL
	}

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Mod_LockIVCNTLPARAM().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
IV_Mod_LockIVCNTLPARAM().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_Mod_NewIVCNTLPARAM(const SYS_IVCONTROLPARAM_STRUCT *p_sys_ivcontrolparam_struct, int *int_p_retstat, 
		     DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	

	EXEC SQL BEGIN DECLARE SECTION;

		SYS_IVCONTROLPARAM_STRUCT l_sys_ivcontrol_param_struct;
		EXEC SQL VAR l_sys_ivcontrol_param_struct.b_prev_date IS STRING;
		EXEC SQL VAR l_sys_ivcontrol_param_struct.b_upto_date IS STRING;
		EXEC SQL VAR l_sys_ivcontrol_param_struct.b_processdt IS STRING;
		EXEC SQL VAR l_sys_ivcontrol_param_struct.b_dlv_date IS STRING;
		EXEC SQL VAR l_sys_ivcontrol_param_struct.last_dlv_date IS STRING;
		EXEC SQL VAR l_sys_ivcontrol_param_struct.last_rpt_date IS STRING;

		I_SYS_IVCONTROLPARAM_STRUCT l_i_sys_ivcontrolparam_struct = {0, 0, 0, 0, 0, 
						  0, 0, 0, 0, 0};
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	memset(l_sys_ivcontrol_param_struct.b_prev_date, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_sys_ivcontrol_param_struct.b_upto_date, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_sys_ivcontrol_param_struct.b_processdt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_sys_ivcontrol_param_struct.b_dlv_date, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_sys_ivcontrol_param_struct.archival_dt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_sys_ivcontrol_param_struct.last_dlv_date, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_sys_ivcontrol_param_struct.last_rpt_date, APL_NULL_CHAR, APL_DATE_LEN);

	strcpy(l_sys_ivcontrol_param_struct.b_prev_date, p_sys_ivcontrolparam_struct->b_prev_date);
	strcpy(l_sys_ivcontrol_param_struct.b_upto_date, p_sys_ivcontrolparam_struct->b_upto_date);
	strcpy(l_sys_ivcontrol_param_struct.b_processdt, p_sys_ivcontrolparam_struct->b_processdt);
	strcpy(l_sys_ivcontrol_param_struct.b_dlv_date, p_sys_ivcontrolparam_struct->b_dlv_date);

	l_sys_ivcontrol_param_struct.generate_ind = 'N';
	l_sys_ivcontrol_param_struct.ae_ind = 'N';
	l_sys_ivcontrol_param_struct.b_gen_ind = 'N';

	l_i_sys_ivcontrolparam_struct.i_arch_date = -1;
	l_i_sys_ivcontrolparam_struct.i_lst_dlv_date = -1;
	l_i_sys_ivcontrolparam_struct.i_lst_rpt_date = -1;

	EXEC SQL INSERT INTO SYS_IVCONTROLPARAM
		 VALUES (:l_sys_ivcontrol_param_struct INDICATOR :l_i_sys_ivcontrolparam_struct);

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Mod_NewIVCNTLPARAM().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
IV_Mod_NewIVCNTLPARAM().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}


int IV_Mod_IVBCNTLPARAMMnt(const SYS_IVCONTROLPARAM_STRUCT *p_sys_ivcontrolparam_struct, int *int_p_retstat, 
			DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	

	EXEC SQL BEGIN DECLARE SECTION;

		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	EXEC SQL UPDATE SYS_IVCONTROLPARAM
		 SET B_UPTO_DATE = :p_sys_ivcontrolparam_struct->b_upto_date, 
		     B_PROCESSDT = :p_sys_ivcontrolparam_struct->b_processdt, 
		     B_DLV_DATE = :p_sys_ivcontrolparam_struct->b_dlv_date;

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}
	else if APL_ZERO_RESULT_SET
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		APL_GOBACK_FAIL
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Mod_IVBCNTLPARAMMnt().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
IV_Mod_IVBCNTLPARAMMnt().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}
