

#include "CO_HostStructdef.h"

EXEC SQL INCLUDE SQLCA.H;




                                                                   
 

int GDBValCustFn(char *p_client, char p_exist, char p_auth, char p_closed, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{







   

   struct sqlca sqlca;
   MT_RUCLIENT_STRUCT_H l_mt_ruclient_struct_h;
   MT_RUCLIENT_STRUCT_I l_mt_ruclient_struct_ia_a;
   short success_flg = APL_SUCCESS;

   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif
   
   memset(&l_mt_ruclient_struct_h, NULL, sizeof(MT_RUCLIENT_STRUCT_H));
   memset(&l_mt_ruclient_struct_ia_a, NULL, sizeof(MT_RUCLIENT_STRUCT_I));
   sqlca.sqlcode = 0;

   #ifdef SYS_DEBUG
      fprintf(APL_OUT_FILE, "Entered Function GDBValCustFn\n");
      fprintf(APL_OUT_FILE, "The Account Number is : %s\n", p_client);
      fprintf(APL_OUT_FILE, "The Exist Flag is : %c\n", p_exist);
      fprintf(APL_OUT_FILE, "The Authorisation Flag is : %c\n", p_auth);
      fprintf(APL_OUT_FILE, "The Closed Flag is : %c\n", p_closed);
   #endif

   

   if ( !strlen(p_client) )
   {
      APL_DATA_MISSING("Account", APL_NULL_STRING, APL_NULL_STRING);
      APL_GOBACK_FAIL;
   }

   

   if (p_exist == NULL) p_exist = 'Y';

   

   EXEC SQL SELECT * INTO :l_mt_ruclient_struct_h:l_mt_ruclient_struct_ia_a FROM DL_RUCLIENT
   WHERE CLIENT=:p_client;

   IS_ANY_ORA_ERROR;
   
   

   if ( (sqlca.sqlcode == 1403) && (p_exist == 'Y') )
   {
      CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_FND, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__);
      APL_GOBACK_FAIL;
   }

   if ( (sqlca.sqlcode == 0) && (p_exist == 'N') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_EXST, p_client, APL_NULL_STRING, APL_NULL_STRING,
__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }


   

   if ( (l_mt_ruclient_struct_ia_a.i_checker_dt == -1) && (p_auth=='Y') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_UNAUTH, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   if ( (l_mt_ruclient_struct_ia_a.i_checker_dt != -1 ) && (p_auth=='N') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_MSG_ACCOUNT_AUTH, p_client, APL_NULL_STRING, APL_NULL_STRING,
__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   

   if ( (strcmp(l_mt_ruclient_struct_h.h_cltstatus, STATUS_CLS_UAUTH) && strcmp(l_mt_ruclient_struct_h.h_cltstatus, STATUS_CLS_AUTH)) &&  (p_closed=='Y') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_CLOSED, p_client, APL_NULL_STRING, APL_NULL_STRING,
__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   if ( ( (!strcmp(l_mt_ruclient_struct_h.h_cltstatus, STATUS_CLS_UAUTH)) || (!strcmp(l_mt_ruclient_struct_h.h_cltstatus, STATUS_CLS_AUTH)) ) &&   (p_closed=='N') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_CLOSED, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__,__FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   

   if (APL_FAILURE == success_flg )
   {
      APL_GOBACK_FAIL;
   }
   else
   {
      APL_GOBACK_SUCCESS;
   }

   RETURN_SUCCESS :
      #ifdef SYS_DEBUG
         fprintf(APL_OUT_FILE,"Leaving Function GDBValCustFn with success\n");
      #endif
      return(APL_SUCCESS);

   RETURN_FAILURE :
      #ifdef SYS_DEBUG
         fprintf(APL_OUT_FILE,"Leaving Function GDBValCustFn with failure\n");
      #endif
      return(APL_FAILURE);
}




int GDBValCustAccFn(char *p_client, char p_exist, char p_cubk,char p_cltclass, char p_auth, char p_del, char p_frozen, char p_closed, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

  



   

   struct sqlca sqlca;
   MT_CLIENT_STRUCT_H l_mt_ruclient_struct_h;
   MT_CLIENT_STRUCT_I l_mt_ruclient_struct_ia_a;
   short success_flg = APL_SUCCESS;

   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   memset(&l_mt_ruclient_struct_h, NULL, sizeof(MT_CLIENT_STRUCT_H));
   memset(&l_mt_ruclient_struct_ia_a, NULL, sizeof(MT_CLIENT_STRUCT_I));
   sqlca.sqlcode = 0;

   #ifdef SYS_DEBUG
      fprintf(APL_OUT_FILE, "Entered Function GDBValCustAccFn\n");
      fprintf(APL_OUT_FILE, "The Account Number is : %s\n", p_client);
      fprintf(APL_OUT_FILE, "The Exist Flag is : %c\n", p_exist);
      fprintf(APL_OUT_FILE, "The Cubk Flag is : %c\n", p_cubk);
      fprintf(APL_OUT_FILE, "The Account Class is : %c\n", p_cltclass);
      fprintf(APL_OUT_FILE, "The Authorisation Flag is : %c\n", p_auth);
      fprintf(APL_OUT_FILE, "The Delete Flag is : %c\n", p_del);
      fprintf(APL_OUT_FILE, "The Frozen Flag is : %c\n", p_frozen);
      fprintf(APL_OUT_FILE, "The Closed Flag is : %c\n", p_closed);
   #endif

   

   if ( !strlen(p_client) )
   {
      APL_DATA_MISSING("Account", APL_NULL_STRING, APL_NULL_STRING);
      APL_GOBACK_FAIL;
   }

   

   if (p_exist == NULL) p_exist = 'Y';


   
/*
   EXEC SQL SELECT * INTO :l_mt_ruclient_struct_h:l_mt_ruclient_struct_ia_a FROM MT_CLIENT
   WHERE CLN_CODE=:p_client;
*/

   EXEC SQL SELECT CLN_BRK_ALL,CLN_CLAS,STATUS INTO 
		:l_mt_ruclient_struct_h.h_clt_brk_all:l_mt_ruclient_struct_ia_a.i_clt_brk_all, 
		:l_mt_ruclient_struct_h.h_clt_class:l_mt_ruclient_struct_ia_a.i_clt_class, 
		:l_mt_ruclient_struct_h.h_checker_dt:l_mt_ruclient_struct_ia_a.i_checker_dt
		FROM MT_CLIENT
   WHERE CLN_CODE=:p_client;

   IS_ANY_ORA_ERROR;


   

   if ( (sqlca.sqlcode == 1403) && (p_exist == 'Y') )
   {
      CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_FND, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__);
      APL_GOBACK_FAIL;
   }

   if ( (sqlca.sqlcode == 0) && (p_exist == 'N') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_EXST, p_client, APL_NULL_STRING, APL_NULL_STRING,
__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

    

   l_mt_ruclient_struct_h.h_clt_brk_all[1] = '\0';
   if ( (l_mt_ruclient_struct_h.h_clt_brk_all[0] == 'B') && (p_cubk=='C') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_CUSTOMER, p_client, APL_NULL_STRING, APL_NULL_STRING,
__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   if ( (l_mt_ruclient_struct_h.h_clt_brk_all[0] == 'C') && (p_cubk=='B') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_BRK, p_client, APL_NULL_STRING,
APL_NULL_STRING,__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;

   }

   if ( (l_mt_ruclient_struct_h.h_clt_brk_all[0] != 'A') && (p_cubk=='A') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_DEALER, p_client, APL_NULL_STRING,
APL_NULL_STRING,__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   
    l_mt_ruclient_struct_h.h_clt_class[2] = '\0';
   if ( (l_mt_ruclient_struct_h.h_clt_class[0] == '1' ) && (p_cltclass == '2') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_COREACC_NOTPROP, p_client, APL_NULL_STRING, APL_NULL_STRING
,__LINE__, __FILE__) )
      {
        APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   

   if ( (l_mt_ruclient_struct_ia_a.i_checker_dt == -1) && (p_auth=='Y') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_UNAUTH, p_client, APL_NULL_STRING, APL_NULL_STRING,__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   if ( (l_mt_ruclient_struct_ia_a.i_checker_dt != -1 ) && (p_auth=='N') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_MSG_ACCOUNT_AUTH, p_client, APL_NULL_STRING, APL_NULL_STRING,
__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

  

   l_mt_ruclient_struct_h.h_clt_status[2]='\0';
   if ( (strcmp(l_mt_ruclient_struct_h.h_clt_status, STATUS_DEL_UAUTH)) && (p_del=='Y') )
   {
     if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_MARKEDFORDEL, p_client, APL_NULL_STRING, APL_NULL_STRING,__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   if ( (!strcmp(l_mt_ruclient_struct_h.h_clt_status, STATUS_DEL_UAUTH)) && (p_del=='N') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_MARKEDFORDEL, p_client, APL_NULL_STRING, APL_NULL_STRING,__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   

   if ( (strcmp(l_mt_ruclient_struct_h.h_clt_status, STATUS_FROZ_UAUTH) && strcmp(l_mt_ruclient_struct_h.h_clt_status, STATUS_FROZ_AUTH)) && (p_frozen=='Y') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_FRZN, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   if ( ( (!strcmp(l_mt_ruclient_struct_h.h_clt_status, STATUS_FROZ_UAUTH)) || (!strcmp(l_mt_ruclient_struct_h.h_clt_status, STATUS_FROZ_AUTH)) ) && (p_frozen=='N') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_FRZN, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__,__FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   

   if ( (strcmp(l_mt_ruclient_struct_h.h_clt_status, STATUS_CLS_UAUTH) && strcmp(l_mt_ruclient_struct_h.h_clt_status, STATUS_CLS_AUTH)) && (p_closed=='Y') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_CLOSED, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   if ( ( (!strcmp(l_mt_ruclient_struct_h.h_clt_status, STATUS_CLS_UAUTH)) || (!strcmp(l_mt_ruclient_struct_h.h_clt_status, STATUS_CLS_AUTH)) ) && (p_closed=='N') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_CLOSED, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }
  
  

   if (APL_FAILURE == success_flg )
   {
      APL_GOBACK_FAIL;
   }
   else
   {
      APL_GOBACK_SUCCESS;
   }

   RETURN_SUCCESS :
      #ifdef SYS_DEBUG
         fprintf(APL_OUT_FILE,"Leaving Function GDBValCustAccFn with success\n");
      #endif
      return(APL_SUCCESS);

   RETURN_FAILURE :
      #ifdef SYS_DEBUG
         fprintf(APL_OUT_FILE,"Leaving Function GDBValCustAccFn with failure\n");
      #endif
      return(APL_FAILURE);
}

 

 int GDBValRRLocFn(char *p_location, char p_exist, char p_auth, char p_closed, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{







   

   struct sqlca sqlca;
   MT_RULOC_STRUCT_H l_mt_ruloc_struct_h;
	MT_RULOC_STRUCT_I l_mt_ruloc_struct_i;
   short success_flg = APL_SUCCESS;

   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   memset(&l_mt_ruloc_struct_h, NULL, sizeof(MT_RULOC_STRUCT_H));
   memset(&l_mt_ruloc_struct_i, NULL, sizeof(MT_RULOC_STRUCT_I));
   sqlca.sqlcode = 0;

   #ifdef SYS_DEBUG
      fprintf(APL_OUT_FILE, "Entered Function GDBValRRLocFn\n");
      fprintf(APL_OUT_FILE, "The Location is : %s\n", p_location);
      fprintf(APL_OUT_FILE, "The Exist Flag is : %c\n", p_exist);
      fprintf(APL_OUT_FILE, "The Authorisation Flag is : %c\n", p_auth);
      fprintf(APL_OUT_FILE, "The Closed Flag is : %c\n", p_closed);
   #endif

   

   if ( !strlen(p_location) )
   {
      APL_DATA_MISSING("Location", APL_NULL_STRING, APL_NULL_STRING);
      APL_GOBACK_FAIL;
   }

   

   if (p_exist == NULL) p_exist = 'Y';

   

   EXEC SQL SELECT * INTO :l_mt_ruloc_struct_h:l_mt_ruloc_struct_i FROM DL_RULOCATION
	WHERE LOC=:p_location;

	IS_ANY_ORA_ERROR;

   

   if ( (sqlca.sqlcode == 1403) && (p_exist == 'Y') )
   {
      CO_InsertErr(l_debug_info_ptr, ERR_LOCN_NOTFND, p_location, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__);
      APL_GOBACK_FAIL;
   }

   if ( (sqlca.sqlcode == 0) && (p_exist == 'N') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_EXST, p_location, APL_NULL_STRING, APL_NULL_STRING,__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }


   

   if ( (l_mt_ruloc_struct_i.i_checker_dt == -1) && (p_auth=='Y') )
   {
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_LOCN_NOT_AUTHORIZED, p_location, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   if ( (l_mt_ruloc_struct_i.i_checker_dt != -1 ) && (p_auth=='N') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_LOCN_AUTHORIZED, p_location, APL_NULL_STRING, APL_NULL_STRING,__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   

   if ( (strcmp(l_mt_ruloc_struct_h.h_rulocstatus_ind, STATUS_CLS_UAUTH) && strcmp(l_mt_ruloc_struct_h.h_rulocstatus_ind, STATUS_CLS_AUTH)) &&  (p_closed=='Y') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_LOCN_NOTCLOSED, p_location, APL_NULL_STRING, APL_NULL_STRING,__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   if ( ( (!strcmp(l_mt_ruloc_struct_h.h_rulocstatus_ind, STATUS_CLS_UAUTH)) || (!strcmp(l_mt_ruloc_struct_h.h_rulocstatus_ind, STATUS_CLS_AUTH)) ) &&   (p_closed=='N') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_LOCN_CLOSED, p_location, APL_NULL_STRING, APL_NULL_STRING, __LINE__,__FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   

   if (APL_FAILURE == success_flg )
   {
      APL_GOBACK_FAIL;
   }
   else
   {
      APL_GOBACK_SUCCESS;
   }

   RETURN_SUCCESS :
      #ifdef SYS_DEBUG
         fprintf(APL_OUT_FILE,"Leaving Function GDBValRRLocFn with success\n");
      #endif
      return(APL_SUCCESS);

   RETURN_FAILURE :
      #ifdef SYS_DEBUG
         fprintf(APL_OUT_FILE,"Leaving Function GDBValRRLocFn with failure\n");
      #endif
      return(APL_FAILURE);
}



 int GDBValRRLocLocFn(char *p_location, char p_exist, char p_auth, char p_del, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	
	

  

   struct sqlca sqlca;
   MT_LOCATION_STRUCT_H l_mt_location_struct_he;
	MT_LOCATION_STRUCT_I l_mt_location_struct_i;
	short success_flg = APL_SUCCESS;

   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   memset(&l_mt_location_struct_he, NULL, sizeof(MT_LOCATION_STRUCT_H));
   memset(&l_mt_location_struct_i, NULL, sizeof(MT_LOCATION_STRUCT_I));
	sqlca.sqlcode = 0;

   #ifdef SYS_DEBUG
      fprintf(APL_OUT_FILE, "Entered Function GDBValRRLocLocFn\n");
		fprintf(APL_OUT_FILE, "The Location Number is : %s\n", p_location);
		fprintf(APL_OUT_FILE, "The Exist Flag is : %c\n", p_exist);
		fprintf(APL_OUT_FILE, "The Authorisation Flag is : %c\n", p_auth);
      fprintf(APL_OUT_FILE, "The Delete Flag is : %c\n", p_del);
	#endif

   

   if ( !strlen(p_location) )
   {
      APL_DATA_MISSING("Location", APL_NULL_STRING, APL_NULL_STRING);
      APL_GOBACK_FAIL;
   }

   

   if (p_exist == NULL) p_exist = 'Y';


   

   EXEC SQL SELECT * INTO :l_mt_location_struct_he:l_mt_location_struct_i FROM MT_LOCATION 
   WHERE LOCATION_CD =:p_location;

	IS_ANY_ORA_ERROR;


   

   if ( (sqlca.sqlcode == 1403) && (p_exist == 'Y') )
   {
      CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_FND, p_location, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__);
      APL_GOBACK_FAIL;
   }

   if ( (sqlca.sqlcode == 0) && (p_exist == 'N') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_LOCN_EXISTS, p_location, APL_NULL_STRING, APL_NULL_STRING,__LINE__, __FILE__) )

    	{
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

    

   if ( (l_mt_location_struct_i.i_checker_dt  == -1) && (p_auth=='Y') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_LOCN_NOT_AUTHORIZED, p_location, APL_NULL_STRING, APL_NULL_STRING,__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   if ( (l_mt_location_struct_i.i_checker_dt != -1 ) && (p_auth=='N') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_LOCN_AUTHORIZED, p_location, APL_NULL_STRING, APL_NULL_STRING,__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   

   l_mt_location_struct_he.h_status[2]='\0';
   if ( (strcmp(l_mt_location_struct_he.h_status, STATUS_DEL_UAUTH)) && (p_del=='Y') )
   {
     if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_LOCN_NOTMARKED_DEL, p_location, APL_NULL_STRING, APL_NULL_STRING,__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   if ( (!strcmp(l_mt_location_struct_he.h_status, STATUS_DEL_UAUTH)) && (p_del=='N') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_LOCN_MARKED_DEL, p_location, APL_NULL_STRING, APL_NULL_STRING,__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   

   if (APL_FAILURE == success_flg )
   {
      APL_GOBACK_FAIL;
   }
   else
   {
      APL_GOBACK_SUCCESS;
   }

   RETURN_SUCCESS :
      #ifdef SYS_DEBUG
         fprintf(APL_OUT_FILE,"Leaving Function GDBValRRLocLocFn with success\n");
      #endif
      return(APL_SUCCESS);

   RETURN_FAILURE :
      #ifdef SYS_DEBUG
         fprintf(APL_OUT_FILE,"Leaving Function GDBValRRLocLocFn with failure\n");
      #endif
      return(APL_FAILURE);
}



 int GDBValRRProdFn(char *p_prcode, char p_exist, char p_auth,  DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{






   
	struct sqlca sqlca;
	MT_RUPROD_STRUCT_H l_mt_ruprod_struct_ha;
	MT_RUPROD_STRUCT_I l_mt_ruprod_struct_i;
	short success_flg = APL_SUCCESS;

   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   memset(&l_mt_ruprod_struct_ha, NULL, sizeof(MT_RUPROD_STRUCT_H));
   memset(&l_mt_ruprod_struct_i, NULL, sizeof(MT_RUPROD_STRUCT_I));
   sqlca.sqlcode = 0;

   #ifdef SYS_DEBUG
      fprintf(APL_OUT_FILE, "Entered Function GDBValRRProdFn\n");
      fprintf(APL_OUT_FILE, "The Product is : %s\n", p_prcode);
      fprintf(APL_OUT_FILE, "The Exist Flag is : %c\n", p_exist);
      fprintf(APL_OUT_FILE, "The Authorisation Flag is : %c\n", p_auth);
	#endif

   

   if ( !strlen(p_prcode) )
   {
      APL_DATA_MISSING("PRODUCT", APL_NULL_STRING, APL_NULL_STRING);
      APL_GOBACK_FAIL;
   }

   

   if (p_exist == NULL) p_exist = 'Y';

   

   EXEC SQL SELECT * INTO :l_mt_ruprod_struct_ha:l_mt_ruprod_struct_i FROM DL_RUPRODUCT
	WHERE PR_CODE=:p_prcode;
	
	IS_ANY_ORA_ERROR;

   

   if ( (sqlca.sqlcode == 1403) && (p_exist == 'Y') )
   {
      CO_InsertErr(l_debug_info_ptr, ERR_PROD_NOTFND, p_prcode, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__);
      APL_GOBACK_FAIL;
   }

   if ( (sqlca.sqlcode == 0) && (p_exist == 'N') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_EXST, p_prcode, APL_NULL_STRING, APL_NULL_STRING,
__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }


   

   if ( (l_mt_ruprod_struct_i.i_checker_dt == -1) && (p_auth=='Y') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_PROD_NOTAUTHORIZED, p_prcode, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   if ( (l_mt_ruprod_struct_i.i_checker_dt != -1 ) && (p_auth=='N') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_PROD_AUTHORIZED, p_prcode, APL_NULL_STRING, APL_NULL_STRING,__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   

   if (APL_FAILURE == success_flg )
   {
      APL_GOBACK_FAIL;
   }
   else
   {
      APL_GOBACK_SUCCESS;
   }

   RETURN_SUCCESS :
      #ifdef SYS_DEBUG
         fprintf(APL_OUT_FILE,"Leaving Function GDBValRRProdFn with success\n");
      #endif
      return(APL_SUCCESS);

   RETURN_FAILURE :
      #ifdef SYS_DEBUG
         fprintf(APL_OUT_FILE,"Leaving Function GDBValRRProdFn with failure\n");
      #endif
      return(APL_FAILURE);
}



 int GDBValRRSRNFn(char *p_srn, char *p_instr_code, char p_exist, char p_auth,  DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{






   
   struct sqlca sqlca;
   MT_RUSRN_STRUCT_H l_mt_rusrn_struct_h;
   MT_RUSRN_STRUCT_I l_mt_rusrn_struct_i;
   short success_flg = APL_SUCCESS;

   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   memset(&l_mt_rusrn_struct_h, NULL, sizeof(MT_RUSRN_STRUCT_H));
	memset(&l_mt_rusrn_struct_i, NULL, sizeof(MT_RUSRN_STRUCT_I));
   sqlca.sqlcode = 0;

   #ifdef SYS_DEBUG
      fprintf(APL_OUT_FILE, "Entered Function GDBValRRSRNFn\n");
      fprintf(APL_OUT_FILE, "The SRN is : %s\n", p_srn);
      fprintf(APL_OUT_FILE, "The Instrode is :%s\n", p_instr_code);
      fprintf(APL_OUT_FILE, "The Exist Flag is : %c\n", p_exist);
      fprintf(APL_OUT_FILE, "The Authorisation Flag is : %c\n", p_auth);
   #endif

   

   if ( !strlen(p_srn) )
   {
      APL_DATA_MISSING("SRN", APL_NULL_STRING, APL_NULL_STRING);
      APL_GOBACK_FAIL;
   }

	 if ( !strlen(p_instr_code) )
   {
      APL_DATA_MISSING("INSTR_CODE" , APL_NULL_STRING, APL_NULL_STRING);
      APL_GOBACK_FAIL;
   }
	
	

   if (p_exist == NULL) p_exist = 'Y';

   

	EXEC SQL SELECT * INTO :l_mt_rusrn_struct_h:l_mt_rusrn_struct_i FROM DL_RUSRN
	WHERE STAT_REG_NO = :p_srn and instr_code = :p_instr_code;

	IS_ANY_ORA_ERROR;

   

   if ( (sqlca.sqlcode == 1403) && (p_exist == 'Y') )
   {
      CO_InsertErr(l_debug_info_ptr, ERR_SRN_NOTFND, p_srn, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__);
      APL_GOBACK_FAIL;
   }

   if ( (sqlca.sqlcode == 0) && (p_exist == 'N') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_SRN_ALREADY_EXIST, p_srn, APL_NULL_STRING, APL_NULL_STRING,__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }


   

   if ( (l_mt_rusrn_struct_i.i_checker_dt == -1) && (p_auth=='Y') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_SRN_NOTAUTHORIZED, p_srn, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   if ( (l_mt_rusrn_struct_i.i_checker_dt != -1 ) && (p_auth=='N') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_SRN_AUTHORIZED, p_srn, APL_NULL_STRING, APL_NULL_STRING,__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   

   if (APL_FAILURE == success_flg )
   {
      APL_GOBACK_FAIL;
   }
   else
   {
      APL_GOBACK_SUCCESS;
   }

   RETURN_SUCCESS :
      #ifdef SYS_DEBUG
         fprintf(APL_OUT_FILE,"Leaving Function GDBValRRSRNFn with success\n");
      #endif
      return(APL_SUCCESS);

   RETURN_FAILURE :
      #ifdef SYS_DEBUG
         fprintf(APL_OUT_FILE,"Leaving Function GDBValRRSRNFn with failure\n");
      #endif
      return(APL_FAILURE);
}



 int GDBValRRSRNRefnumFn(char *p_srn, char *p_instr_code, char *p_refnum,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{



		
   struct sqlca sqlca;
   MT_RUSRN_STRUCT_H l_mt_rusrn_struct_h;
   MT_RUSRN_STRUCT_I l_mt_rusrn_struct_i;
   short success_flg = APL_SUCCESS;

   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   memset(&l_mt_rusrn_struct_h, NULL, sizeof(MT_RUSRN_STRUCT_H));
   memset(&l_mt_rusrn_struct_i, NULL, sizeof(MT_RUSRN_STRUCT_I));
   sqlca.sqlcode = 0;

   #ifdef SYS_DEBUG
      fprintf(APL_OUT_FILE, "Entered Function GDBValRRSRNRefnumFn\n");
      fprintf(APL_OUT_FILE, "The Refnum is :%s\n", p_refnum);
	#endif 

	

   if ( !strlen(p_refnum))
	{
   	APL_DATA_MISSING("IDENTIY_NUM", APL_NULL_STRING, APL_NULL_STRING);
      APL_GOBACK_FAIL;
   }

	if (strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_INPUT) == 0)
	{
	
		EXEC SQL SELECT * INTO :l_mt_rusrn_struct_h:l_mt_rusrn_struct_i FROM DL_RUSRN
   	WHERE IDENTIY_NUM =:p_refnum;

		IS_ANY_ORA_ERROR;

		 if (sqlca.sqlcode == 0) 
   	{	
      	if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_REFNUM_EXISTS, p_srn, APL_NULL_STRING, APL_NULL_STRING,__LINE__, __FILE__) )
      	{
         	APL_GOBACK_FAIL;
      	}
      		success_flg = APL_FAILURE;
  		}
	}

	if (strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_MODIFY) == 0)
   {

      EXEC SQL SELECT * INTO :l_mt_rusrn_struct_h:l_mt_rusrn_struct_i FROM DL_RUSRN
      WHERE IDENTIY_NUM = :p_refnum and (STAT_REG_NO <>  :p_srn or INSTR_CODE <> :p_instr_code);

		IS_ANY_ORA_ERROR;

       if (sqlca.sqlcode == 0 )
			{

				if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_REFNUM_EXISTS, p_srn, APL_NULL_STRING, APL_NULL_STRING,__LINE__, __FILE__) )
         	{
            	APL_GOBACK_FAIL;
         	}
            success_flg = APL_FAILURE;
      	}
	}

	

   

   if (APL_FAILURE == success_flg )
   {
      APL_GOBACK_FAIL;
   }
   else
   {
      APL_GOBACK_SUCCESS;
   }

   RETURN_SUCCESS :
      #ifdef SYS_DEBUG
         fprintf(APL_OUT_FILE,"Leaving Function GDBValRRSRNRefnumFn with success\n");
      #endif
      return(APL_SUCCESS);

   RETURN_FAILURE :
      #ifdef SYS_DEBUG
         fprintf(APL_OUT_FILE,"Leaving Function GDBValRRSRNRefnumFn with failure\n");
      #endif
      return(APL_FAILURE);
}




int GDBValRRInstrFn(char *p_mt_instrument_struct_h, char p_exist, char p_auth, char p_closed, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{







   

   struct sqlca sqlca;
   MT_RUINSTR_STRUCT_H l_mt_ruinstr_struct_h_a;
	MT_RUINSTR_STRUCT_I l_mt_ruinstr_struct_i_ab;
	short success_flg = APL_SUCCESS;

   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   memset(&l_mt_ruinstr_struct_h_a, NULL, sizeof(MT_RUINSTR_STRUCT_H));
   memset(&l_mt_ruinstr_struct_i_ab, NULL, sizeof(MT_RUINSTR_STRUCT_I));
   sqlca.sqlcode = 0;

   #ifdef SYS_DEBUG
      fprintf(APL_OUT_FILE, "Entered Function GDBValRRInstrFn\n");
      fprintf(APL_OUT_FILE, "The Instrurity Number is : %s\n", p_mt_instrument_struct_h);
      fprintf(APL_OUT_FILE, "The Exist Flag is : %c\n", p_exist);
      fprintf(APL_OUT_FILE, "The Authorisation Flag is : %c\n", p_auth);
      fprintf(APL_OUT_FILE, "The Closed Flag is : %c\n", p_closed);
   #endif

   

   if ( !strlen(p_mt_instrument_struct_h) )
   {
      APL_DATA_MISSING("Instrurity", APL_NULL_STRING, APL_NULL_STRING);
      APL_GOBACK_FAIL;

	}

   

   if (p_exist == NULL) p_exist = 'Y';

   

   EXEC SQL SELECT * INTO :l_mt_ruinstr_struct_h_a:l_mt_ruinstr_struct_i_ab FROM DL_RUINSTRUMENT
	WHERE INSTR_CODE =:p_mt_instrument_struct_h;

	IS_ANY_ORA_ERROR;

   

   if ( (sqlca.sqlcode == 1403) && (p_exist == 'Y') )
   {
      CO_InsertErr(l_debug_info_ptr, ERR_INSTR_NOTFND, p_mt_instrument_struct_h, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__);
      APL_GOBACK_FAIL;
   }

   if ( (sqlca.sqlcode == 0) && (p_exist == 'N') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_INSTRUMENT_EXIST, p_mt_instrument_struct_h, APL_NULL_STRING, APL_NULL_STRING,__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }


   

   if ( (l_mt_ruinstr_struct_i_ab.i_checker_dt == -1) && (p_auth=='Y') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_UNAUTH_INSTR, p_mt_instrument_struct_h, APL_NULL_STRING, APL_NULL_STRING,__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

	if ( (l_mt_ruinstr_struct_i_ab.i_checker_dt != -1 ) && (p_auth=='N') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_INSTR_AUTHORIZED, p_mt_instrument_struct_h, APL_NULL_STRING, APL_NULL_STRING,__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   

   if ( (strcmp(l_mt_ruinstr_struct_h_a.h_ruinstrstatus_ind, STATUS_CLS_UAUTH) && strcmp(l_mt_ruinstr_struct_h_a.h_ruinstrstatus_ind, STATUS_CLS_AUTH)) &&  (p_closed== 'Y') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_INSTR_NOTCLOSED, p_mt_instrument_struct_h, APL_NULL_STRING, APL_NULL_STRING,
__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   if ( ( (!strcmp(l_mt_ruinstr_struct_h_a.h_ruinstrstatus_ind, STATUS_CLS_UAUTH)) || (!strcmp(l_mt_ruinstr_struct_h_a.h_ruinstrstatus_ind, STATUS_CLS_AUTH)) ) &&   (p_closed=='N') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_INSTR_CLOSED, p_mt_instrument_struct_h, APL_NULL_STRING, APL_NULL_STRING, __LINE__,__FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   

   if (APL_FAILURE == success_flg )
   {
      APL_GOBACK_FAIL;
   }
   else
   {
		 APL_GOBACK_SUCCESS;
   }

   RETURN_SUCCESS :
      #ifdef SYS_DEBUG
         fprintf(APL_OUT_FILE,"Leaving Function GDBValRRInstrFn with success\n");
      #endif
      return(APL_SUCCESS);

   RETURN_FAILURE :
      #ifdef SYS_DEBUG
         fprintf(APL_OUT_FILE,"Leaving Function GDBValRRInstrFn with failure\n");
      #endif
      return(APL_FAILURE);
}



int GDBValRRINSTRSrnFn(char *p_instr_code, char *p_srn,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{



      
   struct sqlca sqlca;
   MT_RUINSTR_STRUCT_H	l_mt_ruinstr_struct_ha;
	MT_RUINSTR_STRUCT_I l_mt_ruinstr_struct_i;
	short success_flg = APL_SUCCESS;

   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   memset(&l_mt_ruinstr_struct_ha, NULL, sizeof(MT_RUINSTR_STRUCT_H));
	memset(&l_mt_ruinstr_struct_i, NULL, sizeof(MT_RUINSTR_STRUCT_I));
	sqlca.sqlcode = 0;

   #ifdef SYS_DEBUG
      fprintf(APL_OUT_FILE, "Entered Function GDBValRRINSTRSrnFn\n");
      fprintf(APL_OUT_FILE, "The SRN is :%s\n", p_srn);
	#endif

	

   if ( !strlen(p_instr_code))
   {
      APL_DATA_MISSING("INSTR_CODE", APL_NULL_STRING, APL_NULL_STRING);
      APL_GOBACK_FAIL;
   }

	 if ( !strlen(p_srn))
   {
      APL_DATA_MISSING("SRN", APL_NULL_STRING, APL_NULL_STRING);
      APL_GOBACK_FAIL;
   }

	if (strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_INPUT) == 0)
   {

      EXEC SQL SELECT * INTO :l_mt_ruinstr_struct_ha:l_mt_ruinstr_struct_i FROM DL_RUINSTRUMENT
		WHERE STAT_REG_NO =:p_srn;

		 IS_ANY_ORA_ERROR;

       if (sqlca.sqlcode == 0)
      {
         if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_SRN_ALREADY_EXIST, p_instr_code, APL_NULL_STRING, APL_NULL_STRING,__LINE__,__FILE__) )
         {
            APL_GOBACK_FAIL;
         }
            success_flg = APL_FAILURE;
      }
   }

   if (strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_MODIFY) == 0)
   {

      EXEC SQL SELECT * INTO :l_mt_ruinstr_struct_ha:l_mt_ruinstr_struct_i FROM DL_RUINSTRUMENT
		WHERE STAT_REG_NO =:p_srn and INSTR_CODE <> :p_instr_code;

		IS_ANY_ORA_ERROR;

       if (sqlca.sqlcode == 0 )
         {

            if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_SRN_ALREADY_EXIST, p_instr_code, APL_NULL_STRING, APL_NULL_STRING,__LINE__, __FILE__) )
            {
               APL_GOBACK_FAIL;
            }
            success_flg = APL_FAILURE;
         }
   }



   

	if (APL_FAILURE == success_flg )
   {
      APL_GOBACK_FAIL;
   }
   else
   {
      APL_GOBACK_SUCCESS;
   }

   RETURN_SUCCESS :
      #ifdef SYS_DEBUG
         fprintf(APL_OUT_FILE,"Leaving Function GDBValRRINSTRSrnFn with success\n");
      #endif
      return(APL_SUCCESS);

   RETURN_FAILURE :
      #ifdef SYS_DEBUG
         fprintf(APL_OUT_FILE,"Leaving Function GDBValRRINSTRSrnFn with failure\n");
      #endif
      return(APL_FAILURE);
}



 int GDBValRRSRNOnlyFn(char *p_srn, char p_exist, char p_auth,  DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{






   
   struct sqlca sqlca;
   MT_RUSRN_STRUCT_H l_mt_rusrn_struct_h;
   MT_RUSRN_STRUCT_I l_mt_rusrn_struct_i;
   short success_flg = APL_SUCCESS;

   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   memset(&l_mt_rusrn_struct_h, NULL, sizeof(MT_RUSRN_STRUCT_H));
   memset(&l_mt_rusrn_struct_i, NULL, sizeof(MT_RUSRN_STRUCT_I));
   sqlca.sqlcode = 0;

   #ifdef SYS_DEBUG
      fprintf(APL_OUT_FILE, "Entered Function GDBValRRSRNOnlyFn\n");
      fprintf(APL_OUT_FILE, "The SRN is : %s\n", p_srn);
		fprintf(APL_OUT_FILE, "The Exist Flag is : %c\n", p_exist);
      fprintf(APL_OUT_FILE, "The Authorisation Flag is : %c\n", p_auth);
   #endif

   

   if ( !strlen(p_srn) )
	{
      APL_DATA_MISSING("SRN", APL_NULL_STRING, APL_NULL_STRING);
      APL_GOBACK_FAIL;
   }
	
	

   if (p_exist == NULL) p_exist = 'Y';

   

   EXEC SQL SELECT * INTO :l_mt_rusrn_struct_h:l_mt_rusrn_struct_i FROM DL_RUSRN
   WHERE STAT_REG_NO = :p_srn;

	IS_ANY_ORA_ERROR;

   

   if ( (sqlca.sqlcode == 1403) && (p_exist == 'Y') )
   {
      CO_InsertErr(l_debug_info_ptr, ERR_SRN_NOTFND, p_srn, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__);
      APL_GOBACK_FAIL;
   }

   if ( (sqlca.sqlcode == 0) && (p_exist == 'N') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_SRN_ALREADY_EXIST, p_srn, APL_NULL_STRING, APL_NULL_STRING,__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

	

   if ( (l_mt_rusrn_struct_i.i_checker_dt == -1) && (p_auth=='Y') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_SRN_NOTAUTHORIZED, p_srn, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   if ( (l_mt_rusrn_struct_i.i_checker_dt != -1 ) && (p_auth=='N') )
   {
      if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_SRN_AUTHORIZED, p_srn, APL_NULL_STRING, APL_NULL_STRING,__LINE__, __FILE__) )
      {
         APL_GOBACK_FAIL;
      }
      success_flg = APL_FAILURE;
   }

   

   if (APL_FAILURE == success_flg )
   {
      APL_GOBACK_FAIL;
   }
   else
   {
      APL_GOBACK_SUCCESS;
   }

   RETURN_SUCCESS :
      #ifdef SYS_DEBUG
         fprintf(APL_OUT_FILE,"Leaving Function GDBValRRSRNOnlyFn with success\n");
      #endif
      return(APL_SUCCESS);

   RETURN_FAILURE :
      #ifdef SYS_DEBUG
         fprintf(APL_OUT_FILE,"Leaving Function GDBValRRSRNOnlyFn with failure\n");
      #endif
      return(APL_FAILURE);
}
		

