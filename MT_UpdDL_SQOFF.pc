/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
*/
/*********************************************************************
 *
 * Module Name         :      Master Maintenance
 *
 * File Name           :      MT_UpdDL_SQOFF.pc
 *
 * Description         :      This file contains db functions for updating
 *                            Master Details.
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author         Description       RFS No.
 * ---------   --------  ------------     -------------     ---------
 * 11/01/2006   1.0       Sundar        New file       HDFCDL_015
 *
 *********************************************************************/


#include "CO_HostStructdef.h"

EXEC SQL INCLUDE SQLCA.H;

double chr1_l_val = 0.0;            /* Added by Gouse - Decimal Length for MF- 01/10/2011 */


int DL_ModDB_SqOff(DL_SQOFF_STRUCT_H *p_dl_sqoff_struct_h,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr) 
{
	/* Variable Declarations */
  DL_SQOFF_STRUCT_I *l_dl_sqoff_struct_i;

  struct sqlca sqlca;


  char chr_acc_stamp_compare[APL_DATE_LEN] = APL_NULL_STRING;
  char chr_status_compare[APL_STATUS_LEN] = APL_NULL_STRING;
  char chr_sys_access_stamp[APL_DATE_LEN] = APL_NULL_STRING;
  short p_i_maker, p_i_makerdt, p_i_checker, p_i_checkerdt, p_i_access_stamp;
  short p_i_access_stamp_compare;
  short p_i_status = 0;
  int int_error_flag = APL_SUCCESS;
  int int_l_rowexists = 0;
  char  *l_key_codes[17];
  char  *l_key_values[17];
  char  chr_l_table_name[50] = APL_NULL_STRING;
  char  chr_l_field_val[40] = APL_NULL_STRING;
  int  int_return;
  char  l_ref_no[16]=APL_NULL_STRING;
  char  *l_ref_no1;
  char l_seq_no[16] = APL_NULL_STRING;
  short i_seq_no = 0;
  char l_dl_access_stamp[21] = APL_NULL_STRING;
  short i_dl_access_stamp = 0;
	int	int_retval = APL_SUCCESS;

/* added by amish --01/06 -- start */

char l_cpclt[11] = APL_NULL_STRING;
  short i_cpclt = 0;


  char l_domcpclt[11] = APL_NULL_STRING;
  short i_domcpclt = 0;

  char l_mkttype[4] = APL_NULL_STRING;
  short i_mkttype = 0;

  char l_domcp_custody[11] = APL_NULL_STRING;
  short i_domcp_custody = 0;

  char l_cp_cltname[67] = APL_NULL_STRING;
  short i_cp_cltname = 0;


  char l_dl_date[APL_DATE_LEN] = APL_NULL_STRING;
  short i_dl_date = 0;

  char l_setl_date[APL_DATE_LEN] = APL_NULL_STRING;
  short i_setl_date = 0;

  char l_payin_date[APL_DATE_LEN] = APL_NULL_STRING;
  short i_payin_date = 0;

  char l_payout_date[APL_DATE_LEN] = APL_NULL_STRING;
  short i_payout_date = 0;

  char l_dl_class[3] =  APL_NULL_STRING;
  short i_dl_class = 0;

  char l_orig_refno[17] = APL_NULL_STRING;
  short i_orig_refno = 0;
	
   char l_conf_date[APL_DATE_LEN] = APL_NULL_STRING;
   short i_conf_date = 0;
/* added by amish --01/06 -- end */

/* added by Sandip for ISKB_12665 end*/
   
   char l_trdmkttype[4] = APL_NULL_STRING;
  short i_trdmkttype = 0;
  
  char l_trdexch[4] = APL_NULL_STRING;
  short i_trdexch = 0;

  
/* added by Sandip for ISKB_12665 end*/


	char l_loc_code[5] = APL_NULL_STRING;
	short i_loc_code = 0;
  #ifdef APL_THREADS
    APL_SET_CONTEXT
    EXEC SQL CONTEXT USE :my_ctx_local;
  #endif

  APL_FUNCTION_ENTER(APL_OUT_FILE)

  l_dl_sqoff_struct_i=(DL_SQOFF_STRUCT_I*)calloc(1,sizeof(DL_SQOFF_STRUCT_I));

  APL_MALLOC_FAIL(l_dl_sqoff_struct_i);

      /**ADDED BY AMISH********/

  SYS_DL_DEAL_STRUCT_H *p_dl_deal_struct_h;
  SYS_DL_DEAL_STRUCT_I *p_dl_deal_struct_i;  	
  DL_SQOFF_STRUCT_H l_dl_sqoff_struct_h ;
  DL_SQOFF_STRUCT_I i_dl_sqoff_struct ;

  DL_DEAL_SSTDET_STRUCT_H *p_dl_deal_sstdet_struct_h;
  
  
  p_dl_deal_struct_h =(SYS_DL_DEAL_STRUCT_H *) calloc(1,sizeof(SYS_DL_DEAL_STRUCT_H));
  p_dl_deal_struct_i =(SYS_DL_DEAL_STRUCT_I *) calloc(1,sizeof(SYS_DL_DEAL_STRUCT_I));  

  p_dl_deal_sstdet_struct_h = (DL_DEAL_SSTDET_STRUCT_H *) calloc(1,sizeof(DL_DEAL_SSTDET_STRUCT_H));
  

  APL_MALLOC_FAIL(p_dl_deal_struct_h);
  APL_MALLOC_FAIL(p_dl_deal_struct_i);
   
  APL_MALLOC_FAIL(p_dl_deal_sstdet_struct_h);
  

  
  memset( &l_dl_sqoff_struct_h,NULL,sizeof(DL_SQOFF_STRUCT_H));
  memset( &i_dl_sqoff_struct,NULL,sizeof(DL_SQOFF_STRUCT_I));

/****************ENDS***************/


  p_i_maker =0;
  p_i_makerdt =0;
  p_i_checker =0;
  p_i_checkerdt =0;
  p_i_access_stamp =0;
  p_i_access_stamp_compare =0;

 
	if(!strlen(p_dl_sqoff_struct_h ->h_exch_code))  l_dl_sqoff_struct_i -> i_exch_code= -1;
	else
		l_dl_sqoff_struct_i -> i_exch_code= 0;
	if(!strlen(p_dl_sqoff_struct_h ->h_settlemt_no))  l_dl_sqoff_struct_i -> i_settlemt_no= -1;
	else
		l_dl_sqoff_struct_i -> i_settlemt_no= 0;
	if(!strlen(p_dl_sqoff_struct_h ->h_payin_dt)) l_dl_sqoff_struct_i -> i_payin_dt= -1;
	else
		l_dl_sqoff_struct_i -> i_payin_dt= 0;
	if(!strlen(p_dl_sqoff_struct_h ->h_payout_dt)) l_dl_sqoff_struct_i -> i_payout_dt= -1;
	else
		l_dl_sqoff_struct_i -> i_payout_dt= 0;
	if(!strlen(p_dl_sqoff_struct_h ->h_dl_ref_no))  l_dl_sqoff_struct_i -> i_dl_ref_no= -1;
	else
		l_dl_sqoff_struct_i -> i_dl_ref_no= 0;
	if(!strlen(p_dl_sqoff_struct_h ->h_cln_code))  l_dl_sqoff_struct_i -> i_cln_code= -1;
	else
		l_dl_sqoff_struct_i -> i_cln_code= 0;
	if(!strlen(p_dl_sqoff_struct_h ->h_instr_code))  l_dl_sqoff_struct_i -> i_instr_code= -1;
	else
		l_dl_sqoff_struct_i -> i_instr_code= 0;
	if(p_dl_sqoff_struct_h ->h_deal_qty == 0) l_dl_sqoff_struct_i -> i_deal_qty = -1;
	else
		l_dl_sqoff_struct_i -> i_deal_qty = 0;
	if (p_dl_sqoff_struct_h ->h_bal_qty == 0) l_dl_sqoff_struct_i -> i_bal_qty = -1;
	else
		l_dl_sqoff_struct_i -> i_bal_qty = 0;
	if(p_dl_sqoff_struct_h ->h_sqoff_qty == 0) l_dl_sqoff_struct_i -> i_sqoff_qty = -1;
	else 
		l_dl_sqoff_struct_i -> i_sqoff_qty =0;
	if(p_dl_sqoff_struct_h ->h_sqoff_amt == 0) l_dl_sqoff_struct_i -> i_sqoff_qty = -1;
	else
		l_dl_sqoff_struct_i -> i_sqoff_amt  =0;
	if(p_dl_sqoff_struct_h ->h_prn_amt == 0) l_dl_sqoff_struct_i -> i_prn_amt = -1;
	else
		l_dl_sqoff_struct_i -> i_prn_amt =0;
	if(!strlen(p_dl_sqoff_struct_h ->h_bank_code))  l_dl_sqoff_struct_i -> i_bank_code= -1;
	else
		l_dl_sqoff_struct_i -> i_bank_code= 0;
	if(!strlen(p_dl_sqoff_struct_h ->h_chq_no))  l_dl_sqoff_struct_i -> i_chq_no= -1;
	else
		l_dl_sqoff_struct_i -> i_chq_no= 0;
	if(!strlen(p_dl_sqoff_struct_h ->h_chq_dt)) l_dl_sqoff_struct_i -> i_chq_dt= -1;
	else
		l_dl_sqoff_struct_i -> i_chq_dt= 0;
	
	if(!strlen(p_dl_sqoff_struct_h ->h_ca_ref_no))  l_dl_sqoff_struct_i -> i_ca_ref_no= -1;
	else
		l_dl_sqoff_struct_i -> i_ca_ref_no= 0;
	
	if(!strlen(p_dl_sqoff_struct_h ->h_maker))  l_dl_sqoff_struct_i -> i_maker= -1;
	else
		l_dl_sqoff_struct_i -> i_maker= 0;
	if(!strlen(p_dl_sqoff_struct_h ->h_maker_dt)) l_dl_sqoff_struct_i -> i_maker_dt= -1;
	else
		l_dl_sqoff_struct_i -> i_maker_dt= 0;
	if(!strlen(p_dl_sqoff_struct_h ->h_access_stamp)) l_dl_sqoff_struct_i -> i_access_stamp= -1;
	else
		l_dl_sqoff_struct_i -> i_access_stamp= 0;


 if(CO_RtvSysDtTime(chr_sys_access_stamp,l_debug_info_ptr) !=APL_SUCCESS)
	{
		APL_GOBACK_FAIL
	}

 	EXEC SQL SELECT *  INTO :l_dl_sqoff_struct_h:i_dl_sqoff_struct FROM dl_sqoff
			WHERE DL_REF_NO = :p_dl_sqoff_struct_h->h_dl_ref_no AND
					CLN_CODE	 = :p_dl_sqoff_struct_h->h_cln_code AND
					SQOFF_REF_NO =:p_dl_sqoff_struct_h->h_sqoff_ref_no;
					

	IS_ANY_ORA_ERROR;
  /* Added by Gouse - Decimal Length for MF- 01/10/2011 - Start */

 IF_COND_EXISTS("QTY_RND_MF_MKT","QTY_RND_FOR_MF_MKT")
       {
                 CR_Proc_InstrQtyRound_Chk(p_dl_sqoff_struct_h->h_sqoff_qty,p_dl_sqoff_struct_h->h_instr_code, &chr1_l_val, l_debug_info_ptr );

                 p_dl_sqoff_struct_h->h_sqoff_qty =chr1_l_val;

        }
 /* Added by Gouse - Decimal Length for MF- 01/10/2011 - End */
	
 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_INPUT))
	{

		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered Input of Function DL_ModDB_SqOff\n",
													NULL,p_intl_envdatastruct_h);
 	}
		EXEC SQL SELECT SQOFFREF_SEQ.NEXTVAL INTO :p_dl_sqoff_struct_h->h_sqoff_ref_no FROM DUAL;
		IS_ANY_ORA_ERROR;

		strcpy(p_dl_sqoff_struct_h->h_status,STATUS_UAUTH);
    	l_dl_sqoff_struct_i->i_status =0;
	 	strcpy(p_dl_sqoff_struct_h->h_maker,p_intl_envdatastruct_h->usr);
		l_dl_sqoff_struct_i->i_maker=0;
  		strcpy(p_dl_sqoff_struct_h->h_maker_dt,chr_sys_access_stamp);
		l_dl_sqoff_struct_i->i_maker_dt=0;
		strcpy(p_dl_sqoff_struct_h->h_access_stamp,chr_sys_access_stamp);
		l_dl_sqoff_struct_i->i_access_stamp =0;

		EXEC SQL INSERT INTO DL_SQOFF VALUES (:p_dl_sqoff_struct_h:l_dl_sqoff_struct_i);

		IS_ANY_ORA_ERROR_AND_DUPLICATE(MAP_DET_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
	}
	else
	{

		l_key_codes[0]="DL_REF_NO";
		l_key_codes[1]="CLN_CODE";
		l_key_codes[2]="SQOFF_REF_NO";
		l_key_codes[3]=APL_NULL_STRING;
	
	l_key_values[0]=p_dl_sqoff_struct_h -> h_dl_ref_no;
	l_key_values[1]=p_dl_sqoff_struct_h -> h_cln_code;
	l_key_values[2]=p_dl_sqoff_struct_h -> h_sqoff_ref_no;
	l_key_values[3] = APL_NULL_STRING;

		
   strcpy(chr_l_table_name,"DL_SQOFF");

    int_retval = CR_Rtv_MastChldChrVal( l_key_codes,
                                        l_key_values,
                                        chr_l_table_name,
                                        "ACCESS_STAMP",
                                        chr_l_field_val,
                                        l_debug_info_ptr);

    if (int_retval != APL_SUCCESS)
         APL_GOBACK_FAIL

		strcpy(chr_acc_stamp_compare,chr_l_field_val);
    
		int_retval = CR_Rtv_MastChldChrVal( l_key_codes,
                                        l_key_values,
                                        chr_l_table_name,
                                        "STATUS",
                                        chr_l_field_val,
                                        l_debug_info_ptr);

    if (int_retval != APL_SUCCESS)
         APL_GOBACK_FAIL

		strcpy(chr_status_compare,chr_l_field_val);
	}

 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_MODIFY))
	{
  	p_i_checker =-1;
  	p_i_checkerdt =-1;
		strcpy(p_dl_sqoff_struct_h->h_checker,APL_NULL_STRING);
		strcpy(p_dl_sqoff_struct_h->h_checker_dt,APL_NULL_STRING);

		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered modify of Function MT_ModDBNoDlvDet\n",
													NULL,p_intl_envdatastruct_h);
 	}

		printf("\np_dl_sqoff_struct_h->h_access_stamp---|%s|\n",p_dl_sqoff_struct_h->h_access_stamp);
		printf("\nchr_acc_stamp_compare---|%s|\n",chr_acc_stamp_compare);

	   if (!strcmp(p_dl_sqoff_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   {
		   printf("INSIDE MODIFY");
			strcpy(p_dl_sqoff_struct_h->h_access_stamp,chr_sys_access_stamp);
			l_dl_sqoff_struct_i->i_access_stamp =0;
			strcpy(p_dl_sqoff_struct_h->h_status,STATUS_UAUTH);
			l_dl_sqoff_struct_i->i_status =0;

			EXEC SQL UPDATE DL_SQOFF  SET 
            		MAKER =:p_intl_envdatastruct_h->usr:p_i_maker,
					MAKER_DT =:chr_sys_access_stamp:p_i_makerdt,
					CHECKER =:p_dl_sqoff_struct_h->h_checker:p_i_checker,
					CHECKER_DT =:p_dl_sqoff_struct_h->h_checker_dt:p_i_checkerdt,
					STATUS =:p_dl_sqoff_struct_h->h_status:l_dl_sqoff_struct_i->i_status,
					EXCH_CODE =:p_dl_sqoff_struct_h->h_exch_code :l_dl_sqoff_struct_i-> i_exch_code,
					SETTLEMT_NO =:p_dl_sqoff_struct_h->h_settlemt_no :l_dl_sqoff_struct_i-> i_settlemt_no,
					PAYIN_DT =:p_dl_sqoff_struct_h->h_payin_dt :l_dl_sqoff_struct_i-> i_payin_dt,
					PAYOUT_DT =:p_dl_sqoff_struct_h->h_payout_dt :l_dl_sqoff_struct_i-> i_payout_dt,
					INSTR_CODE =:p_dl_sqoff_struct_h->h_instr_code :l_dl_sqoff_struct_i-> i_instr_code,
					DEAL_QTY =:p_dl_sqoff_struct_h->h_deal_qty :l_dl_sqoff_struct_i-> i_deal_qty,
					BAL_QTY =:p_dl_sqoff_struct_h->h_bal_qty :l_dl_sqoff_struct_i-> i_bal_qty,
					SQOFF_QTY =:p_dl_sqoff_struct_h->h_sqoff_qty :l_dl_sqoff_struct_i-> i_sqoff_qty,
					SQOFF_AMT =:p_dl_sqoff_struct_h->h_sqoff_amt :l_dl_sqoff_struct_i-> i_sqoff_amt,
					BANK_CODE =:p_dl_sqoff_struct_h->h_bank_code :l_dl_sqoff_struct_i-> i_bank_code,
					CHQ_NO =:p_dl_sqoff_struct_h->h_chq_no :l_dl_sqoff_struct_i-> i_chq_no,
					CHQ_DT =:p_dl_sqoff_struct_h->h_chq_dt :l_dl_sqoff_struct_i-> i_chq_dt,
					PRN_AMT =:p_dl_sqoff_struct_h->h_prn_amt :l_dl_sqoff_struct_i-> i_prn_amt,
					CA_REF_NO =:p_dl_sqoff_struct_h->h_ca_ref_no :l_dl_sqoff_struct_i-> i_ca_ref_no,
					CA_AMT =:p_dl_sqoff_struct_h->h_ca_amt :l_dl_sqoff_struct_i-> i_ca_amt,
					ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp
					WHERE 
					DL_REF_NO =:p_dl_sqoff_struct_h->h_dl_ref_no AND 
					CLN_CODE =:p_dl_sqoff_struct_h->h_cln_code AND
					SQOFF_REF_NO =:p_dl_sqoff_struct_h->h_sqoff_ref_no;
					
					IS_ANY_ORA_ERROR;	
	   }
		else 
	   {
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   } 
	}

 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_AUTHORISE))
	{

		APL_IF_DEBUG
	 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered authorize of Function MT_ModDBNoDlvDet\n",
													NULL,p_intl_envdatastruct_h);
 		}
/* printf("\np_dl_sqoff_struct_h->h_access_stamp --|%s|\n",p_dl_sqoff_struct_h->h_access_stamp);
	 	 printf("\nchr_acc_stamp_compare-------------|%s|\n",chr_acc_stamp_compare); */

		if (!strcmp(p_dl_sqoff_struct_h->h_access_stamp,chr_acc_stamp_compare))
		    {
   			  if(strcmp(p_dl_sqoff_struct_h->h_status,STATUS_DEL_UAUTH)!=0)
				{
					printf("\nAFTER ACCESS STAMP COMPARITION\n");
					strcpy(p_dl_sqoff_struct_h->h_access_stamp,chr_sys_access_stamp);
					l_dl_sqoff_struct_i->i_access_stamp =0;
					strcpy(p_dl_sqoff_struct_h->h_checker,p_intl_envdatastruct_h->usr);
					l_dl_sqoff_struct_i->i_checker=0;
					strcpy(p_dl_sqoff_struct_h->h_checker_dt,chr_sys_access_stamp);
					l_dl_sqoff_struct_i->i_checker_dt=0;
					strcpy(p_dl_sqoff_struct_h->h_status,STATUS_AUTH);
					l_dl_sqoff_struct_i->i_status =0;
					strcpy(p_dl_deal_struct_h->h_deal_status,STATUS_SETL);
				/*	printf("\nREF NO IS--|%s|\n",p_dl_sqoff_struct_h->h_dl_ref_no);
					printf("\n*******p_dl_sqoff_struct_h->h_cln_code|%s|\n",p_dl_sqoff_struct_h->h_cln_code);
					*/
					strcpy(p_dl_deal_struct_h->h_dl_client,p_dl_sqoff_struct_h->h_cln_code);

/*				printf("\n*******p_dl_deal_struct_h->h_dl_client|%s|\n",p_dl_deal_struct_h->h_dl_client);
						*/
					
					p_dl_deal_struct_h->h_origquantity=p_dl_deal_struct_h->h_qty;

					printf("\nBEFORE TOK\n");
					strcpy(l_ref_no,p_dl_sqoff_struct_h->h_dl_ref_no);
					/*	printf("REF N^^^^^^^^^|%s|\n",l_ref_no); */
					l_ref_no1 = strtok(l_ref_no,"_");
					/*	printf("\n********************REF_NO |%s|\n",l_ref_no1); */

					/* CHANGES BY AMISH --17/05 */
					EXEC SQL SELECT DL_SQOFFSEQ.NEXTVAL INTO :l_seq_no:i_seq_no from DUAL;
					IS_ANY_ORA_ERROR

					EXEC SQL SELECT ACCESS_STAMP INTO :l_dl_access_stamp:i_dl_access_stamp FROM DL_DEAL
						WHERE
						IDENTIY_NO =:p_dl_sqoff_struct_h->h_dl_ref_no		AND
						CLIENT 	  =:p_dl_sqoff_struct_h->h_cln_code ;
					IS_ANY_ORA_ERROR

					strcpy(p_dl_deal_struct_h->h_indentity_no,"SQ_");
					strcat(p_dl_deal_struct_h->h_indentity_no,l_seq_no);   
					strcpy(p_dl_deal_struct_h->h_origindentity_no,p_dl_deal_struct_h->h_indentity_no);
					strcpy(p_dl_deal_struct_h->h_exch_code,p_dl_sqoff_struct_h->h_exch_code);
					

					EXEC SQL SELECT CP_CLT,DOMESTIC_CPCLT,MKT_TYPE,DOMCP_CUSTODYCLT,CP_CLTNAME,DEAL_DATE,SETL_DATE,
					PAYIN_DT,PAYOUT_DT,DL_CLASS,ORIG_REFNO,VAL_FDT,LOCATION_CD,TRD_EXCH,TRD_MKT_TYPE
					into :l_cpclt:i_cpclt,:l_domcpclt:i_domcpclt,:l_mkttype:i_mkttype,:l_domcp_custody:i_domcp_custody,:l_cp_cltname:i_cp_cltname,:l_dl_date:i_dl_date,:l_setl_date:i_setl_date,:l_payin_date:i_payin_date,:l_payout_date:i_payout_date,:l_dl_class:i_dl_class,:l_orig_refno:i_orig_refno,:l_conf_date:i_conf_date,:l_loc_code:i_loc_code,:l_trdexch:i_trdexch,:l_trdmkttype:i_trdmkttype
					FROM DL_DEAL
					WHERE
					CLIENT = :p_dl_deal_struct_h->h_dl_client
					AND IDENTIY_NO = :p_dl_sqoff_struct_h->h_dl_ref_no;
					IS_ANY_ORA_ERROR
					
					/*
					strcpy(p_dl_deal_struct_h->h_countclt,l_cpclt);
					*/
					strcpy(p_dl_deal_struct_h->h_domcpclt_cd,l_domcpclt);
					strcpy(p_dl_deal_struct_h->h_mkt_type,l_mkttype);
					strcpy(p_dl_deal_struct_h->h_domcp_custodyclt,l_domcp_custody);
					strcpy(p_dl_deal_struct_h->h_loccode,l_loc_code);

					/*Added by Sandip for ISKB_12665 start*/
					
					strcpy(p_dl_deal_struct_h->h_trd_exch,l_trdexch);
				
/*				printf("\n traded exchange code of main deal is |%s|\n",p_dl_deal_struct_h->h_trd_exch);
			*/
					strcpy(p_dl_deal_struct_h->h_trd_mkt_type,l_trdmkttype);
				
/*				printf("\n traded market type of main deal is |%s|\n",p_dl_deal_struct_h->h_trd_mkt_type);
*/
					
					/*Added by Sandip for ISKB_12665* end/

						printf("\n location code of mail deal is |%s|\n",p_dl_deal_struct_h->h_loccode,l_loc_code);
					/*
					 strcpy(p_dl_deal_struct_h->h_countcltnm,l_cp_cltname);
					 */
			strcpy(p_dl_deal_struct_h->h_dlt,chr_sys_access_stamp);/* Added by Chirag 13-11-2006*/
			/* COMMENTED BY AMISH -- 03/06 *//* Again commented by Chirag after dnyanesh on 13-11-06*/
			printf("Deal Date copy code commented by chirag on 13-11-06\n");			
				/* strcpy(p_dl_deal_struct_h->h_dlt,l_dl_date);*//* Uncommented by Dnyanesh Deal Date to be copied from Parent deal for Square Off*/
					 /*
					 strcpy(p_dl_deal_struct_h->h_setldt,l_setl_date);
					 strcpy(p_dl_deal_struct_h->h_payin_dt,l_payin_date);
					 strcpy(p_dl_deal_struct_h->h_payout_dt,l_payout_date);
					 */
					
					/*
					 strcpy(p_dl_deal_struct_h->h_confdate,l_conf_date);
					*/
					
					/*
					 printf("\n *********************deal date is  |%s|\n",p_dl_deal_struct_h->h_dlt);
					
					 printf("\n *********************setl date is  |%s|\n",p_dl_deal_struct_h->h_setldt);
					*/

					/*
						p_dl_deal_struct_h->h_allot_qty = p_dl_markshortage_struct_h->h_allot_qty;
						*/
					/* populating settlement structure */
					strcpy(p_dl_deal_sstdet_struct_h->h_dl_client,p_dl_sqoff_struct_h->h_cln_code);
					strcpy(p_dl_deal_sstdet_struct_h->h_indentity_no,p_dl_sqoff_struct_h->h_dl_ref_no);

					strcpy(p_dl_deal_sstdet_struct_h->h_instrdate,chr_sys_access_stamp);
					strcpy(p_dl_deal_sstdet_struct_h->h_moneydate,chr_sys_access_stamp);
					strcpy(p_dl_deal_sstdet_struct_h->h_access_stamp,l_dl_access_stamp);
						
					


					p_dl_deal_sstdet_struct_h->h_brokercomm = 0;
					p_dl_deal_sstdet_struct_h->h_pendregquantity = 0;
					p_dl_deal_sstdet_struct_h->h_marktrfquantity = 0;
					p_dl_deal_sstdet_struct_h->h_rec_int_000 = 0;
					p_dl_deal_sstdet_struct_h->h_mcomplquantity = 0;
					p_dl_deal_sstdet_struct_h->h_delta_000 = 0;
					p_dl_deal_sstdet_struct_h->h_delta_001 = 0;
					p_dl_deal_sstdet_struct_h->h_delta_002 = 0;
					p_dl_deal_sstdet_struct_h->h_newamount = 0;
					
					p_dl_deal_struct_h->h_qty = p_dl_sqoff_struct_h->h_sqoff_qty ;
					p_dl_deal_struct_h->h_net_amt = p_dl_sqoff_struct_h->h_sqoff_amt; 

					if ( APL_DOUBLE_LESS(p_dl_sqoff_struct_h->h_sqoff_qty,l_dl_sqoff_struct_h.h_bal_qty))
					  {
						  strcpy(p_dl_deal_sstdet_struct_h->h_ispart_,"Y");
						  strcpy(p_dl_deal_sstdet_struct_h->h_newindentity_no,"PSQ_");/* changes by amish --30/05 */
						  strcat(p_dl_deal_sstdet_struct_h->h_newindentity_no,l_seq_no);
						  p_dl_deal_sstdet_struct_h->h_newquantity = p_dl_sqoff_struct_h->h_sqoff_qty;
							  
					  }
					else
					  {
						  strcpy(p_dl_deal_sstdet_struct_h->h_ispart_,"N");
						  p_dl_deal_sstdet_struct_h->h_newquantity = 0;
					  }
					if(!strcmp(p_dl_sqoff_struct_h->h_deal_cd,APL_DEAL_DF) || !strcmp(p_dl_sqoff_struct_h->h_deal_cd,APL_DEAL_DVP))
					{
						printf("\nCREATING RECEIVE DEALSSSSSSSSSSSn\n");

						/*
						if(!strcmp(p_dl_sqoff_struct_h->h_deal_cd,APL_DEAL_DVP))
						{
							 p_dl_deal_struct_h->h_net_amt = p_dl_sqoff_struct_h->h_sqoff_amt; 
							 strcpy(p_dl_deal_struct_h->h_dealcd,APL_DEAL_RVP);   
						}
						else
						{
							p_dl_deal_struct_h->h_net_amt = 0; 
							strcpy(p_dl_deal_struct_h->h_dealcd,APL_DEAL_RF);   
						}
						*/

						 p_dl_deal_struct_h->h_net_amt = p_dl_sqoff_struct_h->h_sqoff_amt; 
						 strcpy(p_dl_deal_struct_h->h_dealcd,APL_DEAL_RVP);   
					
							
					/*	printf("AMISH STATUS  IS |%s| \n",p_dl_deal_struct_h->h_deal_status);
					*/

						if ( APL_FAILURE == DL_Mod_DefaultDealSqOff(p_dl_deal_struct_h,p_dl_sqoff_struct_h,p_intl_envdatastruct_h,l_debug_info_ptr))
						{
							printf("\n Unsuccessful after DL_Mod_DefaultDealSqOff \n");
							APL_GOBACK_FAIL;
						}
						/** TUX : After updating this now its time to update SAFEK table ****/
						printf("\n Now updatin Safek postions \n");
						/**** DIRECT Updations  ??????? ****/				
						
						if(!strcmp(p_dl_deal_struct_h->h_dealcd,APL_DEAL_RVP))
						{
							strcpy(p_dl_deal_struct_h->h_dealcd,APL_DEAL_DVP);
							if(APL_FAILURE == DL_Proc_DLSetlSing(  p_dl_deal_sstdet_struct_h,
																					APL_NULL_STRING,
																					p_intl_envdatastruct_h,
																					l_debug_info_ptr))
							{
								CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_DLSetlSing() with Failure\n",
									l_debug_info_ptr,p_intl_envdatastruct_h);
								APL_GOBACK_FAIL;
							}
						}
						
						if(!strcmp(p_dl_deal_struct_h->h_dealcd,APL_DEAL_RF))
						  {
						
								
								/*
								strcpy(p_dl_deal_struct_h->h_dealcd,APL_DEAL_DF);
								*/
								/* CHANGES BY AMISH --02/06 --ALWAYZ CREATE VS PAYEMENT DEALS FOR SQOFF */
								strcpy(p_dl_deal_struct_h->h_dealcd,APL_DEAL_DVP);
								if(APL_FAILURE == DL_Proc_DLSetlSing(  p_dl_deal_sstdet_struct_h,
																					APL_NULL_STRING,
																					p_intl_envdatastruct_h,
																					l_debug_info_ptr))
								{
									CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_DLSetlSing() with Failure\n",
									l_debug_info_ptr,p_intl_envdatastruct_h);
									APL_GOBACK_FAIL;
								}
						  }
					}
					
				

					if(!strcmp(p_dl_sqoff_struct_h->h_deal_cd,APL_DEAL_RF) || !strcmp(p_dl_sqoff_struct_h->h_deal_cd,APL_DEAL_RVP))
					{
						printf("\nCREATING DELIVER DEALSSSSSSSSSSSn\n");

						
						if(!strcmp(p_dl_sqoff_struct_h->h_deal_cd,APL_DEAL_RVP))
						{
							 p_dl_deal_struct_h->h_net_amt = p_dl_sqoff_struct_h->h_sqoff_amt; 
						
							strcpy(p_dl_deal_struct_h->h_dealcd,APL_DEAL_RVP);						 
							if(APL_FAILURE == DL_Proc_DLSetlSing(  p_dl_deal_sstdet_struct_h,
																					APL_NULL_STRING,
																					p_intl_envdatastruct_h,
																					l_debug_info_ptr))
								{
								CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_DLSetlSing() with Failure\n",
									l_debug_info_ptr,p_intl_envdatastruct_h);
								APL_GOBACK_FAIL;
								}
							
							 strcpy(p_dl_deal_struct_h->h_dealcd,APL_DEAL_DVP);   
						}
						else
						{
							/*
							p_dl_deal_struct_h->h_net_amt = 0;
							
							
							strcpy(p_dl_deal_struct_h->h_dealcd,APL_DEAL_RF);						 

							*/
							 p_dl_deal_struct_h->h_net_amt = p_dl_sqoff_struct_h->h_sqoff_amt; 
							/* CHANGES BY AMISH --02/06 --ALWAYZ CREATE VS PAYEMENT DEALS FOR SQOFF */
							strcpy(p_dl_deal_struct_h->h_dealcd,APL_DEAL_RVP);						 
							if(APL_FAILURE == DL_Proc_DLSetlSing(  p_dl_deal_sstdet_struct_h,
																					APL_NULL_STRING,
																					p_intl_envdatastruct_h,
																					l_debug_info_ptr))
							{
							CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_DLSetlSing() with Failure\n",
									l_debug_info_ptr,p_intl_envdatastruct_h);
								APL_GOBACK_FAIL;
							}
							/*
							strcpy(p_dl_deal_struct_h->h_dealcd,APL_DEAL_DF);   
							*/
							/* CHANGES BY AMISH --02/06 --ALWAYZ CREATE VS PAYEMENT DEALS FOR SQOFF */
							strcpy(p_dl_deal_struct_h->h_dealcd,APL_DEAL_DVP);   

						}

						if ( APL_FAILURE == DL_Mod_DefaultDealSqOff(p_dl_deal_struct_h,p_dl_sqoff_struct_h,p_intl_envdatastruct_h,l_debug_info_ptr))
						{
							printf("\n Unsuccessful after DL_Mod_DefaultDealSqOff \n");
							APL_GOBACK_FAIL;
						}
						/** TUX : After updating this now its time to update SAFEK table ****/
						printf("\n Now updating Safek postions \n");
				}	
				
					

					

					EXEC SQL UPDATE DL_SQOFF SET 
						CHECKER =:p_intl_envdatastruct_h->usr:p_i_checker,
								  CHECKER_DT =:chr_sys_access_stamp:p_i_access_stamp,
								  ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp,
								  STATUS =:p_dl_sqoff_struct_h->h_status:l_dl_sqoff_struct_i->i_status
									  WHERE 
									  DL_REF_NO =:p_dl_sqoff_struct_h->h_dl_ref_no AND
									  CLN_CODE =:p_dl_sqoff_struct_h->h_cln_code AND
									  SQOFF_REF_NO =:p_dl_sqoff_struct_h->h_sqoff_ref_no;
					IS_ANY_ORA_ERROR;	

					/**** Now finding if this is partial square off ***/
					/** if it is then create new sqoff 					***/
				/*	printf("\n p_dl_sqoff_struct_h->h_sqoff_qty = |%lf | l_dl_sqoff_struct_h.h_bal_qty = |%lf| ",
									p_dl_sqoff_struct_h->h_sqoff_qty,l_dl_sqoff_struct_h.h_bal_qty);

									*/

					if ( APL_DOUBLE_LESS(p_dl_sqoff_struct_h->h_sqoff_qty,l_dl_sqoff_struct_h.h_bal_qty))
					{
						printf("\n Inside IF .. adding new record.. ");
						/** Now create new row ***/
						/*					
						EXEC SQL UPDATE DL_DEAL 
						SET  
							QTY = QTY - :p_dl_sqoff_struct_h->h_sqoff_qty,
							ACCESS_STAMP = :chr_sys_access_stamp
						WHERE
							IDENTIY_NO =:p_dl_sqoff_struct_h->h_dl_ref_no		AND
							CLIENT 	  =:p_dl_sqoff_struct_h->h_cln_code ;

						IS_ANY_ORA_ERROR;
						*/

						
						EXEC SQL SELECT SQOFFREF_SEQ.NEXTVAL INTO :l_dl_sqoff_struct_h.h_sqoff_ref_no FROM DUAL;
						IS_ANY_ORA_ERROR;
						/*
						strcpy(l_dl_sqoff_struct_h.h_dl_ref_no,"SH_");
						strcat(l_dl_sqoff_struct_h.h_dl_ref_no,l_dl_sqoff_struct_h.h_sqoff_ref_no);
						*/
						strcpy(l_dl_sqoff_struct_h.h_status,STATUS_UAUTH);
						i_dl_sqoff_struct.i_status =0;
						strcpy(l_dl_sqoff_struct_h.h_maker,"SYSTEM");
						i_dl_sqoff_struct.i_maker=0;
						strcpy(l_dl_sqoff_struct_h.h_maker_dt,chr_sys_access_stamp);
						i_dl_sqoff_struct.i_maker_dt=0;
						strcpy(l_dl_sqoff_struct_h.h_access_stamp,chr_sys_access_stamp);
						i_dl_sqoff_struct.i_access_stamp =0;
						strcpy(l_dl_sqoff_struct_h.h_chq_dt,chr_sys_access_stamp);
						strcpy(l_dl_sqoff_struct_h.h_chq_no,"XXX");
						l_dl_sqoff_struct_h.h_sqoff_amt = 0.0;
						l_dl_sqoff_struct_h.h_prn_amt= 0.0;

						l_dl_sqoff_struct_h.h_sqoff_qty = p_dl_sqoff_struct_h->h_bal_qty - p_dl_sqoff_struct_h->h_sqoff_qty;
						l_dl_sqoff_struct_h.h_bal_qty = p_dl_sqoff_struct_h->h_bal_qty - p_dl_sqoff_struct_h->h_sqoff_qty;


						EXEC SQL INSERT INTO DL_SQOFF VALUES (:l_dl_sqoff_struct_h:i_dl_sqoff_struct);

						IS_ANY_ORA_ERROR_AND_DUPLICATE(MAP_DET_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
					}
					/*
					else
					{
						EXEC SQL UPDATE DL_DEAL 
						SET  
							DEAL_STAT =  STATUS_SETL,	
							ACCESS_STAMP = :chr_sys_access_stamp
						WHERE
							IDENTIY_NO =:p_dl_sqoff_struct_h->h_dl_ref_no		AND
							CLIENT 	  =:p_dl_sqoff_struct_h->h_cln_code ;
					
					IS_ANY_ORA_ERROR;	
					}		
					*/


					printf("\nAMISH-------------COMPLETED-----------------\n");
						
				}
		   	   else  
	    		{
	    			EXEC SQL DELETE DL_SQOFF 
					WHERE 
					DL_REF_NO =:p_dl_sqoff_struct_h->h_dl_ref_no AND
					CLN_CODE =:p_dl_sqoff_struct_h->h_cln_code AND
					SQOFF_REF_NO =:p_dl_sqoff_struct_h->h_sqoff_ref_no;

          
				   IS_ANY_ORA_ERROR
		    	}
			}
			else 
		    {
				if (CO_InsertErr
				(l_debug_info_ptr,
				 ERR_ACCESSSTAMP_CHGD, 
				 APL_NULL_STRING,
				 APL_NULL_STRING,
				 APL_NULL_STRING,
				 __LINE__,
				 __FILE__
				) != APL_SUCCESS)
				APL_GOBACK_FAIL
				APL_GOBACK_FAIL
	        } 
	}

 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_RESET))
	{

		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered reset of Function MT_ModDBNoDlvDet\n",
													NULL,p_intl_envdatastruct_h);
 	}

		if (!strcmp(p_dl_sqoff_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   {
   		if(!strcmp(p_dl_sqoff_struct_h->h_status,STATUS_DEL_UAUTH))
	    	{
	    		strcpy(p_dl_sqoff_struct_h->h_access_stamp,chr_sys_access_stamp);
	    		l_dl_sqoff_struct_i->i_access_stamp =0;
   	    	strcpy(p_dl_sqoff_struct_h->h_checker,p_intl_envdatastruct_h->usr);
	    		l_dl_sqoff_struct_i->i_checker=0;
  	    	strcpy(p_dl_sqoff_struct_h->h_checker_dt,chr_sys_access_stamp);
	    		l_dl_sqoff_struct_i->i_checker_dt=0;
          strcpy(p_dl_sqoff_struct_h->h_status,STATUS_AUTH);
	    		l_dl_sqoff_struct_i->i_status =0;

	    		EXEC SQL UPDATE DL_SQOFF SET 
           	CHECKER =:p_intl_envdatastruct_h->usr:p_i_checker,
            	CHECKER_DT =:chr_sys_access_stamp:p_i_access_stamp,
					ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp,
            	STATUS =:p_dl_sqoff_struct_h->h_status:l_dl_sqoff_struct_i->i_status
				WHERE 
				DL_REF_NO =:p_dl_sqoff_struct_h->h_dl_ref_no AND
				CLN_CODE =:p_dl_sqoff_struct_h->h_cln_code AND
				SQOFF_REF_NO =:p_dl_sqoff_struct_h->h_sqoff_ref_no;


				IS_ANY_ORA_ERROR;	
			}
	   }
		else 
	   {
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   } 
	}

 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_DELETE))
	{
  	p_i_checker =-1;
  	p_i_checkerdt =-1;
		strcpy(p_dl_sqoff_struct_h->h_checker,APL_NULL_STRING);
		strcpy(p_dl_sqoff_struct_h->h_checker_dt,APL_NULL_STRING);

		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered delete of Function MT_ModDBNoDlvDet\n",
													NULL,p_intl_envdatastruct_h);
 	}

	   if (!strcmp(p_dl_sqoff_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   {
			strcpy(p_dl_sqoff_struct_h->h_access_stamp,chr_sys_access_stamp);
			l_dl_sqoff_struct_i->i_access_stamp =0;
       strcpy(p_dl_sqoff_struct_h->h_status,STATUS_DEL_UAUTH);
			l_dl_sqoff_struct_i->i_status =0;

			EXEC SQL UPDATE DL_SQOFF SET 
            	MAKER =:p_intl_envdatastruct_h->usr:p_i_maker,
					MAKER_DT =:chr_sys_access_stamp:p_i_makerdt,
					CHECKER =:p_dl_sqoff_struct_h->h_checker:p_i_checker,
					CHECKER_DT =:p_dl_sqoff_struct_h->h_checker_dt:p_i_checkerdt,
            	STATUS =:p_dl_sqoff_struct_h->h_status:l_dl_sqoff_struct_i->i_status,
					ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp
				WHERE 
				DL_REF_NO =:p_dl_sqoff_struct_h->h_dl_ref_no AND
				CLN_CODE =:p_dl_sqoff_struct_h->h_cln_code AND
				SQOFF_REF_NO =:p_dl_sqoff_struct_h->h_sqoff_ref_no;

 
              
					IS_ANY_ORA_ERROR;	
	   }
		else 
	   {
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   } 
	}


 if (int_error_flag == APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}
 APL_GOBACK_SUCCESS

 RETURN_SUCCESS :
	{
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
		free(l_dl_sqoff_struct_i);
		return(APL_SUCCESS);
	}
  RETURN_FAILURE :
	{
 	        APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
		free(l_dl_sqoff_struct_i);
		return(APL_FAILURE);
	}

}

int CR_Chk_ValAtSqOff(DL_SQOFF_STRUCT_H *p_dl_sqoff_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca sqlca;
	char l_chr_p_Instatus[3]=APL_NULL_STRING;
	char l_chr_p_Clstatus[3]=APL_NULL_STRING;
	char l_chr_p_Setstatus[3]=APL_NULL_STRING;
	short l_i_Status=0;
	short l_i_SetStatus=0;
	short l_i_CStatus=0;
	int int_error_flag=APL_SUCCESS;

#ifdef APL_THREADS
	APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
#endif

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE, "Entered Function CR_Chk_ValAtSqOff \n",
				NULL,NULL);
	}
	memset(l_chr_p_Instatus,NULL,3);
	memset(l_chr_p_Clstatus,NULL,3);
	memset(l_chr_p_Setstatus,NULL,3);

	EXEC SQL SELECT STATUS into :l_chr_p_Instatus:l_i_Status
		FROM MT_INSTRUMENT
		WHERE INSTR_CODE =:p_dl_sqoff_struct_h->h_instr_code;
	printf("\nSTATUS IS |%s|\n",l_chr_p_Instatus);
	printf("\nFAILURE IN MT_INSTRUMENT|%d|\n",sqlca.sqlcode);
	IS_ANY_ORA_ERROR

	if (strcmp(l_chr_p_Instatus,STATUS_AUTH))
	{ 
		if(CO_InsertErr(
					l_debug_info_ptr,
					ERR_SQOFF_INSTRU_CD_NOT_AUTH,
					APL_NULL_STRING,
					APL_NULL_STRING,
					APL_NULL_STRING,
					__LINE__,
					__FILE__
					) == APL_SUCCESS)
			int_error_flag = APL_FAILURE;
	}

	EXEC SQL SELECT STATUS into :l_chr_p_Clstatus:l_i_CStatus
		FROM MT_CLIENT
		WHERE CLN_CODE =:p_dl_sqoff_struct_h->h_cln_code;
   
	printf("\nSTATUS IS |%s|\n",l_chr_p_Clstatus);
	printf("\nFAILURE IN MT_CLIENT |%d|\n",sqlca.sqlcode);
	
	IS_ANY_ORA_ERROR

		if (strcmp(l_chr_p_Clstatus,STATUS_AUTH))
		{
			if(CO_InsertErr(l_debug_info_ptr,
						ERR_SQOFF_CLN_CD_NOT_AUTH,
						APL_NULL_STRING,
						APL_NULL_STRING,
						APL_NULL_STRING,
						__LINE__,
						__FILE__
						) == APL_SUCCESS)
				int_error_flag = APL_FAILURE;	
		}

/*Retro with HDFC to add Settl Type in Query - Rahul 10Apr2008 */
/*
	EXEC SQL SELECT STATUS into :l_chr_p_Setstatus:l_i_SetStatus
		FROM MT_SETTL_CAL 
		WHERE SETTL_NO =:p_dl_sqoff_struct_h->h_settlemt_no;
	
	printf("\nSTATUS IS |%s|\n",l_chr_p_Setstatus);
	printf("\nFAILURE IN MT_SETTL_CAL |%d|\n",sqlca.sqlcode);
	
	
	IS_ANY_ORA_ERROR

		if (strcmp(l_chr_p_Setstatus,STATUS_AUTH))
		{
			if(CO_InsertErr(
						l_debug_info_ptr,
						ERR_SQOFF_SETT_NO_NOT_AUTH,
						APL_NULL_STRING,
						APL_NULL_STRING,
						APL_NULL_STRING,
						__LINE__,
						__FILE__
						) == APL_SUCCESS)
				int_error_flag = APL_FAILURE;
		}
*/
	if (int_error_flag == APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}
	else APL_GOBACK_SUCCESS

		RETURN_SUCCESS :
		{
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
		return(APL_SUCCESS);
	}
RETURN_FAILURE :
	{
 	        APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
		return(APL_FAILURE);
	}

}


