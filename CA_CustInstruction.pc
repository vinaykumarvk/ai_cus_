

#include "CO_HostStructdef.h"
#include "CA_Common.h"

EXEC SQL INCLUDE SQLCA.H;
#define PAGELENGTH 24








int CA_Mod_CustInst(CA_CUST_INSTR_STRUCT_H *p_ca_cust_instr_struct_h, char **argv,FILE *p_repfile,FILE *p_logfile,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	
	char	chr_l_sysdate_b[APL_DATE_LEN]										=	APL_NULL_STRING;
   char  chr_l_sr_no[4]                                         =  APL_NULL_STRING;
	char	chr_l_curr_datetime[APL_DATE_LEN]								=	APL_NULL_STRING;
	char  chr_l_h_aresponse_ca_id[CORP_ID_LEN]						   =	APL_NULL_STRING;
	char  chr_l_h_aresponse_client[APL_CLIENT_LENGTH]					=	APL_NULL_STRING;
	char	chr_l_h_aresponse_resp_dt[APL_DATE_LEN]						=	APL_NULL_STRING;
	char  chr_l_h_aresponse_resmsg_dt[APL_DATE_LEN]					=  APL_NULL_STRING;
	char  chr_l_h_aresponse_paymsg_dt[APL_DATE_LEN]					=	APL_NULL_STRING;
	char 	chr_l_h_aresponse_maker[APL_USERID_LEN]						=	APL_NULL_STRING;
	char  chr_l_h_aresponse_maker_dt[APL_DATE_LEN]					=	APL_NULL_STRING;
	char  chr_l_h_aresponse_checker[APL_USERID_LEN]					=	APL_NULL_STRING;
	char  chr_l_h_aresponse_checker_dt[APL_DATE_LEN]					=	APL_NULL_STRING;
	char  chr_l_h_aresponse_status[APL_STATUS_LEN]					=	APL_NULL_STRING;
	char  chr_l_h_aresponse_access_stamp[APL_DATE_LEN]				=	APL_NULL_STRING;
	char  chr_l_h_aresponse_input_dt[APL_DATE_LEN]					=	APL_NULL_STRING;
	char  chr_l_h_restart_data[APL_RESTARTDATA_LENGTH]  				=  APL_NULL_STRING;
   char  chr_p_access_stamp_cmp[APL_DATE_LEN]							=	APL_NULL_STRING;

	char  chr_param_string[APL_INSTRUMENTCODE_LEN+2] = APL_NULL_STRING;
	char  chr_l_h_aresponse_inst_seme[APL_TXNREFNO_LEN]				=  APL_NULL_STRING; 	
	char  chr_l_h_aresponse_stat_code[FAILREAS_CD_LEN]   			=  APL_NULL_STRING; 
	char	chr_l_h_aresponse_sendresp_yn[2]								=	APL_NULL_STRING;
	float	flt_l_h_aresponse_inst_holding									=	0;
	float	flt_l_h_total_inst_holding										=	0;
	char  chr_l_h_aresponse_caoptioncode[9]								=	APL_NULL_STRING;	

	short l_i_aresponse_ca_id											=	0;
   short l_i_sr_no                                          =  0;
	short l_i_aresponse_account										=	0;
	short l_i_aresponse_resp_dt										=	0;	
	short l_i_aresponse_resmsg_dt										=	0;
	short l_i_aresponse_paymsg_dt										=	0;
	short l_i_aresponse_maker                          		=	0;
	short l_i_aresponse_maker_dt										=	0;
	short l_i_aresponse_checker										=	0;
	short l_i_aresponse_checker_dt									=	0;
	short	l_i_aresponse_status											=	0;
	short l_i_aresponse_access_stamp									=	0;
	short l_i_aresponse_input_dt										=	0;
	short int_l_exist_a															=	0;
   short l_del_exist														=	0;
	short l_i_restart_data												=	0; 

   char  chr_l_buf[BUFFER_LEN]                    =  APL_NULL_STRING;
	short l_i_aresponse_INST_SEME										=	0;
	short l_i_aresponse_INST_HOLDING									=	0;
	short l_i_total_INST_HOLDING										=	0;
	short l_i_aresponse_sendresp_yn									=  0;
	short l_i_aresponse_stat_code										=	0;

	short l_del_hold_flg                                     =  0; 
	short l_i_aresponse_caoptioncode									=	0; 
		printf("before coping corp id and client |%s||%s|\n",p_ca_cust_instr_struct_h->h_corp_id,p_ca_cust_instr_struct_h->h_aentle_client);
		fflush(stdout);

		strcpy(chr_l_h_aresponse_ca_id,p_ca_cust_instr_struct_h->h_corp_id);
		strcpy(chr_l_h_aresponse_client,p_ca_cust_instr_struct_h->h_aentle_client);

	EXEC SQL VAR chr_p_access_stamp_cmp is STRING;
	EXEC SQL VAR chr_l_sr_no is STRING;
	EXEC SQL VAR chr_l_h_aresponse_caoptioncode is STRING;
printf("before memset serial no\n");
fflush(stdout);
   memset(chr_l_sr_no,'\0',4);
printf("after memset serial no \n");
fflush(stdout);
	if(!strlen(chr_l_h_aresponse_ca_id))
	{
		APL_DATA_MISSING("Corporate Action ID ",APL_NULL_STRING,APL_NULL_STRING)		
	}	
	if(!strlen(chr_l_h_aresponse_client))
	{
		APL_DATA_MISSING("Account",APL_NULL_STRING,APL_NULL_STRING)
	}
	
	 EXEC SQL SELECT PROCESSING_STATUS
            INTO  :chr_l_h_restart_data:l_i_restart_data
            FROM  SYS_BATCHPROC
            WHERE PROCESS_NAME    =  :argv[0]
            AND   PROC_INIT         =  :argv[1]
            AND   STARTDATE   =  :argv[2]
            AND   STATUS      =  'started'
            FOR UPDATE OF PROCESSING_STATUS,STATUS;

   if(APL_ZERO_RESULT_SET)
   {
      CO_ProcMonitor(   p_logfile,
                  "E:No entry in batch_in_proc",
                  NULL,
                  NULL);
      APL_GOBACK_FAIL;
   }

   IS_ANY_ORA_ERROR;

	if ( APL_FAILURE == CO_RtvSysDt(  chr_l_sysdate_b,l_debug_info_ptr))
   {
      APL_GOBACK_FAIL;
   }
	if (APL_FAILURE == CO_RtvSysDtTime(chr_l_curr_datetime,l_debug_info_ptr))
   {
      APL_GOBACK_FAIL
   }
printf("Mode of function is |%s|\n",p_intl_envdatastruct_h->h_mode);
fflush(stdout);	
	if ( strlen(p_intl_envdatastruct_h->h_mode) != 0 )
	{
		if ( strcmp(p_intl_envdatastruct_h->h_mode, APL_FUNC_INPUT) ==0 )
		{
			int_l_exist_a = 0;
		   EXEC SQL SELECT NVL(count(*),0)	
					INTO	 :int_l_exist_a
					FROM	 CAREPLY
					WHERE	 corp_id 		= :chr_l_h_aresponse_ca_id
					AND	 client 	= :chr_l_h_aresponse_client
					AND    RESPONSE_DT is not null; 
			IS_ANY_ORA_ERROR;

			if (int_l_exist_a > 0)
			{
			 sprintf(chr_l_buf, "Record already exists for CA-ID, Please Use Modify Option: %s, Account: %s, Cust REF: %s", chr_l_h_aresponse_ca_id, chr_l_h_aresponse_client, p_ca_cust_instr_struct_h->h_instr_swift_msgidentiy_no);
			 CO_ProcMonitor(p_logfile,chr_l_buf ,NULL ,NULL);
			 APL_GOBACK_FAIL;
			}
		}
	   if ( (strcmp(p_intl_envdatastruct_h->h_mode, APL_FUNC_MODIFY) == 0)  || (strcmp(p_intl_envdatastruct_h->h_mode, APL_FUNC_DELETE) == 0) )	
		{
			printf("inside modify function\n");
			fflush(stdout);
			int_l_exist_a = 0;
			EXEC SQL SELECT NVL(count(*),0)
					INTO	:int_l_exist_a
					FROM	CAREPLY
					WHERE	corp_id 	=	:chr_l_h_aresponse_ca_id
               AND   RESPONSE_DT is not null
					AND	client	=	:chr_l_h_aresponse_client;
			IS_ANY_ORA_ERROR;
			printf("after query exe. in mod function\n");
			printf("Count in mod func. |%d|\n",int_l_exist_a);
			fflush(stdout);
			if (int_l_exist_a == 0)
			{	printf("No record exist\n");
				fflush(stdout);
				sprintf(chr_l_buf, "No Record exists for CA_ID: %s, Account: %s", chr_l_h_aresponse_ca_id, chr_l_h_aresponse_client);
				CO_ProcMonitor(p_logfile, chr_l_buf, NULL, NULL);
				APL_GOBACK_FAIL;
			}
			printf("before access stamp query execution\n");
			fflush(stdout);
			EXEC SQL SELECT to_char(access_stamp, 'dd/mm/yyyy hh24:mi:ss')
					INTO	:chr_p_access_stamp_cmp
					FROM	CAREPLY
					WHERE	corp_id = :chr_l_h_aresponse_ca_id
					AND	client = 	:chr_l_h_aresponse_client;
				printf("sqlca.sqlcode = |%d|\n",sqlca.sqlcode);
				fflush(stdout);
				IS_ANY_ORA_ERROR;
			
				printf("access stamp is |%s|\n",p_ca_cust_instr_struct_h->h_access_stamp);
				fflush(stdout);
			if (strcmp(chr_p_access_stamp_cmp, p_ca_cust_instr_struct_h->h_access_stamp) != 0)
			{
				printf("access stamp in fail is |%s|\n",p_ca_cust_instr_struct_h->h_access_stamp);
				fflush(stdout);
				sprintf(chr_l_buf, "Record modified by other user for CA_ID: %s, Account: %s", chr_l_h_aresponse_ca_id, chr_l_h_aresponse_client);
				CO_ProcMonitor(p_logfile, chr_l_buf, NULL, NULL);
				APL_GOBACK_FAIL;
			}
		}	
   }

	int_l_exist_a = 0;
	printf("before select query\n");
	fflush(stdout);
	EXEC SQL SELECT NVL(COUNT(*),0)
				INTO    :int_l_exist_a
				FROM    CAREPLY
				WHERE   corp_id   = :p_ca_cust_instr_struct_h->h_corp_id
				AND     client = :p_ca_cust_instr_struct_h->h_aentle_client;

	IS_ANY_ORA_ERROR
	printf("before string copy after executing query\n");
	fflush(stdout);
		strcpy(chr_l_h_aresponse_resp_dt,chr_l_sysdate_b);
		strcpy(chr_l_h_aresponse_maker,p_intl_envdatastruct_h->usr);
		strcpy(chr_l_h_aresponse_maker_dt,chr_l_sysdate_b);
		strcpy(chr_l_h_aresponse_access_stamp,chr_l_curr_datetime);
		printf("Customer refno before copy |%s|\n",p_ca_cust_instr_struct_h->h_instr_swift_msgidentiy_no);
		strcpy(chr_l_h_aresponse_inst_seme, p_ca_cust_instr_struct_h->h_instr_swift_msgidentiy_no);
		printf("Customer refno after copy |%s|\n",p_ca_cust_instr_struct_h->h_instr_swift_msgidentiy_no);
		flt_l_h_aresponse_inst_holding = p_ca_cust_instr_struct_h->h_posn;
		printf(" p_ca_cust_instr_struct_h->h_posn is %lf \n",p_ca_cust_instr_struct_h->h_posn);
		printf("chr_l_h_aresponse_stat_code before copy |%s|\n",p_ca_cust_instr_struct_h->h_stat_cd);
		strcpy(chr_l_h_aresponse_stat_code, p_ca_cust_instr_struct_h->h_stat_cd);
		printf("chr_l_h_aresponse_stat_code after copy |%s|\n",chr_l_h_aresponse_stat_code);
		strcpy(chr_l_h_aresponse_sendresp_yn, p_ca_cust_instr_struct_h->h_send_resp_ind);
		printf(" h_mode  is %s \n",p_intl_envdatastruct_h->h_mode);
		printf(" flt_l_h_aresponse_inst_holding is %lf \n",flt_l_h_aresponse_inst_holding);
		printf(" flt_l_h_aresponse_inst_holding is %lf \n",flt_l_h_aresponse_inst_holding);
		strcpy(chr_l_h_aresponse_caoptioncode, p_ca_cust_instr_struct_h->h_ca_optcd);	
	if(int_l_exist_a > 0)
 	{
		if ( strcmp(p_intl_envdatastruct_h->h_mode, APL_FUNC_DELETE) == 0 )
		{
			strcpy(chr_l_h_aresponse_status, "DD");
		
		}
		else
		{
			strcpy(chr_l_h_aresponse_status, "AA");
		}
	
		if ( !strcmp(p_intl_envdatastruct_h->h_mode, APL_FUNC_INPUT) )
		{
        
         memset(chr_l_sr_no,APL_NULL_CHAR,4);
         /* VaibhavK 31Oct2007 */
         EXEC SQL SELECT NVL(MAX(srl_num),0)+1 INTO :chr_l_sr_no:l_i_sr_no FROM CAREPLYSPLIT
								 WHERE corp_id          = :chr_l_h_aresponse_ca_id
								 AND   client        = :chr_l_h_aresponse_client;

			IS_ANY_ORA_ERROR
         EXEC SQL INSERT INTO CAREPLYSPLIT VALUES (:chr_l_sr_no,
																	  :chr_l_h_aresponse_ca_id:l_i_aresponse_ca_id,
																	  :chr_l_h_aresponse_client:l_i_aresponse_account,
																	  :flt_l_h_aresponse_inst_holding:l_i_aresponse_INST_HOLDING,
																	  :chr_l_h_aresponse_inst_seme:l_i_aresponse_INST_SEME,
																	  :chr_l_h_aresponse_sendresp_yn:l_i_aresponse_sendresp_yn,
																	  :chr_l_h_aresponse_stat_code:l_i_aresponse_stat_code,
																	  :chr_l_h_aresponse_status:l_i_aresponse_status,
                                                     :chr_l_h_aresponse_access_stamp:l_i_aresponse_access_stamp,
																	  :chr_l_h_aresponse_caoptioncode:l_i_aresponse_caoptioncode);	
	
		if(sqlca.sqlcode)
		{
			 sprintf(chr_l_buf, "Unsuccessful in inserting in CAREPLYSPLIT for CA-ID: %s, Account: %s, Cust REF: %s", chr_l_h_aresponse_ca_id, chr_l_h_aresponse_client, chr_l_h_aresponse_inst_seme);
			CO_ProcMonitor(p_logfile,"Unsuccesssful in inserting in CAREPLYSPLIT",NULL ,NULL);
			CO_ProcMonitor(p_logfile,chr_l_buf,NULL ,NULL);
			APL_GOBACK_FAIL
		}

			EXEC SQL UPDATE CAREPLY SET   RESPONSE_DT		  = :chr_l_h_aresponse_resp_dt,
												  INSTR_MSGREFNO		  = :chr_l_h_aresponse_inst_seme, 
											     INSTR_HOLD	  = :flt_l_h_aresponse_inst_holding ,
											     SEND_RESP_IND	  = :chr_l_h_aresponse_sendresp_yn,
											     STAT_CD		  = :chr_l_h_aresponse_stat_code,
												  STATUS			  = :chr_l_h_aresponse_status,
												  maker  		  = :chr_l_h_aresponse_maker,
												  MAKER_DT		  = :chr_l_h_aresponse_maker_dt,
												  access_stamp   = :chr_l_h_aresponse_access_stamp,
												  date_of_input		  = :chr_l_h_aresponse_access_stamp 
										  WHERE corp_id          = :chr_l_h_aresponse_ca_id
										  AND   client		  = :chr_l_h_aresponse_client;
			IS_ANY_ORA_ERROR
		}
		else
		{
          if (!strcmp(p_intl_envdatastruct_h->h_mode, APL_FUNC_MODIFY))
			 {
              
         printf ("\n INSIDE MODIFY \n");
         fflush(stdout);
         memset(chr_l_sr_no,APL_NULL_CHAR,4);
         /* VaibhavK 31Oct2007 */
         EXEC SQL SELECT NVL(MAX(srl_num),0)+1 INTO :chr_l_sr_no:l_i_sr_no FROM CAREPLYSPLIT
								 WHERE corp_id          = :chr_l_h_aresponse_ca_id
								 AND   client        = :chr_l_h_aresponse_client;

			IS_ANY_ORA_ERROR
			
			EXEC SQL SELECT INSTR_HOLD 
						INTO :flt_l_h_total_inst_holding:l_i_total_INST_HOLDING
						FROM CAREPLY
						WHERE corp_id				= :chr_l_h_aresponse_ca_id
						AND   client        = :chr_l_h_aresponse_client;

			IS_ANY_ORA_ERROR;

         EXEC SQL INSERT INTO CAREPLYSPLIT VALUES (:chr_l_sr_no,
																	  :chr_l_h_aresponse_ca_id:l_i_aresponse_ca_id,
																	  :chr_l_h_aresponse_client:l_i_aresponse_account,
																	  :flt_l_h_aresponse_inst_holding:l_i_aresponse_INST_HOLDING,
																	  :chr_l_h_aresponse_inst_seme:l_i_aresponse_INST_SEME,
																	  :chr_l_h_aresponse_sendresp_yn:l_i_aresponse_sendresp_yn,
																	  :chr_l_h_aresponse_stat_code:l_i_aresponse_stat_code,
																	  :chr_l_h_aresponse_status:l_i_aresponse_status,
                                                     :chr_l_h_aresponse_access_stamp:l_i_aresponse_access_stamp,
																	  :chr_l_h_aresponse_caoptioncode:l_i_aresponse_caoptioncode);
	
		if(sqlca.sqlcode)
		{
			 sprintf(chr_l_buf, "Unsuccessful in inserting in CAREPLYSPLIT for CA-ID using modify h_mode: %s, Account: %s, Cust REF: %s", chr_l_h_aresponse_ca_id, chr_l_h_aresponse_client, chr_l_h_aresponse_inst_seme);
			CO_ProcMonitor(p_logfile,"Unsuccesssful in inserting in CAREPLYSPLIT",NULL ,NULL);
			CO_ProcMonitor(p_logfile,chr_l_buf,NULL ,NULL);
			APL_GOBACK_FAIL
		}

		printf(" flt_l_h_aresponse_inst_holding is %lf \n",flt_l_h_aresponse_inst_holding);
		printf(" flt_l_h_total_inst_holding is %lf \n",flt_l_h_total_inst_holding);
		flt_l_h_total_inst_holding=flt_l_h_total_inst_holding + flt_l_h_aresponse_inst_holding;
		printf(" After adding flt_l_h_total_inst_holding is %lf \n",flt_l_h_total_inst_holding);

			     EXEC SQL UPDATE CAREPLY SET   RESPONSE_DT        = :chr_l_h_aresponse_resp_dt,
                                              INSTR_MSGREFNO      = :chr_l_h_aresponse_inst_seme,
															 INSTR_HOLD     = :flt_l_h_total_inst_holding ,
                                              SEND_RESP_IND    = :chr_l_h_aresponse_sendresp_yn,
                                              STAT_CD      = :chr_l_h_aresponse_stat_code,
                                              STATUS         = :chr_l_h_aresponse_status,
                                              maker          = :chr_l_h_aresponse_maker,
                                              MAKER_DT       = :chr_l_h_aresponse_maker_dt,
                                              access_stamp   = :chr_l_h_aresponse_access_stamp
                                        WHERE corp_id          = :chr_l_h_aresponse_ca_id
                                        AND   client        = :chr_l_h_aresponse_client;
			IS_ANY_ORA_ERROR
         printf ("\n FINISHED  MODIFY *%d* \n",sqlca.sqlcode);
         fflush(stdout);
          }
			 else
			 {
          
			l_del_exist = 0;
		   EXEC SQL SELECT NVL(count(*),0)	
					INTO	 :l_del_exist
					FROM	 CAREPLYSPLIT
					WHERE	 corp_id 		= :chr_l_h_aresponse_ca_id
					AND	 client 	= :chr_l_h_aresponse_client
					AND    HOLDING_AMT = :flt_l_h_aresponse_inst_holding
					AND	SRL_NUM 		=:p_ca_cust_instr_struct_h->h_srl_num;
			IS_ANY_ORA_ERROR
			printf("HERE sqlca.sqlcode is %d \n",sqlca.sqlcode);
			printf("HERE del_exists is %d \n",l_del_exist);
			printf("HERE p_ca_cust_instr_struct_h->h_srl_num is %s \n",p_ca_cust_instr_struct_h->h_srl_num);
			printf("HERE client is %s \n",chr_l_h_aresponse_client);
			printf("HERE  corp_id%s \n",chr_l_h_aresponse_ca_id);
			printf("HERE hold is %lf \n",flt_l_h_aresponse_inst_holding);

			if (l_del_exist == 0)
			{
				sprintf(chr_l_buf, "No Record exists for CA_ID: %s, Account: %s for deletion ", chr_l_h_aresponse_ca_id, chr_l_h_aresponse_client);
				CO_ProcMonitor(p_logfile, chr_l_buf, NULL, NULL);
				APL_GOBACK_FAIL;
			}

			IS_ANY_ORA_ERROR;

			     EXEC SQL UPDATE CAREPLY SET  INSTR_MSGREFNO      = :chr_l_h_aresponse_inst_seme,
                                              SEND_RESP_IND    = :chr_l_h_aresponse_sendresp_yn,
                                              STAT_CD      = :chr_l_h_aresponse_stat_code,
                                              maker          = :chr_l_h_aresponse_maker,
                                              MAKER_DT       = :chr_l_h_aresponse_maker_dt,
                                              access_stamp   = :chr_l_h_aresponse_access_stamp
                                        WHERE corp_id          = :chr_l_h_aresponse_ca_id
                                        AND   client        = :chr_l_h_aresponse_client;
			IS_ANY_ORA_ERROR
			     l_del_hold_flg = 1;  
			printf("sqlca.sqlcode is %d \n",sqlca.sqlcode);
			printf("l_del_hold_flg is %d\n",l_del_hold_flg);
			fflush(stdout);
			 }
		}
		if(sqlca.sqlcode)
		{
			 sprintf(chr_l_buf, "Unsuccessful in updating CAREPLY for CA-ID: %s, Account: %s, Cust REF: %s", chr_l_h_aresponse_ca_id, chr_l_h_aresponse_client, chr_l_h_aresponse_inst_seme);
			CO_ProcMonitor(p_logfile, chr_l_buf, NULL ,NULL);
			APL_GOBACK_FAIL;
		}
	}

	else if(int_l_exist_a == 0)
	{
     

		strcpy(chr_l_h_aresponse_resmsg_dt,APL_NULL_STRING);
		strcpy(chr_l_h_aresponse_paymsg_dt,APL_NULL_STRING);
		strcpy(chr_l_h_aresponse_checker,APL_USER_SYSTEM);
		strcpy(chr_l_h_aresponse_checker_dt,chr_l_sysdate_b);
		strcpy(chr_l_h_aresponse_status,APL_STS_AUTH);
		strcpy(chr_l_h_aresponse_input_dt,chr_l_sysdate_b);

		l_i_aresponse_resmsg_dt	=	-1;
		l_i_aresponse_paymsg_dt	=	-1;


       
		printf("chr_l_h_aresponse_ca_id = |%s|\n",chr_l_h_aresponse_ca_id); 
		printf("chr_l_h_aresponse_client = |%s|\n",chr_l_h_aresponse_client); 
		printf("chr_l_h_aresponse_inst_seme = |%s|\n",chr_l_h_aresponse_inst_seme); 
		printf("chr_l_h_aresponse_stat_code = |%s|\n",chr_l_h_aresponse_stat_code); 
		printf("chr_l_h_aresponse_status = |%s|\n",chr_l_h_aresponse_status); 
		printf("chr_l_h_aresponse_caoptioncode = |%s|\n",chr_l_h_aresponse_caoptioncode); 
         EXEC SQL INSERT INTO CAREPLYSPLIT VALUES (1,
																	  :chr_l_h_aresponse_ca_id:l_i_aresponse_ca_id,
																	  :chr_l_h_aresponse_client:l_i_aresponse_account,
																	  :flt_l_h_aresponse_inst_holding:l_i_aresponse_INST_HOLDING,
																	  :chr_l_h_aresponse_inst_seme:l_i_aresponse_INST_SEME,
																	  :chr_l_h_aresponse_sendresp_yn:l_i_aresponse_sendresp_yn,
																	  :chr_l_h_aresponse_stat_code:l_i_aresponse_stat_code,
																	  :chr_l_h_aresponse_status:l_i_aresponse_status,
                                                     :chr_l_h_aresponse_access_stamp:l_i_aresponse_access_stamp,
																	  :chr_l_h_aresponse_caoptioncode:l_i_aresponse_caoptioncode);
	
		if(sqlca.sqlcode)
		{
			 sprintf(chr_l_buf, "Unsuccessful in inserting in CAREPLYSPLIT for sqlca.sqlcode = |%d|, CA-ID: %s, Account: %s, Cust REF: %s", sqlca.sqlcode, chr_l_h_aresponse_ca_id, chr_l_h_aresponse_client, chr_l_h_aresponse_inst_seme);
			CO_ProcMonitor(p_logfile,"Unsuccesssful in inserting in CAREPLYSPLIT",NULL ,NULL);
			printf("Sqlca.sqlcode = |%d|\n",sqlca.sqlcode);
			fflush(stdout);
			APL_GOBACK_FAIL
		}

		EXEC SQL INSERT INTO CAREPLY VALUES( :chr_l_h_aresponse_ca_id:l_i_aresponse_ca_id,
														 	:chr_l_h_aresponse_client:l_i_aresponse_account,
															:chr_l_h_aresponse_resp_dt:l_i_aresponse_resp_dt,
															:chr_l_h_aresponse_resmsg_dt:l_i_aresponse_resmsg_dt,
															:chr_l_h_aresponse_paymsg_dt:l_i_aresponse_paymsg_dt,
															:chr_l_h_aresponse_inst_seme:l_i_aresponse_INST_SEME,
															:flt_l_h_aresponse_inst_holding:l_i_aresponse_INST_HOLDING,
															:chr_l_h_aresponse_sendresp_yn:l_i_aresponse_sendresp_yn,
															:chr_l_h_aresponse_stat_code:l_i_aresponse_stat_code,
															:chr_l_h_aresponse_maker:l_i_aresponse_maker,
															:chr_l_h_aresponse_maker_dt:l_i_aresponse_maker_dt,
															:chr_l_h_aresponse_checker:l_i_aresponse_checker,
															:chr_l_h_aresponse_checker_dt:l_i_aresponse_checker_dt,
															:chr_l_h_aresponse_status:l_i_aresponse_status,
															:chr_l_h_aresponse_access_stamp:l_i_aresponse_access_stamp,
															:chr_l_h_aresponse_input_dt:l_i_aresponse_input_dt);

					
			IS_ANY_ORA_ERROR
		if(sqlca.sqlcode)
		{
			 sprintf(chr_l_buf, "Unsuccessful in inserting in sqlcode = |%d| CAREPLY for CA-ID: %s, Account: %s, Cust REF: %s", sqlca.sqlcode, chr_l_h_aresponse_ca_id, chr_l_h_aresponse_client, chr_l_h_aresponse_inst_seme);
			CO_ProcMonitor(p_logfile,"Unsuccesssful in inserting in CAREPLY",NULL ,NULL);
			printf("Sqlca.sqlcode = |%d|\n",sqlca.sqlcode);
			fflush(stdout);
			APL_GOBACK_FAIL
		}
	}

	
	if ( strcmp(chr_l_h_aresponse_sendresp_yn,"Y") == 0 )
   {
      if (strcmp(chr_l_h_aresponse_status, "AA")==0)
      {
         strcat(chr_param_string,"INST;");
			strcat(chr_param_string,p_ca_cust_instr_struct_h->h_srl_num);
			strcat(chr_param_string,";");
      }
      else if (strcmp(chr_l_h_aresponse_status, "DD")==0)
      {
         strcat(chr_param_string,"CAST;");
			strcat(chr_param_string,p_ca_cust_instr_struct_h->h_srl_num);
			strcat(chr_param_string,";");
      }
      printf("*** *** %s \n",chr_param_string);

      
      if(APL_FAILURE == GBDbInsIMSGENT("562N02", chr_l_h_aresponse_ca_id, chr_l_h_aresponse_client, 'Y', chr_param_string, l_debug_info_ptr))
      {
         CO_ProcMonitor(p_logfile, "Customer Response Message Could Not be sent", l_debug_info_ptr, NULL);
         APL_GOBACK_FAIL
      }
   }

	

	if(l_del_hold_flg)
	{
		
	 	EXEC SQL SELECT INSTR_HOLD
                  INTO :flt_l_h_total_inst_holding:l_i_total_INST_HOLDING
                  FROM CAREPLY
                  WHERE corp_id          = :chr_l_h_aresponse_ca_id
                  AND   client        = :chr_l_h_aresponse_client;

      IS_ANY_ORA_ERROR;

		printf("p_inststruct->h_srl_num is %s\n",p_ca_cust_instr_struct_h->h_srl_num);
	   EXEC SQL UPDATE CAREPLYSPLIT SET STATUS ='DD' 
												WHERE corp_id          = :chr_l_h_aresponse_ca_id
												AND   client        = :chr_l_h_aresponse_client
												AND   SRL_NUM				= :p_ca_cust_instr_struct_h->h_srl_num; 								  
      IS_ANY_ORA_ERROR

		printf(" flt_l_h_total_inst_holding is %lf \n",flt_l_h_total_inst_holding);
		flt_l_h_total_inst_holding=flt_l_h_total_inst_holding - flt_l_h_aresponse_inst_holding;
		printf(" After deleting flt_l_h_total_inst_holding is %lf \n",flt_l_h_total_inst_holding);
		
		EXEC SQL UPDATE CAREPLY SET INSTR_HOLD     = :flt_l_h_total_inst_holding 
										  WHERE corp_id          = :chr_l_h_aresponse_ca_id
										  AND   client        = :chr_l_h_aresponse_client;
      IS_ANY_ORA_ERROR
		printf("I AM HERE!!!!!!!!!!!!!!!!!!!!!");
      
      EXEC SQL UPDATE CAREPLY SET RESPONSE_DT = NULL
										  WHERE corp_id          = :chr_l_h_aresponse_ca_id
										  AND   client        = :chr_l_h_aresponse_client 
										  AND INSTR_HOLD       = 0;

      IS_ANY_ORA_ERROR
	}
		
	RETURN_SUCCESS :
		

		#ifdef SYS_DEBUG
			printf("Leaving Function CA_Mod_CustInst with success\n");
		#endif

		return(APL_SUCCESS);

	RETURN_FAILURE :

		#ifdef SYS_DEBUG
			printf("Leaving Function CA_Mod_CustInst with errors\n");
		#endif

		return(APL_FAILURE);

}



int CA_CustInstMntRept(CA_CUST_INSTR_STRUCT_H *p_ca_cust_instr_struct_h, int *int_linecount,int *int_page,char **argv,FILE *p_repfile,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	
	char  chr_l_h_aresponse_resp_dt[APL_DATE_LEN]                =  APL_NULL_STRING;
   char  chr_l_h_aresponse_resmsg_dt[APL_DATE_LEN]              =  APL_NULL_STRING;
   char  chr_l_h_aresponse_paymsg_dt[APL_CLIENT_LENGTH]           =  APL_NULL_STRING;
   
	char  chr_l_h_client_a[APL_DATE_LEN]              =  APL_NULL_STRING;

	short l_i_aresponse_resp_dt                              =  0;
   short l_i_aresponse_resmsg_dt                            =  0;
   short l_i_aresponse_paymsg_dt                            =  0;


   memset(chr_l_h_client_a,'\0',APL_CLIENT_LENGTH);

	if(strlen(p_ca_cust_instr_struct_h->h_corp_id) == 0)
	{
		APL_DATA_MISSING("CA ID",APL_NULL_STRING,APL_NULL_STRING);
	}
	
	EXEC SQL SELECT	RESPONSE_DT,
							RES_MSG_DATE,
							PYMT_MSG_DATE
			   INTO  	:chr_l_h_aresponse_resp_dt:l_i_aresponse_resp_dt,
							:chr_l_h_aresponse_resmsg_dt:l_i_aresponse_resmsg_dt,
							:chr_l_h_aresponse_paymsg_dt:l_i_aresponse_paymsg_dt
				FROM     CAREPLY
				WHERE    corp_id		=	:p_ca_cust_instr_struct_h->h_corp_id
				AND      client  =  :p_ca_cust_instr_struct_h->h_aentle_client;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,p_ca_cust_instr_struct_h->h_corp_id,p_ca_cust_instr_struct_h->h_aentle_client,APL_NULL_STRING);

	if(*int_linecount == 0)
   {
     (*int_page)++;
     if(APL_FAILURE == Header(p_ca_cust_instr_struct_h->h_corp_id ,p_intl_envdatastruct_h->h_mode, int_page,p_repfile,l_debug_info_ptr))
     {
        APL_GOBACK_FAIL
     }

   }

	if(l_i_aresponse_resmsg_dt == -1)
	{
		strcpy(chr_l_h_aresponse_resmsg_dt,"NOT SENT   ");
	}
	if(l_i_aresponse_paymsg_dt== -1)
	{
		strcpy(chr_l_h_aresponse_paymsg_dt,"NOT SENT   ");
	}
	
	strcpy(chr_l_h_client_a,p_ca_cust_instr_struct_h->h_aentle_client);

	if(strlen(chr_l_h_client_a) != APL_CLIENT_LENGTH)
	{
		if(APL_FAILURE == CO_PadString(chr_l_h_client_a,'R',APL_CLIENT_LENGTH," ",l_debug_info_ptr))
      {
         APL_GOBACK_FAIL
      }

	}


	fprintf(p_repfile,"%-20s  %-26s  %-25.11s  %-21.11s  %-26s  %-14f      %-16s  %.1s\n",chr_l_h_client_a,chr_l_h_aresponse_resmsg_dt,chr_l_h_aresponse_paymsg_dt,chr_l_h_aresponse_resp_dt, p_ca_cust_instr_struct_h->h_instr_swift_msgidentiy_no, p_ca_cust_instr_struct_h->h_posn, p_ca_cust_instr_struct_h->h_stat_cd, p_ca_cust_instr_struct_h->h_send_resp_ind); 

	(*int_linecount)++;
	
	RETURN_SUCCESS:
		return(APL_SUCCESS);
	RETURN_FAILURE:
		return(APL_FAILURE);

}




int Header(char *chr_p_ca_id,char *p_mode, int *int_page,FILE *p_repfile,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	char chr_l_h_aevent_instrcode[APL_INSTRUMENTCODE_LEN]		=	APL_NULL_STRING;
	char chr_l_h_aevent_ce_typ[3]						=	APL_NULL_STRING;
	char chr_l_h_aevent_decl_dt[APL_DATE_LEN]		=	APL_NULL_STRING;
	char chr_l_sysdate_b[APL_DATE_LEN]					=	APL_NULL_STRING;
   char chr_l_mode[8]										=  APL_NULL_STRING;
	int  int_l_h_aevent_event_nbr;
	
	short l_i_aevent_instr_code							=	0;
	short l_i_aevent_ce_typ							=	0;	
	short l_i_aevent_decl_dt						=	0;
	short l_i_aevent_evnt_nbr						=	0;


	EXEC SQL SELECT   instr_code,
                     CA_EVENT,
                     declare_dt,
                     evnt_indnt
            INTO     :chr_l_h_aevent_instrcode:l_i_aevent_instr_code,
                     :chr_l_h_aevent_ce_typ:l_i_aevent_ce_typ,
                     :chr_l_h_aevent_decl_dt:l_i_aevent_decl_dt,
                     :int_l_h_aevent_event_nbr:l_i_aevent_evnt_nbr
            FROM     CAEVENT
            WHERE    corp_id = :chr_p_ca_id;

   IS_ANY_ORA_ERROR   
      
	if( strcmp(p_mode, APL_FUNC_INPUT) == 0)
	{
		strcpy(chr_l_mode, "NEW");
	}
	if( strcmp(p_mode, APL_FUNC_MODIFY) == 0 )
	{
		strcpy(chr_l_mode, "MODIFY");
	}
	if( strcmp(p_mode, APL_FUNC_DELETE) == 0 )
	{
		strcpy(chr_l_mode, "DELETE");
	} 

	
	if ( APL_FAILURE == CO_RtvSysDt(  chr_l_sysdate_b,l_debug_info_ptr))
   {
      APL_GOBACK_FAIL
   }

	
	fprintf(p_repfile,"\n                                           CUSTOMER INSTRUCTION MAINTENANCE REPORT\n");	
	fprintf(p_repfile,"Date:%.11s                           %s                                    Page No:%d\n\n",chr_l_sysdate_b,g_mt_commonsys_params_struct_h.ca_identname,*int_page);
	fprintf(p_repfile,"INSTRUMENT:%s                  DECLARATION DATE:%.11s                 EVENT TYPE:%s                 SERIAL NO:%d         MODE: %s",chr_l_h_aevent_instrcode,chr_l_h_aevent_decl_dt,chr_l_h_aevent_ce_typ,int_l_h_aevent_event_nbr, chr_l_mode);

	fprintf(p_repfile,"\n\n");
	fprintf(p_repfile,"----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
	fprintf(p_repfile,"ACCOUNT               RESPONSE MSG DATE           PAYMENT MSG DATE           RESPONSE DATE          CUSTOMER REFERENCE          HOLDINGS            STATCODE          SEND RESPONSE Y/N");
	fprintf(p_repfile,"\n");
	fprintf(p_repfile,"----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n");

	
	RETURN_SUCCESS:
   	return(APL_SUCCESS);
   RETURN_FAILURE:
   	return(APL_FAILURE);
	
}
	


int Footer(FILE *p_repfile,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	fprintf(p_repfile,"\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n");

	fprintf(p_repfile,"                                                 END OF REPORT");
	
	return(APL_SUCCESS);


}







int main(int argc,char **argv) //AIX -Warning Removal
{
   struct sqlca sqlca;
   /* OPT:AIX DEBUG_INFO_STRUCT_H *l_debug_info_ptr             	=  NULL; */
   DEBUG_INFO_STRUCT_H **l_debug_info_ptr             	=  NULL;
   INTL_ENV_DATA_STRUCT_H l_intl_env_data_h;
	CA_CUST_INSTR_STRUCT_H l_ca_cust_instr_struct_h;


   FILE  *l_finifile                      	=  NULL;
   FILE  *l_logfile                       	=  NULL;
   FILE  *l_repfile                       	=  NULL;

   char  chr_l_logfile_name[PATH_LENGTH]      	=  APL_NULL_STRING;
   char  chr_uname[APL_USERID_LEN]            	=  APL_NULL_STRING;
   char  chr_custody_id_b[APL_USERID_LEN]           	=  APL_NULL_STRING;
   char  chr_passwd[APL_PASSWD_LEN]           	=  APL_NULL_STRING;
   char  chr_l_logdir[PATH_LENGTH]            	=  APL_NULL_STRING;
   char  chr_l_inifile[PATH_LENGTH]           	=  APL_NULL_STRING;
	char  chr_l_ca_id[CORP_ID_LEN]						=	APL_NULL_STRING;		
	char  chr_l_h_aentitl_account[APL_CLIENT_LENGTH]=	APL_NULL_STRING;  
	char  chr_l_h_cname[66]								=	APL_NULL_STRING;
   char 	**temp 										=	NULL;
   char 	**chr_temp1 										=	NULL;
   char  chr_l_buf[BUFFER_LEN]                    =  APL_NULL_STRING;
   char  chr_l_sel_type[2]                       =  APL_NULL_STRING; 
	char	chr_l_sr_no[5]									= APL_NULL_STRING;

   int   int_num 											=	0;
   int   int_l_retval                         	=  0;
	int   count 										= 	0;
	int   int_page											=	0;
	int   int_linecount									=	0;
	int 	int_l_holding									=	0;
   double   l_def_hold                       =  0.0; 
   char chr_to_op_event_type[3],chr_to_instrcode[10];
	short i_to_op_event_type, i_to_instrode,i_to_new_stock_qty_rate,i_to_new_stock_qty ,i_to_old_stock_qty,i_conv_rate;
   double to_new_safek_rt = 0,to_new_stock_quantity = 0,to_old_stock_quantity = 0,flt_conv_rate = 0;
	short l_i_aentitl_account						=	0;
	short l_i_cname									=	0;
	short i_def_hold									=	0;  
   char  chr_l_ce_typ[3]                         = APL_NULL_STRING;		
   short i_ca_event                            = 0;
	
	EXEC SQL VAR chr_uname  IS STRING;
   EXEC SQL VAR chr_custody_id_b IS STRING;
   EXEC SQL VAR chr_passwd IS STRING;

	EXEC SQL VAR chr_l_h_aentitl_account	IS STRING;
	EXEC SQL VAR chr_l_h_cname				IS STRING;
	EXEC SQL VAR chr_to_op_event_type  IS STRING; 
	EXEC SQL VAR chr_to_instrcode IS STRING;
   EXEC SQL VAR chr_l_ce_typ IS STRING; 
	
   sqlca.sqlcode = 0;

	memset(chr_l_h_aentitl_account,'\0',APL_CLIENT_LENGTH);
	memset(chr_l_h_cname,			   '\0',66);

   strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
   strcat(chr_l_inifile,"intl_sun.cfg");

	if ( ( l_finifile=fopen(chr_l_inifile,"r") ) == NULL)
   {
      APL_GOBACK_FAIL
   }



   

   APL_FETCH_DB_LOGIN_DETAILS(l_finifile, chr_custody_id_b, chr_uname, chr_passwd, APL_OUT_FILE, l_debug_info_ptr) //AIX -Warning Removal

   EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;


   if (sqlca.sqlcode)
   {
      APL_GOBACK_FAIL
   }
   else
   {
   

		if (APL_FAILURE == CO_Rtv_RptFileName( "2M",
                                          APL_LOGFILE_DESC,
                                          100,
                                          argv[5],
                                          argv,
                                          &l_logfile,
                                          l_debug_info_ptr ) ) //AIX -Warning Removal
      {
      	APL_GOBACK_FAIL
      }


      

		EXEC SQL COMMIT WORK;

      if (sqlca.sqlcode)
      {
         CO_ProcMonitor(l_logfile, "Could not commit after opening chr_log file", NULL, NULL);
         APL_GOBACK_FAIL
      }

      

      if (APL_FAILURE == CO_RtvSysParams(l_debug_info_ptr))
      {
         CO_ProcMonitor(l_logfile, "Error In Getting System Parameters", NULL, NULL);
         CO_PrnErr(*l_debug_info_ptr); /* OPT:AIX */
         APL_GOBACK_FAIL
      }


		 

      strcpy(l_intl_env_data_h.usr, argv[3]);
      strcpy(l_intl_env_data_h.h_mode, argv[4]);
      strcpy(l_intl_env_data_h.processtion, argv[5]);
      strcpy(l_intl_env_data_h.auth_req, argv[6]);
      strcpy(l_intl_env_data_h.subprocess, argv[7]);
      strcpy(l_intl_env_data_h.h_process, argv[8]);

	
      

	   if (APL_FAILURE == CO_SplitStr( argv[9],
                                       '|',
                                       &int_num,
                                       &temp ))
      {
      	CO_ProcMonitor(l_logfile, "Failure from CBStrSplitFn", NULL, NULL);
         APL_GOBACK_FAIL
      }
		else	
			CO_ProcMonitor(l_logfile,"Successful in CBStrSplitFn",NULL,NULL);
	
		
		if(int_num != 10)
		{
			CO_ProcMonitor(l_logfile,"Improper Number Of Arguments",NULL,NULL);
			APL_GOBACK_FAIL
		}

		strcpy(chr_l_ca_id,temp[0]);
		strcpy(l_ca_cust_instr_struct_h.h_corp_id, temp[0]);
		strcpy(l_ca_cust_instr_struct_h.h_instr_swift_msgidentiy_no, temp[2]);
		l_ca_cust_instr_struct_h.h_posn = atof(temp[3]);
		printf("l_inststruct.h_posn  is %lf\n",l_ca_cust_instr_struct_h.h_posn );
		printf("temp[3]  is %s\n",temp[3] );
		strcpy(l_ca_cust_instr_struct_h.h_stat_cd, temp[5]);
		strcpy(l_ca_cust_instr_struct_h.h_access_stamp, temp[6]);
		strcpy(l_ca_cust_instr_struct_h.h_send_resp_ind, temp[4]);
		strcpy(chr_l_sel_type, temp[7]); 
		strcpy(chr_l_sr_no, temp[8]);
		strcpy(l_ca_cust_instr_struct_h.h_ca_optcd,temp[9]);	
	
		
		if (!strlen (chr_l_ca_id))
			APL_DATA_MISSING("CORPORATE ACTION ID",APL_NULL_STRING,APL_NULL_STRING)

      if((strcmp(l_intl_env_data_h.h_mode, APL_FUNC_INPUT) != 0) && (strcmp(chr_l_sr_no,APL_NULL_STRING)==0))
          APL_DATA_MISSING("SERIAL NUMBER",APL_NULL_STRING,APL_NULL_STRING)



	if (APL_FAILURE == CO_Rtv_RptFileName( "RC",
                                       "Cust Instruction Mnt Report",
                                        100,
                                        argv[5],
                                        argv,
                                        &l_repfile,
                                        l_debug_info_ptr ) ) //AIX -Warning Removal
   {
      APL_GOBACK_FAIL
   }
	
	fprintf(l_repfile,"                                           \n");

      printf(" Before sqlca.sqlcode is %d\n",sqlca.sqlcode);
      printf(" chr_l_ca_id is %s\n",chr_l_ca_id);
      fflush(stdout);

         
         EXEC SQL SELECT NVL(OP_EVT_CLASS,''),NVL(INSTR_CODE,''),NVL(NEW_SAFEK_RT,0),NVL(NEW_SAFEK_QTY,0),NVL(OLD_STK_QTY,0),CA_EVENT INTO :chr_to_op_event_type:i_to_op_event_type,:chr_to_instrcode:i_to_instrode,:to_new_safek_rt:i_to_new_stock_qty_rate,:to_new_stock_quantity:i_to_new_stock_qty,:to_old_stock_quantity:i_to_old_stock_qty,:chr_l_ce_typ:i_ca_event
         FROM CAEVENT
         WHERE CORP_ID = :chr_l_ca_id;
      printf(" sqlca.sqlcode is %d\n",sqlca.sqlcode);
      fflush(stdout);

         IS_ANY_ORA_ERROR
   
      printf(" sqlca.sqlcode is %d\n",sqlca.sqlcode);
      printf(" instr_code is %s\n",chr_to_instrcode);
      printf(" to_event_type is %s\n",chr_to_op_event_type);
      printf(" chr_l_ca_id is %s\n",chr_l_ca_id);
      fflush(stdout);


		if(!strlen(temp[1]))
   	{
			printf("Into strlen(temp[1]))\n");
			
			l_def_hold = 0.0;
			i_def_hold = 0;

	
	if((strcmp(chr_to_op_event_type,"TO") != 0) || (strcmp(chr_l_ce_typ,"SM")!=0) || (strcmp(chr_l_ce_typ,"BB")!=0))
	{
			printf("Into not TO / SM / BB if condition\n");
      	EXEC SQL DECLARE cust_instr CURSOR FOR
               	SELECT  e.client,
                    		  a.cln_name,
								  e.QUANTITY_BAL
                  FROM    CAENTITLEMENT e,
                          MT_CLIENT a
                  WHERE   e.corp_id = :chr_l_ca_id
                  AND     e.STATUS in('RP','PP') /*Smita - Changed Col Name - HDFCCA Base Ver*/
                  AND     e.client=a.cln_code
                  AND     e.client NOT IN ( SELECT r.client
                                             FROM   CAREPLY r,CAENTITLEMENT e
                                             WHERE  r.corp_id = :chr_l_ca_id
                                             AND    r.RESPONSE_DT IS NOT NULL 
                                             AND    r.client = e.client);


         IS_ANY_ORA_ERROR

		   EXEC SQL OPEN cust_instr;

         IS_ANY_ORA_ERROR
  
      	for(count=1;;count++)
 		   {
				
				EXEC SQL FETCH cust_instr INTO :chr_l_h_aentitl_account:l_i_aentitl_account , :chr_l_h_cname:l_i_cname, :l_def_hold:i_def_hold ;
         	IS_ANY_ORA_ERROR

				
				if (i_def_hold != -1)  
				    l_ca_cust_instr_struct_h.h_posn = l_def_hold;
            else
					 l_ca_cust_instr_struct_h.h_posn = 0.0;


         	if ( APL_ZERO_RESULT_SET )
         	{
            	break;
         	}
			
				strcpy(l_ca_cust_instr_struct_h.h_aentle_client, chr_l_h_aentitl_account);
            if (APL_FAILURE == CA_Mod_CustInst(&l_ca_cust_instr_struct_h, argv,l_repfile,l_logfile,&l_intl_env_data_h,l_debug_info_ptr)) //AIX -Warning Removal
            {
					sprintf(chr_l_buf,"Unsuccessful in CA_Mod_CustInst %s %s",chr_l_ca_id,chr_l_h_aentitl_account);
					CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
            	APL_GOBACK_FAIL
            }
				else
				{
					sprintf(chr_l_buf,"Successful in CA_Mod_CustInst %s %s",chr_l_ca_id,chr_l_h_aentitl_account);
					CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
				}	
			   if(APL_FAILURE == CA_CustInstMntRept(&l_ca_cust_instr_struct_h, &int_linecount,&int_page,argv,l_repfile,&l_intl_env_data_h,l_debug_info_ptr)) //AIX -Warning Removal
   	      {
					sprintf(chr_l_buf,"Unsuccessful in CA_CustInstMntRept %s %s",chr_l_ca_id,chr_l_h_aentitl_account);
					CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
         	   APL_GOBACK_FAIL
         	}
				else
				{
				 	sprintf(chr_l_buf,"Successful in CA_CustInstMntRept %s %s",chr_l_ca_id,chr_l_h_aentitl_account);
               CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
				}
	
      	}

			EXEC SQL CLOSE cust_instr;
	}
	else
			
			
	{
			printf("Into TO / SM / BB else condition\n");
			l_def_hold = 0.0;
                        i_def_hold = 0;

			if(to_new_safek_rt > 0)
				flt_conv_rate = to_new_safek_rt/100;
			else
			{
				if(to_new_stock_quantity > 0 && to_old_stock_quantity >0)
					flt_conv_rate = to_new_stock_quantity / to_old_stock_quantity;
			}

			printf("Before declare cursor cust_instr_to\n");
		  	
        EXEC SQL DECLARE cust_instr_to CURSOR FOR
                SELECT  e.client,
                                  a.cln_name, (sum(e.safekeep_pos) *(:flt_conv_rate)) as quantity_bal
                                                                  
                  FROM    DL_SAFEK e,
                          MT_CLIENT a
                  WHERE   e.instr_code= :chr_to_instrcode
                  AND     e.client=a.cln_code
                  AND     e.client NOT IN ( SELECT r.client
                                             FROM   CAREPLY r,DL_SAFEK e
                                             WHERE  r.corp_id = :chr_l_ca_id
                                             AND    r.RESPONSE_DT IS NOT NULL
                                             AND    r.client = e.client)
		  GROUP BY e.client,a.cln_name;

			printf("After cursor cust_instr_to\n");
			fflush(stdout);
         IS_ANY_ORA_ERROR
			printf("After isanyoraerror cursor cust_instr_to\nn");
			fflush(stdout);

                   EXEC SQL OPEN cust_instr_to;
			printf("After opencursor cust_instr_to\n");
			fflush(stdout);

         IS_ANY_ORA_ERROR
			printf("After isanyoraerror opencursor cust_instr_to\n");
			fflush(stdout);

        for(count=1;;count++)
                   {

                                EXEC SQL FETCH cust_instr_to INTO :chr_l_h_aentitl_account:l_i_aentitl_account , :chr_l_h_cname:l_i_cname, :l_def_hold:i_def_hold ;

                IS_ANY_ORA_ERROR

                                
                                if (i_def_hold != -1)
                                    l_ca_cust_instr_struct_h.h_posn = l_def_hold;
            else
                                         l_ca_cust_instr_struct_h.h_posn = 0.0;


                if ( APL_ZERO_RESULT_SET )
                {
                break;
                }

                                strcpy(l_ca_cust_instr_struct_h.h_aentle_client, chr_l_h_aentitl_account);
            if (APL_FAILURE == CA_Mod_CustInst(&l_ca_cust_instr_struct_h, argv,l_repfile,l_logfile,&l_intl_env_data_h,l_debug_info_ptr)) //AIX -Warning Removal
	    {
					sprintf(chr_l_buf,"Unsuccessful in CA_Mod_CustInst %s %s",chr_l_ca_id,chr_l_h_aentitl_account);
                                        CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
                APL_GOBACK_FAIL
            }
                                else
                                {
                                        sprintf(chr_l_buf,"Successful in CA_Mod_CustInst %s %s",chr_l_ca_id,chr_l_h_aentitl_account);
                                        CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
                                }
                           if(APL_FAILURE == CA_CustInstMntRept(&l_ca_cust_instr_struct_h, &int_linecount,&int_page,argv,l_repfile,&l_intl_env_data_h,l_debug_info_ptr)) //AIX -Warning Removal

              {
                                        sprintf(chr_l_buf,"Unsuccessful in CA_CustInstMntRept %s %s",chr_l_ca_id,chr_l_h_aentitl_account);

                                        CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
                   APL_GOBACK_FAIL
                }
                                else
                                {
                                        sprintf(chr_l_buf,"Successful in CA_CustInstMntRept %s %s",chr_l_ca_id,chr_l_h_aentitl_account
);
               CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
                                }

        }

                        EXEC SQL CLOSE cust_instr_to;
	}

			if(!sqlca.sqlerrd[2])
   		{
      		CO_ProcMonitor(l_logfile,"No Records Processed",NULL,NULL);
      		APL_GOBACK_SUCCESS
   		}

         else
			{	
				/* if(APL_FAILURE == Footer(l_repfile,l_debug_info_ptr)) OPT:AIX */
				if(APL_FAILURE == Footer(l_repfile,l_debug_info_ptr))
            	APL_GOBACK_FAIL
            else
				{
					sprintf(chr_l_buf,"Processed %d Number Of Records",count-1);
            	CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
					EXEC SQL UPDATE SYS_BATCHPROC
                        SET STAT_DET = :chr_l_buf
                        WHERE PROCESS_NAME =:argv[0]
                        AND PROC_INIT =:argv[1]
                        AND STARTDATE =:argv[2]
                        AND STATUS = 'started';


               APL_GOBACK_SUCCESS

				}
			}


   	}
		
		else if(strlen(temp[1])!= 0)
		{
			printf("temp[1] is |%s|\n",temp[1]);
			fflush(stdout);
			if (APL_FAILURE == CO_SplitStr( temp[1],
														';',
														&int_num,
														&chr_temp1))
			{
				CO_ProcMonitor(l_logfile,"Failure from CBStrSplitFn",NULL,NULL);														
				APL_GOBACK_FAIL
			}
			else
				CO_ProcMonitor(l_logfile,"Successful in CBStrSplitFn",NULL,NULL);

			printf("before for loop count < int_num |%d|\n",int_num);
			fflush(stdout);
			for(count=0;count<int_num;count++)
			{
					printf("seltype is |%s|\n",chr_l_sel_type);	
            if (strcmp(chr_l_sel_type,"S")==0)
				{
					l_def_hold = 0.0;
					i_def_hold = 0;
               if((strcmp(chr_to_op_event_type,"TO") != 0) || (strcmp(chr_l_ce_typ,"SM")!=0) || (strcmp(chr_l_ce_typ,"BB")!=0))
               {
                  EXEC SQL SELECT quantity_bal INTO :l_def_hold:i_def_hold
                        FROM CAENTITLEMENT
                        WHERE corp_id = :chr_l_ca_id AND client = :chr_temp1[count];
                  IS_ANY_ORA_ERROR

               }
               else
               {
					EXEC SQL SELECT (sum(safekeep_pos)*(:flt_conv_rate)) as quantity_bal INTO :l_def_hold:i_def_hold 
								FROM DL_SAFEK 
								WHERE instr_code = :chr_to_instrcode AND client = :chr_temp1[count];
               IS_ANY_ORA_ERROR
					}
					l_ca_cust_instr_struct_h.h_posn = 0.0;
					l_ca_cust_instr_struct_h.h_posn = l_def_hold;
				}
				else if ((strcmp(chr_l_sel_type,"O")==0) && (strcmp(l_intl_env_data_h.h_mode, APL_FUNC_DELETE) == 0) )
				{
					l_def_hold = 0.0;
					
					strcpy(l_ca_cust_instr_struct_h.h_srl_num , chr_l_sr_no);
				}
				printf("before camodcustinst\n");
				fflush(stdout);
				
				printf("before client |%s|\n",chr_temp1[count]);
				printf("count is |%d|\n",count);
				fflush(stdout);
				strcpy(l_ca_cust_instr_struct_h.h_aentle_client, chr_temp1[count]);
				printf("After client copy \n");
				if ( APL_FAILURE == CA_Mod_CustInst(&l_ca_cust_instr_struct_h, argv,l_repfile,l_logfile,&l_intl_env_data_h,l_debug_info_ptr)) //AIX -Warning Removal
				{
					sprintf(chr_l_buf,"Unsuccessful in CA_Mod_CustInst %s %s",chr_l_ca_id,chr_temp1[count]);
            	CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
         		APL_GOBACK_FAIL
				}
				else 
				{
					sprintf(chr_l_buf,"Successful in CA_Mod_CustInst %s %s",chr_l_ca_id,chr_temp1[count]);
            	CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
				}

				if(APL_FAILURE ==	CA_CustInstMntRept(&l_ca_cust_instr_struct_h,&int_linecount,&int_page,argv,l_repfile,&l_intl_env_data_h,l_debug_info_ptr)) //AIX -Warning Removal
				{
						sprintf(chr_l_buf,"Unsuccessful in CA_CustInstMntRept %s %s",chr_l_ca_id,chr_temp1[count]);
            		CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
						APL_GOBACK_FAIL
				}
				else
				{
					sprintf(chr_l_buf,"Successful in CA_CustInstMntRept %s %s",chr_l_ca_id,chr_temp1[count]);
           		CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
				}
				if(count == int_num-1)
				{
					/* if(APL_FAILURE == Footer(l_repfile,l_debug_info_ptr)) OPT:AIX */
					if(APL_FAILURE == Footer(l_repfile,l_debug_info_ptr))
						APL_GOBACK_FAIL
					else
					{
						sprintf(chr_l_buf,"Processed %d Number Of Records",int_num);
            		CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
						EXEC SQL UPDATE SYS_BATCHPROC
                        SET STAT_DET = :chr_l_buf
                        WHERE PROCESS_NAME =:argv[0]
                        AND PROC_INIT =:argv[1]
                        AND STARTDATE =:argv[2]
                        AND STATUS = 'started';

						APL_GOBACK_SUCCESS
					}
				}	
			}
		}
	}
	fclose(l_finifile);
	
	RETURN_SUCCESS:
	{
		EXEC SQL UPDATE SYS_BATCHPROC
                        SET STATUS='completed'
                        WHERE PROCESS_NAME =:argv[0]
                        AND PROC_INIT =:argv[1]
                        AND STARTDATE =:argv[2]
                        AND STATUS = 'started';

      EXEC SQL COMMIT WORK RELEASE;
 //AIX -Warning Removal
      CO_Proc_RptClose(l_logfile,l_debug_info_ptr);
		CO_Proc_RptClose(l_repfile,l_debug_info_ptr);
		exit(0);
	}		
	
	RETURN_FAILURE:
	{
 //AIX -Warning Removal
		EXEC SQL ROLLBACK WORK RELEASE;
		CO_Proc_RptClose(l_logfile,l_debug_info_ptr);
		CO_Proc_RptClose(l_repfile,l_debug_info_ptr);
		exit(-1);
	}
}	
