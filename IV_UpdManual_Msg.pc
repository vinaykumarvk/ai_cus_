/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
*/
/*********************************************************************
 *
 * Module Name         :      Master Maintenance
 *
 * File Name           :      IV_UpdManual_Msg.pc
 *
 * Description         :      This file contains db functions for updating
 *                            Master Details.
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author         Description       RFS No.
 * ---------   --------  ------------     -------------     ---------
 * 05/03/2007   1.0       Jiger        New file       RFS_MS_001
 *
 *********************************************************************/


#include "CO_HostStructdef.h"
#include "IV_InterFace.h"
#include "MS_Swift.h"

EXEC SQL INCLUDE SQLCA.H;

int IV_UpdManual_Msg(MANUAL_MESSAGE_STRUCT_H *p_manual_message_struct_h,MS_MANMSG_STRUCT_H *p_ms_manmsg_struct_h, char *event_id,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr) 
{
	printf(".................. In IV_UpdManual_Msg ......................\n");
	/* Variable Declarations */
	MANUAL_MESSAGE_STRUCT_I *l_manual_message_struct_i = (MANUAL_MESSAGE_STRUCT_I *)NULL;
        l_manual_message_struct_i = (MANUAL_MESSAGE_STRUCT_I *)calloc(1,sizeof(MANUAL_MESSAGE_STRUCT_I));
	struct sqlca sqlca;

	extern int IC_MS_Proc_ManMsgInit(MS_MANMSG_STRUCT_H *p_ms_manmsg_struct_h,
                                char chr_startflag,
                                long *int_msgsrno,
                                char *corp_id,
                                char *event_id,
                                DEBUG_INFO_STRUCT_H **l_debug_info_ptr,
                                INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h); 

	//char chr_startflag[2] = APL_NULL_STRING;
	char chr_startflag;
       	/*  int *int_msgsrno = 0; */
       	long int_msgsrno = 0;
       	long *ptr_msgsrno;
       	char *corp_id = APL_NULL_STRING;
       	char *chr_p_msgno_a = APL_NULL_STRING;
       	int int_p_msgsrno = 0;

	char chr_acc_stamp_compare[APL_DATE_LEN] = APL_NULL_STRING;
	char chr_status_compare[APL_STATUS_LEN] = APL_NULL_STRING;
	char chr_sys_access_stamp[APL_DATE_LEN] = APL_NULL_STRING;
	short p_i_maker, p_i_makerdt, p_i_checker, p_i_checkerdt, p_i_access_stamp;
	short p_i_access_stamp_compare;
	short p_i_status = 0;
	int int_error_flag = APL_SUCCESS;
	int int_l_rowexists = 0;
	char  *l_key_codes[3];
	char  *l_key_values[3];
	char  chr_l_table_name[50] = APL_NULL_STRING;
	char  chr_l_field_val[40] = APL_NULL_STRING;
	long l_temp_manmsq_seq = 0;
	short i_temp_manmsq_seq = -1;
	int l_add_count=0;
	int l_dl_count = 0;	/* JC - 23-05-2007 */

	int int_retval = APL_SUCCESS;
	#ifdef APL_THREADS
	APL_SET_CONTEXT
	EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	 APL_FUNCTION_ENTER(APL_OUT_FILE)

	APL_MALLOC_FAIL(l_manual_message_struct_i)

	p_i_maker =0;
	p_i_makerdt =0;
	p_i_checker =0;
	p_i_checkerdt =0;
	p_i_access_stamp =0;
	p_i_access_stamp_compare =0;

	if(!strlen(p_manual_message_struct_h ->h_cln_code))  l_manual_message_struct_i -> i_cln_code= -1;
        else
                l_manual_message_struct_i -> i_cln_code= 0;
        if(!strlen(p_manual_message_struct_h ->h_ca_flag))  l_manual_message_struct_i -> i_ca_flag= -1;
        else
                l_manual_message_struct_i -> i_ca_flag= 0;
        if(!strlen(p_manual_message_struct_h ->h_dl_flag))  l_manual_message_struct_i -> i_dl_flag= -1;
        else
                l_manual_message_struct_i -> i_dl_flag= 0;
        if(!strlen(p_manual_message_struct_h ->h_corp_id))  l_manual_message_struct_i -> i_corp_id= -1;
        else
                l_manual_message_struct_i -> i_corp_id= 0;
        if(!strlen(p_manual_message_struct_h ->h_dl_ref_no))  l_manual_message_struct_i -> i_dl_ref_no= -1;
        else
                l_manual_message_struct_i -> i_dl_ref_no= 0;
        if(!strlen(p_manual_message_struct_h ->h_message_txt))  l_manual_message_struct_i -> i_message_txt= -1;
        else
                l_manual_message_struct_i -> i_message_txt= 0;
        if(!strlen(p_manual_message_struct_h ->h_maker))  l_manual_message_struct_i -> i_maker= -1;
        else
                l_manual_message_struct_i -> i_maker= 0;
        if(!strlen(p_manual_message_struct_h ->h_maker_dt)) l_manual_message_struct_i -> i_maker_dt= -1;
        else
                l_manual_message_struct_i -> i_maker_dt= 0;
        if(!strlen(p_manual_message_struct_h ->h_checker))  l_manual_message_struct_i -> i_checker= -1;
        else
                l_manual_message_struct_i -> i_checker= 0;
        if(!strlen(p_manual_message_struct_h ->h_checker_dt)) l_manual_message_struct_i -> i_checker_dt= -1;
        else
                l_manual_message_struct_i -> i_checker_dt= 0;
        if(!strlen(p_manual_message_struct_h ->h_access_stamp)) l_manual_message_struct_i -> i_access_stamp= -1;
        else
                l_manual_message_struct_i -> i_access_stamp= 0;
	if(!strlen(p_manual_message_struct_h ->h_status))  l_manual_message_struct_i -> i_status= -1;
        else
                l_manual_message_struct_i -> i_status= 0;
        if(!strlen(p_manual_message_struct_h ->h_msg_seq_no))  l_manual_message_struct_i -> i_msg_seq_no= -1;
        else
                l_manual_message_struct_i -> i_msg_seq_no= 0;
        if(!strlen(p_manual_message_struct_h ->h_msg_indicator))  l_manual_message_struct_i -> i_msg_indicator=-1;
        else
                l_manual_message_struct_i -> i_msg_indicator= 0;
	if(!strlen(p_manual_message_struct_h ->h_manmsg_seqno)) l_manual_message_struct_i -> i_manmsg_seqno=-1;
	else
		l_manual_message_struct_i -> i_manmsg_seqno = 0;


	if(CO_RtvSysDtTime(chr_sys_access_stamp,l_debug_info_ptr) !=APL_SUCCESS)
	{
		APL_GOBACK_FAIL
	}
	printf("\t***** Access stamp retrieved -- |%s|\n", chr_sys_access_stamp); 
	
	if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_INPUT))
	{

		APL_IF_DEBUG
 		{
  			CO_ProcMonitor(APL_OUT_FILE, "Entered Input of Function IV_UpdManual_Msg\n",
							NULL,p_intl_envdatastruct_h);
 		}

		strcpy(p_manual_message_struct_h->h_status,STATUS_UAUTH);
    		l_manual_message_struct_i->i_status =0;
   		strcpy(p_manual_message_struct_h->h_maker,p_intl_envdatastruct_h->usr);
		l_manual_message_struct_i->i_maker=0;
  		strcpy(p_manual_message_struct_h->h_maker_dt,chr_sys_access_stamp);
		l_manual_message_struct_i->i_maker_dt=0;
		strcpy(p_manual_message_struct_h->h_access_stamp,chr_sys_access_stamp);
		l_manual_message_struct_i->i_access_stamp =0;

		/* If CA msg, set DLFlag as 'N' and if DL Msg, set CAFlag as 'N' */
		if(strlen(p_manual_message_struct_h ->h_ca_flag) == 0)
		{
			strcpy(p_manual_message_struct_h ->h_ca_flag, "N");
			l_manual_message_struct_i ->i_ca_flag = 0;
		}
		if(strlen(p_manual_message_struct_h ->h_dl_flag) == 0)
		{
			strcpy(p_manual_message_struct_h ->h_dl_flag, "N");
			l_manual_message_struct_i ->i_dl_flag = 0;
		}

		/* If Msg indicator is null, setting it as 'O' for OutGoing */
		if(strlen(p_manual_message_struct_h ->h_msg_indicator) == 0)
		{
			strcpy(p_manual_message_struct_h ->h_msg_indicator, "O");
			l_manual_message_struct_i ->i_msg_indicator = 0;
		}

		/* JC - 23-05-2007 -- Start -- Checking if the Deal Reference Number is for the said Client or no... If not, error message is sent */

		if(strcmp(p_manual_message_struct_h ->h_dl_ref_no,APL_NULL_STRING) != 0)
		{
			EXEC SQL
			SELECT COUNT(*) INTO :l_dl_count
			FROM	DL_DEAL
			WHERE	CLIENT = :p_manual_message_struct_h->h_cln_code
				AND IDENTIY_NO = :p_manual_message_struct_h ->h_dl_ref_no;
			IS_ANY_ORA_ERROR

			if(l_dl_count == 0)
			{
				printf("The Said Deal Ref No is not for the Client\n");
				if (CO_InsertErr
				(l_debug_info_ptr,
			 	ERR_DLREFNO_NFND, 
			 	APL_NULL_STRING,
			 	APL_NULL_STRING,
			 	APL_NULL_STRING,
			 	__LINE__,
			 	__FILE__
				) != APL_SUCCESS)
				APL_GOBACK_FAIL
				APL_GOBACK_FAIL
			}
		}
		/* JC - 23-05-2007 -- End */

		/* Added By Kalyan... The System should not allow user to input message for which address are not maintained*/
		printf("KS -- Going for Address Check....DL_FLAG [%s] CA_FLAG [%s]\n",p_manual_message_struct_h ->h_dl_flag,p_manual_message_struct_h ->h_ca_flag);

		EXEC SQL 
		SELECT 	COUNT(*) 
		INTO 	:l_add_count
		FROM 	MT_MSGADDRESS 
		WHERE 	CLN_CODE=:p_manual_message_struct_h->h_cln_code AND
			(
				(:p_manual_message_struct_h ->h_dl_flag='Y' AND MSG_IDENT_NO ='12') OR
				(:p_manual_message_struct_h ->h_dl_flag='N' AND :p_manual_message_struct_h ->h_ca_flag='N' AND MSG_IDENT_NO ='12') OR
				(:p_manual_message_struct_h ->h_ca_flag='Y' AND MSG_IDENT_NO IN ('3','31'))
			) 
			AND STATUS='AA'
			AND SWIFT_TLX_GCN = 'S'
			AND ISO_MSG_FORMAT = 'Y';
		IS_ANY_ORA_ERROR

		printf("JC:::::For Select frm MT_MSGADDRESS, ORA -- [%d]\n", sqlca.sqlcode);
		printf("JC:::::l_add_count --- [%d]\n", l_add_count);
		if(l_add_count == 0 )
		{
			printf("KS -- Address Not Maintained... Returning Failure....\n");
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_MSGADDR_NOTFND, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
		}
		// Kalyan Changes till here

		/* Select the next sequence number for MANMSG_SEQNO */
		EXEC SQL
		SELECT MANUAL_MSG_SEQNO.NEXTVAL into :l_temp_manmsq_seq:i_temp_manmsq_seq
		FROM DUAL;
		IS_ANY_ORA_ERROR

		if(l_temp_manmsq_seq != 0)
		{
			printf("l_temp_manmsq_seq -- |%ld|\n", l_temp_manmsq_seq); //AIX - Warnings Removal
			i_temp_manmsq_seq = 0;
			sprintf(p_manual_message_struct_h ->h_manmsg_seqno, "%ld", l_temp_manmsq_seq); //AIX - Warnings Removal
			l_manual_message_struct_i -> i_manmsg_seqno = 0;
			printf("\t***** ManMsg Seq No -- |%s|\n", p_manual_message_struct_h ->h_manmsg_seqno);
		}

		printf("\t***** Status -- |%s|\n", p_manual_message_struct_h->h_status);
		printf("\t***** Maker  -- |%s|\n", p_manual_message_struct_h->h_maker);
		printf("\t***** Maker Dt -- |%s|\n", p_manual_message_struct_h->h_maker_dt);
		printf("\t***** Access Stamp -- |%s|\n", p_manual_message_struct_h->h_access_stamp);

		EXEC SQL INSERT INTO MANUAL_MESSAGE VALUES (:p_manual_message_struct_h:l_manual_message_struct_i);

		IS_ANY_ORA_ERROR_AND_DUPLICATE(MAP_DET_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
	}
	else
	{
	/* Commented coz not required -- JC 
		l_key_codes[0]="CLN_CODE";
        	l_key_codes[1]="MANMSG_SEQNO";
        	l_key_codes[2]=APL_NULL_STRING;

        	l_key_values[0]=p_manual_message_struct_h -> h_cln_code;
        	l_key_values[1] = p_manual_message_struct_h ->h_manmsg_seqno;
        	l_key_values[2] = APL_NULL_STRING;

			
		strcpy(chr_l_table_name,"MANUAL_MESSAGE");

		printf(" ######### In IV_Upd...... l_key_codes -- |%s|\n", l_key_codes);
		printf(" ######### In IV_Upd...... l_key_values -- |%s|\n", l_key_values);
		printf(" ######### In IV_Upd...... Callin CR_Rtv_MastChldChrVal\n");

		int_retval = CR_Rtv_MastChldChrVal( l_key_codes,
						l_key_values,
						chr_l_table_name,
						"ACCESS_STAMP",
						chr_l_field_val,
						l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL

		strcpy(chr_acc_stamp_compare,chr_l_field_val);
	    
		int_retval = CR_Rtv_MastChldChrVal( l_key_codes,
						l_key_values,
						chr_l_table_name,
						"STATUS",
						chr_l_field_val,
						l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL

		strcpy(chr_status_compare,chr_l_field_val);
	Commented coz not required -- JC */

	/* Select the Access stamp of the particular record frm the table */
	EXEC SQL
	SELECT 	ACCESS_STAMP into :chr_acc_stamp_compare
	FROM 	MANUAL_MESSAGE
	WHERE	CLN_CODE = :p_manual_message_struct_h -> h_cln_code
		AND MANMSG_SEQNO = :p_manual_message_struct_h ->h_manmsg_seqno;
	IS_ANY_ORA_ERROR

	printf("accesssss stamppppp ------ |%s|\n", chr_acc_stamp_compare);
	}

	if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_MODIFY))
	{
		printf(" ######### Entered MOD mode of IV_UpdManual_Msg.pc\n");
  		p_i_checker =-1;
  		p_i_checkerdt =-1;
		strcpy(p_manual_message_struct_h->h_checker,APL_NULL_STRING);
		strcpy(p_manual_message_struct_h->h_checker_dt,APL_NULL_STRING);

		APL_IF_DEBUG
 		{
  			CO_ProcMonitor(APL_OUT_FILE, "Entered modify of Function IV_UpdManual_Msg.pc\n",
							NULL,p_intl_envdatastruct_h);
 		}

		printf("Access stamp frm param str -- |%s|\n", p_manual_message_struct_h->h_access_stamp);
		printf("chr_acc_stamp_compare  -- |%s|\n", chr_acc_stamp_compare);
	   	if (!strcmp(p_manual_message_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   	{
			strcpy(p_manual_message_struct_h->h_access_stamp,chr_sys_access_stamp);
			l_manual_message_struct_i->i_access_stamp = 0;
       			strcpy(p_manual_message_struct_h->h_status,STATUS_UAUTH);
			l_manual_message_struct_i->i_status = 0;

			EXEC SQL UPDATE MANUAL_MESSAGE  
			SET 
			MAKER =:p_intl_envdatastruct_h->usr:p_i_maker,
			MAKER_DT =:chr_sys_access_stamp:p_i_access_stamp,
			ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp,
			STATUS =:p_manual_message_struct_h->h_status:l_manual_message_struct_i->i_status,
			MESSAGE_TXT =:p_manual_message_struct_h->h_message_txt :l_manual_message_struct_i-> i_message_txt
			WHERE 
			CLN_CODE =:p_manual_message_struct_h->h_cln_code
			AND MANMSG_SEQNO = :p_manual_message_struct_h ->h_manmsg_seqno;

			IS_ANY_ORA_ERROR;	
	   	}
		else 
	   	{
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   	} 
	}

	if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_AUTHORISE))
	{
		printf("In AUTHORIZE...... update table..........\n");
		printf("JC:::Status of the record -- [%s]\n", p_manual_message_struct_h->h_status);
		printf("JC:::::Mode -- [%s]\n", p_intl_envdatastruct_h->h_mode);

		APL_IF_DEBUG
 		{
  			CO_ProcMonitor(APL_OUT_FILE, "Entered authorize of Function IV_UpdManual_Msg\n",
							NULL,p_intl_envdatastruct_h);
 		}

		if (!strcmp(p_manual_message_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   	{
			fflush(stdout);
			printf("Access stamp comparison is successful.................. \n");
			printf("JC:::::STATUS_DEL_UAUTH -- [%s]\n", STATUS_DEL_UAUTH);
   			if(strcmp(p_manual_message_struct_h->h_status,STATUS_DEL_UAUTH))
	    		{
	    			strcpy(p_manual_message_struct_h->h_access_stamp,chr_sys_access_stamp);
	    			l_manual_message_struct_i->i_access_stamp =0;
   	    			strcpy(p_manual_message_struct_h->h_checker,p_intl_envdatastruct_h->usr);
	    			l_manual_message_struct_i->i_checker=0;
  	    			strcpy(p_manual_message_struct_h->h_checker_dt,chr_sys_access_stamp);
	    			l_manual_message_struct_i->i_checker_dt=0;

				// JC - 22-05-2007 -- Start
				EXEC SQL
				SELECT 	STATUS INTO :p_manual_message_struct_h->h_status
				FROM	MANUAL_MESSAGE
				WHERE	
				CLN_CODE =:p_manual_message_struct_h->h_cln_code
				AND MANMSG_SEQNO = :p_manual_message_struct_h ->h_manmsg_seqno;
				IS_ANY_ORA_ERROR	
		
				printf("JC:::Status of the record -- [%s]\n", p_manual_message_struct_h->h_status);

			    if(strcmp(p_manual_message_struct_h->h_status, "UU") == 0)
			    {
				printf("Current status is UU...................\n");
          			strcpy(p_manual_message_struct_h->h_status,STATUS_AUTH);
	    			l_manual_message_struct_i->i_status =0;
				// JC - 22-05-2007 -- End

				/* To Generate the message -- .TBS and .DAT files -- Start */

				if(strlen(p_manual_message_struct_h ->h_corp_id) == 0)
				{
					printf("Corp ID is null so assigning event id as dl ref no\n");
					strcpy(event_id, p_manual_message_struct_h ->h_dl_ref_no);
				}

				printf("~~~~~~~~~~~ Event ID ------- |%s|\n", event_id);

				strcpy(p_ms_manmsg_struct_h->client, p_manual_message_struct_h->h_cln_code);
				p_ms_manmsg_struct_h->priority_ind = '1';
				strcpy(p_ms_manmsg_struct_h->maker, p_intl_envdatastruct_h->usr);
				strcpy(p_ms_manmsg_struct_h->maker_dt, chr_sys_access_stamp);
				//strcpy(corp_id, p_manual_message_struct_h ->h_corp_id);
				corp_id = p_manual_message_struct_h ->h_corp_id;
				//strcpy(chr_startflag, "Y");
				chr_startflag = 'Y';
				int_msgsrno = 112;
       		ptr_msgsrno = &int_msgsrno;

				printf("chr_startflag --------------------|%c|\n", chr_startflag);

				int_retval = IC_MS_Proc_ManMsgInit(p_ms_manmsg_struct_h,
                                         			chr_startflag,
                                         			ptr_msgsrno,
                                         			corp_id,
                                         			event_id,
                                         			l_debug_info_ptr,
                                         			p_intl_envdatastruct_h);

				if(int_retval != APL_SUCCESS)
				{
					APL_GOBACK_FAIL
				}

				/* To Generate the message -- .TBS and .DAT files -- End */

				/* Update the status as AA in table MANUAL_MESSAGE */

				EXEC SQL UPDATE MANUAL_MESSAGE SET 
				CHECKER =:p_intl_envdatastruct_h->usr:p_i_checker,
				CHECKER_DT =:chr_sys_access_stamp:p_i_access_stamp,
				ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp,
				STATUS =:p_manual_message_struct_h->h_status:l_manual_message_struct_i->i_status
				WHERE 
				CLN_CODE =:p_manual_message_struct_h->h_cln_code
				AND MANMSG_SEQNO = :p_manual_message_struct_h ->h_manmsg_seqno;

				IS_ANY_ORA_ERROR	
			    }
			    else if(strcmp(p_manual_message_struct_h->h_status, "DU") == 0)
			    {
				/* Delete the record from MANUAL_MESSAGE */
				printf("JC:::::Deleting the record from Manual_Message\n");
	    			EXEC SQL DELETE MANUAL_MESSAGE 
				WHERE 
				CLN_CODE =:p_manual_message_struct_h->h_cln_code
				AND MANMSG_SEQNO = :p_manual_message_struct_h ->h_manmsg_seqno;
         
		   		IS_ANY_ORA_ERROR
			    }
			}
   	   		else  
	    		{
				printf("JC::: In the else loop\n");
	    			EXEC SQL DELETE MANUAL_MESSAGE 
				WHERE 
				CLN_CODE =:p_manual_message_struct_h->h_cln_code
				AND MANMSG_SEQNO = :p_manual_message_struct_h ->h_manmsg_seqno;
         
		   		IS_ANY_ORA_ERROR
	    		}
	   	}
		else 
	   	{
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   	} 
	}

	if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_RESET))
	{

		APL_IF_DEBUG
 		{
  			CO_ProcMonitor(APL_OUT_FILE, "Entered reset of Function IV_UpdManual_Msg\n",
							NULL,p_intl_envdatastruct_h);
 		}

		if (!strcmp(p_manual_message_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   	{
   			if(!strcmp(p_manual_message_struct_h->h_status,STATUS_DEL_UAUTH))
	    		{
				strcpy(p_manual_message_struct_h->h_access_stamp,chr_sys_access_stamp);
				l_manual_message_struct_i->i_access_stamp =0;
				strcpy(p_manual_message_struct_h->h_checker,p_intl_envdatastruct_h->usr);
				l_manual_message_struct_i->i_checker=0;
				strcpy(p_manual_message_struct_h->h_checker_dt,chr_sys_access_stamp);
				l_manual_message_struct_i->i_checker_dt=0;
				strcpy(p_manual_message_struct_h->h_status,STATUS_AUTH);
				l_manual_message_struct_i->i_status =0;

				EXEC SQL UPDATE MANUAL_MESSAGE SET 
				CHECKER =:p_intl_envdatastruct_h->usr:p_i_checker,
				CHECKER_DT =:chr_sys_access_stamp:p_i_access_stamp,
				ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp,
				STATUS =:p_manual_message_struct_h->h_status:l_manual_message_struct_i->i_status
				WHERE 
				CLN_CODE =:p_manual_message_struct_h->h_cln_code
				AND MANMSG_SEQNO = :p_manual_message_struct_h ->h_manmsg_seqno;

				IS_ANY_ORA_ERROR;
			}
		}
		else 
		{
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
		} 
	}

	if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_DELETE))
	{
		p_i_checker =-1;
		p_i_checkerdt =-1;
		strcpy(p_manual_message_struct_h->h_checker,APL_NULL_STRING);
		strcpy(p_manual_message_struct_h->h_checker_dt,APL_NULL_STRING);

		APL_IF_DEBUG
 		{
  			CO_ProcMonitor(APL_OUT_FILE, "Entered delete of Function IV_UpdManual_Msg\n",
							NULL,p_intl_envdatastruct_h);
 		}

		printf("Access stamp frm param str -- |%s|\n", p_manual_message_struct_h->h_access_stamp);
		printf("Access stamp frm table	   -- |%s|\n", chr_acc_stamp_compare);

		if (!strcmp(p_manual_message_struct_h->h_access_stamp,chr_acc_stamp_compare))
		{
			strcpy(p_manual_message_struct_h->h_access_stamp,chr_sys_access_stamp);
			l_manual_message_struct_i->i_access_stamp =0;
			strcpy(p_manual_message_struct_h->h_status,STATUS_DEL_UAUTH);
			l_manual_message_struct_i->i_status =0;

			EXEC SQL UPDATE MANUAL_MESSAGE SET 
			MAKER =:p_intl_envdatastruct_h->usr:p_i_maker,
			MAKER_DT =:chr_sys_access_stamp:p_i_makerdt,
			CHECKER =:p_manual_message_struct_h->h_checker:p_i_checker,
			CHECKER_DT =:p_manual_message_struct_h->h_checker:p_i_checkerdt,
			STATUS =:p_manual_message_struct_h->h_status:l_manual_message_struct_i->i_status,
			ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp
			WHERE 
			CLN_CODE =:p_manual_message_struct_h->h_cln_code
			AND MANMSG_SEQNO = :p_manual_message_struct_h ->h_manmsg_seqno;
	 
		      	IS_ANY_ORA_ERROR;

		}
		else 
		{
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
		} 
	}


	if (int_error_flag == APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}
	APL_GOBACK_SUCCESS

 RETURN_SUCCESS :
	{
		EXEC SQL COMMIT;
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
		free(l_manual_message_struct_i);
		return(APL_SUCCESS);
	}
 RETURN_FAILURE :
	{
		EXEC SQL COMMIT;
 		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
		free(l_manual_message_struct_i);
		return(APL_FAILURE);
	}

}

