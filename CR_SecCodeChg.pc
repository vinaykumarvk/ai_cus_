/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to 
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or 
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         :	
 *
 * File Name           :
 *
 * Description         :	
 *
 *           
 *
 *            Version Control Block
 *
 * Date        Version		Author               Description
 * ---------   --------	 ---------------  ---------------------------
 *					
 *
 *********************************************************************/












#include "CR_Header_C.h"

EXEC SQL INCLUDE SQLCA.H;



int CR_Rtv_SecChngDet(char *p_oldsecode,
							char *chr_p_time_stamp,
							char *p_chgmaker,
							char *p_listedflg,
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr) 
{

  struct sqlca sqlca;

	char chr_l_time_stamp[APL_DATE_LEN];
	char chr_l_chgmaker[APL_USERID_LEN];
	char chr_l_listedflg[APL_FLAG_LENGTH];

  short p_i_access_stamp =0;
  short p_i_listedflg =0;
  short p_i_chgmaker  =0;

#ifdef APL_THREADS
    APL_SET_CONTEXT
    EXEC SQL CONTEXT USE :my_ctx_local;
#endif


APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Function CR_Rtv_SecChngDet\n",
		NULL,NULL);
 }

	memset(chr_l_time_stamp, APL_NULL_CHAR, APL_DATE_LEN);
	memset(chr_l_chgmaker, APL_NULL_CHAR, APL_USERID_LEN);
	memset(chr_l_listedflg, APL_NULL_CHAR, APL_FLAG_LENGTH);

  EXEC SQL SELECT TIMESTAMP, LISTED_IND, CHG_MKR
				INTO  :chr_l_time_stamp:p_i_access_stamp,
						:chr_l_listedflg:p_i_listedflg,
						:chr_l_chgmaker:p_i_chgmaker
				FROM MT_INSTRUMENT WHERE 
						SECURITY_CD =:p_oldsecode
				FOR UPDATE OF CHNG_CD ;
	
	IS_ANY_ORA_ERROR

  if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
	{
	APL_GOBACK_FAIL
	}

	strcpy(chr_p_time_stamp, chr_l_time_stamp);
	strcpy(p_chgmaker, chr_l_chgmaker);
	strcpy(p_listedflg, chr_l_listedflg);

  APL_GOBACK_SUCCESS

  RETURN_SUCCESS :
	{
APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Leaving Function CR_Rtv_SecChngDet Successfully\n",
		NULL,NULL);
 }
	return(APL_SUCCESS);
	}
  RETURN_FAILURE :
	{
APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Leaving Function CR_Rtv_SecChngDet Unsuccessfully\n",
		NULL,NULL);
 }

	return(APL_FAILURE);
	}

}

int CR_Proc_SecChngMkrChr(char *p_securitycd,char *p_user,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
  struct sqlca sqlca;
  char creater[APL_USERID_LEN]; 
  short p_i_maker;

#ifdef APL_THREADS
    APL_SET_CONTEXT
    EXEC SQL CONTEXT USE :my_ctx_local;
#endif

  EXEC SQL VAR creater IS STRING(15); 

  p_i_maker =0;

  
  
  if (!strlen(p_securitycd))
	{
	APL_DATA_MISSING("Secode",APL_NULL_STRING,APL_NULL_STRING);
	} 

  if (!strlen(p_user))
	{
	APL_DATA_MISSING("User",APL_NULL_STRING,APL_NULL_STRING);
	}
 
  if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
	{
	APL_GOBACK_FAIL
	}

  EXEC SQL SELECT CHG_MKR 
		INTO :creater:p_i_maker
		FROM MT_INSTRUMENT
	       	     	WHERE SECURITY_CD =:p_securitycd;

	IS_ANY_ORA_ERROR	

  if (!strcmp(p_user,creater)) 
	{
	 if (CO_InsertErr
			(l_debug_info_ptr,
			ERR_MAKER_CHECKER_SAME, 
			APL_NULL_STRING,
			APL_NULL_STRING,
			APL_NULL_STRING,
			__LINE__,
			__FILE__
			) != APL_SUCCESS)
	APL_GOBACK_FAIL
	}

  if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
	{
	APL_GOBACK_FAIL
	}

  APL_GOBACK_SUCCESS

  RETURN_SUCCESS :
	{
	return(APL_SUCCESS);
	}
  RETURN_FAILURE :
	{
	return(APL_FAILURE);
	}
 
}
int CR_Mod_SecChngDet (DL_INSTRUMENTCHG_STRUCT2_H *l_dl_instrumentchg_struct2_ha,
						INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

  struct sqlca sqlca;

  char chr_p_now[APL_DATE_LEN];

  short p_i_newcode		 =0;
  short p_i_newsecode	 =0;
  short p_i_newoldcode	 =0;
  short p_i_refno			 =0;
  short p_i_qty			 =0;
  short p_i_newisincode  =0;
  short p_i_listedflg	 =0;
  short p_i_userid		 =0;
  short p_i_access_stamp =0;
  short p_i_account		 =0;
  short p_i_failcode		 =0;
  short p_i_trdfromord	 =0;

  int int_p_count 		=0;
  int int_p_reccount 	=0; 

#ifdef APL_THREADS
    APL_SET_CONTEXT
    EXEC SQL CONTEXT USE :my_ctx_local;
#endif

  

APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Input Function CR_Mod_SecChngDet\n",
		NULL,p_intl_envdatastruct_h);
 }

  if (APL_FAILURE == CO_RtvSysDtTime(chr_p_now, l_debug_info_ptr))
	  	{
		APL_GOBACK_FAIL
		}

  if((!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_INPUT))
		|| (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_MODIFY))) 
	 	{
		
		EXEC SQL UPDATE MT_INSTRUMENT SET 
					CHNG_CD 	 	 = :l_dl_instrumentchg_struct2_ha->h_newsecuritycd:p_i_newsecode,
					CHNG_ISIN		 = :l_dl_instrumentchg_struct2_ha->h_newsec_isincode:p_i_newisincode,			
					CHNG_LST_IND = :l_dl_instrumentchg_struct2_ha->h_listed_ind:p_i_listedflg,
					CHG_MKR 	 = :p_intl_envdatastruct_h->usr:p_i_userid,
					TIMESTAMP = :chr_p_now:p_i_access_stamp
			WHERE SECURITY_CD =:l_dl_instrumentchg_struct2_ha->h_oldsecuritycd;

	   IS_ANY_ORA_ERROR

  		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			{
			APL_GOBACK_FAIL
			}

  		APL_GOBACK_SUCCESS
		}

  

  if(!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_RESET)) 
	 	{
		
		EXEC SQL UPDATE MT_INSTRUMENT SET 
					CHNG_CD 	 	 = NULL,
					CHNG_ISIN		 = NULL,
					CHNG_LST_IND = NULL,
					CHG_MKR 	 = NULL,
					TIMESTAMP = :chr_p_now:p_i_access_stamp
			WHERE SECURITY_CD =:l_dl_instrumentchg_struct2_ha->h_oldsecuritycd;

	   IS_ANY_ORA_ERROR

  		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			{
			APL_GOBACK_FAIL
			}

  		APL_GOBACK_SUCCESS
		}

  

  if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
	{
	APL_GOBACK_FAIL
	}

  APL_GOBACK_SUCCESS

  RETURN_SUCCESS :
	{
APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Leaving Function CR_Mod_SecChngDet Successfully\n",
		NULL,p_intl_envdatastruct_h);
 }

	return(APL_SUCCESS);
	}
  RETURN_FAILURE :
	{
APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Leaving Function CR_Mod_SecChngDet Unsuccessfully\n",
		NULL,p_intl_envdatastruct_h);
 }

	return(APL_FAILURE);
	}

}

