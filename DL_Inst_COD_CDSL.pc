/*
 **    COPYRIGHT NOTICE
 **
 **   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 **
 **   These materials are confidential and proprietary to
 **    Polaris Software Lab Limited and no part of these materials should
 **    be reproduced, published, transmitted or distributed in any form or
 **    by any means, electronic, mechanical, photocopying, recording or
 **    otherwise, or stored in any information storage or retrieval system
 **    of any nature nor should the materials be disclosed to third parties
 **    or used in any other manner for which this is not authorized, without
 **    the prior express written authorization of Polaris Software Lab Limited.
 **/
/*********************************************************************
 **
 ** Module Name         :      DEAL PROCESSING
 **
 ** File Name           :      DL_Inst_COD.pc
 **
 ** Description         :      
 **
 **
 **
 **            Version Control Block
 **
 ** Date        Version     Author           Description           RFS No.
 ** ---------   --------  ---------------  ----------------------  ---------
 ** 26/04/2006   1.0       Amit Bhosale             New File       HDFCDL_014
 ** -------------------------------------------------------------------------
 ** 09-Jun-2010 1.0.1.1    Naren V        NSDL DP Ins File Format  ISKB_3298
 **                                       Changes - Variable  Len
 **                                       changes were incorporat
 **                                       ed accordingly based on
 **                                       NSDL depository revised
 **                                       file formats.
 ****************************************************************************/

#include<stdio_64.h>
#include "Intellect_Common.h"
#include "Intellect_Interface.h"
#include "DL_Interface.h"
#include "BT_Common.h"
#include "Intellect_Error.h"
#include "CO_IndStructdef.h"
#include "CO_Commdef.h"

EXEC SQL INCLUDE SQLCA.H;

int DL_Inst_COD_CDSL(DL_INST_COD_STRUCT_H *p_dl_inst_cod_struct_h,char **argv,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	/* Variable Declarations */
	DL_INST_COD_STRUCT_I *p_dl_inst_cod_struct_i;
	DL_DEAL_SSTDET_STRUCT_H *l_deal_sstdet_struct_h;
	
	FILE *g_flogfile= NULL;
	char  chr_g_log_buffer[BUFFER_LEN] = APL_NULL_STRING;

	struct sqlca sqlca;

	char chr_l_deal_refno_str[4001]= APL_NULL_STRING;
	char chr_l_endchar[2] = APL_NULL_STRING;

	char chr_l_identiy_no_new[17]= APL_NULL_STRING;
	char chr_l_client_new[11]= APL_NULL_STRING;
	
	char   chr_l_client[11]= APL_NULL_STRING;
	char   chr_l_identiy_no[17]= APL_NULL_STRING;
	char   chr_l_instrdt[21]= APL_NULL_STRING;
	char   chr_l_mnystldt[21]= APL_NULL_STRING;
	double int_l_cost = 0.0;
	double int_l_brokercomm = 0.0;
	double int_l_pend_regqty = 0.0;
	double int_l_mrk_failqty = 0.0;
	double int_l_rec_int000 = 0.0;
	double int_l_compltqty = 0.0;
	double int_l_delta000 = 0.0;
	double int_l_delta001 = 0.0;
	double int_l_delta003 = 0.0;
	char chr_l_access_stamp[21]= APL_NULL_STRING;
	char pro_sys_date[21]= APL_NULL_STRING;
	
	short i_instrdt=0;
	short i_mnystldt=0;
	short i_cost=0;
	short i_brokercomm=0;
	short i_pend_regqty=0;
	short i_mrk_failqty=0;
	short i_rec_int000=0;
	short i_compltqty=0;
	short i_delta000=0;
	short i_delta001=0;
	short i_delta003=0;
		
	short l_chk_blk = 0; /* ISKB-315 -Rahul */	
	
	char **temp = NULL;
	int int_num=0;
	int i=0;
	

	
	/* printf("\n ***** Current DPM_TRANSACTION_NO=|%d| ****\n",p_dl_inst_cod_struct_h->h_dpm_transaction_no);
	** Modified For ISKB_3298 Changes - Jun2010 - Naren V */

	printf("\n ***** Current DPM_TRANSACTION_NO=|%ld| ****\n",p_dl_inst_cod_struct_h->h_dpm_transaction_no);
	
	
	p_dl_inst_cod_struct_i=(DL_INST_COD_STRUCT_I*)calloc(1,sizeof(DL_INST_COD_STRUCT_I));
	APL_MALLOC_FAIL(p_dl_inst_cod_struct_i)
	
	l_deal_sstdet_struct_h = (DL_DEAL_SSTDET_STRUCT_H *)calloc(1,sizeof(DL_DEAL_SSTDET_STRUCT_H));

	memset(l_deal_sstdet_struct_h, NULL, sizeof(DL_DEAL_SSTDET_STRUCT_H));
/*

	memset(l_deal_sstdet_struct_h->h_dl_client,APL_NULL_CHAR,APL_CLIENT_LENGTH);
	memset(l_deal_sstdet_struct_h->h_indentity_no,APL_NULL_CHAR,APL_TXNREFNO_LEN);
	memset(l_deal_sstdet_struct_h->h_ispart_,APL_NULL_CHAR,APL_FLAG_LENGTH);
	memset(l_deal_sstdet_struct_h->h_newindentity_no,APL_NULL_CHAR,APL_TXNREFNO_LEN);
	memset(l_deal_sstdet_struct_h->h_instrdate,APL_NULL_CHAR,APL_DATE_LEN);
	memset(l_deal_sstdet_struct_h->h_moneydate,APL_NULL_CHAR,APL_DATE_LEN);
	memset(l_deal_sstdet_struct_h->h_sel_forreg,APL_NULL_CHAR,APL_FLAG_LENGTH);
	memset(l_deal_sstdet_struct_h->h_access_stamp,APL_NULL_CHAR,APL_DATE_LEN);
*/

	
	EXEC SQL VAR l_deal_sstdet_struct_h->h_dl_client IS STRING;
	EXEC SQL VAR l_deal_sstdet_struct_h->h_indentity_no IS STRING;
	
		
	EXEC SQL VAR chr_l_client IS STRING;
	EXEC SQL VAR chr_l_identiy_no IS STRING;
	EXEC SQL VAR chr_l_client_new IS STRING;
	EXEC SQL VAR chr_l_identiy_no_new IS STRING;
	EXEC SQL VAR chr_l_instrdt IS STRING;
	EXEC SQL VAR chr_l_mnystldt IS STRING;
	EXEC SQL VAR chr_l_access_stamp IS STRING;

		printf("\n********************** INSIDE DL_Inst_COD_CDSL() FUNCTION ****************\n");


	/* printf("\n ***** Current DPM_TRANSACTION_NO=|%d| ****\n",p_dl_inst_cod_struct_h->h_dpm_transaction_no);
	** Modified For ISKB_3298 Changes - Jun2010 - Naren V */
	printf("\n ***** Current DPM_TRANSACTION_NO=|%ld| ****\n",p_dl_inst_cod_struct_h->h_dpm_transaction_no);

	if (  CO_RtvSysDt(pro_sys_date,l_debug_info_ptr) == APL_FAILURE )
			{
				APL_GOBACK_FAIL
	        }


	printf("\n pro_sys_date=|%s| \n",pro_sys_date);


/*	EXEC SQL INSERT INTO DL_COD_DTLS
		(RECORD_TYPE,LINE_NO,DPM_TRANSACTION_NO,
		 CLIENT_CD,ISIN,QTY,MKT_TYPE,SETTLEMENT_NO,EXEC_DT,
		 OTHER_DPID,OTHER_CLIENT,BENF_ACC_CTGRY,OTHER_CMBP_ID,INTERNAL_REF_NO)
		 VALUES(:p_dl_inst_cod_struct_h->h_record_type:p_dl_inst_cod_struct_i,
				  :p_dl_inst_cod_struct_h->	);

	if(sqlca.sqlcode)
	{
		printf("\n Failed Inserting Change Order Details In DL_COD_DTLS ,SQLCODE is |%d|\n ",sqlca.sqlcode);
	}
	IS_ANY_ORA_ERROR

*/	
	/* printf("\n ***** Current DPM_TRANSACTION_NO=|%d| ****\n",p_dl_inst_cod_struct_h->h_dpm_transaction_no);
	** Modified For ISKB_3298 Changes - Jun2010 - Naren V */
	printf("\n ***** Current DPM_TRANSACTION_NO=|%ld| ****\n",p_dl_inst_cod_struct_h->h_dpm_transaction_no);
	
	if(p_dl_inst_cod_struct_h->h_ord_stat_to== 1)
	{	
		EXEC SQL SELECT deal_ref_nos,client INTO :chr_l_deal_refno_str,:chr_l_client
  					FROM dl_dpinstrs
					WHERE dpm_trans_no=:p_dl_inst_cod_struct_h->h_dpm_transaction_no
					AND status='P';

	
		if(sqlca.sqlcode)
		{
			printf("\n Failed Selecting Values from DL_DPINSTRS  |%d|\n ",sqlca.sqlcode);
		}
		IS_ANY_ORA_ERROR
	}
	else
		APL_GOBACK_SUCCESS
			
	printf("\n chr_l_deal_refno_str=|%s| DEPO_MAP_CLIENT_ID:chr_l_client=|%s|\n",chr_l_deal_refno_str,chr_l_client);			
				
		if (APL_FAILURE == CO_SplitStr( chr_l_deal_refno_str,
					',',
					&int_num,
					&temp ))	
		{
				fprintf(APL_OUT_FILE,"Returns Unsuccessfully from CO_SplitStr\n");
				APL_GOBACK_FAIL			
		}

		EXEC SQL SELECT cln_code INTO :chr_l_client_new FROM MT_CLI_DEPO_MAP
							WHERE CLN_DEPO_MAP_CLIENT_ID=:chr_l_client;
		
		if(sqlca.sqlcode)
		{
		printf("\n Failed Fetching Client Code from MT_CLI_DEPO_MAP|%d|\n ",sqlca.sqlcode);
		}
		IS_ANY_ORA_ERROR

		printf("\n Retrieved Client Code To be Used for Fetching Deal Data:chr_l_client_new=|%s| \n",chr_l_client_new);


		for(i=0;i<int_num;i++)
		{
		
			printf("\n Temp[%d]=|%s| \n",i,temp[i]);
	
			strcpy(chr_l_identiy_no,temp[i]);
	
			printf("\n chr_l_identiy_no=|%s|\n",chr_l_identiy_no);
				
			EXEC SQL SELECT INSTRUMENT_DT,MONEY_SETL_DT,
								 COST,BROKERCOMM,PEND_REG_QTY,MRK_DL_FAILQTY,
								 REC_INT_000,DL_COMPLETEQTY,DELTA_000,DELTA_001,DELTA_003,
								 ACCESS_STAMP
								 INTO 	:chr_l_instrdt:i_instrdt,
								 		:chr_l_mnystldt:i_mnystldt,
										:int_l_cost:i_cost,
										:int_l_brokercomm:i_brokercomm,
										:int_l_pend_regqty:i_pend_regqty,
										:int_l_mrk_failqty:i_mrk_failqty,
								  		:int_l_rec_int000:i_rec_int000,
										:int_l_compltqty:i_compltqty,
										:int_l_delta000:i_delta000,
										:int_l_delta001:i_delta001,
										:int_l_delta003:i_delta003,
										:chr_l_access_stamp			
						FROM DL_DEAL
		  				WHERE IDENTIY_NO=:chr_l_identiy_no
						AND CLIENT=:chr_l_client_new;
			if(sqlca.sqlcode)
			{
				printf("\n Error Fetching Data from Deal for  Single Settlement|%d| \n",sqlca.sqlcode);	
			}
			if(sqlca.sqlcode == 1403)
				break;
			IS_ANY_ORA_ERROR


                        /* ISKB-315  Changes related to blocked deal - Rahul - 15May2007 */

                        EXEC SQL SELECT count(*) into :l_chk_blk FROM DL_DEAL
                        WHERE IDENTIY_NO= :chr_l_identiy_no AND CLIENT = :chr_l_client_new
                        AND (DEAL_CD IN ('2','4') AND CLH_FLG = 'D' AND DEAL_STAT = 'BK');
                        IS_ANY_ORA_ERROR

                        if(l_chk_blk == 1)
                                continue;
                        /* ISKB-315  Changes related to blocked deal - Rahul - 15May2007 */
			


/*			printf("\n Instr_dt=|%s|Mny_Dt=|%s|Cost=|%f|Brkcomm=|%f|PendQty=|%f|MarkQty=|%f|Rec_int=|%f|ComplQty=|%f|Delta0=|%f|Delta1=|%f|Delta2=|%f|AccessStamp=|%s|\n",
								chr_l_instrdt,
								chr_l_mnystldt,
								int_l_cost,
								int_l_brokercomm,
								int_l_pend_regqty,
								int_l_mrk_failqty,
								int_l_rec_int000,
								int_l_compltqty,
								int_l_delta000,
								int_l_delta001,
								int_l_delta003,
								chr_l_access_stamp);
			
		
*/			
	
			strcpy(l_deal_sstdet_struct_h->h_indentity_no,chr_l_identiy_no);
			strcpy(l_deal_sstdet_struct_h->h_dl_client,chr_l_client_new);
			

/*			printf("\n chr_l_instrdt=|%s| \n",chr_l_instrdt);
			printf("\n i_instrdt=|%d| \n",i_instrdt);

			printf("\n chr_l_instrdt=|%s| \n",chr_l_mnystldt);
			printf("\n i_mnystldt=|%d| \n",i_mnystldt);

*/			
			strcpy(l_deal_sstdet_struct_h->h_instrdate,chr_l_instrdt);

			if(i_instrdt!=-1)
			{
					strcpy(l_deal_sstdet_struct_h->h_instrdate,chr_l_instrdt);
			}
			else
			{
				strcpy(l_deal_sstdet_struct_h->h_instrdate,APL_NULL_STRING);
			}
			if(i_mnystldt!=-1)
			{
					strcpy(l_deal_sstdet_struct_h->h_moneydate,chr_l_mnystldt);
			}
			else
			{
				strcpy(l_deal_sstdet_struct_h->h_moneydate,APL_NULL_STRING);
			}
			if(i_cost!=-1)
			{
					l_deal_sstdet_struct_h->h_pr = int_l_cost;
			}
			else
			{
				l_deal_sstdet_struct_h->h_pr  = 0.0;
			}
			if(i_brokercomm!=-1)
			{
					l_deal_sstdet_struct_h->h_brokercomm = int_l_brokercomm;
			}
			else
			{
				l_deal_sstdet_struct_h->h_rec_int_000 = 0.0;
			}
			if(i_pend_regqty!=-1)
			{
					l_deal_sstdet_struct_h->h_pendregquantity = int_l_pend_regqty;
			}
			else
			{
				l_deal_sstdet_struct_h->h_pendregquantity= 0.0;
			}
			if(i_mrk_failqty!=-1)
			{
					l_deal_sstdet_struct_h->h_marktrfquantity = int_l_mrk_failqty;
			}
			else
			{
				l_deal_sstdet_struct_h->h_marktrfquantity = 0.0;
			}
			if(i_rec_int000!=-1)
			{	
				l_deal_sstdet_struct_h->h_rec_int_000 = int_l_rec_int000;
			}
			else
			{
				l_deal_sstdet_struct_h->h_rec_int_000 = 0.0;
			}
			if(i_compltqty!=-1)
			{
					l_deal_sstdet_struct_h->h_mcomplquantity = int_l_compltqty;
			}
			else
			{
				l_deal_sstdet_struct_h->h_mcomplquantity = 0.0;
			}
			if(i_delta000!=-1)
			{
					l_deal_sstdet_struct_h->h_delta_000 = int_l_delta000;
			}
			else
			{
				l_deal_sstdet_struct_h->h_delta_000 = 0.0;
			}
			if(i_delta001!=-1)
			{
					l_deal_sstdet_struct_h->h_delta_001 = int_l_delta001;
			}
			else
			{
				l_deal_sstdet_struct_h->h_delta_001 = 0.0;
			}
			if(i_delta003!=-1)
			{
					l_deal_sstdet_struct_h->h_delta_002 = int_l_delta003;
			}
			else
			{
				l_deal_sstdet_struct_h->h_delta_002 = 0.0;
			}
			
			strcpy(l_deal_sstdet_struct_h->h_access_stamp,chr_l_access_stamp);
			strcpy(l_deal_sstdet_struct_h->h_ispart_, "N");
			l_deal_sstdet_struct_h->h_newquantity = 0.0;
			l_deal_sstdet_struct_h->h_newamount = 0.0;
			strcpy(l_deal_sstdet_struct_h->h_newindentity_no, APL_NULL_STRING);
		

			
		    
				
			strcpy(l_deal_sstdet_struct_h->h_access_stamp,chr_l_access_stamp);	

			strcpy(l_deal_sstdet_struct_h->h_instrdate,pro_sys_date);
			strcpy(l_deal_sstdet_struct_h->h_moneydate,pro_sys_date);


/*			strcpy(l_deal_sstdet_struct_h->h_ispart_, "N");
			l_deal_sstdet_struct_h->h_newquantity = 0.0;
			l_deal_sstdet_struct_h->h_newamount = 0.0;
			strcpy(l_deal_sstdet_struct_h->h_newindentity_no, APL_NULL_STRING);
			strcpy(l_deal_sstdet_struct_h->h_instrdate, chr_l_actual_setl_dt);
			strcpy(l_deal_sstdet_struct_h->h_moneydate, chr_l_actual_setl_dt);
			l_deal_sstdet_struct_h->h_pr = l_h_cost;
			l_deal_sstdet_struct_h->h_brokercomm = l_h_brokercomm;
				
			strcpy(l_deal_sstdet_struct_h->h_sel_forreg, APL_NULL_STRING);

			l_deal_sstdet_struct_h->h_pendregquantity = 0.0;
	  		l_deal_sstdet_struct_h->h_marktrfquantity = 0.0;
			l_deal_sstdet_struct_h->h_rec_int_000  = 0.0;
	 		l_deal_sstdet_struct_h->h_mcomplquantity  = 0.0;
			l_deal_sstdet_struct_h->h_delta_000 =0.0;
			l_deal_sstdet_struct_h->h_delta_001 =0.0;
			l_deal_sstdet_struct_h->h_delta_002 =0.0;
			strcpy(l_deal_sstdet_struct_h->h_access_stamp, chr_l_h_access_stamp);

*/					
		printf("\n Instr_dt=|%s|Mny_Dt=|%s|Cost=|%f|Brkcomm=|%f|PendQty=|%f|MarkQty=|%f|Rec_int=|%f|ComplQty=|%f|Delta0=|%f|Delta1=|%f|Delta2=|%f|AccessStamp=|%s|\n",	
									l_deal_sstdet_struct_h->h_instrdate,
									l_deal_sstdet_struct_h->h_moneydate,
									l_deal_sstdet_struct_h->h_pr,	
									l_deal_sstdet_struct_h->h_brokercomm,	
									l_deal_sstdet_struct_h->h_pendregquantity,
									l_deal_sstdet_struct_h->h_marktrfquantity,
									l_deal_sstdet_struct_h->h_rec_int_000,
									l_deal_sstdet_struct_h->h_mcomplquantity,
									l_deal_sstdet_struct_h->h_delta_000,
									l_deal_sstdet_struct_h->h_delta_001,
									l_deal_sstdet_struct_h->h_delta_002,
									l_deal_sstdet_struct_h->h_access_stamp);
									
				

			if(APL_FAILURE == DL_Proc_DLSetlSing(  l_deal_sstdet_struct_h,
						                              APL_NULL_STRING,
														p_intl_envdatastruct_h,
														l_debug_info_ptr ))
			{
			  CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_DLSetlSing() with Failure\n",l_debug_info_ptr,p_intl_envdatastruct_h);
			}													
			
/*			CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_DLSetlSing() with Failure\n",NULL,NULL);
			CO_ProcMonitor(APL_OUT_FILE,APL_NULL_STRING,l_debug_info_ptr,NULL);

			CO_FreeErrLst(l_debug_info_ptr);
*/			
			IS_ANY_ORA_ERROR
		}

	
	APL_GOBACK_SUCCESS							
	
	RETURN_SUCCESS: 
		printf("\n Sucess Inside DL_Inst_CDSLCOD()sqlca.sqlcode=|%d|\n",sqlca.sqlcode);	
		return(APL_SUCCESS);

	RETURN_FAILURE:
		printf("\n Error Inside DL_Inst_CDSLCOD()sqlca.sqlcode=|%d|\n",sqlca.sqlcode);
		return(APL_FAILURE);
} 

