













 
#include "stdio_64.h"
#include "MS_Swift.h"

EXEC SQL INCLUDE SQLCA;

#define	APL_MALLOC_FAIL_LOC(pointer)\
			if (pointer == NULL)\
			{\
				return APL_FAILURE;\
			}


int MS_Proc_MsgFormat(MS_SEQ_ELM_STRUCT_H *p_ms_seq_elm_struct_h,int p_tot_seq,MS_VAL_ELM_STRUCT_H *p_ms_val_elm_struct_h,
                 int p_tot_val,char *p_msg_file,char p_swftlx)
{



extern int MS_Rtv_SeqRep(int ,int ,MS_SEQ_ELM_STRUCT_H *,int *);

extern int MS_Rtv_ParSeqRep(int ,int ,MS_SEQ_ELM_STRUCT_H *,int *);

extern int MS_Rtv_ParentSeq(int ,int ,MS_SEQ_ELM_STRUCT_H *,int *);

extern int MS_Rtv_ChildSeq(int , int ,MS_SEQ_ELM_STRUCT_H *,int , int *);



/* Added by kotubabu for Linux Migration -Start*/
#ifdef OS_LINUX
FILE *msg;
#else
FILE *msg = APL_OUT_FILE;
#endif
/* Added by kotubabu for Linux Migration-End*/
int int_seq_ctr=0,int_curr_rep_no = 0,int_par_rep_no = 0,int_child_rep_no = 0,int_val_ctr = 0;
MS_VAL_ELM_STRUCT_H *l_ms_val_elm_struct_ha = NULL;
MS_VAL_ELM_STRUCT_H *l_ms_val_elm_struct_h_t = NULL;
int int_mprocessed = 0,int_tot_seq=0,int_tot_val=0,int_childex=0,int_l_seq_rep_no=0,int_l_parent=0;
int int_l_child = 0,int_fin_ctr=0,int_nr_ctr=0,int_returnval = 0,int_clsstat = 0;
char chr_lval[16],chr_date_time[30];

int int_tp = 0;
l_ms_val_elm_struct_h_t = l_ms_val_elm_struct_ha = (MS_VAL_ELM_STRUCT_H *)calloc(1,sizeof(MS_VAL_ELM_STRUCT_H));
APL_MALLOC_FAIL_LOC(l_ms_val_elm_struct_ha);

memset(chr_lval,APL_NULL_CHAR,16);
memset(chr_date_time,APL_NULL_CHAR,30);

int_tot_seq = p_tot_seq;
int_tot_val = p_tot_val;


msg = fopen(p_msg_file,"w");
int_fnoopen++;
while( int_seq_ctr <= int_tot_seq)
{
   p_ms_seq_elm_struct_h[int_seq_ctr].sequence_rep_no = 0;
   p_ms_seq_elm_struct_h[int_seq_ctr].child_sequence_rep_no = 0;
   int_seq_ctr++;
}
int_seq_ctr = 0;
int_childex = 1;
while( int_seq_ctr  <= int_tot_seq)
{
   MS_Rtv_SeqRep(p_ms_seq_elm_struct_h[int_seq_ctr].identity_no,int_tot_seq,p_ms_seq_elm_struct_h,&int_l_seq_rep_no);
   int_curr_rep_no  = int_l_seq_rep_no;

   MS_Rtv_ParSeqRep(p_ms_seq_elm_struct_h[int_seq_ctr].identity_no,int_tot_seq,p_ms_seq_elm_struct_h,&int_tp);
   int_par_rep_no  = int_tp;


   if( p_ms_seq_elm_struct_h[int_seq_ctr].child_sequence_rep_no == 0) 
   {
      int_val_ctr=0;      
      int_mprocessed = 0;
      while( int_val_ctr  < int_tot_val)
      {
         if( p_ms_val_elm_struct_h[int_val_ctr].identity_no  == p_ms_seq_elm_struct_h[int_seq_ctr].identity_no)
         {
            if( p_ms_val_elm_struct_h[int_val_ctr].REP_NO == int_curr_rep_no)
	    {
printf("I_MsgFormatFn - chr_value of p_ms_val_elm_struct_h[int_val_ctr].PAR_REP_NO is %d\n",p_ms_val_elm_struct_h[int_val_ctr].PAR_REP_NO);
    printf("IMsgFormatFn - chr_value of int_val_ctr is %d\n",int_val_ctr);
	printf("IMsgFormatFn - chr_value of int_par_rep_no is %d\n",int_par_rep_no);         
				if( p_ms_val_elm_struct_h[int_val_ctr].PAR_REP_NO == int_par_rep_no)
	       {
                 if(strcmp(p_ms_val_elm_struct_h[int_val_ctr].msg_tag,"PG") == 0 ||
                   strcmp(p_ms_val_elm_struct_h[int_val_ctr].msg_tag,"PGC") == 0 )
                 {
                   int_val_ctr++;
                   continue;
                 }
                 if(strcmp(p_ms_seq_elm_struct_h[int_seq_ctr].ind,"R ") == 0)
                 {
                  strcpy(l_ms_val_elm_struct_ha[int_fin_ctr].msg_tag,p_ms_val_elm_struct_h[int_val_ctr].msg_tag);
                  strcpy(l_ms_val_elm_struct_ha[int_fin_ctr].h_data_val,p_ms_val_elm_struct_h[int_val_ctr].h_data_val);
                  l_ms_val_elm_struct_ha[int_fin_ctr].identity_no = p_ms_val_elm_struct_h[int_val_ctr].identity_no;
                  l_ms_val_elm_struct_ha[int_fin_ctr].head_cont_newline = p_ms_val_elm_struct_h[int_val_ctr].head_cont_newline;
                  l_ms_val_elm_struct_ha[int_fin_ctr].print_cd = p_ms_val_elm_struct_h[int_val_ctr].print_cd;
                 }
                 else
                 {

                    for(int_nr_ctr=0;int_nr_ctr<int_fin_ctr;int_nr_ctr++)
                    {
                      if(strcmp(l_ms_val_elm_struct_ha[int_nr_ctr].msg_tag,p_ms_val_elm_struct_h[int_val_ctr].msg_tag) == 0 && l_ms_val_elm_struct_ha[int_nr_ctr].identity_no == p_ms_val_elm_struct_h[int_val_ctr].identity_no)
                      {
                         strcpy(l_ms_val_elm_struct_ha[int_nr_ctr].msg_tag,p_ms_val_elm_struct_h[int_val_ctr].msg_tag);
                         strcpy(l_ms_val_elm_struct_ha[int_nr_ctr].h_data_val,p_ms_val_elm_struct_h[int_val_ctr].h_data_val);
                         l_ms_val_elm_struct_ha[int_fin_ctr].identity_no = p_ms_val_elm_struct_h[int_val_ctr].identity_no;
                         l_ms_val_elm_struct_ha[int_fin_ctr].head_cont_newline = p_ms_val_elm_struct_h[int_val_ctr].head_cont_newline;
                         l_ms_val_elm_struct_ha[int_fin_ctr].print_cd = p_ms_val_elm_struct_h[int_val_ctr].print_cd;
                         int_fin_ctr--; 
                         break;
                      }

                    }
                    if(int_nr_ctr == int_fin_ctr)
                    {
                      strcpy(l_ms_val_elm_struct_ha[int_fin_ctr].msg_tag,p_ms_val_elm_struct_h[int_val_ctr].msg_tag);
                      strcpy(l_ms_val_elm_struct_ha[int_fin_ctr].h_data_val,p_ms_val_elm_struct_h[int_val_ctr].h_data_val);
                      l_ms_val_elm_struct_ha[int_fin_ctr].identity_no = p_ms_val_elm_struct_h[int_val_ctr].identity_no;
                      l_ms_val_elm_struct_ha[int_fin_ctr].head_cont_newline = p_ms_val_elm_struct_h[int_val_ctr].head_cont_newline;
                      l_ms_val_elm_struct_ha[int_fin_ctr].print_cd = p_ms_val_elm_struct_h[int_val_ctr].print_cd;
                    }
                 }
                 
                  int_fin_ctr++;
                  l_ms_val_elm_struct_h_t = l_ms_val_elm_struct_ha = (MS_VAL_ELM_STRUCT_H *)realloc(l_ms_val_elm_struct_ha,sizeof(MS_VAL_ELM_STRUCT_H)*(int_fin_ctr+1));

                  int_mprocessed = 1;
               }
               else
               {
                  if( !int_childex) 
		  {
                     int_mprocessed = 0;
                     break;
                  }
                
                }
            }
          }
          int_val_ctr++;
      }
      if( !int_mprocessed )
      {
         MS_Rtv_ParentSeq(p_ms_seq_elm_struct_h[int_seq_ctr].par_seqno,int_tot_seq,p_ms_seq_elm_struct_h,&int_l_parent);
         int_seq_ctr  = int_l_parent;
         if( int_seq_ctr == -1) 
         {
            break;
         }
      }
      else
         p_ms_seq_elm_struct_h[int_seq_ctr].sequence_rep_no = p_ms_seq_elm_struct_h[int_seq_ctr].sequence_rep_no + 1;
      
    }
    MS_Rtv_ChildSeq(p_ms_seq_elm_struct_h[int_seq_ctr].identity_no,p_ms_seq_elm_struct_h[int_seq_ctr].child_sequence_rep_no ,
             p_ms_seq_elm_struct_h,int_tot_seq, &int_l_child);

    if( int_l_child >= 0)
    {
       p_ms_seq_elm_struct_h[int_seq_ctr].child_sequence_rep_no++; 
       int_seq_ctr = int_l_child;
       int_childex = 1;
    }
    else
    {
       if( int_l_child == -1)
       {
          p_ms_seq_elm_struct_h[int_seq_ctr].child_sequence_rep_no = 0;
          int_childex = 1;
       }
       else
          int_childex = 0;
       
    } 
    
} 

for(int_nr_ctr=0;int_nr_ctr<int_fin_ctr;int_nr_ctr++)
{
	
   if(p_swftlx == 'S')
   {
         if(l_ms_val_elm_struct_ha[int_nr_ctr].head_cont_newline != 'N')
         {
           	fprintf(msg,":%s:%s\n",l_ms_val_elm_struct_ha[int_nr_ctr].msg_tag,l_ms_val_elm_struct_ha[int_nr_ctr].h_data_val);
         }
         else
         {
               	fprintf(msg,"%s\n",l_ms_val_elm_struct_ha[int_nr_ctr].h_data_val);
         }
     }
     else
     {
              	fprintf(msg,"%s\n",l_ms_val_elm_struct_ha[int_nr_ctr].h_data_val);
     }

}     
int_clsstat = fclose(msg);
if( int_clsstat == 0)
 int_fnoopen--;
free(l_ms_val_elm_struct_h_t);
return APL_SUCCESS;
} 


int MS_Rtv_ChildSeq(int p_seq_no, int p_child_rep_no,MS_SEQ_ELM_STRUCT_H *p_ms_seq_elm_struct_h,int p_tot_seq,
             int *p_child) 
{
int int_seq_ctr=0, int_l_child_no; 
*p_child = -2;
int_l_child_no = 1;
while( int_seq_ctr <= p_tot_seq)
{
   if( p_ms_seq_elm_struct_h[int_seq_ctr].par_seqno == p_seq_no)
   {
      *p_child = -1;
      if( int_l_child_no > p_child_rep_no)
      {
         *p_child = int_seq_ctr;
         break;
      }
      else
         int_l_child_no++;
      
   }
   int_seq_ctr++;
}

return APL_SUCCESS;
}

int MS_Rtv_ParentSeq(int p_seq_no,int p_tot_seq,MS_SEQ_ELM_STRUCT_H *p_ms_seq_elm_struct_h,int *p_parent)
{
int int_seq_ctr=0; 
*p_parent = -1; 

	while( int_seq_ctr < p_tot_seq)
	{
   	     if( p_ms_seq_elm_struct_h[int_seq_ctr].identity_no == p_seq_no)
             {
         	*p_parent = int_seq_ctr;
         	break;
   	     }
   	     int_seq_ctr++;
	}  

return APL_SUCCESS;
}

int MS_Proc_SWFTForm(char *chr_p_val,char *f_val) // Changes done for AIX Migration
{
   char chr_fchar[7],chr_l_val[16],chr_l_dec[16];
   int  int_slen=0,i=0,j=0,int_dec_len=0;
   char *chr_lpos = NULL;
   char *chr_l_pos_t = NULL;

   chr_l_pos_t = chr_lpos = (char *)calloc(15,sizeof(char));
	APL_MALLOC_FAIL_LOC(chr_lpos);

   memset(chr_l_val,'\0',16);
   memset(chr_l_dec,'\0',16);

   strncpy(chr_l_val,chr_p_val,15);
   
	chr_l_val[strlen(chr_l_val)] = APL_NULL_CHAR;

   chr_lpos = strchr(chr_l_val,'.');
   if(chr_lpos == NULL)
      int_slen = strlen(chr_p_val);
   else
      int_slen = chr_lpos-chr_l_val;
   sprintf(chr_fchar,"%s%2ds,","%.",int_slen);
   sprintf(f_val,chr_fchar,chr_l_val);
   if(chr_lpos != NULL)
   {
     if(atoi(chr_lpos+1) == 0)
	strcpy(chr_l_dec,"");
     else
        strcpy(chr_l_dec,chr_lpos+1);
   }

   if (int_slen < strlen(chr_l_val))
   {
       
       strcat(f_val,chr_l_dec);
       
   }

   int_dec_len = strlen(f_val) - 1;
   while(int_dec_len > 0)
   {
      if(f_val[int_dec_len] != '0')
	break;
      else
	f_val[int_dec_len] = '\0';
      int_dec_len--;
   }
	free(chr_l_pos_t);
return APL_SUCCESS;//AIX Warning Removal
}
