


#include "CO_HostStructdef.h"
#include "DL_Interface.h"
#include "Intellect_Common.h"
#include "Intellect_Interface.h"	
EXEC SQL INCLUDE SQLCA.H;

int DL_Proc_WebDet(char *p_deal_ident,
				   char *p_client,
                   DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	int l_count = 0;
	char l_failcode[3] = APL_NULL_STRING ;
	char chr_clh_flg[3] = APL_NULL_STRING ;
	char chr_deal_cd[2] = APL_NULL_STRING ;
	char chr_clh_stat[3] = APL_NULL_STRING;
	double l_net_amt = 0;
	short i_net_amt = 0;
	short i_failcode = 0;
	short i_deal_cd = 0;
	short i_clh_flg = 0;
	short i_clh_stat = 0;
	printf("\n ENTERING FUNCTION DL_Proc_WebDet\n");
	DL_DEAL_RECCOUNT_STRUCT_H *l_sys_dl_deal_recount_h = NULL;
		DL_DEAL_RECCOUNT_STRUCT_I *l_sys_dl_deal_recount_i = NULL;

	 l_sys_dl_deal_recount_h = (DL_DEAL_RECCOUNT_STRUCT_H *)calloc(1,sizeof(DL_DEAL_RECCOUNT_STRUCT_H));
	 APL_MALLOC_FAIL(l_sys_dl_deal_recount_h);
	 	 memset(l_sys_dl_deal_recount_h, NULL, sizeof(DL_DEAL_RECCOUNT_STRUCT_H));


	 l_sys_dl_deal_recount_i = (DL_DEAL_RECCOUNT_STRUCT_I *)calloc(1,sizeof(DL_DEAL_RECCOUNT_STRUCT_I));
	 APL_MALLOC_FAIL(l_sys_dl_deal_recount_i);	
 	 memset(l_sys_dl_deal_recount_i, NULL, sizeof(DL_DEAL_RECCOUNT_STRUCT_I));
	
		printf("\nCLIENT IS |%s|\n",p_client);
			printf("\nIDENITY NO IS |%s|\n",p_deal_ident);

	EXEC SQL SELECT DEAL_DATE,SETL_DATE,NET_AMT,DEAL_STAT,FAILREASON_CD,CLH_FLG,DEAL_CD,STATUS INTO 
	:l_sys_dl_deal_recount_h->h_deal_date:l_sys_dl_deal_recount_i->i_deal_date,:l_sys_dl_deal_recount_h->h_setl_date:l_sys_dl_deal_recount_i->i_setl_date,:l_net_amt:i_net_amt,:l_sys_dl_deal_recount_h->h_status:l_sys_dl_deal_recount_i->i_status,:l_failcode:i_failcode,:chr_clh_flg:i_clh_flg,:chr_deal_cd:i_deal_cd,:chr_clh_stat:i_clh_stat
	FROM DL_DEAL
	WHERE
	IDENTIY_NO = :p_deal_ident
	AND	CLIENT = :p_client;
	
	if(sqlca.sqlcode)
				  {
						printf("\n Failed fetching of deal data|%d|\n ",sqlca.sqlcode);
				  }

		IS_ANY_ORA_ERROR

	printf("\n clearing house flag is |%s|\n",chr_clh_flg);
	printf("\n DVP MARKED STATUS is |%s|\n",chr_clh_stat);
	if(!strcmp(chr_clh_flg,APL_DL_CLHGFLG) || (!strcmp(chr_clh_flg,APL_DL_DVPFLG) && !strcmp(chr_clh_stat,APL_YES_IND)))
	{

			printf("\nCLIENT IS |%s|\n",p_client);
			printf("\nIDENITY NO IS |%s|\n",p_deal_ident);
			printf("\nDEAL DATE IS |%s|\n",l_sys_dl_deal_recount_h->h_deal_date);
			printf("\nSETL DATE IS |%s|\n",l_sys_dl_deal_recount_h->h_setl_date);
			printf("\nSTATUS IS |%s|\n",l_sys_dl_deal_recount_h->h_status);
			printf("\nNET AMIT IS |%lf|\n",l_net_amt);
			printf("\nDEAL CODE IS |%s|\n",chr_deal_cd);


			if(!strcmp(chr_deal_cd,"1") || !strcmp(chr_deal_cd,"3"))
			{	
				l_sys_dl_deal_recount_h->h_sale_amt = l_net_amt;
			}

			if(!strcmp(chr_deal_cd,"2") || !strcmp(chr_deal_cd,"4"))
			{
				l_sys_dl_deal_recount_h->h_purchase_amt = l_net_amt;
			}


			EXEC SQL SELECT COUNT(*) into :l_count from DL_DEAL_RECCOUNT
				WHERE
			IDENTIY_NO = :p_deal_ident;

				IS_ANY_ORA_ERROR
					/*

			EXEC SQL SELECT FAILREASON_CD into :l_failcode from DL_DEAL
				WHERE 
				IDENTIY_NO = :p_deal_ident
				AND
				CLIENT = :p_client;
				

				IS_ANY_ORA_ERROR
*/
			printf("\nCOUNT IS |%d|\n",l_count);

			if(l_count > 0)
			{
				printf("\n before delete\n");
				EXEC SQL DELETE FROM DL_DEAL_RECCOUNT 
					WHERE 
					IDENTIY_NO = :p_deal_ident;

				IS_ANY_ORA_ERROR
			}
			
			printf("\n before delete \n");

			if((!strcmp(l_failcode,"90") || !strcmp(l_failcode,"93") || !strcmp(l_failcode,APL_NULL_STRING)) && (!strcmp(chr_clh_stat,APL_NULL_STRING)))
			{
				strcpy(l_sys_dl_deal_recount_h->h_failcode_flg,"N");
			}
			else
				strcpy(l_sys_dl_deal_recount_h->h_failcode_flg,"Y");
		    
			strcpy(l_sys_dl_deal_recount_h->h_identiy_no,p_deal_ident);

			printf("\n before insert \n");
			printf("\nl_sys_dl_deal_recount_h->h_failcode_flg is |%s|\n",l_sys_dl_deal_recount_h->h_failcode_flg);

			EXEC SQL INSERT INTO DL_DEAL_RECCOUNT VALUES (:l_sys_dl_deal_recount_h:l_sys_dl_deal_recount_i);

			if(sqlca.sqlcode)
				  {
						printf("\n Failed fetching of deal data|%d|\n",sqlca.sqlcode);
				  }

			IS_ANY_ORA_ERROR
	
	}

	RETURN_SUCCESS:
		CO_ProcMonitor(APL_OUT_FILE, "Exiting Function DL_Proc_WebDet with success", NULL, NULL);
		return (APL_SUCCESS);

	RETURN_FAILURE:
		CO_ProcMonitor(APL_OUT_FILE, "Exiting Function DL_Proc_WebDet with errors", NULL, NULL);
		return (APL_FAILURE);

}