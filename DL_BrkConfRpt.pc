
















#include  <stdlib.h>
#include  <string.h>
#include  "CO_HostStructdef.h"  

#define DEALCD_LEN_A         2
#define DOMCPCLIENT_LEN 		 11 
#define IDENTITY_NO_LEN  17
#define INFO_LEN			  9 
#define CLH_CLIENT_LEN_A	 16
#define DEALTYPE_LEN 		 25
#define QUANTITY_LEN				 40
#define AMOUNT_LEN_B			    40
#define INSTR_NAME_LEN_C		 31
#define FILENAME_LEN_A			 41
#define CNAME_LEN_B			 31
#define DATE_LEN			 11 
#define COND_LEN		  2
#define DEALDT_LEN			 11 
#define SETL_DATE_LEN_B	 11 	
#define INFORMATION_LEN		 80
#define CLIENTOF_LEN		 66


EXEC SQL INCLUDE sqlca;

//main(int argc , char **argv )
int main(int argc,char **argv)//Changes done for AIX Migration
{
  struct sqlca sqlca ;
  DEBUG_INFO_STRUCT_H             *l_debug_info_ptr = NULL  ;
  INTL_ENV_DATA_STRUCT_H       l_intl_env_data_h ;
  FILE			    			*l_finifile   = NULL ;
  FILE			    			*l_logfile    = NULL ;
  int			    				int_l_int_num     = 0 ;
  int 			    			int_l_flg         = 0 ;
  int 			   			int_l_int_retval  = 0 ;
  char			    			**chr_l_str_parm  = NULL ;
  char			    			chr_uname[APL_USERID_LEN]  = APL_NULL_STRING ;
  char 			    			chr_custody_id_b[APL_USERID_LEN] = APL_NULL_STRING ;
  char			    			chr_passwd[APL_PASSWD_LEN] = APL_NULL_STRING ;
  char 			   			chr_l_inifile[PATH_LENGTH] = APL_NULL_STRING ;
  char 			    			chr_l_logdir[PATH_LENGTH]  = APL_NULL_STRING ;
  char			    			chr_l_buf[BUFFER_LEN]       = APL_NULL_STRING ;

  EXEC SQL VAR chr_uname  IS STRING;
  EXEC SQL VAR chr_passwd IS STRING;

  memset(&l_intl_env_data_h , NULL , sizeof(INTL_ENV_DATA_STRUCT_H)) ;

  

  strcpy(l_intl_env_data_h.usr   ,argv[3]);
  strcpy(l_intl_env_data_h.h_mode     ,argv[4]);
  strcpy(l_intl_env_data_h.processtion ,argv[5]);
  strcpy(l_intl_env_data_h.auth_req ,argv[6]);
  strcpy(l_intl_env_data_h.subprocess   ,argv[7]);
  strcpy(l_intl_env_data_h.h_process   ,argv[8]);

  strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
  strcat(chr_l_inifile,"intl_sun.cfg");


  if ((l_finifile = fopen(chr_l_inifile,"r")) == NULL )
   return(-1);

  

  APL_FETCH_DB_LOGIN_DETAILS(l_finifile , chr_custody_id_b , chr_uname , chr_passwd ,APL_OUT_FILE , &l_debug_info_ptr )

  

  if(CO_Con_Db(chr_uname,chr_passwd,&l_debug_info_ptr)!=APL_SUCCESS)
    APL_GOBACK_FAIL

  

  if(APL_FAILURE == CO_Rtv_RptFileName("3i" ,
  				APL_LOGFILE_DESC ,
				100 ,
				argv[5] ,
				argv ,
				&l_logfile ,
				&l_debug_info_ptr) )
  {
   EXEC SQL ROLLBACK WORK RELEASE ;
   APL_GOBACK_FAIL
  }

  

   EXEC SQL COMMIT WORK ;

   if(sqlca.sqlcode)
   {
     CO_Proc_RptClose(l_logfile,&l_debug_info_ptr);
     APL_GOBACK_FAIL
   }

   CO_ProcMonitor(l_logfile ,"Broker Confirmation Report\n",NULL,NULL);
   CO_ProcMonitor(l_logfile ,"--------------------------\n",NULL,NULL);
   CO_ProcMonitor(l_logfile ,"Work Committed After LogFile Creation\n",NULL,NULL);

   if(CO_RtvSysParams(&l_debug_info_ptr) != APL_SUCCESS )
   {
    CO_ProcMonitor(l_logfile , "Unable to get the system parameters : Rollback Done \n",NULL,&l_intl_env_data_h);
    CO_Proc_RptClose(l_logfile,&l_debug_info_ptr) 	;
    EXEC SQL ROLLBACK WORK RELEASE ;
    APL_GOBACK_FAIL
   }

   int_l_int_retval = CO_Pro_LocRec(argv,l_logfile,&l_debug_info_ptr) ;

   if(int_l_int_retval != APL_SUCCESS)
    {
     CO_ProcMonitor(l_logfile, "Unable to lock BATCH_IN_PROC record - Rollback Done \n",NULL, &l_intl_env_data_h) ;
     CO_Proc_RptClose(l_logfile,&l_debug_info_ptr);
     EXEC SQL ROLLBACK WORK RELEASE;
     APL_GOBACK_FAIL
    }

  
  

  CO_ProcMonitor(l_logfile,"String Split processtion called\n",NULL,NULL);

  if(APL_FAILURE == CO_SplitStr(argv[9],'|',&int_l_int_num,&chr_l_str_parm))  
  {
   CO_ProcMonitor(l_logfile,"String Split Function failed\n",NULL,NULL);
   CO_Proc_RptClose(l_logfile,&l_debug_info_ptr);
   APL_GOBACK_FAIL
  }

if( int_l_int_num == 0 )
  {
   CO_ProcMonitor(l_logfile,"There were no params.Mandatory data missing\n",NULL,NULL); 
   CO_Proc_RptClose(l_logfile,&l_debug_info_ptr);
   APL_GOBACK_FAIL
  }

  

  if( (strcmp(chr_l_str_parm[1] , " ") != 0) && (strcmp(chr_l_str_parm[2]," ")==0) ) 
  {
   CO_ProcMonitor(l_logfile,"Invalid Data for Ref No.:cannot not be null\n",NULL,NULL);
   CO_ProcMonitor(l_logfile,"Unsuccessful in Main\n",NULL,NULL);
   CO_Proc_RptClose(l_logfile,&l_debug_info_ptr);
   APL_GOBACK_FAIL
  }


  if( (strcmp(chr_l_str_parm[1] , " ") == 0) && (strcmp(chr_l_str_parm[2]," ")!=0) ) 
  {
   CO_ProcMonitor(l_logfile,"Invalid Data for the Account No.:should not be null\n",NULL,NULL);
   CO_ProcMonitor(l_logfile,"Unsuccessful in Main\n",NULL,NULL);
   CO_Proc_RptClose(l_logfile,&l_debug_info_ptr);
   APL_GOBACK_FAIL
  }

  if( (strcmp(chr_l_str_parm[1] , " ") == 0) && (strcmp(chr_l_str_parm[2]," ")==0)  && (strcmp(chr_l_str_parm[3]," ") == 0 ))
  {
   CO_ProcMonitor(l_logfile,"Either A/c No. and ref No. should be Null or Trade Code should be Null\n",NULL,NULL);
   CO_ProcMonitor(l_logfile,"Unsuccessful in Main\n",NULL,NULL);
   CO_Proc_RptClose(l_logfile,&l_debug_info_ptr);
   APL_GOBACK_FAIL
  }


  if((strcmp(chr_l_str_parm[1] , " ") != 0) && (strcmp(chr_l_str_parm[2]," ")!=0)  && (strcmp(chr_l_str_parm[3]," ") != 0 ))
  {
   CO_ProcMonitor(l_logfile,"A/c No. , Ref No. and Trade Code all cannot be Null\n",NULL,NULL);
   CO_ProcMonitor(l_logfile,"Unsuccessful in Main\n",NULL,NULL);
   CO_Proc_RptClose(l_logfile,&l_debug_info_ptr);
   APL_GOBACK_FAIL
  }

  fprintf(l_logfile,"Parameters Receieved From The Front End\n");
  fprintf(l_logfile,"l_str_parm[0]  = (%s)\n",  chr_l_str_parm[0] );
  fprintf(l_logfile,"l_str_parm[1]  = (%s)\n",  chr_l_str_parm[1] );
  fprintf(l_logfile,"l_str_parm[2]  = (%s)\n",  chr_l_str_parm[2] );
  fprintf(l_logfile,"l_str_parm[3]  = (%s)\n",  chr_l_str_parm[3] );
  fprintf(l_logfile,"l_str_parm[4]  = (%s)\n",  chr_l_str_parm[4] );


  if(APL_FAILURE == CO_RtvSysParams(&l_debug_info_ptr))
  {
   CO_ProcMonitor(l_logfile,"Failed to get System Parameters\n",NULL,NULL);
   CO_Proc_RptClose(l_logfile,&l_debug_info_ptr);
   APL_GOBACK_FAIL
  }

  CO_ProcMonitor(l_logfile,  "Successfully got System Parameters\n",NULL,NULL);
  CO_ProcMonitor(l_logfile,  "Call the DL_Prnt_BrkConfRpt processtion\n",NULL,NULL);

   
	if(DL_Prnt_BrkConfRpt(argv,l_logfile,chr_l_str_parm,&l_intl_env_data_h,&l_debug_info_ptr)==APL_FAILURE)
   {
    int_l_flg = 1 ;

    CO_Mod_Batch_Status(argv,l_logfile,&l_debug_info_ptr,int_l_flg) ;

    if(CO_ChkErr(l_debug_info_ptr)==APL_SUCCESS)
    {
     
     CO_ProcMonitor(l_logfile,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_env_data_h) ;
     CO_FreeErrLst(&l_debug_info_ptr);
    }

     CO_ProcMonitor(l_logfile,"Unsuccessful in DL_Prnt_BrkConfRpt processtion \n",NULL,NULL);
     CO_Proc_RptClose(l_logfile,&l_debug_info_ptr);
     APL_GOBACK_FAIL
   }
   else
   {
    int_l_flg = 0 ;
	
    CO_Mod_Batch_Status(argv,l_logfile,&l_debug_info_ptr,int_l_flg);

    if(CO_ChkErr(l_debug_info_ptr)==APL_SUCCESS)
    {
     
     CO_ProcMonitor(l_logfile,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_env_data_h) ;
     CO_FreeErrLst(&l_debug_info_ptr);
    }

   CO_ProcMonitor(l_logfile,"Record Commited.\nBrkConfRepFn Successful ,Exiting From main.\n",NULL,NULL);
   CO_Proc_RptClose(l_logfile,&l_debug_info_ptr);
   APL_GOBACK_SUCCESS
  }


   

   RETURN_SUCCESS :
    {
     fclose(l_finifile) ;
     return(0) ;
    }
   RETURN_FAILURE :
    {
     fclose(l_finifile);
     return(-1) ;
    }
}




int DL_Prnt_BrkConfRpt(char **argv,FILE *p_logfile,char **p_str_parm,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	char chr_l_h_trcode_a[DEALCD_LEN_A]					= APL_NULL_STRING ; 
   char chr_l_h_domcpac[DOMCPCLIENT_LEN] 				= APL_NULL_STRING ; 
	char chr_l_h_client_a[APL_CLIENT_LENGTH]  			= APL_NULL_STRING ; 
	char chr_l_h_instrcode_A[APL_INSTRUMENTCODE_LEN] 				= APL_NULL_STRING ; 
	char chr_l_h_refno_A[IDENTITY_NO_LEN]    		= APL_NULL_STRING ;
	char chr_l_h_fnote[INFO_LEN]    				= APL_NULL_STRING ;

	char chr_l_str_clhclient[CLH_CLIENT_LEN_A] 	= APL_NULL_STRING ;
	char chr_l_str_trdtype[DEALTYPE_LEN]       	= APL_NULL_STRING ; 
	char chr_l_str_qty[QUANTITY_LEN]      	    		= APL_NULL_STRING ; 
	char chr_l_str_amount[AMOUNT_LEN_B]   				= APL_NULL_STRING ; 
	char chr_l_str_instrdesc[INSTR_NAME_LEN_C] 			= APL_NULL_STRING ; 
	char chr_l_str_name[FILENAME_LEN_A]     				= APL_NULL_STRING ; 
	char chr_l_str_cname[CNAME_LEN_B]  	  			= APL_NULL_STRING ; 
	char chr_l_str_clientof[CLIENTOF_LEN]   	= APL_NULL_STRING ; 
	char chr_l_str_sysdate[DATE_LEN] 	  		 	= APL_NULL_STRING ; 
	char chr_l_str_cond[COND_LEN]    	   	= APL_NULL_STRING ; 
	char chr_l_str_trdt[DEALDT_LEN]  	      	= APL_NULL_STRING ; 
	char chr_l_str_settledt[SETL_DATE_LEN_B]   	= APL_NULL_STRING ; 
	char chr_l_str_footnote[INFORMATION_LEN]   		= APL_NULL_STRING ; 

   char chr_l_str_qty1[QUANTITY_LEN]     	   		= APL_NULL_STRING ; 
   char chr_l_str_amount1[AMOUNT_LEN_B]     			= APL_NULL_STRING ;
   char chr_l_h_countaccname[FILENAME_LEN_A]  			= APL_NULL_STRING ;
    
   char chr_l_h_countacc_a[APL_COUNTACC_LEN]			= APL_NULL_STRING ;
	
	char chr_l_h_clientof[CLIENTOF_LEN]			= APL_NULL_STRING ;

   double l_dbl_quantity     = 0.0 ; 
   double l_dbl_amount  = 0.0 ; 

   double l_dbl_quantity_a    = 0.0 ; 
   double l_dbl_amount1 = 0.0 ; 
	int 	 i = 0 ;
	int    int_l_int_rec = 0 ;

   FILE  *l_ptr_fopenfile      = NULL ;
   INTL_REPT_STRUCT_H *l_intl_rept_struct_ha = NULL;

   short int_l_i_trcode      = 0 ;
	short l_i_domcpac     = 0 ;
	short l_i_account     = 0 ;
   short l_i_refno       = 0 ;
	short l_i_instr_code      = 0 ;
	short l_i_footnote    = 0 ;
	short l_i_sysdate     = 0 ;
	short l_i_instr_name     = 0 ;
	short int_l_i_qty         = 0 ;
	short l_i_amount      = 0 ;
	short l_i_clhaccount  = 0 ;
	short l_i_name        = 0 ;
	short l_i_cname       = 0 ;
	short l_i_accountof   = 0 ;
	short l_i_trdt        = 0 ;
	short l_i_settledt    = 0 ;
	short l_i_countacc    = 0 ;
	short l_i_countaccname = 0;
	short l_i_accountofname = 0;
 
	EXEC SQL VAR chr_l_h_trcode_a   IS STRING ; 
	EXEC SQL VAR chr_l_h_client_a  IS STRING ; 
	EXEC SQL VAR chr_l_h_domcpac  IS STRING ; 
	EXEC SQL VAR chr_l_h_instrcode_A   IS STRING ; 
	EXEC SQL VAR chr_l_h_refno_A    IS STRING ; 
	EXEC SQL VAR chr_l_h_countacc_a IS STRING ; 
	EXEC SQL VAR chr_l_h_countaccname IS STRING ; 
	EXEC SQL VAR chr_l_h_clientof IS STRING;

	strcpy(chr_l_h_client_a   , p_str_parm[1]);
	strcpy(chr_l_h_refno_A     , p_str_parm[2]);
	strcpy(chr_l_h_trcode_a    , p_str_parm[3]);
	strcpy(chr_l_h_fnote     , p_str_parm[4]);
	strcpy(chr_l_str_cond    , p_str_parm[0]);

    
	memset(chr_l_h_countacc_a		,APL_NULL_CHAR,APL_COUNTACC_LEN);
	memset(chr_l_h_countaccname	,APL_NULL_CHAR,FILENAME_LEN_A);
   memset(chr_l_h_clientof     ,APL_NULL_CHAR,APL_CLIENT_LENGTH);


	EXEC SQL SELECT TO_CHAR(SYS_DATE,'DD/MM/YYYY') INTO :chr_l_str_sysdate:l_i_sysdate
	FROM PRO_SYS_DATE ;

	IS_ANY_ORA_ERROR

	if (APL_ZERO_RESULT_SET)
   	APL_GOBACK_FAIL



 if(APL_FAILURE == CO_Rtv_RptFileName("HU" ,
                                "Broker Confirmation Report" ,
                                100 ,
                                argv[5] ,
                                argv ,
                                &l_ptr_fopenfile ,
                                l_debug_info_ptr) )
  {
   EXEC SQL ROLLBACK WORK RELEASE ;
   APL_GOBACK_FAIL
  }

  

   EXEC SQL COMMIT WORK ;

   if(sqlca.sqlcode)
   {
     CO_Proc_RptClose(l_ptr_fopenfile,l_debug_info_ptr);
     APL_GOBACK_FAIL
   }


	EXEC SQL SELECT REPLACE(REPLACE(SUBSTR(LTRIM(INFO_1),1,30),CHR(13),' '),chr(10)) INTO 
   :chr_l_str_footnote:l_i_footnote FROM CANOTE WHERE 
	INFO_SEQ = :chr_l_h_fnote ; 


   IS_ANY_ORA_ERROR 

   if(l_i_footnote == -1)
    strcpy(chr_l_str_footnote," ");
	
	if ( chr_l_str_cond[0] == '1' ) 
    {
	  EXEC SQL DECLARE curr_trade1 CURSOR FOR 
	  SELECT DEAL_CD , DOMESTIC_CPCLT , CLIENT , IDENTIY_NO , INSTR_CODE ,CP_CLT,
     QTY, AMOUNT , TO_CHAR(DEAL_DATE,'DD/MM/YYYY') , TO_CHAR(SETL_DATE,'DD/MM/YYYY') , CLIENTOF
     FROM DL_DEAL 
	  WHERE CLIENT = :chr_l_h_client_a  and IDENTIY_NO = :chr_l_h_refno_A  	
	  AND DOMESTIC_CPCLT != '9999999998' AND INSTR_CODE != 'OTC99999' AND DL_CLASS = 1 AND CHECKER_DT IS NOT NULL ; 	
   } 

	else if(chr_l_str_cond[0] == '2') 
    {
	  EXEC SQL DECLARE curr_trade2 CURSOR FOR 
	  SELECT  DOMESTIC_CPCLT , CLIENT , IDENTIY_NO , INSTR_CODE ,CP_CLT,
     QTY, AMOUNT , TO_CHAR(DEAL_DATE,'DD/MM/YYYY') , TO_CHAR(SETL_DATE,'DD/MM/YYYY')  , CLIENTOF
     FROM DL_DEAL 
	  WHERE DEAL_CD = :chr_l_h_trcode_a and LRNDS_DATE IS NULL 
	  AND DOMESTIC_CPCLT != '9999999998' AND INSTR_CODE != 'OTC99999' AND DL_CLASS = 1 AND CHECKER_DT IS NOT NULL ; 	
    }

   IS_ANY_ORA_ERROR 

	if(chr_l_str_cond[0] == '1') 
	  EXEC SQL OPEN curr_trade1 ; 
   else if(chr_l_str_cond[0] == '2')
     EXEC SQL OPEN curr_trade2 ;
	
   IS_ANY_ORA_ERROR 


	for( ; ; )
	{

	if(chr_l_str_cond[0] == '1') 
	{
      EXEC SQL FETCH curr_trade1 INTO :chr_l_h_trcode_a:int_l_i_trcode , :chr_l_h_domcpac:l_i_domcpac , :chr_l_h_client_a:l_i_account , 
	   :chr_l_h_refno_A:l_i_refno , :chr_l_h_instrcode_A:l_i_instr_code , :chr_l_h_countacc_a:l_i_countacc, :l_dbl_quantity:int_l_i_qty , 
      :l_dbl_amount:l_i_amount , :chr_l_str_trdt:l_i_trdt , :chr_l_str_settledt:l_i_settledt, :chr_l_h_clientof:l_i_accountof ;
   }
	else if(chr_l_str_cond[0] == '2') 
	{
      EXEC SQL FETCH curr_trade2 INTO :chr_l_h_domcpac:l_i_domcpac , :chr_l_h_client_a:l_i_account , 
	   :chr_l_h_refno_A:l_i_refno , :chr_l_h_instrcode_A:l_i_instr_code , :chr_l_h_countacc_a:l_i_countacc, :l_dbl_quantity:int_l_i_qty , 
      :l_dbl_amount:l_i_amount , :chr_l_str_trdt:l_i_trdt , :chr_l_str_settledt:l_i_settledt, :chr_l_h_clientof:l_i_accountof;
   }

 
	IS_ANY_ORA_ERROR 

   if(APL_ZERO_RESULT_SET) break ; 

   EXEC SQL SELECT SUBSTR(LTRIM(MT_CLIENT.CLN_NAME),1,40) INTO :chr_l_str_name:l_i_name FROM MT_CLIENT 
   WHERE  MT_CLIENT.CLN_CODE = :chr_l_h_domcpac ;

	IS_ANY_ORA_ERROR 

   if(l_i_name == -1) 
   strcpy(chr_l_str_name , " ");

	EXEC SQL SELECT SUBSTR(LTRIM(MT_CLIENT.CLN_NAME),1,30) , MT_CLIENT.CLN_CLH 
	INTO :chr_l_str_cname:l_i_cname , :chr_l_str_clhclient:l_i_clhaccount 
	FROM MT_CLIENT 
	WHERE 
   MT_CLIENT.CLN_CODE = :chr_l_h_client_a  ;

	IS_ANY_ORA_ERROR 

   if(l_i_cname == -1) 
   strcpy(chr_l_str_cname , " ");

   if(l_i_clhaccount == -1) 
   strcpy(chr_l_str_clhclient , " ");

  
 
   G_SYS_ACCOUNT_LEN = 10;

	EXEC SQL SELECT SUBSTR(LTRIM(MT_CLIENT.CLN_NAME),1,40) 
	INTO :chr_l_h_countaccname:l_i_countaccname
	FROM MT_CLIENT 
	WHERE 
   MT_CLIENT.CLN_CODE = rtrim(SUBSTR(:chr_l_h_countacc_a,1,:G_SYS_ACCOUNT_LEN))  ;

	IS_ANY_ORA_ERROR 

  

	EXEC SQL SELECT REPLACE(REPLACE(SUBSTR(MT_INSTRUMENT.INSTR_NAME,1,30),CHR(13),' '),chr(10)) INTO :chr_l_str_instrdesc:l_i_instr_name 
   FROM MT_INSTRUMENT WHERE
   MT_INSTRUMENT.INSTR_CODE = :chr_l_h_instrcode_A ;  

	IS_ANY_ORA_ERROR 

   if(l_i_instr_name == -1) 
   strcpy(chr_l_str_instrdesc , " ");

	if (chr_l_h_trcode_a[0] == '1')
	{
	    strcpy(chr_l_str_trdtype , "DELIVER FREE");
	}
	else if( chr_l_h_trcode_a[0] == '2' )
	{
	    strcpy(chr_l_str_trdtype , "RECEIVE FREE");
	}
	else if( chr_l_h_trcode_a[0] == '3')
	{
	    strcpy(chr_l_str_trdtype , "DELIVER VERSUS PAYMENT");
	}
	else if( chr_l_h_trcode_a[0] == '4')
	{
	    strcpy(chr_l_str_trdtype , "RECEIVE VERSUS PAYMENT");
	}
	else if (chr_l_h_trcode_a[0] == '5')
	{
	    strcpy(chr_l_str_trdtype , "CASH DELIVER");
	}
	else if( chr_l_h_trcode_a[0] == '6' )
	{
	    strcpy(chr_l_str_trdtype , "CASH RECEIVE");
	}
	else if( chr_l_h_trcode_a[0] == '7')
	{
	    strcpy(chr_l_str_trdtype , "DEL INSTRUMENT DELI CASH");
	}
	else if( chr_l_h_trcode_a[0] == '8')
	{
	    strcpy(chr_l_str_trdtype , "REC INSTRUMENT REC CASH");
	}


    sprintf(chr_l_str_qty    , "%0.2f" , l_dbl_quantity);
    sprintf(chr_l_str_amount , "%0.2f" , l_dbl_amount);
    
   if( CO_ConvToFmtAmt(chr_l_str_qty,chr_l_str_qty1) == APL_FAILURE ) 
   {
     CO_Proc_RptClose(l_ptr_fopenfile,l_debug_info_ptr);
     APL_GOBACK_FAIL
   }

   if( CO_ConvToFmtAmt(chr_l_str_amount,chr_l_str_amount1) == APL_FAILURE )
   {
     CO_Proc_RptClose(l_ptr_fopenfile,l_debug_info_ptr);
     APL_GOBACK_FAIL
   }
   

	int_l_int_rec++ ;

	
	for(i=0;i<=25;i++)
	fprintf(l_ptr_fopenfile," \n");	

	fprintf(l_ptr_fopenfile,"              Counterparty          :   %s\n",chr_l_str_name);
	fprintf(l_ptr_fopenfile,"\n");
	fprintf(l_ptr_fopenfile,"              Our Client            :   %s\n",chr_l_str_cname);
	fprintf(l_ptr_fopenfile,"\n");

	if (strlen(chr_l_h_countaccname)==0)
		fprintf(l_ptr_fopenfile,"              Your Client           :   %s\n",chr_l_h_clientof);
	else
		fprintf(l_ptr_fopenfile,"              Your Client           :   %s\n",chr_l_h_countaccname);
	fprintf(l_ptr_fopenfile,"\n");
	fprintf(l_ptr_fopenfile,"              Trade Type            :   %s\n",chr_l_str_trdtype);
	fprintf(l_ptr_fopenfile,"\n");
	fprintf(l_ptr_fopenfile,"              Instrurity              :   %s\n",chr_l_str_instrdesc);
	fprintf(l_ptr_fopenfile,"\n");
	fprintf(l_ptr_fopenfile,"              Quantity              :   %s\n",chr_l_str_qty1);
	fprintf(l_ptr_fopenfile,"\n");
	fprintf(l_ptr_fopenfile,"              HUF Countervalue      :   %s\n",chr_l_str_amount1);
	fprintf(l_ptr_fopenfile,"\n");
	fprintf(l_ptr_fopenfile,"              Trade Date            :   %s\n",chr_l_str_trdt);
	fprintf(l_ptr_fopenfile,"\n");
	fprintf(l_ptr_fopenfile,"              Value Date            :   %s\n",chr_l_str_settledt);
	fprintf(l_ptr_fopenfile,"\n");

	if (( chr_l_h_trcode_a[0] == '2')  || (chr_l_h_trcode_a[0] == '4' ) ||( chr_l_h_trcode_a[0] == '6')  || (chr_l_h_trcode_a[0] == '8' ))
	{
	  fprintf(l_ptr_fopenfile,"              Place Of Purchase     :   410/%s\n",chr_l_str_clhclient);
	  fprintf(l_ptr_fopenfile,"\n");
	}
   else
   {
     fprintf(l_ptr_fopenfile,"\n");
     fprintf(l_ptr_fopenfile,"\n");
   }



	fprintf(l_ptr_fopenfile,"%s\n",chr_l_str_footnote);

	if(strcmp(chr_l_str_name,"UNKNOWN") != 0 )
	{
	  EXEC SQL UPDATE DL_DEAL SET LRNDS_DATE = to_date(:chr_l_str_sysdate:l_i_sysdate,'DD/MM/YYYY') 
	  WHERE CLIENT = :chr_l_h_client_a and IDENTIY_NO = :chr_l_h_refno_A ; 

	  IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
	}

}

	if(chr_l_str_cond[0] == '1') 
	 EXEC SQL ClOSE curr_trade1 ; 
	else if(chr_l_str_cond[0] == '2') 
	 EXEC SQL ClOSE curr_trade2 ; 


	IS_ANY_ORA_ERROR 

   
  	APL_GOBACK_SUCCESS
   
   
  	RETURN_SUCCESS :
   {       CO_Proc_RptClose(l_ptr_fopenfile,l_debug_info_ptr);
			  fprintf(p_logfile,"Processed %d Records\n",int_l_int_rec);
           CO_ProcMonitor(p_logfile,"Successful in DL_Prnt_BrkConfRpt processtion\n",NULL,NULL);
           CO_ProcMonitor(p_logfile, "Errors if Any : ", l_debug_info_ptr, p_intl_envdatastruct_h);
           CO_FreeErrLst(l_debug_info_ptr);
           return(APL_SUCCESS);
   }
   	
	RETURN_FAILURE :
   {
  			  CO_Proc_RptClose(l_ptr_fopenfile,l_debug_info_ptr);
			  fprintf(p_logfile,"Processed %d Records\n",int_l_int_rec);
   	     CO_ProcMonitor(p_logfile,"Failed in DL_Prnt_BrkConfRpt processtion\n",NULL,NULL);
   	     CO_ProcMonitor(p_logfile, "Errors : ", l_debug_info_ptr, p_intl_envdatastruct_h);
   	     CO_FreeErrLst(l_debug_info_ptr);
   	     return(APL_FAILURE);
	}

} 





int CO_ConvToFmtAmt(char *p_strin,char *p_strout)
{

	int i=0 , j=0 ,n=0 , int_l_type=0 ;
	char chr_oldstr[QUANTITY_LEN] = APL_NULL_STRING ; 
	char chr_newstr[QUANTITY_LEN] = APL_NULL_STRING ;

	memset(chr_oldstr,APL_NULL_CHAR,QUANTITY_LEN);
	memset(chr_newstr,APL_NULL_CHAR,QUANTITY_LEN);

	strcpy(chr_oldstr,p_strin);
	n=strlen(chr_oldstr) - 3; 

	if(chr_oldstr[strlen(chr_oldstr)-3]!='.')  
	{				   	
 		return APL_FAILURE ;
	}

	if(n%2 == 0)
 		int_l_type = 2 ; 
	else
 		int_l_type = 1 ; 


 	if( strlen(chr_oldstr) <= 6 ) 
 	{
  		strcpy(p_strout,chr_oldstr);
  		return APL_SUCCESS ;
 	}

	for(i=0,j=0;i<strlen(chr_oldstr);i++,j++)
	{

 		chr_newstr[j]=chr_oldstr[i];

 		if(i<n-2)
 		{
  			if( (int_l_type == 2 && i%3 == 0) || (int_l_type == 1 && (i+1)%3== 0 ) )
  			{
   			j++;
   			chr_newstr[j]=',';
  			}
  
 		}

	}

	chr_newstr[j] = '\0';
	strcpy(p_strout,chr_newstr);
	return APL_SUCCESS;

}

