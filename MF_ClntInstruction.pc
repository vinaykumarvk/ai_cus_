 /*  COPYRIGHT NOTICE
 *  Copyright 2015 Intellect Design Arena Limited. All rights reserved.
 *  These materials are confidential and proprietary to
 *  Intellect Design Arena Limited and no part of these materials should 
 *  be reproduced, published, transmitted or distributed in any form or
 *  by any means, electronic, mechanical, photocopying, recording or
 *  otherwise, or stored in any information storage or retrieval system
 *  of any nature nor should the materials be disclosed to third parties
 *  or used in any other manner for which this is not authorized, without
 *  the prior express written authorization of Intellect Design Arena Limited.
 */ 
 /********************************************************************************
 *   Module Name         :         Regulatory Reports 
 *
 *   File Name           :         MF_ClntInstruction.pc 
 *
 *   Description         :         This file contains all functions to prepare Regulatory Reports for MF Clients
 *
 *                               Version Control Block

 *  Date        Version     Author               Description
 *  --------   --------  ---------------  ---------------------------
 *  21/10/2015   1.0     Prateek Singh     ISKB_1665(Regulatory Reporting FOR MF Clients)
 *  23/05/2022   1.1     Kotubabu           Linux Migration
 ****************************************************************************************/

#include "CO_IndStructdef.h"
#include "CA_Common.h"
#include "CO_OthStructdef.h"
EXEC SQL INCLUDE SQLCA.H;
#define PAGELENGTH 24
#define FILENAME_LEN_A            500 
#define FILEPATH_LEN              500 

//FILE *xlfile=NULL; /*Linux Migration-Kotubabu */

typedef struct  {
			char h_trns_id[20] ;
			char h_cust_code[21] ;
			char h_cln_sebi_no[25] ;
			char h_chr_dldt[20] ;
			char h_repo_dt[20] ;
			char h_repo_type[5] ;
			double h_eq_pur ;
			double h_eq_sal ;
			double h_dbt_pur ;
			double h_dbt_sal ;
			double h_pur_bse ;
			double h_sal_bse ;
} MF_REP_DATA_STRUCT_H;


int MF_XLS_RPRT_Header(FILE *l_logfile,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	fprintf(l_logfile,"\n Entering Function MF_XLS_RPRT_Header to construct the header row\n");
        if(APL_SUCCESS != Header_Row_Cell("center",200,"UNIQUE IDENTIFICATION NUMBER FOR A TRANSACTION","S"))
       {
             APL_GOBACK_FAIL
       }

        if(APL_SUCCESS != Header_Row_Cell("center",225,"CUSTODIAN CODE WHO IS UPLOADING THE DATA","M"))
       {
             APL_GOBACK_FAIL
       }

        if(APL_SUCCESS != Header_Row_Cell("center",144,"MF CODE FOR WHOM DATA IS UPLOADED","M"))
       {
             APL_GOBACK_FAIL
       }

        if(APL_SUCCESS != Header_Row_Cell("center",100,"TRANSACTION DATE","M"))
       {
             APL_GOBACK_FAIL
       }

        if(APL_SUCCESS != Header_Row_Cell("center",92,"DATE OF REPORT","M"))
       {
             APL_GOBACK_FAIL
       }

        if(APL_SUCCESS != Header_Row_Cell("center",126,"REPORTING TYPE","M"))
       {
             APL_GOBACK_FAIL
       }

        if(APL_SUCCESS != Header_Row_Cell("center",132,"TOTAL PURCHASE (EQUITY)     (in Rs.)","M"))
       {
             APL_GOBACK_FAIL
       }
	
        if(APL_SUCCESS != Header_Row_Cell("center",211,"TOTAL SALES (EQUITY)      (in Rs.)","M"))
       {
             APL_GOBACK_FAIL
       }

        if(APL_SUCCESS != Header_Row_Cell("center",202,"TOTAL PURCHASE (DEBT)     (in Rs.)","M"))
       {
             APL_GOBACK_FAIL
       }

        if(APL_SUCCESS != Header_Row_Cell("center",171,"TOTAL SALE (DEBT)     (in Rs.)","M"))
       {
             APL_GOBACK_FAIL
       }

        if(APL_SUCCESS != Header_Row_Cell("center",211,"TOTAL PURCHASE (SENSITIVE INDEX SCRIPTS) Out of (6)     (In Rs.)","M"))
       {
             APL_GOBACK_FAIL
       }

        if(APL_SUCCESS != Header_Row_Cell("center",179,"TOTAL SALES  (SENSITIVE INDEX SCRIPTS) Out of (7)     (in Rs.)","E"))
       {
             APL_GOBACK_FAIL
       }

       fprintf(l_logfile,"\nHeader Row constructed with Header_Row_Cell Function \n");
	
	  RETURN_SUCCESS :
             fprintf(l_logfile,"Leaving Function MF_XLS_RPRT_Header with Success",NULL,NULL);
                                 return(APL_SUCCESS);

                RETURN_FAILURE :
             fprintf(l_logfile,"Leaving Function MF_XLS_RPRT_Header with Failure",NULL,NULL);
                                 return(APL_FAILURE);
}

int MF_REPO_XLS(FILE *l_logfile,MF_REP_DATA_STRUCT_H *l_mf_rep_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	char  chr_l_buf[BUFFER_LEN]   =  APL_NULL_STRING;
	
	fprintf(l_logfile,"\n Entering Function MF_REPO_XLS\n");
	     if(APL_SUCCESS != Cell_Common("left",200,l_mf_rep_data_struct_h->h_trns_id,0,0.0,"S","xlzro",l_logfile))
					  APL_GOBACK_FAIL
	     if(APL_SUCCESS != Cell_Common("left",225,l_mf_rep_data_struct_h->h_cust_code,0,0.0,"M","xlzro",l_logfile))
					  APL_GOBACK_FAIL
	     if(APL_SUCCESS != Cell_Common("left",187,l_mf_rep_data_struct_h->h_cln_sebi_no,0,0.0,"M","xlzro",l_logfile))
					  APL_GOBACK_FAIL
		 if(APL_SUCCESS != Cell_Common("left",100,l_mf_rep_data_struct_h->h_chr_dldt,0,0.0,"M","xldate",l_logfile)) 
					  APL_GOBACK_FAIL
		 if(APL_SUCCESS != Cell_Common("left",100,l_mf_rep_data_struct_h->h_repo_dt,0,0.0,"M","xldate",l_logfile)) 
					  APL_GOBACK_FAIL
	     if(APL_SUCCESS != Cell_Common("left",126,l_mf_rep_data_struct_h->h_repo_type,0,0.0,"M","xlzro",l_logfile))
					  APL_GOBACK_FAIL
 	     if(APL_SUCCESS != Cell_Common("left",200,APL_NULL_STRING,0,l_mf_rep_data_struct_h->h_eq_pur,"M","xlflt",l_logfile)) 					  
					 APL_GOBACK_FAIL		 
 	     if(APL_SUCCESS != Cell_Common("left",200,APL_NULL_STRING,0,l_mf_rep_data_struct_h->h_eq_sal,"M","xlflt",l_logfile)) 					  
					 APL_GOBACK_FAIL		 
 	     if(APL_SUCCESS != Cell_Common("left",200,APL_NULL_STRING,0,l_mf_rep_data_struct_h->h_dbt_pur,"M","xlflt",l_logfile)) 					  
					 APL_GOBACK_FAIL		 
 	     if(APL_SUCCESS != Cell_Common("left",200,APL_NULL_STRING,0,l_mf_rep_data_struct_h->h_dbt_sal,"M","xlflt",l_logfile)) 					  
					 APL_GOBACK_FAIL		 		 
 	     if(APL_SUCCESS != Cell_Common("left",200,APL_NULL_STRING,0,l_mf_rep_data_struct_h->h_pur_bse,"M","xlflt",l_logfile)) 					  
					 APL_GOBACK_FAIL		 
 	     if(APL_SUCCESS != Cell_Common("left",200,APL_NULL_STRING,0,l_mf_rep_data_struct_h->h_sal_bse,"E","xlflt",l_logfile)) 					  
					 APL_GOBACK_FAIL		 		 
		RETURN_SUCCESS:
             //fprintf(l_logfile,"Leaving Function MF_REPO_XLS with Success",NULL,NULL);Changes done for AIX Migration
             fprintf(l_logfile,"Leaving Function MF_REPO_XLS with Success");
				 return(APL_SUCCESS);

		RETURN_FAILURE:
             //fprintf(l_logfile,"Leaving Function MF_REPO_XLS with Failure",NULL,NULL); Changes done for AIX Migration
             fprintf(l_logfile,"Leaving Function MF_REPO_XLS with Failure");
				 return(APL_FAILURE);

}

int Daily_Rep_ClntInst_HDFC(char *p_rep_name,char *p_chr_from_date,char *p_chr_to_date,char **argv,FILE *l_logfile,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	char chr_l_sysdate[APL_DATE_LEN]=APL_NULL_STRING;
	char  l_chr_sysdate[APL_DATE_LEN] =  APL_NULL_STRING;
	char  chr_l_sr_no[4] =  APL_NULL_STRING;
	char chr_l_curr_datetime[APL_DATE_LEN]=APL_NULL_STRING;
	char  chr_l_h_aresponse_ca_id[CORP_ID_LEN]=APL_NULL_STRING;
	char  chr_l_hbrokers_handoff_file_name[FILENAME_LEN_A] = APL_NULL_STRING;
	char chr_l_File_Name[FILENAME_LEN_A] = APL_NULL_STRING;
	char chr_l_Path[FILENAME_LEN_A]   = APL_NULL_STRING;	
	char  chr_l_buf[BUFFER_LEN]  =  APL_NULL_STRING;
	char  chr_l_handoff_dir[FILEPATH_LEN] = APL_NULL_STRING;
	char  chr_l_inifile[FILENAME_LEN_A]   = APL_NULL_STRING;
	char l_chr_rowid[APL_ROWID_LEN] =  APL_NULL_STRING;
	short i_chr_rowid = 0;
	char l_chr_cntr[5] = APL_NULL_STRING;
	short i_chr_cntr = 0;
	char l_cust_code[11] = APL_NULL_STRING;
	short i_cust_code = 0;
	char l_cln_code[11]= APL_NULL_STRING;
	short i_cln_code = 0;
	char l_ident_no[13] = APL_NULL_STRING;
	short i_ident_no = 0;
	char l_deal_dt[12] = APL_NULL_STRING;
	short i_deal_dt = 0; 
	char l_repo_dt[12] = APL_NULL_STRING;
	short i_repo_dt = 0;
	char l_del_reportdt[11] = APL_NULL_STRING;
	short i_del_reportdt = 0;
	char l_mf_report_dt[11] = APL_NULL_STRING;
	short i_mf_report_dt = 0;
	char  l_mf_tmp_reportdt[20] = APL_NULL_STRING;
	short i_mf_tmp_reportdt = 0;
	char l_mf_trd_date[11] = APL_NULL_STRING;
	short i_mf_trd_date = 0;
	char l_del_dldt[11] = APL_NULL_STRING;
	short i_del_dldt = 0;
	char l_del_tmpdldt[12] = APL_NULL_STRING;
	short i_del_tmpdldt = 0;
	char l_r_type[3] = "N";
	short i_r_type = 0;
	char l_mf_r_type[3] = "N";
	short i_mf_r_type = 0;
	char l_am_dl[3] = "D";
	short i_am_dl = 0;
	char l_mf_rtype[3] = APL_NULL_STRING;
	short i_mf_rtype = 0;
	double l_eq_purval = 0.0;
	short i_eq_purval = 0;
	double l_debts_purval = 0.0;
	short i_debts_purval = 0;
	double l_eq_salval = 0.0;
	short i_eq_salval = 0;
	double l_debts_salval = 0.0;
	short i_debts_salval = 0;
	char l_identy_no[17] =  APL_NULL_STRING;
	char l_identy_a_no[17] =  APL_NULL_STRING;
	short  i_identy_no = 0;
	short  i_identy_a_no = 0;
	char l_chr_code[2] = APL_NULL_STRING;
	char l_chr_code_name[] = "REG_TMP_MF_DL_CUST_DTR_";
	double l_pur_bse = 0.0;
	short i_pur_bse = 0;
	double l_sal_bse = 0.0;
	short i_sal_bse = 0;
	int l_counter = 0;
	char l_chr_date[3] = APL_NULL_STRING;
	short i_chr_date = 0;
	char l_chr_month[3] = APL_NULL_STRING;
	short i_chr_month = 0;
	char l_cnt_date[20] = APL_NULL_STRING; 	
	short i_cnt_date = 0; 	
	char  l_syst_date[20] = APL_NULL_STRING;
	short i_syst_date = 0;
	char  l_del_tmp_reportdt[20] = APL_NULL_STRING;
	short i_del_tmp_reportdt = 0;
	char l_trn_ind[2] = APL_NULL_STRING;
	short i_trn_ind = 0;
	char l_cln_sebi_no[21] = APL_NULL_STRING;
	short i_cln_sebi_no = 0;
	char l_cln_amdsebi_no[21] = APL_NULL_STRING;
	short i_cln_amdsebi_no = 0;
	char l_deal_cd[2] = APL_NULL_STRING;
	short i_deal_cd = 0; 
	char l_instr_code[9] = APL_NULL_STRING;
	short i_instr_code = 0; 
	char l_instr_type[4] = APL_NULL_STRING;
	short i_instr_type = 0; 
	char l_instru_typ[4] = APL_NULL_STRING;
	short i_instru_typ = 0;
	double l_chr_eqpur = 0.0;
	short i_chr_eqpur  = 0;
	double l_chr_eqsal = 0.0;
	short i_chr_eqsal = 0;
	double l_chr_dbtpur = 0.0;
	short i_chr_dbtpur = 0;
	double l_chr_dbtsal = 0.0;
	short i_chr_dbtsal = 0;
	double l_chr_amdeqpur = 0.0;
	short i_chr_amdeqpur  = 0;
	double l_chr_amdeqsal = 0.0;
	short i_chr_amdeqsal = 0;
	double l_chr_amddbtpur = 0.0;
	short i_chr_amddbtpur = 0;
	double l_chr_amddbtsal = 0.0;
	short i_chr_amddbtsal = 0;
	double l_cal_eqpur = 0.0;
	double l_cal_eqsal = 0.0;
	double l_cal_debtpur = 0.0;
	double l_cal_debtsal = 0.0;
	double l_pcal_eqpur = 0.0;
	short i_pcal_eqpur = 0;
	double l_pcal_eqsal = 0.0;
	short i_pcal_eqsal = 0;
	double l_pcal_debtpur = 0.0;
	short i_pcal_debtpur = 0;
	double l_pcal_debtsal = 0.0;
	short i_pcal_debtsal = 0;
	char l_clnt_code[11] = APL_NULL_STRING;
	short i_clnt_code = 0;
	char l_instru_type[4] = APL_NULL_STRING;
	short i_instru_type = 0;
	char l_cl_code[11] = APL_NULL_STRING;
	short i_cl_code = 0;
	char l_def_value[4] = APL_NULL_STRING;
	char l_cln_master[11] = APL_NULL_STRING;
	short i_cln_master = 0;
	double l_chr_purbse = 0.0;
	short i_chr_purbse = 0;
	double l_chr_salbse = 0.0;
	short i_chr_salbse = 0;
	char l_chr_repdt[20] = APL_NULL_STRING;
	short i_chr_repdt = 0;
	char l_chr_dldt[20] = APL_NULL_STRING;
	short i_chr_dldt = 0;
	char l_mf_trdt[11] = APL_NULL_STRING;
	short i_mf_trdt = 0;
	char l_chr_adldt[20] = APL_NULL_STRING;
	short i_chr_adldt = 0;
	char l_chr_tdate[11] = APL_NULL_STRING;
	short i_chr_tdate = 0;
	char l_chr_pddate[11] = APL_NULL_STRING;
	short i_chr_pddate = 0;
	char l_chr_adate[11] = APL_NULL_STRING;
	short i_chr_adate = 0;
	double l_chr_epurval = 0.0;
	short  i_chr_epurval = 0;
	double l_chr_esalval = 0.0;
	short i_chr_esalval = 0;
	double l_chr_dbtpurval = 0.0;
	short i_chr_dbtpurval = 0;
	double l_chr_dbtsalval = 0.0;
	short i_chr_dbtsalval = 0;
	int l_cnt = 0;
	char l_mf_trn_id[13] = APL_NULL_STRING;
	short i_mf_trn_id = 0;
	char l_mf_clnt[11] = APL_NULL_STRING;
	short i_mf_clnt = 0;
	double l_mf_eq_pur = 0.0;
	short  i_mf_eq_pur = 0;
	double l_mf_eq_sal = 0.0;
	short i_mf_eq_sal = 0;
	double l_mf_dbt_pur = 0.0;
	short i_mf_dbt_pur = 0;
	double l_mf_dbt_sal = 0.0;
	short i_mf_dbt_sal = 0;
	char l_amd_clnt[11] = APL_NULL_STRING;
	short i_amd_clnt = 0;
	char l_sebi_rep_flg[2] = APL_NULL_STRING;
	short i_sebi_rep_flg = 0;
	char l_amd_repo_date[11] = APL_NULL_STRING;
	short i_amd_repo_date = 0;
	char l_amd_deal_date[11] = APL_NULL_STRING;
	short i_amd_deal_date = 0;
	char l_amd_deal_stat[3] = APL_NULL_STRING;
	short i_amd_deal_stat = 0;
	double l_cmp_eqpur = 0.0;
	short  i_cmp_eqpur = 0;
	double l_cmp_eqsal = 0.0;
	short i_cmp_eqsal = 0;
	double l_cmp_dbtpur = 0.0;
	short i_cmp_dbtpur = 0;
	double l_cmp_dbtsal = 0.0;
	short i_cmp_dbtsal = 0;

	double l_dcmp_eqpur = 0.0;
	short  i_dcmp_eqpur = 0;
	double l_dcmp_eqsal = 0.0;
	short i_dcmp_eqsal = 0;
	double l_dcmp_dbtpur = 0.0;
	short i_dcmp_dbtpur = 0;
	double l_dcmp_dbtsal = 0.0;
	short i_dcmp_dbtsal = 0;
	char  l_idet_no[17] = APL_NULL_STRING;
	short i_idet_no = 0;
	char l_amd_idno[17] = APL_NULL_STRING;
	short i_amd_idno = 0;
	char l_chr_cls_date[20]=APL_NULL_STRING;
	char l_chr_ret_date[20] = APL_NULL_STRING;
	char l_chr_ret_date1[20] = APL_NULL_STRING;
	char l_chr_ret_date2[20] = APL_NULL_STRING;
	short i_chr_ret_date = 0; 
	char l_chr_amd_date[11] = APL_NULL_STRING;
	char l_chr_amdprev_date[11] = APL_NULL_STRING;
	short i_chr_amd_date = 0; 
	int l_count=0;
	int l_del_count=0;
	int l_amd_count=0;
	int l_amd_hiscount=0;
	int l_mf_count=0;
	int l_new_count=0;
	int l_deal_count=0;
	int l_int_count =0;
	char l_chr_from_date[20]= APL_NULL_STRING;
	char chr_l_day[10]= APL_NULL_STRING;
  
    FILE  *l_ptr_ini_file = NULL;
	FILE  *l_ptr_hbrokers_handoff_file  =  NULL;

	INTL_REPT_STRUCT_H   *l_intl_rept_struct_ha  =NULL;


	INTL_REPT_STRUCT_H            *l_intl_rept_struct_ha_xls  =NULL;

	MF_REP_DATA_STRUCT_H   *l_mf_rep_data_struct_h =NULL;
	l_mf_rep_data_struct_h = (MF_REP_DATA_STRUCT_H *)calloc(1, sizeof(MF_REP_DATA_STRUCT_H));
	APL_MALLOC_FAIL(l_mf_rep_data_struct_h);
	memset(l_mf_rep_data_struct_h,NULL,sizeof(MF_REP_DATA_STRUCT_H));


	memset(chr_l_sr_no,'\0',4);
	memset(chr_l_handoff_dir,NULL,sizeof(chr_l_handoff_dir));

	memset(chr_l_hbrokers_handoff_file_name, NULL, sizeof(chr_l_hbrokers_handoff_file_name));

	l_intl_rept_struct_ha   = (INTL_REPT_STRUCT_H *)calloc(1, sizeof(INTL_REPT_STRUCT_H));
    l_intl_rept_struct_ha_xls= (INTL_REPT_STRUCT_H *)calloc(1, sizeof(INTL_REPT_STRUCT_H));
	APL_MALLOC_FAIL(l_intl_rept_struct_ha);

	APL_MALLOC_FAIL(l_intl_rept_struct_ha_xls);
	memset(chr_l_inifile,NULL,sizeof(chr_l_inifile));
	fprintf(l_logfile,"Entered to Genrate MF Report \n"); 
	
	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

	if ((l_ptr_ini_file = fopen(chr_l_inifile,"r")) == NULL)
		 return(APL_FAILURE);
	if (CO_ReadToken(l_ptr_ini_file,"INTL_REP_PATH_M",chr_l_handoff_dir,l_debug_info_ptr) != APL_SUCCESS)
	    return(APL_FAILURE);
    fprintf(l_logfile,"Report Name for Records |%s|\n",p_rep_name);

	 EXEC SQL SELECT to_char(SYS_DATE,'DD') INTO :l_chr_date FROM PRO_SYS_DATE;
	  IS_ANY_ORA_ERROR
     EXEC SQL SELECT to_char(SYS_DATE,'MM') INTO :l_chr_month FROM PRO_SYS_DATE;
     IS_ANY_ORA_ERROR

	EXEC SQL SELECT PS.MAP_VAL||MT.CUST_CODE INTO :l_cust_code:i_cust_code 
			           FROM MT_COMMON_SYS_PARAMS MT,PRO_SGENSTAT PS
			           WHERE PS.MAP_TYPE='CUST_CODE';
      IS_ANY_ORA_ERROR
      EXEC SQL SELECT to_char(SYS_DATE,'DDMMYY') INTO :chr_l_sysdate FROM PRO_SYS_DATE;
 	  IS_ANY_ORA_ERROR

   if (strcmp(p_rep_name,"DTR") == 0)
	{
		strcpy(l_chr_code,"D");
   }

   if (APL_FAILURE == CO_RtvSysDtTime(chr_l_curr_datetime,l_debug_info_ptr))
   {
      APL_GOBACK_FAIL
   }
   EXEC SQL SELECT '_'||REPLACE(SUBSTR(:chr_l_curr_datetime, 12),':','') into :chr_l_curr_datetime FROM DUAL;
	IS_ANY_ORA_ERROR

	strcpy(chr_l_hbrokers_handoff_file_name,chr_l_handoff_dir);
	strcat(chr_l_hbrokers_handoff_file_name,l_chr_code_name);
	strcat(chr_l_hbrokers_handoff_file_name,l_chr_date);
	strcat(chr_l_hbrokers_handoff_file_name,l_chr_month);

	strcat(chr_l_hbrokers_handoff_file_name,chr_l_curr_datetime); 
	strcat(chr_l_hbrokers_handoff_file_name,".txt");
	fprintf(l_logfile,"Txt file Report Name |%s|\n",chr_l_hbrokers_handoff_file_name);

	if ((l_ptr_hbrokers_handoff_file = fopen(chr_l_hbrokers_handoff_file_name,"w")) == NULL)
	return(APL_FAILURE);
	
	strcat(chr_l_File_Name,l_chr_code_name);
	strcat(chr_l_File_Name,l_chr_date);
	strcat(chr_l_File_Name,l_chr_month);
	strcat(chr_l_File_Name,chr_l_curr_datetime);

	
	strcpy(chr_l_Path,chr_l_handoff_dir);
 
	fprintf(l_logfile,"\n Entering XLS_Strt_Page() to start generating .xls format reprot \n");
	if(APL_SUCCESS != XLS_Strt_Page(chr_l_Path,chr_l_File_Name,"Sheet1"))
	{
		APL_GOBACK_FAIL
	}
   fprintf(l_logfile,"\n Leaving XLS_Strt_Page successfully \n");
	printf("\n ** *** ** ** ** XLS_Strt_Page() *** *** *** ** ** *** *** ");
 
	if(MF_XLS_RPRT_Header( l_logfile,l_debug_info_ptr) == APL_FAILURE)
		APL_GOBACK_FAIL
	memset(l_intl_rept_struct_ha_xls,NULL,sizeof(INTL_REPT_STRUCT_H));
	strcat(chr_l_File_Name,".xls");
   fprintf(l_logfile,"Xls file Report Name |%s|\n",chr_l_File_Name);

   strcpy(l_intl_rept_struct_ha_xls->report_name,chr_l_File_Name);
   strcpy(l_intl_rept_struct_ha_xls->report_desc, APL_HOFF_FILE_DESC);
   strcpy(l_intl_rept_struct_ha_xls->report_date, argv[2]);
   l_intl_rept_struct_ha_xls->report_width = 100;
   strcpy(l_intl_rept_struct_ha_xls->task_desc, p_intl_envdatastruct_h->processtion);
   strcpy(l_intl_rept_struct_ha_xls->fe_be_ind, APL_BE_IND);
   strcpy(l_intl_rept_struct_ha_xls->usr, p_intl_envdatastruct_h->usr);

   printf("\n ********* ************* ************* ************* ************ ***********\n");
   printf("\nl_intl_rept_struct_ha_xls->report_name = |%s| ",l_intl_rept_struct_ha_xls->report_name);
   printf("\nl_intl_rept_struct_ha_xls->report_desc = |%s| ",l_intl_rept_struct_ha_xls->report_desc);
   printf("\nl_intl_rept_struct_ha_xls->report_date = |%s| ",l_intl_rept_struct_ha_xls->report_date);
   printf("\nl_intl_rept_struct_ha_xls->report_width = |%d| ",l_intl_rept_struct_ha_xls->report_width);
   printf("\nl_intl_rept_struct_ha_xls->task_desc = |%s| ",l_intl_rept_struct_ha_xls->task_desc);
   printf("\nl_intl_rept_struct_ha_xls->fe_be_ind = |%s| ",l_intl_rept_struct_ha_xls->fe_be_ind);
   printf("\nl_intl_rept_struct_ha_xls->usr = |%s| ",l_intl_rept_struct_ha_xls->usr);
   printf("\n ********* ************* ************* ************* ************ ***********\n");


   if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha_xls, l_debug_info_ptr))
   {
       APL_GOBACK_FAIL
   } 

	memset(l_intl_rept_struct_ha,NULL,sizeof(INTL_REPT_STRUCT_H));

   strcpy(l_intl_rept_struct_ha->report_name, chr_l_hbrokers_handoff_file_name+strlen(chr_l_handoff_dir));
   strcpy(l_intl_rept_struct_ha->report_desc, APL_HOFF_FILE_DESC);
   strcpy(l_intl_rept_struct_ha->report_date, argv[2]);
    l_intl_rept_struct_ha->report_width = 100;
    strcpy(l_intl_rept_struct_ha->task_desc, p_intl_envdatastruct_h->processtion);
    strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
    strcpy(l_intl_rept_struct_ha->usr, p_intl_envdatastruct_h->usr);

   if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))
   {
       APL_GOBACK_FAIL
   }

if (APL_FAILURE == CO_RtvSysDtTime(chr_l_curr_datetime,l_debug_info_ptr))
   {
      APL_GOBACK_FAIL
   }


   fprintf(l_logfile,"Report Genrated for Date passed from FE|%s|\n",p_chr_from_date);

   EXEC SQL SELECT TO_DATE(:p_chr_from_date,'DD/MM/YYYY'),TO_DATE(:p_chr_from_date,'DD/MM/YYYY') - 1  INTO :l_chr_tdate:i_chr_tdate,l_chr_adate:i_chr_adate
           FROM DUAL;
	IS_ANY_ORA_ERROR
    fprintf(l_logfile,"Error Check  for Passsed to Working Day|%d|\n",sqlca.sqlcode);

	strcpy(l_chr_from_date,p_chr_from_date);	
	strcat(l_chr_from_date,APL_NULL_TIME);
	printf("\n l_chr_from_date=|%s| \n",l_chr_from_date);
	 
	EXEC SQL SELECT TRIM(TO_CHAR(TO_DATE(:l_chr_from_date,'DD/MM/YYYY HH24:MI:SS'),'DAY')) INTO :chr_l_day FROM DUAL;	
	IS_ANY_ORA_ERROR	
	
	printf("\n chr_l_day=|%s| \n",chr_l_day);

	char         l_exchange_code[4] = APL_NULL_STRING;
	 memset( l_exchange_code, APL_NULL_CHAR, sizeof(l_exchange_code));

     strcpy(l_exchange_code,"BSE");
     
	if ( Rtv_Prev_BussDate(l_chr_from_date,l_chr_ret_date,l_exchange_code,l_debug_info_ptr) == APL_FAILURE)
	           APL_GOBACK_FAIL

        strcpy(l_chr_ret_date1,l_chr_ret_date);
    
	strcpy(l_exchange_code,"NSE");
       
	 if ( Rtv_Prev_BussDate(l_chr_from_date,l_chr_ret_date,l_exchange_code,l_debug_info_ptr) == APL_FAILURE)
	           APL_GOBACK_FAIL

      int         date_diff = 0;

      EXEC SQL SELECT TO_DATE(:l_chr_ret_date1,'DD/MM/YYYY HH24:MI:SS') - TO_DATE(:l_chr_ret_date,'DD/MM/YYYY HH24:MI:SS') into :date_diff FROM DUAL;
            IS_ANY_ORA_ERROR

		  if (date_diff > 0)
		  {
			  strcpy(l_chr_ret_date,l_chr_ret_date1);
           
		  }
		  
			 date_diff = 0;
			strcpy(l_exchange_code,"MCS");
	
			if ( Rtv_Prev_BussDate(l_chr_from_date,l_chr_ret_date2,l_exchange_code,l_debug_info_ptr) == APL_FAILURE)
	           APL_GOBACK_FAIL
			   
			   
			   
			EXEC SQL SELECT TO_DATE(:l_chr_ret_date2,'DD/MM/YYYY HH24:MI:SS') - TO_DATE(:l_chr_ret_date,'DD/MM/YYYY HH24:MI:SS') into :date_diff FROM DUAL;
            IS_ANY_ORA_ERROR
			
			if (date_diff > 0)
			{
			  strcpy(l_chr_ret_date,l_chr_ret_date2);
           
			}
			

	EXEC SQL SELECT SUBSTR(trunc(to_date(:l_chr_ret_date ,'DD/MM/YYYY HH24:MI:SS')),1,10) INTO :l_chr_cls_date FROM DUAL;
	IS_ANY_ORA_ERROR
	memset(l_chr_ret_date, APL_NULL_CHAR, 11);
	strcpy(l_chr_ret_date,l_chr_cls_date);
	fprintf(l_logfile,"Previous buss Date for the Date passed is %s\n",l_chr_ret_date);

	EXEC SQL SELECT to_char(SYS_DATE,'DD/MM/YYYY') INTO :l_cnt_date:i_cnt_date
		FROM PRO_SYS_DATE;
	IS_ANY_ORA_ERROR
	strcat(l_cnt_date,APL_NULL_TIME);
	strcpy(l_syst_date,l_cnt_date);

	EXEC SQL SELECT TO_CHAR(TO_DATE(:p_chr_from_date,'DD/MM/YYYY'),'DD-MON-YYYY')
		INTO :l_repo_dt:i_repo_dt
		FROM DUAL;
   EXEC SQL DELETE FROM MF_REP_TAB WHERE to_char(REPORT_DT,'DD/MM/YYYY')=substr(:p_chr_from_date,0,10);
    fprintf(l_logfile,"Report Date Pass to Cursor Is |%s|\n",l_repo_dt);

	fprintf(l_logfile,"Error Check for selecting Repo_Date |%d|\n",sqlca.sqlcode);
	fprintf(l_logfile,"Report Date Pass to Cursor Is |%s|\n",l_repo_dt);
	fprintf(l_logfile,"Declaring the Cursor dtr_rep Cursor for Master Record Fetch");

	EXEC SQL DECLARE mst_cursor CURSOR FOR 
	SELECT DISTINCT A.CLN_CODE ,CLN_SEBI_REG_NO FROM MT_CLIENT A,MT_REGDETAILS B
		WHERE A.CLN_CODE=A.CLN_MASTER AND A.CLN_CODE =B.CLN_CODE
				AND A.STATUS = 'AA' AND
				CLN_SEBICTG = 'MF' 
				AND CLN_TYPE = 'M' AND B.STATUS='AA';

	IS_ANY_ORA_ERROR

   	EXEC SQL OPEN mst_cursor;
	   IS_ANY_ORA_ERROR
    fprintf(l_logfile,"\n\nStart to Report New Transaction \n");

   for(;;)
   {
       EXEC SQL FETCH mst_cursor
			             INTO :l_cln_master:i_cln_master,
       							:l_cln_sebi_no:i_cln_sebi_no; 
        fprintf(l_logfile,"Error check After Fetch of Master Record Set|%d|\n",sqlca.sqlcode);
	    printf("Error check After Fetch of Master Record Set|%d|\n",sqlca.sqlcode);
	  	fflush(stdout);

	   IS_ANY_ORA_ERROR
			 l_count=0;
		 	 l_del_count=0;
		 	 l_new_count=0;
		     l_eq_purval=0;
			 l_debts_purval=0;
			 l_eq_salval=0;
			 l_debts_salval=0;
			 l_chr_eqpur=0;
			 l_chr_eqsal =0;
			 l_chr_dbtpur=0;
			 l_chr_dbtsal =0;
			 strcpy(l_del_reportdt,APL_NULL_STRING);
			 strcpy(l_del_dldt,APL_NULL_STRING);
			 strcpy(l_r_type,"N");
			 strcpy(l_mf_trn_id,APL_NULL_STRING);
      
	    fprintf(l_logfile," \nProcessing Master Client |%s|\n",l_cln_master);
	   	printf(" Processing Master Client |%s|\n",l_cln_master);
	  	fflush(stdout);

       if(sqlca.sqlcode==1403)
		    break;

		fprintf(l_logfile,"FRESH NEW Records for\n");
	  	fprintf(l_logfile,"Deal Date --> l_chr_ret_date --> |%s|\n",l_chr_ret_date);
		fprintf(l_logfile,"Client --> l_cln_master -->|%s|\n",l_cln_master);
		printf("Check for l_cln_master|%s|\n",l_cln_master);
  		fflush(stdout);

				EXEC SQL SELECT 'N',COUNT(*), NVL(SUM(TOT_PUR_EQ),0), NVL(SUM(TOT_PUR_DEBT),0), NVL(SUM(TOT_SAL_EQ),0), NVL(SUM(TOT_SAL_DEBT),0)
								        INTO :l_trn_ind:i_trn_ind,:l_count,:l_eq_purval:i_eq_purval,:l_debts_purval:i_debts_purval,
									            :l_eq_salval:i_eq_salval,:l_debts_salval:i_debts_salval
								        FROM (SELECT CLIENT,
													 DECODE(DEAL_CD,'4',DECODE(INSTR_TYPE,'SHS',SUM(A.AMOUNT)),
										'2',DECODE(INSTR_TYPE,'SHS',SUM(A.AMOUNT)))TOT_PUR_EQ , 
													  DECODE(DEAL_CD,'4',DECODE(INSTR_TYPE,'SHS','',SUM(A.AMOUNT)),
										'2',DECODE(INSTR_TYPE,'SHS','',SUM(A.AMOUNT)))TOT_PUR_DEBT , 
													  DECODE(DEAL_CD,'3',DECODE(INSTR_TYPE,'SHS',SUM(A.AMOUNT),''),
										'1',DECODE(INSTR_TYPE,'SHS',SUM(A.AMOUNT)))TOT_SAL_EQ , 
													  DECODE(DEAL_CD,'3',DECODE(INSTR_TYPE,'SHS','',SUM(A.AMOUNT)),
										'1',DECODE(INSTR_TYPE,'SHS','',SUM(A.AMOUNT)))TOT_SAL_DEBT
                                        FROM DL_DEAL A, MT_INSTRUMENT B
						                WHERE A.INSTR_CODE=B.INSTR_CODE AND 
					A.CLIENT IN (SELECT CLN_CODE FROM MT_CLIENT WHERE CLN_MASTER=:l_cln_master AND STATUS = 'AA') AND
                                                                          DEAL_STAT NOT IN ('UU','DU') AND     
					(A.SEBI_REPORTED IS NULL OR A.SEBI_REPORTED = 'N' OR (SEBI_REPORTED='Y'  AND A.DEAL_DATE BETWEEN TO_DATE(:l_chr_ret_date||' 00:00:00','DD/MM/YYYY HH24:MI:SS')  
                                                                            AND TO_DATE(:l_chr_ret_date||' 23:59:59','DD/MM/YYYY HH24:MI:SS'))) AND
                					 ((B.INSTR_TYPE IN ('BON','WTS') AND DL_CLASS = '1' ) OR (B.INSTR_TYPE = 'SHS' AND DL_CLASS IN ('1','56'))) AND 
									 NOT(A.DL_CLASS = '1' AND A.DOMESTIC_CPCLT = 'INTERSCHEM') AND
									 B.STATUS = 'AA'
									 AND A.DOMESTIC_CPCLT IN (SELECT PTY_CODE FROM MT_PARTY WHERE PTY_TYPE = 'B' AND STATUS = 'AA') AND
										B.INSTR_SUB_TYPE NOT IN (SELECT DISTINCT MT_REG_RPT.INST_SUB_TYPE 
                        FROM MT_REG_RPT WHERE MT_REG_RPT.BLK_IND ='INS' and MT_REG_RPT.STATUS='AA' and 
                        MT_REG_RPT.INST_BLK_FLG='Y'and MT_REG_RPT.RPT_TYPE = 'MF') AND
                 				   A.DOMESTIC_CPCLT NOT IN (SELECT DISTINCT MT_REG_RPT.PTY_CD 
                         FROM MT_REG_RPT WHERE MT_REG_RPT.BLK_IND ='PTY'  and MT_REG_RPT.STATUS = 'AA' 
                         and MT_REG_RPT.PTY_BLK_FLG='Y'and MT_REG_RPT.RPT_TYPE = 'MF') AND				
									  A.DEAL_DATE BETWEEN TO_DATE(:l_chr_ret_date||' 00:00:00','DD/MM/YYYY HH24:MI:SS') AND TO_DATE(:l_chr_ret_date||' 23:59:59','DD/MM/YYYY HH24:MI:SS')
									  AND INSTR_SUB_TYPE NOT IN ('PN','PT')
							GROUP BY DEAL_CD,INSTR_TYPE,CLIENT,A.AMOUNT);
		    fprintf(l_logfile,"Error Check for New Transactions |%d|\n",sqlca.sqlcode);
			IS_ANY_ORA_ERROR
			fprintf(l_logfile,"No of new Transaction going to report |%d|\n",sqlca.sqlerrd[2]);


		fprintf(l_logfile,"New Records fetched for and client -->|%s| And Deal Date --> |%s|\n",l_cln_master,l_chr_ret_date);
        fprintf(l_logfile,"Value Of PurEQ|%lf|\n",l_eq_purval);
        fprintf(l_logfile,"Value Of PurDBT|%lf|\n",l_debts_purval);
		fprintf(l_logfile,"Value Of SalEQ|%lf|\n",l_eq_salval);
		fprintf(l_logfile,"Value Of SalDBT|%lf|\n",l_debts_salval);

		   fprintf(l_logfile,"Update reported records  \n");
		   EXEC SQL UPDATE DL_DEAL SET SEBI_REPORTED = 'Y',
		           REPO_DATE =:l_syst_date:i_syst_date
					WHERE CLIENT IN (SELECT CLN_CODE FROM MT_CLIENT WHERE CLN_MASTER=:l_cln_master
				                                             AND STATUS = 'AA') and
		                  INSTR_CODE IN (SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE
						            ((INSTR_TYPE IN ('BON','WTS') AND DL_CLASS = '1' ) OR (INSTR_TYPE = 'SHS' AND DL_CLASS IN ('1','56')))  AND
									INSTR_SUB_TYPE NOT IN (SELECT DISTINCT MT_REG_RPT.INST_SUB_TYPE FROM MT_REG_RPT WHERE 
									MT_REG_RPT.BLK_IND ='INS' and MT_REG_RPT.STATUS='AA' and MT_REG_RPT.INST_BLK_FLG='Y'
									and MT_REG_RPT.RPT_TYPE = 'MF')
									AND INSTR_SUB_TYPE NOT IN ('PN','PT')
								    AND status = 'AA') AND
						  DEAL_STAT NOT IN ('UU','DU') AND
				     	  (SEBI_REPORTED IS NULL OR SEBI_REPORTED = 'N') AND
			  			  NOT(DL_CLASS = '1' AND DOMESTIC_CPCLT = 'INTERSCHEM') AND 
                                          DOMESTIC_CPCLT IN (SELECT PTY_CODE FROM MT_PARTY WHERE PTY_TYPE = 'B' AND STATUS = 'AA') AND
              			  DOMESTIC_CPCLT NOT IN (SELECT DISTINCT MT_REG_RPT.PTY_CD 
                          FROM MT_REG_RPT WHERE MT_REG_RPT.BLK_IND ='PTY'  and MT_REG_RPT.STATUS = 'AA' 
                          and MT_REG_RPT.PTY_BLK_FLG='Y'and MT_REG_RPT.RPT_TYPE = 'MF') AND				
                          DEAL_DATE BETWEEN TO_DATE(:l_chr_ret_date||' 00:00:00','DD/MM/YYYY HH24:MI:SS') AND TO_DATE(:l_chr_ret_date||' 23:59:59','DD/MM/YYYY HH24:MI:SS');

			fprintf(l_logfile,"Error check for updating  reported records|%d|\n",sqlca.sqlcode);
			printf("Error check for updating  reported records |%d|\n",sqlca.sqlcode);
			fprintf(l_logfile,"No of new Transaction reported |%d|\n",sqlca.sqlerrd[2]);
			fflush(stdout);
		      IS_ANY_ORA_ERROR
	     
		 l_counter = l_counter + 1;
         EXEC SQL SELECT LPAD(:l_counter,4,'0') INTO :l_chr_cntr:i_chr_cntr
	               FROM DUAL;	
		  fprintf(l_logfile,"sqlerror check on count for Unique id |%d|\n",sqlca.sqlcode);
		  printf("sqlerror check on count for Unique id |%d|\n",sqlca.sqlcode);
		  fflush(stdout);
         IS_ANY_ORA_ERROR
		 sprintf(l_ident_no,"%s%s%s",l_chr_date,l_chr_month,l_chr_cntr);
         fprintf(l_logfile,"Unique Identification number for a transaction |%s|\n",l_ident_no);

           l_chr_eqpur = l_eq_purval / 10000000;
           l_chr_eqsal = l_eq_salval / 10000000;
           l_chr_dbtpur = l_debts_purval / 10000000;
		   l_chr_dbtsal = l_debts_salval / 10000000;

			fprintf(l_logfile,"Value of l_chr_eqpur =|%lf|\n",l_chr_eqpur);
		  	fprintf(l_logfile,"Value of l_chr_eqsal = |%lf|\n",l_chr_eqsal);
         	fprintf(l_logfile,"Value of l_chr_dbtpur = |%lf|\n",l_chr_dbtpur);
         	fprintf(l_logfile,"Value of  l_chr_dbtsal ==|%lf|\n",l_chr_dbtsal);
        	
            EXEC SQL SELECT TO_CHAR(TO_DATE(:p_chr_from_date,'DD/MM/YYYY'),'DD/MM/YYYY HH24:MI:SS')    
				   INTO :l_chr_repdt:i_chr_repdt
                   FROM DUAL;
		    fprintf(l_logfile,"Error Check on New Records for set Report Date|%d|\n",sqlca.sqlcode);
            printf("Error Check on New Records for set Report Date|%d|\n",sqlca.sqlcode);
 	        fflush(stdout);
             IS_ANY_ORA_ERROR

			 EXEC SQL SELECT TO_CHAR(TO_DATE(:l_chr_ret_date,'DD/MM/YYYY'),'DD-MON-YYYY') 
					  INTO :l_chr_dldt:i_chr_dldt
              FROM DUAL;
              IS_ANY_ORA_ERROR
			  EXEC SQL SELECT ROUND((:l_chr_eqpur),2) INTO :l_cmp_eqpur:i_cmp_eqpur
				           FROM DUAL;
              IS_ANY_ORA_ERROR
    	        EXEC SQL SELECT ROUND((:l_chr_eqsal),2) INTO :l_cmp_eqsal:i_cmp_eqsal
			           FROM DUAL;
		     IS_ANY_ORA_ERROR
		     EXEC SQL SELECT ROUND((:l_chr_dbtpur),2) INTO :l_cmp_dbtpur:i_cmp_dbtpur
			              FROM DUAL;
              IS_ANY_ORA_ERROR
 		      EXEC SQL SELECT ROUND((:l_chr_dbtsal),2) INTO :l_cmp_dbtsal:i_cmp_dbtsal
			              FROM DUAL;
	           IS_ANY_ORA_ERROR
              EXEC SQL SELECT ROUND((:l_pur_bse),2) INTO :l_chr_purbse:i_chr_purbse
                       FROM DUAL;
              IS_ANY_ORA_ERROR
              EXEC SQL SELECT ROUND((:l_sal_bse),2) INTO :l_chr_salbse:i_chr_salbse
                       FROM DUAL;
              IS_ANY_ORA_ERROR

			fprintf(l_logfile,"Value of Client Value==|%s|\n",l_cl_code);
			fprintf(l_logfile,"Value of Instr_type == %s\n",l_instr_type);
			fprintf(l_logfile,"value of Deal Code ==|%s|\n",l_deal_cd);
			fprintf(l_logfile,"Value of cust_code ==|%s|\n",l_cust_code);
			fprintf(l_logfile,"Value of ident_no ==|%s|\n",l_ident_no);
			fprintf(l_logfile,"Value of Deal dt==|%s|\n",l_chr_dldt);
			fprintf(l_logfile,"Value of Repo Date==|%s|\n",l_chr_repdt);
			fprintf(l_logfile,"Value of l_eq_purval ==|%lf|\n",l_cmp_eqpur);
			fprintf(l_logfile,"Value of l_eq_salval==|%lf|\n",l_cmp_eqsal);
			fprintf(l_logfile,"Value of l_debts_purval==|%lf|\n",l_cmp_dbtpur);
			fprintf(l_logfile,"Value of l_debts_salval==|%lf|\n",l_cmp_dbtsal);
			fprintf(l_logfile,"Value of l_pur_bse ==|%lf|\n",l_chr_purbse);
			fprintf(l_logfile,"Value of l_sal_bse ==|%lf|\n",l_chr_salbse);
			fprintf(l_logfile,"Check l_r_type |%s|\n",l_r_type);
			printf("Check l_r_type |%s|\n",l_r_type);
			fflush(stdout);
			fprintf(l_logfile,"FOR NEW\n");

			EXEC SQL SELECT count(*) INTO :l_int_count FROM MF_REP_TAB WHERE TRN_ID = :l_ident_no and to_char(REPORT_DT,'DD/MM/YYYY')=substr(:l_chr_repdt,0,10);
			if ( l_int_count != 0)
			{
				fprintf(l_logfile,"Report genrated already\n");
				break;
			}

                EXEC SQL INSERT INTO MF_REP_TAB VALUES (:l_cust_code:i_cust_code,  
																:l_ident_no:i_ident_no,
																:l_chr_dldt:i_chr_dldt,
																:l_repo_dt:i_repo_dt,
																:l_r_type:i_r_type,
																:l_cmp_eqpur:i_cmp_eqpur,
																:l_cmp_eqsal:i_cmp_eqsal,
																:l_cmp_dbtpur:i_cmp_dbtpur,
																:l_cmp_dbtsal:i_cmp_dbtsal,
																:l_chr_purbse:i_chr_purbse,
																:l_chr_salbse:i_chr_salbse,
																:l_cln_master:i_cln_master);

			 fprintf(l_logfile,"Error Check for Inserting into MF_REP_TAB |%d|\n",sqlca.sqlcode);
			 printf("Error Check for Inserting into MF_REP_TAB |%d|\n",sqlca.sqlcode);
		 	 fflush(stdout);
      		 IS_ANY_ORA_ERROR

			 fprintf(l_ptr_hbrokers_handoff_file,"%s|%s|%s|%s|%s|%s|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf\n",l_ident_no,l_cust_code,l_cln_sebi_no,l_chr_dldt,l_repo_dt,l_r_type,l_cmp_eqpur,l_cmp_eqsal,l_cmp_dbtpur,l_cmp_dbtsal,l_pur_bse,l_sal_bse);

			memset(l_mf_rep_data_struct_h,NULL,sizeof(MF_REP_DATA_STRUCT_H));
			strcpy(l_mf_rep_data_struct_h->h_trns_id, l_ident_no);
			strcpy(l_mf_rep_data_struct_h->h_cust_code, l_cust_code);
			strcpy(l_mf_rep_data_struct_h->h_cln_sebi_no, l_cln_sebi_no);
			strcpy(l_mf_rep_data_struct_h->h_chr_dldt, l_chr_dldt);
			strcpy(l_mf_rep_data_struct_h->h_repo_dt, l_repo_dt);
			strcpy(l_mf_rep_data_struct_h->h_repo_type, l_r_type);
			l_mf_rep_data_struct_h->h_eq_pur  =  l_cmp_eqpur ;
			l_mf_rep_data_struct_h->h_eq_sal = l_cmp_eqsal ;
			l_mf_rep_data_struct_h->h_dbt_pur = l_cmp_dbtpur;
			l_mf_rep_data_struct_h->h_dbt_sal = l_cmp_dbtsal;
			l_mf_rep_data_struct_h->h_pur_bse = l_pur_bse;
			l_mf_rep_data_struct_h->h_sal_bse = l_sal_bse;
		
			if(MF_REPO_XLS( l_logfile,l_mf_rep_data_struct_h,l_debug_info_ptr) == APL_FAILURE)
				APL_GOBACK_FAIL


    }
    fprintf(l_logfile,"\nEnd of Report New Transaction \n\n");

	  EXEC SQL CLOSE mst_cursor;
      fprintf(l_logfile,"Error check : close cursor for New Trans. |%d|\n",sqlca.sqlcode);
	  printf("Error check : close cursor for New Trans.  |%d|\n",sqlca.sqlcode);
  	  fflush(stdout);
	  IS_ANY_ORA_ERROR

      fprintf(l_logfile,"Date Passed to Amend Records |%s|\n",l_chr_ret_date);
	  EXEC SQL	SELECT GETPREVDATEFN(:l_chr_ret_date,15) into :l_chr_amdprev_date FROM DUAL;
  	  IS_ANY_ORA_ERROR
	  fprintf(l_logfile,"Date  prior to 15 days is |%s|\n",l_chr_amdprev_date);
  	  printf("Date  prior to 15 days is |%s|\n",l_chr_amdprev_date);
 	  fflush(stdout);
	  
	  fprintf(l_logfile,"Declaring the amd_mstcursor_HB for Amended Transactions \n");
	  EXEC SQL SELECT TO_CHAR(TO_DATE(:p_chr_from_date,'DD/MM/YYYY'),'DD-MON-YYYY')
		  INTO :l_repo_dt:i_repo_dt  FROM DUAL;
	  IS_ANY_ORA_ERROR
			  
		EXEC SQL DECLARE amd_mstcursor CURSOR FOR
			SELECT DISTINCT V.M,V.S,REPO_DATE ,DEAL_DATE,DEAL_STAT FROM(
					  SELECT DISTINCT A.CLN_MASTER M,A.CLN_CODE CC,CLN_SEBI_REG_NO S
					  FROM MT_CLIENT A,MT_REGDETAILS B
					  WHERE A.CLN_MASTER =B.CLN_CODE AND A.STATUS = 'AA'  AND
					  CLN_SEBICTG = 'MF' AND 
					  CLN_TYPE='M' AND 
					  B.STATUS='AA') V,DL_DEAL C, MT_INSTRUMENT I 
					  WHERE C.CLIENT=V.CC AND C.DEAL_STAT NOT IN ('UU','DU') AND
					  C.INSTR_CODE = I.INSTR_CODE AND
					  I.INSTR_SUB_TYPE NOT IN ('PN','PT') AND
					  ((I.INSTR_TYPE IN ('BON','WTS') AND C.DL_CLASS = '1' ) OR (I.INSTR_TYPE = 'SHS' AND C.DL_CLASS IN ('1','56'))) AND
					  C.DOMESTIC_CPCLT NOT IN (SELECT DISTINCT MT_REG_RPT.PTY_CD 
					  FROM MT_REG_RPT WHERE MT_REG_RPT.BLK_IND ='PTY'  and MT_REG_RPT.STATUS = 'AA' 
					  and MT_REG_RPT.PTY_BLK_FLG='Y'and MT_REG_RPT.RPT_TYPE = 'MF') AND				
					  NOT(C.DL_CLASS = '1' AND C.DOMESTIC_CPCLT = 'INTERSCHEM') AND
					  I.status = 'AA' AND C.DOMESTIC_CPCLT IN (SELECT PTY_CODE FROM MT_PARTY WHERE PTY_TYPE = 'B' AND STATUS = 'AA') AND
					  ((SEBI_REPORTED='Y' AND REPO_DATE BETWEEN TO_DATE(:l_chr_amdprev_date||' 00:00:00','DD/MM/YYYY hh24:mi:ss') AND TO_DATE(:l_chr_ret_date||' 23:59:59','DD/MM/YYYY hh24:mi:ss')) 
					  OR ((SEBI_REPORTED='N' OR SEBI_REPORTED IS NULL) AND (DEAL_DATE BETWEEN TO_DATE(:l_chr_amdprev_date||' 00:00:00','DD/MM/YYYY hh24:mi:ss')  AND TO_DATE(:l_chr_ret_date||' 23:59:59','DD/MM/YYYY hh24:mi:ss')  )));

					  IS_ANY_ORA_ERROR

   EXEC SQL OPEN amd_mstcursor;
   fprintf(l_logfile,"Error check for Open cursor of AMEND |%d|\n",sqlca.sqlcode);
   printf("Error check for Opencursor of AMEND |%d|\n",sqlca.sqlcode);
   fflush(stdout);
   IS_ANY_ORA_ERROR
  
   fprintf(l_logfile,"\n\nStart of Report Amended Transaction \n");
  for(;;)
  {

   fprintf(l_logfile,"\nInside fetch of records the  amd_mstcursor_HB Records\n\n");

	EXEC SQL FETCH amd_mstcursor
		INTO :l_amd_clnt:i_amd_clnt,
			  :l_cln_amdsebi_no:i_cln_amdsebi_no,
			  :l_amd_repo_date:i_amd_repo_date,
			  :l_amd_deal_date:i_amd_deal_date,
			  :l_amd_deal_stat:i_amd_deal_stat;
	fprintf(l_logfile,"Error check for Fetch cursor of AMEND for  Master Record set|%d|\n",sqlca.sqlcode);
	printf("Error check for Fetch cursor of AMEND for  Master Record set |%d|\n",sqlca.sqlcode);
	fflush(stdout);

	IS_ANY_ORA_ERROR

	if(sqlca.sqlcode==1403)
			break;
     fprintf(l_logfile,"Fetch l_amd_clnt in Amen Trans|%s|\n",l_amd_clnt);
     fprintf(l_logfile,"Fetch l_cln_amdsebi_no in Amen Trans|%s|\n",l_cln_amdsebi_no);
     fprintf(l_logfile,"Fetch report Date is for Amen Trans|%s|\n",l_amd_repo_date);
     fprintf(l_logfile,"Fetch Deal Date is for Amen Trans|%s|\n",l_amd_deal_date);
	 fprintf(l_logfile,"check for Fetch cursor of AMEND for DEAL Status|%s|\n",l_amd_deal_stat);

		l_amd_count=0;
		l_amd_hiscount=0;
		l_mf_count=0;
		l_deal_count=0;
		l_pcal_eqpur=0.0;
		l_pcal_debtpur=0.0;
		l_pcal_eqsal=0.0;
		l_pcal_debtsal=0.0;
		strcpy(l_mf_trn_id,APL_NULL_STRING);
		l_mf_eq_pur=0.0;
		l_mf_eq_sal=0.0;
		l_mf_dbt_pur=0.0;
		l_mf_dbt_sal=0.0;
		strcpy(l_mf_r_type,"N");
		strcpy(l_mf_clnt,APL_NULL_STRING);
		strcpy(l_mf_trdt,APL_NULL_STRING);
		l_chr_amdeqpur = 0.0;
		l_chr_amdeqsal = 0.0;
		l_chr_amddbtpur = 0.0;
		l_chr_amddbtsal = 0.0;
			 

	  EXEC SQL SELECT count(*),TRN_ID,REPORT_DT,nvl(TOT_PUR_EQ,0.0),nvl(TOT_SAL_EQ,0.0),nvl(TOT_PUR_DEBT,0.0),nvl(TOT_SAL_DEBT,0.0),CLIENT,TRN_DATE,trim(R_TYPE)
		  INTO :l_mf_count,:l_mf_trn_id:i_mf_trn_id,
				 :l_mf_report_dt:i_mf_report_dt,
				 :l_mf_eq_pur:i_mf_eq_pur,
				 :l_mf_eq_sal:i_mf_eq_sal,
				 :l_mf_dbt_pur:i_mf_dbt_pur,
				 :l_mf_dbt_sal:i_mf_dbt_sal,
				 :l_mf_clnt:i_mf_clnt,
				 :l_mf_trdt:i_mf_trdt,
				 :l_mf_r_type:i_mf_r_type
			FROM MF_REP_TAB
			WHERE CLIENT =:l_amd_clnt AND
			TO_CHAR(TO_DATE(TRN_DATE),'DD/MM/YYYY') =:l_amd_deal_date
			GROUP BY TRN_ID,REPORT_DT,TOT_PUR_EQ,TOT_SAL_EQ,TOT_PUR_DEBT,TOT_SAL_DEBT,CLIENT,TRN_DATE,R_TYPE;

	  fprintf(l_logfile,"Selection from mf_rep_tab for AMEND==|%d|\n",sqlca.sqlcode);
	  fprintf(l_logfile,"Count is of MF_REP_TAB for AMEND |%d|\n",l_mf_count);
	  fprintf(l_logfile,"****************************Rahul  AMEND Report Date |%s|\n",l_mf_report_dt);

		printf("Selection from mf_rep_tab for AMEND==|%d|\n",sqlca.sqlcode);
		fflush(stdout);

	if(sqlca.sqlcode == 1403)
	{
		printf("KS -- Previous report not found client[%s].. skipping it\n",l_amd_clnt);
		fprintf(l_logfile,"KS -- Previous report not found client[%s].. skipping it\n",l_amd_clnt);
		continue;
	}
	IS_ANY_ORA_ERROR


	  EXEC SQL SELECT TO_CHAR(TO_DATE(:l_mf_trdt,'DD/MM/YYYY'),'DD-MON-YYYY')
	  INTO :l_chr_adldt:i_chr_adldt
	  FROM DUAL;
	  l_pcal_eqpur=0.0;
	  l_pcal_debtpur=0.0;
	  l_pcal_eqsal=0.0;
	  l_pcal_debtsal=0.0;
		  
		fprintf(l_logfile,"************Before Amend Query of Deal table|l_amd_deal_date|%s|\n",l_amd_deal_date);
		printf("************Before Amend Query of Deal table|l_amd_deal_date|%s|\n",l_amd_deal_date);
		fflush(stdout);
		fprintf(l_logfile,"************Before Amend Query of Deal table|l_amd_clnt|%s|\n",l_amd_clnt);
					
					EXEC SQL SELECT 'A',COUNT(*)cnt,NVL(ROUND((SUM(TOT_PUR_EQ)/10000000),2),0)TPS,
											NVL(ROUND((SUM(TOT_PUR_DEBT)/10000000),2),0) TPD,
											 NVL(ROUND((SUM(TOT_SAL_EQ)/10000000),2),0) TSS,NVL(ROUND((SUM(TOT_SAL_DEBT)/10000000),2),0) TSD 
								INTO :l_trn_ind:i_trn_ind,:l_amd_count,:l_pcal_eqpur:i_pcal_eqpur,:l_pcal_debtpur:i_pcal_debtpur,:l_pcal_eqsal:i_pcal_eqsal,
										:l_pcal_debtsal:i_pcal_debtsal 
								FROM ( SELECT CLIENT,
											DECODE(DEAL_CD,'4',DECODE(INSTR_TYPE,'SHS',SUM(A.AMOUNT)),
														   '2',DECODE(INSTR_TYPE,'SHS',SUM(A.AMOUNT))
											)TOT_PUR_EQ , 
											DECODE(DEAL_CD,'4',DECODE(INSTR_TYPE,'SHS','',SUM(A.AMOUNT)),
														   '2',DECODE(INSTR_TYPE,'SHS','',SUM(A.AMOUNT))
											)TOT_PUR_DEBT , 
											DECODE(DEAL_CD,'3',DECODE(INSTR_TYPE,'SHS',SUM(A.AMOUNT),''),
														   '1',DECODE(INSTR_TYPE,'SHS',SUM(A.AMOUNT))     
											)TOT_SAL_EQ , 
											DECODE(DEAL_CD,'3',DECODE(INSTR_TYPE,'SHS','',SUM(A.AMOUNT)),
														   '1',DECODE(INSTR_TYPE,'SHS','',SUM(A.AMOUNT))
											)TOT_SAL_DEBT
											FROM DL_DEAL A, MT_INSTRUMENT B
											WHERE A.INSTR_CODE=B.INSTR_CODE AND 
											A.CLIENT IN (SELECT CLN_CODE FROM MT_CLIENT WHERE CLN_MASTER=:l_amd_clnt
											AND STATUS = 'AA') AND
											DEAL_STAT NOT IN ('UU','DU') AND 
											((B.INSTR_TYPE IN ('BON','WTS') AND DL_CLASS = '1' ) OR (B.INSTR_TYPE = 'SHS' AND DL_CLASS IN ('1','56'))) AND
											NOT(A.DL_CLASS = '1' AND A.DOMESTIC_CPCLT = 'INTERSCHEM') AND 
											B.status = 'AA'
											AND A.DOMESTIC_CPCLT IN (SELECT PTY_CODE FROM MT_PARTY WHERE PTY_TYPE = 'B' AND STATUS = 'AA') AND
											B.INSTR_SUB_TYPE NOT IN (SELECT DISTINCT MT_REG_RPT.INST_SUB_TYPE 
											FROM MT_REG_RPT WHERE MT_REG_RPT.BLK_IND ='INS' and MT_REG_RPT.STATUS='AA' and 
											MT_REG_RPT.INST_BLK_FLG='Y'and MT_REG_RPT.RPT_TYPE = 'MF') AND
											A.DOMESTIC_CPCLT NOT IN (SELECT DISTINCT MT_REG_RPT.PTY_CD 
											FROM MT_REG_RPT WHERE MT_REG_RPT.BLK_IND ='PTY'  and MT_REG_RPT.STATUS = 'AA' 
											and MT_REG_RPT.PTY_BLK_FLG='Y'and MT_REG_RPT.RPT_TYPE = 'MF') AND				
											((A.SEBI_REPORTED='Y' AND TO_CHAR(A.REPO_DATE,'DD/MM/YYYY')=:l_amd_repo_date) OR
											((A.SEBI_REPORTED='N' OR A.SEBI_REPORTED IS NULL) 
											AND A.DEAL_DATE BETWEEN TO_DATE(:l_amd_deal_date||' 00:00:00','DD/MM/YYYY HH24:MI:SS') AND TO_DATE(:l_amd_deal_date||' 23:59:59','DD/MM/YYYY HH24:MI:SS'))) 
											AND INSTR_SUB_TYPE NOT IN ('PN','PT')
											GROUP BY DEAL_CD,INSTR_TYPE,CLIENT,A.AMOUNT);

			fprintf(l_logfile,"***************Value sqlerror check for DEAL==%d\n",sqlca.sqlcode);
			printf("***************Value sqlerror check for DEAL==%d\n",sqlca.sqlcode);
			fprintf(l_logfile,"No of Amended Transaction going to report |%d|\n",sqlca.sqlerrd[2]);
		 	fflush(stdout);
			IS_ANY_ORA_ERROR

        	 fprintf(l_logfile,"************Before Amend Query of Deal table|l_pcal_eqsal|%lf|\n",l_pcal_eqsal);
			         	 printf("************Before Amend Query of Deal table|l_pcal_eqsal|%lf|\n",l_pcal_eqsal);
		 	fflush(stdout);
			 fprintf(l_logfile,"COUNT FOR AMEND IS |%d|\n",l_amd_count);
	         if(l_amd_count == 0)
			 {
					continue;
			 }
			 else
	    	 {
						fprintf(l_logfile,"Value Of PurEQ for AMEND |%lf|\n",l_pcal_eqpur);
						fprintf(l_logfile,"Value Of PurDBT for AMEND |%lf|\n",l_pcal_debtpur);
						fprintf(l_logfile,"Value Of SalEQ for AMEND |%lf|\n",l_pcal_eqsal);
						fprintf(l_logfile,"Value Of SalDBT for AMEND |%lf|\n",l_pcal_debtsal);

						if (( APL_DOUBLE_EQUAL(l_pcal_eqpur,l_mf_eq_pur)) && ( APL_DOUBLE_EQUAL(l_pcal_eqsal,l_mf_eq_sal)) && (APL_DOUBLE_EQUAL(l_pcal_debtpur,l_mf_dbt_pur)) && (APL_DOUBLE_EQUAL(l_pcal_debtsal,l_mf_dbt_sal)))
						{
							fprintf(l_logfile,"Inside If Part for Delete Amend");
							printf("Inside If Part for Delete Amend");
		 					fflush(stdout);
							fprintf(l_logfile,"Record is not Amended for Master Client |%s|",l_amd_clnt);
						}
						else
						{
								fprintf(l_logfile,"Inside else Part for Delete Amend");
								printf("Inside else Part for Delete Amend");								
								fflush(stdout);
								strcpy(l_r_type,"A");
							  
								EXEC SQL UPDATE MF_REP_TAB SET
								TOT_PUR_EQ=:l_pcal_eqpur:i_pcal_eqpur,
								TOT_SAL_EQ=:l_pcal_eqsal:i_pcal_eqsal,
								TOT_PUR_DEBT=:l_pcal_debtpur:i_pcal_debtpur,
								TOT_SAL_DEBT=:l_pcal_debtsal:i_pcal_debtsal
									WHERE CLIENT = :l_amd_clnt AND
									TO_CHAR(TO_DATE(TRN_DATE),'DD/MM/YYYY') =:l_amd_deal_date;
								IS_ANY_ORA_ERROR
									printf("transaction id is |%s|\n",l_mf_trn_id);
									printf("deal date  id is |%s|\n",l_chr_adldt);
									fprintf(l_logfile,"\nNo of Transaction Updated in MF_REP_TAB going to report |%d|\n",sqlca.sqlerrd[2]);
								strcpy(l_mf_tmp_reportdt,l_mf_report_dt);
								if(strcmp(l_mf_tmp_reportdt, APL_NULL_STRING) != 0)
									strcat(l_mf_tmp_reportdt,APL_NULL_TIME);
									
								printf("REPORT DATE FOR BACK DATE NEW IS |%s|\n",l_mf_tmp_reportdt);

								EXEC SQL UPDATE DL_DEAL SET SEBI_REPORTED = 'Y',
									REPO_DATE =:l_mf_tmp_reportdt:i_mf_tmp_reportdt
									WHERE CLIENT IN (SELECT CLN_CODE FROM MT_CLIENT WHERE CLN_MASTER=:l_amd_clnt)and
									INSTR_CODE IN (SELECT INSTR_CODE FROM MT_INSTRUMENT WHERE
									((INSTR_TYPE IN ('BON','WTS') AND DL_CLASS = '1' ) OR (INSTR_TYPE = 'SHS' AND DL_CLASS IN ('1','56')))  AND
													INSTR_SUB_TYPE NOT IN (SELECT DISTINCT MT_REG_RPT.INST_SUB_TYPE FROM MT_REG_RPT WHERE 
													MT_REG_RPT.BLK_IND ='INS' and MT_REG_RPT.STATUS='AA' and MT_REG_RPT.INST_BLK_FLG='Y'
													and MT_REG_RPT.RPT_TYPE = 'MF')
													AND INSTR_SUB_TYPE NOT IN ('PN','PT')
													AND status = 'AA') AND
										  DEAL_STAT NOT IN ('UU','DU') AND
										  (SEBI_REPORTED IS NULL OR SEBI_REPORTED = 'N') AND
										  NOT(DL_CLASS = '1' AND DOMESTIC_CPCLT = 'INTERSCHEM') AND
										DOMESTIC_CPCLT IN (SELECT PTY_CODE FROM MT_PARTY WHERE PTY_TYPE = 'B' AND STATUS = 'AA') AND
                 						  DOMESTIC_CPCLT NOT IN (SELECT DISTINCT MT_REG_RPT.PTY_CD 
											FROM MT_REG_RPT WHERE MT_REG_RPT.BLK_IND ='PTY'  and MT_REG_RPT.STATUS = 'AA' 
											and MT_REG_RPT.PTY_BLK_FLG='Y'and MT_REG_RPT.RPT_TYPE = 'MF') AND				
									     DEAL_DATE BETWEEN TO_DATE(:l_amd_deal_date||' 00:00:00','DD/MM/YYYY HH24:MI:SS') AND TO_DATE(:l_amd_deal_date||' 23:59:59','DD/MM/YYYY HH24:MI:SS');
   							   IS_ANY_ORA_ERROR
						fprintf(l_logfile,"No of Amended Transaction going to report |%d|\n",sqlca.sqlerrd[2]);
							
								fprintf(l_ptr_hbrokers_handoff_file,"%s|%s|%s|%s|%s|%s|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf\n",l_mf_trn_id,l_cust_code,l_cln_amdsebi_no,l_chr_adldt,l_repo_dt,l_r_type,l_pcal_eqpur,l_pcal_eqsal,l_pcal_debtpur,l_pcal_debtsal,l_pur_bse,l_sal_bse);
						
						memset(l_mf_rep_data_struct_h,NULL,sizeof(MF_REP_DATA_STRUCT_H));
				
						strcpy(l_mf_rep_data_struct_h->h_trns_id,l_mf_trn_id);
						strcpy(l_mf_rep_data_struct_h->h_cust_code,l_cust_code);
						strcpy(l_mf_rep_data_struct_h->h_cln_sebi_no,l_cln_amdsebi_no);
						strcpy(l_mf_rep_data_struct_h->h_chr_dldt,l_chr_adldt);
						strcpy(l_mf_rep_data_struct_h->h_repo_dt,l_repo_dt);
						strcpy(l_mf_rep_data_struct_h->h_repo_type,l_r_type);
						l_mf_rep_data_struct_h->h_eq_pur  =  l_pcal_eqpur ;
						l_mf_rep_data_struct_h->h_eq_sal = l_pcal_eqsal ;
						l_mf_rep_data_struct_h->h_dbt_pur = l_pcal_debtpur;
						l_mf_rep_data_struct_h->h_dbt_sal = l_pcal_debtsal;
						l_mf_rep_data_struct_h->h_pur_bse = l_pur_bse;
						l_mf_rep_data_struct_h->h_sal_bse = l_sal_bse;

						if(MF_REPO_XLS( l_logfile,l_mf_rep_data_struct_h,l_debug_info_ptr) == APL_FAILURE)
							APL_GOBACK_FAIL


							}
						
					}

	 }
   fprintf(l_logfile,"\nEnd of Report Amended Transaction \n\n");

   EXEC SQL CLOSE amd_mstcursor;
	printf("End of amd_mstcursor Cursor\n\n");
		 	fflush(stdout);
	fprintf(l_logfile,"End of amd_mstcursor cursor\n\n");

   IS_ANY_ORA_ERROR

		if(APL_SUCCESS != Footer("*****"))
                {
                          APL_GOBACK_FAIL
                }
		fprintf(l_logfile,"\n Entering XLS_End_Page() \n");
		printf("\n Entering XLS_End_Page() \n");
		 	fflush(stdout);
		if(APL_SUCCESS != XLS_End_Page())
		{
			  APL_GOBACK_FAIL
		}
		sprintf(chr_l_buf,"\n Leaving  XLS_End_Page() successfully \n");
		CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL); 


	  
	RETURN_SUCCESS :

		#ifdef SYS_DEBUG
			printf("Leaving Function Daily_Rep_ClntInst_HDFC with success\n");
		 	fflush(stdout);
		#endif
		fclose(l_ptr_hbrokers_handoff_file);
		free(l_intl_rept_struct_ha);

		free(l_intl_rept_struct_ha_xls);
		fclose(l_ptr_ini_file);
	fprintf(l_logfile,"Leaving Function Daily_Rep_ClntInst_HDFC with Success");
		return(APL_SUCCESS);

	RETURN_FAILURE :
		#ifdef SYS_DEBUG
		printf("Leaving Function Daily_Rep_ClntInst_HDFC with errors\n");
		 	fflush(stdout);
		#endif
		fclose(l_ptr_hbrokers_handoff_file);
		free(l_intl_rept_struct_ha);
	
		free(l_intl_rept_struct_ha_xls);

		fclose(l_ptr_ini_file);
		fprintf(l_logfile,"Leaving Function Daily_FRep_ClntInst with Failure");
		return(APL_FAILURE);

}


int Sum_Rep_ClntInst(char *p_rep_name,char *p_chr_daily_dt,char **argv,FILE *l_logfile,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	
	char	chr_l_sysdate[APL_DATE_LEN]										=	APL_NULL_STRING;
	char  chr_l_sr_no[4]                                           =  APL_NULL_STRING;
	char	chr_l_curr_datetime[APL_DATE_LEN]								=	APL_NULL_STRING;
	char  chr_l_h_aresponse_ca_id[CORP_ID_LEN]						   =	APL_NULL_STRING;
	char  chr_l_hbrokers_handoff_file_name[FILENAME_LEN_A]   = APL_NULL_STRING;
	char  chr_l_handoff_dir[FILEPATH_LEN] = APL_NULL_STRING;
	char  chr_l_inifile[FILENAME_LEN_A]   = APL_NULL_STRING;
	char  chr_l_buf[BUFFER_LEN]           =  APL_NULL_STRING;
	
  char l_cust_code[4] = APL_NULL_STRING;
  char l_cnt_date[20] = APL_NULL_STRING;
  short i_cnt_date = 0; 
  short i_cust_code = 0;
  
  char l_sys_date[12] = APL_NULL_STRING;
  short i_sys_date = 0;
  char l_instr_type[4] = APL_NULL_STRING;
  char l_instr_type_sec[4] = APL_NULL_STRING;

  double  l_pur_count = 0.0;
  short i_pur_count = 0;
  double  l_sal_count= 0.0;
  short  i_sal_count= 0;
  double l_bonus_count = 0.0;
  short i_bonus_count = 0;
  double l_pur_value = 0.0;
  short i_pur_value = 0;
  double l_sal_value = 0.0;
  short i_sal_value = 0;
  double l_del_value = 0.0;
  short i_del_value = 0;
  double l_amd_value = 0.0;
  short i_amd_value = 0;
  double  l_sum_amd = 0.0;
  short i_sum_amd = 0;
    int l_pur_trns_cnt = 0;
    int l_sal_trns_cnt = 0;
    int l_bon_trns_cnt = 0;
    int l_all_count = 0;
    int l_del_count = 0; 
    int l_deal_count  = 0;
    int l_amd_count  = 0;
	
	FILE  *l_ptr_ini_file = NULL;
	FILE  *l_ptr_hbrokers_handoff_file  =  NULL;
	


	INTL_REPT_STRUCT_H            *l_intl_rept_struct_ha  =NULL;

	memset(chr_l_sr_no,'\0',4);
	memset(chr_l_handoff_dir,NULL,sizeof(chr_l_handoff_dir));

	l_intl_rept_struct_ha   = (INTL_REPT_STRUCT_H *)calloc(1, sizeof(INTL_REPT_STRUCT_H));
	APL_MALLOC_FAIL(l_intl_rept_struct_ha);
	memset(chr_l_inifile,NULL,sizeof(chr_l_inifile));

	CO_ProcMonitor(l_logfile,"Entered Into Sum_FRep_ClntInst",NULL,NULL);

	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

    sprintf(chr_l_buf," Report Name is |%s|\n",p_rep_name);
	 CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL); 

    if ((strcmp(p_rep_name,"DTS") == 0))
      {
       strcpy(l_instr_type,"SHS");
       strcpy(l_instr_type_sec,APL_NULL_STRING);
    }
    else
    if ((strcmp(p_rep_name,"DDS") == 0))
    {
       strcpy(l_instr_type,"BON");
       strcpy(l_instr_type_sec,"FMT");
    }

	if ((l_ptr_ini_file = fopen(chr_l_inifile,"r")) == NULL)
		  return(APL_FAILURE);
	if (CO_ReadToken(l_ptr_ini_file,"INTL_REP_PATH_M",chr_l_handoff_dir,l_debug_info_ptr) != APL_SUCCESS)
		  return(APL_FAILURE);

	EXEC SQL SELECT to_char(SYS_DATE,'DDMMYY') INTO :chr_l_sysdate FROM PRO_SYS_DATE;
	IS_ANY_ORA_ERROR

	printf("After selecting the sysdate format ==|%s|\n",chr_l_sysdate);

  	strcpy(chr_l_hbrokers_handoff_file_name,chr_l_handoff_dir);

   if (strcmp(p_rep_name,"DTS") ==0)
   {  
   strcat(chr_l_hbrokers_handoff_file_name,"DS");
   }
   else
   if (strcmp(p_rep_name,"DDS") ==0)
   {
   strcat(chr_l_hbrokers_handoff_file_name,"DDS");
   }
   strcat(chr_l_hbrokers_handoff_file_name,chr_l_sysdate);
   strcat(chr_l_hbrokers_handoff_file_name,".txt");
   if ((l_ptr_hbrokers_handoff_file = fopen(chr_l_hbrokers_handoff_file_name,"w")) == NULL)
      return(APL_FAILURE);

   memset(l_intl_rept_struct_ha,NULL,sizeof(INTL_REPT_STRUCT_H));


 	strcpy(l_intl_rept_struct_ha->report_name, chr_l_hbrokers_handoff_file_name+strlen(chr_l_handoff_dir));
   strcpy(l_intl_rept_struct_ha->report_desc, APL_HOFF_FILE_DESC);
   strcpy(l_intl_rept_struct_ha->report_date, argv[2]);
   l_intl_rept_struct_ha->report_width = 100;
   strcpy(l_intl_rept_struct_ha->task_desc, p_intl_envdatastruct_h->processtion);

   strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
   strcpy(l_intl_rept_struct_ha->usr, p_intl_envdatastruct_h->usr);

   strcat(p_chr_daily_dt,APL_NULL_TIME);

	printf("Val after null time==|%s|\n",p_chr_daily_dt);

   if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))
   {
       APL_GOBACK_FAIL
   }
	
	if (APL_FAILURE == CO_RtvSysDtTime(chr_l_curr_datetime,l_debug_info_ptr))
   {
      APL_GOBACK_FAIL
   }

    EXEC SQL SELECT CUST_CODE  INTO :l_cust_code:i_cust_code
		              FROM MT_COMMON_SYS_PARAMS;

    sprintf(chr_l_buf,"Cust Code of the Records|%s|\n",l_cust_code);
	 CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);

	IS_ANY_ORA_ERROR

    EXEC SQL SELECT COUNT(*) INTO :l_pur_trns_cnt
		              FROM DL_BCN A,MT_INSTRUMENT B,MT_CLIENT C
						  WHERE DEAL_CD IN ('2','4') AND
						  A.INSTR_CD = B.INSTR_CODE AND
						  A.CLIENT_CD = C.CLN_CODE AND
						  B.INSTR_TYPE IN (:l_instr_type,:l_instr_type_sec) AND
						  C.CLN_TYPE = 'M' AND
						  REPO_DATE =:p_chr_daily_dt;

	IS_ANY_ORA_ERROR

   sprintf(chr_l_buf,"No Of Purchase Transactions |%d|\n",l_pur_trns_cnt);
	CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);

    EXEC SQL SELECT COUNT(*) INTO :l_sal_trns_cnt
		              FROM DL_BCN A,MT_INSTRUMENT B,MT_CLIENT C
						  WHERE DEAL_CD IN ('1','3') AND
						  A.CLIENT_CD = C.CLN_CODE AND
						  A.INSTR_CD = B.INSTR_CODE AND
                    B.INSTR_TYPE IN (:l_instr_type,:l_instr_type_sec) AND
						  C.CLN_TYPE = 'M' AND
						  REPO_DATE =:p_chr_daily_dt;

    IS_ANY_ORA_ERROR

    sprintf(chr_l_buf,"No Of Sale Transactions |%d|\n",l_sal_trns_cnt);
	 CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);

		 
    EXEC SQL SELECT COUNT(*) INTO :l_bon_trns_cnt FROM 
		             	DL_DEAL A,MT_INSTRUMENT B,MT_CLIENT C
			           WHERE DL_CLASS IN ('17','18','19','21')AND
						  A.INSTR_CODE = B.INSTR_CODE AND
						  A.CLIENT = C.CLN_CODE AND
						  B.INSTR_TYPE IN (:l_instr_type,:l_instr_type_sec) AND
						  C.CLN_TYPE = 'M' AND
						  REPO_DATE =:p_chr_daily_dt;
	 IS_ANY_ORA_ERROR

     sprintf(chr_l_buf,"No Of Bonus Transactions |%d|\n",l_bon_trns_cnt);
	  CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL); 


    l_all_count =  l_pur_trns_cnt + l_sal_trns_cnt + l_bon_trns_cnt;

	 IS_ANY_ORA_ERROR

    sprintf(chr_l_buf,"No Of All Type Transactions |%d|\n",l_all_count);
	 CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);


	 EXEC SQL SELECT ROUND((SUM(QTY)),2) INTO :l_pur_count:i_pur_count 
		              FROM DL_BCN A,MT_INSTRUMENT B,MT_CLIENT C
			           WHERE DEAL_CD IN ('2','4') AND
                    A.INSTR_CD = B.INSTR_CODE AND
						  A.CLIENT_CD = C.CLN_CODE AND
						  B.INSTR_TYPE IN (:l_instr_type,:l_instr_type_sec) AND
						  C.CLN_TYPE = 'M' AND
						  REPO_DATE =:p_chr_daily_dt;

	 IS_ANY_ORA_ERROR

    sprintf(chr_l_buf,"No Of sum Of Purchase  Transactions |%lf|\n",l_pur_count);
	 CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);

    EXEC SQL SELECT ROUND((SUM(QTY)),2) INTO :l_sal_count:i_sal_count 
			           FROM DL_BCN A,MT_INSTRUMENT B,MT_CLIENT C
			           WHERE DEAL_CD IN ('1','3')AND
						  A.INSTR_CD = B.INSTR_CODE AND
						  A.CLIENT_CD = C.CLN_CODE AND
						  B.INSTR_TYPE IN (:l_instr_type,:l_instr_type_sec) AND
						  C.CLN_TYPE = 'M' AND
						  REPO_DATE =:p_chr_daily_dt;

	 IS_ANY_ORA_ERROR

    sprintf(chr_l_buf,"No Of sum Of sale  Transactions |%lf|\n",l_sal_count);
	 CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);

    EXEC SQL SELECT ROUND((SUM(QTY)),2) INTO :l_bonus_count:i_bonus_count
		              FROM DL_DEAL A,MT_INSTRUMENT B,MT_CLIENT C
			           WHERE DL_CLASS IN ('17','18','19','21') AND
						  A.INSTR_CODE = B.INSTR_CODE AND
						  A.CLIENT = C.CLN_CODE AND
                    B.INSTR_TYPE IN (:l_instr_type,:l_instr_type_sec) AND 
						  C.CLN_TYPE = 'M' AND
						  REPO_DATE =:p_chr_daily_dt;
	IS_ANY_ORA_ERROR
   
   sprintf(chr_l_buf,"No Of sum Of Bonus  Transactions |%lf|\n",l_bonus_count);
   CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);


   EXEC SQL SELECT TO_CHAR(TO_DATE(:p_chr_daily_dt),'DD/MM/YYYY') INTO :l_cnt_date:i_cnt_date
            FROM DUAL; 

         EXEC SQL SELECT ROUND((SUM(A.QTY*B.CLOSING_PR)),2) INTO :l_pur_value:i_pur_value
                  FROM DL_BCN A,MT_DLYMKTPRC B,MT_INSTRUMENT C,MT_CLIENT D
                  WHERE A.DEAL_CD IN ('2','4') AND
                  A.REPO_DATE = :p_chr_daily_dt AND
                  A.INSTR_CD = B.INSTR_CODE AND	  
                  B.INSTR_CODE = C.INSTR_CODE AND
						A.CLIENT_CD = D.CLN_CODE AND
                  C.INSTR_TYPE IN (:l_instr_type,:l_instr_type_sec) AND
						D.CLN_TYPE = 'M' AND
		            B.PRICE_DATE = (SELECT MAX(PRICE_DATE) FROM MT_DLYMKTPRC WHERE PRICE_DATE <= A.REPO_DATE);

	IS_ANY_ORA_ERROR

   sprintf(chr_l_buf,"No Of Value Of Purchase  Transactions |%lf|\n",l_pur_value);
	    CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);

      printf("Value of purchase Sum ==|%lf|\n",l_pur_value);

		printf("Value after trunc==|%s|\n",p_chr_daily_dt);

       EXEC SQL SELECT ROUND((SUM(A.QTY*B.CLOSING_PR)),2) INTO :l_sal_value:i_sal_value 
			          FROM DL_BCN A,MT_DLYMKTPRC B,MT_INSTRUMENT C,MT_CLIENT D
	                WHERE A.DEAL_CD IN ('1','3') AND
                         A.REPO_DATE = :p_chr_daily_dt AND
								 A.INSTR_CD = B.INSTR_CODE AND
								 B.INSTR_CODE = C.INSTR_CODE AND
								 A.CLIENT_CD = D.CLN_CODE AND
								 D.CLN_TYPE = 'M' AND
                         C.INSTR_TYPE IN (:l_instr_type,:l_instr_type_sec) AND
                         B.PRICE_DATE = (SELECT MAX(PRICE_DATE) FROM MT_DLYMKTPRC WHERE PRICE_DATE <=A.REPO_DATE);		 
        
	IS_ANY_ORA_ERROR

       sprintf(chr_l_buf,"No Of Value Of Sale  Transactions |%lf|\n",l_sal_value);
       CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);	


      printf("Value of Sale  Sum ==|%lf|\n",l_sal_value);
           EXEC SQL SELECT COUNT(*) INTO :l_del_count 
				         FROM DL_HISDEAL A,MT_INSTRUMENT B,MT_CLIENT C
							WHERE INSTRUMENT_DT =:p_chr_daily_dt AND 
							DEAL_STAT = 'DD' AND
							A.INSTR_CODE = B.INSTR_CODE AND
							A.CLIENT = C.CLN_CODE AND
							C.CLN_CODE = 'M' AND
                     B.INSTR_TYPE IN (:l_instr_type,:l_instr_type_sec);

         IS_ANY_ORA_ERROR


       sprintf(chr_l_buf,"No Of Count of Delete Transactions |%d|\n",l_del_count);
		 CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);	

	  	printf("Value Count of DD records==|%d|\n",l_del_count);

            EXEC SQL SELECT ROUND((SUM(A.QTY*B.CLOSING_PR)),2) INTO :l_del_value:i_del_value
				         FROM DL_HISDEAL A,MT_DLYMKTPRC B,MT_INSTRUMENT C,MT_CLIENT D
						   WHERE A.DEAL_STAT = 'DD' AND
						         A.CLOSING_DATE = :p_chr_daily_dt AND
		                     B.PRICE_DATE = (SELECT MAX(PRICE_DATE) FROM MT_DLYMKTPRC WHERE PRICE_DATE <=A.CLOSING_DATE) AND
									A.INSTR_CODE = B.INSTR_CODE AND
									B.INSTR_CODE = C.INSTR_CODE AND
									A.CLIENT = D.CLN_CODE AND
									D.CLN_TYPE = 'M' AND
                           C.INSTR_TYPE IN (:l_instr_type,:l_instr_type_sec);

	IS_ANY_ORA_ERROR

   sprintf(chr_l_buf,"Value Of Delete Transactions |%lf|\n",l_del_value);
   CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);	

		printf("Value of DD count of sum ==|%lf|\n",l_del_value);

              EXEC SQL  select COUNT(*) INTO :l_deal_count
                FROM DL_DEAL A,MT_INSTRUMENT B,MT_CLIENT C
                WHERE REPO_DATE =:p_chr_daily_dt AND
                      A.INSTR_CODE = B.INSTR_CODE AND
							 A.CLIENT = C.CLN_CODE AND
							 C.CLN_TYPE = 'M' AND
                      B.INSTR_TYPE IN (:l_instr_type,:l_instr_type_sec) AND
                      A.STATUS = 'DU';		  

	IS_ANY_ORA_ERROR

    sprintf(chr_l_buf,"Value Of DU Transactions |%d|\n",l_deal_count);
    CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);	


		printf("Value of DU count ==|%d|\n",l_deal_count);

              EXEC SQL SELECT TO_CHAR(SYS_DATE,'DD-MON-YYYY') INTO :l_sys_date:i_sys_date
                FROM PRO_SYS_DATE;

	IS_ANY_ORA_ERROR

    printf("Value of Date format ==|%s|\n",l_sys_date);
	
          EXEC SQL SELECT COUNT(*) INTO :l_amd_count 
	           FROM DL_BCN A,MT_INSTRUMENT B,MT_CLIENT C
				  WHERE AMEND_DT =:p_chr_daily_dt AND
				   A.INSTR_CD = B.INSTR_CODE AND
					A.CLIENT_CD = C.CLN_CODE AND
					C.CLN_TYPE = 'M' AND
               B.INSTR_TYPE IN (:l_instr_type,:l_instr_type_sec);

	IS_ANY_ORA_ERROR

       sprintf(chr_l_buf,"Count Of Amend Dt Transactions |%d|\n",l_amd_count);
       CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);	

      EXEC SQL SELECT ROUND((SUM(QTY)),2) INTO :l_sum_amd:i_sum_amd
	            FROM DL_BCN A,MT_INSTRUMENT B,MT_CLIENT C
				   WHERE AMEND_DT =:p_chr_daily_dt AND
                A.INSTR_CD = B.INSTR_CODE AND
					 A.CLIENT_CD = C.CLN_CODE AND
					 C.CLN_TYPE = 'M' AND
                B.INSTR_TYPE IN (:l_instr_type,:l_instr_type_sec);

	IS_ANY_ORA_ERROR

          sprintf(chr_l_buf,"Sum Of Amend Dt Transactions |%lf|\n",l_sum_amd);
          CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);	
   

            EXEC SQL SELECT ROUND((SUM(A.QTY*B.CLOSING_PR)),2) INTO :l_amd_value:i_amd_value
				         FROM DL_BCN A,MT_DLYMKTPRC B,MT_INSTRUMENT C,MT_CLIENT D
						         WHERE A.AMEND_DT = :p_chr_daily_dt AND
		                     B.PRICE_DATE = (SELECT MAX(PRICE_DATE) FROM MT_DLYMKTPRC WHERE PRICE_DATE <=A.SETT_DT)  AND A.INSTR_CD = B.INSTR_CODE AND B.INSTR_CODE = C.INSTR_CODE AND A.CLIENT_CD = D.CLN_CODE AND C.INSTR_TYPE IN (:l_instr_type,:l_instr_type_sec) AND D.CLN_TYPE = 'M';

		      IS_ANY_ORA_ERROR

         
        CO_ProcMonitor(l_logfile,"Before Inserting Records Into Handoff File",NULL,NULL);
                                         
			fprintf(l_ptr_hbrokers_handoff_file,"%s|%d|%d|%d|%d|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf|%d|%.2lf|%d|%d|%.2lf|%.2lf|%s\n",l_cust_code,l_pur_trns_cnt,l_sal_trns_cnt,l_bon_trns_cnt,l_all_count,l_pur_count,l_sal_count,l_bonus_count,l_pur_value,l_sal_value,l_del_count,l_del_value,l_deal_count,l_amd_count,l_sum_amd,l_amd_value,l_sys_date);

        CO_ProcMonitor(l_logfile,"After Inserting Records Into Handoff File",NULL,NULL);

	RETURN_SUCCESS :
		#ifdef SYS_DEBUG
			printf("Leaving Function Sum_Rep_ClntInst with success\n");

		#endif
		fclose(l_ptr_hbrokers_handoff_file);
		free(l_intl_rept_struct_ha);
		fclose(l_ptr_ini_file);
	   CO_ProcMonitor(l_logfile,"Leaving Function Sum_FRep_ClntInst with Success",NULL,NULL);
		return(APL_SUCCESS);

	RETURN_FAILURE :

		#ifdef SYS_DEBUG
			printf("Leaving Function Sum_Rep_ClntInst with errors\n");
		#endif

		fclose(l_ptr_hbrokers_handoff_file);
		free(l_intl_rept_struct_ha);
		fclose(l_ptr_ini_file);
	   CO_ProcMonitor(l_logfile,"Leaving Function Sum_FRep_ClntInst with Failure",NULL,NULL);
		return(APL_FAILURE);
}

 int RBI_Mod_ClntInst(char *p_rep_name,char *p_chr_rbi_dt,char **argv,FILE *p_logfile,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {

	char	chr_l_sysdate[APL_DATE_LEN]	= APL_NULL_STRING;
   char  chr_l_sr_no[4]                          = APL_NULL_STRING;
	char	chr_l_curr_datetime[APL_DATE_LEN]		=	APL_NULL_STRING;
	char  chr_l_h_aresponse_ca_id[CORP_ID_LEN]		=	APL_NULL_STRING;
	char  chr_l_hbrokers_handoff_file_name[FILENAME_LEN_A]   = APL_NULL_STRING;
	char  chr_l_handoff_dir[FILEPATH_LEN] = APL_NULL_STRING;
	char  chr_l_inifile[FILENAME_LEN_A]   = APL_NULL_STRING;
   char l_rowid[APL_ROWID_LEN] =  APL_NULL_STRING;
	short i_rowid = 0;

   char l_chr_date[3] = APL_NULL_STRING;
	char l_chr_month[3] = APL_NULL_STRING;
   char l_chr_cust_cd[4];
	short i_chr_cust_cd = 0;
	char  l_cust_code[4] = APL_NULL_STRING;
	short i_cust_code =0;
   char l_trn_ind[2] = APL_NULL_STRING;
   short i_trn_ind = 0;
	char  l_rbi_reg_no[21] = APL_NULL_STRING;
	short i_rbi_reg_no =0;
	char  l_sebi_sub_acc[11] = APL_NULL_STRING;
	short i_sebi_sub_acc=0;
	char  l_sys_date[11] = APL_NULL_STRING;
	short i_sys_date=0;
	char  l_dl_date[11] = APL_NULL_STRING;
	short i_dl_date=0;
	char  l_dt_input[11] = APL_NULL_STRING;
	short i_dt_input=0;
	char  l_amend_dt[11] = APL_NULL_STRING;
	short i_amend_dt=0;
	char l_uniq_ident[13] = APL_NULL_STRING;
	short i_uniq_ident = 0;
	char  l_instr_sub_type[4] = APL_NULL_STRING;
	short  i_instr_sub_type = 0;
	double  l_qty = 0.0;
	short i_qty = 0;
	double l_rec_qty = 0.0;
	short i_rec_qty = 0;
	double  l_dl_amt = 0.0;
	short i_dl_amt = 0;
	double  l_dl_price = 0.0;
	short i_dl_price = 0;
	double  l_nom_value = 0.0;
	short i_nom_value = 0;
	char l_lec_id[4] = APL_NULL_STRING;
	char  l_instr_isin[13] = APL_NULL_STRING;
	short i_instr_isin = 0;
	char l_lec_no[11] = APL_NULL_STRING;
	int l_trans_cd = 0;
	short i_trans_cd = 0;
	char l_cmp_code[11] = APL_NULL_STRING;
	short i_cmp_code = 0;
	char l_csys_date[20] = APL_NULL_STRING;
	char l_rec_ccd[17] = APL_NULL_STRING;
	short i_rec_ccd = 0;
	char l_unq_id[4] = APL_NULL_STRING;
	char l_uniq_date[7] = APL_NULL_STRING;
	char l_lrval_date[20] = APL_NULL_STRING;
	char l_contract_cd[17] = APL_NULL_STRING;
   short i_contract_cd = 0;
	char l_lrdate[20] = APL_NULL_STRING;
	short i_lrdate = 0;
   char l_date_input[11] = APL_NULL_STRING;	
	char l_identity_no[17] = APL_NULL_STRING;
	short i_identity_no = 0;
	
   EXEC SQL VAR  l_cmp_code IS STRING;

   FILE  *l_ptr_ini_file = NULL;
	FILE  *l_ptr_hbrokers_handoff_file  =  NULL;

	INTL_REPT_STRUCT_H            *l_intl_rept_struct_ha  =NULL;
	memset(chr_l_sr_no,'\0',4);
	memset(chr_l_handoff_dir,NULL,sizeof(chr_l_handoff_dir));

	l_intl_rept_struct_ha   = (INTL_REPT_STRUCT_H *)calloc(1, sizeof(INTL_REPT_STRUCT_H));
	APL_MALLOC_FAIL(l_intl_rept_struct_ha);


	memset(chr_l_inifile,NULL,sizeof(chr_l_inifile));

	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

   printf("Entered function RBI_Mod_ClntInst\n");
	fflush(stdout);

	if ((l_ptr_ini_file = fopen(chr_l_inifile,"r")) == NULL)
		return(APL_FAILURE);
	if (CO_ReadToken(l_ptr_ini_file,"INTL_REP_PATH_M",chr_l_handoff_dir,l_debug_info_ptr) != APL_SUCCESS)
		         return(APL_FAILURE);

	EXEC SQL SELECT to_char(SYS_DATE,'DD') INTO :l_chr_date FROM PRO_SYS_DATE;

	IS_ANY_ORA_ERROR

   EXEC SQL SELECT to_char(SYS_DATE,'MM') INTO :l_chr_month FROM PRO_SYS_DATE;

   IS_ANY_ORA_ERROR

   EXEC SQL SELECT CUST_CODE INTO :l_chr_cust_cd:i_chr_cust_cd 
	         FROM MT_COMMON_SYS_PARAMS; 

	IS_ANY_ORA_ERROR	


  	strcpy(chr_l_hbrokers_handoff_file_name,chr_l_handoff_dir);
   strcat(chr_l_hbrokers_handoff_file_name,l_chr_cust_cd);
   strcat(chr_l_hbrokers_handoff_file_name,",");
	strcat(chr_l_hbrokers_handoff_file_name,l_chr_date);
	strcat(chr_l_hbrokers_handoff_file_name,",");
   strcat(chr_l_hbrokers_handoff_file_name,l_chr_month);
	strcat(chr_l_hbrokers_handoff_file_name,".fii");


   if ((l_ptr_hbrokers_handoff_file = fopen(chr_l_hbrokers_handoff_file_name,"w")) == NULL)
      return(APL_FAILURE);

   memset(l_intl_rept_struct_ha,NULL,sizeof(INTL_REPT_STRUCT_H));

 	strcpy(l_intl_rept_struct_ha->report_name, chr_l_hbrokers_handoff_file_name+strlen(chr_l_handoff_dir));
   strcpy(l_intl_rept_struct_ha->report_desc, APL_HOFF_FILE_DESC);
   strcpy(l_intl_rept_struct_ha->report_date, argv[2]);
   l_intl_rept_struct_ha->report_width = 100;
   strcpy(l_intl_rept_struct_ha->task_desc, p_intl_envdatastruct_h->processtion);
   strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
   strcpy(l_intl_rept_struct_ha->usr, p_intl_envdatastruct_h->usr);


   if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))

   {
		APL_GOBACK_FAIL
   }
	
	if (APL_FAILURE == CO_RtvSysDtTime(chr_l_curr_datetime,l_debug_info_ptr))
   {
      APL_GOBACK_FAIL
   }
	strcat(p_chr_rbi_dt,APL_NULL_TIME);

   EXEC SQL DECLARE rbi_rept CURSOR FOR
   SELECT 'B',CUST_CODE,TO_CHAR(SYS_DATE,'DD-MM-YYYY'),NULL,SUBSTR(D.CLN_RBI_REG_NO,1,16),D.SEBI_SUB_ACC,TO_CHAR(B.DL_DATE,'DD-MM-YYYY'),C.INSTR_SUB_TYPE,B.R_TRANS_CODE,SUBSTR(C.CMP_CODE,1,5),B.QTY,B.DL_AMT,B.DL_PRICE,NULL,TO_CHAR(B.AMEND_DT,'DD-MM-YYYY'),C.INSTR_ISIN,C.NOMINAL_VALUE,B.ROWID,B.CONTRACT_CD,NULL
     FROM MT_COMMON_SYS_PARAMS,PRO_SYS_DATE,MT_CLIENT A,DL_BCN B,MT_INSTRUMENT C,MT_REGDETAILS D
  WHERE A.CLN_CODE = D.CLN_CODE AND
    B.CLIENT_CD = A.CLN_CODE AND
    B.INSTR_CD = C.INSTR_CODE AND
    A.CLN_TYPE = 'M' AND 
	 B.STATUS != 'UU' AND 
	 B.LR_VALDATE IS NULL AND
    B.DL_DATE =:p_chr_rbi_dt
    UNION
   SELECT 'D',CUST_CODE,TO_CHAR(SYS_DATE,'DD-MM-YYYY'),SUBSTR(B.UNIQ_IDENT_NO,1,12),SUBSTR(D.CLN_RBI_REG_NO,1,16),D.SEBI_SUB_ACC,TO_CHAR(B.DEAL_DATE,'DD-MM-YYYY'),C.INSTR_SUB_TYPE,B.R_TRANS_CODE,SUBSTR(C.CMP_CODE,1,5),B.QTY,B.AMOUNT,B.AMOUNT,TO_CHAR(B.DATEOF_INPUT,'DD-MM-YYYY'),NULL,C.INSTR_ISIN,C.NOMINAL_VALUE,B.ROWID,NULL,B.IDENTIY_NO
     FROM MT_COMMON_SYS_PARAMS,PRO_SYS_DATE,MT_CLIENT A,DL_DEAL B,MT_INSTRUMENT C,MT_REGDETAILS D
  WHERE A.CLN_CODE = D.CLN_CODE AND
    B.CLIENT = A.CLN_CODE AND
    B.INSTR_CODE = C.INSTR_CODE AND
    A.CLN_TYPE = 'M' AND 
	 B.DL_CLASS IN ('17','18','19','21') AND
	 B.DEAL_STAT = 'PM' AND 
    B.DEAL_DATE =:p_chr_rbi_dt;
 
IS_ANY_ORA_ERROR

	EXEC SQL OPEN rbi_rept;
  
  	IS_ANY_ORA_ERROR

	  for(;;)
	  {
			EXEC SQL FETCH rbi_rept 
						INTO :l_trn_ind:i_trn_ind,
						     :l_cust_code:i_cust_code,
							  :l_sys_date:i_sys_date,
							  :l_uniq_ident:i_uniq_ident,
							  :l_rbi_reg_no:i_rbi_reg_no,
							  :l_sebi_sub_acc:i_sebi_sub_acc,
							  :l_dl_date:i_dl_date,
							  :l_instr_sub_type:i_instr_sub_type,
							  :l_trans_cd:i_trans_cd,
							  :l_cmp_code:i_cmp_code,
							  :l_qty:i_qty,
							  :l_dl_amt:i_dl_amt,
							  :l_dl_price:i_dl_price,
                       :l_dt_input:i_dt_input,
							  :l_amend_dt:i_amend_dt,
							  :l_instr_isin:i_instr_isin,
							  :l_nom_value:i_nom_value,
							  :l_rowid:i_rowid,
							  :l_contract_cd:i_contract_cd,
							  :l_identity_no:i_identity_no;

			IS_ANY_ORA_ERROR
				
         printf("Count of flow %d \n",sqlca.sqlcode);

         printf("Value of 1Indicator ==|%s|\n",l_trn_ind);
         printf("Value of Cust Code ==|%s|\n",l_cust_code);
         printf("Value of l_sys_date==|%s|\n",l_sys_date);
			printf("Value of l_uniq_ident==|%s|\n",l_uniq_ident);
			printf("Value of l_rbi_reg_no==|%s|\n",l_rbi_reg_no);
			printf("Value of l_sebi_sub_acc==|%s|\n",l_sebi_sub_acc);
			printf("Value of l_l_dl_date==|%s|\n",l_sebi_sub_acc);
			printf("Value of l_sebi_sub_acc==|%s|\n",l_sebi_sub_acc);
			printf("Value of l_dl_date==|%s|\n",l_dl_date);
			printf("Value of l_instr_sub_type==|%s|\n",l_instr_sub_type);
			printf("Value of l_trans_cd==|%d|\n",l_trans_cd);
			printf("Value of l_cmp_code==|%s|\n",l_cmp_code);
			printf("Value of l_qty=|%lf|\n",l_qty);
			printf("Value ofl_dl_amt ==|%lf|\n",l_dl_amt);
			printf("Value of l_dl_price=|%lf|\n",l_dl_price);
			printf("Value of l_dt_input=|%s|\n",l_dt_input);
			printf("Value of l_amend_dt==|%s|\n",l_amend_dt);
			printf("Value of l_instr_isin ==|%s|\n",l_instr_isin);
			printf("Value of l_nom_value==|%lf|\n",l_nom_value);
	      printf("Value of l_rowid==|%s|\n",l_rowid);	
			printf("Value of Contract cd ==|%s|\n",l_contract_cd);
			if(sqlca.sqlcode==1403)
				break;

         EXEC SQL SELECT MAX(LR_VALDATE) INTO :l_lrval_date
                         FROM DL_REGBCN;
 
		   IS_ANY_ORA_ERROR

         printf("Date of LRDATE==|%s|\n",l_lrval_date);



        if(strcmp(l_trn_ind,"B") == 0)
        {
        EXEC SQL SELECT SUBSTR(:l_contract_cd,1,3) INTO :l_unq_id
			        FROM DUAL;

        strcpy(l_lec_id,l_unq_id);

		  EXEC SQL SELECT TO_CHAR(TO_DATE(:l_sys_date),'DDMMYY') INTO :l_uniq_date
                 FROM DUAL;

		  strcat(l_unq_id,l_uniq_date);
		  strcpy(l_lec_no,l_unq_id);	
        }

        EXEC SQL SELECT TO_CHAR(TO_DATE(:l_sys_date),'DD/MM/YYYY') INTO :l_csys_date
                from DUAL;

	     IS_ANY_ORA_ERROR

        strcat(l_csys_date,APL_NULL_TIME);

		  printf("First print vals\n");

        if (strcmp(l_trn_ind,"B") == 0)
		  {	
      fprintf(l_ptr_hbrokers_handoff_file,"\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%d\",\"%lf\",\"%lf\",\"%lf\",\"%s\",\"%s\",\"%s\",\"%lf\"\n",l_cust_code,l_sys_date,l_lec_no,l_lec_id,l_rbi_reg_no,l_sebi_sub_acc,l_dl_date,l_cmp_code,l_instr_sub_type,l_trans_cd,l_qty,l_dl_amt,l_dl_price,l_dt_input,l_amend_dt,l_instr_isin,l_nom_value);
        }
        else 
		  {
      fprintf(l_ptr_hbrokers_handoff_file,"\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%d\",\"%lf\",\"%lf\",\"%lf\",\"%s\",\"%s\",\"%s\",\"%lf\"\n",l_cust_code,l_sys_date,l_lec_no,l_uniq_ident,l_rbi_reg_no,l_sebi_sub_acc,l_dl_date,l_cmp_code,l_instr_sub_type,l_trans_cd,l_qty,l_dl_amt,l_dl_price,l_dt_input,l_amend_dt,l_instr_isin,l_nom_value);
        }

        EXEC SQL UPDATE DL_DEAL SET LR_VALDATE =:l_csys_date
	              WHERE (TO_CHAR(TO_DATE(DEAL_DATE),'DD-MM-YYYY')) =:l_dl_date AND
		                  IDENTIY_NO =:l_identity_no;
  
	     IS_ANY_ORA_ERROR

        EXEC SQL UPDATE DL_REGDEAL SET LR_VALDATE =:l_csys_date
                 WHERE (TO_CHAR(TO_DATE(DEAL_DATE),'DD-MM-YYYY')) =:l_dl_date AND
	                     IDENTIY_NO =:l_identity_no;

        IS_ANY_ORA_ERROR


	     }
        printf("Enter into reverse record sec\n");

   EXEC SQL DECLARE rbi_reverse_rept CURSOR FOR
   SELECT 'B',CUST_CODE,TO_CHAR(SYS_DATE,'DD-MM-YYYY'),SUBSTR(D.CLN_RBI_REG_NO,1,16),D.SEBI_SUB_ACC,TO_CHAR(B.DL_DATE,'DD-MM-YYYY'),C.INSTR_SUB_TYPE,B.R_TRANS_CODE,SUBSTR(C.CMP_CODE,1,5),B.QTY,B.DL_AMT,B.DL_PRICE,TO_CHAR(B.AMEND_DT,'DD-MM-YYYY'),C.INSTR_ISIN,C.NOMINAL_VALUE,B.ROWID,B.CONTRACT_CD
     FROM MT_COMMON_SYS_PARAMS,PRO_SYS_DATE,MT_CLIENT A,DL_BCN B,MT_INSTRUMENT C,MT_REGDETAILS D
  WHERE A.CLN_CODE = D.CLN_CODE AND
    B.CLIENT_CD = A.CLN_CODE AND
    B.INSTR_CD = C.INSTR_CODE AND
    A.CLN_TYPE = 'M' AND 
	 B.STATUS != 'UU' AND 
	 B.LR_VALDATE IS NULL AND
    B.DL_DATE =:p_chr_rbi_dt;

	IS_ANY_ORA_ERROR

		printf("Find record check in reverse==|%d|\n",sqlca.sqlcode);

	EXEC SQL OPEN rbi_reverse_rept;
	  
	for(;;)
	  {
			EXEC SQL FETCH rbi_reverse_rept 
						INTO :l_trn_ind:i_trn_ind,
						     :l_cust_code:i_cust_code,
							  :l_sys_date:i_sys_date,
							  :l_rbi_reg_no:i_rbi_reg_no,
							  :l_sebi_sub_acc:i_sebi_sub_acc,
							  :l_dl_date:i_dl_date,
							  :l_instr_sub_type:i_instr_sub_type,
							  :l_trans_cd:i_trans_cd,
							  :l_cmp_code:i_cmp_code,
							  :l_qty:i_qty,
							  :l_dl_amt:i_dl_amt,
							  :l_dl_price:i_dl_price,
							  :l_amend_dt:i_amend_dt,
							  :l_instr_isin:i_instr_isin,
							  :l_nom_value:i_nom_value,
							  :l_rowid:i_rowid,
							  :l_contract_cd:i_contract_cd;

			IS_ANY_ORA_ERROR

		   printf("Rec Check==|%d|\n",sqlca.sqlcode);
			printf("Ind %s\n",l_trn_ind);
			printf("Cont cd ==%s\n",l_contract_cd);
			printf("Sys date==%s\n",l_sys_date);
			printf("qtyyy==|%lf|\n",l_qty);

			if(sqlca.sqlcode==1403)
			   break;
				
         printf("Count of flow %d \n",sqlca.sqlcode);


         EXEC SQL SELECT QTY,CONTRACT_CD,LR_VALDATE
                          INTO :l_rec_qty:i_rec_qty,
                               :l_rec_ccd:i_rec_ccd,
				                   :l_lrdate:i_lrdate
				       FROM DL_REGBCN WHERE LR_VALDATE =:l_lrval_date AND
				                           CONTRACT_CD =:l_contract_cd;
			 
			          IS_ANY_ORA_ERROR


        EXEC SQL SELECT SUBSTR(:l_rec_ccd,1,3) INTO :l_unq_id
	               FROM DUAL;

		  IS_ANY_ORA_ERROR

        strcpy(l_lec_id,l_unq_id);
        
		  EXEC SQL SELECT TO_CHAR(TO_DATE(:l_lrdate),'DDMMYY') INTO :l_uniq_date
                        FROM DUAL;

		  printf("Error check in format lrdate==|%d|\n",sqlca.sqlcode);
        IS_ANY_ORA_ERROR

		  printf("Error check format lrdate==|%d|\n",sqlca.sqlcode);

	     strcat(l_unq_id,l_uniq_date);
		  strcpy(l_lec_no,l_unq_id);	
		  
        if (( l_trans_cd == 01 ) || (l_trans_cd == 02))
		  {
			  l_trans_cd = 4;
			  printf(" value ==%d\n",l_trans_cd);
	     }
        else if (l_trans_cd == 04 )
		  {
			  l_trans_cd = 1;
        }

        printf("Second print stats\n");

        if (l_qty != l_rec_qty)
	     {
        printf("Inside the Mismatch of Qty\n");
		  
    fprintf(l_ptr_hbrokers_handoff_file,"\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%d\",\"%lf\",\"%lf\",\"%lf\",\"%s\",\"%s\",\"%s\",\"%lf\"\n",l_cust_code,l_sys_date,l_lec_no,l_lec_id,l_rbi_reg_no,l_sebi_sub_acc,l_dl_date,l_cmp_code,l_instr_sub_type,l_trans_cd,l_qty,l_dl_amt,l_dl_price,l_date_input,l_amend_dt,l_instr_isin,l_nom_value);
        }

     EXEC SQL SELECT TO_CHAR(TO_DATE(:l_sys_date),'DD/MM/YYYY') INTO :l_csys_date
              FROM DUAL;

     printf("Error 1==|%d|\n",sqlca.sqlcode);

	  IS_ANY_ORA_ERROR

     strcat(l_csys_date,APL_NULL_TIME);

	  printf("value of date before dl_regbcn ==|%s|\n",l_csys_date);

     EXEC SQL UPDATE DL_BCN SET LR_VALDATE =:l_csys_date
	                  WHERE (TO_CHAR(TO_DATE(DL_DATE),'DD-MM-YYYY')) =:l_dl_date AND
                           CONTRACT_CD =:l_contract_cd;

	  IS_ANY_ORA_ERROR

	  printf("Update1\n");

     EXEC SQL UPDATE DL_REGBCN SET LR_VALDATE =:l_csys_date
	                  WHERE (TO_CHAR(TO_DATE(DL_DATE),'DD-MM-YYYY')) =:l_dl_date
							AND CONTRACT_CD =:l_contract_cd;

      IS_ANY_ORA_ERROR

       }
       EXEC SQL CLOSE rbi_reverse_rept;
		 IS_ANY_ORA_ERROR

	    EXEC SQL CLOSE rbi_rept;
	    IS_ANY_ORA_ERROR

		printf("After Close of the Cursor\n");

	RETURN_SUCCESS :

		#ifdef SYS_DEBUG
			printf("Leaving Function RBI_Mod_ClntInst with success\n");
		#endif
		fclose(l_ptr_hbrokers_handoff_file);
		free(l_intl_rept_struct_ha);
		fclose(l_ptr_ini_file);
		return(APL_SUCCESS);

	RETURN_FAILURE :

		#ifdef SYS_DEBUG
			printf("Leaving Function RBI_Mod_ClntInst with errors\n");
		#endif

		fclose(l_ptr_hbrokers_handoff_file);
		free(l_intl_rept_struct_ha);
		fclose(l_ptr_ini_file);
		return(APL_FAILURE);

} 


int MPR_Mod_ClntInst(char *p_rep_name,char *p_chr_yymn_dt,char **argv,FILE *p_logfile,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	
	char	chr_l_sysdate[APL_DATE_LEN]										=	APL_NULL_STRING;
   char  chr_l_sr_no[4]                                         =  APL_NULL_STRING;
	char	chr_l_curr_datetime[APL_DATE_LEN]								=	APL_NULL_STRING;
	char  chr_l_h_aresponse_ca_id[CORP_ID_LEN]						   =	APL_NULL_STRING;
	char  chr_l_hbrokers_handoff_file_name[FILENAME_LEN_A]   = APL_NULL_STRING;
	char  chr_l_handoff_dir[FILEPATH_LEN] = APL_NULL_STRING;
	char  chr_l_inifile[FILENAME_LEN_A]   = APL_NULL_STRING;
    char l_first_day[20] = APL_NULL_STRING;
    char l_last_day[20] = APL_NULL_STRING;
    char l_max_date[20] = APL_NULL_STRING;
   char l_safek_date[11] = APL_NULL_STRING;
   short i_safek_date = 0;
  char l_cust_code[4] = APL_NULL_STRING;
  short i_cust_code = 0;
    char l_cln_code[11] = APL_NULL_STRING;
   short i_cln_code = 0;
    char l_instr_code[9] = APL_NULL_STRING;
    short i_instr_code = 0;	
  
  char l_sys_dt[20] = APL_NULL_STRING;
  short i_sys_dt = 0;
  short i_first_day = 0;
  short i_last_day = 0;
  short i_max_date = 0;

  char  l_rbi_reg_no[21] = APL_NULL_STRING;
  short i_rbi_reg_no = 0;
 char l_cln_name[61] = APL_NULL_STRING;
 short i_cln_name = 0;
 char l_sebi_sub_acc[11] = APL_NULL_STRING;
 short i_sebi_sub_acc = 0;
 char l_instr_isin[13] = APL_NULL_STRING;
 short i_instr_isin = 0;

 char l_instr_type[4] = APL_NULL_STRING;
 short i_instr_type = 0;

 double l_opn_count = 0.0;
  short i_opn_count = 0;

 double l_sum_value = 0.0;
 short i_sum_value = 0;


 double l_pur_value = 0.0;
 short i_pur_value = 0;

 double l_sale_sum = 0.0;
 short i_sale_sum = 0;

 double l_sale_value = 0.0;
 short i_sale_value = 0;

 double l_cls_pos = 0.0;
 short i_cls_pos = 0;

 double l_prn_cptl = 0.0;

 double l_prn_captl = 0.0;
 short i_prn_captl = 0;

  double l_cls_value = 0.0;
  short i_cls_value = 0;
  int l_instr_tot_val = 0;
  double l_prcnt_cptl = 0.0;
char f_last_day[20] = APL_NULL_STRING;
char f_first_day[20] = APL_NULL_STRING;
char l_syst_date[20] = APL_NULL_STRING;
char l_chr_month[3] = APL_NULL_STRING;
char l_chr_yr[3] = APL_NULL_STRING;

  EXEC SQL VAR  l_cln_code IS STRING;
  EXEC SQL VAR  l_instr_isin IS STRING;

	FILE  *l_ptr_ini_file = NULL;
	FILE  *l_ptr_hbrokers_handoff_file  =  NULL;


	INTL_REPT_STRUCT_H            *l_intl_rept_struct_ha  =NULL;

	memset(chr_l_sr_no,'\0',4);
	memset(chr_l_handoff_dir,NULL,sizeof(chr_l_handoff_dir));

	l_intl_rept_struct_ha   = (INTL_REPT_STRUCT_H *)calloc(1, sizeof(INTL_REPT_STRUCT_H));
	APL_MALLOC_FAIL(l_intl_rept_struct_ha);


	memset(chr_l_inifile,NULL,sizeof(chr_l_inifile));
	memset(l_cust_code,NULL,sizeof(l_cust_code));

	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

    printf("Entered function MPR_Mod_ClntInst\n");
	 fflush(stdout);

	if ((l_ptr_ini_file = fopen(chr_l_inifile,"r")) == NULL)
		  return(APL_FAILURE);
	if (CO_ReadToken(l_ptr_ini_file,"INTL_REP_PATH_M",chr_l_handoff_dir,l_debug_info_ptr) != APL_SUCCESS)
		  return(APL_FAILURE);

	EXEC SQL SELECT to_char(SYS_DATE,'DDMMYY') INTO :chr_l_sysdate FROM PRO_SYS_DATE;
	IS_ANY_ORA_ERROR
   
   EXEC SQL SELECT to_char(SYS_DATE,'MM') INTO :l_chr_month FROM PRO_SYS_DATE;

	IS_ANY_ORA_ERROR

   EXEC SQL SELECT to_char(SYS_DATE,'YY') INTO :l_chr_yr FROM PRO_SYS_DATE;

	IS_ANY_ORA_ERROR


  	strcpy(chr_l_hbrokers_handoff_file_name,chr_l_handoff_dir);
   strcat(chr_l_hbrokers_handoff_file_name,"MPR");
   strcat(chr_l_hbrokers_handoff_file_name,l_chr_month);
   strcat(chr_l_hbrokers_handoff_file_name,l_chr_yr);
   strcat(chr_l_hbrokers_handoff_file_name,".txt");

	printf("Name of the MPR file ==|%s|\n",chr_l_hbrokers_handoff_file_name);

   if ((l_ptr_hbrokers_handoff_file = fopen(chr_l_hbrokers_handoff_file_name,"w")) == NULL)
      return(APL_FAILURE);

   memset(l_intl_rept_struct_ha,NULL,sizeof(INTL_REPT_STRUCT_H));


 	strcpy(l_intl_rept_struct_ha->report_name, chr_l_hbrokers_handoff_file_name+strlen(chr_l_handoff_dir));
   strcpy(l_intl_rept_struct_ha->report_desc, APL_HOFF_FILE_DESC);
   strcpy(l_intl_rept_struct_ha->report_date, argv[2]);
   l_intl_rept_struct_ha->report_width = 100;
   strcpy(l_intl_rept_struct_ha->task_desc, p_intl_envdatastruct_h->processtion);

   strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
   strcpy(l_intl_rept_struct_ha->usr, p_intl_envdatastruct_h->usr);


   if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))
   {
       APL_GOBACK_FAIL
   }
	
	if (APL_FAILURE == CO_RtvSysDtTime(chr_l_curr_datetime,l_debug_info_ptr))
   {
      APL_GOBACK_FAIL
   }

	
   EXEC SQL SELECT  to_char((last_day(to_date(:p_chr_yymn_dt,'MMYYYY'))),'DD/MM/YYYY') 
		              INTO :l_last_day:i_last_day
						  FROM DUAL;

    IS_ANY_ORA_ERROR

      strcat(l_last_day,APL_NULL_TIME); 
      strcpy(f_last_day,l_last_day);


	 EXEC SQL SELECT to_char((last_day(to_date(:p_chr_yymn_dt,'MMYYYY'))- to_number(to_char(last_day(to_date(:p_chr_yymn_dt,'MMYYYY')),'DD'))+1),'DD/MM/YYYY') 
	               INTO :l_first_day:i_first_day FROM DUAL;

    IS_ANY_ORA_ERROR

     strcat(l_first_day,APL_NULL_TIME);
	  strcpy(f_first_day,l_first_day);

     exec sql select to_char(trunc(max(posit_date)),'DD/MM/YYYY') 
	             into :l_safek_date:i_safek_date
	  from dl_hissafek
	  where trunc(posit_date)<= last_day(Add_months(to_date(:p_chr_yymn_dt,'MMYYYY'), -1));


		  IS_ANY_ORA_ERROR

		 
      EXEC SQL DECLARE ccode_rept CURSOR FOR SELECT CLN_CODE 
	                       FROM MT_CLIENT 
						    	  WHERE STATUS = 'AA' AND
								  CLN_TYPE = 'M';
	
		  
      EXEC SQL OPEN ccode_rept;

	   IS_ANY_ORA_ERROR
 
      for(;;)
      {
        EXEC SQL FETCH ccode_rept 
	          INTO :l_cln_code:i_cln_code;

			printf("sqlca.sqlcode is %d\n",sqlca.sqlcode);
      IS_ANY_ORA_ERROR

	        if(sqlca.sqlcode==1403)
		        break;
			printf("l_cln_code is %s\n",l_cln_code);

       
          EXEC SQL SELECT CUST_CODE,A.CLN_NAME,B.CLN_RBI_REG_NO,B.SEBI_SUB_ACC,TO_CHAR(SYS_DATE,'YYYYMM')
                   INTO :l_cust_code:i_cust_code,
                        :l_cln_name:i_cln_name,
                        :l_rbi_reg_no:i_rbi_reg_no,
                        :l_sebi_sub_acc:i_sebi_sub_acc,
                        :l_sys_dt:i_sys_dt
		    FROM MT_COMMON_SYS_PARAMS,MT_CLIENT A,MT_REGDETAILS B,PRO_SYS_DATE
			 WHERE A.CLN_CODE =:l_cln_code AND  
			 B.CLN_CODE =:l_cln_code AND
			 A.CLN_CODE = B.CLN_CODE;
  

	       IS_ANY_ORA_ERROR

           EXEC SQL DECLARE instr_cur CURSOR FOR 
			    	 	  SELECT DISTINCT INSTR_CODE 
                    FROM DL_HISSAFEK
                    WHERE CLIENT =:l_cln_code
						  AND (POSIT_DATE >= :f_first_day AND POSIT_DATE <= :f_last_day);	  

           IS_ANY_ORA_ERROR

      	  EXEC SQL OPEN instr_cur;

			  IS_ANY_ORA_ERROR

				for(;;)
				{
              EXEC SQL FETCH instr_cur   
                         INTO :l_instr_code:i_instr_code; 
               IS_ANY_ORA_ERROR

	        if(sqlca.sqlcode==1403)
		        break;

               EXEC SQL SELECT ROUND((nvl(SUM(QTY),0)),2)
				          INTO :l_sum_value:i_sum_value
					       FROM DL_HISBCN 
					       WHERE CLIENT_CD =:l_cln_code AND 
							 INSTR_CD =:l_instr_code AND
							 DEAL_CD IN ('2','4')
                      AND (SETT_DT >= :f_first_day AND SETT_DT <= :f_last_day);
                    IS_ANY_ORA_ERROR
             
               EXEC SQL SELECT ROUND((nvl(SUM(QTY),0)),2)
				          INTO :l_sale_sum:i_sale_sum 	
					       FROM DL_HISBCN 
					       WHERE CLIENT_CD =:l_cln_code AND 
							 INSTR_CD =:l_instr_code AND
							 DEAL_CD IN ('1','3') 
                      AND (SETT_DT >= :f_first_day AND SETT_DT <= :f_last_day);

                IS_ANY_ORA_ERROR 

                 EXEC SQL SELECT ROUND((nvl(SUM(a.QTY*b.CLOSING_PR),0)),2) 
                 INTO :l_pur_value:i_pur_value
					  from DL_HISBCN a , mt_dlymktprc b
					  WHERE a.instr_cd = b.instr_code AND 
					  CLIENT_CD =:l_cln_code AND 
					  instr_cd =:l_instr_code AND 
					  DEAL_CD IN ('2','4')
                 AND (SETT_DT >= :f_first_day AND SETT_DT <= :f_last_day)
                 AND  B.PRICE_DATE = (SELECT MAX(PRICE_DATE) FROM MT_DLYMKTPRC WHERE PRICE_DATE <=A.SETT_DT); 

                IS_ANY_ORA_ERROR

                 
                 EXEC SQL SELECT ROUND((nvl(SUM(a.QTY*b.CLOSING_PR),0)),2)
                 INTO :l_sale_value:i_sale_value
					  from DL_HISBCN a , mt_dlymktprc b
					  WHERE a.instr_cd = b.instr_code AND 
					  CLIENT_CD =:l_cln_code AND 
					  instr_cd =:l_instr_code AND
				     DEAL_CD IN ('1','3')	
                 AND (SETT_DT >= :f_first_day AND SETT_DT <= :f_last_day)
                 AND B.PRICE_DATE = (SELECT MAX(PRICE_DATE) FROM MT_DLYMKTPRC WHERE PRICE_DATE <=A.SETT_DT); 
                  IS_ANY_ORA_ERROR
      
			             EXEC SQL SELECT ROUND((nvl(SUM(SAFEKEEP_POS),0)),2)	
					       INTO :l_opn_count:i_opn_count
					       FROM DL_HISSAFEK
					       WHERE TO_CHAR(TO_DATE(POSIT_DATE),'DD/MM/YYYY') <=:l_safek_date AND
						    INSTR_CODE =:l_instr_code AND
						    CLIENT =:l_cln_code;

				          IS_ANY_ORA_ERROR		 

                  EXEC SQL SELECT ROUND((nvl(SUM(SAFEKEEP_POS),0)),2)
                       INTO :l_cls_pos:i_cls_pos 
						    FROM DL_HISSAFEK
							 WHERE CLIENT =:l_cln_code AND
							 INSTR_CODE =:l_instr_code 
                      AND (POSIT_DATE >= :f_first_day AND POSIT_DATE <= :f_last_day);

                     IS_ANY_ORA_ERROR

                 EXEC SQL SELECT ROUND((nvl(SUM(A.SAFEKEEP_POS*B.CLOSING_PR),0)),2) 
                 INTO :l_cls_value:i_cls_value
					  from DL_HISSAFEK A, MT_DLYMKTPRC B
					  WHERE A.INSTR_CODE = B.INSTR_CODE AND 
					  CLIENT =:l_cln_code AND 
					  A.INSTR_CODE =:l_instr_code 
                 AND (POSIT_DATE >= :f_first_day AND POSIT_DATE <= :f_last_day)
                 AND B.PRICE_DATE = (SELECT MAX(PRICE_DATE) FROM MT_DLYMKTPRC WHERE PRICE_DATE <=A.POSIT_DATE); 

                IS_ANY_ORA_ERROR

                 EXEC SQL SELECT  INSTR_TOT_NOM_VAL INTO :l_instr_tot_val
					  FROM MT_INSTRUMENT
					  WHERE INSTR_CODE = :l_instr_code;

                 l_prcnt_cptl = l_cls_pos /l_instr_tot_val * 100;

                EXEC SQL SELECT ROUND((:l_prcnt_cptl),2)
						   INTO :l_prn_captl:i_prn_captl
							FROM DUAL;

                IS_ANY_ORA_ERROR


                EXEC SQL SELECT INSTR_ISIN,INSTR_TYPE 
					 INTO :l_instr_isin:i_instr_isin,
					      :l_instr_type:i_instr_type
					 FROM MT_INSTRUMENT
					 WHERE INSTR_CODE =:l_instr_code;

                IS_ANY_ORA_ERROR

                printf("Instru Type ==|%s|\n",l_instr_type);
					 printf("value of isin==|%s|\n",l_instr_isin);

       if((strcmp(l_instr_isin,APL_NULL_STRING )==0) &&  ((strcmp(l_instr_type,"BON")==0) || (strcmp(l_instr_type , "FMT")==0)))
       {
       fprintf(l_ptr_hbrokers_handoff_file,"%s|%s|%s|%s|%s|%s|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf\n",l_cust_code,l_sys_dt,l_rbi_reg_no,l_cln_name,l_sebi_sub_acc,l_instr_code,l_opn_count,l_sum_value,l_pur_value,l_sale_sum,l_sale_value,l_cls_pos,l_cls_value,l_prn_captl);
       }
      else
	   {
       fprintf(l_ptr_hbrokers_handoff_file,"%s|%s|%s|%s|%s|%s|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf\n",l_cust_code,l_sys_dt,l_rbi_reg_no,l_cln_name,l_sebi_sub_acc,l_instr_isin,l_opn_count,l_sum_value,l_pur_value,l_sale_sum,l_sale_value,l_cls_pos,l_cls_value,l_prn_captl);
				}	 
           }
        EXEC SQL CLOSE instr_cur;

       IS_ANY_ORA_ERROR

	    }	

    EXEC SQL CLOSE ccode_rept;

	 IS_ANY_ORA_ERROR


	RETURN_SUCCESS :
		#ifdef SYS_DEBUG
			printf("Leaving Function MPR_Mod_ClntInst with success\n");

		#endif
		fclose(l_ptr_hbrokers_handoff_file);
		free(l_intl_rept_struct_ha);
		fclose(l_ptr_ini_file);
		return(APL_SUCCESS);

	RETURN_FAILURE :

		#ifdef SYS_DEBUG
			printf("Leaving Function MPR_Mod_ClntInst with errors\n");
		#endif

		fclose(l_ptr_hbrokers_handoff_file);
		free(l_intl_rept_struct_ha);
		return(APL_FAILURE); //AIX Warning Removal

   }

/* AUC1 Report */
int AUC_Mod_ClntInst(char *p_rep_name,char *p_chr_yymn_dt,char **argv,FILE *p_logfile,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	
	char	chr_l_sysdate[APL_DATE_LEN]										=	APL_NULL_STRING;
   char  chr_l_sr_no[4]                                         =  APL_NULL_STRING;
	char	chr_l_curr_datetime[APL_DATE_LEN]								=	APL_NULL_STRING;
	char  chr_l_h_aresponse_ca_id[CORP_ID_LEN]						   =	APL_NULL_STRING;
	char  chr_l_hbrokers_handoff_file_name[FILENAME_LEN_A]   = APL_NULL_STRING;
	char  chr_l_handoff_dir[FILEPATH_LEN] = APL_NULL_STRING;
	char  chr_l_inifile[FILENAME_LEN_A]   = APL_NULL_STRING;
    char l_first_day[20] = APL_NULL_STRING;
    char l_last_day[20] = APL_NULL_STRING;
    char l_cln_code[11] = APL_NULL_STRING;
   short i_cln_code = 0;
  
  char l_sys_dt[20] = APL_NULL_STRING;
  short i_sys_dt = 0;
  short i_first_day = 0;
  short i_last_day = 0;
  short i_max_date = 0;
  char l_pty_type[2] = APL_NULL_STRING;
  short i_pty_type = 0;
  char  l_cln_type[5] = APL_NULL_STRING;
  short i_cln_type = 0;

  double l_sum_pos = 0.0;
  short i_sum_pos = 0;
  double l_pty_sum = 0.0;
  short i_pty_sum = 0;

  int l_cnt_clnt= 0;
  int l_pty_cnt = 0;	
  int l_tot_nos = 0;

  double l_tot_sum = 0.0;

  int l_cclnt_cnt = 0;
  char l_ctype_val[5] = APL_NULL_STRING;
  double  l_csum_cnt = 0.0;

  int l_fclnt_cnt = 0;
  char l_ftype_val[5] = APL_NULL_STRING;
  double l_fsum_cnt = 0.0;

  int l_oclnt_cnt = 0;
  char l_otype_val[5] = APL_NULL_STRING;
  double l_osum_cnt = 0.0;

  int l_iclnt_cnt = 0;
  char l_itype_val[5] = APL_NULL_STRING;
  double  l_isum_cnt = 0.0;


  int l_mclnt_cnt = 0;
  char l_mtype_val[5] = APL_NULL_STRING;
  double  l_msum_cnt = 0.0;

  int l_nclnt_cnt = 0;
  char l_ntype_val[5] = APL_NULL_STRING;
  double  l_nsum_cnt = 0.0;

  int l_bclnt_cnt = 0;
  char l_btype_val[5] = APL_NULL_STRING;
  double  l_bsum_cnt = 0.0;

  int l_eclnt_cnt = 0;
  char l_etype_val[5] = APL_NULL_STRING;
  double  l_esum_cnt = 0.0;

  int l_brok_cnt = 0;
  char l_brok_type[2] = APL_NULL_STRING;
  double  l_brok_sum = 0.0;

  int l_oth_cnt = 0;
  char l_oth_type[5] = APL_NULL_STRING;
  double  l_oth_sum = 0.0;


  int l_pty_oth_cnt = 0;
  char l_pty_oth_type[2] = APL_NULL_STRING;
  double  l_pty_oth_sum = 0.0;
  double l_chr_clnt_sum = 0.0;
  double l_chr_pty_sum = 0.0;

  double l_chr_f_sum = 0.0;
  double l_chr_i_sum = 0.0;
  double l_chr_m_sum = 0.0;
  double l_chr_n_sum = 0.0;
  double l_chr_c_sum = 0.0;
  double l_chr_o_sum = 0.0;
  double l_chr_b_sum = 0.0;
  double l_chr_e_sum = 0.0;
  double l_chr_oth_sum = 0.0;
  double l_chr_brok_sum = 0.0;
  double l_chr_pty_osum = 0.0;


  double l_all_sum = 0.0;
  double l_chr_clt_sum =0.0;
  double l_chr_pt_sum =0.0;
  double l_chr_all_tot=0.0;

  double l_other_sum = 0.0;
  double l_othr_sum = 0.0;
  int l_other_nos = 0;
  int l_all_nos = 0;
  int l_chr_clt_nos = 0;
  int l_chr_pt_nos = 0;

  

  char f_first_day[20] = APL_NULL_STRING;
  char f_last_day[20] = APL_NULL_STRING;
  int	 l_int_loop = 0;
  EXEC SQL VAR l_ctype_val IS STRING;

	FILE  *l_ptr_ini_file = NULL;
	FILE  *l_ptr_hbrokers_handoff_file  =  NULL;


	INTL_REPT_STRUCT_H            *l_intl_rept_struct_ha  =NULL;

	memset(chr_l_sr_no,'\0',4);
	memset(chr_l_handoff_dir,NULL,sizeof(chr_l_handoff_dir));

	l_intl_rept_struct_ha   = (INTL_REPT_STRUCT_H *)calloc(1, sizeof(INTL_REPT_STRUCT_H));
	APL_MALLOC_FAIL(l_intl_rept_struct_ha);


	memset(chr_l_inifile,NULL,sizeof(chr_l_inifile));

	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

   printf("Entered function AUC_Mod_ClntInst\n"); 
	fflush(stdout);


	if ((l_ptr_ini_file = fopen(chr_l_inifile,"r")) == NULL)
		  return(APL_FAILURE);
	if (CO_ReadToken(l_ptr_ini_file,"INTL_REP_PATH_M",chr_l_handoff_dir,l_debug_info_ptr) != APL_SUCCESS)
		  return(APL_FAILURE);

	EXEC SQL SELECT to_char(SYS_DATE,'DDMMYY') INTO :chr_l_sysdate FROM PRO_SYS_DATE;
	IS_ANY_ORA_ERROR

  	strcpy(chr_l_hbrokers_handoff_file_name,chr_l_handoff_dir);
   strcat(chr_l_hbrokers_handoff_file_name,"AUC");
   strcat(chr_l_hbrokers_handoff_file_name,chr_l_sysdate);
   strcat(chr_l_hbrokers_handoff_file_name,".txt");
   if ((l_ptr_hbrokers_handoff_file = fopen(chr_l_hbrokers_handoff_file_name,"w")) == NULL)
      return(APL_FAILURE);

   memset(l_intl_rept_struct_ha,NULL,sizeof(INTL_REPT_STRUCT_H));


 	strcpy(l_intl_rept_struct_ha->report_name, chr_l_hbrokers_handoff_file_name+strlen(chr_l_handoff_dir));
   strcpy(l_intl_rept_struct_ha->report_desc, APL_HOFF_FILE_DESC);
   strcpy(l_intl_rept_struct_ha->report_date, argv[2]);
   l_intl_rept_struct_ha->report_width = 100;
   strcpy(l_intl_rept_struct_ha->task_desc, p_intl_envdatastruct_h->processtion);

   strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
   strcpy(l_intl_rept_struct_ha->usr, p_intl_envdatastruct_h->usr);


   if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))
   {
		APL_GOBACK_FAIL
   }
	
	if (APL_FAILURE == CO_RtvSysDtTime(chr_l_curr_datetime,l_debug_info_ptr))
   {
      APL_GOBACK_FAIL
   }


   EXEC SQL SELECT  to_char((last_day(to_date(:p_chr_yymn_dt,'MMYYYY'))),'DD/MM/YYYY') 
		              INTO :l_last_day:i_last_day
						  FROM DUAL;

    IS_ANY_ORA_ERROR

    strcat(l_last_day,APL_NULL_TIME); 
    strcpy(f_last_day,l_last_day);

	 EXEC SQL SELECT to_char((last_day(to_date(:p_chr_yymn_dt,'MMYYYY'))- to_number(to_char(last_day(to_date(:p_chr_yymn_dt,'MMYYYY')),'DD'))+1),'DD/MM/YYYY') 
	               INTO :l_first_day:i_first_day FROM DUAL;

    IS_ANY_ORA_ERROR

     strcat(l_first_day,APL_NULL_TIME);
	  strcpy(f_first_day,l_first_day);


     EXEC SQL DECLARE auc_rept  CURSOR FOR select count(distinct a.cln_code),sum(safekeep_pos*closing_pr) ,cln_type
			from mt_client a, dl_hissafek b, mt_dlymktprc c
			where a.cln_code =b.client
		   and b.instr_code = c.instr_code
		   AND (POSIT_DATE >= :f_first_day AND POSIT_DATE <= :f_last_day)
	      and price_date =(select max(price_date) from mt_dlymktprc where price_date <=b.posit_date) group by cln_type;
    
     IS_ANY_ORA_ERROR

		  EXEC SQL OPEN auc_rept;

     IS_ANY_ORA_ERROR
 
      for(;;)
      {
			l_int_loop = l_int_loop +1;
			
        EXEC SQL FETCH auc_rept 
	          INTO :l_cnt_clnt,
				      :l_sum_pos:i_sum_pos,
					   :l_cln_type:i_cln_type;

	        if(sqlca.sqlcode==1403)
		        break;

       IS_ANY_ORA_ERROR

			 	printf("Cnt_Clnt = |%d|\n",l_cnt_clnt);
		 		printf("Sum Pos = |%lf|\n",l_sum_pos);
				printf("Cln Type = |%s|\n",l_cln_type);
			   if (strcmp(l_cln_type,"F") == 0)
			   {
			     l_fclnt_cnt = l_cnt_clnt;
			     strcpy(l_ftype_val,l_cln_type);
			     l_fsum_cnt = l_sum_pos;
				  l_chr_f_sum = l_fsum_cnt / 10000000;
			   }
				else if (strcmp(l_cln_type,"I") == 0 )
             {
					 printf("Enter Into I type \n");
				    l_iclnt_cnt = l_cnt_clnt;
					 strcpy(l_itype_val,l_cln_type);
					 l_isum_cnt = l_sum_pos;
				  l_chr_i_sum = l_isum_cnt / 10000000;
				  printf("Value of i cr ==|%lf|\n",l_chr_i_sum);
				 }
				else if (strcmp(l_cln_type,"M") == 0 )
             {
					 printf("Enter Into MMM\n");
				    l_mclnt_cnt = l_cnt_clnt;
					 strcpy(l_mtype_val,l_cln_type);
					 l_msum_cnt = l_sum_pos;
					  l_chr_m_sum = l_msum_cnt / 10000000;
                printf("Value of M cr ==|%lf|\n",l_chr_m_sum);
				 }
				else if (strcmp(l_cln_type,"N") == 0 )
             {
					 printf("Enter Into NNNN\n");
				    l_nclnt_cnt = l_cnt_clnt;
					 strcpy(l_ntype_val,l_cln_type);
					 l_nsum_cnt = l_sum_pos;
                 l_chr_n_sum = l_nsum_cnt / 10000000;
	              printf("Value of N cr ==|%lf|\n",l_chr_n_sum);
				 }
				else if (strcmp(l_cln_type,"O") == 0)
			   {
				  printf("Enter Into OOOO\n");
				  l_oclnt_cnt = l_cnt_clnt;
				  strcpy(l_otype_val,l_cln_type);
				  l_osum_cnt = l_sum_pos;
                 l_chr_o_sum = l_osum_cnt / 10000000;
	              printf("Value of O cr ==|%lf|\n",l_chr_o_sum);

			   }
				else if (strcmp(l_cln_type,"C") == 0)
             {
					 printf("Enter Into CCCCC\n");
				    l_cclnt_cnt = l_cnt_clnt;
					 strcpy(l_ctype_val,l_cln_type);
					 l_csum_cnt = l_sum_pos;
                 l_chr_c_sum = l_csum_cnt / 10000000;
	              printf("Value of c cr ==|%lf|\n",l_chr_c_sum);

				 }
				else if (strcmp(l_cln_type,"B") == 0 )
             {
					 printf("Enter Into BBB\n");
				    l_bclnt_cnt = l_cnt_clnt;
					 strcpy(l_btype_val,l_cln_type);
					 l_bsum_cnt = l_sum_pos;
                 l_chr_b_sum = l_bsum_cnt / 10000000;
	             printf("Value of B cr ==|%lf|\n",l_chr_b_sum);
				 }
				else if (strcmp(l_cln_type,"E") == 0 )
				{
					 printf("Enter Into EE\n");
				    l_eclnt_cnt = l_cnt_clnt;
					 strcpy(l_etype_val,l_cln_type);
					 l_esum_cnt = l_sum_pos;
                l_chr_e_sum = l_esum_cnt / 10000000;
	              printf("Value of E cr ==|%lf|\n",l_chr_e_sum);

				 }
				else if ((strcmp(l_cln_type,"F") != 0) && (strcmp(l_cln_type,"I") != 0) && (strcmp(l_cln_type,"M") != 0) && (strcmp(l_cln_type,"N") != 0) && (strcmp(l_cln_type,"O") != 0) && (strcmp(l_cln_type,"C") != 0) &&  (strcmp(l_cln_type,"B") != 0) && (strcmp(l_cln_type,"E") != 0))
				 {
				    l_oth_cnt = l_cnt_clnt;
					 strcpy(l_oth_type,l_cln_type);
					 l_oth_sum = l_sum_pos;
                l_chr_oth_sum = l_oth_sum / 10000000;
                printf("Value of Other than selected flag ==|%lf|\n",l_chr_oth_sum);
			    }

          l_chr_clt_sum = l_fsum_cnt + l_isum_cnt + l_msum_cnt + l_nsum_cnt +  l_osum_cnt +l_csum_cnt + l_csum_cnt + l_bsum_cnt + l_esum_cnt + l_oth_sum;
          printf("TOTAL SUM ==|%lf|\n",l_chr_clt_sum);
			 l_chr_clt_nos = l_fclnt_cnt + l_iclnt_cnt + l_mclnt_cnt + l_nclnt_cnt + l_oclnt_cnt + l_cclnt_cnt + l_bclnt_cnt + l_eclnt_cnt + l_oth_cnt;
			 printf("Count of all Nos ==|%d|\n",l_chr_clt_nos);

         } 
         printf("Before delaring Cursor auc_ptyrep\n");

         EXEC SQL DECLARE auc_ptyrept CURSOR FOR 
         select count(a.pty_code),sum(safekeep_pos*closing_pr) ,pty_type
		   from mt_party a, dl_hissafek b, mt_dlymktprc c
			where a.pty_code =b.client
	      and b.instr_code = c.instr_code
			 AND (POSIT_DATE >= :f_first_day AND POSIT_DATE <= :f_last_day)
         and price_date =(select max(price_date) from mt_dlymktprc where price_date <=b.posit_date) group by pty_type;

             IS_ANY_ORA_ERROR

				 EXEC SQL OPEN auc_ptyrept;

			 	 IS_ANY_ORA_ERROR

		      for(;;)
				{
              EXEC SQL FETCH auc_ptyrept
                         INTO :l_pty_cnt,
		                        :l_pty_sum:i_pty_sum,
			                     :l_pty_type:i_pty_type;

	        if(sqlca.sqlcode==1403)
		        break;

               IS_ANY_ORA_ERROR


            if (strcmp(l_pty_type,"B") == 0 )
             {
					 printf("Enter Into Broker Check\n");
				    l_brok_cnt = l_pty_cnt;
					 printf("VAL OF BROKER CNT==|%d|\n",l_brok_cnt);
					 strcpy(l_brok_type,l_pty_type);
                printf("VAL OF TYPE B ==|%s|\n",l_brok_type);
					 l_brok_sum = l_pty_sum;
                l_chr_brok_sum = l_brok_sum / 10000000;
                printf("Value of Other Sum in Brok ==|%lf|\n",l_chr_brok_sum);
					 printf("VAL OF BROKER SUM ==|%lf|\n",l_brok_sum);
				 }
					else if (strcmp(l_pty_type,"B") != 0)
				   {
				    l_pty_oth_cnt = l_pty_cnt;
					 strcpy(l_pty_oth_type,l_pty_type);
					 l_pty_oth_sum = l_pty_sum;
					 
                l_chr_pty_osum = l_pty_oth_sum / 10000000;
                printf("Value of Other Sum in other in party  ==|%lf|\n",l_chr_pty_osum);

					 printf("Value of Other Pty Count==|%d|\n",l_pty_oth_cnt);
					 printf("Value of other pty Type ==|%s|\n",l_pty_oth_type);
					 printf("Value of other Pty Sum ==|%lf|\n",l_pty_oth_sum);
            }

               l_chr_pt_sum = l_brok_sum + l_pty_oth_sum;
               printf("Count of Party No==|%lf|\n",l_chr_pt_sum);
	            l_chr_pt_nos = l_brok_cnt + l_pty_oth_cnt;
					printf("Count of Party Nos==|%d|\n",l_chr_pt_nos);
				}
       EXEC SQL CLOSE auc_ptyrept;

       IS_ANY_ORA_ERROR

    EXEC SQL CLOSE auc_rept;

	 IS_ANY_ORA_ERROR


      l_all_sum = l_chr_clt_sum + l_chr_pt_sum;
	     l_chr_all_tot = l_all_sum / 10000000;
	     l_all_nos = l_chr_clt_nos + l_chr_pt_nos;
	     printf("All Nos ==|%d|\n",l_all_nos);
		  l_other_nos = l_oth_cnt + l_pty_oth_cnt;
		  l_other_sum = l_oth_sum + l_pty_oth_sum;
		  printf("Value of other COUNT ==|%d|\n",l_other_nos);
		  printf("Value of Other SUM ==|%lf|\n",l_other_sum);
		  l_othr_sum = l_other_sum / 10000000;
		  printf("Value of OTHER SUM in Cr ==|%lf|\n",l_othr_sum);

  fprintf(l_ptr_hbrokers_handoff_file,"%d|%lf|%d|%lf|%d|%lf|%d|%lf|%d|%lf|%d|%lf|%d|%lf|%d|%lf|%d|%lf|%d|%lf|%d|%lf|\n",l_fclnt_cnt,l_chr_f_sum,l_iclnt_cnt,l_chr_i_sum,l_mclnt_cnt,l_chr_m_sum,l_nclnt_cnt,l_chr_n_sum,l_oclnt_cnt,l_chr_o_sum,l_brok_cnt,l_chr_brok_sum,l_cclnt_cnt,l_chr_c_sum,l_bclnt_cnt,l_chr_b_sum,l_eclnt_cnt,l_chr_e_sum,l_other_nos,l_othr_sum,l_all_nos,l_chr_all_tot);


	RETURN_SUCCESS :
		#ifdef SYS_DEBUG
			printf("Leaving Function AUC_Mod_ClntInst with success\n");

		#endif
		fclose(l_ptr_hbrokers_handoff_file);
		free(l_intl_rept_struct_ha);
		fclose(l_ptr_ini_file);
		return(APL_SUCCESS);

	RETURN_FAILURE :

		#ifdef SYS_DEBUG
			printf("Leaving Function AUC_Mod_ClntInst with errors\n");
		#endif

		fclose(l_ptr_hbrokers_handoff_file);
		free(l_intl_rept_struct_ha);
		return(APL_FAILURE); //AIX Warning Removal

   }
  /* Quaterly Report */
int Quat_Mod_ClntDet(char *p_rep_name,char *p_chr_mnyy_dt,char **argv,FILE *p_logfile,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	
	char	chr_l_sysdate[APL_DATE_LEN]										=	APL_NULL_STRING;
   char  chr_l_sr_no[4]                                         =  APL_NULL_STRING;
	char	chr_l_curr_datetime[APL_DATE_LEN]								=	APL_NULL_STRING;
	char  chr_l_h_aresponse_ca_id[CORP_ID_LEN]						   =	APL_NULL_STRING;
	char  chr_l_hbrokers_handoff_file_name[FILENAME_LEN_A]   = APL_NULL_STRING;
	char  chr_l_handoff_dir[FILEPATH_LEN] = APL_NULL_STRING;
	char  chr_l_inifile[FILENAME_LEN_A]   = APL_NULL_STRING;
    char l_first_day[20] = APL_NULL_STRING;
    char l_last_day[20] = APL_NULL_STRING;
    char l_max_date[20] = APL_NULL_STRING;
    char l_safek_date[11] = APL_NULL_STRING;
    short i_safek_date = 0;
    char l_cust_code[4] = APL_NULL_STRING;
    short i_cust_code = 0;
    char l_cln_code[11] = APL_NULL_STRING;
    short i_cln_code = 0;
    char l_instr_code[9] = APL_NULL_STRING;
    short i_instr_code = 0;	
  
  char l_sys_dt[20] = APL_NULL_STRING;
  short i_sys_dt = 0;
  short i_first_day = 0;
  short i_last_day = 0;
  short i_max_date = 0;

  char  l_rbi_reg_no[21] = APL_NULL_STRING;
  short i_rbi_reg_no = 0;
  char l_cln_name[61] = APL_NULL_STRING;
  short i_cln_name = 0;
  char l_sebi_sub_acc[11] = APL_NULL_STRING;	
  short i_sebi_sub_acc = 0;
  char l_instr_isin[13] = APL_NULL_STRING;
  short i_instr_isin = 0;
  char l_instr_type[4] = APL_NULL_STRING;
  short i_instr_type = 0;
  double l_opn_count = 0.0;
  short i_opn_count = 0;
  double l_sum_value = 0.0;
  short i_sum_value = 0;

  double l_pur_value = 0.0;
  short i_pur_value = 0;
  double l_sale_sum = 0.0;
  short i_sale_sum = 0;
  double l_sale_value = 0.0;
  short i_sale_value = 0;
  double l_cls_pos = 0.0;
  short i_cls_pos = 0;
  double l_prn_cptl = 0.0;
  double l_cls_value = 0.0;
  short i_cls_value = 0;
  double l_cls_price = 0.0;
  short i_cls_price = 0;
  char l_instr_name[61] = APL_NULL_STRING;
  short i_instr_name = 0;

  char f_last_day[20] = APL_NULL_STRING;
  char f_first_day[20] = APL_NULL_STRING;
  
  char l_chr_month[3] = APL_NULL_STRING;
  char l_chr_yr[3] = APL_NULL_STRING;  
  

  EXEC SQL VAR  l_instr_isin IS STRING;

	FILE  *l_ptr_ini_file = NULL;
	FILE  *l_ptr_hbrokers_handoff_file  =  NULL;


	INTL_REPT_STRUCT_H            *l_intl_rept_struct_ha  =NULL;

	memset(chr_l_sr_no,'\0',4);
	memset(chr_l_handoff_dir,NULL,sizeof(chr_l_handoff_dir));

	l_intl_rept_struct_ha   = (INTL_REPT_STRUCT_H *)calloc(1, sizeof(INTL_REPT_STRUCT_H));
	APL_MALLOC_FAIL(l_intl_rept_struct_ha);


	memset(chr_l_inifile,NULL,sizeof(chr_l_inifile));
	memset(l_cust_code,NULL,sizeof(l_cust_code));

	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

   printf("Entered function Quat_Mod_ClntDet\n");
	fflush(stdout);

	if ((l_ptr_ini_file = fopen(chr_l_inifile,"r")) == NULL)
		  return(APL_FAILURE);
	if (CO_ReadToken(l_ptr_ini_file,"INTL_REP_PATH_M",chr_l_handoff_dir,l_debug_info_ptr) != APL_SUCCESS)
		  return(APL_FAILURE);

	EXEC SQL SELECT to_char(SYS_DATE,'MMYY') INTO :chr_l_sysdate FROM PRO_SYS_DATE;
	IS_ANY_ORA_ERROR

   EXEC SQL SELECT to_char(SYS_DATE,'MM') INTO :l_chr_month FROM PRO_SYS_DATE;
   
	IS_ANY_ORA_ERROR

   EXEC SQL SELECT to_char(SYS_DATE,'YY') INTO :l_chr_yr FROM PRO_SYS_DATE;

   IS_ANY_ORA_ERROR


  	strcpy(chr_l_hbrokers_handoff_file_name,chr_l_handoff_dir);

    if(strcmp(p_rep_name,"HYE") == 0)
	 {
   strcat(chr_l_hbrokers_handoff_file_name,"hye");
    }
	 else
	 {
		 strcat(chr_l_hbrokers_handoff_file_name,"hyd");
    }
   strcat(chr_l_hbrokers_handoff_file_name,l_chr_month);
   strcat(chr_l_hbrokers_handoff_file_name,l_chr_yr);
   strcat(chr_l_hbrokers_handoff_file_name,".txt");
   if ((l_ptr_hbrokers_handoff_file = fopen(chr_l_hbrokers_handoff_file_name,"w")) == NULL)
      return(APL_FAILURE);

   memset(l_intl_rept_struct_ha,NULL,sizeof(INTL_REPT_STRUCT_H));


 	strcpy(l_intl_rept_struct_ha->report_name, chr_l_hbrokers_handoff_file_name+strlen(chr_l_handoff_dir));
   strcpy(l_intl_rept_struct_ha->report_desc, APL_HOFF_FILE_DESC);
   strcpy(l_intl_rept_struct_ha->report_date, argv[2]);
   l_intl_rept_struct_ha->report_width = 100;
   strcpy(l_intl_rept_struct_ha->task_desc, p_intl_envdatastruct_h->processtion);

   strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
   strcpy(l_intl_rept_struct_ha->usr, p_intl_envdatastruct_h->usr);


   if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))
   {
       APL_GOBACK_FAIL
   }
	
	if (APL_FAILURE == CO_RtvSysDtTime(chr_l_curr_datetime,l_debug_info_ptr))
   {
      APL_GOBACK_FAIL
   }

   printf("Value Passed  Date in Quately report=|%s|\n",p_chr_mnyy_dt);

       EXEC SQL SELECT TO_CHAR(LAST_DAY(ADD_MONTHS(TO_DATE(:p_chr_mnyy_dt,'MMYYYY'), +2)),'DD/MM/YYYY')  INTO :l_last_day:i_last_day FROM DUAL;

       IS_ANY_ORA_ERROR



      strcat(l_last_day,APL_NULL_TIME); 
      strcpy(f_last_day,l_last_day);
   
      EXEC SQL SELECT to_char((last_day(to_date(:p_chr_mnyy_dt,'MMYYYY'))- to_number(to_char(last_day(to_date(:p_chr_mnyy_dt,'MMYYYY')),'DD'))+1),'DD/MM/YYYY') INTO :l_first_day:i_first_day
			         FROM DUAL;

     IS_ANY_ORA_ERROR

     strcat(l_first_day,APL_NULL_TIME);
	  strcpy(f_first_day,l_first_day);

     exec sql select to_char(trunc(max(posit_date)),'DD/MM/YYYY') 
	             into :l_safek_date:i_safek_date
	  from dl_hissafek
	  where trunc(posit_date)<= last_day(Add_months(to_date(:p_chr_mnyy_dt,'MMYYYY'), -1));


		  IS_ANY_ORA_ERROR

    EXEC SQL DECLARE ccode_rep CURSOR FOR SELECT CLN_CODE 
	                       FROM MT_CLIENT 
						    	  WHERE STATUS = 'AA' AND
								  CLN_TYPE = 'M';
	
     IS_ANY_ORA_ERROR

		  
    EXEC SQL OPEN ccode_rep;


	 IS_ANY_ORA_ERROR
 
      for(;;)
      {
        EXEC SQL FETCH ccode_rep 
	          INTO :l_cln_code:i_cln_code;


	        if(sqlca.sqlcode==1403)
		        break;
       
          EXEC SQL SELECT CUST_CODE,A.CLN_NAME,B.CLN_RBI_REG_NO,B.SEBI_SUB_ACC,TO_CHAR(SYS_DATE,'YYYYMM')
                   INTO :l_cust_code:i_cust_code,
                        :l_cln_name:i_cln_name,
                        :l_rbi_reg_no:i_rbi_reg_no,
                        :l_sebi_sub_acc:i_sebi_sub_acc,
                        :l_sys_dt:i_sys_dt
		    FROM MT_COMMON_SYS_PARAMS,MT_CLIENT A,MT_REGDETAILS B,PRO_SYS_DATE
			 WHERE A.CLN_CODE =:l_cln_code AND  
			 B.CLN_CODE =:l_cln_code AND
			 A.CLN_CODE = B.CLN_CODE;
  
	       IS_ANY_ORA_ERROR

           if(strcmp(p_rep_name,"HYE") == 0)
			  { 
          		EXEC SQL DECLARE instr_equt CURSOR FOR 
				 	SELECT DISTINCT A.INSTR_CODE 
                      FROM DL_HISSAFEK A,MT_INSTRUMENT B
                      WHERE CLIENT =:l_cln_code AND
						    A.INSTR_CODE = B.INSTR_CODE
						    AND (POSIT_DATE >= :f_first_day AND POSIT_DATE <= :f_last_day)
          			    AND INSTR_TYPE = 'SHS';

                      IS_ANY_ORA_ERROR
							 printf("After Declaring the Instr Cursor\n");
              }
              else
				  {
          		EXEC SQL DECLARE instr_ncur CURSOR FOR 
				 	SELECT DISTINCT A.INSTR_CODE 
                      FROM DL_HISSAFEK A,MT_INSTRUMENT B
                      WHERE CLIENT =:l_cln_code AND
						    A.INSTR_CODE = B.INSTR_CODE
						    AND (POSIT_DATE >= :f_first_day AND POSIT_DATE <= :f_last_day)
						    AND INSTR_TYPE != 'SHS';

               IS_ANY_ORA_ERROR
		         }
            if(strcmp(p_rep_name,"HYE") == 0)
            {

				 EXEC SQL OPEN instr_equt;

             IS_ANY_ORA_ERROR
				}
				else
				{	
			    EXEC SQL OPEN instr_ncur;
			 	 IS_ANY_ORA_ERROR
				}

				for(;;)
				{

               if(strcmp(p_rep_name,"HYE") == 0)
					{
               EXEC SQL FETCH instr_equt   
                         INTO :l_instr_code:i_instr_code; 
               IS_ANY_ORA_ERROR
               }
					else
					{
               EXEC SQL FETCH instr_ncur   
                         INTO :l_instr_code:i_instr_code; 
               IS_ANY_ORA_ERROR
					}

	            if(sqlca.sqlcode==1403)
		             break;

               EXEC SQL SELECT nvl(SUM(QTY),0)  
				          INTO :l_sum_value:i_sum_value
					       FROM DL_HISBCN 
					       WHERE CLIENT_CD =:l_cln_code AND 
							 INSTR_CD =:l_instr_code AND
							 DEAL_CD IN ('2','4')
                      AND (SETT_DT >= :f_first_day AND SETT_DT <= :f_last_day);
                    
					IS_ANY_ORA_ERROR
             

               EXEC SQL SELECT nvl(SUM(QTY),0)
				          INTO :l_sale_sum:i_sale_sum 	
					       FROM DL_HISBCN 
					       WHERE CLIENT_CD =:l_cln_code AND 
							 INSTR_CD =:l_instr_code AND
							 DEAL_CD IN ('1','3') 
                      AND (SETT_DT >= :f_first_day AND SETT_DT <= :f_last_day);

                IS_ANY_ORA_ERROR 

					  EXEC SQL SELECT nvl(SUM(a.QTY*b.CLOSING_PR),0) 
                 INTO :l_pur_value:i_pur_value
					  from DL_HISBCN a , mt_dlymktprc b
					  WHERE a.instr_cd = b.instr_code AND 
					  CLIENT_CD =:l_cln_code AND 
					  instr_cd =:l_instr_code AND 
					  DEAL_CD IN ('2','4')
                 AND (SETT_DT >= :f_first_day AND SETT_DT <= :f_last_day)
                 AND  B.PRICE_DATE = (SELECT MAX(PRICE_DATE) FROM MT_DLYMKTPRC WHERE PRICE_DATE <=A.SETT_DT); 

                IS_ANY_ORA_ERROR

                 EXEC SQL SELECT nvl(SUM(a.QTY*b.CLOSING_PR),0) 
                 INTO :l_sale_value:i_sale_value
					  from DL_HISBCN a , mt_dlymktprc b


					  WHERE a.instr_cd = b.instr_code AND 
					  CLIENT_CD =:l_cln_code AND 
					  instr_cd =:l_instr_code AND
				     DEAL_CD IN ('1','3')	
                 AND (SETT_DT >= :f_first_day AND SETT_DT <= :f_last_day)
                 AND B.PRICE_DATE = (SELECT MAX(PRICE_DATE) FROM MT_DLYMKTPRC WHERE PRICE_DATE <=A.SETT_DT); 
                  IS_ANY_ORA_ERROR
      
                 EXEC SQL SELECT SUM(SAFEKEEP_POS)
					       INTO :l_opn_count:i_opn_count
					       FROM DL_HISSAFEK
					       WHERE TO_CHAR(TO_DATE(POSIT_DATE),'DD/MM/YYYY') <=:l_safek_date AND
						    INSTR_CODE =:l_instr_code AND
						    CLIENT =:l_cln_code;

				          IS_ANY_ORA_ERROR		 

                  EXEC SQL SELECT SUM(SAFEKEEP_POS)
                       INTO :l_cls_pos:i_cls_pos 
						    FROM DL_HISSAFEK
							 WHERE CLIENT =:l_cln_code AND
							 INSTR_CODE =:l_instr_code 
                      AND (POSIT_DATE >= :f_first_day AND POSIT_DATE <= :f_last_day);

                     IS_ANY_ORA_ERROR

                 EXEC SQL SELECT nvl(SUM(A.SAFEKEEP_POS*B.CLOSING_PR),0) 
                 INTO :l_cls_value:i_cls_value
					  from DL_HISSAFEK A, MT_DLYMKTPRC B
					  WHERE A.INSTR_CODE = B.INSTR_CODE AND 
					  CLIENT =:l_cln_code AND 
					  A.INSTR_CODE =:l_instr_code 
                 AND (POSIT_DATE >= :f_first_day AND POSIT_DATE <= :f_last_day)
                 AND B.PRICE_DATE = (SELECT MAX(PRICE_DATE) FROM MT_DLYMKTPRC WHERE PRICE_DATE <=A.POSIT_DATE); 

                IS_ANY_ORA_ERROR

                EXEC SQL SELECT CLOSING_PR INTO:l_cls_price:i_cls_price
					 FROM MT_DLYMKTPRC
					         WHERE INSTR_CODE =:l_instr_code AND
					         PRICE_DATE = (SELECT MAX(PRICE_DATE) FROM MT_DLYMKTPRC WHERE PRICE_DATE <=:f_last_day);

                IS_ANY_ORA_ERROR


                EXEC SQL SELECT SUBSTR(INSTR_NAME,1,60) 
					 INTO :l_instr_name:i_instr_name
					 FROM MT_INSTRUMENT
					 WHERE INSTR_CODE =:l_instr_code;

                IS_ANY_ORA_ERROR

                EXEC SQL SELECT INSTR_ISIN,INSTR_TYPE 
					 INTO :l_instr_isin:i_instr_isin,
					      :l_instr_type:i_instr_type
					 FROM MT_INSTRUMENT
					 WHERE INSTR_CODE =:l_instr_code;

                IS_ANY_ORA_ERROR


       if((strcmp(l_instr_isin,APL_NULL_STRING )==0) &&  ((strcmp(l_instr_type,"BON")==0) || (strcmp(l_instr_type , "FMT")==0)))
       {
       fprintf(l_ptr_hbrokers_handoff_file,"%s|%s|%s|%s|%s|%s|%s|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf\n",l_cust_code,l_sys_dt,l_rbi_reg_no,l_cln_name,l_sebi_sub_acc,l_instr_code,l_instr_name,l_opn_count,l_sum_value,l_pur_value,l_sale_sum,l_sale_value,l_cls_pos,l_cls_value,l_cls_price,l_prn_cptl);
       }
      else
	   {  
       fprintf(l_ptr_hbrokers_handoff_file,"%s|%s|%s|%s|%s|%s|%s|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf\n",l_cust_code,l_sys_dt,l_rbi_reg_no,l_cln_name,l_sebi_sub_acc,l_instr_isin,l_instr_name,l_opn_count,l_sum_value,l_pur_value,l_sale_sum,l_sale_value,l_cls_pos,l_cls_value,l_cls_price,l_prn_cptl);
		}
	}

      if(strcmp(p_rep_name,"HYE") == 0)
		{
        EXEC SQL CLOSE instr_equt;

       IS_ANY_ORA_ERROR
		}
      else
		{
        EXEC SQL CLOSE instr_ncur;
		  IS_ANY_ORA_ERROR
      }
	  }	

    EXEC SQL CLOSE ccode_rep;

	 IS_ANY_ORA_ERROR


	RETURN_SUCCESS :
		#ifdef SYS_DEBUG
			printf("Leaving Function Quat_Mod_ClntDet with success\n");

		#endif
		fclose(l_ptr_hbrokers_handoff_file);
		free(l_intl_rept_struct_ha);
		fclose(l_ptr_ini_file);
		return(APL_SUCCESS);

	RETURN_FAILURE :

		#ifdef SYS_DEBUG
			printf("Leaving Function Quat_Mod_ClntDet with errors\n");
		#endif

		fclose(l_ptr_hbrokers_handoff_file);
		free(l_intl_rept_struct_ha);
		return(APL_FAILURE); //AIX Warning Removal
   }

int Half_Mod_ClntDet(char *p_rep_name,char *p_chr_mnyy_dt,char **argv,FILE *p_logfile,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	
	char	chr_l_sysdate[APL_DATE_LEN] = APL_NULL_STRING;
	char  chr_l_sr_no[4]   =  APL_NULL_STRING;
	char	chr_l_curr_datetime[APL_DATE_LEN]	=	APL_NULL_STRING;
	char  chr_l_h_aresponse_ca_id[CORP_ID_LEN] =	APL_NULL_STRING;
	char  chr_l_hbrokers_handoff_file_name[FILENAME_LEN_A]   = APL_NULL_STRING;
	char  chr_l_handoff_dir[FILEPATH_LEN] = APL_NULL_STRING;
	char  chr_l_inifile[FILENAME_LEN_A]   = APL_NULL_STRING;
	char l_first_day[20] = APL_NULL_STRING;
	char l_last_day[20] = APL_NULL_STRING;
	char l_max_date[20] = APL_NULL_STRING;
	char l_safek_date[11] = APL_NULL_STRING;
	short i_safek_date = 0;
	char l_cust_code[4] = APL_NULL_STRING;
	short i_cust_code = 0;
	char l_cln_code[11] = APL_NULL_STRING;
	short i_cln_code = 0;
	char l_instr_code[9] = APL_NULL_STRING;
	short i_instr_code = 0;	
	int l_instr_tot_val = 0; 
	char l_sys_dt[20] = APL_NULL_STRING;
	short i_sys_dt = 0;
	short i_first_day = 0;
	short i_last_day = 0;
	short i_max_date = 0;

	char  l_rbi_reg_no[21] = APL_NULL_STRING;
	short i_rbi_reg_no = 0;
	char l_cln_name[61] = APL_NULL_STRING;
	short i_cln_name = 0;
	char l_sebi_sub_acc[11] = APL_NULL_STRING;
	short i_sebi_sub_acc = 0;
	char l_instr_isin[13] = APL_NULL_STRING;
	short i_instr_isin = 0;
	char l_instr_type[4] = APL_NULL_STRING;
	short i_instr_type = 0;

	double l_opn_count = 0.0;
	short i_opn_count = 0;

	double l_sum_value = 0.0;
	short i_sum_value = 0;


	double l_pur_value = 0.0;
	short i_pur_value = 0;

	double l_sale_sum = 0.0;
	short i_sale_sum = 0;

	double l_sale_value = 0.0;
	short i_sale_value = 0;

	double l_cls_pos = 0.0;
	short i_cls_pos = 0;

	double l_prn_cptl = 0.0;
	double l_cls_value = 0.0;
	short i_cls_value = 0;
	double l_cls_price = 0.0;
	short i_cls_price = 0;
	char l_instr_name[61] = APL_NULL_STRING;
	short i_instr_name = 0;

	char f_last_day[20] = APL_NULL_STRING;
	char f_first_day[20] = APL_NULL_STRING;
	char l_chr_month[3] = APL_NULL_STRING;
	char l_chr_yr[3] = APL_NULL_STRING;

	EXEC SQL VAR  l_cln_code IS STRING;
	EXEC SQL VAR  l_instr_isin IS STRING;

	FILE  *l_ptr_ini_file = NULL;
	FILE  *l_ptr_hbrokers_handoff_file  =  NULL;


	INTL_REPT_STRUCT_H            *l_intl_rept_struct_ha  =NULL;

	memset(chr_l_sr_no,'\0',4);
	memset(chr_l_handoff_dir,NULL,sizeof(chr_l_handoff_dir));

	l_intl_rept_struct_ha   = (INTL_REPT_STRUCT_H *)calloc(1, sizeof(INTL_REPT_STRUCT_H));
	APL_MALLOC_FAIL(l_intl_rept_struct_ha);


	memset(chr_l_inifile,NULL,sizeof(chr_l_inifile));
	memset(l_cust_code,NULL,sizeof(l_cust_code));

	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

   printf("Entered function Half_Mod_ClntDet\n");
   fflush(stdout);

	if ((l_ptr_ini_file = fopen(chr_l_inifile,"r")) == NULL)
		  return(APL_FAILURE);
	if (CO_ReadToken(l_ptr_ini_file,"INTL_REP_PATH_M",chr_l_handoff_dir,l_debug_info_ptr) != APL_SUCCESS)
		return(APL_FAILURE);
	

	EXEC SQL SELECT to_char(SYS_DATE,'MMYY') INTO :chr_l_sysdate FROM PRO_SYS_DATE;
	IS_ANY_ORA_ERROR

   EXEC SQL SELECT to_char(SYS_DATE,'MM') INTO :l_chr_month FROM PRO_SYS_DATE;

   IS_ANY_ORA_ERROR

   EXEC SQL SELECT to_char(SYS_DATE,'YY') INTO :l_chr_yr FROM PRO_SYS_DATE;		

   IS_ANY_ORA_ERROR

  	strcpy(chr_l_hbrokers_handoff_file_name,chr_l_handoff_dir);

    if(strcmp(p_rep_name,"HYE") == 0)
	 {
       strcat(chr_l_hbrokers_handoff_file_name,"hye");
    }
	 else
	 {
		 strcat(chr_l_hbrokers_handoff_file_name,"hyd");
    }
   strcat(chr_l_hbrokers_handoff_file_name,chr_l_sysdate);
   strcat(chr_l_hbrokers_handoff_file_name,l_chr_month);
   strcat(chr_l_hbrokers_handoff_file_name,l_chr_yr);
   strcat(chr_l_hbrokers_handoff_file_name,".txt");
   if ((l_ptr_hbrokers_handoff_file = fopen(chr_l_hbrokers_handoff_file_name,"w")) == NULL)
      return(APL_FAILURE);

   memset(l_intl_rept_struct_ha,NULL,sizeof(INTL_REPT_STRUCT_H));

 	strcpy(l_intl_rept_struct_ha->report_name, chr_l_hbrokers_handoff_file_name+strlen(chr_l_handoff_dir));
   strcpy(l_intl_rept_struct_ha->report_desc, APL_HOFF_FILE_DESC);
   strcpy(l_intl_rept_struct_ha->report_date, argv[2]);
   l_intl_rept_struct_ha->report_width = 100;
   strcpy(l_intl_rept_struct_ha->task_desc, p_intl_envdatastruct_h->processtion);

   strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
   strcpy(l_intl_rept_struct_ha->usr, p_intl_envdatastruct_h->usr);


   if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))
   {
       APL_GOBACK_FAIL
   }
	
	if (APL_FAILURE == CO_RtvSysDtTime(chr_l_curr_datetime,l_debug_info_ptr))
   {
      APL_GOBACK_FAIL
   }

       EXEC SQL SELECT TO_CHAR(LAST_DAY(ADD_MONTHS(TO_DATE(:p_chr_mnyy_dt,'MMYYYY'), +5)),'DD/MM/YYYY')  INTO :l_last_day:i_last_day FROM DUAL;

       IS_ANY_ORA_ERROR

      strcat(l_last_day,APL_NULL_TIME); 
      strcpy(f_last_day,l_last_day);

       EXEC SQL SELECT to_char((last_day(to_date(:p_chr_mnyy_dt,'MMYYYY'))- to_number(to_char(last_day(to_date(:p_chr_mnyy_dt,'MMYYYY')),'DD'))+1),'DD/MM/YYYY') INTO :l_first_day:i_first_day
			         FROM DUAL;

    IS_ANY_ORA_ERROR

     strcat(l_first_day,APL_NULL_TIME);
	  strcpy(f_first_day,l_first_day);

     exec sql select to_char(trunc(max(posit_date)),'DD/MM/YYYY') 
	             into :l_safek_date:i_safek_date
	  from dl_hissafek
	  where trunc(posit_date)<= last_day(Add_months(to_date(:p_chr_mnyy_dt,'MMYYYY'), -1));


	  IS_ANY_ORA_ERROR

     EXEC SQL DECLARE ccode_rept1 CURSOR FOR SELECT CLN_CODE 
	                       FROM MT_CLIENT 
						    	  WHERE STATUS = 'AA' AND
								  CLN_TYPE = 'M';
	
		  
     EXEC SQL OPEN ccode_rept1;

	  IS_ANY_ORA_ERROR
 
      for(;;)
      {
        EXEC SQL FETCH ccode_rept1 
	          INTO :l_cln_code:i_cln_code;


        IS_ANY_ORA_ERROR

	        if(sqlca.sqlcode==1403)
		     break;
       
        EXEC SQL SELECT CUST_CODE,A.CLN_NAME,B.CLN_RBI_REG_NO,B.SEBI_SUB_ACC,TO_CHAR(SYS_DATE,'YYYYMM')
                   INTO :l_cust_code:i_cust_code,
                        :l_cln_name:i_cln_name,
                        :l_rbi_reg_no:i_rbi_reg_no,
                        :l_sebi_sub_acc:i_sebi_sub_acc,
                        :l_sys_dt:i_sys_dt
		    FROM MT_COMMON_SYS_PARAMS,MT_CLIENT A,MT_REGDETAILS B,PRO_SYS_DATE
			 WHERE A.CLN_CODE =:l_cln_code AND  
			 B.CLN_CODE =:l_cln_code AND
			 A.CLN_CODE = B.CLN_CODE;
  
	       IS_ANY_ORA_ERROR

           if(strcmp(p_rep_name,"HYE") == 0)
			  { 
          		EXEC SQL DECLARE instr_equt1 CURSOR FOR 
				   SELECT DISTINCT A.INSTR_CODE 
                         FROM DL_HISSAFEK A,MT_INSTRUMENT B
                         WHERE CLIENT =:l_cln_code AND
								 A.INSTR_CODE = B.INSTR_CODE
						       AND (POSIT_DATE >= :f_first_day AND POSIT_DATE <= :f_last_day)
          					 AND INSTR_TYPE = 'SHS';

               IS_ANY_ORA_ERROR
              }
              else
				  {
          		EXEC SQL DECLARE instr_ncur1 CURSOR FOR 
				 		SELECT DISTINCT A.INSTR_CODE 
                         FROM DL_HISSAFEK A,MT_INSTRUMENT B
                         WHERE CLIENT =:l_cln_code AND
								 A.INSTR_CODE = B.INSTR_CODE
						       AND (POSIT_DATE >= :f_first_day AND POSIT_DATE <= :f_last_day)
								 AND INSTR_TYPE != 'SHS';

               IS_ANY_ORA_ERROR
		         }

            if(strcmp(p_rep_name,"HYE") == 0)
            {

				 EXEC SQL OPEN instr_equt1;

               IS_ANY_ORA_ERROR
				}
				else
				{	
			    EXEC SQL OPEN instr_ncur1;

			 	 IS_ANY_ORA_ERROR
				}

				for(;;)
				{

               if(strcmp(p_rep_name,"HYE") == 0)
					{
               EXEC SQL FETCH instr_equt1   
                         INTO :l_instr_code:i_instr_code; 
               IS_ANY_ORA_ERROR
               }
					else
					{
               EXEC SQL FETCH instr_ncur1   
                         INTO :l_instr_code:i_instr_code; 
               IS_ANY_ORA_ERROR
					}

	            if(sqlca.sqlcode==1403)
		             break;

               EXEC SQL SELECT nvl(SUM(QTY),0)  
				          INTO :l_sum_value:i_sum_value
					       FROM DL_HISBCN 
					       WHERE CLIENT_CD =:l_cln_code AND 
							 INSTR_CD =:l_instr_code AND
							 DEAL_CD IN ('2','4')
                      AND (SETT_DT >= :f_first_day AND SETT_DT <= :f_last_day);
                    
					IS_ANY_ORA_ERROR
             

               EXEC SQL SELECT nvl(SUM(QTY),0)
				          INTO :l_sale_sum:i_sale_sum 	
					       FROM DL_HISBCN 
					       WHERE CLIENT_CD =:l_cln_code AND 
							 INSTR_CD =:l_instr_code AND
							 DEAL_CD IN ('1','3') 
                      AND (SETT_DT >= :f_first_day AND SETT_DT <= :f_last_day);

                IS_ANY_ORA_ERROR 

					  EXEC SQL SELECT nvl(SUM(a.QTY*b.CLOSING_PR),0) 
                 INTO :l_pur_value:i_pur_value
					  from DL_HISBCN a , mt_dlymktprc b
					  WHERE a.instr_cd = b.instr_code AND 
					  CLIENT_CD =:l_cln_code AND 
					  instr_cd =:l_instr_code AND 
					  DEAL_CD IN ('2','4')
                 AND (SETT_DT >= :f_first_day AND SETT_DT <= :f_last_day)
                 AND  B.PRICE_DATE = (SELECT MAX(PRICE_DATE) FROM MT_DLYMKTPRC WHERE PRICE_DATE <=A.SETT_DT); 

                IS_ANY_ORA_ERROR

                 EXEC SQL SELECT nvl(SUM(a.QTY*b.CLOSING_PR),0) 
                 INTO :l_sale_value:i_sale_value
					  from DL_HISBCN a , mt_dlymktprc b


					  WHERE a.instr_cd = b.instr_code AND 
					  CLIENT_CD =:l_cln_code AND 
					  instr_cd =:l_instr_code AND
				     DEAL_CD IN ('1','3')	
                 AND (SETT_DT >= :f_first_day AND SETT_DT <= :f_last_day)
                 AND B.PRICE_DATE = (SELECT MAX(PRICE_DATE) FROM MT_DLYMKTPRC WHERE PRICE_DATE <=A.SETT_DT); 
                  IS_ANY_ORA_ERROR
						
                 EXEC SQL SELECT SUM(SAFEKEEP_POS)
					       INTO :l_opn_count:i_opn_count
					       FROM DL_HISSAFEK
					       WHERE TO_CHAR(TO_DATE(POSIT_DATE),'DD/MM/YYYY') <=:l_safek_date AND
						    INSTR_CODE =:l_instr_code AND
						    CLIENT =:l_cln_code;

				          IS_ANY_ORA_ERROR		 

                  EXEC SQL SELECT SUM(SAFEKEEP_POS)
                       INTO :l_cls_pos:i_cls_pos 
						    FROM DL_HISSAFEK
							 WHERE CLIENT =:l_cln_code AND
							 INSTR_CODE =:l_instr_code 
                      AND (POSIT_DATE >= :f_first_day AND POSIT_DATE <= :f_last_day);

                     IS_ANY_ORA_ERROR

                 EXEC SQL SELECT nvl(SUM(A.SAFEKEEP_POS*B.CLOSING_PR),0) 
                 INTO :l_cls_value:i_cls_value
					  from DL_HISSAFEK A, MT_DLYMKTPRC B
					  WHERE A.INSTR_CODE = B.INSTR_CODE AND 
					  CLIENT =:l_cln_code AND 
					  A.INSTR_CODE =:l_instr_code 
                 AND (POSIT_DATE >= :f_first_day AND POSIT_DATE <= :f_last_day)
                 AND B.PRICE_DATE = (SELECT MAX(PRICE_DATE) FROM MT_DLYMKTPRC WHERE PRICE_DATE <=A.POSIT_DATE); 

                IS_ANY_ORA_ERROR

                EXEC SQL SELECT CLOSING_PR INTO:l_cls_price:i_cls_price
					   FROM MT_DLYMKTPRC
					   WHERE INSTR_CODE =:l_instr_code AND
					         PRICE_DATE = (SELECT MAX(PRICE_DATE) FROM MT_DLYMKTPRC WHERE PRICE_DATE <=:f_last_day);

                IS_ANY_ORA_ERROR

                EXEC SQL SELECT SUBSTR(INSTR_NAME,1,60) 
					 INTO :l_instr_name:i_instr_name
					 FROM MT_INSTRUMENT
					 WHERE INSTR_CODE =:l_instr_code;

                IS_ANY_ORA_ERROR

         EXEC SQL SELECT  INSTR_TOT_NOM_VAL INTO :l_instr_tot_val
			         FROM MT_INSTRUMENT
			         WHERE INSTR_CODE = :l_instr_code;	  

              l_prn_cptl = l_cls_pos /l_instr_tot_val * 100; 



                EXEC SQL SELECT INSTR_ISIN,INSTR_TYPE 
					 INTO :l_instr_isin:i_instr_isin,
					      :l_instr_type:i_instr_type
					 FROM MT_INSTRUMENT
					 WHERE INSTR_CODE =:l_instr_code;

                IS_ANY_ORA_ERROR


       if((strcmp(l_instr_isin,APL_NULL_STRING )==0) &&  ((strcmp(l_instr_type,"BON")==0) || (strcmp(l_instr_type , "FMT")==0)))
       {
       fprintf(l_ptr_hbrokers_handoff_file,"%s|%s|%s|%s|%s|%s|%s|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf\n",l_cust_code,l_sys_dt,l_rbi_reg_no,l_cln_name,l_sebi_sub_acc,l_instr_code,l_instr_name,l_opn_count,l_sum_value,l_pur_value,l_sale_sum,l_sale_value,l_cls_pos,l_cls_value,l_cls_price,l_prn_cptl);
       }
      else
	   {  
       fprintf(l_ptr_hbrokers_handoff_file,"%s|%s|%s|%s|%s|%s|%s|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf|%.2lf\n",l_cust_code,l_sys_dt,l_rbi_reg_no,l_cln_name,l_sebi_sub_acc,l_instr_isin,l_instr_name,l_opn_count,l_sum_value,l_pur_value,l_sale_sum,l_sale_value,l_cls_pos,l_cls_value,l_cls_price,l_prn_cptl);
		}
	}

      if(strcmp(p_rep_name,"HYE") == 0)
		{
        EXEC SQL CLOSE instr_equt1;

       IS_ANY_ORA_ERROR
		}
      else
		{
        EXEC SQL CLOSE instr_ncur1;
		  IS_ANY_ORA_ERROR
      }
	  }	

    EXEC SQL CLOSE ccode_rept1;

	 IS_ANY_ORA_ERROR


	RETURN_SUCCESS :
		#ifdef SYS_DEBUG
			printf("Leaving Function Half_Mod_ClntDet with success\n");

		#endif
		fclose(l_ptr_hbrokers_handoff_file);
		free(l_intl_rept_struct_ha);
		fclose(l_ptr_ini_file);
		return(APL_SUCCESS);

	RETURN_FAILURE :

		#ifdef SYS_DEBUG
			printf("Leaving Function Half_Mod_ClntDet with errors\n");
		#endif

		fclose(l_ptr_hbrokers_handoff_file);
		free(l_intl_rept_struct_ha);
		return(APL_FAILURE); //AIX Warning Removal
    }

int Footer(char *footer)
{
        printf("\n Entering Footer() ");
        printf("\n footer = %s", footer);
        //fprintf(xlfile,"\n<tr><td> %s </td></tr>",footer); /*Linux Migration -Kotubabu */
        printf("\n Leaving Footer() successfully");
        return(APL_SUCCESS);
}



int main(int argc,char **argv)//AIX Migration Changes
{

#define QTR1 "FIR_QUATER"
#define QTR2 "SEC_QUATER" 
#define QTR3 "THD_QUATER"
#define QTR4 "FTH_QUATER" 
#define APL_MON_HLF1 "HLF1"
#define APL_MON_HLF2 "HLF2"
#define APL_MON_01 "JAN"
#define APL_MON_02 "FEB"
#define APL_MON_03 "MAR"
#define APL_MON_04 "APR"
#define APL_MON_05 "MAY"
#define APL_MON_06 "JUN"
#define APL_MON_07 "JUL"
#define APL_MON_08 "AUG"
#define APL_MON_09 "SEP"
#define APL_MON_10 "OCT"
#define APL_MON_11 "NOV"
#define APL_MON_12 "DEC"
#define APL_MONTH_JAN "01"
#define APL_MONTH_FEB "02"
#define APL_MONTH_MAR "03"
#define APL_MONTH_APR "04"
#define APL_MONTH_MAY "05"
#define APL_MONTH_JUN "06"
#define APL_MONTH_JUL "07"
#define APL_MONTH_AUG "08"
#define APL_MONTH_SEP "09"
#define APL_MONTH_OCT "10"
#define APL_MONTH_NOV "11"
#define APL_MONTH_DEC "12"
#define APL_MON_QTR1 "QTR1"
#define APL_MON_QTR2 "QTR2"
#define APL_MON_QTR3 "QTR3"
#define APL_MON_QTR4 "QTR4"
   struct sqlca sqlca;
 DEBUG_INFO_STRUCT_H **l_debug_info_ptr  =  NULL;/*Changed for AIX Migration*/
   INTL_ENV_DATA_STRUCT_H l_intl_env_data_h;

   FILE  *l_finifile                      	=  NULL;
   FILE  *l_logfile                       	=  NULL;
   FILE  *l_repfile                       	=  NULL;

   char  chr_l_logfile_name[PATH_LENGTH]      	=  APL_NULL_STRING;
   char  chr_uname[APL_USERID_LEN]            	=  APL_NULL_STRING;
   char  chr_custody_id_b[APL_USERID_LEN]           	=  APL_NULL_STRING;
   char  chr_passwd[APL_PASSWD_LEN]           	=  APL_NULL_STRING;
   char  chr_l_logdir[PATH_LENGTH]            	=  APL_NULL_STRING;
   char  chr_l_inifile[PATH_LENGTH]           	=  APL_NULL_STRING;
	char  chr_l_h_cname[66]								=	APL_NULL_STRING;
   char 	**temp 										=	NULL;
   char 	**chr_temp1 										=	NULL;
   char  chr_l_buf[BUFFER_LEN]                    =  APL_NULL_STRING;

   int   int_num 											=	0;
   int   int_l_retval                         	=  0;
	int   count 										= 	0;
	int   int_page											=	0;
	short l_i_cname									=	0;
	EXEC SQL VAR chr_uname  IS STRING;
   EXEC SQL VAR chr_custody_id_b IS STRING;
   EXEC SQL VAR chr_passwd IS STRING;

	EXEC SQL VAR chr_l_h_cname				IS STRING;
	
   sqlca.sqlcode = 0;
    char chr_rep_name[10] = APL_NULL_STRING;
    char chr_from_date[11] = APL_NULL_STRING;
    char chr_to_date[11] = APL_NULL_STRING;
    char chr_daily_dt[20] = APL_NULL_STRING;
	   char chr_yymn_dt[7] = APL_NULL_STRING; 
	   char chr_mnyy_dt[7] = APL_NULL_STRING; 
	   char chr_mnyy_det[7] = APL_NULL_STRING; 
		char Quat_No[5] = APL_NULL_STRING;
		char quat_yr[4] = APL_NULL_STRING;
		char chr_mon_det[4] = APL_NULL_STRING;
		char chr_myr_det[7] = APL_NULL_STRING;
		char rep_perd[5] = APL_NULL_STRING;

	memset(chr_l_h_cname,			   '\0',66);

   strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
   strcat(chr_l_inifile,"intl_sun.cfg");

	if ( ( l_finifile=fopen(chr_l_inifile,"r") ) == NULL)
   {
      APL_GOBACK_FAIL
   }


   //APL_FETCH_DB_LOGIN_DETAILS(l_finifile, chr_custody_id_b, chr_uname, chr_passwd, APL_OUT_FILE, &l_debug_info_ptr)
   APL_FETCH_DB_LOGIN_DETAILS(l_finifile, chr_custody_id_b, chr_uname, chr_passwd, APL_OUT_FILE, l_debug_info_ptr)/*& removed for AIX Migration*/

   EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;

   if (sqlca.sqlcode)
   {
      APL_GOBACK_FAIL
   }
   else
   {
		if (APL_FAILURE == CO_Rtv_RptFileName( "2M",
                                          APL_LOGFILE_DESC,
                                          100,
                                          argv[5],
                                          argv,
                                          &l_logfile,
                                          l_debug_info_ptr ) )/*& removed for AIX Migration*/
      {
      	APL_GOBACK_FAIL
      }

      if(BT_Status_Update(argv[0],
	                       argv[1],
								  argv[2],
						        APL_STARTED_STATUS,
							     l_debug_info_ptr) ==APL_FAILURE)
	     {
			  printf("Codition Failed\n");
		     APL_GOBACK_FAIL
		  }
       printf("check status in report Gener\n");

		EXEC SQL COMMIT WORK;

      if (sqlca.sqlcode)
      {
         CO_ProcMonitor(l_logfile, "Could not commit after opening chr_log file", NULL, NULL);
         APL_GOBACK_FAIL
      }

      if (APL_FAILURE == CO_RtvSysParams(l_debug_info_ptr))/*& removed for AIX Migration*/
      {
         CO_ProcMonitor(l_logfile, "Error In Getting System Parameters", NULL, NULL);
         CO_PrnErr(l_debug_info_ptr);
         APL_GOBACK_FAIL
      }

      strcpy(l_intl_env_data_h.usr, argv[3]);
      strcpy(l_intl_env_data_h.h_mode, argv[4]);
      strcpy(l_intl_env_data_h.processtion, argv[5]);
      strcpy(l_intl_env_data_h.auth_req, argv[6]);
      strcpy(l_intl_env_data_h.subprocess, argv[7]);
      strcpy(l_intl_env_data_h.h_process, argv[8]);

      printf("Before CO_SplitStr Function\n");

	   if (APL_FAILURE == CO_SplitStr( argv[9],
                                       '|',
                                       &int_num,
                                       &temp ))
      {
      	CO_ProcMonitor(l_logfile, "Failure from CBStrSplitFn", NULL, NULL);
         APL_GOBACK_FAIL
      }
		else	
			CO_ProcMonitor(l_logfile,"Successful in CBStrSplitFn",NULL,NULL);
	
		
		if(int_num == 0)
		{
			CO_ProcMonitor(l_logfile,"Improper Number Of Arguments",NULL,NULL);
			APL_GOBACK_FAIL
		}


   strcpy(chr_rep_name,temp[0]);
	strcpy(rep_perd,temp[1]);
	printf("Value of the report Period==|%s|\n",rep_perd);
	  
	printf("Name of the report ==|%s|\n",chr_rep_name);

	if(strcmp(chr_rep_name,"DTR")== 0)
			 { 
             printf("Inside the RRDS report\n");
             strcpy(chr_rep_name,temp[0]);
				 strcat(chr_rep_name,APL_NULL_STRING);
             strcpy(chr_from_date,temp[1]);
				 printf("from date from FE ==|%s|\n",chr_from_date);
				 strcat(chr_from_date,APL_NULL_STRING);
				 strcpy(chr_to_date,chr_from_date);
	
				 if (APL_FAILURE == Daily_Rep_ClntInst_HDFC(chr_rep_name,chr_from_date,chr_to_date,argv,l_logfile,&l_intl_env_data_h,l_debug_info_ptr))
				{
					fprintf(l_logfile,"Unsuccessful in DTR_Mod_ClntInst\n");
		            	        APL_GOBACK_FAIL
				 }
				else
				        fprintf(l_logfile,"Successful in DTR_Mod_ClntInst \n");
				 
			 }
       else 
			 if (strcmp(chr_rep_name,"DDR") == 0) 
          {
            strcpy(chr_rep_name,temp[0]);
			       strcat(chr_rep_name,APL_NULL_STRING);
				    strcpy(chr_from_date,temp[1]);
			       strcat(chr_rep_name,APL_NULL_STRING);
					 strcpy(chr_to_date,chr_from_date);
                if (APL_FAILURE == Daily_Rep_ClntInst_HDFC(chr_rep_name,chr_from_date,chr_to_date,argv,l_logfile,&l_intl_env_data_h,l_debug_info_ptr))
				{
					sprintf(chr_l_buf,"Unsuccessful in DDR_Mod_ClntInst\n");
					CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
            	APL_GOBACK_FAIL
            }
				else
				{
					sprintf(chr_l_buf,"Successful in DDR_Mod_ClntInst \n");
					CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
				}
				
          }
          else
				 if (strcmp(chr_rep_name,"DTS") == 0)
				 {
				    strcpy(chr_daily_dt,temp[1]);
					 printf("Before passing to Function==|%s|\n",chr_daily_dt);

         if (APL_FAILURE == Sum_Rep_ClntInst(chr_rep_name,chr_daily_dt,argv,l_logfile,&l_intl_env_data_h,l_debug_info_ptr))
            {
					sprintf(chr_l_buf,"Unsuccessful in DTS_Mod_ClntInst\n");
					CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
            	APL_GOBACK_FAIL
            }
				else
				{
					sprintf(chr_l_buf,"Successful in DTS_Mod_ClntInst \n");
               CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
            }
			}
         else
				 if (strcmp(chr_rep_name,"DDS") == 0)
				 {
				    strcpy(chr_daily_dt,temp[1]);

         if (APL_FAILURE == Sum_Rep_ClntInst(chr_rep_name,chr_daily_dt,argv,l_logfile,&l_intl_env_data_h,l_debug_info_ptr))
            {
					sprintf(chr_l_buf,"Unsuccessful in DDS_Mod_ClntInst\n");
					CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
            	APL_GOBACK_FAIL
            }
				else
				{
					sprintf(chr_l_buf,"Successful in DDS_Mod_ClntInst \n");
               CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
            }
            }
            else
            if (strcmp(chr_rep_name,"RBI") == 0)
            {
                   strcpy(chr_daily_dt,temp[1]);
                  printf("Before passing to Function==|%s|\n",chr_daily_dt);
 
	            if (APL_FAILURE == RBI_Mod_ClntInst(chr_rep_name,chr_daily_dt,argv,l_logfile,&l_intl_env_data_h,l_debug_info_ptr))
	               {	
                       sprintf(chr_l_buf,"Unsuccessful in RBI_Mod_ClntInst\n");
                  CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
                  APL_GOBACK_FAIL
	             }
              else	
              {
                sprintf(chr_l_buf,"Successful in RBI_Mod_ClntInst \n");
                CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
              }
             }
	     
              else
				if (strcmp(chr_rep_name,"MPR") == 0)
            { 
				    strcpy(chr_mon_det,temp[1]);
					 if (strcmp(APL_MON_01,chr_mon_det) == 0)
                 {
						  strcpy(chr_myr_det,APL_MONTH_JAN);
						  strcat(chr_myr_det,temp[2]);
					  }
					 else if (strcmp(APL_MON_02,chr_mon_det) == 0)
					  {
						  strcpy(chr_myr_det,APL_MONTH_FEB);
						  strcat(chr_myr_det,temp[2]);
					  }
                 else if (strcmp(APL_MON_03,chr_mon_det) == 0)
					  {
						  strcpy(chr_myr_det,APL_MONTH_MAR);
						  strcat(chr_myr_det,temp[2]);
                 }
                 else if (strcmp(APL_MON_04,chr_mon_det) == 0)
					  {
						  strcpy(chr_myr_det,APL_MONTH_APR);
						  strcat(chr_myr_det,temp[2]);
                 }
                 else if (strcmp(APL_MON_05,chr_mon_det) == 0)
					  {
						  strcpy(chr_myr_det,APL_MONTH_MAY);
						  strcat(chr_myr_det,temp[2]);
                 }
                 else if (strcmp(APL_MON_06,chr_mon_det) == 0)
					  {
						  strcpy(chr_myr_det,APL_MONTH_JUN);
						  strcat(chr_myr_det,temp[2]);
                 }
                 else if (strcmp(APL_MON_07,chr_mon_det) == 0)
					  {
						  strcpy(chr_myr_det,APL_MONTH_JUL);
						  strcat(chr_myr_det,temp[2]);
                 }
                 else if (strcmp(APL_MON_08,chr_mon_det) == 0)
					  {
						  strcpy(chr_myr_det,APL_MONTH_AUG);
						  strcat(chr_myr_det,temp[2]);
                 }
                 else if (strcmp(APL_MON_09,chr_mon_det) == 0)
					  {
						  strcpy(chr_myr_det,APL_MONTH_SEP);
						  strcat(chr_myr_det,temp[2]);
                 }
                 else if (strcmp(APL_MON_10,chr_mon_det) == 0)
					  {
						  strcpy(chr_myr_det,APL_MONTH_OCT);
						  strcat(chr_myr_det,temp[2]);
                 }
                 else if (strcmp(APL_MON_11,chr_mon_det) == 0)
					  {
						  strcpy(chr_myr_det,APL_MONTH_NOV);
						  strcat(chr_myr_det,temp[2]);
                 }
                 else if (strcmp(APL_MON_12,chr_mon_det) == 0)
					  {
						  strcpy(chr_myr_det,APL_MONTH_DEC);
						  strcat(chr_myr_det,temp[2]);
                 }
					  printf("Passing the DateMonth for Funtion ==|%s|\n",chr_myr_det);

         if (APL_FAILURE == MPR_Mod_ClntInst(chr_rep_name,chr_myr_det,argv,l_logfile,&l_intl_env_data_h,l_debug_info_ptr))
            {
					sprintf(chr_l_buf,"Unsuccessful in MPR_Mod_ClntInst\n");
					CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
            	APL_GOBACK_FAIL
            }
				else
				{
					sprintf(chr_l_buf,"Successful in MPR_Mod_ClntInst \n");
					CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
				}	
            }
            else
				if ((strcmp(chr_rep_name,"HYE") == 0) && ((strcmp(rep_perd,APL_MON_HLF1)== 0) ||(strcmp(rep_perd,APL_MON_HLF2) == 0)))
            { 
				    strcpy(Quat_No,temp[1]);
               if (strcmp(Quat_No,APL_MON_HLF1) == 0)
					{
						 strcpy(chr_mnyy_det,"01");
						 strcpy(quat_yr,temp[2]);
						 strcat(chr_mnyy_det,quat_yr);
					}

               if (strcmp(Quat_No,APL_MON_HLF2) == 0)
					{
						 strcpy(chr_mnyy_det,"07");
						 strcpy(quat_yr,temp[2]);
						 strcat(chr_mnyy_det,quat_yr);
					}

					 printf("HYE Half before passing to Function==|%s|\n",chr_mnyy_det);

         if (APL_FAILURE == Half_Mod_ClntDet(chr_rep_name,chr_mnyy_det,argv,l_logfile,&l_intl_env_data_h,l_debug_info_ptr))
            {
					printf("Inside the HYE Success status\n");
					sprintf(chr_l_buf,"Unsuccessful in Half_Mod_ClntDet\n");
					CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
            	APL_GOBACK_FAIL
            }
				else
				{
					sprintf(chr_l_buf,"Successful in Half_Mod_ClntDet \n");
					CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
				}	
            }
            else
				if ((strcmp(chr_rep_name,"HYD") == 0) && ((strcmp(rep_perd,APL_MON_HLF1)== 0) ||(strcmp(rep_perd,APL_MON_HLF2) == 0)))
            { 
                printf("HYD Enter Into HalfYearly Rep of HYD\n");
                printf("Inside the HYD six months report\n");

					 strcpy(Quat_No,temp[1]);
					 printf("In HYD Quat no ==|%s|\n",Quat_No);
               if (strcmp(Quat_No,APL_MON_HLF1) == 0)
					{
						 printf("Insdie HYE REPORT\n");
						 strcpy(chr_mnyy_det,"01");
						 strcpy(quat_yr,temp[2]);
						 printf("After Copy temp2==|%s|\n",quat_yr);
						 strcat(chr_mnyy_det,quat_yr);
						 printf("After add yr==|%s|\n",chr_mnyy_det);
					}

               if (strcmp(Quat_No,APL_MON_HLF2) == 0)
					{
						 strcpy(chr_mnyy_det,"07");
						 strcpy(quat_yr,temp[2]);
						 strcat(chr_mnyy_det,quat_yr);
               }

					 printf("Before passing to Function==|%s|\n",chr_mnyy_det);

         if (APL_FAILURE == Half_Mod_ClntDet(chr_rep_name,chr_mnyy_det,argv,l_logfile,&l_intl_env_data_h,l_debug_info_ptr))
            {
					printf("Inside the HYD Success status\n");
					sprintf(chr_l_buf,"Unsuccessful in Half_Mod_ClntDet\n");
					CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
            	APL_GOBACK_FAIL
            }
				else
				{
					sprintf(chr_l_buf,"Successful in Half_Mod_ClntDet\n");
					CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
				}	
            }
            else
				if ((strcmp(chr_rep_name,"HYE") == 0) && ((strcmp(rep_perd,APL_MON_QTR1)== 0) ||(strcmp(rep_perd,APL_MON_QTR2) == 0) || (strcmp(rep_perd,APL_MON_QTR3) == 0) || (strcmp(rep_perd,APL_MON_QTR4) == 0)))
             {
              strcpy(Quat_No,temp[1]);
              printf("Value of Quat No==|%s|\n",Quat_No);
              if(strcmp(Quat_No,"QTR1") == 0)
              {
                 strcpy(chr_mnyy_det,"01");
                 strcpy(quat_yr,temp[2]);
                 strcat(chr_mnyy_det,quat_yr);
              }
              if(strcmp(Quat_No,"QTR2") == 0)
              {
                strcpy(chr_mnyy_det,"04");
                strcpy(quat_yr,temp[2]);
                strcat(chr_mnyy_det,quat_yr);
              }
              if (strcmp(Quat_No,"QTR3") == 0)
              {
                strcpy(chr_mnyy_det,"07");
                strcpy(quat_yr,temp[2]);
                strcat(chr_mnyy_det,quat_yr);
              }
             if (strcmp(Quat_No,"QTR4") == 0)
			    {
				     strcpy(chr_mnyy_det,"10");
				     strcpy(quat_yr,temp[2]);
				    strcat(chr_mnyy_det,quat_yr);
				 }	  
             printf("Before passing to Function==|%s|\n",chr_mnyy_det);
  
             if (APL_FAILURE == Quat_Mod_ClntDet(chr_rep_name,chr_mnyy_det,argv,l_logfile,&l_intl_env_data_h,l_debug_info_ptr))
              {	
                printf("Inside the Quat Success status\n");
                sprintf(chr_l_buf,"Unsuccessful in Quat_Mod_ClntDet\n");
                CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
               APL_GOBACK_FAIL
              }
            else
	            {
	              sprintf(chr_l_buf,"Successful in Quat_Mod_ClntDet \n");
	              CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
	            }
	            }	
             else 
				 if ((strcmp(chr_rep_name,"HYD") == 0) && ((strcmp(rep_perd,APL_MON_QTR1)== 0) ||(strcmp(rep_perd,APL_MON_QTR2) == 0) || (strcmp(rep_perd,APL_MON_QTR3) == 0) || (strcmp(rep_perd,APL_MON_QTR4) == 0)))
             {
              strcpy(Quat_No,temp[1]);
              if(strcmp(Quat_No,"QTR1") == 0)
              {
                 strcpy(chr_mnyy_det,"01");
                 strcpy(quat_yr,temp[2]);
                 strcat(chr_mnyy_det,quat_yr);
              }
              if(strcmp(Quat_No,"QTR2") == 0)
              {
                strcpy(chr_mnyy_det,"04");
                strcpy(quat_yr,temp[2]);
                strcat(chr_mnyy_det,quat_yr);
              }
              if (strcmp(Quat_No,"QTR3") == 0)
              {
                strcpy(chr_mnyy_det,"07");
                strcpy(quat_yr,temp[2]);
                strcat(chr_mnyy_det,quat_yr);
              }
             if (strcmp(Quat_No,"QTR4") == 0)
			    {
				     strcpy(chr_mnyy_det,"10");
				     strcpy(quat_yr,temp[2]);
				    strcat(chr_mnyy_det,quat_yr);
				 }	  
             printf("Before passing to Function==|%s|\n",chr_mnyy_det);
  
             if (APL_FAILURE == Quat_Mod_ClntDet(chr_rep_name,chr_mnyy_det,argv,l_logfile,&l_intl_env_data_h,l_debug_info_ptr))
              {	
                printf("Inside the Quat Success status\n");
                sprintf(chr_l_buf,"Unsuccessful in Quat_Mod_ClntDet\n");
                CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
               APL_GOBACK_FAIL
              }
            else
	            {
	              sprintf(chr_l_buf,"Successful in Quat_Mod_ClntDet \n");
	              CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
	            }
               }
               else
				   if (strcmp(chr_rep_name,"AUC") == 0)
               { 
                printf("Enter Into Monthly Rep of AUC\n");

				    strcpy(chr_mon_det,temp[1]);
					 if (strcmp(APL_MON_01,chr_mon_det) == 0)
                 {
						  strcpy(chr_myr_det,APL_MONTH_JAN);
						  strcat(chr_myr_det,temp[2]);
					  }
					 else if (strcmp(APL_MON_02,chr_mon_det) == 0)
					  {
						  strcpy(chr_myr_det,APL_MONTH_FEB);
						  strcat(chr_myr_det,temp[2]);
					  }
                 else if (strcmp(APL_MON_03,chr_mon_det) == 0)
					  {
						  strcpy(chr_myr_det,APL_MONTH_MAR);
						  strcat(chr_myr_det,temp[2]);
                 }
                 else if (strcmp(APL_MON_04,chr_mon_det) == 0)
					  {
						  strcpy(chr_myr_det,APL_MONTH_APR);
						  strcat(chr_myr_det,temp[2]);
                 }
                 else if (strcmp(APL_MON_05,chr_mon_det) == 0)
					  {
						  strcpy(chr_myr_det,APL_MONTH_MAY);
						  strcat(chr_myr_det,temp[2]);
                 }
                 else if (strcmp(APL_MON_06,chr_mon_det) == 0)
					  {
						  strcpy(chr_myr_det,APL_MONTH_JUN);
						  strcat(chr_myr_det,temp[2]);
                 }
                 else if (strcmp(APL_MON_07,chr_mon_det) == 0)
					  {
						  strcpy(chr_myr_det,APL_MONTH_JUL);
						  strcat(chr_myr_det,temp[2]);
                 }
                 else if (strcmp(APL_MON_08,chr_mon_det) == 0)
					  {
						  strcpy(chr_myr_det,APL_MONTH_AUG);
						  strcat(chr_myr_det,temp[2]);
                 }
                 else if (strcmp(APL_MON_09,chr_mon_det) == 0)
					  {
						  strcpy(chr_myr_det,APL_MONTH_SEP);
						  strcat(chr_myr_det,temp[2]);
                 }
                 else if (strcmp(APL_MON_10,chr_mon_det) == 0)
					  {
						  strcpy(chr_myr_det,APL_MONTH_OCT);
						  strcat(chr_myr_det,temp[2]);
                 }
                 else if (strcmp(APL_MON_11,chr_mon_det) == 0)
					  {
						  strcpy(chr_myr_det,APL_MONTH_NOV);
						  strcat(chr_myr_det,temp[2]);
                 }
                 else if (strcmp(APL_MON_12,chr_mon_det) == 0)
					  {
						  strcpy(chr_myr_det,APL_MONTH_DEC);
						  strcat(chr_myr_det,temp[2]);
                 }
					 printf("AUCBefore passing to Function==|%s|\n",chr_myr_det);

         if (APL_FAILURE == AUC_Mod_ClntInst(chr_rep_name,chr_myr_det,argv,l_logfile,&l_intl_env_data_h,l_debug_info_ptr))
            {
					sprintf(chr_l_buf,"Unsuccessful in AUC_Mod_ClntInst\n");
					CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
            	APL_GOBACK_FAIL
            }
				else
				{
					sprintf(chr_l_buf,"Successful in AUC_Mod_ClntInst \n");
					CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
            	APL_GOBACK_SUCCESS
            }
            }
	   }
			
	fclose(l_finifile);
	
	RETURN_SUCCESS:
	{
		 printf("Before Updation Process\n");

       if(APL_FAILURE == BT_Status_Completed(argv[0],argv[1],argv[2],l_debug_info_ptr))
	     {
		       APL_GOBACK_FAIL
        }


      EXEC SQL COMMIT WORK RELEASE;
      CO_Proc_RptClose(l_logfile,l_debug_info_ptr);
		CO_Proc_RptClose(l_repfile,l_debug_info_ptr);
		exit(0);
	}		
	
	RETURN_FAILURE:
	{
		EXEC SQL ROLLBACK WORK RELEASE;
		CO_Proc_RptClose(l_logfile,l_debug_info_ptr);
		CO_Proc_RptClose(l_repfile,l_debug_info_ptr);
		exit(-1);
	}
}

