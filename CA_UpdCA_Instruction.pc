/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
*/
/*********************************************************************
 *
 * Module Name         :      Master Maintenance
 *
 * File Name           :      MT_UpdCA_Instruction.pc
 *
 * Description         :      This file contains db functions for updating
 *                            Master Details.
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author      Description     RFS No.
 * ---------   --------  ------------  -------------   ---------
 * 20/12/2006   1.0       Jiger        	New file       RFS_CA_020
 *
 *********************************************************************/


#include "CO_HostStructdef.h"
#include "CA_Common.h"
#include "WI_Interface.h"

EXEC SQL INCLUDE SQLCA.H;




int CA_UpdCA_INSTRUCTION(CA_INSTRUCTION_STRUCT_H *p_ca_instruction_struct_h,
				INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
				DEBUG_INFO_STRUCT_H **l_debug_info_ptr) 
{

	Alert("\n\t\t At the beginning of function CA_UpdCA_INSTRUCTION\n");
	printf("  \t\t -------------------------------------------------\n");
	/* Variable Declarations */
  CA_INSTRUCTION_STRUCT_I *l_ca_instruction_struct_i;

  struct sqlca sqlca;

  char chr_acc_stamp_compare[APL_DATE_LEN] = APL_NULL_STRING;
  char chr_status_compare[APL_STATUS_LEN] = APL_NULL_STRING;
  char chr_sys_access_stamp[APL_DATE_LEN] = APL_NULL_STRING;
  short p_i_maker, p_i_makerdt, p_i_checker, p_i_checkerdt, p_i_access_stamp;
  short p_i_access_stamp_compare;
  short p_i_status = 0;
  int int_error_flag = APL_SUCCESS;
  int int_l_rowexists = 0;
   char  *l_key_codes[3];
   char  *l_key_values[3];
   char  chr_l_table_name[50] = APL_NULL_STRING;
  char  chr_l_field_val[40] = APL_NULL_STRING;
	char l_auto_auth[2] = APL_NULL_STRING;
	short l_auto_auth_i = -1;

	int	int_retval = APL_SUCCESS;
#ifdef APL_THREADS
    APL_SET_CONTEXT
    EXEC SQL CONTEXT USE :my_ctx_local;
#endif

	 APL_FUNCTION_ENTER(APL_OUT_FILE)

  	l_ca_instruction_struct_i = (CA_INSTRUCTION_STRUCT_I*)calloc(1,sizeof(CA_INSTRUCTION_STRUCT_I));

  	APL_MALLOC_FAIL(l_ca_instruction_struct_i)

		
  	p_i_maker = 0;
  	p_i_makerdt = 0;
  	p_i_checker = 0;
  	p_i_checkerdt = 0;
  	p_i_access_stamp = 0;
  	p_i_access_stamp_compare = 0;

	printf("Initializing the indicator variables\n");

	if(!strlen(p_ca_instruction_struct_h ->h_corp_id))  
		l_ca_instruction_struct_i -> i_corp_id= -1;
        else
                l_ca_instruction_struct_i -> i_corp_id= 0;
	printf("1\n");
        if(!strlen(p_ca_instruction_struct_h ->h_instr_code))  
		l_ca_instruction_struct_i -> i_instr_code= -1;
        else
                l_ca_instruction_struct_i -> i_instr_code= 0;
	printf("1\n");
        if(!strlen(p_ca_instruction_struct_h ->h_cln_code))  
		l_ca_instruction_struct_i -> i_cln_code= -1;
        else
                l_ca_instruction_struct_i -> i_cln_code= 0;
	printf("1\n");
        if(!strlen(p_ca_instruction_struct_h ->h_ca_event))  
		l_ca_instruction_struct_i -> i_ca_event= -1;
        else
                l_ca_instruction_struct_i -> i_ca_event= 0;
	printf("1\n");
        if(!strlen(p_ca_instruction_struct_h ->h_instruc_date)) 
		l_ca_instruction_struct_i -> i_instruc_date= -1;
        else
                l_ca_instruction_struct_i -> i_instruc_date= 0;

	printf("1\n");

        if(!strlen(p_ca_instruction_struct_h ->h_maker))  
		l_ca_instruction_struct_i -> i_maker= -1;
        else
                l_ca_instruction_struct_i -> i_maker= 0;
	printf("1\n");
        if(!strlen(p_ca_instruction_struct_h ->h_maker_dt)) 
		l_ca_instruction_struct_i -> i_maker_dt= -1;
        else
                l_ca_instruction_struct_i -> i_maker_dt= 0;
	printf("1\n");
        if(!strlen(p_ca_instruction_struct_h ->h_checker))  
		l_ca_instruction_struct_i -> i_checker= -1;
        else
                l_ca_instruction_struct_i -> i_checker= 0;
	printf("1\n");
        if(!strlen(p_ca_instruction_struct_h ->h_checker_dt)) 
		l_ca_instruction_struct_i -> i_checker_dt= -1;
        else
                l_ca_instruction_struct_i -> i_checker_dt= 0;
	printf("1\n");
        if(!strlen(p_ca_instruction_struct_h ->h_access_stamp)) 
		l_ca_instruction_struct_i -> i_access_stamp= -1;
        else
                l_ca_instruction_struct_i -> i_access_stamp= 0;
	printf("1\n");

	printf("Finished initializing the indicator variables\n");

 
	if(CO_RtvMachDtTime(chr_sys_access_stamp,l_debug_info_ptr) !=APL_SUCCESS)
	{
		APL_GOBACK_FAIL
	}
	
	// Get the Instr Code for the given Corp ID in INP as well as MOD mode
/*	
	EXEC SQL
	SELECT 	INSTR_CODE into :p_ca_instruction_struct_h->h_instr_code:l_ca_instruction_struct_i->i_instr_code
	FROM	CAEVENT
	WHERE	CORP_ID = :p_ca_instruction_struct_h->h_corp_id;
	IS_ANY_ORA_ERROR
*/	

	strcpy(p_ca_instruction_struct_h->h_instr_code, APL_NULL_STRING);
 	memset(p_ca_instruction_struct_h->h_instr_code,APL_NULL_CHAR,8);
	strncpy(p_ca_instruction_struct_h->h_instr_code, p_ca_instruction_struct_h->h_corp_id, strlen(p_ca_instruction_struct_h->h_corp_id)-11);
	strcat(p_ca_instruction_struct_h->h_instr_code, APL_NULL_STRING); 

        l_ca_instruction_struct_i -> i_instr_code= 0;


	// Check the Auto Authorization flag in WI_CLIENT_MAP for the given Client
	sqlca.sqlcode=0;
        EXEC SQL
        SELECT  distinct AUTO_AUTH into :l_auto_auth:l_auto_auth_i
        FROM    WI_CLIENT_MAP
        WHERE WI_LOGIN = :p_intl_envdatastruct_h->usr;
        /*
	WHERE   CLN_CODE = :p_ca_instruction_struct_h ->h_cln_code
                OR CLN_MASTER = :p_ca_instruction_struct_h ->h_cln_code;
	*/
	printf("For Auto Auth Flag -- ORA [%d]\n", sqlca.sqlcode);
        fflush(stdout);
        IS_ANY_ORA_ERROR

        printf("l_auto_auth |%s|\n", l_auto_auth);


 	if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_INPUT))
	{

		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered Input of Function MT_UpdCA_INSTRUCTION\n",NULL,p_intl_envdatastruct_h);
 	}

   	strcpy(p_ca_instruction_struct_h->h_maker,p_intl_envdatastruct_h->usr);
		l_ca_instruction_struct_i->i_maker=0;
  	strcpy(p_ca_instruction_struct_h->h_maker_dt,chr_sys_access_stamp);
		l_ca_instruction_struct_i->i_maker_dt=0;
	strcpy(p_ca_instruction_struct_h->h_access_stamp,chr_sys_access_stamp);
		l_ca_instruction_struct_i->i_access_stamp =0;


	if(strcmp(l_auto_auth, "Y") == 0)
	{
		strcpy(p_ca_instruction_struct_h->h_status, "AA");
			l_ca_instruction_struct_i->i_status = 0;
		strcpy(p_ca_instruction_struct_h ->h_checker, p_intl_envdatastruct_h->usr);
			l_ca_instruction_struct_i->i_checker = 0;
		strcpy(p_ca_instruction_struct_h ->h_checker_dt, chr_sys_access_stamp);
			l_ca_instruction_struct_i->i_checker_dt = 0;
	}
	else
	{
		strcpy(p_ca_instruction_struct_h->h_status,STATUS_UAUTH);
                	l_ca_instruction_struct_i->i_status = 0;
	}

	strcpy(p_ca_instruction_struct_h->h_instruc_date, p_ca_instruction_struct_h->h_access_stamp);
		l_ca_instruction_struct_i->i_instruc_date = 0;
	strcpy(p_ca_instruction_struct_h->h_instructed, "Y");
		l_ca_instruction_struct_i->i_instructed = 0;

	Alert("\n ACCESS STAMP = |%s|\n", p_ca_instruction_struct_h->h_access_stamp);
	Alert("\n STATUS = |%s|\n", p_ca_instruction_struct_h->h_status);
	Alert("\n INSTRUCTION DATE = |%s|\n", p_ca_instruction_struct_h->h_instruc_date);
	Alert("\n INSTRUCTED = |%s|\n", p_ca_instruction_struct_h->h_instructed);

	printf("********************************************\n");
	printf("\nInserting values in ca_instruction\n");
        //AIX - Warnings Removal -- addded int 
	printf("CORP_ID		-- |%s|--[%d]\n", p_ca_instruction_struct_h->h_corp_id, (int)strlen(p_ca_instruction_struct_h->h_corp_id));
	printf("INSTR_CODE	-- |%s|--[%d]\n", p_ca_instruction_struct_h->h_instr_code, (int)strlen(p_ca_instruction_struct_h->h_instr_code));
	printf("CLN_CODE	-- |%s|--[%d]\n", p_ca_instruction_struct_h->h_cln_code, (int)strlen(p_ca_instruction_struct_h->h_cln_code));
	printf("CA_EVENT	-- |%s|--[%d]\n", p_ca_instruction_struct_h->h_ca_event, (int)strlen(p_ca_instruction_struct_h->h_ca_event));
	printf("INSTRUCT_DATE	-- |%s|--[%d]\n", p_ca_instruction_struct_h->h_instruc_date, (int)strlen(p_ca_instruction_struct_h->h_instruc_date));
	printf("INP_QTY		-- |%f|\n", p_ca_instruction_struct_h->h_inp_qty);
	printf("OVER_SUB	-- |%f|\n", p_ca_instruction_struct_h->h_over_sub);
	printf("MAKER		-- |%s|--[%d]\n", p_ca_instruction_struct_h->h_maker, (int)strlen(p_ca_instruction_struct_h->h_maker));
	printf("MAKER_DATE	-- |%s|--[%d]\n", p_ca_instruction_struct_h->h_maker_dt, (int)strlen(p_ca_instruction_struct_h->h_maker_dt));
	printf("CHECKER		-- |%s|--[%d]\n", p_ca_instruction_struct_h->h_checker, (int)strlen(p_ca_instruction_struct_h->h_checker));
	printf("CHECKER_DATE	-- |%s|--[%d]\n", p_ca_instruction_struct_h->h_checker_dt, (int)strlen(p_ca_instruction_struct_h->h_checker_dt));
	printf("ACCESS_STAMP	-- |%s|--[%d]\n", p_ca_instruction_struct_h->h_access_stamp, (int)strlen(p_ca_instruction_struct_h->h_access_stamp));
	printf("INSTRUCTED	-- |%s|--[%d]\n", p_ca_instruction_struct_h->h_instructed, (int)strlen(p_ca_instruction_struct_h->h_instructed));
	printf("STATUS		-- |%s|--[%d]\n", p_ca_instruction_struct_h->h_status, (int)strlen(p_ca_instruction_struct_h->h_status));
	printf("NO_ACTION	-- |%f|\n", p_ca_instruction_struct_h->h_no_action);
	printf("NO OF RESOLU	-- |%d|\n", p_ca_instruction_struct_h->h_num_of_resolutions);
	printf("********************************************\n");

	sqlca.sqlcode = 0;

	EXEC SQL INSERT INTO CA_INSTRUCTION VALUES (:p_ca_instruction_struct_h:l_ca_instruction_struct_i);

	printf("FOR Insert in CA_INSTRUCTION -- ORA [%d]\n", sqlca.sqlcode);

		IS_ANY_ORA_ERROR_AND_DUPLICATE(MAP_DET_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
	}
	else
	{

	l_key_codes[0] = "CORP_ID";
	l_key_codes[1] = "CLN_CODE";
	l_key_codes[2] = APL_NULL_STRING;
	
	l_key_values[0] = p_ca_instruction_struct_h -> h_corp_id;
	l_key_values[1] = p_ca_instruction_struct_h -> h_cln_code;
	l_key_values[2] = APL_NULL_STRING;

		
   	strcpy(chr_l_table_name,"CA_INSTRUCTION");

    	int_retval = CR_Rtv_MastChldChrVal( l_key_codes,
                                        l_key_values,
                                        chr_l_table_name,
                                        "ACCESS_STAMP",
                                        chr_l_field_val,
                                        l_debug_info_ptr);

    	if (int_retval != APL_SUCCESS)
         	APL_GOBACK_FAIL

	strcpy(chr_acc_stamp_compare,chr_l_field_val);
    
	int_retval = CR_Rtv_MastChldChrVal( l_key_codes,
                                        l_key_values,
                                        chr_l_table_name,
                                        "STATUS",
                                        chr_l_field_val,
                                        l_debug_info_ptr);

    	if (int_retval != APL_SUCCESS)
         	APL_GOBACK_FAIL

	strcpy(chr_status_compare,chr_l_field_val);
	}

 	if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_MODIFY))
	{
  		p_i_checker = -1;
  		p_i_checkerdt = -1;
		strcpy(p_ca_instruction_struct_h->h_checker,APL_NULL_STRING);
		strcpy(p_ca_instruction_struct_h->h_checker_dt,APL_NULL_STRING);

		APL_IF_DEBUG
 		{
  			CO_ProcMonitor(APL_OUT_FILE, "Entered modify of Function MT_ModDBNoDlvDet\n",NULL,p_intl_envdatastruct_h);
 		}

	   	if (!strcmp(p_ca_instruction_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   	{
			strcpy(p_ca_instruction_struct_h->h_access_stamp,chr_sys_access_stamp);
			l_ca_instruction_struct_i->i_access_stamp =0;

			strcpy(p_ca_instruction_struct_h->h_instruc_date, p_ca_instruction_struct_h->h_access_stamp);
                		l_ca_instruction_struct_i->i_instruc_date = 0;
        		strcpy(p_ca_instruction_struct_h->h_instructed, "Y");
                		l_ca_instruction_struct_i->i_instructed = 0;

        		Alert("\n ACCESS STAMP = |%s|\n", p_ca_instruction_struct_h->h_access_stamp);
        		Alert("\n STATUS = |%s|\n", p_ca_instruction_struct_h->h_status);
        		Alert("\n INSTRUCTION DATE = |%s|\n", p_ca_instruction_struct_h->h_instruc_date);
        		Alert("\n INSTRUCTED = |%s|\n", p_ca_instruction_struct_h->h_instructed);

        		printf("\nInserting values in ca_instruction\n");

			// JC - 07-05-2007 -- Added the condition below
			if(strcmp(l_auto_auth, "Y") == 0)
			{
			EXEC SQL UPDATE CA_INSTRUCTION  SET 
            			MAKER =:p_intl_envdatastruct_h->usr:p_i_maker,
				MAKER_DT =:chr_sys_access_stamp:p_i_makerdt,
				CHECKER ='SYSTEM',
				CHECKER_DT =:chr_sys_access_stamp:p_i_access_stamp,
				INSTRUC_DATE = :p_ca_instruction_struct_h->h_access_stamp, //Kalyan
				ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp,
				INP_QTY =:p_ca_instruction_struct_h->h_inp_qty,
				OVER_SUB =:p_ca_instruction_struct_h->h_over_sub,
				NO_ACTION =:p_ca_instruction_struct_h->h_no_action,
				NUM_OF_RESOLUTIONS =:p_ca_instruction_struct_h->h_num_of_resolutions,
				STATUS = 'AA'
				WHERE 
					CORP_ID =:p_ca_instruction_struct_h->h_corp_id AND 
					CLN_CODE =:p_ca_instruction_struct_h->h_cln_code;
              
					IS_ANY_ORA_ERROR;	
			}
			else
			{
				EXEC SQL UPDATE CA_INSTRUCTION  SET
					MAKER =:p_intl_envdatastruct_h->usr:p_i_maker,
					MAKER_DT =:chr_sys_access_stamp:p_i_makerdt,
					CHECKER = '',
					CHECKER_DT = '',
					ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp,
					INP_QTY =:p_ca_instruction_struct_h->h_inp_qty,
					OVER_SUB =:p_ca_instruction_struct_h->h_over_sub,
					NO_ACTION =:p_ca_instruction_struct_h->h_no_action,
					INSTRUC_DATE = :p_ca_instruction_struct_h->h_access_stamp, //Kalyan
					NUM_OF_RESOLUTIONS =:p_ca_instruction_struct_h->h_num_of_resolutions,
					STATUS = 'UU'
					WHERE
					CORP_ID =:p_ca_instruction_struct_h->h_corp_id AND
                                        CLN_CODE =:p_ca_instruction_struct_h->h_cln_code;

                                        IS_ANY_ORA_ERROR;
			}
	   	}
	   	else 
	   	{
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   	} 
	}

 	if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_AUTHORISE))
	{

		APL_IF_DEBUG
 		{
  			CO_ProcMonitor(APL_OUT_FILE, "Entered authorize of Function MT_ModDBNoDlvDet\n",NULL,p_intl_envdatastruct_h);
 		}

		if (!strcmp(p_ca_instruction_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   	{
   			if(strcmp(p_ca_instruction_struct_h->h_status,STATUS_DEL_UAUTH))
	    		{
	    			strcpy(p_ca_instruction_struct_h->h_access_stamp,chr_sys_access_stamp);
	    			l_ca_instruction_struct_i->i_access_stamp =0;
   	    			strcpy(p_ca_instruction_struct_h->h_checker,p_intl_envdatastruct_h->usr);
	    			l_ca_instruction_struct_i->i_checker=0;
  	    			strcpy(p_ca_instruction_struct_h->h_checker_dt,chr_sys_access_stamp);
	    			l_ca_instruction_struct_i->i_checker_dt=0;
          			strcpy(p_ca_instruction_struct_h->h_status,STATUS_AUTH);
	    			l_ca_instruction_struct_i->i_status =0;

	    			EXEC SQL 
				UPDATE CA_INSTRUCTION 
				SET	CHECKER =:p_intl_envdatastruct_h->usr:p_i_checker,
            				CHECKER_DT =:chr_sys_access_stamp:p_i_access_stamp,
					ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp,
            				STATUS =:p_ca_instruction_struct_h->h_status:l_ca_instruction_struct_i->i_status
				WHERE CORP_ID =:p_ca_instruction_struct_h->h_corp_id 
				AND CLN_CODE =:p_ca_instruction_struct_h->h_cln_code;

				IS_ANY_ORA_ERROR;	
			}
   	   		else  
	    		{
	    			EXEC SQL 
				DELETE CA_INSTRUCTION 
				WHERE 
					CORP_ID =:p_ca_instruction_struct_h->h_corp_id AND
                                        CLN_CODE =:p_ca_instruction_struct_h->h_cln_code;
          
			   	IS_ANY_ORA_ERROR
	    		}
	   	}
		else 
	   	{
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   	} 
	}

 	if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_RESET))
	{

		APL_IF_DEBUG
 		{
  			CO_ProcMonitor(APL_OUT_FILE, "Entered reset of Function MT_ModDBNoDlvDet\n",NULL,p_intl_envdatastruct_h);
 		}

		if (!strcmp(p_ca_instruction_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   	{
   			if(!strcmp(p_ca_instruction_struct_h->h_status,STATUS_DEL_UAUTH))
	    		{
	    			strcpy(p_ca_instruction_struct_h->h_access_stamp,chr_sys_access_stamp);
	    			l_ca_instruction_struct_i->i_access_stamp =0;
   	    			strcpy(p_ca_instruction_struct_h->h_checker,p_intl_envdatastruct_h->usr);
	    			l_ca_instruction_struct_i->i_checker=0;
  	    			strcpy(p_ca_instruction_struct_h->h_checker_dt,chr_sys_access_stamp);
	    			l_ca_instruction_struct_i->i_checker_dt=0;
          			strcpy(p_ca_instruction_struct_h->h_status,STATUS_AUTH);
	    			l_ca_instruction_struct_i->i_status =0;

	    			EXEC SQL UPDATE CA_INSTRUCTION SET 
           			CHECKER =:p_intl_envdatastruct_h->usr:p_i_checker,
            			CHECKER_DT =:chr_sys_access_stamp:p_i_access_stamp,
				ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp,
            			STATUS =:p_ca_instruction_struct_h->h_status:l_ca_instruction_struct_i->i_status
				WHERE 
				CORP_ID =:p_ca_instruction_struct_h->h_corp_id AND
                                CLN_CODE =:p_ca_instruction_struct_h->h_cln_code;

				IS_ANY_ORA_ERROR;	
			}
	   	}
		else 
	   	{
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   	} 
	}

 	if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_DELETE))
	{
  		p_i_checker =-1;
  		p_i_checkerdt =-1;
		strcpy(p_ca_instruction_struct_h->h_checker,APL_NULL_STRING);
		strcpy(p_ca_instruction_struct_h->h_checker_dt,APL_NULL_STRING);

		APL_IF_DEBUG
 		{
  			CO_ProcMonitor(APL_OUT_FILE, "Entered delete of Function MT_ModDBNoDlvDet\n",
				NULL,p_intl_envdatastruct_h);
 		}

	   	if (!strcmp(p_ca_instruction_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   	{
			strcpy(p_ca_instruction_struct_h->h_access_stamp,chr_sys_access_stamp);
			l_ca_instruction_struct_i->i_access_stamp =0;

			EXEC SQL UPDATE CA_INSTRUCTION SET 
            			MAKER =:p_intl_envdatastruct_h->usr:p_i_maker,
				MAKER_DT =:chr_sys_access_stamp:p_i_makerdt,
				CHECKER =:p_ca_instruction_struct_h->h_checker:p_i_checker,
				CHECKER_DT =:p_ca_instruction_struct_h->h_checker:p_i_checkerdt,
				ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp
			WHERE 
				CORP_ID =:p_ca_instruction_struct_h->h_corp_id AND
                                CLN_CODE =:p_ca_instruction_struct_h->h_cln_code;
 
              
			IS_ANY_ORA_ERROR;	
	   	}
		else 
	   	{
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   	} 
	}


 	if (int_error_flag == APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}
 	APL_GOBACK_SUCCESS

 	RETURN_SUCCESS :
	{
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
		free(l_ca_instruction_struct_i);
		return(APL_SUCCESS);
	}
  	RETURN_FAILURE :
	{
 		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
		free(l_ca_instruction_struct_i);
		return(APL_FAILURE);
	}

}

