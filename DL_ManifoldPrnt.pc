








#include "CO_HostStructdef.h"
EXEC SQL INCLUDE SQLCA.H;

/* AIX - Warnings Removal - Start */
int ltoa_r(long p_long,char *p_return, int p_length);
int CO_InsertOraErr(DEBUG_INFO_STRUCT_H **l_debug_info_ptr,
                    char *ora_msg,
                    char *h_key1,
                    char *h_key2,
                    char *h_key3,
                    int h_line,
                    char *h_file );
int DL_Prnt_MPTempNoRegB(DL_MANIFLD_STRUCT_H *p_dl_maniprnt_struct_h, char *chr_p_now, FILE *p_logfile,
                         INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
                         DEBUG_INFO_STRUCT_H **l_debug_info_ptr );
int DL_Prnt_MPTempNoRegS(DL_MANIFLD_STRUCT_H *p_dl_maniprnt_struct_h,
                         char *chr_p_now,
                         char **argv,
                         FILE *p_logfile,
                         INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
                         DEBUG_INFO_STRUCT_H **l_debug_info_ptr );
int CO_Rls_Context(void);
int CO_Proc_RptClose( FILE *p_fhandle, DEBUG_INFO_STRUCT_H **l_debug_info_ptr );
int CO_SplitStr(char *p_src, char p_separator, int *int_p_noelem, char ***p_retstr );
/* AIX - Warnings Removal - End */

int DL_Proc_MP(	DL_MANIFLD_STRUCT_H *p_dl_maniprnt_struct_h,
						REQDETAILS_STRUCT_H *p_reqdetails_struct_h_b,
						char	**argv,
						FILE *p_logfile,
						INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{
	struct sqlca sqlca;
	char	chr_l_now[APL_DATE_LEN]	= APL_NULL_STRING;
	//char	chr_l_buf[BUFFER_LEN]		= APL_NULL_STRING; //AIX - Warnings Removal

	int int_l_error_flag = APL_SUCCESS;
	short	int_l_exists		=	0; // AIX - Warnings Removal
   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;

EXEC SQL VAR chr_g_restart_data is string;

	sqlca.sqlcode = 0;

	CO_ProcMonitor(	p_logfile, 
					"Entered Function CDBManifldFn\n",
					NULL,
					NULL);
	#ifdef SYS_DEBUG 
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf, 
					"The Account is : %s",
					p_dl_maniprnt_struct_h->h_dl_client);
		CO_ProcMonitor(	p_logfile, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf( chr_l_buf,
					"The Refno is : %s\n",
					p_dl_maniprnt_struct_h->h_indentity_no);
		CO_ProcMonitor(	p_logfile, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf,
					"The Ticket type is : %s\n",
					p_dl_maniprnt_struct_h->h_tktclass);
		CO_ProcMonitor(	p_logfile, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf( chr_l_buf,
					"The Duplicate Flag is : %s\n",
					p_dl_maniprnt_struct_h->h_dupl);
		CO_ProcMonitor(	p_logfile, 
						chr_l_buf,	
						NULL,
						NULL);
	#endif
 
	

   EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
   FROM SYS_BATCHPROC
   WHERE PROCESS_NAME=:argv[0]
   AND   PROC_INIT=:argv[1]
   AND   STARTDATE=:argv[2]
   AND   STATUS='started'
   FOR UPDATE OF PROCESSING_STATUS,STATUS;

	IS_ANY_ORA_ERROR

   if(APL_ZERO_RESULT_SET)
   {
      CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
      APL_GOBACK_FAIL
   }

	

	if (!strlen(p_dl_maniprnt_struct_h->h_tktclass))
	{
		APL_DATA_MISSING("Ticket Type", APL_NULL_STRING, APL_NULL_STRING);
		int_l_error_flag = APL_FAILURE;
	}
	if (!strlen(p_dl_maniprnt_struct_h->h_dupl))
	{
		APL_DATA_MISSING("Duplicate Flag", APL_NULL_STRING, APL_NULL_STRING);
		int_l_error_flag = APL_FAILURE;
	}

	if (APL_FAILURE == CO_Chk_CntryEnabled(  "TRD_MANIFOLD",
                                          "ACC_REFNO_MANDATORY",
                                          &int_l_exists,
                                          l_debug_info_ptr ))
   {
      APL_GOBACK_FAIL
   }
	if(int_l_exists)
	{
		if (!strlen(p_dl_maniprnt_struct_h->h_dl_client))
		{
			APL_DATA_MISSING("Account", APL_NULL_STRING, APL_NULL_STRING);
			int_l_error_flag = APL_FAILURE;
		}	
		if (!strlen(p_dl_maniprnt_struct_h->h_indentity_no))
		{
			APL_DATA_MISSING("Refno", APL_NULL_STRING, APL_NULL_STRING);
			int_l_error_flag = APL_FAILURE;
		}
	}

	if (int_l_error_flag == APL_FAILURE) APL_GOBACK_FAIL

	

	if (APL_FAILURE == CO_RtvSysDtTime(chr_l_now, l_debug_info_ptr))
	{
		APL_GOBACK_FAIL
	}

	

	

	if (strlen(p_dl_maniprnt_struct_h->h_dl_client) &&
		 strlen(p_dl_maniprnt_struct_h->h_indentity_no))
	{
		if ((p_dl_maniprnt_struct_h->h_tktclass[0] == TKTTYPE_REC) ||
			 (p_dl_maniprnt_struct_h->h_tktclass[0] == TKTTYPE_DEL))
		{
			if (APL_FAILURE == DL_Prnt_MPRecDelS(	p_dl_maniprnt_struct_h,
														chr_l_now,
														p_logfile,
														p_intl_envdatastruct_h,
														l_debug_info_ptr ))
			{
				APL_GOBACK_FAIL
			}
		}
		else if ((p_dl_maniprnt_struct_h->h_tktclass[0] == TEMP_OUTTKT_IND) ||
					(p_dl_maniprnt_struct_h->h_tktclass[0] == TEMP_RET_IND))
		{
			
			
			if (APL_FAILURE == DL_Prnt_MPTempNoRegB(	p_dl_maniprnt_struct_h,
                                          		chr_l_now,
                                          		p_logfile,
                                          		p_intl_envdatastruct_h,
                                          		l_debug_info_ptr ))
         {
            APL_GOBACK_FAIL
         }	
			
		}
		else
		{
			if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
															ERR_DATA_INTEGRITY,
															APL_NULL_STRING,
															APL_NULL_STRING,
															APL_NULL_STRING,
															__LINE__,
															__FILE__ ))
			{
				APL_GOBACK_FAIL
			}
		}
	}

	

	else if (!strlen(p_dl_maniprnt_struct_h->h_indentity_no))
	{
		if ((p_dl_maniprnt_struct_h->h_tktclass[0] == TKTTYPE_REC) ||
			 (p_dl_maniprnt_struct_h->h_tktclass[0] == TKTTYPE_DEL))
		{
			if (APL_FAILURE == DL_Prnt_MPRecDelB(	p_dl_maniprnt_struct_h,
														chr_l_now,
														argv,
														p_logfile,
														p_intl_envdatastruct_h,
														l_debug_info_ptr ))
			{
				APL_GOBACK_FAIL
			}
		}
		else if ((p_dl_maniprnt_struct_h->h_tktclass[0] == TEMP_OUTTKT_IND) ||
					(p_dl_maniprnt_struct_h->h_tktclass[0] == TEMP_RET_IND))
		{
			
			if (APL_FAILURE == DL_Prnt_MPTempNoRegS(	p_dl_maniprnt_struct_h,
															chr_l_now,
															argv,
															p_logfile,
															p_intl_envdatastruct_h,
															l_debug_info_ptr ))
			{
				APL_GOBACK_FAIL
			}
			
		}
		else
		{
			if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
															ERR_DATA_INTEGRITY,
															APL_NULL_STRING,
															APL_NULL_STRING,
															APL_NULL_STRING,
															__LINE__,
															__FILE__ ))
			{
				APL_GOBACK_FAIL
			}
		}
	}	
	else
	{
		if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
														ERR_DATA_INTEGRITY,
														APL_NULL_STRING,
														APL_NULL_STRING,
														APL_NULL_STRING,
														__LINE__,
														__FILE__ ))
		{
			APL_GOBACK_FAIL
		}
	}

	if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr)) APL_GOBACK_FAIL

	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS :
	
      EXEC SQL COMMIT WORK;
      IS_ANY_ORA_ERROR

      EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
      FROM SYS_BATCHPROC
      WHERE PROCESS_NAME=:argv[0]
      AND   PROC_INIT=:argv[1]
      AND   STARTDATE=:argv[2]
      AND   STATUS='started'
      FOR UPDATE OF PROCESSING_STATUS,STATUS;

      if(APL_ZERO_RESULT_SET)
      {
         CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
         APL_GOBACK_FAIL
      }

		CO_ProcMonitor(	p_logfile,
						"Leaving Function DL_Proc_MP with Success\n",
						NULL,
						NULL);
		return(APL_SUCCESS);

	RETURN_FAILURE :
		CO_ProcMonitor(	p_logfile,
						"Got Errors : ",
						l_debug_info_ptr,
						p_intl_envdatastruct_h );
		CO_FreeErrLst(l_debug_info_ptr);

		CO_ProcMonitor(	p_logfile,
						"Leaving Function DL_Proc_MP with Errors\n",
						NULL,
						NULL);
		return(APL_FAILURE);
}



int DL_Prnt_MPRecDelS(	DL_MANIFLD_STRUCT_H *p_dl_maniprnt_struct_h,
						char *chr_p_now,
						FILE *p_logfile,
						INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{

	char		chr_l_h_acc_stmp[APL_DATE_LEN]			= APL_NULL_STRING;
	char		chr_l_h_rowid[APL_ROWID_LEN]			= APL_NULL_STRING;
	char		chr_l_h_instrcode_A[APL_INSTRUMENTCODE_LEN]			= APL_NULL_STRING;
	char		chr_l_h_clscode[CLSCD_LEN]			= APL_NULL_STRING;
	char		chr_l_h_delrecdt[APL_DATE_LEN]			= APL_NULL_STRING;
	char		chr_l_h_locncode_a[APL_LOCNCODE_LENGTH]	= APL_NULL_STRING;
	char		chr_l_h_locmanif[APL_FLAG_LENGTH]			= APL_NULL_STRING;
	char		chr_l_h_trdfromord[APL_FLAG_LENGTH]		= APL_NULL_STRING;
	char		chr_l_h_trcode_a[APL_TXNREFNO_LEN]		= APL_NULL_STRING;
	//char		chr_l_buf[BUFFER_LEN]				= APL_NULL_STRING; //AIX - Warnings Removal

	double 	l_h_quantity_a 			= 0.0;

	short		l_i_acc_stmp	= 0;
	short		l_i_rowid		= 0;
	short		l_i_instr_code		= 0;
	short		l_i_clscode 	= 0;
	short		l_i_delrecdt	= 0;
	short		l_i_locncode	= 0;
	short		l_i_locmanif	= 0;
	short		int_l_i_qty			= 0;
	short		l_i_trdfromord	= 0;
	short		int_l_i_trcode		= 0;
	short		int_l_flag			= 0;

	DL_DEALAUDIT_STRUCT_H *l_dl_dealaudit_struct_h  = NULL;
	DL_MANIPRNT_STRUCT_H	*l_dl_maniprnt_struct_h = NULL;

	

	EXEC SQL VAR chr_l_h_acc_stmp 		IS STRING;
	EXEC SQL VAR chr_l_h_rowid 			IS STRING;
	EXEC SQL VAR chr_l_h_instrcode_A 		IS STRING;
	EXEC SQL VAR chr_l_h_clscode 		IS STRING;
	EXEC SQL VAR chr_l_h_delrecdt 		IS STRING;
	EXEC SQL VAR chr_l_h_locncode_a 		IS STRING;
	EXEC SQL VAR chr_l_h_locmanif 		IS STRING;
	EXEC SQL VAR chr_l_h_trdfromord 	IS STRING;

	

	l_dl_dealaudit_struct_h = (DL_DEALAUDIT_STRUCT_H *)calloc(1, sizeof(DL_DEALAUDIT_STRUCT_H));
	APL_MALLOC_FAIL(l_dl_dealaudit_struct_h);
	l_dl_maniprnt_struct_h = (DL_MANIPRNT_STRUCT_H *)calloc(1, sizeof(DL_MANIPRNT_STRUCT_H));
	APL_MALLOC_FAIL(l_dl_maniprnt_struct_h);

	CO_ProcMonitor(	p_logfile, 
					"Entered Function DL_Prnt_MPRecDelS\n",
					NULL,
					NULL);

	#ifdef SYS_DEBUG
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf, 
					"The Account is : %s",
					p_dl_maniprnt_struct_h->h_dl_client);
		CO_ProcMonitor(	p_logfile, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf( chr_l_buf,
					"The Refno is : %s\n",
					p_dl_maniprnt_struct_h->h_indentity_no);
		CO_ProcMonitor(	p_logfile, 
						chr_l_buf,	
						NULL,
						NULL);
	#endif

	

	if (p_dl_maniprnt_struct_h->h_dupl[0] == 'N')
	{
		EXEC SQL SELECT dl_deal.access_stamp, rowid
		INTO 	:chr_l_h_acc_stmp:l_i_acc_stmp,
				:chr_l_h_rowid:l_i_rowid
		FROM dl_deal
		WHERE client = RTRIM(:p_dl_maniprnt_struct_h->h_dl_client)
		AND	IDENTIY_NO	  = RTRIM(:p_dl_maniprnt_struct_h->h_indentity_no)
		FOR UPDATE OF access_stamp;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_DEAL_NF,
															p_dl_maniprnt_struct_h->h_dl_client,
															p_dl_maniprnt_struct_h->h_indentity_no,
															APL_NULL_STRING );

		if (strcmp(chr_l_h_acc_stmp, p_dl_maniprnt_struct_h->h_access_stamp))
		{
			CO_InsertErr(	l_debug_info_ptr,
									ERR_ACCESSSTAMP_CHGD,
									p_dl_maniprnt_struct_h->h_dl_client,
									p_dl_maniprnt_struct_h->h_indentity_no,
									APL_NULL_STRING,
									__LINE__,
									__FILE__ );
									
			APL_GOBACK_FAIL
		}	
	}

	

	if (APL_FAILURE == DL_Chk_DLDet(	p_dl_maniprnt_struct_h->h_dl_client,
												p_dl_maniprnt_struct_h->h_indentity_no,
												'Y',
												'Y',
												'N',
												'Y',
												NULL,
												'N',
												'N',
												NULL,
												l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	

	if (APL_FAILURE == CO_Chk_CntryEnabled(	"TRD_MANIFOLD",
														"MANI_NOTREQD_FOR_MIN",
														&int_l_flag,
														l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	EXEC SQL SELECT a.instr_code, b.CLASSCD, a.DEL_REC_DATE, a.location_cd, 
						 a.QTY, a.DEAL_FRM_ORD, a.deal_cd
	INTO	:chr_l_h_instrcode_A:l_i_instr_code,
			:chr_l_h_clscode:l_i_clscode,
			:chr_l_h_delrecdt:l_i_delrecdt,
			:chr_l_h_locncode_a:l_i_locncode,
			:l_h_quantity_a:int_l_i_qty,
			:chr_l_h_trdfromord:l_i_trdfromord,
			:chr_l_h_trcode_a:int_l_i_trcode
	FROM dl_deal a, MT_INSTRUMENT b
	WHERE	a.instr_code = b.instr_code
	AND	a.client = RTRIM(:p_dl_maniprnt_struct_h->h_dl_client)
	AND	a.IDENTIY_NO 	 = RTRIM(:p_dl_maniprnt_struct_h->h_indentity_no);

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_DEAL_NF,
														p_dl_maniprnt_struct_h->h_dl_client,
														p_dl_maniprnt_struct_h->h_indentity_no,
														APL_NULL_STRING );

	

	if (l_mt_core_sys_params_struct_h.manifld_print_ind[0] == 'N')
	{
		CO_InsertErr(	l_debug_info_ptr,
								ERR_DATA_INTEGRITY,
								"Setup Manflag is N",
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__ );
		APL_GOBACK_FAIL
	}

	

	if (((VAL_DELIVER_DEAL(chr_l_h_trcode_a[0])) && (p_dl_maniprnt_struct_h->h_tktclass[0] == TKTTYPE_REC)) ||
	    ((VAL_RECDEAL(chr_l_h_trcode_a[0])) && (p_dl_maniprnt_struct_h->h_tktclass[0] == TKTTYPE_DEL)))
	{
		CO_InsertErr(	l_debug_info_ptr,
								ERR_DATA_INTEGRITY,
								"Trade Code",
								"Ticket Type",
								"Mismatch",
								__LINE__,
								__FILE__ );
		APL_GOBACK_FAIL
	}	

	

	if ((!strcmp(chr_l_h_clscode, "MIN")) && (int_l_flag))
	{
		CO_InsertErr(	l_debug_info_ptr,
								ERR_DEAL_CANT_MANI_RUMIN,
								APL_NULL_STRING,
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__ );
		APL_GOBACK_FAIL
	}

	if (l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y')
	{
		EXEC SQL SELECT MANIFLD_IND
		INTO :chr_l_h_locmanif:l_i_locmanif
		FROM MT_LOCATION
		WHERE location_cd = RTRIM(:chr_l_h_locncode_a);

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_LOCN_NOTFND,
															chr_l_h_locncode_a,
															APL_NULL_STRING,
															APL_NULL_STRING);

		if (chr_l_h_locmanif[0] == 'N')
		{
			if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
															ERR_DEAL_LOC_MAN_NALLOW,
															chr_l_h_locncode_a,
															APL_NULL_STRING,
															APL_NULL_STRING,
															__LINE__,
															__FILE__ ))
			{
				APL_GOBACK_FAIL
			}
		}
	}

	if (strlen(chr_l_h_delrecdt) && (p_dl_maniprnt_struct_h->h_dupl[0] == 'N'))
	{
		CO_InsertErr(	l_debug_info_ptr,
								ERR_DEAL_MANIFLD_PRINT,
								p_dl_maniprnt_struct_h->h_dl_client,
								p_dl_maniprnt_struct_h->h_indentity_no,
								APL_NULL_STRING,
								__LINE__,
								__FILE__ );
		APL_GOBACK_FAIL
	}

	if (!strlen(chr_l_h_delrecdt) && (p_dl_maniprnt_struct_h->h_dupl[0] == 'Y'))
	{
		CO_InsertErr(	l_debug_info_ptr,
								ERR_DEAL_MANIFLD_NPRINT,
								p_dl_maniprnt_struct_h->h_dl_client,
								p_dl_maniprnt_struct_h->h_indentity_no,
								APL_NULL_STRING,
								__LINE__,
								__FILE__ );
		APL_GOBACK_FAIL
	}

	

	if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr)) APL_GOBACK_FAIL

	

	strcpy(l_dl_maniprnt_struct_h->h_dl_client, p_dl_maniprnt_struct_h->h_dl_client);
	strcpy(l_dl_maniprnt_struct_h->h_indentity_no, p_dl_maniprnt_struct_h->h_indentity_no);
	strcpy(l_dl_maniprnt_struct_h->h_tktclass, p_dl_maniprnt_struct_h->h_tktclass);
	strcpy(l_dl_maniprnt_struct_h->h_dupl, p_dl_maniprnt_struct_h->h_dupl);
	l_dl_maniprnt_struct_h->h_srl_no = 0;
	l_dl_maniprnt_struct_h->h_qty		  = 0.0;

	if (APL_FAILURE == DL_Proc_MPPrnt(	l_dl_maniprnt_struct_h,
													chr_p_now,
													p_logfile,
													p_intl_envdatastruct_h,
													l_debug_info_ptr )) 
	{
		APL_GOBACK_FAIL
	}

	

	

	if (p_dl_maniprnt_struct_h->h_dupl[0] == 'N')
	{
		EXEC SQL UPDATE DL_DEAL
		SET 	DEL_REC_DATE = :chr_p_now,
				access_stamp = :chr_p_now
		WHERE rowid = :chr_l_h_rowid;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_DEAL_NF,
															p_dl_maniprnt_struct_h->h_dl_client,
															p_dl_maniprnt_struct_h->h_indentity_no,
															APL_NULL_STRING );

		strcpy(l_dl_dealaudit_struct_h->h_dl_client, p_dl_maniprnt_struct_h->h_dl_client);
		strcpy(l_dl_dealaudit_struct_h->h_indentity_no, p_dl_maniprnt_struct_h->h_indentity_no);
		strcpy(l_dl_dealaudit_struct_h->h_trail_for, "T");
		strcpy(l_dl_dealaudit_struct_h->h_processdetail, p_intl_envdatastruct_h->processtion);
		strcpy(l_dl_dealaudit_struct_h->h_proc_usr, p_intl_envdatastruct_h->usr);
		if (VAL_RECDEAL(chr_l_h_trcode_a[0]))
		{
			strcpy(l_dl_dealaudit_struct_h->h_subprocess, RECEIVETICKET);
		}
		else
		{
			strcpy(l_dl_dealaudit_struct_h->h_subprocess, DELV_TICKET);
		}
			
		l_dl_dealaudit_struct_h->h_qty = l_h_quantity_a;
		strcpy(l_dl_dealaudit_struct_h->h_dlfromord, chr_l_h_trdfromord);

		if (APL_FAILURE == CR_Mod_CLHAudTrail(l_dl_dealaudit_struct_h, l_debug_info_ptr))
		{
			APL_GOBACK_FAIL
		}
	}

	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS :
		CO_ProcMonitor(	p_logfile,
						"Leaving Function DL_Prnt_MPRecDelS with Success\n",
						NULL,
						NULL);
		return(APL_SUCCESS);

	RETURN_FAILURE :
		CO_ProcMonitor(	p_logfile,
						"Leaving Function DL_Prnt_MPRecDelS with Errors\n",
						NULL,
						NULL);
		return(APL_FAILURE);

}


	
int	DL_Prnt_MPTempS(	DL_MANIFLD_STRUCT_H *p_dl_maniprnt_struct_h,
							REQDETAILS_STRUCT_H	*p_reqdetails_struct_h_b,
							char *chr_p_now,
							FILE *p_logfile,
							INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{

	

	int		i					= 0;
	int		int_l_h_serialno	= 0;
	int		int_l_parent_srlno	= 0;

	double	l_h_avquantity		= 0.0;
	double	l_totquantity			= 0.0;
	double 	l_h_tempoutquantity	= 0.0;
	double 	l_h_tempretquantity	= 0.0;

	char		chr_l_h_trcode_a[APL_FLAG_LENGTH]			= APL_NULL_STRING;
	char		chr_l_h_instrcode_A[APL_INSTRUMENTCODE_LEN]			= APL_NULL_STRING;
	char		chr_l_h_clscode[CLSCD_LEN]			= APL_NULL_STRING;
	char		chr_l_h_acc_stmp[APL_DATE_LEN]			= APL_NULL_STRING;
	char		chr_l_buf[BUFFER_LEN]						= APL_NULL_STRING;

	short		int_l_flag			= 0;
	short		l_i_avqty		= 0;
	short		int_l_i_trcode		= 0;
	short		l_i_instr_code		= 0;
	short		l_i_clscode		= 0;
	short		l_i_tempoutqty	= 0;
	short		l_i_tempretqty	= 0;
	short		l_i_acc_stmp	= 0;
	short		l_i_serialno	= 0;

	DL_REGDET_STRUCT_H	*l_reg_trf_struct_h	= NULL;
	DL_MANIPRNT_STRUCT_H	*l_dl_maniprnt_struct_h = NULL;

	EXEC SQL VAR chr_l_h_trcode_a 	IS STRING;
	EXEC SQL VAR chr_l_h_instrcode_A 	IS STRING;
	EXEC SQL VAR chr_l_h_clscode 	IS STRING;
	EXEC SQL VAR chr_l_h_acc_stmp 	IS STRING;

	

	l_reg_trf_struct_h = (DL_REGDET_STRUCT_H *)calloc(1, sizeof(DL_REGDET_STRUCT_H));
	APL_MALLOC_FAIL(l_reg_trf_struct_h);
	l_dl_maniprnt_struct_h = (DL_MANIPRNT_STRUCT_H *)calloc(1, sizeof(DL_MANIPRNT_STRUCT_H));
	APL_MALLOC_FAIL(l_dl_maniprnt_struct_h);

	

	CO_ProcMonitor(	p_logfile, 
					"Entered Function DL_Prnt_MPTempS\n",
					NULL,
					NULL);

	#ifdef SYS_DEBUG 
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf, 
					"The Account is : %s",
					p_dl_maniprnt_struct_h->h_dl_client);
		CO_ProcMonitor(	p_logfile, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf( chr_l_buf,
					"The Refno is : %s\n",
					p_dl_maniprnt_struct_h->h_indentity_no);
		CO_ProcMonitor(	p_logfile, 
						chr_l_buf,	
						NULL,
						NULL);
	#endif

	

	if (p_dl_maniprnt_struct_h->h_dupl[0] == 'N')
	{
		EXEC SQL SELECT access_stamp
		INTO 	:chr_l_h_acc_stmp:l_i_acc_stmp
		FROM dl_deal
		WHERE client = RTRIM(:p_dl_maniprnt_struct_h->h_dl_client)
		AND	IDENTIY_NO	  = RTRIM(:p_dl_maniprnt_struct_h->h_indentity_no)
		FOR UPDATE OF access_stamp;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_DEAL_NF,
															p_dl_maniprnt_struct_h->h_dl_client,
															p_dl_maniprnt_struct_h->h_indentity_no,
															APL_NULL_STRING );

		if (strcmp(chr_l_h_acc_stmp, p_dl_maniprnt_struct_h->h_access_stamp))
		{
			CO_InsertErr(	l_debug_info_ptr,
									ERR_ACCESSSTAMP_CHGD,
									p_dl_maniprnt_struct_h->h_dl_client,
									p_dl_maniprnt_struct_h->h_indentity_no,
									APL_NULL_STRING,
									__LINE__,
									__FILE__ );
									
			APL_GOBACK_FAIL
		}	

		for (i=0;i<p_reqdetails_struct_h_b->h_element_cnt;i++)
		{
			memset(chr_l_h_acc_stmp, NULL, APL_DATE_LEN);
			l_i_acc_stmp = 0;
			int_l_parent_srlno = *(p_reqdetails_struct_h_b->h_srl_no + i);
			EXEC SQL SELECT access_stamp
			INTO :chr_l_h_acc_stmp:l_i_acc_stmp
			FROM DL_REGDET
			WHERE srl_no = :int_l_parent_srlno
			AND	client	= RTRIM(:p_dl_maniprnt_struct_h->h_dl_client)
			AND	IDENTIY_NO		= RTRIM(:p_dl_maniprnt_struct_h->h_indentity_no)
			FOR UPDATE OF access_stamp;

			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_REC_NOTFND,
																APL_NULL_STRING,
																APL_NULL_STRING,
																APL_NULL_STRING );

			if (strncmp(	chr_l_h_acc_stmp, 
								(p_reqdetails_struct_h_b->h_access_stamp + i*APL_DATE_LEN), 
								APL_DATE_LEN-1))
			{
				memset(chr_l_buf, NULL, BUFFER_LEN);
				sprintf(chr_l_buf, "Parent Srl. %d", *(p_reqdetails_struct_h_b->h_srl_no+i));
				CO_InsertErr(	l_debug_info_ptr,
										ERR_ACCESSSTAMP_CHGD,
										p_dl_maniprnt_struct_h->h_dl_client,
										p_dl_maniprnt_struct_h->h_indentity_no,
										APL_NULL_STRING,
										__LINE__,
										__FILE__ );
										
				APL_GOBACK_FAIL
			}
		}
	}

	

	if (APL_FAILURE == DL_Chk_DLDet(	p_dl_maniprnt_struct_h->h_dl_client,
												p_dl_maniprnt_struct_h->h_indentity_no,
												'Y',
												'Y',
												'N',
												'Y',
												NULL,
												'Y',
												NULL,
												NULL,
												l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	

	if (APL_FAILURE == CO_Chk_CntryEnabled(	"TRD_MANIFOLD",
														"MANI_NOTREQD_FOR_MIN",
														&int_l_flag,
														l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	EXEC SQL SELECT 	a.TEMP_OUT_QUANTITY, a.TEMP_RET_QUANTITY, a.instr_code, 
							a.deal_cd, b.CLASSCD
	INTO	:l_h_tempoutquantity:l_i_tempoutqty,
			:l_h_tempretquantity:l_i_tempretqty,
			:chr_l_h_instrcode_A:l_i_instr_code,
			:chr_l_h_trcode_a:int_l_i_trcode,
			:chr_l_h_clscode:l_i_clscode
	FROM DL_DEAL a, MT_INSTRUMENT b
	WHERE a.client  =  RTRIM(:p_dl_maniprnt_struct_h->h_dl_client)
	AND	a.IDENTIY_NO	  =  RTRIM(:p_dl_maniprnt_struct_h->h_indentity_no)
	AND	a.instr_code	  =  b.instr_code;

	

	if ((int_l_flag) && (!strcmp(chr_l_h_clscode, "MIN")))
	{
		if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
														ERR_DEAL_CANT_MANI_RUMIN,
														APL_NULL_STRING,
														APL_NULL_STRING,
														APL_NULL_STRING,
														__LINE__,
														__FILE__ ))
		{
			APL_GOBACK_FAIL
		}
	}
	
	

	if ((p_dl_maniprnt_struct_h->h_dupl[0] == 'Y') &&
		 (((l_h_tempoutquantity <= 0) && (p_dl_maniprnt_struct_h->h_tktclass[0] == TEMP_OUTTKT_IND)) ||
		  ((l_h_tempretquantity <= 0) && (p_dl_maniprnt_struct_h->h_tktclass[0] == TEMP_RET_IND))))
	{
		if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
														ERR_DEAL_MANIFLD_NPRINT,
														p_dl_maniprnt_struct_h->h_dl_client,
														p_dl_maniprnt_struct_h->h_indentity_no,
														APL_NULL_STRING,
														__LINE__,
														__FILE__ ))
		{
			APL_GOBACK_FAIL
		}
	}

	

	if ((p_dl_maniprnt_struct_h->h_dupl[0] == 'N') &&
		 (VAL_DELIVER_DEAL(chr_l_h_trcode_a[0])))
	{
		if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
														ERR_DEAL_CANT_MANI_DLV,
														p_dl_maniprnt_struct_h->h_dl_client,
														p_dl_maniprnt_struct_h->h_indentity_no,
														APL_NULL_STRING,
														__LINE__,
														__FILE__ ))
		{
			APL_GOBACK_FAIL
		}
	}
		
	if (p_dl_maniprnt_struct_h->h_dupl[0] == 'N')
	{
		for (i=0;i<p_reqdetails_struct_h_b->h_element_cnt;i++)
		{
			l_totquantity += *(p_reqdetails_struct_h_b->h_qty + i);
			l_h_avquantity = 0;
			l_i_avqty = 0;
			int_l_parent_srlno = *(p_reqdetails_struct_h_b->h_srl_no + i);

			EXEC SQL SELECT (NVL(MOVED_QTY,0) - NVL(MANIFOLD_QTY,0))
			INTO :l_h_avquantity:l_i_avqty
			FROM DL_REGDET
			WHERE srl_no = :int_l_parent_srlno
			AND	client	= RTRIM(:p_dl_maniprnt_struct_h->h_dl_client)
			AND	IDENTIY_NO		= RTRIM(:p_dl_maniprnt_struct_h->h_indentity_no);

			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_REC_NOTFND,
																APL_NULL_STRING,
																APL_NULL_STRING,
																APL_NULL_STRING );
	
			if ((l_mt_core_sys_params_struct_h.part_reg_ind[0] == 'Y') && 
				 (l_h_avquantity < *(p_reqdetails_struct_h_b->h_qty + i)))
			{
				memset(chr_l_buf, NULL, BUFFER_LEN);
				sprintf(chr_l_buf, "%d", int_l_parent_srlno);
				if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
																ERR_DEAL_MANQTY_NAVAIL,
																chr_l_buf,
																APL_NULL_STRING,
																APL_NULL_STRING,
																__LINE__,
																__FILE__ ))
				{
					APL_GOBACK_FAIL
				}
			}
			else if ((l_mt_core_sys_params_struct_h.part_reg_ind[0] == 'N') &&
						(l_h_avquantity != *(p_reqdetails_struct_h_b->h_qty + i)))
			{
				memset(chr_l_buf, NULL, BUFFER_LEN);
				sprintf(chr_l_buf, "%d", int_l_parent_srlno);
				if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
																ERR_DEAL_MANQTY_NEQ_AVAILQTY,
																chr_l_buf,
																APL_NULL_STRING,
																APL_NULL_STRING,
																__LINE__,
																__FILE__ ))
				{
					APL_GOBACK_FAIL
				}
			}
		}
	}

	

	if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr)) APL_GOBACK_FAIL

	

	

	if (p_dl_maniprnt_struct_h->h_dupl[0] == 'N')
	{
		memset(l_reg_trf_struct_h, NULL, sizeof(DL_REGDET_STRUCT_H));
		strcpy(l_reg_trf_struct_h->h_dl_client, p_dl_maniprnt_struct_h->h_dl_client);
		strcpy(l_reg_trf_struct_h->h_indentity_no, p_dl_maniprnt_struct_h->h_indentity_no);
		if ( p_dl_maniprnt_struct_h->h_tktclass[0] == TEMP_RET_IND )
		{
			l_reg_trf_struct_h->h_reg_st_cd[0] = TEMP_RETREG_CD;
			l_reg_trf_struct_h->h_reg_st_cd[1] = '\0';
		}
		else
		{
			l_reg_trf_struct_h->h_reg_st_cd[0] = TEMP_OUTREG_CD;
			l_reg_trf_struct_h->h_reg_st_cd[1] = '\0';
		}
		strcpy(l_reg_trf_struct_h->h_txndate, chr_p_now);
		l_reg_trf_struct_h->h_qty = l_totquantity;

		if (APL_FAILURE == DL_Mod_DLRegStat( l_reg_trf_struct_h,
   		                              p_reqdetails_struct_h_b,
      		                           p_intl_envdatastruct_h,
         		                        l_debug_info_ptr ))
		{
			APL_GOBACK_FAIL
		}
	}

	

	if (p_dl_maniprnt_struct_h->h_dupl[0] == 'N')
	{
		for (i=0;i<p_reqdetails_struct_h_b->h_element_cnt;i++)
		{
			strcpy(l_dl_maniprnt_struct_h->h_dl_client, p_dl_maniprnt_struct_h->h_dl_client);
			strcpy(l_dl_maniprnt_struct_h->h_indentity_no, p_dl_maniprnt_struct_h->h_indentity_no);
			strcpy(l_dl_maniprnt_struct_h->h_tktclass, p_dl_maniprnt_struct_h->h_tktclass);
			strcpy(l_dl_maniprnt_struct_h->h_dupl, p_dl_maniprnt_struct_h->h_dupl);
			l_dl_maniprnt_struct_h->h_srl_no = *(p_reqdetails_struct_h_b->h_srl_no + i);
			l_dl_maniprnt_struct_h->h_qty		  = *(p_reqdetails_struct_h_b->h_qty + i);

			if (APL_FAILURE == DL_Proc_MPPrnt(	l_dl_maniprnt_struct_h,
															chr_p_now,
															p_logfile,
															p_intl_envdatastruct_h,
															l_debug_info_ptr ))
			{
				APL_GOBACK_FAIL
			}
		}
	}
	else
	{
		EXEC SQL DECLARE man_cur CURSOR FOR
		SELECT NVL(MOVED_QTY,0), srl_no FROM DL_REGDET
		WHERE client = RTRIM(:p_dl_maniprnt_struct_h->h_dl_client)
		AND	IDENTIY_NO   = RTRIM(:p_dl_maniprnt_struct_h->h_indentity_no)
		AND	REG_ST_CD = :p_dl_maniprnt_struct_h->h_tktclass;

		EXEC SQL OPEN man_cur;

		IS_ANY_ORA_ERROR;

		for( ; ; )
		{
			l_h_avquantity = 0.0;
			int_l_h_serialno = 0;
			l_i_avqty = 0;
			l_i_serialno = 0;

			EXEC SQL FETCH man_cur INTO 	:l_h_avquantity:l_i_avqty,
													:int_l_h_serialno:l_i_serialno;

			if APL_ZERO_RESULT_SET break;

			strcpy(l_dl_maniprnt_struct_h->h_dl_client, p_dl_maniprnt_struct_h->h_dl_client);
			strcpy(l_dl_maniprnt_struct_h->h_indentity_no, p_dl_maniprnt_struct_h->h_indentity_no);
			strcpy(l_dl_maniprnt_struct_h->h_tktclass, p_dl_maniprnt_struct_h->h_tktclass);
			strcpy(l_dl_maniprnt_struct_h->h_dupl, p_dl_maniprnt_struct_h->h_dupl);
			l_dl_maniprnt_struct_h->h_srl_no = int_l_h_serialno;
			l_dl_maniprnt_struct_h->h_qty		  = l_h_avquantity;

			if (APL_FAILURE == DL_Proc_MPPrnt(	l_dl_maniprnt_struct_h,
															chr_p_now,
															p_logfile,
															p_intl_envdatastruct_h,
															l_debug_info_ptr ))
			{
				APL_GOBACK_FAIL
			}
		}
	}

	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS :
		CO_ProcMonitor(	p_logfile,
						"Leaving Function DL_Prnt_MPTempS with Success\n",
						NULL,
						NULL);
		return(APL_SUCCESS);

	RETURN_FAILURE :
		CO_ProcMonitor(	p_logfile,
						"Leaving Function DL_Prnt_MPTempS with Errors\n",
						NULL,
						NULL);
		return(APL_FAILURE);

}



int	DL_Prnt_MPRecDelB(	DL_MANIFLD_STRUCT_H *p_dl_maniprnt_struct_h,
							char *chr_p_now,
							char **argv,
							FILE *p_logfile,
							INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{
	

	int		int_l_reccount			= 0;

	char		chr_l_h_client_a[APL_CLIENT_LENGTH]			= APL_NULL_STRING;
	char		chr_l_h_refno_A[APL_TXNREFNO_LEN]			= APL_NULL_STRING;
	char		chr_l_h_clscode[CLSCD_LEN]				= APL_NULL_STRING;
	char		chr_l_h_access_stamp[APL_DATE_LEN]		= APL_NULL_STRING;
	char		chr_l_h_locmanif[APL_FLAG_LENGTH]				= APL_NULL_STRING;
	char		chr_l_h_instrcode_A[APL_INSTRUMENTCODE_LEN]				= APL_NULL_STRING;
	char		chr_l_h_locncode_a[APL_LOCNCODE_LENGTH]		= APL_NULL_STRING;
	char		chr_l_trcode1[APL_FLAG_LENGTH]					= APL_NULL_STRING;
	char		chr_l_trcode2[APL_FLAG_LENGTH]					= APL_NULL_STRING;
	char		chr_l_trd_status[APL_STATUS_LEN]			= APL_NULL_STRING;
	char		chr_l_buf[BUFFER_LEN]							= APL_NULL_STRING;

	short		l_i_account			= 0;
	short		l_i_refno			= 0;
	short		l_i_clscode			= 0;
	short		l_i_access_stamp	= 0;
	short		l_i_locmanif		= 0;
	short		l_i_instr_code			= 0;
	short		l_i_locncode		= 0;
	short		int_l_flag				= 0;
	short		l_ru_min				= 0;

	DL_MANIFLD_STRUCT_H	*l_dl_manifld_struct_h = NULL;

   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;

EXEC SQL VAR chr_g_restart_data is string;

	EXEC SQL VAR chr_l_h_client_a IS STRING;
	EXEC SQL VAR chr_l_h_refno_A IS STRING;
	EXEC SQL VAR chr_l_h_clscode IS STRING;
	EXEC SQL VAR chr_l_h_access_stamp IS STRING;
	EXEC SQL VAR chr_l_h_locmanif IS STRING;
	EXEC SQL VAR chr_l_h_instrcode_A IS STRING;
	EXEC SQL VAR chr_l_h_locncode_a IS STRING;

	

	l_dl_manifld_struct_h = (DL_MANIFLD_STRUCT_H *)calloc(1, sizeof(DL_MANIFLD_STRUCT_H));
	APL_MALLOC_FAIL(l_dl_manifld_struct_h);

	

	CO_ProcMonitor(	p_logfile, 
					"Entered Function DL_Prnt_MPRecDelB\n",
					NULL,
					NULL);

	#ifdef SYS_DEBUG 
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf, 
					"The Account is : %s",
					p_dl_maniprnt_struct_h->h_dl_client);
		CO_ProcMonitor(	p_logfile, 
						chr_l_buf,	
						NULL,
						NULL);
	#endif

	

	if (APL_FAILURE == CO_Chk_CntryEnabled(	"TRD_MANIFOLD",
														"MANI_NOTREQD_FOR_MIN",
														&l_ru_min,
														l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	

	strcpy(chr_l_trd_status, STATUS_DEL_UAUTH);

	if (p_dl_maniprnt_struct_h->h_tktclass[0] == TKTTYPE_REC)
	{
		chr_l_trcode1[0] = DEALCD_RF;
		chr_l_trcode1[1] = '\0';
		chr_l_trcode2[0] = DEALCD_RVP;
		chr_l_trcode2[1] = '\0';

		if (strlen(p_dl_maniprnt_struct_h->h_dl_client))
		{
			int_l_flag = 1;
	
			EXEC SQL DECLARE man_cur1 CURSOR FOR
			SELECT client, IDENTIY_NO, instr_code, location_cd, access_stamp
			FROM DL_DEAL
			WHERE client = RTRIM(:p_dl_maniprnt_struct_h->h_dl_client)
			AND 	DEL_REC_DATE IS NULL
			AND 	VAL_FDT IS NOT NULL
			AND 	deal_cd IN (:chr_l_trcode1, :chr_l_trcode2)
			AND 	DEAL_STAT <> :chr_l_trd_status;

			EXEC SQL OPEN man_cur1;
		}
		else
		{
			int_l_flag = 2;
	
			EXEC SQL DECLARE man_cur2 CURSOR FOR
			SELECT client, IDENTIY_NO, instr_code, location_cd, access_stamp
			FROM DL_DEAL
			WHERE	DEL_REC_DATE IS NULL
			AND 	VAL_FDT IS NOT NULL
			AND 	deal_cd IN (:chr_l_trcode1, :chr_l_trcode2)
			AND 	DEAL_STAT <> :chr_l_trd_status;

			EXEC SQL OPEN man_cur2;
		}
	}
	else if (p_dl_maniprnt_struct_h->h_tktclass[0] == TKTTYPE_DEL)
	{
		chr_l_trcode1[0] = DEALCD_DF;
		chr_l_trcode1[1] = '\0';
		chr_l_trcode2[0] = DEALCD_DVP;
		chr_l_trcode2[1] = '\0';

		if (strlen(p_dl_maniprnt_struct_h->h_dl_client))
		{
			int_l_flag = 3;
	
			EXEC SQL DECLARE man_cur3 CURSOR FOR
			SELECT client, IDENTIY_NO, instr_code, location_cd, access_stamp
			FROM DL_DEAL
			WHERE client = RTRIM(:p_dl_maniprnt_struct_h->h_dl_client)
			AND 	DEL_REC_DATE IS NULL
			AND 	VAL_FDT IS NOT NULL
			AND 	deal_cd IN (:chr_l_trcode1, :chr_l_trcode2)
			AND 	DEAL_STAT <> :chr_l_trd_status;

			EXEC SQL OPEN man_cur3;
		}
		else
		{
			int_l_flag = 4;
	
			EXEC SQL DECLARE man_cur4 CURSOR FOR
			SELECT client, IDENTIY_NO, instr_code, location_cd, access_stamp
			FROM DL_DEAL
			WHERE	DEL_REC_DATE IS NULL
			AND 	VAL_FDT IS NOT NULL
			AND 	deal_cd IN (:chr_l_trcode1, :chr_l_trcode2)
			AND 	DEAL_STAT <> :chr_l_trd_status;

			EXEC SQL OPEN man_cur4;
		}
	}

	IS_ANY_ORA_ERROR

	for (;;)
	{

		

		memset(chr_l_h_client_a, NULL, APL_CLIENT_LENGTH);
		memset(chr_l_h_refno_A, NULL, APL_TXNREFNO_LEN);
		memset(chr_l_h_instrcode_A, NULL, APL_INSTRUMENTCODE_LEN);
		memset(chr_l_h_locncode_a, NULL, APL_LOCNCODE_LENGTH);
		memset(chr_l_h_access_stamp, NULL, APL_DATE_LEN);
		l_i_account = 0;
		l_i_refno = 0;
		l_i_instr_code = 0;
		l_i_locncode = 0;
		l_i_access_stamp = 0;

		

		switch(int_l_flag)
		{
			case 1 : EXEC SQL FETCH man_cur1 INTO 	:chr_l_h_client_a:l_i_account,
																:chr_l_h_refno_A:l_i_refno,
																:chr_l_h_instrcode_A:l_i_instr_code,
																:chr_l_h_locncode_a:l_i_locncode,
																:chr_l_h_access_stamp:l_i_access_stamp;
						break;

			case 2 : EXEC SQL FETCH man_cur2 INTO 	:chr_l_h_client_a:l_i_account,
																:chr_l_h_refno_A:l_i_refno,
																:chr_l_h_instrcode_A:l_i_instr_code,
																:chr_l_h_locncode_a:l_i_locncode,
																:chr_l_h_access_stamp:l_i_access_stamp;
						break;

			case 3 : EXEC SQL FETCH man_cur3 INTO 	:chr_l_h_client_a:l_i_account,
																:chr_l_h_refno_A:l_i_refno,
																:chr_l_h_instrcode_A:l_i_instr_code,
																:chr_l_h_locncode_a:l_i_locncode,
																:chr_l_h_access_stamp:l_i_access_stamp;
						break;

			case 4 : EXEC SQL FETCH man_cur4 INTO 	:chr_l_h_client_a:l_i_account,
																:chr_l_h_refno_A:l_i_refno,
																:chr_l_h_instrcode_A:l_i_instr_code,
																:chr_l_h_locncode_a:l_i_locncode,
																:chr_l_h_access_stamp:l_i_access_stamp;
						break;
		}

		if APL_ZERO_RESULT_SET break;

		IS_ANY_ORA_ERROR

		

		if (l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y')
		{
			EXEC SQL SELECT MANIFLD_IND 
			INTO :chr_l_h_locmanif:l_i_locmanif
			FROM MT_LOCATION
			WHERE location_cd = RTRIM(:chr_l_h_locncode_a);

			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_LOCN_NOTFND,
																chr_l_h_locncode_a,
																APL_NULL_STRING,
																APL_NULL_STRING);

			if (chr_l_h_locmanif[0] == 'N')
			{
				continue;
			}
		}

		

		if (l_ru_min) 
		{
			EXEC SQL SELECT CLASSCD
			INTO :chr_l_h_clscode:l_i_clscode
			FROM MT_INSTRUMENT
			WHERE instr_code = RTRIM(:chr_l_h_instrcode_A);

			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_INSTR_NOTFND,
																chr_l_h_instrcode_A,
																APL_NULL_STRING,
																APL_NULL_STRING);

			if (!strcmp(chr_l_h_clscode, "MIN"))
			{
				continue;
			}
		}

		

		memset(l_dl_manifld_struct_h, NULL, sizeof(DL_MANIFLD_STRUCT_H));
		strcpy(l_dl_manifld_struct_h->h_dl_client, chr_l_h_client_a);
		strcpy(l_dl_manifld_struct_h->h_indentity_no, chr_l_h_refno_A);
		strcpy(l_dl_manifld_struct_h->h_tktclass, p_dl_maniprnt_struct_h->h_tktclass);
		strcpy(l_dl_manifld_struct_h->h_dupl, "N");
		strcpy(l_dl_manifld_struct_h->h_access_stamp, chr_l_h_access_stamp);

		if (APL_FAILURE == DL_Prnt_MPRecDelS(	l_dl_manifld_struct_h,
													chr_p_now,
													p_logfile,
													p_intl_envdatastruct_h,
													l_debug_info_ptr ))
		{
			IS_ANY_ERROR_FATAL

			if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(p_logfile, APL_NULL_STRING, l_debug_info_ptr, p_intl_envdatastruct_h);
				CO_FreeErrLst(l_debug_info_ptr);
			}
		}
		else
		{
			int_l_reccount++;
			memset(chr_l_buf, NULL, BUFFER_LEN);
			sprintf(chr_l_buf, "Printed Manifold for Trd : %s, %s", chr_l_h_client_a, chr_l_h_refno_A);
			CO_ProcMonitor(p_logfile, chr_l_buf, NULL, p_intl_envdatastruct_h);

			

      	if (!int_l_reccount%C_COMMITSIZE)
      	{
				

				memset(chr_l_buf, NULL, BUFFER_LEN);
				sprintf(chr_l_buf, "Processed %d records", int_l_reccount);

				EXEC SQL UPDATE SYS_BATCHPROC
				SET STAT_DET = :chr_l_buf
         	WHERE PROCESS_NAME=:argv[0]
         	AND   PROC_INIT=:argv[1]
         	AND   STARTDATE=:argv[2]
         	AND   STATUS='started';

				IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_REC_NOTFND,
																	"Batch_in_proc Rec",
																	APL_NULL_STRING,
																	APL_NULL_STRING )

         	EXEC SQL COMMIT WORK;
         	IS_ANY_ORA_ERROR

				CO_ProcMonitor(p_logfile, "Record Committed", NULL, NULL);

				switch(int_l_flag)
				{
					case 1 : EXEC SQL OPEN man_cur1;
								break;
					case 2 : EXEC SQL OPEN man_cur2;
								break;
					case 3 : EXEC SQL OPEN man_cur3;
								break;
					case 4 : EXEC SQL OPEN man_cur4;
								break;
				}

				IS_ANY_ORA_ERROR

         	EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
         	FROM SYS_BATCHPROC
         	WHERE PROCESS_NAME=:argv[0]
         	AND   PROC_INIT=:argv[1]
         	AND   STARTDATE=:argv[2]
         	AND   STATUS='started'
         	FOR UPDATE OF PROCESSING_STATUS,STATUS;

         	if(sqlca.sqlcode)
         	{
            	CO_ProcMonitor(p_logfile,"E:Could Not Lock batch_in_proc",NULL,NULL);
            	APL_GOBACK_FAIL
         	}
			}
      }
	}

	switch(int_l_flag)
	{
		case 1 : EXEC SQL CLOSE man_cur1;
					break;
		case 2 : EXEC SQL CLOSE man_cur2;
					break;
		case 3 : EXEC SQL CLOSE man_cur3;
					break;
		case 4 : EXEC SQL CLOSE man_cur4;
					break;
	}

	IS_ANY_ORA_ERROR

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :

		

		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "Processed %d records", int_l_reccount);

		EXEC SQL UPDATE SYS_BATCHPROC
		SET STAT_DET = :chr_l_buf
     	WHERE PROCESS_NAME=:argv[0]
     	AND   PROC_INIT=:argv[1]
     	AND   STARTDATE=:argv[2]
     	AND   STATUS='started';

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_REC_NOTFND,
															"Batch_in_proc Rec",
															APL_NULL_STRING,
															APL_NULL_STRING )

      EXEC SQL COMMIT WORK;
      IS_ANY_ORA_ERROR

		CO_ProcMonitor(p_logfile, "Record Committed", NULL, NULL);

      EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
      FROM SYS_BATCHPROC
      WHERE PROCESS_NAME=:argv[0]
      AND   PROC_INIT=:argv[1]
      AND   STARTDATE=:argv[2]
      AND   STATUS='started'
      FOR UPDATE OF PROCESSING_STATUS,STATUS;

      if(APL_ZERO_RESULT_SET)
      {
         CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
         APL_GOBACK_FAIL
      }

		CO_ProcMonitor(	p_logfile,
						"Leaving Function DL_Prnt_MPRecDelB with Success\n",
						NULL,
						NULL);
		return(APL_SUCCESS);

	RETURN_FAILURE :
		CO_ProcMonitor(	p_logfile,
						"Leaving Function DL_Prnt_MPRecDelB with Errors\n",
						NULL,
						NULL);
		return(APL_FAILURE);

}



int	DL_Prnt_MPTempB(	DL_MANIFLD_STRUCT_H *p_dl_maniprnt_struct_h,
							char *chr_p_now,
							char **argv,
							FILE *p_logfile,
							INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{
	

	char		chr_l_h_client_a[APL_CLIENT_LENGTH]			= APL_NULL_STRING;
	char		chr_l_h_refno_A[APL_TXNREFNO_LEN]			= APL_NULL_STRING;
	char		chr_l_h_clscode[CLSCD_LEN]				= APL_NULL_STRING;
	char		chr_l_h_access_stamp[APL_DATE_LEN]		= APL_NULL_STRING;
	char		chr_l_h_accst[APL_DATE_LEN]					= APL_NULL_STRING;
	char		chr_l_prev_accst[APL_DATE_LEN]				= APL_NULL_STRING;
	char		chr_l_h_instrcode_A[APL_INSTRUMENTCODE_LEN]				= APL_NULL_STRING;
	char		chr_l_h_trcode_a[APL_FLAG_LENGTH]				= APL_NULL_STRING;
	char		chr_l_prev_client[APL_CLIENT_LENGTH]		= APL_NULL_STRING;
	char		chr_l_prev_refno[APL_TXNREFNO_LEN]		= APL_NULL_STRING;
	char		chr_l_buf[BUFFER_LEN]							= APL_NULL_STRING;
	char		chr_l_h_prevreg[APL_FLAG_LENGTH]				= APL_NULL_STRING;

	short		l_i_account			= 0;
	short		l_i_refno			= 0;
	short		l_i_clscode			= 0;
	short		l_i_access_stamp	= 0;
	short		l_i_accst			= 0;
	short		l_i_instr_code			= 0;
	short		int_l_i_trcode			= 0;
	short		int_l_flag				= 0;
	short		l_i_srlno			= 0;
	short		int_l_i_qty				= 0;
	short		l_ru_min				= 0;
	short		l_i_prevreg			= 0;

	int 		int_l_h_srlno			= 0;
	int		int_l_reccount			= 0;

	double	l_h_quantity_a				= 0.0;

	REQDETAILS_STRUCT_H *l_reqdetails_struct_ha_a = NULL;
	DL_MANIFLD_STRUCT_H	*l_dl_manifld_struct_h = NULL;
   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;

EXEC SQL VAR chr_g_restart_data is string;

	EXEC SQL VAR chr_l_h_client_a IS STRING;
	EXEC SQL VAR chr_l_h_refno_A IS STRING;
	EXEC SQL VAR chr_l_h_clscode IS STRING;
	EXEC SQL VAR chr_l_h_access_stamp IS STRING;
	EXEC SQL VAR chr_l_h_instrcode_A IS STRING;
	EXEC SQL VAR chr_l_h_trcode_a IS STRING;
	EXEC SQL VAR chr_l_h_accst IS STRING;

	

	l_dl_manifld_struct_h = (DL_MANIFLD_STRUCT_H *)calloc(1, sizeof(DL_MANIFLD_STRUCT_H));
	APL_MALLOC_FAIL(l_dl_manifld_struct_h);

	l_reqdetails_struct_ha_a = (REQDETAILS_STRUCT_H *)calloc(1, sizeof(REQDETAILS_STRUCT_H));
	APL_MALLOC_FAIL(l_reqdetails_struct_ha_a);

	

	CO_ProcMonitor(	p_logfile, 
					"Entered Function DL_Prnt_MPTempB\n",
					NULL,
					NULL);

	#ifdef SYS_DEBUG 
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf, 
					"The Account is : %s",
					p_dl_maniprnt_struct_h->h_dl_client);
		CO_ProcMonitor(	p_logfile, 
						chr_l_buf,	
						NULL,
						NULL);
	#endif

	

	if (APL_FAILURE == CO_Chk_CntryEnabled(	"TRD_MANIFOLD",
														"MANI_NOTREQD_FOR_MIN",
														&l_ru_min,
														l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	

	EXEC SQL SELECT PREV_REG
	INTO :chr_l_h_prevreg:l_i_prevreg
	FROM DL_REGCYCLE
	WHERE MAN_STAT = :p_dl_maniprnt_struct_h->h_tktclass
	AND	NATION	 = :g_mt_commonsys_params_struct_h.nation_code;

	IS_ANY_ORA_ERROR

	if (strlen(p_dl_maniprnt_struct_h->h_dl_client))
	{
		int_l_flag = 1;

		EXEC SQL DECLARE mani_cur5 CURSOR FOR
		SELECT client, IDENTIY_NO, srl_no, (NVL(MOVED_QTY,0) - NVL(MANIFOLD_QTY,0)), access_stamp
		FROM DL_REGDET
		WHERE client = RTRIM(:p_dl_maniprnt_struct_h->h_dl_client)
		AND 	REG_ST_CD = RTRIM(:chr_l_h_prevreg)
		AND	(NVL(MOVED_QTY,0) - NVL(MANIFOLD_QTY,0)) > 0
		ORDER BY client, IDENTIY_NO;

		EXEC SQL OPEN mani_cur5;
	}
	else
	{
		int_l_flag = 2;

		EXEC SQL DECLARE mani_cur6 CURSOR FOR
		SELECT client, IDENTIY_NO, srl_no, (NVL(MOVED_QTY,0) - NVL(MANIFOLD_QTY,0)), access_stamp
		FROM DL_REGDET
		WHERE REG_ST_CD = RTRIM(:chr_l_h_prevreg)
		AND 	(NVL(MOVED_QTY,0) - NVL(MANIFOLD_QTY,0)) > 0
		ORDER BY client, IDENTIY_NO;

		EXEC SQL OPEN mani_cur6;
	}

	IS_ANY_ORA_ERROR

	for (int_l_reccount=0; ;)
	{
		

		memset(chr_l_h_client_a, NULL, APL_CLIENT_LENGTH);
		memset(chr_l_h_refno_A, NULL, APL_TXNREFNO_LEN);
		memset(chr_l_h_access_stamp, NULL, APL_DATE_LEN);
		l_h_quantity_a = 0.0;
		int_l_h_srlno = 0;

		int_l_i_qty = 0;
		l_i_srlno = 0;
		l_i_access_stamp = 0;
		l_i_account = 0;
		l_i_refno = 0;

		switch (int_l_flag)
		{
			case 1 : EXEC SQL FETCH mani_cur5 INTO	:chr_l_h_client_a:l_i_account,
																:chr_l_h_refno_A:l_i_refno,
																:int_l_h_srlno:l_i_srlno,
																:l_h_quantity_a:int_l_i_qty,
																:chr_l_h_access_stamp:l_i_access_stamp;
						break;

			case 2 : EXEC SQL FETCH mani_cur6 INTO	:chr_l_h_client_a:l_i_account,
																:chr_l_h_refno_A:l_i_refno,
																:int_l_h_srlno:l_i_srlno,
																:l_h_quantity_a:int_l_i_qty,
																:chr_l_h_access_stamp:l_i_access_stamp;
						break;
		}

		if (APL_ZERO_RESULT_SET) break;

		IS_ANY_ORA_ERROR

		

		EXEC SQL SELECT deal_cd, instr_code, access_stamp
		INTO 	:chr_l_h_trcode_a:int_l_i_trcode,
				:chr_l_h_instrcode_A:l_i_instr_code,
				:chr_l_h_accst:l_i_accst
		FROM DL_DEAL
		WHERE client = RTRIM(:chr_l_h_client_a)
		AND	IDENTIY_NO   = RTRIM(:chr_l_h_refno_A);

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_DEAL_NF,
															chr_l_h_client_a,
															chr_l_h_refno_A,
															APL_NULL_STRING );

		

		if (VAL_DELIVER_DEAL(chr_l_h_trcode_a[0]))
		{
			continue;
		}

		

		if (l_ru_min)
		{
			EXEC SQL SELECT CLASSCD
			INTO :chr_l_h_clscode:l_i_clscode
			FROM MT_INSTRUMENT
			WHERE instr_code = :chr_l_h_instrcode_A;

			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_INSTR_NOTFND,
																chr_l_h_instrcode_A,
																APL_NULL_STRING,
																APL_NULL_STRING );

			if (!strcmp(chr_l_h_clscode, "MIN"))
			{
				continue;
			}
		}

		int_l_reccount++;

		if ((int_l_reccount > 1) && 
			 ((strcmp(chr_l_h_client_a, chr_l_prev_client)) ||
			 (strcmp(chr_l_h_refno_A, chr_l_prev_refno))))
		{
			memset(l_dl_manifld_struct_h, NULL, sizeof(DL_MANIFLD_STRUCT_H));
			strcpy(l_dl_manifld_struct_h->h_dl_client, chr_l_prev_client);
			strcpy(l_dl_manifld_struct_h->h_indentity_no, chr_l_prev_refno);
			strcpy(l_dl_manifld_struct_h->h_tktclass, p_dl_maniprnt_struct_h->h_tktclass);
			strcpy(l_dl_manifld_struct_h->h_dupl, "N");
			strcpy(l_dl_manifld_struct_h->h_access_stamp, chr_l_prev_accst);

			DL_Prnt_MPTempS(	l_dl_manifld_struct_h,
								l_reqdetails_struct_ha_a,
								chr_p_now,
								p_logfile,
								p_intl_envdatastruct_h,
								l_debug_info_ptr );

			IS_ANY_ERROR_FATAL

			if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(p_logfile, APL_NULL_STRING, l_debug_info_ptr, p_intl_envdatastruct_h);
				CO_FreeErrLst(l_debug_info_ptr);
			}

			memset(l_reqdetails_struct_ha_a, NULL, sizeof(REQDETAILS_STRUCT_H));
		}

		l_reqdetails_struct_ha_a->h_element_cnt++;

		l_reqdetails_struct_ha_a->h_srl_no = (int *)realloc(l_reqdetails_struct_ha_a->h_srl_no,
																l_reqdetails_struct_ha_a->h_element_cnt*sizeof(int));
		APL_MALLOC_FAIL(l_reqdetails_struct_ha_a->h_srl_no);
		*(l_reqdetails_struct_ha_a->h_srl_no + l_reqdetails_struct_ha_a->h_element_cnt - 1) = int_l_h_srlno;

		l_reqdetails_struct_ha_a->h_qty = (double *)realloc(	l_reqdetails_struct_ha_a->h_qty,
																	l_reqdetails_struct_ha_a->h_element_cnt*sizeof(double));
		APL_MALLOC_FAIL(l_reqdetails_struct_ha_a->h_qty);
		*(l_reqdetails_struct_ha_a->h_qty + l_reqdetails_struct_ha_a->h_element_cnt - 1) = l_h_quantity_a;

		l_reqdetails_struct_ha_a->h_access_stamp = (char *)realloc(	l_reqdetails_struct_ha_a->h_access_stamp,
																			l_reqdetails_struct_ha_a->h_element_cnt*APL_DATE_LEN);
		APL_MALLOC_FAIL(l_reqdetails_struct_ha_a->h_access_stamp);
		strcpy((l_reqdetails_struct_ha_a->h_access_stamp + APL_DATE_LEN*(l_reqdetails_struct_ha_a->h_element_cnt - 1)), 
				 chr_l_h_access_stamp );
	
		

		strcpy(chr_l_prev_client, chr_l_h_client_a);
		strcpy(chr_l_prev_refno, chr_l_h_refno_A);
		strcpy(chr_l_prev_accst, chr_l_h_accst);

		

      if (!int_l_reccount%C_COMMITSIZE)
      {
			

			memset(chr_l_buf, NULL, BUFFER_LEN);
			sprintf(chr_l_buf, "Processed %d records", int_l_reccount);

			EXEC SQL UPDATE SYS_BATCHPROC
			SET STAT_DET = :chr_l_buf
        	WHERE PROCESS_NAME=:argv[0]
        	AND   PROC_INIT=:argv[1]
        	AND   STARTDATE=:argv[2]
        	AND   STATUS='started';

			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_REC_NOTFND,
																"Batch_in_proc Rec",
																APL_NULL_STRING,
																APL_NULL_STRING )

         EXEC SQL COMMIT WORK;
         IS_ANY_ORA_ERROR

			CO_ProcMonitor(p_logfile, "Record Committed", NULL, NULL);

			switch(int_l_flag)
			{
				case 1 : EXEC SQL OPEN mani_cur5;
							break;
				case 2 : EXEC SQL OPEN mani_cur6;
							break;
			}

			IS_ANY_ORA_ERROR

         EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
         FROM SYS_BATCHPROC
         WHERE PROCESS_NAME=:argv[0]
         AND   PROC_INIT=:argv[1]
         AND   STARTDATE=:argv[2]
         AND   STATUS='started'
         FOR UPDATE OF PROCESSING_STATUS,STATUS;

         if(APL_ZERO_RESULT_SET)
         {
            CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
            APL_GOBACK_FAIL
         }
      }
	}		

	

	memset(l_dl_manifld_struct_h, NULL, sizeof(DL_MANIFLD_STRUCT_H));
	strcpy(l_dl_manifld_struct_h->h_dl_client, chr_l_prev_client);
	strcpy(l_dl_manifld_struct_h->h_indentity_no, chr_l_prev_refno);
	strcpy(l_dl_manifld_struct_h->h_tktclass, p_dl_maniprnt_struct_h->h_tktclass);
	strcpy(l_dl_manifld_struct_h->h_dupl, "N");
	strcpy(l_dl_manifld_struct_h->h_access_stamp, chr_l_prev_accst);

	DL_Prnt_MPTempS(	l_dl_manifld_struct_h,
						l_reqdetails_struct_ha_a,
						chr_p_now,
						p_logfile,
						p_intl_envdatastruct_h,
						l_debug_info_ptr );

	IS_ANY_ERROR_FATAL

	if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
	{
		CO_ProcMonitor(p_logfile, APL_NULL_STRING, l_debug_info_ptr, p_intl_envdatastruct_h);
		CO_FreeErrLst(l_debug_info_ptr);
	}

	

	switch(int_l_flag)
	{
		case 1 : EXEC SQL CLOSE mani_cur5;
					break;
		case 2 : EXEC SQL CLOSE mani_cur6;
					break;
	}

	IS_ANY_ORA_ERROR

	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS :
	
		

		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "Processed %d records", int_l_reccount);

		EXEC SQL UPDATE SYS_BATCHPROC
		SET STAT_DET = :chr_l_buf
     	WHERE PROCESS_NAME=:argv[0]
     	AND   PROC_INIT=:argv[1]
     	AND   STARTDATE=:argv[2]
     	AND   STATUS='started';

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_REC_NOTFND,
															"Batch_in_proc Rec",
															APL_NULL_STRING,
															APL_NULL_STRING )

   	EXEC SQL COMMIT WORK;
   	IS_ANY_ORA_ERROR

		CO_ProcMonitor(p_logfile, "Record Committed", NULL, NULL);

   	EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
  	 	FROM SYS_BATCHPROC
   	WHERE PROCESS_NAME=:argv[0]
   	AND   PROC_INIT=:argv[1]
   	AND   STARTDATE=:argv[2]
   	AND   STATUS='started'
   	FOR UPDATE OF PROCESSING_STATUS,STATUS;

   	if(APL_ZERO_RESULT_SET)
   	{
      	CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
      	APL_GOBACK_FAIL
   	}

		CO_ProcMonitor(	p_logfile,
						"Leaving Function DL_Prnt_MPTempB with Success\n",
						NULL,
						NULL);
		return(APL_SUCCESS);

	RETURN_FAILURE :
		CO_ProcMonitor(	p_logfile,
						"Leaving Function DL_Prnt_MPTempB with Errors\n",
						NULL,
						NULL);
		return(APL_FAILURE);

}



int main(int argc,char **argv) // AIX - Warnings Removal
{
	struct sqlca sqlca;
   DEBUG_INFO_STRUCT_H *l_debug_info_ptr = NULL ;
	DL_MANIFLD_STRUCT_H	l_dl_manifld_struct_h;
	REQDETAILS_STRUCT_H	l_reqdetails_struct_ha_a;
	INTL_ENV_DATA_STRUCT_H l_intl_env_data_h;
	FILE *l_finifile = NULL;
	FILE *l_flogfile = NULL;

   int int_l_retval=0;
	int int_num = 0;
	int i = 0;

	char **temp 	= NULL;
	char **chr_srlno 	= NULL;
	char **quantity		= NULL;
	char **chr_accst 	= NULL;	
   char chr_uname[APL_USERID_LEN] 		= APL_NULL_STRING;
   char chr_custody_id_b[APL_USERID_LEN] 		= APL_NULL_STRING;
   char chr_passwd[APL_PASSWD_LEN] 		= APL_NULL_STRING;
	//char chr_l_logdir[PATH_LENGTH]			= APL_NULL_STRING; //AIX - Warnings Removal
	//char chr_l_logname[PATH_LENGTH] 		= APL_NULL_STRING; //AIX - Warnings Removal
	char chr_l_inifile[PATH_LENGTH] 		= APL_NULL_STRING;

   EXEC SQL VAR chr_uname IS STRING;
   EXEC SQL VAR chr_custody_id_b IS STRING;
   EXEC SQL VAR chr_passwd IS STRING;

	sqlca.sqlcode = 0;

	memset(&l_dl_manifld_struct_h, NULL, sizeof(DL_MANIFLD_STRUCT_H));
	memset(&l_reqdetails_struct_ha_a, NULL, sizeof(REQDETAILS_STRUCT_H));

	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

	if ( ( l_finifile=fopen(chr_l_inifile,"r") ) == NULL)
	{
		APL_GOBACK_FAIL
	}

	

	

	APL_FETCH_DB_LOGIN_DETAILS(l_finifile, chr_custody_id_b, chr_uname, chr_passwd, APL_OUT_FILE, &l_debug_info_ptr) 

	

   EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;

   if (sqlca.sqlcode)
   {
      APL_GOBACK_FAIL
   }
   else
   {
		

		if (APL_FAILURE == CO_Rtv_RptFileName(	"3Q",
														APL_LOGFILE_DESC,
														100,
														argv[5],
														argv,
														&l_flogfile,
														&l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL
		}

		

		EXEC SQL COMMIT WORK;

		if (sqlca.sqlcode)
		{
			CO_ProcMonitor(l_flogfile, "Could not commit after opening chr_log file", NULL, NULL);
			CO_Proc_RptClose(l_flogfile, &l_debug_info_ptr);
			APL_GOBACK_FAIL
		}

		

		if (APL_FAILURE == CO_RtvSysParams(&l_debug_info_ptr))
		{
			CO_ProcMonitor(l_flogfile, "Could not get System parameters", NULL, NULL);
			CO_Proc_RptClose(l_flogfile, &l_debug_info_ptr);
			APL_GOBACK_FAIL
		}

		

		if (APL_FAILURE == CO_SplitStr(	argv[9],
													'|',
													&int_num,
													&temp ))
		{
			CO_ProcMonitor(l_flogfile, "CBStrSplitFn returned failure", NULL, NULL);
			CO_Proc_RptClose(l_flogfile, &l_debug_info_ptr);
			APL_GOBACK_FAIL
		}

      strcpy(l_dl_manifld_struct_h.h_dl_client, temp[0]);
      strcpy(l_dl_manifld_struct_h.h_indentity_no, temp[1]);
      strcpy(l_dl_manifld_struct_h.h_tktclass, temp[2]);
      strcpy(l_dl_manifld_struct_h.h_dupl, temp[3]);
      strcpy(l_dl_manifld_struct_h.h_access_stamp, temp[4]);
      l_reqdetails_struct_ha_a.h_element_cnt = atoi(temp[5]);

		if (l_reqdetails_struct_ha_a.h_element_cnt)
		{
			if (APL_FAILURE == CO_SplitStr(	temp[6],
														';',
														&int_num,
														&chr_srlno ))
			{
				CO_ProcMonitor(l_flogfile, "CBStrSplitFn returned failure", NULL, NULL);
				CO_Proc_RptClose(l_flogfile, &l_debug_info_ptr);
				APL_GOBACK_FAIL
			}

			if (int_num != l_reqdetails_struct_ha_a.h_element_cnt)
			{
				CO_ProcMonitor(l_flogfile, "Improper number of arguements in Instrond Array", NULL, NULL);
				CO_Proc_RptClose(l_flogfile, &l_debug_info_ptr);
				APL_GOBACK_FAIL
			}

			if (APL_FAILURE == CO_SplitStr(	temp[7],
														';',
														&int_num,
														&quantity ))
			{
				CO_ProcMonitor(l_flogfile, "CBStrSplitFn returned failure", NULL, NULL);
				CO_Proc_RptClose(l_flogfile, &l_debug_info_ptr);
				APL_GOBACK_FAIL
			}

			if (int_num != l_reqdetails_struct_ha_a.h_element_cnt)
			{
				CO_ProcMonitor(l_flogfile, "Improper number of arguements in Instrond Array", NULL, NULL);
				CO_Proc_RptClose(l_flogfile, &l_debug_info_ptr);
				APL_GOBACK_FAIL
			}

			if (APL_FAILURE == CO_SplitStr(	temp[8],
														';',
														&int_num,
														&chr_accst ))
			{
				CO_ProcMonitor(l_flogfile, "CBStrSplitFn returned failure", NULL, NULL);
				CO_Proc_RptClose(l_flogfile, &l_debug_info_ptr);
				APL_GOBACK_FAIL
			}

			if (int_num != l_reqdetails_struct_ha_a.h_element_cnt)
			{
				CO_ProcMonitor(l_flogfile, "Improper number of arguements in Instrond Array", NULL, NULL);
				CO_Proc_RptClose(l_flogfile, &l_debug_info_ptr);
				APL_GOBACK_FAIL
			}

			l_reqdetails_struct_ha_a.h_srl_no = (int *)calloc(int_num, sizeof(int));
			l_reqdetails_struct_ha_a.h_qty = (double *)calloc(int_num, sizeof(double));
			l_reqdetails_struct_ha_a.h_access_stamp = (char *)calloc(1, (int_num * APL_DATE_LEN));

			for (i=0;i<l_reqdetails_struct_ha_a.h_element_cnt;i++)
			{
				*(l_reqdetails_struct_ha_a.h_srl_no + i) = atoi(chr_srlno[i]);
				*(l_reqdetails_struct_ha_a.h_qty + i) = atof(quantity[i]);
				strcpy((l_reqdetails_struct_ha_a.h_access_stamp + i*APL_DATE_LEN), chr_accst[i]);
			}
		}		

		

		strcpy(l_intl_env_data_h.usr, argv[3]);
		strcpy(l_intl_env_data_h.h_mode, argv[4]);
		strcpy(l_intl_env_data_h.processtion, argv[5]);
		strcpy(l_intl_env_data_h.auth_req, argv[6]);
		strcpy(l_intl_env_data_h.subprocess, argv[7]);
		strcpy(l_intl_env_data_h.h_process, argv[8]);

		int_l_retval = DL_Proc_MP(	&l_dl_manifld_struct_h,
										&l_reqdetails_struct_ha_a,
										argv,
										l_flogfile,
										&l_intl_env_data_h,
										&l_debug_info_ptr );
	
      if ( int_l_retval == APL_FAILURE )
      {
			CO_ProcMonitor(l_flogfile, "CBManifldFn returned failure : ROLLING BACK", NULL, NULL);
			CO_Proc_RptClose(l_flogfile, &l_debug_info_ptr);
			EXEC SQL ROLLBACK WORK RELEASE;
         APL_GOBACK_FAIL
      }
      else
      {
         EXEC SQL UPDATE SYS_BATCHPROC
         SET  status = 'completed'
         WHERE PROCESS_NAME=:argv[0]
         AND   PROC_INIT=:argv[1]
         AND   STARTDATE=:argv[2]
         AND   STATUS='started';

         EXEC SQL COMMIT WORK RELEASE;
			CO_Proc_RptClose(l_flogfile, &l_debug_info_ptr);
         APL_GOBACK_SUCCESS
      }
   }

	RETURN_SUCCESS : exit(0);
	RETURN_FAILURE : exit(-1);
}



int DL_Prnt_MPTempNoRegB(	DL_MANIFLD_STRUCT_H *p_dl_maniprnt_struct_h,
						char *chr_p_now,
						FILE *p_logfile,
						INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{

	char		chr_l_h_acc_stmp[APL_DATE_LEN]			= APL_NULL_STRING;
	char		chr_l_h_rowid[APL_ROWID_LEN]			= APL_NULL_STRING;
	char		chr_l_h_instrcode_A[APL_INSTRUMENTCODE_LEN]			= APL_NULL_STRING;
	char		chr_l_h_clscode[CLSCD_LEN]			= APL_NULL_STRING;
	char		chr_l_h_tmpoutdt[APL_DATE_LEN]			= APL_NULL_STRING;
	char		chr_l_h_tmpretdt[APL_DATE_LEN]       = APL_NULL_STRING;
	char		chr_l_h_locncode_a[APL_LOCNCODE_LENGTH]	= APL_NULL_STRING;
	char		chr_l_h_locmanif[APL_FLAG_LENGTH]			= APL_NULL_STRING;
	char		chr_l_h_trdfromord[APL_FLAG_LENGTH]		= APL_NULL_STRING;
	char		chr_l_h_trcode_a[APL_TXNREFNO_LEN]		= APL_NULL_STRING;
	char		chr_l_buf[BUFFER_LEN]						= APL_NULL_STRING;
	char		chr_l_h_status[RECORD_STAT_LEN]		= APL_NULL_STRING;	
	char		chr_l_h_regbrind[REG_BR_IND_LEN]		= APL_NULL_STRING;

	double 	l_h_quantity_a 			= 0.0;

	short		l_i_acc_stmp	= 0;
	short		l_i_rowid		= 0;
	short		l_i_instr_code		= 0;
	short		l_i_clscode 	= 0;
	short		l_i_tmpoutdt	= 0;
	short		l_i_tmpretdt	= 0;
	short		l_i_locncode	= 0;
	short		l_i_locmanif	= 0;
	short		int_l_i_qty			= 0;
	short		l_i_trdfromord	= 0;
	short		int_l_i_trcode		= 0;
	short		int_l_flag			= 0;
	short		l_i_status		= 0;
	short		l_i_regbrind	= 0;

	DL_DEALAUDIT_STRUCT_H *l_dl_dealaudit_struct_h  = NULL;
	DL_MANIPRNT_STRUCT_H	*l_dl_maniprnt_struct_h = NULL;

	

	EXEC SQL VAR chr_l_h_acc_stmp 		IS STRING;
	EXEC SQL VAR chr_l_h_rowid 			IS STRING;
	EXEC SQL VAR chr_l_h_instrcode_A 		IS STRING;
	EXEC SQL VAR chr_l_h_clscode 		IS STRING;
	EXEC SQL VAR chr_l_h_tmpoutdt 		IS STRING;
	EXEC SQL VAR chr_l_h_tmpretdt		IS STRING;
	EXEC SQL VAR chr_l_h_locncode_a 		IS STRING;
	EXEC SQL VAR chr_l_h_locmanif 		IS STRING;
	EXEC SQL VAR chr_l_h_trdfromord 	IS STRING;
	EXEC SQL VAR chr_l_h_status			IS STRING;
	EXEC SQL VAR chr_l_h_regbrind		IS STRING;
	
	
	memset(chr_l_h_status, APL_NULL_CHAR, RECORD_STAT_LEN);
	memset(chr_l_h_regbrind, APL_NULL_CHAR, REG_BR_IND_LEN);
	memset(chr_l_h_tmpoutdt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(chr_l_h_tmpretdt, APL_NULL_CHAR, APL_DATE_LEN);

	l_dl_dealaudit_struct_h = (DL_DEALAUDIT_STRUCT_H *)calloc(1, sizeof(DL_DEALAUDIT_STRUCT_H));
	APL_MALLOC_FAIL(l_dl_dealaudit_struct_h);
	l_dl_maniprnt_struct_h = (DL_MANIPRNT_STRUCT_H *)calloc(1, sizeof(DL_MANIPRNT_STRUCT_H));
	APL_MALLOC_FAIL(l_dl_maniprnt_struct_h);

	CO_ProcMonitor(	p_logfile, 
					"Entered Function DL_Prnt_MPTempNoRegB\n",
					NULL,
					NULL);

	#ifdef SYS_DEBUG
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf, 
					"The Account is : %s",
					p_dl_maniprnt_struct_h->h_dl_client);
		CO_ProcMonitor(	p_logfile, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf( chr_l_buf,
					"The Refno is : %s\n",
					p_dl_maniprnt_struct_h->h_indentity_no);
		CO_ProcMonitor(	p_logfile, 
						chr_l_buf,	
						NULL,
						NULL);
	#endif

	

	if (p_dl_maniprnt_struct_h->h_dupl[0] == 'N')
	{
		EXEC SQL SELECT dl_deal.access_stamp, rowid
		INTO 	:chr_l_h_acc_stmp:l_i_acc_stmp,
				:chr_l_h_rowid:l_i_rowid
		FROM dl_deal
		WHERE client = RTRIM(:p_dl_maniprnt_struct_h->h_dl_client)
		AND	IDENTIY_NO	  = RTRIM(:p_dl_maniprnt_struct_h->h_indentity_no)
		FOR UPDATE OF access_stamp;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_DEAL_NF,
															p_dl_maniprnt_struct_h->h_dl_client,
															p_dl_maniprnt_struct_h->h_indentity_no,
															APL_NULL_STRING );

		if (strcmp(chr_l_h_acc_stmp, p_dl_maniprnt_struct_h->h_access_stamp))
		{
			CO_InsertErr(	l_debug_info_ptr,
									ERR_ACCESSSTAMP_CHGD,
									p_dl_maniprnt_struct_h->h_dl_client,
									p_dl_maniprnt_struct_h->h_indentity_no,
									APL_NULL_STRING,
									__LINE__,
									__FILE__ );
									
			APL_GOBACK_FAIL
		}	
	}
		
	if (APL_FAILURE == DL_Chk_DLDet(  p_dl_maniprnt_struct_h->h_dl_client,
                                    p_dl_maniprnt_struct_h->h_indentity_no,
                                    'Y',
                                    'Y',
                                    'N',
                                    NULL,
                                    NULL,
                                    NULL,
                                    NULL,
                                    NULL,
                                    l_debug_info_ptr ))
   {
      APL_GOBACK_FAIL
   }

	

	if (APL_FAILURE == CO_Chk_CntryEnabled(	"TRD_MANIFOLD",
														"MANI_NOTREQD_FOR_MIN",
														&int_l_flag,
														l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	EXEC SQL SELECT a.instr_code, b.CLASSCD, a.TMP_OUT_DT, a.TMP_OUT_DATE, 
						a.location_cd, a.QTY, a.DEAL_FRM_ORD, a.deal_cd, 
						a.DEAL_STAT, b.REG_BR_IND
	INTO	:chr_l_h_instrcode_A:l_i_instr_code,
			:chr_l_h_clscode:l_i_clscode,
			:chr_l_h_tmpoutdt:l_i_tmpoutdt,
			:chr_l_h_tmpretdt:l_i_tmpretdt,
			:chr_l_h_locncode_a:l_i_locncode,
			:l_h_quantity_a:int_l_i_qty,
			:chr_l_h_trdfromord:l_i_trdfromord,
			:chr_l_h_trcode_a:int_l_i_trcode,
			:chr_l_h_status:l_i_status,
			:chr_l_h_regbrind:l_i_regbrind
	FROM dl_deal a, MT_INSTRUMENT b
	WHERE	a.instr_code = b.instr_code
	AND	a.client = RTRIM(:p_dl_maniprnt_struct_h->h_dl_client)
	AND	a.IDENTIY_NO 	 = RTRIM(:p_dl_maniprnt_struct_h->h_indentity_no);

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_DEAL_NF,
														p_dl_maniprnt_struct_h->h_dl_client,
														p_dl_maniprnt_struct_h->h_indentity_no,
														APL_NULL_STRING );

	

	if (l_mt_core_sys_params_struct_h.manifld_print_ind[0] == 'N')
	{
		CO_InsertErr(	l_debug_info_ptr,
								ERR_DATA_INTEGRITY,
								"Setup Manflag is N",
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__ );
		APL_GOBACK_FAIL
	}

	

	if (VAL_DELIVER_DEAL(chr_l_h_trcode_a[0]))
	{
		CO_InsertErr(	l_debug_info_ptr,
								ERR_DATA_INTEGRITY,
								"Trade Code",
								"Ticket Type",
								"Mismatch",
								__LINE__,
								__FILE__ );
		APL_GOBACK_FAIL
	}	

	

	if ((!strcmp(chr_l_h_clscode, "MIN")) && (int_l_flag))
	{
		CO_InsertErr(	l_debug_info_ptr,
								ERR_DEAL_CANT_MANI_RUMIN,
								APL_NULL_STRING,
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__ );
		APL_GOBACK_FAIL
	}

	if (l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y')
	{
		EXEC SQL SELECT MANIFLD_IND
		INTO :chr_l_h_locmanif:l_i_locmanif
		FROM MT_LOCATION
		WHERE location_cd = RTRIM(:chr_l_h_locncode_a);

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_LOCN_NOTFND,
															chr_l_h_locncode_a,
															APL_NULL_STRING,
															APL_NULL_STRING);

		if (chr_l_h_locmanif[0] == 'N')
		{
			if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
															ERR_DEAL_LOC_MAN_NALLOW,
															chr_l_h_locncode_a,
															APL_NULL_STRING,
															APL_NULL_STRING,
															__LINE__,
															__FILE__ ))
			{
				APL_GOBACK_FAIL
			}
		}
	}

	
	if((TEMP_RET_IND == p_dl_maniprnt_struct_h->h_tktclass[0]) && (!strlen(chr_l_h_tmpoutdt)))	
	{
		memset(chr_l_buf, APL_NULL_CHAR, BUFFER_LEN);
		sprintf(chr_l_buf, "Temp-return ticket cannot be printed before temp-out ticket Account: %s	Refno: %s\n", p_dl_maniprnt_struct_h->h_dl_client, p_dl_maniprnt_struct_h->h_indentity_no);
		CO_ProcMonitor(p_logfile, chr_l_buf, l_debug_info_ptr, p_intl_envdatastruct_h);	
		APL_GOBACK_FAIL
	}

	if(strcmp(chr_l_h_status, STATUS_SETL))
	{
		memset(chr_l_buf, APL_NULL_CHAR, BUFFER_LEN);	
		sprintf(chr_l_buf, "Trade Not Settled. Account: %s , Refno: %s \n",p_dl_maniprnt_struct_h->h_dl_client, p_dl_maniprnt_struct_h->h_indentity_no);
		CO_ProcMonitor(p_logfile, chr_l_buf, l_debug_info_ptr, p_intl_envdatastruct_h);
		APL_GOBACK_FAIL
	}

	if(strcmp(chr_l_h_regbrind, APL_INSTRU_REGD))
	{
		memset(chr_l_buf, APL_NULL_CHAR, BUFFER_LEN);	
		sprintf(chr_l_buf, "Instrurity Type is not Registered. %s \n",chr_l_h_instrcode_A);
		CO_ProcMonitor(p_logfile, chr_l_buf, l_debug_info_ptr, p_intl_envdatastruct_h);
		APL_GOBACK_FAIL
	}

	if (p_dl_maniprnt_struct_h->h_dupl[0] == 'N')
	{
		if(((TEMP_OUTTKT_IND == p_dl_maniprnt_struct_h->h_tktclass[0]) && (strlen(chr_l_h_tmpoutdt))) ||
				((TEMP_RET_IND == p_dl_maniprnt_struct_h->h_tktclass[0] ) && (strlen(chr_l_h_tmpretdt))))
		{
			CO_InsertErr(	l_debug_info_ptr,
								ERR_DEAL_MANIFLD_PRINT,
								p_dl_maniprnt_struct_h->h_dl_client,
								p_dl_maniprnt_struct_h->h_indentity_no,
								APL_NULL_STRING,
								__LINE__,
								__FILE__ );
			APL_GOBACK_FAIL
		}
	}
	else if (p_dl_maniprnt_struct_h->h_dupl[0] == 'Y')
	{
		if(((TEMP_RET_IND == p_dl_maniprnt_struct_h->h_tktclass[0]) && (!strlen(chr_l_h_tmpretdt))) ||
				((TEMP_OUTTKT_IND == p_dl_maniprnt_struct_h->h_tktclass[0] ) && (!strlen(chr_l_h_tmpoutdt))))
		{
			CO_InsertErr(	l_debug_info_ptr,
								ERR_DEAL_MANIFLD_NPRINT,
								p_dl_maniprnt_struct_h->h_dl_client,
								p_dl_maniprnt_struct_h->h_indentity_no,
								APL_NULL_STRING,
								__LINE__,
								__FILE__ );
			APL_GOBACK_FAIL
		}
	}
	
	

	if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr)) APL_GOBACK_FAIL

	

	strcpy(l_dl_maniprnt_struct_h->h_dl_client, p_dl_maniprnt_struct_h->h_dl_client);
	strcpy(l_dl_maniprnt_struct_h->h_indentity_no, p_dl_maniprnt_struct_h->h_indentity_no);
	strcpy(l_dl_maniprnt_struct_h->h_tktclass, p_dl_maniprnt_struct_h->h_tktclass);
	strcpy(l_dl_maniprnt_struct_h->h_dupl, p_dl_maniprnt_struct_h->h_dupl);
	l_dl_maniprnt_struct_h->h_srl_no = 0;
	l_dl_maniprnt_struct_h->h_qty		  = l_h_quantity_a;

	if (APL_FAILURE == DL_Proc_MPPrnt(	l_dl_maniprnt_struct_h,
													chr_p_now,
													p_logfile,
													p_intl_envdatastruct_h,
													l_debug_info_ptr )) 
	{
		APL_GOBACK_FAIL
	}

	

	

	if (p_dl_maniprnt_struct_h->h_dupl[0] == 'N')
	{
		if(TEMP_OUTTKT_IND == p_dl_maniprnt_struct_h->h_tktclass[0] )
		{
			strcpy(l_dl_dealaudit_struct_h->h_subprocess, TEMPOUTTICKET);

			EXEC SQL UPDATE DL_DEAL
				SET TMP_OUT_DT = :chr_p_now,
					TEMP_OUT_QUANTITY = :l_h_quantity_a,	
					ACCESS_STAMP = :chr_p_now
				WHERE ROWID = :chr_l_h_rowid;
		}
		else if(TEMP_RET_IND == p_dl_maniprnt_struct_h->h_tktclass[0] )
		{
			strcpy(l_dl_dealaudit_struct_h->h_subprocess, TEMPRETURNTICKET);

			EXEC SQL UPDATE DL_DEAL
				SET TMP_OUT_DATE = :chr_p_now,
					TEMP_RET_QUANTITY = :l_h_quantity_a,
					ACCESS_STAMP = :chr_p_now
				WHERE ROWID = :chr_l_h_rowid;
		}

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_DEAL_NF,
															p_dl_maniprnt_struct_h->h_dl_client,
															p_dl_maniprnt_struct_h->h_indentity_no,
															APL_NULL_STRING );

		strcpy(l_dl_dealaudit_struct_h->h_dl_client, p_dl_maniprnt_struct_h->h_dl_client);
		strcpy(l_dl_dealaudit_struct_h->h_indentity_no, p_dl_maniprnt_struct_h->h_indentity_no);
		strcpy(l_dl_dealaudit_struct_h->h_trail_for, "T");
		strcpy(l_dl_dealaudit_struct_h->h_processdetail, p_intl_envdatastruct_h->processtion);
		strcpy(l_dl_dealaudit_struct_h->h_proc_usr, p_intl_envdatastruct_h->usr);
		l_dl_dealaudit_struct_h->h_qty = l_h_quantity_a;
		strcpy(l_dl_dealaudit_struct_h->h_dlfromord, chr_l_h_trdfromord);

		if (APL_FAILURE == CR_Mod_CLHAudTrail(l_dl_dealaudit_struct_h, l_debug_info_ptr))
		{
			APL_GOBACK_FAIL
		}
	}

	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS :
		CO_ProcMonitor(	p_logfile,
						"Leaving Function DL_Prnt_MPTempNoRegB with Success\n",
						NULL,
						NULL);
		return(APL_SUCCESS);

	RETURN_FAILURE :
		CO_ProcMonitor(	p_logfile,
						"Leaving Function DL_Prnt_MPTempNoRegB with Errors\n",
						NULL,
						NULL);
		return(APL_FAILURE);

}



int	DL_Prnt_MPTempNoRegS(	DL_MANIFLD_STRUCT_H *p_dl_maniprnt_struct_h,
							char *chr_p_now,
							char **argv,
							FILE *p_logfile,
							INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{
	

	int		int_l_reccount			= 0;

	char		chr_l_h_client_a[APL_CLIENT_LENGTH]			= APL_NULL_STRING;
	char		chr_l_h_refno_A[APL_TXNREFNO_LEN]			= APL_NULL_STRING;
	//char		chr_l_h_clscode[CLSCD_LEN]			= APL_NULL_STRING; // AIX - Warnings Removal
	char		chr_l_h_access_stamp[APL_DATE_LEN]		= APL_NULL_STRING;
	//char		chr_l_h_locmanif[APL_FLAG_LENGTH]		= APL_NULL_STRING; //AIX - Warnings Removal
	char		chr_l_h_instrcode_A[APL_INSTRUMENTCODE_LEN]				= APL_NULL_STRING;
	char		chr_l_h_locncode_a[APL_LOCNCODE_LENGTH]		= APL_NULL_STRING;
	char		chr_l_trcode1[APL_FLAG_LENGTH]					= APL_NULL_STRING;
	char		chr_l_trcode2[APL_FLAG_LENGTH]					= APL_NULL_STRING;
	char		chr_l_trd_status[APL_STATUS_LEN]			= APL_NULL_STRING;
	char		chr_l_buf[BUFFER_LEN]							= APL_NULL_STRING;
	char		chr_l_h_regbrind[REG_BR_IND_LEN]			= APL_NULL_STRING;
	char		chr_l_h_manifld[APL_FLAG_LENGTH]					= APL_NULL_STRING;

	short		l_i_account			= 0;
	short		l_i_refno			= 0;
	//short		l_i_clscode			= 0; // AIX - Warnings Removal
	short		l_i_access_stamp	= 0;
	//short		l_i_locmanif		= 0; // AIX - Warnings Removal
	short		l_i_instr_code			= 0;
	short		l_i_locncode		= 0;
	//short		int_l_flag				= 0; // AIX - Warnings Removal
	//short		l_ru_min				= 0; // AIX - Warnings Removal

	DL_MANIFLD_STRUCT_H	*l_dl_manifld_struct_h = NULL;

	varchar  sqlstmt[350];

   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;

EXEC SQL VAR chr_g_restart_data is string;


	EXEC SQL VAR chr_l_h_client_a IS STRING;
	EXEC SQL VAR chr_l_h_refno_A IS STRING;
	//EXEC SQL VAR chr_l_h_clscode IS STRING; // AIX - Warnings Removal
	EXEC SQL VAR chr_l_h_access_stamp IS STRING;
	//EXEC SQL VAR chr_l_h_locmanif IS STRING; // AIX - Warnings Removal
	EXEC SQL VAR chr_l_h_instrcode_A IS STRING;
	EXEC SQL VAR chr_l_h_locncode_a IS STRING;
	EXEC SQL VAR chr_l_h_regbrind	IS STRING;
	EXEC SQL VAR chr_l_h_manifld	IS STRING;

	

	memset(chr_l_h_manifld, APL_NULL_CHAR, APL_FLAG_LENGTH);
	memset(chr_l_h_regbrind, APL_NULL_CHAR, REG_BR_IND_LEN);

	l_dl_manifld_struct_h = (DL_MANIFLD_STRUCT_H *)calloc(1, sizeof(DL_MANIFLD_STRUCT_H));
	APL_MALLOC_FAIL(l_dl_manifld_struct_h);

	

	CO_ProcMonitor(	p_logfile, 
					"Entered Function DL_Prnt_MPTempNoRegS\n",
					NULL,
					NULL);

	#ifdef SYS_DEBUG 
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf, 
					"The Account is : %s",
					p_dl_maniprnt_struct_h->h_dl_client);
		CO_ProcMonitor(	p_logfile, 
						chr_l_buf,	
						NULL,
						NULL);
	#endif

	

	strcpy(chr_l_trd_status, STATUS_SETL);
	strcpy(chr_l_h_regbrind, 	APL_INSTRU_REGD);
	chr_l_trcode1[0] = DEALCD_RF;
	chr_l_trcode1[1] = '\0';
	chr_l_trcode2[0] = DEALCD_RVP;
	chr_l_trcode2[1] = '\0';
	strcpy(chr_l_h_manifld, APL_YES_IND); 
	
	memset(sqlstmt.arr, APL_NULL_CHAR, 100);
	sprintf((char *)sqlstmt.arr, "SELECT A.ACCOUNT, A.REFNO, A.INSTR_CODE, A.LOCNCODE, A.ACCESS_STAMP FROM DL_DEAL A, MT_INSTRUMENT B "); // AIX - Warnings Removal
	
	if (l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y')
		strcat((char *)sqlstmt.arr, " , CLOCATION C ");

	memset(chr_l_buf, APL_NULL_CHAR, BUFFER_LEN);
	sprintf(chr_l_buf, " WHERE B.INSTR_CODE = A.INSTR_CODE AND A.TRADE_STATUS = '%s' AND B.REGBRIND = '%s' AND A.TRCODE IN ('%s', '%s') ", chr_l_trd_status, chr_l_h_regbrind, chr_l_trcode1, chr_l_trcode2);
	strcat((char *)sqlstmt.arr, chr_l_buf);

	if (l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y')
		strcat((char *)sqlstmt.arr, " AND C.LOCNCODE = A.LOCNCODE "); //AIX - Warnings Removal

	if (strlen(p_dl_maniprnt_struct_h->h_dl_client))
		strcat((char *)sqlstmt.arr, " AND ACCOUNT = :v1 ");

	if(TEMP_OUTTKT_IND == p_dl_maniprnt_struct_h->h_tktclass[0]) 
		strcat((char *)sqlstmt.arr, " AND A.TMPOUTDT IS NULL"); //AIX - Warnings Removal
	else if (TEMP_RET_IND == p_dl_maniprnt_struct_h->h_tktclass[0])
		strcat((char *)sqlstmt.arr, " AND A.TMPRETDT IS NULL"); //AIX - Warnings Removal

	if (l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y')
	{
		memset(chr_l_buf, APL_NULL_CHAR, BUFFER_LEN);
		sprintf(chr_l_buf, " AND C.MANIFOLDFLG = '%s'", chr_l_h_manifld);
		strcat((char *)sqlstmt.arr, chr_l_buf); //AIX - Warnings Removal
	}

	sqlstmt.len = strlen((char *)sqlstmt.arr);
	sqlstmt.arr[sqlstmt.len]=APL_NULL_CHAR;
	sqlstmt.len++;
fprintf(p_logfile, "xx%sxx%d\n", sqlstmt.arr, sqlstmt.len);
	EXEC SQL PREPARE s1 FROM :sqlstmt;
	EXEC SQL DECLARE chr_c1 CURSOR FOR s1;
	if(strlen(p_dl_maniprnt_struct_h->h_dl_client))
		EXEC SQL OPEN chr_c1 USING :p_dl_maniprnt_struct_h->h_dl_client;
	else
		EXEC SQL OPEN chr_c1;

	IS_ANY_ORA_ERROR

	int_l_reccount = 0;
	for (;;)
	{

		

		memset(chr_l_h_client_a, NULL, APL_CLIENT_LENGTH);
		memset(chr_l_h_refno_A, NULL, APL_TXNREFNO_LEN);
		memset(chr_l_h_instrcode_A, NULL, APL_INSTRUMENTCODE_LEN);
		memset(chr_l_h_locncode_a, NULL, APL_LOCNCODE_LENGTH);
		memset(chr_l_h_access_stamp, NULL, APL_DATE_LEN);
		l_i_account = 0;
		l_i_refno = 0;
		l_i_instr_code = 0;
		l_i_locncode = 0;
		l_i_access_stamp = 0;

		
		EXEC SQL FETCH chr_c1 INTO :chr_l_h_client_a:l_i_account,
									:chr_l_h_refno_A:l_i_refno,
									:chr_l_h_instrcode_A:l_i_instr_code,
									:chr_l_h_locncode_a:l_i_locncode,
									:chr_l_h_access_stamp:l_i_access_stamp;

		if (APL_ZERO_RESULT_SET)
			 break;

		IS_ANY_ORA_ERROR

		

		memset(l_dl_manifld_struct_h, NULL, sizeof(DL_MANIFLD_STRUCT_H));
		strcpy(l_dl_manifld_struct_h->h_dl_client, chr_l_h_client_a);
		strcpy(l_dl_manifld_struct_h->h_indentity_no, chr_l_h_refno_A);
		strcpy(l_dl_manifld_struct_h->h_tktclass, p_dl_maniprnt_struct_h->h_tktclass);
		strcpy(l_dl_manifld_struct_h->h_dupl, "N");
		strcpy(l_dl_manifld_struct_h->h_access_stamp, chr_l_h_access_stamp);

		if (APL_FAILURE == DL_Prnt_MPTempNoRegB(	l_dl_manifld_struct_h,
													chr_p_now,
													p_logfile,
													p_intl_envdatastruct_h,
													l_debug_info_ptr ))
		{
			IS_ANY_ERROR_FATAL

			if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				CO_ProcMonitor(p_logfile, APL_NULL_STRING, l_debug_info_ptr, p_intl_envdatastruct_h);
				CO_FreeErrLst(l_debug_info_ptr);
			}
		}
		int_l_reccount++;
	}

	EXEC SQL CLOSE chr_c1;

	IS_ANY_ORA_ERROR

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :

		

		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "Processed %d records", int_l_reccount);

		EXEC SQL UPDATE SYS_BATCHPROC
		SET STAT_DET = :chr_l_buf
     	WHERE PROCESS_NAME=:argv[0]
     	AND   PROC_INIT=:argv[1]
     	AND   STARTDATE=:argv[2]
     	AND   STATUS='started';

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_REC_NOTFND,
															"Batch_in_proc Rec",
															APL_NULL_STRING,
															APL_NULL_STRING )

      EXEC SQL COMMIT WORK;
      IS_ANY_ORA_ERROR

		CO_ProcMonitor(p_logfile, "Record Committed", NULL, NULL);

      EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
      FROM SYS_BATCHPROC
      WHERE PROCESS_NAME=:argv[0]
      AND   PROC_INIT=:argv[1]
      AND   STARTDATE=:argv[2]
      AND   STATUS='started'
      FOR UPDATE OF PROCESSING_STATUS,STATUS;

      if(APL_ZERO_RESULT_SET)
      {
         CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
         APL_GOBACK_FAIL
      }

		CO_ProcMonitor(	p_logfile,
						"Leaving Function DL_Prnt_MPTempNoRegS with Success\n",
						NULL,
						NULL);
		return(APL_SUCCESS);

	RETURN_FAILURE :
		CO_ProcMonitor(	p_logfile,
						"Leaving Function DL_Prnt_MPTempNoRegS with Errors\n",
						NULL,
						NULL);
		return(APL_FAILURE);

}
