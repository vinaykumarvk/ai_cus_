/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         :      DEAL PROCESSING
 *
 * File Name           :      OBLIGATIONDUMP.pc
 *
 * Description         :      DEAL OBLIGATION Dump
 *
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author           Description        RFS No.
 * ---------   --------  ---------------  ------------------   ---------
 * 03-04-2006	1.0		 Amol Kulkarni 
 *************************************************************************/



#include "stdio_64.h"
#include "Intellect_Common.h"
#include "Intellect_Interface.h"
#include "DL_Interface.h"
#include "BT_Common.h"
#include "Intellect_Error.h"
#include "CO_IndStructdef.h"


#define DATA_FIELD_SEPRTR ''
#define DATA_VALUE_SEPRTR ''


EXEC SQL INCLUDE SQLCA.H;

int main(int argc,char **argv) //AIX - Warnings Removal
{	
	/***********	Variable Declaration Section	**********/
	DEBUG_INFO_STRUCT_H **l_debug_info_ptr = (DEBUG_INFO_STRUCT_H **) NULL;
	l_debug_info_ptr = (DEBUG_INFO_STRUCT_H **)calloc(1,sizeof(DEBUG_INFO_STRUCT_H *)); 

	int l_int_num = 0;
	char  **temp = ( char **)NULL;
	char l_settlment_no[16] = APL_NULL_STRING;
	char l_mkt_type[4]= APL_NULL_STRING;
	char l_exchange[4] = APL_NULL_STRING;

	FILE *l_logfile = (FILE *)NULL;
	FILE *p_logfile = NULL;

	/***********	Data Base Connention	**********/
	if(CO_Get_DBConnect(l_debug_info_ptr) == APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}

	/***********	Processing INPUT PARAMETERS	START	**********/
	if (APL_FAILURE == CO_Rtv_RptFileName( "7g",
				APL_LOGFILE_DESC,
				100,
				argv[5],
				argv,
				&l_logfile,
				l_debug_info_ptr ) ) 
	{
		CO_ProcMonitor(l_logfile, "Failure from CO RTY:", NULL, NULL);
		APL_GOBACK_FAIL
	} 


	
	if(BT_Status_Update(argv[0],
				argv[1],
				argv[2],
				APL_STARTED_STATUS,
				l_debug_info_ptr) ==APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}


	
	if(APL_FAILURE == CO_SplitStr(argv[9],
			'|',
			&l_int_num,&temp))
	{
		CO_ProcMonitor(l_logfile, "Failure from StrSplitFn", NULL, NULL);
		APL_GOBACK_FAIL

	}
	
	if(sqlca.sqlcode)
	{
		APL_GOBACK_FAIL
	}

	/*Checking Mandatory Fields*/
	if (!strlen(temp[0]))
	{
		printf("\n\tSettlment Number missing!!!!!!!!!\n");
		CO_ProcMonitor(l_logfile, "Mandatory Data Missing: Settlment Number", NULL, NULL);
		APL_GOBACK_FAIL
	}

	/*Storing the INPUT PARAMETERS into Local Variables*/
	if(strcmp(temp[0],APL_NULL_STRING) == 0)
		strcpy(l_settlment_no,"%");
	else
		strcpy(l_settlment_no, temp[0]);

	if(strcmp(temp[1],APL_NULL_STRING) == 0)
		strcpy(l_exchange,"%");
	else
		strcpy(l_exchange, temp[1]);

/*	if(strcmp(temp[2],APL_NULL_STRING) == 0)
		strcpy(l_mkt_type,"%");
	else
		strcpy(l_mkt_type, temp[2]);
*/
	/*Checking Mandatory Fields*/
/*	if (!strlen(temp[0]))
	{
		CO_ProcMonitor(l_logfile, "Mandatory Data Missing: Settlment Number", NULL, NULL);
		APL_GOBACK_FAIL
	} 
*/
	/*
	if (!strlen(temp[1]))
	{
		CO_ProcMonitor(l_logfile, "Mandatory Data Missing: Exchange Code", NULL, NULL);
		APL_GOBACK_FAIL
	} 

	if (!strlen(temp[2]))
	{
		CO_ProcMonitor(l_logfile, "Mandatory Data Missing: Market Type", NULL, NULL);
		APL_GOBACK_FAIL
	} 
	*/

	/*************	Processing INPUT PARAMETERS	END	***************/
	
	if(APL_FAILURE == addDump(l_settlment_no,l_mkt_type,l_exchange,l_debug_info_ptr))
		{
			CO_ProcMonitor(l_logfile, "addDump returned failure", NULL, NULL);
			APL_GOBACK_FAIL
		}

APL_GOBACK_SUCCESS

RETURN_SUCCESS :
	if(BT_Status_Completed(argv[0],
				argv[1],
				argv[2],
				l_debug_info_ptr)   ==  APL_FAILURE )
	{
		APL_GOBACK_FAIL
	}
	CO_Proc_RptClose(l_logfile, l_debug_info_ptr);

	EXEC SQL COMMIT WORK;

	if(sqlca.sqlcode != 0)APL_GOBACK_FAIL
		exit(0);

	RETURN_FAILURE    :
	/* OPT:AIX strcpy(l_debug_info_ptr,"Data Not Found"); */
	CO_InsertErr(l_debug_info_ptr,ERR_VAL_NF,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);

	/*CO_Proc_RptClose(l_logfile, l_debug_info_ptr);*/
	exit(-1);
		 
}

int addDump(char *l_settlment_no,char *l_mkt_type,char *l_exchange,DEBUG_INFO_STRUCT_H **l_debug_info_ptr) 	
{	
	/*Variable Declaration Section*/
	int flag=1;
	int count=1;
        short int_l_condexists = 0; /*** Datatype changed from int to short for AIX Migration to remove warning*/

	DL_EXCHOBLIGATION_STRUCT_H *l_dl_exchobligation=NULL;	
	DL_EXCHOBLIGATION_STRUCT_I *l_dl_exchobligation_ind=NULL;	

	/*Calloc*/
	l_dl_exchobligation=(DL_EXCHOBLIGATION_STRUCT_H *)calloc(1,sizeof(DL_EXCHOBLIGATION_STRUCT_H));	
	l_dl_exchobligation_ind=(DL_EXCHOBLIGATION_STRUCT_I *)calloc(1,sizeof(DL_EXCHOBLIGATION_STRUCT_I));	
	
	/*MemSet*/
	memset(l_dl_exchobligation, NULL, sizeof(DL_EXCHOBLIGATION_STRUCT_H));
	memset(l_dl_exchobligation_ind, NULL, sizeof(DL_EXCHOBLIGATION_STRUCT_I));

	/*Deleting value from dl_exchobligation_rec*/
	EXEC SQL DELETE FROM dl_exchobligation_rec;
	printf("\nsqlcode for delete =%d",sqlca.sqlcode);

	/*SQL Declaration*/
/**	EXEC SQL DECLARE deal_outer CURSOR FOR		
		SELECT SETTLEMENT_NO, INSTR_CODE AS INSTR_CD, NVL(SUM(DECODE(DEAL_CD,'1',QTY)),0)+NVL(SUM(DECODE(DEAL_CD,'3',QTY)),0)-(NVL(SUM(DECODE(DEAL_CD,'2',QTY)),0)+NVL(SUM(DECODE(DEAL_CD,'4',QTY)),0)) AS AGGR_QTY, NVL(SUM(DECODE(DEAL_CD,'1',AMOUNT)),0)+NVL(SUM(DECODE(DEAL_CD,'3',AMOUNT)),0)-(NVL(SUM(DECODE(DEAL_CD,'2',AMOUNT)),0)+NVL(SUM(DECODE(DEAL_CD,'4',AMOUNT)),0)) AS AGG_AMT, MKT_TYPE,'C' AS DEAL_CD,DEAL_DATE,'UU'AS STATUS,EXCH_CODE FROM DL_DEAL GROUP BY SETTLEMENT_NO, INSTR_CODE,MKT_TYPE,DEAL_DATE,EXCH_CODE, DEAL_STAT HAVING MKT_TYPE <> '22' AND DEAL_STAT='CC' UNION  SELECT SETTLEMENT_NO, INSTR_CODE AS INSTR_CD, NVL(SUM(DECODE(DEAL_CD,'1',QTY)),0) + NVL(SUM(DECODE(DEAL_CD,'3',QTY)),0) AS AGGR_QTY, NVL(SUM(DECODE(DEAL_CD,'1',AMOUNT)),0) + NVL(SUM(DECODE(DEAL_CD,'3',AMOUNT)),0) AS AGG_AMT, MKT_TYPE,'S' AS DEAL_CD,DEAL_DATE,'UU'AS STATUS,EXCH_CODE FROM DL_DEAL GROUP BY SETTLEMENT_NO, INSTR_CODE,MKT_TYPE,DEAL_DATE,EXCH_CODE,DEAL_STAT HAVING MKT_TYPE = '22' AND DEAL_STAT='CC'  UNION SELECT SETTLEMENT_NO,INSTR_CODE AS INSTR_CD , NVL(SUM(DECODE(DEAL_CD,'2',QTY)),0) + NVL(SUM(DECODE(DEAL_CD,'4',QTY)),0) AS AGGR_QTY, NVL(SUM(DECODE(DEAL_CD,'2',AMOUNT)),0) + NVL(SUM(DECODE(DEAL_CD,'4',AMOUNT)),0) AS AGG_AMT, MKT_TYPE,'S' AS DEAL_CD,DEAL_DATE,'UU'AS STATUS,EXCH_CODE FROM DL_DEAL GROUP BY SETTLEMENT_NO, INSTR_CODE,MKT_TYPE,DEAL_DATE,EXCH_CODE,DEAL_STAT HAVING MKT_TYPE = '22' AND DEAL_STAT='CC';
 **/

EXEC SQL DECLARE deal_outer CURSOR FOR
		SELECT SETTLEMENT_NO, INSTR_CODE AS INSTR_CD,
				 NVL(SUM(DECODE(DEAL_CD,'1',QTY)),0)+NVL(SUM(DECODE(DEAL_CD, '3',QTY)),0)-(NVL(SUM(DECODE(DEAL_CD,'2',QTY)),0)+NVL(SUM(DECODE(DEAL_CD, '4',QTY)),0)) AS AGGR_QTY, 
				 NVL(SUM(DECODE(DEAL_CD,'1',NET_AMT)),0)+NVL(SUM(DECODE(DEAL_CD, '3',NET_AMT)),0)-(NVL(SUM(DECODE(DEAL_CD,'2',NET_AMT)),0)+NVL(SUM(DECODE(DEAL_CD,'4',NET_AMT)), 0)) AS AGG_AMT, 
				 MKT_TYPE,'C' AS DEAL_CD,DEAL_DATE,'UU'AS STATUS,EXCH_CODE 
					 FROM DL_DEAL 
           where exch_code='BSE'
					 GROUP BY SETTLEMENT_NO, INSTR_CODE,MKT_TYPE,DEAL_DATE,EXCH_CODE, DEAL_STAT 
					 HAVING DEAL_STAT='PM' 
				union        
        	SELECT SETTLEMENT_NO, INSTR_CODE AS INSTR_CD,
				 NVL(SUM(DECODE(DEAL_CD,'1',QTY)),0)+NVL(SUM(DECODE(DEAL_CD, '3',QTY)),0)-(NVL(SUM(DECODE(DEAL_CD,'2',QTY)),0)+NVL(SUM(DECODE(DEAL_CD, '4',QTY)),0)) AS AGGR_QTY, 
				 NVL(SUM(DECODE(DEAL_CD,'1',AMOUNT)),0)+NVL(SUM(DECODE(DEAL_CD, '3',AMOUNT)),0)-(NVL(SUM(DECODE(DEAL_CD,'2',AMOUNT)),0)+NVL(SUM(DECODE(DEAL_CD,'4',AMOUNT)), 0)) AS AGG_AMT, 
				 MKT_TYPE,'C' AS DEAL_CD,DEAL_DATE,'UU'AS STATUS,EXCH_CODE 
					 FROM DL_DEAL 
           where exch_code='NSE'
					 GROUP BY SETTLEMENT_NO, INSTR_CODE,MKT_TYPE,DEAL_DATE,EXCH_CODE, DEAL_STAT 
					 HAVING MKT_TYPE <> '22' AND DEAL_STAT='PM' 
					 UNION 
					 SELECT SETTLEMENT_NO, INSTR_CODE AS INSTR_CD, 
				 NVL(SUM(DECODE(DEAL_CD,'1',QTY)),0) + NVL(SUM(DECODE(DEAL_CD, '3',QTY)),0) AS AGGR_QTY, 
				 NVL(SUM(DECODE(DEAL_CD,'1',AMOUNT)),0) + NVL(SUM(DECODE(DEAL_CD, '3',AMOUNT)),0) AS AGG_AMT, 
				 MKT_TYPE,'S' AS DEAL_CD,DEAL_DATE,'UU'AS STATUS,EXCH_CODE 
					 FROM DL_DEAL 
           where exch_code='NSE'
					 GROUP BY SETTLEMENT_NO, INSTR_CODE,MKT_TYPE,DEAL_DATE,EXCH_CODE,DEAL_STAT 
					 HAVING MKT_TYPE = '22' AND DEAL_STAT='PM' 
					 UNION 
					 SELECT SETTLEMENT_NO,INSTR_CODE AS INSTR_CD , NVL(SUM(DECODE(DEAL_CD,'2',QTY)),0) + NVL(SUM(DECODE(DEAL_CD, '4',QTY)),0) AS AGGR_QTY, 
				 NVL(SUM(DECODE(DEAL_CD,'2',AMOUNT)),0) + NVL(SUM(DECODE(DEAL_CD, '4',AMOUNT)),0) AS AGG_AMT, 
				 MKT_TYPE,'P' AS DEAL_CD,DEAL_DATE,'UU'AS STATUS,EXCH_CODE 
					 FROM DL_DEAL 
           where exch_code='NSE'
					 GROUP BY SETTLEMENT_NO, INSTR_CODE,MKT_TYPE,DEAL_DATE,EXCH_CODE,DEAL_STAT 
					 HAVING MKT_TYPE = '22' AND DEAL_STAT='PM'; 
		
	EXEC SQL OPEN deal_outer;
	
	for(;;)
	{
		EXEC SQL FETCH deal_outer INTO :l_dl_exchobligation:l_dl_exchobligation_ind;
		printf("\nsqlcode=%d",sqlca.sqlcode);
		if(APL_ZERO_RESULT_SET)
			 break;	
		/*if (sqlca.sqlcode==-1002)
		{
			break;
		}
		*/
		if(l_dl_exchobligation->h_agg_amt <0)
		{
			l_dl_exchobligation->h_agg_amt =l_dl_exchobligation->h_agg_amt *(-1);
			l_dl_exchobligation->h_aggr_qty =l_dl_exchobligation->h_aggr_qty *(-1);
			strcpy(l_dl_exchobligation->h_deal_cd,"P");
		}
		else
		{
			if(!strcmp(l_dl_exchobligation->h_deal_cd,"C"))
			{
				strcpy(l_dl_exchobligation->h_deal_cd,"S");
			}
		}

		EXEC SQL INSERT INTO dl_exchobligation_rec VALUES(:l_dl_exchobligation:l_dl_exchobligation_ind);
		printf("\nsqlcode1=%d",sqlca.sqlcode);
	}
	return 1;
}


