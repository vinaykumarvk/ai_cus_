/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         :   	Master Maintenance
 *
 * File Name           : 		CO_ChkInstr.pc
 *
 * Description         :   	This file contains functions for Instrument
 *										Validations in different modes.
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author               Description			RFS No.
 * ---------   --------  ---------------  --------------------		----------
 * 10/10/2005   1.0          Smita Bhat     New file to Validate	HDFCMT_003
 *															Instrument Details
 *********************************************************************/
 
 
 
 #include "CO_HostStructdef.h"
 
 EXEC SQL INCLUDE SQLCA.H;


/*********************************************************************************************************
 *                                                                                                       *
 * Function Name         : CO_Chk_InstrValid                                                             *
 *                                                                                                       *
 * Description           : This Function Accepts Instrument Code, Flags indicating Instrument Exists,    *
 *									Exists in Authorised Status, Deleted Status,Frozen Status,							*
 *									Mother/Child Indicator, Converted Instrument and debug pointer.               *
 *                         returns Success/Failure depending upon validn.                                *
 *                                                                                                       *
 * Parameter                           Type                             Mode   Description               *
 * ------------                        --------                         -----  ---------------           *
 * p_instr_code                        char *                           I      Instrument Code           *
 *																																			*
 *	p_exist										char										I		 Instrument Exists Flag		*
 *																																			*
 *	p_auth										char										I		 Instrument Auth Flag		*
 *																																			*
 *	p_del											char										I		 Instrument Del Flag			*
 *																																			*
 * p_frozen										char										I		 Instrument Frozen Flag    *
 *																																			*
 * p_mothchld									char										I		 Mother/Child Flag			*
 *																																			*
 * p_converted									char										I		 Instrument Converted Flag	*
 *                                                                                                       *
 * l_debug_info_ptr                    DEBUG_INFO_STRUCT_H **           I      Debug Info Structure      *
 *                                                                                                       *
 * Return Values        :                                                                                *
 *                                                                                                       *
 *  APL_SUCCESS  - SUCCESS                                                                               *
 *  APL_FAILURE  - FAILURE                                                                               *
 *                                                                                                       *
 ********************************************************************************************************/ 
int CO_Chk_InstrValid(	char *p_instr_code,
								char p_exist,
								char p_auth,
								char p_del,
								char p_frozen,
								char p_mothchld,
								char p_converted,
								DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
 	struct sqlca sqlca;	
 	MT_INSTRUMENT_STRUCT_H l_mt_ruinstr_struct_h;
 	MT_INSTRUMENT_STRUCT_I l_mt_ruinstr_struct_i;
 	short success_flg = APL_SUCCESS;
 	char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
 
 	#ifdef APL_THREADS 
 		APL_SET_CONTEXT
 		EXEC SQL CONTEXT USE :my_ctx_local;
 	#endif
 	
 	sqlca.sqlcode=0;
 
 	memset(&l_mt_ruinstr_struct_h, NULL, sizeof(MT_INSTRUMENT_STRUCT_H));
 	memset(&l_mt_ruinstr_struct_i, NULL, sizeof(MT_INSTRUMENT_STRUCT_I));
 
 	APL_IF_DEBUG
 	{
     	CO_ProcMonitor(	APL_OUT_FILE, 
	 							"Entered Function CO_Chk_InstrValid\n",
 								NULL,
 								NULL);
 
 		memset( chr_l_buf, NULL, BUFFER_LEN );
       		
 		sprintf(				chr_l_buf, 
 								"The Instrument Code is : |%s|\n", 
 								p_instr_code);

 		CO_ProcMonitor(	APL_OUT_FILE, 
					 			chr_l_buf,	
 								NULL,
 								NULL);
 		
 		memset( chr_l_buf, NULL, BUFFER_LEN );
 
     	sprintf(				chr_l_buf, 
 								"The Exist Flag is : %c\n", 
 								p_exist);
       
 		CO_ProcMonitor(	APL_OUT_FILE, 
 								chr_l_buf,	
 								NULL,
 								NULL);
 		
 		memset( chr_l_buf, NULL, BUFFER_LEN );
       		
 		sprintf(				chr_l_buf, 
 								"The Authorisation Flag is : %c\n", 
 								p_auth);
       
 		CO_ProcMonitor(	APL_OUT_FILE, 
 								chr_l_buf,	
 								NULL,
 								NULL);
 
 		memset( chr_l_buf, NULL, BUFFER_LEN );
       
 		sprintf(				chr_l_buf, 
 								"The Delete Flag is : %c\n", 
 								p_del);
       
 		CO_ProcMonitor(	APL_OUT_FILE, 
 								chr_l_buf,	
 								NULL,
 								NULL);
 		
 		memset( chr_l_buf, NULL, BUFFER_LEN );
       
 		sprintf(				chr_l_buf, 
 								"The Frozen Flag is : %c\n", 
 								p_frozen);
 
     	CO_ProcMonitor(	APL_OUT_FILE, 
 								chr_l_buf,	
 								NULL,
 								NULL);
 		
 		memset( chr_l_buf, NULL, BUFFER_LEN );
       
 		sprintf(				chr_l_buf, 
 								"The Mother/Child Flag is : %c\n", 
 								p_mothchld);
 	
   	CO_ProcMonitor(	APL_OUT_FILE, 
 								chr_l_buf,	
 								NULL,
 								NULL);
 
 		memset( chr_l_buf, NULL, BUFFER_LEN );
       		
 		sprintf(				chr_l_buf, 
 								"The Converted Flag is : %c\n", 
 								p_converted);
 	
     	CO_ProcMonitor(	APL_OUT_FILE, 
 								chr_l_buf,	
 								NULL,
 								NULL);
 	}
 
 	if (!strlen(p_instr_code))
 	{
 		APL_DATA_MISSING("INSTRUMENT", APL_NULL_STRING, APL_NULL_STRING);
 		APL_GOBACK_FAIL
 	}
 
 	if (p_exist == NULL) p_exist = 'Y';

 	EXEC SQL SELECT * INTO :l_mt_ruinstr_struct_h:l_mt_ruinstr_struct_i 
					FROM MT_INSTRUMENT 
 				WHERE instr_code=:p_instr_code;

 	IS_ANY_ORA_ERROR;

 	if ((sqlca.sqlcode == 1403) && (p_exist == 'Y'))
 	{
 		CO_InsertErr(	l_debug_info_ptr, 
							ERR_INSTR_NOTFND, 
							p_instr_code, 
							APL_NULL_STRING, 
							APL_NULL_STRING, 
							__LINE__, 
							__FILE__);    
 		APL_GOBACK_FAIL
 	}
 
 	if ((sqlca.sqlcode == 0) && (p_exist == 'N'))
 	{
			if ( APL_FAILURE == CO_InsertErr(   l_debug_info_ptr,
                                             ERR_INSTRUMENT_EXIST,
                                             p_instr_code,
                                             APL_NULL_STRING,
                                             APL_NULL_STRING,
                                             __LINE__,
                                             __FILE__) )
 		{
 			APL_GOBACK_FAIL;
 		}
			success_flg = APL_FAILURE;
 	}

 	if ( ( l_mt_ruinstr_struct_i.i_checker_dt == -1 ) && (p_auth=='Y'))
 	{
 		if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
														ERR_UNAUTH_INSTR, 
														p_instr_code, 
														APL_NULL_STRING, 
														APL_NULL_STRING, 
														__LINE__, 	
														__FILE__) )
 		{
 			APL_GOBACK_FAIL;
 		}
 		success_flg = APL_FAILURE;
 	}
 	
 	if ( ( l_mt_ruinstr_struct_i.i_checker_dt != -1 ) && (p_auth=='N'))
 	{
 		if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
														ERR_INSTR_AUTHORIZED, 
														p_instr_code, 
														APL_NULL_STRING, 
														APL_NULL_STRING, 
														__LINE__, 
														__FILE__) )
 		{
 			APL_GOBACK_FAIL;
 		}
 		success_flg = APL_FAILURE;
 	}
 
 	l_mt_ruinstr_struct_h.h_status[2]='\0';	

 	if ((strcmp(l_mt_ruinstr_struct_h.h_status, "DU")) && (p_del=='Y'))
 	{
 		if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
														ERR_INSTR_NOTMARKEDDEL, 
														p_instr_code, 
														APL_NULL_STRING, 
														APL_NULL_STRING, 
														__LINE__, 
														__FILE__) )
 		{
 			APL_GOBACK_FAIL;
 		}
 		success_flg = APL_FAILURE;
 	}
 	
 	if ((!strcmp(l_mt_ruinstr_struct_h.h_status, "DU")) && (p_del=='N'))
 	{
 		if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
														ERR_INSTR_MARKEDDEL, 
														p_instr_code, 
														APL_NULL_STRING, 
														APL_NULL_STRING, 
														__LINE__, 
														__FILE__) )
 		{
 			APL_GOBACK_FAIL;
 		}
 		success_flg = APL_FAILURE;
 	}
 
 	if (	(strcmp(l_mt_ruinstr_struct_h.h_status, "FU")	&&
			strcmp(l_mt_ruinstr_struct_h.h_status, "FA")) 	&& 
			(p_frozen=='Y'))
 	{
 		if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
														ERR_INSTR_NOTFRZN, 
														p_instr_code, 
														APL_NULL_STRING, 
														APL_NULL_STRING, 
														__LINE__, 
														__FILE__) )
 		{
 			APL_GOBACK_FAIL;
 		}
 		success_flg = APL_FAILURE;
 	}
 	
 	if ((	(!strcmp(l_mt_ruinstr_struct_h.h_status, "FU"))	||
			(!strcmp(l_mt_ruinstr_struct_h.h_status, "FA"))) && 
			(p_frozen=='N'))
 	{
 		if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
														ERR_INSTRUMENT_FRZN, 
														p_instr_code, 
														APL_NULL_STRING, 
														APL_NULL_STRING, 
														__LINE__, 
														__FILE__) )
 		{
 			APL_GOBACK_FAIL;
 		}
 		success_flg = APL_FAILURE;
 	}
 
 	if ((l_mt_ruinstr_struct_h.h_mother_sec_ind[0] == 'N') && (p_mothchld == 'M'))
 	{
 		if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
														ERR_INSTR_NOTMOTHERINSTR, 
														p_instr_code, 
														APL_NULL_STRING, 	
														APL_NULL_STRING, 
														__LINE__, 
														__FILE__) )
 		{
 			APL_GOBACK_FAIL;
 		}
 		success_flg = APL_FAILURE;
 	}
 
 	if ((l_mt_ruinstr_struct_h.h_mother_sec_ind[0] == 'Y') && (p_mothchld == 'C'))
 	{
 		if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
														ERR_INSTR_MOTHERINSTR, 
														p_instr_code, 
														APL_NULL_STRING, 
														APL_NULL_STRING, 
														__LINE__, 
														__FILE__) )
 		{
 			APL_GOBACK_FAIL;
 		}
 		success_flg = APL_FAILURE;
 	}
 
 	if ((l_mt_ruinstr_struct_i.i_new_cd == -1) && (p_converted == 'Y'))
 	{
 		if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
														ERR_INSTR_NOTUNDERCONV, 
														p_instr_code, 
														APL_NULL_STRING, 
														APL_NULL_STRING, 
														__LINE__, 
														__FILE__) )
 		{
 			APL_GOBACK_FAIL;
 		}
 		success_flg = APL_FAILURE;
 	}
 
 	if ((l_mt_ruinstr_struct_i.i_new_cd != -1) && (p_converted == 'N'))
 	{
 		if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr, 
														ERR_UNDERCONV_INSTR, 
														p_instr_code, 
														APL_NULL_STRING, 
														APL_NULL_STRING, 
														__LINE__, 
														__FILE__) )
 		{
 			APL_GOBACK_FAIL;
 		}
 		success_flg = APL_FAILURE;
 	}
 
 	if (APL_FAILURE == success_flg )
 	{
 		 APL_GOBACK_FAIL
 	}
 	else
 	{
 		APL_GOBACK_SUCCESS
 	}
 
    RETURN_SUCCESS :
 		APL_IF_DEBUG
 		{
          		CO_ProcMonitor(	APL_OUT_FILE,
 											"Leaving Function CO_Chk_InstrValid with success\n",
 											NULL,
 											NULL);
 		}
       		return(APL_SUCCESS);
   
    RETURN_FAILURE :
 		APL_IF_DEBUG
 		{
          		CO_ProcMonitor(	APL_OUT_FILE,
 											"Leaving Function CO_Chk_InstrValid with Errors\n",
 											NULL,
 											NULL);
 		}
       		return(APL_FAILURE);
}							
