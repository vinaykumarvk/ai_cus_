













 


#include "IV_Control_A.h"
#include "CR_Common.h"
EXEC SQL INCLUDE SQLCA.H;

int main(int argc, char **argv) //AIX - Warnings Removal
{
	extern int IV_Proc_ResendBill(char **argv, FILE *fl_clt,
								 FILE *fl_pymnt, FILE *fl_techlog,
								 FILE *fl_userlog,
								 DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	extern int CO_Rtv_RptFileName(char *chr_rep_st, char *chr_rep_desc,
										int rep_widateh, char *func_desc,
										char **argv, FILE **file_handle,
										DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	extern int CO_Rtv_FileNm_From_Pointer(FILE *fp, char *directorypath,
												  char *chr_fl_name);

	
	DEBUG_INFO_STRUCT_H				*l_debug_info_struct			 = NULL;	
	DEBUG_INFO_STRUCT_H				**l_debug_info_ptr				 = &l_debug_info_struct;
	int							n,i							 = 0;
	char 							chr_inifile[PATH_LENGTH]		 = APL_NULL_STRING;
	FILE							*chr_finifile					 = NULL;
	FILE							*fl_clt						 = NULL;
	FILE							*fl_pymnt					 = NULL; 
	FILE							*fl_techlog					 = NULL;
	FILE							*fl_userlog					 = NULL;
	char							chr_l_sys_date[APL_DATE_LEN] = APL_NULL_STRING;
	char							chr_custody_id_b[APL_USERID_LEN]	 = APL_NULL_STRING;
	
	char							chr_l_sesamlogdirpath[PATH_LENGTH];
	char							chr_l_tempsesamlogdirpath[PATH_LENGTH];
	char							chr_l_errlogflnm[PATH_LENGTH];
	char							chr_l_usrlogflnm[PATH_LENGTH];

	EXEC SQL BEGIN DECLARE SECTION;
		char chr_uname[APL_USERID_LEN];
		char chr_passwd[APL_PASSWD_LEN];
		EXEC SQL VAR chr_uname IS STRING;
		EXEC SQL VAR chr_passwd IS STRING;
		struct sqlca sqlca;
	EXEC SQL END DECLARE SECTION;

	
	strcpy(chr_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_inifile,"/intl_sun.cfg");

	if ( (chr_finifile = fopen(chr_inifile,"r") ) == NULL)
		exit(-1);

	

	memset(chr_l_sesamlogdirpath, APL_NULL_CHAR, PATH_LENGTH);

   if( APL_FAILURE == CO_ReadToken(chr_finifile, "INTL_LOG_PATH",
               						  chr_l_sesamlogdirpath, l_debug_info_ptr) )
   {
      fprintf(APL_OUT_FILE, "Environment variable SESAM_LOG_DIR not int_found.\n")
;

      APL_GOBACK_FAIL
   }

	APL_FETCH_DB_LOGIN_DETAILS(chr_finifile, chr_custody_id_b, chr_uname, chr_passwd , APL_OUT_FILE , l_debug_info_ptr)
   EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;
   IS_ANY_ORA_ERROR


	

	if (APL_FAILURE == CO_Rtv_RptFileName("1I",
                                       APL_LOGFILE_DESC,
                                       100,
                                      	argv[5], 
                                       argv,
                                       &fl_userlog,
                                       l_debug_info_ptr) )
   {
     	exit(-1); 
   }
	
	if (APL_FAILURE == CO_Rtv_RptFileName("1i",
                                       APL_LOGFILE_DESC,
                                       100,
                                      	argv[5], 
                                       argv,
                                       &fl_techlog,
                                       l_debug_info_ptr) )
   {
		exit(-1);
   }
	
	

	if (APL_FAILURE == CO_Rtv_RptFileName("BR",
                                       "Unauthorised Accounts Report",
                                       100,
                                      	"Resend Bill Unauth Accounts Rpt",
                                       argv,
                                       &fl_clt,
                                       l_debug_info_ptr) )
   {
		exit(-1);
   }

	sleep(1); 

	if (APL_FAILURE == CO_Rtv_RptFileName("BR",
                                       "Unauthorised Pymnts Report",
                                       100,
                                      	"Resend Bill Unauth Pymnts Rpt", 
                                       argv,
                                       &fl_pymnt,
                                       l_debug_info_ptr) )
   {
    	exit(-1);
   }

	EXEC SQL COMMIT ;
	IS_ANY_ORA_ERROR;
	
   
   if (APL_FAILURE == CO_RtvSysParams(l_debug_info_ptr))
   {
      fprintf(fl_userlog,"Failed To Get System Parameters\n");
      APL_GOBACK_FAIL
	}

	

	memset(chr_l_errlogflnm, APL_NULL_CHAR, PATH_LENGTH);
	memset(chr_l_tempsesamlogdirpath, APL_NULL_CHAR, PATH_LENGTH);

   if ( APL_FAILURE == CO_Rtv_FileNm_From_Pointer(fl_techlog,
                     								 chr_l_sesamlogdirpath, 
															 chr_l_errlogflnm) )
   {
      APL_GOBACK_FAIL
   }

   sprintf(chr_l_tempsesamlogdirpath, "%s/%s", chr_l_sesamlogdirpath,
      chr_l_errlogflnm);

	strcpy(chr_l_errlogflnm, chr_l_tempsesamlogdirpath);

	memset(chr_l_usrlogflnm, APL_NULL_CHAR, PATH_LENGTH);
	memset(chr_l_tempsesamlogdirpath, APL_NULL_CHAR, PATH_LENGTH);

   if ( APL_FAILURE == CO_Rtv_FileNm_From_Pointer(fl_userlog,
                     								 chr_l_sesamlogdirpath, 
															 chr_l_usrlogflnm) )
   {
      APL_GOBACK_FAIL
   }

   sprintf(chr_l_tempsesamlogdirpath, "%s/%s", chr_l_sesamlogdirpath,
      chr_l_usrlogflnm);

	strcpy(chr_l_usrlogflnm, chr_l_tempsesamlogdirpath);

	fprintf(fl_userlog,"Calling Resend Bills Function\n");

	fclose(fl_techlog);
	fclose(fl_userlog);
	fl_techlog = (FILE *)NULL;
	fl_userlog = (FILE *)NULL;

	if ( (fl_techlog = fopen(chr_l_errlogflnm, "a")) == (FILE *)NULL )
	{
		CO_ProcMonitor(APL_OUT_FILE, "Could not reopen the Error Log h_file in append h_mode\n", NULL, NULL);

		APL_GOBACK_FAIL
	}

	if ( (fl_userlog = fopen(chr_l_usrlogflnm, "a")) == (FILE *)NULL )
	{
		CO_ProcMonitor(APL_OUT_FILE, "Could not reopen the User Log h_file in append h_mode\n", NULL, NULL);

		APL_GOBACK_FAIL
	}

	if (APL_FAILURE == IV_Proc_ResendBill(argv,
											fl_clt,
											fl_pymnt,
											fl_techlog,
											fl_userlog,
											l_debug_info_ptr))
	 {
         fprintf(fl_userlog,"The Function Resend Bills returned  failure \n");
         CO_ProcMonitor(fl_techlog, APL_NULL_STRING, l_debug_info_ptr, NULL);
         CO_FreeErrLst(l_debug_info_ptr);
         EXEC SQL ROLLBACK WORK RELEASE;
			IS_ANY_ORA_ERROR
         APL_GOBACK_FAIL
   }
   else
   {
         EXEC SQL COMMIT WORK RELEASE;
			IS_ANY_ORA_ERROR
         fprintf(fl_userlog,"The Function Resend Bills returned  success\n");
         APL_GOBACK_SUCCESS
   }

	APL_GOBACK_SUCCESS
	
																									
	

		RETURN_SUCCESS:
		{
		  CO_Proc_RptClose(fl_techlog,l_debug_info_ptr);
		  CO_Proc_RptClose(fl_userlog,l_debug_info_ptr);
		  CO_Proc_RptClose(fl_clt,l_debug_info_ptr);
		  CO_Proc_RptClose(fl_pymnt,l_debug_info_ptr);
		  return(APL_SUCCESS);
      }

		RETURN_FAILURE:
		{
		  CO_Proc_RptClose(fl_techlog,l_debug_info_ptr);
		  CO_Proc_RptClose(fl_userlog,l_debug_info_ptr);
		  CO_Proc_RptClose(fl_clt,l_debug_info_ptr);
		  CO_Proc_RptClose(fl_pymnt,l_debug_info_ptr);
		  return (APL_FAILURE);
      }
}


