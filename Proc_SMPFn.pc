














#include "stdio_64.h"
#include <time.h>
#include "Intellect_Common.h"
#include "Intellect_Error.h"
#include "CR_Common.h"
#include "SMP_InterFace.h"
#include "cmqc.h"

EXEC SQL INCLUDE SQLCA;


int MS_Rtv_SMPPendTxn(EI_MQ_DATA_STRUCT_H *p_ei_mq_hsn_struct_h,char *chr_p_client,char *chr_p_refno,char *p_reqtype,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	char					chr_l_messagebuffer[MESSAGERR_LENGTH],chr_buffer[KEY_LENGTH];
	EI_MQ_DATA_STRUCT_H		l_ei_mq_data_struct_h;
	DEBUG_INFO_STRUCT_H 		*l_debuginfo = (DEBUG_INFO_STRUCT_H *)NULL;
   char    				chr_l_acc[APL_CLIENT_LENGTH];
   char    				chr_l_refno_a[APL_TXNREFNO_LEN];
	char					chr_l_reqtype[2];

	int					int_l_client_len 			= 		APL_CLIENT_LENGTH -1;
	int					int_l_refno_len	  			= 		APL_TXNREFNO_LEN -1;
	int					int_l_date_len	  			= 		APL_DATE_LEN;
	int					int_l_locncode_len			= 		APL_LOCNCODE_LENGTH -1;
	int					int_l_instrcode_len			=		APL_INSTRUMENTCODE_LEN -1;
	int					int_l_ccycode_len			=		APL_CCYCODE_LEN -1;
	int					int_l_note_len				=		APL_NOTE_LEN -1;
	int					int_l_failnote_len			=		APL_CUSTNOTE_LEN -1;
	int					int_l_verwith_len			=		APL_VERWITH_LEN -1;
	int					int_l_status_len			=		APL_STATUS_LEN -1;
	int					int_l_clientof_len		=		APL_CLIENT_OF_LENGTH -1;
	int					int_l_countaccname_len	= 		APL_COUNTACC_NAME_LEN -1;
	int					int_l_id_len					=		APL_ID_LEN -1;

   char chr_l_h_rowid[APL_ROWID_LEN] = APL_NULL_STRING;
	memset(chr_l_messagebuffer,APL_NULL_CHAR,MESSAGERR_LENGTH);
	memset(&l_ei_mq_data_struct_h,APL_NULL_CHAR,sizeof(EI_MQ_DATA_STRUCT_H));
	memset(chr_buffer,APL_NULL_CHAR,KEY_LENGTH);
	memset(chr_l_acc,APL_NULL_CHAR,APL_CLIENT_LENGTH);
	memset(chr_l_refno_a,APL_NULL_CHAR,APL_TXNREFNO_LEN);
	memset(chr_l_reqtype,APL_NULL_CHAR,2);

	EXEC SQL VAR chr_l_messagebuffer							IS STRING;
	EXEC SQL VAR chr_l_acc										IS STRING;
	EXEC SQL VAR chr_l_refno_a										IS STRING;
	EXEC SQL VAR chr_l_reqtype									IS STRING;
   EXEC SQL VAR chr_l_h_rowid									IS STRING;
	
	sqlca.sqlcode = 0;

	EXEC SQL SELECT (
                   rpad(client,:int_l_client_len,' ')||
                   rpad(IDENTIY_NO,:int_l_refno_len,' ')||
                   rpad(deal_cd,1,' ')||
                   rpad(dl_class,2,' ')||
                   rpad(ex_arena,2,' ')||
                   rpad(to_char(deal_date),:int_l_date_len,' ')||
                   rpad(to_char(setl_date),:int_l_date_len,' ')||
                   rpad(nvl(location_cd,' '),:int_l_locncode_len,' ')||
                   rpad(instr_code,:int_l_instrcode_len,' ')||
                   rpad(currency_cd,:int_l_ccycode_len,' ')||
                   rpad(domestic_cpclt,:int_l_client_len,' ')||
                   rpad(nvl(cp_clt,' '),:int_l_client_len,' ')||
                   rpad(nvl(INFO1,' '),:int_l_note_len,' ')||
                   rpad(nvl(failreason_cd,' '),4,' ')||
                   rpad(nvl(to_char(sub_fail_cd),' '),2,' ')||
                   rpad(nvl(fail_det,' '),:int_l_failnote_len,' ')||
                   rpad(nvl(VERFIED_WITH,' '),:int_l_verwith_len,' ')||
                   rpad(DEAL_STAT,:int_l_status_len,' ')||
                   rpad(nvl(CP_CLTNAME,' '),:int_l_countaccname_len,' ')||
                   rpad(nvl(IN_FAVOUROF,' '),:int_l_clientof_len,' ')||
                   rpad(to_char(QTY),25,' ')||
                   rpad(nvl(to_char(NET_SETL_VALUE),' '),20,' ')||
                   rpad(nvl(to_char(GROSS_SETLVALUE),' '),20,' ')||
                   nvl(SMI_REQUEST_TYPE,' ')||
                   rpad(access_stamp,:int_l_date_len,' ')||
                   rpad(nvl(COMM_IDENT_NO,' '),:int_l_refno_len,' ')||
                   rpad(nvl(to_char(VAL_FDT),' '),:int_l_date_len,' ')||
                   rpad(maker,:int_l_id_len,' ')||
                   rpad(to_char(maker_dt),:int_l_date_len,' ')||
                   rpad(nvl(checker,' '),:int_l_id_len,' ')||
                   rpad(nvl(to_char(checker_dt),' '),:int_l_date_len,' ')
                   ),ROWID
						 INTO :chr_l_messagebuffer,:chr_l_h_rowid
                     FROM  DL_SMI_PENDTXN
                     WHERE DEAL_STAGE = 'A'
                     AND ACCESS_STAMP = ( SELECT MIN(ACCESS_STAMP) FROM DL_SMI_PENDTXN WHERE DEAL_STAGE  = 'A')  AND ROWNUM = 1;	
	IS_ANY_ORA_ERROR

	if (strcmp(chr_l_messagebuffer,NULL) != 0)
	{
		sqlca.sqlcode = 0;
      EXEC SQL SELECT client,IDENTIY_NO,SMI_REQUEST_TYPE
               INTO :chr_l_acc,:chr_l_refno_a,:chr_l_reqtype
               FROM DL_SMI_PENDTXN WHERE rowid=:chr_l_h_rowid;
               
		IS_ANY_ORA_ERROR

		strcpy(l_ei_mq_data_struct_h.msg,chr_l_messagebuffer);
		strcpy(l_ei_mq_data_struct_h.h_message_id,"N");
		strcpy(l_ei_mq_data_struct_h.status_ind,"S");
	}
	else
	{
		strcpy(l_ei_mq_data_struct_h.status_ind,"F");
	}
	
	memcpy(p_ei_mq_hsn_struct_h,&l_ei_mq_data_struct_h,sizeof(EI_MQ_DATA_STRUCT_H));
	memcpy(chr_p_client,&chr_l_acc,11);	
	memcpy(chr_p_refno,&chr_l_refno_a,17);
	memcpy(p_reqtype,&chr_l_reqtype,2);

	APL_GOBACK_SUCCESS;

   RETURN_SUCCESS :
      return(APL_SUCCESS);

   RETURN_FAILURE :
      CO_ProcMonitor(   APL_OUT_FILE,
                  "Exiting MS_Rtv_SMPPendTxn processtion with errors",
                   NULL,
                   NULL);
      return(APL_FAILURE);	
}	




int MS_Proc_PutMsg(EI_MQ_DATA_STRUCT_H *p_ei_mq_hsn_struct_h,MQHCONN Hcon, MQHOBJ Hobj, FILE *chr_finifile,MQLONG *ReturnCode,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	MQMD		md 	=	{MQMD_DEFAULT};
	MQPMO		pmo	=	{MQPMO_DEFAULT};

	MQLONG	CompCode;
	MQLONG	Reason;
	MQLONG	messlen;
	char		chr_buffer[MESSAGERR_LENGTH]				=	{APL_NULL_STRING};
	char		temp[MESSAGERR_LENGTH + 100] 		=	{APL_NULL_STRING};


	CO_ProcMonitor(APL_OUT_FILE,"Entered MS_Proc_PutMsg Function",NULL,NULL);
	
	
	md.Version = MQMD_VERSION_2;
	md.Report = MQRO_NONE;
	md.MsgType = MQMT_DATAGRAM;
	md.Expiry = MQEI_UNLIMITED;
	md.Feedback = MQFB_NONE;
	md.Encoding = MQENC_NATIVE;
	md.CodedCharSetId = MQCCSI_Q_MGR;
	memcpy(md.Format,MQFMT_STRING,(size_t)MQ_FORMAT_LENGTH);
	if (strcmp(p_ei_mq_hsn_struct_h->h_message_id,"N") == 0)
		md.Priority = 0;
	else
		md.Priority = 1;
	md.Persistence = MQPER_PERSISTENT;
	strcpy(md.ReplyToQMgr,NULL);
	md.PutApplType = MQAT_UNIX;


	pmo.Version = MQPMO_VERSION_2;
	pmo.Options = MQPMO_NEW_MSG_ID + MQPMO_SYNCPOINT + MQPMO_SET_ALL_CONTEXT + MQPMO_FAIL_IF_QUIESCING;
	pmo.Context = Hobj;

	printf("Current Message is <%s>\n",p_ei_mq_hsn_struct_h->msg);

	strcpy(md.ApplIdentityData,p_ei_mq_hsn_struct_h->h_message_id);

	messlen = strlen(p_ei_mq_hsn_struct_h->msg);
	MQPUT(Hcon,Hobj,&md,&pmo,messlen,p_ei_mq_hsn_struct_h->msg,&CompCode,&Reason);
	if (Reason != MQRC_NONE) 
	{
		sprintf(temp,"MQ Put Message Failed with Reason h_code %ld",Reason);
      CO_ProcMonitor(APL_OUT_FILE,temp,NULL,NULL);
		memcpy(ReturnCode,&Reason,sizeof(Reason));
      APL_GOBACK_FAIL
		strcpy(temp,APL_NULL_STRING);
	}
	else
	{
		MQCMIT(Hcon,&CompCode,&Reason);
		if (Reason != MQRC_NONE)
		{
			CO_ProcMonitor(APL_OUT_FILE,"Could not commit on MQ Server",NULL,NULL);  
			MQBACK(Hcon,&CompCode,&Reason);
			if (Reason != MQRC_NONE)
			{
				CO_ProcMonitor(APL_OUT_FILE,"Could not roll back MQ Transaction",NULL,NULL);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Current MQ Transaction rolled back",NULL,NULL);
			}	
			APL_GOBACK_FAIL
		}
		else
		{
			CO_ProcMonitor(APL_OUT_FILE,"Message Successfully Delivered to Outbound Queue",NULL,NULL);
		}
	}

	APL_GOBACK_SUCCESS;

   RETURN_SUCCESS :
      return(APL_SUCCESS);

   RETURN_FAILURE :
      CO_ProcMonitor(   APL_OUT_FILE,
                  "Exiting MS_Proc_PutMsg processtion with errors",
                   NULL,
                   NULL);
      return(APL_FAILURE);
}



int MS_Rtv_SMPPendRes(EI_MQ_DATA_STRUCT_H *p_ei_mq_hsn_struct_h,char *p_hsnid,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	struct timespec interval,int_remainder;
   char                    chr_buffer[KEY_LENGTH];
   EI_MQ_DATA_STRUCT_H      		l_ei_mq_data_struct_h;
   DEBUG_INFO_STRUCT_H            *l_debuginfo = (DEBUG_INFO_STRUCT_H *)NULL;
   char                    chr_l_err_desc[APL_ERRDESC_LEN] ,chr_l_response[RESPONSE_LENGTH], chr_l_access_stamp[APL_DATE_LEN +1]; 
   char                    int_l_status[APL_ERRSTATUS_LEN], chr_l_resp_status[APL_RESPSTATUS_LENGTH], chr_l_hsn_id[APL_HSNID_LEN];
	char						   chr_l_userid[APL_ID_LEN];
	long							int_l_timeout,l_curr_hsnid;
	short							l_sh_err_desc,l_sh_userid;

   memset(chr_buffer,APL_NULL_CHAR,KEY_LENGTH);
   memset(&l_ei_mq_data_struct_h,APL_NULL_CHAR,sizeof(EI_MQ_DATA_STRUCT_H));
   memset(chr_l_err_desc,APL_NULL_CHAR,APL_ERRDESC_LEN);
   memset(int_l_status,APL_NULL_CHAR,APL_ERRSTATUS_LEN);
   memset(chr_l_resp_status,APL_NULL_CHAR,APL_RESPSTATUS_LENGTH);
   memset(chr_l_hsn_id,APL_NULL_CHAR,APL_HSNID_LEN);
   memset(chr_l_access_stamp,APL_NULL_CHAR,APL_DATE_LEN +1);
	memset(chr_l_userid,APL_NULL_CHAR,APL_ID_LEN);


   EXEC SQL VAR chr_l_err_desc          					IS STRING;
   EXEC SQL VAR int_l_status            					IS STRING;
   EXEC SQL VAR chr_l_resp_status	      					IS STRING;
   EXEC SQL VAR chr_l_hsn_id            					IS STRING;
   EXEC SQL VAR chr_l_access_stamp       					IS STRING;
	EXEC SQL VAR chr_l_userid									IS STRING;

	interval.tv_sec = 0.0;
	interval.tv_nsec = 250000000;

   sqlca.sqlcode = 0;

   EXEC SQL SELECT  to_char(SMP_ID),ERROR_DET,status_ind,upper(SMP_IND),to_char(access_stamp),usr
                  INTO :chr_l_hsn_id,:chr_l_err_desc:l_sh_err_desc,:int_l_status,:chr_l_resp_status,:chr_l_access_stamp,:chr_l_userid:l_sh_userid
                  FROM  PRO_REQUEST_DEAL
                  WHERE REQUEST_SEQ = (SELECT MIN(REQUEST_SEQ) 
                                   FROM PRO_REQUEST_DEAL WHERE SMP_ID
        	                          IS NOT NULL AND to_number(status_ind) IN (1,2,3)) 
                                   AND ROWNUM = 1;
	IS_ANY_ORA_ERROR
	
	if (strcmp(chr_l_hsn_id,NULL) != 0)
	{
		if ((strcmp(int_l_status,"2") == 0) && (strcmp(chr_l_resp_status,"N") == 0))
		{
			sqlca.sqlcode = 0;
			EXEC SQL UPDATE PRO_REQUEST_DEAL SET status_ind = '4' WHERE SMP_ID = :chr_l_hsn_id;
			IS_ANY_ORA_ERROR
			EXEC SQL COMMIT WORK;
			IS_ANY_ORA_ERROR
			printf("No Response sent for %s\n",chr_l_hsn_id);	
			strcpy(l_ei_mq_data_struct_h.status_ind,"F");
			memcpy(p_ei_mq_hsn_struct_h,&l_ei_mq_data_struct_h,sizeof(EI_MQ_DATA_STRUCT_H));
			APL_GOBACK_SUCCESS
		}
   	if ((strcmp(int_l_status,"3") == 0) || ((strcmp(chr_l_resp_status,"Y") == 0) && (strcmp(int_l_status,"2") == 0)))
   	{
   		if(APL_FAILURE == MS_Proc_SMPResp(int_l_status,chr_l_err_desc,chr_l_access_stamp,chr_l_hsn_id,chr_l_userid,chr_l_response,l_debug_info_ptr))
      		APL_GOBACK_FAIL
   		else
   		{
				memcpy(p_hsnid,chr_l_hsn_id,APL_HSNID_LEN);
         	strcpy(l_ei_mq_data_struct_h.msg,chr_l_response);
         	strcpy(l_ei_mq_data_struct_h.h_message_id,"R");
         	strcpy(l_ei_mq_data_struct_h.status_ind,"S");
      	}
   	}
   	else
   	{
			if (strcmp(int_l_status,"1") == 0)
			{
				l_curr_hsnid = atol(chr_l_hsn_id);
				for (int_l_timeout=1;int_l_timeout<=120;int_l_timeout++)
				{
					CO_ProcMonitor(APL_OUT_FILE,"Awaiting Processing...",NULL,NULL);
					nanosleep(&interval,&int_remainder);
					sqlca.sqlcode = 0;
   				EXEC SQL SELECT to_char(SMP_ID),ERROR_DET,status_ind,upper(SMP_IND),to_char(access_stamp),usr
               INTO :chr_l_hsn_id,:chr_l_err_desc:l_sh_err_desc,:int_l_status,:chr_l_resp_status,:chr_l_access_stamp,:chr_l_userid:l_sh_userid
               FROM  PRO_REQUEST_DEAL
               WHERE SMP_ID = :l_curr_hsnid and (status_ind = '2' or status_ind = '3'); 

   				IS_ANY_ORA_ERROR

					if (sqlca.sqlcode != 1403)
						break;
				}
				if (int_l_timeout > 120)
				{
					memcpy(p_hsnid,chr_l_hsn_id,APL_HSNID_LEN);
					if ( APL_FAILURE == CO_PadString(chr_l_hsn_id,'R',APL_HSNID_LEN -1," ",l_debug_info_ptr))
   				{
      				CO_ProcMonitor(APL_OUT_FILE,"CBPad_StrFn returned failure\n",NULL,NULL);
      				APL_GOBACK_FAIL
   				}		
					strcpy(l_ei_mq_data_struct_h.msg,chr_l_hsn_id);
					strcat(l_ei_mq_data_struct_h.msg,SMI_TIMEOUT_MESSAGE);
					if ( APL_FAILURE == CO_PadString(chr_l_userid,'R',APL_ID_LEN -1," ",l_debug_info_ptr))
   				{
      				CO_ProcMonitor(APL_OUT_FILE,"CBPad_StrFn returned failure\n",NULL,NULL);
      				APL_GOBACK_FAIL
   				}		
					strcat(l_ei_mq_data_struct_h.msg,chr_l_userid);
					if ( APL_FAILURE == CO_PadString(chr_l_access_stamp,'R', APL_DATE_LEN," ",l_debug_info_ptr))
   				{
      				CO_ProcMonitor(APL_OUT_FILE,"CBPad_StrFn returned failure\n",NULL,NULL);
      				APL_GOBACK_FAIL
   				}
   				strcat(l_ei_mq_data_struct_h.msg,chr_l_access_stamp);
					strcpy(l_ei_mq_data_struct_h.h_message_id,"R");
					strcpy(l_ei_mq_data_struct_h.status_ind,"S");
					CO_ProcMonitor(APL_OUT_FILE,"Record Timed Out in Client_Trade Table",NULL,NULL);
				}	
				else
				{
					if ((strcmp(int_l_status,"3") == 0) || ((strcmp(chr_l_resp_status,"Y") == 0) && (strcmp(int_l_status,"2") == 0)))
              	{
							
                 	if(APL_FAILURE == MS_Proc_SMPResp(int_l_status,chr_l_err_desc,chr_l_access_stamp,chr_l_hsn_id,chr_l_userid,chr_l_response,&l_debug_info_ptr))
                    	APL_GOBACK_FAIL
                  else
                  {
                     memcpy(p_hsnid,chr_l_hsn_id,APL_HSNID_LEN);
                     strcpy(l_ei_mq_data_struct_h.msg,chr_l_response);
                     strcpy(l_ei_mq_data_struct_h.h_message_id,"R");
                     strcpy(l_ei_mq_data_struct_h.status_ind,"S");
                  }

            	}
					else
					{
						strcpy(l_ei_mq_data_struct_h.status_ind,"F");
					}
				}
			}
			else
			{
     			strcpy(l_ei_mq_data_struct_h.status_ind,"F");
			}
   	}
	}
	else
	{
		strcpy(l_ei_mq_data_struct_h.status_ind,"F");
	}

   memcpy(p_ei_mq_hsn_struct_h,&l_ei_mq_data_struct_h,sizeof(EI_MQ_DATA_STRUCT_H));

   APL_GOBACK_SUCCESS;

   RETURN_SUCCESS :
      return(APL_SUCCESS);

   RETURN_FAILURE :
      CO_ProcMonitor(   APL_OUT_FILE,
                  "Exiting MS_Rtv_SMPPendRes processtion with errors",
                   NULL,
                   NULL);
      return(APL_FAILURE);
}




int MS_Proc_SMPResp(char *p_status_ind,char *p_error_desc,char *p_access_stamp,char *p_hsnid,char *p_userid,char *p_response,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	char	**chr_temp1 = NULL, **chr_temp2 = NULL;
	char	chr_l_errordesc[APL_ERRDESC_LEN], chr_l_errormessage[APL_ERRDESC_LEN], chr_l_message[RESPONSE_LENGTH];
	char  chr_l_userid[APL_ID_LEN], chr_l_access_stamp[APL_DATE_LEN +1],chr_l_hsnid[APL_HSNID_LEN], chr_l_errorcode[11];
	char	chr_l_errormsg[81],chr_l_errorfile[51],chr_l_errorline[16],temp[200];
	int	int_num = 0;	

	memset(chr_l_message,APL_NULL_CHAR,RESPONSE_LENGTH);
	memset(chr_l_errordesc,APL_NULL_CHAR,APL_ERRDESC_LEN);
	memset(chr_l_userid,APL_NULL_CHAR,APL_ID_LEN);
	memset(chr_l_access_stamp,APL_NULL_CHAR,APL_DATE_LEN +1);
	memset(chr_l_hsnid,APL_NULL_CHAR,APL_HSNID_LEN);
	memset(chr_l_errormessage,APL_NULL_CHAR,APL_ERRDESC_LEN);
	memset(chr_l_errorcode,APL_NULL_CHAR,11);
	memset(chr_l_errormsg,APL_NULL_CHAR,81);
	memset(chr_l_errorfile,APL_NULL_CHAR,51);
	memset(chr_l_errorline,APL_NULL_CHAR,16);
	memset(temp,APL_NULL_CHAR,200);

	printf("Entered MS_Proc_SMPResp processtion with parameters\n Status : %s\n Desc : %s\n Access Stamp : %s\n HSN ID : %s\n User ID : %s\n",p_status_ind,p_error_desc,p_access_stamp,p_hsnid,p_userid);

	
	strcpy(chr_l_hsnid,p_hsnid);
	if ( APL_FAILURE == CO_PadString(chr_l_hsnid,'R',APL_HSNID_LEN -1," ",l_debug_info_ptr))
	{
   	CO_ProcMonitor(APL_OUT_FILE,"CBPad_StrFn returned failure\n",NULL,NULL);
      APL_GOBACK_FAIL
	}
	strcpy(chr_l_message,chr_l_hsnid);

	
	if (strcmp(p_status_ind,"2") == 0)
		strcpy(chr_l_errormessage,SMI_SUCCESS_MESSAGE);		
	else
	{
		if (strcmp(p_error_desc,NULL) == 0)
		{
			CO_ProcMonitor(APL_OUT_FILE,"Invalid Format of Error Message\n",NULL,NULL);
			APL_GOBACK_FAIL
		}
		if (CO_SplitStr(p_error_desc,'#',&int_num,&chr_temp1) != APL_SUCCESS )
		{
			CO_ProcMonitor(APL_OUT_FILE,"CBStrSplit returned failure\n",NULL,NULL);
			APL_GOBACK_FAIL
		}
		if (int_num < 1)
		{
			CO_ProcMonitor(APL_OUT_FILE,"Invalid Format of Error Message\n",NULL,NULL);
			APL_GOBACK_FAIL
		}
		strcpy(chr_l_errordesc,chr_temp1[int_num-1]);
		if (CO_SplitStr(chr_l_errordesc,'|',&int_num,&chr_temp2) != APL_SUCCESS )
		{
			CO_ProcMonitor(APL_OUT_FILE,"CBStrSplit returned failure\n",NULL,NULL);
			APL_GOBACK_FAIL
		}
		if (int_num < 10)
		{
			CO_ProcMonitor(APL_OUT_FILE,"Invalid Format of Error Message\n",NULL,NULL);
			APL_GOBACK_FAIL
		}
		strcpy(chr_l_errorcode,chr_temp2[1]);
		strcpy(chr_l_errormsg, chr_temp2[9]);
		strcpy(chr_l_errorfile,chr_temp2[5]);
		strcpy(chr_l_errorline,chr_temp2[6]);	

		if ( APL_FAILURE == CO_PadString(chr_l_errorcode,'R',10," ",l_debug_info_ptr))
		{
   		CO_ProcMonitor(APL_OUT_FILE,"CBPad_StrFn returned failure\n",NULL,NULL);
      	APL_GOBACK_FAIL
		}
		if ( APL_FAILURE == CO_PadString(chr_l_errorfile,'R',50," ",l_debug_info_ptr))
		{
   		CO_ProcMonitor(APL_OUT_FILE,"CBPad_StrFn returned failure\n",NULL,NULL);
      	APL_GOBACK_FAIL
		}
		if ( APL_FAILURE == CO_PadString(chr_l_errorline,'R',15," ",l_debug_info_ptr))
		{
   		CO_ProcMonitor(APL_OUT_FILE,"CBPad_StrFn returned failure\n",NULL,NULL);
      	APL_GOBACK_FAIL
		}
		if ( APL_FAILURE == CO_PadString(chr_l_errormsg,'R',80," ",l_debug_info_ptr))
		{
   		CO_ProcMonitor(APL_OUT_FILE,"CBPad_StrFn returned failure\n",NULL,NULL);
      	APL_GOBACK_FAIL
		}
		strcpy(chr_l_errormessage,chr_l_errorcode);
		strcat(chr_l_errormessage,chr_l_errormsg);
		strcat(chr_l_errormessage,chr_l_errorfile);
		strcat(chr_l_errormessage,chr_l_errorline);
	}
	
	strcat(chr_l_message,chr_l_errormessage);

	
	strcpy(chr_l_userid,p_userid);
	if ( APL_FAILURE == CO_PadString(chr_l_userid,'R',APL_ID_LEN -1," ",l_debug_info_ptr))
	{
  		CO_ProcMonitor(APL_OUT_FILE,"CBPad_StrFn returned failure\n",NULL,NULL);
     	APL_GOBACK_FAIL
	}
	strcat(chr_l_message,chr_l_userid);
	
	
	strcpy(chr_l_access_stamp,p_access_stamp);
	if ( APL_FAILURE == CO_PadString(chr_l_access_stamp,'R', APL_DATE_LEN," ",l_debug_info_ptr))
	{
  		CO_ProcMonitor(APL_OUT_FILE,"CBPad_StrFn returned failure\n",NULL,NULL);
     	APL_GOBACK_FAIL
	}
	strcat(chr_l_message,chr_l_access_stamp);	
	
	memcpy(p_response,&chr_l_message,RESPONSE_LENGTH);

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
		CO_ProcMonitor(   APL_OUT_FILE,
                  "Exiting MS_Proc_SMPResp processtion with success",
                   NULL,
                   NULL);
    	return(APL_SUCCESS);

	RETURN_FAILURE :
    	CO_ProcMonitor(   APL_OUT_FILE,
                  "Exiting MS_Proc_SMPResp processtion with errors",
                   NULL,
                   NULL);
    return(APL_FAILURE);

}




int MS_Rtv_SMPMsg(MQHCONN Hcon,MQHOBJ Hobj,FILE *chr_finifile,MQLONG *ReturnCode, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

   MQMD     md 	=	{MQMD_DEFAULT};
   MQGMO    gmo	=	{MQGMO_DEFAULT};
   MQLONG   CompCode;
   MQLONG   Reason;
   MQLONG   messlen;
   MQCHAR   chr_buffer[BUFFER_LENGTH]					=	APL_NULL_STRING;
	MQLONG	bufflen;
	char		temp[HSN_LENGTH +100]					=	APL_NULL_STRING;
	MQLONG	l_backoutcnt;

   EI_MQ_HSN_STRUCT_H  l_ei_mq_data_struct_h;

   memset(&l_ei_mq_data_struct_h,APL_NULL_CHAR,sizeof(EI_MQ_HSN_STRUCT_H));

   
	md.Version = MQMD_VERSION_2;
   md.Encoding = MQENC_NATIVE;
   md.CodedCharSetId = MQCCSI_Q_MGR;
   memcpy(md.Format,MQFMT_STRING,(size_t)MQ_FORMAT_LENGTH);


   gmo.Version = MQGMO_VERSION_2;
   gmo.MatchOptions = MQMO_NONE;
   gmo.Options =  MQGMO_SYNCPOINT + MQGMO_CONVERT + MQGMO_FAIL_IF_QUIESCING;
	CompCode = MQCC_OK;
		
	bufflen = sizeof(chr_buffer) -1;
		
  	MQGET(Hcon,Hobj,&md,&gmo,bufflen,chr_buffer,&messlen,&CompCode,&Reason);
  	if (Reason != MQRC_NONE) 
  	{
     	if (Reason == MQRC_NO_MSG_AVAILABLE) 
     		CompCode = MQCC_FAILED;
		else
		{
     		sprintf(temp,"MQ Get Message failed with reason h_code %ld\n",Reason);
     		CO_ProcMonitor(APL_OUT_FILE,temp,NULL,NULL);
			memcpy(ReturnCode,&Reason,sizeof(Reason));
			APL_GOBACK_FAIL
		}
  	}
  	else
  	{
		l_backoutcnt = md.BackoutCount;		
		if (l_backoutcnt <= 10)
		{
     		memcpy(l_ei_mq_data_struct_h.msg,chr_buffer,sizeof(l_ei_mq_data_struct_h.msg));
     		strcpy(l_ei_mq_data_struct_h.status_ind,"S");
			if (APL_FAILURE == MS_Proc_SMPEntry(&l_ei_mq_data_struct_h,l_debug_info_ptr))
			{
				MQBACK(Hcon,&CompCode,&Reason);
        		if (Reason != MQRC_NONE)
				{
					sprintf(temp,"Could not Rollback MQ Transaction. Reason h_code %ld",Reason);
           		CO_ProcMonitor(APL_OUT_FILE,temp,NULL,NULL);
				}
        		else
				{
          		CO_ProcMonitor(APL_OUT_FILE,"Current MQ Transaction rolled back",NULL,NULL);
				}
				CompCode = MQCC_FAILED;
				APL_GOBACK_FAIL
			}
			else
			{
				MQCMIT(Hcon,&CompCode,&Reason);
				if (Reason != MQRC_NONE)
				{
					MQBACK(Hcon,&CompCode,&Reason);
					sprintf(temp,"Could not commit Transaction on MQ Server. Reason h_code %ld",Reason);
					CO_ProcMonitor(APL_OUT_FILE,temp,NULL,NULL);
				}
				else
				{
     				CO_ProcMonitor(APL_OUT_FILE,"Message successfully fetched from MQ Queue",NULL,NULL);
     				CO_ProcMonitor(APL_OUT_FILE,"Message Details...",NULL,NULL);
					printf("<%s\n>",l_ei_mq_data_struct_h.msg);
					strcpy(temp,APL_NULL_STRING);
				}
			}		
   	}
		else
		{
			MQCMIT(Hcon,&CompCode,&Reason);
         if (Reason != MQRC_NONE)
         {
           	sprintf(temp,"Could not commit Transaction on MQ Server. Reason h_code %ld",Reason);
            CO_ProcMonitor(APL_OUT_FILE,temp,NULL,NULL);
         }
			CO_ProcMonitor(APL_OUT_FILE,"Error in msg...Deleting from queue",NULL,NULL);
			CO_ProcMonitor(APL_OUT_FILE,chr_buffer,NULL,NULL);
		}
	}
	
   APL_GOBACK_SUCCESS;

   RETURN_SUCCESS :
      return(APL_SUCCESS);

   RETURN_FAILURE :
      CO_ProcMonitor(   APL_OUT_FILE,
                  "Exiting MS_Rtv_SMPMsg Function with errors",
                   NULL,
                   NULL);
      return(APL_FAILURE);
}




int MS_Proc_SMPEntry(EI_MQ_HSN_STRUCT_H *p_ei_mq_hsn_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	#define 	FAILCODEHSN				"FC-HSN"
	#define  MULTIFAILCODEHSN		"MFC-HSN"
	#define	FAILNOTEHSN				"FAILNOTE-HSN"
	#define	FAILRESETHSN			"FC-RESET-HSN"
	#define	CONFIRM_HSN_FUNCTION		"CONF-HSN"
	#define	SETTLEMENTHSN			"SETT-HSN"
	#define	PARTSETTLEMENTHSN		"PARTSETT-HSN"
	#define	CONFIRMRST_HSN_FUNCTION		"CONFREV-HSN"
	#define	SETTREVERSALHSN		"SETTREV-HSN"
	#define	AMENDHSN					"AMEND-HSN"
	#define	HSN_CATE_CANCEL				"CANCEL-HSN"	

	#define	FAILCODEFUNC			"wrp_CDBUpdTrdFailFn"
	#define  MULTIFAILCODEFUNC		"wrp_CDBUpdMultStatFn"
	#define	CONFIRM_FUNCTION		"wrp_CDBUpdPmtDetFn"
	#define	SETTLEMENTFUNC			"wrp_CDBUpdSSTDetFn"
	#define	PARTSETTLEMENTFUNC	"wrp_CDBUpdSSTDetFn"
	#define	CONFIRMRST_FUNCTION		"wrp_CBRstPmTFn"
	#define	SETTREVERSALFUNC		"wrp_CBRstSStFn"
	#define	FUNC_SMIAMDCANUPD		"wrp_SMI_AmdCanUpdStat"
		

	char        chr_buffer[KEY_LENGTH];
	char			chr_l_hsncategory[16]							=	{APL_NULL_STRING};
	char			chr_l_smacclient[APL_CLIENT_LENGTH]		= 	{APL_NULL_STRING};
	char			chr_l_smacref[APL_TXNREFNO_LEN]			=	{APL_NULL_STRING};
	char			chr_l_failcode_A[5]								=	{APL_NULL_STRING};
	char			l_subfailreason_cd[3]							=	{APL_NULL_STRING};
	char			chr_l_custfailnote[APL_CUSTNOTE_LEN]		=	{APL_NULL_STRING};
	char			chr_l_note3[66]									=	{APL_NULL_STRING};
	char			chr_l_note4[66]									=	{APL_NULL_STRING};
	char			chr_l_gsv[21]									=	{APL_NULL_STRING};
	char			chr_l_nsv[21]									=	{APL_NULL_STRING};
	char			chr_l_freetext[APL_FAILNOTE_LEN]			=	{APL_NULL_STRING};
	char			chr_l_successfailureflag[2]					=	{APL_NULL_STRING};
	char			chr_l_commonrefno[APL_TXNREFNO_LEN]		=	{APL_NULL_STRING};
	char			chr_l_settledqty[26]							=	{APL_NULL_STRING};
	char			chr_l_actualsettdate[APL_DATE_LEN +1]	=	{APL_NULL_STRING};
	char			chr_l_hsndate[APL_DATE_LEN +1]				=	{APL_NULL_STRING};
	char			chr_l_instntype[7]								=	{APL_NULL_STRING};
	char			chr_l_note[APL_NOTE_LEN]						=	{APL_NULL_STRING};
	char			chr_l_txntype[6]								=	{APL_NULL_STRING};
	char			chr_l_userid[APL_ID_LEN]						=	{APL_NULL_STRING};
	char			chr_l_action[2]									=	{APL_NULL_STRING};
	char			chr_l_amendcancelflag[2]						=	{APL_NULL_STRING};
	char  		chr_l_environment[APL_ENVIRON_LEN],chr_l_parameters[APL_PARAM_LEN],chr_l_funcname[APL_FUNCNAME_LENGTH];
	char			chr_l_hsnid[APL_HSNID_LEN],chr_l_respstatus[2],chr_l_tempstr[300],chr_l_sysdatetime_A[APL_DATE_LEN+1];
	long   		l_reqnum;
	int			int_l_count;

	
	char			chr_l_statqual1[5]								=	{APL_NULL_STRING};
	char			chr_l_statcode1[7]								= 	{APL_NULL_STRING};
	char			chr_l_reasqual1[7]								=  {APL_NULL_STRING};
	char			chr_l_reascode1[5]								=  {APL_NULL_STRING};
	char			chr_l_note1[71]									=  {APL_NULL_STRING};
	char			chr_l_statqual2[5]								=  {APL_NULL_STRING};
	char			chr_l_statcode2[7]  							=  {APL_NULL_STRING};
	char			chr_l_reasqual2[7]								=  {APL_NULL_STRING};
	char			chr_l_reascode2[5]								=  {APL_NULL_STRING};
	char			chr_l_note2[71]									=  {APL_NULL_STRING};
	char			chr_l_statqual3[5]								=  {APL_NULL_STRING};
	char			chr_l_statcode3[7]								=  {APL_NULL_STRING};
	char			chr_l_reasqual3[7]								=  {APL_NULL_STRING};
	char			chr_l_reascode3[5]								=  {APL_NULL_STRING};
	char			chr_l_note33[71]									=  {APL_NULL_STRING};

	memset(chr_buffer,APL_NULL_CHAR,KEY_LENGTH);
	memset(chr_l_environment,APL_NULL_CHAR,APL_ENVIRON_LEN);
	memset(chr_l_hsnid,APL_NULL_CHAR,APL_HSNID_LEN);
	memset(chr_l_parameters,APL_NULL_CHAR,APL_PARAM_LEN);
	memset(chr_l_respstatus,APL_NULL_CHAR,2);
	memset(chr_l_funcname,APL_NULL_CHAR,APL_FUNCNAME_LENGTH);
	memset(chr_l_tempstr,APL_NULL_CHAR,300);
	memset(chr_l_sysdatetime_A,APL_NULL_CHAR,APL_DATE_LEN +1);

	EXEC SQL VAR chr_l_environment 									IS STRING;
	EXEC SQL VAR chr_l_hsnid       									IS STRING;
	EXEC SQL VAR chr_l_parameters    									IS STRING;
	EXEC SQL VAR chr_l_userid      									IS STRING;
	EXEC SQL VAR chr_l_respstatus										IS STRING;
	EXEC SQL VAR chr_l_funcname    									IS STRING;
	EXEC SQL VAR chr_l_sysdatetime_A                            IS STRING;
	EXEC SQL VAR chr_l_statqual1					IS STRING;
	EXEC SQL VAR chr_l_statcode1					IS STRING;	
	EXEC SQL VAR chr_l_reasqual1	IS STRING;
	EXEC SQL VAR chr_l_reascode1 	IS STRING;
	EXEC SQL VAR chr_l_note1		IS STRING;
	EXEC SQL VAR chr_l_statqual2					IS STRING;
	EXEC SQL VAR chr_l_statcode2					IS STRING;	
	EXEC SQL VAR chr_l_reasqual2	IS STRING;
	EXEC SQL VAR chr_l_reascode2 	IS STRING;
	EXEC SQL VAR chr_l_note2		IS STRING;
	EXEC SQL VAR chr_l_statqual3					IS STRING;
	EXEC SQL VAR chr_l_statcode3					IS STRING;	
	EXEC SQL VAR chr_l_reasqual3	IS STRING;
	EXEC SQL VAR chr_l_reascode3 	IS STRING;
	EXEC SQL VAR chr_l_note33		IS STRING;

	CO_ProcMonitor(APL_OUT_FILE,"Entered MS_Proc_SMPEntry function",NULL,NULL); 

	int_l_count = 0;
	if (CO_RtvSysDtTime(chr_l_sysdatetime_A,l_debug_info_ptr) != APL_SUCCESS)
	{
		CO_ProcMonitor(APL_OUT_FILE,"Could not get System Date Time",NULL,NULL);
		APL_GOBACK_FAIL
	}



	
	if(CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_hsnid,int_l_count,sizeof(chr_l_hsnid),l_debug_info_ptr) != APL_SUCCESS)
	{ 
		CO_ProcMonitor(APL_OUT_FILE,"Cannot read the HSN ID ..Invalid HSN Format",NULL,NULL);
		APL_GOBACK_FAIL
	}
	else
		int_l_count += APL_HSNID_LEN-1;


	
	if(CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_hsncategory,int_l_count,sizeof(chr_l_hsncategory),l_debug_info_ptr) != APL_SUCCESS)
	{ 
		CO_ProcMonitor(APL_OUT_FILE,"Cannot read the HSN Category ..Invalid HSN Format",NULL,NULL);
		APL_GOBACK_FAIL
	}
	else
		int_l_count += 15;

	
	if(CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_smacclient,int_l_count,sizeof(chr_l_smacclient),l_debug_info_ptr) != APL_SUCCESS )
	{
      CO_ProcMonitor(APL_OUT_FILE,"Cannot read SMAC Account ..Invalid HSN Format",NULL,NULL);
      APL_GOBACK_FAIL
   }
	else
		int_l_count += APL_CLIENT_LENGTH-1;
	

	
	if(CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_smacref,int_l_count,sizeof(chr_l_smacref),l_debug_info_ptr) != APL_SUCCESS)
	{
      CO_ProcMonitor(APL_OUT_FILE,"Cannot read SMAC Refence Number ..Invalid HSN Format",NULL,NULL);
      APL_GOBACK_FAIL
   }
	else
		int_l_count += APL_TXNREFNO_LEN-1;

	
	if(CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_userid,HSN_LENGTH -12 -270,11,l_debug_info_ptr) != APL_SUCCESS)
	{
		CO_ProcMonitor(APL_OUT_FILE,"Cannot read the User ID ..Invalid HSN Format",NULL,NULL);
		APL_GOBACK_FAIL
	}

	
	if(CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_respstatus,HSN_LENGTH -2 -270,sizeof(chr_l_respstatus),l_debug_info_ptr) != APL_SUCCESS)
	{
		CO_ProcMonitor(APL_OUT_FILE,"Cannot read msg response status_ind ..Invalid HSN Format",NULL,NULL);
		APL_GOBACK_FAIL
	}





	if ((strcmp(chr_l_hsncategory,FAILCODEHSN) == 0) || (strcmp(chr_l_hsncategory,FAILNOTEHSN) == 0) || (strcmp(chr_l_hsncategory,FAILRESETHSN) == 0) || (strcmp(chr_l_hsncategory,MULTIFAILCODEHSN) == 0))
	{

		if (strcmp(chr_l_hsncategory,FAILCODEHSN) ==0)
		{
			CO_ProcMonitor(APL_OUT_FILE,"Current HSN is FAILCODE HSN",NULL,NULL);
			strcpy(chr_l_environment,ENV_FC_HSN);
		}
		else
		{
			if (strcmp(chr_l_hsncategory,FAILNOTEHSN) ==0)
			{
				strcpy(chr_l_environment,ENV_FAILNOTERR_HSN);
				CO_ProcMonitor(APL_OUT_FILE,"Current HSN is FAILNOTE HSN",NULL,NULL);
			}
			else if (strcmp(chr_l_hsncategory,MULTIFAILCODEHSN) == 0)
			{
				strcpy(chr_l_environment,ENV_MFC_HSN);
				CO_ProcMonitor(APL_OUT_FILE,"Current HSN is MultiFailcode HSN",NULL,NULL);
         		}
			else
			{
				strcpy(chr_l_environment,ENV_FC_RESET_HSN);
				CO_ProcMonitor(APL_OUT_FILE,"Current HSN is FC-RESET-HSN",NULL,NULL);
			}
		}

		
		if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_failcode_A,int_l_count,sizeof(chr_l_failcode_A),l_debug_info_ptr) != APL_SUCCESS)
		{
      	CO_ProcMonitor(APL_OUT_FILE,"Cannot read failreason_cd ..Invalid HSN Format",NULL,NULL);
      	APL_GOBACK_FAIL
   	}
		else
			int_l_count += 4;
			
		
		if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,l_subfailreason_cd,int_l_count,sizeof(l_subfailreason_cd),l_debug_info_ptr) != APL_SUCCESS)
		{
      	CO_ProcMonitor(APL_OUT_FILE,"Cannot read Sub Failcode ..Invalid HSN Format",NULL,NULL);
      	APL_GOBACK_FAIL
   	}
		else
			int_l_count += 2;

		
		if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_custfailnote,int_l_count,sizeof(chr_l_custfailnote),l_debug_info_ptr) != APL_SUCCESS)
		{
     		CO_ProcMonitor(APL_OUT_FILE,"Canot read Customer Note ..Invalid HSN Format",NULL,NULL);
      	APL_GOBACK_FAIL
  		}	
		else
			int_l_count += APL_CUSTNOTE_LEN -1;

		int_l_count += 170;

		
		if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_freetext,int_l_count,sizeof(chr_l_freetext),l_debug_info_ptr) != APL_SUCCESS)
		{
      	CO_ProcMonitor(APL_OUT_FILE,"Cannot read Failnote ..Invalid HSN Format",NULL,NULL);
      	APL_GOBACK_FAIL
   	}
		else
			int_l_count += APL_FAILNOTE_LEN -1;
		
		int_l_count += APL_TXNREFNO_LEN + APL_DATE_LEN + 25;	

		
		if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_hsndate,int_l_count,sizeof(chr_l_hsndate),l_debug_info_ptr) != APL_SUCCESS)
		{
      	CO_ProcMonitor(APL_OUT_FILE,"Cannot read Access Stamp ..Invalid HSN Format",NULL,NULL);
      	APL_GOBACK_FAIL
   	}
		else
			int_l_count += APL_DATE_LEN;

		
		if (MS_Mod_CCSParam(chr_l_parameters,"CLIENT",chr_l_smacclient) != APL_SUCCESS)
      			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"IDENTIY_NO",chr_l_smacref) != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"FAILREASON_CD",chr_l_failcode_A) != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"CLIENT_NOTE",chr_l_custfailnote) != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"FAIL_DET",chr_l_freetext) != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"ACCESSSTAMP",chr_l_hsndate) != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"SUB_FAIL_CD",l_subfailreason_cd) != APL_SUCCESS)
			APL_GOBACK_FAIL

      
      if (strcmp(chr_l_hsncategory,MULTIFAILCODEHSN) == 0)
		{
			int_l_count += 282; 			  
			
			
			if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_statqual1,int_l_count,sizeof(chr_l_statqual1),l_debug_info_ptr) != APL_SUCCESS)
			{
				CO_ProcMonitor(APL_OUT_FILE,"Cannot read Status_Qual1 ..Invalid Status_Qual1 Format",NULL,NULL);
				APL_GOBACK_FAIL
         		}
			else
				int_l_count += 4;

			
			if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_statcode1,int_l_count,sizeof(chr_l_statcode1),l_debug_info_ptr) != APL_SUCCESS)
			{
				CO_ProcMonitor(APL_OUT_FILE,"Cannot read Status_Code1 ..Invalid Status_Code1 Format",NULL,NULL);
				APL_GOBACK_FAIL
			}
			else
				int_l_count += 6;

			
		   	if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_reasqual1,int_l_count,sizeof(chr_l_reasqual1),l_debug_info_ptr) != APL_SUCCESS)	
			{
				CO_ProcMonitor(APL_OUT_FILE,"Cannot read Reas_Qual1 ..Invalid Reas_Qual1 Format",NULL,NULL);
				APL_GOBACK_FAIL
			}
			else
				int_l_count += 6;

			
		   	if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_reascode1,int_l_count,sizeof(chr_l_reascode1),l_debug_info_ptr) != APL_SUCCESS)	
			{
				CO_ProcMonitor(APL_OUT_FILE,"Cannot read Reas_Code1 ..Invalid Reas_Code1 Format",NULL,NULL);
				APL_GOBACK_FAIL
			}
			else
				int_l_count += 4;

			
		   	if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_note1,int_l_count,sizeof(chr_l_note1),l_debug_info_ptr) != APL_SUCCESS)	
			{
				CO_ProcMonitor(APL_OUT_FILE,"Cannot read note1 ..Invalid note1 Format",NULL,NULL);
				APL_GOBACK_FAIL
			}
			else
				int_l_count += 70; 

			
			if (MS_Mod_CCSParam(chr_l_parameters,"STATQUAL1",chr_l_statqual1) != APL_SUCCESS)
      				APL_GOBACK_FAIL
			if (MS_Mod_CCSParam(chr_l_parameters,"STATREAS1",chr_l_statcode1) != APL_SUCCESS)
				APL_GOBACK_FAIL
			if (MS_Mod_CCSParam(chr_l_parameters,"REASQUAL1",chr_l_reasqual1) != APL_SUCCESS)
				APL_GOBACK_FAIL
			if (MS_Mod_CCSParam(chr_l_parameters,"REASCODE11",chr_l_reascode1) != APL_SUCCESS)
				APL_GOBACK_FAIL
			if (MS_Mod_CCSParam(chr_l_parameters,"NOTE11",chr_l_note1) != APL_SUCCESS)
				APL_GOBACK_FAIL


			
			if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_statqual2,int_l_count,sizeof(chr_l_statqual2),l_debug_info_ptr) != APL_SUCCESS)
			{
				CO_ProcMonitor(APL_OUT_FILE,"Cannot read Status_Qual2 ..Invalid Status_Qual2 Format",NULL,NULL);
				APL_GOBACK_FAIL
         		}
			else
				int_l_count += 4;

			
			if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_statcode2,int_l_count,sizeof(chr_l_statcode2),l_debug_info_ptr) != APL_SUCCESS)
			{
				CO_ProcMonitor(APL_OUT_FILE,"Cannot read Status_Code2 ..Invalid Status_Code2 Format",NULL,NULL);
				APL_GOBACK_FAIL
			}
			else
				int_l_count += 6;

			
		   	if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_reasqual2,int_l_count,sizeof(chr_l_reasqual2),l_debug_info_ptr) != APL_SUCCESS)	
			{
				CO_ProcMonitor(APL_OUT_FILE,"Cannot read Reas_Qual2 ..Invalid Reas_Qual2 Format",NULL,NULL);
				APL_GOBACK_FAIL
			}
			else
				int_l_count += 6;

			
		   	if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_reascode2,int_l_count,sizeof(chr_l_reascode2),l_debug_info_ptr) != APL_SUCCESS)	
			{
				CO_ProcMonitor(APL_OUT_FILE,"Cannot read Reas_Code2 ..Invalid Reas_Code2 Format",NULL,NULL);
				APL_GOBACK_FAIL
			}
			else
				int_l_count += 4;

			
		   	if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_note2,int_l_count,sizeof(chr_l_note2),l_debug_info_ptr) != APL_SUCCESS)	
			{
				CO_ProcMonitor(APL_OUT_FILE,"Cannot read note2 ..Invalid note2 Format",NULL,NULL);
				APL_GOBACK_FAIL
			}
			else
				int_l_count += 70; 

			
			if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_statqual3,int_l_count,sizeof(chr_l_statqual3),l_debug_info_ptr) != APL_SUCCESS)
			{
				CO_ProcMonitor(APL_OUT_FILE,"Cannot read Status_Qual3 ..Invalid Status_Qual3 Format",NULL,NULL);
				APL_GOBACK_FAIL
         		}
			else
				int_l_count += 4;

			if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_statcode3,int_l_count,sizeof(chr_l_statcode3),l_debug_info_ptr) != APL_SUCCESS)
			{
				CO_ProcMonitor(APL_OUT_FILE,"Cannot read Status_Code3 ..Invalid Status_Code3 Format",NULL,NULL);
				APL_GOBACK_FAIL
			}
			else
				int_l_count += 6;

		   	if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_reasqual3,int_l_count,sizeof(chr_l_reasqual3),l_debug_info_ptr) != APL_SUCCESS)	
			{
				CO_ProcMonitor(APL_OUT_FILE,"Cannot read Reas_Qual3 ..Invalid Reas_Qual3 Format",NULL,NULL);
				APL_GOBACK_FAIL
			}
			else
				int_l_count += 6;

		   	if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_reascode3,int_l_count,sizeof(chr_l_reascode3),l_debug_info_ptr) != APL_SUCCESS)	
			{
				CO_ProcMonitor(APL_OUT_FILE,"Cannot read Reas_Code3 ..Invalid Reas_Code3 Format",NULL,NULL);
				APL_GOBACK_FAIL
			}
			else
				int_l_count += 4;

		   	if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_note33,int_l_count,sizeof(chr_l_note33),l_debug_info_ptr) != APL_SUCCESS)	
			{
				CO_ProcMonitor(APL_OUT_FILE,"Cannot read note3 ..Invalid note3 Format",NULL,NULL);
				APL_GOBACK_FAIL
			}
			else
				int_l_count += 70; 

			if( strlen(chr_l_statqual2)==0 )
			{
					
				if (MS_Mod_CCSParam(chr_l_parameters,"REASCODE12",NULL) != APL_SUCCESS)
					APL_GOBACK_FAIL
				if (MS_Mod_CCSParam(chr_l_parameters,"NOTE12",NULL) != APL_SUCCESS)
					APL_GOBACK_FAIL
				if (MS_Mod_CCSParam(chr_l_parameters,"REASCODE13",NULL) != APL_SUCCESS)
					APL_GOBACK_FAIL
				if (MS_Mod_CCSParam(chr_l_parameters,"NOTE13",NULL) != APL_SUCCESS)
					APL_GOBACK_FAIL
				if (MS_Mod_CCSParam(chr_l_parameters,"STATQUAL2",NULL) != APL_SUCCESS)
      					APL_GOBACK_FAIL
				if (MS_Mod_CCSParam(chr_l_parameters,"STATREAS2",NULL) != APL_SUCCESS)
					APL_GOBACK_FAIL
				if (MS_Mod_CCSParam(chr_l_parameters,"REASQUAL2",NULL) != APL_SUCCESS)
					APL_GOBACK_FAIL
				if (MS_Mod_CCSParam(chr_l_parameters,"REASCODE21",NULL) != APL_SUCCESS)
					APL_GOBACK_FAIL
				if (MS_Mod_CCSParam(chr_l_parameters,"NOTE21",NULL) != APL_SUCCESS)
					APL_GOBACK_FAIL
				if (MS_Mod_CCSParam(chr_l_parameters,"REASCODE22",NULL) != APL_SUCCESS)
					APL_GOBACK_FAIL
				if (MS_Mod_CCSParam(chr_l_parameters,"NOTE22",NULL) != APL_SUCCESS)
					APL_GOBACK_FAIL
			}

			else if ((strcmp(chr_l_statqual1,chr_l_statqual2) == 0) && (strcmp(chr_l_statcode1,chr_l_statcode2) == 0) && (strcmp(chr_l_reasqual1,chr_l_reasqual2) == 0)) 
			{
				if (MS_Mod_CCSParam(chr_l_parameters,"REASCODE12",chr_l_reascode2) != APL_SUCCESS)
					APL_GOBACK_FAIL
				if (MS_Mod_CCSParam(chr_l_parameters,"NOTE12",chr_l_note2) != APL_SUCCESS)
					APL_GOBACK_FAIL
				
				if ((strcmp(chr_l_statqual1,chr_l_statqual3)==0) && (strcmp(chr_l_statcode1,chr_l_statcode3)==0) && (strcmp(chr_l_reasqual1,chr_l_reasqual3)==0))
				{
					if (MS_Mod_CCSParam(chr_l_parameters,"REASCODE13",chr_l_reascode3) != APL_SUCCESS)
						APL_GOBACK_FAIL
					if (MS_Mod_CCSParam(chr_l_parameters,"NOTE13",chr_l_note3) != APL_SUCCESS)
						APL_GOBACK_FAIL
					if (MS_Mod_CCSParam(chr_l_parameters,"STATQUAL2",NULL) != APL_SUCCESS)
      						APL_GOBACK_FAIL
					if (MS_Mod_CCSParam(chr_l_parameters,"STATREAS2",NULL) != APL_SUCCESS)
						APL_GOBACK_FAIL
					if (MS_Mod_CCSParam(chr_l_parameters,"REASQUAL2",NULL) != APL_SUCCESS)
						APL_GOBACK_FAIL
					if (MS_Mod_CCSParam(chr_l_parameters,"REASCODE21",NULL) != APL_SUCCESS)
						APL_GOBACK_FAIL
					if (MS_Mod_CCSParam(chr_l_parameters,"NOTE21",NULL) != APL_SUCCESS)
						APL_GOBACK_FAIL
				}
				else
				{
					if (MS_Mod_CCSParam(chr_l_parameters,"REASCODE13",NULL) != APL_SUCCESS)
						APL_GOBACK_FAIL
					if (MS_Mod_CCSParam(chr_l_parameters,"NOTE13",NULL) != APL_SUCCESS)
						APL_GOBACK_FAIL

					if (strlen(chr_l_statqual3)==0)
					{
						if (MS_Mod_CCSParam(chr_l_parameters,"STATQUAL2",NULL) != APL_SUCCESS)
      							APL_GOBACK_FAIL
						if (MS_Mod_CCSParam(chr_l_parameters,"STATREAS2",NULL) != APL_SUCCESS)
							APL_GOBACK_FAIL
						if (MS_Mod_CCSParam(chr_l_parameters,"REASQUAL2",NULL) != APL_SUCCESS)
							APL_GOBACK_FAIL
						if (MS_Mod_CCSParam(chr_l_parameters,"REASCODE21",NULL) != APL_SUCCESS)
							APL_GOBACK_FAIL
						if (MS_Mod_CCSParam(chr_l_parameters,"NOTE21",NULL) != APL_SUCCESS)
							APL_GOBACK_FAIL
					}
					else
					{

						if (MS_Mod_CCSParam(chr_l_parameters,"STATQUAL2",chr_l_statqual3) != APL_SUCCESS)
      							APL_GOBACK_FAIL
						if (MS_Mod_CCSParam(chr_l_parameters,"STATREAS2",chr_l_statcode3) != APL_SUCCESS)
							APL_GOBACK_FAIL
						if (MS_Mod_CCSParam(chr_l_parameters,"REASQUAL2",chr_l_reasqual3) != APL_SUCCESS)
							APL_GOBACK_FAIL
						if (MS_Mod_CCSParam(chr_l_parameters,"REASCODE21",chr_l_reascode3) != APL_SUCCESS)
							APL_GOBACK_FAIL
						if (MS_Mod_CCSParam(chr_l_parameters,"NOTE21",chr_l_note33) != APL_SUCCESS)
							APL_GOBACK_FAIL
					}
				}
				if (MS_Mod_CCSParam(chr_l_parameters,"REASCODE22",NULL) != APL_SUCCESS)
					APL_GOBACK_FAIL
				if (MS_Mod_CCSParam(chr_l_parameters,"NOTE22",NULL) != APL_SUCCESS)
					APL_GOBACK_FAIL
			}

			else			
			{
				if ((strcmp(chr_l_statqual1,chr_l_statqual3)==0) && (strcmp(chr_l_statcode1,chr_l_statcode3)==0) && (strcmp(chr_l_reasqual1,chr_l_reasqual3)==0))
				{
					if (MS_Mod_CCSParam(chr_l_parameters,"REASCODE12",chr_l_reascode3) != APL_SUCCESS)
						APL_GOBACK_FAIL
					if (MS_Mod_CCSParam(chr_l_parameters,"NOTE12",chr_l_note33) != APL_SUCCESS)
						APL_GOBACK_FAIL
				}
				else
				{
					if (MS_Mod_CCSParam(chr_l_parameters,"REASCODE12",NULL) != APL_SUCCESS)
						APL_GOBACK_FAIL
					if (MS_Mod_CCSParam(chr_l_parameters,"NOTE12",NULL) != APL_SUCCESS)
						APL_GOBACK_FAIL
				}

				if (MS_Mod_CCSParam(chr_l_parameters,"REASCODE13",NULL) != APL_SUCCESS)
					APL_GOBACK_FAIL
				if (MS_Mod_CCSParam(chr_l_parameters,"NOTE13",NULL) != APL_SUCCESS)
					APL_GOBACK_FAIL
				if (MS_Mod_CCSParam(chr_l_parameters,"STATQUAL2",chr_l_statqual2) != APL_SUCCESS)
      					APL_GOBACK_FAIL
				if (MS_Mod_CCSParam(chr_l_parameters,"STATREAS2",chr_l_statcode2) != APL_SUCCESS)
					APL_GOBACK_FAIL
				if (MS_Mod_CCSParam(chr_l_parameters,"REASQUAL2",chr_l_reasqual2) != APL_SUCCESS)
					APL_GOBACK_FAIL
				if (MS_Mod_CCSParam(chr_l_parameters,"REASCODE21",chr_l_reascode2) != APL_SUCCESS)
					APL_GOBACK_FAIL
				if (MS_Mod_CCSParam(chr_l_parameters,"NOTE21",chr_l_note2) != APL_SUCCESS)
					APL_GOBACK_FAIL
				
				if ((strcmp(chr_l_statqual2,chr_l_statqual3)==0) && (strcmp(chr_l_statcode2,chr_l_statcode3)==0) && (strcmp(chr_l_reasqual2,chr_l_reasqual3)==0))
				{
					if (MS_Mod_CCSParam(chr_l_parameters,"REASCODE22",chr_l_reascode3) != APL_SUCCESS)
						APL_GOBACK_FAIL
					if (MS_Mod_CCSParam(chr_l_parameters,"NOTE22",chr_l_note33) != APL_SUCCESS)
						APL_GOBACK_FAIL
				}
				else
				{
					if (MS_Mod_CCSParam(chr_l_parameters,"REASCODE22",NULL) != APL_SUCCESS)
						APL_GOBACK_FAIL
					if (MS_Mod_CCSParam(chr_l_parameters,"NOTE22",NULL) != APL_SUCCESS)
						APL_GOBACK_FAIL
				}
			}

			strcpy(chr_l_funcname,MULTIFAILCODEFUNC);

			printf("l_statcode1=<%s>\n",chr_l_statcode1);
			printf("l_statqual1=<%s>\n",chr_l_statqual1);
			printf("l_reasqual1=<%s>\n",chr_l_reasqual1);
			printf("l_reascode1=<%s>\n",chr_l_reascode1);
			printf("l_note1=<%s>\n",chr_l_note1);
			printf("l_statcode2=<%s>\n",chr_l_statcode2);
			printf("l_statqual2=<%s>\n",chr_l_statqual2);
			printf("l_reasqual2=<%s>\n",chr_l_reasqual2);
			printf("l_reascode2=<%s>\n",chr_l_reascode2);
			printf("l_note2=<%s>\n",chr_l_note2);
			printf("l_statcode3=<%s>\n",chr_l_statcode3);
			printf("l_statqual3=<%s>\n",chr_l_statqual3);
			printf("l_reasqual3=<%s>\n",chr_l_reasqual3);
			printf("l_reascode3=<%s>\n",chr_l_reascode3);
			printf("l_note3=<%s>\n",chr_l_note33);
		}
		else
		{
			
			strcpy(chr_l_funcname,FAILCODEFUNC);
		}
	}

	if (strcmp(chr_l_hsncategory,CONFIRM_HSN_FUNCTION) == 0) 
	{
		CO_ProcMonitor(APL_OUT_FILE,"Current HSN is CONFIRMATION-HSN",NULL,NULL);
		
		strcpy(chr_l_environment,ENV_CONF_HSN);
		
		int_l_count += APL_CUSTNOTE_LEN + 135;				
		
		
		if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_gsv,int_l_count,sizeof(chr_l_gsv),l_debug_info_ptr) != APL_SUCCESS)
		{
			CO_ProcMonitor(APL_OUT_FILE,"Cannot read GSV chr_value ..Invalid HSN Format",NULL,NULL);
			APL_GOBACK_FAIL
		}
		else
			int_l_count += 20;
	
		
		if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_nsv,int_l_count,sizeof(chr_l_nsv),l_debug_info_ptr) != APL_SUCCESS)
		{
         CO_ProcMonitor(APL_OUT_FILE,"Cannot reaf NSV chr_value ..Invalid HSN Format",NULL,NULL);
         APL_GOBACK_FAIL
      }	
		else
			int_l_count += 20;
	
		
		if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_freetext,int_l_count,sizeof(chr_l_freetext),l_debug_info_ptr) != APL_SUCCESS)
		{
         CO_ProcMonitor(APL_OUT_FILE,"Cannot read Verwith chr_value ..Invalid HSN Format",NULL,NULL);
         APL_GOBACK_FAIL
      }
		else
			int_l_count += APL_FAILNOTE_LEN -1;

			int_l_count += 1;				
		
		if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_commonrefno,int_l_count,sizeof(chr_l_commonrefno),l_debug_info_ptr) != APL_SUCCESS)
		{
         CO_ProcMonitor(APL_OUT_FILE,"Cannot read Common Ref No ..Invalid HSN Format",NULL,NULL);
         APL_GOBACK_FAIL
      }
		else
			int_l_count += APL_TXNREFNO_LEN -1;
			
		int_l_count += APL_DATE_LEN +25;					
		
		if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_hsndate,int_l_count,sizeof(chr_l_hsndate),l_debug_info_ptr) != APL_SUCCESS)
		{
         CO_ProcMonitor(APL_OUT_FILE,"Cannot read Access Stamp ..Invalid HSN Format",NULL,NULL);
         APL_GOBACK_FAIL
      }
		else
			int_l_count += APL_DATE_LEN;
		
		int_l_count += 6;									
		
		if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_note,int_l_count,sizeof(chr_l_note),l_debug_info_ptr) != APL_SUCCESS)
		{
         CO_ProcMonitor(APL_OUT_FILE,"Cannot read Note ..Invalid HSN Format",NULL,NULL);
         APL_GOBACK_FAIL
      }
		
		
		if (MS_Mod_CCSParam(chr_l_parameters,"CLIENT",chr_l_smacclient) != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"IDENTIY_NO",chr_l_smacref) != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"VAL_FDT",chr_l_hsndate) != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"VERFIED_WITH",chr_l_freetext) != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"AMT_DIFFER","0") != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"INFO1",chr_l_note) != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"PARTIAL_IND","N") != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"BRK_NO",NULL) != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"NEWQTY","0") != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"NEWAMT",chr_l_nsv) != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"NEWREFNO",NULL) != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"NEWLOCREFNO",NULL) != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"ACCESS_STAMP",chr_l_hsndate) != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"GROSS_AMOUNT",chr_l_gsv) != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"CP_AMT","0") != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"COMM_IDENT_NO",chr_l_commonrefno) != APL_SUCCESS)
			APL_GOBACK_FAIL

		
		strcpy(chr_l_funcname,CONFIRM_FUNCTION);

	}

	if (strcmp(chr_l_hsncategory,SETTLEMENTHSN) == 0)
	{
		CO_ProcMonitor(APL_OUT_FILE,"Current HSN is SETTLEMENT HSN",NULL,NULL);
			
		
		strcpy(chr_l_environment,ENV_SETT_HSN);
		
		int_l_count += APL_CUSTNOTE_LEN + 135;							
		
      if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_gsv,int_l_count,sizeof(chr_l_gsv),l_debug_info_ptr) != APL_SUCCESS)
      {
         CO_ProcMonitor(APL_OUT_FILE,"Cannot read GSV chr_value ..Invalid HSN Format",NULL,NULL);
         APL_GOBACK_FAIL
      }
      else
         int_l_count += 20;

      
      if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_nsv,int_l_count,sizeof(chr_l_nsv),l_debug_info_ptr) != APL_SUCCESS)
      {
         CO_ProcMonitor(APL_OUT_FILE,"Cannot read NSV chr_value ..Invalid HSN Format",NULL,NULL);
         APL_GOBACK_FAIL
      }
      else
         int_l_count += 20;

		int_l_count += APL_FAILNOTE_LEN + APL_TXNREFNO_LEN + 24;
		
		if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_actualsettdate,int_l_count,sizeof(chr_l_actualsettdate),l_debug_info_ptr) != APL_SUCCESS)
		{
			CO_ProcMonitor(APL_OUT_FILE,"Cannot read Actual Sett Date ..Invalid HSN Format",NULL,NULL);
         APL_GOBACK_FAIL
		}
		else
			int_l_count += APL_DATE_LEN;

		
		if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_hsndate,int_l_count,sizeof(chr_l_hsndate),l_debug_info_ptr) != APL_SUCCESS)
      {
         CO_ProcMonitor(APL_OUT_FILE,"Cannot read Access Stamp ..Invalid HSN Format",NULL,NULL);
         APL_GOBACK_FAIL
      }
		else
			int_l_count += APL_DATE_LEN;

		int_l_count += APL_NOTE_LEN + 5;											

		
		if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_txntype,int_l_count,sizeof(chr_l_txntype),l_debug_info_ptr) != APL_SUCCESS)
		{
         CO_ProcMonitor(APL_OUT_FILE,"Cannot read TXN Type ..Invalid HSN Format",NULL,NULL);
         APL_GOBACK_FAIL
      }

		
		if (MS_Mod_CCSParam(chr_l_parameters,"CLIENT",chr_l_smacclient) != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"IDENTIY_NO",chr_l_smacref) != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"PARTIAL_IND","N") != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"NEWQTY","0") != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"NEWAMT",chr_l_nsv) != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"NEWREFNO",NULL) != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"INSTRUMENT_DT",chr_l_actualsettdate) != APL_SUCCESS)
			APL_GOBACK_FAIL	
		if ((strcmp(chr_l_txntype,"521") == 0) || (strcmp(chr_l_txntype,"523") ==0))
      {
         if (MS_Mod_CCSParam(chr_l_parameters,"MONEY_SETL_DT",chr_l_actualsettdate) != APL_SUCCESS)
            APL_GOBACK_FAIL
      }
      else
      {
         if (MS_Mod_CCSParam(chr_l_parameters,"MONEY_SETL_DT",NULL) != APL_SUCCESS)
            APL_GOBACK_FAIL
      }
		if (MS_Mod_CCSParam(chr_l_parameters,"COST","0") != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"BROKERCOMM",chr_l_gsv) != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"SELFORREG","N") != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"PEND_REG_QTY","0") != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"MRK_DL_FAILQTY","0") != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"REC_INT_000","0") != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"DL_COMPLETEQTY","0") != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"DELTA_000","0") != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"DELTA_001","0") != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"DELTA_003","0") != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"ACCESS_STAMP",chr_l_hsndate) != APL_SUCCESS)
			APL_GOBACK_FAIL
	
		
		strcpy(chr_l_funcname,SETTLEMENTFUNC);

	}

	if (strcmp(chr_l_hsncategory,PARTSETTLEMENTHSN) == 0)
	{
	
		CO_ProcMonitor(APL_OUT_FILE,"Current HSN is PARTIALSETT HSN",NULL,NULL);
		
		strcpy(chr_l_environment,ENV_PARTSETT_HSN);

		int_l_count += 6;                    				
		 
		if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_custfailnote,int_l_count,sizeof(chr_l_custfailnote),l_debug_info_ptr) != APL_SUCCESS)
     	{
     		CO_ProcMonitor(APL_OUT_FILE,"Cannot read Customer Note ..Invalid HSN Formati",NULL,NULL);
        	APL_GOBACK_FAIL
     	}
      else
        	int_l_count += APL_CUSTNOTE_LEN -1;	
	
		int_l_count += 130;							

		
     	if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_gsv,int_l_count,sizeof(chr_l_gsv),l_debug_info_ptr) != APL_SUCCESS)
     	{
       	CO_ProcMonitor(APL_OUT_FILE,"Cannot read GSV chr_value ..Invalid HSN Format",NULL,NULL);
        	APL_GOBACK_FAIL
     	}
     	else
       	int_l_count += 20;

     	
     	if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_nsv,int_l_count,sizeof(chr_l_nsv),l_debug_info_ptr) != APL_SUCCESS)
     	{
        	CO_ProcMonitor(APL_OUT_FILE,"Cannot read NSV chr_value ..Invalid HSN Format",NULL,NULL);
        	APL_GOBACK_FAIL
     	}
     	else
        	int_l_count += 20;

     	int_l_count += APL_FAILNOTE_LEN + APL_TXNREFNO_LEN -1;				
		
		if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_settledqty,int_l_count,sizeof(chr_l_settledqty),l_debug_info_ptr) != APL_SUCCESS)
		{
			CO_ProcMonitor(APL_OUT_FILE,"Cannot reaf Settled Qty ..Invalid HSN Format",NULL,NULL);
	      APL_GOBACK_FAIL
		}
		else
			int_l_count += 25;

    	
     	if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_actualsettdate,int_l_count,sizeof(chr_l_actualsettdate),l_debug_info_ptr) != APL_SUCCESS)
     	{
      	CO_ProcMonitor(APL_OUT_FILE,"Cannot read Actual Sett Date ..Invalid HSN Format",NULL,NULL);
      	APL_GOBACK_FAIL
     	}
     	else
       	int_l_count += APL_DATE_LEN;

      
      if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_hsndate,int_l_count,sizeof(chr_l_hsndate),l_debug_info_ptr) != APL_SUCCESS)
      {
         CO_ProcMonitor(APL_OUT_FILE,"Cannot read Access Stamp ..Invalid HSN Format",NULL,NULL);
         APL_GOBACK_FAIL
      }
      else
         int_l_count += APL_DATE_LEN;

      int_l_count += APL_NOTE_LEN + 5;                                

      
      if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_txntype,int_l_count,sizeof(chr_l_txntype),l_debug_info_ptr) != APL_SUCCESS)
      {
			CO_ProcMonitor(APL_OUT_FILE,"Cannot read TXN Type ..Invalid HSN Format",NULL,NULL);
         APL_GOBACK_FAIL
      }

      
      if (MS_Mod_CCSParam(chr_l_parameters,"CLIENT",chr_l_smacclient) != APL_SUCCESS)
         APL_GOBACK_FAIL
      if (MS_Mod_CCSParam(chr_l_parameters,"IDENTIY_NO",chr_l_custfailnote) != APL_SUCCESS)
         APL_GOBACK_FAIL
      if (MS_Mod_CCSParam(chr_l_parameters,"PARTIAL_IND","Y") != APL_SUCCESS)
         APL_GOBACK_FAIL
      if (MS_Mod_CCSParam(chr_l_parameters,"NEWQTY",chr_l_settledqty) != APL_SUCCESS)
         APL_GOBACK_FAIL
      if (MS_Mod_CCSParam(chr_l_parameters,"NEWAMT",chr_l_nsv) != APL_SUCCESS)
         APL_GOBACK_FAIL
      if (MS_Mod_CCSParam(chr_l_parameters,"NEWREFNO",chr_l_smacref) != APL_SUCCESS)
         APL_GOBACK_FAIL
      if(MS_Mod_CCSParam(chr_l_parameters,"INSTRUMENT_DT",chr_l_actualsettdate) != APL_SUCCESS)
         APL_GOBACK_FAIL
      if ((strcmp(chr_l_txntype,"521") == 0) || (strcmp(chr_l_txntype,"523") ==0))
      {
         if (MS_Mod_CCSParam(chr_l_parameters,"MONEY_SETL_DT",chr_l_actualsettdate) != APL_SUCCESS)
            APL_GOBACK_FAIL
      }
      else
      {
         if (MS_Mod_CCSParam(chr_l_parameters,"MONEY_SETL_DT",NULL) != APL_SUCCESS)
            APL_GOBACK_FAIL
      }
      if (MS_Mod_CCSParam(chr_l_parameters,"COST","0") != APL_SUCCESS)
         APL_GOBACK_FAIL
      if (MS_Mod_CCSParam(chr_l_parameters,"BROKERCOMM",chr_l_gsv) != APL_SUCCESS)
         APL_GOBACK_FAIL
      if (MS_Mod_CCSParam(chr_l_parameters,"SELFORREG","N") != APL_SUCCESS)
         APL_GOBACK_FAIL
      if (MS_Mod_CCSParam(chr_l_parameters,"PEND_REG_QTY","0") != APL_SUCCESS)
         APL_GOBACK_FAIL
      if (MS_Mod_CCSParam(chr_l_parameters,"MRK_DL_FAILQTY","0") != APL_SUCCESS)
         APL_GOBACK_FAIL
      if (MS_Mod_CCSParam(chr_l_parameters,"REC_INT_000","0") != APL_SUCCESS)
         APL_GOBACK_FAIL
      if (MS_Mod_CCSParam(chr_l_parameters,"DL_COMPLETEQTY","0") != APL_SUCCESS)
         APL_GOBACK_FAIL
      if (MS_Mod_CCSParam(chr_l_parameters,"DELTA_000","0") != APL_SUCCESS)
         APL_GOBACK_FAIL
      if (MS_Mod_CCSParam(chr_l_parameters,"DELTA_001","0") != APL_SUCCESS)
			APL_GOBACK_FAIL
      if (MS_Mod_CCSParam(chr_l_parameters,"DELTA_003","0") != APL_SUCCESS)
         APL_GOBACK_FAIL
      if (MS_Mod_CCSParam(chr_l_parameters,"ACCESS_STAMP",chr_l_hsndate) != APL_SUCCESS)
         APL_GOBACK_FAIL

      
      strcpy(chr_l_funcname,PARTSETTLEMENTFUNC);

	}

	if (strcmp(chr_l_hsncategory,CONFIRMRST_HSN_FUNCTION) == 0)
	{
		CO_ProcMonitor(APL_OUT_FILE,"Current HSN is CONFIRMATION REVERSAL HSN",NULL,NULL);
		
		if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_failcode_A,int_l_count,sizeof(chr_l_failcode_A),l_debug_info_ptr) != APL_SUCCESS)
		{
			CO_ProcMonitor(APL_OUT_FILE,"Cannot read Failcode ..Invalid HSN Format",NULL,NULL);
         APL_GOBACK_FAIL
      }		
		else
			int_l_count += 4;

		int_l_count += APL_CUSTNOTE_LEN +1;				
		

		
		if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_note3,int_l_count,sizeof(chr_l_note3),l_debug_info_ptr) != APL_SUCCESS)
		{
         CO_ProcMonitor(APL_OUT_FILE,"Cannot read Note3 field ..Invalid HSN Format",NULL,NULL);
         APL_GOBACK_FAIL
      }
      else
			int_l_count += 65;

		
		if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_note4,int_l_count,sizeof(chr_l_note4),l_debug_info_ptr) != APL_SUCCESS)
		{
         CO_ProcMonitor(APL_OUT_FILE,"Cannot read Note4 field ..Invalid HSN Format",NULL,NULL);
         APL_GOBACK_FAIL
      }
      else
			int_l_count += 65;
		
		
		if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_gsv,int_l_count,sizeof(chr_l_gsv),l_debug_info_ptr) != APL_SUCCESS)
		{
         CO_ProcMonitor(APL_OUT_FILE,"Cannot read GSV chr_value ..Invalid HSN Format",NULL,NULL);
         APL_GOBACK_FAIL
      }
      else
			int_l_count += 20;
		
		int_l_count += APL_FAILNOTE_LEN + 20;

		
		if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_commonrefno,int_l_count,sizeof(chr_l_commonrefno),l_debug_info_ptr) != APL_SUCCESS)
		{
         CO_ProcMonitor(APL_OUT_FILE,"Cannot read Common Ref No ..Invalid HSN Format",NULL,NULL);
         APL_GOBACK_FAIL
      }
      else
			int_l_count += APL_TXNREFNO_LEN -1;
		
		int_l_count += APL_DATE_LEN + 25;							

		
		if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_hsndate,int_l_count,sizeof(chr_l_hsndate),l_debug_info_ptr) != APL_SUCCESS)
		{
         CO_ProcMonitor(APL_OUT_FILE,"Cannot read Access Stamp ..Invalid HSN Format",NULL,NULL);
         APL_GOBACK_FAIL
      }
      else
			int_l_count += APL_DATE_LEN;
		
		
		strcpy(chr_l_environment,ENV_CONFREV_HSN);
		
		if ((strlen(chr_l_commonrefno) == 0) && (strcmp(chr_l_gsv,"0") == 0) && ((strlen(chr_l_failcode_A) == 0) || (strcmp(chr_l_failcode_A,"00") == 0 )) && (strlen(chr_l_note3) == 0) && (strlen(chr_l_note4) == 0))
			strcat(chr_l_environment,"B");
		else
		{
			if ((strlen(chr_l_commonrefno) == 0) && (strcmp(chr_l_gsv,"0") == 0) && ((strlen(chr_l_failcode_A) == 0) || (strcmp(chr_l_failcode_A,"00") == 0)))
				strcat(chr_l_environment,"A");
			else
				strcat(chr_l_environment,"Z");
		}

		
		if (MS_Mod_CCSParam(chr_l_parameters,"CLIENT",chr_l_smacclient) != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"IDENTIY_NO",chr_l_smacref) != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"ACCESS_STAMP",chr_l_hsndate) != APL_SUCCESS)
			APL_GOBACK_FAIL

		
		strcpy(chr_l_funcname,CONFIRMRST_FUNCTION);

	}

	if (strcmp(chr_l_hsncategory,SETTREVERSALHSN) == 0)
	{
		CO_ProcMonitor(APL_OUT_FILE,"Current HSN is SETTLEMENT REVERSAL HSN",NULL,NULL);
		
      if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_failcode_A,int_l_count,sizeof(chr_l_failcode_A),l_debug_info_ptr) != APL_SUCCESS)
      {
         CO_ProcMonitor(APL_OUT_FILE,"Cannot read Failcode ..Invalid HSN Format",NULL,NULL);
         APL_GOBACK_FAIL
      }
      else
         int_l_count += 4;

      int_l_count += APL_CUSTNOTE_LEN +1;           


      
      if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_note3,int_l_count,sizeof(chr_l_note3),l_debug_info_ptr) != APL_SUCCESS)
      {
         CO_ProcMonitor(APL_OUT_FILE,"Cannot read Note3 field ..Invalid HSN Format",NULL,NULL);
         APL_GOBACK_FAIL
      }
      else
         int_l_count += 65;

      
      if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_note4,int_l_count,sizeof(chr_l_note4),l_debug_info_ptr) != APL_SUCCESS)
      {
         CO_ProcMonitor(APL_OUT_FILE,"Cannot read Note4 field ..Invalid HSN Format",NULL,NULL);
         APL_GOBACK_FAIL
      }
      else
         int_l_count += 65;

      
      if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_gsv,int_l_count,sizeof(chr_l_gsv),l_debug_info_ptr) != APL_SUCCESS)
      {
         CO_ProcMonitor(APL_OUT_FILE,"Cannot read GSV chr_value ..Invalid HSN Format",NULL,NULL);
         APL_GOBACK_FAIL
      }
      else
         int_l_count += 20;

      int_l_count += APL_FAILNOTE_LEN + 20;

      
      if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_commonrefno,int_l_count,sizeof(chr_l_commonrefno),l_debug_info_ptr) != APL_SUCCESS)
      {
         CO_ProcMonitor(APL_OUT_FILE,"Cannot read Common Ref No ..Invalid HSN Format",NULL,NULL);
			APL_GOBACK_FAIL
      }
      else
         int_l_count += APL_TXNREFNO_LEN -1;

      int_l_count += APL_DATE_LEN + 25;                   

      
      if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_hsndate,int_l_count,sizeof(chr_l_hsndate),l_debug_info_ptr) != APL_SUCCESS)
      {
         CO_ProcMonitor(APL_OUT_FILE,"Cannot read Access Stamp ..Invalid HSN Format",NULL,NULL);
         APL_GOBACK_FAIL
      }
      else
         int_l_count += APL_DATE_LEN;

		
		if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_instntype,int_l_count,sizeof(chr_l_instntype),l_debug_info_ptr) != APL_SUCCESS)
		{
         CO_ProcMonitor(APL_OUT_FILE,"Cannot read Instruction type ..Invalid HSN Format",NULL,NULL);
         APL_GOBACK_FAIL
      }
      else
			int_l_count += 6;
		
		int_l_count += APL_NOTE_LEN -1;
	
		
		if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_txntype,int_l_count,sizeof(chr_l_txntype),l_debug_info_ptr) != APL_SUCCESS)
		{
         CO_ProcMonitor(APL_OUT_FILE,"Cannot read TXN type ..Invalid HSN Format",NULL,NULL);
         APL_GOBACK_FAIL
      }
      else
			int_l_count += 5;

      
		if (strcmp(chr_l_instntype,"CHILD") == 0)
      	strcpy(chr_l_environment,ENV_SETTREV_CHILD_HSN);
		else
			strcpy(chr_l_environment,ENV_SETTREV_PARENT_HSN);

		if ((strlen(chr_l_commonrefno) == 0) && (strcmp(chr_l_gsv,"0") == 0) && ((strcmp(chr_l_failcode_A,"0") == 0) || (strcmp(chr_l_failcode_A,"00") == 0 )) && (strlen(chr_l_note3) == 0) && (strlen(chr_l_note4) == 0))
         strcat(chr_l_environment,"B");
      else
      {
         if ((strlen(chr_l_commonrefno) == 0) && (strcmp(chr_l_gsv,"0") == 0) && ((strcmp(chr_l_failcode_A,"0") == 0) || (strcmp(chr_l_failcode_A,"00") == 0)))
            strcat(chr_l_environment,"A");
         else
            strcat(chr_l_environment,"Z");
      }

      
      if (MS_Mod_CCSParam(chr_l_parameters,"CLIENT",chr_l_smacclient) != APL_SUCCESS)
         APL_GOBACK_FAIL
      if (MS_Mod_CCSParam(chr_l_parameters,"IDENTIY_NO",chr_l_smacref) != APL_SUCCESS)
         APL_GOBACK_FAIL
      if (MS_Mod_CCSParam(chr_l_parameters,"ACCESS_STAMP",chr_l_hsndate) != APL_SUCCESS)
         APL_GOBACK_FAIL
		if ((strcmp(chr_l_txntype,"520") ==0) || (strcmp(chr_l_txntype,"522") == 0))
		{
			if (MS_Mod_CCSParam(chr_l_parameters,"ENV_ACTION","S") != APL_SUCCESS)
				APL_GOBACK_FAIL
		}
		else
		{
			if (MS_Mod_CCSParam(chr_l_parameters,"ENV_ACTION","B") != APL_SUCCESS)
				APL_GOBACK_FAIL
		}

      
      strcpy(chr_l_funcname,SETTREVERSALFUNC);	

	}

	if ((strcmp(chr_l_hsncategory,AMENDHSN) == 0) || (strcmp(chr_l_hsncategory,HSN_CATE_CANCEL) ==0))
	{
		CO_ProcMonitor(APL_OUT_FILE,"Current HSN is AMEND-CANCEL HSN",NULL,NULL);
		int_l_count += APL_CUSTNOTE_LEN + APL_FAILNOTE_LEN + 174;
		
		if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_successfailureflag,int_l_count,sizeof(chr_l_successfailureflag),l_debug_info_ptr) != APL_SUCCESS)
		{
		 	CO_ProcMonitor(APL_OUT_FILE,"Cannot read Accept/Reject Flag ..Invalid HSN Format",NULL,NULL);
			APL_GOBACK_FAIL		
		}
		else
			int_l_count += 1;
			
			int_l_count += APL_DATE_LEN + APL_TXNREFNO_LEN + 24;					
			
		 
      if (CO_Rtv_Str(p_ei_mq_hsn_struct_h->msg,chr_l_hsndate,int_l_count,sizeof(chr_l_hsndate),l_debug_info_ptr) != APL_SUCCESS)
      {
         CO_ProcMonitor(APL_OUT_FILE,"Cannot read Access Stamp ..Invalid HSN Format",NULL,NULL);
         APL_GOBACK_FAIL
      }
      else
         int_l_count += APL_DATE_LEN;

	
		if (strcmp(chr_l_hsncategory,AMENDHSN) == 0)
			strcpy(chr_l_amendcancelflag,"A");
		else
			strcpy(chr_l_amendcancelflag,"C");
		
		
		if (strcmp(chr_l_successfailureflag,"0") == 0)
			strcpy(chr_l_environment,ENV_AMENDCANCEL_FAILURERR_HSN);
		else
			strcpy(chr_l_environment,ENV_AMENDCANCEL_SUCCESS_HSN);

		
		if (MS_Mod_CCSParam(chr_l_parameters,"CLIENT",chr_l_smacclient) != APL_SUCCESS)
			APL_GOBACK_FAIL
		if (MS_Mod_CCSParam(chr_l_parameters,"IDENTIY_NUM",chr_l_smacref) != APL_SUCCESS)
			APL_GOBACK_FAIL	
		if (strcmp(chr_l_successfailureflag,"0") == 0)
		{
			if (MS_Mod_CCSParam(chr_l_parameters,"ACC_REJ_FLAG","R") != APL_SUCCESS)
				APL_GOBACK_FAIL
		}
		else
		{
			if (MS_Mod_CCSParam(chr_l_parameters,"ACC_REJ_FLAG","A") != APL_SUCCESS)
				APL_GOBACK_FAIL
		}
		if (MS_Mod_CCSParam(chr_l_parameters,"AMD_CAN_FLAG",chr_l_amendcancelflag) != APL_SUCCESS)
			APL_GOBACK_FAIL

		
		strcpy(chr_l_funcname,FUNC_SMIAMDCANUPD);
	
	}

	sqlca.sqlcode = 0;
	EXEC SQL SELECT SEQ_DMN.NEXTVAL INTO :l_reqnum FROM DUAL;
	IS_ANY_ORA_ERROR
	
	sqlca.sqlcode = 0;
	EXEC SQL INSERT INTO PRO_REQUEST_DEAL 
	VALUES(:l_reqnum,:chr_l_funcname,:chr_l_environment,:chr_l_parameters,'0',:chr_l_userid,NULL,:chr_l_hsnid,:chr_l_respstatus,:chr_l_sysdatetime_A);
	
        printf("l_reqnum=<%ld>\n",l_reqnum);
        printf("l_funcname=<%s>\n",chr_l_funcname);
        printf("l_environment=<%s>\n",chr_l_environment);
        printf("l_parameters=<%s>\n",chr_l_parameters);
        printf("l_userid=<%s>\n",chr_l_userid);
        printf("l_hsnid=<%s>\n",chr_l_hsnid);
        printf("l_respstatus=<%s>\n",chr_l_respstatus);
        printf("l_sysdatetime=<%s>\n",chr_l_sysdatetime_A);


	if (sqlca.sqlcode < 0) 
    {
      ltoa_r(sqlca.sqlcode,chr_buffer,KEY_LENGTH-1);
      CO_InsertErr(l_debug_info_ptr,DB_ERR_NO,chr_buffer,
      APL_NULL_STRING,APL_NULL_STRING,
                 __LINE__,__FILE__);
		printf("Database Insert failed with sqlcode %d\n",sqlca.sqlcode);
      APL_GOBACK_FAIL
    }

	EXEC SQL COMMIT WORK;
	IS_ANY_ORA_ERROR

	APL_GOBACK_SUCCESS;

 	RETURN_SUCCESS :
      CO_ProcMonitor(   APL_OUT_FILE,
                  "Exiting MS_Proc_SMPEntry processtion with success",
                   NULL,
                   NULL);
      return(APL_SUCCESS);

   RETURN_FAILURE :
      CO_ProcMonitor(   APL_OUT_FILE,
                  "Exiting MS_Proc_SMPEntry processtion with errors",
                   NULL,
                   NULL);
      return(APL_FAILURE);
}



int CO_Rtv_Str(char *p_instring,char *p_outstring,int p_start,int p_size,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	char		*chr_l_tempstr1;
	char		*chr_l_tempstr2;
	int 		int_l_count;

	chr_l_tempstr1 = (char *)calloc(p_size,sizeof(char));
	APL_MALLOC_FAIL(chr_l_tempstr1);
	chr_l_tempstr2 = (char *)calloc(p_size,sizeof(char));
	APL_MALLOC_FAIL(chr_l_tempstr2);
	
	int_l_count = p_size -1;

	strncpy(chr_l_tempstr1,p_instring+p_start,int_l_count);
	CO_Trim(chr_l_tempstr1,' ','R',chr_l_tempstr2,l_debug_info_ptr);

	memcpy(p_outstring,chr_l_tempstr2,p_size);

	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      APL_FREE(chr_l_tempstr1);
      APL_FREE(chr_l_tempstr2);
      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
		CO_ProcMonitor(APL_OUT_FILE,"Exiting unsuccessfully from  CO_Rtv_Str function",NULL,NULL);
      APL_FREE(chr_l_tempstr1);
      APL_FREE(chr_l_tempstr2);
      return(APL_FAILURE);
	}
}


int MS_Mod_CCSParam(char *p_parameters,char *p_token,char *p_value)
{
	char chr_l_parameters[APL_PARAM_LEN];

	memset(chr_l_parameters,APL_NULL_CHAR,APL_PARAM_LEN);
		
	strcpy(chr_l_parameters,p_parameters);
	strcat(chr_l_parameters,"");
	strcat(chr_l_parameters,p_token);
	strcat(chr_l_parameters,"");
	if (strcmp(p_value,NULL) != 0)
		strcat(chr_l_parameters,p_value);

	memcpy(p_parameters,chr_l_parameters,APL_PARAM_LEN);
	
	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      CO_ProcMonitor(APL_OUT_FILE,"Exiting unsuccessfully from  MS_Mod_CCSParam function",NULL,NULL);
      return(APL_FAILURE);
   }
}



int MQGetConn(char *qmanager[QUEUE_MANAGER_LEN], char *queue_name[QUEUE_LEN],MQHCONN *MQHcon,MQHOBJ *MQHobj,char *qtype)
{

   MQHCONN  Hcon;
   MQHOBJ   Hobj;
   MQLONG   O_options;
   MQLONG   OpenCode;
   MQLONG   CReason;
   MQLONG   Reason;
   MQLONG   CompCode;
   MQOD     od                            =  {MQOD_DEFAULT};
   char     chr_mtemp[100]                    =  {APL_NULL_STRING};
   char     chr_qmname[QUEUE_MANAGER_LEN]     =  {APL_NULL_STRING};


   memcpy(chr_qmname,qmanager,QUEUE_MANAGER_LEN);
   MQCONN(chr_qmname,&Hcon,&CompCode,&CReason);

   if (CompCode == MQCC_FAILED)
   {
      sprintf(chr_mtemp,"Connection to MQ Queue Manager %s Failed with reason h_code %ld",chr_qmname,CReason);
      CO_ProcMonitor(APL_OUT_FILE,chr_mtemp,NULL,NULL);
      APL_GOBACK_FAIL
   }
   else
   {
      sprintf(chr_mtemp,"Successfully connected to MQ Queue Manager %s",chr_qmname);
      CO_ProcMonitor(APL_OUT_FILE,chr_mtemp,NULL,NULL);
      strcpy(chr_mtemp,APL_NULL_STRING);
   }

   strcpy(od.ObjectName,queue_name);
	if (strcmp(qtype,"I") == 0)
   	O_options = MQOO_INPUT_AS_Q_DEF + MQOO_FAIL_IF_QUIESCING + MQOO_INQUIRE;
	else
		O_options = MQOO_OUTPUT + MQOO_FAIL_IF_QUIESCING + MQOO_SET_ALL_CONTEXT;

   MQOPEN(Hcon,&od,O_options,&Hobj,&OpenCode,&Reason);
   if (Reason != MQRC_NONE)
   {
      sprintf(chr_mtemp,"MQ Open to Queue %s Failed with reason h_code %ld",queue_name,Reason);
      CO_ProcMonitor(APL_OUT_FILE,chr_mtemp,NULL,NULL);
      APL_GOBACK_FAIL
   }
   else
   {
		if (strcmp(qtype,"I") == 0)
      	sprintf(chr_mtemp,"Successfully opened MQ Queue %s for Input",queue_name);
		else
      	sprintf(chr_mtemp,"Successfully opened MQ Queue %s for Output",queue_name);
      CO_ProcMonitor(APL_OUT_FILE,chr_mtemp,NULL,NULL);
      strcpy(chr_mtemp,APL_NULL_STRING);
   }

	memcpy(MQHcon,&Hcon,sizeof(Hcon));
   memcpy(MQHobj,&Hobj,sizeof(Hobj));

   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      CO_ProcMonitor(APL_OUT_FILE,"Exiting successfully from  MQGetConn function",NULL,NULL);
      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      CO_ProcMonitor(APL_OUT_FILE,"Exiting unsuccessfully from  MQGetConn function",NULL,NULL);
      return(APL_FAILURE);
   }

}
