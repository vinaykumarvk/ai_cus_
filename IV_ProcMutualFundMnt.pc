/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
*/
/*********************************************************************
 *
 * Module Name         :      Billing Maintenance
 *
 * File Name           :      IV_ProcMutualFundMnt.pc
 *
 * Description         :      This file contains functions for updating
 *                            Basket Transaction Details.
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author             Description       RFS No.
 * ---------   --------  ------------         -------------     ---------
 * 29/12/2006   1.0       Vinay Kalaskar       New file        
 *
 *********************************************************************/


#include "stdio_64.h"
#include <string.h>
#include <stdlib.h>
				      
#include "IV_Control_A.h"
#define  APL_MAXLINE_SIZE 350


EXEC SQL INCLUDE SQLCA.H;

int IV_Mod_MutualFundNew(const IV_MUTUAL_FUND_STRUCT *p_ivMutualFund_struct,const INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
    char flag='T';

    char **l_clientlist_val;
    char **l_sublist_val;
    char **l_identitylist_val;
    char **l_grouplist_val;

    char l_clientlist[6000] = APL_NULL_STRING;
    char l_sublist[6000] = APL_NULL_STRING;
    char l_identlist[5000] = APL_NULL_STRING;
    char l_grouplist[2000] = APL_NULL_STRING;
    char l_identity[200] = APL_NULL_STRING;
    char group_value[20] = APL_NULL_STRING;
    char group_prev_value[20] = APL_NULL_STRING;

    char chr_identity[200] = APL_NULL_STRING;
    char l_param_client[6000] = APL_NULL_STRING;

    char l_query[5000]=APL_NULL_STRING;
    char l_client[20] = APL_NULL_STRING;

    int l_mf_seqno =0;
    int l_clientlist_no = 0;
    int l_sublist_no = 0;
    int l_identitylist_no = 0;
    int l_grouplist_no = 0;
    int l_group_count = 0;
    int l_sequence_no = 0;

    short chr_client_i = 0;

    int i=0,j=0,k=0,l=0,m=0;
    
    EXEC SQL VAR l_query IS STRING;

	 strcpy(l_clientlist,p_ivMutualFund_struct->clientlist);
	 strcpy(l_sublist,p_ivMutualFund_struct->identitylist);

	 printf("l_clientlist :|%s|\n",l_clientlist);
	 printf("l_sublist :|%s|\n",l_sublist);

	 
	 if (APL_FAILURE == CO_SplitStr(l_clientlist,';',&l_clientlist_no,&l_clientlist_val))
	 {   
	 	 printf("String split processtion failed for l_clientlist\n");
	    APL_GOBACK_FAIL
	 }

	 if (APL_FAILURE == CO_SplitStr(l_sublist,'|',&l_sublist_no,&l_sublist_val))
	 {   
	 	 printf("String split processtion failed for l_sublist\n");
	    APL_GOBACK_FAIL
	 }


	 for(i=0;i<l_sublist_no;i++)
	 {
		 if(i==0)
			strcpy(l_identlist,l_sublist_val[i]);
		 else if(i==1)  
			strcpy(l_grouplist,l_sublist_val[i]);
	 }

	 printf("l_identlist :|%s|\n",l_identlist);
		
	 if (APL_FAILURE == CO_SplitStr(l_identlist,';',&l_identitylist_no,&l_identitylist_val))
	 {   
	 	 printf("String split processtion failed for l_identlist\n");
	    APL_GOBACK_FAIL
	 }

	 printf("l_grouplist :|%s|\n",l_grouplist);

	 if (APL_FAILURE == CO_SplitStr(l_grouplist,',',&l_grouplist_no,&l_grouplist_val))
	 {   
	 	 printf("String split processtion failed for l_grouplist\n");
	    APL_GOBACK_FAIL
	 }


	 for(i=0;i<l_clientlist_no;i++)
	 {	 
		strcpy(l_client,l_clientlist_val[i]);

		for(j=0;j<l_identitylist_no;j++)
		{ 
			strcpy(l_identity,l_identitylist_val[j]);

			EXEC SQL SELECT MF_SEQNO INTO :l_mf_seqno:chr_client_i 
				 FROM DL_DEAL 
				 WHERE CLIENT = :l_client
				 AND IDENTIY_NO = :l_identity;
			 
			 if(chr_client_i==0)
			 flag='F';
			 			
		}	
	 }

	 printf("flag :|%c|\n",flag);

	 if(flag == 'F')
	 {
		   CO_InsertErr(l_debug_info_ptr, 
				ERR_MUTUAL_FUND_EXIST,
				APL_NULL_STRING, 
				APL_NULL_STRING, 
				APL_NULL_STRING, 
				__LINE__, 
				__FILE__) ;
		  APL_GOBACK_FAIL;	  
   	 }

	printf("l_grouplist_no :|%d|\n",l_grouplist_no);

	m=0;

	strcpy(l_param_client,APL_NULL_STRING);

	for(k=0;k<l_grouplist_no;k++)
	{
		strcpy(group_value,l_grouplist_val[k]);
		l_group_count++;

		printf("k :|%d|\n",k);
		printf("l_group_count :|%d|\n",l_group_count);

		if(k > 0)
		{
			strcpy(group_value,l_grouplist_val[k]);
			
			printf("group_value :|%s|\n",group_value);
			printf("group_prev_value :|%s|\n",group_prev_value);

			if(strcmp(group_value,group_prev_value))
			{
				printf("l_group_count :|%d|\n",l_group_count);

				l = l_group_count - 2;

				EXEC SQL SELECT MF_SEQNO.NEXTVAL INTO :l_sequence_no FROM DUAL;

				printf("l_sequence_no :|%d|\n",l_sequence_no);

				 for(i = m;i <l_group_count-1;i++)
				 {	 
					strcpy(l_client,l_clientlist_val[i]);

					for(j = m;j < l_group_count-1;j++)
					{ 
					   strcpy(l_identity,l_identitylist_val[j]);

					   printf("i :|%d| l:|%d|\n",i,l);
					   
						if(i==j)
						{							
							if((i==m)&&(j==m))
							{
								strcpy(l_param_client,"'");	
								strcat(l_param_client,l_client);
								strcat(l_param_client,l_identity);
								strcat(l_param_client,"',");
							}
							else
							{
								strcat(l_param_client,"'");	
								strcat(l_param_client,l_client);
								strcat(l_param_client,l_identity);
								strcat(l_param_client,"'");
								if(i!=l)
								strcat(l_param_client,",");
							}
										
						}								
					}	
				  }
				  m = l_group_count-1;

			  printf("l_param_client :|%s|\n",l_param_client);
			  printf("l_sequence_no :|%d|\n",l_sequence_no);

			  sprintf(l_query,"UPDATE DL_DEAL SET MF_SEQNO ='%d' WHERE CLIENT||IDENTIY_NO IN (%s)",l_sequence_no,l_param_client);

			  printf("l_query:|%s|\n",l_query);
				
			  EXEC SQL EXECUTE IMMEDIATE :l_query;

				  Alert("Before Add COMMIT |%d|\n",sqlca.sqlcode) ;
				  EXEC SQL COMMIT WORK;	 
				  Alert("After Add COMMIT |%d|\n",sqlca.sqlcode) ;			


			}
			else if(k == l_grouplist_no - 1)
			{
				strcpy(l_param_client,APL_NULL_STRING);

				printf("l_group_count ** :|%d|\n",l_group_count);

				l = l_group_count-1;
				EXEC SQL SELECT MF_SEQNO.NEXTVAL INTO :l_sequence_no FROM DUAL;

				printf("l_sequence_no ** :|%d| m :|%d|\n",l_sequence_no,m);

				for(i=m;i<l_group_count;i++)
				{	 
					strcpy(l_client,l_clientlist_val[i]);

					for(j=m;j<l_group_count;j++)
					{ 
						strcpy(l_identity,l_identitylist_val[j]);

						if(i==j)
						{							
							if((i==m)&&(j==m))
							{
								strcpy(l_param_client,"'");	
								strcat(l_param_client,l_client);
								strcat(l_param_client,l_identity);
								strcat(l_param_client,"',");
							}
							else
							{
								strcat(l_param_client,"'");	
								strcat(l_param_client,l_client);
								strcat(l_param_client,l_identity);
								strcat(l_param_client,"'");
								if(i!=l)
								strcat(l_param_client,",");
							}
										
						}

					}	
				}
  				m = l_group_count;

			  printf("l_param_client :|%s|\n",l_param_client);
			  printf("l_sequence_no :|%d|\n",l_sequence_no);

			  sprintf(l_query,"UPDATE DL_DEAL SET MF_SEQNO = '%d' WHERE CLIENT||IDENTIY_NO IN (%s)",l_sequence_no,l_param_client);

			  printf("l_query:|%s|\n",l_query);
				
			  EXEC SQL EXECUTE IMMEDIATE :l_query;

				  Alert("Before Add COMMIT |%d|\n",sqlca.sqlcode) ;
				  EXEC SQL COMMIT WORK;	 
				  Alert("After Add COMMIT |%d|\n",sqlca.sqlcode) ;
				
			}
			strcpy(group_prev_value,l_grouplist_val[k]);
		}
		else if(k == 0)
		{
			strcpy(group_prev_value,l_grouplist_val[k]);

			 for(i=0;i<l_clientlist_no;i++)
			 {	 
				strcpy(l_client,l_clientlist_val[i]);

				for(j=0;j<l_identitylist_no;j++)
				{ 
					strcpy(l_identity,l_identitylist_val[j]);

				   if((k == i)&&(k==j))
				   {
					strcat(l_param_client,"'");	
					strcat(l_param_client,l_client);
					strcat(l_param_client,l_identity);
					strcat(l_param_client,"',");

				   }
								
				}	
			  }
		}
		
	 }


	  APL_GOBACK_SUCCESS
	
	  RETURN_SUCCESS:
//AIX - Warnings Removal
         {
       
	  APL_IF_DEBUG
	  {
		  CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of IV_Mod_MutualFundNew().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
           }
	     return APL_SUCCESS;	 
	  }  

     RETURN_FAILURE:

   {
     APL_IF_DEBUG
	  {
		  CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of IV_Mod_MutualFundNew().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);		  
	  
	  }	  
        return APL_FAILURE;	 
     }
}		 



int IV_Mod_MutualFundMod(const IV_MUTUAL_FUND_STRUCT *p_ivMutualFund_struct,const INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
    char flag='T';

    char **l_clientlist_val;
    char **l_clientcount_val;
    char **l_grouplist_val;
    char **l_main_grouplist_val;
    char **l_main_clientlist_val;

    char l_clientlist[6000] = APL_NULL_STRING;
    char l_clientcount[6000] = APL_NULL_STRING;
    char l_grouplist[2000] = APL_NULL_STRING;
    char l_main_clientlist[6000] = APL_NULL_STRING;
    char l_main_grouplist[2000] = APL_NULL_STRING;
    char l_identity[200] = APL_NULL_STRING;
    char group_value[20] = APL_NULL_STRING;
    char group_prev_value[20] = APL_NULL_STRING;

    char chr_identity[200] = APL_NULL_STRING;
    char l_param_client[6000] = APL_NULL_STRING;

    char l_query[5000]=APL_NULL_STRING;
    char l_client[20] = APL_NULL_STRING;

    char l_sequence[20] = APL_NULL_STRING;
    char l_prev_sequence[20] = APL_NULL_STRING;

    char l_delete_query[5000]=APL_NULL_STRING;

    int l_mf_seqno =0;
    int l_clientlist_no = 0;
    int l_grouplist_no = 0;
    int l_main_grouplist_no = 0;
    int l_main_clientlist_no = 0;
    int l_group_count = 0;

    int l_counter_value = 0;
    int l_clientcount_no = 0;
   
    int l_sequence_no = 0;
    int l_prev_seqno = 0;
    int l_prev_sequence_no = 0;
    int g_sequence_no = 0;


    short chr_client_i = 0;

    int i=0,j=0,k=0;
    
    EXEC SQL VAR l_query IS STRING;
    EXEC SQL VAR l_delete_query IS STRING;

	 strcpy(l_main_clientlist,p_ivMutualFund_struct->clientlist);
	 strcpy(l_main_grouplist,p_ivMutualFund_struct->identitylist);

	 printf("l_main_clientlist :|%s|\n",l_main_clientlist);
	 printf("l_main_grouplist :|%s|\n",l_main_grouplist);

	 
	 if (APL_FAILURE == CO_SplitStr(l_main_clientlist,';',&l_main_clientlist_no,&l_main_clientlist_val))
	 {   
	 	 printf("String split processtion failed for l_main_clientlist \n");
	    APL_GOBACK_FAIL
	 }

	 l_counter_value = 0;

	 printf("l_main_clientlist_no :|%d|\n",l_main_clientlist_no);

	 if(l_main_clientlist_no == 1)
	 {
		strcpy(l_clientcount,l_main_clientlist_val[0]);

		printf("l_clientcount :|%s|\n",l_clientcount);
	
		 if (APL_FAILURE == CO_SplitStr(l_clientcount,',',&l_clientcount_no,&l_clientcount_val))
		 {   
			 printf("String split processtion failed for l_clientcount \n");
		    APL_GOBACK_FAIL
		 }

		 printf("l_clientcount_no :|%d|\n",l_clientcount_no);
		 
		 if(l_clientcount_no >= 1)
			 l_counter_value = 1;
		 else
			 l_counter_value = 0;
		 
	 }
	 else if(l_main_clientlist_no > 1)
	 {
		l_counter_value = 1;
	 }
	


	 if (APL_FAILURE == CO_SplitStr(l_main_grouplist,';',&l_main_grouplist_no,&l_main_grouplist_val))
	 {   
		 printf("String split processtion failed for l_main_grouplist \n");
	    APL_GOBACK_FAIL
	 }

	
	 printf("l_main_clientlist_no :|%d|\n",l_main_clientlist_no);
	 printf("l_main_grouplist_no :|%d|\n",l_main_grouplist_no);
	 printf("l_counter_value :|%d|\n",l_counter_value);

	 if(l_main_clientlist_no == l_main_grouplist_no)
	 {
	     if(l_counter_value == 1 )
	     {
		 for(i=0;i<l_main_grouplist_no;i++)
		 {
			strcpy(l_grouplist,l_main_grouplist_val[i]);
			strcpy(l_clientlist,l_main_clientlist_val[i]);

			printf("l_grouplist :|%s|\n",l_grouplist);
			printf("l_clientlist :|%s|\n",l_clientlist);

			 if (APL_FAILURE == CO_SplitStr(l_grouplist,',',&l_grouplist_no,&l_grouplist_val))
			 {   
				 printf("String split processtion failed for l_grouplist \n");
			    APL_GOBACK_FAIL
			 }		

			for(j=0;j<l_grouplist_no;j++)
			{
				if(j>0)
				strcpy(l_sequence,l_grouplist_val[j]);
				else if(j==0)
				strcpy(l_prev_sequence,l_grouplist_val[j]);

				if(j > 0)
				{						
					EXEC SQL SELECT GREATEST(DECODE(:l_sequence,'null',0,:l_sequence),
						 DECODE(:l_prev_sequence,'null',0,:l_prev_sequence)) 
						 INTO :l_prev_sequence_no
						 FROM DUAL;

					if(l_prev_sequence_no > 0)
					{
						if((g_sequence_no >= l_prev_sequence_no)&&
						   (g_sequence_no >= l_sequence_no))
						l_sequence_no = g_sequence_no;

						g_sequence_no = l_prev_sequence_no;
					}
					strcpy(l_prev_sequence,l_sequence);
				}
			}

			printf("l_sequence_no :|%d|\n",l_sequence_no);
			printf("l_prev_seqno :|%d|\n",l_prev_seqno);
			printf("g_sequence_no :|%d|\n",g_sequence_no);

			if((l_sequence_no == l_prev_seqno)&&(g_sequence_no == l_prev_seqno))
				EXEC SQL SELECT MF_SEQNO.NEXTVAL INTO :l_sequence_no FROM DUAL;
			else if((l_sequence_no == l_prev_seqno)&&(g_sequence_no > 0))
				l_sequence_no = g_sequence_no;
				   


		      sprintf(l_delete_query,"UPDATE DL_DEAL SET MF_SEQNO=NULL WHERE CLIENT||IDENTIY_NO IN (%s)",l_clientlist);

			printf("l_delete_query:|%s|\n",l_delete_query);
		 
			EXEC SQL EXECUTE IMMEDIATE :l_delete_query;

			Alert("Before delete COMMIT |%d|\n",sqlca.sqlcode) ;
			EXEC SQL COMMIT WORK;
			Alert("After delete COMMIT |%d|\n",sqlca.sqlcode) ;
			
			sprintf(l_query,"UPDATE DL_DEAL SET MF_SEQNO='%d' WHERE CLIENT||IDENTIY_NO IN (%s)",l_sequence_no,l_clientlist);

			printf("l_query:|%s|\n",l_query);
					
			EXEC SQL EXECUTE IMMEDIATE :l_query;

			l_prev_seqno=l_sequence_no;

			Alert("Before Update COMMIT |%d|\n",sqlca.sqlcode) ;
			EXEC SQL COMMIT WORK;	 
			Alert("After Update COMMIT |%d|\n",sqlca.sqlcode) ;
								
		}
	    }
	}

	  APL_GOBACK_SUCCESS

	  RETURN_SUCCESS:
           //AIX - Warnings Removal
	  {

	  APL_IF_DEBUG
	  {
		  CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of IV_Mod_MutualFundMod().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
          }
	     return APL_SUCCESS;	 
	  }  

     RETURN_FAILURE:

      {
     APL_IF_DEBUG
	  {
		 CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of IV_Mod_MutualFundMod().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);		  
	  
	    }
	      
		return APL_FAILURE;	 
	  }
	
      
	
}

int  IV_Mod_MutualFundDel(const IV_MUTUAL_FUND_STRUCT *p_ivMutualFund_struct,const INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)

{
	    FILE *p_logfile;


	    char l_identlist[6000] = APL_NULL_STRING;
	    char l_clientlist[6000] = APL_NULL_STRING;

	    char l_delete_query[6000]=APL_NULL_STRING;
	    
	    EXEC SQL VAR l_delete_query IS STRING;

	    strcpy(l_clientlist,p_ivMutualFund_struct->clientlist);
	   
	    printf("l_clientlist :|%s|\n",l_clientlist);

	    sprintf(l_delete_query,"UPDATE DL_DEAL SET MF_SEQNO=NULL WHERE CLIENT||IDENTIY_NO IN (%s)",l_clientlist);

	    printf("l_delete_query:|%s|\n",l_delete_query);
	 
	    EXEC SQL EXECUTE IMMEDIATE :l_delete_query;

	    Alert("Before Delete COMMIT |%d|\n",sqlca.sqlcode) ;
	    EXEC SQL COMMIT WORK;
	    Alert("After Delete COMMIT |%d|\n",sqlca.sqlcode) ;
		

	APL_GOBACK_SUCCESS
		 
		 
	RETURN_SUCCESS:
        //AIX - Warnings Removal
	{
       
	APL_IF_DEBUG
	{
		 CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of IV_Mod_MutualFundDel().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
	 }
	    return APL_SUCCESS;	 
   }
       

   RETURN_FAILURE:

   {
   APL_IF_DEBUG
	{
		 CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of IV_Mod_MutualFundDel().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);		  
        }
	    return APL_FAILURE;	 
	}
      
}

