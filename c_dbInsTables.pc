 
 
 
 
#include "MS_Swift.h"
#include "DL_Interface.h"
/*#include "CO_HostStructdef.h"*/
#include <unistd.h>
#include "Df_Fe.h"

EXEC SQL INCLUDE SQLCA.H;
 
/* int CDBUpdAudTrlFn1( DL_DEALAUDIT_STRUCT_H *p_dl_dealaudit_struct_h,char *chr_l_filename,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
 
    
	EXEC SQL BEGIN DECLARE SECTION;
 	EXEC SQL VAR chr_l_filename IS STRING;
   struct sqlca sqlca;
   DL_DEALAUDIT_STRUCT_I *l_dl_dealaudit_struct_i=NULL;
	EXEC SQL END DECLARE SECTION;
	int int_l_error_flag = APL_SUCCESS;
	char  chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	char  chr_l_instrcode[APL_INSTRUMENTCODE_LEN] = APL_NULL_STRING;
	double l_quantity = 0.0;
	char chr_l_dir_alias[50] = APL_NULL_STRING;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;



	APL_IF_DEBUG
	{
		CO_ProcMonitor(   APL_OUT_FILE,
				"Entered Function CDBUpdAudTrlFn1\n",
				NULL,
				NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(    chr_l_buf,
				"The Account is : %s\n",
				p_dl_dealaudit_struct_h->h_dl_client);
		CO_ProcMonitor(   APL_OUT_FILE,
           chr_l_buf,
                   NULL,
                   NULL);
       memset( chr_l_buf, NULL, BUFFER_LEN );
       sprintf(    chr_l_buf,
                   "The RefNo is : %s\n",
                   p_dl_dealaudit_struct_h->h_indentity_no);
       CO_ProcMonitor(   APL_OUT_FILE,
                   chr_l_buf,
                   NULL,
                   NULL);
       memset( chr_l_buf, NULL, BUFFER_LEN );
       sprintf(    chr_l_buf,
                   "The Trailfor is : %s\n",
                   p_dl_dealaudit_struct_h->h_trail_for);
       CO_ProcMonitor(   APL_OUT_FILE,
                   chr_l_buf,
                   NULL,
                   NULL);
       memset( chr_l_buf, NULL, BUFFER_LEN );
       sprintf(    chr_l_buf,
                   "The FuncDesc is : %s\n",
                   p_dl_dealaudit_struct_h->h_processdetail);
       CO_ProcMonitor(   APL_OUT_FILE,
                   chr_l_buf,
                   NULL,
                   NULL);
       memset( chr_l_buf, NULL, BUFFER_LEN );
       sprintf(    chr_l_buf,
                   "The LogUser is : %s\n",
                   p_dl_dealaudit_struct_h->h_proc_usr);
       CO_ProcMonitor(   APL_OUT_FILE,
                   chr_l_buf,
                   NULL,
             NULL);
       memset( chr_l_buf, NULL, BUFFER_LEN );
       sprintf(    chr_l_buf,
                   "The SubFun is : %s\n",
                   p_dl_dealaudit_struct_h->h_subprocess);
       CO_ProcMonitor(   APL_OUT_FILE,
                   chr_l_buf,
                   NULL,
                   NULL);
       memset( chr_l_buf, NULL, BUFFER_LEN );
       sprintf(    chr_l_buf,
                   "The Failcode is : %s\n",
                   p_dl_dealaudit_struct_h->h_fail_cd);
       CO_ProcMonitor(   APL_OUT_FILE,
                   chr_l_buf,
                   NULL,
                   NULL);
       memset( chr_l_buf, NULL, BUFFER_LEN );
       sprintf(    chr_l_buf,
                   "The Quantity is : %f\n",
                   p_dl_dealaudit_struct_h->h_qty);
       CO_ProcMonitor(   APL_OUT_FILE,
                   chr_l_buf,
                   NULL,
                   NULL);
       memset( chr_l_buf, NULL, BUFFER_LEN );
       sprintf(    chr_l_buf,
                   "The TrdFromOrd is : %s\n",
                   p_dl_dealaudit_struct_h->h_dlfromord);
       CO_ProcMonitor(   APL_OUT_FILE,
                   chr_l_buf,
                   NULL,
                   NULL);
 sprintf(    chr_l_buf,
                   "The logdt is : %s\n",
                   p_dl_dealaudit_struct_h->h_logdate);
       CO_ProcMonitor(   APL_OUT_FILE,
                   chr_l_buf,
                   NULL,
                   NULL);
 
    }
  
 
    l_dl_dealaudit_struct_i = (DL_DEALAUDIT_STRUCT_I *)calloc(1,sizeof(DL_DEALAUDIT_STRUCT_I));
    APL_MALLOC_FAIL(l_dl_dealaudit_struct_i);
 
 
    
	 /*
    if (!strlen(p_dl_dealaudit_struct_h->h_dl_client))
    {
       APL_DATA_MISSING("Account", APL_NULL_STRING, APL_NULL_STRING);
       int_l_error_flag = APL_FAILURE;
    }
 
    if (!strlen(p_dl_dealaudit_struct_h->h_indentity_no))
    {
       APL_DATA_MISSING("Reference No.", APL_NULL_STRING, APL_NULL_STRING);
       int_l_error_flag = APL_FAILURE;
    }
 
    if (!strlen(p_dl_dealaudit_struct_h->h_processdetail))
    {
       APL_DATA_MISSING("Function", APL_NULL_STRING, APL_NULL_STRING);
       int_l_error_flag = APL_FAILURE;
    }
 
    if (!strlen(p_dl_dealaudit_struct_h->h_proc_usr))
    {
       APL_DATA_MISSING("Log User", APL_NULL_STRING, APL_NULL_STRING);
       int_l_error_flag = APL_FAILURE;
    }
 
    if (!strlen(p_dl_dealaudit_struct_h->h_trail_for))
    {
       APL_DATA_MISSING("Trail For", APL_NULL_STRING, APL_NULL_STRING);
       int_l_error_flag = APL_FAILURE;
    }
    
    if (!strlen(p_dl_dealaudit_struct_h->h_dlfromord))
    {
       APL_DATA_MISSING("TrdFromOrd", APL_NULL_STRING, APL_NULL_STRING);
       int_l_error_flag = APL_FAILURE;
    }
 
    if (!strlen(chr_l_filename))
    {
       APL_DATA_MISSING("Filename", APL_NULL_STRING, APL_NULL_STRING);
       int_l_error_flag = APL_FAILURE;
    }
	 
    if (APL_FAILURE == int_l_error_flag) APL_GOBACK_FAIL
 
    
 
    if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr)) APL_GOBACK_FAIL
 
    
 
 
    
 
    
 
    if ( !strlen(p_dl_dealaudit_struct_h->h_logdate) )
    {
       if( CO_RtvSysDtTime(p_dl_dealaudit_struct_h->h_logdate,l_debug_info_ptr) ==
                                                                   APL_FAILURE )
          APL_GOBACK_FAIL
    }
 
    
 
    l_dl_dealaudit_struct_i->i_dl_client = 0;
    l_dl_dealaudit_struct_i->i_indentity_no = 0;
    l_dl_dealaudit_struct_i->i_trail_for = 0;
    l_dl_dealaudit_struct_i->i_processdetail = 0;
    l_dl_dealaudit_struct_i->i_proc_usr = 0;
    l_dl_dealaudit_struct_i->i_logdate = 0;
    l_dl_dealaudit_struct_i->i_dlfromord = 0;
    l_dl_dealaudit_struct_i->i_subprocess = 0;
    l_dl_dealaudit_struct_i->i_failreas_cd = 0;
    l_dl_dealaudit_struct_i->i_qty = 0;
 
    l_dl_dealaudit_struct_i->i_subfailreas_cd = 0;
    if (!strlen(p_dl_dealaudit_struct_h->h_subprocess)) l_dl_dealaudit_struct_i->i_subprocess = -1;
    if (!strlen(p_dl_dealaudit_struct_h->h_fail_cd))
    {
       l_dl_dealaudit_struct_i->i_failreas_cd = -1;
       l_dl_dealaudit_struct_i->i_subfailreas_cd = -1;
    }
 
 
    if(!strcmp(p_dl_dealaudit_struct_h->h_trail_for,"O"))
    {
          CR_Rtv_OrdChrVal(p_dl_dealaudit_struct_h->h_dl_client,p_dl_dealaudit_struct_h->h_indentity_no,"instr_code",chr_l_instrcode,l_debug_info_ptr);
    }
    
	 else if(!strcmp(p_dl_dealaudit_struct_h->h_trail_for,"T"))
    {
          DL_Rtv_TrdChrVal(p_dl_dealaudit_struct_h->h_dl_client,p_dl_dealaudit_struct_h->h_indentity_no,"instr_code",chr_l_instrcode,l_debug_info_ptr);
    }
    
  	
    CR_Proc_SecQtyRound(p_dl_dealaudit_struct_h->h_qty,chr_l_instrcode,&l_quantity,l_debug_info_ptr);
 
    p_dl_dealaudit_struct_h->h_qty = l_quantity;
 		
   
    
    strcpy(chr_l_dir_alias,"INTL_MSINC_ARC_PATH"); 
    
    APL_IF_DEBUG
    {
 		printf("\n\nthe valu of l_dir is |%s|",chr_l_dir_alias);
 		printf("\nthe chr_value of chr_l_filename |%s|", chr_l_filename);
    }
    
 
    EXEC SQL INSERT INTO DL_DEALAUDIT VALUES (:p_dl_dealaudit_struct_h:l_dl_dealaudit_struct_i,:chr_l_filename,bfilename(:chr_l_dir_alias,:chr_l_filename));
    printf("sqlca code %d\n",sqlca.sqlcode);
	 IS_ANY_ORA_ERROR;
 
    
 
    APL_GOBACK_SUCCESS
 
    RETURN_SUCCESS :
       APL_IF_DEBUG
       {
          CO_ProcMonitor(   APL_OUT_FILE,
                      "Leaving Function CDBUpdAudTrlFn1 with success\n",
                      NULL,
                      NULL);
       }
       return(APL_SUCCESS);
 
    RETURN_FAILURE :
      APL_IF_DEBUG
       {
          CO_ProcMonitor(   APL_OUT_FILE,
                      "Leaving Function CDBUpdAudTrlFn1 with errors\n",
                      NULL,
                      NULL);
        }
       return(APL_FAILURE);
 } */

 
 /* int GDbInsCMSGREPAIR(CMSGREPAIR_STRUCT_H * p_cmsgrepair, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
 
       EXEC SQL BEGIN DECLARE SECTION;
       CMSGREPAIR_STRUCT_H    h_cmsgrepair;
       CMSGREPAIR_STRUCT_I    i_cmsgrepair;
 
       EXEC SQL VAR h_cmsgrepair.h_dl_client IS STRING;
       EXEC SQL VAR h_cmsgrepair.h_indentity_no IS STRING;
       
       EXEC SQL VAR h_cmsgrepair.h_msg_no IS STRING;
       EXEC SQL VAR h_cmsgrepair.h_msgfunc_code IS STRING;
       EXEC SQL VAR h_cmsgrepair.h_param_str IS STRING;
 	    EXEC SQL VAR  h_cmsgrepair.h_param_str IS STRING;
       struct sqlca sqlca;
 
       EXEC SQL END DECLARE SECTION;
 
       # ifdef APL_THREADS
       APL_SET_CONTEXT
       EXEC SQL CONTEXT USE :my_ctx_local;
       #endif
       sqlca.sqlcode=0;
 
       memset(&h_cmsgrepair,NULL,sizeof(CMSGREPAIR_STRUCT_H));
       memset(&i_cmsgrepair,NULL,sizeof(CMSGREPAIR_STRUCT_I));
 
 
       
       if( !strlen(p_cmsgrepair->h_msg_no ))
                APL_DATA_MISSING("MESSAGE NO",APL_NULL_STRING,APL_NULL_STRING)
       	
       if( !strlen(p_cmsgrepair->h_dl_client ) )
               APL_DATA_MISSING("CLIENT",APL_NULL_STRING,APL_NULL_STRING)
 
       if( !strlen(p_cmsgrepair->h_indentity_no )  )
               APL_DATA_MISSING("IDENTIY_NO",APL_NULL_STRING,APL_NULL_STRING)
 
 
       if( !strlen(p_cmsgrepair->h_msgfunc_code )  )
               APL_DATA_MISSING("FUNC CODE",APL_NULL_STRING,APL_NULL_STRING)
 
       if( !strlen(p_cmsgrepair->chr_h_param_str )  )
               APL_DATA_MISSING("TRD_CA",APL_NULL_STRING,APL_NULL_STRING)
 
       if( !strlen(p_cmsgrepair->h_deal_status )  )
               APL_DATA_MISSING("DEAL_STAT",APL_NULL_STRING,APL_NULL_STRING)
 
       if( !(p_cmsgrepair->h_sequence_num )  )
               APL_DATA_MISSING("SEQNUM",APL_NULL_STRING,APL_NULL_STRING)
 
 
       if (strlen(p_cmsgrepair->h_dl_client))
          strcpy(h_cmsgrepair.h_dl_client,p_cmsgrepair->h_dl_client);
       else
          i_cmsgrepair.i_account = -1;
 
 	APL_IF_DEBUG
 		{
 		printf("\n\n\n\n\n\nn\nn in c_dbInsTables acount = %s \n    %s  \n\n\n\n\n\nn\n",h_cmsgrepair.h_dl_client, p_cmsgrepair->h_dl_client);
 	   }
       if (strlen(p_cmsgrepair->h_indentity_no))
 	   {
          EXEC SQL SELECT UPPER(:p_cmsgrepair->h_indentity_no) INTO :h_cmsgrepair.h_indentity_no FROM DUAL;
          IS_ANY_ORA_ERROR
          strcpy(h_cmsgrepair.h_indentity_no,p_cmsgrepair->h_indentity_no);
 	   }
       else
          i_cmsgrepair.i_ref_no = -1;
 
 
       if (strlen(p_cmsgrepair->h_msg_no))
          strcpy(h_cmsgrepair.h_msg_no,p_cmsgrepair->h_msg_no);
       else
          i_cmsgrepair.i_swift_msg_no = -1;
 
       if (strlen(p_cmsgrepair->h_msgfunc_code))
          strcpy(h_cmsgrepair.h_msgfunc_code,p_cmsgrepair->h_msgfunc_code);
       else
          i_cmsgrepair.i_msgfunc_code = -1;
 
		  
       if (strlen(p_cmsgrepair->chr_h_param_str))
          strcpy(h_cmsgrepair.h_param_str,p_cmsgrepair->chr_h_param_str);
       else
          i_cmsgrepair.i_proc_data = -1;
 		 
       if (strlen(p_cmsgrepair->h_deal_status))
          strcpy(h_cmsgrepair.h_deal_status,p_cmsgrepair->h_deal_status);
       else
          i_cmsgrepair.i_deal_status = -1;
       
       if (p_cmsgrepair->h_sequence_num)
          h_cmsgrepair.h_sequence_num=p_cmsgrepair->h_sequence_num;
       else
          i_cmsgrepair.i_sequence_num = -1;
 
       EXEC SQL INSERT INTO CMSGREPAIR VALUES (:h_cmsgrepair:i_cmsgrepair);
       IS_ANY_ORA_ERROR
 
       APL_GOBACK_SUCCESS
 
 
 RETURN_SUCCESS:
 
       APL_IF_DEBUG
       {
               CO_ProcMonitor(APL_OUT_FILE,"Exiting successfully out of GDbInsCMSGREPAIR\n",NULL,NULL);
       }
       return APL_SUCCESS;
 
 RETURN_FAILURE:
 
       APL_IF_DEBUG
       {
               CO_ProcMonitor(APL_OUT_FILE,"Exiting unsuccessfully out of GDbInsCMSGREPAIR\n",NULL,NULL);
       }
       return APL_FAILURE;
 
 }  
*/
 
 int GDbInsDF_COMMON_MSGRPT(DF_COMMON_MSGRPT_STRUCT_H *p_common_msgrpt, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
 
       DF_COMMON_MSGRPT_STRUCT_I    i_common_msgrpt={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
       EXEC SQL BEGIN DECLARE SECTION;
       DF_COMMON_MSGRPT_STRUCT_H    h_common_msgrpt;
 
       EXEC SQL VAR h_common_msgrpt.h_account IS STRING;
       EXEC SQL VAR h_common_msgrpt.h_ref_no IS STRING;
       EXEC SQL VAR h_common_msgrpt.h_secode IS STRING;
       EXEC SQL VAR h_common_msgrpt.h_msg_func IS STRING;
       EXEC SQL VAR h_common_msgrpt.h_received_on IS STRING;
       EXEC SQL VAR h_common_msgrpt.h_mis_info IS STRING;
       EXEC SQL VAR h_common_msgrpt.h_file_name IS STRING;
       EXEC SQL VAR h_common_msgrpt.h_failure_reason IS STRING;
       EXEC SQL VAR h_common_msgrpt.h_rep_flg IS STRING;
       EXEC SQL VAR h_common_msgrpt.h_msgsts IS STRING;
       EXEC SQL VAR h_common_msgrpt.h_rec_from_sent_to IS STRING;
       EXEC SQL VAR h_common_msgrpt.h_msg_refno IS STRING;
       EXEC SQL VAR h_common_msgrpt.h_in_out IS STRING;
       EXEC SQL VAR h_common_msgrpt.h_event_type IS STRING;
       EXEC SQL VAR h_common_msgrpt.h_trd_ca IS STRING;
 	   EXEC SQL VAR h_common_msgrpt.h_ca_id IS STRING;	
		/*ISKB_8750 Memory Corruption - Sqlcode 2109 observed while Insert into DF_COMMON_MSGRPT - Changes by Mrinal - Starts*/
		EXEC SQL VAR h_common_msgrpt.h_msg_no IS STRING;
		/*ISKB_8750 Memory Corruption - Sqlcode 2109 observed while Insert into DF_COMMON_MSGRPT - Changes by Mrinal - Ends*/
       struct sqlca sqlca;
 
       EXEC SQL END DECLARE SECTION;
 	   
 
       # ifdef APL_THREADS
       APL_SET_CONTEXT
       EXEC SQL CONTEXT USE :my_ctx_local;
       #endif
       sqlca.sqlcode=0;
 
       memset(&h_common_msgrpt,NULL,sizeof(DF_COMMON_MSGRPT_STRUCT_H));
       memset(&i_common_msgrpt,NULL,sizeof(DF_COMMON_MSGRPT_STRUCT_I));
 
       printf("entered in dfcommonreport\n");
 		printf("%s-%s-%s-%s-%s-%s-%s",p_common_msgrpt->h_msg_no,p_common_msgrpt->h_failure_reason,p_common_msgrpt->h_rep_flg,p_common_msgrpt->h_msgsts,p_common_msgrpt->h_msg_refno,p_common_msgrpt->h_in_out,p_common_msgrpt->h_received_on);
 		if( !strlen(p_common_msgrpt->h_msg_no ))
                APL_DATA_MISSING("MESSAGE NO",APL_NULL_STRING,APL_NULL_STRING)
       if( !strlen(p_common_msgrpt->h_failure_reason )  )
                APL_DATA_MISSING("FAILURE REASON",APL_NULL_STRING,APL_NULL_STRING)
 
       if( !strlen(p_common_msgrpt->h_rep_flg ) )
               APL_DATA_MISSING("REP FLAG",APL_NULL_STRING,APL_NULL_STRING)
 
       if( !strlen(p_common_msgrpt->h_msgsts )  )
               APL_DATA_MISSING("MESSAGE STATUS",APL_NULL_STRING,APL_NULL_STRING)
       else
 	           strcpy(h_common_msgrpt.h_msgsts,p_common_msgrpt->h_msgsts);
 
 
       if( !strlen(p_common_msgrpt->h_msg_refno )  )
               APL_DATA_MISSING("MESSAGE REFNO",APL_NULL_STRING,APL_NULL_STRING)
 
       if( !strlen(p_common_msgrpt->h_in_out )  )
               APL_DATA_MISSING("MSG_IN_OUT_IND",APL_NULL_STRING,APL_NULL_STRING)
 
 
       if( !strlen(p_common_msgrpt->h_received_on )  )
               APL_DATA_MISSING("RECEIVED ON",APL_NULL_STRING,APL_NULL_STRING)
       else
 	           strcpy(h_common_msgrpt.h_received_on,p_common_msgrpt->h_received_on);
 
 
 
       if (strlen(p_common_msgrpt->h_account))
          strcpy(h_common_msgrpt.h_account,p_common_msgrpt->h_account);
       else
          i_common_msgrpt.i_account = -1;
 
       if (strlen(p_common_msgrpt->h_ref_no))
       {
 	      EXEC SQL SELECT UPPER(:p_common_msgrpt->h_ref_no) INTO :h_common_msgrpt.h_ref_no FROM DUAL;
          IS_ANY_ORA_ERROR
          strcpy(h_common_msgrpt.h_ref_no,p_common_msgrpt->h_ref_no);
      	}
       else
          i_common_msgrpt.i_ref_no = -1;
 
       if (strlen(p_common_msgrpt->h_secode))
          strcpy(h_common_msgrpt.h_secode,p_common_msgrpt->h_secode);
       else
          i_common_msgrpt.i_secode= -1;
 
       if (strlen(p_common_msgrpt->h_msg_no))
          strcpy(h_common_msgrpt.h_msg_no,p_common_msgrpt->h_msg_no);
       else
          i_common_msgrpt.i_msg_no = -1;
 	
       if (strlen(p_common_msgrpt->h_msg_func))
          strcpy(h_common_msgrpt.h_msg_func,p_common_msgrpt->h_msg_func);
       else
          i_common_msgrpt.i_msg_func = -1;
 
 
       if (strlen(p_common_msgrpt->h_mis_info))
          strcpy(h_common_msgrpt.h_mis_info,p_common_msgrpt->h_mis_info);
       else
          i_common_msgrpt.i_mis_info = -1;
 
       if (strlen(p_common_msgrpt->h_file_name))
          strcpy(h_common_msgrpt.h_file_name,p_common_msgrpt->h_file_name);
       else
         i_common_msgrpt.i_file_name = -1;
       
       if ( strlen(p_common_msgrpt->h_failure_reason) )
          strcpy(h_common_msgrpt.h_failure_reason,p_common_msgrpt->h_failure_reason);
       else
          i_common_msgrpt.i_failure_reason = -1;
 
 
       if ( strlen(p_common_msgrpt->h_rep_flg) )
          strcpy(h_common_msgrpt.h_rep_flg,p_common_msgrpt->h_rep_flg);
       else
          i_common_msgrpt.i_rep_flg = -1;
 
 
       if ( strlen(p_common_msgrpt->h_rec_from_sent_to) )
          strcpy(h_common_msgrpt.h_rec_from_sent_to,p_common_msgrpt->h_rec_from_sent_to);
       else
          i_common_msgrpt.i_rec_from_sent_to = -1;
 
       if ( strlen(p_common_msgrpt->h_msg_refno) )
          strcpy(h_common_msgrpt.h_msg_refno,p_common_msgrpt->h_msg_refno);
       else
          i_common_msgrpt.i_msg_refno = -1;
 
       if ( strlen(p_common_msgrpt->h_in_out) )
          strcpy(h_common_msgrpt.h_in_out,p_common_msgrpt->h_in_out);
       else
          i_common_msgrpt.i_in_out = -1;
 
       if ( strlen(p_common_msgrpt->h_trd_ca) )
          strcpy(h_common_msgrpt.h_trd_ca,p_common_msgrpt->h_trd_ca);
       else
          i_common_msgrpt.i_trd_ca = -1;
 
 
       if ( strlen(p_common_msgrpt->h_event_type) )
          strcpy(h_common_msgrpt.h_event_type,p_common_msgrpt->h_event_type);
       else
          i_common_msgrpt.i_event_type = -1;
 
       if ( strlen(p_common_msgrpt->h_ca_id) )
          strcpy(h_common_msgrpt.h_ca_id,p_common_msgrpt->h_ca_id);
       else
          i_common_msgrpt.i_ca_id = -1;
 		APL_IF_DEBUG
 		{
 			printf(" h_common_msgrpt.h_account = |%s| \n",h_common_msgrpt.h_account);
 			printf(" h_common_msgrpt.h_indentity_no = |%s| \n",h_common_msgrpt.h_ref_no);
 			printf(" h_common_msgrpt.h_securitycd = |%s| \n",h_common_msgrpt.h_secode);
 			printf(" h_common_msgrpt.h_msg_no	 = |%s| \n",h_common_msgrpt.h_msg_no);
 			printf(" h_common_msgrpt.h_msg_func = |%s| \n",h_common_msgrpt.h_msg_func);
 			printf(" h_common_msgrpt.h_mis_info = |%s| \n",h_common_msgrpt.h_mis_info);
 			printf(" h_common_msgrpt.h_file_name = |%s| \n",h_common_msgrpt.h_file_name);
 			printf(" h_common_msgrpt.h_failure_reason = |%s| \n",h_common_msgrpt.h_failure_reason);
 			printf(" h_common_msgrpt.h_rep_flg = |%s| \n",h_common_msgrpt.h_rep_flg);
 			printf(" h_common_msgrpt.h_rec_from_sent_to = |%s| \n",h_common_msgrpt.h_rec_from_sent_to);
 			printf(" h_common_msgrpt.h_msg_refno = |%s| \n",h_common_msgrpt.h_msg_refno);
 			printf(" h_common_msgrpt.h_in_out = |%s| \n",h_common_msgrpt.h_in_out);
 			printf(" h_common_msgrpt.h_trd_ca = |%s| \n",h_common_msgrpt.h_trd_ca);
 			printf(" h_common_msgrpt.h_event_type = |%s| \n",h_common_msgrpt.h_event_type);
 			printf(" h_common_msgrpt.h_ca_id = |%s| \n",h_common_msgrpt.h_ca_id);
 		}
       EXEC SQL INSERT INTO DF_COMMON_MSGRPT VALUES (:h_common_msgrpt:i_common_msgrpt);
		/*ISKB_8750 Memory Corruption - Sqlcode 2109 observed while Insert into DF_COMMON_MSGRPT - Changes by Mrinal - Starts*/
		printf("Sqlcode is |%d|",sqlca.sqlcode);
		/*ISKB_8750 Memory Corruption - Sqlcode 2109 observed while Insert into DF_COMMON_MSGRPT - Changes by Mrinal - Ends*/
       IS_ANY_ORA_ERROR
       APL_GOBACK_SUCCESS
 
 
 RETURN_SUCCESS:
 
       APL_IF_DEBUG
       {
               CO_ProcMonitor(APL_OUT_FILE,"Exiting successfully out of GDbInsCOMMON_MSGRPT\n",NULL,NULL);
       }
       return APL_SUCCESS;
 RETURN_FAILURE:
      
       APL_IF_DEBUG
       {
               CO_ProcMonitor(APL_OUT_FILE,"Exiting unsuccessfully out of GDbInsCOMMON_MSGRPT\n",NULL,NULL);
       }
       return APL_FAILURE;
 }        
/*
int DL_RepairInsDb(DL_DEALREPAIR_STRUCT_H *p_dl_dealrepair_struct_h, INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	DL_DEALREPAIR_STRUCT_I *l_dl_dealrepair_struct_i;
	char chr_sys_access_stamp[APL_DATE_LEN]=APL_NULL_STRING;
	int int_error_flag = APL_SUCCESS;
#ifdef APL_THREADS
	APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
#endif
	l_dl_dealrepair_struct_i= (DL_DEALREPAIR_STRUCT_I *)calloc(1,sizeof(DL_DEALREPAIR_STRUCT_I));
	APL_MALLOC_FAIL(l_dl_dealrepair_struct_i)

		if(CO_RtvSysDtTime(chr_sys_access_stamp,l_debug_info_ptr) !=APL_SUCCESS)
		{
			APL_GOBACK_FAIL
		}

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Entered Function CR_Chk_ReapireAtDL_DEAL\n",
					NULL,NULL);
		}

	strcpy(p_dl_dealrepair_struct_h->h_deal_stat,"RP");
	l_dl_dealrepair_struct_i->i_deal_stat =0;
	strcpy(p_dl_dealrepair_struct_h->h_maker,p_intl_envdatastruct_h->usr);
	l_dl_dealrepair_struct_i->i_maker=0;
	strcpy(p_dl_dealrepair_struct_h->h_maker_dt,chr_sys_access_stamp);
	l_dl_dealrepair_struct_i->i_maker_dt=0;
	strcpy(p_dl_dealrepair_struct_h->h_access_stamp,chr_sys_access_stamp);
	l_dl_dealrepair_struct_i->i_access_stamp =0;
	printf("now here\n");
	

	printf("\n the values h_client|%s|\n",p_dl_dealrepair_struct_h-> h_client);
printf("\n the values h_identiy_no|%s|\n",p_dl_dealrepair_struct_h-> h_identiy_no);
printf("\n the values h_deal_cd |%s|\n",p_dl_dealrepair_struct_h-> h_deal_cd);
printf("\n the values h_deal_date |%s|\n",p_dl_dealrepair_struct_h-> h_deal_date);
printf("\n the values h_setl_date|%s|\n",p_dl_dealrepair_struct_h-> h_setl_date);
printf("\n the values h_qty|%lf|\n",p_dl_dealrepair_struct_h-> h_qty);
printf("\n the values h_instr_code|%s|\n",p_dl_dealrepair_struct_h-> h_instr_code);
printf("\n the values h_currency_cd|%s|\n",p_dl_dealrepair_struct_h-> h_currency_cd);
printf("\n the values h_domestic_cpclt|%s|\n",p_dl_dealrepair_struct_h-> h_domestic_cpclt);
printf("\n the values h_dl_class|%s|\n",p_dl_dealrepair_struct_h-> h_dl_class);
printf("\n the values h_cost|%lf|\n",p_dl_dealrepair_struct_h-> h_cost);
printf("\n the values h_ex_arena|%s|\n",p_dl_dealrepair_struct_h-> h_ex_arena);
printf("\n the values h_spottrd_ind|%s|\n",p_dl_dealrepair_struct_h-> h_spottrd_ind);
printf("\n the values h_entry|%s|\n",p_dl_dealrepair_struct_h-> h_entry);
printf("\n the values h_dateof_input|%s|\n",p_dl_dealrepair_struct_h-> h_dateof_input);
printf("\n the values h_maker|%s|\n",p_dl_dealrepair_struct_h-> h_maker);
printf("\n the values h_maker_dt|%s|\n",p_dl_dealrepair_struct_h-> h_maker_dt);
printf("\n the values h_deal_stat|%s|\n",p_dl_dealrepair_struct_h-> h_deal_stat);
printf("\n the values h_access_stamp|%s|\n",p_dl_dealrepair_struct_h-> h_access_stamp);
printf("\n the values h_amount|%lf|\n",p_dl_dealrepair_struct_h-> h_amount);
printf("\n the values h_domcp_custodyclt|%s|\n",p_dl_dealrepair_struct_h-> h_domcp_custodyclt);
printf("\n the values h_cp_clt|%s|\n",p_dl_dealrepair_struct_h-> h_cp_clt);
printf("\n the values h_cp_cltname|%s|\n",p_dl_dealrepair_struct_h-> h_cp_cltname);
printf("\n the values h_clientof|%s|\n",p_dl_dealrepair_struct_h-> h_clientof);
printf("\n the values h_info1|%s|\n",p_dl_dealrepair_struct_h-> h_info1);
printf("\n the values h_fx_reqd|%s|\n",p_dl_dealrepair_struct_h-> h_fx_reqd);
printf("\n the values h_custodycomm|%lf|\n",p_dl_dealrepair_struct_h-> h_custodycomm);
printf("\n the values  h_brokercomm|%lf|\n",p_dl_dealrepair_struct_h-> h_brokercomm);
printf("\n the values h_stx_comm|%lf|\n",p_dl_dealrepair_struct_h-> h_stx_comm);
printf("\n the values h_oth_comm|%lf|\n",p_dl_dealrepair_struct_h-> h_oth_comm);
printf("\n the values _location_cd|%s|\n",p_dl_dealrepair_struct_h-> h_location_cd);
printf("\n the values h_status_pos|%s|\n",p_dl_dealrepair_struct_h-> h_status_pos);
printf("\n the values h_instr_name|%s|\n",p_dl_dealrepair_struct_h-> h_instr_name);
printf("\n the values h_clt_name|%s|\n",p_dl_dealrepair_struct_h-> h_clt_name);
printf("\n the values h_domesticcp_name|%s|\n",p_dl_dealrepair_struct_h-> h_domesticcp_name);
printf("\n the values h_brk_no|%s|\n",p_dl_dealrepair_struct_h-> h_brk_no);
printf("\n the values h_gl_client|%s|\n",p_dl_dealrepair_struct_h-> h_gl_client);
printf("\n the values h_partial_ind_a|%s|\n",p_dl_dealrepair_struct_h-> h_partial_ind_a);
printf("\n the values h_instruct_person|%s|\n",p_dl_dealrepair_struct_h-> h_instruct_person);
printf("\n the values h_clientof_cd|%s|\n",p_dl_dealrepair_struct_h-> h_clientof_cd);
printf("\n the values h_inter_med_person|%s|\n",p_dl_dealrepair_struct_h-> h_inter_med_person);
printf("\n the values h_inter_med_personnm|%s|\n",p_dl_dealrepair_struct_h-> h_inter_med_personnm);
printf("\n the values h_fxccy|%s|\n",p_dl_dealrepair_struct_h-> h_fxccy);
printf("\n the values h_lcl_identno|%s|\n",p_dl_dealrepair_struct_h-> h_lcl_identno);
printf("\n the values h_uniq_ident_no|%s|\n",p_dl_dealrepair_struct_h-> h_uniq_ident_no);
printf("\n the values h_related_ident_no|%s|\n",p_dl_dealrepair_struct_h-> h_related_ident_no);
printf("\n the values h_del_rec_date|%s|\n",p_dl_dealrepair_struct_h-> h_del_rec_date);

	EXEC SQL INSERT INTO DL_DEALREPAIR VALUES (:p_dl_dealrepair_struct_h:l_dl_dealrepair_struct_i);

	printf("\n sqlca.sqlcode is |%d| \n",sqlca.sqlcode);
printf("\n 667 \n");

	IS_ANY_ORA_ERROR_AND_DUPLICATE(MAP_DET_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

		if (int_error_flag == APL_FAILURE)
		{
			APL_GOBACK_FAIL
		}
	APL_GOBACK_SUCCESS

		RETURN_SUCCESS :
		{
			APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
				free(l_dl_dealrepair_struct_i);
			return(APL_SUCCESS);
		}
RETURN_FAILURE :
	{
		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
			free(l_dl_dealrepair_struct_i);
		return(APL_FAILURE);
	}

}
*/			 
				 

 
 
 
 
