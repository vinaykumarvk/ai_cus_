/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
*/
/*********************************************************************
 *
 * Module Name         :      Master Maintenance
 *
 * File Name           :      MT_REG_RPT.pc
 *
 * Description         :      This file contains db functions for updating
 *                            Master Details.
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author         Description       RFS No.
 * ---------   --------  ------------     -------------     ---------
 * 26/12/2006   1.0       Harvinder        New file       MT_REG_RPT
 *
 *********************************************************************/


#include "CO_HostStructdef.h"


EXEC SQL INCLUDE SQLCA.H;




int MT_ModDb_REG_RPT(MT_REG_RPT_STRUCT_H *p_mt_reg_rpt_struct_h,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr) 
{
	/* Variable Declarations */
  MT_REG_RPT_STRUCT_I *l_mt_reg_rpt_struct_i;

  struct sqlca sqlca;

  char chr_acc_stamp_compare[APL_DATE_LEN] = APL_NULL_STRING;
  char chr_status_compare[APL_STATUS_LEN] = APL_NULL_STRING;
  char chr_sys_access_stamp[APL_DATE_LEN] = APL_NULL_STRING;
  short p_i_maker, p_i_makerdt, p_i_checker, p_i_checkerdt, p_i_access_stamp;
  short p_i_access_stamp_compare;
  short p_i_status = 0;
  int int_error_flag = APL_SUCCESS;
  int int_l_rowexists = 0;
  char  *l_key_codes[3];
  char  *l_key_values[3];
  char  chr_l_table_name[50] = APL_NULL_STRING;
  char  chr_l_field_val[40] = APL_NULL_STRING;
  char chr_l_buf[8] = APL_NULL_STRING;

	char chr_l_maker[16] = APL_NULL_STRING; 
	int int_retval_mkrchkr  = APL_SUCCESS;

int	int_retval = APL_SUCCESS;
#ifdef APL_THREADS
    APL_SET_CONTEXT
    EXEC SQL CONTEXT USE :my_ctx_local;
#endif

	 APL_FUNCTION_ENTER(APL_OUT_FILE)

  l_mt_reg_rpt_struct_i=(MT_REG_RPT_STRUCT_I*)calloc(1,sizeof(MT_REG_RPT_STRUCT_I));

  APL_MALLOC_FAIL(l_mt_reg_rpt_struct_i)

  p_i_maker =0;
  p_i_makerdt =0;
  p_i_checker =0;
  p_i_checkerdt =0;
  p_i_access_stamp =0;
  p_i_access_stamp_compare =0;

if (!strlen(p_mt_reg_rpt_struct_h->h_rpt_type)) l_mt_reg_rpt_struct_i->i_rpt_type=-1;
     else l_mt_reg_rpt_struct_i->i_rpt_type=0;

if (!strlen(p_mt_reg_rpt_struct_h->h_blk_ind)) l_mt_reg_rpt_struct_i->i_blk_ind=-1;
           else l_mt_reg_rpt_struct_i->i_blk_ind=0;

if (!strlen(p_mt_reg_rpt_struct_h->h_inst_sub_type)) l_mt_reg_rpt_struct_i->i_inst_sub_type =-1;
           else l_mt_reg_rpt_struct_i->i_inst_sub_type=0;

if (!strlen(p_mt_reg_rpt_struct_h->h_inst_blk_flg)) l_mt_reg_rpt_struct_i->i_inst_blk_flg=-1;
           else l_mt_reg_rpt_struct_i->i_inst_blk_flg=0;

if (!strlen(p_mt_reg_rpt_struct_h->h_pty_cd)) l_mt_reg_rpt_struct_i->i_pty_cd=-1;
           else l_mt_reg_rpt_struct_i->i_pty_cd=0;

if (!strlen(p_mt_reg_rpt_struct_h->h_pty_blk_flg)) l_mt_reg_rpt_struct_i->i_pty_blk_flg=-1;
           else l_mt_reg_rpt_struct_i->i_pty_blk_flg=0;

/* if (p_mt_reg_rpt_struct_h->h_rpt_seq_num != 0) l_mt_reg_rpt_struct_i->i_rpt_seq_num=-1;
           else l_mt_reg_rpt_struct_i->i_rpt_seq_num=0;   */

 if (!strlen(p_mt_reg_rpt_struct_h->h_maker)) l_mt_reg_rpt_struct_i->i_maker=-1;
           else l_mt_reg_rpt_struct_i->i_maker=0;

if (!strlen(p_mt_reg_rpt_struct_h->h_maker_dt)) l_mt_reg_rpt_struct_i->i_maker_dt=-1;
          else l_mt_reg_rpt_struct_i->i_maker_dt=0;

if (!strlen(p_mt_reg_rpt_struct_h->h_checker)) l_mt_reg_rpt_struct_i->i_checker=-1;
           else l_mt_reg_rpt_struct_i->i_checker=0;

if (!strlen(p_mt_reg_rpt_struct_h->h_checker_dt)) l_mt_reg_rpt_struct_i->i_checker_dt=-1;
           else l_mt_reg_rpt_struct_i->i_checker_dt=0;

if (!strlen(p_mt_reg_rpt_struct_h->h_access_stamp)) l_mt_reg_rpt_struct_i->i_access_stamp=-1;
           else l_mt_reg_rpt_struct_i->i_access_stamp=0;

if (!strlen(p_mt_reg_rpt_struct_h->h_status)) l_mt_reg_rpt_struct_i->i_status=-1;
           else l_mt_reg_rpt_struct_i->i_status=0;        



 if(CO_RtvSysDtTime(chr_sys_access_stamp,l_debug_info_ptr) !=APL_SUCCESS)
	{
		APL_GOBACK_FAIL
	}


 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_INPUT))
 {

		APL_IF_DEBUG
		{
				  CO_ProcMonitor(APL_OUT_FILE, "Entered Input of Function MT_ModDb_REG_RPT\n",NULL,p_intl_envdatastruct_h);
		}
		
			
		strcpy(p_mt_reg_rpt_struct_h->h_status,STATUS_UAUTH);
		l_mt_reg_rpt_struct_i->i_status =0;
   		strcpy(p_mt_reg_rpt_struct_h->h_maker,p_intl_envdatastruct_h->usr);
		l_mt_reg_rpt_struct_i->i_maker=0;
  		strcpy(p_mt_reg_rpt_struct_h->h_maker_dt,chr_sys_access_stamp);
		l_mt_reg_rpt_struct_i->i_maker_dt=0;
		strcpy(p_mt_reg_rpt_struct_h->h_access_stamp,chr_sys_access_stamp);
		l_mt_reg_rpt_struct_i->i_access_stamp =0;


		/* 
		To generate sequence Number
		EXEC SQL SELECT MAX(RPT_SEQ_NUM) INTO :p_mt_reg_rpt_struct_h->h_rpt_seq_num FROM MT_REG_RPT ;
		p_mt_reg_rpt_struct_h->h_rpt_seq_num=p_mt_reg_rpt_struct_h->h_rpt_seq_num+1; 

		*/	


		printf("\n h_rpt_type ---> %s",p_mt_reg_rpt_struct_h->h_rpt_type);
		printf("\n h_blk_ind ---> %s",p_mt_reg_rpt_struct_h->h_blk_ind);
		printf("\n h_inst_sub_type ---> %s",p_mt_reg_rpt_struct_h->h_inst_sub_type);
		printf("\n h_inst_blk_flg ---> %s",p_mt_reg_rpt_struct_h->h_inst_blk_flg);
		printf("\n h_pty_cd ---> %s",p_mt_reg_rpt_struct_h->h_pty_cd);
		printf("\n h_pty_blk_flg ---> %s",p_mt_reg_rpt_struct_h->h_pty_blk_flg);
		printf("\n h_rpt_seq_num ---> %d",p_mt_reg_rpt_struct_h->h_rpt_seq_num);
		printf("\n h_maker ---> %s",p_mt_reg_rpt_struct_h->h_maker);
		printf("\n h_maker_dt ---> %s",p_mt_reg_rpt_struct_h->h_maker_dt);
		printf("\n h_checker ---> %s",p_mt_reg_rpt_struct_h->h_checker);
		printf("\n h_checker_dt ---> %s",p_mt_reg_rpt_struct_h->h_checker_dt);
		printf("\n h_access_stamp ---> %s",p_mt_reg_rpt_struct_h->h_access_stamp);
		printf("\n h_status ---> %s",p_mt_reg_rpt_struct_h->h_status);

		EXEC SQL INSERT INTO MT_REG_RPT VALUES (:p_mt_reg_rpt_struct_h:l_mt_reg_rpt_struct_i);
	
		IS_ANY_ORA_ERROR_AND_DUPLICATE(MAP_DET_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
	}
	else
	{

	// For converting int to char	
	sprintf(chr_l_buf, "%d", p_mt_reg_rpt_struct_h -> h_rpt_seq_num);


	l_key_codes[0]="RPT_TYPE";
	l_key_codes[1]="RPT_SEQ_NUM";
	l_key_codes[2]=APL_NULL_STRING;
	
	l_key_values[0]=p_mt_reg_rpt_struct_h -> h_rpt_type;
	l_key_values[1]=chr_l_buf;
	l_key_values[2] = APL_NULL_STRING;


	strcpy(chr_l_table_name,"MT_REG_RPT");

    int_retval = CR_Rtv_MastChldChrVal( l_key_codes,
                                        l_key_values,
                                        chr_l_table_name,
                                        "ACCESS_STAMP",
                                        chr_l_field_val,
                                        l_debug_info_ptr);   

	if (int_retval != APL_SUCCESS)
         APL_GOBACK_FAIL

	strcpy(chr_acc_stamp_compare,chr_l_field_val);
    

		 int_retval = CR_Rtv_MastChldChrVal( l_key_codes,
                                        l_key_values,
                                        chr_l_table_name,
                                        "STATUS",
                                        chr_l_field_val,
                                        l_debug_info_ptr);  

    if (int_retval != APL_SUCCESS)
         APL_GOBACK_FAIL

		strcpy(chr_status_compare,chr_l_field_val);
	}

 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_MODIFY))
	{
  	p_i_checker =-1;
  	p_i_checkerdt =-1;
		strcpy(p_mt_reg_rpt_struct_h->h_checker,APL_NULL_STRING);
		strcpy(p_mt_reg_rpt_struct_h->h_checker_dt,APL_NULL_STRING);

		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered modify of Function MT_ModDBNoDlvDet\n", NULL,p_intl_envdatastruct_h);
 	}

	   if (!strcmp(p_mt_reg_rpt_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   {
			strcpy(p_mt_reg_rpt_struct_h->h_access_stamp,chr_sys_access_stamp);
			l_mt_reg_rpt_struct_i->i_access_stamp =0;
       strcpy(p_mt_reg_rpt_struct_h->h_status,STATUS_UAUTH);
			l_mt_reg_rpt_struct_i->i_status =0;

			EXEC SQL UPDATE MT_REG_RPT  SET 
            	MAKER =:p_intl_envdatastruct_h->usr:p_i_maker,
					MAKER_DT =:chr_sys_access_stamp:p_i_makerdt,
					CHECKER =:p_mt_reg_rpt_struct_h->h_checker:p_i_checker,
					CHECKER_DT =:p_mt_reg_rpt_struct_h->h_checker:p_i_checkerdt,
            	STATUS =:p_mt_reg_rpt_struct_h->h_status:l_mt_reg_rpt_struct_i->i_status,
					BLK_IND =:p_mt_reg_rpt_struct_h->h_blk_ind:l_mt_reg_rpt_struct_i-> i_blk_ind,
					INST_SUB_TYPE=:p_mt_reg_rpt_struct_h->h_inst_sub_type:l_mt_reg_rpt_struct_i-> i_inst_sub_type,
					INST_BLK_FLG=:p_mt_reg_rpt_struct_h->h_inst_blk_flg:l_mt_reg_rpt_struct_i-> i_inst_blk_flg,
					PTY_CD=:p_mt_reg_rpt_struct_h->h_pty_cd:l_mt_reg_rpt_struct_i-> i_pty_cd,
					PTY_BLK_FLG=:p_mt_reg_rpt_struct_h->h_pty_blk_flg:l_mt_reg_rpt_struct_i-> i_pty_blk_flg
				WHERE 
					RPT_TYPE =:p_mt_reg_rpt_struct_h->h_rpt_type AND 
					RPT_SEQ_NUM =:p_mt_reg_rpt_struct_h->h_rpt_seq_num ;
              
					IS_ANY_ORA_ERROR;	
	   }
		else 
	   {
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   } 
	}

 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_AUTHORISE))
	{

		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered authorize of Function MT_ModDBNoDlvDet\n",
													NULL,p_intl_envdatastruct_h);
 	}
	
		
		EXEC SQL SELECT MAKER INTO :chr_l_maker FROM MT_REG_RPT WHERE RPT_TYPE =:p_mt_reg_rpt_struct_h->h_rpt_type AND RPT_SEQ_NUM =:p_mt_reg_rpt_struct_h->h_rpt_seq_num ;

		printf(" *************************************** \n ");
		
		printf(" CHECKER    |%s| \n ", p_intl_envdatastruct_h->usr);
		
		printf(" RPT_TYPE  |%s| \n ", p_mt_reg_rpt_struct_h->h_rpt_type);
		printf(" RPT_SEQ_NUM  |%d| \n ", p_mt_reg_rpt_struct_h->h_rpt_seq_num);	

		printf(" chr_l_maker  |%s| \n ",chr_l_maker);	

		printf(" *************************************** \n ");


		if(strcmp(chr_l_maker,p_intl_envdatastruct_h->usr))
		{
		if (!strcmp(p_mt_reg_rpt_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   {
   		if(strcmp(p_mt_reg_rpt_struct_h->h_status,STATUS_DEL_UAUTH))
	    	{
	    		strcpy(p_mt_reg_rpt_struct_h->h_access_stamp,chr_sys_access_stamp);
	    		l_mt_reg_rpt_struct_i->i_access_stamp =0;
   	    	strcpy(p_mt_reg_rpt_struct_h->h_checker,p_intl_envdatastruct_h->usr);
	    		l_mt_reg_rpt_struct_i->i_checker=0;
  	    	strcpy(p_mt_reg_rpt_struct_h->h_checker_dt,chr_sys_access_stamp);
	    		l_mt_reg_rpt_struct_i->i_checker_dt=0;
          strcpy(p_mt_reg_rpt_struct_h->h_status,STATUS_AUTH);
	    		l_mt_reg_rpt_struct_i->i_status =0;

	    		EXEC SQL UPDATE MT_REG_RPT SET 
           	CHECKER =:p_intl_envdatastruct_h->usr:p_i_checker,
            	CHECKER_DT =:chr_sys_access_stamp:p_i_access_stamp,
					ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp,
            	STATUS =:p_mt_reg_rpt_struct_h->h_status:l_mt_reg_rpt_struct_i->i_status
				WHERE 
					RPT_TYPE =:p_mt_reg_rpt_struct_h->h_rpt_type AND 
					RPT_SEQ_NUM =:p_mt_reg_rpt_struct_h->h_rpt_seq_num ;

				IS_ANY_ORA_ERROR;	
			}
   	   else  
	    	{
	    		EXEC SQL DELETE FROM MT_REG_RPT 
				WHERE 
					RPT_TYPE =:p_mt_reg_rpt_struct_h->h_rpt_type AND 
					RPT_SEQ_NUM =:p_mt_reg_rpt_struct_h->h_rpt_seq_num ;
          
			   IS_ANY_ORA_ERROR
	    	}
	   }
		else 
	   {
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   }
		}
		else
		{


				int_retval_mkrchkr = CR_Chk_ChldMkrChkr( l_key_codes,
                                               l_key_values,
                                               chr_l_table_name,
                                               p_intl_envdatastruct_h->usr,
                                              l_debug_info_ptr);
    
              if (int_retval_mkrchkr !=APL_SUCCESS)
                   APL_GOBACK_FAIL

		}
	

		 
	}

   if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_RESET))
	{

		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered reset of Function MT_ModDBNoDlvDet\n",
													NULL,p_intl_envdatastruct_h);
 	}


		EXEC SQL SELECT MAKER INTO :chr_l_maker FROM MT_REG_RPT WHERE RPT_TYPE =:p_mt_reg_rpt_struct_h->h_rpt_type AND RPT_SEQ_NUM =:p_mt_reg_rpt_struct_h->h_rpt_seq_num ;

		printf(" *************************************** \n ");
	
		printf(" CHECKER    |%s| \n ", p_intl_envdatastruct_h->usr);
		
		printf(" RPT_TYPE  |%s| \n ", p_mt_reg_rpt_struct_h->h_rpt_type);
		printf(" RPT_SEQ_NUM  |%d| \n ", p_mt_reg_rpt_struct_h->h_rpt_seq_num);	

		printf(" chr_l_maker  |%s| \n ",chr_l_maker);	

		printf(" *************************************** \n ");


		if(strcmp(chr_l_maker,p_intl_envdatastruct_h->usr))
		{
		if (!strcmp(p_mt_reg_rpt_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   {
   		if(!strcmp(p_mt_reg_rpt_struct_h->h_status,STATUS_DEL_UAUTH))
	    	{
	    		strcpy(p_mt_reg_rpt_struct_h->h_access_stamp,chr_sys_access_stamp);
	    		l_mt_reg_rpt_struct_i->i_access_stamp =0;
   	    	strcpy(p_mt_reg_rpt_struct_h->h_checker,p_intl_envdatastruct_h->usr);
	    		l_mt_reg_rpt_struct_i->i_checker=0;
  	    	strcpy(p_mt_reg_rpt_struct_h->h_checker_dt,chr_sys_access_stamp);
	    		l_mt_reg_rpt_struct_i->i_checker_dt=0;
          strcpy(p_mt_reg_rpt_struct_h->h_status,STATUS_AUTH);
	    		l_mt_reg_rpt_struct_i->i_status =0;

	    		EXEC SQL UPDATE MT_REG_RPT SET 
           	CHECKER =:p_intl_envdatastruct_h->usr:p_i_checker,
            	CHECKER_DT =:chr_sys_access_stamp:p_i_access_stamp,
					ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp,
            	STATUS =:p_mt_reg_rpt_struct_h->h_status:l_mt_reg_rpt_struct_i->i_status
				WHERE 
					RPT_TYPE =:p_mt_reg_rpt_struct_h->h_rpt_type AND 
					RPT_SEQ_NUM =:p_mt_reg_rpt_struct_h->h_rpt_seq_num ;

				IS_ANY_ORA_ERROR;	
			}
	   }
		else 
	   {
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   } 

		}
		else
		{


			int_retval_mkrchkr = CR_Chk_ChldMkrChkr( l_key_codes,
                                          l_key_values,
                                          chr_l_table_name,
                                          p_intl_envdatastruct_h->usr,
                                          l_debug_info_ptr);	

			if (int_retval_mkrchkr !=APL_SUCCESS)
              APL_GOBACK_FAIL
		}
	}   

 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_DELETE))
 {
			p_i_checker =-1;
			p_i_checkerdt =-1;
			strcpy(p_mt_reg_rpt_struct_h->h_checker,APL_NULL_STRING);
			strcpy(p_mt_reg_rpt_struct_h->h_checker_dt,APL_NULL_STRING);

			APL_IF_DEBUG
			{
					  CO_ProcMonitor(APL_OUT_FILE, "Entered delete of Function MT_ModDBNoDlvDet\n", NULL,p_intl_envdatastruct_h); 
			}

			printf("p_intl_envdatastruct_h->h_mode       %s  \n\n",p_intl_envdatastruct_h->h_mode);

			if (!strcmp(p_mt_reg_rpt_struct_h->h_access_stamp,chr_acc_stamp_compare))
			{
					  strcpy(p_mt_reg_rpt_struct_h->h_access_stamp,chr_sys_access_stamp);
					  l_mt_reg_rpt_struct_i->i_access_stamp =0;
					  strcpy(p_mt_reg_rpt_struct_h->h_status,STATUS_DEL_UAUTH);
					  l_mt_reg_rpt_struct_i->i_status =0;

					  EXEC SQL UPDATE MT_REG_RPT SET 
								 MAKER =:p_intl_envdatastruct_h->usr:p_i_maker,
										 MAKER_DT =:chr_sys_access_stamp:p_i_makerdt,
										 CHECKER =:p_mt_reg_rpt_struct_h->h_checker:p_i_checker,
										 CHECKER_DT =:p_mt_reg_rpt_struct_h->h_checker:p_i_checkerdt,
										 STATUS =:p_mt_reg_rpt_struct_h->h_status:l_mt_reg_rpt_struct_i->i_status,
										 ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp
													WHERE 
													RPT_TYPE =:p_mt_reg_rpt_struct_h->h_rpt_type AND 
													RPT_SEQ_NUM =:p_mt_reg_rpt_struct_h->h_rpt_seq_num ;
					  IS_ANY_ORA_ERROR;	
			}
			else 
			{
					  if (CO_InsertErr
											(l_debug_info_ptr,
											 ERR_ACCESSSTAMP_CHGD, 
											 APL_NULL_STRING,
											 APL_NULL_STRING,
											 APL_NULL_STRING,
											 __LINE__,
											 __FILE__
											) != APL_SUCCESS)
					 APL_GOBACK_FAIL
					APL_GOBACK_FAIL
			} 
 }


 if (int_error_flag == APL_FAILURE)
 {
			APL_GOBACK_FAIL
 }
 APL_GOBACK_SUCCESS

			RETURN_SUCCESS :
			{
					  APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
					 free(l_mt_reg_rpt_struct_i);
					  return(APL_SUCCESS);
			}
RETURN_FAILURE :
 {
			APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
		  free(l_mt_reg_rpt_struct_i);
			return(APL_FAILURE);
 }

}


