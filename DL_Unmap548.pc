/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         :      DEAL PROCESSING
 *
 * File Name           :      DL_Unmap548.pc
 *
 * Description         :      UNMAPPED 548 GENERATION
 *
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author           Description        RFS No.
 * ---------   --------  ---------------  ------------------   ---------
 * 06/08/2006   1.0                          UNMAPPED 548 GENERATION
 * 09/04/2022   1.1      kotubabu            Linux Migration 
 *************************************************************************/



#include<stdio_64.h>
#include "Intellect_Common.h"
#include "Intellect_Interface.h"
#include "DL_Interface.h"
#include "BT_Common.h"
#include "Intellect_Error.h"
#include "CO_IndStructdef.h"
#include "CO_Commdef.h"

#define DATA_FIELD_SEPRTR ''
#define DATA_VALUE_SEPRTR ''

/* Added by kotubabu  for Linux Migration -START*/
#ifdef OS_LINUX
FILE* g_flogfile =NULL;
#else
FILE* g_flogfile = APL_OUT_FILE;
#endif
/* Added by kotubabu for Linux Migration -END*/
char  **temp = ( char **)NULL;
char  **temp2 = ( char **)NULL;

EXEC SQL INCLUDE SQLCA.H;

//main(int argc,char **argv)
int main(int argc,char **argv)//Changes done for AIX Migration
{	
	 DEBUG_INFO_STRUCT_H **l_debug_info_ptr = (DEBUG_INFO_STRUCT_H **) NULL;
	 l_debug_info_ptr = (DEBUG_INFO_STRUCT_H **)calloc(1,sizeof(DEBUG_INFO_STRUCT_H *)); 

        /*  Added by kotubabu for Linux Migration -START*/
        #ifdef OS_LINUX
          g_flogfile = APL_OUT_FILE;
        #else
       	  APL_FUNCTION_ENTER(g_flogfile)	
        #endif
        /*  Added by kotubabu for Linux Migration -END*/

	 int l_int_num = 0;
	 int l_int_num2 = 0;
	 int i=0;
	 char l_chr_brokercd[11] =APL_NULL_STRING;
	 char chr_l_param_list[4000] =APL_NULL_STRING;

	 char l_date[21] = APL_NULL_STRING;
	  
	 FILE *l_logfile = (FILE *)NULL;
	 FILE *p_logfile = NULL;


	
	if(CO_Get_DBConnect(l_debug_info_ptr) == APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}
	printf("\n here1\n");
/***********	Processing INPUT PARAMETERS	START	**********/


	if (APL_FAILURE == CO_Rtv_RptFileName( "UMP548",
				APL_LOGFILE_DESC,
				100,
				argv[5],
				argv,
				&g_flogfile,
				l_debug_info_ptr ) ) 
		{
			printf("\n Failure from CO_Rtv_RptFileName \n");
			APL_GOBACK_FAIL
		} 

printf("\n here2\n");
	if(BT_Status_Update(argv[0],
				argv[1],
				argv[2],
				APL_STARTED_STATUS,
				l_debug_info_ptr) ==APL_FAILURE)
	{
		printf("\n here3\n");
		APL_GOBACK_FAIL
	}

printf("\n here3\n");
	
	if(APL_FAILURE == CO_SplitStr(argv[9],
				'|',
				&l_int_num,&temp))
		{
			CO_ProcMonitor(g_flogfile, "Failure from StrSplitFn", l_debug_info_ptr, NULL);
			APL_GOBACK_FAIL

		}
printf("\n here4\n");		


   if(l_int_num != 2)
		{
			printf("\n total no of arguments are |%d|", l_int_num);
			CO_ProcMonitor(g_flogfile, "Improper Number of arguements", l_debug_info_ptr, NULL);
			CO_Proc_RptClose(g_flogfile, &l_debug_info_ptr);
			APL_GOBACK_FAIL
		}

	printf("\n no of arguments are |%d|", l_int_num);
	printf("\n  arguments are A--|%s|", temp[0]);
	printf("\n  arguments are B--|%s|", temp[1]);
		
	if (!strlen(temp[0]))
		{
			printf("\n Mandatory Data Missing: Deal Date |%s|",temp[0]);
			CO_ProcMonitor(g_flogfile, "Mandatory Data Missing: Deal Date", l_debug_info_ptr, NULL);
			APL_GOBACK_FAIL
		} 
	
	strcpy(l_date, temp[0]);
	
	fprintf(g_flogfile,"\n Passed Deal Date is |%s|", l_date);
	fprintf(g_flogfile,"\n Passed temp[1] |%s|", temp[1]);
	
	if(strcmp(temp[1],"A")==0)
	{
		fprintf(g_flogfile,"\n Now calling Proc_Unmap548 for All Brokers \n");

		strcpy(l_chr_brokercd,"A");

		if(APL_FAILURE == Proc_Unmap548(l_date,l_chr_brokercd,g_flogfile,l_debug_info_ptr))
		{
			CO_ProcMonitor(g_flogfile, "Proc_Unmap548 returned failure", l_debug_info_ptr, NULL);
		
		    CO_Proc_RptClose(g_flogfile, &l_debug_info_ptr);
			APL_GOBACK_FAIL
		}
	}
	else
	{
		fprintf(g_flogfile,"\n Now calling Proc_Unmap548 for Selected Brokers \n");
	
		if(APL_FAILURE == CO_SplitStr(temp[1],
				',',
				&l_int_num2,&temp2))
		{
			CO_ProcMonitor(g_flogfile, "Failure from StrSplitFn", l_debug_info_ptr, NULL);
			APL_GOBACK_FAIL

		}

		fprintf(g_flogfile,"\n Total No of Selected Brokers=|%d| \n",l_int_num2);

		for(i=0;i < l_int_num2;i++)
		{
			
			strcpy(l_chr_brokercd,temp2[i]);

			printf("\n Now Calling Proc_Unmap548 for Broker=|%s|\n",l_chr_brokercd);

			if(APL_FAILURE == Proc_Unmap548(l_date,l_chr_brokercd,g_flogfile,l_debug_info_ptr))
			{
				CO_ProcMonitor(g_flogfile, "Proc_Unmap548 returned failure", l_debug_info_ptr, NULL);
			
				CO_Proc_RptClose(g_flogfile, &l_debug_info_ptr);
				APL_GOBACK_FAIL
			}

		}

	}
   

APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
		printf("SUCESS IN MAIN");
		fprintf(g_flogfile, "SUCESS IN MAIN");

	if(BT_Status_Completed(argv[0],
				argv[1],
				argv[2],
				l_debug_info_ptr)   ==  APL_FAILURE )
	{
		APL_GOBACK_FAIL
	}
	CO_Proc_RptClose(g_flogfile, l_debug_info_ptr);

	EXEC SQL COMMIT WORK;

	if(sqlca.sqlcode != 0)APL_GOBACK_FAIL
		exit(0);

	RETURN_FAILURE    :
	CO_Proc_RptClose(g_flogfile, l_debug_info_ptr);
	exit(-1);
		 
}

int Proc_Unmap548(char *p_chr_date,char *p_chr_brokercd,FILE *g_flogfile,DEBUG_INFO_STRUCT_H **l_debug_info_ptr) 	
{	

	char l_sys_date[20] = APL_NULL_STRING;
	char l_chr_start_date[20]=  APL_NULL_STRING; 
    char chr_param_string[201] = APL_NULL_STRING;
	char l_failcode[3]=APL_NULL_STRING;
	char l_deal_fr[3] = APL_NULL_STRING;
	char l_broker_cd[11]=APL_NULL_STRING;
    char l_dl_date[APL_DATE_LEN]=APL_NULL_STRING;
	char l_contract_cd[17]=APL_NULL_STRING;

   /*ISKB-212 Start- Vaibhav-23/06/2007*/	
        int l_seq_no=0;  
		 short i_seq_no =0; 
	     int l_count = 0;
   /*ISKB-212-End Vaibhav-23/06/2007*/
  	int l_deal_subfail=0;
	int l_nmap_count = 0;

	short i_deal_subfail =0;
	short i_deal_fr =0;
	short i_subfail_code=0;
	short i_failcode=0;

		APL_FUNCTION_ENTER(g_flogfile)
	
		printf("\n Entered into Proc_Unmap548 Function \n");
		printf("\n Before passing to Cursor Deal Date is |%s|\n",p_chr_date);

	    if(strcmp(p_chr_brokercd,"A")==0)
		{
			strcpy(p_chr_brokercd,"%");
		}
		
		printf("\n Just before Cursor p_chr_brokercd=|%s| \n",p_chr_brokercd);


		 EXEC SQL DECLARE bcnmap CURSOR FOR
               SELECT a.SUB_FAIL_CD , a.CONTRACT_CD, a.BROKER_CD, a.DL_DATE FROM DL_BCNMAP_RPT a,DL_BCN b
               WHERE a.SUB_FAIL_CD IS NOT NULL AND a.SUB_FAIL_CD <> '3'
               AND a.CONTRACT_CD = b.CONTRACT_CD
               AND a.DL_DATE =b.DL_DATE
               AND a.BROKER_CD=b.BROKER_CD
			   AND BATCH_NO IS NOT NULL
			   AND TRUNC(B.DL_DATE)=TO_DATE(:p_chr_date,'DD/MM/YYYY')
			   AND A.BROKER_CD LIKE :p_chr_brokercd;
		
			   EXEC SQL OPEN bcnmap;
               IS_ANY_ORA_ERROR

              for(;;)
              {
				   EXEC SQL FETCH bcnmap INTO :l_nmap_count,:l_contract_cd,:l_broker_cd,:l_dl_date;
				   printf(" 90000 sqlca.sqlcode is %d\n",sqlca.sqlcode);
				   if(APL_ZERO_RESULT_SET)
				   break;
				   IS_ANY_ORA_ERROR
					
				   printf("\n Changes \n");
				   printf("A: l_failcode =|%s| l_nmap_count=|%d| \n",l_failcode,l_nmap_count);

				   if((l_nmap_count != NULL) && (l_nmap_count != 3))
				  	{

						memset(l_deal_fr,APL_NULL_CHAR,3);
						l_deal_subfail=0;

						EXEC SQL SELECT FAILREASON_CD ,nvl(SUB_FAIL_CD,0)
									  INTO :l_deal_fr:i_deal_fr,:l_deal_subfail:i_deal_subfail
									  FROM DL_BCN
									  WHERE CONTRACT_CD = :l_contract_cd
									  AND BROKER_CD =:l_broker_cd
									  AND DL_DATE =:l_dl_date;
						if(sqlca.sqlcode)
						 {
							printf("\n Error 1=|%d| ",sqlca.sqlcode);
						 }
						IS_ANY_ORA_ERROR

/*						EXEC SQL UPDATE DL_BCN A SET A.FAILREASON_CD = '95',
										 A.SUB_FAIL_CD = :l_nmap_count
										 WHERE A.CONTRACT_CD=:l_contract_cd
										 AND   A.BROKER_CD =:l_broker_cd
										 AND   A.DL_DATE =:l_dl_date;
					   if(sqlca.sqlcode)
						 {
							printf("\n Error 2=|%d| ",sqlca.sqlcode);
						 }
					    IS_ANY_ORA_ERROR
*/
					    printf("l_contract_cd is |%s|,l_broker_cd is |%s| , l_dl_date is |%s|\n",l_contract_cd,l_broker_cd,l_dl_date);

						if((strcmp(l_deal_fr,"95")==0) || (l_deal_subfail ==l_nmap_count))
						{

							memset(chr_param_string,APL_NULL_CHAR,201);
							strcpy(chr_param_string,l_contract_cd);
							strcat(chr_param_string,";");
							strcat(chr_param_string,l_broker_cd);
							strcat(chr_param_string,";");
							strcat(chr_param_string,l_dl_date);
							strcat(chr_param_string,";");
							strcat(chr_param_string,APL_NULL_STRING);

							printf("\n 1:chr_param_string=|%s| \n",chr_param_string);
							printf("\n 2:Now Sending 548 for UnMapped BCN Contract=|%s|\n",l_contract_cd);	
                /*ISKB-212 Start-Multiple MT548 message generation -Vaibhav-23/06/2007*/  
						    EXEC SQL SELECT nvl(max(seq_no),1)
								  INTO :l_seq_no:i_seq_no
								  from DL_UNMAP_548 
								  WHERE contract_code = :l_contract_cd 
			  					  AND broker_code =:l_broker_cd 
								  AND deal_date =:l_dl_date; 
							
						if(sqlca.sqlcode)
						 {
							printf("\n Error 1=|%d| ",sqlca.sqlcode);
						 }
						IS_ANY_ORA_ERROR

							EXEC SQL SELECT NVL(COUNT(*),0)
								INTO :l_count
								FROM DL_UNMAP_548
								WHERE contract_code = :l_contract_cd 
			  					AND broker_code =:l_broker_cd 
								AND deal_date =:l_dl_date
								AND fail_code =: l_deal_fr
								AND sub_fail_code =:l_deal_subfail
								AND seq_no =: l_seq_no;
							IS_ANY_ORA_ERROR

						Alert("Count we got is |%d| \n",l_count);
						if(l_count == 0)
						{
							EXEC SQL SELECT nvl(max(seq_no),0)+1
							         INTO :l_seq_no:i_seq_no
								 from DL_UNMAP_548 
								 WHERE contract_code = :l_contract_cd 
			  					 AND broker_code =:l_broker_cd 
								 AND deal_date =:l_dl_date; 
							
							if(sqlca.sqlcode)
							 {
								printf("\n Error 1=|%d| ",sqlca.sqlcode);
							 }
							IS_ANY_ORA_ERROR

							printf("\n Contract Code[%s],Fail Code[%s],Sub Fail Code[%d],Seq.No [%d]",l_contract_cd,l_deal_fr,l_deal_subfail,l_seq_no);
						        EXEC SQL INSERT INTO DL_UNMAP_548 VALUES (:l_broker_cd,:l_contract_cd,:l_deal_fr,:l_deal_subfail,:l_dl_date,:l_seq_no);
							 if(sqlca.sqlcode)
							 {
								printf("\n Error 1=|%d| ",sqlca.sqlcode);
							 }
							IS_ANY_ORA_ERROR

							if(GBDbInsIMSGENT( "548N04",l_contract_cd,l_broker_cd,'Y',chr_param_string,l_debug_info_ptr)== APL_FAILURE)
							{
								APL_GOBACK_FAIL
							}
						}
                 /*ISKB-212 End-Multiple MT548 message generation -Vaibhav-23/06/2007*/  
						}
					}
              }
              EXEC SQL CLOSE bcnmap;

			  EXEC SQL DECLARE bcnmap1 CURSOR FOR
                    SELECT max(a.SUB_FAIL_CD ), a.CONTRACT_CD, a.BROKER_CD, a.DL_DATE 
								FROM DL_BCNMAP_RPT a,DL_BCN b 
								WHERE a.CONTRACT_CD = b.CONTRACT_CD 
								AND a.DL_DATE =b.DL_DATE 
								AND a.BROKER_CD=b.BROKER_CD 
								AND BATCH_NO IS NOT NULL
										group by a.contract_cd,a.broker_cd,a.dl_date 
								having max(a.sub_fail_cd)='3';

               EXEC SQL OPEN bcnmap1;
			   IS_ANY_ORA_ERROR

			    for(;;)
				 {
					EXEC SQL FETCH bcnmap1 INTO :l_nmap_count,:l_contract_cd,:l_broker_cd,:l_dl_date;
					printf(" 90000 sqlca.sqlcode is %d\n",sqlca.sqlcode);
					if(APL_ZERO_RESULT_SET)
					break;
					IS_ANY_ORA_ERROR
					printf("890 l_failcode=|%s| l_nmap_count = |%d|\n",l_failcode,l_nmap_count);

					memset(l_deal_fr,APL_NULL_CHAR,3);
					l_deal_subfail=0;

					EXEC SQL SELECT FAILREASON_CD ,nvl(SUB_FAIL_CD,0)
										INTO :l_deal_fr:i_deal_fr,:l_deal_subfail:i_deal_subfail
										FROM DL_BCN
										WHERE CONTRACT_CD = :l_contract_cd
										AND BROKER_CD =:l_broker_cd
										AND DL_DATE =:l_dl_date ;
					if(sqlca.sqlcode)
					 {
						printf("\n Error 3=|%d| ",sqlca.sqlcode);
					 }
					IS_ANY_ORA_ERROR


/*					 EXEC SQL UPDATE DL_BCN A SET A.FAILREASON_CD = '95',A.SUB_FAIL_CD = 3
								   WHERE A.CONTRACT_CD=:l_contract_cd
								   AND   A.BROKER_CD =:l_broker_cd
								   AND   A.DL_DATE =:l_dl_date;
					 if(sqlca.sqlcode)
					 {
						printf("\n Error 4=|%d| ",sqlca.sqlcode);
					 }
					 IS_ANY_ORA_ERROR
*/
					printf("l_contract_cd is |%s|,l_broker_cd is |%s| , l_dl_date is |%s|\n",l_contract_cd,l_broker_cd,l_dl_date);

					if((strcmp(l_deal_fr,"95")==0) || (l_deal_subfail ==l_nmap_count))
					{

					   memset(chr_param_string,APL_NULL_CHAR,201);
					   strcpy(chr_param_string,l_contract_cd);
					   strcat(chr_param_string,";");
					   strcat(chr_param_string,l_broker_cd);
					   strcat(chr_param_string,";");
					   strcat(chr_param_string,l_dl_date);
					   strcat(chr_param_string,";");
					   strcat(chr_param_string,APL_NULL_STRING);

					   printf("\n 2:chr_param_string=|%s| \n",chr_param_string);
					   printf("\n 2:Now Sending 548 for UnMapped BCN Contract=|%s|\n",l_contract_cd);
					/*ISKB-212 Start-Multiple MT548 message generation -Vaibhav-23/06/2007*/  
							EXEC SQL SELECT nvl(max(seq_no),1)
									  INTO :l_seq_no:i_seq_no
									  from DL_UNMAP_548 
									  WHERE contract_code = :l_contract_cd 
			  						  AND broker_code =:l_broker_cd 
									  AND deal_date =:l_dl_date; 
							
						if(sqlca.sqlcode)
						 {
							printf("\n Error 1=|%d| ",sqlca.sqlcode);
						 }
						IS_ANY_ORA_ERROR

							EXEC SQL SELECT NVL(COUNT(*),0)
								INTO :l_count
								FROM DL_UNMAP_548
								WHERE contract_code = :l_contract_cd 
			  						  AND broker_code =:l_broker_cd 
									  AND deal_date =:l_dl_date
										AND fail_code =: l_deal_fr
										AND sub_fail_code =:l_deal_subfail
									  AND seq_no =: l_seq_no;
							IS_ANY_ORA_ERROR

						Alert("Count we got is |%d| \n",l_count);
						if(l_count == 0)
						{
							EXEC SQL SELECT nvl(max(seq_no),0)+1
									  INTO :l_seq_no:i_seq_no
									  from DL_UNMAP_548 
									  WHERE contract_code = :l_contract_cd 
			  						  AND broker_code =:l_broker_cd 
									  AND deal_date =:l_dl_date; 
							
							if(sqlca.sqlcode)
							 {
								printf("\n Error 1=|%d| ",sqlca.sqlcode);
							 }
							IS_ANY_ORA_ERROR

							printf("\n Contract Code[%s],Fail Code[%s],Sub Fail Code[%d],Seq.No [%d]",l_contract_cd,l_deal_fr,l_deal_subfail,l_seq_no);
							EXEC SQL INSERT INTO DL_UNMAP_548 VALUES (:l_broker_cd,:l_contract_cd,:l_deal_fr,:l_deal_subfail,:l_dl_date,:l_seq_no);

							 if(sqlca.sqlcode)
							 {
								printf("\n Error 1=|%d| ",sqlca.sqlcode);
							 }
							IS_ANY_ORA_ERROR

						   if(GBDbInsIMSGENT( "548N04",l_contract_cd,l_broker_cd,'Y',chr_param_string,l_debug_info_ptr) == APL_FAILURE)
						   {
							   APL_GOBACK_FAIL
						   }

						}
						/*ISKB-212 End-Multiple MT548 message generation -Vaibhav-23/06/2007*/   
					}
				 }
				EXEC SQL CLOSE  bcnmap1;
				IS_ANY_ORA_ERROR


		APL_GOBACK_SUCCESS							

		RETURN_SUCCESS: 

		printf("\n Sucess Inside Proc_Unmap548 \n");
		fprintf(g_flogfile,"\n Sucess Inside Proc_Unmap548 \n");
		return(APL_SUCCESS);

		RETURN_FAILURE:
	
		printf("\n Error Inside Proc_Unmap548 ORA=|%d| \n",sqlca.sqlcode);
		fprintf(g_flogfile,"\n Sucess Inside Proc_Unmap548 ORA=|%d| \n",sqlca.sqlcode);
		return(APL_FAILURE);

}

