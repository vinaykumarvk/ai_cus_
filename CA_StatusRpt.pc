

#include "CO_HostStructdef.h"
#include "CA_Common.h"

EXEC SQL INCLUDE SQLCA.H;
#define PAGELENGTH 24








int CA_StatFn(char *chr_p_ca_id,char *chr_p_client,char *p_castat, char *p_canarr, char **argv,FILE *p_repfile,FILE *p_logfile,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	
	char	chr_l_sysdate_b[APL_DATE_LEN]										=	APL_NULL_STRING;
	char	chr_l_curr_datetime[APL_DATE_LEN]								=	APL_NULL_STRING;
	char  chr_l_h_acastatus_ca_id[CORP_ID_LEN]						   =	APL_NULL_STRING;
	char  chr_l_h_acastatus_client[APL_CLIENT_LENGTH]					=	APL_NULL_STRING;
	char  chr_l_h_acastat[FAILREAS_CD_LEN]								=  APL_NULL_STRING;
	char  chr_l_h_acanarr[211]												=  APL_NULL_STRING; 
	char 	chr_l_h_acastatus_maker[APL_USERID_LEN]						=	APL_NULL_STRING;
	char  chr_l_h_acastatus_maker_dt[APL_DATE_LEN]					=	APL_NULL_STRING;
	char  chr_l_h_acastatus_access_stamp[APL_DATE_LEN]				=	APL_NULL_STRING;
	
	
	char	chr_l_h_acastatus_inst_seme[APL_TXNREFNO_LEN]          =  APL_NULL_STRING;
	char  chr_l_h_acastatus_caoptioncode[9]                      =  APL_NULL_STRING;
	float flt_l_h_acastatus_inst_holding                         =  0;
	char  **temp                                             =  NULL;
	int     int_num																=	0;
	

	short l_i_acastatus_ca_id											=	0;
	short l_i_acastatus_account										=	0;
	short l_i_acastat														=  0;
   short l_i_acanarr														=  0;
	short l_i_acastatus_maker                          		=	0;
	short l_i_acastatus_maker_dt										=	0;
	short l_i_acastatus_access_stamp									=	0;
	short int_l_exist_a	    													=  0;
	
	
	short l_i_acastatus_INST_SEME										=	0;
	short l_i_acastatus_caoptioncode									=	0;
	short l_i_acastatus_INST_HOLDING									=	0;
	


	EXEC SQL VAR chr_l_h_acastatus_inst_seme IS STRING;
	EXEC SQL VAR chr_l_h_acastatus_caoptioncode IS STRING;

	printf("Entering  Function CA_StatFn \n");

	if(!strlen(chr_p_ca_id))
	{
		APL_DATA_MISSING("Corporate Action ID ",APL_NULL_STRING,APL_NULL_STRING)		
	}	
	if(!strlen(chr_p_client))
	{
		APL_DATA_MISSING("Account",APL_NULL_STRING,APL_NULL_STRING)
	}
	
	if ( APL_FAILURE == CO_RtvSysDt(  chr_l_sysdate_b,l_debug_info_ptr))
   {
      APL_GOBACK_FAIL;
   }
	if (APL_FAILURE == CO_RtvSysDtTime(chr_l_curr_datetime,l_debug_info_ptr))
   {
      APL_GOBACK_FAIL
   }

	
	if (APL_FAILURE == CO_SplitStr( argv[9],
												'|',
												&int_num,
												&temp ))
	{
		CO_ProcMonitor(p_logfile, "Failure from CBStrSplitFn", NULL, NULL);
		APL_GOBACK_FAIL
	}
	else
		CO_ProcMonitor(p_logfile,"Successful in CBStrSplitFn",NULL,NULL);

	strcpy(chr_l_h_acastatus_inst_seme,temp[4]);
	strcpy(chr_l_h_acastatus_caoptioncode,temp[5]);
	flt_l_h_acastatus_inst_holding = atof(temp[6]);
	
	
	
	strcpy(chr_l_h_acastat,p_castat);
	strcpy(chr_l_h_acanarr,p_canarr);
	strcpy(chr_l_h_acastatus_maker,p_intl_envdatastruct_h->usr);
	strcpy(chr_l_h_acastatus_maker_dt,chr_l_sysdate_b);
	strcpy(chr_l_h_acastatus_access_stamp,chr_l_curr_datetime);

	if (strlen(chr_l_h_acanarr) > 0) 
		l_i_acanarr  =  0;
	else
		l_i_acanarr  =	-1;

	EXEC SQL SELECT NVL(COUNT(*),0)
				INTO    :int_l_exist_a 
				FROM    CASTATUS
				WHERE   corp_id   = :chr_p_ca_id
				AND     client = :chr_p_client;

	IS_ANY_ORA_ERROR

	

	
	if (int_l_exist_a > 0)
 	{
		EXEC SQL UPDATE CASTATUS SET   STAT_CD      = :chr_l_h_acastat,
												  DETAIL      = :chr_l_h_acanarr,
												  maker  		  = :chr_l_h_acastatus_maker,
												  MAKER_DT		  = :chr_l_h_acastatus_maker_dt,
												  access_stamp   = :chr_l_h_acastatus_access_stamp,
												  INSTR_MSGREFNO      = :chr_l_h_acastatus_inst_seme,
												  CA_OPTCD   = :chr_l_h_acastatus_caoptioncode,
												  INSTR_HOLD     = :flt_l_h_acastatus_inst_holding
										  WHERE corp_id          = :chr_p_ca_id
										  AND   client		  = :chr_p_client;
		if(sqlca.sqlcode)
		{
			CO_ProcMonitor(p_logfile,"Unsuccessful in updating acastatus",l_debug_info_ptr,NULL);
			APL_GOBACK_FAIL
		}
		if (APL_FAILURE==(GBDbInsIMSGENT("562N02",chr_p_ca_id,chr_p_client,'Y',"EVST;",l_debug_info_ptr )))
		{
			APL_GOBACK_FAIL;
		}		
		printf("After GBDbInsIMSGENT 1 \n");
	}
	else if(int_l_exist_a == 0)
	{
		strcpy(chr_l_h_acastatus_ca_id,chr_p_ca_id);
		strcpy(chr_l_h_acastatus_client,chr_p_client);

		EXEC SQL INSERT INTO CASTATUS VALUES( :chr_l_h_acastatus_ca_id:l_i_acastatus_ca_id,
														 	:chr_l_h_acastatus_client:l_i_acastatus_account,
															:chr_l_h_acastat:l_i_acastat,
															:chr_l_h_acanarr:l_i_acanarr,
															:chr_l_h_acastatus_maker:l_i_acastatus_maker,
															:chr_l_h_acastatus_maker_dt:l_i_acastatus_maker_dt,
															:chr_l_h_acastatus_access_stamp:l_i_acastatus_access_stamp,
															:chr_l_h_acastatus_inst_seme:l_i_acastatus_INST_SEME,
															:chr_l_h_acastatus_caoptioncode:l_i_acastatus_caoptioncode,
															:flt_l_h_acastatus_inst_holding:l_i_acastatus_INST_HOLDING);

					
		if(sqlca.sqlcode)
		{
			CO_ProcMonitor(p_logfile,"Unsuccesssful in inserting in acastatus",l_debug_info_ptr,NULL);
			APL_GOBACK_FAIL
		}
	   if (APL_FAILURE==(GBDbInsIMSGENT("562N02",chr_p_ca_id,chr_p_client,'Y',"EVST;",l_debug_info_ptr )))
      {
          APL_GOBACK_FAIL;
      }	
		printf("After GBDbInsIMSGENT 2 \n");
	}
		
	RETURN_SUCCESS :
		#ifdef SYS_DEBUG
			printf("Leaving Function CA_StatFn with success\n");
		#endif
		return(APL_SUCCESS);

	RETURN_FAILURE :
		#ifdef SYS_DEBUG
			printf("Leaving Function CA_StatFn with errors\n");
		#endif
		return(APL_FAILURE);
}



int CA_MntRptFn(char *chr_p_ca_id, char *chr_p_client, char *p_castat, char *p_canarration, int *int_linecount,int *int_page,char **argv,FILE *p_repfile,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	
	char  chr_l_h_client_a[APL_DATE_LEN]              =  APL_NULL_STRING;

   memset(chr_l_h_client_a,APL_NULL_CHAR,APL_CLIENT_LENGTH);

	if(strlen(chr_p_ca_id) == 0)
	{
		APL_DATA_MISSING("CA ID",APL_NULL_STRING,APL_NULL_STRING);
	}
	
	if(*int_linecount == 0)
   {
     (*int_page)++;
     if(APL_FAILURE == Header(chr_p_ca_id,p_castat, p_canarration, int_page,p_repfile,l_debug_info_ptr))
     {
        APL_GOBACK_FAIL
     }

   }

	strcpy(chr_l_h_client_a,chr_p_client);

	if(strlen(chr_l_h_client_a) != APL_CLIENT_LENGTH)
	{
		if(APL_FAILURE == CO_PadString(chr_l_h_client_a,'R',APL_CLIENT_LENGTH," ",l_debug_info_ptr))
      {
         APL_GOBACK_FAIL
      }

	}


	
	fprintf(p_repfile,"                        %s\n\n",chr_l_h_client_a);

	(*int_linecount)++;

	
	RETURN_SUCCESS:
		return(APL_SUCCESS);
	RETURN_FAILURE:
		return(APL_FAILURE);

}

 


int Header(char *chr_p_ca_id,char *chr_p_statcode, char *p_narration, int *int_page,FILE *p_repfile,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	char chr_l_h_aevent_instrcode[APL_INSTRUMENTCODE_LEN]		=	APL_NULL_STRING;
	char chr_l_h_aevent_ce_typ[3]						=	APL_NULL_STRING;
	char chr_l_h_aevent_decl_dt[APL_DATE_LEN]		=	APL_NULL_STRING;
	char chr_l_sysdate_b[APL_DATE_LEN]					=	APL_NULL_STRING;
	char chr_l_h_statdesc[101]                    =  APL_NULL_STRING;
   char chr_l_h_statqual[5]                      =  APL_NULL_STRING;
   char chr_l_h_statcode[7]                      =  APL_NULL_STRING;
   char chr_l_h_reasqual[6]                      =  APL_NULL_STRING;
   char chr_l_h_reascode[5]                      =  APL_NULL_STRING;
	short l_i_statdesc								=  0;
	short l_i_statqual								=  0;
	short l_i_statcode								=  0;
	short l_i_reasqual								=  0;
	short l_i_reascode								=  0;

	int  int_l_h_aevent_event_nbr;
	
	short l_i_aevent_instr_code							=	0;
	short l_i_aevent_ce_typ							=	0;	
	short l_i_aevent_decl_dt						=	0;
	short l_i_aevent_evnt_nbr						=	0;

	EXEC SQL VAR chr_l_h_aevent_instrcode IS STRING;
	EXEC SQL VAR chr_l_h_aevent_ce_typ IS STRING;
	EXEC SQL VAR chr_l_h_aevent_decl_dt IS STRING;

	EXEC SQL VAR chr_l_h_statdesc IS STRING;
	EXEC SQL VAR chr_l_h_statqual IS STRING;
	EXEC SQL VAR chr_l_h_statcode IS STRING;
	EXEC SQL VAR chr_l_h_reasqual IS STRING;
	EXEC SQL VAR chr_l_h_reascode IS STRING;


	EXEC SQL SELECT   instr_code,
                     CA_EVENT,
                     declare_dt,
                     evnt_indnt
            INTO     :chr_l_h_aevent_instrcode:l_i_aevent_instr_code,
                     :chr_l_h_aevent_ce_typ:l_i_aevent_ce_typ,
                     :chr_l_h_aevent_decl_dt:l_i_aevent_decl_dt,
                     :int_l_h_aevent_event_nbr:l_i_aevent_evnt_nbr
            FROM     CAEVENT
            WHERE    corp_id = :chr_p_ca_id;

   IS_ANY_ORA_ERROR   
	
	if ( APL_FAILURE == CO_RtvSysDt(  chr_l_sysdate_b,l_debug_info_ptr))
   {
      APL_GOBACK_FAIL
   }

	EXEC SQL SELECT STATUS_DET, 
						 STATUS_QUAL_IND, 
						 STATUS, 
						 nvl(REASON_QL,'N/A'), 
					    nvl(REASON_CD,'N/A') 
				INTO   :chr_l_h_statdesc:l_i_statdesc,
						 :chr_l_h_statqual:l_i_statqual,
						 :chr_l_h_statcode:l_i_statcode,
						 :chr_l_h_reasqual:l_i_reasqual,
						 :chr_l_h_reascode:l_i_reascode
				FROM   MASTATUS
				WHERE  STATUS = :chr_p_statcode;
	
	IS_ANY_ORA_ERROR
	
	
	fprintf(p_repfile,"\n                                           CORPORATE EVENT STATUS REPORTING\n");	
	fprintf(p_repfile,"Date:%.11s                           %s                                    Page No:%d\n\n",chr_l_sysdate_b,g_mt_commonsys_params_struct_h.ca_identname,*int_page);
	fprintf(p_repfile,"-------------------------------------------------------------------------------------------------------------------------\n");
	fprintf(p_repfile,"INSTRUMENT:%s                  DECLARATION DATE:%.11s                 EVENT TYPE:%s                 SERIAL NO:%d\n",chr_l_h_aevent_instrcode,chr_l_h_aevent_decl_dt,chr_l_h_aevent_ce_typ,int_l_h_aevent_event_nbr);

	fprintf(p_repfile,"-------------------------------------------------------------------------------------------------------------------------");
	fprintf(p_repfile,"\n\n");
	fprintf(p_repfile,"STATUS CODE  : %s\n\n",chr_p_statcode);
	fprintf(p_repfile,"DESCRIPTION  : %s",chr_l_h_statdesc);
   fprintf(p_repfile,"\n\n");
	fprintf(p_repfile,"SWIFT CODES  : %s	  %s     %s     %s", chr_l_h_statqual ,chr_l_h_statcode, chr_l_h_reasqual, chr_l_h_reascode);
	fprintf(p_repfile,"\n\n");

	
	fprintf(p_repfile,"ACCOUNTS UPDATED ARE  :  				 										 ");
	fprintf(p_repfile,"\n");
	

	
	RETURN_SUCCESS:
   	return(APL_SUCCESS);
   RETURN_FAILURE:
   	return(APL_FAILURE);
	
}
	


int Footer(FILE *p_repfile,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	fprintf(p_repfile,"\n-------------------------------------------------------------------------------------------------------------------------\n");

	fprintf(p_repfile,"                                                 END OF REPORT");
	
	return(APL_SUCCESS);


}






//main(int argc,char **argv)
int main(int argc,char **argv)//Changes done for AIX Migration
{
   struct sqlca sqlca;
   DEBUG_INFO_STRUCT_H *l_debug_info_ptr             	=  NULL;
   INTL_ENV_DATA_STRUCT_H l_intl_env_data_h;

   FILE  *l_finifile                      	=  NULL;
   FILE  *l_logfile                       	=  NULL;
   FILE  *l_repfile                       	=  NULL;

   char  chr_l_logfile_name[PATH_LENGTH]      	=  APL_NULL_STRING;
   char  chr_uname[APL_USERID_LEN]            	=  APL_NULL_STRING;
   char  chr_custody_id_b[APL_USERID_LEN]           	=  APL_NULL_STRING;
   char  chr_passwd[APL_PASSWD_LEN]           	=  APL_NULL_STRING;
   char  chr_l_logdir[PATH_LENGTH]            	=  APL_NULL_STRING;
   char  chr_l_inifile[PATH_LENGTH]           	=  APL_NULL_STRING;
	char  chr_l_ca_id[CORP_ID_LEN]						=	APL_NULL_STRING;
	char  chr_l_h_aentitl_account[APL_CLIENT_LENGTH]=	APL_NULL_STRING;
	char  chr_l_castat[FAILREAS_CD_LEN]				=  APL_NULL_STRING;
	char  chr_l_canarr[211]								=  APL_NULL_STRING;
	char  chr_l_h_cname[66]								=	APL_NULL_STRING;
   char 	**temp 										=	NULL;
   char 	**chr_temp1 										=	NULL;
	char  chr_l_buf[BUFFER_LEN]                    =  APL_NULL_STRING;
	char  chr_l_h_restart_data[APL_RESTARTDATA_LENGTH]              =  APL_NULL_STRING;
	char  chr_l_sel_type[2]                       =  APL_NULL_STRING; 
	char  chr_l_ce_typ_sm[3]								=	APL_NULL_STRING;
	char    chr_l_instrcode_sm[APL_INSTRUMENTCODE_LEN]       =  APL_NULL_STRING;

   int   int_num 											=	0;
   int   int_l_retval                         	=  0;
	int   count 										= 	0;
	int   int_page											=	0;
	int   int_linecount									=	0;

	short l_i_aentitl_account						=	0;
	short l_i_cname									=	0;
	short l_i_restart_data                    =  0;

   

   char chr_l_op_event_type[3]                      = APL_NULL_STRING;
   char chr_l_instrcode_a[APL_INSTRUMENTCODE_LEN]                = APL_NULL_STRING;

   short i_op_evt_class                        = 0;
   short i_instr_code                               = 0;

   

	
	EXEC SQL VAR chr_uname  IS STRING;
   EXEC SQL VAR chr_custody_id_b IS STRING;
   EXEC SQL VAR chr_passwd IS STRING;

	EXEC SQL VAR chr_l_h_aentitl_account	IS STRING;
	EXEC SQL VAR chr_l_h_cname				IS STRING;
	EXEC SQL VAR chr_l_ce_typ_sm         IS STRING;
	EXEC SQL VAR chr_l_instrcode_sm         IS STRING;
	
        EXEC SQL VAR chr_l_op_event_type            IS STRING;
        EXEC SQL VAR chr_l_instrcode_a                   IS STRING;
        
	
   sqlca.sqlcode = 0;

	memset(chr_l_h_aentitl_account,APL_NULL_CHAR,APL_CLIENT_LENGTH);
	memset(chr_l_h_cname,APL_NULL_CHAR,66);

   strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
   strcat(chr_l_inifile,"intl_sun.cfg");

	if ( ( l_finifile=fopen(chr_l_inifile,"r") ) == NULL)
   {
      APL_GOBACK_FAIL
   }

	l_debug_info_ptr = (DEBUG_INFO_STRUCT_H *) calloc(1,sizeof(DEBUG_INFO_STRUCT_H)); 

   

   APL_FETCH_DB_LOGIN_DETAILS(l_finifile, chr_custody_id_b, chr_uname, chr_passwd, APL_OUT_FILE, &l_debug_info_ptr)

   EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;


   if (sqlca.sqlcode)
   {
      APL_GOBACK_FAIL
   }
   else
   {
   

		if (APL_FAILURE == CO_Rtv_RptFileName( "1S",
                                          APL_LOGFILE_DESC,
                                          100,
                                          argv[5],
                                          argv,
                                          &l_logfile,
                                          &l_debug_info_ptr ) )
      {
      	APL_GOBACK_FAIL
      }

      

		EXEC SQL COMMIT WORK;

      if (sqlca.sqlcode)
      {
         CO_ProcMonitor(l_logfile, "Could not commit after opening chr_log file", NULL, NULL);
         APL_GOBACK_FAIL
      }

      

      if (APL_FAILURE == CO_RtvSysParams(&l_debug_info_ptr))
      {  
			printf("\n *** debuging 1 ** \n");
         CO_ProcMonitor(l_logfile, "Error In Getting System Parameters", NULL, NULL);
         CO_PrnErr(l_debug_info_ptr);
         APL_GOBACK_FAIL
      }

		 

      strcpy(l_intl_env_data_h.usr, argv[3]);
      strcpy(l_intl_env_data_h.h_mode, argv[4]);
      strcpy(l_intl_env_data_h.processtion, argv[5]);
      strcpy(l_intl_env_data_h.auth_req, argv[6]);
      strcpy(l_intl_env_data_h.subprocess, argv[7]);
      strcpy(l_intl_env_data_h.h_process, argv[8]);

	
      
	   
		if (APL_FAILURE == CO_SplitStr( argv[9],
                                       '|',
                                       &int_num,
                                       &temp ))
      {
      	CO_ProcMonitor(l_logfile, "Failure from CBStrSplitFn", NULL, NULL);
         APL_GOBACK_FAIL
      }
		else	
			CO_ProcMonitor(l_logfile,"Successful in CBStrSplitFn",NULL,NULL);

		
		if(int_num != 8)
		{
			CO_ProcMonitor(l_logfile,"Improper Number Of Arguments",NULL,NULL);
			APL_GOBACK_FAIL
		}

	 	

		strcpy(chr_l_ca_id,temp[0]);
		strcpy(chr_l_castat, temp[1]);
		strcpy(chr_l_canarr, temp[2]);
		strcpy(chr_l_sel_type, temp[7]);
		
	
	if (!strlen (chr_l_ca_id))
		CO_InsertErr(&l_debug_info_ptr,
								ERR_MAND_DATA_MISSING,
								"CORPORATE ACTION ID",
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__);	


	if (APL_FAILURE == CO_Rtv_RptFileName( "RS",
                                       "Corporate Event Status Reporting",
                                        100,
                                        argv[5],
                                        argv,
                                        &l_repfile,
                                        &l_debug_info_ptr ) )
   {
      APL_GOBACK_FAIL
   }
	
	fprintf(l_repfile,"                                           \n");

   

		
		printf("l_Sel_Type |%s|\n",chr_l_sel_type);
		if(strcmp(chr_l_sel_type,"A")==0)
   	{
	
	
        EXEC SQL SELECT OP_EVT_CLASS,INSTR_CODE
		 INTO :chr_l_op_event_type:i_op_evt_class,
                      :chr_l_instrcode_a:i_instr_code
		 FROM CAEVENT
                 WHERE CORP_ID =:chr_l_ca_id;
        IS_ANY_ORA_ERROR

        if (strcmp(chr_l_op_event_type,"TO") == 0)
        {
			printf("sqlca |%d| before declare\n",sqlca.sqlcode);
                EXEC SQL DECLARE CA_STAT_TO CURSOR FOR  
                SELECT  distinct e.client, a.cln_name
                FROM    DL_SAFEK e, MT_CLIENT a
                WHERE   e.instr_code = :chr_l_instrcode_a
                AND     e.safekeep_pos  > 0
                AND     e.client = a.cln_code;
			printf("sqlca |%d| after declare\n",sqlca.sqlcode);

                IS_ANY_ORA_ERROR
			printf("sqlca |%d| before open\n",sqlca.sqlcode);
	
		EXEC SQL OPEN CA_STAT_TO;
			printf("sqlca |%d| after open\n",sqlca.sqlcode);
		IS_ANY_ORA_ERROR
        }
		  else
		  {
            EXEC SQL SELECT CA_EVENT ,INSTR_CODE
                     INTO :chr_l_ce_typ_sm ,:chr_l_instrcode_sm
                     FROM CAEVENT
                     WHERE CORP_ID=:chr_l_ca_id;
            if(strcmp(chr_l_ce_typ_sm,"SM")==0)
            {
                EXEC SQL DECLARE CA_STAT_SM CURSOR FOR
                SELECT  distinct e.client, a.cln_name
                FROM    DL_SAFEK e, MT_CLIENT a
                WHERE   e.instr_code = :chr_l_instrcode_sm
                AND     e.safekeep_pos  > 0
                AND     e.client = a.cln_code;

                IS_ANY_ORA_ERROR

               EXEC SQL OPEN CA_STAT_SM;
               IS_ANY_ORA_ERROR
            }
				else
				{
      			EXEC SQL DECLARE CA_STAT CURSOR FOR
               		SELECT  e.client,
                  	  		  a.cln_name
                  	FROM    CAENTITLEMENT e,
                     	     MT_CLIENT a
                  	WHERE   e.corp_id = :chr_l_ca_id
                  	AND     e.STATUS in('RP','PP') /*Smita - Changed Col Names - HDFCCA Base Ver*/
                  	AND     e.client=a.cln_code;

 	       	  IS_ANY_ORA_ERROR

				  EXEC SQL OPEN CA_STAT;

 	       	  IS_ANY_ORA_ERROR
				}
		}
  
      	for(count=1;;count++)
 		   {
				fprintf(l_logfile,"count|%d|chr_l_op_event_type|%s|\n",count,chr_l_op_event_type);
			if (strcmp(chr_l_op_event_type,"TO") == 0)  
			{		
				EXEC SQL FETCH CA_STAT_TO INTO :chr_l_h_aentitl_account:l_i_aentitl_account , :chr_l_h_cname:l_i_cname ;
         			IS_ANY_ORA_ERROR
			}
			else
			{
				if(strcmp(chr_l_ce_typ_sm,"SM")==0)
            {
               EXEC SQL FETCH CA_STAT_SM INTO :chr_l_h_aentitl_account:l_i_aentitl_account , :chr_l_h_cname:l_i_cname;
               IS_ANY_ORA_ERROR
            }
				else
				{
					EXEC SQL FETCH CA_STAT INTO :chr_l_h_aentitl_account:l_i_aentitl_account , :chr_l_h_cname:l_i_cname;
					IS_ANY_ORA_ERROR
				}
			}
         	if ( APL_ZERO_RESULT_SET )
         	{
            	break;
         	}
			
            if (APL_FAILURE == CA_StatFn(chr_l_ca_id,chr_l_h_aentitl_account,chr_l_castat, chr_l_canarr, argv,l_repfile,l_logfile,&l_intl_env_data_h,&l_debug_info_ptr))
            {
					sprintf(chr_l_buf,"Unsuccessful in CA_StatFn %s %s %s ",chr_l_ca_id,chr_l_h_aentitl_account,chr_l_castat );
					CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
            	APL_GOBACK_FAIL
            }
				else
				{
					sprintf(chr_l_buf,"Successful in CA_StatFn %s %s %s ",chr_l_ca_id,chr_l_h_aentitl_account, chr_l_castat);
					CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
				}	
			   if(APL_FAILURE == CA_MntRptFn(chr_l_ca_id,chr_l_h_aentitl_account,chr_l_castat,chr_l_canarr, &int_linecount,&int_page,argv,l_repfile,&l_intl_env_data_h,&l_debug_info_ptr))
   	      {
					sprintf(chr_l_buf,"Unsuccessful in CA_MntRptFn %s %s %s ",chr_l_ca_id,chr_l_h_aentitl_account, chr_l_castat );
					CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
         	   APL_GOBACK_FAIL
         	}
				else
				{
					printf("l_ca_id %s chr_l_h_aentitl_account  %s chr_l_castat %s\n",chr_l_ca_id,chr_l_h_aentitl_account,chr_l_castat);
				 	sprintf(chr_l_buf,"Successful in CA_MntRptFn %s %s %s ",chr_l_ca_id,chr_l_h_aentitl_account,chr_l_castat);
               CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
				}
	
      	}
		if (strcmp(chr_l_op_event_type,"TO") == 0) 
		{
			printf("sqlca |%d| before close\n",sqlca.sqlcode);
			EXEC SQL CLOSE CA_STAT_TO;
			printf("sqlca |%d| after close\n",sqlca.sqlcode);
			IS_ANY_ORA_ERROR
		}
		else
		{
         if(strcmp(chr_l_ce_typ_sm,"SM")==0)
         {
            EXEC SQL CLOSE CA_STAT_SM;
            IS_ANY_ORA_ERROR
         }
         else
         {
            EXEC SQL CLOSE CA_STAT;
            IS_ANY_ORA_ERROR
         }
		}

			if(!sqlca.sqlerrd[2])
   		{
      		CO_ProcMonitor(l_logfile,"No Records Processed",NULL,NULL);
      		APL_GOBACK_SUCCESS
   		}

         else
			{	
				if(APL_FAILURE == Footer(l_repfile,&l_debug_info_ptr))
            	APL_GOBACK_FAIL
            else
				{
					sprintf(chr_l_buf,"Processed %d Number Of Records",count-1);
            	CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
					EXEC SQL UPDATE SYS_BATCHPROC
                        SET STAT_DET = :chr_l_buf
                        WHERE PROCESS_NAME =:argv[0]
                        AND PROC_INIT =:argv[1]
                        AND STARTDATE =:argv[2]
                        AND STATUS = 'started';


               APL_GOBACK_SUCCESS

				}
			}


   	}
		
		else if ((strcmp(chr_l_sel_type,"S")==0) || (strcmp(chr_l_sel_type,"O")==0))
		{
			if (APL_FAILURE == CO_SplitStr( temp[3],
														';',
														&int_num,
														&chr_temp1))
			{
				CO_ProcMonitor(l_logfile,"Failure from CBStrSplitFn",NULL,NULL);														
				APL_GOBACK_FAIL
			}
			else
				CO_ProcMonitor(l_logfile,"Successful in CBStrSplitFn",NULL,NULL);

			for(count=0;count<int_num;count++)
			{
				if ( APL_FAILURE == CA_StatFn(chr_l_ca_id,chr_temp1[count],chr_l_castat,chr_l_canarr, argv,l_repfile,l_logfile,&l_intl_env_data_h,&l_debug_info_ptr))
				{
					sprintf(chr_l_buf,"Unsuccessful in CA_StatFn %s %s %s ",chr_l_ca_id,chr_temp1[count], chr_l_castat);
            	CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
         		APL_GOBACK_FAIL
				}
				else 
				{
					sprintf(chr_l_buf,"Successful in CA_StatFn %s %s %s",chr_l_ca_id,chr_temp1[count], chr_l_castat);
            	CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
				}

				if(APL_FAILURE ==	CA_MntRptFn(chr_l_ca_id,chr_temp1[count],chr_l_castat,chr_l_canarr, &int_linecount,&int_page,argv,l_repfile,&l_intl_env_data_h,&l_debug_info_ptr))
				{
						sprintf(chr_l_buf,"Unsuccessful in CA_MntRptFn %s %s %s",chr_l_ca_id,chr_temp1[count], chr_l_castat);
            		CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
						APL_GOBACK_FAIL
				}
				else
				{
					sprintf(chr_l_buf,"Successful in CA_MntRptFn %s %s %s",chr_l_ca_id,chr_temp1[count], chr_l_castat);
           		CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
				}
				if(count == int_num-1)
				{
					if(APL_FAILURE == Footer(l_repfile,&l_debug_info_ptr))
						APL_GOBACK_FAIL
					else
					{
						sprintf(chr_l_buf,"Processed %d Number Of Records",int_num);
            		CO_ProcMonitor(l_logfile,chr_l_buf,NULL,NULL);
						EXEC SQL UPDATE SYS_BATCHPROC
                        SET STAT_DET = :chr_l_buf
                        WHERE PROCESS_NAME =:argv[0]
                        AND PROC_INIT =:argv[1]
                        AND STARTDATE =:argv[2]
                        AND STATUS = 'started';

						APL_GOBACK_SUCCESS
					}
				}	
			}
		}
	}
	fclose(l_finifile);
	
	RETURN_SUCCESS:
	{
		EXEC SQL UPDATE SYS_BATCHPROC
                        SET STATUS='completed'
                        WHERE PROCESS_NAME =:argv[0]
                        AND PROC_INIT =:argv[1]
                        AND STARTDATE =:argv[2]
                        AND STATUS = 'started';

      EXEC SQL COMMIT WORK RELEASE;
      CO_Proc_RptClose(l_logfile,&l_debug_info_ptr);
		CO_Proc_RptClose(l_repfile,&l_debug_info_ptr);
		exit(0);
	}		
	
	RETURN_FAILURE:
	{
		EXEC SQL ROLLBACK WORK RELEASE;
		CO_Proc_RptClose(l_logfile,&l_debug_info_ptr);
		CO_Proc_RptClose(l_repfile,&l_debug_info_ptr);
		exit(-1);
	}
}	
