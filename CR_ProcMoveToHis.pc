





#include "CO_HostStructdef.h"

EXEC SQL INCLUDE SQLCA.H;



char chr_g_final_date[APL_DATE_LEN]=APL_NULL_STRING;
int CR_Proc_MvToHisTrd(	char *chr_p_client, 
							char* chr_p_refno, 
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{

int CR_Proc_MvToHisAud(	char *p_client, 
							char* p_indentity_no, 
							char	p_dealordflg,
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr );
	

	struct sqlca sqlca;	
	int  int_l_error_flag = APL_SUCCESS;
	char chr_l_h_instrcode_A[APL_INSTRUMENTCODE_LEN] = APL_NULL_STRING;
	char chr_l_h_domcpac[APL_CLIENT_LENGTH] = APL_NULL_STRING;
	char chr_l_h_domcpbnkac[APL_CLIENT_LENGTH] = APL_NULL_STRING;
	char chr_l_h_rowid[APL_ROWID_LEN] = APL_NULL_STRING;
	char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	int int_h_count	= 0;
	char h_sys_dt[APL_DATE_LEN] = APL_NULL_STRING;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	

	EXEC SQL VAR chr_l_h_instrcode_A     IS STRING;
	EXEC SQL VAR chr_l_h_domcpac    IS STRING;
	EXEC SQL VAR chr_l_h_domcpbnkac IS STRING;
	EXEC SQL VAR chr_l_h_rowid      IS STRING;
	EXEC SQL VAR h_sys_dt     IS STRING;

	sqlca.sqlcode = 0;

	

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
						"Entered Function CR_Proc_MvToHisTrd\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf, 
					"The Account is  : %s\n", 
					chr_p_client);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf, 
					"The Ref. No. is : %s\n", 
					chr_p_refno);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
	}	   
	
	
	

	if (!strlen(chr_p_client))
	{
		APL_DATA_MISSING(	"Account", 
								APL_NULL_STRING, 
								APL_NULL_STRING );
		int_l_error_flag = APL_FAILURE;
	} 
	if (!strlen(chr_p_refno))
	{
		APL_DATA_MISSING(	"Ref.No.", 
								APL_NULL_STRING, 
								APL_NULL_STRING );
		int_l_error_flag = APL_FAILURE;
	} 

	if (APL_FAILURE == int_l_error_flag) APL_GOBACK_FAIL

	

	if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr)) APL_GOBACK_FAIL

	

	

	EXEC SQL SELECT INSTR_CODE, DOMESTIC_CPCLT, DOMCP_CUSTODYCLT, ROWID
	INTO :chr_l_h_instrcode_A, :chr_l_h_domcpac, :chr_l_h_domcpbnkac, :chr_l_h_rowid
	FROM DL_DEAL
	WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_DEAL_NF, 
														chr_p_client, 
														chr_p_refno, 
														APL_NULL_STRING);

	

	EXEC SQL SELECT SYS_DATE into :h_sys_dt FROM MT_EOMSYSDATE;
	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET( ERR_DEAL_NF,
														chr_p_client,chr_p_refno,"CEOMSYSDATE");	

	
	
	printf("Before insert %s|%s|%s\n",chr_p_client,chr_l_h_domcpac,chr_l_h_domcpbnkac);
	/*
	EXEC SQL INSERT INTO DL_HISDEAL
	SELECT a.*, b.CLN_NAME, c.CLN_NAME, d.CLN_NAME, e.INSTR_NAME, f.SYS_DATE
	FROM DL_DEAL a, MT_CLIENT b, MT_CLIENT c, MT_CLIENT d, MT_INSTRUMENT e, MT_EOMSYSDATE f
	WHERE a.rowid   = :chr_l_h_rowid
	AND   b.cln_code = RTRIM(:chr_p_client)
	AND   c.cln_code = :chr_l_h_domcpac
	AND   d.cln_code = :chr_l_h_domcpbnkac
	AND   e.instr_code  = :chr_l_h_instrcode_A ;
	*/
	/* For KOTAK As Counter party will come from party master*/

	IF_COND_EXISTS("DL_DEAL","SYSGEN_DEL_MVHIST") /* Changed by Dnyanesh: System generated trades should not go in history*/
	{
		EXEC SQL INSERT INTO DL_HISDEAL
		SELECT a.CLIENT, a.IDENTIY_NO, a.DEAL_DATE, a.SETL_DATE, a.COST, a.EX_ARENA, a.AMOUNT, a.CUSTODYCOMM, a.BROKERCOMM, a.STX_COMM, a.OTH_COMM, a.INSTRUMENT_DT, a.MONEY_SETL_DT, a.QTY, a.DOMESTIC_CPCLT, a.SPOTTRD_IND, a.ORIG_QTY, a.ORIG_AMOUNT, a.DEAL_FRM_ORD, a.ENTRY, a.REAPIRED_IND, a.DOMCP_CUSTODYCLT, a.CP_CLT, a.CP_CLTNAME, a.CLIENTOF, a.CLIENT_NOTE, a.FX_REQD, a.PAYLOC_IND, a.VERFIED_WITH, a.AMT_DIFFER, a.BRK_NO, a.FAILREASON_CD, a.FAIL_DET, a.PARTIAL_IND_B, a.FX_RT, a.AMEND_COUNT, a.NUMBER_A, a.REPORT_AT_EOM_IND, a.DATEOFBILLING, a.LCL_IDENTNO, a.INSTRUCT_PERSON, a.REC_INT_000, a.DEAL_CD, a.INSTR_CODE, a.CURRENCY_CD, a.DL_CLASS, a.ORIG_REFNO, a.DATEOF_INPUT, a.MAKER, a.MAKER_DT, a.DEAL_STAT, a.ACCESS_STAMP, a.INFO1, a.LOCATION_CD, a.REGINSTR_IND, a.STATUS_POS, a.STATUS, a.VAL_FDT, a.COMPREFNO, a.DATEOF_MARKFAIL, a.ALLOW_DROPDT, a.CHECKER, a.CHECKER_DT, a.INSTRCONV_IND, a.NDS_BLK_DT, a.LR_DL_CLASS, a.NDS_DATE, a.UNBLK_DATE, a.DELTA_000, a.DELTA_001, a.DELTA_003, a.DEL_REC_DATE, a.LAST_REG_DATE, a.LR_CHECK_DATE, a.LR_VALDATE, a.LRINSTR_DATE, a.REG_MSG_QTY, a.TMP_OUT_DT, a.TMP_OUT_DATE, a.TRANS_DATE, a.TOT_QTY, a.QTY_LOST, a.MRK_DL_FAILQTY, a.DL_COMPLETEQTY, a.OUT_REG_QTY, a.PEND_REG_QTY, a.RET_REG_QTY, a.STAMP_QTY, a.TEMP_OUT_QUANTITY, a.TEMP_RET_QUANTITY, a.VAL_DEED_QTY, a.HOST_DATE, a.LRNDS_BILLDT, a.LRNDS_DATE, a.LR_UNBLK_DATE, a.NUMBER_B, a.CLT_REQDEL_IND, a.MOD_HISPOS_IND, a.MOD_HISPOS_DATE, a.GL_CLIENT, a.CP_AMT, a.MSG_STAT, a.SUB_FAIL_CD, a.PARTIAL_IND_A, a.LOC_CHNG_IND, a.COMM_IDENT_NO, a.INSTRUCT_PERSONNM, a.CLIENTOF_CD, a.INTER_MED_PERSON, a.INTER_MED_PERSONNM, a.FXCCY, a.UNIQ_IDENT_NO, a.CNT_548, a.EXP_SETLDATE, a.RELATED_IDENT_NO, a.INFORMATON, a.SETTLEMENT_NO, a.MKT_TYPE, a.CLH_FLG, a.INTEREST, a.NET_AMT, a.PAYIN_DT, a.PAYOUT_DT, a.DEMAT_QTY, a.CONTRACT_REQ, a.EXCUM_FLG, a.CRN_NO, a.INTERFII_FLG, a.PAY_MODE, a.DL_SECSTATUS, a.DL_MNYSTATUS, a.AVAIL_QTY, a.ALLOT_QTY, a.SHORTAGE_QTY, a.CLN_DEPOACC, a.PLTOPL_FLG, a.ORIG_STATUS, a.MAP_FAILCODE, a.MATCH_FAILCODE, a.IS_MATCHED, a.EXCH_CODE, a.CONTRACT_CD, a.R_DELAY, a.SEBI_REPORTED, a.R_SETT_CODE, a.R_TRANS_CODE, a.R_TYPE, a.REPO_DATE, a.COMM_AMT, a.MF_SEQNO, b.CLN_NAME, c.PTY_NAME, d.PTY_NAME, e.INSTR_NAME, f.SYS_DATE, a.TRD_EXCH, a.TRD_SETL_NO, a.TRD_MKT_TYPE,a.STAMP_DUTY ,a.CSGL_TRADE_TYPE,a.DPM_TRANS_REF_NO,a.OTHER_CHARGES
		FROM DL_DEAL a, MT_CLIENT b, MT_PARTY c, MT_PARTY d, MT_INSTRUMENT e, MT_EOMSYSDATE f 
		WHERE a.rowid = :chr_l_h_rowid 
		AND b.cln_code = RTRIM(:chr_p_client) 
		AND c.pty_code = :chr_l_h_domcpac 
		AND d.PTY_code = :chr_l_h_domcpbnkac 
		AND e.instr_code = :chr_l_h_instrcode_A ;
	}
	
	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_DEAL_NF, 
														chr_p_client, 
														chr_p_refno, 
														APL_NULL_STRING);
	

	EXEC SQL INSERT INTO MS_HISMSGSTAT
	SELECT a.*,b.SYS_DATE
	FROM MS_MSGSTAT a, MT_EOMSYSDATE b
	WHERE a.client = RTRIM(:chr_p_client)
	AND   a.proc_init = RTRIM(:chr_p_refno);

	
	

	IS_ANY_ORA_ERROR

	 

	EXEC SQL INSERT INTO DL_HISMULT_REAS_CODES
				SELECT b.SYS_DATE,a.*
				FROM DL_MULT_REAS_CODES a, MT_EOMSYSDATE b
				WHERE a.CLIENT = RTRIM(:chr_p_client)
				AND   a.IDENTIY_NO = RTRIM(:chr_p_refno);

	IS_ANY_ORA_ERROR
	 

	EXEC SQL DELETE FROM DL_MULT_REAS_CODES 
				WHERE CLIENT	=	RTRIM(:chr_p_client)
				AND 	IDENTIY_NO		=	RTRIM(:chr_p_refno);	

	IS_ANY_ORA_ERROR
	
	EXEC SQL DELETE FROM DL_SFEREJ
            WHERE CLIENT  =  RTRIM(:chr_p_client)
            AND   IDENTIY_NO    =  RTRIM(:chr_p_refno);

   IS_ANY_ORA_ERROR

	

	if (APL_FAILURE == CR_Proc_MvToHisAud(	chr_p_client, 
													chr_p_refno, 
													'T',
													l_debug_info_ptr))
	{
		APL_GOBACK_FAIL
	}
	
	if (APL_FAILURE == CR_Proc_MvToHisLink(  chr_p_client,
                                       chr_p_refno,
                                       l_debug_info_ptr))
	{
		APL_GOBACK_FAIL
	}

	
	EXEC SQL DELETE FROM dl_deal 
	WHERE rowid = :chr_l_h_rowid;


	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_DEAL_NF, 
														chr_p_client, 
														chr_p_refno, 
														APL_NULL_STRING);
	



   EXEC SQL DELETE FROM DL_IPOAUDIT
	     WHERE CLIENT =:chr_p_client
             AND     IDENTIY_NO     =:chr_p_refno;
       IS_ANY_ORA_ERROR

	  

	
	EXEC SQL DELETE DL_SMI_PENDTXN
	WHERE CLIENT = RTRIM(:chr_p_client) AND
			IDENTIY_NO = RTRIM(:chr_p_refno);

	IS_ANY_ORA_ERROR

	

	

	EXEC SQL DELETE MS_MSGSTAT
	WHERE MS_MSGSTAT.CLIENT=RTRIM(:chr_p_client) AND
			MS_MSGSTAT.PROC_INIT=RTRIM(:chr_p_refno);

	IS_ANY_ORA_ERROR

	
	
	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Proc_MvToHisTrd with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);

   RETURN_FAILURE :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Proc_MvToHisTrd with errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);

}



int CR_Proc_MvToHisAud(	char *p_client, 
							char* p_indentity_no, 
							char	p_dealordflg,
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{

	

	struct sqlca sqlca;	
	int int_l_error_flag = APL_SUCCESS;
	char chr_l_fieldname[20] = APL_NULL_STRING;
	char chr_l_trcode_a[APL_FLAG_LENGTH] = APL_NULL_STRING;
	char chr_l_trailfor[APL_FLAG_LENGTH]	=	 APL_NULL_STRING;
	char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
						"Entered Function CR_Proc_MvToHisAud\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf, 
					"The Account is  : %s\n", 
					p_client);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf, 
					"The Ref. No. is : %s\n", 
					p_indentity_no);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf, 
					"The Trade Order Flag is : %c\n", 
					p_dealordflg);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
	}
	
	

	if (!strlen(p_client))
	{
		APL_DATA_MISSING(	"Account", 
								APL_NULL_STRING, 
								APL_NULL_STRING );
		int_l_error_flag = APL_FAILURE;
	} 
	if (!strlen(p_indentity_no))
	{
		APL_DATA_MISSING(	"Ref.No.", 
								APL_NULL_STRING, 
								APL_NULL_STRING );
		int_l_error_flag = APL_FAILURE;
	} 

	if (APL_FAILURE == int_l_error_flag) 
	{
		APL_GOBACK_FAIL;
	}

	if ( p_dealordflg == APL_NULL_CHAR )
	{
		p_dealordflg = 'T';
	}

	if ( APL_SUCCESS == CO_ChkErr( *l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL;
	}

	

	

	if ( p_dealordflg == 'T' )
	{
		chr_l_trailfor[0] = DEAL_TRAILFOR_IND;
		chr_l_trailfor[1] = '\0';

		

		EXEC SQL INSERT INTO DL_HISDEALSAUDIT 
		SELECT a.*, b.DATEOF_INPUT
		FROM DL_DEALAUDIT a, DL_DEAL b
		WHERE a.client = RTRIM(:p_client) AND a.IDENTIY_NO = RTRIM(:p_indentity_no)
		AND   b.client = RTRIM(:p_client) AND b.IDENTIY_NO = RTRIM(:p_indentity_no)
		AND   a.TRAIL_FOR = :chr_l_trailfor;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_REC_NOTFND, 
															p_client, 
															p_indentity_no, 
															"Audit Trail Records" );
	}
	else
	{
		chr_l_trailfor[0] = ORD_TRAIL_FOR;
		chr_l_trailfor[1] = '\0';

		

		EXEC SQL INSERT INTO DL_HISDEALSAUDIT 
		SELECT a.*, b.maker_dt
		FROM DL_DEALAUDIT a, OR_ORDERDETAILS b
		WHERE a.client = RTRIM(:p_client) AND a.IDENTIY_NO = RTRIM(:p_indentity_no)
		AND   b.client = RTRIM(:p_client) AND b.ORD_REFNO = RTRIM(:p_indentity_no)
		AND   a.TRAIL_FOR = :chr_l_trailfor;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_REC_NOTFND, 
															p_client, 
															p_indentity_no, 
															"Audit Trail Records" );
	}

   

	if ( p_dealordflg == 'T' )
	{
   	if ( l_mt_core_sys_params_struct_h.proc_reg_ind[0] == 'Y' )
		{
			strcpy(chr_l_fieldname,"trcode");
   		if ( APL_FAILURE == DL_Rtv_TrdChrVal(	p_client, 
															p_indentity_no,
															chr_l_fieldname, 
															chr_l_trcode_a,
															l_debug_info_ptr) )
			{
				APL_GOBACK_FAIL;
			}
			if ( VAL_RECDEAL(chr_l_trcode_a[0]) || chr_l_trcode_a[0]=='6' || chr_l_trcode_a[0]=='8')
			{
				if ( APL_FAILURE == CR_Proc_MvToHisReg(	p_client, 
																p_indentity_no, 
																l_debug_info_ptr) )
				{
					APL_GOBACK_FAIL;
				}
			}
		}
	}

	

	EXEC SQL DELETE 
		FROM 	DL_DEALAUDIT 
		WHERE CLIENT 	= RTRIM(:p_client) 
		AND 	IDENTIY_NO 	= RTRIM(:p_indentity_no);

	IS_ANY_ORA_ERROR
	
	


	
	
	APL_GOBACK_SUCCESS;

   RETURN_SUCCESS :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Proc_MvToHisAud with Success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);

   RETURN_FAILURE :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Proc_MvToHisAud with Errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);

}




int CR_Proc_MvToHisReg(	char *chr_p_client, 
							char* chr_p_refno, 
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{

	

	struct sqlca sqlca;	
	int int_l_error_flag = APL_SUCCESS;
	char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
						"Entered Function CR_Proc_MvToHisReg\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf, 
					"The Account is  : %s\n", 
					chr_p_client);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf, 
					"The Ref. No. is : %s\n", 
					chr_p_refno);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
	}
	
	

	if (!strlen(chr_p_client))
	{
		APL_DATA_MISSING(	"Account", 
								APL_NULL_STRING, 
								APL_NULL_STRING );
		int_l_error_flag = APL_FAILURE;
	} 
	if (!strlen(chr_p_refno))
	{
		APL_DATA_MISSING(	"Ref.No.", 
								APL_NULL_STRING, 
								APL_NULL_STRING );
		int_l_error_flag = APL_FAILURE;
	} 

	if (APL_FAILURE == int_l_error_flag) APL_GOBACK_FAIL

	

	if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr)) APL_GOBACK_FAIL

	

	

	EXEC SQL INSERT INTO DL_HISREGDET
	SELECT a.*, b.DATEOF_INPUT
	FROM DL_REGDET a, DL_DEAL b
	WHERE a.CLIENT = RTRIM(:chr_p_client) AND a.IDENTIY_NO = RTRIM(:chr_p_refno)
	AND   b.CLIENT = RTRIM(:chr_p_client) AND b.IDENTIY_NO = RTRIM(:chr_p_refno);

	IS_ANY_ORA_ERROR;

	

	EXEC SQL INSERT INTO DL_HISREGPAR
	SELECT a.*, b.DATEOF_INPUT
	FROM 	DL_REGPAR a, DL_DEAL b
	WHERE a.CLIENT 	= RTRIM(:chr_p_client) AND a.IDENTIY_NO = RTRIM(:chr_p_refno)
	AND	b.CLIENT	= RTRIM(:chr_p_client) AND b.IDENTIY_NO = RTRIM(:chr_p_refno); 

	IS_ANY_ORA_ERROR;

	if ( APL_ZERO_RESULT_SET )
	{
		APL_GOBACK_SUCCESS;
	}

	

	EXEC SQL DELETE FROM DL_REGPAR
	WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	IS_ANY_ORA_ERROR;

	

	EXEC SQL DELETE FROM DL_REGDET 
	WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	IS_ANY_ORA_ERROR;

	
	
	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Proc_MvToHisReg with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);

   RETURN_FAILURE :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Proc_MvToHisReg with errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);

}



int CR_Proc_MvToHisOrd(	char *chr_p_client, 
							char* p_orderident, 
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{

	

	struct sqlca sqlca;	
	int  int_l_error_flg = APL_SUCCESS;
	char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
						"Entered Function CR_Proc_MvToHisOrd\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf, 
					"The Account is  : %s\n", 
					chr_p_client);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf, 
					"The Ref. No. is : %s\n", 
					p_orderident);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
	}	   
	
	
	

	if (!strlen(chr_p_client))
	{
		APL_DATA_MISSING(	"Account", 
								APL_NULL_STRING, 
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	} 
	if (!strlen(p_orderident))
	{
		APL_DATA_MISSING(	"Ref.No.", 
								APL_NULL_STRING, 
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	} 

	if (APL_FAILURE == int_l_error_flg) 
	{
		APL_GOBACK_FAIL;
	}

	

	if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr)) 
	{
		APL_GOBACK_FAIL;
	}

	

	

	EXEC SQL INSERT INTO OR_HISORDER
	SELECT a.*, b.CLN_NAME, c.INSTR_NAME, d.SYS_DATE
	FROM OR_ORDERDETAILS a, MT_CLIENT b, MT_INSTRUMENT c, MT_EOMSYSDATE d
	WHERE a.CLIENT 		=	RTRIM(:chr_p_client)
	AND	a.ORD_REFNO	=	RTRIM(:p_orderident) 
	AND   b.CLN_CODE 		=	RTRIM(:chr_p_client) 
	AND   c.INSTR_CODE  		= 	a.INSTR_CODE;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_ORD_NOTFND, 
														chr_p_client, 
														p_orderident, 
														APL_NULL_STRING);

	

	EXEC SQL INSERT INTO OR_HISEXECORDER
				SELECT 	a.* 
				FROM		OR_EXECORDER a
				WHERE		a.CLIENT		= RTRIM(:chr_p_client)
				AND		a.ORD_REFNO	= RTRIM(:p_orderident);

	IS_ANY_ORA_ERROR;

	

	if (APL_FAILURE == CR_Proc_MvToHisAud(	chr_p_client, 
													p_orderident, 
													'O',
													l_debug_info_ptr))
	{
		APL_GOBACK_FAIL
	}
 
	 

	EXEC SQL DELETE OR_EXECORDER
			WHERE	CLIENT		= 	RTRIM(:chr_p_client)
			AND	ORD_REFNO	=	RTRIM(:p_orderident);

	IS_ANY_ORA_ERROR;

	

	EXEC SQL DELETE OR_ORDERDETAILS 
			WHERE CLIENT 		= RTRIM(:chr_p_client)
			AND	ORD_REFNO	= RTRIM(:p_orderident);

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_ORD_NOTFND, 
														chr_p_client, 
														p_orderident, 
														APL_NULL_STRING);

	
	
	APL_GOBACK_SUCCESS;

   RETURN_SUCCESS :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Proc_MvToHisOrd with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);

   RETURN_FAILURE :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Proc_MvToHisOrd with errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);

}

 


int CRUDBMvTrdHistFn(  char *chr_p_client,
                     char* chr_p_refno,
                     DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{

   

   struct sqlca sqlca;
   int  int_l_error_flag = APL_SUCCESS;
   char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;

   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   sqlca.sqlcode = 0;
   
   

   APL_IF_DEBUG
   {
      CO_ProcMonitor(   APL_OUT_FILE,
                  "Entered Function CRUDBMvTrdHistFn\n",
                  NULL,
                  NULL);
      memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf( chr_l_buf,
               "The Account is  : %s\n",
               chr_p_client);
      CO_ProcMonitor(   APL_OUT_FILE,
                  chr_l_buf,
                  NULL,
                  NULL);
      memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf( chr_l_buf,
               "The Ref. No. is : %s\n",
               chr_p_refno);
      CO_ProcMonitor(   APL_OUT_FILE,
                  chr_l_buf,
						NULL,
                  NULL);
   }


   

   if (!strlen(chr_p_client))
   {
      APL_DATA_MISSING( "Account",
                        APL_NULL_STRING,
                        APL_NULL_STRING );
      int_l_error_flag = APL_FAILURE;
   }
   if (!strlen(chr_p_refno))
   {
      APL_DATA_MISSING( "Ref.No.",
                        APL_NULL_STRING,
                        APL_NULL_STRING );
      int_l_error_flag = APL_FAILURE;
   }

   if (APL_FAILURE == int_l_error_flag) APL_GOBACK_FAIL

   

   

   
	

    EXEC SQL INSERT INTO DL_RUHISDEAL
   SELECT a.* , b.SYS_DATE FROM DL_RUDEAL a, PRO_SYS_DATE b 
	WHERE a.client = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

	 IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_TRD_NOTFND_INRRMM, 
														chr_p_client,
                                          chr_p_refno,
                                          APL_NULL_STRING);

	EXEC SQL DELETE DL_RUDEAL
	WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

    IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET( ERR_TRD_NOTFND_INRRMM,
                                          chr_p_client,
                                          chr_p_refno,
                                          APL_NULL_STRING);

	EXEC SQL DELETE DL_RUDEAL_TMP                                  
	WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);            

	IS_ANY_ORA_ERROR

	 APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
      APL_IF_DEBUG
      {
         CO_ProcMonitor(   APL_OUT_FILE,
                     "Leaving Function CRUDBMvTrdHistFn with success\n",
                     NULL,
                     NULL);
      }
      return(APL_SUCCESS);

   RETURN_FAILURE :
      APL_IF_DEBUG
      {
         CO_ProcMonitor(   APL_OUT_FILE,
                     "Leaving Function CRUDBMvTrdHistFn with errors\n",
                     NULL,
                     NULL);
      }
      return(APL_FAILURE);

}





	int CR_Proc_MvToHisLink(  char *chr_p_client,
                     	 char* chr_p_refno,
                     	 DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
	{
		struct sqlca sqlca;
		int  int_l_error_flag = APL_SUCCESS;
		int int_l_seq_num = 0;
		short i_sequence_num  =0;
		char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;

		#ifdef APL_THREADS
      	APL_SET_CONTEXT
      	EXEC SQL CONTEXT USE :my_ctx_local;
   	#endif			
		sqlca.sqlcode = 0;


		APL_IF_DEBUG
   	{
      	CO_ProcMonitor(   APL_OUT_FILE,
         	         "Entered Function CR_Proc_MvToHisLink \n",
            	      NULL,
               	   NULL);
      	memset( chr_l_buf, NULL, BUFFER_LEN );
      	sprintf( chr_l_buf,
         	      "The Account is  : %s\n",
            	   chr_p_client);
      	CO_ProcMonitor(   APL_OUT_FILE,
         	         chr_l_buf,
            	      NULL,
               	   NULL);
      	memset( chr_l_buf, NULL, BUFFER_LEN );
      	sprintf( chr_l_buf,
         	      "The Ref. No. is : %s\n",
            	   chr_p_refno);
      	CO_ProcMonitor(   APL_OUT_FILE,
         	         chr_l_buf,
            	      NULL,
            	      NULL);
   	}
		

   if (!strlen(chr_p_client))
   {
      APL_DATA_MISSING( "Account",
                        APL_NULL_STRING,
                        APL_NULL_STRING );
      int_l_error_flag = APL_FAILURE;
   }
   if (!strlen(chr_p_refno))
   {
      APL_DATA_MISSING( "Ref.No.",
                        APL_NULL_STRING,
                        APL_NULL_STRING );
      int_l_error_flag = APL_FAILURE;
   }

   if (APL_FAILURE == int_l_error_flag) APL_GOBACK_FAIL

   

   if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr)) APL_GOBACK_FAIL

   
	EXEC SQL DECLARE CMSGLINK_CUR CURSOR FOR
				SELECT INDEN_NUM 
   			FROM DL_MSGLINK
   			WHERE CLIENT = RTRIM(:chr_p_client) AND IDENTIY_NO = RTRIM(:chr_p_refno);

   IS_ANY_ORA_ERROR
	
   EXEC SQL OPEN CMSGLINK_CUR;

  IS_ANY_ORA_ERROR
  for( ; ; )
  {
		EXEC SQL FETCH CMSGLINK_CUR INTO :int_l_seq_num ;
		if(sqlca.sqlcode == 1403)
		break;

		EXEC SQL INSERT INTO DL_HISMSGLINKDET
   	SELECT b.SYS_DATE,a.*
		FROM DL_MSGLINKDET a,PRO_SYS_DATE b	
		WHERE INDEN_NUM = :int_l_seq_num;
	
		IS_ANY_ORA_ERROR
	
		EXEC SQL INSERT INTO DL_HISMSGLINK
   	SELECT b.SYS_DATE,a.CLIENT,a.IDENTIY_NO,a.MSG_IN_OUT_IND,
				 a.SWIFT_MSG_NO,a.DATE_OF_INPUT,a.INFORMATION,a.INDEN_NUM,
				 a.DL_REP_IDENTNO,a.MESSAGE_DET_A,a.MESSAGE_DET_B,
				 a.MESSAGE_DET_C,a.MESSAGE_DET_D,a.MESSAGE_DET_E,a.PSETPARTY,a.PLACE_CD,a.NARRATIVE
		FROM DL_MSGLINK a,PRO_SYS_DATE b
		WHERE INDEN_NUM = :int_l_seq_num;
   
	
		IS_ANY_ORA_ERROR

		EXEC SQL DELETE
      	FROM  DL_MSGLINKDET 
			WHERE INDEN_NUM = :int_l_seq_num;

 	  IS_ANY_ORA_ERROR
	
		EXEC SQL DELETE
      	FROM  DL_MSGLINK
			WHERE INDEN_NUM = :int_l_seq_num;
	
   	IS_ANY_ORA_ERROR
	}
	APL_GOBACK_SUCCESS;

   RETURN_SUCCESS :
      APL_IF_DEBUG
      {
         CO_ProcMonitor(   APL_OUT_FILE,
                     "Leaving Function CR_Proc_MvToHisLink with Success\n",
                     NULL,
                     NULL);
      }
      return(APL_SUCCESS);

   RETURN_FAILURE :
      APL_IF_DEBUG
      {
         CO_ProcMonitor(   APL_OUT_FILE,
                     "Leaving Function CR_Proc_MvToHisLink with Errors\n",
                     NULL,
                     NULL);
      }
      return(APL_FAILURE);

}

int CR_Proc_MvToHisTrdTmp(  char* p_asofdate,
                         DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{

      struct sqlca sqlca;
      int 		int_l_seq_num = 0;
      short 	i_sequence_num  =0;
		char 		chr_l_sys_date[APL_DATE_LEN]			=APL_NULL_STRING;
		char 		chr_l_tmp_date[APL_DATE_LEN]			=APL_NULL_STRING;
		char     chr_l_h_client_a[APL_CLIENT_LENGTH]     = APL_NULL_STRING;
		char     chr_l_h_refno_A[APL_TXNREFNO_LEN]      = APL_NULL_STRING;
		short		l_i_account								=	0;
		short		l_i_refno								=	0;
		char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	EXEC SQL BEGIN DECLARE SECTION;	
	EXEC SQL VAR chr_l_sys_date IS STRING;
	EXEC SQL VAR chr_l_tmp_date IS STRING;
	EXEC SQL VAR chr_g_final_date IS STRING;
	EXEC SQL VAR chr_l_h_client_a IS STRING;
	EXEC SQL VAR chr_l_h_refno_A IS STRING;
	EXEC SQL END DECLARE SECTION;	

      APL_IF_DEBUG
      {
         CO_ProcMonitor(   APL_OUT_FILE,
                     "Entered Function CR_Proc_MvToHisTrdTmp \n",
                     NULL,
                     NULL);
         memset( chr_l_buf, NULL, BUFFER_LEN );
         sprintf( chr_l_buf,
                  "The as of chr_date is  : %s\n",
                  p_asofdate);
         CO_ProcMonitor(   APL_OUT_FILE,
                     chr_l_buf,
                     NULL,
                     NULL);
		}
	
	EXEC SQL SELECT SYS_DATE
				INTO :chr_l_sys_date
				FROM PRO_SYS_DATE;

	IS_ANY_ORA_ERROR;
	printf(":chr_l_sys_date is %s\n",chr_l_sys_date);
         memset( chr_l_buf, NULL, BUFFER_LEN );
         sprintf( chr_l_buf,
                  "The sys chr_date is  : %s\n",
                  chr_l_sys_date);
         CO_ProcMonitor(   APL_OUT_FILE,
                     chr_l_buf,
                     NULL,
                     NULL);
	
	EXEC SQL SELECT to_date(:chr_l_sys_date) -7 
				INTO :chr_l_tmp_date
				FROM DUAL;

	IS_ANY_ORA_ERROR;
         memset( chr_l_buf, NULL, BUFFER_LEN );
         sprintf( chr_l_buf,
                  "The stmp chr_date is  : %s\n",
                  chr_l_tmp_date);
         CO_ProcMonitor(   APL_OUT_FILE,
                     chr_l_buf,
                     NULL,
                     NULL);
	
	if(MS_Rtv_NxtBussDtSch(chr_l_tmp_date,
		     							 chr_g_final_date,
										 l_debug_info_ptr)==APL_FAILURE)
	{
		APL_GOBACK_FAIL

	}
	printf(":chr_g_final_date is %s\n",chr_g_final_date);
         memset( chr_l_buf, NULL, BUFFER_LEN );
         sprintf( chr_l_buf,
                  "The chr_g_final_date chr_date is  : %s\n",
                  chr_g_final_date);
         CO_ProcMonitor(   APL_OUT_FILE,
                     chr_l_buf,
                     NULL,
                     NULL);

	EXEC SQL DELETE FROM DL_COPYHISTORY; 
	IS_ANY_ORA_ERROR; 

	EXEC SQL DELETE FROM DL_TMPMSGLINKDET;
	IS_ANY_ORA_ERROR;

	EXEC SQL DELETE FROM DL_TMPMSGLINK;
	IS_ANY_ORA_ERROR;

		
	EXEC SQL DECLARE trd_cur CURSOR FOR
   SELECT CLIENT,IDENTIY_NO
   FROM DL_DEAL
   WHERE ALLOW_DROPDT <= TO_DATE(:p_asofdate)
   AND   REPORT_AT_EOM_IND   = 'Y'
	AND   (INSTRUMENT_DT>to_date(:chr_g_final_date)
			or MOD_HISPOS_DATE> to_date(:chr_g_final_date)) 
	AND instr(nvl(MSG_STAT,' '),'Z')=0;

   EXEC SQL OPEN trd_cur;
   IS_ANY_ORA_ERROR

   for (;;)
   {
      

      memset(chr_l_h_client_a,NULL, APL_CLIENT_LENGTH);
      memset(chr_l_h_refno_A,NULL, APL_TXNREFNO_LEN);
      l_i_account = 0;
      l_i_refno = 0;

      EXEC SQL FETCH trd_cur INTO   :chr_l_h_client_a:l_i_account,
                                    :chr_l_h_refno_A:l_i_refno ;

      IS_ANY_ORA_ERROR

		printf("l_h_account is %s\n",chr_l_h_client_a);
		printf("l_h_refno is %s\n",chr_l_h_refno_A);

      if (APL_ZERO_RESULT_SET) break;

		EXEC SQL INSERT INTO DL_COPYHISTORY
					SELECT * FROM DL_DEAL
					WHERE CLIENT=:chr_l_h_client_a
					AND IDENTIY_NO=:chr_l_h_refno_A;
		IS_ANY_ORA_ERROR;

		EXEC SQL INSERT INTO DL_TMPMSGLINK 
					SELECT * FROM DL_MSGLINK 
					WHERE CLIENT=:chr_l_h_client_a
					AND IDENTIY_NO=:chr_l_h_refno_A;

		IS_ANY_ORA_ERROR;

		EXEC SQL INSERT INTO DL_TMPMSGLINKDET
					SELECT * FROM DL_MSGLINKDET 
					WHERE  INDEN_NUM IN (SELECT INDEN_NUM 
													  FROM DL_MSGLINK WHERE CLIENT=:chr_l_h_client_a
													  AND	IDENTIY_NO=:chr_l_h_refno_A);

		IS_ANY_ORA_ERROR;


	}


   

   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
      APL_IF_DEBUG
      {
         CO_ProcMonitor(   APL_OUT_FILE,
                     "Leaving Function CR_Proc_MvToHisTrdTmp with success\n",
                     NULL,
                     NULL);
      }
      return(APL_SUCCESS);

   RETURN_FAILURE :
      APL_IF_DEBUG
      {
         CO_ProcMonitor(   APL_OUT_FILE,
                     "Leaving Function CR_Proc_MvToHisTrdTmp with errors\n",
                     NULL,
                     NULL);
      }
      return(APL_FAILURE);

}
	
	

int   MS_Rtv_NxtBussDtSch(const char     *chr_p_inp_date,
                           char           *p_out_date,
                           DEBUG_INFO_STRUCT_H   **l_debug_info_ptr
                           )
{
   struct sqlca sqlca;
   char  chr_out_date[APL_DATE_LEN]  =  APL_NULL_STRING;
   short i_out_date  =  0;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

		/*Smita - Changed Col Name - HDFCCA Base Version*/
   EXEC SQL select min(H_DATE) - 1
   into  :chr_out_date:i_out_date
   from MT_HOLIDAY
   where STATUS='AA'
	and BANK_IND='Y'
   connect by prior H_DATE - 1 = H_DATE
   and prior STATUS = STATUS
	and prior BANK_IND = BANK_IND
   start with H_DATE=:chr_p_inp_date and STATUS='AA' and BANK_IND='Y';

   IS_ANY_ORA_ERROR

   if (i_out_date == -1)
   {
      strcpy(chr_out_date,chr_p_inp_date);
   }

   strcpy(p_out_date,chr_out_date);

   APL_GOBACK_SUCCESS
     RETURN_SUCCESS  :
     {
      return (APL_SUCCESS);
     }
     RETURN_FAILURE  :
     {
        return (APL_FAILURE);
     }
	}

int CR_Proc_MvToHisTxTracker(	char *chr_p_client, 
							char* chr_p_refno, 
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{


	

	struct sqlca sqlca;	
	int  int_l_error_flag = APL_SUCCESS;
	char chr_l_h_rowid[APL_ROWID_LEN] = APL_NULL_STRING;
	char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	
	EXEC SQL VAR chr_l_h_rowid      IS STRING;

	sqlca.sqlcode = 0;

	

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
						"Entered Function CR_Proc_MvToHisTxTracker\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf, 
					"The Account is  : %s\n", 
					chr_p_client);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf, 
					"The Ref. No. is : %s\n", 
					chr_p_refno);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
	}	   
	
	
	

	if (!strlen(chr_p_client))
	{
		APL_DATA_MISSING(	"Account", 
								APL_NULL_STRING, 
								APL_NULL_STRING );
		int_l_error_flag = APL_FAILURE;
	} 
	if (!strlen(chr_p_refno))
	{
		APL_DATA_MISSING(	"Ref.No.", 
								APL_NULL_STRING, 
								APL_NULL_STRING );
		int_l_error_flag = APL_FAILURE;
	} 

	if (APL_FAILURE == int_l_error_flag) APL_GOBACK_FAIL

	

	if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr)) APL_GOBACK_FAIL

	

	

	EXEC SQL SELECT ROWID
	INTO :chr_l_h_rowid
	FROM DL_TAX_TRACKER
	WHERE CLIENT = RTRIM(:chr_p_client) AND REF_NO = RTRIM(:chr_p_refno);

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	"Tax Record not found", 
														chr_p_client, 
														chr_p_refno, 
														APL_NULL_STRING);

	EXEC SQL INSERT INTO DL_TAX_TRACKER_HIS
	SELECT A.*
	FROM DL_TAX_TRACKER A
	WHERE A.rowid   = :chr_l_h_rowid;
	
	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	"Tax Record not found", 
														chr_p_client, 
														chr_p_refno, 
														APL_NULL_STRING);
	


	
	EXEC SQL DELETE FROM DL_TAX_TRACKER 
	WHERE rowid = :chr_l_h_rowid;


	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	"Tax Record not found", 
														chr_p_client, 
														chr_p_refno, 
														APL_NULL_STRING);
	

	
	
	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Proc_MvToHisTxTracker with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);

   RETURN_FAILURE :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Proc_MvToHisTxTracker with errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);

}