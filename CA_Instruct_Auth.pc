/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*******************************************************************************
 *
 * Module Name         :         Corporate Actions
 *
 * File Name           :         CA_Instruct_Auth.pc
 *
 * Description         :
 *
 *            Version Control Block
 *
 * Date        Version          Author          Description         RFS No.
 * ---------   --------  ---------------------  ------------------  --------------
 * 16/01/2007   1.0             Jiger           New File
 * 21/12/2011   1.1             Naren V         Program is modified
 *                                              to get the DB login
 *                                              details in preceden
 *                                              ce order first from 
 *                                              config file, and if
 *                                              unavailable,   then  
 *                                              a  decrypted  value                     
 *                                              from  an  encrypted  
 *                                              file by calling the  
 *                                              remote application.  
 * *****************************************************************************/


#include "Intellect_Common.h"
#include "Intellect_Interface.h"
#include "BT_Common.h"
#include "CO_IndStructdef.h"
#include "CO_Commdef.h"
//#include<stdlib.h>


/********** Web Custody Single Login Changes : Gouse *********/

char g_custody_web_ind[2];
#define WEB_INDICATOR  "W"

/**********************************************************************/


EXEC SQL INCLUDE SQLCA.H;

char chr_l_sys_date[APL_DATE_LEN] = APL_NULL_STRING;

int main(int argc,char **argv)
{

	/********** Web Custody Single Login Changes : Gouse *********/

	char *chr_webdata;
	char g_proc_data[4001] = APL_NULL_STRING;
	char p_web_data[4001] = APL_NULL_STRING;

	/**********************************************************************/

	FILE *ca_ilogfile = NULL;
	FILE* ca_logfile = APL_OUT_FILE;

	printf("\n\t********* Entered main of CA_Instruct_Auth.pc *********\n");
	FILE *l_finifile;

/*	CO_ProcMonitor(ca_ilogfile,"Entered CA_Instruct_Auth.pc",NULL,NULL);*/

	DEBUG_INFO_STRUCT_H *l_debug_info_ptr = (DEBUG_INFO_STRUCT_H *) NULL;
	INTL_ENV_DATA_STRUCT_H l_intl_env_data_h;

	char l_temp_processing_status[51] = APL_NULL_STRING;
	short i_temp_processing_status = -1;

	char chr_l_hoff_file[PATH_LENGTH] = APL_NULL_STRING;
	char chr_l_inifile[PATH_LENGTH] = APL_NULL_STRING;
	struct sqlca sqlca;
	int int_retval = 0;

	/* char chr_uname[APL_USERID_LEN] = APL_NULL_STRING; * Commented for Web Intellect Encryption - Decryption Changes - Naren V */
	char chr_uname[APL_USERID_LEN+20] = APL_NULL_STRING; /* Increased the size of User Id for Web Intellect Encryption - Decryption Changes - NarenV */
	char chr_custody_id_b[APL_USERID_LEN] = APL_NULL_STRING;
	/* char chr_passwd[APL_USERID_LEN] = APL_NULL_STRING; * Commented for Web Intellect Encryption - Decryption Changes - Naren V */
	char chr_passwd[APL_PASSWD_LEN] = APL_NULL_STRING; /* Added for Web Intellect Encryption - Decryption Changes - Naren V */

	EXEC SQL BEGIN DECLARE SECTION;
	int int_l_count = 0;
	EXEC SQL VAR chr_l_sys_date IS STRING;
	EXEC SQL VAR chr_uname IS STRING;
	EXEC SQL VAR chr_passwd IS STRING;
	EXEC SQL END DECLARE SECTION;

	memset(&l_intl_env_data_h, NULL, sizeof(INTL_ENV_DATA_STRUCT_H));
   	strcpy(l_intl_env_data_h.usr, argv[3]);
   	strcpy(l_intl_env_data_h.h_mode, argv[4]);
   	strcpy(l_intl_env_data_h.processtion, argv[5]);
   	strcpy(l_intl_env_data_h.auth_req, argv[6]);
   	strcpy(l_intl_env_data_h.subprocess, argv[7]);
   	strcpy(l_intl_env_data_h.h_process, argv[8]);


	/********** Web Custody Single Login Changes : Vinay Kalaskar *********/

	strcpy(g_proc_data,argv[9]);
	
	printf("\n\n=== Displaying PROC_DATA ====== :|%s|\n",g_proc_data);
	fflush(stdout);

    strcpy(p_web_data,strtok_r(g_proc_data,WEB_INDICATOR,&chr_webdata));

	if(chr_webdata != NULL)
	{
		strcpy(g_custody_web_ind,"W");
	    printf("=== System Running As Web : |%s|\n\n",g_custody_web_ind);
	}
    else
	{
		strcpy(g_custody_web_ind,"C");
	    printf("=== System Running As Custody : |%s|\n\n",g_custody_web_ind);
	}


	/**********************************************************************/



	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");
	if ( ( l_finifile = fopen(chr_l_inifile,"r") ) == NULL)
	{
		APL_GOBACK_FAIL
	}
	sqlca.sqlcode = 0;

	//APL_FETCH_DB_LOGIN_DETAILS(l_finifile, chr_custody_id_b, chr_uname, chr_passwd, APL_OUT_FILE, &l_debug_info_ptr)

	/* if ( CO_ReadToken(l_finifile,"WEB_INTL_DB_USR",chr_uname,l_debug_info_ptr) == APL_FAILURE)
        {
                printf("KS --- Could not find DB username \n EXITING \n FAILED IN INSTRUCTION AUTH");
                APL_GOBACK_FAIL
        }
	if ( CO_ReadToken(l_finifile,"WEB_INTL_DB_PWD",chr_passwd,l_debug_info_ptr) == APL_FAILURE)
        {
                printf("KS --- Could not find DB password \n EXITING \n FAILED IN INSTRUCTION AUTH");
                APL_GOBACK_FAIL
	} *** Commented for Web Intellect Encryption - Decryption Changes **** Naren V */

           
	/** Web Intellect Encryption - Decryption Changes - Start -  Naren V **/
	APL_FETCH_DB_LOGIN_DETAILS(l_finifile, "W", chr_uname, chr_passwd, APL_OUT_FILE, &l_debug_info_ptr)

	if ( !strlen(chr_uname) )
	{
		CO_ProcMonitor(APL_OUT_FILE,"\n Could not find Web Int DB username \n EXITING \n FAILED IN INSTRUCTION AUTH",NULL,NULL);
		APL_GOBACK_FAIL
        }

	if ( !strlen(chr_passwd) )
	{
		CO_ProcMonitor(APL_OUT_FILE,"\n Could not find Web Int DB password \n EXITING \n FAILED IN INSTRUCTION AUTH",NULL,NULL);
		APL_GOBACK_FAIL
	} 
	/** Web Intellect Encryption - Decryption Changes - End -  Naren V **/

	printf("\t********* Connecting to Database .........\n");
	
	EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;

	IS_ANY_ORA_ERROR
	printf("\t********* argv[0] |%s| argv[1] |%s| argv[2] |%s| \n",argv[0],argv[1],argv[2]);


	if (APL_FAILURE == CO_Rtv_RptFileName( "CA_Auth",
						APL_LOGFILE_DESC,
						100,
						argv[5],
						argv,
						&ca_ilogfile,
						&l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	printf("\t*********Entering SYS_BATCHPROC for update\n");
	EXEC SQL 
	SELECT PROCESSING_STATUS into :l_temp_processing_status:i_temp_processing_status
	FROM SYS_BATCHPROC
	WHERE PROCESS_NAME=:argv[0]
		AND PROC_INIT=:argv[1]
		AND STARTDATE=:argv[2]
		AND STATUS='started'
	FOR UPDATE OF PROCESSING_STATUS,STATUS;
	IS_ANY_ORA_ERROR

	if(APL_ZERO_RESULT_SET)
	{
		CO_ProcMonitor(ca_ilogfile,"E:No entry in batch_in_proc\n",NULL,NULL);
		APL_GOBACK_FAIL
	}

	if (APL_FAILURE == CO_RtvSysParams(&l_debug_info_ptr))
	{
		CO_ProcMonitor(ca_ilogfile, "Error In Getting System Parameters", NULL, NULL);
		CO_Proc_RptClose(ca_ilogfile, &l_debug_info_ptr);
		APL_GOBACK_FAIL
	}

	/* Not required
	EXEC SQL SELECT to_char(SYS_DATE, 'DD/MM/YYYY')
	into :chr_l_sys_date FROM PRO_SYS_DATE;

	IS_ANY_ORA_ERROR

	printf("\n\t********* ORA ERROR -- [%d]\n", sqlca.sqlcode);
	printf("\t********* System date |%s|\n", chr_l_sys_date);
	*/
	fflush(stdout);

	fprintf(ca_ilogfile,"System Date : %s\n",chr_l_sys_date);

	CO_ProcMonitor(ca_ilogfile,"Start Processing\n",&l_debug_info_ptr,&l_intl_env_data_h);

	printf("\t********* Param string recd is [%s]\n", argv[9]);
	printf("\t********* Calling function CA_Instruct_Auth\n");
	int_retval = CA_Instruct_Auth(argv[9], &l_intl_env_data_h, ca_ilogfile, &l_debug_info_ptr);

	if(int_retval == APL_FAILURE)
	{
		CO_ProcMonitor(ca_ilogfile,"Returned unsucessfully from CA_Instruct_Auth\n",&l_debug_info_ptr,&l_intl_env_data_h);
	}

	CO_ProcMonitor(ca_ilogfile,"Finished Processing\n",&l_debug_info_ptr,&l_intl_env_data_h);

	RETURN_SUCCESS :
	EXEC SQL UPDATE SYS_BATCHPROC
	SET  status = 'completed'
	WHERE PROCESS_NAME=:argv[0]
	AND   PROC_INIT=:argv[1]
	AND   STARTDATE=:argv[2]
	AND   STATUS='started';

	EXEC SQL COMMIT WORK RELEASE;
	fprintf(ca_ilogfile,"Successfully Exiting the program CA Instruct Authorization\n");
	CO_Proc_RptClose(ca_ilogfile, &l_debug_info_ptr);
	fclose(l_finifile);
	exit(APL_SUCCESS);


	RETURN_FAILURE :
	EXEC SQL COMMIT WORK RELEASE;
	fprintf(ca_ilogfile,"Unsuccessfully Exiting the program CA Instruct Authorization\n");
	fclose(l_finifile);
	exit(APL_FAILURE);

}


int CA_Instruct_Auth(char *p_param_str,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,FILE *p_logfile,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	printf("\n\t********* Entered function CA_Instruct_Auth *********\n");

	FILE *ca_ilogfile;
        INTL_ENV_DATA_STRUCT_H l_intl_env_data_h;

	ca_ilogfile = p_logfile;

	char **temp;
	char chr_sys_access_stamp[APL_DATE_LEN] = APL_NULL_STRING;
	char l_auth_record[100][100];
	char l_corp_id[25] = APL_NULL_STRING;
        char l_cln_code[20] = APL_NULL_STRING;
	char l_event_type[5] = APL_NULL_STRING;
	char l_access_stamp[APL_DATE_LEN] = APL_NULL_STRING;
	char l_acc_stmp_ca[APL_DATE_LEN] = APL_NULL_STRING;
	char l_acc_stmp_sm[APL_DATE_LEN] = APL_NULL_STRING;

	int i = 0;
        int l_int_num = 0;
        int l_int_num1 = 0;

	// Retrieve the system date & time in string - chr_sys_access_stamp
        if(CO_RtvMachDtTime(chr_sys_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
        {
        	APL_GOBACK_FAIL
        }
	printf("Retrieved sys date = |%s|\n", chr_sys_access_stamp);

	printf("\t********* Splitting the main param string [%s]\n", p_param_str);
	fflush(stdout);
	fprintf(ca_ilogfile,"Main Param String : [%s]\n", p_param_str);
	if(APL_FAILURE == CO_SplitStr(p_param_str, '|', &l_int_num, &temp))
	{
	CO_ProcMonitor(ca_ilogfile,"Failure from first CO_SplitStr with seperator as |",l_debug_info_ptr,NULL);
		APL_GOBACK_FAIL
	}

	printf("Number of arguments for pipe seperator = |%d|\n", l_int_num);
	fflush(stdout);
	fprintf(ca_ilogfile,"Number of records to be Authorized : [%d]\n", l_int_num);

	for(i=0; i<l_int_num; i++)
	{
		strcpy(l_auth_record[i], temp[i]);
		printf("temp[%d] -- l_auth_record[%d] -- |%s|\n", i, i, l_auth_record[i]);
	}

	for(i=0; i<l_int_num; i++)
	{
		printf("\t********* in the Auth for loop\n");
		printf("l_auth_record[%d] -- |%s|\n", i, l_auth_record[i]);
		fprintf(ca_ilogfile,"Record %d to be authorized -- [%s]\n", i+1, l_auth_record[i]);

		if(APL_FAILURE == CO_SplitStr(l_auth_record[i], ';', &l_int_num1, &temp))
		{
			CO_ProcMonitor(ca_ilogfile,"Failure from first CO_SplitStr",l_debug_info_ptr,NULL);
			APL_GOBACK_FAIL
		}

		printf("Number of arguments for semi colon seperator = |%d|\n", l_int_num1);
		
		strcpy(l_corp_id, temp[0]);
		strcpy(l_cln_code, temp[1]);
		strcpy(l_access_stamp, temp[2]);
		strcpy(l_event_type, temp[3]);

		printf("l_corp_id 	-- |%s|\n", l_corp_id);
		printf("l_cln_code 	-- |%s|\n", l_cln_code);
		printf("l_access_stamp 	-- |%s|\n", l_access_stamp);
		printf("l_event_type 	-- |%s|\n", l_event_type);

		fprintf(ca_ilogfile,"\tRecord %d corp id	|%s|\n", i+1, l_corp_id);
		fprintf(ca_ilogfile,"\tRecord %d client code	|%s|\n", i+1, l_cln_code);
		fprintf(ca_ilogfile,"\tRecord %d access stamp	|%s|\n", i+1, l_access_stamp);
		fprintf(ca_ilogfile,"\tRecord %d event type	|%s|\n", i+1, l_event_type);

		// Fetching the access stamp for given record from CA_INSTRUCTION
		EXEC SQL
		SELECT ACCESS_STAMP into :l_acc_stmp_ca
		FROM	CA_INSTRUCTION
		WHERE	CORP_ID = :l_corp_id
			AND CLN_CODE = :l_cln_code;
		IS_ANY_ORA_ERROR

		printf("Fetched access stamp from CA_INSTRUCTION -- |%s|\n", l_acc_stmp_ca);
		printf("Access stamp sent in param string	 -- |%s|\n", l_access_stamp);

		// If this access stamp does not match with the access stamp sent, then break
		if(strcmp(l_acc_stmp_ca, l_access_stamp) != 0)
		{
			printf("Access stamp does not match.....So, leaving\n");
			break;
		}

		/* 
		Commented -- Not required
		// Fetching the access stamp for given record from CA_SM_RESOLUTION
		EXEC SQL
		SELECT ACCESS_STAMP into :l_acc_stmp_sm
		FROM	CA_SM_RESOLUTION
		WHERE	CORP_ID = :l_corp_id
			AND CLN_CODE = :l_cln_code;
		IS_ANY_ORA_ERROR

		// If this access stamp does not match with the access stamp sent, then break
		if(strcmp(l_acc_stmp_sm, l_access_stamp) != 0)
		{
			break;
		}
		Commented -- Not required 
		*/

		printf("Authorizing the record in CA_INSTRUCTION\n");
		EXEC SQL
		UPDATE CA_INSTRUCTION
		SET	STATUS = 'AA',
			ACCESS_STAMP = :chr_sys_access_stamp,
			CHECKER = :p_intl_envdatastruct_h->usr,
			CHECKER_DT = :chr_sys_access_stamp
		WHERE	CORP_ID = :l_corp_id
			AND CLN_CODE = :l_cln_code;
		IS_ANY_ORA_ERROR
		printf("CA_INSTRUCTION update  ORA -- [%d]\n", sqlca.sqlcode);
		fprintf(ca_ilogfile,"Authorized record in CA_INSTRUCTION\n");

		if(strcmp(l_event_type, "SM") == 0)
		{
			printf("In SM Event type and Authorizing the record in CA_SM_RESOLUTION\n");
			EXEC SQL
			UPDATE CA_SM_RESOLUTION
			SET	STATUS = 'AA',
				ACCESS_STAMP = :chr_sys_access_stamp,
				CHECKER = :p_intl_envdatastruct_h->usr,
				CHECKER_DT = :chr_sys_access_stamp
			WHERE	CORP_ID = :l_corp_id
				AND CLN_CODE = :l_cln_code 
				AND STATUS='UU'; // Status condition is added By Kalyan on 18/05/2007
			IS_ANY_ORA_ERROR
			printf("CA_SM_RESOLUTION update  ORA -- [%d]\n", sqlca.sqlcode);
			fprintf(ca_ilogfile," and CA_SM_RESOLUTION\n");
		}
	}

	EXEC SQL COMMIT;
	IS_ANY_ORA_ERROR

	RETURN_SUCCESS  :
	{
		fprintf(ca_ilogfile,"Success from function CA_Instruct_Auth \n");
		CO_FreeErrLst(l_debug_info_ptr);
		fflush(ca_ilogfile);
		return(APL_SUCCESS);
	}

	RETURN_FAILURE  :
	{
		fprintf(ca_ilogfile,"Failure from function CA_Instruct_Auth -- ORA -- [%d]\n",sqlca.sqlcode);
		CO_FreeErrLst(l_debug_info_ptr);
		fflush(ca_ilogfile);
		return(APL_FAILURE);
	}
}
