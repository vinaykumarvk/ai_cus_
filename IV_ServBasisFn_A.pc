













 
#include "stdio_64.h"
#include <string.h>  
#include <stdlib.h>
#include "IV_Control_A.h"

EXEC SQL INCLUDE SQLCA;



int IV_Mod_IVSRVBasisNew(const IV_CLIENT_SERV_BASIS_STRUCT *p_iv_client_serv_basis_struct, int *int_p_retstat, 
		     DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	extern int CO_RtvSysDtTime(char *chr_l_sys_date_time,DEBUG_INFO_STRUCT_H **l_debug_info_ptr);/* vinay */
	
	char *chr_l_last = (char *)NULL;/* vinay */
   char chr_l_buffer[BUFFER_LEN], chr_l_sys_date_time[APL_DATE_LEN];/* vinay */
	
	char chr_l_buffer1[BUFFER_LEN];

	EXEC SQL BEGIN DECLARE SECTION;

		IV_CLIENT_SERV_BASIS_STRUCT l_iv_client_serv_basis_structa_a;
		I_IV_CLIENT_SERV_BASIS_STRUCT l_i_iv_client_serv_basis_struct = {0, 0, 0, 0, 0, 0, 0, 
																							  0, 0, 0, 0, 0, 0, 0, 0, 0}; /* vinay */
																								/* Bageshri HDFCIV_001*/  /* added by  Monica for ISKB_1737 */
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	memset(chr_l_sys_date_time, APL_NULL_CHAR, APL_DATE_LEN);/* vinay */
		
	l_iv_client_serv_basis_structa_a = *p_iv_client_serv_basis_struct;

	if ( !strlen(p_iv_client_serv_basis_struct->chrg_base) )
	{
		l_i_iv_client_serv_basis_struct.i_chrg_base = -1;
	}

	if ( !strlen(p_iv_client_serv_basis_struct->fees_base) )
	{
		l_i_iv_client_serv_basis_struct.i_fees_base = -1;
	}

	fprintf(APL_OUT_FILE, "now the chr_value is : %s",p_iv_client_serv_basis_struct->dealadm_feeccy);

	if ( !strlen(p_iv_client_serv_basis_struct->bill_acc) )  /* Bageshri HDFCIV_001*/
	{
		l_i_iv_client_serv_basis_struct.i_bill_acc = -1;
	}
	
	/**** vinay kalaskar ********/
	
	if (APL_FAILURE == CO_RtvSysDtTime(chr_l_sys_date_time, l_debug_info_ptr))
	{
		*int_p_retstat = IV_CRITCAL_ERROR_IND;
		APL_GOBACK_FAIL
	}

	strcpy(l_iv_client_serv_basis_structa_a.lst_bill_dt, strtok_r(chr_l_sys_date_time, " ", &chr_l_last));
	strcat(l_iv_client_serv_basis_structa_a.lst_bill_dt, APL_NULL_TIME);
	
	/****************************/
	
	EXEC SQL INSERT INTO IV_CLIENT_SERV_BASIS
		 VALUES (:l_iv_client_serv_basis_structa_a INDICATOR :l_i_iv_client_serv_basis_struct);

	*int_p_retstat = IV_CRITCAL_ERROR_IND;

	memset(chr_l_buffer1, APL_NULL_CHAR, BUFFER_LEN);
	ltoa_r(l_iv_client_serv_basis_structa_a.service_cd, chr_l_buffer1, BUFFER_LEN - 1);

	IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_FEES_EXIST, l_iv_client_serv_basis_structa_a.client, 
					  chr_l_buffer1, APL_NULL_STRING)

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Mod_IVSRVBasisNew().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
 IV_Mod_IVSRVBasisNew().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_Mod_IVSRVBasis(const IV_CLIENT_SERV_BASIS_STRUCT *p_iv_client_serv_basis_struct, int *int_p_retstat, 
		     DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	EXEC SQL BEGIN DECLARE SECTION;

		IV_CLIENT_SERV_BASIS_STRUCT l_iv_client_serv_basis_structa_a;
		I_IV_CLIENT_SERV_BASIS_STRUCT l_i_iv_client_serv_basis_struct = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}; /* Bageshri HDFCIV_001*/
		/* added by Monica for ISKB_1737 */
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	l_iv_client_serv_basis_structa_a = *p_iv_client_serv_basis_struct;

	if ( !strlen(p_iv_client_serv_basis_struct->chrg_base) )
	{
		l_i_iv_client_serv_basis_struct.i_chrg_base = -1;
	}

	if ( !strlen(p_iv_client_serv_basis_struct->fees_base) )
	{
		l_i_iv_client_serv_basis_struct.i_fees_base = -1;
	}
	
	if ( !strlen(p_iv_client_serv_basis_struct->bill_acc) )  /* Bageshri HDFCIV_001*/
	{
		l_i_iv_client_serv_basis_struct.i_bill_acc = -1;
	}

	Alert("\n  Client %s",l_iv_client_serv_basis_structa_a.client);
	Alert("\n  Service code %d",l_iv_client_serv_basis_structa_a.service_cd);
	Alert("\n  apl_frm_date %s",l_iv_client_serv_basis_structa_a.apl_frm_date);
	

	EXEC SQL UPDATE IV_CLIENT_SERV_BASIS
		 SET CHRG_BASE = :l_iv_client_serv_basis_structa_a.chrg_base 
				     INDICATOR :l_i_iv_client_serv_basis_struct.i_chrg_base, 
		     FEES_BASE =    :l_iv_client_serv_basis_structa_a.fees_base 
				     INDICATOR :l_i_iv_client_serv_basis_struct.i_fees_base, 
		     CHRG_CLAS =  :l_iv_client_serv_basis_structa_a.chrg_clas 
				     INDICATOR :l_i_iv_client_serv_basis_struct.i_charge_class, 
		     FEES_CLASS =     :l_iv_client_serv_basis_structa_a.fees_class 
				     INDICATOR :l_i_iv_client_serv_basis_struct.i_fee_class, 
		     MINIMUMFEE =       :l_iv_client_serv_basis_structa_a.minimumfee 
			             INDICATOR :l_i_iv_client_serv_basis_struct.i_minimumfee, 
		     NIL_FEES =       :l_iv_client_serv_basis_structa_a.nil_fees 
			             INDICATOR :l_i_iv_client_serv_basis_struct.i_nil_fees, 
		     MAXIMUM_FEE =       :l_iv_client_serv_basis_structa_a.maximum_fee 
			             INDICATOR :l_i_iv_client_serv_basis_struct.i_maximum_fee,
			  DEALADM_FEECCY =		:l_iv_client_serv_basis_structa_a.dealadm_feeccy
								INDICATOR :l_i_iv_client_serv_basis_struct.i_txnadmfeecurrencycode,
			  BILL_ACC =		:l_iv_client_serv_basis_structa_a.bill_acc								/* Bageshri HDFCIV_001*/
								INDICATOR :l_i_iv_client_serv_basis_struct.i_bill_acc,
			  B_FREQ = :l_iv_client_serv_basis_structa_a.b_freq
			  					INDICATOR :l_i_iv_client_serv_basis_struct.i_b_freq,/* vinay */
			/*added by shruthi kumbla for KOTAK ISKB_1737*/
			  INCLD_IN_ANN_MIN_FEE = :l_iv_client_serv_basis_structa_a.incld_in_ann_min_fee
			  					INDICATOR :l_i_iv_client_serv_basis_struct.i_incld_in_ann_min_fee,
				/*added for KOTAK ISKB_1737 starts */
			  PLS_MONTH = :l_iv_client_serv_basis_structa_a.pls_month
			  					INDICATOR :l_i_iv_client_serv_basis_struct.i_pls_month,
			  APL_FRM_DATE = :l_iv_client_serv_basis_structa_a.apl_frm_date
			  					INDICATOR :l_i_iv_client_serv_basis_struct.i_apl_frm_date					
				/*added for KOTAK ISKB_1737 ends */
		 WHERE ((CLIENT = :l_iv_client_serv_basis_structa_a.client) AND
			(SERVICE_CD = :l_iv_client_serv_basis_structa_a.service_cd) AND
			(APL_FRM_DATE = :l_iv_client_serv_basis_structa_a.apl_frm_date));/*added for KOTAK ISKB_1737  */

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}
	else if ( sqlca.sqlcode == 1403 )
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		CO_InsertErr(l_debug_info_ptr, ERR_ACCESSSTAMP_CHGD, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       APL_NULL_STRING, __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Mod_IVSRVBasis().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
 IV_Mod_IVSRVBasis().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_Mod_IVSRVBasisRowDel(const char *p_client, const long p_servcode, const char *p_apl_frm_date,
			int *int_p_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)/*added p_apl_frm_date for KOTAK ISKB_1737  */
{
	

	EXEC SQL BEGIN DECLARE SECTION;
/* Added by Monica for ISKB_1737 starts*/
	     char  chr_b_prev_date[APL_DATE_LEN] =  APL_NULL_STRING;
		short int int_i_b_prev_date = 0;
		char chr_b_gen_ind[2] =  APL_NULL_STRING;
		short int int_i_gen_ind = 0;	
/* Added by Monica for ISKB_1737 ends*/
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	
	  /* Added by Monica for ISKB_1737 starts*/
	
	EXEC SQL SELECT B_GEN_IND,TO_CHAR(TO_DATE(B_PREV_DATE, 'DD/MM/YYYY hh24:mi:ss'), 'MON-YYYY')
		 INTO :chr_b_gen_ind:int_i_gen_ind,:chr_b_prev_date:int_i_b_prev_date
		 FROM SYS_IVCONTROLPARAM;

	IS_ANY_ORA_ERROR	
	
	Alert("MV chr_b_gen_ind %s",chr_b_gen_ind);
	Alert("MV chr_b_prev_date %s",chr_b_prev_date);
		Alert("MV p_apl_frm_date %s",p_apl_frm_date);
		
		
	if( (strcmp(chr_b_gen_ind,"Y") == 0) && (strcmp(chr_b_prev_date,p_apl_frm_date) == 0)) 
	{
	
		printf("\n Record cannot be deleted since bill is already generated for the Applicable From date ");	  
				CO_InsertErr(l_debug_info_ptr, ERR_BILL_ALRDY_GENERATED, APL_NULL_STRING, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

			APL_GOBACK_FAIL	
			
	}
	else
	{
		
		
		printf("\n Before deleting in IV_Mod_IVSRVBasisRowDel  ");	  
			
	EXEC SQL DELETE FROM IV_CLIENT_SERV_BASIS
		 WHERE ((CLIENT = :p_client) AND
			(SERVICE_CD = :p_servcode) AND
			(APL_FRM_DATE = :p_apl_frm_date));
/* Added by Monica for ISKB_1737 ends*/
	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}
	else if ( sqlca.sqlcode == 1403 )
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		APL_GOBACK_FAIL
	}

		}
						
	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Mod_IVSRVBasisRowDel().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
 IV_Mod_IVSRVBasisRowDel().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_Mod_IVSRVBasisAllServDel(const char *p_client, int *int_p_retstat, 
			    DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	

	EXEC SQL BEGIN DECLARE SECTION;

		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	EXEC SQL DELETE FROM IV_CLIENT_SERV_BASIS
		 WHERE (CLIENT = :p_client);

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Mod_IVSRVBasisAllServDel().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
IV_Mod_IVSRVBasisAllServDel().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}
