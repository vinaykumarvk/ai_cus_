/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to 
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or 
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         :       Maintenance	
 *
 * File Name           :       CO_ChkAcc.pc 
 *
 * Description         :       This file contains functions for Client Details validations                                                                      in different modes.  
 *
 *            Version Control Block
 *
 * Date        Version		Author               Description
 * ---------   --------	 ---------------  ---------------------------
 *10/10/2005	1.0       Kouser Begum 	       New file to Validate Client Details						
 *
 *********************************************************************/
#include "CO_HostStructdef.h"

EXEC SQL INCLUDE SQLCA.H;

int CO_Chk_AccValid(char *p_client, char p_exist, char p_cubk, char p_orderac, char p_mastclt, char p_auth, char p_del, char p_frozen, char p_closed, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca sqlca;	
	MT_CLIENT_STRUCT_H l_mt_client_struct_h;
	MT_CLIENT_STRUCT_I l_mt_client_struct_i;
	short success_flg = APL_SUCCESS;
	char	chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
 
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	/*ST1.0 	Comment for Sign Image */
	/*
	EXEC SQL VAR l_mt_client_struct_h.h_cln_sign_img IS RAW;
	*/

	memset(&l_mt_client_struct_h, NULL, sizeof(MT_CLIENT_STRUCT_H));
	memset(&l_mt_client_struct_i, NULL, sizeof(MT_CLIENT_STRUCT_I));
	sqlca.sqlcode = 0;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
	       					"Entered Function CO_Chk_AccValid\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Account Number is : %s\n", 
						p_client);

		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Exist Flag is : %c\n", 
						p_exist);

		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Cubk Flag is : %c\n", 
						p_cubk);

		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The OrderAc Flag is : %c\n", 
						p_orderac);

		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Master Account Flag is : %c\n", 
						p_mastclt);

		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Authorisation Flag is : %c\n", 
						p_auth);

		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Delete Flag is : %c\n", 
						p_del);

		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Frozen Flag is : %c\n", 
						p_frozen);

		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);

		memset( chr_l_buf, NULL, BUFFER_LEN );

		sprintf(		chr_l_buf, 
						"The Closed Flag is : %c\n", 
						p_closed);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
	}

	if ( !strlen(p_client) )
	{
		APL_DATA_MISSING("Client Code", APL_NULL_STRING, APL_NULL_STRING);
		APL_GOBACK_FAIL;
	}

	if (p_exist == NULL) p_exist = 'Y';
	
	EXEC SQL SELECT * INTO :l_mt_client_struct_h:l_mt_client_struct_i FROM MT_CLIENT 
	WHERE CLN_CODE=:p_client;

	IS_ANY_ORA_ERROR

	if ( (sqlca.sqlcode == 1403) && (p_exist == 'Y') )
	{
		CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_FND, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__);  
		APL_GOBACK_FAIL;
	}

	if ( (sqlca.sqlcode == 0) && (p_exist == 'N') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_EXST, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}	   
		success_flg = APL_FAILURE;
	}

 l_mt_client_struct_h.h_clt_brk_all[1] = '\0';
	if ( (l_mt_client_struct_h.h_clt_brk_all[0] == 'B') && (p_cubk=='C') )
	{
		if (p_orderac != 'Z') 
		{
			if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_CUSTOMER, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
			{
				APL_GOBACK_FAIL;
			}
			success_flg = APL_FAILURE;
		}
	}

	if ( (l_mt_client_struct_h.h_clt_brk_all[0] == 'C') && (p_cubk=='B') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_BRK, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( (l_mt_client_struct_h.h_clt_brk_all[0] != 'A') && (p_cubk=='A') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_DEALER, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	l_mt_client_struct_h.h_ord_clt[1] = '\0';
	if ( (l_mt_client_struct_h.h_ord_clt[0] == 'B') && (p_orderac=='C') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_CUSTODYCLIENT, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( (l_mt_client_struct_h.h_ord_clt[0] == 'C') && (p_orderac=='B') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_BRKCLIENT, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}
	
	if ( (l_mt_client_struct_h.h_ord_clt[0] != 'A') && (p_orderac=='A') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_BRKANDCUSTODYCLIENT, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	l_mt_client_struct_h.h_dl_client[10]='\0';	
	l_mt_client_struct_h.h_mstclt[10]='\0';	
	/*if ( (strcmp(l_mt_client_struct_h.h_dl_client, l_mt_client_struct_h.h_mstclt)) && (p_mastclt=='M') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_MASTER, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( (!strcmp(l_mt_client_struct_h.h_dl_client, l_mt_client_struct_h.h_mstclt)) && (p_mastclt=='S') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_ISMASTER, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}*/
   Alert("Value checker date ==%s\n",l_mt_client_struct_h.h_checker_dt);
	if ( (l_mt_client_struct_i.i_checker_dt == -1) && (p_auth=='Y') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_UNAUTH, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( (l_mt_client_struct_i.i_checker_dt != -1 ) && (p_auth=='N') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_MSG_ACCOUNT_AUTH, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	l_mt_client_struct_h.h_clt_status[2]='\0';	
	
	if ( (strcmp(l_mt_client_struct_h.h_clt_status, "DU")) && (p_del=='Y') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_MARKEDFORDEL, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( (!strcmp(l_mt_client_struct_h.h_clt_status, "DU")) && (p_del=='N') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_MARKEDFORDEL, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( (strcmp(l_mt_client_struct_h.h_clt_status, "FU") && strcmp(l_mt_client_struct_h.h_clt_status, "FA")) && (p_frozen=='Y') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_FRZN, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( ( (!strcmp(l_mt_client_struct_h.h_clt_status, "FU")) || (!strcmp(l_mt_client_struct_h.h_clt_status, "FA")) ) && (p_frozen=='N') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_FRZN, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( (strcmp(l_mt_client_struct_h.h_clt_status, "CU") && strcmp(l_mt_client_struct_h.h_clt_status, "CA")) && (p_closed=='Y') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_CLOSED, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( ( (!strcmp(l_mt_client_struct_h.h_clt_status, "CU")) || (!strcmp(l_mt_client_struct_h.h_clt_status, "CA")) ) && (p_closed=='N') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_CLOSED, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}
	
	if (APL_FAILURE == success_flg ) 
	{
		APL_GOBACK_FAIL;
	}
	else 
	{
		APL_GOBACK_SUCCESS;
	}

	RETURN_SUCCESS :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
					      		"Leaving Function CO_Chk_AccValid with success\n",
							NULL,
							NULL);
		}
		return(APL_SUCCESS);
	
	RETURN_FAILURE :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
     							"Leaving Function CO_Chk_AccValid with errors\n",
							NULL,
							NULL);
		}
		return(APL_FAILURE);
}							

/*New function Added by Swapnil for allowing freezed client from CA --isolve ISKB_2188 Start*/

int CO_Chk_AccValid_CA(char *p_client, char p_exist, char p_cubk, char p_orderac, char p_mastclt, char p_auth, char p_del, char p_frozen, char p_closed, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca sqlca;	
	MT_CLIENT_STRUCT_H l_mt_client_struct_h;
	MT_CLIENT_STRUCT_I l_mt_client_struct_i;
	short success_flg = APL_SUCCESS;
	char	chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
 
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	/*ST1.0 	Comment for Sign Image  */
	/*
	EXEC SQL VAR l_mt_client_struct_h.h_cln_sign_img IS RAW;
	*/

	memset(&l_mt_client_struct_h, NULL, sizeof(MT_CLIENT_STRUCT_H));
	memset(&l_mt_client_struct_i, NULL, sizeof(MT_CLIENT_STRUCT_I));
	sqlca.sqlcode = 0;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
	       					"Entered Function CO_Chk_AccValid_CA\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Account Number is : %s\n", 
						p_client);

		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Exist Flag is : %c\n", 
						p_exist);

		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Cubk Flag is : %c\n", 
						p_cubk);

		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The OrderAc Flag is : %c\n", 
						p_orderac);

		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Master Account Flag is : %c\n", 
						p_mastclt);

		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Authorisation Flag is : %c\n", 
						p_auth);

		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Delete Flag is : %c\n", 
						p_del);

		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Frozen Flag is : %c\n", 
						p_frozen);

		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);

		memset( chr_l_buf, NULL, BUFFER_LEN );

		sprintf(		chr_l_buf, 
						"The Closed Flag is : %c\n", 
						p_closed);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
	}

	if ( !strlen(p_client) )
	{
		APL_DATA_MISSING("Client Code", APL_NULL_STRING, APL_NULL_STRING);
		APL_GOBACK_FAIL;
	}

	if (p_exist == NULL) p_exist = 'Y';
	
	EXEC SQL SELECT * INTO :l_mt_client_struct_h:l_mt_client_struct_i FROM MT_CLIENT 
	WHERE CLN_CODE=:p_client;

	IS_ANY_ORA_ERROR

	if ( (sqlca.sqlcode == 1403) && (p_exist == 'Y') )
	{
		CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_FND, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__);  
		APL_GOBACK_FAIL;
	}

	if ( (sqlca.sqlcode == 0) && (p_exist == 'N') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_EXST, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}	   
		success_flg = APL_FAILURE;
	}

 l_mt_client_struct_h.h_clt_brk_all[1] = '\0';
	if ( (l_mt_client_struct_h.h_clt_brk_all[0] == 'B') && (p_cubk=='C') )
	{
		if (p_orderac != 'Z') 
		{
			if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_CUSTOMER, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
			{
				APL_GOBACK_FAIL;
			}
			success_flg = APL_FAILURE;
		}
	}

	if ( (l_mt_client_struct_h.h_clt_brk_all[0] == 'C') && (p_cubk=='B') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_BRK, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( (l_mt_client_struct_h.h_clt_brk_all[0] != 'A') && (p_cubk=='A') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_DEALER, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	l_mt_client_struct_h.h_ord_clt[1] = '\0';
	if ( (l_mt_client_struct_h.h_ord_clt[0] == 'B') && (p_orderac=='C') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_CUSTODYCLIENT, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( (l_mt_client_struct_h.h_ord_clt[0] == 'C') && (p_orderac=='B') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_BRKCLIENT, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}
	
	if ( (l_mt_client_struct_h.h_ord_clt[0] != 'A') && (p_orderac=='A') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_BRKANDCUSTODYCLIENT, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	l_mt_client_struct_h.h_dl_client[10]='\0';	
	l_mt_client_struct_h.h_mstclt[10]='\0';	
/*Commented function Added by Swapnil for allowing freezed client from CA --isolve ISKB_2188 Start*/
	/*if ( (strcmp(l_mt_client_struct_h.h_dl_client, l_mt_client_struct_h.h_mstclt)) && (p_mastclt=='M') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_MASTER, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( (!strcmp(l_mt_client_struct_h.h_dl_client, l_mt_client_struct_h.h_mstclt)) && (p_mastclt=='S') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_ISMASTER, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}*/
/*Commented function Added by Swapnil for allowing freezed client from CA --isolve ISKB_2188 Start*/
   printf("Value checker date ==%s\n",l_mt_client_struct_h.h_checker_dt);
	if ( (l_mt_client_struct_i.i_checker_dt == -1) && (p_auth=='Y') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_UNAUTH, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( (l_mt_client_struct_i.i_checker_dt != -1 ) && (p_auth=='N') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_MSG_ACCOUNT_AUTH, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	l_mt_client_struct_h.h_clt_status[2]='\0';	
	/*Commented function Added by Swapnil for allowing freezed client from CA --isolve ISKB_2188 Start*/
/*
	if ( (strcmp(l_mt_client_struct_h.h_clt_status, "DU")) && (p_del=='Y') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_MARKEDFORDEL, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( (!strcmp(l_mt_client_struct_h.h_clt_status, "DU")) && (p_del=='N') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_MARKEDFORDEL, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( (strcmp(l_mt_client_struct_h.h_clt_status, "FU") && strcmp(l_mt_client_struct_h.h_clt_status, "FA")) && (p_frozen=='Y') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_FRZN, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( ( (!strcmp(l_mt_client_struct_h.h_clt_status, "FU")) || (!strcmp(l_mt_client_struct_h.h_clt_status, "FA")) ) && (p_frozen=='N') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_FRZN, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}*/
/*Commented function Added by Swapnil for allowing freezed client from CA --isolve ISKB_2188 End*/
	if ( (strcmp(l_mt_client_struct_h.h_clt_status, "CU") && strcmp(l_mt_client_struct_h.h_clt_status, "CA")) && (p_closed=='Y') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_CLOSED, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( ( (!strcmp(l_mt_client_struct_h.h_clt_status, "CU")) || (!strcmp(l_mt_client_struct_h.h_clt_status, "CA")) ) && (p_closed=='N') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_CLOSED, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if (APL_FAILURE == success_flg ) 
	{
		APL_GOBACK_FAIL;
	}
	else 
	{
		APL_GOBACK_SUCCESS;
	}

	RETURN_SUCCESS :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
					      		"Leaving Function CO_Chk_AccValid_CA with success\n",
							NULL,
							NULL);
		}
		return(APL_SUCCESS);
	
	RETURN_FAILURE :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
     							"Leaving Function CO_Chk_AccValid_CA with errors\n",
							NULL,
							NULL);
		}
		return(APL_FAILURE);
}							
/*Added by Swapnil for allowing freezed client from CA --isolve ISKB_2188 end*/
