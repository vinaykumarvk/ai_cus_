/*
 **    COPYRIGHT NOTICE
 **
 **   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 **
 **   These materials are confidential and proprietary to
 **    Polaris Software Lab Limited and no part of these materials should
 **    be reproduced, published, transmitted or distributed in any form or
 **    by any means, electronic, mechanical, photocopying, recording or
 **    otherwise, or stored in any information storage or retrieval system
 **    of any nature nor should the materials be disclosed to third parties
 **    or used in any other manner for which this is not authorized, without
 **    the prior express written authorization of Polaris Software Lab Limited.
 **/
/*********************************************************************
 **
 ** Module Name         :      DEAL PROCESSING
 **
 ** File Name           :      DLOBLIGATIONREC_RPT.pc
 **
 ** Description         :      DEAL OBLIGATION RECONCILATION
 **
 **
 **
 **            Version Control Block
 **
 ** Date        Version     Author           Description        RFS No.
 ** ---------   --------  ---------------  ------------------   ---------
 ** 29/03/2006  1.0       Amol Kulkarni
 ** 29/03/2022  1.1       kotubabu         Linux Migration      Kotak Implementation
 **************************************************************************/

#include "stdio_64.h"
#include "DL_Interface.h"
#include "Intellect_Error.h"
#include "CO_IndStructdef.h"
#include "Intellect_Common.h"
#include "Intellect_Interface.h"
#include "BT_Common.h"
/* OPT:AIX */
#ifdef DATA_FIELD_SEPRTR
#undef DATA_FIELD_SEPRTR
#endif
#define DATA_FIELD_SEPRTR '^A'
#ifdef DATA_VALUE_SEPRTR
#undef DATA_VALUE_SEPRTR
#endif
#define DATA_VALUE_SEPRTR '^B'

EXEC SQL INCLUDE SQLCA.H;
int getPath1(char *,DEBUG_INFO_STRUCT_H **) ;

int main(int argc,char **argv)  //AIX-Warnings Removal
{

	/***********   Variable Declaration Section  **********/
	DEBUG_INFO_STRUCT_H **l_debug_info_ptr = (DEBUG_INFO_STRUCT_H **) NULL;
	l_debug_info_ptr = (DEBUG_INFO_STRUCT_H **)calloc(1,sizeof(DEBUG_INFO_STRUCT_H *));

	char  **temp = ( char **)NULL;
	int l_int_num = 0;
	/* Added by kotubabu for Linux Migration -Start*/
    #ifdef OS_LINUX
	FILE *l_logfile = (FILE *)NULL;
	FILE *p_logfile = NULL;
	#else
    FILE *l_logfile = APL_OUT_FILE;
    FILE *p_logfile = APL_OUT_FILE;
    #endif
    /* Added by kotubabu  for Linux Migration -END*/
	
	char l_chr_exchange[10] = APL_NULL_STRING;
	char l_chr_settlement_no[16] = APL_NULL_STRING;

	DL_EXCHGORD_UPLD_STRUCT_H  *dl_exchgord_upld_struct=NULL;
	DL_EXCHGORD_UPLD_STRUCT_I *dl_exchgord_upld_struct_i=NULL;

	/* Added by kotubabu for Linux Migration -Start*/
    #ifdef OS_LINUX
	FILE *fp_SesamIni = (FILE *) NULL;
	#else
    FILE *fp_SesamIni = APL_OUT_FILE;
    #endif
    /* Added by kotubabu  for Linux Migration -END*/
	char *path=(char *)NULL;
	/***********   Data Base Connention **********/
	   /* Added by kotubabu for Linux Migration-Start*/
    #ifdef OS_LINUX
	 l_logfile = APL_OUT_FILE;
	 p_logfile = APL_OUT_FILE;
     fp_SesamIni = APL_OUT_FILE;
    #endif
   /* Added by kotubabu for Linux Migration-End*/
	if(CO_Get_DBConnect(l_debug_info_ptr) == APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}

	/*Calloc*/
	dl_exchgord_upld_struct=(DL_EXCHGORD_UPLD_STRUCT_H *)calloc(1,sizeof(DL_EXCHGORD_UPLD_STRUCT_H));
	dl_exchgord_upld_struct_i=(DL_EXCHGORD_UPLD_STRUCT_I *)calloc(1,sizeof(DL_EXCHGORD_UPLD_STRUCT_I));

	/*MemSet*/
	memset(dl_exchgord_upld_struct, NULL, sizeof(DL_EXCHGORD_UPLD_STRUCT_H));
	memset(dl_exchgord_upld_struct_i, NULL, sizeof(DL_EXCHGORD_UPLD_STRUCT_I));

	/***********   Processing INPUT PARAMETERS   START **********/
	if (APL_FAILURE == CO_Rtv_RptFileName( "7g",
				APL_LOGFILE_DESC,
				100,
				argv[5],
				argv,
				&l_logfile,
				l_debug_info_ptr ) )
	{
		CO_ProcMonitor(l_logfile, "Failure from CO RTY:", NULL, NULL);
		APL_GOBACK_FAIL
	}


	if(BT_Status_Update(argv[0],
				argv[1],
				argv[2],
				APL_STARTED_STATUS,
				l_debug_info_ptr) ==APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}

	

	
	if(APL_FAILURE == CO_SplitStr(argv[9],
				'|',
				&l_int_num,&temp))
	{
		CO_ProcMonitor(l_logfile, "Failure from StrSplitFn", NULL, NULL);
		APL_GOBACK_FAIL

	}

/*	if (l_int_num != 3)
	{
		printf("\n Total no of arguments are |%d|", l_int_num);
		CO_ProcMonitor(l_logfile, "Improper Number of arguements", NULL, NULL);
		APL_GOBACK_FAIL
	}
*/
	strcpy(l_chr_settlement_no, temp[0]);
	strcpy(l_chr_exchange, temp[1]);
	//printf("\n Selected Exchange Code is  |%s|, length=%d",l_chr_exchange,strlen(l_chr_exchange));Changes done for AIX Migration
	printf("\n Selected Exchange Code is  |%s|, length=%d",l_chr_exchange,(int)strlen(l_chr_exchange));
	//printf("\n Selected settlment Number is  |%s|,length =%d",l_chr_settlement_no,strlen(l_chr_settlement_no));Changes done for AIX Migration
	printf("\n Selected settlment Number is  |%s|,length =%d",l_chr_settlement_no,(int)strlen(l_chr_settlement_no));

	if (!strlen(temp[0]))
	{
		printf("\n\tSettlment Number missing!!!!!!!!!\n");
		APL_GOBACK_FAIL
	}		

	if(strcmp(l_chr_exchange,APL_NULL_STRING) == 0)
		strcpy(l_chr_exchange,"%");

	/***********   Path for report file   **********/
	path=(char*)calloc(1, sizeof(char));
	/*if((getPath1(path,l_debug_info_ptr))==NULL)*/
	getPath1(path,l_debug_info_ptr);
	if(path==NULL)
	{
		APL_GOBACK_FAIL
	}
	printf("Path1 |%s|",path);
	
	/* file opening in write mode*/
	printf("Path=%s",path);
	if ( (fp_SesamIni = fopen(path, "w")) == (FILE *)NULL )
	{
		printf("Could not open intl_sun.cfg\n");
		APL_GOBACK_FAIL
	}

	fprintf(fp_SesamIni,"ORDER_NO,");
	fprintf(fp_SesamIni,"EXCHG_CODE,");
	fprintf(fp_SesamIni,"CLIENT,");
	fprintf(fp_SesamIni,"INSTR_CODE,");
	fprintf(fp_SesamIni,"BROKER_CD,");
	fprintf(fp_SesamIni,"QTY NUMBER,");
	fprintf(fp_SesamIni,"SETTL_NO,");
	fprintf(fp_SesamIni,"DL_PRICE,");
	fprintf(fp_SesamIni,"DL_AMT,");
	fprintf(fp_SesamIni,"DEAL_DATE,");
	fprintf(fp_SesamIni,"MKT_TYPE,");
	fprintf(fp_SesamIni,"SCRIP_GRP,");
	fprintf(fp_SesamIni,"CREATION_TYPE,");
	fprintf(fp_SesamIni,"DEAL_REF_NO,");
	fprintf(fp_SesamIni,"BUY_SELL_FLG,");
	fprintf(fp_SesamIni,"MATCHED");
	fprintf(fp_SesamIni,"FILELINKINFO,");
	fprintf(fp_SesamIni,"ROWSEQUENCE\n");

	EXEC SQL DECLARE deal_outer CURSOR FOR
		SELECT * FROM DL_EXCHGORD_UPLD WHERE SETTL_NO=:l_chr_settlement_no AND EXCHG_CODE LIKE :l_chr_exchange;

	EXEC SQL OPEN deal_outer;

	for(;;)
	{
		EXEC SQL FETCH deal_outer INTO :dl_exchgord_upld_struct:dl_exchgord_upld_struct_i;
		printf("SqlCode=%d",sqlca.sqlcode);
		if(APL_ZERO_RESULT_SET)
			break;
		printf("\n Reached 1 \n");

		fprintf(fp_SesamIni,"%s,",dl_exchgord_upld_struct->h_order_no);
		fprintf(fp_SesamIni,"%s,",dl_exchgord_upld_struct->h_exchg_code);
		fprintf(fp_SesamIni,"%s,",dl_exchgord_upld_struct->h_cln_code);
		fprintf(fp_SesamIni,"%s,",dl_exchgord_upld_struct->h_instr_code);
		fprintf(fp_SesamIni,"%s,",dl_exchgord_upld_struct->h_broker_cd);
		fprintf(fp_SesamIni,"%lf,",dl_exchgord_upld_struct->h_qty);
		fprintf(fp_SesamIni,"%s,",dl_exchgord_upld_struct->h_settl_no);
		fprintf(fp_SesamIni,"%lf,",dl_exchgord_upld_struct->h_dl_price);
		fprintf(fp_SesamIni,"%lf,",dl_exchgord_upld_struct->h_dl_amt);
		fprintf(fp_SesamIni,"%s,",dl_exchgord_upld_struct->h_deal_date);
		fprintf(fp_SesamIni,"%s,",dl_exchgord_upld_struct->h_mkt_type);
		fprintf(fp_SesamIni,"%s,",dl_exchgord_upld_struct->h_scrip_grp);
		fprintf(fp_SesamIni,"%s,",dl_exchgord_upld_struct->h_creation_type);
		fprintf(fp_SesamIni,"%s,",dl_exchgord_upld_struct->h_deal_ref_no);
		fprintf(fp_SesamIni,"%s,",dl_exchgord_upld_struct->h_buy_sell_flg);
		fprintf(fp_SesamIni,"%s",dl_exchgord_upld_struct->h_matched);
		fprintf(fp_SesamIni,"%d,",dl_exchgord_upld_struct->h_filelinkinfo);
		fprintf(fp_SesamIni,"%d\n",dl_exchgord_upld_struct->h_rowsequence);
	}
	EXEC SQL CLOSE deal_outer;

RETURN_SUCCESS :
	  fclose(fp_SesamIni);
	  if(BT_Status_Completed(argv[0],
					argv[1],
					argv[2],
					l_debug_info_ptr)   ==  APL_FAILURE )
		{
			APL_GOBACK_FAIL
		}
	CO_Proc_RptClose(l_logfile, l_debug_info_ptr);

	EXEC SQL COMMIT WORK;

	if(sqlca.sqlcode != 0)APL_GOBACK_FAIL
		exit(0);

RETURN_FAILURE    :
/* OPT:AIX  strcpy(l_debug_info_ptr,"Data Not Found"); */
CO_ProcMonitor(l_logfile," Data Not Found",l_debug_info_ptr,NULL);
	CO_Proc_RptClose(l_logfile, l_debug_info_ptr);
	exit(-1);
}

int getPath1(char *path,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	/*Variable Declarration*/
	char  chr_l_inifile[PATH_LENGTH]    = APL_NULL_STRING;
	char  chr_l_fname[31]                = APL_NULL_STRING;
	char  chr_l_date[8]                = APL_NULL_STRING;
	FILE  *l_finifile = NULL;
	memset(chr_l_inifile, APL_NULL_CHAR, PATH_LENGTH);

	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

	if ( ( l_finifile=fopen(chr_l_inifile,"r") ) == NULL)
	{
		return NULL;
	}

	if ( APL_FAILURE == CO_ReadToken(   l_finifile,
				"INTL_REP_PATH",
				chr_l_fname,
				l_debug_info_ptr ))
	{
		return NULL;
	}

	printf("\n\n\t***************Path=%s\n",chr_l_fname);

	EXEC SQL SELECT REPLACE(TO_CHAR(SYS_DATE,'MM/DD/YYYY'),'/','') into chr_l_date FROM PRO_SYS_DATE;
	printf("\n\n%d",sqlca.sqlcode);
	strcat(chr_l_fname,"dl_exchobligation_");
	strcat(chr_l_fname,chr_l_date);
	printf("\n\n\t***************Date=%s\n",chr_l_date);
	strcat(chr_l_fname,".rpt");
	printf("\n\n\t***************Path1=%s\n",chr_l_fname);
	strcpy(path,chr_l_fname);
	printf("\n\n\t***************Path2=%s\n",path);
	return 0;
}

