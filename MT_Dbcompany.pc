/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         :  MASTERS MAINTAINANCE
 *
 * File Name           :  MT_Dbcompany.pc
 *
 * Description         :  This file contains all functions for maintenance of
 *                        Company details
 *
 *
 *
 *            Version Control Block
 *
 * Date        Version          Author               Description
 * ---------   --------  ---------------  ---------------------------
 *                1.0          ANIL          NEW FILE RFSNO HDFCMT_002
 *
 *********************************************************************/

#include  "CO_IndStructdef.h"
#include  "MT_Interface.h"
#include  "CR_Common.h"
#include  "CO_Commdef.h"
#include  "Intellect_Error.h"
#include "Intellect_Common.h"

#include "sqlca.h"

 int MT_Mod_DbCompanyFn(MT_COMPANY_STRUCT_H *p_mt_company_struct_h,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
  MT_COMPANY_STRUCT_I  *l_mt_company_struct_i;
  struct sqlca sqlca;
  char chr_access_stamp_compare[APL_DATE_LEN];
  char chr_sys_time[APL_DATE_LEN];
  short l_maker, l_makerdt, l_checker, l_checkerdt, l_access_stamp;
  short l_access_stamp_compare;
  int int_error_flag = APL_SUCCESS;
  int int_l_rowexists = 0;
#ifdef APL_THREADS
    APL_SET_CONTEXT
    EXEC SQL CONTEXT USE :my_ctx_local;
#endif
  
   APL_IF_DEBUG   
 {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Function MT_Mod_DbCompanyFnfn\n",
                NULL,p_intl_envdatastruct_h);
 }

  l_mt_company_struct_i=(MT_COMPANY_STRUCT_I*)calloc(1,sizeof(MT_COMPANY_STRUCT_I));

  APL_MALLOC_FAIL(l_mt_company_struct_i)
  l_maker =0;
  l_makerdt =0;
  l_checker =0;
  l_checkerdt =0;
  l_access_stamp =0;
  l_access_stamp_compare =0;


 APL_IF_DEBUG   
 {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Function MT_Mod_DbCompanyFnFn\n",
                NULL,p_intl_envdatastruct_h);
 }
 /* Added By Gouse for FOR AUTO COMPANY CODE Generation - Start - 11/11/11 
         IF_COND_EXISTS("MT_COMPANY","AUTO_CODEGENERATED")
         {
                        printf("Code Commented for Auto Generation of CMP_CODE\n");
         }
         else
         {
                 printf("Code of CMP_CODE Manual Entry\n");
                if (!strlen(p_mt_company_struct_h->h_cmp_code))
                        l_mt_company_struct_i->i_cmp_code =-1;
                else
                        l_mt_company_struct_i->i_cmp_code =0;
         }
  Added By Gouse for FOR AUTO COMPANY CODE Generation - End - 11/11/11*/

    
     if (!strlen(p_mt_company_struct_h->h_cmp_code)) l_mt_company_struct_i->i_cmp_code =-1;
     else l_mt_company_struct_i->i_cmp_code =0;

 if (!strlen(p_mt_company_struct_h->h_cmp_name)) l_mt_company_struct_i->i_cmp_name =-1;
     else l_mt_company_struct_i->i_cmp_name =0;
    if (!strlen(p_mt_company_struct_h->h_cmp_maker)) l_mt_company_struct_i->i_cmp_maker =-1;
     else l_mt_company_struct_i->i_cmp_maker =0;
 if (!strlen(p_mt_company_struct_h->h_cmp_maker_dt)) l_mt_company_struct_i->i_cmp_maker_dt =-1;
     else l_mt_company_struct_i->i_cmp_maker_dt =0;
 if (!strlen(p_mt_company_struct_h->h_access_stamp)) l_mt_company_struct_i->i_access_stamp =-1;
     else l_mt_company_struct_i->i_access_stamp =0;
   if (!strlen(p_mt_company_struct_h->h_cmp_status)) l_mt_company_struct_i->i_cmp_status =-1;
      else l_mt_company_struct_i->i_cmp_status =0;

 if(CO_RtvSysDtTime(chr_sys_time,l_debug_info_ptr) !=APL_SUCCESS)
  {
        APL_GOBACK_FAIL
  }
        printf("chr_sys_time is %s\n",chr_sys_time);
 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_INPUT))
 {     
 APL_IF_DEBUG 
{
  CO_ProcMonitor(APL_OUT_FILE, "Entered Input h_mode of Function MT_Mod_DbCompanyFnFn\n",
                NULL,p_intl_envdatastruct_h);
 }   

             strcpy(p_mt_company_struct_h->h_cmp_status,STATUS_UAUTH);
             l_mt_company_struct_i->i_cmp_status =0;
             strcpy(p_mt_company_struct_h->h_cmp_maker,p_intl_envdatastruct_h->usr);
             l_mt_company_struct_i->i_cmp_maker =0;
             strcpy(p_mt_company_struct_h->h_cmp_maker_dt,chr_sys_time);
             l_mt_company_struct_i->i_cmp_maker_dt =0;
             strcpy(p_mt_company_struct_h->h_access_stamp,chr_sys_time);
             l_mt_company_struct_i->i_access_stamp =0;
             strcpy(p_mt_company_struct_h->h_cmp_checker,APL_NULL_STRING);
             strcpy(p_mt_company_struct_h->h_cmp_checker_dt,APL_NULL_STRING);

printf("\n p_mt_company_struct_h->h_cmp_code is |%s|",p_mt_company_struct_h->h_cmp_code);
printf("\n p_mt_company_struct_h->h_cmp_name is |%s|",p_mt_company_struct_h->h_cmp_name);
printf("\n p_mt_company_struct_h->h_cmp_shortnm  is |%s|",p_mt_company_struct_h->h_cmp_shortnm);
printf("\n p_mt_company_struct_h->h_cmp_oldname  is |%s|",p_mt_company_struct_h->h_cmp_oldname);
printf("\n p_mt_company_struct_h->h_cmp_add1  is |%s|",p_mt_company_struct_h->h_cmp_add1);
printf("\n p_mt_company_struct_h->h_cmp_add2  is |%s|",p_mt_company_struct_h->h_cmp_add2);
printf("\n p_mt_company_struct_h->h_cmp_add_city  is |%s|",p_mt_company_struct_h->h_cmp_add_city);
printf("\n p_mt_company_struct_h->h_cmp_add_state  is |%s|",p_mt_company_struct_h->h_cmp_add_state);
printf("\n p_mt_company_struct_h->h_cmp_add_cnt  is |%s|",p_mt_company_struct_h->h_cmp_add_cnt);
printf("\n p_mt_company_struct_h->h_cmp_add_pin  is |%s|",p_mt_company_struct_h->h_cmp_add_pin);
printf("\n p_mt_company_struct_h->h_cmp_tel  is |%s|",p_mt_company_struct_h->h_cmp_tel);
printf("\n p_mt_company_struct_h->h_cmp_fax  is |%s|",p_mt_company_struct_h->h_cmp_fax);
printf("\n p_mt_company_struct_h->h_cmp_webadd  is |%s|",p_mt_company_struct_h->h_cmp_webadd);
printf("\n p_mt_company_struct_h->h_cmp_swf_name  is |%s|",p_mt_company_struct_h->h_cmp_swf_name);
printf("\n p_mt_company_struct_h->h_cmp_secnm  is |%s|",p_mt_company_struct_h->h_cmp_secnm);
printf("\n p_mt_company_struct_h->h_cmp_sec_email  is |%s|",p_mt_company_struct_h->h_cmp_sec_email);
printf("\n p_mt_company_struct_h->h_cmp_mdnm  is |%s|",p_mt_company_struct_h->h_cmp_mdnm);
printf("\n p_mt_company_struct_h->h_cmp_industrycd  is |%s|",p_mt_company_struct_h->h_cmp_industrycd);
printf("\n p_mt_company_struct_h->h_cmp_sectorcd  is |%s|",p_mt_company_struct_h->h_cmp_sectorcd);
printf("\n p_mt_company_struct_h->h_cmp_remarks  is |%s|",p_mt_company_struct_h->h_cmp_remarks);
printf("\n p_mt_company_struct_h->h_cmp_authcapital  is |%lf|",p_mt_company_struct_h->h_cmp_authcapital);
printf("\n p_mt_company_struct_h->h_cmp_issuedcapital  is |%lf|",p_mt_company_struct_h->h_cmp_issuedcapital);
printf("\n p_mt_company_struct_h->h_cmp_tpcapital  is |%lf|",p_mt_company_struct_h->h_cmp_tpcapital);
printf("\n p_mt_company_struct_h->h_cmp_maker  is |%s|",p_mt_company_struct_h->h_cmp_maker);
printf("\n p_mt_company_struct_h->h_cmp_maker_dt  is |%s|",p_mt_company_struct_h->h_cmp_maker_dt);
printf("\n p_mt_company_struct_h->h_access_stamp  is |%s|",p_mt_company_struct_h->h_access_stamp);
printf("\n p_mt_company_struct_h->h_cmp_checker  is |%s|",p_mt_company_struct_h->h_cmp_checker);
printf("\n p_mt_company_struct_h->h_cmp_checker_dt  is |%s|",p_mt_company_struct_h->h_cmp_checker_dt);
printf("\n p_mt_company_struct_h->h_cmp_status  is |%s|",p_mt_company_struct_h->h_cmp_status);

/* Start - Added by Gouse for  (Auto Comapny Code Generation) - 17/11/11 */
/*IF_COND_EXISTS("MT_COMPANY","AUTO_CODEGENERATED")
 {
        /* memset(p_mt_company_struct_h->h_cmp_code,0x00,sizeof(p_mt_company_struct_h->h_cmp_code));
         l_mt_company_struct_i->i_cmp_code =0;
         EXEC SQL SELECT MT_CMP_CODESEQ.nextval  INTO :p_mt_company_struct_h->h_cmp_code FROM DUAL;
         IS_ANY_ORA_ERROR;
 }
 else
 {
                 printf("Code of CMP_CODE Manual Entry\n");
                 printf("\n p_mt_company_struct_h->h_cmp_code is |%s|",p_mt_company_struct_h->h_cmp_code);
        //memset(p_mt_company_struct_h->h_cmp_code,0x00,sizeof(p_mt_company_struct_h->h_cmp_code));
        printf("\n p_mt_company_struct_h->h_cmp_code is |%s|",p_mt_company_struct_h->h_cmp_code);

  }
/* End - Added hy Gouse for  (Auto Comapny Code Generation) - 17/11/11*/
                                      
 EXEC SQL INSERT INTO MT_COMPANY VALUES (:p_mt_company_struct_h:l_mt_company_struct_i);
     IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_COMPANY_EXISTS,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)  
     }
   if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_MODIFY))
     {
       l_checker =-1;
       l_checkerdt =-1;
       strcpy(p_mt_company_struct_h->h_cmp_checker,APL_NULL_STRING);
       strcpy(p_mt_company_struct_h->h_cmp_checker_dt,APL_NULL_STRING);
   CO_ProcMonitor(APL_OUT_FILE, "Entered Modify h_mode of Function  MT_Mod_DbCompanyFnFn\n",NULL,p_intl_envdatastruct_h);
 EXEC SQL SELECT ACCESS_STAMP, STATUS
                 INTO   :chr_access_stamp_compare:l_access_stamp_compare,
                        :p_mt_company_struct_h->h_cmp_status:l_mt_company_struct_i->i_cmp_status
                 FROM MT_COMPANY
                  WHERE CMP_CODE =:p_mt_company_struct_h->h_cmp_code
                  FOR UPDATE;

    IS_ANY_ORA_ERROR;
	APL_IF_DEBUG{
	printf("p_mt_company_struct_h->h_access_stamp is %s\n",p_mt_company_struct_h->h_access_stamp);
	printf("chr_access_stamp_compare is %s\n",chr_access_stamp_compare);
}
    if (strcmp(p_mt_company_struct_h->h_access_stamp,chr_access_stamp_compare)==0)
       {
 if(strcmp(p_mt_company_struct_h->h_cmp_status,STATUS_DEL_UAUTH))  
       {
         strcpy(p_mt_company_struct_h->h_access_stamp,chr_sys_time);
         l_mt_company_struct_i->i_access_stamp =0;
         strcpy(p_mt_company_struct_h->h_cmp_status,STATUS_UAUTH);
         l_mt_company_struct_i->i_cmp_status =0;

         EXEC SQL UPDATE MT_COMPANY SET
                  MAKER =:p_intl_envdatastruct_h->usr:l_maker,
   MAKER_DT =:chr_sys_time:l_makerdt,
         CMP_NAME=:p_mt_company_struct_h->h_cmp_name:l_mt_company_struct_i->i_cmp_name,
         CMP_OLDNAME=:p_mt_company_struct_h->h_cmp_oldname:l_mt_company_struct_i->i_cmp_old_name,

         CMP_SHORTNM=:p_mt_company_struct_h->h_cmp_shortnm:l_mt_company_struct_i->i_cmp_shortnm,
         CMP_ADD1=:p_mt_company_struct_h->h_cmp_add1:l_mt_company_struct_i->i_cmp_add1,
          
         CMP_ADD2=:p_mt_company_struct_h->h_cmp_add2:l_mt_company_struct_i->i_cmp_add2,
         CITY=:p_mt_company_struct_h->h_cmp_add_city:l_mt_company_struct_i->i_cmp_add_city,
         STATE=:p_mt_company_struct_h->h_cmp_add_state:l_mt_company_struct_i->i_cmp_add_state,
         COUNTRY=:p_mt_company_struct_h->h_cmp_add_cnt:l_mt_company_struct_i->i_cmp_add_cnt,
         CMP_ADD_PIN=:p_mt_company_struct_h->h_cmp_add_pin:l_mt_company_struct_i->i_cmp_add_pin,
         CMP_TEL=:p_mt_company_struct_h->h_cmp_tel:l_mt_company_struct_i->i_cmp_tel,
         CMP_FAX=:p_mt_company_struct_h->h_cmp_fax:l_mt_company_struct_i->i_cmp_fax,
         CMP_WEBADD=:p_mt_company_struct_h->h_cmp_webadd:l_mt_company_struct_i->i_cmp_webadd,
         CMP_SWF_NAME=:p_mt_company_struct_h->h_cmp_swf_name:l_mt_company_struct_i->i_cmp_swf_name,
         CMP_SECNM=:p_mt_company_struct_h->h_cmp_secnm:l_mt_company_struct_i->i_cmp_secnm,
         CMP_SEC_EMAIL=:p_mt_company_struct_h->h_cmp_sec_email:l_mt_company_struct_i->i_cmp_sec_email,
                  CHECKER =:p_mt_company_struct_h->h_cmp_checker:l_checker,
         CMP_MDNM=:p_mt_company_struct_h->h_cmp_mdnm:l_mt_company_struct_i->i_cmp_mdnm,
         CMP_INDUSTRYCD=:p_mt_company_struct_h->h_cmp_industrycd:l_mt_company_struct_i->i_cmp_industrycd,
         CMP_SECTORCD=:p_mt_company_struct_h->h_cmp_sectorcd:l_mt_company_struct_i->i_cmp_sectorcd,
         CMP_REMARKS=:p_mt_company_struct_h->h_cmp_remarks:l_mt_company_struct_i->i_cmp_remarks,
         CMP_AUTHCAPITAL=:p_mt_company_struct_h->h_cmp_authcapital:l_mt_company_struct_i->i_cmp_authcapital,
         CMP_ISSUEDCAPITAL=:p_mt_company_struct_h->h_cmp_issuedcapital:l_mt_company_struct_i->i_cmp_issuedcapital,
         CMP_TPCAPITAL=:p_mt_company_struct_h->h_cmp_tpcapital:l_mt_company_struct_i->i_cmp_tpcapital,
                  CHECKER_DT =:p_mt_company_struct_h->h_cmp_checker_dt:l_checkerdt,
                  STATUS =:p_mt_company_struct_h->h_cmp_status:l_mt_company_struct_i->i_cmp_status,
                  ACCESS_STAMP =:chr_sys_time:l_access_stamp
                  WHERE CMP_CODE =:p_mt_company_struct_h->h_cmp_code;
 IS_ANY_ORA_ERROR;
      }
    else
     {
 if (CO_InsertErr
                        (l_debug_info_ptr,
                         ERR_MODIFY_NOTALLOWED,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         __LINE__,
                         __FILE__
                        ) != APL_SUCCESS)
                        APL_GOBACK_FAIL
                        APL_GOBACK_FAIL
}
}
else
{    
         if (CO_InsertErr
                        (l_debug_info_ptr,
                         ERR_ACCESSSTAMP_CHGD,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         __LINE__,
                         __FILE__
                        ) != APL_SUCCESS)
                        APL_GOBACK_FAIL
                        APL_GOBACK_FAIL
           }
        }
      


 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_AUTHORISE))
        {

APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Authorize h_mode of Function MT_Mod_DbCompanyFnFn\n",
                NULL,p_intl_envdatastruct_h);
 }

        memset(p_mt_company_struct_h->h_cmp_status, NULL, APL_STATUS_LEN);


        EXEC SQL SELECT ACCESS_STAMP, STATUS
                 INTO   :chr_access_stamp_compare:l_access_stamp_compare,
                        :p_mt_company_struct_h->h_cmp_status:l_mt_company_struct_i->i_cmp_status
                 FROM MT_COMPANY
                  WHERE CMP_CODE =:p_mt_company_struct_h->h_cmp_code
                  FOR UPDATE;
        IS_ANY_ORA_ERROR
	APL_IF_DEBUG{
	printf("p_mt_company_struct_h->h_access_stamp is %s\n",p_mt_company_struct_h->h_access_stamp);
	printf("chr_access_stamp_compare is %s\n",chr_access_stamp_compare);
}
        if (strcmp(p_mt_company_struct_h->h_access_stamp,chr_access_stamp_compare)==0)
           {
        if(strcmp(p_mt_company_struct_h->h_cmp_status,STATUS_DEL_UAUTH))
            {
            strcpy(p_mt_company_struct_h->h_access_stamp,chr_sys_time);
            l_mt_company_struct_i->i_access_stamp =0;
             strcpy(p_mt_company_struct_h->h_cmp_checker,p_intl_envdatastruct_h->usr);
            l_mt_company_struct_i->i_cmp_checker=0;
            strcpy(p_mt_company_struct_h->h_cmp_checker_dt,chr_sys_time);
            l_mt_company_struct_i->i_cmp_checker_dt=0;
            strcpy(p_mt_company_struct_h->h_cmp_status,STATUS_AUTH);
            l_mt_company_struct_i->i_cmp_status =0;

            EXEC SQL UPDATE MT_COMPANY SET
                CHECKER =:p_intl_envdatastruct_h->usr:l_checker,
                CHECKER_DT =:chr_sys_time:l_checkerdt,
                ACCESS_STAMP =:chr_sys_time:l_access_stamp,
                STATUS =:p_mt_company_struct_h->h_cmp_status:l_mt_company_struct_i->i_cmp_status
                  WHERE CMP_CODE =:p_mt_company_struct_h->h_cmp_code;
                IS_ANY_ORA_ERROR;
                }
            else
            {
            EXEC SQL DELETE MT_COMPANY
     WHERE CMP_CODE =:p_mt_company_struct_h->h_cmp_code;
            IS_ANY_ORA_ERROR
            }
           }
        else
           {
                if (CO_InsertErr
                        (l_debug_info_ptr,
                         ERR_ACCESSSTAMP_CHGD,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         __LINE__,
                         __FILE__
                        ) != APL_SUCCESS)
                        APL_GOBACK_FAIL
                        APL_GOBACK_FAIL
           }

}

if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_DELETE))
        {
        l_checker =-1;
        l_checkerdt =-1;
        strcpy(p_mt_company_struct_h->h_cmp_checker,APL_NULL_STRING);
        strcpy(p_mt_company_struct_h->h_cmp_checker_dt,APL_NULL_STRING);

APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Delete h_mode of Function MT_Mod_DbCompanyFnFn\n",
                NULL,p_intl_envdatastruct_h);
 }

        EXEC SQL SELECT ACCESS_STAMP
                  INTO :chr_access_stamp_compare:l_access_stamp_compare
                  FROM MT_COMPANY
                  WHERE CMP_CODE =:p_mt_company_struct_h->h_cmp_code
                  FOR UPDATE ;
        IS_ANY_ORA_ERROR
	APL_IF_DEBUG{
	printf("p_mt_company_struct_h->h_access_stamp is %s\n",p_mt_company_struct_h->h_access_stamp);
	printf("chr_access_stamp_compare is %s\n",chr_access_stamp_compare);
}

        if (strcmp(p_mt_company_struct_h->h_access_stamp,chr_access_stamp_compare)==0)
           {
        strcpy(p_mt_company_struct_h->h_access_stamp,chr_sys_time);
        l_mt_company_struct_i->i_access_stamp =0;
        strcpy(p_mt_company_struct_h->h_cmp_status,STATUS_DEL_UAUTH);
        l_mt_company_struct_i->i_cmp_status =0;
        EXEC SQL UPDATE MT_COMPANY SET
                MAKER =:p_intl_envdatastruct_h->usr:l_maker,
                MAKER_DT =:chr_sys_time:l_makerdt,
                CHECKER =:p_mt_company_struct_h->h_cmp_checker:l_checker,
                 CHECKER_DT =:p_mt_company_struct_h->h_cmp_checker_dt:l_checkerdt,
                ACCESS_STAMP =:chr_sys_time:l_access_stamp,
                 STATUS =:p_mt_company_struct_h->h_cmp_status:l_mt_company_struct_i->i_cmp_status
                        WHERE CMP_CODE =:p_mt_company_struct_h->h_cmp_code;
        IS_ANY_ORA_ERROR
           }
        else
           {
                     if (CO_InsertErr
                        (l_debug_info_ptr,
                         ERR_ACCESSSTAMP_CHGD,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         __LINE__,
                         __FILE__
                        ) != APL_SUCCESS)
                        APL_GOBACK_FAIL
                        APL_GOBACK_FAIL
          }
}
  if (int_error_flag == APL_FAILURE)
        {
        APL_GOBACK_FAIL

        }
  if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_RESET))
        {

APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Reset h_mode of Function MT_Mod_DbCompanyFnFn\n",
                NULL,p_intl_envdatastruct_h);
 }

        memset(p_mt_company_struct_h->h_cmp_status, NULL, APL_STATUS_LEN);

        EXEC SQL SELECT ACCESS_STAMP, STATUS
                 INTO   :chr_access_stamp_compare:l_access_stamp_compare,
                        :p_mt_company_struct_h->h_cmp_status:l_mt_company_struct_i->i_cmp_status
                 FROM MT_COMPANY  
                  WHERE CMP_CODE =:p_mt_company_struct_h->h_cmp_code
                  FOR UPDATE ;

        IS_ANY_ORA_ERROR

	APL_IF_DEBUG{
	printf("p_mt_company_struct_h->h_access_stamp is %s\n",p_mt_company_struct_h->h_access_stamp);
	printf("chr_access_stamp_compare is %s\n",chr_access_stamp_compare);
                   }
        if (strcmp(p_mt_company_struct_h->h_access_stamp,chr_access_stamp_compare)==0)
           {
        if(!strcmp(p_mt_company_struct_h->h_cmp_status,STATUS_DEL_UAUTH))
            {
      strcpy(p_mt_company_struct_h->h_access_stamp,chr_sys_time);
            l_mt_company_struct_i->i_access_stamp =0;
             strcpy(p_mt_company_struct_h->h_cmp_checker,p_intl_envdatastruct_h->usr);
            l_mt_company_struct_i->i_cmp_checker=0;
            strcpy(p_mt_company_struct_h->h_cmp_checker_dt,chr_sys_time);
            l_mt_company_struct_i->i_cmp_checker_dt=0;
            strcpy(p_mt_company_struct_h->h_cmp_status,STATUS_AUTH);
            l_mt_company_struct_i->i_cmp_status =0;

            EXEC SQL UPDATE MT_COMPANY SET
                CHECKER =:p_intl_envdatastruct_h->usr:l_checker,
                CHECKER_DT =:chr_sys_time:l_checkerdt,
                ACCESS_STAMP =:chr_sys_time:l_access_stamp,
                STATUS =:p_mt_company_struct_h->h_cmp_status:l_mt_company_struct_i->i_cmp_status
                  WHERE CMP_CODE =:p_mt_company_struct_h->h_cmp_code;
                IS_ANY_ORA_ERROR;
                }
         else
          {
                 if (CO_InsertErr
                        (l_debug_info_ptr,
                         ERR_RESET_NOTALLOWED,   
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         __LINE__,
                         __FILE__
                        ) != APL_SUCCESS)
                        APL_GOBACK_FAIL
                        APL_GOBACK_FAIL
           }
  }
        else
           {
                if (CO_InsertErr
                        (l_debug_info_ptr,
                         ERR_ACCESSSTAMP_CHGD,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         __LINE__,
                         __FILE__
                        ) != APL_SUCCESS)
                        APL_GOBACK_FAIL
                        APL_GOBACK_FAIL
           }
        }
 if (int_error_flag == APL_FAILURE)
        {
        APL_GOBACK_FAIL
        } 
        APL_GOBACK_SUCCESS

        RETURN_SUCCESS :
        {
          CO_ProcMonitor(APL_OUT_FILE, "Function MT_Mod_DbCompanyFn successful\n",NULL,p_intl_envdatastruct_h);
        free(l_mt_company_struct_i);
        return(APL_SUCCESS);
        }
        RETURN_FAILURE :
        {
        CO_ProcMonitor(APL_OUT_FILE, "Function MT_Mod_DbCompanyFn unsuccessful\n",NULL,p_intl_envdatastruct_h);
        free(l_mt_company_struct_i);
        return(APL_FAILURE);
   }

}

int MT_Chk_MkrChkr_Company(char *p_cmp_code,char *p_user,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
  struct sqlca sqlca;
  char maker[15];
  short l_maker = 0;
  int int_error_flag = APL_SUCCESS;

#ifdef APL_THREADS
    APL_SET_CONTEXT
    EXEC SQL CONTEXT USE :my_ctx_local;
#endif

APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Function MT_Chk_MkrChkr_Company\n",
                NULL,NULL);
 }


  if (!strlen(p_cmp_code))
        {
        APL_DATA_MISSING("Company Code",APL_NULL_STRING,APL_NULL_STRING);
        int_error_flag = APL_FAILURE;
        }

  if (!strlen(p_user))
        {
        APL_DATA_MISSING("User",APL_NULL_STRING,APL_NULL_STRING);
        int_error_flag = APL_FAILURE;
        }

  if (int_error_flag == APL_FAILURE)
        {
        APL_GOBACK_FAIL
        }
  EXEC SQL VAR maker IS STRING(15);
 EXEC SQL SELECT MAKER
                INTO :maker:l_maker
                FROM MT_COMPANY
                WHERE CMP_CODE =:p_cmp_code;

        IS_ANY_ORA_ERROR
  if (strcmp(p_user,maker)==0)
        {
         if (CO_InsertErr
                        (l_debug_info_ptr,
                        ERR_MAKER_CHECKER_SAME,
                        APL_NULL_STRING,
                        APL_NULL_STRING,
                        APL_NULL_STRING,
                        __LINE__,
                         __FILE__
                        ) == APL_SUCCESS)
        APL_GOBACK_FAIL
        int_error_flag = APL_FAILURE;
        }

  if (int_error_flag == APL_FAILURE)
        {
        APL_GOBACK_FAIL
        }
  APL_GOBACK_SUCCESS

  RETURN_SUCCESS :
        {
APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "MT_Chk_MkrChkr_Company Successful\n",
                NULL,NULL);
 }
        return(APL_SUCCESS);
        }
  RETURN_FAILURE :
        {
APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "MT_Chk_MkrChkr_Company unsuccessful\n",
                NULL,NULL);
 }
        return(APL_FAILURE);
        }

}

int MTCompanyInInstruFn(char *p_cmp_code,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
   struct sqlca sqlca;
   int int_p_exist =0;
   short p_i_Exist =0;
    int int_error_flag = APL_SUCCESS;

 #ifdef APL_THREADS
     APL_SET_CONTEXT
     EXEC SQL CONTEXT USE :my_ctx_local;
 #endif

 APL_IF_DEBUG
  {
   CO_ProcMonitor(APL_OUT_FILE, "Entered Function MTCompanyInInstruFn \n",
                NULL,NULL);
  }

   EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_p_exist:p_i_Exist
                FROM MT_INSTRUMENT
                WHERE CMP_CODE =:p_cmp_code;
   IS_ANY_ORA_ERROR

  if (int_p_exist ==0)
        {
        APL_GOBACK_SUCCESS
        }
        else APL_GOBACK_FAIL

    RETURN_SUCCESS :
        {
 APL_IF_DEBUG
  {
 CO_ProcMonitor(APL_OUT_FILE, "Function MTCompanyInInstruFn is successful\n",
 NULL,NULL);
  }
        return(APL_SUCCESS);
        }
   RETURN_FAILURE :
        {
 APL_IF_DEBUG
  {
   CO_ProcMonitor(APL_OUT_FILE, "MTCompanyInInstruFn could not find \n",
                NULL,NULL);
  }
        return(APL_FAILURE);
        }
 }

