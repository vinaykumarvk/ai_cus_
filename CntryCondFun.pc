


   
   
   
   
   
   
   
   
   
   
   
   




#include "CR_Common.h"

EXEC SQL INCLUDE sqlca;




int CO_Chk_CntryEnabled(char *p_mainfunc, char *p_condid, short *p_condexists,DEBUG_INFO_STRUCT_H **l_debug_info_ptr) 
{
	char p_condid_t[20];
	EXEC SQL BEGIN DECLARE SECTION;
		struct sqlca	sqlca;
		short h_CondExists=0, i_CondExists=0;
	EXEC SQL END DECLARE SECTION;
	
	#ifdef APL_THREADS
	APL_SET_CONTEXT
	EXEC SQL CONTEXT USE	:my_ctx_local;
	#endif
	sqlca.sqlcode = 0;

	#ifdef SYS_DEBUG
		fprintf(APL_OUT_FILE,"Entered processtion CO_Chk_CntryEnabled\n");
	#endif

	memset(p_condid_t,APL_NULL_CHAR, 20);
	if ((p_mainfunc == NULL) || (strcmp(p_mainfunc, APL_NULL_STRING)) == 0)
	{
		APL_DATA_MISSING("MAIN FUNCTION",APL_NULL_STRING,APL_NULL_STRING);
	}

	if ((p_condid == NULL) || (strcmp(p_condid, APL_NULL_STRING)) == 0)
	{
		APL_DATA_MISSING("CONDITION IDENTIFIER",APL_NULL_STRING,APL_NULL_STRING);
	}
       if (strcmp (g_mt_commonsys_params_struct_h.nation_code,"IN") == 0 )
       {
			strcpy(p_condid_t, p_condid); 
         strcat(p_condid_t,"#");
         strcat(p_condid_t,g_mt_commonsys_params_struct_h.installed_at_bank);
		   p_condid = p_condid_t;
       }

	#ifdef SYS_DEBUG
		fprintf(APL_OUT_FILE,"Main Function is %s \n",p_mainfunc);
		fprintf(APL_OUT_FILE,"Condition Identifier is %s \n",p_condid);
	#endif

	EXEC SQL SELECT NVL(COUNT(*),0) INTO :h_CondExists:i_CondExists FROM PRO_CNTRY_SYS_PARAMS 
		WHERE 	MAIN_FUN  = :p_mainfunc
			AND   COND_FUN = :p_condid
			AND   ((NATION = :g_mt_commonsys_params_struct_h.nation_code) OR (NATION = 'XX')); 

	IS_ANY_ORA_ERROR;
	
	*p_condexists = h_CondExists;
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
	#ifdef SYS_DEBUG
		fprintf(APL_OUT_FILE,"Exiting From CO_Chk_CntryEnabled successfully\n");
	#endif
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
	#ifdef SYS_DEBUG
		fprintf(APL_OUT_FILE,"Exiting From CO_Chk_CntryEnabled with errors\n");
	#endif
		return(APL_FAILURE);
	}
}



int CO_Chk_SplVal(const char *p_main_func_area, const char *p_sub_func, 
					  const char *p_field_val, int *p_exists, 
					  DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;
		char chr_h_main_func_area[21], chr_h_sub_func[21], chr_h_field_val[21];
		char h_nation[3];
		int int_h_exists = 0;
		EXEC SQL VAR chr_h_main_func_area IS STRING;
		EXEC SQL VAR chr_h_sub_func IS STRING;
		EXEC SQL VAR chr_h_field_val IS STRING;
		EXEC SQL VAR h_nation IS STRING;
		struct sqlca sqlca;
	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0L;

	strcpy(chr_h_main_func_area, p_main_func_area);
	strcpy(chr_h_sub_func, p_sub_func);
	strcpy(chr_h_field_val, p_field_val);
	strcpy(h_nation, g_mt_commonsys_params_struct_h.nation_code);

	EXEC SQL SELECT NVL(COUNT(ROWID), 0)
				INTO :int_h_exists
				FROM PRO_GSSPLVAL
				WHERE EXISTS (SELECT NATION
								  FROM PRO_GSSPLVAL
								  WHERE ((NATION = :h_nation) AND
										   (MAIN_FUN = :chr_h_main_func_area) AND
										   (SUB_PROCESS = :chr_h_sub_func) AND
										   (FIELD_VAL = :chr_h_field_val)));

	IS_ANY_ORA_ERROR

	if(int_h_exists == 0)
   {
      EXEC SQL SELECT NVL(COUNT(ROWID), 0)
               INTO :int_h_exists
               FROM PRO_GSSPLVAL
               WHERE EXISTS (SELECT NATION
                             FROM PRO_GSSPLVAL
                             WHERE ((NATION ='XX') AND
                                    (MAIN_FUN = :chr_h_main_func_area) AND
                                    (SUB_PROCESS = :chr_h_sub_func) AND
                                    (FIELD_VAL = :chr_h_field_val)));


      IS_ANY_ORA_ERROR
   }

	*p_exists = int_h_exists;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
CO_Chk_SplVal().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
CO_Chk_SplVal().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int CO_Chk_EMU_Period(char *p_dt, int *p_period_flg,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	int CO_RtvSysDt(char *p_dt, DEBUG_INFO_STRUCT_H **l_debug_info_ptr);
	int CO_Pro_DateComp(char *p_from_date, char *p_to_date, int *int_p_diff, 
						  DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	

	int int_l_diff = 0;

	EXEC SQL BEGIN DECLARE SECTION;

		char chr_h_date[APL_DATE_LEN];
		char chr_h_emudate1[APL_DATE_LEN], chr_h_emudate2[APL_DATE_LEN];
		short int int_i_emudate1 = 0, int_i_emudate2 = 0;
		struct sqlca sqlca;
		EXEC SQL VAR chr_h_date IS STRING;
		EXEC SQL VAR chr_h_emudate1 IS STRING;
		EXEC SQL VAR chr_h_emudate2 IS STRING;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0L;
	memset(chr_h_date, APL_NULL_CHAR, APL_DATE_LEN);
	memset(chr_h_emudate1, APL_NULL_CHAR, APL_DATE_LEN);
	memset(chr_h_emudate2, APL_NULL_CHAR, APL_DATE_LEN);

	if ( !strlen(p_dt) )
	{
		if ( APL_FAILURE == CO_RtvSysDt(chr_h_date, l_debug_info_ptr) )
		{
			APL_GOBACK_FAIL
		}
	}
	else
	{
		strcpy(chr_h_date, p_dt);
	}

	EXEC SQL SELECT FIELD_VAL
				INTO :chr_h_emudate1 INDICATOR :int_i_emudate1
				FROM PRO_GSSPLVAL
				WHERE ((MAIN_FUN = 'EMUCONV') AND
						 (SUB_PROCESS = 'BEGIN_DATE') AND
						 (NATION = :g_mt_commonsys_params_struct_h.nation_code));

	IS_ANY_ORA_ERROR

	if ( APL_ZERO_RESULT_SET )
	{
		*p_period_flg = 0;

		APL_GOBACK_SUCCESS
	}

	int_l_diff = 0;

	if ( APL_FAILURE == 
						CO_Pro_DateComp(chr_h_date, chr_h_emudate1, &int_l_diff, l_debug_info_ptr) )
	{
		APL_GOBACK_FAIL
	}

	if ( int_l_diff > 0 ) 
	{
		*p_period_flg = 1;

		APL_GOBACK_SUCCESS
	}

	EXEC SQL SELECT FIELD_VAL
				INTO :chr_h_emudate2 INDICATOR :int_i_emudate2
				FROM PRO_GSSPLVAL
				WHERE ((MAIN_FUN = 'EMUCONV') AND
						 (SUB_PROCESS = 'END_DATE') AND
						 (NATION = :g_mt_commonsys_params_struct_h.nation_code));

	IS_ANY_ORA_ERROR

	if ( APL_ZERO_RESULT_SET )
	{
		*p_period_flg = 0;

		APL_GOBACK_SUCCESS
	}

	int_l_diff = 0;

	if ( APL_FAILURE == 
						CO_Pro_DateComp(chr_h_date, chr_h_emudate2, &int_l_diff, l_debug_info_ptr) )
	{
		APL_GOBACK_FAIL
	}

	if ( int_l_diff < 0 ) 
	{
		*p_period_flg = 3;
	}
	else
	{
		*p_period_flg = 2;
	}

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
CO_Chk_EMU_Period().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
CO_Chk_EMU_Period().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}




int CO_Rtv_FldVal( char *p_main_func_area,char *p_sub_func,
					  char *p_field_val,
					  DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

        /* Commented for AIX Migration to remove warning:defined but not used***/
	/****char chr_h_main_func_area[APL_MAINFUNCAREA_LEN]= APL_NULL_STRING;
	  char chr_h_sub_func[APL_MAINFUNCAREA_LEN]		 = APL_NULL_STRING;***/
		char chr_h_field_val[APL_MAINFUNCAREA_LEN]		 = APL_NULL_STRING;
		
		short i_field_val = 0;

	EXEC SQL BEGIN DECLARE SECTION;
               /* Commented for AIX Migration to remove warning:defined but not used***/
		/*************EXEC SQL VAR chr_h_main_func_area IS STRING;
		EXEC SQL VAR chr_h_sub_func IS STRING;***************/
		EXEC SQL VAR chr_h_field_val IS STRING;
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0L;


	EXEC SQL SELECT FIELD_VAL INTO :chr_h_field_val:i_field_val
	FROM PRO_GSSPLVAL WHERE
	MAIN_FUN=:p_main_func_area
   AND SUB_PROCESS =:p_sub_func
	AND NATION=:g_mt_commonsys_params_struct_h.nation_code;

	IS_ANY_ORA_ERROR

	if(sqlca.sqlcode == 1403)
	{
		i_field_val = 0;
		strcpy(chr_h_field_val,APL_NULL_STRING);

		EXEC SQL SELECT FIELD_VAL INTO :chr_h_field_val:i_field_val 
		FROM PRO_GSSPLVAL WHERE
		MAIN_FUN=:p_main_func_area
   	AND SUB_PROCESS =:p_sub_func
		AND NATION='XX';

		IS_ANY_ORA_ERROR
	}
	
   if(sqlca.sqlcode == 1403)
	{
		CO_InsertErr(l_debug_info_ptr,ERR_REC_NOTFND,p_main_func_area,p_sub_func,APL_NULL_STRING,__LINE__,__FILE__);
	   APL_GOBACK_FAIL
	}
	else
	{
		strcpy(p_field_val,chr_h_field_val);
		APL_GOBACK_SUCCESS
	}
 

RETURN_SUCCESS :
   {
      fprintf(APL_OUT_FILE,"Exiting From CO_Rtv_FldVal successfully\n");
      return(APL_SUCCESS);
   }

RETURN_FAILURE :
   {
      fprintf(APL_OUT_FILE,"Exiting From CO_Rtv_FldVal with errors\n");
      return(APL_FAILURE);
   }
}



int CO_Chk_CcyConvDt(char *p_dt, int *p_period_flg, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	int CO_RtvSysDt(char *p_dt, DEBUG_INFO_STRUCT_H **l_debug_info_ptr);
	int CO_Pro_DateComp(char *p_from_date, char *p_to_date, int *int_p_diff, 
						  DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	

	int int_l_diff = 0;

	EXEC SQL BEGIN DECLARE SECTION;

		char chr_h_date[APL_DATE_LEN];
		char chr_h_currconvdate[APL_DATE_LEN];
		short int int_i_currconvdate = 0;
		struct sqlca sqlca;
		EXEC SQL VAR chr_h_date IS STRING;
		EXEC SQL VAR chr_h_currconvdate IS STRING;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0L;
	memset(chr_h_date, APL_NULL_CHAR, APL_DATE_LEN);
	memset(chr_h_currconvdate, APL_NULL_CHAR, APL_DATE_LEN);

	*p_period_flg = 0;

	if ( !strlen(p_dt) )
	{
		if ( APL_FAILURE == CO_RtvSysDt(chr_h_date, l_debug_info_ptr) )
		{
			APL_GOBACK_FAIL
		}
	}
	else
	{
		strcpy(chr_h_date, p_dt);
	}

	EXEC SQL SELECT FIELD_VAL
				INTO :chr_h_currconvdate INDICATOR :int_i_currconvdate
				FROM PRO_GSSPLVAL
				WHERE ((MAIN_FUN = 'TRLCONV') AND
						 (SUB_PROCESS = 'TRL_CONV_DATE') AND
						 (NATION = :g_mt_commonsys_params_struct_h.nation_code));

	IS_ANY_ORA_ERROR

	if ( APL_ZERO_RESULT_SET )
	{
		*p_period_flg = 0;

		APL_GOBACK_SUCCESS
	}

	int_l_diff = 0;

	if ( APL_FAILURE == 
						CO_Pro_DateComp(chr_h_date, chr_h_currconvdate, &int_l_diff, l_debug_info_ptr) )
	{
		APL_GOBACK_FAIL
	}

	if ( int_l_diff < 0 ) 
	{
		*p_period_flg = 1;

		APL_GOBACK_SUCCESS
	}

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
CO_Chk_CcyConvDt().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
CO_Chk_CcyConvDt().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}

