

   
   
   
   
   
   
   
   
   
   
   
   




#include <CO_HostStructdef.h>

EXEC SQL INCLUDE sqlca;

#define FILENAME_LEN_A			80

int main(int argc,char **argv) //AIX - Warnings Removal
{
	DEBUG_INFO_STRUCT_H			*l_debug_info_ptr = NULL;
	FILE						*l_ptr_ini_file = NULL;
	FILE						*l_ptr_log_file = NULL;
	INTL_ENV_DATA_STRUCT_H	l_intl_envdatastruct_h;
	char						chr_l_inifile[FILENAME_LEN_A]   = APL_NULL_STRING;
	char						chr_uname[APL_USERID_LEN]   = APL_NULL_STRING;
	char						chr_passwd[APL_PASSWD_LEN]  = APL_NULL_STRING;
	char						chr_custody_id_b[APL_USERID_LEN]  = APL_NULL_STRING;
	int						int_l_flg = 0;
	int						int_retval = 0;
	char						chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	struct sqlca			sqlca;

	memset(&l_intl_envdatastruct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H));
	
	

	strcpy(l_intl_envdatastruct_h.usr, argv[3]);
	strcpy(l_intl_envdatastruct_h.h_mode, argv[4]);
	strcpy(l_intl_envdatastruct_h.processtion, argv[5]);
	strcpy(l_intl_envdatastruct_h.auth_req, argv[6]);
	strcpy(l_intl_envdatastruct_h.subprocess, argv[7]);
	strcpy(l_intl_envdatastruct_h.h_process, argv[8]);
	
	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

	if ((l_ptr_ini_file = fopen(chr_l_inifile,"r")) == NULL)
		exit(-1);

	APL_FETCH_DB_LOGIN_DETAILS(l_ptr_ini_file,chr_custody_id_b,chr_uname,chr_passwd,APL_OUT_FILE,&l_debug_info_ptr)
	
	
	
	if (CO_DB_Connection_F(chr_uname,chr_passwd,&l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL

	

	
	

	int_retval = CO_Rtv_RptFileName("3I",APL_LOGFILE_DESC,100,argv[5],argv,&l_ptr_log_file,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL
	}

	

	EXEC SQL COMMIT WORK;
	
	if (sqlca.sqlcode != 0)
	{
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL
	}

	CO_ProcMonitor(l_ptr_log_file,"EOD - Modify Interest Dates",NULL,NULL);
	CO_ProcMonitor(l_ptr_log_file,"___________________________\n",NULL,NULL);
	
	CO_ProcMonitor(l_ptr_log_file,"Work Committed after log file creation \n",NULL,&l_intl_envdatastruct_h);

	

	if (CO_RtvSysParams(&l_debug_info_ptr) != APL_SUCCESS)
	{
		CO_ProcMonitor(l_ptr_log_file,"Unable to get system parameters - Rollback done \n",NULL,&l_intl_envdatastruct_h);
		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);
		
		EXEC SQL ROLLBACK WORK RELEASE;
		
		APL_GOBACK_FAIL	
	}

	
	 
	int_retval = CO_Proc_BtchLock(argv,l_ptr_log_file,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		CO_ProcMonitor(l_ptr_log_file,"Unable to lock SYS_BATCHPROC record - Rollback done \n",NULL,&l_intl_envdatastruct_h);
		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		EXEC SQL ROLLBACK WORK RELEASE;
		
		APL_GOBACK_FAIL
	}

	

	int_retval = EOD_Proc_InstrIntDt(argv[2],l_ptr_log_file,&l_intl_envdatastruct_h,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		int_l_flg = 1;

	   CO_Proc_Exit(argv,l_ptr_log_file,&l_debug_info_ptr,int_l_flg);
		
		if (CO_ChkErr(l_debug_info_ptr) == APL_SUCCESS)
		{
			
			CO_ProcMonitor(l_ptr_log_file,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_envdatastruct_h);
			CO_FreeErrLst(&l_debug_info_ptr);

		}

		CO_ProcMonitor(l_ptr_log_file,"FAILURE from modification of intetrest dates at EOD program \n",NULL,&l_intl_envdatastruct_h);

		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		APL_GOBACK_FAIL	
	}
	else
	{
		int_l_flg = 0;

		CO_Proc_Exit(argv,l_ptr_log_file,&l_debug_info_ptr,int_l_flg);

		if (CO_ChkErr(l_debug_info_ptr) == APL_SUCCESS)
		{
			
			CO_ProcMonitor(l_ptr_log_file,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_envdatastruct_h);
			CO_FreeErrLst(&l_debug_info_ptr);

		}

		CO_ProcMonitor(l_ptr_log_file,"SUCCESS from modification of intetrest dates at EOD program \n",NULL,&l_intl_envdatastruct_h);

		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		APL_GOBACK_SUCCESS
	}

	RETURN_SUCCESS	: 
	{
		fclose(l_ptr_ini_file);
	   return(0);
	}

	RETURN_FAILURE	: 
	{
		fclose(l_ptr_ini_file);
  		return(-1);	
	}
}




int EOD_Proc_InstrIntDt(char* p_chr_sys_date_time, FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca sqlca;
	char chr_l_sys_date[APL_DATE_LEN] = APL_NULL_STRING;
   char chr_l_prevworkdt[APL_DATE_LEN] = APL_NULL_STRING;
	char chr_l_new_next_pydt[APL_DATE_LEN] = APL_NULL_STRING;
	char chr_l_prev_dt[APL_DATE_LEN] = APL_NULL_STRING;

   char int_l_status[2]=APL_NULL_STRING;
   char chr_l_mod_last_paydt = 'Y';
   char chr_l_instr_code[MT_INSTR_CODE_LEN] = APL_NULL_STRING;
   char chr_l_new_old_last_pydt[APL_DATE_LEN] = APL_NULL_STRING;
   char chr_l_freq_code[MT_FREQ_CODE_LEN] = APL_NULL_STRING;

   char chr_l_fst_pydt[APL_DATE_LEN] = APL_NULL_STRING;
   char chr_l_next_pydt[APL_DATE_LEN] = APL_NULL_STRING;
   char chr_l_last_pydt[APL_DATE_LEN] = APL_NULL_STRING;
   char chr_l_issue_dt[APL_DATE_LEN] = APL_NULL_STRING;
   char chr_l_mat_dt[APL_DATE_LEN] = APL_NULL_STRING;
   
   double l_instr_int_rate = 0;

	short i_instr_code=0;
	short i_freq_code=0; 
	short i_fst_pydt=0; 
	short i_next_pydt=0; 
	short i_last_pydt=0; 
	short i_issue_dt=0; 
	short i_mat_dt=0; 
	short i_instr_int_rate=0; 
	short i_prevworkdt=0; 

	int counter = 0;

  EXEC SQL BEGIN DECLARE SECTION;
 
   EXEC SQL VAR chr_l_prev_dt IS STRING;	
   EXEC SQL VAR chr_l_instr_code IS STRING;	
   EXEC SQL VAR chr_l_fst_pydt IS STRING;	
   EXEC SQL VAR chr_l_next_pydt IS STRING;	
   EXEC SQL VAR chr_l_last_pydt IS STRING;	
   EXEC SQL VAR chr_l_mat_dt IS STRING;	
   EXEC SQL VAR chr_l_freq_code IS STRING;	
   EXEC SQL VAR chr_l_prevworkdt IS STRING;	

   EXEC SQL END DECLARE SECTION;
   
   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif


	APL_FUNCTION_ENTER(APL_OUT_FILE)
	
	sqlca.sqlcode = 0;

	strncpy(chr_l_sys_date,p_chr_sys_date_time,10);

	IF_COND_EXISTS("MT_INSTR","NXT_INT_DT")
	{
				fprintf(p_ptr_log_file,"\n ------------------------------------------------------------------------------------------------\n");

		EXEC SQL SELECT to_char(to_date(:chr_l_sys_date,'dd/mm/yyyy') - 1) into :chr_l_prev_dt from dual;

				printf("\n system date |%s|---- prev date |%s|\n",chr_l_sys_date,chr_l_prev_dt);
		  
		  EXEC SQL SELECT MIN(H_DATE) - 1
			 INTO  :chr_l_prevworkdt:i_prevworkdt
          FROM  MT_HOLIDAY
          WHERE STATUS='AA'
         AND BANK_IND = 'Y'
         CONNECT BY PRIOR  H_DATE - 1 = H_DATE
      AND   PRIOR STATUS = STATUS
     START WITH H_DATE = (SELECT SYS_DATE -1 FROM PRO_SYS_DATE)
     AND   STATUS='AA'
     AND BANK_IND = 'Y';

			IS_ANY_ORA_ERROR

				printf("\n i_prevworkdt|%d| \n",i_prevworkdt);

		  if (i_prevworkdt == -1)
		   {
			   strcpy(chr_l_prevworkdt,chr_l_prev_dt);
		   }

				printf("\n system date |%s|---- prev working date |%s|\n",chr_l_sys_date,chr_l_prevworkdt);

  	 		EXEC SQL DECLARE Instr_det_cur CURSOR FOR   
			select I.Instr_Code, I.Freq_Code, I.Instr_Fst_Pymt_Dt, I.Next_Pay_Date, I.Last_Pymt_Date, I.Issue_Date,I.Mature_Dt, I.Instr_Int_Rate
				from MT_INSTRUMENT I
				where I.FREQ_CODE IS NOT NULL
					AND I.INSTR_FST_PYMT_DT IS NOT NULL
					AND I.MATURE_DT IS NOT NULL
					AND I.NEXT_PAY_DATE IS NOT NULL
					AND I.FREQ_CODE != 'X'
					AND I.NEXT_PAY_DATE > :chr_l_prevworkdt
					AND I.NEXT_PAY_DATE <= (SELECT SYS_DATE FROM PRO_SYS_DATE);
			
			IS_ANY_ORA_ERROR

 		  EXEC SQL OPEN Instr_det_cur ;

 		  IS_ANY_ORA_ERROR
 
			 for(;;)
			{
 		  EXEC SQL FETCH Instr_det_cur 
			  INTO :chr_l_instr_code:i_instr_code, 
			  chr_l_freq_code:i_freq_code, 
				chr_l_fst_pydt:i_fst_pydt, 
				chr_l_next_pydt:i_next_pydt, 
			  chr_l_last_pydt:i_last_pydt, 
			  chr_l_issue_dt:i_issue_dt,
			  chr_l_mat_dt:i_mat_dt,
			  l_instr_int_rate:i_instr_int_rate;

				if(APL_ZERO_RESULT_SET) 
				{
					if(counter == 0)
						fprintf(p_ptr_log_file,"\n No Interest date to be updated on date |%s| \n",chr_l_sys_date);
				break;
				}

		     		IS_ANY_ORA_ERROR

			counter++;
			if(counter == 1)
				{
				fprintf(p_ptr_log_file,"\n Instr Code \t Frequency \t Last Pymt Date \t Next Int Date\n");
			fprintf(p_ptr_log_file,"\n ------------------------------------------------------------------------------------------------\n");
				}
      if(CA_RtvNxtPayDt(   chr_l_next_pydt,
                     chr_l_mat_dt,
						chr_l_fst_pydt,
                     chr_l_freq_code,
                     &chr_l_new_next_pydt,
                     l_debug_info_ptr)== APL_FAILURE )
                                APL_GOBACK_FAIL

		fprintf(p_ptr_log_file,"\n %s \t %s \t\t %s \t %s \n",chr_l_instr_code,chr_l_freq_code, chr_l_next_pydt, chr_l_new_next_pydt);


		if(!strlen(chr_l_last_pydt))
			strcpy(chr_l_new_old_last_pydt,chr_l_issue_dt);
		else
			strcpy(chr_l_new_old_last_pydt,chr_l_last_pydt);


            EXEC  SQL   UPDATE  MT_INSTRUMENT
             SET  LAST_INCOM_RT  =  :l_instr_int_rate,
                  MOD_LAST_PAYDT =  :chr_l_mod_last_paydt,
                  NEXT_PAY_DATE  =  :chr_l_new_next_pydt,
                  OLD_LST_PAYDT  =  :chr_l_new_old_last_pydt,
                  last_pymt_date =  :chr_l_next_pydt,
                  access_stamp = :p_chr_sys_date_time
                 WHERE  instr_code  =  RTRIM(:chr_l_instr_code);


                     IS_ANY_ORA_ERROR
			}

			EXEC SQL CLOSE Instr_det_cur;
		IS_ANY_ORA_ERROR
		fprintf(p_ptr_log_file,"\n ------------------------------------------------------------------------------------------------\n");	
	}


   APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion EOD_Proc_InstrIntDt SUCCESS\n",NULL,p_intl_env_data_struct_h_d);
		
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion EOD_Proc_InstrIntDt FAILURE\n",NULL,p_intl_env_data_struct_h_d);
		
		return(APL_FAILURE);
	}
}


 
 int CO_DB_Connection_F(char *p_username,char *p_passwd,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca    sqlca;

	CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CO_DB_Connection_F \n",NULL,NULL);
	sqlca.sqlcode = 0;

	EXEC SQL CONNECT :p_username IDENTIFIED BY :p_passwd;

	if (sqlca.sqlcode != 0)
		APL_GOBACK_FAIL

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CO_DB_Connection_F SUCCESS \n",NULL,NULL);
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CO_DB_Connection_F FAILURE \n",NULL,NULL);
		return(APL_FAILURE);

	}
}


 
 int CO_Proc_Exit(char **argv,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr,int p_flg)
 {
	struct sqlca    sqlca;
	char				 chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CO_Proc_Exit \n",NULL,NULL);
	sqlca.sqlcode = 0;
	
	if (p_flg == 0)
	{
		

		if (CO_ChkErr(*l_debug_info_ptr) != APL_SUCCESS)
		{
			memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
			sprintf(chr_l_buf,"Finished EOD Interest Dates Update");

			EXEC SQL UPDATE SYS_BATCHPROC
			SET stat_det = :chr_l_buf,
			    status = 'completed'
			WHERE process_name = :argv[0]
			AND   proc_init = :argv[1]
			AND STARTDATE = :argv[2]
			AND status = 'started';
			
			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
			
		}

		EXEC SQL COMMIT WORK RELEASE;
	
		CO_ProcMonitor(p_ptr_log_file,"Work Committed\n",NULL,NULL);
	}
	else if (p_flg == 1)
	{
		EXEC SQL ROLLBACK WORK RELEASE;
		
		CO_ProcMonitor(p_ptr_log_file,"Rollback done \n",NULL,NULL);
	}

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_Exit SUCCESS \n",NULL,NULL);
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_Exit FAILURE \n",NULL,NULL);
		return(APL_FAILURE);

	}
}


 
 int CO_Proc_BtchLock(char **argv,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca    sqlca;
   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;

EXEC SQL VAR chr_g_restart_data is string;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CO_Proc_BtchLock \n",NULL,NULL);
	
	sqlca.sqlcode = 0;

	EXEC SQL SELECT processing_status INTO :chr_g_restart_data:g_restart_data_i
	FROM SYS_BATCHPROC
	WHERE process_name = :argv[0]
	AND   proc_init = :argv[1]
	AND STARTDATE = :argv[2]
	AND status = 'started'
	FOR UPDATE OF processing_status,status;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_BtchLock SUCCESS \n",NULL,NULL);
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_BtchLock FAILURE \n",NULL,NULL);
		return(APL_FAILURE);

	}
}
