

#include "CO_HostStructdef.h"

EXEC SQL INCLUDE SQLCA.H;



	





int CO_Chk_AccValid(char *p_client, char p_exist, char p_cubk, char p_orderac, char p_mastclt, char p_auth, char p_del, char p_frozen, char p_closed, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{




	

	struct sqlca sqlca;	
	MT_CLIENT_STRUCT_H l_mt_ruclient_struct_h;
	MT_CLIENT_STRUCT_I l_mt_ruclient_struct_ia_a;
	short success_flg = APL_SUCCESS;
  #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif
 
	memset(&l_mt_ruclient_struct_h, NULL, sizeof(MT_CLIENT_STRUCT_H));
	memset(&l_mt_ruclient_struct_ia_a, NULL, sizeof(MT_CLIENT_STRUCT_I));
	sqlca.sqlcode = 0;
 

	#ifdef SYS_DEBUG
		fprintf(APL_OUT_FILE, "Entered Function CO_Chk_AccValid\n");
		fprintf(APL_OUT_FILE, "The Account Number is : %s\n", p_client);
		fprintf(APL_OUT_FILE, "The Exist Flag is : %c\n", p_exist);
		fprintf(APL_OUT_FILE, "The Cubk Flag is : %c\n", p_cubk);
		fprintf(APL_OUT_FILE, "The OrderAc Flag is : %c\n", p_orderac);
		fprintf(APL_OUT_FILE, "The Master Account Flag is : %c\n", p_mastclt);
		fprintf(APL_OUT_FILE, "The Authorisation Flag is : %c\n", p_auth);
		fprintf(APL_OUT_FILE, "The Delete Flag is : %c\n", p_del);
		fprintf(APL_OUT_FILE, "The Frozen Flag is : %c\n", p_frozen);
		fprintf(APL_OUT_FILE, "The Closed Flag is : %c\n", p_closed);
	#endif		

	

	if ( !strlen(p_client) )
	{
		APL_DATA_MISSING("Account", APL_NULL_STRING, APL_NULL_STRING);
		APL_GOBACK_FAIL;
	}

	

	if (p_exist == NULL) p_exist = 'Y';
	

	
/*
	EXEC SQL SELECT * INTO :l_mt_ruclient_struct_h:l_mt_ruclient_struct_ia_a FROM MT_CLIENT 
	WHERE CLN_CODE=:p_client;
*/

	EXEC SQL SELECT CLN_BRK_ALL,CLN_ORD_CLT,CLN_CODE,CLN_MASTER,STATUS 
	INTO 
	:l_mt_ruclient_struct_h.h_clt_brk_all:l_mt_ruclient_struct_ia_a.i_clt_brk_all ,
	:l_mt_ruclient_struct_h.h_ord_clt:l_mt_ruclient_struct_ia_a.i_ord_clt, 
	:l_mt_ruclient_struct_h.h_dl_client:l_mt_ruclient_struct_ia_a.i_dl_client, 
	:l_mt_ruclient_struct_h.h_mstclt:l_mt_ruclient_struct_ia_a.i_mstclt, 
	:l_mt_ruclient_struct_h.h_clt_status:l_mt_ruclient_struct_ia_a.i_clt_status 
 FROM MT_CLIENT 
	WHERE CLN_CODE=:p_client;

	IS_ANY_ORA_ERROR;
	

	

	if ( (sqlca.sqlcode == 1403) && (p_exist == 'Y') )
	{
		CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_FND, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__);  
		APL_GOBACK_FAIL;
	}

	if ( (sqlca.sqlcode == 0) && (p_exist == 'N') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_EXST, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}	   
		success_flg = APL_FAILURE;
	}

	

	l_mt_ruclient_struct_h.h_clt_brk_all[1] = '\0';
	if ( (l_mt_ruclient_struct_h.h_clt_brk_all[0] == 'B') && (p_cubk=='C') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_CUSTOMER, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( (l_mt_ruclient_struct_h.h_clt_brk_all[0] == 'C') && (p_cubk=='B') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_BRK, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( (l_mt_ruclient_struct_h.h_clt_brk_all[0] != 'A') && (p_cubk=='A') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_DEALER, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	

	l_mt_ruclient_struct_h.h_ord_clt[1] = '\0';
	if ( (l_mt_ruclient_struct_h.h_ord_clt[0] == 'B') && (p_orderac=='C') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_CUSTODYCLIENT, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( (l_mt_ruclient_struct_h.h_ord_clt[0] == 'C') && (p_orderac=='B') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_BRKCLIENT, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}
	
	if ( (l_mt_ruclient_struct_h.h_ord_clt[0] != 'A') && (p_orderac=='A') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_BRKANDCUSTODYCLIENT, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	

	l_mt_ruclient_struct_h.h_dl_client[10]='\0';	
	l_mt_ruclient_struct_h.h_mstclt[10]='\0';	
	if ( (strcmp(l_mt_ruclient_struct_h.h_dl_client, l_mt_ruclient_struct_h.h_mstclt)) && (p_mastclt=='M') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_MASTER, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( (!strcmp(l_mt_ruclient_struct_h.h_dl_client, l_mt_ruclient_struct_h.h_mstclt)) && (p_mastclt=='S') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_ISMASTER, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	
	
	if ( (l_mt_ruclient_struct_ia_a.i_checker_dt == -1) && (p_auth=='Y') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_UNAUTH, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( (l_mt_ruclient_struct_ia_a.i_checker_dt != -1 ) && (p_auth=='N') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_MSG_ACCOUNT_AUTH, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	

	l_mt_ruclient_struct_h.h_clt_status[2]='\0';	
	if ( (strcmp(l_mt_ruclient_struct_h.h_clt_status, "DU")) && (p_del=='Y') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_MARKEDFORDEL, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( (!strcmp(l_mt_ruclient_struct_h.h_clt_status, "DU")) && (p_del=='N') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_MARKEDFORDEL, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	

	if ( (strcmp(l_mt_ruclient_struct_h.h_clt_status, "FU") && strcmp(l_mt_ruclient_struct_h.h_clt_status, "FA")) && (p_frozen=='Y') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_FRZN, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( ( (!strcmp(l_mt_ruclient_struct_h.h_clt_status, "FU")) || (!strcmp(l_mt_ruclient_struct_h.h_clt_status, "FA")) ) && (p_frozen=='N') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_FRZN, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	

	if ( (strcmp(l_mt_ruclient_struct_h.h_clt_status, "CU") && strcmp(l_mt_ruclient_struct_h.h_clt_status, "CA")) && (p_closed=='Y') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_CLOSED, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( ( (!strcmp(l_mt_ruclient_struct_h.h_clt_status, "CU")) || (!strcmp(l_mt_ruclient_struct_h.h_clt_status, "CA")) ) && (p_closed=='N') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_CLOSED, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}
	
	

	if (APL_FAILURE == success_flg ) 
	{
		APL_GOBACK_FAIL;
	}
	else 
	{
		APL_GOBACK_SUCCESS;
	}

	RETURN_SUCCESS :
		#ifdef SYS_DEBUG
			fprintf(APL_OUT_FILE,"Leaving Function CO_Chk_AccValid with success\n");
		#endif
		return(APL_SUCCESS);
	
	RETURN_FAILURE :
		#ifdef SYS_DEBUG
			fprintf(APL_OUT_FILE,"Leaving Function CO_Chk_AccValid with failure\n");
		#endif
		return(APL_FAILURE);
}							





int CO_Chk_InstrValid(char *p_instrcode, char p_exist, char p_auth, char p_del, char p_frozen, char p_mothchld, char p_converted, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{



	

	struct sqlca sqlca;	
	MT_INSTRUMENT_STRUCT_H l_mt_ruinstr_struct_h_a;
	MT_INSTRUMENT_STRUCT_I l_mt_ruinstr_struct_i_ab;
	short success_flg = APL_SUCCESS;
   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif
	
	sqlca.sqlcode=0;

	memset(&l_mt_ruinstr_struct_h_a, NULL, sizeof(MT_INSTRUMENT_STRUCT_H));
	memset(&l_mt_ruinstr_struct_i_ab, NULL, sizeof(MT_INSTRUMENT_STRUCT_I));
  

   #ifdef SYS_DEBUG
      fprintf(APL_OUT_FILE, "Entered Function CO_Chk_InstrValid\n");
      fprintf(APL_OUT_FILE, "The Instrurity Code is : %s\n", p_instrcode);
      fprintf(APL_OUT_FILE, "The Exist Flag is : %c\n", p_exist);
      fprintf(APL_OUT_FILE, "The Authorisation Flag is : %c\n", p_auth);
      fprintf(APL_OUT_FILE, "The Delete Flag is : %c\n", p_del);
      fprintf(APL_OUT_FILE, "The Frozen Flag is : %c\n", p_frozen);
      fprintf(APL_OUT_FILE, "The Mother/Child Flag is : %c\n", p_mothchld);
      fprintf(APL_OUT_FILE, "The Converted Flag is : %c\n", p_converted);
   #endif

	
	

	if (!strlen(p_instrcode))
	{
		APL_DATA_MISSING("Instrurity", APL_NULL_STRING, APL_NULL_STRING);
		APL_GOBACK_FAIL
	}

	

	if (p_exist == NULL) p_exist = 'Y';


	

	EXEC SQL SELECT * INTO :l_mt_ruinstr_struct_h_a:l_mt_ruinstr_struct_i_ab FROM MT_INSTRUMENT 
	WHERE instr_code=:p_instrcode;

	IS_ANY_ORA_ERROR;
	

	

	if ((sqlca.sqlcode == 1403) && (p_exist == 'Y'))
	{
		CO_InsertErr(l_debug_info_ptr, ERR_INSTR_NOTFND, p_instrcode, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__);    
		APL_GOBACK_FAIL
	}

	if ((sqlca.sqlcode == 0) && (p_exist == 'N'))
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_INSTRUMENT_EXIST, p_instrcode, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )   
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}
	

	if ( ( l_mt_ruinstr_struct_i_ab.i_checker_dt == -1 ) && (p_auth=='Y'))
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_UNAUTH_INSTR, p_instrcode, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}
	
	if ( ( l_mt_ruinstr_struct_i_ab.i_checker_dt != -1 ) && (p_auth=='N'))
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_INSTR_AUTHORIZED, p_instrcode, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	

	l_mt_ruinstr_struct_h_a.h_status[2]='\0';	
	if ((strcmp(l_mt_ruinstr_struct_h_a.h_status, "DU")) && (p_del=='Y'))
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_INSTR_NOTMARKEDDEL, p_instrcode, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}
	
	if ((!strcmp(l_mt_ruinstr_struct_h_a.h_status, "DU")) && (p_del=='N'))
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_INSTR_MARKEDDEL, p_instrcode, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	

	if ((strcmp(l_mt_ruinstr_struct_h_a.h_status, "FU")&&strcmp(l_mt_ruinstr_struct_h_a.h_status, "FA")) && (p_frozen=='Y'))
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_INSTR_NOTFRZN, p_instrcode, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}
	
	if (((!strcmp(l_mt_ruinstr_struct_h_a.h_status, "FU"))||(!strcmp(l_mt_ruinstr_struct_h_a.h_status, "FA"))) && (p_frozen=='N'))
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_INSTRUMENT_FRZN, p_instrcode, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}


	

	if ((l_mt_ruinstr_struct_h_a.h_mother_sec_ind[0] == 'N') && (p_mothchld == 'M'))
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_INSTR_NOTMOTHERINSTR, p_instrcode, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ((l_mt_ruinstr_struct_h_a.h_mother_sec_ind[0] == 'Y') && (p_mothchld == 'C'))
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_INSTR_MOTHERINSTR, p_instrcode, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}
		

	

	if ((l_mt_ruinstr_struct_i_ab.i_new_cd == -1) && (p_converted == 'Y'))
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_INSTR_NOTUNDERCONV, p_instrcode, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ((l_mt_ruinstr_struct_i_ab.i_new_cd != -1) && (p_converted == 'N'))
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_UNDERCONV_INSTR, p_instrcode, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	

	if (APL_FAILURE == success_flg )
	{
		 APL_GOBACK_FAIL
	}
	else
	{
		APL_GOBACK_SUCCESS
	}

   RETURN_SUCCESS :
      #ifdef SYS_DEBUG
         fprintf(APL_OUT_FILE,"Leaving Function CO_Chk_InstrValid with success\n");
      #endif
      return(APL_SUCCESS);
  
   RETURN_FAILURE :
      #ifdef SYS_DEBUG
         fprintf(APL_OUT_FILE,"Leaving Function CO_Chk_InstrValid with failure\n");
      #endif
      return(APL_FAILURE);
}							

	


int CO_Chk_CcyValid(char             *p_ccycode, 
					 char             p_type, 
					 char             p_exist, 
					 DEBUG_INFO_STRUCT_H     **l_debug_info_ptr
					)
{

	

	struct sqlca    sqlca;	
	int             int_h_ccy_count;
	short           i_ccy_count;
   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

	sqlca.sqlcode=0;
	int_h_ccy_count = 0;
	i_ccy_count = 0;



   #ifdef SYS_DEBUG
      fprintf(APL_OUT_FILE,"Entering processtion CO_Chk_CcyValid \n");
   #endif


	
	
	if (!strlen(p_ccycode))
	{
		APL_DATA_MISSING("Currency", APL_NULL_STRING, APL_NULL_STRING)
		APL_GOBACK_FAIL
	}
	
	

	if ( p_type == NULL ) p_type = 'M';
	if ( p_exist == NULL ) p_exist = 'Y';


	

	if ( p_type == 'M' && p_exist == 'Y' )
	{
			EXEC SQL SELECT NVL(COUNT(*),0) into :int_h_ccy_count:i_ccy_count
					FROM DL_CURRENCY 
					WHERE CURRENCY_CD=:p_ccycode;

			IS_ANY_ORA_ERROR

			if ( int_h_ccy_count == 0 )
			{
				if (CO_InsertErr(
									l_debug_info_ptr, 
									ERR_CCY_NOTFND,      
									p_ccycode, 
									APL_NULL_STRING, 
									APL_NULL_STRING, 
									__LINE__, 
									__FILE__
								  ) )

				APL_GOBACK_FAIL
			}
	}

	

	else if ( p_type == 'S' && p_exist == 'Y' )
	{
			if(APL_FAILURE == CO_Chk_CodeValid(
													"ISOCURRENCY", 
													p_ccycode, 
													"XX",
													l_debug_info_ptr
														))
			{
				if (CO_InsertErr(
									l_debug_info_ptr, 
									ERR_CCY_NOTFND,      
									p_ccycode, 
									APL_NULL_STRING, 
									APL_NULL_STRING, 
									__LINE__, 
									__FILE__
								  ) )

				APL_GOBACK_FAIL
			}
	}

	
	
	else if ( p_type == 'M' && p_exist == 'N' )
	{
			EXEC SQL SELECT NVL(COUNT(*),0) into :int_h_ccy_count:i_ccy_count
					FROM DL_CURRENCY 
					WHERE CURRENCY_CD=:p_ccycode;

			IS_ANY_ORA_ERROR

			if ( int_h_ccy_count != 0 )
			{
				if (CO_InsertErr(
									l_debug_info_ptr, 
									ERR_CCY_EXISTS,     
											 
									p_ccycode, 
									APL_NULL_STRING, 
									APL_NULL_STRING, 
									__LINE__, 
									__FILE__
								  ) )

				APL_GOBACK_FAIL
			}
	}





	APL_GOBACK_SUCCESS
	
	RETURN_SUCCESS : 
	{
   	#ifdef SYS_DEBUG
		fprintf(APL_OUT_FILE,"Exiting processtion CO_Chk_CcyValid successfully \n");
   	#endif
		return(APL_SUCCESS);
	}

	RETURN_FAILURE : 
	{
   	#ifdef SYS_DEBUG
		fprintf(APL_OUT_FILE,"Exiting processtion CO_Chk_CcyValid with failure \n");
   	#endif
		return(APL_FAILURE);
	}

}							

/*kotubabu-start */

int CO_Chk_AccValid_CA(char *p_client, char p_exist, char p_cubk, char p_orderac, char p_mastclt, char p_auth, char p_del, char p_frozen, char p_closed, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca sqlca;	
	MT_CLIENT_STRUCT_H l_mt_client_struct_h;
	MT_CLIENT_STRUCT_I l_mt_client_struct_i;
	short success_flg = APL_SUCCESS;
	char	chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
 
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	/*ST1.0 	Comment for Sign Image  */
	/*
	EXEC SQL VAR l_mt_client_struct_h.h_cln_sign_img IS RAW;
	*/

	memset(&l_mt_client_struct_h, NULL, sizeof(MT_CLIENT_STRUCT_H));
	memset(&l_mt_client_struct_i, NULL, sizeof(MT_CLIENT_STRUCT_I));
	sqlca.sqlcode = 0;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
	       					"Entered Function CO_Chk_AccValid_CA\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Account Number is : %s\n", 
						p_client);

		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Exist Flag is : %c\n", 
						p_exist);

		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Cubk Flag is : %c\n", 
						p_cubk);

		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The OrderAc Flag is : %c\n", 
						p_orderac);

		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Master Account Flag is : %c\n", 
						p_mastclt);

		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Authorisation Flag is : %c\n", 
						p_auth);

		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Delete Flag is : %c\n", 
						p_del);

		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Frozen Flag is : %c\n", 
						p_frozen);

		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);

		memset( chr_l_buf, NULL, BUFFER_LEN );

		sprintf(		chr_l_buf, 
						"The Closed Flag is : %c\n", 
						p_closed);
		CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
	}

	if ( !strlen(p_client) )
	{
		APL_DATA_MISSING("Client Code", APL_NULL_STRING, APL_NULL_STRING);
		APL_GOBACK_FAIL;
	}

	if (p_exist == NULL) p_exist = 'Y';
	
	EXEC SQL SELECT * INTO :l_mt_client_struct_h:l_mt_client_struct_i FROM MT_CLIENT 
	WHERE CLN_CODE=:p_client;

	IS_ANY_ORA_ERROR

	if ( (sqlca.sqlcode == 1403) && (p_exist == 'Y') )
	{
		CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_FND, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__);  
		APL_GOBACK_FAIL;
	}

	if ( (sqlca.sqlcode == 0) && (p_exist == 'N') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_EXST, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}	   
		success_flg = APL_FAILURE;
	}

 l_mt_client_struct_h.h_clt_brk_all[1] = '\0';
	if ( (l_mt_client_struct_h.h_clt_brk_all[0] == 'B') && (p_cubk=='C') )
	{
		if (p_orderac != 'Z') 
		{
			if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_CUSTOMER, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
			{
				APL_GOBACK_FAIL;
			}
			success_flg = APL_FAILURE;
		}
	}

	if ( (l_mt_client_struct_h.h_clt_brk_all[0] == 'C') && (p_cubk=='B') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_BRK, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( (l_mt_client_struct_h.h_clt_brk_all[0] != 'A') && (p_cubk=='A') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_DEALER, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	l_mt_client_struct_h.h_ord_clt[1] = '\0';
	if ( (l_mt_client_struct_h.h_ord_clt[0] == 'B') && (p_orderac=='C') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_CUSTODYCLIENT, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( (l_mt_client_struct_h.h_ord_clt[0] == 'C') && (p_orderac=='B') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_BRKCLIENT, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}
	
	if ( (l_mt_client_struct_h.h_ord_clt[0] != 'A') && (p_orderac=='A') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_BRKANDCUSTODYCLIENT, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	l_mt_client_struct_h.h_dl_client[10]='\0';	
	l_mt_client_struct_h.h_mstclt[10]='\0';	
/*Commented function Added by Swapnil for allowing freezed client from CA --isolve ISKB_2188 Start*/
	/*if ( (strcmp(l_mt_client_struct_h.h_dl_client, l_mt_client_struct_h.h_mstclt)) && (p_mastclt=='M') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_MASTER, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( (!strcmp(l_mt_client_struct_h.h_dl_client, l_mt_client_struct_h.h_mstclt)) && (p_mastclt=='S') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_ISMASTER, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}*/
/*Commented function Added by Swapnil for allowing freezed client from CA --isolve ISKB_2188 Start*/
   printf("Value checker date ==%s\n",l_mt_client_struct_h.h_checker_dt);
	if ( (l_mt_client_struct_i.i_checker_dt == -1) && (p_auth=='Y') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_UNAUTH, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( (l_mt_client_struct_i.i_checker_dt != -1 ) && (p_auth=='N') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_MSG_ACCOUNT_AUTH, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	l_mt_client_struct_h.h_clt_status[2]='\0';	
	/*Commented function Added by Swapnil for allowing freezed client from CA --isolve ISKB_2188 Start*/
/*
	if ( (strcmp(l_mt_client_struct_h.h_clt_status, "DU")) && (p_del=='Y') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_MARKEDFORDEL, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( (!strcmp(l_mt_client_struct_h.h_clt_status, "DU")) && (p_del=='N') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_MARKEDFORDEL, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( (strcmp(l_mt_client_struct_h.h_clt_status, "FU") && strcmp(l_mt_client_struct_h.h_clt_status, "FA")) && (p_frozen=='Y') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_FRZN, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( ( (!strcmp(l_mt_client_struct_h.h_clt_status, "FU")) || (!strcmp(l_mt_client_struct_h.h_clt_status, "FA")) ) && (p_frozen=='N') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_FRZN, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}*/
/*Commented function Added by Swapnil for allowing freezed client from CA --isolve ISKB_2188 End*/
	if ( (strcmp(l_mt_client_struct_h.h_clt_status, "CU") && strcmp(l_mt_client_struct_h.h_clt_status, "CA")) && (p_closed=='Y') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_CLOSED, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ( ( (!strcmp(l_mt_client_struct_h.h_clt_status, "CU")) || (!strcmp(l_mt_client_struct_h.h_clt_status, "CA")) ) && (p_closed=='N') )
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCOUNT_CLOSED, p_client, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}
	
	

	if (APL_FAILURE == success_flg ) 
	{
		APL_GOBACK_FAIL;
	}
	else 
	{
		APL_GOBACK_SUCCESS;
	}

	RETURN_SUCCESS :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
					      		"Leaving Function CO_Chk_AccValid_CA with success\n",
							NULL,
							NULL);
		}
		return(APL_SUCCESS);
	
	RETURN_FAILURE :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
     							"Leaving Function CO_Chk_AccValid_CA with errors\n",
							NULL,
							NULL);
		}
		return(APL_FAILURE);
}							
/*Added by Swapnil for allowing freezed client from CA --isolve ISKB_2188 end*/

/*kotubabu-end*/
