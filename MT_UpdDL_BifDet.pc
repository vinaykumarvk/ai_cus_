/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
*/
/*********************************************************************
 *
 * Module Name         :      Master Maintenance
 *
 * File Name           :      MT_UpdDL_BifDet.pc
 *
 * Description         :      This file contains db functions for updating
 *                            Master Details.
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author         Description       RFS No.
 * ---------   --------  ------------     -------------     ---------
 * 19/01/2006   1.0       Sundar        New file       HDFCDL_003
 *
 *********************************************************************/


#include <CO_HostStructdef.h>
#include "sqlca.h"

EXEC SQL INCLUDE SQLCA.H;




int DL_ModDbDL_BifDet(DL_BIFDET_STRUCT_H *p_dl_bifdet_struct_h,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr) 
{
	/* Variable Declarations */
  DL_BIFDET_STRUCT_I *l_dl_bifdet_struct_i;

  struct sqlca sqlca;

  char chr_acc_stamp_compare[APL_DATE_LEN] = APL_NULL_STRING;
  char chr_status_compare[APL_STATUS_LEN] = APL_NULL_STRING;
  char chr_sys_access_stamp[APL_DATE_LEN] = APL_NULL_STRING;
  short p_i_maker, p_i_makerdt, p_i_checker, p_i_checkerdt, p_i_access_stamp;
  short p_i_access_stamp_compare;
  short p_i_status = 0;
  int int_error_flag = APL_SUCCESS;
  int int_l_rowexists = 0;
   char  *l_key_codes[5];
   char  *l_key_values[5];
   char  chr_l_table_name[50] = APL_NULL_STRING;
	  char  chr_l_field_val[40] = APL_NULL_STRING;
	  int   l_qty = 0;

		int	int_retval = APL_SUCCESS;
#ifdef APL_THREADS
    APL_SET_CONTEXT
    EXEC SQL CONTEXT USE :my_ctx_local;
#endif

	 APL_FUNCTION_ENTER(APL_OUT_FILE)

  l_dl_bifdet_struct_i=(DL_BIFDET_STRUCT_I*)calloc(1,sizeof(DL_BIFDET_STRUCT_I));

  APL_MALLOC_FAIL(l_dl_bifdet_struct_i)

  p_i_maker =0;
  p_i_makerdt =0;
  p_i_checker =0;
  p_i_checkerdt =0;
  p_i_access_stamp =0;
  p_i_access_stamp_compare =0;

  if(!strlen(p_dl_bifdet_struct_h ->h_client))  l_dl_bifdet_struct_i -> i_client= -1;
  else
	  l_dl_bifdet_struct_i -> i_client= 0;
  if(!strlen(p_dl_bifdet_struct_h ->h_identiy_no))  l_dl_bifdet_struct_i -> i_identiy_no= -1;
  else
	  l_dl_bifdet_struct_i -> i_identiy_no= 0;

  if(!strlen(p_dl_bifdet_struct_h ->h_dp_id))  l_dl_bifdet_struct_i -> i_dp_id= -1;
  else
	  l_dl_bifdet_struct_i -> i_dp_id= 0;
  if(!strlen(p_dl_bifdet_struct_h ->h_access_stamp)) l_dl_bifdet_struct_i -> i_access_stamp= -1;
  else
	  l_dl_bifdet_struct_i -> i_access_stamp= 0;
  if(p_dl_bifdet_struct_h ->h_qty == 0) l_dl_bifdet_struct_i -> i_qty= -1;
  else
  l_dl_bifdet_struct_i -> i_qty = 0;

 if(CO_RtvSysDtTime(chr_sys_access_stamp,l_debug_info_ptr) !=APL_SUCCESS)
	{
		APL_GOBACK_FAIL
	}
	
 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_INPUT))
 {

	 APL_IF_DEBUG
	 {
		 CO_ProcMonitor(APL_OUT_FILE, "Entered Input of Function DL_ModDbDL_BifDet\n",
				 NULL,p_intl_envdatastruct_h);
	 }
	 EXEC SQL SELECT COUNT(*) INTO :l_qty FROM DL_BIFDET WHERE CLIENT =:p_dl_bifdet_struct_h->h_client AND
		 IDENTIY_NO =:p_dl_bifdet_struct_h->h_identiy_no
		 AND DP_ID = :p_dl_bifdet_struct_h->h_dp_id;
	 if(l_qty == 0)
	 {
		 strcpy(p_dl_bifdet_struct_h->h_access_stamp,chr_sys_access_stamp);
		 l_dl_bifdet_struct_i->i_access_stamp =0;

		 EXEC SQL INSERT INTO DL_BIFDET VALUES (:p_dl_bifdet_struct_h:l_dl_bifdet_struct_i);

		 IS_ANY_ORA_ERROR_AND_DUPLICATE(MAP_DET_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
	 }

	 else 
	 {
			 strcpy(p_dl_bifdet_struct_h->h_access_stamp,chr_sys_access_stamp);
			 l_dl_bifdet_struct_i->i_access_stamp =0;

			 EXEC SQL UPDATE DL_BIFDET  SET 
				 DP_ID =:p_dl_bifdet_struct_h->h_dp_id :l_dl_bifdet_struct_i-> i_dp_id,
						 QTY =:p_dl_bifdet_struct_h->h_qty :l_dl_bifdet_struct_i-> i_qty,
						 ACCESS_STAMP =:p_dl_bifdet_struct_h->h_access_stamp :l_dl_bifdet_struct_i->i_access_stamp
							 WHERE 
							 CLIENT =:p_dl_bifdet_struct_h->h_client AND 
							 IDENTIY_NO =:p_dl_bifdet_struct_h->h_identiy_no
							 AND DP_ID = :p_dl_bifdet_struct_h->h_dp_id;

			 IS_ANY_ORA_ERROR;	
		 }
	 }
 else
 {
	 l_key_codes[0]="CLIENT";
	 l_key_codes[1]="IDENTIY_NO";
	 l_key_codes[2]="DP_ID";
	 l_key_codes[3]=APL_NULL_STRING;

	 l_key_values[0]=p_dl_bifdet_struct_h -> h_client;
	 l_key_values[1]=p_dl_bifdet_struct_h -> h_identiy_no;
	 l_key_values[2]=p_dl_bifdet_struct_h -> h_dp_id;
	 l_key_values[3] = APL_NULL_STRING;

	 strcpy(chr_l_table_name,"DL_BIFDET");

	 int_retval = CR_Rtv_MastChldChrVal( l_key_codes,
			 l_key_values,
			 chr_l_table_name,
			 "ACCESS_STAMP",
			 chr_l_field_val,
			 l_debug_info_ptr);

	 if (int_retval != APL_SUCCESS)
		 APL_GOBACK_FAIL

			 strcpy(chr_acc_stamp_compare,chr_l_field_val);

 }

 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_MODIFY))
 {
	 APL_IF_DEBUG
	 {
		 CO_ProcMonitor(APL_OUT_FILE, "Entered modify of Function MT_ModDBNoDlvDet\n",
				 NULL,p_intl_envdatastruct_h);
	 }

	 if (!strcmp(p_dl_bifdet_struct_h->h_access_stamp,chr_acc_stamp_compare))
	 {
		 strcpy(p_dl_bifdet_struct_h->h_access_stamp,chr_sys_access_stamp);
		 l_dl_bifdet_struct_i->i_access_stamp =0;

		 EXEC SQL UPDATE DL_BIFDET  SET
			 DP_ID =:p_dl_bifdet_struct_h->h_dp_id :l_dl_bifdet_struct_i-> i_dp_id,
					 QTY =:p_dl_bifdet_struct_h->h_qty :l_dl_bifdet_struct_i-> i_qty,
					 ACCESS_STAMP =:p_dl_bifdet_struct_h->h_access_stamp :l_dl_bifdet_struct_i->i_access_stamp
						 WHERE
						 CLIENT =:p_dl_bifdet_struct_h->h_client AND
						 IDENTIY_NO =:p_dl_bifdet_struct_h->h_identiy_no
						 AND DP_ID = :p_dl_bifdet_struct_h->h_dp_id;

		 IS_ANY_ORA_ERROR;
	 }
	 else
	 {
		 if (CO_InsertErr
				 (l_debug_info_ptr,
				  ERR_ACCESSSTAMP_CHGD,
				  APL_NULL_STRING,
				  APL_NULL_STRING,
				  APL_NULL_STRING,
				  __LINE__,
				  __FILE__
				 ) != APL_SUCCESS)
			 APL_GOBACK_FAIL
				 APL_GOBACK_FAIL
	 }
 }
 
 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_DELETE))
	{

		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered delete of Function MT_ModDBNoDlvDet\n",
													NULL,p_intl_envdatastruct_h);
 	}

	   if (!strcmp(p_dl_bifdet_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   {

			EXEC SQL DELETE FROM DL_BIFDET WHERE 
				               CLIENT =:p_dl_bifdet_struct_h->h_client AND
									               IDENTIY_NO =:p_dl_bifdet_struct_h->h_identiy_no
														AND DP_ID = :p_dl_bifdet_struct_h->h_dp_id;

					IS_ANY_ORA_ERROR;	
	   }
		else 
	   {
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   } 
	}

 if (int_error_flag == APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}
 APL_GOBACK_SUCCESS

 RETURN_SUCCESS :
	{
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
		free(l_dl_bifdet_struct_i);
		return(APL_SUCCESS);
	}
  RETURN_FAILURE :
	{
 	APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
		free(l_dl_bifdet_struct_i);
		return(APL_FAILURE);
	}

}
