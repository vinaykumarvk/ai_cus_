/*
*    COPYRIGHT NOTICE
*
*   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
*
*   These materials are confidential and proprietary to
*    Polaris Software Lab Limited and no part of these materials should
*    be reproduced, published, transmitted or distributed in any form or
*    by any means, electronic, mechanical, photocopying, recording or
*    otherwise, or stored in any information storage or retrieval system
*    of any nature nor should the materials be disclosed to third parties
*    or used in any other manner for which this is not authorized, without
*    the prior express written authorization of Polaris Software Lab 
Limited.
*/
/*********************************************************************
*
* Module Name         :      Master Maintenance
*
* File Name           :      DL_ProcExchgOrd_Upld.pc
*
* Description         :      This file contains functions for updating
*                            Master Details.
*
*
*            Version Control Block
*
* Date        Version     Author         Description       RFS No.
* ---------   --------  ------------     -------------     ---------
* 03/01/2006   1.0       Sundar        New file            HDFCDL_005
* 18/10/2011             Sana Bhatkar  Kotak issue(removed Retro done for AIX mig for ISKB_4755
*                                      updation of 	
*				       amt difference in force matching)
***************************************************************************************/


#define PURE_C_SOURCE

#include "CO_HostStructdef.h"
#include "Intellect_Interface.h"
#define APL_EXCHORD_NSE  "NSE"
#define APL_EXCHORD_BSE  "BSE"
#define APL_COUNTRY_CODE "IN"
#define APL_COUNTRY_CD   "XX"

EXEC SQL INCLUDE SQLCA.H;


int DL_Force_Match(char *l_chr_deal,char *l_chr_order,INTL_ENV_DATA_STRUCT_H 
*p_intl_env_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	/*	Variable Declarations */
	int  int_error_flag = APL_SUCCESS;
	int  int_retval = APL_SUCCESS;
   int  l_int_num=0;
	int  l_int_count=0;
	char **temp= NULL;
	char *l_chr_identity;
	char *l_chr_identity_nos;
	char *l_chr_client;
	char *l_chr_order_no;
   char chr_sys_access_stamp[APL_DATE_LEN] = APL_NULL_STRING;

	/* Debug statements */

	APL_FUNCTION_ENTER(APL_OUT_FILE)

	/*	Mandatory Data Missing Checks	- Mode Specific */
	APL_IF_DEBUG
	{
		printf("l_chr_deal|%s|\n",l_chr_deal);
		printf("l_chr_order|%s|\n",l_chr_order);
	}

	l_chr_identity_nos=(char *)calloc(401,sizeof(char));

	if(CO_RtvSysDtTime(chr_sys_access_stamp,l_debug_info_ptr) !=APL_SUCCESS)
	{
		APL_GOBACK_FAIL
	}

	if (!strlen(l_chr_deal))
	{
		if (CO_InsertErr
				(l_debug_info_ptr,
				 DEAL_INFO_MISSING,
				 APL_NULL_STRING,
				 APL_NULL_STRING,
				 APL_NULL_STRING,
				 __LINE__,
				 __FILE__
				) != APL_SUCCESS)
			APL_GOBACK_FAIL
	}

	if (!strlen(l_chr_order))
	{
		if (CO_InsertErr
				(l_debug_info_ptr,
				 ORDER_INFO_MISSING,
				 APL_NULL_STRING,
				 APL_NULL_STRING,
				 APL_NULL_STRING,
				 __LINE__,
				 __FILE__
				) != APL_SUCCESS)
  		    APL_GOBACK_FAIL
	}
	printf("\n Amit --- Deal is %s\n",l_chr_deal);
	if (APL_FAILURE==CO_SplitStr(l_chr_deal,',',&l_int_num,&temp))
	{
		    fprintf(APL_OUT_FILE,"Failed to split input string\n");
			 APL_GOBACK_FAIL
	}


	//for(l_int_count=0;l_int_count<l_int_num;l_int_count++)
	//{

	   l_chr_client=(char *)calloc(11,sizeof(char));
	   l_chr_identity=(char *)calloc(17,sizeof(char));

		printf("\n Amit --- Client is %s and Ref No is %s \n",temp[0],temp[1]);
		strcpy(l_chr_client,temp[0]);
		strcpy(l_chr_identity,temp[1]);

		/*
	   if (APL_FAILURE == 
CO_Mod_GetValue(temp[l_int_count],"CLIENT",l_chr_client,l_debug_info_ptr))
		{
			fprintf(APL_OUT_FILE,"Failed to get string\n");
			APL_GOBACK_FAIL
		}

	   if (APL_FAILURE == 
CO_Mod_GetValue(temp[l_int_count],"IDENTITY_NO",l_chr_identity,l_debug_info_ptr))
		{
			fprintf(APL_OUT_FILE,"Failed to split get  string\n");
			APL_GOBACK_FAIL;
		}
		*/

		if(strlen(l_chr_identity_nos)==0)
			strcat(l_chr_identity_nos,l_chr_identity);
		else
		{
			strcat(l_chr_identity_nos,",");
			strcat(l_chr_identity_nos,l_chr_identity);
		}

		printf("\n l_chr_identity_nos=|%s| \n",l_chr_identity_nos);
		printf("\n l_chr_identity=|%s| \n",l_chr_identity);

		if (APL_FAILURE == 
updDeal(l_chr_client,l_chr_identity,l_chr_order,chr_sys_access_stamp,p_intl_env_data_struct_h,l_debug_info_ptr))
		{

			fprintf(APL_OUT_FILE,"Failed In Update Deal\n");
			APL_GOBACK_FAIL;
		}

		APL_IF_DEBUG
		{
			printf("l_chr_client |%s|\n",l_chr_client);
			printf("l_chr_identity|%s|\n",l_chr_identity);
		}

	//}

	l_int_num=0;

   **temp = NULL;


	if (APL_FAILURE == CO_SplitStr(l_chr_order,',',&l_int_num,&temp))
	{
		fprintf(APL_OUT_FILE,"Failed to split input string\n");
		APL_GOBACK_FAIL
	}


	for(l_int_count=0;l_int_count<l_int_num;l_int_count++)
	{

	   l_chr_order_no=(char *)calloc(26,sizeof(char));

		strcpy(l_chr_order_no,temp[l_int_count]);

		/*
	   if (APL_FAILURE == 
CO_Mod_GetValue(temp[l_int_count],"ORDER_NO",l_chr_order_no,l_debug_info_ptr))
		{
			fprintf(APL_OUT_FILE,"Failed to split get  string\n");
			APL_GOBACK_FAIL
		}
		*/

		printf("\n Calling for Order=|%s| \n",l_chr_order_no);
		if (APL_FAILURE == 
updExch(l_chr_order_no,chr_sys_access_stamp,l_chr_identity_nos,p_intl_env_data_struct_h,l_debug_info_ptr))
		{

			fprintf(APL_OUT_FILE,"Failed In Update Order\n");
			APL_GOBACK_FAIL
		}

	}

APL_GOBACK_SUCCESS

RETURN_SUCCESS :
	{
	APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
		return(APL_SUCCESS);
	}
RETURN_FAILURE :
	{
		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
		return(APL_FAILURE);
	}

}

int CO_Mod_GetValue(char *chr_p_str, char *p_lbl,char 
*p_data_value,INTL_ENV_DATA_STRUCT_H 
*p_intl_env_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   char l_sqlstmt[4001]=APL_NULL_STRING;
   char l_str_token[4001]=APL_NULL_STRING;
   char l_str_entire[4001]=APL_NULL_STRING;
	char l_chr_value[400]=APL_NULL_STRING;

	EXEC SQL VAR l_chr_value IS STRING;

	/* Debug statements */

	APL_FUNCTION_ENTER(APL_OUT_FILE)

   memset(l_sqlstmt,NULL,4000);
   memset(l_chr_value,NULL,400);

   strcpy(l_str_entire,chr_p_str);
   strcpy(l_str_token,p_lbl);
   strcat(l_str_token,"|");

	sprintf(l_sqlstmt,"SELECT SUBSTR('%s',INSTR('%s','%s',1) + LENGTH('%s') ,LENGTH('%s') - (LENGTH('%s') + 1 +  NVL(LENGTH(SUBSTR('%s',1,INSTR('%s','%s',1)-1)),0) + LENGTH('%s') - INSTR('%s','#',INSTR('%s','%s',1)))) FROM DUAL",l_str_entire,l_str_entire,l_str_token,l_str_token,l_str_entire,l_str_token,l_str_entire,l_str_entire,l_str_token,l_str_entire,l_str_entire,l_str_entire,l_str_token);

   EXEC SQL PREPARE l_stmt FROM :l_sqlstmt;
	IS_ANY_ORA_ERROR


	EXEC SQL DECLARE l_cursor CURSOR FOR l_stmt;
	IS_ANY_ORA_ERROR

	EXEC SQL OPEN  l_cursor;

	EXEC SQL FETCH l_cursor INTO :l_chr_value;
	IS_ANY_ORA_ERROR

	printf("l_chr_value %s\n",l_chr_value);

   strcpy(p_data_value,l_chr_value);

   APL_IF_DEBUG
	{
   	printf("l_sqlstmt {%s}\n",l_sqlstmt);
   	printf("p_data_value {%s}\n",p_data_value);
	}

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
		return(APL_SUCCESS);
	}
	RETURN_FAILURE :
	{
		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
		return(APL_FAILURE);
	}
}

int updDeal(char *p_chr_Client,char *p_chr_Identity,char *p_chr_order,char 
*p_chr_acc_stamp_compare,INTL_ENV_DATA_STRUCT_H 
*p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

   char l_status[3]=APL_NULL_STRING;
   char l_checker[15]=APL_NULL_STRING;
   int l_num_ord=0;
   char **temp1= NULL;
   int i=0;
   double l_dl_amt=0.0;
   double l_ord_amt=0.0;
   double l_diff_amt=0.0;
   double l_sum_ord_amt=0.0;
   short i_dl_amt=0;
   short i_ord_amt=0;
   char l_deal_Cd[2]=APL_NULL_STRING;
   short i_deal_cd=0;
   char ret_val[2]=APL_NULL_STRING;
   

	/* Debug statements */

	APL_FUNCTION_ENTER(APL_OUT_FILE)

	/*
   EXEC SQL SELECT DEAL_STAT INTO :l_status FROM DL_DEAL,MT_CLIENT B WHERE
	B.CLN_CODE = CLIENT AND
	CLIENT = :p_chr_Client AND
	IDENTIY_NO = :p_chr_Identity AND
	(DEAL_STAT = 'RC' OR (B.CLN_BCN_REQD='N' AND DEAL_STAT = 'AA'));
   IS_ANY_ORA_ERROR

   if(sqlca.sqlcode==1403)
	{
		if (CO_InsertErr
			    (l_debug_info_ptr,
				 DEAL_NOT_IN_PROPER_STATUS,
				 APL_NULL_STRING,
				 APL_NULL_STRING,
				 APL_NULL_STRING,
				 __LINE__,
				 __FILE__
				) != APL_SUCCESS)
		APL_GOBACK_FAIL
	}
	*/

	if (APL_FAILURE==CO_SplitStr(p_chr_order,',',&l_num_ord,&temp1))
	{
		    fprintf(APL_OUT_FILE,"Failed to split input string\n");
			 APL_GOBACK_FAIL
	}

	for(i=0; i<l_num_ord; i++)
	{
		printf("\n Getting Amount For Order=|%s| \n",temp1[i]);
		EXEC SQL SELECT DL_AMT INTO :l_ord_amt:i_ord_amt FROM DL_EXCHGORD_UPLD
					WHERE CLIENT=:p_chr_Client
					AND NVL(MATCHED,'N')='N'
					AND ORDER_NO =:temp1[i];
		IS_ANY_ORA_ERROR

		l_sum_ord_amt=l_sum_ord_amt + l_ord_amt;

	}
 
    memset(l_deal_Cd,APL_NULL_CHAR,2);
	
	printf("\n Amit:l_sum_ord_amt=|%lf| \n",l_sum_ord_amt);
 	/*Priyanka - retro from HDFC for MCX Enhancement */
	//KB_12171 - Interoperability changes
	EXEC SQL SELECT DECODE(DECODE(MAP_DESC,'T',TRD_EXCH,EXCH_CODE),'NSE',AMOUNT,'BSE',NET_AMT,'MCS',AMOUNT),DEAL_CD 
				INTO :l_dl_amt:i_dl_amt,:l_deal_Cd:i_deal_cd 
				FROM DL_DEAL,PRO_SGENSTAT 
				WHERE CLIENT = :p_chr_Client AND IDENTIY_NO = :p_chr_Identity 
				AND (PLTOPL_FLG IN ('F','S','N','M') or PLTOPL_FLG IS NULL)
				AND MAP_TYPE = 'MATCHING_EXCHANGE' 
				AND MAP_VAL = 'MATCHING_EXCHANGE';

	l_diff_amt=l_dl_amt - l_sum_ord_amt;

	printf("\n diff_amt=|%lf| \n",l_diff_amt);


	strcpy(l_checker,p_intl_envdatastruct_h->usr);
/* Retro Done for AIX migration */
	/* Commented by ankit for kotak issue - ISKB4755 - Start
	EXEC SQL UPDATE DL_DEAL SET 
DEAL_STAT='PM',CHECKER=:l_checker,CHECKER_DT=:p_chr_acc_stamp_compare,
	ACCESS_STAMP = :p_chr_acc_stamp_compare, 
IS_MATCHED='Y',AMT_DIFFER=:l_diff_amt
	WHERE CLIENT = :p_chr_Client AND IDENTIY_NO = :p_chr_Identity;

	 Commented by ankit for kotak issue - ISKB4755 - End */

	/* Changed by ankit for kotak issue (removed updation of amt difference in force matching)- ISKB4755 - Start */

 /*Added by Ram for stop custodian flag starts - CS0169152*/

    memset(ret_val,APL_NULL_CHAR,2);
	
	EXEC SQL SELECT GETCLIENTPARAMBYID('EARLY_PAYIN_FND',:p_chr_Client) into :ret_val FROM DUAL;
	
	IS_ANY_ORA_ERROR

	printf("\n ret_val=|%s| \n",ret_val);
	
	if((!strcmp(l_deal_Cd,"4"))&&(!strcmp(ret_val,"Y")))
	{
	    EXEC SQL UPDATE DL_DEAL SET
	    DEAL_STAT='PM',CHECKER=:l_checker,CHECKER_DT=:p_chr_acc_stamp_compare,
	    ACCESS_STAMP = :p_chr_acc_stamp_compare,
	    IS_MATCHED='Y',PLTOPL_FLG='G'
	    WHERE CLIENT = :p_chr_Client AND IDENTIY_NO = :p_chr_Identity;

	  /* Changed by ankit for kotak issue (removed updation of amt difference in force matching)- ISKB4755 - End */

     IS_ANY_ORA_ERROR
	}
	else
	{
		EXEC SQL UPDATE DL_DEAL SET
	    DEAL_STAT='PM',CHECKER=:l_checker,CHECKER_DT=:p_chr_acc_stamp_compare,
	    ACCESS_STAMP = :p_chr_acc_stamp_compare,
	    IS_MATCHED='Y'
	    WHERE CLIENT = :p_chr_Client AND IDENTIY_NO = :p_chr_Identity;
		
		IS_ANY_ORA_ERROR
		
	}		
 /*Added by Ram for stop custodian flag Ends - CS0169152*/
 
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
		return(APL_SUCCESS);
	}
	RETURN_FAILURE :
	{
		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
		return(APL_FAILURE);
	}
}

int updExch(char *p_chr_Order,char *p_chr_acc_stamp_compare,char 
*p_chr_Identity_No,INTL_ENV_DATA_STRUCT_H 
*p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

   char l_status[3]=APL_NULL_STRING;
   char l_checker[15]=APL_NULL_STRING;

	/* Debug statements */

	APL_FUNCTION_ENTER(APL_OUT_FILE)

	/* Check the staus of the record */

	/*
   EXEC SQL SELECT STATUS INTO :l_status FROM DL_EXCHGORD_UPLD WHERE
	ORDER_NO = :p_chr_Order AND
	STATUS = 'AA';
   IS_ANY_ORA_ERROR

   if(sqlca.sqlcode==1403)
	{
		if (CO_InsertErr
			    (l_debug_info_ptr,
				 EXCH_ORDER_NOT_IN_PROPER_STATUS,
				 APL_NULL_STRING,
				 APL_NULL_STRING,
				 APL_NULL_STRING,
				 __LINE__,
				 __FILE__
				) != APL_SUCCESS)
  		 APL_GOBACK_FAIL
	}
	*/
	strcpy(l_checker,p_intl_envdatastruct_h->usr);

	EXEC SQL UPDATE DL_EXCHGORD_UPLD
	SET STATUS='PM',
		 CHECKER=:l_checker,
		 CHECKER_DT=:p_chr_acc_stamp_compare,
		 DEAL_REF_NO =:p_chr_Identity_No,
       ACCESS_STAMP=:p_chr_acc_stamp_compare,
		 MATCHED='Y'
		 WHERE ORDER_NO =:p_chr_Order;
   IS_ANY_ORA_ERROR

	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
	{
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
		return(APL_SUCCESS);
	}
	RETURN_FAILURE :
	{
		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
		return(APL_FAILURE);
	}
}

