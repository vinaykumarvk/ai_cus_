











#include "CO_HostStructdef.h" 

EXEC SQL INCLUDE SQLCA.H;

#define	COMMIT_COUNT_G 5
#define  PAGELENGTH 55
#define	QUANTITY_LEN  26
#define	AMOUNT_LEN_B  19
#define  CNAME_LEN_A 66
#define	INSTR_NAME_LEN_D	131
#define  FILE_NAME_LEN 13
#define  APL_FILENAME_LENGTH 13
#define  APL_MAXLINE_SIZE 350 
#define  SEPARATOR "|"
/* AIX - Warnings removal */
#ifdef AMOUNT_LEN_B
#undef AMOUNT_LEN_B
#endif
#define  AMOUNT_LEN_B  18

#define  LCL_FEED_SIZE 2000 
#define  LCL_ISIN_LEN 13

int CR_Proc_AutoHisMP(char *p_dt,
					char **argv,
					FILE *p_logfile,
					INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
					DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

int CR_Mod_AutoHisMP(char *p_dt,
						FILE *p_fp_mprchis,
						FILE *p_fp_nomprchis,
						FILE *p_logfile,
						int  *p_no_mprchis,
						int  *p_no_nomprchis,
						char **argv,
						INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr);
int CR_Proc_AutoMP(	char *p_dt,
						char *chr_p_filename_a,
						char **argv,
						char *p_uploaddir,
						FILE *p_logfile,
						INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr);
int CR_Mod_AutoMP(char *p_dt,
                FILE *p_feedfile,
                FILE *p_fp_amprc,
                FILE *p_fp_noamprc,
                FILE *p_fp_xmprc,
                FILE *p_logfile,
                int *p_no_amprc,
                int *p_no_noamprc,
                int *p_no_xmprc,
                char **argv,
                INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
                DEBUG_INFO_STRUCT_H **l_debug_info_ptr );
int CR_Prnt_NoMPRptHdr(FILE *fp);
int CR_Prnt_NoMPRptLine(FILE *fp);
int MT_Prnt_MPHdr(FILE *fp,
						 char *p_dt);
int MT_Prnt_MPLine(FILE *fp);
int CR_Prnt_XMPRptHdr(FILE *fp,
						 char *p_dt);
int CR_Prnt_XMPRptLine(FILE *fp);

int main(int argc,char **argv) // AIX - Warnings removal
{
	struct sqlca sqlca;
   DEBUG_INFO_STRUCT_H **l_debug_info_ptr = (DEBUG_INFO_STRUCT_H **) NULL; // AIX - Warnings removal
	INTL_ENV_DATA_STRUCT_H l_intl_env_data_h;
	FILE *l_finifile;
	FILE *l_logfile;

	char p_dt[APL_DATE_LEN];
	char chr_p_filename_a[APL_FILENAME_LENGTH];

   int int_l_retval=0;

	int int_num = 0;
   char chr_uname[APL_USERID_LEN] = APL_NULL_STRING;
   char chr_custody_id_b[APL_USERID_LEN] = APL_NULL_STRING;
   char chr_passwd[APL_USERID_LEN] = APL_NULL_STRING;
	char **temp;
	char *y;
	char chr_l_logdir[PATH_LENGTH] = APL_NULL_STRING;
	char chr_l_uploaddir[PATH_LENGTH] = APL_NULL_STRING;
	char chr_l_inifile[PATH_LENGTH] = APL_NULL_STRING;

   EXEC SQL VAR chr_uname IS STRING;
   EXEC SQL VAR chr_passwd IS STRING;

	memset(&l_intl_env_data_h, NULL, sizeof(INTL_ENV_DATA_STRUCT_H));

	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

	strcpy(p_dt,APL_NULL_STRING);
	strcpy(chr_p_filename_a,APL_NULL_STRING);

	  fprintf(APL_OUT_FILE, "\n\tEntered MAIN. Going for Filename, File allocation etc\n");

	if ( ( l_finifile=fopen(chr_l_inifile,"r") ) == NULL)
	{
         	APL_GOBACK_FAIL
	}

	

   

   APL_FETCH_DB_LOGIN_DETAILS(l_finifile, chr_custody_id_b, chr_uname, chr_passwd, APL_OUT_FILE, l_debug_info_ptr)

   EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;

   if (sqlca.sqlcode)
   {
         	APL_GOBACK_FAIL
   }
   else
   {

		

		strcpy(l_intl_env_data_h.usr, argv[3]);
		strcpy(l_intl_env_data_h.h_mode, argv[4]);
		strcpy(l_intl_env_data_h.processtion, argv[5]);
		strcpy(l_intl_env_data_h.auth_req, argv[6]);
		strcpy(l_intl_env_data_h.subprocess, argv[7]);
		strcpy(l_intl_env_data_h.h_process, argv[8]);

   	if (APL_FAILURE == CO_Rtv_RptFileName(	"3R", 
				APL_LOGFILE_DESC,
				100,
				argv[5],
				argv,
				&l_logfile,
				l_debug_info_ptr ))
      {
         	APL_GOBACK_FAIL
      }
      

      EXEC SQL COMMIT WORK;

      if (sqlca.sqlcode)
      {
         CO_ProcMonitor(l_logfile, "Could not commit after opening chr_log file", NULL, NULL);
         CO_Proc_RptClose(l_logfile, l_debug_info_ptr);
         	APL_GOBACK_FAIL
      }

		if ( APL_FAILURE == CO_ReadToken(l_finifile,
					"INTL_UPL_PATH",
					chr_l_uploaddir,
					l_debug_info_ptr ))
		{
         	APL_GOBACK_FAIL
		}

		

	   fprintf(l_logfile, "\n\tString split processtion called\n");

		if (APL_FAILURE == CO_SplitStr(	argv[9],
													'|',
													&int_num,
													&temp ))
		{
	  			fprintf(l_logfile, "\n\tString split processtion failed\n");
   			CO_Proc_RptClose(l_logfile, l_debug_info_ptr); 
         	APL_GOBACK_FAIL
		}

		if (int_num ==0)
		{
				fprintf(l_logfile, "\n\tThere were no params. Mandatory data missing\n");

  			APL_DATA_MISSING("Currency Code",APL_NULL_STRING,APL_NULL_STRING)
   			CO_Proc_RptClose(l_logfile, l_debug_info_ptr); 
         	APL_GOBACK_FAIL
		}

      strcpy(p_dt, temp[0]);

		

		if (APL_FAILURE == CO_RtvSysParams(l_debug_info_ptr))
		{
				fprintf(l_logfile, "\n\tFailed in Get System Params\n");
   			CO_Proc_RptClose(l_logfile, l_debug_info_ptr); 
         	APL_GOBACK_FAIL
		}

				fprintf(l_logfile, "Successfully got Sys Params\n");
				fprintf(l_logfile, "userid   : (%s)\n",l_intl_env_data_h.usr);
				fprintf(l_logfile, "mode     : (%s)\n",l_intl_env_data_h.h_mode);
				fprintf(l_logfile, "function : (%s)\n",l_intl_env_data_h.processtion);
				fprintf(l_logfile, "auth_req : (%s)\n",l_intl_env_data_h.auth_req);
				fprintf(l_logfile, "subfun   : (%s)\n",l_intl_env_data_h.subprocess);
				fprintf(l_logfile, "action   : (%s)\n",l_intl_env_data_h.h_process);
				fprintf(l_logfile, "About to call Market Price updation Fn\n");

		if(!strcmp (l_mt_core_sys_params_struct_h.proc_pr_feed_ind,"Y"))
		{
      	strcpy(chr_p_filename_a, temp[1]);

			if (!strlen(chr_p_filename_a))
			{
				
       		CO_InsertErr
         		(l_debug_info_ptr,
          		ERR_FDFILE_NCURR_PRC, 
					
          		APL_NULL_STRING,
          		APL_NULL_STRING,
          		APL_NULL_STRING,
          		__LINE__,
          		__FILE__
         		);
				CO_ProcMonitor(l_logfile,"No Feed File name given!!\n",
							l_debug_info_ptr,&l_intl_env_data_h);
   			CO_Proc_RptClose(l_logfile, l_debug_info_ptr); 
         	APL_GOBACK_FAIL
			}
		}

		if(!strcmp (l_mt_core_sys_params_struct_h.proc_pr_feed_ind,"Y"))
		{
      	int_l_retval = CR_Proc_AutoMP(p_dt, 
										chr_p_filename_a, 
										argv,
										chr_l_uploaddir, 
										l_logfile, 
										&l_intl_env_data_h, 
										l_debug_info_ptr);

      	if ( int_l_retval == APL_FAILURE )
      	{
					fprintf(l_logfile, "Unsuccessful in CR_Proc_AutoMP Exiting from main\n");
   			CO_Proc_RptClose(l_logfile, l_debug_info_ptr); 
         	APL_GOBACK_FAIL
      	}
      	else
      	{

        	 	EXEC SQL UPDATE SYS_BATCHPROC
         		SET  status = 'completed'
         			WHERE PROCESS_NAME=:argv[0]
         				AND   PROC_INIT=:argv[1]
         				AND   STARTDATE=:argv[2]
         				AND   STATUS='started';

         	EXEC SQL COMMIT WORK RELEASE;
					fprintf(l_logfile, "Record Committed. \n CR_Proc_AutoMP Successful , Exiting from main\n");
   			CO_Proc_RptClose(l_logfile, &l_debug_info_ptr); 
         	APL_GOBACK_SUCCESS
      	}
		}
		else
		{
      	int_l_retval = CR_Proc_AutoHisMP(p_dt, 
											argv, 
											l_logfile, 
											&l_intl_env_data_h, 
											l_debug_info_ptr);

      	if ( int_l_retval == APL_FAILURE )
      	{
					fprintf(l_logfile, "Unsuccessful in CR_Proc_AutoHisMP Exiting from main\n");
   			CO_Proc_RptClose(l_logfile, &l_debug_info_ptr); 
         	APL_GOBACK_FAIL
      	}
      	else
      	{
        	 	EXEC SQL UPDATE SYS_BATCHPROC
         		SET  status = 'completed'
         			WHERE PROCESS_NAME=:argv[0]
         				AND   PROC_INIT=:argv[1]
         				AND   STARTDATE=:argv[2]
         				AND   STATUS='started';

         	EXEC SQL COMMIT WORK RELEASE;
					fprintf(l_logfile, "Record Committed. \n CR_Proc_AutoHisMP Successful , Exiting from main\n");
   			CO_Proc_RptClose(l_logfile, &l_debug_info_ptr); 
         	APL_GOBACK_SUCCESS
      	}
		}
   }
  RETURN_SUCCESS : exit(0);
  RETURN_FAILURE : exit(-1);
}

int CR_Proc_AutoHisMP(char *p_dt,
					char **argv,
					FILE *p_logfile,
					INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
					DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

  

  FILE *l_fp_MPrcHis   = NULL;
  FILE *l_fp_noMPrcHis   = NULL;
   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;

  struct sqlca sqlca;	
EXEC SQL VAR chr_g_restart_data is string;

  char chr_l_now[APL_DATE_LEN] = APL_NULL_STRING;

  int int_l_error_flag = APL_SUCCESS;
  int int_l_chkflg = 0;
  int int_l_no_mprchis = 0;
  int int_l_no_nomprchis = 0;
  int int_l_no_unmatch = 0;
	
  sqlca.sqlcode = 0;



		fprintf(p_logfile, "Entered Function CR_Proc_AutoHisMP\n");
		fprintf(p_logfile, "The Date for market price update is : %s\n", p_dt);
	
   

  EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
     FROM SYS_BATCHPROC
     WHERE PROCESS_NAME=:argv[0]
        AND   PROC_INIT=:argv[1]
        AND   STARTDATE=:argv[2]
        AND   STATUS='started'
     FOR UPDATE OF PROCESSING_STATUS,STATUS;


  if(APL_ZERO_RESULT_SET) 
 	{
   	CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc\n",NULL,NULL);
   	APL_GOBACK_FAIL
   }

  IS_ANY_ORA_ERROR
	
		fprintf(p_logfile, "CDBAMPHisFn successfully locked the batch record\n");

   

   if (!strlen(p_dt)) 
   {
      APL_DATA_MISSING("Price Date", APL_NULL_STRING, APL_NULL_STRING);
		int_l_error_flag = APL_FAILURE;
   } 

   if (APL_FAILURE == int_l_error_flag) APL_GOBACK_FAIL


   

   if (APL_FAILURE == CO_Rtv_RptFileName(	"MP", 
				"Market Price Updated From History",
				160,
				argv[5],
				argv,
				&l_fp_MPrcHis,
				l_debug_info_ptr ))
      {
      APL_GOBACK_FAIL
      }

	sleep(2);

   if (APL_FAILURE == CO_Rtv_RptFileName(	"MP", 
				"Market Price Not Available In History",
				160,
				argv[5],
				argv,
				&l_fp_noMPrcHis,
				l_debug_info_ptr ))
      {
      APL_GOBACK_FAIL
      }

   if (APL_FAILURE == MT_Prnt_MPHdr(l_fp_MPrcHis,p_dt))
      {
      APL_GOBACK_FAIL
      }

   if (APL_FAILURE == CR_Prnt_NoMPRptHdr(l_fp_noMPrcHis))
      {
      APL_GOBACK_FAIL
      }

   if (APL_FAILURE == CR_Mod_AutoHisMP(p_dt,
											l_fp_MPrcHis,
											l_fp_noMPrcHis,
											p_logfile,
											&int_l_no_mprchis,
											&int_l_no_nomprchis,
											argv,
											p_intl_envdatastruct_h,
											l_debug_info_ptr ))
   {
      APL_GOBACK_FAIL
   }

   APL_GOBACK_SUCCESS

     RETURN_SUCCESS :

   if (!int_l_no_mprchis) fprintf(p_logfile, "Market Prices Successfully Updated\n");

   MT_Prnt_MPLine(l_fp_MPrcHis);
   CR_Prnt_NoMPRptLine(l_fp_noMPrcHis);

   if (APL_FAILURE == CO_Proc_RptClose(	l_fp_MPrcHis,
													l_debug_info_ptr)) 
      {
      APL_GOBACK_FAIL
      }

   if (APL_FAILURE == CO_Proc_RptClose(	l_fp_noMPrcHis,
													l_debug_info_ptr)) 
      {
      APL_GOBACK_FAIL
      }

   return(APL_SUCCESS);

    RETURN_FAILURE :

   if (!int_l_no_mprchis) fprintf(p_logfile, "No Market Prices Updated\n");

   MT_Prnt_MPLine(l_fp_MPrcHis);
   CR_Prnt_NoMPRptLine(l_fp_noMPrcHis);

   CO_Proc_RptClose(l_fp_MPrcHis, l_debug_info_ptr); 
   CO_Proc_RptClose(l_fp_noMPrcHis, l_debug_info_ptr); 

   return(APL_FAILURE);

}


int CR_Mod_AutoHisMP(char *p_dt,
						FILE *p_fp_mprchis,
						FILE *p_fp_nomprchis,
						FILE *p_logfile,
						int  *p_no_mprchis,
						int  *p_no_nomprchis,
						char **argv,
						INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	 

   struct sqlca sqlca ;

   char chr_l_date[APL_DATE_LEN];
   char chr_p_access_stamp[APL_DATE_LEN];
   char chr_l_rep_outqty[27];
   char chr_l_rep_outamt[23];
	char chr_l_h_instrcode_A[APL_INSTRUMENTCODE_LEN];
   char chr_l_h_instrdesc[130];
	char chr_l_h_date[APL_DATE_LEN];
	char chr_p_sys_date[APL_DATE_LEN];
	char chr_p_h_mode[10];
	char chr_l_h_instrcode1[APL_INSTRUMENTCODE_LEN];
	char chr_l_h_updatemode1[APL_FLAG_LENGTH];
   char chr_l_h_instrdesc1[130];
	char chr_l_h_typeofinstr1[4];
   char chr_l_h_ccycode1[APL_CCYCODE_LEN];
   char chr_l_h_code[APL_CCYCODE_LEN];
	char chr_p_h_closprc1[19];
	char chr_l_buf[BUFFER_LEN];
	short l_i_instr_code =0;
	short l_i_instr_name=0;
	short l_i_date =0;
	short l_i_instr_code1 =0;
	short l_i_closprc1 =0;
	short l_i_updatemode1 =0;
	short l_i_instr_name1 =0;
	short l_i_typeofinstr1 =0;
	short l_i_ccycode1 =0;
	short p_i_date =0;
	short p_i_pricedt =0;
	short p_i_access_stamp =0;
	short p_i_user =0;
	short p_i_declen =0;
	short p_i_sys_date =0;
	short l_i_round =0;
	short l_i_amt_dec_length =0;
	int int_l_amt_dec_length =0;
   int int_error_flag = APL_SUCCESS;
	int int_p_h_declen =0;
	int int_l_round =0;
	int int_l_pglen_m =0;
	int int_p_date_diff =0;
	long int_p_reccount =0;
	double l_h_closing_pr1 =0;
   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;


   sqlca.sqlcode = 0;

EXEC SQL VAR chr_g_restart_data is string;

	CO_ProcMonitor(p_logfile, 
				"Entered Function CR_Mod_AutoHisMP. Going for mandatory checks\n",
				NULL,
				p_intl_envdatastruct_h);
	memset(chr_l_buf,NULL,BUFFER_LEN);
	sprintf(chr_l_buf,"Main  Date : (%s)\n",p_dt);
	CO_ProcMonitor(p_logfile,chr_l_buf,NULL,p_intl_envdatastruct_h);
	memset(chr_l_buf,NULL,BUFFER_LEN);



  	if (!strlen(p_dt)) 
		{APL_DATA_MISSING("Price Date",APL_NULL_STRING,APL_NULL_STRING);
  		int_error_flag = APL_FAILURE;}                 

   if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
      {APL_GOBACK_FAIL } 

	
	
	EXEC SQL DELETE MT_DLYMKTPRC WHERE
				PRICE_DATE =:p_dt:p_i_date;

	IS_ANY_ORA_ERROR

   if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
      {APL_GOBACK_FAIL } 

	sqlca.sqlcode =0;

	EXEC SQL SELECT SYS_DATE INTO :chr_p_sys_date:p_i_sys_date
			FROM PRO_SYS_DATE;

	IS_ANY_ORA_ERROR

	if (CO_RtvSysDtTime(chr_p_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
      {APL_GOBACK_FAIL } 

		

			int_p_date_diff =0;
    
		 	if ( APL_FAILURE == CO_Pro_DateComp(p_dt,
                                    chr_p_sys_date,
                                    &int_p_date_diff,
                                    l_debug_info_ptr))
  			{
      		APL_GOBACK_FAIL
  			}

  			if (int_p_date_diff <0)
  			{
				
      		if(CO_InsertErr( l_debug_info_ptr,
                           ERR_DATE_CANT_FUTURE,
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           __LINE__,
                           __FILE__
                           ) != APL_SUCCESS)
      		APL_GOBACK_FAIL
  			}

		
	

   EXEC SQL INSERT INTO MT_DLYMKTPRC 
				(PRICE_DATE,
				INSTR_CODE,
				CLOSING_PR,
				MODIFYMODE,
				ACCESS_STAMP,
				MAKER,
				MAKER_DT,
				MKRTPR_STAT,
				CHECKER,
				CHECKER_DT)
         (SELECT :p_dt:p_i_date,
						INSTR_CODE,
						CLOSING_PR, 
						'H',
						:chr_p_access_stamp:p_i_access_stamp,
						:p_intl_envdatastruct_h->usr:p_i_user,
						:chr_p_access_stamp:p_i_access_stamp,
						'AA',
						:p_intl_envdatastruct_h->usr:p_i_user,
						:chr_p_access_stamp:p_i_access_stamp
								FROM MT_DLYMKTPRC A
                  WHERE A.PRICE_DATE =(SELECT MAX(PRICE_DATE) FROM MT_DLYMKTPRC B 
														WHERE B.INSTR_CODE =A.INSTR_CODE
														AND B.PRICE_DATE <:p_dt)
						AND A.INSTR_CODE IN (SELECT INSTR_CODE FROM MT_INSTRUMENT)); 
					
	IS_ANY_ORA_ERROR

	fprintf(p_logfile,"SQL ERROR IF ANY:  ");
	sprintf(chr_l_buf,"SQLCA.SQLCODE : %d\n",sqlca.sqlcode);
	fprintf(p_logfile,"This l_debuglist h_code is for Insertion from history records\n\n");
	CO_ProcMonitor(p_logfile,chr_l_buf,NULL,p_intl_envdatastruct_h);

   if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
      {APL_GOBACK_FAIL } 

	

	EXEC SQL INSERT INTO MT_DLYMKTPRC 
				(PRICE_DATE,
				INSTR_CODE,
				CLOSING_PR,
				MODIFYMODE,
				ACCESS_STAMP,
				MAKER,
				MAKER_DT,
				MKRTPR_STAT,
				CHECKER,
				CHECKER_DT)
         (SELECT :p_dt:p_i_date,
						INSTR_CODE,
						CLOSING_PR, 
						'H',
						:chr_p_access_stamp:p_i_access_stamp,
						:p_intl_envdatastruct_h->usr:p_i_user,
						:chr_p_access_stamp:p_i_access_stamp,
						'AA',
						:p_intl_envdatastruct_h->usr:p_i_user,
						:chr_p_access_stamp:p_i_access_stamp
							FROM MT_HISDLYMKTPRC A
					WHERE A.PRICE_DATE =(SELECT MAX(PRICE_DATE) FROM MT_HISDLYMKTPRC B 
														WHERE B.INSTR_CODE =A.INSTR_CODE
														AND B.PRICE_DATE <:p_dt)
						AND A.INSTR_CODE NOT IN (SELECT INSTR_CODE FROM MT_DLYMKTPRC 
														WHERE PRICE_DATE =:p_dt)
						AND A.INSTR_CODE IN (SELECT INSTR_CODE FROM MT_INSTRUMENT)	
						AND A.MKRTPR_STAT ='AA'); 

   IS_ANY_ORA_ERROR

	fprintf(p_logfile,"SQL ERROR IF ANY:  ");
	sprintf(chr_l_buf,"SQLCA.SQLCODE : %d\n",sqlca.sqlcode);
	fprintf(p_logfile,"This l_debuglist h_code is for Inserting CHISDLYMKTPRC records\n\n");
	CO_ProcMonitor(p_logfile,chr_l_buf,NULL,p_intl_envdatastruct_h);

   if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
      {APL_GOBACK_FAIL } 


	

	EXEC SQL INSERT INTO MT_DLYMKTPRC
				(PRICE_DATE,
				INSTR_CODE,
				CLOSING_PR,
				MODIFYMODE,
				ACCESS_STAMP,
				MAKER,
				MAKER_DT,
				MKRTPR_STAT,
				CHECKER,
				CHECKER_DT)
         (SELECT :p_dt:p_i_date,
						INSTR_CODE,
						0, 
						'H',
						:chr_p_access_stamp:p_i_access_stamp,
						:p_intl_envdatastruct_h->usr:p_i_user,
						:chr_p_access_stamp:p_i_access_stamp,
						'AA',
						:p_intl_envdatastruct_h->usr:p_i_user,
						:chr_p_access_stamp:p_i_access_stamp
							FROM MT_INSTRUMENT
				WHERE STATUS ='AA'
						AND INSTR_CODE NOT IN (SELECT INSTR_CODE FROM MT_DLYMKTPRC 
									WHERE PRICE_DATE =:p_dt));

	IS_ANY_ORA_ERROR

	fprintf(p_logfile,"SQL ERROR IF ANY:  ");
	sprintf(chr_l_buf,"SQLCA.SQLCODE : %d\n",sqlca.sqlcode);
	fprintf(p_logfile,"This l_debuglist h_code is for Inserting 0 for unavailable prices\n\n");
	CO_ProcMonitor(p_logfile,chr_l_buf,NULL,p_intl_envdatastruct_h);

   if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
      {APL_GOBACK_FAIL } 

   EXEC SQL SELECT AMOUNT_DECIMAL_LEN INTO :int_l_round:l_i_round
               FROM MT_CORE_SYS_PARAMS;
   IS_ANY_ORA_ERROR

	

	sqlca.sqlcode =0;

	EXEC SQL DECLARE cur_mprc CURSOR FOR 
				SELECT 	A.INSTR_CODE, 
							A.CLOSING_PR, 
							A.MODIFYMODE,
							B.INSTR_NAME,
							B.INSTR_TYPE,
							B.CURRENCY_CD
						FROM MT_DLYMKTPRC A, MT_INSTRUMENT B WHERE 
							(A.INSTR_CODE = B.INSTR_CODE)
						 AND A.PRICE_DATE =:p_dt
						 AND A.CLOSING_PR <> 0
						 ORDER BY A.INSTR_CODE;

	IS_ANY_ORA_ERROR

	EXEC SQL OPEN cur_mprc;

	IS_ANY_ORA_ERROR

	EXEC SQL VAR chr_l_h_instrcode1 IS STRING ;
	EXEC SQL VAR chr_l_h_instrdesc1 IS STRING ;
	EXEC SQL VAR chr_l_date IS STRING ;

	for (int_p_reccount =0;; int_p_reccount++)
	{  
		memset(chr_l_h_instrcode1,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
		memset(chr_l_h_updatemode1,APL_NULL_CHAR,APL_FLAG_LENGTH);
		memset(chr_l_h_instrdesc1,APL_NULL_CHAR,130);
		memset(chr_l_h_typeofinstr1,APL_NULL_CHAR,4);
		memset(chr_l_h_ccycode1,APL_NULL_CHAR,APL_CCYCODE_LEN);

		memset(chr_p_h_closprc1,APL_NULL_CHAR,19);

		memset(chr_l_h_code,APL_NULL_CHAR,APL_CCYCODE_LEN);

		memset(chr_p_h_mode,APL_NULL_CHAR,10);

		l_h_closing_pr1 =0;

		l_i_instr_code1 =0;
		l_i_closprc1 =0;
		l_i_updatemode1 =0;
		l_i_instr_name1 =0;
		l_i_typeofinstr1 =0;
		l_i_ccycode1 =0;

		EXEC SQL FETCH cur_mprc
				INTO 	:chr_l_h_instrcode1:l_i_instr_code1,
						:l_h_closing_pr1:l_i_closprc1,
						:chr_l_h_updatemode1:l_i_updatemode1,
						:chr_l_h_instrdesc1:l_i_instr_name1,
						:chr_l_h_typeofinstr1:l_i_typeofinstr1,
						:chr_l_h_ccycode1:l_i_ccycode1;

		IS_ANY_ORA_ERROR

		if(sqlca.sqlcode ==1403) break;

		sqlca.sqlcode =0;

		int_p_h_declen = 0;
		p_i_declen = 0;

						

						sqlca.sqlcode =0;
						int_l_amt_dec_length =0;
						l_i_amt_dec_length =0;

						EXEC SQL SELECT DEC_LEN INTO :int_l_amt_dec_length:l_i_amt_dec_length  
								FROM DL_CURRENCY
								WHERE CURRENCY_CD =(SELECT CURRENCY_CD FROM
											MT_INSTRUMENT WHERE INSTR_CODE =:chr_l_h_instrcode1);

						IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_CCY_NOTFND,
																		"For Instrode",
																		chr_l_h_instrcode1,
																		APL_NULL_STRING)

		

		if(!strcmp(chr_l_h_typeofinstr1,"FMT"))
		{
			int_p_h_declen = 3; 
			l_h_closing_pr1 = (l_h_closing_pr1*100);
			strcpy(chr_l_h_code,"%");
		}
		else
		{
			EXEC SQL SELECT DEC_LEN 
					INTO :int_p_h_declen:p_i_declen FROM
					DL_CURRENCY WHERE
						CURRENCY_CD =:chr_l_h_ccycode1;

			IS_ANY_ORA_ERROR

			strcpy(chr_l_h_code,chr_l_h_ccycode1);
		}

		
		memset(chr_p_h_mode,APL_NULL_CHAR,10);
		if(!strcmp(chr_l_h_updatemode1,"H"))
		{
			strcpy(chr_p_h_mode,"History");
		}
		else if (!strcmp(chr_l_h_updatemode1,"M"))
		{
			strcpy(chr_p_h_mode,"Manual");
		}
		else if (!strcmp(chr_l_h_updatemode1,"A"))
		{
			strcpy(chr_p_h_mode,"Automatic");
		}

		

		CO_ToStr(	l_h_closing_pr1,
					   AMOUNT_LEN_B,
						int_p_h_declen,
						chr_p_h_closprc1);
		

  		if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
     		{APL_GOBACK_FAIL } 

		CO_NewLine(chr_l_h_instrdesc1); 

		fprintf(p_fp_mprchis, 
					"%-8s    %-30.30s    %18.*lf    %-3.3s      %s\n",	
					chr_l_h_instrcode1, 
					chr_l_h_instrdesc1, 
					int_l_amt_dec_length,
					l_h_closing_pr1,
					chr_l_h_code,
					chr_p_h_mode);

		(*p_no_mprchis)++;

		if (++int_l_pglen_m == PAGELENGTH) 
		{
			MT_Prnt_MPLine(p_fp_mprchis);
			fprintf(p_fp_mprchis, "\f");
			fprintf(p_fp_mprchis, "\n");
			MT_Prnt_MPHdr(p_fp_mprchis,p_dt);
			int_l_pglen_m = 7;
		}
		
		continue;
	}
	
	

	sqlca.sqlcode =0;

	EXEC SQL DECLARE noval_mprc CURSOR FOR 
				SELECT A.INSTR_CODE,B.INSTR_NAME,A.PRICE_DATE
						FROM MT_DLYMKTPRC A ,MT_INSTRUMENT B WHERE 
							(A.INSTR_CODE = B.INSTR_CODE)
						 AND A.PRICE_DATE =:p_dt
						 AND A.CLOSING_PR =0
						 ORDER BY A.INSTR_CODE;

	IS_ANY_ORA_ERROR

	EXEC SQL OPEN noval_mprc;

	IS_ANY_ORA_ERROR

	EXEC SQL VAR chr_l_h_instrcode_A IS STRING ;
	EXEC SQL VAR chr_l_h_instrdesc IS STRING ;
	EXEC SQL VAR chr_l_h_date IS STRING ;

	for (int_p_reccount =0;; int_p_reccount++)
	{  
		memset(chr_l_h_instrcode_A,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
		memset(chr_l_h_instrdesc,APL_NULL_CHAR,130);
		memset(chr_l_h_date,APL_NULL_CHAR,APL_DATE_LEN);

		l_i_instr_code =0;
		l_i_instr_name =0;
		l_i_date =0;

		EXEC SQL FETCH noval_mprc
				INTO 	:chr_l_h_instrcode_A:l_i_instr_code,
						:chr_l_h_instrdesc:l_i_instr_name,
						:chr_l_h_date:l_i_date;
			
		IS_ANY_ORA_ERROR

		if(sqlca.sqlcode ==1403) break;

	   CO_NewLine(chr_l_h_instrdesc); 

		fprintf(p_fp_nomprchis, 
					"%-8s    %-30.30s    %10.10s     %s\n",	
					chr_l_h_instrcode_A, 
					chr_l_h_instrdesc, 
					chr_l_h_date,
					"NOT FOUND"); 

		(*p_no_nomprchis)++;

		if (++int_l_pglen_m == PAGELENGTH) 
		{
			CR_Prnt_NoMPRptLine(p_fp_nomprchis);
			fprintf(p_fp_mprchis, "\f");
			fprintf(p_fp_mprchis, "\n");
			CR_Prnt_NoMPRptHdr(p_fp_nomprchis);
			int_l_pglen_m = 7;
		}
		
		continue;
	}
	
	if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		{
		fprintf(p_logfile, "Failed to Update Prices\n\n");
		CO_ProcMonitor(p_logfile, "Errors If Any: ", l_debug_info_ptr, p_intl_envdatastruct_h);
		CO_FreeErrLst(l_debug_info_ptr);
		}


  if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
     {APL_GOBACK_FAIL } 

  APL_GOBACK_SUCCESS
 
  RETURN_SUCCESS :
	{
		EXEC SQL COMMIT WORK;
		CO_ProcMonitor(p_logfile, "Record Committed", l_debug_info_ptr, p_intl_envdatastruct_h);

    	EXEC SQL SELECT PROCESSING_STATUS  INTO :chr_g_restart_data:g_restart_data_i
     		FROM SYS_BATCHPROC
     	WHERE PROCESS_NAME=:argv[0]
     		AND PROC_INIT=:argv[1]
     		AND STARTDATE=:argv[2]
     		AND STATUS='started'
     	FOR UPDATE OF PROCESSING_STATUS,STATUS;

     	if(APL_ZERO_RESULT_SET) 
		{
     		CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
     		APL_GOBACK_FAIL
      }

		CO_ProcMonitor(p_logfile, "Errors if Any : ", l_debug_info_ptr, p_intl_envdatastruct_h);
		CO_FreeErrLst(l_debug_info_ptr);

		return(APL_SUCCESS);
	}

  RETURN_FAILURE :
	{
		EXEC SQL ROLLBACK WORK;
		CO_ProcMonitor(p_logfile, "Errors if any: ", l_debug_info_ptr, p_intl_envdatastruct_h);
		CO_ProcMonitor(p_logfile, "Rolling Back", l_debug_info_ptr, p_intl_envdatastruct_h);
		CO_FreeErrLst(l_debug_info_ptr);

		return(APL_FAILURE);
	}
}

int CR_Proc_AutoMP(	char *p_dt,
						char *chr_p_filename_a,
						char **argv,
						char *p_uploaddir,
						FILE *p_logfile,
						INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   

  FILE *l_fp_AMPrc   = NULL;
  FILE *l_fp_noAMPrc = NULL;
  FILE *l_fp_XMPrc   = NULL;
  FILE *l_feedfile   = NULL;

  struct sqlca sqlca;

  char chr_l_now[APL_DATE_LEN] = APL_NULL_STRING;
  char chr_l_feedfile_name[FILE_NAME_LEN] = APL_NULL_STRING;

  int int_l_error_flag = APL_SUCCESS;
  int int_l_chkflg = 0;
  int int_l_no_amprc = 0;
  int int_l_no_noamprc = 0;
  int int_l_no_xmprc = 0;
  int int_l_no_unmatch = 0;
   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;

EXEC SQL VAR chr_g_restart_data is string;

  sqlca.sqlcode = 0;



      fprintf(p_logfile, "Entered Function CR_Proc_AutoHisMP\n");
      fprintf(p_logfile, "The Date for market price update is : %s\n", p_dt);

	

   strcpy(chr_l_feedfile_name, p_uploaddir);
   strcat(chr_l_feedfile_name, chr_p_filename_a);

	
	
   l_feedfile = fopen(chr_l_feedfile_name, "r");

	

	if (l_feedfile == NULL)
	{
  		if (CO_InsertErr
  				(l_debug_info_ptr,
  				ERR_FDFILE_NOTVALID,
  				
  				APL_NULL_STRING,
  				APL_NULL_STRING,
  				APL_NULL_STRING,
  				__LINE__,
  				__FILE__
  				) != APL_SUCCESS)
  				APL_GOBACK_FAIL
  		APL_GOBACK_FAIL
	}

   

  EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
     FROM SYS_BATCHPROC
     WHERE PROCESS_NAME=:argv[0]
        AND   PROC_INIT=:argv[1]
        AND   STARTDATE=:argv[2]
        AND   STATUS='started'
     FOR UPDATE OF PROCESSING_STATUS,STATUS;


  if(APL_ZERO_RESULT_SET)
   {
      CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
      APL_GOBACK_FAIL
   }

  IS_ANY_ORA_ERROR

      fprintf(p_logfile, "CDBAMPrcFn successfully locked the batch record\n");

   

   if (!strlen(p_dt))
   {
      APL_DATA_MISSING("Price Date", APL_NULL_STRING, APL_NULL_STRING);
      int_l_error_flag = APL_FAILURE;
   }

   if (APL_FAILURE == int_l_error_flag) APL_GOBACK_FAIL

   

   if (APL_FAILURE == CO_Rtv_RptFileName( "MP", 
            "Market Price Updated From Feed File",
            160,
				argv[5],
            argv,
            &l_fp_AMPrc,
            l_debug_info_ptr ))
      {
      APL_GOBACK_FAIL
      }

	sleep(2);

   if (APL_FAILURE == CO_Rtv_RptFileName( "MP", 
            "Market Price Not Available In Feed File",
            160,
				argv[5],
            argv,
            &l_fp_noAMPrc,
            l_debug_info_ptr ))
      {
      APL_GOBACK_FAIL
      }

	sleep(2);

   if (APL_FAILURE == CO_Rtv_RptFileName( "MP", 
            "Excess Instrurities in Feed File",
            160,
				argv[5],
            argv,
            &l_fp_XMPrc,
            l_debug_info_ptr ))
      {
      APL_GOBACK_FAIL
      }

   if (APL_FAILURE == CR_Mod_AutoMP(p_dt,
                                 l_feedfile,
                                 l_fp_AMPrc,
                                 l_fp_noAMPrc,
                                 l_fp_XMPrc,
                                 p_logfile,
                                 &int_l_no_amprc,
                                 &int_l_no_noamprc,
                                 &int_l_no_xmprc,
                                 argv,
                                 p_intl_envdatastruct_h,
                                 l_debug_info_ptr ))
   {
      APL_GOBACK_FAIL
   }

   APL_GOBACK_SUCCESS

     RETURN_SUCCESS :

	CO_ProcMonitor(p_logfile," Successful ! in CDBAMPrcFn",l_debug_info_ptr,p_intl_envdatastruct_h);

   if (!int_l_no_amprc) fprintf(p_logfile, "No Market Prices Updated\n");

   MT_Prnt_MPLine(l_fp_AMPrc);
   CR_Prnt_NoMPRptLine(l_fp_noAMPrc);
   CR_Prnt_XMPRptLine(l_fp_XMPrc);

   if (APL_FAILURE == CO_Proc_RptClose(  l_fp_AMPrc,
                                       l_debug_info_ptr))
      {
      APL_GOBACK_FAIL
      }

   if (APL_FAILURE == CO_Proc_RptClose(  l_fp_noAMPrc,
                                       l_debug_info_ptr))
      {
      APL_GOBACK_FAIL
      }

   if (APL_FAILURE == CO_Proc_RptClose(  l_fp_XMPrc,
                                       l_debug_info_ptr))
      {
      APL_GOBACK_FAIL
      }

   fclose(l_feedfile);

   return(APL_SUCCESS);

    RETURN_FAILURE :

	CO_ProcMonitor(p_logfile," Failed in CDBAMPrcFn",l_debug_info_ptr,p_intl_envdatastruct_h);

   MT_Prnt_MPLine(l_fp_AMPrc);
   CR_Prnt_NoMPRptLine(l_fp_noAMPrc);
   CR_Prnt_XMPRptLine(l_fp_XMPrc);
   fclose(l_feedfile);

   CO_Proc_RptClose(l_fp_AMPrc, l_debug_info_ptr);
   CO_Proc_RptClose(l_fp_noAMPrc, l_debug_info_ptr);
   CO_Proc_RptClose(l_fp_XMPrc, l_debug_info_ptr);

   return(APL_FAILURE);
}

int CR_Mod_AutoMP(char *p_dt,
                FILE *p_feedfile,
                FILE *p_fp_amprc,
                FILE *p_fp_noamprc,
                FILE *p_fp_xmprc,
                FILE *p_logfile,
                int *p_no_amprc,
                int *p_no_noamprc,
                int *p_no_xmprc,
                char **argv,
                INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
                DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{
	

	struct sqlca sqlca;

   char chr_l_date[APL_DATE_LEN];
   char chr_l_rep_outqty[27];
   char chr_l_rep_outamt[23];
	char chr_l_h_instrcode_A[APL_INSTRUMENTCODE_LEN];
   char chr_l_h_instrdesc[130];
	char chr_l_h_date[APL_DATE_LEN];
	char chr_p_sys_date[APL_DATE_LEN];
	char chr_p_h_mode[10];
	char chr_l_h_instrcode1[APL_INSTRUMENTCODE_LEN];
	char chr_l_h_updatemode1[APL_FLAG_LENGTH];
   char chr_l_h_instrdesc1[130];
	char chr_l_h_typeofinstr1[4];
   char chr_l_h_ccycode1[APL_CCYCODE_LEN];
   char chr_l_h_code[APL_CCYCODE_LEN];
	char chr_p_h_closprc1[19];
	short l_i_instr_code =0;
	short l_i_instr_name=0;
	short l_i_date =0;
	short l_i_instr_code1 =0;
	short l_i_closprc1 =0;
	short l_i_updatemode1 =0;
	short l_i_instr_name1 =0;
	short l_i_typeofinstr1 =0;
	short l_i_ccycode1 =0;
	short p_i_declen =0;
	short p_i_sys_date =0;
	short p_i_temp_instrcode =0;
	short l_i_amt_dec_length =0; 
	int int_p_h_declen =0;
	int int_l_amt_dec_length =0; 
	int int_l_pglen_m =0;
	long int_p_reccount =0;
	double l_h_closing_pr1 =0;
	double l_h_rndprc1 =0;

	char chr_l_buf[BUFFER_LEN];
   char chr_p_access_stamp[APL_DATE_LEN];
	char chr_p_linebuf[APL_MAXLINE_SIZE];
	char p_instr_code[LCL_FEED_SIZE][APL_INSTRUMENTCODE_LEN];
	char chr_p_isin[LCL_FEED_SIZE][LCL_ISIN_LEN];
	char chr_p_temp_instrcode[APL_INSTRUMENTCODE_LEN];
	char chr_p_temp_isin[LCL_ISIN_LEN];
	char chr_p_pricechar[LCL_FEED_SIZE][20];
	char chr_p_tr_check1[7];
	char chr_l_h_prodtype1[3];
	char chr_p_instrcode_alt[LCL_FEED_SIZE][APL_INSTRUMENTCODE_LEN];
	char chr_p_isin_alt[LCL_FEED_SIZE][LCL_ISIN_LEN];
	char chr_p_price_alt[LCL_FEED_SIZE][20];
	char chr_p_timer[APL_DATE_LEN];
	int i=0;
	int int_imax=0;
	int int_p_instrcodelen =0;
	int int_p_isinlen =0;
	int int_p_date_diff =0;
	int int_p_prnt  =0;
	int int_p_tr_checkflg1	= APL_FAILURE;
	int int_p_tr_checkflg2	= APL_SUCCESS;
	short int_p_condexists 	= APL_SUCCESS; // AIX - Warnings
	short int_c_condexists = APL_SUCCESS;	// AIX - Warnings
	int int_error_flag 	= APL_SUCCESS;
	int int_alt=0;
	double p_cost[LCL_FEED_SIZE];
	double l_h_nominal_value1 =0;
	double p_lk_cost =0;
	short p_i_date =0;
	short p_i_user =0;
	short p_i_pricedt =0;
	short p_i_access_stamp =0;
	short l_i_prodtype1 =0;
	short l_i_nomval1 =0;

   char   chr_l_h_instrcode2[APL_INSTRUMENTCODE_LEN];
   short  l_i_instr_code2 = 0;
   double l_h_nominal_value2 =0;
   short  l_i_nomval2 =0;
	int	 int_num=0;
	char	 **temp;
	char chr_l_price_date[APL_DATE_LEN] = APL_NULL_STRING;	
	int int_l_i_validpricedate = 0;
	int int_l_count = 0;
   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;

EXEC SQL VAR chr_g_restart_data is string;

	

	if (!strlen(p_dt))
      {APL_DATA_MISSING("Price Date","CDBAMPUpdFn",APL_NULL_STRING);
      int_error_flag = APL_FAILURE;}

   if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
      {APL_GOBACK_FAIL }

	
for(i=0;i<LCL_FEED_SIZE;i++)
{
	memset(p_instr_code[i],'\0',APL_INSTRUMENTCODE_LEN);
	memset(chr_p_pricechar[i],'\0',20);
	memset(chr_p_isin[i],'\0',LCL_ISIN_LEN);
	memset(chr_p_instrcode_alt[i],'\0',APL_INSTRUMENTCODE_LEN);
	memset(chr_p_price_alt[i],'\0',20);
	memset(chr_p_isin_alt[i],'\0',LCL_ISIN_LEN);
}

	
	EXEC SQL VAR chr_p_temp_instrcode is STRING;
	EXEC SQL VAR chr_p_temp_isin IS STRING;
	

	

	
	int_p_condexists =0;

	memset(chr_p_timer,APL_NULL_CHAR,APL_DATE_LEN);
	if ( APL_FAILURE == CO_RtvSysDtTime( chr_p_timer, l_debug_info_ptr))
	{APL_GOBACK_FAIL}
	fprintf(p_logfile,"Time Before Reading :%s\n",chr_p_timer);
	fprintf(p_logfile,"Checking for Cntry Cond for  :%s\n", g_mt_commonsys_params_struct_h.nation_code);

	if (APL_SUCCESS == CO_Chk_CntryEnabled ("AUTO_MARKET_PRICE",
                                 		"TR_MPRC_HEADER",
                           				&int_p_condexists,
                        					l_debug_info_ptr))
	{
		if(int_p_condexists > 0)
		{
			while (!feof(p_feedfile))
			{
				memset(chr_p_linebuf,APL_NULL_CHAR,APL_MAXLINE_SIZE);
				fscanf(p_feedfile,"%[^\n]\n",chr_p_linebuf);
				if(int_p_tr_checkflg1 != APL_SUCCESS)
				{
					if(strstr(chr_p_linebuf,"HISSE") == NULL)
					{
						int_p_tr_checkflg1 = APL_FAILURE;
					}
					else 
					{
						chr_p_tr_check1[0] = p_dt[8];
						chr_p_tr_check1[1] = p_dt[9];
						chr_p_tr_check1[2] = p_dt[3];
						chr_p_tr_check1[3] = p_dt[4];
						chr_p_tr_check1[4] = p_dt[0];
						chr_p_tr_check1[5] = p_dt[1];
						chr_p_tr_check1[6] = APL_NULL_CHAR;
						int_p_tr_checkflg1 = APL_SUCCESS;
						memset(chr_p_linebuf,APL_NULL_CHAR,APL_MAXLINE_SIZE);
						fscanf(p_feedfile,"%[^\n]\n",chr_p_linebuf);
						if(strstr(chr_p_linebuf,chr_p_tr_check1) == NULL)
						{
							
							int_p_tr_checkflg2 = APL_FAILURE;
       					if (CO_InsertErr
         					(l_debug_info_ptr,
          					ERR_FDFILE_NCURR_PRC, 
								
          					APL_NULL_STRING,
          					APL_NULL_STRING,
          					APL_NULL_STRING,
          					__LINE__,
          					__FILE__
         					) != APL_SUCCESS)
         					APL_GOBACK_FAIL
							CO_ProcMonitor(p_logfile,
									" File Does Not Contain Today's Prices\n",
									l_debug_info_ptr,
									p_intl_envdatastruct_h);
							APL_GOBACK_FAIL
						}
						break;
					}
				}
				continue;
			}
			if (int_p_tr_checkflg1 == APL_FAILURE)
			{
				if (CO_InsertErr
                     (l_debug_info_ptr,
                     ERR_FDFILE_NOTVALID,
                      
                     APL_NULL_STRING,
                     APL_NULL_STRING,
                     APL_NULL_STRING,
                     __LINE__,
                     __FILE__
                     ) != APL_SUCCESS)
                     APL_GOBACK_FAIL
							CO_ProcMonitor(p_logfile,
									"Feed File Not Valid\n",
									l_debug_info_ptr,
									p_intl_envdatastruct_h);
				APL_GOBACK_FAIL
			}		
			i =0;	
			

			if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
     			{APL_GOBACK_FAIL }

			while(!feof(p_feedfile))
			{
				

				memset(p_instr_code[i],'\0',APL_INSTRUMENTCODE_LEN);
				memset(chr_p_pricechar[i],'\0',19);
				memset(chr_p_temp_instrcode,'\0',APL_INSTRUMENTCODE_LEN);
				strncpy(p_instr_code[i],chr_p_linebuf,8);
				strncpy(chr_p_pricechar[i],chr_p_linebuf+46,8);

				

				strcpy(chr_p_temp_instrcode,p_instr_code[i]);
				int_p_instrcodelen =7; 
				while(p_instr_code[i][int_p_instrcodelen] ==' ')
				{
					chr_p_temp_instrcode[int_p_instrcodelen] = '\0';
					int_p_instrcodelen--;
					if(int_p_instrcodelen <0)
					{
						break;
					}
				}
				memset(p_instr_code[i],APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
				strcpy(p_instr_code[i],chr_p_temp_instrcode);

				
				l_h_closing_pr1 =0;
				l_h_closing_pr1 = atof(chr_p_pricechar[i]);
				if(int_alt >0)
				{
					strcpy(chr_p_price_alt[int_alt-1],chr_p_pricechar[i]);
				}
				else
				{
					strcpy(chr_p_price_alt[0],chr_p_pricechar[0]);
				}
				if (l_h_closing_pr1 > MAX_PR || l_h_closing_pr1 <= 0.0001)
				{
					memset(chr_p_price_alt[int_alt],'\0',19);
					memset(chr_p_instrcode_alt[int_alt],'\0',APL_INSTRUMENTCODE_LEN);
					memset(chr_p_pricechar[i],APL_NULL_CHAR,19);
					strcpy(chr_p_pricechar[i],"0");
					strcpy(chr_p_instrcode_alt[int_alt],p_instr_code[i]);
					int_alt++;
				}
				i++;
				memset(chr_p_linebuf,APL_NULL_CHAR,APL_MAXLINE_SIZE);
				fscanf(p_feedfile,"%[^\n]\n",chr_p_linebuf);
			}

			

			memset(p_instr_code[i],'\0',APL_INSTRUMENTCODE_LEN);
			memset(chr_p_pricechar[i],'\0',19);
			memset(chr_p_temp_instrcode,'\0',APL_INSTRUMENTCODE_LEN);
			strncpy(p_instr_code[i],chr_p_linebuf,8);
			strncpy(chr_p_pricechar[i],chr_p_linebuf+46,8);

			

			strcpy(chr_p_temp_instrcode,p_instr_code[i]);
			int_p_instrcodelen =7; 
			while(p_instr_code[i][int_p_instrcodelen] ==' ')
			{
				chr_p_temp_instrcode[int_p_instrcodelen] = '\0';
				int_p_instrcodelen--;
				if(int_p_instrcodelen <0)
				{
					break;
				}
			}
			memset(p_instr_code[i],APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
			strcpy(p_instr_code[i],chr_p_temp_instrcode);

			
			l_h_closing_pr1 =0;
			l_h_closing_pr1 = atof(chr_p_pricechar[i]);
			if(int_alt >0)
			{
				strcpy(chr_p_price_alt[int_alt-1],chr_p_pricechar[i]);
			}
			else
			{
				strcpy(chr_p_price_alt[0],chr_p_pricechar[0]);
			}
			if (l_h_closing_pr1 > MAX_PR || l_h_closing_pr1 <= 0.0001)
			{
				memset(chr_p_price_alt[int_alt],'\0',19);
				memset(chr_p_instrcode_alt[int_alt],'\0',APL_INSTRUMENTCODE_LEN);
				memset(chr_p_pricechar[i],APL_NULL_CHAR,19);
				strcpy(chr_p_pricechar[i],"0");
				strcpy(chr_p_instrcode_alt[int_alt],p_instr_code[i]);
				int_alt++;
			}
			i++;
			int_imax =i;
		}	
			

		else {if (APL_SUCCESS == CO_Chk_CntryEnabled ("AUTO_MARKET_PRICE",
                                 					"CZ_MPRC_HEADER",
                           							&int_p_condexists,
                        								l_debug_info_ptr))
		{
			if(int_p_condexists > 0)
			{
				i =0;	
				while(!feof(p_feedfile))
				{
					

					memset(chr_p_isin[i],'\0',LCL_ISIN_LEN);
					memset(p_instr_code[i],'\0',APL_INSTRUMENTCODE_LEN);
					memset(chr_p_pricechar[i],'\0',20);
					memset(chr_p_temp_isin,'\0',LCL_ISIN_LEN);
					memset(chr_p_linebuf,APL_NULL_CHAR,APL_MAXLINE_SIZE);
					fscanf(p_feedfile,"%[^\n]\n",chr_p_linebuf);
					
					fprintf(p_logfile,"\n%s\n",chr_p_linebuf);
					

					strncpy(chr_p_isin[i],chr_p_linebuf,12); 

					
				 
					strncpy(chr_p_pricechar[i],chr_p_linebuf+46,15);            

					
	
	 				strcpy(chr_p_temp_isin,chr_p_isin[i]);
					int_p_isinlen =11; 
					while(chr_p_isin[i][int_p_isinlen] ==' ')
					{
						chr_p_temp_isin[int_p_isinlen] = '\0';
						int_p_isinlen--;
						if(int_p_isinlen <0)
						{
							break;
						}
					}
					memset(chr_p_isin[i],'\0',LCL_ISIN_LEN);
					strcpy(chr_p_isin[i],chr_p_temp_isin);
					sqlca.sqlcode =0;

					

					memset(chr_p_temp_instrcode,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
					p_i_temp_instrcode =0;

					EXEC SQL SELECT INSTR_CODE 
							INTO :chr_p_temp_instrcode:p_i_temp_instrcode
								FROM MT_INSTRUMENT
									WHERE INSTR_ISIN =:chr_p_isin[i];

					IS_ANY_ORA_ERROR 

					if (sqlca.sqlcode == 1403)
					{
						strcpy(p_instr_code[i],APL_NULL_STRING);
					}
					else
					{
						strcpy(p_instr_code[i],chr_p_temp_instrcode);
						int_p_instrcodelen = (APL_INSTRUMENTCODE_LEN-2); 
						while(p_instr_code[i][int_p_instrcodelen] ==' ')
						{
							chr_p_temp_instrcode[int_p_instrcodelen] = '\0';
							int_p_instrcodelen--;
							if(int_p_instrcodelen <0)
							{
								break;
							}
						}
						memset(p_instr_code[i],'\0',APL_INSTRUMENTCODE_LEN);
						strcpy(p_instr_code[i],chr_p_temp_instrcode);
					}

					

					l_h_closing_pr1 =0;
					l_h_closing_pr1 = atof(chr_p_pricechar[i]);
					if(l_h_closing_pr1 ==0)
					{
						sprintf(chr_p_price_alt[int_alt-1],chr_p_pricechar[i]);
					}
					else
					{
						strcpy(chr_p_price_alt[0],chr_p_pricechar[0]);
					}
					if (l_h_closing_pr1 > MAX_PR || l_h_closing_pr1 <= 0.0001)
					{
						memset(chr_p_price_alt[int_alt],APL_NULL_CHAR,19);
						memset(chr_p_isin_alt[int_alt],APL_NULL_CHAR,LCL_ISIN_LEN);
						strcpy(chr_p_pricechar[i],"0");
						strcpy(chr_p_isin_alt[int_alt],chr_p_isin[i]);
						int_alt++;
					}
					i++;
				}
				int_imax =i;
			}	
			
			else {if (APL_SUCCESS == CO_Chk_CntryEnabled (
												"AUTO_MARKET_PRICE",
                  	               "LK_MPRC_HEADER",
                     	      		&int_p_condexists,
                        				l_debug_info_ptr))
			{
				if(int_p_condexists > 0)
				{
					i =0;	
					while(!feof(p_feedfile))
					{
						

						memset(chr_p_isin[i],'\0',LCL_ISIN_LEN);
						memset(p_instr_code[i],'\0',APL_INSTRUMENTCODE_LEN);
						memset(chr_p_pricechar[i],'\0',19);
						memset(chr_p_temp_isin,'\0',LCL_ISIN_LEN);
						memset(chr_p_linebuf,APL_NULL_CHAR,APL_MAXLINE_SIZE);
						fscanf(p_feedfile,"%[^\n]\n",chr_p_linebuf);
						strncpy(chr_p_isin[i],chr_p_linebuf+9,12);
						strncpy(chr_p_pricechar[i],chr_p_linebuf+76,7);
						

						

						strcpy(chr_p_temp_isin,chr_p_isin[i]);
						int_p_isinlen =7; 
						while(chr_p_isin[i][int_p_isinlen] ==' ')
						{
							chr_p_temp_isin[int_p_isinlen] = '\0';
							int_p_isinlen--;
							if(int_p_isinlen <0)
							{
								break;
							}
						}	
						memset(chr_p_isin[i],'\0',LCL_ISIN_LEN);
						strcpy(chr_p_isin[i],chr_p_temp_isin);
						sqlca.sqlcode =0;

						

 	   	         memset(chr_p_temp_instrcode,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
   	            p_i_temp_instrcode =0;

						EXEC SQL SELECT INSTR_CODE 
								INTO :chr_p_temp_instrcode:p_i_temp_instrcode
									FROM MT_INSTRUMENT
										WHERE INSTR_ISIN =:chr_p_isin[i];

						IS_ANY_ORA_ERROR

						if (sqlca.sqlcode == 1403)
						{
							strcpy(p_instr_code[i],APL_NULL_STRING);
						}
						else
						{
							strcpy(p_instr_code[i],chr_p_temp_instrcode);
							int_p_instrcodelen = (APL_INSTRUMENTCODE_LEN-2); 
							while(p_instr_code[i][int_p_instrcodelen] ==' ')
							{
								chr_p_temp_instrcode[int_p_instrcodelen] = '\0';
								int_p_instrcodelen--;
								if(int_p_instrcodelen <0)
								{
									break;
								}
							}
							memset(p_instr_code[i],'\0',APL_INSTRUMENTCODE_LEN);
							strcpy(p_instr_code[i],chr_p_temp_instrcode);
						}

						


						l_h_closing_pr1 =0;
						l_h_closing_pr1 = atof(chr_p_pricechar[i]);
						l_h_closing_pr1 = (l_h_closing_pr1/100);

						
						sprintf(chr_p_pricechar[i],"%lf",l_h_closing_pr1);

						if(int_alt >0)
						{
							strcpy(chr_p_price_alt[int_alt-1],chr_p_pricechar[i]);
						}
						else
						{
							strcpy(chr_p_price_alt[0],chr_p_pricechar[0]);
						}
						if (l_h_closing_pr1 > MAX_PR || l_h_closing_pr1 <= 0.0001)
						{
							memset(chr_p_price_alt[int_alt],APL_NULL_CHAR,19);
							memset(chr_p_isin_alt[int_alt],APL_NULL_CHAR,LCL_ISIN_LEN);
							strcpy(chr_p_pricechar[i],"0");
							strcpy(chr_p_isin_alt[int_alt],chr_p_isin[i]);
							int_alt++;
						}
						i++;
					}
					int_imax =i;
				}
				else {if (APL_SUCCESS == CO_Chk_CntryEnabled (
														"AUTO_MARKET_PRICE",
                                 			"PK_MPRC_HEADER",
                           					&int_p_condexists,
                        						l_debug_info_ptr))
				{
	fprintf(p_logfile," Now very close....Checking for Cntry Cond for  :%s\n", g_mt_commonsys_params_struct_h.nation_code);
					if(int_p_condexists > 0)
					{
	fprintf(p_logfile," Now very close....Checked for Cntry Cond for  :%si: and it :%d:\n", g_mt_commonsys_params_struct_h.nation_code, int_p_condexists);
						i =0;	
						int_l_i_validpricedate = 0;
						while(!feof(p_feedfile))
						{
							memset(p_instr_code[i],'\0',APL_INSTRUMENTCODE_LEN);
							memset(chr_l_date,'\0',APL_DATE_LEN);
							memset(chr_p_pricechar[i],'\0',19);
							memset(chr_p_temp_instrcode,'\0',APL_INSTRUMENTCODE_LEN);
							memset(chr_p_linebuf,APL_NULL_CHAR,APL_MAXLINE_SIZE);
							fscanf(p_feedfile,"%[^\n]\n",chr_p_linebuf);
				printf("\n The chr_date b4 :%s: p_dt :%s: ", chr_l_date, p_dt);
							strncpy(chr_l_date,chr_p_linebuf,10);
				printf("\n The chr_date After :%s: p_dt :%s:", chr_l_date, p_dt);
							{
								sqlca.sqlcode =0;

							
				printf("\n The sqlca b4 :%d: ", sqlca.sqlcode);
							EXEC SQL SELECT TO_DATE(:chr_l_date,'DD/MM/YYYY') into :chr_l_date FROM DUAL; 
				printf("\n The sqlca after :%d: ", sqlca.sqlcode); 
								if(sqlca.sqlcode)
								{
								 sqlca.sqlcode =0;
								 continue;
								}

								int_l_count =0;
								if (int_l_i_validpricedate == 0)
								{

									strcat(chr_l_date," 12:00:00");
				printf("\n The chr_date b4 :%s: p_dt :%s: ", chr_l_date, p_dt);

									EXEC SQL SELECT COUNT(*) INTO :int_l_count FROM DUAL
									WHERE TO_DATE(:p_dt,'dd/MM/YYYY hh:mi:ss') = 
									TO_DATE(:chr_l_date,'DD/MM/YYYY hh:mi:ss');

									IS_ANY_ORA_ERROR;

				printf("\n The chr_date b4 :%s: p_dt :%s: int_l_count :%d: ", chr_l_date, p_dt, int_l_count);
									if (int_l_count > 0)
										int_l_i_validpricedate = 1;
								}

							}
							strncpy(p_instr_code[i],chr_p_linebuf+11,6);
							strncpy(chr_p_pricechar[i],chr_p_linebuf+59,7);
							
							strcpy(chr_p_temp_instrcode,p_instr_code[i]);
							int_p_instrcodelen =5; 
							while(p_instr_code[i][int_p_instrcodelen] ==' ')
							{
								chr_p_temp_instrcode[int_p_instrcodelen] = '\0';
								int_p_instrcodelen--;
								if(int_p_instrcodelen <0)
								{
									break;
								}
							}
							memset(p_instr_code[i],APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
							strcpy(p_instr_code[i],chr_p_temp_instrcode);

							

							l_h_closing_pr1 =0;
							l_h_closing_pr1 = atof(chr_p_pricechar[i]);

							
							sprintf(chr_p_pricechar[i],"%lf",l_h_closing_pr1);

							if(int_alt >0)
							{
								strcpy(chr_p_price_alt[int_alt-1],chr_p_pricechar[i]);
							}
							else
							{
								strcpy(chr_p_price_alt[0],chr_p_pricechar[0]);
							}
							if (l_h_closing_pr1 > MAX_PR || l_h_closing_pr1 <= 0.0001)
							{
								memset(chr_p_price_alt[int_alt],APL_NULL_CHAR,19);
								memset(chr_p_instrcode_alt[int_alt],APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
								sprintf(chr_p_price_alt[int_alt],"%lf",l_h_closing_pr1);
								memset(chr_p_pricechar[i],APL_NULL_CHAR,19);
								strcpy(chr_p_pricechar[i],"0");
								strcpy(chr_p_instrcode_alt[int_alt],p_instr_code[i]);
								int_alt++;
							}
							i++;
						}

				printf("\n The chr_date b4 :%s: p_dt :%s: int_l_count :%d: l_i_val :%d:", chr_l_date, p_dt, int_l_count, int_l_i_validpricedate);
						if (int_l_i_validpricedate == 0)
						{
         				CO_ProcMonitor(p_logfile,"Feed File Does not contain Prices for the chr_date passed",NULL,p_intl_envdatastruct_h);
							APL_GOBACK_FAIL;
						}


						int_imax =i;
					}	
					else {if (APL_SUCCESS == CO_Chk_CntryEnabled (
															"AUTO_MARKET_PRICE",
                  	               			"GR_MPRC_HEADER",
                     	      					&int_p_condexists,
                        							l_debug_info_ptr))
					{
						if(int_p_condexists > 0)
						{
							i =0;	
							while(!feof(p_feedfile))
							{
								

								memset(chr_p_isin[i],'\0',LCL_ISIN_LEN);
								memset(p_instr_code[i],'\0',APL_INSTRUMENTCODE_LEN);
								memset(chr_p_pricechar[i],'\0',19);
								memset(chr_p_temp_isin,'\0',LCL_ISIN_LEN);
								memset(chr_p_linebuf,APL_NULL_CHAR,APL_MAXLINE_SIZE);
								fscanf(p_feedfile,"%[^\n]\n",chr_p_linebuf);
								if (APL_FAILURE == CO_SplitStr( chr_p_linebuf,
																			',',
																			&int_num,
																			&temp ))
								{
										fprintf(p_logfile, "\nString split processtion failed\n");
										APL_GOBACK_FAIL
								}
								strcpy(chr_p_isin[i],temp[1]);
								strcpy(chr_p_pricechar[i],temp[4]);
								if ( strlen(chr_p_isin[i]) < 12 )
								{
									fprintf(p_logfile,"\nImproper ISIN h_code in this record %s ISIN h_code : %s\n",chr_p_linebuf,chr_p_isin[i]);
								}
								if ( strcmp( chr_p_pricechar[i] , APL_NULL_STRING) == 0 )
								{
									fprintf(p_logfile,"\nNull Instrurity price in this record %s\n",chr_p_linebuf);
								}
                       
								
								
				
								strcpy(chr_p_temp_isin,chr_p_isin[i]);
								int_p_isinlen =11; 
								while(chr_p_isin[i][int_p_isinlen] ==' ')
								{
									chr_p_temp_isin[int_p_isinlen] = '\0';
									int_p_isinlen--;
									if(int_p_isinlen <0)
									{
										break;
									}
								}
								memset(chr_p_isin[i],'\0',LCL_ISIN_LEN);
								strcpy(chr_p_isin[i],chr_p_temp_isin);
								sqlca.sqlcode =0;

								

								memset(chr_p_temp_instrcode,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
								p_i_temp_instrcode =0;

								EXEC SQL SELECT INSTR_CODE 
										INTO :chr_p_temp_instrcode:p_i_temp_instrcode
											FROM MT_INSTRUMENT
												WHERE INSTR_ISIN =:chr_p_isin[i];

								IS_ANY_ORA_ERROR 

								if (sqlca.sqlcode == 1403)
								{
									strcpy(p_instr_code[i],APL_NULL_STRING);
								}
								else
								{
									strcpy(p_instr_code[i],chr_p_temp_instrcode);
									int_p_instrcodelen = (APL_INSTRUMENTCODE_LEN-2);
															 
									while(p_instr_code[i][int_p_instrcodelen] ==' ')
									{
										chr_p_temp_instrcode[int_p_instrcodelen] = '\0';
										int_p_instrcodelen--;
										if(int_p_instrcodelen <0)
										{
											break;
										}
									}
									memset(p_instr_code[i],'\0',APL_INSTRUMENTCODE_LEN);
									strcpy(p_instr_code[i],chr_p_temp_instrcode);
								}

								

								l_h_closing_pr1 =0;
								l_h_closing_pr1 = atof(chr_p_pricechar[i]);
								if(l_h_closing_pr1 ==0)
								{
									strcpy(chr_p_price_alt[int_alt-1],chr_p_pricechar[i]);
								}
								else
								{
									strcpy(chr_p_price_alt[0],chr_p_pricechar[0]);
								}
								if (l_h_closing_pr1 > MAX_PR || l_h_closing_pr1 <= 0.0001)
								{
									memset(chr_p_price_alt[int_alt],APL_NULL_CHAR,19);
									memset(chr_p_isin_alt[int_alt],APL_NULL_CHAR,LCL_ISIN_LEN);
									strcpy(chr_p_pricechar[i],"0");
									strcpy(chr_p_isin_alt[int_alt],chr_p_isin[i]);
									int_alt++;
								}
								i++;
							}
							int_imax =i;
						}	
						else {
								 
              				 
                  if (APL_SUCCESS == CO_Chk_CntryEnabled (
											                        "AUTO_MARKET_PRICE",
				                                             "MPRC_FEED_ISIN",
                       				                         &int_p_condexists,
                                				                l_debug_info_ptr))
                	{
                    int int_l_date_diff=0;
                    if(int_p_condexists > 0)
                    {
                       i =0;
                       while(!feof(p_feedfile))
                       {
                          

                        memset(chr_l_date,'\0',APL_DATE_LEN);
                        memset(chr_p_isin[i],'\0',LCL_ISIN_LEN);
                        memset(p_instr_code[i],'\0',APL_INSTRUMENTCODE_LEN);
                        memset(chr_p_pricechar[i],'\0',19);
                        memset(chr_p_temp_isin,'\0',LCL_ISIN_LEN);
                        memset(chr_p_linebuf,APL_NULL_CHAR,APL_MAXLINE_SIZE);
                        fscanf(p_feedfile,"%[^\n]\n",chr_p_linebuf);
								strcat(chr_p_linebuf,",");
                        if (APL_FAILURE == CO_SplitStr( chr_p_linebuf,
                                                         ',',
                                                         &int_num,
                                                         &temp ))
                        {
                              fprintf(p_logfile, "\nString split processtion failed\n");
                              APL_GOBACK_FAIL
                        }

								fprintf(p_logfile,"\n0.%s 1.%s 2.%s 3.%s",
											temp[0],temp[1],temp[2],temp[3]);
								if ( strlen(temp[0]) < 12 )
								{
									fprintf(p_logfile,"\nImproper ISIN h_code in this record %s"
												"ISIN h_code : %s\n",chr_p_linebuf,temp[0]);
									continue;
								}
								if ( strcmp( temp[2] , APL_NULL_STRING) == 0 )
								{
									fprintf(p_logfile,"\nNull Instrurity price in this record %s\n",
													chr_p_linebuf);
									continue;
								}

							   if ( strcmp( temp[3], APL_NULL_STRING) == 0 )
							   {
							  	  fprintf(p_logfile,"\nNull Price Date in this record %s\n",
												chr_p_linebuf);
								  continue;
							   }
								else
								{
									strcpy(chr_l_price_date,temp[3]);
									strcat(chr_l_price_date,APL_NULL_TIME);
								}

                        if(APL_FAILURE == CO_RtvSysDt(chr_l_date,l_debug_info_ptr) )
                        {
                          /*fprintf(p_logfile,"\nGet System Date Failed h_line:%d"
                                             "file:%d\n",__LINE__,__FILE__); Changes done for AIX Migration*/
                           fprintf(p_logfile,"\nGet System Date Failed h_line:%d"
                                             "file:%s\n",__LINE__,__FILE__);
                           APL_GOBACK_FAIL;
                        }
					
                        

                        if(APL_FAILURE == CO_Pro_DateComp(chr_l_date,chr_l_price_date,&int_l_date_diff,
                            l_debug_info_ptr) )
                        {
                           /*fprintf(p_logfile,"\nDate Comparision Failed h_line:%d"
                                             "file:%d\n",__LINE__,__FILE__); Changes done for AIX Migration*/
                           fprintf(p_logfile,"\nDate Comparision Failed h_line:%d"
                                             "file:%s\n",__LINE__,__FILE__);
                           APL_GOBACK_FAIL;
                        }


                        if( 0 != int_l_date_diff ) 
								{
								  fprintf(p_logfile,"\nPrice Date != System Date : "
											"Skipping Record %s\n",chr_p_linebuf);
                          continue;           
								}
								
								

								

								strcpy(chr_p_isin[i],temp[0]);
								strcpy(chr_p_pricechar[i],temp[2]);

                       
								
								
				
								strcpy(chr_p_temp_isin,chr_p_isin[i]);
								int_p_isinlen =11; 
								while(chr_p_isin[i][int_p_isinlen] ==' ')
								{
									chr_p_temp_isin[int_p_isinlen] = '\0';
									int_p_isinlen--;
									if(int_p_isinlen <0)
									{
										break;
									}
								}
								memset(chr_p_isin[i],'\0',LCL_ISIN_LEN);
								strcpy(chr_p_isin[i],chr_p_temp_isin);
								sqlca.sqlcode =0;

								

								memset(chr_p_temp_instrcode,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
								p_i_temp_instrcode =0;

								EXEC SQL SELECT INSTR_CODE 
										INTO :chr_p_temp_instrcode:p_i_temp_instrcode
											FROM MT_INSTRUMENT
												WHERE INSTR_ISIN =:chr_p_isin[i];

								IS_ANY_ORA_ERROR 

								if (sqlca.sqlcode == 1403)
								{
									strcpy(p_instr_code[i],APL_NULL_STRING);
								}
								else
								{
									strcpy(p_instr_code[i],chr_p_temp_instrcode);
									int_p_instrcodelen = (APL_INSTRUMENTCODE_LEN-2);
															 
									while(p_instr_code[i][int_p_instrcodelen] ==' ')
									{
										chr_p_temp_instrcode[int_p_instrcodelen] = '\0';
										int_p_instrcodelen--;
										if(int_p_instrcodelen <0)
										{
											break;
										}
									}
									memset(p_instr_code[i],'\0',APL_INSTRUMENTCODE_LEN);
									strcpy(p_instr_code[i],chr_p_temp_instrcode);
								}

								

								l_h_closing_pr1 =0;
								l_h_closing_pr1 = atof(chr_p_pricechar[i]);
								if(l_h_closing_pr1 ==0)
								{
									strcpy(chr_p_price_alt[int_alt-1],chr_p_pricechar[i]);
								}
								else
								{
									strcpy(chr_p_price_alt[0],chr_p_pricechar[0]);
								}
								if (l_h_closing_pr1 > MAX_PR || l_h_closing_pr1 <= 0.0001)
								{
									memset(chr_p_price_alt[int_alt],APL_NULL_CHAR,19);
									memset(chr_p_isin_alt[int_alt],APL_NULL_CHAR,LCL_ISIN_LEN);
									strcpy(chr_p_pricechar[i],"0");
									strcpy(chr_p_isin_alt[int_alt],chr_p_isin[i]);
									int_alt++;
								}
								i++;
							}
							int_imax =i;
						}	
		            else {if (APL_SUCCESS == CO_Chk_CntryEnabled ("AUTO_MARKET_PRICE",
                                 					              "RU_MPRC_HEADER",
                           							              &int_p_condexists,
                        								              l_debug_info_ptr))
		                 {
			               if(int_p_condexists > 0)
			                  {
				                 i =0;	
				                 while(!feof(p_feedfile))
				                  {

					                memset(chr_p_isin[i],'\0',LCL_ISIN_LEN);
					                memset(p_instr_code[i],'\0',APL_INSTRUMENTCODE_LEN);
					                memset(chr_p_pricechar[i],'\0',20);
					                memset(chr_p_temp_isin,'\0',LCL_ISIN_LEN);
					                memset(chr_p_linebuf,APL_NULL_CHAR,APL_MAXLINE_SIZE);
					                fscanf(p_feedfile,"%[^\n]\n",chr_p_linebuf);
					                strcat(chr_p_linebuf,",");
										 if (APL_FAILURE == CO_SplitStr( chr_p_linebuf,
																				    ',',
																				    &int_num,
                                                                &temp ))
                                   {
												  fprintf(p_logfile, "\nString split processtion failed\n");
												  APL_GOBACK_FAIL
                                   }
                               fprintf(p_logfile,"\n0.%s 1.%s",temp[0],temp[1]);
                               if ( strcmp( temp[0] , APL_NULL_STRING) == 0 )
										 {
										  fprintf(p_logfile,"\nNull Instrurity h_code in this record %s\n",
													  chr_p_linebuf);
                                continue;
                               }
                               if ( strcmp( temp[1] , APL_NULL_STRING) == 0 )
										 {
										  fprintf(p_logfile,"\nNull Instrurity price in this record %s\n",
													  chr_p_linebuf);
                                continue;
                               }
                                
					                strcpy(p_instr_code[i],temp[0]);
					                strcpy(chr_p_pricechar[i],temp[1]);
					
					                

					                memset(chr_p_temp_instrcode,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
                               strcpy(chr_p_temp_instrcode, p_instr_code[i]);
						             int_p_instrcodelen = (APL_INSTRUMENTCODE_LEN-2); 
						             while(p_instr_code[i][int_p_instrcodelen] ==' ')
						                {
												chr_p_temp_instrcode[int_p_instrcodelen] = '\0';
												int_p_instrcodelen--;
												if(int_p_instrcodelen <0)
													{
														break;
													}
										    }
										  memset(p_instr_code[i],'\0',APL_INSTRUMENTCODE_LEN);
										  strcpy(p_instr_code[i],chr_p_temp_instrcode);

					                

											l_h_closing_pr1 =0;
											l_h_closing_pr1 = atof(chr_p_pricechar[i]);
											if(l_h_closing_pr1 ==0)
												{
													sprintf(chr_p_price_alt[int_alt-1],chr_p_pricechar[i]);
												}
											else
												{
													strcpy(chr_p_price_alt[0],chr_p_pricechar[0]);
												}
											if (l_h_closing_pr1 > MAX_PR || l_h_closing_pr1 <= 0.0001)
												{
													memset(chr_p_price_alt[int_alt],APL_NULL_CHAR,19);
													memset(chr_p_isin_alt[int_alt],APL_NULL_CHAR,LCL_ISIN_LEN);
													strcpy(chr_p_pricechar[i],"0");
													strcpy(chr_p_isin_alt[int_alt],chr_p_isin[i]);
													int_alt++;
												 }
											i++;
									     }
				                    int_imax =i;
                             }

                  else {if (APL_SUCCESS == CO_Chk_CntryEnabled ("AUTO_MARKET_PRICE",
                                                              "HU_MPRC_HEADER",
                                                              &int_p_condexists,
                                                              l_debug_info_ptr))
                       {
                        if(int_p_condexists > 0)
                           {
                             i =0;
                             while(!feof(p_feedfile))
                              {

                               memset(chr_p_isin[i],'\0',LCL_ISIN_LEN);
                               memset(p_instr_code[i],'\0',APL_INSTRUMENTCODE_LEN);
                               memset(chr_p_pricechar[i],'\0',20);
                               memset(chr_p_temp_isin,'\0',LCL_ISIN_LEN);
                               memset(chr_p_linebuf,APL_NULL_CHAR,APL_MAXLINE_SIZE);
                               fscanf(p_feedfile,"%[^\n]\n",chr_p_linebuf);
                               strcat(chr_p_linebuf,",");
                          if (APL_FAILURE == CO_SplitStr( chr_p_linebuf,
                                     ',',
                                        &int_num,
                                                                                          &temp ))
                                                            {
                           fprintf(p_logfile, "\nString split processtion failed\n");
                            APL_GOBACK_FAIL
                                                             }
                                                        fprintf(p_logfile,"\n0.%s 1.%s",temp[0],temp[1]);
                                                        if ( strcmp(temp[0], APL_NULL_STRING) == 0 )
                                  {
                           fprintf(p_logfile,"\nNull ISIN h_code in this record %s\n",
                                         chr_p_linebuf);
                                                             continue;
                                                           }
                                                        if ( strcmp( temp[1] , APL_NULL_STRING) == 0 )
                            {
                        fprintf(p_logfile,"\nNull Instrurity price in this record %s\n",
                                         chr_p_linebuf);
                                                           continue;
                                                          }

                               strcpy(chr_p_isin[i],temp[0]);
                               strcpy(chr_p_pricechar[i],temp[1]);

                        

                        strcpy(chr_p_temp_isin,chr_p_isin[i]);
                        int_p_isinlen =11; 
                        while(chr_p_isin[i][int_p_isinlen] ==' ')
                        {
                           chr_p_temp_isin[int_p_isinlen] = '\0';
                           int_p_isinlen--;
                           if(int_p_isinlen <0)
                           {
                              break;
                           }
                        }
                        memset(chr_p_isin[i],'\0',LCL_ISIN_LEN);
                        strcpy(chr_p_isin[i],chr_p_temp_isin);
                        sqlca.sqlcode =0;

                        

                        memset(chr_p_temp_instrcode,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
                        p_i_temp_instrcode =0;

                        EXEC SQL SELECT INSTR_CODE
                              INTO :chr_p_temp_instrcode:p_i_temp_instrcode
                              FROM MT_INSTRUMENT
                             WHERE INSTR_ISIN =:chr_p_isin[i]
                                                                            AND ROWNUM < 2;

                        IS_ANY_ORA_ERROR

                        if (sqlca.sqlcode == 1403)
                        {
                           strcpy(p_instr_code[i],APL_NULL_STRING);
                        }
                        else
                        {
                           strcpy(p_instr_code[i],chr_p_temp_instrcode);
                           int_p_instrcodelen = (APL_INSTRUMENTCODE_LEN-2);
                               
                           while(p_instr_code[i][int_p_instrcodelen] ==' ')
                           {
                              chr_p_temp_instrcode[int_p_instrcodelen] = '\0';
                              int_p_instrcodelen--;
                              if(int_p_instrcodelen <0)
                              {
                                 break;
                              }
                           }
                           memset(p_instr_code[i],'\0',APL_INSTRUMENTCODE_LEN);
                           strcpy(p_instr_code[i],chr_p_temp_instrcode);
                        }

                               

                     l_h_closing_pr1 =0;
                     l_h_closing_pr1 = atof(chr_p_pricechar[i]);
                     if(l_h_closing_pr1 ==0)
                     {
                     sprintf(chr_p_price_alt[int_alt-1],chr_p_pricechar[i]);
                     }
                          else
                     {
                     strcpy(chr_p_price_alt[0],chr_p_pricechar[0]);
                     }
                     if (l_h_closing_pr1 > MAX_PR || l_h_closing_pr1 <= 0.0001)
                     {
                        memset(chr_p_price_alt[int_alt],APL_NULL_CHAR,19);
                        memset(chr_p_isin_alt[int_alt],APL_NULL_CHAR,LCL_ISIN_LEN);
                        strcpy(chr_p_pricechar[i],"0");
                        strcpy(chr_p_isin_alt[int_alt],chr_p_isin[i]);
                        int_alt++;
                      }
                     i++;
                       }
                                int_imax =i;
							}
						
				else {if (APL_SUCCESS == CO_Chk_CntryEnabled (
														"AUTO_MARKET_PRICE",
                                 			"EG_MPRC_HEADER",
                           					&int_p_condexists,
                        						l_debug_info_ptr))
				{
					if(int_p_condexists > 0)
					{
						i =0;	
						while(!feof(p_feedfile))
						{
							memset(p_instr_code[i],'\0',APL_INSTRUMENTCODE_LEN);
							memset(chr_l_date,'\0',APL_DATE_LEN);
							memset(chr_p_pricechar[i],'\0',19);
							memset(chr_p_temp_instrcode,'\0',APL_INSTRUMENTCODE_LEN);
							memset(chr_p_linebuf,APL_NULL_CHAR,APL_MAXLINE_SIZE);
							fscanf(p_feedfile,"%[^\n]\n",chr_p_linebuf);

							strncpy(p_instr_code[i],chr_p_linebuf,7);
							strncpy(chr_p_pricechar[i],chr_p_linebuf+7,8);
							
							strcpy(chr_p_temp_instrcode,p_instr_code[i]);
							int_p_instrcodelen =7; 
							while(p_instr_code[i][int_p_instrcodelen] ==' ')
							{
								chr_p_temp_instrcode[int_p_instrcodelen] = '\0';
								int_p_instrcodelen--;
								if(int_p_instrcodelen <0)
								{
									break;
								}
							}
							memset(p_instr_code[i],APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
							strcpy(p_instr_code[i],chr_p_temp_instrcode);

							memset(chr_p_temp_instrcode,'\0',APL_INSTRUMENTCODE_LEN); 

                     EXEC SQL SELECT INSTR_CODE
                              INTO :chr_p_temp_instrcode:p_i_temp_instrcode
                                 FROM MT_INSTRUMENT
                                    WHERE
												SUBSTR(LTRIM(RTRIM(INSTR_NAME)),-7) = :p_instr_code[i]
												AND ROWNUM < 2;

							IS_ANY_ORA_ERROR;
							 		
							memset(p_instr_code[i],'\0',APL_INSTRUMENTCODE_LEN);

							if (sqlca.sqlcode == 0)
								strcpy(p_instr_code[i],chr_p_temp_instrcode);


							

							l_h_closing_pr1 =0;
							l_h_closing_pr1 = atof(chr_p_pricechar[i]);

							sprintf(chr_p_pricechar[i],"%lf",l_h_closing_pr1);

							if(int_alt >0)
							{
								strcpy(chr_p_price_alt[int_alt-1],chr_p_pricechar[i]);
							}
							else
							{
								strcpy(chr_p_price_alt[0],chr_p_pricechar[0]);
							}
							if (l_h_closing_pr1 > MAX_PR || l_h_closing_pr1 <= 0.0001)
							{
								memset(chr_p_price_alt[int_alt],APL_NULL_CHAR,19);
								memset(chr_p_instrcode_alt[int_alt],APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
								sprintf(chr_p_price_alt[int_alt],"%lf",l_h_closing_pr1);
								memset(chr_p_pricechar[i],APL_NULL_CHAR,19);
								strcpy(chr_p_pricechar[i],"0");
								strcpy(chr_p_instrcode_alt[int_alt],p_instr_code[i]);
								int_alt++;
							}
							i++;
						}
						int_imax =i;
					}	
									
                       		}} 
	                     }} 

                       }} 
					  }} 
				     
						
					}} 
				}} 
			}}
			
		}}
		
	}	
	
	
	memset(chr_p_timer,APL_NULL_CHAR,APL_DATE_LEN);
	if ( APL_FAILURE == CO_RtvSysDtTime( chr_p_timer, l_debug_info_ptr))
	{APL_GOBACK_FAIL}
	fprintf(p_logfile,"Time After Reading File :%s\n",chr_p_timer);

	if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
     	{APL_GOBACK_FAIL }

	EXEC SQL SELECT SYS_DATE INTO :chr_p_sys_date:p_i_sys_date
			FROM PRO_SYS_DATE;

	IS_ANY_ORA_ERROR

   if (CO_RtvSysDtTime(chr_p_access_stamp,l_debug_info_ptr) != APL_SUCCESS)
     	{APL_GOBACK_FAIL }

		

			int_p_date_diff =0;
    
		 	if ( APL_FAILURE == CO_Pro_DateComp(p_dt,
                                    chr_p_sys_date,
                                    &int_p_date_diff,
                                    l_debug_info_ptr))
  			{
      		APL_GOBACK_FAIL
  			}

  			if (int_p_date_diff <0)
  			{
      		if(CO_InsertErr(   l_debug_info_ptr,
                           ERR_DATE_CANT_FUTURE,
                           
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           __LINE__,
                           __FILE__
                           ) != APL_SUCCESS)
      		APL_GOBACK_FAIL
  			}
		 
		

		int_p_condexists =0;

			sqlca.sqlcode =0;
			EXEC SQL DELETE MT_TEMPMKTPRC; 

			IS_ANY_ORA_ERROR
   		if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
      		{APL_GOBACK_FAIL } 
			sqlca.sqlcode =0;

			EXEC SQL DELETE MT_DLYMKTPRC WHERE
							PRICE_DATE =:p_dt;

			IS_ANY_ORA_ERROR
   		if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
      		{APL_GOBACK_FAIL } 
			sqlca.sqlcode =0;

			

   		EXEC SQL INSERT INTO MT_TEMPMKTPRC 
						(INSTR_CODE,
						CLOSING_PR)
					VALUES (:p_instr_code,
							  :chr_p_pricechar);
			
			EXEC SQL COMMIT WORK;
			
			IS_ANY_ORA_ERROR
   		if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
      		{APL_GOBACK_FAIL } 
			sqlca.sqlcode =0;



			EXEC SQL UPDATE MT_TEMPMKTPRC
						SET  PRICE_DATE =:p_dt:p_i_pricedt,
								MODIFYMOD = 'A',
								ACCESS_STAMP =:chr_p_access_stamp:p_i_access_stamp,
								MAKER =:p_intl_envdatastruct_h->usr:p_i_user,
								MAKER_DT =:chr_p_access_stamp:p_i_access_stamp,
								MKRTPR_STAT = 'AA', 
								CHECKER =:p_intl_envdatastruct_h->usr:p_i_user,
								CHECKER_DT =:chr_p_access_stamp:p_i_access_stamp;
								
			IS_ANY_ORA_ERROR
   		if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
      		{APL_GOBACK_FAIL } 
			sqlca.sqlcode =0;

			
         int_p_condexists = 0;
			int_c_condexists = 0;
			if ((APL_SUCCESS == CO_Chk_CntryEnabled (
													"AUTO_MARKET_PRICE",
													"GR_MPRC_CALC",
													&int_p_condexists,
													l_debug_info_ptr)) ||
				
			 		(APL_SUCCESS == CO_Chk_CntryEnabled (
													"AUTO_MARKET_PRICE",
													"CZ_MPRC_CALC",
													&int_c_condexists,
													l_debug_info_ptr)))
			  {
				if((int_p_condexists > 0)||(int_c_condexists > 0))
				{
   			EXEC SQL DECLARE cur_UpdClosPrc CURSOR FOR
				SELECT 	INSTR_CODE,NOMINAL_VALUE
				FROM		MT_INSTRUMENT
				WHERE		PROD_CLASS = '2';	

   			EXEC SQL OPEN cur_UpdClosPrc;

   			IS_ANY_ORA_ERROR

            EXEC SQL VAR chr_l_h_instrcode2 IS STRING ;
				for (;;)
				{
               memset(chr_l_h_instrcode2,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
					l_i_instr_code2 =0;
					l_h_nominal_value2  =0;
					l_i_nomval2 =0;
					
					EXEC SQL FETCH cur_UpdClosPrc
							INTO  :chr_l_h_instrcode2:l_i_instr_code2,
									:l_h_nominal_value2:l_i_nomval2;

					IS_ANY_ORA_ERROR

					if(sqlca.sqlcode ==1403) break;

					EXEC SQL UPDATE MT_TEMPMKTPRC
					SET	CLOSING_PR = (CLOSING_PR * (:l_h_nominal_value2)/100)
					WHERE INSTR_CODE  = :chr_l_h_instrcode2;

					IS_ANY_ORA_ERROR
				}
				EXEC SQL CLOSE cur_UpdClosPrc;

								
					EXEC SQL UPDATE MT_TEMPMKTPRC
					SET CLOSING_PR =(CLOSING_PR/100)
					WHERE INSTR_CODE IN (SELECT INSTR_CODE FROM
					MT_INSTRUMENT WHERE INSTR_TYPE ='FMT' AND PROD_CLASS <> '2');
			
					IS_ANY_ORA_ERROR
								

				} 
				
				else
				{
					EXEC SQL UPDATE MT_TEMPMKTPRC
					SET CLOSING_PR =(CLOSING_PR/100)
					WHERE INSTR_CODE IN (SELECT INSTR_CODE FROM
					MT_INSTRUMENT WHERE INSTR_TYPE ='FMT');
			
					IS_ANY_ORA_ERROR
				}
				
			}

			
			
			
	
			if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
      		{APL_GOBACK_FAIL } 
			sqlca.sqlcode =0;

			
			EXEC SQL	DELETE MT_TEMPMKTPRC A 
			WHERE ROWID != (SELECT MIN(ROWID) FROM MT_TEMPMKTPRC B
			WHERE B.INSTR_CODE = A.INSTR_CODE
			AND   B.PRICE_DATE = A.PRICE_DATE
			HAVING COUNT(B.INSTR_CODE||B.PRICE_DATE) > 1);
			
			IS_ANY_ORA_ERROR
   		if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
      		{APL_GOBACK_FAIL } 
			sqlca.sqlcode =0;
					
			
			
			EXEC SQL	DELETE MT_TEMPMKTPRC  A
			WHERE EXISTS  (	SELECT INSTR_CODE||PRICE_DATE from MT_DLYMKTPRC B 
									WHERE B.INSTR_CODE = A.INSTR_CODE
									AND   B.PRICE_DATE = A.PRICE_DATE);
			
			IS_ANY_ORA_ERROR
   		if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
      		{APL_GOBACK_FAIL } 
			sqlca.sqlcode =0;
			
			

   		EXEC SQL INSERT INTO MT_DLYMKTPRC 
         		(SELECT * FROM MT_TEMPMKTPRC 
						WHERE INSTR_CODE IS NOT NULL
                  	AND INSTR_CODE IN (SELECT INSTR_CODE FROM MT_INSTRUMENT));
					
			IS_ANY_ORA_ERROR
   		if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
      		{APL_GOBACK_FAIL } 
			sqlca.sqlcode =0;
		
			

			sqlca.sqlcode =0;

   		EXEC SQL INSERT INTO MT_DLYMKTPRC 
						(PRICE_DATE,
						INSTR_CODE,
						CLOSING_PR,
						MODIFYMODE,
						ACCESS_STAMP,
						MAKER,
						MAKER_DT,
						MKRTPR_STAT,
						CHECKER,
						CHECKER_DT)
         		(SELECT :p_dt:p_i_date,
								INSTR_CODE,
								CLOSING_PR, 
								'H',
								:chr_p_access_stamp:p_i_access_stamp,
								:p_intl_envdatastruct_h->usr:p_i_user,
								:chr_p_access_stamp:p_i_access_stamp,
								'AA',
								:p_intl_envdatastruct_h->usr:p_i_user,
								:chr_p_access_stamp:p_i_access_stamp
										FROM MT_DLYMKTPRC A
                  		WHERE A.PRICE_DATE =(SELECT MAX(PRICE_DATE) FROM MT_DLYMKTPRC B 
														WHERE B.INSTR_CODE =A.INSTR_CODE
														AND B.PRICE_DATE <:p_dt)
								AND A.INSTR_CODE IN (SELECT INSTR_CODE FROM MT_INSTRUMENT )
								AND A.INSTR_CODE NOT IN (SELECT INSTR_CODE FROM MT_DLYMKTPRC
															WHERE PRICE_DATE =:p_dt));
					
			IS_ANY_ORA_ERROR

			fprintf(p_logfile,"SQL ERROR IF ANY on insertion FROM Daily Mkt Prc Table:  ");
			sprintf(chr_l_buf,"SQLCA.SQLCODE : %d\n",sqlca.sqlcode);
			fprintf(p_logfile,"This l_debuglist h_code is for Insertion from history records\n\n");
			CO_ProcMonitor(p_logfile,chr_l_buf,NULL,p_intl_envdatastruct_h);

			memset(chr_p_timer,APL_NULL_CHAR,APL_DATE_LEN);
			if ( APL_FAILURE == CO_RtvSysDtTime( chr_p_timer, l_debug_info_ptr))
			{APL_GOBACK_FAIL}
			fprintf(p_logfile,"Time After Insertion:%s\n",chr_p_timer);

   		if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
      		{APL_GOBACK_FAIL } 

			

			sqlca.sqlcode =0;

			EXEC SQL INSERT INTO MT_DLYMKTPRC 
					(PRICE_DATE,
					INSTR_CODE,
					CLOSING_PR,
					MODIFYMODE,
					ACCESS_STAMP,
					MAKER,
					MAKER_DT,
					MKRTPR_STAT,
					CHECKER,
					CHECKER_DT)
         	(SELECT :p_dt:p_i_date,
							INSTR_CODE,
							CLOSING_PR, 
							'H',
							:chr_p_access_stamp:p_i_access_stamp,
							:p_intl_envdatastruct_h->usr:p_i_user,
							:chr_p_access_stamp:p_i_access_stamp,
							'AA',
							:p_intl_envdatastruct_h->usr:p_i_user,
							:chr_p_access_stamp:p_i_access_stamp
								FROM MT_HISDLYMKTPRC A
						WHERE A.PRICE_DATE =(SELECT MAX(PRICE_DATE) FROM MT_HISDLYMKTPRC B 
														WHERE B.INSTR_CODE =A.INSTR_CODE
														AND B.PRICE_DATE <:p_dt)
							AND A.INSTR_CODE NOT IN (SELECT INSTR_CODE FROM MT_DLYMKTPRC 
														WHERE PRICE_DATE =:p_dt)
							AND A.INSTR_CODE IN (SELECT INSTR_CODE FROM MT_INSTRUMENT )
							AND A.MKRTPR_STAT ='AA');

   		IS_ANY_ORA_ERROR

				fprintf(p_logfile,"SQL ERROR IF ANY after insertion from History:  ");
				sprintf(chr_l_buf,"SQLCA.SQLCODE : %d\n",sqlca.sqlcode);
				fprintf(p_logfile,"This l_debuglist h_code is for Inserting CHISDLYMKTPRC records\n\n");
				CO_ProcMonitor(p_logfile,chr_l_buf,NULL,p_intl_envdatastruct_h);
			fprintf(p_logfile,"Time After Insertion from history :%s\n",chr_p_timer);
   		if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
      		{APL_GOBACK_FAIL } 


			

			sqlca.sqlcode =0;

			EXEC SQL INSERT INTO MT_DLYMKTPRC
						(PRICE_DATE,
						INSTR_CODE,
						CLOSING_PR,
						MODIFYMODE,
						ACCESS_STAMP,
						MAKER,
						MAKER_DT,
						MKRTPR_STAT,
						CHECKER,
						CHECKER_DT)
         		(SELECT :p_dt:p_i_date,
								INSTR_CODE,
								0, 
								'H',
								:chr_p_access_stamp:p_i_access_stamp,
								:p_intl_envdatastruct_h->usr:p_i_user,
								:chr_p_access_stamp:p_i_access_stamp,
								'AA',
								:p_intl_envdatastruct_h->usr:p_i_user,
								:chr_p_access_stamp:p_i_access_stamp
									FROM MT_INSTRUMENT
						WHERE STATUS ='AA'
								AND INSTR_CODE NOT IN (SELECT INSTR_CODE FROM MT_DLYMKTPRC 
											WHERE PRICE_DATE =:p_dt));
		
			IS_ANY_ORA_ERROR
		
				fprintf(p_logfile,"SQL ERROR IF ANY Final Insertion Into Daily Prices:  ");
				sprintf(chr_l_buf,"SQLCA.SQLCODE : %d\n",sqlca.sqlcode);
				fprintf(p_logfile,"This l_debuglist h_code is for Inserting 0 for unavailable prices\n\n");
				CO_ProcMonitor(p_logfile,chr_l_buf,NULL,p_intl_envdatastruct_h);

	memset(chr_p_timer,APL_NULL_CHAR,APL_DATE_LEN);
	if ( APL_FAILURE == CO_RtvSysDtTime( chr_p_timer, l_debug_info_ptr))
	{APL_GOBACK_FAIL}
	fprintf(p_logfile,"Time After Final Insertion:%s\n",chr_p_timer);

   		if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
      				{APL_GOBACK_FAIL } 

			

			int_p_condexists =0;

   		if (APL_SUCCESS == CO_Chk_CntryEnabled ("AUTO_MARKET_PRICE",
               			                        "CZ_MPRC_ISIN",
                        			               &int_p_condexists,
                                 			      l_debug_info_ptr))
   		{
      		

	memset(chr_p_timer,APL_NULL_CHAR,APL_DATE_LEN);
	if ( APL_FAILURE == CO_RtvSysDtTime( chr_p_timer, l_debug_info_ptr))
	{APL_GOBACK_FAIL}
	fprintf(p_logfile,"Time Before Filling Reports :%s\n",chr_p_timer);

      		if(int_p_condexists > 0)
      		{
					sqlca.sqlcode =0;

					EXEC SQL DECLARE cur_czmprc_a CURSOR FOR 
								SELECT 	A.INSTR_CODE, 
											A.CLOSING_PR, 
											A.MODIFYMODE,
											B.INSTR_NAME,
											B.INSTR_TYPE,
											B.CURRENCY_CD,
											B.PROD_CLASS,
											B.NOMINAL_VALUE
										FROM MT_DLYMKTPRC A ,MT_INSTRUMENT B WHERE 
											(A.INSTR_CODE = B.INSTR_CODE)
										 AND A.PRICE_DATE =:p_dt
										 AND A.CLOSING_PR <> 0
						 ORDER BY A.INSTR_CODE;
		
					IS_ANY_ORA_ERROR

					EXEC SQL OPEN cur_czmprc_a;

					IS_ANY_ORA_ERROR

					EXEC SQL VAR chr_l_h_instrcode1 IS STRING ;
					EXEC SQL VAR chr_l_h_instrdesc1 IS STRING ;
					EXEC SQL VAR chr_l_h_prodtype1 IS STRING ;
					EXEC SQL VAR chr_l_date IS STRING ;

					MT_Prnt_MPHdr(p_fp_amprc,p_dt);
	
					for (int_p_reccount =0;; int_p_reccount++)
					{  
						sqlca.sqlcode =0;

						memset(chr_l_h_instrcode1,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
						memset(chr_l_h_updatemode1,APL_NULL_CHAR,APL_FLAG_LENGTH);
						memset(chr_l_h_instrdesc1,APL_NULL_CHAR,130);
						memset(chr_l_h_typeofinstr1,APL_NULL_CHAR,4);
						memset(chr_l_h_ccycode1,APL_NULL_CHAR,APL_CCYCODE_LEN);
						memset(chr_l_h_prodtype1,APL_NULL_CHAR,3);

						memset(chr_p_h_closprc1,APL_NULL_CHAR,19);

						memset(chr_l_h_code,APL_NULL_CHAR,APL_CCYCODE_LEN);

						memset(chr_p_h_mode,APL_NULL_CHAR,10);

						l_h_closing_pr1 =0;
						l_h_nominal_value1  =0;

						l_i_instr_code1 =0;
						l_i_closprc1 =0;
						l_i_updatemode1 =0;
						l_i_instr_name1 =0;
						l_i_typeofinstr1 =0;
						l_i_ccycode1 =0;
						l_i_prodtype1 =0;
						l_i_nomval1 =0;
		
						EXEC SQL FETCH cur_czmprc_a
								INTO 	:chr_l_h_instrcode1:l_i_instr_code1,
										:l_h_closing_pr1:l_i_closprc1,
										:chr_l_h_updatemode1:l_i_updatemode1,
										:chr_l_h_instrdesc1:l_i_instr_name1,
										:chr_l_h_typeofinstr1:l_i_typeofinstr1,
										:chr_l_h_ccycode1:l_i_ccycode1,
										:chr_l_h_prodtype1:l_i_prodtype1,
										:l_h_nominal_value1:l_i_nomval1;
		
						IS_ANY_ORA_ERROR
	
						if(sqlca.sqlcode ==1403) break;

						int_p_h_declen = 0;
						p_i_declen = 0;
			 
						

						sqlca.sqlcode =0;
						int_l_amt_dec_length =0;
						l_i_amt_dec_length =0;

						EXEC SQL SELECT DEC_LEN INTO :int_l_amt_dec_length:l_i_amt_dec_length  
								FROM DL_CURRENCY
								WHERE CURRENCY_CD =(SELECT CURRENCY_CD FROM
											MT_INSTRUMENT WHERE INSTR_CODE =:chr_l_h_instrcode1);

						IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_CCY_NOTFND,
																		"For Instrode",
																		chr_l_h_instrcode1,
																		APL_NULL_STRING)

						
	
							
						
						
						
		
						if(!strcmp(chr_l_h_updatemode1,"H"))
						{
							strcpy(chr_p_h_mode,"History");
						}
						else if(!strcmp(chr_l_h_updatemode1,"M"))
						{
							strcpy(chr_p_h_mode,"Manual");
						}
						else if(!strcmp(chr_l_h_updatemode1,"A"))
						{
							strcpy(chr_p_h_mode,"Automatic");
						}
				
						
		
						if(!strcmp(chr_l_h_typeofinstr1,"FMT"))
						{
							int_p_h_declen = 3;
							l_h_closing_pr1 = (l_h_closing_pr1*100);
							strcpy(chr_l_h_code,"%");
						}
						else
						{
						   strcpy(chr_l_h_code,chr_l_h_ccycode1);
							int_p_h_declen = int_l_amt_dec_length;
						}

						
		
						l_h_rndprc1 =0.0;
						if(!strcmp(chr_l_h_typeofinstr1,"FMT"))
						{
					   CO_Round( l_h_closing_pr1,3, &l_h_rndprc1);
						}
					   else	
						{
					   CO_Round( l_h_closing_pr1,int_l_amt_dec_length, &l_h_rndprc1);
						}

					   CO_NewLine(chr_l_h_instrdesc1); 

						fprintf(p_fp_amprc, 
									"%-8s    %-30.30s     %18.*lf     %3.3s     %s\n",	
									chr_l_h_instrcode1, 
									chr_l_h_instrdesc1, 
									int_p_h_declen,
									l_h_rndprc1,
									chr_l_h_code,
									chr_p_h_mode);
		
						(*p_no_amprc)++;
		
						if (++int_l_pglen_m == PAGELENGTH) 
						{
							MT_Prnt_MPLine(p_fp_amprc);
							fprintf(p_fp_amprc, "\f");
							fprintf(p_fp_amprc, "\n");
							MT_Prnt_MPHdr(p_fp_amprc,p_dt);
							int_l_pglen_m = 7;
						}
						continue;
					}
				}
				else
				{
					sqlca.sqlcode =0;

					EXEC SQL DECLARE cur_mprc_a CURSOR FOR 
								SELECT 	A.INSTR_CODE, 
											A.CLOSING_PR, 
											A.MODIFYMODE,
											B.INSTR_NAME,
											B.INSTR_TYPE,
											B.CURRENCY_CD
										FROM MT_DLYMKTPRC A ,MT_INSTRUMENT B WHERE 
											(A.INSTR_CODE = B.INSTR_CODE)
										 AND A.PRICE_DATE =:p_dt
										 AND A.CLOSING_PR <> 0
						 ORDER BY A.INSTR_CODE;
		
					IS_ANY_ORA_ERROR

					EXEC SQL OPEN cur_mprc_a;

					IS_ANY_ORA_ERROR

					EXEC SQL VAR chr_l_h_instrcode1 IS STRING ;
					EXEC SQL VAR chr_l_h_instrdesc1 IS STRING ;
					EXEC SQL VAR chr_l_date IS STRING ;

					MT_Prnt_MPHdr(p_fp_amprc,p_dt);
	
					for (int_p_reccount =0;; int_p_reccount++)
					{  
						sqlca.sqlcode =0;
				
						memset(chr_l_h_instrcode1,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
						memset(chr_l_h_updatemode1,APL_NULL_CHAR,APL_FLAG_LENGTH);
						memset(chr_l_h_instrdesc1,APL_NULL_CHAR,130);
						memset(chr_l_h_typeofinstr1,APL_NULL_CHAR,4);
						memset(chr_l_h_ccycode1,APL_NULL_CHAR,APL_CCYCODE_LEN);

						memset(chr_p_h_closprc1,APL_NULL_CHAR,19);

						memset(chr_l_h_code,APL_NULL_CHAR,APL_CCYCODE_LEN);

						memset(chr_p_h_mode,APL_NULL_CHAR,10);

						l_h_closing_pr1 =0;

						l_i_instr_code1 =0;
						l_i_closprc1 =0;
						l_i_updatemode1 =0;
						l_i_instr_name1 =0;
						l_i_typeofinstr1 =0;
						l_i_ccycode1 =0;
		
						EXEC SQL FETCH cur_mprc_a
								INTO 	:chr_l_h_instrcode1:l_i_instr_code1,
										:l_h_closing_pr1:l_i_closprc1,
										:chr_l_h_updatemode1:l_i_updatemode1,
										:chr_l_h_instrdesc1:l_i_instr_name1,
										:chr_l_h_typeofinstr1:l_i_typeofinstr1,
										:chr_l_h_ccycode1:l_i_ccycode1;
		
						IS_ANY_ORA_ERROR
	
						if(sqlca.sqlcode ==1403) break;

						

						sqlca.sqlcode =0;
						int_l_amt_dec_length =0;
						l_i_amt_dec_length =0;

						EXEC SQL SELECT DEC_LEN INTO :int_l_amt_dec_length:l_i_amt_dec_length  
								FROM DL_CURRENCY
								WHERE CURRENCY_CD =(SELECT CURRENCY_CD FROM
											MT_INSTRUMENT WHERE INSTR_CODE =:chr_l_h_instrcode1);

						IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_CCY_NOTFND,
																		"For Instrode",
																		chr_l_h_instrcode1,
																		APL_NULL_STRING)

						
		
						if(!strcmp(chr_l_h_updatemode1,"H"))
						{
							strcpy(chr_p_h_mode,"History");
						}
						else if(!strcmp(chr_l_h_updatemode1,"M"))
						{
							strcpy(chr_p_h_mode,"Manual");
						}
						else if(!strcmp(chr_l_h_updatemode1,"A"))
						{
							strcpy(chr_p_h_mode,"Automatic");
						}
				
						
		
						if(!strcmp(chr_l_h_typeofinstr1,"FMT"))
						{
							int_p_h_declen = 3;
							l_h_closing_pr1 = (l_h_closing_pr1*100);
							strcpy(chr_l_h_code,"%");
						}
						else
						{
						   strcpy(chr_l_h_code,chr_l_h_ccycode1);
							int_p_h_declen = int_l_amt_dec_length;
						}

						
		
						l_h_rndprc1 =0.0;
						if(!strcmp(chr_l_h_typeofinstr1,"FMT"))
						{
					   CO_Round( l_h_closing_pr1,3, &l_h_rndprc1);
						}
					   else	
						{
					   CO_Round( l_h_closing_pr1,int_l_amt_dec_length, &l_h_rndprc1);
						}


						CO_NewLine(chr_l_h_instrdesc1); 

						fprintf(p_fp_amprc, 
									"%-8s %-30.30s %18.*lf %-3.3s      %s\n",	
									chr_l_h_instrcode1, 
									chr_l_h_instrdesc1, 
									int_p_h_declen,
									l_h_rndprc1,
									chr_l_h_code,
									chr_p_h_mode);
		
						(*p_no_amprc)++;
		
						if (++int_l_pglen_m == PAGELENGTH) 
						{
							MT_Prnt_MPLine(p_fp_amprc);
							fprintf(p_fp_amprc, "\f");
							fprintf(p_fp_amprc, "\n");
							MT_Prnt_MPHdr(p_fp_amprc,p_dt);
							int_l_pglen_m = 7;
						}
		
						continue;
					}
				}
			
			}		

	memset(chr_p_timer,APL_NULL_CHAR,APL_DATE_LEN);
	if ( APL_FAILURE == CO_RtvSysDtTime( chr_p_timer, l_debug_info_ptr))
	{APL_GOBACK_FAIL}
	fprintf(p_logfile,"Time after Report generations :%s\n",chr_p_timer);

			

	memset(chr_p_timer,APL_NULL_CHAR,APL_DATE_LEN);
	if ( APL_FAILURE == CO_RtvSysDtTime( chr_p_timer, l_debug_info_ptr))
	{APL_GOBACK_FAIL}
	fprintf(p_logfile,"Time Before Unupdated instrument report generation:%s\n",chr_p_timer);

			sqlca.sqlcode =0;

			EXEC SQL DECLARE noval_mprc_a CURSOR FOR 
						SELECT A.INSTR_CODE,B.INSTR_NAME,A.PRICE_DATE
								FROM MT_DLYMKTPRC A ,MT_INSTRUMENT B WHERE 
									(A.INSTR_CODE = B.INSTR_CODE)
								 AND A.PRICE_DATE =:p_dt
								 AND A.CLOSING_PR =0
						 ORDER BY A.INSTR_CODE;

			IS_ANY_ORA_ERROR

			EXEC SQL OPEN noval_mprc_a;

			IS_ANY_ORA_ERROR

			EXEC SQL VAR chr_l_h_instrcode_A IS STRING ;
			EXEC SQL VAR chr_l_h_instrdesc IS STRING ;
			EXEC SQL VAR chr_l_h_date IS STRING ;

			CR_Prnt_NoMPRptHdr(p_fp_noamprc);
	
			for (int_p_reccount =0;; int_p_reccount++)
			{  
				memset(chr_l_h_instrcode_A,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
				memset(chr_l_h_instrdesc,APL_NULL_CHAR,130);
				memset(chr_l_h_date,APL_NULL_CHAR,APL_DATE_LEN);
				l_i_instr_code =0;
				l_i_instr_name =0;
				l_i_date =0;
				
				EXEC SQL FETCH noval_mprc_a
						INTO 	:chr_l_h_instrcode_A:l_i_instr_code,
								:chr_l_h_instrdesc:l_i_instr_name,
								:chr_l_h_date:l_i_date;

				IS_ANY_ORA_ERROR

				if(sqlca.sqlcode ==1403) break;

				CO_NewLine(chr_l_h_instrdesc); 

				fprintf(p_fp_noamprc, 
							"%-8s    %-30.30s    %10.10s     %s\n",	
							chr_l_h_instrcode_A, 
							chr_l_h_instrdesc, 
							chr_l_h_date,
							"NOT FOUND"); 
		
				(*p_no_noamprc)++;

				if (++int_l_pglen_m == PAGELENGTH) 
				{
					CR_Prnt_NoMPRptLine(p_fp_noamprc);
					fprintf(p_fp_noamprc, "\f");
					fprintf(p_fp_noamprc, "\n");
					CR_Prnt_NoMPRptHdr(p_fp_noamprc);
					int_l_pglen_m = 7;
				}
				continue;
			}
	
			

			int_p_condexists =0;
		
   		if (APL_SUCCESS == CO_Chk_CntryEnabled ("AUTO_MARKET_PRICE",
               			                        "MPRC_FEED_ISIN",
                        			               &int_p_condexists,
                                 			      l_debug_info_ptr))
   		{
      		
      		if(int_p_condexists > 0)
      		{
					CR_Prnt_XMPIsinRptHdr(p_fp_xmprc,p_dt);
					i=0;	
					for (int_p_reccount =0;; int_p_reccount++)
					{  
						if(i == int_imax) break;
						if(chr_p_isin[i] != NULL)
						{
							sqlca.sqlcode =0;
							int_p_prnt =0;
	
							chr_p_isin[i][12] = '\0';

							EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_p_prnt
										FROM MT_INSTRUMENT WHERE 
											INSTR_ISIN =:chr_p_isin[i]
											AND ROWNUM =1;

							IS_ANY_ORA_ERROR
							if (int_p_prnt == 0)
							{
								l_h_rndprc1 =0.0;
					   		CO_Round( atof(chr_p_pricechar[i]),l_mt_core_sys_params_struct_h.amount_decimal_len, &l_h_rndprc1);

								fprintf(p_fp_xmprc, 
											"%-12s                              %18.*lf \n",	
											chr_p_isin[i], 
											l_mt_core_sys_params_struct_h.amount_decimal_len,
											l_h_rndprc1);
								(*p_no_xmprc)++;
								if (++int_l_pglen_m == PAGELENGTH) 
								{
									CR_Prnt_XMPIsinRptLine(p_fp_xmprc);
									fprintf(p_fp_xmprc, "\f");
									fprintf(p_fp_xmprc, "\n");
									CR_Prnt_XMPIsinRptHdr(p_fp_xmprc,p_dt);
									int_l_pglen_m = 7;
								}
							}
							
							i++;
							if (i == LCL_FEED_SIZE)	break;
							int_p_prnt =0;
 							continue;
						}
					}
					CR_Prnt_XMPIsinRptLine(p_fp_xmprc);
				   int_alt =int_alt-1;
					for (int_p_reccount =0;; int_p_reccount++)
					{
						if (int_alt <0) break;
						int_p_prnt =0;
						if (int_p_prnt == 0)
						{
							l_h_rndprc1 =0.0;
					   	CO_Round( atof(chr_p_price_alt[int_alt]),l_mt_core_sys_params_struct_h.amount_decimal_len, &l_h_rndprc1);

							fprintf(p_fp_xmprc, 
										"%-12s    Misc. Exceptions :Invalid Price\n",	
										chr_p_isin_alt[int_alt]); 
							(*p_no_xmprc)++;
							if (++int_l_pglen_m == PAGELENGTH) 
							{
								CR_Prnt_XMPIsinRptLine(p_fp_xmprc);
								fprintf(p_fp_xmprc, "\f");
								fprintf(p_fp_xmprc, "\n");
								CR_Prnt_XMPIsinRptHdr(p_fp_xmprc,p_dt);
								int_l_pglen_m = 7;
							}
						}
						int_alt--;
					}
			 	}
				else 
				{

				sqlca.sqlcode =0;

				EXEC SQL DECLARE x_mprc_a CURSOR FOR 
    					SELECT A.INSTR_CODE,A.CLOSING_PR
           					FROM MT_TEMPMKTPRC A
             						WHERE  A.INSTR_CODE IS NOT NULL
										AND NOT EXISTS( SELECT B.INSTR_CODE FROM
                     										MT_INSTRUMENT B
                     							WHERE B.INSTR_CODE = A.INSTR_CODE)
						 ORDER BY A.INSTR_CODE;

				IS_ANY_ORA_ERROR
	
				EXEC SQL OPEN x_mprc_a;

				IS_ANY_ORA_ERROR

				EXEC SQL VAR chr_l_h_instrcode_A IS STRING ;

				CR_Prnt_XMPRptHdr(p_fp_xmprc,p_dt);
		
				int_l_pglen_m = 7;

				for (int_p_reccount =0;; int_p_reccount++)
				{  
					memset(chr_l_h_instrcode1,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
					memset(chr_p_h_closprc1,APL_NULL_CHAR,19);

					l_h_closing_pr1 =0;

					l_i_instr_code1 =0;
					l_i_closprc1 =0;
		
					EXEC SQL FETCH x_mprc_a
							INTO 	:chr_l_h_instrcode1:l_i_instr_code1,
									:l_h_closing_pr1:l_i_closprc1;
		
					IS_ANY_ORA_ERROR

					if(sqlca.sqlcode ==1403) break;

					
		
					CO_ToStr(	l_h_closing_pr1,
								   AMOUNT_LEN_B,
									int_p_h_declen,
									chr_p_h_closprc1);
					
			
  					if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
    		 			{APL_GOBACK_FAIL } 
		
						l_h_rndprc1 =0.0;
					   CO_Round( l_h_closing_pr1,l_mt_core_sys_params_struct_h.amount_decimal_len, &l_h_rndprc1);

					fprintf(p_fp_xmprc, 
								"%-8s     Extra                 %18.*lf \n",	
								chr_l_h_instrcode1, 
								l_mt_core_sys_params_struct_h.amount_decimal_len,
								l_h_rndprc1);
			
					(*p_no_xmprc)++;
		
					if (++int_l_pglen_m == PAGELENGTH) 
					{
						CR_Prnt_XMPRptLine(p_fp_xmprc);
						fprintf(p_fp_xmprc, "\f");
						fprintf(p_fp_xmprc, "\n");
						CR_Prnt_XMPRptHdr(p_fp_xmprc,p_dt);
						int_l_pglen_m = 7;
					}
					continue;
				  }
				  CR_Prnt_XMPRptLine(p_fp_xmprc);
				  int_alt =int_alt-1;
				  for (int_p_reccount =0;; int_p_reccount++)
				  {
						if (int_alt <0) break;
						int_p_prnt =0;
						if (int_p_prnt == 0)
						{
								l_h_rndprc1 =0.0;
					   		CO_Round( atof(chr_p_price_alt[int_alt]),l_mt_core_sys_params_struct_h.amount_decimal_len, &l_h_rndprc1);

							fprintf(p_fp_xmprc, 
										"%-8s    Misc. Exceptions :Invalid Price\n",	
										chr_p_instrcode_alt[int_alt]); 
							(*p_no_xmprc)++;
							if (++int_l_pglen_m == PAGELENGTH) 
							{
								CR_Prnt_XMPRptLine(p_fp_xmprc);
								fprintf(p_fp_xmprc, "\f");
								fprintf(p_fp_xmprc, "\n");
								CR_Prnt_XMPRptHdr(p_fp_xmprc,p_dt);
								int_l_pglen_m = 7;
							}
						}
						int_alt--;
					}
				}
			}
			

	memset(chr_p_timer,APL_NULL_CHAR,APL_DATE_LEN);
	if ( APL_FAILURE == CO_RtvSysDtTime( chr_p_timer, l_debug_info_ptr))
	{APL_GOBACK_FAIL}
	fprintf(p_logfile,"Time After All reports :%s\n",chr_p_timer);

			sqlca.sqlcode =0;

			EXEC SQL DELETE MT_TEMPMKTPRC;
	
			IS_ANY_ORA_ERROR

			if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
			{
				fprintf(p_logfile, "\n\nGoing to free errors\n\n");
				fprintf(p_logfile, "Failed in Updation\n\n");
				CO_ProcMonitor(p_logfile, "Got Errors : ", l_debug_info_ptr, p_intl_envdatastruct_h);
				CO_FreeErrLst(l_debug_info_ptr);
			}

 		 if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
    		 {APL_GOBACK_FAIL } 

 		 APL_GOBACK_SUCCESS
 
  RETURN_SUCCESS :
	{
		EXEC SQL COMMIT WORK;
		CO_ProcMonitor(p_logfile, "Record Committed\n", l_debug_info_ptr, p_intl_envdatastruct_h);

    	EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
     		FROM SYS_BATCHPROC
     	WHERE PROCESS_NAME=:argv[0]
     		AND PROC_INIT=:argv[1]
     		AND STARTDATE=:argv[2]
     		AND STATUS='started'
     	FOR UPDATE OF PROCESSING_STATUS,STATUS;

     	if(APL_ZERO_RESULT_SET) 
		{
     		CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
     		APL_GOBACK_FAIL
      }

		CO_ProcMonitor(p_logfile, "Errors If Any : ", l_debug_info_ptr, p_intl_envdatastruct_h);
		CO_FreeErrLst(l_debug_info_ptr);

		return(APL_SUCCESS);
	}

  RETURN_FAILURE :
	{
		EXEC SQL ROLLBACK WORK;
		CO_ProcMonitor(p_logfile, "Got Errors : ", l_debug_info_ptr, p_intl_envdatastruct_h);
		CO_ProcMonitor(p_logfile, "Rolling Back\n", l_debug_info_ptr, p_intl_envdatastruct_h);
		CO_FreeErrLst(l_debug_info_ptr);

		return(APL_FAILURE);
	}
}

int CR_Prnt_NoMPRptHdr(FILE *fp)
{
   int i;
   fprintf(fp, "\n");
   for (i=0;i<74;fprintf(fp, "-"),i++);
   fprintf(fp, "\n%12sError Report For Daily Prices\n"," ");
   for (i=0;i<74;fprintf(fp, "-"),i++);
   fprintf(fp, "\n\nInstrurity    Instr Description                    Date           Error      \n");
   for (i=0;i<74;fprintf(fp, "-"),i++);
   fprintf(fp, "\n");
   return(1);
}

int CR_Prnt_NoMPRptLine(FILE *fp)
{
   int i;
   for (i=0;i<74;fprintf(fp, "-"),i++);
   fprintf(fp, "\n");
   return(1);
}

int MT_Prnt_MPHdr(FILE *fp,
						 char *p_dt)
{
   int i;
   fprintf(fp, "\n");
   for (i=0;i<88;fprintf(fp, "-"),i++);
   fprintf(fp, "\n%12sMarket Prices Updated As Of %.10s\n"," ",p_dt);
   for (i=0;i<88;fprintf(fp, "-"),i++);
   fprintf(fp, "\n\nInstrurity Instr Description                      Market Price Currency Update Mode\n");
   for (i=0;i<88;fprintf(fp, "-"),i++);
   fprintf(fp, "\n");
   return(1);
}

int MT_Prnt_MPLine(FILE *fp)
{
   int i;
   for (i=0;i<88;fprintf(fp, "-"),i++);
   fprintf(fp, "\n");
   return(1);
}

int CR_Prnt_XMPRptHdr(FILE *fp,
						 char *p_dt)
{
   int i;
   fprintf(fp, "\n");
   for (i=0;i<56;fprintf(fp, "-"),i++);
   fprintf(fp, "\nExtra Instrurities In The Feed File As Of Date %.10s\n",p_dt);
   for (i=0;i<56;fprintf(fp, "-"),i++);
   fprintf(fp, "\n\nInstrurity                                 Market Price\n");
   for (i=0;i<56;fprintf(fp, "-"),i++);
   fprintf(fp, "\n");
   return(1);
}

int CR_Prnt_XMPRptLine(FILE *fp)
{
   int i;
   for (i=0;i<56;fprintf(fp, "-"),i++);
   fprintf(fp, "\n");
   return(1);
}

int CR_Prnt_XMPIsinRptHdr(FILE *fp,
						 char *p_dt)
{
   int i;
   fprintf(fp, "\n");
   for (i=0;i<70;fprintf(fp, "-"),i++);
   fprintf(fp, "\nExtra Instrurities In The Feed File As Of Date %.10s\n",p_dt);
   for (i=0;i<70;fprintf(fp, "-"),i++);
   fprintf(fp, "\n\nISIN Code                                       Market Price\n");
   for (i=0;i<70;fprintf(fp, "-"),i++);
   fprintf(fp, "\n");
   return(1);
}

int CR_Prnt_XMPIsinRptLine(FILE *fp)
{
   int i;
   for (i=0;i<70;fprintf(fp, "-"),i++);
   fprintf(fp, "\n");
   return(1);
}
