


   
   
   
   
   
   
   
   
   
   
   
   




#include <CO_HostStructdef.h>

EXEC SQL INCLUDE sqlca;
#define FILENAME_LEN_A			80

//main(int argc,char **argv)
int main(int argc,char **argv)//Changes done for AIX Migration
{
	DEBUG_INFO_STRUCT_H			*l_debug_info_ptr = NULL;
	FILE						*l_ptr_ini_file = NULL;
	FILE						*l_ptr_log_file = NULL;
	INTL_ENV_DATA_STRUCT_H	l_intl_envdatastruct_h;
	char						chr_l_inifile[FILENAME_LEN_A]   = APL_NULL_STRING;
	char						chr_uname[APL_USERID_LEN]   = APL_NULL_STRING;
	char						chr_passwd[APL_PASSWD_LEN]  = APL_NULL_STRING;
	char						chr_custody_id_b[APL_USERID_LEN]  = APL_NULL_STRING;
	int						int_l_flg = 0;
	int						int_retval = 0;
	char						chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	struct sqlca			sqlca;

	memset(&l_intl_envdatastruct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H));
	
	

	strcpy(l_intl_envdatastruct_h.usr, argv[3]);
	strcpy(l_intl_envdatastruct_h.h_mode, argv[4]);
	strcpy(l_intl_envdatastruct_h.processtion, argv[5]);
	strcpy(l_intl_envdatastruct_h.auth_req, argv[6]);
	strcpy(l_intl_envdatastruct_h.subprocess, argv[7]);
	strcpy(l_intl_envdatastruct_h.h_process, argv[8]);
	
	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

	if ((l_ptr_ini_file = fopen(chr_l_inifile,"r")) == NULL)
		exit(-1);

	APL_FETCH_DB_LOGIN_DETAILS(l_ptr_ini_file,chr_custody_id_b,chr_uname,chr_passwd,APL_OUT_FILE,&l_debug_info_ptr)
	
	
	
	if (CO_DB_Connection_D(chr_uname,chr_passwd,&l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL

	

	
	
	

	int_retval = CO_Rtv_RptFileName("3J",APL_LOGFILE_DESC,100,argv[5],argv,&l_ptr_log_file,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL
	}

	

	EXEC SQL COMMIT WORK;
	
	if (sqlca.sqlcode != 0)
	{
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL
	}

	CO_ProcMonitor(l_ptr_log_file,"Deletion of Expired/Matured Bonds",NULL,NULL);
	CO_ProcMonitor(l_ptr_log_file,"____________________________\n",NULL,NULL);
	
	CO_ProcMonitor(l_ptr_log_file,"Work Committed after chr_logfile creation \n",NULL,&l_intl_envdatastruct_h);

	

	if (CO_RtvSysParams(&l_debug_info_ptr) != APL_SUCCESS)
	{
		CO_ProcMonitor(l_ptr_log_file,"Unable to get system parameters - Rollback done \n",NULL,&l_intl_envdatastruct_h);
		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);
		
		EXEC SQL ROLLBACK WORK RELEASE;
		
		APL_GOBACK_FAIL	
	}

	
	 
	int_retval = CO_Proc_BtchLock(argv,l_ptr_log_file,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		CO_ProcMonitor(l_ptr_log_file,"Unable to lock BATCH_IN_PROC record - Rollback done \n",NULL,&l_intl_envdatastruct_h);
		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		EXEC SQL ROLLBACK WORK RELEASE;
		
		APL_GOBACK_FAIL
	}

	

	int_retval = EOM_Mod_ExpBondDel(argv,l_ptr_log_file,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		int_l_flg = 1;

	   CO_Proc_Exit(argv,l_ptr_log_file,&l_debug_info_ptr,int_l_flg);
		
		if (CO_ChkErr(l_debug_info_ptr) == APL_SUCCESS)
		{
			
			CO_ProcMonitor(l_ptr_log_file,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_envdatastruct_h);
			CO_FreeErrLst(&l_debug_info_ptr);

		}

		CO_ProcMonitor(l_ptr_log_file,"FAILURE from Deletion of Expired Bonds program \n",NULL,&l_intl_envdatastruct_h);

		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		APL_GOBACK_FAIL	
	}
	else
	{
		int_l_flg = 0;

		CO_Proc_Exit(argv,l_ptr_log_file,&l_debug_info_ptr,int_l_flg);

		if (CO_ChkErr(l_debug_info_ptr) == APL_SUCCESS)
		{
			
			CO_ProcMonitor(l_ptr_log_file,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_envdatastruct_h);
			CO_FreeErrLst(&l_debug_info_ptr);

		}

		CO_ProcMonitor(l_ptr_log_file,"SUCCESS from Deletion of Expired Bonds program \n",NULL,&l_intl_envdatastruct_h);

		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		APL_GOBACK_SUCCESS
	}

	RETURN_SUCCESS	: 
	{
		fclose(l_ptr_ini_file);
	   return(0);
	}

	RETURN_FAILURE	: 
	{
		fclose(l_ptr_ini_file);
  		return(-1);	
	}
}



int EOM_Mod_ExpBondDel(char **argv,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca  			sqlca;
	char						h_sys_dt[APL_DATE_LEN] = APL_NULL_STRING;
	char						h_instr_code[APL_INSTRUMENTCODE_LEN];
	short						i_instr_code;
	char						h_instr_name[131];
	short						i_instr_name;
	char						h_mature_dt[APL_DATE_LEN];
	short						i_mature_dt;
	char						h_access_stamp[APL_DATE_LEN];
	short						i_access_stamp;
	int						int_retval;
	FILE						*l_del_exp_bond_rpt_file = NULL;
	FILE						*l_notdel_exp_bond_rpt_file = NULL;
	int						i;
	char						chr_l_buf[BUFFER_LEN];
	INTL_ENV_DATA_STRUCT_H	l_intl_envdatastruct_h;
	int						int_l_flg = 0;
	int						int_l_not_del_count = 0;
	int 						int_l_evt_cp_rv_count = 0; 

	EXEC SQL VAR h_instr_code IS STRING;
	EXEC SQL VAR h_instr_name IS STRING;
	EXEC SQL VAR h_mature_dt IS STRING;
	EXEC SQL VAR h_access_stamp IS STRING;
	
	CO_ProcMonitor(p_ptr_log_file,"Entered processtion EOM_Mod_ExpBondDel \n",NULL,NULL);

	memset(&l_intl_envdatastruct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H));
	
	sqlca.sqlcode = 0;

	if (CO_RtvSysDtTime(h_sys_dt, l_debug_info_ptr) != APL_SUCCESS)
	{
		
		 return(APL_FAILURE);
	}

	

	int_retval = CO_Rtv_RptFileName("DE","Deleted Expired Bonds Report",80,argv[5],argv,&l_del_exp_bond_rpt_file,l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		return(APL_FAILURE);
	}

	

	int_retval = EOM_Prnt_ExpBondDelRptHdr(l_del_exp_bond_rpt_file,p_ptr_log_file,l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		return(APL_FAILURE);
	}

	sleep(2);
	
	int_retval = CO_Rtv_RptFileName("NE","Not Deleted Expired Bonds Report",80,argv[5],argv,&l_notdel_exp_bond_rpt_file,l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		return(APL_FAILURE);
	}
	
	

	int_retval = EOM_Prnt_ExpBondNonDelRptHdr(l_notdel_exp_bond_rpt_file,p_ptr_log_file,l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		return(APL_FAILURE);
	}

	EXEC SQL DECLARE InstrurityRecs CURSOR FOR
		SELECT instr_code,instr_name,MATURE_DT,access_stamp FROM MT_INSTRUMENT
		WHERE (MATURE_DT < :h_sys_dt)
		FOR UPDATE OF access_stamp;

	EXEC SQL OPEN InstrurityRecs;

	IS_ANY_ORA_ERROR

	for(;;)
	{
		EXEC SQL FETCH InstrurityRecs INTO :h_instr_code:i_instr_code,:h_instr_name:i_instr_name,:h_mature_dt:i_mature_dt,:h_access_stamp:i_access_stamp;

		IS_ANY_ORA_ERROR

		if (APL_ZERO_RESULT_SET)
			break;
		
		

		strcpy(l_intl_envdatastruct_h.usr,"SYSTEM1");

		
		
		
 		
		
		int_retval = EOM_Rtv_CP_RV_Evt(h_instr_code,p_ptr_log_file,&int_l_evt_cp_rv_count,													l_debug_info_ptr);



		if (int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL

		if (int_l_evt_cp_rv_count == 0)
			strcpy(l_intl_envdatastruct_h.h_mode,APL_FUNC_FREEZE);		
		else
		
			strcpy(l_intl_envdatastruct_h.h_mode,APL_FUNC_DELETE);

		
		int_retval = MT_Mod_InstrOth(h_instr_code,h_access_stamp,&l_intl_envdatastruct_h,l_debug_info_ptr);
		if (int_retval != APL_SUCCESS)
		{
			IS_ANY_ERROR_FATAL

			int_l_flg = 1;
		
			int_l_not_del_count = int_l_not_del_count + 1;

			fprintf(l_notdel_exp_bond_rpt_file, "%-18s%-48s%-22s \n\n",h_instr_code,h_instr_name,h_mature_dt);

			CO_ProcMonitor(p_ptr_log_file,APL_NULL_STRING,l_debug_info_ptr,NULL);
			*l_debug_info_ptr = NULL;

			continue;
		}

		

		strcpy(l_intl_envdatastruct_h.usr,APL_USER_SYSTEM);
		strcpy(l_intl_envdatastruct_h.h_mode,APL_FUNC_AUTHORISE);

		
		int_retval = CR_Rtv_InstrChrVal(h_instr_code,"access_stamp",h_access_stamp,l_debug_info_ptr);
		if (int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL
		
		
		int_retval = MT_Mod_InstrOth(h_instr_code,h_access_stamp,&l_intl_envdatastruct_h,l_debug_info_ptr);
		if (int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		
		if (int_l_evt_cp_rv_count == 0) 
			 sprintf(chr_l_buf,"Instrurity %s successfully freezed \n",h_instr_code);
		else
		
			sprintf(chr_l_buf,"Instrurity %s successfully deleted \n",h_instr_code);
		CO_ProcMonitor(p_ptr_log_file,chr_l_buf,NULL,NULL);
		
		fprintf(l_del_exp_bond_rpt_file, "%-18s%-48s \n\n",h_instr_code,h_instr_name);
	}

	EXEC SQL CLOSE InstrurityRecs;

	if (sqlca.sqlerrd[2] == 0)
	{
		fprintf(l_notdel_exp_bond_rpt_file,"               ---No instrument expired/matured---     \n");
		fprintf(l_del_exp_bond_rpt_file,"    ---No instrument expired/matured---     \n");
	}
	else 
	{
		if (int_l_flg == 0)
		{
			
      if (int_l_evt_cp_rv_count == 0) 
       fprintf(l_notdel_exp_bond_rpt_file,"               ---No expired instrument pending for freeze---     \n");
		else
      
			fprintf(l_notdel_exp_bond_rpt_file,"               ---No instrument pending for deletion---     \n");
		}

   	if (sqlca.sqlerrd[2] == int_l_not_del_count)
		{
			 if (int_l_evt_cp_rv_count == 0) 
       			fprintf(l_del_exp_bond_rpt_file,"               ---No expired instrument ---     freezed\n");
      	else
      	
				fprintf(l_del_exp_bond_rpt_file,"    ---No instrument deleted---     \n");
		}
	}

	

	fprintf(l_del_exp_bond_rpt_file,"\n");
	fprintf(l_notdel_exp_bond_rpt_file,"\n");

	for(i=0;i<135;i++)
		fprintf(l_del_exp_bond_rpt_file,"-");
	
	for(i=0;i<135;i++)
		fprintf(l_notdel_exp_bond_rpt_file,"-");

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		

		int_retval = CO_Proc_RptClose(l_del_exp_bond_rpt_file,l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
			return(APL_FAILURE);
		
		int_retval = CO_Proc_RptClose(l_notdel_exp_bond_rpt_file,l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
			return(APL_FAILURE);
		
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion EOM_Mod_ExpBondDel with SUCCESS \n",NULL,NULL);
		
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		

		int_retval = CO_Proc_RptClose(l_del_exp_bond_rpt_file,l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
			return(APL_FAILURE);
		
		int_retval = CO_Proc_RptClose(l_notdel_exp_bond_rpt_file,l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
			return(APL_FAILURE);
		
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion EOM_Mod_ExpBondDel with FAILURE \n",NULL,NULL);
		
		return(APL_FAILURE);
	}
}

 
 
 int CO_DB_Connection_D(char *p_username,char *p_passwd,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca    sqlca;

	CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CO_DB_Connection_D \n",NULL,NULL);
	sqlca.sqlcode = 0;

	EXEC SQL CONNECT :p_username IDENTIFIED BY :p_passwd;

	if (sqlca.sqlcode != 0)
		APL_GOBACK_FAIL

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CO_DB_Connection_D successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CO_DB_Connection_D with failure \n",NULL,NULL);

		return(APL_FAILURE);

	}
}


 
 int CO_Proc_Exit(char **argv,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr,int p_flg)
 {
	struct sqlca    sqlca;
	char				 chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CO_Proc_Exit \n",NULL,NULL);
	sqlca.sqlcode = 0;
	
	if (p_flg == 0)
	{
		

		if (CO_ChkErr(*l_debug_info_ptr) != APL_SUCCESS)
		{
			memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
			sprintf(chr_l_buf,"Finished Deletion of Expired/Matured Bonds");

			EXEC SQL UPDATE SYS_BATCHPROC
			SET stat_det = :chr_l_buf,
				 status = 'completed'
			WHERE process_name = :argv[0]
			AND   proc_init = :argv[1]
			AND STARTDATE = :argv[2]
			AND status = 'started';

			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
		}

		EXEC SQL COMMIT WORK RELEASE;

		CO_ProcMonitor(p_ptr_log_file,"Work Committed \n",NULL,NULL);
	}
	else if (p_flg == 1)
	{
		EXEC SQL ROLLBACK WORK RELEASE;

		CO_ProcMonitor(p_ptr_log_file,"Rollback done \n",NULL,NULL);
	}

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_Exit successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_Exit with failure \n",NULL,NULL);

		return(APL_FAILURE);

	}
}


 
 int CO_Proc_BtchLock(char **argv,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca    sqlca;
   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;

EXEC SQL VAR chr_g_restart_data is string;


	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CO_Proc_BtchLock \n",NULL,NULL);
	
	sqlca.sqlcode = 0;

	EXEC SQL SELECT processing_status INTO :chr_g_restart_data:g_restart_data_i
	FROM SYS_BATCHPROC
	WHERE process_name = :argv[0]
	AND   proc_init = :argv[1]
	AND STARTDATE = :argv[2]
	AND status = 'started'
	FOR UPDATE OF processing_status,status;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_BtchLock successfully \n",NULL,NULL);
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_BtchLock with failure \n",NULL,NULL);
		return(APL_FAILURE);

	}
}


 
 int EOM_Prnt_ExpBondDelRptHdr(FILE *p_del_exp_bond_rpt_file,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca    sqlca;
	char				 chr_l_sys_date[9];
	int				 i;
	char				 chr_l_corp_name[41];
	short				 i_ca_clr_name;

	EXEC SQL VAR chr_l_sys_date IS STRING;
	EXEC SQL VAR chr_l_corp_name IS STRING;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion EOM_Prnt_ExpBondDelRptHdr\n",NULL,NULL);

	sqlca.sqlcode = 0;

	EXEC SQL SELECT TO_CHAR(SYS_DATE,'DD/MM/YY')
	INTO :chr_l_sys_date
	FROM PRO_SYS_DATE;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_DATE_NOT_SET,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	EXEC SQL SELECT ca_identname
	INTO :chr_l_corp_name:i_ca_clr_name
	FROM MT_COMMON_SYS_PARAMS;
	
	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_DATE_NOT_SET,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	fprintf(p_del_exp_bond_rpt_file,"\n");

	for(i=0;i<135;i++)
		fprintf(p_del_exp_bond_rpt_file,"-");

	
	fprintf(p_del_exp_bond_rpt_file,"\n%s      DELETED/FROZEN EXPIRED BONDS REPORT                      \n\n",chr_l_sys_date);
	
	fprintf(p_del_exp_bond_rpt_file,"                   %s\n\n",chr_l_corp_name);
	
	fprintf(p_del_exp_bond_rpt_file,"            Deleted Expired Bonds Details \n\n");

	for(i=0;i<135;i++)
		fprintf(p_del_exp_bond_rpt_file,"-");
	
	fprintf(p_del_exp_bond_rpt_file,"\n\nInstrurity Code     Instrurity Description                            \n\n");

	for(i=0;i<135;i++)
		fprintf(p_del_exp_bond_rpt_file,"-");
	
	fprintf(p_del_exp_bond_rpt_file,"\n");

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion EOM_Prnt_ExpBondDelRptHdr successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion EOM_Prnt_ExpBondDelRptHdr with failure \n",NULL,NULL);
		return(APL_FAILURE);

	}
}


 
 int EOM_Prnt_ExpBondNonDelRptHdr(FILE *p_notdel_exp_bond_rpt_file,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca    sqlca;
	char				 chr_l_sys_date[9];
	int				 i;
	char				 chr_l_corp_name[41];
	short				 i_ca_clr_name;

	EXEC SQL VAR chr_l_sys_date IS STRING;
	EXEC SQL VAR chr_l_corp_name IS STRING;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion EOM_Prnt_ExpBondNonDelRptHdr\n",NULL,NULL);

	sqlca.sqlcode = 0;

	EXEC SQL SELECT TO_CHAR(SYS_DATE,'DD/MM/YY')
	INTO :chr_l_sys_date
	FROM PRO_SYS_DATE;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_DATE_NOT_SET,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	EXEC SQL SELECT ca_identname
	INTO :chr_l_corp_name:i_ca_clr_name
	FROM MT_COMMON_SYS_PARAMS;
	
	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_DATE_NOT_SET,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	fprintf(p_notdel_exp_bond_rpt_file,"\n");

	for(i=0;i<135;i++)
		fprintf(p_notdel_exp_bond_rpt_file,"-");

	
	

	fprintf(p_notdel_exp_bond_rpt_file,"\n%s      NOT DELETED/NOT FROZEN EXPIRED BONDS REPORT                      \n\n",chr_l_sys_date);
	
	fprintf(p_notdel_exp_bond_rpt_file,"                      %s\n\n",chr_l_corp_name);
	
	fprintf(p_notdel_exp_bond_rpt_file,"            Not Deleted Expired Bonds Details \n\n");

	for(i=0;i<135;i++)
		fprintf(p_notdel_exp_bond_rpt_file,"-");
	
	fprintf(p_notdel_exp_bond_rpt_file,"\n\nInstrurity Code     Instrurity Description                            Maturity Date         \n\n");

	for(i=0;i<135;i++)
		fprintf(p_notdel_exp_bond_rpt_file,"-");
	
	fprintf(p_notdel_exp_bond_rpt_file,"\n");

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion EOM_Prnt_ExpBondNonDelRptHdr successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion EOM_Prnt_ExpBondNonDelRptHdr with failure \n",NULL,NULL);

		return(APL_FAILURE);

	}
}



int EOM_Rtv_CP_RV_Evt(char *p_instr_code,FILE *p_ptr_log_file,int *p_evt_cp_rv_count,DEBUG_INFO_STRUCT_H **l_debug_info_ptr
)
{
	 CO_ProcMonitor(p_ptr_log_file,"Entered processtion EOM_Rtv_CP_RV_Evt\n",NULL,NULL);

	sqlca.sqlcode = 0;

	EXEC SQL SELECT COUNT(*) 
	INTO :p_evt_cp_rv_count 
	FROM CAEVENT 
	WHERE instr_code = :p_instr_code AND
			status != 'CP' AND
			status !='RV';

	IS_ANY_ORA_ERROR

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
   	CO_ProcMonitor(p_ptr_log_file,"Leaving processtion  EOM_Rtv_CP_RV_Evt successfully \n",NULL,NULL); 
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		 CO_ProcMonitor(p_ptr_log_file,"Leaving processtion  EOM_Rtv_CP_RV_Evt with failure\n",NULL,NULL);   
      return(APL_FAILURE);
	}
}

