


   
   
   
   
   
   
   
   
   
   
   
   
	


#include "IV_Control_A.h"
#include "CO_HostStructdef.h"
#define	GPSEP		"}"


EXEC SQL INCLUDE SQLCA.H;

 
int B_BlGPSSGenFn(char						**argv,
						char						*chr_p_billdt,
						char						*p_bldetdir,
						FILE						*fl_techlog,
					   FILE						*fl_userlog,
						INTL_ENV_DATA_STRUCT_H 	*p_intlenv_data_struct_h,
						DEBUG_INFO_STRUCT_H			**l_debug_info_ptr)
{
	
	int		int_l_fetch_cnt											= 0;
	int		int_retstat												= 0;
	int		int_l_retstat											= 0;
	int		int_retminfee											= 0;
	int		int_num													= 0;
	double	l_ae_rate = 0.0,l_convminimumfee = 0.0;

	char		**temp;
	FILE		*fl_gpss												= NULL;	
	char		chr_l_flname[PATH_LENGTH]							= APL_NULL_STRING;
	char		chr_l_path_flname[PATH_LENGTH]						= APL_NULL_STRING;
	char     chr_l_buf[BUFFER_LEN]     							= APL_NULL_STRING;	
	char     chr_l_cod_convminfee[20]			     				= APL_NULL_STRING;	

	EXEC SQL BEGIN DECLARE SECTION;

	struct sqlca sqlca;
	
	SYS_IVCONTROLPARAM_STRUCT		l_sys_ivcntl_param_struct;				
	IV_CLIENTSETUP_STRUCT		l_iv_clt_setup_struct;
	IV_GPSS_STRUCT_H				l_iv_gpss_struct_h;
	IV_GPSS_STRUCT_H				l_iv_pregpss_struct_h;

	double	dbl_h_txn_vol											= 0.0;
	double	h_cm_amount												= 0.0;
	double	h_fx_rt												= 0.0;
	double	h_tot_txn_amount										= 0.0;
	double	h_tot_sfk_amount										= 0.0;
	double	h_tot_oth_amount										= 0.0;
	double	dbl_h_tot_ca_fee										= 0.0;

	double	h_minimum_fee_adj										= 0.0;
	double	dbl_h_nil_fee_adj										= 0.0;
	double	dbl_h_max_fee_adj										= 0.0;
	int		int_h_bselclients_count								= 0;
	

	long	int 	int_h_serv_code											= 0;
	char		h_dl_client[APL_CLIENT_LENGTH]						= APL_NULL_STRING;	
	char		chr_h_preclient[APL_CLIENT_LENGTH]					= APL_NULL_STRING;	
	char		h_clnt_clr_name[66]											= APL_NULL_STRING;
	char		h_mstclt[APL_CLIENT_LENGTH]						= APL_NULL_STRING;
	char		h_billdate[APL_DATE_LEN]							= APL_NULL_STRING;
	char		chr_h_bl_prv_dt[APL_DATE_LEN]							= APL_NULL_STRING;
	char		chr_h_system_date[APL_DATE_LEN]					= APL_NULL_STRING;

	short 	i_dl_client											= 0;
	short		i_txn_vol											= 0;
	short		i_cm_amount												= 0;
	short		i_mstclt												= 0;
	short		i_clnt_clr_name												= 0;
	short		i_service_cd											= 0;
	short		i_min_fee_adj										= 0;
	short		i_max_fee_adj										= 0;
	short		i_nil_fee_adj										= 0;
	INTL_REPT_STRUCT_H	*l_intl_rept_struct_ha								= NULL;

	EXEC SQL VAR chr_h_bl_prv_dt	            IS STRING;
	EXEC SQL VAR h_billdate		            IS STRING;
	EXEC SQL VAR h_dl_client 						IS STRING;	
	EXEC SQL VAR h_clnt_clr_name							IS STRING;	
	EXEC SQL VAR h_mstclt						IS STRING;	
	EXEC SQL VAR l_iv_gpss_struct_h.bl_frm_date	IS STRING;	
	EXEC SQL VAR l_iv_gpss_struct_h.bl_to_date		IS STRING;	

	EXEC SQL END DECLARE SECTION;

	sqlca.sqlcode = 0;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"\nInside B_BlGPSSGenFn processtion\n",NULL,NULL);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf,"The GPSS File Gen Flag is %s\n",argv[9]);
	   CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
	}
	
	memset(&l_sys_ivcntl_param_struct, NULL, sizeof(SYS_IVCONTROLPARAM_STRUCT));
	memset(&l_iv_clt_setup_struct, NULL, sizeof(IV_CLIENTSETUP_STRUCT));
	memset(&l_iv_gpss_struct_h, NULL, sizeof(IV_GPSS_STRUCT_H));
	memset(&l_iv_pregpss_struct_h, NULL, sizeof(IV_GPSS_STRUCT_H));
	l_intl_rept_struct_ha	=(INTL_REPT_STRUCT_H *)calloc(1, sizeof(INTL_REPT_STRUCT_H));
	APL_MALLOC_FAIL(l_intl_rept_struct_ha);

		
	
	
	
	memset(&l_sys_ivcntl_param_struct, NULL, sizeof(SYS_IVCONTROLPARAM_STRUCT));

   if (APL_FAILURE == IV_Rtv_IVCNTLPARAM(&l_sys_ivcntl_param_struct, 
													&int_retstat,
                                       l_debug_info_ptr))
   {
      if (int_retstat == IV_NO_DATA_FOUND_ERR)
      {
         fprintf(fl_userlog,"Billing Control Parameters Have Not Been Set Up\n");
         CO_InsertErr(l_debug_info_ptr,
                        ERR_BILLCNTRL_PARAM_NOTFND,
                        APL_NULL_STRING,
                        APL_NULL_STRING,
                        APL_NULL_STRING,
                        __LINE__,
                        __FILE__);
         APL_GOBACK_FAIL
      }
      if (int_retstat == IV_COLUMN_NULL_ERR)
      {
         if ( (l_sys_ivcntl_param_struct.generate_ind == ' ') || 
				  (l_sys_ivcntl_param_struct.generate_ind == 'N') )
         {
            fprintf(fl_userlog,"Bills not generated .Cannot Run GPSS File Generation\n");
            CO_InsertErr(l_debug_info_ptr,
                           ERR_BILLS_NOT_GENERATED,
									APL_NULL_STRING,
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           __LINE__,
                           __FILE__);
            APL_GOBACK_FAIL
         }
		}	
	}

	

	EXEC SQL SELECT NVL( COUNT(*), 0)
	INTO :int_h_bselclients_count
	FROM IV_SELCLIENT;

	IS_ANY_ORA_ERROR

	if (l_sys_ivcntl_param_struct.generate_ind != 'Y')
   {
      fprintf(fl_userlog,"Bills Not Generated .Cannot Run Accounting Entries \n");
      CO_InsertErr(l_debug_info_ptr,
                     ERR_BILLS_NOT_GENERATED,
                     APL_NULL_STRING,
                     APL_NULL_STRING,
                     APL_NULL_STRING,
                     __LINE__,
                     __FILE__);
      APL_GOBACK_FAIL
   }

	if (int_h_bselclients_count != 0)
	{
      fprintf(fl_userlog,"Bill Regeneration Not Complete.Please Restart Bill Generation\n");
      CO_InsertErr(l_debug_info_ptr,
                     ERR_BILLREGN_NOTCOMPLETE,
                     APL_NULL_STRING,
                     APL_NULL_STRING,
                     APL_NULL_STRING,
                     __LINE__,
                     __FILE__);
      APL_GOBACK_FAIL
   }
		
		
	

	

	if (APL_FAILURE == CO_SplitStr( argv[9],
                                    ',',
                                    &int_num,
                                    &temp) )
   {
      fprintf(fl_userlog,"Failed To Split Input String Coming In From Front End\n");
      APL_GOBACK_FAIL;
   }

   if (int_num ==0 )
   {
      fprintf(fl_userlog,"No Parameters were passed to the processtion\n");
      APL_GOBACK_FAIL
   }	

	if (int_num == 1)
	{
		strcpy(h_billdate,temp[0]);
		strcpy(h_dl_client,APL_NULL_STRING);	
	}
	else 
	{
		strcpy(h_billdate,temp[0]);
		strcpy(h_dl_client,temp[1]);	
	}

	

	if (!strcmp(h_billdate, APL_NULL_STRING))
	{
		strcpy(h_billdate,l_sys_ivcntl_param_struct.b_upto_date);
		strcpy(chr_p_billdt,h_billdate);
		strcpy(chr_h_bl_prv_dt,l_sys_ivcntl_param_struct.b_prev_date);
	}
	else
	{
		EXEC SQL SELECT 
			ADD_MONTHS(:h_billdate, -1)
		INTO :chr_h_bl_prv_dt
		FROM DUAL;
		
		IS_ANY_ORA_ERROR

		if(strcmp(h_billdate,l_sys_ivcntl_param_struct.b_upto_date) == 0 \
                                          && strlen(h_dl_client) == 0)
		{
			strcpy(chr_p_billdt,h_billdate);
		}
	}

	

	if (l_sys_ivcntl_param_struct.b_gen_ind == 'Y')
	{
		if(!strcmp(	h_dl_client , APL_NULL_STRING))
		{
			fprintf(fl_userlog,"Account Not Passed\n"); 
			APL_GOBACK_FAIL
		}
		else
		{
			
			if (APL_FAILURE == CO_Chk_AccValid(h_dl_client,
													 'Y',
													 'C',	
													 APL_NULL_CHAR,
													 APL_NULL_CHAR,
													 APL_NULL_CHAR,
													 APL_NULL_CHAR,
													 APL_NULL_CHAR,
													 APL_NULL_CHAR,
													 l_debug_info_ptr))
			{	
				IS_ANY_ERROR_FATAL
				fprintf(fl_userlog,"Invalid Account %s:\n",h_dl_client);
				APL_GOBACK_FAIL
			}
		}
	}
	else
	{
		if( strcmp(h_dl_client , APL_NULL_STRING))
		{
			fprintf(fl_userlog,"Accounts Cannot be passed when File is Not Generated for the full bill\n");
			APL_GOBACK_FAIL
		}
	}
	
	if (!strcmp(h_dl_client,APL_NULL_STRING))
	{	
		
		if (APL_FAILURE == B_BlNameGPSSFlFn(h_billdate,
														chr_l_flname,
														l_debug_info_ptr) )
		{
			fprintf(fl_userlog,"Failed To Name The GPSS File\n");
			APL_GOBACK_FAIL
		}
	}
	else
	{
		strcpy(chr_l_flname,h_dl_client);
		strcat(chr_l_flname,".TXT");	 
	}

	memset(chr_l_path_flname, APL_NULL_CHAR, PATH_LENGTH);
	strcpy(chr_l_path_flname, p_bldetdir);
	strcat(chr_l_path_flname, chr_l_flname);

	if (	(fl_gpss = fopen(chr_l_path_flname,"w")) == (FILE*)NULL) 
	{
		CO_InsertErr(l_debug_info_ptr,
							ERR_FILE_NOTFND,
							"GPSS FILE",
                     APL_NULL_STRING,
							APL_NULL_STRING,
                     __LINE__,
							__FILE__);
		APL_GOBACK_FAIL
	}

			  

			  strcpy(l_intl_rept_struct_ha->report_name, chr_l_path_flname+strlen(p_bldetdir));
			  strcpy(l_intl_rept_struct_ha->report_desc, APL_HOFF_FILE_DESC);
			  strcpy(l_intl_rept_struct_ha->report_date, argv[2]);
			  l_intl_rept_struct_ha->report_width = 100;
			  strcpy(l_intl_rept_struct_ha->task_desc, p_intlenv_data_struct_h->processtion);
			  strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
			  strcpy(l_intl_rept_struct_ha->usr, p_intlenv_data_struct_h->usr);

			  

			  if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))
			  {
				  APL_GOBACK_FAIL
			  }


	

	if (APL_FAILURE == B_BlGPSSHdrFn(fl_gpss,
												chr_l_flname,
												l_debug_info_ptr) )
	{
		fprintf(fl_userlog,"Failed To Print The Header Of The GPSS Hand-off File\n");
		APL_GOBACK_FAIL
	}

	

	
	
	 
	if (!strcmp(h_dl_client, APL_NULL_STRING))
	{
		EXEC SQL DECLARE GPSSCUR CURSOR FOR
		SELECT a.CLIENT,
				 ROUND(a.COMM_AMT,d.DEC_LEN),
				 ROUND(a.minimumfee_adj,d.DEC_LEN),
				 ROUND(a.nil_fees_adj,d.DEC_LEN),
				 ROUND(a.maximum_fee_adj,d.DEC_LEN),
				 a.SERVICE_CD,
				 c.CLN_NAME, 
				 a.master_clt 
		FROM IV_SERVICE_CHRG a, IV_CLIENTSETUP b, MT_CLIENT c,DL_CURRENCY d
		WHERE a.CLIENT = b.CLIENT
		AND   b.CLIENT = c.CLN_CODE
		AND   a.DATEOF_BILLING = :h_billdate
		AND	a.B_CCYCD = d.CURRENCY_CD
		AND  ((a.CLIENT =  a.MASTER_CLT   AND a.CONS_FLAG = 'C') 
		OR   (a.CLIENT != a.MASTER_CLT   AND a.CONS_FLAG = 'I'))
		AND   b.B_GEN_IND   = 'S'
		ORDER BY a.CLIENT, a.SERVICE_CD;

		EXEC SQL OPEN GPSSCUR;
		IS_ANY_ORA_ERROR

		for(;;)
		{
			memset(h_dl_client,APL_NULL_CHAR,APL_CLIENT_LENGTH);
			memset(h_mstclt,APL_NULL_CHAR,APL_CLIENT_LENGTH);
			memset(h_clnt_clr_name,APL_NULL_CHAR,66);
			h_cm_amount = 0;
			h_minimum_fee_adj = 0;
			dbl_h_nil_fee_adj = 0;
			dbl_h_max_fee_adj = 0;
			int_h_serv_code = 0;

			EXEC SQL FETCH GPSSCUR INTO
						:h_dl_client:i_dl_client,
						:h_cm_amount:i_cm_amount,
						:h_minimum_fee_adj:i_min_fee_adj,
						:dbl_h_nil_fee_adj:i_nil_fee_adj,
						:dbl_h_max_fee_adj:i_max_fee_adj,
						:int_h_serv_code:i_service_cd,
						:h_clnt_clr_name:i_clnt_clr_name,
						:h_mstclt:i_mstclt;
			IS_ANY_ORA_ERROR

			if (APL_ZERO_RESULT_SET)
			{
				if (int_l_fetch_cnt == 0)
				{
					CO_InsertErr(l_debug_info_ptr,
										ERR_REC_NOTFND,
										APL_NULL_STRING,
										APL_NULL_STRING,
										APL_NULL_STRING,
										__LINE__,
										__FILE__);
					fprintf(fl_userlog,"No Records For Which GPSS File Can Be Generated\n");
					APL_GOBACK_FAIL
				}
				else
				{
						

					l_iv_pregpss_struct_h.h_total_deal_fee = l_iv_pregpss_struct_h.h_deal_fee; 
					l_iv_pregpss_struct_h.h_total_deal_fee += l_iv_pregpss_struct_h.h_deal_adm_fee; 
					l_iv_pregpss_struct_h.h_total_deal_fee += l_iv_pregpss_struct_h.h_deal_amd_fee; 
					l_iv_pregpss_struct_h.h_total_deal_fee += l_iv_pregpss_struct_h.h_deal_rep_fee; 
					l_iv_pregpss_struct_h.h_total_deal_fee += l_iv_pregpss_struct_h.h_deal_lat_fee; 
					l_iv_pregpss_struct_h.h_total_deal_fee += l_iv_pregpss_struct_h.h_deal_del_fee; 
					l_iv_pregpss_struct_h.h_total_deal_fee += l_iv_pregpss_struct_h.h_deal_trnar_fee; 
					l_iv_pregpss_struct_h.h_total_deal_fee += l_iv_pregpss_struct_h.h_deal_int_fee;

					l_iv_pregpss_struct_h.h_total_fsfk_fee = l_iv_pregpss_struct_h.h_sfk_fee;
					l_iv_pregpss_struct_h.h_total_fsfk_fee += l_iv_pregpss_struct_h.h_minimum_sfk_fee; 
					l_iv_pregpss_struct_h.h_total_fsfk_fee += l_iv_pregpss_struct_h.h_nil_sfk_fee; 
					l_iv_pregpss_struct_h.h_total_fsfk_fee += l_iv_pregpss_struct_h.h_sfk_adm_fee;

					l_iv_pregpss_struct_h.h_total_cafee = l_iv_pregpss_struct_h.h_fee_cafee; 
					l_iv_pregpss_struct_h.h_total_cafee += l_iv_pregpss_struct_h.pymt_ca_fee;
					l_iv_pregpss_struct_h.h_total_cafee += l_iv_pregpss_struct_h.h_cash_div_fee; 
					l_iv_pregpss_struct_h.h_total_cafee += l_iv_pregpss_struct_h.h_bond_intr_fee;

					if (APL_FAILURE == B_TotOthCmAmtFn(chr_h_preclient,
																  &h_tot_oth_amount,
																  h_billdate,
																  l_debug_info_ptr) )
					{
							fprintf(fl_userlog,"Failed To Select The Total Other Services Comm. Amount For Account %s\n",chr_h_preclient);
							APL_GOBACK_FAIL
					}
					l_iv_pregpss_struct_h.h_other_fee = h_tot_oth_amount;

					

					

						l_iv_pregpss_struct_h.prv_os_amount	= l_iv_clt_setup_struct.total_osamount;

					
				
					l_iv_pregpss_struct_h.h_total_fee = l_iv_pregpss_struct_h.h_total_deal_fee;
					l_iv_pregpss_struct_h.h_total_fee += l_iv_pregpss_struct_h.h_total_fsfk_fee; 
					l_iv_pregpss_struct_h.h_total_fee += l_iv_pregpss_struct_h.h_total_cafee; 
					l_iv_pregpss_struct_h.h_total_fee += l_iv_pregpss_struct_h.h_over_bill; 
					l_iv_pregpss_struct_h.h_total_fee += l_iv_pregpss_struct_h.h_under_bill; 
					l_iv_pregpss_struct_h.h_total_fee +=  l_iv_pregpss_struct_h.h_spl_bill;
					l_iv_pregpss_struct_h.h_total_fee +=  l_iv_pregpss_struct_h.h_custody_tax;

					
						
					l_iv_pregpss_struct_h.total_osamount = (l_iv_clt_setup_struct.total_osamount +
															  l_iv_pregpss_struct_h.h_total_fee );	
					
						
					if (APL_FAILURE == B_BlGPSSDetFn(fl_gpss,
																l_iv_pregpss_struct_h,
																l_debug_info_ptr) )
					{
						fprintf(fl_userlog,"Failed To Print the Details To the GPSS File\n");
						APL_GOBACK_FAIL	
					}	
					fprintf(APL_OUT_FILE,"Account For Which Gpss File Last Generated Is:%s\n",h_dl_client);
					fprintf(APL_OUT_FILE,"No More Accounts To Process\n");
					break;
				}
			}
			int_l_fetch_cnt++;
				
			

			if (int_l_fetch_cnt == 1 )	
			{
				strcpy(l_iv_gpss_struct_h.client, h_dl_client);
				strcpy(l_iv_gpss_struct_h.clnt_name, h_clnt_clr_name);	
				strcpy(l_iv_gpss_struct_h.master_clt, h_mstclt);
		
				int_retstat = IV_SUCCESS;

				if(APL_FAILURE == IV_Rtv_CNameAcc(h_mstclt, 
															 		  l_iv_gpss_struct_h.mst_clnt_clr_name,
																	  &int_retstat,
															 		  l_debug_info_ptr))
				{
					if (int_retstat == IV_CRITCAL_ERROR_IND)
					{
        		 		CO_InsertErr(l_debug_info_ptr,
            	   	            DB_ERR_NO,
               	   	         "CACCOUNT",
           								APL_NULL_STRING,
                     	   	   APL_NULL_STRING,
                        	   	__LINE__,
                           		__FILE__);
            		APL_GOBACK_FAIL
          		}
         		if (int_retstat == IV_NO_DATA_FOUND_ERR)
         		{
         			fprintf(fl_userlog,"Account Not Found :%s\n",h_mstclt);
           	 		CO_InsertErr(l_debug_info_ptr,
           	 							ERR_ACCNOT_FND,
            							h_mstclt,
            							APL_NULL_STRING,
            							APL_NULL_STRING,
            							__LINE__,
            							__FILE__);
						APL_GOBACK_FAIL
					}
				}
		
				int_retstat = IV_SUCCESS;
				if (APL_FAILURE == B_SelGFCPRODTYPFn(h_mstclt,
															 		l_iv_gpss_struct_h.h_uniq_gcustody_id,
																	l_iv_gpss_struct_h.clt_prd_code,
															 		&int_retstat,
															 		l_debug_info_ptr))
				{	
					if (int_retstat == IV_CRITCAL_ERROR_IND)
					{
        		 		CO_InsertErr(l_debug_info_ptr,
         	  	                DB_ERR_NO,
            		               "CACCOUNT",
           								APL_NULL_STRING,
                  		         APL_NULL_STRING,
                     		      __LINE__,
                        		   __FILE__);
           			APL_GOBACK_FAIL
          		}
         		if (int_retstat == IV_NO_DATA_FOUND_ERR)
         		{
         			fprintf(fl_userlog,"Account Not Found :%s\n",h_mstclt);
           	 		CO_InsertErr(l_debug_info_ptr,
           	 							ERR_ACCNOT_FND,
            							h_mstclt,
            							APL_NULL_STRING,
            							APL_NULL_STRING,
            							__LINE__,
            							__FILE__);
						APL_GOBACK_FAIL
					}
				}
				
				EXEC SQL SELECT TO_CHAR(TO_DATE(:h_billdate,'dd/chr_mm/chr_yyyy hh:mi:ss'),'yyyymmdd')	
				INTO :l_iv_gpss_struct_h.bl_to_date FROM DUAL;
				EXEC SQL SELECT TO_CHAR(TO_DATE(:chr_h_bl_prv_dt,'dd/chr_mm/chr_yyyy hh:mi:ss'),'yyyymmdd')
				INTO :l_iv_gpss_struct_h.bl_frm_date FROM DUAL;

				
	
				memset(&l_iv_clt_setup_struct,NULL, sizeof(IV_CLIENTSETUP_STRUCT));
				int_retstat = IV_SUCCESS;

				if (APL_FAILURE == IV_Rtv_IVCUSTSETUP(h_dl_client,
																 &l_iv_clt_setup_struct,
																 &int_retstat,
																 l_debug_info_ptr) )
				{	
					if (int_retstat == IV_NO_DATA_FOUND_ERR)
      			{
       				CO_InsertErr(l_debug_info_ptr,
										  	ERR_BILLPARAM_NOTFND, 
										  	h_dl_client,
										  	APL_NULL_STRING,
										  	APL_NULL_STRING,
								  			__LINE__,
								 			__FILE__);
        				APL_GOBACK_FAIL
      			}		
					if (int_retstat == IV_CRITCAL_ERROR_IND)
					{
         			CO_InsertErr(l_debug_info_ptr,
               		            DB_ERR_NO,
                  		         "BCUSTSETUP",
           								APL_NULL_STRING,
                        		   APL_NULL_STRING,
                           		__LINE__,
                           		__FILE__);
            		APL_GOBACK_FAIL
					}
				}	

				strcpy(l_iv_gpss_struct_h.h_bill_ccy, l_iv_clt_setup_struct.b_ccycd);

				l_ae_rate = 0.0;
				if (APL_FAILURE == IV_Proc_ConvToFxFn(l_iv_clt_setup_struct.fees_ccy,
													  l_iv_clt_setup_struct.b_ccycd,
													  g_mt_commonsys_params_struct_h.dom_ccy,
													  chr_p_billdt,&l_ae_rate,
													  &int_l_retstat,l_debug_info_ptr) )
				{
						APL_GOBACK_FAIL
				}
				l_convminimumfee = (l_iv_clt_setup_struct.minimumfee * l_ae_rate);
				int_retminfee = IV_Proc_Round(&l_convminimumfee,
										l_iv_clt_setup_struct.b_ccycd,
										chr_l_cod_convminfee,l_debug_info_ptr);
				if (int_retminfee == 1)
				{
					l_convminimumfee = 0.0;
					sscanf(chr_l_cod_convminfee, "%lf", &l_convminimumfee);
				}
				else
				{
					APL_GOBACK_FAIL
				}

				l_iv_gpss_struct_h.minimum_fee = l_convminimumfee;

				
		
				if (APL_FAILURE == CO_RtvSysDtTime(chr_h_system_date,
																	 l_debug_info_ptr))
				{
					fprintf(fl_userlog,"Failed To Select The System Date\n");
					APL_GOBACK_FAIL
				}

				int_retstat = IV_SUCCESS;
				if (APL_FAILURE == IV_Proc_ConvToFxFn(l_iv_clt_setup_struct.b_ccycd,
														"USD",
														g_mt_commonsys_params_struct_h.dom_ccy,
														chr_h_system_date,
														&h_fx_rt,
														&int_retstat,
														l_debug_info_ptr))
				{
					if (int_retstat == IV_CRITCAL_ERROR_IND)
					{	
						fprintf(fl_userlog,"ExchRt Not Found Btn %s To USD\n",l_iv_clt_setup_struct.b_ccycd);
						APL_GOBACK_FAIL	
					}
				}
		
				l_iv_gpss_struct_h.fx_rt = h_fx_rt;
				l_ae_rate = 0.0;
				if (APL_FAILURE == IV_Proc_ConvToFxFn(l_iv_clt_setup_struct.fees_ccy,
													  l_iv_clt_setup_struct.b_ccycd,
													  g_mt_commonsys_params_struct_h.dom_ccy,
													  chr_p_billdt,&l_ae_rate,
													  &int_l_retstat,l_debug_info_ptr) )
				{
						APL_GOBACK_FAIL
				}
				l_convminimumfee = (l_iv_clt_setup_struct.minimumfee * l_ae_rate);
				int_retminfee = IV_Proc_Round(&l_convminimumfee,
										l_iv_clt_setup_struct.b_ccycd,
										chr_l_cod_convminfee,l_debug_info_ptr);
				if (int_retminfee == 1)
				{
					l_convminimumfee = 0.0;
					sscanf(chr_l_cod_convminfee, "%lf", &l_convminimumfee);
				}
				else
				{
					APL_GOBACK_FAIL
				}
				l_iv_gpss_struct_h.minimum_fee = l_convminimumfee;

				if (APL_FAILURE == B_PopGPSSDetFn( h_dl_client,
														  h_cm_amount,
														  dbl_h_nil_fee_adj,
														  h_minimum_fee_adj,
														  dbl_h_max_fee_adj,
														  h_mstclt,
														  int_h_serv_code,
														  &l_iv_gpss_struct_h,
														  h_billdate,
														  l_debug_info_ptr) )
				{
					fprintf(fl_userlog,"Failed To Populate The Details of GPSS for Account:%s\n",h_dl_client);
					APL_GOBACK_FAIL		
				}
				strcpy(chr_h_preclient,h_dl_client);
			}	
			else if (!strcmp(h_dl_client,chr_h_preclient))
			{
				if (APL_FAILURE == B_PopGPSSDetFn( h_dl_client,
															  h_cm_amount,
															  dbl_h_nil_fee_adj,
															  h_minimum_fee_adj,
															  dbl_h_max_fee_adj,
															  h_mstclt,
															  int_h_serv_code,
															  &l_iv_gpss_struct_h,
															  h_billdate,
															  l_debug_info_ptr) )
				{
					fprintf(fl_userlog,"Failed To Populate The Details of GPSS for Account:%s\n",h_dl_client);
					APL_GOBACK_FAIL		
				}
			} 
			
			if (strcmp(h_dl_client,chr_h_preclient))
			{

				

			l_iv_pregpss_struct_h.h_total_deal_fee = l_iv_pregpss_struct_h.h_deal_fee; 
			l_iv_pregpss_struct_h.h_total_deal_fee += l_iv_pregpss_struct_h.h_deal_adm_fee; 
			l_iv_pregpss_struct_h.h_total_deal_fee += l_iv_pregpss_struct_h.h_deal_amd_fee; 
			l_iv_pregpss_struct_h.h_total_deal_fee += l_iv_pregpss_struct_h.h_deal_rep_fee; 
			l_iv_pregpss_struct_h.h_total_deal_fee += l_iv_pregpss_struct_h.h_deal_lat_fee; 
			l_iv_pregpss_struct_h.h_total_deal_fee += l_iv_pregpss_struct_h.h_deal_del_fee; 
			l_iv_pregpss_struct_h.h_total_deal_fee += l_iv_pregpss_struct_h.h_deal_trnar_fee; 
			l_iv_pregpss_struct_h.h_total_deal_fee += l_iv_pregpss_struct_h.h_deal_int_fee;

			l_iv_pregpss_struct_h.h_total_fsfk_fee = l_iv_pregpss_struct_h.h_sfk_fee;
			l_iv_pregpss_struct_h.h_total_fsfk_fee += l_iv_pregpss_struct_h.h_minimum_sfk_fee; 
			l_iv_pregpss_struct_h.h_total_fsfk_fee += l_iv_pregpss_struct_h.h_nil_sfk_fee; 
			l_iv_pregpss_struct_h.h_total_fsfk_fee += l_iv_pregpss_struct_h.h_sfk_adm_fee;

			l_iv_pregpss_struct_h.h_total_cafee = l_iv_pregpss_struct_h.h_fee_cafee; 
			l_iv_pregpss_struct_h.h_total_cafee += l_iv_pregpss_struct_h.pymt_ca_fee;
			l_iv_pregpss_struct_h.h_total_cafee += l_iv_pregpss_struct_h.h_cash_div_fee; 
			l_iv_pregpss_struct_h.h_total_cafee += l_iv_pregpss_struct_h.h_bond_intr_fee;

			if (APL_FAILURE == B_TotOthCmAmtFn(chr_h_preclient,
														  &h_tot_oth_amount,
														  h_billdate,
														  l_debug_info_ptr) )
			{
					fprintf(fl_userlog,"Failed To Select The Total Other Services Comm. Amount For Account %s\n",chr_h_preclient);
					APL_GOBACK_FAIL
			}
			l_iv_pregpss_struct_h.h_other_fee = h_tot_oth_amount;

			

			

				l_iv_pregpss_struct_h.prv_os_amount	= l_iv_clt_setup_struct.total_osamount;

			
			
				l_iv_pregpss_struct_h.h_total_fee = l_iv_pregpss_struct_h.h_total_deal_fee;
				l_iv_pregpss_struct_h.h_total_fee += l_iv_pregpss_struct_h.h_total_fsfk_fee; 
				l_iv_pregpss_struct_h.h_total_fee += l_iv_pregpss_struct_h.h_total_cafee; 
				l_iv_pregpss_struct_h.h_total_fee += l_iv_pregpss_struct_h.h_over_bill; 
				l_iv_pregpss_struct_h.h_total_fee += l_iv_pregpss_struct_h.h_under_bill; 
				l_iv_pregpss_struct_h.h_total_fee +=  l_iv_pregpss_struct_h.h_spl_bill;
				l_iv_pregpss_struct_h.h_total_fee +=  l_iv_pregpss_struct_h.h_custody_tax;

				
					
				l_iv_pregpss_struct_h.total_osamount = (l_iv_clt_setup_struct.total_osamount +
														  l_iv_pregpss_struct_h.h_total_fee );	
				
					
				if (APL_FAILURE == B_BlGPSSDetFn(fl_gpss,
														   l_iv_pregpss_struct_h,
														   l_debug_info_ptr) )
				{
					fprintf(fl_userlog,"Failed To Print the Details To the GPSS File\n");
					APL_GOBACK_FAIL	
				}	
				
				memset(&l_iv_gpss_struct_h, NULL, sizeof(IV_GPSS_STRUCT_H));

				strcpy(l_iv_gpss_struct_h.client, h_dl_client);
				strcpy(l_iv_gpss_struct_h.clnt_name, h_clnt_clr_name);	
				strcpy(l_iv_gpss_struct_h.master_clt, h_mstclt);
		
				int_retstat = IV_SUCCESS;

				if(APL_FAILURE == IV_Rtv_CNameAcc(h_mstclt, 
															 		  l_iv_gpss_struct_h.mst_clnt_clr_name,
																	  &int_retstat,
															 		  l_debug_info_ptr))
				{
					if (int_retstat == IV_CRITCAL_ERROR_IND)
					{
        		 		CO_InsertErr(l_debug_info_ptr,
            	   	            DB_ERR_NO,
               	   	         "CACCOUNT",
           								APL_NULL_STRING,
                     	   	   APL_NULL_STRING,
                        	   	__LINE__,
                           		__FILE__);
            		APL_GOBACK_FAIL
          		}
         		if (int_retstat == IV_NO_DATA_FOUND_ERR)
         		{
         			fprintf(fl_userlog,"Account Not Found :%s\n",h_mstclt);
           	 		CO_InsertErr(l_debug_info_ptr,
           	 							ERR_ACCNOT_FND,
            							h_mstclt,
            							APL_NULL_STRING,
            							APL_NULL_STRING,
            							__LINE__,
            							__FILE__);
						APL_GOBACK_FAIL
					}
				}
		
				int_retstat = IV_SUCCESS;
				if (APL_FAILURE == B_SelGFCPRODTYPFn(h_mstclt,
															 		l_iv_gpss_struct_h.h_uniq_gcustody_id,
																	l_iv_gpss_struct_h.clt_prd_code,
															 		&int_retstat,
															 		l_debug_info_ptr))
				{	
					if (int_retstat == IV_CRITCAL_ERROR_IND)
					{
        		 		CO_InsertErr(l_debug_info_ptr,
         	  	                DB_ERR_NO,
            		               "CACCOUNT",
           								APL_NULL_STRING,
                  		         APL_NULL_STRING,
                     		      __LINE__,
                        		   __FILE__);
           			APL_GOBACK_FAIL
          		}
         		if (int_retstat == IV_NO_DATA_FOUND_ERR)
         		{
         			fprintf(fl_userlog,"Account Not Found :%s\n",h_mstclt);
           	 		CO_InsertErr(l_debug_info_ptr,
           	 							ERR_ACCNOT_FND,
            							h_mstclt,
            							APL_NULL_STRING,
            							APL_NULL_STRING,
            							__LINE__,
            							__FILE__);
						APL_GOBACK_FAIL
					}
				}
		
				EXEC SQL SELECT TO_CHAR(TO_DATE(:h_billdate,'dd/chr_mm/chr_yyyy hh:mi:ss'),'yyyymmdd')	
				INTO :l_iv_gpss_struct_h.bl_to_date FROM DUAL;
				EXEC SQL SELECT TO_CHAR(TO_DATE(:chr_h_bl_prv_dt,'dd/chr_mm/chr_yyyy hh:mi:ss'),'yyyymmdd')	
				INTO :l_iv_gpss_struct_h.bl_frm_date FROM DUAL;
		
				
	
				memset(&l_iv_clt_setup_struct,NULL, sizeof(IV_CLIENTSETUP_STRUCT));
				int_retstat = IV_SUCCESS;

				if (APL_FAILURE == IV_Rtv_IVCUSTSETUP(h_dl_client,
																 &l_iv_clt_setup_struct,
																 &int_retstat,
																 l_debug_info_ptr) )
				{	
					if (int_retstat == IV_NO_DATA_FOUND_ERR)
      			{
       				CO_InsertErr(l_debug_info_ptr,
										  	ERR_BILLPARAM_NOTFND, 
										  	h_dl_client,
										  	APL_NULL_STRING,
										  	APL_NULL_STRING,
								  			__LINE__,
								 			__FILE__);
        				APL_GOBACK_FAIL
      			}		
					if (int_retstat == IV_CRITCAL_ERROR_IND)
					{
         			CO_InsertErr(l_debug_info_ptr,
               		            DB_ERR_NO,
                  		         "BCUSTSETUP",
           								APL_NULL_STRING,
                        		   APL_NULL_STRING,
                           		__LINE__,
                           		__FILE__);
            		APL_GOBACK_FAIL
					}
				}	

				strcpy(l_iv_gpss_struct_h.h_bill_ccy, l_iv_clt_setup_struct.b_ccycd);
				l_ae_rate = 0.0;

				
				if (APL_FAILURE == ConvToFxFn_GR(l_iv_clt_setup_struct.fees_ccy,
													  l_iv_clt_setup_struct.b_ccycd,
													  g_mt_commonsys_params_struct_h.dom_ccy,
													  chr_p_billdt,&l_ae_rate,
													  &int_l_retstat,l_debug_info_ptr) )
				{
						APL_GOBACK_FAIL
				}
				l_convminimumfee = (l_iv_clt_setup_struct.minimumfee * l_ae_rate);
				int_retminfee = IV_Proc_Round(&l_convminimumfee,
										l_iv_clt_setup_struct.b_ccycd,
										chr_l_cod_convminfee,l_debug_info_ptr);
				if (int_retminfee == 1)
				{
					l_convminimumfee = 0.0;
					sscanf(chr_l_cod_convminfee, "%lf", &l_convminimumfee);
				}
				else
				{
					APL_GOBACK_FAIL
				}
				l_iv_gpss_struct_h.minimum_fee = l_convminimumfee;

				
		
				if (APL_FAILURE == CO_RtvSysDtTime(chr_h_system_date,
																	 l_debug_info_ptr))
				{
					fprintf(fl_userlog,"Failed To Select The System Date\n");
					APL_GOBACK_FAIL
				}

				int_retstat = IV_SUCCESS;
				if (APL_FAILURE == IV_Proc_ConvToFxFn(l_iv_clt_setup_struct.b_ccycd,
														"USD",
														g_mt_commonsys_params_struct_h.dom_ccy,
														chr_h_system_date,
														&h_fx_rt,
														&int_retstat,
														l_debug_info_ptr))
				{
					if (int_retstat == IV_CRITCAL_ERROR_IND)
					{	
						fprintf(fl_userlog,"ExchRt Not Found Btn %s To USD\n",l_iv_clt_setup_struct.b_ccycd);
						APL_GOBACK_FAIL	
					}
				}

				l_iv_gpss_struct_h.fx_rt = h_fx_rt;
				l_ae_rate = 0.0;

				
				if (APL_FAILURE == ConvToFxFn_GR(l_iv_clt_setup_struct.fees_ccy,
													  l_iv_clt_setup_struct.b_ccycd,
													  g_mt_commonsys_params_struct_h.dom_ccy,
													  chr_p_billdt,&l_ae_rate,
													  &int_l_retstat,l_debug_info_ptr) )
				{
						APL_GOBACK_FAIL
				}
				l_convminimumfee = (l_iv_clt_setup_struct.minimumfee * l_ae_rate);
				int_retminfee = IV_Proc_Round(&l_convminimumfee,
										l_iv_clt_setup_struct.b_ccycd,
										chr_l_cod_convminfee,l_debug_info_ptr);
				if (int_retminfee == 1)
				{
					l_convminimumfee = 0.0;
					sscanf(chr_l_cod_convminfee, "%lf", &l_convminimumfee);
				}
				else
				{
					APL_GOBACK_FAIL
				}
				l_iv_gpss_struct_h.minimum_fee = l_convminimumfee;

				if (APL_FAILURE == B_PopGPSSDetFn( h_dl_client,
															  h_cm_amount,
															  dbl_h_nil_fee_adj,
															  h_minimum_fee_adj,
															  dbl_h_max_fee_adj,
															  h_mstclt,
															  int_h_serv_code,
															  &l_iv_gpss_struct_h,
															  h_billdate,
															  l_debug_info_ptr) )
				{
					fprintf(fl_userlog,"Failed To Populate The Details of GPSS for Account:%s\n",h_dl_client);
					APL_GOBACK_FAIL		
				}
			}

			strcpy(chr_h_preclient,h_dl_client);
			l_iv_pregpss_struct_h	= l_iv_gpss_struct_h;			
		} 
	
	EXEC SQL UPDATE SYS_IVCONTROLPARAM 
	SET B_GEN_IND = 'Y';

	IS_ANY_ORA_ERROR
	
	} 
	else if  (strcmp(h_dl_client,APL_NULL_STRING))
	{
		
		
		
		strcpy(l_iv_gpss_struct_h.client,h_dl_client);
		if (APL_FAILURE == IV_Rtv_CNameAcc(h_dl_client,
																l_iv_gpss_struct_h.clnt_name,
																&int_retstat,
																l_debug_info_ptr) )
		{
			if (IV_NO_DATA_FOUND_ERR)
			{
				CO_InsertErr(l_debug_info_ptr,
									ERR_ACCNOT_FND,
									h_dl_client,
									APL_NULL_STRING,
									APL_NULL_STRING,
									__LINE__,
									__FILE__);
				APL_GOBACK_FAIL
			}
		}

		if (APL_FAILURE ==  IV_Rtv_GetMasterAcc(h_dl_client,
													l_iv_gpss_struct_h.master_clt,
													l_debug_info_ptr))
		{
			CO_InsertErr(l_debug_info_ptr,
								ERR_ACCNOT_FND,
								h_dl_client,
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__);
			APL_GOBACK_FAIL
		}

		if (APL_FAILURE == IV_Rtv_CNameAcc(l_iv_gpss_struct_h.master_clt,
																l_iv_gpss_struct_h.mst_clnt_clr_name,
																&int_retstat,
																l_debug_info_ptr) )
		{
			CO_InsertErr(l_debug_info_ptr,
								ERR_ACCNOT_FND,
								h_mstclt,
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__);
			APL_GOBACK_FAIL
		}
		int_retstat = IV_SUCCESS;
		if (APL_FAILURE == B_SelGFCPRODTYPFn(l_iv_gpss_struct_h.master_clt,
													 		l_iv_gpss_struct_h.h_uniq_gcustody_id,
															l_iv_gpss_struct_h.clt_prd_code,
													 		&int_retstat,
													 		l_debug_info_ptr))
		{	
			if (int_retstat == IV_CRITCAL_ERROR_IND)
			{
     	 		CO_InsertErr(l_debug_info_ptr,
       	  	                DB_ERR_NO,
        		               "CACCOUNT",
     								APL_NULL_STRING,
              		         APL_NULL_STRING,
                 		      __LINE__,
                    		   __FILE__);
     			APL_GOBACK_FAIL
     		}
     		if (int_retstat == IV_NO_DATA_FOUND_ERR)
     		{
     			fprintf(fl_userlog,"Account Not Found :%s\n",l_iv_gpss_struct_h.master_clt);
     	 		CO_InsertErr(l_debug_info_ptr,
     	 							ERR_ACCNOT_FND,
       							h_mstclt,
        							APL_NULL_STRING,
        							APL_NULL_STRING,
        							__LINE__,
        							__FILE__);
				APL_GOBACK_FAIL
			}
		}

		EXEC SQL SELECT TO_CHAR(TO_DATE(:h_billdate,'dd/chr_mm/chr_yyyy hh:mi:ss'),'yyyymmdd')	
		INTO :l_iv_gpss_struct_h.bl_to_date FROM DUAL;
		EXEC SQL SELECT TO_CHAR(TO_DATE(:chr_h_bl_prv_dt,'dd/chr_mm/chr_yyyy hh:mi:ss'),'yyyymmdd')	
		INTO :l_iv_gpss_struct_h.bl_frm_date FROM DUAL;

		if (APL_FAILURE == IV_Rtv_IVCUSTSETUP(h_dl_client,
														 &l_iv_clt_setup_struct,
														 &int_retstat,
														 l_debug_info_ptr) )
		{	
			if (int_retstat == IV_NO_DATA_FOUND_ERR)
      	{
       		CO_InsertErr(l_debug_info_ptr,
								  	ERR_BILLPARAM_NOTFND, 
								  	h_dl_client,
								  	APL_NULL_STRING,
								  	APL_NULL_STRING,
						  			__LINE__,
						 			__FILE__);
        		APL_GOBACK_FAIL
      	}		
			if (int_retstat == IV_CRITCAL_ERROR_IND)
			{
        		CO_InsertErr(l_debug_info_ptr,
           		            DB_ERR_NO,
              		         "BCUSTSETUP",
        							APL_NULL_STRING,
                    		   APL_NULL_STRING,
                       		__LINE__,
                       		__FILE__);
        		APL_GOBACK_FAIL
			}
		}

		

		if ( l_iv_clt_setup_struct.b_gen_ind != 'S' )
		{
			fprintf(fl_userlog, "Account %s is not a bill to self client. Cannot generate GPSS h_file for this client.\n", h_dl_client);

			CO_InsertErr(l_debug_info_ptr, ERR_ACCC_NOTSELF, APL_NULL_STRING, 
								APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__);

			APL_GOBACK_FAIL
		}

		strcpy(l_iv_gpss_struct_h.h_bill_ccy,l_iv_clt_setup_struct.b_ccycd);
		l_ae_rate = 0.0;
		if (APL_FAILURE == IV_Proc_ConvToFxFn(l_iv_clt_setup_struct.fees_ccy,
											  l_iv_clt_setup_struct.b_ccycd,
											  g_mt_commonsys_params_struct_h.dom_ccy,
											  chr_p_billdt,&l_ae_rate,
											  &int_l_retstat,l_debug_info_ptr) )
		{
				APL_GOBACK_FAIL
		}
		l_convminimumfee = (l_iv_clt_setup_struct.minimumfee * l_ae_rate);
		int_retminfee = IV_Proc_Round(&l_convminimumfee,
								l_iv_clt_setup_struct.b_ccycd,
								chr_l_cod_convminfee,l_debug_info_ptr);
		if (int_retminfee == 1)
		{
			l_convminimumfee = 0.0;
			sscanf(chr_l_cod_convminfee, "%lf", &l_convminimumfee);
		}
		else
		{
			APL_GOBACK_FAIL
		}
		l_iv_gpss_struct_h.minimum_fee = l_convminimumfee;
		
		
		if (APL_FAILURE == IV_Proc_ConvToFxFn(l_iv_clt_setup_struct.b_ccycd,
												"USD",
												g_mt_commonsys_params_struct_h.dom_ccy,
												chr_h_system_date,
												&h_fx_rt,
												&int_retstat,
												l_debug_info_ptr))
		{
			if (int_retstat == IV_CRITCAL_ERROR_IND)
			{	
				fprintf(fl_userlog,"ExchRt Not Found Btn %s To USD\n",l_iv_clt_setup_struct.b_ccycd);
				APL_GOBACK_FAIL	
			}
		}
		l_iv_gpss_struct_h.fx_rt = h_fx_rt;

		
		
		
		EXEC SQL DECLARE GPSSACCCUR CURSOR FOR
		SELECT ROUND(a.COMM_AMT,c.DEC_LEN),
				 ROUND(a.MINIMUMFEE_ADJ,c.DEC_LEN),
				 ROUND(a.NIL_FEES_ADJ,c.DEC_LEN),
				 ROUND(a.MAXIMUM_FEE_ADJ,c.DEC_LEN),
				 a.SERVICE_CD
		FROM IV_SERVICE_CHRG a, MT_CLIENT b, DL_CURRENCY c
		WHERE a.CLIENT = b.CLN_CODE
		AND   a.DATEOF_BILLING = :h_billdate
		AND   a.CLIENT = :h_dl_client
		AND	a.B_CCYCD = c.CURRENCY_CD
		AND   a.CONS_FLAG = DECODE(a.CLIENT, a.MASTER_CLT, 'C', 'I')
		ORDER BY a.SERVICE_CD;

		EXEC SQL OPEN  GPSSACCCUR;
		IS_ANY_ORA_ERROR;

		for(;;)
		{
			h_cm_amount = 0.0;
			h_minimum_fee_adj = 0.0;
			dbl_h_nil_fee_adj = 0.0;
			dbl_h_max_fee_adj = 0.0;
			int_h_serv_code = 0L;

			EXEC SQL FETCH GPSSACCCUR
			INTO 		:h_cm_amount:i_cm_amount,
						:h_minimum_fee_adj:i_min_fee_adj,
						:dbl_h_nil_fee_adj:i_nil_fee_adj,
						:dbl_h_max_fee_adj:i_max_fee_adj,
						:int_h_serv_code:i_service_cd;

			IS_ANY_ORA_ERROR
		
			if (APL_ZERO_RESULT_SET)
			{
				if (int_l_fetch_cnt == 0)
				{
					CO_InsertErr(l_debug_info_ptr,
										ERR_REC_NOTFND,
										APL_NULL_STRING,
										APL_NULL_STRING,
										APL_NULL_STRING,
										__LINE__,
										__FILE__);
					fprintf(fl_userlog,"No Records For Which GPSS File Can Be Generated for client specified :%s\n",h_dl_client);
					APL_GOBACK_FAIL
				}
				else
				{
					fprintf(fl_userlog,"The Last record picked up for the client %s was service_cd %ld \n",h_dl_client,int_h_serv_code);
					fprintf(APL_OUT_FILE,"No More Records To Process for client:%s\n",h_dl_client);
					break;
				}
			}

			int_l_fetch_cnt++;

			
			
			if (APL_FAILURE == B_PopGPSSDetFn( h_dl_client,
														  h_cm_amount,
														  dbl_h_nil_fee_adj,
														  h_minimum_fee_adj,
														  dbl_h_max_fee_adj,
														  l_iv_gpss_struct_h.master_clt,
														  int_h_serv_code,
														  &l_iv_gpss_struct_h,
														  h_billdate,
														  l_debug_info_ptr) )
			{
				fprintf(fl_userlog,"Failed To Populate The Details of GPSS for Account:%s and service h_code %ld \n",h_dl_client,int_h_serv_code);
				APL_GOBACK_FAIL		
			}
		} 

		
		l_iv_gpss_struct_h.h_total_deal_fee = l_iv_gpss_struct_h.h_deal_fee; 
		l_iv_gpss_struct_h.h_total_deal_fee += l_iv_gpss_struct_h.h_deal_adm_fee; 
		l_iv_gpss_struct_h.h_total_deal_fee += l_iv_gpss_struct_h.h_deal_amd_fee; 
		l_iv_gpss_struct_h.h_total_deal_fee += l_iv_gpss_struct_h.h_deal_rep_fee; 
		l_iv_gpss_struct_h.h_total_deal_fee += l_iv_gpss_struct_h.h_deal_lat_fee; 
		l_iv_gpss_struct_h.h_total_deal_fee += l_iv_gpss_struct_h.h_deal_del_fee; 
		l_iv_gpss_struct_h.h_total_deal_fee += l_iv_gpss_struct_h.h_deal_trnar_fee; 
		l_iv_gpss_struct_h.h_total_deal_fee += l_iv_gpss_struct_h.h_deal_int_fee;

		l_iv_gpss_struct_h.h_total_fsfk_fee = l_iv_gpss_struct_h.h_sfk_fee;
		l_iv_gpss_struct_h.h_total_fsfk_fee += l_iv_gpss_struct_h.h_minimum_sfk_fee; 
		l_iv_gpss_struct_h.h_total_fsfk_fee += l_iv_gpss_struct_h.h_nil_sfk_fee; 
		l_iv_gpss_struct_h.h_total_fsfk_fee += l_iv_gpss_struct_h.h_sfk_adm_fee;

		l_iv_gpss_struct_h.h_total_cafee = l_iv_gpss_struct_h.h_fee_cafee; 
		l_iv_gpss_struct_h.h_total_cafee += l_iv_gpss_struct_h.pymt_ca_fee;
		l_iv_gpss_struct_h.h_total_cafee += l_iv_gpss_struct_h.h_cash_div_fee; 
		l_iv_gpss_struct_h.h_total_cafee += l_iv_gpss_struct_h.h_bond_intr_fee;

		if (APL_FAILURE == B_TotOthCmAmtFn(h_dl_client,
													  &h_tot_oth_amount,
														h_billdate,
													  l_debug_info_ptr) )
		{
				fprintf(fl_userlog,"Failed To Select The Total Other Services Comm. Amount For Account %s\n",h_dl_client);
				APL_GOBACK_FAIL
		}
		l_iv_gpss_struct_h.h_other_fee = h_tot_oth_amount;

		

		

		l_iv_gpss_struct_h.prv_os_amount	= l_iv_clt_setup_struct.total_osamount;

		
			
		l_iv_gpss_struct_h.h_total_fee = l_iv_gpss_struct_h.h_total_deal_fee;
		l_iv_gpss_struct_h.h_total_fee += l_iv_gpss_struct_h.h_total_fsfk_fee; 
		l_iv_gpss_struct_h.h_total_fee += l_iv_gpss_struct_h.h_total_cafee; 
		l_iv_gpss_struct_h.h_total_fee += l_iv_gpss_struct_h.h_over_bill; 
		l_iv_gpss_struct_h.h_total_fee += l_iv_gpss_struct_h.h_under_bill; 
		l_iv_gpss_struct_h.h_total_fee += l_iv_gpss_struct_h.h_spl_bill;
		l_iv_gpss_struct_h.h_total_fee += l_iv_gpss_struct_h.h_custody_tax;

		
					
		l_iv_gpss_struct_h.total_osamount = (l_iv_clt_setup_struct.total_osamount +
												  l_iv_gpss_struct_h.h_total_fee );	
				
			
		if (APL_FAILURE == B_BlGPSSDetFn(fl_gpss,
												   l_iv_gpss_struct_h,
												   l_debug_info_ptr) )
		{
			fprintf(fl_userlog,"Failed To Print the Details To the GPSS File\n");
			APL_GOBACK_FAIL	
		}	
		fprintf(fl_userlog,"Finished Printing the GPSS details into handoff h_file \n");			
	}
	

	APL_GOBACK_SUCCESS

	
 	RETURN_SUCCESS:
   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Exiting out of B_BlGPSSGenFn gracefully\n",NULL,NULL);
   }
	fclose(fl_gpss);
	free(l_intl_rept_struct_ha);
   return (APL_SUCCESS);

   RETURN_FAILURE:
   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Exiting out of B_BlGPSSGenFn unsuccessfully\n",NULL,NULL);
   }
	fclose(fl_gpss);
	free(l_intl_rept_struct_ha);
   return (APL_FAILURE);
}

 

int B_PopGPSSDetFn(char						*chr_p_client,
						 double					p_cm_amt,
						 double 					p_nil_fee_adj,
						 double					p_min_fee_adj,
						 double					p_max_fee_adj,
						 char						*p_mstclt_a,
						 long						p_serv_code,
						 IV_GPSS_STRUCT_H			*p_iv_gpss_struct_h,
						 char						*chr_p_billdt,
						 DEBUG_INFO_STRUCT_H			**l_debug_info_ptr)
{	

	
	char		chr_l_cod_auc[30] = APL_NULL_STRING;
	int		int_retstat										= 0;
	int		int_retauc										= 0;

	double	dbl_h_tot_txn_fee								= 0.0;
	double	dbl_h_tot_sfk_fee								= 0.0;
	double	dbl_h_tot_ca_fee								= 0.0;
	double	dbl_h_tot_oth_fee								= 0.0;

	EXEC SQL BEGIN DECLARE SECTION;

	IV_CLIENTSETUP_STRUCT	l_iv_clientsetup;
	struct	sqlca sqlca;	

	char				h_dl_client[APL_CLIENT_LENGTH]		= APL_NULL_STRING;
	char				h_mstclt[APL_CLIENT_LENGTH]		= APL_NULL_STRING;
	char				h_billdate[APL_DATE_LEN]			= APL_NULL_STRING;
	char				chr_h_system_date[APL_DATE_LEN]	= APL_NULL_STRING;

	double			dbl_h_auc									= 0.0;
	double			dbl_h_txn_vol							= 0.0;
	double			h_fx_rt								= 0.0;
	double			dbl_h_nil_fee_adj						= 0.0;
	double			h_minimum_fee_adj						= 0.0;
	double			dbl_h_max_fee_adj						= 0.0;
	double			h_cm_amount								= 0.0;
	double			h_tot_oth_amount						= 0.0;
	long				int_h_serv_code							= 0;

	EXEC SQL VAR chr_h_system_date IS STRING;

	EXEC SQL END DECLARE SECTION;

	sqlca.sqlcode = 0;
	strcpy(h_dl_client, chr_p_client);
	strcpy(h_mstclt, p_mstclt_a);
	strcpy(h_billdate, chr_p_billdt);
	int_h_serv_code = p_serv_code;
	h_cm_amount		= p_cm_amt;
	dbl_h_nil_fee_adj = p_nil_fee_adj;
	h_minimum_fee_adj = p_min_fee_adj;
	dbl_h_max_fee_adj = p_max_fee_adj;

	
	

	if (	(int_h_serv_code == CUSTODYFEE) || (int_h_serv_code == TXNFEE) )
	{
		if (APL_FAILURE == B_TotChargeQtyFn(int_h_serv_code,	
												   h_dl_client,
												   h_mstclt,
												   h_billdate,
													&dbl_h_auc,
													&dbl_h_txn_vol,
												   l_debug_info_ptr))
		{
			APL_GOBACK_FAIL
		}
		

		if(int_h_serv_code == CUSTODYFEE)
		{
			int_retauc =  IV_Proc_Round(&dbl_h_auc,
									p_iv_gpss_struct_h->h_bill_ccy,
									chr_l_cod_auc,
									l_debug_info_ptr);
			if (int_retauc == 1)
			{
				dbl_h_auc = 0.0;
				sscanf(chr_l_cod_auc, "%lf", &dbl_h_auc);
			}
			else
			{
				APL_GOBACK_FAIL
			}
			
			p_iv_gpss_struct_h->asset_under_cust = dbl_h_auc;
		}
		else
		{
			p_iv_gpss_struct_h->h_deal_vol = dbl_h_txn_vol;
		}
	}

	if (int_h_serv_code == TXNFEE)
	{
		p_iv_gpss_struct_h->h_deal_fee = h_cm_amount + dbl_h_nil_fee_adj + h_minimum_fee_adj + dbl_h_max_fee_adj;
	}
	if (int_h_serv_code == ADM_TXN_FEE_IND)
	{
		p_iv_gpss_struct_h->h_deal_adm_fee	= h_cm_amount + dbl_h_nil_fee_adj + h_minimum_fee_adj + dbl_h_max_fee_adj;
	}
	if (int_h_serv_code == AMEND_FEE_IND)
	{
		p_iv_gpss_struct_h->h_deal_amd_fee  = h_cm_amount + dbl_h_nil_fee_adj + h_minimum_fee_adj + dbl_h_max_fee_adj;
	}
	if (int_h_serv_code == REPAIRFEE)
	{
		p_iv_gpss_struct_h->h_deal_rep_fee = h_cm_amount + dbl_h_nil_fee_adj + h_minimum_fee_adj + dbl_h_max_fee_adj;
	}	
	if (int_h_serv_code == LATETXNFEE)
	{
		p_iv_gpss_struct_h->h_deal_lat_fee = h_cm_amount + dbl_h_nil_fee_adj + h_minimum_fee_adj + dbl_h_max_fee_adj;
	}
	if (int_h_serv_code == DELV_TXN_FEE)
	{
		p_iv_gpss_struct_h->h_deal_del_fee = h_cm_amount + dbl_h_nil_fee_adj + h_minimum_fee_adj + dbl_h_max_fee_adj;
	}
	if (int_h_serv_code == TURNAROUNDTXNFEE)
	{
		p_iv_gpss_struct_h->h_deal_trnar_fee = h_cm_amount + dbl_h_nil_fee_adj + h_minimum_fee_adj + dbl_h_max_fee_adj;
	}
	if (int_h_serv_code == IV_BOOKTRF_FEE)
	{
		p_iv_gpss_struct_h->h_deal_int_fee = h_cm_amount + dbl_h_nil_fee_adj + h_minimum_fee_adj + dbl_h_max_fee_adj;
	}
	if (int_h_serv_code == CUSTODYFEE)
	{
		p_iv_gpss_struct_h->h_minimum_sfk_fee = h_minimum_fee_adj;
		p_iv_gpss_struct_h->h_nil_sfk_fee = dbl_h_nil_fee_adj;
		p_iv_gpss_struct_h->h_sfk_fee 	  = h_cm_amount + dbl_h_max_fee_adj;
	}		
	if (int_h_serv_code == ADM_CUST_FEE_IND)
	{
		p_iv_gpss_struct_h->h_sfk_adm_fee = h_cm_amount + dbl_h_nil_fee_adj + h_minimum_fee_adj + dbl_h_max_fee_adj;
	}
	if (int_h_serv_code ==  FREECAFEE) 
	{
		p_iv_gpss_struct_h->h_fee_cafee = h_cm_amount + dbl_h_nil_fee_adj + h_minimum_fee_adj + dbl_h_max_fee_adj;
	}
	if (int_h_serv_code == VPCAFEE)
	{
		p_iv_gpss_struct_h->pymt_ca_fee = h_cm_amount + dbl_h_nil_fee_adj + h_minimum_fee_adj + dbl_h_max_fee_adj;
	}
	if (int_h_serv_code == CASH_DIV_FEE)
	{
		p_iv_gpss_struct_h->h_cash_div_fee = h_cm_amount + dbl_h_nil_fee_adj + h_minimum_fee_adj + dbl_h_max_fee_adj;
	}
	if (int_h_serv_code ==  IV_BONDINT_FEE)
	{
		p_iv_gpss_struct_h->h_bond_intr_fee = h_cm_amount + dbl_h_nil_fee_adj + h_minimum_fee_adj + dbl_h_max_fee_adj;
	}
	if (int_h_serv_code == UNDERBILLING)
	{
		p_iv_gpss_struct_h->h_under_bill = h_cm_amount + dbl_h_nil_fee_adj + h_minimum_fee_adj + dbl_h_max_fee_adj;
	}
	if (int_h_serv_code == OVERBILLING)
	{
		p_iv_gpss_struct_h->h_over_bill	= h_cm_amount+ dbl_h_nil_fee_adj + h_minimum_fee_adj + dbl_h_max_fee_adj;
	}
	if (int_h_serv_code == TAXFEE)
	{
		p_iv_gpss_struct_h->h_custody_tax 	= h_cm_amount+ dbl_h_nil_fee_adj + h_minimum_fee_adj + dbl_h_max_fee_adj;
	}
	if (int_h_serv_code == SPECIALBILLING) 
	{
		p_iv_gpss_struct_h->h_spl_bill = h_cm_amount+ dbl_h_nil_fee_adj + h_minimum_fee_adj + dbl_h_max_fee_adj;
	}

	APL_GOBACK_SUCCESS;	

	
 	RETURN_SUCCESS:
   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Exiting out of B_PopGPSSDetFn gracefully\n",NULL,NULL);
   }
   return (APL_SUCCESS);

   RETURN_FAILURE:
   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Exiting out of B_PopGPSSDetFn unsuccessfully\n",NULL,NULL);
   }
   return (APL_FAILURE);
} 


 
int B_TotOthCmAmtFn(char				*chr_p_client,
						  double				*p_tot_oth_amt,
						  char				*p_bl_upto_date,
						  DEBUG_INFO_STRUCT_H		**l_debug_info_ptr)
{
	

	EXEC SQL BEGIN DECLARE SECTION;

	IV_CLIENTSETUP_STRUCT	l_iv_clientsetup;

	char		h_dl_client[APL_CLIENT_LENGTH]		= APL_NULL_STRING;
	char		chr_h_bl_upto_dt[APL_DATE_LEN]		= APL_NULL_STRING;
	double 	h_tot_oth_amount 						= 0.0;
	int		int_h_oth_exists						= 0;

	short		i_oth_exists						= 0;
	short		i_oth_tot_amt						= 0;
	struct sqlca sqlca;

	EXEC SQL VAR h_dl_client IS STRING;
	EXEC SQL VAR chr_h_bl_upto_dt IS STRING;

	EXEC SQL END DECLARE SECTION;

	sqlca.sqlcode = 0;
	strcpy(h_dl_client,chr_p_client);
	strcpy(chr_h_bl_upto_dt,p_bl_upto_date);

	

	EXEC SQL SELECT (NVL(count(*),0))
			  INTO :int_h_oth_exists:i_oth_exists
			  FROM IV_SERV_OTH a, IV_SERV_MAST b
			  WHERE a.service_cd = b.service_cd
			  AND b.STD_FEEIND = 'N'
			  AND a.CLIENT  = :h_dl_client
			  AND B_UPTO_DATE = :chr_h_bl_upto_dt;

	IS_ANY_ORA_ERROR		

	if (int_h_oth_exists == 0)
	{
		h_tot_oth_amount = 0;
	}
	else
	{
		  

		EXEC SQL SELECT ROUND(SUM(a.COMM_AMT + a.NIL_FEES_ADJ + a.MAXIMUM_FEE_ADJ 
										+ a.MINIMUMFEE_ADJ),c.DEC_LEN)
		INTO :h_tot_oth_amount:i_oth_tot_amt
		FROM IV_SERVICE_CHRG a ,IV_SERV_MAST b, DL_CURRENCY c, MT_CLIENT D
		WHERE a.SERVICE_CD = b.SERVICE_CD
		AND A.CLIENT = D.CLN_CODE
		AND ((a.CLIENT =  a.MASTER_CLT   AND a.CONS_FLAG = 'C')
		OR   (a.CLIENT != a.MASTER_CLT   AND a.CONS_FLAG = 'I'))
		AND a.CLIENT		= :h_dl_client
		AND a.B_CCYCD		= c.CURRENCY_CD
		AND DATEOF_BILLING = :chr_h_bl_upto_dt
		AND b.STD_FEEIND = 'N'
		group by c.DEC_LEN;
		IS_ANY_ORA_ERROR
	}
		
	*p_tot_oth_amt = h_tot_oth_amount;
		
	APL_GOBACK_SUCCESS

	
 	RETURN_SUCCESS:
   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Exiting out of B_TotOthCmAmtFn gracefully\n",NULL,NULL);
   }
   return (APL_SUCCESS);

   RETURN_FAILURE:
   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Exiting out of B_TotOthCmAmtFn unsuccessfully\n",NULL,NULL);
   }
   return (APL_FAILURE);
}


 
int	B_TotChargeQtyFn(int				p_serv_code,
							  char			*chr_p_client,								
							  char			*p_mstclt_a,
							  char			*chr_p_billdt,
							  double			*p_auc,
							  double			*p_txn_vol,
							  DEBUG_INFO_STRUCT_H	**l_debug_info_ptr)
{

	
	EXEC SQL BEGIN DECLARE SECTION;
	struct	sqlca sqlca;

	double	h_charge_quantity					= 0;				
	int	int_h_serv_code							= 0;
	char	h_dl_client[APL_CLIENT_LENGTH]		= APL_NULL_STRING;
	char	h_mstclt[APL_CLIENT_LENGTH]		= APL_NULL_STRING;
	char	h_billdate[APL_DATE_LEN]			= APL_NULL_STRING;
	short	i_charge_quantity						= 0;	

	EXEC SQL VAR h_dl_client IS STRING;
	EXEC SQL VAR h_billdate  IS STRING;
	EXEC SQL VAR h_mstclt  IS STRING;

	EXEC SQL END DECLARE SECTION;

	sqlca.sqlcode = 0;
	strcpy(h_dl_client, chr_p_client);
	strcpy(h_mstclt, p_mstclt_a);
	strcpy(h_billdate, chr_p_billdt);
	int_h_serv_code		= p_serv_code;


	

	if (!strcmp(h_dl_client,h_mstclt))
	{
		EXEC SQL SELECT SUM(CHRG_QUANT) 
					INTO	:h_charge_quantity:i_charge_quantity
					FROM 	IV_DEAL
					WHERE DATEOF_BILLING	 = :h_billdate
					AND CONS_FLAG = 'C'
					AND   SERVICE_CD = :int_h_serv_code
					AND   MASTER_CLT 	 = :h_mstclt
				   GROUP BY MASTER_CLT, SERVICE_CD;	

	 }
	 else
	 {
		EXEC SQL SELECT SUM(CHRG_QUANT) 
					INTO	:h_charge_quantity:i_charge_quantity
					FROM 	IV_DEAL
					WHERE DATEOF_BILLING	 = :h_billdate 
					AND CONS_FLAG = 'I'
					AND   SERVICE_CD = :int_h_serv_code
					AND   CLIENT 	 = :h_dl_client
				   GROUP BY CLIENT, SERVICE_CD;	
	 }
	
	

	if (int_h_serv_code == CUSTODYFEE)
	{
		*p_auc = h_charge_quantity;
	}
	else if (int_h_serv_code == TXNFEE)
	{
		*p_txn_vol = h_charge_quantity;
	}

	

 	RETURN_SUCCESS:
   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Exiting out of B_TotChargeQtyFn gracefully\n",NULL,NULL);
   }
   return (APL_SUCCESS);

   RETURN_FAILURE:
   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Exiting out of B_TotChargeQty unsuccessfully\n",NULL,NULL);
   }
   return (APL_FAILURE);
}



 

int B_BlNameGPSSFlFn(char				*chr_p_billdt,
							char				*p_flname,
							DEBUG_INFO_STRUCT_H	**l_debug_info_ptr) 
{
	
	
	struct	sqlca sqlca;
	char	chr_l_flname[PATH_LENGTH]	= APL_NULL_STRING;
	char	chr_l_mon[3]						= APL_NULL_STRING;
	char	chr_l_year[3]					= APL_NULL_STRING;
	char	chr_l_billdt[APL_DATE_LEN]	= APL_NULL_STRING;
	char	chr_h_month[4]					= APL_NULL_STRING;
	
	EXEC SQL VAR chr_h_month IS STRING;
	EXEC SQL VAR chr_l_mon   IS STRING; 

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	

	sqlca.sqlcode = 0;
	strcpy(chr_l_flname,g_mt_commonsys_params_struct_h.nation_code);

	

	strcpy(chr_l_billdt, chr_p_billdt);	

	chr_l_mon[0]		 = chr_l_billdt[3];
	chr_l_mon[1]		 = chr_l_billdt[4];
	chr_l_mon[2]		 = APL_NULL_CHAR;

	

	chr_l_year[0]	 = chr_l_billdt[8];
	chr_l_year[1]	 = chr_l_billdt[9];
	chr_l_year[2]	 = APL_NULL_CHAR;

	

	EXEC SQL SELECT TO_CHAR(TO_DATE(:chr_l_mon,'MM'),'MON') 
				INTO	 :chr_h_month
				FROM DUAL;

	strcat(chr_l_flname, chr_h_month);	
	strcat(chr_l_flname, chr_l_year);
	strcat(chr_l_flname, ".TXT");
	
	strcpy(p_flname, chr_l_flname);
	
	
 	RETURN_SUCCESS:
   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,
					"Exiting out of B_BlNameGPSSFlFn gracefully\n",
					NULL,
					NULL);
   }
   return (APL_SUCCESS);

   RETURN_FAILURE:
   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,
					"Exiting out of B_BlNameGPSSFlFn unsuccessfully\n",
					NULL,
					NULL);
   }
   return (APL_FAILURE);
}


 
	
int B_BlGPSSHdrFn( FILE				*fl_gpss,
						 char				*p_flname,
						DEBUG_INFO_STRUCT_H	**l_debug_info_ptr)
{

	fprintf(fl_gpss,"COUNTRY%sACCOUNT%sA/C NAME%s",GPSEP,GPSEP,GPSEP);
	fprintf(fl_gpss,"MASTER A/C%sMAST A/C NAME%s",GPSEP,GPSEP);
	fprintf(fl_gpss,"GFCID%sA/C PROD TYPE%sBILL FROM%sBILL TO%s",GPSEP,GPSEP,GPSEP,GPSEP);
	fprintf(fl_gpss,"BILLING CURRENCY%sFX RATE(1 BILL CURR = X USD)%sMIN FEE%s",GPSEP,GPSEP,GPSEP);
	fprintf(fl_gpss,"TOT TXN FEE%sTXN FEE%sTXN ADMINISTRATION FEE%s",GPSEP,GPSEP,GPSEP);
	fprintf(fl_gpss,"TXN AMENDMENT FEE%sTXN REPAIR FEE%sLATE TXN FEE%s",GPSEP,GPSEP,GPSEP);
	fprintf(fl_gpss,"TXN DELETE FEE%sTURNAROUND TXN FEE%sINTERNAL TXN FEE%s",GPSEP,GPSEP,GPSEP);
	fprintf(fl_gpss,"NIL SFK FEE%sMIN SFK FEE%sTOT SFK FEE%sSFK FEE%s",GPSEP,GPSEP,GPSEP,GPSEP);
	fprintf(fl_gpss,"SFK ADMINISTRATION  FEE%sTOT CORPORATE ACTIONS FEE%s",GPSEP,GPSEP);
	fprintf(fl_gpss,"FREE CA TRADES FEE%sPAYMENT CA TRADES FEE%sCASH DIVIDEND FEE%s",GPSEP,GPSEP,GPSEP);
	fprintf(fl_gpss,"BOND INTEREST FEE%sTOT OTHER FEE%sOVER BILLING%s",GPSEP,GPSEP,GPSEP);
	fprintf(fl_gpss,"UNDER BILLING%sTAX WITHHELD%sOUT OF POCKET ALLOWANCES%s",GPSEP,GPSEP,GPSEP);
	fprintf(fl_gpss,"TOTAL FEE%sPREV OUTSTANDING AMOUNT%sTOT OUTSTANDING AMOUNT%s",GPSEP,GPSEP,GPSEP);	
	fprintf(fl_gpss,"TXN VOLUME%sASSET UNDER CUSTODY\n",GPSEP);

	

	APL_GOBACK_SUCCESS

	
 	RETURN_SUCCESS:
   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,
					"Exiting out of B_BlGPSSHdrFn gracefully\n",
					NULL,
					NULL);
   }
   return (APL_SUCCESS);

   RETURN_FAILURE:
   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,
					"Exiting out of B_BlGPSSHdrFn unsuccessfully\n",
					NULL,
					NULL);
   }
   return (APL_FAILURE);
}

 
int B_BlGPSSDetFn(FILE				*fl_gpss,
						IV_GPSS_STRUCT_H		p_iv_gpss_struct_h,
						DEBUG_INFO_STRUCT_H	**l_debug_info_ptr)
{

	

	fprintf(fl_gpss,"%s%s",g_mt_commonsys_params_struct_h.nation_code,GPSEP);
	fprintf(fl_gpss,"%s%s",p_iv_gpss_struct_h.client, GPSEP);
	fprintf(fl_gpss,"%s%s",p_iv_gpss_struct_h.clnt_name,GPSEP);
	fprintf(fl_gpss,"%s%s",p_iv_gpss_struct_h.master_clt,GPSEP);
	fprintf(fl_gpss,"%s%s",p_iv_gpss_struct_h.mst_clnt_clr_name, GPSEP);
	fprintf(fl_gpss,"%s%s",p_iv_gpss_struct_h.h_uniq_gcustody_id,GPSEP);
	fprintf(fl_gpss,"%s%s",p_iv_gpss_struct_h.clt_prd_code,GPSEP);
	fprintf(fl_gpss,"%s%s",p_iv_gpss_struct_h.bl_frm_date,GPSEP);
	fprintf(fl_gpss,"%s%s",p_iv_gpss_struct_h.bl_to_date, GPSEP);
	fprintf(fl_gpss,"%s%s",p_iv_gpss_struct_h.h_bill_ccy,GPSEP);
	fprintf(fl_gpss,"%.6lf%s",p_iv_gpss_struct_h.fx_rt,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.minimum_fee,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.h_total_deal_fee,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.h_deal_fee,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.h_deal_adm_fee,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.h_deal_amd_fee,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.h_deal_rep_fee,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.h_deal_lat_fee,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.h_deal_del_fee,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.h_deal_trnar_fee,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.h_deal_int_fee,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.h_nil_sfk_fee,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.h_minimum_sfk_fee,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.h_total_fsfk_fee,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.h_sfk_fee,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.h_sfk_adm_fee,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.h_total_cafee,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.h_fee_cafee,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.pymt_ca_fee,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.h_cash_div_fee,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.h_bond_intr_fee,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.h_other_fee,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.h_over_bill,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.h_under_bill,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.h_custody_tax,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.h_spl_bill,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.h_total_fee,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.prv_os_amount,GPSEP);
	fprintf(fl_gpss,"%.3lf%s",p_iv_gpss_struct_h.total_osamount,GPSEP);
	fprintf(fl_gpss,"%5lf%s",p_iv_gpss_struct_h.h_deal_vol,GPSEP);
	fprintf(fl_gpss,"%.8lf",p_iv_gpss_struct_h.asset_under_cust);
	fprintf(fl_gpss,"\n");

	APL_GOBACK_SUCCESS;

	
 	RETURN_SUCCESS:
   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,
					"Exiting out of B_BlGPSSDetFn gracefully\n",
					NULL,
					NULL);
   }
   return (APL_SUCCESS);

   RETURN_FAILURE:
   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,
					"Exiting out of B_BlGPSSDetFn unsuccessfully\n",
					NULL,
					NULL);
   }
   return (APL_FAILURE);
}


 

//main (int argc,char **argv)
int main(int argc,char **argv)//Changes done for AIX Migration
{
	

	DEBUG_INFO_STRUCT_H			**l_debug_info_ptr					= NULL; 
	DEBUG_INFO_STRUCT_H			*l_debug_info_struct				= NULL; 
	INTL_ENV_DATA_STRUCT_H	*p_intlenv_data_struct_h 			= NULL;
	int 						int_retval							= 0;
	int 						i									= 0;
	FILE   					*fl_techlog 					= (FILE *) NULL;
	FILE						*fl_userlog 					= (FILE *) NULL;
	FILE						*chr_finifile 						= (FILE *) NULL;
	FILE						*fl_unitCostLog				=(FILE *) NULL;
	FILE						*fl_unitCostVol				=(FILE *) NULL;
	FILE						*fl_unitCostAcc				=(FILE *) NULL;
	char						chr_inifile[PATH_LENGTH]	 		= APL_NULL_STRING;
	char						chr_l_sys_date[APL_DATE_LEN]	= APL_NULL_STRING;
	char						chr_l_techlog[PATH_LENGTH]		= APL_NULL_STRING;
	char						chr_l_userlog[PATH_LENGTH]	   = APL_NULL_STRING;
	char						chr_logfile[PATH_LENGTH]			= APL_NULL_STRING;
	char						chr_custody_id_b[APL_USERID_LEN];
	char						chr_uname[APL_USERID_LEN];
	char						chr_passwd[APL_PASSWD_LEN];
	char						chr_l_bldetdir[PATH_LENGTH]		= APL_NULL_STRING;

	EXEC SQL BEGIN DECLARE SECTION;
	
	struct	sqlca sqlca;
	char		chr_h_batch_in_proc_progname[41]					= APL_NULL_STRING;
	char		chr_h_batch_in_proc_startdate[APL_DATE_LEN]	= APL_NULL_STRING;
	char		chr_h_batch_in_proc_rowid[APL_ROWID_LEN]		= APL_NULL_STRING;
	char		chr_h_restart_data[51]								= APL_NULL_STRING;
	char		chr_l_billdt[APL_DATE_LEN]							= APL_NULL_STRING;

	short 	int_i_batch_in_proc_rowid							= 0;
	short		i_restart_info										= 0;
	EXEC SQL VAR chr_uname 	IS STRING;
	EXEC SQL VAR chr_passwd 	IS STRING;
	EXEC SQL VAR chr_h_batch_in_proc_progname  IS STRING;
	EXEC SQL VAR chr_h_batch_in_proc_rowid     IS STRING;
	EXEC SQL VAR chr_h_batch_in_proc_startdate IS STRING;
	EXEC SQL VAR chr_h_restart_data            IS STRING;

	EXEC SQL END DECLARE SECTION;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;
	p_intlenv_data_struct_h   =  (INTL_ENV_DATA_STRUCT_H*)calloc(1,sizeof(INTL_ENV_DATA_STRUCT_H));
   APL_MALLOC_FAIL(p_intlenv_data_struct_h);

	l_debug_info_ptr		 = &l_debug_info_struct;
	
	

	strcpy(chr_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_inifile,"/intl_sun.cfg");

	if ( (chr_finifile = fopen(chr_inifile,"r") ) == NULL )
      exit(-1);

   APL_FETCH_DB_LOGIN_DETAILS(chr_finifile, chr_custody_id_b, chr_uname, chr_passwd , APL_OUT_FILE , l_debug_info_ptr)
   EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;
   IS_ANY_ORA_ERROR
	
	if (APL_FAILURE == CO_Rtv_RptFileName("1P",
													APL_LOGFILE_DESC,
													100,
													argv[5],
													argv,
													&fl_userlog,
													l_debug_info_ptr) )
	{
      APL_GOBACK_FAIL
	}

	if (APL_FAILURE == CO_Rtv_RptFileName("1p",
													APL_LOGFILE_DESC,
													100,
													argv[5],	
													argv,
													&fl_techlog,
													l_debug_info_ptr) )
	{
      APL_GOBACK_FAIL
	}

	if (APL_FAILURE == CO_Rtv_RptFileName("1q",
													APL_LOGFILE_DESC,
													100,
													argv[5],	
													argv,
													&fl_unitCostLog,
													l_debug_info_ptr) )
	{
      APL_GOBACK_FAIL
	}
	
	EXEC SQL COMMIT;
	IS_ANY_ORA_ERROR
	
	if ( argc < 10 )
   {
      fprintf(fl_userlog,"All Arguments expeced by the program are not passed\n");
		fflush(fl_userlog);
      APL_GOBACK_FAIL
   }

	if (CO_ReadToken( chr_finifile,
                     "INTL_HF_PATH",
                     chr_l_bldetdir,
                     l_debug_info_ptr)  == APL_FAILURE)
   {
      fprintf(fl_userlog,"Failed To Open The Billing Details File Directory\n");
		fflush(fl_userlog);
      APL_GOBACK_FAIL
   }
   

   strcpy(p_intlenv_data_struct_h->usr, argv[3]);
   strcpy(p_intlenv_data_struct_h->h_mode,	argv[4]);
	
	if (APL_FAILURE  == CO_RtvSysParams(l_debug_info_ptr))
	{
		fprintf(fl_userlog,"Failed To Get System Parameters\n");
		fflush(fl_userlog);
		APL_GOBACK_FAIL
	}
	
	strcpy(chr_h_batch_in_proc_progname,argv[0]);
   strcpy(chr_h_batch_in_proc_startdate,argv[2]);

   EXEC SQL SELECT ROWID,PROCESSING_STATUS
   INTO  :chr_h_batch_in_proc_rowid:int_i_batch_in_proc_rowid,
			:chr_h_restart_data:i_restart_info
   FROM SYS_BATCHPROC
   WHERE PROCESS_NAME   	= :chr_h_batch_in_proc_progname
   AND STARTDATE     =  :chr_h_batch_in_proc_startdate
   AND STATUS        = 'started'
   FOR UPDATE OF PROCESSING_STATUS, STATUS;
	
	if (sqlca.sqlcode <0)
   {
      fprintf(fl_userlog,"Batch Table Cannot be Locked.Please Run GPSS File generation again\n");
      CO_InsertErr(l_debug_info_ptr,
							ERR_REC_NOTFND,
							ltoa(sqlca.sqlcode),
                     APL_NULL_STRING,
							APL_NULL_STRING,
							__LINE__,
							__FILE__);
      APL_GOBACK_FAIL
   }

   if (APL_ZERO_RESULT_SET)
   {
      fprintf(fl_userlog,"Record with process_name %s ,start_date %s and status_ind as started not int_found in the batch table \n",argv[0],argv[2] );
      APL_GOBACK_FAIL
   }

	

	fprintf(fl_userlog,"Calling GPSS File Generation\n");
	strcpy(p_intlenv_data_struct_h->processtion, argv[5]);

	if (	APL_FAILURE == B_BlGPSSGenFn( argv,
													chr_l_billdt,
												   chr_l_bldetdir,
													fl_techlog,
												   fl_userlog,
													p_intlenv_data_struct_h,
													l_debug_info_ptr)
				)

	{
		fprintf(fl_userlog,"GPSS File Generation Returned Failure\n");

		EXEC SQL ROLLBACK WORK RELEASE;
		IS_ANY_ORA_ERROR
		APL_GOBACK_FAIL
	}

	if(strlen(chr_l_billdt) != 0)
	{
		if(BBAccFileNameFn(argv,
								&fl_unitCostAcc,
								 chr_l_billdt,
								 chr_l_bldetdir,
								 p_intlenv_data_struct_h,
								 l_debug_info_ptr)==APL_FAILURE)
		{
			fprintf(fl_userlog, "Could not create Account h_file.\n");
			APL_GOBACK_FAIL
		}

		 if(BBVolFileNameFn(argv,
									&fl_unitCostVol,
								  chr_l_billdt,
								  chr_l_bldetdir,
								  p_intlenv_data_struct_h,
								  l_debug_info_ptr)==APL_FAILURE)
		{
			fprintf(fl_userlog, "Could not create Volume h_file.\n");
			APL_GOBACK_FAIL
		}

		if(BBUnitCostFilePrntFn(chr_l_billdt,
										fl_unitCostAcc,
										fl_unitCostVol,
										fl_unitCostLog,
										p_intlenv_data_struct_h,
										l_debug_info_ptr)==APL_FAILURE)
		{
			fprintf(fl_userlog, "Unit Costing Function returned failure.\n");
			APL_GOBACK_FAIL
		}
	}
	
	EXEC SQL UPDATE SYS_BATCHPROC
	SET status = 'completed'
	WHERE ROWID = :chr_h_batch_in_proc_rowid;
	
	EXEC SQL COMMIT WORK;
	IS_ANY_ORA_ERROR
	fprintf(fl_userlog,"GPSS File Generation Program Returned Success\n");
	APL_GOBACK_SUCCESS

	

	RETURN_SUCCESS:
	if ( APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr) ) 
	{
		CO_ProcMonitor(fl_techlog,
					APL_NULL_STRING,
					l_debug_info_ptr,
					p_intlenv_data_struct_h);
		CO_FreeErrLst(l_debug_info_ptr);
	}
	CO_Proc_RptClose(fl_techlog,l_debug_info_ptr); 
	CO_Proc_RptClose(fl_userlog,l_debug_info_ptr); 
	CO_Proc_RptClose(fl_unitCostLog,l_debug_info_ptr); 
	if (!fl_unitCostAcc)
		fclose(fl_unitCostAcc);
	if (!fl_unitCostVol)
		fclose(fl_unitCostVol);
	if (!chr_finifile)
		fclose(chr_finifile);
	exit(0); 

	RETURN_FAILURE:
	if ( APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr) ) 
	{
		CO_ProcMonitor(fl_techlog,
					APL_NULL_STRING,
					l_debug_info_ptr,
					p_intlenv_data_struct_h);
		CO_FreeErrLst(l_debug_info_ptr);
	}
	CO_Proc_RptClose(fl_techlog,l_debug_info_ptr); 
	CO_Proc_RptClose(fl_userlog,l_debug_info_ptr); 
	CO_Proc_RptClose(fl_unitCostLog,l_debug_info_ptr); 
	if (fl_unitCostAcc)
		fclose(fl_unitCostAcc);
	if (fl_unitCostVol)
		fclose(fl_unitCostVol);
	if (chr_finifile)
		fclose(chr_finifile);
	exit(1); 
}


 

 int B_SelGFCPRODTYPFn(char				*chr_p_client,
							  char				*chr_p_gfcid,
							  char				*p_cltprdcd,
							  int					*int_p_retstat,
							  DEBUG_INFO_STRUCT_H    **l_debug_info_ptr)
{

	

	struct sqlca sqlca;
	
	char	h_dl_client[APL_CLIENT_LENGTH]					= APL_NULL_STRING;
	char	h_uniq_gcustody_id[13]										= APL_NULL_STRING;
	char	h_cltprdcd[6]									= APL_NULL_STRING;
	short i_cltprdcd										= 0;
	short i_uniq_gcustody_id											= 0;
	
	EXEC SQL VAR h_dl_client  IS STRING;
	EXEC SQL VAR h_uniq_gcustody_id    IS STRING;
	EXEC SQL VAR h_cltprdcd IS STRING;

	sqlca.sqlcode = 0;
	strcpy(h_dl_client,chr_p_client);

	EXEC SQL SELECT CLN_UNIQ_GCUSTODY_ID,CLN_CLTPROD_CD
				INTO :h_uniq_gcustody_id:i_uniq_gcustody_id ,:h_cltprdcd:i_cltprdcd
				FROM MT_CLIENT
				WHERE CLN_CODE = :h_dl_client;

	IS_ANY_ORA_ERROR

	if (i_uniq_gcustody_id == -1)
		strcpy(h_uniq_gcustody_id," ");
	if (i_cltprdcd == -1)
		strcpy(h_cltprdcd," ");

	strcpy(chr_p_gfcid,h_uniq_gcustody_id);
	strcpy(p_cltprdcd,h_cltprdcd);

	APL_GOBACK_SUCCESS

	

 	RETURN_SUCCESS:
   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,
					"Exiting out of B_BlGFCProdTyp gracefully\n",
					NULL,
					NULL);
   }
   return (APL_SUCCESS);

   RETURN_FAILURE:
   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,
					"Exiting out of B_BlGFCProdTyp unsuccessfully\n",
					NULL,
					NULL);
   }
   return (APL_FAILURE);
}
