/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
*/
/*********************************************************************
 *
 * Module Name         :      Master Maintenance
 *
 * File Name           :      MT_DbProcCA_NIS_BID.pc
 *
 * Description         :      This file contains db functions for updating
 *                            Master Details.
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author         Description       RFS No.
 * ---------   --------  ------------     -------------     ---------
 * 22/12/2005   1.0       Dnyanesh        New file       HDFCMT_014
 *
 *********************************************************************/


#include "CO_HostStructdef.h"
#include "CA_InterFace.h"
#include "CA_Common.h"

EXEC SQL INCLUDE SQLCA.H;




int MT_ModDBCA_NIS_BID(CA_NIS_BID_STRUCT_H *p_ca_nis_bid_struct_h,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr) 
{

	/* Variable Declarations */
  CA_NIS_BID_STRUCT_I *l_ca_nis_bid_struct_i;
  CA_NIS_APPLICATION_STRUCT_H *l_ca_nis_application_struct_h;
  INTL_ENV_DATA_STRUCT_H  *l_intl_envdatastruct_h;

  struct sqlca sqlca;

  char chr_acc_stamp_compare[APL_DATE_LEN] = APL_NULL_STRING;
  char chr_status_compare[APL_STATUS_LEN] = APL_NULL_STRING;
  char chr_sys_access_stamp[APL_DATE_LEN] = APL_NULL_STRING;
  short p_i_maker, p_i_makerdt, p_i_checker, p_i_checkerdt, p_i_access_stamp;
  short p_i_access_stamp_compare;
  short p_i_status = 0;
  short i_applfrmno = 0;
  short i_mmpaynw = 0;
  short i_mmpaid = 0;
  int int_error_flag = APL_SUCCESS;
  int int_l_rowexists = 0;
  int int_l_cnt = 0;
  char l_applfrmno[11] = APL_NULL_STRING;
  double l_mmpaynw = 0;
  double l_mmpaid = 0;
   char  *l_key_codes[19];
   char  *l_key_values[19];
   char  chr_l_table_name[50] = APL_NULL_STRING;
	  char  chr_l_field_val[40] = APL_NULL_STRING;
	  char chr_brevno[12] = APL_NULL_STRING;
char chr_l_sysdate_b[APL_DATE_LEN] = APL_NULL_STRING;
		int l_count =0;
/* Added By Sana for NS event closure enhancement [kotak][start] */
int l_closure_no_of_days = 0;
short i_closure_no_of_days  = 0;
char  chr_l_closure_dt[APL_DATE_LEN] = APL_NULL_STRING;
short i_l_closure_dt = 0;
int l_date_diff =0;
memset(chr_l_closure_dt,APL_NULL_CHAR,APL_DATE_LEN);
/* Added By Sana for NS event closure enhancement [kotak][end] */

		int	int_retval = APL_SUCCESS;
#ifdef APL_THREADS
    APL_SET_CONTEXT
    EXEC SQL CONTEXT USE :my_ctx_local;
#endif

	 APL_FUNCTION_ENTER(APL_OUT_FILE)

  l_ca_nis_bid_struct_i=(CA_NIS_BID_STRUCT_I*)calloc(1,sizeof(CA_NIS_BID_STRUCT_I));
  APL_MALLOC_FAIL(l_ca_nis_bid_struct_i)
  l_ca_nis_application_struct_h=(CA_NIS_APPLICATION_STRUCT_H*)calloc(1,sizeof(CA_NIS_APPLICATION_STRUCT_H));
  APL_MALLOC_FAIL(l_ca_nis_application_struct_h)
  l_intl_envdatastruct_h=(INTL_ENV_DATA_STRUCT_H*)calloc(1,sizeof(INTL_ENV_DATA_STRUCT_H));
  APL_MALLOC_FAIL(l_intl_envdatastruct_h)


  p_i_maker =0;
  p_i_makerdt =0;
  p_i_checker =0;
  p_i_checkerdt =0;
  p_i_access_stamp =0;
  p_i_access_stamp_compare =0;

 if (!strlen(p_ca_nis_bid_struct_h->h_corp_id)) l_ca_nis_bid_struct_i->i_corp_id =-1;
     else l_ca_nis_bid_struct_i->i_corp_id =0;

 if (!strlen(p_ca_nis_bid_struct_h->h_cln_code)) l_ca_nis_bid_struct_i->i_cln_code =-1;
     else l_ca_nis_bid_struct_i->i_cln_code =0;

 if (!strlen(p_ca_nis_bid_struct_h->h_depo_code)) l_ca_nis_bid_struct_i->i_depo_code =-1;
     else l_ca_nis_bid_struct_i->i_depo_code =0;

 if (!strlen(p_ca_nis_bid_struct_h->h_depo_cln_id)) l_ca_nis_bid_struct_i->i_depo_cln_id =-1;
     else l_ca_nis_bid_struct_i->i_depo_cln_id =0;

 if (!strlen(p_ca_nis_bid_struct_h->h_dp_id)) l_ca_nis_bid_struct_i->i_dp_id =-1;
     else l_ca_nis_bid_struct_i->i_dp_id =0;

 if (!strlen(p_ca_nis_bid_struct_h->h_bdate)) l_ca_nis_bid_struct_i->i_bdate =-1;
     else l_ca_nis_bid_struct_i->i_bdate =0;

 if (!strlen(p_ca_nis_bid_struct_h->h_filegenflg)) l_ca_nis_bid_struct_i->i_filegenflg =-1;
     else l_ca_nis_bid_struct_i->i_filegenflg =0;

 if (!strlen(p_ca_nis_bid_struct_h->h_paycomm)) l_ca_nis_bid_struct_i->i_paycomm =-1;
     else l_ca_nis_bid_struct_i->i_paycomm =0;

 if (!strlen(p_ca_nis_bid_struct_h->h_checker)) l_ca_nis_bid_struct_i->i_checker =-1;
     else l_ca_nis_bid_struct_i->i_checker =0;

 if (!strlen(p_ca_nis_bid_struct_h->h_checker_dt)) l_ca_nis_bid_struct_i->i_checker_dt =-1;
     else l_ca_nis_bid_struct_i->i_checker_dt =0;

 if (!strlen(p_ca_nis_bid_struct_h->h_status)) l_ca_nis_bid_struct_i->i_status =-1;
     else l_ca_nis_bid_struct_i->i_status =0;

 if (!strlen(p_ca_nis_bid_struct_h->h_hf_date)) l_ca_nis_bid_struct_i->i_hf_date=-1;
	  else l_ca_nis_bid_struct_i->i_hf_date =0;

 if (!strlen(p_ca_nis_bid_struct_h->h_clt_seqnum)) l_ca_nis_bid_struct_i->i_clt_seqnum=-1;
	  else l_ca_nis_bid_struct_i->i_clt_seqnum =0;

 if (!strlen(p_ca_nis_bid_struct_h->h_ae_passind)) l_ca_nis_bid_struct_i->i_ae_passind=-1;
	  else l_ca_nis_bid_struct_i->i_ae_passind =0;

 if (!strlen(p_ca_nis_bid_struct_h->h_processed_date)) l_ca_nis_bid_struct_i->i_processed_date=-1;
	  else l_ca_nis_bid_struct_i->i_processed_date =0;


  if(CO_RtvSysDtTime(chr_sys_access_stamp,l_debug_info_ptr) !=APL_SUCCESS)
	{
		APL_GOBACK_FAIL
	}
 if(APL_FAILURE == CO_RtvSysDt(chr_l_sysdate_b,l_debug_info_ptr))
 {
    printf("Error in getting date");
    APL_GOBACK_FAIL
 }

/* Added By Sana for NS event closure enhancement [kotak][start] */
		EXEC SQL SELECT FIELD_VAL into :l_closure_no_of_days:i_closure_no_of_days 
			FROM PRO_GSSPLVAL
			WHERE MAIN_FUN = 'CAEVENT'
				AND SUB_PROCESS = 'NS_BB_CLOSE_DT_DAYS';
		if (sqlca.sqlcode == 1403)
		{
			printf("\n\nNo Cut-Over Date maintained. Hence the event will remain in RA status\n\n");
			l_closure_no_of_days = 0;
		}
		else if (sqlca.sqlcode <0)
		{
			printf("\n\nDB Error Occured. SQLCA.SQLCODE is |%d|\n",sqlca.sqlcode);
			APL_GOBACK_FAIL
		}
		printf("\nClosure no of days maintained is : |%d|\n",l_closure_no_of_days);
		if(l_closure_no_of_days > 0) 
		{
			EXEC SQL SELECT DECODE(BC_TO_DATE,NULL,NULL,BC_TO_DATE+:l_closure_no_of_days) 
											into chr_l_closure_dt:i_l_closure_dt
								FROM CAEVENT
								WHERE CORP_ID = :p_ca_nis_bid_struct_h->h_corp_id;
			IS_ANY_ORA_ERROR
			printf("\nCut-Over date for the event is |%s|\n",chr_l_closure_dt);
			if(strlen(chr_l_closure_dt) > 0)
			{
				if(APL_FAILURE == CO_Pro_DateComp(chr_l_sysdate_b,chr_l_closure_dt,&l_date_diff,l_debug_info_ptr))
				{
					printf("\n\nFailed in CO_Pro_DateComp function\n\n");
					APL_GOBACK_FAIL
				}
				printf("\n\nDate diff we got is |%d|\n\n",l_date_diff);
				if(l_date_diff >= 0)
				{
					printf("Cut-Over Date has not passed. Application entries allowed\n\n");
				}
				else
				{
					if (CO_InsertErr(l_debug_info_ptr,
									ERR_CUTOVER_DT_PASS,
									APL_NULL_STRING,
									APL_NULL_STRING,
									APL_NULL_STRING,
									__LINE__,
									__FILE__) != APL_SUCCESS)
									APL_GOBACK_FAIL
				}
			}
		}
		/* Added By Sana for NS event closure enhancement [kotak][end] */
	
 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_INPUT))
	{

		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered Input of Function MT_ModDBCA_NIS_BID\n",
													NULL,p_intl_envdatastruct_h);
 	}

		strcpy(p_ca_nis_bid_struct_h->h_status,STATUS_UAUTH);
    l_ca_nis_bid_struct_i->i_status =0;
   	strcpy(p_ca_nis_bid_struct_h->h_maker,p_intl_envdatastruct_h->usr);
		l_ca_nis_bid_struct_i->i_maker=0;
  	strcpy(p_ca_nis_bid_struct_h->h_maker_dt,chr_sys_access_stamp);
		l_ca_nis_bid_struct_i->i_maker_dt=0;
		strcpy(p_ca_nis_bid_struct_h->h_access_stamp,chr_sys_access_stamp);
		l_ca_nis_bid_struct_i->i_access_stamp =0;

		printf("l_ca_nis_bid_struct_h->corp_id is ***%s***",p_ca_nis_bid_struct_h->h_corp_id);
		printf("l_ca_nis_bid_struct_h->h_cln_code is ***%s***",p_ca_nis_bid_struct_h->h_cln_code);
		printf("l_ca_nis_bid_struct_h->h_applfrmno is ***%s***",p_ca_nis_bid_struct_h->h_applfrmno);
		printf("l_ca_nis_bid_struct_h->h_depo_code is ***%s***",p_ca_nis_bid_struct_h->h_depo_code);
		printf("l_ca_nis_bid_struct_h->h_depo_cln_id is ***%s***",p_ca_nis_bid_struct_h->h_depo_cln_id);
		printf("l_ca_nis_bid_struct_h->h_dp_id is ***%s***",p_ca_nis_bid_struct_h->h_dp_id);
		printf("l_ca_nis_bid_struct_h->h_bdate is ***%s***",p_ca_nis_bid_struct_h->h_bdate);
		printf("l_ca_nis_bid_struct_h->h_filegenflg is ***%s***",p_ca_nis_bid_struct_h->h_filegenflg);
		printf("l_ca_nis_bid_struct_h->h_paycomm is ***%s***",p_ca_nis_bid_struct_h->h_paycomm);
		printf("l_ca_nis_bid_struct_h->h_maker is ***%s***",p_ca_nis_bid_struct_h->h_maker);
		printf("l_ca_nis_bid_struct_h->h_maker_dt is ***%s***",p_ca_nis_bid_struct_h->h_maker_dt);
		printf("l_ca_nis_bid_struct_h->checker is ***%s***",p_ca_nis_bid_struct_h->h_checker);
		printf("l_ca_nis_bid_struct_h->checkerdt is ***%s***",p_ca_nis_bid_struct_h->h_checker_dt);
		printf("l_ca_nis_bid_struct_h->h_access_stamp is ***%s***",p_ca_nis_bid_struct_h->h_access_stamp);
		printf("l_ca_nis_bid_struct_h->h_bqty1 is ***%lf***",p_ca_nis_bid_struct_h->h_bqty1);
		printf("l_ca_nis_bid_struct_h->h_brate1 is ***%lf***",p_ca_nis_bid_struct_h->h_brate1);
		printf("l_ca_nis_bid_struct_h->h_brate2 is ***%lf***",p_ca_nis_bid_struct_h->h_brate2);
		printf("l_ca_nis_bid_struct_h->h_brate3 is ***%lf***",p_ca_nis_bid_struct_h->h_brate3);
		printf("l_ca_nis_bid_struct_h->h_brevno is ***%d***",p_ca_nis_bid_struct_h->h_brevno);


		fflush(stdout);	
		
		/*Added by Chirag on 25/02/2006*/
		EXEC SQL SELECT COUNT(*) INTO :int_l_cnt FROM CA_NIS_BID
				WHERE CORP_ID=:p_ca_nis_bid_struct_h->h_corp_id AND
					  CLN_CODE=:p_ca_nis_bid_struct_h->h_cln_code AND
					  BREVNO=:p_ca_nis_bid_struct_h->h_brevno;
		
		IS_ANY_ORA_ERROR;

		if(int_l_cnt > 0)
		{
			if (CO_InsertErr(l_debug_info_ptr,
								MAP_DET_EXIST,
							  	APL_NULL_STRING,
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__) != APL_SUCCESS)
				APL_GOBACK_FAIL
		}
	    /*Added by Chirag on 25/02/2006*/
		EXEC SQL SELECT COUNT(*) INTO :int_l_cnt FROM CA_NIS_BID
					WHERE APPLFRMNO =:p_ca_nis_bid_struct_h->h_applfrmno
					AND CORP_ID =:p_ca_nis_bid_struct_h->h_corp_id
					AND SYND_MEMBR =:p_ca_nis_bid_struct_h->h_synd_membr
					AND BREVNO=:p_ca_nis_bid_struct_h->h_brevno;
		
		IS_ANY_ORA_ERROR;
		
		if(int_l_cnt > 0)
		{
			if (CO_InsertErr(l_debug_info_ptr,
								ERR_SAME_APPLICATION_FORM_NUMBER,
							  	APL_NULL_STRING,
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__) != APL_SUCCESS)
				APL_GOBACK_FAIL
		}

		
		EXEC SQL INSERT INTO CA_NIS_BID VALUES (:p_ca_nis_bid_struct_h:l_ca_nis_bid_struct_i);

		IS_ANY_ORA_ERROR_AND_DUPLICATE(MAP_DET_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
	}
	else
	{

	l_key_codes[0]="CORP_ID";
	l_key_codes[1]="CLN_CODE";
	l_key_codes[2]="BREVNO";
	l_key_codes[3]=APL_NULL_STRING;

	sprintf(chr_brevno,"%d",p_ca_nis_bid_struct_h->h_brevno );
	
	l_key_values[0]=p_ca_nis_bid_struct_h -> h_corp_id;
	l_key_values[1]=p_ca_nis_bid_struct_h -> h_cln_code;
	l_key_values[2]=chr_brevno;
	l_key_values[3] = APL_NULL_STRING;
		
   strcpy(chr_l_table_name,"CA_NIS_BID");

    int_retval = CR_Rtv_MastChldChrVal( l_key_codes,
                                        l_key_values,
                                        chr_l_table_name,
                                        "ACCESS_STAMP",
                                        chr_l_field_val,
                                        l_debug_info_ptr);

		printf("OUT of access_stamp\n");

    if (int_retval != APL_SUCCESS)
         APL_GOBACK_FAIL

		strcpy(chr_acc_stamp_compare,chr_l_field_val);
    
		int_retval = CR_Rtv_MastChldChrVal( l_key_codes,
                                        l_key_values,
                                        chr_l_table_name,
                                        "STATUS",
                                        chr_l_field_val,
                                        l_debug_info_ptr);

		printf("OUT of STATUS\n");
    if (int_retval != APL_SUCCESS)
		{
			 printf("Some error .....\n");
         APL_GOBACK_FAIL
		}

		strcpy(chr_status_compare,chr_l_field_val);
	}

 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_MODIFY))
	{
  	p_i_checker =-1;
  	p_i_checkerdt =-1;
		strcpy(p_ca_nis_bid_struct_h->h_checker,APL_NULL_STRING);
		strcpy(p_ca_nis_bid_struct_h->h_checker_dt,APL_NULL_STRING);

		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered modify of Function MT_ModDBCA_NIS_BID\n",
													NULL,p_intl_envdatastruct_h);
 	}
		printf("p_ca_nis_bid_struct_h->h_access_stamp |%s|\n",p_ca_nis_bid_struct_h->h_access_stamp);
		printf("chr_acc_stamp_compare |%s|\n",chr_acc_stamp_compare);

	   if (!strcmp(p_ca_nis_bid_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   {
			strcpy(p_ca_nis_bid_struct_h->h_access_stamp,chr_sys_access_stamp);
			l_ca_nis_bid_struct_i->i_access_stamp =0;
       strcpy(p_ca_nis_bid_struct_h->h_status,STATUS_UAUTH);
			l_ca_nis_bid_struct_i->i_status =0;

			EXEC SQL UPDATE CA_NIS_BID  SET 
            	MAKER =:p_intl_envdatastruct_h->usr:p_i_maker,
					MAKER_DT =:chr_sys_access_stamp:p_i_makerdt,
					CHECKER =:p_ca_nis_bid_struct_h->h_checker:p_i_checker,
					CHECKER_DT =:p_ca_nis_bid_struct_h->h_checker_dt:p_i_checkerdt,
            	    STATUS =:p_ca_nis_bid_struct_h->h_status:l_ca_nis_bid_struct_i->i_status,
					BQTY1 =:p_ca_nis_bid_struct_h->h_bqty1 :l_ca_nis_bid_struct_i-> i_bqty1,
					BRATE1 =:p_ca_nis_bid_struct_h->h_brate1 :l_ca_nis_bid_struct_i-> i_brate1,
					BQTY2 =:p_ca_nis_bid_struct_h->h_bqty2 :l_ca_nis_bid_struct_i-> i_bqty2,
					BRATE2 =:p_ca_nis_bid_struct_h->h_brate2 :l_ca_nis_bid_struct_i-> i_brate2,
					BQTY3 =:p_ca_nis_bid_struct_h->h_bqty3 :l_ca_nis_bid_struct_i-> i_bqty3,
					BRATE3 =:p_ca_nis_bid_struct_h->h_brate3 :l_ca_nis_bid_struct_i-> i_brate3,
					MMPAYNW =:p_ca_nis_bid_struct_h->h_mmpaynw :l_ca_nis_bid_struct_i-> i_mmpaynw,
					BDATE =:p_ca_nis_bid_struct_h->h_bdate :l_ca_nis_bid_struct_i-> i_bdate,
					/*DEPO_CODE =:p_ca_nis_bid_struct_h->h_depo_code :l_ca_nis_bid_struct_i-> i_depo_code,
					DEPO_CLN_ID =:p_ca_nis_bid_struct_h->h_depo_cln_id :l_ca_nis_bid_struct_i-> i_depo_cln_id,
					DP_ID =:p_ca_nis_bid_struct_h->h_dp_id :l_ca_nis_bid_struct_i-> i_dp_id,*/
					ACCESS_STAMP =:p_ca_nis_bid_struct_h->h_access_stamp :l_ca_nis_bid_struct_i-> i_access_stamp,
					//SYND_MEMBR =:p_ca_nis_bid_struct_h->h_synd_membr :l_ca_nis_bid_struct_i-> i_synd_membr,
					PAYCOMM =:p_ca_nis_bid_struct_h->h_paycomm :l_ca_nis_bid_struct_i-> i_paycomm
					//APPLFRMNO =:p_ca_nis_bid_struct_h->h_applfrmno :l_ca_nis_bid_struct_i-> i_applfrmno

				   

				WHERE 
					CORP_ID =:p_ca_nis_bid_struct_h->h_corp_id AND 
					CLN_CODE =:p_ca_nis_bid_struct_h->h_cln_code AND
					BREVNO =:p_ca_nis_bid_struct_h->h_brevno ;
             printf("Sqlca.sqlcode  |%d|\n",sqlca.sqlcode);
					IS_ANY_ORA_ERROR;	
	   }
		else 
	   {
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   } 
	}

 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_AUTHORISE))
	{

		printf("Enter authorize mode ....\n");
		fflush(stdout);
		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered authorize by chiragof Function MT_ModDBNoDlvDet\n",
													NULL,p_intl_envdatastruct_h);
 	}

			printf("beforeaccess stamp matched....\n");
		fflush(stdout);
		if (!strcmp(p_ca_nis_bid_struct_h->h_access_stamp,chr_acc_stamp_compare))
	    {
			printf("access stamp matched....\n");
		fflush(stdout);
   		if(strcmp(p_ca_nis_bid_struct_h->h_status,STATUS_DEL_UAUTH))
	    	{
			printf("status no delunauth....\n");
		fflush(stdout);
				l_count =0;
				EXEC SQL SELECT COUNT(*) INTO :l_count
							FROM MT_CLIENT
							WHERE CLN_CODE=:p_ca_nis_bid_struct_h->h_cln_code
							AND  STATUS='AA';
				IS_ANY_ORA_ERROR;	
			printf("select done from mtclient....\n");
		fflush(stdout);
				if(l_count==1)
				{
					l_count=1;
					EXEC SQL SELECT COUNT(*) INTO :l_count
								FROM CAEVENT A, MT_INSTRUMENT B
								WHERE A.STATUS IN ('RA','PA')
								AND  B.STATUS ='AA'
								AND CORP_ID =:p_ca_nis_bid_struct_h->h_corp_id
								AND A.INSTR_CODE=B.INSTR_CODE;
					IS_ANY_ORA_ERROR;

			printf("select done from mtinstrument....\n");
		fflush(stdout);
					if(l_count!=1)
					{
						/** ask - put insert error actually**/
						printf("invalid instrument\n");
		fflush(stdout);
						APL_GOBACK_FAIL
					}
				}
				else
				{
					printf("invalid client\n");
		fflush(stdout);
					APL_GOBACK_FAIL
				}

	    		strcpy(p_ca_nis_bid_struct_h->h_access_stamp,chr_sys_access_stamp);
	    		l_ca_nis_bid_struct_i->i_access_stamp =0;
   	    	strcpy(p_ca_nis_bid_struct_h->h_checker,p_intl_envdatastruct_h->usr);
	    		l_ca_nis_bid_struct_i->i_checker=0;
	  	    	strcpy(p_ca_nis_bid_struct_h->h_checker_dt,chr_sys_access_stamp);
	    		l_ca_nis_bid_struct_i->i_checker_dt=0;
  	         strcpy(p_ca_nis_bid_struct_h->h_status,STATUS_AUTH);
	    		l_ca_nis_bid_struct_i->i_status =0;

			printf("before update of nis_bid....\n");
		fflush(stdout);
	    		EXEC SQL UPDATE CA_NIS_BID SET 
           	CHECKER =:p_intl_envdatastruct_h->usr:p_i_checker,
            	CHECKER_DT =:chr_sys_access_stamp:p_i_access_stamp,
					ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp,
            	STATUS =:p_ca_nis_bid_struct_h->h_status:l_ca_nis_bid_struct_i->i_status
				WHERE 
               CORP_ID =:p_ca_nis_bid_struct_h->h_corp_id AND
               CLN_CODE =:p_ca_nis_bid_struct_h->h_cln_code AND
               BREVNO =:p_ca_nis_bid_struct_h->h_brevno ;

				printf("Reached 1\n");
		fflush(stdout);
				IS_ANY_ORA_ERROR;	

				EXEC SQL SELECT COUNT(*) INTO :l_count
							FROM CA_NIS_APPLICATION 
							WHERE CORP_ID =:p_ca_nis_bid_struct_h->h_corp_id AND
							CLN_CODE =:p_ca_nis_bid_struct_h->h_cln_code;

				printf("Reached 2 count is %d\n",l_count);
		fflush(stdout);
				IS_ANY_ORA_ERROR;

				EXEC SQL SELECT APPLFRMNO,MMPAYNW INTO :l_applfrmno:i_applfrmno,:l_mmpaynw:i_mmpaynw
							FROM CA_NIS_BID
							WHERE
							CORP_ID =:p_ca_nis_bid_struct_h->h_corp_id AND
			               CLN_CODE =:p_ca_nis_bid_struct_h->h_cln_code AND
						   BREVNO =:p_ca_nis_bid_struct_h->h_brevno ;
				IS_ANY_ORA_ERROR;
				printf("Form no: |%s|\n",l_applfrmno);
				printf("Margin money paynw : |%lf|\n",l_mmpaynw);
		fflush(stdout);

				if(l_count==0)
				{
					
					l_intl_envdatastruct_h =p_intl_envdatastruct_h;
					strcpy(l_intl_envdatastruct_h->h_mode,APL_FUNC_INPUT);
					strcpy(l_ca_nis_application_struct_h->h_corp_id,p_ca_nis_bid_struct_h->h_corp_id);
					strcpy(l_ca_nis_application_struct_h->h_cln_code,p_ca_nis_bid_struct_h->h_cln_code);
					strcpy(l_ca_nis_application_struct_h->h_applncode,l_applfrmno);
					strcpy(l_ca_nis_application_struct_h->h_adate,chr_l_sysdate_b);
					strcpy(l_ca_nis_application_struct_h->h_filegenflg,"N");
					strcpy(l_ca_nis_application_struct_h->h_paycomm,APL_NULL_STRING);
					strcpy(l_ca_nis_application_struct_h->h_maker,"SYSTEM");
					strcpy(l_ca_nis_application_struct_h->h_maker_dt,chr_l_sysdate_b);
					strcpy(l_ca_nis_application_struct_h->h_checker,"SYSTEM");
					strcpy(l_ca_nis_application_struct_h->h_checker_dt,chr_l_sysdate_b);
					strcpy(l_ca_nis_application_struct_h->h_access_stamp,chr_sys_access_stamp);
					strcpy(l_ca_nis_application_struct_h->h_status,"AA");
					l_ca_nis_application_struct_h->h_brevno=p_ca_nis_bid_struct_h->h_brevno;
					strcpy(l_ca_nis_application_struct_h->h_bk_build_ind,"Y");
					strcpy(l_ca_nis_application_struct_h->h_alloted,"N");
					l_ca_nis_application_struct_h->h_mmpaid=l_mmpaynw;
				
				printf("Status in Authorise |%s|\n",l_ca_nis_application_struct_h->h_status);
				printf("just before nis app call \n");
    			int_retval = MT_ModDBCA_NIS_APPLICATION( l_ca_nis_application_struct_h,
              						                          l_intl_envdatastruct_h,
               					                          l_debug_info_ptr);
					    if (int_retval != APL_SUCCESS)
         				APL_GOBACK_FAIL 
				
				}
				else
				{
				EXEC SQL SELECT MMPAID INTO :l_mmpaid:i_mmpaid
						FROM CA_NIS_APPLICATION
						WHERE
						CORP_ID  =:p_ca_nis_bid_struct_h->h_corp_id AND
						CLN_CODE=:p_ca_nis_bid_struct_h->h_cln_code;
						
				
				IS_ANY_ORA_ERROR;
				printf("MMPAID BEFORE ADDING : |%lf|\n",l_mmpaid);
				l_mmpaid = l_mmpaid+l_mmpaynw;
				printf("MMPAID AFTER ADDING : |%lf|\n",l_mmpaid);
				
				printf("just before update nis app call \n");
            	EXEC SQL UPDATE CA_NIS_APPLICATION
                   SET ADATE=:chr_l_sysdate_b,
                      APPLNCODE=:l_applfrmno:i_applfrmno, 
                      AQTY=0, ARATE =0,MMPAID =:l_mmpaid:i_mmpaid, filegenflg ='N',bk_build_ind ='Y', alloted ='N',BREVNO =: p_ca_nis_bid_struct_h->h_brevno
                  WHERE CORP_ID  =:p_ca_nis_bid_struct_h->h_corp_id AND
                        CLN_CODE=:p_ca_nis_bid_struct_h->h_cln_code; 
							/**	AND BREVNO =:p_ca_nis_bid_struct_h->h_brevno;**/
               IS_ANY_ORA_ERROR;
				}
			}
   	   else  
	    	{
				EXEC SQL UPDATE CA_NIS_APPLICATION
						 SET ADATE=:chr_l_sysdate_b,
							 APPLNCODE=:p_ca_nis_bid_struct_h->h_applfrmno, 
							 AQTY=0, ARATE =0,MMPAID = 0, filegenflg ='N',bk_build_ind ='Y', alloted ='N'
						WHERE CORP_ID  =:p_ca_nis_bid_struct_h->h_corp_id AND
								CLN_CODE=:p_ca_nis_bid_struct_h->h_cln_code AND
								BREVNO =:p_ca_nis_bid_struct_h->h_brevno;
					IS_ANY_ORA_ERROR;

	    		EXEC SQL DELETE CA_NIS_BID 
				WHERE 
               CORP_ID =:p_ca_nis_bid_struct_h->h_corp_id AND
               CLN_CODE =:p_ca_nis_bid_struct_h->h_cln_code AND
               BREVNO =:p_ca_nis_bid_struct_h->h_brevno; 
			   IS_ANY_ORA_ERROR;
	    	}
	   }
		else 
	   {
			printf("access stamp doesnt match...\n");
			fflush(stdout);
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   } 
	}

 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_RESET))
	{

		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered reset of Function MT_ModDBNoDlvDet\n",
													NULL,p_intl_envdatastruct_h);
 	}

		if (!strcmp(p_ca_nis_bid_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   {
   		if(!strcmp(p_ca_nis_bid_struct_h->h_status,STATUS_DEL_UAUTH))
	    	{
	    		strcpy(p_ca_nis_bid_struct_h->h_access_stamp,chr_sys_access_stamp);
	    		l_ca_nis_bid_struct_i->i_access_stamp =0;
   	    	strcpy(p_ca_nis_bid_struct_h->h_checker,p_intl_envdatastruct_h->usr);
	    		l_ca_nis_bid_struct_i->i_checker=0;
  	    	strcpy(p_ca_nis_bid_struct_h->h_checker_dt,chr_sys_access_stamp);
	    		l_ca_nis_bid_struct_i->i_checker_dt=0;
          strcpy(p_ca_nis_bid_struct_h->h_status,STATUS_AUTH);
	    		l_ca_nis_bid_struct_i->i_status =0;

	    		EXEC SQL UPDATE CA_NIS_BID SET 
           	CHECKER =:p_intl_envdatastruct_h->usr:p_i_checker,
            	CHECKER_DT =:chr_sys_access_stamp:p_i_access_stamp,
					ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp,
            	STATUS =:p_ca_nis_bid_struct_h->h_status:l_ca_nis_bid_struct_i->i_status
				WHERE 
               CORP_ID =:p_ca_nis_bid_struct_h->h_corp_id AND
               CLN_CODE =:p_ca_nis_bid_struct_h->h_cln_code AND
               BREVNO =:p_ca_nis_bid_struct_h->h_brevno ;

				IS_ANY_ORA_ERROR;	
			}
	   }
		else 
	   {
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   } 
	}

 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_DELETE))
	{
  	p_i_checker =-1;
  	p_i_checkerdt =-1;
		strcpy(p_ca_nis_bid_struct_h->h_checker,APL_NULL_STRING);
		strcpy(p_ca_nis_bid_struct_h->h_checker_dt,APL_NULL_STRING);

		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered delete of Function MT_ModDBNoDlvDet\n",
													NULL,p_intl_envdatastruct_h);
 	}

	   if (!strcmp(p_ca_nis_bid_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   {
			strcpy(p_ca_nis_bid_struct_h->h_access_stamp,chr_sys_access_stamp);
			l_ca_nis_bid_struct_i->i_access_stamp =0;
       strcpy(p_ca_nis_bid_struct_h->h_status,STATUS_DEL_UAUTH);
			l_ca_nis_bid_struct_i->i_status =0;

			EXEC SQL UPDATE CA_NIS_BID SET 
            	MAKER =:p_intl_envdatastruct_h->usr:p_i_maker,
					MAKER_DT =:chr_sys_access_stamp:p_i_makerdt,
					CHECKER =:p_ca_nis_bid_struct_h->h_checker:p_i_checker,
					CHECKER_DT =:p_ca_nis_bid_struct_h->h_checker_dt:p_i_checkerdt,
            	STATUS =:p_ca_nis_bid_struct_h->h_status:l_ca_nis_bid_struct_i->i_status,
					ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp
				WHERE 
               CORP_ID =:p_ca_nis_bid_struct_h->h_corp_id AND
               CLN_CODE =:p_ca_nis_bid_struct_h->h_cln_code AND
               BREVNO =:p_ca_nis_bid_struct_h->h_brevno ; 
              
					IS_ANY_ORA_ERROR;	
	   }
		else 
	   {
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   } 
	}


 if (int_error_flag == APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}
 APL_GOBACK_SUCCESS

 RETURN_SUCCESS :
	{
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
		free(l_ca_nis_bid_struct_i);
		return(APL_SUCCESS);
	}
  RETURN_FAILURE :
	{
 	APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
		free(l_ca_nis_bid_struct_i);
		return(APL_FAILURE);
	}

}
