













 
#include "stdio_64.h"
#include <unistd.h>
#include "Intellect_Common.h"
#include "Intellect_Interface.h"
#include "MT_Interface.h"
#define PRECHECK 'A'
#define STARTED  'B'
#define COMPLETED_IND 'C'
#define EXECEOD 'D'
#define EOMCHECK  'E'
#define EOMPURGE 'F'
#define EXECBOD 'G'
#define EODRUNSTATUS 'H'
#define STOPPED 'I'

EXEC SQL INCLUDE SQLCA;
int main(int argc,char **argv) //AIX - Warnings Removal
{

	
    /* Added by kotubabu for Linux Migration -Start*/
    #ifdef OS_LINUX
	FILE *chr_finifile,*pfile;
    #else
    FILE *chr_finifile = APL_OUT_FILE;
    FILE *pfile = APL_OUT_FILE;
    #endif
    #ifdef OS_LINUX
     chr_finifile = APL_OUT_FILE;
	 pfile = APL_OUT_FILE;
    #endif
   /* Added by kotubabu for Linux Migration-End*/
	char chr_inifile[PATH_LENGTH],chr_l_uname[APL_USERID_LEN],chr_l_passwd[APL_PASSWD_LEN],chr_custody_id_b[APL_USERID_LEN];	
	char chr_l_rptpath[PATH_LENGTH],chr_l_fname[PATH_LENGTH];
	DEBUG_INFO_STRUCT_H *l_debuginfo = (DEBUG_INFO_STRUCT_H *)NULL;
   /* OPT:AIX char chr_l_param1[2],chr_l_param[20], chr_l_sysdate_b[20],chr_l_eodflag[2],chr_l_env_str[2000],int_l_status[2],chr_l_countrycode[3]; */
   char chr_l_param1[2],chr_l_param[20], chr_l_sysdate_b[20],chr_l_eodflag[2],chr_l_env_str[2000],int_l_status[16];
   int int_l_dcount;
	long int_l_next_number;
	int int_l_counter=0;
	char chr_l_funcname[51];

	EXEC SQL BEGIN DECLARE SECTION;

	DEBUG_INFO_STRUCT_H **l_debug_info_ptr ;
   EXEC SQL VAR chr_l_sysdate_b IS STRING;
	EXEC SQL VAR chr_l_param IS STRING;
   EXEC SQL VAR chr_l_eodflag IS STRING;
   EXEC SQL VAR chr_l_env_str IS STRING;
	EXEC SQL VAR int_l_status IS STRING;
	//EXEC SQL VAR chr_l_countrycode IS STRING;
   EXEC SQL VAR chr_l_funcname IS STRING;

	EXEC SQL END DECLARE SECTION;
	
	struct sqlca sqlca;

   memset(chr_inifile,APL_NULL_CHAR,PATH_LENGTH);
   memset(chr_l_uname,APL_NULL_CHAR,40);
   memset(chr_l_passwd,APL_NULL_CHAR,40);	
   memset(chr_l_funcname,APL_NULL_CHAR,sizeof(chr_l_funcname));
   memset(chr_l_sysdate_b,APL_NULL_CHAR,sizeof(chr_l_sysdate_b));

   if ( ( (l_debug_info_ptr) = (DEBUG_INFO_STRUCT_H **)calloc(1,sizeof(DEBUG_INFO_STRUCT_H *)) ) == NULL )
		APL_GOBACK_FAIL ;

	strcpy(chr_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_inifile,"/intl_sun.cfg");
	if ( (chr_finifile = fopen(chr_inifile,"r") ) == NULL)
	        APL_GOBACK_FAIL;

	if(CO_ReadToken(chr_finifile,"INTL_LOG_PATH",chr_l_rptpath,l_debug_info_ptr)==APL_FAILURE)
		APL_GOBACK_FAIL

	strcpy(chr_l_fname,chr_l_rptpath);
	strcat(chr_l_fname,"runeodsmac.lst");
	strcat(chr_l_fname ,APL_NULL_STRING);

	if ( (pfile = fopen(chr_l_fname,"w")) == NULL)
		 APL_GOBACK_FAIL

	 fprintf(pfile,"STEP");
    strcpy(chr_l_param1,argv[1]); 
	 strcpy(chr_l_param,argv[2]); 
	
	 fprintf(pfile,"ARGV [0]:%c,[1]:%s",chr_l_param1[0],chr_l_param);

    APL_FETCH_DB_LOGIN_DETAILS(chr_finifile, chr_custody_id_b, chr_l_uname, chr_l_passwd , APL_OUT_FILE , &l_debuginfo)
	 while (1)
	 {
   	EXEC SQL CONNECT :chr_l_uname IDENTIFIED BY :chr_l_passwd;

		if(sqlca.sqlcode == 1089)
		{
			if (int_l_counter > 10)
			{
				fprintf(pfile,"\n Database Login l_debuglist even after 10 trials..Pls contact DBA %d\n",sqlca.sqlcode);
				APL_GOBACK_FAIL
         }
			else
			   sleep(120);
		}
		else if(sqlca.sqlcode < 0)
   	{
	  		printf("\n Data Base Error Found During Connecting to Data Base sqlca.sqlcode is :%d:.......\n",sqlca.sqlcode);
     		APL_GOBACK_FAIL
   	}
		else
		  break;

		int_l_counter++;
    }

	 int_l_counter=0;
	 switch(chr_l_param1[0])
    {
      case PRECHECK : 
		{
				  strcpy(chr_l_eodflag,"H"); // AIX - Warnings removal
				  while (1) 
				  {
                 EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_dcount FROM EODSTATUS 
								   WHERE FUNCNAME ='EOD_RUN_STATUS'
									  AND STATUS='R';

				     if (sqlca.sqlcode != 0)
				     {	
					     fprintf(pfile,"\nERROR DURING CHECKING THE EOD STATUS[%d]",sqlca.sqlcode);
				        exit(0);
                 }
                 if (int_l_dcount==0)
						  fprintf(pfile,"\nEOD IS IN HOLD STATUS");
                 else
						  break;
                
					  sleep(900);
				  }

				  fprintf(pfile,"\nEOD IS IN RELEASE STATUS");

				  EXEC SQL SELECT eod_ind INTO :chr_l_eodflag FROM PRO_SYS_DATE;
             
				  if (sqlca.sqlcode != 0)
				     {
						 fprintf(pfile,"\nERROR [%d]",sqlca.sqlcode);
						 break;
                 }

				  if (chr_l_eodflag[0] == 'O' )
				  {
                 EXEC SQL SELECT NVL(COUNT(*),0)
						 INTO :int_l_dcount
                   FROM EODSTATUS a, PRO_SYS_DATE b
                  WHERE a.FUNCNAME IN ('PRE_STOP_SERVER','PreEodDump','PRE_START_SERVER')
                    AND a.STARTDATE=b.SYS_DATE
						  AND a.STATUS !='C'; 
					
				     if (sqlca.sqlcode != 0)
					     {
							 fprintf(pfile,"\nERROR [%d]",sqlca.sqlcode);
							 break;
                    }
                 
                 if (int_l_dcount > 0)
					  {
				  			EXEC SQL SELECT RTRIM(LTRIM(FUNCNAME)),TO_CHAR(STARTDATE,'DDMMYYYY') 
				  			INTO :chr_l_funcname,:chr_l_sysdate_b
				  			FROM EODSTATUS
				  			WHERE SR_NO = ( SELECT MIN(SR_NO) FROM EODSTATUS
                                     WHERE FUNCNAME IN ('PRE_STOP_SERVER','PreEodDump','PRE_START_SERVER')
										  		 AND STATUS !='C');

				         if (sqlca.sqlcode !=0)
						   {
							   fprintf(pfile,"\nERROR DURING SELECTING MIN STARTED JOB [%d]",sqlca.sqlcode);
                        break;
                     }
							else
				         {
						      fprintf(pfile,"\n%s NOT STARTED",chr_l_funcname);
				            fprintf(pfile,"\nSYSTEMDATE%s",chr_l_sysdate_b);
				            break;
							}
                  }
						else
                  {
				         EXEC SQL UPDATE EODSTATUS SET STATUS='C'
					      WHERE FUNCNAME !='EOD_RUN_STATUS';

				         if (sqlca.sqlcode != 0)
					      {
							  fprintf(pfile,"\nERROR [%d]",sqlca.sqlcode);
							  break;
                     }

				         EXEC SQL COMMIT;
					  
				         if (sqlca.sqlcode != 0)
					       {
							   fprintf(pfile,"\nERROR [%d]",sqlca.sqlcode);
							   break;
                      }
						   
							fprintf(pfile,"\nPRE_STOP_SERVER NOT STARTED");
				  
							EXEC SQL SELECT TO_CHAR(SYS_DATE,'DDMMYYYY') 
						   INTO :chr_l_sysdate_b
							FROM PRO_SYS_DATE ;

				  			if (sqlca.sqlcode == 0)
				     			fprintf(pfile,"\nSYSTEMDATE%s",chr_l_sysdate_b);
              			else
					  			fprintf(pfile,"\nERROR %d",sqlca.sqlcode);
				       
							break;
						 }
              }

				  EXEC SQL SELECT RTRIM(LTRIM(FUNCNAME)),TO_CHAR(STARTDATE,'DDMMYYYY') 
				  INTO :chr_l_funcname,:chr_l_sysdate_b
				  FROM EODSTATUS
				  WHERE SR_NO = ( SELECT MIN(SR_NO) FROM EODSTATUS
				  						WHERE FUNCNAME !='EOD_RUN_STATUS' 
										  AND STATUS !='C');

				  if (sqlca.sqlcode ==1403)
				  {
						
						EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_dcount
						FROM EODSTATUS a, PRO_SYS_DATE b
						WHERE a.FUNCNAME='PreEodDump'
						AND a.STARTDATE=b.SYS_DATE;

                  if ((sqlca.sqlcode !=0 ) && (sqlca.sqlcode !=1403))
                  {
							fprintf(pfile,"\nERROR DURING CHECKING EOD STATUS[%d]",sqlca.sqlcode);
							break;
                  }
						if (int_l_dcount > 0 )
						{
						   fprintf(pfile,"\nALL EOD ACTIVITIES COMPLETED");
				         break;
                  }
						else
						{
							
						   if (chr_l_eodflag[0]=='B')
							{
						      fprintf(pfile,"\nALL EOD ACTIVITIES COMPLETED");
				            break;
                     }
							else
							{
							   fprintf(pfile,"\nPRE_STOP_SERVER NOT STARTED");
				  
							   EXEC SQL SELECT TO_CHAR(SYS_DATE,'DDMMYYYY') 
						      INTO :chr_l_sysdate_b
							   FROM PRO_SYS_DATE ;

				  			   if (sqlca.sqlcode == 0)
				     			   fprintf(pfile,"\nSYSTEMDATE%s",chr_l_sysdate_b);
              			   else
					  			   fprintf(pfile,"\nERROR %d",sqlca.sqlcode);
                     }
						}

              }
				  else if (sqlca.sqlcode !=0)
						fprintf(pfile,"\nERROR DURING SELECTING MIN STARTED JOB [%d]",sqlca.sqlcode);
              else
				  {
						fprintf(pfile,"\n%s NOT STARTED",chr_l_funcname);
				      fprintf(pfile,"\nSYSTEMDATE%s",chr_l_sysdate_b);
				  }

	           break;
      }
      case STARTED :
	   {
              if ( (strcmp(chr_l_param,"PostEodDump") == 0) || (strcmp(chr_l_param,"OMNIBACKUP") == 0) 
																		  || (strcmp(chr_l_param,"EOMACTIVITY") == 0)
																		  || (strcmp(chr_l_param,"POST_STOP_SERVER") == 0)
																		  || (strcmp(chr_l_param,"POST_START_SERVER")== 0))
				  {
                 EXEC SQL UPDATE EODSTATUS SET STARTDATE=(SELECT STARTDATE FROM EODSTATUS 
									                                WHERE FUNCNAME ='PreEodDump'), 
														     STATUS='S'
							      WHERE FUNCNAME LIKE :chr_l_param;
              }
              else
              {
                 EXEC SQL UPDATE EODSTATUS SET STARTDATE=(SELECT SYS_DATE FROM PRO_SYS_DATE ), STATUS='S'
								   WHERE FUNCNAME LIKE :chr_l_param;

              }

				  if (sqlca.sqlcode != 0)
					  fprintf(pfile,"\nERROR [%d]",sqlca.sqlcode);
				  
				  EXEC SQL COMMIT;
				  
				  if (sqlca.sqlcode != 0)
					  fprintf(pfile,"\nERROR %d",sqlca.sqlcode);
				  
				  EXEC SQL SELECT TO_CHAR(STARTDATE,'DDMMYYYY') 
								 INTO :chr_l_sysdate_b
								 FROM EODSTATUS 
							   WHERE FUNCNAME LIKE 'PreEodDump';

				  if (sqlca.sqlcode == 0)
				     fprintf(pfile,"\nSYSTEMDATE%s",chr_l_sysdate_b);
              else
					  fprintf(pfile,"\nERROR %d",sqlca.sqlcode);

			 
			     
              if (strcmp(chr_l_param,"OMNIBACKUP")== 0)
				  {
			 		 int_l_dcount=0;
          		 EXEC SQL SELECT NVL(count(*),0)
									INTO :int_l_dcount
									FROM SYS_BATCHPROC a, MT_EOMSYSDATE B
                    			WHERE a.PROCESS_NAME LIKE 'EOM_Mcl' 
							 		  AND TO_CHAR(a.STARTDATE,'DD/MM/YYYY') = TO_CHAR(b.SYS_DATE,'DD/MM/YYYY')
							 		  AND TO_CHAR(a.STARTDATE,'DD/MM/YYYY') = (SELECT TO_CHAR(MAX(c.STARTDATE),'DD/MM/YYYY')
																					  FROM SYS_BATCHPROC C );

          		if (sqlca.sqlcode < 0)
				 			fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
			 		else if (int_l_dcount > 0)
				 			fprintf(pfile,"\nEOM IS TODAY");
          		else
						{
				  			EXEC SQL SELECT TO_CHAR(STARTDATE,'DAY')
								 			INTO :chr_l_sysdate_b
                         			FROM EODSTATUS
                        			WHERE FUNCNAME ='PreEodDump';
              
				  			if (sqlca.sqlcode < 0)
					 		  fprintf(pfile, "\nERROR OCCURED %d",sqlca.sqlcode);
              
				  			fprintf(pfile,"\nDAY IS:%s",chr_l_sysdate_b);

            		}
              }

				  break;
      }   
		case COMPLETED_IND :
      {
              EXEC SQL UPDATE EODSTATUS SET STATUS='C', COMPLDATE=(SELECT SYSDATE FROM DUAL)
								WHERE FUNCNAME LIKE :chr_l_param;

				  if (sqlca.sqlcode != 0)
					  fprintf(pfile,"\nERROR %d",sqlca.sqlcode);
				 
				  EXEC SQL COMMIT;
				  
				  if (sqlca.sqlcode != 0)
					  fprintf(pfile,"\nERROR %d",sqlca.sqlcode);
				  
	  			  break;
       }
		case STOPPED :
      {
              EXEC SQL UPDATE EODSTATUS SET STATUS='A',COMPLDATE=(SELECT SYSDATE FROM DUAL)
								WHERE FUNCNAME LIKE :chr_l_param;

				  if (sqlca.sqlcode != 0)
					  fprintf(pfile,"\nERROR %d",sqlca.sqlcode);
				 
				  EXEC SQL COMMIT;
				  
				  if (sqlca.sqlcode != 0)
					  fprintf(pfile,"\nERROR %d",sqlca.sqlcode);
				  
	  			  break;
       }
       case EXECEOD :
       {
	          EXEC SQL SELECT STATUS
								INTO :int_l_status
                        FROM SYS_BATCHPROC 
                       WHERE PROCESS_NAME LIKE :chr_l_param
								 /*AND PROC_INIT LIKE :chr_l_param[1]*/
								 AND PROC_INIT LIKE :chr_l_param /* AIX Warnings */
								 AND TO_CHAR(TO_DATE(STARTDATE),'ddmmyy')=(SELECT TO_CHAR(SYS_DATE,'DDMMYY') FROM PRO_SYS_DATE)
								 AND STATUS='started'
								 FOR UPDATE OF STATUS NOWAIT;

              if (sqlca.sqlcode == -54 )
				  {
					  fprintf(pfile,"\nEOD IS RUNNING");
				     int_l_counter=0;
				  }
				  else if(sqlca.sqlcode < 0 )
				  {
					  fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
                 break;
				  }
				  else
				  {
					   EXEC SQL COMMIT;	
						
						if (sqlca.sqlcode < 0)
						{
                    fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
						  break;
                  }
				  
						EXEC SQL SELECT eod_ind INTO :chr_l_eodflag FROM PRO_SYS_DATE;
             
				      if (chr_l_eodflag[0] == 'B' )
						{
					      fprintf(pfile,"\nSYSTEM IS IN BOD STATUS");
				         break;
						}
						else if(sqlca.sqlcode < 0 )
				      {
					     fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
                    break;
				      }

				  
						EXEC SQL SELECT NVL(COUNT(*),0) 
									  INTO :int_l_dcount
                             FROM SYS_BATCHPROC a, PRO_SYS_DATE b
                            WHERE a.PROCESS_NAME LIKE :chr_l_param
								      AND a.PROC_INIT LIKE :chr_l_param
								      AND TO_CHAR(TO_DATE(a.STARTDATE),'dd/chr_mm/yyyy')=TO_CHAR(b.SYS_DATE,'dd/chr_mm/yyyy') 
								      AND a.STATUS='completed' ;

						if (sqlca.sqlcode < 0)
						{
                    fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
						  break;
                  }
						else if (int_l_dcount > 0 )
						{
						  fprintf(pfile,"\nEOD IS COMPLETED");
						  break;
					   }
						else
						{
						  int_l_counter=0;
						  fprintf(pfile,"\nSTARTING EOD ");

						  EXEC SQL SELECT SEQ_DMN.NEXTVAL into int_l_next_number FROM DUAL ;
	                 
						  if (sqlca.sqlcode < 0)
						  {
							  fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
							  break;
                    }

						  EXEC SQL SELECT  CHR(1)||'USERID'||CHR(2)||'AUTOEOD'||CHR(1)||'MODE'||CHR(2)||''||
									          CHR(1)||'FUNCTIONNAME'||CHR(2)||'END OF DAY'||
									          CHR(1)||'AUTHREQ'||CHR(2)||'Y'||CHR(1)||'SUBFUNACTION'||CHR(2)||''
						 	          INTO  :chr_l_env_str
							          FROM  DUAL;
                    
                    if (sqlca.sqlcode < 0)
						  {
                       fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
							  break;
						  }
				        
						  EXEC SQL SELECT TO_CHAR(SYS_DATE,'DD/MM/YYYY') 
								       INTO :chr_l_sysdate_b
								       FROM PRO_SYS_DATE;
                    
						  if (sqlca.sqlcode < 0)
						  {
                       fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
							  break;
						  }


						  EXEC SQL UPDATE EODSTATUS SET STARTDATE = (SELECT SYS_DATE FROM PRO_SYS_DATE), STATUS='S'
						            WHERE FUNCNAME LIKE :chr_l_param;
						
					     if (sqlca.sqlcode != 0) 
						  {
							 fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
                      break;
                    }


                    EXEC SQL INSERT INTO PRO_REQUEST_BATCH VALUES
						  (:int_l_next_number,:chr_l_param,:chr_l_param,:chr_l_env_str, NULL, 0, 'AUTOEOD',NULL);

                    if (sqlca.sqlcode < 0)
						  {
							  fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
							  break;
                    }
						  else
							 EXEC SQL COMMIT;
                   
                    if (sqlca.sqlcode < 0)
						  {
                       fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
							  break;
						  }
                  }
             }
				 sleep(120);
				 while (1)
				 {
					 EXEC SQL SELECT NVL(COUNT(*),0)
									INTO :int_l_dcount
                           FROM SYS_BATCHPROC 
                          WHERE PROCESS_NAME LIKE :chr_l_param
						          AND PROC_INIT LIKE :chr_l_param
						          AND TO_CHAR(STARTDATE,'DD/MM/YYYY')=:chr_l_sysdate_b
						          AND STATUS='completed' ;

					if (sqlca.sqlcode < 0)
						{
              			fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
				  			break;
              		}
					else if (int_l_dcount > 0 )
						{
				  			fprintf(pfile,"\nEOD IS COMPLETED");

							EXEC SQL UPDATE EODSTATUS SET STATUS='C',COMPLDATE=(SELECT SYSDATE FROM DUAL) 
										 WHERE FUNCNAME LIKE :chr_l_param;

                     if (sqlca.sqlcode < 0)
								{
									fprintf(pfile, "\nERROR OCCURED %d",sqlca.sqlcode);
									break;
                         }

							EXEC SQL COMMIT;

							if (sqlca.sqlcode < 0)
								fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
					  			
							break;
				  		}
					else
                  {
					      EXEC SQL SELECT NVL(COUNT(*),0) 
									     INTO :int_l_dcount
                          		  FROM SYS_BATCHPROC 
                             	 WHERE PROCESS_NAME LIKE :chr_l_param
								     		AND PROC_INIT LIKE :chr_l_param
								     		AND TO_CHAR(STARTDATE,'DD/MM/YYYY')=:chr_l_sysdate_b
								     		AND STATUS='aborted' ;

							if (sqlca.sqlcode < 0)
								{
                    			fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
						  			break;
                  		}
                    else if (int_l_dcount > 0) 
                        {
                          fprintf(pfile,"\nEOD ABORTED");
							
								  EXEC SQL UPDATE EODSTATUS SET STATUS='A' , COMPLDATE=(SELECT SYSDATE FROM DUAL)
										      WHERE FUNCNAME LIKE :chr_l_param;

                          if (sqlca.sqlcode < 0)
									  fprintf(pfile, "\nERROR OCCURED %d",sqlca.sqlcode);
								  
								  break;
								}
	                 else
								{
	          					EXEC SQL SELECT STATUS
											     INTO :int_l_status
                      		           FROM SYS_BATCHPROC 
                    			          WHERE PROCESS_NAME LIKE :chr_l_param
							 			         AND PROC_INIT LIKE :chr_l_param
							 			         AND TO_CHAR(STARTDATE,'DD/MM/YYYY')=:chr_l_sysdate_b
							 		 	         AND STATUS='started'
							 			         FOR UPDATE OF STATUS NOWAIT;

              				   if (sqlca.sqlcode == -54 )
					  				{	
										fprintf(pfile,"\nEOD IS RUNNING");
				  					   int_l_counter=0;
									}
									else if(sqlca.sqlcode < 0 )
				  					{
					  					fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
                 					break;
				  					}
									else if (sqlca.sqlcode == 1403)
									{
                              fprintf(pfile,"\nEOD NOT RUNNING..WAITING");
                           }
									else
									{
							            EXEC SQL COMMIT;
                             		if ( int_l_counter > 10 )
                             		{
									     		fprintf(pfile,"\nEOD ABORTED");
							
								        		EXEC SQL UPDATE EODSTATUS SET STATUS='A' ,COMPLDATE=(SELECT SYSDATE FROM DUAL)
										            	WHERE FUNCNAME LIKE :chr_l_param;

                                		if (sqlca.sqlcode < 0)
									        			fprintf(pfile, "\nERROR OCCURED %d",sqlca.sqlcode);
								     
								        		break;
                             		}
											int_l_counter++;
									}
								}
						}
				   sleep(180);
				 }
				 break;
     }
     case EOMCHECK :
     {
			 int_l_dcount=0;
          EXEC SQL SELECT NVL(COUNT(*),0)
							INTO :int_l_dcount
							FROM SYS_BATCHPROC a, MT_EOMSYSDATE B
                    WHERE a.PROCESS_NAME LIKE 'EOM_Mcl' 
							 AND TO_CHAR(a.STARTDATE,'DD/MM/YYYY') = TO_CHAR(b.SYS_DATE,'DD/MM/YYYY')
							 AND TO_CHAR(a.STARTDATE,'DD/MM/YYYY') = (SELECT TO_CHAR(MAX(c.STARTDATE),'DD/MM/YYYY')
																					  FROM SYS_BATCHPROC C );

          if (sqlca.sqlcode < 0)
				 fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
			 else if (int_l_dcount > 0)
				 fprintf(pfile,"\nEOM IS TODAY");
          else
				{
				  fprintf(pfile,"\nEOM IS NOT TODAY");

				  EXEC SQL SELECT TO_CHAR(STARTDATE,'DAY')
								 INTO :chr_l_sysdate_b
                         FROM EODSTATUS
                        WHERE FUNCNAME ='CM_EodScheduler';
              
				  if (sqlca.sqlcode < 0)
					  fprintf(pfile, "\nERROR OCCURED %d",sqlca.sqlcode);
              
				  fprintf(pfile,"\nDAY IS:%s",chr_l_sysdate_b);

            }

          EXEC SQL SELECT TO_CHAR(SYS_DATE,'MONYYYY')
							INTO :chr_l_sysdate_b
                     FROM MT_EOMSYSDATE;

          if (sqlca.sqlcode < 0)
				 fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
          else
				 fprintf(pfile,"\nSYSTEMDATE:%s",chr_l_sysdate_b);

			 break;
      }
      case EOMPURGE :
	   {
						

                 fprintf(pfile,"\nPURGE CARCHREGDET");                
                 fflush(pfile);
					  int_l_dcount =1;
					  while(int_l_dcount > 0)
					  {
                    EXEC SQL SELECT COUNT(*) INTO :int_l_dcount FROM DL_ARCHREGDET;
						  if (sqlca.sqlcode <0)
							  break;
						  
						  EXEC SQL DELETE FROM DL_ARCHREGDET WHERE ROWNUM < 500;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL COMMIT;
						  if (sqlca.sqlcode <0)
							  break;
                 }

					  if (sqlca.sqlcode < 0)
					  {
						 fprintf(pfile,"\nERROR OCCURED%d",sqlca.sqlcode);
                   break;
                 }
                 fprintf(pfile,"\nPURGE CARCHREGPAR");                
                 fflush(pfile);

					  int_l_dcount =1;
					  while(int_l_dcount > 0)
					  {
                    EXEC SQL SELECT COUNT(*) INTO :int_l_dcount FROM DL_ARCHREGPAR;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL DELETE FROM DL_ARCHREGPAR WHERE ROWNUM < 500;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL COMMIT;
						  if (sqlca.sqlcode <0)
							  break;
                 }

					  if (sqlca.sqlcode < 0)
					  {
						 fprintf(pfile,"\nERROR OCCURED%d",sqlca.sqlcode);
                   break;
                 }

                 fprintf(pfile,"\nPURGE CARCHTRANSAUDIT");                
                 fflush(pfile);
					  int_l_dcount =1;
					  while(int_l_dcount > 0)
					  {
                    EXEC SQL SELECT COUNT(*) INTO :int_l_dcount FROM DL_ARCHDLAUDIT;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL DELETE FROM DL_ARCHDLAUDIT WHERE ROWNUM < 500;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL COMMIT;
						  if (sqlca.sqlcode <0)
							  break;
                 }

					  if (sqlca.sqlcode < 0)
					  {
						 fprintf(pfile,"\nERROR OCCURED%d",sqlca.sqlcode);
                   break;
                 }

                 fprintf(pfile,"\nPURGE CARCHTRADE");                
                 fflush(pfile);
					  int_l_dcount =1;
					  while(int_l_dcount > 0)
					  {
                    EXEC SQL SELECT COUNT(*) INTO :int_l_dcount FROM DL_ARCHDEAL;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL DELETE FROM DL_ARCHDEAL WHERE ROWNUM < 500;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL COMMIT;
						  if (sqlca.sqlcode <0)
							  break;
                 }

					  if (sqlca.sqlcode < 0)
					  {
						 fprintf(pfile,"\nERROR OCCURED%d",sqlca.sqlcode);
                   break;
                 }

                 fprintf(pfile,"\nPURGE CARCHSAFEK");                
                 fflush(pfile);
					  int_l_dcount =1;
					  while(int_l_dcount > 0)
					  {
                    EXEC SQL SELECT COUNT(*) INTO :int_l_dcount FROM DL_ARCHSAFEK;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL DELETE FROM DL_ARCHSAFEK WHERE ROWNUM < 500;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL COMMIT;
						  if (sqlca.sqlcode <0)
							  break;
                 }

					  if (sqlca.sqlcode < 0)
					  {
						 fprintf(pfile,"\nERROR OCCURED%d",sqlca.sqlcode);
                   break;
                 }
                 fprintf(pfile,"\nPURGE CARCHDLYMKTPRC");                
                 fflush(pfile);

					  int_l_dcount =1;
					  while(int_l_dcount > 0)
					  {
                    EXEC SQL SELECT COUNT(*) INTO :int_l_dcount FROM MT_ARCHDLYMKTPRC;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL DELETE FROM MT_ARCHDLYMKTPRC WHERE ROWNUM < 500;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL COMMIT;
						  if (sqlca.sqlcode <0)
							  break;
                 }

					  if (sqlca.sqlcode < 0)
					  {
						 fprintf(pfile,"\nERROR OCCURED%d",sqlca.sqlcode);
                   break;
                 }

                 fprintf(pfile,"\nPURGE OR_ARCHEXEC");                
                 fflush(pfile);
					  int_l_dcount =1;
					  while(int_l_dcount > 0)
					  {
                    EXEC SQL SELECT COUNT(*) INTO :int_l_dcount FROM OR_ARCHEXEC;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL DELETE FROM OR_ARCHEXEC WHERE ROWNUM < 500;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL COMMIT;
						  if (sqlca.sqlcode <0)
							  break;
                 }

					  if (sqlca.sqlcode < 0)
					  {
						 fprintf(pfile,"\nERROR OCCURED%d",sqlca.sqlcode);
                   break;
                 }

                 fprintf(pfile,"\nPURGE CARCHORDER");                
                 fflush(pfile);
					  int_l_dcount =1;
					  while(int_l_dcount > 0)
					  {
                    EXEC SQL SELECT COUNT(*) INTO :int_l_dcount FROM OR_ARCHORDERS;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL DELETE FROM OR_ARCHORDERS WHERE ROWNUM < 500;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL COMMIT;
						  if (sqlca.sqlcode <0)
							  break;
                 }

					  if (sqlca.sqlcode < 0)
					  {
						 fprintf(pfile,"\nERROR OCCURED%d",sqlca.sqlcode);
                   break;
                 }

                 fprintf(pfile,"\nPURGE AARCHPAYMENT");                
                 fflush(pfile);
					  int_l_dcount =1;
					  while(int_l_dcount > 0)
					  {
                    EXEC SQL SELECT COUNT(*) INTO :int_l_dcount FROM CAARCHCHEQUE;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL DELETE FROM CAARCHCHEQUE WHERE ROWNUM < 500;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL COMMIT;
						  if (sqlca.sqlcode <0)
							  break;
                 }

					  if (sqlca.sqlcode < 0)
					  {
						 fprintf(pfile,"\nERROR OCCURED%d",sqlca.sqlcode);
                   break;
                 }

                 fprintf(pfile,"\nPURGE AARCHENTITL");                
                 fflush(pfile);
					  int_l_dcount =1;
					  while(int_l_dcount > 0)
					  {
                    EXEC SQL SELECT COUNT(*) INTO :int_l_dcount FROM CAARCHCLAIM;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL DELETE FROM CAARCHCLAIM WHERE ROWNUM < 500;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL COMMIT;
						  if (sqlca.sqlcode <0)
							  break;
                 }

					  if (sqlca.sqlcode < 0)
					  {
						 fprintf(pfile,"\nERROR OCCURED%d",sqlca.sqlcode);
                   break;
                 }

                 fprintf(pfile,"\nPURGE AARCHEVENT");                
                 fflush(pfile);
					  int_l_dcount =1;
					  while(int_l_dcount > 0)
					  {
                    EXEC SQL SELECT COUNT(*) INTO :int_l_dcount FROM CAARCHEVENT;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL DELETE FROM CAARCHEVENT WHERE ROWNUM < 500;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL COMMIT;
						  if (sqlca.sqlcode <0)
							  break;
                 }

					  if (sqlca.sqlcode < 0)
					  {
						 fprintf(pfile,"\nERROR OCCURED%d",sqlca.sqlcode);
                   break;
                 }

                 fprintf(pfile,"\nPURGE AARCHRIGHTSPRO");                
                 fflush(pfile);
					  int_l_dcount =1;
					  while(int_l_dcount > 0)
					  {
                    EXEC SQL SELECT COUNT(*) INTO :int_l_dcount FROM CAARCHRTSPROC;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL DELETE FROM CAARCHRTSPROC WHERE ROWNUM < 500;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL COMMIT;
						  if (sqlca.sqlcode <0)
							  break;
                 }

					  if (sqlca.sqlcode < 0)
					  {
						 fprintf(pfile,"\nERROR OCCURED%d",sqlca.sqlcode);
                   break;
                 }

                 fprintf(pfile,"\nPURGE AARCHFOOTNOTE");                
                 fflush(pfile);
					  int_l_dcount =1;
					  while(int_l_dcount > 0)
					  {
                    EXEC SQL SELECT COUNT(*) INTO :int_l_dcount FROM CAARCHNOTE;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL DELETE FROM CAARCHNOTE WHERE ROWNUM < 500;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL COMMIT;
						  if (sqlca.sqlcode <0)
							  break;
                 }

					  if (sqlca.sqlcode < 0)
					  {
						 fprintf(pfile,"\nERROR OCCURED%d",sqlca.sqlcode);
                   break;
                 }

                 fprintf(pfile,"\nPURGE BARCHACCTSAFEK");                
                 fflush(pfile);
					  int_l_dcount =1;
					  while(int_l_dcount > 0)
					  {
                    EXEC SQL SELECT COUNT(*) INTO :int_l_dcount FROM IV_ARCHCLIENTHOLDING;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL DELETE FROM IV_ARCHCLIENTHOLDING WHERE ROWNUM < 500;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL COMMIT;
						  if (sqlca.sqlcode <0)
							  break;
                 }

					  if (sqlca.sqlcode < 0)
					  {
						 fprintf(pfile,"\nERROR OCCURED%d",sqlca.sqlcode);
                   break;
                 }

                 fprintf(pfile,"\nPURGE BARCHSERVCHARGE");                
                 fflush(pfile);
					  int_l_dcount =1;
					  while(int_l_dcount > 0)
					  {
                    EXEC SQL SELECT COUNT(*) INTO :int_l_dcount FROM IV_ARCHSERVICECHG;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL DELETE FROM IV_ARCHSERVICECHG WHERE ROWNUM < 500;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL COMMIT;
						  if (sqlca.sqlcode <0)
							  break;
                 }

					  if (sqlca.sqlcode < 0)
					  {
						 fprintf(pfile,"\nERROR OCCURED%d",sqlca.sqlcode);
                   break;
                 }

                 fprintf(pfile,"\nPURGE BARCHOTHSERVICES");                
                 fflush(pfile);
					  int_l_dcount =1;
					  while(int_l_dcount > 0)
					  {
                    EXEC SQL SELECT COUNT(*) INTO :int_l_dcount FROM IV_ARCHEXTRASERVICE;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL DELETE FROM IV_ARCHEXTRASERVICE WHERE ROWNUM < 500;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL COMMIT;
						  if (sqlca.sqlcode <0)
							  break;
                 }

					  if (sqlca.sqlcode < 0)
					  {
						 fprintf(pfile,"\nERROR OCCURED%d",sqlca.sqlcode);
                   break;
                 }
                 fprintf(pfile,"\nPURGE BARCHPAYMENT");                
                 fflush(pfile);

					  int_l_dcount =1;
					  while(int_l_dcount > 0)
					  {
                    EXEC SQL SELECT COUNT(*) INTO :int_l_dcount FROM IV_ARCHCHEQUE;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL DELETE FROM IV_ARCHCHEQUE WHERE ROWNUM < 500;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL COMMIT;
						  if (sqlca.sqlcode <0)
							  break;
                 }

					  if (sqlca.sqlcode < 0)
					  {
						 fprintf(pfile,"\nERROR OCCURED%d",sqlca.sqlcode);
                   break;
                 }

                 fprintf(pfile,"\nPURGE BARCHTRANSAC");                
                 fflush(pfile);
					  int_l_dcount =1;
					  while(int_l_dcount > 0)
					  {
                    EXEC SQL SELECT COUNT(*) INTO :int_l_dcount FROM IV_ARCHTRANSACTION;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL DELETE FROM IV_ARCHTRANSACTION WHERE ROWNUM < 500;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL COMMIT;
						  if (sqlca.sqlcode <0)
							  break;
                 }

					  if (sqlca.sqlcode < 0)
					  {
						 fprintf(pfile,"\nERROR OCCURED%d",sqlca.sqlcode);
                   break;
                 }
 
					     

                 fprintf(pfile,"\nPURGE IARCHMSGSTAT");                
                 fflush(pfile);
					  int_l_dcount =1;
					  while(int_l_dcount > 0)
					  {
                    EXEC SQL SELECT COUNT(*) INTO :int_l_dcount FROM MS_ARCHMSGSTAT;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL DELETE FROM MS_ARCHMSGSTAT WHERE ROWNUM < 500;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL COMMIT;
						  if (sqlca.sqlcode <0)
							  break;
                 }

					  if (sqlca.sqlcode < 0)
					  {
						 fprintf(pfile,"\nERROR OCCURED%d",sqlca.sqlcode);
                   break;
                 }

                 fprintf(pfile,"\nPURGE IARCHMSGLOG");                
                 fflush(pfile);
					  int_l_dcount =1;
					  while(int_l_dcount > 0)
					  {
                    EXEC SQL SELECT COUNT(*) INTO :int_l_dcount FROM MS_ARCHMSGLOG ;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL DELETE FROM MS_ARCHMSGLOG WHERE ROWNUM < 500;
						  if (sqlca.sqlcode <0)
							  break;
						  EXEC SQL COMMIT;
						  if (sqlca.sqlcode <0)
							  break;
                 }

					  if (sqlca.sqlcode < 0)
					  {
						 fprintf(pfile,"\nERROR OCCURED%d",sqlca.sqlcode);
                   break;
                 }
                 
                 

                 fprintf(pfile,"\nPURGE BARCHINVOICE");
                 fflush(pfile);

                 int_l_dcount =1;
                 while(int_l_dcount > 0)
                 {
                    EXEC SQL SELECT COUNT(*) INTO :int_l_dcount FROM IV_ARCHBILL;
                    if (sqlca.sqlcode <0)
                       break;
                    EXEC SQL DELETE FROM IV_ARCHBILL WHERE ROWNUM < 500;
                    if (sqlca.sqlcode <0)
                       break;
                    EXEC SQL COMMIT;
                    if (sqlca.sqlcode <0)
                       break;
                 }

                 if (sqlca.sqlcode < 0)
                 {
                   fprintf(pfile,"\nERROR OCCURED%d",sqlca.sqlcode);
                   break;
                 }

                 

					  fprintf(pfile,"\nPURGE DONE SUCCESSFULLY");
                 fflush(pfile);
                 break;
       }
       case EXECBOD :
       {
				 int_l_counter=0;

	          EXEC SQL SELECT STATUS
								INTO :int_l_status
                        FROM SYS_BATCHPROC 
                       WHERE PROCESS_NAME LIKE :chr_l_param
								 //AND PROC_INIT LIKE :chr_l_param[1]
								 AND PROC_INIT LIKE :chr_l_param /* AIX Warning */
								 AND TO_CHAR(TO_DATE(STARTDATE),'ddmmyy')=(SELECT TO_CHAR(SYS_DATE,'DDMMYY') FROM PRO_SYS_DATE)
								 AND STATUS='started'
								 FOR UPDATE OF STATUS NOWAIT;

              if (sqlca.sqlcode == -54 )
				  {
					  fprintf(pfile,"\nBOD IS RUNNING");
				     int_l_counter=0;
				  }
				  else if(sqlca.sqlcode < 0 )
				  {
					  fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
                 break;
				  }
				  else
				  {
					   EXEC SQL COMMIT;	
						
						if (sqlca.sqlcode < 0)
						{
                    fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
						  break;
                  }
				  
						EXEC SQL SELECT eod_ind INTO :chr_l_eodflag FROM PRO_SYS_DATE;
             
				      if (chr_l_eodflag[0] != 'B' )
						{
					      fprintf(pfile,"\nSYSTEM IS NOT IN BOD STATUS");
				         break;
						}
						else if(sqlca.sqlcode < 0 )
				      {
					     fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
                    break;
				      }

	               EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_dcount 
									  FROM PRO_SYS_DATE, DUAL
                            WHERE TO_CHAR(SYS_DATE,'DD/MM/YYYY')=TO_CHAR(SYSDATE,'DD/MM/YYYY');

				      if (int_l_dcount != 1)
						{
					      fprintf(pfile,"\nBOD IS NOT DUE TODAY");
				         break;
						}
						else if(sqlca.sqlcode < 0 )
				      {
					     fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
                    break;
				      }
						
						EXEC SQL SELECT COUNT(*) 
									  INTO :int_l_dcount
                             FROM SYS_BATCHPROC a, PRO_SYS_DATE b
                            WHERE a.PROCESS_NAME LIKE :chr_l_param
								      AND a.PROC_INIT LIKE :chr_l_param
								      AND TO_CHAR(TO_DATE(a.STARTDATE),'dd/chr_mm/yyyy')=TO_CHAR(b.SYS_DATE,'dd/chr_mm/yyyy') 
								      AND a.STATUS='completed' ;

						if (sqlca.sqlcode < 0)
						{
                    fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
						  break;
                  }
						else if (int_l_dcount > 0 )
						{
						  fprintf(pfile,"\nBOD COMPLETE");
						  break;
					   }
						else
						{
						  int_l_counter=0;
						  fprintf(pfile,"\nSTARTING BOD ");

						  EXEC SQL SELECT SEQ_DMN.NEXTVAL into int_l_next_number FROM DUAL ;
	                 
						  if (sqlca.sqlcode < 0)
						  {
							  fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
							  break;
                    }

						  EXEC SQL SELECT  CHR(1)||'USERID'||CHR(2)||'AUTOEOD'||CHR(1)||'MODE'||CHR(2)||''||
									          CHR(1)||'FUNCTIONNAME'||CHR(2)||'BEGIN OF DAY'||
									          CHR(1)||'AUTHREQ'||CHR(2)||'Y'||CHR(1)||'SUBFUNACTION'||CHR(2)||''
						 	          INTO  :chr_l_env_str
							          FROM  DUAL;
                    
                    if (sqlca.sqlcode < 0)
						  {
                       fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
							  break;
						  }
				        
						  EXEC SQL SELECT TO_CHAR(SYS_DATE,'DD/MM/YYYY') 
								       INTO :chr_l_sysdate_b
								       FROM PRO_SYS_DATE;
                    
						  if (sqlca.sqlcode < 0)
						  {
                       fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
							  break;
						  }


                    EXEC SQL INSERT INTO PRO_REQUEST_BATCH VALUES
						  (:int_l_next_number,:chr_l_param,:chr_l_param,:chr_l_env_str, NULL, 0, 'AUTOEOD',NULL);

                    if (sqlca.sqlcode < 0)
						  {
							  fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
							  break;
                    }
						  else
							 EXEC SQL COMMIT;
                   
                    if (sqlca.sqlcode < 0)
						  {
                       fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
							  break;
						  }
                  }
             }
				 sleep(10);
				 while (1)
				 {
					 EXEC SQL SELECT COUNT(*) 
									INTO int_l_dcount
                           FROM SYS_BATCHPROC 
                          WHERE PROCESS_NAME LIKE :chr_l_param
						          AND PROC_INIT LIKE :chr_l_param
						          AND TO_CHAR(STARTDATE,'DD/MM/YYYY')=:chr_l_sysdate_b
						          AND STATUS='completed' ;

					if (sqlca.sqlcode < 0)
						{
              			fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
				  			break;
              		}
					else if (int_l_dcount > 0 )
						{
				  			fprintf(pfile,"\nBOD COMPLETE");
							break;
				  		}
					else
                  {
					      EXEC SQL SELECT COUNT(*) 
									     INTO int_l_dcount
                          		  FROM SYS_BATCHPROC 
                             	 WHERE PROCESS_NAME LIKE :chr_l_param
								     		AND PROC_INIT LIKE :chr_l_param
								     		AND TO_CHAR(STARTDATE,'DD/MM/YYYY')=:chr_l_sysdate_b
								     		AND STATUS='aborted' ;

							if (sqlca.sqlcode < 0)
								{
                    			fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
						  			break;
                  		}
                    else if (int_l_dcount > 0) 
                        {
                          fprintf(pfile,"\nBOD ABORTED");
								  break;
								}
	                 else
								{
	          					EXEC SQL SELECT STATUS
											  INTO :int_l_status
                      		           FROM SYS_BATCHPROC 
                    			          WHERE PROCESS_NAME LIKE :chr_l_param
							 			         AND PROC_INIT LIKE :chr_l_param
							 			         AND TO_CHAR(STARTDATE,'DD/MM/YYYY')=:chr_l_sysdate_b
							 		 	         AND STATUS='started'
							 			         FOR UPDATE OF STATUS NOWAIT;

              				   if (sqlca.sqlcode == -54 )
					  				{	
										fprintf(pfile,"\nBOD IS RUNNING");
				  					   int_l_counter=0;
									}
									else if(sqlca.sqlcode < 0 )
				  					{
					  					fprintf(pfile,"\nERROR OCCURED %d",sqlca.sqlcode);
                 					break;
				  					}
									else
									{ 
										EXEC SQL COMMIT;
                             	if ( int_l_counter > 10 )
                             	{
									  		fprintf(pfile,"\nBOD ABORTED");
								        	break;
                             	}
										int_l_counter++;
									}
								}
						}
				   sleep(10);
				 }
				 break;
      }
     case EODRUNSTATUS :
     {
			 EXEC SQL UPDATE EODSTATUS SET STATUS=:chr_l_param
						  WHERE FUNCNAME ='EOD_RUN_STATUS';
 
			 if (sqlca.sqlcode !=0)
			 {
				fprintf(pfile,"\nError Occured during Modifing the EOD RUN STATUS %d",sqlca.sqlcode);
			   break;
          }
			 else
				fprintf(pfile,"\nEOD RUNS STATUS CHANGE COMPLETE");

          EXEC SQL COMMIT;
			 
			 break;
      }
	   default :
      {
				 fprintf(pfile,"\nNO CORRECT OPTION WAS SENT");
				 break;
		}			 

	 }

   fflush(pfile);
	fclose(pfile);
   
	APL_GOBACK_SUCCESS

RETURN_SUCCESS:

   EXEC SQL COMMIT ;
        fclose(chr_finifile);
        exit(0);

RETURN_FAILURE:
   EXEC SQL ROLLBACK;
        fclose(chr_finifile);
        exit(-1);
}
