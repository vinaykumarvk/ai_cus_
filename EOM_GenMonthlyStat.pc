


   
   
   
   
   
   
   
   
   
   
   
   




#include "Intellect_Common.h"
#include "CO_Commdef.h"
#include "Intellect_Error.h"


#define PAGE_WIDTH					87
#define FORMATED_DATERR_LEN			10
#define PAGE_INFO_LEN				10
#define COLHEADWIDTH1				157
#define COLHEADWIDTH2				129
#define PAGELEN						55
#define FILENAME_LEN_A					80
char *const seperator_line = "-----------------------------------------------------------------------"
									  "-------------------------------------------------------------------------";
#define COLUMN_WIDTH(reg_status,nation_cd) \
	if(!strcmp(reg_status,"Y") && !strcmp(nation_cd,"RU")) \
	 int_colheadwidth = COLHEADWIDTH1; else int_colheadwidth = COLHEADWIDTH2;

EXEC SQL INCLUDE sqlca;

typedef struct {
   char h_dl_client[11];
   char h_instr_code[9];
   char h_indentity_no[17];
   char h_dealcd[2];
   char h_dlt[APL_DATE_LEN];
   char h_setldt[APL_DATE_LEN];
   char h_instrdate[APL_DATE_LEN];
   char h_moneydate[APL_DATE_LEN];
   double   h_qty;
   double   h_amt;
   char  h_ex_arena[3];
   char h_report_at_eom_ind[2];
   } SYS_EOMSTMSETTLE_STRUCT_H;

typedef struct {
   short i_dl_client;
   short i_instr_code;
   short i_indentity_no;
   short i_dealcd;
   short i_dlt;
   short i_setldt;
   short i_instrdate;
   short i_moneydate;
   short i_qty;
   short i_amt;
   short i_ex_arena;
   short i_report_at_eom_ind;
   } SYS_EOMSTMSETTLE_STRUCT_I;

typedef struct {
	char h_dl_client[11];
   char h_instr_code[9];
   char h_indentity_no[17];
	double h_qty;
   double h_amt;
	char h_domcpclt_cd[APL_CLIENT_LENGTH];
   char h_ex_arena[3];
   char h_setldt[APL_DATE_LEN];
	char h_dealcd[2];
	} SYS_EOMSTMPEND_STRUCT_H;

typedef struct {
	short i_dl_client;
   short i_instr_code; 
   short i_indentity_no; 
   short i_qty;   
   short i_amt;   
   short i_domcpclt_cd;   
   short i_ex_arena;     
   short i_setldt;         
   short i_dealcd;       
	} SYS_EOMSTMPEND_STRUCT_I;

typedef struct {
	char h_dl_client[11];
   char h_instr_code[9];
   char h_indentity_no[17];
	double h_qty;
   double h_amt;
	char h_domcpclt_cd[APL_CLIENT_LENGTH];
	char h_fail_cd[3];
   char h_ex_arena[3];
   char h_setldt[APL_DATE_LEN];
	char h_dealcd[2];
	} SYS_EOMSTMFAIL_STRUCT_H;

typedef struct {
	short i_dl_client;
   short i_instr_code; 
   short i_indentity_no; 
   short i_qty;   
   short i_amt;   
   short i_domcpclt_cd;   
	short i_failreas_cd;
   short i_ex_arena;     
   short i_setldt;         
   short i_dealcd;       
	} SYS_EOMSTMFAIL_STRUCT_I;

int int_g_pageno = 1;
int int_g_lineno = 0;

//main(int argc,char **argv)
int main(int argc,char **argv)//Changes done for AIX Migration
{
	DEBUG_INFO_STRUCT_H			*l_debug_info_ptr = NULL;
	INTL_ENV_DATA_STRUCT_H	l_intl_envdatastruct_h;
	struct sqlca			sqlca;
	FILE						*l_ptr_ini_file = NULL;
	FILE						*l_ptr_rept_file = NULL;
	FILE						*l_ptr_log_file = NULL;
	char						chr_l_inifile[FILENAME_LEN_A]   = APL_NULL_STRING;
	char                 chr_uname[APL_USERID_LEN]   = APL_NULL_STRING;
   char                 chr_passwd[APL_PASSWD_LEN]  = APL_NULL_STRING;
   char                 chr_custody_id_b[APL_USERID_LEN]  = APL_NULL_STRING;
	char						chr_l_cntry_code[3] = APL_NULL_STRING;
	char						chr_l_prevclient[APL_CLIENT_LENGTH] = APL_NULL_STRING;
	char						h_currencycode[APL_CCYCODE_LEN] = APL_NULL_STRING;
	char 						chr_h_system_date[APL_DATE_LEN] = APL_NULL_STRING;
	char						h_dl_client[APL_CLIENT_LENGTH] = APL_NULL_STRING;
	char						h_instr_code[APL_INSTRUMENTCODE_LEN] = APL_NULL_STRING;
	char						chr_l_fmtsafek[30] = APL_NULL_STRING;
	char						chr_l_fmtadjopenbal[30] = APL_NULL_STRING;
	int						int_l_cond_adj = 0;
	int						int_l_cond_settle = 0;
	int						int_l_cond_pend = 0;
	int						int_l_cond_fail= 0;
	int						int_l_cond_curr = 0;
	int						int_l_cond_firstpg = 0;
	int						int_colheadwidth = 0;
	int 						int_retstat = 0;
	int						i = 0;		
	int						int_l_nosetltxn = 0;
	int						int_retval = 0;
	int						int_l_flg = 0;
	short						i_currencycode = 0;
	short						i_system_date = 0;
	short						i_closing_pr = 0;
	short						i_dl_client = 0;
	short						i_instr_code = 0;
	short						i_safekeep_pos = 0;
	short						i_open_pr = 0;
	double					h_safekeep_pos = 0.0;
	double 					h_fx_rt = 0.0;
	double					h_pr = 0.0;
	double 					openbalanceval = 0.0;
	double 					l_roundopenbalance = 0.0;
	double					h_closing_pr = 0.0;
	double					h_open_pr = 0.0;
	double					l_adjopenbalance = 0.0;
	double					l_roundadjopenbalance = 0.0;
	double					l_roundsafekeep_pos = 0.0;
	double					l_roundfx_rt = 0.0;
	double					l_totvalue = 0.0;
	
	EXEC SQL VAR h_dl_client IS STRING;
	EXEC SQL VAR h_instr_code IS STRING;

	memset(&l_intl_envdatastruct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H));

	strcpy(l_intl_envdatastruct_h.usr,argv[3]);
	strcpy(l_intl_envdatastruct_h.h_mode, argv[4]);
	strcpy(l_intl_envdatastruct_h.processtion, argv[5]);
   strcpy(l_intl_envdatastruct_h.auth_req, argv[6]);
   strcpy(l_intl_envdatastruct_h.subprocess, argv[7]);
   strcpy(l_intl_envdatastruct_h.h_process, argv[8]);
	
	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
   strcat(chr_l_inifile,"intl_sun.cfg");

   if ((l_ptr_ini_file = fopen(chr_l_inifile,"r")) == NULL)
      exit(-1);

   APL_FETCH_DB_LOGIN_DETAILS(l_ptr_ini_file,chr_custody_id_b,chr_uname,chr_passwd,APL_OUT_FILE,&l_debug_info_ptr);

   if((CO_DB_Connection_M(chr_uname,chr_passwd,&l_debug_info_ptr)) != APL_SUCCESS)
      APL_GOBACK_FAIL

	if((CO_Rtv_RptFileName("3i",APL_LOGFILE_DESC,100,argv[5],argv,&l_ptr_log_file,&l_debug_info_ptr)) != APL_SUCCESS)
		{
			EXEC SQL ROLLBACK WORK RELEASE;
			APL_GOBACK_FAIL
		}

   if((CO_Rtv_RptFileName("EM","End Of Month Statement",190,argv[5],argv,&l_ptr_rept_file,&l_debug_info_ptr)) != APL_SUCCESS)
   	{
      	EXEC SQL ROLLBACK WORK RELEASE;
      	APL_GOBACK_FAIL
   	}

   EXEC SQL COMMIT WORK;
   
   if (sqlca.sqlcode != 0)
	{
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);
   	EXEC SQL ROLLBACK WORK RELEASE;
   	APL_GOBACK_FAIL
   }

	if (CO_RtvSysParams(l_debug_info_ptr) == APL_FAILURE)
			APL_GOBACK_FAIL

   int_retval = CO_Proc_BtchLock(argv,l_ptr_log_file,&l_debug_info_ptr);

   if (int_retval != APL_SUCCESS)
   {
      CO_ProcMonitor(l_ptr_log_file,"Unable to lock BATCH_IN_PROC record - Rollback done \n",NULL,&l_intl_envdatastruct_h);
      CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);
      EXEC SQL ROLLBACK WORK RELEASE;
      APL_GOBACK_FAIL
   }


	COLUMN_WIDTH(l_mt_core_sys_params_struct_h.proc_reg_ind,g_mt_commonsys_params_struct_h.nation_code);	
	
	EXEC SQL DECLARE OPENBALANCE CURSOR FOR
	SELECT CLIENT,INSTR_CODE,SUM(SAFEKEEP_POS) FROM MT_CLIENT_DEPO
	WHERE CLIENT NOT IN ( SELECT CLIENT FROM MT_CLIENT WHERE STATUS IN ('CA', 'CU'))
	GROUP BY CLIENT,INSTR_CODE
	ORDER BY CLIENT,INSTR_CODE;

	EXEC SQL OPEN OPENBALANCE;

	IS_ANY_ORA_ERROR

	for(;;)
	{
		EXEC SQL FETCH OPENBALANCE INTO 
		:h_dl_client:i_dl_client,
		:h_instr_code:i_instr_code,
		:h_safekeep_pos:i_safekeep_pos;

		IS_ANY_ORA_ERROR

		if(APL_ZERO_RESULT_SET)
			break;

		l_adjopenbalance = h_safekeep_pos;
		int_l_cond_settle = APL_SUCCESS;
		int_l_nosetltxn = 0;

		
		sqlca.sqlcode = 0;
		EXEC SQL SELECT NVL(COUNT(*),0)
		INTO :int_l_cond_adj
		FROM DL_EOMSTM_ADJ_VEW
		WHERE CLIENT = RTRIM(:h_dl_client) AND INSTR_CODE = RTRIM(:h_instr_code);
		
		IS_ANY_ORA_ERROR
		
		EXEC SQL SELECT NVL(COUNT(*),0)
		INTO :int_l_cond_curr
		FROM DL_EOMSTM_CURR_VEW
		WHERE CLIENT = RTRIM(:h_dl_client) AND INSTR_CODE = RTRIM(:h_instr_code);
		
		IS_ANY_ORA_ERROR

		int_l_cond_pend = APL_FAILURE;
		int_l_cond_fail = APL_FAILURE;
	
		if(strcmp(chr_l_prevclient,h_dl_client) != 0) 
		{
			if (strcmp(chr_l_prevclient,APL_NULL_STRING) != 0)
			{
				if(EOM_Prnt_Footer(l_ptr_rept_file,chr_l_prevclient,
										l_ptr_log_file,&l_intl_envdatastruct_h,
										&l_debug_info_ptr) == APL_FAILURE)
					APL_GOBACK_FAIL
			}

			if (EOM_Prnt_Hdr(l_ptr_rept_file,h_dl_client,
									 l_ptr_log_file,&l_intl_envdatastruct_h,
								 	 &l_debug_info_ptr) == APL_FAILURE)
				APL_GOBACK_FAIL

			if(strcmp(chr_l_prevclient,h_dl_client) != 0)
			{
				if (EOM_Prnt_ExgRt(l_ptr_rept_file,l_ptr_log_file,
									  &l_intl_envdatastruct_h,&l_debug_info_ptr) == APL_FAILURE)
						APL_GOBACK_FAIL	
			}

			strcpy(chr_l_prevclient,h_dl_client);
		}

		if ((PAGELEN - int_g_lineno) < 9)			
			{
				int_g_pageno++; int_g_lineno = 1;
				fprintf(l_ptr_rept_file,"\f\n");
				if (EOM_Prnt_Hdr(l_ptr_rept_file,h_dl_client,
										l_ptr_log_file,&l_intl_envdatastruct_h,
										&l_debug_info_ptr) == APL_FAILURE)
					APL_GOBACK_FAIL
			}
			  if (EOM_Prnt_InstrDec(l_ptr_rept_file,h_instr_code,
									l_ptr_log_file,&l_intl_envdatastruct_h,
									&l_debug_info_ptr) == APL_FAILURE)
					  APL_GOBACK_FAIL

		if ((PAGELEN - int_g_lineno) < 12)			
			{
				int_g_pageno++; int_g_lineno = 1;	
				fprintf(l_ptr_rept_file,"\f\n");
				if (EOM_Prnt_Hdr(l_ptr_rept_file,h_dl_client,
										l_ptr_log_file,&l_intl_envdatastruct_h,
										&l_debug_info_ptr) == APL_FAILURE)
					APL_GOBACK_FAIL
			}

		if (EOM_Prnt_ColHeading(l_ptr_rept_file,&int_l_cond_settle,
								&int_l_cond_adj,&int_l_cond_curr,
								&int_l_cond_pend,&int_l_cond_fail,
								l_ptr_log_file,&l_intl_envdatastruct_h,
								&l_debug_info_ptr) == APL_FAILURE)
			APL_GOBACK_FAIL

		EXEC SQL SELECT OPEN_PR,CLOSING_PR
		INTO :h_open_pr:i_open_pr,:h_closing_pr:i_closing_pr
		FROM MT_EOMMTHLYMKTPRC
		WHERE INSTR_CODE =:h_instr_code;

		
		IS_ANY_ORA_ERROR

		EXEC SQL SELECT CURRENCY_CD
		INTO :h_currencycode:i_currencycode
		FROM MT_INSTRUMENT
		WHERE INSTR_CODE =:h_instr_code;

		IS_ANY_ORA_ERROR

		EXEC SQL SELECT SYS_DATE
		INTO :chr_h_system_date:i_system_date
		FROM MT_EOMSYSDATE;

		IS_ANY_ORA_ERROR

		if (APL_FAILURE == IV_Proc_ConvToFxFn(h_currencycode,"USD",g_mt_commonsys_params_struct_h.dom_ccy,chr_h_system_date,&h_fx_rt,&int_retstat,l_debug_info_ptr))
   		{
   			if (int_retstat == APL_SUCCESS)
      			{
      				fprintf(l_ptr_log_file,"ExchRate Not Found Btn %s To USD\n",h_currencycode);
      				APL_GOBACK_FAIL
      			}
   		}
		
		h_pr = (h_fx_rt) * h_open_pr;
		openbalanceval = h_safekeep_pos * (h_fx_rt) * h_open_pr;

		if (APL_FAILURE == CO_Round(openbalanceval,4,&l_roundopenbalance))
   		APL_GOBACK_FAIL
		if (APL_FAILURE == CO_Round(h_pr,4,&l_roundfx_rt))
   		APL_GOBACK_FAIL
		if (APL_FAILURE == CO_Round(h_safekeep_pos,l_mt_core_sys_params_struct_h.qty_dec_len,&l_roundsafekeep_pos))
			APL_GOBACK_FAIL

		fprintf(l_ptr_rept_file,"Opening Balance");

		CO_Rtv_FormatAmt(l_roundsafekeep_pos,chr_l_fmtsafek,'Y','Y',l_debug_info_ptr);

      fprintf(l_ptr_rept_file,"%s    @ price (USD)%.4lf    %.4lf",chr_l_fmtsafek,l_roundfx_rt,l_roundopenbalance);
      fprintf(l_ptr_rept_file,"\n\n");
		int_g_lineno += 2;

		if (int_l_cond_adj == APL_FAILURE && int_l_cond_curr == APL_FAILURE)
   		{
				fprintf(l_ptr_rept_file,"NO SETTLED transactions for this instrument\n\n");
      		fprintf(l_ptr_rept_file,"Closing Balance");
      		fprintf(l_ptr_rept_file,"%s    @ price (USD)%.4lf    %.4lf\n\n",chr_l_fmtsafek,l_roundfx_rt,l_roundopenbalance);
				int_g_lineno += 4;
   		}

		
		if (int_l_cond_adj != APL_FAILURE)
   		{
      		fprintf(l_ptr_rept_file,"Adjustments\n\n");
				int_g_lineno += 2;
				if (EOM_Prnt_AdjDL(l_ptr_rept_file,h_dl_client,	
									 h_instr_code,&l_adjopenbalance,
									 &int_l_nosetltxn,l_ptr_log_file,
									 &l_intl_envdatastruct_h,l_debug_info_ptr) == APL_FAILURE)
					APL_GOBACK_FAIL
				
				if (APL_FAILURE == CO_Round(l_adjopenbalance,l_mt_core_sys_params_struct_h.qty_dec_len,&l_roundadjopenbalance))
					APL_GOBACK_FAIL

				CO_Rtv_FormatAmt(l_roundadjopenbalance,chr_l_fmtadjopenbal,'Y','Y',l_debug_info_ptr);
	
				l_totvalue = l_adjopenbalance * h_pr;
				fprintf(l_ptr_rept_file,"Adj.Opening Bal. %s    @ price (USD)%.4lf    %.4lf\n\n",chr_l_fmtadjopenbal,l_roundfx_rt,l_totvalue);
				int_g_lineno += 2;
   		}
	
		if (int_l_cond_curr != APL_FAILURE)
			{
				if (EOM_Prnt_CurrDL(l_ptr_rept_file,h_dl_client,
									 h_instr_code,&l_adjopenbalance,
									 &int_l_nosetltxn,l_ptr_log_file,
									 &l_intl_envdatastruct_h,l_debug_info_ptr) == APL_FAILURE)
					APL_GOBACK_FAIL

				fprintf(l_ptr_rept_file,"\n");
				int_g_lineno++;

				if (EOM_Prnt_CloseBal(l_ptr_rept_file,h_dl_client,
									&l_adjopenbalance,&int_l_nosetltxn,
									&h_closing_pr,h_currencycode,
									chr_h_system_date,l_ptr_log_file,
									&l_intl_envdatastruct_h,l_debug_info_ptr) == APL_FAILURE)
            	APL_GOBACK_FAIL
			}
		

		sqlca.sqlcode =0;

		EXEC SQL SELECT NVL(COUNT(*),0)
		INTO :int_l_cond_pend
		FROM DL_EOMSTM_PEND_VEW
		WHERE CLIENT = RTRIM(:h_dl_client) AND INSTR_CODE = RTRIM(:h_instr_code);

		IS_ANY_ORA_ERROR

		int_l_cond_settle = 0;
		int_l_cond_adj = 0;
		int_l_cond_fail = 0;
		int_l_cond_curr = 0;

		if (int_l_cond_pend)
			{
				  if ((PAGELEN - int_g_lineno) < 12)			
					  {
						  int_g_pageno++; int_g_lineno = 1;	
						  fprintf(l_ptr_rept_file,"\f\n");
						  if (EOM_Prnt_Hdr(l_ptr_rept_file,h_dl_client,
												  l_ptr_log_file,&l_intl_envdatastruct_h,
												  &l_debug_info_ptr) == APL_FAILURE)
							  APL_GOBACK_FAIL
					  }

				if (EOM_Prnt_ColHeading(l_ptr_rept_file,&int_l_cond_settle,
                        &int_l_cond_adj,&int_l_cond_curr,
                        &int_l_cond_pend,&int_l_cond_fail,
                        l_ptr_log_file,&l_intl_envdatastruct_h,
								&l_debug_info_ptr) == APL_FAILURE)
         		APL_GOBACK_FAIL

				if (EOM_Prnt_PendDL(l_ptr_rept_file,
									 h_dl_client,h_instr_code,
									 l_ptr_log_file,&l_intl_envdatastruct_h,
									 l_debug_info_ptr) == APL_FAILURE)
					APL_GOBACK_FAIL
			}

		if(!int_l_cond_pend)
			{	
				fprintf(l_ptr_rept_file,"\nNO transactions PENDING for this instrument\n\n");
				int_g_lineno += 3;
			}

		EXEC SQL SELECT NVL(COUNT(*),0)
		INTO :int_l_cond_fail
		FROM DL_EOMSTM_FAIL_VEW
		WHERE CLIENT = RTRIM(:h_dl_client) AND INSTR_CODE = RTRIM(:h_instr_code);
		
		IS_ANY_ORA_ERROR

		int_l_cond_settle = 0;
		int_l_cond_adj = 0;
		int_l_cond_pend = 0;
		int_l_cond_curr = 0;
		
		if (int_l_cond_fail)
         {
				  if ((PAGELEN - int_g_lineno) < 12)			
					  {
						  int_g_pageno++; int_g_lineno = 1;	
						  fprintf(l_ptr_rept_file,"\f\n");
						  if (EOM_Prnt_Hdr(l_ptr_rept_file,h_dl_client,
												  l_ptr_log_file,&l_intl_envdatastruct_h,
												  &l_debug_info_ptr) == APL_FAILURE)
							  APL_GOBACK_FAIL
					  }

            if (EOM_Prnt_ColHeading(l_ptr_rept_file,&int_l_cond_settle,
                		          &int_l_cond_adj,&int_l_cond_curr,
                       			 &int_l_cond_pend,&int_l_cond_fail,
                        		 l_ptr_log_file,&l_intl_envdatastruct_h,
										 &l_debug_info_ptr) == APL_FAILURE)
               APL_GOBACK_FAIL

            if (EOM_Prnt_FailDL(l_ptr_rept_file,h_dl_client,
                            h_instr_code,l_ptr_log_file,
                            &l_intl_envdatastruct_h,l_debug_info_ptr) == APL_FAILURE)
               APL_GOBACK_FAIL
         }

	if (!int_l_cond_fail)
		{
			fprintf(l_ptr_rept_file,"\nNO transactions FAILED for this instrument\n");
			fprintf(l_ptr_rept_file,"\n%s\n",strlen(seperator_line)-92+seperator_line); 
			int_g_lineno += 4;
		}	
	}
		EXEC SQL CLOSE OPENBALANCE;

		CO_Proc_Exit(argv,l_ptr_log_file,&l_debug_info_ptr,int_l_flg);

RETURN_SUCCESS :
	{
		fclose(l_ptr_ini_file);
		fclose(l_ptr_rept_file);
		fclose(l_ptr_log_file);
		CO_FreeErrLst(&l_debug_info_ptr);
		return(0);	
	}

RETURN_FAILURE :
	{ 
		fclose(l_ptr_ini_file);
		fclose(l_ptr_rept_file);
		fclose(l_ptr_log_file);
		CO_FreeErrLst(&l_debug_info_ptr);
		return(-1);
	}
}


int EOM_Prnt_Hdr(FILE *p_ptr_rept_file,char *chr_p_client,
						 FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,
						 DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
struct sqlca sqlca;
char chr_sys_date_time[APL_DATE_LEN] = APL_NULL_STRING;
char chr_h_mstcname[66] = APL_NULL_STRING; 
char h_mstclt[APL_CLIENT_LENGTH] = APL_NULL_STRING;
char h_clnt_clr_name[66] = APL_NULL_STRING;
short i_clnt_clr_name = 0;
short i_mstclt = 0;
short i_mstcname = 0;
static int int_no_spaces_one = 0;
static int int_no_spaces_two = 0;
static int int_no_spaces_three = 0;
int i = 0;

EXEC SQL VAR h_clnt_clr_name IS STRING;
EXEC SQL VAR h_mstclt IS STRING;
EXEC SQL VAR chr_h_mstcname IS STRING;

EXEC SQL SELECT a.CLN_NAME,a.CLN_MASTER,b.CLN_NAME
INTO 	:h_clnt_clr_name:i_clnt_clr_name,:h_mstclt:i_mstclt,:chr_h_mstcname:i_mstcname
FROM	MT_CLIENT a,MT_CLIENT b
WHERE	a.CLN_MASTER=b.CLN_CODE and a.CLN_CODE = :chr_p_client;

IS_ANY_ORA_ERROR
if (  CO_RtvSysDtTime(chr_sys_date_time,l_debug_info_ptr) == APL_FAILURE )
	{
		CO_ProcMonitor(p_ptr_log_file,"Not able to get system chr_date and time",NULL,NULL);
		APL_GOBACK_FAIL
	}

int_no_spaces_one = ceil((PAGE_WIDTH - strlen(g_mt_commonsys_params_struct_h.ca_identname))/2) - FORMATED_DATERR_LEN;
int_no_spaces_two = PAGE_WIDTH - FORMATED_DATERR_LEN - int_no_spaces_one - strlen(g_mt_commonsys_params_struct_h.ca_identname) - PAGE_INFO_LEN;
int_no_spaces_three = ceil((PAGE_WIDTH - strlen("Month End Instrurities Statement"))/2);
fprintf(p_ptr_rept_file,"%s\n",strlen(seperator_line)-92+seperator_line);
fprintf(p_ptr_rept_file,"%.10s",chr_sys_date_time);
fprintf(p_ptr_rept_file,"%*c",int_no_spaces_one,32);
fprintf(p_ptr_rept_file,"%s",g_mt_commonsys_params_struct_h.ca_identname);
fprintf(p_ptr_rept_file,"%*c",int_no_spaces_two,32);
fprintf(p_ptr_rept_file,"Page : %03d\n",int_g_pageno);
fprintf(p_ptr_rept_file,"%*c",int_no_spaces_three,32);
fprintf(p_ptr_rept_file,"Month End Instrurities Statement\n\n");
fprintf(p_ptr_rept_file,"Master Account : ");
fprintf(p_ptr_rept_file,"%s %s\n",h_mstclt,chr_h_mstcname);
fprintf(p_ptr_rept_file,"Sub Account    : ");
fprintf(p_ptr_rept_file,"%s %.35s\n",chr_p_client,h_clnt_clr_name);
fprintf(p_ptr_rept_file,"%24c",32);
for(i = 35; i < 65; i++)
	fprintf(p_ptr_rept_file,"%c",h_clnt_clr_name[i]);
fprintf(p_ptr_rept_file,"\n");
fprintf(p_ptr_rept_file,"%s\n",strlen(seperator_line)-92+seperator_line);
int_g_lineno += 8;		

APL_GOBACK_SUCCESS
RETURN_SUCCESS:
	{
		CO_ProcMonitor(p_ptr_log_file,"Exiting EOM_Prnt_Hdr Successfully",NULL,NULL);
		return(APL_SUCCESS);
	}
RETURN_FAILURE:
	{
		CO_ProcMonitor(p_ptr_log_file,"Exiting EOM_Prnt_Hdr with Failure",NULL,NULL);
		return(APL_FAILURE);
	}
}


int EOM_Prnt_ExgRt(
                 	FILE *p_ptr_rept_file,
                 	FILE *p_ptr_log_file,
                 	INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,
                 	DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
char h_currencycode[APL_CCYCODE_LEN] = APL_NULL_STRING;
short i_currencycode = 0;

EXEC SQL VAR h_currencycode IS STRING;

fprintf(p_ptr_rept_file,"NOTE : Opening and Closing Bal.'s reported are in USD\n");
fprintf(p_ptr_rept_file,"\n");

int_g_lineno += 2;

if (strcmp(g_mt_commonsys_params_struct_h.dom_ccy,"USD") != 0)
	{
	if(EOM_Prnt_ExgRtDesc(p_ptr_rept_file,"USD",
						  p_ptr_log_file,&p_intl_env_data_struct_h_d,
						  l_debug_info_ptr) == APL_FAILURE)
		{
			CO_ProcMonitor(p_ptr_log_file,"ExchRateStrFn Function Failed",NULL,NULL);
		}
	}

EXEC SQL DECLARE C_Exch_Rate CURSOR
FOR 
	SELECT DISTINCT CURRENCY_CD 
FROM
	MT_INSTRUMENT;

EXEC SQL OPEN C_Exch_Rate;

IS_ANY_ORA_ERROR

for(;;)
	{
	EXEC SQL FETCH 
		C_Exch_Rate
	INTO
		:h_currencycode:i_currencycode;
	
	IS_ANY_ORA_ERROR_CURSOR

	if((strcmp(h_currencycode,"USD") == 0) || (strcmp(h_currencycode,g_mt_commonsys_params_struct_h.dom_ccy) == 0))
		continue;

	if(EOM_Prnt_ExgRtDesc(p_ptr_rept_file,h_currencycode,
							p_ptr_log_file,&p_intl_env_data_struct_h_d,
							l_debug_info_ptr) == APL_FAILURE)
		{
			CO_ProcMonitor(p_ptr_log_file,"Could Not Print the Currency Code Description",NULL,NULL);
			continue;
		}
	}
EXEC SQL CLOSE C_Exch_Rate;
fprintf(p_ptr_rept_file,"\n");
int_g_lineno++;

APL_GOBACK_SUCCESS;

RETURN_FAILURE :
   {
      CO_ProcMonitor(p_ptr_log_file,"Exiting Function PrExchgRateFn with Failure",NULL,NULL);
      return(APL_FAILURE);
   }

RETURN_SUCCESS :
   {
   CO_ProcMonitor(p_ptr_log_file,"Exiting Function PrExchgRateFn with Success",NULL,NULL);
   return(APL_SUCCESS);
   }
}


int EOM_Prnt_ExgRtDesc(FILE *p_ptr_rept_file,char *p_currencycode,
						FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
double	l_fx_rt = 0.0;
char 		chr_h_system_date[APL_DATE_LEN] = APL_NULL_STRING;
short		i_system_date = 0;
int 		int_retstat = 0;

EXEC SQL SELECT SYS_DATE
      INTO :chr_h_system_date:i_system_date
      FROM MT_EOMSYSDATE;

if (APL_FAILURE == IV_Proc_ConvToFxFn(p_currencycode,g_mt_commonsys_params_struct_h.dom_ccy,g_mt_commonsys_params_struct_h.dom_ccy,
                              chr_h_system_date,&l_fx_rt,&int_retstat,l_debug_info_ptr))
   {
      if (int_retstat == APL_SUCCESS)
      {
         fprintf(p_ptr_log_file,"ExchRate Not Found Btn %s To USD\n",p_currencycode);
         APL_GOBACK_FAIL
      }
   }

if (!(strcmp(l_mt_core_sys_params_struct_h.dir_indir_fxqt_ind,"I")))
		fprintf(p_ptr_rept_file,"NOTE : 1 %s  IS %13.6f  %s\n",g_mt_commonsys_params_struct_h.dom_ccy,(1/l_fx_rt),p_currencycode);
else
		fprintf(p_ptr_rept_file,"NOTE : 1 %s  IS %13.6f  %s\n",p_currencycode,l_fx_rt,g_mt_commonsys_params_struct_h.dom_ccy);

int_g_lineno++;

APL_GOBACK_SUCCESS;

RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Exiting Function EOM_Prnt_ExgRtDesc with Failure",NULL,NULL);
		return(APL_FAILURE);
	}

RETURN_SUCCESS :
	{
	CO_ProcMonitor(p_ptr_log_file,"Exiting Function EOM_Prnt_ExgRtDesc with Success",NULL,NULL);
	return(APL_SUCCESS);
	}
}


int EOM_Prnt_InstrDec(FILE *p_ptr_rept_file,char *p_instr_code,
					FILE *p_ptr_log_file, INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,
					DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
int i = 0;
char chr_l_openprc[30] = APL_NULL_STRING;
char chr_l_closprc[30] = APL_NULL_STRING;
char h_typeofinstr[4] = APL_NULL_STRING;
char h_currencycode[APL_CCYCODE_LEN] = APL_NULL_STRING;
char h_instr_name[INSTR_NAME_LEN_D] = APL_NULL_STRING;
double h_open_pr = 0.0;
double h_closing_pr = 0.0;
double h_fmtopen_pr = 0.0;
double h_fmtclosing_pr = 0.0;
double l_roundopen_pr = 0.0;
double l_roundclosing_pr = 0.0;
short i_instr_name = 0;
short i_currencycode = 0;
short i_typeofinstr = 0;
char chr_h_disinstrdesc[41] = APL_NULL_STRING; 
int int_nlen  = 0;
EXEC SQL VAR h_instr_name IS STRING;
EXEC SQL VAR h_currencycode IS STRING;
EXEC SQL VAR h_typeofinstr IS STRING;

EXEC SQL SELECT 
	INSTR_NAME,CURRENCY_CD,INSTR_TYPE
INTO 
	:h_instr_name:i_instr_name,:h_currencycode:i_currencycode,:h_typeofinstr:i_typeofinstr
FROM 
	MT_INSTRUMENT 
WHERE 
	INSTR_CODE =:p_instr_code;

IS_ANY_ORA_ERROR

EXEC SQL SELECT
	OPEN_PR,CLOSING_PR
INTO
	:h_open_pr,:h_closing_pr
FROM 
	MT_EOMMTHLYMKTPRC
WHERE 
	INSTR_CODE =:p_instr_code;

IS_ANY_ORA_ERROR


if (strcmp(h_typeofinstr,"FMT") == 0)  
	{
		h_fmtopen_pr = h_open_pr * 100;
		h_fmtclosing_pr = h_closing_pr * 100;
	}
else
	{
		h_fmtopen_pr = h_open_pr;
		h_fmtclosing_pr = h_closing_pr;
	}

if (APL_FAILURE == CO_Round(h_fmtopen_pr,3,&l_roundopen_pr))
	APL_GOBACK_FAIL

if (APL_FAILURE == CO_Round(h_fmtclosing_pr,3,&l_roundclosing_pr))
	APL_GOBACK_FAIL

CO_Rtv_FormatAmt(l_roundopen_pr,chr_l_openprc,'Y','Y',l_debug_info_ptr);
CO_Rtv_FormatAmt(l_roundclosing_pr,chr_l_closprc,'Y','Y',l_debug_info_ptr);


	strncpy(chr_h_disinstrdesc,h_instr_name,40);
	int_nlen = strlen(chr_h_disinstrdesc);
	chr_h_disinstrdesc[int_nlen] = APL_NULL_CHAR;



fprintf(p_ptr_rept_file,"Instrurity : %s     %s\n\n",p_instr_code,chr_h_disinstrdesc);
fprintf(p_ptr_rept_file,"Opening Price : %s",chr_l_openprc);
fprintf(p_ptr_rept_file,"  %s\n",h_currencycode);
fprintf(p_ptr_rept_file,"Closing Price : %s",chr_l_closprc);
fprintf(p_ptr_rept_file,"  %s\n\n",h_currencycode);

int_g_lineno += 5;

APL_GOBACK_SUCCESS
RETURN_SUCCESS:
	{
		CO_ProcMonitor(p_ptr_log_file,"Exiting EOM_Prnt_InstrDec Successfully",NULL,NULL);
		return(APL_SUCCESS);
	}

RETURN_FAILURE:
	{
		CO_ProcMonitor(p_ptr_log_file,"Exiting EOM_Prnt_InstrDec with Failure",NULL,NULL);
		return(APL_FAILURE);
	}
}


int EOM_Prnt_ColHeading(FILE *p_ptr_rept_file,int *p_cond_settle,
						int *p_cond_adj,int *p_cond_curr,
						int *p_cond_pend,int *p_cond_fail,
						FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
int i = 0;

if (*p_cond_settle)
	{
		fprintf(p_ptr_rept_file,"Settled Transactions\n");
		int_g_lineno++;
		if ((*p_cond_adj) || (*p_cond_curr))
			{
				fprintf(p_ptr_rept_file,"%s\n",strlen(seperator_line)-92+seperator_line);
				fprintf(p_ptr_rept_file,"%17c",32);
				fprintf(p_ptr_rept_file,"Txn Trade      Contract   Actual     Money dt                   Quantity\n");
				fprintf(p_ptr_rept_file,"Reference        Typ dt         Settl dt   Settl dt           "
												"     Amount  Ex Arena");
				if ((strcmp(l_mt_core_sys_params_struct_h.proc_reg_ind,APL_YES_IND) == 0) &&
					(strcmp(g_mt_commonsys_params_struct_h.nation_code,"RU") == 0))
					{
						fprintf(p_ptr_rept_file," Status");
					}
				fprintf(p_ptr_rept_file,"\n%s\n",strlen(seperator_line)-92+seperator_line);
				int_g_lineno += 4;
			}
		else
			{
				fprintf(p_ptr_rept_file,"%s\n",strlen(seperator_line)-92+seperator_line);
				int_g_lineno++;
			}
	}

if (*p_cond_pend)
	{
		fprintf(p_ptr_rept_file,"Pending Transactions");
		fprintf(p_ptr_rept_file,"\n%s\n",strlen(seperator_line)-92+seperator_line);
		fprintf(p_ptr_rept_file,"Reference No.     Txn             Quantity             Amount"
										"  CSD        Broker     Ex Arena");
		fprintf(p_ptr_rept_file,"\n%s\n",strlen(seperator_line)-92+seperator_line);
		int_g_lineno += 4;
	}

if (*p_cond_fail)
	{
		fprintf(p_ptr_rept_file,"Failed Transactions");
		
		
		fprintf(p_ptr_rept_file,"\n%s\n",strlen(seperator_line)- 92+seperator_line);
		
		fprintf(p_ptr_rept_file,"Reference No.    Txn                 Quantity                 "
										" Amount CSD         Broker");
		fprintf(p_ptr_rept_file,"\n%13s"," ");
		fprintf(p_ptr_rept_file,"Reason Failed                           Ex Arena");

		
		
		fprintf(p_ptr_rept_file,"\n%s\n",strlen(seperator_line)-92+seperator_line);
		int_g_lineno += 5;
	}

APL_GOBACK_SUCCESS
RETURN_SUCCESS :
	{
      CO_ProcMonitor(p_ptr_log_file, "Leaving processtion EOM_Prnt_ColHeading successfully \n",NULL,NULL);
      return(APL_SUCCESS);
   }

RETURN_FAILURE :
   {
      CO_ProcMonitor(p_ptr_log_file, "Leaving processtion EOM_Prnt_ColHeading with failure \n",NULL,NULL);
      return(APL_FAILURE);
	}
}


int EOM_Prnt_Footer(FILE *p_ptr_rept_file,char *chr_p_client,
						FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	int i = 0;
	fprintf(p_ptr_rept_file,"\n\n%s",strlen(seperator_line)-20+seperator_line);
	fprintf(p_ptr_rept_file,"END OF REPORT for Sub Account %s",chr_p_client);
	fprintf(p_ptr_rept_file,"%s\f\n",strlen(seperator_line)-21+seperator_line);
	int_g_pageno = int_g_lineno = 1; 

APL_GOBACK_SUCCESS
RETURN_SUCCESS :
   {
      CO_ProcMonitor(p_ptr_log_file, "Leaving processtion EOM_Prnt_Footer successfully \n",NULL,NULL);
      return(APL_SUCCESS);
   }

RETURN_FAILURE :
   {
      CO_ProcMonitor(p_ptr_log_file, "Leaving processtion EOM_Prnt_Footer with failure \n",NULL,NULL);
      return(APL_FAILURE);
   }
}


int EOM_Prnt_AdjDL (FILE *p_ptr_rept_file,char *chr_p_client,
						char *p_instr_code,double *p_adjopenbal,
						int *p_nosetltxn,FILE *p_ptr_log_file,
						INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
int l_quantity =0;
SYS_EOMSTMSETTLE_STRUCT_H h_eomstmadj;
SYS_EOMSTMSETTLE_STRUCT_I i_eomstmadj;

EXEC SQL DECLARE EomStmAdj CURSOR FOR
SELECT * FROM DL_EOMSTM_ADJ_VEW
WHERE CLIENT = RTRIM(:chr_p_client) and INSTR_CODE = RTRIM(:p_instr_code)
ORDER BY DEAL_DATE,SETL_DATE,INSTRUMENT_DT,MONEY_SETL_DT;

EXEC SQL OPEN EomStmAdj;

IS_ANY_ORA_ERROR

for(;;)
	{
		EXEC SQL FETCH EomStmAdj INTO 
		:h_eomstmadj:i_eomstmadj;

		IS_ANY_ORA_ERROR_CURSOR
		
		if ((PAGELEN - int_g_lineno) < 3)			
			{
				int_g_pageno++; int_g_lineno = 1;
			   fprintf(p_ptr_rept_file,"\f\n");

				if (EOM_Prnt_Hdr(p_ptr_rept_file,chr_p_client,
										p_ptr_log_file,p_intl_env_data_struct_h_d,
										l_debug_info_ptr) == APL_FAILURE)
					APL_GOBACK_FAIL
			}
		
		if ((strcmp(h_eomstmadj.h_dealcd,"1") == 0) || (strcmp(h_eomstmadj.h_dealcd,"3") == 0) || (strcmp(h_eomstmadj.h_dealcd,"7") == 0))
			*p_adjopenbal = *p_adjopenbal - h_eomstmadj.h_qty;
		else
			*p_adjopenbal = *p_adjopenbal + h_eomstmadj.h_qty;

		*p_nosetltxn = *p_nosetltxn + 1;

		l_quantity = h_eomstmadj.h_qty; 
	
		fprintf(p_ptr_rept_file,"%.16s ",h_eomstmadj.h_indentity_no);
		if (strcmp(h_eomstmadj.h_dealcd,"1") == 0) 
			fprintf(p_ptr_rept_file,"DF  ");
		if (strcmp(h_eomstmadj.h_dealcd,"2") == 0) 
			fprintf(p_ptr_rept_file,"RF  ");
		if (strcmp(h_eomstmadj.h_dealcd,"3") == 0) 
			fprintf(p_ptr_rept_file,"DVP ");
		if (strcmp(h_eomstmadj.h_dealcd,"4") == 0) 
			fprintf(p_ptr_rept_file,"RVP ");
		if (strcmp(h_eomstmadj.h_dealcd,"5") == 0) 
			fprintf(p_ptr_rept_file,"CD  ");
		if (strcmp(h_eomstmadj.h_dealcd,"6") == 0) 
			fprintf(p_ptr_rept_file,"CR  ");
		if (strcmp(h_eomstmadj.h_dealcd,"7") == 0) 
			fprintf(p_ptr_rept_file,"DCD ");
		if (strcmp(h_eomstmadj.h_dealcd,"8") == 0) 
			fprintf(p_ptr_rept_file,"RCR ");
		

		fprintf(p_ptr_rept_file,"%.10s %.10s %.10s %.10s %24d",h_eomstmadj.h_dlt,h_eomstmadj.h_setldt,h_eomstmadj.h_instrdate,h_eomstmadj.h_moneydate,l_quantity);

		fprintf(p_ptr_rept_file,"\n%50s"," ");


		fprintf(p_ptr_rept_file,"%23.2f %s\n\n",h_eomstmadj.h_amt,h_eomstmadj.h_ex_arena);
		int_g_lineno += 3;
	}
	EXEC SQL CLOSE EomStmAdj;
	APL_GOBACK_SUCCESS	

   RETURN_SUCCESS :
   {
      CO_ProcMonitor(p_ptr_log_file, "Leaving processtion EOM_Prnt_AdjDL successfully \n",NULL,NULL);

      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      CO_ProcMonitor(p_ptr_log_file, "Leaving processtion EOM_Prnt_AdjDL with failure \n",NULL,NULL);

      return(APL_FAILURE);
   }
}


int EOM_Prnt_CurrDL (FILE *p_ptr_rept_file,char *chr_p_client,
                  char *p_instr_code,double *p_adjopenbal,
                  int *p_nosetltxn,FILE *p_ptr_log_file,
                  INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
int l_quantity = 0;
SYS_EOMSTMSETTLE_STRUCT_H 	h_eomstmcurr;
SYS_EOMSTMSETTLE_STRUCT_I 	i_eomstmcurr;

EXEC SQL DECLARE EomStmCurr CURSOR FOR
SELECT * FROM DL_EOMSTM_CURR_VEW
WHERE CLIENT = RTRIM(:chr_p_client) and INSTR_CODE = RTRIM(:p_instr_code)
ORDER BY DEAL_DATE,SETL_DATE,INSTRUMENT_DT,MONEY_SETL_DT;

EXEC SQL OPEN EomStmCurr;

IS_ANY_ORA_ERROR

for(;;)
   {
      EXEC SQL FETCH EomStmCurr INTO
      :h_eomstmcurr:i_eomstmcurr;

      IS_ANY_ORA_ERROR_CURSOR
		if ((PAGELEN - int_g_lineno) < 2)			
			{
				int_g_pageno++; int_g_lineno = 1;
			   fprintf(p_ptr_rept_file,"\f\n");

				if (EOM_Prnt_Hdr(p_ptr_rept_file,chr_p_client,
										p_ptr_log_file,p_intl_env_data_struct_h_d,
										l_debug_info_ptr) == APL_FAILURE)
					APL_GOBACK_FAIL
			}
		
      if ((strcmp(h_eomstmcurr.h_dealcd,"1") == 0) || (strcmp(h_eomstmcurr.h_dealcd,"3") == 0) || (strcmp(h_eomstmcurr.h_dealcd,"7") == 0))
         *p_adjopenbal = *p_adjopenbal - h_eomstmcurr.h_qty;
      else
         *p_adjopenbal = *p_adjopenbal + h_eomstmcurr.h_qty;

		*p_nosetltxn = *p_nosetltxn + 1;

		l_quantity = h_eomstmcurr.h_qty;

      fprintf(p_ptr_rept_file,"%.16s ",h_eomstmcurr.h_indentity_no);
      if (strcmp(h_eomstmcurr.h_dealcd,"1") == 0)
         fprintf(p_ptr_rept_file,"DF  ");
      if (strcmp(h_eomstmcurr.h_dealcd,"2") == 0)
         fprintf(p_ptr_rept_file,"RF  ");
      if (strcmp(h_eomstmcurr.h_dealcd,"3") == 0)
         fprintf(p_ptr_rept_file,"DVP ");
      if (strcmp(h_eomstmcurr.h_dealcd,"4") == 0)
         fprintf(p_ptr_rept_file,"RVP ");
      if (strcmp(h_eomstmcurr.h_dealcd,"5") == 0)
         fprintf(p_ptr_rept_file,"CD  ");
      if (strcmp(h_eomstmcurr.h_dealcd,"6") == 0)
         fprintf(p_ptr_rept_file,"CR  ");
      if (strcmp(h_eomstmcurr.h_dealcd,"7") == 0)
         fprintf(p_ptr_rept_file,"DCD ");
      if (strcmp(h_eomstmcurr.h_dealcd,"8") == 0)
         fprintf(p_ptr_rept_file,"RCR ");
      

		fprintf(p_ptr_rept_file,"%.10s %.10s %.10s %.10s %24d",h_eomstmcurr.h_dlt,h_eomstmcurr.h_setldt,h_eomstmcurr.h_instrdate,h_eomstmcurr.h_moneydate,l_quantity);

		fprintf(p_ptr_rept_file,"\n%50s"," ");

		fprintf(p_ptr_rept_file,"%23.2f %s\n",h_eomstmcurr.h_amt,h_eomstmcurr.h_ex_arena);
		int_g_lineno++;
		int_g_lineno++;

   }

	EXEC SQL CLOSE EomStmCurr;

	APL_GOBACK_SUCCESS
   RETURN_SUCCESS :
   {
      CO_ProcMonitor(p_ptr_log_file, "Leaving processtion EOM_Prnt_CurrDL successfully \n",NULL,NULL);
      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      CO_ProcMonitor(p_ptr_log_file, "Leaving processtion EOM_Prnt_CurrDL with failure \n",NULL,NULL);
      return(APL_FAILURE);
   }
}


int EOM_Prnt_PendDL(FILE *p_ptr_rept_file,char *chr_p_client,
						char *p_instr_code,FILE *p_ptr_log_file,
						INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
SYS_EOMSTMPEND_STRUCT_H h_eomstmpend;
SYS_EOMSTMPEND_STRUCT_I i_eomstmpend;
double f_quantity_sum = 0.0;
double f_amount_sum = 0.0;
double f_round_quantity = 0.0;
double f_round_amount = 0.0;
double l_roundamount = 0.0;
char chr_c_fmtqty[30] = APL_NULL_STRING;
char chr_c_fmtamt[22] = APL_NULL_STRING;
char chr_l_str_qty[30] = APL_NULL_STRING;
char chr_l_str_qty1[30] = APL_NULL_STRING;
char chr_l_str_amt[30] = APL_NULL_STRING;
int int_i_txn_sum = 0;
int i = 0;
int l_quantity = 0;

EXEC SQL DECLARE EomStmPend CURSOR FOR
SELECT * FROM DL_EOMSTM_PEND_VEW
WHERE CLIENT = RTRIM(:chr_p_client) and INSTR_CODE = RTRIM(:p_instr_code)
ORDER BY SETL_DATE;

EXEC SQL OPEN EomStmPend;

IS_ANY_ORA_ERROR

for (;;)
	{
		EXEC SQL FETCH EomStmPend INTO
		:h_eomstmpend:i_eomstmpend;

		IS_ANY_ORA_ERROR_CURSOR
		if ((PAGELEN - int_g_lineno) < 2)			
			{
				int_g_pageno++; int_g_lineno = 1;
			   fprintf(p_ptr_rept_file,"\f\n");

				if (EOM_Prnt_Hdr(p_ptr_rept_file,chr_p_client,
										p_ptr_log_file,p_intl_env_data_struct_h_d,
										l_debug_info_ptr) == APL_FAILURE)
					APL_GOBACK_FAIL
			}
		

		if ((strcmp(h_eomstmpend.h_dealcd,"1") == 0) || (strcmp(h_eomstmpend.h_dealcd,"3") == 0) || (strcmp(h_eomstmpend.h_dealcd,"7") == 0))
			{
         	f_quantity_sum = f_quantity_sum - h_eomstmpend.h_qty;
				f_amount_sum = f_amount_sum - h_eomstmpend.h_amt;
			}
      else
			{
         	f_quantity_sum = f_quantity_sum + h_eomstmpend.h_qty;
				f_amount_sum = f_amount_sum + h_eomstmpend.h_amt;
			}

      int_i_txn_sum = int_i_txn_sum + 1;

		l_quantity = h_eomstmpend.h_qty;
		
		CO_Rtv_FormatAmt(h_eomstmpend.h_qty,chr_l_str_qty,'Y','Y',l_debug_info_ptr);

		


	
		fprintf(p_ptr_rept_file,"%.16s  ",h_eomstmpend.h_indentity_no);
 		if (strcmp(h_eomstmpend.h_dealcd,"1") == 0) 
         fprintf(p_ptr_rept_file,"DF  ");
      if (strcmp(h_eomstmpend.h_dealcd,"2") == 0) 
         fprintf(p_ptr_rept_file,"RF  ");
      if (strcmp(h_eomstmpend.h_dealcd,"3") == 0) 
         fprintf(p_ptr_rept_file,"DVP ");
      if (strcmp(h_eomstmpend.h_dealcd,"4") == 0) 
         fprintf(p_ptr_rept_file,"RVP ");
 		if (strcmp(h_eomstmpend.h_dealcd,"5") == 0) 
         fprintf(p_ptr_rept_file,"CD  ");
      if (strcmp(h_eomstmpend.h_dealcd,"6") == 0) 
         fprintf(p_ptr_rept_file,"CR  ");
      if (strcmp(h_eomstmpend.h_dealcd,"7") == 0) 
         fprintf(p_ptr_rept_file,"DCD ");
      if (strcmp(h_eomstmpend.h_dealcd,"8") == 0) 
         fprintf(p_ptr_rept_file,"RCR ");
	

		CO_Trim(chr_l_str_qty,' ','L',chr_l_str_qty1,l_debug_info_ptr);
		fprintf(p_ptr_rept_file,"%20s %18.2f  %.10s %.10s %2s \n",chr_l_str_qty1,h_eomstmpend.h_amt,h_eomstmpend.h_setldt,h_eomstmpend.h_domcpclt_cd,h_eomstmpend.h_ex_arena);
		int_g_lineno++;
	} 

	EXEC SQL CLOSE EomStmPend;

	
	

	
	
	CO_Rtv_FormatAmt(f_quantity_sum,chr_c_fmtqty,'Y','Y',l_debug_info_ptr);

	if ((PAGELEN - int_g_lineno) < 5)			
			{
				int_g_pageno++; int_g_lineno = 1;
			   fprintf(p_ptr_rept_file,"\f\n");

				if (EOM_Prnt_Hdr(p_ptr_rept_file,chr_p_client,
										p_ptr_log_file,p_intl_env_data_struct_h_d,
										l_debug_info_ptr) == APL_FAILURE)
					APL_GOBACK_FAIL
			}
		

	fprintf(p_ptr_rept_file,"\n%s\n",strlen(seperator_line)-92+seperator_line);
	fprintf(p_ptr_rept_file,"Total           %s %18.2f",chr_c_fmtqty,f_amount_sum);
	fprintf(p_ptr_rept_file,"\n%s\n\n",strlen(seperator_line)-92+seperator_line);
	int_g_lineno += 5;

	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      CO_ProcMonitor(p_ptr_log_file, "Leaving processtion EOM_Prnt_PendDL successfully \n",NULL,NULL);
      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      CO_ProcMonitor(p_ptr_log_file, "Leaving processtion EOM_Prnt_PendDL with failure \n",NULL,NULL);
      return(APL_FAILURE);
   }
}

	
int EOM_Prnt_FailDL(FILE *p_ptr_rept_file,char *chr_p_client,
						 char *p_instr_code,FILE *p_ptr_log_file,
						 INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
SYS_EOMSTMFAIL_STRUCT_H h_eomstmfail;
SYS_EOMSTMFAIL_STRUCT_I i_eomstmfail;
char h_faildetail[33] = APL_NULL_STRING;
double f_quantity_sum = 0.0;
double f_amount_sum = 0.0;
double f_round_quantity = 0.0;
double f_round_amount = 0.0;
double l_roundamount = 0.0;
char chr_c_fmtqty[30] = APL_NULL_STRING;
char chr_c_fmtamt[30] = APL_NULL_STRING;
char chr_l_str_qty[30] = APL_NULL_STRING;
char chr_l_str_amt[30] = APL_NULL_STRING;
int int_i_txn_sum = 0;
int i = 0;
int l_quantity = 0; 

EXEC SQL VAR h_faildetail IS STRING;

EXEC SQL DECLARE EomStmFail CURSOR FOR
SELECT * FROM DL_EOMSTM_FAIL_VEW
WHERE CLIENT = RTRIM(:chr_p_client) and INSTR_CODE = RTRIM(:p_instr_code)
ORDER BY SETL_DATE;

EXEC SQL OPEN EomStmFail;

IS_ANY_ORA_ERROR

for (;;)
	{
	 	EXEC SQL FETCH EomStmFail INTO
		:h_eomstmfail:i_eomstmfail;

		IS_ANY_ORA_ERROR_CURSOR
		if ((PAGELEN - int_g_lineno) < 2)			
			{
				int_g_pageno++; int_g_lineno = 1;
			   fprintf(p_ptr_rept_file,"\f\n");

				if (EOM_Prnt_Hdr(p_ptr_rept_file,chr_p_client,
										p_ptr_log_file,p_intl_env_data_struct_h_d,
										l_debug_info_ptr) == APL_FAILURE)
					APL_GOBACK_FAIL
			}

		if ((strcmp(h_eomstmfail.h_dealcd,"1") == 0) || (strcmp(h_eomstmfail.h_dealcd,"3") == 0) || (strcmp(h_eomstmfail.h_dealcd,"7") == 0))
			{
         	f_quantity_sum = f_quantity_sum - h_eomstmfail.h_qty;
				f_amount_sum = f_amount_sum - h_eomstmfail.h_amt;
			}
      else
			{
         	f_quantity_sum = f_quantity_sum + h_eomstmfail.h_qty;
				f_amount_sum = f_amount_sum + h_eomstmfail.h_amt;
			}

      int_i_txn_sum = int_i_txn_sum + 1;
		l_quantity = h_eomstmfail.h_qty;

		 CO_Rtv_FormatAmt(h_eomstmfail.h_qty,chr_l_str_qty,'Y','Y',l_debug_info_ptr);

		 
		
	
		EXEC SQL SELECT FAILREASON_DET
		INTO :h_faildetail
		FROM PRO_FAILCODES
		WHERE FAILREASON_CD = RTRIM(:h_eomstmfail.h_fail_cd);
		
		fprintf(p_ptr_rept_file,"%.16s ",h_eomstmfail.h_indentity_no);
 		if (strcmp(h_eomstmfail.h_dealcd,"1") == 0) 
         fprintf(p_ptr_rept_file,"DF  ");
      if (strcmp(h_eomstmfail.h_dealcd,"2") == 0) 
         fprintf(p_ptr_rept_file,"RF  ");
      if (strcmp(h_eomstmfail.h_dealcd,"3") == 0) 
         fprintf(p_ptr_rept_file,"DVP ");
      if (strcmp(h_eomstmfail.h_dealcd,"4") == 0) 
         fprintf(p_ptr_rept_file,"RVP ");
 		if (strcmp(h_eomstmfail.h_dealcd,"5") == 0) 
         fprintf(p_ptr_rept_file,"CD  ");
      if (strcmp(h_eomstmfail.h_dealcd,"6") == 0) 
         fprintf(p_ptr_rept_file,"CR  ");
      if (strcmp(h_eomstmfail.h_dealcd,"7") == 0) 
         fprintf(p_ptr_rept_file,"DCD ");
      if (strcmp(h_eomstmfail.h_dealcd,"8") == 0) 
         fprintf(p_ptr_rept_file,"RCR ");
		fprintf(p_ptr_rept_file,"%24s %21.2f %.10s %.10s\n",chr_l_str_qty,h_eomstmfail.h_amt,h_eomstmfail.h_setldt,h_eomstmfail.h_domcpclt_cd);
		

		fprintf(p_ptr_rept_file,"%10s"," ");
		fprintf(p_ptr_rept_file,"%-40.40s %-.2s\n",h_faildetail,h_eomstmfail.h_ex_arena);
		
		int_g_lineno++;
		int_g_lineno++;
		 
	}

	EXEC SQL CLOSE EomStmFail;

	 if (APL_FAILURE == CO_Round(f_quantity_sum,l_mt_core_sys_params_struct_h.qty_dec_len,&f_round_quantity))
   	APL_GOBACK_FAIL 

	

	
	
	CO_Rtv_FormatAmt(f_quantity_sum,chr_c_fmtqty,'Y','Y',l_debug_info_ptr);

	if ((PAGELEN - int_g_lineno) < 5)			
			{
				int_g_pageno++; int_g_lineno = 1;
			   fprintf(p_ptr_rept_file,"\f\n");

				if (EOM_Prnt_Hdr(p_ptr_rept_file,chr_p_client,
										p_ptr_log_file,p_intl_env_data_struct_h_d,
										l_debug_info_ptr) == APL_FAILURE)
					APL_GOBACK_FAIL
			}
		

	fprintf(p_ptr_rept_file,"\n%s\n",strlen(seperator_line)-92+seperator_line);
	fprintf(p_ptr_rept_file,"Total                %s %21.2lf",chr_c_fmtqty,f_amount_sum);
	fprintf(p_ptr_rept_file,"\n%s\n\n",strlen(seperator_line)-92+seperator_line);
	int_g_lineno += 5;

	APL_GOBACK_SUCCESS
   RETURN_SUCCESS :
   {
      CO_ProcMonitor(p_ptr_log_file, "Leaving processtion EOM_Prnt_FailDL successfully \n",NULL,NULL);
      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      CO_ProcMonitor(p_ptr_log_file, "Leaving processtion EOM_Prnt_FailDL with failure \n",NULL,NULL);
      return(APL_FAILURE);
   }
}


 int CO_DB_Connection_M(char *p_username,char *p_passwd,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
   struct sqlca               sqlca;
   sqlca.sqlcode = 0;
      
   CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CO_DB_Connection_M\n",NULL,NULL);
   
   EXEC SQL CONNECT :p_username IDENTIFIED BY :p_passwd;

   if (sqlca.sqlcode != 0)
      APL_GOBACK_FAIL

   APL_GOBACK_SUCCESS
   RETURN_SUCCESS :
   {
      CO_ProcMonitor(APL_OUT_FILE, "Leaving processtion CO_DB_Connection_M successfully \n",NULL,NULL);
      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      CO_ProcMonitor(APL_OUT_FILE, "Leaving processtion CO_DB_Connection_M with failure \n",NULL,NULL);
      return(APL_FAILURE);
   }
}


 int CO_Proc_BtchLock(char **argv,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
   struct sqlca               sqlca;
   sqlca.sqlcode = 0;

   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;

EXEC SQL VAR chr_g_restart_data is string;
 
   CO_ProcMonitor(p_ptr_log_file,"Entered processtion CA_LockRec\n",NULL,NULL);

   EXEC SQL SELECT processing_status INTO :chr_g_restart_data:g_restart_data_i
   FROM SYS_BATCHPROC
   WHERE process_name = :argv[0]
   AND   proc_init = :argv[1]
   AND STARTDATE = :argv[2]
   AND status = 'started'
   FOR UPDATE OF processing_status,status;

   IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_BtchLock successfully \n",NULL,NULL);
      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_BtchLock with failure \n",NULL,NULL);
      return(APL_FAILURE);
   }
}


 int CO_Proc_Exit(char **argv,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr,int p_flg)
 {
   struct sqlca               sqlca;
   char                       chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;

   sqlca.sqlcode = 0;

   CO_ProcMonitor(p_ptr_log_file,"Entered processtion CA_Proc_Final\n",NULL,NULL);
   if (p_flg == 0)
   {
      if (CO_ChkErr(*l_debug_info_ptr) != APL_SUCCESS)
      {
         memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
         sprintf(chr_l_buf,"Finished End of Month Statement Generation");

         EXEC SQL UPDATE SYS_BATCHPROC
         SET stat_det = :chr_l_buf,
             status = 'completed'
         WHERE process_name = :argv[0]
         AND   proc_init = :argv[1]
         AND STARTDATE = :argv[2]
         AND status = 'started';
  
         IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
      }
      EXEC SQL COMMIT WORK RELEASE;
      CO_ProcMonitor(p_ptr_log_file,"Work Committed \n",NULL,NULL);
   }
   else if (p_flg == 1)
   {
      EXEC SQL ROLLBACK WORK RELEASE;
      CO_ProcMonitor(p_ptr_log_file,"Rollback done \n",NULL,NULL);
   }

   APL_GOBACK_SUCCESS
   RETURN_SUCCESS :
   {
      CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_Exit successfully \n",NULL,NULL);
      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_Exit with failure \n",NULL,NULL);
      return(APL_FAILURE);
   }
}

int EOM_Prnt_CloseBal(FILE *p_ptr_rept_file,char *chr_p_client,
					double *p_adjopenbal,int *p_nosetltxn,
					double *p_closprc,char *p_currencycode,
					char *p_system_date,FILE *p_ptr_log_file,
					INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
int int_retstat = 0;
char chr_l_fmtadjopenbal[30] = APL_NULL_STRING;
double l_roundadjopenbalance = 0.0;
double l_fx_rt = 0.0;
double l_adjopenbalanceval = 0.0;
double l_roundadjopenbalanceval = 0.0;
double l_roundfx_rt = 0.0;
double h_pr = 0.0;

if (CO_Round(*p_adjopenbal,l_mt_core_sys_params_struct_h.qty_dec_len,&l_roundadjopenbalance) == APL_FAILURE)
	APL_GOBACK_FAIL

CO_Rtv_FormatAmt(l_roundadjopenbalance,chr_l_fmtadjopenbal,'Y','Y',l_debug_info_ptr);

if (APL_FAILURE == IV_Proc_ConvToFxFn(p_currencycode,"USD",g_mt_commonsys_params_struct_h.dom_ccy,
										p_system_date,&l_fx_rt,&int_retstat,l_debug_info_ptr))
	{
		if (int_retstat == APL_SUCCESS)
		{
			fprintf(p_ptr_log_file,"ExchRate Not Found Btn %s To USD\n",p_currencycode);
			APL_GOBACK_FAIL
		}
	}

h_pr = *p_closprc * (l_fx_rt);
l_adjopenbalanceval = *p_adjopenbal * (l_fx_rt) * (*p_closprc);

if (APL_FAILURE == CO_Round(l_adjopenbalanceval,4,&l_roundadjopenbalanceval))
	APL_GOBACK_FAIL

if (APL_FAILURE == CO_Round(h_pr,4,&l_roundfx_rt))
	APL_GOBACK_FAIL

if ((PAGELEN - int_g_lineno) < 5)			
		{
				int_g_pageno++; int_g_lineno = 1;
			   fprintf(p_ptr_rept_file,"\f\n");
				if (EOM_Prnt_Hdr(p_ptr_rept_file,chr_p_client,
										p_ptr_log_file,p_intl_env_data_struct_h_d,
										l_debug_info_ptr) == APL_FAILURE)
					APL_GOBACK_FAIL
		}
		
fprintf(p_ptr_rept_file,"Closing Balance  ");
fprintf(p_ptr_rept_file,"  %s    @ price (USD)%.4lf    %.4lf",chr_l_fmtadjopenbal,l_roundfx_rt,l_roundadjopenbalanceval);
fprintf(p_ptr_rept_file,"\n\n");
fprintf(p_ptr_rept_file,"Number of settled transactions %d",*p_nosetltxn);
fprintf(p_ptr_rept_file,"\n\n");
int_g_lineno += 4;

APL_GOBACK_SUCCESS
RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion EOM_Prnt_CloseBal successfully \n",NULL,NULL);
		return(APL_SUCCESS);
	}

RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion EOM_Prnt_CloseBal with failure \n",NULL,NULL);
		return(APL_FAILURE);
	}
}
