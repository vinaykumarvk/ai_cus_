/*
**    COPYRIGHT NOTICE
**
**   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
**
**   These materials are confidential and proprietary to
**    Polaris Software Lab Limited and no part of these materials should
**    be reproduced, published, transmitted or distributed in any form or
**    by any means, electronic, mechanical, photocopying, recording or
**    otherwise, or stored in any information storage or retrieval system
**    of any nature nor should the materials be disclosed to third parties
**    or used in any other manner for which this is not authorized, without
**    the prior express written authorization of Polaris Software Lab Limited.
**/
/*********************************************************************
**
** Module Name     :      DEAL PROCESSING
**
** File Name           :      CDSL_UPL_B.pc
**
** Description         :      Upload of Statement of Holding -CDSL (Line 04)
**
**
**
**            Version Control Block
**
** Date        Version     Author           Description        RFS No.
** ---------   --------  ---------------  ------------------   ---------
** 22/11/2006	  1.0     Amol Kulkarni
**************************************************************************/

#include<stdio_64.h>
#include <stdlib.h>
#include "Intellect_Common.h"
#include "Intellect_Interface.h"
#include "DL_Interface.h"
#include "BT_Common.h"
#include "Intellect_Error.h"
#include "CO_IndStructdef.h"

EXEC SQL INCLUDE SQLCA.H;

int DL_ModDB_CDSL_UPL_B(CDSL_UPL_B_STRUCT_H *p_cdsl_upl_b_struct_h , INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h , DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	/* Structure Variable Declarations */
	CDSL_UPL_B_STRUCT_I *l_cdsl_upl_b_struct_i;
	DL_HOLD_UPL_STRUCT_I *l_dl_hold_upl_struct_i;
	DL_HOLD_UPL_STRUCT_H *l_dl_hold_upl_struct_h;

	/*Variable Declarations */
	struct sqlca sqlca;
	char l_cln_dp_code[9]=APL_NULL_STRING;
	char l_cln_code[11]=APL_NULL_STRING;
	char l_instr_code[9]=APL_NULL_STRING;
	int l_hold_upl_RC_count = 0;	/*ISOLVE: 142 To Avoid Duplicate entry in CDSL_UPL_B table - Rahul -03/04/2007 */

	printf("\n\n********************Inside DL_ModDB_CDSL_UPL_B*********************");

	/*Calloc*/
	l_cdsl_upl_b_struct_i=(CDSL_UPL_B_STRUCT_I*)calloc(1,sizeof(CDSL_UPL_B_STRUCT_I));
	APL_MALLOC_FAIL(l_cdsl_upl_b_struct_i)
	l_dl_hold_upl_struct_i=(DL_HOLD_UPL_STRUCT_I*)calloc(1,sizeof(DL_HOLD_UPL_STRUCT_I));
	APL_MALLOC_FAIL(l_dl_hold_upl_struct_i)
	l_dl_hold_upl_struct_h=(DL_HOLD_UPL_STRUCT_H*)calloc(1,sizeof(DL_HOLD_UPL_STRUCT_H));
	APL_MALLOC_FAIL(l_dl_hold_upl_struct_h)

	/*printf("\n********************After memory allocation*********************");*/

	if (!strlen(p_cdsl_upl_b_struct_h->h_line_ind)) l_cdsl_upl_b_struct_i->i_line_ind =-1;
	else l_cdsl_upl_b_struct_i->i_line_ind =0;
	
	if (!strlen(p_cdsl_upl_b_struct_h->h_isin)) l_cdsl_upl_b_struct_i->i_isin =-1;
	else l_cdsl_upl_b_struct_i->i_isin =0;
	
	if (!strlen(p_cdsl_upl_b_struct_h->h_cur_bal)) l_cdsl_upl_b_struct_i->i_cur_bal =-1;
	else l_cdsl_upl_b_struct_i->i_cur_bal =0;
	
	if (!strlen(p_cdsl_upl_b_struct_h->h_free_bal)) l_cdsl_upl_b_struct_i->i_free_bal =-1;
	else l_cdsl_upl_b_struct_i->i_free_bal =0;
	
	if (!strlen(p_cdsl_upl_b_struct_h->h_emark_bal)) l_cdsl_upl_b_struct_i->i_emark_bal =-1;
	else l_cdsl_upl_b_struct_i->i_emark_bal =0;
	
	if (!strlen(p_cdsl_upl_b_struct_h->h_pledge_bal)) l_cdsl_upl_b_struct_i->i_pledge_bal =-1;
	else l_cdsl_upl_b_struct_i->i_pledge_bal =0;
	
	if (!strlen(p_cdsl_upl_b_struct_h->h_remat_pend)) l_cdsl_upl_b_struct_i->i_remat_pend =-1;
	else l_cdsl_upl_b_struct_i->i_remat_pend =0;
	
	if (!strlen(p_cdsl_upl_b_struct_h->h_isin_name)) l_cdsl_upl_b_struct_i->i_isin_name =-1;
	else l_cdsl_upl_b_struct_i->i_isin_name =0;
	
	if (!strlen(p_cdsl_upl_b_struct_h->h_isin_desc)) l_cdsl_upl_b_struct_i->i_isin_desc =-1;
	else l_cdsl_upl_b_struct_i->i_isin_desc =0;
	
	if (!strlen(p_cdsl_upl_b_struct_h->h_issuer_name)) l_cdsl_upl_b_struct_i->i_issuer_name =-1;
	else l_cdsl_upl_b_struct_i->i_issuer_name =0;
	
	if (!strlen(p_cdsl_upl_b_struct_h->h_issuer_add1)) l_cdsl_upl_b_struct_i->i_issuer_add1 =-1;
	else l_cdsl_upl_b_struct_i->i_issuer_add1 =0;
	
	if (!strlen(p_cdsl_upl_b_struct_h->h_issuer_add2)) l_cdsl_upl_b_struct_i->i_issuer_add2 =-1;
	else l_cdsl_upl_b_struct_i->i_issuer_add2 =0;
	
	if (!strlen(p_cdsl_upl_b_struct_h->h_issuer_add3)) l_cdsl_upl_b_struct_i->i_issuer_add3 =-1;
	else l_cdsl_upl_b_struct_i->i_issuer_add3 =0;
	
	if (!strlen(p_cdsl_upl_b_struct_h->h_issuer_city)) l_cdsl_upl_b_struct_i->i_issuer_city =-1;
	else l_cdsl_upl_b_struct_i->i_issuer_city =0;
	
	if (!strlen(p_cdsl_upl_b_struct_h->h_issuer_state)) l_cdsl_upl_b_struct_i->i_issuer_state =-1;
	else l_cdsl_upl_b_struct_i->i_issuer_state =0;
	
	if (!strlen(p_cdsl_upl_b_struct_h->h_pin_cd)) l_cdsl_upl_b_struct_i->i_pin_cd =-1;
	else l_cdsl_upl_b_struct_i->i_pin_cd =0;
	
	if (!strlen(p_cdsl_upl_b_struct_h->h_upl_date)) l_cdsl_upl_b_struct_i->i_upl_date =-1;
	else l_cdsl_upl_b_struct_i->i_upl_date =0;

	printf("\n\n*********************Before Insert*********************");
            //AIX- Warnings Removal -- added (int)
	printf("\nLINE_IND |%s|, Length |%d|",p_cdsl_upl_b_struct_h->h_line_ind,(int)strlen(p_cdsl_upl_b_struct_h->h_line_ind));
	printf("\nISIN |%s|, Length |%d|",p_cdsl_upl_b_struct_h->h_isin,(int)strlen(p_cdsl_upl_b_struct_h->h_isin));
	printf("\nCUR_BAL |%s|, Length |%d|",p_cdsl_upl_b_struct_h->h_cur_bal,(int)strlen(p_cdsl_upl_b_struct_h->h_cur_bal));
	printf("\nFREE_BAL |%s|, Length |%d|",p_cdsl_upl_b_struct_h->h_free_bal,(int)strlen(p_cdsl_upl_b_struct_h->h_free_bal));
	printf("\nEMARK_BAL |%s|, Length |%d|",p_cdsl_upl_b_struct_h->h_emark_bal,(int)strlen(p_cdsl_upl_b_struct_h->h_emark_bal));
	printf("\nPLEDGE_BAL |%s|, Length |%d|",p_cdsl_upl_b_struct_h->h_pledge_bal,(int)strlen(p_cdsl_upl_b_struct_h->h_pledge_bal));
	printf("\nREMAT_PEND |%s|, Length |%d|",p_cdsl_upl_b_struct_h->h_remat_pend,(int)strlen(p_cdsl_upl_b_struct_h->h_remat_pend));
	printf("\nISIN_NAME |%s|, Length |%d|",p_cdsl_upl_b_struct_h->h_isin_name,(int)strlen(p_cdsl_upl_b_struct_h->h_isin_name));
	printf("\nISSUER_ADD1 |%s|, Length |%d|",p_cdsl_upl_b_struct_h->h_issuer_add1,(int)strlen(p_cdsl_upl_b_struct_h->h_issuer_add1));
	printf("\nISSUER_ADD2 |%s|, Length |%d|",p_cdsl_upl_b_struct_h->h_issuer_add2,(int)strlen(p_cdsl_upl_b_struct_h->h_issuer_add2));
	printf("\nISSUER_ADD3 |%s|, Length |%d|",p_cdsl_upl_b_struct_h->h_issuer_add3,(int)strlen(p_cdsl_upl_b_struct_h->h_issuer_add3));
	printf("\nISSUER_CITY |%s|, Length |%d|",p_cdsl_upl_b_struct_h->h_issuer_city,(int)strlen(p_cdsl_upl_b_struct_h->h_issuer_city));
	printf("\nISSUER_STATE |%s|, Length |%d|",p_cdsl_upl_b_struct_h->h_issuer_state,(int)strlen(p_cdsl_upl_b_struct_h->h_issuer_state));
	printf("\nPIN_CD |%s|, Length |%d|",p_cdsl_upl_b_struct_h->h_pin_cd,(int)strlen(p_cdsl_upl_b_struct_h->h_pin_cd));
	printf("\nUPL_DATE |%s|, Length |%d|",p_cdsl_upl_b_struct_h->h_upl_date,(int)strlen(p_cdsl_upl_b_struct_h->h_upl_date));
	
	EXEC SQL INSERT INTO CDSL_UPL_B VALUES (:p_cdsl_upl_b_struct_h:l_cdsl_upl_b_struct_i);
	if(sqlca.sqlcode)
	{
		printf("\n Failed SQLCODE in INSERT CDSL_UPL_B is |%d|\n ",sqlca.sqlcode);
	}
	IS_ANY_ORA_ERROR


	/*Client CD retriaval from CDSL_UPL_A table*/
	EXEC SQL  SELECT trim(CLIENT_CD) INTO  :l_cln_dp_code FROM CDSL_UPL_A WHERE TRUNC(UPL_DATE)=TRUNC(TO_DATE(:p_cdsl_upl_b_struct_h->h_upl_date,'DD/MM/YYYY HH24:MI:SS')) AND STATUS='AA' ;
	if(sqlca.sqlcode)
	{
		printf("\n Failed SQLCODE in Client DP Code Retrival |%d|\n ",sqlca.sqlcode);
	}
	IS_ANY_ORA_ERROR
	printf("\n\tClient Depo Code:|%s|",l_cln_dp_code);
	

	/*Client CD retrival from MT_CLI_DEPO_MAP*/
	EXEC SQL SELECT TRIM(CLN_CODE) INTO :l_cln_code FROM MT_CLI_DEPO_MAP WHERE TRIM(CLN_DEPO_MAP_CLIENT_ID) = TRIM(:l_cln_dp_code) AND TRIM(CLN_DEPO_CODE)='CDSL' AND STATUS='AA';
	if(sqlca.sqlcode)
	{
		printf("\n Failed SQLCODE in Client Code Retrival |%d|\n ",sqlca.sqlcode);
	}
	IS_ANY_ORA_ERROR
	printf("\n\tClient Code:|%s|",l_cln_code);

	/*INSTR CODE retrival from MT_INSTRUMENT*/
	printf("\nISIN:|%s|",p_cdsl_upl_b_struct_h->h_isin);
	EXEC SQL  SELECT TRIM(INSTR_CODE) into :l_instr_code FROM MT_INSTRUMENT WHERE INSTR_ISIN=:p_cdsl_upl_b_struct_h->h_isin AND STATUS='AA';
	if(sqlca.sqlcode)
	{
		printf("\n Failed SQLCODE in Instr_Code Retrival |%d|\n ",sqlca.sqlcode);
	}
	IS_ANY_ORA_ERROR
	printf("\n\tINSTR Code:|%s|",l_instr_code );

	strcpy(l_dl_hold_upl_struct_h->h_client,l_cln_code);
	strcpy(l_dl_hold_upl_struct_h->h_instr_code,l_instr_code);
	strcpy(l_dl_hold_upl_struct_h->h_qty,p_cdsl_upl_b_struct_h->h_cur_bal);
	strcpy(l_dl_hold_upl_struct_h->h_upl_date,p_cdsl_upl_b_struct_h->h_upl_date);
	strcpy(l_dl_hold_upl_struct_h->h_status,"UU");
	strcpy(l_dl_hold_upl_struct_h->h_dp_id,"CDSL");
	strcpy(l_dl_hold_upl_struct_h->h_block_type,"FREE");

	if (!strlen(l_dl_hold_upl_struct_h->h_client)) l_dl_hold_upl_struct_i->i_client =-1;
	else l_dl_hold_upl_struct_i->i_client =0;
	
	if (!strlen(l_dl_hold_upl_struct_h->h_instr_code)) l_dl_hold_upl_struct_i->i_instr_code =-1;
	else l_dl_hold_upl_struct_i->i_instr_code =0;
	
	if (!strlen(l_dl_hold_upl_struct_h->h_qty)) l_dl_hold_upl_struct_i->i_qty =-1;
	else l_dl_hold_upl_struct_i->i_qty =0;
	
	if (!strlen(l_dl_hold_upl_struct_h->h_upl_date)) l_dl_hold_upl_struct_i->i_upl_date =-1;
	else l_dl_hold_upl_struct_i->i_upl_date =0;
	
	if (!strlen(l_dl_hold_upl_struct_h->h_status)) l_dl_hold_upl_struct_i->i_status =-1;
	else l_dl_hold_upl_struct_i ->i_status =0;
	
	if (!strlen(l_dl_hold_upl_struct_h->h_dp_id)) l_dl_hold_upl_struct_i->i_dp_id =-1;
	else l_dl_hold_upl_struct_i->i_dp_id =0;
	
	if (!strlen(l_dl_hold_upl_struct_h->h_block_type)) l_dl_hold_upl_struct_i->i_block_type =-1;
	else l_dl_hold_upl_struct_i ->i_block_type =0;

	/* Start - ISOLVE: 142  To Avoid Duplicate entry in CDSL_UPL_B table - Rahul -03/04/2007 */
	printf("\nDeleting record from DL_HOLD_UPL if already present in 'RF' or 'UU' status \n");
	EXEC SQL DELETE FROM DL_HOLD_UPL 
		WHERE CLIENT = :l_dl_hold_upl_struct_h->h_client 
		AND INSTR_CODE = :l_dl_hold_upl_struct_h->h_instr_code
		AND trunc(UPL_DATE) = TRUNC(TO_DATE(:l_dl_hold_upl_struct_h->h_upl_date,'DD/MM/YYYY HH24:MI:SS'))
		AND DP_ID = :l_dl_hold_upl_struct_h->h_dp_id
		AND BLOCK_TYPE = :l_dl_hold_upl_struct_h->h_block_type
		AND STATUS != 'RC';
	printf("Check sqlcode for deletion from DL_HOLD_UPL |%d|\n ",sqlca.sqlcode);
	IS_ANY_ORA_ERROR

    printf("Check table DL_HOLD_UPL for record already present in 'RC' status \n");
	EXEC SQL SELECT count(*) INTO :l_hold_upl_RC_count FROM DL_HOLD_UPL 
		WHERE CLIENT = :l_dl_hold_upl_struct_h->h_client 
		AND INSTR_CODE = :l_dl_hold_upl_struct_h->h_instr_code
		AND trunc(UPL_DATE) = TRUNC(TO_DATE(:l_dl_hold_upl_struct_h->h_upl_date,'DD/MM/YYYY HH24:MI:SS'))
		AND DP_ID = :l_dl_hold_upl_struct_h->h_dp_id
		AND BLOCK_TYPE = :l_dl_hold_upl_struct_h->h_block_type;
	printf("Check sqlcode for after DL_HOLD_UPL |%d|\n ",sqlca.sqlcode);
	IS_ANY_ORA_ERROR
	printf("DL_HOLD_UPL  no of RC status recordes are |%d|\n ",l_hold_upl_RC_count);

	if( l_hold_upl_RC_count != 0 )
	{
		printf("\n\n*******Record already uploaded and Reconciled : Can't process further*******\n\n");
	}
	else
	{
	/*End - ISOLVE: 142  To Avoid Duplicate entry in CDSL_UPL_B table - Rahul -03/04/2007 */
	/*Insertion into DL_HOLD_UPL Table*/
	EXEC SQL INSERT INTO DL_HOLD_UPL  VALUES (:l_dl_hold_upl_struct_h:l_dl_hold_upl_struct_i);
	if(sqlca.sqlcode)
	{
		printf("\n Failed SQLCODE in INSERT DL_HOLD_UPL is |%d|\n ",sqlca.sqlcode);
	}
	IS_ANY_ORA_ERROR
	}
	APL_GOBACK_SUCCESS		 		 		 		 		 		 		 

	RETURN_SUCCESS: 
		printf("\n Sucess Inside DL_ModDB_CDSL_UPL_B \n");		 		 
		return(APL_SUCCESS);

	RETURN_FAILURE:
		printf("\n Error Inside DL_ModDB_CDSL_UPL_B \n");
		return(APL_FAILURE);
}

