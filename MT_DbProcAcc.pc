/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to 
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or 
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         :         Maintenance	
 *
 * File Name           :         MT_DbProcAcc.pc
 *
 * Description         :         This file contains all functions for maintenance  of Client                                                                          Details in the System. 
 *
 *            Version Control Block
 *
 * Date        Version		Author               Description
 * ---------   --------	 ---------------  ---------------------------
 * 10/10/2005   1.0        Kouser Begum	     Validate Client Details in the System.
 *
 *********************************************************************/

#include "CO_HostStructdef.h"
#include "MT_Interface.h"
#define S_MAX_CASHACC 10
EXEC SQL INCLUDE sqlca;

extern  char    *g_cln_chld_table_names[];
extern  char    g_cln_mst_table_name[];
char            *p_cln_key_codes[2] = {"CLN_CODE",APL_NULL_STRING};
char            *p_key_values[2];

char            p_status[APL_STATUS_LEN];
int             p_cln_next_seq_num = 0;
char            p_cln_field_name[25] = "CLN_SEQ_NUM";
char 	          p_status[APL_STATUS_LEN];	
 /******************************************************************************************
  *
  *   Function Name				:  MT_Mod_DBClient 
  *
  *   Description 				:  This Function Accepts Client Structure,Row Id,Env String, 
  *
  *                              and Debug Pointer. Used in  Input and Modify Modes.
  *
  *                              returns Success/Failure depending upon validn.
  *
  *
  *   Pararmeter				          Type				        Mode					Description	
  *   ----------                     ----                  ----              ------------
  *  
  *   p_mt_ruclient_struct_h         MT_CLIENT_STRUCT_H     I               Client Details Structure
  *
  *   p_row_id_cltt                  char *                 I               Row Id of Client
  *
  *   p_intl_env_data_struct_h       INTL_ENV_DATA_STRUCT_H I               Environment String Structure
  *  
  *   l_debug_info_ptr               DEBUG_INFO_STRUCT_H    I               Debug Info Structure 
  *
  *   Return Values :
  *  
  *   APL_SUCCESS  - SUCCESS
  *
  *   APL_FAILURE  - FAILURE
  *
  *
  *******************************************************************************************/
 int MT_Mod_DBClient(MT_CLIENT_STRUCT_H *p_mt_ruclient_struct_h,char *p_row_id_cltt, INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca 		  sqlca;
	int     		 		  int_retval;
   int				     chr_link_val = 0;		 
	char    		 		  chr_h_field_val[40];
	char			 		  chr_h_sys_access_stamp[APL_DATE_LEN];
	char					  h_clt_status[APL_STATUS_LEN] = APL_NULL_STRING;
	char					  chr_h_subclient[APL_CLIENT_LENGTH]=APL_NULL_STRING;
	MT_CLIENT_STRUCT_I   *l_mt_ruclient_struct_i = NULL;
	char					  h_clt_brk_all[2];
	short					  i_clt_brk_all;
	char					  h_iscc_ind[2];
	short					  i_iscc_ind;
	char					  h_billableflag[2];
	short					  i_billableflag;
	char					  h_allow_regflag[2];
	short					  i_allow_regflag;
	char					  h_ord_clt[2];
	short					  i_ord_clt;
	int					  int_h_delete_addr_flg = 0;
	int					  int_h_delete_sch_flg = 0;
   int                 int_h_upd_clnt_flag = 0;

   int                 l_rec_count = 0;

	char					  chr_l_buf[BUFFER_LEN];
	short					  int_l_condexists = 0;
   char                chr_mainfuncarea[APL_MAINFUNCAREA_LEN];
   char                chr_l_condid[APL_CONDID_LEN];
	char					  chr_l_ccycode[APL_CCYCODE_LEN] = APL_NULL_STRING;
	char					  h_currencycode[APL_CCYCODE_LEN] = APL_NULL_STRING;
   short               i_currencycode;
	char					  h_ibbsclient[APL_CLIENT_LENGTH] = APL_NULL_STRING;
   short               i_ibbsclient;
   char                h_clnt_code[APL_CLIENT_LENGTH] = APL_NULL_STRING;
   short               i_clnt_code; 
   /*char                chr_clnt_code[11];*/
   char                chr_clnt_code[APL_CLIENT_LENGTH]= APL_NULL_STRING;
	char                chr_h_coredefccy_flg[APL_FLAG_LENGTH] = APL_NULL_STRING;
   char                chr_h_corenondefccy_flg[APL_FLAG_LENGTH] = APL_NULL_STRING;
   char                chr_h_core[APL_FLAG_LENGTH] =  APL_NULL_STRING;
	short					  i_l_ccycode	= -1;
   

	char					   chr_h_iban_account[31];
	char                 h_addnlclient[31];
	short						l_ibancond	=0; 

   char					   chr_sub_val[APL_CLIENT_LENGTH]=APL_NULL_STRING;
   char					   chr_cln_code[APL_CLIENT_LENGTH]=APL_NULL_STRING;

   char	               chr_i_val_exists = 'Y';
   char                 chr_i_val_authorised = 'Y';
   char                 chr_i_val_deleted = 'N';
   /* Added By Sana for Client Upload -- Start */
   char	l_chr_temp_checker[15]=APL_NULL_STRING;
   memset(l_chr_temp_checker,APL_NULL_CHAR,sizeof(l_chr_temp_checker));
   /* Added By Sana for Client Upload -- End */

	EXEC SQL BEGIN DECLARE SECTION; 
	EXEC SQL VAR h_clt_brk_all IS STRING;
	EXEC SQL VAR h_iscc_ind IS STRING;
	EXEC SQL VAR h_billableflag IS STRING;
	EXEC SQL VAR h_allow_regflag IS STRING;
	EXEC SQL VAR h_ord_clt IS STRING;
   EXEC SQL VAR p_mt_ruclient_struct_h->h_mstclt is string;
	EXEC SQL VAR chr_l_ccycode IS STRING;
	EXEC SQL VAR h_currencycode IS STRING;
	EXEC SQL VAR h_ibbsclient IS STRING;
	EXEC SQL VAR chr_h_core IS STRING;
	EXEC SQL VAR chr_h_iban_account IS STRING;
	EXEC SQL VAR h_addnlclient IS STRING;
	EXEC SQL VAR h_clnt_code IS STRING;
	EXEC SQL END DECLARE SECTION; 

    p_cln_key_codes[0] = "CLN_CODE";
    p_cln_key_codes[1] = APL_NULL_STRING;
    p_key_values[0] = p_mt_ruclient_struct_h->h_dl_client;
    p_key_values[1] = APL_NULL_STRING; 

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	sqlca.sqlcode = 0;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion MT_Mod_DBClient \n",NULL,p_intl_env_data_struct_h);

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Account is %s \n",p_mt_ruclient_struct_h->h_dl_client);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
		
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h->h_mode);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
	}
	

	l_mt_ruclient_struct_i = (MT_CLIENT_STRUCT_I *)calloc(1,sizeof(MT_CLIENT_STRUCT_I));
	APL_MALLOC_FAIL(l_mt_ruclient_struct_i)
	
	
	l_mt_ruclient_struct_i->i_dl_client = 0;
	l_mt_ruclient_struct_i->i_currencycode = 0;
	l_mt_ruclient_struct_i->i_our_their_ind = 0;
	l_mt_ruclient_struct_i->i_iscc_ind = 0;
	l_mt_ruclient_struct_i->i_instr_isinuseflg = 0;
	l_mt_ruclient_struct_i->i_billableflag = 0;
	l_mt_ruclient_struct_i->i_mstclt = 0;
	l_mt_ruclient_struct_i->i_clnt_clr_name = 0;
	l_mt_ruclient_struct_i->i_ibbsclient = 0;
	l_mt_ruclient_struct_i->i_clt_brk_all = 0;
	l_mt_ruclient_struct_i->i_shortclr_name = 0;
	l_mt_ruclient_struct_i->i_spotdlflg = 0;
	l_mt_ruclient_struct_i->i_fx_sell_flag = 0;
	l_mt_ruclient_struct_i->i_fx_buy_flag = 0;
	l_mt_ruclient_struct_i->i_fx_inc_flag = 0;
	l_mt_ruclient_struct_i->i_newdt = 0;
	l_mt_ruclient_struct_i->i_nationcode = 0;
	l_mt_ruclient_struct_i->i_fmt_rptflag = 0;
	l_mt_ruclient_struct_i->i_maker = 0;
	l_mt_ruclient_struct_i->i_maker_dt = 0;
	l_mt_ruclient_struct_i->i_access_stamp = 0;
	l_mt_ruclient_struct_i->i_domestic = 0;
	l_mt_ruclient_struct_i->i_part_flg = 0;
	l_mt_ruclient_struct_i->i_allow_regflag = 0;
	l_mt_ruclient_struct_i->i_regsetlflg = 0;
	l_mt_ruclient_struct_i->i_reg_bcl_ind = 0;
	l_mt_ruclient_struct_i->i_clt_status = 0;
	l_mt_ruclient_struct_i->i_taxable_ind = 0;
	l_mt_ruclient_struct_i->i_tolerance_val	= 0;		
	l_mt_ruclient_struct_i->i_fxpurchasecurrency	= 0;			
	l_mt_ruclient_struct_i->i_fxsalecurrency	= 0;	  	
	l_mt_ruclient_struct_i->i_cln_mst_ind = 0;
	l_mt_ruclient_struct_i->i_single548_support_ind	= 0;	  	
	l_mt_ruclient_struct_i->i_stat_tran_flag  = 0;		
	l_mt_ruclient_struct_i->i_trad_sett_flag  = 0;		
   l_mt_ruclient_struct_i->i_rhts_ret  = 0;        
   l_mt_ruclient_struct_i->i_valcredit = 0;        
   l_mt_ruclient_struct_i->i_auto_canc_ind = 0;        
	l_mt_ruclient_struct_i->i_keep_fracredit_flag = 0;		
	l_mt_ruclient_struct_i->i_cltdetail	= 0;            
	l_mt_ruclient_struct_i->i_generate_flag = 0; 
	l_mt_ruclient_struct_i->i_cln_sebi_ctg = 0;  
        
	
	if(strlen(p_mt_ruclient_struct_h->h_clnt_class) == 0)
		l_mt_ruclient_struct_i->i_clnt_class = -1;
	else
		l_mt_ruclient_struct_i->i_clnt_class = 0;
	
	if(strlen(p_mt_ruclient_struct_h->h_regclr_name) == 0)
		l_mt_ruclient_struct_i->i_regclr_name = -1;
	else
		l_mt_ruclient_struct_i->i_regclr_name = 0;
	
	if(strlen(p_mt_ruclient_struct_h->h_clt_class) == 0)
		l_mt_ruclient_struct_i->i_clt_class = -1;
	else
		l_mt_ruclient_struct_i->i_clt_class = 0;

	if(strlen(p_mt_ruclient_struct_h->h_classofclt) == 0)
		l_mt_ruclient_struct_i->i_classofclt = -1;
	else
		l_mt_ruclient_struct_i->i_classofclt = 0;
	
	if(strlen(p_mt_ruclient_struct_h->h_vtbclient) == 0)
		l_mt_ruclient_struct_i->i_vtbclient = -1;
	else
		l_mt_ruclient_struct_i->i_vtbclient = 0;
	
	if(strlen(p_mt_ruclient_struct_h->h_cltreg) == 0)
		l_mt_ruclient_struct_i->i_cltreg = -1;
	else
		l_mt_ruclient_struct_i->i_cltreg = 0;
	
	if(strlen(p_mt_ruclient_struct_h->h_cltmemo) == 0)
		l_mt_ruclient_struct_i->i_cltmemo = -1;
	else
		l_mt_ruclient_struct_i->i_cltmemo = 0;
	
	if(strlen(p_mt_ruclient_struct_h->h_internal_clt) == 0)
		l_mt_ruclient_struct_i->i_internal_clt = -1;
	else
		l_mt_ruclient_struct_i->i_internal_clt = 0;
	
	if(strlen(p_mt_ruclient_struct_h->h_posdt) == 0)
		l_mt_ruclient_struct_i->i_posdt = -1;
	else
		l_mt_ruclient_struct_i->i_posdt = 0;
	
	if(strlen(p_mt_ruclient_struct_h->h_base_id) == 0)
		l_mt_ruclient_struct_i->i_base_id = -1;
	else
		l_mt_ruclient_struct_i->i_base_id = 0;
	
	if(p_mt_ruclient_struct_h->h_count_swf_mon == 0)
		l_mt_ruclient_struct_i->i_count_swf_mon = -1;
	else
		l_mt_ruclient_struct_i->i_count_swf_mon = 0;
	
	if(p_mt_ruclient_struct_h->h_tlxmonth_cnt == 0)
		l_mt_ruclient_struct_i->i_tlxmonth_cnt = -1;
	else
		l_mt_ruclient_struct_i->i_tlxmonth_cnt = 0;
	
	if(p_mt_ruclient_struct_h->h_count_swf_yr == 0)
		l_mt_ruclient_struct_i->i_count_swf_yr = -1;
	else
		l_mt_ruclient_struct_i->i_count_swf_yr = 0;
	
	if(p_mt_ruclient_struct_h->h_tlxyr_cnt == 0)
		l_mt_ruclient_struct_i->i_tlxyr_cnt = -1;
	else
		l_mt_ruclient_struct_i->i_tlxyr_cnt = 0;
	
	if(strlen(p_mt_ruclient_struct_h->h_brnchcode) == 0)
		l_mt_ruclient_struct_i->i_brnchcode = -1;
	else
		l_mt_ruclient_struct_i->i_brnchcode = 0;
	
	if(strlen(p_mt_ruclient_struct_h->h_uniq_gcustody_id) == 0)
		l_mt_ruclient_struct_i->i_uniq_gcustody_id = -1;
	else
		l_mt_ruclient_struct_i->i_uniq_gcustody_id = 0;
	
	if(strlen(p_mt_ruclient_struct_h->h_cltprdcd) == 0)
		l_mt_ruclient_struct_i->i_cltprdcd = -1;
	else
		l_mt_ruclient_struct_i->i_cltprdcd = 0;
	
	if(strlen(p_mt_ruclient_struct_h->h_clhclient) == 0)
		l_mt_ruclient_struct_i->i_clhclient = -1;
	else
		l_mt_ruclient_struct_i->i_clhclient = 0;
	
	if(strlen(p_mt_ruclient_struct_h->brk_cd) == 0)
		l_mt_ruclient_struct_i->i_brk_cd = -1;
	else
		l_mt_ruclient_struct_i->i_brk_cd = 0;
	
	if(strlen(p_mt_ruclient_struct_h->h_tax_id) == 0)
		l_mt_ruclient_struct_i->i_tax_id = -1;
	else
		l_mt_ruclient_struct_i->i_tax_id = 0;
	
	if(strlen(p_mt_ruclient_struct_h->h_contactinfo) == 0)
		l_mt_ruclient_struct_i->i_contactinfo = -1;
	else
		l_mt_ruclient_struct_i->i_contactinfo = 0;
	
	if(strlen(p_mt_ruclient_struct_h->h_ord_clt) == 0)
		l_mt_ruclient_struct_i->i_ord_clt = -1;
	else
		l_mt_ruclient_struct_i->i_ord_clt = 0;
        
   if(strlen(p_mt_ruclient_struct_h->h_extclhclient) == 0)
     l_mt_ruclient_struct_i->i_extclhclient = -1;
    else
     l_mt_ruclient_struct_i->i_extclhclient = 0;
        
   if (strlen(p_mt_ruclient_struct_h->h_clt_grp) == 0)
		l_mt_ruclient_struct_i->i_clt_grp = -1;
	else
		l_mt_ruclient_struct_i->i_clt_grp = 0;

	if (strlen(p_mt_ruclient_struct_h->h_sat_oper_cd) == 0)
		l_mt_ruclient_struct_i->i_sat_oper_cd = -1;
	else
		l_mt_ruclient_struct_i->i_sat_oper_cd = 0;

	if (strlen(p_mt_ruclient_struct_h->h_authbunch_ind) == 0)
 	 l_mt_ruclient_struct_i->i_authbunch_ind = -1;
	else
		 l_mt_ruclient_struct_i->i_authbunch_ind = 0; 
	
	if (strlen(p_mt_ruclient_struct_h->h_fxpurchasecurrency) == 0)
		l_mt_ruclient_struct_i->i_fxpurchasecurrency = -1;
	else
		l_mt_ruclient_struct_i->i_fxpurchasecurrency = 0;

	if (strlen(p_mt_ruclient_struct_h->h_fxsalecurrency) == 0)
		l_mt_ruclient_struct_i->i_fxsalecurrency = -1;
	else
		l_mt_ruclient_struct_i->i_fxsalecurrency = 0;

	memset(h_addnlclient,APL_NULL_CHAR,sizeof(h_addnlclient));

/* ISKB 948 Chirag 14032008 Consolidated 548 message required */
	strcpy(p_mt_ruclient_struct_h->h_single548_support_ind,"Y");	
/* ISKB 948 Chirag 14032008 Consolidated 548 message required */

	if(strlen(p_mt_ruclient_struct_h->h_single548_support_ind) == 0)
		l_mt_ruclient_struct_i->i_single548_support_ind = -1;
	else
		l_mt_ruclient_struct_i->i_single548_support_ind = 0;

	
	if(strlen(p_mt_ruclient_struct_h->h_stat_tran_flag) == 0)
      l_mt_ruclient_struct_i->i_stat_tran_flag = -1;
   else
      l_mt_ruclient_struct_i->i_stat_tran_flag = 0;
	
   if(strlen(p_mt_ruclient_struct_h->h_trad_sett_flag) == 0)
      l_mt_ruclient_struct_i->i_trad_sett_flag = -1;
   else
      l_mt_ruclient_struct_i->i_trad_sett_flag = 0;

   if(strlen(p_mt_ruclient_struct_h->h_rhts_ret) == 0)
      l_mt_ruclient_struct_i->i_rhts_ret = -1;
   else
      l_mt_ruclient_struct_i->i_rhts_ret = 0;
  
   if(strlen(p_mt_ruclient_struct_h->h_valcredit) == 0)
      l_mt_ruclient_struct_i->i_valcredit = -1;
   else
      l_mt_ruclient_struct_i->i_valcredit = 0;
  
   if(strlen(p_mt_ruclient_struct_h->h_auto_canc_ind) == 0)
      l_mt_ruclient_struct_i->i_auto_canc_ind = -1;
   else
      l_mt_ruclient_struct_i->i_auto_canc_ind = 0; 
  
   if(strlen(p_mt_ruclient_struct_h->h_keep_fracredit_flag) == 0)
      l_mt_ruclient_struct_i->i_keep_fracredit_flag = -1;
   else
      l_mt_ruclient_struct_i->i_keep_fracredit_flag = 0; 

   if(strlen(p_mt_ruclient_struct_h->h_generate_flag) == 0)
		l_mt_ruclient_struct_i->i_generate_flag = -1;
   else
		l_mt_ruclient_struct_i->i_generate_flag = 0;

   if(strlen(p_mt_ruclient_struct_h->h_ibbsclient) == 0)
		l_mt_ruclient_struct_i->i_ibbsclient = -1;
   else
		l_mt_ruclient_struct_i->i_ibbsclient = 0;

   if(strlen(p_mt_ruclient_struct_h->h_taxable_ind) == 0)
 	 l_mt_ruclient_struct_i->i_taxable_ind = -1;
   else     
    l_mt_ruclient_struct_i->i_taxable_ind = 0;

   if (p_mt_ruclient_struct_h->h_tolerance_val == 0)
    l_mt_ruclient_struct_i->i_tolerance_val = -1;
   else     
	 l_mt_ruclient_struct_i->i_tolerance_val = 0;   

   if(strlen(p_mt_ruclient_struct_h->h_cltdetail) == 0)
	 l_mt_ruclient_struct_i->i_cltdetail = -1;
   else     
    l_mt_ruclient_struct_i->i_cltdetail = 0; 
     
   if(strlen(p_mt_ruclient_struct_h->h_checker) == 0)
	 l_mt_ruclient_struct_i->i_checker = -1;
   else     
	 l_mt_ruclient_struct_i->i_checker = 0;

   if(strlen(p_mt_ruclient_struct_h->h_checker_dt) == 0)
		l_mt_ruclient_struct_i->i_checker_dt= -1;
   else     
		l_mt_ruclient_struct_i->i_checker_dt = 0;

   if(strlen(p_mt_ruclient_struct_h->h_cln_add_2) == 0)
	   l_mt_ruclient_struct_i->i_cln_add_2 = -1;
     else
		l_mt_ruclient_struct_i->i_cln_add_2= 0;

   if(strlen(p_mt_ruclient_struct_h->h_cln_add_city) == 0)
	   l_mt_ruclient_struct_i->i_cln_add_city = -1;
     else
		l_mt_ruclient_struct_i->i_cln_add_city= 0;

   if(strlen(p_mt_ruclient_struct_h->h_cln_add_state) == 0)
		l_mt_ruclient_struct_i->i_cln_add_state = -1;
     else
		l_mt_ruclient_struct_i->i_cln_add_state= 0; 

  if(strlen(p_mt_ruclient_struct_h->h_cln_add_pin) == 0)
	   l_mt_ruclient_struct_i->i_cln_add_pin = -1;
     else
		l_mt_ruclient_struct_i->i_cln_add_pin= 0;

  if(strlen(p_mt_ruclient_struct_h->h_cln_tel) == 0)
      l_mt_ruclient_struct_i->i_cln_tel = -1;
     else
      l_mt_ruclient_struct_i->i_cln_tel= 0;

  if(strlen(p_mt_ruclient_struct_h->h_cln_fax) == 0)
      l_mt_ruclient_struct_i->i_cln_fax = -1;
     else
      l_mt_ruclient_struct_i->i_cln_fax= 0;

  if(strlen(p_mt_ruclient_struct_h->h_cln_email) == 0)
      l_mt_ruclient_struct_i->i_cln_email = -1;
     else
      l_mt_ruclient_struct_i->i_cln_email= 0;

  if(strlen(p_mt_ruclient_struct_h->h_cln_cntact1) == 0)
      l_mt_ruclient_struct_i->i_cln_cntact1 = -1;
     else
      l_mt_ruclient_struct_i->i_cln_cntact1= 0;

  if(strlen(p_mt_ruclient_struct_h->h_cln_cntact2) == 0)
      l_mt_ruclient_struct_i->i_cln_cntact2 = -1;
     else
      l_mt_ruclient_struct_i->i_cln_cntact2= 0;   

  if(strlen(p_mt_ruclient_struct_h->h_cln_pan) == 0)
      l_mt_ruclient_struct_i->i_cln_pan = -1;
     else
      l_mt_ruclient_struct_i->i_cln_pan= 0;    

  if(p_mt_ruclient_struct_h->h_cln_tds_rate == 0)
      l_mt_ruclient_struct_i->i_cln_tds_rate = -1;
     else
      l_mt_ruclient_struct_i->i_cln_tds_rate= 0;

 if(strlen(p_mt_ruclient_struct_h->h_cln_glb_cust) == 0)
   l_mt_ruclient_struct_i->i_cln_glb_cust = -1;
 else
   l_mt_ruclient_struct_i->i_cln_glb_cust= 0;

  if(strlen(p_mt_ruclient_struct_h->h_cln_start_dl) == 0)
    l_mt_ruclient_struct_i->i_cln_start_dl = -1;
   else
    l_mt_ruclient_struct_i->i_cln_start_dl= 0;

 if(strlen(p_mt_ruclient_struct_h->h_cln_bcn_req) == 0)
    l_mt_ruclient_struct_i->i_cln_bcn_req = -1;
   else
    l_mt_ruclient_struct_i->i_cln_bcn_req= 0;

 /*if(strlen(p_mt_ruclient_struct_h->h_cln_sign_img) == 0)
        l_mt_ruclient_struct_i->i_cln_sign_img = -1;
 else
        l_mt_ruclient_struct_i->i_cln_sign_img= 0;*/

   if(strlen(p_mt_ruclient_struct_h->h_cln_def_cr_agency) == 0)
       l_mt_ruclient_struct_i->i_cln_def_cr_agency = -1;
   else
       l_mt_ruclient_struct_i->i_cln_def_cr_agency= 0;

   if(strlen(p_mt_ruclient_struct_h->h_cln_cust_id_ent) == 0)
       l_mt_ruclient_struct_i->i_cln_cust_id_ent = -1;
   else
       l_mt_ruclient_struct_i->i_cln_cust_id_ent= 0;

   if(strlen(p_mt_ruclient_struct_h->h_cln_sign_memo) == 0)
      l_mt_ruclient_struct_i->i_cln_sign_memo = -1;
   else
      l_mt_ruclient_struct_i->i_cln_sign_memo= 0;  

       /* Ramya - start */
   if(strlen(p_mt_ruclient_struct_h->h_cln_sebi_subcat) == 0)
          l_mt_ruclient_struct_i->i_cln_sebi_subcat = -1;
    else
      l_mt_ruclient_struct_i->i_cln_sebi_subcat = 0;

   /* Ramya */
   p_mt_ruclient_struct_h->h_cln_country[ strlen( p_mt_ruclient_struct_h->h_cln_country) ] = '\0';

   if(strlen(p_mt_ruclient_struct_h->h_cln_country) == 0)
         l_mt_ruclient_struct_i->i_cln_country = -1;
    else
      l_mt_ruclient_struct_i->i_cln_country = 0;

   if(strlen(p_mt_ruclient_struct_h->h_clncity_desc) == 0)
       l_mt_ruclient_struct_i->i_clncity_desc = -1;
   else
      l_mt_ruclient_struct_i->i_clncity_desc = 0;
   /* Ramya - end */

	if (CO_RtvSysDtTime(chr_h_sys_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL

	APL_IF_DEBUG
	{
	 printf("Agency Code = |%s|\n",p_mt_ruclient_struct_h->h_cln_def_cr_agency);
	 printf("Exists Flag = |%c|\n",chr_i_val_exists);
	 printf("Auth Flag   = |%c|\n",chr_i_val_authorised);
    printf("Deleted Flag= |%c|\n",chr_i_val_deleted);
	}

   if (strlen(p_mt_ruclient_struct_h->h_cln_def_cr_agency) != 0)  
   {  

   int_retval = CO_Chk_CrdRatAgnValid(p_mt_ruclient_struct_h->h_cln_def_cr_agency,
               					         chr_i_val_exists,
					                        chr_i_val_authorised,
					                        chr_i_val_deleted,
		                         			l_debug_info_ptr);
		
   if (int_retval !=APL_SUCCESS)
		APL_GOBACK_FAIL
   }

	/* Checker to be copied to a temp variable -- Sana [start] */
           strcpy(l_chr_temp_checker,p_mt_ruclient_struct_h->h_checker);
           printf("\nChecker passed is : |%s|\n",l_chr_temp_checker);
        /* Checker to be copied to a temp variable -- Sana [end] */

   if ((strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_INPUT) == 0) 
	  	   || (strcmp(p_intl_env_data_struct_h->h_mode,REP_MODE) == 0))
   {
	  if (strcmp(p_intl_env_data_struct_h->h_mode,REP_MODE) == 0)
	  {
			strcpy(chr_h_subclient,p_mt_ruclient_struct_h->h_mstclt);

			EXEC SQL SELECT CLN_MASTER
			INTO :p_mt_ruclient_struct_h->h_mstclt:l_mt_ruclient_struct_i->i_mstclt 
			FROM MT_CLIENT 
         WHERE CLN_CODE = rtrim(:chr_h_subclient); 
			
         IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_ACCNOT_FND,
                                             APL_NULL_STRING,
                                             APL_NULL_STRING,
                                             APL_NULL_STRING)
			
         /***Columns Name Changed EXEC SQL SELECT MASTER_CLT 
			EXEC SQL SELECT CLN_MASTER 
			INTO :p_mt_ruclient_struct_h->h_mstclt:l_mt_ruclient_struct_i->i_mstclt 
			FROM MT_CLIENT 
                        WHERE CLN_CODE = rtrim(:chr_h_subclient); 
			WHERE CLIENT = rtrim(:chr_h_subclient);***/

				if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
      			{APL_GOBACK_FAIL } 
			   sqlca.sqlcode =0;
		}
		
  	   	strcpy(p_mt_ruclient_struct_h->h_clt_status, STATUS_UAUTH);
		strcpy(p_mt_ruclient_struct_h->h_checker, APL_NULL_STRING);
		strcpy(p_mt_ruclient_struct_h->h_checker_dt, APL_NULL_STRING);
		strcpy(p_mt_ruclient_struct_h->h_maker, p_intl_env_data_struct_h->usr);
		strcpy(p_mt_ruclient_struct_h->h_maker_dt, chr_h_sys_access_stamp);
		strcpy(p_mt_ruclient_struct_h->h_access_stamp, chr_h_sys_access_stamp); 
		strcpy(p_mt_ruclient_struct_h->h_newdt, chr_h_sys_access_stamp); 
		
		strcpy(chr_mainfuncarea,"ACC_MAINT");
		strcpy(chr_l_condid,"SAT_ACCOUNT");

		int_retval=CO_Chk_CntryEnabled(chr_mainfuncarea,chr_l_condid,&int_l_condexists,l_debug_info_ptr);
		if(int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL
		
	   strcpy(chr_mainfuncarea,"ACC_MAINT");
      strcpy(chr_l_condid,"SAT_CODE");

	   int_retval = CO_Chk_CntryEnabled(chr_mainfuncarea,chr_l_condid,&int_l_condexists,l_debug_info_ptr);
	 
	   if(int_retval != APL_SUCCESS)
		     APL_GOBACK_FAIL

      if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			  APL_GOBACK_FAIL
 
      EXEC SQL INSERT INTO MT_CLIENT
	   VALUES (:p_mt_ruclient_struct_h:l_mt_ruclient_struct_i
				 );
		
	   IS_ANY_ORA_ERROR

		/**Currency Related Check not required 
		EXEC SQL SELECT CURRENCY_CD
		INTO :chr_l_ccycode:i_l_ccycode FROM DL_CASHCLT
		WHERE GL_ACCOUNT = :p_mt_ruclient_struct_h->h_ibbsclient
		AND ROWNUM < 2;

		IS_ANY_ORA_ERROR
	
		if (sqlca.sqlcode != 1403)
		{
			if (strcmp(chr_l_ccycode,p_mt_ruclient_struct_h->h_currencycode) != 0)
			{
				CO_InsertErr(l_debug_info_ptr,ERR_GLACCOUNT_CANT_MORE_1CCY,p_mt_ruclient_struct_h->h_ibbsclient,p_mt_ruclient_struct_h->h_currencycode,APL_NULL_STRING,__LINE__,__FILE__);
				APL_GOBACK_FAIL
			}
		}
			
		strcpy(chr_h_core,SETTLEMENT);

      EXEC SQL SELECT FIELD_VAL INTO :chr_h_coredefccy_flg
      FROM PRO_GSSPLVAL
      WHERE MAIN_FUN='DEF_CASHACC_FLG'
      AND SUB_PROCESS = :chr_h_core;

      IS_ANY_ORA_ERROR
	
      strcpy(chr_mainfuncarea,"CASH_ACC_MAINT");
      strcpy(chr_l_condid,"IBAN_ACC");

      int_retval = CO_Chk_CntryEnabled(chr_mainfuncarea,chr_l_condid,&l_ibancond,l_debug_info_ptr);
      if(int_retval != APL_SUCCESS)
            APL_GOBACK_FAIL	
		
	 if(l_ibancond!=0)
	 {
		if(strcmp(p_mt_ruclient_struct_h->h_clt_brk_all,"B")!=0)
		{
			memset(chr_h_iban_account,APL_NULL_CHAR,31);
			if(APL_FAILURE == CR_Proc_IBANAcc(p_mt_ruclient_struct_h->h_ibbsclient,&chr_h_iban_account,l_debug_info_ptr))
			{
				APL_GOBACK_FAIL
			}	
		}
		else
			memset(chr_h_iban_account,APL_NULL_CHAR,31);
	 }
	 else
		memset(chr_h_iban_account,APL_NULL_CHAR,31);
	

      EXEC SQL INSERT INTO DL_CASHCLT
    VALUES (:p_mt_ruclient_struct_h->h_dl_client,
                       :p_mt_ruclient_struct_h->h_currencycode,
                       :p_mt_ruclient_struct_h->h_ibbsclient,
                       :chr_h_coredefccy_flg,	
                       :chr_h_iban_account,
							  :h_addnlclient);

	   IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_REC_EXIST,"CASH ACCOUNT",p_mt_ruclient_struct_h->h_ibbsclient,p_mt_ruclient_struct_h->h_currencycode)
    
    if(strcmp(p_intl_env_data_struct_h->h_mode,REP_MODE) == 0)
       {
         EXEC SQL INSERT INTO IV_CLIENTSETUP
         (SELECT :p_mt_ruclient_struct_h->h_dl_client,B_CCYCD,'M','M',0,:chr_h_sys_access_stamp,'N',
                 'N',:p_intl_env_data_struct_h->usr,:chr_h_sys_acces_stamp,:chr_h_sys_access_stamp,
                 'N','U',SPL_CLT_CD,COMM_CLT,
                 REC_CLT,INFORMATION,:p_mt_ruclient_struct_h->h_mstclt,0,NULL,NULL,0,
                 0,NULL, NULL,COMM_TAX_AMT,FEES_CCY,NULL,NULL
          FROM IV_CLIENTSETUP
                 WHERE CLIENT =:p_mt_ruclient_struct_h->h_mstclt);

       IS_ANY_ORA_ERROR
    }**/
       }
	 else if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_MODIFY) == 0)
	 {
             EXEC SQL SELECT CLN_BRK_ALL,CLN_ISCC_IND,CLN_BILLABLEIND,CLN_ALLOW_REGIND,CLN_ORD_CLT,CLN_CURRENCY,CLN_GL_ACCOUNT
		       INTO h_clt_brk_all:i_clt_brk_all,h_iscc_ind:i_iscc_ind,h_billableflag:i_billableflag,h_allow_regflag:i_allow_regflag,h_ord_clt:i_ord_clt,:h_currencycode:i_currencycode,:h_ibbsclient:i_ibbsclient
		       FROM MT_CLIENT
		       WHERE ROWID = :p_row_id_cltt;

		       IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
	
	/*	ISKB-2022	HDFC Bank Specific Requirement */
	IF_COND_EXISTS("MT_CLIENT","UPDATE_SUB")
	{
    if (strcmp(p_mt_ruclient_struct_h->h_dl_client,p_mt_ruclient_struct_h->h_mstclt) == 0)
    {
    
      strcpy(chr_clnt_code,p_mt_ruclient_struct_h->h_dl_client);

     EXEC SQL SELECT COUNT(*) INTO :l_rec_count
     FROM MT_GRPDETAILS 
     WHERE CLN_CODE =:chr_clnt_code; 

     IS_ANY_ORA_ERROR
    
     if (l_rec_count == 0) 
     {

        EXEC SQL INSERT INTO MT_GRPDETAILS(SELECT CLN_TYPE,CLN_EMAIL,CLN_CONTACT1,CLN_CONTACT2,CLN_SEBICTG,CLN_PAN,CLN_DEF_CR_AGENCY,CLN_CODE
        FROM MT_CLIENT
        WHERE CLN_CODE =:p_mt_ruclient_struct_h->h_dl_client);

        IS_ANY_ORA_ERROR

     }    
    } 
	}
    printf("after check of the GRP TABLE\n");
		if ((strcmp(p_mt_ruclient_struct_h->h_clt_brk_all, "B") == 0) &&
			 ((strcmp(h_clt_brk_all, "A") == 0) ||
			  (strcmp(h_clt_brk_all, "C") == 0)))
		{ 
			int_h_delete_addr_flg = 1;
			int_h_delete_sch_flg = 1;
		}
		
    if (strcmp(p_mt_ruclient_struct_h->h_iscc_ind, h_iscc_ind) != 0)
			int_h_delete_sch_flg = 1;
		
    if ((strcmp(p_mt_ruclient_struct_h->h_billableflag, "N") == 0) &&
			 (strcmp(h_billableflag, "Y") == 0))
		{
			if (int_h_delete_addr_flg == 0)
			{
				if (CR_Mod_DBAccMsgAddrDel(p_mt_ruclient_struct_h->h_dl_client,IV_MSG_NO,0,l_debug_info_ptr) != APL_SUCCESS)
					APL_GOBACK_FAIL
			}
		}

		
		

		if ( APL_FAILURE == CO_Chk_CntryEnabled("ACC_MAINT","TAXABLE_FLG",&int_l_condexists,l_debug_info_ptr))
		{
			APL_GOBACK_FAIL
		}

		if ( int_l_condexists == 0 )
		{
			if ((strcmp(p_mt_ruclient_struct_h->h_allow_regflag, "N") == 0) &&
				 (strcmp(h_allow_regflag, "Y") == 0))
	   	{
				if (int_h_delete_addr_flg == 0)
				{
					if (CR_Mod_DBAccMsgAddrDel(p_mt_ruclient_struct_h->h_dl_client,REGISTRATIONMSGNO,0,l_debug_info_ptr) != APL_SUCCESS)
						APL_GOBACK_FAIL
				
					if (CR_Mod_DBAccMsgAddrDel(p_mt_ruclient_struct_h->h_dl_client,DEP_MGMT_ADV_NO,0,l_debug_info_ptr) != APL_SUCCESS)
						APL_GOBACK_FAIL
				}
			
				if (int_h_delete_sch_flg == 0)
				{
					if (CR_Mod_AccSchDel(p_mt_ruclient_struct_h->h_dl_client,DEP_MGMT_ADV_NO,APL_NULL_STRING, 0,l_debug_info_ptr) != APL_SUCCESS)
						APL_GOBACK_FAIL
				}
			}
		}

		if ((strcmp(p_mt_ruclient_struct_h->h_ord_clt, "C") == 0) &&
			 ((strcmp(h_ord_clt, "A") == 0) ||
			  (strcmp(h_ord_clt, "B") == 0)))
	   {
			if (int_h_delete_addr_flg == 0)
			{
				if (CR_Mod_DBAccMsgAddrDel(p_mt_ruclient_struct_h->h_dl_client,DEALCONFRPTMSGNO,0,l_debug_info_ptr) != APL_SUCCESS)
					APL_GOBACK_FAIL
			
				if (CR_Mod_DBAccMsgAddrDel(p_mt_ruclient_struct_h->h_dl_client,ORDEREXPMSGNO,0,l_debug_info_ptr) != APL_SUCCESS)
					APL_GOBACK_FAIL
			}
		}

		if (int_h_delete_addr_flg == 1)
		{
			if (CR_Mod_DBAccMsgAddrDel(p_mt_ruclient_struct_h->h_dl_client,APL_NULL_STRING,0,l_debug_info_ptr) != APL_SUCCESS)
				APL_GOBACK_FAIL
		}

		if (int_h_delete_sch_flg == 1)
		{
			if (CR_Mod_AccSchDel(p_mt_ruclient_struct_h->h_dl_client, APL_NULL_STRING,APL_NULL_STRING, 0, l_debug_info_ptr) != APL_SUCCESS)
				APL_GOBACK_FAIL
		}
/**No Check required for currency related
		if ((strcmp(p_mt_ruclient_struct_h->h_currencycode,h_currencycode) != 0) || (strcmp(p_mt_ruclient_struct_h->h_ibbsclient,h_ibbsclient) != 0))
		{
		

			EXEC SQL SELECT CURRENCY_CD INTO :chr_l_ccycode:i_l_ccycode 
			FROM DL_CASHCLT WHERE GL_ACCOUNT = :p_mt_ruclient_struct_h->h_ibbsclient
			AND ROWNUM < 2;
 
			if (i_l_ccycode != -1)
			{
				if (strcmp(chr_l_ccycode,p_mt_ruclient_struct_h->h_currencycode) != 0)
				{
					CO_InsertErr(l_debug_info_ptr,ERR_GLACCOUNT_CANT_MORE_1CCY,p_mt_ruclient_struct_h->h_ibbsclient,p_mt_ruclient_struct_h->h_currencycode,APL_NULL_STRING,__LINE__,__FILE__);
					APL_GOBACK_FAIL
				}
			}
			if(strcmp(p_mt_ruclient_struct_h->h_ibbsclient,h_ibbsclient) != 0)
			{
				EXEC SQL UPDATE DL_CASHCLT
				SET DEFAULT_CCY = :chr_h_corenondefccy_flg 
				WHERE CLIENT = :p_mt_ruclient_struct_h->h_dl_client;

				IS_ANY_ORA_ERROR
			}

			EXEC SQL UPDATE DL_CASHCLT
			SET	CURRENCY_CD = :p_mt_ruclient_struct_h->h_currencycode,
					GL_ACCOUNT = :p_mt_ruclient_struct_h->h_ibbsclient,
					DEFAULT_CCY = :chr_h_coredefccy_flg
			WHERE currency_cd = :h_currencycode
			AND	GL_ACCOUNT = :h_ibbsclient 
			AND  DEFAULT_CCY in (:chr_h_coredefccy_flg,:chr_h_corenondefccy_flg);

		
			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
		} **/
		
		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL
	
		strcpy((char *)h_clt_status,STATUS_UAUTH);


		if ( APL_FAILURE == CO_Chk_CntryEnabled("ENTL_GEN_RSLTINSTR", "KEEP_FRACTION",&int_l_condexists,l_debug_info_ptr))
		{
			APL_GOBACK_FAIL
		}
		if ( int_l_condexists > 0 )
		{
				EXEC SQL UPDATE MT_CLIENT
			   SET 
						CLN_FRACT_IND = :p_mt_ruclient_struct_h->h_keep_fracredit_flag
				WHERE
						CLN_MASTER = :p_mt_ruclient_struct_h->h_dl_client;
				IS_ANY_ORA_ERROR
		}

	 /*Ramya - start */
       printf("SEBI_SUBCAT is%s",p_mt_ruclient_struct_h->h_cln_sebi_subcat);
       printf("CLN_COUNTRY is%s",p_mt_ruclient_struct_h->h_cln_country);
        printf("CLNCITY_DESC is%s",p_mt_ruclient_struct_h->h_clncity_desc);
      /*Ramya - end */

     if((strcmp(p_intl_env_data_struct_h->h_process, "U") == 0) && (strcmp(p_intl_env_data_struct_h->processtion, "MT_CLIENT") == 0))
		{
		 EXEC SQL UPDATE MT_CLIENT SET CLN_CURRENCY = NVL(:p_mt_ruclient_struct_h->h_currencycode,CLN_CURRENCY),
		    CLN_OUR_THEIR_IND = NVL(:p_mt_ruclient_struct_h->h_our_their_ind,CLN_OUR_THEIR_IND),
		    CLN_ISCC_IND = NVL(:p_mt_ruclient_struct_h->h_iscc_ind,CLN_ISCC_IND),
		    CLN_USE_ISIN_IND = NVL(:p_mt_ruclient_struct_h->h_instr_isinuseflg,CLN_USE_ISIN_IND),
		    CLN_TYPE = NVL(:p_mt_ruclient_struct_h->h_clnt_class,CLN_TYPE),
		    CLN_REG_NAME = NVL(:p_mt_ruclient_struct_h->h_regclr_name,CLN_REG_NAME),
		    CLN_CLAS = NVL(:p_mt_ruclient_struct_h->h_clt_class,CLN_CLAS),
		    CLN_BILLABLEIND = NVL(:p_mt_ruclient_struct_h->h_billableflag,CLN_BILLABLEIND),
		    CLN_CLASS = NVL(:p_mt_ruclient_struct_h->h_classofclt,CLN_CLASS),
	       CLN_VTB_CLIENT  = NVL(:p_mt_ruclient_struct_h->h_vtbclient,CLN_VTB_CLIENT),
          CLN_REG = NVL(:p_mt_ruclient_struct_h->h_cltreg,CLN_REG),
		    CLN_MEMO = NVL(:p_mt_ruclient_struct_h->h_cltmemo,CLN_MEMO),
		    CLN_INTERNAL = NVL(:p_mt_ruclient_struct_h->h_internal_clt,CLN_INTERNAL),
          CLN_POS_DT = NVL(:p_mt_ruclient_struct_h->h_posdt,CLN_POS_DT),
		    CLN_BASE_ID = NVL(:p_mt_ruclient_struct_h->h_base_id,CLN_BASE_ID),
		    CLN_COUNT_SWF_MON = NVL(:p_mt_ruclient_struct_h->h_count_swf_mon,CLN_COUNT_SWF_MON),
		    CLN_COUNT_TLX_MON = NVL(:p_mt_ruclient_struct_h->h_tlxmonth_cnt,CLN_COUNT_TLX_MON),
		    CLN_COUNT_SWF_YR = NVL(:p_mt_ruclient_struct_h->h_count_swf_yr,CLN_COUNT_SWF_YR),
		    CLN_COUNT_TLX_YR = NVL(:p_mt_ruclient_struct_h->h_tlxyr_cnt,CLN_COUNT_TLX_YR),
		    CLN_MASTER = NVL(:p_mt_ruclient_struct_h->h_mstclt,CLN_MASTER),
		    CLN_NAME = NVL(:p_mt_ruclient_struct_h->h_clnt_clr_name,CLN_NAME),
		    CLN_GL_ACCOUNT = NVL(:p_mt_ruclient_struct_h->h_ibbsclient,CLN_GL_ACCOUNT),
		    CLN_BRK_ALL = NVL(:p_mt_ruclient_struct_h->h_clt_brk_all,CLN_BRK_ALL),
		    CLN_SHORTNM = NVL(:p_mt_ruclient_struct_h->h_shortclr_name,CLN_SHORTNM),
		    CLN_ORD_CLT = NVL(:p_mt_ruclient_struct_h->h_ord_clt,CLN_ORD_CLT),
		    CLN_SPOT_DL_IND = NVL(:p_mt_ruclient_struct_h->h_spotdlflg,CLN_SPOT_DL_IND),
          CLN_FX_SELL_IND = NVL(:p_mt_ruclient_struct_h->h_fx_sell_flag,CLN_FX_SELL_IND),
		    CLN_FX_BUY_IND = NVL(:p_mt_ruclient_struct_h->h_fx_buy_flag,CLN_FX_BUY_IND),
		    CLN_FX_INC_IND = NVL(:p_mt_ruclient_struct_h->h_fx_inc_flag,CLN_FX_INC_IND),
		    CLN_BRNCHCODE = NVL(:p_mt_ruclient_struct_h->h_brnchcode,CLN_BRNCHCODE),
		    COUNTRY  = NVL(:p_mt_ruclient_struct_h->h_nationcode,COUNTRY),
		    CLN_FMT_RPTIND = NVL(:p_mt_ruclient_struct_h->h_fmt_rptflag,CLN_FMT_RPTIND),
		    MAKER = NVL(:p_mt_ruclient_struct_h->h_maker,MAKER),
		    MAKER_DT = NVL(:chr_h_sys_access_stamp,MAKER_DT),
		    ACCESS_STAMP = NVL(:chr_h_sys_access_stamp,ACCESS_STAMP),
		    CHECKER = NULL,
			 CHECKER_DT = NULL,
	       CLN_UNIQ_GCUSTODY_ID = NVL(:p_mt_ruclient_struct_h->h_uniq_gcustody_id,CLN_UNIQ_GCUSTODY_ID),
		    CLN_CLTPROD_CD = NVL(:p_mt_ruclient_struct_h->h_cltprdcd,CLN_CLTPROD_CD),
		    CLN_DOMICILE = NVL(:p_mt_ruclient_struct_h->h_domestic,CLN_DOMICILE),
		    CLN_PARTIAL_IND = NVL(:p_mt_ruclient_struct_h->h_part_flg,CLN_PARTIAL_IND),
		    CLN_ALLOW_REGIND = NVL(:p_mt_ruclient_struct_h->h_allow_regflag,CLN_ALLOW_REGIND),
		    CLN_REG_SETL_IND = NVL(:p_mt_ruclient_struct_h->h_regsetlflg,CLN_REG_SETL_IND),
		    CLN_REG_BCL_IND = NVL(:p_mt_ruclient_struct_h->h_reg_bcl_ind,CLN_REG_BCL_IND),
		    CLN_CLH = NVL(:p_mt_ruclient_struct_h->h_clhclient,CLN_CLH),
		    CLN_TAXABLE_IND = NVL(:p_mt_ruclient_struct_h->h_taxable_ind,CLN_TAXABLE_IND),
		    CLN_BRK_CD = NVL(:p_mt_ruclient_struct_h->brk_cd,CLN_BRK_CD),
		    CLN_TAX_ID = NVL(:p_mt_ruclient_struct_h->h_tax_id,CLN_TAX_ID),
		    CLN_ADD_1 = NVL(:p_mt_ruclient_struct_h->h_contactinfo,CLN_ADD_1),
		    CLN_EXT_CLH = NVL(:p_mt_ruclient_struct_h->h_extclhclient,CLN_EXT_CLH),
		    CLN_GRP = NVL(:p_mt_ruclient_struct_h->h_clt_grp,CLN_GRP),
		    CLN_SAT_OPER_CD	= NVL(:p_mt_ruclient_struct_h->h_sat_oper_cd,CLN_SAT_OPER_CD),
		    CLN_TOLERANCE		= NVL(:p_mt_ruclient_struct_h->h_tolerance_val,CLN_TOLERANCE),
		    CLN_AUTHBUNCH_IND	= NVL(:p_mt_ruclient_struct_h->h_authbunch_ind,CLN_AUTHBUNCH_IND),
		    CLN_FX_BUY_CCY	= NVL(:p_mt_ruclient_struct_h->h_fxpurchasecurrency,CLN_FX_BUY_CCY),
		    CLN_FX_SELL_CCY	= NVL(:p_mt_ruclient_struct_h->h_fxsalecurrency,CLN_FX_SELL_CCY),
		    CLN_SINGLE548_SUPPORT_IND	= NVL(:p_mt_ruclient_struct_h->h_single548_support_ind,CLN_SINGLE548_SUPPORT_IND),
		    CLN_STAT_DL_IND = NVL(:p_mt_ruclient_struct_h->h_stat_tran_flag,CLN_STAT_DL_IND),
		    CLN_DEAL_SETL_IND = NVL(:p_mt_ruclient_struct_h->h_trad_sett_flag,CLN_STAT_DL_IND),
          CLN_RHTS_RET      = NVL(:p_mt_ruclient_struct_h->h_rhts_ret,CLN_RHTS_RET),
          CLN_VALCREDIT     = NVL(:p_mt_ruclient_struct_h->h_valcredit,CLN_VALCREDIT),
          CLN_AUTO_CANC_IND = NVL(:p_mt_ruclient_struct_h->h_auto_canc_ind,CLN_AUTO_CANC_IND),
          CLN_FRACT_IND	= NVL(:p_mt_ruclient_struct_h->h_keep_fracredit_flag,CLN_FRACT_IND),
          CLN_DESC = NVL(:p_mt_ruclient_struct_h->h_cltdetail,CLN_DESC),
	       CLN_GENERATE_IND = NVL(:p_mt_ruclient_struct_h->h_generate_flag,CLN_GENERATE_IND),	
          CLN_ADD_2 = NVL(:p_mt_ruclient_struct_h->h_cln_add_2,CLN_ADD_2),
          CITY = NVL(:p_mt_ruclient_struct_h->h_cln_add_city,CITY),
          STATE = NVL(:p_mt_ruclient_struct_h->h_cln_add_state,STATE),
          CLN_ADD_PIN = NVL(:p_mt_ruclient_struct_h->h_cln_add_pin,CLN_ADD_PIN),
          CLN_TEL = NVL(:p_mt_ruclient_struct_h->h_cln_tel,CLN_TEL),
          CLN_FAX = NVL(:p_mt_ruclient_struct_h->h_cln_fax,CLN_FAX),
          CLN_EMAIL = NVL(:p_mt_ruclient_struct_h->h_cln_email,CLN_EMAIL),
          CLN_CONTACT1 = NVL(:p_mt_ruclient_struct_h->h_cln_cntact1,CLN_CONTACT1),
          CLN_CONTACT2 = NVL(:p_mt_ruclient_struct_h->h_cln_cntact2,CLN_CONTACT2),
          CLN_SEBICTG = NVL(:p_mt_ruclient_struct_h->h_cln_sebi_ctg,CLN_SEBICTG),
          CLN_PAN = NVL(:p_mt_ruclient_struct_h->h_cln_pan,CLN_PAN),
          CLN_TDS_RT = NVL(:p_mt_ruclient_struct_h->h_cln_tds_rate,CLN_TDS_RT),
          CLN_GLB_CUST = NVL(:p_mt_ruclient_struct_h->h_cln_glb_cust,CLN_GLB_CUST),
          CLN_START_DL = NVL(:p_mt_ruclient_struct_h->h_cln_start_dl,CLN_START_DL),
          CLN_BCN_REQD = NVL(:p_mt_ruclient_struct_h->h_cln_bcn_req,CLN_BCN_REQD),
          CLN_DEF_CR_AGENCY = NVL(:p_mt_ruclient_struct_h->h_cln_def_cr_agency,CLN_DEF_CR_AGENCY),
          CLN_CUST_IDENT = NVL(:p_mt_ruclient_struct_h->h_cln_cust_id_ent,CLN_CUST_IDENT),
          CLN_MST_IND = NVL(:p_mt_ruclient_struct_h->h_cln_mst_ind,CLN_MST_IND),
          CLN_SIGN_MEMO = NVL(:p_mt_ruclient_struct_h->h_cln_sign_memo,CLN_SIGN_MEMO),
          CLN_SIGN_IMG = NVL(:p_mt_ruclient_struct_h->h_cln_sign_img,CLN_SIGN_IMG) ,   
          CLN_SEBI_SUBCAT = NVL(:p_mt_ruclient_struct_h->h_cln_sebi_subcat,CLN_SEBI_SUBCAT),        
           CLN_COUNTRY = NVL(:p_mt_ruclient_struct_h->h_cln_country,CLN_COUNTRY),
           CLNCITY_DESC = NVL(:p_mt_ruclient_struct_h->h_clncity_desc,CLNCITY_DESC)
		   WHERE ROWID = :p_row_id_cltt;

		}
        else{

		EXEC SQL UPDATE MT_CLIENT
		SET CLN_CURRENCY = NVL(:p_mt_ruclient_struct_h->h_currencycode,CLN_CURRENCY),
		    CLN_OUR_THEIR_IND = NVL(:p_mt_ruclient_struct_h->h_our_their_ind,CLN_OUR_THEIR_IND),
		    CLN_ISCC_IND = :p_mt_ruclient_struct_h->h_iscc_ind:l_mt_ruclient_struct_i->i_iscc_ind,
		    CLN_USE_ISIN_IND = :p_mt_ruclient_struct_h->h_instr_isinuseflg:l_mt_ruclient_struct_i->i_instr_isinuseflg,
		    CLN_TYPE = :p_mt_ruclient_struct_h->h_clnt_class:l_mt_ruclient_struct_i->i_clnt_class,
		    CLN_REG_NAME = :p_mt_ruclient_struct_h->h_regclr_name:l_mt_ruclient_struct_i->i_regclr_name,
		    CLN_CLAS = :p_mt_ruclient_struct_h->h_clt_class:l_mt_ruclient_struct_i->i_clt_class,
		    CLN_BILLABLEIND = :p_mt_ruclient_struct_h->h_billableflag:l_mt_ruclient_struct_i->i_billableflag,
		    CLN_CLASS = :p_mt_ruclient_struct_h->h_classofclt:l_mt_ruclient_struct_i->i_classofclt,
	       CLN_VTB_CLIENT  = :p_mt_ruclient_struct_h->h_vtbclient:l_mt_ruclient_struct_i->i_vtbclient,
          CLN_REG = :p_mt_ruclient_struct_h->h_cltreg:l_mt_ruclient_struct_i->i_cltreg,
		    CLN_MEMO = :p_mt_ruclient_struct_h->h_cltmemo:l_mt_ruclient_struct_i->i_cltmemo,
		    CLN_INTERNAL = :p_mt_ruclient_struct_h->h_internal_clt:l_mt_ruclient_struct_i->i_internal_clt,
          CLN_POS_DT = :p_mt_ruclient_struct_h->h_posdt:l_mt_ruclient_struct_i->i_posdt,
		    CLN_BASE_ID = :p_mt_ruclient_struct_h->h_base_id:l_mt_ruclient_struct_i->i_base_id,
		    CLN_COUNT_SWF_MON = :p_mt_ruclient_struct_h->h_count_swf_mon:l_mt_ruclient_struct_i->i_count_swf_mon,
		    CLN_COUNT_TLX_MON = :p_mt_ruclient_struct_h->h_tlxmonth_cnt:l_mt_ruclient_struct_i->i_tlxmonth_cnt,
		    CLN_COUNT_SWF_YR = :p_mt_ruclient_struct_h->h_count_swf_yr:l_mt_ruclient_struct_i->i_count_swf_yr,
		    CLN_COUNT_TLX_YR = :p_mt_ruclient_struct_h->h_tlxyr_cnt:l_mt_ruclient_struct_i->i_tlxyr_cnt,
		    CLN_MASTER = :p_mt_ruclient_struct_h->h_mstclt:l_mt_ruclient_struct_i->i_mstclt,
		    CLN_NAME = :p_mt_ruclient_struct_h->h_clnt_clr_name:l_mt_ruclient_struct_i->i_clnt_clr_name,
		    CLN_GL_ACCOUNT = :p_mt_ruclient_struct_h->h_ibbsclient:l_mt_ruclient_struct_i->i_ibbsclient,
		    CLN_BRK_ALL = :p_mt_ruclient_struct_h->h_clt_brk_all:l_mt_ruclient_struct_i->i_clt_brk_all,
		    CLN_SHORTNM = :p_mt_ruclient_struct_h->h_shortclr_name:l_mt_ruclient_struct_i->i_shortclr_name,
		    CLN_ORD_CLT = :p_mt_ruclient_struct_h->h_ord_clt:l_mt_ruclient_struct_i->i_ord_clt,
		    CLN_SPOT_DL_IND = :p_mt_ruclient_struct_h->h_spotdlflg:l_mt_ruclient_struct_i->i_spotdlflg,
          CLN_FX_SELL_IND = :p_mt_ruclient_struct_h->h_fx_sell_flag:l_mt_ruclient_struct_i->i_fx_sell_flag,
		    CLN_FX_BUY_IND = :p_mt_ruclient_struct_h->h_fx_buy_flag:l_mt_ruclient_struct_i->i_fx_buy_flag,
		    CLN_FX_INC_IND = :p_mt_ruclient_struct_h->h_fx_inc_flag:l_mt_ruclient_struct_i->i_fx_inc_flag,
		    CLN_BRNCHCODE = :p_mt_ruclient_struct_h->h_brnchcode:l_mt_ruclient_struct_i->i_brnchcode,
		    COUNTRY  = :p_mt_ruclient_struct_h->h_nationcode:l_mt_ruclient_struct_i->i_nationcode,
		    CLN_FMT_RPTIND = :p_mt_ruclient_struct_h->h_fmt_rptflag:l_mt_ruclient_struct_i->i_fmt_rptflag,
		    MAKER = :p_intl_env_data_struct_h->usr:l_mt_ruclient_struct_i->i_maker,
		    MAKER_DT = :chr_h_sys_access_stamp:l_mt_ruclient_struct_i->i_maker_dt,
		    ACCESS_STAMP = :chr_h_sys_access_stamp:l_mt_ruclient_struct_i->i_access_stamp,
		    CHECKER = NULL,
			 CHECKER_DT = NULL,
	       CLN_UNIQ_GCUSTODY_ID = :p_mt_ruclient_struct_h->h_uniq_gcustody_id:l_mt_ruclient_struct_i->i_uniq_gcustody_id,
		    CLN_CLTPROD_CD = :p_mt_ruclient_struct_h->h_cltprdcd:l_mt_ruclient_struct_i->i_cltprdcd,
		    CLN_DOMICILE = :p_mt_ruclient_struct_h->h_domestic:l_mt_ruclient_struct_i->i_domestic,
		    CLN_PARTIAL_IND = :p_mt_ruclient_struct_h->h_part_flg:l_mt_ruclient_struct_i->i_part_flg,
		    CLN_ALLOW_REGIND = :p_mt_ruclient_struct_h->h_allow_regflag:l_mt_ruclient_struct_i->i_allow_regflag,
		    CLN_REG_SETL_IND = :p_mt_ruclient_struct_h->h_regsetlflg:l_mt_ruclient_struct_i->i_regsetlflg,
		    CLN_REG_BCL_IND = :p_mt_ruclient_struct_h->h_reg_bcl_ind:l_mt_ruclient_struct_i->i_reg_bcl_ind,
		    /*STATUS = :h_clt_status,*/
		    CLN_CLH = :p_mt_ruclient_struct_h->h_clhclient:l_mt_ruclient_struct_i->i_clhclient,
		    CLN_TAXABLE_IND = :p_mt_ruclient_struct_h->h_taxable_ind:l_mt_ruclient_struct_i->i_taxable_ind,
		    CLN_BRK_CD = :p_mt_ruclient_struct_h->brk_cd:l_mt_ruclient_struct_i->i_brk_cd,
		    CLN_TAX_ID = :p_mt_ruclient_struct_h->h_tax_id:l_mt_ruclient_struct_i->i_tax_id,
		    CLN_ADD_1 = :p_mt_ruclient_struct_h->h_contactinfo:l_mt_ruclient_struct_i->i_contactinfo,
		    CLN_EXT_CLH = :p_mt_ruclient_struct_h->h_extclhclient,
		    CLN_GRP = :p_mt_ruclient_struct_h->h_clt_grp,
		    CLN_SAT_OPER_CD	= :p_mt_ruclient_struct_h->h_sat_oper_cd,
		    CLN_TOLERANCE		= :p_mt_ruclient_struct_h->h_tolerance_val,
		    CLN_AUTHBUNCH_IND	= :p_mt_ruclient_struct_h->h_authbunch_ind,
		    CLN_FX_BUY_CCY	= :p_mt_ruclient_struct_h->h_fxpurchasecurrency,
		    CLN_FX_SELL_CCY	= :p_mt_ruclient_struct_h->h_fxsalecurrency,
		    CLN_SINGLE548_SUPPORT_IND	= :p_mt_ruclient_struct_h->h_single548_support_ind,
		    CLN_STAT_DL_IND = :p_mt_ruclient_struct_h->h_stat_tran_flag,
		    CLN_DEAL_SETL_IND = :p_mt_ruclient_struct_h->h_trad_sett_flag,
          CLN_RHTS_RET      = :p_mt_ruclient_struct_h->h_rhts_ret:l_mt_ruclient_struct_i->i_rhts_ret,
          CLN_VALCREDIT     = :p_mt_ruclient_struct_h->h_valcredit:l_mt_ruclient_struct_i->i_valcredit,
          CLN_AUTO_CANC_IND = :p_mt_ruclient_struct_h->h_auto_canc_ind:l_mt_ruclient_struct_i->i_auto_canc_ind,
          CLN_FRACT_IND	= :p_mt_ruclient_struct_h->h_keep_fracredit_flag:l_mt_ruclient_struct_i->i_keep_fracredit_flag,
          CLN_DESC = :p_mt_ruclient_struct_h->h_cltdetail:l_mt_ruclient_struct_i->i_cltdetail,
	       CLN_GENERATE_IND = :p_mt_ruclient_struct_h->h_generate_flag:l_mt_ruclient_struct_i->i_generate_flag,	
          CLN_ADD_2 = :p_mt_ruclient_struct_h->h_cln_add_2:l_mt_ruclient_struct_i->i_cln_add_2,
          CITY = :p_mt_ruclient_struct_h->h_cln_add_city:l_mt_ruclient_struct_i->i_cln_add_city,
          STATE = :p_mt_ruclient_struct_h->h_cln_add_state:l_mt_ruclient_struct_i->i_cln_add_state,
          CLN_ADD_PIN = :p_mt_ruclient_struct_h->h_cln_add_pin:l_mt_ruclient_struct_i->i_cln_add_pin,
          CLN_TEL = :p_mt_ruclient_struct_h->h_cln_tel:l_mt_ruclient_struct_i->i_cln_tel,
          CLN_FAX = :p_mt_ruclient_struct_h->h_cln_fax:l_mt_ruclient_struct_i->i_cln_fax,
          CLN_EMAIL = :p_mt_ruclient_struct_h->h_cln_email:l_mt_ruclient_struct_i->i_cln_email,
          CLN_CONTACT1 = :p_mt_ruclient_struct_h->h_cln_cntact1:l_mt_ruclient_struct_i->i_cln_cntact1,
          CLN_CONTACT2 = :p_mt_ruclient_struct_h->h_cln_cntact2:l_mt_ruclient_struct_i->i_cln_cntact2,
          CLN_SEBICTG = :p_mt_ruclient_struct_h->h_cln_sebi_ctg:l_mt_ruclient_struct_i->i_cln_sebi_ctg,
          CLN_PAN = :p_mt_ruclient_struct_h->h_cln_pan:l_mt_ruclient_struct_i->i_cln_pan,
          CLN_TDS_RT = :p_mt_ruclient_struct_h->h_cln_tds_rate:l_mt_ruclient_struct_i->i_cln_tds_rate,
          CLN_GLB_CUST = :p_mt_ruclient_struct_h->h_cln_glb_cust:l_mt_ruclient_struct_i->i_cln_glb_cust,
          CLN_START_DL = :p_mt_ruclient_struct_h->h_cln_start_dl:l_mt_ruclient_struct_i->i_cln_start_dl,
          CLN_BCN_REQD = :p_mt_ruclient_struct_h->h_cln_bcn_req:l_mt_ruclient_struct_i->i_cln_bcn_req,
          CLN_DEF_CR_AGENCY = :p_mt_ruclient_struct_h->h_cln_def_cr_agency:l_mt_ruclient_struct_i->i_cln_def_cr_agency,
          CLN_CUST_IDENT = :p_mt_ruclient_struct_h->h_cln_cust_id_ent:l_mt_ruclient_struct_i->i_cln_cust_id_ent,
          CLN_MST_IND = :p_mt_ruclient_struct_h->h_cln_mst_ind:l_mt_ruclient_struct_i->i_cln_mst_ind,
          CLN_SIGN_MEMO = :p_mt_ruclient_struct_h->h_cln_sign_memo:l_mt_ruclient_struct_i->i_cln_sign_memo,
	   /* Ramya - start */
          CLN_SIGN_IMG = :p_mt_ruclient_struct_h->h_cln_sign_img:l_mt_ruclient_struct_i->i_cln_sign_img,
          CLN_SEBI_SUBCAT = :p_mt_ruclient_struct_h->h_cln_sebi_subcat:l_mt_ruclient_struct_i->i_cln_sebi_subcat,
          CLN_COUNTRY = :p_mt_ruclient_struct_h->h_cln_country:l_mt_ruclient_struct_i->i_cln_country,
          CLNCITY_DESC = :p_mt_ruclient_struct_h->h_clncity_desc:l_mt_ruclient_struct_i->i_clncity_desc
          /* Ramya - end */

		    WHERE ROWID = :p_row_id_cltt;

		    
		}

		    IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

}


    int_retval = CR_Mod_UpdMastStatus(p_cln_key_codes,
                                      p_key_values,
                                      g_cln_mst_table_name,
                                      g_cln_chld_table_names,
                                      APL_MASTER_IND,
                                      p_status,
                                      chr_h_sys_access_stamp,
                                      p_intl_env_data_struct_h,
                                      l_debug_info_ptr);
                          

    APL_IF_DEBUG
	   {
      printf("Returned Status Value = |%s|\n",p_status);
	}

    if (int_retval != APL_SUCCESS)
        	APL_GOBACK_FAIL 
 
        /* Changes Done By Sana for changing the status to AA if the user is GFU start*/
	printf("\nCheck for authorisation Checker passed is : |%s|\n",l_chr_temp_checker);
        if(strcmp(l_chr_temp_checker,"GENERIC") == 0 && strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_INPUT) == 0)
        {
                printf("\nMarking the uploaded record as Authorised");
                fflush(stdout);
                strcpy(p_mt_ruclient_struct_h->h_clt_status,STATUS_AUTH);
                strcpy(p_mt_ruclient_struct_h->h_checker,"GENERIC");
                strcpy(p_mt_ruclient_struct_h->h_checker_dt,chr_h_sys_access_stamp);
                EXEC SQL UPDATE MT_CLIENT
                        SET CHECKER = :p_mt_ruclient_struct_h->h_checker,
                                CHECKER_DT = :chr_h_sys_access_stamp,
                                STATUS = :p_mt_ruclient_struct_h->h_clt_status,
                                ACCESS_STAMP  = :chr_h_sys_access_stamp
                        WHERE CLN_CODE = :p_mt_ruclient_struct_h->h_dl_client;
                IS_ANY_ORA_ERROR
        }
        /* Changes Done By Sana for changing the status to AA if the user is GFU end*/

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		APL_FREE(l_mt_ruclient_struct_i)

		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion MT_Mod_DBClient SUCCESS \n",NULL,p_intl_env_data_struct_h);
		
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		APL_FREE(l_mt_ruclient_struct_i)
		
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Mod_DBAcc FAILURE \n",NULL,p_intl_env_data_struct_h);
		
		return(APL_FAILURE);
	}

}

 /******************************************************************************************
  *
  *   Function Name				:  CR_Chk_Acc 
  *
  *   Description 					:  This Function Accepts Client Structure,Env String, 
  *
  *                               and Debug Pointer. Used in  Input and Modify Modes.
  *
  *                               returns Success/Failure depending upon validn.
  *
  *
  *   Pararmeter				         Type				       Mode					Description	
  *   ----------                     ----                  ----              ------------
  *  
  *   p_mt_ruclient_struct_h         MT_CLIENT_STRUCT_H     I               Client Details Structure
  *
  *   p_intl_env_data_struct_h       INTL_ENV_DATA_STRUCT_H I               Environment String Structure
  *  
  *   l_debug_info_ptr               DEBUG_INFO_STRUCT_H    I               Debug Info Structure 
  *
  *   Return Values :
  *  
  *   APL_SUCCESS  - SUCCESS
  *
  *	  APL_FAILURE  - FAILURE
  *
  *
  *******************************************************************************************/
int CR_Chk_Acc(MT_CLIENT_STRUCT_H *p_mt_ruclient_struct_h, INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca 		sqlca;
	int					int_retval;
	char					chr_h_field_val[40];
	char					chr_itype,chr_iexist,chr_icubk,chr_imastacc,chr_iauthorised,chr_ideleted;
	char					chr_ifrozen,chr_iclosed;
	char					h_mstclt[11];
	short					i_mstclt;
	char					h_ord_clt[2];
	short					i_ord_clt;
	char					h_clt_brk_all[2];
	short					i_clt_brk_all;
	char					h_billableflag[2];
	short					i_billableflag;
	char					chr_l_buf[BUFFER_LEN];
   int               int_l_count=0;

	short					  int_l_condexists = 0;
   char chr_mainfuncarea[APL_MAINFUNCAREA_LEN];
   char chr_l_condid[APL_CONDID_LEN];

	EXEC SQL BEGIN DECLARE SECTION;
	EXEC SQL VAR h_mstclt IS STRING;
	EXEC SQL VAR h_ord_clt IS STRING;
	EXEC SQL VAR h_clt_brk_all IS STRING;
	EXEC SQL VAR h_billableflag IS STRING;
	EXEC SQL END DECLARE SECTION;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	sqlca.sqlcode = 0;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_Acc \n",NULL,p_intl_env_data_struct_h);
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Account is %s \n",p_mt_ruclient_struct_h->h_dl_client);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
		
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h->h_mode);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
	}
	
	
	chr_itype = 'M';
	chr_iexist = 'N';
   strcpy((char *)l_mt_core_sys_params_struct_h.sub_clt_proc,"Y");//AIX - Warnings Removal

	/**No Check Required for Currency Code Check
  int_retval = CO_Chk_CcyValid(p_mt_ruclient_struct_h->h_currencycode,
                              chr_itype,
                              chr_iexist,
                              l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
		APL_GOBACK_FAIL**/

	if (strcmp(l_mt_core_sys_params_struct_h.sub_clt_proc, "Y") == 0)
	{
		if ((strcmp(p_mt_ruclient_struct_h->h_dl_client,p_mt_ruclient_struct_h->h_mstclt) != 0) && (strlen(p_mt_ruclient_struct_h->h_mstclt) != 0)) /*DataPatch-CS0181192-Mandatory for Add-Pavan */
		{
			chr_iexist = 'Y';
			chr_icubk = 'C';
			if (strcmp(p_intl_env_data_struct_h->h_mode,REP_MODE)!=0) 
			{
				chr_imastacc = 'M';
			}
			else
			{
				chr_imastacc = NULL;
			}
			chr_iauthorised = 'Y';
			chr_ideleted = 'N';
			chr_ifrozen = 'N';
			chr_iclosed = 'N';
         printf("Vallll of chr_imastacc ==%c\n",chr_imastacc);

			int_retval = CO_Chk_AccValid(p_mt_ruclient_struct_h->h_mstclt,chr_iexist,chr_icubk,NULL,chr_imastacc,chr_iauthorised,chr_ideleted,chr_ifrozen,chr_iclosed,l_debug_info_ptr);

			if (int_retval != APL_SUCCESS)
				APL_GOBACK_FAIL
		}
	}
 if(strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_INPUT) == 0)
	{
      strcpy(chr_mainfuncarea,"ACC_MAINT");
		strcpy(chr_l_condid,"SAT_ACCOUNT");
		int_retval=(CO_Chk_CntryEnabled(chr_mainfuncarea,chr_l_condid,&int_l_condexists,l_debug_info_ptr));
		if(int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL

      if(int_l_condexists > 0)
		{
			if(strlen(p_mt_ruclient_struct_h->h_clhclient)!=0)
			{
			EXEC SQL SELECT COUNT(*) INTO :int_l_count 
       FROM MT_CLIENT 
       WHERE CLN_CLH=:p_mt_ruclient_struct_h->h_clhclient;

			IS_ANY_ORA_ERROR

			if(int_l_count != 0)
			{
				CO_InsertErr(l_debug_info_ptr,ERR_SATACC_EXISTS,p_mt_ruclient_struct_h->h_clhclient,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
			}
			}
      }
		strcpy(chr_mainfuncarea,"ACC_MAINT");
		strcpy(chr_l_condid,"SAT_CODE");
		int_retval=(CO_Chk_CntryEnabled(chr_mainfuncarea,chr_l_condid,&int_l_condexists,l_debug_info_ptr));
		if(int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL

      if(int_l_condexists > 0)
		{
			if(strlen(p_mt_ruclient_struct_h->h_cltreg)!=0)
			{
			EXEC SQL SELECT COUNT(*)INTO :int_l_count 
       FROM MT_CLIENT 
       WHERE CLN_REG=:p_mt_ruclient_struct_h->h_cltreg;

			IS_ANY_ORA_ERROR

			if(int_l_count != 0)
			{
				CO_InsertErr(l_debug_info_ptr,ERR_SATCD_EXIST,p_mt_ruclient_struct_h->h_cltreg,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
         }
		}
     }
   }
	if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_MODIFY)== 0)
	{
     EXEC SQL SELECT CLN_MASTER,CLN_ORD_CLT,CLN_BRK_ALL,CLN_BILLABLEIND
		          INTO :h_mstclt:i_mstclt,:h_ord_clt:i_ord_clt,
                             :h_clt_brk_all:i_clt_brk_all,
                             :h_billableflag:i_billableflag
	           	 FROM MT_CLIENT
		          WHERE CLN_CODE = :p_mt_ruclient_struct_h->h_dl_client;

     /**Column Names Changed EXEC SQL SELECT master_clt,ORD_CLT,CLT_BRK_ALL,BILLABLEIND
		                                  INTO :h_mstclt:i_mstclt,
                                           :h_ord_clt:i_ord_clt,
                                           :h_clt_brk_all:i_clt_brk_all,
                                           :h_billableflag:i_billableflag
		FROM MT_CLIENT
	                                  	WHERE client = :p_mt_ruclient_struct_h->h_dl_client;**/

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

		if (strcmp(l_mt_core_sys_params_struct_h.sub_clt_proc, "Y") == 0)
		{
		   	if ((strcmp(p_mt_ruclient_struct_h->h_mstclt, h_mstclt) != 0) && (strlen(p_mt_ruclient_struct_h->h_mstclt) != 0)) /*DataPatch-CS0181192-Mandatory for Add-Pavan */
			{
				if (strcmp(p_mt_ruclient_struct_h->h_dl_client, h_mstclt) == 0)
				{
					int_retval = CR_Chk_SubAcc(p_mt_ruclient_struct_h->h_dl_client,l_debug_info_ptr);
					if (int_retval == APL_SUCCESS)
						CO_InsertErr(l_debug_info_ptr,ERR_SUBACC_EXISTS_FORMASTACC,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
				}
			}
		}

		if (strcmp(l_mt_core_sys_params_struct_h.ord_proc_ind, "Y") == 0)
		{
			
			if (strcmp(p_mt_ruclient_struct_h->h_ord_clt, h_ord_clt) != 0)
			{
				if ((strcmp(p_mt_ruclient_struct_h->h_ord_clt, "C") == 0) &&
					 ((strcmp(h_ord_clt, "A") == 0) ||
					  (strcmp(h_ord_clt, "B") == 0)))
			   {
					int_retval = CR_Chk_AccOrd(p_mt_ruclient_struct_h->h_dl_client,l_debug_info_ptr);
					if (int_retval == APL_RECS_EXIST)
						CO_InsertErr(l_debug_info_ptr,ERR_ACCORD_EXISTS_CANTCHGTO_CUSTODY,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
					else if (int_retval == APL_FAILURE)
						APL_GOBACK_FAIL
				}

				if ((strcmp(p_mt_ruclient_struct_h->h_ord_clt, "B") == 0) &&
					 ((strcmp(h_ord_clt, "A") == 0) ||
					  (strcmp(h_ord_clt, "C") == 0)))
				{
					int_retval = CR_Chk_AccTrd(p_mt_ruclient_struct_h->h_dl_client,l_debug_info_ptr);
					if (int_retval == APL_RECS_EXIST)
						CO_InsertErr(l_debug_info_ptr,ERR_TRDSEXIST_CANTCHGTO_BRKCLIENT,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
					else if (int_retval == APL_FAILURE)
						APL_GOBACK_FAIL

					if (strcmp(g_mt_commonsys_params_struct_h.bill_module_ind, "Y") == 0)
					{
						int_retval = CR_Chk_AccIVSetup(p_mt_ruclient_struct_h->h_dl_client,l_debug_info_ptr);
						if (int_retval == APL_RECS_EXIST)
							CO_InsertErr(l_debug_info_ptr,ERR_BILL_FORACC_CANTCHG_BRKCLIENT,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
						else if (int_retval == APL_FAILURE)
							APL_GOBACK_FAIL
					}
				}
			}
		}

		if (strcmp(p_mt_ruclient_struct_h->h_clt_brk_all,h_clt_brk_all) != 0)
		{
			 if (strcmp(p_mt_ruclient_struct_h->h_clt_brk_all, "C") == 0)

		/*if ((strcmp(p_mt_ruclient_struct_h->h_clt_brk_all, "C") == 0) &&
				 ((strcmp(h_clt_brk_all, "A") == 0) ||
				  (strcmp(h_clt_brk_all, "B") == 0)))*/
			{
				int_retval = CR_Chk_AccDomPtyTrd(p_mt_ruclient_struct_h->h_dl_client,l_debug_info_ptr);
				if (int_retval == APL_RECS_EXIST)
					CO_InsertErr(l_debug_info_ptr,ERR_ACCOUNT_ISCNTRPARTY_CANT_CHG_TOCUST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
				else if (int_retval == APL_FAILURE)
					APL_GOBACK_FAIL
			}

			if ((strcmp(p_mt_ruclient_struct_h->h_clt_brk_all, "B") == 0) &&
				 ((strcmp(h_clt_brk_all, "A") == 0) ||
				  (strcmp(h_clt_brk_all, "C") == 0)))
			{
				int_retval = CR_Chk_AccTrd(p_mt_ruclient_struct_h->h_dl_client,l_debug_info_ptr);
				if (int_retval == APL_RECS_EXIST)
					CO_InsertErr(l_debug_info_ptr,ERR_TRDSEXIST_CANTCHGTO_BRK,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
				else if (int_retval == APL_FAILURE)
					APL_GOBACK_FAIL

				int_retval = CR_Chk_AccOrd(p_mt_ruclient_struct_h->h_dl_client,l_debug_info_ptr);
				if (int_retval == APL_RECS_EXIST)
					CO_InsertErr(l_debug_info_ptr,ERR_ORDEXIST_CANT_CHGTO_BRK,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
				else if (int_retval == APL_FAILURE)
					APL_GOBACK_FAIL

				int_retval = CR_Chk_AccPos(p_mt_ruclient_struct_h->h_dl_client,l_debug_info_ptr);
				if (int_retval == APL_RECS_EXIST)
					CO_InsertErr(l_debug_info_ptr,ERR_POSNEXIST_CANT_CHGTO_BRK,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
				else if (int_retval == APL_FAILURE)
					APL_GOBACK_FAIL

				if (strcmp(g_mt_commonsys_params_struct_h.ca_module_ind, "Y") == 0)
				{
					int_retval = CR_Chk_AccEntl(p_mt_ruclient_struct_h->h_dl_client,l_debug_info_ptr);
					if (int_retval == APL_RECS_EXIST)
						CO_InsertErr(l_debug_info_ptr,ERR_ENTITLEEXISTS_CANTCHG_TOBRK,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
					else if (int_retval == APL_FAILURE)
						APL_GOBACK_FAIL
				}
			}
		}

		if (strcmp(g_mt_commonsys_params_struct_h.bill_module_ind, "Y") == 0)
		{
			if (strcmp(p_mt_ruclient_struct_h->h_billableflag,h_billableflag) != 0)
			{
				int_retval = IV_Rtv_Bill_FrmGendt_DlvDt(l_debug_info_ptr);
				
				if (int_retval == APL_SUCCESS)
					CO_InsertErr(l_debug_info_ptr,ERR_ACCOUNT_BTWN_GEN_AND_DELV_CANTCHG_FLAG,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);

				if ((strcmp(p_mt_ruclient_struct_h->h_billableflag, "N") == 0)
						&& (strcmp(h_billableflag, "Y") == 0))
				{
					int_retval = CR_Chk_AccIVSetup(p_mt_ruclient_struct_h->h_dl_client,l_debug_info_ptr);
					if (int_retval == APL_RECS_EXIST)
						CO_InsertErr(l_debug_info_ptr,ERR_BILL_FORACC_CANTCHG_BILLFLAG,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
					else if (int_retval == APL_FAILURE)
						APL_GOBACK_FAIL
				}
			}
		}
		

      strcpy(chr_mainfuncarea,"ACC_MAINT");
		strcpy(chr_l_condid,"SAT_ACCOUNT");
		int_retval=(CO_Chk_CntryEnabled(chr_mainfuncarea,chr_l_condid,&int_l_condexists,l_debug_info_ptr));
		if(int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL

      if(int_l_condexists > 0)
		{
		 if(strlen(p_mt_ruclient_struct_h->h_clhclient)!=0)
		 {
			EXEC SQL SELECT COUNT(*) INTO :int_l_count FROM MT_CLIENT WHERE CLN_CLH=:p_mt_ruclient_struct_h->h_clhclient AND CLN_CODE<>:p_mt_ruclient_struct_h->h_dl_client;
			if(int_l_count != 0)
			{
				CO_InsertErr(l_debug_info_ptr,ERR_SATACC_EXISTS,p_mt_ruclient_struct_h->h_clhclient,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
			}
		}
      }
		strcpy(chr_mainfuncarea,"ACC_MAINT");
		strcpy(chr_l_condid,"SAT_CODE");
		int_retval=(CO_Chk_CntryEnabled(chr_mainfuncarea,chr_l_condid,&int_l_condexists,l_debug_info_ptr));
		if(int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL

      if(int_l_condexists > 0)
		{
			if(strlen(p_mt_ruclient_struct_h->h_cltreg)!=0)
			{
			EXEC SQL SELECT COUNT(*)INTO :int_l_count FROM MT_CLIENT WHERE CLN_REG=:p_mt_ruclient_struct_h->h_cltreg and CLN_CODE<>:p_mt_ruclient_struct_h->h_dl_client;
			if(int_l_count != 0)
			{
				CO_InsertErr(l_debug_info_ptr,ERR_SATCD_EXIST,p_mt_ruclient_struct_h->h_cltreg,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
         }
	  }
     }
}

	if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
		APL_GOBACK_FAIL
		
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_Acc SUCCESS \n",NULL,p_intl_env_data_struct_h);
		
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_Acc FAILURE \n",NULL,p_intl_env_data_struct_h);
		
		return(APL_FAILURE);
	}
}
 /****************************************************************************************
  *
  *   Function Name				:  CR_Chk_SubAcc 
  *
  *   Description 					:  This Function Accepts Client Code and
  *
  *                               Debug Pointer. Used in  Input and Modify Modes.
  *
  *                               returns Success/Failure depending upon validn.
  *
  *
  *   Pararmeter			     Type				      Mode					Description	
  *   ----------             ----                  ----              ------------
  *  
  *   chr_p_acct             char *                 I               Client Code 

  *   l_debug_info_ptr       DEBUG_INFO_STRUCT_H    I               Debug Info Structure 
  *
  *   Return Values :
  *  
  *   APL_SUCCESS  - SUCCESS
  *
  *	  APL_FAILURE  - FAILURE
  *
  ***************************************************************************************/
int CR_Chk_SubAcc(char *chr_p_acct, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca  sqlca;
	int			  int_h_num_rows = 0;
	char			  h_clt_status[APL_STATUS_LEN];
	char			  chr_l_buf[BUFFER_LEN];
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	sqlca.sqlcode = 0;
	
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_SubAcc \n",NULL,NULL);
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Account is %s \n",chr_p_acct);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
	}
	
	strcpy((char *)h_clt_status, STATUS_CLS_AUTH);

 APL_IF_DEBUG
	{
		printf("Status compared = %s\n",h_clt_status);
		printf("Accont Code = %s\n",chr_p_acct);
	}
		
	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_h_num_rows
	FROM MT_CLIENT
	WHERE CLN_MASTER = :chr_p_acct
	AND STATUS != :h_clt_status
	AND CLN_CODE != :chr_p_acct;

	IS_ANY_ORA_ERROR

 /*Column Names Changed EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_h_num_rows
	                                FROM MT_CLIENT
	                                WHERE master_clt = :chr_p_acct
	                                AND CLT_STATUS != :h_clt_status
	                                AND client != :chr_p_acct;*/

	if (int_h_num_rows > 0)
	{
		APL_GOBACK_SUCCESS
	}
	else
	{
		APL_GOBACK_FAIL
	}


	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_SubAcc SUCCESS \n",NULL,NULL);
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_SubAcc FAILURE \n",NULL,NULL);
		return(APL_FAILURE);
	}
}



int CR_Mod_DBAccMsgAddrDel(char *chr_p_acct, char *p_msg_num, int p_addrseq_num, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca sqlca;
	char			 chr_l_buf[BUFFER_LEN];
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	sqlca.sqlcode = 0;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Mod_DBAccMsgAddrDel \n",NULL,NULL);
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Account is %s \n",chr_p_acct);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
	}

	printf("\n 1.\n");	
	if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
		APL_GOBACK_FAIL
	
	printf("\n 2.\n");	
	if (strlen(p_msg_num) == 0)
	{
	printf("\n 3.\n");	
		if (p_addrseq_num == 0)
		{
	printf("\n 4.\n");	
			EXEC SQL DELETE FROM MT_MSGADDRESS
			WHERE cln_code = :chr_p_acct;
		}
		else
		{
	printf("\n 5.\n");	
			APL_IF_DEBUG
			{
				memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
				sprintf(chr_l_buf,"Address sequence number is %d \n",p_addrseq_num);
				CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
			}

			EXEC SQL DELETE FROM MT_MSGADDRESS
			WHERE cln_code = :chr_p_acct
			AND CONTACTSEQ = :p_addrseq_num;
		}
	}
	else
	{
	printf("\n 6.\n");	
		APL_IF_DEBUG
		{
			memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
			sprintf(chr_l_buf,"Message number is %s \n",p_msg_num);
			CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
		}

		if (p_addrseq_num == 0)
		{
	printf("\n 7.\n");	
			EXEC SQL DELETE FROM MT_MSGADDRESS
			WHERE cln_code = :chr_p_acct
			AND MSG_IDENT_NO = :p_msg_num;
		}
		else
		{
	printf("\n 8.\n");	
			APL_IF_DEBUG
			{
				memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
				sprintf(chr_l_buf,"Address sequence number is %d \n",p_addrseq_num);
				CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
			}

			EXEC SQL DELETE FROM MT_MSGADDRESS
			WHERE cln_code = :chr_p_acct
			AND MSG_IDENT_NO = :p_msg_num
			AND CONTACTSEQ = :p_addrseq_num;
		}
	}

	printf("\n 9.\n");	
	IS_ANY_ORA_ERROR

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Mod_DBAccMsgAddrDel SUCCESS \n",NULL,NULL);
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Mod_DBAccMsgAddrDel FAILURE \n",NULL,NULL);
		return(APL_FAILURE);
	}
}




int CR_Mod_AccSchDel(char *chr_p_acct, char *p_msg_num, char *p_msgoption, int p_schseq_num, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca 	sqlca;
	char			 	chr_l_buf[BUFFER_LEN];
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	sqlca.sqlcode = 0;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Mod_AccSchDel \n",NULL,NULL);
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Account is %s \n",chr_p_acct);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
	}
	
	if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
		APL_GOBACK_FAIL

	if (strlen(p_msg_num) == 0)
	{
		if (p_schseq_num == 0)
		{
			EXEC SQL DELETE FROM MT_SCHDET
			WHERE cln_code = :chr_p_acct;
		
		}
		else
		{
			APL_IF_DEBUG
			{
				memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
				sprintf(chr_l_buf,"Schedule sequence number is %d \n",p_schseq_num);
				CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
			}

			EXEC SQL DELETE FROM MT_SCHDET
			WHERE cln_code = :chr_p_acct
			AND SCHIDEN_NO = :p_schseq_num
                        AND (MSG_OPT = :p_msgoption OR :p_msgoption IS NULL);


		}
	}
	else
	{
		APL_IF_DEBUG
		{
			memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
			sprintf(chr_l_buf,"Message number is %s \n",p_msg_num);
			CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
		}

		if (p_schseq_num == 0)
		{
			EXEC SQL DELETE FROM MT_SCHDET
			WHERE cln_code = :chr_p_acct
			AND MSG_IDENT_NO = :p_msg_num;


		}
		else
		{
			APL_IF_DEBUG
			{
				memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
				sprintf(chr_l_buf,"Schedule sequence number is %d \n",p_schseq_num);
				CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
			}
			printf("p_acct is %s\n",chr_p_acct);
			printf("p_msg_num is %s\n",p_msg_num);
			printf("p_schseq_num is %d\n",p_schseq_num);
			printf("p_msgoption is %s\n",p_msgoption);

			EXEC SQL DELETE FROM MT_SCHDET
			WHERE cln_code = :chr_p_acct
			AND MSG_IDENT_NO = :p_msg_num
			AND SCHIDEN_NO = :p_schseq_num
                        AND (MSG_OPT = :p_msgoption OR :p_msgoption IS NULL);


		}
	}

	IS_ANY_ORA_ERROR

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Mod_AccSchDel SUCCESS \n",NULL,NULL);
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Mod_AccSchDel FAILURE \n",NULL,NULL);
		return(APL_FAILURE);
	}
}
 /******************************************************************************************
  *
  *   Function Name				:  CR_Chk_AccAuth 
  *
  *   Description 					:  This Function Accepts Client Code,Maker Info 
  *
  *                               and Debug Pointer. Used in  Reset and Authorise Modes.
  *
  *                               returns Success/Failure depending upon validn.
  *
  *
  *   Pararmeter				         Type				       Mode					Description	
  *   ----------                     ----                  ----              ------------
  *  
  *   chr_p_acct                     char *                 I               Client Code 
  *
  *   p_user                         char *                 I               Maker Info 
  *
  *   l_debug_info_ptr               DEBUG_INFO_STRUCT_H    I               Debug Info Structure 
  *   Return Values :
  *  
  *   APL_SUCCESS  - SUCCESS
  *
  *	  APL_FAILURE  - FAILURE
  *
  *
  *******************************************************************************************/
int CR_Chk_AccAuth(char *chr_p_acct, char *p_user, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	VARCHAR 		  h_maker[APL_USERID_LEN];
	struct sqlca  sqlca;
	char			  chr_l_buf[BUFFER_LEN];
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	sqlca.sqlcode = 0;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_AccAuth \n",NULL,NULL);
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Account is %s \n",chr_p_acct);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
		
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"User is %s \n",p_user);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
	}
	
	EXEC SQL SELECT maker
	INTO :h_maker
	FROM MT_CLIENT
	WHERE CLN_CODE = :chr_p_acct;

 /*Column Name Changed EXEC SQL SELECT creater
	INTO :h_creater
	FROM MT_CLIENT
	WHERE client = :chr_p_acct; */

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	h_maker.arr[h_maker.len] = APL_NULL_CHAR;

	if (strcmp(p_user,(char *)h_maker.arr) == 0)//AIX - Warnings Removal
	{
		CO_InsertErr(l_debug_info_ptr,ERR_MAKER_CHECKER_SAME,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);

		APL_GOBACK_FAIL
	}

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccAuth SUCCESS \n",NULL,NULL);
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccAuth FAILURE \n",NULL,NULL);
		return(APL_FAILURE);
	}
}




int CR_Mod_DBAccMemo(char *chr_p_acct,char *p_row_id_cltt,char *chr_p_memo,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca  sqlca;
	short			  i_cltmemo;
	char			  chr_l_buf[BUFFER_LEN];
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	sqlca.sqlcode = 0;
	
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Mod_DBAccMemo \n",NULL,NULL);
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Account is %s \n",chr_p_acct);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
	}
	
	if (strlen(chr_p_memo) == 0)
	{
		chr_p_memo = NULL;
		i_cltmemo = -1;
	}
		
	if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
		APL_GOBACK_FAIL

	EXEC SQL UPDATE MT_CLIENT
	SET CLN_MEMO = :chr_p_memo INDICATOR :i_cltmemo
	WHERE ROWID = :p_row_id_cltt;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Mod_DBAccMemo SUCCESS \n",NULL,NULL);
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Mod_DBAccMemo FAILURE \n",NULL,NULL);
		return(APL_FAILURE);
	}
}

int CR_Proc_DBAccMsgAddrCpy(char *chr_p_from_acct,char *chr_p_to_acct,char *p_row_id_to_cltt,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca			  sqlca;
	int						  int_retval;
	PRO_GSEQNUM_STRUCT_H	  l_pro_gseqno_struct_h;
	MT_MSGADDRESS_STRUCT_H	  l_mt_msgaddress_struct_i_h;
	MT_MSGADDRESS_STRUCT_I	  l_mt_msgaddress_struct_i_i;
	char						  chr_h_sys_access_stamp[APL_DATE_LEN];
	char						  h_clt_status[APL_STATUS_LEN]; 
	char			  			  chr_l_buf[BUFFER_LEN];

	EXEC SQL VAR l_mt_msgaddress_struct_i_h.h_dl_client IS STRING;
	EXEC SQL VAR l_mt_msgaddress_struct_i_h.h_msg_ident_no IS STRING;
	EXEC SQL VAR l_mt_msgaddress_struct_i_h.h_gcn_addr IS STRING;
	EXEC SQL VAR l_mt_msgaddress_struct_i_h.h_swift_addr IS STRING;
	EXEC SQL VAR l_mt_msgaddress_struct_i_h.h_infolex IS STRING;
	EXEC SQL VAR l_mt_msgaddress_struct_i_h.h_schedule IS STRING;
	EXEC SQL VAR l_mt_msgaddress_struct_i_h.h_fax_addr IS STRING;
	EXEC SQL VAR l_mt_msgaddress_struct_i_h.h_identify IS STRING;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	sqlca.sqlcode = 0;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Proc_DBAccMsgAddrCpy \n",NULL,p_intl_env_data_struct_h);
		
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"From Account is %s \n",chr_p_from_acct);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
		
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"To Account is %s \n",chr_p_to_acct);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
	}
	
	if (CO_RtvSysDtTime(chr_h_sys_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL
	
	EXEC SQL DECLARE MsgAddrInfo CURSOR FOR
		SELECT * FROM MT_MSGADDRESS
		WHERE cln_code = :chr_p_from_acct

		FOR UPDATE OF access_stamp;

	EXEC SQL OPEN MsgAddrInfo;
	
	IS_ANY_ORA_ERROR

	for(;;)
	{
		EXEC SQL FETCH MsgAddrInfo INTO :l_mt_msgaddress_struct_i_h:l_mt_msgaddress_struct_i_i;

		IS_ANY_ORA_ERROR

		if (APL_ZERO_RESULT_SET)
			break;

		strcpy(l_mt_msgaddress_struct_i_h.h_dl_client, chr_p_to_acct);
		strcpy(l_mt_msgaddress_struct_i_h.h_access_stamp,chr_h_sys_access_stamp);
		
		strcpy(l_pro_gseqno_struct_h.sequencename, "MSGADDR");
		strcpy(l_pro_gseqno_struct_h.seq_attrb_a, APL_NULL_STRING);
		strcpy(l_pro_gseqno_struct_h.seq_attrb_b, APL_NULL_STRING);
		strcpy(l_pro_gseqno_struct_h.seq_attrb_c, APL_NULL_STRING);

		l_pro_gseqno_struct_h.seq_stepby = 1;
		l_pro_gseqno_struct_h.seq_start = 1;
		l_pro_gseqno_struct_h.last_seqnum = 999999999;

		int_retval = CO_RtvNxtSeqNum(&l_pro_gseqno_struct_h,l_debug_info_ptr);
		if (int_retval != APL_FAILURE)
			l_mt_msgaddress_struct_i_h.h_addrsequence_num = int_retval;
		else
			APL_GOBACK_FAIL
		
		int_retval = CR_Chk_AccMsgAddrDupl(&l_mt_msgaddress_struct_i_h,&l_mt_msgaddress_struct_i_i,'I', l_debug_info_ptr);
		if (int_retval != APL_SUCCESS)
		{
			CO_InsertErr(l_debug_info_ptr,ERR_REC_EXIST,"Account Addr. Rec",l_mt_msgaddress_struct_i_h.h_dl_client,l_mt_msgaddress_struct_i_h.h_msg_ident_no,__LINE__,__FILE__);
			APL_GOBACK_FAIL
		}
	
		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL

		EXEC SQL INSERT INTO MT_MSGADDRESS 
		VALUES (:l_mt_msgaddress_struct_i_h:l_mt_msgaddress_struct_i_i
				 );

		IS_ANY_ORA_ERROR
	}

	EXEC SQL CLOSE MsgAddrInfo;

	strcpy((char *)h_clt_status,STATUS_UAUTH);
		
	if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
		APL_GOBACK_FAIL

	EXEC SQL UPDATE MT_CLIENT
	SET maker = :p_intl_env_data_struct_h->usr,
		 maker_dt = :chr_h_sys_access_stamp,
		 checker = NULL,
		 CHECKER_DT = NULL,
		 STATUS = :h_clt_status,
		 access_stamp = :chr_h_sys_access_stamp
	WHERE ROWID = :p_row_id_to_cltt;

	IS_ANY_ORA_ERROR

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Proc_DBAccMsgAddrCpy SUCCESS \n",NULL,p_intl_env_data_struct_h);
		
		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Proc_DBAccMsgAddrCpy FAILURE \n",NULL,p_intl_env_data_struct_h);
		
		return(APL_FAILURE);
	}
}

int CR_Proc_DBAccSchCpy(char *chr_p_from_acct,char *chr_p_to_acct,char *p_row_id_to_cltt,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca			  sqlca;
	int						  int_retval;
   int   int_paddrseq_num;
	PRO_GSEQNUM_STRUCT_H	  l_pro_gseqno_struct_h;
	MT_SCHDET_STRUCT_H  	  p_mt_schdet_struct_ha;
	MT_SCHDET_STRUCT_I	  	  l_mt_schdet_struct_ib;
	char						  chr_h_sys_access_stamp[APL_DATE_LEN];
	char						  h_clt_status[APL_STATUS_LEN];
	char			  			  chr_l_buf[BUFFER_LEN];
	
	EXEC SQL VAR p_mt_schdet_struct_ha.h_dl_client IS STRING;
	EXEC SQL VAR p_mt_schdet_struct_ha.h_msg_ident_no IS STRING;
	EXEC SQL VAR p_mt_schdet_struct_ha.h_generate_day IS STRING;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	sqlca.sqlcode = 0;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Proc_DBAccSchCpy \n",NULL,p_intl_env_data_struct_h);

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"From Account is %s \n",chr_p_from_acct);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
		
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"To Account is %s \n",chr_p_to_acct);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
	}
	
	if (CO_RtvSysDtTime(chr_h_sys_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL
		
	EXEC SQL DECLARE SchDetInfo CURSOR FOR
		SELECT * FROM MT_SCHDET
		WHERE cln_code = :chr_p_from_acct
		FOR UPDATE OF access_stamp;

	EXEC SQL OPEN SchDetInfo;

	IS_ANY_ORA_ERROR

	for(;;)
	{
		EXEC SQL FETCH SchDetInfo INTO :p_mt_schdet_struct_ha:l_mt_schdet_struct_ib;

		IS_ANY_ORA_ERROR

		if (APL_ZERO_RESULT_SET)
			break;

		strcpy(p_mt_schdet_struct_ha.h_dl_client, chr_p_to_acct);
		strcpy(p_mt_schdet_struct_ha.h_access_stamp, chr_h_sys_access_stamp);
      int_paddrseq_num=0;
      int_retval = CR_Chk_AccSchDupl(p_mt_schdet_struct_ha.h_dl_client,p_mt_schdet_struct_ha.h_msg_ident_no,int_paddrseq_num,p_mt_schdet_struct_ha.h_msg_opt,l_debug_info_ptr)
;
		if (int_retval != APL_SUCCESS)
		{
			CO_InsertErr(l_debug_info_ptr,ERR_REC_EXIST,p_mt_schdet_struct_ha.h_dl_client,p_mt_schdet_struct_ha.h_msg_ident_no,APL_NULL_STRING,__LINE__,__FILE__);
			APL_GOBACK_FAIL
		}
      	

		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL


	//shailesh ISKB 1696  changes start 
	//Changing SCHIDEN_NO from zero to appropriate value since if it is zero it gives
	//error during authorizing of same record
	   if(p_mt_schdet_struct_ha.h_schsequence_num == 0)
		 {
			EXEC SQL SELECT NVL(CONTACTSEQ,0) INTO :p_mt_schdet_struct_ha.h_schsequence_num 
				FROM MT_MSGADDRESS WHERE CLN_CODE = :p_mt_schdet_struct_ha.h_dl_client AND 
				MSG_IDENT_NO = :p_mt_schdet_struct_ha.h_msg_ident_no AND STATUS IN 
				('UU','AA') AND ROWNUM<2;
			printf("\n sqlca.sqlcode when seqno is zero= [%d]",sqlca.sqlcode);
			printf(" p_mt_schdet_struct_h->h_schsequence_num = [%d]",p_mt_schdet_struct_ha.h_schsequence_num);
			if(p_mt_schdet_struct_ha.h_schsequence_num == 0 || sqlca.sqlcode!=0)
      {//AIX Warning Removal
				IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"MSG ADDRESS",APL_NULL_STRING,APL_NULL_STRING)
      }
		 }
	//shailesh ISKB 1696  changes end
		
		EXEC SQL INSERT INTO MT_SCHDET 
		VALUES (:p_mt_schdet_struct_ha:l_mt_schdet_struct_ib
				 );

		IS_ANY_ORA_ERROR
	}

	EXEC SQL CLOSE SchDetInfo;

	strcpy((char *)h_clt_status,STATUS_UAUTH);
		
	if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
		APL_GOBACK_FAIL

	EXEC SQL UPDATE MT_CLIENT
	SET maker = :p_intl_env_data_struct_h->usr,
		 maker_dt = :chr_h_sys_access_stamp,
		 checker = NULL,
		 CHECKER_DT = NULL,
		 STATUS = :h_clt_status,
		 access_stamp = :chr_h_sys_access_stamp
	WHERE ROWID = :p_row_id_to_cltt;
	
	IS_ANY_ORA_ERROR

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Proc_DBAccSchCpy SUCCESS \n",NULL,p_intl_env_data_struct_h);
		
		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Proc_DBAccSchCpy FAILURE \n",NULL,p_intl_env_data_struct_h);
		
		return(APL_FAILURE);
	}
}

int CR_Proc_DBAccMemoCpy(char *chr_p_from_acct,char *chr_p_to_acct,char *p_row_id_to_cltt,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca			  sqlca;
	int						  int_retval;
	PRO_GSEQNUM_STRUCT_H	  l_pro_gseqno_struct_h;
	VARCHAR					  h_cltmemo[201];
	short						  i_cltmemo;
	char			  			  chr_l_buf[BUFFER_LEN];
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	sqlca.sqlcode = 0;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Proc_DBAccMemoCpy \n",NULL,p_intl_env_data_struct_h);

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"From Account is %s \n",chr_p_from_acct);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
		
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"To Account is %s \n",chr_p_to_acct);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
	}
	
	EXEC SQL SELECT CLN_MEMO 
	INTO :h_cltmemo INDICATOR :i_cltmemo
	FROM MT_CLIENT
	WHERE cln_code = :chr_p_from_acct;
	
	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
	
	if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
		APL_GOBACK_FAIL

	if (i_cltmemo != -1)
	{
		EXEC SQL UPDATE MT_CLIENT
		SET CLN_MEMO = :h_cltmemo:i_cltmemo
		WHERE ROWID = :p_row_id_to_cltt;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
	}

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Proc_DBAccMemoCpy SUCCESS \n",NULL,p_intl_env_data_struct_h);

		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Proc_DBAccMemoCpy FAILURE \n",NULL,p_intl_env_data_struct_h);
		
		return(APL_FAILURE);
	}
}

 /******************************************************************************************
  *
  *   Function Name				:  MT_Mod_DBClientSch 
  *
  *   Description 					:  This Function Accepts Client Structure,Row Id,Env String, 
  *
  *                               and Debug Pointer. Used in  Input and Modify Modes.
  *
  *                               returns Success/Failure depending upon validn.
  *
  *
  *   Pararmeter				         Type				       Mode					Description	
  *   ----------                     ----                  ----              ------------
  *  
  *   p_mt_schdet_struct_h           MT_SCHDET_STRUCT_H     I               Client Schedule Details Structure
  *
  *   p_row_id_cltt                  char *                 I               Row Id of Client
  *
  *   p_intl_env_data_struct_h       INTL_ENV_DATA_STRUCT_H I               Environment String Structure
  *  
  *   l_debug_info_ptr               DEBUG_INFO_STRUCT_H    I               Debug Info Structure 
  *
  *   Return Values :
  *  
  *   APL_SUCCESS  - SUCCESS
  *
  *	  APL_FAILURE  - FAILURE
  *
  *
  *******************************************************************************************/
int MT_Mod_DBClientSch(MT_SCHDET_STRUCT_H *p_mt_schdet_struct_h,char *p_row_id_cltt,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca			  sqlca;
	int						  int_retval;
	PRO_GSEQNUM_STRUCT_H	  l_pro_gseqno_struct_h;
	char						  h_status[APL_STATUS_LEN] = APL_NULL_STRING;
	char						  chr_h_sys_access_stamp[APL_DATE_LEN];
	MT_SCHDET_STRUCT_I	  *l_mt_schdet_struct_i = NULL;
	char			  			  chr_l_buf[BUFFER_LEN];
   int      int_l_h_addrseq_num               = 0;
   short    l_i_addrseq_num               = 0;

 p_cln_key_codes[0]  = "CLN_CODE";
 p_cln_key_codes[1] = APL_NULL_STRING;
 p_key_values[0] = p_mt_schdet_struct_h->h_dl_client;
 p_key_values[1] = APL_NULL_STRING;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	sqlca.sqlcode = 0;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion MT_Mod_DBClientSch \n",NULL,p_intl_env_data_struct_h);

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Account is %s \n",p_mt_schdet_struct_h->h_dl_client);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
		
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Message number is %s \n",p_mt_schdet_struct_h->h_msg_ident_no);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
		
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Schedule sequence number is %d \n",p_mt_schdet_struct_h->h_schsequence_num);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
	}
	
	l_mt_schdet_struct_i = (MT_SCHDET_STRUCT_I *)calloc(1,sizeof(MT_SCHDET_STRUCT_I));
	APL_MALLOC_FAIL(l_mt_schdet_struct_i)

	l_mt_schdet_struct_i->i_dl_client = 0;
	l_mt_schdet_struct_i->i_msg_ident_no = 0;
	l_mt_schdet_struct_i->i_schsequence_num = 0;
	l_mt_schdet_struct_i->i_eom_msg_ind = 0;
	l_mt_schdet_struct_i->i_generate_day = 0;
	l_mt_schdet_struct_i->i_pos_txn_ind = 0;
	l_mt_schdet_struct_i->i_nil_mov_ind = 0;
	l_mt_schdet_struct_i->i_msg_opt = 0;
	l_mt_schdet_struct_i->i_access_stamp = 0;
	l_mt_schdet_struct_i->i_pend_ind = 0;
	l_mt_schdet_struct_i->i_weeklystmt = 0; 
	l_mt_schdet_struct_i->i_maker = 0; 
	l_mt_schdet_struct_i->i_maker_dt = 0; 
	l_mt_schdet_struct_i->i_status = 0; 

	if (strlen(p_mt_schdet_struct_h->h_loc_stat) == 0)
		l_mt_schdet_struct_i->i_loc_stat = -1;
	else
		l_mt_schdet_struct_i->i_loc_stat = 0;
 	
	if (strlen(p_mt_schdet_struct_h->h_validate_flag) == 0)
		l_mt_schdet_struct_i->i_validate_flag = -1;
	else
		l_mt_schdet_struct_i->i_validate_flag = 0;

	if (strlen(p_mt_schdet_struct_h->h_checker) == 0)
		l_mt_schdet_struct_i->i_checker = -1;
	else
		l_mt_schdet_struct_i->i_checker = 0;

	if (strlen(p_mt_schdet_struct_h->h_checker_dt) == 0)
		l_mt_schdet_struct_i->i_checker_dt = -1;
	else
		l_mt_schdet_struct_i->i_checker_dt = 0;

	if (CO_RtvSysDtTime(chr_h_sys_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
   { 
		APL_GOBACK_FAIL
   }
   else
   {
     strcpy(p_mt_schdet_struct_h->h_access_stamp,chr_h_sys_access_stamp);
   }
//shailesh ISKB 1696  changes start 
//Changing SCHIDEN_NO from zero to appropriate value since if it is zero it gives
//error during authorizing of same record
   if(p_mt_schdet_struct_h->h_schsequence_num == 0)
	 {
		EXEC SQL SELECT NVL(CONTACTSEQ,0) INTO :p_mt_schdet_struct_h->h_schsequence_num 
			FROM MT_MSGADDRESS WHERE CLN_CODE = :p_mt_schdet_struct_h->h_dl_client AND 
			MSG_IDENT_NO = :p_mt_schdet_struct_h->h_msg_ident_no AND STATUS IN 
			('UU','AA') AND ROWNUM<2;
		printf("\n sqlca.sqlcode when seqno is zero= [%d]",sqlca.sqlcode);
		printf(" p_mt_schdet_struct_h->h_schsequence_num = [%d]",p_mt_schdet_struct_h->h_schsequence_num);
		if((p_mt_schdet_struct_h->h_schsequence_num == 0) || (sqlca.sqlcode!=0)) // AIX - Warnings removal
    {
			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"MSG ADDRESS",APL_NULL_STRING,APL_NULL_STRING)
    }
	 }
//shailesh ISKB 1696  changes end

   printf("Val of Access Stamp After copy Into struct ==|%s|\n",p_mt_schdet_struct_h->h_access_stamp);
 
	
	APL_IF_DEBUG
	{
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h->h_mode);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
		
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Action is %s \n",p_intl_env_data_struct_h->h_process);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
	}
	
	if (strcmp(p_intl_env_data_struct_h->h_mode, APL_FUNC_INPUT) == 0)
	{
     int_retval = CR_Chk_AccSchDupl(p_mt_schdet_struct_h->h_dl_client,p_mt_schdet_struct_h->h_msg_ident_no,p_mt_schdet_struct_h->h_schsequence_num,p_mt_schdet_struct_h->h_msg_opt,l_debug_info_ptr);
		if (int_retval != APL_SUCCESS)
		{
                 CO_InsertErr(l_debug_info_ptr,ERR_REC_EXIST,p_mt_schdet_struct_h->h_dl_client,p_mt_schdet_struct_h->h_msg_ident_no,APL_NULL_STRING,__LINE__,__FILE__);
			APL_GOBACK_FAIL
		}
		

    /* int_retval = CO_RtvChldNxtSeqNum    (  p_cln_key_codes,
                                         p_key_values,
                                         "MT_SCHDET",
                                          "SCHIDEN_NO",
                                          &p_cln_next_seq_num,
                                          l_debug_info_ptr);

              if (int_retval != APL_FAILURE)
              p_mt_schdet_struct_h->h_schsequence_num = p_cln_next_seq_num;
              else
              APL_GOBACK_FAIL */ /* For Message SCH/Statment Messages changes done By  Abhijeet on 14/12/2006*/

 APL_IF_DEBUG
 {
    printf("Sequence No Returned = |%d|\n",p_cln_next_seq_num);
    printf("Sequence No Generated = |%d|\n",p_mt_schdet_struct_h->h_schsequence_num);
 }
    p_cln_next_seq_num = 0;

    if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
               APL_GOBACK_FAIL

                strcpy(p_mt_schdet_struct_h->h_status,STATUS_UAUTH);
                strcpy(p_mt_schdet_struct_h->h_maker,p_intl_env_data_struct_h->usr);
                strcpy(p_mt_schdet_struct_h->h_maker_dt,chr_h_sys_access_stamp);
                strcpy(p_mt_schdet_struct_h->h_checker,APL_NULL_STRING);
                strcpy(p_mt_schdet_struct_h->h_checker_dt,APL_NULL_STRING);
                strcpy(p_mt_schdet_struct_h->h_access_stamp,chr_h_sys_access_stamp);
		
                if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                        APL_GOBACK_FAIL
    printf("In ProcPopulate 1.... MsgOption Value = |%s|\n",p_mt_schdet_struct_h->h_dl_client);
printf("In ProcPopulate 2.... MsgOption Value = |%s|\n",p_mt_schdet_struct_h->h_msg_ident_no);
printf("In ProcPopulate 3.... MsgOption Value = |%d|\n",p_mt_schdet_struct_h->h_schsequence_num);
printf("In ProcPopulate 4.... MsgOption Value = |%s|\n",p_mt_schdet_struct_h->h_eom_msg_ind);
printf("In ProcPopulate 5.... MsgOption Value = |%s|\n",p_mt_schdet_struct_h->h_generate_day);
printf("In ProcPopulate 6.... MsgOption Value = |%s|\n",p_mt_schdet_struct_h->h_pos_txn_ind);
printf("In ProcPopulate 7.... MsgOption Value = |%s|\n",p_mt_schdet_struct_h->h_nil_mov_ind);
printf("In ProcPopulate 8.... MsgOption Value = |%s|\n",p_mt_schdet_struct_h->h_msg_opt);
printf("In ProcPopulate 9.... MsgOption Value = |%s|\n",p_mt_schdet_struct_h->h_loc_stat);
printf("In ProcPopulate .10... MsgOption Value = |%s|\n",p_mt_schdet_struct_h->h_access_stamp);
printf("In ProcPopulate ..11.. MsgOption Value = |%s|\n",p_mt_schdet_struct_h->h_pend_ind);
printf("In ProcPopulate ..12.. MsgOption Value = |%s|\n",p_mt_schdet_struct_h->h_weeklystmt);
printf("In ProcPopulate .13... MsgOption Value = |%s|\n",p_mt_schdet_struct_h->h_validate_flag);
printf("In ProcPopulate ..14.. MsgOption Value = |%s|\n",p_mt_schdet_struct_h->h_maker);
printf("In ProcPopulate ...15. MsgOption Value = |%s|\n",p_mt_schdet_struct_h->h_maker_dt);
printf("In ProcPopulate ...16. MsgOption Value = |%s|\n",p_mt_schdet_struct_h->h_checker);
printf("In ProcPopulate ....17 MsgOption Value = |%s|\n",p_mt_schdet_struct_h->h_checker_dt);
printf("In ProcPopulate ....18 MsgOption Value = |%s|\n",p_mt_schdet_struct_h->h_status);



		EXEC SQL INSERT INTO MT_SCHDET
                VALUES (:p_mt_schdet_struct_h:l_mt_schdet_struct_i
				 );

		IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_REC_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
               } 

         
               if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_MODIFY) == 0)
               {
                  APL_IF_DEBUG
                  {
                   printf(" MODIFY FOR  MESSAGE SCHEDULAR  DETAILS.....\n");
                   printf(" STATUS OF RECORD IS |%s|\n",p_mt_schdet_struct_h->h_status);
                   printf(" SEQUENCE NUMBER IS %d\n",p_mt_schdet_struct_h->h_schsequence_num);
                  }

		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL
			
                  strcpy(p_mt_schdet_struct_h->h_status,STATUS_UAUTH);
                  strcpy(p_mt_schdet_struct_h->h_maker,p_intl_env_data_struct_h->usr);
                  strcpy(p_mt_schdet_struct_h->h_maker_dt,chr_h_sys_access_stamp);
                  strcpy(p_mt_schdet_struct_h->h_checker,APL_NULL_STRING);
                  strcpy(p_mt_schdet_struct_h->h_checker_dt,APL_NULL_STRING);
                  strcpy(p_mt_schdet_struct_h->h_access_stamp,chr_h_sys_access_stamp);

                  if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                        APL_GOBACK_FAIL

 EXEC SQL UPDATE MT_SCHDET
	SET EOM_MSG_IND = :p_mt_schdet_struct_h->h_eom_msg_ind:l_mt_schdet_struct_i->i_eom_msg_ind,
     GENERATE_DAY= :p_mt_schdet_struct_h->h_generate_day:l_mt_schdet_struct_i->i_generate_day,
	    POS_TXN_IND = :p_mt_schdet_struct_h->h_pos_txn_ind:l_mt_schdet_struct_i->i_pos_txn_ind,
     NIL_MOV_IND = :p_mt_schdet_struct_h->h_nil_mov_ind:l_mt_schdet_struct_i->i_nil_mov_ind,
		 LOC_STAT = :p_mt_schdet_struct_h->h_loc_stat:l_mt_schdet_struct_i->i_loc_stat,
		 ACCESS_STAMP = :chr_h_sys_access_stamp:l_mt_schdet_struct_i->i_access_stamp,
		 PEND_IND = :p_mt_schdet_struct_h->h_pend_ind:l_mt_schdet_struct_i->i_pend_ind,
		 WEEKLYSTMT =:p_mt_schdet_struct_h->h_weeklystmt:l_mt_schdet_struct_i->i_weeklystmt,
		 VALIDATE_IND =:p_mt_schdet_struct_h->h_validate_flag:l_mt_schdet_struct_i->i_validate_flag,
		 MAKER =:p_mt_schdet_struct_h->h_maker:l_mt_schdet_struct_i->i_maker,
		 MAKER_DT=:p_mt_schdet_struct_h->h_maker_dt:l_mt_schdet_struct_i->i_maker_dt,
		 CHECKER=:p_mt_schdet_struct_h->h_checker:l_mt_schdet_struct_i->i_checker,
		 CHECKER_DT =:p_mt_schdet_struct_h->h_checker_dt:l_mt_schdet_struct_i->i_checker_dt,
		 STATUS = :p_mt_schdet_struct_h->h_status:l_mt_schdet_struct_i->i_status
     WHERE cln_code = :p_mt_schdet_struct_h->h_dl_client 
     AND MSG_IDENT_NO = :p_mt_schdet_struct_h->h_msg_ident_no
     AND SCHIDEN_NO = :p_mt_schdet_struct_h->h_schsequence_num
     AND (MSG_OPT = :p_mt_schdet_struct_h->h_msg_opt OR MSG_IDENT_NO <> 6);

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
 } 
 else if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_DELETE ) == 0)
 {
               APL_IF_DEBUG
               {
                 printf(" MODIFY FOR  MESSAGE SCHEDULAR  DETAILS.....\n");
                 printf("CLIENT CODE = |%s|\n",p_mt_schdet_struct_h->h_dl_client);
                 printf("SEQ NUMBER IS |%d|\n",p_mt_schdet_struct_h->h_schsequence_num);
               }
			
               if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                     APL_GOBACK_FAIL
               printf("Value of Status ==|%s|\n",p_mt_schdet_struct_h->h_status);
               strcpy((char *)h_status,STATUS_DEL_UAUTH);

               EXEC SQL UPDATE MT_SCHDET
               SET MAKER = :p_intl_env_data_struct_h->usr:l_mt_schdet_struct_i->i_maker,
               MAKER_DT = :chr_h_sys_access_stamp:l_mt_schdet_struct_i->i_maker_dt,
               ACCESS_STAMP = :chr_h_sys_access_stamp:l_mt_schdet_struct_i->i_access_stamp,
               CHECKER = NULL,
               CHECKER_DT = NULL,
               STATUS   =:h_status
               WHERE ROWID = :p_row_id_cltt;

 IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
	 }
 else if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_RESET) == 0)
	 {
       APL_IF_DEBUG
       {
        printf("RESET MODE FOR MESSAGE SCHEDULAR DETAILS.......\n");
        printf("CLIENT CODE = |%s|\n",p_mt_schdet_struct_h->h_dl_client);
        printf("SEQ NUMBER IS |%d|\n",p_mt_schdet_struct_h->h_schsequence_num);
       }

		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL

        printf("VALUE STATUS ==%s\n",h_status);

        strcpy((char *)h_status,STATUS_AUTH);

	 	EXEC SQL UPDATE MT_SCHDET
        SET CHECKER = :p_intl_env_data_struct_h->usr,
        CHECKER_DT = :chr_h_sys_access_stamp,
        ACCESS_STAMP = :chr_h_sys_access_stamp,
        STATUS   =:h_status
        WHERE ROWID = :p_row_id_cltt;
			
        IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
 } 
 else if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_AUTHORISE) == 0)
 {

        APL_IF_DEBUG
        {
          printf("AUTHORISE MODE FOR MESSAGE SCHEDULAR DETAILS.......\n");
          printf("CLIENT CODE = |%s|\n",p_mt_schdet_struct_h->h_dl_client);
          printf("SEQ NUMBER IS |%d|\n",p_mt_schdet_struct_h->h_schsequence_num);
        }
			 
          if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
          APL_GOBACK_FAIL

          EXEC SQL SELECT STATUS
          INTO :h_status
          FROM MT_SCHDET
          WHERE ROWID = :p_row_id_cltt;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
			
		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL
			
          if (strcmp(h_status, STATUS_DEL_UAUTH) == 0)
          {
            EXEC SQL DELETE FROM MT_SCHDET
            WHERE ROWID = :p_row_id_cltt;
    
            IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
          }
          else
          {
            strcpy((char *)h_status, STATUS_AUTH);
            EXEC SQL UPDATE MT_SCHDET
            SET CHECKER =:p_intl_env_data_struct_h->usr,
            CHECKER_DT =:chr_h_sys_access_stamp,
            STATUS =:h_status,
            ACCESS_STAMP =:chr_h_sys_access_stamp
		WHERE ROWID = :p_row_id_cltt;
			
		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
          }
 }

         int_retval = CR_Mod_UpdMastStatus(  p_cln_key_codes,
                                             p_key_values,
                                             g_cln_mst_table_name,
                                             g_cln_chld_table_names,
                                             APL_CHILD_IND,
                                             p_status,
                                             chr_h_sys_access_stamp,
                                             p_intl_env_data_struct_h,
                                             l_debug_info_ptr);

         APL_IF_DEBUG
         {
          printf("Returned Status Value = |%s|\n",p_status);
         }

          if (int_retval != APL_SUCCESS)
               APL_GOBACK_FAIL
			
          APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		APL_FREE(l_mt_schdet_struct_i)
		
		APL_IF_DEBUG
              	CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion MT_Mod_DBClientSch SUCCESS \n",NULL,p_intl_env_data_struct_h);
		
		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
		APL_FREE(l_mt_schdet_struct_i)
		
		APL_IF_DEBUG
			         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion MT_Mod_DBClientSch FAILURE \n",NULL,p_intl_env_data_struct_h);
		
		return(APL_FAILURE);
	}
}
  
 /******************************************************************************************
  *
  *   Function Name				:  MT_Mod_DBClientExchMap 
  *
  *   Description 					:  This Function Accepts Client Exchange Mapping Structure,
    
  *                               Row Id,Env String and Debug Pointer. 
  *
  *                               Used in Input/Modify/Authorise/Delete/Reset Modes.
  *
  *                               returns Success/Failure depending upon validn.
  *
  *
  *   Pararmeter				         Type				       Mode					Description	
  *   ----------                     ----                  ----              ------------
  *  
  *   p_mt_cltexchmap_struct_h       MT_CLTEXCHMAP_STRUCT_H I               Client Exchange Mapping  Details Structure
  *
  *   p_row_id_cltt                  char *                 I               Row Id of Client
  *
  *   p_intl_env_data_struct_h       INTL_ENV_DATA_STRUCT_H I               Environment String Structure
  *  
  *   l_debug_info_ptr               DEBUG_INFO_STRUCT_H    I               Debug Info Structure 
  *   Return Values :
  *  
  *   APL_SUCCESS  - SUCCESS
  *
  *	  APL_FAILURE  - FAILURE
  *
  *
  *******************************************************************************************/
int MT_Mod_DBClientExchMap(MT_CLTEXCHMAP_STRUCT_H *p_mt_cltexchmap_struct_h,char *p_row_id_cltt,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   struct sqlca                      sqlca;
   int                               int_retval;
   PRO_GSEQNUM_STRUCT_H              l_pro_gseqno_struct_h;
   char                              h_status[APL_STATUS_LEN];
   char                              chr_h_sys_access_stamp[APL_DATE_LEN];
   MT_CLTEXCHMAP_STRUCT_I            *l_mt_cltexchmap_struct_i = NULL;
   char                              chr_l_buf[BUFFER_LEN];

   #ifdef APL_THREADS
          APL_SET_CONTEXT
          EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   p_cln_key_codes[0] = "CLN_CODE";
   p_cln_key_codes[1] = APL_NULL_STRING;
   p_key_values[0] = p_mt_cltexchmap_struct_h->h_dl_client;
   p_key_values[1] = APL_NULL_STRING;

   sqlca.sqlcode = 0;
    APL_IF_DEBUG
    {
                CO_ProcMonitor(APL_OUT_FILE,"Entered processtion MT_Mod_DBClientExchMap \n",NULL,p_intl_env_data_struct_h);
       
                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Account is %s \n",p_mt_cltexchmap_struct_h->h_dl_client);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);

                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Sequence number is %d \n",p_mt_cltexchmap_struct_h->h_cln_exchseq_num);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);

    }

 l_mt_cltexchmap_struct_i = (MT_CLTEXCHMAP_STRUCT_I *)calloc(1,sizeof(MT_CLTEXCHMAP_STRUCT_I));
 APL_MALLOC_FAIL(l_mt_cltexchmap_struct_i)

 l_mt_cltexchmap_struct_i->i_dl_client = 0;
 l_mt_cltexchmap_struct_i->i_cln_exch_code = 0;
 l_mt_cltexchmap_struct_i->i_cln_exch_map_code = 0;
 l_mt_cltexchmap_struct_i->i_slb_exch_map_code = 0;  /* SLB CHGS Ashish 01-04-2008 */
 l_mt_cltexchmap_struct_i->i_cln_hdfc_cm_id = 0;
 l_mt_cltexchmap_struct_i->i_access_stamp = 0;
 l_mt_cltexchmap_struct_i->i_maker = 0;
 l_mt_cltexchmap_struct_i->i_maker_dt = 0;
 l_mt_cltexchmap_struct_i->i_cln_exchseq_num = 0;
 l_mt_cltexchmap_struct_i->i_status = 0;

 if (strlen(p_mt_cltexchmap_struct_h->h_checker) == 0)
      l_mt_cltexchmap_struct_i->i_checker = -1;
 else
 l_mt_cltexchmap_struct_i->i_checker = 0;

 if (strlen(p_mt_cltexchmap_struct_h->h_checker_dt) == 0)
     l_mt_cltexchmap_struct_i->i_checker_dt = -1;
 else
     l_mt_cltexchmap_struct_i->i_checker_dt = 0;
 
 if (CO_RtvSysDtTime(chr_h_sys_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
 { 
       APL_GOBACK_FAIL
 } 
 else
 { 
       strcpy(p_mt_cltexchmap_struct_h->h_access_stamp,chr_h_sys_access_stamp);
 }  
  printf("Testing For  RESET Mode\n"); 

 APL_IF_DEBUG
 {
                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h->h_mode);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);

                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Action is %s \n",p_intl_env_data_struct_h->h_process);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
 }
               
                if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_INPUT)== 0)
                {
                int_retval = CO_RtvChldNxtSeqNum    (  p_cln_key_codes,
                                                       p_key_values,
                                                       "MT_CLI_EXCH_MAP", 
                                                       p_cln_field_name,
                                                       &p_cln_next_seq_num,
                                                       l_debug_info_ptr);

                if (int_retval != APL_FAILURE)
                p_mt_cltexchmap_struct_h->h_cln_exchseq_num = p_cln_next_seq_num;
                else
                APL_GOBACK_FAIL


         APL_IF_DEBUG
         {
            printf("Sequence No Returned = |%d|\n",p_cln_next_seq_num);
            printf("Sequence No Generated = |%d|\n",p_mt_cltexchmap_struct_h->h_cln_exchseq_num);
         }
                p_cln_next_seq_num = 0;

                strcpy(p_mt_cltexchmap_struct_h->h_status,STATUS_UAUTH);
                strcpy(p_mt_cltexchmap_struct_h->h_maker,p_intl_env_data_struct_h->usr);
                strcpy(p_mt_cltexchmap_struct_h->h_maker_dt,chr_h_sys_access_stamp);
                strcpy(p_mt_cltexchmap_struct_h->h_checker,APL_NULL_STRING);
                strcpy(p_mt_cltexchmap_struct_h->h_checker_dt,APL_NULL_STRING);
                strcpy(p_mt_cltexchmap_struct_h->h_access_stamp,chr_h_sys_access_stamp);

		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL

      printf("IVTesting of Each Mode - before Insert\n");

                EXEC SQL INSERT INTO MT_CLI_EXCH_MAP
                VALUES (:p_mt_cltexchmap_struct_h:l_mt_cltexchmap_struct_i
                                 ); 

                IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_REC_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
                } 

                if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                        APL_GOBACK_FAIL

                if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_MODIFY)== 0)
                {
                   APL_IF_DEBUG
                  {
                        printf("MODIFY MODE FOR EXCHANGE MAPPING DETAILS\n");
                        printf("CLIENT CODE = |%s|\n",p_mt_cltexchmap_struct_h->h_dl_client); 
                        printf("SEQ NUMBER IS |%d|\n",p_mt_cltexchmap_struct_h->h_cln_exchseq_num);
                        printf("EXCHANGE CODE IS = |%s|\n",p_mt_cltexchmap_struct_h->h_cln_exch_code);
                  }

                  if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                               APL_GOBACK_FAIL

                  strcpy((char *)h_status,STATUS_UAUTH);

                  EXEC SQL UPDATE MT_CLI_EXCH_MAP
                  SET  CLN_EXCH_CODE = :p_mt_cltexchmap_struct_h->h_cln_exch_code:l_mt_cltexchmap_struct_i->i_cln_exch_code,
                       CLN_EXCH_MAP_CODE = :p_mt_cltexchmap_struct_h->h_cln_exch_map_code:l_mt_cltexchmap_struct_i->i_cln_exch_map_code,
                       /* SLB CHGS Ashish 01-04-2008 */
                       SLB_EXCH_MAP_CODE = :p_mt_cltexchmap_struct_h->h_slb_exch_map_code:l_mt_cltexchmap_struct_i->i_slb_exch_map_code,
                       CLN_HDFC_CM_ID = :p_mt_cltexchmap_struct_h->h_cln_hdfc_cm_id:l_mt_cltexchmap_struct_i->i_cln_hdfc_cm_id,
                       ACCESS_STAMP  = :chr_h_sys_access_stamp:l_mt_cltexchmap_struct_i->i_access_stamp,
                       MAKER = :p_intl_env_data_struct_h->usr:l_mt_cltexchmap_struct_i->i_maker,
                       MAKER_DT = :chr_h_sys_access_stamp:l_mt_cltexchmap_struct_i->i_maker_dt,
                       CHECKER = NULL,
                       CHECKER_DT = NULL,
                       STATUS = :h_status,
                       CLN_CODE = :p_mt_cltexchmap_struct_h->h_dl_client:l_mt_cltexchmap_struct_i->i_dl_client,
                       CLN_SEQ_NUM = :p_mt_cltexchmap_struct_h->h_cln_exchseq_num:l_mt_cltexchmap_struct_i->i_cln_exchseq_num
                       WHERE ROWID = :p_row_id_cltt;  	
	
		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
 }
 else if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_DELETE) == 0)
 {
          APL_IF_DEBUG
          {
            printf("DELETE MODE FOR EXCHANGE MAPPING DETAILS.....\n");
            printf("CLIENT CODE = |%s|\n",p_mt_cltexchmap_struct_h->h_dl_client);
            printf("SEQ NUMBER IS |%d|\n",p_mt_cltexchmap_struct_h->h_cln_exchseq_num);
            printf("EXCHANGE CODE IS = |%s|\n",p_mt_cltexchmap_struct_h->h_cln_exch_code);
          }
			
		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL
	
          strcpy((char *)h_status,STATUS_DEL_UAUTH);

          EXEC SQL UPDATE MT_CLI_EXCH_MAP
          SET 
          MAKER = :p_intl_env_data_struct_h->usr:l_mt_cltexchmap_struct_i->i_maker,
          MAKER_DT = :chr_h_sys_access_stamp:l_mt_cltexchmap_struct_i->i_maker_dt, 
          ACCESS_STAMP = :chr_h_sys_access_stamp:l_mt_cltexchmap_struct_i->i_access_stamp,  
          CHECKER = NULL,
		 	 CHECKER_DT = NULL,
          STATUS = :h_status
		WHERE ROWID = :p_row_id_cltt;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
	
 }
 else if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_RESET) == 0)
 {
          APL_IF_DEBUG
          {
                printf("IV Testing for RESET Mode inExch Map\n");
                printf("RESET MODE FOR EXCHANGE MAPPING DETAILS.....\n");
                printf("CLIENT CODE = |%s|\n",p_mt_cltexchmap_struct_h->h_dl_client);
                printf("SEQ NUMBER IS |%d|\n",p_mt_cltexchmap_struct_h->h_cln_exchseq_num);
                printf("EXCHANGE CODE IS = |%s|\n",p_mt_cltexchmap_struct_h->h_cln_exch_code);
          }   

                if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                        APL_GOBACK_FAIL

                strcpy((char *)h_status,STATUS_AUTH);

                EXEC SQL UPDATE MT_CLI_EXCH_MAP
                SET CHECKER = :p_intl_env_data_struct_h->usr,
                CHECKER_DT = :chr_h_sys_access_stamp,
                ACCESS_STAMP = :chr_h_sys_access_stamp,
                STATUS = :h_status
                WHERE ROWID = :p_row_id_cltt;      

                IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
         }
 else if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_AUTHORISE) == 0)
 { 
      APL_IF_DEBUG
      { 
              printf("Testing for Authorise Mode for Exch Map\n");
              printf("AUTHORISE MODE FOR EXCHANGE MAPPING DETAILS.....\n");
              printf("CLIENT CODE = |%s|\n",p_mt_cltexchmap_struct_h->h_dl_client);
              printf("SEQ NUMBER IS |%d|\n",p_mt_cltexchmap_struct_h->h_cln_exchseq_num);
              printf("EXCHANGE CODE IS = |%s|\n",p_mt_cltexchmap_struct_h->h_cln_exch_code);
      }

              if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                        APL_GOBACK_FAIL

              printf("Status of Each record in Exch Map ==|%s|\n",p_mt_cltexchmap_struct_h->h_status);


              EXEC SQL SELECT STATUS  
              INTO :h_status
              FROM MT_CLI_EXCH_MAP
              WHERE ROWID = :p_row_id_cltt; 

              printf("value of Stattus after select ==|%s|\n",h_status);

              IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

              if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                       APL_GOBACK_FAIL 

              printf("Before comparing the DU status\n");
              printf("status value =|%s|\n",h_status); 

              if (strcmp(h_status, STATUS_DEL_UAUTH) == 0)
              {
              EXEC SQL DELETE FROM MT_CLI_EXCH_MAP
              WHERE ROWID = :p_row_id_cltt;

              IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
	}
	else
             {
             strcpy((char *)h_status, STATUS_AUTH);

             EXEC SQL UPDATE MT_CLI_EXCH_MAP
             SET CHECKER = :p_intl_env_data_struct_h->usr,
             CHECKER_DT = :chr_h_sys_access_stamp, 
             ACCESS_STAMP = :chr_h_sys_access_stamp, 
             STATUS = :h_status
             WHERE ROWID = :p_row_id_cltt;
          
             IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
             } 
 }  

         int_retval = CR_Mod_UpdMastStatus(  p_cln_key_codes,
                                             p_key_values,
                                             g_cln_mst_table_name,
                                             g_cln_chld_table_names,
                                             APL_CHILD_IND,
                                             p_status,
                                             chr_h_sys_access_stamp,
                                             p_intl_env_data_struct_h,
                                             l_debug_info_ptr);

          APL_IF_DEBUG
          {
            printf("Returned Status Value = |%s|\n",p_status);
          }

          if (int_retval != APL_SUCCESS)
	             APL_GOBACK_FAIL

          APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
         APL_FREE(l_mt_cltexchmap_struct_i)
		
		APL_IF_DEBUG
                        CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion MT_Mod_DBClientExchMap SUCCESS\n",NULL,p_intl_env_data_struct_h);
       printf("Valu for APL_SUCCESS ==%d\n",APL_SUCCESS);
       if (APL_SUCCESS)
       /*{ strcpy(str_data,APL_SUCCESS);
         strcat(str_data,p_cln_next_seq_num);
         return(str_data);
         printf("After Check APLLLLLLLLLLLLLLLLL\n");
       } */ 
		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
        APL_FREE(l_mt_cltexchmap_struct_i)
		
		APL_IF_DEBUG
                  CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion MT_Mod_DBClientExchMap FAILURE\n",NULL,p_intl_env_data_struct_h); 
		
		return(APL_FAILURE);
	}
}

/******************************************************************************************
  *
  *   Function Name				:  MT_Mod_DBClientDepoMap  
  *
  *   Description              :  This Function Accepts Client Depository Mapping Structure,
  
  *                               Row Id,Env String and Debug Pointer.
  *
  *                               Used in Input/Modify/Authorise/Delete/Reset Modes.
  *
  *                               returns Success/Failure depending upon validn. 
  *
  *   Pararmeter				         Type				       Mode					Description	
  *   ----------                     ----                  ----              ------------
  *  
  *   p_mt_cltdepomap_struct_h       MT_CLTDEPOMAP_STRUCT_H  I               Client Details Structure
  *
  *   p_row_id_cltt                  char *                  I               Row Id of Client
  *
  *   p_intl_env_data_struct_h       INTL_ENV_DATA_STRUCT_H  I               Environment String Structure
  *  
  *   l_debug_info_ptr               DEBUG_INFO_STRUCT_H     I               Debug Info Structure 
  *
  *   Return Values :
  *  
  *   APL_SUCCESS  - SUCCESS
  *
  *	  APL_FAILURE  - FAILURE
  *
  *
  *******************************************************************************************/
/* Kouser - RFSNo - HDFCMT_001 - Client Master Maintenance */
int MT_Mod_DBClientDepoMap(MT_CLTDEPOMAP_STRUCT_H *p_mt_cltdepomap_struct_h,char *p_row_id_cltt,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
        struct sqlca                      sqlca;
        int                               int_retval;
        PRO_GSEQNUM_STRUCT_H              l_pro_gseqno_struct_h;
        char                              h_status[APL_STATUS_LEN];
        char                              chr_h_sys_access_stamp[APL_DATE_LEN];
        MT_CLTDEPOMAP_STRUCT_I            *l_mt_cltdepomap_struct_i = NULL;
        char                              chr_l_buf[BUFFER_LEN];
        /*Added by usman for CSGL API call - start
        int l_retval = 0;
        char keyvalue[50]=APL_NULL_STRING;
        char l_buf[1000] = APL_NULL_STRING;
        short    int_cond_exists     = 0;
        char chr_l_param;
		int l_exstind = 0;
        Added by usman for CSGL API call - end*/

        #ifdef APL_THREADS
                APL_SET_CONTEXT
                EXEC SQL CONTEXT USE :my_ctx_local;
        #endif

         p_cln_key_codes[0] = "CLN_CODE";
         p_cln_key_codes[1] = APL_NULL_STRING;
         p_key_values[0] = p_mt_cltdepomap_struct_h->h_dl_client;
         p_key_values[1] = APL_NULL_STRING;

         sqlca.sqlcode = 0;

         APL_IF_DEBUG
         {
                CO_ProcMonitor(APL_OUT_FILE,"Entered processtion MT_Mod_DBClientDepoMap \n",NULL,p_intl_env_data_struct_h);

                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);

                sprintf(chr_l_buf,"Account is %s \n",p_mt_cltdepomap_struct_h->h_dl_client);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);

                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Sequence number is %d \n",p_mt_cltdepomap_struct_h->h_cln_deposeq_num);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
         }

 l_mt_cltdepomap_struct_i = (MT_CLTDEPOMAP_STRUCT_I *)calloc(1,sizeof(MT_CLTDEPOMAP_STRUCT_I));
 APL_MALLOC_FAIL(l_mt_cltdepomap_struct_i)

 l_mt_cltdepomap_struct_i->i_dl_client = 0;
 l_mt_cltdepomap_struct_i->i_cln_depo_code = 0;
 l_mt_cltdepomap_struct_i->i_cln_depo_map_clnt_id = 0;
 l_mt_cltdepomap_struct_i->i_cln_depo_map_dp_id = 0;
 l_mt_cltdepomap_struct_i->i_access_stamp = 0;
 l_mt_cltdepomap_struct_i->i_maker = 0;
 l_mt_cltdepomap_struct_i->i_maker_dt = 0;
 l_mt_cltdepomap_struct_i->i_cln_deposeq_num = 0;
 l_mt_cltdepomap_struct_i->i_status = 0;

        if (strlen(p_mt_cltdepomap_struct_h->h_checker) == 0)
                l_mt_cltdepomap_struct_i->i_checker = -1;
        else
                l_mt_cltdepomap_struct_i->i_checker = 0;

        if (strlen(p_mt_cltdepomap_struct_h->h_checker_dt) == 0)
                l_mt_cltdepomap_struct_i->i_checker_dt = -1;
        else
                l_mt_cltdepomap_struct_i->i_checker_dt = 0;


        if (CO_RtvSysDtTime(chr_h_sys_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
        { 
                APL_GOBACK_FAIL
        }
        else
        {
          strcpy(p_mt_cltdepomap_struct_h->h_access_stamp,chr_h_sys_access_stamp);  
        }  

         printf("Value of Access stamp from CO_RtvSysDtTime Function ==|%s|\n",chr_h_sys_access_stamp);
         printf("Value of Access Stamp from - After copy ==|%s|\n",p_mt_cltdepomap_struct_h->h_access_stamp);

        APL_IF_DEBUG
        {
                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h->h_mode);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);

                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Action is %s \n",p_intl_env_data_struct_h->h_process);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
        }


       if((strcmp(p_intl_env_data_struct_h->subprocess,"UPL") == 0)&&(strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_DELETE)!=0)) /*DataPatch-CS0181192-CleintdepoMap upload-Kotubabu-Start*/
       {
            int int_depoid_cnt = 0; 
            EXEC SQL SELECT  count(DISTINCT DEPO_PART_CODE) INTO :int_depoid_cnt 
                     FROM MT_DEPO_PART WHERE  STATUS = 'AA' 
                     AND DEPO_CODE = :p_mt_cltdepomap_struct_h->h_cln_depo_code
                     AND DEPO_PART_CODE=:p_mt_cltdepomap_struct_h->h_cln_depo_map_dp_id;

            IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
            if (int_depoid_cnt == 0)
            {
                        Alert("\n Provided Deposotry ID is Invalid\n");
                        CO_InsertErr(l_debug_info_ptr,
                                     CLNMAP_DEPOID_INVALID,
                                    APL_NULL_STRING,
                                      APL_NULL_STRING,
                                      APL_NULL_STRING,
                                     __LINE__,
                                     __FILE__);
                        APL_GOBACK_FAIL
            }  
			
	    if (strlen(p_mt_cltdepomap_struct_h->h_cln_depo_map_clnt_id) != 0 ) /*DataPatch-CS0181192-Mandatory for Add-Pavan*/
	    {
            if((strlen(p_mt_cltdepomap_struct_h->h_cln_depo_map_clnt_id) != 8)&& (strlen(p_mt_cltdepomap_struct_h->h_cln_depo_map_clnt_id) != 16))
            {
                        Alert("DepoMap Client id length is Improper \n");
                        CO_InsertErr(l_debug_info_ptr,DEPO_CLNID_LEN_CORRECT,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
                        APL_GOBACK_FAIL
         }
            }
       } /*DataPatch-CS0181192-CleintdepoMap upload-Kotubabu-End*/
       if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_INPUT)== 0)
               {

                /*Oracle Sequence strcpy(l_pro_gseqno_struct_h.sequencename, "CLN_DEPO_SEQ");
                strcpy(l_pro_gseqno_struct_h.seq_attrb_a, APL_NULL_STRING);
                strcpy(l_pro_gseqno_struct_h.seq_attrb_b, APL_NULL_STRING);
                strcpy(l_pro_gseqno_struct_h.seq_attrb_c, APL_NULL_STRING);

                l_pro_gseqno_struct_h.seq_stepby = 1;
                l_pro_gseqno_struct_h.seq_start = 1;
                l_pro_gseqno_struct_h.last_seqnum = 999999999;

                strcpy(p_mt_cltdepomap_struct_h->h_cln_access_stamp, chr_h_sys_time_stamp);
                int_retval = CO_RtvNxtSeqNum(&l_pro_gseqno_struct_h,l_debug_info_ptr);
                if (int_retval != APL_FAILURE)
                        p_mt_cltdepomap_struct_h->h_addrsequence_num = int_retval;
                else
                        APL_GOBACK_FAIL*/

                int_retval = CO_RtvChldNxtSeqNum (  p_cln_key_codes,
                                                    p_key_values,
                                                    "MT_CLI_DEPO_MAP",
                                                    p_cln_field_name,
                                                    &p_cln_next_seq_num,
                                                    l_debug_info_ptr);
          
                if (int_retval != APL_FAILURE)
                p_mt_cltdepomap_struct_h->h_cln_deposeq_num = p_cln_next_seq_num;
                else
                APL_GOBACK_FAIL

                APL_IF_DEBUG
                {
                printf("Sequence No Returned = |%d|\n",p_cln_next_seq_num);
                printf("Sequence No Generated = |%d|\n",p_mt_cltdepomap_struct_h->h_cln_deposeq_num);
                }
                p_cln_next_seq_num = 0;

                strcpy(p_mt_cltdepomap_struct_h->h_status,STATUS_UAUTH);
                strcpy(p_mt_cltdepomap_struct_h->h_maker,p_intl_env_data_struct_h->usr);
                strcpy(p_mt_cltdepomap_struct_h->h_maker_dt,chr_h_sys_access_stamp);
                strcpy(p_mt_cltdepomap_struct_h->h_checker,APL_NULL_STRING);
                strcpy(p_mt_cltdepomap_struct_h->h_checker_dt,APL_NULL_STRING);
                strcpy(p_mt_cltdepomap_struct_h->h_access_stamp,chr_h_sys_access_stamp);


                if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                        APL_GOBACK_FAIL


                EXEC SQL INSERT INTO MT_CLI_DEPO_MAP
                VALUES (:p_mt_cltdepomap_struct_h:l_mt_cltdepomap_struct_i
                                 );

                IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_REC_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
                }  

                if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                        APL_GOBACK_FAIL


                else if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_MODIFY) == 0)
                {
                 APL_IF_DEBUG
                 {
                        printf("MODIFY MODE FOR EXCHANGE MAPPING DETAILS\n");
                        printf("CLIENT CODE = |%s|\n",p_mt_cltdepomap_struct_h->h_dl_client);
                        printf("SEQ NUMBER IS |%d|\n",p_mt_cltdepomap_struct_h->h_cln_deposeq_num);
                        printf("EXCHANGE CODE IS = |%s|\n",p_mt_cltdepomap_struct_h->h_cln_depo_code);
                  }
           

                  if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                           APL_GOBACK_FAIL

				   
				/*CGSL:DEPO map upload status changes AA mode,checker date and checker also not be null for the upload start */	   
				   if(strcmp(p_intl_env_data_struct_h->subprocess, "UPL") == 0)
				  {
					  
					  strcpy((char *)h_status,STATUS_AUTH);
					  					  
					  EXEC SQL UPDATE MT_CLI_DEPO_MAP
                  SET
                  CLN_CODE = :p_mt_cltdepomap_struct_h->h_dl_client:l_mt_cltdepomap_struct_i->i_dl_client, 
                  CLN_DEPO_CODE = :p_mt_cltdepomap_struct_h->h_cln_depo_code:l_mt_cltdepomap_struct_i->i_cln_depo_code,
                  CLN_DEPO_MAP_CLIENT_ID = :p_mt_cltdepomap_struct_h->h_cln_depo_map_clnt_id:l_mt_cltdepomap_struct_i->i_cln_depo_map_clnt_id,
                  CLN_DEPO_MAP_DP_ID = :p_mt_cltdepomap_struct_h->h_cln_depo_map_dp_id:l_mt_cltdepomap_struct_i->i_cln_depo_map_dp_id,
                  ACCESS_STAMP = :chr_h_sys_access_stamp:l_mt_cltdepomap_struct_i->i_access_stamp,
                  MAKER = :p_intl_env_data_struct_h->usr:l_mt_cltdepomap_struct_i->i_maker,
                  MAKER_DT = :chr_h_sys_access_stamp:l_mt_cltdepomap_struct_i->i_maker_dt,
                  CHECKER = 'SYSTEM',
                  CHECKER_DT = :chr_h_sys_access_stamp:l_mt_cltdepomap_struct_i->i_access_stamp,
                  STATUS = :h_status,
                  CLN_SEQ_NUM = :p_mt_cltdepomap_struct_h->h_cln_deposeq_num:l_mt_cltdepomap_struct_i->i_cln_deposeq_num,
		  CMBP_ID= :p_mt_cltdepomap_struct_h->h_cmbp_id:l_mt_cltdepomap_struct_i->i_cmbp_id  
                  WHERE ROWID = :p_row_id_cltt;
				 
					  
				  }
				  else{
					  
                  strcpy((char *)h_status,STATUS_UAUTH);


                  EXEC SQL UPDATE MT_CLI_DEPO_MAP
                  SET
                  CLN_CODE = :p_mt_cltdepomap_struct_h->h_dl_client:l_mt_cltdepomap_struct_i->i_dl_client, 
                  CLN_DEPO_CODE = :p_mt_cltdepomap_struct_h->h_cln_depo_code:l_mt_cltdepomap_struct_i->i_cln_depo_code,
                  CLN_DEPO_MAP_CLIENT_ID = :p_mt_cltdepomap_struct_h->h_cln_depo_map_clnt_id:l_mt_cltdepomap_struct_i->i_cln_depo_map_clnt_id,
                  CLN_DEPO_MAP_DP_ID = :p_mt_cltdepomap_struct_h->h_cln_depo_map_dp_id:l_mt_cltdepomap_struct_i->i_cln_depo_map_dp_id,
                  ACCESS_STAMP = :chr_h_sys_access_stamp:l_mt_cltdepomap_struct_i->i_access_stamp,
                  MAKER = :p_intl_env_data_struct_h->usr:l_mt_cltdepomap_struct_i->i_maker,
                  MAKER_DT = :chr_h_sys_access_stamp:l_mt_cltdepomap_struct_i->i_maker_dt,
                  CHECKER = NULL,
                  CHECKER_DT = NULL,
                  STATUS = :h_status,
                  CLN_SEQ_NUM = :p_mt_cltdepomap_struct_h->h_cln_deposeq_num:l_mt_cltdepomap_struct_i->i_cln_deposeq_num,
		  CMBP_ID= :p_mt_cltdepomap_struct_h->h_cmbp_id:l_mt_cltdepomap_struct_i->i_cmbp_id  /* SWAPNIL FOR MODIFY CMBP ID ISKB_12434 */
                  WHERE ROWID = :p_row_id_cltt;
 

					  
				  }
                 /*CGSL:DEPO map upload status changes start AA mode end */
                 

 IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
 }
 else if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_DELETE) == 0)
 {
          APL_IF_DEBUG
          {
            printf("DELETE MODE FOR DEPOSITORY MAPPING DETAILS.....\n");
            printf("CLIENT CODE = |%s|\n",p_mt_cltdepomap_struct_h->h_dl_client);
            printf("SEQ NUMBER IS |%d|\n",p_mt_cltdepomap_struct_h->h_cln_deposeq_num);
            printf("DEPOSITORY CODE IS = |%s|\n",p_mt_cltdepomap_struct_h->h_cln_depo_code);
          }

          if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
              APL_GOBACK_FAIL

          strcpy((char *)h_status,STATUS_DEL_UAUTH);
    
		   if(strcmp(p_intl_env_data_struct_h->subprocess, "UPL") == 0)
				  {
                EXEC SQL DELETE FROM MT_CLI_DEPO_MAP
                WHERE ROWID = :p_row_id_cltt;

                IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
				  }
				  else{
					  
          EXEC SQL UPDATE MT_CLI_DEPO_MAP
          SET MAKER = :p_intl_env_data_struct_h->usr:l_mt_cltdepomap_struct_i->i_maker,
          MAKER_DT = :chr_h_sys_access_stamp:l_mt_cltdepomap_struct_i->i_maker_dt,
          ACCESS_STAMP = :chr_h_sys_access_stamp:l_mt_cltdepomap_struct_i->i_access_stamp,
          CHECKER = NULL,
          CHECKER_DT = NULL,
          STATUS = :h_status
          WHERE ROWID  = :p_row_id_cltt;
				  }
    
          

 IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
 }
 else if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_RESET) == 0)
 {
   APL_IF_DEBUG
          {
             printf("DELETE MODE FOR DEPOSITORY MAPPING DETAILS.....\n");
             printf("CLIENT CODE = |%s|\n",p_mt_cltdepomap_struct_h->h_dl_client);
             printf("SEQ NUMBER IS |%d|\n",p_mt_cltdepomap_struct_h->h_cln_deposeq_num);
             printf("DEPOSITORY CODE IS = |%s|\n",p_mt_cltdepomap_struct_h->h_cln_depo_code);
          }
             if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                        APL_GOBACK_FAIL


             strcpy((char *)h_status,STATUS_AUTH);


             EXEC SQL UPDATE MT_CLI_DEPO_MAP
             SET CHECKER = :p_intl_env_data_struct_h->usr,
             CHECKER_DT = :chr_h_sys_access_stamp,
             ACCESS_STAMP = :chr_h_sys_access_stamp,
             STATUS = :h_status
             WHERE ROWID = :p_row_id_cltt;

 IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
 }
 else if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_AUTHORISE) == 0)
 {
     APL_IF_DEBUG
          {
             printf("AUTHORISE MODE FOR DEPOSITORY MAPPING DETAILS.....\n");
             printf("CLIENT CODE = |%s|\n",p_mt_cltdepomap_struct_h->h_dl_client);
             printf("SEQ NUMBER IS |%d|\n",p_mt_cltdepomap_struct_h->h_cln_deposeq_num);
             printf("DEPOSITORY CODE IS = |%s|\n",p_mt_cltdepomap_struct_h->h_cln_depo_code);
          } 
             if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                 APL_GOBACK_FAIL

             EXEC SQL SELECT STATUS
             INTO :h_status
             FROM MT_CLI_DEPO_MAP
             WHERE ROWID = :p_row_id_cltt;

             IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
                 if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                        APL_GOBACK_FAIL


             if (strcmp(h_status, STATUS_DEL_UAUTH) == 0)
             {
                EXEC SQL DELETE FROM MT_CLI_DEPO_MAP
                WHERE ROWID = :p_row_id_cltt;

                IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
             }
             else
             {
               strcpy((char *)h_status, STATUS_AUTH);


               EXEC SQL UPDATE MT_CLI_DEPO_MAP
               SET CHECKER = :p_intl_env_data_struct_h->usr,
               CHECKER_DT = :chr_h_sys_access_stamp,
               ACCESS_STAMP = :chr_h_sys_access_stamp,
               STATUS = :h_status
               WHERE ROWID = :p_row_id_cltt;

               IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
            /*Added by usman for CSGL API call - START
			CO_Chk_CntryEnabled("API_CONSUMER","MT_CLI_DEPO_MAP",&int_cond_exists,l_debug_info_ptr); 
            APL_IF_DEBUG
            {
                printf("API cntry condition = |%d|\n",int_cond_exists);
            }   
            if(int_cond_exists>0)
			{
				EXEC SQL SELECT GETCLIENTPARAMBYID('CSGL_CLIENT',:p_mt_cltdepomap_struct_h->h_dl_client) INTO :chr_l_param FROM DUAL;  /*checking Client is CSGL Client or not 
				IS_ANY_ORA_ERROR
				if(chr_l_param == 'Y')
				{
					EXEC SQL SELECT COUNT(1) INTO :l_exstind FROM MT_CLIENT_CSGL WHERE CUST_CODE = :p_mt_cltdepomap_struct_h->h_dl_client;
					IS_ANY_ORA_ERROR
					if(l_exstind == 1)
					{
						strcpy(keyvalue,"M.CLN_CODE=");
					    strcat(keyvalue,p_mt_cltdepomap_struct_h->h_dl_client);
					    l_retval=callCSGLAPI(p_intl_env_data_struct_h->usr, "MT_CLIENTM", keyvalue);
					    APL_IF_DEBUG
					    {
						    if(l_retval == 0)
						    {
							    CO_ProcMonitor(APL_OUT_FILE, "CSGL_API_call.ksh Executed Successfully\n",NULL,p_intl_env_data_struct_h);
						    }
						    else
						    {
							    CO_ProcMonitor(APL_OUT_FILE, "CSGL_API_call.ksh Executed UnSuccessfully\n",NULL,p_intl_env_data_struct_h);
						    }
					    }
					}
				}
			}
			Added by usman for CSGL API call - END*/

               //APL_GOBACK_SUCCESS
              }
              } 

/*CGSL: ISSUE handel after modifiy depo code upload status is changing in main tab also start  */
//if(!((strcmp(p_intl_env_data_struct_h->subprocess, "UPL") == 0) && (strcmp(p_intl_env_data_struct_h->h_mode, APL_FUNC_MODIFY) == 0) ))
	
 if( !strcmp(p_intl_env_data_struct_h->subprocess, "UPL") == 0)	
{
	
         int_retval = CR_Mod_UpdMastStatus(  p_cln_key_codes,
                                             p_key_values,
                                             g_cln_mst_table_name,
                                             g_cln_chld_table_names,
                                             APL_CHILD_IND,
                                             p_status,
                                             chr_h_sys_access_stamp, 
                                             p_intl_env_data_struct_h,
                                             l_debug_info_ptr);


         APL_IF_DEBUG
         {
            printf("Returned Status Value = |%s|\n",p_status);
         }

Alert("chk_mod1");
            if (int_retval != APL_SUCCESS)
                  APL_GOBACK_FAIL

              APL_GOBACK_SUCCESS
}
/*CGSL: ISSUE handel after modifiy depo code upload status is changing in main tab also end  */

 RETURN_SUCCESS :
 {
       APL_FREE(l_mt_cltdepomap_struct_i)

       APL_IF_DEBUG
                   CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion MT_Mod_DBClientDepoMap SUCCESS\n",NULL,p_intl_env_data_struct_h);
                   return(APL_SUCCESS);
 }

 RETURN_FAILURE :
 {
      APL_FREE(l_mt_cltdepomap_struct_i)

      APL_IF_DEBUG
                  CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion MT_Mod_DBClientDepoMap FAILURE\n",NULL,p_intl_env_data_struct_h);

      return(APL_FAILURE);
        }
}

 /******************************************************************************************
  *
  *   Function Name				:  MT_Mod_DBClientMsgAddr 
  *
  *   Description 					:  This Function Accepts Client Message Address Structure,
  *                            
  *                               Row Id,Env String and Debug Pointer.  
  *                               
  *                               Used in Input/Modify/Delete/Authorise/Reset. 
  *                             
  *                               returns Success/Failure depending upon validn.
  *
  *   Pararmeter				         Type				       Mode					Description	
  *   ----------                     ----                  ----              ------------
  *  
  *   p_mt_msgaddress_struct_h     MT_MSGADDRESS_STRUCT_H I               Client Message Address Details Structure
  *
  *   p_row_id_cltt                  char *                 I               Row Id of Client
  *
  *   p_intl_env_data_struct_h       INTL_ENV_DATA_STRUCT_H I               Environment String Structure
  *  
  *   l_debug_info_ptr               DEBUG_INFO_STRUCT_H    I               Debug Info Structure 
  *
  *   Return Values :
  *  
  *   APL_SUCCESS  - SUCCESS
  *
  *	  APL_FAILURE  - FAILURE
  *
  *
  *******************************************************************************************/

 int MT_Mod_DBClientMsgAddr(MT_MSGADDRESS_STRUCT_H *p_mt_msgaddress_struct_h,char *p_row_id_cltt,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca			  sqlca;
	int						  int_retval;
	PRO_GSEQNUM_STRUCT_H	  l_pro_gseqno_struct_h;
	char						  h_status[APL_STATUS_LEN] = APL_NULL_STRING;
	/*char						  h_clnt_status[APL_STATUS_LEN];*/
	char						  chr_h_sys_access_stamp[APL_DATE_LEN];
	MT_MSGADDRESS_STRUCT_I *l_mt_msgaddress_struct_i = NULL;
	char			  			  chr_l_buf[BUFFER_LEN];
	int   int_format_cnt = 0; //DataPatch-CS0181192-Cleint Message upload-Kotubabu
        int   int_mast_cnt = 0; //DataPatch-CS0181192-Cleint Message upload-Kotubabu
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	sqlca.sqlcode = 0;
        p_key_values[0] = p_mt_msgaddress_struct_h->h_dl_client;
        p_key_values[1] = APL_NULL_STRING;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion MT_Mod_DBClientMsgAddr \n",NULL,p_intl_env_data_struct_h);

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Account is %s \n",p_mt_msgaddress_struct_h->h_dl_client);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
		
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Message number is %s \n",p_mt_msgaddress_struct_h->h_msg_ident_no);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
		
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Address sequence number is %d \n",p_mt_msgaddress_struct_h->h_addrsequence_num);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
	}
	
	l_mt_msgaddress_struct_i = (MT_MSGADDRESS_STRUCT_I *)calloc(1,sizeof(MT_MSGADDRESS_STRUCT_I));
	APL_MALLOC_FAIL(l_mt_msgaddress_struct_i)

	l_mt_msgaddress_struct_i->i_dl_client = 0;
	l_mt_msgaddress_struct_i->i_msg_ident_no = 0;
	l_mt_msgaddress_struct_i->i_addrsequence_num = 0;
	l_mt_msgaddress_struct_i->i_swift_tlx_gcn = 0;
	l_mt_msgaddress_struct_i->i_priority_ind = 0;
	l_mt_msgaddress_struct_i->i_access_stamp = 0;
	l_mt_msgaddress_struct_i->i_maker = 0;
	l_mt_msgaddress_struct_i->i_maker_dt = 0;
	l_mt_msgaddress_struct_i->i_status = 0;
	/*l_mt_msgaddress_struct_i->i_iso_msg_format	=	0;*/

	if (strlen(p_mt_msgaddress_struct_h->h_gcn_addr) == 0)
		l_mt_msgaddress_struct_i->i_gcn_addr = -1;
	else
		l_mt_msgaddress_struct_i->i_gcn_addr = 0;

	if (strlen(p_mt_msgaddress_struct_h->h_swift_addr) == 0)
		l_mt_msgaddress_struct_i->i_swift_addr = -1;
	else
		l_mt_msgaddress_struct_i->i_swift_addr = 0;

	if (strlen(p_mt_msgaddress_struct_h->h_infolex) == 0)
		l_mt_msgaddress_struct_i->i_infolex = -1;
	else
		l_mt_msgaddress_struct_i->i_infolex = 0;
	
	if (strlen(p_mt_msgaddress_struct_h->h_iso_msg_format) == 0)
		l_mt_msgaddress_struct_i->i_iso_msg_format = -1;
	else
		l_mt_msgaddress_struct_i->i_iso_msg_format = 0;

	l_mt_msgaddress_struct_i = (MT_MSGADDRESS_STRUCT_I *)calloc(1,sizeof(MT_MSGADDRESS_STRUCT_I));
	APL_MALLOC_FAIL(l_mt_msgaddress_struct_i)

	l_mt_msgaddress_struct_i->i_dl_client = 0;
	l_mt_msgaddress_struct_i->i_msg_ident_no = 0;
	l_mt_msgaddress_struct_i->i_addrsequence_num = 0;
	l_mt_msgaddress_struct_i->i_swift_tlx_gcn = 0;
	l_mt_msgaddress_struct_i->i_priority_ind = 0;
	l_mt_msgaddress_struct_i->i_access_stamp = 0;
	
	/*l_mt_msgaddress_struct_i->i_iso_msg_format	=	0;*/
	
	if (strlen(p_mt_msgaddress_struct_h->h_gcn_addr) == 0)
		l_mt_msgaddress_struct_i->i_gcn_addr = -1;
	else
		l_mt_msgaddress_struct_i->i_gcn_addr = 0;

	if (strlen(p_mt_msgaddress_struct_h->h_swift_addr) == 0)
		l_mt_msgaddress_struct_i->i_swift_addr = -1;
	else
		l_mt_msgaddress_struct_i->i_swift_addr = 0;

	if (strlen(p_mt_msgaddress_struct_h->h_infolex) == 0)
		l_mt_msgaddress_struct_i->i_infolex = -1;
	else
		l_mt_msgaddress_struct_i->i_infolex = 0;

	if (strlen(p_mt_msgaddress_struct_h->h_schedule) == 0)
		l_mt_msgaddress_struct_i->i_schedule = -1;
	else
		l_mt_msgaddress_struct_i->i_schedule = 0;

	if (strlen(p_mt_msgaddress_struct_h->h_comb_msg) == 0)
		l_mt_msgaddress_struct_i->i_comb_msg = -1;
	else
		l_mt_msgaddress_struct_i->i_comb_msg = 0;

	if (strlen(p_mt_msgaddress_struct_h->h_fax_addr) == 0)
		l_mt_msgaddress_struct_i->i_fax_addr = -1;
	else
		l_mt_msgaddress_struct_i->i_fax_addr = 0;

	if (strlen(p_mt_msgaddress_struct_h->h_identify) == 0)
		l_mt_msgaddress_struct_i->i_identify = -1;
	else
		l_mt_msgaddress_struct_i->i_identify = 0;

   if ((p_mt_msgaddress_struct_h->h_schsequence_num) == 0)
      l_mt_msgaddress_struct_i->i_schsequence_num = -1;
   else
      l_mt_msgaddress_struct_i->i_schsequence_num = 0;

	if (strlen(p_mt_msgaddress_struct_h->h_holdings) == 0)
		l_mt_msgaddress_struct_i->i_holdings = -1;
	else
		l_mt_msgaddress_struct_i->i_holdings = 0;
	
	if (strlen(p_mt_msgaddress_struct_h->h_iso_msg_format) == 0)
		l_mt_msgaddress_struct_i->i_iso_msg_format = -1;
	else
		l_mt_msgaddress_struct_i->i_iso_msg_format = 0;

	if (strlen(p_mt_msgaddress_struct_h->h_validate_flag) == 0)
		l_mt_msgaddress_struct_i->i_validate_flag = -1;
	else
		l_mt_msgaddress_struct_i->i_validate_flag = 0;

	if (strlen(p_mt_msgaddress_struct_h->h_cln_msg_resp_cons54x) == 0)
		l_mt_msgaddress_struct_i->i_cln_msg_resp_cons54x = -1;
	else
		l_mt_msgaddress_struct_i->i_cln_msg_resp_cons54x = 0;

        if (strlen(p_mt_msgaddress_struct_h->h_cln_msg_gen_rec_dp) == 0)
		l_mt_msgaddress_struct_i->i_cln_msg_gen_rec_dp= -1;
	else
		l_mt_msgaddress_struct_i->i_cln_msg_gen_rec_dp = 0;

	if (strlen(p_mt_msgaddress_struct_h->h_checker) == 0)
		l_mt_msgaddress_struct_i->i_checker = -1;
	else
		l_mt_msgaddress_struct_i->i_checker = 0;

	if (strlen(p_mt_msgaddress_struct_h->h_checker_dt) == 0)
		l_mt_msgaddress_struct_i->i_checker_dt = -1;
	else
		l_mt_msgaddress_struct_i->i_checker_dt= 0;

	/*strcpy((char *)h_clt_status, STATUS_UAUTH);*/

	if (CO_RtvSysDtTime(chr_h_sys_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
   {
		APL_GOBACK_FAIL
   }
   else
   {
      strcpy(p_mt_msgaddress_struct_h->h_access_stamp,chr_h_sys_access_stamp);
   }    

	APL_IF_DEBUG
	{
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h->h_mode);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
		
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Action is %s \n",p_intl_env_data_struct_h->h_process);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
	}

        if((strcmp(p_intl_env_data_struct_h->h_process,"U")== 0) && (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_DELETE) != 0)) /*DataPatch-CS0181192-Cleint Message upload-Kotubabu-Start*/
        {
	  if (strlen(p_mt_msgaddress_struct_h->h_iso_msg_format) != 0 ) /*DataPatch-CS0181192-Mandatory for Add-Pavan*/
	  {
            EXEC SQL SELECT  COUNT(*) INTO :int_format_cnt FROM PRO_SGENSTAT WHERE MAP_TYPE ='MSG_FORMAT'
                     AND MAP_VAL =:p_mt_msgaddress_struct_h->h_iso_msg_format;

            IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
            if (int_format_cnt == 0)
            {
                        Alert("\n ISO MSG FORMAT Value Should be S/Y only\n");
                        CO_InsertErr(l_debug_info_ptr,
                                     ERR_ISO_MSG_FORMAT,
                                    APL_NULL_STRING,
                                      APL_NULL_STRING,
                                      APL_NULL_STRING,
                                     __LINE__,
                                     __FILE__);
                        APL_GOBACK_FAIL
            }
          } 
		  
	 if (strlen(p_mt_msgaddress_struct_h->h_msg_ident_no) != 0 ) /*DataPatch-CS0181192-Mandatory for Add-Pavan*/
	 {
           if(strcmp(p_mt_msgaddress_struct_h->h_msg_ident_no,"4")==0)
           {
             EXEC SQL SELECT count(*) INTO :int_mast_cnt  FROM MT_CLIENT WHERE CLN_CODE=CLN_MASTER
                      AND CLN_CODE=:p_mt_msgaddress_struct_h->h_dl_client;

             IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

             if(int_mast_cnt == 0)
             {
                strcpy(p_mt_msgaddress_struct_h->h_comb_msg,"N");
                l_mt_msgaddress_struct_i->i_comb_msg =0;
                strcpy(p_mt_msgaddress_struct_h->h_holdings,"Y");
                l_mt_msgaddress_struct_i->i_holdings =0;
             }
             else
             {
                strcpy(p_mt_msgaddress_struct_h->h_comb_msg,"Y");
                l_mt_msgaddress_struct_i->i_comb_msg =0;
                strcpy(p_mt_msgaddress_struct_h->h_holdings,"Y");
                l_mt_msgaddress_struct_i->i_holdings =0;
             }   
           }
           else {
                strcpy(p_mt_msgaddress_struct_h->h_comb_msg,"N");
                l_mt_msgaddress_struct_i->i_comb_msg =0;
                strcpy(p_mt_msgaddress_struct_h->h_holdings,"N");
                l_mt_msgaddress_struct_i->i_holdings =0;
           }
		 }
       } /*DataPatch-CS0181192-Cleint Message upload-Kotubabu-End*/

	if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_INPUT)== 0)
	{
  
      printf("Value of the Cln Code in MSGADDRESS ==%s\n",p_mt_msgaddress_struct_h->h_dl_client); 
/*
		int_retval = CR_Chk_AccMsgAddrDupl(p_mt_msgaddress_struct_h,l_mt_msgaddress_struct_i,'I',l_debug_info_ptr);
		if (int_retval != APL_SUCCESS)
		{
			CO_InsertErr(l_debug_info_ptr,ERR_REC_EXIST,"Account Addr. Rec", p_mt_msgaddress_struct_h->h_dl_client,p_mt_msgaddress_struct_h->h_msg_ident_no,__LINE__,__FILE__);
			APL_GOBACK_FAIL
		}
	*/	
		/*Sequence GenCommented strcpy(l_pro_gseqno_struct_h.sequencename, "MSGADDR");
		strcpy(l_pro_gseqno_struct_h.seq_attrb_a, APL_NULL_STRING);
		strcpy(l_pro_gseqno_struct_h.seq_attrb_b, APL_NULL_STRING);
		strcpy(l_pro_gseqno_struct_h.seq_attrb_c, APL_NULL_STRING);
		
		l_pro_gseqno_struct_h.seq_stepby = 1;
		l_pro_gseqno_struct_h.seq_start = 1;
		l_pro_gseqno_struct_h.last_seqnum = 999999999;
		
		strcpy(l_mt_msgaddress_struct_h->h_access_stamp, chr_h_sys_access_stamp); 
		int_retval = CO_RtvNxtSeqNum(&l_pro_gseqno_struct_h,l_debug_info_ptr);
		if (int_retval != APL_FAILURE)
			p_mt_msgaddress_struct_i_h->h_addrsequence_num = int_retval;
		else
			APL_GOBACK_FAIL*/

      int_retval = CO_RtvChldNxtSeqNum    (  p_cln_key_codes,
                                             p_key_values,
                                             "MT_MSGADDRESS",
                                             "CONTACTSEQ",
                                             &p_cln_next_seq_num,
                                             l_debug_info_ptr);
      if (int_retval != APL_FAILURE)
      p_mt_msgaddress_struct_h->h_addrsequence_num = p_cln_next_seq_num;
		else
		APL_GOBACK_FAIL
			
     APL_IF_DEBUG
           {
             printf("Sequence No Returned = |%d|\n",p_cln_next_seq_num);
             printf("Sequence No Generated = |%d|\n",p_mt_msgaddress_struct_h->h_addrsequence_num);
           } 

                p_cln_next_seq_num = 0; 
			
		            if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			               APL_GOBACK_FAIL
              
              if(strcmp(p_intl_env_data_struct_h->h_process,"U")== 0)/*DataPatch-CS0181192-Cleint Message upload-Kotubabu-Start*/
              {
                strcpy(p_mt_msgaddress_struct_h->h_status,STATUS_AUTH);
                l_mt_msgaddress_struct_i->i_status =0;
                strcpy(p_mt_msgaddress_struct_h->h_maker,"GFU");
                l_mt_msgaddress_struct_i->i_maker =0;
                strcpy(p_mt_msgaddress_struct_h->h_maker_dt,chr_h_sys_access_stamp);
                l_mt_msgaddress_struct_i->i_maker_dt =0;
                strcpy(p_mt_msgaddress_struct_h->h_checker,p_intl_env_data_struct_h->usr);
                l_mt_msgaddress_struct_i->i_checker =0;
                strcpy(p_mt_msgaddress_struct_h->h_checker_dt,chr_h_sys_access_stamp);
                l_mt_msgaddress_struct_i->i_checker_dt =0;
                strcpy(p_mt_msgaddress_struct_h->h_access_stamp,chr_h_sys_access_stamp);
                l_mt_msgaddress_struct_i->i_access_stamp =0;
              } /*DataPatch-CS0181192-Cleint Message  upload-Kotubabu-End*/
              else
              { 
                strcpy(p_mt_msgaddress_struct_h->h_status,STATUS_UAUTH);
                strcpy(p_mt_msgaddress_struct_h->h_maker,p_intl_env_data_struct_h->usr);
                strcpy(p_mt_msgaddress_struct_h->h_maker_dt,chr_h_sys_access_stamp);
                strcpy(p_mt_msgaddress_struct_h->h_checker,APL_NULL_STRING);
                strcpy(p_mt_msgaddress_struct_h->h_checker_dt,APL_NULL_STRING);
                strcpy(p_mt_msgaddress_struct_h->h_access_stamp,chr_h_sys_access_stamp);
              }
		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL

		EXEC SQL INSERT INTO MT_MSGADDRESS
		            VALUES (:p_mt_msgaddress_struct_h:l_mt_msgaddress_struct_i
				 );

		IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_REC_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
 } 
 if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_MODIFY) == 0)
 {
          APL_IF_DEBUG
                  {
                   printf(" Param Str STATUS VALUE ==|%s|\n",p_mt_msgaddress_struct_h->h_status);
                   printf(" MODIFY FOR MESSAGE ADDRESS DETAILS.....\n");
                   printf(" STATUS OF RECORD IS |%s|\n",p_mt_msgaddress_struct_h->h_status);
                   printf(" SEQUENCE NUMBER IS |%d|\n",p_mt_msgaddress_struct_h->h_addrsequence_num);
                  }
		
		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL
              if(strcmp(p_intl_env_data_struct_h->h_process,"U")== 0)/*DataPatch-CS0181192-Cleint Message upload-Kotubabu-Start*/
              {
                strcpy(p_mt_msgaddress_struct_h->h_status,STATUS_AUTH);
                l_mt_msgaddress_struct_i->i_status =0;
                strcpy(p_mt_msgaddress_struct_h->h_maker,"GFU");
                l_mt_msgaddress_struct_i->i_maker =0;
                strcpy(p_mt_msgaddress_struct_h->h_maker_dt,chr_h_sys_access_stamp);
                l_mt_msgaddress_struct_i->i_maker_dt =0;
                strcpy(p_mt_msgaddress_struct_h->h_checker,p_intl_env_data_struct_h->usr);
                l_mt_msgaddress_struct_i->i_checker =0;
                strcpy(p_mt_msgaddress_struct_h->h_checker_dt,chr_h_sys_access_stamp);
                l_mt_msgaddress_struct_i->i_checker_dt =0;
                strcpy(p_mt_msgaddress_struct_h->h_access_stamp,chr_h_sys_access_stamp);
                l_mt_msgaddress_struct_i->i_access_stamp =0;
              } /*DataPatch-CS0181192-Cleint Message upload-Kotubabu-End*/
              else
              {
                strcpy(p_mt_msgaddress_struct_h->h_status,STATUS_UAUTH);          
                strcpy(p_mt_msgaddress_struct_h->h_maker,p_intl_env_data_struct_h->usr);
                strcpy(p_mt_msgaddress_struct_h->h_maker_dt,chr_h_sys_access_stamp);
                strcpy(p_mt_msgaddress_struct_h->h_checker,APL_NULL_STRING);
                strcpy(p_mt_msgaddress_struct_h->h_checker_dt,APL_NULL_STRING);
                strcpy(p_mt_msgaddress_struct_h->h_access_stamp,chr_h_sys_access_stamp);
              }

                if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                            APL_GOBACK_FAIL

               int_retval = CR_Chk_AccMsgAddrDupl(p_mt_msgaddress_struct_h,l_mt_msgaddress_struct_i,'M',l_debug_info_ptr);
		if (int_retval != APL_SUCCESS)
		{
			CO_InsertErr(l_debug_info_ptr,ERR_REC_EXIST,"Account Addr. Rec", p_mt_msgaddress_struct_h->h_dl_client,p_mt_msgaddress_struct_h->h_msg_ident_no,__LINE__,__FILE__);
			APL_GOBACK_FAIL
		}

 if ((!strcmp(p_mt_msgaddress_struct_h->h_msg_ident_no, "3")) ||
          (!strcmp(p_mt_msgaddress_struct_h->h_msg_ident_no, "31")))
      {
         EXEC SQL UPDATE MT_MSGADDRESS
         SET COMB_MSG = :p_mt_msgaddress_struct_h->h_comb_msg
         WHERE cln_code = :p_mt_msgaddress_struct_h->h_dl_client AND
               MSG_IDENT_NO IN ('3', '31');

         IS_ANY_ORA_ERROR;
      }
		
		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL

	 	EXEC SQL UPDATE MT_MSGADDRESS
		    SET 
        SWIFT_TLX_GCN = NVL(:p_mt_msgaddress_struct_h->h_swift_tlx_gcn:l_mt_msgaddress_struct_i->i_swift_tlx_gcn,SWIFT_TLX_GCN),
		    PRIORITY_IND = NVL(:p_mt_msgaddress_struct_h->h_priority_ind:l_mt_msgaddress_struct_i->i_priority_ind,PRIORITY_IND),
		 	 GCN_ADDR = NVL(:p_mt_msgaddress_struct_h->h_gcn_addr:l_mt_msgaddress_struct_i->i_gcn_addr,GCN_ADDR),
		 	 SWIFT_ADDR = NVL(:p_mt_msgaddress_struct_h->h_swift_addr:l_mt_msgaddress_struct_i->i_swift_addr,SWIFT_ADDR),
		 	 TELEX_ADDR = NVL(:p_mt_msgaddress_struct_h->h_infolex:l_mt_msgaddress_struct_i->i_infolex,TELEX_ADDR),
		 	 SCHEDULE = NVL(:p_mt_msgaddress_struct_h->h_schedule:l_mt_msgaddress_struct_i->i_schedule,SCHEDULE),
		 	 COMB_MSG = NVL(:p_mt_msgaddress_struct_h->h_comb_msg:l_mt_msgaddress_struct_i->i_comb_msg,COMB_MSG),
		 	 FAX_ADDR = NVL(:p_mt_msgaddress_struct_h->h_fax_addr:l_mt_msgaddress_struct_i->i_fax_addr,FAX_ADDR),
		 	 IDENTIFY = NVL(:p_mt_msgaddress_struct_h->h_identify:l_mt_msgaddress_struct_i->i_identify,IDENTIFY),
			 ACCESS_STAMP = :chr_h_sys_access_stamp:l_mt_msgaddress_struct_i->i_access_stamp,
			 HOLDINGS = NVL(:p_mt_msgaddress_struct_h->h_holdings:l_mt_msgaddress_struct_i->i_holdings,HOLDINGS),
			 ISO_MSG_FORMAT =	NVL(:p_mt_msgaddress_struct_h->h_iso_msg_format:l_mt_msgaddress_struct_i->i_iso_msg_format,ISO_MSG_FORMAT),
			 VALIDATE_IND	=	NVL(:p_mt_msgaddress_struct_h->h_validate_flag:l_mt_msgaddress_struct_i->i_validate_flag,VALIDATE_IND),
		    CLN_CODE= :p_mt_msgaddress_struct_h->h_dl_client:l_mt_msgaddress_struct_i->i_dl_client,
		    MSG_IDENT_NO = NVL(:p_mt_msgaddress_struct_h->h_msg_ident_no:l_mt_msgaddress_struct_i->i_msg_ident_no,MSG_IDENT_NO),
		    CONTACTSEQ = NVL(:p_mt_msgaddress_struct_h->h_addrsequence_num:l_mt_msgaddress_struct_i->i_addrsequence_num,CONTACTSEQ),
		    SCHIDEN_NO = NVL(:p_mt_msgaddress_struct_h->h_schsequence_num:l_mt_msgaddress_struct_i->i_schsequence_num,SCHIDEN_NO),
		    CLN_MSG_RESP_CONS54X = NVL(:p_mt_msgaddress_struct_h->h_cln_msg_resp_cons54x:l_mt_msgaddress_struct_i->i_cln_msg_resp_cons54x,CLN_MSG_RESP_CONS54X),
		    CLN_MSG_GEN_REC_DP = NVL(:p_mt_msgaddress_struct_h->h_cln_msg_gen_rec_dp:l_mt_msgaddress_struct_i->i_cln_msg_gen_rec_dp,CLN_MSG_GEN_REC_DP),
        MAKER = :p_mt_msgaddress_struct_h->h_maker:l_mt_msgaddress_struct_i->i_maker,
        MAKER_DT = :p_mt_msgaddress_struct_h->h_maker_dt:l_mt_msgaddress_struct_i->i_maker_dt, 
        CHECKER = :p_mt_msgaddress_struct_h->h_checker:l_mt_msgaddress_struct_i->i_checker,   
        CHECKER_DT = :p_mt_msgaddress_struct_h->h_checker_dt:l_mt_msgaddress_struct_i->i_checker_dt,   
        STATUS = :p_mt_msgaddress_struct_h->h_status:l_mt_msgaddress_struct_i->i_status  
        WHERE ROWID = :p_row_id_cltt; 

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
 } 
 else if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_DELETE ) == 0)
  {
    APL_IF_DEBUG 
               {
                 printf("DELETE MODE FOR EXCHANGE MAPPING DETAILS\n");
                 printf("CLIENT CODE = |%s|\n",p_mt_msgaddress_struct_h->h_dl_client);
                 printf("SEQ NUMBER IS |%d|\n",p_mt_msgaddress_struct_h->h_addrsequence_num);
               }
			
		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL

              if(strcmp(p_intl_env_data_struct_h->h_process,"U")== 0)/*DataPatch-CS0181192-Cleint Message file upload-Kotubabu-Start*/ 
              {
                 EXEC SQL DELETE FROM MT_MSGADDRESS
                          WHERE ROWID = :p_row_id_cltt;

                 IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
              } /*DataPatch-CS0181192-Cleint Message upload-Kotubabu-End*/
              else
              {
               strcpy((char *)h_status,STATUS_DEL_UAUTH);
		printf("Just before update status ****************Chirag\n");
               EXEC SQL UPDATE MT_MSGADDRESS
               SET MAKER = :p_intl_env_data_struct_h->usr:l_mt_msgaddress_struct_i->i_maker,
               MAKER_DT = :chr_h_sys_access_stamp:l_mt_msgaddress_struct_i->i_maker_dt,
               ACCESS_STAMP = :chr_h_sys_access_stamp:l_mt_msgaddress_struct_i->i_access_stamp,
               CHECKER = NULL,
			 CHECKER_DT = NULL,
               STATUS   =:h_status
		WHERE ROWID = :p_row_id_cltt;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
		printf("Leaving Delete function of Msg ****************Chirag\n");
		/**APL_GOBACK_SUCCESS*By Chirag 060606*/
	}
	}
 else if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_RESET) == 0)
	{
    APL_IF_DEBUG
    {
        printf("RESET MODE FOR MESSAGE ADDRESS DETAILS.......\n");
        printf("CLIENT CODE = |%s|\n",p_mt_msgaddress_struct_h->h_dl_client);
        printf("SEQ NUMBER IS |%d|\n",p_mt_msgaddress_struct_h->h_addrsequence_num);
    }  

		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL

      strcpy((char *)h_status,STATUS_AUTH);

      EXEC SQL UPDATE MT_MSGADDRESS
      SET CHECKER = :p_intl_env_data_struct_h->usr,
      CHECKER_DT = :chr_h_sys_access_stamp,
      ACCESS_STAMP = :chr_h_sys_access_stamp,
      STATUS   =:h_status
      WHERE ROWID = :p_row_id_cltt;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
     } 

     else if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_AUTHORISE) == 0)
     {

        APL_IF_DEBUG
        {
          printf("AUTHORISE MODE FOR MESSAGE ADDRESS DETAILS.......\n");
          printf("CLIENT CODE = |%s|\n",p_mt_msgaddress_struct_h->h_dl_client);
          printf("SEQ NUMBER IS |%d|\n",p_mt_msgaddress_struct_h->h_addrsequence_num);
        } 
			
		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL
		
       EXEC SQL SELECT STATUS
       INTO :h_status
       FROM MT_MSGADDRESS
		WHERE ROWID = :p_row_id_cltt;
			
		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
			
      if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
          APL_GOBACK_FAIL

      if (strcmp(h_status, STATUS_DEL_UAUTH) == 0)
      {

      EXEC SQL DELETE FROM MT_MSGADDRESS
      WHERE ROWID = :p_row_id_cltt;

      IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
	}
	else
      { 
        
         strcpy((char *)h_status, STATUS_AUTH);

         EXEC SQL UPDATE MT_MSGADDRESS
         SET CHECKER =:p_intl_env_data_struct_h->usr,
         CHECKER_DT =:chr_h_sys_access_stamp,
         STATUS =:h_status,
         ACCESS_STAMP =:chr_h_sys_access_stamp
         WHERE ROWID = :p_row_id_cltt;

         IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
      }
   }
	fflush(stdout);  
        if(!strcmp(p_intl_env_data_struct_h->h_process,"U")== 0)/*DataPatch-CS0181192-Cleint Message upload-Kotubabu-Sta*/
        {  
  printf("Just Before calling CR_Mod_UpdMastStatus\n"); 
         int_retval = CR_Mod_UpdMastStatus(  p_cln_key_codes,
                                             p_key_values,
                                             g_cln_mst_table_name,
                                             g_cln_chld_table_names,
                                             APL_CHILD_IND,
                                             p_status,
                                             chr_h_sys_access_stamp,
                                             p_intl_env_data_struct_h,
                                             l_debug_info_ptr);

          APL_IF_DEBUG
          {
            printf("Returned Status Value = |%s|\n",p_status);
          }

            if (int_retval != APL_SUCCESS)
		           APL_GOBACK_FAIL
         }/*DataPatch-CS0181192-Cleint Message upload-Kotubabu-End*/
            APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		APL_FREE(l_mt_msgaddress_struct_i)
		
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion MT_Mod_DBClientMsgAddr SUCCESS \n",NULL,p_intl_env_data_struct_h);
		
		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
		APL_FREE(l_mt_msgaddress_struct_i)
		
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion MT_Mod_DBClientMsgAddr FAILURE \n",NULL,p_intl_env_data_struct_h);
		
		return(APL_FAILURE);
	}
}

/******************************************************************************************
  *
  *   Function Name				:  MT_Mod_DBClientRegDetails 
  *
  *   Description 					:  This Function Accepts Client Structure,Row Id,Env String, 
  *
  *                               and Debug Pointer. Used in  Input and Modify Modes.
  *
  *                               returns Success/Failure depending upon validn.
  *
  *
  *   Pararmeter				         Type				       Mode					Description	
  *   ----------                     ----                  ----              ------------
  *  
  *   p_mt_ruclient_struct_h         MT_CLIENT_STRUCT_H     I               Client Details Structure
  *
  *   p_row_id_cltt                  char *                 I               Row Id of Client
  *
  *   p_intl_env_data_struct_h       INTL_ENV_DATA_STRUCT_H I               Environment String Structure
  *  
  *   l_debug_info_ptr               DEBUG_INFO_STRUCT_H    I               Debug Info Structure 
  *
  *   Return Values :
  *  
  *   APL_SUCCESS  - SUCCESS
  *
  *	  APL_FAILURE  - FAILURE
  *
  *
  *******************************************************************************************/
/* Kouser - HDFCMT_001 - Client Master Maintenance - Adding New function */

int MT_Mod_DBClientRegDetails(MT_REGDETAILS_STRUCT_H *p_mt_regdetails_struct_h,char *p_row_id_cltt,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
        int int_date_diff1,int_date_diff2,int_date_diff3,int_date_diff4=0;  //DataPatch-CS0181192-Reg report file upload-Kotubabu
        struct sqlca                      sqlca;
        int                               int_retval = 0;
        PRO_GSEQNUM_STRUCT_H      l_pro_gseqno_struct_h;
        /*char                                              h_clt_status[APL_STATUS_LEN];*/
        char                                              h_status[APL_STATUS_LEN];
        char                                              chr_h_sys_access_stamp[APL_DATE_LEN];
        MT_REGDETAILS_STRUCT_I    *l_mt_regdetails_struct_i = NULL;
        char                                              chr_l_buf[BUFFER_LEN];
        /*Added by usman for CSGL API call - start*/
        int l_retval = 0;
        char keyvalue[50]=APL_NULL_STRING;
        char l_buf[1000] = APL_NULL_STRING;
		short    int_cond_exists     = 0;
		char chr_l_param;
		int l_exstind = 0;
        /*Added by usman for CSGL API call - end*/
        #ifdef APL_THREADS
                APL_SET_CONTEXT
                EXEC SQL CONTEXT USE :my_ctx_local;
        #endif

        sqlca.sqlcode = 0;

        p_cln_key_codes[0] = "CLN_CODE";
        p_cln_key_codes[1] = APL_NULL_STRING;
        p_key_values[0] = p_mt_regdetails_struct_h->h_dl_client; 
        p_key_values[1] = APL_NULL_STRING; 
        
        APL_IF_DEBUG
        {
             CO_ProcMonitor(APL_OUT_FILE,"Entered processtion MT_Mod_DBClientRegDetails \n",NULL,p_intl_env_data_struct_h);

                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Client Code is %s \n",p_mt_regdetails_struct_h->h_dl_client);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);

                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h->h_mode);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);

        }


       l_mt_regdetails_struct_i = (MT_REGDETAILS_STRUCT_I *)calloc(1,sizeof(MT_REGDETAILS_STRUCT_I));
        APL_MALLOC_FAIL(l_mt_regdetails_struct_i)

       l_mt_regdetails_struct_i->i_dl_client = 0;
       l_mt_regdetails_struct_i->i_cln_sebi_reg_no = 0;
       l_mt_regdetails_struct_i->i_cln_rbi_reg_no = 0;
       l_mt_regdetails_struct_i->i_access_stamp = 0;
       l_mt_regdetails_struct_i->i_maker = 0;
       l_mt_regdetails_struct_i->i_maker_dt = 0;
       l_mt_regdetails_struct_i->i_status = 0;

       if (strlen(p_mt_regdetails_struct_h->h_cln_sebi_reg_dt) == 0)
                l_mt_regdetails_struct_i->i_cln_sebi_reg_dt = -1;
       else
                l_mt_regdetails_struct_i->i_cln_sebi_reg_dt = 0;

       if (strlen(p_mt_regdetails_struct_h->h_cln_sebi_reg_expdt) == 0)
                l_mt_regdetails_struct_i->i_cln_sebi_reg_expdt = -1;
       else
                l_mt_regdetails_struct_i->i_cln_sebi_reg_expdt = 0;

       if (strlen(p_mt_regdetails_struct_h->h_cln_rbi_reg_dt) == 0)
               l_mt_regdetails_struct_i->i_cln_rbi_reg_dt = -1;
       else
                l_mt_regdetails_struct_i->i_cln_rbi_reg_dt = 0;

       if (strlen(p_mt_regdetails_struct_h->h_cln_rbi_reg_expdt) == 0)
                l_mt_regdetails_struct_i->i_cln_rbi_reg_expdt = -1;
       else
                l_mt_regdetails_struct_i->i_cln_rbi_reg_expdt = 0;
   
       if (strlen(p_mt_regdetails_struct_h->h_cln_mapinid) == 0)
                l_mt_regdetails_struct_i->i_cln_mapinid = -1;
       else
                l_mt_regdetails_struct_i->i_cln_mapinid = 0;

       if (strlen(p_mt_regdetails_struct_h->h_cln_ucc_code) == 0)
                l_mt_regdetails_struct_i->i_cln_ucc_code = -1;
       else
                l_mt_regdetails_struct_i->i_cln_ucc_code = 0;

       if (strlen(p_mt_regdetails_struct_h->h_checker) == 0)
                l_mt_regdetails_struct_i->i_checker = -1;
       else
                l_mt_regdetails_struct_i->i_checker = 0;

       if (strlen(p_mt_regdetails_struct_h->h_checker_dt) == 0)
                l_mt_regdetails_struct_i->i_checker_dt = -1;
       else
                l_mt_regdetails_struct_i->i_checker_dt= 0;
       if (strlen(p_mt_regdetails_struct_h->h_sebi_sub_acc) == 0)
                l_mt_regdetails_struct_i->i_sebi_sub_acc = -1;
       else
                l_mt_regdetails_struct_i->i_sebi_sub_acc = 0;

      printf("Access Stamp Before selecting from function |%s|\n",chr_h_sys_access_stamp);

      if (CO_RtvSysDtTime(chr_h_sys_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
      { 
           APL_GOBACK_FAIL
      } 
      printf("Val of Access Stamp from Function ==|%s|\n",chr_h_sys_access_stamp);


      if((strcmp(p_intl_env_data_struct_h->h_process,"U")== 0) && (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_DELETE) != 0)) /*DataPatch-CS0181192-Cleint Message upload-Kotubabu-Start*/
  {
	     if (strlen(p_mt_regdetails_struct_h->h_cln_sebi_reg_dt) != 0 ) /*DataPatch-CS0181192-Mandatory for Add-Pavan*/
	     {
               if( CO_Pro_DateComp(p_mt_regdetails_struct_h->h_cln_sebi_reg_dt,chr_h_sys_access_stamp,&int_date_diff1,l_debug_info_ptr ) == APL_FAILURE)
                 APL_GOBACK_FAIL

                if (int_date_diff1 < 0)
                {
                      Alert("SEBI reg date is future date");
                      CO_InsertErr(l_debug_info_ptr,
                      ERR_SEBIFUTURE_DATE,
                      APL_NULL_STRING,
                      APL_NULL_STRING,
                      APL_NULL_STRING,
                      __LINE__,
                      __FILE__);
                      APL_GOBACK_FAIL
                }
	      }

             if (strlen(p_mt_regdetails_struct_h->h_cln_rbi_reg_dt))
             {
                 if( CO_Pro_DateComp(p_mt_regdetails_struct_h->h_cln_rbi_reg_dt,chr_h_sys_access_stamp,&int_date_diff2,l_debug_info_ptr ) == APL_FAILURE)
                 APL_GOBACK_FAIL

                 if (int_date_diff2 < 0)
                 {
                      Alert("RBI reg date is future date");
                      CO_InsertErr(l_debug_info_ptr,
                      ERR_RBIFUTURE_DATE,
                      APL_NULL_STRING,
                      APL_NULL_STRING,
                      APL_NULL_STRING,
                      __LINE__,
                      __FILE__);
                      APL_GOBACK_FAIL
                }
             }
 } /*DataPatch-CS0181192-Cleint Message upload-Kotubabu-End*/

 if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_INPUT)== 0)
 {
              if(strcmp(p_intl_env_data_struct_h->h_process,"U")== 0)/*DataPatch-CS0181192-Reg reportfile upload-Kotubabu-Start*/
              {
                strcpy(p_mt_regdetails_struct_h->h_status,STATUS_AUTH);
                l_mt_regdetails_struct_i->i_status =0;
                strcpy(p_mt_regdetails_struct_h->h_maker,"GFU");
                l_mt_regdetails_struct_i->i_maker =0;
                strcpy(p_mt_regdetails_struct_h->h_maker_dt,chr_h_sys_access_stamp);
                l_mt_regdetails_struct_i->i_maker_dt =0;
                strcpy(p_mt_regdetails_struct_h->h_checker,p_intl_env_data_struct_h->usr);
                l_mt_regdetails_struct_i->i_checker =0;
                strcpy(p_mt_regdetails_struct_h->h_checker_dt,chr_h_sys_access_stamp);
                l_mt_regdetails_struct_i->i_checker_dt =0;
                strcpy(p_mt_regdetails_struct_h->h_access_stamp,chr_h_sys_access_stamp);
                l_mt_regdetails_struct_i->i_access_stamp =0;
              } /*DataPatch-CS0181192-Reg reportfile upload-Kotubabu-End*/
              else
              {
                strcpy(p_mt_regdetails_struct_h->h_status,STATUS_UAUTH);
                strcpy(p_mt_regdetails_struct_h->h_maker,p_intl_env_data_struct_h->usr);
                strcpy(p_mt_regdetails_struct_h->h_maker_dt,chr_h_sys_access_stamp);
                strcpy(p_mt_regdetails_struct_h->h_checker,APL_NULL_STRING);
                strcpy(p_mt_regdetails_struct_h->h_checker_dt,APL_NULL_STRING);
                strcpy(p_mt_regdetails_struct_h->h_access_stamp,chr_h_sys_access_stamp);
              }
      
                if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                        APL_GOBACK_FAIL
               
                EXEC SQL INSERT INTO MT_REGDETAILS
                VALUES (:p_mt_regdetails_struct_h:l_mt_regdetails_struct_i);

					 printf("TESTING*********  SQL CODE : %d\n",sqlca.sqlcode);
					printf("After ora error\n");
                /***IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_REC_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)**/
					IS_ANY_ORA_ERROR
						 printf("After dublicate error check\n");

 } 
            printf("Outside if condition\n"); 
                if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                        APL_GOBACK_FAIL

                if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_MODIFY) == 0)
                {
                 APL_IF_DEBUG
                 {
                   printf(" MODIFY FOR REGULATORY DETAILS....\n");
                   printf(" CLIENT CODE IS = |%s|\n",p_mt_regdetails_struct_h->h_dl_client);
                 }
                
                 if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                        APL_GOBACK_FAIL


                if(strcmp(p_intl_env_data_struct_h->h_process,"U")== 0) /*DataPatch-CS0181192-Reg report file upload-Kotubabu-Start*/
                {
                 strcpy(p_mt_regdetails_struct_h->h_status,STATUS_AUTH);
                 l_mt_regdetails_struct_i->i_status =0;
                 strcpy(p_mt_regdetails_struct_h->h_maker_dt,chr_h_sys_access_stamp);
                 l_mt_regdetails_struct_i->i_maker_dt =0;
                 strcpy(p_mt_regdetails_struct_h->h_checker,p_intl_env_data_struct_h->usr);
                 l_mt_regdetails_struct_i->i_checker =0;
                 strcpy(p_mt_regdetails_struct_h->h_checker_dt,chr_h_sys_access_stamp);
                 l_mt_regdetails_struct_i->i_checker_dt =0;
                 strcpy(p_mt_regdetails_struct_h->h_access_stamp,chr_h_sys_access_stamp);
                 l_mt_regdetails_struct_i->i_access_stamp =0;

                 EXEC SQL UPDATE MT_REGDETAILS
                 SET  CLN_SEBI_REG_NO = NVL(:p_mt_regdetails_struct_h->h_cln_sebi_reg_no:l_mt_regdetails_struct_i->i_cln_sebi_reg_no,CLN_SEBI_REG_NO),
                 CLN_SEBI_REG_DT = NVL(:p_mt_regdetails_struct_h->h_cln_sebi_reg_dt:l_mt_regdetails_struct_i->i_cln_sebi_reg_dt,CLN_SEBI_REG_DT),
                 CLN_SEBI_REG_EXPDT = NVL(:p_mt_regdetails_struct_h->h_cln_sebi_reg_expdt:l_mt_regdetails_struct_i->i_cln_sebi_reg_expdt,CLN_SEBI_REG_EXPDT),
                 CLN_RBI_REG_NO = NVL(:p_mt_regdetails_struct_h->h_cln_rbi_reg_no:l_mt_regdetails_struct_i->i_cln_rbi_reg_no,CLN_RBI_REG_NO),
                 CLN_RBI_REG_DT = NVL(:p_mt_regdetails_struct_h->h_cln_rbi_reg_dt:l_mt_regdetails_struct_i->i_cln_rbi_reg_dt,CLN_RBI_REG_DT),
                 CLN_RBI_REG_EXPDT = NVL(:p_mt_regdetails_struct_h->h_cln_rbi_reg_expdt:l_mt_regdetails_struct_i->i_cln_rbi_reg_expdt,CLN_RBI_REG_EXPDT),
                 CLN_MAPINID = NVL(:p_mt_regdetails_struct_h->h_cln_mapinid:l_mt_regdetails_struct_i->i_cln_mapinid,CLN_MAPINID),
                 CLN_UCC_CODE = NVL(:p_mt_regdetails_struct_h->h_cln_ucc_code:l_mt_regdetails_struct_i->i_cln_ucc_code,CLN_UCC_CODE),
                 ACCESS_STAMP =:chr_h_sys_access_stamp:l_mt_regdetails_struct_i->i_access_stamp,
                 MAKER = 'GFU',
                 MAKER_DT =:chr_h_sys_access_stamp:l_mt_regdetails_struct_i->i_maker_dt,
                 CHECKER= :p_mt_regdetails_struct_h->h_checker:l_mt_regdetails_struct_i->i_checker,
                 CHECKER_DT = :chr_h_sys_access_stamp:l_mt_regdetails_struct_i->i_checker_dt,
                 STATUS =:p_mt_regdetails_struct_h->h_status:l_mt_regdetails_struct_i->i_status,
                 CLN_CODE= NVL(:p_mt_regdetails_struct_h->h_dl_client:l_mt_regdetails_struct_i->i_dl_client,CLN_CODE),
                 SEBI_SUB_ACC = NVL(:p_mt_regdetails_struct_h->h_sebi_sub_acc:l_mt_regdetails_struct_i->i_sebi_sub_acc,SEBI_SUB_ACC)
                 WHERE ROWID = :p_row_id_cltt;

                 IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)


                }  /*DataPatch-CS0181192-Reg report file upload-Kotubabu-End*/
                else 
                {
                 strcpy((char *)h_status,STATUS_UAUTH); 

                 EXEC SQL UPDATE MT_REGDETAILS
                 SET  CLN_SEBI_REG_NO =:p_mt_regdetails_struct_h->h_cln_sebi_reg_no:l_mt_regdetails_struct_i->i_cln_sebi_reg_no,
                 CLN_SEBI_REG_DT =:p_mt_regdetails_struct_h->h_cln_sebi_reg_dt:l_mt_regdetails_struct_i->i_cln_sebi_reg_dt,
                 CLN_SEBI_REG_EXPDT =:p_mt_regdetails_struct_h->h_cln_sebi_reg_expdt:l_mt_regdetails_struct_i->i_cln_sebi_reg_expdt,
                 CLN_RBI_REG_NO =:p_mt_regdetails_struct_h->h_cln_rbi_reg_no:l_mt_regdetails_struct_i->i_cln_rbi_reg_no,
                 CLN_RBI_REG_DT =:p_mt_regdetails_struct_h->h_cln_rbi_reg_dt:l_mt_regdetails_struct_i->i_cln_rbi_reg_dt,
                 CLN_RBI_REG_EXPDT =:p_mt_regdetails_struct_h->h_cln_rbi_reg_expdt:l_mt_regdetails_struct_i->i_cln_rbi_reg_expdt,
                 CLN_MAPINID =:p_mt_regdetails_struct_h->h_cln_mapinid:l_mt_regdetails_struct_i->i_cln_mapinid,
                 CLN_UCC_CODE =:p_mt_regdetails_struct_h->h_cln_ucc_code:l_mt_regdetails_struct_i->i_cln_ucc_code,
                 ACCESS_STAMP =:chr_h_sys_access_stamp:l_mt_regdetails_struct_i->i_access_stamp,
                 MAKER =:p_intl_env_data_struct_h->usr:l_mt_regdetails_struct_i->i_maker,
                 MAKER_DT =:chr_h_sys_access_stamp:l_mt_regdetails_struct_i->i_maker_dt,
                 CHECKER= NULL,
                 CHECKER_DT = NULL,
                 STATUS =:h_status,
                 CLN_CODE=:p_mt_regdetails_struct_h->h_dl_client:l_mt_regdetails_struct_i->i_dl_client,
                 SEBI_SUB_ACC =:p_mt_regdetails_struct_h->h_sebi_sub_acc:l_mt_regdetails_struct_i->i_sebi_sub_acc
                 WHERE ROWID = :p_row_id_cltt;

                 IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
            }
            }

 else if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_DELETE) == 0)
 {
         APL_IF_DEBUG 
                {
                  printf(" DELETE FOR REGULATORY DETAILS....\n");
                  printf(" CLIENT CODE IS = |%s|\n",p_mt_regdetails_struct_h->h_dl_client);
                  printf("checking Delete Condition\n");
                  printf("Checking of Regulatory Tab..........\n");
                }  
                 
                  if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                        APL_GOBACK_FAIL

               if(strcmp(p_intl_env_data_struct_h->h_process,"U")== 0) /*DataPatch-CS0181192-Reg report file upload-Kotubabu-Start*/  
               {
                 EXEC SQL DELETE FROM MT_REGDETAILS
                 WHERE ROWID = :p_row_id_cltt;

                 IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
               } /*DataPatch-CS0181192-Reg report file upload-Kotubabu-End*/
               else
               { 
                 strcpy((char *)h_status,STATUS_DEL_UAUTH);
 
                 EXEC SQL UPDATE MT_REGDETAILS
                 SET MAKER = :p_intl_env_data_struct_h->usr:l_mt_regdetails_struct_i->i_maker,
                 MAKER_DT = :chr_h_sys_access_stamp:l_mt_regdetails_struct_i->i_maker_dt,
                 ACCESS_STAMP = :chr_h_sys_access_stamp:l_mt_regdetails_struct_i->i_access_stamp,
                 CHECKER = NULL,
                 CHECKER_DT = NULL,
                 STATUS = :h_status
                 WHERE ROWID  = :p_row_id_cltt;

                 IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
                 } 
                 } 
                 else if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_RESET) == 0)
                 {
                 APL_IF_DEBUG
                 {
                  printf("RESET MODE FOR REGULATORY DETAILS.....\n");
                  printf("CLIENT CODE = |%s|\n",p_mt_regdetails_struct_h->h_dl_client);
                 }

                if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                        APL_GOBACK_FAIL

                strcpy((char *)h_status,STATUS_AUTH);

                EXEC SQL UPDATE MT_REGDETAILS 
                SET CHECKER = :p_intl_env_data_struct_h->usr,
                CHECKER_DT = :chr_h_sys_access_stamp,
                ACCESS_STAMP = :chr_h_sys_access_stamp,
                STATUS = :h_status
                WHERE ROWID = :p_row_id_cltt;

                IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
             }
                else if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_AUTHORISE) == 0)
                {
                APL_IF_DEBUG
                {
                  printf("AUTHORISE MODE FOR REGULATORY DETAILS.....\n");
                  printf("CLIENT CODE = |%s|\n",p_mt_regdetails_struct_h->h_dl_client);
                } 
           
                if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                    APL_GOBACK_FAIL
               
                EXEC SQL SELECT STATUS
                INTO :h_status
                FROM MT_REGDETAILS
                WHERE ROWID = :p_row_id_cltt;
 
                IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
          
                if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                    APL_GOBACK_FAIL

                if (strcmp(h_status, STATUS_DEL_UAUTH) == 0)
                {
                 EXEC SQL DELETE FROM MT_REGDETAILS
                 WHERE ROWID = :p_row_id_cltt;
           
                 IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
                }
                else 
                { 
                  strcpy((char *)h_status, STATUS_AUTH);

                  EXEC SQL UPDATE MT_REGDETAILS
                  SET CHECKER = :p_intl_env_data_struct_h->usr,
                  CHECKER_DT = :chr_h_sys_access_stamp,
                  ACCESS_STAMP = :chr_h_sys_access_stamp,
                  STATUS = :h_status
                  WHERE ROWID = :p_row_id_cltt;

                  IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
		  /*Added by usman for CSGL API call - START*/
		  CO_Chk_CntryEnabled("API_CONSUMER","MT_REGDETAILS",&int_cond_exists,l_debug_info_ptr);
                                
                  APL_IF_DEBUG
                  {
                      printf("API cntry condition = |%d|\n",int_cond_exists);
                  }
                
                  if(int_cond_exists>0)
	          {
		      EXEC SQL SELECT GETCLIENTPARAMBYID('CSGL_CLIENT',:p_mt_regdetails_struct_h->h_dl_client) INTO :chr_l_param FROM DUAL;
		      IS_ANY_ORA_ERROR
						
		      if(chr_l_param == 'Y')
		      {
				  EXEC SQL SELECT COUNT(1) INTO :l_exstind FROM MT_CLIENT_CSGL WHERE CUST_CODE = :p_mt_regdetails_struct_h->h_dl_client;
				  IS_ANY_ORA_ERROR
				  if(l_exstind == 1)
				  {
					  strcpy(keyvalue,"M.CLN_CODE=");
		              strcat(keyvalue,p_mt_regdetails_struct_h->h_dl_client);
				
		              l_retval=callCSGLAPI(p_intl_env_data_struct_h->usr, "MT_CLIENTM", keyvalue);
		              APL_IF_DEBUG
		              {
			          if(l_retval == 0)
		              {
			          CO_ProcMonitor(APL_OUT_FILE, "CSGL_API_call.ksh Executed Successfully\n",NULL,p_intl_env_data_struct_h);
			          }
			          else
			          {
				      CO_ProcMonitor(APL_OUT_FILE, "CSGL_API_call.ksh Executed UnSuccessfully\n",NULL,p_intl_env_data_struct_h);
			          }
		              }
				  }
		          
			}
		    }
	            /*Added by usman for CSGL API call - END*/	
                } 
                }
                                 
                if(!strcmp(p_intl_env_data_struct_h->h_process,"U")== 0)/*DataPatch-CS0181192-Reg report file upload-Kotubabu-Start*/                
                {
                    int_retval = CR_Mod_UpdMastStatus(  p_cln_key_codes,
                                                        p_key_values,
                                                        g_cln_mst_table_name,
                                                        g_cln_chld_table_names,
                                                        APL_CHILD_IND,
                                                        p_status,
                                                        chr_h_sys_access_stamp,
                                                        p_intl_env_data_struct_h,
                                                        l_debug_info_ptr);

                    APL_IF_DEBUG
                    {  
                      printf("Returned Status Value = |%s|\n",p_status);
                    }

                    if (int_retval != APL_SUCCESS)
                        APL_GOBACK_FAIL
                 } /*DataPatch-CS0181192-Reg report file upload-Kotubabu-End*/
                    APL_GOBACK_SUCCESS

                RETURN_SUCCESS :
                {
                    APL_FREE(l_mt_regdetails_struct_i)

                    APL_IF_DEBUG
                        CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion MT_Mod_DBClientRegDetails SUCCESS\n",NULL,p_intl_env_data_struct_h);
                return(APL_SUCCESS);
                }

               RETURN_FAILURE :
               {
                   APL_FREE(l_mt_regdetails_struct_i)

                   APL_IF_DEBUG
                        CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion MT_Mod_DBClientRegDetails FAILURE\n",l_debug_info_ptr,p_intl_env_data_struct_h);
        return(APL_FAILURE);
               }
}
 
/*Added by Prateek on 19052014 for ISKB_198(FPI Maintenance)-START*/
/******************************************************************************************
  *
  *   Function Name				:  MT_Mod_DBClientFpiMap 
  *
  *   Description 					:This Function Accepts Client FPI Mapping Structure,
    
  *									Row Id,Env String and Debug Pointer. 
  *
  *									Used in Input/Modify/Authorise/Delete/Reset Modes.
  *
  *									returns Success/Failure depending upon validn.
  *
  *
  *   Pararmeter				         Type				       Mode					Description	
  *   ----------                     ----                  ----              ------------
  *  
  *   p_mt_cltfpimap_struct_h       MT_CLTFPIMAP_STRUCT_H I               Client FPI Mapping  Details Structure
  *
  *   p_row_id_cltt                  char *                 I               Row Id of Client
  *
  *   p_intl_env_data_struct_h       INTL_ENV_DATA_STRUCT_H I               Environment String Structure
  *  
  *   l_debug_info_ptr               DEBUG_INFO_STRUCT_H    I               Debug Info Structure 
  *   
  *    Return Values :
  *  
  *   APL_SUCCESS  - SUCCESS
  *
  *   APL_FAILURE  - FAILURE
  *
  *
  *******************************************************************************************/
int MT_Mod_DBClientFpiMap(MT_CLTFPIMAP_STRUCT_H *p_mt_cltfpimap_struct_h,char *p_row_id_cltt,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   struct sqlca                      sqlca;
   int                               int_retval;
   PRO_GSEQNUM_STRUCT_H              l_pro_gseqno_struct_h;
   char                              h_status[APL_STATUS_LEN];
   char                              chr_h_sys_access_stamp[APL_DATE_LEN];
   MT_CLTFPIMAP_STRUCT_I            *l_mt_cltfpimap_struct_i = NULL;
   char                              chr_l_buf[BUFFER_LEN];
   int				     l_holders_count=0;		
   int                     clientid_nsdlid_comb=0;/*KYC Mapping  - Venkat added for allowing single NSDL Id for a client*/
   char                  chr_nsdl_grp_id[11];/*KYC Mapping  - Venkat added for allowing single NSDL Id for a client*/

   EXEC SQL VAR chr_nsdl_grp_id IS STRING;/*KYC Mapping  - Venkat added for allowing single NSDL Id for a client*/

   #ifdef APL_THREADS
          APL_SET_CONTEXT
          EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   p_cln_key_codes[0] = "CLN_CODE";
   p_cln_key_codes[1] = APL_NULL_STRING;
   p_key_values[0] = p_mt_cltfpimap_struct_h->h_dl_client;
   p_key_values[1] = APL_NULL_STRING;

   sqlca.sqlcode = 0;
    APL_IF_DEBUG
    {
                CO_ProcMonitor(APL_OUT_FILE,"Entered processtion MT_Mod_DBClientFpiMap \n",NULL,p_intl_env_data_struct_h);
       
                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Account is %s \n",p_mt_cltfpimap_struct_h->h_dl_client);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);

                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Sequence number is %d \n",p_mt_cltfpimap_struct_h->h_cln_exchseq_num);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);

    }

 l_mt_cltfpimap_struct_i = (MT_CLTFPIMAP_STRUCT_I *)calloc(1,sizeof(MT_CLTFPIMAP_STRUCT_I));
 APL_MALLOC_FAIL(l_mt_cltfpimap_struct_i)

 l_mt_cltfpimap_struct_i->i_dl_client = 0;
 l_mt_cltfpimap_struct_i->i_nsdl_grp_id = 0;
 l_mt_cltfpimap_struct_i->i_nsdl_grp_name = 0;
 l_mt_cltfpimap_struct_i->i_customer_id = 0;
 l_mt_cltfpimap_struct_i->i_holders = 0;
 l_mt_cltfpimap_struct_i->i_other_holders = 0;
 l_mt_cltfpimap_struct_i->i_kyc_exp_dt = 0;
 l_mt_cltfpimap_struct_i->i_remark = 0;
 l_mt_cltfpimap_struct_i->i_access_stamp = 0;
 l_mt_cltfpimap_struct_i->i_maker = 0;
 l_mt_cltfpimap_struct_i->i_maker_dt = 0;
 l_mt_cltfpimap_struct_i->i_cln_exchseq_num = 0;
 l_mt_cltfpimap_struct_i->i_status = 0;

 if (strlen(p_mt_cltfpimap_struct_h->h_checker) == 0)
      l_mt_cltfpimap_struct_i->i_checker = -1;
 else
 l_mt_cltfpimap_struct_i->i_checker = 0;

 if (strlen(p_mt_cltfpimap_struct_h->h_checker_dt) == 0)
     l_mt_cltfpimap_struct_i->i_checker_dt = -1;
 else
     l_mt_cltfpimap_struct_i->i_checker_dt = 0;
 
 if (CO_RtvSysDtTime(chr_h_sys_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
 { 
       APL_GOBACK_FAIL
 } 
 else
 { 
       strcpy(p_mt_cltfpimap_struct_h->h_access_stamp,chr_h_sys_access_stamp);
 }  

 APL_IF_DEBUG
 {
                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h->h_mode);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);

                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Action is %s \n",p_intl_env_data_struct_h->h_process);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
 }
               
                if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_INPUT)== 0)
                {
                int_retval = CO_RtvChldNxtSeqNum    (  p_cln_key_codes,
                                                       p_key_values,
                                                       "MT_CLI_FPI_MAP", 
                                                       p_cln_field_name,
                                                       &p_cln_next_seq_num,
                                                       l_debug_info_ptr);

                if (int_retval != APL_FAILURE)
                p_mt_cltfpimap_struct_h->h_cln_exchseq_num = p_cln_next_seq_num;
                else
                APL_GOBACK_FAIL


         APL_IF_DEBUG
         {
            Alert("INPUT MODE FOR FPI MAPPING DETAILS\n");
            Alert("Sequence No Returned = |%d|\n",p_cln_next_seq_num);
            Alert("Sequence No Generated = |%d|\n",p_mt_cltfpimap_struct_h->h_cln_exchseq_num);
         }
                p_cln_next_seq_num = 0;

                strcpy(p_mt_cltfpimap_struct_h->h_status,STATUS_UAUTH);
                strcpy(p_mt_cltfpimap_struct_h->h_maker,p_intl_env_data_struct_h->usr);
                strcpy(p_mt_cltfpimap_struct_h->h_maker_dt,chr_h_sys_access_stamp);
                strcpy(p_mt_cltfpimap_struct_h->h_checker,APL_NULL_STRING);
                strcpy(p_mt_cltfpimap_struct_h->h_checker_dt,APL_NULL_STRING);
                strcpy(p_mt_cltfpimap_struct_h->h_access_stamp,chr_h_sys_access_stamp);

		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL

		Alert("\n ClientCode is |%s|",p_mt_cltfpimap_struct_h->h_dl_client);
		Alert("\n Holder is |%s|",p_mt_cltfpimap_struct_h->h_holders);

		EXEC SQL SELECT COUNT(*) INTO :l_holders_count FROM MT_CLI_FPI_MAP 
		WHERE CLN_CODE=:p_mt_cltfpimap_struct_h->h_dl_client
		 AND HOLDERS=:p_mt_cltfpimap_struct_h->h_holders;

		Alert("Sql Code After Checking for the Holders count for this client code |%d|",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		if(l_holders_count==1)
		{
			CO_InsertErr(l_debug_info_ptr,
                                      ERR_HOLDER_ALREADY_EXIST,
                                    APL_NULL_STRING,
                                      APL_NULL_STRING,
                                      APL_NULL_STRING,
                                     __LINE__,
                                     __FILE__);
                          APL_GOBACK_FAIL

		}

/* KYC Mapping - Venkat added for allowing single NSDL Id for a client*/
		EXEC SQL SELECT COUNT(*) INTO :clientid_nsdlid_comb FROM MT_CLI_FPI_MAP 
				WHERE CLN_CODE=:p_mt_cltfpimap_struct_h->h_dl_client;
      
		Alert("Sql Code After Checking for the Client Id and NSDL Group Id comination must be unique |%d|",sqlca.sqlcode);

		IS_ANY_ORA_ERROR
       memset(chr_nsdl_grp_id,APL_NULL_CHAR,sizeof(chr_nsdl_grp_id));
		if(clientid_nsdlid_comb>0)
		{
           EXEC SQL SELECT NSDL_GRP_ID INTO :chr_nsdl_grp_id FROM MT_CLI_FPI_MAP 
		        WHERE CLN_CODE=:p_mt_cltfpimap_struct_h->h_dl_client and rownum=1;
                if (strcmp(p_mt_cltfpimap_struct_h->h_nsdl_grp_id,chr_nsdl_grp_id)== 0)
                {
					Alert("Clinet mapping done earlier with nsdl group id |%s|",chr_nsdl_grp_id);
				}
				else
			    {
						CO_InsertErr(l_debug_info_ptr,
												  ERR_CLIENTCD_NSDLID_COMB,
												APL_NULL_STRING,
												  APL_NULL_STRING,
												  APL_NULL_STRING,
												 __LINE__,
												 __FILE__);
									  APL_GOBACK_FAIL
				}
		}      
/*KYC Mapping  - Venkat added for allowing single NSDL Id for a client*/

                EXEC SQL INSERT INTO MT_CLI_FPI_MAP
                VALUES (:p_mt_cltfpimap_struct_h:l_mt_cltfpimap_struct_i
                       ); 

                IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_CUST_ID_MAPPED,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
                } 

                if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                        APL_GOBACK_FAIL

                if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_MODIFY)== 0)
                {
                   APL_IF_DEBUG
                  {
                        Alert("MODIFY MODE FOR FPI MAPPING DETAILS\n");
                        Alert("CLIENT CODE = |%s|\n",p_mt_cltfpimap_struct_h->h_dl_client); 
                        Alert("SEQ NUMBER IS |%d|\n",p_mt_cltfpimap_struct_h->h_cln_exchseq_num);
                        Alert("CUSTOMER ID IS = |%s|\n",p_mt_cltfpimap_struct_h->h_customer_id);
                  }

                  if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                               APL_GOBACK_FAIL

                  strcpy((char *)h_status,STATUS_UAUTH);


                  EXEC SQL UPDATE MT_CLI_FPI_MAP
                  SET  NSDL_GRP_ID = :p_mt_cltfpimap_struct_h->h_nsdl_grp_id:l_mt_cltfpimap_struct_i->i_nsdl_grp_id,
                       NSDL_GRP_NAME = :p_mt_cltfpimap_struct_h->h_nsdl_grp_name:l_mt_cltfpimap_struct_i->i_nsdl_grp_name,
                       CUSTOMER_ID = :p_mt_cltfpimap_struct_h->h_customer_id:l_mt_cltfpimap_struct_i->i_customer_id,
                       HOLDERS = :p_mt_cltfpimap_struct_h->h_holders:l_mt_cltfpimap_struct_i->i_holders,
                       OTHER_HOLDERS = :p_mt_cltfpimap_struct_h->h_other_holders:l_mt_cltfpimap_struct_i->i_other_holders,
                       KYC_EXPIRY_DT = :p_mt_cltfpimap_struct_h->h_kyc_exp_dt:l_mt_cltfpimap_struct_i->i_kyc_exp_dt,
                       REMARK = :p_mt_cltfpimap_struct_h->h_remark:l_mt_cltfpimap_struct_i->i_remark,
                       ACCESS_STAMP  = :chr_h_sys_access_stamp:l_mt_cltfpimap_struct_i->i_access_stamp,
                       MAKER = :p_intl_env_data_struct_h->usr:l_mt_cltfpimap_struct_i->i_maker,
                       MAKER_DT = :chr_h_sys_access_stamp:l_mt_cltfpimap_struct_i->i_maker_dt,
                       CHECKER = NULL,
                       CHECKER_DT = NULL,
                       STATUS = :h_status,
                       CLN_CODE = :p_mt_cltfpimap_struct_h->h_dl_client:l_mt_cltfpimap_struct_i->i_dl_client,
                       CLN_SEQ_NUM = :p_mt_cltfpimap_struct_h->h_cln_exchseq_num:l_mt_cltfpimap_struct_i->i_cln_exchseq_num
                       WHERE ROWID = :p_row_id_cltt;  	
	
		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
 }
 else if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_DELETE) == 0)
 {
          APL_IF_DEBUG
          {
            Alert("DELETE MODE FOR FPI MAPPING DETAILS.....\n");
            Alert("CLIENT CODE = |%s|\n",p_mt_cltfpimap_struct_h->h_dl_client);
            Alert("SEQ NUMBER IS |%d|\n",p_mt_cltfpimap_struct_h->h_cln_exchseq_num);
            Alert("CUSTOMER ID IS = |%s|\n",p_mt_cltfpimap_struct_h->h_customer_id);
          }
			
		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL
	
          strcpy((char *)h_status,STATUS_DEL_UAUTH);

          EXEC SQL UPDATE MT_CLI_FPI_MAP
          SET 
          MAKER = :p_intl_env_data_struct_h->usr:l_mt_cltfpimap_struct_i->i_maker,
          MAKER_DT = :chr_h_sys_access_stamp:l_mt_cltfpimap_struct_i->i_maker_dt, 
          ACCESS_STAMP = :chr_h_sys_access_stamp:l_mt_cltfpimap_struct_i->i_access_stamp,  
          CHECKER = NULL,
          CHECKER_DT = NULL,
          STATUS = :h_status
          WHERE ROWID = :p_row_id_cltt;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
	
 }
 else if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_RESET) == 0)
 {
          APL_IF_DEBUG
          {
                Alert("RESET MODE FOR FPI MAPPING DETAILS.....\n");
                Alert("CLIENT CODE = |%s|\n",p_mt_cltfpimap_struct_h->h_dl_client);
                Alert("SEQ NUMBER IS |%d|\n",p_mt_cltfpimap_struct_h->h_cln_exchseq_num);
                Alert("CUSTOMER ID IS = |%s|\n",p_mt_cltfpimap_struct_h->h_customer_id);
          }   

                if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                        APL_GOBACK_FAIL

                strcpy((char *)h_status,STATUS_AUTH);

                EXEC SQL UPDATE MT_CLI_FPI_MAP
                SET CHECKER = :p_intl_env_data_struct_h->usr,
                CHECKER_DT = :chr_h_sys_access_stamp,
                ACCESS_STAMP = :chr_h_sys_access_stamp,
                STATUS = :h_status
                WHERE ROWID = :p_row_id_cltt;      

                IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
         }
 else if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_AUTHORISE) == 0)
 { 
      APL_IF_DEBUG
      { 
              Alert("AUTHORISE MODE FOR EXCHANGE MAPPING DETAILS.....\n");
              Alert("CLIENT CODE = |%s|\n",p_mt_cltfpimap_struct_h->h_dl_client);
              Alert("SEQ NUMBER IS |%d|\n",p_mt_cltfpimap_struct_h->h_cln_exchseq_num);
              Alert("CUSTOMER ID IS = |%s|\n",p_mt_cltfpimap_struct_h->h_customer_id);
      }

              if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                        APL_GOBACK_FAIL

              Alert("Status of Each record in Exch Map ==|%s|\n",p_mt_cltfpimap_struct_h->h_status);


              EXEC SQL SELECT STATUS  
              INTO :h_status
              FROM MT_CLI_FPI_MAP
              WHERE ROWID = :p_row_id_cltt; 

              Alert("value of Status after select ==|%s|\n",h_status);

              IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

              if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                       APL_GOBACK_FAIL 

              Alert("Before comparing the DU status\n");
              Alert("status value =|%s|\n",h_status); 

              if (strcmp(h_status, STATUS_DEL_UAUTH) == 0)
              {
              EXEC SQL DELETE FROM MT_CLI_FPI_MAP
              WHERE ROWID = :p_row_id_cltt;

              IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
              }
	else
             {
             strcpy((char *)h_status, STATUS_AUTH);

             EXEC SQL UPDATE MT_CLI_FPI_MAP
             SET CHECKER = :p_intl_env_data_struct_h->usr,
             CHECKER_DT = :chr_h_sys_access_stamp, 
             ACCESS_STAMP = :chr_h_sys_access_stamp, 
             STATUS = :h_status
             WHERE ROWID = :p_row_id_cltt;
          
             IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
             } 
 }  

         int_retval = CR_Mod_UpdMastStatus(  p_cln_key_codes,
                                             p_key_values,
                                             g_cln_mst_table_name,
                                             g_cln_chld_table_names,
                                             APL_CHILD_IND,
                                             p_status,
                                             chr_h_sys_access_stamp,
                                             p_intl_env_data_struct_h,
                                             l_debug_info_ptr);

          APL_IF_DEBUG
          {
            Alert("Returned Status Value = |%s|\n",p_status);
          }

          if (int_retval != APL_SUCCESS)
          APL_GOBACK_FAIL

          APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
         APL_FREE(l_mt_cltfpimap_struct_i)
		
		APL_IF_DEBUG
		CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion MT_Mod_DBClientFpiMap SUCCESS\n",NULL,p_intl_env_data_struct_h);
		Alert("Value for APL_SUCCESS ==%d\n",APL_SUCCESS);
		if (APL_SUCCESS)
		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
        APL_FREE(l_mt_cltfpimap_struct_i)
		
		APL_IF_DEBUG
		CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion MT_Mod_DBClientFpiMap FAILURE\n",NULL,p_intl_env_data_struct_h); 
		
		return(APL_FAILURE);
	}
}

/*Added by Prateek on 19052014 for ISKB_198(FPI Maintenance)-END*/
 
 /******************************************************************************************
  *
  *   Function Name				:  MT_Mod_DBClientOth 
  *
  *   Description 					:  This Function Accepts Client Structure,Row Id,Env String, 
  *
  *                               and Debug Pointer. 
  *
  *                               Used in Delete/Authorise/Freeze/Unfreeze/Close/Open/Reset.    
  *                               returns Success/Failure depending upon validn. 
  *
  *
  *
  *   Pararmeter				         Type				       Mode					Description	
  *   ----------                     ----                  ----              ------------
  *  
  *   chr_p_acct                     char *                 I               Client code Info  
  *
  *   p_row_id_cltt                  char *                 I               Row Id of Client
  *
  *   p_intl_env_data_struct_h       INTL_ENV_DATA_STRUCT_H I               Environment String Structure
  *  
  *   l_debug_info_ptr               DEBUG_INFO_STRUCT_H    I               Debug Info Structure 
  *
  *   Return Values :
  *  
  *   APL_SUCCESS  - SUCCESS
  *
  *	  APL_FAILURE  - FAILURE
  *
  * 
  *******************************************************************************************/
 int MT_Mod_DBClientOth(char *chr_p_acct,char *p_row_id_cltt,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca			sqlca;
	int						int_retval;
	char						h_clt_status[APL_STATUS_LEN];
	char						chr_h_sys_access_stamp[APL_DATE_LEN];
	int						int_h_flg = 0;
	char			  			chr_l_buf[BUFFER_LEN];
	MT_CLIENT_STRUCT_H	*l_mt_client_struct_h = NULL ; 
	MT_CLIENT_STRUCT_I	*l_mt_client_struct_i = NULL ; 
	
	char						chr_clnt_stat[APL_STATUS_LEN];
	char					        chr_cln_type[3];	
	char					        chr_cln_email[61];	
	char					        chr_cln_cntact1[66];	
	char					        chr_cln_cntact2[66];	
	char					        chr_cln_sebictg[5];	
	char					        chr_cln_pan[21];	
	char					        chr_cln_def_agency[7];	
 int 					        chr_ind_val = 0;	
 char      	              chr_i_val_exists = 'Y';
 char                      chr_i_val_authorised = 'Y';
 char                      chr_i_val_deleted = 'N';
 char 					        l_cr_agency_code[7] = APL_NULL_STRING;
 short               		  i_cr_agency_code;
 /*Added by usman for CSGL API call - start*/
        int l_retval = 0;
        char keyvalue[50]=APL_NULL_STRING;
        char l_buf[1000] = APL_NULL_STRING;
        short    int_cond_exists     = 0;
        char chr_l_param;
		int l_exstind = 0;
        /*Added by usman for CSGL API call - end*/


//Commented by Prateek on 07/01/2014 For ISKB_6498(Services gettting down on Production while closing Clients in bulk)--START
//Rootcause :System was allocating memory without any use and this memory was not getting freed,RAM use % was increasing while closing/Freeze/Unfreeze/Open of the client and at a certain point system was getting down
//EXEC SQL TYPE type_raw is long varraw(10485760) reference;

 //short i_blob = 0;
 //type_raw *l_cln_sign;
 //type_raw *l_blob;

 //l_blob =(char *)calloc(10485760,sizeof(char));
 //AIX - Warnings Removal - typecasted
 //l_blob =( type_raw *)calloc(10485760,sizeof(type_raw)); /* retro by Tanuja for KOTAK */
 //Commented by Prateek on 07/01/2014 For ISKB_6498(Services gettting down on Production while closing Clients in bulk)--END


 p_cln_key_codes[0] = "CLN_CODE";
 p_cln_key_codes[1] = APL_NULL_STRING;
 p_key_values[0] = chr_p_acct;
 p_key_values[1] = APL_NULL_STRING;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	
	l_mt_client_struct_h =(MT_CLIENT_STRUCT_H *)calloc(1,sizeof(MT_CLIENT_STRUCT_H));
	APL_MALLOC_FAIL(l_mt_client_struct_h)

	l_mt_client_struct_i =(MT_CLIENT_STRUCT_I *)calloc(1,sizeof(MT_CLIENT_STRUCT_I));
	APL_MALLOC_FAIL(l_mt_client_struct_i)
	
	EXEC SQL BEGIN DECLARE SECTION; 

	EXEC SQL VAR h_clt_status IS STRING;
	EXEC SQL VAR l_mt_client_struct_h->h_checker IS STRING;
	EXEC SQL VAR l_mt_client_struct_h->h_checker_dt IS STRING;
	EXEC SQL VAR l_mt_client_struct_h->h_access_stamp IS STRING;
	EXEC SQL VAR l_mt_client_struct_h->h_clt_status IS STRING;
	EXEC SQL VAR l_cr_agency_code IS STRING;

	EXEC SQL END DECLARE SECTION; 
	sqlca.sqlcode = 0;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion MT_Mod_DBClientOth \n",NULL,p_intl_env_data_struct_h);

		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Account is %s \n",chr_p_acct);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
		
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h->h_mode);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
	}
		
	if(CO_RtvSysDtTime(chr_h_sys_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL

         EXEC SQL SELECT CLN_DEF_CR_AGENCY INTO :l_cr_agency_code:i_cr_agency_code
			FROM MT_CLIENT 
			WHERE CLN_CODE =:chr_p_acct;

     APL_IF_DEBUG
     {
              printf("Agency Code = |%s|\n",l_cr_agency_code);
              printf("Exists Cond = |%c|\n",chr_i_val_exists);
              printf("Auth Cond   = |%c|\n",chr_i_val_authorised);
              printf("Deleted Cond = |%c|\n",chr_i_val_deleted);
     }

     if (strlen(l_cr_agency_code) != 0)
     {
          int_retval = CO_Chk_CrdRatAgnValid(l_cr_agency_code,
                                             chr_i_val_exists,
                                             chr_i_val_authorised,
                                             chr_i_val_deleted,
                                             l_debug_info_ptr);
  
          if (int_retval !=APL_SUCCESS)
               APL_GOBACK_FAIL
     } 

	if((strcmp(p_intl_env_data_struct_h->h_process, "U") == 0) && (strcmp(p_intl_env_data_struct_h->h_mode, APL_FUNC_DELETE) == 0)) /*DataPatch-CS0181192-Cleint upload-Kotubabu-start*/
	{
		printf("p_row_id_cltt is %s\n",p_row_id_cltt);
        EXEC SQL DELETE FROM MT_CLIENT
			WHERE ROWID = :p_row_id_cltt;

		printf("sqlca.sqlcode is %d\n",sqlca.sqlcode);
		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
			
		APL_GOBACK_SUCCESS
		
	} //DataPatch-CS0181192-Cleint upload-Kotubabu-End
	else
	{
	if (strcmp(p_intl_env_data_struct_h->h_mode, APL_FUNC_DELETE) == 0)
		strcpy((char *)h_clt_status, STATUS_DEL_UAUTH);
	else if (strcmp(p_intl_env_data_struct_h->h_mode, APL_FUNC_FREEZE) == 0)
		strcpy((char *)h_clt_status, STATUS_FROZ_UAUTH);
	else if (strcmp(p_intl_env_data_struct_h->h_mode, APL_FUNC_UNFREEZE) == 0)
		strcpy((char *)h_clt_status, STATUS_UNFROZ_UAUTH);
	else if (strcmp(p_intl_env_data_struct_h->h_mode, CLS_MODE) == 0)
		strcpy((char *)h_clt_status, STATUS_CLS_UAUTH);
	else if (strcmp(p_intl_env_data_struct_h->h_mode, OPEN_MODE) == 0)
		strcpy((char *)h_clt_status, STATUS_OPEN_UAUTH);
	else
		int_h_flg = 1;

	if (int_h_flg == 0)
	{
		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL
		
		EXEC SQL UPDATE MT_CLIENT
		SET  MAKER = :p_intl_env_data_struct_h->usr,
		     MAKER_DT = :chr_h_sys_access_stamp,
 		     CHECKER = NULL,
			  CHECKER_DT = NULL,
			  STATUS = :h_clt_status,
		     ACCESS_STAMP  = :chr_h_sys_access_stamp
		     WHERE ROWID = :p_row_id_cltt;


		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

		APL_GOBACK_SUCCESS
	}

	int_h_flg = 0;

   printf("Check for RESET Mode in MASTER\n"); 

   printf("Value of MODE Used ==|%s|\n",p_intl_env_data_struct_h->h_mode); 

	if (strcmp(p_intl_env_data_struct_h->h_mode, APL_FUNC_RESET) == 0)
	{
      printf("MASTER - RESET Mode value of Status ==|%s|\n",h_clt_status);
		EXEC SQL SELECT STATUS
		INTO :h_clt_status
		FROM MT_CLIENT
		WHERE ROWID = :p_row_id_cltt;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

		if ((strcmp(h_clt_status, STATUS_FROZ_UAUTH) == 0) || (strcmp(h_clt_status, STATUS_CLS_UAUTH) == 0) || (strcmp(h_clt_status, STATUS_DEL_UAUTH) == 0))
			strcpy((char *)h_clt_status, STATUS_AUTH);
		else if (strcmp(h_clt_status, STATUS_UNFROZ_UAUTH) == 0)
			strcpy((char *)h_clt_status, STATUS_FROZ_AUTH);
		else if (strcmp(h_clt_status, STATUS_OPEN_UAUTH) == 0)
			strcpy((char *)h_clt_status, STATUS_CLS_AUTH);
		else 
			int_h_flg = 1;


		if (int_h_flg == 0)
		{
			if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
				APL_GOBACK_FAIL

			EXEC SQL UPDATE MT_CLIENT
			SET CHECKER = :p_intl_env_data_struct_h->usr,
				 CHECKER_DT = :chr_h_sys_access_stamp,
				 STATUS = :h_clt_status,
				 ACCESS_STAMP = :chr_h_sys_access_stamp
			WHERE ROWID = :p_row_id_cltt;

			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

			APL_GOBACK_SUCCESS
		}
	}

	int_h_flg = 0;

	if (strcmp(p_intl_env_data_struct_h->h_mode, APL_FUNC_AUTHORISE) == 0)
	{
		printf("INSIDE THE AUTHORISE MODE FOR PASSES CLIENT\n");
		EXEC SQL SELECT STATUS
		INTO :h_clt_status
		FROM MT_CLIENT
		WHERE ROWID = :p_row_id_cltt;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

		if (strcmp(h_clt_status, STATUS_DEL_UAUTH) == 0)
		{

       /* Passed record in 'DU' Status indicates there is no child record exists */ 

       /*if (CR_Mod_DBAccMsgAddrDel(chr_p_acct,APL_NULL_STRING,0,l_debug_info_ptr) != APL_SUCCESS)
				APL_GOBACK_FAIL

			if (CR_Mod_AccSchDel(chr_p_acct,APL_NULL_STRING,APL_NULL_STRING,0,l_debug_info_ptr) != APL_SUCCESS)
				APL_GOBACK_FAIL
			
			if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
				APL_GOBACK_FAIL
			
                        EXEC SQL DELETE FROM DL_CASHCLT
       WHERE CLIENT = :chr_p_acct;*/
			printf("CHECK FLOW1\n");

			memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
			sprintf(chr_l_buf,"rowid of client which will be deleted is : %s \n",p_row_id_cltt);
			CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
			CO_ProcMonitor(APL_OUT_FILE,"selecting records into structure\n",NULL,NULL);
	
          printf("CHECK VALUE  OF QRY BEFORE SELECT\n");

			EXEC SQL SELECT checker,checker_dt,access_stamp,status INTO 
						:l_mt_client_struct_h->h_checker:l_mt_client_struct_i->i_checker,
						:l_mt_client_struct_h->h_checker_dt:l_mt_client_struct_i->i_checker_dt,
						:l_mt_client_struct_h->h_access_stamp:l_mt_client_struct_i->i_access_stamp,
						:l_mt_client_struct_h->h_clt_status:l_mt_client_struct_i->i_clt_status
						FROM MT_CLIENT
						WHERE ROWID = :p_row_id_cltt;
				printf("sqlca.sqlcode is %d\n",sqlca.sqlcode);
				printf("p_row_id_cltt is %s\n",p_row_id_cltt);
				printf("l_mt_client_struct_h->h_checker is %s\n",l_mt_client_struct_h->h_checker);
				printf("l_mt_client_struct_h->h_checker_dt is %s\n",l_mt_client_struct_h->h_checker_dt);
			printf("CHECK FLOW2\n");

			memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
			sprintf(chr_l_buf,"Selected into Struct sqlca.sqlcode = %d \n",sqlca.sqlcode);
			CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);

				strcpy(l_mt_client_struct_h->h_checker,p_intl_env_data_struct_h->usr);
				strcpy(l_mt_client_struct_h->h_checker_dt,chr_h_sys_access_stamp);
				strcpy(l_mt_client_struct_h->h_access_stamp,chr_h_sys_access_stamp);
				strcpy(l_mt_client_struct_h->h_clt_status,STATUS_DEL_AUTH);
				
			/**if (APL_FAILURE == EI_Mod_MQOnDelAccInstr(l_mt_client_struct_h,NULL,"A",l_debug_info_ptr))
				APL_GOBACK_FAIL***/

				printf("p_row_id_cltt is %s\n",p_row_id_cltt);
         EXEC SQL DELETE FROM MT_CLIENT
			WHERE ROWID = :p_row_id_cltt;

				printf("sqlca.sqlcode is %d\n",sqlca.sqlcode);
			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
			
			APL_GOBACK_SUCCESS
			printf("CHECK FLOW3\n");
		}

		if (strcmp(h_clt_status, STATUS_CLS_UAUTH) == 0)
			strcpy((char *)h_clt_status, STATUS_CLS_AUTH);
		else if (strcmp(h_clt_status, STATUS_FROZ_UAUTH) == 0)
			strcpy((char *)h_clt_status, STATUS_FROZ_AUTH);
		else if (strcmp(h_clt_status, STATUS_UNFROZ_UAUTH) == 0)
			strcpy((char *)h_clt_status, STATUS_AUTH);
		else if (strcmp(h_clt_status, STATUS_OPEN_UAUTH) == 0)
			strcpy((char *)h_clt_status, STATUS_AUTH);
		/*
		else if (strcmp(h_clt_status, "UA") == 0)
			strcpy((char *)h_clt_status, STATUS_AUTH);
		*/
		else 
			int_h_flg = 1;

		if (int_h_flg == 0)
		{
			printf("CHECK FLOW4\n");
			if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
				APL_GOBACK_FAIL
			
			EXEC SQL UPDATE MT_CLIENT
			SET CHECKER = :p_intl_env_data_struct_h->usr,
				 CHECKER_DT = :chr_h_sys_access_stamp,
				 STATUS = :h_clt_status,
				 ACCESS_STAMP = :chr_h_sys_access_stamp
			WHERE ROWID = :p_row_id_cltt;
			
			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
			if ((strcmp(h_clt_status, STATUS_CLS_AUTH) == 0) || (strcmp(h_clt_status, STATUS_AUTH)== 0))      /* CSGL API call for 'CA' status - Added by Panith */
			{
				/*Added by usman for CSGL API call - START*/	
				CO_Chk_CntryEnabled("API_CONSUMER","MT_CLIENT",&int_cond_exists,l_debug_info_ptr);
				APL_IF_DEBUG
				{
					printf("API cntry condition = |%d|\n",int_cond_exists);
				}
				if(int_cond_exists>0)
				{
					EXEC SQL SELECT GETCLIENTPARAMBYID('CSGL_CLIENT',:chr_p_acct) INTO :chr_l_param FROM DUAL; /*checking Client is CSGL Client or not */
					IS_ANY_ORA_ERROR
					if(chr_l_param == 'Y')
					{
						EXEC SQL SELECT COUNT(1) INTO :l_exstind FROM MT_CLIENT_CSGL WHERE CUST_CODE = :chr_p_acct ;
						IS_ANY_ORA_ERROR
						if(l_exstind == 1){
							strcpy(keyvalue,"M.CLN_CODE=");
						    strcat(keyvalue,chr_p_acct);
						    l_retval=callCSGLAPI(p_intl_env_data_struct_h->usr, "MT_CLIENTM", keyvalue);
						    APL_IF_DEBUG
						    {
							    if(l_retval == 0)
							    {
								    CO_ProcMonitor(APL_OUT_FILE, "CSGL_API_call.ksh Executed Successfully\n",NULL,p_intl_env_data_struct_h);
							    }
							    else
							    {
								    CO_ProcMonitor(APL_OUT_FILE, "CSGL_API_call.ksh Executed UnSuccessfully\n",NULL,p_intl_env_data_struct_h);
							    }
						    }
						}
					}
				}
				/*Added by usman for CSGL API call - END*/
			}
    } 

       /*  In Authorise Mode - MHLP_CODE table not Used */ 
        
			/*if (strcmp(h_clt_status, STATUS_UAUTH) == 0) 
            { 
				EXEC SQL UPDATE MHLP_CODE
				SET MASTER_CLT = (SELECT CLN_MASTER FROM MT_CLIENT WHERE ROWID = :p_row_id_cltt)
				WHERE CLN_CODE = :chr_p_acct;

       	IS_ANY_ORA_ERROR

          EXEC SQL UPDATE MHLP_CODE
			   SET MASTER_CLT = (SELECT MASTER_CLT FROM MT_CLIENT WHERE ROWID = :p_row_id_cltt)
				WHERE CLIENT = :chr_p_acct;
			}*/

	printf("Client Status |%s|\n",h_clt_status);
         if ((strcmp(h_clt_status, STATUS_UAUTH) == 0 )||(strcmp(h_clt_status, STATUS_MAST_AUTHCHLD) == 0))
         {
				 printf("CHECK FLOW5\n");
             EXEC SQL UPDATE MT_CLIENT
             SET CHECKER = :p_intl_env_data_struct_h->usr,
                 CHECKER_DT = :chr_h_sys_access_stamp,
                 /*STATUS = :h_clt_status,*/
                 ACCESS_STAMP = :chr_h_sys_access_stamp
                 WHERE ROWID = :p_row_id_cltt;
  
             IS_ANY_ORA_ERROR

             int_retval = CR_Mod_UpdMastStatus(  p_cln_key_codes,
                                                 p_key_values,
                                                 g_cln_mst_table_name,
                                                 g_cln_chld_table_names,
                                                 APL_MASTER_IND,
                                                 p_status,
                                                 chr_h_sys_access_stamp,
                                                 p_intl_env_data_struct_h,
                                                 l_debug_info_ptr);
  
              APL_IF_DEBUG
              {
                 printf("Returned Status Value = |%s|\n",p_status);
              }
  
              if (int_retval != APL_SUCCESS)
                    APL_GOBACK_FAIL
			/*Added by usman for CSGL API call - START*/	
				CO_Chk_CntryEnabled("API_CONSUMER","MT_CLIENT",&int_cond_exists,l_debug_info_ptr);
				APL_IF_DEBUG
				{
					printf("API cntry condition = |%d|\n",int_cond_exists);
				}
				if(int_cond_exists>0)
				{
					EXEC SQL SELECT GETCLIENTPARAMBYID('CSGL_CLIENT',:chr_p_acct) INTO :chr_l_param FROM DUAL;  /*checking Client is CSGL Client or not */
					IS_ANY_ORA_ERROR
					if(chr_l_param == 'Y')
					{
						EXEC SQL SELECT COUNT(1) INTO :l_exstind FROM MT_CLIENT_CSGL WHERE CUST_CODE = :chr_p_acct;
						IS_ANY_ORA_ERROR
						if(l_exstind == 1)
						{
							strcpy(keyvalue,"M.CLN_CODE=");
						    strcat(keyvalue,chr_p_acct);
							l_retval=callCSGLAPI(p_intl_env_data_struct_h->usr, "MT_CLIENTM", keyvalue);
							APL_IF_DEBUG
							{
								if(l_retval == 0)
								{
									CO_ProcMonitor(APL_OUT_FILE, "CSGL_API_call.ksh Executed Successfully\n",NULL,p_intl_env_data_struct_h);
								}
								else
								{
									CO_ProcMonitor(APL_OUT_FILE, "CSGL_API_call.ksh Executed UnSuccessfully\n",NULL,p_intl_env_data_struct_h);
								}
							}
						}
					}
				}
			/*Added by usman for CSGL API call - END*/
              printf("CHECK FLOW6\n");

              printf("Value of Code ==%s\n",chr_p_acct);

					/*	ISKB-2022	HDFC Bank Specific Requirement */
					IF_COND_EXISTS("MT_CLIENT","UPDATE_SUB")
					{
              		int_retval = CR_Chk_AccUpd(chr_p_acct,l_debug_info_ptr);

              		if (int_retval != APL_SUCCESS)
                    		APL_GOBACK_FAIL  
					}	

              EXEC SQL DELETE FROM MT_GRPDETAILS
              WHERE CLN_CODE =:chr_p_acct;
             
              IS_ANY_ORA_ERROR 
              printf("CHECK FLOW6\n");
          }  
	
  } 
	}
    APL_GOBACK_SUCCESS 

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion MT_Mod_DBClientOth SUCCESS \n",NULL,p_intl_env_data_struct_h);
		
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion MT_Mod_DBClientOth FAILURE \n",NULL,p_intl_env_data_struct_h);
		
          		return(APL_FAILURE);
        } 
}

 int MT_Mod_DBClientSign(char *chr_p_acct,int chr_p_acct_sign_id,char *chr_p_acct_sign_memo,char *p_row_id_cltt,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 { 
    int                  int_retval;
    char                 h_clt_status[APL_STATUS_LEN];
    char                 chr_h_sys_access_stamp[APL_DATE_LEN];
    int                  int_h_flg = 0;
    char                 chr_l_buf[BUFFER_LEN];
    /*char 					   l_upld_data[000];	*/
    /**char 					   l_upld_data[4294967296];	Allocating for 4 GB mermory**/
	  /*char 						l_upld_data[50000];
    short                i_upld_data;*/
	 short                i_cln_sign;

    p_cln_key_codes[0] = "CLN_CODE";
    p_cln_key_codes[1] = APL_NULL_STRING;
    p_key_values[0] = chr_p_acct;
    p_key_values[1] = APL_NULL_STRING;

   #ifdef APL_THREADS
          APL_SET_CONTEXT
          EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   sqlca.sqlcode = 0;


       EXEC SQL TYPE type_raw is long varraw(10485760) reference;

       short i_blob = 0;
		 type_raw *l_cln_sign;
       type_raw *l_blob;

       APL_IF_DEBUG
        {
                CO_ProcMonitor(APL_OUT_FILE,"Entered processtion MT_Mod_DBClientSign \n",NULL,p_intl_env_data_struct_h);

                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Account is %s \n",chr_p_acct);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);

                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h->h_mode);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
        }

     /*l_cln_sign =(char *)calloc(10485760,sizeof(char));
     l_blob =(char *)calloc(10485760,sizeof(char));AIX Warning Removal***/
     l_cln_sign =(type_raw *)calloc(10485760,sizeof(type_raw));
     l_blob =( type_raw *)calloc(10485760,sizeof(type_raw));

        if(CO_RtvSysDtTime(chr_h_sys_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
                APL_GOBACK_FAIL

        printf("Value of SignId ==|%d|\n",chr_p_acct_sign_id);

        EXEC SQL SELECT UPLD_DATA INTO :l_cln_sign:i_cln_sign 
                 FROM PRO_REQUEST_UPLOAD 
                 WHERE UPLD_ID =:chr_p_acct_sign_id;

        IS_ANY_ORA_ERROR


	     EXEC SQL DECLARE l_get_blob_cur CURSOR
	     FOR SELECT CLN_SIGN_IMG  FROM MT_CLIENT
	     WHERE CLN_CODE <> :chr_p_acct;

        IS_ANY_ORA_ERROR


		  EXEC SQL OPEN l_get_blob_cur;
		       
		  IS_ANY_ORA_ERROR

        printf("Before Check the For Loop\n");

       for(;;)
	     {
	        memset(l_blob,NULL,sizeof(char) * 10485760);
			  i_blob = 0;

	        EXEC SQL FETCH l_get_blob_cur INTO :l_blob:i_blob;
	         
			printf("Cool|%ld| %ld| |%d| |%d|\n",l_cln_sign -> len,l_blob -> len,i_blob,sqlca.sqlcode); //AIX - Warnings Removal
			  if(sqlca.sqlcode == 1403)break;

	        IS_ANY_ORA_ERROR

         if(memcmp(l_cln_sign->arr,l_blob->arr,l_cln_sign->len) == 0)
		   {
				printf("Inside the memcmp Compare\n");

                           CO_InsertErr(l_debug_info_ptr,
                                      ERR_INVALID_SIGNATURE,
                                    APL_NULL_STRING,
                                      APL_NULL_STRING,
                                      APL_NULL_STRING,
                                     __LINE__,
                                     __FILE__);
		          APL_GOBACK_FAIL
		   }
	    }
	      EXEC SQL CLOSE l_get_blob_cur;


  if ((strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_INPUT) == 0) || (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_MODIFY) == 0))
      {
          EXEC SQL UPDATE MT_CLIENT 
          SET 
          MAKER = :p_intl_env_data_struct_h->usr,
          MAKER_DT  = :chr_h_sys_access_stamp,
          CHECKER = NULL, 
          CHECKER_DT = NULL, 
         	ACCESS_STAMP = :chr_h_sys_access_stamp,
          CLN_SIGN_IMG = :l_cln_sign, 
          CLN_SIGN_MEMO = :chr_p_acct_sign_memo 
          WHERE CLN_CODE = :chr_p_acct;

         IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

      }
  
        /**int_retval = CR_Mod_UpdMastStatus(  p_cln_key_codes,
                                            p_key_values,
                                            g_cln_mst_table_name,
                                            g_cln_chld_table_names,
                                            APL_MASTER_IND,
                                            p_status,
                                            chr_h_sys_access_stamp,
                                            p_intl_env_data_struct_h,
                                            l_debug_info_ptr);

                            APL_IF_DEBUG
                            {
                                printf("Returned Status Value = |%s|\n",p_status);
                            }
        printf("After Returning the value Status\n");

                                   if (int_retval != APL_SUCCESS)
                                     APL_GOBACK_FAIL**/

        APL_GOBACK_SUCCESS

        RETURN_SUCCESS :
        {
                APL_IF_DEBUG
                        CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion MT_Mod_DBClientSign SUCCESS \n",NULL,p_intl_env_data_struct_h);
                return(APL_SUCCESS);
        }

        RETURN_FAILURE :
        {
                APL_IF_DEBUG
                        CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion MT_Mod_DBClientSign FAILURE \n",NULL,p_intl_env_data_struct_h);
                return(APL_FAILURE);
        }
}

/**int MT_Chk_SignUnique(	char *l_cln_sign,
								   char *p_cln_code,
                         INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h,
								   DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

         short i_blob = 0;
     type_raw *l_blob;


        printf("Cln Code Value ==%s\n",p_cln_code);

	EXEC SQL DECLARE l_get_blob_cur CURSOR
				FOR
				SELECT CLN_SIGN_IMG
                                FROM MT_CLIENT 
				WHERE CLN_CODE <> :p_cln_code;

	IS_ANY_ORA_ERROR

	EXEC SQL OPEN l_get_blob_cur;
	IS_ANY_ORA_ERROR

	for(;;)
	{
		memset(l_blob,NULL,sizeof(l_blob));
		EXEC SQL FETCH l_get_blob_cur 
					INTO :l_blob:i_blob;
		if(sqlca.sqlcode == 1403)break;
		IS_ANY_ORA_ERROR


        if(memcmp(l_cln_sign->arr,l_blob->arr,l_cln_sign->len) == 0)
		  {
           APL_GOBACK_FAIL
	     }
    }
        EXEC SQL CLOSE l_get_blob_cur;
			
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
		APL_IF_DEBUG
	      CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Mod_DBAcc SUCCESS \n",NULL,p_intl_env_data_struct_h);
		return(APL_SUCCESS);

	RETURN_FAILURE :
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Mod_DBAcc FAILURE \n",NULL,p_intl_env_data_struct_h);
		return(APL_FAILURE);

}**/

 /******************************************************************************************
  *
  *   Function Name				:  CR_Chk_AccIndSet 
  *
  *   Description 					:  This Function Accepts Client Code, Master Account of the 
  *
  *                               Client and Debug pointer. It returns Indicator Value.
  *                          
  *                               Used in  Input and Replicate Modes. 
  * 
  *                               returns Success/Failure depending upon validn. 
  *
  *
  *   Pararmeter				         Type				       Mode					Description	
  *   ----------                     ----                  ----             ------------
  *  
  *   chr_p_clnt                     char *                 I               Client Code Info 
  *   
  *   chr_p_mst                      char *                 I               Master Account Info 
  *
  *   p_field_value                  char *                 O               Indicator Value 
  *  
  *   l_debug_info_ptr               DEBUG_INFO_STRUCT_H    I               Debug Info Structure 
  *
  *   Return Values :
  *  
  *   APL_SUCCESS  - SUCCESS
  *
  *	  APL_FAILURE  - FAILURE
  *
  *
  *******************************************************************************************/
int CR_Chk_AccIndSet(char *chr_p_clnt,char *chr_p_mst,int *p_field_value,DEBUG_INFO_STRUCT_H **l_debug_info_ptr) 
{
        struct   sqlca sqlca;
        int      int_l_num_rows = 0;
        int      l_field_value = 0; 

        #ifdef APL_THREADS
                APL_SET_CONTEXT
                EXEC SQL CONTEXT USE :my_ctx_local;
        #endif

        sqlca.sqlcode = 0;
        int p_ind = 0;

   APL_IF_DEBUG
   {
        CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_AccIndSet \n",NULL,NULL);
   }
        *p_field_value = l_field_value; 

         if (strcmp(chr_p_clnt,chr_p_mst) == 0)
         { 
              l_field_value = 1;
         } 
         else 
         {
             EXEC SQL SELECT CLN_MST_IND INTO :p_ind 
             FROM MT_CLIENT 
             WHERE CLN_CODE = rtrim(:chr_p_mst); 

             IS_ANY_ORA_ERROR

             if (p_ind == 0)
             {
              CO_InsertErr(l_debug_info_ptr,
                                   ERR_MASTER_ACCT_PASSED,
                                   APL_NULL_STRING,
                                   APL_NULL_STRING,
                                   APL_NULL_STRING,
                                   __LINE__,
                                   __FILE__);
                           APL_GOBACK_FAIL
              }
              
             if ((strcmp(chr_p_clnt,chr_p_mst) != 0) && (p_ind == 1))
             { 
                 l_field_value = 2;
             } 
             if ((strcmp(chr_p_clnt,chr_p_mst) != 0) && (p_ind == 2))
             { 
                 l_field_value = 3;
             } 
    
             if (p_ind == 3)
             { 
             CO_InsertErr(l_debug_info_ptr,
                                ERR_OUTOF_IND_LIMIT,
                                APL_NULL_STRING,
                                APL_NULL_STRING,
                                APL_NULL_STRING,
                                __LINE__,
                                __FILE__);
                        APL_GOBACK_FAIL
            }
            } 
            *p_field_value = l_field_value;

            APL_GOBACK_SUCCESS

            RETURN_SUCCESS :
            {
                APL_IF_DEBUG
                        CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccIndSet SUCCESS \n",NULL,NULL);

                return(APL_SUCCESS);
            }

           RETURN_FAILURE :
           {
                APL_IF_DEBUG
                        CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_chk_AccIndSet FAILURE \n",NULL,NULL);
               return(APL_FAILURE);
           }
}

 int CR_Chk_IsMaster(char *chr_p_acct,char *chr_p_mst,int chr_p_ind,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
        struct   sqlca sqlca;
        int      int_l_num_rows = 0;
        int      l_field_value = 0;
        short success_flg = APL_SUCCESS;

        #ifdef APL_THREADS
                APL_SET_CONTEXT
                EXEC SQL CONTEXT USE :my_ctx_local;
        #endif

        sqlca.sqlcode = 0;
        int p_ind = 0;

   APL_IF_DEBUG
   {
        CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_IsMaster\n",NULL,NULL);
   }
   printf("Val of Client ==%s\n",chr_p_acct);

    if (strlen(chr_p_acct) == 0)
        {
              APL_DATA_MISSING("Client Code of the Table",APL_NULL_STRING, APL_NULL_STRING);
               APL_GOBACK_FAIL
       }


   printf("Val of Master ==%s\n",chr_p_mst);
  if (strlen(chr_p_mst) == 0)
            {
                 APL_DATA_MISSING("Master Account of Client",APL_NULL_STRING, APL_NULL_STRING);
                   APL_GOBACK_FAIL
           } 

   printf("Val of Indicator ==%d\n",chr_p_ind);

   if (chr_p_ind == 0)
            {
                  APL_DATA_MISSING("Indicator Value Of Client",APL_NULL_STRING, APL_NULL_STRING);
                   APL_GOBACK_FAIL
            }

           if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                    APL_GOBACK_FAIL
    
    
    if ( (strcmp(chr_p_acct, chr_p_mst)) && (chr_p_ind > 3 ) )
    {
        if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_MASTER, chr_p_acct, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
            {
               APL_GOBACK_FAIL;
            }
           success_flg = APL_FAILURE;
    }


     APL_GOBACK_SUCCESS
  
              RETURN_SUCCESS :
                {
                   APL_IF_DEBUG
                          CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_IsMaster SUCCESS \n",NULL,NULL);
        return(APL_SUCCESS);
                }
  
             RETURN_FAILURE :
            {
                  APL_IF_DEBUG
                         CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_chk_IsMaster FAILURE \n",NULL,NULL);
                  return(APL_FAILURE);
             }
  } 


 /******************************************************************************************
  *
  *   Function Name				:  CR_Chk_AccUpd 
  *
  *   Description 					:  This Function Accepts Client Code 
  *
  *                               and Debug Pointer. Used in  Authorise Modes.
  *
  *                               returns Success/Failure depending upon validn.
  *
  *
  *   Pararmeter				         Type				       Mode					Description	
  *   ----------                     ----                  ----              ------------
  *  
  *   chr_p_acct                     char *                 I               Client Code Info          *  
  *   l_debug_info_ptr               DEBUG_INFO_STRUCT_H    I               Debug Info Structure 
  *
  *   Return Values :
  *  
  *   APL_SUCCESS  - SUCCESS
  *
  *	  APL_FAILURE  - FAILURE
  *
  *
  *******************************************************************************************/
 /*Kouser - HDFCMT_001 - Client Master Maintenance - Added New Function */

int CR_Chk_AccUpd(char *chr_p_acct,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{ 
  int               int_l_num_rows = 0;
  int               chr_count = 0;   
  int               chk_count;   
  struct sqlca	 	 sqlca;
	 int					 int_retval;
  char          	 h_status[APL_STATUS_LEN];
	 char				    chr_h_sys_access_stamp[APL_DATE_LEN];
	 int				 	 int_h_flg = 0;
  char					 chr_l_buf[BUFFER_LEN];

	 MT_CLIENT_STRUCT_H         	l_mt_client_struct_h;

	 MT_CLIENT_STRUCT_H         	*l_mt_clientmast_struct_h = NULL ; 
  MT_CLIENT_STRUCT_I         	*l_mt_clientmast_struct_i = NULL ; 
  MT_CLIENT_STRUCT_H         	*l_mt_clientsub_struct_h = NULL ; 
	 MT_CLIENT_STRUCT_I         	*l_mt_clientsub_struct_i = NULL ;
  MT_CLTGRPMAP_STRUCT_H      	*l_mt_clientgrp_struct_h = NULL ; 
  MT_CLTGRPMAP_STRUCT_I      	*l_mt_clientgrp_struct_i = NULL ;  


 
   EXEC SQL VAR l_mt_client_struct_h.h_cln_sign_img IS RAW;

	EXEC SQL BEGIN DECLARE SECTION;	
		EXEC SQL VAR h_status IS STRING;
	EXEC SQL END DECLARE SECTION;	
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
 sqlca.sqlcode = 0;

 APL_IF_DEBUG
 {
    CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_AccUpd\n",NULL,NULL);

    memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
    sprintf(chr_l_buf,"Field name is |%s| \n",chr_p_acct);
    CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
 } 
 	l_mt_clientmast_struct_h =(MT_CLIENT_STRUCT_H *)calloc(1,sizeof(MT_CLIENT_STRUCT_H));
 	APL_MALLOC_FAIL(l_mt_clientmast_struct_h)

 	l_mt_clientmast_struct_i =(MT_CLIENT_STRUCT_I *)calloc(1,sizeof(MT_CLIENT_STRUCT_I));
 	APL_MALLOC_FAIL(l_mt_clientmast_struct_i)

    l_mt_clientsub_struct_h =(MT_CLIENT_STRUCT_H *)calloc(1,sizeof(MT_CLIENT_STRUCT_H));
 	APL_MALLOC_FAIL(l_mt_clientsub_struct_h)

 	l_mt_clientsub_struct_i =(MT_CLIENT_STRUCT_I *)calloc(1,sizeof(MT_CLIENT_STRUCT_I));
 	APL_MALLOC_FAIL(l_mt_clientsub_struct_i)

    l_mt_clientgrp_struct_h =(MT_CLTGRPMAP_STRUCT_H *)calloc(1,sizeof(MT_CLTGRPMAP_STRUCT_H));
	   APL_MALLOC_FAIL(l_mt_clientgrp_struct_h)

 	l_mt_clientgrp_struct_i =(MT_CLTGRPMAP_STRUCT_I *)calloc(1,sizeof(MT_CLTGRPMAP_STRUCT_I));
 	APL_MALLOC_FAIL(l_mt_clientgrp_struct_i)


    if (strlen(chr_p_acct) == 0)
    {
           APL_DATA_MISSING("Client Code of the Table",APL_NULL_STRING, APL_NULL_STRING);
           APL_GOBACK_FAIL
    }   

        if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                APL_GOBACK_FAIL
        printf("Before Selecting  Record from Mt_client\n");
        printf(" Cli  Code ==%s\n",chr_p_acct);

        EXEC SQL SELECT * INTO :l_mt_clientmast_struct_h:l_mt_clientmast_struct_i
                          FROM MT_CLIENT
                          WHERE CLN_CODE = :chr_p_acct
                          AND STATUS IN ('AA','AU'); 

        IS_ANY_ORA_ERROR

        EXEC SQL SELECT COUNT(*) INTO :chr_count
           FROM MT_CLIENT
           WHERE CLN_MASTER = :chr_p_acct
           AND CLN_CODE != :chr_p_acct
           AND STATUS = 'AA';
       
       IS_ANY_ORA_ERROR

       if (chr_count == 0)
       {   
                 APL_GOBACK_SUCCESS               
       }
       else
       {
               EXEC SQL SELECT * INTO :l_mt_clientgrp_struct_h:l_mt_clientgrp_struct_i
               FROM MT_GRPDETAILS
               WHERE CLN_CODE = :chr_p_acct;

               EXEC SQL DECLARE sub_cursor  CURSOR FOR SELECT * FROM MT_CLIENT
                                     WHERE CLN_MASTER = :chr_p_acct
                                     AND CLN_CODE != :chr_p_acct
                                     AND STATUS = 'AA';   

              
               IS_ANY_ORA_ERROR

               EXEC SQL OPEN sub_cursor;

               IS_ANY_ORA_ERROR 

               for(chk_count=1;chk_count<=chr_count;chk_count++)
               {
                 EXEC SQL FETCH sub_cursor INTO :l_mt_clientsub_struct_h:l_mt_clientsub_struct_i;
		/*
		 printf("l_mt_clientsub_struct_h->h_dl_client |%s|\n",l_mt_clientsub_struct_h->h_dl_client);
		 printf("l_mt_clientsub_struct_h->h_clnt_class |%s|\n",l_mt_clientsub_struct_h->h_clnt_class);
		 printf("l_mt_clientgrp_struct_h->h_grp_class |%s|\n",l_mt_clientgrp_struct_h->h_grp_class);
		 printf("l_mt_clientmast_struct_h->h_clnt_class |%s|\n",l_mt_clientmast_struct_h->h_clnt_class);
		 printf("l_mt_clientsub_struct_h->h_cln_email |%s|\n",l_mt_clientsub_struct_h->h_cln_email);
		 printf("l_mt_clientgrp_struct_h->h_grp_email |%s|\n",l_mt_clientgrp_struct_h->h_grp_email);
		 printf("l_mt_clientmast_struct_h->h_cln_email |%s|\n",l_mt_clientmast_struct_h->h_cln_email);
		 printf("l_mt_clientsub_struct_h->h_cln_cntact1 |%s|\n",l_mt_clientsub_struct_h->h_cln_cntact1);
		 printf("l_mt_clientgrp_struct_h->h_grp_contct1 |%s|\n",l_mt_clientgrp_struct_h->h_grp_contct1);
		 printf("l_mt_clientmast_struct_h->h_cln_cntact1 |%s|\n",l_mt_clientmast_struct_h->h_cln_cntact1);
		 printf("l_mt_clientsub_struct_h->h_cln_cntact2 |%s|\n",l_mt_clientsub_struct_h->h_cln_cntact2);
		 printf("l_mt_clientgrp_struct_h->h_grp_contct2 |%s|\n",l_mt_clientgrp_struct_h->h_grp_contct2);
		 printf("l_mt_clientmast_struct_h->h_cln_cntact2 |%s|\n",l_mt_clientmast_struct_h->h_cln_cntact2);
		 printf("l_mt_clientsub_struct_h->h_cln_sebi_ctg |%s|\n",l_mt_clientsub_struct_h->h_cln_sebi_ctg);
		 printf("l_mt_clientgrp_struct_h->h_grp_sebictg |%s|\n",l_mt_clientgrp_struct_h->h_grp_sebictg);
		 printf("l_mt_clientmast_struct_h->h_cln_sebi_ctg |%s|\n",l_mt_clientmast_struct_h->h_cln_sebi_ctg);
		 printf("l_mt_clientsub_struct_h->h_cln_pan |%s|\n",l_mt_clientsub_struct_h->h_cln_pan);
		 printf("l_mt_clientgrp_struct_h->h_grp_pan |%s|\n",l_mt_clientgrp_struct_h->h_grp_pan);
		 printf("l_mt_clientmast_struct_h->h_cln_pan |%s|\n",l_mt_clientmast_struct_h->h_cln_pan);
		 printf("l_mt_clientsub_struct_h->h_cln_def_cr_agency |%s|\n",l_mt_clientsub_struct_h->h_cln_def_cr_agency);
		 printf("l_mt_clientgrp_struct_h->h_grp_agency |%s|\n",l_mt_clientgrp_struct_h->h_grp_agency);
		 printf("l_mt_clientmast_struct_h->h_cln_def_cr_agency |%s|\n",l_mt_clientmast_struct_h->h_cln_def_cr_agency);
		*/	
                 if (strcmp(l_mt_clientsub_struct_h->h_clnt_class,l_mt_clientgrp_struct_h->h_grp_class) == 0)
                 {
                 strcpy(l_mt_clientsub_struct_h->h_clnt_class,l_mt_clientmast_struct_h->h_clnt_class);
                 } 
                    
                 if (strcmp(l_mt_clientsub_struct_h->h_cln_email,l_mt_clientgrp_struct_h->h_grp_email) == 0)
                 { 
                 strcpy(l_mt_clientsub_struct_h->h_cln_email,l_mt_clientmast_struct_h->h_cln_email);
                 } 
                 if (strcmp(l_mt_clientsub_struct_h->h_cln_cntact1,l_mt_clientgrp_struct_h->h_grp_contct1) == 0)
                 { 
                 strcpy(l_mt_clientsub_struct_h->h_cln_cntact1,l_mt_clientmast_struct_h->h_cln_cntact1);
                 } 

                 if (strcmp(l_mt_clientsub_struct_h->h_cln_cntact2,l_mt_clientgrp_struct_h->h_grp_contct2) == 0)
                 { 
                 strcpy(l_mt_clientsub_struct_h->h_cln_cntact2,l_mt_clientmast_struct_h->h_cln_cntact2);
                 } 
                 if (strcmp(l_mt_clientsub_struct_h->h_cln_sebi_ctg,l_mt_clientgrp_struct_h->h_grp_sebictg) == 0)
                 { 
                 strcpy(l_mt_clientsub_struct_h->h_cln_sebi_ctg,l_mt_clientmast_struct_h->h_cln_sebi_ctg);
                 } 
                 if (strcmp(l_mt_clientsub_struct_h->h_cln_pan,l_mt_clientgrp_struct_h->h_grp_pan) == 0) 
                 { 
                 strcpy(l_mt_clientsub_struct_h->h_cln_pan,l_mt_clientmast_struct_h->h_cln_pan);
                 } 
                 if (strcmp(l_mt_clientsub_struct_h->h_cln_def_cr_agency,l_mt_clientgrp_struct_h->h_grp_agency) == 0)
                 {   
                 strcpy(l_mt_clientsub_struct_h->h_cln_def_cr_agency,l_mt_clientmast_struct_h->h_cln_def_cr_agency);
                 } 

		printf("After\n");
		 printf("l_mt_clientsub_struct_h->h_dl_client |%s|\n",l_mt_clientsub_struct_h->h_dl_client);
		 printf("l_mt_clientsub_struct_h->h_clnt_class |%s|\n",l_mt_clientsub_struct_h->h_clnt_class);
		 printf("l_mt_clientsub_struct_h->h_cln_email |%s|\n",l_mt_clientsub_struct_h->h_cln_email);
		 printf("l_mt_clientsub_struct_h->h_cln_cntact1 |%s|\n",l_mt_clientsub_struct_h->h_cln_cntact1);
		 printf("l_mt_clientsub_struct_h->h_cln_cntact2 |%s|\n",l_mt_clientsub_struct_h->h_cln_cntact2);
		 printf("l_mt_clientsub_struct_h->h_cln_sebi_ctg |%s|\n",l_mt_clientsub_struct_h->h_cln_sebi_ctg);
		 printf("l_mt_clientsub_struct_h->h_cln_pan |%s|\n",l_mt_clientsub_struct_h->h_cln_pan);
		 printf("l_mt_clientsub_struct_h->h_cln_def_cr_agency |%s|\n",l_mt_clientsub_struct_h->h_cln_def_cr_agency);

		/*	ISKB-2022	Addition of subclient condition for updation	*/
                 EXEC SQL UPDATE MT_CLIENT
                 SET CLN_TYPE = :l_mt_clientsub_struct_h->h_clnt_class,
                 CLN_EMAIL =:l_mt_clientsub_struct_h->h_cln_email,
                 CLN_CONTACT1 =:l_mt_clientsub_struct_h->h_cln_cntact1,
                 CLN_CONTACT2 =:l_mt_clientsub_struct_h->h_cln_cntact2,
                 CLN_SEBICTG =:l_mt_clientsub_struct_h->h_cln_sebi_ctg,
                 CLN_PAN =:l_mt_clientsub_struct_h->h_cln_pan,
                 CLN_DEF_CR_AGENCY =:l_mt_clientsub_struct_h->h_cln_def_cr_agency
                 WHERE CLN_MASTER = :chr_p_acct
		 AND CLN_CODE = :l_mt_clientsub_struct_h->h_dl_client
                 AND CLN_CODE != :chr_p_acct
                 AND STATUS = 'AA';

                 IS_ANY_ORA_ERROR

                 } 
                 } 
                                                      
                 EXEC SQL CLOSE sub_cursor;

                 IS_ANY_ORA_ERROR
 
                 APL_GOBACK_SUCCESS 

 RETURN_SUCCESS :
 {
            APL_FREE(l_mt_clientmast_struct_h);  
            APL_FREE(l_mt_clientmast_struct_i);  
            APL_FREE(l_mt_clientsub_struct_h);  
            APL_FREE(l_mt_clientsub_struct_i);  
            APL_FREE(l_mt_clientgrp_struct_h);  
            APL_FREE(l_mt_clientgrp_struct_i);  

            APL_IF_DEBUG
                       CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccUpd SUCCESS\n",NULL,NULL);
                       return(APL_SUCCESS);
 }

 RETURN_FAILURE :
 {
            APL_FREE(l_mt_clientmast_struct_h);  
            APL_FREE(l_mt_clientmast_struct_i);  
            APL_FREE(l_mt_clientsub_struct_h);  
            APL_FREE(l_mt_clientsub_struct_i);  
            APL_FREE(l_mt_clientgrp_struct_h);  
            APL_FREE(l_mt_clientgrp_struct_i);  
            APL_IF_DEBUG
                       CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccUpd FAILURE\n",NULL,NULL);
            if (sqlca.sqlcode == 0)
            return(APL_RECS_EXIST);
            else
            return(APL_FAILURE);
 } 
}

int CR_Chk_SebiNoValid(char *chr_sebireg_no,char *chr_cln_code,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
        struct    sqlca sqlca;
        int       int_l_num_rows = 0;

        #ifdef APL_THREADS
                APL_SET_CONTEXT
                EXEC SQL CONTEXT USE :my_ctx_local;
        #endif

        sqlca.sqlcode = 0;

        APL_IF_DEBUG
        {
              CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_SebiNoValid \n",NULL,NULL);
        }

        printf("Val of SebiNo==%s\n",chr_sebireg_no);
		  printf("Val of ClientCode ==|%s|\n",chr_cln_code);

        EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows
        FROM MT_REGDETAILS
        WHERE CLN_SEBI_REG_NO = :chr_sebireg_no
		  AND CLN_CODE !=:chr_cln_code;

        IS_ANY_ORA_ERROR
			  printf("Val of int_Count_SEBI ==|%d|\n",int_l_num_rows);

        if (int_l_num_rows == 0)
		  {
                APL_GOBACK_SUCCESS
        }
        else
           {
				  if (int_l_num_rows > 0)
				  { 
                APL_GOBACK_FAIL
              }
            }

        RETURN_SUCCESS :
        {
           APL_IF_DEBUG
                   CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_SebiNoValid SUCCESS \n",NULL,NULL);
                return(APL_SUCCESS);
       } 
      
        RETURN_FAILURE :
           {
                   APL_IF_DEBUG
                      CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_SebiNoValid FAILURE \n",NULL,NULL);
                   if (sqlca.sqlcode == 0)
                       return(APL_RECS_EXIST);
                   else
                       return(APL_FAILURE);
           }
    } 

int CR_Chk_RbiNoValid(char *chr_rbireg_no,char *chr_cln_code,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
        struct    sqlca sqlca;
        int       int_l_num_rows = 0;

        #ifdef APL_THREADS
                APL_SET_CONTEXT
                EXEC SQL CONTEXT USE :my_ctx_local;
        #endif

        sqlca.sqlcode = 0;

        APL_IF_DEBUG
        {
              CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_RbiNoValid \n",NULL,NULL);
        }

        printf("Val of RbiiNo==%s\n",chr_rbireg_no);
		  printf("Value of ckn_code ==|%s|\n",chr_cln_code);

        EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows
        FROM MT_REGDETAILS
        WHERE CLN_RBI_REG_NO = :chr_rbireg_no
		  AND CLN_CODE !=:chr_cln_code;

        IS_ANY_ORA_ERROR

        printf("Cnt of Row==%d\n",int_l_num_rows);

        if (int_l_num_rows == 0)
        {
                APL_GOBACK_SUCCESS
        }
        else
         {
          if (int_l_num_rows > 0)
			 {
                APL_GOBACK_FAIL
          }
          }

   RETURN_SUCCESS :
        {
           APL_IF_DEBUG
                   CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_RbiNoValid SUCCESS \n",NULL,NULL);
           return(APL_SUCCESS);
        } 

   RETURN_FAILURE :
           {
            APL_IF_DEBUG
                   CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_RbiNoValid FAILURE \n",NULL,NULL);
            if (sqlca.sqlcode == 0)
                return(APL_RECS_EXIST);
                else
                return(APL_FAILURE);
           }
    }
       

 /******************************************************************************************
  *
  *   Function Name            :  CR_Chk_MapInValid	
  *
  *   Description 					:  This Function Accepts Client MapInId 
  *
  *                               and Debug Pointer. Used in  Input/Modify/Reset/Authorise Modes.
  *
  *                               returns Success/Failure depending upon validn.
  *
  *
  *   Pararmeter				         Type				       Mode					Description	
  *   ----------                     ----                  ----              ------------
  *  
  *   chr_mapin_id                   char *                 I               Client MapinId Info
  *
  *   l_debug_info_ptr               DEBUG_INFO_STRUCT_H    I               Debug Info Structure 
  *
  *   Return Values :
  *  
  *   APL_SUCCESS  - SUCCESS
  *
  *	  APL_FAILURE  - FAILURE
  *
  *
  *******************************************************************************************/
/* Kouser - HDFCMT_001 - Client Master Maintenance  - Added New Function */
int CR_Chk_MapInValid(char *chr_mapin_id,char *chr_cln_code,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
        struct    sqlca sqlca;
        int       int_l_num_rows = 0;

        #ifdef APL_THREADS
                APL_SET_CONTEXT
                EXEC SQL CONTEXT USE :my_ctx_local;
        #endif

        sqlca.sqlcode = 0;

        APL_IF_DEBUG
        {   
              CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_MapInValid \n",NULL,NULL);
        }
        printf("IIIValu of Mapinid ==|%s|\n",chr_mapin_id);
         printf("Value of client Code ==|%s|\n",chr_cln_code);

        EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows
        FROM MT_REGDETAILS 
        WHERE CLN_MAPINID = :chr_mapin_id
		  AND CLN_CODE !=:chr_cln_code; 

        IS_ANY_ORA_ERROR

        printf("IIIIVal of int_num val ==|%d|\n",int_l_num_rows);

        if (int_l_num_rows == 0)
        {
                APL_GOBACK_SUCCESS
        }
        else
        { 
        if (int_l_num_rows > 0)
        {
                APL_GOBACK_FAIL
        }
		  }

        RETURN_SUCCESS :
        {
                APL_IF_DEBUG
                        CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_MapInValid SUCCESS \n",NULL,NULL);
                return(APL_SUCCESS);
        }

        RETURN_FAILURE :
        {
                APL_IF_DEBUG
                        CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_MapInValid FAILURE \n",NULL,NULL);
                if (sqlca.sqlcode == 0)
                    return(APL_RECS_EXIST);
                else
                    return(APL_FAILURE);
        }
}

 /******************************************************************************************
  *
  *   Function Name				:  CR_Chk_UccCodeValid 
  *
  *   Description 					:  This Function Accepts Client UccCode Info
  *
  *                               and Debug Pointer. Used in  Input/Modify/Authorise/Reset Modes.
  *
  *                               returns Success/Failure depending upon validn.
  *
  *
  *   Pararmeter				         Type				       Mode					Description	
  *   ----------                     ----                  ----              ------------
  *  
  *   chr_ucc_code                   char *                  I               Client UccCode Info
  *
  *   l_debug_info_ptr               DEBUG_INFO_STRUCT_H    I               Debug Info Structure 
  *
  *   Return Values :
  *  
  *   APL_SUCCESS  - SUCCESS
  *
  *	  APL_FAILURE  - FAILURE
  *
  *
  *******************************************************************************************/
int CR_Chk_UccCodeValid(char *chr_ucc_code,char *chr_cln_code,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
        struct sqlca sqlca;
        int    int_l_num_rows = 0;

        #ifdef APL_THREADS
                APL_SET_CONTEXT
                EXEC SQL CONTEXT USE :my_ctx_local;
        #endif

        sqlca.sqlcode = 0;

        APL_IF_DEBUG
        {
                CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_UccCodeValid \n",NULL,NULL);
        }
     printf("Value of Cline Code ==|%s|\n",chr_cln_code);
	  printf("Value of UccCode ==|%s|\n",chr_ucc_code);

        EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows
        FROM MT_REGDETAILS
        WHERE CLN_UCC_CODE = :chr_ucc_code
		  AND CLN_CODE !=:chr_cln_code;

        IS_ANY_ORA_ERROR

        if (int_l_num_rows == 0)
        {
                APL_GOBACK_SUCCESS
        }
        else
        {
	        if (int_l_num_rows > 0)
		     {		  
			  APL_GOBACK_FAIL
           }
        }

        RETURN_SUCCESS :
        {
                APL_IF_DEBUG
                        CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_UccCodeValid SUCCESS\n",NULL,NULL);
                  return(APL_SUCCESS);
        }

        RETURN_FAILURE :
        {
                APL_IF_DEBUG
                        CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_UccCodeValid FAILURE\n",NULL,NULL);

                if (sqlca.sqlcode == 0)
                        return(APL_RECS_EXIST);
                else
                        return(APL_FAILURE);
        }
}

int CR_GetCurrCode(char *p_curcode,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	strcpy(p_curcode,"INR");
	return (APL_SUCCESS);
} 

 int CR_Rtv_AccSchFldVal(char *chr_p_acct,char *chr_p_msgno_a,char *p_msgoption,int p_schseq_num,char *p_link_val,char *p_field_val,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca			  sqlca;
	char						  chr_h_field_val[40];
	short 					  i_field_val;
	char			  			  chr_l_buf[BUFFER_LEN];

	EXEC SQL VAR chr_h_field_val IS STRING;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Rtv_AccSchFldVal \n",NULL,NULL);
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Account is %s \n",chr_p_acct);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
		
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Field name is %s \n",p_link_val);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
	}
		
	memset(chr_h_field_val,APL_NULL_CHAR,sizeof(chr_h_field_val));
	
	if (strcmp(p_link_val, "ROWID") == 0)
	{
		EXEC SQL SELECT ROWID
		INTO :chr_h_field_val:i_field_val
		FROM MT_SCHDET
		WHERE cln_code = :chr_p_acct
		AND MSG_IDENT_NO = :chr_p_msgno_a
		AND SCHIDEN_NO = :p_schseq_num
		AND (MSG_OPT = :p_msgoption OR :p_msgoption IS NULL )
		FOR UPDATE OF ACCESS_STAMP; 
	}

	if (strcmp(p_link_val, "access_stamp") == 0)
	{
		EXEC SQL SELECT ACCESS_STAMP
		INTO :chr_h_field_val:i_field_val
		FROM MT_SCHDET
		WHERE cln_code = :chr_p_acct
		AND MSG_IDENT_NO = :chr_p_msgno_a
		AND SCHIDEN_NO = :p_schseq_num
                AND (MSG_OPT = :p_msgoption OR :p_msgoption IS NULL);

	}

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"SCHEDULE",APL_NULL_STRING,APL_NULL_STRING)

	if (i_field_val == -1)
		strcpy((char *)p_field_val, APL_NULL_STRING);
	else
		strcpy((char *)p_field_val, chr_h_field_val);

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Rtv_AccSchFldVal SUCCESS \n",NULL,NULL);
		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Rtv_AccSchFldVal FAILURE \n",NULL,NULL);
		return(APL_FAILURE);
	}
}

int CR_Rtv_AccExchFldVal(char *chr_p_acct,int p_exchseq_num,char *p_link_val,char *p_field_val,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
        struct sqlca   			                  sqlca;
        char                                              chr_h_field_val[40];
        short                                             i_field_val;
        char                                              chr_l_buf[BUFFER_LEN];

        EXEC SQL VAR chr_h_field_val IS STRING;

        #ifdef APL_THREADS
                APL_SET_CONTEXT
                EXEC SQL CONTEXT USE :my_ctx_local;
        #endif

        sqlca.sqlcode = 0;

        APL_IF_DEBUG
        {
                CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Rtv_AccExchFldVal \n",NULL,NULL);
                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Account is %s \n",chr_p_acct);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);

                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Field name is %s \n",p_link_val);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
        }

        memset(chr_h_field_val,APL_NULL_CHAR,sizeof(chr_h_field_val));
        
        if (strcmp(p_link_val, "access_stamp") == 0)
        {
                EXEC SQL SELECT access_stamp 
                INTO :chr_h_field_val:i_field_val
                FROM MT_CLI_EXCH_MAP
                WHERE CLN_CODE = :chr_p_acct
                AND CLN_SEQ_NUM = :p_exchseq_num;

        }

       IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"EXCH MAP",APL_NULL_STRING,APL_NULL_STRING)
        if (i_field_val == -1)
                strcpy((char *)p_field_val, APL_NULL_STRING);
        else
                strcpy((char *)p_field_val, chr_h_field_val); 
        	APL_GOBACK_SUCCESS

        RETURN_SUCCESS :
        {
                APL_IF_DEBUG
                        CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Rtv_AccExchFldVal SUCCESS\n",NULL,NULL);
                return(APL_SUCCESS);
        }

        RETURN_FAILURE :
        {
                APL_IF_DEBUG
                        CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Rtv_AccExchFldVal FAILURE\n",NULL,NULL);
                return(APL_FAILURE);
        }
}

int CR_Rtv_AccDepoFldVal(char *chr_p_acct,int p_exchseq_num,char *p_link_val,char *p_field_val,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
        struct sqlca                                      sqlca;
        char                                              chr_h_field_val[40];
        short                                             i_field_val;
        char                                              chr_l_buf[BUFFER_LEN];

        EXEC SQL VAR chr_h_field_val IS STRING;

        #ifdef APL_THREADS
                APL_SET_CONTEXT
                EXEC SQL CONTEXT USE :my_ctx_local;
        #endif

        sqlca.sqlcode = 0;

        APL_IF_DEBUG
        {
                CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Rtv_AccDepoFldVal \n",NULL,NULL);
                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Account is %s \n",chr_p_acct);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);


              
                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Field name is %s \n",p_link_val);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
        }

        memset(chr_h_field_val,APL_NULL_CHAR,sizeof(chr_h_field_val));

        if (strcmp(p_link_val, "access_stamp") == 0)
        {
                EXEC SQL SELECT access_stamp
                INTO :chr_h_field_val:i_field_val
                FROM MT_CLI_DEPO_MAP
                WHERE CLN_CODE = :chr_p_acct
                AND CLN_SEQ_NUM = :p_exchseq_num;
        }
                printf("Value of Seq_Num ===%d\n",p_exchseq_num); 

       IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"DEPO MAP",APL_NULL_STRING,APL_NULL_STRING)
        if (i_field_val == -1)
                strcpy((char *)p_field_val, APL_NULL_STRING);
        else
                strcpy((char *)p_field_val, chr_h_field_val);
                APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
        {
                APL_IF_DEBUG
                        CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Rtv_AccDepoFldVal SUCCESS\n",NULL,NULL);
                return(APL_SUCCESS);
        }

        RETURN_FAILURE :
        {
                APL_IF_DEBUG
                        CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Rtv_AccDepoFldVal FAILURE\n",NULL,NULL);
                return(APL_FAILURE);
        }
}

 int CR_Chk_AccMsgAddr(char *chr_p_acct,char *chr_p_msgno_a,int p_addrseq_num,char *p_link_val,char *p_field_val,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca			  sqlca;
	char						  chr_h_field_val[40];
	short 					  i_field_val;
	char			  			  chr_l_buf[BUFFER_LEN];

	EXEC SQL VAR chr_h_field_val IS STRING;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_AccMsgAddr \n",NULL,NULL);
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Account is %s \n",chr_p_acct);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
		
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Field name is %s \n",p_link_val);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
	}	

	memset(chr_h_field_val,APL_NULL_CHAR,sizeof(chr_h_field_val));
	
	if (strcmp(p_link_val, "ROWID") == 0)
	{
                
		EXEC SQL SELECT ROWID
		INTO :chr_h_field_val:i_field_val
		FROM MT_MSGADDRESS
		WHERE cln_code = :chr_p_acct
		AND MSG_IDENT_NO = :chr_p_msgno_a
		AND CONTACTSEQ = :p_addrseq_num
		FOR UPDATE OF ACCESS_STAMP;
	}
	
	if (strcmp(p_link_val, "access_stamp") == 0)
	{
              
		EXEC SQL SELECT ACCESS_STAMP 
		INTO :chr_h_field_val:i_field_val
		FROM MT_MSGADDRESS
		WHERE cln_code = :chr_p_acct
		AND MSG_IDENT_NO = :chr_p_msgno_a
		AND CONTACTSEQ = :p_addrseq_num;
	}

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"MSG ADDRESS",APL_NULL_STRING,APL_NULL_STRING)

	if (i_field_val == -1)
		strcpy((char *)p_field_val, APL_NULL_STRING);
	else
		strcpy((char *)p_field_val, chr_h_field_val);

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccMsgAddr SUCCESS \n",NULL,NULL);
		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccMsgAddr FAILURE \n",NULL,NULL);
		return(APL_FAILURE);
	}
}

int CR_Chk_AccChldRecVal(MT_REGDETAILS_STRUCT_H *p_mt_regdetails_struct_h,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{ 
   struct sqlca                      sqlca;
        char                                              chr_h_field_val[40];
        short                                             i_field_val;
        char                                              chr_l_buf[BUFFER_LEN];
        int 					          l_clnt_count = 0;		 
   
   EXEC SQL VAR chr_h_field_val IS STRING;

        #ifdef APL_THREADS
                APL_SET_CONTEXT
                EXEC SQL CONTEXT USE :my_ctx_local;
        #endif

        sqlca.sqlcode = 0;


       APL_IF_DEBUG
        {
                CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_AccChldRecVal \n",NULL,NULL);
                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Client Code is %s \n",p_mt_regdetails_struct_h->h_dl_client);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);

                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h->h_mode);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
       
        } 
        sqlca.sqlcode = 0;

	if (strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_MODIFY) == 0)
	{
		EXEC SQL SELECT NVL(COUNT(*),0) INTO :l_clnt_count 
                FROM MT_REGDETAILS
                WHERE CLN_CODE = :p_mt_regdetails_struct_h->h_dl_client;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
	}


        if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL

        APL_GOBACK_SUCCESS

     RETURN_SUCCESS :
        {
                APL_IF_DEBUG
                      CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccChldRecVal SUCCESS \n",NULL,NULL);
                return(APL_SUCCESS);
        }

        RETURN_FAILURE :
        {
                APL_IF_DEBUG
                      CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccChldRecVal FAILURE \n",NULL,NULL);
                return(APL_FAILURE);
        }
}

int CR_Chk_AccEntl(char *chr_p_acct,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca sqlca;
	int    int_l_num_rows = 0;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	sqlca.sqlcode = 0;

	APL_IF_DEBUG
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_AccEntl \n",NULL,NULL);
	 
	

	
	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows
	FROM CAENTITLEMENT
	WHERE client = :chr_p_acct 
	AND STATUS <>'CP'	/*Smita - Changed Col Names - HDFCCA Base Ver*/
	AND STATUS <>'RV';

	IS_ANY_ORA_ERROR

	if (int_l_num_rows == 0)
		APL_GOBACK_SUCCESS
	else
		APL_GOBACK_FAIL

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccEntl SUCCESS \n",NULL,NULL);
		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccEntl FAILURE \n",NULL,NULL);
		if (sqlca.sqlcode == 0)
			return(APL_RECS_EXIST);
		else	
			return(APL_FAILURE);
	}
}




int CR_Chk_AccIVSetup(char *chr_p_acct,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca sqlca;
	int    int_l_num_rows = 0;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	sqlca.sqlcode = 0;

	APL_IF_DEBUG
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_AccIVSetup \n",NULL,NULL);
	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows
	FROM IV_CLIENTSETUP
	WHERE client = :chr_p_acct;

	IS_ANY_ORA_ERROR

	if (int_l_num_rows == 0)
		APL_GOBACK_SUCCESS
	else
		APL_GOBACK_FAIL

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccIVSetup SUCCESS \n",NULL,NULL);
		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccIVSetup FAILURE \n",NULL,NULL);
		if (sqlca.sqlcode == 0)
			return(APL_RECS_EXIST);
		else	
			return(APL_FAILURE);
	}
}



int CR_Chk_AccTrd(char *chr_p_acct,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca sqlca;
	int    int_l_num_rows = 0;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	sqlca.sqlcode = 0;

	APL_IF_DEBUG
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_AccTrd \n",NULL,NULL);

	/* 
	Commented by JC - 16-05-2007
	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows
	FROM DL_DEAL
	WHERE client = :chr_p_acct;
	*/
	/* dl_client = :chr_p_acct;*/

	// Added by JC - 16-05-2007 for UAT Log - 358 -- Start
	// For Closing account whose trades are settled
  /*Query Modified by siva.ganapathi for ISKB_3346 --started*/

     /*EXEC SQL
	SELECT 	COUNT(*) INTO :int_l_num_rows
	FROM	DL_DEAL
	WHERE	CLIENT = :chr_p_acct
		 AND DEAL_STAT NOT IN ('CS');*/
    
          EXEC SQL SELECT COUNT(*) INTO :int_l_num_rows
          FROM DL_DEAL
			 WHERE CLIENT = :chr_p_acct 
			 AND identiy_no NOT IN ( SELECT identiy_no 
				                             FROM DL_DEAL
													  WHERE CLIENT = :chr_p_acct 
													  AND identiy_no like 'LOCCHG%'
													  AND DEAL_STAT = 'AA'
				                             AND DL_CLASS  = '20'
													  AND EXCH_CODE IS NULL
													  AND SETTLEMENT_NO IS NULL )
    		  AND DEAL_STAT != 'CS';                     

       if (sqlca.sqlcode)
       {
		     printf("\n Sql error after fetching count from dl_Deal is %d",sqlca.sqlcode);
		 } 			  


  /*Query Modified by siva.ganapathi for ISKB_3346 --Ended*/

	// Added by JC - 16-05-2007 for UAT Log - 358 -- End

	IS_ANY_ORA_ERROR

	printf("\tJC:::::::::::::Num of rows for not settled trades.....|%d|\n", int_l_num_rows);

	if (int_l_num_rows == 0)
		APL_GOBACK_SUCCESS
	else
		APL_GOBACK_FAIL

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccTrd SUCCESS \n",NULL,NULL);
		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccTrd FAILURE \n",NULL,NULL);
		if (sqlca.sqlcode == 0)
			return(APL_RECS_EXIST);
		else	
			return(APL_FAILURE);
	}
}



int CR_Chk_AccPos(char *chr_p_acct,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca sqlca;
	int    int_l_num_rows = 0;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	sqlca.sqlcode = 0;

	APL_IF_DEBUG
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_AccPos \n",NULL,NULL);

	/* 
	Commented by JC - 16-05-2007
	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows
	FROM DL_SAFEK
	WHERE client = :chr_p_acct;
	*/
	/*dl_client = :chr_p_acct*/

	// Added by JC - 16-05-2007 for UAT Log - 358 -- Start
	// For Closing account whose positions are nil
	EXEC SQL
	SELECT 	COUNT(*) INTO :int_l_num_rows
	FROM 	DL_SAFEK
	WHERE 	CLIENT = :chr_p_acct
		AND SAFEKEEP_POS > 0;
	// Added by JC - 16-05-2007 for UAT Log - 358 -- Start
	IS_ANY_ORA_ERROR

	printf("\tJC:::::::::::::Num of rows for positions existing.....|%d|\n", int_l_num_rows);

	if (int_l_num_rows == 0)
		APL_GOBACK_SUCCESS
	else
		APL_GOBACK_FAIL

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccPos SUCCESS \n",NULL,NULL);
		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccPos FAILURE \n",NULL,NULL);
		if (sqlca.sqlcode == 0)
			return(APL_RECS_EXIST);
		else	
			return(APL_FAILURE);
	}
}



int CR_Chk_AccOrd(char *chr_p_acct,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca sqlca;
	int    int_l_num_rows = 0;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	sqlca.sqlcode = 0;

	APL_IF_DEBUG
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_AccOrd \n",NULL,NULL);
	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows
	FROM OR_ORDERDETAILS
	WHERE client = :chr_p_acct;

	IS_ANY_ORA_ERROR

	if (int_l_num_rows == 0)
		APL_GOBACK_SUCCESS
	else
		APL_GOBACK_FAIL

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccOrd SUCCESS \n",NULL,NULL);
		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccOrd FAILURE \n",NULL,NULL);
		if (sqlca.sqlcode == 0)
			return(APL_RECS_EXIST);
		else	
			return(APL_FAILURE);
	}
}



int CR_Chk_AccDomPtyTrd(char *chr_p_acct,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca sqlca;
	int    int_l_num_rows = 0;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	sqlca.sqlcode = 0;
	
	APL_IF_DEBUG
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_AccDomPtyTrd \n",NULL,NULL);
	
	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows
	FROM DL_DEAL
	WHERE domestic_cpclt = :chr_p_acct;

	IS_ANY_ORA_ERROR

	if (int_l_num_rows == 0)
		APL_GOBACK_SUCCESS
	else
		APL_GOBACK_FAIL

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccDomPtyTrd SUCCESS \n",NULL,NULL);
		
		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccDomPtyTrd FAILURE \n",NULL,NULL);
		
		if (sqlca.sqlcode == 0)
			return(APL_RECS_EXIST);
		else	
			return(APL_FAILURE);
	}
}



int CR_Chk_AccBrkOrd(char *chr_p_acct,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca sqlca;
	int    int_l_num_rows = 0;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	sqlca.sqlcode = 0;

	APL_IF_DEBUG
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_AccBrkOrd \n",NULL,NULL);
	
	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows
	FROM OR_ORDERDETAILS
	WHERE BROKER_CD = :chr_p_acct;

	IS_ANY_ORA_ERROR

	if (int_l_num_rows == 0)
		APL_GOBACK_SUCCESS
	else
		APL_GOBACK_FAIL

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccBrkOrd SUCCESS \n",NULL,NULL);
		
		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccBrkOrd FAILURE \n",NULL,NULL);
		
		if (sqlca.sqlcode == 0)
			return(APL_RECS_EXIST);
		else	
			return(APL_FAILURE);
	}
}



int CR_Chk_AccSchDupl(char *chr_p_acct,char *chr_p_msgno_a,int int_paddrseq_num,char *p_msgoption,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca sqlca;
	int    int_l_num_rows = 0;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	sqlca.sqlcode = 0;

	APL_IF_DEBUG
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_AccSchDupl \n",NULL,NULL);

        printf("Value of MsgNo ==%s\n",chr_p_msgno_a);	
	if (strcmp(chr_p_msgno_a,STMTPENDINGMSGNO))
	{

      EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows
      FROM  MT_SCHDET 
      WHERE CLN_CODE = :chr_p_acct
      AND MSG_IDENT_NO = :chr_p_msgno_a	
      AND SCHIDEN_NO = :int_paddrseq_num;
   
	}
	else
	{
     
      EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows
      FROM MT_SCHDET 
      WHERE CLN_CODE = :chr_p_acct
      AND MSG_IDENT_NO = :chr_p_msgno_a
      AND SCHIDEN_NO = :int_paddrseq_num 
      AND MSG_OPT = :p_msgoption;
	}

      IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_REC_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	if (int_l_num_rows == 0)
		APL_GOBACK_SUCCESS
	else
		APL_GOBACK_FAIL

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccSchDupl SUCCESS \n",NULL,NULL);
		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccSchDupl FAILURE \n",NULL,NULL);
		if (sqlca.sqlcode == 0)
			return(APL_RECS_EXIST);
		else	
			return(APL_FAILURE);
	}
}

int CR_Chk_AccMsgAddrDupl(MT_MSGADDRESS_STRUCT_H *p_mt_msgaddress_struct_h,MT_MSGADDRESS_STRUCT_I *p_mt_msgaddress_struct_i,char p_ind, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca 				sqlca;
	/*MT_MSGADDRESS_STRUCT_H		l_mt_msgaddress_struct_i_h;
	  MT_MSGADDRESS_STRUCT_I		l_mt_msgaddress_struct_i_i;*/
	MT_MSGADDRESS_STRUCT_H		l_mt_msgaddress_func_struct_h;
	MT_MSGADDRESS_STRUCT_I		l_mt_msgaddress_func_struct_i;
	int							int_l_exist_flg = 0;

	EXEC SQL VAR l_mt_msgaddress_func_struct_h.h_swift_addr IS STRING;
	EXEC SQL VAR l_mt_msgaddress_func_struct_h.h_infolex IS STRING;
	EXEC SQL VAR l_mt_msgaddress_func_struct_h.h_gcn_addr IS STRING;
	EXEC SQL VAR l_mt_msgaddress_func_struct_h.h_identify IS STRING;
	EXEC SQL VAR l_mt_msgaddress_func_struct_h.h_fax_addr IS STRING;
	
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	APL_IF_DEBUG
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_AccMsgAddrDupl \n",NULL,NULL);

	if (p_mt_msgaddress_struct_i->i_gcn_addr == -1)
		strcpy(p_mt_msgaddress_struct_h->h_gcn_addr,APL_NULL_STRING);
	if (p_mt_msgaddress_struct_i->i_swift_addr == -1)
		strcpy(p_mt_msgaddress_struct_h->h_swift_addr,APL_NULL_STRING);
	if (p_mt_msgaddress_struct_i->i_infolex == -1)
		strcpy(p_mt_msgaddress_struct_h->h_infolex,APL_NULL_STRING);
	if (p_mt_msgaddress_struct_i->i_identify == -1)
		strcpy(p_mt_msgaddress_struct_h->h_identify,APL_NULL_STRING);

	if (p_ind == 'I')
	{
      /* New Change - RFSNo -HDFCMT_001 - Kouser */	

		EXEC SQL DECLARE MsgAddrRecs_i CURSOR FOR
			SELECT * FROM MT_MSGADDRESS
			WHERE CLN_CODE = :p_mt_msgaddress_struct_h->h_dl_client
			AND   MSG_IDENT_NO   = :p_mt_msgaddress_struct_h->h_msg_ident_no
			AND   SWIFT_TLX_GCN  = :p_mt_msgaddress_struct_h->h_swift_tlx_gcn;


      		EXEC SQL OPEN MsgAddrRecs_i;
	}
	else
	{
		EXEC SQL DECLARE MsgAddrRecs_m CURSOR FOR
       /* Include for Column Name Changes -  RFSNo - HDFCMT_001 - Kouser */

			SELECT * FROM MT_MSGADDRESS
			WHERE cln_code  = :p_mt_msgaddress_struct_h->h_dl_client
			AND   MSG_IDENT_NO   = :p_mt_msgaddress_struct_h->h_msg_ident_no
			AND   SWIFT_TLX_GCN  = :p_mt_msgaddress_struct_h->h_swift_tlx_gcn
			AND	CONTACTSEQ <> :p_mt_msgaddress_struct_h->h_addrsequence_num;

		EXEC SQL OPEN MsgAddrRecs_m;
	}

	IS_ANY_ORA_ERROR

	for(;;)
	{
		memset(&l_mt_msgaddress_func_struct_h,NULL,sizeof(MT_MSGADDRESS_STRUCT_H));
		memset(&l_mt_msgaddress_func_struct_i,NULL,sizeof(MT_MSGADDRESS_STRUCT_I));

		if (p_ind == 'I')
		{
			EXEC SQL FETCH MsgAddrRecs_i INTO :l_mt_msgaddress_func_struct_h:l_mt_msgaddress_func_struct_i;
		}
		else
		{
			EXEC SQL FETCH MsgAddrRecs_m INTO :l_mt_msgaddress_func_struct_h:l_mt_msgaddress_func_struct_i;
		}

		IS_ANY_ORA_ERROR

		if (APL_ZERO_RESULT_SET)
			break;

		if (l_mt_msgaddress_func_struct_i.i_gcn_addr == -1)
			strcpy(l_mt_msgaddress_func_struct_h.h_gcn_addr,APL_NULL_STRING);

		if (l_mt_msgaddress_func_struct_i.i_swift_addr == -1)
			strcpy(l_mt_msgaddress_func_struct_h.h_swift_addr,APL_NULL_STRING);

		if (l_mt_msgaddress_func_struct_i.i_infolex == -1)
			strcpy(l_mt_msgaddress_func_struct_h.h_infolex,APL_NULL_STRING);
		
		if (l_mt_msgaddress_func_struct_i.i_fax_addr == -1)
			strcpy(l_mt_msgaddress_func_struct_h.h_fax_addr,APL_NULL_STRING);

		if (l_mt_msgaddress_func_struct_i.i_identify == -1)
			strcpy(l_mt_msgaddress_func_struct_h.h_identify,APL_NULL_STRING);
	
		if (l_mt_msgaddress_func_struct_i.i_priority_ind == -1)
			strcpy(l_mt_msgaddress_func_struct_h.h_priority_ind,APL_NULL_STRING);

		int_l_exist_flg = 0;

		if ((!strcmp(p_mt_msgaddress_struct_h->h_msg_ident_no, HOLDINGSMSGNO)) ||
			 ((!strcmp(l_mt_msgaddress_func_struct_h.h_priority_ind, p_mt_msgaddress_struct_h->h_priority_ind)) &&
			  ((strcmp(p_mt_msgaddress_struct_h->h_msg_ident_no, SETLPROBMSGNO)) || 
			   (!strcmp(p_mt_msgaddress_struct_h->h_schedule,l_mt_msgaddress_func_struct_h.h_schedule)))))
		{
			if ((!strcmp(p_mt_msgaddress_struct_h->h_msg_ident_no, HOLDINGSMSGNO))|| 
				 (!strcmp(l_mt_msgaddress_func_struct_h.h_identify, p_mt_msgaddress_struct_h->h_identify)))
			{
			if ((l_mt_msgaddress_func_struct_h.h_swift_tlx_gcn[0] == 'S') || (l_mt_msgaddress_func_struct_h.h_swift_tlx_gcn[0] == 'Q'))
				{
				if (!strcmp(l_mt_msgaddress_func_struct_h.h_swift_addr, p_mt_msgaddress_struct_h->h_swift_addr) &&  (!strcmp(l_mt_msgaddress_func_struct_h.h_iso_msg_format,p_mt_msgaddress_struct_h->h_iso_msg_format)))
					{
						int_l_exist_flg = 1;
						break;
					}
				}
				else if (l_mt_msgaddress_func_struct_h.h_swift_tlx_gcn[0] == 'T')
				{
				if ((!strcmp(l_mt_msgaddress_func_struct_h.h_gcn_addr, p_mt_msgaddress_struct_h->h_gcn_addr)) && (!strcmp(l_mt_msgaddress_func_struct_h.h_infolex, p_mt_msgaddress_struct_h->h_infolex)))
					{
						int_l_exist_flg = 1;
						break;
					}
				}
				else if ((l_mt_msgaddress_func_struct_h.h_swift_tlx_gcn[0] == 'C') || (l_mt_msgaddress_func_struct_h.h_swift_tlx_gcn[0] == 'M'))
				{
				if (((!strcmp(l_mt_msgaddress_func_struct_h.h_gcn_addr, p_mt_msgaddress_struct_h->h_gcn_addr)) && (!strcmp(l_mt_msgaddress_func_struct_h.h_swift_addr, p_mt_msgaddress_struct_h->h_swift_addr))) 
							&& (!strcmp(l_mt_msgaddress_func_struct_h.h_iso_msg_format,p_mt_msgaddress_struct_h->h_iso_msg_format)))
					{
						int_l_exist_flg = 1;
						break;
					}
				}
				
				else if (l_mt_msgaddress_func_struct_h.h_swift_tlx_gcn[0] == 'F')
				{
					if (!strcmp(l_mt_msgaddress_func_struct_h.h_fax_addr, p_mt_msgaddress_struct_h->h_fax_addr))
					{
						int_l_exist_flg = 1;
						break;
					}
				}
			}
		}
	}

	if (p_ind == 'I')
	{
		EXEC SQL CLOSE MsgAddrRecs_i;
	}
	else
	{
		EXEC SQL CLOSE MsgAddrRecs_m;
	}

	if ((sqlca.sqlerrd[2] == 0) || (int_l_exist_flg == 0))
		APL_GOBACK_SUCCESS

	if (int_l_exist_flg == 1)
		APL_GOBACK_FAIL	

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccMsgAddrDupl SUCCESS \n",NULL,NULL);
		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_AccMsgAddrDupl FAILURE \n",NULL,NULL);
		return(APL_FAILURE);
	}
}

int CR_Mod_DBCashAcc(DL_CASHACC_STRUCT_H *l_dl_cashacc_struct_ha,char *p_row_id_cltt,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
        struct sqlca           sqlca;
        int                    int_retval;
        DL_CASHACC_STRUCT_I      *l_dl_cashacc_struct_i_ptr = NULL;
        char                   chr_h_sys_access_stamp[APL_DATE_LEN];
        char                   chr_l_buf[BUFFER_LEN];
		  char						 chr_l_ccycode[APL_CCYCODE_LEN] = APL_NULL_STRING;
		  short						i_l_ccycode = 0;

		    
        int                    int_h_count                                     =  0;
        int                    int_typeofcashacc_count                                  =  0;
        int                    int_default_flg                                 =  0;
        int                    int_def_count                                   =  0;
        int                    int_nondef_count                                =  0;
        int                    count                                       =  0;
        char                   chr_mainfuncarea[APL_MAINFUNCAREA_LEN]        =  APL_NULL_STRING;
        char                   chr_l_subfunc_b[APL_MAINFUNCAREA_LEN]             =  APL_NULL_STRING;
        char                   chr_l_fieldval[APL_MAINFUNCAREA_LEN]            =  APL_NULL_STRING;
        char                   chr_h_typeofacc_arr[S_MAX_CASHACC][APL_MAINFUNCAREA_LEN];
        char                   chr_h_defflg_arr[S_MAX_CASHACC][APL_FLAG_LENGTH];
        char                   chr_h_nondefflg_arr[S_MAX_CASHACC][APL_FLAG_LENGTH];
        char                   chr_l_core[APL_FLAG_LENGTH]                                   =  APL_NULL_STRING;
        char                   chr_l_coredefflg[APL_FLAG_LENGTH]                            =  APL_NULL_STRING;
        char                   chr_h_glaccount_exist[APL_CLIENT_LENGTH]     = APL_NULL_STRING;
        char                   chr_l_oth_flg[APL_FLAG_LENGTH] = APL_NULL_STRING;
		  char                   chr_l_cadefflg[2]                               =  APL_NULL_STRING;
        char                   chr_l_billdefflg[2]                             =  APL_NULL_STRING;	

		  char						 chr_l_dummy_def_val[2]									=  APL_NULL_STRING;	
		  char						 chr_l_dummy_nondef_val[2]								=  APL_NULL_STRING;	

        short                  i_typeofaccdef_arr[S_MAX_CASHACC];
        short                  i_typeofaccnondef_arr[S_MAX_CASHACC];
        short                  i_defflg_arr[S_MAX_CASHACC];
        short                  i_nondefflg_arr[S_MAX_CASHACC];
        short                  i_ibbsaccount_exist= 0;
		  short                  cond_exist = 0;

			short						l_ibancond	=0; 
		  
		  EXEC SQL BEGIN DECLARE SECTION;  
         EXEC SQL VAR chr_h_typeofacc_arr IS STRING ;
         EXEC SQL VAR chr_l_oth_flg       IS STRING;
		  EXEC SQL END DECLARE SECTION;  
        #ifdef APL_THREADS
                APL_SET_CONTEXT
                EXEC SQL CONTEXT USE :my_ctx_local;
        #endif

        sqlca.sqlcode = 0;

        APL_IF_DEBUG
        {
                CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Mod_DBCashAcc \n",NULL,p_intl_env_data_struct_h);

                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Account is %s \n",l_dl_cashacc_struct_ha->h_dl_client);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);

                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Currency is %s \n",l_dl_cashacc_struct_ha->h_currencycode);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);

                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"IBBS Account is %s \n",l_dl_cashacc_struct_ha->h_ibbsclient);//AIX - Warnings Removal
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
         
               
                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf," Default Cuyrrency is %s \n",l_dl_cashacc_struct_ha->h_defcurrency_flg);//AIX - Warnings Removal
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);

                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf," IBAN Account is %s \n",l_dl_cashacc_struct_ha->h_ibanclient);//AIX - Warnings Removal
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);

                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf," Addnl Account is %s \n",l_dl_cashacc_struct_ha->h_addnlclient);//AIX - Warnings Removal
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
        }

if (CO_RtvSysDtTime(chr_h_sys_access_stamp, l_debug_info_ptr) != APL_SUCCESS)
                APL_GOBACK_FAIL


        

        l_dl_cashacc_struct_i_ptr = (DL_CASHACC_STRUCT_I *) calloc(1,sizeof(DL_CASHACC_STRUCT_I));
        APL_MALLOC_FAIL(l_dl_cashacc_struct_i_ptr);

        l_dl_cashacc_struct_i_ptr->i_dl_client = 0;
        l_dl_cashacc_struct_i_ptr->i_currencycode = 0;
        l_dl_cashacc_struct_i_ptr->i_ibbsclient = 0;
        l_dl_cashacc_struct_i_ptr->i_defcurrency_flg = 0;

        APL_IF_DEBUG
        {
                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h->h_mode);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);

                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Action is %s \n",p_intl_env_data_struct_h->h_process);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
        }

			

			EXEC SQL SELECT COUNT(*) 
         INTO :int_typeofcashacc_count
			FROM PRO_GSSPLVAL 
			WHERE MAIN_FUN  ='DEF_CASHACC_FLG';
			
			IS_ANY_ORA_ERROR
		
			EXEC SQL SELECT SUB_PROCESS,FIELD_VAL INTO
			:chr_h_typeofacc_arr:i_typeofaccdef_arr,
			:chr_h_defflg_arr:i_defflg_arr
			FROM PRO_GSSPLVAL
			WHERE MAIN_FUN='DEF_CASHACC_FLG'
			ORDER BY SUB_PROCESS;
	
			IS_ANY_ORA_ERROR

			EXEC SQL SELECT FIELD_VAL INTO
			:chr_h_nondefflg_arr:i_nondefflg_arr
			FROM PRO_GSSPLVAL
			WHERE MAIN_FUN='NONDEF_CASHACC_FLG'
			ORDER BY SUB_PROCESS;
	
			IS_ANY_ORA_ERROR

			strcpy(chr_l_core,SETTLEMENT);
			count = 0;
			for(count=0;count<int_typeofcashacc_count;count++)
			{
				if(!strcmp(chr_h_typeofacc_arr[count],chr_l_core))
				{
					strcpy(chr_l_coredefflg,chr_h_defflg_arr[count]);
					break;
				}
			}

			for(int_nondef_count =0 ;int_nondef_count < int_typeofcashacc_count;int_nondef_count++)
			{
				if(strcmp(l_dl_cashacc_struct_ha->h_defcurrency_flg,chr_h_nondefflg_arr[int_nondef_count]) == 0)
				{
					break;
			   }
			}

			for(int_def_count = 0;int_def_count <int_typeofcashacc_count;int_def_count ++)
			{
				if(strcmp(l_dl_cashacc_struct_ha->h_defcurrency_flg,chr_h_defflg_arr[int_def_count]) == 0)
				{
					int_default_flg =1;
					break;
				}
				int_default_flg = 0;
			}

		  if(int_default_flg == 1)
		  {
				strcpy(chr_l_oth_flg,chr_h_nondefflg_arr[int_def_count]);
			}
			else
			{
				strcpy(chr_l_oth_flg,chr_h_defflg_arr[int_nondef_count]);
			}	
			

        if (strcmp(p_intl_env_data_struct_h->h_process, ACTION_NEW_IND) == 0)
        {
        
					EXEC SQL SELECT CURRENCY_CD INTO :chr_l_ccycode:i_l_ccycode FROM DL_CASHCLT
					WHERE GL_ACCOUNT = :l_dl_cashacc_struct_ha->h_ibbsclient
					AND ROWNUM < 2;

					IS_ANY_ORA_ERROR
					if ( sqlca.sqlcode != 1403)
					{	
					if (strcmp(chr_l_ccycode,l_dl_cashacc_struct_ha->h_currencycode) != 0)
						{
							CO_InsertErr(l_debug_info_ptr,ERR_GLACCOUNT_CANT_MORE_1CCY,l_dl_cashacc_struct_ha->h_ibbsclient,l_dl_cashacc_struct_ha->h_currencycode,APL_NULL_STRING,__LINE__,__FILE__);
							APL_GOBACK_FAIL
						}
					}

           EXEC SQL SELECT GL_ACCOUNT
           INTO :chr_h_glaccount_exist:i_ibbsaccount_exist
           FROM DL_CASHCLT
           WHERE CLIENT=:l_dl_cashacc_struct_ha->h_dl_client
           AND GL_ACCOUNT=:l_dl_cashacc_struct_ha->h_ibbsclient
           AND CURRENCY_CD=:l_dl_cashacc_struct_ha->h_currencycode
           AND DEFAULT_CCY IN (:l_dl_cashacc_struct_ha->h_defcurrency_flg,:chr_l_oth_flg);

           if(sqlca.sqlcode != 1403)
           {
	            CO_InsertErr(l_debug_info_ptr,
   	                        ERR_ACCOUNT_EXST,
      	                     l_dl_cashacc_struct_ha->h_dl_client,
         	                  l_dl_cashacc_struct_ha->h_ibbsclient,
            	               l_dl_cashacc_struct_ha->h_currencycode,
               	            __LINE__,
                  	         __FILE__);
            	APL_GOBACK_FAIL
           }	
			
					if(int_default_flg == 1)
               {

                  EXEC SQL UPDATE DL_CASHCLT
                  SET DEFAULT_CCY =:chr_h_nondefflg_arr[int_def_count]
                  WHERE CLIENT=:l_dl_cashacc_struct_ha->h_dl_client
                  AND DEFAULT_CCY IN (:chr_h_nondefflg_arr[int_def_count],:l_dl_cashacc_struct_ha->h_defcurrency_flg);

                  IS_ANY_ORA_ERROR
               }
					else
               {
                  memset(chr_mainfuncarea,APL_NULL_CHAR,APL_MAINFUNCAREA_LEN);
                  memset(chr_l_subfunc_b,APL_NULL_CHAR,APL_MAINFUNCAREA_LEN);
                  strcpy(chr_mainfuncarea,"CASH_ACC_MAINT");
                  strcpy(chr_l_subfunc_b,chr_h_typeofacc_arr[int_nondef_count]);

                  if(CO_Chk_CntryEnabled(chr_mainfuncarea,chr_l_subfunc_b,&cond_exist,l_debug_info_ptr) == APL_FAILURE)
                  {
                     APL_GOBACK_FAIL
                  }
                  else
                  {
                     if(cond_exist >  0)
                     {
                        int_h_count = 0;
                        EXEC SQL SELECT COUNT(*)
                        INTO :int_h_count
                        FROM DL_CASHCLT
                        WHERE CLIENT=:l_dl_cashacc_struct_ha->h_dl_client
                        AND DEFAULT_CCY=:chr_h_defflg_arr[int_nondef_count];

                        if(int_h_count == 0)
                        {
                           CO_InsertErr(l_debug_info_ptr,
                                          ERR_DFLT_ACCOUNT_FIRST,
                                          chr_h_typeofacc_arr[int_nondef_count],
                                          l_dl_cashacc_struct_ha->h_dl_client,
                                          APL_NULL_STRING,
                                          __LINE__,
                                          __FILE__);
                           APL_GOBACK_FAIL
                        }
                     }				
						}
					}	

	
						cond_exist = 0;
                  memset(chr_mainfuncarea,APL_NULL_CHAR,APL_MAINFUNCAREA_LEN);
                  memset(chr_l_subfunc_b,APL_NULL_CHAR,APL_MAINFUNCAREA_LEN);
                  strcpy(chr_mainfuncarea,"REMOTE_TRADE");
                  strcpy(chr_l_subfunc_b,"DUMMY_ACCOUNT");

                  if(CO_Chk_CntryEnabled(chr_mainfuncarea,chr_l_subfunc_b,&cond_exist,l_debug_info_ptr) == APL_FAILURE)
                  {
                     APL_GOBACK_FAIL
                  }
                  else
                  {
							EXEC SQL SELECT FIELD_VAL INTO :chr_l_dummy_def_val FROM PRO_GSSPLVAL
							WHERE MAIN_FUN = 'DEF_CASHACC_FLG' AND SUB_PROCESS = 'D' ;
 	               	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

							EXEC SQL SELECT FIELD_VAL INTO :chr_l_dummy_nondef_val FROM PRO_GSSPLVAL
							WHERE MAIN_FUN = 'NONDEF_CASHACC_FLG' AND SUB_PROCESS = 'D' ;
 	               	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

                     if( cond_exist >  0 && ( !strcmp(l_dl_cashacc_struct_ha->h_defcurrency_flg,chr_l_dummy_def_val) || !strcmp(l_dl_cashacc_struct_ha->h_defcurrency_flg,chr_l_dummy_nondef_val) ) )
						  {	

							EXEC SQL SELECT FIELD_VAL INTO :chr_l_dummy_def_val FROM PRO_GSSPLVAL
							WHERE MAIN_FUN = 'DEF_CASHACC_FLG' AND SUB_PROCESS = 'D' ;
							IS_ANY_ORA_ERROR

							EXEC SQL SELECT FIELD_VAL INTO :chr_l_dummy_nondef_val FROM PRO_GSSPLVAL
							WHERE MAIN_FUN = 'NONDEF_CASHACC_FLG' AND SUB_PROCESS = 'D' ;
							IS_ANY_ORA_ERROR


								int_h_count=0;
                        EXEC SQL SELECT COUNT(*)
                        INTO :int_h_count
                        FROM DL_CASHCLT
                        WHERE CLIENT=:l_dl_cashacc_struct_ha->h_dl_client
                        AND DEFAULT_CCY in ( :chr_l_dummy_def_val , :chr_l_dummy_nondef_val ) ;
						
								IS_ANY_ORA_ERROR

								
                        
								if(int_h_count > 0)
                        {
                           CO_InsertErr(l_debug_info_ptr,
                                          ERR_DMY_CASHACC_EXIST,
                                          APL_NULL_STRING,
                                          APL_NULL_STRING,
                                          APL_NULL_STRING,
                                          __LINE__,
                                          __FILE__);
                           APL_GOBACK_FAIL
                        }

							}
						}

			

         			EXEC SQL INSERT INTO DL_CASHCLT
						VALUES (:l_dl_cashacc_struct_ha);

                IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_REC_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

                if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                     APL_GOBACK_FAIL

					if (strcmp(l_dl_cashacc_struct_ha->h_defcurrency_flg,chr_l_coredefflg)== 0)
					{		
                  EXEC SQL UPDATE MT_CLIENT
                	SET maker = :p_intl_env_data_struct_h->usr,
                      maker_dt = :chr_h_sys_access_stamp,
                      checker = NULL,
                      CHECKER_DT = NULL,
                      access_stamp = :chr_h_sys_access_stamp,
                      CLN_GL_ACCOUNT = :l_dl_cashacc_struct_ha->h_ibbsclient,
							 CLN_currency = :l_dl_cashacc_struct_ha->h_currencycode,
							 STATUS = 'UU'
                	WHERE ROWID = :p_row_id_cltt;
					}
               else
               {
						EXEC SQL UPDATE MT_CLIENT
                	SET maker = :p_intl_env_data_struct_h->usr,
                      maker_dt = :chr_h_sys_access_stamp,
                      checker = NULL,
                      CHECKER_DT = NULL,
                      access_stamp = :chr_h_sys_access_stamp,
							 STATUS = 'UU'
                	WHERE ROWID = :p_row_id_cltt;
					}

 	               IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	                APL_GOBACK_SUCCESS
         }

         else if (strcmp(p_intl_env_data_struct_h->h_process, ACTION_MOD_IND) == 0)
         {

            if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                 APL_GOBACK_FAIL
	
				if(int_default_flg == 1)
				{
					EXEC SQL UPDATE DL_CASHCLT SET DEFAULT_CCY=:chr_h_nondefflg_arr[int_def_count]
					WHERE CLIENT = :l_dl_cashacc_struct_ha->h_dl_client
					AND DEFAULT_CCY IN (:l_dl_cashacc_struct_ha->h_defcurrency_flg,:chr_h_nondefflg_arr[int_def_count]);
					
					IS_ANY_ORA_ERROR
	
    				strcpy(chr_mainfuncarea,"CASH_ACC_MAINT");
    				strcpy(chr_l_subfunc_b,"IBAN_ACC");

    				int_retval = CO_Chk_CntryEnabled(chr_mainfuncarea,chr_l_subfunc_b,&l_ibancond,l_debug_info_ptr);
    				if(int_retval != APL_SUCCESS)
      				APL_GOBACK_FAIL	
		
	 				if(l_ibancond!=0)
	 				{
						if(strcmp(l_dl_cashacc_struct_ha->h_ibanclient,APL_NULL_STRING)!=0)
						{
							if(APL_FAILURE==CR_Chk_IBANAcc(l_dl_cashacc_struct_ha->h_ibanclient,
																	 l_debug_info_ptr))
							{
								CO_InsertErr(l_debug_info_ptr,ERR_INVALID_IBANACC,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
								APL_GOBACK_FAIL
							}
						}
					}
					
   	         EXEC SQL UPDATE DL_CASHCLT
      	      SET DEFAULT_CCY = :l_dl_cashacc_struct_ha->h_defcurrency_flg,
					 IBAN_CLT = :l_dl_cashacc_struct_ha->h_ibanclient,
					 ADDITION_ACC = :l_dl_cashacc_struct_ha->h_addnlclient
         	   WHERE client = :l_dl_cashacc_struct_ha->h_dl_client
           	 	AND GL_ACCOUNT = :l_dl_cashacc_struct_ha->h_ibbsclient
           	 	AND currency_cd = :l_dl_cashacc_struct_ha->h_currencycode
					AND DEFAULT_CCY in (:l_dl_cashacc_struct_ha->h_defcurrency_flg,:chr_h_nondefflg_arr[int_def_count]);
			
            	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

				}
				else
				{

						memset(chr_mainfuncarea,APL_NULL_CHAR,APL_MAINFUNCAREA_LEN);
						memset(chr_l_subfunc_b,APL_NULL_CHAR,APL_MAINFUNCAREA_LEN);
						
						strcpy(chr_mainfuncarea,"CASH_ACC_MAINT");
						strcpy(chr_l_subfunc_b,chr_h_typeofacc_arr[int_nondef_count]);

					 	if(CO_Chk_CntryEnabled(chr_mainfuncarea,chr_l_subfunc_b,&cond_exist,l_debug_info_ptr) == APL_FAILURE)
						{
   			   		APL_GOBACK_FAIL
						}
						else
						{
							if(cond_exist >  0)
							{
								int_h_count = 0;
								EXEC SQL SELECT COUNT(*) 
								INTO :int_h_count
								FROM DL_CASHCLT 
								WHERE CLIENT=:l_dl_cashacc_struct_ha->h_dl_client
								AND DEFAULT_CCY=:chr_h_defflg_arr[int_nondef_count];
		
								if(int_h_count == 0)
								{
									CO_InsertErr(l_debug_info_ptr,
														ERR_DFLTCASHACC_MANDATORY,
														chr_h_typeofacc_arr[int_nondef_count],
														l_dl_cashacc_struct_ha->h_dl_client,
														NULL,
														__LINE__,
														__FILE__);
									APL_GOBACK_FAIL
								}
							}
						}	
					
    				strcpy(chr_mainfuncarea,"CASH_ACC_MAINT");
    				strcpy(chr_l_subfunc_b,"IBAN_ACC");

				   int_retval = CO_Chk_CntryEnabled(chr_mainfuncarea,chr_l_subfunc_b,&l_ibancond,l_debug_info_ptr);
    				if(int_retval != APL_SUCCESS)
      				APL_GOBACK_FAIL	
		
	 				if(l_ibancond!=0)
	 				{
						if(strcmp(l_dl_cashacc_struct_ha->h_ibanclient,APL_NULL_STRING)!=0)
						{
							if(APL_FAILURE==CR_Chk_IBANAcc(l_dl_cashacc_struct_ha->h_ibanclient,
																	 l_debug_info_ptr))
							{
								CO_InsertErr(l_debug_info_ptr,ERR_INVALID_IBANACC,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
								APL_GOBACK_FAIL
							}
						}
					}
					
            		EXEC SQL UPDATE DL_CASHCLT
            		SET DEFAULT_CCY = :l_dl_cashacc_struct_ha->h_defcurrency_flg,
					 		IBAN_CLT = :l_dl_cashacc_struct_ha->h_ibanclient,
							ADDITION_ACC = :l_dl_cashacc_struct_ha->h_addnlclient
            		WHERE client = :l_dl_cashacc_struct_ha->h_dl_client
            		AND GL_ACCOUNT = :l_dl_cashacc_struct_ha->h_ibbsclient
            		AND currency_cd = :l_dl_cashacc_struct_ha->h_currencycode
						AND DEFAULT_CCY in (:l_dl_cashacc_struct_ha->h_defcurrency_flg,:chr_h_defflg_arr[int_nondef_count]);
				
            		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
					}	
            if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                    APL_GOBACK_FAIL

				

              
				   if (!strcmp(l_dl_cashacc_struct_ha->h_defcurrency_flg,chr_l_coredefflg))
               EXEC SQL UPDATE MT_CLIENT
               SET maker = :p_intl_env_data_struct_h->usr,
                   maker_dt = :chr_h_sys_access_stamp,
                   checker = NULL,
                   CHECKER_DT = NULL,
                   access_stamp = :chr_h_sys_access_stamp,
                   CLN_GL_ACCOUNT = :l_dl_cashacc_struct_ha->h_ibbsclient,
						 CLN_currency	= :l_dl_cashacc_struct_ha->h_currencycode,	
						 STATUS = 'UU'
               WHERE ROWID = :p_row_id_cltt;

           
                else
                EXEC SQL UPDATE MT_CLIENT
                SET maker = :p_intl_env_data_struct_h->usr,
                         maker_dt = :chr_h_sys_access_stamp,
                         checker = NULL,
                         CHECKER_DT = NULL,
                         access_stamp = :chr_h_sys_access_stamp,
								 STATUS = 'UU'
                WHERE ROWID = :p_row_id_cltt;

                IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

                APL_GOBACK_SUCCESS
        }

        else if (strcmp(p_intl_env_data_struct_h->h_process, ACTION_DEL_IND) == 0)
        {
                if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                        APL_GOBACK_FAIL
					

					if(int_default_flg == 1)
					{
						memset(chr_mainfuncarea,APL_NULL_CHAR,APL_MAINFUNCAREA_LEN);
						memset(chr_l_subfunc_b,APL_NULL_CHAR,APL_MAINFUNCAREA_LEN);
						
							strcpy(chr_mainfuncarea,"CASH_ACC_MAINT");
							strcpy(chr_l_subfunc_b,chr_h_typeofacc_arr[int_def_count]);

					 	if(CO_Chk_CntryEnabled(chr_mainfuncarea,chr_l_subfunc_b,&cond_exist,l_debug_info_ptr) == APL_FAILURE)
						{
   			   		APL_GOBACK_FAIL
						}
						else
						{
							if(cond_exist >  0)
							{
									CO_InsertErr(l_debug_info_ptr,
														ERR_CANTDEL_DFLTCASHACC,
														"Default Cash Account", 
														l_dl_cashacc_struct_ha->h_dl_client,
														l_dl_cashacc_struct_ha->h_ibbsclient,
														__LINE__,
														__FILE__);
									APL_GOBACK_FAIL
								}
							}
						}
	

					
                EXEC SQL DELETE FROM DL_CASHCLT
                WHERE client = :l_dl_cashacc_struct_ha->h_dl_client
                AND GL_ACCOUNT = :l_dl_cashacc_struct_ha->h_ibbsclient
				    AND DEFAULT_CCY  =:l_dl_cashacc_struct_ha->h_defcurrency_flg;


                IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

                if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
                        APL_GOBACK_FAIL

                EXEC SQL UPDATE MT_CLIENT
                SET maker = :p_intl_env_data_struct_h->usr,
                         maker_dt = :chr_h_sys_access_stamp,
                         checker = NULL,
                         CHECKER_DT = NULL,
                         access_stamp = :chr_h_sys_access_stamp,
								 STATUS = 'UU'
                WHERE ROWID = :p_row_id_cltt;

                IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

                APL_GOBACK_SUCCESS
        }
        else
                APL_GOBACK_FAIL

        RETURN_SUCCESS :
        {
                APL_FREE(l_dl_cashacc_struct_i_ptr)

                APL_IF_DEBUG
                        CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Mod_DBCashAcc SUCCESS \n",NULL,p_intl_env_data_struct_h);

                return(APL_SUCCESS);
        }

        RETURN_FAILURE :
        {
                APL_FREE(l_dl_cashacc_struct_i_ptr)

                APL_IF_DEBUG
                        CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Mod_DBCashAcc FAILURE \n",NULL,p_intl_env_data_struct_h);
     APL_IF_DEBUG
                        CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CDBUpdAcCashFn  FAILURE \n",NULL,p_intl_env_data_struct_h);

                return(APL_FAILURE);
        }
}


int CR_Chk_CashAccDupl(DL_CASHACC_STRUCT_H *l_dl_cashacc_struct_ha,DL_CASHACC_STRUCT_I *l_dl_cashacc_struct_i_ptr,char p_ind, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
        struct sqlca                            sqlca;
        DL_CASHACC_STRUCT_H            l_dl_cashacc_struct_h;
        DL_CASHACC_STRUCT_I            l_dl_cashacc_struct_i;
        int                                                     int_l_exist_flg = 0;

        EXEC SQL VAR l_dl_cashacc_struct_h.h_dl_client IS STRING;
        EXEC SQL VAR l_dl_cashacc_struct_h.h_currencycode IS STRING;
        EXEC SQL VAR l_dl_cashacc_struct_h.h_ibbsclient IS STRING;
        EXEC SQL VAR l_dl_cashacc_struct_h.h_defcurrency_flg  IS STRING;

        #ifdef APL_THREADS
                APL_SET_CONTEXT
                EXEC SQL CONTEXT USE :my_ctx_local;
        #endif

        sqlca.sqlcode = 0;

        APL_IF_DEBUG
             CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Chk_CashAccDupl \n",NULL,NULL);



 

        if (p_ind == 'I')
        {
                EXEC SQL DECLARE AccCashRecs_i CURSOR FOR
                        SELECT * FROM DL_CASHCLT
                        WHERE client = :l_dl_cashacc_struct_ha->h_dl_client
                        AND   GL_ACCOUNT   = :l_dl_cashacc_struct_ha->h_ibbsclient
                        AND currency_cd = :l_dl_cashacc_struct_ha->h_currencycode;

                EXEC SQL OPEN AccCashRecs_i;
        }
        else
        {
                EXEC SQL DECLARE AccCashRecs_m CURSOR FOR
                        SELECT * FROM DL_CASHCLT
                        WHERE client = :l_dl_cashacc_struct_ha->h_dl_client
                        AND   GL_ACCOUNT   = :l_dl_cashacc_struct_ha->h_ibbsclient
                        AND currency_cd = :l_dl_cashacc_struct_ha->h_currencycode;

                EXEC SQL OPEN AccCashRecs_m;
        }

        IS_ANY_ORA_ERROR

        for(;;)
        {
                memset(&l_dl_cashacc_struct_h,NULL,sizeof(DL_CASHACC_STRUCT_H));
                memset(&l_dl_cashacc_struct_i,NULL,sizeof(DL_CASHACC_STRUCT_I));

                if (p_ind == 'I')
                {
                        EXEC SQL FETCH AccCashRecs_i INTO :l_dl_cashacc_struct_h:l_dl_cashacc_struct_i;
                }
                else
                {
                        EXEC SQL FETCH AccCashRecs_m INTO :l_dl_cashacc_struct_h:l_dl_cashacc_struct_i;
                }

                IS_ANY_ORA_ERROR

                if (APL_ZERO_RESULT_SET)
                        break;

                if (l_dl_cashacc_struct_i.i_dl_client == -1)
                        strcpy(l_dl_cashacc_struct_h.h_dl_client,APL_NULL_STRING);
                if (l_dl_cashacc_struct_i.i_ibbsclient == -1)
                        strcpy(l_dl_cashacc_struct_h.h_ibbsclient,APL_NULL_STRING);
                if (l_dl_cashacc_struct_i.i_currencycode == -1)
                        strcpy(l_dl_cashacc_struct_h.h_currencycode,APL_NULL_STRING);
                if (l_dl_cashacc_struct_i.i_defcurrency_flg == -1)
                        strcpy(l_dl_cashacc_struct_h.h_defcurrency_flg,APL_NULL_STRING);



        }

        if (p_ind == 'I')
        {
                EXEC SQL CLOSE AccCashRecs_i;
        }
        else
  {
                EXEC SQL CLOSE AccCashRecs_m;
        }

        if ((sqlca.sqlerrd[2] == 0) || (int_l_exist_flg == 0))
                APL_GOBACK_SUCCESS

        if (int_l_exist_flg == 1)
                APL_GOBACK_FAIL

        RETURN_SUCCESS :
        {
                APL_IF_DEBUG
                        CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_CashAccDupl SUCCESS \n",NULL,NULL);
                return(APL_SUCCESS);
        }

        RETURN_FAILURE :
        {
                APL_IF_DEBUG
                        CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_CashAccDupl FAILURE \n",NULL,NULL);
                return(APL_FAILURE);
        }
}



 int CR_Rtv_CashAccFldVal(char *chr_p_acct,char *p_ibbsclt,char *p_currencycode,char *p_defflg,char *p_nondefflg,char *p_link_val,char *p_field_val,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
        struct sqlca                      sqlca;
        char                                              chr_h_field_val[40];
        short                                     i_field_val;
        char                                              chr_l_buf[BUFFER_LEN];
		  char chr_l_nondefflg[APL_MAINFUNCAREA_LEN] = APL_NULL_STRING;	

        EXEC SQL VAR chr_h_field_val IS STRING;

        #ifdef APL_THREADS
                APL_SET_CONTEXT
                EXEC SQL CONTEXT USE :my_ctx_local;
        #endif

        sqlca.sqlcode = 0;

        APL_IF_DEBUG
        {
                CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CR_Rtv_CashAccFldVal \n",NULL,NULL);
         memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Account is %s \n",chr_p_acct);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);

                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Field name is %s \n",p_link_val);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
        }

        memset(chr_h_field_val,APL_NULL_CHAR,sizeof(chr_h_field_val));

        if (strcmp(p_link_val, "ROWID") == 0)
        {
				
				if(!strlen(p_nondefflg))
            {
               EXEC SQL SELECT FIELD_VAL INTO :chr_l_nondefflg
               FROM PRO_GSSPLVAL WHERE MAIN_FUN IN ('DEF_CASHACC_FLG','NONDEF_CASHACC_FLG')
               AND SUB_PROCESS = (SELECT SUB_PROCESS FROM PRO_GSSPLVAL WHERE  MAIN_FUN IN ('DEF_CASHACC_FLG','NONDEF_CASHACC_FLG') AND FIELD_VAL = :p_defflg)
               AND FIELD_VAL <> :p_defflg;

               IS_ANY_ORA_ERROR

               strcpy(p_nondefflg,chr_l_nondefflg);

            }

                EXEC SQL SELECT ROWID
                INTO :chr_h_field_val:i_field_val
                FROM DL_CASHCLT
                WHERE client = :chr_p_acct
                AND GL_ACCOUNT = :p_ibbsclt
                AND currency_cd = :p_currencycode
                AND DEFAULT_CCY in (:p_defflg,:p_nondefflg)
                FOR UPDATE OF DEFAULT_CCY;

            IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"CCASHACC",APL_NULL_STRING,APL_NULL_STRING)

        } 


        if (i_field_val == -1)
                strcpy((char *)p_field_val, APL_NULL_STRING);
        else
                strcpy((char *)p_field_val, chr_h_field_val);

        APL_GOBACK_SUCCESS

        RETURN_SUCCESS :
        {
                APL_IF_DEBUG
                        CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Rtv_CashAccFldVal SUCCESS \n",NULL,NULL);
                return(APL_SUCCESS);
        }

        RETURN_FAILURE :
        {
                APL_IF_DEBUG
                        CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Rtv_CashAccFldVal FAILURE \n",NULL,NULL);
                return(APL_FAILURE);
        }
}


int CR_Proc_IBANAcc (char 	*p_ibbs_client,
						  char	*p_iban_client,
						  DEBUG_INFO_STRUCT_H 	**l_debug_info_ptr)
{

	char 	h_nation_code[21] =	APL_NULL_STRING;
	char	chr_h_iban_prefix[21]	=	APL_NULL_STRING;
	char	chr_h_nbp_code[21]	=	APL_NULL_STRING;
	char	chr_h_final_iban_account[31]	= 	APL_NULL_STRING;
	int	int_h_checknum						=	0;
	char	chr_h_str_checknum[3]	= 	APL_NULL_STRING;
	char 	chr_h_total_iban_value[51] =	APL_NULL_STRING;

	EXEC SQL VAR h_nation_code 			IS STRING;
	EXEC SQL VAR chr_h_iban_prefix 			IS STRING;
	EXEC SQL VAR chr_h_nbp_code 				IS STRING;
	EXEC SQL VAR chr_h_final_iban_account	IS STRING;
	EXEC SQL VAR chr_h_str_checknum	 		IS STRING;
	EXEC SQL VAR chr_h_total_iban_value 		IS STRING;

	memset(h_nation_code,APL_NULL_CHAR,21);
	memset(chr_h_iban_prefix,APL_NULL_CHAR,21);
	memset(chr_h_nbp_code,APL_NULL_CHAR,21);
	memset(chr_h_final_iban_account,APL_NULL_CHAR,31);
	memset(chr_h_total_iban_value,APL_NULL_CHAR,51);

      EXEC SQL SELECT FIELD_VAL INTO :h_nation_code
      FROM PRO_GSSPLVAL
      WHERE MAIN_FUN='CASH_ACC_MAINT'
      AND SUB_PROCESS = 'POLAND_CODE';

		IS_ANY_ORA_ERROR

      EXEC SQL SELECT FIELD_VAL INTO :chr_h_iban_prefix
      FROM PRO_GSSPLVAL
      WHERE MAIN_FUN='CASH_ACC_MAINT'
      AND SUB_PROCESS ='IBAN_PREFIX';

		IS_ANY_ORA_ERROR

      EXEC SQL SELECT FIELD_VAL INTO :chr_h_nbp_code
      FROM PRO_GSSPLVAL
      WHERE MAIN_FUN='CASH_ACC_MAINT'
      AND SUB_PROCESS = 'NBP_CODE';

		IS_ANY_ORA_ERROR


		strcpy(chr_h_total_iban_value,chr_h_nbp_code);
		strcat(chr_h_total_iban_value,chr_h_iban_prefix);
		strcat(chr_h_total_iban_value,p_ibbs_client);
		strcat(chr_h_total_iban_value,h_nation_code);
		strcat(chr_h_total_iban_value,"00");

		EXEC SQL SELECT (98 - (MOD(to_NUMBER(:chr_h_total_iban_value),97))) INTO :int_h_checknum FROM DUAL;

		IS_ANY_ORA_ERROR

		sprintf(chr_h_str_checknum,"%d",int_h_checknum);

		if(int_h_checknum<10)
		{
			strcpy(chr_h_final_iban_account, "0");
			strcat(chr_h_final_iban_account, chr_h_str_checknum);
			strcat(chr_h_final_iban_account, chr_h_nbp_code);
			strcat(chr_h_final_iban_account, chr_h_iban_prefix);
			strcat(chr_h_final_iban_account, p_ibbs_client);
		}
		else
		{
			strcpy(chr_h_final_iban_account, chr_h_str_checknum);
			strcat(chr_h_final_iban_account, chr_h_nbp_code);
			strcat(chr_h_final_iban_account, chr_h_iban_prefix);
			strcat(chr_h_final_iban_account, p_ibbs_client);
		}

		strcpy(p_iban_client,chr_h_final_iban_account);

        APL_GOBACK_SUCCESS

        RETURN_SUCCESS :
        {
                APL_IF_DEBUG
                 CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Proc_IBANAcc SUCCESS \n",
					   		  NULL,NULL);
                return(APL_SUCCESS);
        }

        RETURN_FAILURE :
        {
                APL_IF_DEBUG
                 CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Proc_IBANAcc FAILURE \n",
							     NULL,NULL);
                return(APL_FAILURE);
        }
}

int CR_Chk_IBANAcc (char	*p_iban_client,
						  DEBUG_INFO_STRUCT_H 	**l_debug_info_ptr)
{
	char 	h_nation_code[21] 				=	APL_NULL_STRING;
	char	chr_h_iban_prefix[21]					=	APL_NULL_STRING;
	int	int_l_remainder							=	0;
	char	chr_h_str_checknum[3]					= 	APL_NULL_STRING;
	char 	chr_h_total_iban_value[51] 			=	APL_NULL_STRING;

	EXEC SQL VAR h_nation_code 			IS STRING;
	EXEC SQL VAR chr_h_iban_prefix 			IS STRING;
	EXEC SQL VAR chr_h_str_checknum	 		IS STRING;
	EXEC SQL VAR chr_h_total_iban_value 		IS STRING;

	memset(h_nation_code,APL_NULL_CHAR,21);
	memset(chr_h_iban_prefix,APL_NULL_CHAR,21);
	memset(chr_h_total_iban_value,APL_NULL_CHAR,51);
	
   EXEC SQL SELECT FIELD_VAL INTO :h_nation_code
   FROM PRO_GSSPLVAL
   WHERE MAIN_FUN='CASH_ACC_MAINT'
   AND SUB_PROCESS = 'POLAND_CODE';

	IS_ANY_ORA_ERROR

	strncpy(chr_h_str_checknum,p_iban_client,2);
	strcat(chr_h_str_checknum,APL_NULL_STRING);
	strcpy(chr_h_total_iban_value,p_iban_client+2);
	strcat(chr_h_total_iban_value,h_nation_code);
	strcat(chr_h_total_iban_value,chr_h_str_checknum);


	EXEC SQL  SELECT mod(to_number(:chr_h_total_iban_value),97) INTO :int_l_remainder FROM DUAL;
	
	IS_ANY_ORA_ERROR

	if(int_l_remainder==1)
	{
		APL_GOBACK_SUCCESS
	}
	else
	{
		APL_GOBACK_FAIL
	}
	
        RETURN_SUCCESS :
        {
                APL_IF_DEBUG
                 CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_IBANAcc SUCCESS \n",
					   		  NULL,NULL);
                return(APL_SUCCESS);
        }

        RETURN_FAILURE :
        {
                APL_IF_DEBUG
                 CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_IBANAcc FAILURE \n",
							     NULL,NULL);
                return(APL_FAILURE);
        }
}
