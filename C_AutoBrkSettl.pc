







#include "CO_HostStructdef.h"
#include "Intellect_Common.h"
#include "DL_Interface.h"
#include "DL_AutoSetl.h"
EXEC SQL INCLUDE SQLCA.H;




int CDBAuBrkConUpldFn_newfmt(	char *p_dt,
						char *chr_p_filename_a,
						char **argv,
						char *p_uploaddir,
						FILE *p_logfile,
						char *chr_p_indicator,
						INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   
DL_AUTOBRKSETTL_STRUCT_H l_dl_autobrksettl_struct_h;	
char **temp;
/* Added by kotubabu for Linux Migration -Start*/
#ifdef OS_LINUX
FILE * l_brkfile = NULL;
#else
FILE * l_brkfile = APL_OUT_FILE;
#endif
/* Added by kotubabu  for Linux Migration -END*/
int int_num;
char chr_l_filename_c[14] = APL_NULL_STRING;
char chr_l_sys_date[APL_DATE_LEN] = APL_NULL_STRING;
char chr_l_brkfile_name[FILE_NAME_LEN] = APL_NULL_STRING;
char int_l_temp[17] = APL_NULL_STRING;

char chr_l_locncode_c[4]=APL_NULL_STRING;
char chr_l_str[9]=APL_NULL_STRING;
int int_l_err_len=0;
int int_l_error_flag=0;
int int_reccount=0;
int int_l_reccount=0;
int i=0;
int int_imax=0;
struct sqlca sqlca;

EXEC SQL BEGIN DECLARE SECTION;

int int_l_count=0;
int int_l_exists=0;
int int_l_repflg = 0;
int int_l_diff=0;
double	l_h_safekeep_pos=0;
double l_h_val_rec=0;
double l_h_val_del =0;
double l_posn =0;
short l_i_instr_code=0;
short l_i_safek=0;
short l_i_confrec=0;
short l_i_confdel=0;
short l_i_locncode = 0; 
char chr_l_buf[BUFF_SIZE]; 
char chr_l_sysdatetime_A[20];
char chr_l_linebuf[APL_MAXLINE_SIZE];
char chr_l_instrcode_a[APL_INSTRUMENTCODE_LEN];
char chr_l_trdt_a[APL_DATE_LEN];
char chr_l_trdt1[APL_DATE_LEN];
char chr_l_settldt[APL_DATE_LEN];
char chr_l_settldt1[APL_DATE_LEN];

char chr_l_temp_isin_in[14] = APL_NULL_STRING;
char chr_l_temp_isin_ou[14] = APL_NULL_STRING;
char chr_l_temp_isin_ou1[14] = APL_NULL_STRING;
char chr_l_temp_trcode_in[3] = APL_NULL_STRING;
char chr_l_temp_trcode_ou[3] = APL_NULL_STRING;
char chr_l_temp_ccy_in[5] = APL_NULL_STRING;
char chr_l_temp_ccy_ou[5] = APL_NULL_STRING;

   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;

char chr_l_tmptrcode[2] = APL_NULL_STRING;
char chr_l_typeofacc[2] = APL_NULL_STRING;
EXEC SQL END DECLARE SECTION;

EXEC SQL VAR chr_l_buf 			IS STRING;
EXEC SQL VAR chr_l_sys_date 	IS STRING;
EXEC SQL VAR chr_l_sysdatetime_A IS STRING;
EXEC SQL VAR chr_l_instrcode_a 		IS STRING;
EXEC SQL VAR chr_l_trdt_a 			IS STRING;
EXEC SQL VAR chr_l_trdt1			IS STRING;
EXEC SQL VAR chr_l_settldt 		IS STRING;
EXEC SQL VAR chr_l_settldt1		IS STRING;
EXEC SQL VAR chr_l_locncode_c		IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_ord_no  IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_domestic_cp IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_dealcd IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_dlt IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_instr_isin IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_dl_client IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_ccy IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_settldate IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_dl_client IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_auto_setl_dt IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_file_name IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_systemdt IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_status_ind 	IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_failreas IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_proc_ind IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_status_proc IS STRING;

EXEC SQL VAR chr_l_tmptrcode is STRING;
EXEC SQL VAR chr_l_typeofacc is STRING;
EXEC SQL VAR chr_g_restart_data is string;

sqlca.sqlcode = 0;

EXEC SQL DECLARE lock_cursor1 CURSOR FOR
		SELECT * FROM DL_AUTOBRKSETTL
		WHERE NAMEOF_FILE=:chr_p_filename_a
		AND PROC_IND='B'
		FOR UPDATE NOWAIT;



memset(&l_dl_autobrksettl_struct_h,NULL,sizeof(DL_AUTOBRKSETTL_STRUCT_H));



   fprintf(p_logfile, "Entered Function CDBAuBrkConUpldFn_newfmt\n");
   fprintf(p_logfile, "The Date for Broker Confirmation File Upload is : %s\n", p_dt);



   strcat(p_uploaddir, chr_p_filename_a);

	
   l_brkfile = fopen(p_uploaddir, "r");

	

	if (l_brkfile == NULL)
	{
  		if (CO_InsertErr
  				(l_debug_info_ptr,
  				ERR_FDFILE_NOTVALID, 
  				APL_NULL_STRING,
  				APL_NULL_STRING,
  				APL_NULL_STRING,
  				__LINE__,
  				__FILE__
  				) != APL_SUCCESS)
  				APL_GOBACK_FAIL
		
  		APL_GOBACK_FAIL
	}

   

  EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
     FROM SYS_BATCHPROC
     WHERE PROCESS_NAME=:argv[0]
     AND   PROC_INIT=:argv[1]
     AND   STARTDATE=:argv[2]
     AND   STATUS='started'
     FOR UPDATE OF PROCESSING_STATUS,STATUS;


  if(APL_ZERO_RESULT_SET)
   {
      CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc\n",NULL,NULL);
      APL_GOBACK_FAIL
   }

  IS_ANY_ORA_ERROR

      fprintf(p_logfile, "CDBAuBrkConUpldFn_newfmt successfully locked the batch record\n");


 if ( CO_RtvSysParams(l_debug_info_ptr) == APL_FAILURE)
     	 APL_GOBACK_FAIL



		
		if(strcmp(chr_p_indicator,"UB") == 0)
      {
			fprintf(p_logfile, "Scanning the brk confirmation h_file\n");
			
			EXEC SQL OPEN lock_cursor1;
		
			IS_ANY_ORA_ERROR  	

			if(APL_ZERO_RESULT_SET); 

			if(APL_FAILURE == CO_RtvSysDt(chr_l_sys_date,l_debug_info_ptr))
			{
				CO_ProcMonitor(p_logfile,"E:Failed to get system chr_date\n",l_debug_info_ptr,NULL);
				APL_GOBACK_FAIL
			}

			EXEC SQL DELETE DL_AUTOBRKSETTL
			WHERE NAMEOF_FILE=:chr_p_filename_a
			AND	PROC_IND='B'		
			AND	( STATUS_PROC <> 'R' AND NOT(STATUS_PROC =  'D' AND STATUS = 'MAT')) ;	

			IS_ANY_ORA_ERROR

			
			i =0;	
			while(!feof(l_brkfile))
			{
				memset(chr_l_buf,APL_NULL_CHAR,BUFF_SIZE);
				memset(chr_l_sysdatetime_A,APL_NULL_CHAR,20); 
				memset(chr_l_instrcode_a,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN); 
				memset(chr_l_trdt_a,APL_NULL_CHAR,APL_DATE_LEN); 
				memset(chr_l_trdt1,APL_NULL_CHAR,APL_DATE_LEN); 
				memset(chr_l_settldt,APL_NULL_CHAR,APL_DATE_LEN); 
				memset(chr_l_settldt1,APL_NULL_CHAR,APL_DATE_LEN); 
				
				memset(chr_l_locncode_c,APL_NULL_CHAR,4);

				int_l_error_flag = 0;
				int_l_err_len = 0;
				int_l_reccount++;
				int_l_exists=0;
				int_l_repflg=0;
				
				int_reccount++;
				memset(chr_l_linebuf,APL_NULL_CHAR,APL_MAXLINE_SIZE); 
				memset(&l_dl_autobrksettl_struct_h,NULL,sizeof(DL_AUTOBRKSETTL_STRUCT_H));
				fscanf(l_brkfile,"%[^\n]\n",chr_l_linebuf);
				
				strcat(chr_l_linebuf,",");
				strcat(chr_l_linebuf,"\0");
				
				fprintf(p_logfile,"\n\n##################################################################################################################\n\n");
				fprintf(p_logfile,"\nRecord scanned is : \n%s\n\n",chr_l_linebuf);
				
				if (APL_FAILURE == CO_SplitStr( chr_l_linebuf,
																';',
																&int_num,
																&temp ))
				{
					CO_ProcMonitor(p_logfile, "E:String split processtion failed\n",l_debug_info_ptr,p_intl_envdatastruct_h);
					APL_GOBACK_FAIL
				}
				 
					
				if(int_num < 21) 
				{
					fprintf(p_logfile,"\nSome fields are missing in the record\n %sRecord No. %d Filename %s\n",int_reccount,chr_p_filename_a,chr_l_linebuf);
					l_dl_autobrksettl_struct_h.h_rec_no=int_reccount;
					strcpy(l_dl_autobrksettl_struct_h.h_ord_no,"\0");
					strcpy(l_dl_autobrksettl_struct_h.h_domestic_cp,"\0");
					strcpy(l_dl_autobrksettl_struct_h.h_dealcd,"\0");
					l_dl_autobrksettl_struct_h.h_pr = 0;
					strcpy(l_dl_autobrksettl_struct_h.h_dlt,"\0");
					strcpy(l_dl_autobrksettl_struct_h.h_instr_isin,"\0");
					strcpy(l_dl_autobrksettl_struct_h.h_dl_client,"\0");
					l_dl_autobrksettl_struct_h.h_qty = 0;
					l_dl_autobrksettl_struct_h.h_dl_val= 0;
					strcpy(l_dl_autobrksettl_struct_h.h_ccy,"\0");
					strcpy(l_dl_autobrksettl_struct_h.h_settldate,"\0");
					l_dl_autobrksettl_struct_h.h_brokercomm = 0;
					strcpy(l_dl_autobrksettl_struct_h.h_dl_client,"\0");
					strcpy(l_dl_autobrksettl_struct_h.h_auto_setl_dt,"\0");
					strcpy(l_dl_autobrksettl_struct_h.h_file_name,chr_p_filename_a);
					strcpy(l_dl_autobrksettl_struct_h.h_systemdt,chr_l_sys_date);
					strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
					strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Fields missing in the record");
						
					strcpy(l_dl_autobrksettl_struct_h.h_proc_ind,"B");
					strcpy(l_dl_autobrksettl_struct_h.h_status_proc,"P");
				}
				else
				{
					
					l_dl_autobrksettl_struct_h.h_rec_no=int_reccount;

					
					if(strlen(temp[0]) > 12)
					{
						strncpy(l_dl_autobrksettl_struct_h.h_ord_no,temp[0],12);
						strcat(l_dl_autobrksettl_struct_h.h_ord_no,"\0");
						strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Field length of Order No exceded");
						strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
						int_l_err_len=1;
					}
					else
					{
					
						if(strlen(temp[0]) == 10)
							strcpy(l_dl_autobrksettl_struct_h.h_ord_no,"00");
						else if(strlen(temp[0]) == 11)
							strcpy(l_dl_autobrksettl_struct_h.h_ord_no,"0");

						if(strlen(temp[0]) == 12)
							strcpy(l_dl_autobrksettl_struct_h.h_ord_no,temp[0]);
						else
							strcat(l_dl_autobrksettl_struct_h.h_ord_no,temp[0]);
					}
					
						  

					 if( temp[1][0] != '0' )
					 {
						strncpy(l_dl_autobrksettl_struct_h.h_domestic_cp,temp[1],3);
				    }
					 else
					 {
						l_dl_autobrksettl_struct_h.h_domestic_cp[0]=temp[1][1];
						l_dl_autobrksettl_struct_h.h_domestic_cp[1]=temp[1][2];
						l_dl_autobrksettl_struct_h.h_domestic_cp[2]=temp[1][3];
					 }
						l_dl_autobrksettl_struct_h.h_domestic_cp[3]='\0';
						strcat(l_dl_autobrksettl_struct_h.h_domestic_cp," 01");

						 

					

						if( strcmp(temp[3],"0") == 0 )
							strcpy(l_dl_autobrksettl_struct_h.h_dealcd,"1");  
						else if( strcmp(temp[3],"1") == 0 )
							strcpy(l_dl_autobrksettl_struct_h.h_dealcd,"2");  
						else
						{
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Incorrect Trcode");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							int_l_err_len=1;
						}

					

					

					strcpy(chr_l_trdt1,temp[2]);	
					EXEC SQL select to_char( to_date(:chr_l_trdt1,'yyyymmdd') , 'dd/chr_mm/chr_yyyy hh:mi:ss')
		        	into :chr_l_trdt_a from dual ;
					IS_ANY_ORA_ERROR

					strcpy(l_dl_autobrksettl_struct_h.h_dlt,chr_l_trdt_a);
				
					

					strcpy(l_dl_autobrksettl_struct_h.h_instr_isin,temp[4]);

					
					if(strlen(temp[14]) > 8 )
					{
						strncpy(l_dl_autobrksettl_struct_h.h_dl_client,temp[14],8);
						strcat(l_dl_autobrksettl_struct_h.h_dl_client,"\0");
						if(!int_l_err_len)
						{
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Field length of Client exceded");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							int_l_err_len=1;
						}
					}
					else
						strcpy(l_dl_autobrksettl_struct_h.h_dl_client,temp[14]);

				   if(strlen(temp[14])==8)
					{
						strncpy(int_l_temp,temp[14],4);
						int_l_temp[4]='\0';
					}
					else if(strlen(temp[14])==7)
					{
						 strncpy(int_l_temp,temp[14],3);
						 temp[3]='\0';
					}

					if(( (strcmp(int_l_temp,"0924") != 0) && (strlen(temp[14])==8) ) || ( (strcmp(int_l_temp,"924") !=0) && (strlen(temp[14]) ==7)) )
					{
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Incorrect Client A/c");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							int_l_err_len=1;
					}

					

					strcpy(chr_l_settldt1,temp[13]);	
					EXEC SQL select to_char( to_date(:chr_l_settldt1,'yyyymmdd') , 'dd/chr_mm/chr_yyyy hh:mi:ss')
		        	into :chr_l_settldt from dual ;
					IS_ANY_ORA_ERROR

					strcpy(l_dl_autobrksettl_struct_h.h_settldate,chr_l_settldt);

					

					if(strlen(temp[15]) > 12)
					{
						strncpy(l_dl_autobrksettl_struct_h.h_dl_client,temp[15],12);
						strcat(l_dl_autobrksettl_struct_h.h_dl_client,"\0");
						if(!int_l_err_len)
						{
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Field length of client exceded");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							int_l_err_len=1;
						}
					}
					else
						strcpy(l_dl_autobrksettl_struct_h.h_dl_client,temp[15]);

					   

					

					

					

					
					
					if(strlen(temp[8]) > 16)
					{
						strcpy(int_l_temp,APL_NULL_STRING);
						strncpy(int_l_temp,temp[8],16);
						strcat(int_l_temp,"\0");
						for(i=0;i<strlen(int_l_temp);i++)
						{
							if(isdigit(int_l_temp[i]))
								continue;
							else if(int_l_temp[i] == '.')
								continue;
							else
							{
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Broker commission contains non-numeric characters");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								l_dl_autobrksettl_struct_h.h_brokercomm = 0;
								int_l_err_len=1;
								break;
							}
						}
						if(!int_l_err_len)
							l_dl_autobrksettl_struct_h.h_brokercomm = atof(int_l_temp);
						if(!int_l_err_len)
						{
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Field length of Broker Commission exceded");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							int_l_err_len=1;
						}
					}
					else
					{
						if(strlen(temp[8]) == 0)
						{
							l_dl_autobrksettl_struct_h.h_brokercomm = 0;
							if(!int_l_err_len)
							{
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Broker Commission chr_value null in file");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								int_l_err_len=1;
							}
						}
						else
						{
							strcpy(int_l_temp,APL_NULL_STRING);
							strcpy(int_l_temp,temp[8]);
							for(i=0;i<strlen(int_l_temp);i++)
							{
								if(isdigit(int_l_temp[i]))
									continue;
								else if(int_l_temp[i] == '.')
									continue;
								else
								{
									strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Broker commission contains non-numeric characters");
									strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
									l_dl_autobrksettl_struct_h.h_brokercomm = 0;
									int_l_err_len=1;
									break;
								}
							}
							if(!int_l_err_len)
							{
								strcpy(int_l_temp,APL_NULL_STRING);
								strcpy(int_l_temp,temp[8]);
								l_dl_autobrksettl_struct_h.h_brokercomm = atof(int_l_temp);
							}
						}
					}

					 

					if(strlen(temp[5]) > 20)
					{
						strcpy(int_l_temp,APL_NULL_STRING);
						strcpy(int_l_temp,temp[5]);
						strcat(int_l_temp,"\0");
						for(i=0;i<strlen(int_l_temp);i++)
						{
							if(isdigit(int_l_temp[i]))
								continue;
							else if(int_l_temp[i] == '.')
								continue;
							else
							{
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Price contains non-numeric characters");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								l_dl_autobrksettl_struct_h.h_pr = 0;
								int_l_err_len=1;
								break;
							}
						}
						if(!int_l_err_len)
							l_dl_autobrksettl_struct_h.h_pr = atof(int_l_temp);

						if(!int_l_err_len)
						{
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Field length of Price exceded");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							int_l_err_len=1;
						}
					}
					else
					{
						if(strlen(temp[5]) == 0)
						{
							l_dl_autobrksettl_struct_h.h_pr = 0;
							if(!int_l_err_len)
							{
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Price is null in file");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								int_l_err_len=1;
							}
						}
						else
						{
							strcpy(int_l_temp,APL_NULL_STRING);
							strcpy(int_l_temp,temp[5]);
							for(i=0;i<strlen(int_l_temp);i++)
							{
								if(isdigit(int_l_temp[i]))
									continue;
								else if(int_l_temp[i] == '.')
									continue;
								else
								{
									strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Price contains non-numeric characters");
									strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
									l_dl_autobrksettl_struct_h.h_pr = 0;
									int_l_err_len=1;
									break;
								}
							}
							if(!int_l_err_len)
							{
								strcpy(int_l_temp,APL_NULL_STRING);
								strcpy(int_l_temp,temp[5]);
								l_dl_autobrksettl_struct_h.h_pr = atof(int_l_temp);
							}
						}
					}
					
					
					if(strlen(temp[7]) > 16)
					{
						strcpy(int_l_temp,APL_NULL_STRING);
						strncpy(int_l_temp,temp[7],16);
						strcat(int_l_temp,"\0");
						for(i=0;i<strlen(int_l_temp);i++)
						{
							if(isdigit(int_l_temp[i]))
								continue;
							else if(int_l_temp[i] == '.')
								continue;
							else
							{
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Counter Value contains non-numeric characters");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								l_dl_autobrksettl_struct_h.h_dl_val = 0;
								int_l_err_len=1;
								break;
							}
						}
						if(!int_l_err_len)
							l_dl_autobrksettl_struct_h.h_dl_val = atof(int_l_temp);
						if(!int_l_err_len)
						{
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Field length of Counter Value exceded");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							int_l_err_len=1;
						}
					}
					else
					{
						if(strlen(temp[7]) == 0)
						{
							l_dl_autobrksettl_struct_h.h_dl_val = 0;
							if(!int_l_err_len)
							{
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Counter chr_value is null in file");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								int_l_err_len=1;
							}
						}
						else
						{
							strcpy(int_l_temp,APL_NULL_STRING);
							strcpy(int_l_temp,temp[7]);
							for(i=0;i<strlen(int_l_temp);i++)
							{
								if(isdigit(int_l_temp[i]))
									continue;
								else if(int_l_temp[i] == '.')
									continue;
								else
								{
									strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Counter Value contains non-numeric characters");
									strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
									l_dl_autobrksettl_struct_h.h_dl_val = 0;
									int_l_err_len=1;
									break;
								}
							}
							if(!int_l_err_len)
							{
								strcpy(int_l_temp,APL_NULL_STRING);
								strcpy(int_l_temp,temp[7]);
								l_dl_autobrksettl_struct_h.h_dl_val = atof(int_l_temp);
							}
						}
					}
					

					strcpy(l_dl_autobrksettl_struct_h.h_ccy,temp[10]);

					

					if(strlen(temp[6]) > 11)
					{
						strcpy(int_l_temp,APL_NULL_STRING);
						strncpy(int_l_temp,temp[6],11);
						strcat(int_l_temp,"\0");
						for(i=0;i<strlen(int_l_temp);i++)
						{
							if(isdigit(int_l_temp[i]))
								continue;
							else if(int_l_temp[i] == '.')
								continue;
							else
							{
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Quantity contains non-numeric characters");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								l_dl_autobrksettl_struct_h.h_qty = 0;
								int_l_err_len=1;
								break;
							}
						}
						if(!int_l_err_len)
							l_dl_autobrksettl_struct_h.h_qty = atof(int_l_temp);
						if(!int_l_err_len)
						{
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Field length of Quantity exceded");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							int_l_err_len=1;
						}
					}
					else
					{
						if(strlen(temp[6]) == 0)
						{
							l_dl_autobrksettl_struct_h.h_qty = 0;
							if(!int_l_err_len)
							{
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Qty chr_value null in file");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								int_l_err_len=1;
							}
						}
						else
						{
							strcpy(int_l_temp,APL_NULL_STRING);
							strcpy(int_l_temp,temp[6]);
							for(i=0;i<strlen(int_l_temp);i++)
							{
								if(isdigit(int_l_temp[i]))
									continue;
								else if(int_l_temp[i] == '.')
									continue;
								else
								{
									strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Quantity contains non-numeric characters");
									strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
									l_dl_autobrksettl_struct_h.h_qty = 0;
									int_l_err_len=1;
									break;
								}
							}
							if(!int_l_err_len)
							{
								strcpy(int_l_temp,APL_NULL_STRING);
								strcpy(int_l_temp,temp[6]);
								l_dl_autobrksettl_struct_h.h_qty = atof(int_l_temp);
							}
						}
					}

					
					strcpy(l_dl_autobrksettl_struct_h.h_auto_setl_dt,"\0");
					strcpy(l_dl_autobrksettl_struct_h.h_file_name,chr_p_filename_a);
					strcpy(l_dl_autobrksettl_struct_h.h_systemdt,chr_l_sys_date);
							
					if(int_l_err_len == 0)
					{
						

							
						 
				
						 memset(int_l_temp,APL_NULL_CHAR,sizeof(int_l_temp));	

						 if(strlen(temp[16])==8)
						 {
						 		strncpy(int_l_temp,temp[16],4);
						 		temp[4]='\0';
						 }
						 else if(strlen(temp[16])==7)
						 {
						 		strncpy(int_l_temp,temp[16],3);
						 		temp[3]='\0';
						 }

							fprintf(p_logfile,"temp[16]=(%s), int_l_temp=(%s)\n",temp[16],int_l_temp);

                   
                   
							if( (strlen(temp[16])==8) && (strcmp(int_l_temp,"0924") != 0 ) || (strlen(temp[16])==7) && (strcmp(int_l_temp,"924") != 0 ) )
							{
							  if( (strlen(temp[16])==7) )
							  {
				 				strcpy(chr_l_str,temp[16]);
							  }
							  else
							  {
				 				memset(chr_l_str,APL_NULL_CHAR,sizeof(chr_l_str));
				 				if (strstr(temp[16],"0")!=NULL)
									strcpy(chr_l_str,strstr(temp[16],"0") + 1);
								else
									strcpy(chr_l_str,APL_NULL_STRING);
							  }

                      if (APL_SUCCESS == CO_Chk_AccValid(chr_l_str,'Y',APL_NULL_CHAR,APL_NULL_CHAR,APL_NULL_CHAR,'Y',APL_NULL_CHAR,APL_NULL_CHAR,'N', l_debug_info_ptr) )
                       {
                         strcpy(l_dl_autobrksettl_struct_h.h_failreas, chr_l_str);
								 strcat(l_dl_autobrksettl_struct_h.h_failreas,";");
								 strcat(l_dl_autobrksettl_struct_h.h_failreas,"\0");
             	          strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"\0");
                   		
								 if( strlen(temp[17]) )
								 {
										strcat(l_dl_autobrksettl_struct_h.h_failreas,temp[17]);
										strcat(l_dl_autobrksettl_struct_h.h_failreas,";");
										strcat(l_dl_autobrksettl_struct_h.h_failreas,"\0");
                          }
                       }
                     else
                       {               
							   strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Instructing Party A/C Not Valid");
						 	   strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							   int_l_error_flag = 1;
                       }
                    }
						 else if( (strlen(temp[16])==8) && (strcmp(int_l_temp,"0924") == 0 ) || (strlen(temp[16])==7) && (strcmp(int_l_temp,"924") == 0 ) )
                   
                    { 
                      if (APL_SUCCESS == CO_Chk_AccValid(temp[17],'Y',APL_NULL_CHAR,APL_NULL_CHAR,APL_NULL_CHAR,'Y',APL_NULL_CHAR,APL_NULL_CHAR,'N', l_debug_info_ptr) )
                       {
                         strcpy(l_dl_autobrksettl_struct_h.h_failreas, temp[17]);
								 strcat(l_dl_autobrksettl_struct_h.h_failreas,";");
								 strcat(l_dl_autobrksettl_struct_h.h_failreas,"\0");
             	          strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"\0");
                       }
                     else
                       {               
							   strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Instructing Party A/C Not Valid");
						 	   strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							   int_l_error_flag = 1;
                       }
                    }
						  else
						  {
								 strcat(l_dl_autobrksettl_struct_h.h_failreas,"\0");
             	          strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"\0");
						  }
					}		

					strcpy(l_dl_autobrksettl_struct_h.h_proc_ind,"B");	
					strcpy(l_dl_autobrksettl_struct_h.h_status_proc,"P");	

					if(int_l_err_len == 0)
					{
						
						
						
						EXEC SQL UPDATE DL_AUTOBRKSETTL
						SET STATUS = 'UNMAT',
						STATUS_PROC = 'R',
						REC_NO	= :l_dl_autobrksettl_struct_h.h_rec_no,
						REAS = 'Trade already present'
						WHERE NAMEOF_FILE = :chr_p_filename_a
						AND	ORD_NO		= :l_dl_autobrksettl_struct_h.h_ord_no
						AND   INSTR_ISIN     = :l_dl_autobrksettl_struct_h.h_instr_isin
						AND   DOMESTIC_CP    = :l_dl_autobrksettl_struct_h.h_domestic_cp
						AND   DEAL_CD   = :l_dl_autobrksettl_struct_h.h_dealcd 
						AND	( (STATUS	= 'MAT' AND	STATUS_PROC = 'D' ) OR STATUS_PROC = 'R')
						AND	PROC_IND	= 'B';
						
						if(sqlca.sqlerrd[2] > 0)
						{
							fprintf(p_logfile,"\n Order No. same as for confirmed trade for record %s\n Order No. : %s\n",chr_l_linebuf,l_dl_autobrksettl_struct_h.h_ord_no);
							int_l_error_flag = 1;
							int_l_repflg =1;
							continue;
						}

						  
						
						if(strlen(l_dl_autobrksettl_struct_h.h_instr_isin) == 0 && int_l_error_flag == 0)
						{
							fprintf(p_logfile,"\n ISIN missing for record %s\n ISIN : %s\n",chr_l_linebuf,l_dl_autobrksettl_struct_h.h_instr_isin);
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"ISIN is missing");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							strcpy(chr_l_instrcode_a,"\0");
							int_l_error_flag = 1;
						}
						else
						{
							if(int_l_error_flag == 0)
							{
								strcpy(chr_l_instrcode_a,"\0");
								EXEC SQL SELECT INSTR_CODE 
								INTO :chr_l_instrcode_a:l_i_instr_code 
								FROM MT_INSTRUMENT
								WHERE INSTR_ISIN = :l_dl_autobrksettl_struct_h.h_instr_isin;

								IS_ANY_ORA_ERROR;

								if(sqlca.sqlcode == 1403)
								{
									fprintf(p_logfile,"\n Instrurity not valid in this record %s\n ISIN : %s\n: Lenth os instr_isin %d\n",chr_l_linebuf,l_dl_autobrksettl_struct_h.h_instr_isin,strlen(l_dl_autobrksettl_struct_h.h_instr_isin));
									strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Instrurity not valid");
									strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
									strcpy(chr_l_instrcode_a,"\0");
									int_l_error_flag = 1;
								}
								else
								{
									if(APL_FAILURE == CO_Chk_InstrValid(chr_l_instrcode_a,'Y','Y','N','N',NULL,NULL,l_debug_info_ptr))
									{
										CO_ProcMonitor(p_logfile,"\nE:Instrurity not valid.Called from CDBAuBrkConUpldFn_newfmt\n",l_debug_info_ptr,p_intl_envdatastruct_h);
										strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Instrurity not valid");
										strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
										strcpy(chr_l_instrcode_a,"\0");
										int_l_error_flag = 1;
									}
								}
							}
						}
						
						if(strlen(l_dl_autobrksettl_struct_h.h_ord_no) == 0 && int_l_error_flag ==0)
						{
							fprintf(p_logfile,"\n Order No. missing for record %s\n Order No. : %s\n",chr_l_linebuf,l_dl_autobrksettl_struct_h.h_ord_no);
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Order No. missing");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							int_l_error_flag = 1;
						}
						else
							if(int_l_error_flag == 0)
							{
							
							
							
		               if(strcmp(l_dl_autobrksettl_struct_h.h_dealcd,"1")==0)
		                 {
			               strcpy(chr_l_tmptrcode,APL_DEAL_RVP);
		                 }
	                  else if(strcmp(l_dl_autobrksettl_struct_h.h_dealcd,"2")==0)
		                 {
				            strcpy(chr_l_tmptrcode,APL_DEAL_DVP);
			              }
							EXEC SQL SELECT 1 INTO :int_l_exists
							FROM DUAL 
							WHERE EXISTS (SELECT 1 FROM DL_DEAL WHERE BRK_NO =:l_dl_autobrksettl_struct_h.h_ord_no 
												AND INSTR_CODE=:chr_l_instrcode_a AND DEAL_FRM_ORD = 'Y' 
												AND DEAL_CD=:chr_l_tmptrcode
												AND DOMESTIC_CPCLT=:l_dl_autobrksettl_struct_h.h_domestic_cp);
						
							IS_ANY_ORA_ERROR

								if(int_l_exists) 
								{
									fprintf(p_logfile,"\n Order No. is not unique for record %s\n Order No. : %s\n",chr_l_linebuf,l_dl_autobrksettl_struct_h.h_ord_no);
									strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Order No. not unique");
									strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
									int_l_error_flag = 1;
								}
							}

						
						
						if ( ( ( (strlen(l_dl_autobrksettl_struct_h.h_dl_client)==8) && (strncmp(l_dl_autobrksettl_struct_h.h_dl_client,"0924",4) != 0) ) || ( (strlen(l_dl_autobrksettl_struct_h.h_dl_client)==7) && (strncmp(l_dl_autobrksettl_struct_h.h_dl_client,"924",3) !=0 ) ) ) && int_l_error_flag == 0 )
						{
							fprintf(p_logfile,"\n First 4 digits of Client h_code in this record %s\n Client h_code : %s\n",chr_l_linebuf,l_dl_autobrksettl_struct_h.h_dl_client);
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"First 4 digits of Client h_code not 0924");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							int_l_error_flag=1;
						}
													
						if((int_l_error_flag == 0) && (APL_FAILURE == CO_Chk_AccValid(l_dl_autobrksettl_struct_h.h_dl_client,'Y',NULL,NULL,NULL,'Y',NULL,NULL,NULL, l_debug_info_ptr)) )
						{
							fprintf(p_logfile,"\n Account is not valid in this record %s\n Account : %s\n",chr_l_linebuf,l_dl_autobrksettl_struct_h.h_dl_client);
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Account not valid");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							int_l_error_flag = 1;
						}
						
						
						if(strlen(l_dl_autobrksettl_struct_h.h_domestic_cp) == 0 && int_l_error_flag == 0)
						{
							fprintf(p_logfile,"\n Domestice counterparty missing for record %s\n Domcp : %s\n",chr_l_linebuf,l_dl_autobrksettl_struct_h.h_domestic_cp);
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Domestic int_counter party missing");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							int_l_error_flag = 1;
						}
						else
							if(int_l_error_flag != 1)
							{
								

								if(APL_FAILURE == CO_Chk_AccValid(l_dl_autobrksettl_struct_h.h_domestic_cp,'Y','B',NULL,NULL,'Y','N','N','N',l_debug_info_ptr))
								{
									CO_ProcMonitor(p_logfile,"\nE:Domcp not valid.Called from CDBAuBrkConUpldFn_newfmt\n",l_debug_info_ptr,p_intl_envdatastruct_h);
									fprintf(p_logfile,"\n Domestic counterparty invalid for record %s\n Domcp : %s\n",chr_l_linebuf,l_dl_autobrksettl_struct_h.h_domestic_cp);
									strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Domestic counterparty invalid");
									strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
									int_l_error_flag = 1;
								}	

							}
								
						
						if(strcmp(l_dl_autobrksettl_struct_h.h_dealcd,"2") == 0  && int_l_error_flag != 1)
						{
							if(APL_FAILURE == MT_Rtv_AccFldVal(l_dl_autobrksettl_struct_h.h_dl_client,"typeofacc",chr_l_typeofacc,l_debug_info_ptr))
							  {
								 CO_ProcMonitor(p_logfile,"E:Error in MT_Rtv_AccFldVal in retrivingitypeofacc indicator\n",l_debug_info_ptr,p_intl_envdatastruct_h);
								 APL_GOBACK_FAIL
                       }
                     
							if (strcmp(chr_l_typeofacc,"N") != 0 ) 
							{
							strcpy(chr_l_locncode_c,APL_NULL_STRING);

							EXEC SQL SELECT LOCATION_CD 
							INTO	:chr_l_locncode_c:l_i_locncode
							FROM	MT_INSTRUMENT
							WHERE INSTR_CODE =:chr_l_instrcode_a;

							IS_ANY_ORA_ERROR

							EXEC SQL SELECT SUM(NVL(SAFEKEEP_POS,0)),
											SUM(NVL(VAL_REC,0)),
											SUM(NVL(VAL_DEL,0))
											INTO	:l_h_safekeep_pos:l_i_safek,
													:l_h_val_rec:l_i_confrec,
													:l_h_val_del:l_i_confdel
											FROM	DL_SAFEK
											WHERE    CLIENT  =:l_dl_autobrksettl_struct_h.h_dl_client
											AND      INSTR_CODE   =:chr_l_instrcode_a
											AND		LOCATION_CD	=:chr_l_locncode_c;

								IS_ANY_ORA_ERROR

							l_posn = l_h_safekeep_pos + l_h_val_rec - l_h_val_del;
							if (l_dl_autobrksettl_struct_h.h_qty > l_posn)
							{
								fprintf(p_logfile,"\n Not enough postions for record %s\n Qty : %f\n",chr_l_linebuf,l_dl_autobrksettl_struct_h.h_qty);
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Not enough postions");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								int_l_error_flag = 1;
							}
                    }
						}
						else
							if(int_l_error_flag == 0 && strcmp(l_dl_autobrksettl_struct_h.h_dealcd,"1") != 0)
							{
								fprintf(p_logfile,"\n trade h_code not valid(RVP or DVP) for record %s\n TrdCode : %s\n",chr_l_linebuf,l_dl_autobrksettl_struct_h.h_dealcd);
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Trade Code not valid for record");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								int_l_error_flag = 1;
							}

						
						if(int_l_error_flag == 0)
						{
							int_l_diff =0;
							strcpy(chr_l_settldt,APL_NULL_STRING);
							strncpy(chr_l_settldt,l_dl_autobrksettl_struct_h.h_settldate,10);
							chr_l_settldt[10]='\0';
							strcpy(chr_l_trdt_a,APL_NULL_STRING);
							strncpy(chr_l_trdt_a,chr_l_sys_date,10);
							chr_l_trdt_a[10]='\0';
							
							EXEC SQL SELECT 
							to_date(:chr_l_settldt, 'dd/chr_mm/yyyy')-to_date(:chr_l_trdt_a, 'dd/chr_mm/yyyy') 
							INTO :int_l_diff
							FROM DUAL;

							IS_ANY_ORA_ERROR;
							
							if(int_l_diff < 0 )
							{
								fprintf(p_logfile,"\n Settlement Date less than system chr_date for record %s Settldt : %s\n",chr_l_linebuf,l_dl_autobrksettl_struct_h.h_settldate);
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Settlement chr_date less than system date");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								int_l_error_flag = 1;
							}
						}

						if(int_l_error_flag ==0)
						{
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"MAT");
							if(strcmp(l_dl_autobrksettl_struct_h.h_dealcd,"2") == 0)
							{
								l_dl_autobrksettl_struct_h.h_dl_val = l_dl_autobrksettl_struct_h.h_dl_val - l_dl_autobrksettl_struct_h.h_brokercomm;
							}
							if(strcmp(l_dl_autobrksettl_struct_h.h_dealcd,"1") == 0)
							{
								l_dl_autobrksettl_struct_h.h_dl_val = l_dl_autobrksettl_struct_h.h_dl_val + l_dl_autobrksettl_struct_h.h_brokercomm;
							}
						}

					}
					else
					{
						fprintf(p_logfile,"\nE:Error in one of the lengths of the fields of the record. Record No : %d\n",l_dl_autobrksettl_struct_h.h_rec_no);
					}
				} 


			
		
				if(int_l_repflg == 0)
				{
					fprintf(p_logfile,"\nBroker Structure values are \n");
					fprintf(p_logfile,"Rec No. |%d|",l_dl_autobrksettl_struct_h.h_rec_no); 
					fprintf(p_logfile,"\nOrd No. |%s|",l_dl_autobrksettl_struct_h.h_ord_no); 
					fprintf(p_logfile,"\nTrcode. |%s|",l_dl_autobrksettl_struct_h.h_dealcd); 
					fprintf(p_logfile,"\nPrice |%f|",l_dl_autobrksettl_struct_h.h_pr); 
					fprintf(p_logfile,"\nTrdt |%s|",l_dl_autobrksettl_struct_h.h_dlt); 
					fprintf(p_logfile,"\nISIN |%s|",l_dl_autobrksettl_struct_h.h_instr_isin); 
					fprintf(p_logfile,"\nClient |%s|",l_dl_autobrksettl_struct_h.h_dl_client); 
					fprintf(p_logfile,"\nQty |%d|",l_dl_autobrksettl_struct_h.h_qty); 
					fprintf(p_logfile,"\nCtrvl |%f|",l_dl_autobrksettl_struct_h.h_dl_val); 
					fprintf(p_logfile,"\nCcy |%s|",l_dl_autobrksettl_struct_h.h_ccy); 
					fprintf(p_logfile,"\nSettldt |%s|",l_dl_autobrksettl_struct_h.h_settldate); 
					fprintf(p_logfile,"\nBrkcomm |%f|",l_dl_autobrksettl_struct_h.h_brokercomm); 
					fprintf(p_logfile,"\nAcc |%s|",l_dl_autobrksettl_struct_h.h_dl_client); 
					fprintf(p_logfile,"\nAsd |%s|",l_dl_autobrksettl_struct_h.h_auto_setl_dt); 
					fprintf(p_logfile,"\nFile |%s|",l_dl_autobrksettl_struct_h.h_file_name); 
					fprintf(p_logfile,"\nSysdate |%s|",l_dl_autobrksettl_struct_h.h_systemdt); 
					fprintf(p_logfile,"\nStat |%s|",l_dl_autobrksettl_struct_h.h_status_ind); 
					fprintf(p_logfile,"\nReason |%s|",l_dl_autobrksettl_struct_h.h_failreas); 
					fprintf(p_logfile,"\nProc flg |%s|",l_dl_autobrksettl_struct_h.h_proc_ind); 
					fprintf(p_logfile,"\nProc chr_stat |%s|",l_dl_autobrksettl_struct_h.h_status_proc); 
					fprintf(p_logfile,"\n\n##################################################################################################################\n\n");
					EXEC SQL INSERT INTO DL_AUTOBRKSETTL
					VALUES	(
									:int_reccount,
									:l_dl_autobrksettl_struct_h.h_ord_no,
									:l_dl_autobrksettl_struct_h.h_domestic_cp,
									:l_dl_autobrksettl_struct_h.h_dealcd,
									:l_dl_autobrksettl_struct_h.h_pr,
									:l_dl_autobrksettl_struct_h.h_dlt,
									:l_dl_autobrksettl_struct_h.h_instr_isin,
									:l_dl_autobrksettl_struct_h.h_dl_client,
									ROUND(:l_dl_autobrksettl_struct_h.h_qty),
									:l_dl_autobrksettl_struct_h.h_dl_val,
									:l_dl_autobrksettl_struct_h.h_ccy,
									:l_dl_autobrksettl_struct_h.h_settldate,
									:l_dl_autobrksettl_struct_h.h_brokercomm,
									:l_dl_autobrksettl_struct_h.h_dl_client,
									:l_dl_autobrksettl_struct_h.h_auto_setl_dt,
									:l_dl_autobrksettl_struct_h.h_file_name,
									:l_dl_autobrksettl_struct_h.h_systemdt,
									:l_dl_autobrksettl_struct_h.h_status_ind,
									:l_dl_autobrksettl_struct_h.h_failreas,
									:l_dl_autobrksettl_struct_h.h_proc_ind,
									:l_dl_autobrksettl_struct_h.h_status_proc
								);
							
						IS_ANY_ORA_ERROR
				}
				if(!(int_l_reccount%C_MY_COMMITSIZE))
				{
					memset(chr_l_buf, NULL, BUFF_SIZE);
					sprintf(chr_l_buf, "Processed %d Records", int_l_reccount);

					EXEC SQL UPDATE SYS_BATCHPROC
					SET STAT_DET = :chr_l_buf
					WHERE PROCESS_NAME=:argv[0]
					AND   PROC_INIT=:argv[1]
					AND   STARTDATE=:argv[2]
					AND   STATUS='started';

					EXEC SQL COMMIT WORK;

					EXEC SQL OPEN lock_cursor1;

					IS_ANY_ORA_ERROR

					EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
     				FROM SYS_BATCHPROC
     				WHERE PROCESS_NAME=:argv[0]
        			AND   PROC_INIT=:argv[1]
        			AND   STARTDATE=:argv[2]
        			AND   STATUS='started'
     				FOR UPDATE OF PROCESSING_STATUS,STATUS;

					IS_ANY_ORA_ERROR

					if(APL_ZERO_RESULT_SET)
					{
						CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
						APL_GOBACK_FAIL
					}
				}
					
		}
		EXEC SQL CLOSE lock_cursor1;	
		IS_ANY_ORA_ERROR

	


	}
												
     
	  RETURN_SUCCESS :
		
		memset(chr_l_buf, NULL, BUFF_SIZE);
		sprintf(chr_l_buf, "Processed %d Records", int_l_reccount);

		CO_ProcMonitor(p_logfile, chr_l_buf, NULL, NULL);

		EXEC SQL UPDATE SYS_BATCHPROC
		SET STAT_DET = :chr_l_buf
		WHERE PROCESS_NAME=:argv[0]
		AND   PROC_INIT=:argv[1]
		AND   STARTDATE=:argv[2]
		AND   STATUS='started';

		EXEC SQL COMMIT WORK;
		IS_ANY_ORA_ERROR

		CO_ProcMonitor(p_logfile, "Record Committed", NULL, NULL);

		EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
		FROM SYS_BATCHPROC
		WHERE PROCESS_NAME=:argv[0]
		AND   PROC_INIT=:argv[1]
		AND   STARTDATE=:argv[2]
		AND   STATUS='started'
		FOR UPDATE OF PROCESSING_STATUS,STATUS;

		IS_ANY_ORA_ERROR

		if(APL_ZERO_RESULT_SET)
		{
			CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
			APL_GOBACK_FAIL
		}

		CO_ProcMonitor(p_logfile," Successful ! in CDBAuBrkConUpldFn_newfmt",l_debug_info_ptr,p_intl_envdatastruct_h);
		CO_FreeErrLst(l_debug_info_ptr);
		fclose(l_brkfile);

   	return(APL_SUCCESS);

    RETURN_FAILURE :
		
		CO_ProcMonitor(p_logfile," Failed in CDBAuBrkConUpldFn_newfmt",l_debug_info_ptr,p_intl_envdatastruct_h);
		CO_FreeErrLst(l_debug_info_ptr);
		fclose(l_brkfile);

   	return(APL_FAILURE);
}




int DL_Proc_AutoBrkConfUpload(	char *p_dt,
						char *chr_p_filename_a,
						char **argv,
						char *p_uploaddir,
						FILE *p_logfile,
						char *chr_p_indicator,
						INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   
DL_AUTOBRKSETTL_STRUCT_H l_dl_autobrksettl_struct_h;	
char **temp;
FILE * l_brkfile = NULL;
int int_num;
char chr_l_filename_c[14] = APL_NULL_STRING;
char chr_l_sys_date[APL_DATE_LEN] = APL_NULL_STRING;
char chr_l_brkfile_name[FILE_NAME_LEN] = APL_NULL_STRING;
char int_l_temp[17] = APL_NULL_STRING;

char chr_l_locncode_c[4]=APL_NULL_STRING;
int int_l_err_len=0;
int int_l_error_flag=0;
int int_reccount=0;
int int_l_reccount=0;
int i=0;
int int_imax=0;
struct sqlca sqlca;

EXEC SQL BEGIN DECLARE SECTION;

int int_l_count=0;
int int_l_exists=0;
int int_l_repflg = 0;
int int_l_diff=0;
double	l_h_safekeep_pos=0;
double l_h_val_rec=0;
double l_h_val_del =0;
double l_posn =0;
short l_i_instr_code=0;
short l_i_safek=0;
short l_i_confrec=0;
short l_i_confdel=0;
short l_i_locncode = 0; 
char chr_l_buf[BUFF_SIZE]; 
char chr_l_sysdatetime_A[20];
char chr_l_linebuf[APL_MAXLINE_SIZE];
char chr_l_instrcode_a[APL_INSTRUMENTCODE_LEN];
char chr_l_trdt_a[APL_DATE_LEN];
char chr_l_settldt[APL_DATE_LEN];

char chr_l_temp_isin_in[14] = APL_NULL_STRING;
char chr_l_temp_isin_ou[14] = APL_NULL_STRING;
char chr_l_temp_isin_ou1[14] = APL_NULL_STRING;
char chr_l_temp_trcode_in[3] = APL_NULL_STRING;
char chr_l_temp_trcode_ou[3] = APL_NULL_STRING;
char chr_l_temp_ccy_in[5] = APL_NULL_STRING;
char chr_l_temp_ccy_ou[5] = APL_NULL_STRING;

   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;

char chr_l_tmptrcode[2] = APL_NULL_STRING;
char chr_l_typeofacc[2] = APL_NULL_STRING;
EXEC SQL END DECLARE SECTION;

EXEC SQL VAR chr_l_buf 			IS STRING;
EXEC SQL VAR chr_l_sys_date 	IS STRING;
EXEC SQL VAR chr_l_sysdatetime_A IS STRING;
EXEC SQL VAR chr_l_instrcode_a 		IS STRING;
EXEC SQL VAR chr_l_trdt_a 			IS STRING;
EXEC SQL VAR chr_l_settldt 		IS STRING;
EXEC SQL VAR chr_l_locncode_c		IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_ord_no  IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_domestic_cp IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_dealcd IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_dlt IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_instr_isin IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_dl_client IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_ccy IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_settldate IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_dl_client IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_auto_setl_dt IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_file_name IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_systemdt IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_status_ind 	IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_failreas IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_proc_ind IS STRING;
EXEC SQL VAR l_dl_autobrksettl_struct_h.h_status_proc IS STRING;

EXEC SQL VAR chr_l_tmptrcode is STRING;
EXEC SQL VAR chr_l_typeofacc is STRING;
EXEC SQL VAR chr_g_restart_data is string;
sqlca.sqlcode = 0;

EXEC SQL DECLARE lock_cursor1 CURSOR FOR
		SELECT * FROM DL_AUTOBRKSETTL
		WHERE NAMEOF_FILE=:chr_p_filename_a
		AND PROC_IND='B'
		FOR UPDATE NOWAIT;



memset(&l_dl_autobrksettl_struct_h,NULL,sizeof(DL_AUTOBRKSETTL_STRUCT_H));



   fprintf(p_logfile, "Entered Function DL_Proc_AutoBrkConfUpload\n");
   fprintf(p_logfile, "The Date for Broker Confirmation File Upload is : %s\n", p_dt);



   strcat(p_uploaddir, chr_p_filename_a);

	
   l_brkfile = fopen(p_uploaddir, "r");

	

	if (l_brkfile == NULL)
	{
  		if (CO_InsertErr
  				(l_debug_info_ptr,
  				ERR_FDFILE_NOTVALID, 
  				APL_NULL_STRING,
  				APL_NULL_STRING,
  				APL_NULL_STRING,
  				__LINE__,
  				__FILE__
  				) != APL_SUCCESS)
  				APL_GOBACK_FAIL
		
  		APL_GOBACK_FAIL
	}

   

  EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
     FROM SYS_BATCHPROC
     WHERE PROCESS_NAME=:argv[0]
     AND   PROC_INIT=:argv[1]
     AND   STARTDATE=:argv[2]
     AND   STATUS='started'
     FOR UPDATE OF PROCESSING_STATUS,STATUS;


  if(APL_ZERO_RESULT_SET)
   {
      CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc\n",NULL,NULL);
      APL_GOBACK_FAIL
   }

  IS_ANY_ORA_ERROR

      fprintf(p_logfile, "CDBAuBrkConUpldFn successfully locked the batch record\n");


 if ( CO_RtvSysParams(l_debug_info_ptr) == APL_FAILURE)
     	 APL_GOBACK_FAIL



		
		if(strcmp(chr_p_indicator,"UB") == 0)
      {
			fprintf(p_logfile, "Scanning the brk confirmation h_file\n");
			
			EXEC SQL OPEN lock_cursor1;
		
			IS_ANY_ORA_ERROR  	

			if(APL_ZERO_RESULT_SET); 

			if(APL_FAILURE == CO_RtvSysDt(chr_l_sys_date,l_debug_info_ptr))
			{
				CO_ProcMonitor(p_logfile,"E:Failed to get system chr_date\n",l_debug_info_ptr,NULL);
				APL_GOBACK_FAIL
			}

			EXEC SQL DELETE DL_AUTOBRKSETTL
			WHERE NAMEOF_FILE=:chr_p_filename_a
			AND	PROC_IND='B'		
			AND	( STATUS_PROC <> 'R' AND NOT(STATUS_PROC =  'D' AND STATUS = 'MAT')) ;	

			IS_ANY_ORA_ERROR

			
			i =0;	
			while(!feof(l_brkfile))
			{
				memset(chr_l_buf,APL_NULL_CHAR,BUFF_SIZE);
				memset(chr_l_sysdatetime_A,APL_NULL_CHAR,20); 
				memset(chr_l_instrcode_a,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN); 
				memset(chr_l_trdt_a,APL_NULL_CHAR,APL_DATE_LEN); 
				memset(chr_l_settldt,APL_NULL_CHAR,APL_DATE_LEN); 
				
				memset(chr_l_locncode_c,APL_NULL_CHAR,4);

				int_l_error_flag = 0;
				int_l_err_len = 0;
				int_l_reccount++;
				int_l_exists=0;
				int_l_repflg=0;
				
				int_reccount++;
				memset(chr_l_linebuf,APL_NULL_CHAR,APL_MAXLINE_SIZE); 
				memset(&l_dl_autobrksettl_struct_h,NULL,sizeof(DL_AUTOBRKSETTL_STRUCT_H));
				fscanf(l_brkfile,"%[^\n]\n",chr_l_linebuf);
				
				strcat(chr_l_linebuf,",");
				strcat(chr_l_linebuf,"\0");
				
				fprintf(p_logfile,"\n\n##################################################################################################################\n\n");
				fprintf(p_logfile,"\nRecord scanned is : \n%s\n\n",chr_l_linebuf);
				
				if (APL_FAILURE == CO_SplitStr( chr_l_linebuf,
																',',
																&int_num,
																&temp ))
				{
					CO_ProcMonitor(p_logfile, "E:String split processtion failed\n",l_debug_info_ptr,p_intl_envdatastruct_h);
					APL_GOBACK_FAIL
				}
				 
				if(int_num < 57) 
				{
					fprintf(p_logfile,"\nSome fields are missing in the record\n %sRecord No. %d Filename %s\n",int_reccount,chr_p_filename_a,chr_l_linebuf);
					l_dl_autobrksettl_struct_h.h_rec_no=int_reccount;
					strcpy(l_dl_autobrksettl_struct_h.h_ord_no,"\0");
					strcpy(l_dl_autobrksettl_struct_h.h_domestic_cp,"\0");
					strcpy(l_dl_autobrksettl_struct_h.h_dealcd,"\0");
					l_dl_autobrksettl_struct_h.h_pr = 0;
					strcpy(l_dl_autobrksettl_struct_h.h_dlt,"\0");
					strcpy(l_dl_autobrksettl_struct_h.h_instr_isin,"\0");
					strcpy(l_dl_autobrksettl_struct_h.h_dl_client,"\0");
					l_dl_autobrksettl_struct_h.h_qty = 0;
					l_dl_autobrksettl_struct_h.h_dl_val= 0;
					strcpy(l_dl_autobrksettl_struct_h.h_ccy,"\0");
					strcpy(l_dl_autobrksettl_struct_h.h_settldate,"\0");
					l_dl_autobrksettl_struct_h.h_brokercomm = 0;
					strcpy(l_dl_autobrksettl_struct_h.h_dl_client,"\0");
					strcpy(l_dl_autobrksettl_struct_h.h_auto_setl_dt,"\0");
					strcpy(l_dl_autobrksettl_struct_h.h_file_name,chr_p_filename_a);
					strcpy(l_dl_autobrksettl_struct_h.h_systemdt,chr_l_sys_date);
					strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
					if(int_num < 57)
						strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Fields missing in the record");
					else if(int_num > 59)
						strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Extra fields in the record");
						
					strcpy(l_dl_autobrksettl_struct_h.h_proc_ind,"B");
					strcpy(l_dl_autobrksettl_struct_h.h_status_proc,"P");
				}
				else
				{
					
					l_dl_autobrksettl_struct_h.h_rec_no=int_reccount;

					
					if(strlen(temp[2]) > 12)
					{
						strncpy(l_dl_autobrksettl_struct_h.h_ord_no,temp[2],12);
						strcat(l_dl_autobrksettl_struct_h.h_ord_no,"\0");
						strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Field length of Order No exceded");
						strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
						int_l_err_len=1;
					}
					else
					{
					
						if(strlen(temp[2]) == 10)
							strcpy(l_dl_autobrksettl_struct_h.h_ord_no,"00");
						else if(strlen(temp[2]) == 11)
							strcpy(l_dl_autobrksettl_struct_h.h_ord_no,"0");
						if(strlen(temp[2]) == 12)
							strcpy(l_dl_autobrksettl_struct_h.h_ord_no,temp[2]);
						else
							strcat(l_dl_autobrksettl_struct_h.h_ord_no,temp[2]);
					}
					
					if(strlen(temp[3]) > 3)
					{
						strncpy(l_dl_autobrksettl_struct_h.h_domestic_cp,temp[3],3);
						strcat(l_dl_autobrksettl_struct_h.h_domestic_cp," 01");
						strcat(l_dl_autobrksettl_struct_h.h_domestic_cp,"\0");
						if(!int_l_err_len)
						{
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Field length of Domestic Counterparty exceded");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							int_l_err_len=1;
						}
					}
					else
					{
						strcpy(l_dl_autobrksettl_struct_h.h_domestic_cp,temp[3]);
						strcat(l_dl_autobrksettl_struct_h.h_domestic_cp," 01");
					}

					
					
					strcpy(chr_l_temp_trcode_in,"\0");
					strcpy(chr_l_temp_trcode_ou,"\0");
					strncpy(chr_l_temp_trcode_in,temp[4],2);
					strcat(chr_l_temp_trcode_in,"\0");
					if(APL_FAILURE == CO_Trim(chr_l_temp_trcode_in
															,'"'
															,'L'
															,chr_l_temp_trcode_ou
															,l_debug_info_ptr))
					{
						CO_ProcMonitor(p_logfile,"\nE:Error in CDBBrkUplCon call to CO_Trim\n",l_debug_info_ptr,NULL);
						APL_GOBACK_FAIL
					}
					if(strlen(chr_l_temp_trcode_ou) > 1)
					{
						strncpy(l_dl_autobrksettl_struct_h.h_dealcd,chr_l_temp_trcode_ou,1);
						strcat(l_dl_autobrksettl_struct_h.h_dealcd,"\0");
						if(!int_l_err_len)
						{
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Field length of Trade h_code exceded");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							int_l_err_len=1;
						}
					}
					else
						strcpy(l_dl_autobrksettl_struct_h.h_dealcd,chr_l_temp_trcode_ou); 
				
						

					
					if(strlen(temp[10]) == 2)
						strcpy(chr_l_trdt_a,temp[10]);
					else
					{
						if(strlen(temp[10]) == 1)
						{
							strcat(chr_l_trdt_a,"0");
							strcat(chr_l_trdt_a,temp[10]);
						}
						else
						{
							strncpy(chr_l_trdt_a,temp[10],2);
							if(!int_l_err_len)
							{
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Field length of Trade chr_date exceded");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								int_l_err_len=1;
							}
						}
					}
				
					strcat(chr_l_trdt_a,"/");
					
					if(strlen(temp[9]) == 2)
						strcat(chr_l_trdt_a,temp[9]);
					else
					{
						if(strlen(temp[9]) == 1)
						{
							strcat(chr_l_trdt_a,"0");
							strcat(chr_l_trdt_a,temp[9]);
						}
						else
						{
							strncat(chr_l_trdt_a,temp[9],2);
							if(!int_l_err_len)
							{
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Field length of Trade chr_date exceded");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								int_l_err_len=1;
							}
						}
					}
					
					strcat(chr_l_trdt_a,"/");

					if(strlen(temp[7]) == 2)
						strcat(chr_l_trdt_a,temp[7]);
					else
					{
							strncat(chr_l_trdt_a,temp[7],2);
							if(!int_l_err_len)
							{
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Field length of Trade chr_date exceded");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								int_l_err_len=1;
							}
					}
					if(strlen(temp[8]) == 2)
						strcat(chr_l_trdt_a,temp[8]);
					else
					{
						if(strlen(temp[8]) ==1)
						{
							strcat(chr_l_trdt_a,"0");
							strcat(chr_l_trdt_a,temp[8]);
						}
						else
						{
							strncat(chr_l_trdt_a,temp[8],2);
							if(!int_l_err_len)
							{
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Field length of Trade chr_date exceded");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								int_l_err_len=1;
							}
							strcat(chr_l_trdt_a,"\0");
						}
					}

								
					strcpy(l_dl_autobrksettl_struct_h.h_dlt,chr_l_trdt_a);
					strcat(l_dl_autobrksettl_struct_h.h_dlt," 12:00:00");
					strcat(l_dl_autobrksettl_struct_h.h_dlt,"\0");
				
					
					strcpy(chr_l_temp_isin_in,"\0");
					strcpy(chr_l_temp_isin_ou,"\0");
					strcpy(chr_l_temp_isin_ou1,"\0");
					strncpy(chr_l_temp_isin_in,temp[11],13);
					strcat(chr_l_temp_isin_in,"\0");
					if(APL_FAILURE == CO_Trim(chr_l_temp_isin_in,
																'"',
																'L',
																chr_l_temp_isin_ou,
																l_debug_info_ptr))
					{
						CO_ProcMonitor(p_logfile,"\nE:Error CDBBrkUplCon calling to CBtrimSting \n",l_debug_info_ptr,NULL);
						APL_GOBACK_FAIL
					}
					if(APL_FAILURE == CO_Trim(chr_l_temp_isin_ou,
																'"',
																'R',
																chr_l_temp_isin_ou1,
																l_debug_info_ptr))
					{
						CO_ProcMonitor(p_logfile,"\nE:Error CDBBrkUplCon calling to CBtrimSting \n",l_debug_info_ptr,NULL);
						APL_GOBACK_FAIL
					}
					if(strlen(chr_l_temp_isin_ou1) > 12)
					{
						strncpy(l_dl_autobrksettl_struct_h.h_instr_isin,chr_l_temp_isin_ou1,12);
						strcat(l_dl_autobrksettl_struct_h.h_instr_isin,"\0");
						if(!int_l_err_len)
						{
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Field length of ISIN exceded");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							int_l_err_len=1;
						}
					}
					else
						strcpy(l_dl_autobrksettl_struct_h.h_instr_isin,chr_l_temp_isin_ou1);

					
					if(strlen(temp[12]) > 11 )
					{
						strncpy(l_dl_autobrksettl_struct_h.h_dl_client,temp[12],11);
						strcat(l_dl_autobrksettl_struct_h.h_dl_client,"\0");
						if(!int_l_err_len)
						{
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Field length of Client exceded");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							int_l_err_len=1;
						}
					}
					else
						strcpy(l_dl_autobrksettl_struct_h.h_dl_client,temp[12]);


					
					if(strlen(temp[41]) == 2)
						strcpy(chr_l_settldt,temp[41]);
					else
					{
						if(strlen(temp[41]) ==1)
						{
							strcat(chr_l_settldt,"0");
							strcat(chr_l_settldt,temp[41]);
						}
						else
						{
							strncpy(chr_l_settldt,temp[41],2);
							if(!int_l_err_len)
							{
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Field length of Settlement chr_date exceded");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								int_l_err_len=1;
							}
						}
					}
				
					strcat(chr_l_settldt,"/");
					
					if(strlen(temp[40]) == 2)
						strcat(chr_l_settldt,temp[40]);
					else
					{
						if(strlen(temp[40]) ==1)
						{
							strcat(chr_l_settldt,"0");
							strcat(chr_l_settldt,temp[40]);
						}
						else
						{
							strncat(chr_l_settldt,temp[40],2);
							if(!int_l_err_len)
							{
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Field length of Trade chr_date exceded");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								int_l_err_len=1;
							}
						}
					}
					
					strcat(chr_l_settldt,"/");

					if(strlen(temp[38]) == 2)
						strcat(chr_l_settldt,temp[38]);
					else
					{
							strncat(chr_l_settldt,temp[38],2);
							if(!int_l_err_len)
							{
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Field length of Trade chr_date exceded");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								int_l_err_len=1;
							}
					}
					if(strlen(temp[39]) == 2)
						strcat(chr_l_settldt,temp[39]);
					else
					{
						if(strlen(temp[39]) ==1)
						{
							strcat(chr_l_settldt,"0");
							strcat(chr_l_settldt,temp[39]);
						}
						else
						{
							strncat(chr_l_settldt,temp[39],2);
							if(!int_l_err_len)
							{
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Field length of Trade chr_date exceded");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								int_l_err_len=1;
							}
							strcat(chr_l_settldt,"\0");
						}
					}
								
					strcpy(l_dl_autobrksettl_struct_h.h_settldate,chr_l_settldt);
					strcat(l_dl_autobrksettl_struct_h.h_settldate," 12:00:00");
					strcat(l_dl_autobrksettl_struct_h.h_settldate,"\0");

					
					if(strlen(temp[56]) > 10)
					{
						strncpy(l_dl_autobrksettl_struct_h.h_dl_client,temp[56],10);
						strcat(l_dl_autobrksettl_struct_h.h_dl_client,"\0");
						if(!int_l_err_len)
						{
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Field length of client exceded");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							int_l_err_len=1;
						}
					}
					else
						strcpy(l_dl_autobrksettl_struct_h.h_dl_client,temp[56]);

					
					
					if(strlen(temp[55]) > 16)
					{
						strcpy(int_l_temp,APL_NULL_STRING);
						strncpy(int_l_temp,temp[55],16);
						strcat(int_l_temp,"\0");
						for(i=0;i<strlen(int_l_temp);i++)
						{
							if(isdigit(int_l_temp[i]))
								continue;
							else if(int_l_temp[i] == '.')
								continue;
							else
							{
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Broker commission contains non-numeric characters");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								l_dl_autobrksettl_struct_h.h_brokercomm = 0;
								int_l_err_len=1;
								break;
							}
						}
						if(!int_l_err_len)
							l_dl_autobrksettl_struct_h.h_brokercomm = atof(int_l_temp);
						if(!int_l_err_len)
						{
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Field length of Broker Commission exceded");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							int_l_err_len=1;
						}
					}
					else
					{
						if(strlen(temp[55]) == 0)
						{
							l_dl_autobrksettl_struct_h.h_brokercomm = 0;
							if(!int_l_err_len)
							{
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Broker Commission chr_value null in file");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								int_l_err_len=1;
							}
						}
						else
						{
							strcpy(int_l_temp,APL_NULL_STRING);
							strcpy(int_l_temp,temp[55]);
							for(i=0;i<strlen(int_l_temp);i++)
							{
								if(isdigit(int_l_temp[i]))
									continue;
								else if(int_l_temp[i] == '.')
									continue;
								else
								{
									strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Broker commission contains non-numeric characters");
									strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
									l_dl_autobrksettl_struct_h.h_brokercomm = 0;
									int_l_err_len=1;
									break;
								}
							}
							if(!int_l_err_len)
							{
								strcpy(int_l_temp,APL_NULL_STRING);
								strcpy(int_l_temp,temp[55]);
								l_dl_autobrksettl_struct_h.h_brokercomm = atof(int_l_temp);
							}
						}
					}

					

					if(strlen(temp[6]) > 14)
					{
						strcpy(int_l_temp,APL_NULL_STRING);
						strncpy(int_l_temp,temp[6],14);
						strcat(int_l_temp,"\0");
						for(i=0;i<strlen(int_l_temp);i++)
						{
							if(isdigit(int_l_temp[i]))
								continue;
							else if(int_l_temp[i] == '.')
								continue;
							else
							{
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Price contains non-numeric characters");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								l_dl_autobrksettl_struct_h.h_pr = 0;
								int_l_err_len=1;
								break;
							}
						}
						if(!int_l_err_len)
							l_dl_autobrksettl_struct_h.h_pr = atof(int_l_temp);

						if(!int_l_err_len)
						{
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Field length of Price exceded");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							int_l_err_len=1;
						}
					}
					else
					{
						if(strlen(temp[6]) == 0)
						{
							l_dl_autobrksettl_struct_h.h_pr = 0;
							if(!int_l_err_len)
							{
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Price is null in file");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								int_l_err_len=1;
							}
						}
						else
						{
							strcpy(int_l_temp,APL_NULL_STRING);
							strcpy(int_l_temp,temp[6]);
							for(i=0;i<strlen(int_l_temp);i++)
							{
								if(isdigit(int_l_temp[i]))
									continue;
								else if(int_l_temp[i] == '.')
									continue;
								else
								{
									strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Price contains non-numeric characters");
									strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
									l_dl_autobrksettl_struct_h.h_pr = 0;
									int_l_err_len=1;
									break;
								}
							}
							if(!int_l_err_len)
							{
								strcpy(int_l_temp,APL_NULL_STRING);
								strcpy(int_l_temp,temp[6]);
								l_dl_autobrksettl_struct_h.h_pr = atof(int_l_temp);
							}
						}
					}
					
					
					if(strlen(temp[17]) > 16)
					{
						strcpy(int_l_temp,APL_NULL_STRING);
						strncpy(int_l_temp,temp[17],16);
						strcat(int_l_temp,"\0");
						for(i=0;i<strlen(int_l_temp);i++)
						{
							if(isdigit(int_l_temp[i]))
								continue;
							else if(int_l_temp[i] == '.')
								continue;
							else
							{
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Counter Value contains non-numeric characters");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								l_dl_autobrksettl_struct_h.h_dl_val = 0;
								int_l_err_len=1;
								break;
							}
						}
						if(!int_l_err_len)
							l_dl_autobrksettl_struct_h.h_dl_val = atof(int_l_temp);
						if(!int_l_err_len)
						{
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Field length of Counter Value exceded");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							int_l_err_len=1;
						}
					}
					else
					{
						if(strlen(temp[17]) == 0)
						{
							l_dl_autobrksettl_struct_h.h_dl_val = 0;
							if(!int_l_err_len)
							{
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Counter chr_value is null in file");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								int_l_err_len=1;
							}
						}
						else
						{
							strcpy(int_l_temp,APL_NULL_STRING);
							strcpy(int_l_temp,temp[17]);
							for(i=0;i<strlen(int_l_temp);i++)
							{
								if(isdigit(int_l_temp[i]))
									continue;
								else if(int_l_temp[i] == '.')
									continue;
								else
								{
									strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Counter Value contains non-numeric characters");
									strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
									l_dl_autobrksettl_struct_h.h_dl_val = 0;
									int_l_err_len=1;
									break;
								}
							}
							if(!int_l_err_len)
							{
								strcpy(int_l_temp,APL_NULL_STRING);
								strcpy(int_l_temp,temp[17]);
								l_dl_autobrksettl_struct_h.h_dl_val = atof(int_l_temp);
							}
						}
					}
					
					strcpy(chr_l_temp_ccy_in,"\0");
					strcpy(chr_l_temp_ccy_ou,"\0");
					strncpy(chr_l_temp_ccy_in,temp[37],4);
					strcat(chr_l_temp_ccy_in,"\0");
					if(APL_FAILURE == CO_Trim(chr_l_temp_ccy_in,
																'"',
																'L',
																chr_l_temp_ccy_ou,
																l_debug_info_ptr))
					{
						CO_ProcMonitor(p_logfile,"\nE:Error in CDBBrkUplCon calling CO_Trim\n",l_debug_info_ptr,NULL);
						APL_GOBACK_FAIL
					}

					if(strlen(chr_l_temp_ccy_ou) >3)
					{
						strncpy(l_dl_autobrksettl_struct_h.h_ccy,chr_l_temp_ccy_ou,3);
						strcat(l_dl_autobrksettl_struct_h.h_ccy,"\0");
						if(!int_l_err_len)
						{
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Field length of Ccy exceded");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							int_l_err_len=1;
						}
					}
					else
					{
						if(strlen(chr_l_temp_ccy_ou)==0)
						{
							if(!int_l_err_len)
							{
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Ccycode Missing in file");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								int_l_err_len=1;
							}
						}
						strcpy(l_dl_autobrksettl_struct_h.h_ccy,chr_l_temp_ccy_ou);
					}

					

					if(strlen(temp[16]) > 11)
					{
						strcpy(int_l_temp,APL_NULL_STRING);
						strncpy(int_l_temp,temp[16],11);
						strcat(int_l_temp,"\0");
						for(i=0;i<strlen(int_l_temp);i++)
						{
							if(isdigit(int_l_temp[i]))
								continue;
							else if(int_l_temp[i] == '.')
								continue;
							else
							{
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Quantity contains non-numeric characters");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								l_dl_autobrksettl_struct_h.h_qty = 0;
								int_l_err_len=1;
								break;
							}
						}
						if(!int_l_err_len)
							l_dl_autobrksettl_struct_h.h_qty = atof(int_l_temp);
						if(!int_l_err_len)
						{
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Field length of Quantity exceded");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							int_l_err_len=1;
						}
					}
					else
					{
						if(strlen(temp[16]) == 0)
						{
							l_dl_autobrksettl_struct_h.h_qty = 0;
							if(!int_l_err_len)
							{
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Qty chr_value null in file");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								int_l_err_len=1;
							}
						}
						else
						{
							strcpy(int_l_temp,APL_NULL_STRING);
							strcpy(int_l_temp,temp[16]);
							for(i=0;i<strlen(int_l_temp);i++)
							{
								if(isdigit(int_l_temp[i]))
									continue;
								else if(int_l_temp[i] == '.')
									continue;
								else
								{
									strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Quantity contains non-numeric characters");
									strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
									l_dl_autobrksettl_struct_h.h_qty = 0;
									int_l_err_len=1;
									break;
								}
							}
							if(!int_l_err_len)
							{
								strcpy(int_l_temp,APL_NULL_STRING);
								strcpy(int_l_temp,temp[16]);
								l_dl_autobrksettl_struct_h.h_qty = atof(int_l_temp);
							}
						}
					}

					
					strcpy(l_dl_autobrksettl_struct_h.h_auto_setl_dt,"\0");
					strcpy(l_dl_autobrksettl_struct_h.h_file_name,chr_p_filename_a);
					strcpy(l_dl_autobrksettl_struct_h.h_systemdt,chr_l_sys_date);
							
					if(int_l_err_len == 0)
					{
						
						if (int_num == 59)
						  {
							 if ( strlen(temp[57]))
								{
								  if (APL_SUCCESS == CO_Chk_AccValid(temp[57],'Y',APL_NULL_CHAR,APL_NULL_CHAR,APL_NULL_CHAR,'Y',APL_NULL_CHAR,APL_NULL_CHAR,APL_NULL_CHAR, l_debug_info_ptr) )
									  {
										 strcpy(l_dl_autobrksettl_struct_h.h_failreas, temp[57]);
										 strcat(l_dl_autobrksettl_struct_h.h_failreas,";");
									    strcat(l_dl_autobrksettl_struct_h.h_failreas,"\0");
										 strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"\0");
										 if (strlen(temp[58]))
											{
											  strcat(l_dl_autobrksettl_struct_h.h_failreas,temp[58]);
											  strcat(l_dl_autobrksettl_struct_h.h_failreas,";");
											  strcat(l_dl_autobrksettl_struct_h.h_failreas,"\0");
                                 }
                             }
                          else
									  {
							          strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Instructing Party A/C Not Valid");
						 	          strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							          int_l_error_flag = 1;
                             }
						      }
                      else if (strlen(temp[58]))
                        {
								  strcat(l_dl_autobrksettl_struct_h.h_failreas,";");
								  strcat(l_dl_autobrksettl_struct_h.h_failreas,temp[58]);
								  strcat(l_dl_autobrksettl_struct_h.h_failreas,";");
								  strcat(l_dl_autobrksettl_struct_h.h_failreas,"\0");
								  strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"\0");
                        }
                    }  
                  else if((int_num == 58) && (strlen(temp[57])) )
                    { 
                      if (APL_SUCCESS == CO_Chk_AccValid(temp[57],'Y',APL_NULL_CHAR,APL_NULL_CHAR,APL_NULL_CHAR,'Y',APL_NULL_CHAR,APL_NULL_CHAR,APL_NULL_CHAR, l_debug_info_ptr) )
                       {
                         strcpy(l_dl_autobrksettl_struct_h.h_failreas, temp[57]);
								 strcat(l_dl_autobrksettl_struct_h.h_failreas,";");
								 strcat(l_dl_autobrksettl_struct_h.h_failreas,"\0");
             	          strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"\0");
                       }
                     else
                       {               
							   strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Instructing Party A/C Not Valid");
						 	   strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							   int_l_error_flag = 1;
                       }
                     }
                  else
                    {
                      strcpy(l_dl_autobrksettl_struct_h.h_failreas,"\0");
             	       strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"\0");
                    }
					}
							
					strcpy(l_dl_autobrksettl_struct_h.h_proc_ind,"B");	
					strcpy(l_dl_autobrksettl_struct_h.h_status_proc,"P");	

					if(int_l_err_len == 0)
					{
						
						
						
						EXEC SQL UPDATE DL_AUTOBRKSETTL
						SET STATUS = 'UNMAT',
						STATUS_PROC = 'R',
						REC_NO	= :l_dl_autobrksettl_struct_h.h_rec_no,
						REAS = 'Trade already present'
						WHERE NAMEOF_FILE = :chr_p_filename_a
						AND	ORD_NO		= :l_dl_autobrksettl_struct_h.h_ord_no
						AND   INSTR_ISIN     = :l_dl_autobrksettl_struct_h.h_instr_isin
						AND   DOMESTIC_CP    = :l_dl_autobrksettl_struct_h.h_domestic_cp
						AND   DEAL_CD   = :l_dl_autobrksettl_struct_h.h_dealcd 
						AND	( (STATUS	= 'MAT' AND	STATUS_PROC = 'D' ) OR STATUS_PROC = 'R')
						AND	PROC_IND	= 'B';
						
						if(sqlca.sqlerrd[2] > 0)
						{
							fprintf(p_logfile,"\n Order No. same as for confirmed trade for record %s\n Order No. : %s\n",chr_l_linebuf,l_dl_autobrksettl_struct_h.h_ord_no);
							int_l_error_flag = 1;
							int_l_repflg =1;
							continue;
						}

						  
						
						if(strlen(l_dl_autobrksettl_struct_h.h_instr_isin) == 0 && int_l_error_flag == 0)
						{
							fprintf(p_logfile,"\n ISIN missing for record %s\n ISIN : %s\n",chr_l_linebuf,l_dl_autobrksettl_struct_h.h_instr_isin);
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"ISIN is missing");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							strcpy(chr_l_instrcode_a,"\0");
							int_l_error_flag = 1;
						}
						else
						{
							if(int_l_error_flag == 0)
							{
								strcpy(chr_l_instrcode_a,"\0");
								EXEC SQL SELECT INSTR_CODE 
								INTO :chr_l_instrcode_a:l_i_instr_code 
								FROM MT_INSTRUMENT
								WHERE INSTR_ISIN = :l_dl_autobrksettl_struct_h.h_instr_isin;

								IS_ANY_ORA_ERROR;

								if(sqlca.sqlcode == 1403)
								{
									fprintf(p_logfile,"\n Instrurity not valid in this record %s\n ISIN : %s\n: Lenth os instr_isin %d\n",chr_l_linebuf,l_dl_autobrksettl_struct_h.h_instr_isin,strlen(l_dl_autobrksettl_struct_h.h_instr_isin));
									strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Instrurity not valid");
									strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
									strcpy(chr_l_instrcode_a,"\0");
									int_l_error_flag = 1;
								}
								else
								{
									if(APL_FAILURE == CO_Chk_InstrValid(chr_l_instrcode_a,'Y','Y','N','N',NULL,NULL,l_debug_info_ptr))
									{
										CO_ProcMonitor(p_logfile,"\nE:Instrurity not valid.Called from DL_Proc_AutoBrkConfUpload\n",l_debug_info_ptr,p_intl_envdatastruct_h);
										strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Instrurity not valid");
										strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
										strcpy(chr_l_instrcode_a,"\0");
										int_l_error_flag = 1;
									}
								}
							}
						}
						
						if(strlen(l_dl_autobrksettl_struct_h.h_ord_no) == 0 && int_l_error_flag ==0)
						{
							fprintf(p_logfile,"\n Order No. missing for record %s\n Order No. : %s\n",chr_l_linebuf,l_dl_autobrksettl_struct_h.h_ord_no);
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Order No. missing");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							int_l_error_flag = 1;
						}
						else
							if(int_l_error_flag == 0)
							{
							
							
							
		               if(strcmp(l_dl_autobrksettl_struct_h.h_dealcd,"1")==0)
		                 {
			               strcpy(chr_l_tmptrcode,APL_DEAL_RVP);
		                 }
	                  else if(strcmp(l_dl_autobrksettl_struct_h.h_dealcd,"2")==0)
		                 {
				            strcpy(chr_l_tmptrcode,APL_DEAL_DVP);
			              }
							EXEC SQL SELECT 1 INTO :int_l_exists
							FROM DUAL 
							WHERE EXISTS (SELECT 1 FROM DL_DEAL WHERE BRK_NO =:l_dl_autobrksettl_struct_h.h_ord_no 
												AND INSTR_CODE=:chr_l_instrcode_a AND DEAL_FRM_ORD = 'Y' 
												AND DEAL_CD=:chr_l_tmptrcode
												AND DOMESTIC_CPCLT=:l_dl_autobrksettl_struct_h.h_domestic_cp);
						
							IS_ANY_ORA_ERROR

								if(int_l_exists) 
								{
									fprintf(p_logfile,"\n Order No. is not unique for record %s\n Order No. : %s\n",chr_l_linebuf,l_dl_autobrksettl_struct_h.h_ord_no);
									strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Order No. not unique");
									strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
									int_l_error_flag = 1;
								}
							}

						

						if ( strncmp(l_dl_autobrksettl_struct_h.h_dl_client,"924",3) != 0 && int_l_error_flag == 0 )
						{
							fprintf(p_logfile,"\n First 3 digits of Client h_code in this record %s\n Client h_code : %s\n",chr_l_linebuf,l_dl_autobrksettl_struct_h.h_dl_client);
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"First 3 digits of Client h_code not 924");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							int_l_error_flag=1;
						}
													
						if((int_l_error_flag == 0) && (APL_FAILURE == CO_Chk_AccValid(l_dl_autobrksettl_struct_h.h_dl_client,'Y',NULL,NULL,NULL,'Y',NULL,NULL,NULL, l_debug_info_ptr)) )
						{
							fprintf(p_logfile,"\n Account is not valid in this record %s\n Account : %s\n",chr_l_linebuf,l_dl_autobrksettl_struct_h.h_dl_client);
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Account not valid");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							int_l_error_flag = 1;
						}
						
						
						if(strlen(l_dl_autobrksettl_struct_h.h_domestic_cp) == 0 && int_l_error_flag == 0)
						{
							fprintf(p_logfile,"\n Domestice counterparty missing for record %s\n Domcp : %s\n",chr_l_linebuf,l_dl_autobrksettl_struct_h.h_domestic_cp);
							strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Domestic int_counter party missing");
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
							int_l_error_flag = 1;
						}
						else
							if(int_l_error_flag != 1)
							{
								

								if(APL_FAILURE == CO_Chk_AccValid(l_dl_autobrksettl_struct_h.h_domestic_cp,'Y','B',NULL,NULL,'Y','N','N','N',l_debug_info_ptr))
								{
									CO_ProcMonitor(p_logfile,"\nE:Domcp not valid.Called from DL_Proc_AutoBrkConfUpload\n",l_debug_info_ptr,p_intl_envdatastruct_h);
									fprintf(p_logfile,"\n Domestic counterparty invalid for record %s\n Domcp : %s\n",chr_l_linebuf,l_dl_autobrksettl_struct_h.h_domestic_cp);
									strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Domestic counterparty invalid");
									strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
									int_l_error_flag = 1;
								}	

							}
								
						
						if(strcmp(l_dl_autobrksettl_struct_h.h_dealcd,"2") == 0  && int_l_error_flag != 1)
						{
							if(APL_FAILURE == MT_Rtv_AccFldVal(l_dl_autobrksettl_struct_h.h_dl_client,"typeofacc",chr_l_typeofacc,l_debug_info_ptr))
							  {
								 CO_ProcMonitor(p_logfile,"E:Error in MT_Rtv_AccFldVal in retrivingitypeofacc indicator\n",l_debug_info_ptr,p_intl_envdatastruct_h);
								 APL_GOBACK_FAIL
                       }
                     
							if (strcmp(chr_l_typeofacc,"N") != 0 ) 
							{
							strcpy(chr_l_locncode_c,APL_NULL_STRING);

							EXEC SQL SELECT LOCATION_CD 
							INTO	:chr_l_locncode_c:l_i_locncode
							FROM	MT_INSTRUMENT
							WHERE INSTR_CODE =:chr_l_instrcode_a;

							IS_ANY_ORA_ERROR

							EXEC SQL SELECT SUM(NVL(SAFEKEEP_POS,0)),
											SUM(NVL(VAL_REC,0)),
											SUM(NVL(VAL_DEL,0))
											INTO	:l_h_safekeep_pos:l_i_safek,
													:l_h_val_rec:l_i_confrec,
													:l_h_val_del:l_i_confdel
											FROM	DL_SAFEK
											WHERE    CLIENT  =:l_dl_autobrksettl_struct_h.h_dl_client
											AND      INSTR_CODE   =:chr_l_instrcode_a
											AND		LOCATION_CD	=:chr_l_locncode_c;

								IS_ANY_ORA_ERROR

							l_posn = l_h_safekeep_pos + l_h_val_rec - l_h_val_del;
							if (l_dl_autobrksettl_struct_h.h_qty > l_posn)
							{
								fprintf(p_logfile,"\n Not enough postions for record %s\n Qty : %f\n",chr_l_linebuf,l_dl_autobrksettl_struct_h.h_qty);
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Not enough postions");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								int_l_error_flag = 1;
							}
                    }
						}
						else
							if(int_l_error_flag == 0 && strcmp(l_dl_autobrksettl_struct_h.h_dealcd,"1") != 0)
							{
								fprintf(p_logfile,"\n trade h_code not valid(RVP or DVP) for record %s\n TrdCode : %s\n",chr_l_linebuf,l_dl_autobrksettl_struct_h.h_dealcd);
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Trade Code not valid for record");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								int_l_error_flag = 1;
							}

						
						if(int_l_error_flag == 0)
						{
							int_l_diff =0;
							strcpy(chr_l_settldt,APL_NULL_STRING);
							strncpy(chr_l_settldt,l_dl_autobrksettl_struct_h.h_settldate,10);
							strcat(chr_l_settldt,"\0");
							strcpy(chr_l_trdt_a,APL_NULL_STRING);
							strncpy(chr_l_trdt_a,chr_l_sys_date,10);
							strcat(chr_l_trdt_a,"\0");
							EXEC SQL SELECT 
							to_date(:chr_l_settldt, 'DD/MM/YYYY')-to_date(:chr_l_trdt_a, 'DD/MM/YYYY')
							INTO :int_l_diff
							FROM DUAL;

							IS_ANY_ORA_ERROR;
							
							if(int_l_diff < 0 )
							{
								fprintf(p_logfile,"\n Settlement Date less than system chr_date for record %s Settldt : %s\n",chr_l_linebuf,l_dl_autobrksettl_struct_h.h_settldate);
								strcpy(l_dl_autobrksettl_struct_h.h_failreas,"Settlement chr_date less than system date");
								strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"UNMAT");
								int_l_error_flag = 1;
							}
						}

						if(int_l_error_flag ==0)
						{
							strcpy(l_dl_autobrksettl_struct_h.h_status_ind,"MAT");
							if(strcmp(l_dl_autobrksettl_struct_h.h_dealcd,"2") == 0)
							{
								l_dl_autobrksettl_struct_h.h_dl_val = l_dl_autobrksettl_struct_h.h_dl_val - l_dl_autobrksettl_struct_h.h_brokercomm;
							}
							if(strcmp(l_dl_autobrksettl_struct_h.h_dealcd,"1") == 0)
							{
								l_dl_autobrksettl_struct_h.h_dl_val = l_dl_autobrksettl_struct_h.h_dl_val + l_dl_autobrksettl_struct_h.h_brokercomm;
							}
						}

					}
					else
					{
						fprintf(p_logfile,"\nE:Error in one of the lengths of the fields of the record. Record No : %d\n",l_dl_autobrksettl_struct_h.h_rec_no);
					}
				} 


			
		
				if(int_l_repflg == 0)
				{
					fprintf(p_logfile,"\nBroker Structure values are \n");
					fprintf(p_logfile,"Rec No. |%d|",l_dl_autobrksettl_struct_h.h_rec_no); 
					fprintf(p_logfile,"\nOrd No. |%s|",l_dl_autobrksettl_struct_h.h_ord_no); 
					fprintf(p_logfile,"\nTrcode. |%s|",l_dl_autobrksettl_struct_h.h_dealcd); 
					fprintf(p_logfile,"\nPrice |%f|",l_dl_autobrksettl_struct_h.h_pr); 
					fprintf(p_logfile,"\nTrdt |%s|",l_dl_autobrksettl_struct_h.h_dlt); 
					fprintf(p_logfile,"\nISIN |%s|",l_dl_autobrksettl_struct_h.h_instr_isin); 
					fprintf(p_logfile,"\nClient |%s|",l_dl_autobrksettl_struct_h.h_dl_client); 
					fprintf(p_logfile,"\nQty |%d|",l_dl_autobrksettl_struct_h.h_qty); 
					fprintf(p_logfile,"\nCtrvl |%f|",l_dl_autobrksettl_struct_h.h_dl_val); 
					fprintf(p_logfile,"\nCcy |%s|",l_dl_autobrksettl_struct_h.h_ccy); 
					fprintf(p_logfile,"\nSettldt |%s|",l_dl_autobrksettl_struct_h.h_settldate); 
					fprintf(p_logfile,"\nBrkcomm |%f|",l_dl_autobrksettl_struct_h.h_brokercomm); 
					fprintf(p_logfile,"\nAcc |%s|",l_dl_autobrksettl_struct_h.h_dl_client); 
					fprintf(p_logfile,"\nAsd |%s|",l_dl_autobrksettl_struct_h.h_auto_setl_dt); 
					fprintf(p_logfile,"\nFile |%s|",l_dl_autobrksettl_struct_h.h_file_name); 
					fprintf(p_logfile,"\nSysdate |%s|",l_dl_autobrksettl_struct_h.h_systemdt); 
					fprintf(p_logfile,"\nStat |%s|",l_dl_autobrksettl_struct_h.h_status_ind); 
					fprintf(p_logfile,"\nReason |%s|",l_dl_autobrksettl_struct_h.h_failreas); 
					fprintf(p_logfile,"\nProc flg |%s|",l_dl_autobrksettl_struct_h.h_proc_ind); 
					fprintf(p_logfile,"\nProc chr_stat |%s|",l_dl_autobrksettl_struct_h.h_status_proc); 
					fprintf(p_logfile,"\n\n##################################################################################################################\n\n");
					EXEC SQL INSERT INTO DL_AUTOBRKSETTL
					VALUES	(
									:int_reccount,
									:l_dl_autobrksettl_struct_h.h_ord_no,
									:l_dl_autobrksettl_struct_h.h_domestic_cp,
									:l_dl_autobrksettl_struct_h.h_dealcd,
									:l_dl_autobrksettl_struct_h.h_pr,
									:l_dl_autobrksettl_struct_h.h_dlt,
									:l_dl_autobrksettl_struct_h.h_instr_isin,
									:l_dl_autobrksettl_struct_h.h_dl_client,
									ROUND(:l_dl_autobrksettl_struct_h.h_qty),
									:l_dl_autobrksettl_struct_h.h_dl_val,
									:l_dl_autobrksettl_struct_h.h_ccy,
									:l_dl_autobrksettl_struct_h.h_settldate,
									:l_dl_autobrksettl_struct_h.h_brokercomm,
									:l_dl_autobrksettl_struct_h.h_dl_client,
									:l_dl_autobrksettl_struct_h.h_auto_setl_dt,
									:l_dl_autobrksettl_struct_h.h_file_name,
									:l_dl_autobrksettl_struct_h.h_systemdt,
									:l_dl_autobrksettl_struct_h.h_status_ind,
									:l_dl_autobrksettl_struct_h.h_failreas,
									:l_dl_autobrksettl_struct_h.h_proc_ind,
									:l_dl_autobrksettl_struct_h.h_status_proc
								);
							
						IS_ANY_ORA_ERROR
				}
				if(!(int_l_reccount%C_MY_COMMITSIZE))
				{
					memset(chr_l_buf, NULL, BUFF_SIZE);
					sprintf(chr_l_buf, "Processed %d Records", int_l_reccount);

					EXEC SQL UPDATE SYS_BATCHPROC
					SET STAT_DET = :chr_l_buf
					WHERE PROCESS_NAME=:argv[0]
					AND   PROC_INIT=:argv[1]
					AND   STARTDATE=:argv[2]
					AND   STATUS='started';

					EXEC SQL COMMIT WORK;

					EXEC SQL OPEN lock_cursor1;

					IS_ANY_ORA_ERROR

					EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
     				FROM SYS_BATCHPROC
     				WHERE PROCESS_NAME=:argv[0]
        			AND   PROC_INIT=:argv[1]
        			AND   STARTDATE=:argv[2]
        			AND   STATUS='started'
     				FOR UPDATE OF PROCESSING_STATUS,STATUS;

					IS_ANY_ORA_ERROR

					if(APL_ZERO_RESULT_SET)
					{
						CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
						APL_GOBACK_FAIL
					}
				}
					
		}
		EXEC SQL CLOSE lock_cursor1;	
		IS_ANY_ORA_ERROR

	


	}
												
     
	  RETURN_SUCCESS :
		
		memset(chr_l_buf, NULL, BUFF_SIZE);
		sprintf(chr_l_buf, "Processed %d Records", int_l_reccount);

		CO_ProcMonitor(p_logfile, chr_l_buf, NULL, NULL);

		EXEC SQL UPDATE SYS_BATCHPROC
		SET STAT_DET = :chr_l_buf
		WHERE PROCESS_NAME=:argv[0]
		AND   PROC_INIT=:argv[1]
		AND   STARTDATE=:argv[2]
		AND   STATUS='started';

		EXEC SQL COMMIT WORK;
		IS_ANY_ORA_ERROR

		CO_ProcMonitor(p_logfile, "Record Committed", NULL, NULL);

		EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
		FROM SYS_BATCHPROC
		WHERE PROCESS_NAME=:argv[0]
		AND   PROC_INIT=:argv[1]
		AND   STARTDATE=:argv[2]
		AND   STATUS='started'
		FOR UPDATE OF PROCESSING_STATUS,STATUS;

		IS_ANY_ORA_ERROR

		if(APL_ZERO_RESULT_SET)
		{
			CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
			APL_GOBACK_FAIL
		}

		CO_ProcMonitor(p_logfile," Successful ! in CDBAuBrkConUpldFn",l_debug_info_ptr,p_intl_envdatastruct_h);
		CO_FreeErrLst(l_debug_info_ptr);
		fclose(l_brkfile);

   	return(APL_SUCCESS);

    RETURN_FAILURE :
		
		CO_ProcMonitor(p_logfile," Failed in CDBAuBrkConUpldFn",l_debug_info_ptr,p_intl_envdatastruct_h);
		CO_FreeErrLst(l_debug_info_ptr);
		fclose(l_brkfile);

   	return(APL_FAILURE);
}





int DL_Proc_AutoBrkConf(char *p_dt,
		char * chr_p_filename_a,
		char **argv,
		FILE *p_logfile,
		INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
		DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

SYS_DL_DEAL_STRUCT_H *l_sys_dl_deal_struct_hf;
SYS_DL_DEAL_STRUCT_H l_updsys_dl_deal_struct_h;
SYS_DL_DEAL_STRUCT_H *l_modsys_dl_deal_struct_h;
SYS_DL_DEAL_STRUCT_I l_sys_dl_deal_struct_ih;
DL_AUTOBRKSETTL_STRUCT_H *l_dl_autobrksettl_struct_h;
DL_AUTOBRKSETTL_STRUCT_I *l_dl_autobrksettl_struct_ia;
char chr_l_tempdomcp[4]=APL_NULL_STRING;
char chr_l_instrcode_h[APL_INSTRUMENTCODE_LEN]=APL_NULL_STRING;
char chr_l_sysdate_b[APL_DATE_LEN]=APL_NULL_STRING;
char chr_l_sysdt[7]=APL_NULL_STRING;
char chr_l_systemdatetime[20]=APL_NULL_STRING;
char chr_l_locncode_c[4]=APL_NULL_STRING;
char chr_l_ourtheir[2]=APL_NULL_STRING;
char chr_l_reason[101]=APL_NULL_STRING;
short l_instr_code_i=0;
char     chr_l_h_rowid[APL_ROWID_LEN]            = APL_NULL_STRING;
short    l_i_rowid                           = 0;
short l_i_locncode = 0; 
int int_l_retval=0;
int int_l_reccount=0;
int int_l_retstat=0;
int int_l_rpr_seq_num=0;
int int_l_brk_curseqno=0; 
int int_l_exists=0;
int i =0;
char  chr_l_cname[66]                = APL_NULL_STRING;
char  chr_l_domicile[2]              = APL_NULL_STRING;
char  chr_l_fxsalesflg[2]            = APL_NULL_STRING;
char  chr_l_fxpurchflg[2]            = APL_NULL_STRING;
char  chr_l_spottrdflg[2]            = APL_NULL_STRING;
char	chr_l_glclient[12]				= APL_NULL_STRING;

char chr_l_tmptrcode[2] = APL_NULL_STRING;
char **temp=NULL;
int int_num =0;
char chr_l_typeofacc[2] = APL_NULL_STRING;

double l_dbl_settle_identity_no=0.0;
char chr_l_linebuf[APL_MAXLINE_SIZE];
DL_DEAL_PMTDET_STRUCT_H     l_dl_deal_pmtdet_struct_ha;
char chr_h_system_date[APL_DATE_LEN]=APL_NULL_STRING;
   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;

EXEC SQL BEGIN DECLARE SECTION;
char chr_l_buf[BUFF_SIZE] = APL_NULL_STRING;
	EXEC SQL VAR chr_l_tempdomcp IS STRING;
	EXEC SQL VAR chr_l_buf IS STRING;
	EXEC SQL VAR chr_l_instrcode_h IS STRING;
	EXEC SQL VAR chr_l_sysdate_b IS STRING;
	EXEC SQL VAR chr_l_sysdt IS STRING;
	EXEC SQL VAR chr_l_systemdatetime IS STRING;
	EXEC SQL VAR chr_l_locncode_c IS STRING;
	EXEC SQL VAR chr_l_ourtheir IS STRING;
	EXEC SQL VAR chr_l_reason IS STRING;
	EXEC SQL VAR chr_l_glclient IS STRING;
	EXEC SQL VAR chr_l_tmptrcode IS STRING;
	EXEC SQL VAR chr_l_typeofacc IS STRING;
EXEC SQL VAR chr_g_restart_data is string;
EXEC SQL END DECLARE SECTION;

l_sys_dl_deal_struct_hf = (SYS_DL_DEAL_STRUCT_H *)calloc(1,sizeof(SYS_DL_DEAL_STRUCT_H));
l_modsys_dl_deal_struct_h = (SYS_DL_DEAL_STRUCT_H *)calloc(1,sizeof(SYS_DL_DEAL_STRUCT_H));
 APL_MALLOC_FAIL(l_sys_dl_deal_struct_hf);
 APL_MALLOC_FAIL(l_modsys_dl_deal_struct_h);
l_dl_autobrksettl_struct_h = (DL_AUTOBRKSETTL_STRUCT_H *)calloc(1,sizeof(DL_AUTOBRKSETTL_STRUCT_H));
 APL_MALLOC_FAIL(l_dl_autobrksettl_struct_h);
l_dl_autobrksettl_struct_ia = (DL_AUTOBRKSETTL_STRUCT_I *)calloc(1,sizeof( DL_AUTOBRKSETTL_STRUCT_I));
 APL_MALLOC_FAIL(l_dl_autobrksettl_struct_ia);
memset(&l_dl_deal_pmtdet_struct_ha, NULL, sizeof(DL_DEAL_PMTDET_STRUCT_H));
memset(&l_updsys_dl_deal_struct_h, NULL, sizeof(SYS_DL_DEAL_STRUCT_H));

EXEC SQL DECLARE matbrk_cursor CURSOR FOR 
SELECT * FROM DL_AUTOBRKSETTL
WHERE NAMEOF_FILE =:chr_p_filename_a
AND PROC_IND='B'
AND STATUS_PROC='P'
AND STATUS='MAT';



EXEC SQL DECLARE lock_cursor CURSOR FOR 
SELECT *
FROM DL_AUTOBRKSETTL
WHERE NAMEOF_FILE=:chr_p_filename_a
AND PROC_IND = 'B'
FOR UPDATE NOWAIT;



 EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
 FROM SYS_BATCHPROC
 WHERE PROCESS_NAME=:argv[0]
 AND   PROC_INIT=:argv[1]
 AND   STARTDATE=:argv[2]
 AND   STATUS='started'
 FOR UPDATE OF PROCESSING_STATUS,STATUS;

	IS_ANY_ORA_ERROR

   if(APL_ZERO_RESULT_SET)
   {
      CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
      APL_GOBACK_FAIL
   }

    
	
	 if ( CO_RtvSysParams(l_debug_info_ptr) == APL_FAILURE)
      	 APL_GOBACK_FAIL


EXEC SQL OPEN lock_cursor;
IS_ANY_ORA_ERROR


EXEC SQL SELECT TO_CHAR(SYS_DATE,'yymmdd') INTO :chr_l_sysdt FROM PRO_SYS_DATE;

IS_ANY_ORA_ERROR




EXEC SQL OPEN matbrk_cursor;
IS_ANY_ORA_ERROR


if(APL_FAILURE == CO_RtvSysDtTime(chr_l_systemdatetime,l_debug_info_ptr))
	{
	
	CO_ProcMonitor(p_logfile,"Error in retriving the system chr_date time \n",l_debug_info_ptr,p_intl_envdatastruct_h);
	APL_GOBACK_FAIL;
	}


	for(;;)
	{
		memset(l_sys_dl_deal_struct_hf,NULL,sizeof(SYS_DL_DEAL_STRUCT_H));
		memset(l_dl_autobrksettl_struct_h,NULL,sizeof(DL_AUTOBRKSETTL_STRUCT_H));
		memset(l_dl_autobrksettl_struct_ia,NULL,sizeof(DL_AUTOBRKSETTL_STRUCT_I));
		memset(chr_l_instrcode_h,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
		memset(chr_l_locncode_c,APL_NULL_CHAR,4);
		memset(chr_l_cname,APL_NULL_CHAR,66);
		memset(chr_l_domicile,APL_NULL_CHAR,2);
		memset(chr_l_fxsalesflg,APL_NULL_CHAR,2);
		memset(chr_l_fxpurchflg,APL_NULL_CHAR,2);
		memset(chr_l_spottrdflg,APL_NULL_CHAR,2);
		memset(chr_l_glclient,APL_NULL_CHAR,12);
		memset(chr_l_buf,APL_NULL_CHAR,BUFF_SIZE);
		memset(chr_l_tempdomcp,APL_NULL_CHAR,4);
		memset(chr_l_ourtheir,APL_NULL_CHAR,2);
		memset(chr_l_typeofacc,APL_NULL_CHAR,2);
		memset(&l_dl_deal_pmtdet_struct_ha, NULL, sizeof(DL_DEAL_PMTDET_STRUCT_H));
		memset(&l_updsys_dl_deal_struct_h, NULL, sizeof(SYS_DL_DEAL_STRUCT_H));
      
		l_instr_code_i=0;
		int_l_exists=0;
		int_l_brk_curseqno=0;

		EXEC SQL FETCH matbrk_cursor INTO :l_dl_autobrksettl_struct_h:l_dl_autobrksettl_struct_ia ;

		IS_ANY_ORA_ERROR

		if(APL_ZERO_RESULT_SET) 
			break;

	  
		
		EXEC SQL SELECT INSTR_CODE INTO :chr_l_instrcode_h:l_instr_code_i 
		FROM MT_INSTRUMENT WHERE
		INSTR_ISIN =:l_dl_autobrksettl_struct_h->h_instr_isin;
	
		IS_ANY_ORA_ERROR

		if(APL_ZERO_RESULT_SET)
		{
			strcpy(chr_l_instrcode_h,"\0");
			fprintf(p_logfile,"Error in retriving Instrurity h_code in trade confirmation\n");
		}

     

		
   	
		
		if(strcmp(l_dl_autobrksettl_struct_h->h_dealcd,"1")==0)
		  {
			strcpy(chr_l_tmptrcode,APL_DEAL_RVP);
		  }
	   else if(strcmp(l_dl_autobrksettl_struct_h->h_dealcd,"2")==0)
		  {
				strcpy(chr_l_tmptrcode,APL_DEAL_DVP);
			}
		EXEC SQL SELECT 1 INTO :int_l_exists
		FROM DUAL 
	   WHERE EXISTS (SELECT 1 FROM DL_DEAL WHERE BRK_NO =:l_dl_autobrksettl_struct_h->h_ord_no 
								AND INSTR_CODE=:chr_l_instrcode_h AND DEAL_FRM_ORD = 'Y'
								AND DEAL_CD=:chr_l_tmptrcode
								AND DOMESTIC_CPCLT=:l_dl_autobrksettl_struct_h->h_domestic_cp);

		IS_ANY_ORA_ERROR

		if(int_l_exists) 
		{
			fprintf(p_logfile,"\n Order No. is not unique Order No. : %s\n",l_dl_autobrksettl_struct_h->h_ord_no);
			strcpy(l_dl_autobrksettl_struct_h->h_failreas,"Order No. not unique");
			strcpy(l_dl_autobrksettl_struct_h->h_status_ind,"UNMAT");
		  
		  EXEC SQL UPDATE DL_AUTOBRKSETTL
		  SET  STATUS = 'UNMAT',
		  		  REAS=:l_dl_autobrksettl_struct_h->h_failreas  
		  WHERE   NAMEOF_FILE=:chr_p_filename_a 
		  AND		 REC_NO=:l_dl_autobrksettl_struct_h->h_rec_no
		  AND     PROC_IND='B'
		  AND		 STATUS ='MAT'
		  AND     STATUS_PROC='P';

			IS_ANY_ORA_ERROR
			continue;
		}

		
		EXEC SQL SELECT COUNT(*) INTO :int_l_brk_curseqno FROM DL_AUTOBRKSETTL 
		WHERE CURRENTDATE = :l_dl_autobrksettl_struct_h->h_systemdt
		AND PROC_IND = 'B'
		AND ( (STATUS_PROC = 'D' AND STATUS = 'MAT') OR STATUS_PROC = 'R' );

		IS_ANY_ORA_ERROR

		
		int_l_brk_curseqno++;
		
		int_l_reccount++;
		
		
		strcpy(l_sys_dl_deal_struct_hf->h_dl_client,l_dl_autobrksettl_struct_h->h_dl_client);
		strcpy(l_sys_dl_deal_struct_hf->h_dlt,l_dl_autobrksettl_struct_h->h_dlt);
		strcpy(l_sys_dl_deal_struct_hf->h_setldt,l_dl_autobrksettl_struct_h->h_settldate);
		strcpy(l_sys_dl_deal_struct_hf->h_instr_code,chr_l_instrcode_h);
		strcpy(l_sys_dl_deal_struct_hf->h_domcpclt_cd,l_dl_autobrksettl_struct_h->h_domestic_cp);

		strncpy(chr_l_tempdomcp,l_dl_autobrksettl_struct_h->h_domestic_cp,3);
		strcat(chr_l_tempdomcp,"\0");
		strcpy(l_sys_dl_deal_struct_hf->h_indentity_no,"PL");
		strcat(l_sys_dl_deal_struct_hf->h_indentity_no,chr_l_tempdomcp);
		strcat(l_sys_dl_deal_struct_hf->h_indentity_no,chr_l_sysdt);
		strcat(l_sys_dl_deal_struct_hf->h_indentity_no,ltoa(int_l_brk_curseqno));
		strcat(l_sys_dl_deal_struct_hf->h_indentity_no,"\0");
		strcpy(l_sys_dl_deal_struct_hf->h_classofdl,NORMALDEAL);
		l_sys_dl_deal_struct_hf->h_pr=l_dl_autobrksettl_struct_h->h_pr;
		l_sys_dl_deal_struct_hf->h_amt=l_dl_autobrksettl_struct_h->h_dl_val;
		l_sys_dl_deal_struct_hf->h_qty=l_dl_autobrksettl_struct_h->h_qty;
		
		l_sys_dl_deal_struct_hf->h_brokercomm=l_dl_autobrksettl_struct_h->h_brokercomm;
		l_sys_dl_deal_struct_hf->h_stx_comm=0;
		l_sys_dl_deal_struct_hf->h_oth_comm=0;
		l_sys_dl_deal_struct_hf->h_diffamount=0;
		l_sys_dl_deal_struct_hf->h_fx_rt=0;
		l_sys_dl_deal_struct_hf->h_rec_int_000=0;
		strcpy(l_sys_dl_deal_struct_hf->h_currencycode,l_dl_autobrksettl_struct_h->h_ccy);
		strcpy(l_sys_dl_deal_struct_hf->h_entry,SYSTEM_GEN_DEAL_IND);
		

		
		if(APL_FAILURE == MT_Rtv_AccFldVal(l_dl_autobrksettl_struct_h->h_dl_client,"ourtheir",chr_l_ourtheir,l_debug_info_ptr))
		{
			
			CO_ProcMonitor(p_logfile,"E:Error in MT_Rtv_AccFldVal in retriving ourtheir indicator\n",l_debug_info_ptr,p_intl_envdatastruct_h);
			APL_GOBACK_FAIL
		}

      
      if ( (chr_l_ourtheir[0] != 'T') && (strlen(l_dl_autobrksettl_struct_h->h_failreas) == 0) )
        {
	
    		fprintf(p_logfile,"\n Client's Account [%s] is not a T Type Account\n",l_dl_autobrksettl_struct_h->h_dl_client);
			strcpy(l_dl_autobrksettl_struct_h->h_failreas,"Not a T Type A/C");
			strcpy(l_dl_autobrksettl_struct_h->h_status_ind,"UNMAT");
		  
		  EXEC SQL UPDATE DL_AUTOBRKSETTL
		  SET  STATUS = 'UNMAT',
		  		  REAS=:l_dl_autobrksettl_struct_h->h_failreas  
		  WHERE   NAMEOF_FILE=:chr_p_filename_a 
		  AND		 REC_NO=:l_dl_autobrksettl_struct_h->h_rec_no
		  AND     PROC_IND='B'
		  AND		 STATUS ='MAT'
		  AND     STATUS_PROC='P';

			IS_ANY_ORA_ERROR
			continue;
       }

		if(strcmp(l_dl_autobrksettl_struct_h->h_dealcd,"1")==0)
		{
			strcpy(l_sys_dl_deal_struct_hf->h_dealcd,APL_DEAL_RVP);
			strcpy(l_sys_dl_deal_struct_hf->h_lrdltype,"01");
		}
		else
			if(strcmp(l_dl_autobrksettl_struct_h->h_dealcd,"2")==0)
			{
				strcpy(l_sys_dl_deal_struct_hf->h_dealcd,APL_DEAL_DVP);
				if(chr_l_ourtheir[0]=='T')
					strcpy(l_sys_dl_deal_struct_hf->h_lrdltype,"02");
				else
					if(chr_l_ourtheir[0]=='O')
						strcpy(l_sys_dl_deal_struct_hf->h_lrdltype,"02");
			}
	   
		if(APL_FAILURE == MT_Rtv_AccFldVal(l_dl_autobrksettl_struct_h->h_dl_client,"typeofacc",chr_l_typeofacc,l_debug_info_ptr))
		  {
			 CO_ProcMonitor(p_logfile,"E:Error in MT_Rtv_AccFldVal in retriving ourtheir indicator\n",l_debug_info_ptr,p_intl_envdatastruct_h);
          APL_GOBACK_FAIL
		  }
      
      if (strcmp(chr_l_typeofacc, "N") !=0 )
		 {
		   strcpy(l_sys_dl_deal_struct_hf->h_confdate,l_dl_autobrksettl_struct_h->h_dlt);
		   strcpy(l_sys_dl_deal_struct_hf->h_deal_status,STATUS_CONF);
       }
		else
		 {
		   strcpy(l_sys_dl_deal_struct_hf->h_confdate,APL_NULL_STRING);
		   strcpy(l_sys_dl_deal_struct_hf->h_deal_status,STATUS_AUTH);
		 }
		strcpy(l_sys_dl_deal_struct_hf->h_dlfromord,APL_YES_IND);
		strcpy(l_sys_dl_deal_struct_hf->h_brkrno,l_dl_autobrksettl_struct_h->h_ord_no);
		strcpy(l_sys_dl_deal_struct_hf->h_newdt,chr_l_systemdatetime);
		strcpy(l_sys_dl_deal_struct_hf->h_maker_dt,chr_l_systemdatetime);
		strcpy(l_sys_dl_deal_struct_hf->h_access_stamp,chr_l_systemdatetime);
		strcpy(l_sys_dl_deal_struct_hf->h_maker,p_intl_envdatastruct_h->usr);
		strcpy(l_sys_dl_deal_struct_hf->h_checker,p_intl_envdatastruct_h->usr);
		


		EXEC SQL SELECT location_cd INTO :chr_l_locncode_c:l_i_locncode 
		FROM MT_INSTRUMENT 
		WHERE INSTR_CODE=:chr_l_instrcode_h;

		IS_ANY_ORA_ERROR

		strcpy(l_sys_dl_deal_struct_hf->h_loccode,chr_l_locncode_c);
		strcpy(l_sys_dl_deal_struct_hf->h_ex_arena,"1");

		EXEC SQL SELECT CLN_NAME,CLN_DOMICILE,CLN_FX_SELL_IND,
								CLN_FX_BUY_IND,CLN_SPOT_DL_IND
								INTO :chr_l_cname,:chr_l_domicile,:chr_l_fxsalesflg ,
										:chr_l_fxpurchflg ,:chr_l_spottrdflg
								FROM MT_CLIENT
								WHERE CLN_CODE = :l_dl_autobrksettl_struct_h->h_dl_client;

		IS_ANY_ORA_ERROR


		strcpy(l_sys_dl_deal_struct_hf->h_domcp_custodyclt,l_sys_dl_deal_struct_hf->h_domcpclt_cd); 

		

		
		if(strcmp(l_mt_message_sys_params_struct_h.gen_fx_adv_ind,"Y") == 0)
		{
			if(l_sys_dl_deal_struct_hf->h_dealcd[0] == DEALCD_DVP)
				strcpy(l_sys_dl_deal_struct_hf->h_fx_reqd,chr_l_fxsalesflg);
			else
				if(l_sys_dl_deal_struct_hf->h_dealcd[0] == DEALCD_RVP)
					strcpy(l_sys_dl_deal_struct_hf->h_fx_reqd,chr_l_fxpurchflg);
				else
					strcpy(l_sys_dl_deal_struct_hf->h_fx_reqd,APL_NO_IND);
		}
		else
			strcpy(l_sys_dl_deal_struct_hf->h_fx_reqd,APL_NO_IND);

		if((strcmp(l_mt_core_sys_params_struct_h.proc_spot_dl_ind,APL_YES_IND) ==0)&&(VAL_VP_DEAL(l_sys_dl_deal_struct_hf->h_dealcd[0])))
		{
			strcpy(l_sys_dl_deal_struct_hf->h_isspotdl,chr_l_spottrdflg);
		}
		else
			strcpy(l_sys_dl_deal_struct_hf->h_isspotdl,APL_NO_IND);

		strcpy(l_sys_dl_deal_struct_hf->h_reginstr_ind,APL_NO_IND);
		strcpy(l_sys_dl_deal_struct_hf->h_ispymtlocal,APL_NO_IND);
		strcpy(p_intl_envdatastruct_h->h_mode,APL_FUNC_INPUT);
		strcpy(p_intl_envdatastruct_h->h_process,"I");	
		strcpy(l_sys_dl_deal_struct_hf->h_locindentity_no,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_origindentity_no,APL_NULL_STRING);
		l_sys_dl_deal_struct_hf->h_origquantity = l_dl_autobrksettl_struct_h->h_qty;
		l_sys_dl_deal_struct_hf->h_origamount = l_dl_autobrksettl_struct_h->h_dl_val;
		strcpy(l_sys_dl_deal_struct_hf->h_reapired_ind,APL_NO_IND);
		strcpy(l_sys_dl_deal_struct_hf->h_countclt,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_countcltnm,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_custinfo,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_instrdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_moneydate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_status_reg,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_info1,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_moneydate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_countclt,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_countcltnm,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_clientof,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_custinfo,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_fail_cd,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_failinfo,APL_NULL_STRING);
		l_sys_dl_deal_struct_hf->h_fx_rt=0;
		l_sys_dl_deal_struct_hf->h_amend_count=0;
		l_sys_dl_deal_struct_hf->h_number_a=0;
		strcpy(l_sys_dl_deal_struct_hf->h_report_at_eom_ind,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_billdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_locindentity_no,APL_NULL_STRING);
      
      
      if ( strlen(l_dl_autobrksettl_struct_h->h_failreas) ) 
      {

		  if (APL_FAILURE == CO_SplitStr( l_dl_autobrksettl_struct_h->h_failreas,
													  ';',
													  &int_num,
													  &temp ))
           {
			    CO_ProcMonitor(p_logfile, "E:String split processtion failed\n",l_debug_info_ptr,p_intl_envdatastruct_h);
				 APL_GOBACK_FAIL
           }

        if ( ( int_num > 0) && (strlen(temp[0])))
		  {
		    if(APL_FAILURE == MT_Rtv_AccFldVal(temp[0],"ourtheir",chr_l_ourtheir,l_debug_info_ptr))
		      {
		        fprintf(p_logfile,"Error in MT_Rtv_AccFldVal in retriving ourtheir indicator for instructing Party [%s]\n",temp[0]); 
		      }
           if (chr_l_ourtheir[0]=='T' )
			  {
		        strcpy(l_sys_dl_deal_struct_hf->h_instruct_person,temp[0]); 
			  }
	        else
           {          	
    		    fprintf(p_logfile,"\n Instr Prty Account [%s] is not a T Type Account\n",temp[0]);
			    strcpy(l_dl_autobrksettl_struct_h->h_failreas,"Not a T Type A/C");
			    strcpy(l_dl_autobrksettl_struct_h->h_status_ind,"UNMAT");
		  
		       EXEC SQL UPDATE DL_AUTOBRKSETTL
		       SET  STATUS = 'UNMAT',
		  		      REAS=:l_dl_autobrksettl_struct_h->h_failreas  
		       WHERE   NAMEOF_FILE=:chr_p_filename_a 
		       AND		 REC_NO=:l_dl_autobrksettl_struct_h->h_rec_no
		       AND     PROC_IND='B'
		       AND		 STATUS ='MAT'
		       AND     STATUS_PROC='P';

			    IS_ANY_ORA_ERROR
             APL_FREE(temp);
		       int_num=0;
			    continue;
           }
       }
		 if ( (int_num > 1) && (strlen(temp[1])) )
			 strcpy(l_sys_dl_deal_struct_hf->h_info1,temp[1]);
       else
		    strcpy(l_sys_dl_deal_struct_hf->h_info1,APL_NULL_STRING);

      }
      else
        strcpy(l_sys_dl_deal_struct_hf->h_instruct_person,APL_NULL_STRING);

		l_sys_dl_deal_struct_hf->h_rec_int_000=0;
		
		strcpy(l_sys_dl_deal_struct_hf->h_pos_stat,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_status_reg,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_matchindentity_no,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_markfaildate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_candropdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_instrconv_ind,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_ndsbldate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_ndsdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_ublckdate,APL_NULL_STRING);
		l_sys_dl_deal_struct_hf->h_delta_000=0;
		l_sys_dl_deal_struct_hf->h_delta_001=0;
		l_sys_dl_deal_struct_hf->h_delta_002=0;
		strcpy(l_sys_dl_deal_struct_hf->h_delrecdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_lastregdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_lr_chkdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_lr_confdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_lr_instrdate,APL_NULL_STRING);
	
    
      if (strcmp(chr_l_typeofacc, "N") != 0 ) {
        if (APL_FAILURE == DL_Proc_SetlSeqNoRst(APL_NULL_STRING, APL_NULL_STRING,
                                              APL_NULL_STRING, &l_dbl_settle_identity_no, 'N', p_intl_envdatastruct_h, l_debug_info_ptr))
                 APL_GOBACK_FAIL
        }
    

      l_sys_dl_deal_struct_hf->h_regmsgquantity=l_dbl_settle_identity_no; 
		strcpy(l_sys_dl_deal_struct_hf->h_tmpoutdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_tmpretdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_transmitdate,APL_NULL_STRING);
		l_sys_dl_deal_struct_hf->h_complquantity=0;
		l_sys_dl_deal_struct_hf->h_lostquantity=0;
		l_sys_dl_deal_struct_hf->h_marktrfquantity=0;
		l_sys_dl_deal_struct_hf->h_mcomplquantity=0;
		l_sys_dl_deal_struct_hf->h_outregquantity=0;
		l_sys_dl_deal_struct_hf->h_pendregquantity=0;
		l_sys_dl_deal_struct_hf->h_retregquantity=0;
		l_sys_dl_deal_struct_hf->h_stampquantity=0;
		l_sys_dl_deal_struct_hf->h_tempoutquantity=0;
		l_sys_dl_deal_struct_hf->h_tempretquantity=0;
		l_sys_dl_deal_struct_hf->h_valdeedquantity=0;
		strcpy(l_sys_dl_deal_struct_hf->h_hostdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_lr_ndsbldate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_lr_ndsdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_lr_ublckdate,APL_NULL_STRING);
		l_sys_dl_deal_struct_hf->h_number_b=0;
		strcpy(l_sys_dl_deal_struct_hf->h_clt_reqdel_flag,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_mod_hispos_ind,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hf->h_updhispos_date,APL_NULL_STRING);

   	
   	
		if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_INPUT))
   		strcpy(l_sys_dl_deal_struct_hf->h_allow_part_s,"N");
   	

      
      strcpy(l_sys_dl_deal_struct_hf->h_instruct_personnm, APL_NULL_STRING);
      strcpy(l_sys_dl_deal_struct_hf->h_clientofcode,APL_NULL_STRING);
      
		
      strcpy(l_sys_dl_deal_struct_hf->h_inter_med_person, APL_NULL_STRING);
      strcpy(l_sys_dl_deal_struct_hf->h_inter_med_personnm,APL_NULL_STRING);
      
      
      memset(chr_l_h_rowid, NULL, APL_ROWID_LEN);
      EXEC SQL SELECT DL_DEAL.ROWID, DL_DEAL.* INTO :chr_l_h_rowid:l_i_rowid,:l_updsys_dl_deal_struct_h:l_sys_dl_deal_struct_ih  FROM DL_DEAL WHERE
      CLIENT = :l_sys_dl_deal_struct_hf->h_dl_client AND
      INSTR_CODE  = :l_sys_dl_deal_struct_hf->h_instr_code AND
      SETL_DATE = :l_sys_dl_deal_struct_hf->h_setldt AND
      DEAL_DATE     = :l_sys_dl_deal_struct_hf->h_dlt AND
      DEAL_CD   = :l_sys_dl_deal_struct_hf->h_dealcd AND
      QTY      = :l_sys_dl_deal_struct_hf->h_qty AND
      DL_CLASS = 1 AND 
		ENTRY <> 'G' AND
      CURRENCY_CD  = :g_mt_commonsys_params_struct_h.dom_ccy AND 
      DEAL_STAT = 'AA' AND
      AMOUNT   BETWEEN (:l_sys_dl_deal_struct_hf->h_amt - 100 ) AND (:l_sys_dl_deal_struct_hf->h_amt + 100) AND 
      ROWNUM < 2 ;
      
		IS_ANY_ORA_ERROR

      

      if ((sqlca.sqlcode == 1403)||(strcmp(g_mt_commonsys_params_struct_h.nation_code,"PL")!=0 ))
      {
      
		int_l_retval = DL_Proc_Trd(l_sys_dl_deal_struct_hf,&int_l_rpr_seq_num,p_intl_envdatastruct_h,l_debug_info_ptr);
		if(int_l_retval == APL_FAILURE)
		{
			
			IS_ANY_ERROR_FATAL
			IS_ANY_ORA_ERROR
			memset(chr_l_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_buf, "\nFAILED TO CREATE TRADE Ord No. : %s,  Account : %s\n", l_dl_autobrksettl_struct_h->h_ord_no, l_dl_autobrksettl_struct_h->h_dl_client);
			CO_ProcMonitor(p_logfile, chr_l_buf, l_debug_info_ptr, p_intl_envdatastruct_h);
		  	memset(chr_l_reason,NULL,APL_MAXREASON_SIZE); 
		  	strcpy(chr_l_reason,(*l_debug_info_ptr)->msg);      
														  
																								  
		  EXEC SQL UPDATE DL_AUTOBRKSETTL
		  SET  STATUS = 'UNMAT',
		  		  REAS=:chr_l_reason,
				  STATUS_PROC='D'
		  WHERE   NAMEOF_FILE=:chr_p_filename_a 
		  AND 	 ORD_NO=:l_dl_autobrksettl_struct_h->h_ord_no
		  AND     PROC_IND='B'
		  AND		 REC_NO=:l_dl_autobrksettl_struct_h->h_rec_no
		  AND     STATUS_PROC='P';

			IS_ANY_ORA_ERROR

		  CO_FreeErrLst(l_debug_info_ptr);

		}
		else
		{
		   

         if (APL_FAILURE==EI_Mod_MQData(l_sys_dl_deal_struct_hf->h_dl_client,
                                        l_sys_dl_deal_struct_hf->h_indentity_no,
													 NULL,
													 NULL,
													 "B",
                                        l_debug_info_ptr))
               APL_GOBACK_FAIL

			memset(chr_l_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_buf, "\nCREATED TRADE SUCCESSFULLY FOR  Ord No. : %s, Account : %s\n", l_dl_autobrksettl_struct_h->h_ord_no,l_dl_autobrksettl_struct_h->h_dl_client);
			CO_ProcMonitor(p_logfile, chr_l_buf, NULL, p_intl_envdatastruct_h);
												  
		  EXEC SQL UPDATE DL_AUTOBRKSETTL
		  SET   STATUS_PROC='D',
					REAS='Confirmed'
		  WHERE   NAMEOF_FILE=:chr_p_filename_a
		  AND 	 ORD_NO=:l_dl_autobrksettl_struct_h->h_ord_no
		  AND	  REC_NO=:l_dl_autobrksettl_struct_h->h_rec_no
		  AND   PROC_IND='B'
		  AND	  STATUS='MAT'
		  AND   STATUS_PROC='P';

		  IS_ANY_ORA_ERROR
	  }
    }
    else
    {
		
      
      
      EXEC SQL UPDATE DL_DEAL SET  
		AMOUNT =  :l_sys_dl_deal_struct_hf->h_amt , 
		BROKERCOMM = :l_sys_dl_deal_struct_hf->h_brokercomm ,
      COST = :l_sys_dl_deal_struct_hf->h_pr ,
      DOMESTIC_CPCLT = :l_sys_dl_deal_struct_hf->h_domcpclt_cd ,
		DOMCP_CUSTODYCLT =:l_sys_dl_deal_struct_hf->h_domcp_custodyclt ,
      BRK_NO = :l_sys_dl_deal_struct_hf->h_brkrno ,
      LR_DL_CLASS = :l_sys_dl_deal_struct_hf->h_lrdltype ,
      ENTRY = :l_sys_dl_deal_struct_hf->h_entry,
      DEAL_FRM_ORD = :l_sys_dl_deal_struct_hf->h_dlfromord,
      INSTRUCT_PERSON = :l_sys_dl_deal_struct_hf->h_instruct_person,
      INFO1 = :l_sys_dl_deal_struct_hf->h_info1,
      INFORMATON = CHR(4) ||'SPA'|| CHR(5) ||  :l_sys_dl_deal_struct_hf->h_indentity_no || CHR(4)  
      WHERE
      ROWID = :chr_l_h_rowid ;

		IS_ANY_ORA_ERROR
     
      

			memset(chr_h_system_date,APL_NULL_CHAR,APL_DATE_LEN);
         if(APL_FAILURE == CO_RtvSysDt(chr_h_system_date,l_debug_info_ptr))
         {
            CO_ProcMonitor(p_logfile,"E:Failed to get system chr_date\n",l_debug_info_ptr,NULL);
            APL_GOBACK_FAIL
         }
      
		strcpy(l_dl_deal_pmtdet_struct_ha.h_dl_client, l_sys_dl_deal_struct_hf->h_dl_client);
		strcpy(l_dl_deal_pmtdet_struct_ha.h_indentity_no, l_updsys_dl_deal_struct_h.h_indentity_no);
		strcpy(l_dl_deal_pmtdet_struct_ha.h_verfied_with, l_updsys_dl_deal_struct_h.h_verfied_with);
		strcpy(l_dl_deal_pmtdet_struct_ha.h_info1, l_updsys_dl_deal_struct_h.h_info1);
		strcpy(l_dl_deal_pmtdet_struct_ha.h_access_stamp,l_updsys_dl_deal_struct_h.h_access_stamp);
		strcpy(l_dl_deal_pmtdet_struct_ha.h_brkrno,l_sys_dl_deal_struct_hf->h_brkrno);
		l_dl_deal_pmtdet_struct_ha.h_diffamount = l_updsys_dl_deal_struct_h.h_diffamount;
		strcpy(l_dl_deal_pmtdet_struct_ha.h_confdate,chr_h_system_date);
		strcpy(l_dl_deal_pmtdet_struct_ha.h_ispart_,"N");
		l_dl_deal_pmtdet_struct_ha.h_newquantity = 0;
		l_dl_deal_pmtdet_struct_ha.h_newamount = 0;
		strcpy(l_dl_deal_pmtdet_struct_ha.h_newindentity_no, APL_NULL_STRING);
		strcpy(l_dl_deal_pmtdet_struct_ha.h_newlocindentity_no, APL_NULL_STRING);
		l_dl_deal_pmtdet_struct_ha.h_grossamount = 0;


		if ( APL_FAILURE == DL_Mod_DLPmt(&l_dl_deal_pmtdet_struct_ha,p_intl_envdatastruct_h, l_debug_info_ptr) )
		{
			IS_ANY_ERROR_FATAL
			IS_ANY_ORA_ERROR
			memset(chr_l_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_buf, "\nFAILED TO PREMATCH TRADE Ord No. : %s,  Account : %s\n", l_dl_autobrksettl_struct_h->h_ord_no, l_dl_autobrksettl_struct_h->h_dl_client);
			CO_ProcMonitor(p_logfile, chr_l_buf, l_debug_info_ptr, p_intl_envdatastruct_h);
		  	memset(chr_l_reason,NULL,APL_MAXREASON_SIZE); 
		  	strcpy(chr_l_reason,(*l_debug_info_ptr)->msg);      
														  
																								  
		  EXEC SQL UPDATE DL_AUTOBRKSETTL
		  SET  STATUS = 'UNMAT',
		  		  REAS=:chr_l_reason,
				  STATUS_PROC='D'
		  WHERE   NAMEOF_FILE=:chr_p_filename_a 
		  AND 	 ORD_NO=:l_dl_autobrksettl_struct_h->h_ord_no
		  AND     PROC_IND='B'
		  AND		 REC_NO=:l_dl_autobrksettl_struct_h->h_rec_no
		  AND     STATUS_PROC='P';

			IS_ANY_ORA_ERROR

		  CO_FreeErrLst(l_debug_info_ptr);

		}
		else
		{
			memset(chr_l_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_buf, "\nPREMATCHED TRADE SUCCESSFULLY FOR  Ord No. : %s, Account : %s\n", l_dl_autobrksettl_struct_h->h_ord_no,l_dl_autobrksettl_struct_h->h_dl_client);
			CO_ProcMonitor(p_logfile, chr_l_buf, NULL, p_intl_envdatastruct_h);
												  
		  EXEC SQL UPDATE DL_AUTOBRKSETTL
		  SET   STATUS_PROC='D',
					REAS='Confirmed'
		  WHERE   NAMEOF_FILE=:chr_p_filename_a
		  AND 	 ORD_NO=:l_dl_autobrksettl_struct_h->h_ord_no
		  AND	  REC_NO=:l_dl_autobrksettl_struct_h->h_rec_no
		  AND   PROC_IND='B'
		  AND	  STATUS='MAT'
		  AND   STATUS_PROC='P';

		  IS_ANY_ORA_ERROR
	  }

    }
  
	
		if(!(int_l_reccount%C_MY_COMMITSIZE))
		{
			

			memset(chr_l_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_buf, "Processed %d Records", int_l_reccount);

			EXEC SQL UPDATE SYS_BATCHPROC
			SET STAT_DET = :chr_l_buf
			WHERE PROCESS_NAME=:argv[0]
			AND   PROC_INIT=:argv[1]
			AND   STARTDATE=:argv[2]
			AND   STATUS='started';

			EXEC SQL COMMIT WORK;
			IS_ANY_ORA_ERROR

			CO_ProcMonitor(p_logfile, "Record Committed", NULL, NULL);
		  
			
			EXEC SQL OPEN lock_cursor;
			
			IS_ANY_ORA_ERROR

			EXEC SQL OPEN matbrk_cursor;

			IS_ANY_ORA_ERROR

																																							  
		  EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
		  FROM SYS_BATCHPROC
		  WHERE PROCESS_NAME=:argv[0]
		  AND   PROC_INIT=:argv[1]
		  AND   STARTDATE=:argv[2]
		  AND   STATUS='started'
		  FOR UPDATE OF PROCESSING_STATUS,STATUS;

		  IS_ANY_ORA_ERROR

		  if(APL_ZERO_RESULT_SET)
		  {
			  CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
			  APL_GOBACK_FAIL
		  }

		}

	

	}
	
	EXEC SQL CLOSE matbrk_cursor;
	EXEC SQL CLOSE lock_cursor;

	IS_ANY_ORA_ERROR


	  RETURN_SUCCESS :
		
		memset(chr_l_buf, NULL, BUFF_SIZE);
		sprintf(chr_l_buf, "Processed %d Records", int_l_reccount);

		CO_ProcMonitor(p_logfile, chr_l_buf, NULL, NULL);
						
		EXEC SQL UPDATE SYS_BATCHPROC
			SET STAT_DET = :chr_l_buf
			WHERE PROCESS_NAME=:argv[0]
			AND   PROC_INIT=:argv[1]
			AND   STARTDATE=:argv[2]
			AND   STATUS='started';

		EXEC SQL COMMIT WORK;
		IS_ANY_ORA_ERROR

		CO_ProcMonitor(p_logfile, "Record Committed", NULL, NULL);

		EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
			FROM SYS_BATCHPROC
			WHERE PROCESS_NAME=:argv[0]
			AND   PROC_INIT=:argv[1]
			AND   STARTDATE=:argv[2]
			AND   STATUS='started'
			FOR UPDATE OF PROCESSING_STATUS,STATUS;

		IS_ANY_ORA_ERROR

		if(APL_ZERO_RESULT_SET)
		{
			CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
			APL_GOBACK_FAIL
		}

		CO_ProcMonitor(p_logfile," Successful ! in CDBAuBrkConFn",l_debug_info_ptr,p_intl_envdatastruct_h);
		free(l_dl_autobrksettl_struct_h);
		free(l_dl_autobrksettl_struct_ia);
		free(l_sys_dl_deal_struct_hf);
      APL_FREE(temp);
		CO_FreeErrLst(l_debug_info_ptr);

   	return(APL_SUCCESS);

    RETURN_FAILURE :
		
		CO_ProcMonitor(p_logfile," Failed in CDBAuBrkConFn",l_debug_info_ptr,p_intl_envdatastruct_h);
		free(l_dl_autobrksettl_struct_h);
		free(l_dl_autobrksettl_struct_ia);
		free(l_sys_dl_deal_struct_hf);
      APL_FREE(temp);
		CO_FreeErrLst(l_debug_info_ptr);
   	return(APL_FAILURE);
}



int	DL_Proc_AutoBrkSettle(char 					*chr_p_filename_a, 
						char						**argv,
				   	FILE						*p_logfile,
						INTL_ENV_DATA_STRUCT_H	*p_intl_envdatastruct_h,
						DEBUG_INFO_STRUCT_H			**l_debug_info_ptr)
{
	

   char  	chr_temp_buffer[APL_MAXREASON_SIZE];
	char		chr_l_buf[BUFF_SIZE]						= APL_NULL_STRING;
	char		chr_l_h_client_a[APL_CLIENT_LENGTH]			= APL_NULL_STRING;
	char		chr_l_h_refno_A[APL_TXNREFNO_LEN]			= APL_NULL_STRING;
	char		chr_l_h_exarena[EX_ARENA_LEN]				= APL_NULL_STRING;
	char		chr_l_h_posn_status[STATUS_LEN]	= APL_NULL_STRING;
	char		chr_l_h_trcode_a[APL_FLAG_LENGTH]				= APL_NULL_STRING;
	char		chr_l_trd_status[APL_STATUS_LEN]			= APL_NULL_STRING;
	char		chr_l_h_access_stamp[APL_DATE_LEN]		= APL_NULL_STRING;
	char		chr_l_actual_setl_dt[APL_DATE_LEN]		= APL_NULL_STRING;
	char		chr_l_h_brokerno[BRK_CD_LEN]		   = APL_NULL_STRING;
	char		chr_l_h_isin[13]					         = APL_NULL_STRING;
   
	char     chr_l_h_domcpac[APL_CLIENT_LENGTH]        = APL_NULL_STRING;
	char     chr_l_tmptrcode[2]                      = APL_NULL_STRING;
	

	int		int_l_reccount									= 0;

	double	l_h_cost									= 0.0;
	double	l_h_quantity_a										= 0.0;
	double   l_h_brokercomm									= 0.0;
	
	short		l_i_account									= 0;
	short		l_i_refno									= 0;
	short		l_i_exarena									= 0;
	short		l_i_posn_status							= 0;
	short		int_l_i_trcode									= 0;
	short		l_i_access_stamp							= 0;
	short		l_i_price									= 0;
	short		int_l_i_qty										= 0;
	short    l_i_brkcomm								 	= 0;
	short		l_i_brokerno								= 0;
	short		int_l_i_isin										= 0;
   short    l_i_domcpac                         = 0;

	DL_DEAL_SSTDET_STRUCT_H	*l_deal_sstdet_struct_h			= NULL;

   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;
	

	l_deal_sstdet_struct_h = (DL_DEAL_SSTDET_STRUCT_H *)calloc(1, sizeof(DL_DEAL_SSTDET_STRUCT_H));
	APL_MALLOC_FAIL(l_deal_sstdet_struct_h);

	

	EXEC SQL VAR chr_l_h_client_a IS STRING;
	EXEC SQL VAR chr_l_h_refno_A IS STRING;
	EXEC SQL VAR chr_l_h_brokerno IS STRING;
	EXEC SQL VAR chr_l_h_exarena IS STRING;
	EXEC SQL VAR chr_l_h_posn_status IS STRING;
	EXEC SQL VAR chr_l_h_trcode_a IS STRING;
	EXEC SQL VAR chr_l_h_access_stamp IS STRING;
	EXEC SQL VAR chr_l_h_isin IS STRING;
	EXEC SQL VAR chr_temp_buffer IS STRING;
   EXEC SQL VAR chr_l_h_domcpac IS STRING;
   EXEC SQL VAR chr_l_tmptrcode IS STRING;
EXEC SQL VAR chr_g_restart_data is string;

	CO_ProcMonitor(p_logfile, "Entered Function CDBAutoSettlConFn", NULL, p_intl_envdatastruct_h);

	

   EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
   FROM SYS_BATCHPROC
   WHERE PROCESS_NAME=:argv[0]
   AND   PROC_INIT=:argv[1]
   AND   STARTDATE=:argv[2]
   AND   STATUS='started'
   FOR UPDATE OF PROCESSING_STATUS,STATUS;

	IS_ANY_ORA_ERROR

   if(APL_ZERO_RESULT_SET)
   {
      CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
      APL_GOBACK_FAIL
   }

    
	
	 if ( CO_RtvSysParams(l_debug_info_ptr) == APL_FAILURE)
      	 APL_GOBACK_FAIL

	

	EXEC SQL DECLARE wrk_cursor CURSOR FOR 	
		SELECT *
 				FROM DL_AUTOBRKSETTL
				WHERE NAMEOF_FILE=:chr_p_filename_a
		AND	PROC_IND='S'
		FOR UPDATE NOWAIT;

   if(APL_ZERO_RESULT_SET)
   {
      CO_ProcMonitor(p_logfile,"E:No entry in CAUTOBRKSETTL",NULL,NULL);
      APL_GOBACK_FAIL
	}
	

	strcpy(chr_l_trd_status, STATUS_DEL_UAUTH);


	
	EXEC SQL DECLARE gst_cursor CURSOR FOR
	SELECT 	a.client, a.IDENTIY_NO, a.ex_arena, a.COST, a.STATUS, 
				a.QTY, a.deal_cd, a.access_stamp, a.brokercomm , a.BRK_NO, b.INSTR_ISIN,
            a.domestic_cpclt 
	FROM DL_DEAL a,MT_INSTRUMENT b
	WHERE INSTRUMENT_DT is NULL
   AND   VAL_FDT is not NULL
   AND   a.INSTR_CODE = b.INSTR_CODE	
	AND   BRK_NO IN 
				(SELECT ORD_NO 
				FROM DL_AUTOBRKSETTL
				WHERE 
				NAMEOF_FILE=:chr_p_filename_a AND status = 'MAT'
				AND   PROC_IND='S'
				AND	STATUS_PROC='P' AND DL_AUTOBRKSETTL.INSTR_ISIN = b.INSTR_ISIN ) 
				AND   a.DEAL_FRM_ORD = 'Y'
	AND (FAILREASON_CD IS NULL OR FAILREASON_CD BETWEEN '90' AND '99')
	ORDER BY BRK_NO 
	FOR UPDATE OF a.access_stamp;
 


	EXEC SQL OPEN gst_cursor;
	EXEC SQL OPEN wrk_cursor;

	IS_ANY_ORA_ERROR

	for (;;)
	{
		

		memset(chr_l_h_client_a, NULL, APL_CLIENT_LENGTH);
		memset(chr_l_h_refno_A, NULL, APL_TXNREFNO_LEN);
		memset(chr_l_h_exarena, NULL, EX_ARENA_LEN);
		memset(chr_l_h_posn_status, NULL, STATUS_LEN);
		memset(chr_l_h_trcode_a, NULL, APL_FLAG_LENGTH);
		memset(chr_l_h_access_stamp, NULL, APL_DATE_LEN);
		memset(chr_l_h_brokerno, NULL, BRK_CD_LEN);
		memset(chr_l_h_isin, NULL, 13);
		
		memset(chr_l_h_domcpac, NULL, APL_CLIENT_LENGTH);
		l_h_cost = 0.0;
		l_h_quantity_a	 = 0.0;
		l_h_brokercomm = 0.0;
		l_i_account = 0;
		l_i_refno = 0;
		l_i_exarena = 0;
		l_i_posn_status = 0;
		int_l_i_trcode = 0;
		l_i_access_stamp = 0;
		l_i_price = 0;
		int_l_i_qty = 0;
		l_i_brkcomm = 0;
		l_i_brokerno = 0;
		int_l_i_isin = 0;
		l_i_domcpac = 0;


		EXEC SQL FETCH gst_cursor INTO		:chr_l_h_client_a:l_i_account,
														:chr_l_h_refno_A:l_i_refno,
														:chr_l_h_exarena:l_i_exarena,
														:l_h_cost:l_i_price,
														:chr_l_h_posn_status:l_i_posn_status,
														:l_h_quantity_a:int_l_i_qty,
														:chr_l_h_trcode_a:int_l_i_trcode,
														:chr_l_h_access_stamp:l_i_access_stamp,
														:l_h_brokercomm:l_i_brkcomm,
														:chr_l_h_brokerno:l_i_brokerno,
														:chr_l_h_isin:int_l_i_isin,
														:chr_l_h_domcpac:l_i_domcpac;


		if (APL_ZERO_RESULT_SET) break;	

		IS_ANY_ORA_ERROR

		if(l_i_price==-1) l_h_cost = 0.0;
                if (l_i_brkcomm==-1) l_h_brokercomm = 0.0;


		memset(chr_l_buf,NULL,BUFF_SIZE);
		sprintf(chr_l_buf,"\n Now Processing Record with RefNo :%s: Broker refno :%s:",chr_l_h_refno_A,chr_l_h_brokerno);
		CO_ProcMonitor(p_logfile,chr_l_buf,NULL,NULL);

		

		memset(l_deal_sstdet_struct_h, NULL, sizeof(DL_DEAL_SSTDET_STRUCT_H));
		strcpy(l_deal_sstdet_struct_h->h_dl_client, chr_l_h_client_a);
		strcpy(l_deal_sstdet_struct_h->h_indentity_no, chr_l_h_refno_A);
		strcpy(l_deal_sstdet_struct_h->h_ispart_, "N");
		l_deal_sstdet_struct_h->h_newquantity = 0.0;
		l_deal_sstdet_struct_h->h_newamount = 0.0;
		strcpy(l_deal_sstdet_struct_h->h_newindentity_no, APL_NULL_STRING);

						

		
      
		

		if (strcmp(chr_l_h_trcode_a, APL_DEAL_RVP)==0)
			 strcpy(chr_l_tmptrcode,"1");
      else if (strcmp(chr_l_h_trcode_a, APL_DEAL_DVP)==0)
			 strcpy(chr_l_tmptrcode, "0"); 
		  
		EXEC SQL SELECT MAX(AUTO_SETL_DT)
				   INTO :chr_l_actual_setl_dt
					FROM DL_AUTOBRKSETTL
					WHERE ORD_NO=:chr_l_h_brokerno
					AND INSTR_ISIN = :chr_l_h_isin
					AND DOMESTIC_CP = :chr_l_h_domcpac
					AND DEAL_CD = :chr_l_tmptrcode
					AND PROC_IND = 'S'
					AND NAMEOF_FILE=:chr_p_filename_a AND status_ind = 'MAT';


		if (APL_ZERO_RESULT_SET)
				{
					CO_ProcMonitor(p_logfile, "Could not find row in CAUTOBRKSETTL ..." , l_debug_info_ptr, p_intl_envdatastruct_h);
					APL_GOBACK_FAIL;
				}

		IS_ANY_ORA_ERROR;

		if (!strcmp(chr_l_h_exarena, EX_ARENA_STX))
		{
			strcpy(l_deal_sstdet_struct_h->h_instrdate, chr_l_actual_setl_dt);
			if (VAL_VP_DEAL(chr_l_h_trcode_a[0]))
			{
				strcpy(l_deal_sstdet_struct_h->h_moneydate, chr_l_actual_setl_dt);
			}
		}
		else
		{
			strcpy(l_deal_sstdet_struct_h->h_instrdate, chr_l_actual_setl_dt);
			if (VAL_VP_DEAL(chr_l_h_trcode_a[0]))
			{
				strcpy(l_deal_sstdet_struct_h->h_moneydate, chr_l_actual_setl_dt);
			}
		}

		

		l_deal_sstdet_struct_h->h_pr = l_h_cost; 
		l_deal_sstdet_struct_h->h_brokercomm = l_h_brokercomm;
		if (l_mt_core_sys_params_struct_h.proc_reg_ind[0] == 'Y')
		{
			if (VAL_DELIVER_DEAL(chr_l_h_trcode_a[0]))
			{
				strcpy(l_deal_sstdet_struct_h->h_sel_forreg, APL_NULL_STRING);
				if (!strcmp(chr_l_h_posn_status, STATUS_000))
				{
					l_deal_sstdet_struct_h->h_delta_000 = l_h_quantity_a;
				}
				else if (!strcmp(chr_l_h_posn_status, STATUS_001))
				{
					l_deal_sstdet_struct_h->h_delta_001 = l_h_quantity_a;
				}
				else if (!strcmp(chr_l_h_posn_status, STATUS_003))
				{
					l_deal_sstdet_struct_h->h_delta_002 = l_h_quantity_a;
				}
				else
				{
					CO_InsertErr(	l_debug_info_ptr,
											ERR_DATA_INTEGRITY,
											chr_l_h_client_a,
											chr_l_h_refno_A,
											"DeliverTrd:posn",
											__LINE__,
											__FILE__ );
					APL_GOBACK_FAIL
				}
			}
			else 
			{
				strcpy(l_deal_sstdet_struct_h->h_sel_forreg, "N");
				if (!strcmp(chr_l_h_posn_status, STATUS_000))
				{
					l_deal_sstdet_struct_h->h_pendregquantity = 0.0;
					l_deal_sstdet_struct_h->h_marktrfquantity = 0.0;
					l_deal_sstdet_struct_h->h_mcomplquantity  = 0.0;
					l_deal_sstdet_struct_h->h_rec_int_000  = 0.0;
				}
				else
				{
					l_deal_sstdet_struct_h->h_pendregquantity = 0.0;
					l_deal_sstdet_struct_h->h_marktrfquantity = 0.0;
					l_deal_sstdet_struct_h->h_mcomplquantity  = l_h_quantity_a;
					l_deal_sstdet_struct_h->h_rec_int_000  = 0.0;
				}
			}
		}
		else
		{
			strcpy(l_deal_sstdet_struct_h->h_sel_forreg, APL_NULL_STRING);
			l_deal_sstdet_struct_h->h_pendregquantity = 0.0;
			l_deal_sstdet_struct_h->h_marktrfquantity = 0.0;
			l_deal_sstdet_struct_h->h_mcomplquantity  = 0.0;
			l_deal_sstdet_struct_h->h_rec_int_000  = 0.0;
			l_deal_sstdet_struct_h->h_delta_000  = 0.0;
			l_deal_sstdet_struct_h->h_delta_001  = 0.0;
			l_deal_sstdet_struct_h->h_delta_002  = 0.0;
		}

		strcpy(l_deal_sstdet_struct_h->h_access_stamp, chr_l_h_access_stamp);

		
      DL_Prnt_AutoBrkSettleRow(l_deal_sstdet_struct_h, p_logfile);

		
	
		if (APL_FAILURE == DL_Proc_DLSetlSing(	l_deal_sstdet_struct_h,
                                          APL_NULL_STRING,
														p_intl_envdatastruct_h,
														l_debug_info_ptr ))
		{
			IS_ANY_ERROR_FATAL
			IS_ANY_ORA_ERROR;
			memset(chr_l_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_buf, "\nFAILED TO SETTLE TRADE %s, %s", chr_l_h_client_a, chr_l_h_refno_A);
			CO_ProcMonitor(p_logfile, chr_l_buf, l_debug_info_ptr, p_intl_envdatastruct_h);
			
			memset(chr_temp_buffer,NULL,APL_MAXREASON_SIZE);	
			strcpy(chr_temp_buffer,(*l_debug_info_ptr)->msg);		
	
			
			EXEC SQL UPDATE DL_AUTOBRKSETTL
				SET 	STATUS_PROC='D',
						STATUS='UNMAT',
					 	REAS=:chr_temp_buffer	
				WHERE   NAMEOF_FILE=:chr_p_filename_a	
				AND ORD_NO=:chr_l_h_brokerno
				AND INSTR_ISIN = :chr_l_h_isin
				AND DOMESTIC_CP = :chr_l_h_domcpac
				AND DEAL_CD = :chr_l_tmptrcode
				AND   PROC_IND='S'
				AND   STATUS_PROC='P';
			IS_ANY_ORA_ERROR;

			CO_FreeErrLst(l_debug_info_ptr);
		}
		else
		{
			memset(chr_l_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_buf, "\nSETTLED TRADE %s, %s", chr_l_h_client_a, chr_l_h_refno_A);
			CO_ProcMonitor(p_logfile, chr_l_buf, NULL, p_intl_envdatastruct_h);
	
			memset(chr_temp_buffer,NULL,APL_MAXREASON_SIZE);	
			strcpy(chr_temp_buffer,"Settled Trade with success ");		

			
			EXEC SQL UPDATE DL_AUTOBRKSETTL
				SET 	STATUS_PROC='D',
					 	REAS=:chr_temp_buffer	
				WHERE NAMEOF_FILE=:chr_p_filename_a	
				AND	ORD_NO=:chr_l_h_brokerno
				AND INSTR_ISIN = :chr_l_h_isin
				AND DOMESTIC_CP = :chr_l_h_domcpac
				AND DEAL_CD = :chr_l_tmptrcode
				AND   PROC_IND='S'
				AND   STATUS_PROC='P';

			IS_ANY_ORA_ERROR;
		}
		
		++int_l_reccount;

		if (!int_l_reccount%C_MY_COMMITSIZE)
		{
			

			memset(chr_l_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_buf, "Processed %d Records", int_l_reccount);

			EXEC SQL UPDATE SYS_BATCHPROC
			SET STAT_DET = :chr_l_buf
  	    	WHERE PROCESS_NAME=:argv[0]
  	    	AND   PROC_INIT=:argv[1]
  	    	AND   STARTDATE=:argv[2]
  	  		AND   STATUS='started';

			EXEC SQL COMMIT WORK;
			IS_ANY_ORA_ERROR

			CO_ProcMonitor(p_logfile, "Record Committed", NULL, NULL);

			EXEC SQL OPEN gst_cursor;
			EXEC SQL OPEN wrk_cursor;

			IS_ANY_ORA_ERROR
	
  	    	EXEC SQL SELECT PROCESSING_STATUS
  	    	FROM SYS_BATCHPROC
  	    	WHERE PROCESS_NAME=:argv[0]
  	    	AND   PROC_INIT=:argv[1]
  	    	AND   STARTDATE=:argv[2]
  	  		AND   STATUS='started'
     		FOR UPDATE OF PROCESSING_STATUS,STATUS;

			IS_ANY_ORA_ERROR

 	  		if(APL_ZERO_RESULT_SET)
     		{
     		   CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
     	 		APL_GOBACK_FAIL
     		}

			
	

			IS_ANY_ORA_ERROR
		} 
	} 



	EXEC SQL UPDATE DL_AUTOBRKSETTL
	SET STATUS = 'UNMAT' ,
	     STATUS_PROC = 'D' ,
   	  REAS = 'Cannot SETL failed trade'
	WHERE NAMEOF_FILE =:chr_p_filename_a
		   AND PROC_IND = 'S'
		   AND STATUS_PROC = 'P'
		   AND STATUS     = 'MAT'
		   AND EXISTS (SELECT 1 FROM DL_DEAL,MT_INSTRUMENT
		               WHERE BRK_NO = DL_AUTOBRKSETTL.ORD_NO
	                    AND MT_INSTRUMENT.INSTR_CODE =DL_DEAL.INSTR_CODE
	                    AND MT_INSTRUMENT.INSTR_ISIN = DL_AUTOBRKSETTL.INSTR_ISIN
		                 AND NOT (FAILREASON_CD IS NULL OR FAILREASON_CD BETWEEN '90' AND '99')
	                    AND DEAL_FRM_ORD = 'Y'
	                    AND INSTRUMENT_DT IS NULL
	                    AND DL_DEAL.DOMESTIC_CPCLT = DL_AUTOBRKSETTL.DOMESTIC_CP
                       AND DL_DEAL.DEAL_CD  = DL_AUTOBRKSETTL.DEAL_CD);

	  IS_ANY_ORA_ERROR;
	  


	EXEC SQL UPDATE DL_AUTOBRKSETTL 
	SET status_ind = 'UNMAT' , STATUS_PROC = 'D' , REAS = 'Trade Already Settled'
	WHERE NAMEOF_FILE =:chr_p_filename_a
	AND PROC_IND = 'S'		
	AND STATUS_PROC='P'	
	AND status_ind = 'MAT' ;
  
   IS_ANY_ORA_ERROR;

	EXEC SQL UPDATE DL_AUTOBRKSETTL
	SET 	STATUS_PROC='D'
	WHERE NAMEOF_FILE=:chr_p_filename_a	
	AND   PROC_IND='S'
	AND STATUS = 'UNMAT'
	AND   STATUS_PROC='P';

   IS_ANY_ORA_ERROR;

	EXEC SQL CLOSE gst_cursor;
	EXEC SQL CLOSE wrk_cursor;

	IS_ANY_ORA_ERROR

	if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr)) APL_GOBACK_FAIL

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	
		memset(chr_l_buf, NULL, BUFF_SIZE);
		sprintf(chr_l_buf, "Processed %d Records", int_l_reccount);

		CO_ProcMonitor(p_logfile, chr_l_buf, NULL, NULL);
		
		EXEC SQL UPDATE SYS_BATCHPROC
		SET STAT_DET = :chr_l_buf
  	 	WHERE PROCESS_NAME=:argv[0]
  	  	AND   PROC_INIT=:argv[1]
  	  	AND   STARTDATE=:argv[2]
  	  	AND   STATUS='started';

      EXEC SQL COMMIT WORK;
      IS_ANY_ORA_ERROR

		CO_ProcMonitor(p_logfile, "Record Committed", NULL, NULL);

      EXEC SQL SELECT PROCESSING_STATUS
      FROM SYS_BATCHPROC
      WHERE PROCESS_NAME=:argv[0]
      AND   PROC_INIT=:argv[1]
      AND   STARTDATE=:argv[2]
      AND   STATUS='started'
      FOR UPDATE OF PROCESSING_STATUS,STATUS;

		IS_ANY_ORA_ERROR

      if(APL_ZERO_RESULT_SET)
      {
         CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
         APL_GOBACK_FAIL
      }

		CO_ProcMonitor(	p_logfile,
						"Leaving Function DL_Proc_AutoBrkSettle with Success\n",
						NULL,
						NULL);
		return(APL_SUCCESS);

	RETURN_FAILURE :
		CO_ProcMonitor(	p_logfile,
						"Got Errors : ",
						l_debug_info_ptr,
						p_intl_envdatastruct_h );
		CO_FreeErrLst(l_debug_info_ptr);

		CO_ProcMonitor(	p_logfile,
						"Leaving Function DL_Proc_AutoBrkSettle with Errors\n",
						NULL,
						NULL);
		return(APL_FAILURE);
}








int	DL_Proc_AutoBrkSettleUpload(char 					*p_uploaddir, 
						char 						*chr_p_filename_a,	
						char						**argv,
				   	FILE						*p_logfile,
						INTL_ENV_DATA_STRUCT_H	*p_intl_envdatastruct_h,
						DEBUG_INFO_STRUCT_H			**l_debug_info_ptr)
{
	

	
	char		chr_l_f_buf[BUFF_SIZE]							= APL_NULL_STRING;
	char		chr_l_trcode_a[APL_FLAG_LENGTH]						= APL_NULL_STRING;
	char		int_l_status[APL_STATUS_LEN]					= APL_NULL_STRING;
	char     chr_sysdate[APL_DATE_LEN] 					   = APL_NULL_STRING;
	char 		chr_l_linebuf[APL_MAXLINE_SIZE]			   = APL_NULL_STRING; 
	char 		chr_reason_str[APL_MAXREASON_SIZE] 			= APL_NULL_STRING; 
	char 		chr_l_instrcode_cinstrument[APL_INSTRUMENTCODE_LEN] 		= APL_NULL_STRING;
	char 		chr_l_instrcode_ctrade[APL_INSTRUMENTCODE_LEN] 			= APL_NULL_STRING;
	char		chr_l_date_temp[3]									= APL_NULL_STRING;
	char		chr_l_month_temp[3]								= APL_NULL_STRING;
	char		chr_l_year_temp[5]									= APL_NULL_STRING;
	int		int_l_reccount										= 0;
	int 		int_record_flg 										= 0;
	int 		int_num 												= 0;
	int 		int_l_no_of_rec 									= 0;
	double	l_quantity_a												= 0.0;             
	char 	 **chr_l_record_field 								= NULL;

	int 		int_l_i_ordno										= 0;
	int 		int_l_i_trcode										= 0;
	int 		int_l_i_isin											= 0;
	int 		int_l_i_qty											= 0;
	int 		int_l_i_asd											= 0;
	int 		int_l_i_reason										= 0;
	
	char chr_l_temp_isin_in[14] = APL_NULL_STRING;
	char chr_l_temp_isin_ou[14] = APL_NULL_STRING;
	char chr_l_temp_isin_ou1[14] = APL_NULL_STRING;
		
	FILE *l_feedfile;
	
	DL_AUTOBRKSETTL_STRUCT_H	*l_dl_autobrksettl_struct_ha = NULL;
	DL_AUTOBRKSETTL_STRUCT_I	*l_dl_autobrksettl_struct_i = NULL;

	
	
	
	l_dl_autobrksettl_struct_ha = (DL_AUTOBRKSETTL_STRUCT_H *)calloc(1, sizeof(DL_AUTOBRKSETTL_STRUCT_H));
	APL_MALLOC_FAIL(l_dl_autobrksettl_struct_ha);
	
	l_dl_autobrksettl_struct_i = (DL_AUTOBRKSETTL_STRUCT_I *)calloc(1, sizeof(DL_AUTOBRKSETTL_STRUCT_I));
	APL_MALLOC_FAIL(l_dl_autobrksettl_struct_i);


	
	
	
	EXEC SQL VAR l_dl_autobrksettl_struct_ha->h_ord_no         is string;
	EXEC SQL VAR l_dl_autobrksettl_struct_ha->h_domestic_cp         is string;
	EXEC SQL VAR l_dl_autobrksettl_struct_ha->h_instr_isin          is string;
	EXEC SQL VAR l_dl_autobrksettl_struct_ha->h_dl_client        is string;
	EXEC SQL VAR l_dl_autobrksettl_struct_ha->h_dl_client       is string;
	EXEC SQL VAR l_dl_autobrksettl_struct_ha->h_file_name      is string;
	EXEC SQL VAR l_dl_autobrksettl_struct_ha->h_status_ind        is string;
	EXEC SQL VAR l_dl_autobrksettl_struct_ha->h_failreas        is string;
	


	CO_ProcMonitor(p_logfile, "Entered Function CDBAutoSettlUplFn", NULL, p_intl_envdatastruct_h);


   strcat(p_uploaddir,chr_p_filename_a);
   l_feedfile = fopen(p_uploaddir, "r");

   

   if (l_feedfile == NULL)
   {
      if (CO_InsertErr
            (l_debug_info_ptr,
            ERR_FDFILE_NOTVALID,
            
            APL_NULL_STRING,
            APL_NULL_STRING,
            APL_NULL_STRING,
            __LINE__,
            __FILE__
            ) != APL_SUCCESS)
            APL_GOBACK_FAIL
      APL_GOBACK_FAIL
   }


 printf("\nargv[0] is :%s: argv[1] is :%s: argv[2] is :%s:\n",argv[0],argv[1],argv[2]);
   
  EXEC SQL SELECT PROCESSING_STATUS
     FROM SYS_BATCHPROC
     WHERE PROCESS_NAME=:argv[0]
        AND   PROC_INIT=:argv[1]
        AND   STARTDATE=:argv[2]
        AND   STATUS='started'
     FOR UPDATE OF PROCESSING_STATUS,STATUS;


  if(APL_ZERO_RESULT_SET)
   {
      CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
      APL_GOBACK_FAIL
   }

  IS_ANY_ORA_ERROR

      fprintf(p_logfile, " successfully locked the batch record\n");


	

	EXEC SQL DECLARE wrk_cursor_upl CURSOR FOR 
			SELECT *  
				FROM DL_AUTOBRKSETTL WHERE
		 		NAMEOF_FILE=:chr_p_filename_a
			AND PROC_IND='S' FOR UPDATE NOWAIT ;

	EXEC SQL OPEN wrk_cursor_upl;
	
	IS_ANY_ORA_ERROR;

   
 	if(APL_ZERO_RESULT_SET);         
	
	
	EXEC SQL DELETE DL_AUTOBRKSETTL WHERE
		 NAMEOF_FILE=:chr_p_filename_a
	AND PROC_IND='S'; 
	
	IS_ANY_ORA_ERROR;	
 	
	if (  CO_RtvSysDt(chr_sysdate,l_debug_info_ptr) == APL_FAILURE )
         {
            APL_GOBACK_FAIL
         }

   while (!feof(l_feedfile))
		{
			++int_l_reccount;
         if (!int_l_reccount%C_MY_COMMITSIZE)
         {
            

            memset(chr_l_f_buf, NULL, BUFF_SIZE);
            sprintf(chr_l_f_buf, "Processed %d Records", int_l_reccount);

            EXEC SQL UPDATE SYS_BATCHPROC
            SET STAT_DET = :chr_l_f_buf
            WHERE PROCESS_NAME=:argv[0]
            AND   PROC_INIT=:argv[1]
            AND   STARTDATE=:argv[2]
            AND   STATUS='started';

            EXEC SQL COMMIT WORK;
            IS_ANY_ORA_ERROR

            CO_ProcMonitor(p_logfile, "Record Committed", NULL, NULL);

            EXEC SQL SELECT PROCESSING_STATUS
            FROM SYS_BATCHPROC
            WHERE PROCESS_NAME=:argv[0]
            AND   PROC_INIT=:argv[1]
            AND   STARTDATE=:argv[2]
            AND   STATUS='started'
            FOR UPDATE OF PROCESSING_STATUS,STATUS;

            IS_ANY_ORA_ERROR

            if(APL_ZERO_RESULT_SET)
            {
               CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
               APL_GOBACK_FAIL
            }

				

				EXEC SQL OPEN wrk_cursor_upl;
			
			}
            memset(chr_l_linebuf,APL_NULL_CHAR,APL_MAXLINE_SIZE);
            fscanf(l_feedfile,"%[^\n]\n",chr_l_linebuf);
				
				strcat(chr_l_linebuf,",");
				strcat(chr_l_linebuf,"\0");
				

			   memset(chr_l_f_buf, NULL, BUFF_SIZE);
            sprintf(chr_l_f_buf, "%s", chr_l_linebuf);
				CO_ProcMonitor(p_logfile,"Record got from NSD h_file is ",NULL,NULL);
				CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

               

 		     	if (APL_FAILURE == CO_SplitStr( chr_l_linebuf,
      		                                 ',',
            		                           &int_num,
                  		                     &chr_l_record_field ))
      		{
         		CO_ProcMonitor(p_logfile, "Failure from CBStrSplitFn", NULL, NULL);
         		APL_GOBACK_FAIL
      		}
      		else
				{
 	        		CO_ProcMonitor(p_logfile,"Successful in CBStrSplitFn",NULL,NULL);
			   	memset(chr_l_f_buf, NULL, BUFF_SIZE);
            	sprintf(chr_l_f_buf, "ISIN is |%s| OrdNo is |%s| Buy-Sell is |%s| Quantity is |%s| ASD is |%s|", chr_l_record_field[0],chr_l_record_field[2],chr_l_record_field[16],chr_l_record_field[17],chr_l_record_field[18]);
					CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);
				}

   			

 			  if(int_num != 19)
      			{
         			CO_ProcMonitor(p_logfile,"Improper Number Of Fields ",NULL,NULL);
						int_record_flg=1;
      			}
 			 
 			  else if ( strlen(chr_l_record_field[2]) > 12 )
      			{
         			CO_ProcMonitor(p_logfile,"Improper length of Order No. field ",NULL,NULL);
						int_record_flg=3;
      			}
 			  else if ( strlen(chr_l_record_field[16]) > 1)
      			{
         			CO_ProcMonitor(p_logfile,"Improper length of Buy-Sell field ",NULL,NULL);
						int_record_flg=4;
      			}
 			  else if ( strlen(chr_l_record_field[17]) > 11 )
      			{
         			CO_ProcMonitor(p_logfile,"Improper length of Quantity field ",NULL,NULL);
						int_record_flg=5;
      			}
   			else if ( strlen(chr_l_record_field[18]) > 8 )
      			{
         			CO_ProcMonitor(p_logfile,"Improper length of Actual Settlement Date field ",NULL,NULL);
						int_record_flg=6;
      			}
			
 			  else
      			{
						strcpy(chr_l_temp_isin_in,"\0");
						strcpy(chr_l_temp_isin_ou,"\0");
						strcpy(chr_l_temp_isin_ou1,"\0");
						strncpy(chr_l_temp_isin_in,chr_l_record_field[0],13);
						strcat(chr_l_temp_isin_in,"\0");
						if(APL_FAILURE == CO_Trim(chr_l_temp_isin_in,
																	'"',
																	'L',
																	chr_l_temp_isin_ou,
																	l_debug_info_ptr))
						{
							CO_ProcMonitor(p_logfile,"\nE:Error in CDBAutoSettlUplCon calling CBTrimString",l_debug_info_ptr,NULL);
							APL_GOBACK_FAIL
						}
						if(APL_FAILURE == CO_Trim(chr_l_temp_isin_ou,
																	'"',
																	'R',
																	chr_l_temp_isin_ou1,
																	l_debug_info_ptr))
						{
							CO_ProcMonitor(p_logfile,"\nE:Error in CDBAutoSettlUplCon calling CBTrimString",l_debug_info_ptr,NULL);
							APL_GOBACK_FAIL
						}
						if(strlen(chr_l_temp_isin_ou1) >12)
						{
         				CO_ProcMonitor(p_logfile,"Improper length of ISIN field ",NULL,NULL);
							int_record_flg=2;
						}
      			}


			if (int_record_flg==1)
				{
					CO_ProcMonitor(p_logfile,"Inserting record Error Improper no. of fields",NULL,NULL);
					EXEC SQL INSERT INTO DL_AUTOBRKSETTL
						(NAMEOF_FILE,CURRENTDATE,STATUS,REAS,PROC_IND,STATUS_PROC)
						VALUES
						(:chr_p_filename_a,:chr_sysdate,'UNMAT','Improper no of fields','S','P');
					IS_ANY_ORA_ERROR;
					
					continue;
				}
		
			strncpy(chr_l_date_temp,chr_l_record_field[18]+6,2);
			strncpy(chr_l_month_temp,chr_l_record_field[18]+4,2);
			strncpy(chr_l_year_temp,chr_l_record_field[18],4);
		
			printf("\n Actual Settlement chr_date is :%s:",chr_l_date_temp);	
			printf("\n Actual Settlement month is :%s:",chr_l_month_temp);	
			printf("\n Actual Settlement yeard is :%s:",chr_l_year_temp);	


			strcpy(l_dl_autobrksettl_struct_ha->h_auto_setl_dt,chr_l_date_temp);
			strcat(l_dl_autobrksettl_struct_ha->h_auto_setl_dt,"/");
			strcat(l_dl_autobrksettl_struct_ha->h_auto_setl_dt,chr_l_month_temp);
			strcat(l_dl_autobrksettl_struct_ha->h_auto_setl_dt,"/");
			strcat(l_dl_autobrksettl_struct_ha->h_auto_setl_dt,chr_l_year_temp);
			strcat(l_dl_autobrksettl_struct_ha->h_auto_setl_dt," 12:00:00");

	
			strcpy(chr_reason_str,"Improper length of ");
			if (int_record_flg==2)
				{
					strcat(chr_reason_str,"INSTR_ISIN");
					
					strcpy(chr_l_temp_isin_ou1,APL_NULL_STRING);
					int_l_i_isin = -1;
				}
			if (int_record_flg==3)
				{
					strcat(chr_reason_str,"Ord No.");
					strcpy(chr_l_record_field[2],APL_NULL_STRING);
					int_l_i_ordno = -1;
				}
			if (int_record_flg==4)
				{
					strcat(chr_reason_str,"Buy-Sell");
					strcpy(chr_l_record_field[16],APL_NULL_STRING);
					int_l_i_trcode = -1;
				}
			if (int_record_flg==5)
				{
					strcat(chr_reason_str,"Quantity");
					strcpy(chr_l_record_field[17],APL_NULL_STRING);
					int_l_i_qty = -1;
				}
			if (int_record_flg==6)
				{
					strcat(chr_reason_str,"Actual Settlement Date");
					strcpy(l_dl_autobrksettl_struct_ha->h_auto_setl_dt,APL_NULL_STRING);
					int_l_i_asd = -1;
				}
			if (int_record_flg==0)
					strcpy(chr_reason_str,"All field lenghts are validated"); 
					
				strcpy(l_dl_autobrksettl_struct_ha->h_ord_no,chr_l_record_field[2]);
				strcpy(l_dl_autobrksettl_struct_ha->h_dealcd,chr_l_record_field[16]);
				
				strcpy(l_dl_autobrksettl_struct_ha->h_instr_isin,chr_l_temp_isin_ou1);
				l_dl_autobrksettl_struct_ha->h_qty = atof(chr_l_record_field[17]);
				strcpy(l_dl_autobrksettl_struct_ha->h_failreas,chr_reason_str);

				l_dl_autobrksettl_struct_i->i_ord_no      =int_l_i_ordno;
				l_dl_autobrksettl_struct_i->i_dealcd     =int_l_i_trcode;
				l_dl_autobrksettl_struct_i->i_instr_isin       =int_l_i_isin;
				l_dl_autobrksettl_struct_i->i_qty        =int_l_i_qty;
				l_dl_autobrksettl_struct_i->i_auto_setl_dt        =int_l_i_asd; 
				l_dl_autobrksettl_struct_i->i_reas     =int_l_i_reason;

				l_dl_autobrksettl_struct_ha->h_rec_no=int_l_reccount;
				strcpy(l_dl_autobrksettl_struct_ha->h_domestic_cp,APL_NULL_STRING);
				l_dl_autobrksettl_struct_ha->h_pr = 0;
				strcpy(l_dl_autobrksettl_struct_ha->h_dlt,APL_NULL_STRING);
				strcpy(l_dl_autobrksettl_struct_ha->h_dl_client,APL_NULL_STRING);
				l_dl_autobrksettl_struct_ha->h_dl_val = 0.0;
				strcpy(l_dl_autobrksettl_struct_ha->h_ccy,APL_NULL_STRING);
				strcpy(l_dl_autobrksettl_struct_ha->h_settldate,APL_NULL_STRING);
				l_dl_autobrksettl_struct_ha->h_brokercomm = 0.0;
				strcpy(l_dl_autobrksettl_struct_ha->h_dl_client,APL_NULL_STRING);
				strcpy(l_dl_autobrksettl_struct_ha->h_file_name,chr_p_filename_a);
				strcpy(l_dl_autobrksettl_struct_ha->h_systemdt,chr_sysdate);
				strcpy(l_dl_autobrksettl_struct_ha->h_status_ind,"UNMAT");
				strcpy(l_dl_autobrksettl_struct_ha->h_proc_ind,"S");
				strcpy(l_dl_autobrksettl_struct_ha->h_status_proc,"P");

				
				l_dl_autobrksettl_struct_i->i_rec_no		=0;
				l_dl_autobrksettl_struct_i->i_domestic_cp      =-1;
				l_dl_autobrksettl_struct_i->i_pr      =0;
				l_dl_autobrksettl_struct_i->i_dlt       =-1;
				l_dl_autobrksettl_struct_i->i_dl_client     =-1;
				l_dl_autobrksettl_struct_i->i_dl_val      =0;
				l_dl_autobrksettl_struct_i->i_ccy        =-1;
				l_dl_autobrksettl_struct_i->i_settldate    =-1;
				l_dl_autobrksettl_struct_i->i_brokercomm    =0;
				l_dl_autobrksettl_struct_i->i_dl_client    =-1;
				l_dl_autobrksettl_struct_i->i_nameof_file   =0;
				l_dl_autobrksettl_struct_i->i_systemdt =0;
				l_dl_autobrksettl_struct_i->i_status_ind     =0;
				l_dl_autobrksettl_struct_i->i_proc_ind =0;
				l_dl_autobrksettl_struct_i->i_status_proc =0;	
  
				if (int_record_flg ==2||int_record_flg==3||int_record_flg==4||int_record_flg==5||int_record_flg==6)
				{
               DL_Prnt_AutoBrkConfRow (l_dl_autobrksettl_struct_ha,p_logfile);
         		EXEC SQL INSERT INTO DL_AUTOBRKSETTL VALUES
         	   		(:l_dl_autobrksettl_struct_ha:l_dl_autobrksettl_struct_i);
					IS_ANY_ORA_ERROR;
					
					continue;
				}
	
			
			if (!strcmp(l_dl_autobrksettl_struct_ha->h_dealcd,"1"))
					strcpy(l_dl_autobrksettl_struct_ha->h_dealcd,"4");
			if (!strcmp(l_dl_autobrksettl_struct_ha->h_dealcd,"0"))
					strcpy(l_dl_autobrksettl_struct_ha->h_dealcd,"3");

			EXEC SQL SELECT INSTR_CODE 
				INTO :chr_l_instrcode_cinstrument
				FROM MT_INSTRUMENT
				WHERE INSTR_ISIN = :l_dl_autobrksettl_struct_ha->h_instr_isin;

			IS_ANY_ORA_ERROR;

			if (APL_ZERO_RESULT_SET)
				{
			      memset(chr_reason_str,APL_NULL_CHAR,APL_MAXREASON_SIZE);
               strcpy(chr_reason_str,"Instrurity not found");
               strcpy(l_dl_autobrksettl_struct_ha->h_failreas,chr_reason_str);
               DL_Prnt_AutoBrkConfRow (l_dl_autobrksettl_struct_ha,p_logfile);
               EXEC SQL INSERT INTO DL_AUTOBRKSETTL VALUES
                     (:l_dl_autobrksettl_struct_ha:l_dl_autobrksettl_struct_i);
               IS_ANY_ORA_ERROR;
					
               continue;	
				}	
         
			EXEC SQL SELECT  INSTR_CODE , QTY , DEAL_CD , DEAL_STAT 
				 INTO :chr_l_instrcode_ctrade,:l_quantity_a,chr_l_trcode_a,:int_l_status
				 FROM DL_DEAL
			   WHERE BRK_NO=:l_dl_autobrksettl_struct_ha->h_ord_no AND INSTR_CODE=RTRIM(:chr_l_instrcode_cinstrument) AND DEAL_FRM_ORD = 'Y'
			     AND DEAL_CD=:l_dl_autobrksettl_struct_ha->h_dealcd
			     AND DOMESTIC_CPCLT=:l_dl_autobrksettl_struct_ha->h_domestic_cp;

				if (sqlca.sqlcode == 2112) 
     			{
	      		memset(chr_reason_str,APL_NULL_CHAR,APL_MAXREASON_SIZE);	
					strcpy(chr_reason_str,"Too many records int_found ");
					strcpy(l_dl_autobrksettl_struct_ha->h_failreas,chr_reason_str);
               DL_Prnt_AutoBrkConfRow (l_dl_autobrksettl_struct_ha,p_logfile);
         		EXEC SQL INSERT INTO DL_AUTOBRKSETTL VALUES
         	   		(:l_dl_autobrksettl_struct_ha:l_dl_autobrksettl_struct_i);
					IS_ANY_ORA_ERROR;
					
					continue;
				}
				else
					IS_ANY_ORA_ERROR

				if (APL_ZERO_RESULT_SET)
     			{
	      		memset(chr_reason_str,APL_NULL_CHAR,APL_MAXREASON_SIZE);	
					strcpy(chr_reason_str,"Order no. / Instrurity combination not int_found ");
					strcpy(l_dl_autobrksettl_struct_ha->h_failreas,chr_reason_str);
               DL_Prnt_AutoBrkConfRow (l_dl_autobrksettl_struct_ha,p_logfile);
         		EXEC SQL INSERT INTO DL_AUTOBRKSETTL VALUES
         	   		(:l_dl_autobrksettl_struct_ha:l_dl_autobrksettl_struct_i);
					IS_ANY_ORA_ERROR;
					
					continue;
				}


			if (strcmp(chr_l_instrcode_ctrade,chr_l_instrcode_cinstrument))
				{	
	      		memset(chr_reason_str,APL_NULL_CHAR,APL_MAXREASON_SIZE);	
					strcpy(chr_reason_str,"Instrurity is not valid");
               strcpy(l_dl_autobrksettl_struct_ha->h_failreas,chr_reason_str);
               DL_Prnt_AutoBrkConfRow (l_dl_autobrksettl_struct_ha,p_logfile);
               EXEC SQL INSERT INTO DL_AUTOBRKSETTL VALUES
                     (:l_dl_autobrksettl_struct_ha:l_dl_autobrksettl_struct_i);
               IS_ANY_ORA_ERROR;
					
					continue;				
				}
			else if (l_quantity_a != l_dl_autobrksettl_struct_ha->h_qty)
				{	
	      		memset(chr_reason_str,APL_NULL_CHAR,APL_MAXREASON_SIZE);	
					strcpy(chr_reason_str,"Quantity does not match");
               strcpy(l_dl_autobrksettl_struct_ha->h_failreas,chr_reason_str);
               DL_Prnt_AutoBrkConfRow (l_dl_autobrksettl_struct_ha,p_logfile);
               EXEC SQL INSERT INTO DL_AUTOBRKSETTL VALUES
                     (:l_dl_autobrksettl_struct_ha:l_dl_autobrksettl_struct_i);
               IS_ANY_ORA_ERROR;
					
					continue;				
				}
			else if (strcmp(chr_l_trcode_a,l_dl_autobrksettl_struct_ha->h_dealcd))
				{	
	      		memset(chr_reason_str,APL_NULL_CHAR,APL_MAXREASON_SIZE);	
					strcpy(chr_reason_str,"Rec-Del does not match");
               strcpy(l_dl_autobrksettl_struct_ha->h_failreas,chr_reason_str);
               DL_Prnt_AutoBrkConfRow (l_dl_autobrksettl_struct_ha,p_logfile);
               EXEC SQL INSERT INTO DL_AUTOBRKSETTL VALUES
                     (:l_dl_autobrksettl_struct_ha:l_dl_autobrksettl_struct_i);
               IS_ANY_ORA_ERROR;
					
					continue;				
				}
			else if (!strcmp(int_l_status,STATUS_SETL))
				{	
	      		memset(chr_reason_str,APL_NULL_CHAR,APL_MAXREASON_SIZE);	
					strcpy(chr_reason_str,"Trade already settled ");
               strcpy(l_dl_autobrksettl_struct_ha->h_failreas,chr_reason_str);
               DL_Prnt_AutoBrkConfRow (l_dl_autobrksettl_struct_ha,p_logfile);
               EXEC SQL INSERT INTO DL_AUTOBRKSETTL VALUES
                     (:l_dl_autobrksettl_struct_ha:l_dl_autobrksettl_struct_i);
               IS_ANY_ORA_ERROR;
					
					continue;				
				}
			else if (strcmp(int_l_status,STATUS_CONF))
				{	
	      		memset(chr_reason_str,APL_NULL_CHAR,APL_MAXREASON_SIZE);	
					strcpy(chr_reason_str,"Trade not Confirmed");
               strcpy(l_dl_autobrksettl_struct_ha->h_failreas,chr_reason_str);
               DL_Prnt_AutoBrkConfRow (l_dl_autobrksettl_struct_ha,p_logfile);
               EXEC SQL INSERT INTO DL_AUTOBRKSETTL VALUES
                     (:l_dl_autobrksettl_struct_ha:l_dl_autobrksettl_struct_i);
               IS_ANY_ORA_ERROR;
					
					continue;				
				}
			else
				{	
	      		memset(chr_reason_str,APL_NULL_CHAR,APL_MAXREASON_SIZE);	
					strcpy(chr_reason_str,APL_NULL_STRING);
               strcpy(l_dl_autobrksettl_struct_ha->h_failreas,chr_reason_str);
					strcpy(l_dl_autobrksettl_struct_ha->h_status_ind,"MAT");
               DL_Prnt_AutoBrkConfRow (l_dl_autobrksettl_struct_ha,p_logfile);
               EXEC SQL INSERT INTO DL_AUTOBRKSETTL VALUES
                     (:l_dl_autobrksettl_struct_ha:l_dl_autobrksettl_struct_i);
               IS_ANY_ORA_ERROR;
					
					continue;				
				}
		} 

	EXEC SQL CLOSE wrk_cursor_upl;
	if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr)) APL_GOBACK_FAIL

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	
		memset(chr_l_f_buf, NULL, BUFF_SIZE);
		sprintf(chr_l_f_buf, "Processed %d Records", int_l_reccount);

		CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);
		
		EXEC SQL UPDATE SYS_BATCHPROC
		SET STAT_DET = :chr_l_f_buf
  	 	WHERE PROCESS_NAME=:argv[0]
  	  	AND   PROC_INIT=:argv[1]
  	  	AND   STARTDATE=:argv[2]
  	  	AND   STATUS='started';

      EXEC SQL COMMIT WORK;
      IS_ANY_ORA_ERROR

		CO_ProcMonitor(p_logfile, "Record Committed", NULL, NULL);


      EXEC SQL SELECT PROCESSING_STATUS
      FROM SYS_BATCHPROC
      WHERE PROCESS_NAME=:argv[0]
      AND   PROC_INIT=:argv[1]
      AND   STARTDATE=:argv[2]
      AND   STATUS='started'
      FOR UPDATE OF PROCESSING_STATUS,STATUS;

		IS_ANY_ORA_ERROR

      if(APL_ZERO_RESULT_SET)
      {
         CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
         APL_GOBACK_FAIL
      }
		CO_ProcMonitor(	p_logfile,
						"Leaving Function DL_Proc_GbSetl with Success\n",
						NULL,
						NULL);
		return(APL_SUCCESS);

	RETURN_FAILURE :
		CO_ProcMonitor(	p_logfile,
						"Got Errors : ",
						l_debug_info_ptr,
						p_intl_envdatastruct_h );
		CO_FreeErrLst(l_debug_info_ptr);

		CO_ProcMonitor(	p_logfile,
						"Leaving Function DL_Proc_GbSetl with Errors\n",
						NULL,
						NULL);
		return(APL_FAILURE);
}

int DL_Prnt_AutoBrkSettleRow(DL_DEAL_SSTDET_STRUCT_H *p_dl_deal_sstdet_struct_h, FILE *p_logfile)
{
	char		chr_l_f_buf[BUFF_SIZE]							= APL_NULL_STRING;
   CO_ProcMonitor(p_logfile,"..... Passing Record to Single settlement Function .... ",NULL,NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "account is |%s|",p_dl_deal_sstdet_struct_h->h_dl_client);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "refno is |%s|",p_dl_deal_sstdet_struct_h->h_indentity_no);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "ispartial is |%s|",p_dl_deal_sstdet_struct_h->h_ispart_);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "newqty is |%lf|",p_dl_deal_sstdet_struct_h->h_newquantity);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "newamt is |%lf|",p_dl_deal_sstdet_struct_h->h_newamount);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "newrefno is |%s|",p_dl_deal_sstdet_struct_h->h_newindentity_no);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "instr_dt is |%s|",p_dl_deal_sstdet_struct_h->h_instrdate);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "moneydt is |%s|",p_dl_deal_sstdet_struct_h->h_moneydate);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "price is |%d|",p_dl_deal_sstdet_struct_h->h_pr);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "brkcomm is |%d|",p_dl_deal_sstdet_struct_h->h_brokercomm);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "selforreg is |%s|",p_dl_deal_sstdet_struct_h->h_sel_forreg);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "pendregqty is |%lf|",p_dl_deal_sstdet_struct_h->h_pendregquantity);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "marktrfqty is |%lf|",p_dl_deal_sstdet_struct_h->h_marktrfquantity);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "recint000 is |%lf|",p_dl_deal_sstdet_struct_h->h_rec_int_000);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "mcomplqty is |%lf|",p_dl_deal_sstdet_struct_h->h_mcomplquantity);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "delfrm000 is |%lf|",p_dl_deal_sstdet_struct_h->h_delta_000);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "delfrm001 is |%lf|",p_dl_deal_sstdet_struct_h->h_delta_001);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "delfrm003 is |%lf|",p_dl_deal_sstdet_struct_h->h_delta_002);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "access_stamp is |%s|",p_dl_deal_sstdet_struct_h->h_access_stamp);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

}



int DL_Prnt_AutoBrkConfRow (DL_AUTOBRKSETTL_STRUCT_H  *p_dl_autobrksettl_struct_h, FILE *p_logfile)
{
	char		chr_l_f_buf[BUFF_SIZE]							= APL_NULL_STRING;
   CO_ProcMonitor(p_logfile,"..... Inserting Record into CAUTOBRKSETTL ..... ",NULL,NULL);
			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "RECNO is |%d|",p_dl_autobrksettl_struct_h->h_rec_no);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);
			
			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "ORDNO is |%s|",p_dl_autobrksettl_struct_h->h_ord_no);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "DOMCP is |%s|",p_dl_autobrksettl_struct_h->h_domestic_cp);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "TRCODE is |%s|",p_dl_autobrksettl_struct_h->h_dealcd);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "PRICE is |%lf|",p_dl_autobrksettl_struct_h->h_pr);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "TRDT is |%s|",p_dl_autobrksettl_struct_h->h_dlt);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "ISIN is |%s|",p_dl_autobrksettl_struct_h->h_instr_isin);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "CLIENT is |%s|",p_dl_autobrksettl_struct_h->h_dl_client);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "QTY is |%d|",p_dl_autobrksettl_struct_h->h_qty);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "CTRVL is |%lf|",p_dl_autobrksettl_struct_h->h_dl_val);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "CCY is |%s|",p_dl_autobrksettl_struct_h->h_ccy);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "SETTLDT is |%s|",p_dl_autobrksettl_struct_h->h_settldate);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "BRKCOMM is |%lf|",p_dl_autobrksettl_struct_h->h_brokercomm);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "ACCOUNT is |%s|",p_dl_autobrksettl_struct_h->h_dl_client);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "ASD is |%s|",p_dl_autobrksettl_struct_h->h_auto_setl_dt );
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "FILENAME is |%s|",p_dl_autobrksettl_struct_h->h_file_name);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "SYSTEMDATE is |%s|",p_dl_autobrksettl_struct_h->h_systemdt);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "STATUS is |%s|",p_dl_autobrksettl_struct_h->h_status_ind);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "REASON is |%s|",p_dl_autobrksettl_struct_h->h_failreas);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "PROCESSFLG is |%s|",p_dl_autobrksettl_struct_h->h_proc_ind);
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);

			memset(chr_l_f_buf, NULL, BUFF_SIZE);
			sprintf(chr_l_f_buf, "PROCESSSTS is |%s|",p_dl_autobrksettl_struct_h->h_status_proc  );
			CO_ProcMonitor(p_logfile, chr_l_f_buf, NULL, NULL);						

}







main(int argc,char **argv)
{
   struct sqlca sqlca;
   DEBUG_INFO_STRUCT_H *l_debug_info_ptr = (DEBUG_INFO_STRUCT_H *) NULL;
   INTL_ENV_DATA_STRUCT_H l_intl_env_data_h;
   FILE *l_finifile;
   FILE *l_logfile;

   char p_dt[APL_DATE_LEN];
   char chr_p_filename_a[APL_FILENAME_LENGTH];
   char chr_p_indicator[3];
   int int_l_retval=0;

   int int_num = 0;
   char chr_uname[APL_USERID_LEN] = APL_NULL_STRING;
   char chr_custody_id_b[APL_USERID_LEN] = APL_NULL_STRING;
   char chr_passwd[APL_USERID_LEN] = APL_NULL_STRING;
   char **temp;
   char *y;
   char chr_l_logdir[PATH_LENGTH] = APL_NULL_STRING;
   char chr_l_uploaddir[PATH_LENGTH] = APL_NULL_STRING;
   char chr_l_inifile[PATH_LENGTH] = APL_NULL_STRING;

   EXEC SQL VAR chr_uname IS STRING;
   EXEC SQL VAR chr_passwd IS STRING;

   memset(&l_intl_env_data_h, NULL, sizeof(INTL_ENV_DATA_STRUCT_H));

   strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
   strcat(chr_l_inifile,"intl_sun.cfg");

   strcpy(p_dt,APL_NULL_STRING);
   strcpy(chr_p_indicator,APL_NULL_STRING);
   strcpy(chr_p_filename_a,APL_NULL_STRING);

   fprintf(APL_OUT_FILE, "\n\tEntered MAIN. Going for Filename, File allocation etc\n");

   if ( ( l_finifile=fopen(chr_l_inifile,"r") ) == NULL)
		{ 
            APL_GOBACK_FAIL
   	}

   

   APL_FETCH_DB_LOGIN_DETAILS(l_finifile, chr_custody_id_b, chr_uname, chr_passwd, APL_OUT_FILE, &l_debug_info_ptr)
 
	

   if (fclose(l_finifile))
   {
      exit(-1);
   }
 
   EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;

   if (sqlca.sqlcode)
   {
            APL_GOBACK_FAIL
   }
   else
   {

      

      strcpy(l_intl_env_data_h.usr, argv[3]);
      strcpy(l_intl_env_data_h.h_mode, argv[4]);
      strcpy(l_intl_env_data_h.processtion, argv[5]);
      strcpy(l_intl_env_data_h.auth_req, argv[6]);
      strcpy(l_intl_env_data_h.subprocess, argv[7]);
      strcpy(l_intl_env_data_h.h_process, argv[8]);

      if (APL_FAILURE == CO_Rtv_RptFileName( "BS", 
            APL_LOGFILE_DESC,
            100,
            argv[5],
            argv,
            &l_logfile,
            &l_debug_info_ptr ))
      {
            APL_GOBACK_FAIL
      }
      

      EXEC SQL COMMIT WORK;

      if (sqlca.sqlcode)
      {
         CO_ProcMonitor(l_logfile, "Could not commit after opening chr_log file", NULL, NULL);
         CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
            APL_GOBACK_FAIL
      }

      if ( APL_FAILURE == CO_ReadToken(l_finifile,
               "INTL_UPL_PATH",
               chr_l_uploaddir,
               &l_debug_info_ptr ))
      {
            APL_GOBACK_FAIL
      }

      

      fprintf(l_logfile, "\n\tString split processtion called\n");

      if (APL_FAILURE == CO_SplitStr( argv[9],
                                       '|',
                                       &int_num,
                                       &temp ))
      {
            fprintf(l_logfile, "\n\tString split processtion failed\n");
            CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
            APL_GOBACK_FAIL
      }

      if (int_num == 0)
      {
            fprintf(l_logfile, "\n\tThere were no params. Mandatory data missing\n");
            APL_DATA_MISSING("Auto Broker Conf",APL_NULL_STRING,APL_NULL_STRING)

            CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
          APL_GOBACK_FAIL
      }

      strcpy(p_dt, temp[2]);
      strcpy(chr_p_filename_a, temp[1]);
      strcpy(chr_p_indicator, temp[0]);

      

      if (APL_FAILURE == CO_RtvSysParams(&l_debug_info_ptr))
      {
            fprintf(l_logfile, "\n\tFailed in Get System Params\n");
            CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
            APL_GOBACK_FAIL
      }

            fprintf(l_logfile, "Successfully got Sys Params\n");
            fprintf(l_logfile, "userid   : (%s)\n",l_intl_env_data_h.usr);
            fprintf(l_logfile, "mode     : (%s)\n",l_intl_env_data_h.h_mode);
            fprintf(l_logfile, "function : (%s)\n",l_intl_env_data_h.processtion);
            fprintf(l_logfile, "auth_req : (%s)\n",l_intl_env_data_h.auth_req);
            fprintf(l_logfile, "subfun   : (%s)\n",l_intl_env_data_h.subprocess);
            fprintf(l_logfile, "action   : (%s)\n",l_intl_env_data_h.h_process);
            fprintf(l_logfile, "Parameter String Passed   : (%s)\n",argv[9]);


      if (!strlen(chr_p_filename_a))
      {
         CO_InsertErr
            (l_debug_info_ptr,
            ERR_FDFILE_NOTVALID,
            APL_NULL_STRING,
            APL_NULL_STRING,
            APL_NULL_STRING,
            __LINE__,
            __FILE__
            );
         CO_ProcMonitor(l_logfile,"No Broker Upload File name given!!\n",
               &l_debug_info_ptr,&l_intl_env_data_h);
         CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
         APL_GOBACK_FAIL
      }

      if(strcmp (chr_p_indicator,"UB") == 0 )
      {
         int_l_retval = CDBAuBrkConUpldFn_newfmt(p_dt,
                              chr_p_filename_a,
                              argv,
                              chr_l_uploaddir,
                              l_logfile,
                              chr_p_indicator,
                              &l_intl_env_data_h,
                              &l_debug_info_ptr);

         if ( int_l_retval == APL_FAILURE )
         {
            fprintf(l_logfile, "Unsuccessful in CDBAuBrkConUpldFn_newfmt Exiting from main\n");
            CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
            APL_GOBACK_FAIL
         }
         else
         {

            EXEC SQL UPDATE SYS_BATCHPROC
               SET  status_ind = 'completed'
                  WHERE PROCESS_NAME=:argv[0]
                     AND   PROC_INIT=:argv[1]
                     AND   STARTDATE=:argv[2]
                     AND   STATUS='started';

            EXEC SQL COMMIT WORK RELEASE;
            fprintf(l_logfile, "Record Committed. \n CDBAuBrkConUpldFn_newfmt Successful , Exiting from main\n");
            CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
            APL_GOBACK_SUCCESS
         }
      }
		else
			if(strcmp (chr_p_indicator,"CB") == 0)
			{

 	        int_l_retval = DL_Proc_AutoBrkConf(p_dt,
   	                           chr_p_filename_a,
      	                        argv,
         	                     l_logfile,
            	                  &l_intl_env_data_h,
               	               &l_debug_info_ptr);

 	        if ( int_l_retval == APL_FAILURE )
   	      {
      	      fprintf(l_logfile, "Unsuccessful in DL_Proc_AutoBrkConf Exiting from main\n");
         	   CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
            	APL_GOBACK_FAIL
         	}
         	else
         	{

 	           EXEC SQL UPDATE SYS_BATCHPROC
              SET  status_ind = 'completed'
              WHERE PROCESS_NAME=:argv[0]
              AND   PROC_INIT=:argv[1]
              AND   STARTDATE=:argv[2]
              AND   STATUS='started';

   	         EXEC SQL COMMIT WORK RELEASE;
      	      fprintf(l_logfile, "Record Committed. \n DL_Proc_AutoBrkConf Successful , Exiting from main\n");
         	   CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
            	APL_GOBACK_SUCCESS
       		}
			}
       
		 if(strcmp (chr_p_indicator,"US") == 0 || strcmp (chr_p_indicator,"CS") == 0)
         {
   	      
				if (!strcmp(chr_p_indicator,"CS"))
      		   {
            	   fprintf(l_logfile, "About to call  Auto Settlement of Trade Fn\n");
            		int_l_retval = DL_Proc_AutoBrkSettle( chr_p_filename_a,
                  			                  argv,
                           			         l_logfile,
                                 			   &l_intl_env_data_h,
                                   				 &l_debug_info_ptr);

 		           if ( int_l_retval == APL_FAILURE )
      		      {
            		   CO_ProcMonitor(l_logfile, "CDBAutoSettlConFn returned failure", NULL, &l_intl_env_data_h);
            		   CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
            		   EXEC SQL ROLLBACK WORK RELEASE;
            		   APL_GOBACK_FAIL
            		}
            	else
            		{
               		EXEC SQL UPDATE SYS_BATCHPROC
             				SET  status_ind = 'completed'
            			 	WHERE PROCESS_NAME=:argv[0]
             			  	AND   PROC_INIT=:argv[1]
           				   AND   STARTDATE=:argv[2]
          			   	AND   STATUS='started';

	   	           if (sqlca.sqlcode)
 		              	{
      	            	CO_ProcMonitor(   l_logfile,
         	                     "Could not update Batch_in_proc record to completed",
            	                  NULL,
               	               &l_intl_env_data_h);
                  		CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
                  		APL_GOBACK_FAIL
               		}

 	         	    EXEC SQL COMMIT WORK RELEASE;

 		              if (sqlca.sqlcode)
   		            {
      		            CO_ProcMonitor(   l_logfile,
         		                  "Could not perform final COMMIT",
            	      	            NULL,
               	      	         &l_intl_env_data_h);
            	   	   CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
               	   	APL_GOBACK_FAIL
 	               	}

 		              CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
      		         APL_GOBACK_SUCCESS
            		}
         		}

      		if (!strcmp(temp[0],"US"))
         		{
            	   fprintf(l_logfile, "About to call  Auto upload of Settlement of Trade Fn\n");
       		      int_l_retval = DL_Proc_AutoBrkSettleUpload(   chr_l_uploaddir,
            		                        chr_p_filename_a,
                  		                  argv,
                        		            l_logfile,
                              		      &l_intl_env_data_h,
                                    		&l_debug_info_ptr);

 		            if ( int_l_retval == APL_FAILURE )
      		      {
            		   CO_ProcMonitor(l_logfile, "CDBAutoSettlUplFn returned failure", NULL, &l_intl_env_data_h);
               		CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
               		EXEC SQL ROLLBACK WORK RELEASE;
               		APL_GOBACK_FAIL
            		}
            		else
            		{
               		EXEC SQL UPDATE SYS_BATCHPROC
    		           	SET  status = 'completed'
         		      WHERE PROCESS_NAME=:argv[0]
              		 	AND   PROC_INIT=:argv[1]
               		AND   STARTDATE=:argv[2]
               		AND   STATUS='started';

 	              if (sqlca.sqlcode)
   		            {
         					 CO_ProcMonitor(   l_logfile,
                        		      "Could not update Batch_in_proc record to completed",
                              		NULL,
                              		&l_intl_env_data_h);
                  		CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
                  		APL_GOBACK_FAIL
               		}

 		              EXEC SQL COMMIT WORK RELEASE;
	
 		              if (sqlca.sqlcode)
      		         {
            		      CO_ProcMonitor(   l_logfile,
                  		            "Could not perform final COMMIT",
                        		      NULL,
                             			 &l_intl_env_data_h);
                  		CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
                  		APL_GOBACK_FAIL
               		}

 		              CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
      		         APL_GOBACK_SUCCESS
            		}
         		}
         }
   }
  RETURN_SUCCESS : exit(0);
  RETURN_FAILURE : exit(-1);
}
