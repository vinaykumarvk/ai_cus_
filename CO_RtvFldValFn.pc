









#include "CO_HostStructdef.h"

EXEC SQL INCLUDE SQLCA.H;

int CO_Rtv_FldValChar(	char *p_target_fld, 
								char *p_table, 
								char *p_source_fld, 
								char *p_fld_value, 
								char *int_p_retval, 
								DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	
	
	struct sqlca sqlca;
	int int_error_flag = APL_SUCCESS;
	char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	sqlca.sqlcode = 0;	/** Setting to 0 -- Biju **/

	EXEC SQL BEGIN DECLARE SECTION;
	varchar sqlstmt[200];	/** Changed Length From 100 to 200 Biju **/
	char chr_reqd_val[200];
	varchar h_fld_value[15];
	short i_indicator = 0;	/** For Fetching Null  -- Biju**/
	EXEC SQL VAR chr_reqd_val IS STRING;
	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	
	sqlca.sqlcode = 0;

	

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE, "Entered processtion GDBGetFldVal_char", NULL, NULL);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "Target Field : %s", p_target_fld);
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, NULL);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "Table        : %s", p_table);
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, NULL);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "Source Field : %s", p_source_fld);
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, NULL);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "Field Value  : %s", p_fld_value);
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, NULL);
	}

	

   if (!strlen(p_target_fld))
   {
      APL_DATA_MISSING( "Target Fld",
                        APL_NULL_STRING,
                        APL_NULL_STRING );
      int_error_flag = APL_FAILURE;
   }
   if (!strlen(p_table))
   {
      APL_DATA_MISSING( "Table Name",
                        APL_NULL_STRING,
                        APL_NULL_STRING );
      int_error_flag = APL_FAILURE;
   }
   if (!strlen(p_source_fld))
   {
      APL_DATA_MISSING( "Source Fld",
                        APL_NULL_STRING,
                        APL_NULL_STRING );
      int_error_flag = APL_FAILURE;
   }

   if (APL_FAILURE == int_error_flag) APL_GOBACK_FAIL


	strcpy((char *)h_fld_value.arr, p_fld_value); //AIX- Warnings Removal
	h_fld_value.len = strlen(p_fld_value);


	
         //AIX- Warnings Removal
	sprintf((char *)sqlstmt.arr, "SELECT %s FROM %s WHERE %s=:v1",p_target_fld, p_table, p_source_fld);

	sqlstmt.len = strlen((char *)sqlstmt.arr);
	
	sqlstmt.arr[sqlstmt.len]='\0';
	sqlstmt.len++;
	fprintf(APL_OUT_FILE,"The Query Is |%s| Length Is |%d|\n",sqlstmt.arr,sqlstmt.len);
	EXEC SQL PREPARE s FROM :sqlstmt;
	IS_ANY_ORA_ERROR;
	EXEC SQL DECLARE c CURSOR FOR s;
	IS_ANY_ORA_ERROR;
	EXEC SQL OPEN c USING :h_fld_value;
	IS_ANY_ORA_ERROR;
	EXEC SQL FETCH c INTO :chr_reqd_val:i_indicator;
	IS_ANY_ORA_ERROR;
	EXEC SQL CLOSE c;
	IS_ANY_ORA_ERROR;

	strcpy(int_p_retval, chr_reqd_val);
	fprintf(APL_OUT_FILE,"Return VAlue Is |%s|\n",int_p_retval);

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS : 
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,
						"Exiting processtion CO_Rtv_FldValChar successfully",
						NULL,
						NULL);
		return(APL_SUCCESS);

	RETURN_FAILURE : 
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,
						"Exiting processtion CO_Rtv_FldValChar with errors",
						NULL,
						NULL);
		return(APL_FAILURE);

}



int CO_Rtv_FldValNum(	char *p_target_fld, 
								char *p_table, 
								char *p_source_fld, 
								char *p_fld_value, 
								double *int_p_retval, 
								DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	

	struct sqlca sqlca;
	int int_error_flag = APL_SUCCESS;
	char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;

	EXEC SQL BEGIN DECLARE SECTION;
	varchar sqlstmt[100];
	varchar h_fld_value[15];
	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE, "Entered processtion GDBGetFldVal_num", NULL, NULL);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "Target Field : %s", p_target_fld);
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, NULL);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "Table        : %s", p_table);
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, NULL);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "Source Field : %s", p_source_fld);
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, NULL);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "Field Value  : %s", p_fld_value);
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, NULL);
	}
	
	

   if (!strlen(p_target_fld))
   {
      APL_DATA_MISSING( "Target Fld",
                        APL_NULL_STRING,
                        APL_NULL_STRING );
      int_error_flag = APL_FAILURE;
   }
   if (!strlen(p_table))
   {
      APL_DATA_MISSING( "Table Name",
                        APL_NULL_STRING,
                        APL_NULL_STRING );
      int_error_flag = APL_FAILURE;
   }
   if (!strlen(p_source_fld))
   {
      APL_DATA_MISSING( "Source Fld",
                        APL_NULL_STRING,
                        APL_NULL_STRING );
      int_error_flag = APL_FAILURE;
   }

   if (APL_FAILURE == int_error_flag) APL_GOBACK_FAIL


//AIX- Warnings Removal
	strcpy((char *)h_fld_value.arr, p_fld_value);
	h_fld_value.len = strlen(p_fld_value);


	

	sprintf((char *)sqlstmt.arr, "SELECT %s FROM %s WHERE %s=:v1",p_target_fld, p_table, p_source_fld);
	
	sqlstmt.len = strlen((char *)sqlstmt.arr);
	sqlstmt.arr[sqlstmt.len]='\0';
	sqlstmt.len++;
	EXEC SQL PREPARE s FROM :sqlstmt;
	EXEC SQL DECLARE c1 CURSOR FOR s;
	EXEC SQL OPEN c1 USING :h_fld_value;
	EXEC SQL FETCH c1 INTO :int_p_retval;
	IS_ANY_ORA_ERROR;
	EXEC SQL CLOSE c1;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS : 
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,
						"Exiting processtion CO_Rtv_FldValNum successfully",
						NULL,
						NULL);
		return(APL_SUCCESS);

	RETURN_FAILURE : 
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,
						"Exiting processtion CO_Rtv_FldValNum with errors",
						NULL,
						NULL);
		return(APL_FAILURE);

}
