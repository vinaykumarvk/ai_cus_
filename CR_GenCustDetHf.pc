


   
   
   
   
   
   
   
   
   
   
   
   




#include <CO_HostStructdef.h>

EXEC SQL INCLUDE sqlca;

#define FILENAME_LEN_A			80

//main(int argc,char **argv)
int main(int argc,char **argv)//Changes done for AIX Migration
{
	DEBUG_INFO_STRUCT_H			*l_debug_info_ptr = NULL;
	FILE						*l_ptr_ini_file = NULL;
	FILE						*l_ptr_log_file = NULL;
	INTL_ENV_DATA_STRUCT_H	l_intl_envdatastruct_h;
	char						chr_l_inifile[FILENAME_LEN_A]   = APL_NULL_STRING;
	char						chr_uname[APL_USERID_LEN]   = APL_NULL_STRING;
	char						chr_passwd[APL_PASSWD_LEN]  = APL_NULL_STRING;
	char						chr_custody_id_b[APL_USERID_LEN]  = APL_NULL_STRING;
	int						int_l_flg = 0;
	int						int_retval = 0;
	char						chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	struct sqlca			sqlca;

	memset(&l_intl_envdatastruct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H));
	
	

	strcpy(l_intl_envdatastruct_h.usr, argv[3]);
	strcpy(l_intl_envdatastruct_h.h_mode, argv[4]);
	strcpy(l_intl_envdatastruct_h.processtion, argv[5]);
	strcpy(l_intl_envdatastruct_h.auth_req, argv[6]);
	strcpy(l_intl_envdatastruct_h.subprocess, argv[7]);
	strcpy(l_intl_envdatastruct_h.h_process, argv[8]);
	
	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

	if ((l_ptr_ini_file = fopen(chr_l_inifile,"r")) == NULL)
		exit(-1);

	APL_FETCH_DB_LOGIN_DETAILS(l_ptr_ini_file,chr_custody_id_b,chr_uname,chr_passwd,APL_OUT_FILE,&l_debug_info_ptr)
	
	
	
	if (CO_DB_Connection_I(chr_uname,chr_passwd,&l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL

	

	int_retval = CO_Rtv_RptFileName("3b",APL_LOGFILE_DESC,100,argv[5],argv,&l_ptr_log_file,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL
	}

	

	EXEC SQL COMMIT WORK;
	
	if (sqlca.sqlcode != 0)
	{
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL
	}

	CO_ProcMonitor(l_ptr_log_file,"Customer Details",NULL,NULL);
	CO_ProcMonitor(l_ptr_log_file,"__________________\n",NULL,NULL);
	
	CO_ProcMonitor(l_ptr_log_file,"Work Committed after chr_logfile creation \n",NULL,&l_intl_envdatastruct_h);

	

	if (CO_RtvSysParams(&l_debug_info_ptr) != APL_SUCCESS)
	{
		CO_ProcMonitor(l_ptr_log_file,"Unable to get system parameters - Rollback done \n",NULL,&l_intl_envdatastruct_h);
		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);
		
		EXEC SQL ROLLBACK WORK RELEASE;
		
		APL_GOBACK_FAIL	
	}

	
	 
	int_retval = CO_Proc_BtchLock(argv,l_ptr_log_file,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		CO_ProcMonitor(l_ptr_log_file,"Unable to lock BATCH_IN_PROC record - Rollback done \n",NULL,&l_intl_envdatastruct_h);
		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		EXEC SQL ROLLBACK WORK RELEASE;
		
		APL_GOBACK_FAIL
	}

	

	int_retval = MT_Rtv_AccDet_B(argv, l_ptr_log_file,&l_intl_envdatastruct_h,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		int_l_flg = 1;

	   CO_Proc_Exit(argv,l_ptr_log_file,&l_debug_info_ptr,int_l_flg);
		
		if (CO_ChkErr(l_debug_info_ptr) == APL_SUCCESS)
		{
			
			CO_ProcMonitor(l_ptr_log_file,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_envdatastruct_h);
			CO_FreeErrLst(&l_debug_info_ptr);

		}

		CO_ProcMonitor(l_ptr_log_file,"FAILURE from Customer Details program \n",NULL,&l_intl_envdatastruct_h);

		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		APL_GOBACK_FAIL	
	}
	else
	{
		int_l_flg = 0;

		CO_Proc_Exit(argv,l_ptr_log_file,&l_debug_info_ptr,int_l_flg);

		if (CO_ChkErr(l_debug_info_ptr) == APL_SUCCESS)
		{
			
			CO_ProcMonitor(l_ptr_log_file,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_envdatastruct_h);
			CO_FreeErrLst(&l_debug_info_ptr);

		}

		CO_ProcMonitor(l_ptr_log_file,"SUCCESS from Customer Details program \n",NULL,&l_intl_envdatastruct_h);

		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		APL_GOBACK_SUCCESS
	}

	RETURN_SUCCESS	: 
	{
		fclose(l_ptr_ini_file);
	   return(0);
	}

	RETURN_FAILURE	: 
	{
		fclose(l_ptr_ini_file);
  		return(-1);	
	}
}



 
 int MT_Rtv_AccDet_B(char ** argv, FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca		  sqlca;
	FILE					  *l_ptr_ini_file = NULL;
	char					  chr_l_inifile[FILENAME_LEN_A] = APL_NULL_STRING;
	char					  chr_l_handoff_dir[FILENAME_LEN_A] = APL_NULL_STRING;
	MT_CLIENT_STRUCT_H	  h_dl_client;
	MT_CLIENT_STRUCT_I	  i_dl_client;
	int					  int_retval;
	FILE					  *l_ptr_cust_det_file = NULL;
	char					  chr_l_cust_det_file_name[FILENAME_LEN_A] = APL_NULL_STRING;
	INTL_REPT_STRUCT_H			*l_intl_rept_struct_ha	=NULL;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion MT_Rtv_AccDet_B \n",NULL,p_intl_env_data_struct_h_d);

	memset(&h_dl_client,NULL,sizeof(MT_CLIENT_STRUCT_H));
	memset(&i_dl_client,NULL,sizeof(MT_CLIENT_STRUCT_I));
	l_intl_rept_struct_ha	=(INTL_REPT_STRUCT_H *)calloc(1, sizeof(INTL_REPT_STRUCT_H));
	APL_MALLOC_FAIL(l_intl_rept_struct_ha);

	sqlca.sqlcode = 0;

	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

	if ((l_ptr_ini_file = fopen(chr_l_inifile,"r")) == NULL)
		return(APL_FAILURE);

	if (CO_ReadToken(l_ptr_ini_file,"INTL_HF_PATH",chr_l_handoff_dir,l_debug_info_ptr) != APL_SUCCESS)
		return(APL_FAILURE);

	

	strcpy(chr_l_cust_det_file_name,chr_l_handoff_dir);
	strcat(chr_l_cust_det_file_name,g_mt_commonsys_params_struct_h.nation_code);
	strcat(chr_l_cust_det_file_name,".TXT");

	if ((l_ptr_cust_det_file = fopen(chr_l_cust_det_file_name,"w")) == NULL)
		return(APL_FAILURE);

			
				memset(l_intl_rept_struct_ha,NULL,sizeof(INTL_REPT_STRUCT_H));
			  


			  strcpy(l_intl_rept_struct_ha->report_name, chr_l_cust_det_file_name+strlen(chr_l_handoff_dir));
			  strcpy(l_intl_rept_struct_ha->report_desc, APL_HOFF_FILE_DESC);
			  strcpy(l_intl_rept_struct_ha->report_date, argv[2]);
			  l_intl_rept_struct_ha->report_width = 100;
			  strcpy(l_intl_rept_struct_ha->task_desc, p_intl_env_data_struct_h_d->processtion);
			  strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
			  strcpy(l_intl_rept_struct_ha->usr, p_intl_env_data_struct_h_d->usr);

			  

		  		 if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))
   			{
      			APL_GOBACK_FAIL
   			}

	

	EXEC SQL DECLARE AccountRecs CURSOR FOR
	SELECT * FROM MT_CLIENT
	WHERE (CLN_BRK_ALL = 'A' OR CLN_BRK_ALL = 'C')
	AND STATUS <> 'CA'
	ORDER BY cln_master
	FOR UPDATE OF access_stamp;

	EXEC SQL OPEN AccountRecs;

	IS_ANY_ORA_ERROR

	for(;;)
	{
		EXEC SQL FETCH AccountRecs INTO :h_dl_client:i_dl_client;

		IS_ANY_ORA_ERROR

		if (APL_ZERO_RESULT_SET)
			break;

		

		int_retval = MT_Prnt_AccDetRpt(l_ptr_cust_det_file,h_dl_client,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL

	}

	EXEC SQL CLOSE AccountRecs;

   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
	{
		fclose(l_ptr_ini_file);

		fclose(l_ptr_cust_det_file);

		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion MT_Rtv_AccDet_B successfully \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		fclose(l_ptr_ini_file);

		fclose(l_ptr_cust_det_file);
		
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion MT_Rtv_AccDet_B with failure \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_FAILURE);
	}
}



 
 int MT_Prnt_AccDetRpt(FILE *p_ptr_cust_det_file,MT_CLIENT_STRUCT_H p_mt_client_struct_h,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca			sqlca;
	char						chr_l_mstacc_cname[67] = APL_NULL_STRING;
	char						chr_l_mstacc_cname_buf[36] = APL_NULL_STRING;
	char						chr_l_acc_cname_buf[65] = APL_NULL_STRING;
	char						chr_l_gfcid_buf[11] = APL_NULL_STRING;
	char						chr_l_acc_stat[4] = APL_NULL_STRING;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion MT_Prnt_AccDetRpt\n",NULL,p_intl_env_data_struct_h_d);

	sqlca.sqlcode = 0;

	EXEC SQL SELECT cln_name
	INTO :chr_l_mstacc_cname
	FROM MT_CLIENT
	WHERE cln_code = RTRIM(:p_mt_client_struct_h.h_mstclt);

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	strncpy(chr_l_mstacc_cname_buf,chr_l_mstacc_cname,35);
	chr_l_mstacc_cname_buf[35] = APL_NULL_CHAR;

	
	CO_NewLine(chr_l_mstacc_cname_buf);
	
	strncpy(chr_l_acc_cname_buf,p_mt_client_struct_h.h_clnt_clr_name,64);
	chr_l_acc_cname_buf[64] = APL_NULL_CHAR;
	
	
	CO_NewLine(chr_l_acc_cname_buf);
	
	strncpy(chr_l_gfcid_buf,p_mt_client_struct_h.h_uniq_gcustody_id,10);
	chr_l_gfcid_buf[10] = APL_NULL_CHAR;

	if (strcmp(p_mt_client_struct_h.h_clt_status,STATUS_CLS_AUTH) == 0)
		strcpy(chr_l_acc_stat,"REV");
	else
		strcpy(chr_l_acc_stat,"XXX");

	
	
	fprintf(p_ptr_cust_det_file,"%s%5s%s%sN%s%s%s%s%10s%s%5sS\n",p_mt_client_struct_h.h_dl_client," ",chr_l_mstacc_cname_buf,chr_l_acc_cname_buf,p_mt_client_struct_h.h_currencycode,chr_l_gfcid_buf,chr_l_acc_stat,p_mt_client_struct_h.h_nationcode," ",p_mt_client_struct_h.h_mstclt," ");
	
	fprintf(p_ptr_cust_det_file,"%s%5s%s%sN%s%s%s%s%10s%s%5sC\n",p_mt_client_struct_h.h_ibbsclient," ",chr_l_mstacc_cname_buf,chr_l_acc_cname_buf,p_mt_client_struct_h.h_currencycode,chr_l_gfcid_buf,chr_l_acc_stat,p_mt_client_struct_h.h_nationcode," ",p_mt_client_struct_h.h_mstclt," ");

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion MT_Prnt_AccDetRpt successfuly \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion MT_Prnt_AccDetRpt with failure \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_FAILURE);
	}
}



 
 int CO_Proc_BtchLock(char **argv,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca					sqlca;
   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;

EXEC SQL VAR chr_g_restart_data is string;

	sqlca.sqlcode = 0;
		
	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CO_Proc_BtchLock\n",NULL,NULL);

	EXEC SQL SELECT processing_status INTO :chr_g_restart_data:g_restart_data_i
	FROM SYS_BATCHPROC
	WHERE process_name = :argv[0]
	AND   proc_init = :argv[1]
	AND STARTDATE = :argv[2]
	AND status = 'started'
	FOR UPDATE OF processing_status,status;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_BtchLock successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_BtchLock with failure \n",NULL,NULL);

		return(APL_FAILURE);
	}
}


 
 int CO_Proc_Exit(char **argv,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr,int p_flg)
 {
	struct sqlca					sqlca;
	char								chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;

	sqlca.sqlcode = 0;
		
	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CO_Proc_Exit\n",NULL,NULL);
	if (p_flg == 0)
	{
		

		if (CO_ChkErr(*l_debug_info_ptr) != APL_SUCCESS)
		{
			memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
			sprintf(chr_l_buf,"Finished Customer Details");

			EXEC SQL UPDATE SYS_BATCHPROC
			SET stat_det = :chr_l_buf,
				 status = 'completed'
			WHERE process_name = :argv[0]
			AND   proc_init = :argv[1]
			AND STARTDATE = :argv[2]
			AND status = 'started';
	
			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

		}

		EXEC SQL COMMIT WORK RELEASE;

		CO_ProcMonitor(p_ptr_log_file,"Work Committed \n",NULL,NULL);
	}
	else if (p_flg == 1)
	{
		EXEC SQL ROLLBACK WORK RELEASE;

		CO_ProcMonitor(p_ptr_log_file,"Rollback done \n",NULL,NULL);
	}

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_Exit successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_Exit with failure \n",NULL,NULL);

		return(APL_FAILURE);
	}
}


 
 int CO_DB_Connection_I(char *p_username,char *p_passwd,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca					sqlca;

	sqlca.sqlcode = 0;
		
	CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CO_DB_Connection_I\n",NULL,NULL);
	
	EXEC SQL CONNECT :p_username IDENTIFIED BY :p_passwd;

	if (sqlca.sqlcode != 0)
		APL_GOBACK_FAIL

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(APL_OUT_FILE, "Leaving processtion CO_DB_Connection_I successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(APL_OUT_FILE, "Leaving processtion CO_DB_Connection_I with failure \n",NULL,NULL);

		return(APL_FAILURE);
	}
}

