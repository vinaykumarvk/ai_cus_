




#include "stdio_64.h"
#include <string.h> 
#include <stdlib.h> 
#include "IV_Control_A.h"
#include "CO_Commdef.h"


EXEC SQL INCLUDE SQLCA;
extern int MS_Rtv_DataFile(long *,char *,char *,char *,char *,long *,char,char *, int *,DEBUG_INFO_STRUCT_H **);



int GBDbInsIMSGENT( char *p_msgno, char *chr_p_key, 
		    char *p_client,char chr_p_autotransmit,char *chr_p_param_str, 
                   DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	
PRO_GSEQNUM_STRUCT_H l_pro_gseqnum_struct_h_msg ;
												
int int_returnseq	=	0;
short int_l_cond	=	0;
short l_cond_vtb = 0;
short l_cond_canc = 0;
long int l_next_seq_no_15022 = 0; 
char chr_tempcharptr=APL_NULL_CHAR;
		MS_MSGENT_STRUCT l_ms_msgent_structa; 
		I_MS_MSGENT_STRUCT l_ms_msgent_struct_i; 
		char l_sys_date[20]=APL_NULL_STRING;
		/* PJ */
		memset(&l_ms_msgent_structa, NULL, sizeof(MS_MSGENT_STRUCT));	
		memset(&l_pro_gseqnum_struct_h_msg, NULL, sizeof(PRO_GSEQNUM_STRUCT_H));	

	EXEC SQL BEGIN DECLARE SECTION;

		long int int_h_max_msg_seq_no = 0;
		EXEC SQL VAR l_ms_msgent_structa.swift_msg_no IS STRING;
		EXEC SQL VAR l_ms_msgent_structa.proc_init IS STRING;
		EXEC SQL VAR l_ms_msgent_structa.client IS STRING;
		EXEC SQL VAR l_ms_msgent_structa.info_file IS STRING;
		EXEC SQL VAR l_ms_msgent_structa.proc_data IS STRING;
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;


   char chr_l_data_filename[PATH_LENGTH]=APL_NULL_STRING;
   int int_returnval = 0,int_retstat = 0;
	char chr_h_new_msg_no[7]=APL_NULL_STRING; 
	int int_l_gen_instr_msg = 0; 
   int int_noelem=0;    
   char **chr_l_param=NULL;   

	int l_count = 1;		/* To skip the DAT file creation for client not having msg address */
	short i_count = 0;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

   memset(chr_l_data_filename,APL_NULL_CHAR,PATH_LENGTH);

	printf("ENTERED FUNCTION GDBIMDGENT***************************************\n");
	CO_ProcMonitor(APL_OUT_FILE,"Entered in GBDbInsIMSGENT -------------- Biju\n\n\n\n\n",NULL,NULL);
		/*printf("\n\n\n****************\np_MsgNo|%s|,chr_p_key|%s|,p_client|%s|,chr_p_autotransmit|%c|,chr_p_param_str|%s|\n",p_msgno,chr_p_key,p_client,chr_p_autotransmit,chr_p_param_str);*/
		printf("\n\n\n****************\np_MsgNo|%s|,chr_p_key|%s|,p_client|%s|,chr_p_autotransmit|%c|\n",p_msgno,chr_p_key,p_client,chr_p_autotransmit);
	sqlca.sqlcode = 0L;

	//printf("chr_p_param_str is |%s|\n",chr_p_param_str);
	fflush(stdout);

	if ( !strlen(p_msgno) )
	{
		APL_DATA_MISSING("MsgNo", APL_NULL_STRING, APL_NULL_STRING)

		APL_GOBACK_FAIL
	}

/*   if( !strlen(chr_p_autotransmit) )*/
   if( chr_p_autotransmit == APL_NULL_CHAR )
	{
		APL_DATA_MISSING("AutoTransmit", APL_NULL_STRING, APL_NULL_STRING)

		APL_GOBACK_FAIL
	}

	if ( !strlen(chr_p_key) )
	{
		strcpy(l_ms_msgent_structa.proc_init,APL_NULL_STRING);
	}

	if ( !strlen(p_client) )
	{
		strcpy(l_ms_msgent_structa.client,APL_NULL_STRING);
	}

/**if ( !strlen(chr_p_param_str) )
	{
		chr_p_param_str=&chr_tempcharptr;
		strcpy(l_ms_msgent_structa.proc_data,APL_NULL_STRING);
	}

	else if ( !strlen(chr_p_param_str) )
	{
		strcpy(l_ms_msgent_structa.proc_data,APL_NULL_STRING);
	} **/ 

	strcpy(l_pro_gseqnum_struct_h_msg.sequencename,"MSGDAT");
	strcpy(l_pro_gseqnum_struct_h_msg.seq_attrb_a,APL_NULL_STRING);
	strcpy(l_pro_gseqnum_struct_h_msg.seq_attrb_b,APL_NULL_STRING);
	strcpy(l_pro_gseqnum_struct_h_msg.seq_attrb_c,APL_NULL_STRING);

   l_pro_gseqnum_struct_h_msg.seq_stepby = 1;
   l_pro_gseqnum_struct_h_msg.seq_start = 1;
   l_pro_gseqnum_struct_h_msg.last_seqnum =0;
   int_returnseq = CO_RtvNxtSeqNum(&l_pro_gseqnum_struct_h_msg, l_debug_info_ptr);
   if(APL_FAILURE == int_returnseq)
   {
          APL_GOBACK_FAIL;
	}
	int_h_max_msg_seq_no = int_returnseq; 
	l_ms_msgent_structa.swift_msg_seqno = int_returnseq; 

	strcpy(l_ms_msgent_structa.swift_msg_no, p_msgno);
	strcpy(l_ms_msgent_structa.proc_init, chr_p_key);
	strcpy(l_ms_msgent_structa.client, p_client);
	if (strlen( chr_p_param_str )!=0)
   strcpy(l_ms_msgent_structa.proc_data,chr_p_param_str);
   l_ms_msgent_structa.auto_tran_ind[0] = chr_p_autotransmit;
   l_ms_msgent_structa.auto_tran_ind[1] = APL_NULL_CHAR;

	if ( strcmp(p_msgno, "508")==0 || strcmp(p_msgno, MS_SWIFT_BOG_NO)==0 || strcmp(p_msgno,MS_MSGNO_586) == 0 || strcmp(p_msgno, MS_MSGNO_538)==0 || strcmp(p_msgno,"564N91") == 0 || strcmp(p_msgno,"564R91") == 0 )
   	l_ms_msgent_structa.status_ind[0] = 'R';
	else
   	l_ms_msgent_structa.status_ind[0] = 'P';
   	l_ms_msgent_structa.status_ind[1] = APL_NULL_CHAR;


	
	strcpy(chr_h_new_msg_no,p_msgno);
	if ( strcmp(p_msgno, MS_MSGNO_578R01)==0 ) 
		{
			
			strcpy(chr_h_new_msg_no, MS_MSGNO_534N01);
   		l_ms_msgent_structa.status_ind[0] = 'R';
   	l_ms_msgent_structa.status_ind[1] = APL_NULL_CHAR;
			int_l_gen_instr_msg = 1;
		}
	

   l_ms_msgent_structa.swift_count = 0;
   l_ms_msgent_structa.gcn_count = 0;
   l_ms_msgent_structa.telex_count = 0;
   l_ms_msgent_structa.fax_count = 0;
   l_ms_msgent_structa.clts_count = 0;
	
	
	printf("\n ******* 142 \n");

	printf("\n now checking if message address is maintaied for client |%s|\n",p_client);
 	if(strcmp(p_client,APL_NULL_STRING))
 	{
        	EXEC SQL SELECT COUNT(*) INTO :l_count:i_count FROM mt_msgaddress
            WHERE CLN_CODE = :p_client AND STATUS = 'AA'
			and MSG_IDENT_NO in (SELECT TO_NUMBER(MSG_MAP_NO) FROM MS_MSGCRF WHERE SWIFT_MSG_NO = :p_msgno ); //HM :: Added msg nos condition
			
        	IS_ANY_ORA_ERROR
 	}

	printf("\n count is |%i|\n",l_count);
	fflush(stdout);
	if(l_count > 0)
	{

	if ( strcmp(p_msgno, MS_MSGNO_578R01)==0 ) 
		{
		
			
   		int_returnval = MS_Rtv_DataFile(&l_next_seq_no_15022,p_client,chr_h_new_msg_no,chr_p_key,chr_p_param_str,
										  &int_h_max_msg_seq_no,chr_p_autotransmit,
										  chr_l_data_filename, &int_retstat,l_debug_info_ptr);
	 		if(int_returnval == APL_FAILURE)
   			{
					CO_InsertErr(l_debug_info_ptr,ERR_MSG_NOTGENERATED,chr_h_new_msg_no,chr_p_key,
									APL_NULL_STRING,__LINE__ , __FILE__);
					APL_GOBACK_FAIL;
   			}
   		else
      		strcpy(l_ms_msgent_structa.info_file,chr_l_data_filename);
		}
   else
		{
			int_returnval = MS_Rtv_DataFile(&l_next_seq_no_15022,p_client,p_msgno,chr_p_key,chr_p_param_str,
										  &int_h_max_msg_seq_no,chr_p_autotransmit,
										  chr_l_data_filename, &int_retstat,l_debug_info_ptr);
		 	if(int_returnval == APL_FAILURE)
   			{
					CO_InsertErr(l_debug_info_ptr,ERR_MSG_NOTGENERATED,p_msgno,chr_p_key,
										APL_NULL_STRING,__LINE__ , __FILE__);
					APL_GOBACK_FAIL;
   			}
   		else
      		strcpy(l_ms_msgent_structa.info_file,chr_l_data_filename);
		}

   l_ms_msgent_structa.swift_msg_seqno = int_h_max_msg_seq_no;


   if (strcmp(p_msgno,"563N05")==0 )
      {
       CO_SplitStr(l_ms_msgent_structa.proc_data,';', &int_noelem, &chr_l_param);
          if (strcmp(chr_l_param[3],"R")==0)
             {
               l_ms_msgent_structa.status_ind[0] = 'P';
   	l_ms_msgent_structa.status_ind[1] = APL_NULL_CHAR;
             }
      }
		if(strcmp(p_msgno,"592")==0)
		{
   		if (APL_FAILURE == CO_Chk_CntryEnabled(  "MSG_54B",
    		     	                                 "GEN_54B_FOR_BOG",
      	      	                               &l_cond_canc,
         	      	                            l_debug_info_ptr ))
   		{
        		APL_GOBACK_FAIL
   		}
			if( l_cond_canc >0)
			{
				l_ms_msgent_structa.status_ind[0] = 'P';
   	l_ms_msgent_structa.status_ind[1] = APL_NULL_CHAR;
			}
		}

		if(strcmp(p_msgno,"534")==0)
		{
			
			if((strcmp(l_ms_msgent_structa.proc_data,APL_NULL_STRING)!=0) && (strstr(l_ms_msgent_structa.proc_data,"ALL")==0))
			{
				l_ms_msgent_structa.status_ind[0] = 'P';
   	l_ms_msgent_structa.status_ind[1] = APL_NULL_CHAR;
			}

		}


			printf("\n |%s|\n",l_ms_msgent_structa.swift_msg_no);
			printf("\n |%s|\n",l_ms_msgent_structa.proc_init);
                        //AIX - Warnings Removal - changed 'd' to 'ld'
			printf("\n |%ld|\n",l_ms_msgent_structa.swift_msg_seqno);
			printf("\n |%s|\n",l_ms_msgent_structa.client);
			printf("\n |%s|\n",l_ms_msgent_structa.info_file);
			printf("\n |%ld|\n",l_ms_msgent_structa.swift_count);
			printf("\n |%ld|\n",l_ms_msgent_structa.telex_count);
			printf("\n |%ld|\n",l_ms_msgent_structa.fax_count);
			printf("\n |%ld|\n",l_ms_msgent_structa.gcn_count);
			printf("\n |%ld|\n",l_ms_msgent_structa.clts_count);
			printf("\n |%s|\n",l_ms_msgent_structa.status_ind);
			printf("\n |%s|\n",l_ms_msgent_structa.auto_tran_ind);
			printf("\n |%s|\n",l_ms_msgent_structa.proc_data);

			strcpy(l_ms_msgent_structa.proc_data,APL_NULL_STRING);

			printf("sqlca.sqlcode is %d\n",sqlca.sqlcode);
			sqlca.sqlcode =0;

			l_ms_msgent_struct_i.i_swift_msg_no=0;
			l_ms_msgent_struct_i.i_proc_init=0;
			l_ms_msgent_struct_i.i_msg_sequence_no=0;
			l_ms_msgent_struct_i.i_dl_client=0;
			l_ms_msgent_struct_i.i_info_file=0;
			l_ms_msgent_struct_i.i_swift_count=0;
			l_ms_msgent_struct_i.i_telex_count=0;
			l_ms_msgent_struct_i.i_no_of_fax_addr=0;
			l_ms_msgent_struct_i.i_no_of_gcn_addr=0;
			l_ms_msgent_struct_i.i_no_of_clts=0;
			l_ms_msgent_struct_i.i_status_ind=0;
			l_ms_msgent_struct_i.i_auto_tran_flag=0;
			l_ms_msgent_struct_i.i_proc_data=0;


	EXEC SQL INSERT INTO MS_MSGENT
				VALUES (:l_ms_msgent_structa.swift_msg_no:l_ms_msgent_struct_i.i_swift_msg_no, 
							:l_ms_msgent_structa.proc_init:l_ms_msgent_struct_i.i_proc_init, 
							:l_ms_msgent_structa.swift_msg_seqno:l_ms_msgent_struct_i.i_msg_sequence_no,
						  :l_ms_msgent_structa.client:l_ms_msgent_struct_i.i_dl_client, 	
						  :l_ms_msgent_structa.info_file:l_ms_msgent_struct_i.i_info_file, 
						  :l_ms_msgent_structa.swift_count:l_ms_msgent_struct_i.i_swift_count, 
						  :l_ms_msgent_structa.telex_count:l_ms_msgent_struct_i.i_telex_count, 
						  :l_ms_msgent_structa.fax_count:l_ms_msgent_struct_i.i_no_of_fax_addr, 
						  :l_ms_msgent_structa.gcn_count:l_ms_msgent_struct_i.i_no_of_gcn_addr, 
						  :l_ms_msgent_structa.clts_count:l_ms_msgent_struct_i.i_no_of_clts, 
						  :l_ms_msgent_structa.status_ind:l_ms_msgent_struct_i.i_status_ind, 
						  :l_ms_msgent_structa.auto_tran_ind:l_ms_msgent_struct_i.i_auto_tran_flag, 
						  :l_ms_msgent_structa.proc_data:l_ms_msgent_struct_i.i_proc_data);
	/**EXEC SQL COMMIT; **/
	IS_ANY_ORA_ERROR

			printf("sqlca.sqlcode is %d\n",sqlca.sqlcode);
			fflush(stdout);
	IS_ANY_ORA_ERROR

	
	if (strcmp(l_ms_msgent_structa.swift_msg_no, MS_MSGNO_578R01)==0 || int_l_gen_instr_msg==1)
		{
			APL_GOBACK_SUCCESS
		}
	

	
	if (strcmp(p_msgno, MS_MSGNO_52X)==0 || strcmp(p_msgno, MS_SWIFT_BOG_NO)==0)
	{
		if (APL_FAILURE == CO_Chk_CntryEnabled(	"MSG_52X",
															"GEN_52X_FOR_BOG",
															&int_l_cond,
															l_debug_info_ptr ))
		{
			APL_GOBACK_FAIL
		}
		
		
		
		if (APL_FAILURE == CO_Chk_CntryEnabled(	"MSG_52X",
															"GEN_52X_FOR_VTB",
															&l_cond_vtb,
															l_debug_info_ptr ))
		{
			APL_GOBACK_FAIL
		}

		if (int_l_cond || l_cond_vtb)
		{
			strcpy(chr_p_param_str, chr_l_data_filename);
		}
	}

	
	if ( !strcmp(p_msgno, "53xN01") || !strcmp(p_msgno, "508") || int_l_cond || l_cond_vtb || strcmp(p_msgno,MS_MSGNO_586) == 0 || !strcmp(p_msgno, MS_MSGNO_538) || strcmp(p_msgno,"564N91") == 0 || strcmp(p_msgno,"564R91") == 0 )
	{
		

		APL_GOBACK_SUCCESS
	}
	memset(chr_h_new_msg_no, APL_NULL_CHAR, 7);
	memset(&l_ms_msgent_structa, NULL, sizeof(MS_MSGENT_STRUCT));

	if ( APL_FAILURE == MSG_Rtv_NewMsgNo(p_msgno, chr_h_new_msg_no, l_debug_info_ptr) )
	{
		APL_GOBACK_FAIL
	}
	if((l_cond_canc==0)&& (strcmp(p_msgno,"592")==0))
	{
		strcpy(chr_h_new_msg_no,p_msgno);
	}

	
	if(l_next_seq_no_15022 == 0)
	{
   	int_returnseq = CO_RtvNxtSeqNum(&l_pro_gseqnum_struct_h_msg, l_debug_info_ptr);
	Alert("int_returnseq is |%d|",int_returnseq);

 	if(APL_FAILURE == int_returnseq)
   	{
      	APL_GOBACK_FAIL
	}
	}
	else
	{
		int_returnseq = l_next_seq_no_15022;
	}
	strcpy(l_ms_msgent_structa.swift_msg_no, chr_h_new_msg_no);
	strcpy(l_ms_msgent_structa.proc_init, chr_p_key);
	l_ms_msgent_structa.swift_msg_seqno = int_returnseq; 
	strcpy(l_ms_msgent_structa.client, p_client);
	strcpy(l_ms_msgent_structa.info_file, chr_l_data_filename);
   l_ms_msgent_structa.status_ind[0] = 'R';
   	l_ms_msgent_structa.status_ind[1] = APL_NULL_CHAR;
   l_ms_msgent_structa.swift_count = 0;
   l_ms_msgent_structa.gcn_count = 0;
   l_ms_msgent_structa.telex_count = 0;
   l_ms_msgent_structa.fax_count = 0;
   l_ms_msgent_structa.clts_count = 0;
   l_ms_msgent_structa.auto_tran_ind[0] = chr_p_autotransmit;
   l_ms_msgent_structa.auto_tran_ind[1] = APL_NULL_CHAR;
   strcpy(l_ms_msgent_structa.proc_data,chr_p_param_str);


	int_returnval = MS_Mod_MsgEntAdd(l_ms_msgent_structa,int_retstat,l_debug_info_ptr);
   if(int_returnval == APL_FAILURE)
   {
     APL_GOBACK_FAIL
   }

	}
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of GBDbInsIMSGENT.\n", l_debug_info_ptr, (INTL_ENV_DATA_STRUCT_H *)NULL); 
			printf("\n\n\n\n******success\n");
		}
		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of GBDbInsIMSGENT.\n", l_debug_info_ptr, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}
		return APL_FAILURE;
}



char *IV_Rtv_FileNameNew(char *p_String1, const char *p_String2, const char *p_date)
{
	char chr_l_filename_d[40], int_l_temp[APL_DATE_LEN], *chr_l_last;

	memset(chr_l_filename_d, APL_NULL_CHAR, 40);
	memset(int_l_temp, APL_NULL_CHAR, APL_DATE_LEN);
	chr_l_last = (char *)NULL;

	strcpy(chr_l_filename_d, p_String1);
	strcat(chr_l_filename_d, "_");
	strcat(chr_l_filename_d, p_String2);
	strcat(chr_l_filename_d, ".");	
	strcpy(int_l_temp, p_date);
	strcpy(int_l_temp, strtok_r(int_l_temp, " ", &chr_l_last));
	strcat(chr_l_filename_d, strtok_r(int_l_temp, "/", &chr_l_last));
	strcat(chr_l_filename_d, strtok_r((char *)NULL, "/", &chr_l_last));
	strcat(chr_l_filename_d, strtok_r((char *)NULL, "/", &chr_l_last));

	strcpy(p_String1, chr_l_filename_d);

	return p_String1;
}



int IV_Rtv_ValDt(char *p_value_date, int *int_p_retstat, 
		    DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	extern int IV_Rtv_IVCNTLPARAM(SYS_IVCONTROLPARAM_STRUCT *l_sys_ivcntlparam_struct, 
				   int *int_l_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	extern int CO_Chk_Holiday(char *p_holi_date, int *p_exist,
                                    DEBUG_INFO_STRUCT_H **l_debug_info_ptr,char *p_exch_code );

	

	int int_l_status = 0, int_l_existauthhol = 0;
	SYS_IVCONTROLPARAM_STRUCT l_sys_ivcntlparam_struct;

	EXEC SQL BEGIN DECLARE SECTION;

		char chr_h_bl_gen_date[APL_DATE_LEN], h_value_date[APL_DATE_LEN];
		int int_h_value_days;
		short int i_value_date = 0, i_val_days = 0;
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	EXEC SQL SELECT VAL_DAYS
		 INTO :int_h_value_days INDICATOR :i_val_days
		 FROM INVOICE_SYSTEMPARAM;

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}
	else if ( sqlca.sqlcode == 1403 )
	{
		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, ERR_BILLSYSSETUP_PARAMS_NOTFND, APL_NULL_STRING,
			       APL_NULL_STRING, APL_NULL_STRING, __LINE__, 
			       __FILE__);

		APL_GOBACK_FAIL
	}

	memset(l_sys_ivcntlparam_struct.b_prev_date, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_sys_ivcntlparam_struct.b_upto_date, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_sys_ivcntlparam_struct.b_processdt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_sys_ivcntlparam_struct.b_dlv_date, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_sys_ivcntlparam_struct.last_dlv_date, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_sys_ivcntlparam_struct.archival_dt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_sys_ivcntlparam_struct.last_rpt_date, APL_NULL_CHAR, APL_DATE_LEN);

	int_l_status = 0;

	if ( APL_FAILURE == IV_Rtv_IVCNTLPARAM(&l_sys_ivcntlparam_struct, &int_l_status, 
					     l_debug_info_ptr) )
	{
		if ( int_l_status == IV_CRITCAL_ERROR_IND )
		{
			*int_p_retstat = int_l_status;

			APL_GOBACK_FAIL
		}
		else if ( int_l_status == IV_NO_DATA_FOUND_ERR )
		{
			*int_p_retstat = IV_CRITCAL_ERROR_IND;

			CO_InsertErr(l_debug_info_ptr, ERR_BILLCNTRL_PARAM_NOTFND, 
				       APL_NULL_STRING, APL_NULL_STRING, 
				       APL_NULL_STRING, __LINE__, __FILE__);

			APL_GOBACK_FAIL
		}
	}

	strcpy(chr_h_bl_gen_date, l_sys_ivcntlparam_struct.b_upto_date);
	memset(h_value_date, APL_NULL_CHAR, APL_DATE_LEN);

	EXEC SQL SELECT TO_DATE(:chr_h_bl_gen_date) + :int_h_value_days
		 INTO :h_value_date INDICATOR :i_value_date
		 FROM DUAL;

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);
		memset(p_value_date, APL_NULL_CHAR, APL_DATE_LEN);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	while (1)
	{
		int_l_existauthhol = 0;

		if ( APL_FAILURE == CO_Chk_Holiday(h_value_date,
						     &int_l_existauthhol,
						     l_debug_info_ptr,APL_NULL_STRING) )
		{
			if ( APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr) )
			{
				*int_p_retstat = IV_CRITCAL_ERROR_IND;

				APL_GOBACK_FAIL
			}
		}
		else if ( !int_l_existauthhol ) 
		{
			break;
		}

		i_value_date = 0;

		EXEC SQL SELECT TO_DATE(:h_value_date) + 1
			 INTO :h_value_date INDICATOR :i_value_date
			 FROM DUAL;

		if ( sqlca.sqlcode < 0 )
		{
			char chr_l_buffer[KEY_LENGTH];

			memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);
			memset(p_value_date, APL_NULL_CHAR, APL_DATE_LEN);

			ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

			*int_p_retstat = IV_CRITCAL_ERROR_IND;

			CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
				       APL_NULL_STRING, APL_NULL_STRING, 
				       __LINE__, __FILE__);

			APL_GOBACK_FAIL
		}
	}

	strcpy(p_value_date, h_value_date);

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Rtv_ValDt().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
IV_Rtv_ValDt().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int MSG_Rtv_NewMsgNo(char *p_old_msg_no,
					   char *p_new_msg_no,
					   DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{



EXEC SQL BEGIN DECLARE SECTION;
char chr_h_old_msg_no[7];
char chr_h_new_msg_no[7];
short i_new_msg_no = 0;
EXEC SQL VAR chr_h_old_msg_no IS STRING;
EXEC SQL VAR chr_h_new_msg_no IS STRING;

struct sqlca sqlca;

EXEC SQL END DECLARE SECTION;

#ifdef APL_THREADS
	APL_SET_CONTEXT 
	EXEC SQL CONTEXT USE :my_ctx_local;
#endif
memset(chr_h_old_msg_no,APL_NULL_CHAR,7);
memset(chr_h_new_msg_no,APL_NULL_CHAR,7);
sqlca.sqlcode=0;


strcpy(chr_h_old_msg_no,p_old_msg_no);

 if ( !strlen(chr_h_old_msg_no) )
 {
	APL_DATA_MISSING( "OLD_MSG_NO", APL_NULL_STRING, APL_NULL_STRING );
	APL_GOBACK_FAIL	
 }


EXEC SQL SELECT ISO_MSG_NO
INTO :chr_h_new_msg_no:i_new_msg_no
FROM MS_MSGCRF
WHERE SWIFT_MSG_NO = :chr_h_old_msg_no AND
		MSG_MAP_NO = (SELECT MAX(TO_NUMBER(MSG_MAP_NO))
					 FROM MS_MSGCRF
					 WHERE SWIFT_MSG_NO = :chr_h_old_msg_no);

IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(sqlca.sqlcode, "OLD MSG. NO.", "IMSGCRF", APL_NULL_STRING)

strcpy(p_new_msg_no,chr_h_new_msg_no);

printf("\n After getting the value chr_h_old_msg_no is %s and i_new_msg_no is %s and p_new_msg_no is %s",chr_h_old_msg_no,chr_h_new_msg_no,p_new_msg_no);

fflush(stdout);
 
 APL_GOBACK_SUCCESS
 RETURN_SUCCESS:

	 //APL_IF_DEBUG
	 //{
		 CO_ProcMonitor(APL_OUT_FILE,"Exiting successfully out of  MSG_Rtv_NewMsgNo\n",NULL,NULL);
	 //}
    return APL_SUCCESS;

 RETURN_FAILURE:

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting unsuccessfully out of  MSG_Rtv_NewMsgNo\n",NULL,NULL);
	}
	return APL_FAILURE;
}
