





#include "CO_HostStructdef.h"
EXEC SQL INCLUDE SQLCA.H;


extern int ltoa_r(long p_long,char *p_return, int p_length); // AIX - Warnings Removal

int CR_Mod_DBOrd(	OR_ORDERDETAILS_STRUCT_H		*p_or_orderdetails_struct_h_b,
						char						*p_ora_rowid,
						INTL_ENV_DATA_STRUCT_H	*p_intl_envdatastruct_h,
						DEBUG_INFO_STRUCT_H			**l_debug_info_ptr )
{
	struct sqlca sqlca;
	OR_ORDERDETAILS_STRUCT_I	*l_or_orderdetails_struct_i			=	NULL;
	char	chr_l_buf[BUFFER_LEN]							=	APL_NULL_STRING;
	char	chr_l_sysdatetime_A[APL_DATE_LEN]			=	APL_NULL_STRING;
	char	chr_l_maker[APL_USERID_LEN]					=	APL_NULL_STRING;
	char	chr_l_checker[APL_USERID_LEN]				=	APL_NULL_STRING;
	char	chr_l_makerdt[APL_DATE_LEN]					=	APL_NULL_STRING;
	char	chr_l_checkerdt[APL_DATE_LEN]				=	APL_NULL_STRING;
	char	chr_l_order_status[RECORD_STAT_LEN]		=	APL_NULL_STRING;
	char	chr_l_h_order_status[RECORD_STAT_LEN]	=	APL_NULL_STRING;
	short	l_i_order_status							=	0;
	short	l_i_checker									=	0;
	short	l_i_checkerdt								= 	0;
	short	int_l_error_flg									=	APL_SUCCESS;
	
	char	chr_l_h_order_canceleddt[APL_DATE_LEN]	= 	APL_NULL_STRING;
	short	l_i_order_canceleddt						= 	0;
	char	chr_l_sysdate_b[APL_DATE_LEN] 				=	APL_NULL_STRING;	

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	

	APL_IF_DEBUG
	{
      CO_ProcMonitor(	APL_OUT_FILE, 
						"Entered Function CR_Mod_DBOrd\n",
						NULL,
						p_intl_envdatastruct_h);
		memset( chr_l_buf, NULL, BUFFER_LEN );
	   sprintf(		chr_l_buf, 
						"The Account is : %s\n", 
						p_or_orderdetails_struct_h_b->h_dl_client);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						p_intl_envdatastruct_h);
		memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(		chr_l_buf, 
						"The Reference No. is : %s\n", 
						p_or_orderdetails_struct_h_b->h_orderindentity_no);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						p_intl_envdatastruct_h);
		memset( chr_l_buf, NULL, BUFFER_LEN );
//AIX -Warnings Removal
      sprintf(		chr_l_buf, 
						"The Mode is : %s\n",   
						p_intl_envdatastruct_h->h_mode);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						p_intl_envdatastruct_h);
	}

	

	EXEC SQL VAR chr_l_h_order_status	IS STRING;

	

	if ( strcmp( p_intl_envdatastruct_h->h_mode, APL_FUNC_INPUT ) &&
			!strlen(p_ora_rowid) )
	{
		APL_DATA_MISSING(	"ROWID",
								APL_NULL_STRING,
								APL_NULL_STRING );
		int_l_error_flg	= APL_FAILURE;
	}

	if ( int_l_error_flg == APL_FAILURE ) //AIX -Warnings Removal
	{
		APL_GOBACK_FAIL;
	}

	

	if ( APL_FAILURE == CO_RtvSysDtTime(	chr_l_sysdatetime_A,
															l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL;
	}

	

	if ( APL_SUCCESS == CO_ChkErr( *l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL;
	}

	

	

	if ( !strcmp( p_intl_envdatastruct_h->h_mode, APL_FUNC_INPUT ) ||
		  !strcmp( p_intl_envdatastruct_h->h_mode, APL_FUNC_MODIFY ) )
	{

		

		l_or_orderdetails_struct_i = (OR_ORDERDETAILS_STRUCT_I*)calloc(1,sizeof(OR_ORDERDETAILS_STRUCT_I) );
		APL_MALLOC_FAIL(l_or_orderdetails_struct_i);

		

		l_or_orderdetails_struct_i->i_dl_client 			= 0;
		l_or_orderdetails_struct_i->i_orderindentity_no 		= 0;
		l_or_orderdetails_struct_i->i_buy_sell_flag 		= 0;
		l_or_orderdetails_struct_i->i_orderdate			= 0;
		l_or_orderdetails_struct_i->i_orderquantity			= 0;
		l_or_orderdetails_struct_i->i_limit_ind			= 0;
		l_or_orderdetails_struct_i->i_isgte_ind				= 0;
		l_or_orderdetails_struct_i->i_all_none_ind		= 0;
		l_or_orderdetails_struct_i->i_ex_arena			= 0;
		l_or_orderdetails_struct_i->i_ord_stat	= 0;
		l_or_orderdetails_struct_i->i_instr_code			= 0;
		l_or_orderdetails_struct_i->i_maker				= 0;
		l_or_orderdetails_struct_i->i_maker_dt			= 0;
		l_or_orderdetails_struct_i->i_access_stamp	= 0;
		l_or_orderdetails_struct_i->i_checker			= -1;
		l_or_orderdetails_struct_i->i_checker_dt		= -1;

		

		if ( !strcmp(p_or_orderdetails_struct_h_b->h_isgte_ind, APL_YES_IND) )
		{
			l_or_orderdetails_struct_i->i_expirydate = 0;
		}
		else
		{
			l_or_orderdetails_struct_i->i_expirydate = -1;
		}

		

		if ( !strcmp(p_or_orderdetails_struct_h_b->h_limit_ind, APL_YES_IND) )
		{
			l_or_orderdetails_struct_i->i_limitpr = 0;
		}
		else
		{
			l_or_orderdetails_struct_i->i_limitpr = -1;
		}

		l_or_orderdetails_struct_i->i_canceleddate = -1;
		
		
		l_or_orderdetails_struct_i->i_candropdate	= -1;
		
		if ( strlen(p_or_orderdetails_struct_h_b->h_broker_cd) )
		{
			l_or_orderdetails_struct_i->i_broker_cd = 0;
		}
		else
		{
			l_or_orderdetails_struct_i->i_broker_cd = -1;
		}

		if ( strlen(p_or_orderdetails_struct_h_b->h_locindentity_no) )
		{
			l_or_orderdetails_struct_i->i_locindentity_no = 0;
		}
		else
		{
			l_or_orderdetails_struct_i->i_locindentity_no = -1;
		}

		if ( strlen(p_or_orderdetails_struct_h_b->h_lrdltype) )
		{
			l_or_orderdetails_struct_i->i_lrdltype = 0;
		}
		else
		{
			l_or_orderdetails_struct_i->i_lrdltype = -1;
		}

		l_or_orderdetails_struct_i->i_lr_chkdate 	= -1;
		l_or_orderdetails_struct_i->i_lr_ublckdate	= -1;
		l_or_orderdetails_struct_i->i_ublckdate		= -1;
		l_or_orderdetails_struct_i->i_lastexecdate	= -1;
		l_or_orderdetails_struct_i->i_lastdeal	= -1;

		

		strcpy( p_or_orderdetails_struct_h_b->h_maker, p_intl_envdatastruct_h->usr );
		strcpy( p_or_orderdetails_struct_h_b->h_maker_dt, chr_l_sysdatetime_A );
		strcpy( p_or_orderdetails_struct_h_b->h_checker, APL_NULL_STRING );
		strcpy( p_or_orderdetails_struct_h_b->h_checker_dt, APL_NULL_STRING );
		strcpy( p_or_orderdetails_struct_h_b->h_access_stamp, chr_l_sysdatetime_A );
		strcpy( p_or_orderdetails_struct_h_b->h_ord_stat, STATUS_UAUTH );

		if ( !strcmp(p_intl_envdatastruct_h->h_mode, APL_FUNC_INPUT) )
		{

			

			EXEC SQL INSERT INTO OR_ORDERDETAILS VALUES ( :p_or_orderdetails_struct_h_b:l_or_orderdetails_struct_i );
			IS_ANY_ORA_ERROR_AND_DUPLICATE(	ERR_ORD_EXISTS,
															p_or_orderdetails_struct_h_b->h_dl_client,
															p_or_orderdetails_struct_h_b->h_orderindentity_no,
															APL_NULL_STRING );
		}
		else 
		{

			

			EXEC SQL UPDATE OR_ORDERDETAILS 
						SET	BUY_SELL_IND 		=	:p_or_orderdetails_struct_h_b->h_buy_sell_flag:l_or_orderdetails_struct_i->i_buy_sell_flag,
								ORD_DATE			=	:p_or_orderdetails_struct_h_b->h_orderdate:l_or_orderdetails_struct_i->i_orderdate,
								ORD_QTY			=	:p_or_orderdetails_struct_h_b->h_orderquantity:l_or_orderdetails_struct_i->i_orderquantity,
								LIMIT_IND			=	:p_or_orderdetails_struct_h_b->h_limit_ind:l_or_orderdetails_struct_i->i_limit_ind,
								ISGTE_IND				=	:p_or_orderdetails_struct_h_b->h_isgte_ind:l_or_orderdetails_struct_i->i_isgte_ind,
								ALL_NONE_IND		=	:p_or_orderdetails_struct_h_b->h_all_none_ind:l_or_orderdetails_struct_i->i_all_none_ind,
								EX_ARENA			=	:p_or_orderdetails_struct_h_b->h_ex_arena:l_or_orderdetails_struct_i->i_ex_arena,
								ORD_STAT	=	:p_or_orderdetails_struct_h_b->h_ord_stat:l_or_orderdetails_struct_i->i_ord_stat,
								INSTR_CODE			=	:p_or_orderdetails_struct_h_b->h_instr_code:l_or_orderdetails_struct_i->i_instr_code,
								MAKER				=	:p_or_orderdetails_struct_h_b->h_maker:l_or_orderdetails_struct_i->i_maker,
								MAKER_DT			=	:p_or_orderdetails_struct_h_b->h_maker_dt:l_or_orderdetails_struct_i->i_maker_dt,
								ACCESS_STAMP	=	:p_or_orderdetails_struct_h_b->h_access_stamp:l_or_orderdetails_struct_i->i_access_stamp,
								CHECKER			=	:p_or_orderdetails_struct_h_b->h_checker:l_or_orderdetails_struct_i->i_checker,
								CHECKER_DT		=	:p_or_orderdetails_struct_h_b->h_checker_dt:l_or_orderdetails_struct_i->i_checker_dt,
								EXP_DATE			=	:p_or_orderdetails_struct_h_b->h_expirydate:l_or_orderdetails_struct_i->i_expirydate,
								LIMIT_PR		=	:p_or_orderdetails_struct_h_b->h_limitpr:l_or_orderdetails_struct_i->i_limitpr,
								BROKER_CD			=	:p_or_orderdetails_struct_h_b->h_broker_cd:l_or_orderdetails_struct_i->i_broker_cd,
								LCL_IDENTNO			=	:p_or_orderdetails_struct_h_b->h_locindentity_no:l_or_orderdetails_struct_i->i_locindentity_no,
								LR_DL_CLASS		=	:p_or_orderdetails_struct_h_b->h_lrdltype:l_or_orderdetails_struct_i->i_lrdltype
				WHERE	ROWID	=	:p_ora_rowid;

		IS_ANY_ORA_ERROR;
								
		}
	}
	else if ( !strcmp( p_intl_envdatastruct_h->h_mode, APL_FUNC_AUTHORISE ) )  
	{

		
		EXEC SQL SELECT 	ORD_STAT
					INTO		:chr_l_h_order_status:l_i_order_status
					FROM		OR_ORDERDETAILS
					WHERE		ROWID	=	:p_ora_rowid;
		
		IS_ANY_ORA_ERROR;

		if ( !strcmp( chr_l_h_order_status, STATUS_DEL_UAUTH ) )
		{
			

			strcpy( chr_l_order_status, STATUS_DEL_AUTH );
		}
		else if ( !strcmp( chr_l_h_order_status, STATUS_CANC_UAUTH ) )
		{
			

			strcpy( chr_l_order_status, STATUS_CANC_AUTH );
                        
		}
		else 
		{
			

			strcpy( chr_l_order_status, STATUS_AUTH );
		}

		

		EXEC SQL UPDATE OR_ORDERDETAILS
					SET	ORD_STAT	=	:chr_l_order_status,
							CHECKER			=	:p_intl_envdatastruct_h->usr,
							CHECKER_DT		=	:chr_l_sysdatetime_A,
							ACCESS_STAMP	=	:chr_l_sysdatetime_A
					WHERE	ROWID				=	:p_ora_rowid;

		IS_ANY_ORA_ERROR;
	}
	else
	{

		
		
		EXEC SQL SELECT DATEOF_CANCEL 
							 INTO :chr_l_h_order_canceleddt:l_i_order_canceleddt
							 FROM OR_ORDERDETAILS
							 WHERE ROWID = :p_ora_rowid;

		if ( strcmp( p_intl_envdatastruct_h->h_mode, APL_FUNC_RESET ) )
		{
			

			strcpy( chr_l_maker, p_intl_envdatastruct_h->usr );
			strcpy( chr_l_makerdt, chr_l_sysdatetime_A );
			strcpy( chr_l_checker, APL_NULL_STRING );
			strcpy( chr_l_checkerdt, APL_NULL_STRING );
			l_i_checker = -1;
			l_i_checkerdt = -1;

		}
		else
		{
			
			

			strcpy( chr_l_checker, p_intl_envdatastruct_h->usr );
			strcpy( chr_l_checkerdt, chr_l_sysdatetime_A );
			if ( strlen(chr_l_h_order_canceleddt) != 0)
			{
				strcpy(chr_l_h_order_canceleddt, APL_NULL_STRING);
				l_i_order_canceleddt = -1;
			}
			l_i_checker = 0;
			l_i_checkerdt = 0;
		}

		if ( !strcmp( p_intl_envdatastruct_h->h_mode, APL_FUNC_DELETE ) )
		{
			
			
			strcpy( chr_l_order_status, STATUS_DEL_UAUTH );
		}
		else if ( !strcmp( p_intl_envdatastruct_h->h_mode, APL_FUNC_RESET ) )
		{
			
			
			strcpy( chr_l_order_status, STATUS_AUTH );
		}
		else if ( !strcmp( p_intl_envdatastruct_h->h_mode, CANCEL_MODE ) )
		{
			
			
			strcpy( chr_l_order_status, STATUS_CANC_UAUTH );
			
			if (APL_FAILURE == CO_RtvSysDt(chr_l_sysdate_b,l_debug_info_ptr))
			{
				APL_GOBACK_FAIL;
			}
			strcpy(chr_l_h_order_canceleddt,chr_l_sysdate_b);
			l_i_order_canceleddt = 0;
		}


		
      

		if ( strcmp( p_intl_envdatastruct_h->h_mode, APL_FUNC_RESET ) )
		{
			EXEC SQL UPDATE OR_ORDERDETAILS 
						SET		MAKER				= 	:chr_l_maker,
									MAKER_DT			=	:chr_l_makerdt,
									ORD_STAT	=	:chr_l_order_status,
									CHECKER			=	:chr_l_checker:l_i_checker,
									CHECKER_DT		=	:chr_l_checkerdt:l_i_checkerdt,
									ACCESS_STAMP	=	:chr_l_sysdatetime_A,
									DATEOF_CANCEL		=	:chr_l_h_order_canceleddt:l_i_order_canceleddt
						WHERE		ROWID				=	:p_ora_rowid;
		}
		else
		{
			EXEC SQL UPDATE OR_ORDERDETAILS 
						SET		ORD_STAT	=	:chr_l_order_status,
									CHECKER			=	:chr_l_checker:l_i_checker,
									CHECKER_DT		=	:chr_l_checkerdt:l_i_checkerdt,
									ACCESS_STAMP	=	:chr_l_sysdatetime_A,
									DATEOF_CANCEL		=  :chr_l_h_order_canceleddt:l_i_order_canceleddt
						WHERE		ROWID				=	:p_ora_rowid;
		}

		IS_ANY_ORA_ERROR;
	}

	

	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Mod_DBOrd with success\n",
							NULL,
							p_intl_envdatastruct_h );
		}
		APL_FREE(l_or_orderdetails_struct_i);
		return(APL_SUCCESS);

	RETURN_FAILURE :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CR_Mod_DBOrd with errors\n",
							NULL,
							p_intl_envdatastruct_h );
		}
		APL_FREE(l_or_orderdetails_struct_i);
		return(APL_FAILURE);
}
