 /*copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
       These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         : MASTERS MAINTAINANCE
 *
 * File Name           : Co_ChkStlcal.pc
 *
 * Description         : This file contains validations for Settlement Calendar in different modes
 *
 *
 *
 *            Version Control Block
 *
 * Date        Version          Author               Description
 * ---------   --------  ---------------  ---------------------------
 * 01/12/2005                1.0         ANIL                NEW FILE RFSNo HDFCMT_008 
 *
 *********************************************************************/

 #include "MT_Interface.h"
 #include "sqlca.h"
 #include "Intellect_Common.h"
 #include "Intellect_Error.h"
 #include "CO_Commdef.h"

 int MTValSetlCalFn(char *p_settl_no,char *p_exch_code,char *p_settl_type,char p_exist,char p_auth,char p_del,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
		  struct sqlca sqlca;
		  char chr_p_pcstatus[3];
		  short l_Status;
		  int int_exist;
		  int int_error_flag = APL_SUCCESS;

#ifdef APL_THREADS
		  APL_SET_CONTEXT
					 EXEC SQL CONTEXT USE :my_ctx_local;
#endif

		  APL_IF_DEBUG
		  {
					 CO_ProcMonitor(APL_OUT_FILE, "Entered Function MTValSetlCalFn\n",NULL,NULL);
		  }

		  l_Status =0;
		  int_exist =0;

		  memset(chr_p_pcstatus,NULL,3);

		  if (!strlen(p_settl_no))
		  {
					 APL_DATA_MISSING("Settlement Number", APL_NULL_STRING, APL_NULL_STRING);
					 int_error_flag = APL_FAILURE;
		  }
       
		  if (!strlen(p_exch_code))
        {
                APL_DATA_MISSING("Exchange Code", APL_NULL_STRING, APL_NULL_STRING);
                int_error_flag = APL_FAILURE;
        }


		  if (int_error_flag == APL_FAILURE)
		  {
//AIX- Warnings Removal
					 int_error_flag = APL_FAILURE;
					 APL_GOBACK_FAIL;
		  }
        /***** Start : Chgs for Settl Type in MT_SETTL_CAL - Rahul - 01-Apr-2007 *****/
	IF_COND_EXISTS("DL_SETTL_NO","SETTL_NO_VAL")
	{
		EXEC SQL
		SELECT NVL(COUNT(*),0) into int_exist
		FROM MT_SETTL_CAL
		WHERE SETTL_NO = :p_settl_no
			AND EXCH_CODE = :p_exch_code
			AND SETTL_TYPE = :p_settl_type;
		IS_ANY_ORA_ERROR

		EXEC SQL
		SELECT STATUS into :chr_p_pcstatus:l_Status
		FROM MT_SETTL_CAL
		WHERE SETTL_NO = :p_settl_no
			AND EXCH_CODE = :p_exch_code
			AND SETTL_TYPE = :p_settl_type;
		IS_ANY_ORA_ERROR

		printf("\n\tSelected 'NVL' and 'Status' after considering the Market or Settlement type also");
		printf("\t NVL = %d", int_exist);
		printf("\n\tStatus = %s", chr_p_pcstatus);
	}
	else
	{
	/***** End : Chgs for Settl Type in MT_SETTL_CAL - Rahul - 01-Apr-2007 *****/
        		  EXEC SQL SELECT NVL(COUNT(*),0) into int_exist
					 FROM MT_SETTL_CAL
					 WHERE SETTL_NO =:p_settl_no AND EXCH_CODE = :p_exch_code;
		  IS_ANY_ORA_ERROR

					 EXEC SQL SELECT STATUS into :chr_p_pcstatus:l_Status
					 FROM MT_SETTL_CAL
					 WHERE SETTL_NO =:p_settl_no AND EXCH_CODE = :p_exch_code;
		  IS_ANY_ORA_ERROR
	}

					 chr_p_pcstatus[2] = '\0' ;


		  if(p_exist =='Y')
		  {
					 if (int_exist == 0)
					 {
								if(CO_InsertErr(l_debug_info_ptr,
																ERR_STLMENTCAL_NOTFND,
																APL_NULL_STRING,
																APL_NULL_STRING,
																APL_NULL_STRING,
																__LINE__,
																__FILE__
													) != APL_SUCCESS)
										  APL_GOBACK_FAIL
													 int_error_flag = APL_FAILURE;
					 }
		  }

		  if (p_exist =='N')
		  {
					 if (int_exist != 0)
					 {
								if(CO_InsertErr(
																l_debug_info_ptr,
																ERR_STLMENTCAL_EXISTS,
																APL_NULL_STRING,
																APL_NULL_STRING,
																APL_NULL_STRING,
																__LINE__,
																__FILE__
													) != APL_SUCCESS)
										  APL_GOBACK_FAIL
													 int_error_flag = APL_FAILURE;
					 }
		  }

		  if (int_error_flag == APL_FAILURE)
		  {
					 APL_GOBACK_FAIL
		  }
		  if (p_auth =='N')
		  {
					 if (!strcmp(chr_p_pcstatus,STATUS_AUTH))
					 {
								if(CO_InsertErr(
																l_debug_info_ptr,
																ERR_STLMENTCAL_AUTHORIZED,
																APL_NULL_STRING,
																APL_NULL_STRING,
																APL_NULL_STRING,
																__LINE__,
																__FILE__
													) != APL_SUCCESS)
										  APL_GOBACK_FAIL
													 int_error_flag = APL_FAILURE;
					 }
		  }

		  if (p_auth =='Y')
		  {
					 if (strcmp(chr_p_pcstatus,STATUS_AUTH))
					 {
								if(CO_InsertErr(
																l_debug_info_ptr,
																ERR_STLMENTCAL_NOT_AUTHORIZED,
																APL_NULL_STRING,
																APL_NULL_STRING,
																APL_NULL_STRING,
																__LINE__,
																__FILE__
													) != APL_SUCCESS)
										  APL_GOBACK_FAIL
													 int_error_flag = APL_FAILURE;
					 }
		  }
		  if (p_del =='N')
		  {
					 if (!strcmp(chr_p_pcstatus,STATUS_DEL_UAUTH))
					 {
								if(CO_InsertErr(
																l_debug_info_ptr,
																ERR_STLMENTCAL_MARKED_DEL,
																APL_NULL_STRING,
																APL_NULL_STRING,
																APL_NULL_STRING,
																__LINE__,
																__FILE__
													) != APL_SUCCESS)
										  APL_GOBACK_FAIL
													 int_error_flag = APL_FAILURE;
					 }
		  }
		  if (p_del =='Y')
		  {
					 if (strcmp(chr_p_pcstatus,STATUS_DEL_UAUTH))
					 {
								if(CO_InsertErr(
																l_debug_info_ptr,
																ERR_STLMENTCAL_MARKED_DEL,
																APL_NULL_STRING,
																APL_NULL_STRING,
																APL_NULL_STRING,
																__LINE__,
																__FILE__
													) != APL_SUCCESS)
										  APL_GOBACK_FAIL
													 int_error_flag = APL_FAILURE;
					 }
		  }
		  if (int_error_flag == APL_FAILURE)
		  {
					 APL_GOBACK_FAIL
		  }
		  else APL_GOBACK_SUCCESS
					 RETURN_SUCCESS :
					 {
								APL_IF_DEBUG
								{
										  CO_ProcMonitor(APL_OUT_FILE, "Success in MTValSetlCalFn Getting out\n",NULL,NULL);
								}
								return(APL_SUCCESS);
					 }
RETURN_FAILURE :
		  {
					 APL_IF_DEBUG
					 {
								CO_ProcMonitor(APL_OUT_FILE, "Failed in MTValSetlCalFn Going out\n",NULL,NULL);
					 }
					 return(APL_FAILURE);
		  }
}

