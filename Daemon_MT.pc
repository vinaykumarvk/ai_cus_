/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to 
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or 
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         :	 				Maintenance
 *
 * File Name           :					Daemon_MT.pc
 *
 * Description         :					Contains all Wrapper Functions for
	*												different Units in Maintenance.
 *
 *           
 *
 *            Version Control Block
 *
 * Date        Version		Author         Description					RFS No.
 * ---------   --------	 --------------  -----------------			----------
 * 10/10/2005  1.2			Smita Bhat		Added Wrapper Fns 		HDFCMT_003
 *														for Instrument
 * 10/11/2005  1.5	 		ANIL 				Added Wrapper Fns 		HDFCMT_002,HDFCMT_005,HDFCMT_006
 *											for Company,Client Instrument,Instruction Slip masters.
 *	26/12/2005  1.16        Sonali         Float Rate Instrument   HDFCMT_013
 *	26/12/2005  1.17        Sonali         Static Master  			HDFCMT_016
 *	15/12/2005	1.18		Kouser Begum	Added Wrapper Functions related to  Client Details
 * 10/12/2005	1.20			Pradeep			Added Wrapper Fns for	HDFCMT_017 
 * 													Index Fund Master.
 * 30/12/2005   1.21        Kouser Begum      Depository Participant   HDFCMT_010
 * 26/12/2005   1.22        Kouser Begum      Credit Rating Agency     HDFCMT_011
 * 07/01/2006  1.23         Sundar         Vendor Maintenance      HDFCMT_GFU
 * 21/02/2006  1.27         Kouser Begum      New Maintenance       KB_001
 *	21/05/2014	1.28		Prateek Singh	ISKB_198(FPI Maintenance)				ISKB_198
 *********************************************************************/
   

#include "stdio_64.h"
#include "MS_Swift.h"
#include "MT_Interface.h"
#include "Intellect_Common.h"
#include <unistd.h>

EXEC SQL INCLUDE SQLCA;


char 								*chr_h_error_desc;
DEBUG_INFO_STRUCT_H 			**l_debug_info_ptr ;
DEBUG_INFO_STRUCT_H         *l_debug_info_struct_h_tmp=NULL; 

/* AIX - Warnings */
int   CO_Rtv_ErrString(DEBUG_INFO_STRUCT_H **l_debug_info_ptr,char *p_error_desc);

int main(int argc,char **argv) //AIX-Warnings Removal
{
 	int   MT_Proc_LocPopulate(MT_LOCATION_STRUCT_H *p_mt_location_struct_h_a, char *chr_p_param_str);
 	int   MT_Proc_HolPopulate(MT_HOLIDAY_STRUCT_H *p_mt_holiday_struct_h_b_c, char *chr_p_param_str);
 	int   MT_Proc_HolBothPopulate(MT_HOLIDAY_STRUCT_H *p_mt_holiday_struct_h_b,MT_HOLIDAY_STRUCT_H *p_mt_holiday_struct_h,char *chr_p_param_str);
 	int   MT_Proc_CustPopulate(MT_RUCLIENT_STRUCT_H *p_mt_ruclient_struct_h, char *chr_p_param_str);
   int   MT_Proc_CustOthPopulate(char *chr_p_acct, char *chr_p_acct_access_stamp, char *chr_p_param_str);
 	int   MT_Proc_RRLocPopulate(MT_RULOC_STRUCT_H *p_mt_ruloc_struct_h_a, char *chr_p_param_str);
 	int   MT_Proc_RRLocOthPopulate(char *chr_p_rrloc, char *chr_p_rrloc_access_stamp, char *chr_p_param_str);
 	int   MT_Proc_RRProdPopulate(MT_RUPROD_STRUCT_H *p_mt_ruprod_struct_h_c, char *chr_p_param_str);
 	int   MT_Proc_RRProdOthPopulate(char *chr_p_rrprod, char *chr_p_rrprod_access_stamp, char *chr_p_param_str);
	int   MT_Proc_AccPopulate(MT_CLIENT_STRUCT_H *l_mt_client_struct_h,char *chr_p_param_str);
	int   MT_Proc_CommPopulate(MT_COMMON_SYS_PARAMS_STRUCT_H *l_mt_commonsys_params_struct_h,char *chr_p_param_str);
	int   MT_Proc_CorePopulate(MT_CORE_SYS_PARAMS_STRUCT_H  *l_mt_common_sys_params_struct_h,char *chr_p_param_str);
	int   MT_Proc_MsgPopulate(MT_MESSAGE_SYS_PARAMS_STRUCT_H *l_mt_message_sys_params_struct_ha,char *chr_p_param_str);
	int   MT_Proc_IVPopulate(INVOICE_SYSTEMPARAM_STRUCT_H *l_invoice_systemparam_struct_ha,char *chr_p_param_str);
	int   MT_Proc_CASetupUpdPopulate(CA_CASECEVENT_STRUCT_H *l_ca_caseceventstruct_h,char *chr_p_param_str);
	int   MT_Proc_CASetupPopulate(CA_CASECEVENT_STRUCT_H *l_ca_secevent_struct_h,char *chr_p_param_str);
	int   MT_Proc_AutoEvntUpdPopulate(CA_AUTOEVENT_STRUCT_H *l_ca_modautoevent_struct_h,char *chr_p_param_str);
	int   MT_Proc_AutoEvntPopulate(CA_AUTOEVENT_STRUCT_H *l_ca_inpautoevent_struct_h,char *chr_p_param_str);
	int   CO_Rtv_EnvStruct(INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,char *p_env_str);
	int 	MT_Proc_CpyCustMemoPopulate(char *,char *, char *, char *);
 	int   MT_Proc_WTRPopulate(MT_WHTRATE_STRUCT_H *l_mt_whtrate_struct_h, char *chr_p_param_str); 
 	int   MT_Proc_RRSrnPopulate(MT_RUSRN_STRUCT_H *p_mt_rusrn_struct_h, char *chr_p_param_str); 
 	int   MT_Proc_RRInstrPopulate(MT_RUINSTR_STRUCT_H *p_mt_ruinstr_struct_h, char *chr_p_param_str); 
 	int   MT_Proc_InstrPopulate(MT_INSTRUMENT_STRUCT_H *p_mt_instrument_struct_h, char *chr_p_param_str);
 	int   MT_Proc_InstrOthPopulate(char *p_instr_code,char *chr_p_access_stamp, char *chr_p_param_str);
 	int   MT_Proc_RptPopulate(char *chr_p_filename_a,char *p_repdesc, int *p_repwidateh, char *chr_p_param_str);
  int MT_DlyQuotationsPopulate(MT_DLYQTIONS_STRUCT_H *p_mt_dlyqtions_struct_h,char *chr_p_param_str);
 int   MT_SettlCalPopulate(MT_SETTLCAL_STRUCT_H *p_mt_settlcal_struct_h,char *chr_p_param_str); 
	/*Smita - HDFCMT_003 - Instrument Master Maintenance*/
 	int   MT_Proc_InstrRedDepPopulate(MT_INSTRUMENT_RED_DEP_STRUCT_H *p_mt_instrument_red_dep_struct_h, char *chr_p_param_str);
 	int   MT_Proc_InstrExchPopulate(MT_INSTRUMENT_EXCH_STRUCT_H *p_mt_instrument_exch_struct_h, char *chr_p_param_str);
 	int   MT_Proc_InstrCRAgencyPopulate(MT_INSTRUMENT_CR_AGENCY_STRUCT_H *p_mt_instrument_cr_agency_struct_h, char *chr_p_param_str);
 	int   MT_Proc_InstrPCPopulate(MT_INSTRUMENT_PC_STRUCT_H *p_mt_instrument_pc_struct_h, char *chr_p_param_str);
 	int   MT_Proc_InstrPartRedPopulate(MT_INSTRUMENT_PART_RED_STRUCT_H *p_mt_instrument_part_red_struct_h, char *chr_p_param_str);
 	int   MT_Proc_InstrPTCPopulate(MT_INSTRUMENT_PTC_STRUCT_H *p_mt_instrument_ptc_struct_h, char *chr_p_param_str);
 	int   MT_Proc_InstrResetPopulate(MT_INSTRUMENT_RESET_STRUCT_H *p_mt_instrument_reset_struct_h, char *chr_p_param_str);
	/*Smita - HDFCMT_003 - Instrument Master Maintenance*/

	/*Anil - HDFCMT_002,HDFCMT_005,HDFCMT_006*/
   int MT_Proc_CompanyPopulate(MT_COMPANY_STRUCT_H *l_mt_company_struct_h, char *chr_p_param_str);
   int MT_CLN_INSTRPopulate(MT_CLN_INSTR_STRUCT_H *p_mt_cln_instr_struct_h, char *chr_p_param_str);
   int MT_InslEntryPopulate(MT_INSL_ENTRY_STRUCT_H *p_mt_insl_entry_struct_h,char *chr_p_param_str);
	/*Anil - HDFCMT_002,HDFCMT_005,HDFCMT_006*/

	int   MT_DlFlRatePopulate(MT_DLFLRATE_STRUCT_H *p_mt_dlflrate_struct_h,char *chr_p_param_str); /* HDFCMT_012  Daily Float Rate Dnyanesh*/
	 int   MT_RBIMonDetPopulate(MT_RBIMONDET_STRUCT_H *p_mt_rbimondet_struct_h,char *chr_p_param_str); /* HDFCMT_014  Daily Float Rate Dnyanesh*/
	 int   MT_NoDlvDetPopulate(MT_NO_DELV_STRUCT_H *p_mt_no_delv_struct_h,char *chr_p_param_str); /* HDFCMT_007 No Delivery Details - Dnyanesh*/
	 int   MT_FlRateInstPopulate(MT_FLRATEINST_STRUCT_H *p_mt_flrateinst_struct_h,char *chr_p_param_str); /* HDFCMT_013 Float Rate Instrument - Sonali*/
	 int   MT_StaticDataPopulate(CO_STATIC_DATA_STRUCT_H *p_co_staticdata_struct_h,char *chr_p_param_str); /* HDFCMT_016 Static Data- Sonali*/
  
         /* Kouser -  RFSNo - HDFCMT_001 - Client Master Maintenance */ 
 int   MT_Proc_ClientPopulate(MT_CLIENT_STRUCT_H *p_mt_client_struct_h,char *chr_p_param_str);
	int   MT_Proc_ClientOthPopulate(char *chr_p_acct,char *chr_p_acct_access_stamp,char *chr_h_param_str);
 int   MT_Proc_ClientSignPopulate(char *chr_p_acct,char *chr_p_acct_sign_memo,int *chr_p_acct_sign_id,int *chr_p_acct_sign_len,char *chr_h_param_str);
	int   MT_Proc_ClientAddrPopulate(MT_MSGADDRESS_STRUCT_H *p_mt_msgaddress_struct_h,char *chr_h_param_str);
	int   MT_Proc_ClientSchPopulate(MT_SCHDET_STRUCT_H *p_mt_schdet_struct_h,char *chr_h_param_str);
 int   MT_Proc_ClientRegPopulate(MT_REGDETAILS_STRUCT_H   *p_mt_regdetails_struct_h,char *chr_p_param_str);
 int   MT_Proc_ClientExchMapPopulate(MT_CLTEXCHMAP_STRUCT_H *p_mt_cltexchmap_struct_h,char *chr_p_param_str);
 int   MT_Proc_ClientDepoMapPopulate(MT_CLTDEPOMAP_STRUCT_H *p_mt_cltdepomap_struct_h,char *chr_p_param_str); 

/* Kouser -  RFSNo - HDFCMT_001 - Client Master Maintenance */ 


/* Kouser -  RFSNo - KB_001 -  Maintenance */ 


 int Populate_MT_CLN_ADDLN_DET(MT_CLN_ADDLN_DET_STRUCT_H *p_mt_cln_addln_det_struct_h,char *chr_p_param_str); 

	/* By Harvinder Singh for RFS_CLN_MAP_001 Date - 7/3/2007 */
	int Populate_WI_CLIENT_MAP(WI_CLIENT_MAP_STRUCT_H *p_wi_client_map_struct_h,char * p_param_data);


/* Kouser -  RFSNo - KB_001 -  Maintenance */ 
 

 /* Pradeep - HDFCMT_017 - Index Fund Master Maintenance */
 int MT_Proc_IndexFundPopulate(MT_INDEX_FUND_STRUCT_H *l_mt_index_fund_struct_h, char *chr_p_param_str);
 int MT_Proc_IndexFundDetPopulate(MT_INDEX_FUNDDET_STRUCT_H *l_mt_index_funddet_struct_h, char *chr_p_param_str);

  /* Kouser  - HDFCMT_010 - Depository Participant */

  int MT_DepoPartPopulate(char *chr_p_param_str,MT_DEPO_PART_STRUCT_H *p_mt_depo_part_struct_h); 
  int MT_ExchDepoPopulate(char *chr_p_param_str,MT_EXCH_DEPO_STRUCT_H *p_mt_exch_depo_struct_h);
  
  /* Kouser - HDFCMT_010 - Depository Participant */

  /* Kouser - HDFCMT_011 - Credit Rating Agency */
   int MT_CrRt_AgencyPopulate(MT_CR_AGENCY_STRUCT_H *p_mt_cr_agency_struct_h,char *chr_p_param_str); /* HDFCMT_011 - Credit Rating Agency - Kouser  */
   int MT_CrRt_AgencyDetPopulate(MT_CR_AGENCY_DET_STRUCT_H *p_mt_cr_agency_det_struct_h,char *chr_p_param_str); /* HDFCMT_011 - Credit Rating Agency - Kouser  */
  /* Kouser - HDFCMT_011 - Credit Rating Agency */

	/* Pradeep - HDFCMT_004 - Party Master */
	int MT_PartyPopulate(MT_PARTY_STRUCT_H *p_mt_party_struct_h,char *p_param_data);
	int MT_PtyExchMapPopulate(MT_PTY_EXCH_MAP_STRUCT_H *p_mt_pty_exch_map_struct_h,char *p_param_data);
	int MT_PtyDepoMapPopulate(MT_PTY_DEPO_MAP_STRUCT_H *p_mt_pty_depo_map_struct_h,char *p_param_data);
	int MT_PtyExchClnMapPopulate(MT_PTY_EXCH_CLN_MAP_STRUCT_H *p_mt_pty_exch_cln_map_struct_h,char *p_param_data);
	int Batch_Proc_PtyGridMarkSuccessProcess(char *p_ora_rowid,char *p_return_value,char *p_access_stamp);
	/* Pradeep - HDFCMT_004 - Party Master */

	void  CO_Rtv_DataString(char *chr_p_str, char *p_lbl,char *p_data_value);
	void  CO_Rtv_DataDbl(char *chr_p_str, char *p_lbl,double *p_data_value);
	void  CO_Rtv_DataInt(char *chr_p_str, char *p_lbl,int *p_data_value);
	int 	Batch_Proc_MarkSuccessProcess(char *p_ora_rowid,char *p_return_value);
	int 	Batch_Proc_GridMarkSuccessProcess(char *p_ora_rowid,char *p_return_value,int p_seq_num,char *p_access_stamp);

       /* Kouser - HDFCMT_010 - Depository Participant */
        int   Batch_Proc_AccMarkSuccessProcess(char *p_ora_rowid,char *p_return_value,char *p_access_stamp);
       /* Kouser - HDFCMT_010 - Depository Participant */

/* HDFCMT_GFU Vendor Maintenance - Sundar */
       int Populate_MT_VENDOR(MT_GFU_VENDOR_SETUP_STRUCT_H *p_mt_gfu_vendor_setup_struct_h,char * p_param_data); /* HDFCMT_GFU Vendor Maintenance - Sundar */

       int Populate_MT_GFU_FORMAT_SETUP(MT_GFU_FORMAT_SETUP_STRUCT_H *p_mt_gfu_format_setup_struct_h,char * p_param_data);
	int Populate_MT_GFU_EXCEL_SETUP(MT_GFU_EXCEL_SETUP_STRUCT_H *p_mt_gfu_excel_setup_struct_h,char * p_param_data);
	int Populate_MT_GFU_TXT_SETUP(MT_GFU_TXT_SETUP_STRUCT_H *p_mt_gfu_txt_setup_struct_h,char * p_param_data);
	int Populate_MT_GFU_CSV_SETUP(MT_GFU_CSV_SETUP_STRUCT_H *p_mt_gfu_csv_setup_struct_h,char * p_param_data);
	int   Batch_Proc_GridVenMarkSuccessProcss(char *p_ora_rowid,char *p_return_value,char *p_access_stamp);

/* HDFCMT_GFU Vendor Maintenance - Sundar */

	int 	Proc_MarkFailProcess(char *p_ora_rowid, DEBUG_INFO_STRUCT_H **l_debug_info_ptr);
    int int_goahead = 1;      /* Added For Client Billing Upload */
   char *l_cln_key_codes[5];
   char *l_key_values[5];
   char chr_chld_table_name[50];
   char chr_l_field_val[40];

   strcpy(chr_chld_table_name,"MT_CLI_EXCH_MAP");
	
	EXEC SQL BEGIN DECLARE SECTION;
	char	h_ora_rowid[APL_ROWID_LEN];
	char 	chr_h_param_str[4000] = APL_NULL_STRING;
    char chr_l_access_stamp_bill[APL_DATE_LEN] = APL_NULL_STRING;	/* Added for Billing Client Upload */
	int cnt_servcode= 0;                             /* Added for Billing Dependency Upload */

	char  chr_h_error_str[4000] = APL_NULL_STRING;
	char 	chr_h_env_str[2000] = APL_NULL_STRING;
	char 	chr_h_func_name[100] = APL_NULL_STRING;
	char 	chr_l_return_value[4000] = APL_NULL_STRING;
	short i_func_paramistr=0;
	short i_func_param_str=0;
	short i_ora_rowid=0;
	short i_func_name=0;
	short i_env_str=0;
	short i_proc_data=0;
	short i_error_str=0;
	char  chr_l_audit_data[4000] = APL_NULL_STRING;/* HDFCGN_001 Sonali Audit*/
	char  chr_h_param_str_temp[4000] = APL_NULL_STRING;/* HDFCGN_001 Sonali Audit*/
	char  chr_l_data_key[4000] = APL_NULL_STRING;/*HDFCGN_001 Sonali Audit*/
	char  chr_h_entity_name[100] = APL_NULL_STRING;/*HDFCGN_001 Sonali Audit*/
	char  chr_h_comments[4000] = APL_NULL_STRING;/*HDFCGN_001 Sonali Audit*/
	int l_flg_func=0;
        int int_mt_cln_flg =1;
	char l_clr_mode[4] =APL_NULL_STRING;

	EXEC SQL VAR h_ora_rowid IS STRING;
	EXEC SQL VAR chr_h_error_desc IS STRING;
	EXEC SQL VAR chr_h_param_str IS STRING;
	EXEC SQL VAR chr_h_error_str IS STRING;
	EXEC SQL VAR chr_h_env_str IS STRING;
	EXEC SQL VAR chr_h_func_name IS STRING;

	EXEC SQL VAR chr_h_param_str_temp IS STRING;/*HDFCGN_001 Sonali Audit*/
	EXEC SQL VAR chr_l_audit_data IS STRING;/*HDFCGN_001 Sonali Audit*/
	EXEC SQL VAR chr_l_data_key IS STRING;/*HDFCGN_001 Sonali Audit*/
	EXEC SQL VAR chr_h_entity_name IS STRING;/*HDFCGN_001 Sonali Audit*/
	EXEC SQL VAR chr_h_comments IS STRING;/*HDFCGN_001 Sonali Audit*/

	EXEC SQL END DECLARE SECTION;
	
	struct sqlca sqlca;



 	MT_LOCATION_STRUCT_H 				*l_mt_location_struct_h;
 	MT_HOLIDAY_STRUCT_H 					*l_mt_holidaystruct_h,*l_mt_holiday_struct_h,*l_mt_hol_struct_h;
	MT_COMMON_SYS_PARAMS_STRUCT_H 	*l_mt_commonsys_params_struct_h;
	MT_CORE_SYS_PARAMS_STRUCT_H 	*l_mt_common_sys_params_struct_h;
	MT_MESSAGE_SYS_PARAMS_STRUCT_H 	*l_mt_message_sys_params_struct_ha;
	INVOICE_SYSTEMPARAM_STRUCT_H 		*l_invoice_systemparam_struct_ha;
	CA_CASECEVENT_STRUCT_H 				*l_ca_caseceventstruct_h;
	CA_CASECEVENT_STRUCT_H 				*l_ca_secevent_struct_h;
	CA_AUTOEVENT_STRUCT_H 				*l_ca_modautoevent_struct_h;
	CA_AUTOEVENT_STRUCT_H 				*l_ca_inpautoevent_struct_h;
 	DL_CURRENCY_STRUCT_H   				*l_dl_currency_struct_h;
 	MT_CLIENT_ENTRIES_STRUCT_H 		*l_mt_client_entries_struct_h;
	IV_CLIENTPARAM_STRUCT 				*l_iv_clientparam_struct;
	IV_CLIENTSERVDEP_STRUCT_H  		*p_iv_clientservdep_struct_h;
	IV_CUSTFEE_STRUCT_H       			*l_iv_custfee_struct_h;
 	MT_EXCHRATE_STRUCT_H   				*l_mt_exchrate_struct_hd;
	DL_CASHACC_STRUCT_H    				*l_dl_cashacc_struct_ha;
	MHLP_CODE_STRUCT_H      			*l_mhlp_code_struct_hc;
	MT_RUCLIENT_STRUCT_H 				*l_mt_ruclient_struct_ha;
	MT_RULOC_STRUCT_H 					*l_mt_ruloc_struct_ha;
	MT_RUPROD_STRUCT_H 					*l_mt_ruprod_struct_h;
 	MT_WHTRATE_STRUCT_H 					*l_mt_whtrate_struct_h; 
 	MT_RUSRN_STRUCT_H  					*l_mt_rusrn_struct_hb; 
 	MT_RUINSTR_STRUCT_H  				*l_mt_ruinstr_struct_h; 
	MT_INSTRUMENT_STRUCT_H  			*l_mt_instrument_struct_h;
	MT_INST_CORP_GRP_STRUCT_H			*mt_inst_corp_grp_struct_h;
 
	/*Smita - HDFCMT_003 - Instrument Master Maintenance*/
	MT_INSTRUMENT_RED_DEP_STRUCT_H  	*l_mt_instrument_red_dep_struct_h;
	MT_INSTRUMENT_EXCH_STRUCT_H  		*l_mt_instrument_exch_struct_h;
	MT_INSTRUMENT_CR_AGENCY_STRUCT_H *l_mt_instrument_cr_agency_struct_h;
	MT_INSTRUMENT_PC_STRUCT_H  		*l_mt_instrument_pc_struct_h;
	MT_INSTRUMENT_PART_RED_STRUCT_H  *l_mt_instrument_part_red_struct_h;
	MT_INSTRUMENT_PTC_STRUCT_H  		*l_mt_instrument_ptc_struct_h;
	MT_INSTRUMENT_RESET_STRUCT_H  	*l_mt_instrument_reset_struct_h;
	/*Smita - HDFCMT_003 - Instrument Master Maintenance*/

 	PRO_HDAT_STATIC_STRUCT_H 			*l_pro_hdat_static_struct_hc;
	DEAL_STRUCT_H 							*l_DealStruct;
	MS_MSGCONV_STRUCT_H    				*p_ms_msgconv_struct_h;

	/* By Harvinder Singh for RFS_CLN_MAP_001 Date - 7/3/2007 */
	WI_CLIENT_MAP_STRUCT_H		*l_wi_client_map_struct_h;

	/*Anil - HDFCMT_002,HDFCMT_005,HDFCMT_006*/
   MT_COMPANY_STRUCT_H *l_mt_company_struct_h;
   MT_CLN_INSTR_STRUCT_H *p_mt_cln_instr_struct_h;
   MT_INSL_ENTRY_STRUCT_H *p_mt_insl_entry_struct_h;
	/*Anil - HDFCMT_002,HDFCMT_005,HDFCMT_006*/
   
   /* Pradeep, No Delivery Master, HDFCMT_007 */ 
   /*MT_NO_DELV_STRUCT_H 					*l_mt_no_delv_struct_h;   */
/* Kouser - RFSNo - HDFCMT_001 - Client Master Maintenance  */

 MT_CLIENT_STRUCT_H *l_mt_clientmast_struct_h; 
	MT_CLIENT_STRUCT_H *l_mt_client_struct_h;
	MT_SCHDET_STRUCT_H    *l_mt_schdet_struct_h;
        MT_CLTEXCHMAP_STRUCT_H    *l_mt_cltexchmap_struct_h; 
        MT_CLTDEPOMAP_STRUCT_H    *l_mt_cltdepomap_struct_h; 
	MT_MSGADDRESS_STRUCT_H    *l_mt_msgaddress_struct_h;
        MT_REGDETAILS_STRUCT_H *l_mt_regdetails_struct_h;
	/*Added by Prateek on 19052014 for ISKB_198(FPI Maintenance)-START*/
	MT_CLTFPIMAP_STRUCT_H    *l_mt_cltfpimap_struct_h;
	/*Added by Prateek on 19052014 for ISKB_198(FPI Maintenance)-END*/
  
 /*Kouser - RFSNo - HDFCMT_001 - Client Master Maintenance */

 /*Kouser - RFSNo - KB_001 - Maintenance */
 
	MT_CLN_ADDLN_DET_STRUCT_H *l_mt_cln_addln_det_struct_h;


 /*Kouser - RFSNo - KB_001 - Maintenance */


	/* HDFCMT_012 Daily Float Rate - Dnyanesh*/
	MT_DLFLRATE_STRUCT_H *l_mt_dlflrate_struct_h;
	/* HDFCMT_014 RBI Monitory Details - Dnyanesh*/
	MT_RBIMONDET_STRUCT_H *l_mt_rbimondet_struct_h;
	/* HDFCMT_007 No Delivery Details - Dnyanesh*/
	MT_NO_DELV_STRUCT_H *l_mt_no_delv_struct_h;
	 /* HDFCMT_013 Float Rate Instrument - Sonali*/
	MT_FLRATEINST_STRUCT_H *l_mt_flrateinst_struct_h;
	/*HDFCMT_016 Static Data - Sonali */
	CO_STATIC_DATA_STRUCT_H *l_co_staticdata_struct_h;
 MT_SETTLCAL_STRUCT_H *p_mt_settlcal_struct_h; /* Manik Trivedi, HDFCMT_008*/
 MT_DLYQTIONS_STRUCT_H *p_mt_dlyqtions_struct_h;
	
 /* Pradeep - HDFCMT_017 - Index Fund Master */
 MT_INDEX_FUND_STRUCT_H *l_mt_index_fund_struct_h;
 MT_INDEX_FUNDDET_STRUCT_H *l_mt_index_funddet_struct_h;

/* Kouser - HDFCMT_010 - Depository  Participant - Kouser */
   MT_DEPO_PART_STRUCT_H *l_mt_depo_part_struct_h;
   MT_EXCH_DEPO_STRUCT_H *l_mt_exch_depo_struct_h;
/* Kouser - HDFCMT_010 - Depository  Participant - Kouser */
   
/* Kouser - HDFCMT_011 - Credit Rating Agency */
   MT_CR_AGENCY_STRUCT_H  *l_mt_cr_agency_struct_h;
   MT_CR_AGENCY_DET_STRUCT_H * l_mt_cr_agency_det_struct_h;
/* Kouser - HDFCMT_011 - Credit Rating Agency */

	/* Pradeep - HDFCMT_004 - Party Master */
	MT_PARTY_STRUCT_H   *l_mt_party_struct_h;
	MT_PTY_EXCH_MAP_STRUCT_H  *l_mt_pty_exch_map_struct_h;
	MT_PTY_DEPO_MAP_STRUCT_H  *l_mt_pty_depo_map_struct_h;
	MT_PTY_EXCH_CLN_MAP_STRUCT_H *l_mt_pty_exch_cln_map_struct_h;
	/* Pradeep - HDFCMT_004 - Party Master */

	 MT_GFU_VENDOR_SETUP_STRUCT_H   *l_mt_gfu_vendor_setup_struct_h; /* Sundar  ,HDFCMT_GFU */
	 MT_GFU_FORMAT_SETUP_STRUCT_H   *l_mt_gfu_format_setup_struct_h;
         MT_GFU_EXCEL_SETUP_STRUCT_H    *l_mt_gfu_excel_setup_struct_h;
         MT_GFU_TXT_SETUP_STRUCT_H      *l_mt_gfu_txt_setup_struct_h;
         MT_GFU_CSV_SETUP_STRUCT_H      *l_mt_gfu_csv_setup_struct_h;

	 /* Sundar  ,HDFCMT_GFU */
			MT_PTY_FUND_DET_STRUCT_H *l_mt_pty_fund_det_struct_h;
        
VARELM_UPLOAD_NSE_STRUCT_H  *l_varelm_upload_nse_struct_h = (VARELM_UPLOAD_NSE_STRUCT_H *)NULL;
	VARELM_UPLOAD_BSE_STRUCT_H  *l_varelm_upload_bse_struct_h = (VARELM_UPLOAD_BSE_STRUCT_H *)NULL;

	char chr_p_assiscode[13]								=		APL_NULL_STRING;
	char chr_p_lbrkcode[11]									=		APL_NULL_STRING;
	char chr_l_access_stamp[APL_DATE_LEN]				=		APL_NULL_STRING;
	char chr_p_acct[APL_CLIENT_LENGTH]					=		APL_NULL_STRING;
	char chr_p_acct_access_stamp[APL_DATE_LEN]=APL_NULL_STRING;
	char chr_p_from_acct[APL_CLIENT_LENGTH]			=		APL_NULL_STRING;
	char chr_p_from_acct_access_stamp[APL_DATE_LEN]=APL_NULL_STRING;
	char chr_p_to_acct[APL_CLIENT_LENGTH]				=		APL_NULL_STRING;
	char chr_p_to_acct_access_stamp[APL_DATE_LEN]=APL_NULL_STRING;
	char chr_p_memo[201]										=		APL_NULL_STRING;
	char chr_p_rrloc[5]										=		APL_NULL_STRING;
 	char chr_p_rrloc_access_stamp[APL_DATE_LEN]		=		APL_NULL_STRING;
	char chr_p_rrprod[5]										=		APL_NULL_STRING;
 	char chr_p_rrprod_access_stamp[APL_DATE_LEN]		=		APL_NULL_STRING;
 	char chr_l_instrcode[APL_INSTRUMENTCODE_LEN]		=		APL_NULL_STRING;
 	char chr_l_filename_c[APL_REPNAME_LENGTH]			=		APL_NULL_STRING;
 	char chr_l_repdesc[APL_REPDESC_LENGTH]				=		APL_NULL_STRING;
 	int  int_l_repwidth 										= 		0;
	char l_data_fld_sep_str[2] 							= 		APL_NULL_STRING;


     int  p_cln_seq_num = 0;
    int chr_p_acct_sign_id = 0;
    int chr_p_acct_sign_len = 0;
    char chr_p_acct_sign_memo[200] = APL_NULL_STRING;

	short int_ret_val	=	0;
	int l_sleep_microseconds = 0; 
	int l_sleep_seconds = 0;	

	char l_audit_value[4000] = APL_NULL_STRING;	
	
	FILE *chr_finifile;
	char chr_inifile[150],chr_l_uname[APL_USERID_LEN],chr_l_passwd[APL_PASSWD_LEN],chr_custody_id_b[APL_USERID_LEN],chr_buffer[KEY_LENGTH];
	DEBUG_INFO_STRUCT_H *l_debuginfo = (DEBUG_INFO_STRUCT_H *)NULL;
	INTL_ENV_DATA_STRUCT_H l_intl_env_data_h;
	INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h;
	
	memset(chr_inifile,APL_NULL_CHAR,150);
	memset(chr_buffer,APL_NULL_CHAR,KEY_LENGTH);
	memset(chr_l_uname,APL_NULL_CHAR,40);
	memset(chr_l_passwd,APL_NULL_CHAR,40);


 	p_intlenv_data_struct_h =  (INTL_ENV_DATA_STRUCT_H *)calloc(1,sizeof(INTL_ENV_DATA_STRUCT_H));
 	APL_MALLOC_FAIL(p_intlenv_data_struct_h);
 	memset(p_intlenv_data_struct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H));


	if ( ( l_debug_info_struct_h_tmp = (DEBUG_INFO_STRUCT_H *)calloc(1,sizeof(DEBUG_INFO_STRUCT_H)) ) == NULL )
			 APL_GOBACK_FAIL ;

	if ( ( (l_debug_info_ptr) = (DEBUG_INFO_STRUCT_H **)calloc(1,sizeof(DEBUG_INFO_STRUCT_H *)) ) == NULL )	
			 APL_GOBACK_FAIL ;
	

	if ( argc != 2)
	{
		printf("\n Invalid sleep time for daemon ... \n ");
		APL_GOBACK_FAIL
	}
	else
	{
		printf("\n ******************  Server Started With Sleep Time :%s:****************\n",argv[1]);
		sscanf(argv[1],"%d.%d",&l_sleep_seconds,&l_sleep_microseconds);
		printf("l_sleep_seconds is %d\n",l_sleep_seconds);
		printf("l_sleep_microseconds is %d\n",l_sleep_microseconds);
		fflush(stdout);
	   l_sleep_microseconds = l_sleep_microseconds * 10000;	
		printf("l_sleep_seconds is %d\n",l_sleep_seconds);
		printf("l_sleep_microseconds is %d\n",l_sleep_microseconds);
		fflush(stdout);
	}

	strcpy(chr_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_inifile,"/intl_sun.cfg");
		printf("l_sleep_seconds is %d\n",l_sleep_seconds);
		printf("l_sleep_microseconds is %d\n",l_sleep_microseconds);
		fflush(stdout);
	if ( (chr_finifile = fopen(chr_inifile,"r") ) == NULL)
	        APL_GOBACK_FAIL;
		printf("l_sleep_seconds is %d\n",l_sleep_seconds);
		printf("l_sleep_microseconds is %d\n",l_sleep_microseconds);
		fflush(stdout);

 	APL_FETCH_DB_LOGIN_DETAILS(chr_finifile, chr_custody_id_b, chr_l_uname, chr_l_passwd , APL_OUT_FILE , &l_debuginfo)
 	EXEC SQL CONNECT :chr_l_uname IDENTIFIED BY :chr_l_passwd;
 
 	if(sqlca.sqlcode != 0)                                               
   {
     ltoa_r(sqlca.sqlcode,chr_buffer,KEY_LENGTH-1);
     CO_InsertErr(&l_debuginfo,DB_ERR_NO,chr_buffer,
                 APL_NULL_STRING,APL_NULL_STRING,
                 __LINE__,__FILE__);
     APL_GOBACK_FAIL
   }
		printf("l_sleep_seconds is %d\n",l_sleep_seconds);
		printf("l_sleep_microseconds is %d\n",l_sleep_microseconds);
		fflush(stdout);

	if ( CO_RtvSysParams(l_debug_info_ptr) == APL_FAILURE)
	{
		printf("\nReturned unsuccessfully from CO_RtvSysParams processtion\n");
		APL_GOBACK_FAIL
	}

		printf("l_sleep_seconds is %d\n",l_sleep_seconds);
		printf("l_sleep_microseconds is %d\n",l_sleep_microseconds);
		fflush(stdout);
	EXEC SQL UPDATE PRO_DAEMON_STATUS SET STATUS = 1 where PROC_NAME = 'Daemon_MT';
	printf("Sqlca.sqlcode is %d\n",sqlca.sqlcode);
	fflush(stdout);
	IS_ANY_ORA_ERROR;

	sprintf(l_data_fld_sep_str,"%c",DATA_FIELD_SEPRTR);
	strcat(l_data_fld_sep_str,APL_NULL_STRING);

	while(1)
	{
		CO_FreeErrLst(l_debug_info_ptr);
         /***************************************************************************
	 JC - Commented - If there are unprocessed requests, Daemon should not sleep
	 This code for sleep shifted from here and moved after request check query - Retrofit by Manasi for ISKB_7759 Common Issues Fixes
      if(l_sleep_seconds != 0)
      {
         sleep(l_sleep_seconds);
      }
      usleep(l_sleep_microseconds);
	  JC - Commented - If there are unprocessed requests, Daemon should not sleep - Retrofit by Manasi for ISKB_7759 Common Issues Fixes
       	 ***************************************************************************/

		strcpy(h_ora_rowid,APL_NULL_STRING);	
		i_ora_rowid = -1;
		strcpy(chr_h_param_str,APL_NULL_STRING);
		strcpy(chr_h_error_str,APL_NULL_STRING);
		strcpy(chr_h_env_str,APL_NULL_STRING);
		strcpy(chr_h_func_name,APL_NULL_STRING);
		strcpy(chr_l_return_value,APL_NULL_STRING);

		/* HDFCGN_001 Sonali Audit */
		strcpy(chr_h_param_str_temp,APL_NULL_STRING);
		strcpy(chr_l_audit_data,APL_NULL_STRING);
		strcpy(chr_l_data_key,APL_NULL_STRING);
		strcpy(chr_h_error_str,APL_NULL_STRING);
		/* HDFCGN_001 Sonali Audit */

		i_func_name=0;
		i_env_str=0;
		i_proc_data=0;
		i_error_str=0;

		EXEC SQL SELECT ROWID INTO :h_ora_rowid:i_ora_rowid from PRO_REQUEST_MT where 
		REQUEST_SEQ = (SELECT MIN(REQUEST_SEQ) FROM PRO_REQUEST_MT WHERE STATUS = '0') and rownum < 2 FOR UPDATE NOWAIT;	
		if (sqlca.sqlcode == -54)
		{
			continue;
		}

		IS_ANY_ORA_ERROR

		if (sqlca.sqlcode == 1403)
		{
			EXEC SQL COMMIT;
			IS_ANY_ORA_ERROR;

			/***************************************************************************
			JC - Daemon should sleep only if there are unprocessed requests - Retrofit by Manasi for ISKB_7759 Common Issues Fixes */
			if(l_sleep_seconds != 0)
			{
				sleep(l_sleep_seconds);
			}
			usleep(l_sleep_microseconds);
			/* JC - Daemon should sleep only if there are unprocessed requests - Retrofit by Manasi for ISKB_7759 Common Issues Fixes
			***************************************************************************/

			continue;
		}

		EXEC SQL UPDATE PRO_REQUEST_MT SET STATUS = '1' where ROWID=:h_ora_rowid;
	printf("Sqlca.sqlcode is %d\n",sqlca.sqlcode);
	fflush(stdout);
		IS_ANY_ORA_ERROR
		EXEC SQL COMMIT;
		IS_ANY_ORA_ERROR
		
    	CO_ProcMonitor(APL_OUT_FILE,"before polling \n",NULL,p_intlenv_data_struct_h);
		EXEC SQL SELECT PROC_NAME, ENVIRON_DATA, PROC_DATA, ERROR_DET 
		INTO :chr_h_func_name:i_func_name,:chr_h_env_str:i_env_str,:chr_h_param_str:i_proc_data,:chr_h_error_str:i_error_str from PRO_REQUEST_MT where ROWID=:h_ora_rowid FOR UPDATE NOWAIT;
    	CO_ProcMonitor(APL_OUT_FILE,"after polling \n",NULL,p_intlenv_data_struct_h);
		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"PRO_REQUEST_MT","FATAL ERR","ROWID");

		strcat(chr_h_env_str,l_data_fld_sep_str);
		strcat(chr_h_param_str,l_data_fld_sep_str);
		strcat(chr_h_error_str,l_data_fld_sep_str);
	
	   p_intlenv_data_struct_h =  (INTL_ENV_DATA_STRUCT_H *)calloc(1,sizeof(INTL_ENV_DATA_STRUCT_H));
	   APL_MALLOC_FAIL_LOC_A(p_intlenv_data_struct_h);
	   memset(p_intlenv_data_struct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H));

		int_ret_val = CO_Rtv_EnvStruct(p_intlenv_data_struct_h,chr_h_env_str);

		chr_h_error_desc =  (char *)calloc(4001,sizeof(char));
		APL_MALLOC_FAIL_LOC_A(chr_h_error_desc);
 /* 		memset(chr_h_error_desc,NULL,sizeof(char));	*/
		memset(chr_h_error_desc,NULL,sizeof(char) * 4000);
		/*HDFCGN_001 Sonali, Audit log */

		strcpy(chr_h_entity_name,p_intlenv_data_struct_h->processtion);

		CO_Rtv_DataString(chr_h_param_str,"COMMENTS",chr_h_comments);

		/*HDFCGN_001 Sonali, Audit log */

       if (strcmp(chr_h_func_name,"wrp_GBInsReptFn") != 0)
       {
				INTL_WARNING

			    /***** Changes for Audit Log , HDFCGN_001 Sonali*********/

				strcpy(chr_h_param_str_temp,chr_h_param_str);

				int_ret_val = CO_PopulateAuditString(chr_h_entity_name,chr_h_param_str_temp,chr_l_audit_data,chr_l_data_key);

				/***** Changes for Audit Log, HDFCGN_001 Sonali *********/
				/*HDFCGN_001 Sonali , changed signature for audit */
			S_NON_DCE_ERASE_DUMMY_WARNING;
				INTL_WARNING
				if((strcmp(chr_l_audit_data,APL_NULL_STRING)!=0) && (strcmp(chr_l_data_key,APL_NULL_STRING)!=0))
				{

				if ( APL_FAILURE==CO_Upd_AudLog_Chk_SysOnline(p_intlenv_data_struct_h,chr_l_audit_data,chr_l_data_key,chr_h_comments,l_debug_info_ptr))
				{
						Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
						APL_FREE(chr_h_error_desc);
						continue;
				}
				}
			
			S_NON_DCE_ERASE_DUMMY_WARNING;
       }

		/* if (strlen(chr_h_error_str) != 0)
			{
				int_ret_val = CO_Rtv_ErrStruct(chr_h_error_str,l_debug_info_ptr);
			}  UAT PJ */


      if (strcmp(chr_h_func_name,"wrp_GBInsReptFn") == 0)
      {
         INTL_WARNING;
			memset(chr_l_filename_c,APL_NULL_CHAR,APL_REPNAME_LENGTH);
			memset(chr_l_repdesc,APL_NULL_CHAR,APL_REPDESC_LENGTH);
         int_ret_val = MT_Proc_RptPopulate(chr_l_filename_c,chr_l_repdesc,&int_l_repwidth,chr_h_param_str);
         CO_ProcMonitor(APL_OUT_FILE,"Now calling CO_Proc_RptIns \n",NULL,p_intlenv_data_struct_h);
         if((CO_Proc_RptIns(chr_l_filename_c,chr_l_repdesc,int_l_repwidth,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CO_Proc_RptIns SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CO_Proc_RptIns FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         strcpy(chr_l_filename_c,APL_NULL_STRING);
         strcpy(chr_l_repdesc,APL_NULL_STRING);
         int_l_repwidth = 0;
			
			free(p_intlenv_data_struct_h);
			free(chr_h_error_desc);
			continue;
      }
      
	  l_flg_func = 1;      /* set flag as 1 for available function   */

	  Alert("WRAPPER NAME :|%s||%d|\n",chr_h_func_name,l_flg_func);

	  if (strcmp(chr_h_func_name,"wrp_CBUpdAccFn") == 0)
      {
         INTL_WARNING;
         l_mt_client_struct_h =  (MT_CLIENT_STRUCT_H *)calloc(1,sizeof(MT_CLIENT_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_mt_client_struct_h);
         memset(l_mt_client_struct_h,NULL,sizeof(MT_CLIENT_STRUCT_H));

         int_ret_val = MT_Proc_ClientPopulate(l_mt_client_struct_h,chr_h_param_str);
         CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_Mod_Client\n",NULL,p_intlenv_data_struct_h);
		 strcpy(l_clr_mode,p_intlenv_data_struct_h->h_mode);
         if((MT_Mod_Client(l_mt_client_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_Client SUCCESS \n",NULL,p_intlenv_data_struct_h);
			
			/* status change*/
			if( strcmp(p_intlenv_data_struct_h->h_process, "U") == 0)
		    {	
				Alert(" \n Client Master Auto Authorization of UPLOAD ...\n");				
                
                strcpy(p_intlenv_data_struct_h->usr,"SYSTEM");//Client Upload Kotubabu
				strcpy(p_intlenv_data_struct_h->h_mode,APL_FUNC_AUTHORISE);
								
				CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_Mod_Client for AUTH\n",NULL,p_intlenv_data_struct_h);
				if((((int_mt_cln_flg ==1) && MT_Mod_Client(l_mt_client_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)) && (CHECK_EXISTANCE_OF_ERROR))
				{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_Client SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
					CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_ClientGst FAILURE \n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
				}
		    }
			else
			{
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
		
        }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_Client FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

         APL_FREE(l_mt_client_struct_h);
      }
      else if (strcmp(chr_h_func_name,"wrp_CBUpdAccOthFn") == 0)
      {
         INTL_WARNING;

         int_ret_val = MT_Proc_ClientOthPopulate(chr_p_acct,chr_p_acct_access_stamp,chr_h_param_str);
         CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_Mod_ClientOth\n",NULL,p_intlenv_data_struct_h);
         if((MT_Mod_ClientOth(chr_p_acct,chr_p_acct_access_stamp,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_ClientOth SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_ClientOth FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

    }
    else if (strcmp(chr_h_func_name,"wrp_CBUpdAccSignFn") == 0)
    {
         INTL_WARNING;

         int_ret_val = MT_Proc_ClientSignPopulate(chr_p_acct,chr_p_acct_sign_memo,&chr_p_acct_sign_id,&chr_p_acct_sign_len,chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_Mod_ClientSign\n",NULL,p_intlenv_data_struct_h);
         if((MT_Mod_ClientSign(chr_p_acct,chr_p_acct_sign_id,chr_p_acct_sign_memo,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
          CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_ClientSign SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_ClientSign FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

      }

    else if (strcmp(chr_h_func_name,"wrp_CBUpdAccRegFn") == 0)      
    {
         INTL_WARNING;
         l_mt_regdetails_struct_h =  (MT_REGDETAILS_STRUCT_H *)calloc(1,sizeof(MT_REGDETAILS_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_mt_regdetails_struct_h);
         memset(l_mt_regdetails_struct_h,NULL,sizeof(MT_REGDETAILS_STRUCT_H));

         int_ret_val = MT_Proc_ClientRegPopulate(l_mt_regdetails_struct_h,chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_Mod_ClientReg\n",NULL,p_intlenv_data_struct_h);
         if((MT_Mod_ClientReg(l_mt_regdetails_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))   
         {
           CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_ClientReg SUCCESS \n",NULL,p_intlenv_data_struct_h);
         int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }          
         else
         {
           CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_ClientReg FAILURE \n",NULL,p_intlenv_data_struct_h);
        int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
           APL_FREE(l_mt_regdetails_struct_h);
    }

      else if (strcmp(chr_h_func_name,"wrp_CBUpdAccMemoFn") == 0)
      {
         INTL_WARNING;

         int_ret_val = MT_Proc_CustMemoPopulate(chr_p_acct,chr_p_memo,chr_p_acct_access_stamp,chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling CR_Mod_AccMemo\n",NULL,p_intlenv_data_struct_h);
         if((CR_Mod_AccMemo(chr_p_acct,chr_p_memo,chr_p_acct_access_stamp,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_AccMemo SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_AccMemo FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

      }

      else if (strcmp(chr_h_func_name,"wrp_CBCpyAccAddrFn") == 0)
      {
         INTL_WARNING;

         int_ret_val = MT_Proc_CpyCustAddrPopulate(chr_p_from_acct,chr_p_to_acct,chr_p_from_acct_access_stamp,chr_p_to_acct_access_stamp,
															chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling CR_Proc_AccMsgAddrCpy\n",NULL,p_intlenv_data_struct_h);
         if((CR_Proc_AccMsgAddrCpy(chr_p_from_acct,chr_p_to_acct,chr_p_from_acct_access_stamp,chr_p_to_acct_access_stamp,
										p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Proc_AccMsgAddrCpy SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Proc_AccMsgAddrCpy FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

      }
      
		else if (strcmp(chr_h_func_name,"wrp_UpdateCommonSysParams") == 0)
		{
			INTL_WARNING; 
			l_mt_commonsys_params_struct_h =  (MT_COMMON_SYS_PARAMS_STRUCT_H *)calloc(1,sizeof(MT_COMMON_SYS_PARAMS_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_mt_commonsys_params_struct_h);
			memset(l_mt_commonsys_params_struct_h,NULL,sizeof(MT_COMMON_SYS_PARAMS_STRUCT_H));

			int_ret_val = MT_Proc_CommPopulate(l_mt_commonsys_params_struct_h,chr_h_param_str);

			CO_ProcMonitor(APL_OUT_FILE,"Now calling CO_Upd_CmnSysParams\n",NULL,p_intlenv_data_struct_h);
			if((CO_Upd_CmnSysParams(l_mt_commonsys_params_struct_h,l_debug_info_ptr,p_intlenv_data_struct_h) == APL_SUCCESS) && 
												(CHECK_EXISTANCE_OF_ERROR))
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from CO_Upd_CmnSysParams SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{	
				CO_ProcMonitor(APL_OUT_FILE,"Returned from CO_Upd_CmnSysParams FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			free(l_mt_commonsys_params_struct_h);
		} 

      else if (strcmp(chr_h_func_name,"wrp_UpdateCoreSysParams") == 0)
      {
         INTL_WARNING;
         l_mt_common_sys_params_struct_h =  (MT_CORE_SYS_PARAMS_STRUCT_H  *)calloc(1,sizeof(MT_CORE_SYS_PARAMS_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_mt_common_sys_params_struct_h);
         memset(l_mt_common_sys_params_struct_h,NULL,sizeof(MT_CORE_SYS_PARAMS_STRUCT_H));
         
         int_ret_val = MT_Proc_CorePopulate(l_mt_common_sys_params_struct_h,chr_h_param_str);
         
         CO_ProcMonitor(APL_OUT_FILE,"Now calling CO_Upd_CoreSysParams\n",NULL,p_intlenv_data_struct_h);
         if((CO_Upd_CoreSysParams(l_mt_common_sys_params_struct_h,l_debug_info_ptr,p_intlenv_data_struct_h) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CO_Upd_CoreSysParams SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CO_Upd_CoreSysParams FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
			free(l_mt_common_sys_params_struct_h);
      } 

      else if (strcmp(chr_h_func_name,"wrp_UpdateMessageSysParams") == 0)
      {
         INTL_WARNING;
         l_mt_message_sys_params_struct_ha =  (MT_MESSAGE_SYS_PARAMS_STRUCT_H *)calloc(1,sizeof(MT_MESSAGE_SYS_PARAMS_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_mt_message_sys_params_struct_ha);
         memset(l_mt_message_sys_params_struct_ha,NULL,sizeof(MT_MESSAGE_SYS_PARAMS_STRUCT_H));
         
         int_ret_val = MT_Proc_MsgPopulate(l_mt_message_sys_params_struct_ha,chr_h_param_str);
        
         CO_ProcMonitor(APL_OUT_FILE,"Now calling CO_Upd_MsgSysParams\n",NULL,p_intlenv_data_struct_h);
         
         if((CO_Upd_MsgSysParams(l_mt_message_sys_params_struct_ha,l_debug_info_ptr,p_intlenv_data_struct_h) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CO_Upd_MsgSysParams SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CO_Upd_MsgSysParams FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
			free(l_mt_message_sys_params_struct_ha);
      } 

      else if (strcmp(chr_h_func_name,"wrp_UpdateBillSysParams") == 0)
      {
         INTL_WARNING;
         l_invoice_systemparam_struct_ha =  (INVOICE_SYSTEMPARAM_STRUCT_H *)calloc(1,sizeof(INVOICE_SYSTEMPARAM_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_invoice_systemparam_struct_ha);
         memset(l_invoice_systemparam_struct_ha,NULL,sizeof(INVOICE_SYSTEMPARAM_STRUCT_H));
         
         int_ret_val = MT_Proc_IVPopulate(l_invoice_systemparam_struct_ha,chr_h_param_str);
         
         CO_ProcMonitor(APL_OUT_FILE,"Now calling CO_Upd_InvSysParams\n",NULL,p_intlenv_data_struct_h);
         
         if((CO_Upd_InvSysParams(l_invoice_systemparam_struct_ha,l_debug_info_ptr,p_intlenv_data_struct_h) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CO_Upd_InvSysParams SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CO_Upd_InvSysParams FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
			free(l_invoice_systemparam_struct_ha);
      } 

      else if (strcmp(chr_h_func_name,"wrp_A_UpdateAsecevt") == 0)
      {
            INTL_WARNING;
            l_ca_caseceventstruct_h =  (CA_CASECEVENT_STRUCT_H *)calloc(1,sizeof(CA_CASECEVENT_STRUCT_H));
            APL_MALLOC_FAIL_LOC_A(l_ca_caseceventstruct_h);
            memset(l_ca_caseceventstruct_h,NULL,sizeof(CA_CASECEVENT_STRUCT_H));
            
            int_ret_val = MT_Proc_CASetupUpdPopulate(l_ca_caseceventstruct_h,chr_h_param_str);
            
            CO_ProcMonitor(APL_OUT_FILE,"Now calling CA_Mod_SaveCASECEVT\n",NULL,p_intlenv_data_struct_h);
            
            if((CA_Mod_SaveCASECEVT(l_ca_caseceventstruct_h,l_debug_info_ptr,p_intlenv_data_struct_h) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
            {
               CO_ProcMonitor(APL_OUT_FILE,"Returned from CA_Mod_SaveCASECEVT SUCCESS \n",NULL,p_intlenv_data_struct_h);
               int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
            }
            else
            {
               CO_ProcMonitor(APL_OUT_FILE,"Returned from CA_Mod_SaveCASECEVT FAILURE \n",NULL,p_intlenv_data_struct_h);
               int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
            }
				free(l_ca_caseceventstruct_h);
      } 
 
      else if (strcmp(chr_h_func_name,"wrp_A_InputAsecevt") == 0)
      {
         INTL_WARNING;
         l_ca_secevent_struct_h =  (CA_CASECEVENT_STRUCT_H *)calloc(1,sizeof(CA_CASECEVENT_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_ca_secevent_struct_h);
         memset(l_ca_secevent_struct_h,NULL,sizeof(CA_CASECEVENT_STRUCT_H));
         
         int_ret_val = MT_Proc_CASetupPopulate(l_ca_secevent_struct_h,chr_h_param_str);
         
         CO_ProcMonitor(APL_OUT_FILE,"Now calling CA_DepoSetup\n",NULL,p_intlenv_data_struct_h);
         
         if((CA_DepoSetup(l_ca_secevent_struct_h,l_debug_info_ptr,p_intlenv_data_struct_h) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CA_DepoSetup SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CA_DepoSetup FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
			free(l_ca_secevent_struct_h);
      } 

      else if (strcmp(chr_h_func_name,"wrp_A_UpdateAutoEvnt") == 0)
      {
         INTL_WARNING;
         l_ca_modautoevent_struct_h =  (CA_AUTOEVENT_STRUCT_H *)calloc(1,sizeof(CA_AUTOEVENT_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_ca_modautoevent_struct_h);
         memset(l_ca_modautoevent_struct_h,NULL,sizeof(CA_AUTOEVENT_STRUCT_H));
         
         int_ret_val = MT_Proc_AutoEvntUpdPopulate(l_ca_modautoevent_struct_h,chr_h_param_str);
         
         CO_ProcMonitor(APL_OUT_FILE,"Now calling CA_Mod_ChgAutoEvent\n",NULL,p_intlenv_data_struct_h);
         
         if((CA_Mod_ChgAutoEvent(l_ca_modautoevent_struct_h,l_debug_info_ptr,p_intlenv_data_struct_h) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CA_Mod_ChgAutoEvent SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CA_Mod_ChgAutoEvent FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
			free(l_ca_modautoevent_struct_h);
      } 


      else if (strcmp(chr_h_func_name,"wrp_A_InputAutoEvnt") == 0)
      {
         INTL_WARNING;
         l_ca_inpautoevent_struct_h =  (CA_AUTOEVENT_STRUCT_H *)calloc(1,sizeof(CA_AUTOEVENT_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_ca_inpautoevent_struct_h);
         memset(l_ca_inpautoevent_struct_h,NULL,sizeof(CA_AUTOEVENT_STRUCT_H));
         
         int_ret_val = MT_Proc_AutoEvntPopulate(l_ca_inpautoevent_struct_h,chr_h_param_str);
         
         CO_ProcMonitor(APL_OUT_FILE,"Now calling CA_Mod_NewAutoEvent\n",NULL,p_intlenv_data_struct_h);
         
         if((CA_Mod_NewAutoEvent(l_ca_inpautoevent_struct_h,l_debug_info_ptr,p_intlenv_data_struct_h) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CA_Mod_NewAutoEvent SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CA_Mod_NewAutoEvent FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         free(l_ca_inpautoevent_struct_h);
      } 


      else if (strcmp(chr_h_func_name,"wrp_CBUpdLocFn") == 0)
      {
         INTL_WARNING;
         l_mt_location_struct_h =  (MT_LOCATION_STRUCT_H *)calloc(1,sizeof(MT_LOCATION_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_mt_location_struct_h);
         memset(l_mt_location_struct_h,NULL,sizeof(MT_LOCATION_STRUCT_H));

         int_ret_val = MT_Proc_LocPopulate(l_mt_location_struct_h,chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling CR_Mod_Loc\n",NULL,p_intlenv_data_struct_h);
         if((CR_Mod_Loc(l_mt_location_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_Loc SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_Loc FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         free(l_mt_location_struct_h);
      }
		/* By Harvinder Singh for RFS_CLN_MAP_001 Date - 7/3/2007 */		
	  else	if (strcmp(chr_h_func_name,"wrp_WIUpd_ClientMap") == 0)
		{
			INTL_WARNING;
			l_wi_client_map_struct_h = (WI_CLIENT_MAP_STRUCT_H *)calloc(1,sizeof(WI_CLIENT_MAP_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_wi_client_map_struct_h);
			memset(l_wi_client_map_struct_h,NULL,sizeof(WI_CLIENT_MAP_STRUCT_H));			
			
			int_ret_val = Populate_WI_CLIENT_MAP(l_wi_client_map_struct_h,chr_h_param_str);
			
			CO_ProcMonitor(APL_OUT_FILE,"Now calling WI_MOD_CLIENT_MAP \n",NULL,p_intlenv_data_struct_h);
			if((WI_MOD_CLIENT_MAP (l_wi_client_map_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from WI_MOD_CLIENT_MAP SUCCESS \n",NULL,p_intlenv_data_struct_h);
				//int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			int_ret_val = Batch_Proc_PtyGridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_wi_client_map_struct_h->h_access_stamp);

			}	
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from WI_MOD_CLIENT_MAP FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);	
			}
			free(l_wi_client_map_struct_h);	
		} 
		
     else if (strcmp(chr_h_func_name,"wrp_CBUpdHolFn") == 0)
      {
         INTL_WARNING;
         l_mt_holidaystruct_h =  (MT_HOLIDAY_STRUCT_H *)calloc(1,sizeof(MT_HOLIDAY_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_mt_holidaystruct_h);
         memset(l_mt_holidaystruct_h,NULL,sizeof(MT_HOLIDAY_STRUCT_H));

         int_ret_val = MT_Proc_HolPopulate(l_mt_holidaystruct_h,chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling CR_Mod_Hol\n",NULL,p_intlenv_data_struct_h);
         if((CR_Mod_Hol(l_mt_holidaystruct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_Hol SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_Hol FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

         free(l_mt_holidaystruct_h);
      } 

      else if (strcmp(chr_h_func_name,"wrp_CBUpdWklyOffFn") == 0)
      {
         INTL_WARNING;
         l_mt_holiday_struct_h =  (MT_HOLIDAY_STRUCT_H *)calloc(1,sizeof(MT_HOLIDAY_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_mt_holiday_struct_h);
         memset(l_mt_holiday_struct_h,NULL,sizeof(MT_HOLIDAY_STRUCT_H));

         l_mt_hol_struct_h =  (MT_HOLIDAY_STRUCT_H *)calloc(1,sizeof(MT_HOLIDAY_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_mt_hol_struct_h);
         memset(l_mt_hol_struct_h,NULL,sizeof(MT_HOLIDAY_STRUCT_H));

         int_ret_val = MT_Proc_HolBothPopulate(l_mt_holiday_struct_h,l_mt_hol_struct_h,chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling CR_Mod_WklyHol\n",NULL,p_intlenv_data_struct_h);
         if((CR_Mod_WklyHol(l_mt_holiday_struct_h,l_mt_hol_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_WklyHol SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_WklyHol FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

         free(l_mt_holiday_struct_h);
         free(l_mt_hol_struct_h);
      }

       else if (strcmp(chr_h_func_name,"wrp_CBUpdCcyFn") == 0)
      {
         INTL_WARNING;
         l_dl_currency_struct_h =  (DL_CURRENCY_STRUCT_H *)calloc(1,sizeof(DL_CURRENCY_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_dl_currency_struct_h);
         memset(l_dl_currency_struct_h,NULL,sizeof(DL_CURRENCY_STRUCT_H));

         int_ret_val = MT_Proc_CcyPopulate(l_dl_currency_struct_h,chr_h_param_str);
         CO_ProcMonitor(APL_OUT_FILE,"Now calling CR_Mod_Ccy\n",NULL,p_intlenv_data_struct_h);
         if((CR_Mod_Ccy(l_dl_currency_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_Ccy SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);

         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_Ccy FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

         free(l_dl_currency_struct_h);
      } 

      else if (strcmp(chr_h_func_name,"wrp_CDBUpdAenFn") == 0)
      {
         INTL_WARNING;
         l_mt_client_entries_struct_h =  (MT_CLIENT_ENTRIES_STRUCT_H *)calloc(1,sizeof(MT_CLIENT_ENTRIES_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_mt_client_entries_struct_h);
         memset(l_mt_client_entries_struct_h,NULL,sizeof(MT_CLIENT_ENTRIES_STRUCT_H));

         int_ret_val = MT_Proc_CustEntryPopulate(l_mt_client_entries_struct_h,chr_h_param_str);
         CO_ProcMonitor(APL_OUT_FILE,"Now calling CR_Mod_AE\n",NULL,p_intlenv_data_struct_h);
         if((CR_Mod_AE(l_mt_client_entries_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_AE SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_AE FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

         free(l_mt_client_entries_struct_h);
      }

      else if (strcmp(chr_h_func_name,"wrp_BBlCustMnt") == 0)
      {
         INTL_WARNING;
         l_iv_clientparam_struct =  (IV_CLIENTPARAM_STRUCT *)calloc(1,sizeof(IV_CLIENTPARAM_STRUCT));
         APL_MALLOC_FAIL_LOC_A(l_iv_clientparam_struct);
         memset(l_iv_clientparam_struct,NULL,sizeof(IV_CLIENTPARAM_STRUCT));

         int_ret_val = MT_Proc_IVCustPopulate(l_iv_clientparam_struct,chr_h_param_str);
		 /* Added for Client Billing Setup Upload * - Start */
		 if(  (strcmp(p_intlenv_data_struct_h->h_process,"U") ==0  ) && (  strcmp(p_intlenv_data_struct_h->h_mode,"DEL") ==0 )  )
		{
				Alert(" PPD: Client code: |%s|", l_iv_clientparam_struct->client);
				
				EXEC SQL SELECT COUNT(CLIENT)
				INTO :cnt_servcode 
				FROM IV_CLIENTSETUP
				WHERE (CLIENT=:l_iv_clientparam_struct->client);
				
				Alert("PPD: sql code is: |%d|", sqlca.sqlcode );
				Alert("PPD: cnt_servcode is: |%d|", cnt_servcode );
				
				if ( cnt_servcode == 0 )
				{
					CO_InsertErr(l_debug_info_ptr, ERR_NOTFOUND_CLIENT, 
									   APL_NULL_STRING, APL_NULL_STRING,
									   APL_NULL_STRING, __LINE__, 
									   __FILE__);
					int_goahead=0;				   
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
				}
				else
				{
					int_goahead = 1;
				}
		}
		else
		{
			int_goahead = 1;
		}
		/* Added for Client Billing Setup Upload - End */
		if ( int_goahead==1)
		{
         CO_ProcMonitor(APL_OUT_FILE,"Now calling IV_Upd_CustMnt \n",NULL,p_intlenv_data_struct_h);
         if((IV_Upd_CustMnt(l_iv_clientparam_struct,p_intlenv_data_struct_h,l_debug_info_ptr,chr_h_param_str) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from IV_Upd_CustMnt SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			/* Added for Client Billing Setup Upload * - Start */
			if( ( strcmp(p_intlenv_data_struct_h->h_process, "U") == 0 ) && ( strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_DELETE ) == 0 ) )
			{	
				Alert("PPD: IV_Upd_CustMnt Auto Authorization of UPLOAD ..");
				EXEC SQL SELECT ACCESS_STAMP
				INTO :chr_l_access_stamp_bill 
				FROM IV_CLIENTSETUP
				WHERE  (CLIENT = :l_iv_clientparam_struct->client);
				Alert("PPD: access stamp from table BEFORE AUTHis: |%s|", chr_l_access_stamp_bill); 
		
				strcpy(l_iv_clientparam_struct->bcustsetup_access_stamp,chr_l_access_stamp_bill );
				strcpy(p_intlenv_data_struct_h->h_mode,APL_FUNC_AUTHORISE);
								
				CO_ProcMonitor(APL_OUT_FILE,"Now calling IV_Upd_CustMnt for AUTH\n",NULL,p_intlenv_data_struct_h);
				if((IV_Upd_CustMnt(l_iv_clientparam_struct,p_intlenv_data_struct_h,l_debug_info_ptr,chr_h_param_str) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from IV_Upd_CustMnt SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from IV_Upd_CustMnt FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
			}
			else
			{
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			/* Added for Client Billing Setup Upload - End */
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from IV_Upd_CustMnt FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
		}
         free(l_iv_clientparam_struct);
      } 

      else if (strcmp(chr_h_func_name,"wrp_CBUpdExrFn") == 0)
      {
         INTL_WARNING;
         l_mt_exchrate_struct_hd =  (MT_EXCHRATE_STRUCT_H *)calloc(1,sizeof(MT_EXCHRATE_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_mt_exchrate_struct_hd);
         memset(l_mt_exchrate_struct_hd,NULL,sizeof(MT_EXCHRATE_STRUCT_H));

         int_ret_val = MT_Proc_ExgRtPopulate(l_mt_exchrate_struct_hd,chr_h_param_str);
         CO_ProcMonitor(APL_OUT_FILE,"Now calling CR_Mod_ExgRt\n",NULL,p_intlenv_data_struct_h);
         if((CR_Mod_ExgRt(l_mt_exchrate_struct_hd,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_ExgRt SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_ExgRt FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

         free(l_mt_exchrate_struct_hd);
      }

      else if (strcmp(chr_h_func_name,"wrp_BBlCustServDepncy") == 0)
      {
         INTL_WARNING;
         p_iv_clientservdep_struct_h =  (IV_CLIENTSERVDEP_STRUCT_H *)calloc(1,sizeof(IV_CLIENTSERVDEP_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(p_iv_clientservdep_struct_h);
         memset(p_iv_clientservdep_struct_h,NULL,sizeof(IV_CLIENTSERVDEP_STRUCT_H));

         int_ret_val = MT_Proc_IVCustServDepPopulate(p_iv_clientservdep_struct_h,chr_h_param_str);
         /* Added for Billing Services Upload - Starts */
		if ( strcmp(p_intlenv_data_struct_h->h_process,"U")==0 )  
		{
			if (  strcmp(p_intlenv_data_struct_h->h_mode,"INP") ==0 ) 
			{
				EXEC SQL SELECT COUNT(CLIENT)
				INTO :cnt_servcode 
				FROM IV_CLIENTSETUP
				WHERE (CLIENT=:p_iv_clientservdep_struct_h->client);
				
				Alert("PPD: sql code is: |%d|", sqlca.sqlcode );
				Alert("PPD: cnt_servcode is: |%d|", cnt_servcode );
				
				if ( cnt_servcode == 0 )
				{
					CO_InsertErr(l_debug_info_ptr, ERR_NOTFOUND_CLIENT, 
									   APL_NULL_STRING, APL_NULL_STRING,
									   APL_NULL_STRING, __LINE__, 
									   __FILE__);
					int_goahead=0;				   
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
				}
				else
				{
					int_goahead = 1;
				}
			}
			else
			{
				EXEC SQL SELECT COUNT(SERVICE_CD)
				INTO :cnt_servcode 
				FROM IV_CLIENTPARAM
				WHERE ( (SERVICE_CD = :p_iv_clientservdep_struct_h->service_cd) AND 
				(CLIENT=:p_iv_clientservdep_struct_h->client) );
				
				Alert("PPD: sql code is: |%d|", sqlca.sqlcode );
				Alert("PPD: cnt_servcode is: |%d|", cnt_servcode );
				
				if ( cnt_servcode == 0 )
				{
					CO_InsertErr(l_debug_info_ptr, ERR_NOTFOUND_SERVCD_CLIENT, 
									   APL_NULL_STRING, APL_NULL_STRING,
									   APL_NULL_STRING, __LINE__, 
									   __FILE__);

					int_goahead=0;					
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
				}
				else
				{
					int_goahead = 1;
				}
			}
		}
		else
		{
			int_goahead = 1;
		}
		/* Added for Billing Services Upload - Ends */
		if ( int_goahead== 1 )
		{
         CO_ProcMonitor(APL_OUT_FILE,"Now calling IV_CustServDepncy \n",NULL,p_intlenv_data_struct_h);
         if((IV_CustServDepncy(p_iv_clientservdep_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from IV_CustServDepncy SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_PtyGridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,p_iv_clientservdep_struct_h->bcustsetup_access_stamp); /* Bageshri HDFCIV_001*/
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from IV_CustServDepncy FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
		}
         free(p_iv_clientservdep_struct_h);
      }

      else if (strcmp(chr_h_func_name,"wrp_BBlCustFeeMnt") == 0)
      {
         INTL_WARNING;
         l_iv_custfee_struct_h =  (IV_CUSTFEE_STRUCT_H *)calloc(1,sizeof(IV_CUSTFEE_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_iv_custfee_struct_h);
         memset(l_iv_custfee_struct_h,NULL,sizeof(IV_CUSTFEE_STRUCT_H));

         int_ret_val = MT_Proc_IVCustFeePopulate(l_iv_custfee_struct_h,chr_h_param_str);

		 /* Added  for Billing Structure Upload - Starts */
		if (  strcmp(p_intlenv_data_struct_h->h_process,"U")==0 )
		{
			if (  strcmp(p_intlenv_data_struct_h->h_mode,"INP") ==0 ) 
			{
				EXEC SQL SELECT COUNT(CLIENT)
				INTO :cnt_servcode 
				FROM IV_CLIENTSETUP
				WHERE (CLIENT=:l_iv_custfee_struct_h->client);
				
				Alert("PPD: sql code is: |%d|", sqlca.sqlcode );
				Alert("PPD: cnt_servcode is: |%d|", cnt_servcode );
				
				if ( cnt_servcode == 0 )
				{
					CO_InsertErr(l_debug_info_ptr, ERR_NOTFOUND_CLIENT, 
									   APL_NULL_STRING, APL_NULL_STRING,
									   APL_NULL_STRING, __LINE__, 
									   __FILE__);
					
					int_goahead=0;
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
				}
				else
				{
					int_goahead = 1;
				}	
			}
			else
			{
				EXEC SQL SELECT COUNT(SERVICE_CD)
				INTO :cnt_servcode 
				FROM IV_CLIENTFEE
				WHERE ( (SERVICE_CD = :l_iv_custfee_struct_h->service_cd) AND 
				(CLIENT=:l_iv_custfee_struct_h->client) );
				
				Alert("PPD: sql code is: |%d|", sqlca.sqlcode );
				Alert("PPD: cnt_servcode is: |%d|", cnt_servcode );
				
				if ( cnt_servcode == 0 )
				{
					CO_InsertErr(l_debug_info_ptr, ERR_NOTFOUND_SERVCD_CLIENT, 
									   APL_NULL_STRING, APL_NULL_STRING,
									   APL_NULL_STRING, __LINE__, 
									   __FILE__);
					
					int_goahead=0;
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
				}
				else
				{
					int_goahead = 1;
				}
			}
		}
		else
		{
			int_goahead = 1;
		}
		/* Added for Billing Structure Upload - Ends */
        if ( int_goahead== 1 )
		{
         CO_ProcMonitor(APL_OUT_FILE,"Now calling IV_Upd_CustFeeMnt \n",NULL,p_intlenv_data_struct_h);
         if((IV_Upd_CustFeeMnt(l_iv_custfee_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from IV_Upd_CustFeeMnt SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_PtyGridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_iv_custfee_struct_h->bcustsetup_access_stamp);/* Bageshri HDFCIV_001*/
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from IV_Upd_CustFeeMnt FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
		}

         free(l_iv_custfee_struct_h);
      }

      else if (strcmp(chr_h_func_name,"wrp_CBUpdAccSchFn") == 0)
      {
         INTL_WARNING;
         l_mt_schdet_struct_h =  (MT_SCHDET_STRUCT_H *)calloc(1,sizeof(MT_SCHDET_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_mt_schdet_struct_h);
         memset(l_mt_schdet_struct_h,NULL,sizeof(MT_SCHDET_STRUCT_H));

         int_ret_val = MT_Proc_ClientSchPopulate(l_mt_schdet_struct_h,chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_Mod_AccSch\n",NULL,p_intlenv_data_struct_h);
         if((MT_Mod_ClientSch(l_mt_schdet_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_ClientSch SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_GridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_mt_schdet_struct_h->h_schsequence_num,l_mt_schdet_struct_h->h_access_stamp);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_ClientSch FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         } 
         APL_FREE(l_mt_schdet_struct_h);
      }

      else if (strcmp(chr_h_func_name,"wrp_CBUpdAccExchMapFn") == 0)
      {
         INTL_WARNING;
         l_mt_cltexchmap_struct_h =  (MT_CLTEXCHMAP_STRUCT_H *)calloc(1,sizeof(MT_CLTEXCHMAP_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_mt_cltexchmap_struct_h);
         memset(l_mt_cltexchmap_struct_h,NULL,sizeof(MT_CLTEXCHMAP_STRUCT_H));

         int_ret_val = MT_Proc_ClientExchMapPopulate(l_mt_cltexchmap_struct_h,chr_h_param_str); 
        
         CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_Mod_ClientExchMap\n",NULL,p_intlenv_data_struct_h);
         if((MT_Mod_ClientExchMap(l_mt_cltexchmap_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
	 	if (strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_INPUT)==0)
		{
	 		printf("Sequence No : |%d|\n",l_mt_cltexchmap_struct_h->h_cln_exchseq_num);
			sprintf(l_audit_value,"%d",l_mt_cltexchmap_struct_h->h_cln_exchseq_num);
		
	 		printf("Sequence String: |%s|\n",l_audit_value);
			if(CO_Update_AudLog(chr_h_entity_name,chr_l_data_key,"CLN_SEQ_NUM",l_audit_value,l_debug_info_ptr) == APL_SUCCESS) 	
			{
            			CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_ClientExchMap SUCCESS \n",NULL,p_intlenv_data_struct_h);


            			int_ret_val = Batch_Proc_GridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_mt_cltexchmap_struct_h->h_cln_exchseq_num,l_mt_cltexchmap_struct_h->h_access_stamp);

			}
		}
		else
		{
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_ClientExchMap SUCCESS \n",NULL,p_intlenv_data_struct_h);


            int_ret_val = Batch_Proc_GridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_mt_cltexchmap_struct_h->h_cln_exchseq_num,l_mt_cltexchmap_struct_h->h_access_stamp);
	    }
         }  
         else
         {
          CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_ClientExchMap FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
	 	printf("Sequence No : |%d|\n",l_mt_cltexchmap_struct_h->h_cln_exchseq_num);

         APL_FREE(l_mt_cltexchmap_struct_h);
      }


      else if (strcmp(chr_h_func_name,"wrp_CBUpdAccDepoMapFn") == 0)
      {
         INTL_WARNING;
         l_mt_cltdepomap_struct_h =  (MT_CLTDEPOMAP_STRUCT_H *)calloc(1,sizeof(MT_CLTDEPOMAP_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_mt_cltdepomap_struct_h);
         memset(l_mt_cltdepomap_struct_h,NULL,sizeof(MT_CLTDEPOMAP_STRUCT_H));

         int_ret_val = MT_Proc_ClientDepoMapPopulate(l_mt_cltdepomap_struct_h,chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_Mod_ClientDepoMap\n",NULL,p_intlenv_data_struct_h);
		/* Retrofit HDFC for dupliacte depo code ignore to Client Depository Upload - Starts */
		if( strcmp(p_intlenv_data_struct_h->h_mode,"INP")==0)
		{
			EXEC SQL SELECT COUNT(CLN_CODE)
			INTO :cnt_servcode
			FROM MT_CLI_DEPO_MAP
			WHERE CLN_CODE = :l_mt_cltdepomap_struct_h->h_dl_client
			AND CLN_DEPO_CODE = :l_mt_cltdepomap_struct_h->h_cln_depo_code;
			
			if ( cnt_servcode >= 1 )
			{
				CO_InsertErr(l_debug_info_ptr, ERR_REC_EXIST, 
								   APL_NULL_STRING, APL_NULL_STRING,
								   APL_NULL_STRING, __LINE__, 
								   __FILE__);
				
				int_goahead = 0;
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			else
			{
				
				int_goahead = 1;
				
			}
			 
		}
		else
		{
			
			int_goahead = 1;
			
		}
		/*  Retrofit HDFC for dupliacte depo code ignore to Client Depository Upload- Ends */
	
		if ( int_goahead == 1)
		{
		 
         if((MT_Mod_ClientDepoMap(l_mt_cltdepomap_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
	 			if (strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_INPUT)==0)
				{
					Alert("PPD: go ahead : |%d|",l_mt_cltdepomap_struct_h->h_cln_deposeq_num);
	 				printf("Sequence No : |%d|\n",l_mt_cltdepomap_struct_h->h_cln_deposeq_num);
					sprintf(l_audit_value,"%d",l_mt_cltdepomap_struct_h->h_cln_deposeq_num);
	 				printf("Sequence String: |%s|\n",l_audit_value);
			
					if(CO_Update_AudLog(chr_h_entity_name,chr_l_data_key,"CLN_SEQ_NUM",l_audit_value,l_debug_info_ptr) == APL_SUCCESS) 	
					{
            		CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_ClientDepoMap SUCCESS \n",NULL,p_intlenv_data_struct_h);
            		int_ret_val = Batch_Proc_GridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_mt_cltdepomap_struct_h->h_cln_deposeq_num,l_mt_cltdepomap_struct_h->h_access_stamp);
					}
				}
				else
				{
            	CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_ClientDepoMap SUCCESS \n",NULL,p_intlenv_data_struct_h);
            	int_ret_val = Batch_Proc_GridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_mt_cltdepomap_struct_h->h_cln_deposeq_num,l_mt_cltdepomap_struct_h->h_access_stamp);
				
				}
				
				
				/*change status for authorize for upload start*/
				if((strcmp(p_intlenv_data_struct_h->subprocess, "UPL") == 0) && (strcmp(p_intlenv_data_struct_h->h_mode, APL_FUNC_INPUT) == 0))
				{
					
					strcpy(p_intlenv_data_struct_h->usr,"SYSTEM");
				    
					strcpy(p_intlenv_data_struct_h->h_mode,APL_FUNC_AUTHORISE);
					
					if((MT_Mod_ClientDepoMap(l_mt_cltdepomap_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
					{
	
						CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_ClientDepoMap SUCCESS \n",NULL,p_intlenv_data_struct_h);
						int_ret_val = Batch_Proc_GridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_mt_cltdepomap_struct_h->h_cln_deposeq_num,l_mt_cltdepomap_struct_h->h_access_stamp);
					}
					else
					{
						CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_ClientDepoMap FAILURE \n",NULL,p_intlenv_data_struct_h);
						int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
					
				}
         }
         else
         {
					int_ret_val = Batch_Proc_GridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_mt_cltdepomap_struct_h->h_cln_deposeq_num,l_mt_cltdepomap_struct_h->h_access_stamp);
					
				}
				
				/*change status for authorize for upload end*/
				
				
         }
         else
         {
          CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_ClientDepoMap FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

		}

         APL_FREE(l_mt_cltdepomap_struct_h);
      }


      else if (strcmp(chr_h_func_name,"wrp_CBUpdAccAddrFn") == 0)
      {
         INTL_WARNING;
         l_mt_msgaddress_struct_h =  (MT_MSGADDRESS_STRUCT_H *)calloc(1,sizeof(MT_MSGADDRESS_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_mt_msgaddress_struct_h);
         memset(l_mt_msgaddress_struct_h,NULL,sizeof(MT_MSGADDRESS_STRUCT_H));

         int_ret_val = MT_Proc_ClientAddrPopulate(l_mt_msgaddress_struct_h,chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_Mod_ClientMsgAddr\n",NULL,p_intlenv_data_struct_h);

         if((MT_Mod_ClientMsgAddr(l_mt_msgaddress_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
	 			if (strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_INPUT)==0)
				{
	 				printf("Sequence No : |%d|\n",l_mt_msgaddress_struct_h->h_addrsequence_num);
					sprintf(l_audit_value,"%d",l_mt_msgaddress_struct_h->h_addrsequence_num);
	 				printf("Sequence String: |%s|\n",l_audit_value);
			
					if(CO_Update_AudLog(chr_h_entity_name,chr_l_data_key,"CLN_SEQ_NUM",l_audit_value,l_debug_info_ptr) == APL_SUCCESS) 	
					{
            		CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_ClientMsgAddr SUCCESS \n",NULL,p_intlenv_data_struct_h);
            		int_ret_val = Batch_Proc_GridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_mt_msgaddress_struct_h->h_addrsequence_num,l_mt_msgaddress_struct_h->h_access_stamp);
					}
				}
				else
				{
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_ClientMsgAddr SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_GridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_mt_msgaddress_struct_h->h_addrsequence_num,l_mt_msgaddress_struct_h->h_access_stamp);
				}
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_ClientMsgAddr FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         APL_FREE(l_mt_msgaddress_struct_h);
      }

	  /*Added by Prateek on 19052014 for ISKB_198(FPI Maintenance)-START*/
	  else if (strcmp(chr_h_func_name,"wrp_CBUpdAccFpiMapFn") == 0)
      {
         INTL_WARNING;
         l_mt_cltfpimap_struct_h =  (MT_CLTFPIMAP_STRUCT_H *)calloc(1,sizeof(MT_CLTFPIMAP_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_mt_cltfpimap_struct_h);
         memset(l_mt_cltfpimap_struct_h,NULL,sizeof(MT_CLTFPIMAP_STRUCT_H));

         int_ret_val = MT_Proc_ClientFpiMapPopulate(l_mt_cltfpimap_struct_h,chr_h_param_str); 
        
         CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_Mod_ClientFpiMap\n",NULL,p_intlenv_data_struct_h);
         if((MT_Mod_ClientFpiMap(l_mt_cltfpimap_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
	 	if (strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_INPUT)==0)
		{
	 		printf("Sequence No : |%d|\n",l_mt_cltfpimap_struct_h->h_cln_exchseq_num);
			sprintf(l_audit_value,"%d",l_mt_cltfpimap_struct_h->h_cln_exchseq_num);
		
	 		printf("Sequence String: |%s|\n",l_audit_value);
			if(CO_Update_AudLog(chr_h_entity_name,chr_l_data_key,"CLN_SEQ_NUM",l_audit_value,l_debug_info_ptr) == APL_SUCCESS) 	
			{
            			CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_ClientFpiMap SUCCESS \n",NULL,p_intlenv_data_struct_h);


            			int_ret_val = Batch_Proc_GridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_mt_cltfpimap_struct_h->h_cln_exchseq_num,l_mt_cltfpimap_struct_h->h_access_stamp);

			}
		}
		else
		{
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_ClientFpiMap SUCCESS \n",NULL,p_intlenv_data_struct_h);


            int_ret_val = Batch_Proc_GridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_mt_cltfpimap_struct_h->h_cln_exchseq_num,l_mt_cltfpimap_struct_h->h_access_stamp);
	    }
         }  
         else
         {
          CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_ClientFpiMap FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
	 	printf("Sequence No : |%d|\n",l_mt_cltfpimap_struct_h->h_cln_exchseq_num);

         APL_FREE(l_mt_cltfpimap_struct_h);
      }
		/*Added by Prateek on 19052014 for ISKB_198(FPI Maintenance)-END*/

      else if (strcmp(chr_h_func_name,"wrp_CBUpdAccCashFn") == 0)
      {
         INTL_WARNING;
         l_dl_cashacc_struct_ha =  (DL_CASHACC_STRUCT_H *)calloc(1,sizeof(DL_CASHACC_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_dl_cashacc_struct_ha);
         memset(l_dl_cashacc_struct_ha,NULL,sizeof(DL_CASHACC_STRUCT_H));

         int_ret_val = MT_Proc_CustCashPopulate(l_dl_cashacc_struct_ha,chr_h_param_str);

			CO_ProcMonitor(APL_OUT_FILE,"Now calling CR_Mod_CashAcc\n",NULL,p_intlenv_data_struct_h);

			if((CR_Mod_CashAcc(l_dl_cashacc_struct_ha,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_CashAcc SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_CashAcc FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}

         free(l_dl_cashacc_struct_ha);
      }

      else if (strcmp(chr_h_func_name,"wrp_CBUpdAssisFn") == 0)
      {
         INTL_WARNING;
         l_mhlp_code_struct_hc =  (MHLP_CODE_STRUCT_H *)calloc(1,sizeof(MHLP_CODE_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_mhlp_code_struct_hc);
         memset(l_mhlp_code_struct_hc,NULL,sizeof(MHLP_CODE_STRUCT_H));

         int_ret_val = MT_Proc_AssisPopulate(l_mhlp_code_struct_hc,chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling CR_Mod_AssisCd\n",NULL,p_intlenv_data_struct_h);
         if((CR_Mod_AssisCd(l_mhlp_code_struct_hc,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_AssisCd SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_AssisCd FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         free(l_mhlp_code_struct_hc);
      }

      else if (strcmp(chr_h_func_name,"wrp_CBUpdAssisOthFn") == 0)
      {
         INTL_WARNING;
			int_ret_val = MT_Proc_AssisOthPopulate(chr_p_assiscode,chr_p_lbrkcode,chr_l_access_stamp,chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling CR_Mod_AssisCdOth\n",NULL,p_intlenv_data_struct_h);

			if((CR_Mod_AssisCdOth(chr_p_assiscode,chr_p_lbrkcode,chr_l_access_stamp,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_AssisCdOth SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_AssisCdOth FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
      }

      else if (strcmp(chr_h_func_name,"wrp_CBUpdMsgConv") == 0)
      {
         INTL_WARNING;
         p_ms_msgconv_struct_h =  (MS_MSGCONV_STRUCT_H *)calloc(1,sizeof(MS_MSGCONV_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(p_ms_msgconv_struct_h);
         memset(p_ms_msgconv_struct_h,NULL,sizeof(MS_MSGCONV_STRUCT_H));

         int_ret_val = MT_Proc_MsgConvPopulate(p_ms_msgconv_struct_h,chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling CBInsdbMsgConv !!!\n",NULL,p_intlenv_data_struct_h);

         if ((CBInsdbMsgConv(p_ms_msgconv_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr)== APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CBInsdbMsgConv SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CBInsdbMsgConv FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

         free(p_ms_msgconv_struct_h);
      }

      else if (strcmp(chr_h_func_name,"wrp_CBCpyAccSchFn") == 0)
      {
         INTL_WARNING;

			int_ret_val = MT_Proc_CpyCustSchPopulate(chr_p_from_acct,chr_p_to_acct,chr_p_from_acct_access_stamp,chr_p_to_acct_access_stamp,chr_h_param_str);
         CO_ProcMonitor(APL_OUT_FILE,"Now calling CR_Proc_AccSchCpy\n",NULL,p_intlenv_data_struct_h);
         if((CR_Proc_AccSchCpy(chr_p_from_acct,chr_p_to_acct,chr_p_from_acct_access_stamp,chr_p_to_acct_access_stamp,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Proc_AccSchCpy SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Proc_AccSchCpy FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
      }

      else if (strcmp(chr_h_func_name,"wrp_CBCpyAccMemoFn") == 0)
      {
         INTL_WARNING;
         int_ret_val = MT_Proc_CpyCustMemoPopulate(chr_p_from_acct,chr_p_to_acct,chr_p_from_acct_access_stamp,chr_h_param_str);
         CO_ProcMonitor(APL_OUT_FILE,"Now calling CR_Proc_AccMemoCpy\n",NULL,p_intlenv_data_struct_h);
         if((CR_Proc_AccMemoCpy(chr_p_from_acct,chr_p_to_acct,chr_p_from_acct_access_stamp,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Proc_AccMemoCpy SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Proc_AccMemoCpy FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
      }

      else if (strcmp(chr_h_func_name,"wrp_CBUpdCustFn") == 0)
      {
         INTL_WARNING;
         l_mt_ruclient_struct_ha =  (MT_RUCLIENT_STRUCT_H *)calloc(1,sizeof(MT_RUCLIENT_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_mt_ruclient_struct_ha);
         memset(l_mt_ruclient_struct_ha,NULL,sizeof(MT_RUCLIENT_STRUCT_H));

         int_ret_val = MT_Proc_CustPopulate(l_mt_ruclient_struct_ha,chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling CBUpdCustFn\n",NULL,p_intlenv_data_struct_h);
         if((CBUpdCustFn(l_mt_ruclient_struct_ha,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CBUpdCustFn SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CBUpdCustFn FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

         free(l_mt_ruclient_struct_ha);
      }

      else if (strcmp(chr_h_func_name,"wrp_CBUpdCustOthFn") == 0)
      {
         INTL_WARNING;

         int_ret_val = MT_Proc_CustOthPopulate(chr_p_acct,chr_p_acct_access_stamp,chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling CBUpdCustOthFn\n",NULL,p_intlenv_data_struct_h);
         if((CBUpdCustOthFn(chr_p_acct,chr_p_acct_access_stamp,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && 
									(CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CBUpdCustOthFn SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CBUpdCustOthFn FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

      }

      else if (strcmp(chr_h_func_name,"wrp_CBUpdRRLocFn") == 0)
      {
         INTL_WARNING;
         l_mt_ruloc_struct_ha =  (MT_RULOC_STRUCT_H *)calloc(1,sizeof(MT_RULOC_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_mt_ruloc_struct_ha);
         memset(l_mt_ruloc_struct_ha,NULL,sizeof(MT_RULOC_STRUCT_H));

         int_ret_val = MT_Proc_RRLocPopulate(l_mt_ruloc_struct_ha,chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling CBUpdRRLocFn\n",NULL,p_intlenv_data_struct_h);
         if((CBUpdRRLocFn(l_mt_ruloc_struct_ha,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CBUpdRRLocFn SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CBUpdRRLocFn FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

         free(l_mt_ruloc_struct_ha);
      }

      else if (strcmp(chr_h_func_name,"wrp_CBUpdRRLocOthFn") == 0)
      {
         INTL_WARNING;

          int_ret_val = MT_Proc_RRLocOthPopulate(chr_p_rrloc,chr_p_rrloc_access_stamp,chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling CBUpdRRLocOthFn\n",NULL,p_intlenv_data_struct_h);
          if((CBUpdRRLocOthFn(chr_p_rrloc,chr_p_rrloc_access_stamp,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CBUpdRRLocOthFn SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CBUpdRRLocOthFn FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

      }

      else if (strcmp(chr_h_func_name,"wrp_CBUpdRRProdFn") == 0)
      {
         INTL_WARNING;
         l_mt_ruprod_struct_h =  (MT_RUPROD_STRUCT_H *)calloc(1,sizeof(MT_RUPROD_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_mt_ruprod_struct_h);
         memset(l_mt_ruprod_struct_h,NULL,sizeof(MT_RUPROD_STRUCT_H));

         int_ret_val = MT_Proc_RRProdPopulate(l_mt_ruprod_struct_h,chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling CBUpdRRProdFn\n",NULL,p_intlenv_data_struct_h);
         if((CBUpdRRProdFn(l_mt_ruprod_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CBUpdRRProdFn SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CBUpdRRProdFn FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

         free(l_mt_ruprod_struct_h);
      }

      else if (strcmp(chr_h_func_name,"wrp_CBUpdRRProdOthFn") == 0)
      {
         INTL_WARNING;

          int_ret_val = MT_Proc_RRProdOthPopulate(chr_p_rrprod,chr_p_rrprod_access_stamp,chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling CBUpdRRProdOthFn\n",NULL,p_intlenv_data_struct_h);
          if((CBUpdRRProdOthFn(chr_p_rrprod,chr_p_rrprod_access_stamp,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CBUpdRRProdOthFn SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CBUpdRRProdOthFn FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

      }
         
      else if (strcmp(chr_h_func_name,"wrp_CBUpdWtrFn")==0) 
      {
         INTL_WARNING;
         strcpy(chr_l_return_value,APL_NULL_STRING);
         l_mt_whtrate_struct_h =  (MT_WHTRATE_STRUCT_H *)calloc(1,sizeof(MT_WHTRATE_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_mt_whtrate_struct_h);
         memset(l_mt_whtrate_struct_h,NULL,sizeof(MT_WHTRATE_STRUCT_H));

         int_ret_val = MT_Proc_WTRPopulate(l_mt_whtrate_struct_h, chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_Mod_WTaxRt\n",NULL,p_intlenv_data_struct_h);
         if((MT_Mod_WTaxRt(l_mt_whtrate_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_WTaxRt with SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_WTaxRt  with FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         free(l_mt_whtrate_struct_h);
      }

      else if (strcmp(chr_h_func_name,"wrp_CBUpdRRSRNFn")==0) 
      {
         INTL_WARNING;
         strcpy(chr_l_return_value,APL_NULL_STRING);
         l_mt_rusrn_struct_hb = (MT_RUSRN_STRUCT_H *)calloc(1, sizeof(MT_RUSRN_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_mt_rusrn_struct_hb);
         memset(l_mt_rusrn_struct_hb,NULL,sizeof(MT_RUSRN_STRUCT_H));

         int_ret_val = MT_Proc_RRSrnPopulate(l_mt_rusrn_struct_hb, chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling CBUpdRRSRNFn \n",NULL,p_intlenv_data_struct_h);
         if((CBUpdRRSRNFn(l_mt_rusrn_struct_hb,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CBUpdRRSRNFn with SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CBUpdRRSRNFn with FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         free(l_mt_rusrn_struct_hb);
      }

      else if (strcmp(chr_h_func_name,"wrp_CBUpdRRInstrFn")==0) 
      {
         INTL_WARNING;
         strcpy(chr_l_return_value,APL_NULL_STRING);
          l_mt_ruinstr_struct_h = (MT_RUINSTR_STRUCT_H *)calloc(1, sizeof(MT_RUINSTR_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_mt_ruinstr_struct_h);
          memset(l_mt_ruinstr_struct_h,NULL,sizeof(MT_RUINSTR_STRUCT_H));

         int_ret_val = MT_Proc_RRInstrPopulate(l_mt_ruinstr_struct_h, chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling CBUpdRRInstrFn \n",NULL,p_intlenv_data_struct_h);
         if((CBUpdRRInstrFn(l_mt_ruinstr_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CBUpdRRInstrFn with SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CBUpdRRInstrFn with FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         free(l_mt_ruinstr_struct_h);
      }

		/*Smita - HDFCMT_003 - Instrument Master Maintenance */
      else if (strcmp(chr_h_func_name,"wrp_CBUpdInstrFn") == 0)
      {
         INTL_WARNING;
         l_mt_instrument_struct_h =  (MT_INSTRUMENT_STRUCT_H *)calloc(1,sizeof(MT_INSTRUMENT_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_mt_instrument_struct_h);
         memset(l_mt_instrument_struct_h,NULL,sizeof(MT_INSTRUMENT_STRUCT_H));

			CO_Rtv_DataString(chr_h_param_str,"TRIGGER",p_intlenv_data_struct_h->subprocess);
			if(strcmp(p_intlenv_data_struct_h->subprocess, "API") == 0){
				strcpy(chr_h_param_str_temp,chr_h_param_str);
			}
         int_ret_val = MT_Proc_InstrPopulate(l_mt_instrument_struct_h,chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_Mod_Instr\n",NULL,p_intlenv_data_struct_h);

         if((MT_Mod_Instr(l_mt_instrument_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_Instr SUCCESS \n",NULL,p_intlenv_data_struct_h);
			//Added CSGL API call by usman - start
			if((strcmp(p_intlenv_data_struct_h->subprocess, "API") == 0) &&
		          (strcmp(p_intlenv_data_struct_h->h_mode, APL_FUNC_INPUT) == 0) || (strcmp(p_intlenv_data_struct_h->h_mode, APL_FUNC_MODIFY) == 0) ) 
                {
					char status[10]=APL_NULL_STRING;
					char    chr_search_lbl[20]= APL_NULL_STRING;
					strcpy(p_intlenv_data_struct_h->usr,"SYSTEM");
			        strcpy(p_intlenv_data_struct_h->h_mode,APL_FUNC_AUTHORISE);
					CO_ProcMonitor(APL_OUT_FILE,"before commit successup\n",NULL,NULL);
	                   EXEC SQL COMMIT ;
                    CO_ProcMonitor(APL_OUT_FILE,"after commit successup\n",NULL,NULL);
					strcpy(chr_h_comments,"SYSTEM AUTHORIZE");
					
					CO_Rtv_DataString(chr_h_param_str_temp,"STATUS",status);
					CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_Mod_InstrOth for API call\n",NULL,p_intlenv_data_struct_h);
					sprintf(chr_search_lbl,"%c%s%c%s%c",DATA_FIELD_SEPRTR,"STATUS",DATA_VALUE_SEPRTR,"AA",DATA_FIELD_SEPRTR);
					
					strcat(chr_h_param_str_temp,chr_search_lbl);
					int_ret_val = CO_PopulateAuditString(chr_h_entity_name,chr_h_param_str_temp,chr_l_audit_data,chr_l_data_key);

					if((strcmp(chr_l_audit_data,APL_NULL_STRING)!=0) && (strcmp(chr_l_data_key,APL_NULL_STRING)!=0))
					{
						if ( APL_FAILURE==CO_Upd_AudLog_Chk_SysOnline(p_intlenv_data_struct_h,chr_l_audit_data,chr_l_data_key,chr_h_comments,l_debug_info_ptr))
						{
								 CO_ProcMonitor(APL_OUT_FILE,"Failed in CO_Upd_AudLog_Chk_SysOnline Instrument API(AUTH)\n",NULL,p_intlenv_data_struct_h);	
						}
					}
					strcpy(chr_l_instrcode,l_mt_instrument_struct_h->h_instr_code);
					if((MT_Mod_InstrOth(chr_l_instrcode,chr_l_access_stamp,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
					{
						CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_InstrOth SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
						CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_InstrOth FAILURE \n",NULL,p_intlenv_data_struct_h);
						int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
					}		
				}
				//Added CSGL API call by usman - end
				else
				{
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_Instr FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

         free(l_mt_instrument_struct_h);
      }
	  
	  else if (strcmp(chr_h_func_name,"wrp_CBUpdInstrCr") == 0)
      {
         INTL_WARNING;
         mt_inst_corp_grp_struct_h =  (MT_INST_CORP_GRP_STRUCT_H *)calloc(1,sizeof(MT_INST_CORP_GRP_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(mt_inst_corp_grp_struct_h);
         memset(mt_inst_corp_grp_struct_h,NULL,sizeof(MT_INST_CORP_GRP_STRUCT_H));

		
         int_ret_val = MT_Proc_CorpGrpPopulate(mt_inst_corp_grp_struct_h,chr_h_param_str);

	
         CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_Upt_Instr\n",NULL,p_intlenv_data_struct_h);
		/* l_mt_instr_addln_det_struct_h added by Sana for saving tier value in a new table for IB_4935 as on 20/09/2011 */
         if((MT_Upt_Instr(mt_inst_corp_grp_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {   
	         CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Upt_Instr SUCCESS \n",NULL,p_intlenv_data_struct_h);
			int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
		 }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Upt_Instr FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

         free(mt_inst_corp_grp_struct_h);
      }

		/*Wrapper is Used for Modes other than Inp/Mod of Instrument Master Details*/
      else if (strcmp(chr_h_func_name,"wrp_CBUpdInstrOthFn") == 0)
      {
         INTL_WARNING;

		 CO_Rtv_DataString(chr_h_param_str,"TRIGGER",p_intlenv_data_struct_h->subprocess);
         int_ret_val = MT_Proc_InstrOthPopulate(chr_l_instrcode,chr_l_access_stamp,chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_Mod_InstrOth\n",NULL,p_intlenv_data_struct_h);

         if((MT_Mod_InstrOth(chr_l_instrcode,chr_l_access_stamp,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_InstrOth SUCCESS \n",NULL,p_intlenv_data_struct_h);
			if((strcmp(p_intlenv_data_struct_h->subprocess, "API") == 0) &&
		          (strcmp(p_intlenv_data_struct_h->h_mode, APL_FUNC_DELETE) == 0))
                {
					strcpy(p_intlenv_data_struct_h->usr,"SYSTEM");
			        strcpy(p_intlenv_data_struct_h->h_mode,APL_FUNC_AUTHORISE);
					CO_ProcMonitor(APL_OUT_FILE,"before commit successup\n",NULL,NULL);
	                   EXEC SQL COMMIT ;
                    CO_ProcMonitor(APL_OUT_FILE,"after commit successup\n",NULL,NULL);
					
					CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_Mod_InstrOth for API call\n",NULL,p_intlenv_data_struct_h);
					
					if((MT_Mod_InstrOth(chr_l_instrcode,chr_l_access_stamp,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
					{
						CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_InstrOth SUCCESS \n",NULL,p_intlenv_data_struct_h);
						int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
					}
					else
					{
						CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_InstrOth FAILURE \n",NULL,p_intlenv_data_struct_h);
						int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
					}		
				}
				else
				{
					int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
				}
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_InstrOth FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         strcpy(chr_l_instrcode,APL_NULL_STRING);
         strcpy(chr_l_access_stamp,APL_NULL_STRING);
      }

      /* Smita - HDFCMT_003 - Instrument Master Maintenance */
		/*Wrapper to accept Redemption Depository Details*/
      else if (strcmp(chr_h_func_name,"wrp_CBUpdInstrRedDepFn") ==0)
      {
			INTL_WARNING;

       	l_mt_instrument_red_dep_struct_h = (MT_INSTRUMENT_RED_DEP_STRUCT_H *)calloc(1,sizeof(MT_INSTRUMENT_RED_DEP_STRUCT_H));
       	APL_MALLOC_FAIL_LOC_A(l_mt_instrument_red_dep_struct_h);
       	memset(l_mt_instrument_red_dep_struct_h,NULL,sizeof(MT_INSTRUMENT_RED_DEP_STRUCT_H));
	
			int_ret_val = MT_Proc_InstrRedDepPopulate(l_mt_instrument_red_dep_struct_h,chr_h_param_str);

			CO_ProcMonitor(APL_OUT_FILE,"Now Calling MT_Mod_InstrRedDepDet\n",NULL,p_intlenv_data_struct_h);

			if ((MT_Mod_InstrRedDepDet(l_mt_instrument_red_dep_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
			{
			  	CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_InstrRedDepDet SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_GridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_mt_instrument_red_dep_struct_h->h_instr_seq_num,l_mt_instrument_red_dep_struct_h->h_access_stamp);
         	/*int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);	*/
			}
			else
			{
			  	CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_InstrRedDepDet FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			free (l_mt_instrument_red_dep_struct_h);
      }

      else if (strcmp(chr_h_func_name,"wrp_CBUpdInstrExchFn") ==0)
      {
        	INTL_WARNING;
			 
			l_mt_instrument_exch_struct_h=(MT_INSTRUMENT_EXCH_STRUCT_H *)calloc(1,sizeof(MT_INSTRUMENT_EXCH_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_mt_instrument_exch_struct_h);
			memset(l_mt_instrument_exch_struct_h,NULL,sizeof(MT_INSTRUMENT_EXCH_STRUCT_H));

			int_ret_val = MT_Proc_InstrExchPopulate(l_mt_instrument_exch_struct_h,chr_h_param_str);

			CO_ProcMonitor(APL_OUT_FILE,"Now Calling MT_Mod_InstrExch\n",NULL,p_intlenv_data_struct_h);
         
			if ((MT_Mod_InstrExch(l_mt_instrument_exch_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
           	CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_InstrExch SUCCESS \n",NULL,p_intlenv_data_struct_h);

   /*Priyanka -  Scrip Master file upload  Auto Authorizarion- Start*/

			Alert("\n p_intlenv_data_struct_h->h_process = |%s|",p_intlenv_data_struct_h->h_process);

			if((strcmp(p_intlenv_data_struct_h->h_process, "U") == 0) &&
			((strcmp(p_intlenv_data_struct_h->h_mode, APL_FUNC_INPUT) == 0) || (strcmp(p_intlenv_data_struct_h->h_mode, APL_FUNC_MODIFY) == 0)  ))
            {
					Alert(" \n Party Master Auto Authorization of UPLOAD ...\n");
					strcpy(p_intlenv_data_struct_h->h_mode,APL_FUNC_AUTHORISE);
					strcpy(p_intlenv_data_struct_h->usr,"SYSTEM");
                            
		       /*Audit Log - start */
			   Alert(" chr_h_param_str_temp=|%s|  chr_h_comments=|%s| ",chr_h_param_str_temp,chr_h_comments);

			   /*strcat(chr_h_param_str_temp,"CLN_SEQ_NUM");
			   strcat(chr_h_param_str_temp,l_data_val_sep_str);
			   sprintf(chr_h_param_str_temp,"%s%d",chr_h_param_str_temp,l_mt_cltexchmap_struct_h->h_cln_exchseq_num);
			   strcat(chr_h_param_str_temp,l_data_fld_sep_str);
			   Alert("\n chr_h_param_str_temp=|%s| ",chr_h_param_str_temp);*/
			   if(CO_PopulateAuditString(chr_h_entity_name,chr_h_param_str_temp,chr_l_audit_data,chr_l_data_key) != APL_SUCCESS) 
			   {
					 return(APL_FAILURE);
			   }
			   Alert("\n chr_l_audit_data=|%s| chr_l_data_key =|%s|", chr_l_audit_data,chr_l_data_key);

			   if((strcmp(chr_l_audit_data,APL_NULL_STRING)!=0) && (strcmp(chr_l_data_key,APL_NULL_STRING)!=0))
			   {
					if ( APL_FAILURE==CO_Upd_AudLog_Chk_SysOnline(p_intlenv_data_struct_h,chr_l_audit_data,chr_l_data_key,chr_h_comments,l_debug_info_ptr))
					{
							Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
					}
			  }
		      /*Audit Log - end */	
		Alert("\n p_intlenv_data_struct_h->h_mode = |%s|", p_intlenv_data_struct_h->h_mode);
			if ((MT_Mod_InstrExch(l_mt_instrument_exch_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
			 {
			    CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_ClientExchMap SUCCESS \n",NULL,p_intlenv_data_struct_h);
			    int_ret_val = Batch_Proc_GridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_mt_instrument_exch_struct_h->h_instr_seq_num,l_mt_instrument_exch_struct_h->h_access_stamp);			
			 }  
			 else
			 {
			  CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_ClientExchMap FAILURE \n",NULL,p_intlenv_data_struct_h);
			    int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			 }
		}
		else	
			{
			CO_ProcMonitor(APL_OUT_FILE,"Returned from Scrip Master FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_GridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_mt_instrument_exch_struct_h->h_instr_seq_num,l_mt_instrument_exch_struct_h->h_access_stamp);
			}
			
		/* Priyanka MCX - Scrip Master file upload  Auto Authorizarion End */
           	/*int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);*/
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_InstrExch FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
			 
			free (l_mt_instrument_exch_struct_h);
      }
	
      else if (strcmp(chr_h_func_name,"wrp_CBUpdInstrCrdFn") ==0)
      {
        	INTL_WARNING;

			l_mt_instrument_cr_agency_struct_h = (MT_INSTRUMENT_CR_AGENCY_STRUCT_H *)calloc(1,sizeof(MT_INSTRUMENT_CR_AGENCY_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_mt_instrument_cr_agency_struct_h);
			memset(l_mt_instrument_cr_agency_struct_h,NULL,sizeof(MT_INSTRUMENT_CR_AGENCY_STRUCT_H));
				
			int_ret_val = MT_Proc_InstrCRAgencyPopulate(l_mt_instrument_cr_agency_struct_h,chr_h_param_str);
			CO_ProcMonitor(APL_OUT_FILE,"Now Calling MT_Mod_InstrCRAgency\n",NULL,p_intlenv_data_struct_h);

			if((MT_Mod_InstrCrd(l_mt_instrument_cr_agency_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_InstrCrd SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_GridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_mt_instrument_cr_agency_struct_h->h_instr_seq_num,l_mt_instrument_cr_agency_struct_h->h_access_stamp);
            /*int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);*/
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_InstrCrd FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
			free (l_mt_instrument_cr_agency_struct_h);
      }
      
      else if (strcmp(chr_h_func_name,"wrp_CBUpdInstrPCFn") ==0)
      {
        	INTL_WARNING;

			l_mt_instrument_pc_struct_h = (MT_INSTRUMENT_PC_STRUCT_H *)calloc(1,sizeof(MT_INSTRUMENT_PC_STRUCT_H));	
			APL_MALLOC_FAIL_LOC_A(l_mt_instrument_pc_struct_h);
			
			int_ret_val = MT_Proc_InstrPCPopulate(l_mt_instrument_pc_struct_h,chr_h_param_str);
			CO_ProcMonitor(APL_OUT_FILE,"Now Calling MT_Mod_InstrPC\n",NULL,p_intlenv_data_struct_h);

			if((MT_Mod_InstrPC(l_mt_instrument_pc_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_InstrPC SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_GridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_mt_instrument_pc_struct_h->h_instr_seq_num,l_mt_instrument_pc_struct_h->h_access_stamp);
            /*int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);*/
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_InstrPC FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
					
			free (l_mt_instrument_pc_struct_h);
      }

      else if (strcmp(chr_h_func_name,"wrp_CBUpdInstrPartRedFn") ==0)
      {
        	INTL_WARNING;

			l_mt_instrument_part_red_struct_h = (MT_INSTRUMENT_PART_RED_STRUCT_H *)calloc(1,sizeof(MT_INSTRUMENT_PART_RED_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_mt_instrument_part_red_struct_h);
				
			int_ret_val = MT_Proc_InstrPartRedPopulate(l_mt_instrument_part_red_struct_h,chr_h_param_str);
			CO_ProcMonitor(APL_OUT_FILE,"Now Calling MT_Mod_InstrPartRed\n",NULL,p_intlenv_data_struct_h);

         if((MT_Mod_InstrPartRed(l_mt_instrument_part_red_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_InstrPartRed SUCCESS\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_GridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_mt_instrument_part_red_struct_h->h_instr_seq_num,l_mt_instrument_part_red_struct_h->h_access_stamp);
            /*int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);*/
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_InstrPartRed FAILURE\n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
	
			free (l_mt_instrument_part_red_struct_h);
      }

      else if (strcmp(chr_h_func_name,"wrp_CBUpdInstrPTCFn") ==0)
      {
        	INTL_WARNING;

			l_mt_instrument_ptc_struct_h = (MT_INSTRUMENT_PTC_STRUCT_H *)calloc(1,sizeof(MT_INSTRUMENT_PTC_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_mt_instrument_ptc_struct_h);
		
			int_ret_val = MT_Proc_InstrPTCPopulate(l_mt_instrument_ptc_struct_h,chr_h_param_str);
			CO_ProcMonitor(APL_OUT_FILE,"Now Calling MT_Mod_InstrPTC\n",NULL,p_intlenv_data_struct_h);

         if((MT_Mod_InstrPTC(l_mt_instrument_ptc_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_InstrPTC SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_GridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_mt_instrument_ptc_struct_h->h_instr_seq_num,l_mt_instrument_ptc_struct_h->h_access_stamp);
            /*int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);*/
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_InstrPTC FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

			free (l_mt_instrument_ptc_struct_h);
      }

      else if (strcmp(chr_h_func_name,"wrp_CBUpdInstrResetFn") ==0)
      {
        	INTL_WARNING;

			l_mt_instrument_reset_struct_h=(MT_INSTRUMENT_RESET_STRUCT_H *)calloc(1,sizeof(MT_INSTRUMENT_RESET_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_mt_instrument_reset_struct_h);

			int_ret_val = MT_Proc_InstrResetPopulate(l_mt_instrument_reset_struct_h,chr_h_param_str);
			CO_ProcMonitor(APL_OUT_FILE,"Now Calling MT_Mod_InstrReset\n",NULL,p_intlenv_data_struct_h);

         if((MT_Mod_InstrReset(l_mt_instrument_reset_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_InstrReset SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_GridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_mt_instrument_reset_struct_h->h_instr_seq_num,l_mt_instrument_reset_struct_h->h_access_stamp);
            /*int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);*/
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_InstrReset FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

			free (l_mt_instrument_reset_struct_h);
      }
      /* Smita - HDFCMT_003 - Instrument Master Maintenance*/

      else if (strcmp(chr_h_func_name,"wrp_CBUpdHDATStaticFn") == 0)
      {
         INTL_WARNING;
         l_pro_hdat_static_struct_hc =  (PRO_HDAT_STATIC_STRUCT_H *)calloc(1,sizeof(PRO_HDAT_STATIC_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_pro_hdat_static_struct_hc);
         memset(l_pro_hdat_static_struct_hc,NULL,sizeof(PRO_HDAT_STATIC_STRUCT_H));

         int_ret_val = MT_Proc_HDATPopulate(l_pro_hdat_static_struct_hc,chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling CR_Mod_HDATStat\n",NULL,p_intlenv_data_struct_h);
         if((CR_Mod_HDATStat(l_pro_hdat_static_struct_hc,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_HDATStat SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_HDATStat FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         free(l_pro_hdat_static_struct_hc);
      }
/*
      else if (strcmp(chr_h_func_name,"wrp_CBUpdDealFn") == 0)
      {
         INTL_WARNING;
			  l_DealStruct =  (DEAL_STRUCT_H *)calloc(1,sizeof(DEAL_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_DealStruct);
         memset(l_DealStruct,NULL,sizeof(DEAL_STRUCT_H));

         int_ret_val = CPopulateDealStruct(l_DealStruct,chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling CBUpdDealFn\n",NULL,p_intlenv_data_struct_h);
				
			  EXEC SQL INSERT INTO DEAL VALUES (:l_DealStruct);
			  IS_ANY_ORA_ERROR
         CO_ProcMonitor(APL_OUT_FILE,"After Insert\n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         CO_ProcMonitor(APL_OUT_FILE,"After calling CBUpdDealFn\n",NULL,p_intlenv_data_struct_h);
        
         free(l_DealStruct);
      }
*/
/* company master HDFCMT_002   ANIL*/
      else if (strcmp(chr_h_func_name,"wrp_MTUpdCompanyFn") == 0)
      {
        	INTL_WARNING;
        l_mt_company_struct_h = (MT_COMPANY_STRUCT_H *)calloc(1,sizeof(MT_COMPANY_STRUCT_H));
        APL_MALLOC_FAIL_LOC_A(l_mt_company_struct_h);
        memset(l_mt_company_struct_h,NULL,sizeof(MT_COMPANY_STRUCT_H));

        int_ret_val = MT_Proc_CompanyPopulate(l_mt_company_struct_h,chr_h_param_str);
		
    if((CR_Mod_company(l_mt_company_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) )
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_company SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_company FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         free(l_mt_company_struct_h);
      }
       /* company master HDFCMT_002   ANIL*/
 /* Client Instrument HDFCMT_005 ANIL */ 
     else if (strcmp(chr_h_func_name,"wrp_MTUpdClnInstFn") == 0)
      {
        	INTL_WARNING;
        p_mt_cln_instr_struct_h = (MT_CLN_INSTR_STRUCT_H *)calloc(1,sizeof(MT_CLN_INSTR_STRUCT_H));
        APL_MALLOC_FAIL_LOC_A(p_mt_cln_instr_struct_h);
        memset(p_mt_cln_instr_struct_h,NULL,sizeof(MT_CLN_INSTR_STRUCT_H));

        int_ret_val = MT_CLN_INSTRPopulate(p_mt_cln_instr_struct_h,chr_h_param_str);

if((MT_ModClninstr(p_mt_cln_instr_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)&&(CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModClninstr SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModClninstr FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         free(p_mt_cln_instr_struct_h);
      }
     /* Client Instrument HDFCMT_005 ANIL */ 
   /* ANIL HDFCMT_006 Instruction Slip */
 else if (strcmp(chr_h_func_name,"wrp_MTUpdInslEntryFn") == 0)
      {
         INTL_WARNING;
        p_mt_insl_entry_struct_h = (MT_INSL_ENTRY_STRUCT_H *)calloc(1,sizeof(MT_INSL_ENTRY_STRUCT_H));
        APL_MALLOC_FAIL_LOC_A(p_mt_insl_entry_struct_h);
        memset(p_mt_insl_entry_struct_h,NULL,sizeof(MT_INSL_ENTRY_STRUCT_H));

        int_ret_val = MT_InslEntryPopulate(p_mt_insl_entry_struct_h,chr_h_param_str);

    if((MT_Mod_Inslentry(p_mt_insl_entry_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) )
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_Inslentry SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_Inslentry FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         free(p_mt_insl_entry_struct_h);
      }
        /* ANIL HDFCMT_006 Instruction Slip */

      /* Pradeep, No Delivery Master, HDFCMT_007 

      else if (strcmp(chr_h_func_name,"wrp_MTUpdNoDelvFn") == 0)
      {
         INTL_WARNING;
         l_mt_no_delv_struct_h = (MT_NO_DELV_STRUCT_H *)calloc(1,sizeof(MT_NO_DELV_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_mt_no_delv_struct_h);
         memset(l_mt_no_delv_struct_h,NULL,sizeof(MT_NO_DELV_STRUCT_H));

         int_ret_val = MT_Proc_NoDelvPopulate(l_mt_no_delv_struct_h,chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling CR_ProcNoDelv function\n",NULL,p_intlenv_data_struct_h);
         if ((CR_Mod_NoDelv(l_mt_no_delv_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_ProcNoDelv function SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_ProcNoDelv function FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         APL_FREE(l_mt_no_delv_struct_h);
      }


       Pradeep, No Delivery Master, HDFCMT_007, End */

		 /* HDFCMT_012 Daily Float Rate - Dnyanesh*/
		else if (strcmp(chr_h_func_name,"wrp_MTUpdDlFlRateFn") == 0)
		{
			INTL_WARNING;
			l_mt_dlflrate_struct_h = (MT_DLFLRATE_STRUCT_H *)calloc(1,sizeof(MT_DLFLRATE_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_mt_dlflrate_struct_h);
			memset(l_mt_dlflrate_struct_h,NULL,sizeof(MT_DLFLRATE_STRUCT_H));

			int_ret_val = MT_DlFlRatePopulate(l_mt_dlflrate_struct_h,chr_h_param_str);
			CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_ModDlFlRate\n",NULL,p_intlenv_data_struct_h);
			if((MT_ModDlFlRate(l_mt_dlflrate_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) )
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModDlFlRate SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModDlFlRate FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			free(l_mt_dlflrate_struct_h);
		}
		/* HDFCMT_012 Daily Float Rate - Dnyanesh*/

		/* HDFCMT_014 RBI Monitory Details - Dnyanesh*/
		else if (strcmp(chr_h_func_name,"wrp_MTUpdRBIMonDetFn") == 0)
		{
			INTL_WARNING;
			l_mt_rbimondet_struct_h = (MT_RBIMONDET_STRUCT_H *)calloc(1,sizeof(MT_RBIMONDET_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_mt_rbimondet_struct_h);
			memset(l_mt_rbimondet_struct_h,NULL,sizeof(MT_RBIMONDET_STRUCT_H));

			int_ret_val = MT_RBIMonDetPopulate(l_mt_rbimondet_struct_h,chr_h_param_str);
			CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_ModRBIMonDet\n",NULL,p_intlenv_data_struct_h);
			if((MT_ModRBIMonDet(l_mt_rbimondet_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) )
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModRBIMonDet SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModRBIMonDet FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			free(l_mt_rbimondet_struct_h);
		}
		/* HDFCMT_014 RBI Monitory Details - Dnyanesh*/

		/* HDFCMT_007 No Delivery Details - Dnyanesh*/
		else if (strcmp(chr_h_func_name,"wrp_MTUpdNoDlvDetFn") == 0)
		{
			INTL_WARNING;
			l_mt_no_delv_struct_h = (MT_NO_DELV_STRUCT_H *)calloc(1,sizeof(MT_NO_DELV_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_mt_no_delv_struct_h);
			memset(l_mt_no_delv_struct_h,NULL,sizeof(MT_NO_DELV_STRUCT_H));

			int_ret_val = MT_NoDlvDetPopulate(l_mt_no_delv_struct_h,chr_h_param_str);
			CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_ModNoDlvDet\n",NULL,p_intlenv_data_struct_h);
			if((MT_ModNoDlvDet(l_mt_no_delv_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) )
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModNoDlvDet SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModNoDlvDet FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			free(l_mt_no_delv_struct_h);
		}

		/* HDFCMT_013 Float Rate Instrument - Sonali*/
		else if (strcmp(chr_h_func_name,"wrp_MTUpdFloatRateInstFn") == 0)
		{
			INTL_WARNING;
			l_mt_flrateinst_struct_h = (MT_FLRATEINST_STRUCT_H *)calloc(1,sizeof(MT_FLRATEINST_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_mt_flrateinst_struct_h);
			memset(l_mt_flrateinst_struct_h,NULL,sizeof(MT_FLRATEINST_STRUCT_H));

			int_ret_val = MT_FlRateInstPopulate(l_mt_flrateinst_struct_h,chr_h_param_str);
			CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_ModFlRateInst\n",NULL,p_intlenv_data_struct_h);
			if((MT_ModFlRateInst(l_mt_flrateinst_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) )
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModFlRateInst SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModFlRateInst FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			free(l_mt_flrateinst_struct_h);
		}
		/* HDFCMT_013 Float Rate Instrument - Sonali*/


		/* HDFCMT_016 Static data - Sonali*/
		else if (strcmp(chr_h_func_name,"wrp_MTUpdStaticDataFn") == 0)
		{
			INTL_WARNING;
			l_co_staticdata_struct_h = (CO_STATIC_DATA_STRUCT_H *)calloc(1,sizeof(CO_STATIC_DATA_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_co_staticdata_struct_h);
			memset(l_co_staticdata_struct_h,NULL,sizeof(CO_STATIC_DATA_STRUCT_H));

			int_ret_val = MT_StaticDataPopulate(l_co_staticdata_struct_h,chr_h_param_str);
			CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_ModStaicData\n",NULL,p_intlenv_data_struct_h);
			if((MT_ModStaticData(l_co_staticdata_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) )
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModStaticData SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModStaticData FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			//free(l_mt_flrateinst_struct_h);//commneted by babu
		}

		/* HDFCMT_016 Static Data - Sonali*/
/* HDFCMT_008 ,  Manik Trivedi, Settlement Calender */
    else if (strcmp(chr_h_func_name,"wrp_MTUpdSettlcalFn") == 0)
    {
        INTL_WARNING;
        p_mt_settlcal_struct_h = (MT_SETTLCAL_STRUCT_H *)calloc(1,sizeof(MT_SETTLCAL_STRUCT_H));
        APL_MALLOC_FAIL_LOC_A(p_mt_settlcal_struct_h);
        memset(p_mt_settlcal_struct_h,NULL,sizeof(MT_SETTLCAL_STRUCT_H));

        int_ret_val = MT_SettlCalPopulate(p_mt_settlcal_struct_h,chr_h_param_str);
          CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_ModSetCal\n",NULL,p_intlenv_data_struct_h);
       if((MT_ModSetCal(p_mt_settlcal_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) )
        {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModSetCal SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModSetCal FAILURE \n",NULL,p_intlenv_data_struct_h);
             int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         free(p_mt_settlcal_struct_h);
/* HDFCMT_008 ,  Manik Trivedi, Settlement Calender */
		 }
		 else if (strcmp(chr_h_func_name,"wrp_MTUpdDailyQuotFn") == 0)
     {
        INTL_WARNING;
        p_mt_dlyqtions_struct_h = (MT_DLYQTIONS_STRUCT_H *)calloc(1,sizeof(MT_DLYQTIONS_STRUCT_H));
        APL_MALLOC_FAIL_LOC_A(p_mt_dlyqtions_struct_h);
        memset(p_mt_dlyqtions_struct_h,NULL,sizeof(MT_DLYQTIONS_STRUCT_H));

        int_ret_val = MT_DlyQuotationsPopulate(p_mt_dlyqtions_struct_h,chr_h_param_str);
   CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_Moddlyqtions\n",NULL,p_intlenv_data_struct_h);
    if((MT_Moddlyqtions(p_mt_dlyqtions_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) )
        {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Moddlyqtions SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
        {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Moddlyqtions FAILURE \n",NULL,p_intlenv_data_struct_h);
             int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         free(p_mt_dlyqtions_struct_h);
	  }

          /* Kouser - Depository Participant Maintenance - HDFCMT_010 */
          else if (strcmp(chr_h_func_name,"wrp_MTUpdDepoPartFn") == 0)
          {
           INTL_WARNING;
           l_mt_depo_part_struct_h = (MT_DEPO_PART_STRUCT_H *)calloc(1,sizeof(MT_DEPO_PART_STRUCT_H));
           APL_MALLOC_FAIL_LOC_A(l_mt_depo_part_struct_h);
           memset(l_mt_depo_part_struct_h,NULL,sizeof(MT_DEPO_PART_STRUCT_H));
  
           int_ret_val = MT_DepoPartPopulate(chr_h_param_str,l_mt_depo_part_struct_h);
           CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_Mod_DepoPart\n",NULL,p_intlenv_data_struct_h);
           if((MT_Mod_DepoPart(l_mt_depo_part_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) )
            {
               CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_DepoPart SUCCESS \n",NULL,p_intlenv_data_struct_h);
               int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
          }
            else
            {
             CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_DepoPart FAILURE \n",NULL,p_intlenv_data_struct_h);
                int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
            }
            free(l_mt_depo_part_struct_h);
       }

  else if (strcmp(chr_h_func_name,"wrp_MTUpdExchDepoFn") == 0)
      {
              INTL_WARNING;
               l_mt_exch_depo_struct_h = (MT_EXCH_DEPO_STRUCT_H *)calloc(1,sizeof(MT_EXCH_DEPO_STRUCT_H));
              APL_MALLOC_FAIL_LOC_A(l_mt_exch_depo_struct_h);
              memset(l_mt_exch_depo_struct_h,NULL,sizeof(MT_EXCH_DEPO_STRUCT_H));
  
              int_ret_val = MT_ExchDepoPopulate(chr_h_param_str,l_mt_exch_depo_struct_h);
  CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_Mod_ExchDepo\n",NULL,p_intlenv_data_struct_h);
            if((MT_Mod_ExchDepo(l_mt_exch_depo_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) )
              {
                CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_ExchDepo SUCCESS \n",NULL,p_intlenv_data_struct_h);

               /*int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);*/

      int_ret_val = Batch_Proc_AccMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_mt_exch_depo_struct_h->h_access_stamp);

             }
               else
               {
              CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_ExchDepo FAILURE \n",NULL,p_intlenv_data_struct_h);
					printf("\n In Daemon chk error before calling Proc_MarkFailProcess is  |%d| \n",CO_ChkErr(*l_debug_info_ptr));
                    int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
					printf("\n In Daemon chk error after calling Proc_MarkFailProcess is  |%d| \n",CO_ChkErr(*l_debug_info_ptr));
                }
              free(l_mt_exch_depo_struct_h);
          } 

    /* Kouser - Depository Participant Maintenance - HDFCMT */ 

    /*  Kouser - HDFCMT_011 - Credit Rating Agency  */
      else if (strcmp(chr_h_func_name,"wrp_MTUpdCrAgencyFn") == 0)
      {
        INTL_WARNING;
        l_mt_cr_agency_struct_h = (MT_CR_AGENCY_STRUCT_H *)calloc(1,sizeof(MT_CR_AGENCY_STRUCT_H));
        APL_MALLOC_FAIL_LOC_A(l_mt_cr_agency_struct_h);
        memset(l_mt_cr_agency_struct_h,NULL,sizeof(MT_CR_AGENCY_STRUCT_H));

        int_ret_val = MT_CrRt_AgencyPopulate(l_mt_cr_agency_struct_h,chr_h_param_str);
          CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_Mod_CrRtAgency\n",NULL,p_intlenv_data_struct_h);
       if((MT_Mod_CrRtAgency(l_mt_cr_agency_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) )
        {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_CrRtAgency SUCCESS \n",NULL,p_intlenv_data_struct_h);

            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
          } 
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_CrRtAgency FAILURE \n",NULL,p_intlenv_data_struct_h);
             int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         free(l_mt_cr_agency_struct_h);
     }
     else if (strcmp(chr_h_func_name,"wrp_MTUpdCrAgencyDetFn") == 0)
         {
           INTL_WARNING;
            l_mt_cr_agency_det_struct_h = (MT_CR_AGENCY_DET_STRUCT_H *)calloc(1,sizeof(MT_CR_AGENCY_DET_STRUCT_H));
           APL_MALLOC_FAIL_LOC_A(l_mt_cr_agency_det_struct_h);
           memset(l_mt_cr_agency_det_struct_h,NULL,sizeof(MT_CR_AGENCY_DET_STRUCT_H));
   
          int_ret_val = MT_CrRt_AgencyDetPopulate(l_mt_cr_agency_det_struct_h,chr_h_param_str);
            CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_Mod_CrRtAgencyDet\n",NULL,p_intlenv_data_struct_h);
           if((MT_Mod_CrRtAgencyDet(l_mt_cr_agency_det_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) )
           {
              CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_CrRtAgencyDet SUCCESS \n",NULL,p_intlenv_data_struct_h);

          Batch_Proc_GridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_mt_cr_agency_det_struct_h->h_cr_seq_num,l_mt_cr_agency_det_struct_h->h_access_stamp);

              /*int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);*/
           }
            else
            {
                CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_Mod_CrRtAgencyDet FAILURE \n",NULL,p_intlenv_data_struct_h);
                int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
            }
            free(l_mt_cr_agency_det_struct_h);
        }   
     


		 /* PRADEEP - HDFCMT_017 - INDEX FUND MASTER */
		else if (strcmp(chr_h_func_name,"wrp_MTUpdIndexFundFn") == 0)
		{
			INTL_WARNING;
			l_mt_index_fund_struct_h = (MT_INDEX_FUND_STRUCT_H *)calloc(1,sizeof(MT_INDEX_FUND_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_mt_index_fund_struct_h);
			memset(l_mt_index_fund_struct_h,NULL,sizeof(MT_INDEX_FUND_STRUCT_H));

			int_ret_val = MT_Proc_IndexFundPopulate(l_mt_index_fund_struct_h,chr_h_param_str);
			CO_ProcMonitor(APL_OUT_FILE,"Now calling CR_Mod_IndexFund function\n",NULL,p_intlenv_data_struct_h);
			if ((MT_ModIndexFund(l_mt_index_fund_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModIndexFund function SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModIndexFund function FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid,l_debug_info_ptr);
			}
			APL_FREE(l_mt_index_fund_struct_h);
		}

		else if (strcmp(chr_h_func_name,"wrp_MTUpdIndexFundDetFn") == 0)
		{
			INTL_WARNING;
			l_mt_index_funddet_struct_h = (MT_INDEX_FUNDDET_STRUCT_H *)calloc(1,sizeof(MT_INDEX_FUNDDET_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_mt_index_funddet_struct_h);
			memset(l_mt_index_funddet_struct_h,NULL,sizeof(MT_INDEX_FUNDDET_STRUCT_H));

			int_ret_val = MT_Proc_IndexFundDetPopulate(l_mt_index_funddet_struct_h,chr_h_param_str);
			CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_ModIndexFundDet function\n",NULL,p_intlenv_data_struct_h);
			if ((MT_ModIndexFundDet(l_mt_index_funddet_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModIndexFundDet function SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_GridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_mt_index_funddet_struct_h->h_index_seq_num,l_mt_index_funddet_struct_h->h_access_stamp);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModIndexFundDet function FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid,l_debug_info_ptr);
			}
			APL_FREE(l_mt_index_funddet_struct_h);
		}
		/* Pradeep - HDFCMT_004 - Party Master */
		else if (strcmp(chr_h_func_name,"wrp_MTUpdPartyFn") == 0)
		{
			INTL_WARNING;

			l_mt_party_struct_h = (MT_PARTY_STRUCT_H *)calloc(1,sizeof(MT_PARTY_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_mt_party_struct_h);
			memset(l_mt_party_struct_h,NULL,sizeof(MT_PARTY_STRUCT_H));

			int_ret_val = MT_PartyPopulate(l_mt_party_struct_h,chr_h_param_str);

			CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_ModParty\n",NULL,p_intlenv_data_struct_h);
			if(((MT_ModParty(l_mt_party_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)) && (CHECK_EXISTANCE_OF_ERROR))
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModParty SUCCESS \n",NULL,p_intlenv_data_struct_h);
				
				/*Charuta -  MCX Phase 2 Party Master file upload - Start*/
	  	        if((strcmp(p_intlenv_data_struct_h->subprocess, "GFU") == 0) && 
		          (!strcmp(p_intlenv_data_struct_h->h_mode, APL_FUNC_INPUT) || !strcmp(p_intlenv_data_struct_h->h_mode, APL_FUNC_MODIFY ))) 
                {
					
		    	    Alert(" \n Party Master Auto Authorization of UPLOAD  ...\n");	
					strcpy(p_intlenv_data_struct_h->usr,"SYSTEM");
			        strcpy(p_intlenv_data_struct_h->h_mode,APL_FUNC_AUTHORISE);

			       CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_ModParty for AUTH\n",NULL,p_intlenv_data_struct_h);
 			       if(((MT_ModParty(l_mt_party_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)) && (CHECK_EXISTANCE_OF_ERROR))
			       {
				        CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModParty SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModParty FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			
                } /* end of upload block */
				
				else
				{
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModParty FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			APL_FREE(l_mt_party_struct_h);
		}

		else if (strcmp(chr_h_func_name,"wrp_MTUpdPartyExchMapFn") == 0)
		{
			INTL_WARNING;

			l_mt_pty_exch_map_struct_h = (MT_PTY_EXCH_MAP_STRUCT_H *)calloc(1,sizeof(MT_PTY_EXCH_MAP_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_mt_pty_exch_map_struct_h);
			memset(l_mt_pty_exch_map_struct_h,NULL,sizeof(MT_PTY_EXCH_MAP_STRUCT_H));

			int_ret_val = MT_PtyExchMapPopulate(l_mt_pty_exch_map_struct_h,chr_h_param_str);

			CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_ModPtyExchMap\n",NULL,p_intlenv_data_struct_h);
			if (((MT_ModPtyExchMap(l_mt_pty_exch_map_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)) && (CHECK_EXISTANCE_OF_ERROR))
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModPtyExchMap SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_PtyGridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_mt_pty_exch_map_struct_h->h_access_stamp);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModPtyExchMap FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			APL_FREE(l_mt_pty_exch_map_struct_h);
		}

		else if (strcmp(chr_h_func_name,"wrp_MTUpdPartyDepoMapFn") == 0)
		{
			INTL_WARNING;

			l_mt_pty_depo_map_struct_h = (MT_PTY_DEPO_MAP_STRUCT_H *)calloc(1,sizeof(MT_PTY_DEPO_MAP_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_mt_pty_depo_map_struct_h);
			memset(l_mt_pty_depo_map_struct_h,NULL,sizeof(MT_PTY_DEPO_MAP_STRUCT_H));

			int_ret_val = MT_PtyDepoMapPopulate(l_mt_pty_depo_map_struct_h,chr_h_param_str);

			CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_ModPtyDepoMap\n",NULL,p_intlenv_data_struct_h);
			if (((MT_ModPtyDepoMap(l_mt_pty_depo_map_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)) && (CHECK_EXISTANCE_OF_ERROR))
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModPtyDepoMap SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_PtyGridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_mt_pty_depo_map_struct_h->h_access_stamp);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModPtyDepoMap FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			APL_FREE(l_mt_pty_depo_map_struct_h);
		}

		else if (strcmp(chr_h_func_name,"wrp_MTUpdPartyExchClnMapFn") == 0)
		{
			INTL_WARNING;

			l_mt_pty_exch_cln_map_struct_h = (MT_PTY_EXCH_CLN_MAP_STRUCT_H *)calloc(1,sizeof(MT_PTY_EXCH_CLN_MAP_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_mt_pty_exch_cln_map_struct_h);
			memset(l_mt_pty_exch_cln_map_struct_h,NULL,sizeof(MT_PTY_EXCH_CLN_MAP_STRUCT_H));

			int_ret_val = MT_PtyExchClnMapPopulate(l_mt_pty_exch_cln_map_struct_h,chr_h_param_str);

			CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_ModPtyExchClnMap\n",NULL,p_intlenv_data_struct_h);
			if (((MT_ModPtyExchClnMap(l_mt_pty_exch_cln_map_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)) && (CHECK_EXISTANCE_OF_ERROR))
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModPtyExchClnMap SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_PtyGridMarkSuccessProcess(h_ora_rowid,chr_l_return_value,l_mt_pty_exch_cln_map_struct_h->h_access_stamp);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModPtyExchClnMap FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			APL_FREE(l_mt_pty_exch_cln_map_struct_h);
		}
		/* Pradeep - HDFCMT_004 - Party Master */

      /* Kouser - RFSNo - KB_001 */

		else if (strcmp(chr_h_func_name,"wrp_MT_ClnAddLnDetFn") == 0)
		{
			INTL_WARNING;

			l_mt_cln_addln_det_struct_h = (MT_CLN_ADDLN_DET_STRUCT_H *)calloc(1,sizeof(MT_CLN_ADDLN_DET_STRUCT_H));

			APL_MALLOC_FAIL_LOC_A(l_mt_cln_addln_det_struct_h);
			memset(l_mt_cln_addln_det_struct_h,NULL,sizeof(MT_CLN_ADDLN_DET_STRUCT_H));

			int_ret_val = Populate_MT_CLN_ADDLN_DET(l_mt_cln_addln_det_struct_h,chr_h_param_str);
			CO_ProcMonitor(APL_OUT_FILE,"Now calling  MT_ProcAddLnDet\n",NULL,p_intlenv_data_struct_h);
			if (((MT_ProcAddLnDet(l_mt_cln_addln_det_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)) && (CHECK_EXISTANCE_OF_ERROR))
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ProcAddLnDet SUCCESS \n",NULL,p_intlenv_data_struct_h);

				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ProcAddLnDet FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			APL_FREE(l_mt_cln_addln_det_struct_h);
		}
      /* Kouser - RFSNo - KB_001 */

		/* Sundar - HDFCMT_GFU - Vendor Maintenance ********************************** */

		else if (strcmp(chr_h_func_name,"wrp_MTUpdVendorMaintFn") == 0)
		{
			INTL_WARNING;
			l_mt_gfu_vendor_setup_struct_h = (MT_GFU_VENDOR_SETUP_STRUCT_H *)calloc(1,sizeof(MT_GFU_VENDOR_SETUP_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_mt_gfu_vendor_setup_struct_h);
			memset(l_mt_gfu_vendor_setup_struct_h,NULL,sizeof(MT_GFU_VENDOR_SETUP_STRUCT_H));

			int_ret_val = Populate_MT_VENDOR(l_mt_gfu_vendor_setup_struct_h,chr_h_param_str);
			CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_ModVendor \n",NULL,p_intlenv_data_struct_h);
			if((MT_ModVendor (l_mt_gfu_vendor_setup_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) )
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModVendor  SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModVendor  FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
			}
			free(l_mt_gfu_vendor_setup_struct_h);
		}

                else if (strcmp(chr_h_func_name,"wrp_MTUpdGfuFormSetupFn") == 0)
		{
			INTL_WARNING;
			l_mt_gfu_format_setup_struct_h = (MT_GFU_FORMAT_SETUP_STRUCT_H *)calloc(1,sizeof(MT_GFU_FORMAT_SETUP_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_mt_gfu_format_setup_struct_h);
			memset(l_mt_gfu_format_setup_struct_h,NULL,sizeof(MT_GFU_FORMAT_SETUP_STRUCT_H));

			int_ret_val = Populate_MT_GFU_FORMAT_SETUP(l_mt_gfu_format_setup_struct_h,chr_h_param_str);
			CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_ModGFU_FORMAT_SETUP \n",NULL,p_intlenv_data_struct_h);
			if((MT_ModGFU_FORMAT_SETUP (l_mt_gfu_format_setup_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) )
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModGFU_FORMAT_SETUP  SUCCESS \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModGFU_FORMAT_SETUP  FAILURE \n",NULL,p_intlenv_data_struct_h);
			   int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			free(l_mt_gfu_format_setup_struct_h);
		}

		else if (strcmp(chr_h_func_name,"wrp_MTUpdGfuExcelSetupFn") == 0)
		{
			INTL_WARNING;
			l_mt_gfu_excel_setup_struct_h = (MT_GFU_EXCEL_SETUP_STRUCT_H *)calloc(1,sizeof(MT_GFU_EXCEL_SETUP_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_mt_gfu_excel_setup_struct_h);
			memset(l_mt_gfu_excel_setup_struct_h,NULL,sizeof(MT_GFU_EXCEL_SETUP_STRUCT_H));

			int_ret_val = Populate_MT_GFU_EXCEL_SETUP(l_mt_gfu_excel_setup_struct_h,chr_h_param_str);
			CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_ModGfu_Excel_SETUP \n",NULL,p_intlenv_data_struct_h);
			if((MT_ModGfu_Excel_SETUP (l_mt_gfu_excel_setup_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) )
			{
				//CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModGfu_Excel_SETUP  SUCCESS \n",NULL,p_intlenv_data_struct_h);
				Batch_Proc_GridVenMarkSuccessProcss(h_ora_rowid,chr_l_return_value,l_mt_gfu_excel_setup_struct_h->h_access_stamp);
			}
			else
				//CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModGfu_Excel_SETUP  FAILURE \n",NULL,p_intlenv_data_struct_h);
int_ret_val=Proc_MarkFailProcess(h_ora_rowid,l_debug_info_ptr);


			free(l_mt_gfu_excel_setup_struct_h);
		}
        else
           l_flg_func = 0;      /* set flag as 0 for non availablity function   */



		if (strcmp(chr_h_func_name,"wrp_MTUpdGfuCsvSetupFn") == 0)
		{
			INTL_WARNING;
			l_mt_gfu_csv_setup_struct_h = (MT_GFU_CSV_SETUP_STRUCT_H *)calloc(1,sizeof(MT_GFU_CSV_SETUP_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_mt_gfu_csv_setup_struct_h);
			memset(l_mt_gfu_csv_setup_struct_h,NULL,sizeof(MT_GFU_CSV_SETUP_STRUCT_H));

			int_ret_val = Populate_MT_GFU_CSV_SETUP(l_mt_gfu_csv_setup_struct_h,chr_h_param_str);
			CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_ModGfu_Csv_SETUP \n",NULL,p_intlenv_data_struct_h);
			if((MT_ModGfu_Csv_SETUP (l_mt_gfu_csv_setup_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) )
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModGfu_Csv_SETUP  SUCCESS \n",NULL,p_intlenv_data_struct_h);
				Batch_Proc_GridVenMarkSuccessProcss(h_ora_rowid,chr_l_return_value,l_mt_gfu_csv_setup_struct_h->h_access_stamp);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModGfu_Csv_SETUP  FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			free(l_mt_gfu_csv_setup_struct_h);
            l_flg_func = 1;
		}

		else if (strcmp(chr_h_func_name,"wrp_MTUpdGfuTxtSetupFn") == 0)
		{
			INTL_WARNING;
			l_mt_gfu_txt_setup_struct_h = (MT_GFU_TXT_SETUP_STRUCT_H *)calloc(1,sizeof(MT_GFU_TXT_SETUP_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_mt_gfu_txt_setup_struct_h);
			memset(l_mt_gfu_txt_setup_struct_h,NULL,sizeof(MT_GFU_TXT_SETUP_STRUCT_H));

			int_ret_val = Populate_MT_GFU_TXT_SETUP(l_mt_gfu_txt_setup_struct_h,chr_h_param_str);
			CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_ModGfu_Txt_SETUP \n",NULL,p_intlenv_data_struct_h);
			if((MT_ModGfu_Txt_SETUP (l_mt_gfu_txt_setup_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) )
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModGfu_Txt_SETUP  SUCCESS \n",NULL,p_intlenv_data_struct_h);
				Batch_Proc_GridVenMarkSuccessProcss(h_ora_rowid,chr_l_return_value,l_mt_gfu_txt_setup_struct_h->h_access_stamp);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModGfu_Txt_SETUP  FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			free(l_mt_gfu_txt_setup_struct_h);
            l_flg_func = 1;
		}

		/* Sundar - HDFCMT_GFU - Vendor Maintenance ********************************** */
		
      /* Bageshri - MT Party Fund Details 27/04/06 */

		else if (strcmp(chr_h_func_name,"wrp_MTUpdPartyFundDetFn") == 0)
		{
			INTL_WARNING;
			l_mt_pty_fund_det_struct_h = (MT_PTY_FUND_DET_STRUCT_H *)calloc(1,sizeof(MT_PTY_FUND_DET_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_mt_pty_fund_det_struct_h);
			memset(l_mt_pty_fund_det_struct_h,NULL,sizeof(MT_PTY_FUND_DET_STRUCT_H));

			int_ret_val = MT_PtyFundDetPopulate(l_mt_pty_fund_det_struct_h,chr_h_param_str);
			CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_ModPtyFundDet \n",NULL,p_intlenv_data_struct_h);
			if((MT_ModPtyFundDet (l_mt_pty_fund_det_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) )
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModPtyFundDet SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
			   CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_ModPtyFundDet FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			free(l_mt_pty_fund_det_struct_h);
            l_flg_func = 1;
		}
                    

      /* Bageshri - MT Party Fund Details 27/04/06 */

		/*	Margin Upload by Rohit	11/04/2008	*/

		if (strcmp(chr_h_func_name,"wrp_VARELM_UPLOAD_NSE") == 0)
		{
			INTL_WARNING;
			l_varelm_upload_nse_struct_h = (VARELM_UPLOAD_NSE_STRUCT_H *)calloc(1,sizeof(VARELM_UPLOAD_NSE_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_varelm_upload_nse_struct_h);
			memset(l_varelm_upload_nse_struct_h,NULL,sizeof(VARELM_UPLOAD_NSE_STRUCT_H));

			int_ret_val = MT_VarlemUploadNsePopulate(l_varelm_upload_nse_struct_h,chr_h_param_str);
			CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_VarlemUploadNse \n",NULL,p_intlenv_data_struct_h);
			if((MT_VarlemUploadNse(l_varelm_upload_nse_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) )
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from VARELM_UPLOAD_NSE SUCCESS \n",NULL,NULL);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_h_error_desc);
			}
			else
			{

				/* CO_ProcMonitor(APL_OUT_FILE,"Returned from VARELM_UPLOAD_NSE FAILURE \n",NULL,NULL); */
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			free(l_varelm_upload_nse_struct_h);
			l_flg_func = 1;
		}

		if (strcmp(chr_h_func_name,"wrp_VARELM_UPLOAD_BSE") == 0)
		{
			INTL_WARNING;
			l_varelm_upload_bse_struct_h = (VARELM_UPLOAD_BSE_STRUCT_H *)calloc(1,sizeof(VARELM_UPLOAD_BSE_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_varelm_upload_bse_struct_h);
			memset(l_varelm_upload_bse_struct_h,NULL,sizeof(VARELM_UPLOAD_BSE_STRUCT_H));

			int_ret_val = MT_VarlemUploadBsePopulate(l_varelm_upload_bse_struct_h,chr_h_param_str);
			CO_ProcMonitor(APL_OUT_FILE,"Now calling MT_VarlemUploadBse \n",NULL,p_intlenv_data_struct_h);
			if((MT_VarlemUploadBse(l_varelm_upload_bse_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) )
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from VARELM_UPLOAD_BSE SUCCESS \n",NULL,NULL);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_h_error_desc);
			}
			else
			{

				/* CO_ProcMonitor(APL_OUT_FILE,"Returned from VARELM_UPLOAD_BSE FAILURE \n",NULL,NULL); */
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			free(l_varelm_upload_nse_struct_h);
			l_flg_func = 1;
		}



      /* Error Fix to solve STACK Error - To check whether function has been called */

	  Alert("l_flg_func :|%d|\n",l_flg_func);
	  Alert("--- Covid 19 BCP Test for Icustody Support-kotak done successfully ---");

      if(l_flg_func == 0)
      {
			INTL_WARNING
         int_ret_val = CO_InsertErr(l_debug_info_ptr,
                                    FUNC_NF,
                                    APL_NULL_STRING,
                                    APL_NULL_STRING,
                                    APL_NULL_STRING,
                                    __LINE__,
                                    __FILE__);
         int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
      }

      //free(p_intlenv_data_struct_h);
	  free(chr_h_error_desc);
	  //CO_FreeErrLst(l_debug_info_ptr);	
	}

   APL_GOBACK_SUCCESS;

RETURN_SUCCESS:

         CO_ProcMonitor(APL_OUT_FILE,"before commit exit\n",NULL,p_intlenv_data_struct_h);
   EXEC SQL COMMIT ;
         CO_ProcMonitor(APL_OUT_FILE,"After commit exit\n",NULL,p_intlenv_data_struct_h);
        CO_ProcMonitor(APL_OUT_FILE,"Exiting successfully  out of Maintenance Daemon\n",l_debug_info_ptr,NULL);
        fclose(chr_finifile);
        exit(0);

RETURN_FAILURE:
   EXEC SQL ROLLBACK;
        CO_ProcMonitor(APL_OUT_FILE,"Exiting unsuccesfully out of Maintenance Daemon\n",NULL,NULL);
        fclose(chr_finifile);
        exit(-1);
}

/**************HDFCMT_GFU - Sundar - Vendor Maintenance ************************************************/

int Batch_Proc_GridVenMarkSuccessProcss(char *p_ora_rowid,char *p_return_value,char *p_access_stamp)
{
	char l_data_fld_sep_str[2]      =     APL_NULL_STRING;
	sprintf(l_data_fld_sep_str,"%c",DATA_FIELD_SEPRTR);
	strcat(l_data_fld_sep_str,APL_NULL_STRING);
	short int_ret_val  =  0;

	EXEC SQL UPDATE PRO_REQUEST_MT set STATUS = '2',ERROR_DET='SUCCESS'||:p_return_value||:l_data_fld_sep_str||:p_access_stamp||:l_data_fld_sep_str
		where rowid=:p_ora_rowid;
	IS_ANY_ORA_ERROR;

	CO_ProcMonitor(APL_OUT_FILE,"before commit successup\n",NULL,NULL);
	EXEC SQL COMMIT ;
	CO_ProcMonitor(APL_OUT_FILE,"after commit successup\n",NULL,NULL);
	IS_ANY_ORA_ERROR;

	int_ret_val = APL_SUCCESS;
	S_NON_DCE_ERASE_DUMMY_WARNING;

APL_GOBACK_SUCCESS//AIX Warning Removal
RETURN_SUCCESS :
	return(APL_SUCCESS);

RETURN_FAILURE :
	return(APL_FAILURE);
}

 /**************HDFCMT_GFU - Sundar - Vendor Maintenance ************************************************/


int Batch_Proc_MarkSuccessProcess(char *p_ora_rowid,char *p_return_value)
{
	short int_ret_val  =  0;

	EXEC SQL UPDATE PRO_REQUEST_MT set STATUS = '2',ERROR_DET='SUCCESS'||:p_return_value
	where rowid=:p_ora_rowid;
	IS_ANY_ORA_ERROR;

         CO_ProcMonitor(APL_OUT_FILE,"before commit successup\n",NULL,NULL);
	EXEC SQL COMMIT ;
         CO_ProcMonitor(APL_OUT_FILE,"after commit successup\n",NULL,NULL);
	IS_ANY_ORA_ERROR;

	int_ret_val = APL_SUCCESS;
	S_NON_DCE_ERASE_DUMMY_WARNING;

APL_GOBACK_SUCCESS//AIX Warning Removal
RETURN_SUCCESS :
	return(APL_SUCCESS);

RETURN_FAILURE :
	return(APL_FAILURE);
}

/* Kouser - HDFCMT_001 - Client Master Maintenance */

 int Batch_Proc_GridMarkSuccessProcess(char *p_ora_rowid,char *p_return_value,int p_seq_num,char *p_access_stamp)
{
  char l_data_fld_sep_str[2]      =     APL_NULL_STRING;
  sprintf(l_data_fld_sep_str,"%c",DATA_FIELD_SEPRTR);
  strcat(l_data_fld_sep_str,APL_NULL_STRING);
  short int_ret_val  =  0;

EXEC SQL UPDATE PRO_REQUEST_MT set STATUS = '2',ERROR_DET='SUCCESS'||:p_return_value||:l_data_fld_sep_str||:p_seq_num||:l_data_fld_sep_str||:p_access_stamp||:l_data_fld_sep_str
        where rowid=:p_ora_rowid;
        IS_ANY_ORA_ERROR;

         CO_ProcMonitor(APL_OUT_FILE,"before commit successup\n",NULL,NULL);
        EXEC SQL COMMIT ;
         CO_ProcMonitor(APL_OUT_FILE,"after commit successup\n",NULL,NULL);
        IS_ANY_ORA_ERROR;

        int_ret_val = APL_SUCCESS;
        S_NON_DCE_ERASE_DUMMY_WARNING;

APL_GOBACK_SUCCESS//AIX Warning Removal
RETURN_SUCCESS :
        return(APL_SUCCESS);

RETURN_FAILURE :
        return(APL_FAILURE);
}

/* Kouser - HDFCMT_001 - Client Master Maintenance */

/* Kouser - HDFCMT_010 - Client Master Maintenance */
int Batch_Proc_AccMarkSuccessProcess(char *p_ora_rowid,char *p_return_value,char *p_access_stamp)
{
  char l_data_fld_sep_str[2]      =     APL_NULL_STRING;
  sprintf(l_data_fld_sep_str,"%c",DATA_FIELD_SEPRTR);
  strcat(l_data_fld_sep_str,APL_NULL_STRING);
  short int_ret_val  =  0;


  EXEC SQL UPDATE PRO_REQUEST_MT set STATUS = '2',ERROR_DET='SUCCESS'||:p_return_value||:l_data_fld_sep_str||:p_access_stamp||:l_data_fld_sep_str
        where rowid=:p_ora_rowid;
        IS_ANY_ORA_ERROR;

        CO_ProcMonitor(APL_OUT_FILE,"before commit successup\n",NULL,NULL);
        EXEC SQL COMMIT ;
        CO_ProcMonitor(APL_OUT_FILE,"after commit successup\n",NULL,NULL);
        IS_ANY_ORA_ERROR;

        int_ret_val = APL_SUCCESS;
        S_NON_DCE_ERASE_DUMMY_WARNING;

APL_GOBACK_SUCCESS//AIX Warning Removal
RETURN_SUCCESS :
        return(APL_SUCCESS);

RETURN_FAILURE :
        return(APL_FAILURE);
}  

/* Kouser - HDFCMT_010 - Client Master Maintenance */


int Proc_MarkFailProcess(char *p_ora_rowid, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   short int_ret_val  =  0;

   EXEC SQL ROLLBACK ;
   IS_ANY_ORA_ERROR;

   int_ret_val = APL_FAILURE;


   int_ret_val = CO_Rtv_ErrString(l_debug_info_ptr,chr_h_error_desc);
   S_NON_DCE_ERASE_DUMMY_WARNING;	/*	Replace Dummy Warning after ErrString	*/

   if(strlen(chr_h_error_desc)>0)
   {
     EXEC SQL update  PRO_REQUEST_MT set STATUS = '3',ERROR_DET=:chr_h_error_desc
					      where rowid=:p_ora_rowid;
   }
   else
   {
     EXEC SQL update  PRO_REQUEST_MT set STATUS = '2',ERROR_DET='SUCCESS'
					      where rowid=:p_ora_rowid;
   }

  IS_ANY_ORA_ERROR;

   EXEC SQL COMMIT;
   IS_ANY_ORA_ERROR;

   strcpy(chr_h_error_desc,APL_NULL_STRING);

   S_NON_DCE_ERASE_DUMMY_WARNING;

APL_GOBACK_SUCCESS//AIX Warning Removal
RETURN_SUCCESS :
   return(APL_SUCCESS);

RETURN_FAILURE :
   return(APL_FAILURE);
}

/* Pradeep - HDFCMT_004 - Party Master */

int Batch_Proc_PtyGridMarkSuccessProcess(char *p_ora_rowid,char *p_return_value,char *p_access_stamp)
{
	char l_data_fld_sep_str[2]      =     APL_NULL_STRING;
	sprintf(l_data_fld_sep_str,"%c",DATA_FIELD_SEPRTR);
	strcat(l_data_fld_sep_str,APL_NULL_STRING);
	short int_ret_val  =  0;

	EXEC SQL UPDATE PRO_REQUEST_MT set STATUS = '2',ERROR_DET='SUCCESS'||:p_return_value||:l_data_fld_sep_str||:p_access_stamp||:l_data_fld_sep_str
		where rowid=:p_ora_rowid;
	IS_ANY_ORA_ERROR;

	CO_ProcMonitor(APL_OUT_FILE,"before commit successup\n",NULL,NULL);
	EXEC SQL COMMIT ;
	CO_ProcMonitor(APL_OUT_FILE,"after commit successup\n",NULL,NULL);
	IS_ANY_ORA_ERROR;

	int_ret_val = APL_SUCCESS;
	S_NON_DCE_ERASE_DUMMY_WARNING;
APL_GOBACK_SUCCESS//AIX Warning Removal
RETURN_SUCCESS :
	return(APL_SUCCESS);

RETURN_FAILURE :
	return(APL_FAILURE);
}

/* Pradeep - HDFCMT_004 - Party Master */
