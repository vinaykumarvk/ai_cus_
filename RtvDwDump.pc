













 

#include "CO_HostStructdef.h"
#include "Intellect_Common.h"
#include "IV_Control_A.h"
#include <string.h>
#include "stdio_64.h"
#include <stdlib.h>
#include <math.h>

#define MT_INSTRUMENT  	"SE" 
#define MT_CLIENT   	"CU"
#define DL_SAFEK	"PO" 
#define DLY_MKT_PRICE	"MP" 
#define DL_DEAL      	"TX"
#define CAREPLY		"RE" 
#define CACHEQUE		"PY" 
#define CANOTE 	"NT"
#define CAEVENT			"EV" 
#define CA_ENTL_IND	"EN" 


#define MAX_ITEMS        10 


#define MAX_VNAMERR_LEN     30
#define MAX_INAMERR_LEN     30


EXEC SQL INCLUDE SQLCA;
EXEC SQL INCLUDE SQLDA;

SQLDA *bind_dp;
SQLDA *select_dp;

extern SQLDA *sqlald();
extern void sqlnul();
char chr_h_all_view_name[30][30];
char chr_h_sel_msg_stmt[9000];
int int_h_num_of_views = 0;

typedef struct{
char detail[36];
}note_desc;



int EI_Proc_DWDescAlloc(int, int , int,DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

int EI_Rtv_DWSelect(FILE *,DEBUG_INFO_STRUCT_H **l_debug_info_ptr);//AIX -Warning Removal

int EI_Proc_DWSqlStat(char *p_sel_msg_stmt,FILE *l_data_file,int *int_p_retstat,DEBUG_INFO_STRUCT_H **l_debug_info_ptr);
void EI_Rtv_DWDumpFlName(char *p_dump_file,char *p_view_name,char *p_header);

//main(int argc,char **argv)
int main(int argc,char **argv)//Changes done for AIX Migration
{
	struct sqlca sqlca;

   DEBUG_INFO_STRUCT_H **l_debug_info_ptr=NULL ;
	FILE *l_finifile;

	char chr_sql_string[500];
	char *chr_h_sel_msg_stmt;
	char info_file[200];
	int i=0,int_retstat=0;
	FILE *fp = NULL;

   int int_l_retval=0;
	int int_num = 0;
	SYS_BATCHPROC_STRUCT_H l_sys_batchproc_struct_h;
	char chr_h_batch_in_proc_rowid[APL_ROWID_LEN];
   char chr_uname[APL_USERID_LEN] 	= APL_NULL_STRING;
   char chr_passwd[APL_PASSWD_LEN] 	= APL_NULL_STRING;
   char chr_custody_id_b[APL_USERID_LEN] 	= APL_NULL_STRING;
	char chr_l_logdir[PATH_LENGTH] 	= APL_NULL_STRING;
	char chr_l_logname[PATH_LENGTH] 	= APL_NULL_STRING;
	char chr_l_inifile[PATH_LENGTH] 	= APL_NULL_STRING;
	char chr_view_name[50] = APL_NULL_STRING;
	char chr_path[PATH_LENGTH] = APL_NULL_STRING;
	char chr_path_bak[PATH_LENGTH] = APL_NULL_STRING;
	char chr_dump_file[50] = APL_NULL_STRING;
	char chr_header[50] = APL_NULL_STRING;
	char int_l_no_of_record[7] = APL_NULL_STRING;
	FILE *fp_UserLog = (FILE *)NULL;
	FILE *l_flogfile = NULL;
	short int int_i_batch_in_proc_rowid = 0;
	SYS_BATCHPROC_STRUCT_I l_sys_batchproc_struct_i = {0, 0, 0, 0, 0, 0};
	INTL_ENV_DATA_STRUCT_H l_intl_env_data_h;
	char chr_l_logpath[PATH_LENGTH];

   EXEC SQL VAR chr_uname IS STRING;
   EXEC SQL VAR chr_passwd IS STRING;
   EXEC SQL VAR chr_view_name IS STRING;
   EXEC SQL VAR int_l_no_of_record IS STRING;
	
	EXEC SQL VAR l_sys_batchproc_struct_h.process_name IS STRING;
	EXEC SQL VAR l_sys_batchproc_struct_h.start_dt IS STRING; /* Bageshri -- 10GM */
	EXEC SQL VAR l_sys_batchproc_struct_h.proc_init IS STRING;
	EXEC SQL VAR l_sys_batchproc_struct_h.status_ind IS STRING;
	EXEC SQL VAR l_sys_batchproc_struct_h.usr IS STRING;

	memset(l_sys_batchproc_struct_h.process_name, APL_NULL_CHAR, 41);
	memset(l_sys_batchproc_struct_h.proc_init, APL_NULL_CHAR, 41);
	memset(l_sys_batchproc_struct_h.status_ind, APL_NULL_CHAR, 11);
	memset(l_sys_batchproc_struct_h.start_dt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_sys_batchproc_struct_h.usr, APL_NULL_CHAR, APL_USERID_LEN);

	
	strcpy(l_sys_batchproc_struct_h.process_name,argv[0]);
	strcpy(l_sys_batchproc_struct_h.proc_init,argv[1]);
	strcpy(l_sys_batchproc_struct_h.start_dt,argv[2]);
	strcpy(l_sys_batchproc_struct_h.status_ind, "started");
	strcpy(l_sys_batchproc_struct_h.usr, argv[3]);
	

	
	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

	if ( ( l_finifile=fopen(chr_l_inifile,"r") ) == NULL)
	{
		printf("\nNot able to open the intl_sun.cfg h_file\n");
		exit(-1);
	}
  	APL_FETCH_DB_LOGIN_DETAILS(l_finifile, chr_custody_id_b, chr_uname, chr_passwd ,APL_OUT_FILE,l_debug_info_ptr)
   EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;
   IS_ANY_ORA_ERROR

	EXEC SQL SELECT ROWID, PROCESS_NAME, STARTDATE, STATUS,
				PROC_INIT, PROCESSING_STATUS, USR, EOD_BOD_IND, STAT_DET
			 INTO :chr_h_batch_in_proc_rowid:int_i_batch_in_proc_rowid,
				 :l_sys_batchproc_struct_h INDICATOR :l_sys_batchproc_struct_i
			 FROM SYS_BATCHPROC
			WHERE ((PROCESS_NAME = :l_sys_batchproc_struct_h.process_name) AND
					(STARTDATE = :l_sys_batchproc_struct_h.start_dt) AND /* Bageshri -- 10GM */
					(STATUS = :l_sys_batchproc_struct_h.status_ind)) AND
					(PROC_INIT = :l_sys_batchproc_struct_h.proc_init)
			 FOR UPDATE OF PROCESSING_STATUS;

   IS_ANY_ORA_ERROR

	if(CO_ReadToken(l_finifile,"INTL_DQ_HF_PATH",chr_path,l_debug_info_ptr) == APL_FAILURE)
		{
			CO_InsertErr(l_debug_info_ptr,ERR_FILE_NOTFND, APL_NULL_STRING,
																APL_NULL_STRING,
																APL_NULL_STRING, __LINE__, __FILE__);
			APL_GOBACK_FAIL;
		}

	printf("\n The chr_path name is : %s\n",chr_path); 

	if ( APL_FAILURE == CO_Rtv_RptFileName("3g", APL_LOGFILE_DESC, 100,
												argv[5], argv, &fp_UserLog,
												 l_debug_info_ptr) )
	 {
			 printf("Could not open User Log h_file.\n");
			 APL_GOBACK_FAIL
	 }

	EXEC SQL COMMIT;
	IS_ANY_ORA_ERROR
		

	

	if (fclose(l_finifile)) 
	{
		exit(-1);
	}

   
      

   else
		{
		

	if (APL_FAILURE == CO_RtvSysParams(l_debug_info_ptr))
		{
			CO_ProcMonitor(fp_UserLog, "Could not get system params", l_debug_info_ptr, NULL);
			APL_GOBACK_FAIL
		}


		CO_ProcMonitor(fp_UserLog, "\nIn the processtion EI_Proc_DWSqlStat ", NULL, NULL);
		fp  = (FILE *)NULL; 
		
		strcpy(chr_sql_string,"select chr_view_name from all_views where chr_view_name like 'DW_%' and chr_owner ='APP71ADMIN' order by chr_view_name desc");
		int_l_retval=0;
		int_l_retval=EI_Proc_DWSqlStat(chr_sql_string,fp,&int_retstat,l_debug_info_ptr);
      if ( int_l_retval == APL_FAILURE )
      {
			CO_ProcMonitor(fp_UserLog, "\nIExecSQL returned failure while selecting for the view_name", NULL, NULL);
         APL_GOBACK_FAIL
      }
		else
		{
			CO_ProcMonitor(fp_UserLog, "\nIExecSQL returned success while selecting for the view_name", NULL, NULL);
		}
	strcpy(chr_path_bak,chr_path);

		CO_ProcMonitor(fp_UserLog, "\nStarting to get the data from individual tables", NULL, NULL);
for(i=0;i < int_h_num_of_views;i++)
	{
	strcpy(chr_view_name,chr_h_all_view_name[i]);
	memset(chr_dump_file,APL_NULL_CHAR,50);
	strcpy(chr_dump_file,"");
	EI_Rtv_DWDumpFlName(chr_dump_file,chr_view_name,chr_header);
	strcpy(chr_path,chr_path_bak);
	strcat(chr_path,chr_dump_file);
	fp = fopen(chr_path,"w+");

		if ( fp  == (FILE *)NULL )
	{
			printf("Could not open h_file 2 write 2\n");
					APL_GOBACK_FAIL
	}
	fprintf(fp_UserLog,"\nSuccessfully got the h_file name & Path for dumping : %s",chr_view_name);
	sprintf(chr_sql_string,"select * from %s",chr_view_name);
		int_l_retval=0;
		fprintf(fp,"HEADER%s\n",chr_header);
		int_l_retval=EI_Proc_DWSqlStat(chr_sql_string,fp,&int_retstat,l_debug_info_ptr);

   fprintf(fp_UserLog,"\n Successfully got the dump from :%s",chr_view_name);
/* Sana	if (strcmp(chr_view_name,"DW_AENTITL_VEW")==0)
		EXEC SQL select lpad(to_char(COUNT(*)),6,'0')
			   into :int_l_no_of_record
				from DW_CAENTITLMENT_VEW;*/
	fprintf(fp_UserLog,"\n 229 sqlca.sqlcode: %d",sqlca.sqlcode);

/* Sana	if (strcmp(chr_view_name,"DW_AEVENT_VEW")==0)
		EXEC SQL select lpad(to_char(COUNT(*)),6,'0')
			   into :int_l_no_of_record
				from DW_CAEVENT_VEW; */
	fprintf(fp_UserLog,"\n 235 sqlca.sqlcode: %d",sqlca.sqlcode);

	if (strcmp(chr_view_name,"DW_AFOOTNOTE_VEW")==0)
		EXEC SQL select lpad(to_char(COUNT(*)),6,'0')
			   into :int_l_no_of_record
				from DW_CANOTE_VEW;
	fprintf(fp_UserLog,"\n 242 sqlca.sqlcode: %d",sqlca.sqlcode);

	if (strcmp(chr_view_name,"DW_APAYMENT_VEW")==0)
		EXEC SQL select lpad(to_char(COUNT(*)),6,'0')
			   into :int_l_no_of_record
				from DW_CACHEQUE_VEW;
	fprintf(fp_UserLog,"\n 248 sqlca.sqlcode: %d",sqlca.sqlcode);

	if (strcmp(chr_view_name,"DW_ARESPONSE_VEW")==0)
		EXEC SQL select lpad(to_char(COUNT(*)),6,'0')
			   into :int_l_no_of_record
				from DW_ARESPONSE_VEW;
	fprintf(fp_UserLog,"\n 254 sqlca.sqlcode: %d",sqlca.sqlcode);

	if (strcmp(chr_view_name,"DW_CACCOUNT_VEW")==0)
		EXEC SQL select lpad(to_char(COUNT(*)),6,'0')
			   into :int_l_no_of_record
				from DW_MTCLIENT_VEW;
	fprintf(fp_UserLog,"\n 260 sqlca.sqlcode: %d",sqlca.sqlcode);

	if (strcmp(chr_view_name,"DW_CSAFEK_VEW")==0)
		EXEC SQL select lpad(to_char(COUNT(*)),6,'0')
			   into :int_l_no_of_record
				from DW_DLSAFEK_VEW;
	fprintf(fp_UserLog,"\n 266 sqlca.sqlcode: %d",sqlca.sqlcode);
	
	if (strcmp(chr_view_name,"DW_INSTRUMENT_VEW")==0)
		EXEC SQL select lpad(to_char(COUNT(*)),6,'0')
			   into :int_l_no_of_record
				from DW_MTINSTRUMENT_VEW;
	fprintf(fp_UserLog,"\n 271 sqlca.sqlcode: %d",sqlca.sqlcode);

	if (strcmp(chr_view_name,"DW_CTRADE_VEW")==0)
		EXEC SQL select lpad(to_char(COUNT(*)),6,'0')
			   into :int_l_no_of_record
				from DW_DLDEAL_VEW;
	fprintf(fp_UserLog,"\n 277 sqlca.sqlcode: %d",sqlca.sqlcode);

	if (strcmp(chr_view_name,"DW_DAILY_MKT_PRICE_VEW")==0)
		EXEC SQL select lpad(to_char(COUNT(*)),6,'0')
			   into :int_l_no_of_record
				from DW_MTDAILY_MKT_PRICE_VEW;
	fprintf(fp_UserLog,"\n 283 sqlca.sqlcode: %d",sqlca.sqlcode);
	fprintf(fp_UserLog,"\nSuccessfully got the footer.");
		fprintf(fp,"TRAIL%s\n",int_l_no_of_record);	
		fclose(fp); 
      if ( int_l_retval == APL_FAILURE )
      {
			CO_ProcMonitor(fp_UserLog, "IExecSQL returned failure", NULL, NULL);
         APL_GOBACK_FAIL
      }
	}	
		
		
		
         EXEC SQL UPDATE SYS_BATCHPROC
         SET  status = 'completed'
         WHERE rowid = :chr_h_batch_in_proc_rowid; 
			
			fprintf(fp_UserLog,"\n 300 sqlca.sqlcode: %d",sqlca.sqlcode);	

			if (sqlca.sqlcode)
			{
				CO_ProcMonitor(fp_UserLog, "updated batch_in_proc", NULL, NULL);
			}
			if (sqlca.sqlcode != 0)
			{
				CO_ProcMonitor(fp_UserLog, "Could not update batch_in_proc", NULL, NULL);
				APL_GOBACK_FAIL
			}
			

         EXEC SQL COMMIT WORK RELEASE;
			fprintf(fp_UserLog,"\n 314 sqlca.sqlcode: %d",sqlca.sqlcode);
			if (sqlca.sqlcode)
			{
				CO_ProcMonitor(fp_UserLog, "Could not do final commit", NULL, NULL);
				APL_GOBACK_FAIL
			}

         APL_GOBACK_SUCCESS
  }

	RETURN_SUCCESS :
		 fclose(fp_UserLog); 
		exit(0);

	RETURN_FAILURE :
		fclose(fp_UserLog); 
		exit(1);
}


void EI_Rtv_DWDumpFlName(char *p_dump_file,char *p_view_name,char *p_header)
{
	struct sqlca sqlca;
	char chr_l_event_type[3] = APL_NULL_STRING;
	char chr_l_country_code[4] = APL_NULL_STRING;
	char chr_l_system_date[20]  = APL_NULL_STRING;
	char chr_l_dump_file[50] = APL_NULL_STRING;
	char chr_l_view_name[50] = APL_NULL_STRING;
	char chr_l_header[50] = APL_NULL_STRING;

	int int_l_fname_len;
	EXEC SQL BEGIN DECLARE SECTION;
	
		EXEC SQL VAR chr_l_country_code IS STRING;
		EXEC SQL VAR chr_l_system_date IS STRING;

	EXEC SQL END DECLARE SECTION;


	strcpy(chr_l_view_name,p_view_name);
	if (strcmp(chr_l_view_name,"DW_AENTITL_VEW")==0)
		strcpy(chr_l_event_type,CA_ENTL_IND);
	else if (strcmp(chr_l_view_name,"DW_AEVENT_VEW")==0)
		strcpy(chr_l_event_type,CAEVENT);
	else if (strcmp(chr_l_view_name,"DW_AFOOTNOTE_VEW")==0)
		strcpy(chr_l_event_type,CANOTE);
   else if (strcmp(chr_l_view_name,"DW_APAYMENT_VEW")==0)
		strcpy(chr_l_event_type,CACHEQUE);
	else if (strcmp(chr_l_view_name,"DW_ARESPONSE_VEW")==0)
		strcpy(chr_l_event_type,CAREPLY);
	else if (strcmp(chr_l_view_name,"DW_CACCOUNT_VEW")==0)
		strcpy(chr_l_event_type,MT_CLIENT);
	else if (strcmp(chr_l_view_name,"DW_CSAFEK_VEW")==0)
		strcpy(chr_l_event_type,DL_SAFEK);
	else if (strcmp(chr_l_view_name,"DW_INSTRUMENT_VEW")==0)
		strcpy(chr_l_event_type,MT_INSTRUMENT);
 	else if (strcmp(chr_l_view_name,"DW_CTRADE_VEW")==0)
		strcpy(chr_l_event_type,DL_DEAL);
	else if (strcmp(chr_l_view_name,"DW_DAILY_MKT_PRICE_VEW")==0)
		strcpy(chr_l_event_type,DLY_MKT_PRICE);

	EXEC SQL select NATION_CODE 
				into :chr_l_country_code
				from MT_COMMON_SYS_PARAMS;
	EXEC SQL select SYS_DATE
			  into  :chr_l_system_date
			   FROM PRO_SYS_DATE;

	strcpy(chr_l_dump_file,chr_l_country_code);
	strcat(chr_l_dump_file,chr_l_event_type);
	int_l_fname_len=strlen(chr_l_dump_file);
	chr_l_dump_file[int_l_fname_len++]=chr_l_system_date[0];
   chr_l_dump_file[int_l_fname_len++]=chr_l_system_date[1];
   chr_l_dump_file[int_l_fname_len++]=chr_l_system_date[3];
	chr_l_dump_file[int_l_fname_len++]=chr_l_system_date[4];
   chr_l_dump_file[int_l_fname_len]='\0';
	strcat(chr_l_dump_file,".SMA");

	strcpy(chr_l_header,chr_l_country_code);
	strcat(chr_l_header,"SEDL");
	
	EXEC SQL select substr(to_char(SYS_DATE),1,10) 
			  into  :chr_l_system_date
			   FROM PRO_SYS_DATE;
	strcat(chr_l_header,chr_l_system_date);
	strcat(chr_l_header,"SMAC2000");
	strcat(chr_l_header,chr_l_event_type); 
	
	strcpy(p_header,chr_l_header);
	strcpy(p_dump_file,chr_l_dump_file);


}



int EI_Proc_DWSqlStat(char *p_sel_msg_stmt,FILE *l_data_file,int *int_p_retstat,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

struct sqlca sqlca;

int i=0,int_returnval = 0;
#ifdef APL_THREADS
        APL_SET_CONTEXT
        EXEC SQL CONTEXT USE :my_ctx_local;
#endif
memset(chr_h_sel_msg_stmt,APL_NULL_CHAR,9000);
if (EI_Proc_DWDescAlloc( MAX_ITEMS, MAX_VNAMERR_LEN, MAX_INAMERR_LEN,l_debug_info_ptr) != APL_SUCCESS)
       APL_GOBACK_FAIL; 


strcpy(chr_h_sel_msg_stmt,p_sel_msg_stmt);

	printf("%s",chr_h_sel_msg_stmt);

   	EXEC SQL PREPARE S FROM :chr_h_sel_msg_stmt;

	IS_ANY_ORA_ERROR


   	EXEC SQL DECLARE sel_data_cur CURSOR FOR S;

       

        EXEC SQL OPEN sel_data_cur  USING DESCRIPTOR bind_dp;

        IS_ANY_ORA_ERROR
        

        

         int_returnval = 0;
         int_returnval = EI_Rtv_DWSelect(l_data_file,l_debug_info_ptr);

        for (i = 0; i < MAX_ITEMS; i++)
        {
            if (bind_dp->V[i] != (char *) 0)
               free(bind_dp->V[i]);
            free(bind_dp->I[i]);   
            if (select_dp->V[i] != (char *) 0)
                free(select_dp->V[i]);
            free(select_dp->I[i]); 
        }

    	
    	sqlclu(bind_dp);
    	sqlclu(select_dp);

    	
    	EXEC SQL CLOSE sel_data_cur;
        if(int_returnval == APL_FAILURE)
		APL_GOBACK_FAIL
        else
		APL_GOBACK_SUCCESS
                
  
RETURN_SUCCESS:

        APL_IF_DEBUG
        {
                CO_ProcMonitor(APL_OUT_FILE,"Exiting successfully \n",NULL,NULL);

        }
        return APL_SUCCESS;

RETURN_FAILURE:
        APL_IF_DEBUG
        {
                CO_ProcMonitor(APL_OUT_FILE,"Exiting unsuccesfully\n",NULL,NULL);
        }
        return APL_FAILURE;



}






int EI_Proc_DWDescAlloc(int size, int  max_vname_len, int  max_iname_len,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)

{
    int i;

#ifdef APL_THREADS
        APL_SET_CONTEXT
        EXEC SQL CONTEXT USE :my_ctx_local;
#endif

    

    if ((bind_dp =
            sqlald(size, max_vname_len, max_iname_len)) == (SQLDA *) 0)
    {
 
        return APL_FAILURE;

    }

    if ((select_dp =
        sqlald (size, max_vname_len, max_iname_len)) == (SQLDA *) 0)
    {

        return APL_FAILURE;
    }
    select_dp->N = MAX_ITEMS;

    
    for (i = 0; i < MAX_ITEMS; i++) {
        bind_dp->I[i] = (short *) malloc(sizeof (short));
        select_dp->I[i] = (short *) malloc(sizeof(short));
        bind_dp->V[i] = (char *) malloc(1);
        select_dp->V[i] = (char *) malloc(1);
    }

    return APL_SUCCESS;


}

int EI_Rtv_DWSelect(FILE * l_data_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr) //Changes done for AIX Migration
{
	struct sqlca sqlca;

    int i,j, int_null_ok, int_precision, int_scale,int_nlen=0;
    char chr_colname[201],*chr_posofspace;
    int identity_no=0,int_ndatalen=0,int_stat_ctr=0,int_sel_ctr=0,int_sel_flg=0;
	 char chr_view_name[30] = APL_NULL_STRING;
	 char chr_l_view_name[30] = APL_NULL_STRING;

	 EXEC SQL BEGIN DECLARE SECTION;
		EXEC SQL VAR chr_view_name IS STRING;	
		EXEC SQL VAR chr_l_view_name IS STRING;	
	 EXEC SQL END DECLARE SECTION;

    #ifdef APL_THREADS
        APL_SET_CONTEXT
        EXEC SQL CONTEXT USE :my_ctx_local;
    #endif
    memset(chr_colname,APL_NULL_CHAR,201);
    if ((strncmp(chr_h_sel_msg_stmt, "SELECT", 6) != 0) &&
        (strncmp(chr_h_sel_msg_stmt, "select", 6) != 0))
    {
        select_dp->F = 0;
        APL_GOBACK_FAIL;
    }

    

    select_dp->N = MAX_ITEMS;

    EXEC SQL DESCRIBE SELECT LIST FOR S INTO select_dp;

    IS_ANY_ORA_ERROR

    

    
    select_dp->N = select_dp->F;
    for (i = 0; i < select_dp->F; i++)
    {
        
        sqlnul (&(select_dp->T[i]), &(select_dp->T[i]), &int_null_ok);

        switch (select_dp->T[i])
        {
            case  1 : 
                break;
        }
        

         if (select_dp->T[i] != 2)
           select_dp->V[i] = (char *) realloc(select_dp->V[i],
                                    select_dp->L[i] + 1);
         else
           select_dp->V[i] = (char *) realloc(select_dp->V[i],
                                    select_dp->L[i]);


        
        if (select_dp->T[i] != 24 && select_dp->T[i] != 2)
            select_dp->T[i] = 1;

        
        if (select_dp->T[i] == 2)
        { // AIX - Warnings
          if (int_scale > 0)
             select_dp->T[i] = 4;  
          else
             select_dp->T[i] = 3;  
        }
    }

    

    j=0;
    for (;;)
    {
        EXEC SQL FETCH sel_data_cur USING DESCRIPTOR select_dp;

        if(sqlca.sqlcode == 1403)
		break;

        
        for (i = 0; i < select_dp->F; i++)
        {
				
				if (l_data_file == (FILE *)NULL)
				{
					strcpy(chr_l_view_name,select_dp->V[i]);	

                        exec sql select length(rtrim(substr(:select_dp->V[i],1,:select_dp->L[i]))) 
								into
								:int_ndatalen from dual;
					strncpy(chr_h_all_view_name[j++],select_dp->V[i],int_ndatalen); 
					int_h_num_of_views = j;
				}

					
            
            else
            {
                  int_ndatalen = (int)select_dp->L[i];
                        exec sql select length(substr(:select_dp->V[i],1,:select_dp->L[i])) into 
                        :int_ndatalen from dual;
                      
                  fprintf (l_data_file,"%-*.*s", int_ndatalen,
                            int_ndatalen, select_dp->V[i]);
            }
        }

        int_stat_ctr=0;
			if (l_data_file != (FILE *)NULL)
            fprintf(l_data_file,"\n");


    }

    APL_GOBACK_SUCCESS;

RETURN_SUCCESS:

        CO_ProcMonitor(APL_OUT_FILE,"\nExiting successfully  out of MS_Proc_SelectLst\n",NULL,NULL);
        return APL_SUCCESS;

RETURN_FAILURE:
        CO_ProcMonitor(APL_OUT_FILE,"\nExiting unsuccesfully out of MS_Proc_SelectLst\n",NULL,NULL);
        return APL_FAILURE;

}

