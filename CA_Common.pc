/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         :      Corporate Actions
 *
 * File Name           :      CA_Common.pc
 *
 * Description         :      Contains Common Functions Related to CA
 *
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author           Description        RFS No.
 * ---------   --------  ---------------  ------------------   ---------
 * 18/01/2006   1.2        Smita Bhat        New File          Base Version
 * 20/01/2006	 1.3			Smita Bhat			Added Chgs related HDFCCA_027
 * 														to Name Change
 * 30/01/2006	 1.4			Smita Bhat			Added Chgs related	HDFCCA_009
 * 														to Buy Back
 *************************************************************************/

#include "CO_IndStructdef.h"
#include "CA_Common.h"
EXEC SQL INCLUDE SQLCA;


#define	LOCAL_LEN_EVNT_NBR 3
/*Added by siva.gana[pathi for ISKB_3110 on 30/11/2009 started*/
 char g_instr_code[9] = APL_NULL_STRING;   /* ASHISH 29-07-2008 */
 char g_instr_stat[3] = APL_NULL_STRING;   /* ASHISH 29-07-2008 */
/*Added by siva.gana[pathi for ISKB_3110 on 30/11/2009 Ended*/
int CA_ChkAcc(	char *chr_p_client,
					MT_CLIENT_STRUCT_H *p_mt_client_struct_h,
					int *int_p_result,
					DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct	sqlca	sqlca;
	MT_CLIENT_STRUCT_I	*l_mt_client_struct_i = (MT_CLIENT_STRUCT_I   *)NULL;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	APL_FUNCTION_ENTER(APL_OUT_FILE)

	sqlca.sqlcode = 0;
	*int_p_result=APL_SUCCESS;

	EXEC SQL VAR p_mt_client_struct_h->h_dl_client IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_clnt_class IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_regclr_name IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_clt_class IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_cltreg IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_cltmemo IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_internal_clt IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_base_id IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_mstclt IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_clnt_clr_name IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_ibbsclient IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_clt_brk_all IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_shortclr_name IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_brnchcode IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_maker IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_checker IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_uniq_gcustody_id IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_cltprdcd IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->brk_cd IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_tax_id IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_contactinfo IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_cltdetail IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_cln_sign_img IS STRING;
	
	memset(p_mt_client_struct_h,NULL,sizeof(MT_CLIENT_STRUCT_H));
	l_mt_client_struct_i = calloc(1,sizeof(MT_CLIENT_STRUCT_I));
	APL_MALLOC_FAIL(l_mt_client_struct_i)

		/*Smita - HDFCCA_027 - Changed Column Names as per new column names */
	EXEC 	SQL SELECT *
	INTO	:p_mt_client_struct_h:l_mt_client_struct_i
	FROM 	MT_CLIENT
	WHERE	cln_code=RTRIM(:chr_p_client);
	IS_ANY_ORA_ERROR
	if (APL_ZERO_RESULT_SET)
	{
		*int_p_result=ERR_ACCNOT_FND;
		CO_InsertErr(	l_debug_info_ptr,
								ERR_ACCNOT_FND,
								chr_p_client,
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__);
		APL_GOBACK_SUCCESS
	}
	if(strcmp(p_mt_client_struct_h->h_clt_status,APL_STS_AUTH))
	{
		*int_p_result=ERR_ACCOUNT_UNAUTH;
		CO_InsertErr(	l_debug_info_ptr,
								ERR_ACCOUNT_UNAUTH,
								chr_p_client,
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__);
		APL_GOBACK_SUCCESS
	}

	
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS:
	{
		APL_FREE(l_mt_client_struct_i)
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
	}
	RETURN_FAILURE:
	{
		APL_FREE(l_mt_client_struct_i)
		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
	}
}
//Added by Swapnil for Allowing ca for freezed account. isolve no ISKB_2188 --Start 
 int CA_ChkAcc_CA(	char *chr_p_client,
					MT_CLIENT_STRUCT_H *p_mt_client_struct_h,
					int *int_p_result,
					DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct	sqlca	sqlca;
	MT_CLIENT_STRUCT_I	*l_mt_client_struct_i = (MT_CLIENT_STRUCT_I   *)NULL;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	APL_FUNCTION_ENTER(APL_OUT_FILE)

	sqlca.sqlcode = 0;
	*int_p_result=APL_SUCCESS;

	EXEC SQL VAR p_mt_client_struct_h->h_dl_client IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_clnt_class IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_regclr_name IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_clt_class IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_cltreg IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_cltmemo IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_internal_clt IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_base_id IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_mstclt IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_clnt_clr_name IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_ibbsclient IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_clt_brk_all IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_shortclr_name IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_brnchcode IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_maker IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_checker IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_uniq_gcustody_id IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_cltprdcd IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->brk_cd IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_tax_id IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_contactinfo IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_cltdetail IS STRING;
	EXEC SQL VAR p_mt_client_struct_h->h_cln_sign_img IS STRING;
	
	memset(p_mt_client_struct_h,NULL,sizeof(MT_CLIENT_STRUCT_H));
	l_mt_client_struct_i = calloc(1,sizeof(MT_CLIENT_STRUCT_I));
	APL_MALLOC_FAIL(l_mt_client_struct_i)

		//Smita - HDFCCA_027 - Changed Column Names as per new column names 
	EXEC 	SQL SELECT *
	INTO	:p_mt_client_struct_h:l_mt_client_struct_i
	FROM 	MT_CLIENT
	WHERE	cln_code=RTRIM(:chr_p_client);
	IS_ANY_ORA_ERROR
	if (APL_ZERO_RESULT_SET)
	{
		*int_p_result=ERR_ACCNOT_FND;
		CO_InsertErr(	l_debug_info_ptr,
								ERR_ACCNOT_FND,
								chr_p_client,
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__);
		APL_GOBACK_SUCCESS
	}
	//Added by Swapnil for Allowing ca for freezed account. isolve no ISKB_2188 --Start 
	if(strcmp(p_mt_client_struct_h->h_clt_status,APL_STS_CLOSE)==0)
	{
	
		*int_p_result=ERR_ACCOUNT_CLOSED;
		CO_InsertErr(	l_debug_info_ptr,
								ERR_ACCOUNT_CLOSED,
								chr_p_client,
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__);
		APL_GOBACK_SUCCESS
	}
    //Added by Swapnil for Allowing ca for freezed account. isolve no ISKB_2188 --End
	
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS:
	{
		APL_FREE(l_mt_client_struct_i)
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
	}
	RETURN_FAILURE:
	{
		APL_FREE(l_mt_client_struct_i)
		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
	}
}
 //Added by Swapnil for Allowing ca for freezed account. isolve no ISKB_2188 --End
/*Changes - CA Base Version - Smita*/
int CA_ChkInstrument(	char							*p_instr_code,
								MT_INSTRUMENT_STRUCT_H	*p_mt_instrument_struct_h,
								int							*int_p_result,
								DEBUG_INFO_STRUCT_H		**l_debug_info_ptr)
{
	struct	sqlca	sqlca;
	MT_INSTRUMENT_STRUCT_I	*l_mt_instrument_struct_i	=	(MT_INSTRUMENT_STRUCT_I  *)NULL;

	EXEC SQL VAR p_mt_instrument_struct_h->h_instr_code IS STRING;
	EXEC SQL VAR p_mt_instrument_struct_h->h_location_cd IS STRING;
	EXEC SQL VAR p_mt_instrument_struct_h->h_ex_arena IS STRING;
	EXEC SQL VAR p_mt_instrument_struct_h->h_new_maker IS STRING;
	EXEC SQL VAR p_mt_instrument_struct_h->h_maker IS STRING;
	EXEC SQL VAR p_mt_instrument_struct_h->h_checker IS STRING;
	EXEC SQL VAR p_mt_instrument_struct_h->h_new_checker IS STRING;
	EXEC SQL VAR p_mt_instrument_struct_h->h_instr_name IS STRING;
	EXEC SQL VAR p_mt_instrument_struct_h->h_instr_parent IS STRING;
	EXEC SQL VAR p_mt_instrument_struct_h->h_prod_class IS STRING;
/*	EXEC SQL VAR p_mt_instrument_struct_h->h_belongto IS STRING;*/
	EXEC SQL VAR p_mt_instrument_struct_h->h_classcd IS STRING;
	EXEC SQL VAR p_mt_instrument_struct_h->h_new_cd IS STRING;
	EXEC SQL VAR p_mt_instrument_struct_h->h_chng_isin IS STRING;
	EXEC SQL VAR p_mt_instrument_struct_h->h_chg_mkr IS STRING;
	EXEC SQL VAR p_mt_instrument_struct_h->h_ca_name IS STRING;
	EXEC SQL VAR p_mt_instrument_struct_h->h_chng_cd IS STRING;
	EXEC SQL VAR p_mt_instrument_struct_h->h_ca_addrdet IS STRING;
	EXEC SQL VAR p_mt_instrument_struct_h->h_issue_date IS STRING;
	EXEC SQL VAR p_mt_instrument_struct_h->h_mature_dt IS STRING;
	EXEC SQL VAR p_mt_instrument_struct_h->h_last_pymt_date IS STRING;
	EXEC SQL VAR p_mt_instrument_struct_h->h_next_pay_date IS STRING;
	EXEC SQL VAR p_mt_instrument_struct_h->h_old_lst_paydt IS STRING;
	EXEC SQL VAR p_mt_instrument_struct_h->h_freq_code IS STRING;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	memset(p_mt_instrument_struct_h,NULL,sizeof(MT_INSTRUMENT_STRUCT_H));
	l_mt_instrument_struct_i = calloc(1,sizeof(MT_INSTRUMENT_STRUCT_I));
	APL_MALLOC_FAIL(l_mt_instrument_struct_i)
	sqlca.sqlcode = 0;
	*int_p_result=APL_SUCCESS;

	
	EXEC SQL SELECT *
	INTO :p_mt_instrument_struct_h:l_mt_instrument_struct_i
	FROM MT_INSTRUMENT WHERE instr_code=RTRIM(:p_instr_code);
	IS_ANY_ORA_ERROR

	if (APL_ZERO_RESULT_SET)
	{
		*int_p_result = ERR_INSTR_NOTFND;
		CO_InsertErr(l_debug_info_ptr,ERR_INSTR_NOTFND,p_instr_code,
							APL_NULL_STRING,APL_NULL_STRING,__LINE__, __FILE__);	
		APL_GOBACK_SUCCESS
	}
	if (strcmp(p_mt_instrument_struct_h->h_status,APL_STS_AUTH))
	{
		*int_p_result = ERR_UNAUTH_INSTR;
		CO_InsertErr(l_debug_info_ptr,ERR_UNAUTH_INSTR,p_instr_code,
							APL_NULL_STRING,APL_NULL_STRING,__LINE__, __FILE__);	
		APL_GOBACK_SUCCESS
	}

	
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS:
	{
		APL_FREE(l_mt_instrument_struct_i)
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
	}
	RETURN_FAILURE:
	{
		APL_FREE(l_mt_instrument_struct_i)
		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
	}
}

int	CA_RtvInstrEvnt(		char 							*p_typeofinstr,
									char 							*p_event_type,
									CA_CASECEVENT_STRUCT_H	*p_ca_casecevent_struct_h,
									DEBUG_INFO_STRUCT_H		**l_debug_info_ptr)
{
	struct	sqlca	sqlca;
	CA_CASECEVENT_STRUCT_I	*l_ca_casecevent_struct_i	=	(CA_CASECEVENT_STRUCT_I  *)NULL;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	APL_FUNCTION_ENTER(APL_OUT_FILE)

	memset(p_ca_casecevent_struct_h,NULL,sizeof(CA_CASECEVENT_STRUCT_H));
	l_ca_casecevent_struct_i = calloc(1,sizeof(CA_CASECEVENT_STRUCT_I));
	APL_MALLOC_FAIL(l_ca_casecevent_struct_i)
	sqlca.sqlcode = 0;

	/*Smita - HDFCCA_027 - Changed Column Names as per new column names */
	EXEC SQL SELECT *
	INTO :p_ca_casecevent_struct_h:l_ca_casecevent_struct_i
	FROM CASECEVENT WHERE INSTR_TYPE=RTRIM(:p_typeofinstr) AND
							CA_EVENT = RTRIM(:p_event_type);
	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_EVNT_NOTFND, 
														p_typeofinstr,
														p_event_type,
														APL_NULL_STRING);

	
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS:
	{
		APL_FREE(l_ca_casecevent_struct_i)
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
	}
	RETURN_FAILURE:
	{
		APL_FREE(l_ca_casecevent_struct_i)
		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
	}
}

int CA_RtvCCY(				char 						*p_currencycode,
								DL_CURRENCY_STRUCT_H	*p_dl_currency_struct_h,
								DEBUG_INFO_STRUCT_H	**l_debug_info_ptr)
{
	struct	sqlca	sqlca;
	DL_CURRENCY_STRUCT_I	*l_dl_currency_struct_i	=	(DL_CURRENCY_STRUCT_I *)NULL;

	EXEC SQL VAR p_dl_currency_struct_h->h_ccydetail IS STRING;
	EXEC SQL VAR p_dl_currency_struct_h->h_maker IS STRING;

	APL_FUNCTION_ENTER(APL_OUT_FILE)

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	memset(p_dl_currency_struct_h,NULL,sizeof(DL_CURRENCY_STRUCT_H));
	l_dl_currency_struct_i = calloc(1,sizeof(DL_CURRENCY_STRUCT_I));
	APL_MALLOC_FAIL(l_dl_currency_struct_i)
	sqlca.sqlcode = 0;

	EXEC SQL SELECT *
	INTO :p_dl_currency_struct_h:l_dl_currency_struct_i
	FROM DL_CURRENCY WHERE currency_cd = RTRIM(:p_currencycode);
	
	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_CCY_NOTFND, 
														p_currencycode,
														APL_NULL_STRING,
														APL_NULL_STRING);
	
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS:
	{
		APL_FREE(l_dl_currency_struct_i)
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
	}
	RETURN_FAILURE:
	{
		APL_FREE(l_dl_currency_struct_i)

		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
	}
}

int	CA_GenCARefNo( 		char 								*chr_p_ca_id,
		       					const char 						*p_instr_code,
		       					const char 						*p_ce_type,
						  			const	char						*p_decl_date,
						  			const	int						*p_evnt_nbr,
						  			DEBUG_INFO_STRUCT_H        **l_debug_info_ptr
						)			
{
	char	chr_temp_decl_date[APL_DATE_LEN];
	char	chr_char_event_nbr[LOCAL_LEN_EVNT_NBR];
	char	*int_pos;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	APL_FUNCTION_ENTER(APL_OUT_FILE)
	
	strcpy(chr_temp_decl_date,p_decl_date);
	strcpy(chr_char_event_nbr,APL_NULL_STRING);	
	strcpy(chr_p_ca_id,p_instr_code);
	strcat(chr_p_ca_id,p_ce_type);
	strcat(chr_p_ca_id,strtok_r(chr_temp_decl_date,"/",&int_pos));
	strcat(chr_p_ca_id,strtok_r(NULL,"/",&int_pos));
	strcat(chr_p_ca_id,strtok_r(NULL," ",&int_pos));
	strcpy(	(char*)chr_char_event_nbr,(char *)ltoa(	*p_evnt_nbr));
	strcat(chr_p_ca_id,chr_char_event_nbr);

	
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS:
	{
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
	}
	RETURN_FAILURE:
	{
		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
	}
}
/*Modified  by siva.gana[pathi for ISKB_3110 on 30/11/2009 */
int CA_RtvNxtPayDt(	char				*p_nxt_pay_date,
							char				*p_mature_dt,
							char				*p_fst_pay_dt,
							char				*p_frq_cd,
							char				*p_new_date,
							DEBUG_INFO_STRUCT_H	**l_debug_info_ptr)
{	struct 	sqlca sqlca;
	float		int_date_diff=0.0;	
	char		chr_h_date[APL_DATE_LEN] = APL_NULL_STRING;

        /*Added by siva.gana[pathi for ISKB_3110 on 30/11/2009 started*/
	/* ASHISH 31-07-2008 Start */
	char chr_fst_pymt_dt[APL_DATE_LEN] = APL_NULL_STRING;
	char chr_next_date[APL_DATE_LEN] = APL_NULL_STRING;
	short i_next_date = 0;
	//short i_fst_pymt_dt = 0;

	short no_of_added_months = 0; 
	int int_first_day = 0;
	int int_first_month = 0;
	int int_first_year = 0;
	int int_curr_day = 0;
	int int_curr_month = 0;
	int int_curr_year = 0;
	int int_next_day = 0;
	int int_next_month = 0;
	int int_next_year = 0;
	int noOfDays = 0;
	int noOfDays1 = 0;
	int noOfDays2 = 0;

	/* ASHISH 31-07-2008 End */

	EXEC SQL BEGIN DECLARE SECTION;
	//	EXEC SQL VAR chr_fst_pymt_dt IS STRING;
		EXEC SQL VAR chr_next_date IS STRING;
	EXEC SQL END DECLARE SECTION;

	/* ASHISH 29-07-2008 End */
       /*Added by siva.gana[pathi for ISKB_3110 on 30/11/2009 Ended*/
	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	APL_FUNCTION_ENTER(APL_OUT_FILE)
	sqlca.sqlcode = 0;
/*Modified by siva.gana[pathi for ISKB_3110 on 30/11/2009 started*/
strncpy(chr_fst_pymt_dt,p_fst_pay_dt,10);
	if(strlen(p_frq_cd))
	{
		if(!strcmp(p_frq_cd,APL_FRQENCY_CD_ANNUAL))
		{
			/*EXEC SQL SELECT to_char(to_date(:p_nxt_pay_date) + (365) )
			INTO :chr_h_date
			FROM DUAl;
			IS_ANY_ORA_ERROR*/
			no_of_added_months = 12;
		}
		else if(!strcmp(p_frq_cd,APL_FRQENCY_CD_SEMIANNUAL))
		{
			/*EXEC SQL SELECT to_char(to_date(:p_nxt_pay_date) + (182) )
			INTO :chr_h_date
			FROM DUAl;
			IS_ANY_ORA_ERROR*/
			no_of_added_months = 6;
		}
		else if(!strcmp(p_frq_cd,APL_FRQENCY_CD_QUARTERLY))
		{
			/*EXEC SQL SELECT to_char(to_date(:p_nxt_pay_date) + (91)) 
			INTO :chr_h_date
			FROM DUAl; 
			IS_ANY_ORA_ERROR*/
			no_of_added_months = 3;
		}
		else if(!strcmp(p_frq_cd,APL_FRQENCY_CD_MONTHLY))
		{
			/*EXEC SQL SELECT to_char(to_date(:p_nxt_pay_date) + (30)) 
			INTO :chr_h_date
			FROM DUAl; 
			IS_ANY_ORA_ERROR*/
			no_of_added_months = 1;
		}
	//	strcpy(p_new_date,chr_h_date);
		
		EXEC SQL SELECT to_char(add_months(to_date(:p_nxt_pay_date),:no_of_added_months)) 
				 INTO :chr_h_date
				 FROM DUAL; 
			     IS_ANY_ORA_ERROR
/************************************
		// ASHISH 29-07-2008 Start 
		printf("\n Yog - Instr_Code = |%s| and STATUS = |%s|", g_instr_code,g_instr_stat);
		EXEC SQL SELECT INSTR_FST_PYMT_DT
				 INTO:chr_fst_pymt_dt:i_fst_pymt_dt
			     FROM MT_INSTRUMENT
				 WHERE INSTR_CODE =:g_instr_code
				 AND STATUS =:g_instr_stat;

		printf("\n Instr First PYMT  Date is  = |%s| \n",chr_fst_pymt_dt);
		printf("\n Sql Error to find First Interest Date = |%d| \n",sqlca.sqlcode);
		IS_ANY_ORA_ERROR
****************************************/
		printf("\n Instr First PYMT  Date is  = |%s| \n",chr_fst_pymt_dt);

		EXEC SQL SELECT TO_NUMBER(TO_CHAR(TO_DATE(:chr_fst_pymt_dt),'DD')),
			            TO_NUMBER(TO_CHAR(TO_DATE(:chr_fst_pymt_dt),'MM')),
						TO_NUMBER(TO_CHAR(TO_DATE(:chr_fst_pymt_dt),'YYYY'))
			     INTO:int_first_day,int_first_month,int_first_year
				 FROM DUAL;
		printf("\n Sql error to find date, month and year1 = |%d| \n",sqlca.sqlcode);
		IS_ANY_ORA_ERROR
		
		printf("\n Day , month and year of date |%s| :--- \n",chr_fst_pymt_dt);
		printf("\n Day1   = |%d| \n",int_first_day);
		printf("\n Month1 = |%d| \n",int_first_month);
		printf("\n Year1  = |%d| \n",int_first_year);

		EXEC SQL SELECT TO_NUMBER(TO_CHAR(TO_DATE(:p_nxt_pay_date),'DD')),
			            TO_NUMBER(TO_CHAR(TO_DATE(:p_nxt_pay_date),'MM')),
						TO_NUMBER(TO_CHAR(TO_DATE(:p_nxt_pay_date),'YYYY'))
			     INTO:int_curr_day,int_curr_month,int_curr_year
				 FROM DUAL;
		printf("\n Sql error to find date, month and year2 = |%d| \n",sqlca.sqlcode);
		IS_ANY_ORA_ERROR
		
		printf("\n Day , month and year of date |%s| :--- \n",p_nxt_pay_date);
		printf("\n Day2   = |%d| \n",int_curr_day);
		printf("\n Month2 = |%d| \n",int_curr_month);
		printf("\n Year2  = |%d| \n",int_curr_year);


		EXEC SQL SELECT TO_NUMBER(TO_CHAR(TO_DATE(:chr_h_date),'DD')),
			            TO_NUMBER(TO_CHAR(TO_DATE(:chr_h_date),'MM')),
						TO_NUMBER(TO_CHAR(TO_DATE(:chr_h_date),'YYYY'))
			     INTO:int_next_day,int_next_month,int_next_year
				 FROM DUAL;
		printf("\n Sql error to find date, month and year3 = |%d| \n",sqlca.sqlcode);
		IS_ANY_ORA_ERROR
		
		printf("\n Day , month and year of date |%s| :--- \n",chr_h_date);
		printf("\n Day3   = |%d| \n",int_next_day);
		printf("\n Month3 = |%d| \n",int_next_month);
		printf("\n Year3  = |%d| \n",int_next_year);

		int_next_day = int_curr_day;

		if(APL_FAILURE == daysInMonth(int_next_month,int_next_year,&noOfDays))
		{
			APL_GOBACK_FAIL;
		}

		
		if(int_next_day > noOfDays)
		{
			int_next_day = noOfDays;
		}

		if(APL_FAILURE == daysInMonth(int_curr_month,int_curr_year,&noOfDays1))
		{
				APL_GOBACK_FAIL;
		}

		if(APL_FAILURE == daysInMonth(int_first_month,int_first_year,&noOfDays2))
		{
			APL_GOBACK_FAIL;
		}

		

		if(int_curr_day == noOfDays1)
		{
			int_next_day = noOfDays;
		}
		
	

		if((int_first_day < int_next_day) && (int_first_day != noOfDays2))
	    {
		   int_next_day = int_first_day;
	    }

		sprintf(chr_next_date,"%d/%d/%d 12:00:00",int_next_day,int_next_month,int_next_year);

		EXEC SQL SELECT TO_CHAR(TO_DATE(:chr_next_date),'DD/MM/YYYY HH:MI:SS') 
				 INTO:chr_next_date:i_next_date
				 FROM DUAL;
		printf("\n Sql error to find next date = |%d| \n",sqlca.sqlcode);
		IS_ANY_ORA_ERROR
		
		printf("\n New Interest Date = |%s| \n",chr_next_date);
		
		strcpy(p_new_date,chr_next_date);

	    /* ASHISH 29-07-2008 End */
	/*Modified by siva.gana[pathi for ISKB_3110 on 30/11/2009 Ended*/
		if(strlen(p_mature_dt) && (strcmp(p_frq_cd,APL_FRQENCY_CD_OTHERCASE)))
		{
			EXEC	SQL SELECT (to_date(:p_new_date) - to_date(:p_mature_dt))
			INTO :int_date_diff
			FROM DUAL;
			IS_ANY_ORA_ERROR
			if (int_date_diff > 0)
				strcpy(p_new_date,p_mature_dt);
	
		}
	}
	else
	{
		APL_DATA_MISSING(	"Frequency Period",
								APL_NULL_STRING,
								APL_NULL_STRING)
		APL_GOBACK_FAIL	
	}	
	
	
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS:
	{
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
	}
	RETURN_FAILURE:
	{
		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
	}
}

int CA_CO_InstrUpd(	CA_CAEVENT_STRUCT_H		*p_ca_caevent_struct_h,
							MT_INSTRUMENT_STRUCT_H	*p_mt_instrument_struct_h,
							DEBUG_INFO_STRUCT_H		**l_debug_info_ptr)
{
	struct	sqlca	sqlca;
	char		h_new_dt[APL_DATE_LEN] = APL_NULL_STRING;
   char     chr_sys_date_time[APL_DATE_LEN] = APL_NULL_STRING;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	sqlca.sqlcode = 0;

	APL_FUNCTION_ENTER(APL_OUT_FILE)

   
   if (  CO_RtvSysDtTime(chr_sys_date_time,l_debug_info_ptr) == APL_FAILURE )
   {
     APL_GOBACK_FAIL
   }
          /*Smita - Changed Structure Variable Names - CA Base Version*/
	if ((!strcmp(p_ca_caevent_struct_h->h_evt_class,EVT_CASH_DIV))||
		(!strcmp(p_ca_caevent_struct_h->h_evt_class,EVT_BOND)))
		p_mt_instrument_struct_h->h_last_incom_rt = p_mt_instrument_struct_h->h_instr_int_rate;
	
	if (!strcmp(p_ca_caevent_struct_h->h_evt_class,EVT_BOND))
	{		
		strcpy(p_mt_instrument_struct_h->h_mod_last_paydt,APL_YES_IND);
		/* Chirag Chng  1st arg. p_mt_instrument_struct_h->h_next_pay_date to p_ca_caevent_struct_h->h_pymt_dt */
		/* In below function call  30-11-2006*/
/*Added by siva.ganapathi for ISKB_3110 Started*/
/* JEOTI 25/06/2008 - HDFC Issue Log 340 fix - START */

 IF_COND_EXISTS("MT_INSTR","NXT_INT_DT")     
{
       
			  /* ASHISH 29-07-2008 */
			  strcpy(g_instr_code,p_mt_instrument_struct_h->h_instr_code);
			  strcpy(g_instr_stat,p_mt_instrument_struct_h->h_status);
			
              strcpy(p_mt_instrument_struct_h->h_last_pymt_date,p_mt_instrument_struct_h->h_next_pay_date);
			

           if(
			            CA_RtvNxtPayDt(p_mt_instrument_struct_h->h_last_pymt_date,
							p_mt_instrument_struct_h->h_mature_dt,
							p_mt_instrument_struct_h->h_instr_fst_pymt_dt,
							p_mt_instrument_struct_h->h_freq_code,
							&h_new_dt,
							l_debug_info_ptr)== APL_FAILURE 
			   )
			APL_GOBACK_FAIL
		   else
			  strcpy(p_mt_instrument_struct_h->h_next_pay_date,h_new_dt);

			
}

else
	{
		/*HDFC Production Issue - Issue Log 340 - Fix By Yog on 17/09/2008 - Start */
			  strcpy(g_instr_code,p_mt_instrument_struct_h->h_instr_code);
			  strcpy(g_instr_stat,p_mt_instrument_struct_h->h_status);
		/* End */

		if(CA_RtvNxtPayDt(	p_ca_caevent_struct_h->h_pymt_dt,
							p_mt_instrument_struct_h->h_mature_dt,
							p_mt_instrument_struct_h->h_instr_fst_pymt_dt,
							p_mt_instrument_struct_h->h_freq_code,
							&h_new_dt,
							l_debug_info_ptr)== APL_FAILURE )
			APL_GOBACK_FAIL
		else
			strcpy(p_mt_instrument_struct_h->h_next_pay_date,h_new_dt);

	}

	/* JEOTI 25/06/2008 - HDFC Issue Log 340 fix - END */
/*Added by siva.ganapathi for ISKB_3110 Ended*/
		Alert("Next Pay Date for Instrument |%s| is |%s| \n",p_mt_instrument_struct_h->h_instr_code,p_mt_instrument_struct_h->h_next_pay_date);
	}	
	/* Only for BI & CD This date should be updated */
	if (!strcmp(p_ca_caevent_struct_h->h_evt_class,EVT_BOND) || !strcmp(p_ca_caevent_struct_h->h_evt_class,EVT_CASH_DIV))
	{
		Alert("p_mt_instrument_struct_h->h_old_lst_paydt |%s|",p_mt_instrument_struct_h->h_old_lst_paydt);
		Alert("p_ca_caevent_struct_h->h_inst_start_period |%s|",p_ca_caevent_struct_h->h_inst_start_period);

		/* Chirag 02-12-2006 IF Condition added */
		if(strlen(p_mt_instrument_struct_h->h_old_lst_paydt) <= 0 && strlen(p_ca_caevent_struct_h->h_inst_start_period) <= 0)
		{	
			 /* Executes Only once,1st Event on Instrument */	
			Alert("Executes Only once,1st Event on Instrument\n");	
			Alert("p_mt_instrument_struct_h->h_last_pymt_date |%s|",p_mt_instrument_struct_h->h_last_pymt_date);
				if(strlen(p_mt_instrument_struct_h->h_last_pymt_date) <= 0)
				  strcpy(p_mt_instrument_struct_h->h_old_lst_paydt,p_mt_instrument_struct_h->h_issue_date);
				else
				  strcpy(p_mt_instrument_struct_h->h_old_lst_paydt,p_mt_instrument_struct_h->h_last_pymt_date);
                                  /*Added by siva.ganapathi for ISKB_3110 RETRO from HDFC on 30/11/2009 Started*/				  
				  /*Smita - HDFCCA_027 - Changed Column Names as per new column names */
                                  /* JEOTI 25/06/2008 - HDFC Issue Log 340 fix - START */
                                  IF_COND_NOT_EXISTS("MT_INSTR","NXT_INT_DT")    
			          {
				  strcpy(p_mt_instrument_struct_h->h_last_pymt_date,p_ca_caevent_struct_h->h_pymt_dt);

		                  }
                                  /* JEOTI 25/06/2008 - HDFC Issue Log 340 fix - END */			            
                                  /*Added by siva.ganapathi for ISKB_3110 RETRO from HDFC on 30/11/2009 Ended*/
				  EXEC	SQL	UPDATE  MT_INSTRUMENT
							 SET	LAST_INCOM_RT 	= 	:p_mt_instrument_struct_h->h_last_incom_rt,
									MOD_LAST_PAYDT	= 	RTRIM(:p_mt_instrument_struct_h->h_mod_last_paydt),
									NEXT_PAY_DATE	=	:p_mt_instrument_struct_h->h_next_pay_date,
									OLD_LST_PAYDT	=	:p_mt_instrument_struct_h->h_old_lst_paydt,
									last_pymt_date	=	:p_mt_instrument_struct_h->h_last_pymt_date,
									access_stamp = :chr_sys_date_time
								  WHERE	instr_code	=	RTRIM(:p_ca_caevent_struct_h->h_instr_code);
				  IS_ANY_ORA_ERROR
		}
		else
		{
			Alert("p_mt_instrument_struct_h->h_old_lst_paydt : |%s|\n",p_mt_instrument_struct_h->h_old_lst_paydt);
			Alert("p_mt_instrument_struct_h->h_last_pymt_date : |%s|\n",p_mt_instrument_struct_h->h_last_pymt_date);
			Alert("p_ca_caevent_struct_h->h_pymt_dt : |%s|\n",p_ca_caevent_struct_h->h_pymt_dt);
			if(strlen(p_ca_caevent_struct_h->h_inst_start_period) <= 0)  	
			{	
				/* Execute On Next Event On Same Instrument */
				Alert("Execute On Next Event On Same Instrument\n");
				strcpy(p_mt_instrument_struct_h->h_old_lst_paydt,p_mt_instrument_struct_h->h_last_pymt_date);
                                /*Added by siva.ganapathi for ISKB_3110 RETRO from HDFC on 30/11/2009 Started*/				  
                                /* JEOTI 25/06/2008 - HDFC Issue Log 340 fix - START */
                                IF_COND_NOT_EXISTS("MT_INSTR","NXT_INT_DT")    
				{
            strcpy(p_mt_instrument_struct_h->h_last_pymt_date,p_ca_caevent_struct_h->h_pymt_dt);

				}
                                /* JEOTI 25/06/2008 - HDFC Issue Log 340 fix - END */       
                                /*Added by siva.ganapathi for ISKB_3110 RETRO from HDFC on 30/11/2009 Ended*/				  
              EXEC SQL UPDATE  MT_INSTRUMENT
                      SET  LAST_INCOM_RT  =  :p_mt_instrument_struct_h->h_last_incom_rt,
                           MOD_LAST_PAYDT =  RTRIM(:p_mt_instrument_struct_h->h_mod_last_paydt),
                           NEXT_PAY_DATE  =  :p_mt_instrument_struct_h->h_next_pay_date,
                           OLD_LST_PAYDT  =  :p_mt_instrument_struct_h->h_old_lst_paydt,
                           last_pymt_date =  :p_mt_instrument_struct_h->h_last_pymt_date,
                           access_stamp = :chr_sys_date_time
                           WHERE  instr_code  =  RTRIM(:p_ca_caevent_struct_h->h_instr_code);
              IS_ANY_ORA_ERROR	
			}
			else
			{
				Alert("Execute for Modified event\n");
				Alert("p_ca_caevent_struct_h->h_inst_start_period : |%s|\n",p_ca_caevent_struct_h->h_inst_start_period);
				if(!strcmp(p_mt_instrument_struct_h->h_old_lst_paydt,p_ca_caevent_struct_h->h_inst_start_period))
				{
					/* Executes Only for Current Event On Instrument */
					if(!strcmp(p_mt_instrument_struct_h->h_last_pymt_date,p_ca_caevent_struct_h->h_pymt_dt))
					{
						Alert("No Need to Update Any Date In MT_INSTRUMENT\n");
					}
					else
					{
						/* Execute on Pay Date Change */
						Alert("Execute on Pay Date Change \n");

                                /*Added by siva.ganapathi for ISKB_3110 RETRO from HDFC on 30/11/2009 Started*/				  
                                /* JEOTI 25/06/2008 - HDFC Issue Log 340 fix - START */
                                IF_COND_NOT_EXISTS("MT_INSTR","NXT_INT_DT")    
				{
						strcpy(p_mt_instrument_struct_h->h_last_pymt_date,p_ca_caevent_struct_h->h_pymt_dt);	
				}
                         	/* JEOTI 25/06/2008 - HDFC Issue Log 340 fix - END */					
                                /*Added by siva.ganapathi for ISKB_3110 RETRO from HDFC on 30/11/2009 Ended*/				  							
						EXEC SQL UPDATE  MT_INSTRUMENT SET  
									NEXT_PAY_DATE  =  :p_mt_instrument_struct_h->h_next_pay_date,
									last_pymt_date =  :p_mt_instrument_struct_h->h_last_pymt_date,
									access_stamp = :chr_sys_date_time
									WHERE  instr_code  =  RTRIM(:p_ca_caevent_struct_h->h_instr_code);
						IS_ANY_ORA_ERROR
					}
				}
				else
				{
					Alert("This case Should Never Come....Else Coding Error\n");
				}
			}
		}
		/* Chirag 02-12-2006 Above code written to avoid modification of Instrument Dates again & again by same */
		/* event when its chngs status from Rdy For Intimation or Rdy For Entitlement to UnAuth Intimation */  
	}	
	
	
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS:
	{
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
	}
	RETURN_FAILURE:
	{
		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
	}
}

int CA_Alert	(	CA_CANOTIFY_STRUCT_H		*p_ca_canotify_struct_h,
						DEBUG_INFO_STRUCT_H		**l_debug_info_ptr)
{
	struct	sqlca	sqlca;
	char		chr_sys_date_time[APL_DATE_LEN]=APL_NULL_STRING;
	CA_CANOTIFY_STRUCT_I	*l_ca_canotify_struct_i	=	(CA_CANOTIFY_STRUCT_I *)NULL;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	sqlca.sqlcode = 0;

	APL_FUNCTION_ENTER(APL_OUT_FILE)

	l_ca_canotify_struct_i=calloc(1,sizeof(CA_CANOTIFY_STRUCT_I));
	APL_MALLOC_FAIL(l_ca_canotify_struct_i)

	if(CO_RtvSysDtTime(chr_sys_date_time,l_debug_info_ptr)== APL_FAILURE)
		APL_GOBACK_FAIL
	strcpy(p_ca_canotify_struct_h->h_deal_date,chr_sys_date_time);
	
	EXEC SQL INSERT INTO CANOTIFY 
	VALUES (:p_ca_canotify_struct_h :l_ca_canotify_struct_i);
	IS_ANY_ORA_ERROR

	
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS:
	{
		APL_FREE(l_ca_canotify_struct_i);
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
	}
	RETURN_FAILURE:
	{
		APL_FREE(l_ca_canotify_struct_i);
		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
	}
}


			

int	CA_ChkInstr( 	char *p_instr_code,
							char *p_res_instr_code,
							char *p_op_ind,
							DEBUG_INFO_STRUCT_H	**l_debug_info_ptr
						)	
{
	
	struct	sqlca	sqlca;
	char	h_typeofinstr[APL_INSTRU_TYPE_LEN] = APL_NULL_STRING;
	short	i_typeofinstr=0;
	short int_error_ind = APL_SUCCESS;
	char		chr_log_buff[MSG_LENGTH]=APL_NULL_STRING;
	#ifdef APL_THREADS
	APL_SET_CONTEXT
	EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	APL_FUNCTION_ENTER(APL_OUT_FILE)



	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered CA_ChkInstr function",NULL,NULL);
	}
	
	if	(	(CO_Chk_InstrValid(p_instr_code,
							APL_YES_FLAG,
							APL_YES_FLAG,
							APL_NO_FLAG,
							APL_NO_FLAG,
							APL_NULL_CHAR,
							APL_NULL_CHAR,
							l_debug_info_ptr						
							)
			)	==		APL_FAILURE
		)
			{
				int_error_ind = APL_FAILURE;
			}

	APL_IF_DEBUG
	{	
		sprintf(chr_log_buff,"Instrument (%s) is valid",p_instr_code);
			CO_ProcMonitor(APL_OUT_FILE,chr_log_buff,NULL,NULL);

	}
	if (	strcmp(p_res_instr_code,APL_NULL_STRING) &&
			strcmp(p_res_instr_code,p_instr_code)
		)

		{
			if	(	(CO_Chk_InstrValid(p_res_instr_code,
									APL_YES_FLAG,
									APL_YES_FLAG,
									APL_NULL_CHAR,
									APL_NO_FLAG,
									APL_NULL_CHAR,
									APL_NULL_CHAR,
									l_debug_info_ptr						
									)
					)	==		APL_FAILURE
				)
			{
				int_error_ind = APL_FAILURE;
			}
/*	ISKB_2305	Remove Condition for all Events	*/
/*
		if ( !strcmp(p_op_ind,APL_NO_IND) )
		{
			EXEC SQL SELECT INSTR_TYPE
		 	INTO h_typeofinstr:i_typeofinstr FROM MT_INSTRUMENT
			WHERE instr_code=:p_res_instr_code;
			
			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_INSTR_NOTFND,
                                                p_res_instr_code,
                                                APL_NULL_STRING,
                                                APL_NULL_STRING
																)	
			if (		(strcmp(h_typeofinstr,APL_INSTRU_SHARE))	&&
						(strcmp(h_typeofinstr,APL_INSTRU_RIGHTS))	&&
						(strcmp(h_typeofinstr,APL_INSTRU_WARRANTS))
				)
				{	
					CO_InsertErr(l_debug_info_ptr,
										ERR_RES_INSTR_INVALID,
										p_res_instr_code,
										APL_NULL_STRING,
										APL_NULL_STRING,
										__LINE__,
										__FILE__);
					int_error_ind = APL_FAILURE;
				}
			}
*/			
		}

		if (int_error_ind == APL_FAILURE )
			APL_GOBACK_FAIL

		
		APL_GOBACK_SUCCESS
		RETURN_SUCCESS	:
		
		{
			APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
		}
		RETURN_FAILURE	:
		{
			APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
		}
}

int CA_CO_ModInstrRev( 	char * p_event_type,
                  		char * p_instr_code,
                  		char * p_sys_date_time,
                  		DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   struct   sqlca sqlca;
   char chr_event_bond_int[APL_STATUS_LEN] ={EVT_BOND};
   char chr_event_bond_red[APL_STATUS_LEN] ={EVT_BOND_REDMP};
   char chr_event_meeting[APL_STATUS_LEN] ={EVT_MEETING};
   char chr_event_cash_div[APL_STATUS_LEN] ={EVT_CASH_DIV};
   char chr_event_others[APL_STATUS_LEN] ={EVT_OTH};


   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

		APL_FUNCTION_ENTER(APL_OUT_FILE)

		/*Smita - HDFCCA_027 - Changed Column Names as per the new Column names*/
   EXEC SQL UPDATE MT_INSTRUMENT     
   SET      
      NEXT_PAY_DATE = DECODE(:p_event_type,:chr_event_bond_int,last_pymt_date,NEXT_PAY_DATE),   
      last_pymt_date = DECODE(:p_event_type,:chr_event_meeting,last_pymt_date,:chr_event_bond_red,last_pymt_date,:chr_event_others,last_pymt_date,OLD_LST_PAYDT),     
      INSTR_INT_RATE = DECODE(:p_event_type,:chr_event_bond_int,LAST_INCOM_RT,:chr_event_cash_div,LAST_INCOM_RT,INSTR_INT_RATE),  
MOD_LAST_PAYDT = DECODE(:p_event_type,:chr_event_bond_int,DECODE(OLD_LST_PAYDT,NULL,'N',MOD_LAST_PAYDT),MOD_LAST_PAYDT),
      access_stamp = :p_sys_date_time

	WHERE INSTR_CODE=:p_instr_code
	;

   IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,p_instr_code,APL_NULL_STRING,APL_NULL_STRING)

   
   APL_GOBACK_SUCCESS
   RETURN_SUCCESS:
   {
      APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
   }
   RETURN_FAILURE:
   {
      APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
   }

}



int	CA_RtvGblPymtRec(char					*chr_p_ca_id,
								CA_CAGLPYMT_STRUCT_H	*p_ca_caglpymt_struct_h,
								CA_CAGLPYMT_STRUCT_I	*p_globalpymt_struct_i,
								char					*p_ora_rowid,
								DEBUG_INFO_STRUCT_H		**l_debug_info_ptr
								)
{
	struct	sqlca	sqlca;
	char		rowid[APL_ROWID_LEN]=APL_NULL_STRING;

	#ifdef APL_THREADS
	APL_SET_CONTEXT
	EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	APL_FUNCTION_ENTER(APL_OUT_FILE)

	
	EXEC SQL VAR	p_ca_caglpymt_struct_h->h_corp_id is string;
	EXEC SQL VAR	p_ca_caglpymt_struct_h->h_maker is string;
	EXEC SQL VAR	p_ca_caglpymt_struct_h->h_checker is string;

	
		EXEC SQL SELECT 	ROWID,
							CAGLPYMT.*
		INTO					:rowid,
							:p_ca_caglpymt_struct_h:p_globalpymt_struct_i	 
		FROM CAGLPYMT 
  		WHERE corp_id=:chr_p_ca_id
   	FOR UPDATE OF	CAGLPYMT.STAT_PYMT;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_GLBLPAYMNT_NOTFND,
															chr_p_ca_id,
															APL_NULL_STRING,
															APL_NULL_STRING
														 )	

	if	(p_globalpymt_struct_i->i_entitl_pos == -1)
	{
		p_ca_caglpymt_struct_h->h_entitl_pos = 0.0;
	}			

	if	(p_globalpymt_struct_i->i_amount_due == -1)
	{
		p_ca_caglpymt_struct_h->h_amount_due = 0.0;
	}			
	
	if	(p_globalpymt_struct_i->i_quantity_due == -1)
	{
		p_ca_caglpymt_struct_h->h_quantity_due = 0.0;
	}			

	if	(p_globalpymt_struct_i->i_cur_quantity_due == -1)
	{
		p_ca_caglpymt_struct_h->h_cur_quantity_due = 0.0;
	}			
	
	if	(p_globalpymt_struct_i->i_quantity_paid == -1)
	{
		p_ca_caglpymt_struct_h->h_quantity_paid = 0.0;
	}			
	

	if	(p_globalpymt_struct_i->i_cur_amount_due == -1)
	{
		p_ca_caglpymt_struct_h->h_cur_amount_due = 0.0;
	}			

	
	strcpy(p_ora_rowid,rowid);

	
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS	:
	{
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
	}
	RETURN_FAILURE	:
	{
		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
	}
}



int 	CA_RtvEvnt(  char *chr_p_ca_id,
 						CA_CAEVENT_STRUCT_H *p_ca_caevent_struct_h,
 						CA_CAEVENT_STRUCT_I *p_ca_caevent_struct_i,
						char *p_ora_rowid,
			 		   INTL_ENV_DATA_STRUCT_H  * p_intlenv_data_struct_h, 
						DEBUG_INFO_STRUCT_H **	 l_debug_info_ptr
         		 )
{
	struct sqlca sqlca;
   char   rowid[APL_ROWID_LEN]=APL_NULL_STRING;

	#ifdef APL_THREADS
			APL_SET_CONTEXT
			EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	APL_FUNCTION_ENTER(APL_OUT_FILE)
	
   EXEC SQL VAR   p_ca_caevent_struct_h->h_corp_id is string;
   EXEC SQL VAR   p_ca_caevent_struct_h->h_instr_code is string;
   EXEC SQL VAR   p_ca_caevent_struct_h->h_res_instr_code is string;
   EXEC SQL VAR   p_ca_caevent_struct_h->h_contactinfo is string;
   EXEC SQL VAR   p_ca_caevent_struct_h->h_info_nbr is string;
   EXEC SQL VAR   p_ca_caevent_struct_h->h_entinfo_no is string;
   EXEC SQL VAR   p_ca_caevent_struct_h->h_maker is string;
   EXEC SQL VAR   p_ca_caevent_struct_h->h_checker is string;
   EXEC SQL VAR   p_ca_caevent_struct_h->h_proc_oth is string;

	
	EXEC SQL SELECT CAEVENT.*,rowid
	INTO
			:p_ca_caevent_struct_h:p_ca_caevent_struct_i,
			 :rowid
	FROM CAEVENT
	WHERE 
			corp_id = :chr_p_ca_id
	FOR UPDATE;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"Event",chr_p_ca_id,APL_NULL_STRING)	

	strcpy(p_ora_rowid,rowid);

	
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS	:
	{
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
	}
	RETURN_FAILURE	:
	{
		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
	}
}



int	CA_ChkNoUUEntitl(char * chr_p_ca_id,
								  DEBUG_INFO_STRUCT_H **l_debug_info_ptr
								 )
{
	struct sqlca sqlca;
	int    int_no_ents=0;

	#ifdef APL_THREADS
			APL_SET_CONTEXT
			EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	APL_FUNCTION_ENTER(APL_OUT_FILE)

	EXEC SQL SELECT NVL(count(*),0)
	into :int_no_ents
	from CAENTITLEMENT
	where corp_id = :chr_p_ca_id
	and CHECKER_DT is NULL
	and status <> 'DL' /*Smita - Changed Col Name - HDFCCA_BaseVer*/
	and rownum < 2;

	IS_ANY_ORA_ERROR

	if ( int_no_ents != 0 )
	{
		CO_InsertErr(l_debug_info_ptr,
							ERR_UNAUTH_ENT_NO_GP,
							APL_NULL_STRING,
							APL_NULL_STRING,
							APL_NULL_STRING,
							__LINE__,
							__FILE__
							);
		APL_GOBACK_FAIL
	}

	
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS	:
	{
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
	}
	RETURN_FAILURE	:
	{
		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
	}
}




int CA_ChkSumGlPymt( CA_CAGLPYMT_STRUCT_H *p_ca_caglpymt_struct_h,
						  INTL_ENV_DATA_STRUCT_H    *p_intlenv_data_struct_h,
						  DEBUG_INFO_STRUCT_H			  **l_debug_info_ptr
						)
{
	struct sqlca sqlca;
	double elig_entitl_pos =0;
	double amount_bal = 0;
	double quantity_bal = 0;
	double cur_amt_bal = 0;
	double curr_qty_bal = 0;
	
	double cur_quantity_paid = 0;
	

	#ifdef APL_THREADS
			APL_SET_CONTEXT
			EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	APL_FUNCTION_ENTER(APL_OUT_FILE)

	
	EXEC SQL SELECT 	NVL(sum(elig_entitl_pos),0),
							NVL(sum(INSTR_INC_BAL),0),
							NVL(sum(quantity_bal),0)
	into 
				:elig_entitl_pos,
				:amount_bal,
				:quantity_bal
	from CAENTITLEMENT
	where corp_id = :p_ca_caglpymt_struct_h->h_corp_id
      	and status  in ('RP','PP','CP'); /*Smita - Changed Col Name - HDFCCA_BaseVer*/

	IS_ANY_ORA_ERROR

	
	
	
	EXEC SQL SELECT 	
							:amount_bal - NVL(sum(curr_pymt),0),
							:quantity_bal - NVL(sum(quantity_received),0),
							:elig_entitl_pos - NVL(sum(quantity_paid),0)
	into 
				:cur_amt_bal,
				:curr_qty_bal,
				:cur_quantity_paid
	from CACHEQUE
	where corp_id = :p_ca_caglpymt_struct_h->h_corp_id
      	and stat_pymt not  in ('RV','DL');

	IS_ANY_ORA_ERROR

if ( (!APL_DOUBLE_EQUAL(elig_entitl_pos,p_ca_caglpymt_struct_h->h_entitl_pos))
			||
	 (!APL_DOUBLE_EQUAL(amount_bal,p_ca_caglpymt_struct_h->h_amount_due))
			||
	 (!APL_DOUBLE_EQUAL(quantity_bal,p_ca_caglpymt_struct_h->h_quantity_due))
			||
	 (!APL_DOUBLE_EQUAL(curr_qty_bal,p_ca_caglpymt_struct_h->h_cur_quantity_due))
			||
	 (!APL_DOUBLE_EQUAL(cur_amt_bal,p_ca_caglpymt_struct_h->h_cur_amount_due))
			||
	 (!APL_DOUBLE_EQUAL(cur_quantity_paid,p_ca_caglpymt_struct_h->h_quantity_paid))
		)
	{
		CO_InsertErr(l_debug_info_ptr,
							ERR_GLBLPAYMNT_VAL_CHG,
							APL_NULL_STRING,
							APL_NULL_STRING,
							APL_NULL_STRING,
							__LINE__,
							__FILE__
							);
		APL_GOBACK_FAIL
	}

	
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS	:
	{
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
	}
	RETURN_FAILURE	:
	{
		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
	}
}

/*Smita - HDFCCA_027 - Name Change Event - Function to check whether Company Code is valid*/
int CA_ChkCompany(	char						*p_cmp_code,
							MT_COMPANY_STRUCT_H	*p_mt_company_struct_h,
							int						*int_p_result,
							DEBUG_INFO_STRUCT_H	**l_debug_info_ptr)
{
	struct	sqlca	sqlca;
	MT_COMPANY_STRUCT_I	*l_mt_company_struct_i	=	(MT_COMPANY_STRUCT_I  *)NULL;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif


	APL_FUNCTION_ENTER(APL_OUT_FILE)

	memset(p_mt_company_struct_h,NULL,sizeof(MT_COMPANY_STRUCT_H));
	l_mt_company_struct_i = calloc(1,sizeof(MT_COMPANY_STRUCT_I));
	APL_MALLOC_FAIL(l_mt_company_struct_i)
	sqlca.sqlcode = 0;
	*int_p_result=APL_SUCCESS;

	EXEC SQL SELECT *
	INTO :p_mt_company_struct_h:l_mt_company_struct_i
	FROM MT_COMPANY WHERE cmp_code=RTRIM(:p_cmp_code);
	IS_ANY_ORA_ERROR

	if (APL_ZERO_RESULT_SET)
	{
		*int_p_result = ERR_COMPANY_NOTFND;
		CO_InsertErr(l_debug_info_ptr,ERR_COMPANY_NOTFND,p_cmp_code,
							APL_NULL_STRING,APL_NULL_STRING,__LINE__, __FILE__);	
		APL_GOBACK_SUCCESS
	}
	if (strcmp(p_mt_company_struct_h->h_cmp_status,APL_STS_AUTH))
	{
		*int_p_result = ERR_COMPANY_NOT_AUTHORIZED;
		CO_InsertErr(l_debug_info_ptr,ERR_COMPANY_NOT_AUTHORIZED,p_cmp_code,
							APL_NULL_STRING,APL_NULL_STRING,__LINE__, __FILE__);	
		APL_GOBACK_SUCCESS
	}

	
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS:
	{
		APL_FREE(l_mt_company_struct_i)
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
	}
	RETURN_FAILURE:
	{
		APL_FREE(l_mt_company_struct_i)
		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
	}
}

int CA_ChkCmp	( 	char *p_cmp_code,
						INTL_ENV_DATA_STRUCT_H  *p_intlenv_data_struct_h,
	  			   	DEBUG_INFO_STRUCT_H  	**l_debug_info_ptr		
					)
{
	char 		chr_i_exists = 'Y';
	char		chr_i_auth = 'Y';
	char		chr_i_del = 'N';
	int		int_retval = 0;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered function CA_ChkCmp",NULL,NULL);
		printf("Checking Company Code = |%s|\n",p_cmp_code);
	}
	APL_FUNCTION_ENTER(APL_OUT_FILE)
	int_retval = MT_Chk_CmpanyFn(p_cmp_code,
											chr_i_exists,
											chr_i_auth,
											chr_i_del,
											l_debug_info_ptr);

	if (int_retval == APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}

	APL_GOBACK_SUCCESS
	
	RETURN_SUCCESS	:
	{
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
	}
	RETURN_FAILURE	:
	{
		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
	}
}

/*Smita - HDFCCA_027 - Name Change Event*/


/*Smita - HDFCCA_009 - Check Event Details and Event Date As Holidays*/
int CA_ChkEventDetails(	CA_CAEVENT_STRUCT_H		*p_ca_caevent_struct_h,
								int							*int_p_result,
								INTL_ENV_DATA_STRUCT_H  *p_intlenv_data_struct_h,
								DEBUG_INFO_STRUCT_H 		**l_debug_info_ptr)
{
	struct	sqlca	sqlca;
	int int_result = 0;
	char l_table_name[50] = APL_NULL_STRING;
	int int_retval = 0;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(		APL_OUT_FILE,"Entered CA_ChkEventDetails function",NULL,p_intlenv_data_struct_h);
		printf("Event Type = |%s|\n",p_ca_caevent_struct_h->h_evt_class);
	}
	
	if (strcmp(p_ca_caevent_struct_h->h_evt_class,EVT_BUY_BACK) == 0)
	{
		char *l_key_codes[3] = {"DEPO_CODE","DEPO_PART_CODE",APL_NULL_STRING};
		char *l_key_values[3];
		
		if(strlen(p_ca_caevent_struct_h->h_depo_code))
		{
			int_retval = CO_Chk_CodeValid ( "DEPOSITORY",
														p_ca_caevent_struct_h->h_depo_code,
														g_mt_commonsys_params_struct_h.nation_code,
														l_debug_info_ptr);
			
			if (int_retval == APL_FAILURE)
			{
				*int_p_result = ERR_INVALID_CODE;
				 APL_GOBACK_SUCCESS
			}
		}
		if(strlen(p_ca_caevent_struct_h->h_depo_part_code) && strlen(p_ca_caevent_struct_h->h_depo_code))
		{
			
			l_key_values[0] = p_ca_caevent_struct_h->h_depo_code;
			l_key_values[1] = p_ca_caevent_struct_h->h_depo_part_code;
			l_key_values[2] = APL_NULL_STRING;

			int_retval = CO_Chk_CodeValid	( "DEPOSITORY",
														p_ca_caevent_struct_h->h_depo_code,
														g_mt_commonsys_params_struct_h.nation_code,
														l_debug_info_ptr);

			if (int_retval == APL_FAILURE)
			{
				*int_p_result = ERR_INVALID_CODE;

				APL_GOBACK_SUCCESS
			}

			strcpy(l_table_name,"MT_DEPO_PART");
		
			int_retval = CO_Chk_MasterStatus	(	l_key_codes,
														l_key_values,
														l_table_name,
														&int_result,
														l_debug_info_ptr);

			if (int_retval == APL_SUCCESS)
			{
				if (int_result == MAP_DET_NOTFND)
				{
					*int_p_result = ERR_DEPO_PART_NOTFND;

					CO_InsertErr(	l_debug_info_ptr,
							ERR_DEPO_PART_NOTFND,
							l_table_name,
							APL_NULL_STRING,
							APL_NULL_STRING, 
							__LINE__,
							__FILE__);
 					APL_GOBACK_SUCCESS
				}

				if (int_result == MAP_DET_UNAUTH)
				{
					*int_p_result = ERR_DEPO_PART_UNAUTH;

					CO_InsertErr(	l_debug_info_ptr, 
							ERR_DEPO_PART_UNAUTH,
							l_table_name,
							APL_NULL_STRING,
							APL_NULL_STRING,
							__LINE__,
							__FILE__);
 					APL_GOBACK_SUCCESS
				}
			}
		}
	}
	if(strcmp(p_ca_caevent_struct_h->h_div_class,"F"))
	{

		/*Smita - To Check Valid Code - HDFCCA_004 - Capital Reduction */
		if (strcmp(p_ca_caevent_struct_h->h_evt_class,EVT_CAP_RED) == 0)
		{
			int_retval = CO_Chk_CodeValid ( "FRACT_DISP_TYPE",                                        
					p_ca_caevent_struct_h->h_disp_of_fract,
					APL_DEF_COUNTRY_CODE,
					l_debug_info_ptr);

			if (int_retval == APL_FAILURE)
			{
				*int_p_result = ERR_INVALID_CODE;
				APL_GOBACK_SUCCESS
			}
		}
	}
	 APL_GOBACK_SUCCESS

	/*Smita - To Check Valid Code - HDFCCA_004 - Capital Reduction */

	RETURN_SUCCESS	:
	{
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
	}
	RETURN_FAILURE	:
	{
		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
	}

}

int CA_ChkHoliday(	CA_CAEVENT_STRUCT_H		*p_ca_caevent_struct_h,
							INTL_ENV_DATA_STRUCT_H  *p_intlenv_data_struct_h,
							DEBUG_INFO_STRUCT_H 		**l_debug_info_ptr)
{
	struct	sqlca	sqlca;
	int int_holiday_flag = 0;	
        short int_error_ind = APL_SUCCESS; /* VaibhavK 28Feb2008 ISKB: 720 */ 

	APL_IF_DEBUG
	{
		CO_ProcMonitor(		APL_OUT_FILE,"Entered CA_ChkHoliday function",NULL,p_intlenv_data_struct_h);
		printf("Event Type = |%s|\n",p_ca_caevent_struct_h->h_evt_class);
	}
	APL_FUNCTION_ENTER(APL_OUT_FILE)

       /* VaibhavK ISKB:720 Kotak 28Feb2008 "CO_InsertWarning" replaced by "CO_InsertErr" and Holiday 
          check for Response Deadline Date is added. */ 

	if (strcmp(p_ca_caevent_struct_h->h_evt_class,EVT_BUY_BACK) == 0)
	{
            printf("\n Hi !!!! this is VaibhavK......... Welcome to Holiday Chk Logic......Yooo........");
		if (strlen(p_ca_caevent_struct_h->h_ex_date)!=0)
		{
			APL_IF_DEBUG
			{
				printf("Check Ex_Date = |%s|\n",p_ca_caevent_struct_h->h_ex_date);
			}
			if	(	CO_Chk_Holiday(p_ca_caevent_struct_h->h_ex_date,
									&int_holiday_flag,
									l_debug_info_ptr,APL_NULL_STRING)	==	APL_FAILURE)
			{
				APL_GOBACK_FAIL
			}
			if	(int_holiday_flag)
				{	
					CO_InsertErr(l_debug_info_ptr,
								  ERR_DATE_IS_HOLIDAY,
								  "Ex Date ", 
								  APL_NULL_STRING,
								  APL_NULL_STRING,
								  __LINE__,
								  __FILE__);	
                                        int_error_ind = APL_FAILURE;                                         
				}	
		}
		if (strlen(p_ca_caevent_struct_h->h_ex_dt_bse)!=0)
		{
			APL_IF_DEBUG
			{
				printf("Check Ex_Date_BSE = |%s|\n",p_ca_caevent_struct_h->h_ex_dt_bse);
			}

			if (  CO_Chk_Holiday(	p_ca_caevent_struct_h->h_ex_dt_bse,
											&int_holiday_flag,
											l_debug_info_ptr,APL_NULL_STRING) == APL_FAILURE)
			{
				APL_GOBACK_FAIL
			}
			if (int_holiday_flag)
			{
				CO_InsertErr(l_debug_info_ptr,
										ERR_DATE_IS_HOLIDAY,
										"EX-Date(BSE)",
										APL_NULL_STRING,
										APL_NULL_STRING,
										__LINE__,
										__FILE__);
                                int_error_ind = APL_FAILURE;
			}
		}
		if (strlen(p_ca_caevent_struct_h->h_dealfrom_dt)!=0)
		{
			APL_IF_DEBUG
			{
				printf("Check Issue Open Dt = |%s|\n",p_ca_caevent_struct_h->h_dealfrom_dt);
			}
			if (  CO_Chk_Holiday(	p_ca_caevent_struct_h->h_dealfrom_dt,
											&int_holiday_flag,
											l_debug_info_ptr,APL_NULL_STRING) == APL_FAILURE)
			{
				APL_GOBACK_FAIL
			}
			if (int_holiday_flag)
			{
				CO_InsertErr(l_debug_info_ptr,
										ERR_DATE_IS_HOLIDAY,
										"Issue Open Date",
										APL_NULL_STRING,
										APL_NULL_STRING,
										__LINE__,
										__FILE__);
                                int_error_ind = APL_FAILURE;
			}
		}

		if (strlen(p_ca_caevent_struct_h->h_dealto_dt)!=0)
		{
			APL_IF_DEBUG
			{
				printf("Check Issue Close Dt = |%s|\n",p_ca_caevent_struct_h->h_dealto_dt);
			}

			if (  CO_Chk_Holiday(	p_ca_caevent_struct_h->h_dealto_dt,
											&int_holiday_flag,
											l_debug_info_ptr,APL_NULL_STRING) == APL_FAILURE)
			{
				APL_GOBACK_FAIL
			}
			if (int_holiday_flag)
			{
				CO_InsertErr(l_debug_info_ptr,
										ERR_DATE_IS_HOLIDAY,
										"Issue Close Date",
										APL_NULL_STRING,
										APL_NULL_STRING,
										__LINE__,
										__FILE__);
                                int_error_ind = APL_FAILURE;
			}
		}
		if (strlen(p_ca_caevent_struct_h->h_pymt_dt)!=0)
		{
			APL_IF_DEBUG
			{
				printf("Check Pay Dt = |%s|\n",p_ca_caevent_struct_h->h_pymt_dt);
			}


			if (  CO_Chk_Holiday(	p_ca_caevent_struct_h->h_pymt_dt,
											&int_holiday_flag,
											l_debug_info_ptr,APL_NULL_STRING) == APL_FAILURE)
			{
				APL_GOBACK_FAIL
			}
			if (int_holiday_flag)
			{
				CO_InsertErr(l_debug_info_ptr,
										ERR_DATE_IS_HOLIDAY,
										"Payment Date",
										APL_NULL_STRING,
										APL_NULL_STRING,
										__LINE__,
										__FILE__);
                                int_error_ind = APL_FAILURE;
			}
		}
		if (strlen(p_ca_caevent_struct_h->h_rec_date)!=0)
		{
			APL_IF_DEBUG
			{
				printf("Check Record Dt = |%s|\n",p_ca_caevent_struct_h->h_rec_date);
			}


			if (  CO_Chk_Holiday(	p_ca_caevent_struct_h->h_rec_date,
											&int_holiday_flag,
											l_debug_info_ptr,APL_NULL_STRING) == APL_FAILURE)
			{
				APL_GOBACK_FAIL
			}
			if (int_holiday_flag)
			{
				CO_InsertErr(l_debug_info_ptr,
										ERR_DATE_IS_HOLIDAY,
										"Record Date",
										APL_NULL_STRING,
										APL_NULL_STRING,
										__LINE__,
										__FILE__);
                                int_error_ind = APL_FAILURE;
			}
		}
		if (strlen(p_ca_caevent_struct_h->h_trans_dt)!=0)
		{
			APL_IF_DEBUG
			{
				printf("Check Trans Dt = |%s|\n",p_ca_caevent_struct_h->h_trans_dt);
			}


			if (  CO_Chk_Holiday(	p_ca_caevent_struct_h->h_trans_dt,
											&int_holiday_flag,
											l_debug_info_ptr,APL_NULL_STRING) == APL_FAILURE)
			{
				APL_GOBACK_FAIL
			}
			if (int_holiday_flag)
			{
				CO_InsertErr(l_debug_info_ptr,
										ERR_DATE_IS_HOLIDAY,
										"Trans Date",
										APL_NULL_STRING,
										APL_NULL_STRING,
										__LINE__,
										__FILE__);
                                int_error_ind = APL_FAILURE; 
			}
		}
                   /* VaibhavK Kotak ISKB:720 28Feb2008 check for Response deadline date is added. */
		if (strlen(p_ca_caevent_struct_h->h_respons_date)!=0)
		{
			APL_IF_DEBUG
			{
				printf("Check Response Dt = |%s|\n",p_ca_caevent_struct_h->h_respons_date);
			}


			if (  CO_Chk_Holiday(	p_ca_caevent_struct_h->h_respons_date,
											&int_holiday_flag,
											l_debug_info_ptr,APL_NULL_STRING) == APL_FAILURE)
			{
				APL_GOBACK_FAIL
			}
			if (int_holiday_flag)
			{
				CO_InsertErr(l_debug_info_ptr,
										ERR_DATE_IS_HOLIDAY,
										"Response Dealline Date",
										APL_NULL_STRING,
										APL_NULL_STRING,
										__LINE__,
										__FILE__);
                                int_error_ind = APL_FAILURE; 
			}
		}
		APL_GOBACK_SUCCESS
	}/*End of BB Event Date Chks*/		

	RETURN_SUCCESS	:
	{
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
	}
	RETURN_FAILURE	:
	{
		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
	}
}
/*Smita - HDFCCA_009 - Check Event Details and Event Date As Holidays*/

int Process_AttCorpAdj(	char *p_attach_corp_id,
								char *p_instr_code,
								char *p_ex_date,
								char *p_cln_code,
								int  p_priority,
								double p_ent_pos,
								double *p_future_pos,
								DEBUG_INFO_STRUCT_H        **l_debug_info_ptr)
{
	struct sqlca sqlca;
	CA_CAEVENT_STRUCT_H	l_attcaevent_struct_h;	
	CA_CAEVENT_STRUCT_I	l_attcaevent_struct_i;	
	double l_qty_due = 0.0;
	double l_qty_rec = 0.0;
	char l_resinstr_code[MT_INSTR_CODE_LEN] = APL_NULL_STRING;
		/** check Whether Attach Corp Id is Strored **/
	APL_FUNCTION_ENTER(APL_OUT_FILE)

	memset(&l_attcaevent_struct_h,0,sizeof(l_attcaevent_struct_h));
	memset(&l_attcaevent_struct_i,0,sizeof(l_attcaevent_struct_i));
	*p_future_pos = 0.0;
	if(!strlen(p_attach_corp_id))
	{
		Alert("No Attahced CorpID is Stored with the Event ");
		APL_GOBACK_SUCCESS
	}
    /*Changed by siva.ganapathi for ISKB_3300 on 12/01/2009 -- started*/
	Alert("Retrieving Attached Event");
	EXEC SQL SELECT *
				INTO :l_attcaevent_struct_h:l_attcaevent_struct_i
				FROM CAEVENT
				WHERE CORP_ID = :p_attach_corp_id
	                        /*AND INSTR_CODE	=	:p_instr_code*/	/** these 2 Conditions are added to make sure attached event is proper one**/
				AND RES_INSTR_CODE	=	:p_instr_code
				AND EX_DATE	=	:p_ex_date;

	/*Changed by siva.ganapathi for ISKB_3300 on 12/01/2009 -- Ended*/
	IS_ANY_ORA_ERROR
	if(sqlca.sqlcode == 1403)
	{
		Alert("No Event Found With Attahced Corp Id (%s), Instr (%s) Ex_date (%s)",p_attach_corp_id,p_instr_code,p_ex_date);
		Alert("Skipping Attached Pos Adj Calculation");
		APL_GOBACK_SUCCESS
	}

	Alert("2582 checking Priority %d",p_priority);
	if(l_attcaevent_struct_h.h_priority < p_priority)
	{
		Alert("Priority Of attahc Event is Proper (%d) And Current Event (%d)",l_attcaevent_struct_h.h_priority,p_priority);
	}
	else
	{
		Alert("Current event Is has More priority (%d), than Attached Event (%d)",p_priority,l_attcaevent_struct_h.h_priority);
		Alert("Skipping Attached Pos Adj Calculation");
		APL_GOBACK_SUCCESS
	}	
	if(strlen(l_attcaevent_struct_h.h_res_instr_code))
		strcpy(l_resinstr_code,l_attcaevent_struct_h.h_res_instr_code);
	else
		strcpy(l_resinstr_code,l_attcaevent_struct_h.h_res_instr_code_2);

	if(!strlen(l_resinstr_code))
	{
		if(strcmp(l_resinstr_code,p_instr_code))
		{
			Alert("Resultant Instrument Of Att event (%s)And Instrument of Cureent Event (%s)are different",l_resinstr_code,p_instr_code);
			Alert("Skipping Attached Pos Adj Calculation");
			APL_GOBACK_SUCCESS
		}
		else
		{
			Alert("Resultant Instrument Of Att event And Instrument of Cureent Event are Same(%s)",p_instr_code);
		}
	}

	Alert("Checking Status Of Attached Event");
	/** No calculation required for Paid And closed event as safek already got updated**/
	if(	!strcmp(l_attcaevent_struct_h.h_evt_stat,STATUS_RDY_PYMT)	||
			!strcmp(l_attcaevent_struct_h.h_evt_stat,STATUS_PART_PAID)   )
	{
		Alert("Status Of Attach evt Proper (%s)",l_attcaevent_struct_h.h_evt_stat);
	}
	else
	{
		Alert("Status Of Attach evt Proper (%s)",l_attcaevent_struct_h.h_evt_stat);
		/**Alert("Skipping Attached Pos Adj Calculation");**/
		/**APL_GOBACK_SUCCESS**/
	}
			
	Alert("Getting Quantity Due Of entitlements for Attach event(%s) And Respective Client(%s)",p_attach_corp_id,p_cln_code);
	/** No need Of CP, as Pos already updated **/
	EXEC SQL SELECT NVL(SUM(QUANTITY_BAL),0.0),
		  				 NVL(SUM(QUANTITY_RECEIVED),0.0)
				INTO 	:l_qty_due,
						:l_qty_rec
				FROM CAENTITLEMENT
				WHERE CORP_ID 	= :p_attach_corp_id
				AND 	CLIENT	=	:p_cln_code
				AND STATUS	IN ('RP','PP','CP');
	IS_ANY_ORA_ERROR

	Alert("Quantity Due is (%lf) ",l_qty_due);

	Alert("Quantity Rec is (%lf) ",l_qty_rec);


	if(	!strcmp(l_attcaevent_struct_h.h_evt_class,EVT_SPLIT) ||
			!strcmp(l_attcaevent_struct_h.h_evt_class,EVT_CV) )	
	{
		/* UAT Fix PJ parameters printed correctly */
		//if((strcmp(l_attcaevent_struct_h.h_evt_class,EVT_SPLIT)==0) && ((l_qty_due - l_qty_rec)==0))

                /* ISKB-373 : ASHISH 22-10-2007 */
		/*if((l_qty_due - l_qty_rec)==0)
		{
			*p_future_pos = p_ent_pos;
			Alert("Event is (%s)  and  Qty Due (%lf) == Qty Rec (%lf) Hence p_future_pos = p_ent_pos (%lf)",l_attcaevent_struct_h.h_evt_class,l_qty_due,l_qty_rec,p_ent_pos);
		}
		else
		{
		*p_future_pos = l_qty_due - l_qty_rec - p_ent_pos;
		Alert("Event is (%s) So we proceed with Qty Due (%lf) - Qty Rec (%lf) - Ent Pos (%lf) = (%lf)",l_attcaevent_struct_h.h_evt_class,l_qty_due,l_qty_rec,p_ent_pos,*p_future_pos);
	}
		*/
                /*Changed by siva.ganapathi for ISKB_3300 on 12/01/2009 -- started*/
		//*p_future_pos = l_qty_due - p_ent_pos;		
		*p_future_pos = l_qty_due ;

		Alert("In case 1 Event is (%s) So we proceed with Qty Due (%lf) - Ent Pos (%lf) = (%lf)",l_attcaevent_struct_h.h_evt_class,l_qty_due,p_ent_pos,*p_future_pos);
               /*Changed by siva.ganapathi for ISKB_3300 on 12/01/2009 -- Ended*/
	}

        /* ISKB-373:  ASHISH 06-12-2007 Start */
        else if(( !strcmp(l_attcaevent_struct_h.h_evt_class,EVT_CAP_RED ))||(!strcmp(l_attcaevent_struct_h.h_op_evt_class,EVT_BONUS_DEMER) && !strcmp(l_attcaevent_struct_h.h_evt_class,EVT_BONUS)))
        {
               Alert("\n Condition only for Event CR and Demerger \n");
               *p_future_pos = l_qty_due - l_qty_rec - p_ent_pos;
               Alert("In case 2 Event is (%s) So we proceed with Qty Due (%lf) - Qty Rec (%lf) - Ent Pos (%lf) = (%lf)",l_attcaevent_struct_h.h_evt_class,l_qty_due,l_qty_rec,p_ent_pos,*p_future_pos);
        }
        /* ISKB-373:  ASHISH 06-12-2007 End */

	else
	{
		/* *p_future_pos = l_qty_due - l_qty_rec; */
		*p_future_pos = l_qty_due;
		Alert("In case 3 Event is (%s) So we proceed with Qty Due (%lf) - Qty Rec (%lf) = (%lf)",l_attcaevent_struct_h.h_evt_class,l_qty_due,l_qty_rec,*p_future_pos);
	}
	Alert("Attach Event Adjustment is (%lf)",*p_future_pos);
	
APL_GOBACK_SUCCESS
RETURN_SUCCESS:
	APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
RETURN_FAILURE:
	APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
}
/*Added by siva.ganapathi for ISKB_3110 RETRO from HDFC on 30/11/2009 Started*/				  
/**********************************************************************************************************
*  Author : ASHISH                                                                                        *
*  Date   : 31-07-2008                                                                                    *
*  Function: daysInMonth()                                                                                *
*  Description : It finds the no. of days in month                                                        *
***********************************************************************************************************/

/* The following function finds out the total no. of days in month */

int daysInMonth(int month,int year,int *days_in_month)
{
	int numberOfDays = 0;

	CO_ProcMonitor(APL_OUT_FILE,"Enter in function daysInMonth().",NULL,NULL);

	if(month > 12)
	{
		CO_ProcMonitor(APL_OUT_FILE,"Wrong Month has been entered.",NULL,NULL);
		APL_GOBACK_FAIL;
	}
	if ((month == 4) || (month == 6) || (month == 9) || (month == 11))
	{
		 numberOfDays = 30;
	}
	else if (month == 2)
	{ 
		int isLeapYear = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
	  
		if (isLeapYear)
		{
			numberOfDays = 29;
		}
		else
		{
			numberOfDays = 28;
		}
	}
	else
	{
		numberOfDays = 31;
	}

	if(numberOfDays == 0)
	{
		APL_GOBACK_FAIL;
	}

	*days_in_month = numberOfDays;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)

	RETURN_FAILURE:
		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
}
/*Added by siva.ganapathi for ISKB_3110 RETRO from HDFC on 30/11/2009 Ended*/				  
