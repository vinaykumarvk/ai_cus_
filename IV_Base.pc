













 
#include "stdio_64.h"
#include "IV_Control_A.h"
#include "CR_Common.h"

EXEC SQL INCLUDE SQLCA.H;





int MT_Mod_BaseAdd( MS_BASENO_STRUCT_H *p_ms_baseno_struct_h_a,
					 int 				*int_p_retstat,
					 DEBUG_INFO_STRUCT_H	**l_debug_info_ptr)
{



struct sqlca sqlca;
char *chr_swftlx_ind;		
EXEC SQL BEGIN DECLARE SECTION;
MS_BASENO_STRUCT_H	l_ms_baseno_struct_h;
EXEC SQL VAR l_ms_baseno_struct_h.baseid IS STRING;
EXEC SQL VAR l_ms_baseno_struct_h.contact_details IS STRING;
EXEC SQL VAR l_ms_baseno_struct_h.access_stamp IS STRING;
EXEC SQL END DECLARE SECTION;

#ifdef APL_THREADS
		  APL_SET_CONTEXT
					 EXEC SQL CONTEXT USE :my_ctx_local;
					 #endif
	
	strcpy(l_ms_baseno_struct_h.baseid,p_ms_baseno_struct_h_a->baseid);
	strcpy(l_ms_baseno_struct_h.contact_details,p_ms_baseno_struct_h_a->contact_details);
	l_ms_baseno_struct_h.swift_tlx_gcn =p_ms_baseno_struct_h_a->swift_tlx_gcn;
	chr_swftlx_ind = (char *)malloc(sizeof(char) * 2);
	chr_swftlx_ind[0] = l_ms_baseno_struct_h.swift_tlx_gcn;
	chr_swftlx_ind[1] = APL_NULL_CHAR;	

	

	if (APL_FAILURE == CO_RtvSysDtTime(l_ms_baseno_struct_h.access_stamp,l_debug_info_ptr))
	{
		APL_GOBACK_FAIL;	
	}


	EXEC SQL INSERT INTO MS_BASE VALUES (:l_ms_baseno_struct_h.baseid,:l_ms_baseno_struct_h.contact_details,:l_ms_baseno_struct_h.swift_tlx_gcn,:l_ms_baseno_struct_h.access_stamp);
	
	
	IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_DUPLICATE_SWIFTTLX_ADDR,
												 l_ms_baseno_struct_h.contact_details,
												 chr_swftlx_ind,
												 APL_NULL_STRING);
	
	*int_p_retstat = IV_SUCCESS;
	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS:
		return APL_SUCCESS;

	RETURN_FAILURE:
		return APL_FAILURE;


}

int MT_Rtv_Base(	   MS_BASENO_STRUCT_H  *p_ms_baseno_struct_h_a,
							int 				*int_p_retstat,
							DEBUG_INFO_STRUCT_H 	**l_debug_info_ptr)
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
	MS_BASENO_STRUCT_H	l_ms_baseno_struct_h;



	EXEC SQL VAR l_ms_baseno_struct_h.baseid IS STRING;
	EXEC SQL VAR l_ms_baseno_struct_h.contact_details IS STRING;
	EXEC SQL VAR l_ms_baseno_struct_h.access_stamp IS STRING;

	


	EXEC SQL END DECLARE SECTION;


#ifdef APL_THREADS
		  APL_SET_CONTEXT
					 EXEC SQL CONTEXT USE :my_ctx_local;
					 #endif



	EXEC SQL SELECT * 
	INTO :l_ms_baseno_struct_h
	FROM MS_BASE
	WHERE CONTACT_DETAILS = :p_ms_baseno_struct_h_a->contact_details
			AND SWIFT_TLX_GCN = :p_ms_baseno_struct_h_a->swift_tlx_gcn;

	

	IS_ANY_ORA_ERROR

	if (sqlca.sqlcode == 1403)
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;	
		APL_GOBACK_FAIL;
	}
	*p_ms_baseno_struct_h_a = l_ms_baseno_struct_h;
	*int_p_retstat = IV_SUCCESS;

APL_GOBACK_SUCCESS;

	

RETURN_FAILURE:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting Out of BBDbSelIBASEFn unsuccessfully\n",NULL,NULL);
	}
	return (APL_FAILURE);

RETURN_SUCCESS:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting Out of BBDbSelIBASEFn successfully\n",NULL,NULL);
	}
	return (APL_SUCCESS);
}


int	MT_Mod_Base(MS_BASENO_STRUCT_H		*p_ms_baseno_struct_h_a,
						 int		*int_p_retstat,
						 DEBUG_INFO_STRUCT_H	**l_debug_info_ptr)
{
EXEC SQL BEGIN DECLARE SECTION;
MS_BASENO_STRUCT_H	l_ms_baseno_struct_h;

struct		sqlca sqlca;
char			chr_c_access_stamp[APL_DATE_LEN];

char			h_ora_rowid[APL_ROWID_LEN];
char			h_access_stamp[APL_DATE_LEN];
/* OPT:AIX */
char	*l_ptr_swf;
char l_swf_tlx[3];

EXEC SQL VAR h_ora_rowid IS STRING;
EXEC SQL VAR h_access_stamp IS STRING;

EXEC SQL VAR l_ms_baseno_struct_h.contact_details IS STRING;
EXEC SQL VAR l_ms_baseno_struct_h.access_stamp IS STRING;

EXEC SQL END DECLARE SECTION;
	
#ifdef APL_THREADS
		  APL_SET_CONTEXT
			EXEC SQL CONTEXT USE :my_ctx_local;
#endif

/* OPT:AIX */
l_swf_tlx[0]=(char )p_ms_baseno_struct_h_a->swift_tlx_gcn;
l_swf_tlx[1]='\0';
l_ptr_swf = l_swf_tlx;
printf("\n Should be same |%s|%c| \n",l_ptr_swf,p_ms_baseno_struct_h_a->swift_tlx_gcn);	 //AIX - Warnings Removal

	EXEC SQL SELECT BASEID,CONTACT_DETAILS,SWIFT_TLX_GCN,ACCESS_STAMP,ROWID
	INTO :l_ms_baseno_struct_h.baseid,:l_ms_baseno_struct_h.contact_details,:l_ms_baseno_struct_h.swift_tlx_gcn,:l_ms_baseno_struct_h.access_stamp,:h_ora_rowid
	FROM MS_BASE
	WHERE CONTACT_DETAILS = :p_ms_baseno_struct_h_a->contact_details
			AND SWIFT_TLX_GCN = :p_ms_baseno_struct_h_a->swift_tlx_gcn
			AND ACCESS_STAMP = :p_ms_baseno_struct_h_a->access_stamp	 
	FOR UPDATE OF BASEID;
	
	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_ACCESSSTAMP_CHGD,
														p_ms_baseno_struct_h_a->contact_details,
														/* p_ms_baseno_struct_h_a->swift_tlx_gcn, OPT:AIX */
														l_ptr_swf,
														APL_NULL_STRING)

	if (APL_FAILURE == CO_RtvSysDtTime(chr_c_access_stamp,l_debug_info_ptr ) )
		APL_GOBACK_FAIL;
	
	

	
	if(!strcmp(l_ms_baseno_struct_h.access_stamp,p_ms_baseno_struct_h_a->access_stamp)) 
	{
		EXEC SQL UPDATE MS_BASE
		SET
			BASEID =  :p_ms_baseno_struct_h_a->baseid,
			ACCESS_STAMP = :chr_c_access_stamp
		WHERE ROWID = :h_ora_rowid AND ACCESS_STAMP = :l_ms_baseno_struct_h.access_stamp; 

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_ACCESSSTAMP_CHGD,
															l_ms_baseno_struct_h.access_stamp,
															APL_NULL_STRING,
															APL_NULL_STRING);
	}
	*int_p_retstat = IV_SUCCESS;

	
      APL_GOBACK_SUCCESS//AIX Warning Removal 
	RETURN_SUCCESS:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting out of IBUpdIBASE successfully\n",NULL,NULL);
	}
		return APL_SUCCESS;

	RETURN_FAILURE:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting out of IBUpdIBASE unsuccessfully\n",NULL,NULL);
	}
		return APL_FAILURE;
}




int MT_Mod_BaseDel(	char 				*p_ora_rowid, 
						int 				*int_p_retstat,
						DEBUG_INFO_STRUCT_H	**l_debug_info_ptr)
{



struct sqlca sqlca;

char h_ora_rowid[APL_ROWID_LEN];

EXEC SQL VAR h_ora_rowid IS STRING;

#ifdef APL_THREADS
		  APL_SET_CONTEXT
					 EXEC SQL CONTEXT USE :my_ctx_local;
					 #endif

strcpy(h_ora_rowid,p_ora_rowid);
printf("the rowid passed is %s\n",h_ora_rowid);

	EXEC SQL DELETE FROM MS_BASE WHERE ROWID = :h_ora_rowid; 
	IS_ANY_ORA_ERROR
	
	printf("deleted rowid was %s\n",h_ora_rowid);
	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS;

	RETURN_SUCCESS:
		return APL_SUCCESS;
	RETURN_FAILURE:
		return APL_FAILURE;
}
