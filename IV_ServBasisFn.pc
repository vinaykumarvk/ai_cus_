




#include "IV_Control_A.h"

EXEC SQL INCLUDE SQLCA;



int IV_Rtv_IVSRVBasis(char *chr_p_client,long p_serv_code,char *chr_p_apl_frm_date,     
                      IV_CLIENT_SERV_BASIS_STRUCT *p_iv_client_serv_basis_struct_a,int *int_p_retstat,
		      DEBUG_INFO_STRUCT_H **l_debug_info_ptr)  /*  Modified by monica for kotak ISKB_1737 */
{                      


EXEC SQL BEGIN DECLARE SECTION;
char h_dl_client[APL_CLIENT_LENGTH];
long int_h_serv_code;
char h_apl_frm_date[9];  /* Added by monica for kotak ISKB_1737 */
IV_CLIENT_SERV_BASIS_STRUCT l_iv_client_serv_basis_structb;
I_IV_CLIENT_SERV_BASIS_STRUCT  l_i_iv_client_serv_basis_struct;
EXEC SQL VAR h_dl_client IS STRING;
EXEC SQL VAR h_apl_frm_date IS STRING;  /* Added by monica for kotak ISKB_1737 */
EXEC SQL VAR l_iv_client_serv_basis_structb.client IS STRING;
EXEC SQL VAR l_iv_client_serv_basis_structb.chrg_base IS STRING;
EXEC SQL VAR l_iv_client_serv_basis_structb.fees_base IS STRING;
EXEC SQL VAR l_iv_client_serv_basis_structb.dealadm_feeccy IS STRING;
/********** For Accounting Entries  vinay kalaskar  HDFCIV_005 *****************/
EXEC SQL VAR l_iv_client_serv_basis_structb.bill_acc IS STRING;
EXEC SQL VAR l_iv_client_serv_basis_structb.lst_bill_dt IS STRING;/* vinay */
EXEC SQL VAR l_iv_client_serv_basis_structb.pls_month IS STRING;/* Added by monica for kotak ISKB_1737 */
EXEC SQL VAR l_iv_client_serv_basis_structb.apl_frm_date IS STRING; /*  Added by monica for kotak ISKB_1737 */
EXEC SQL END DECLARE SECTION;

struct sqlca sqlca;

#ifdef APL_THREADS
        APL_SET_CONTEXT
        EXEC SQL CONTEXT USE :my_ctx_local;
#endif

strcpy(h_dl_client,chr_p_client);
int_h_serv_code = p_serv_code;
/*  Added by monica for kotak ISKB_1737 start*/
strcpy(h_apl_frm_date,chr_p_apl_frm_date);
//strcpy(h_apl_frm_date,"MAY-2020");
Alert("Apl from date is |%s|",h_apl_frm_date);
/*  Added by monica for kotak ISKB_1737 end*/
EXEC SQL SELECT client,service_cd,fees_base,chrg_base,
/********** For Accounting Entries  vinay kalaskar  HDFCIV_005 *****************/
                chrg_clas,fees_class,minimumfee,nil_fees,maximum_fee,DEALADM_FEECCY,bill_acc,
					 lst_bill_dt,b_freq,incld_in_ann_min_fee,pls_month,apl_frm_date	/*added incld_in_ann_min_fee by shruthi kumbla and pls_month & apl_frm_date by monica for ISKB_1737*/
	 INTO :l_iv_client_serv_basis_structb:l_i_iv_client_serv_basis_struct
         FROM IV_CLIENT_SERV_BASIS
         WHERE client = :h_dl_client AND
               service_cd = :int_h_serv_code AND
			   apl_frm_date = :h_apl_frm_date; /*  Added by monica for kotak ISKB_1737 */
			   
			 
	
if(sqlca.sqlcode < 0)
         *int_p_retstat = IV_CRITCAL_ERROR_IND;

IS_ANY_ORA_ERROR;
Alert("sqlca.sqlcode in IV_CLIENT_SERV_BASIS is |%d| for client  |%s| and service code |%ld|",sqlca.sqlcode,h_dl_client,int_h_serv_code);
if(sqlca.sqlcode == 1403)
{
	*int_p_retstat = IV_NO_DATA_FOUND_ERR;
	APL_GOBACK_FAIL;
}
else
{
	Alert("sqlca.sqlcode in IV_CLIENT_SERV_BASIS is |%d| for client  |%s| and service code |%ld|",sqlca.sqlcode,h_dl_client,int_h_serv_code);

	if(l_i_iv_client_serv_basis_struct.i_charge_class == -1)
	{
		l_iv_client_serv_basis_structb.chrg_clas = 'T';
		*int_p_retstat = IV_COLUMN_NULL_ERR;
	}
	if(l_i_iv_client_serv_basis_struct.i_fee_class == -1)
	{
		l_iv_client_serv_basis_structb.fees_class = 'T';
		*int_p_retstat = IV_COLUMN_NULL_ERR;
	}
	/*added by shruthi kumbla for ISKB_1737*/
	if(l_i_iv_client_serv_basis_struct.i_incld_in_ann_min_fee == -1)
	{
        	l_iv_client_serv_basis_structb.incld_in_ann_min_fee = 'N';
		
	}
	if(l_i_iv_client_serv_basis_struct.i_chrg_base == -1)
	{
		strcpy(l_iv_client_serv_basis_structb.chrg_base," ");
		*int_p_retstat = IV_COLUMN_NULL_ERR;
	}
	if(l_i_iv_client_serv_basis_struct.i_fees_base == -1)
	{
		strcpy(l_iv_client_serv_basis_structb.fees_base," ");
		*int_p_retstat = IV_COLUMN_NULL_ERR;
	}
	if(l_i_iv_client_serv_basis_struct.i_nil_fees == -1)
	{
		l_iv_client_serv_basis_structb.nil_fees = 0;
		*int_p_retstat = IV_COLUMN_NULL_ERR;
	}
	if(l_i_iv_client_serv_basis_struct.i_minimumfee == -1)
	{
		l_iv_client_serv_basis_structb.minimumfee = 0;
		*int_p_retstat = IV_COLUMN_NULL_ERR;
	}
	if(l_i_iv_client_serv_basis_struct.i_maximum_fee == -1)
	{
		l_iv_client_serv_basis_structb.maximum_fee = 0;
		*int_p_retstat = IV_COLUMN_NULL_ERR;
	}
}
if(*int_p_retstat == IV_COLUMN_NULL_ERR)
{
   APL_GOBACK_FAIL;
}
*int_p_retstat = IV_SUCCESS;
*p_iv_client_serv_basis_struct_a = l_iv_client_serv_basis_structb;
APL_GOBACK_SUCCESS;

RETURN_SUCCESS:
         return APL_SUCCESS;

RETURN_FAILURE:
         return APL_FAILURE;

}
