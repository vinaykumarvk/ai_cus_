

   
   
   
   
   
   
   
   
   
   
   
   




#include <CO_HostStructdef.h>

EXEC SQL INCLUDE sqlca;

#define FILENAME_LEN_A			80

int main(int argc,char **argv) //AIX - Warnings Removal
{
	DEBUG_INFO_STRUCT_H			*l_debug_info_ptr = NULL;
	/* Added by kotubabu for Linux Migration -Start*/
    #ifdef OS_LINUX
	FILE						*l_ptr_ini_file = NULL;
	FILE						*l_ptr_log_file = NULL;
    #else
	FILE *l_ptr_ini_file = APL_OUT_FILE;
    FILE *l_ptr_log_file = APL_OUT_FILE;
    #endif
    #ifdef OS_LINUX
     l_ptr_ini_file = APL_OUT_FILE;
	 l_ptr_log_file = APL_OUT_FILE;
    #endif
    /* Added by kotubabu  for Linux Migration -END*/
	INTL_ENV_DATA_STRUCT_H	l_intl_envdatastruct_h;
	char						chr_l_inifile[FILENAME_LEN_A]   = APL_NULL_STRING;
	char						chr_uname[APL_USERID_LEN]   = APL_NULL_STRING;
	char						chr_passwd[APL_PASSWD_LEN]  = APL_NULL_STRING;
	char						chr_custody_id_b[APL_USERID_LEN]  = APL_NULL_STRING;
	int						int_l_flg = 0;
	int						int_retval = 0;
	char						chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	struct sqlca			sqlca;

	memset(&l_intl_envdatastruct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H));
	
	

	strcpy(l_intl_envdatastruct_h.usr, argv[3]);
	strcpy(l_intl_envdatastruct_h.h_mode, argv[4]);
	strcpy(l_intl_envdatastruct_h.processtion, argv[5]);
	strcpy(l_intl_envdatastruct_h.auth_req, argv[6]);
	strcpy(l_intl_envdatastruct_h.subprocess, argv[7]);
	strcpy(l_intl_envdatastruct_h.h_process, argv[8]);
	
	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

	if ((l_ptr_ini_file = fopen(chr_l_inifile,"r")) == NULL)
		exit(-1);

	APL_FETCH_DB_LOGIN_DETAILS(l_ptr_ini_file,chr_custody_id_b,chr_uname,chr_passwd,APL_OUT_FILE,&l_debug_info_ptr)
	
	
	
	if (CO_DB_Connection_F(chr_uname,chr_passwd,&l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL

	

	
	

	int_retval = CO_Rtv_RptFileName("3V",APL_LOGFILE_DESC,100,argv[5],argv,&l_ptr_log_file,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL
	}

	

	EXEC SQL COMMIT WORK;
	
	if (sqlca.sqlcode != 0)
	{
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL
	}

	CO_ProcMonitor(l_ptr_log_file,"EOD - Reset Sequence Number",NULL,NULL);
	CO_ProcMonitor(l_ptr_log_file,"___________________________\n",NULL,NULL);
	
	CO_ProcMonitor(l_ptr_log_file,"Work Committed after chr_logfile creation \n",NULL,&l_intl_envdatastruct_h);

	

	if (CO_RtvSysParams(&l_debug_info_ptr) != APL_SUCCESS)
	{
		CO_ProcMonitor(l_ptr_log_file,"Unable to get system parameters - Rollback done \n",NULL,&l_intl_envdatastruct_h);
		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);
		
		EXEC SQL ROLLBACK WORK RELEASE;
		
		APL_GOBACK_FAIL	
	}

	
	 
	int_retval = CO_Proc_BtchLock(argv,l_ptr_log_file,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		CO_ProcMonitor(l_ptr_log_file,"Unable to lock BATCH_IN_PROC record - Rollback done \n",NULL,&l_intl_envdatastruct_h);
		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		EXEC SQL ROLLBACK WORK RELEASE;
		
		APL_GOBACK_FAIL
	}

	

	int_retval = EOD_DBProc_SqNoRst(l_ptr_log_file,&l_intl_envdatastruct_h,&l_debug_info_ptr);
	if (int_retval != APL_SUCCESS)
	{
		int_l_flg = 1;

	   CO_Proc_Exit(argv,l_ptr_log_file,&l_debug_info_ptr,int_l_flg);
		
		if (CO_ChkErr(l_debug_info_ptr) == APL_SUCCESS)
		{
			
			CO_ProcMonitor(l_ptr_log_file,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_envdatastruct_h);
			CO_FreeErrLst(&l_debug_info_ptr);

		}

		CO_ProcMonitor(l_ptr_log_file,"FAILURE from reset of sequence numbers at EOD program \n",NULL,&l_intl_envdatastruct_h);

		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		APL_GOBACK_FAIL	
	}
	else
	{
		int_l_flg = 0;

		CO_Proc_Exit(argv,l_ptr_log_file,&l_debug_info_ptr,int_l_flg);

		if (CO_ChkErr(l_debug_info_ptr) == APL_SUCCESS)
		{
			
			CO_ProcMonitor(l_ptr_log_file,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_envdatastruct_h);
			CO_FreeErrLst(&l_debug_info_ptr);

		}

		CO_ProcMonitor(l_ptr_log_file,"SUCCESS from reset of sequence numbers at EOD program \n",NULL,&l_intl_envdatastruct_h);

		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		APL_GOBACK_SUCCESS
	}

	RETURN_SUCCESS	: 
	{
		fclose(l_ptr_ini_file);
	   return(0);
	}

	RETURN_FAILURE	: 
	{
		fclose(l_ptr_ini_file);
  		return(-1);	
	}
}




int EOD_DBProc_SqNoRst(FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca  				sqlca;
	char							chr_l_recycle[2];
   char                    int_l_status[2]=APL_NULL_STRING;
   short                   i_status_ind=0;
	short							int_l_cond_exists=0; 
   EXEC SQL VAR int_l_status IS STRING;	
   
   
   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif


	CO_ProcMonitor(p_ptr_log_file,"Entered processtion EOD_DBProc_SqNoRst \n",NULL,p_intl_env_data_struct_h_d);
	
	sqlca.sqlcode = 0;

	strcpy((char *)chr_l_recycle,"D");
	/*Commented by siva.ganapathi for ISKB_2261 on 12/10/2009*/		
/*	EXEC SQL UPDATE PRO_GSEQNUM
	SET last_usednum = seq_start
	WHERE recycle_ind = :chr_l_recycle;*/

	/*Query Changed by siva.ganapathi for ISKB_2261 on 12/10/2009*/		
			
	EXEC SQL UPDATE PRO_GSEQNUM
	SET last_usednum = DECODE(seq_start,0,seq_start,seq_start - 1)
	WHERE recycle_ind = :chr_l_recycle;

	IS_ANY_ORA_ERROR

   if(CO_Chk_CntryEnabled(   "DW_MQ_MESSG",
                           "MQ_INSTALLED",
                            &int_l_cond_exists,
                            l_debug_info_ptr)==APL_FAILURE)
         APL_GOBACK_FAIL 
	if(int_l_cond_exists >0)
		{
  	 		EXEC SQL DECLARE PEND_MQ_DATA CURSOR FOR   
   		SELECT STATUS FROM PRO_MQ_DATA WHERE STATUS ='N' FOR UPDATE OF STATUS  NOWAIT;
   
   		IS_ANY_ORA_ERROR

 		  EXEC SQL OPEN PEND_MQ_DATA ;

 		  IS_ANY_ORA_ERROR
 
 		  EXEC SQL FETCH PEND_MQ_DATA INTO :int_l_status:i_status_ind;
   		IS_ANY_ORA_ERROR
   
   		if(APL_ZERO_RESULT_SET) 
     		{
        		EXEC SQL LOCK TABLE PRO_MQ_DATA IN EXCLUSIVE MODE NOWAIT;
       		 IS_ANY_ORA_ERROR

	        if(APL_FAILURE == EI_Proc_MQSeqRst(p_ptr_log_file,p_intl_env_data_struct_h_d,&l_debug_info_ptr))
   		     APL_GOBACK_FAIL

 		       EXEC SQL DELETE FROM PRO_MQ_DATA WHERE STATUS <>'N';
 		       IS_ANY_ORA_ERROR
 
 		       EXEC SQL COMMIT;  
     		}
     		EXEC SQL CLOSE PEND_MQ_DATA ; 
     		IS_ANY_ORA_ERROR
	  	}
	 else
		{
			EXEC SQL delete from  PRO_MQ_DATA;
         IS_ANY_ORA_ERROR
		}
	
   APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion EOD_DBProc_SqNoRst SUCCESS\n",NULL,p_intl_env_data_struct_h_d);
		
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion EOD_DBProc_SqNoRst FAILURE\n",NULL,p_intl_env_data_struct_h_d);
		
		return(APL_FAILURE);
	}
}


 
 int CO_DB_Connection_F(char *p_username,char *p_passwd,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca    sqlca;

	CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CO_DB_Connection_F \n",NULL,NULL);
	sqlca.sqlcode = 0;

	EXEC SQL CONNECT :p_username IDENTIFIED BY :p_passwd;

	if (sqlca.sqlcode != 0)
		APL_GOBACK_FAIL

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CO_DB_Connection_F SUCCESS \n",NULL,NULL);
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CO_DB_Connection_F FAILURE \n",NULL,NULL);
		return(APL_FAILURE);

	}
}


 
 int CO_Proc_Exit(char **argv,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr,int p_flg)
 {
	struct sqlca    sqlca;
	char				 chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CO_Proc_Exit \n",NULL,NULL);
	sqlca.sqlcode = 0;
	
	if (p_flg == 0)
	{
		

		if (CO_ChkErr(*l_debug_info_ptr) != APL_SUCCESS)
		{
			memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
			sprintf(chr_l_buf,"Finished EOD Reset of Sequence No");

			EXEC SQL UPDATE SYS_BATCHPROC
			SET stat_det = :chr_l_buf,
			    status = 'completed'
			WHERE process_name = :argv[0]
			AND   proc_init = :argv[1]
			AND STARTDATE = :argv[2]
			AND status = 'started';
			
			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
			
		}

		EXEC SQL COMMIT WORK RELEASE;
	
		CO_ProcMonitor(p_ptr_log_file,"Work Committed\n",NULL,NULL);
	}
	else if (p_flg == 1)
	{
		EXEC SQL ROLLBACK WORK RELEASE;
		
		CO_ProcMonitor(p_ptr_log_file,"Rollback done \n",NULL,NULL);
	}

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_Exit SUCCESS \n",NULL,NULL);
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_Exit FAILURE \n",NULL,NULL);
		return(APL_FAILURE);

	}
}


 
 int CO_Proc_BtchLock(char **argv,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca    sqlca;
   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;

EXEC SQL VAR chr_g_restart_data is string;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CO_Proc_BtchLock \n",NULL,NULL);
	
	sqlca.sqlcode = 0;

	EXEC SQL SELECT processing_status INTO :chr_g_restart_data:g_restart_data_i
	FROM SYS_BATCHPROC
	WHERE process_name = :argv[0]
	AND   proc_init = :argv[1]
	AND STARTDATE = :argv[2]
	AND status = 'started'
	FOR UPDATE OF processing_status,status;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_BtchLock SUCCESS \n",NULL,NULL);
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_BtchLock FAILURE \n",NULL,NULL);
		return(APL_FAILURE);

	}
}
