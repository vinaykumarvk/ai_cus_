/*
 **    COPYRIGHT NOTICE
 **
 **   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 **
 **   These materials are confidential and proprietary to
 **    Polaris Software Lab Limited and no part of these materials should
 **    be reproduced, published, transmitted or distributed in any form or
 **    by any means, electronic, mechanical, photocopying, recording or
 **    otherwise, or stored in any information storage or retrieval system
 **    of any nature nor should the materials be disclosed to third parties
 **    or used in any other manner for which this is not authorized, without
 **    the prior express written authorization of Polaris Software Lab Limited.
 **/
/*********************************************************************
 **
 ** Module Name         :      DEAL PROCESSING
 **
 ** File Name           :      DL_POOLACCRECS.pc
 **
 ** Description         :      
 **
 **
 **
 **            Version Control Block
 **
 ** Date        Version     Author           Description        RFS No.
 ** ---------   --------  ---------------  ------------------   ---------
 ** 16/02/2006   1.0       AMOL             New File            HDFCDL_010
 **************************************************************************/

#include<stdio_64.h>
#include "Intellect_Common.h"
#include "Intellect_Interface.h"
#include "DL_Interface.h"
#include "BT_Common.h"
#include "Intellect_Error.h"
#include "CO_IndStructdef.h"

EXEC SQL INCLUDE SQLCA.H;

int DL_ModDBDL_POOLACCRECS(DL_POOLACCRECS_STRUCT_H *p_dl_poolaccrecs_struct_h,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	   /* Variable Declarations */
	  DL_POOLACCRECS_STRUCT_I *p_dl_poolaccrecs_struct_i;


	  struct sqlca sqlca;

	  int   int_retval = APL_SUCCESS;
	  int chr_l_seq_num = 0;
	  PRO_GSEQNUM_STRUCT_H   *l_progseqnum_struct_h     = NULL;
		
	  
	  p_dl_poolaccrecs_struct_i=(DL_POOLACCRECS_STRUCT_I*)calloc(1,sizeof(DL_POOLACCRECS_STRUCT_I));
		APL_MALLOC_FAIL(p_dl_poolaccrecs_struct_i)

		/*Variable   Intialization */
		strcpy(p_dl_poolaccrecs_struct_h->h_file_batch_no,"1");	
		/* Depo Code will be available in the structure. It should not be always NSDL ... 
		strcpy(p_dl_poolaccrecs_struct_h->h_depo_code,"NSDL");
		*/
		/*Sequence Number Genereation*/
		l_progseqnum_struct_h = (PRO_GSEQNUM_STRUCT_H *)calloc(1,sizeof(PRO_GSEQNUM_STRUCT_H));
		memset(l_progseqnum_struct_h,NULL,sizeof(PRO_GSEQNUM_STRUCT_H));
		APL_MALLOC_FAIL(l_progseqnum_struct_h);
		memset(l_progseqnum_struct_h,NULL,sizeof(PRO_GSEQNUM_STRUCT_H));


		strcpy(l_progseqnum_struct_h->sequencename ,"DL_POOLACCRECS_SEQ");
		chr_l_seq_num=0;
		chr_l_seq_num = CO_RtvNxtSeqNum_OraSeq(l_progseqnum_struct_h , l_debug_info_ptr);
		if (APL_FAILURE == chr_l_seq_num)
		{
			CO_ProcMonitor(APL_OUT_FILE,"Failed To Get The Next Sequence Number For CMSGLINK\n",
					NULL,NULL);
			APL_GOBACK_FAIL
		}
		else
		{
			p_dl_poolaccrecs_struct_h->h_system_seq_no=chr_l_seq_num;

		}


																
		if (!strlen(p_dl_poolaccrecs_struct_h->h_file_batch_no)) p_dl_poolaccrecs_struct_i->i_file_batch_no=-1;
		     else p_dl_poolaccrecs_struct_i->i_file_batch_no =0;
		if (!strlen(p_dl_poolaccrecs_struct_h->h_instr_code)) p_dl_poolaccrecs_struct_i->i_instr_code=-1;
		     else p_dl_poolaccrecs_struct_i->i_instr_code =0;
		if (!strlen(p_dl_poolaccrecs_struct_h->h_benefactyp)) p_dl_poolaccrecs_struct_i->i_benefactyp=-1;
		     else p_dl_poolaccrecs_struct_i->i_benefactyp =0;
		if (!strlen(p_dl_poolaccrecs_struct_h->h_mkt_type)) p_dl_poolaccrecs_struct_i->i_mkt_type=-1;
		     else p_dl_poolaccrecs_struct_i->i_mkt_type =0;
		if (!strlen(p_dl_poolaccrecs_struct_h->h_settlemt_no)) p_dl_poolaccrecs_struct_i->i_settlemt_no=-1;
		     else p_dl_poolaccrecs_struct_i->i_settlemt_no =0;
		if (!strlen(p_dl_poolaccrecs_struct_h->h_bl_lc_code)) p_dl_poolaccrecs_struct_i->i_bl_lc_code=-1;
		     else p_dl_poolaccrecs_struct_i->i_bl_lc_code =0;
		if (!strlen(p_dl_poolaccrecs_struct_h->h_depo_code)) p_dl_poolaccrecs_struct_i->i_depo_code=-1;
		     else p_dl_poolaccrecs_struct_i->i_depo_code =0;
		if (!strlen(p_dl_poolaccrecs_struct_h->h_maker)) p_dl_poolaccrecs_struct_i->i_maker=-1;
		     else p_dl_poolaccrecs_struct_i->i_maker =0;
		if (!strlen(p_dl_poolaccrecs_struct_h->h_maker_dt)) p_dl_poolaccrecs_struct_i->i_maker_dt=-1;
		     else p_dl_poolaccrecs_struct_i->i_maker_dt =0;
		if (!strlen(p_dl_poolaccrecs_struct_h->h_access_stamp)) p_dl_poolaccrecs_struct_i->i_access_stamp=-1;
		     else p_dl_poolaccrecs_struct_i->i_access_stamp =0;
		if (!strlen(p_dl_poolaccrecs_struct_h->h_checker)) p_dl_poolaccrecs_struct_i->i_checker=-1;
		     else p_dl_poolaccrecs_struct_i->i_checker =0;
		if (!strlen(p_dl_poolaccrecs_struct_h->h_checker_dt)) p_dl_poolaccrecs_struct_i->i_checker_dt=-1;
		     else p_dl_poolaccrecs_struct_i->i_checker_dt =0;
		if (!strlen(p_dl_poolaccrecs_struct_h->h_status)) p_dl_poolaccrecs_struct_i->i_status=-1;
		     else p_dl_poolaccrecs_struct_i->i_status =0;
			  
		
		printf("\n\n*********************Before Insert*********************");
		/*printf("\nSystem_Seq_No |%d|, Length |%d|",p_dl_poolaccrecs_struct_h->h_system_seq_no,strlen(p_dl_poolaccrecs_struct_h->h_system_seq_no));
		printf("\nFile_Batch_No |%s|, Length |%d|",p_dl_poolaccrecs_struct_h->h_file_batch_no,strlen(p_dl_poolaccrecs_struct_h->h_file_batch_no));
		printf("\nInstr_Code |%s|, Length |%d|",p_dl_poolaccrecs_struct_h->h_instr_code,strlen(p_dl_poolaccrecs_struct_h->h_instr_code));
		printf("\nbenefactyp |%s|, Length |%d|",p_dl_poolaccrecs_struct_h->h_benefactyp,strlen(p_dl_poolaccrecs_struct_h->h_benefactyp));
		printf("\nbenef_accposn |%d|, Length |%d|",p_dl_poolaccrecs_struct_h->h_benef_accposn,strlen(p_dl_poolaccrecs_struct_h->h_benef_accposn));
		printf("\nmkt_type |%s|, Length |%d|",p_dl_poolaccrecs_struct_h->h_mkt_type,strlen(p_dl_poolaccrecs_struct_h->h_mkt_type));
		printf("\nsettlemt_no |%s|, Length |%d|",p_dl_poolaccrecs_struct_h->h_settlemt_no,strlen(p_dl_poolaccrecs_struct_h->h_settlemt_no));
		printf("\nbl_lc_code |%s|, Length |%d|",p_dl_poolaccrecs_struct_h->h_bl_lc_code,strlen(p_dl_poolaccrecs_struct_h->h_bl_lc_code));
		printf("\ndepo_code |%S|, Length |%d|",p_dl_poolaccrecs_struct_h->h_depo_code,strlen(p_dl_poolaccrecs_struct_h->h_depo_code));


	*/
		EXEC SQL INSERT INTO DL_POOLACCRECS VALUES (:p_dl_poolaccrecs_struct_h:p_dl_poolaccrecs_struct_i);
		if(sqlca.sqlcode)
		{
			printf("\n Failed SQLCODE is |%d|\n ",sqlca.sqlcode);
		 }
		IS_ANY_ORA_ERROR
		APL_GOBACK_SUCCESS							

		RETURN_SUCCESS: 

				printf("\n Sucess Inside OneToOne \n");		
		return(APL_SUCCESS);

		RETURN_FAILURE:
	
		printf("\n Error Inside OneToOne \n");
		return(APL_FAILURE);

} 
