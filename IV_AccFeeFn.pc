




#include "stdio_64.h"
#include <string.h> 
#include <stdlib.h> 
#include "IV_Control_A.h"

EXEC SQL INCLUDE SQLCA;



int IV_Mod_NewIVCUSTFEE(const IV_CLIENTFEE_STRUCT_H *p_iv_clientfee_struct_h_a,
            const INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h_a,
			int *int_p_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	char chr_l_existprevslab = 'N', chr_l_buffer1[BUFFER_LEN];
	char chr_l_isopenmaxexstfromfvalcur = 'N';
	int int_l_status = 0;

	EXEC SQL BEGIN DECLARE SECTION;

		int int_h_count = 0, int_h_count1 = 0;
		IV_CLIENTFEE_STRUCT_H l_iv_clientfee_struct_h;
//AIX - Warnings Removal
		I_IV_CLIENTFEE_STRUCT l_i_iv_clientfee_struct = {0, 0, 0, 0, 0, 
						0, 0, 0, 0, 0, 0 ,0};      /* Modified by Monica for ISKB_1737 */
		double dbl_h_maxexstfromfval = 0.0, h_max_frm_cbase = 0;
		double dbl_h_newslabtofval = 0.0; 
		short int int_i_max_fromc_basis = 0, int_i_newslabtofval = 0;
		short int int_i_count = 0, int_i_count1 = 0, int_i_maxexstfromfval = 0;
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

		Alert("Inside IV_Mod_NewIVCUSTFEE p_iv_clientfee_struct_h_a->apl_frm_date %s",p_iv_clientfee_struct_h_a->apl_frm_date);
	
	EXEC SQL SELECT NVL( COUNT(*), 0 )
		 INTO :int_h_count1 INDICATOR :int_i_count1
		 FROM IV_CLIENTFEE
		 WHERE ((CLIENT = :p_iv_clientfee_struct_h_a->client) AND
			(SERVICE_CD = :p_iv_clientfee_struct_h_a->service_cd) AND
			(PROC_DATA_VAL = :p_iv_clientfee_struct_h_a->proc_data_val) AND
			(FRM_FBASE = :p_iv_clientfee_struct_h_a->frm_fbase) AND
			(APL_FRM_DATE = :p_iv_clientfee_struct_h_a->apl_frm_date));	/* Added by Monica for ISKB_1737 */

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	if ( int_h_count1 )
	{
		EXEC SQL SELECT MAX(FRM_CBASE)
			 INTO :h_max_frm_cbase INDICATOR :int_i_max_fromc_basis
			 FROM IV_CLIENTFEE
			 WHERE ((CLIENT = :p_iv_clientfee_struct_h_a->client) AND
				(SERVICE_CD = :p_iv_clientfee_struct_h_a->service_cd) AND
				(PROC_DATA_VAL = :p_iv_clientfee_struct_h_a->proc_data_val) AND
				(FRM_FBASE = :p_iv_clientfee_struct_h_a->frm_fbase) AND
				(APL_FRM_DATE = :p_iv_clientfee_struct_h_a->apl_frm_date)); 	/* Added by Monica for ISKB_1737 */

		if ( sqlca.sqlcode < 0 )
		{
			char chr_l_buffer[KEY_LENGTH];

			memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

			ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

			*int_p_retstat = IV_CRITCAL_ERROR_IND;

			CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
				       APL_NULL_STRING, APL_NULL_STRING, 
				       __LINE__, __FILE__);

			APL_GOBACK_FAIL
		}

		if ( p_iv_clientfee_struct_h_a->frm_cbase < h_max_frm_cbase )
		{
			*int_p_retstat = IV_CRITCAL_ERROR_IND;

			CO_InsertErr(l_debug_info_ptr, ERR_INVALID_FROMVAL_FORCHRG, 
				       APL_NULL_STRING,  APL_NULL_STRING, 
				       APL_NULL_STRING, __LINE__, __FILE__);

			APL_GOBACK_FAIL
		}
		else if ( p_iv_clientfee_struct_h_a->frm_cbase == h_max_frm_cbase )
		{
			*int_p_retstat = IV_CRITCAL_ERROR_IND;

			CO_InsertErr(l_debug_info_ptr, ERR_FEE_SLAB_EXISTS, 
				       APL_NULL_STRING,  APL_NULL_STRING, 
				       APL_NULL_STRING, __LINE__, __FILE__);

			APL_GOBACK_FAIL
		}

		EXEC SQL UPDATE IV_CLIENTFEE
			 SET TOC_BASE = :p_iv_clientfee_struct_h_a->frm_cbase 
					  INDICATOR :l_i_iv_clientfee_struct.i_frm_cbase
			 WHERE ((CLIENT = :p_iv_clientfee_struct_h_a->client) AND
				(SERVICE_CD = :p_iv_clientfee_struct_h_a->service_cd) AND
				(PROC_DATA_VAL = :p_iv_clientfee_struct_h_a->proc_data_val) AND
				(FRM_FBASE = :p_iv_clientfee_struct_h_a->frm_fbase) AND 
				(APL_FRM_DATE = :p_iv_clientfee_struct_h_a->apl_frm_date)) AND  	/* Added by Monica for ISKB_1737 */
				(FRM_CBASE = :h_max_frm_cbase);

		

		if ( sqlca.sqlcode < 0 )
		{
			char chr_l_buffer[KEY_LENGTH];

			memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

			ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

			*int_p_retstat = IV_CRITCAL_ERROR_IND;

			CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
				       APL_NULL_STRING, APL_NULL_STRING, 
				       __LINE__, __FILE__);

			APL_GOBACK_FAIL
		}
	}
	else 
	{
	     

		if ( p_iv_clientfee_struct_h_a->frm_cbase )
		{
			*int_p_retstat = IV_CRITCAL_ERROR_IND;

			CO_InsertErr(l_debug_info_ptr, ERR_INVALID_FROMVAL_FORCHRG, 
				       APL_NULL_STRING, APL_NULL_STRING, 
				       APL_NULL_STRING, __LINE__, __FILE__);

			APL_GOBACK_FAIL
		}

	     

		EXEC SQL SELECT COUNT(*)
			 INTO :int_h_count INDICATOR :int_i_count
			 FROM IV_CLIENTFEE
			 WHERE ((CLIENT = :p_iv_clientfee_struct_h_a->client) AND
				(SERVICE_CD = :p_iv_clientfee_struct_h_a->service_cd) AND
				(PROC_DATA_VAL = :p_iv_clientfee_struct_h_a->proc_data_val) AND
				(FRM_FBASE > :p_iv_clientfee_struct_h_a->frm_fbase) AND 
				(APL_FRM_DATE = :p_iv_clientfee_struct_h_a->apl_frm_date));   	/* Added by Monica for ISKB_1737 */

		if ( sqlca.sqlcode < 0 )
		{
			char chr_l_buffer[KEY_LENGTH];

			memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

			ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

			*int_p_retstat = IV_CRITCAL_ERROR_IND;

			CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
				       APL_NULL_STRING, APL_NULL_STRING, 
				       __LINE__, __FILE__);

			APL_GOBACK_FAIL
		}

		if ( int_h_count )
		{
			*int_p_retstat = IV_CRITCAL_ERROR_IND;

			CO_InsertErr(l_debug_info_ptr, ERR_INVALID_FROMVAL_FORFEE, 
				       APL_NULL_STRING, APL_NULL_STRING, 
				       APL_NULL_STRING, __LINE__, __FILE__);

			APL_GOBACK_FAIL
		}

		EXEC SQL DECLARE MaxExstFromfValCur CURSOR FOR
			 SELECT MAX(FRM_FBASE)
			 FROM IV_CLIENTFEE
			 WHERE ((CLIENT = :p_iv_clientfee_struct_h_a->client) AND
				(SERVICE_CD = :p_iv_clientfee_struct_h_a->service_cd) AND
				(PROC_DATA_VAL = :p_iv_clientfee_struct_h_a->proc_data_val) AND
				(FRM_FBASE < :p_iv_clientfee_struct_h_a->frm_fbase) AND
				(APL_FRM_DATE = :p_iv_clientfee_struct_h_a->apl_frm_date));   	/* Added by Monica for ISKB_1737 */

		EXEC SQL OPEN MaxExstFromfValCur;

		EXEC SQL FETCH MaxExstFromfValCur
			 INTO :dbl_h_maxexstfromfval INDICATOR :int_i_maxexstfromfval;

		if ( sqlca.sqlcode < 0 )
		{
			char chr_l_buffer[KEY_LENGTH];

			memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

			ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

			*int_p_retstat = IV_CRITCAL_ERROR_IND;

			CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
				       APL_NULL_STRING, APL_NULL_STRING, 
				       __LINE__, __FILE__);

			APL_GOBACK_FAIL
		}

		if ( (int_i_maxexstfromfval == -1) && (p_iv_clientfee_struct_h_a->frm_fbase) )
		{
			*int_p_retstat = IV_CRITCAL_ERROR_IND;

			CO_InsertErr(l_debug_info_ptr, ERR_INVALID_FROMVAL_FORFEE, 
				       APL_NULL_STRING, APL_NULL_STRING, 
				       APL_NULL_STRING, __LINE__, __FILE__);

			APL_GOBACK_FAIL
		}

		if ( !int_i_maxexstfromfval )
		{
			chr_l_isopenmaxexstfromfvalcur = 'Y';

			EXEC SQL UPDATE IV_CLIENTFEE
				 SET TOF_BASE = :p_iv_clientfee_struct_h_a->frm_fbase
				 WHERE ((CLIENT = :p_iv_clientfee_struct_h_a->client) AND
					(SERVICE_CD = :p_iv_clientfee_struct_h_a->service_cd) AND
					(PROC_DATA_VAL = :p_iv_clientfee_struct_h_a->proc_data_val) AND
					(APL_FRM_DATE = :p_iv_clientfee_struct_h_a->apl_frm_date) AND    	/* Added by Monica for ISKB_1737 */
					(FRM_FBASE = :dbl_h_maxexstfromfval));

			if ( sqlca.sqlcode < 0 )
			{
				char chr_l_buffer[KEY_LENGTH];

				memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

				ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

				*int_p_retstat = IV_CRITCAL_ERROR_IND;

				CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer,
					       APL_NULL_STRING, APL_NULL_STRING,
					       __LINE__, __FILE__);

				APL_GOBACK_FAIL
			}
			else if ( sqlca.sqlcode == 1403 )
			{
				*int_p_retstat = IV_CRITCAL_ERROR_IND;

				CO_InsertErr(l_debug_info_ptr, ERR_ACCESSSTAMP_CHGD, 
					       APL_NULL_STRING, APL_NULL_STRING,
					       APL_NULL_STRING, __LINE__, 
					       __FILE__);

				APL_GOBACK_FAIL
			}

		} 

		EXEC SQL CLOSE MaxExstFromfValCur;

		chr_l_isopenmaxexstfromfvalcur = 'N';

	} 

	

	strcpy(l_iv_clientfee_struct_h.client, p_iv_clientfee_struct_h_a->client);
	l_iv_clientfee_struct_h.service_cd = p_iv_clientfee_struct_h_a->service_cd;

	strcpy(l_iv_clientfee_struct_h.proc_data_val, p_iv_clientfee_struct_h_a->proc_data_val);
	strcpy(l_iv_clientfee_struct_h.group_id, p_iv_clientfee_struct_h_a->group_id);

	l_iv_clientfee_struct_h.frm_cbase = p_iv_clientfee_struct_h_a->frm_cbase;
	l_iv_clientfee_struct_h.frm_fbase = p_iv_clientfee_struct_h_a->frm_fbase;
	/* Added for Bill Dependency -START*/
	if(strcmp(p_intl_envdatastruct_h_a->h_process,"U") !=0)
	l_iv_clientfee_struct_h.toc_base = IV_TO_BASIS_MAX;
	else
	    l_iv_clientfee_struct_h.toc_base = p_iv_clientfee_struct_h_a->toc_base;
    /* Added for Bill Dependency END*/	
	l_iv_clientfee_struct_h.schdl_fee = p_iv_clientfee_struct_h_a->schdl_fee;
	l_iv_clientfee_struct_h.fee_type = p_iv_clientfee_struct_h_a->fee_type;/*** vinay ****/
	l_iv_clientfee_struct_h.service_stat = NULL;
	l_i_iv_clientfee_struct.i_service_stat = -1;
	strcpy(l_iv_clientfee_struct_h.apl_frm_date, p_iv_clientfee_struct_h_a->apl_frm_date);    	/* Added by Monica for ISKB_1737 */

	Alert(" l_iv_clientfee_struct_h.apl_frm_date %s",l_iv_clientfee_struct_h.apl_frm_date);

	EXEC SQL SELECT DISTINCT(TOF_BASE)
		 INTO :dbl_h_newslabtofval INDICATOR :int_i_newslabtofval
		 FROM IV_CLIENTFEE
		 WHERE ((CLIENT = :p_iv_clientfee_struct_h_a->client) AND
			(SERVICE_CD = :p_iv_clientfee_struct_h_a->service_cd) AND
			(PROC_DATA_VAL = :p_iv_clientfee_struct_h_a->proc_data_val) AND
			(FRM_FBASE = :p_iv_clientfee_struct_h_a->frm_fbase) AND 
			(APL_FRM_DATE = :p_iv_clientfee_struct_h_a->apl_frm_date));   	/* Added by Monica for ISKB_1737 */

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}
	else if APL_ZERO_RESULT_SET
	{
		l_iv_clientfee_struct_h.tof_base = IV_TO_BASIS_MAX;
	}
	
	if ( !sqlca.sqlcode )
	{
		l_iv_clientfee_struct_h.tof_base = dbl_h_newslabtofval;
	}

	EXEC SQL INSERT INTO IV_CLIENTFEE
		 VALUES (:l_iv_clientfee_struct_h INDICATOR :l_i_iv_clientfee_struct);

	*int_p_retstat = IV_CRITCAL_ERROR_IND;

	memset(chr_l_buffer1, APL_NULL_CHAR, BUFFER_LEN);
	ltoa_r(l_iv_clientfee_struct_h.service_cd, chr_l_buffer1, BUFFER_LEN - 1);

	IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_FEES_EXIST, l_iv_clientfee_struct_h.client, 
					  chr_l_buffer1, l_iv_clientfee_struct_h.proc_data_val)

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of IV_Mod_NewIVCUSTFEE().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		if ( chr_l_isopenmaxexstfromfvalcur == 'Y' )
		{
			EXEC SQL CLOSE MaxExstFromfValCur;
		}

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of IV_Mod_NewIVCUSTFEE().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_Mod_IVCUSTFEEChg(const IV_CLIENTFEE_STRUCT_H *p_iv_clientfee_struct_h_a, int *int_p_retstat, 
		    DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	char chr_l_buffer1[BUFFER_LEN];

	EXEC SQL BEGIN DECLARE SECTION;

		char chr_h_srv_status = NULL;
		short int int_i_srv_status = 0, i_schdl_fee = 0;
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	EXEC SQL SELECT SERVICE_STAT
		 INTO :chr_h_srv_status INDICATOR :int_i_srv_status
		 FROM IV_CLIENTFEE
		 WHERE ((CLIENT = :p_iv_clientfee_struct_h_a->client) AND
			(SERVICE_CD = :p_iv_clientfee_struct_h_a->service_cd) AND
			(PROC_DATA_VAL = :p_iv_clientfee_struct_h_a->proc_data_val) AND
			(FRM_FBASE = :p_iv_clientfee_struct_h_a->frm_fbase) AND
			(FRM_CBASE = :p_iv_clientfee_struct_h_a->frm_cbase) AND 
			(APL_FRM_DATE = :p_iv_clientfee_struct_h_a->apl_frm_date));   	/* Added by Monica for ISKB_1737 */

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}
	else if ( sqlca.sqlcode == 1403 )
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		CO_InsertErr(l_debug_info_ptr, ERR_FEE_SLAB_NOTFND, APL_NULL_STRING,
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	if ( chr_h_srv_status  == 'D')  
	{
		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, ERR_BTWGENDELV_CANTDEL_FEE, APL_NULL_STRING,
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	EXEC SQL UPDATE IV_CLIENTFEE
		 SET SCHDL_FEE = :p_iv_clientfee_struct_h_a->schdl_fee INDICATOR :i_schdl_fee
		 WHERE ((CLIENT = :p_iv_clientfee_struct_h_a->client) AND
			(SERVICE_CD = :p_iv_clientfee_struct_h_a->service_cd) AND
			(PROC_DATA_VAL = :p_iv_clientfee_struct_h_a->proc_data_val) AND
			(FRM_FBASE = :p_iv_clientfee_struct_h_a->frm_fbase) AND
			(FRM_CBASE = :p_iv_clientfee_struct_h_a->frm_cbase) AND 
			(APL_FRM_DATE = :p_iv_clientfee_struct_h_a->apl_frm_date));    	/* Added by Monica for ISKB_1737 */

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of IV_Mod_IVCUSTFEEChg().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of IV_Mod_IVCUSTFEEChg().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}
	
		return APL_FAILURE;
}



int IV_Mod_DelIVCSTFEEAllParam(const IV_CLIENTFEE_STRUCT_H *p_iv_clientfee_struct_h_a, 
			       int *int_p_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	EXEC SQL BEGIN DECLARE SECTION;
/*added by Monica for ISKB_1737 start*/
		 char  chr_b_prev_date[APL_DATE_LEN] =  APL_NULL_STRING;
		short int int_i_b_prev_date = 0;
		char chr_b_gen_ind[2] =  APL_NULL_STRING;
		short int int_i_gen_ind = 0;
/*added by Monica for ISKB_1737 end*/	
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	/*added by Monica for ISKB_1737 start*/
	
	EXEC SQL SELECT B_GEN_IND,TO_CHAR(TO_DATE(B_PREV_DATE, 'DD/MM/YYYY hh24:mi:ss'), 'MON-YYYY')
		 INTO :chr_b_gen_ind:int_i_gen_ind,:chr_b_prev_date:int_i_b_prev_date
		 FROM SYS_IVCONTROLPARAM;

	IS_ANY_ORA_ERROR	
	
	Alert(" chr_b_gen_ind %s",chr_b_gen_ind);
	Alert(" chr_b_prev_date %s",chr_b_prev_date);
       Alert(" p_apl_frm_date %s",p_iv_clientfee_struct_h_a->apl_frm_date);
		
		
	if( (strcmp(chr_b_gen_ind,"Y") == 0) && (strcmp(chr_b_prev_date,p_iv_clientfee_struct_h_a->apl_frm_date) == 0)) 
	{
	
		printf("\n Record cannot be deleted since bill is already generated for the Applicable From date ");	  
				CO_InsertErr(l_debug_info_ptr, ERR_BILL_ALRDY_GENERATED, APL_NULL_STRING, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

			APL_GOBACK_FAIL	
			
	}
	else
	{
		
		printf("\n Before deleting in IV_Mod_DelIVCSTFEEAllParam  ");	  
			
	
	EXEC SQL DELETE FROM IV_CLIENTFEE
		 WHERE ((CLIENT = :p_iv_clientfee_struct_h_a->client) AND
			(SERVICE_CD = :p_iv_clientfee_struct_h_a->service_cd) AND
			(APL_FRM_DATE = :p_iv_clientfee_struct_h_a->apl_frm_date));
	/*added by Monica for ISKB_1737 end*/
	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of IV_Mod_DelIVCSTFEEAllParam().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of IV_Mod_DelIVCSTFEEAllParam().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_Mod_DelIVCUSTFEEMarkSlab(const IV_CLIENTFEE_STRUCT_H *p_iv_clientfee_struct_h_a, int *int_p_retstat, 
			    DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	EXEC SQL BEGIN DECLARE SECTION;

		char chr_h_srvstatus = NULL;
		char chr_h_rowid[APL_ROWID_LEN];
		EXEC SQL VAR chr_h_rowid IS STRING;
		short int int_i_rowid = 0, int_i_srvstatus = 0;
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	EXEC SQL SELECT SERVICE_STAT
		 INTO :chr_h_srvstatus INDICATOR :int_i_srvstatus
		 FROM IV_CLIENTFEE
		 WHERE ((CLIENT = :p_iv_clientfee_struct_h_a->client) AND
			(SERVICE_CD = :p_iv_clientfee_struct_h_a->service_cd) AND
			(PROC_DATA_VAL = :p_iv_clientfee_struct_h_a->proc_data_val)AND
			(FRM_FBASE = :p_iv_clientfee_struct_h_a->frm_fbase) AND
			(FRM_CBASE = :p_iv_clientfee_struct_h_a->frm_cbase) AND 
			(APL_FRM_DATE = :p_iv_clientfee_struct_h_a->apl_frm_date));	/*added by Monica for ISKB_1737 */

		Alert("inside IV_Mod_DelIVCUSTFEEMarkSlab p_iv_clientfee_struct_h_a->apl_frm_date %s",p_iv_clientfee_struct_h_a->apl_frm_date);
	
		Alert ("sqlca.sqlcode b is %d", sqlca.sqlcode);

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	if ( sqlca.sqlcode == 1403 )
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		APL_GOBACK_FAIL
	}

	if ( !int_i_srvstatus && (chr_h_srvstatus == 'D') )
	{
		CO_InsertErr(l_debug_info_ptr, ERR_BTWGENDELV_CANTDEL_FEE, APL_NULL_STRING, 
			       APL_NULL_STRING, APL_NULL_STRING, __LINE__, 
			       __FILE__);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		APL_GOBACK_FAIL
	}

	EXEC SQL UPDATE IV_CLIENTFEE
		 SET SERVICE_STAT = 'D'
		 WHERE ((CLIENT = :p_iv_clientfee_struct_h_a->client) AND
			(SERVICE_CD = :p_iv_clientfee_struct_h_a->service_cd) AND
			(PROC_DATA_VAL = :p_iv_clientfee_struct_h_a->proc_data_val)AND
			(FRM_FBASE = :p_iv_clientfee_struct_h_a->frm_fbase) AND
			(FRM_CBASE = :p_iv_clientfee_struct_h_a->frm_cbase) AND
			(APL_FRM_DATE = :p_iv_clientfee_struct_h_a->apl_frm_date));	/*added by Monica for ISKB_1737 */

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of IV_Mod_DelIVCUSTFEEMarkSlab().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);	
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of IV_Mod_DelIVCUSTFEEMarkSlab().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);	
		}

		return APL_FAILURE;
}



int IV_Mod_DelIVCSTFEEAnySlabIsExist(const char *p_client, int *int_p_retstat, 
				DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	EXEC SQL BEGIN DECLARE SECTION;

		int int_h_count = 0;
		short int int_i_count = 0;
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	EXEC SQL SELECT NVL( COUNT(*), 0 )
		 INTO :int_h_count INDICATOR :int_i_count
		 FROM IV_CLIENTFEE
		 WHERE ((CLIENT = :p_client) AND
			(SERVICE_STAT = 'D'));

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	if ( !int_h_count )
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		APL_GOBACK_FAIL
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of IV_Mod_DelIVCSTFEEAnySlabIsExist().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);	
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of IV_Mod_DelIVCSTFEEAnySlabIsExist().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);	
		}

		return APL_FAILURE;
}



int IV_Chk_DelIVCSTFEEDelAllParam(const char *p_client, const long p_servcode, const char *p_apl_frm_date,	/*added by Monica for ISKB_1737 */
				  int *int_p_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	EXEC SQL BEGIN DECLARE SECTION;

		int int_h_count1 = 0, int_h_count2 = 0;
		short int int_i_count1 = 0, int_i_count2 = 0;
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	EXEC SQL SELECT NVL( COUNT(*), 0 )
		 INTO :int_h_count1 INDICATOR :int_i_count1
		 FROM IV_CLIENTFEE
		 WHERE ((CLIENT = :p_client) AND
			(SERVICE_CD = :p_servcode) AND
			(APL_FRM_DATE = :p_apl_frm_date));	/*added by Monica for ISKB_1737 */

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	if ( !int_h_count1 )
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		APL_GOBACK_FAIL
	}

	EXEC SQL SELECT NVL( COUNT(*), 0 )
		 INTO :int_h_count2 INDICATOR :int_i_count2
		 FROM IV_CLIENTFEE
		 WHERE ((CLIENT = :p_client) AND
			(SERVICE_CD = :p_servcode) AND
			(APL_FRM_DATE = :p_apl_frm_date) AND	/*added by Monica for ISKB_1737 */
			(SERVICE_STAT = 'D'));

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	if ( int_h_count1 == int_h_count2 )
	{
		*int_p_retstat = IV_SUCCESS;

		APL_GOBACK_SUCCESS
	}
	else
	{
		*int_p_retstat = IV_SUCCESS;

		APL_GOBACK_FAIL
	}

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of IV_Chk_DelIVCSTFEEDelAllParam().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);	
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of IV_Chk_DelIVCSTFEEDelAllParam().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);	
		}

		return APL_FAILURE;
}



int IV_Chk_DelIVCSTFEEParam(const char *p_client, const long p_servcode, 
			       const char *p_paramval, const char *p_apl_frm_date, int *int_p_retstat, 
			       DEBUG_INFO_STRUCT_H **l_debug_info_ptr)  /* Added apl_frm_date by monica for kotak ISKB_1737 */
{
	

	

	EXEC SQL BEGIN DECLARE SECTION;

		int int_h_count1 = 0, int_h_count2 = 0;
		short int int_i_count1 = 0, int_i_count2 = 0;
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	EXEC SQL SELECT NVL( COUNT(*), 0  )
		 INTO :int_h_count1 INDICATOR :int_i_count1
		 FROM IV_CLIENTFEE
		 WHERE ((CLIENT = :p_client) AND
			(SERVICE_CD = :p_servcode) AND
			(PROC_DATA_VAL = :p_paramval) AND
			(APL_FRM_DATE = :p_apl_frm_date));   /* Added apl_frm_date by monica for kotak ISKB_1737 */
			
		Alert(" int_h_count1 %d",int_h_count1);

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	if ( !int_h_count1 )
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		APL_GOBACK_FAIL
	}

	EXEC SQL SELECT NVL( COUNT(*), 0  )
		 INTO :int_h_count2 INDICATOR :int_i_count2
		 FROM IV_CLIENTFEE
		 WHERE ((CLIENT = :p_client) AND
			(SERVICE_CD = :p_servcode) AND
			(PROC_DATA_VAL = :p_paramval) AND
			(APL_FRM_DATE = :p_apl_frm_date) AND  /* Added apl_frm_date by monica for kotak ISKB_1737 */
			(SERVICE_STAT IS NOT NULL));

			Alert("int_h_count2  %d",int_h_count2);

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	if ( int_h_count2 == int_h_count1 )
	{
		*int_p_retstat = IV_SUCCESS;

		APL_GOBACK_SUCCESS
	}
	else
	{
		*int_p_retstat = IV_SUCCESS;

		APL_GOBACK_FAIL
	}

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of IV_Chk_DelIVCSTFEEParam().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of IV_Chk_DelIVCSTFEEParam().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_Mod_DelIVCSTFEEParam(const char *p_client, const long p_servcode, 
			    const char *p_paramval, const char *p_apl_frm_date, int *int_p_retstat, 
			    DEBUG_INFO_STRUCT_H **l_debug_info_ptr)    /* Added apl_frm_date by monica for kotak ISKB_1737 */
{
	

	

	EXEC SQL BEGIN DECLARE SECTION;

	/*added by Monica for ISKB_1737 start*/
		 char  chr_b_prev_date[APL_DATE_LEN] =  APL_NULL_STRING;
		short int int_i_b_prev_date = 0;
		char chr_b_gen_ind[2] =  APL_NULL_STRING;
		short int int_i_gen_ind = 0;
/*added by Monica for ISKB_1737 end*/
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

/*added by Monica for ISKB_1737 start*/	
Alert(" apl_frm_date in IV_Mod_DelIVCSTFEEParam %s",p_apl_frm_date);
	
	 
	
	EXEC SQL SELECT B_GEN_IND,TO_CHAR(TO_DATE(B_PREV_DATE, 'DD/MM/YYYY hh24:mi:ss'), 'MON-YYYY')
		 INTO :chr_b_gen_ind:int_i_gen_ind,:chr_b_prev_date:int_i_b_prev_date
		 FROM SYS_IVCONTROLPARAM;

	IS_ANY_ORA_ERROR	
	
	Alert(" chr_b_gen_ind %s",chr_b_gen_ind);
	Alert(" chr_b_prev_date %s",chr_b_prev_date);
	Alert(" p_apl_frm_date %s",p_apl_frm_date);
		
		
	if( (strcmp(chr_b_gen_ind,"Y") == 0) && (strcmp(chr_b_prev_date,p_apl_frm_date) == 0)) 
	{
	
		printf("\n Record cannot be deleted since bill is already generated for the Applicable From date ");	  
				CO_InsertErr(l_debug_info_ptr, ERR_BILL_ALRDY_GENERATED, APL_NULL_STRING, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

			APL_GOBACK_FAIL	
			
	}
	else
	{
		
		printf("\n Before deleting in IV_Mod_DelIVCSTFEEAllParam  ");	  
			
	EXEC SQL DELETE FROM IV_CLIENTFEE
		 WHERE ((CLIENT = :p_client) AND
			(SERVICE_CD = :p_servcode) AND
			(PROC_DATA_VAL = :p_paramval) AND
			(APL_FRM_DATE = :p_apl_frm_date));     /* Added apl_frm_date by monica for kotak ISKB_1737 */
/*added by Monica for ISKB_1737 end*/	
	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	}
	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of IV_Mod_DelIVCSTFEEParam().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of IV_Mod_DelIVCSTFEEParam().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_Mod_NewIVCUSTFEETxnAdm(const IV_CLIENTFEE_STRUCT_H *p_iv_clientfee_struct_h_a, int *int_p_retstat, 
			  DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	EXEC SQL BEGIN DECLARE SECTION;

		double dbl_h_fee = 0.0;
		IV_CLIENTFEE_STRUCT_H l_iv_clientfee_struct_h;
		EXEC SQL VAR l_iv_clientfee_struct_h.client IS STRING;
		EXEC SQL VAR l_iv_clientfee_struct_h.proc_data_val IS STRING;
		EXEC SQL VAR l_iv_clientfee_struct_h.group_id IS STRING;
		EXEC SQL VAR l_iv_clientfee_struct_h.apl_frm_date IS STRING;   	/* Added by Monica for ISKB_1737 */

		short int int_i_fee = 0;
		I_IV_CLIENTFEE_STRUCT l_i_iv_clientfee_struct = {0, 0, 0, 0, 0, 0, 0, 0, 0,0,0, 0}; //AIX - Warnings Removal  /* modified by monica for ISKB_1737*/
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	l_iv_clientfee_struct_h = *p_iv_clientfee_struct_h_a;

	if ( l_iv_clientfee_struct_h.frm_fbase )
	{
		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, ERR_INVALID_FROMVAL_FORFEE, APL_NULL_STRING, 
			       APL_NULL_STRING, APL_NULL_STRING, __LINE__, 
			       __FILE__);
	}

	if ( l_iv_clientfee_struct_h.frm_cbase )
	{
		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, ERR_INVALID_FROMVAL_FORCHRG, APL_NULL_STRING, 
			       APL_NULL_STRING, APL_NULL_STRING, __LINE__, 
			       __FILE__);
	}

	if ( APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr) )
	{
		APL_GOBACK_FAIL
	}

	EXEC SQL SELECT SCHDL_FEE
		 INTO :dbl_h_fee INDICATOR :int_i_fee
		 FROM IV_CLIENTFEE
		 WHERE ((CLIENT = :l_iv_clientfee_struct_h.client) AND
			(SERVICE_CD = :l_iv_clientfee_struct_h.service_cd) AND
			(PROC_DATA_VAL = :l_iv_clientfee_struct_h.proc_data_val) AND
			(FRM_FBASE = 0.0) AND
			(FRM_CBASE = 0.0) AND
			(APL_FRM_DATE = :l_iv_clientfee_struct_h.apl_frm_date));   	/* Added by Monica for ISKB_1737 */

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}
	
	
	 
  
	l_iv_clientfee_struct_h.frm_fbase = 0;
	l_iv_clientfee_struct_h.frm_cbase = 0;
	l_iv_clientfee_struct_h.tof_base = IV_TO_BASIS_MAX;
	l_iv_clientfee_struct_h.toc_base = IV_TO_BASIS_MAX;

	

	l_iv_clientfee_struct_h.schdl_fee = p_iv_clientfee_struct_h_a->schdl_fee;
	l_iv_clientfee_struct_h.service_stat = NULL;
	l_i_iv_clientfee_struct.i_service_stat = -1;

	EXEC SQL INSERT INTO IV_CLIENTFEE
		 VALUES (:l_iv_clientfee_struct_h INDICATOR :l_i_iv_clientfee_struct);

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of IV_Mod_NewIVCUSTFEETxnAdm().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of IV_Mod_NewIVCUSTFEETxnAdm().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}
