/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to 
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or 
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*******************************************************************************
 *
 * Module Name         :         Intellect Reports	
 *
 * File Name           :         GenReport.pc
 *
 * Description         :         This file contains all functions for Reports.
 *
 *            Version Control Block
 *
 * Date        Version		Author              Description		RFS No.
 * ---------   --------	 ---------------  ----------------------------------
 * 23/02/2006   1.0        Sonali					New File	    HDFC_Reports1
 * 24/03/2022   1.1        kotubabu N           Linux Migration     Kotak Implementation

 * *****************************************************************************/


#include "Intellect_Common.h"
#include "Intellect_Interface.h"
#include "CO_IndStructdef.h"

#define 	STRSEP '|'
#define	PARAMSEP       '' 
#define	FIELDVALSEP		''

char  chr_g_progname        [APL_BATCH_PROGNAME_LEN] = APL_NULL_STRING;
char  chr_g_key             [APL_BATCH_KEY_LEN] = APL_NULL_STRING;
char  chr_g_start_date      [APL_DATE_LEN] = APL_NULL_STRING;
char  chr_g_user				 [APL_USERID_LEN] = APL_NULL_STRING;
 /* Added by kotubabu for Linux Migration-Start*/
#ifdef OS_LINUX
FILE *g_logfile ;
#else
FILE* g_logfile = APL_OUT_FILE;
#endif
 /* Added by kotubabu for Linux Migration-End*/


EXEC SQL INCLUDE SQLCA.H;

int main(int argc,char *argv[])
{	

   #ifdef OS_LINUX                        /* Added by kotubabu for Linux Migration-Start*/
	g_logfile = APL_OUT_FILE ;
   #endif                                   /* Added by kotubabu for Linux Migration-End*/
/*  DEBUG_INFO_STRUCT_H **l_debug_info_ptr=NULL;	*/
	
/* Start Changes -AmitB 12/07/06  */	
	DEBUG_INFO_STRUCT_H   *l_debug_info_struct = NULL, **l_debug_info_ptr = &l_debug_info_struct;	
/* End Changes -AmitB 12/07/06  */	
	
   INTL_ENV_DATA_STRUCT_H *l_intl_env_data_h=NULL;

  FILE *p_logfile = (FILE *)NULL;

  char	l_chr_paramstr[2000]	=	APL_NULL_STRING;
  char  	**chr_param_list		=	NULL;
  char	l_chr_repid[5]			=	APL_NULL_STRING;
  char	l_chr_repformat[3]	=	APL_NULL_STRING;
  char	l_chr_repname[30]		=	APL_NULL_STRING;
  int 	l_int_no_elm			=	0;
  
	

	 char chr_uname[APL_USERID_LEN] = APL_NULL_STRING;
    char chr_custody_id_b[APL_USERID_LEN] = APL_NULL_STRING;
    char chr_passwd[APL_PASSWD_LEN] = APL_NULL_STRING;
	 char chr_l_inifile[PATH_LENGTH] = APL_NULL_STRING;
   
 	 EXEC SQL BEGIN DECLARE SECTION;	
    EXEC SQL VAR chr_uname IS STRING;
    EXEC SQL VAR chr_custody_id_b IS STRING;
    EXEC SQL VAR chr_passwd IS STRING;

	EXEC SQL END DECLARE SECTION;
		fflush(stdout);

	l_debug_info_ptr = (DEBUG_INFO_STRUCT_H **)calloc(1,sizeof(DEBUG_INFO_STRUCT_H *));
		
	if (  CO_SplitStr(argv[9],STRSEP,&l_int_no_elm,&chr_param_list) == APL_FAILURE)
	{
		CO_ProcMonitor(g_logfile, "Failure from StrSplitFn", NULL, NULL);
		APL_GOBACK_FAIL
	}
	strcpy(chr_g_start_date,argv[2]);	
	strcpy(chr_g_progname,argv[0]);	
	strcpy(chr_g_key,argv[1]);	
	strcpy(chr_g_user,argv[3]);	

/*	******  Processing Input Parameters	Start	*******   */

		strcpy(l_chr_repid,chr_param_list[0]);
		strcpy(l_chr_repname,chr_param_list[1]);
		strcpy(l_chr_repformat,chr_param_list[2]);
		strcpy(l_chr_paramstr,chr_param_list[3]);

		printf("\n no of arguments are |%d|", l_int_no_elm);
		printf("\n  arguments are A--|%s|", chr_param_list[0]);
		printf("\n  arguments are B--|%s|", chr_param_list[1]);

		fflush(stdout);

   if(CO_Get_DBConnect(l_debug_info_ptr) == APL_FAILURE)
   {
		APL_GOBACK_FAIL
   }	
		fflush(stdout);

		
		if(BT_Status_Update(argv[0],
					argv[1],
					argv[2],
					APL_STARTED_STATUS,
					l_debug_info_ptr) ==APL_FAILURE)
		{
			APL_GOBACK_FAIL
		}
		
		CO_ProcMonitor(g_logfile, "CALLING GenReportFn", NULL, NULL);

	if(GenReportFn(l_chr_repid,l_chr_repname,l_chr_repformat,l_chr_paramstr,chr_g_start_date,chr_g_user,l_debug_info_ptr) == APL_FAILURE)
	{
		CO_ProcMonitor(g_logfile, "Failure from GenReportFn", NULL, NULL);
		APL_GOBACK_FAIL	
	}


APL_GOBACK_SUCCESS

RETURN_SUCCESS:
{
	CO_ProcMonitor(g_logfile,"Success inside GenReport",NULL,NULL);

	if(APL_FAILURE == BT_Status_Completed( argv[0],
				argv[1],
				argv[2],
				l_debug_info_ptr))
		APL_GOBACK_FAIL

			EXEC SQL COMMIT;
	IS_ANY_ORA_ERROR
	exit(0);
}


RETURN_FAILURE  :
{
	EXEC SQL ROLLBACK ;
	CO_ProcMonitor(g_logfile,"Failed inside GenReport",l_debug_info_ptr,NULL);
	exit(-1);
}
}



/* ********************************************************************************* */

