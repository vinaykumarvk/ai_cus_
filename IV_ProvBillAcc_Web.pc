

 


#include "IV_Control_A.h"
#include "CO_OthStructdef.h"
#include "CO_Commdef.h"

#define APL_FILE_LENGTH 50
EXEC SQL INCLUDE SQLCA.H;
int int_g_eu_condexists = 0;

#define PIPESEP '|'
#define PARAMSEP ';'

int IV_Prov_AccountWeb(char **argv,			
		FILE *fl_techlog,
		FILE *fl_userlog,
		INTL_ENV_DATA_STRUCT_H	*p_intlenv_data_struct_h,
		DEBUG_INFO_STRUCT_H **l_debug_info_ptr)

{	

	int 		i		= 0;
	int 		int_retstat	= 0;
	int 		int_ctr 	= 0;
	int 		int_p_diff	= 0;
	int		int_l_fetch_ctr	= 0;
	int		int_l_commit_count = 0;
	int      	int_h_count        = 0;
	char 		chr_bl_gen_date[APL_DATE_LEN] = APL_NULL_STRING;
	char 		chr_h_acc[APL_CLIENT_LENGTH]= APL_NULL_STRING;
	char 		h_mstclt[APL_CLIENT_LENGTH]= APL_NULL_STRING;
	char 		chr_premast[APL_CLIENT_LENGTH]= APL_NULL_STRING;
	char 		chr_h_restart_data[50]= APL_NULL_STRING;
	char		chr_p_dismast[APL_CLIENT_LENGTH]= APL_NULL_STRING;

	short 		i_restart	= 0;
	char 		*y,*a;
	char 		chr_p_billdt[APL_DATE_LEN]= APL_NULL_STRING;
	char 		chr_l_sys_date[APL_DATE_LEN]= APL_NULL_STRING;
	char		h_ora_rowid[APL_ROWID_LEN]= APL_NULL_STRING;
	char		chr_l_stat_info[71]= APL_NULL_STRING;
	char		chr_h_blable[2]= APL_NULL_STRING;

	char		chr_l_billprntpath[PATH_LENGTH]= APL_NULL_STRING;
	char		chr_l_printername[15]= APL_NULL_STRING;
	char		chr_l_sesaminipath[PATH_LENGTH]= APL_NULL_STRING;
	char		chr_l_reportsdirpath[PATH_LENGTH]= APL_NULL_STRING;
	char		chr_l_billprntfilename[PATH_LENGTH]= APL_NULL_STRING;
	char		chr_l_bill[PATH_LENGTH]= APL_NULL_STRING;
	FILE		*l_SesamIniFlPtr = (FILE *)NULL;
	FILE		*bill = (FILE *)NULL;
	short		int_cond_exists=0;

	char chr_h_client1[APL_CLIENT_LENGTH]=APL_NULL_STRING;
	char chr_h_client2[APL_CLIENT_LENGTH]=APL_NULL_STRING;
	char chr_h_zero_mstacc[APL_CLIENT_LENGTH]=APL_NULL_STRING;

	short i_account1 = 0;
	short l_rus_flg = 0;
	short l_eu_condexists = 0;

	char l_param_value[4000] = APL_NULL_STRING;
	char **l_param_val = NULL;
	char **l_client_val = NULL;
	int l_param_count = 0;
	int l_client_count = 0;
	char l_client_flag[2] = APL_NULL_STRING;
	char l_print_date[20] = APL_NULL_STRING;
	char l_param_string[4000] = APL_NULL_STRING;
	char l_generate_flag[2] = APL_NULL_STRING;
	char l_client[11] = APL_NULL_STRING;
	char l_print_client[20] = APL_NULL_STRING;
	

	EXEC SQL BEGIN DECLARE SECTION;

	struct sqlca sqlca;

	SYS_IVCONTROLPARAM_STRUCT l_sys_ivcntl_param_struct;

	IV_CLIENTSETUP_STRUCT l_iv_clt_setup_struct;

	INTL_REPT_STRUCT_H   l_intl_rept_struct_ha ;


	EXEC SQL VAR chr_h_acc 					IS STRING;
	EXEC SQL VAR h_mstclt 					IS STRING;
	EXEC SQL VAR chr_p_dismast				IS STRING;
	EXEC SQL VAR l_sys_ivcntl_param_struct.b_prev_date 	IS STRING;
	EXEC SQL VAR l_sys_ivcntl_param_struct.b_upto_date	IS STRING;
	EXEC SQL VAR chr_bl_gen_date 				IS STRING;
	EXEC SQL VAR chr_premast 				IS STRING;
	EXEC SQL VAR chr_h_restart_data 			IS STRING;
	EXEC SQL VAR chr_l_sys_date 				IS STRING;
	EXEC SQL VAR chr_p_billdt 				IS STRING;
	EXEC SQL VAR h_ora_rowid 				IS STRING;
	EXEC SQL VAR chr_l_stat_info				IS STRING;
	EXEC SQL VAR chr_h_blable 				IS STRING;
	EXEC SQL VAR chr_h_client1				IS STRING;
	EXEC SQL VAR chr_h_zero_mstacc				IS STRING;
	EXEC SQL VAR chr_h_client2				IS STRING;

	EXEC SQL VAR l_print_client				IS STRING;

	short i_acc;
	short i_mstclt; 
	short i_ora_rowid;
	short i_blable	 = 0;

	EXEC SQL END DECLARE SECTION;

	memset(chr_h_acc,APL_NULL_CHAR,APL_CLIENT_LENGTH);
	memset(chr_h_client1,APL_NULL_CHAR,APL_CLIENT_LENGTH);
	memset(chr_h_client2,APL_NULL_CHAR,APL_CLIENT_LENGTH);
	memset(h_mstclt,APL_NULL_CHAR,APL_CLIENT_LENGTH);
	memset(chr_p_dismast,APL_NULL_CHAR,APL_CLIENT_LENGTH);
	memset(chr_p_billdt,APL_NULL_CHAR,APL_DATE_LEN);
	memset(chr_h_restart_data,APL_NULL_CHAR,50);
	memset(chr_l_sys_date,APL_NULL_CHAR,APL_DATE_LEN);
	memset(chr_bl_gen_date,APL_NULL_CHAR,APL_DATE_LEN);
	memset(chr_l_billprntpath, APL_NULL_CHAR, PATH_LENGTH); 
	memset(chr_l_billprntfilename, APL_NULL_CHAR, PATH_LENGTH);
	
	memset(&l_sys_ivcntl_param_struct, NULL , sizeof(SYS_IVCONTROLPARAM_STRUCT) );
	memset(&l_iv_clt_setup_struct, NULL , sizeof(IV_CLIENTSETUP_STRUCT) );


	printf(" \n Before SYS_BATCHPROC -- :|%s||%s||%s|\n",argv[0],argv[1],argv[2]);

        EXEC SQL SELECT PROCESSING_STATUS,ROWID 
		INTO :chr_h_restart_data:i_restart, :h_ora_rowid:i_ora_rowid 
		FROM SYS_BATCHPROC
		WHERE ( PROCESS_NAME = :argv[0]
				AND PROC_INIT = :argv[1]
				AND STARTDATE = :argv[2]
				AND STATUS = 'started' )
		FOR UPDATE OF PROCESSING_STATUS,STATUS; 

	printf("After SYS_BATCHPROC ORA Error :|%d|\n",sqlca.sqlcode);

	fprintf(fl_userlog,"ORA Error for Locking SYS BATCH PROC -- [%d] \n", sqlca.sqlcode);
	if(sqlca.sqlcode < 0)
	{
		fprintf(fl_userlog,"Batch In Proc Table cannot be locked");  
		fprintf(fl_techlog, "ORA Error for Locking SYS_BATCHPROC -- [%d] \n", sqlca.sqlcode);
		APL_GOBACK_FAIL
	}

	if(APL_ZERO_RESULT_SET)
	{
		fprintf(fl_userlog,"Record For Progname %s,Startdate %s Not In Batch Table \n",argv[0], argv[2]);
		CO_InsertErr(l_debug_info_ptr,
				ERR_REC_NOTFND,
				ltoa(sqlca.sqlcode),
				APL_NULL_STRING,
				APL_NULL_STRING,
				__LINE__,
				__FILE__);
		APL_GOBACK_FAIL
	}
       
	memset(chr_l_sesaminipath, APL_NULL_CHAR, PATH_LENGTH);
	memset(chr_l_reportsdirpath, APL_NULL_CHAR, PATH_LENGTH);
	memset(chr_l_printername, APL_NULL_CHAR, 15);
	strcpy(chr_l_sesaminipath, getenv("INTL_ROOT_PATH"));
	strcat(chr_l_sesaminipath, "/intl_sun.cfg");


	if((l_SesamIniFlPtr = fopen(chr_l_sesaminipath, "r")) == (FILE *)NULL )
	{
		fprintf(fl_userlog, "Failed to open |%s| \n", chr_l_sesaminipath);
		fprintf(fl_techlog, "Could not open intl_sun.cfg\n");
		APL_GOBACK_FAIL
	}

	if(APL_FAILURE == CO_ReadToken(l_SesamIniFlPtr, "INTL_HF_PATH", 
				chr_l_reportsdirpath, l_debug_info_ptr) )
	{
		fprintf(fl_userlog, "Failed to read INTL_HF_PATH \n");
		fprintf(APL_OUT_FILE, "Token REPORTS_DIR not set.\n");

		APL_GOBACK_FAIL
	}

	l_rus_flg=0;
	if (APL_FAILURE == CO_Chk_CntryEnabled(  "BILL_PRINTING",
				"ALL_CUSTOMERS",
				&l_rus_flg,
				l_debug_info_ptr ))
	{
		fprintf(fl_userlog, "Failure from CO_Chk_CntryEnabled for BILL_PRINTING \n");
		APL_GOBACK_FAIL
	}


	l_eu_condexists=0;
	if (APL_FAILURE == CO_Chk_CntryEnabled( "VAT_REGULATION",
				"EU_AND_TR_REGULATION",
				&l_eu_condexists,
				l_debug_info_ptr ))
	{
		fprintf(fl_userlog, "Failure from CO_Chk_CntryEnabled for VAT_REGULATION \n");
		APL_GOBACK_FAIL
	}
	int_g_eu_condexists = l_eu_condexists;


	/************* Changes Related to ProvBill : vinay kalaskar ***********************/

	strcpy(l_param_value,argv[9]);

	printf("l_param_value :|%s|\n",l_param_value);

	if(CO_SplitStr(l_param_value,PIPESEP,&l_param_count,&l_param_val) == APL_FAILURE)
	{
		 CO_ProcMonitor(fp, "Failure from CO_SplitStr -- PIPESEP -- ", NULL, NULL);
		 APL_GOBACK_FAIL
	}

	for(i=0;i<l_param_count;i++)
	{
		if(i==0)
			strcpy(l_client_flag,l_param_val[i]);
		else if(i==1)
			strcpy(l_generate_flag,l_param_val[i]);
		else if(i==2)
			strcpy(l_param_string,l_param_val[i]);
		else if(i==3)
			strcpy(l_print_date,l_param_val[i]);		
	}

	printf("l_client_flag:|%s|\n",l_client_flag);
	printf("l_generate_flag:|%s|\n",l_generate_flag);
	printf("l_param_string:|%s|\n",l_param_string);
	printf("l_print_date:|%s|\n",l_print_date);


	//y= &l_print_date;
	y = l_print_date; // AIX - Warnings removal

	printf("y :|%s|\n",y);

	if (!y)
	{
		fprintf(fl_userlog,"Mandatory Data Missing :Bill Date \n");
		APL_DATA_MISSING("Bill Date",APL_NULL_STRING,APL_NULL_STRING);
		APL_GOBACK_FAIL
	}
	else
	{
		printf("Entering IV_Rtv_IVCNTLPARAM \n ");

		if (APL_FAILURE == IV_Rtv_IVCNTLPARAM(&l_sys_ivcntl_param_struct,
							&int_retstat,
							l_debug_info_ptr))
		{
			if (int_retstat == IV_CRITCAL_ERROR_IND)
			{
				fprintf(fl_userlog,"Fatal Error In Billing Control Parameters Table\n");
				CO_InsertErr(	l_debug_info_ptr,
						DB_ERR_NO,
						"BCNTLPARM",
						APL_NULL_STRING,
						APL_NULL_STRING,
						__LINE__,
						__FILE__);
				APL_GOBACK_FAIL
			}
			else if (int_retstat == IV_NO_DATA_FOUND_ERR)
			{
				fprintf(fl_userlog,"Bill Control Parameters Not Found");
				CO_InsertErr(	l_debug_info_ptr,
						ERR_BILLCNTRL_PARAM_NOTFND,
						APL_NULL_STRING,
						APL_NULL_STRING,
						APL_NULL_STRING,
						__LINE__,
						__FILE__);
				APL_GOBACK_FAIL
			}
		}

		printf("l_print_date :|%s|\n",l_print_date);

		strcpy(chr_p_billdt,l_print_date);

		strcpy(chr_l_sys_date,argv[2]);

		printf("Entering CO_Pro_DateComp :|%s||%s|\n",l_sys_ivcntl_param_struct.b_upto_date,chr_p_billdt);

		if (APL_FAILURE == CO_Pro_DateComp(l_sys_ivcntl_param_struct.b_upto_date,
					chr_p_billdt,
					&int_p_diff,
					l_debug_info_ptr))
		{
			fprintf(fl_userlog,"Failed To Compare Bill Upto Date And Input Date\n");
			APL_GOBACK_FAIL
		}

		if (int_p_diff>0)
		{
			CO_InsertErr(	l_debug_info_ptr,
					ERR_REC_NOTFND,
					APL_NULL_STRING,
					APL_NULL_STRING,
					APL_NULL_STRING,
					__LINE__,
					__FILE__);
			APL_GOBACK_FAIL
		}


		printf("Entering CO_Pro_DateComp :|%s||%s|\n",chr_l_sys_date,chr_p_billdt);

		if (APL_FAILURE == CO_Pro_DateComp(chr_l_sys_date,
					chr_p_billdt,
					&int_p_diff,
					l_debug_info_ptr))
		{
			fprintf(fl_userlog,"Failed To Compare System Date And Input Date\n");
			APL_GOBACK_FAIL
		}


		if (int_p_diff > 0 && l_sys_ivcntl_param_struct.generate_ind == 'N')
		{	
			fprintf(fl_userlog,"Date Cannot Be Future Date\n");
			CO_InsertErr(l_debug_info_ptr,
					ERR_DATE_CANT_GRT_TODAY,
					APL_NULL_STRING,
					APL_NULL_STRING,
					APL_NULL_STRING,
					__LINE__,
					__FILE__);
			APL_GOBACK_FAIL
		}


		int_cond_exists = 0;
		if (APL_FAILURE == CO_Chk_CntryEnabled(  "BILL_PRINTING",
					"NO_INVD_BILL_MST",
					&int_cond_exists,
					l_debug_info_ptr ))
		{
			APL_GOBACK_FAIL
		}
		
		/******** Check Whether All clients Or Selected Clients **************************/

		printf("l_client_flag :|%s|\n",l_client_flag);

		if(strcmp(l_client_flag,"A"))
		{
		
			printf("l_param_string :|%s|\n",l_param_string);
			
			if(CO_SplitStr(l_param_string,PARAMSEP,&l_client_count,&l_client_val) == APL_FAILURE)
			{
				 CO_ProcMonitor(fl_userlog,"Failure from CO_SplitStr -- PIPESEP -- ", NULL, NULL);
				 APL_GOBACK_FAIL
			}
			
			/****** Consider only those clients which are eligible for printing ******/
			
			for(i=0;i<l_client_count;i++)
			{			
				strcpy(l_client,l_client_val[i]);
			
				printf("l_client :|%s|\n",l_client);
				printf("l_print_date :|%s|\n",l_print_date);

				memset(l_print_client, APL_NULL_CHAR, 20);

				printf("Before l_print_client Query :|%d|\n",sqlca.sqlcode);

				EXEC SQL SELECT DISTINCT(A.CLIENT) 
					INTO :l_print_client
					FROM IV_SERVICE_CHRG A,IV_CLIENTSETUP B 
					WHERE A.CLIENT = B.CLIENT
					AND A.CLIENT =:l_client
					AND A.DATEOF_BILLING =:l_print_date;

				printf("After l_print_client Query :|%d|\n",sqlca.sqlcode);

				IS_ANY_ORA_ERROR

				int_ctr++;

				printf("l_print_client :|%s|\n",l_print_client);

				if(strlen(l_print_client) > 0)
				{

				//y = &l_print_client;

				printf("Entering IV_Rtv_IVCUSTSETUP :|%s|\n",y);
				
				if (APL_FAILURE == IV_Rtv_IVCUSTSETUP(l_print_client,
							&l_iv_clt_setup_struct,
							&int_retstat,
							l_debug_info_ptr))
				{
					if ( int_retstat == IV_CRITCAL_ERROR_IND)
					{
						fprintf(fl_userlog,"Fatal Error In Billing Customer Setup Table\n");
						fprintf(fl_techlog,"Fatal Error In Billing Customer Setup Table\n");
						CO_InsertErr(	l_debug_info_ptr,
								DB_ERR_NO,
								"BCUSTSETUP",
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__);
						APL_GOBACK_FAIL
					}
					else if (int_retstat == IV_NO_DATA_FOUND_ERR) 
					{
						fprintf(fl_userlog,"Billing Setup Not Found For Account:%s\n",y);
						fprintf(fl_techlog,"Billing Setup Not Found For Account:%s\n",y);
						CO_InsertErr(	l_debug_info_ptr,
								ERR_BILLCNTRL_PARAM_NOTFND,
								APL_NULL_STRING,
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__);

						APL_GOBACK_FAIL
					}
				}		
				
				strcpy(chr_l_billprntfilename,l_print_client);
				strcat(chr_l_billprntfilename,".htm");
				strcpy(chr_l_bill,chr_l_reportsdirpath);
				strcat(chr_l_bill,chr_l_billprntfilename);

				if ((bill = fopen (chr_l_bill,"w")) == (FILE *) NULL )
				{
					CO_InsertErr(l_debug_info_ptr,ERR_FILE_NOTFND,APL_NULL_STRING,
							APL_NULL_STRING,APL_NULL_STRING,
							__LINE__,__FILE__);
					APL_GOBACK_FAIL
				}

				sprintf(l_intl_rept_struct_ha.report_name,chr_l_billprntfilename);
				strcpy(l_intl_rept_struct_ha.report_desc, APL_HOFF_FILE_DESC);
				strcat(l_intl_rept_struct_ha.report_desc, " : HTML FORMAT");
				strcat(l_intl_rept_struct_ha.report_desc,"\0");
				strcpy(l_intl_rept_struct_ha.report_date, argv[2]);
				l_intl_rept_struct_ha.report_width = 100 ;
				strcpy(l_intl_rept_struct_ha.task_desc, argv[5]);
				strcpy(l_intl_rept_struct_ha.fe_be_ind, APL_BE_IND);
				strcpy(l_intl_rept_struct_ha.usr, argv[3]);

				if (APL_FAILURE == CO_Proc_RptInsNew( l_intl_rept_struct_ha,"INTL_HF_PATH", l_debug_info_ptr))
				{
					fprintf(fl_userlog, "Failed to read INTL_HF_PATH \n");
					fprintf(fl_techlog, "Failed to read INTL_HF_PATH \n");
					APL_GOBACK_FAIL
				}						


				if (APL_FAILURE == IV_ProvCovPgWeb(bill,
							fl_techlog,
							fl_userlog,
							chr_p_billdt,
							l_print_client,
							l_sys_ivcntl_param_struct,
							l_iv_clt_setup_struct,
							l_debug_info_ptr))
				{
					fprintf(fl_userlog,"Failed To Print Cover Page:%s\n",h_mstclt);	
					fprintf(fl_techlog,"Failed To Print Cover Page:%s\n",h_mstclt);	
					APL_GOBACK_FAIL
				}			
										 
				fprintf(bill,"</TABLE></BODY></HTML>");	
				fflush(bill);
				fclose(bill);

				}
								
			}
		
		}
		else
		{		
			EXEC SQL DECLARE allclient CURSOR FOR 
				SELECT DISTINCT(A.CLIENT) 
				FROM IV_SERVICE_CHRG A,IV_CLIENTSETUP B 
				WHERE A.CLIENT = B.CLIENT
				AND A.DATEOF_BILLING =:l_print_date
				ORDER BY A.CLIENT;

			IS_ANY_ORA_ERROR			

			EXEC SQL OPEN allclient;

			for(;;)
			{
				memset(l_print_client, APL_NULL_CHAR, 20);

				EXEC SQL FETCH allclient INTO :l_print_client;

				if(sqlca.sqlcode == 1403)
				break;

				int_ctr ++;
		
				if (APL_FAILURE == IV_Rtv_IVCUSTSETUP(l_print_client,
							&l_iv_clt_setup_struct,
							&int_retstat,
							l_debug_info_ptr))
				{
					if ( int_retstat == IV_CRITCAL_ERROR_IND)
					{
						fprintf(fl_userlog,"Fatal Error In Billing Customer Setup Table\n");
						fprintf(fl_techlog,"Fatal Error In Billing Customer Setup Table\n");
						CO_InsertErr(	l_debug_info_ptr,
								DB_ERR_NO,
								"IV_CLIENTSETUP",
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__);
						APL_GOBACK_FAIL
					}
					else if (int_retstat == IV_NO_DATA_FOUND_ERR) 
					{
						fprintf(fl_userlog,"Billing Setup Not Found For Account:%s\n",y);
						fprintf(fl_techlog,"Billing Setup Not Found For Account:%s\n",y);
						CO_InsertErr(	l_debug_info_ptr,
								ERR_BILLCNTRL_PARAM_NOTFND,
								APL_NULL_STRING,
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__);

						APL_GOBACK_FAIL
					}
				}
		

				strcpy(chr_l_billprntfilename,l_print_client);
				strcat(chr_l_billprntfilename,".htm");
				strcpy(chr_l_bill,chr_l_reportsdirpath);
				strcat(chr_l_bill,chr_l_billprntfilename);

				if ((bill = fopen (chr_l_bill,"w")) == (FILE *) NULL )
				{
					CO_InsertErr(l_debug_info_ptr,ERR_FILE_NOTFND,APL_NULL_STRING,
							APL_NULL_STRING,APL_NULL_STRING,
							__LINE__,__FILE__);
					APL_GOBACK_FAIL
				}

				sprintf(l_intl_rept_struct_ha.report_name,chr_l_billprntfilename);
				strcpy(l_intl_rept_struct_ha.report_desc, APL_HOFF_FILE_DESC);
				strcat(l_intl_rept_struct_ha.report_desc, " : HTML FORMAT");
				strcat(l_intl_rept_struct_ha.report_desc,"\0");
				strcpy(l_intl_rept_struct_ha.report_date, argv[2]);
				l_intl_rept_struct_ha.report_width = 100 ;
				strcpy(l_intl_rept_struct_ha.task_desc, argv[5]);
				strcpy(l_intl_rept_struct_ha.fe_be_ind, APL_BE_IND);
				strcpy(l_intl_rept_struct_ha.usr, argv[3]);

				if (APL_FAILURE == CO_Proc_RptInsNew( l_intl_rept_struct_ha,"INTL_HF_PATH", l_debug_info_ptr))
				{
					fprintf(fl_userlog, "Failed to read INTL_HF_PATH \n");
					fprintf(fl_techlog, "Failed to read INTL_HF_PATH \n");
					APL_GOBACK_FAIL
				}

									
				if(sqlca.sqlcode < 0)
				sqlca.sqlcode=0;

				if (APL_FAILURE == IV_ProvCovPgWeb(bill,
							fl_techlog,
							fl_userlog,
							chr_p_billdt,
							l_print_client,
							l_sys_ivcntl_param_struct,
							l_iv_clt_setup_struct,
							l_debug_info_ptr))
				{
					fprintf(fl_userlog,"Failed To Print Cover Page:%s\n",h_mstclt);	
					fprintf(fl_techlog,"Failed To Print Cover Page:%s\n",h_mstclt);	
					APL_GOBACK_FAIL
				}			
										 
				fprintf(bill,"</TABLE></BODY></HTML>");	
				fflush(bill);
				fclose(bill);

			}
			EXEC SQL CLOSE allclient;
			
		}
				  
	} 
	sprintf(chr_l_stat_info, "Record Comitted");


	EXEC SQL UPDATE SYS_BATCHPROC
		SET STATUS		='completed',
		    STAT_DET	= :chr_l_stat_info
			    WHERE	ROWID		= :h_ora_rowid; 

	IS_ANY_ORA_ERROR

		if (sqlca.sqlcode == 1403)
		{
			fprintf(fl_userlog,"Failed to Update SYS_BATCHPROC because row_id could not be found \n");
			fprintf(fl_techlog,"Failed to Update status in SYS_BATCHPROC \n");
			APL_GOBACK_FAIL
		}


APL_GOBACK_SUCCESS

	RETURN_SUCCESS:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Leaving IV_Prov_AccountWeb successfully\n",NULL,NULL);
	}
	fclose(l_SesamIniFlPtr);
	fclose(bill);

	return(APL_SUCCESS);

RETURN_FAILURE:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Leaving IV_Prov_AccountWeb unsuccessfully\n",NULL,NULL);
	}
	fclose(l_SesamIniFlPtr);
	fclose(bill);

	return (APL_FAILURE);
}

