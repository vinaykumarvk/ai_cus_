




#include "stdio_64.h"
#include <IV_Control_A.h>

FILE *fp=NULL;
FILE *TechRep=NULL;

#ifdef BILLDEBUG 
	FILE *TestRep=NULL;
#endif 

EXEC SQL INCLUDE SQLCA;

int main(int argc,char *argv[])
{
	char chr_uname[APL_USERID_LEN]=APL_NULL_STRING;
	char chr_passwd[APL_PASSWD_LEN]=APL_NULL_STRING;
	char chr_custody_id_b[APL_USERID_LEN]=APL_NULL_STRING;
	char h_sys_dt[APL_DATE_LEN]=APL_NULL_STRING;

	char  l_start_time[20]          =  APL_NULL_STRING;
	char  l_stop_time[20]          =  APL_NULL_STRING;
	char  l_total_time[20]          =  APL_NULL_STRING;

	EXEC SQL BEGIN  DECLARE SECTION;

	EXEC SQL VAR chr_uname IS STRING;
	EXEC SQL VAR chr_passwd IS STRING;
	EXEC SQL VAR h_sys_dt IS STRING;
	
	EXEC SQL VAR l_start_time IS STRING;
	EXEC SQL VAR l_stop_time IS STRING;

	EXEC SQL END DECLARE SECTION;

	char chr_l_techlogname[40]= APL_NULL_STRING;
	char chr_l_sys_date[APL_DATE_LEN]= APL_NULL_STRING;
	char chr_acct_str[150]= APL_NULL_STRING;
	char chr_l_dirlogname[PATH_LENGTH]= APL_NULL_STRING;
	char chr_l_userlogname[40]= APL_NULL_STRING;
	char chr_inifile[PATH_LENGTH]= APL_NULL_STRING;
	char chr_l_techlog_a[PATH_LENGTH]= APL_NULL_STRING;
	char chr_l_userlog_A[PATH_LENGTH]= APL_NULL_STRING;

	#ifdef BILLDEBUG 
		char chr_l_testlogname[40], chr_l_testlog[PATH_LENGTH];
	#endif 

	FILE *chr_finifile = (FILE *)NULL;

	DEBUG_INFO_STRUCT_H *l_debug_info_ptr = (DEBUG_INFO_STRUCT_H *)NULL;

	struct sqlca sqlca;
	sqlca.sqlcode = 0;

	memset(chr_l_techlogname,APL_NULL_CHAR,40);
	memset(chr_l_userlogname,APL_NULL_CHAR,40);
	memset(chr_l_sys_date,APL_NULL_CHAR,APL_DATE_LEN);
	memset(chr_acct_str,APL_NULL_CHAR,150);
	memset(chr_l_dirlogname,APL_NULL_CHAR,PATH_LENGTH);
	memset(chr_inifile,APL_NULL_CHAR,PATH_LENGTH);
	memset(chr_l_techlog_a,APL_NULL_CHAR,PATH_LENGTH);
	memset(chr_l_userlog_A,APL_NULL_CHAR,PATH_LENGTH);
	
	memset(l_start_time,APL_NULL_CHAR,PATH_LENGTH);
	memset(l_stop_time,APL_NULL_CHAR,PATH_LENGTH);

	#ifdef BILLDEBUG 
		memset(chr_l_testlogname,APL_NULL_CHAR,40);
		memset(chr_l_testlog,APL_NULL_CHAR,PATH_LENGTH);
	#endif 

	
	strcpy(chr_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_inifile,"/intl_sun.cfg");

	if ( (chr_finifile = fopen(chr_inifile,"r") ) == NULL)
	{
		fclose(TechRep);
		fclose(fp);
		exit(-1);
	}

	APL_FETCH_DB_LOGIN_DETAILS(chr_finifile, chr_custody_id_b, chr_uname, chr_passwd , 
				APL_OUT_FILE ,&l_debug_info_ptr);

	EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;

	if ( sqlca.sqlcode < 0 )
	{
		fprintf(APL_OUT_FILE, "Unable To Connect ORACLE ---- \n"); 
		fflush(APL_OUT_FILE);
		fclose(chr_finifile);
		fclose(TechRep);
		fclose(fp);
		exit(-1);
	}

	fclose(chr_finifile);

	strcpy(chr_l_sys_date, argv[2]);

	
	if (APL_FAILURE == CO_Rtv_RptFileName("1A", APL_LOGFILE_DESC, 100, argv[5],argv, &fp, &l_debug_info_ptr) )
	{
		fclose(TechRep);
		fclose(fp);
		exit(-1);
	}

	
	if (APL_FAILURE == CO_Rtv_RptFileName("1a",APL_LOGFILE_DESC,100, argv[5], argv, &TechRep, &l_debug_info_ptr) )
	{
		fclose(TechRep);
		fclose(fp);
		exit(-1);
	}

	EXEC SQL COMMIT;
	
	if(sqlca.sqlcode < 0)
	{
		CO_InsertErr(&l_debug_info_ptr,DB_ERR_NO, 
			     ltoa(sqlca.sqlcode), APL_NULL_STRING, 
			     APL_NULL_STRING, __LINE__, __FILE__);

		fclose(TechRep);
		fclose(fp);
		exit(-1);
	}

	fprintf(TechRep,"Billing Technical Log as on %s\n",argv[2]);
	fprintf(fp,"Billing User Log as on %s\n",argv[2]);
	fflush(TechRep);	
	fflush(fp);	

	#ifdef BILLDEBUG 
		TestRep = fopen("TestLog", "a");

		if ( !TestRep )
		{
			fprintf(TechRep, "Could not open Test File for debugging.\n");
		
			fflush(TechRep);
			fclose(TechRep);
			fclose(fp);
			exit(-1);
		}
		else
		{
			fprintf(TestRep, "Billing Test Log as on %s\n",argv[2]);
			fflush(TestRep);
		}
			
	#endif 

	/******* Performance Start Time : Vinay kalaskar *******************************/
	
	EXEC SQL SELECT TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI:SS') INTO :l_start_time FROM DUAL;

	printf("l_start_time :|%s|\n",l_start_time);
	fprintf(fp,"l_start_time :|%s|\n",l_start_time);

	/******************************************************************************/

	if(APL_FAILURE == IV_Proc_CalculateBills(argv,&l_debug_info_ptr))
	{
		/******* Performance Stop Time : Vinay kalaskar *******************************/
	
		EXEC SQL SELECT TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI:SS') INTO :l_stop_time FROM DUAL;

		fprintf(fp,"l_stop_time :|%s|\n",l_stop_time);

		EXEC SQL SELECT ((TO_DATE(:l_stop_time,'DD/MM/YYYY HH24:MI:SS')-
		                  TO_DATE(:l_start_time,'DD/MM/YYYY HH24:MI:SS'))*(24*60*60))
			 INTO :l_total_time
			 FROM DUAL;

		printf("Total Time Taken To Generate Bills :|%s| Seconds \n",l_total_time);
		fprintf(fp,"Total Time Taken To Generate Bills :|%s| Seconds \n",l_total_time);

		/******************************************************************************/
		
		CO_ProcMonitor(fp,"Errors in bill generation\n",NULL,NULL);
		CO_ProcMonitor(TechRep,"Errors in bill generation\n",NULL,NULL);
		APL_GOBACK_FAIL

	}
	else
	{
		/******* Performance Stop Time : Vinay kalaskar *******************************/
	
		EXEC SQL SELECT TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI:SS') INTO :l_stop_time FROM DUAL;

		fprintf(fp,"l_stop_time :|%s|\n",l_stop_time);

		EXEC SQL SELECT ((TO_DATE(:l_stop_time,'DD/MM/YYYY HH24:MI:SS')-
		                  TO_DATE(:l_start_time,'DD/MM/YYYY HH24:MI:SS'))*(24*60*60))
			 INTO :l_total_time
			 FROM DUAL;

		printf("Total Time Taken To Generate Bills :|%s| Seconds \n",l_total_time);
		fprintf(fp,"Total Time Taken To Generate Bills :|%s| Seconds \n",l_total_time);

		/******************************************************************************/
		
		CO_ProcMonitor(fp,"Bill generation completed successfully\n",NULL,NULL);
		CO_ProcMonitor(TechRep,"Bill generation completed successfully\n",NULL,NULL);
		APL_GOBACK_SUCCESS
	}


RETURN_SUCCESS:

	EXEC SQL COMMIT WORK;
	fclose(TechRep);
	fclose(fp);

	#ifdef BILLDEBUG 
		fclose(TestRep);
	#endif 

	CO_ProcMonitor(APL_OUT_FILE,"Exiting successfully out of IV_BillGenerate\n",NULL,NULL);
	exit(0); 

RETURN_FAILURE:

	EXEC SQL ROLLBACK WORK;
	fclose(TechRep);
	fclose(fp);

	#ifdef BILLDEBUG 
		fclose(TestRep);
	#endif 

	CO_ProcMonitor(APL_OUT_FILE,"Exiting unsuccesfully out of IV_BillGenerate\n",&l_debug_info_ptr,NULL);
	exit(1); 
}

