/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to 
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or 
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         :	
 *
 * File Name           :
 *
 * Description         :	
 *
 *           
 *
 *            Version Control Block
 *
 * Date        Version		Author               Description
 * ---------   --------	 ---------------  ---------------------------
 *					
 *
 *********************************************************************/
  
   
   
   
   
   
   
   
   
   
   
   
   




#include <CR_Header_C.h>
#include <msg.h>

EXEC SQL INCLUDE sqlca;

#define COMMIT_COUNT_I			200
#define QUANTITY_LEN				25

#define FILENAME_LEN_A			80
#define SETL_MESG         6    


   char              chr_g_event_id[17];

main(int argc,char **argv)
{
	DEBUG_INFO_STRUCT_H			*l_debug_info_ptr = NULL;
	FILE						*l_ptr_ini_file = NULL;
	FILE						*l_ptr_log_file = NULL;
	INTL_ENV_DATA_STRUCT_H	l_intl_envdatastruct_h;
	char						chr_l_inifile[FILENAME_LEN_A]   = APL_NULL_STRING;
	char						chr_uname[APL_USERID_LEN]   = APL_NULL_STRING;
	char						chr_passwd[APL_PASSWD_LEN]  = APL_NULL_STRING;
	char						chr_custody_id_b[APL_USERID_LEN]  = APL_NULL_STRING;
	int						int_l_flg = 0;
	int						int_retval = 0;
	struct sqlca		   sqlca;

	memset(&l_intl_envdatastruct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H));
	
	

	strcpy(l_intl_envdatastruct_h.usr, argv[3]);
	strcpy(l_intl_envdatastruct_h.h_mode, argv[4]);
	strcpy(l_intl_envdatastruct_h.processtion, argv[5]);
	strcpy(l_intl_envdatastruct_h.auth_req, argv[6]);
	strcpy(l_intl_envdatastruct_h.subprocess, argv[7]);
	strcpy(l_intl_envdatastruct_h.h_process, argv[8]);
	
	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

	if ((l_ptr_ini_file = fopen(chr_l_inifile,"r")) == NULL)
		exit(-1);

	APL_FETCH_DB_LOGIN_DETAILS(l_ptr_ini_file,chr_custody_id_b,chr_uname,chr_passwd,APL_OUT_FILE,&l_debug_info_ptr)
	
	
	
	if (CA_DatabaseConnect(chr_uname,chr_passwd,&l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL

	

	int_retval = CO_Rtv_RptFileName("3Y",APL_LOGFILE_DESC,100,argv[5],argv,&l_ptr_log_file,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL
	}

	

	EXEC SQL COMMIT WORK;
	
	if (sqlca.sqlcode != 0)
	{
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL
	}

	CO_ProcMonitor(l_ptr_log_file,"Security Conversion - Authorize",NULL,NULL);
	CO_ProcMonitor(l_ptr_log_file,"________________________________\n",NULL,NULL);
	CO_ProcMonitor(l_ptr_log_file,"Work Committed after chr_logfile creation \n",NULL,&l_intl_envdatastruct_h);

	

	if (CO_RtvSysParams(&l_debug_info_ptr) != APL_SUCCESS)
	{
		CO_ProcMonitor(l_ptr_log_file,"Unable to get system parameters - Rollback done \n",NULL,&l_intl_envdatastruct_h);
		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);
		
		EXEC SQL ROLLBACK WORK RELEASE;
		
		APL_GOBACK_FAIL	
	}

	
	 
	int_retval = CA_LockRec(argv,l_ptr_log_file,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		CO_ProcMonitor(l_ptr_log_file,"Unable to lock BATCH_IN_PROC record - Rollback done \n",NULL,&l_intl_envdatastruct_h);
		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		EXEC SQL ROLLBACK WORK RELEASE;
		
		APL_GOBACK_FAIL
	}

	

	int_retval = CR_Proc_DBSecConvAuth(argv,l_ptr_log_file,&l_intl_envdatastruct_h,&l_debug_info_ptr);
	if (int_retval != APL_SUCCESS)
	{
		int_l_flg = 1;

	   CA_Proc_Final(argv,l_ptr_log_file,&l_debug_info_ptr,int_l_flg);
		
		if (CO_ChkErr(l_debug_info_ptr) == APL_SUCCESS)
		{
			
			CO_ProcMonitor(l_ptr_log_file,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_envdatastruct_h);
			CO_FreeErrLst(&l_debug_info_ptr);

		}

		CO_ProcMonitor(l_ptr_log_file,"FAILURE from Security Conversion (Authorize) program \n",NULL,&l_intl_envdatastruct_h);

		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		APL_GOBACK_FAIL	
	}
	else
	{
		int_l_flg = 0;

		CA_Proc_Final(argv,l_ptr_log_file,&l_debug_info_ptr,int_l_flg);

		if (CO_ChkErr(l_debug_info_ptr) == APL_SUCCESS)
		{
			
			CO_ProcMonitor(l_ptr_log_file,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_envdatastruct_h);
			CO_FreeErrLst(&l_debug_info_ptr);

		}

		CO_ProcMonitor(l_ptr_log_file,"SUCCESS from Security Conversion (Authorize) program \n",NULL,&l_intl_envdatastruct_h);

		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		APL_GOBACK_SUCCESS
	}

	RETURN_SUCCESS	: 
	{
		fclose(l_ptr_ini_file);
	   return(0);
	}

	RETURN_FAILURE	: 
	{
		fclose(l_ptr_ini_file);
  		return(-1);	
	}
}



int CR_Proc_DBSecConvAuth(char **argv,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca  		sqlca;
	char					chr_h_sys_time_stamp[APL_DATE_LEN] = APL_NULL_STRING;
	short					i_sys_access_stamp;
	char					chr_l_from_sec[APL_INSTRUMENTCODE_LEN] 	  = APL_NULL_STRING;
	char					chr_l_auth_reset_flg[APL_FLAG_LENGTH]  = APL_NULL_STRING;
	char					chr_l_parri_passu_flg[APL_FLAG_LENGTH] = APL_NULL_STRING;
	char					**temp = NULL;
	int					int_num = 0;
	char					chr_iexist,chr_iauthorised,chr_iconverted;
	char					chr_l_buf[BUFFER_LEN];
	int					int_retval;

   char              chr_l_h_from_tiposec[TYPEOF_SEC_LEN] = APL_NULL_STRING,
							chr_l_h_to_tiposec[TYPEOF_SEC_LEN] = APL_NULL_STRING,
							chr_l_h_newcode[APL_INSTRUMENTCODE_LEN] = APL_NULL_STRING;
   char					chr_l_h_fromclscode[5] = APL_NULL_STRING;
   double            l_h_from_minfmttrdquantity = 0,
					      l_h_to_minfmttrdquantity = 0;
	short             l_i_from_tiposec = 0,
							l_i_to_tiposec = 0,
							l_i_from_minfmttrdqty = 0,
							l_i_to_minfmttrdqty = 0,
							l_i_newcode = 0;
	short					l_i_fromclscode = 0;
	short             int_l_jocondexists;
   char              chr_mainfuncarea[APL_MAINFUNCAREA_LEN] = APL_NULL_STRING;
   char              chr_l_condid[APL_CONDID_LEN] = APL_NULL_STRING;
	int               int_val=0;

	EXEC SQL VAR chr_l_h_newcode IS STRING;
	EXEC SQL VAR chr_l_h_fromclscode IS STRING;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CR_Proc_DBSecConvAuth \n",NULL,p_intl_env_data_struct_h_d);

	

	if (CO_SplitStr(argv[9],'|',&int_num,&temp) != APL_SUCCESS)
		APL_GOBACK_FAIL

	strcpy(chr_l_from_sec,temp[0]);
	strcpy(chr_l_auth_reset_flg,temp[1]);

	if (strlen(chr_l_from_sec) == 0)
		APL_DATA_MISSING("FROM SECURITY CODE",APL_NULL_STRING,APL_NULL_STRING)
	if (strlen(chr_l_auth_reset_flg) == 0)
		APL_DATA_MISSING("AUTHORIZE/RESET FLG",APL_NULL_STRING,APL_NULL_STRING)
	if (strcmp(chr_l_auth_reset_flg,"A") == 0)
	{
		strcpy(chr_l_parri_passu_flg,temp[2]);
	
		if (strlen(chr_l_parri_passu_flg) == 0)
			APL_DATA_MISSING("PARRI PASSU FLG",APL_NULL_STRING,APL_NULL_STRING)
   
      memset(chr_g_event_id,APL_NULL_CHAR,17);
      if (strcmp(chr_l_parri_passu_flg,"Y") == 0)
          strcpy(chr_g_event_id,temp[3]);
	}
		
	if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
		APL_GOBACK_FAIL

	memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
	sprintf(chr_l_buf,"From Security is %s \n",chr_l_from_sec);
	CO_ProcMonitor(p_ptr_log_file,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

	memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
	sprintf(chr_l_buf,"Authorize/Reset chr_flag is %s \n",chr_l_auth_reset_flg);
	CO_ProcMonitor(p_ptr_log_file,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

	memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
	sprintf(chr_l_buf,"Mode is %s \n",p_intl_env_data_struct_h_d->h_mode);
	CO_ProcMonitor(p_ptr_log_file,chr_l_buf,NULL,p_intl_env_data_struct_h_d);

	chr_iexist = 'Y';
	chr_iauthorised = 'Y';
	chr_iconverted = 'Y';

	int_retval = CO_Chk_SecValid(chr_l_from_sec,chr_iexist,chr_iauthorised,NULL,NULL,NULL,chr_iconverted,l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
		APL_GOBACK_FAIL

	sqlca.sqlcode = 0;

	int_l_jocondexists = 0;
   strcpy(chr_mainfuncarea, "SEC_CONV");
   strcpy(chr_l_condid, "CLSCODE_CHK_FOR_NTRD");
      
   int_val =  CO_Chk_CntryEnabled(chr_mainfuncarea,
                      chr_l_condid,
                      &int_l_jocondexists,
                      l_debug_info_ptr);
   if (int_val != APL_SUCCESS)
      APL_GOBACK_FAIL  

	if (CO_RtvSysDtTime(chr_h_sys_time_stamp, l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL

	i_sys_access_stamp = 0;

	if (strcmp(chr_l_auth_reset_flg,"R") == 0)
	{
		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL

		EXEC SQL UPDATE MT_INSTRUMENT
		SET NEW_CD = NULL,
			 NEW_MAKER = NULL,
			 timestamp = :chr_h_sys_time_stamp:i_sys_access_stamp
		WHERE security_cd = :chr_l_from_sec;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

		EXEC SQL DELETE FROM DL_INSTRUMENTCONV
		WHERE frm_seccd = :chr_l_from_sec;

		IS_ANY_ORA_ERROR

		APL_GOBACK_SUCCESS
	}
	else if(strcmp(chr_l_auth_reset_flg,"A") == 0)
	{
		
		

		EXEC SQL SELECT SECURITY_TYPE,MIN_FMT_DL_QTY,NEW_CD,CLASSCD
		INTO chr_l_h_from_tiposec:l_i_from_tiposec, l_h_from_minfmttrdquantity:l_i_from_minfmttrdqty,chr_l_h_newcode:l_i_newcode,
		chr_l_h_fromclscode:l_i_fromclscode
		FROM MT_INSTRUMENT
		WHERE SECURITY_CD = :chr_l_from_sec;
	
		EXEC SQL SELECT SECURITY_TYPE,MIN_FMT_DL_QTY
		INTO chr_l_h_to_tiposec:l_i_to_tiposec, l_h_to_minfmttrdquantity:l_i_to_minfmttrdqty
		FROM MT_INSTRUMENT
		WHERE SECURITY_CD = :chr_l_h_newcode;

		if (strcmp(chr_l_h_to_tiposec,APL_INSTRU_FMT) == 0)
		{
				if(strcmp(chr_l_h_from_tiposec,APL_INSTRU_FMT) == 0)
				{
					if(l_h_from_minfmttrdquantity != l_h_to_minfmttrdquantity)
					{
						CO_InsertErr(l_debug_info_ptr,
											ERR_SEC_CANT_CONVERT,
											"Min Denom Different",
											APL_NULL_STRING,
											APL_NULL_STRING,
											__LINE__,
											__FILE__);
						APL_GOBACK_FAIL
					}
				}
				else
				{
					CO_InsertErr(l_debug_info_ptr,
										ERR_SEC_CANT_CONVERT,
										"Non-FMT To FMT CONV",
										APL_NULL_STRING,
										APL_NULL_STRING,
										__LINE__,
										__FILE__);
					APL_GOBACK_FAIL
				}
		}
		
		if (int_l_jocondexists)
		{
			if ((strcmp(chr_l_h_fromclscode,"NTRD")) == 0)
			{
				CO_InsertErr(l_debug_info_ptr,ERR_NTRDTYPE_SEC_NOTALLOWED,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
         	APL_GOBACK_FAIL
			}
		}
			
		

		CO_ProcMonitor(p_ptr_log_file,"SECURITY CONVERSION WILL NOT CONVERT TRADES/POSITIONS & ORDERS FOR FROZEN ACCOUNTS\n",NULL,p_intl_env_data_struct_h_d);

		if (CR_Mod_OrdSecConv(chr_l_from_sec,argv,p_ptr_log_file,l_debug_info_ptr) != APL_SUCCESS)
			APL_GOBACK_FAIL
		
		if (CR_Mod_TrdSecConv(chr_l_from_sec,argv,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr) != APL_SUCCESS)
			APL_GOBACK_FAIL
		
		if (CR_Mod_PosSecConv(chr_l_from_sec,chr_l_parri_passu_flg,argv,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr) != APL_SUCCESS)
			APL_GOBACK_FAIL
			
		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL
	
		
			
			
			 
			EXEC SQL UPDATE DL_INSTRUMENTCONV
			SET CHNG_DT = :chr_h_sys_time_stamp:i_sys_access_stamp
			WHERE frm_seccd = :chr_l_from_sec
			AND CHNG_DT IS NULL;
		

		IS_ANY_ORA_ERROR

		EXEC SQL UPDATE MT_INSTRUMENT
		SET NEW_CD = NULL,
			 NEW_MAKER = NULL,
			 timestamp = :chr_h_sys_time_stamp:i_sys_access_stamp
		WHERE security_cd = :chr_l_from_sec;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
		
		APL_GOBACK_SUCCESS
	}

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CR_Proc_DBSecConvAuth successfully \n",NULL,p_intl_env_data_struct_h_d);
		
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CR_Proc_DBSecConvAuth with failure\n",NULL,p_intl_env_data_struct_h_d);
		
		return(APL_FAILURE);
	}
}


 
 int CR_Mod_PosSecConv(char *p_from_sec,char *p_parri_passu_flg,char **argv,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca					  sqlca;
	int								  int_retval;
	DL_INSTRUMENTCONV_STRUCT_H				  l_dl_instrumentconv_struct_h;
	DL_INSTRUMENTCONV_STRUCT_I				  l_dl_instrumentconv_struct_i;
	DL_SAFEK_STRUCT_H				  h_safekeep_pos;
	DL_SAFEK_STRUCT_I				  i_safekeep_pos;
	DL_INSTRUMENTCONV_REP_TEMP_STRUCT_H   l_dl_instrumentconv_rep_temp_struct_h;
	DL_INSTRUMENTCONV_REP_TEMP_STRUCT_I   l_dl_instrumentconv_rep_temp_struct_i;
	int								  int_l_count = 0;
	int								  int_l_pndtrdgr = 0 ;
	int								  int_l_count_gr = 0 ;
	FILE								  *l_sec_conv_rpt_file = NULL;
	FILE								  *l_sec_conv_pend_file = NULL;
	FILE								  *l_sec_conv_del_file = NULL; 
	int								  int_l_jocondexists = 0;
	int								  int_l_refno_count = 1;
	char								  chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	char					  			  chr_l_acc_status1[APL_STATUS_LEN] = APL_NULL_STRING;
	char					  			  chr_l_acc_status2[APL_STATUS_LEN] = APL_NULL_STRING;
	char					  			  chr_l_client_a[APL_CLIENT_LENGTH] = APL_NULL_STRING;
	char                         chr_h_to_clscode[5] = APL_NULL_STRING; 
	char                 		  h_to_security[APL_INSTRUMENTCODE_LEN]  = APL_NULL_STRING;
	short                		  i_to_security = 0 ; 
	short                        i_to_clscode = 0; 

	EXEC SQL VAR l_dl_instrumentconv_struct_h.h_dl_client IS STRING;
	EXEC SQL VAR h_safekeep_pos.h_dl_client IS STRING;
	EXEC SQL VAR h_safekeep_pos.h_securitycd IS STRING;
	EXEC SQL VAR h_safekeep_pos.h_loccode IS STRING;
	EXEC SQL VAR l_dl_instrumentconv_rep_temp_struct_h.h_securitycd IS STRING;
	EXEC SQL VAR l_dl_instrumentconv_rep_temp_struct_h.h_dl_class IS STRING;
	EXEC SQL VAR l_dl_instrumentconv_rep_temp_struct_h.h_dl_client IS STRING;
	EXEC SQL VAR l_dl_instrumentconv_rep_temp_struct_h.h_indentity_no IS STRING;
	EXEC SQL VAR l_dl_instrumentconv_rep_temp_struct_h.h_loccode IS STRING;
	EXEC SQL VAR chr_l_client_a IS STRING;
	EXEC SQL VAR h_to_security IS STRING; 
	EXEC SQL VAR chr_h_to_clscode IS STRING; 

	short i_dl_client = 0;

	memset(chr_l_client_a,APL_NULL_CHAR,APL_CLIENT_LENGTH);

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CR_Mod_PosSecConv \n",NULL,p_intl_env_data_struct_h_d);
	
	sqlca.sqlcode = 0;

	

	int_retval = CO_Rtv_RptFileName("SC","Security Conversion Report",80,p_intl_env_data_struct_h_d->processtion,argv,&l_sec_conv_rpt_file,l_debug_info_ptr); 

	if (int_retval != APL_SUCCESS)
		return(APL_FAILURE);

	

	int_retval = CR_Prnt_SecConvRptHdr(l_sec_conv_rpt_file,p_from_sec,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
		APL_GOBACK_FAIL

	int_retval = CO_Rtv_RptFileName("SP","Security Conversion Pending Trades Report",80,p_intl_env_data_struct_h_d->processtion,argv,&l_sec_conv_pend_file,l_debug_info_ptr); 

	if (int_retval != APL_SUCCESS)
		APL_GOBACK_FAIL

	

	fprintf(l_sec_conv_pend_file,"\n The Following Accounts Have Pending Trades and are not processed in Security Conversion\n\n");

	
	if( APL_FAILURE == CO_Chk_CntryEnabled("SEC_CONV","CLSCODE_CHK_FOR_NTRD",&int_l_jocondexists,l_debug_info_ptr))
      APL_GOBACK_FAIL

	
	
	if (int_l_jocondexists)
	{
	   EXEC SQL SELECT NEW_CD
   	INTO :h_to_security:i_to_security
   	FROM MT_INSTRUMENT
   	WHERE security_cd = :p_from_sec;

 	  IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)	

		EXEC SQL SELECT CLASSCD
      INTO :chr_h_to_clscode:i_to_clscode
      FROM MT_INSTRUMENT
      WHERE security_cd = :h_to_security;

      IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

		int_retval = CO_Rtv_RptFileName("SD","Security Conversion Deliver Trades Report",80,p_intl_env_data_struct_h_d->processtion,argv,&l_sec_conv_del_file,l_debug_info_ptr); 

   	if (int_retval != APL_SUCCESS)
      	APL_GOBACK_FAIL
		if (strcmp(chr_h_to_clscode,"NTRD") == 0)
		{
   		fprintf(l_sec_conv_del_file,"\n The Following Accounts Have Deliver Trades and are not processed in Security Conversion\n\n");
		}
		else
		{
			fprintf(l_sec_conv_del_file,"\n No Exception Accounts can be int_found as the To Security is of TRD type \n\n");
		}
	}
	

	if( APL_FAILURE == CO_Chk_CntryEnabled("SEC_CONV","PEND_TRADES",&int_l_pndtrdgr,l_debug_info_ptr))
		APL_GOBACK_FAIL


	 if( int_l_pndtrdgr )
	 {

		EXEC SQL DECLARE CURS_PEND_TRADE CURSOR FOR
		SELECT DISTINCT CLIENT FROM DL_DEAL WHERE DEAL_STAT IN ('SS','MS','UU','AA','CC','DU')
		AND SECURITY_CD = :p_from_sec ORDER BY CLIENT ; 

		IS_ANY_ORA_ERROR

		EXEC SQL OPEN CURS_PEND_TRADE ; 

		IS_ANY_ORA_ERROR

		for( ; ; )
		{
			EXEC SQL FETCH CURS_PEND_TRADE INTO :chr_l_client_a:i_dl_client ;

			IS_ANY_ORA_ERROR

			if(APL_ZERO_RESULT_SET)
			 break ;

			fprintf(l_sec_conv_pend_file,"   %-12s\n",chr_l_client_a);
		
		}

		EXEC SQL CLOSE CURS_PEND_TRADE ;

		IS_ANY_ORA_ERROR

		if(!sqlca.sqlerrd[2])
			fprintf(l_sec_conv_pend_file,"             -------------------No Accounts Found------------------");

 
	 }
	strcpy(chr_l_acc_status1, STATUS_FROZ_AUTH);
	strcpy(chr_l_acc_status2, STATUS_FROZ_UAUTH);
	

	
	int_retval = CR_Chk_SecIn(p_from_sec,p_ptr_log_file,l_debug_info_ptr);
	if (int_retval == APL_SUCCESS)
	{
	
		
		
		
		if ((int_l_jocondexists > 0) && (strcmp(chr_h_to_clscode,"NTRD") == 0)) 
		{
			EXEC SQL DECLARE CURS_DEL_TRADE CURSOR FOR
 		    SELECT DISTINCT CLIENT FROM DL_DEAL WHERE 
			 security_cd=RTRIM(:p_from_sec)
			 AND EXISTS (SELECT CLIENT FROM MT_CLIENT WHERE MT_CLIENT.CLIENT = DL_DEAL.CLIENT AND STATUS NOT IN (:chr_l_acc_status1,:chr_l_acc_status2)) 
				AND (DEAL_CD = '1' or DEAL_CD = '3' or DEAL_CD = '5' or DEAL_CD = '7')
      	 ORDER BY CLIENT ;

		      IS_ANY_ORA_ERROR

 		     EXEC SQL OPEN CURS_DEL_TRADE ;

 		     IS_ANY_ORA_ERROR

 	     for( ; ; )
   	   {
      	   EXEC SQL FETCH CURS_DEL_TRADE INTO :chr_l_client_a:i_dl_client ;

 	        IS_ANY_ORA_ERROR

 	        if(APL_ZERO_RESULT_SET)
   	       break ;

 	        fprintf(l_sec_conv_del_file,"   %-12s\n",chr_l_client_a);

 	     	}

 	     	EXEC SQL CLOSE CURS_DEL_TRADE ;

 	      IS_ANY_ORA_ERROR

   	   if(!sqlca.sqlerrd[2])
				fprintf(l_sec_conv_del_file,"             -------------------No Accounts Found------------------");
		
		}

		
		

		EXEC SQL LOCK TABLE DL_INSTRUMENTCONV_TEMP IN EXCLUSIVE MODE NOWAIT;
		IS_ANY_ORA_ERROR

		
		
		

		strcpy(chr_l_acc_status1, STATUS_FROZ_AUTH);
		strcpy(chr_l_acc_status2, STATUS_FROZ_UAUTH);

		if (strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind,"Y") == 0)
		{
			
			if ((int_l_jocondexists > 0) && (strcmp(chr_h_to_clscode,"NTRD") == 0))
			{
				EXEC SQL DECLARE SafekInfo3 CURSOR FOR
            SELECT * FROM DL_SAFEK
            WHERE security_cd = :p_from_sec
            AND NOT EXISTS (SELECT client FROM DL_INSTRUMENTCONV_TEMP WHERE security_cd = DL_SAFEK.security_cd AND client = DL_SAFEK.client AND location_cd = DL_SAFEK.location_cd)
            AND EXISTS (SELECT client FROM MT_CLIENT WHERE MT_CLIENT.CLIENT = DL_SAFEK.CLIENT AND STATUS NOT IN (:chr_l_acc_status1,:chr_l_acc_status2))
            AND (DL_SAFEK.SAFEKEEP_POS+DL_SAFEK.VAL_REC+DL_SAFEK.VAL_DEL+DL_SAFEK.NVALRECEIVE+DL_SAFEK.NVALDELIVER) > 0
				AND NOT EXISTS (Select distinct CLIENT from dl_deal where client = DL_SAFEK.client and security_cd = DL_SAFEK.security_cd and security_cd  = :p_from_sec and (deal_cd = '1' or deal_cd = '3' or deal_cd = '5' or deal_cd = '7'))
				FOR UPDATE OF timestamp;

            EXEC SQL OPEN SafekInfo3;
			}
			else
			{
				EXEC SQL DECLARE SafekInfo1 CURSOR FOR
				SELECT * FROM DL_SAFEK
				WHERE security_cd = :p_from_sec
				AND NOT EXISTS (SELECT client FROM DL_INSTRUMENTCONV_TEMP WHERE security_cd = DL_SAFEK.security_cd AND client = DL_SAFEK.client AND location_cd = DL_SAFEK.location_cd)
				AND EXISTS (SELECT client FROM MT_CLIENT WHERE MT_CLIENT.CLIENT = DL_SAFEK.CLIENT AND STATUS NOT IN (:chr_l_acc_status1,:chr_l_acc_status2))
				AND (DL_SAFEK.SAFEKEEP_POS+DL_SAFEK.VAL_REC+DL_SAFEK.VAL_DEL+DL_SAFEK.NVALRECEIVE+DL_SAFEK.NVALDELIVER) > 0
				FOR UPDATE OF timestamp;

				EXEC SQL OPEN SafekInfo1;
			}
			IS_ANY_ORA_ERROR
		}
		else
		{
						
				if ((int_l_jocondexists > 0) && (strcmp(chr_h_to_clscode,"NTRD") == 0)) 
				{
					EXEC SQL DECLARE SafekInfo4 CURSOR FOR
               SELECT * FROM DL_SAFEK
               WHERE security_cd = :p_from_sec
               AND NOT EXISTS (SELECT client FROM DL_INSTRUMENTCONV_TEMP WHERE security_cd = DL_SAFEK.security_cd AND client = DL_SAFEK.client AND location_cd IS NULL)
               AND EXISTS (SELECT client FROM MT_CLIENT WHERE MT_CLIENT.CLIENT = DL_SAFEK.CLIENT AND STATUS NOT IN (:chr_l_acc_status1,:chr_l_acc_status2))
               AND (DL_SAFEK.SAFEKEEP_POS+DL_SAFEK.VAL_REC+DL_SAFEK.VAL_DEL+DL_SAFEK.NVALRECEIVE+DL_SAFEK.NVALDELIVER) > 0
					AND NOT EXISTS (Select distinct CLIENT from dl_deal where client = DL_SAFEK.client and security_cd = DL_SAFEK.security_cd 
					and security_cd  = :p_from_sec and (deal_cd = '1' or deal_cd = '3' or deal_cd = '5' or deal_cd = '7'))
					FOR UPDATE OF timestamp;
				
					EXEC SQL OPEN SafekInfo4;
				}
				else
				{
					EXEC SQL DECLARE SafekInfo2 CURSOR FOR
					SELECT * FROM DL_SAFEK
					WHERE security_cd = :p_from_sec
					AND NOT EXISTS (SELECT client FROM DL_INSTRUMENTCONV_TEMP WHERE security_cd = DL_SAFEK.security_cd AND client = DL_SAFEK.client AND location_cd IS NULL)
					AND EXISTS (SELECT client FROM MT_CLIENT WHERE MT_CLIENT.CLIENT = DL_SAFEK.CLIENT AND STATUS NOT IN (:chr_l_acc_status1,:chr_l_acc_status2))
					AND (DL_SAFEK.SAFEKEEP_POS+DL_SAFEK.VAL_REC+DL_SAFEK.VAL_DEL+DL_SAFEK.NVALRECEIVE+DL_SAFEK.NVALDELIVER) > 0
					FOR UPDATE OF timestamp;
			
					EXEC SQL OPEN SafekInfo2;
				}
			
			IS_ANY_ORA_ERROR
		}

		for(;;)
		{
			if (strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind,"Y") == 0)
			{
				if ((int_l_jocondexists > 0) && (strcmp(chr_h_to_clscode,"NTRD") == 0))
				{
					EXEC SQL FETCH SafekInfo3 INTO :h_safekeep_pos:i_safekeep_pos;
				}
				else
				{
					EXEC SQL FETCH SafekInfo1 INTO :h_safekeep_pos:i_safekeep_pos;
				}
			}
			else
			{
				if ((int_l_jocondexists > 0) && (strcmp(chr_h_to_clscode,"NTRD") == 0))
            {
               EXEC SQL FETCH SafekInfo4 INTO :h_safekeep_pos:i_safekeep_pos;
            }
            else
            {
					EXEC SQL FETCH SafekInfo2 INTO :h_safekeep_pos:i_safekeep_pos;
				}
			}			
			IS_ANY_ORA_ERROR

			if (APL_ZERO_RESULT_SET)
				break;

			if( int_l_pndtrdgr )
			{
				EXEC SQL Select count(*) into :int_l_count_gr from dl_deal where client = :h_safekeep_pos.h_dl_client and
				security_cd = :h_safekeep_pos.h_securitycd and DEAL_STAT in ('SS','MS','UU','AA','CC','DU') ; 
		
				IS_ANY_ORA_ERROR

				if (int_l_count_gr)
				{
					 continue;
				}
			
			}
			
			
			int_retval = CR_Proc_PosSecConv(p_from_sec,&int_l_refno_count,p_parri_passu_flg,l_sec_conv_rpt_file,p_intl_env_data_struct_h_d,&h_safekeep_pos,&i_safekeep_pos,p_ptr_log_file,l_debug_info_ptr);

			if (int_retval != APL_SUCCESS)
			{
				IS_ANY_ERROR_FATAL

				EXEC SQL ROLLBACK WORK;
				IS_ANY_ORA_ERROR

				int_l_count = 0;

				
				CO_ProcMonitor(p_ptr_log_file,APL_NULL_STRING,l_debug_info_ptr,p_intl_env_data_struct_h_d);
				*l_debug_info_ptr = NULL;
			
				
				EXEC SQL INSERT INTO DL_INSTRUMENTCONV_TEMP
					VALUES(:h_safekeep_pos.h_dl_client:i_safekeep_pos.i_dl_client,:h_safekeep_pos.h_securitycd:i_safekeep_pos.i_securitycd,:h_safekeep_pos.h_loccode:i_safekeep_pos.i_loccode,NULL);

				IS_ANY_ORA_ERROR
			
				
				EXEC SQL COMMIT WORK;
				IS_ANY_ORA_ERROR
		
				

				EXEC SQL LOCK TABLE DL_INSTRUMENTCONV_TEMP IN EXCLUSIVE MODE NOWAIT;
				IS_ANY_ORA_ERROR

				
				if (strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind,"Y") == 0)
				{
					if ((int_l_jocondexists > 0) && (strcmp(chr_h_to_clscode,"NTRD") == 0))
					{
						EXEC SQL OPEN SafekInfo3;
					}
					else
					{
						EXEC SQL OPEN SafekInfo1;
					}
				}
				else
				{
					if ((int_l_jocondexists > 0) && (strcmp(chr_h_to_clscode,"NTRD") == 0))
               {
						EXEC SQL OPEN SafekInfo4;
					}
					else
					{	
						EXEC SQL OPEN SafekInfo2;
					}
				}
				IS_ANY_ORA_ERROR
		
				

		 		int_retval = CA_LockRec(argv,p_ptr_log_file,l_debug_info_ptr);

		 		if (int_retval != APL_SUCCESS)
					APL_GOBACK_FAIL
			}
			else 
			{
				int_l_count++;
				
	
            if (APL_FAILURE==EI_Mod_MQData( h_safekeep_pos.h_dl_client,
           		                             APL_NULL_STRING,
               		                       p_from_sec,
                     		                 h_safekeep_pos.h_loccode,
                           		           "H|SC|",
                                 		     l_debug_info_ptr))
             APL_GOBACK_FAIL
		
				if (int_l_count%C_COMMITSIZE == 0)
				{
					memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
					sprintf(chr_l_buf,"Processed %d Safekeeping records",int_l_count);
					EXEC SQL UPDATE SYS_BATCHPROC
					SET stat_det = :chr_l_buf
					WHERE process_name = :argv[0]
					AND   proc_init = :argv[1]
					AND START_DATE = :argv[2]
					AND status_ind = 'started';

					IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
					
					EXEC SQL COMMIT WORK;
					IS_ANY_ORA_ERROR
				
					

					EXEC SQL LOCK TABLE DL_INSTRUMENTCONV_TEMP IN EXCLUSIVE MODE NOWAIT;
					IS_ANY_ORA_ERROR
				
					
					if (strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind,"Y") == 0)
					{
						if ((int_l_jocondexists > 0) && (strcmp(chr_h_to_clscode,"NTRD") == 0))
						{
							EXEC SQL OPEN SafekInfo3;
						}
						else
						{
							EXEC SQL OPEN SafekInfo1;
						}
					}
					else
					{
						if ((int_l_jocondexists > 0) && (strcmp(chr_h_to_clscode,"NTRD") == 0))
                  {
                     EXEC SQL OPEN SafekInfo4;
						}
						else
						{
							EXEC SQL OPEN SafekInfo2;
						}
					}
					IS_ANY_ORA_ERROR
				
					

		 			int_retval = CA_LockRec(argv,p_ptr_log_file,l_debug_info_ptr);

		 			if (int_retval != APL_SUCCESS)
						APL_GOBACK_FAIL
					
				}
			}
		}

		

		if (strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind,"Y") == 0)
		{
			if ((int_l_jocondexists > 0) && (strcmp(chr_h_to_clscode,"NTRD") == 0)) 
			{
				EXEC SQL CLOSE SafekInfo3;
			}
			else
			{
				EXEC SQL CLOSE SafekInfo1;
			}
		}
		else
		{
			if ((int_l_jocondexists > 0) && (strcmp(chr_h_to_clscode,"NTRD") == 0))  
         {
            EXEC SQL CLOSE SafekInfo4;
			}
			else
			{
				EXEC SQL CLOSE SafekInfo2;
			}
		}

		




		EXEC SQL LOCK TABLE DL_INSTRUMENTCONV_REP_TEMP IN EXCLUSIVE MODE NOWAIT;
		IS_ANY_ORA_ERROR
		
		

		EXEC SQL DECLARE SecConvRepTempInfo CURSOR FOR
		SELECT * FROM DL_INSTRUMENTCONV_REP_TEMP
		ORDER BY CLIENT,LOCATION_CD,DEAL_TYPE;

		EXEC SQL OPEN SecConvRepTempInfo;

		IS_ANY_ORA_ERROR

		for(;;)
		{
			EXEC SQL FETCH SecConvRepTempInfo INTO :l_dl_instrumentconv_rep_temp_struct_h:l_dl_instrumentconv_rep_temp_struct_i;
			IS_ANY_ORA_ERROR

			if (APL_ZERO_RESULT_SET)
				break;

			if (l_dl_instrumentconv_rep_temp_struct_i.i_loccode == -1)
				strcpy(l_dl_instrumentconv_rep_temp_struct_h.h_loccode,APL_NULL_STRING);
			
			if (l_dl_instrumentconv_rep_temp_struct_i.i_qty == -1)
				l_dl_instrumentconv_rep_temp_struct_h.h_qty = 0.0;

			int_retval = CR_Prnt_SecConvRpt(l_sec_conv_rpt_file,l_dl_instrumentconv_rep_temp_struct_h.h_securitycd,l_dl_instrumentconv_rep_temp_struct_h.h_dl_class,l_dl_instrumentconv_rep_temp_struct_h.h_dl_client,l_dl_instrumentconv_rep_temp_struct_h.h_indentity_no,l_dl_instrumentconv_rep_temp_struct_h.h_qty,l_dl_instrumentconv_rep_temp_struct_h.h_loccode,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);

			if (int_retval != APL_SUCCESS)
				APL_GOBACK_FAIL
		}

		EXEC SQL CLOSE SecConvRepTempInfo;

		if (sqlca.sqlerrd[2] == 0)
			fprintf(l_sec_conv_rpt_file,"              ------No trades created for conversion------ \n");

	   
	   int_retval = CR_Prnt_SecConvRptFtr(l_sec_conv_rpt_file,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);

	   if (int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL

		
		EXEC SQL DELETE FROM DL_INSTRUMENTCONV_TEMP;
		IS_ANY_ORA_ERROR
	
		
		EXEC SQL DELETE FROM DL_INSTRUMENTCONV_REP_TEMP;
		IS_ANY_ORA_ERROR
		
		APL_GOBACK_SUCCESS
	}

	
	else
	{
		if ((int_l_jocondexists > 0) && (strcmp(chr_h_to_clscode,"NTRD") == 0))
      {
         EXEC SQL DECLARE CURS_DEL1_TRADE CURSOR FOR
          SELECT DISTINCT CLIENT FROM DL_DEAL WHERE
          security_cd=RTRIM(:p_from_sec)
			 AND client in ( SELECT client FROM DL_INSTRUMENTCONV WHERE frm_seccd=:p_from_sec AND CHNG_DT IS NULL )
			 AND (DEAL_CD = '1' or DEAL_CD = '3' or DEAL_CD = '5' or DEAL_CD = '7')
			 ORDER    BY CLIENT;	

			 IS_ANY_ORA_ERROR

           EXEC SQL OPEN CURS_DEL1_TRADE ;

           IS_ANY_ORA_ERROR

        for( ; ; )
         {
            EXEC SQL FETCH CURS_DEL1_TRADE INTO :chr_l_client_a:i_dl_client ;

           IS_ANY_ORA_ERROR

           if(APL_ZERO_RESULT_SET)
             break ;

           fprintf(l_sec_conv_del_file,"   %-12s\n",chr_l_client_a);

         }

         EXEC SQL CLOSE CURS_DEL1_TRADE ;

         IS_ANY_ORA_ERROR

         if(!sqlca.sqlerrd[2])
            fprintf(l_sec_conv_del_file,"             -------------------No Accounts Found------------------");
		}
	}

	
		
	

	EXEC SQL LOCK TABLE DL_INSTRUMENTCONV_TEMP IN EXCLUSIVE MODE NOWAIT;
	IS_ANY_ORA_ERROR

	EXEC SQL DECLARE SecConv_Recs CURSOR FOR
		SELECT * FROM DL_INSTRUMENTCONV
		WHERE frm_seccd = :p_from_sec
		AND CHNG_DT IS NULL;

	EXEC SQL OPEN SecConv_Recs;

	IS_ANY_ORA_ERROR

	for(;;)
	{
		EXEC SQL FETCH SecConv_Recs INTO :l_dl_instrumentconv_struct_h:l_dl_instrumentconv_struct_i;

		IS_ANY_ORA_ERROR

		if (APL_ZERO_RESULT_SET)
			break;

		
		
		

		strcpy(chr_l_acc_status1, STATUS_FROZ_AUTH);
		strcpy(chr_l_acc_status2, STATUS_FROZ_UAUTH);

		if (strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind,"Y") == 0)
		{
			
			if ((int_l_jocondexists > 0) && (strcmp(chr_h_to_clscode,"NTRD") == 0))
         {
				EXEC SQL DECLARE SafekRecs3 CURSOR FOR
            SELECT * FROM DL_SAFEK
            WHERE security_cd = :p_from_sec
            AND client = :l_dl_instrumentconv_struct_h.h_dl_client
            AND NOT EXISTS (SELECT client FROM DL_INSTRUMENTCONV_TEMP WHERE security_cd = DL_SAFEK.security_cd AND client = DL_SAFEK.client AND location_cd = DL_SAFEK.location_cd)
            AND EXISTS (SELECT client FROM MT_CLIENT WHERE MT_CLIENT.CLIENT = DL_SAFEK.CLIENT AND STATUS NOT IN (:chr_l_acc_status1,:chr_l_acc_status2))
            AND (DL_SAFEK.SAFEKEEP_POS+DL_SAFEK.VAL_REC+DL_SAFEK.VAL_DEL+DL_SAFEK.NVALRECEIVE+DL_SAFEK.NVALDELIVER) > 0
				AND NOT EXISTS (Select distinct CLIENT from dl_deal where client = DL_SAFEK.client and security_cd = DL_SAFEK.security_cd and security_cd  = :p_from_sec and (deal_cd = '1' or deal_cd = '3' or deal_cd = '5' or deal_cd = '7'))
				FOR UPDATE OF timestamp;

            EXEC SQL OPEN SafekRecs3;
		
			}
			else
			{
				EXEC SQL DECLARE SafekRecs1 CURSOR FOR
				SELECT * FROM DL_SAFEK
				WHERE security_cd = :p_from_sec
				AND client = :l_dl_instrumentconv_struct_h.h_dl_client
				AND NOT EXISTS (SELECT client FROM DL_INSTRUMENTCONV_TEMP WHERE security_cd = DL_SAFEK.security_cd AND client = DL_SAFEK.client AND location_cd = DL_SAFEK.location_cd)
				AND EXISTS (SELECT client FROM MT_CLIENT WHERE MT_CLIENT.CLIENT = DL_SAFEK.CLIENT AND STATUS NOT IN (:chr_l_acc_status1,:chr_l_acc_status2))
				AND (DL_SAFEK.SAFEKEEP_POS+DL_SAFEK.VAL_REC+DL_SAFEK.VAL_DEL+DL_SAFEK.NVALRECEIVE+DL_SAFEK.NVALDELIVER) > 0
				FOR UPDATE OF timestamp;

				EXEC SQL OPEN SafekRecs1;
			}

			IS_ANY_ORA_ERROR
		}
		else
		{
			
         if ((int_l_jocondexists > 0) && (strcmp(chr_h_to_clscode,"NTRD") == 0))
         {
				EXEC SQL DECLARE SafekRecs4 CURSOR FOR
            SELECT * FROM DL_SAFEK
            WHERE security_cd = :p_from_sec
            AND client = :l_dl_instrumentconv_struct_h.h_dl_client
            AND NOT EXISTS (SELECT client FROM DL_INSTRUMENTCONV_TEMP WHERE security_cd = DL_SAFEK.security_cd AND client = DL_SAFEK.client AND location_cd IS NULL)
            AND EXISTS (SELECT client FROM MT_CLIENT WHERE MT_CLIENT.CLIENT = DL_SAFEK.CLIENT AND STATUS NOT IN (:chr_l_acc_status1,:chr_l_acc_status2))
            AND (DL_SAFEK.SAFEKEEP_POS+DL_SAFEK.VAL_REC+DL_SAFEK.VAL_DEL+DL_SAFEK.NVALRECEIVE+DL_SAFEK.NVALDELIVER) > 0
				AND NOT EXISTS (Select distinct CLIENT from dl_deal where client = DL_SAFEK.client and security_cd = DL_SAFEK.security_cd and security_cd  = :p_from_sec and (deal_cd = '1' or deal_cd = '3' or deal_cd = '5' or deal_cd = '7'))
				FOR UPDATE OF timestamp;

				EXEC SQL OPEN SafekRecs4;
			}
			else
			{

				EXEC SQL DECLARE SafekRecs2 CURSOR FOR
				SELECT * FROM DL_SAFEK
				WHERE security_cd = :p_from_sec
				AND client = :l_dl_instrumentconv_struct_h.h_dl_client
				AND NOT EXISTS (SELECT client FROM DL_INSTRUMENTCONV_TEMP WHERE security_cd = DL_SAFEK.security_cd AND client = DL_SAFEK.client AND location_cd IS NULL)
				AND EXISTS (SELECT client FROM MT_CLIENT WHERE MT_CLIENT.CLIENT = DL_SAFEK.CLIENT AND STATUS NOT IN (:chr_l_acc_status1,:chr_l_acc_status2))
				AND (DL_SAFEK.SAFEKEEP_POS+DL_SAFEK.VAL_REC+DL_SAFEK.VAL_DEL+DL_SAFEK.NVALRECEIVE+DL_SAFEK.NVALDELIVER) > 0
				FOR UPDATE OF timestamp;

				EXEC SQL OPEN SafekRecs2;
			}

			IS_ANY_ORA_ERROR
		}

		for(;;)
		{
			if (strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind,"Y") == 0)
			{
				if ((int_l_jocondexists > 0) && (strcmp(chr_h_to_clscode,"NTRD") == 0))
					EXEC SQL FETCH SafekRecs3 INTO :h_safekeep_pos:i_safekeep_pos;
				else
					EXEC SQL FETCH SafekRecs1 INTO :h_safekeep_pos:i_safekeep_pos;
			}
			else
			{
				if ((int_l_jocondexists > 0) && (strcmp(chr_h_to_clscode,"NTRD") == 0)) 
               EXEC SQL FETCH SafekRecs4 INTO :h_safekeep_pos:i_safekeep_pos;
            else
					EXEC SQL FETCH SafekRecs2 INTO :h_safekeep_pos:i_safekeep_pos;
			}
			IS_ANY_ORA_ERROR
		
			if (APL_ZERO_RESULT_SET)
				break;
			
			if( int_l_pndtrdgr )
			{
				EXEC SQL Select count(*) into :int_l_count_gr from dl_deal where client = :h_safekeep_pos.h_dl_client and
				security_cd = :h_safekeep_pos.h_securitycd and DEAL_STAT in ('SS','MS','UU','AA','CC','DU') ; 
		
				IS_ANY_ORA_ERROR

				if (int_l_count_gr)
				{
					 continue;
				}
			
			}

			int_retval = CR_Proc_PosSecConv(p_from_sec,&int_l_refno_count,p_parri_passu_flg,l_sec_conv_rpt_file,p_intl_env_data_struct_h_d,&h_safekeep_pos,&i_safekeep_pos,p_ptr_log_file,l_debug_info_ptr);

			if (int_retval != APL_SUCCESS)
			{
				IS_ANY_ERROR_FATAL

				EXEC SQL ROLLBACK WORK;
				IS_ANY_ORA_ERROR

				int_l_count = 0;

				
				CO_ProcMonitor(p_ptr_log_file,APL_NULL_STRING,l_debug_info_ptr,p_intl_env_data_struct_h_d);
				*l_debug_info_ptr = NULL;
				  
				
				EXEC SQL INSERT INTO DL_INSTRUMENTCONV_TEMP
					VALUES(:h_safekeep_pos.h_dl_client:i_safekeep_pos.i_dl_client,:h_safekeep_pos.h_securitycd:i_safekeep_pos.i_securitycd,:h_safekeep_pos.h_loccode:i_safekeep_pos.i_loccode,NULL);

				IS_ANY_ORA_ERROR
				
				
				EXEC SQL COMMIT WORK;
				IS_ANY_ORA_ERROR
					
				

				EXEC SQL LOCK TABLE DL_INSTRUMENTCONV_TEMP IN EXCLUSIVE MODE NOWAIT;
				IS_ANY_ORA_ERROR
				
				
				if (strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind,"Y") == 0)
				{
					if ((int_l_jocondexists > 0) && (strcmp(chr_h_to_clscode,"NTRD") == 0))  
						EXEC SQL OPEN SafekRecs3;
					else
						EXEC SQL OPEN SafekRecs1;
				}
				else
				{
					if ((int_l_jocondexists > 0) && (strcmp(chr_h_to_clscode,"NTRD") == 0)) 
                  EXEC SQL OPEN SafekRecs4;
					else
						EXEC SQL OPEN SafekRecs2;
				}

				IS_ANY_ORA_ERROR

				EXEC SQL OPEN SecConv_Recs; 
				IS_ANY_ORA_ERROR
		
				

				int_retval = CA_LockRec(argv,p_ptr_log_file,l_debug_info_ptr);

				if (int_retval != APL_SUCCESS)
					APL_GOBACK_FAIL
			}
			else
			{
				int_l_count++;
            
	
            if (APL_FAILURE==EI_Mod_MQData( h_safekeep_pos.h_dl_client,
                                            APL_NULL_STRING,
                                            p_from_sec,
                                            h_safekeep_pos.h_loccode,
                                            "H|SC|",
                                            l_debug_info_ptr))
             APL_GOBACK_FAIL

				if (int_l_count%C_COMMITSIZE == 0)
				{
					memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
					sprintf(chr_l_buf,"Processed %d Safekeeping records",int_l_count);
					EXEC SQL UPDATE SYS_BATCHPROC
					SET stat_det = :chr_l_buf
					WHERE process_name = :argv[0]
					AND   proc_init = :argv[1]
					AND START_DATE = :argv[2]
					AND status_ind = 'started';

					IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

					EXEC SQL COMMIT WORK;
					IS_ANY_ORA_ERROR
				
					

					EXEC SQL LOCK TABLE DL_INSTRUMENTCONV_TEMP IN EXCLUSIVE MODE NOWAIT;
					IS_ANY_ORA_ERROR
				
					
					if (strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind,"Y") == 0)
					{
						if ((int_l_jocondexists > 0) && (strcmp(chr_h_to_clscode,"NTRD") == 0)) 
							EXEC SQL OPEN SafekRecs3;
						else
							EXEC SQL OPEN SafekRecs1;
					}
					else
					{
						if ((int_l_jocondexists > 0) && (strcmp(chr_h_to_clscode,"NTRD") == 0))  
                     EXEC SQL OPEN SafekRecs4;
						else
							EXEC SQL OPEN SafekRecs2;
					}

					IS_ANY_ORA_ERROR
		
					

					 int_retval = CA_LockRec(argv,p_ptr_log_file,l_debug_info_ptr);

					 if (int_retval != APL_SUCCESS)
						APL_GOBACK_FAIL
				}
			}
		}
	
		if (strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind,"Y") == 0)
		{
			if ((int_l_jocondexists > 0) && (strcmp(chr_h_to_clscode,"NTRD") == 0))        
				EXEC SQL CLOSE SafekRecs3;
			else
				EXEC SQL CLOSE SafekRecs1;
		}
		else
		{ 
			if ((int_l_jocondexists > 0) && (strcmp(chr_h_to_clscode,"NTRD") == 0))   
            EXEC SQL CLOSE SafekRecs4;
			else
				EXEC SQL CLOSE SafekRecs2;
		}
	}

	

	EXEC SQL CLOSE SecConv_Recs;
		
	

	EXEC SQL LOCK TABLE DL_INSTRUMENTCONV_REP_TEMP IN EXCLUSIVE MODE NOWAIT;
	IS_ANY_ORA_ERROR
		
	

	EXEC SQL DECLARE SecConvRepTempRecs CURSOR FOR
	SELECT * FROM DL_INSTRUMENTCONV_REP_TEMP
	ORDER BY CLIENT,LOCATION_CD,DEAL_TYPE;

	EXEC SQL OPEN SecConvRepTempRecs;

	IS_ANY_ORA_ERROR

	for(;;)
	{
		EXEC SQL FETCH SecConvRepTempRecs INTO :l_dl_instrumentconv_rep_temp_struct_h:l_dl_instrumentconv_rep_temp_struct_i;
		IS_ANY_ORA_ERROR

		if (APL_ZERO_RESULT_SET)
			break;

		if (l_dl_instrumentconv_rep_temp_struct_i.i_loccode == -1)
			strcpy(l_dl_instrumentconv_rep_temp_struct_h.h_loccode,APL_NULL_STRING);
		
		if (l_dl_instrumentconv_rep_temp_struct_i.i_qty == -1)
			l_dl_instrumentconv_rep_temp_struct_h.h_qty = 0.0;

		int_retval = CR_Prnt_SecConvRpt(l_sec_conv_rpt_file,l_dl_instrumentconv_rep_temp_struct_h.h_securitycd,l_dl_instrumentconv_rep_temp_struct_h.h_dl_class,l_dl_instrumentconv_rep_temp_struct_h.h_dl_client,l_dl_instrumentconv_rep_temp_struct_h.h_indentity_no,l_dl_instrumentconv_rep_temp_struct_h.h_qty,l_dl_instrumentconv_rep_temp_struct_h.h_loccode,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL
	}

	EXEC SQL CLOSE SecConvRepTempRecs;

	if (sqlca.sqlerrd[2] == 0)
		fprintf(l_sec_conv_rpt_file,"              ------No trades created for conversion------ \n");

	
	int_retval = CR_Prnt_SecConvRptFtr(l_sec_conv_rpt_file,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
		APL_GOBACK_FAIL

	
	EXEC SQL DELETE FROM DL_INSTRUMENTCONV_TEMP;
	IS_ANY_ORA_ERROR
	
	
	EXEC SQL DELETE FROM DL_INSTRUMENTCONV_REP_TEMP;
	IS_ANY_ORA_ERROR
	
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		
		
		EXEC SQL COMMIT WORK;
		IS_ANY_ORA_ERROR

		

		int_retval = CA_LockRec(argv,p_ptr_log_file,l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
		  APL_GOBACK_FAIL
		
		

		int_retval = CO_Proc_RptClose(l_sec_conv_rpt_file,l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL
	
		int_retval = CO_Proc_RptClose(l_sec_conv_pend_file,l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL
	
		 CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CR_Mod_PosSecConv successfully \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		
		
		EXEC SQL ROLLBACK WORK;
		IS_ANY_ORA_ERROR

		
		 
		int_retval = CA_LockRec(argv,p_ptr_log_file,l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
		  APL_GOBACK_FAIL
		
		

		int_retval = CO_Proc_RptClose(l_sec_conv_rpt_file,l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL
		
		int_retval = CO_Proc_RptClose(l_sec_conv_pend_file,l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL
	
		 CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CR_Mod_PosSecConv with failure \n",NULL,p_intl_env_data_struct_h_d);
		
		return(APL_FAILURE);
	}
}


 
 int CR_Mod_TrdSecConv(char *p_from_sec,char **argv,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca 			sqlca;
	int						int_retval;
	int						int_l_pndtrdgr = 0 ;
	char						h_to_security[APL_INSTRUMENTCODE_LEN]  = APL_NULL_STRING;
	short						i_to_security;
	char						h_secconv_ind[APL_FLAG_LENGTH]  = APL_NULL_STRING;
	short						i_secconv_ind;
	char						chr_h_sys_time_stamp[APL_DATE_LEN] = APL_NULL_STRING;
	char						chr_l_acc_status1[APL_STATUS_LEN] = APL_NULL_STRING;
	char						chr_l_acc_status2[APL_STATUS_LEN] = APL_NULL_STRING;
	short						i_sys_access_stamp;
   
	char        chr_l_mq_client[APL_CLIENT_LENGTH] =APL_NULL_STRING;
	char        chr_l_mq_refno[17]     =APL_NULL_STRING;
   short       i_mq_account         = 0;
	short       i_mq_refno           = 0;

   
   
   int                          int_val=0;
	double                       h_qty = 0.0 ;
   char                         chr_l_posn_status[STATUS_POS_LEN]= APL_NULL_STRING;
	char                         chr_l_from_sec[APL_INSTRUMENTCODE_LEN] = APL_NULL_STRING; 
   char                         h_st_reg_no[21] = APL_NULL_STRING;
   char                         h_indentity_no[17] = APL_NULL_STRING;
   char                         h_dl_client[11] = APL_NULL_STRING;
   char                         h_securitycd[9] = APL_NULL_STRING;
   char                         h_loccode[5] = APL_NULL_STRING;
   char                         h_dealcd[2] = APL_NULL_STRING;
	char								  chr_h_to_clscode[5] = APL_NULL_STRING;
	short								  i_to_clscode = 0;	
   short                        curr_trd_flg = 0;
	short                        i_qty = 0; 
   short                        i_st_reg_no = 0;
   short                        i_indentity_no = 0;
   short                        i_dl_client = 0;
   short                        i_securitycd = 0;
   short                        i_loccode = 0;
   short                        i_dealcd = 0;
   short                        int_l_rucondexists;
	char                         chr_l_buf[BUFFER_LEN]; 
   char                         chr_mainfuncarea[APL_MAINFUNCAREA_LEN] = APL_NULL_STRING;
	char                         chr_l_condid[APL_CONDID_LEN] = APL_NULL_STRING;
	short 							  int_l_jocondexists;
	EXEC SQL VAR chr_l_posn_status IS STRING;
	EXEC SQL VAR chr_l_from_sec IS STRING;
   EXEC SQL VAR h_st_reg_no IS STRING;
   EXEC SQL VAR h_indentity_no IS STRING;
   EXEC SQL VAR h_dl_client IS STRING;
   EXEC SQL VAR h_securitycd IS STRING;
   EXEC SQL VAR h_loccode IS STRING;
   EXEC SQL VAR h_dealcd IS STRING;
	EXEC SQL VAR chr_h_to_clscode IS STRING; 
  
	   
		EXEC SQL VAR chr_l_mq_client IS STRING;
		EXEC SQL VAR chr_l_mq_refno IS STRING;

	EXEC SQL VAR h_to_security IS STRING;
	EXEC SQL VAR h_secconv_ind IS STRING;
  
	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CR_Mod_TrdSecConv \n",NULL,NULL);
	sqlca.sqlcode = 0;

	if (CO_RtvSysDtTime(chr_h_sys_time_stamp,l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL

	i_sys_access_stamp = 0;

	EXEC SQL SELECT NEW_CD
	INTO :h_to_security:i_to_security
	FROM MT_INSTRUMENT
	WHERE security_cd = :p_from_sec;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	
	int_retval = CR_Chk_SecIn(p_from_sec,p_ptr_log_file,l_debug_info_ptr);

	
	

		strcpy(chr_l_acc_status1, STATUS_FROZ_AUTH);
		strcpy(chr_l_acc_status2, STATUS_FROZ_UAUTH);

		

		memset(chr_mainfuncarea,APL_NULL_CHAR,APL_MAINFUNCAREA_LEN);
      memset(chr_l_condid,APL_NULL_CHAR,APL_CONDID_LEN);
      int_l_jocondexists = 0;

		strcpy(chr_mainfuncarea, "SEC_CONV");
      strcpy(chr_l_condid, "CLSCODE_CHK_FOR_NTRD");

      int_val = CO_Chk_CntryEnabled(chr_mainfuncarea,chr_l_condid,&int_l_jocondexists,l_debug_info_ptr);
      if (int_val != APL_SUCCESS)
         APL_GOBACK_FAIL

		memset(chr_mainfuncarea,APL_NULL_CHAR,APL_MAINFUNCAREA_LEN);
      memset(chr_l_condid,APL_NULL_CHAR,APL_CONDID_LEN);
		int_val = 0;

		if (int_l_jocondexists > 0 ) 
		{
			EXEC SQL SELECT CLASSCD
   		INTO :chr_h_to_clscode:i_to_clscode
   		FROM MT_INSTRUMENT
   		WHERE security_cd = :h_to_security;

			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
		}

		



int_l_rucondexists = 0;
strcpy(chr_mainfuncarea, "SEC_CONV");
strcpy(chr_l_condid, "RUSTAT_TRDAUTH");
int_val =  CO_Chk_CntryEnabled(chr_mainfuncarea,
								 chr_l_condid,
								 &int_l_rucondexists,
								 l_debug_info_ptr);
if (int_val != APL_SUCCESS)
    APL_GOBACK_FAIL

	if (int_l_rucondexists > 0)
	{

 if (int_retval == APL_SUCCESS)
     {
      EXEC SQL DECLARE curr_trade CURSOR  FOR
		SELECT   IDENTIY_NO,CLIENT,SECURITY_CD,LOCATION_CD,DEAL_CD
		FROM     DL_DEAL
		WHERE    security_cd=RTRIM(:p_from_sec)
		AND      SECURITY_DT IS NULL
		AND EXISTS (SELECT CLIENT FROM MT_CLIENT WHERE MT_CLIENT.CLIENT = DL_DEAL.CLIENT AND STATUS NOT IN (:chr_l_acc_status1,:chr_l_acc_status2))
		ORDER  BY  CLIENT, SECURITY_CD , LOCATION_CD ;
      curr_trd_flg = 1;
	}
	else if (int_retval == APL_RECS_EXIST) 
	{
      EXEC SQL DECLARE curr_trade1 CURSOR  FOR
		SELECT   IDENTIY_NO,CLIENT,SECURITY_CD,LOCATION_CD,DEAL_CD
		FROM     DL_DEAL
		WHERE    security_cd=RTRIM(:p_from_sec)
		AND      SECURITY_DT IS NULL
      AND      client IN ( SELECT client FROM DL_INSTRUMENTCONV WHERE frm_seccd=:p_from_sec AND CHNG_DT IS NULL )
      ORDER    BY CLIENT,SECURITY_CD,LOCATION_CD ;
      curr_trd_flg = 2;
	}

      IS_ANY_ORA_ERROR

      EXEC SQL DECLARE curr_rutrade CURSOR FOR
               SELECT   ST_REG_NO,QTY
               FROM     DL_RUDEAL
               WHERE    CLIENT =  :h_dl_client
               AND      IDENTIY_NO = :h_indentity_no;

      IS_ANY_ORA_ERROR
      
      if (curr_trd_flg == 1)
		{
		EXEC SQL OPEN  curr_trade;
      }
		else if (curr_trd_flg == 2)
		{
		EXEC SQL OPEN curr_trade1;
		}
      IS_ANY_ORA_ERROR
   
      for (;;)
         {

            if (curr_trd_flg == 1)
				{
				  EXEC  SQL FETCH curr_trade
              INTO  :h_indentity_no:i_indentity_no,
                    :h_dl_client:i_dl_client,
                    :h_securitycd:i_securitycd,
                    :h_loccode:i_loccode,
                    :h_dealcd:i_dealcd;
            }
				else if (curr_trd_flg == 2)
				{
				EXEC  SQL FETCH curr_trade1
				INTO  :h_indentity_no:i_indentity_no,
						:h_dl_client:i_dl_client,
						:h_securitycd:i_securitycd,
						:h_loccode:i_loccode,
						:h_dealcd:i_dealcd;
				}
            IS_ANY_ORA_ERROR

            if (APL_ZERO_RESULT_SET)
               break;

            IS_ANY_ORA_ERROR

            EXEC SQL OPEN  curr_rutrade;
            IS_ANY_ORA_ERROR

            
            for (;;)
            {
               EXEC  SQL FETCH curr_rutrade
               INTO  :h_st_reg_no:i_st_reg_no,
                     :h_qty:i_qty;

               IS_ANY_ORA_ERROR

               if (APL_ZERO_RESULT_SET)
                  break;

               

               if ( APL_FAILURE == CRUDBUpdtPosnFn(
                                 h_dl_client,
                                 p_from_sec,
                                 h_loccode,
                                 chr_l_posn_status,
                                 'C',
                                 h_dealcd[0],
                                 &h_qty,
                                 'D',
											h_st_reg_no,
                                 l_debug_info_ptr ) )
                        {
                             APL_GOBACK_FAIL;
                        }

            }


            EXEC SQL DELETE FROM DL_RUDEAL
            WHERE    CLIENT =  :h_dl_client
            AND      IDENTIY_NO = :h_indentity_no;

            IS_ANY_ORA_ERROR
            
            EXEC SQL CLOSE curr_rutrade;
         
        }
            if (curr_trd_flg == 1 )
				{
				  EXEC SQL CLOSE curr_trade;
            } 
				else if (curr_trd_flg == 2 )
				{
				  EXEC SQL CLOSE curr_trade1;
            }

    }


	if( APL_FAILURE == CO_Chk_CntryEnabled("SEC_CONV","PEND_TRADES",&int_l_pndtrdgr,l_debug_info_ptr))
		APL_GOBACK_FAIL

	if (int_retval == APL_SUCCESS)
	{
		strcpy((char *)h_secconv_ind, "Y");

		i_secconv_ind = 0;


	if( int_l_pndtrdgr )
	{

		EXEC SQL UPDATE DL_DEAL
		SET SECCONV_IND = :h_secconv_ind:i_secconv_ind,
			 timestamp = :chr_h_sys_time_stamp:i_sys_access_stamp
		WHERE security_cd = :p_from_sec
		AND SECURITY_DT IS NOT NULL
		AND EXISTS (SELECT CLIENT FROM MT_CLIENT WHERE MT_CLIENT.CLIENT = DL_DEAL.CLIENT 
		AND STATUS NOT IN (:chr_l_acc_status1,:chr_l_acc_status2))
		AND CLIENT NOT IN ( SELECT CLIENT FROM DL_DEAL WHERE DEAL_STAT IN ('SS','MS','UU','AA','CC','DU') 
		AND SECURITY_CD = :p_from_sec );

		IS_ANY_ORA_ERROR
		
		EXEC SQL UPDATE DL_DEAL
		SET security_cd = :h_to_security:i_to_security,
			 timestamp = :chr_h_sys_time_stamp:i_sys_access_stamp
		WHERE security_cd = :p_from_sec
		AND SECURITY_DT IS NULL
		AND EXISTS (SELECT CLIENT FROM MT_CLIENT WHERE MT_CLIENT.CLIENT = DL_DEAL.CLIENT AND 
		STATUS NOT IN (:chr_l_acc_status1,:chr_l_acc_status2))
		AND CLIENT NOT IN ( SELECT CLIENT FROM DL_DEAL WHERE DEAL_STAT IN ('SS','MS','UU','AA','CC','DU') 
		AND SECURITY_CD = :p_from_sec );

		IS_ANY_ORA_ERROR

		

		EXEC SQL INSERT INTO DL_DEALAUDIT (SELECT client,IDENTIY_NO,'T',:p_intl_env_data_struct_h_d->processtion,:p_intl_env_data_struct_h_d->usr,NULL,:chr_h_sys_time_stamp,NULL,QTY,DEAL_FRM_ORD,NULL FROM DL_DEAL WHERE ((security_cd = :p_from_sec AND (SECURITY_DT IS NOT NULL) AND SECCONV_IND = :h_secconv_ind AND timestamp = :chr_h_sys_time_stamp) OR  (security_cd = :h_to_security AND (SECURITY_DT IS NULL) AND timestamp = :chr_h_sys_time_stamp)) AND CLIENT NOT  IN ( SELECT CLIENT FROM DL_DEAL WHERE DEAL_STAT IN ('SS','MS','UU','AA','CC','DU') AND SECURITY_CD = :p_from_sec ) );

		IS_ANY_ORA_ERROR

	}
	else
	{
		if ((int_l_jocondexists > 0) && (strcmp(chr_h_to_clscode,"NTRD") == 0))
   	{
             
				EXEC SQL UPDATE DL_DEAL
				SET SECCONV_IND = :h_secconv_ind:i_secconv_ind,
					timestamp = :chr_h_sys_time_stamp:i_sys_access_stamp
      		WHERE    security_cd=RTRIM(:p_from_sec)
      		AND      SECURITY_DT IS NOT NULL
				AND EXISTS (SELECT CLIENT FROM MT_CLIENT WHERE MT_CLIENT.CLIENT = DL_DEAL.CLIENT AND STATUS NOT IN (:chr_l_acc_status1,:chr_l_acc_status2))
				AND CLIENT NOT IN (SELECT distinct CLIENT FROM DL_DEAL WHERE SECURITY_CD = RTRIM(:p_from_sec) and DEAL_CD IN ('1','3','5','7'));
	
				IS_ANY_ORA_ERROR

				EXEC SQL UPDATE DL_DEAL
				SET security_cd = :h_to_security:i_to_security,
				timestamp = :chr_h_sys_time_stamp:i_sys_access_stamp
				WHERE security_cd = :p_from_sec
				AND SECURITY_DT IS NULL
				AND EXISTS (SELECT CLIENT FROM MT_CLIENT WHERE MT_CLIENT.CLIENT = DL_DEAL.CLIENT AND STATUS NOT IN (:chr_l_acc_status1,:chr_l_acc_status2))	
				AND CLIENT NOT IN (SELECT distinct CLIENT FROM DL_DEAL WHERE SECURITY_CD = RTRIM(:p_from_sec) and (DEAL_CD = '1' or DEAL_CD = '3' or DEAL_CD = '5' or DEAL_CD = '7'));
				
				IS_ANY_ORA_ERROR
				
		}
		else
		{

			
			EXEC SQL UPDATE DL_DEAL
			SET SECCONV_IND = :h_secconv_ind:i_secconv_ind,
			 timestamp = :chr_h_sys_time_stamp:i_sys_access_stamp
			WHERE security_cd = :p_from_sec
			AND SECURITY_DT IS NOT NULL
			AND EXISTS (SELECT CLIENT FROM MT_CLIENT WHERE MT_CLIENT.CLIENT = DL_DEAL.CLIENT AND STATUS NOT IN (:chr_l_acc_status1,:chr_l_acc_status2));

			IS_ANY_ORA_ERROR

			EXEC SQL UPDATE DL_DEAL
			SET security_cd = :h_to_security:i_to_security,
			 timestamp = :chr_h_sys_time_stamp:i_sys_access_stamp
			WHERE security_cd = :p_from_sec
			AND SECURITY_DT IS NULL
			AND EXISTS (SELECT CLIENT FROM MT_CLIENT WHERE MT_CLIENT.CLIENT = DL_DEAL.CLIENT AND STATUS NOT IN (:chr_l_acc_status1,:chr_l_acc_status2));

			IS_ANY_ORA_ERROR
		}


	  
      EXEC SQL DECLARE  cur_mq CURSOR FOR
      SELECT CLIENT,IDENTIY_NO FROM DL_DEAL
      WHERE SECURITY_CD = :h_to_security
		AND TIMESTAMP = :chr_h_sys_time_stamp
      AND SECURITY_DT IS NULL
      AND EXISTS (SELECT CLIENT FROM MT_CLIENT WHERE MT_CLIENT.CLIENT = DL_DEAL.CLIENT
      AND STATUS NOT IN (:chr_l_acc_status1,:chr_l_acc_status2));

      IS_ANY_ORA_ERROR

      EXEC SQL OPEN cur_mq;
      IS_ANY_ORA_ERROR

      for(;;)
      {
         memset(chr_l_mq_client,APL_NULL_CHAR,APL_CLIENT_LENGTH);
         memset(chr_l_mq_refno,APL_NULL_CHAR,17);
         EXEC SQL FETCH cur_mq into :chr_l_mq_client:i_mq_account ,:chr_l_mq_refno:i_mq_refno ;
         IS_ANY_ORA_ERROR

         if(APL_ZERO_RESULT_SET)
                  {
                     EXEC SQL CLOSE cur_mq;
                     break ;
                  }
         if (APL_FAILURE==EI_Mod_MQData(chr_l_mq_client,
                                        chr_l_mq_refno,
                                        NULL,
                                        NULL,
                                        "T",
                                         l_debug_info_ptr))
         APL_GOBACK_FAIL

      }
      


		

		EXEC SQL INSERT INTO DL_DEALAUDIT (SELECT client,IDENTIY_NO,'T',:p_intl_env_data_struct_h_d->processtion,:p_intl_env_data_struct_h_d->usr,NULL,:chr_h_sys_time_stamp,NULL,QTY,DEAL_FRM_ORD,NULL FROM DL_DEAL WHERE ((security_cd = :p_from_sec AND (SECURITY_DT IS NOT NULL) AND SECCONV_IND = :h_secconv_ind AND timestamp = :chr_h_sys_time_stamp) OR  (security_cd = :h_to_security AND (SECURITY_DT IS NULL) AND timestamp = :chr_h_sys_time_stamp)));

		IS_ANY_ORA_ERROR

   }

	}
	else if (int_retval == APL_RECS_EXIST)
	{
		strcpy((char *)h_secconv_ind, "Y");

		i_secconv_ind = 0;


	if( int_l_pndtrdgr )
	{
		EXEC SQL UPDATE DL_DEAL
		SET SECCONV_IND = :h_secconv_ind:i_secconv_ind,
			 timestamp = :chr_h_sys_time_stamp:i_sys_access_stamp
		WHERE security_cd = :p_from_sec
		AND SECURITY_DT IS NOT NULL
		AND client IN (SELECT client FROM DL_INSTRUMENTCONV WHERE frm_seccd=:p_from_sec AND CHNG_DT IS NULL)
		AND CLIENT NOT IN ( SELECT CLIENT FROM DL_DEAL WHERE DEAL_STAT IN ('SS','MS','UU','AA','CC','DU') 
		AND SECURITY_CD = :p_from_sec );

		IS_ANY_ORA_ERROR
		
		EXEC SQL UPDATE DL_DEAL
		SET security_cd = :h_to_security:i_to_security,
			 timestamp = :chr_h_sys_time_stamp:i_sys_access_stamp
		WHERE security_cd = :p_from_sec
		AND SECURITY_DT IS NULL
		AND client IN (SELECT client FROM DL_INSTRUMENTCONV WHERE frm_seccd=:p_from_sec AND CHNG_DT IS NULL)
		AND CLIENT NOT IN ( SELECT CLIENT FROM DL_DEAL WHERE DEAL_STAT IN ('SS','MS','UU','AA','CC','DU') 
		AND SECURITY_CD = :p_from_sec );

		IS_ANY_ORA_ERROR
		
		

		EXEC SQL INSERT INTO DL_DEALAUDIT (SELECT client,IDENTIY_NO,'T',:p_intl_env_data_struct_h_d->processtion,:p_intl_env_data_struct_h_d->usr,NULL,:chr_h_sys_time_stamp,NULL,QTY,DEAL_FRM_ORD,NULL FROM DL_DEAL WHERE ((security_cd = :p_from_sec AND (SECURITY_DT IS NOT NULL) AND SECCONV_IND = :h_secconv_ind AND timestamp = :chr_h_sys_time_stamp AND client IN (SELECT client FROM DL_INSTRUMENTCONV WHERE frm_seccd=:p_from_sec AND CHNG_DT IS NULL)) OR  (s ecode = :h_to_security AND (SECURITY_DT IS NULL) AND timestamp = :chr_h_sys_time_stamp AND client IN (SELECT client FROM DL_INSTRUMENTCONV WHERE frm_seccd=:p_from_sec AND CHNG_DT IS NULL))) AND CLIENT NOT IN ( SELECT CLIENT FROM DL_DEAL WHERE DEAL_STAT IN ('SS','MS','UU','AA','CC','DU') AND SECURITY_CD = :p_from_sec ) );

		IS_ANY_ORA_ERROR

	}
	else
	{
		
      if ((int_l_jocondexists > 0) && (strcmp(chr_h_to_clscode,"NTRD") == 0))
      {
             
            EXEC SQL UPDATE DL_DEAL
				SET SECCONV_IND = :h_secconv_ind:i_secconv_ind,
		          timestamp = :chr_h_sys_time_stamp:i_sys_access_stamp
      		WHERE security_cd = :p_from_sec
      		AND SECURITY_DT IS NOT NULL
      		AND client IN (SELECT client FROM DL_INSTRUMENTCONV WHERE frm_seccd=:p_from_sec AND CHNG_DT IS NULL)
				AND CLIENT NOT IN (SELECT DISTINCT CLIENT FROM DL_DEAL WHERE SECURITY_CD = RTRIM(:p_from_sec) and DEAL_CD IN ('1','3','5','7'));
			
				IS_ANY_ORA_ERROR
		
				EXEC SQL UPDATE DL_DEAL
      		SET security_cd = :h_to_security:i_to_security,
          		timestamp = :chr_h_sys_time_stamp:i_sys_access_stamp
      		WHERE security_cd = :p_from_sec
      		AND SECURITY_DT IS NULL
      		AND client IN (SELECT client FROM DL_INSTRUMENTCONV WHERE frm_seccd=:p_from_sec AND CHNG_DT IS NULL)
				AND CLIENT NOT IN (SELECT DISTINCT CLIENT FROM DL_DEAL WHERE SECURITY_CD = RTRIM(:p_from_sec) and DEAL_CD IN ('1','3','5','7'));

				IS_ANY_ORA_ERROR		
		}
		else
		{
	
				EXEC SQL UPDATE DL_DEAL
				SET SECCONV_IND = :h_secconv_ind:i_secconv_ind,
					 timestamp = :chr_h_sys_time_stamp:i_sys_access_stamp
				WHERE security_cd = :p_from_sec
				AND SECURITY_DT IS NOT NULL
				AND client IN (SELECT client FROM DL_INSTRUMENTCONV WHERE frm_seccd=:p_from_sec AND CHNG_DT IS NULL);

				IS_ANY_ORA_ERROR

		
				EXEC SQL UPDATE DL_DEAL
				SET security_cd = :h_to_security:i_to_security,
			 		timestamp = :chr_h_sys_time_stamp:i_sys_access_stamp
				WHERE security_cd = :p_from_sec
				AND SECURITY_DT IS NULL
				AND client IN (SELECT client FROM DL_INSTRUMENTCONV WHERE frm_seccd=:p_from_sec AND CHNG_DT IS NULL);

				IS_ANY_ORA_ERROR
		}

     
      EXEC SQL DECLARE  cur_mq1 CURSOR FOR
      SELECT CLIENT,IDENTIY_NO FROM DL_DEAL
      WHERE SECURITY_CD = :h_to_security
		AND TIMESTAMP = :chr_h_sys_time_stamp
      AND SECURITY_DT IS NULL
		AND DEAL_STAT != 'UU'
      AND EXISTS (SELECT CLIENT FROM MT_CLIENT WHERE MT_CLIENT.CLIENT = DL_DEAL.CLIENT
      AND STATUS NOT IN (:chr_l_acc_status1,:chr_l_acc_status2));

      IS_ANY_ORA_ERROR

      EXEC SQL OPEN cur_mq1;
      IS_ANY_ORA_ERROR
      for(;;)
        {
         memset(chr_l_mq_client,APL_NULL_CHAR,APL_CLIENT_LENGTH);
         memset(chr_l_mq_refno,APL_NULL_CHAR,17);
         EXEC SQL FETCH cur_mq1 into :chr_l_mq_client:i_mq_account ,:chr_l_mq_refno:i_mq_refno ;
            IS_ANY_ORA_ERROR

         if(APL_ZERO_RESULT_SET)
                  {
                     EXEC SQL CLOSE cur_mq1;
                     break ;
                  }
         if (APL_FAILURE==EI_Mod_MQData(chr_l_mq_client,
                                        chr_l_mq_refno,
                                        NULL,
                                        NULL,
                                        "T",
                                         l_debug_info_ptr))
             APL_GOBACK_FAIL

        }
   	
		
		

		EXEC SQL INSERT INTO DL_DEALAUDIT (SELECT client,IDENTIY_NO,'T',:p_intl_env_data_struct_h_d->processtion,:p_intl_env_data_struct_h_d->usr,NULL,:chr_h_sys_time_stamp,NULL,QTY,DEAL_FRM_ORD,NULL FROM DL_DEAL WHERE ((security_cd = :p_from_sec AND (SECURITY_DT IS NOT NULL) AND SECCONV_IND = :h_secconv_ind AND timestamp = :chr_h_sys_time_stamp AND client IN (SELECT client FROM DL_INSTRUMENTCONV WHERE frm_seccd=:p_from_sec AND CHNG_DT IS NULL)) OR  (s ecode = :h_to_security AND (SECURITY_DT IS NULL) AND timestamp = :chr_h_sys_time_stamp AND client IN (SELECT client FROM DL_INSTRUMENTCONV WHERE frm_seccd=:p_from_sec AND CHNG_DT IS NULL))));

		IS_ANY_ORA_ERROR
		
	}

	}




   
   EXEC SQL COMMIT;
   IS_ANY_ORA_ERROR			

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CR_Mod_TrdSecConv successfully \n",NULL,NULL);
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CR_Mod_TrdSecConv with failure \n",NULL,NULL);
		return(APL_FAILURE);

	}
}



 int CR_Mod_OrdSecConv(char *p_from_sec,char **argv,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca 			sqlca;
	int			 			int_retval;
	DL_INSTRUMENTCONV_STRUCT_H		l_dl_instrumentconv_struct_h;
	DL_INSTRUMENTCONV_STRUCT_I		l_dl_instrumentconv_struct_i;
	OR_ORDERDETAILS_STRUCT_H		l_or_orderdetails_struct_ha;
	OR_ORDERDETAILS_STRUCT_I		l_or_orderdetails_struct_ia;
	int						int_l_count = 0;
	char						chr_l_buf[BUFFER_LEN];
	char					   chr_l_acc_status1[APL_STATUS_LEN] = APL_NULL_STRING;
	char					   chr_l_acc_status2[APL_STATUS_LEN] = APL_NULL_STRING;
	
	EXEC SQL VAR l_dl_instrumentconv_struct_h.h_dl_client IS STRING;
	EXEC SQL VAR l_or_orderdetails_struct_ha.h_dl_client IS STRING;
	EXEC SQL VAR l_or_orderdetails_struct_ha.h_orderindentity_no IS STRING;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CR_Mod_OrdSecConv \n",NULL,NULL);
	sqlca.sqlcode = 0;
	
	
	int_retval = CR_Chk_SecIn(p_from_sec,p_ptr_log_file,l_debug_info_ptr);
	
	

	strcpy(chr_l_acc_status1, STATUS_FROZ_AUTH);
	strcpy(chr_l_acc_status2, STATUS_FROZ_UAUTH);

	if (int_retval == APL_SUCCESS)
	{
		EXEC SQL DECLARE OrderInfo CURSOR FOR
			SELECT * FROM OR_ORDERDETAILS
			WHERE security_cd = :p_from_sec
			AND NOT EXISTS (SELECT client from DL_INSTRUMENTCONV_TEMP where client = OR_ORDERDETAILS.client AND ORD_REFNO = OR_ORDERDETAILS.ORD_REFNO)
			AND EXISTS (SELECT client FROM MT_CLIENT WHERE MT_CLIENT.CLIENT = OR_ORDERDETAILS.CLIENT AND STATUS NOT IN (:chr_l_acc_status1,:chr_l_acc_status2))
			FOR UPDATE OF timestamp;

		EXEC SQL OPEN OrderInfo;

		IS_ANY_ORA_ERROR

		for(;;)
		{
			EXEC SQL FETCH OrderInfo INTO :l_or_orderdetails_struct_ha:l_or_orderdetails_struct_ia;

			IS_ANY_ORA_ERROR

			if (APL_ZERO_RESULT_SET)
				break;
			
			int_retval = CR_Proc_OrdSecConv(p_from_sec,&l_or_orderdetails_struct_ha,&l_or_orderdetails_struct_ia,p_ptr_log_file,l_debug_info_ptr);

			if (int_retval != APL_SUCCESS)
			{
				IS_ANY_ERROR_FATAL

				EXEC SQL ROLLBACK WORK;
				IS_ANY_ORA_ERROR

				int_l_count = 0;
				
				
			
				CO_ProcMonitor(p_ptr_log_file,APL_NULL_STRING,l_debug_info_ptr,NULL);

				*l_debug_info_ptr = NULL;

			  

				EXEC SQL INSERT INTO DL_INSTRUMENTCONV_TEMP
					VALUES(:l_or_orderdetails_struct_ha.h_dl_client:l_or_orderdetails_struct_ia.i_dl_client,NULL,NULL,:l_or_orderdetails_struct_ha.h_orderindentity_no:l_or_orderdetails_struct_ia.i_orderindentity_no);

				IS_ANY_ORA_ERROR
				
				
				EXEC SQL COMMIT WORK;
				IS_ANY_ORA_ERROR
					
				
				EXEC SQL OPEN OrderInfo;
				IS_ANY_ORA_ERROR
					
				

			 	int_retval = CA_LockRec(argv,p_ptr_log_file,l_debug_info_ptr);

			 	if (int_retval != APL_SUCCESS)
					APL_GOBACK_FAIL
			}
			else
			{
				int_l_count++;

				if (int_l_count%C_COMMITSIZE == 0)
				{
					memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
					sprintf(chr_l_buf,"Processed %d Order records",int_l_count);

					EXEC SQL UPDATE SYS_BATCHPROC
					SET stat_det = :chr_l_buf
					WHERE process_name = :argv[0]
					AND   proc_init = :argv[1]
					AND START_DATE = :argv[2]
					AND status_ind = 'started';

					IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

					EXEC SQL COMMIT WORK;
					IS_ANY_ORA_ERROR
					
					
					EXEC SQL OPEN OrderInfo;
					IS_ANY_ORA_ERROR
				
					

				 	int_retval = CA_LockRec(argv,p_ptr_log_file,l_debug_info_ptr);

				 	if (int_retval != APL_SUCCESS)
						APL_GOBACK_FAIL
				}
			}
		}

		EXEC SQL CLOSE OrderInfo;

		
		EXEC SQL DELETE FROM DL_INSTRUMENTCONV_TEMP;
		IS_ANY_ORA_ERROR
		
		APL_GOBACK_SUCCESS
	}

	EXEC SQL DECLARE SecConvInfo CURSOR FOR
		SELECT * FROM DL_INSTRUMENTCONV
		WHERE frm_seccd = :p_from_sec
		AND CHNG_DT IS NULL;

	EXEC SQL OPEN SecConvInfo;

	IS_ANY_ORA_ERROR

	for(;;)
	{
		EXEC SQL FETCH SecConvInfo INTO :l_dl_instrumentconv_struct_h:l_dl_instrumentconv_struct_i;

		IS_ANY_ORA_ERROR

		if (APL_ZERO_RESULT_SET)
			break;

		EXEC SQL DECLARE OrderRecs CURSOR FOR
			SELECT * FROM OR_ORDERDETAILS
			WHERE security_cd = :p_from_sec
			AND client = :l_dl_instrumentconv_struct_h.h_dl_client
			AND NOT EXISTS (SELECT client FROM DL_INSTRUMENTCONV_TEMP WHERE client = OR_ORDERDETAILS.client AND ORD_REFNO = OR_ORDERDETAILS.ORD_REFNO)
			FOR UPDATE OF timestamp;

		EXEC SQL OPEN OrderRecs;

		IS_ANY_ORA_ERROR

		for(;;)
		{
			EXEC SQL FETCH OrderRecs INTO :l_or_orderdetails_struct_ha:l_or_orderdetails_struct_ia;

			IS_ANY_ORA_ERROR

			if (APL_ZERO_RESULT_SET)
				break;
			
			int_retval = CR_Proc_OrdSecConv(p_from_sec,&l_or_orderdetails_struct_ha,&l_or_orderdetails_struct_ia,p_ptr_log_file,l_debug_info_ptr);
			
			if (int_retval != APL_SUCCESS)
			{
				IS_ANY_ERROR_FATAL

				EXEC SQL ROLLBACK WORK;
				IS_ANY_ORA_ERROR

				int_l_count = 0;
				
				
			
				CO_ProcMonitor(p_ptr_log_file,APL_NULL_STRING,l_debug_info_ptr,NULL);

				*l_debug_info_ptr = NULL;

			  
				EXEC SQL INSERT INTO DL_INSTRUMENTCONV_TEMP
					VALUES(:l_or_orderdetails_struct_ha.h_dl_client:l_or_orderdetails_struct_ia.i_dl_client,NULL,NULL,:l_or_orderdetails_struct_ha.h_orderindentity_no:l_or_orderdetails_struct_ia.i_orderindentity_no);

				IS_ANY_ORA_ERROR
				
				
				EXEC SQL COMMIT WORK;
				IS_ANY_ORA_ERROR
					
				
				EXEC SQL OPEN OrderRecs;
				IS_ANY_ORA_ERROR
					
				

			 	int_retval = CA_LockRec(argv,p_ptr_log_file,l_debug_info_ptr);

			 	if (int_retval != APL_SUCCESS)
					APL_GOBACK_FAIL
			}
			else
			{
				int_l_count++;

				if (int_l_count%C_COMMITSIZE == 0)
				{
					memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
					sprintf(chr_l_buf,"Processed %d Order records",int_l_count);

					EXEC SQL UPDATE SYS_BATCHPROC
					SET stat_det = :chr_l_buf
					WHERE process_name = :argv[0]
					AND   proc_init = :argv[1]
					AND START_DATE = :argv[2]
					AND status_ind = 'started';

					IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

					EXEC SQL COMMIT WORK;
					IS_ANY_ORA_ERROR
				
					
					EXEC SQL OPEN OrderRecs;
					IS_ANY_ORA_ERROR
				
					

				 	int_retval = CA_LockRec(argv,p_ptr_log_file,l_debug_info_ptr);

				 	if (int_retval != APL_SUCCESS)
						APL_GOBACK_FAIL
				}
			}
		}
	
		EXEC SQL CLOSE OrderRecs;
	}

	EXEC SQL CLOSE SecConvInfo;

	
	EXEC SQL DELETE FROM DL_INSTRUMENTCONV_TEMP;
	IS_ANY_ORA_ERROR

   
   EXEC SQL COMMIT;
   IS_ANY_ORA_ERROR

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{

		EXEC SQL COMMIT WORK;
		IS_ANY_ORA_ERROR

		
		
		int_retval = CA_LockRec(argv,p_ptr_log_file,l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL

		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CR_Mod_OrdSecConv successfully\n",NULL,NULL);
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		EXEC SQL ROLLBACK WORK;
		IS_ANY_ORA_ERROR

		
		
		int_retval = CA_LockRec(argv,p_ptr_log_file,l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL
		
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CR_Mod_OrdSecConv with failure \n",NULL,NULL);
		return(APL_FAILURE);
	}
}



 
 int CR_Chk_SecIn(char *p_from_sec,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	EXEC SQL BEGIN DECLARE SECTION;

	struct sqlca sqlca;
	int	 int_l_num_rows = 0;

	EXEC SQL END DECLARE SECTION;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CR_Chk_SecIn \n",NULL,NULL);
	sqlca.sqlcode = 0;

	EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_l_num_rows
	FROM DL_INSTRUMENTCONV
	WHERE frm_seccd = :p_from_sec
	AND CHNG_DT IS NULL;

	IS_ANY_ORA_ERROR

	if (int_l_num_rows == 0)
		APL_GOBACK_SUCCESS
	else
		APL_GOBACK_FAIL

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CR_Chk_SecIn successfully \n",NULL,NULL);
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CR_Chk_SecIn with failure\n",NULL,NULL);

		if (sqlca.sqlcode == 0)
			return(APL_RECS_EXIST);
		else
			return(APL_FAILURE);
	}
}



 
 int CR_Proc_OrdSecConv(char *p_from_sec,OR_ORDERDETAILS_STRUCT_H *p_or_orderdetails_struct_h_a,OR_ORDERDETAILS_STRUCT_I *p_or_orderdetails_struct_i,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca			sqlca;
	OR_EXECORDER_STRUCT_H	l_or_execorder_struct_ha;
	OR_EXECORDER_STRUCT_I	l_or_execorder_struct_ia;
	char						chr_l_sys_date[APL_DATE_LEN] = APL_NULL_STRING;
	char						h_to_security[APL_INSTRUMENTCODE_LEN] = APL_NULL_STRING;
	char						chr_h_sys_time_stamp[APL_DATE_LEN] = APL_NULL_STRING;
	char						h_secdate[20] = APL_NULL_STRING;
	short						i_secdate;
	short						i_to_security;
	short						i_sys_access_stamp;
	int						int_l_diff;
	int						int_l_conv_flg = 0;

	EXEC SQL VAR h_to_security IS STRING;
	EXEC SQL VAR h_secdate IS STRING;
	EXEC SQL VAR l_or_execorder_struct_ha.h_dl_client IS STRING;
	EXEC SQL VAR l_or_execorder_struct_ha.h_indentity_no IS STRING;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CR_Proc_OrdSecConv \n",NULL,NULL);
	sqlca.sqlcode = 0;

	if (CO_RtvSysDtTime(chr_h_sys_time_stamp,l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL

	i_sys_access_stamp = 0;
	
	if (CO_RtvSysDt(chr_l_sys_date,l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL

	if (p_or_orderdetails_struct_i->i_execquantity == -1)
		p_or_orderdetails_struct_h_a->h_execquantity = 0;

	if (p_or_orderdetails_struct_h_a->h_execquantity < p_or_orderdetails_struct_h_a->h_orderquantity)
	{
		if (strcmp(p_or_orderdetails_struct_h_a->h_isgte_ind,"Y") == 0)
		{
			if (CO_Pro_DateComp(chr_l_sys_date,p_or_orderdetails_struct_h_a->h_expirydate,&int_l_diff,l_debug_info_ptr) != APL_SUCCESS)
				APL_GOBACK_FAIL

			if(int_l_diff >= 0)
				int_l_conv_flg = 1;

		}
		else if (strcmp(p_or_orderdetails_struct_h_a->h_isgte_ind,"N") == 0)
		{
			if((strcmp(p_or_orderdetails_struct_h_a->h_ord_stat,STATUS_CANC_AUTH) != 0) && (strcmp(p_or_orderdetails_struct_h_a->h_ord_stat,STATUS_CANC_UAUTH) != 0))
				int_l_conv_flg = 1;
		}
	}
	else if (p_or_orderdetails_struct_h_a->h_execquantity = p_or_orderdetails_struct_h_a->h_orderquantity)
	{
		EXEC SQL DECLARE ExecOrderInfo CURSOR FOR
			SELECT * FROM OR_EXECORDER
			WHERE client = RTRIM(:p_or_orderdetails_struct_h_a->h_dl_client)
			AND ORD_REFNO = RTRIM(:p_or_orderdetails_struct_h_a->h_orderindentity_no);
					
		EXEC SQL OPEN ExecOrderInfo;

		IS_ANY_ORA_ERROR

		for(;;)
		{
			EXEC SQL FETCH ExecOrderInfo INTO :l_or_execorder_struct_ha:l_or_execorder_struct_ia;

			IS_ANY_ORA_ERROR

			if (APL_ZERO_RESULT_SET)
				break;

			EXEC SQL SELECT SECURITY_DT
			INTO :h_secdate:i_secdate
			FROM DL_DEAL
			WHERE client = :l_or_execorder_struct_ha.h_dl_client
			AND IDENTIY_NO = :l_or_execorder_struct_ha.h_indentity_no;

			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

			if (i_secdate == -1)
				int_l_conv_flg = 1;
		}

		EXEC SQL CLOSE ExecOrderInfo;
	}

	if (int_l_conv_flg == 1)
	{
		EXEC SQL SELECT NEW_CD
		INTO :h_to_security:i_to_security
		FROM MT_INSTRUMENT
		WHERE security_cd = :p_from_sec;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL

		EXEC SQL UPDATE OR_ORDERDETAILS
		SET security_cd = :h_to_security:i_to_security,
			 timestamp = :chr_h_sys_time_stamp:i_sys_access_stamp
		WHERE client = RTRIM(:p_or_orderdetails_struct_h_a->h_dl_client)
		AND   ORD_REFNO = RTRIM(:p_or_orderdetails_struct_h_a->h_orderindentity_no);

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
	}


	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CR_Proc_OrdSecConv successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CR_Proc_OrdSecConv with failure \n",NULL,NULL);

		return(APL_FAILURE);
	}
}


 
 int CR_Proc_PosSecConv(char *p_from_sec,int *p_ident_count,char *p_parri_passu_flg,FILE *p_instr_conv_rpt_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DL_SAFEK_STRUCT_H *p_dl_safek_struct_h,DL_SAFEK_STRUCT_I *p_dl_safek_struct_i,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca  			sqlca;
	int						int_retval;
	char	 		  			h_to_security[APL_INSTRUMENTCODE_LEN] = APL_NULL_STRING;
	char	 		  			chr_h_sys_time_stamp[APL_DATE_LEN] = APL_NULL_STRING;
	short	 		  			i_sys_access_stamp;
	char						h_sys_dt[APL_DATE_LEN] = APL_NULL_STRING;
	SYS_DL_DEAL_STRUCT_H	*l_sys_dl_deal_struct_he = NULL;
	int						int_h_trdrepseqnum = 0;
	DL_SAFEK_STRUCT_H		*l_dl_safek_struct_h_ptr = NULL;
	DL_SAFEK_STRUCT_I		*l_dl_safek_struct_ib = NULL;
	char						chr_mainfuncarea[APL_MAINFUNCAREA_LEN] = APL_NULL_STRING;
	char						chr_l_condid[APL_CONDID_LEN] = APL_NULL_STRING;
	short						int_l_condexists;
	char						h_ex_arena[3] = APL_NULL_STRING;
	char						h_countcltnm[66] = APL_NULL_STRING;
	char						h_currencycode[APL_CCYCODE_LEN] = APL_NULL_STRING;
	char						h_manifld_ind[APL_FLAG_LENGTH] = APL_NULL_STRING;
	char						h_classcd[CLSCD_LEN] = APL_NULL_STRING;
	short						i_to_security;
	char						h_dl_class[3];
	short						i_ex_arena;
	short						i_currencycode;
	short						i_countcltnm;
	short						i_manifld_ind;
	short						i_classcd;
	char						chr_l_param_str[100] = APL_NULL_STRING;
	int						int_retstat=0;
	MS_MSGSTAT_STRUCT		l_ms_msgstat_structa;
	
	short                        int_l_rucondexists;
	char                         h_clt_class[3] = APL_NULL_STRING;
	double                       h_qty = 0.0 ;
	char                         h_st_reg_no[21] = APL_NULL_STRING;
	char                         h_indentity_no[17] = APL_NULL_STRING;
	char                         h_dl_client[11] = APL_NULL_STRING;
	char                         h_securitycd[9] = APL_NULL_STRING;
	char                         h_loccode[5] = APL_NULL_STRING;
	char                         h_dealcd[2] = APL_NULL_STRING;
   short                        i_qty = 0; 
	short                        i_st_reg_no = 0;
	short                        i_indentity_no = 0;
   short                        i_dl_client = 0;
	short                        i_securitycd = 0;
	short                        i_loccode = 0;
	short                        i_dealcd = 0;
	int	    						  int_l_txn_type=0;	
	char chr_l_unique_ref_num[APL_UNIQUE_REF_NUM_LEN]=APL_NULL_STRING;    

   char  chr_l_msg_flg_53x[2];      

	EXEC SQL VAR h_st_reg_no IS STRING;
	EXEC SQL VAR h_indentity_no IS STRING;
	EXEC SQL VAR h_dl_client IS STRING;
	EXEC SQL VAR h_securitycd IS STRING;
	EXEC SQL VAR h_loccode IS STRING;
	EXEC SQL VAR h_dealcd IS STRING;
  
	
	static char						chr_curr_acct[APL_CLIENT_LENGTH]="";						
	

	EXEC SQL VAR h_to_security IS STRING;
	EXEC SQL VAR h_ex_arena IS STRING;
	EXEC SQL VAR h_countcltnm IS STRING;
	EXEC SQL VAR h_currencycode IS STRING;
	EXEC SQL VAR h_manifld_ind IS STRING;
	EXEC SQL VAR h_classcd IS STRING;
   EXEC SQL VAR h_clt_class IS STRING;
	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CR_Proc_PosSecConv \n",NULL,p_intl_env_data_struct_h_d);
			
	sqlca.sqlcode = 0;
	
	if (CO_RtvSysDt(h_sys_dt,l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL

	if (CO_RtvSysDtTime(chr_h_sys_time_stamp,l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL

	i_sys_access_stamp = 0;

	

	l_sys_dl_deal_struct_he = (SYS_DL_DEAL_STRUCT_H *)calloc(1,sizeof(SYS_DL_DEAL_STRUCT_H));
	
	
	

	l_dl_safek_struct_h_ptr = (DL_SAFEK_STRUCT_H *)calloc(1,sizeof(DL_SAFEK_STRUCT_H));
	
	

	l_dl_safek_struct_ib = (DL_SAFEK_STRUCT_I *)calloc(1,sizeof(DL_SAFEK_STRUCT_I));

   
   memset(chr_l_msg_flg_53x,APL_NULL_CHAR,2);
   strcpy(chr_l_msg_flg_53x,MSG_FLG_53X);
   

	EXEC SQL SELECT NEW_CD
	INTO :h_to_security:i_to_security
	FROM MT_INSTRUMENT
	WHERE security_cd = :p_from_sec;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	if (p_dl_safek_struct_h->h_safekeep_pos > 0)
	{
		
			
		 strcpy(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_INPUT);

		 strcpy(l_sys_dl_deal_struct_he->h_dl_client,p_dl_safek_struct_h->h_dl_client);
	
				
		if ( !strcmp(chr_curr_acct,"") )
		{
			strcpy(chr_curr_acct,p_dl_safek_struct_h->h_dl_client);
		}
		else if ( 	strcmp(chr_curr_acct,p_dl_safek_struct_h->h_dl_client) )
		{
			strcpy(chr_curr_acct,p_dl_safek_struct_h->h_dl_client);
			*p_ident_count = 1;
		}
		else if ( 	!strcmp(chr_curr_acct,p_dl_safek_struct_h->h_dl_client) )
		{
		
		}
				



		 sprintf(l_sys_dl_deal_struct_he->h_indentity_no,"CONV.%s%d",p_from_sec,*p_ident_count);

		 	*p_ident_count = *p_ident_count+1;

				


		 strcpy(l_sys_dl_deal_struct_he->h_dlt, h_sys_dt);
		 strcpy(l_sys_dl_deal_struct_he->h_setldt, h_sys_dt);
		 l_sys_dl_deal_struct_he->h_pr = 0;

		 EXEC SQL SELECT ex_arena,currency_cd
		 INTO :h_ex_arena:i_ex_arena,:h_currencycode:i_currencycode
		 FROM MT_INSTRUMENT
		 WHERE security_cd = :p_from_sec;

		 IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

		 strcpy(l_sys_dl_deal_struct_he->h_ex_arena, h_ex_arena);

		 l_sys_dl_deal_struct_he->h_amt = 0;
		 l_sys_dl_deal_struct_he->h_custodycomm = 0;
		 l_sys_dl_deal_struct_he->h_brokercomm = 0;
		 l_sys_dl_deal_struct_he->h_stx_comm = 0;
		 l_sys_dl_deal_struct_he->h_oth_comm = 0;
		 strcpy(l_sys_dl_deal_struct_he->h_secdate, h_sys_dt);
		 strcpy(l_sys_dl_deal_struct_he->h_moneydate, APL_NULL_STRING);
	
		 l_sys_dl_deal_struct_he->h_qty = p_dl_safek_struct_h->h_safekeep_pos;

		 strcpy(l_sys_dl_deal_struct_he->h_domcpclt_cd, l_mt_core_sys_params_struct_h.custody_clt_cd);
		 strcpy(l_sys_dl_deal_struct_he->h_isspotdl, "N");
		 l_sys_dl_deal_struct_he->h_origquantity = p_dl_safek_struct_h->h_safekeep_pos;
		 l_sys_dl_deal_struct_he->h_origamount = 0;
		 strcpy(l_sys_dl_deal_struct_he->h_dlfromord,"N");
		 strcpy(l_sys_dl_deal_struct_he->h_entry,"G");
		 strcpy(l_sys_dl_deal_struct_he->h_reapired_ind,APL_NULL_STRING);
		 strcpy(l_sys_dl_deal_struct_he->h_domcp_custodyclt,l_sys_dl_deal_struct_he->h_domcpclt_cd);
		 strcpy(l_sys_dl_deal_struct_he->h_countclt,APL_NULL_STRING);

		 EXEC SQL SELECT clnt_name
		 INTO :h_countcltnm:i_countcltnm
		 FROM MT_CLIENT
		 WHERE client = :l_mt_core_sys_params_struct_h.custody_clt_cd;

		 IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

		 strcpy(l_sys_dl_deal_struct_he->h_countcltnm,h_countcltnm);

		 strcpy(l_sys_dl_deal_struct_he->h_clientof,APL_NULL_STRING);
		 strcpy(l_sys_dl_deal_struct_he->h_custinfo,APL_NULL_STRING);
		 strcpy(l_sys_dl_deal_struct_he->h_fx_reqd,"N");
		 strcpy(l_sys_dl_deal_struct_he->h_ispymtlocal,APL_NULL_STRING);
		 strcpy(l_sys_dl_deal_struct_he->h_verfied_with,APL_NULL_STRING);
		 l_sys_dl_deal_struct_he->h_diffamount = 0;
		 strcpy(l_sys_dl_deal_struct_he->h_brkrno,APL_NULL_STRING);
		 strcpy(l_sys_dl_deal_struct_he->h_fail_cd,APL_NULL_STRING);
		 strcpy(l_sys_dl_deal_struct_he->h_failinfo,APL_NULL_STRING);
		 strcpy(l_sys_dl_deal_struct_he->h_ispart_,"N");
		 l_sys_dl_deal_struct_he->h_fx_rt = 0;
		 l_sys_dl_deal_struct_he->h_amend_count = 0;
		 l_sys_dl_deal_struct_he->h_number_a = 0;
		 strcpy(l_sys_dl_deal_struct_he->h_report_at_eom_ind,APL_NULL_STRING);
		 strcpy(l_sys_dl_deal_struct_he->h_billdate,APL_NULL_STRING);
		 
		 strcpy(chr_mainfuncarea, "TRD_LOCREFNO");
		 strcpy(chr_l_condid, "LOCREFNO_NOT_NULL");

		 int_retval = CO_Chk_CntryEnabled(chr_mainfuncarea,chr_l_condid,&int_l_condexists,l_debug_info_ptr);
		 if (int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL

		 if (int_l_condexists > 0)
			strcpy(l_sys_dl_deal_struct_he->h_locindentity_no,l_sys_dl_deal_struct_he->h_indentity_no);
		 else
			strcpy(l_sys_dl_deal_struct_he->h_locindentity_no,APL_NULL_STRING);

		 strcpy(l_sys_dl_deal_struct_he->h_instruct_person,APL_NULL_STRING);
		 l_sys_dl_deal_struct_he->h_rec_int_000 = 0;
		 strcpy(l_sys_dl_deal_struct_he->h_dealcd,APL_DEAL_DF);
		 strcpy(l_sys_dl_deal_struct_he->h_securitycd,p_from_sec);


		 strcpy(l_sys_dl_deal_struct_he->h_currencycode, h_currencycode);

		 if (strcmp(p_parri_passu_flg,"Y") == 0)
			 strcpy(l_sys_dl_deal_struct_he->h_classofdl,"11");
		 else
			 strcpy(l_sys_dl_deal_struct_he->h_classofdl,"10");

		 strcpy(l_sys_dl_deal_struct_he->h_origindentity_no,l_sys_dl_deal_struct_he->h_indentity_no);
		 strcpy(l_sys_dl_deal_struct_he->h_newdt,chr_h_sys_time_stamp);
		 strcpy(l_sys_dl_deal_struct_he->h_creater,p_intl_env_data_struct_h_d->usr);
		 strcpy(l_sys_dl_deal_struct_he->h_create_dt,chr_h_sys_time_stamp);
		 strcpy(l_sys_dl_deal_struct_he->h_deal_status,"CS");
		 strcpy(l_sys_dl_deal_struct_he->h_timestamp,chr_h_sys_time_stamp);

		 sprintf(l_sys_dl_deal_struct_he->h_info1,"Code change from %s to %s",p_from_sec,h_to_security);

		 if (p_dl_safek_struct_i->i_loccode == 0)
		 {
			strcpy(l_sys_dl_deal_struct_he->h_loccode,p_dl_safek_struct_h->h_loccode);
		 }
		 else
			strcpy(l_sys_dl_deal_struct_he->h_loccode,APL_NULL_STRING);

		 strcpy(l_sys_dl_deal_struct_he->h_regsec_ind,APL_NULL_STRING);

		 
		 strcpy(l_sys_dl_deal_struct_he->h_pos_stat,APL_NULL_STRING);

		 strcpy(l_sys_dl_deal_struct_he->h_status_reg,APL_NULL_STRING);
		 strcpy(l_sys_dl_deal_struct_he->h_confdate,h_sys_dt);
		 strcpy(l_sys_dl_deal_struct_he->h_matchindentity_no,APL_NULL_STRING);
		 strcpy(l_sys_dl_deal_struct_he->h_markfaildate,APL_NULL_STRING);
		 strcpy(l_sys_dl_deal_struct_he->h_candropdate,h_sys_dt);
		 strcpy(l_sys_dl_deal_struct_he->h_authoriser,p_intl_env_data_struct_h_d->usr);
		 strcpy(l_sys_dl_deal_struct_he->h_authoriserdt,chr_h_sys_time_stamp);
		 strcpy(l_sys_dl_deal_struct_he->h_secconv_ind,"Y");
		 strcpy(l_sys_dl_deal_struct_he->h_ndsbldate,APL_NULL_STRING);

		 strcpy(chr_mainfuncarea, "TRD_LRTRDTYP");
		 strcpy(chr_l_condid, "LRTRDTYP_NOT_NULL");

		 int_retval = CO_Chk_CntryEnabled(chr_mainfuncarea,chr_l_condid,&int_l_condexists,l_debug_info_ptr);
		 if (int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL

		 if (int_l_condexists > 0)
			strcpy(l_sys_dl_deal_struct_he->h_lrdltype,"20");
		 else
			strcpy(l_sys_dl_deal_struct_he->h_lrdltype,APL_NULL_STRING);

		 strcpy(l_sys_dl_deal_struct_he->h_ndsdate,APL_NULL_STRING);
		 strcpy(l_sys_dl_deal_struct_he->h_ublckdate,APL_NULL_STRING);
		 l_sys_dl_deal_struct_he->h_delta_000 = 0;
		 l_sys_dl_deal_struct_he->h_delta_001 = 0;
		 l_sys_dl_deal_struct_he->h_delta_002 = 0;
		
		 if (strcmp(l_mt_core_sys_params_struct_h.manifld_print_ind,"Y") == 0)
		 {
			if (strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind,"Y") == 0)
			{
				EXEC SQL SELECT MANIFLD_IND
				INTO :h_manifld_ind:i_manifld_ind
				FROM MT_LOCATION
				WHERE location_cd = RTRIM(:p_dl_safek_struct_h->h_loccode);

				IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

				if (strcmp(h_manifld_ind,"Y") == 0)
				{
					strcpy(chr_mainfuncarea,"TRD_MANIFOLD");
					strcpy(chr_l_condid,"MANI_NOTREQD_FOR_MIN");

					int_retval = CO_Chk_CntryEnabled(chr_mainfuncarea,chr_l_condid,&int_l_condexists,l_debug_info_ptr);
					if (int_retval != APL_SUCCESS)
						APL_GOBACK_FAIL

					EXEC SQL SELECT CLASSCD
					INTO :h_classcd:i_classcd
					FROM MT_INSTRUMENT
					WHERE security_cd = :p_from_sec;

					IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

					if ((int_l_condexists > 0) && (strcmp(h_classcd,"MIN") == 0))
						strcpy(l_sys_dl_deal_struct_he->h_delrecdate,APL_NULL_STRING);
					else
						strcpy(l_sys_dl_deal_struct_he->h_delrecdate,h_sys_dt);
				}
				else
					strcpy(l_sys_dl_deal_struct_he->h_delrecdate,APL_NULL_STRING);
			}
			else
			{
				strcpy(chr_mainfuncarea,"TRD_MANIFOLD");
				strcpy(chr_l_condid,"MANI_NOTREQD_FOR_MIN");

				int_retval = CO_Chk_CntryEnabled(chr_mainfuncarea,chr_l_condid,&int_l_condexists,l_debug_info_ptr);
				if (int_retval != APL_SUCCESS)
					APL_GOBACK_FAIL

				EXEC SQL SELECT CLASSCD
				INTO :h_classcd:i_classcd
				FROM MT_INSTRUMENT
				WHERE security_cd = :p_from_sec;

				IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

				if ((int_l_condexists > 0) && (strcmp(h_classcd,"MIN") == 0))
					strcpy(l_sys_dl_deal_struct_he->h_delrecdate,APL_NULL_STRING);
				else
					strcpy(l_sys_dl_deal_struct_he->h_delrecdate,h_sys_dt);
			}
		}
		else
			strcpy(l_sys_dl_deal_struct_he->h_delrecdate,APL_NULL_STRING);
		
		strcpy(l_sys_dl_deal_struct_he->h_lastregdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_he->h_lr_chkdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_he->h_lr_confdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_he->h_lr_secdate,APL_NULL_STRING);
		l_sys_dl_deal_struct_he->h_regmsgquantity = 0;
		strcpy(l_sys_dl_deal_struct_he->h_tmpoutdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_he->h_tmpretdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_he->h_transmitdate,APL_NULL_STRING);

		l_sys_dl_deal_struct_he->h_complquantity = 0;
		l_sys_dl_deal_struct_he->h_lostquantity = 0;
		l_sys_dl_deal_struct_he->h_marktrfquantity = 0;
		l_sys_dl_deal_struct_he->h_mcomplquantity = 0;
		l_sys_dl_deal_struct_he->h_outregquantity = 0;
		l_sys_dl_deal_struct_he->h_pendregquantity = 0;
		l_sys_dl_deal_struct_he->h_retregquantity = 0;
		l_sys_dl_deal_struct_he->h_stampquantity = 0;
		l_sys_dl_deal_struct_he->h_tempoutquantity = 0;
		l_sys_dl_deal_struct_he->h_tempretquantity = 0;
		l_sys_dl_deal_struct_he->h_valdeedquantity = 0;

		strcpy(l_sys_dl_deal_struct_he->h_hostdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_he->h_lr_ndsbldate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_he->h_lr_ndsdate,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_he->h_lr_ublckdate,APL_NULL_STRING);
		l_sys_dl_deal_struct_he->h_number_b = 0;
		strcpy(l_sys_dl_deal_struct_he->h_clt_reqdel_flag,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_he->h_mod_hispos_ind,APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_he->h_updhispos_date,APL_NULL_STRING);

		

		int_l_rucondexists = 0;
		strcpy(chr_mainfuncarea, "SEC_CONV");
		strcpy(chr_l_condid, "RUSTAT_TRDAUTH");

		int_retval = CO_Chk_CntryEnabled(chr_mainfuncarea,
											chr_l_condid,
											&int_l_rucondexists,
											l_debug_info_ptr);
		if (int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL

		if (int_l_rucondexists > 0)
		{
			EXEC SQL SELECT CLT_CLAS INTO :h_clt_class 
			FROM MT_CLIENT
			WHERE client = : p_dl_safek_struct_h->h_dl_client;

         IS_ANY_ORA_ERROR;

         if( strcmp(h_clt_class,"2") == 0 )
			{
				strcpy(l_sys_dl_deal_struct_he->h_deal_status,STATUS_AUTH);
				strcpy(l_sys_dl_deal_struct_he ->h_confdate, APL_NULL_STRING);
				strcpy(l_sys_dl_deal_struct_he->h_secdate, APL_NULL_STRING);
				strcpy(l_sys_dl_deal_struct_he ->h_moneydate, APL_NULL_STRING);
				strcpy(l_sys_dl_deal_struct_he ->h_fail_cd, APL_NULL_STRING);
				strcpy(l_sys_dl_deal_struct_he->h_candropdate,APL_NULL_STRING);
			}
		}
		
		
     
		
      if (strcmp(p_parri_passu_flg,"Y") == 0)
      {
         strcpy(l_sys_dl_deal_struct_he->h_msg_stat,chr_l_msg_flg_53x);
      }
      

   	
   	
		if (!strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_INPUT))
   		strcpy(l_sys_dl_deal_struct_he->h_allow_part_s,"N");
   	
	
	
		int_l_txn_type=SETL_MESG;
		if (MS_Rtv_RefNo_A(int_l_txn_type,chr_l_unique_ref_num,l_debug_info_ptr) == APL_FAILURE)
		{
			CO_ProcMonitor(APL_OUT_FILE,"Failure from GenUniqRefNum", NULL, NULL);
			APL_GOBACK_FAIL;
		}	
		strcpy(l_sys_dl_deal_struct_he->h_uniq_ident_no,chr_l_unique_ref_num);

		printf("\n\n THE UNIQUE REFERENCE NUMBER OF DELIVER TRADE : %s ****\n",l_sys_dl_deal_struct_he->h_uniq_ident_no);
		int_retval = DL_Proc_Trd(l_sys_dl_deal_struct_he,&int_h_trdrepseqnum,p_intl_env_data_struct_h_d,l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL
		
      if (APL_FAILURE==EI_Mod_MQData(l_sys_dl_deal_struct_he->h_dl_client,
                                     l_sys_dl_deal_struct_he->h_indentity_no,
                                     NULL,
                                     NULL,
                                     "B",
                                     l_debug_info_ptr))
      APL_GOBACK_FAIL
	
		if ((strcmp(p_parri_passu_flg,"Y") == 0)&& (!strcmp(l_sys_dl_deal_struct_he->h_deal_status,"CS")))
		{
			strcpy(chr_l_param_str,p_from_sec);
			strcat(chr_l_param_str,";");

			strcpy(l_ms_msgstat_structa.proc_init,l_sys_dl_deal_struct_he->h_indentity_no);
			strcpy(l_ms_msgstat_structa.swift_msg_rep,"53x"); 
			strcpy(l_ms_msgstat_structa.client,l_sys_dl_deal_struct_he->h_dl_client);
			strcpy(l_ms_msgstat_structa.generate_dt,h_sys_dt);

			int_retval = MS_Mod_MsgStat(l_ms_msgstat_structa,&int_retstat,l_debug_info_ptr);
			
			if (int_retval != APL_SUCCESS)
				APL_GOBACK_FAIL
         
         
		}

       if ((strcmp(p_parri_passu_flg,"Y") == 0)&& (strcmp(l_sys_dl_deal_struct_he->h_deal_status,"CS")))
      {
        EXEC SQL INSERT INTO DEAL_EVNTIDLINK VALUES ('563N04',:l_sys_dl_deal_struct_he->h_dl_client,:l_sys_dl_deal_struct_he->h_indentity_no,NULL,:chr_g_event_id ,:l_sys_dl_deal_struct_he->h_newdt);

        IS_ANY_ORA_ERROR
      }

		strcpy((char *)h_dl_class,"DF");

		
		 EXEC SQL INSERT INTO DL_INSTRUMENTCONV_REP_TEMP
			VALUES(:l_sys_dl_deal_struct_he->h_indentity_no,:l_sys_dl_deal_struct_he->h_dl_client,:h_dl_class,:p_from_sec,:l_sys_dl_deal_struct_he->h_loccode,:l_sys_dl_deal_struct_he->h_qty);
		 IS_ANY_ORA_ERROR
		
		
			
		 sprintf(l_sys_dl_deal_struct_he->h_indentity_no,"CONV.%s%d",h_to_security,*p_ident_count);
		 *p_ident_count = *p_ident_count + 1;

		 strcpy(l_sys_dl_deal_struct_he->h_dealcd,APL_DEAL_RF);
		 strcpy(l_sys_dl_deal_struct_he->h_securitycd,h_to_security);

		 EXEC SQL SELECT ex_arena,currency_cd
		 INTO :h_ex_arena:i_ex_arena,:h_currencycode:i_currencycode
		 FROM MT_INSTRUMENT
		 WHERE security_cd = :h_to_security;

		 IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

		 strcpy(l_sys_dl_deal_struct_he->h_currencycode,h_currencycode);
		 strcpy(l_sys_dl_deal_struct_he->h_ex_arena,h_ex_arena);
		 strcpy(l_sys_dl_deal_struct_he->h_origindentity_no,l_sys_dl_deal_struct_he->h_indentity_no);
		 if (strcmp(l_mt_core_sys_params_struct_h.manifld_print_ind,"Y") == 0)
		 {
			if (strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind,"Y") == 0)
			{
				EXEC SQL SELECT MANIFLD_IND
				INTO :h_manifld_ind:i_manifld_ind
				FROM MT_LOCATION
				WHERE location_cd = RTRIM(:p_dl_safek_struct_h->h_loccode);

				IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

				if (strcmp(h_manifld_ind,"Y") == 0)
				{
					strcpy(chr_mainfuncarea,"TRD_MANIFOLD");
					strcpy(chr_l_condid,"MANI_NOTREQD_FOR_MIN");

					int_retval = CO_Chk_CntryEnabled(chr_mainfuncarea,chr_l_condid,&int_l_condexists,l_debug_info_ptr);
					if (int_retval != APL_SUCCESS)
						APL_GOBACK_FAIL

					EXEC SQL SELECT CLASSCD
					INTO :h_classcd:i_classcd
					FROM MT_INSTRUMENT
					WHERE security_cd = :h_to_security;

					IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

					if ((int_l_condexists > 0) && (strcmp(h_classcd,"MIN") == 0))
						strcpy(l_sys_dl_deal_struct_he->h_delrecdate,APL_NULL_STRING);
					else
						strcpy(l_sys_dl_deal_struct_he->h_delrecdate,h_sys_dt);
				}
				else
					strcpy(l_sys_dl_deal_struct_he->h_delrecdate,APL_NULL_STRING);
			}
			else
			{
				strcpy(chr_mainfuncarea,"TRD_MANIFOLD");
				strcpy(chr_l_condid,"MANI_NOTREQD_FOR_MIN");

				int_retval = CO_Chk_CntryEnabled(chr_mainfuncarea,chr_l_condid,&int_l_condexists,l_debug_info_ptr);
				if (int_retval != APL_SUCCESS)
					APL_GOBACK_FAIL

				EXEC SQL SELECT CLASSCD
				INTO :h_classcd:i_classcd
				FROM MT_INSTRUMENT
				WHERE security_cd = :h_to_security;

				IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

				if ((int_l_condexists > 0) && (strcmp(h_classcd,"MIN") == 0))
					strcpy(l_sys_dl_deal_struct_he->h_delrecdate,APL_NULL_STRING);
				else
					strcpy(l_sys_dl_deal_struct_he->h_delrecdate,h_sys_dt);
			}
		}
		else
			strcpy(l_sys_dl_deal_struct_he->h_delrecdate,APL_NULL_STRING);

		

		int_l_rucondexists = 0;
		strcpy(chr_mainfuncarea, "SEC_CONV");
		strcpy(chr_l_condid, "RUSTAT_TRDAUTH");

		int_retval = CO_Chk_CntryEnabled(chr_mainfuncarea,
											chr_l_condid,
											&int_l_rucondexists,
											l_debug_info_ptr);
		if (int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL

		if (int_l_rucondexists > 0)
		{
			EXEC SQL SELECT CLT_CLAS INTO :h_clt_class 
			FROM MT_CLIENT
			WHERE client = : p_dl_safek_struct_h->h_dl_client;

         IS_ANY_ORA_ERROR;

         if( strcmp(h_clt_class,"2") == 0 )
			{
				strcpy(l_sys_dl_deal_struct_he->h_deal_status,STATUS_AUTH);
				strcpy(l_sys_dl_deal_struct_he ->h_confdate, APL_NULL_STRING);
				strcpy(l_sys_dl_deal_struct_he->h_secdate, APL_NULL_STRING);
				strcpy(l_sys_dl_deal_struct_he ->h_moneydate, APL_NULL_STRING);
				strcpy(l_sys_dl_deal_struct_he ->h_fail_cd, APL_NULL_STRING);
				strcpy(l_sys_dl_deal_struct_he->h_candropdate,APL_NULL_STRING);
			}
		}
		
		
      
		
      if (strcmp(p_parri_passu_flg,"Y") == 0)
      {
         strcpy(l_sys_dl_deal_struct_he->h_msg_stat,chr_l_msg_flg_53x);
      }
      

      
      
      if (!strcmp(p_intl_env_data_struct_h_d->h_mode,APL_FUNC_INPUT))
         strcpy(l_sys_dl_deal_struct_he->h_allow_part_s,"N");
      

	

		int_l_txn_type=SETL_MESG;
		if (MS_Rtv_RefNo_A(int_l_txn_type,chr_l_unique_ref_num,l_debug_info_ptr) == APL_FAILURE)
		{
			CO_ProcMonitor(APL_OUT_FILE,"Failure from GenUniqRefNum", NULL, NULL);
			APL_GOBACK_FAIL;
		}	
		strcpy(l_sys_dl_deal_struct_he->h_uniq_ident_no,chr_l_unique_ref_num);

		printf("\n\n THE UNIQUE REFERENCE NUMBER OF RECEIVE TRADE : %s ****\n",l_sys_dl_deal_struct_he->h_uniq_ident_no);
		int_retval = DL_Proc_Trd(l_sys_dl_deal_struct_he,&int_h_trdrepseqnum,p_intl_env_data_struct_h_d,l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL
	

		
		if (APL_FAILURE==EI_Mod_MQData(l_sys_dl_deal_struct_he->h_dl_client,
                                     l_sys_dl_deal_struct_he->h_indentity_no,
                                     NULL,
                                     NULL,
                                     "B",
                                     l_debug_info_ptr))
    APL_GOBACK_FAIL		



      
		if ((strcmp(p_parri_passu_flg,"Y") == 0)&& (!strcmp(l_sys_dl_deal_struct_he->h_deal_status,"CS")))
	   {
			strcpy(chr_l_param_str,p_from_sec);
			strcat(chr_l_param_str,";");
         strcat(chr_l_param_str,chr_g_event_id);  
         strcat(chr_l_param_str,";");
         strcat(chr_l_param_str,"B");  
         strcat(chr_l_param_str,";");
			
			int_retval = GBDbInsIMSGENT("563N04",l_sys_dl_deal_struct_he->h_indentity_no,l_sys_dl_deal_struct_he->h_dl_client,'Y',chr_l_param_str,l_debug_info_ptr);

			if (int_retval != APL_SUCCESS)
				APL_GOBACK_FAIL
		
			strcpy(l_ms_msgstat_structa.proc_init,l_sys_dl_deal_struct_he->h_indentity_no);
			strcpy(l_ms_msgstat_structa.swift_msg_rep,"53x"); 
			strcpy(l_ms_msgstat_structa.client,l_sys_dl_deal_struct_he->h_dl_client);
			strcpy(l_ms_msgstat_structa.generate_dt,h_sys_dt);

			int_retval = MS_Mod_MsgStat(l_ms_msgstat_structa,&int_retstat,l_debug_info_ptr);
		
			if (int_retval != APL_SUCCESS)
				APL_GOBACK_FAIL

         
         
		}

		 if ((strcmp(p_parri_passu_flg,"Y") == 0)&& (strcmp(l_sys_dl_deal_struct_he->h_deal_status,"CS")))
	   {
        EXEC SQL INSERT INTO DEAL_EVNTIDLINK VALUES ('563N04',:l_sys_dl_deal_struct_he->h_dl_client,:l_sys_dl_deal_struct_he->h_indentity_no,NULL,:chr_g_event_id ,:l_sys_dl_deal_struct_he->h_newdt);

        IS_ANY_ORA_ERROR
      }

		strcpy((char *)h_dl_class,"RF");
		
		
		 EXEC SQL INSERT INTO DL_INSTRUMENTCONV_REP_TEMP
			VALUES(:l_sys_dl_deal_struct_he->h_indentity_no,:l_sys_dl_deal_struct_he->h_dl_client,:h_dl_class,:h_to_security,:l_sys_dl_deal_struct_he->h_loccode,:l_sys_dl_deal_struct_he->h_qty);
		 IS_ANY_ORA_ERROR
		
	}

	

	sqlca.sqlcode = 0;
		
	

	 if (p_dl_safek_struct_i->i_loccode == -1)
	 {
		if (p_dl_safek_struct_i->i_status_pos == -1)
		{
			EXEC SQL SELECT security_cd FROM DL_SAFEK
			WHERE client = RTRIM(:p_dl_safek_struct_h->h_dl_client)
			AND security_cd = :h_to_security;
		}
		else if (p_dl_safek_struct_i->i_status_pos == 0)
		{
			EXEC SQL SELECT security_cd FROM DL_SAFEK
			WHERE client = RTRIM(:p_dl_safek_struct_h->h_dl_client)
			AND   security_cd = :h_to_security
			AND   STATUS = RTRIM(:p_dl_safek_struct_h->h_pos_stat);
		}
	}
	else if (p_dl_safek_struct_i->i_loccode == 0)
	{
		if (p_dl_safek_struct_i->i_status_pos == -1)
		{
			EXEC SQL SELECT security_cd FROM DL_SAFEK
			WHERE client = RTRIM(:p_dl_safek_struct_h->h_dl_client)
			AND   security_cd = :h_to_security
			AND   location_cd = RTRIM(:p_dl_safek_struct_h->h_loccode);
		}
		else if (p_dl_safek_struct_i->i_status_pos == 0)
		{
			EXEC SQL SELECT security_cd FROM DL_SAFEK
			WHERE client = RTRIM(:p_dl_safek_struct_h->h_dl_client)
			AND security_cd = :h_to_security
			AND location_cd = RTRIM(:p_dl_safek_struct_h->h_loccode)
			AND STATUS = RTRIM(:p_dl_safek_struct_h->h_pos_stat);
		}
	}

	IS_ANY_ORA_ERROR



	if (sqlca.sqlcode == 1403)
	{
		

		strcpy(l_dl_safek_struct_h_ptr->h_securitycd,h_to_security);
		 
		if (p_dl_safek_struct_i->i_loccode == 0)
			strcpy(l_dl_safek_struct_h_ptr->h_loccode,p_dl_safek_struct_h->h_loccode);
		else
			strcpy(l_dl_safek_struct_h_ptr->h_loccode,APL_NULL_STRING);
		
		strcpy(l_dl_safek_struct_h_ptr->h_dl_client,p_dl_safek_struct_h->h_dl_client);
		strcpy(l_dl_safek_struct_h_ptr->h_timestamp,chr_h_sys_time_stamp);

		
		strcpy(l_dl_safek_struct_h_ptr->h_pos_stat,APL_NULL_STRING);

		if (p_dl_safek_struct_i->i_stsafekeep_pos == 0)
			l_dl_safek_struct_h_ptr->h_stsafekeep_pos = p_dl_safek_struct_h->h_stsafekeep_pos;
		else
			l_dl_safek_struct_h_ptr->h_stsafekeep_pos = 0;

		l_dl_safek_struct_h_ptr->h_safekeep_pos = 0;

		if (p_dl_safek_struct_i->i_val_rec == 0)
			l_dl_safek_struct_h_ptr->h_val_rec = p_dl_safek_struct_h->h_val_rec;
		else
			l_dl_safek_struct_h_ptr->h_val_rec = 0;

		if (p_dl_safek_struct_i->i_val_del == 0)
			l_dl_safek_struct_h_ptr->h_val_del = p_dl_safek_struct_h->h_val_del;
		else
			l_dl_safek_struct_h_ptr->h_val_del = 0;

		if (p_dl_safek_struct_i->i_nval_rec == 0)
			l_dl_safek_struct_h_ptr->h_nval_rec = p_dl_safek_struct_h->h_nval_rec;
		else
			l_dl_safek_struct_h_ptr->h_nval_rec = 0;

		if (p_dl_safek_struct_i->i_nval_del == 0)
			l_dl_safek_struct_h_ptr->h_nval_del = p_dl_safek_struct_h->h_nval_del;
		else
			l_dl_safek_struct_h_ptr->h_nval_del = 0;

		l_dl_safek_struct_ib->i_securitycd = 0;
		l_dl_safek_struct_ib->i_dl_client = 0;
		l_dl_safek_struct_ib->i_timestamp = 0;

		if (strlen(l_dl_safek_struct_h_ptr->h_loccode) == 0)
			l_dl_safek_struct_ib->i_loccode = -1;
		else
			l_dl_safek_struct_ib->i_loccode = 0;
		
		if (strlen(l_dl_safek_struct_h_ptr->h_pos_stat) == 0)
			l_dl_safek_struct_ib->i_status_pos = -1;
		else
			l_dl_safek_struct_ib->i_status_pos = 0;

		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL
		
		EXEC SQL INSERT INTO DL_SAFEK
		VALUES (:l_dl_safek_struct_h_ptr:l_dl_safek_struct_ib
				 );

		IS_ANY_ORA_ERROR

		

		if (p_dl_safek_struct_i->i_loccode == -1)
		{
			if (p_dl_safek_struct_i->i_status_pos == -1)
			{
				EXEC SQL DELETE FROM DL_SAFEK
				WHERE client = RTRIM(:p_dl_safek_struct_h->h_dl_client)
				AND   security_cd = :p_from_sec;
			}
			else if (p_dl_safek_struct_i->i_status_pos == 0)
			{
				EXEC SQL DELETE FROM DL_SAFEK
				WHERE client = RTRIM(:p_dl_safek_struct_h->h_dl_client)
				AND security_cd = :p_from_sec
				AND STATUS = RTRIM(:p_dl_safek_struct_h->h_pos_stat);
			}
		}
		else if (p_dl_safek_struct_i->i_loccode == 0)
		{
 
			if (p_dl_safek_struct_i->i_status_pos == -1)
           {

            if (int_l_rucondexists > 0)
              {
                   EXEC SQL UPDATE DL_SAFEK SET NVALDELIVER=SAFEKEEP_POS,NVALRECEIVE=0,VAL_REC=0,VAL_DEL=0
                   WHERE client = RTRIM(:p_dl_safek_struct_h->h_dl_client)
                   AND   security_cd = :p_from_sec
                   AND   location_cd = RTRIM(:p_dl_safek_struct_h->h_loccode); 
              }
            else
            {
              EXEC SQL DELETE FROM DL_SAFEK
				  WHERE client = RTRIM(:p_dl_safek_struct_h->h_dl_client)
				  AND   security_cd = :p_from_sec
				  AND   location_cd = RTRIM(:p_dl_safek_struct_h->h_loccode);
			   }
          }
			else if (p_dl_safek_struct_i->i_status_pos == 0)
			{
         	if (int_l_rucondexists > 0)
            {
                   EXEC SQL UPDATE DL_SAFEK SET NVALDELIVER=SAFEKEEP_POS,NVALRECEIVE=0,VAL_REC=0,VAL_DEL=0
                   WHERE client = RTRIM(:p_dl_safek_struct_h->h_dl_client)
                   AND   security_cd = :p_from_sec
                   AND   location_cd = RTRIM(:p_dl_safek_struct_h->h_loccode)
						 AND   STATUS = RTRIM(:p_dl_safek_struct_h->h_pos_stat);
            }
				else
				{
				EXEC SQL DELETE FROM DL_SAFEK
				WHERE client = RTRIM(:p_dl_safek_struct_h->h_dl_client)
				AND   security_cd = :p_from_sec
				AND   location_cd = RTRIM(:p_dl_safek_struct_h->h_loccode)
				AND   STATUS = RTRIM(:p_dl_safek_struct_h->h_pos_stat);
				}
			}
		}

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
	}
	else if (sqlca.sqlcode == 0)
	{
		if (p_dl_safek_struct_i->i_loccode == -1)
		{
			if (p_dl_safek_struct_i->i_status_pos == -1)
			{
				

				if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
					APL_GOBACK_FAIL

				EXEC SQL UPDATE DL_SAFEK
				SET VAL_REC = VAL_REC + :p_dl_safek_struct_h->h_val_rec,
					 VAL_DEL = VAL_DEL + :p_dl_safek_struct_h->h_val_del,
					 NVALRECEIVE = NVALRECEIVE + :p_dl_safek_struct_h->h_nval_rec,
					 NVALDELIVER = NVALDELIVER + :p_dl_safek_struct_h->h_nval_del,
					 timestamp = :chr_h_sys_time_stamp:i_sys_access_stamp
				WHERE client = RTRIM(:p_dl_safek_struct_h->h_dl_client)
				AND security_cd = :h_to_security;

				IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

				

				EXEC SQL DELETE FROM DL_SAFEK
				WHERE client = RTRIM(:p_dl_safek_struct_h->h_dl_client)
				AND   security_cd = :p_from_sec;
				
				IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
			}
			else if (p_dl_safek_struct_i->i_status_pos == 0)
			{
				if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
					APL_GOBACK_FAIL

				EXEC SQL UPDATE DL_SAFEK
				SET VAL_REC = VAL_REC + :p_dl_safek_struct_h->h_val_rec,
					 VAL_DEL = VAL_DEL + :p_dl_safek_struct_h->h_val_del,
					 NVALRECEIVE = NVALRECEIVE + :p_dl_safek_struct_h->h_nval_rec,
					 NVALDELIVER = NVALDELIVER + :p_dl_safek_struct_h->h_nval_del,
					 timestamp = :chr_h_sys_time_stamp:i_sys_access_stamp
				WHERE client = RTRIM(:p_dl_safek_struct_h->h_dl_client)
				AND   security_cd = :h_to_security
				AND   STATUS = RTRIM(:p_dl_safek_struct_h->h_pos_stat);
				IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

				EXEC SQL DELETE FROM DL_SAFEK
				WHERE client = RTRIM(:p_dl_safek_struct_h->h_dl_client)
				AND   security_cd = :p_from_sec
				AND   STATUS = RTRIM(:p_dl_safek_struct_h->h_pos_stat);
				IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
			}
		}
		else if (p_dl_safek_struct_i->i_loccode == 0)
		{
			if (p_dl_safek_struct_i->i_status_pos == -1)
			{
				if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
					APL_GOBACK_FAIL

				EXEC SQL UPDATE DL_SAFEK
				SET VAL_REC = VAL_REC + :p_dl_safek_struct_h->h_val_rec,
					 VAL_DEL = VAL_DEL + :p_dl_safek_struct_h->h_val_del,
					 NVALRECEIVE = NVALRECEIVE + :p_dl_safek_struct_h->h_nval_rec,
					 NVALDELIVER = NVALDELIVER + :p_dl_safek_struct_h->h_nval_del,
					 timestamp = :chr_h_sys_time_stamp:i_sys_access_stamp
				WHERE client = RTRIM(:p_dl_safek_struct_h->h_dl_client)
				AND   security_cd = :h_to_security
				AND   location_cd = RTRIM(:p_dl_safek_struct_h->h_loccode);
				
				IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)



           if (int_l_rucondexists > 0)
					 {
					  EXEC SQL UPDATE DL_SAFEK SET NVALDELIVER=SAFEKEEP_POS,NVALRECEIVE=0,VAL_REC=0,VAL_DEL=0
					       WHERE client = RTRIM(:p_dl_safek_struct_h->h_dl_client)
							 AND   security_cd = :p_from_sec
							 AND   location_cd = RTRIM(:p_dl_safek_struct_h->h_loccode);
					 }
				 else
                {
				      EXEC SQL DELETE FROM DL_SAFEK
				      WHERE client = RTRIM(:p_dl_safek_struct_h->h_dl_client)
				      AND   security_cd = :p_from_sec
				      AND   location_cd = RTRIM(:p_dl_safek_struct_h->h_loccode);
			       }	
				IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
			}
			else if (p_dl_safek_struct_i->i_status_pos == 0)
			{
				if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
					APL_GOBACK_FAIL

				EXEC SQL UPDATE DL_SAFEK
				SET VAL_REC = VAL_REC + :p_dl_safek_struct_h->h_val_rec,
					 VAL_DEL = VAL_DEL + :p_dl_safek_struct_h->h_val_del,
					 NVALRECEIVE = NVALRECEIVE + :p_dl_safek_struct_h->h_nval_rec,
					 NVALDELIVER = NVALDELIVER + :p_dl_safek_struct_h->h_nval_del,
					 timestamp = :chr_h_sys_time_stamp:i_sys_access_stamp
				WHERE client = RTRIM(:p_dl_safek_struct_h->h_dl_client)
				AND   security_cd = :h_to_security
				AND   location_cd = RTRIM(:p_dl_safek_struct_h->h_loccode)
				AND   STATUS = RTRIM(:p_dl_safek_struct_h->h_pos_stat);
				
				IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

			 if (int_l_rucondexists > 0)
			{
			  EXEC SQL UPDATE DL_SAFEK SET NVALDELIVER=SAFEKEEP_POS,NVALRECEIVE=0,VAL_REC=0,VAL_DEL=0
			          WHERE client = RTRIM(:p_dl_safek_struct_h->h_dl_client)
			          AND   security_cd = :p_from_sec
			          AND   location_cd = RTRIM(:p_dl_safek_struct_h->h_loccode);
			}
			else
			{
				EXEC SQL DELETE FROM DL_SAFEK
				WHERE client = RTRIM(:p_dl_safek_struct_h->h_dl_client)
				AND   security_cd = :p_from_sec
				AND   location_cd = RTRIM(:p_dl_safek_struct_h->h_loccode)
				AND   STATUS = RTRIM(:p_dl_safek_struct_h->h_pos_stat);
				IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
			}
       }
		}
	}

	
	 if (APL_FAILURE==EI_Mod_MQData(p_dl_safek_struct_h->h_dl_client,
                             		  APL_NULL_STRING, 	 
                             		  h_to_security,	 
                             		  p_dl_safek_struct_h->h_loccode,
                                   "H|SC|",
                                   l_debug_info_ptr))
             APL_GOBACK_FAIL	

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		APL_FREE(l_sys_dl_deal_struct_he)

		APL_FREE(l_dl_safek_struct_h_ptr)
		
		APL_FREE(l_dl_safek_struct_ib)
		
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CR_Proc_PosSecConv successfully \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		APL_FREE(l_sys_dl_deal_struct_he)

		APL_FREE(l_dl_safek_struct_h_ptr)
		
		APL_FREE(l_dl_safek_struct_ib)
		
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CR_Proc_PosSecConv with failure\n",NULL,p_intl_env_data_struct_h_d);

		return(APL_FAILURE);
	}
}


 
 int CR_Prnt_SecConvRpt(FILE *p_instr_conv_rpt_file,char *p_securitycd,char *p_trade_type,char *chr_p_client,char *chr_p_refno,double p_quantity,char *p_location,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	char  chr_l_rep_outqty[QUANTITY_LEN] = APL_NULL_STRING;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CR_Prnt_SecConvRpt \n",NULL,p_intl_env_data_struct_h_d);

	

	

	

	if (APL_FAILURE == CR_Proc_SecQtyRoundToStr(	p_quantity,
															QUANTITY_LEN,
															p_securitycd,
															chr_l_rep_outqty,
															l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	fprintf(p_instr_conv_rpt_file,"\n");

	fprintf(p_instr_conv_rpt_file,"%-16s%-12s%-12s%-15s%-10s%30s \n",chr_p_refno,chr_p_client,p_trade_type,p_securitycd,p_location,chr_l_rep_outqty);

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CR_Prnt_SecConvRpt successfully \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CR_Prnt_SecConvRpt with failure \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_FAILURE);
	}
}


 
 int CA_DatabaseConnect(char *p_username,char *p_passwd,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca    sqlca;

	CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CA_DatabaseConnect \n",NULL,NULL);
	sqlca.sqlcode = 0;

	EXEC SQL CONNECT :p_username IDENTIFIED BY :p_passwd;

	if (sqlca.sqlcode != 0)
		APL_GOBACK_FAIL

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CA_DatabaseConnect successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CA_DatabaseConnect with failure \n",NULL,NULL);

		return(APL_FAILURE);

	}
}


 
 int CA_Proc_Final(char **argv,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr,int p_flg)
 {
	struct sqlca    sqlca;
	char				 chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CA_Proc_Final \n",NULL,NULL);
	sqlca.sqlcode = 0;
	
	if (p_flg == 0)
	{
		

		if (CO_ChkErr(*l_debug_info_ptr) != APL_SUCCESS)
		{
			memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
			sprintf(chr_l_buf,"Finished Security Conversion - Authorize");

			EXEC SQL UPDATE SYS_BATCHPROC
			SET stat_det = :chr_l_buf,
				 status_ind = 'completed'
			WHERE process_name = :argv[0]
			AND   proc_init = :argv[1]
			AND START_DATE = :argv[2]
			AND status_ind = 'started';

			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
		}

		EXEC SQL COMMIT WORK RELEASE;

		CO_ProcMonitor(p_ptr_log_file,"Work Committed \n",NULL,NULL);
	}
	else if (p_flg == 1)
	{
		EXEC SQL ROLLBACK WORK RELEASE;

		CO_ProcMonitor(p_ptr_log_file,"Rollback done \n",NULL,NULL);
	}

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CA_Proc_Final successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CA_Proc_Final with failure \n",NULL,NULL);

		return(APL_FAILURE);

	}
}


 
 int CA_LockRec(char **argv,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca    sqlca;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CA_LockRec \n",NULL,NULL);
	
	sqlca.sqlcode = 0;

	EXEC SQL SELECT processing_status
	FROM SYS_BATCHPROC
	WHERE process_name = :argv[0]
	AND   proc_init = :argv[1]
	AND START_DATE = :argv[2]
	AND status_ind = 'started'
	FOR UPDATE OF processing_status,status_ind;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CA_LockRec successfully \n",NULL,NULL);
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CA_LockRec with failure \n",NULL,NULL);
		return(APL_FAILURE);

	}
}


 
 int CR_Prnt_SecConvRptHdr(FILE *p_instr_conv_rpt_file,char *p_from_sec,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca  		sqlca;
	int 					i;
	char					h_sys_dt[APL_DATE_LEN] = APL_NULL_STRING;
	char					h_to_security[APL_INSTRUMENTCODE_LEN] = APL_NULL_STRING;
	char					h_creater[15] = APL_NULL_STRING;
	short					i_to_security;
	short					i_creater;

	EXEC SQL VAR h_to_security IS STRING;
	EXEC SQL VAR h_creater IS STRING;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CR_Prnt_SecConvRptHdr \n",NULL,p_intl_env_data_struct_h_d);

	sqlca.sqlcode = 0;

	EXEC SQL SELECT TO_CHAR(SYS_DATE,'DD/MM/YYYY')
	INTO :h_sys_dt
	FROM PRO_SYS_DATE;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_DATE_NOT_SET,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	EXEC SQL SELECT NEW_CD,NEW_MAKER
	INTO :h_to_security:i_to_security,:h_creater:i_creater
	FROM MT_INSTRUMENT
	WHERE security_cd = :p_from_sec;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	if (i_creater == -1)
		APL_GOBACK_FAIL
	
	fprintf(p_instr_conv_rpt_file,"\n");

	for (i=0;i<95;i++)
		fprintf(p_instr_conv_rpt_file,"-");

	fprintf(p_instr_conv_rpt_file,"\n                        SECURITY CONVERSION REPORT \n");
	for (i=0;i<95;i++)
		fprintf(p_instr_conv_rpt_file,"-");

	fprintf(p_instr_conv_rpt_file,"\n\n\n\n");
		
	fprintf(p_instr_conv_rpt_file,"Old Security Code  : %s",p_from_sec);
	fprintf(p_instr_conv_rpt_file,"\n\n");
	fprintf(p_instr_conv_rpt_file,"New Security Code  : %s",h_to_security);
	fprintf(p_instr_conv_rpt_file,"\n\n");
	fprintf(p_instr_conv_rpt_file,"Date of Conversion : %s",h_sys_dt);
	fprintf(p_instr_conv_rpt_file,"\n\n");
	fprintf(p_instr_conv_rpt_file,"Maker              : %s",h_creater);
	fprintf(p_instr_conv_rpt_file,"\n\n");
	fprintf(p_instr_conv_rpt_file,"Authorised By      : %s",p_intl_env_data_struct_h_d->usr);
	fprintf(p_instr_conv_rpt_file,"\n\n");

	fprintf(p_instr_conv_rpt_file,"Trade Ref No    Customer    Trade Type  Security Code  Location  Quantity                     ");
	
	fprintf(p_instr_conv_rpt_file,"\n");

	for (i=0;i<95;i++)
		fprintf(p_instr_conv_rpt_file,"-");
	
	fprintf(p_instr_conv_rpt_file,"\n");

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CR_Prnt_SecConvRptHdr successfully \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CR_Prnt_SecConvRptHdr with failure \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_FAILURE);

	}
}


 
 int CR_Prnt_SecConvRptFtr(FILE *p_instr_conv_rpt_file,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	int 					i;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CR_Prnt_SecConvRptFtr \n",NULL,p_intl_env_data_struct_h_d);

	fprintf(p_instr_conv_rpt_file,"\n");

	for (i=0;i<95;i++)
		fprintf(p_instr_conv_rpt_file,"-");

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CR_Prnt_SecConvRptFtr successfully \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CR_Prnt_SecConvRptFtr with failure \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_FAILURE);

	}
}
