


   
   
   
   
   
   
   
   
   
   
   




#include "CO_HostStructdef.h"
EXEC SQL INCLUDE sqlca;

#define MCSD_LINE_LEN	            300	
#define USERID_A	         	15
#define DATETIME_LEN       20
#define MCSD_LOCN          "MCSD"
#define NO_CLIENT_IND                "Account Not Setup In SMAC"
#define NO_INSTR_CODE_IND                 "Instrurity Not Setup In SMAC"
#define CLT_NOREC_ERR_LEN               31 
#define DL_SEC_ERR_LEN               31 
#define ERR_REASON_LEN 					39 
#define MCSD_SEC_BELONGTO        13
#define MCSD_POSNTYPE               4
#define MCSD_QTY                    20
#define REP_LEN                     89
#define PAGELENGTH                  50

main(int argc,char **argv)
{
	DEBUG_INFO_STRUCT_H			*l_debug_info_ptr 		= NULL;
		/* Added by kotubabu for Linux Migration -Start*/
    #ifdef OS_LINUX
	FILE						*l_ptr_ini_file 	= NULL;
	FILE						*l_ptr_log_file 	= NULL;
    #else
    FILE *l_ptr_ini_file = APL_OUT_FILE;
    FILE *l_ptr_log_file = APL_OUT_FILE;
    #endif
    #ifdef OS_LINUX
     l_ptr_ini_file = APL_OUT_FILE;
	 l_ptr_log_file = APL_OUT_FILE;
    #endif
   /* Added by kotubabu for Linux Migration-End*/
	INTL_ENV_DATA_STRUCT_H	l_intl_envdatastruct_h;
	char						chr_l_inifile[PATH_LENGTH]  		= APL_NULL_STRING;
	char						chr_uname[APL_USERID_LEN]   		= APL_NULL_STRING;
	char						chr_passwd[APL_PASSWD_LEN]  		= APL_NULL_STRING;
	char						chr_custody_id_b[APL_USERID_LEN] 	 		= APL_NULL_STRING;
	char						chr_l_filename_c[FILE_NAME_LEN]  	= APL_NULL_STRING;
	char 						chr_l_uploaddir[PATH_LENGTH]		= APL_NULL_STRING;
	char						**temp = NULL ;
	char 						chr_l_typ_rem_trd[2]					= APL_NULL_STRING;
	int 						int_num 									= 0;
	int						int_l_flg  								= 0;
	int						int_retval 								= 0;
	int						int_l_int_count 						= 0;
	char						chr_l_buf[BUFFER_LEN] 					= APL_NULL_STRING;
	struct sqlca			sqlca;

	memset(&l_intl_envdatastruct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H));
	memset(chr_l_filename_c,APL_NULL_CHAR,FILE_NAME_LEN);
	memset(chr_l_uploaddir,APL_NULL_CHAR,PATH_LENGTH);
	
	sqlca.sqlcode = 0;

	
	strcpy(l_intl_envdatastruct_h.usr, argv[3]);
	strcpy(l_intl_envdatastruct_h.h_mode, argv[4]);
	strcpy(l_intl_envdatastruct_h.processtion, argv[5]);
	strcpy(l_intl_envdatastruct_h.auth_req, argv[6]);
	strcpy(l_intl_envdatastruct_h.subprocess, argv[7]);
	strcpy(l_intl_envdatastruct_h.h_process, argv[8]);
	
	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

	if ((l_ptr_ini_file = fopen(chr_l_inifile,"r")) == NULL)
		exit(-1);
	
	APL_FETCH_DB_LOGIN_DETAILS(l_ptr_ini_file,chr_custody_id_b,chr_uname,chr_passwd,APL_OUT_FILE,&l_debug_info_ptr)
	
	
	
	if (CO_Con_Db(chr_uname,chr_passwd,&l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL

	

	

	int_retval = CO_Rtv_RptFileName("3n",APL_LOGFILE_DESC,100,argv[5],argv,&l_ptr_log_file,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL
	}

	

	EXEC SQL COMMIT WORK;
	
	if (sqlca.sqlcode != 0)
	{
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL
	}
	
	memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
	sprintf(chr_l_buf,"MCSD Upload File - Egypt");
	
	fprintf(l_ptr_log_file,"\n");
	fprintf(l_ptr_log_file,"    		%s\n",chr_l_buf);
	fprintf(l_ptr_log_file,"    		-------------------------\n\n");
	fprintf(l_ptr_log_file,"Work Committed after chr_logfile creation \n");

	

	if (CO_RtvSysParams(&l_debug_info_ptr) != APL_SUCCESS)
	{
		CO_ProcMonitor(l_ptr_log_file,"Unable to get system parameters - Rollback done \n",NULL,&l_intl_envdatastruct_h);
		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL	
	}

	
	 
	int_retval = CO_Pro_LocRec(argv,l_ptr_log_file,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		CO_ProcMonitor(l_ptr_log_file,"Unable to lock BATCH_IN_PROC record - Rollback done \n",NULL,&l_intl_envdatastruct_h);
		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL
	}

   if ( APL_FAILURE == CO_ReadToken(l_ptr_ini_file,"INTL_UPL_PATH",chr_l_uploaddir,&l_debug_info_ptr))
   {
		APL_GOBACK_FAIL
	}

	

	 fprintf(l_ptr_log_file, "\n\tString split processtion called\n");

	 if (APL_FAILURE == CO_SplitStr( argv[9],'|',&int_num,&temp))
	 {
		fprintf(l_ptr_log_file, "\n\tString split processtion failed\n");
		APL_GOBACK_FAIL
	 }
	
	 if(int_num == 0)
	 {
		fprintf(l_ptr_log_file, "\n\tThere were no params. Mandatory data missing\n");
		APL_GOBACK_FAIL
	 }

	 strcpy(chr_l_filename_c,temp[1]);

	 if (!strlen(chr_l_filename_c))
	 {
		CO_InsertErr
		 (&l_debug_info_ptr,
		  ERR_FDFILE_NOTVALID,
		  APL_NULL_STRING,
		  APL_NULL_STRING,
		  APL_NULL_STRING,
		  __LINE__,
		  __FILE__
		 );
		
		CO_ProcMonitor(l_ptr_log_file,"No Upload File name given!!\n",&l_debug_info_ptr,&l_intl_envdatastruct_h);
      APL_GOBACK_FAIL
	 }



	

  if ( UplmcsdposnFn(argv,chr_l_filename_c,chr_l_uploaddir,l_ptr_log_file,&l_intl_envdatastruct_h,&l_debug_info_ptr) != APL_SUCCESS )
  {
		int_l_flg = 1;

	   CO_Mod_Batch_Status(argv,l_ptr_log_file,&l_debug_info_ptr,int_l_flg);
		
		if (CO_ChkErr(l_debug_info_ptr) == APL_SUCCESS)
		{
			CO_ProcMonitor(l_ptr_log_file,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_envdatastruct_h);
			CO_FreeErrLst(&l_debug_info_ptr);
		}
		APL_GOBACK_FAIL	
	}
	else
	{
		int_l_flg = 0;

		CO_Mod_Batch_Status(argv,l_ptr_log_file,&l_debug_info_ptr,int_l_flg);

		if (CO_ChkErr(l_debug_info_ptr) == APL_SUCCESS)
		{
			CO_ProcMonitor(l_ptr_log_file,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_envdatastruct_h);
			CO_FreeErrLst(&l_debug_info_ptr);
		}
		APL_GOBACK_SUCCESS
	}
	  
	APL_GOBACK_SUCCESS


	RETURN_SUCCESS	:
	{
		CO_ProcMonitor(l_ptr_log_file,"SUCCESS from Uplmcsdposn main \n",NULL,NULL);
		CO_ProcMonitor(l_ptr_log_file,"Exiting Main Function Successfully\n",NULL,NULL);
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);
		fclose(l_ptr_ini_file);
		exit(0);
	}

	RETURN_FAILURE	:
	{
		CO_ProcMonitor(l_ptr_log_file,"FAILURE from Uplmcsdposn main \n",NULL,&l_intl_envdatastruct_h);
		CO_ProcMonitor(l_ptr_log_file,"Exiting Main Function Unsuccessfully\n",NULL,NULL);
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);
		fclose(l_ptr_ini_file);
  		exit(-1);
	}
}
 



 
int UplmcsdposnFn(char **argv,char *chr_p_filename_a,char *p_uploaddir,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_e,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
/* Added by kotubabu for Linux Migration -Start*/
#ifdef OS_LINUX
 FILE *l_upl_file 							= NULL ;
 FILE *l_err_file 							= NULL ;
 FILE *chr_l_rep_file							   = NULL ;
#else
 FILE *l_upl_file = APL_OUT_FILE;
 FILE *l_err_file = APL_OUT_FILE;
 FILE *chr_l_rep_file = APL_OUT_FILE;
#endif
   /* Added by kotubabu for Linux Migration-End*/
 char chr_l_uploadfilename[FILE_NAME_LEN] = APL_NULL_STRING ;
 char chr_l_linebuf[MCSD_LINE_LEN]			= APL_NULL_STRING ;
 int  int_l_retval 								= 0 ;
 int  int_l_reccount 								= 0 ;
 int  int_l_rpr_seq_num 							= 0 ;
 int  int_l_rep_linecount                  = 0 ;
 unsigned int  int_l_err_reason_len                 = 0 ;

 int i                                 = 0;
 int int_l_num                             = 0;
 int int_l_curbal_qty                      = 0;
 int int_l_posntype_count                  = 0;
 int int_l_rusafek_exist                   = 0;

 char **int_l_temp;
 char chr_l_mcsd_instrcode[MCSD_SEC_BELONGTO]    =APL_NULL_STRING;
 char chr_l_mcsd_curbal[MCSD_QTY]                =APL_NULL_STRING;
 char chr_l_mcsd_posntype[MCSD_POSNTYPE]         =APL_NULL_STRING;
 char chr_l_mcsd_acc[CLH_CLIENT_LEN_A]           =APL_NULL_STRING;
 char chr_l_prev_mcsd_acc[CLH_CLIENT_LEN_A]      =APL_NULL_STRING;
 char chr_l_prev_mcsd_instrcode[MCSD_SEC_BELONGTO] =APL_NULL_STRING;
 char chr_l_instrcode_a[APL_INSTRUMENTCODE_LEN]               =APL_NULL_STRING;
 char chr_l_client_a[APL_CLIENT_LENGTH]             =APL_NULL_STRING;
 char chr_l_locncode_c[APL_LOCNCODE_LENGTH]           =APL_NULL_STRING;
 char chr_l_no_acc[CLT_NOREC_ERR_LEN]                =APL_NULL_STRING;
 char chr_l_no_instrcode[DL_SEC_ERR_LEN]             =APL_NULL_STRING;

 char chr_l_buf[BUFFER_LEN]							   = APL_NULL_STRING ;
 char chr_l_str_repname_a[PATH_LENGTH] 	         = APL_NULL_STRING ;
 char chr_l_str_fname[PATH_LENGTH] 	       	   = APL_NULL_STRING ;
 char chr_l_str_log_dir[PATH_LENGTH]	            = APL_NULL_STRING ;

 char chr_l_userid[USERID_A]					   = APL_NULL_STRING ;
 char chr_l_systemdatetime[DATETIME_LEN]= APL_NULL_STRING ;
 char chr_l_format[50]                           = APL_NULL_STRING;
 

 EXEC SQL VAR chr_l_mcsd_instrcode   IS STRING ;
 EXEC SQL VAR chr_l_mcsd_curbal   IS STRING ;
 EXEC SQL VAR chr_l_mcsd_posntype IS STRING ;
 EXEC SQL VAR chr_l_mcsd_acc      IS STRING ;
 EXEC SQL VAR chr_l_instrcode_a        IS STRING ;
 EXEC SQL VAR chr_l_client_a       IS STRING ;
 EXEC SQL VAR chr_l_locncode_c      IS STRING ;


memset(chr_l_userid,			APL_NULL_CHAR,		USERID_A);

 fprintf(p_ptr_log_file,"Entered processtion UplmcsdposnFn\n");
 strcpy(chr_l_userid,argv[3]);

 if(APL_FAILURE == CO_Rtv_RptFileName("MU" ,  
                                    "Upl MCSDPosn" ,
                                    100 ,
                                    argv[5] ,
                                    argv ,
                                    &chr_l_rep_file ,
                                    &l_debug_info_ptr) )
 {
    APL_GOBACK_FAIL
 }


 strcpy(chr_l_uploadfilename,p_uploaddir);
 strcat(chr_l_uploadfilename,chr_p_filename_a);

 l_upl_file = fopen(chr_l_uploadfilename,"r");

 fprintf(p_ptr_log_file,"Upload File Name = %s\n",chr_l_uploadfilename);

 if(l_upl_file==NULL)
 {
   fprintf(p_ptr_log_file,"Error Opening the Error h_file into which the records with improper data are to be written\n");
   return(APL_FAILURE);
 }

	if(APL_FAILURE == CO_RtvSysDtTime(chr_l_systemdatetime,l_debug_info_ptr))
	{
		CO_ProcMonitor(p_ptr_log_file,"Error in retrieving the system chr_date time \n",l_debug_info_ptr,p_intl_env_data_struct_h_e);
		APL_GOBACK_FAIL
	}

 fprintf(p_ptr_log_file,"Starting Scanning Of the File\n");

 strcpy(chr_l_locncode_c,MCSD_LOCN);
 strcpy(chr_l_no_acc,"Account not setup in SMAC");
 strcpy(chr_l_no_instrcode,"Instrurity not setup in SMAC");
 int_l_err_reason_len = (ERR_REASON_LEN);

 
 EXEC SQL DELETE FROM DL_RUSAFEK;
 IS_ANY_ORA_ERROR
 
 if (APL_FAILURE == CBPrintUploadHdrFn(chr_l_rep_file,chr_l_systemdatetime))
 {
	APL_GOBACK_FAIL
 } 

 while(!feof(l_upl_file))
 {
	memset(chr_l_linebuf,APL_NULL_CHAR,MCSD_LINE_LEN);
	fscanf(l_upl_file,"%[^\n]\n",chr_l_linebuf);

   if( !strlen(chr_l_linebuf) && !int_l_reccount ) 
   {
	 fprintf(p_ptr_log_file,"----------------File is empty !------------------\n");
	 fprintf(p_ptr_log_file,"File is empty !\n");
	 break;
   }

 	int_l_reccount++ ;
   
   if (int_l_reccount == 1)
   {
      continue;
   }


	fprintf(p_ptr_log_file,"Scanned %d records\n",int_l_reccount);

	strcat(chr_l_linebuf,",");


  if ( APL_FAILURE == CO_SplitStr(chr_l_linebuf,',',&int_l_num,&int_l_temp))
  {
		APL_GOBACK_FAIL
  }

  strcpy(chr_l_mcsd_instrcode,int_l_temp[1]);
  strcpy(chr_l_mcsd_curbal,int_l_temp[6]);
  strcpy(chr_l_mcsd_posntype,int_l_temp[7]);
  strcpy(chr_l_mcsd_acc,int_l_temp[10]);
  int_l_curbal_qty = atol(chr_l_mcsd_curbal);

  fprintf(p_ptr_log_file,"Instrode:%s   Position:%s  PosnType:%s  Acc:%s  \n",chr_l_mcsd_instrcode,chr_l_mcsd_curbal,chr_l_mcsd_posntype,chr_l_mcsd_acc);


  
  EXEC SQL SELECT count(*) INTO :int_l_posntype_count FROM PRO_SGENSTAT WHERE map_type = 'MCSD_POSN' AND map_val = :chr_l_mcsd_posntype;
  IS_ANY_ORA_ERROR
  fprintf(p_ptr_log_file,"count of postype %s is %d\n",chr_l_mcsd_posntype,int_l_posntype_count);

  	if(int_l_posntype_count)
  	{
    


     if ( strcmp(chr_l_prev_mcsd_acc,chr_l_mcsd_acc))
      {
         memset(chr_l_client_a,NULL,APL_CLIENT_LENGTH);

         EXEC SQL SELECT CLN_CODE INTO :chr_l_client_a FROM MT_CLIENT WHERE trim(CLN_CLH) = trim(:chr_l_mcsd_acc);
         IS_ANY_ORA_ERROR

         if (!strcmp(chr_l_client_a,NULL))
         {
				memset(chr_l_format,NULL,50);
				strcat(chr_l_format,"%-17s   %-15s   %+8s   %+");
				strcat(chr_l_format,int_l_err_reason_len);
				strcat(chr_l_format,"s\n");

				fprintf(chr_l_rep_file,chr_l_format,
											chr_l_mcsd_acc,chr_l_mcsd_instrcode,chr_l_mcsd_posntype,chr_l_no_acc);
            if (++int_l_rep_linecount == PAGELENGTH)
				{
					fprintf(chr_l_rep_file,"");	
					if(APL_FAILURE == CBPrintUploadHdrFn(chr_l_rep_file,chr_l_systemdatetime))
					{
						APL_GOBACK_FAIL
					}
					int_l_rep_linecount = 0;
				}
            fprintf(p_ptr_log_file,"Account %s dosn't exist in SMAC\n",chr_l_mcsd_acc);
  				memset(chr_l_prev_mcsd_acc,NULL,CLH_CLIENT_LEN_A);
  				strcpy(chr_l_prev_mcsd_acc,chr_l_mcsd_acc);
            continue;
         }
      }
		else 
			continue;

    if ( strcmp(chr_l_prev_mcsd_instrcode,chr_l_mcsd_instrcode))
      {
         memset(chr_l_instrcode_a,NULL,APL_INSTRUMENTCODE_LEN);

         EXEC SQL SELECT instr_code INTO :chr_l_instrcode_a FROM MT_INSTRUMENT WHERE trim(CMP_CODE) = trim(:chr_l_mcsd_instrcode);
         IS_ANY_ORA_ERROR

         if (!strcmp(chr_l_instrcode_a,NULL))
         {
				memset(chr_l_format,NULL,50);
				strcat(chr_l_format,"%-17s   %-15s   %+8s   %+");
				strcat(chr_l_format,int_l_err_reason_len);
				strcat(chr_l_format,"s\n");

				fprintf(chr_l_rep_file,chr_l_format,
											chr_l_mcsd_acc,chr_l_mcsd_instrcode,chr_l_mcsd_posntype,chr_l_no_instrcode);
            if (++int_l_rep_linecount == PAGELENGTH)
				{
					fprintf(chr_l_rep_file,"");	
					if(APL_FAILURE == CBPrintUploadHdrFn(chr_l_rep_file,chr_l_systemdatetime))
					{
						APL_GOBACK_FAIL
					}
					int_l_rep_linecount = 0;
				}
            fprintf(p_ptr_log_file,"Instrode %s dosn't exist in SMAC\n",chr_l_mcsd_instrcode);
  				memset(chr_l_prev_mcsd_instrcode,NULL,MCSD_SEC_BELONGTO);
  				strcpy(chr_l_prev_mcsd_instrcode,chr_l_mcsd_instrcode);
            continue;
         }
      }
	  else
		continue;

      

      EXEC SQL SELECT count(*) INTO :int_l_rusafek_exist FROM DL_RUSAFEK
               WHERE trim(client) = trim(:chr_l_client_a)
               AND trim(instr_code) = trim(:chr_l_instrcode_a)
               AND location_cd = :chr_l_locncode_c
               AND trim(ST_REG_NO) = trim(:chr_l_mcsd_posntype);
      IS_ANY_ORA_ERROR

      if (!int_l_rusafek_exist)
      {
         EXEC SQL INSERT INTO DL_RUSAFEK
                  VALUES (:chr_l_client_a,:chr_l_instrcode_a,:chr_l_mcsd_posntype,:chr_l_locncode_c,0,0,:int_l_curbal_qty,NULL,NULL);

         IS_ANY_ORA_ERROR
      }
      else
      {
         EXEC SQL UPDATE DL_RUSAFEK
                  SET safekeep_pos = safekeep_pos + :int_l_curbal_qty
                  WHERE trim(client) = trim(:chr_l_client_a)
                  AND trim(instr_code) = trim(:chr_l_instrcode_a)
                  AND location_cd = :chr_l_locncode_c
                  AND trim(ST_REG_NO) = trim(:chr_l_mcsd_posntype);

         IS_ANY_ORA_ERROR
      }
   }



 }


 if (int_l_rep_linecount == 0)
 {
 		fprintf(chr_l_rep_file,"-------------------- Nothing to Report ------------------\n");        
 }
 for (i=0;i<REP_LEN;fprintf(chr_l_rep_file, "="),i++);

 APL_GOBACK_SUCCESS
 
 RETURN_SUCCESS :
 {
  fprintf(p_ptr_log_file,"Leaving processtion UplmcsdposnFn successfully\n");
  CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion UplmcsdposnFn successfully",NULL,NULL);
  CO_FreeErrLst(l_debug_info_ptr);
  fflush(p_ptr_log_file);
  fclose(l_upl_file);
  fclose(chr_l_rep_file);
  return(APL_SUCCESS);
 }

 RETURN_FAILURE :
 {
	fprintf(p_ptr_log_file,"Leaving processtion UplmcsdPosnFn with failure\n");
   CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion UplmcsdposnFn with failure",l_debug_info_ptr,NULL);
   CO_ProcMonitor(p_ptr_log_file,"Leaving processtion UplmcsdposnFn with failure",l_debug_info_ptr,NULL);
	CO_FreeErrLst(l_debug_info_ptr);
	fflush(p_ptr_log_file);
   fclose(l_upl_file);
   fclose(chr_l_rep_file);
	return(APL_FAILURE);
 }

}


int  CBPrintUploadHdrFn(FILE *fp,char *p_today)
{
   int i                  = 0;
   int int_l_pos              = 0;
   int int_l_num              = 0;
   int int_l_rep_len          = 0;

   char **int_l_temp;
   char *chr_l_space          					= APL_NULL_STRING;
   char chr_l_date[11]        					= APL_NULL_STRING;
   static short l_pg_no   					= 0;
   char chr_l_format_str[14]  					= APL_NULL_STRING;
	char chr_l_res_hdr_fmt[5]               = APL_NULL_STRING;


   int_l_rep_len = REP_LEN;
   l_pg_no++;
   int_l_pos = (int_l_rep_len - 26)/2;
   strcat(chr_l_format_str,"\n%");
   strcat(chr_l_format_str, ltoa(int_l_pos));
   strcat(chr_l_format_str, "s");
   fprintf(fp,chr_l_format_str,chr_l_space);   
   fprintf(fp, "MCSD FILE EXCEPTION REPORT"); 
   fprintf(fp,chr_l_format_str,chr_l_space);
   for (i=0;i<26;fprintf(fp, "-"),i++);
   fprintf(fp, "\n");

   memset(chr_l_date,NULL,11);
   strncpy(chr_l_date,p_today,10);

   memset(chr_l_format_str,NULL,14);
        strcat(chr_l_format_str, "%");
        strcat(chr_l_format_str, ltoa(int_l_pos));
        strcat(chr_l_format_str, "s%-40s\n");
        fprintf(fp, chr_l_format_str , chr_l_space, g_mt_commonsys_params_struct_h.ca_identname);

   fprintf(fp, "Date: %s", chr_l_date);

   memset(chr_l_format_str,NULL,14);
   strcat(chr_l_format_str,"%");
   strcat(chr_l_format_str, ltoa(int_l_rep_len - 28));
   strcat(chr_l_format_str,"s");
   fprintf(fp,chr_l_format_str,chr_l_space);
   fprintf(fp, "Page %d\n", l_pg_no);
   for (i=0;i<int_l_rep_len;fprintf(fp, "="),i++);
   fprintf(fp, "\n");
   fprintf(fp, "CUSTOMER ACCOUNT   INSTRUMENT NUMBER   POSN TYPE   ");
	fprintf(fp,"REAS");
	memset(chr_l_res_hdr_fmt,NULL,5);
	strcat(chr_l_res_hdr_fmt,"%");
	strcat(chr_l_res_hdr_fmt,ltoa(ERR_REASON_LEN - 6));
	strcat(chr_l_res_hdr_fmt,"s");
	fprintf(fp,chr_l_res_hdr_fmt,chr_l_space);
   memset(chr_l_format_str,NULL,14);
   fprintf(fp,"\n");
   for (i=0;i<int_l_rep_len;fprintf(fp, "="),i++);
   fprintf(fp, "\n");

  RETURN_SUCCESS :
      CO_ProcMonitor(APL_OUT_FILE,"Exiting CBPrintReconHdrFn with success.",NULL,NULL);
      return(APL_SUCCESS);

  RETURN_FAILURE :
      CO_ProcMonitor(APL_OUT_FILE,"Exiting CBPrintReconHdrFn with errors.",NULL,NULL);
      return(APL_FAILURE);
}


