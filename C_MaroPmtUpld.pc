








#include "CO_HostStructdef.h"
#include "Intellect_Common.h"
#include "DL_Interface.h"
#include "DL_AutoSetl.h"
#define FEED_LINERR_LENGTH 310

EXEC SQL INCLUDE SQLCA.H;
int main(int argc,char **argv) //AIX Warning Removal changes
{
   DEBUG_INFO_STRUCT_H *l_debug_info_ptr = (DEBUG_INFO_STRUCT_H *) NULL;
   INTL_ENV_DATA_STRUCT_H l_intl_env_data_h;
   FILE *l_logfile, *l_finifile, *l_ptr_rept_file;
   char **temp;
   int int_num=0;
   char chr_l_hoff_file[PATH_LENGTH]=APL_NULL_STRING;
	char chr_l_rept_file[PATH_LENGTH]=APL_NULL_STRING;
	char chr_l_rep_name[15]=APL_NULL_STRING;
   char chr_l_inifile[PATH_LENGTH] = APL_NULL_STRING;
   struct sqlca sqlca;
   char chr_l_sys_date[11] = APL_NULL_STRING;
	char  chr_l_now[APL_DATE_LEN]     = APL_NULL_STRING;
   int int_retval=0;

   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;


   char chr_uname[APL_USERID_LEN] = APL_NULL_STRING;
   char chr_custody_id_b[APL_USERID_LEN] = APL_NULL_STRING;
   char chr_passwd[APL_USERID_LEN] = APL_NULL_STRING;

   EXEC SQL BEGIN DECLARE SECTION;
   int int_l_count =0;
   EXEC SQL END DECLARE SECTION;

   EXEC SQL VAR chr_l_sys_date         IS STRING;
   EXEC SQL VAR chr_uname IS STRING;
   EXEC SQL VAR chr_passwd IS STRING;
	  EXEC SQL VAR chr_g_restart_data is string;

   memset(&l_intl_env_data_h, NULL, sizeof(INTL_ENV_DATA_STRUCT_H));
   strcpy(l_intl_env_data_h.usr, argv[3]);
   strcpy(l_intl_env_data_h.h_mode, argv[4]);
   strcpy(l_intl_env_data_h.processtion, argv[5]);
   strcpy(l_intl_env_data_h.auth_req, argv[6]);
   strcpy(l_intl_env_data_h.subprocess, argv[7]);
   strcpy(l_intl_env_data_h.h_process, argv[8]);



   strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
   strcat(chr_l_inifile,"intl_sun.cfg");
   if ( ( l_finifile=fopen(chr_l_inifile,"r") ) == NULL)
   {
	APL_GOBACK_FAIL
   }
   sqlca.sqlcode=0;
   APL_FETCH_DB_LOGIN_DETAILS(l_finifile, chr_custody_id_b, chr_uname, chr_passwd, APL_OUT_FILE, &l_debug_info_ptr)
   IS_ANY_ORA_ERROR
   EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;
  
  IS_ANY_ORA_ERROR

    
 
			        

    if (APL_FAILURE == CO_Rtv_RptFileName( "MU",
				"REPORT FILE ",
			        100,
					  argv[5],
			        argv,
			        &l_ptr_rept_file,
			        &l_debug_info_ptr ))	
   {
	APL_GOBACK_FAIL;
   }
    if (APL_FAILURE == CO_Rtv_RptFileName( "MA",
				APL_LOGFILE_DESC,
			        100,
					  argv[5],
			        argv,
			        &l_logfile,
			        &l_debug_info_ptr ))	
   {
	APL_GOBACK_FAIL;
   }

   fprintf(l_logfile,"argv[0] : %s\n",argv[0]);
   fprintf(l_logfile,"argv[1] : %s\n",argv[1]);
   fprintf(l_logfile,"argv[2] : %s\n",argv[2]);
   fprintf(l_logfile,"argv[3] : %s\n",argv[3]);
   fprintf(l_logfile,"argv[4] : %s\n",argv[4]);
   fprintf(l_logfile,"argv[5] : %s\n",argv[5]);
   fprintf(l_logfile,"argv[6] : %s\n",argv[6]);
   fprintf(l_logfile,"argv[7] : %s\n",argv[7]);
   fprintf(l_logfile,"argv[8] : %s\n",argv[8]);
   fprintf(l_logfile,"argv[9] : %s\n",argv[9]);


   if ( APL_FAILURE == CO_ReadToken(l_finifile,
				    "INTL_UPL_PATH",
				    chr_l_hoff_file,
				    &l_debug_info_ptr ))
    {
	fprintf(l_logfile,"\nReturning unsuccessfully from CO_ReadToken\n");
	APL_GOBACK_FAIL
    }
   if (fclose(l_finifile))
   {
	APL_GOBACK_FAIL;
   }
   if (sqlca.sqlcode > 0)
   {
      APL_GOBACK_FAIL;
   }
   else 
   {
   if (APL_FAILURE == CO_SplitStr( argv[9],
				    '|',
				    &int_num,
				    &temp ))
   {
	fprintf(l_logfile,"Returns unsuccessfully from CO_SplitStr\n");
   }
   if (int_num==0)
   {
	fprintf(l_logfile,"\n Zero argments \n");
   }
     fprintf(l_logfile,"Program Name : %s\n",argv[0]);
     fprintf(l_logfile,"KEY          : %s\n",argv[1]);
     fprintf(l_logfile,"START DATE   : %s\n",argv[2]);

     EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
     FROM SYS_BATCHPROC
     WHERE PROCESS_NAME=:argv[0]
     AND   PROC_INIT=:argv[1]
     AND   STARTDATE=:argv[2]
     AND   STATUS='started'
     FOR UPDATE OF PROCESSING_STATUS,STATUS; 

   if(APL_ZERO_RESULT_SET)
   {
      CO_ProcMonitor(l_logfile,"E:No entry in batch_in_proc\n",NULL,NULL);
      APL_GOBACK_FAIL
   }

   if(APL_FAILURE == CO_RtvSysDt(chr_l_sys_date,&l_debug_info_ptr))//Added & for AIX Migration Changes
   {
   fprintf(l_logfile,"Failed to get System Date \n");
   APL_GOBACK_FAIL
   }
   EXEC SQL SELECT to_char(SYS_DATE,'DD/MM/YYYY') into :chr_l_sys_date FROM PRO_SYS_DATE;

   EXEC SQL SELECT count(*) into :int_l_count
   FROM DL_MAROCLEAR 
   WHERE  UPLOAD_DATE=:chr_l_sys_date;

   strcat(chr_l_hoff_file,temp[1]);
   if (int_l_count == 0)
   {
   	int_retval=ReadRecord(chr_l_hoff_file,chr_l_sys_date,l_logfile,&l_debug_info_ptr);
	
		if (int_retval == 0)
		{
			fprintf(l_logfile,"\nCould not Open the h_file\n");
			APL_GOBACK_FAIL 
		}

		
		fprintf(l_logfile,"The return chr_value is : %d\n",int_retval);
	if (int_retval == 0)
		{
		fprintf(l_logfile,"\n 2:Could not OPen the h_file :\n");
		APL_GOBACK_FAIL
		}
		
   }
   else 
	fprintf(l_logfile,"Not uploading the h_file as the processtion is being invoked for the second time of the day.\n");
   int_retval=PrematchRecord(chr_l_sys_date,l_logfile,&l_debug_info_ptr,&l_intl_env_data_h); 
  
	
 	int_retval=GenCmaroclDetails(chr_l_sys_date,l_ptr_rept_file,&l_debug_info_ptr,&l_intl_env_data_h); 
  }
APL_GOBACK_SUCCESS //Added for AIX Migration Changes
  RETURN_SUCCESS : 
	  EXEC SQL UPDATE SYS_BATCHPROC
	  SET  status = 'completed'
	  WHERE PROCESS_NAME=:argv[0]
	  AND   PROC_INIT=:argv[1]
	  AND   STARTDATE=:argv[2]
	  AND   STATUS='started';

  	  EXEC SQL COMMIT WORK RELEASE;			   
	  fprintf(l_logfile,"Successfully Exiting the program C_MaroPmtUpld\n"); 
	  CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
	  CO_Proc_RptClose(l_ptr_rept_file, &l_debug_info_ptr);
	  exit(APL_SUCCESS);

  RETURN_FAILURE :
  	  EXEC SQL COMMIT WORK RELEASE;			   
	  fprintf(l_logfile,"Unsuccessfully Exiting the program C_MaroPmtUpld\n"); 
	  CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
	  CO_Proc_RptClose(l_ptr_rept_file, &l_debug_info_ptr);
	  exit(APL_FAILURE);
}

 


int ReadRecord(char *p_hoff_file,char *chr_p_sys_date,FILE *p_logfile, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
FILE *l_fhoff_file;
FILE *l_logfile;
char *chr_l_hoff_file;
char chr_tempbuff_a[FEED_LINERR_LENGTH] = APL_NULL_STRING;
char chr_l_sys_date[11]=APL_NULL_STRING;
char chr_l_handoff_line[FEED_LINERR_LENGTH] = APL_NULL_STRING;
int int_retval=0;

l_logfile=p_logfile;

chr_l_hoff_file=p_hoff_file;
strcpy(chr_l_sys_date,chr_p_sys_date);
   if ( ( l_fhoff_file=fopen(chr_l_hoff_file,"r") ) == NULL)
	{ 
	 fprintf(l_logfile,"Could not open the handoff h_file \n");
	 return(0);
   	}
   else  { 
	 fprintf(l_logfile,"Opened the handoff h_file \n");
	 }

fgets(chr_tempbuff_a,FEED_LINERR_LENGTH,l_fhoff_file);     
fgets(chr_tempbuff_a,FEED_LINERR_LENGTH,l_fhoff_file);     
for ( ; ; )
	{
	strcpy(chr_l_handoff_line,chr_tempbuff_a);	
	fgets(chr_tempbuff_a,FEED_LINERR_LENGTH,l_fhoff_file);
	    int_retval=ParseLine(chr_l_handoff_line,chr_l_sys_date,l_logfile,l_debug_info_ptr);
	if (feof(l_fhoff_file))
	{
	    break;
	}
	}

fclose(l_fhoff_file);
return(1);
}


 



int ParseLine(char *p_handoff_line,char *chr_p_sys_date,FILE *p_logfile,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
DL_DEAL_MARCLR_STRUCT_H l_dl_deal_marclr_struct_h;
DL_DEAL_MARCLR_STRUCT_I l_dl_deal_marclr_struct_i;
FILE *l_logfile;
struct sqlca sqlca;
char chr_l_handoff_line[FEED_LINERR_LENGTH]=APL_NULL_STRING;
char int_l_temp[15]=APL_NULL_STRING;
char chr_l_sys_date[11]=APL_NULL_STRING;
EXEC SQL BEGIN DECLARE SECTION;
   int int_l_count = 0;
EXEC SQL END DECLARE SECTION;

EXEC SQL VAR l_dl_deal_marclr_struct_h.h_temp1 IS STRING;
EXEC SQL VAR l_dl_deal_marclr_struct_h.h_instr_isin IS STRING;
EXEC SQL VAR l_dl_deal_marclr_struct_h.h_temp2 IS STRING;
EXEC SQL VAR l_dl_deal_marclr_struct_h.h_temp3 IS STRING;
EXEC SQL VAR l_dl_deal_marclr_struct_h.h_temp4 IS STRING;
EXEC SQL VAR l_dl_deal_marclr_struct_h.h_broker_identity IS STRING;
EXEC SQL VAR l_dl_deal_marclr_struct_h.h_temp5 IS STRING;
EXEC SQL VAR l_dl_deal_marclr_struct_h.h_rec_del IS STRING;
EXEC SQL VAR l_dl_deal_marclr_struct_h.h_temp6 IS STRING;
EXEC SQL VAR l_dl_deal_marclr_struct_h.h_dlt IS STRING;
EXEC SQL VAR l_dl_deal_marclr_struct_h.h_temp7 IS STRING;
EXEC SQL VAR l_dl_deal_marclr_struct_h.h_dl_client IS STRING;
EXEC SQL VAR l_dl_deal_marclr_struct_h.h_mcl_ref IS STRING;
sqlca.sqlcode = 0;



l_logfile=p_logfile;
strcpy(chr_l_sys_date,chr_p_sys_date);
strcpy(chr_l_handoff_line,p_handoff_line);


strncpy(l_dl_deal_marclr_struct_h.h_temp1,chr_l_handoff_line,10);
strncpy(l_dl_deal_marclr_struct_h.h_instr_isin,chr_l_handoff_line+10,12);
strncpy(l_dl_deal_marclr_struct_h.h_temp2,chr_l_handoff_line+22,22);

strncpy(int_l_temp,chr_l_handoff_line+44,9);
int_l_temp[9]='\0';
l_dl_deal_marclr_struct_h.h_qty=atoi(int_l_temp);

strncpy(int_l_temp,chr_l_handoff_line+53,10);
int_l_temp[10]='\0';
l_dl_deal_marclr_struct_h.h_pr=atoi(int_l_temp);

strncpy(int_l_temp,chr_l_handoff_line+63,13);
int_l_temp[13]='\0';
l_dl_deal_marclr_struct_h.h_grossamount=atoi(int_l_temp);


strncpy(l_dl_deal_marclr_struct_h.h_temp3,chr_l_handoff_line+76,1);

strncpy(int_l_temp,chr_l_handoff_line+77,10);
int_l_temp[10]='\0';
l_dl_deal_marclr_struct_h.h_brokercomm=atoi(int_l_temp);

strncpy(l_dl_deal_marclr_struct_h.h_temp4,chr_l_handoff_line+87,31);


strncpy(int_l_temp,chr_l_handoff_line+118,13);
int_l_temp[13]='\0';
l_dl_deal_marclr_struct_h.h_netamount=atoi(int_l_temp);

strncpy(l_dl_deal_marclr_struct_h.h_broker_identity,chr_l_handoff_line+131,11);
strncpy(l_dl_deal_marclr_struct_h.h_temp5,chr_l_handoff_line+142,23);
strncpy(l_dl_deal_marclr_struct_h.h_rec_del,chr_l_handoff_line+165,1);
strncpy(l_dl_deal_marclr_struct_h.h_temp6,chr_l_handoff_line+166,10);
strncpy(l_dl_deal_marclr_struct_h.h_dlt,chr_l_handoff_line+176,10);
strncpy(l_dl_deal_marclr_struct_h.h_temp7,chr_l_handoff_line+186,86);
strncpy(l_dl_deal_marclr_struct_h.h_dl_client,chr_l_handoff_line+272,24);
strncpy(l_dl_deal_marclr_struct_h.h_mcl_ref,chr_l_handoff_line+296,10);


l_dl_deal_marclr_struct_h.h_temp1[10]='\0';
l_dl_deal_marclr_struct_h.h_instr_isin[12]='\0';
l_dl_deal_marclr_struct_h.h_temp2[22]='\0';
l_dl_deal_marclr_struct_h.h_temp3[1]='\0';
l_dl_deal_marclr_struct_h.h_temp4[31]='\0';
l_dl_deal_marclr_struct_h.h_broker_identity[11]='\0';
l_dl_deal_marclr_struct_h.h_temp5[23]='\0';
l_dl_deal_marclr_struct_h.h_rec_del[1]='\0';
l_dl_deal_marclr_struct_h.h_temp6[10]='\0';
l_dl_deal_marclr_struct_h.h_dlt[10]='\0';
l_dl_deal_marclr_struct_h.h_temp7[86]='\0';
l_dl_deal_marclr_struct_h.h_dl_client[24]='\0';
l_dl_deal_marclr_struct_h.h_mcl_ref[10]='\0';
l_dl_deal_marclr_struct_h.h_error_cd=NULL;
strcpy(l_dl_deal_marclr_struct_h.h_upld_date,chr_l_sys_date);



l_dl_deal_marclr_struct_i.i_temp1=0;
l_dl_deal_marclr_struct_i.i_instr_isin=0;
l_dl_deal_marclr_struct_i.i_temp2=0;
l_dl_deal_marclr_struct_i.i_temp3=0;
l_dl_deal_marclr_struct_i.i_temp4=0;
l_dl_deal_marclr_struct_i.i_broker_identity=0;
l_dl_deal_marclr_struct_i.i_temp5=0;
l_dl_deal_marclr_struct_i.i_rec_del=0;
l_dl_deal_marclr_struct_i.i_temp6=0;
l_dl_deal_marclr_struct_i.i_dlt=0;
l_dl_deal_marclr_struct_i.i_temp7=0;
l_dl_deal_marclr_struct_i.i_dl_client=0;
l_dl_deal_marclr_struct_i.i_mcl_ref=0;
l_dl_deal_marclr_struct_i.i_qty=0;
l_dl_deal_marclr_struct_i.i_pr=0;
l_dl_deal_marclr_struct_i.i_grossamount=0;
l_dl_deal_marclr_struct_i.i_brokercomm=0;
l_dl_deal_marclr_struct_i.i_netamount=0;

EXEC SQL DELETE DL_MAROCLEAR
	 WHERE CLIENT=:l_dl_deal_marclr_struct_h.h_dl_client
         AND DEAL_DATE=:l_dl_deal_marclr_struct_h.h_dlt
         AND INSTR_ISIN=:l_dl_deal_marclr_struct_h.h_instr_isin
         AND BROKER_IDENTITY=:l_dl_deal_marclr_struct_h.h_broker_identity
			AND MCL_REF=:l_dl_deal_marclr_struct_h.h_mcl_ref
         AND ERROR_CD =4;  


EXEC SQL INSERT INTO DL_MAROCLEAR VALUES (:l_dl_deal_marclr_struct_h:l_dl_deal_marclr_struct_i);
EXEC SQL COMMIT WORK;
if (sqlca.sqlcode > 0)
    return(APL_FAILURE);

return(APL_SUCCESS);
}

 

int PrematchRecord(char *chr_p_sys_date,FILE *p_logfile,DEBUG_INFO_STRUCT_H **l_debug_info_ptr,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h)
{
char chr_l_sys_date[11]=APL_NULL_STRING;
FILE *l_logfile;
int int_retval = 0;
int *int_l_p_qty;
double *l_p_netamount;
char temp[30]=APL_NULL_STRING;
EXEC SQL BEGIN DECLARE SECTION;
	char chr_l_client_a[25]=APL_NULL_STRING;
	char chr_l_brkref[12]=APL_NULL_STRING;
	char chr_l_isin[13]=APL_NULL_STRING;
	char chr_l_recdel[2]=APL_NULL_STRING;
	char chr_l_trdt_a[11]=APL_NULL_STRING;
	int l_quantity = 0;
	double l_netamount = 0;
	int int_l_count = 0;
	short  i_dl_client=0;
	short  i_broker_identity=0;
	short  i_instr_isin=0;
	short  i_dlt=0;
	short  i_rec_del=0;
	short  i_qty=0;
	short  i_netamount=0;

EXEC SQL VAR chr_l_client_a IS STRING; 
EXEC SQL VAR chr_l_brkref IS STRING; 
EXEC SQL VAR chr_l_isin IS STRING; 
EXEC SQL VAR chr_l_trdt_a IS STRING; 
EXEC SQL VAR chr_l_recdel IS STRING; 
EXEC SQL END DECLARE SECTION;

l_logfile=p_logfile;

strcpy(chr_l_sys_date,chr_p_sys_date);

EXEC SQL SELECT count(*) into :int_l_count
			FROM DL_MAROCLEAR
			WHERE UPLOAD_DATE=:chr_l_sys_date; 

if (int_l_count > 0)      
{
          EXEC SQL DECLARE prematch_cursor1 CURSOR FOR
          SELECT ltrim(rtrim(CLIENT)),ltrim(rtrim(BROKER_IDENTITY)),ltrim(rtrim(INSTR_ISIN)),ltrim(rtrim(DEAL_DATE)),
		 ltrim(rtrim(REC_DEL)),SUM(QTY),sum(NET_AMOUNT)
		  FROM DL_MAROCLEAR
		  WHERE ERROR_CD != 4
		  AND UPLOAD_DATE=:chr_l_sys_date
		  GROUP BY CLIENT,BROKER_IDENTITY,INSTR_ISIN,DEAL_DATE,REC_DEL
		  ORDER BY REC_DEL;
}
else     
{
	EXEC SQL DECLARE prematch_cursor2 CURSOR FOR
	SELECT ltrim(rtrim(CLIENT)),ltrim(rtrim(BROKER_IDENTITY)),ltrim(rtrim(INSTR_ISIN)),ltrim(rtrim(DEAL_DATE)),
	       ltrim(rtrim(REC_DEL)),SUM(QTY),sum(NET_AMOUNT)
		  FROM DL_MAROCLEAR
		  WHERE (ERROR_CD = NULL) OR (ERROR_CD = 0)
		  GROUP BY CLIENT,BROKER_IDENTITY,INSTR_ISIN,DEAL_DATE,REC_DEL
		  ORDER BY REC_DEL;
}
if (int_l_count > 0) 
{
EXEC SQL OPEN prematch_cursor1;
}
else
{
EXEC SQL OPEN prematch_cursor2;
}

for (;;)
{
	if (int_l_count > 0)
	{
	EXEC SQL FETCH prematch_cursor1 INTO :chr_l_client_a:i_dl_client,
					    :chr_l_brkref:i_broker_identity,
					    :chr_l_isin:i_instr_isin,
					    :chr_l_trdt_a:i_dlt,
					    :chr_l_recdel:i_rec_del,
					    :l_quantity:i_qty,
       				 :l_netamount:i_netamount; 
	}
	else
	{
	EXEC SQL FETCH prematch_cursor2 INTO :chr_l_client_a:i_dl_client,
					    :chr_l_brkref:i_broker_identity,
					    :chr_l_isin:i_instr_isin,
					    :chr_l_trdt_a:i_dlt,
					    :chr_l_recdel:i_rec_del,
					    :l_quantity:i_qty,
       				 :l_netamount:i_netamount; 
	}
	if (APL_ZERO_RESULT_SET) break;
	int_l_p_qty=&l_quantity;
	l_p_netamount=&l_netamount;
	fprintf(l_logfile,"THE QTY IS : %d \n",l_quantity);
	//fprintf(l_logfile,"THE NET AMOUNT IS : %ld \n",l_netamount);Changes done for AIX Migration
	fprintf(l_logfile,"THE NET AMOUNT IS : %lf \n",l_netamount);
	fprintf(l_logfile,"The cumulative quantity is : %d\n",*int_l_p_qty);
	fprintf(l_logfile,"The trade details  : %s %s %s %s %s %d\n",chr_l_client_a,chr_l_brkref,chr_l_isin,chr_l_trdt_a,chr_l_recdel,*int_l_p_qty);
	int_retval=ConfirmTrade(chr_l_client_a,chr_l_brkref,chr_l_isin,chr_l_trdt_a,chr_l_recdel,int_l_p_qty,l_p_netamount,l_logfile,l_debug_info_ptr,p_intl_envdatastruct_h); 

}
	if (int_l_count > 0)
	{
	EXEC SQL CLOSE prematch_cursor1;
	}
	else
	{
	EXEC SQL CLOSE prematch_cursor2;
	}
return(APL_SUCCESS);
}

 

int ConfirmTrade(char *chr_p_client,char *p_brkref,char *chr_p_isin,char *p_dealdate,char *p_recdel,int *p_quantity,double *p_netamt, FILE *p_logfile,
		DEBUG_INFO_STRUCT_H **l_debug_info_ptr,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h)
{
DL_DEAL_PMTDET_STRUCT_H     l_dl_deal_pmtdet_struct_ha;
SYS_DL_DEAL_STRUCT_H *l_sys_dl_deal_struct_hj = NULL;
SYS_DL_DEAL_STRUCT_I l_sys_dl_deal_struct_if; 
FILE *l_logfile;

char chr_l_client_a[25]=APL_NULL_STRING;
char chr_l_brkref[12]=APL_NULL_STRING;
char chr_l_isin[13]=APL_NULL_STRING;
char chr_l_recdel[2]=APL_NULL_STRING;
char chr_l_trdt_a[11]=APL_NULL_STRING;
char chr_l_instrcode_a[9]=APL_NULL_STRING;
char chr_l_sys_date[APL_DATE_LEN]=APL_NULL_STRING;

int int_retval=0;
int l_quantity=0,int_l_err_code=0;
int int_l_count=0;
EXEC SQL BEGIN DECLARE SECTION;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_dl_client           IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_indentity_no             IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_dlt              IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_setldt          IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_ex_arena           IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_instrdate             IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_moneydate           IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_domcpclt_cd           IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_isspotdl         IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_dlfromord        IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_entry         IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_reapired_ind         IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_domcp_custodyclt        IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_countclt          IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_countcltnm        IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_clientof         IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_custinfo          IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_fx_reqd            IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_ispymtlocal        IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_verfied_with           IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_brkrno          IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_fail_cd          IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_failinfo          IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_ispart_         IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_report_at_eom_ind          IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_billdate            IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_locindentity_no          IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_instruct_person         IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_dealcd            IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_instr_code            IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_currencycode           IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_classofdl         IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_origindentity_no         IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_newdt           IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_maker             IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_maker_dt           IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_deal_status      IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_access_stamp      IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_info1             IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_loccode          IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_reginstr_ind          IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_pos_stat       IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_status_reg         IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_confdate            IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_matchindentity_no        IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_markfaildate        IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_candropdate         IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_checker           IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_checker_dt         IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_instrconv_ind         IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_ndsbldate           IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_lrdltype         IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_ndsdate             IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_ublckdate           IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_delrecdate          IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_lastregdate         IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_lr_chkdate          IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_lr_confdate         IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_lr_instrdate          IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_tmpoutdate          IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_tmpretdate          IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_transmitdate        IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_hostdate            IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_lr_ndsbldate        IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_lr_ndsdate          IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_lr_ublckdate        IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_clt_reqdel_flag    IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_mod_hispos_ind      IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_updhispos_date      IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_cash_client      IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_allow_part_s    IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_instruct_personnm   		IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_clientofcode    	IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_inter_med_person    		IS STRING; 
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_inter_med_personnm    	IS STRING; 
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_fxccy    	   IS STRING; 
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_uniq_ident_no    IS STRING;  
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_548cnt      IS STRING;  
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_exp_setl_date   	   IS STRING; 
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_misinfo           IS STRING; 
EXEC SQL VAR chr_l_isin IS STRING;
EXEC SQL VAR chr_l_instrcode_a IS STRING;
EXEC SQL VAR chr_l_client_a IS STRING;
EXEC SQL VAR chr_l_sys_date IS STRING;
double l_netamount=0;
EXEC SQL END DECLARE SECTION;

  l_sys_dl_deal_struct_if.i_dl_client        =0 ;
  l_sys_dl_deal_struct_if.i_indentity_no  =0 ;
  l_sys_dl_deal_struct_if.i_dlt           =0 ;
  l_sys_dl_deal_struct_if.i_setldt       =0 ;
  l_sys_dl_deal_struct_if.i_ex_arena        =0 ;
  l_sys_dl_deal_struct_if.i_instrdate  =0 ;
  l_sys_dl_deal_struct_if.i_moneydate        =0 ;
  l_sys_dl_deal_struct_if.i_domcpclt_cd        =0 ;
  l_sys_dl_deal_struct_if.i_isspotdl      =0 ;
  l_sys_dl_deal_struct_if.i_dlfromord     =0 ;
  l_sys_dl_deal_struct_if.i_entry      =0 ;
  l_sys_dl_deal_struct_if.i_reapired_ind      =0 ;
  l_sys_dl_deal_struct_if.i_domcp_custodyclt     =0 ;
  l_sys_dl_deal_struct_if.i_countclt       =0 ;
  l_sys_dl_deal_struct_if.i_countcltnm     =0 ;
  l_sys_dl_deal_struct_if.i_clientof      =0 ;
  l_sys_dl_deal_struct_if.i_custinfo       =0 ;
  l_sys_dl_deal_struct_if.i_fx_reqd         =0 ;
  l_sys_dl_deal_struct_if.i_ispymtlocal     =0 ;
  l_sys_dl_deal_struct_if.i_verfied_with        =0 ;
  l_sys_dl_deal_struct_if.i_brkrno       =0 ;
  l_sys_dl_deal_struct_if.i_failreas_cd       =0 ;
  l_sys_dl_deal_struct_if.i_failinfo       =0 ;
  l_sys_dl_deal_struct_if.i_ispart_      =0 ;
  l_sys_dl_deal_struct_if.i_report_at_eom_ind       =0 ;
  l_sys_dl_deal_struct_if.i_billdate         =0 ;
  l_sys_dl_deal_struct_if.i_locindentity_no       =0 ;
  l_sys_dl_deal_struct_if.i_instruct_person      =0 ;
  l_sys_dl_deal_struct_if.i_dealcd         =0 ;
  l_sys_dl_deal_struct_if.i_instr_code         =0 ;
  l_sys_dl_deal_struct_if.i_currencycode        =0 ;
  l_sys_dl_deal_struct_if.i_classofdl      =0 ;
  l_sys_dl_deal_struct_if.i_origindentity_no      =0 ;
  l_sys_dl_deal_struct_if.i_newdt        =0 ;
  l_sys_dl_deal_struct_if.i_maker  =0 ;
  l_sys_dl_deal_struct_if.i_maker_dt        =0 ;
  l_sys_dl_deal_struct_if.i_deal_status   =0 ;
  l_sys_dl_deal_struct_if.i_access_stamp   =0 ;
  l_sys_dl_deal_struct_if.i_info1  =0 ;
  l_sys_dl_deal_struct_if.i_loccode       =0 ;
  l_sys_dl_deal_struct_if.i_reginstr_ind       =0 ;
  l_sys_dl_deal_struct_if.i_status_pos    =0 ;
  l_sys_dl_deal_struct_if.i_status_reg      =0 ;
  l_sys_dl_deal_struct_if.i_confdate         =0 ;
  l_sys_dl_deal_struct_if.i_matchindentity_no     =0 ;
  l_sys_dl_deal_struct_if.i_markfaildate     =0 ;
  l_sys_dl_deal_struct_if.i_candropdate      =0 ;
  l_sys_dl_deal_struct_if.i_checker        =0 ;
  l_sys_dl_deal_struct_if.i_checker_dt      =0 ;
  l_sys_dl_deal_struct_if.i_instrconv_ind      =0 ;
  l_sys_dl_deal_struct_if.i_ndsbldate        =0 ;
  l_sys_dl_deal_struct_if.i_lrdltype      =0 ;
  l_sys_dl_deal_struct_if.i_ndsdate  =0 ;
  l_sys_dl_deal_struct_if.i_ublckdate        =0 ;
  l_sys_dl_deal_struct_if.i_delrecdate       =0 ;
  l_sys_dl_deal_struct_if.i_lastregdate      =0 ;
  l_sys_dl_deal_struct_if.i_lr_chkdate       =0 ;
  l_sys_dl_deal_struct_if.i_lr_confdate      =0 ;
  l_sys_dl_deal_struct_if.i_lr_instrdate       =0 ;
  l_sys_dl_deal_struct_if.i_tmpoutdate       =0 ;
  l_sys_dl_deal_struct_if.i_tmpretdate       =0 ;
  l_sys_dl_deal_struct_if.i_transmitdate     =0 ;
  l_sys_dl_deal_struct_if.i_hostdate         =0 ;
  l_sys_dl_deal_struct_if.i_lr_ndsbldate     =0 ;
  l_sys_dl_deal_struct_if.i_lr_ndsdate       =0 ;
  l_sys_dl_deal_struct_if.i_lr_ublckdate     =0 ;
  l_sys_dl_deal_struct_if.i_clt_reqdel_flag =0 ;
  l_sys_dl_deal_struct_if.i_mod_hispos_ind   =0 ;
  l_sys_dl_deal_struct_if.i_updhispos_date   =0 ;
  l_sys_dl_deal_struct_if.i_cash_client   =0 ;
  l_sys_dl_deal_struct_if.i_allow_part_s         =0 ;
  l_sys_dl_deal_struct_if.i_instruct_personnm        =0 ;
  l_sys_dl_deal_struct_if.i_clientofcode     =0 ;
  l_sys_dl_deal_struct_if.i_inter_med_person         =0 ; 
  l_sys_dl_deal_struct_if.i_inter_med_personnm         =0 ; 
  l_sys_dl_deal_struct_if.i_fxccy         =0 ; 
  l_sys_dl_deal_struct_if.i_uniq_ident_no     =0 ; 
  l_sys_dl_deal_struct_if.cnt_548         =0 ; 
  l_sys_dl_deal_struct_if.i_exp_setl_date        =0 ; 
  l_sys_dl_deal_struct_if.i_minstr_isinfo            =0 ; 


*l_debug_info_ptr = (DEBUG_INFO_STRUCT_H *) NULL;
l_logfile=p_logfile;
strcpy(chr_l_client_a,chr_p_client);
strcpy(chr_l_brkref,p_brkref);
strcpy(chr_l_isin,chr_p_isin);
strcpy(chr_l_recdel,p_recdel);
strcpy(chr_l_trdt_a,p_dealdate);
l_quantity=*p_quantity;
l_netamount=*p_netamt;

if ( APL_FAILURE == CO_Chk_AccValid( chr_l_client_a,
                                          'Y',
                                          NULL,
                                          NULL,
                                          NULL,
                                          'Y',
                                          'N',
                                          'N',
                                          'N',
                                          l_debug_info_ptr ) )
       {
        int_l_err_code=11;
        fprintf(l_logfile,"Invalid client\n");
		  APL_GOBACK_FAIL;
       }

sqlca.sqlcode=0;
EXEC SQL SELECT INSTR_CODE INTO :chr_l_instrcode_a
	 FROM MT_INSTRUMENT
	 WHERE ltrim(rtrim(INSTR_ISIN))=:chr_l_isin;
IS_ANY_ORA_ERROR;
fprintf(l_logfile,"The instr_code is : %s\n",chr_l_instrcode_a);

if (sqlca.sqlcode==1403) //AIX -Warning Removal
	fprintf(l_logfile,"The instrument not int_found\n");

if(APL_FAILURE == CO_Chk_InstrValid(chr_l_instrcode_a,'Y','Y','N','N',NULL,NULL,l_debug_info_ptr))
	{
  
	int_l_err_code=16;
	fprintf(l_logfile,"Invalid Instrurity\n");
	APL_GOBACK_FAIL;
	}

sqlca.sqlcode=0;

EXEC SQL DECLARE matching_trade CURSOR FOR
	SELECT * FROM DL_DEAL
	WHERE CLIENT=:chr_l_client_a AND
	INSTR_CODE=:chr_l_instrcode_a AND
	DEAL_STAT not in ('DU','DD') AND
	to_char(DEAL_DATE,'DD/MM/YYYY')=:chr_l_trdt_a;

	EXEC SQL OPEN matching_trade;
	IS_ANY_ORA_ERROR;
	l_sys_dl_deal_struct_hj = (SYS_DL_DEAL_STRUCT_H*)calloc(1,sizeof(SYS_DL_DEAL_STRUCT_H));
   EXEC SQL FETCH matching_trade INTO :l_sys_dl_deal_struct_hj:l_sys_dl_deal_struct_if;  

if (sqlca.sqlcode == 1403)	
    {
        int_l_count=0;
        EXEC SQL SELECT count(*) into :int_l_count
        FROM DL_DEAL
        WHERE to_char(DEAL_DATE,'DD/MM/YYYY')= :chr_l_trdt_a;

        if (int_l_count==0)
        {
        int_l_err_code=19;
        fprintf(l_logfile,"There are no trades having the same trade chr_date \n");
        }
        else
		  {
				
					 int_l_count=0;
					 EXEC SQL SELECT count(*) into :int_l_count
					 FROM DL_DEAL
					 WHERE to_char(DEAL_DATE,'DD/MM/YYYY')= :chr_l_trdt_a AND 
					 CLIENT=:chr_l_client_a;
					  if (int_l_count==0)
					  {
						  int_l_err_code=11;
						  fprintf(l_logfile,"There are no Trades having same Trade chr_date and client\n");
					  }
					  else
					  {
						  int_l_err_code=16;
						  fprintf(l_logfile,"There are no Trades having same Trade chr_date and Instrode\n"); 
					  }
	   	}
		  
		APL_GOBACK_FAIL;
     }




for (;;)
{
	IS_ANY_ORA_ERROR_CURSOR;
   fprintf(l_logfile,"Preematch : %s : %s : %s \n",l_sys_dl_deal_struct_hj->h_dl_client,l_sys_dl_deal_struct_hj->h_indentity_no,l_sys_dl_deal_struct_hj->h_instr_code);
   
   fprintf(l_logfile,"The trade quantity is : %f \n",l_sys_dl_deal_struct_hj->h_qty);
   fprintf(l_logfile,"The cmaroclear quantity is : %d \n",l_quantity);
   if ( CO_RtvSysParams(l_debug_info_ptr) == APL_FAILURE)
   {
   fprintf(l_logfile,"Could not get the System Parameters \n");
   APL_GOBACK_FAIL;
   }

   if ((l_sys_dl_deal_struct_hj->h_qty==l_quantity) && (((chr_l_recdel[0]=='A') && ((!strcmp(l_sys_dl_deal_struct_hj->h_dealcd,APL_DEAL_RF))  
								|| (!strcmp(l_sys_dl_deal_struct_hj->h_dealcd,APL_DEAL_RVP))))
					|| ((chr_l_recdel[0]=='V') && ((!strcmp(l_sys_dl_deal_struct_hj->h_dealcd,APL_DEAL_DF))
								|| (!strcmp(l_sys_dl_deal_struct_hj->h_dealcd,APL_DEAL_DVP))))))
  {
     fprintf(l_logfile,"The allowed_amtdiff is : %d \n",l_mt_core_sys_params_struct_h.allowed_amtdiff);
     fprintf(l_logfile,"The amount is : %f\n",l_sys_dl_deal_struct_hj->h_amt);

     fprintf(l_logfile,"In ConfirmTrade   : %s %s %s %s %s %d\n",chr_l_client_a,chr_l_brkref,chr_l_isin,chr_l_trdt_a,chr_l_recdel,l_quantity);
     fprintf(l_logfile,"The Net amount is : %lf\n",l_netamount);
     fprintf(l_logfile,"The trade amount is : %lf\n",l_sys_dl_deal_struct_hj->h_amt);
     fprintf(l_logfile,"The diff amount is : %lf\n",l_sys_dl_deal_struct_hj->h_amt-l_netamount);

     fprintf(l_logfile,"Environment variables : %s, %s, %s\n",p_intl_envdatastruct_h->usr,p_intl_envdatastruct_h->h_mode,p_intl_envdatastruct_h->processtion);

     if (((l_sys_dl_deal_struct_hj->h_amt - l_netamount) <= l_mt_core_sys_params_struct_h.allowed_amtdiff) ||
	(l_sys_dl_deal_struct_hj->h_dealcd[0]=='1') || (l_sys_dl_deal_struct_hj->h_dealcd[0]=='2'))
     {
        if (!strlen(l_sys_dl_deal_struct_hj->h_fail_cd))
	{
		

		 if (((l_sys_dl_deal_struct_hj->h_dealcd[0]=='2')||(l_sys_dl_deal_struct_hj->h_dealcd[0]=='4'))&&
			 (strlen(l_sys_dl_deal_struct_hj->h_instrdate)!=0))
		 {
			  fprintf(l_logfile,"Client Instruction not tested \n");
			  int_l_err_code=20;
		 }
		 else
		 {
	    EXEC SQL SELECT SYS_DATE into :chr_l_sys_date
	    FROM PRO_SYS_DATE;

	    
	    memset(&l_dl_deal_pmtdet_struct_ha, NULL, sizeof(DL_DEAL_PMTDET_STRUCT_H));
	    strcpy(l_dl_deal_pmtdet_struct_ha.h_dl_client,chr_l_client_a);
	    strcpy(l_dl_deal_pmtdet_struct_ha.h_indentity_no,l_sys_dl_deal_struct_hj->h_indentity_no);
            strcpy(l_dl_deal_pmtdet_struct_ha.h_verfied_with,l_sys_dl_deal_struct_hj->h_verfied_with);
            strcpy(l_dl_deal_pmtdet_struct_ha.h_confdate,chr_l_sys_date);
	    l_dl_deal_pmtdet_struct_ha.h_diffamount=l_sys_dl_deal_struct_hj->h_amt - l_netamount;
	    strcpy(l_dl_deal_pmtdet_struct_ha.h_ispart_,"N");
	    l_dl_deal_pmtdet_struct_ha.h_newquantity = 0;
	    l_dl_deal_pmtdet_struct_ha.h_newamount = 0;
	    strcpy(l_dl_deal_pmtdet_struct_ha.h_newindentity_no, APL_NULL_STRING);
	    strcpy(l_dl_deal_pmtdet_struct_ha.h_newlocindentity_no, APL_NULL_STRING);
	    l_dl_deal_pmtdet_struct_ha.h_grossamount = l_netamount;
	    int_retval=UpdPmtTrade(&l_dl_deal_pmtdet_struct_ha,l_sys_dl_deal_struct_hj,&int_l_err_code,l_logfile,p_intl_envdatastruct_h,l_debug_info_ptr);

		          
         if (int_l_err_code == 4)
         break;	

		 fprintf(l_logfile,"The Error h_code is : %d\n",int_l_err_code);
		 }
       }
        else
	{
	   fprintf(l_logfile,"Client Instruction not tested \n");
	   int_l_err_code=12;
	
	}



     }    
     else
     {
	int_l_err_code=31;
	fprintf(l_logfile,"Incorrect transaction amount\n");
   
     }





  }       
  else if (l_sys_dl_deal_struct_hj->h_qty != l_quantity) 
  {
	int_l_err_code=17;
	fprintf(l_logfile,"The Error h_code %d \n",int_l_err_code);
	fprintf(l_logfile,"The Quantity does not match \n");
 
  }
  else     
  {
	int_l_err_code=18;
	fprintf(l_logfile,"The Error h_code %d \n",int_l_err_code);
	fprintf(l_logfile,"The recdel and trade h_code set did not match \n");

  }



   EXEC SQL FETCH matching_trade INTO :l_sys_dl_deal_struct_hj:l_sys_dl_deal_struct_if;  

   if (APL_ZERO_RESULT_SET) break;
}

fprintf(l_logfile,"The Error Code : %d \n",int_l_err_code);
APL_GOBACK_SUCCESS //Added for AIX Migration Changes
RETURN_SUCCESS: 

     EXEC SQL UPDATE DL_MAROCLEAR 
	  SET ERROR_CD= :int_l_err_code
     WHERE ltrim(rtrim(CLIENT))=:chr_l_client_a
     AND ltrim(rtrim(BROKER_IDENTITY))=:chr_l_brkref
     AND ltrim(rtrim(INSTR_ISIN))=:chr_l_isin
     AND ltrim(rtrim(DEAL_DATE))=:chr_l_trdt_a;

     EXEC SQL COMMIT;
	
		EXEC SQL CLOSE matching_trade;
		return(APL_SUCCESS);
RETURN_FAILURE:

     EXEC SQL UPDATE DL_MAROCLEAR 
	  SET ERROR_CD= :int_l_err_code
     WHERE ltrim(rtrim(CLIENT))=:chr_l_client_a
     AND ltrim(rtrim(BROKER_IDENTITY))=:chr_l_brkref
     AND ltrim(rtrim(INSTR_ISIN))=:chr_l_isin
     AND ltrim(rtrim(DEAL_DATE))=:chr_l_trdt_a;

     EXEC SQL COMMIT;
		EXEC SQL CLOSE matching_trade;
		return(APL_FAILURE);
}

 
int UpdPmtTrade(  DL_DEAL_PMTDET_STRUCT_H *p_dl_deal_pmtdet_struct_h_d,
		     SYS_DL_DEAL_STRUCT_H *p_sys_dl_deal_struct_h_f,
		     int *p_err_code,
		     FILE *p_logfile,
                     INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
                     DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{
DL_DEALAUDIT_STRUCT_H *l_dl_dealaudit_struct_ha = NULL;
FILE *l_logfile;

int int_l_h_ccy_decimallen = 0;
int int_l_hol_exist=0;
int int_l_datecmp=0;
int l_subfailreason_cd=0;
int int_l_enufvdp=1;
int int_l_condexists=0;
char chr_l_failcode_A[FAILREAS_CD_LEN]=APL_NULL_STRING;
char chr_l_curr_date_time[APL_DATE_LEN]=APL_NULL_STRING;
char chr_l_trade_status[APL_STATUS_LEN]=APL_NULL_STRING;
char chr_l_custnote_a[71]=APL_NULL_STRING;
double  l_mod_dealposn_a =0;
double l_currposn =0;
double l_round_gramount = 0;
short l_i_ccy_decimallen = 0;

char chr_mainfuncarea[APL_MAINFUNCAREA_LEN]=APL_NULL_STRING;
char chr_l_condid[APL_CONDID_LEN]=APL_NULL_STRING;
char chr_l_clscode[CLSCD_LEN]=APL_NULL_STRING;
char chr_l_fieldname[21]=APL_NULL_STRING;
char chr_l_failnote[36]=APL_NULL_STRING;
char chr_l_trcodeinstrflg_a[APL_FLAG_LENGTH]=APL_NULL_STRING;


EXEC SQL BEGIN DECLARE SECTION;

EXEC SQL VAR chr_l_failcode_A IS STRING;
EXEC SQL VAR chr_l_failnote IS STRING;
EXEC SQL VAR chr_l_curr_date_time IS STRING;
EXEC SQL VAR chr_l_trade_status IS STRING;
EXEC SQL VAR chr_l_custnote_a IS STRING;

EXEC SQL END DECLARE SECTION;


l_logfile=p_logfile;

fprintf(l_logfile,"Environment variables : %s, %s, %s\n",p_intl_envdatastruct_h->usr,p_intl_envdatastruct_h->h_mode,p_intl_envdatastruct_h->processtion);
fprintf(l_logfile,"Trade Data  : %s, %s, %s\n",p_sys_dl_deal_struct_h_f->h_dl_client,p_sys_dl_deal_struct_h_f->h_indentity_no,p_sys_dl_deal_struct_h_f->h_instr_code);
//fprintf(l_logfile,"Prematch Trade Data  : %s, %s, %s\n",p_sys_dl_deal_struct_h_f->h_dl_client,p_sys_dl_deal_struct_h_f->h_indentity_no); Changes done for AIX Migration
fprintf(l_logfile,"Prematch Trade Data  : %s, %s\n",p_sys_dl_deal_struct_h_f->h_dl_client,p_sys_dl_deal_struct_h_f->h_indentity_no);

l_dl_dealaudit_struct_ha = (DL_DEALAUDIT_STRUCT_H*)calloc(1,sizeof(DL_DEALAUDIT_STRUCT_H));

   

   if ( APL_SUCCESS == CO_Pro_DateComp(   p_sys_dl_deal_struct_h_f->h_dlt,
                                       p_dl_deal_pmtdet_struct_h_d->h_confdate,
                                       &int_l_datecmp,
                                       l_debug_info_ptr ) )
   {
      if ( int_l_datecmp < 0 )
      {
         if(   CO_InsertErr(   l_debug_info_ptr,
                                 ERR_DEAL_CONFDT_NO_DEALDT,
                                 p_dl_deal_pmtdet_struct_h_d->h_dl_client,
                                 p_dl_deal_pmtdet_struct_h_d->h_indentity_no,
                                 APL_NULL_STRING,
                                 __LINE__,
                                 __FILE__ ) == APL_FAILURE )
         {
            APL_GOBACK_FAIL;
         }
			fprintf(l_logfile,"Exiting unsuccessfully from the Conf Date Check \n");
            APL_GOBACK_FAIL;
      }
   }
   else
   {
			fprintf(l_logfile,"Exiting unsuccessfully from CO_Pro_DateComp \n");
      APL_GOBACK_FAIL;
   }

   

   int_l_hol_exist = 0;

   if ( APL_SUCCESS == CO_Chk_Holiday(  p_dl_deal_pmtdet_struct_h_d->h_confdate,
                                          &int_l_hol_exist,
                                          l_debug_info_ptr,p_sys_dl_deal_struct_h_f->h_exch_code ) )
   {
      if ( int_l_hol_exist != 0 )
      {
         if ( CO_InsertErr( l_debug_info_ptr,
                              ERR_DATE_IS_HOLIDAY,
                              p_dl_deal_pmtdet_struct_h_d->h_confdate,
                              APL_NULL_STRING,
                              APL_NULL_STRING,
                              __LINE__,
                              __FILE__ ) == APL_FAILURE )
         {
            APL_GOBACK_FAIL;
         }
			fprintf(l_logfile,"Exiting Unsuccessfully from Holiday Check \n");
            APL_GOBACK_FAIL;
      }
   }
   else
   {
			fprintf(l_logfile,"Exiting Unsuccessfully from CO_Chk_Holiday \n");
      APL_GOBACK_FAIL;
   }

   l_mod_dealposn_a=p_sys_dl_deal_struct_h_f->h_qty;
	fprintf(l_logfile,"The Quantity is : %f\n",p_sys_dl_deal_struct_h_f->h_qty);


   if ( APL_FAILURE == DL_Proc_PosLock( p_dl_deal_pmtdet_struct_h_d->h_dl_client,
                                       p_sys_dl_deal_struct_h_f->h_instr_code,
                                       p_sys_dl_deal_struct_h_f->h_loccode,
                                       APL_NULL_STRING,"FREE",
                                       l_debug_info_ptr ) )
   {
			fprintf(l_logfile,"Exiting Unsuccessfully from DL_Proc_PosLock \n");
      APL_GOBACK_FAIL;
   }

    


	if ( VAL_DELIVER_DEAL(p_sys_dl_deal_struct_h_f->h_dealcd[0]) )
	{
		

		if ( APL_FAILURE == DL_Chk_AvlPos(	p_dl_deal_pmtdet_struct_h_d->h_dl_client,
														p_sys_dl_deal_struct_h_f->h_instr_code,
														p_sys_dl_deal_struct_h_f->h_loccode,
														'Y','N','N','Y','Y','N','N','N',
														"FREE",
														&l_currposn,
														l_debug_info_ptr) )
		{
			fprintf(l_logfile,"Exiting Unsuccessfully from DL_Chk_AvlPos\n");
			APL_GOBACK_FAIL;
		}

		fprintf(l_logfile,"Current position : %f, Update Position : %f \n",l_currposn,l_mod_dealposn_a);
		if ( l_currposn < l_mod_dealposn_a )
		{
						if (	CO_InsertErr(	l_debug_info_ptr,
														ERR_DEAL_NENUFPOSN,
														p_dl_deal_pmtdet_struct_h_d->h_dl_client,
														p_sys_dl_deal_struct_h_f->h_instr_code,
														APL_NULL_STRING,
														__LINE__,
														__FILE__ ) == APL_FAILURE )
						{
							APL_GOBACK_FAIL;
						}
							fprintf(l_logfile,"Exiting Unsuccessfully for lack of position\n");
							*p_err_code=15;
							APL_GOBACK_FAIL;
					}
   }	
   if ( APL_FAILURE == CO_RtvSysDtTime( chr_l_curr_date_time,
                                             l_debug_info_ptr ) )
   {
      APL_GOBACK_FAIL;
   }

   if ( APL_SUCCESS == CO_ChkErr( *l_debug_info_ptr ) )
   {
      APL_GOBACK_FAIL;
   }

   

   EXEC SQL SELECT DEC_LEN
            INTO  :int_l_h_ccy_decimallen:l_i_ccy_decimallen
            FROM  DL_CURRENCY
            WHERE CURRENCY_CD  = :p_sys_dl_deal_struct_h_f->h_currencycode ;

   IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET( ERR_VAL_NF,
                                          "Decimal length",
                                          "Type Of Instr",
                                          APL_NULL_STRING ); 
   l_round_gramount = 0;
   CO_Round(p_dl_deal_pmtdet_struct_h_d->h_grossamount,
           int_l_h_ccy_decimallen,
           &l_round_gramount);

   if (strlen(p_sys_dl_deal_struct_h_f->h_confdate)!=0)
   {
   *p_err_code=1;
   fprintf(l_logfile,"The trade is already confirmed \n");
   APL_GOBACK_FAIL;
	}

		strcpy( chr_l_trade_status, APL_NULL_STRING );
		strcpy( chr_l_trade_status, STATUS_CONF );

		fprintf(l_logfile,"The conf chr_date is : %s\n",p_dl_deal_pmtdet_struct_h_d->h_confdate);

		fprintf(l_logfile,"The verwith : %s\n",p_dl_deal_pmtdet_struct_h_d->h_verfied_with);
		//fprintf(l_logfile,"The diffamt : %d\n",p_dl_deal_pmtdet_struct_h_d->h_diffamount); Changes done for AIX Migration
		fprintf(l_logfile,"The diffamt : %lf\n",p_dl_deal_pmtdet_struct_h_d->h_diffamount);
		fprintf(l_logfile,"The failreason_cd : %s\n",chr_l_failcode_A);
		//fprintf(l_logfile,"The sub_fail_cd: %s\n",l_subfailreason_cd);Changes done for AIX Migration 
		fprintf(l_logfile,"The sub_fail_cd: %d\n",l_subfailreason_cd);
		fprintf(l_logfile,"The fail_det : %s\n",chr_l_failnote);
		fprintf(l_logfile,"The checker : %s\n",p_intl_envdatastruct_h->usr);
		fprintf(l_logfile,"The checker chr_date : %s\n",chr_l_curr_date_time);
		fprintf(l_logfile,"The access_stamp : %s\n",chr_l_curr_date_time);
		fprintf(l_logfile,"The itrade status_ind : %s\n",chr_l_trade_status);
		fprintf(l_logfile,"The comm_ref_no: %s\n",p_dl_deal_pmtdet_struct_h_d->h_comm_indentity_no);
		//fprintf(l_logfile,"The amount: %d\n",p_sys_dl_deal_struct_h_f->h_dl_client); Changes done for AIX Migration
		fprintf(l_logfile,"The amount: %s\n",p_sys_dl_deal_struct_h_f->h_dl_client);

		fprintf(l_logfile,"The trade h_code is : %s",p_sys_dl_deal_struct_h_f->h_dealcd);
		if ((!strcmp(p_sys_dl_deal_struct_h_f->h_dealcd,APL_DEAL_RF)) || (!strcmp(p_sys_dl_deal_struct_h_f->h_dealcd,APL_DEAL_DF)))
			p_dl_deal_pmtdet_struct_h_d->h_diffamount = p_sys_dl_deal_struct_h_f->h_diffamount;

			EXEC SQL UPDATE DL_DEAL 
						SET 	VAL_FDT 			= :p_dl_deal_pmtdet_struct_h_d->h_confdate,
								VERFIED_WITH 			= :p_dl_deal_pmtdet_struct_h_d->h_verfied_with,
								FAILREASON_CD			= :chr_l_failcode_A,
								DATEOF_MARKFAIL 		= NULL,
								DEAL_STAT	= :chr_l_trade_status,
								CHECKER        = :p_intl_envdatastruct_h->usr,
								CHECKER_DT      = :chr_l_curr_date_time,
								ACCESS_STAMP   = :chr_l_curr_date_time
						WHERE	CLIENT			= :p_sys_dl_deal_struct_h_f->h_dl_client
						AND IDENTIY_NO				= :p_sys_dl_deal_struct_h_f->h_indentity_no;
		
		fprintf(l_logfile,"The l_debuglist h_code after inserting into trade table : %d\n",sqlca.sqlcode);
 
		

	   if (sqlca.sqlcode == 1403)
		{
			*p_err_code=9;
			fprintf(l_logfile,"The trade is not int_found \n");
			return(APL_FAILURE);
		}

      
   
      if ( APL_FAILURE == DL_Mod_Posn(  p_dl_deal_pmtdet_struct_h_d->h_dl_client,
                                          p_sys_dl_deal_struct_h_f->h_instr_code,
                                          p_sys_dl_deal_struct_h_f->h_loccode,
                                          p_sys_dl_deal_struct_h_f->h_pos_stat,
                                          'U',
                                          p_sys_dl_deal_struct_h_f->h_dealcd[0],
                                          &l_mod_dealposn_a,
                                          'D',"FREE",
                                          l_debug_info_ptr ) )
      {
			fprintf(l_logfile,"Exiting Unsuccessfully from DL_Mod_Posn 1\n");
         APL_GOBACK_FAIL;
      }
		CO_ProcMonitor(l_logfile,"Got Errors:",l_debug_info_ptr,NULL);
      if ( APL_FAILURE == DL_Mod_Posn(  p_dl_deal_pmtdet_struct_h_d->h_dl_client,
                                          p_sys_dl_deal_struct_h_f->h_instr_code,
                                          p_sys_dl_deal_struct_h_f->h_loccode,
                                          p_sys_dl_deal_struct_h_f->h_pos_stat,
                                          'C',
                                          p_sys_dl_deal_struct_h_f->h_dealcd[0],
                                          &l_mod_dealposn_a,
                                          'I',"FREE",
                                          l_debug_info_ptr ) )
      {
			fprintf(l_logfile,"Exiting Unsuccessfully from DL_Mod_Posn 2\n");
         APL_GOBACK_FAIL;
      }
		CO_ProcMonitor(l_logfile,"Got Errors:",l_debug_info_ptr,NULL);

		*p_err_code=4;
		fprintf(l_logfile,"Successfuly prematched the record \n");
		EXEC SQL COMMIT;
				



        
        if (APL_FAILURE==EI_Mod_MQData(p_dl_deal_pmtdet_struct_h_d->h_dl_client,
                                        p_dl_deal_pmtdet_struct_h_d->h_indentity_no,
                                        NULL,
                                        NULL,
                                        "B",
                                        l_debug_info_ptr))
			{
			fprintf(l_logfile,"Exiting Unsuccessfully from EI_Mod_MQData \n");
         APL_GOBACK_FAIL  
			}

	strcpy(l_dl_dealaudit_struct_ha->h_dl_client, p_dl_deal_pmtdet_struct_h_d->h_dl_client);
        strcpy(l_dl_dealaudit_struct_ha->h_indentity_no,    p_dl_deal_pmtdet_struct_h_d->h_indentity_no);
        strcpy(l_dl_dealaudit_struct_ha->h_trail_for, "T");
        strcpy(l_dl_dealaudit_struct_ha->h_processdetail, p_intl_envdatastruct_h->processtion);
        strcpy(l_dl_dealaudit_struct_ha->h_proc_usr, p_intl_envdatastruct_h->usr);
	strcpy(l_dl_dealaudit_struct_ha->h_subprocess, APL_NULL_STRING);
	strcpy(l_dl_dealaudit_struct_ha->h_logdate, APL_NULL_STRING);
	strcpy(l_dl_dealaudit_struct_ha->h_fail_cd,chr_l_failcode_A);
	l_dl_dealaudit_struct_ha->h_qty = p_sys_dl_deal_struct_h_f->h_qty;
	l_dl_dealaudit_struct_ha->h_subfailreas_cd= p_sys_dl_deal_struct_h_f->h_subfailreas_cd;
	strcpy(l_dl_dealaudit_struct_ha->h_dlfromord, p_sys_dl_deal_struct_h_f->h_dlfromord);
        if ( APL_FAILURE == CR_Mod_CLHAudTrail( l_dl_dealaudit_struct_ha,
                                       l_debug_info_ptr ) )
  	{
			fprintf(l_logfile,"Exiting Unsuccessfully from CR_Mod_CLHAudTrail \n");
      	      APL_GOBACK_FAIL;
   	}	

APL_GOBACK_SUCCESS //Added for AIX Migration Changes
   
RETURN_FAILURE: return(APL_FAILURE);
RETURN_SUCCESS: return(APL_SUCCESS);
}
int GenCmaroclDetails(char *chr_p_sys_date,FILE *l_ptr_rept_file,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
char h_dl_client[24] = APL_NULL_STRING;
char h_instr_code[8]=APL_NULL_STRING;
char h_qty[9]=APL_NULL_STRING;
char chr_h_code_desc[40]=APL_NULL_STRING;
char chr_l_sys_date[11]=APL_NULL_STRING;

EXEC SQL BEGIN DECLARE SECTION;

EXEC SQL VAR h_dl_client IS STRING;
EXEC SQL VAR h_instr_code IS STRING;
EXEC SQL VAR h_qty IS STRING;
EXEC SQL VAR chr_h_code_desc IS STRING;
EXEC SQL VAR chr_l_sys_date  IS STRING;

short i_dl_client=0;
short i_instr_code=0;
short i_qty=0;
short i_code_desc=0;
short i_sys_date=0;

EXEC SQL END DECLARE SECTION;

memset(h_dl_client,NULL,24);
memset(h_instr_code,NULL,8);
memset(h_qty,NULL,9);
memset(chr_h_code_desc,NULL,40);
memset(chr_l_sys_date,NULL,11);


strcpy(chr_l_sys_date,chr_p_sys_date);
fprintf(l_ptr_rept_file,"\n\n---------------------------------------------------------------------------------------\n");
fprintf(l_ptr_rept_file,"                              MAROCLEAR REJECT FILE REPORT\n");
fprintf(l_ptr_rept_file,"                               UPLOAD DATE : %s\n",chr_l_sys_date);
fprintf(l_ptr_rept_file,"                                     CITIBANK MOROCCO\n");
fprintf(l_ptr_rept_file,"SYSTEM DATE : %s.\n",chr_l_sys_date);
fprintf(l_ptr_rept_file,"---------------------------------------------------------------------------------------\n\n\n");

fprintf(l_ptr_rept_file,"ACCOUNT                 INSTRUMENT  QUANTITY    FAIL REASON\n");
fprintf(l_ptr_rept_file,"---------------------------------------------------------------------------------------\n\n\n");


EXEC SQL DECLARE cmarocl_details CURSOR FOR
SELECT rpad(DL_MAROCLEAR.client,24,' '),
					 rpad(MT_INSTRUMENT.instr_code,8,' '),
					 rpad(to_char(DL_MAROCLEAR.QTY),9,' '),
					 PRO_SGENSTAT.map_desc
			FROM DL_MAROCLEAR DL_MAROCLEAR,
				  MT_INSTRUMENT MT_INSTRUMENT,
				  PRO_SGENSTAT PRO_SGENSTAT
			WHERE DL_MAROCLEAR.UPLOAD_DATE=:chr_l_sys_date
			AND 	DL_MAROCLEAR.INSTR_ISIN=MT_INSTRUMENT.INSTR_ISIN
			AND   PRO_SGENSTAT.map_val=DL_MAROCLEAR.ERROR_CD
			AND 	PRO_SGENSTAT.map_type='MAROCLEAR ERROR CODE';

IS_ANY_ORA_ERROR;

EXEC SQL OPEN cmarocl_details;


for(;;)
{
EXEC SQL FETCH cmarocl_details 
         INTO :h_dl_client:i_dl_client,
              :h_instr_code:i_instr_code,
              :h_qty:i_qty,
              :chr_h_code_desc:i_code_desc;
if (APL_ZERO_RESULT_SET)
	break;
fprintf(l_ptr_rept_file,"%s %s   %s    %s\n",h_dl_client,h_instr_code,h_qty,chr_h_code_desc);
}
fprintf(l_ptr_rept_file,"\n\n---------------------------------------------------------------------------------------\n");
fprintf(l_ptr_rept_file,"                                  END OF REPORT \n");
fprintf(l_ptr_rept_file,"---------------------------------------------------------------------------------------\n");
APL_GOBACK_SUCCESS //Added for AIX Migration Changes
RETURN_SUCCESS:
					EXEC SQL CLOSE cmarocl_details;
					return(APL_SUCCESS);
RETURN_FAILURE:
					EXEC SQL CLOSE cmarocl_details;
					return(APL_FAILURE);
}
