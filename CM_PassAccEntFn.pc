






#include "IV_Control_A.h"
#include "CO_HostStructdef.h"
#define	AE_SEP_STR "^"
#define  AE_MAX_REC_LEN    150

EXEC SQL INCLUDE SQLCA.H;


int	EL_PassAccEnt(char				*p_mod_ident,
							char				*p_batch_no,
							char				*p_batch_date,
							char				**argv,
							char				*p_prnt_ind,
							FILE				*fl_Userrep,
							FILE				*fl_userlog,
							DEBUG_INFO_STRUCT_H   **l_debug_info_ptr)		
{

	
	
   struct sqlca sqlca;
	
	FILE                 *fl_AEHndOff   					= (FILE *) NULL;
	FILE                 *fl_AERpt   						= (FILE *) NULL;

	char                 chr_l_buf[BUFFER_LEN]					= APL_NULL_STRING;
	char                 chr_h_prntaeflg[2]    				= APL_NULL_STRING;
	char                 int_run_seq[5]							= APL_NULL_STRING;
	char                 chr_l_aeflname[100] 					= APL_NULL_STRING;
	char                 chr_h_system_date[APL_DATE_LEN] 	= APL_NULL_STRING;
	char                 chr_b_system_date[9] 					= APL_NULL_STRING;
	char						h_proc_num[5]						= APL_NULL_STRING;
	char						h_batch_dt[APL_DATE_LEN]		= APL_NULL_STRING;

	char						h_module_ind							= APL_NULL_CHAR;

	int						int_pagenum 								= 0;	
	int						int_r_pagenum 							= 1;	
	int						int_currpos 								= 0;
	int						int_r_currpos 							= 0;
	int                  int_retstat 								= 0;
	int                  int_num 									= 0;
	int						int_l_fetch_count 						= 0;


	double          		dacredit_ind									= 0;
	double          		cacredit_ind									= 0;
	long int             int_l_cact 								= 0;
	long int             int_l_dact 								= 0;

	double               dcredit_ind									= 0.0;
	double               ccredit_ind									= 0.0;
	double               dramount 								= 0;
	double               cramount 								= 0;

	char						chr_h_date[9] 							= APL_NULL_STRING;
	char						chr_l_value_date[APL_DATE_LEN] 	= APL_NULL_STRING;
	char						int_l_temp[APL_DATE_LEN] 			= APL_NULL_STRING;
	char						*a;


	char                 chr_rep_str[3]							= APL_NULL_STRING;
	char                 chr_rep1_desc[41]						= APL_NULL_STRING;
	char                 task_desc[61]						= APL_NULL_STRING;

	
	char                 chr_l_tmpaeflname[100] 				= APL_NULL_STRING;
	
	char 						chr_gltmppath[PATH_LENGTH];
	FILE 						*chr_finifile;

	
   char						chr_l_str_repname[13]					= APL_NULL_STRING;
	int						int_l_i_temp								= 0;
	int 						int_l_i_temppos							= 0;
	int						int_l_run_number						= 0;
	int						int_l_total_detail_lines				= 0;
	double					l_creditline						= 0.0;
	double					l_debitline							= 0.0;

	INTL_REPT_STRUCT_H *l_intl_rept_struct_ha = NULL;
	

	PRO_ACCTENT_STRUCT_H     l_pro_acctent_struct_h;
	PRO_ACCTENT_STRUCT_I     l_pro_acctent_struct_i;

    
	char    					chr_l_valdate[7]						= APL_NULL_STRING;
   char    					chr_l_param_str[100]					= APL_NULL_STRING;
   char    					chr_l_refno_a[51]							= APL_NULL_STRING;
	char    					chr_l_txn_ref[51]						= APL_NULL_STRING;
	char    					chr_l_client_a[APL_CLIENT_LENGTH]		= APL_NULL_STRING;
	char                 chr_l_ca_id[21]                  	= APL_NULL_STRING;
	char                 chr_l_isin[13]                    = APL_NULL_STRING;
	char                 chr_l_ccycode[APL_CCYCODE_LEN]    = APL_NULL_STRING;
	char                 **chr_l_tmptxnref                 = NULL;
	int                  number_a                          = 0;      
   short                l_acc_ibbs_cond_exists        = 0;
   
 	

	char     chr_f_sys_date[APL_DATE_LEN]      = APL_NULL_STRING;
	int int_period_flg			=0;
	int int_emu_period_flag	=0; 

   
   PRO_GSEQNUM_STRUCT_H      l_progseqnum_struct_h;
   int     int_l_retval                        = 0;
   char    chr_l_inifile[PATH_LENGTH]          =APL_NULL_STRING;
   FILE    *l_finifile                     =(FILE *) NULL;
   char    chr_l_ae_path[PATH_LENGTH];
   char    chr_l_handoff_efile[2*PATH_LENGTH]  =  APL_NULL_STRING;

 	EXEC SQL BEGIN DECLARE SECTION;

	EXEC SQL VAR h_proc_num  						IS STRING;
	EXEC SQL VAR h_batch_dt  					IS STRING;


	EXEC SQL VAR l_pro_acctent_struct_h.brnch_cd  IS STRING;
	EXEC SQL VAR l_pro_acctent_struct_h.inden_num 	IS STRING;
	EXEC SQL VAR l_pro_acctent_struct_h.client 	IS STRING;
	EXEC SQL VAR l_pro_acctent_struct_h.curr_cd  IS STRING;
	EXEC SQL VAR l_pro_acctent_struct_h.val_date IS STRING;
	EXEC SQL VAR l_pro_acctent_struct_h.deal_cd   IS STRING;
	EXEC SQL VAR l_pro_acctent_struct_h.spl_clt_cd  	IS STRING;
	EXEC SQL VAR l_pro_acctent_struct_h.description  IS STRING;
	EXEC SQL VAR l_pro_acctent_struct_h.proc_num  	IS STRING;
	EXEC SQL VAR l_pro_acctent_struct_h.proc_dt IS STRING;
	EXEC SQL VAR l_pro_acctent_struct_h.deal_ident    IS STRING;

    
	EXEC SQL VAR chr_l_isin                       IS STRING;
	EXEC SQL VAR chr_l_ca_id                      IS STRING;
	
	EXEC SQL END DECLARE SECTION;


	

	memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
	memset(chr_h_prntaeflg,APL_NULL_CHAR,2);
	memset(int_run_seq,APL_NULL_CHAR,5);
	memset(h_proc_num,APL_NULL_CHAR,5);
	memset(h_batch_dt,APL_NULL_CHAR,APL_DATE_LEN);
	memset(chr_l_aeflname,APL_NULL_CHAR,100);
	memset(chr_l_tmpaeflname,APL_NULL_CHAR,100);
	memset(chr_h_system_date,APL_NULL_CHAR,APL_DATE_LEN);
	memset(chr_b_system_date,APL_NULL_CHAR,9);

        l_pro_acctent_struct_h.fccy_amt = 0;
        l_pro_acctent_struct_h.lcl_amount = 0;
        l_pro_acctent_struct_h.exchg_rt = 0;
        l_pro_acctent_struct_h.report_amt = 0;
        l_pro_acctent_struct_h.report_clt = 0;
        l_pro_acctent_struct_h.report_tax = 0;
        l_pro_acctent_struct_h.report_ser = 0;
        l_pro_acctent_struct_h.rep_exg_rt = 0;


	CO_ProcMonitor(fl_userlog,"Started Passing Accounting Entries.....",NULL,NULL);

	APL_IF_DEBUG
	{
   	CO_ProcMonitor(APL_OUT_FILE,"\nInside CM_PassAccGenFn processtion\n",NULL,NULL);
   	memset(chr_l_buf,NULL,BUFFER_LEN);
	   sprintf(chr_l_buf,"The Mod_id is %s\n",p_mod_ident );
	   CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);

 	   memset(chr_l_buf,NULL,BUFFER_LEN);
   	sprintf(chr_l_buf,"The Batch_no is %s\n",p_batch_no );
   	CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);

 	   memset(chr_l_buf,NULL,BUFFER_LEN);
   	sprintf(chr_l_buf,"The Batch_date is %s\n",p_batch_date );
   	CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
	}

	
	 	
	if (!strcmp(p_mod_ident,APL_NULL_STRING))
	{
 		APL_DATA_MISSING("MODULE_IDENTIFIER",APL_NULL_STRING,APL_NULL_STRING);
      APL_GOBACK_FAIL

	}

	if (!strcmp(p_batch_no ,APL_NULL_STRING))
   {
      APL_DATA_MISSING("PROC_NUM",APL_NULL_STRING,APL_NULL_STRING);
      APL_GOBACK_FAIL
   }

	if (!strcmp(p_batch_date ,APL_NULL_STRING))
   {
      APL_DATA_MISSING("PROC_DT",APL_NULL_STRING,APL_NULL_STRING);
      APL_GOBACK_FAIL
   }


	

   if ( CO_RtvSysParams(l_debug_info_ptr) == APL_FAILURE)
  		APL_GOBACK_FAIL

		 
	if(CO_Chk_CntryEnabled("ACC_ENTRIES",
  	 	               	"NO_ADD_CRC",
     	               	&l_acc_ibbs_cond_exists,
     		            	l_debug_info_ptr)==APL_FAILURE)
  		APL_GOBACK_FAIL

	if ( (!strcmp(p_prnt_ind, "H")) || (!strcmp(p_prnt_ind,"B")) )
	{

     

     if ( ( (!strcmp(p_mod_ident,"A") )||(!strcmp(p_mod_ident,"P") )) &&
          ( (!strcmp(p_prnt_ind,"R")) || (!strcmp(p_prnt_ind,"B")) ) &&
          (strcmp(g_mt_commonsys_params_struct_h.nation_code,"GR")  == 0 ) )
     {
       memset(&l_progseqnum_struct_h, NULL, sizeof(PRO_GSEQNUM_STRUCT_H));
       strcpy(l_progseqnum_struct_h.sequencename, "HOFFFILEEXT");
       strcpy(l_progseqnum_struct_h.seq_attrb_a, APL_NULL_STRING);
       strcpy(l_progseqnum_struct_h.seq_attrb_b, APL_NULL_STRING);
       strcpy(l_progseqnum_struct_h.seq_attrb_c, APL_NULL_STRING);
       l_progseqnum_struct_h.seq_stepby = 1;
       l_progseqnum_struct_h.seq_start = 0;
       l_progseqnum_struct_h.last_seqnum = 99999;
       l_progseqnum_struct_h.recycle_ind=RECYCLE_YES;

       int_l_retval = CO_RtvNxtSeqNum(&l_progseqnum_struct_h, l_debug_info_ptr);
       if (int_l_retval == APL_FAILURE) APL_GOBACK_FAIL

       strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH") );
       strcat(chr_l_inifile,"intl_sun.cfg");

       if ( (l_finifile = fopen(chr_l_inifile,"r") )  == NULL )
          {
            APL_GOBACK_FAIL
          }

       if (APL_FAILURE == CO_ReadToken( l_finifile,
                                        "INTL_AE_PATH",
                                        chr_l_ae_path,
                                        l_debug_info_ptr))
          {
            APL_GOBACK_FAIL
          }

       sprintf(chr_l_aeflname, "%sESESAM.%d", chr_l_ae_path, int_l_retval);
       sprintf(chr_l_handoff_efile, "%sEFILE.%d", chr_l_ae_path, int_l_retval);

       if ((fl_AEHndOff = fopen(chr_l_handoff_efile, "w"))  == (FILE *) NULL )
          {
            CO_InsertErr(l_debug_info_ptr,ERR_FILE_NOTFND,APL_NULL_STRING,
                           APL_NULL_STRING,APL_NULL_STRING,
                           __LINE__,__FILE__);
            APL_GOBACK_FAIL
         }

       fprintf(fl_AEHndOff,"ESESAM.TXT");
       fclose(fl_AEHndOff);


       printf("the chr_l_aeflname is %s\n",chr_l_aeflname);
       if ((fl_AEHndOff = fopen(chr_l_aeflname, "w"))  == (FILE *) NULL)
          {
            CO_InsertErr(l_debug_info_ptr,ERR_FILE_NOTFND,APL_NULL_STRING,
                           APL_NULL_STRING,APL_NULL_STRING,
                           __LINE__,__FILE__);
            APL_GOBACK_FAIL
         }

         l_intl_rept_struct_ha = (INTL_REPT_STRUCT_H *)calloc(1, sizeof(INTL_REPT_STRUCT_H));
         APL_MALLOC_FAIL(l_intl_rept_struct_ha) ;

         sprintf(l_intl_rept_struct_ha->report_name,"ESESAM.%d",int_l_retval);
         strcpy(l_intl_rept_struct_ha->report_desc, APL_HOFF_FILE_DESC);
         strcpy(l_intl_rept_struct_ha->report_date, argv[2]);
         l_intl_rept_struct_ha->report_width = 100 ;
         strcpy(l_intl_rept_struct_ha->task_desc, argv[5]);
         strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
         strcpy(l_intl_rept_struct_ha->usr, argv[3]);
         if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))
         {
            APL_GOBACK_FAIL
         }

         sprintf(l_intl_rept_struct_ha->report_name,"EFILE.%d",int_l_retval);
         strcpy(l_intl_rept_struct_ha->report_desc, APL_HOFF_FILE_DESC);
         strcpy(l_intl_rept_struct_ha->report_date, argv[2]);
         l_intl_rept_struct_ha->report_width = 100 ;
         strcpy(l_intl_rept_struct_ha->task_desc, argv[5]);
         strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
         strcpy(l_intl_rept_struct_ha->usr, argv[3]);
         if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))
         {
            APL_GOBACK_FAIL
         }

     }
    else
     {

 	  if (APL_FAILURE == IV_AccEntIfIfn(p_batch_no,chr_l_aeflname,l_debug_info_ptr))
   	{
			 CO_InsertErr(l_debug_info_ptr,ERR_HANDOFFFILE_NOTGEN,
								APL_NULL_STRING,
								 APL_NULL_STRING,APL_NULL_STRING,
								 __LINE__,__FILE__);	
      	 APL_GOBACK_FAIL
   	}

     	printf("the chr_l_aeflname is %s\n",chr_l_aeflname);
		
		if (l_acc_ibbs_cond_exists == 0)
		{
			
   		strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
			strcat(chr_l_inifile,"intl_sun.cfg");

			if ( ( chr_finifile=fopen(chr_l_inifile,"r") ) == NULL)
				APL_GOBACK_FAIL

			if(CO_ReadToken(chr_finifile,"INTL_LOG_PATH",chr_gltmppath,l_debug_info_ptr)==APL_FAILURE)
				APL_GOBACK_FAIL

			if (fclose(chr_finifile))
				APL_GOBACK_FAIL
	
			
			strcpy(chr_l_tmpaeflname,chr_l_aeflname);
			strcpy(chr_l_aeflname,chr_gltmppath);



			int_l_i_temppos=0;	
			for(int_l_i_temp=0;chr_l_tmpaeflname[int_l_i_temp]!='\0';int_l_i_temp++)
				if (chr_l_tmpaeflname[int_l_i_temp]=='/')
					int_l_i_temppos=int_l_i_temp+1;
			
			for(int_l_i_temp=0;chr_l_tmpaeflname[int_l_i_temppos]!='\0';int_l_i_temp++,int_l_i_temppos++)
				chr_l_str_repname[int_l_i_temp]=chr_l_tmpaeflname[int_l_i_temppos];

			chr_l_str_repname[int_l_i_temp]='\0';

			strcat(chr_l_aeflname,chr_l_str_repname);
		}
		

		if ( (!strcmp(p_prnt_ind,"R")) || (!strcmp(p_prnt_ind,"B"))	)
		{
   		

		   if ((fl_AEHndOff = fopen(chr_l_aeflname,"w"))  == (FILE *) NULL)
   		{
      		CO_InsertErr(l_debug_info_ptr,ERR_FILE_NOTFND,APL_NULL_STRING,
         		            APL_NULL_STRING,APL_NULL_STRING,
            		         __LINE__,__FILE__);
      		APL_GOBACK_FAIL
   		}

			 
			int_l_i_temppos=0;	
			for(int_l_i_temp=0;chr_l_aeflname[int_l_i_temp]!='\0';int_l_i_temp++)
				if (chr_l_aeflname[int_l_i_temp]=='/')
					int_l_i_temppos=int_l_i_temp+1;
			
			for(int_l_i_temp=0;chr_l_aeflname[int_l_i_temppos]!='\0';int_l_i_temp++,int_l_i_temppos++)
				chr_l_str_repname[int_l_i_temp]=chr_l_aeflname[int_l_i_temppos];

			chr_l_str_repname[int_l_i_temp]='\0';

			l_intl_rept_struct_ha = (INTL_REPT_STRUCT_H *)calloc(1, sizeof(INTL_REPT_STRUCT_H));
			APL_MALLOC_FAIL(l_intl_rept_struct_ha) ;

			strcpy(l_intl_rept_struct_ha->report_name, chr_l_str_repname);
			strcpy(l_intl_rept_struct_ha->report_desc, APL_HOFF_FILE_DESC);
			strcpy(l_intl_rept_struct_ha->report_date, argv[2]);
			l_intl_rept_struct_ha->report_width = 100 ;
			strcpy(l_intl_rept_struct_ha->task_desc, argv[5]);
			strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
			strcpy(l_intl_rept_struct_ha->usr, argv[3]);
			

			if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha,
                                  l_debug_info_ptr ))
			{
   			APL_GOBACK_FAIL
			}

			

		}
    } 

   }



	


	if ( (!strcmp(p_prnt_ind,"R") ) || (!strcmp(p_prnt_ind,"B")) )
	{
   	if (!strcmp(p_mod_ident,"P"))
 		{	
     		strcpy(chr_rep_str,"BP");
    		strcpy(chr_rep1_desc,"AE Rpt:Bill Payments");
     		strcpy(task_desc,"BillingPaymentAccountingEntries");
		 }
	
		 if (!strcmp(p_mod_ident,"B"))
	 	 {
     		strcpy(chr_rep_str,"BB");
    		strcpy(chr_rep1_desc,"AE Rpt: Bill Accounting");
     		strcpy(task_desc,"BillingAccountingEntries");
	 	 }		
		
		 if (!strcmp(p_mod_ident,"A"))
	 	 {
     		strcpy(chr_rep_str,"CA");
    		strcpy(chr_rep1_desc,"AE Rpt :CA Accounting");
     		strcpy(task_desc,"CorpActionsAccountingEntries");
		 }

		 if (!strcmp(p_mod_ident,"C"))
	 	 {
     		strcpy(chr_rep_str,"CO");
    		strcpy(chr_rep1_desc,"AE Rpt :Core Accounting");
     		strcpy(task_desc,"CoreAccountingEntries");
		 }

		 if (!strcmp(p_mod_ident,"T"))
		 {
			strcpy(chr_rep_str,"CREDIT_IND");
			strcpy(chr_rep1_desc,"Contingent Accounting Entries");
			strcpy(task_desc,"Contingent Accounting Entries");
		 }

		 

		 if (fl_Userrep != NULL)
		 {
			fl_AERpt = fl_Userrep;
		 }
		 else
		 {
		 	if (APL_FAILURE == CO_Rtv_RptFileName (chr_rep_str,chr_rep1_desc,100,
                                         argv[5],argv,&fl_AERpt,l_debug_info_ptr))
   	 	{
		   	    CO_InsertErr(l_debug_info_ptr,ERR_FILE_NOTFND, "UserErrorLogReport",
      		                APL_NULL_STRING, APL_NULL_STRING,
            		          __LINE__,__FILE__) ;
       	  		 APL_GOBACK_FAIL
	 	 	}
		 }
	}


		

	strcpy(h_proc_num,p_batch_no);
	strcpy(h_batch_dt,p_batch_date);
	h_module_ind = p_mod_ident[0];



    EXEC SQL DECLARE PASSAE CURSOR FOR
    SELECT * FROM PRO_ACCTENT
    WHERE  PROC_NUM   		=:h_proc_num 
			  AND BATCH_DATE	=:h_batch_dt 	
	 		  AND MODULE_IND	=:h_module_ind				
			  AND STATUS 		= 'G'
    ORDER BY REC_REFER,to_number(INDEN_NUM);

    EXEC SQL OPEN PASSAE;

    IS_ANY_ORA_ERROR;

	 if (sqlca.sqlcode <0)
	 {
		fprintf(APL_OUT_FILE,"DB ERROR IN IACCTENT\n");
		APL_GOBACK_FAIL
	 }
	
	 for(;;)
    {
         memset(&l_pro_acctent_struct_h,NULL,sizeof(PRO_ACCTENT_STRUCT_H));
			memset(&l_pro_acctent_struct_i,NULL,sizeof(PRO_ACCTENT_STRUCT_I)); 
			
         EXEC SQL FETCH PASSAE INTO
         :l_pro_acctent_struct_h:l_pro_acctent_struct_i;
			
			IS_ANY_ORA_ERROR;

         if (sqlca.sqlcode == 1403)
         {
				if (int_l_fetch_count  == 0)
				{
					
					CO_InsertErr(l_debug_info_ptr,ERR_BATCHNO_NOTFND,
										p_batch_no, APL_NULL_STRING,
										APL_NULL_STRING,__LINE__,__FILE__);

					fprintf(fl_userlog,"No records in IACCTENT TABLE\n");
					APL_GOBACK_FAIL
				}
				else
				{

					fprintf(APL_OUT_FILE,"NO MORE RECORDS IN IACCTENT.\n");
            	break;
				}
         }	

			int_l_fetch_count++;

			 
			if( (l_pro_acctent_struct_i.i_sequence_num == -1) && (int_l_fetch_count > 1))
			{
			  sprintf( l_pro_acctent_struct_h.inden_num,"%ld",atol(int_run_seq)+1); //AIX- Warnings Removal
			}
			

			if (int_l_fetch_count == 1)
			{
				if(APL_FAILURE == ( EL_PrnHdrDet(p_mod_ident,
                 					  p_batch_no,
                 					  p_batch_date,
                 					  &int_l_run_number,
                 					  &int_l_total_detail_lines,
                 					  &l_creditline,
                 					  &l_debitline,
                 					  l_debug_info_ptr)))
					APL_GOBACK_FAIL
					
					
				if ( (!strcmp(p_prnt_ind,"R") ) || (!strcmp(p_prnt_ind,"B")) )
				{
					if (APL_FAILURE == CO_RtvSysDt(chr_h_system_date,l_debug_info_ptr) )
					{
						fprintf(fl_userlog,"Failed to Get System Date\n"); 
						APL_GOBACK_FAIL
					}

					

					if (	(!strcmp(p_prnt_ind,"R") ) && 
							( (!strcmp(p_mod_ident,"C")) || (!strcmp(p_mod_ident ,"T") ) )
						)
					{
						strcpy(chr_l_aeflname,"Batch No."); 					
						strcat(chr_l_aeflname,p_batch_no);
					}


					

		    		EI_Prn_AERpt_Hdr(fl_AERpt,chr_l_aeflname,p_batch_no,
										p_mod_ident,chr_h_system_date,
										&int_r_pagenum,&int_r_currpos,
										l_debug_info_ptr);
				}

				if ( (!strcmp(p_prnt_ind,"H") ) || (!strcmp(p_prnt_ind,"B")) )
				{
 					

				   if (APL_FAILURE == IV_Rtv_SysDate(chr_b_system_date,l_debug_info_ptr) )
   				{
      				APL_IF_DEBUG
      				{
         				fprintf(fl_userlog,"Failed to get system chr_date in yyyymmdd format\n");
      				}
 		     			APL_GOBACK_FAIL
   				}

					


	     			EI_Prn_AEHOff_Hdr(fl_AEHndOff, p_batch_no ,
 			   							chr_b_system_date,
											p_mod_ident,
											int_l_run_number,
											int_l_total_detail_lines,
											l_creditline,
											l_debitline,
											l_debug_info_ptr); 
			   }
			
			} 


			

			if ( (!strcmp(p_prnt_ind,"H") ) || (!strcmp(p_prnt_ind,"B")) )
			{
         	EI_Prn_AEHOff_Det(fl_AEHndOff,
									   l_pro_acctent_struct_h, 
										l_debug_info_ptr); 
										
			 
            if ( strlen(l_pro_acctent_struct_h.deal_ident) && !(strcmp(p_mod_ident, "A"))
																	&& ( l_pro_acctent_struct_h.db_cr_ind == CREDIT_IND_A ) )
				   {
						EXEC SQL SELECT
						     		TO_CHAR(TO_DATE(:l_pro_acctent_struct_h.val_date,'YYYYMMDD'),'YYMMDD')
							  		INTO :chr_l_valdate
							  		FROM DUAL;
             
            		IS_ANY_ORA_ERROR
						strcpy(chr_l_txn_ref, l_pro_acctent_struct_h.deal_ident);
						
						if (APL_FAILURE == CO_SplitStr( chr_l_txn_ref,
																	'|',
																   &number_a,
																   &chr_l_tmptxnref ))
                    {
							fprintf(fl_userlog,"Failure  while splitting %s \n",chr_l_txn_ref);
						   APL_GOBACK_FAIL
						  }
						
						strcpy(chr_l_ca_id,   chr_l_tmptxnref[0]); 
						strcpy(chr_l_client_a, chr_l_tmptxnref[1]); 
						strcpy(chr_l_ccycode, chr_l_tmptxnref[3]); 
						strncpy(chr_l_refno_a,l_pro_acctent_struct_h.description,50);
						chr_l_refno_a[50]='\0'; 

						EXEC SQL SELECT instr_isin
									  INTO :chr_l_isin
									  FROM MT_INSTRUMENT
                            WHERE instr_code = ( SELECT a.instr_code
															  FROM CAEVENT a
                                              WHERE a.corp_id = :chr_l_ca_id );

                  IS_ANY_ORA_ERROR 
						memset(chr_l_param_str,NULL,100);
	         		sprintf(chr_l_param_str,"%s;%s;%s;%f;C;%s;%s;",chr_l_valdate,l_pro_acctent_struct_h.curr_cd,chr_l_ccycode,
				                                         l_pro_acctent_struct_h.report_amt,chr_l_isin,p_mod_ident);


						if (APL_FAILURE == GBDbInsIMSGENT("100N01",
															  		chr_l_refno_a,
															  		chr_l_client_a,
															  		'Y', 
															  		chr_l_param_str,
															  		l_debug_info_ptr))
                		{
								
					         fprintf(fl_userlog,"MT100 Message Not generated for client %s refno %s\n",chr_l_client_a,chr_l_refno_a);
	             		}
               }
					
			}
										

			if ( (!strcmp(p_prnt_ind,"R") ) || (!strcmp(p_prnt_ind,"B")) )
			{
				

				if ( h_module_ind == 'B' )
				{
					if ( l_pro_acctent_struct_h.report_tax > 0 )
					{
						l_pro_acctent_struct_h.report_clt = l_pro_acctent_struct_h.report_tax;
					}
					else if ( l_pro_acctent_struct_h.report_ser > 0 )
					{
						l_pro_acctent_struct_h.report_clt = l_pro_acctent_struct_h.report_ser;
					}
				}

   	      EI_Prn_AERpt_Det( fl_AERpt,chr_l_aeflname,
									 p_mod_ident,
									p_batch_no,
									&l_pro_acctent_struct_h,
									&int_r_currpos,
                  		   &int_r_pagenum, 
									chr_h_system_date,
									l_debug_info_ptr);
			}

	     if (l_pro_acctent_struct_h.db_cr_ind == DR_CR_IND)
   	  {  
       	 

			 
			 if ((strcmp(g_mt_commonsys_params_struct_h.nation_code,"GR")  == 0 ) && (p_mod_ident[0] != 'P'))
				   dcredit_ind  = dcredit_ind + l_pro_acctent_struct_h.fccy_amt;  
			 else	
			 		dcredit_ind  = dcredit_ind + l_pro_acctent_struct_h.lcl_amount;  

		    dacredit_ind = dacredit_ind + atof(l_pro_acctent_struct_h.client);
 	     }

		  if (l_pro_acctent_struct_h.db_cr_ind == CREDIT_IND_A)
        {
			

			  
			  if ((strcmp(g_mt_commonsys_params_struct_h.nation_code,"GR")  == 0 ) && (p_mod_ident[0] != 'P'))
				   ccredit_ind  = ccredit_ind + l_pro_acctent_struct_h.fccy_amt;
			  else
			  		ccredit_ind  = ccredit_ind + l_pro_acctent_struct_h.lcl_amount;

			  	cacredit_ind = cacredit_ind + atof(l_pro_acctent_struct_h.client);
		 }

        strcpy(int_run_seq, l_pro_acctent_struct_h.inden_num);

    } 

	if ( (!strcmp(p_prnt_ind,"H") ) || (!strcmp(p_prnt_ind,"B")) )
	{	
        
         
         
         if (( ( p_mod_ident[0] != 'A')&&( p_mod_ident[0] != 'P')) || (strcmp(g_mt_commonsys_params_struct_h.nation_code,"GR") ))
            {
       			EI_Prn_AEHOff_Foot( fl_AEHndOff,int_run_seq,
           	   		               p_batch_no,
												p_mod_ident,
              	            		   dcredit_ind,ccredit_ind,dacredit_ind,cacredit_ind,
                 	           		   l_debug_info_ptr );
				}

	}

	

        

	if ( (!strcmp(p_prnt_ind,"R") ) || (!strcmp(p_prnt_ind,"B")) )
	{
         EI_Prn_AERpt_Foot(fl_AERpt,chr_l_aeflname,&ccredit_ind,&dcredit_ind,
         					&cacredit_ind, &dacredit_ind,p_mod_ident,
								p_batch_no,&int_r_currpos,
								&int_r_pagenum,chr_h_system_date,g_mt_commonsys_params_struct_h.dom_ccy,
								l_debug_info_ptr);
	}
			
				
	
	
	if ( (!strcmp(p_prnt_ind,"H") ) || (!strcmp(p_prnt_ind,"B")) )
	{
		fclose(fl_AEHndOff);
	}

	if ( (!strcmp(p_prnt_ind,"R") ) || (!strcmp(p_prnt_ind,"B")) )
	{
		if (APL_FAILURE == CO_Proc_RptClose(fl_AERpt, l_debug_info_ptr) )
		{
			fprintf(fl_userlog,"Failed To Close The Accounting Entries Report File\n");
			APL_GOBACK_FAIL
		}
	}		

   
   
   if ( (!strcmp(p_prnt_ind,"H") ) || (!strcmp(p_prnt_ind,"B")) )
   {
    if ( l_acc_ibbs_cond_exists == 0 )
    {
		CO_ProcMonitor(fl_userlog,"Now Appending CRC.....",NULL,NULL);
      if (APL_FAILURE == EI_Prn_AEHOff_Crc(chr_l_aeflname,chr_l_tmpaeflname, fl_userlog, l_debug_info_ptr ))
      {
         fprintf(fl_userlog,"Failed To add CRC to Accounting Entries Hand-off File\n");
         APL_GOBACK_FAIL
      }
	 }
   }
	CO_ProcMonitor(fl_userlog,"Finished Passing Accounting Entries......",NULL,NULL);
   

	APL_GOBACK_SUCCESS;

    

RETURN_FAILURE:
    APL_IF_DEBUG
    {
        CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
B_PassAccEntries().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
    }
   return (APL_FAILURE);

RETURN_SUCCESS:
    APL_IF_DEBUG
    {
      CO_ProcMonitor(APL_OUT_FILE,"Exiting succesfully out of \
B_PassAccEntries().\n",(DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
    }
   return (APL_SUCCESS);
}

int EL_PrnHdrDet(char *p_mod_ident,
					  char *p_batch_no,
			  		  char *p_batch_date,
				 	  int	*p_run_number,
				 	  int *p_total_detail_lines,
				     double *p_creditline,
				     double *p_debitline,
					  DEBUG_INFO_STRUCT_H   **l_debug_info_ptr)
{
	int 						 int_retval = 0;
   PRO_ACCTENT_STRUCT_H     l_pro_acctent_struct_hc;
   PRO_ACCTENT_STRUCT_I     l_pro_acctent_struct_ia;
	PRO_GSEQNUM_STRUCT_H    l_pro_gseqno_struct_h;
 
	memset(&l_pro_gseqno_struct_h, NULL, sizeof(PRO_GSEQNUM_STRUCT_H));

   EXEC SQL BEGIN DECLARE SECTION;
   
   EXEC SQL VAR l_pro_acctent_struct_hc.brnch_cd  IS STRING;
   EXEC SQL VAR l_pro_acctent_struct_hc.inden_num    IS STRING;
   EXEC SQL VAR l_pro_acctent_struct_hc.client    IS STRING;
   EXEC SQL VAR l_pro_acctent_struct_hc.curr_cd  IS STRING;
   EXEC SQL VAR l_pro_acctent_struct_hc.val_date IS STRING;
   EXEC SQL VAR l_pro_acctent_struct_hc.deal_cd   IS STRING;
   EXEC SQL VAR l_pro_acctent_struct_hc.spl_clt_cd   IS STRING;
   EXEC SQL VAR l_pro_acctent_struct_hc.description  IS STRING;
   EXEC SQL VAR l_pro_acctent_struct_hc.proc_num   IS STRING;
   EXEC SQL VAR l_pro_acctent_struct_hc.proc_dt IS STRING;
   EXEC SQL VAR l_pro_acctent_struct_hc.deal_ident    IS STRING;

	EXEC SQL END DECLARE SECTION;

   l_pro_acctent_struct_hc.fccy_amt = 0;
   l_pro_acctent_struct_hc.lcl_amount = 0;
   l_pro_acctent_struct_hc.exchg_rt = 0;
   l_pro_acctent_struct_hc.report_amt = 0;
   l_pro_acctent_struct_hc.report_clt = 0;
   l_pro_acctent_struct_hc.report_tax = 0;
   l_pro_acctent_struct_hc.report_ser = 0;
   l_pro_acctent_struct_hc.rep_exg_rt = 0;

   

   strcpy(l_pro_gseqno_struct_h.sequencename, "AEHOFF");
   strcpy(l_pro_gseqno_struct_h.seq_attrb_a, APL_NULL_STRING);
   strcpy(l_pro_gseqno_struct_h.seq_attrb_b, APL_NULL_STRING);
   strcpy(l_pro_gseqno_struct_h.seq_attrb_c, APL_NULL_STRING);
   l_pro_gseqno_struct_h.seq_stepby = 1;
   l_pro_gseqno_struct_h.seq_start = 1;
   l_pro_gseqno_struct_h.last_seqnum = 99999;
   l_pro_gseqno_struct_h.recycle_ind = RECYCLE_EOD;

   int_retval = CO_RtvNxtSeqNum(&l_pro_gseqno_struct_h,l_debug_info_ptr);

   if (int_retval != APL_FAILURE)
   	*p_run_number = int_retval;
   else
   	{
   		CO_ProcMonitor(APL_OUT_FILE,"Unable to get the Next Sequence Number\n",NULL,NULL);
   		APL_GOBACK_FAIL
   	}

	 EXEC SQL SELECT NVL(COUNT(*),0)
	 INTO :*p_total_detail_lines
    FROM PRO_ACCTENT
    WHERE  PROC_NUM = :p_batch_no
    AND BATCH_DATE  = :p_batch_date
    AND MODULE_IND   = :p_mod_ident
    AND STATUS      = 'G';

    EXEC SQL DECLARE PASSAE_TMP CURSOR FOR
    SELECT * FROM PRO_ACCTENT
    WHERE  PROC_NUM        =:p_batch_no
           AND BATCH_DATE  =:p_batch_date
           AND MODULE_IND   =:p_mod_ident
           AND STATUS      = 'G'
    ORDER BY REC_REFER,to_number(INDEN_NUM);

    EXEC SQL OPEN PASSAE_TMP;

    IS_ANY_ORA_ERROR;

    if (sqlca.sqlcode <0)
    {
      fprintf(APL_OUT_FILE,"DB ERROR IN IACCTENT\n");
      APL_GOBACK_FAIL
    }

    for(;;)
    {
         memset(&l_pro_acctent_struct_hc,NULL,sizeof(PRO_ACCTENT_STRUCT_H));
         memset(&l_pro_acctent_struct_ia,NULL,sizeof(PRO_ACCTENT_STRUCT_I));

         EXEC SQL FETCH PASSAE_TMP INTO
         :l_pro_acctent_struct_hc:l_pro_acctent_struct_ia;

         IS_ANY_ORA_ERROR;

         if (sqlca.sqlcode == 1403)
         	{
               fprintf(APL_OUT_FILE,"NO MORE RECORDS IN IACCTENT.\n");
               break;
         	}

			if(l_pro_acctent_struct_hc.db_cr_ind == CREDIT_IND_A)
				{
					if ((strcmp(g_mt_commonsys_params_struct_h.nation_code,"GR")  == 0 ) && (p_mod_ident[0] =='P')) 
					   *p_creditline = *p_creditline + l_pro_acctent_struct_hc.lcl_amount;
					else
					   *p_creditline = *p_creditline + l_pro_acctent_struct_hc.fccy_amt;
				}
			else if ( l_pro_acctent_struct_hc.db_cr_ind == DR_CR_IND )
				{
					if ((strcmp(g_mt_commonsys_params_struct_h.nation_code,"GR")  == 0 ) && (p_mod_ident[0] =='P')) 
					   *p_debitline = *p_debitline + l_pro_acctent_struct_hc.lcl_amount;
					else
					   *p_debitline = *p_debitline + l_pro_acctent_struct_hc.fccy_amt;
				}
	}
	APL_GOBACK_SUCCESS;

RETURN_FAILURE:
    APL_IF_DEBUG
    {
        CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of EL_PrnHdrDet().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
    }
   return (APL_FAILURE);

RETURN_SUCCESS:
    APL_IF_DEBUG
    {
      CO_ProcMonitor(APL_OUT_FILE,"Exiting succesfully out of  EL_PrnHdrDet().\n",(DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
    }
   return (APL_SUCCESS);
}




 int EI_Prn_AEHOff_Crc( char              *p_aehndoff,
								char					*p_tmpaehndoff,
								FILE					*fl_userlog,
								DEBUG_INFO_STRUCT_H      **l_debug_info_ptr)
 {
	struct sqlca sqlca; 

   int int_l_char_cnt=0, int_l_useed_cnt=0;
   int int_l_loop_cnt=0, int_l_crc_cnt=5;
   char chr_l_str[AE_MAX_REC_LEN]			=	APL_NULL_STRING;
   char chr_l_str_tmp[AE_MAX_REC_LEN]		=	APL_NULL_STRING;
   char chr_gltmppath[PATH_LENGTH]				= APL_NULL_STRING;
   int int_l_crc;
   char chr_l_str_lst_chr;
   FILE *fpr, *fpo;

	short	  l_condExists = 0;

   
   if ((fpr = fopen(p_aehndoff,"r"))  == (FILE *) NULL)
   {
      CO_InsertErr(l_debug_info_ptr,ERR_FILE_NOTFND,APL_NULL_STRING,
							APL_NULL_STRING,APL_NULL_STRING,
							__LINE__,__FILE__);
      APL_GOBACK_FAIL
   }

   
   if ((fpo = fopen(p_tmpaehndoff,"w"))  == (FILE *) NULL)
   {
      CO_InsertErr(l_debug_info_ptr,ERR_FILE_NOTFND,APL_NULL_STRING,
							APL_NULL_STRING,APL_NULL_STRING,
							__LINE__,__FILE__);
      APL_GOBACK_FAIL
   }

   while( (fgets(chr_l_str_tmp,AE_MAX_REC_LEN, fpr) ) != NULL)
   {
          int_l_char_cnt=0;
          
         while ( (chr_l_str_tmp[int_l_char_cnt]) != 10) 
			{
				chr_l_str[int_l_char_cnt] = chr_l_str_tmp[int_l_char_cnt];
				int_l_char_cnt++;
			}
			chr_l_str[int_l_char_cnt] = '\0';

         
         
         if ((chr_l_str[0] == '2'))
         {

				

				l_condExists = 0;

				if ( APL_SUCCESS == CO_Chk_CntryEnabled("ACC_ENTRIES","CRC_FLEXCUBE",&l_condExists,l_debug_info_ptr))
				{
					if (l_condExists == 0)
					{
            		CO_BBX_CRC(chr_l_str, int_l_char_cnt, int_l_useed_cnt++,&int_l_crc);
						fprintf(fpo,"%s%s%X\n",chr_l_str,AE_SEP_STR,int_l_crc);
					}
					else
					{
            		CO_BBX_CRC(chr_l_str, int_l_char_cnt -1, int_l_useed_cnt++,&int_l_crc);
						fprintf(fpo,"%s%04x%s%s\n",chr_l_str,int_l_crc,AE_SEP_STR,AE_SEP_STR);   
					}	
				}
				else
				{
					APL_GOBACK_FAIL
				}
         }
			else
			{
				fprintf(fpo,"%s\n",chr_l_str);
			}
   }
   fclose(fpr);
   fclose(fpo);

APL_GOBACK_SUCCESS;



RETURN_FAILURE:
	 unlink(p_aehndoff);
    APL_IF_DEBUG
    {
        CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
EI_Prn_AEHOff_Crc().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
    }
   return (APL_FAILURE);

RETURN_SUCCESS:
	 unlink(p_aehndoff);
    APL_IF_DEBUG
    {
      CO_ProcMonitor(APL_OUT_FILE,"Exiting succesfully out of \
EI_Prn_AEHOff_Crc().\n",(DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
    }
   return (APL_SUCCESS);
}







int CO_BBX_CRC ( char *ptext, int plen, int pseed ,int *pretval)
{
    union SEED
   {
      unsigned short uWholeWord;  
      struct
      {
          unsigned char chr_high;
         unsigned char chr_low;
      }
      ucByte;
   }
   uCRC;
   unsigned i, j;
   unsigned uFlag;
   uCRC.uWholeWord = pseed;
   for (i = 0; i < plen; i++)
    {
       
       uCRC.ucByte.chr_low ^= ptext[i]; /* Bageshri --10GM */

       for (j = 0; j < 8; j++)                 
       {
         uFlag = uCRC.uWholeWord & 1;        
         uCRC.uWholeWord = uCRC.uWholeWord >> 1;
         if (uFlag)                          
         {
            uCRC.uWholeWord ^= 0xA001;      
         }
       }
     }
   *pretval = uCRC.uWholeWord;

   return (APL_SUCCESS);
}

