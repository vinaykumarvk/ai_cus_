/*
 *    COPYRIGHT NOTICE
 *
 *    Copyright 2020 Intellect Design Arena Ltd. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Intellect Design Arena Ltd. and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Intellect Design Arena Ltd.
 */
/*********************************************************************
 *
 * Module Name         :      Deal Processing
 *
 * File Name           :      EarlyPyinRpt.pc
 *
 * Description         :      Contains Functions Related to Early payin rport generation
 *
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author              Description                 RFS No.
 * ---------   --------  ---------------  -----------------------        ---------
 * 06/05/2008   1.0        Harvinder Singh        New File              Base Version
 * 15/02/2011   1.0.3.8    Vilin Patil     Changes were done such
                                           that only those client
                                           records will be picked
                                           whose earlypayindays is 1      ISKB_4678
 *24/03/2022    1.1        kotub           Linux Migration    Kotak Implementation										   
 *************************************************************************/

#include<stdio_64.h>
#include "Intellect_Common.h"
#include "Intellect_Interface.h"
#include "Intellect_Error.h"
//Added By Tarkeshwar--START
#include <sys/types.h>
#include <dirent.h>
//Added By Tarkeshwar--END

#include "DL_Csd.h"
#include "CO_OthStructdef.h"
#include "CR_Header_A.h"
#include "CR_Common.h"
//#include "BT_Common.h"
//#include "CO_IndStructdef.h"
//#include "CO_Commdef.h"

#define DATA_FIELD_SEPRTR ''
#define DATA_VALUE_SEPRTR ''
#define C_COMMITSIZE 20

/* Added by kotubabu for Linux Migration-Start*/
#ifdef OS_LINUX
FILE *g_flogfile,*g_rpt_file,*g_rpt_file_T2T;
#else
FILE* g_flogfile = APL_OUT_FILE;
FILE* g_rpt_file = APL_OUT_FILE;
FILE* g_rpt_file_T2T = APL_OUT_FILE;
#endif
/* Added by kotubabu for Linux Migration-End*/

char  **temp = ( char **)NULL;
int l_count = 0;
int l_btch_no = 0;

char	chr_g_log_buff[500]	=	APL_NULL_STRING;
char l_date[21] = APL_NULL_STRING; // contain the system date
char l_user[APL_USERID_LEN] = APL_NULL_STRING;

/* ISKB-4678: VILIN 15-02-2011 Start */
	  char chr_l_early_payindays[20] = APL_NULL_STRING;
	  short i_l_early_payindays = 0;
/* ISKB-4678: VILIN 15-02-2011 End */



// Report path all the rports would share the same path (global variable) 
/*static char chr_l_rep_Path[FILENAME_LEN_A]   = APL_NULL_STRING;*/
static char chr_l_rep_Path[200]   = APL_NULL_STRING;		/* Changed for SIT issue fix */

EXEC SQL INCLUDE SQLCA.H;

/* Function Declaraion for generation the Early Payin Reports  */
static int	Fund_Bse( char *p_settlement_no,FILE *g_flogfile, DEBUG_INFO_STRUCT_H	**l_debug_info_ptr);
static int	Fund_Nse( char *p_settlement_no, char *p_charges,char *p_deal_date,FILE *g_flogfile, DEBUG_INFO_STRUCT_H	**l_debug_info_ptr); // Updated by Asmeet for  12174 Interoperability changes 
static int	Security_Bse(char *p_settlement_no,FILE *g_flogfile, DEBUG_INFO_STRUCT_H	**l_debug_info_ptr);
static int	Security_Nse(char *p_settlement_no,char *p_deal_date,FILE *g_flogfile, DEBUG_INFO_STRUCT_H	**l_debug_info_ptr);
static int  Fund_Bse_New_Format( char *p_settlement_no,char *p_deal_date,FILE *g_flogfile, DEBUG_INFO_STRUCT_H	**l_debug_info_ptr); /* ISKB-1721: ASHISH 22-08-2008 */
//Added For MCS Enhancement By Vamshi ---Start
static int	Fund_Mcs( char *p_settlement_no,char *p_deal_date,FILE *g_flogfile, DEBUG_INFO_STRUCT_H	**l_debug_info_ptr);
static int	Security_Mcs(char *p_settlement_no,char *p_deal_date,FILE *g_flogfile, DEBUG_INFO_STRUCT_H	**l_debug_info_ptr);
//Added For MCS Enhancement By Vamshi ---Start
int getEP_FileNameCNT_Funds(char *s_SettlNo, char *s_FileName); // Tarkeshwar for settlement no wise conf file generation
int getEP_FileNameCNT_Securities(char *sFileName, char *sBusinessDate); // Tarkeshwar for settlement no wise conf file generation

/*12174 Interoperability 28/05/2019 */
char chr_trd_setl_ind[2] = APL_NULL_STRING;
char sett_no1[15]=APL_NULL_STRING;
char sett_no2[15]=APL_NULL_STRING;
char p_settlment_no1[20] =APL_NULL_STRING ;

int main(int argc,char **argv) //AIX - Warnings Removal
{	
   /* Added by kotubabu for Linux Migration -Start*/
      #ifdef OS_LINUX
         g_flogfile = APL_OUT_FILE;
         g_rpt_file = APL_OUT_FILE;
         g_rpt_file_T2T = APL_OUT_FILE;
      #endif	
    /* Added by kotubabu for Linux Migration -End*/
	 DEBUG_INFO_STRUCT_H **l_debug_info_ptr = (DEBUG_INFO_STRUCT_H **) NULL;
	 l_debug_info_ptr = (DEBUG_INFO_STRUCT_H **)calloc(1,sizeof(DEBUG_INFO_STRUCT_H *)); 

	 int l_int_num = 0;
	 int tol_limit = 0;
	 char *p_user = NULL;
	 char *p_filename = NULL;
 	 char l_deal_date[20]=APL_NULL_STRING;


	 char l_exchange[10] = APL_NULL_STRING;
	 char l_settlment_no[16] = APL_NULL_STRING;
	 char l_rpt_type[8]= APL_NULL_STRING;
	 char l_charges[8]= APL_NULL_STRING; //HB_12174

	 char  ToleranceString[100] = APL_NULL_STRING;	

 	// For reading ini_sun.cfg file (configuration file)
	char  chr_l_inifile[FILENAME_LEN_A]   = APL_NULL_STRING;
	FILE  *l_ptr_ini_file = NULL;
	  
	 FILE *l_logfile = (FILE *)NULL;

 	// initializing chr_l_inifile to null
 	memset(chr_l_inifile,NULL,sizeof(chr_l_inifile));
	 
	if(CO_Get_DBConnect(l_debug_info_ptr) == APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}

/***********	Processing INPUT PARAMETERS	START	**********/


        //12174 Interoperability 28/05/2019
		EXEC SQL SELECT MAP_DESC INTO :chr_trd_setl_ind FROM PRO_SGENSTAT
			 WHERE MAP_TYPE = 'MATCHING_EXCHANGE' 
			 AND MAP_VAL = 'MATCHING_EXCHANGE';

		IS_ANY_ORA_ERROR
		//12174 Interoperability  28/05/2019
		Alert("chr_trd_setl_ind [%s] \n",chr_trd_setl_ind);


	if (APL_FAILURE == CO_Rtv_RptFileName( "EPR",
				APL_LOGFILE_DESC,
				100,
				argv[5],
				argv,
				&g_flogfile,
				l_debug_info_ptr ) ) 
		{
			CO_ProcMonitor(g_flogfile, "Failure from CO RTY:", l_debug_info_ptr, NULL);
			APL_GOBACK_FAIL
		} 



	if(BT_Status_Update(argv[0],
				argv[1],
				argv[2],
				APL_STARTED_STATUS,
				l_debug_info_ptr) ==APL_FAILURE)
	{
		APL_GOBACK_FAIL
	} 


	
	if(APL_FAILURE == CO_SplitStr(argv[9],
				'|',
				&l_int_num,&temp))
		{
			CO_ProcMonitor(g_flogfile, "Failure from StrSplitFn", l_debug_info_ptr, NULL);
			APL_GOBACK_FAIL

		}
		
    if(sqlca.sqlcode)
		{
			APL_GOBACK_FAIL
		}

// Updated by Asmeet for 12174 Interoperability changes starts
    if(l_int_num != 5)
		{
			printf("\n total no of arguments are |%d|", l_int_num);
			CO_ProcMonitor(g_flogfile, "Improper Number of arguements", l_debug_info_ptr, NULL);
			APL_GOBACK_FAIL
		}

	printf("\n no of arguments are |%d|", l_int_num);
	printf("\n  arguments are A--|%s|", temp[0]);
	printf("\n  arguments are B--|%s|", temp[1]);
	printf("\n  arguments are C--|%s|", temp[2]);
	printf("\n  arguments are D--|%s|", temp[3]);
	


	strcpy(l_user,argv[3]); 
	strcpy(l_date,argv[2]);
	printf("\n\n***********USER IS |%s|",l_user);
	printf("\n********DATE IS********|%s|",l_date);

	strcpy(l_rpt_type, temp[0]);
        strcpy(l_exchange, temp[1]);
	strcpy(l_settlment_no, temp[2]);
	strcpy(l_charges, temp[3]);
	strcpy(l_deal_date, temp[4]);

if(strcmp(l_deal_date,APL_NULL_STRING) == 0)
		strcpy(l_deal_date,"%");

	printf("\n\n Selected Report Type is  |%s|", l_rpt_type);
	printf("\n Selected Exchange Code is  |%s|",l_exchange);
	printf("\n Selected settlment Number is  |%s| ",l_settlment_no);
		printf("\n Selected Charges  |%s| \n",l_charges);
		printf("\n Selected Charges  |%s| \n",l_deal_date);
// Updated by Asmeet for 12174 Interoperability changes Ends	
	/* ISKB-4678: VILIN 15-02-2011 Start */

	EXEC SQL SELECT MAP_VAL into :chr_l_early_payindays :i_l_early_payindays
	FROM PRO_SGENSTAT
	WHERE MAP_TYPE = 'EARLYPAYINRPT' AND NATION_CODE =(SELECT NATION_CODE FROM mt_common_sys_params);

	printf("\n error after gettting from PRO_SGENSTAT is %d ",sqlca.sqlcode);
	fflush(stdout);

	IS_ANY_ORA_ERROR

	/* ISKB-4678: VILIN 15-02-2011 End */

   /* ISKB-1721: ASHISH 22-08-2008 Start */
       if ( CO_RtvSysParams(l_debug_info_ptr) == APL_FAILURE)
       {
                printf("\nReturned unsuccessfully from CO_RtvSysParams processtion\n");
                APL_GOBACK_FAIL
       }
	   /* ISKB-1721: ASHISH 22-08-2008 End */

	/* Geting the report Path from configuration file 
		this path would be same for all the early payin reports  -- Start*/
	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

	if ((l_ptr_ini_file = fopen(chr_l_inifile,"r")) == NULL)
		  return(APL_FAILURE);
	if (CO_ReadToken(l_ptr_ini_file,"INTL_REP_PATH",chr_l_rep_Path,l_debug_info_ptr) != APL_SUCCESS)
		  return(APL_FAILURE);

	fclose(l_ptr_ini_file); // closing the ini file	
	
	printf("\n Report Path  --  |%s|",chr_l_rep_Path);

        sprintf(chr_g_log_buff," Report Path -- |%s| \n",chr_l_rep_Path);
        CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);
	//	got the report path -- End 

	
	// Calling the function to generate the report based on Exchange_code and Report type (CASH/SECURITY) accordingly
	if( !strcmp(l_rpt_type,"CASH") ) // when Report type is CASH (From front end user has selected Fund)
	{
		// When exchange code is BSE
		if( !strcmp(l_exchange,"BSE"))
		{
			/* ISKB-1721: ASHISH 22-08-2008 Start */
		  IF_COND_EXISTS("EARLY_PAYIN_REPORT","BSE_FUND_NEW_FORMAT")
		  {
			CO_ProcMonitor(g_flogfile, "Entering function Fund_Bse_New_Format()", l_debug_info_ptr, NULL);
			if( Fund_Bse_New_Format(l_settlment_no,l_deal_date,g_flogfile,l_debug_info_ptr)   ==  APL_FAILURE )
			{
				CO_ProcMonitor(g_flogfile, "Returned from Fund_Bse_New_Format() with failure", l_debug_info_ptr, NULL);
				APL_GOBACK_FAIL
			}

		  }
		  else
		  {
			CO_ProcMonitor(g_flogfile, "Entering function Fund_Bse()", l_debug_info_ptr, NULL);
			if( Fund_Bse(l_settlment_no,g_flogfile,l_debug_info_ptr)   ==  APL_FAILURE )
			{
				CO_ProcMonitor(g_flogfile, "Returned from Fund_Bse() with failure", l_debug_info_ptr, NULL);
				APL_GOBACK_FAIL
			}
		}
		  /* ISKB-1721: ASHISH 22-08-2008 End */
		}
		// When exchange code is NSE
		else if( !strcmp(l_exchange,"NSE"))
		{
			CO_ProcMonitor(g_flogfile, "Entering function Fund_Nse()", l_debug_info_ptr, NULL);
			if( Fund_Nse(l_settlment_no,l_charges,l_deal_date,g_flogfile,l_debug_info_ptr)   ==  APL_FAILURE )
			{
				CO_ProcMonitor(g_flogfile, "Returned from Fund_Nse() with failure", l_debug_info_ptr, NULL);
				APL_GOBACK_FAIL
			}
		}
		//Added For MCS Enhancement By Vamshi ---Start
		// When exchange code is MCS
		else if( !strcmp(l_exchange,"MCS"))
		{
			CO_ProcMonitor(g_flogfile, "Entering function Fund_Mcs()", l_debug_info_ptr, NULL);
			if( Fund_Mcs(l_settlment_no,l_deal_date,g_flogfile,l_debug_info_ptr)   ==  APL_FAILURE )
			{
				CO_ProcMonitor(g_flogfile, "Returned from Fund_Mcs() with failure", l_debug_info_ptr, NULL);
				APL_GOBACK_FAIL
			}
		}
		//Added For MCS Enhancement By Vamshi ---End
		// when exchange code other than BSE/NSE/MCS
		else
		{
			CO_ProcMonitor(g_flogfile, "No Record Found", l_debug_info_ptr, NULL);
		}
	}
	else // when Report type is SECURITY (From front end user has selected Security)
	{
		// When exchange code is BSE
		if( !strcmp(l_exchange,"BSE"))
		{
			CO_ProcMonitor(g_flogfile, "Entering function Security_Bse()", l_debug_info_ptr, NULL);
			if( Security_Bse(l_settlment_no,g_flogfile,l_debug_info_ptr)   ==  APL_FAILURE )
			{
				CO_ProcMonitor(g_flogfile, "Returned from Security_Bse() with failure", l_debug_info_ptr, NULL);
				APL_GOBACK_FAIL
			}
		}
		// When exchange code is NSE
		else if( !strcmp(l_exchange,"NSE"))
		{
			CO_ProcMonitor(g_flogfile, "Entering function Security_Nse()", l_debug_info_ptr, NULL);
			if( Security_Nse(l_settlment_no,l_deal_date,g_flogfile,l_debug_info_ptr)   ==  APL_FAILURE )
			{
				CO_ProcMonitor(g_flogfile, "Returned from Security_Nse() with failure", l_debug_info_ptr, NULL);
				APL_GOBACK_FAIL
			}
		}
		//Added For MCS Enhancement By Vamshi ---Start
                // When exchange code is MCS
		else if( !strcmp(l_exchange,"MCS"))
		{
			CO_ProcMonitor(g_flogfile, "Entering function Security_Mcs()", l_debug_info_ptr, NULL);
			if( Security_Mcs(l_settlment_no,l_deal_date,g_flogfile,l_debug_info_ptr)   ==  APL_FAILURE )
			{
				CO_ProcMonitor(g_flogfile, "Returned from Security_Mcs() with failure", l_debug_info_ptr, NULL);
				APL_GOBACK_FAIL
			}
		}
                //Added For MCS Enhancement By Vamshi ---End
		// when exchange code other than BSE/NSE/MCS
		else
		{
			CO_ProcMonitor(g_flogfile, "No Record Found", l_debug_info_ptr, NULL);
		}
	}
	

	RETURN_SUCCESS :
		CO_ProcMonitor(g_flogfile, "SUCESS IN MAIN", l_debug_info_ptr, NULL);

	// For marking the  status completed
	if(BT_Status_Completed(argv[0],
				argv[1],
				argv[2],
				l_debug_info_ptr)   ==  APL_FAILURE )
	{
		APL_GOBACK_FAIL
	}
	CO_Proc_RptClose(g_flogfile, l_debug_info_ptr);

	EXEC SQL COMMIT WORK;

	if(sqlca.sqlcode != 0)APL_GOBACK_FAIL
		exit(0);

	RETURN_FAILURE    :
		CO_Proc_RptClose(g_flogfile, l_debug_info_ptr);
	exit(-1);
}

/* Definition of all the functions to generate the reports starts from here */
static int  Fund_Bse(char *p_settlment_no,FILE *g_flogfile, DEBUG_INFO_STRUCT_H   **l_debug_info_ptr)
{
	char chr_l_sysdate[APL_DATE_LEN]  =	APL_NULL_STRING;
	char chr_l_rep_name[FILENAME_LEN_A]   = APL_NULL_STRING; 
   	
	char chr_l_member_id[10] = APL_NULL_STRING;
	short i_l_member_id = 0;
    
	char chr_l_seq_num[5] = APL_NULL_STRING;
	char chr_l_temp_seq_num[5] = APL_NULL_STRING;

	char chr_l_record_row[600] = APL_NULL_STRING;
	short i_l_record_row = 0;

        /* ISKB-1721: ASHISH 22-08-2008 */
	char chr_l_final_record_row[650] = APL_NULL_STRING; 
	short i_l_final_record_row = 0;

	int int_return_val=0;
	char chr_l_seqnum_a[10] = APL_NULL_STRING;

	// for report header
	char chr_l_rep_name_for_header[FILENAME_LEN_A]   = APL_NULL_STRING; 
	char chr_l_rpt_header[100] = APL_NULL_STRING;
	char chr_l_rpt_header_date[APL_DATE_LEN]  =	APL_NULL_STRING;

	// for report footer 
	char chr_l_rpt_footer[100] = APL_NULL_STRING;
	char chr_l_footer_count[100] = APL_NULL_STRING;
	char chr_l_footer_rpt_sum[100] = APL_NULL_STRING;
	
	FILE  *l_ptr_rep_file  =  NULL; 
	INTL_REPT_STRUCT_H   *l_intl_rept_struct_ha  =NULL;

	PRO_GSEQNUM_STRUCT_H    l_pro_gseqno_struct_h; // For sequence (resetable sequence)

	l_intl_rept_struct_ha = (INTL_REPT_STRUCT_H *) calloc(1,sizeof(INTL_REPT_STRUCT_H));

	printf("\n Entering Fund_Bse() ");
	printf("\n ** p_settlment_no **  -- |%s|",p_settlment_no);

	// Getting the system date
	/* EXEC SQL SELECT to_char(SYS_DATE,'DDMMYY') INTO :chr_l_sysdate FROM PRO_SYS_DATE; */
	EXEC SQL SELECT to_char(SYS_DATE,'DDMMYYYY') INTO :chr_l_sysdate FROM PRO_SYS_DATE;
	
	IS_ANY_ORA_ERROR

	printf("\n chr_l_sysdate  --  |%s|",chr_l_sysdate);
	sprintf(chr_g_log_buff,"System date -- |%s| \n",chr_l_sysdate);
     CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	// For getting the member id of the bank
	/* EXEC SQL SELECT MAP_DESC  into :chr_l_member_id :i_l_member_id 
		FROM PRO_SGENSTAT  
			WHERE MAP_TYPE = 'MEMBER_ID' AND MAP_VAL = 'BSE' ; */
			
	   EXEC SQL SELECT DECODE(LENGTH(MAP_DESC),3,LPAD(MAP_DESC,4,0),MAP_DESC)  
	   into :chr_l_member_id :i_l_member_id 
		FROM PRO_SGENSTAT  
			WHERE MAP_TYPE = 'MEMBER_ID' AND MAP_VAL = 'BSE' ;
	IS_ANY_ORA_ERROR
	
		
	/*SELECT MAP_VAL into :chr_l_member_id :i_l_member_id FROM PRO_SGENSTAT 
	WHERE MAP_TYPE = 'MEMBER_ID' 
	AND MAP_DESC = (SELECT CUSTODY_CLT_CD FROM MT_CORE_SYS_PARAMS) ; */

	printf("\n chr_l_member_id  --  |%s|",chr_l_member_id);
	sprintf(chr_g_log_buff,"Member ID -- |%s| \n",chr_l_member_id);
        CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	// preparing structure for getting the sequence value from a reset able sequence 
	strcpy(l_pro_gseqno_struct_h.sequencename, "EARLYPYINRPT_BSE");
	strcpy(l_pro_gseqno_struct_h.seq_attrb_a, APL_NULL_STRING);
	strcpy(l_pro_gseqno_struct_h.seq_attrb_b, APL_NULL_STRING);
	strcpy(l_pro_gseqno_struct_h.seq_attrb_c, APL_NULL_STRING);

	l_pro_gseqno_struct_h.seq_stepby = 1;
	l_pro_gseqno_struct_h.seq_start = 1;
	l_pro_gseqno_struct_h.last_seqnum = 999;
	l_pro_gseqno_struct_h.recycle_ind = RECYCLE_EOD;

	// geting the sequence number (we have used this function because we want to reset the sequence at EOD)
	int_return_val = CO_RtvNxtSeqNum(&l_pro_gseqno_struct_h,l_debug_info_ptr); 

	if (int_return_val != APL_FAILURE)
		sprintf(chr_l_seqnum_a,"%d",int_return_val);
	else
		APL_GOBACK_FAIL

	strcpy(chr_l_seq_num,chr_l_seqnum_a); 

	printf("\n chr_l_seq_num -1- --  |%s|",chr_l_seq_num);
	// constructing the sequence number (should be of length 3) for file name 
	if (strlen(chr_l_seq_num) == 1)
	{
		strcpy(chr_l_temp_seq_num,"00");
		strcat(chr_l_temp_seq_num,chr_l_seq_num);
	}
	else if (strlen(chr_l_seq_num) == 2)
	{
		strcpy(chr_l_temp_seq_num,"0");
		strcat(chr_l_temp_seq_num,chr_l_seq_num);
	}
	else // having of length 3
	{
		strcpy(chr_l_temp_seq_num,chr_l_seq_num);
	}

	printf("\n chr_l_seq_num -2- --  |%s|",chr_l_temp_seq_num);
	sprintf(chr_g_log_buff,"Sequence Number -- |%s| \n",chr_l_temp_seq_num);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	// Constructing file name 
	/* 12174 - Interoperability changes : changed format :: EPFDDMMYYYY_XXXX.csv */
	/* strcat(chr_l_rep_name,"EP"); */
	strcat(chr_l_rep_name,"EPF");   /* 12174 - Interoperability changes */
	strcat(chr_l_rep_name,chr_l_sysdate);
	strcat(chr_l_rep_name,"_");    /* 12174 - Interoperability changes */
	strcat(chr_l_rep_name,chr_l_member_id);
	/* strcat(chr_l_rep_name,chr_l_temp_seq_num); */   /* 12174 - Interoperability changes */
	strcat(chr_l_rep_name,".csv");    /* 12174 - Interoperability changes */
	
	strcpy(chr_l_rep_name_for_header,chr_l_rep_name); // for using the rep name in report header
	printf("\n Report Name --  |%s|",chr_l_rep_name);
	sprintf(chr_g_log_buff,"Report Name -- |%s| \n",chr_l_rep_name);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	strcat(chr_l_rep_Path,chr_l_rep_name); // forming final path with report name

	printf("\n Final Report Name and path --  |%s|",chr_l_rep_Path);
	sprintf(chr_g_log_buff," Final Report Name and path -- |%s| \n",chr_l_rep_Path);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	// For opening the file in write mode
	if ((l_ptr_rep_file = fopen(chr_l_rep_Path,"w")) == NULL)
   		return(APL_FAILURE);

	// setting the memory for report structure that will b used to access the file in batch monitor
	memset(l_intl_rept_struct_ha,NULL,sizeof(INTL_REPT_STRUCT_H));

	strcpy(l_intl_rept_struct_ha->report_name,chr_l_rep_name);
   	strcpy(l_intl_rept_struct_ha->report_desc, "Early Pay in Report");
   	strcpy(l_intl_rept_struct_ha->report_date, l_date);
   	l_intl_rept_struct_ha->report_width = 100;
   	strcpy(l_intl_rept_struct_ha->task_desc, "EarlyPyinRpt");
   	strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
   	strcpy(l_intl_rept_struct_ha->usr, l_user);

	if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))
        APL_GOBACK_FAIL

	// Constructing the report header  --Start
		EXEC SQL SELECT TO_CHAR(SYS_DATE,'#'||'DD-MM-YY') INTO :chr_l_rpt_header_date FROM PRO_SYS_DATE;
			IS_ANY_ORA_ERROR
		
		printf("\n chr_l_rpt_header_date  --  |%s|",chr_l_rpt_header_date);
		
		strcpy(chr_l_rpt_header,chr_l_rpt_header_date); 
		strcat(chr_l_rpt_header,chr_l_temp_seq_num); // putting the sequence number
		strcat(chr_l_rpt_header,"EQ"); //putting the Segmenttype
		strcat(chr_l_rpt_header,chr_l_rep_name_for_header); //putting the rpt name 

		printf("\n chr_l_rpt_header -1- --  |%s|",chr_l_rpt_header);
		sprintf(chr_g_log_buff,"Report header -- |%s| \n",chr_l_rpt_header);
	    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

		// Writing the rpt header in file
		fprintf(l_ptr_rep_file,"%s\n",chr_l_rpt_header);
	// Constructing the report header  --End

	// Cursor for fetching the report data (Middle part of the report) -- start
	EXEC SQL DECLARE cur_bse_fund CURSOR FOR
		SELECT COL1,COL3||COL4 
		FROM 
		(
			/* ISKB-4678: VILIN 15-02-2011 Start */
			(SELECT 'B' AS COL0,
			SUBSTR(A.SETTLEMENT_NO,5,3)||'/'||'20'||SUBSTR(A.SETTLEMENT_NO,1,2)||'20'||SUBSTR(A.SETTLEMENT_NO,3,2) AS COL1,
			/* '0850' AS COL2, */
			/* RPAD(B.CLN_EXCH_MAP_CODE,11) AS COL3, */
			RPAD(B.CLN_EXCH_MAP_CODE,12) AS COL3,     /* 12174 - Interoperability changes */
			//REPLACE(REPLACE(TO_CHAR(SUM(NVL(NET_AMT,0)),'999999999990.99'),'.',''),' ','0') AS COL4  /*HB_12151 Interoperability changes*/
			REPLACE(SUM(NVL(NET_AMT,0)),'.','') AS COL4
			FROM DL_DEAL A,MT_CLI_EXCH_MAP B,IV_CLIENTSETUP C
			WHERE
			A.DEAL_STAT IN ('CC','SS','MS','CS') AND 
			A.DEAL_CD = '4' AND
			A.DL_CLASS = '1' AND
			A.CLH_FLG = 'C' AND
			A.CLIENT = B.CLN_CODE AND
			A.EXCH_CODE = B.CLN_EXCH_CODE AND
			A.MKT_TYPE IN ('45','57') AND
			A.SETTLEMENT_NO = :p_settlment_no AND			
			A.CLIENT = C.CLIENT AND
			C.PAY_IN_DAY = :chr_l_early_payindays AND
			A.CLIENT||A.IDENTIY_NO not in (SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA')	
			GROUP BY A.SETTLEMENT_NO,B.CLN_EXCH_MAP_CODE)
			/* ISKB-4678: VILIN 15-02-2011 End */
		)ORDER BY COL0 ;

	// opening the cursor
	EXEC SQL OPEN cur_bse_fund;
	CO_ProcMonitor(g_flogfile,"Opened Cursor cur_bse_fund",NULL,NULL);

	IS_ANY_ORA_ERROR

	// Processing the cursor data -- (Printing the data into file)
	for(;;)
	{
		EXEC SQL FETCH cur_bse_fund INTO :chr_l_final_record_row:i_l_final_record_row,:chr_l_record_row:i_l_record_row;
												  
		sprintf(chr_g_log_buff,"Fetched cur_bse_fund sqlca.sqlcode is :%d:",sqlca.sqlcode);
		CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);
		IS_ANY_ORA_ERROR_CURSOR

		// constructing the final row 
		strcat(chr_l_final_record_row,chr_l_member_id);
		strcat(chr_l_final_record_row,chr_l_record_row);

		// Writing to report file
		fprintf(l_ptr_rep_file,"%s\n",chr_l_final_record_row);

		if (sqlca.sqlcode == 1403)
		{
            CO_ProcMonitor(g_flogfile,"No more Records ",NULL,NULL);
            EXEC SQL CLOSE cur_bse_fund;
            APL_GOBACK_SUCCESS;
		}
	} 
	// Cursor for fetching the report data (Middle part of the report) -- End 

	// Constructing the report footer  --Start   
	/* ISKB-4678: VILIN 15-02-2011 Start */
		EXEC SQL SELECT '###'||COUNT (COUNT(*)) into :chr_l_footer_count 
				  FROM DL_DEAL A,MT_CLI_EXCH_MAP B,IV_CLIENTSETUP C
				  WHERE
					  A.DEAL_STAT IN ('CC','SS','MS','CS') AND
					  A.DEAL_CD = '4' AND
					  A.DL_CLASS = '1' AND
					  A.CLH_FLG = 'C' AND
					  A.CLIENT = B.CLN_CODE AND
					  A.EXCH_CODE = B.CLN_EXCH_CODE AND
					  A.MKT_TYPE IN ('45','57') AND
					  A.SETTLEMENT_NO = :p_settlment_no AND
					  A.CLIENT =C.CLIENT AND
			          	  C.PAY_IN_DAY = :chr_l_early_payindays AND
					  A.CLIENT||A.IDENTIY_NO not in (SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA') 
					  GROUP BY A.SETTLEMENT_NO,B.CLN_EXCH_MAP_CODE;
	/* ISKB-4678: VILIN 15-02-2011 End */
			IS_ANY_ORA_ERROR

		printf("\n chr_l_footer_count -1- --  |%s|",chr_l_footer_count);
		sprintf(chr_g_log_buff,"Report footer count -- |%s| \n",chr_l_footer_count);
			CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

		strcpy(chr_l_rpt_footer,chr_l_footer_count); // putting the count to report footer

		/* ISKB-4678: VILIN 15-02-2011 Start */
		EXEC SQL SELECT NVL(REPLACE(REPLACE(TO_CHAR(SUM(NVL(NET_AMT,0)),'999999999990.99'),'.',''),' ','0'),0) 
				into :chr_l_footer_rpt_sum
			      FROM DL_DEAL A,MT_CLI_EXCH_MAP B,IV_CLIENTSETUP C
				  WHERE
					  A.DEAL_STAT IN ('CC','SS','MS','CS') AND
					  A.DEAL_CD = '4' AND
					  A.DL_CLASS = '1' AND
					  A.CLH_FLG = 'C' AND
					  A.CLIENT = B.CLN_CODE AND
					  A.EXCH_CODE = B.CLN_EXCH_CODE AND
					  A.MKT_TYPE IN ('45','57')
					  AND A.SETTLEMENT_NO = :p_settlment_no AND 
					  A.CLIENT =C.CLIENT AND
			          	  C.PAY_IN_DAY = :chr_l_early_payindays AND
					  A.CLIENT||A.IDENTIY_NO not in (SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA');
   				IS_ANY_ORA_ERROR

			/* ISKB-4678: VILIN 15-02-2011 End */

		printf("\n chr_l_footer_rpt_sum -1- --  |%s|",chr_l_footer_rpt_sum);
		sprintf(chr_g_log_buff,"Report footer sum -- |%s| \n",chr_l_footer_rpt_sum);
			CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

		if(! strcmp(chr_l_footer_rpt_sum,"0") ) // when zero
			strcat(chr_l_rpt_footer," "); // putting early paying sum as blank to report footer
		else
			strcat(chr_l_rpt_footer,chr_l_footer_rpt_sum); // putting early paying sum to report footer

		printf("\n chr_l_rpt_footer -1- --  |%s|",chr_l_rpt_footer);
		
		sprintf(chr_g_log_buff,"Report footer -- |%s| \n",chr_l_rpt_footer);
	    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

		// Writing the rpt footer in file
		fprintf(l_ptr_rep_file,"%s\n",chr_l_rpt_footer);
	// Constructing the report footer  --End

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:
		fclose(l_ptr_rep_file); // Closing the file.
		CO_ProcMonitor(g_flogfile, "Leaving Fund_Bse() with success", l_debug_info_ptr, NULL);
		printf("\n Leaving Fund_Bse() with success \n");
	return(APL_SUCCESS);
	
	RETURN_FAILURE:
		fclose(l_ptr_rep_file); // Closing the file.
		printf("\n Error in Fund_Bse() \n");
	return(APL_FAILURE);
}
// Updated by Asmeet for 12174 Interoperability changes
static int  Fund_Nse(char *p_settlment_no, char *p_charges,char *p_deal_date,FILE *g_flogfile, DEBUG_INFO_STRUCT_H   **l_debug_info_ptr)
{
	char chr_l_sysdate[APL_DATE_LEN]  =	APL_NULL_STRING;
	char chr_l_sysdate1[APL_DATE_LEN]  =	APL_NULL_STRING;//added by HM
	char chr_l_rep_name[FILENAME_LEN_A]   = APL_NULL_STRING; 
	char chr_l_rep_nameT2T[FILENAME_LEN_A]   = APL_NULL_STRING; 
char chr_l_rep_namecharges[FILENAME_LEN_A]   = APL_NULL_STRING;  // Added by Asmeet for 12174 Interoperability changes 	
char chr_l_pathT2T[200]   = APL_NULL_STRING; 
char chr_l_pathcharge[FILENAME_LEN_A+FILEPATH_LEN]   = APL_NULL_STRING; // Updated by Asmeet for 12174 Interoperability changes 
	
	char chr_l_record_row[600] = APL_NULL_STRING;
	short i_l_record_row = 0;

	// for report header
	char chr_l_rpt_header[100] = APL_NULL_STRING;
	char chr_l_rec_count_header[20] = APL_NULL_STRING;
	char chr_l_total_value_epi[30] = APL_NULL_STRING;

	char chr_l_batch_num[5] = APL_NULL_STRING;
	char chr_l_batch_seq_num[5] = APL_NULL_STRING;
	char chr_l_seqnum_a[10] = APL_NULL_STRING;
	int int_return_val = 0;

	char chr_l_member_id[10] = APL_NULL_STRING;
	short i_l_member_id = 0;
	
	FILE  *l_ptr_rep_file  =  NULL; 
	FILE  *l_ptr_rep_file_T2T  =  NULL; 
	FILE  *l_ptr_rep_file_CHARGES  =  NULL; // Added by Asmeet for 12174 Interoperability changes 

	INTL_REPT_STRUCT_H   *l_intl_rept_struct_ha  =NULL;
	INTL_REPT_STRUCT_H *l_intl_rept_struct_ha_t2t =NULL;
	INTL_REPT_STRUCT_H *l_intl_rept_struct_ha_charges =NULL; // Added by Asmeet for 12174 Interoperability changes  

	PRO_GSEQNUM_STRUCT_H    l_pro_gseqno_struct_h; // For sequence (resetable sequence)

	l_intl_rept_struct_ha = (INTL_REPT_STRUCT_H *) calloc(1,sizeof(INTL_REPT_STRUCT_H));
	l_intl_rept_struct_ha_t2t = (INTL_REPT_STRUCT_H *) calloc(1,sizeof(INTL_REPT_STRUCT_H));
	l_intl_rept_struct_ha_charges = (INTL_REPT_STRUCT_H *) calloc(1,sizeof(INTL_REPT_STRUCT_H)); // Added by Asmeet for 12174 Interoperability changes 

	// setting the memory for report structure that will b used to access the file in batch monitor
	memset(l_intl_rept_struct_ha,NULL,sizeof(INTL_REPT_STRUCT_H));
	memset(l_intl_rept_struct_ha_t2t,NULL,sizeof(INTL_REPT_STRUCT_H));
	memset(l_intl_rept_struct_ha_charges,NULL,sizeof(INTL_REPT_STRUCT_H)); // Added by Asmeet for 12174 Interoperability changes 

	printf("\n Entering Fund_Nse() ");
	printf("\n ** p_settlment_no **  -- |%s|",p_settlment_no);
	printf("\n ** p_charges **  -- |%s|",p_charges);

     
/***************** T1 settlement ***************/

int settle_flag =0;
char chr_l_rep_Path_M[FILENAME_LEN_A+FILEPATH_LEN]   = APL_NULL_STRING;
char chr_l_rep_name_M[FILENAME_LEN_A]   = APL_NULL_STRING;

FILE  *l_ptr_rep_file_M   =  NULL; 
INTL_REPT_STRUCT_H *l_intl_rept_struct_ha_M =NULL;
l_intl_rept_struct_ha_M = (INTL_REPT_STRUCT_H *) calloc(1,sizeof(INTL_REPT_STRUCT_H));
memset(l_intl_rept_struct_ha_M,NULL,sizeof(INTL_REPT_STRUCT_H));
strcpy(chr_l_rep_Path_M,chr_l_rep_Path);

char chr_l_rep_Path_P[FILENAME_LEN_A+FILEPATH_LEN]   = APL_NULL_STRING;
char chr_l_rep_name_P[FILENAME_LEN_A]   = APL_NULL_STRING;

FILE  *l_ptr_rep_file_P   =  NULL; 
INTL_REPT_STRUCT_H *l_intl_rept_struct_ha_P =NULL;
l_intl_rept_struct_ha_P = (INTL_REPT_STRUCT_H *) calloc(1,sizeof(INTL_REPT_STRUCT_H));
memset(l_intl_rept_struct_ha_P,NULL,sizeof(INTL_REPT_STRUCT_H));
strcpy(chr_l_rep_Path_P,chr_l_rep_Path);


char chr_l_pathcharge_T1[FILENAME_LEN_A+FILEPATH_LEN]   = APL_NULL_STRING;
char chr_l_rep_namecharges_T1[FILENAME_LEN_A]   = APL_NULL_STRING;

FILE  *l_ptr_rep_file_CHARGES_T1   =  NULL; 
INTL_REPT_STRUCT_H *l_intl_rept_struct_ha_charges_T1 =NULL;
l_intl_rept_struct_ha_charges_T1 = (INTL_REPT_STRUCT_H *) calloc(1,sizeof(INTL_REPT_STRUCT_H));
memset(l_intl_rept_struct_ha_charges_T1,NULL,sizeof(INTL_REPT_STRUCT_H));
strcpy(chr_l_pathcharge_T1,chr_l_rep_Path);

/*******T1 settlement**************/





	// For T2T report
	strcpy(chr_l_pathT2T,chr_l_rep_Path);
	// For Charges File Added by Asmeet for 12174 Interoperability changes 
	strcpy(chr_l_pathcharge,chr_l_rep_Path); 

	// Getting the system date
	EXEC SQL SELECT to_char(SYS_DATE,'YYYYMMDD') INTO :chr_l_sysdate FROM PRO_SYS_DATE;
	IS_ANY_ORA_ERROR

	//added by HM starts
	EXEC SQL SELECT to_char(SYS_DATE,'DDMMYYYY') INTO :chr_l_sysdate1 FROM PRO_SYS_DATE;
	IS_ANY_ORA_ERROR
	//added by HM ends
	
	printf("\n chr_l_sysdate  --  |%s|, chr_l_sysdate1 |%s|",chr_l_sysdate,chr_l_sysdate1);
	sprintf(chr_g_log_buff,"System date -- |%s| \n",chr_l_sysdate);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	// For getting the member id of the bank
	EXEC SQL SELECT MAP_DESC  into :chr_l_member_id :i_l_member_id 
		FROM PRO_SGENSTAT  
			WHERE MAP_TYPE = 'MEMBER_ID' AND MAP_VAL = 'NSE' ;
	IS_ANY_ORA_ERROR
	
	printf("\n chr_l_member_id  --  |%s|",chr_l_member_id);
	sprintf(chr_g_log_buff,"Member ID -- |%s| \n",chr_l_member_id);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);
//Condition added by Asmeet for  12174 Interoperability changes (if charges checkboz is true the normal market type file will not get generated)
	if( !strcmp(p_charges,"N") )
	{
	//********************************************************************
	// FOR Normal Market Type -- Start
	//*******************************************************************

	// preparing structure for getting the sequence value from a reset able sequence 
	strcpy(l_pro_gseqno_struct_h.sequencename, "EPR_NSE_FUND_NORMAL");
	strcpy(l_pro_gseqno_struct_h.seq_attrb_a, APL_NULL_STRING);
	strcpy(l_pro_gseqno_struct_h.seq_attrb_b, APL_NULL_STRING);
	strcpy(l_pro_gseqno_struct_h.seq_attrb_c, APL_NULL_STRING);

	l_pro_gseqno_struct_h.seq_stepby = 1;
	l_pro_gseqno_struct_h.seq_start = 1;
	l_pro_gseqno_struct_h.last_seqnum = 99;
	l_pro_gseqno_struct_h.recycle_ind = RECYCLE_EOD;

	// geting the sequence number (we have used this function because we want to reset the sequence at EOD)
	int_return_val = CO_RtvNxtSeqNum(&l_pro_gseqno_struct_h,l_debug_info_ptr); 

		if (int_return_val != APL_FAILURE)
		sprintf(chr_l_seqnum_a,"%d",int_return_val);
	else
		APL_GOBACK_FAIL

	strcpy(chr_l_batch_num,chr_l_seqnum_a); 

	printf("\n chr_l_batch_num -1- --  |%s|",chr_l_batch_num);
	// constructing the sequence number (should be of length 2) for file name 
	if (strlen(chr_l_batch_num) == 1)
	{
		strcpy(chr_l_batch_seq_num,"0");
		strcat(chr_l_batch_seq_num,chr_l_batch_num);
	}
	else // having of length 2
	{
		strcpy(chr_l_batch_seq_num,chr_l_batch_num);
	}

	printf("\n chr_l_seq_num -2- --  |%s|",chr_l_batch_seq_num);
	sprintf(chr_g_log_buff,"Sequence Number -- |%s| \n",chr_l_batch_seq_num);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);



    if(strlen(p_settlment_no) == 0)
        {
		EXEC SQL select SETTL_NO INTO :sett_no1 FROM mt_settl_cal
			WHERE TO_CHAR(TO_DATE(START_DATE),'dd/mm/yyyy') = TO_CHAR (to_date(:p_deal_date),'dd/mm/yyyy')
			AND  EXCH_CODE= 'NSE'
			AND SETTL_TYPE ='55';
			IS_ANY_ORA_ERROR
			settle_flag =1;
			strcpy(p_settlment_no,sett_no1);
		}
					

printf("settle number [%s]",p_settlment_no );
	// Constructing file name for Normal market type
	strcat(chr_l_rep_name,"CLNTEPF_5_");
	strcat(chr_l_rep_name,p_settlment_no); 
	strcat(chr_l_rep_name,"_");
	strcat(chr_l_rep_name,chr_l_sysdate);
	strcat(chr_l_rep_name,".T");
	strcat(chr_l_rep_name,chr_l_batch_seq_num); //The batch number of file to be uploaded

	/* ISKB-1721: ASHISH 22-08-2008 Start */
	IF_COND_EXISTS("EARLY_PAYIN_REPORT","CSV_FORMAT")
	{
	strcat(chr_l_rep_name,".csv");
	}

	else
	{
		strcat(chr_l_rep_name,".txt");
	}
	/* ISKB-1721: ASHISH 22-08-2008 End */


	printf("\n Report Name --  |%s|",chr_l_rep_name);
	sprintf(chr_g_log_buff,"Report Name for Normal market-- |%s| \n",chr_l_rep_name);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	strcat(chr_l_rep_Path,chr_l_rep_name); // forming final path with report name for normal market

	printf("\n Final Report Name with path --  |%s|",chr_l_rep_Path);
	sprintf(chr_g_log_buff,"Final Report Name with path for Normal market -- |%s| \n",chr_l_rep_Path);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	// For opening the file in write mode for normal market report
	if ((l_ptr_rep_file = fopen(chr_l_rep_Path,"w")) == NULL)
   		return(APL_FAILURE);

	// setting the memory for report structure that will b used to access the file in batch monitor

	strcpy(l_intl_rept_struct_ha->report_name,chr_l_rep_name);
   	strcpy(l_intl_rept_struct_ha->report_desc, "Early Pay in Report");
   	strcpy(l_intl_rept_struct_ha->report_date, l_date);
   	l_intl_rept_struct_ha->report_width = 100;
   	strcpy(l_intl_rept_struct_ha->task_desc, "EarlyPyinRpt");
   	strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
   	strcpy(l_intl_rept_struct_ha->usr, l_user);

	// For accessing the file in Batch monitor -- normal market 
	if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))
        APL_GOBACK_FAIL

	// Constructing the report header  --Start 

	    /* ISKB-1721: ASHISH 20-08-2008 */
		/* ISKB-4678: VILIN 15-02-2011 Start */
		EXEC SQL SELECT TO_CHAR(COUNT(COUNT(*))) into :chr_l_rec_count_header  
			FROM DL_DEAL A,MT_CLI_EXCH_MAP B
            WHERE
				A.DEAL_STAT IN ('CC','SS','MS','CS') AND
				A.DEAL_CD = '4' AND
				A.DL_CLASS = '1' AND
				A.CLH_FLG = 'C' AND
				A.CLIENT = B.CLN_CODE AND
				A.EXCH_CODE = B.CLN_EXCH_CODE AND
				A.MKT_TYPE = '55' AND
				A.SETTLEMENT_NO = :p_settlment_no  AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date AND 
                                (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
				A.CLIENT||A.IDENTIY_NO not in 
				(SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND SETTLEMENT_NO = :p_settlment_no  )
				GROUP BY A.SETTLEMENT_NO,A.MKT_TYPE,B.CLN_EXCH_MAP_CODE ;
		IS_ANY_ORA_ERROR

		printf("\n chr_l_rec_count_header -1- --  |%s|",chr_l_rec_count_header);

		/* ISKB-1721: ASHISH 20-08-2008 */
			/*Modified by siva.ganapathi for ISKB_2221 on 3/5/2009 -- started*/
							/* ISKB-4678: VILIN 15-02-2011 Start - Commented by Gouse - ISKB_6117 - Wrong amount in Early Payin Report 
		EXEC SQL SELECT NVL(TO_CHAR(SUM(NVL(DL_AMT,0))),0) INTO :chr_l_total_value_epi
				FROM
				(
						SELECT  D.DL_AMT as DL_AMT
     			   	    FROM DL_DEAL A,MT_CLI_EXCH_MAP B,DL_EXCHGORD_UPLD D,IV_CLIENTSETUP E
      		            WHERE D.CLIENT = A.CLIENT AND
 					    A.CLIENT = B.CLN_CODE AND
                        D.Instr_Code = A.Instr_Code AND 
				        D.EXCHG_CODE = A.EXCH_CODE  AND
                        A.EXCH_CODE = B.CLN_EXCH_CODE AND
                        A.DOMESTIC_CPCLT = D.BROKER_CD and
                        D.MKT_TYPE = A.MKT_TYPE  AND
					    D.SETTL_NO=A.SETTLEMENT_NO AND
					    TO_CHAR(D.DEAL_DATE,'dd/mm/yyyy') =  TO_CHAR(A.DEAL_DATE,'dd/mm/yyyy') and
					    D.STATUS = 'PM' AND
					    D.BUY_SELL_FLG = 'B' AND
					    A.DEAL_STAT IN ('CC','SS','MS','CS') AND
                        		    A.DEAL_CD = '4' AND
					    A.DL_CLASS = '1' AND
					    A.CLH_FLG = 'C' AND
					    A.MKT_TYPE = '13' AND
                                            A.SETTLEMENT_NO = :p_settlment_no AND
				            A.CLIENT =E.CLIENT AND
			                    E.PAY_IN_DAY = :chr_l_early_payindays AND
					    A.CLIENT||A.IDENTIY_NO not in (
					    SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND SETTLEMENT_NO = :p_settlment_no) 
					    GROUP BY B.CLN_EXCH_MAP_CODE,D.BROKER_CD,D.DL_AMT
      ISKB-4678: VILIN 15-02-2011 End   */

				//);
					/*Commented and Rewritten by Prateek for ISKB-6559(Report generated for wrong Amount)-START
					EXEC SQL SELECT NVL(TO_CHAR(SUM(NVL(D.DL_AMT,0))),0) INTO :chr_l_total_value_epi*/
					//EXEC SQL SELECT NVL(TO_CHAR(SUM(NVL(DL_AMT,0))),0) INTO :chr_l_total_value_epi
				/*	EXEC SQL SELECT NVL(TO_CHAR(SUM(NVL(DL_AMT,0))),0) INTO :chr_l_total_value_epi
					FROM
					(
						/*12174 Interoperability 08/07/2019 
						//SELECT TO_CHAR(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',nvl(AMT_DIFFER,0),'3',-nvl(AMT_DIFFER,0)),'999999999999990.99') AS DL_AMT
						//SELECT (NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',nvl(AMT_DIFFER,0),'3',-nvl(AMT_DIFFER,0))) AS DL_AMT
						//SELECT (NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',-nvl(AMT_DIFFER,0),'3',nvl(AMT_DIFFER,0))) AS DL_AMT
						SELECT (NVL(A.AMOUNT,0)) AS DL_AMT
						/*Commented and Rewritten by Prateek for ISKB-6559(Report generated for wrong Amount)-END*/
						//FROM DL_DEAL A,MT_CLI_EXCH_MAP B /*,DL_EXCHGORD_UPLD D
                                               /*Commented and Rewritten by supriya on 11082015 start
                                                    IV_CLIENTSETUP E */
                                                    /* MT_CLIENT_PARAM E */           /*12174 Interoperability 28/05/2019 */
                                                /*Commented and Rewritten by supriya on 11082015 -END*/
						/*Commented and Rewritten by Prateek on 12022014 for ISKB_6558(PMS)-START
						WHERE D.CLIENT = A.CLIENT AND
						WHERE /*((D.CLIENT = A.CLIENT)  OR (D.CLIENT in (select cln_master from mt_client where cln_code = A.CLIENT))) AND
						/*Commented and Rewritten by Prateek on 12022014 for ISKB_6558(PMS)-END
						A.CLIENT = B.CLN_CODE AND
						/*D.Instr_Code = A.Instr_Code AND 
						/* D.EXCHG_CODE = A.EXCH_CODE  AND */    /*12174 Interoperability 28/05/2019 
						A.EXCH_CODE = B.CLN_EXCH_CODE AND 
						/*A.DOMESTIC_CPCLT = D.BROKER_CD and
						//D.MKT_TYPE = A.MKT_TYPE  AND
						//D.SETTL_NO=A.SETTLEMENT_NO AND
                                                /*12174 Interoperability 28/05/2019 Starts*/
					/*	(('S' = :chr_trd_setl_ind 
						AND D.EXCHG_CODE = A.EXCH_CODE 
						AND D.MKT_TYPE = A.MKT_TYPE 
						AND D.SETTL_NO=A.SETTLEMENT_NO)
						or 
						('T' = :chr_trd_setl_ind 
						AND D.EXCHG_CODE = A.TRD_EXCH 
						AND D.MKT_TYPE = A.TRD_MKT_TYPE 
						AND D.SETTL_NO=A.TRD_SETL_NO)) AND
						TO_CHAR(D.DEAL_DATE,'dd/mm/yyyy') =  TO_CHAR(A.DEAL_DATE,'dd/mm/yyyy') and
						D.STATUS = 'PM' AND
						D.BUY_SELL_FLG = 'B' AND
						A.DEAL_STAT IN ('CC','SS','MS','CS') AND
						A.DEAL_CD = '4' AND
						A.DL_CLASS = '1' AND
						A.CLH_FLG = 'C' AND
						A.MKT_TYPE = '13' AND
						A.SETTLEMENT_NO = :p_settlment_no AND
                                                 /*Commented and Rewritten by supriya on 11082015 start
						A.CLIENT =E.CLIENT AND
						E.PAY_IN_DAY = :chr_l_early_payindays AND 
                                                /* A.CLIENT = E.CLIENT_CODE AND           /*12174 Interoperability 28/05/2019 
                                               (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
                                                /*Commented and Rewritten by supriya on 11082015 -END
						A.CLIENT||A.IDENTIY_NO not in (
						SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND SETTLEMENT_NO = :p_settlment_no)
						/*Added by Prateek for ISKB-6559(Report generated for wrong Amount)-START*/
						/* Interoperability 26/05/2019 
						GROUP BY A.SETTLEMENT_NO,A.MKT_TYPE,B.CLN_EXCH_MAP_CODE,A.AMOUNT,A.DEAL_CD,AMT_DIFFER 
						);*/
						
				// Change by Dhanashree for IOP-2

				EXEC SQL SELECT NVL(TO_CHAR(SUM(NVL(DL_AMT,0))),0) INTO :chr_l_total_value_epi
					FROM
					(	SELECT 
						/*(NVL(A.AMOUNT,0)) AS DL_AMT*/
						(NVL(A.AMOUNT,0) - nvl(AMT_DIFFER,0)) AS DL_AMT /*CS0028550 : InterOperability 2 -  amt_differ changes*/                 
						FROM DL_DEAL A,MT_CLI_EXCH_MAP B 
						WHERE 	A.CLIENT = B.CLN_CODE AND
						A.EXCH_CODE = B.CLN_EXCH_CODE AND 
						A.DEAL_STAT IN ('CC','SS','MS','CS') AND
						A.DEAL_CD = '4' AND
						A.DL_CLASS = '1' AND
						A.CLH_FLG = 'C' AND
						A.MKT_TYPE = '55' AND
						A.SETTLEMENT_NO = :p_settlment_no AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date  AND
                        (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
						A.CLIENT||A.IDENTIY_NO not in (
						SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND SETTLEMENT_NO = :p_settlment_no  )
						);	
						
						Alert("SqlCode after the query is |%d|",sqlca.sqlcode);
						Alert("Value of chr_l_total_value_epi is |%s|",chr_l_total_value_epi);
						/*Added by Prateek for ISKB-6559(Report generated for wrong Amount)-END*/
		IS_ANY_ORA_ERROR
		/*Modified by siva.ganapathi for ISKB_2221 on 3/5/2009 -- Ended*/

		printf("\n chr_l_total_value_epi -1- --  |%s|",chr_l_total_value_epi);

		strcpy(chr_l_rpt_header,"01,"); // putting the record type
		strcat(chr_l_rpt_header,"CLNTEPF,"); // putting the file type
		strcat(chr_l_rpt_header,chr_l_member_id); // putting the Member Code
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_sysdate);  //putting Batch Date 
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_batch_seq_num); // putting the bath number
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,"5,"); // putting the Market Type indicator
		strcat(chr_l_rpt_header,p_settlment_no); // putting settlement number
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_rec_count_header); // putting the number of records
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_total_value_epi); // putting the total value of EPI

		printf("\n chr_l_rpt_header -1- --  |%s|",chr_l_rpt_header);
		sprintf(chr_g_log_buff,"Report header -- |%s| \n",chr_l_rpt_header);
	    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

		// Writing the rpt header in file
		fprintf(l_ptr_rep_file,"%s\n",chr_l_rpt_header);
	// Constructing the report header  --End

	// Cursor for fetching the report data -- start
	/*Modified by siva.ganapathi for ISKB_2221 on 3/5/2009 -- started*/
	/* ISKB-4678: VILIN 15-02-2011 Start */	

		/*EXEC SQL DECLARE cur_fund_nse CURSOR FOR
		/*Commented and Rewritten by Prateek for ISKB-6559(Report generated for wrong Amount)-START
		SELECT COL1||','||COL2||','||DL_AMT/*TO_CHAR(SUM(NVL(DL_AMT,0)))||','||COL4||','||COL5||','||COL6||','||COL7
		SELECT COL1||','||COL2||','||COL3||','||NVL(TO_CHAR(SUM(NVL(COL5,0))),0) // added for kotak ISKB_11804
		/*Commented and Rewritten by Prateek for ISKB-6559(Report generated for wrong Amount)-END
			FROM
			(
			SELECT 
				'20' AS COL1,
				B.CLN_EXCH_MAP_CODE  AS COL2,
				B.CLN_EXCH_MAP_CODE  AS COL3,
				/* ISKB-1721: ASHISH 20-08-2008 
				/* D.DL_AMT as DL_AMT Commented by Gouse - ISKB_6117 */
				/*Commented and Rewritten by Prateek for ISKB-6559(Report generated for wrong Amount)-START
				NVL(TO_CHAR(SUM(NVL(D.DL_AMT,0))),0) AS DL_AMT*/
				/* 26/05/2019 Interoperability 12174 DL_AMT */ 
				//TO_CHAR(SUM(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',nvl(AMT_DIFFER,0),'3',-nvl(AMT_DIFFER,0))),'999999999999990.99') AS COL5    /*12174 Interoperability 08/07/2019 
				//(SUM(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',nvl(AMT_DIFFER,0),'3',-nvl(AMT_DIFFER,0)))) AS COL5  
				//(SUM(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',-nvl(AMT_DIFFER,0),'3',nvl(AMT_DIFFER,0)))) AS COL5  
				//(SUM(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',nvl(AMT_DIFFER,0),'3',-nvl(AMT_DIFFER,0)))) AS COL5 
				/*Commented and Rewritten by Prateek for ISKB-6559(Report generated for wrong Amount)-END
				/*,
				'' AS COL4,
				'' AS COL5,
				'' AS COL6,
				'' AS COL7,
				'' AS COL8,
				'' AS COL9
			FROM DL_DEAL A,MT_CLI_EXCH_MAP B /*,DL_EXCHGORD_UPLD D
                        /*Commented and Rewritten by supriya on 11082015 start 
                        IV_CLIENTSETUP E*/
						/* 12174 Interoperabilty changes by Asmeet 26/05/2019 */
                        /* MT_CLIENT_PARAM E */           /*12174 Interoperability 28/05/2019 */
                         /*Commented and Rewritten by supriya on 11082015 -END*/
			/*Commented and Rewritten by Prateek on 12022014 for ISKB_6558(PMS)-START
			WHERE D.CLIENT = A.CLIENT AND
			WHERE /*((D.CLIENT = A.CLIENT)  OR (D.CLIENT in (select cln_master from mt_client where cln_code = A.CLIENT))) AND*/
			/*Commented and Rewritten by Prateek on 12022014 for ISKB_6558(PMS)-END
			A.CLIENT = B.CLN_CODE AND
			/*D.Instr_Code = A.Instr_Code AND 
			/*D.EXCHG_CODE = A.EXCH_CODE  AND        /*12174 Interoperability 28/05/2019 
			A.EXCH_CODE = B.CLN_EXCH_CODE AND
			/*A.DOMESTIC_CPCLT = D.BROKER_CD and
			/*D.MKT_TYPE = A.MKT_TYPE  AND
			D.SETTL_NO=A.SETTLEMENT_NO AND*/ /*12174 Interoperability 28/05/2019 */
			/*12174 Interoperability 28/05/2019 Starts*/
			/*(('S' = :chr_trd_setl_ind 
			AND D.EXCHG_CODE = A.EXCH_CODE 
			AND D.MKT_TYPE = A.MKT_TYPE 
			AND D.SETTL_NO=A.SETTLEMENT_NO)
			or 
			('T' = :chr_trd_setl_ind 
			AND D.EXCHG_CODE = A.TRD_EXCH 
			AND D.MKT_TYPE = A.TRD_MKT_TYPE 
			AND D.SETTL_NO=A.TRD_SETL_NO)) AND
			TO_CHAR(D.DEAL_DATE,'dd/mm/yyyy') =  TO_CHAR(A.DEAL_DATE,'dd/mm/yyyy') and
			D.STATUS = 'PM' AND
			D.BUY_SELL_FLG = 'B' AND
			A.DEAL_STAT IN ('CC','SS','MS','CS') AND
			A.DEAL_CD = '4' AND
			A.DL_CLASS = '1' AND
			A.CLH_FLG = 'C' AND
			A.MKT_TYPE = '13' AND
			A.SETTLEMENT_NO = :p_settlment_no AND
                       /*Commented and Rewritten by supriya on 11082015 start
			A.CLIENT =E.CLIENT AND
			 E.PAY_IN_DAY = :chr_l_early_payindays AND*/
                       /*  A.CLIENT = E.CLIENT_CODE AND */       /*12174 Interoperability 28/05/2019 
                        (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
                        /*Commented and Rewritten by supriya on 11082015 -END
			A.CLIENT||A.IDENTIY_NO not in (
			SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND SETTLEMENT_NO = :p_settlment_no)
			/* ISKB-4678: VILIN 15-02-2011 End */
			/* GROUP BY B.CLN_EXCH_MAP_CODE,D.BROKER_CD,D.DL_AMT Commented by Gouse - ISKB_6117 */
			/*Commented and Rewritten by Prateek for ISKB-6559(Report generated for wrong quantity-START
			GROUP BY A.SETTLEMENT_NO,A.MKT_TYPE,B.CLN_EXCH_MAP_CODE*/
			//GROUP BY A.SETTLEMENT_NO,A.MKT_TYPE,B.CLN_EXCH_MAP_CODE,(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',-nvl(AMT_DIFFER,0),'3',nvl(AMT_DIFFER,0)))/*12174 Interoperability 08/07/2019 
			//GROUP BY A.SETTLEMENT_NO,A.MKT_TYPE,B.CLN_EXCH_MAP_CODE               /*12174 Interoperability 08/07/2019 
			/*Commented and Rewritten by Prateek for ISKB-6559(Report generated for wrong quantity-END
			)
			 GROUP BY COL1,COL2; Uncommented by Prateek for ISKB_6559(Report generated for wrong amount)*/
		
	/*Modified by siva.ganapathi for ISKB_2221 on 3/5/2009-- Ended*/
	//Change by Dhanashree for IOP - 2
	EXEC SQL DECLARE cur_fund_nse CURSOR FOR
	SELECT COL1||','||COL2||','||COL3||','||NVL(TO_CHAR(SUM(NVL(COL5,0))),0)
			FROM
			(
			SELECT 
				'20' AS COL1,
				B.CLN_EXCH_MAP_CODE  AS COL2,
				B.CLN_EXCH_MAP_CODE  AS COL3,
				(SUM(NVL(A.AMOUNT,0) - nvl(AMT_DIFFER,0))) AS COL5 /*CS0028550 : InterOperability 2 -  amt_differ changes*/                 
			FROM DL_DEAL A,MT_CLI_EXCH_MAP B
			WHERE 
			A.CLIENT = B.CLN_CODE AND
			A.EXCH_CODE = B.CLN_EXCH_CODE AND
			A.DEAL_STAT IN ('CC','SS','MS','CS') AND
			A.DEAL_CD = '4' AND
			A.DL_CLASS = '1' AND
			A.CLH_FLG = 'C' AND
			A.MKT_TYPE = '55' AND
			A.SETTLEMENT_NO = :p_settlment_no  AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date AND
            (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
			A.CLIENT||A.IDENTIY_NO not in (
			SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND A.SETTLEMENT_NO = :p_settlment_no  )
			GROUP BY A.SETTLEMENT_NO,A.MKT_TYPE,B.CLN_EXCH_MAP_CODE )
			 GROUP BY COL1,COL2; 

	// opening the cursor
	EXEC SQL OPEN cur_fund_nse;
	CO_ProcMonitor(g_flogfile,"Opened Cursor cur_fund_nse",NULL,NULL);

	IS_ANY_ORA_ERROR

	// Processing the cursor data -- (Printing the data into file)
	for(;;)
	{
		EXEC SQL FETCH cur_fund_nse INTO :chr_l_record_row:i_l_record_row;
												  
		sprintf(chr_g_log_buff,"Fetched cur_fund_nse sqlca.sqlcode is :%d:",sqlca.sqlcode);
		CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);
		IS_ANY_ORA_ERROR_CURSOR

		// Writing to report file
		fprintf(l_ptr_rep_file,"%s\n",chr_l_record_row);

		if (sqlca.sqlcode == 1403)
		{
            CO_ProcMonitor(g_flogfile,"No more Records ",NULL,NULL);
            EXEC SQL CLOSE cur_fund_nse;
            APL_GOBACK_SUCCESS;
		}
	} 
	
	// Cursor for fetching the report data (Middle part of the report) -- End 
	//********************************************************************
	// FOR Normal Market Type -- End
	//********************************************************************

	//********************************************************************
	//FOR T2T Market Type -- Start
	//********************************************************************
	// preparing structure for getting the sequence value from a reset able sequence 
	strcpy(l_pro_gseqno_struct_h.sequencename, "EPR_NSE_FUND_T2T");
	strcpy(l_pro_gseqno_struct_h.seq_attrb_a, APL_NULL_STRING);
	strcpy(l_pro_gseqno_struct_h.seq_attrb_b, APL_NULL_STRING);
	strcpy(l_pro_gseqno_struct_h.seq_attrb_c, APL_NULL_STRING);

	l_pro_gseqno_struct_h.seq_stepby = 1;
	l_pro_gseqno_struct_h.seq_start = 1;
	l_pro_gseqno_struct_h.last_seqnum = 99;
	l_pro_gseqno_struct_h.recycle_ind = RECYCLE_EOD;

	// geting the sequence number (we have used this function because we want to reset the sequence at EOD)
	int_return_val = CO_RtvNxtSeqNum(&l_pro_gseqno_struct_h,l_debug_info_ptr); 

		if (int_return_val != APL_FAILURE)
		sprintf(chr_l_seqnum_a,"%d",int_return_val);
	else
		APL_GOBACK_FAIL

	strcpy(chr_l_batch_num,chr_l_seqnum_a); 

	printf("\n chr_l_batch_num -1- --  |%s|",chr_l_batch_num);
	// constructing the sequence number (should be of length 2) for file name 
	if (strlen(chr_l_batch_num) == 1)
	{
		strcpy(chr_l_batch_seq_num,"0");
		strcat(chr_l_batch_seq_num,chr_l_batch_num);
	}
	else // having of length 2
	{
		strcpy(chr_l_batch_seq_num,chr_l_batch_num);
	}

	printf("\n chr_l_seq_num -2- --  |%s|",chr_l_batch_seq_num);
	sprintf(chr_g_log_buff,"Sequence Number -- |%s| \n",chr_l_batch_seq_num);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

if (settle_flag ==1)
{
    
			EXEC SQL select SETTL_NO INTO :sett_no1 FROM mt_settl_cal
			WHERE TO_CHAR(TO_DATE(START_DATE),'dd/mm/yyyy') = TO_CHAR (to_date(:p_deal_date),'dd/mm/yyyy')
			AND  EXCH_CODE= 'NSE'
			AND SETTL_TYPE ='56';
			IS_ANY_ORA_ERROR
			strcpy(p_settlment_no,sett_no1);
		
					
}
printf("settle number [%s]",p_settlment_no );

	// Constructing file name for T2T market type
	strcat(chr_l_rep_nameT2T,"CLNTEPF_6_");
	strcat(chr_l_rep_nameT2T,p_settlment_no); 
	strcat(chr_l_rep_nameT2T,"_");
	strcat(chr_l_rep_nameT2T,chr_l_sysdate);
	strcat(chr_l_rep_nameT2T,".T");
	strcat(chr_l_rep_nameT2T,chr_l_batch_seq_num); //The batch number of file to be uploaded

	/* ISKB-1721: ASHISH 22-08-2008 Start */
	IF_COND_EXISTS("EARLY_PAYIN_REPORT","CSV_FORMAT")
	{
	strcat(chr_l_rep_nameT2T,".csv");
	}

	else
	{
		strcat(chr_l_rep_nameT2T,".txt");
	}
	/* ISKB-1721: ASHISH 22-08-2008 End */

	strcpy(l_intl_rept_struct_ha_t2t->report_name,chr_l_rep_nameT2T);

	printf("\n Report Name --  |%s|",chr_l_rep_nameT2T);
	sprintf(chr_g_log_buff,"Report Name for T2T market -- |%s| \n",chr_l_rep_nameT2T);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	strcat(chr_l_pathT2T,chr_l_rep_nameT2T); // forming final path with report name for T2T market type
	
	printf("\n Final Report Name with path  chr_l_pathT2T --  |%s|",chr_l_pathT2T);
	sprintf(chr_g_log_buff,"Final Report Name with path for T2T market-- |%s| \n",chr_l_pathT2T);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	// For opening the file in write mode for T2T market report
	if ((l_ptr_rep_file_T2T = fopen(chr_l_pathT2T,"w")) == NULL)
   		return(APL_FAILURE);

	strcpy(l_intl_rept_struct_ha_t2t->report_desc, "Early Pay in Report");
   	strcpy(l_intl_rept_struct_ha_t2t->report_date, l_date);
   	l_intl_rept_struct_ha_t2t->report_width = 100;
   	strcpy(l_intl_rept_struct_ha_t2t->task_desc, "EarlyPyinRpt");
   	strcpy(l_intl_rept_struct_ha_t2t->fe_be_ind, APL_BE_IND);
   	strcpy(l_intl_rept_struct_ha_t2t->usr, l_user);

	// For accessing the file in Batch monitor -- t2t market type 
	if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha_t2t, l_debug_info_ptr))
        APL_GOBACK_FAIL

	// Constructing the report header  --Start  

	/* ISKB-1721: ASHISH 20-08-2008 */
	/* ISKB-4678: VILIN 15-02-2011 Start */

		EXEC SQL  SELECT TO_CHAR(COUNT(COUNT(*))) into :chr_l_rec_count_header	
			FROM DL_DEAL A,MT_CLI_EXCH_MAP B
                       /*Commented and Rewritten by supriya on 11082015 start          
                         IV_CLIENTSETUP C */
                         /* MT_CLIENT_PARAM E */            /*12174 Interoperability 28/05/2019 */
                         /*Commented and Rewritten by supriya on 11082015 -END*/ 
				WHERE
					A.DEAL_STAT IN ('CC','SS','MS','CS') AND
					A.DEAL_CD = '4' AND
					A.DL_CLASS = '1' AND
					A.CLH_FLG = 'C' AND
					A.CLIENT = B.CLN_CODE AND
					A.EXCH_CODE = B.CLN_EXCH_CODE AND
					A.MKT_TYPE = '56' AND
					A.SETTLEMENT_NO = :p_settlment_no  AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date AND
                                         /*Commented and Rewritten by supriya on 11082015 start
			                A.CLIENT =C.CLIENT AND
		                        C.PAY_IN_DAY = :chr_l_early_payindays AND*/
                                        /* A.CLIENT = E.CLIENT_CODE AND */             /*12174 Interoperability 28/05/2019 */
                                        (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
                                        /*Commented and Rewritten by supriya on 11082015 -END*/
					A.CLIENT||A.IDENTIY_NO not in (
					SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND SETTLEMENT_NO = :p_settlment_no  )
					GROUP BY A.SETTLEMENT_NO,A.MKT_TYPE,B.CLN_EXCH_MAP_CODE ;

	 /* ISKB-4678: VILIN 15-02-2011 End   */

			IS_ANY_ORA_ERROR

		printf("\n chr_l_rec_count_header -1- --  |%s|",chr_l_rec_count_header);

		/* ISKB-1721: ASHISH 20-08-2008 */
/*Modified by siva.ganapathi for ISKB_2221 on 3/5/2009 -- started*/
	/* ISKB-4678: VILIN 15-02-2011 Start */
	/* Commented by Gouse - ISKB_6117 
	EXEC SQL SELECT NVL(TO_CHAR(SUM(NVL(DL_AMT,0))),0) INTO :chr_l_total_value_epi
				FROM
				( */
				/* Interoperability 26/05/2019 */
				//EXEC SQL SELECT NVL(TO_CHAR(SUM(NVL(DL_AMT,0))),0) INTO :chr_l_total_value_epi 
				//EXEC SQL SELECT NVL(SUM(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',nvl(AMT_DIFFER,0),'3',-nvl(AMT_DIFFER,0))),0) AS DL_AMT          /*12174 Interoperability 28/05/2019 */
				//EXEC SQL SELECT NVL(SUM(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',-nvl(AMT_DIFFER,0),'3',nvl(AMT_DIFFER,0))),0) AS DL_AMT          /*12174 Interoperability 28/05/2019 */
				/*EXEC SQL SELECT NVL(SUM(NVL(A.AMOUNT,0)),0) AS DL_AMT          /*12174 Interoperability 28/05/2019 */
				//INTO :chr_l_total_value_epi 
				//FROM DL_DEAL A,MT_CLI_EXCH_MAP B /*,DL_EXCHGORD_UPLD D 
                               /*Commented and Rewritten by supriya on 11082015 start	         
                                IV_CLIENTSETUP E	*/
                                /* MT_CLIENT_PARAM E */               /*12174 Interoperability 28/05/2019 */
                         /*Commented and Rewritten by supriya on 11082015 -END*/
				/*Commented and Rewritten by Prateek on 12022014 for ISKB_6558(PMS)-START
				WHERE D.CLIENT = A.CLIENT AND
				WHERE ((D.CLIENT = A.CLIENT)  OR (D.CLIENT in (select cln_master from mt_client where cln_code = A.CLIENT))) AND
				/*Commented and Rewritten by Prateek on 12022014 for ISKB_6558(PMS)-END
 					    A.CLIENT = B.CLN_CODE AND
                      /*  D.Instr_Code = A.Instr_Code AND 
				        //D.EXCHG_CODE = A.EXCH_CODE  AND /*12174 Interoperability 28/05/2019 
                        A.EXCH_CODE = B.CLN_EXCH_CODE AND 
                        A.DOMESTIC_CPCLT = D.BROKER_CD and
                        /* D.MKT_TYPE = A.MKT_TYPE  AND 
					    D.SETTL_NO=A.SETTLEMENT_NO AND */ /*12174 Interoperability 28/05/2019 */
						/*12174 Interoperability 28/05/2019 Starts*/
						/*(('S' = :chr_trd_setl_ind 
						AND D.EXCHG_CODE = A.EXCH_CODE 
						AND D.MKT_TYPE = A.MKT_TYPE 
						AND D.SETTL_NO=A.SETTLEMENT_NO)
						or 
						('T' = :chr_trd_setl_ind 
						AND D.EXCHG_CODE = A.TRD_EXCH 
						AND D.MKT_TYPE = A.TRD_MKT_TYPE 
						AND D.SETTL_NO=A.TRD_SETL_NO)) AND
					    TO_CHAR(D.DEAL_DATE,'dd/mm/yyyy') =  TO_CHAR(A.DEAL_DATE,'dd/mm/yyyy') and
					    D.STATUS = 'PM' AND
					    D.BUY_SELL_FLG = 'B' AND 
					    A.DEAL_STAT IN ('CC','SS','MS','CS') AND
                        A.DEAL_CD = '4' AND
					    A.DL_CLASS = '1' AND
					    A.CLH_FLG = 'C' AND
					    A.MKT_TYPE = '22' AND
                        A.SETTLEMENT_NO = :p_settlment_no AND
                                           /*Commented and Rewritten by supriya on 11082015 start
			            A.CLIENT =E.CLIENT AND
		                            E.PAY_IN_DAY = :chr_l_early_payindays AND*/
                                           /*  A.CLIENT = E.CLIENT_CODE AND */      /*12174 Interoperability 28/05/2019 
                                           (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
                                           /*Commented and Rewritten by supriya on 11082015 -END
				A.CLIENT||A.IDENTIY_NO not in (
				SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND SETTLEMENT_NO = :p_settlment_no);
 				//GROUP BY B.CLN_EXCH_MAP_CODE,D.BROKER_CD,D.DL_AMT
	/* ISKB-4678: VILIN 15-02-2011 End  */
				//);
				/*Modified by siva.ganapathi for ISKB_2221 on 3/5/2009-- Ended*/
				//Change by Dhanashree for IOP-2
				EXEC SQL SELECT
			/*	NVL(SUM(NVL(A.AMOUNT,0)),0) AS DL_AMT  */
			/*      NVL(SUM(NVL(A.AMOUNT,0) - decode(A.DEAL_CD,'4',nvl(AMT_DIFFER,0),'3',-nvl(AMT_DIFFER,0))),0) AS DL_AMT  */
				NVL(SUM(NVL(A.AMOUNT,0) - nvl(AMT_DIFFER,0)),0) AS DL_AMT  /*CS0028550 : InterOperability 2 -  amt_differ changes*/
				INTO :chr_l_total_value_epi 
				FROM DL_DEAL A,MT_CLI_EXCH_MAP B 
				WHERE   A.CLIENT = B.CLN_CODE AND
                        A.EXCH_CODE = B.CLN_EXCH_CODE AND 
                        A.DEAL_STAT IN ('CC','SS','MS','CS') AND
                        A.DEAL_CD = '4' AND
					    A.DL_CLASS = '1' AND
					    A.CLH_FLG = 'C' AND
					    A.MKT_TYPE = '56' AND
                        A.SETTLEMENT_NO = :p_settlment_no  AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date AND
                        (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
				A.CLIENT||A.IDENTIY_NO not in (
				SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND SETTLEMENT_NO = :p_settlment_no );

		
			IS_ANY_ORA_ERROR

		printf("\n chr_l_total_value_epi -1- --  |%s|",chr_l_total_value_epi);

		strcpy(chr_l_rpt_header,"01,"); // putting the record type
		strcat(chr_l_rpt_header,"CLNTEPF,"); // putting the file type
		strcat(chr_l_rpt_header,chr_l_member_id); // putting the Member Code
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_sysdate);  //putting Batch Date 
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_batch_seq_num); // putting the bath number
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,"6,"); // putting the Market Type indicator
		strcat(chr_l_rpt_header,p_settlment_no); // putting settlement number
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_rec_count_header); // putting the number of records
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_total_value_epi); // putting the total value of EPI

		printf("\n chr_l_rpt_header -1- --  |%s|",chr_l_rpt_header);
		sprintf(chr_g_log_buff,"Report header -- |%s| \n",chr_l_rpt_header);
	    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

		// Writing the rpt header in file
		fprintf(l_ptr_rep_file_T2T,"%s\n",chr_l_rpt_header);
	// Constructing the report header  --End

	// Cursor for fetching the report data  -- start
	/*Modified by siva.ganapathi for ISKB_2221 on 3/5/2009 -- started*/
	/* ISKB-4678: VILIN 15-02-2011 Start */	

/* EXEC SQL DECLARE cur_fund_nse_t2t CURSOR FOR
	    SELECT COL1||','||COL2||','||COL3||','||COL5/*TO_CHAR(SUM(NVL(DL_AMT,0)))||','||COL4||','||COL5||','||COL6||','||COL7
			FROM
			(
			SELECT 
				'20' AS COL1,
				B.CLN_EXCH_MAP_CODE  AS COL2,
				B.CLN_EXCH_MAP_CODE  AS COL3,
				/* ISKB-1721: ASHISH 20-08-2008 */
				/* D.DL_AMT as DL_AMT Commented by Gouse - ISKB_6117 */
				//TO_CHAR(SUM(NVL(D.DL_AMT,0))) AS DL_AMT
				/* 26/05/2019 Interoperability 12174 */ 
				/* 08/07/2019 Interoperability 12174 
				//TO_CHAR(SUM(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',nvl(AMT_DIFFER,0),'3',-nvl(AMT_DIFFER,0))),'999999999999990.99') AS COL5
				//(SUM(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',nvl(AMT_DIFFER,0),'3',-nvl(AMT_DIFFER,0)))) AS COL5
				//(SUM(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',-nvl(AMT_DIFFER,0),'3',nvl(AMT_DIFFER,0)))) AS COL5
				(SUM(NVL(A.AMOUNT,0))) AS COL5
				/*,
				'' AS COL4,
				'' AS COL5,
				'' AS COL6,
				'' AS COL7,
				'' AS COL8,
				'' AS COL9*/
			//FROM DL_DEAL A,MT_CLI_EXCH_MAP B /*,DL_EXCHGORD_UPLD D
                        /*Commented and Rewritten by supriya on 11082015 start
                        IV_CLIENTSETUP E*/
                        /* MT_CLIENT_PARAM E */             /*12174 Interoperability 28/05/2019 */
                        /*Commented and Rewritten by supriya on 11082015 -END*/
			/*Commented and Rewritten by Prateek on 12022014 for ISKB_6558(PMS)-START
			WHERE D.CLIENT = A.CLIENT AND*/
		//	WHERE /*((D.CLIENT = A.CLIENT)  OR (D.CLIENT in (select cln_master from mt_client where cln_code = A.CLIENT))) AND
			/*Commented and Rewritten by Prateek on 12022014 for ISKB_6558(PMS)-END
			A.CLIENT = B.CLN_CODE AND
			/*D.Instr_Code = A.Instr_Code AND 
			D.EXCHG_CODE = A.EXCH_CODE  AND /*12174 Interoperability 28/05/2019 
			A.EXCH_CODE = B.CLN_EXCH_CODE AND
			A.DOMESTIC_CPCLT = D.BROKER_CD and
			//D.MKT_TYPE = A.MKT_TYPE  AND
			//D.SETTL_NO=A.SETTLEMENT_NO AND
			/*12174 Interoperability 28/05/2019 Starts*/
			/*(('S' = :chr_trd_setl_ind 
			AND D.EXCHG_CODE = A.EXCH_CODE 
			AND D.MKT_TYPE = A.MKT_TYPE 
			AND D.SETTL_NO=A.SETTLEMENT_NO)
			or 
			('T' = :chr_trd_setl_ind 
			AND D.EXCHG_CODE = A.TRD_EXCH 
			AND D.MKT_TYPE = A.TRD_MKT_TYPE 
			AND D.SETTL_NO=A.TRD_SETL_NO)) AND			TO_CHAR(D.DEAL_DATE,'dd/mm/yyyy') =  TO_CHAR(A.DEAL_DATE,'dd/mm/yyyy') and
			D.STATUS = 'PM' AND
			D.BUY_SELL_FLG = 'B' AND
			A.DEAL_STAT IN ('CC','SS','MS','CS') AND
			A.DEAL_CD = '4' AND
		    A.DL_CLASS = '1' AND
		    A.CLH_FLG = 'C' AND
	   	    A.MKT_TYPE = '22' AND
            A.SETTLEMENT_NO = :p_settlment_no AND
                        /*Commented and Rewritten by supriya on 11082015 start 
			A.CLIENT =E.CLIENT AND
		        E.PAY_IN_DAY = :chr_l_early_payindays AND */
                       /*  A.CLIENT = E.CLIENT_CODE AND */           /*12174 Interoperability 28/05/2019 
                       (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
                       /*Commented and Rewritten by supriya on 11082015 -END
		    A.CLIENT||A.IDENTIY_NO not in (
		    SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND SETTLEMENT_NO = :p_settlment_no)
		    /* GROUP BY B.CLN_EXCH_MAP_CODE,D.BROKER_CD,D.DL_AMT Commented by Gouse 
		    GROUP BY A.SETTLEMENT_NO,A.MKT_TYPE,B.CLN_EXCH_MAP_CODE
			/* ISKB-4678: VILIN 15-02-2011 End 
		);
 */		//GROUP BY COL1,COL2;
	/*Modified by siva.ganapathi for ISKB_2221 on 3/5/2009 -- Ended*/
	//Changed by Dhanashree IOP-2
	EXEC SQL DECLARE cur_fund_nse_t2t CURSOR FOR
	    SELECT COL1||','||COL2||','||COL3||','||COL5
			FROM
			(
			SELECT 
				'20' AS COL1,
				B.CLN_EXCH_MAP_CODE  AS COL2,
				B.CLN_EXCH_MAP_CODE  AS COL3,
				/*(SUM(NVL(A.AMOUNT,0))) AS COL5 */
				/*(SUM(NVL(A.AMOUNT,0) - decode(A.DEAL_CD,'4',nvl(AMT_DIFFER,0),'3',-nvl(AMT_DIFFER,0)))) AS COL5*/
				(SUM(NVL(A.AMOUNT,0) - nvl(AMT_DIFFER,0))) AS COL5 /*CS0028550 : InterOperability 2 -  amt_differ changes*/
				FROM DL_DEAL A,MT_CLI_EXCH_MAP B                  
			WHERE A.CLIENT = B.CLN_CODE AND
			A.EXCH_CODE = B.CLN_EXCH_CODE AND
			A.DEAL_STAT IN ('CC','SS','MS','CS') AND
			A.DEAL_CD = '4' AND
		    A.DL_CLASS = '1' AND
		    A.CLH_FLG = 'C' AND
	   	    A.MKT_TYPE = '56' AND
            A.SETTLEMENT_NO = :p_settlment_no  AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date AND
                       (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
		    A.CLIENT||A.IDENTIY_NO not in (
		    SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND SETTLEMENT_NO = :p_settlment_no)
		    GROUP BY A.SETTLEMENT_NO,A.MKT_TYPE,B.CLN_EXCH_MAP_CODE
		);

	
	// opening the cursor
	EXEC SQL OPEN cur_fund_nse_t2t;
	CO_ProcMonitor(g_flogfile,"Opened Cursor cur_fund_nse_t2t",NULL,NULL);

	IS_ANY_ORA_ERROR

	// Processing the cursor data -- (Printing the data into file)
	for(;;)
	{
		EXEC SQL FETCH cur_fund_nse_t2t INTO :chr_l_record_row:i_l_record_row;
												  
		sprintf(chr_g_log_buff,"Fetched cur_fund_nse_t2t sqlca.sqlcode is :%d:",sqlca.sqlcode);
		CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);
		IS_ANY_ORA_ERROR_CURSOR

		// Writing to report file
		fprintf(l_ptr_rep_file_T2T,"%s\n",chr_l_record_row);

		if (sqlca.sqlcode == 1403)
		{
            CO_ProcMonitor(g_flogfile,"No more Records ",NULL,NULL);
            EXEC SQL CLOSE cur_fund_nse_t2t;
            APL_GOBACK_SUCCESS;
		}
	}

// FOR Normal Market Type -- Start
	//*******************************************************************

	// preparing structure for getting the sequence value from a reset able sequence 
	strcpy(l_pro_gseqno_struct_h.sequencename, "EPR_NSE_FUND_T1M");
	strcpy(l_pro_gseqno_struct_h.seq_attrb_a, APL_NULL_STRING);
	strcpy(l_pro_gseqno_struct_h.seq_attrb_b, APL_NULL_STRING);
	strcpy(l_pro_gseqno_struct_h.seq_attrb_c, APL_NULL_STRING);

	l_pro_gseqno_struct_h.seq_stepby = 1;
	l_pro_gseqno_struct_h.seq_start = 1;
	l_pro_gseqno_struct_h.last_seqnum = 99;
	l_pro_gseqno_struct_h.recycle_ind = RECYCLE_EOD;

	// geting the sequence number (we have used this function because we want to reset the sequence at EOD)
	int_return_val = CO_RtvNxtSeqNum(&l_pro_gseqno_struct_h,l_debug_info_ptr); 

		if (int_return_val != APL_FAILURE)
		sprintf(chr_l_seqnum_a,"%d",int_return_val);
	else
		APL_GOBACK_FAIL

	strcpy(chr_l_batch_num,chr_l_seqnum_a); 

	printf("\n chr_l_batch_num -1- --  |%s|",chr_l_batch_num);
	// constructing the sequence number (should be of length 2) for file name 
	if (strlen(chr_l_batch_num) == 1)
	{
		strcpy(chr_l_batch_seq_num,"0");
		strcat(chr_l_batch_seq_num,chr_l_batch_num);
	}
	else // having of length 2
	{
		strcpy(chr_l_batch_seq_num,chr_l_batch_num);
	}

	printf("\n chr_l_seq_num -2- --  |%s|",chr_l_batch_seq_num);
	sprintf(chr_g_log_buff,"Sequence Number -- |%s| \n",chr_l_batch_seq_num);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);


if (settle_flag ==1)
{


			EXEC SQL select SETTL_NO INTO :sett_no1 FROM mt_settl_cal
			WHERE TO_CHAR(TO_DATE(START_DATE),'dd/mm/yyyy') = TO_CHAR (to_date(:p_deal_date),'dd/mm/yyyy')
			AND  EXCH_CODE= 'NSE'
			AND SETTL_TYPE ='49';
			IS_ANY_ORA_ERROR
			
			strcpy(p_settlment_no,sett_no1);
		
					
}
printf("settle number [%s]",p_settlment_no );

	// Constructing file name for Normal market type
	strcat(chr_l_rep_name_M,"CLNTEPF_M_");
	strcat(chr_l_rep_name_M,p_settlment_no); 
	strcat(chr_l_rep_name_M,"_");
	strcat(chr_l_rep_name_M,chr_l_sysdate);
	strcat(chr_l_rep_name_M,".T");
	strcat(chr_l_rep_name_M,chr_l_batch_seq_num); //The batch number of file to be uploaded

	/* ISKB-1721: ASHISH 22-08-2008 Start */
	IF_COND_EXISTS("EARLY_PAYIN_REPORT","CSV_FORMAT")
	{
	strcat(chr_l_rep_name_M,".csv");
	}

	else
	{
		strcat(chr_l_rep_name_M,".txt");
	}
	/* ISKB-1721: ASHISH 22-08-2008 End */


	printf("\n Report Name --  |%s|",chr_l_rep_name_M);
	sprintf(chr_g_log_buff,"Report Name for Normal market-- |%s| \n",chr_l_rep_name_M);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	strcat(chr_l_rep_Path_M,chr_l_rep_name_M); // forming final path with report name for normal market

	printf("\n Final Report Name with path --  |%s|",chr_l_rep_Path_M);
	sprintf(chr_g_log_buff,"Final Report Name with path for Normal market -- |%s| \n",chr_l_rep_Path_M);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	// For opening the file in write mode for normal market report
	if ((l_ptr_rep_file_M = fopen(chr_l_rep_Path_M,"w")) == NULL)
   		return(APL_FAILURE);

	// setting the memory for report structure that will b used to access the file in batch monitor

	strcpy(l_intl_rept_struct_ha_M->report_name,chr_l_rep_name_M);
   	strcpy(l_intl_rept_struct_ha_M->report_desc, "Early Pay in Report");
   	strcpy(l_intl_rept_struct_ha_M->report_date, l_date);
   	l_intl_rept_struct_ha_M->report_width = 100;
   	strcpy(l_intl_rept_struct_ha_M->task_desc, "EarlyPyinRpt");
   	strcpy(l_intl_rept_struct_ha_M->fe_be_ind, APL_BE_IND);
   	strcpy(l_intl_rept_struct_ha_M->usr, l_user);

	// For accessing the file in Batch monitor -- normal market 
	if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha_M, l_debug_info_ptr))
        APL_GOBACK_FAIL

	// Constructing the report header  --Start 

	    /* ISKB-1721: ASHISH 20-08-2008 */
		/* ISKB-4678: VILIN 15-02-2011 Start */
		EXEC SQL SELECT TO_CHAR(COUNT(COUNT(*))) into :chr_l_rec_count_header  
			FROM DL_DEAL A,MT_CLI_EXCH_MAP B
            WHERE
				A.DEAL_STAT IN ('CC','SS','MS','CS') AND
				A.DEAL_CD = '4' AND
				A.DL_CLASS = '1' AND
				A.CLH_FLG = 'C' AND
				A.CLIENT = B.CLN_CODE AND
				A.EXCH_CODE = B.CLN_EXCH_CODE AND
				A.MKT_TYPE = '49' AND
				A.SETTLEMENT_NO = :p_settlment_no  AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date  AND
                                (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
				A.CLIENT||A.IDENTIY_NO not in 
				(SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND SETTLEMENT_NO = :p_settlment_no  )
				GROUP BY A.SETTLEMENT_NO,A.MKT_TYPE,B.CLN_EXCH_MAP_CODE ;
		IS_ANY_ORA_ERROR

		printf("\n chr_l_rec_count_header -1- --  |%s|",chr_l_rec_count_header);

				EXEC SQL SELECT NVL(TO_CHAR(SUM(NVL(DL_AMT,0))),0) INTO :chr_l_total_value_epi
					FROM
					(	SELECT 
						/*(NVL(A.AMOUNT,0)) AS DL_AMT*/
						(NVL(A.AMOUNT,0) - nvl(AMT_DIFFER,0)) AS DL_AMT /*CS0028550 : InterOperability 2 -  amt_differ changes*/                 
						FROM DL_DEAL A,MT_CLI_EXCH_MAP B 
						WHERE 	A.CLIENT = B.CLN_CODE AND
						A.EXCH_CODE = B.CLN_EXCH_CODE AND 
						A.DEAL_STAT IN ('CC','SS','MS','CS') AND
						A.DEAL_CD = '4' AND
						A.DL_CLASS = '1' AND
						A.CLH_FLG = 'C' AND
						A.MKT_TYPE = '49' AND
						A.SETTLEMENT_NO = :p_settlment_no   AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date  AND
                        (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
						A.CLIENT||A.IDENTIY_NO not in (
						SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND SETTLEMENT_NO = :p_settlment_no )
						);	
						
						Alert("SqlCode after the query is |%d|",sqlca.sqlcode);
						Alert("Value of chr_l_total_value_epi is |%s|",chr_l_total_value_epi);
						/*Added by Prateek for ISKB-6559(Report generated for wrong Amount)-END*/
		IS_ANY_ORA_ERROR
		/*Modified by siva.ganapathi for ISKB_2221 on 3/5/2009 -- Ended*/

		printf("\n chr_l_total_value_epi -1- --  |%s|",chr_l_total_value_epi);

		strcpy(chr_l_rpt_header,"01,"); // putting the record type
		strcat(chr_l_rpt_header,"CLNTEPF,"); // putting the file type
		strcat(chr_l_rpt_header,chr_l_member_id); // putting the Member Code
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_sysdate);  //putting Batch Date 
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_batch_seq_num); // putting the bath number
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,"M,"); // putting the Market Type indicator
		strcat(chr_l_rpt_header,p_settlment_no); // putting settlement number
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_rec_count_header); // putting the number of records
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_total_value_epi); // putting the total value of EPI

		printf("\n chr_l_rpt_header -1- --  |%s|",chr_l_rpt_header);
		sprintf(chr_g_log_buff,"Report header -- |%s| \n",chr_l_rpt_header);
	    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

		// Writing the rpt header in file
		fprintf(l_ptr_rep_file_M,"%s\n",chr_l_rpt_header);
	EXEC SQL DECLARE cur_fund_nse_M CURSOR FOR
	SELECT COL1||','||COL2||','||COL3||','||NVL(TO_CHAR(SUM(NVL(COL5,0))),0)
			FROM
			(
			SELECT 
				'20' AS COL1,
				B.CLN_EXCH_MAP_CODE  AS COL2,
				B.CLN_EXCH_MAP_CODE  AS COL3,
				(SUM(NVL(A.AMOUNT,0) - nvl(AMT_DIFFER,0))) AS COL5 /*CS0028550 : InterOperability 2 -  amt_differ changes*/                 
			FROM DL_DEAL A,MT_CLI_EXCH_MAP B
			WHERE 
			A.CLIENT = B.CLN_CODE AND
			A.EXCH_CODE = B.CLN_EXCH_CODE AND
			A.DEAL_STAT IN ('CC','SS','MS','CS') AND
			A.DEAL_CD = '4' AND
			A.DL_CLASS = '1' AND
			A.CLH_FLG = 'C' AND
			A.MKT_TYPE = '49' AND
			A.SETTLEMENT_NO = :p_settlment_no  AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date  AND
            (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
			A.CLIENT||A.IDENTIY_NO not in (
			SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND SETTLEMENT_NO = :p_settlment_no  )
			GROUP BY A.SETTLEMENT_NO,A.MKT_TYPE,B.CLN_EXCH_MAP_CODE )
			 GROUP BY COL1,COL2; 

	// opening the cursor
	EXEC SQL OPEN cur_fund_nse_M;
	CO_ProcMonitor(g_flogfile,"Opened Cursor cur_fund_nse_M",NULL,NULL);

	IS_ANY_ORA_ERROR

	// Processing the cursor data -- (Printing the data into file)
	for(;;)
	{
		EXEC SQL FETCH cur_fund_nse_M INTO :chr_l_record_row:i_l_record_row;
												  
		sprintf(chr_g_log_buff,"Fetched cur_fund_nse_M sqlca.sqlcode is :%d:",sqlca.sqlcode);
		CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);
		IS_ANY_ORA_ERROR_CURSOR

		// Writing to report file
		fprintf(l_ptr_rep_file_M,"%s\n",chr_l_record_row);

		if (sqlca.sqlcode == 1403)
		{
            CO_ProcMonitor(g_flogfile,"No more Records ",NULL,NULL);
            EXEC SQL CLOSE cur_fund_nse_M;
            APL_GOBACK_SUCCESS;
		}
	} 
	
	// Cursor for fetching the report data (Middle part of the report) -- End 
	//********************************************************************
	// FOR 49 Market Type -- End
	//********************************************************************

	
	// FOR 50 Market Type -- Start
	//*******************************************************************

	// preparing structure for getting the sequence value from a reset able sequence 
	strcpy(l_pro_gseqno_struct_h.sequencename, "EPR_NSE_FUND_T1Z");
	strcpy(l_pro_gseqno_struct_h.seq_attrb_a, APL_NULL_STRING);
	strcpy(l_pro_gseqno_struct_h.seq_attrb_b, APL_NULL_STRING);
	strcpy(l_pro_gseqno_struct_h.seq_attrb_c, APL_NULL_STRING);

	l_pro_gseqno_struct_h.seq_stepby = 1;
	l_pro_gseqno_struct_h.seq_start = 1;
	l_pro_gseqno_struct_h.last_seqnum = 99;
	l_pro_gseqno_struct_h.recycle_ind = RECYCLE_EOD;

	// geting the sequence number (we have used this function because we want to reset the sequence at EOD)
	int_return_val = CO_RtvNxtSeqNum(&l_pro_gseqno_struct_h,l_debug_info_ptr); 

		if (int_return_val != APL_FAILURE)
		sprintf(chr_l_seqnum_a,"%d",int_return_val);
	else
		APL_GOBACK_FAIL

	strcpy(chr_l_batch_num,chr_l_seqnum_a); 

	printf("\n chr_l_batch_num -1- --  |%s|",chr_l_batch_num);
	// constructing the sequence number (should be of length 2) for file name 
	if (strlen(chr_l_batch_num) == 1)
	{
		strcpy(chr_l_batch_seq_num,"0");
		strcat(chr_l_batch_seq_num,chr_l_batch_num);
	}
	else // having of length 2
	{
		strcpy(chr_l_batch_seq_num,chr_l_batch_num);
	}

	printf("\n chr_l_seq_num -2- --  |%s|",chr_l_batch_seq_num);
	sprintf(chr_g_log_buff,"Sequence Number -- |%s| \n",chr_l_batch_seq_num);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

if (settle_flag ==1)
{


			EXEC SQL select SETTL_NO INTO :sett_no1 FROM mt_settl_cal
			WHERE TO_CHAR(TO_DATE(START_DATE),'dd/mm/yyyy') = TO_CHAR (to_date(:p_deal_date),'dd/mm/yyyy')
			AND  EXCH_CODE= 'NSE'
			AND SETTL_TYPE ='50';
			IS_ANY_ORA_ERROR
			strcpy(p_settlment_no,sett_no1);
		
					
}
printf("settle number [%s]",p_settlment_no );

	// Constructing file name for Normal market type
	strcat(chr_l_rep_name_P,"CLNTEPF_Z_");
	strcat(chr_l_rep_name_P,p_settlment_no); 
	strcat(chr_l_rep_name_P,"_");
	strcat(chr_l_rep_name_P,chr_l_sysdate);
	strcat(chr_l_rep_name_P,".T");
	strcat(chr_l_rep_name_P,chr_l_batch_seq_num); //The batch number of file to be uploaded

	/* ISKB-1721: ASHISH 22-08-2008 Start */
	IF_COND_EXISTS("EARLY_PAYIN_REPORT","CSV_FORMAT")
	{
	strcat(chr_l_rep_name_P,".csv");
	}

	else
	{
		strcat(chr_l_rep_name_P,".txt");
	}
	/* ISKB-1721: ASHISH 22-08-2008 End */


	printf("\n Report Name --  |%s|",chr_l_rep_name_P);
	sprintf(chr_g_log_buff,"Report Name for Normal market-- |%s| \n",chr_l_rep_name_P);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	strcat(chr_l_rep_Path_P,chr_l_rep_name_P); // forming final path with report name for normal market

	printf("\n Final Report Name with path --  |%s|",chr_l_rep_Path_P);
	sprintf(chr_g_log_buff,"Final Report Name with path for Normal market -- |%s| \n",chr_l_rep_Path_P);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	// For opening the file in write mode for normal market report
	if ((l_ptr_rep_file_P = fopen(chr_l_rep_Path_P,"w")) == NULL)
   		return(APL_FAILURE);

	// setting the memory for report structure that will b used to access the file in batch monitor

	strcpy(l_intl_rept_struct_ha_P->report_name,chr_l_rep_name_P);
   	strcpy(l_intl_rept_struct_ha_P->report_desc, "Early Pay in Report");
   	strcpy(l_intl_rept_struct_ha_P->report_date, l_date);
   	l_intl_rept_struct_ha_P->report_width = 100;
   	strcpy(l_intl_rept_struct_ha_P->task_desc, "EarlyPyinRpt");
   	strcpy(l_intl_rept_struct_ha_P->fe_be_ind, APL_BE_IND);
   	strcpy(l_intl_rept_struct_ha_P->usr, l_user);

	// For accessing the file in Batch monitor -- normal market 
	if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha_P, l_debug_info_ptr))
        APL_GOBACK_FAIL

	// Constructing the report header  --Start 

	    /* ISKB-1721: ASHISH 20-08-2008 */
		/* ISKB-4678: VILIN 15-02-2011 Start */
		EXEC SQL SELECT TO_CHAR(COUNT(COUNT(*))) into :chr_l_rec_count_header  
			FROM DL_DEAL A,MT_CLI_EXCH_MAP B
            WHERE
				A.DEAL_STAT IN ('CC','SS','MS','CS') AND
				A.DEAL_CD = '4' AND
				A.DL_CLASS = '1' AND
				A.CLH_FLG = 'C' AND
				A.CLIENT = B.CLN_CODE AND
				A.EXCH_CODE = B.CLN_EXCH_CODE AND
				A.MKT_TYPE = '50' AND
				A.SETTLEMENT_NO = :p_settlment_no  AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date  AND
                                (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
				A.CLIENT||A.IDENTIY_NO not in 
				(SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND SETTLEMENT_NO = :p_settlment_no  )
				GROUP BY A.SETTLEMENT_NO,A.MKT_TYPE,B.CLN_EXCH_MAP_CODE ;
		IS_ANY_ORA_ERROR

		printf("\n chr_l_rec_count_header -1- --  |%s|",chr_l_rec_count_header);

				EXEC SQL SELECT NVL(TO_CHAR(SUM(NVL(DL_AMT,0))),0) INTO :chr_l_total_value_epi
					FROM
					(	SELECT 
						/*(NVL(A.AMOUNT,0)) AS DL_AMT*/
						(NVL(A.AMOUNT,0) - nvl(AMT_DIFFER,0)) AS DL_AMT /*CS0028550 : InterOperability 2 -  amt_differ changes*/                 
						FROM DL_DEAL A,MT_CLI_EXCH_MAP B 
						WHERE 	A.CLIENT = B.CLN_CODE AND
						A.EXCH_CODE = B.CLN_EXCH_CODE AND 
						A.DEAL_STAT IN ('CC','SS','MS','CS') AND
						A.DEAL_CD = '4' AND
						A.DL_CLASS = '1' AND
						A.CLH_FLG = 'C' AND
						A.MKT_TYPE = '50' AND
						SETTLEMENT_NO = :p_settlment_no    AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date  AND
                        (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
						A.CLIENT||A.IDENTIY_NO not in (
						SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND SETTLEMENT_NO = :p_settlment_no)
						);	
						
						Alert("SqlCode after the query is |%d|",sqlca.sqlcode);
						Alert("Value of chr_l_total_value_epi is |%s|",chr_l_total_value_epi);
						/*Added by Prateek for ISKB-6559(Report generated for wrong Amount)-END*/
		IS_ANY_ORA_ERROR
		/*Modified by siva.ganapathi for ISKB_2221 on 3/5/2009 -- Ended*/

		printf("\n chr_l_total_value_epi -1- --  |%s|",chr_l_total_value_epi);

		strcpy(chr_l_rpt_header,"01,"); // putting the record type
		strcat(chr_l_rpt_header,"CLNTEPF,"); // putting the file type
		strcat(chr_l_rpt_header,chr_l_member_id); // putting the Member Code
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_sysdate);  //putting Batch Date 
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_batch_seq_num); // putting the bath number
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,"Z,"); // putting the Market Type indicator
		strcat(chr_l_rpt_header,p_settlment_no); // putting settlement number
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_rec_count_header); // putting the number of records
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_total_value_epi); // putting the total value of EPI

		printf("\n chr_l_rpt_header -1- --  |%s|",chr_l_rpt_header);
		sprintf(chr_g_log_buff,"Report header -- |%s| \n",chr_l_rpt_header);
	    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

		// Writing the rpt header in file
		fprintf(l_ptr_rep_file_P,"%s\n",chr_l_rpt_header);
	EXEC SQL DECLARE cur_fund_nse_M1 CURSOR FOR
	SELECT COL1||','||COL2||','||COL3||','||NVL(TO_CHAR(SUM(NVL(COL5,0))),0)
			FROM
			(
			SELECT 
				'20' AS COL1,
				B.CLN_EXCH_MAP_CODE  AS COL2,
				B.CLN_EXCH_MAP_CODE  AS COL3,
				(SUM(NVL(A.AMOUNT,0) - nvl(AMT_DIFFER,0))) AS COL5 /*CS0028550 : InterOperability 2 -  amt_differ changes*/                 
			FROM DL_DEAL A,MT_CLI_EXCH_MAP B
			WHERE 
			A.CLIENT = B.CLN_CODE AND
			A.EXCH_CODE = B.CLN_EXCH_CODE AND
			A.DEAL_STAT IN ('CC','SS','MS','CS') AND
			A.DEAL_CD = '4' AND
			A.DL_CLASS = '1' AND
			A.CLH_FLG = 'C' AND
			A.MKT_TYPE = '50' AND
			SETTLEMENT_NO = :p_settlment_no  AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date AND
            (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
			A.CLIENT||A.IDENTIY_NO not in (
			SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND SETTLEMENT_NO = :p_settlment_no)
			GROUP BY A.SETTLEMENT_NO,A.MKT_TYPE,B.CLN_EXCH_MAP_CODE )
			 GROUP BY COL1,COL2; 

	// opening the cursor
	EXEC SQL OPEN cur_fund_nse_M1;
	CO_ProcMonitor(g_flogfile,"Opened Cursor cur_fund_nse_M",NULL,NULL);

	IS_ANY_ORA_ERROR

	// Processing the cursor data -- (Printing the data into file)
	for(;;)
	{
		EXEC SQL FETCH cur_fund_nse_M1 INTO :chr_l_record_row:i_l_record_row;
												  
		sprintf(chr_g_log_buff,"Fetched cur_fund_nse_M sqlca.sqlcode is :%d:",sqlca.sqlcode);
		CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);
		IS_ANY_ORA_ERROR_CURSOR

		// Writing to report file
		fprintf(l_ptr_rep_file_P,"%s\n",chr_l_record_row);

		if (sqlca.sqlcode == 1403)
		{
            CO_ProcMonitor(g_flogfile,"No more Records ",NULL,NULL);
            EXEC SQL CLOSE cur_fund_nse_M1;
            APL_GOBACK_SUCCESS;
		}
	} 
	
	// Cursor for fetching the report data (Middle part of the report) -- End 
	//********************************************************************
	// FOR  Market Type 50 -- End
	//********************************************************************

	
	


	
}
	// Cursor for fetching the report data  -- End 
	//********************************************************************
	//FOR T2T Market Type -- End
	//********************************************************************

	///  put cursor here.. 
	
	
// Added by Asmeet for 12174 Interoperability changes Starts if Report Type is FUND & Exchange Code is NSE Starts & Charges is "True" starts	
if( !strcmp(p_charges,"Y") )
{	
	//********************************************************************
	//FOR FOR Charges file -- Start
	//********************************************************************
	// preparing structure for getting the sequence value from a reset able sequence 
	strcpy(l_pro_gseqno_struct_h.sequencename, "EPR_NSE_FUND_CHARGES");
	strcpy(l_pro_gseqno_struct_h.seq_attrb_a, APL_NULL_STRING);
	strcpy(l_pro_gseqno_struct_h.seq_attrb_b, APL_NULL_STRING);
	strcpy(l_pro_gseqno_struct_h.seq_attrb_c, APL_NULL_STRING);

	l_pro_gseqno_struct_h.seq_stepby = 1;
	l_pro_gseqno_struct_h.seq_start = 1;
	l_pro_gseqno_struct_h.last_seqnum = 99;
	l_pro_gseqno_struct_h.recycle_ind = RECYCLE_EOD;
	
	// geting the sequence number (we have used this function because we want to reset the sequence at EOD)
	int_return_val = CO_RtvNxtSeqNum(&l_pro_gseqno_struct_h,l_debug_info_ptr); 

		if (int_return_val != APL_FAILURE)
		sprintf(chr_l_seqnum_a,"%d",int_return_val);
	else
		APL_GOBACK_FAIL

	strcpy(chr_l_batch_num,chr_l_seqnum_a); 

	printf("\n chr_l_batch_num -1- -- charges |%s|",chr_l_batch_num);
	// constructing the sequence number (should be of length 2) for file name 
	if (strlen(chr_l_batch_num) == 1)
	{
		strcpy(chr_l_batch_seq_num,"0");
		strcat(chr_l_batch_seq_num,chr_l_batch_num);
	}
	else // having of length 2
	{
		strcpy(chr_l_batch_seq_num,chr_l_batch_num);
	}

	printf("\n chr_l_seq_num -2- -- charges |%s|",chr_l_batch_seq_num);
	sprintf(chr_g_log_buff,"Sequence Number charges-- |%s| \n",chr_l_batch_seq_num);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);



if(strlen(p_settlment_no) == 0)
        {
			EXEC SQL select SETTL_NO INTO :sett_no1 FROM mt_settl_cal
			WHERE TO_CHAR(TO_DATE(START_DATE),'dd/mm/yyyy') = TO_CHAR (to_date(:p_deal_date),'dd/mm/yyyy')
			AND  EXCH_CODE= 'NSE'
			AND SETTL_TYPE ='55';
			IS_ANY_ORA_ERROR

			EXEC SQL select SETTL_NO INTO :sett_no2 FROM mt_settl_cal
			WHERE TO_CHAR(TO_DATE(START_DATE),'dd/mm/yyyy') = TO_CHAR (to_date(:p_deal_date),'dd/mm/yyyy')
			AND  EXCH_CODE= 'NSE'
			AND SETTL_TYPE ='49';
			IS_ANY_ORA_ERROR
			
			strcpy(p_settlment_no,sett_no1);
			strcpy(p_settlment_no1,sett_no2);


		}
					

printf("settle number [%s]",p_settlment_no );

printf("settle number [%s]",p_settlment_no1 );



	// Constructing file name for Charges
	strcat(chr_l_rep_namecharges,chr_l_member_id);
	strcat(chr_l_rep_namecharges,"_NSP_");
	strcat(chr_l_rep_namecharges,chr_l_sysdate1);//added by HM
	strcat(chr_l_rep_namecharges,".csv");

	

	printf("\n Report Name --  |%s|",chr_l_rep_namecharges);
	sprintf(chr_g_log_buff,"Report Name for Charges file HERE....-- |%s| \n",chr_l_pathT2T);
	sprintf(chr_g_log_buff,"Report Name for Charges file -- |%s| \n",chr_l_rep_namecharges);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	strcat(chr_l_pathcharge,chr_l_rep_namecharges); // forming final path with report name for charges file
	
	printf("\n Final Report Name with path  chr_l_pathT2T --  |%s|",chr_l_pathcharge);
	sprintf(chr_g_log_buff,"Final Report Name with path for Charges file-- |%s| \n",chr_l_pathcharge);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	// For opening the file in write mode for T2T market report
	if ((l_ptr_rep_file_CHARGES = fopen(chr_l_pathcharge,"w")) == NULL)
   		return(APL_FAILURE);
	
	
	strcpy(l_intl_rept_struct_ha_charges->report_name,chr_l_rep_namecharges);
   	strcpy(l_intl_rept_struct_ha_charges->report_desc, "Early Pay in Report");
   	strcpy(l_intl_rept_struct_ha_charges->report_date, l_date);
   	l_intl_rept_struct_ha_charges->report_width = 100;
   	strcpy(l_intl_rept_struct_ha_charges->task_desc, "EarlyPyinRpt");
   	strcpy(l_intl_rept_struct_ha_charges->fe_be_ind, APL_BE_IND);
   	strcpy(l_intl_rept_struct_ha_charges->usr, l_user);

	// For accessing the file in Batch monitor -- normal market 
	if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha_charges, l_debug_info_ptr))
        APL_GOBACK_FAIL

	/* Added and commented by Asmeet since not required for charges file 12174 Interoperability changes */	
	/*EXEC SQL SELECT TO_CHAR(COUNT(COUNT(*)),'999999999') into :chr_l_rec_count_header
			FROM DL_DEAL A, MT_PTY_EXCH_MAP B, MT_CLI_EXCH_MAP C
				WHERE 
				DEAL_STAT IN ('CC','SS','MS','CS')
				AND DL_CLASS='1'
				AND CLH_FLG   ='C'
				AND B.EXCH_CODE ='NSE' AND
				A.CLIENT = C.CLN_CODE  AND
				A.EXCH_CODE = C.CLN_EXCH_CODE AND
				A.domestic_cpclt = B.pty_CODE  AND
				A.EXCH_CODE = B.EXCH_CODE 
			GROUP BY DECODE(A.MKT_TYPE,'13','N','22','W'),A.TRD_SETL_NO, B.PTY_EXCH_MAP_CODE, C.CLN_EXCH_MAP_CODE;
		IS_ANY_ORA_ERROR

		printf("\n chr_l_rec_count_header  for charges  |%s|",chr_l_rec_count_header);

		
		EXEC SQL SELECT NVL(TO_CHAR(SUM(NVL(BROKERCOMM + STX_COMM -(AMT_DIFFER),0)),'999999999999990.99'),0) into :chr_l_total_value_epi
			FROM DL_DEAL A, MT_PTY_EXCH_MAP B, MT_CLI_EXCH_MAP C
				WHERE 
				DEAL_STAT IN ('CC','SS','MS','CS')
				AND DL_CLASS='1'
				AND CLH_FLG   ='C'
				AND B.EXCH_CODE ='NSE' AND
				A.CLIENT = C.CLN_CODE  AND
				A.EXCH_CODE = C.CLN_EXCH_CODE AND
				A.domestic_cpclt = B.pty_CODE  AND
				A.EXCH_CODE = B.EXCH_CODE; 
		IS_ANY_ORA_ERROR

		printf("\n chr_l_total_value_epi for charges  |%s|",chr_l_total_value_epi);	
	*/	
		
		strcpy(chr_l_rpt_header,"Settlement_Type,"); 
		strcat(chr_l_rpt_header,"Settlement_Number,"); 
		strcat(chr_l_rpt_header,"TM_Code,"); 
		strcat(chr_l_rpt_header,"CP_Code,");
		strcat(chr_l_rpt_header,"Amount,");  	
		strcat(chr_l_rpt_header,"Traded Exchange");  	
		
	
	//strcpy(chr_l_rpt_header,"0333,"); // putting the record type
	
	
	sprintf(chr_g_log_buff,"Report header for Charges file-- |%s| \n",chr_l_rpt_header);
	    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);
	
	fprintf(l_ptr_rep_file_CHARGES,"%s\n",chr_l_rpt_header);

	/* 12174 Interoperability by Asmeet - query changes 26/05/2019 */
	EXEC SQL DECLARE cur_fund_nse_charges CURSOR FOR
		SELECT COL1||','||COL2||','||COL3||','||COL4||','||COL5||','||COL6
		FROM
		 (
			SELECT 
			  DECODE(A.MKT_TYPE,'55','5','56','6','49','M','50','Z') AS COL1,
			  A.SETTLEMENT_NO  AS COL2,
			  B.PTY_EXCH_MAP_CODE  AS COL3,
			  C.CLN_EXCH_MAP_CODE AS COL4,
			 TO_CHAR(SUM(NVL(BROKERCOMM,0) + nvl(STX_COMM,0) + nvl(STAMP_DUTY,0) ),'fm999999999999990.00') AS COL5,/*Changes by Shradha for Stamp Duty Enh. , changes done by sudhanshu for charges file fix for amt diff non consideration*/
			  DECODE(A.TRD_EXCH,'NSE','N','BSE','B','MCS','M') AS COL6 /* Added by Dhanashree  IOP2 CS0028550*/
			  FROM DL_DEAL A, MT_PTY_EXCH_MAP B, MT_CLI_EXCH_MAP C
			  WHERE 
					DEAL_STAT IN ('CC','SS','MS','CS')
					AND DL_CLASS='1'
					AND CLH_FLG   ='C'
					AND A.EXCH_CODE ='NSE' 
					AND A.CLIENT = C.CLN_CODE  
					AND A.EXCH_CODE = C.CLN_EXCH_CODE 
					AND A.domestic_cpclt = B.pty_CODE  
					AND A.TRD_EXCH = B.EXCH_CODE 
					AND A.DEAL_CD IN('3', '4')
					AND MKT_TYPE IN ('55', '56','49','50')
					AND A.SETTLEMENT_NO IN (:p_settlment_no,:p_settlment_no1) AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date
					GROUP BY A.MKT_TYPE,A.SETTLEMENT_NO, B.PTY_EXCH_MAP_CODE, C.CLN_EXCH_MAP_CODE,A.TRD_EXCH
					HAVING SUM(NVL(BROKERCOMM,0) + nvl(STX_COMM,0) + nvl(STAMP_DUTY,0) ) > 0 /*Added IOP2 retro*//*Changes by Shradha for Stamp Duty Enh , changes done by sudhanshu for charges file fix for amt diff non consideration*/
		  ) ;

	
	// opening the cursor
	EXEC SQL OPEN cur_fund_nse_charges;
	CO_ProcMonitor(g_flogfile,"Opened Cursor cur_bse_fund",NULL,NULL);

	IS_ANY_ORA_ERROR

	// Processing the cursor data -- (Printing the data into file)
	for(;;)
	{
		EXEC SQL FETCH cur_fund_nse_charges INTO :chr_l_record_row:i_l_record_row;
												  
		//sprintf(chr_g_log_buff,"Fetched cur_fund_nse_charges sqlca.sqlcode is :%d:",sqlca.sqlcode);
		//CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);
		IS_ANY_ORA_ERROR_CURSOR

		// Writing to report file
		fprintf(l_ptr_rep_file_CHARGES,"%s\n",chr_l_record_row);

		if (sqlca.sqlcode == 1403)
		{
            CO_ProcMonitor(g_flogfile,"No more Records ",NULL,NULL);
            EXEC SQL CLOSE cur_fund_nse_charges;
            APL_GOBACK_SUCCESS;
		}
	} 
	/****************** T1 settlement ****************/
	
}
	
	// Processing the cursor data -- (Printing the data into file)
	
	// Cursor for fetching the report data  -- End 
	//********************************************************************
	//FOR Charges file -- End
	//********************************************************************
	
// Added by Asmeet for 12174 Interoperability changes Starts if Report Type is FUND & Exchange Code is NSE Starts & Charges is "True" ends	
	APL_GOBACK_SUCCESS
		
	
	RETURN_SUCCESS:
	if( !strcmp(p_charges,"N") )	
	{
		fclose(l_ptr_rep_file); // Closing the file -- normal market type.
		fclose(l_ptr_rep_file_T2T); // Closing the file -- T2T market type.
		fclose(l_ptr_rep_file_P);
        fclose(l_ptr_rep_file_M);

	}	
	if( !strcmp(p_charges,"Y") )	
		fclose(l_ptr_rep_file_CHARGES); // Closing the file -- Charges file.
		CO_ProcMonitor(g_flogfile, "Leaving Fund_Nse() with success", l_debug_info_ptr, NULL);
		printf("\n Leaving Fund_Nse() with success \n");
	return(APL_SUCCESS);
	
	RETURN_FAILURE:
	if( !strcmp(p_charges,"N") )	
	{
		fclose(l_ptr_rep_file); // Closing the file -- normal market type.
		fclose(l_ptr_rep_file_T2T); // Closing the file -- T2T market type.
		fclose(l_ptr_rep_file_P);
        fclose(l_ptr_rep_file_M);
	}	
	if( !strcmp(p_charges,"Y") )
		fclose(l_ptr_rep_file_CHARGES); // Closing the file -- Charges file.
		printf("\n Error in Fund_Nse() \n");
	return(APL_FAILURE);
}


// Added By Vamshi For MCS Enhancement --Start
static int  Fund_Mcs(char *p_settlment_no,char *p_deal_date,FILE *g_flogfile, DEBUG_INFO_STRUCT_H   **l_debug_info_ptr)
{
	char chr_l_sysdate[APL_DATE_LEN]  =	APL_NULL_STRING;
	char chr_l_rep_name[FILENAME_LEN_A]   = APL_NULL_STRING; 
	char chr_l_rep_nameT2T[FILENAME_LEN_A]   = APL_NULL_STRING; 
	char chr_l_pathT2T[200]   = APL_NULL_STRING; 
	
	char chr_l_record_row[600] = APL_NULL_STRING;
	short i_l_record_row = 0;

	// for report header
	char chr_l_rpt_header[100] = APL_NULL_STRING;
	char chr_l_rec_count_header[20] = APL_NULL_STRING;
	char chr_l_total_value_epi[30] = APL_NULL_STRING;

	char chr_l_batch_num[5] = APL_NULL_STRING;
	char chr_l_batch_seq_num[5] = APL_NULL_STRING;
	char chr_l_seqnum_a[10] = APL_NULL_STRING;
	int int_return_val = 0;

	char chr_l_member_id[10] = APL_NULL_STRING;
	short i_l_member_id = 0;


/************** MARKET TYPE 23**********/

char chr_l_rep_Path_M[FILENAME_LEN_A+FILEPATH_LEN]   = APL_NULL_STRING;
char chr_l_rep_name_M[FILENAME_LEN_A]   = APL_NULL_STRING;

FILE  *l_ptr_rep_file_M   =  NULL; 
INTL_REPT_STRUCT_H *l_intl_rept_struct_ha_M =NULL;
l_intl_rept_struct_ha_M = (INTL_REPT_STRUCT_H *) calloc(1,sizeof(INTL_REPT_STRUCT_H));
memset(l_intl_rept_struct_ha_M,NULL,sizeof(INTL_REPT_STRUCT_H));
strcpy(chr_l_rep_Path_M,chr_l_rep_Path);
/************ MARKET TYPE 23 END ****************/	

/*************24********************/



char chr_l_rep_Path_P[FILENAME_LEN_A+FILEPATH_LEN]   = APL_NULL_STRING;
char chr_l_rep_name_P[FILENAME_LEN_A]   = APL_NULL_STRING;

FILE  *l_ptr_rep_file_P   =  NULL; 
INTL_REPT_STRUCT_H *l_intl_rept_struct_ha_P =NULL;
l_intl_rept_struct_ha_P = (INTL_REPT_STRUCT_H *) calloc(1,sizeof(INTL_REPT_STRUCT_H));
memset(l_intl_rept_struct_ha_P,NULL,sizeof(INTL_REPT_STRUCT_H));
strcpy(chr_l_rep_Path_P,chr_l_rep_Path);

/********24 MKT TYPEC**********/
int settle_flag =0;

	FILE  *l_ptr_rep_file  =  NULL; 
	FILE  *l_ptr_rep_file_T2T  =  NULL; 

	INTL_REPT_STRUCT_H   *l_intl_rept_struct_ha  =NULL;
	INTL_REPT_STRUCT_H *l_intl_rept_struct_ha_t2t =NULL;

	PRO_GSEQNUM_STRUCT_H    l_pro_gseqno_struct_h; // For sequence (resetable sequence)

	l_intl_rept_struct_ha = (INTL_REPT_STRUCT_H *) calloc(1,sizeof(INTL_REPT_STRUCT_H));
	l_intl_rept_struct_ha_t2t = (INTL_REPT_STRUCT_H *) calloc(1,sizeof(INTL_REPT_STRUCT_H));

	// setting the memory for report structure that will b used to access the file in batch monitor
	memset(l_intl_rept_struct_ha,NULL,sizeof(INTL_REPT_STRUCT_H));
	memset(l_intl_rept_struct_ha_t2t,NULL,sizeof(INTL_REPT_STRUCT_H));

	printf("\n Entering Fund_Mcs() ");
	printf("\n ** p_settlment_no **  -- |%s|",p_settlment_no);

	// For T2T report
	strcpy(chr_l_pathT2T,chr_l_rep_Path);

	// Getting the system date
	EXEC SQL SELECT to_char(SYS_DATE,'DDMMYYYY') INTO :chr_l_sysdate FROM PRO_SYS_DATE;
	IS_ANY_ORA_ERROR

	printf("\n chr_l_sysdate  --  |%s|",chr_l_sysdate);
	sprintf(chr_g_log_buff,"System date -- |%s| \n",chr_l_sysdate);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	// For getting the member id of the bank
	EXEC SQL SELECT MAP_DESC  into :chr_l_member_id :i_l_member_id 
		FROM PRO_SGENSTAT  
			WHERE MAP_TYPE = 'MEMBER_CD' AND MAP_VAL = 'MCS' ;
	IS_ANY_ORA_ERROR
	
	printf("\n chr_l_member_id  --  |%s|",chr_l_member_id);
	sprintf(chr_g_log_buff,"Member ID -- |%s| \n",chr_l_member_id);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	//********************************************************************
	// FOR Normal Market Type -- Start
	//*******************************************************************

	// preparing structure for getting the sequence value from a reset able sequence 
	strcpy(l_pro_gseqno_struct_h.sequencename, "EPR_MCS_FUND_NORMAL");
	strcpy(l_pro_gseqno_struct_h.seq_attrb_a, APL_NULL_STRING);
	strcpy(l_pro_gseqno_struct_h.seq_attrb_b, APL_NULL_STRING);
	strcpy(l_pro_gseqno_struct_h.seq_attrb_c, APL_NULL_STRING);

	l_pro_gseqno_struct_h.seq_stepby = 1;
	l_pro_gseqno_struct_h.seq_start = 1;
	l_pro_gseqno_struct_h.last_seqnum = 1000;
	l_pro_gseqno_struct_h.recycle_ind = RECYCLE_EOD;

	// geting the sequence number (we have used this function because we want to reset the sequence at EOD)
	//int_return_val = CO_RtvNxtSeqNum(&l_pro_gseqno_struct_h,l_debug_info_ptr); // Commented by Tarkeshwar for sequqnce no issue fix
	int_return_val = getEP_FileNameCNT_Funds(p_settlment_no,"MCX-SX-EQ_FEPI_N_"); // Tarkeshwar
	printf("\nTK::: int_return_val = %d",int_return_val); // Tarkeshwar
		if (int_return_val != APL_FAILURE)
		sprintf(chr_l_seqnum_a,"%d",int_return_val);
	else
		APL_GOBACK_FAIL

	strcpy(chr_l_batch_num,chr_l_seqnum_a); 

	printf("\n chr_l_batch_num -1- --  |%s|",chr_l_batch_num);
	// constructing the sequence number (should be of length 2) for file name 
	if (strlen(chr_l_batch_num) == 1)
	{
		strcpy(chr_l_batch_seq_num,"0");
		strcat(chr_l_batch_seq_num,chr_l_batch_num);
	}
	else // having of length 2
	{
		strcpy(chr_l_batch_seq_num,chr_l_batch_num);
	}

	printf("\n chr_l_seq_num -2- --  |%s|",chr_l_batch_seq_num);
	sprintf(chr_g_log_buff,"Sequence Number -- |%s| \n",chr_l_batch_seq_num);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);


    if(strlen(p_settlment_no) == 0)
        {
			EXEC SQL select SETTL_NO INTO :sett_no1 FROM mt_settl_cal
			WHERE TO_CHAR(TO_DATE(START_DATE),'dd/mm/yyyy') = TO_CHAR (to_date(:p_deal_date),'dd/mm/yyyy')
			AND  EXCH_CODE= 'MCS'
			AND SETTL_TYPE ='01';
			IS_ANY_ORA_ERROR
           settle_flag ==1;
strcpy(p_settlment_no,sett_no1);
		}
		printf("settle number [%s]",p_settlment_no );


	// Constructing file name for Normal market type
	strcat(chr_l_rep_name,"MCX-SX-EQ_FEPI_N_");
	strcat(chr_l_rep_name,p_settlment_no); 
	strcat(chr_l_rep_name,"_");
	strcat(chr_l_rep_name,chr_l_member_id);
	strcat(chr_l_rep_name,"_");
	strcat(chr_l_rep_name,chr_l_sysdate);
	strcat(chr_l_rep_name,".T");
	strcat(chr_l_rep_name,chr_l_batch_seq_num); //The batch number of file to be uploaded

	printf("\n Report Name --  |%s|",chr_l_rep_name);
	sprintf(chr_g_log_buff,"Report Name for Normal market-- |%s| \n",chr_l_rep_name);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	strcat(chr_l_rep_Path,chr_l_rep_name); // forming final path with report name for normal market

	printf("\n Final Report Name with path --  |%s|",chr_l_rep_Path);
	sprintf(chr_g_log_buff,"Final Report Name with path for Normal market -- |%s| \n",chr_l_rep_Path);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	// For opening the file in write mode for normal market report
	if ((l_ptr_rep_file = fopen(chr_l_rep_Path,"w")) == NULL)
   		return(APL_FAILURE);

	// setting the memory for report structure that will b used to access the file in batch monitor

	strcpy(l_intl_rept_struct_ha->report_name,chr_l_rep_name);
   	strcpy(l_intl_rept_struct_ha->report_desc, "Early Pay in Report");
   	strcpy(l_intl_rept_struct_ha->report_date, l_date);
   	l_intl_rept_struct_ha->report_width = 100;
   	strcpy(l_intl_rept_struct_ha->task_desc, "EarlyPyinRpt");
   	strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
   	strcpy(l_intl_rept_struct_ha->usr, l_user);

	// For accessing the file in Batch monitor -- normal market 
	if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))
        APL_GOBACK_FAIL

	// Constructing the report header  --Start 

	    /* ISKB-1721: ASHISH 20-08-2008 */
		/* ISKB-4678: VILIN 15-02-2011 Start */
		EXEC SQL SELECT TO_CHAR(COUNT(COUNT(*))) into :chr_l_rec_count_header  
			FROM DL_DEAL A,MT_CLI_EXCH_MAP B
                        /*Commented and Rewritten by supriya on 11082015 start  
                        IV_CLIENTSETUP C*/
                        /* MT_CLIENT_PARAM E */               /*12174 Interoperability 28/05/2019 */
                        /*Commented and Rewritten by supriya on 11082015 -END*/
	        WHERE
				A.DEAL_STAT IN ('CC','SS','MS','CS') AND
				A.DEAL_CD = '4' AND
				A.DL_CLASS = '1' AND
				A.CLH_FLG = 'C' AND
				A.CLIENT = B.CLN_CODE AND
				A.EXCH_CODE = B.CLN_EXCH_CODE AND
				A.MKT_TYPE = '01' AND
				A.SETTLEMENT_NO = :p_settlment_no AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date AND 
                                /*Commented and Rewritten by supriya on 11082015 start
				A.CLIENT =C.CLIENT AND
			        C.PAY_IN_DAY = :chr_l_early_payindays AND*/
                               /*  A.CLIENT = E.CLIENT_CODE AND */               /*12174 Interoperability 28/05/2019 */ 
                               (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
                                /*Commented and Rewritten by supriya on 11082015 -END*/
				A.CLIENT||A.IDENTIY_NO not in 
				(SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND SETTLEMENT_NO = :p_settlment_no )
				GROUP BY A.SETTLEMENT_NO,A.MKT_TYPE,B.CLN_EXCH_MAP_CODE ;
		IS_ANY_ORA_ERROR

		printf("\n chr_l_rec_count_header -1- --  |%s|",chr_l_rec_count_header);

		EXEC SQL SELECT NVL(TO_CHAR(SUM(NVL(DL_AMT,0))),0) INTO :chr_l_total_value_epi
				FROM
				(
						//SELECT  TO_CHAR(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',nvl(AMT_DIFFER,0),'3',-nvl(AMT_DIFFER,0)),'999999999999990.99') AS DL_AMT                  /*12174 Interoperability 28/05/2019 */
						//SELECT  TO_CHAR(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',-nvl(AMT_DIFFER,0),'3',nvl(AMT_DIFFER,0))) AS DL_AMT                  /*12174 Interoperability 28/05/2019 */
						SELECT  TO_CHAR(NVL(A.AMOUNT,0)) AS DL_AMT                  /*12174 Interoperability 28/05/2019 */
     			   	    FROM DL_DEAL A,MT_CLI_EXCH_MAP B,DL_EXCHGORD_UPLD D
                                    /*Commented and Rewritten by supriya on 11082015 start 
                                    IV_CLIENTSETUP E*/
                                    /* MT_CLIENT_PARAM E */                 /*12174 Interoperability 28/05/2019 */
                                    /*Commented and Rewritten by supriya on 11082015 -END*/
						/*Commented and Rewritten by Prateek on 12022014 for ISKB_6558(PMS)-START
						WHERE D.CLIENT = A.CLIENT AND*/
						WHERE ((D.CLIENT = A.CLIENT)  OR (D.CLIENT in (select cln_master from mt_client where cln_code = A.CLIENT))) AND
						/*Commented and Rewritten by Prateek on 12022014 for ISKB_6558(PMS)-END*/
 					    A.CLIENT = B.CLN_CODE AND
                        D.Instr_Code = A.Instr_Code AND 
				        //D.EXCHG_CODE = A.EXCH_CODE  AND      /*12174 Interoperability 28/05/2019 */
						/*12174 Interoperability 28/05/2019 Starts*/
						(('S' = :chr_trd_setl_ind 
						AND D.EXCHG_CODE = A.EXCH_CODE 
						AND D.MKT_TYPE = A.MKT_TYPE 
						AND D.SETTL_NO=A.SETTLEMENT_NO)
						or 
						('T' = :chr_trd_setl_ind 
						AND D.EXCHG_CODE = A.TRD_EXCH 
						AND D.MKT_TYPE = A.TRD_MKT_TYPE 
						AND D.SETTL_NO=A.TRD_SETL_NO)) AND
						A.EXCH_CODE = B.CLN_EXCH_CODE AND
						A.DOMESTIC_CPCLT = D.BROKER_CD and
						//D.MKT_TYPE = A.MKT_TYPE  AND /*12174 Interoperability 28/05/2019 */
						//D.SETTL_NO=A.SETTLEMENT_NO AND /*12174 Interoperability 28/05/2019 */
					    TO_CHAR(D.DEAL_DATE,'dd/mm/yyyy') =  TO_CHAR(A.DEAL_DATE,'dd/mm/yyyy') and
					    D.STATUS = 'PM' AND
					    D.BUY_SELL_FLG = 'B' AND
					    A.DEAL_STAT IN ('CC','SS','MS','CS') AND
                        		    A.DEAL_CD = '4' AND
					    A.DL_CLASS = '1' AND
					    A.CLH_FLG = 'C' AND
					    A.MKT_TYPE = '01' AND
                                            A.SETTLEMENT_NO = :p_settlment_no  AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date AND
                                            /*Commented and Rewritten by supriya on 11082015 start
				            A.CLIENT =E.CLIENT AND
			                    E.PAY_IN_DAY = :chr_l_early_payindays AND*/
                                            /* A.CLIENT = E.CLIENT_CODE AND */               /*12174 Interoperability 28/05/2019 */
                                            (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
                                            /*Commented and Rewritten by supriya on 11082015 -END*/
					    A.CLIENT||A.IDENTIY_NO not in (
					    SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND SETTLEMENT_NO = :p_settlment_no ) 
					    //GROUP BY B.CLN_EXCH_MAP_CODE,D.BROKER_CD,TO_CHAR(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',-nvl(AMT_DIFFER,0),'3',nvl(AMT_DIFFER,0)))                  /*12174 Interoperability 28/05/2019 */
                                             GROUP BY B.CLN_EXCH_MAP_CODE,D.BROKER_CD,TO_CHAR(NVL(A.AMOUNT,0))                  /*12174 Interoperability 28/05/2019 */
      

				);
		IS_ANY_ORA_ERROR

		printf("\n chr_l_total_value_epi -1- --  |%s|",chr_l_total_value_epi);

		strcpy(chr_l_rpt_header,"10,"); // putting the record type
		strcat(chr_l_rpt_header,"FEPI,"); // putting the file type
		strcat(chr_l_rpt_header,chr_l_member_id); // putting the Member Code
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_sysdate);  //putting Batch Date 
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_batch_seq_num); // putting the bath number
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,"N,"); // putting the Market Type indicator
		strcat(chr_l_rpt_header,p_settlment_no); // putting settlement number
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_rec_count_header); // putting the number of records

		printf("\n chr_l_rpt_header -1- --  |%s|",chr_l_rpt_header);
		sprintf(chr_g_log_buff,"Report header -- |%s| \n",chr_l_rpt_header);
	    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

		// Writing the rpt header in file
		fprintf(l_ptr_rep_file,"%s\n",chr_l_rpt_header);
	// Constructing the report header  --End

	// Cursor for fetching the report data -- start

	EXEC SQL DECLARE cur_fund_mcs CURSOR FOR
		SELECT COL1||','||COL2||','||COL3||','||TO_CHAR(SUM(NVL(DL_AMT,0)))||','||COL5/*TO_CHAR(SUM(NVL(DL_AMT,0)))||','||COL6||','||COL7*//*Priyanka - MCX UAT issue */
			FROM
			(
			SELECT 
				'20' AS COL1,
				B.CLN_EXCH_MAP_CODE  AS COL2,
				/*TO_CHAR(SUM(NVL(D.DL_AMT,0)))  AS COL4,*/
				 'C' AS COL3,
				A.CURRENCY_CD AS COL5,
				 //D.DL_AMT as DL_AMT
				 //TO_CHAR(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',nvl(AMT_DIFFER,0),'3',-nvl(AMT_DIFFER,0)),'999999999999990.99') AS DL_AMT           /*12174 Interoperability 28/05/2019 */
				 //TO_CHAR(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',-nvl(AMT_DIFFER,0),'3',nvl(AMT_DIFFER,0))) AS DL_AMT           /*12174 Interoperability 28/05/2019 */
				 TO_CHAR(NVL(A.AMOUNT,0)) AS DL_AMT           /*12174 Interoperability 28/05/2019 */
			/*	 'C' AS COL3,
				D.SETTL_NO AS COL4,
				'' AS COL5,
				'' AS COL6,
				'' AS COL7,
				'' AS COL8,
				'' AS COL9*/
			FROM DL_DEAL A,MT_CLI_EXCH_MAP B,DL_EXCHGORD_UPLD D
			/*Commented and Rewritten by supriya on 11082015 start
			IV_CLIENTSETUP E	 */
			/* MT_CLIENT_PARAM E */             /*12174 Interoperability 28/05/2019 */
                        /*Commented and Rewritten by supriya on 11082015 -END*/
			/*Commented and Rewritten by Prateek on 12022014 for ISKB_6558(PMS)-START
			WHERE D.CLIENT = A.CLIENT AND*/
			WHERE ((D.CLIENT = A.CLIENT)  OR (D.CLIENT in (select cln_master from mt_client where cln_code = A.CLIENT))) AND
			/*Commented and Rewritten by Prateek on 12022014 for ISKB_6558(PMS)-END*/
			A.CLIENT = B.CLN_CODE AND
			D.Instr_Code = A.Instr_Code AND 
			/* D.EXCHG_CODE = A.EXCH_CODE  AND */            /*12174 Interoperability 28/05/2019 */
			/*12174 Interoperability 28/05/2019 Starts*/
			(('S' = :chr_trd_setl_ind 
			AND D.EXCHG_CODE = A.EXCH_CODE 
			AND D.MKT_TYPE = A.MKT_TYPE 
			AND D.SETTL_NO=A.SETTLEMENT_NO)
			or 
			('T' = :chr_trd_setl_ind 
			AND D.EXCHG_CODE = A.TRD_EXCH 
			AND D.MKT_TYPE = A.TRD_MKT_TYPE 
			AND D.SETTL_NO=A.TRD_SETL_NO)) AND
			A.EXCH_CODE = B.CLN_EXCH_CODE AND 
			A.DOMESTIC_CPCLT = D.BROKER_CD and
			/* D.MKT_TYPE = A.MKT_TYPE  AND
			D.SETTL_NO=A.SETTLEMENT_NO AND */              /*12174 Interoperability 28/05/2019 */
			TO_CHAR(D.DEAL_DATE,'dd/mm/yyyy') =  TO_CHAR(A.DEAL_DATE,'dd/mm/yyyy') and
			D.STATUS = 'PM' AND
			D.BUY_SELL_FLG = 'B' AND
			A.DEAL_STAT IN ('CC','SS','MS','CS') AND
			A.DEAL_CD = '4' AND
		        A.DL_CLASS = '1' AND
		        A.CLH_FLG = 'C' AND
	   	        A.MKT_TYPE = '01' AND
                        A.SETTLEMENT_NO = :p_settlment_no AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date AND
                        /*Commented and Rewritten by supriya on 11082015 start
			A.CLIENT =E.CLIENT AND
		        E.PAY_IN_DAY = :chr_l_early_payindays AND*/
                       /*  A.CLIENT = E.CLIENT_CODE AND */                     /*12174 Interoperability 28/05/2019 */
                        (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
                        /*Commented and Rewritten by supriya on 11082015 -END*/
			A.CLIENT||A.IDENTIY_NO not in (
			SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND SETTLEMENT_NO = :p_settlment_no)
			/* ISKB-4678: VILIN 15-02-2011 End */
		      	 //GROUP BY B.CLN_EXCH_MAP_CODE,D.BROKER_CD,TO_CHAR(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',-nvl(AMT_DIFFER,0),'3',nvl(AMT_DIFFER,0))),A.CURRENCY_CD                     /*12174 Interoperability 28/05/2019 */
                         GROUP BY B.CLN_EXCH_MAP_CODE,D.BROKER_CD,TO_CHAR(NVL(A.AMOUNT,0)),A.CURRENCY_CD                     /*12174 Interoperability 28/05/2019 */
		     )
			 GROUP BY COL1,COL2,COL3,COL5 ;

	// opening the cursor
	EXEC SQL OPEN cur_fund_mcs;
	CO_ProcMonitor(g_flogfile,"Opened Cursor cur_mcs_fund",NULL,NULL);

	IS_ANY_ORA_ERROR

	// Processing the cursor data -- (Printing the data into file)
	for(;;)
	{
		EXEC SQL FETCH cur_fund_mcs INTO :chr_l_record_row:i_l_record_row;
												  
		sprintf(chr_g_log_buff,"Fetched cur_mcs_fund sqlca.sqlcode is :%d:",sqlca.sqlcode);
		CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);
		IS_ANY_ORA_ERROR_CURSOR

		// Writing to report file
		fprintf(l_ptr_rep_file,"%s\n",chr_l_record_row);

		if (sqlca.sqlcode == 1403)
		{
            CO_ProcMonitor(g_flogfile,"No more Records ",NULL,NULL);
            EXEC SQL CLOSE cur_fund_mcs;
            APL_GOBACK_SUCCESS;
		}
	} 
	// Cursor for fetching the report data (Middle part of the report) -- End 
	//********************************************************************
	// FOR Normal Market Type -- End
	//********************************************************************

	//********************************************************************
	//FOR T2T Market Type -- Start
	//********************************************************************
	// preparing structure for getting the sequence value from a reset able sequence 
	strcpy(l_pro_gseqno_struct_h.sequencename, "EPR_MCS_FUND_T2T");
	strcpy(l_pro_gseqno_struct_h.seq_attrb_a, APL_NULL_STRING);
	strcpy(l_pro_gseqno_struct_h.seq_attrb_b, APL_NULL_STRING);
	strcpy(l_pro_gseqno_struct_h.seq_attrb_c, APL_NULL_STRING);

	l_pro_gseqno_struct_h.seq_stepby = 1;
	l_pro_gseqno_struct_h.seq_start = 1;
	l_pro_gseqno_struct_h.last_seqnum = 1000;
	l_pro_gseqno_struct_h.recycle_ind = RECYCLE_EOD;

	// geting the sequence number (we have used this function because we want to reset the sequence at EOD)
	//int_return_val = CO_RtvNxtSeqNum(&l_pro_gseqno_struct_h,l_debug_info_ptr); // Commented by Tarkeshwar for sequence no issue fix
	int_return_val = getEP_FileNameCNT_Funds(p_settlment_no,"MCX-SX-EQ_FEPI_W_"); // Tarkeshwar
		if (int_return_val != APL_FAILURE)
		sprintf(chr_l_seqnum_a,"%d",int_return_val);
	else
		APL_GOBACK_FAIL

	strcpy(chr_l_batch_num,chr_l_seqnum_a); 

	printf("\n chr_l_batch_num -1- --  |%s|",chr_l_batch_num);
	// constructing the sequence number (should be of length 2) for file name 
	if (strlen(chr_l_batch_num) == 1)
	{
		strcpy(chr_l_batch_seq_num,"0");
		strcat(chr_l_batch_seq_num,chr_l_batch_num);
	}
	else // having of length 2
	{
		strcpy(chr_l_batch_seq_num,chr_l_batch_num);
	}

	printf("\n chr_l_seq_num -2- --  |%s|",chr_l_batch_seq_num);
	sprintf(chr_g_log_buff,"Sequence Number -- |%s| \n",chr_l_batch_seq_num);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);


if (settle_flag ==1)
{
      
			EXEC SQL select SETTL_NO INTO :sett_no1 FROM mt_settl_cal
			WHERE TO_CHAR(TO_DATE(START_DATE),'dd/mm/yyyy') = TO_CHAR (to_date(:p_deal_date),'dd/mm/yyyy')
			AND  EXCH_CODE= 'MCS'
			AND SETTL_TYPE ='03';
			IS_ANY_ORA_ERROR
			strcpy(p_settlment_no,sett_no1);
		
					
}
printf("settle number [%s]",p_settlment_no );

	// Constructing file name for T2T market type
	strcat(chr_l_rep_nameT2T,"MCX-SX-EQ_FEPI_W_");
	strcat(chr_l_rep_nameT2T,p_settlment_no); 
	strcat(chr_l_rep_nameT2T,"_");
	strcat(chr_l_rep_nameT2T,chr_l_member_id); 
	strcat(chr_l_rep_nameT2T,"_");
	strcat(chr_l_rep_nameT2T,chr_l_sysdate);
	strcat(chr_l_rep_nameT2T,".T");
	strcat(chr_l_rep_nameT2T,chr_l_batch_seq_num); //The batch number of file to be uploaded

	strcpy(l_intl_rept_struct_ha_t2t->report_name,chr_l_rep_nameT2T);

	printf("\n Report Name --  |%s|",chr_l_rep_nameT2T);
	sprintf(chr_g_log_buff,"Report Name for T2T market -- |%s| \n",chr_l_rep_nameT2T);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	strcat(chr_l_pathT2T,chr_l_rep_nameT2T); // forming final path with report name for T2T market type
	
	printf("\n Final Report Name with path  chr_l_pathT2T --  |%s|",chr_l_pathT2T);
	sprintf(chr_g_log_buff,"Final Report Name with path for T2T market-- |%s| \n",chr_l_pathT2T);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	// For opening the file in write mode for T2T market report
	if ((l_ptr_rep_file_T2T = fopen(chr_l_pathT2T,"w")) == NULL)
   		return(APL_FAILURE);

	strcpy(l_intl_rept_struct_ha_t2t->report_desc, "Early Pay in Report");
   	strcpy(l_intl_rept_struct_ha_t2t->report_date, l_date);
   	l_intl_rept_struct_ha_t2t->report_width = 100;
   	strcpy(l_intl_rept_struct_ha_t2t->task_desc, "EarlyPyinRpt");
   	strcpy(l_intl_rept_struct_ha_t2t->fe_be_ind, APL_BE_IND);
   	strcpy(l_intl_rept_struct_ha_t2t->usr, l_user);

	// For accessing the file in Batch monitor -- t2t market type 
	if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha_t2t, l_debug_info_ptr))
        APL_GOBACK_FAIL

	// Constructing the report header  --Start  
		EXEC SQL  SELECT TO_CHAR(COUNT(COUNT(*))) into :chr_l_rec_count_header	
			FROM DL_DEAL A,MT_CLI_EXCH_MAP B
		        /*Commented and Rewritten by supriya on 11082015 start
			IV_CLIENTSETUP C */
                       /*  MT_CLIENT_PARAM E */           /*12174 Interoperability 28/05/2019 */
                        /*Commented and Rewritten by supriya on 11082015 -END*/
				WHERE
					A.DEAL_STAT IN ('CC','SS','MS','CS') AND
					A.DEAL_CD = '4' AND
					A.DL_CLASS = '1' AND
					A.CLH_FLG = 'C' AND
					A.CLIENT = B.CLN_CODE AND
					A.EXCH_CODE = B.CLN_EXCH_CODE AND
					A.MKT_TYPE = '03' AND
					A.SETTLEMENT_NO = :p_settlment_no  AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date AND
                                        /*Commented and Rewritten by supriya on 11082015 start
			                A.CLIENT =C.CLIENT AND
		                        C.PAY_IN_DAY = :chr_l_early_payindays AND */
                                        /* A.CLIENT = E.CLIENT_CODE AND */             /*12174 Interoperability 28/05/2019 */
                             	       (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
                                        /*Commented and Rewritten by supriya on 11082015 -END*/
					A.CLIENT||A.IDENTIY_NO not in (
					SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND SETTLEMENT_NO = :p_settlment_no)
					GROUP BY A.SETTLEMENT_NO,A.MKT_TYPE,B.CLN_EXCH_MAP_CODE ;
			IS_ANY_ORA_ERROR

		printf("\n chr_l_rec_count_header -1- --  |%s|",chr_l_rec_count_header);

	EXEC SQL SELECT NVL(TO_CHAR(SUM(NVL(DL_AMT,0))),0) INTO :chr_l_total_value_epi
				FROM
				(
						SELECT  
						//D.DL_AMT as DL_AMT
						//TO_CHAR(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',nvl(AMT_DIFFER,0),'3',-nvl(AMT_DIFFER,0)),'999999999999990.99') AS DL_AMT         /*12174 Interoperability 28/05/2019 */
						//TO_CHAR(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',-nvl(AMT_DIFFER,0),'3',nvl(AMT_DIFFER,0))) AS DL_AMT         /*12174 Interoperability 28/05/2019 */
						TO_CHAR(NVL(A.AMOUNT,0)) AS DL_AMT         /*12174 Interoperability 28/05/2019 */
     			   	    FROM DL_DEAL A,MT_CLI_EXCH_MAP B,DL_EXCHGORD_UPLD D
			             /*Commented and Rewritten by supriya on 11082015 start	
					 IV_CLIENTSETUP E	*/
                                     /*  MT_CLIENT_PARAM E */             /*12174 Interoperability 28/05/2019 */
                                     /*Commented and Rewritten by supriya on 11082015 -END*/
						/*Commented and Rewritten by Prateek on 12022014 for ISKB_6558(PMS)-START
						WHERE D.CLIENT = A.CLIENT AND*/
						WHERE ((D.CLIENT = A.CLIENT)  OR (D.CLIENT in (select cln_master from mt_client where cln_code = A.CLIENT))) AND
						/*Commented and Rewritten by Prateek on 12022014 for ISKB_6558(PMS)-END*/
 					    A.CLIENT = B.CLN_CODE AND
                        D.Instr_Code = A.Instr_Code AND 
				        /* D.EXCHG_CODE = A.EXCH_CODE  AND */               /*12174 Interoperability 28/05/2019 */
                        A.EXCH_CODE = B.CLN_EXCH_CODE AND 
                        A.DOMESTIC_CPCLT = D.BROKER_CD and
                        /*  D.MKT_TYPE = A.MKT_TYPE  AND
					    D.SETTL_NO=A.SETTLEMENT_NO AND */           /*12174 Interoperability 28/05/2019 */
			/*12174 Interoperability 28/05/2019 Starts*/
			(('S' = :chr_trd_setl_ind 
			AND D.EXCHG_CODE = A.EXCH_CODE 
			AND D.MKT_TYPE = A.MKT_TYPE 
			AND D.SETTL_NO=A.SETTLEMENT_NO)
			or 
			('T' = :chr_trd_setl_ind 
			AND D.EXCHG_CODE = A.TRD_EXCH 
			AND D.MKT_TYPE = A.TRD_MKT_TYPE 
			AND D.SETTL_NO=A.TRD_SETL_NO)) AND
					    TO_CHAR(D.DEAL_DATE,'dd/mm/yyyy') =  TO_CHAR(A.DEAL_DATE,'dd/mm/yyyy') and
					    D.STATUS = 'PM' AND
					    D.BUY_SELL_FLG = 'B' AND
					    A.DEAL_STAT IN ('CC','SS','MS','CS') AND
                        A.DEAL_CD = '4' AND
					    A.DL_CLASS = '1' AND
					    A.CLH_FLG = 'C' AND
					    A.MKT_TYPE = '03' AND
                        A.SETTLEMENT_NO = :p_settlment_no AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date  AND
                                            /*Commented and Rewritten by supriya on 11082015 start
			            A.CLIENT =E.CLIENT AND
		             		    E.PAY_IN_DAY = :chr_l_early_payindays AND*/
 					   /*  A.CLIENT = E.CLIENT_CODE AND */               /*12174 Interoperability 28/05/2019 */
                                           (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
                                           /*Commented and Rewritten by supriya on 11082015 -END*/
				A.CLIENT||A.IDENTIY_NO not in (
				SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND SETTLEMENT_NO = :p_settlment_no )
				
 			       //GROUP BY B.CLN_EXCH_MAP_CODE,D.BROKER_CD,TO_CHAR(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',-nvl(AMT_DIFFER,0),'3',nvl(AMT_DIFFER,0)))              /*12174 Interoperability 28/05/2019 */	
                               GROUP BY B.CLN_EXCH_MAP_CODE,D.BROKER_CD,TO_CHAR(NVL(A.AMOUNT,0) )              /*12174 Interoperability 28/05/2019 */
				);
			IS_ANY_ORA_ERROR

		printf("\n chr_l_total_value_epi -1- --  |%s|",chr_l_total_value_epi);

		strcpy(chr_l_rpt_header,"10,"); // putting the record type
		strcat(chr_l_rpt_header,"FEPI,"); // putting the file type
		strcat(chr_l_rpt_header,chr_l_member_id); // putting the Member Code
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_sysdate);  //putting Batch Date 
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_batch_seq_num); // putting the bath number
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,"W,"); // putting the Market Type indicator
		strcat(chr_l_rpt_header,p_settlment_no); // putting settlement number
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_rec_count_header); // putting the number of records
		//strcat(chr_l_rpt_header,",");
		//strcat(chr_l_rpt_header,chr_l_total_value_epi); // putting the total value of EPI

		printf("\n chr_l_rpt_header -1- --  |%s|",chr_l_rpt_header);
		sprintf(chr_g_log_buff,"Report header -- |%s| \n",chr_l_rpt_header);
	    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

		// Writing the rpt header in file
		fprintf(l_ptr_rep_file_T2T,"%s\n",chr_l_rpt_header);
	// Constructing the report header  --End

	// Cursor for fetching the report data  -- start
EXEC SQL DECLARE cur_fund_mcs_t2t CURSOR FOR
		SELECT COL1||','||COL2||','||COL3||','||TO_CHAR(SUM(NVL(DL_AMT,0)))||','||COL5/*TO_CHAR(SUM(NVL(DL_AMT,0)))||','||COL6||','||COL7*//*Priyanka - MCX UAT issue */		
			FROM
			(
			SELECT 
				'20' AS COL1,
				B.CLN_EXCH_MAP_CODE  AS COL2,
				/*TO_CHAR(SUM(NVL(D.DL_AMT,0)))  AS COL4,*/
				 'C' AS COL3,
				A.CURRENCY_CD AS COL5,
				 //D.DL_AMT as DL_AMT
				 //TO_CHAR(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',nvl(AMT_DIFFER,0),'3',-nvl(AMT_DIFFER,0)),'999999999999990.99') AS DL_AMT            /*12174 Interoperability 28/05/2019 */
				 //TO_CHAR(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',-nvl(AMT_DIFFER,0),'3',nvl(AMT_DIFFER,0))) AS DL_AMT            /*12174 Interoperability 28/05/2019 */
				 TO_CHAR(NVL(A.AMOUNT,0)) AS DL_AMT            /*12174 Interoperability 28/05/2019 */
			/*	 'C' AS COL3,
				D.SETTL_NO AS COL4,
				'' AS COL5,
				'' AS COL6,
				'' AS COL7,
				'' AS COL8,
				'' AS COL9*/
			FROM DL_DEAL A,MT_CLI_EXCH_MAP B,DL_EXCHGORD_UPLD D
			/*Commented and Rewritten by supriya on 11082015 start
			IV_CLIENTSETUP E */
                        /* MT_CLIENT_PARAM E */                 /*12174 Interoperability 28/05/2019 */
                        /*Commented and Rewritten by supriya on 11082015 -END*/
			/*Commented and Rewritten by Prateek on 12022014 for ISKB_6558(PMS)-START
			WHERE D.CLIENT = A.CLIENT AND*/
			WHERE ((D.CLIENT = A.CLIENT)  OR (D.CLIENT in (select cln_master from mt_client where cln_code = A.CLIENT))) AND
			/*Commented and Rewritten by Prateek on 12022014 for ISKB_6558(PMS)-END*/
			A.CLIENT = B.CLN_CODE AND
			D.Instr_Code = A.Instr_Code AND 
			/* D.EXCHG_CODE = A.EXCH_CODE  AND */               /*12174 Interoperability 28/05/2019 */
			A.EXCH_CODE = B.CLN_EXCH_CODE AND
			A.DOMESTIC_CPCLT = D.BROKER_CD and
			/* D.MKT_TYPE = A.MKT_TYPE  AND
			D.SETTL_NO=A.SETTLEMENT_NO AND */              /*12174 Interoperability 28/05/2019 */
			/*12174 Interoperability 28/05/2019 Starts*/
			(('S' = :chr_trd_setl_ind 
			AND D.EXCHG_CODE = A.EXCH_CODE 
			AND D.MKT_TYPE = A.MKT_TYPE 
			AND D.SETTL_NO=A.SETTLEMENT_NO)
			or 
			('T' = :chr_trd_setl_ind 
			AND D.EXCHG_CODE = A.TRD_EXCH 
			AND D.MKT_TYPE = A.TRD_MKT_TYPE 
			AND D.SETTL_NO=A.TRD_SETL_NO)) AND
			TO_CHAR(D.DEAL_DATE,'dd/mm/yyyy') =  TO_CHAR(A.DEAL_DATE,'dd/mm/yyyy') and
			D.STATUS = 'PM' AND
			D.BUY_SELL_FLG = 'B' AND
			A.DEAL_STAT IN ('CC','SS','MS','CS') AND
			A.DEAL_CD = '4' AND
		    A.DL_CLASS = '1' AND
		    A.CLH_FLG = 'C' AND
	   	    A.MKT_TYPE = '03' AND
            A.SETTLEMENT_NO = :p_settlment_no AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date AND
                      /*Commented and Rewritten by supriya on 11082015 start
			A.CLIENT =E.CLIENT AND
		    E.PAY_IN_DAY = :chr_l_early_payindays AND */
                      /* A.CLIENT = E.CLIENT_CODE AND */          /*12174 Interoperability 28/05/2019 */
                      (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
                      /*Commented and Rewritten by supriya on 11082015 -END*/
		    A.CLIENT||A.IDENTIY_NO not in (
		    SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND SETTLEMENT_NO = :p_settlment_no  )
			/* ISKB-4678: VILIN 15-02-2011 End */
                       //GROUP BY B.CLN_EXCH_MAP_CODE,D.BROKER_CD,TO_CHAR(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',-nvl(AMT_DIFFER,0),'3',nvl(AMT_DIFFER,0))),A.CURRENCY_CD                 /*12174 Interoperability 28/05/2019 */		      	
                         GROUP BY B.CLN_EXCH_MAP_CODE,D.BROKER_CD,TO_CHAR(NVL(A.AMOUNT,0)),A.CURRENCY_CD                 /*12174 Interoperability 28/05/2019 */
		)
			 GROUP BY COL1,COL2,COL3,COL5 ;

	// opening the cursor
	EXEC SQL OPEN cur_fund_mcs_t2t;
	CO_ProcMonitor(g_flogfile,"Opened Cursor cur_mcs_fund",NULL,NULL);

	IS_ANY_ORA_ERROR

	// Processing the cursor data -- (Printing the data into file)
	for(;;)
	{
		EXEC SQL FETCH cur_fund_mcs_t2t INTO :chr_l_record_row:i_l_record_row;
												  
		sprintf(chr_g_log_buff,"Fetched cur_mcs_fund sqlca.sqlcode is :%d:",sqlca.sqlcode);
		CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);
		IS_ANY_ORA_ERROR_CURSOR

		// Writing to report file
		fprintf(l_ptr_rep_file_T2T,"%s\n",chr_l_record_row);

		if (sqlca.sqlcode == 1403)
		{
            CO_ProcMonitor(g_flogfile,"No more Records ",NULL,NULL);
            EXEC SQL CLOSE cur_fund_mcs_t2t;
            APL_GOBACK_SUCCESS;
		}
	} 
	// Cursor for fetching the report data  -- End 
	//********************************************************************
	//FOR T2T Market Type -- End
	//********************************************************************
strcpy(l_pro_gseqno_struct_h.sequencename, "EPR_MCS_FUND_T1M");
	strcpy(l_pro_gseqno_struct_h.seq_attrb_a, APL_NULL_STRING);
	strcpy(l_pro_gseqno_struct_h.seq_attrb_b, APL_NULL_STRING);
	strcpy(l_pro_gseqno_struct_h.seq_attrb_c, APL_NULL_STRING);

	l_pro_gseqno_struct_h.seq_stepby = 1;
	l_pro_gseqno_struct_h.seq_start = 1;
	l_pro_gseqno_struct_h.last_seqnum = 1000;
	l_pro_gseqno_struct_h.recycle_ind = RECYCLE_EOD;

	// geting the sequence number (we have used this function because we want to reset the sequence at EOD)
	//int_return_val = CO_RtvNxtSeqNum(&l_pro_gseqno_struct_h,l_debug_info_ptr); // Commented by Tarkeshwar for sequqnce no issue fix
	int_return_val = getEP_FileNameCNT_Funds(p_settlment_no,"MCX-SX-EQ_FEPI_M_"); // Tarkeshwar
	printf("\nTK::: int_return_val = %d",int_return_val); // Tarkeshwar
		if (int_return_val != APL_FAILURE)
		sprintf(chr_l_seqnum_a,"%d",int_return_val);
	else
		APL_GOBACK_FAIL

	strcpy(chr_l_batch_num,chr_l_seqnum_a); 

	printf("\n chr_l_batch_num -1- --  |%s|",chr_l_batch_num);
	// constructing the sequence number (should be of length 2) for file name 
	if (strlen(chr_l_batch_num) == 1)
	{
		strcpy(chr_l_batch_seq_num,"0");
		strcat(chr_l_batch_seq_num,chr_l_batch_num);
	}
	else // having of length 2
	{
		strcpy(chr_l_batch_seq_num,chr_l_batch_num);
	}

	printf("\n chr_l_seq_num -2- --  |%s|",chr_l_batch_seq_num);
	sprintf(chr_g_log_buff,"Sequence Number -- |%s| \n",chr_l_batch_seq_num);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);


if (settle_flag ==1)
{
    
			EXEC SQL select SETTL_NO INTO :sett_no1 FROM mt_settl_cal
			WHERE TO_CHAR(TO_DATE(START_DATE),'dd/mm/yyyy') = TO_CHAR (to_date(:p_deal_date),'dd/mm/yyyy')
			AND  EXCH_CODE= 'MCS'
			AND SETTL_TYPE ='23';
			IS_ANY_ORA_ERROR
			
			strcpy(p_settlment_no,sett_no1);
		
					
}
printf("settle number [%s]",p_settlment_no );

	// Constructing file name for Normal market type
	strcat(chr_l_rep_name_M,"MCX-SX-EQ_FEPI_M_");
	strcat(chr_l_rep_name_M,p_settlment_no); 
	strcat(chr_l_rep_name_M,"_");
	strcat(chr_l_rep_name_M,chr_l_member_id);
	strcat(chr_l_rep_name_M,"_");
	strcat(chr_l_rep_name_M,chr_l_sysdate);
	strcat(chr_l_rep_name_M,".T");
	strcat(chr_l_rep_name_M,chr_l_batch_seq_num); //The batch number of file to be uploaded

	printf("\n Report Name --  |%s|",chr_l_rep_name_M);
	sprintf(chr_g_log_buff,"Report Name for Normal market-- |%s| \n",chr_l_rep_name_M);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	strcat(chr_l_rep_Path_M,chr_l_rep_name_M); // forming final path with report name for normal market

	printf("\n Final Report Name with path --  |%s|",chr_l_rep_Path_M);
	sprintf(chr_g_log_buff,"Final Report Name with path for Normal market -- |%s| \n",chr_l_rep_Path_M);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	// For opening the file in write mode for normal market report
	if ((l_ptr_rep_file_M = fopen(chr_l_rep_Path_M,"w")) == NULL)
   		return(APL_FAILURE);

	// setting the memory for report structure that will b used to access the file in batch monitor

	strcpy(l_intl_rept_struct_ha_M->report_name,chr_l_rep_name_M);
   	strcpy(l_intl_rept_struct_ha_M->report_desc, "Early Pay in Report");
   	strcpy(l_intl_rept_struct_ha_M->report_date, l_date);
   	l_intl_rept_struct_ha_M->report_width = 100;
   	strcpy(l_intl_rept_struct_ha_M->task_desc, "EarlyPyinRpt");
   	strcpy(l_intl_rept_struct_ha_M->fe_be_ind, APL_BE_IND);
   	strcpy(l_intl_rept_struct_ha_M->usr, l_user);

	// For accessing the file in Batch monitor -- normal market 
	if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha_M, l_debug_info_ptr))
        APL_GOBACK_FAIL

	// Constructing the report header  --Start 

	    /* ISKB-1721: ASHISH 20-08-2008 */
		/* ISKB-4678: VILIN 15-02-2011 Start */
		EXEC SQL SELECT TO_CHAR(COUNT(COUNT(*))) into :chr_l_rec_count_header  
			FROM DL_DEAL A,MT_CLI_EXCH_MAP B
                        /*Commented and Rewritten by supriya on 11082015 start  
                        IV_CLIENTSETUP C*/
                        /* MT_CLIENT_PARAM E */               /*12174 Interoperability 28/05/2019 */
                        /*Commented and Rewritten by supriya on 11082015 -END*/
	        WHERE
				A.DEAL_STAT IN ('CC','SS','MS','CS') AND
				A.DEAL_CD = '4' AND
				A.DL_CLASS = '1' AND
				A.CLH_FLG = 'C' AND
				A.CLIENT = B.CLN_CODE AND
				A.EXCH_CODE = B.CLN_EXCH_CODE AND
				A.MKT_TYPE = '23' AND
				A.SETTLEMENT_NO = :p_settlment_no  AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date AND 
                                 
                               (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
                                
				A.CLIENT||A.IDENTIY_NO not in 
				(SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND A.SETTLEMENT_NO = :p_settlment_no  )
				GROUP BY A.SETTLEMENT_NO,A.MKT_TYPE,B.CLN_EXCH_MAP_CODE ;
		IS_ANY_ORA_ERROR

		printf("\n chr_l_rec_count_header -1- --  |%s|",chr_l_rec_count_header);

		EXEC SQL SELECT NVL(TO_CHAR(SUM(NVL(DL_AMT,0))),0) INTO :chr_l_total_value_epi
				FROM
				(
						
						SELECT  TO_CHAR(NVL(A.AMOUNT,0)) AS DL_AMT                  /*12174 Interoperability 28/05/2019 */
     			   	    FROM DL_DEAL A,MT_CLI_EXCH_MAP B,DL_EXCHGORD_UPLD D
                        
						WHERE ((D.CLIENT = A.CLIENT)  OR (D.CLIENT in (select cln_master from mt_client where cln_code = A.CLIENT))) AND
						
 					    A.CLIENT = B.CLN_CODE AND
                        D.Instr_Code = A.Instr_Code AND 
				        (('S' = :chr_trd_setl_ind 
						AND D.EXCHG_CODE = A.EXCH_CODE 
						AND D.MKT_TYPE = A.MKT_TYPE 
						AND D.SETTL_NO=A.SETTLEMENT_NO)
						or 
						('T' = :chr_trd_setl_ind 
						AND D.EXCHG_CODE = A.TRD_EXCH 
						AND D.MKT_TYPE = A.TRD_MKT_TYPE 
						AND D.SETTL_NO=A.TRD_SETL_NO)) AND
						A.EXCH_CODE = B.CLN_EXCH_CODE AND
						A.DOMESTIC_CPCLT = D.BROKER_CD and
						//D.MKT_TYPE = A.MKT_TYPE  AND /*12174 Interoperability 28/05/2019 */
						//D.SETTL_NO=A.SETTLEMENT_NO AND /*12174 Interoperability 28/05/2019 */
					    TO_CHAR(D.DEAL_DATE,'dd/mm/yyyy') =  TO_CHAR(A.DEAL_DATE,'dd/mm/yyyy') and
					    D.STATUS = 'PM' AND
					    D.BUY_SELL_FLG = 'B' AND
					    A.DEAL_STAT IN ('CC','SS','MS','CS') AND
                        		    A.DEAL_CD = '4' AND
					    A.DL_CLASS = '1' AND
					    A.CLH_FLG = 'C' AND
					    A.MKT_TYPE = '23' AND
                                        A.SETTLEMENT_NO = :p_settlment_no AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date AND
                                          
                                            (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
                                          
					    A.CLIENT||A.IDENTIY_NO not in (
					    SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND SETTLEMENT_NO = :p_settlment_no  ) 
					                         GROUP BY B.CLN_EXCH_MAP_CODE,D.BROKER_CD,TO_CHAR(NVL(A.AMOUNT,0))                  /*12174 Interoperability 28/05/2019 */
      

				);
		IS_ANY_ORA_ERROR

		printf("\n chr_l_total_value_epi -1- --  |%s|",chr_l_total_value_epi);

		strcpy(chr_l_rpt_header,"10,"); // putting the record type
		strcat(chr_l_rpt_header,"FEPI,"); // putting the file type
		strcat(chr_l_rpt_header,chr_l_member_id); // putting the Member Code
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_sysdate);  //putting Batch Date 
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_batch_seq_num); // putting the bath number
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,"M,"); // putting the Market Type indicator
		strcat(chr_l_rpt_header,p_settlment_no); // putting settlement number
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_rec_count_header); // putting the number of records

		printf("\n chr_l_rpt_header -1- --  |%s|",chr_l_rpt_header);
		sprintf(chr_g_log_buff,"Report header -- |%s| \n",chr_l_rpt_header);
	    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

		// Writing the rpt header in file
		fprintf(l_ptr_rep_file_M,"%s\n",chr_l_rpt_header);
	// Constructing the report header  --End

	// Cursor for fetching the report data -- start

	EXEC SQL DECLARE cur_fund_mcs CURSOR FOR
		SELECT COL1||','||COL2||','||COL3||','||TO_CHAR(SUM(NVL(DL_AMT,0)))||','||COL5/*TO_CHAR(SUM(NVL(DL_AMT,0)))||','||COL6||','||COL7*//*Priyanka - MCX UAT issue */
			FROM
			(
			SELECT 
				'20' AS COL1,
				B.CLN_EXCH_MAP_CODE  AS COL2,
				/*TO_CHAR(SUM(NVL(D.DL_AMT,0)))  AS COL4,*/
				 'C' AS COL3,
				A.CURRENCY_CD AS COL5,
				 //D.DL_AMT as DL_AMT
				 //TO_CHAR(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',nvl(AMT_DIFFER,0),'3',-nvl(AMT_DIFFER,0)),'999999999999990.99') AS DL_AMT           /*12174 Interoperability 28/05/2019 */
				 //TO_CHAR(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',-nvl(AMT_DIFFER,0),'3',nvl(AMT_DIFFER,0))) AS DL_AMT           /*12174 Interoperability 28/05/2019 */
				 TO_CHAR(NVL(A.AMOUNT,0)) AS DL_AMT           /*12174 Interoperability 28/05/2019 */
			/*	 'C' AS COL3,
				D.SETTL_NO AS COL4,
				'' AS COL5,
				'' AS COL6,
				'' AS COL7,
				'' AS COL8,
				'' AS COL9*/
			FROM DL_DEAL A,MT_CLI_EXCH_MAP B,DL_EXCHGORD_UPLD D
			/*Commented and Rewritten by supriya on 11082015 start
			IV_CLIENTSETUP E	 */
			/* MT_CLIENT_PARAM E */             /*12174 Interoperability 28/05/2019 */
                        /*Commented and Rewritten by supriya on 11082015 -END*/
			/*Commented and Rewritten by Prateek on 12022014 for ISKB_6558(PMS)-START
			WHERE D.CLIENT = A.CLIENT AND*/
			WHERE ((D.CLIENT = A.CLIENT)  OR (D.CLIENT in (select cln_master from mt_client where cln_code = A.CLIENT))) AND
			/*Commented and Rewritten by Prateek on 12022014 for ISKB_6558(PMS)-END*/
			A.CLIENT = B.CLN_CODE AND
			D.Instr_Code = A.Instr_Code AND 
			/* D.EXCHG_CODE = A.EXCH_CODE  AND */            /*12174 Interoperability 28/05/2019 */
			/*12174 Interoperability 28/05/2019 Starts*/
			(('S' = :chr_trd_setl_ind 
			AND D.EXCHG_CODE = A.EXCH_CODE 
			AND D.MKT_TYPE = A.MKT_TYPE 
			AND D.SETTL_NO=A.SETTLEMENT_NO)
			or 
			('T' = :chr_trd_setl_ind 
			AND D.EXCHG_CODE = A.TRD_EXCH 
			AND D.MKT_TYPE = A.TRD_MKT_TYPE 
			AND D.SETTL_NO=A.TRD_SETL_NO)) AND
			A.EXCH_CODE = B.CLN_EXCH_CODE AND 
			A.DOMESTIC_CPCLT = D.BROKER_CD and
			/* D.MKT_TYPE = A.MKT_TYPE  AND
			D.SETTL_NO=A.SETTLEMENT_NO AND */              /*12174 Interoperability 28/05/2019 */
			TO_CHAR(D.DEAL_DATE,'dd/mm/yyyy') =  TO_CHAR(A.DEAL_DATE,'dd/mm/yyyy') and
			D.STATUS = 'PM' AND
			D.BUY_SELL_FLG = 'B' AND
			A.DEAL_STAT IN ('CC','SS','MS','CS') AND
			A.DEAL_CD = '4' AND
		        A.DL_CLASS = '1' AND
		        A.CLH_FLG = 'C' AND
	   	        A.MKT_TYPE = '23' AND
                        A.SETTLEMENT_NO = :p_settlment_no  AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date AND
                        /*Commented and Rewritten by supriya on 11082015 start
			A.CLIENT =E.CLIENT AND
		        E.PAY_IN_DAY = :chr_l_early_payindays AND*/
                       /*  A.CLIENT = E.CLIENT_CODE AND */                     /*12174 Interoperability 28/05/2019 */
                        (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
                        /*Commented and Rewritten by supriya on 11082015 -END*/
			A.CLIENT||A.IDENTIY_NO not in (
			SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND SETTLEMENT_NO = :p_settlment_no )
			/* ISKB-4678: VILIN 15-02-2011 End */
		      	 //GROUP BY B.CLN_EXCH_MAP_CODE,D.BROKER_CD,TO_CHAR(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',-nvl(AMT_DIFFER,0),'3',nvl(AMT_DIFFER,0))),A.CURRENCY_CD                     /*12174 Interoperability 28/05/2019 */
                         GROUP BY B.CLN_EXCH_MAP_CODE,D.BROKER_CD,TO_CHAR(NVL(A.AMOUNT,0)),A.CURRENCY_CD                     /*12174 Interoperability 28/05/2019 */
		     )
			 GROUP BY COL1,COL2,COL3,COL5 ;

	// opening the cursor
	EXEC SQL OPEN cur_fund_mcs;
	CO_ProcMonitor(g_flogfile,"Opened Cursor cur_mcs_fund",NULL,NULL);

	IS_ANY_ORA_ERROR

	// Processing the cursor data -- (Printing the data into file)
	for(;;)
	{
		EXEC SQL FETCH cur_fund_mcs INTO :chr_l_record_row:i_l_record_row;
												  
		sprintf(chr_g_log_buff,"Fetched cur_mcs_fund sqlca.sqlcode is :%d:",sqlca.sqlcode);
		CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);
		IS_ANY_ORA_ERROR_CURSOR

		// Writing to report file
		fprintf(l_ptr_rep_file_M,"%s\n",chr_l_record_row);

		if (sqlca.sqlcode == 1403)
		{
            CO_ProcMonitor(g_flogfile,"No more Records ",NULL,NULL);
            EXEC SQL CLOSE cur_fund_mcs;
            APL_GOBACK_SUCCESS;
		}
	} 
	// Cursor for fetching the report data (Middle part of the report) -- End 
	//********************************************************************
	// FOR Normal Market Type -- End
	//********************************************************************

	///  put cursor here.. 
	
	strcpy(l_pro_gseqno_struct_h.sequencename, "EPR_MCS_FUND_T1Z");
	strcpy(l_pro_gseqno_struct_h.seq_attrb_a, APL_NULL_STRING);
	strcpy(l_pro_gseqno_struct_h.seq_attrb_b, APL_NULL_STRING);
	strcpy(l_pro_gseqno_struct_h.seq_attrb_c, APL_NULL_STRING);

	l_pro_gseqno_struct_h.seq_stepby = 1;
	l_pro_gseqno_struct_h.seq_start = 1;
	l_pro_gseqno_struct_h.last_seqnum = 1000;
	l_pro_gseqno_struct_h.recycle_ind = RECYCLE_EOD;

	// geting the sequence number (we have used this function because we want to reset the sequence at EOD)
	//int_return_val = CO_RtvNxtSeqNum(&l_pro_gseqno_struct_h,l_debug_info_ptr); // Commented by Tarkeshwar for sequqnce no issue fix
	int_return_val = getEP_FileNameCNT_Funds(p_settlment_no,"MCX-SX-EQ_FEPI_Z_"); // Tarkeshwar
	printf("\nTK::: int_return_val = %d",int_return_val); // Tarkeshwar
		if (int_return_val != APL_FAILURE)
		sprintf(chr_l_seqnum_a,"%d",int_return_val);
	else
		APL_GOBACK_FAIL

	strcpy(chr_l_batch_num,chr_l_seqnum_a); 

	printf("\n chr_l_batch_num -1- --  |%s|",chr_l_batch_num);
	// constructing the sequence number (should be of length 2) for file name 
	if (strlen(chr_l_batch_num) == 1)
	{
		strcpy(chr_l_batch_seq_num,"0");
		strcat(chr_l_batch_seq_num,chr_l_batch_num);
	}
	else // having of length 2
	{
		strcpy(chr_l_batch_seq_num,chr_l_batch_num);
	}

	printf("\n chr_l_seq_num -2- --  |%s|",chr_l_batch_seq_num);
	sprintf(chr_g_log_buff,"Sequence Number -- |%s| \n",chr_l_batch_seq_num);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

if (settle_flag ==1)
{


			EXEC SQL select SETTL_NO INTO :sett_no1 FROM mt_settl_cal
			WHERE TO_CHAR(TO_DATE(START_DATE),'dd/mm/yyyy') = TO_CHAR (to_date(:p_deal_date),'dd/mm/yyyy')
			AND  EXCH_CODE= 'MCS'
			AND SETTL_TYPE ='24';
			IS_ANY_ORA_ERROR
			
			strcpy(p_settlment_no,sett_no1);
		
					
}
printf("settle number [%s]",p_settlment_no );


	// Constructing file name for Normal market type
	strcat(chr_l_rep_name_P,"MCX-SX-EQ_FEPI_Z_");
	strcat(chr_l_rep_name_P,p_settlment_no); 
	strcat(chr_l_rep_name_P,"_");
	strcat(chr_l_rep_name_P,chr_l_member_id);
	strcat(chr_l_rep_name_P,"_");
	strcat(chr_l_rep_name_P,chr_l_sysdate);
	strcat(chr_l_rep_name_P,".T");
	strcat(chr_l_rep_name_P,chr_l_batch_seq_num); //The batch number of file to be uploaded

	printf("\n Report Name --  |%s|",chr_l_rep_name_P);
	sprintf(chr_g_log_buff,"Report Name for Normal market-- |%s| \n",chr_l_rep_name_P);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	strcat(chr_l_rep_Path_P,chr_l_rep_name_P); // forming final path with report name for normal market

	printf("\n Final Report Name with path --  |%s|",chr_l_rep_Path_P);
	sprintf(chr_g_log_buff,"Final Report Name with path for Normal market -- |%s| \n",chr_l_rep_Path_P);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	// For opening the file in write mode for normal market report
	if ((l_ptr_rep_file_P = fopen(chr_l_rep_Path_P,"w")) == NULL)
   		return(APL_FAILURE);

	// setting the memory for report structure that will b used to access the file in batch monitor

	strcpy(l_intl_rept_struct_ha_P->report_name,chr_l_rep_name_P);
   	strcpy(l_intl_rept_struct_ha_P->report_desc, "Early Pay in Report");
   	strcpy(l_intl_rept_struct_ha_P->report_date, l_date);
   	l_intl_rept_struct_ha_P->report_width = 100;
   	strcpy(l_intl_rept_struct_ha_P->task_desc, "EarlyPyinRpt");
   	strcpy(l_intl_rept_struct_ha_P->fe_be_ind, APL_BE_IND);
   	strcpy(l_intl_rept_struct_ha_P->usr, l_user);

	// For accessing the file in Batch monitor -- normal market 
	if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha_P, l_debug_info_ptr))
        APL_GOBACK_FAIL

	// Constructing the report header  --Start 

	    /* ISKB-1721: ASHISH 20-08-2008 */
		/* ISKB-4678: VILIN 15-02-2011 Start */
		EXEC SQL SELECT TO_CHAR(COUNT(COUNT(*))) into :chr_l_rec_count_header  
			FROM DL_DEAL A,MT_CLI_EXCH_MAP B
                        /*Commented and Rewritten by supriya on 11082015 start  
                        IV_CLIENTSETUP C*/
                        /* MT_CLIENT_PARAM E */               /*12174 Interoperability 28/05/2019 */
                        /*Commented and Rewritten by supriya on 11082015 -END*/
	        WHERE
				A.DEAL_STAT IN ('CC','SS','MS','CS') AND
				A.DEAL_CD = '4' AND
				A.DL_CLASS = '1' AND
				A.CLH_FLG = 'C' AND
				A.CLIENT = B.CLN_CODE AND
				A.EXCH_CODE = B.CLN_EXCH_CODE AND
				A.MKT_TYPE = '24' AND
				A.SETTLEMENT_NO = :p_settlment_no  AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date AND 
                                 
                               (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
                                
				A.CLIENT||A.IDENTIY_NO not in 
				(SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND SETTLEMENT_NO = :p_settlment_no  )
				GROUP BY A.SETTLEMENT_NO,A.MKT_TYPE,B.CLN_EXCH_MAP_CODE ;
		IS_ANY_ORA_ERROR

		printf("\n chr_l_rec_count_header -1- --  |%s|",chr_l_rec_count_header);

		EXEC SQL SELECT NVL(TO_CHAR(SUM(NVL(DL_AMT,0))),0) INTO :chr_l_total_value_epi
				FROM
				(
						
						SELECT  TO_CHAR(NVL(A.AMOUNT,0)) AS DL_AMT                  /*12174 Interoperability 28/05/2019 */
     			   	    FROM DL_DEAL A,MT_CLI_EXCH_MAP B,DL_EXCHGORD_UPLD D
                        
						WHERE ((D.CLIENT = A.CLIENT)  OR (D.CLIENT in (select cln_master from mt_client where cln_code = A.CLIENT))) AND
						
 					    A.CLIENT = B.CLN_CODE AND
                        D.Instr_Code = A.Instr_Code AND 
				        (('S' = :chr_trd_setl_ind 
						AND D.EXCHG_CODE = A.EXCH_CODE 
						AND D.MKT_TYPE = A.MKT_TYPE 
						AND D.SETTL_NO=A.SETTLEMENT_NO)
						or 
						('T' = :chr_trd_setl_ind 
						AND D.EXCHG_CODE = A.TRD_EXCH 
						AND D.MKT_TYPE = A.TRD_MKT_TYPE 
						AND D.SETTL_NO=A.TRD_SETL_NO)) AND
						A.EXCH_CODE = B.CLN_EXCH_CODE AND
						A.DOMESTIC_CPCLT = D.BROKER_CD and
						//D.MKT_TYPE = A.MKT_TYPE  AND /*12174 Interoperability 28/05/2019 */
						//D.SETTL_NO=A.SETTLEMENT_NO AND /*12174 Interoperability 28/05/2019 */
					    TO_CHAR(D.DEAL_DATE,'dd/mm/yyyy') =  TO_CHAR(A.DEAL_DATE,'dd/mm/yyyy') and
					    D.STATUS = 'PM' AND
					    D.BUY_SELL_FLG = 'B' AND
					    A.DEAL_STAT IN ('CC','SS','MS','CS') AND
                        		    A.DEAL_CD = '4' AND
					    A.DL_CLASS = '1' AND
					    A.CLH_FLG = 'C' AND
					    A.MKT_TYPE = '24' AND
                                        A.SETTLEMENT_NO = :p_settlment_no  AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date AND
                                          
                                            (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
                                          
					    A.CLIENT||A.IDENTIY_NO not in (
					    SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND (A.SETTLEMENT_NO = :p_settlment_no  OR A.DEAL_DATE = :p_deal_date)) 
					                         GROUP BY B.CLN_EXCH_MAP_CODE,D.BROKER_CD,TO_CHAR(NVL(A.AMOUNT,0))                  /*12174 Interoperability 28/05/2019 */
      

				);
		IS_ANY_ORA_ERROR

		printf("\n chr_l_total_value_epi -1- --  |%s|",chr_l_total_value_epi);

		strcpy(chr_l_rpt_header,"10,"); // putting the record type
		strcat(chr_l_rpt_header,"FEPI,"); // putting the file type
		strcat(chr_l_rpt_header,chr_l_member_id); // putting the Member Code
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_sysdate);  //putting Batch Date 
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_batch_seq_num); // putting the bath number
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,"Z,"); // putting the Market Type indicator
		strcat(chr_l_rpt_header,p_settlment_no); // putting settlement number
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_rec_count_header); // putting the number of records

		printf("\n chr_l_rpt_header -1- --  |%s|",chr_l_rpt_header);
		sprintf(chr_g_log_buff,"Report header -- |%s| \n",chr_l_rpt_header);
	    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

		// Writing the rpt header in file
		fprintf(l_ptr_rep_file_P,"%s\n",chr_l_rpt_header);
	// Constructing the report header  --End

	// Cursor for fetching the report data -- start

	EXEC SQL DECLARE cur_fund_mcs CURSOR FOR
		SELECT COL1||','||COL2||','||COL3||','||TO_CHAR(SUM(NVL(DL_AMT,0)))||','||COL5/*TO_CHAR(SUM(NVL(DL_AMT,0)))||','||COL6||','||COL7*//*Priyanka - MCX UAT issue */
			FROM
			(
			SELECT 
				'20' AS COL1,
				B.CLN_EXCH_MAP_CODE  AS COL2,
				/*TO_CHAR(SUM(NVL(D.DL_AMT,0)))  AS COL4,*/
				 'C' AS COL3,
				A.CURRENCY_CD AS COL5,
				 //D.DL_AMT as DL_AMT
				 //TO_CHAR(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',nvl(AMT_DIFFER,0),'3',-nvl(AMT_DIFFER,0)),'999999999999990.99') AS DL_AMT           /*12174 Interoperability 28/05/2019 */
				 //TO_CHAR(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',-nvl(AMT_DIFFER,0),'3',nvl(AMT_DIFFER,0))) AS DL_AMT           /*12174 Interoperability 28/05/2019 */
				 TO_CHAR(NVL(A.AMOUNT,0)) AS DL_AMT           /*12174 Interoperability 28/05/2019 */
			/*	 'C' AS COL3,
				D.SETTL_NO AS COL4,
				'' AS COL5,
				'' AS COL6,
				'' AS COL7,
				'' AS COL8,
				'' AS COL9*/
			FROM DL_DEAL A,MT_CLI_EXCH_MAP B,DL_EXCHGORD_UPLD D
			/*Commented and Rewritten by supriya on 11082015 start
			IV_CLIENTSETUP E	 */
			/* MT_CLIENT_PARAM E */             /*12174 Interoperability 28/05/2019 */
                        /*Commented and Rewritten by supriya on 11082015 -END*/
			/*Commented and Rewritten by Prateek on 12022014 for ISKB_6558(PMS)-START
			WHERE D.CLIENT = A.CLIENT AND*/
			WHERE ((D.CLIENT = A.CLIENT)  OR (D.CLIENT in (select cln_master from mt_client where cln_code = A.CLIENT))) AND
			/*Commented and Rewritten by Prateek on 12022014 for ISKB_6558(PMS)-END*/
			A.CLIENT = B.CLN_CODE AND
			D.Instr_Code = A.Instr_Code AND 
			/* D.EXCHG_CODE = A.EXCH_CODE  AND */            /*12174 Interoperability 28/05/2019 */
			/*12174 Interoperability 28/05/2019 Starts*/
			(('S' = :chr_trd_setl_ind 
			AND D.EXCHG_CODE = A.EXCH_CODE 
			AND D.MKT_TYPE = A.MKT_TYPE 
			AND D.SETTL_NO=A.SETTLEMENT_NO)
			or 
			('T' = :chr_trd_setl_ind 
			AND D.EXCHG_CODE = A.TRD_EXCH 
			AND D.MKT_TYPE = A.TRD_MKT_TYPE 
			AND D.SETTL_NO=A.TRD_SETL_NO)) AND
			A.EXCH_CODE = B.CLN_EXCH_CODE AND 
			A.DOMESTIC_CPCLT = D.BROKER_CD and
			/* D.MKT_TYPE = A.MKT_TYPE  AND
			D.SETTL_NO=A.SETTLEMENT_NO AND */              /*12174 Interoperability 28/05/2019 */
			TO_CHAR(D.DEAL_DATE,'dd/mm/yyyy') =  TO_CHAR(A.DEAL_DATE,'dd/mm/yyyy') and
			D.STATUS = 'PM' AND
			D.BUY_SELL_FLG = 'B' AND
			A.DEAL_STAT IN ('CC','SS','MS','CS') AND
			A.DEAL_CD = '4' AND
		        A.DL_CLASS = '1' AND
		        A.CLH_FLG = 'C' AND
	   	        A.MKT_TYPE = '24' AND
                        A.SETTLEMENT_NO = :p_settlment_no AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date AND
                        /*Commented and Rewritten by supriya on 11082015 start
			A.CLIENT =E.CLIENT AND
		        E.PAY_IN_DAY = :chr_l_early_payindays AND*/
                       /*  A.CLIENT = E.CLIENT_CODE AND */                     /*12174 Interoperability 28/05/2019 */
                        (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
                        /*Commented and Rewritten by supriya on 11082015 -END*/
			A.CLIENT||A.IDENTIY_NO not in (
			SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA' AND A.SETTLEMENT_NO = :p_settlment_no )
			/* ISKB-4678: VILIN 15-02-2011 End */
		      	 //GROUP BY B.CLN_EXCH_MAP_CODE,D.BROKER_CD,TO_CHAR(NVL(A.AMOUNT,0) + decode(A.DEAL_CD,'4',-nvl(AMT_DIFFER,0),'3',nvl(AMT_DIFFER,0))),A.CURRENCY_CD                     /*12174 Interoperability 28/05/2019 */
                         GROUP BY B.CLN_EXCH_MAP_CODE,D.BROKER_CD,TO_CHAR(NVL(A.AMOUNT,0)),A.CURRENCY_CD                     /*12174 Interoperability 28/05/2019 */
		     )
			 GROUP BY COL1,COL2,COL3,COL5 ;

	// opening the cursor
	EXEC SQL OPEN cur_fund_mcs;
	CO_ProcMonitor(g_flogfile,"Opened Cursor cur_mcs_fund",NULL,NULL);

	IS_ANY_ORA_ERROR

	// Processing the cursor data -- (Printing the data into file)
	for(;;)
	{
		EXEC SQL FETCH cur_fund_mcs INTO :chr_l_record_row:i_l_record_row;
												  
		sprintf(chr_g_log_buff,"Fetched cur_mcs_fund sqlca.sqlcode is :%d:",sqlca.sqlcode);
		CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);
		IS_ANY_ORA_ERROR_CURSOR

		// Writing to report file
		fprintf(l_ptr_rep_file_P,"%s\n",chr_l_record_row);

		if (sqlca.sqlcode == 1403)
		{
            CO_ProcMonitor(g_flogfile,"No more Records ",NULL,NULL);
            EXEC SQL CLOSE cur_fund_mcs;
            APL_GOBACK_SUCCESS;
		}
	} 
	// Cursor for fetching the report data (Middle part of the report) -- End 
	//********************************************************************
	// FOR Normal Market Type 24-- End
	//********************************************************************

	
	APL_GOBACK_SUCCESS
		
	
	RETURN_SUCCESS:
		fclose(l_ptr_rep_file); // Closing the file -- normal market type.
		fclose(l_ptr_rep_file); // Closing the file -- T2T market type.
		fclose(l_ptr_rep_file_M);
		fclose(l_ptr_rep_file_P);
		CO_ProcMonitor(g_flogfile, "Leaving Fund_Mcs() with success", l_debug_info_ptr, NULL);
		printf("\n Leaving Fund_Mcs() with success \n");
	return(APL_SUCCESS);
	
	RETURN_FAILURE:
		fclose(l_ptr_rep_file); // Closing the file -- normal market type.
		fclose(l_ptr_rep_file); // Closing the file -- T2T market type.
		fclose(l_ptr_rep_file_M);
		fclose(l_ptr_rep_file_P);
		printf("\n Error in Fund_Mcs() \n");
	return(APL_FAILURE);
}
// Added by Vamshi For MCS Enhancement --End



static int  Security_Bse(char *p_settlment_no,FILE *g_flogfile, DEBUG_INFO_STRUCT_H   **l_debug_info_ptr)
{
	char chr_l_sysdate[APL_DATE_LEN]  =	APL_NULL_STRING;
	char chr_l_rep_name[FILENAME_LEN_A]   = APL_NULL_STRING; 

	char chr_l_member_id[10] = APL_NULL_STRING;
	short i_l_member_id = 0;
	
	
	char chr_l_seq_num[5] = APL_NULL_STRING;
	char chr_l_temp_seq_num[5] = APL_NULL_STRING;

	int int_return_val=0;
	char chr_l_seqnum_a[10] = APL_NULL_STRING;

	int counter = 0; /* Yog - 19052008 */

	//char chr_l_record_row[600] = APL_NULL_STRING;//Size increased by Gouse for ISKB_6000
	char chr_l_record_row[4000] = APL_NULL_STRING;
	short i_l_record_row = 0;

	//char chr_l_final_record_row[650] = APL_NULL_STRING;//Size increased by Gouse for ISKB_6000
	char chr_l_final_record_row[4000] = APL_NULL_STRING;
	
	// for report header
	char chr_l_rep_name_for_header[FILENAME_LEN_A]   = APL_NULL_STRING; 
	char chr_l_rpt_header[100] = APL_NULL_STRING;
	char chr_l_rpt_header_date[APL_DATE_LEN]  =	APL_NULL_STRING;

	// for report footer 
	char chr_l_rpt_footer[100] = APL_NULL_STRING;
	char chr_l_footer_count[100] = APL_NULL_STRING;
	char chr_l_footer_rpt_sum[100] = APL_NULL_STRING;

	/* Added by Gouse for ISKB_6000 - Start - 17/01/2013 */

	char l_settlement_no[12] = APL_NULL_STRING;
	char l_exch_instr_code[13] = APL_NULL_STRING;
	char l_cln_exch_map_code[21] = APL_NULL_STRING;
	double l_qty = 0.0;
	int l_count=0;

	EXEC SQL BEGIN DECLARE SECTION;	
	
	EXEC SQL VAR l_settlement_no IS STRING;
	EXEC SQL VAR l_exch_instr_code IS STRING;
	EXEC SQL VAR l_cln_exch_map_code IS STRING;

	EXEC SQL END DECLARE SECTION;

	/* Added by Gouse for ISKB_6000 - End - 17/01/2013 */

	FILE  *l_ptr_rep_file  =  NULL; 
	INTL_REPT_STRUCT_H   *l_intl_rept_struct_ha  =NULL;

	PRO_GSEQNUM_STRUCT_H    l_pro_gseqno_struct_h; // For sequence (resetable sequence)

	l_intl_rept_struct_ha = (INTL_REPT_STRUCT_H *) calloc(1,sizeof(INTL_REPT_STRUCT_H));

	printf("\n Entering Security_Bse() ");
	printf("\n ** p_settlment_no **  -- |%s|",p_settlment_no);

	// Getting the system date
	EXEC SQL SELECT to_char(SYS_DATE,'DDMMYY') INTO :chr_l_sysdate FROM PRO_SYS_DATE;
	IS_ANY_ORA_ERROR

	printf("\n chr_l_sysdate  --  |%s|",chr_l_sysdate);
	sprintf(chr_g_log_buff,"System date -- |%s| \n",chr_l_sysdate);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	// For getting the member id of the bank
	/* EXEC SQL SELECT MAP_DESC  */
	EXEC SQL SELECT LPAD(MAP_DESC,4,'0')    /* 12174 - Interoperability changes */
	into :chr_l_member_id :i_l_member_id    
		FROM PRO_SGENSTAT  
			WHERE MAP_TYPE = 'MEMBER_ID' AND MAP_VAL = 'BSE' ;
	IS_ANY_ORA_ERROR

	
	/*EXEC SQL SELECT MAP_VAL into :chr_l_member_id :i_l_member_id FROM PRO_SGENSTAT 
	WHERE MAP_TYPE = 'MEMBER_ID' 
	AND MAP_DESC = (SELECT CUSTODY_CLT_CD FROM MT_CORE_SYS_PARAMS) ;*/
	

	printf("\n chr_l_member_id  --  |%s|",chr_l_member_id);
	sprintf(chr_g_log_buff,"Member ID -- |%s| \n",chr_l_member_id);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	// preparing structure for getting the sequence value from a reset able sequence 
	memset(&l_pro_gseqno_struct_h, NULL, sizeof(PRO_GSEQNUM_STRUCT_H));
	strcpy(l_pro_gseqno_struct_h.sequencename, "EARLYPYINRPT_BSE_SEC");
	/* strcpy(l_pro_gseqno_struct_h.seq_attrb_a, APL_NULL_STRING); */
	strcpy(l_pro_gseqno_struct_h.seq_attrb_a, p_settlment_no);    /* 12174 - Interoperability changes */
	strcpy(l_pro_gseqno_struct_h.seq_attrb_b, APL_NULL_STRING);
	strcpy(l_pro_gseqno_struct_h.seq_attrb_c, APL_NULL_STRING);

	l_pro_gseqno_struct_h.seq_stepby = 1;
	l_pro_gseqno_struct_h.seq_start = 1;
	l_pro_gseqno_struct_h.last_seqnum = 99;
	l_pro_gseqno_struct_h.recycle_ind = RECYCLE_EOD;

	// geting the sequence number (we have used this function because we want to reset the sequence at EOD)
	int_return_val = CO_RtvNxtSeqNum(&l_pro_gseqno_struct_h,l_debug_info_ptr); 

	if (int_return_val != APL_FAILURE)
		sprintf(chr_l_seqnum_a,"%d",int_return_val);
	else
		APL_GOBACK_FAIL

	strcpy(chr_l_seq_num,chr_l_seqnum_a); 

	printf("\n chr_l_seq_num -1- --  |%s|",chr_l_seq_num);
	// constructing the sequence number (should be of length 2) for file name 
	if (strlen(chr_l_seq_num) == 1)
	{
		strcpy(chr_l_temp_seq_num,"0");
		strcat(chr_l_temp_seq_num,chr_l_seq_num);
	}
	else // having of length 2
	{
		strcpy(chr_l_temp_seq_num,chr_l_seq_num);
	}

	printf("\n chr_l_seq_num -2- --  |%s|",chr_l_temp_seq_num);
	sprintf(chr_g_log_buff,"Sequence Number -- |%s| \n",chr_l_temp_seq_num);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);


	// Constructing file name 
	strcat(chr_l_rep_name,"E");
	strcat(chr_l_rep_name,chr_l_member_id);
	strcat(chr_l_rep_name,p_settlment_no+4);
	strcat(chr_l_rep_name,chr_l_temp_seq_num);
	strcat(chr_l_rep_name,"_EPN");    /* 12174 - Interoperability changes */
	strcpy(chr_l_rep_name_for_header,chr_l_rep_name); // for using the rep name in report header
	/* strcat(chr_l_rep_name,".txt"); */     
	strcat(chr_l_rep_name,".csv");        /* 12174 - Interoperability changes */

	printf("\n Report Name --  |%s|",chr_l_rep_name);
	sprintf(chr_g_log_buff,"Report Name -- |%s| \n",chr_l_rep_name);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	strcat(chr_l_rep_Path,chr_l_rep_name); // forming final path with report name

	printf("\n Final Report Name and path --  |%s|",chr_l_rep_Path);
	sprintf(chr_g_log_buff," Final Report Name and path -- |%s| \n",chr_l_rep_Path);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	// For opening the file in write mode
	if ((l_ptr_rep_file = fopen(chr_l_rep_Path,"w")) == NULL)
   		return(APL_FAILURE);

	// setting the memory for report structure that will b used to access the file in batch monitor
	memset(l_intl_rept_struct_ha,NULL,sizeof(INTL_REPT_STRUCT_H));

	strcpy(l_intl_rept_struct_ha->report_name,chr_l_rep_name);
   	strcpy(l_intl_rept_struct_ha->report_desc, "Early Pay in Report");
   	strcpy(l_intl_rept_struct_ha->report_date, l_date);
   	l_intl_rept_struct_ha->report_width = 100;
   	strcpy(l_intl_rept_struct_ha->task_desc, "EarlyPyinRpt");
   	strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
   	strcpy(l_intl_rept_struct_ha->usr, l_user);

	if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))
        APL_GOBACK_FAIL
		/* UAT FIX BY AMISH - 15052008 */
/*
	// Constructing the report header  --Start
		EXEC SQL SELECT TO_CHAR(SYS_DATE,'#'||'DD-MM-YY') INTO :chr_l_rpt_header_date FROM PRO_SYS_DATE;
			IS_ANY_ORA_ERROR
		
		printf("\n chr_l_rpt_header_date  --  |%s|",chr_l_rpt_header_date);
		
		strcpy(chr_l_rpt_header,chr_l_rpt_header_date); 
		strcat(chr_l_rpt_header,chr_l_temp_seq_num); // putting the sequence number
		strcat(chr_l_rpt_header,"EQ"); //putting the Segmenttype
		strcat(chr_l_rpt_header,chr_l_rep_name_for_header); //putting the rpt name 

		printf("\n chr_l_rpt_header -1- --  |%s|",chr_l_rpt_header);
		sprintf(chr_g_log_buff,"Report header -- |%s| \n",chr_l_rpt_header);
	    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

		// Writing the rpt header in file
		fprintf(l_ptr_rep_file,"%s\n",chr_l_rpt_header);
	// Constructing the report header  --End
*/
		/* UAT FIX BY AMISH - 15052008 */
	// Cursor for fetching the report data (Middle part of the report) -- start
	/* ISKB-4678: VILIN 15-02-2011 Start */
	/* KOTAK UAT issue, payinday check has been removed */
	/*EXEC SQL DECLARE cur_bse_security CURSOR FOR
		select SUBSTR(A.SETTLEMENT_NO,0,4)||'0'||SUBSTR(A.SETTLEMENT_NO,5,7)||C.EXCH_INSTR_CODE||RPAD(B.CLN_EXCH_MAP_CODE,11)||LPAD(SUM(A.QTY),7,0)
		commented and re-written by Gouse for ISKB_6000 - 17/01/2013 */
		
		Alert("PPD: 11111 ");
	EXEC SQL DECLARE cur_bse_security CURSOR FOR
			SELECT A.SETTLEMENT_NO SETTLEMENT_NO,C.EXCH_INSTR_CODE EXCH_INSTR_CODE,B.CLN_EXCH_MAP_CODE CLN_EXCH_MAP_CODE,SUM(A.QTY) QTY
			FROM DL_DEAL A, MT_CLI_EXCH_MAP B, MT_INSTR_EXCH_DET C
			WHERE
			// A.DEAL_STAT IN ('CC','SS','CS','MS') AND
			 A.DEAL_STAT='CC' AND // Added by Pankaj Deshpande 
			A.DEAL_CD = '3' AND
			A.MKT_TYPE IN ('45','57','41','17') AND
			A.DL_CLASS = '1' AND
			A.CLH_FLG = 'C' AND
			A.CLIENT = B.CLN_CODE AND
			A.EXCH_CODE = B.CLN_EXCH_CODE AND
			A.INSTR_CODE = C.INSTR_CODE AND
			A.EXCH_CODE = C.EXCH_CODE AND
			(A.MKT_TYPE = C.MKT_TYPE or A.MKT_TYPE = decode(C.MKT_TYPE,'41','45',C.MKT_TYPE)) AND
			A.SETTLEMENT_NO = :p_settlment_no 
			AND ((A.INTERFII_FLG = 'Y' AND SUBSTR(C.EXCH_INSTR_CODE,1,1) = '6') 
			//OR (NVL(A.INTERFII_FLG,'N') != 'Y' AND SUBSTR(C.EXCH_INSTR_CODE,1,1) = '5')) AND  /*IOP - Added 2L series Prod 16072019*/
			OR (NVL(A.INTERFII_FLG,'N') != 'Y' AND (SUBSTR(C.EXCH_INSTR_CODE,1,1) = '5' OR SUBSTR(C.EXCH_INSTR_CODE,1,1) = '2')  )) AND
                        A.CLIENT||A.IDENTIY_NO not in (
			SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA')
			GROUP BY A.SETTLEMENT_NO, C.EXCH_INSTR_CODE,B.CLN_EXCH_MAP_CODE
			ORDER BY A.SETTLEMENT_NO, C.EXCH_INSTR_CODE,B.CLN_EXCH_MAP_CODE;

	// opening the cursor
	EXEC SQL OPEN cur_bse_security;
	CO_ProcMonitor(g_flogfile,"Opened Cursor cur_bse_security",NULL,NULL);

	IS_ANY_ORA_ERROR

	// Processing the cursor data -- (Printing the data into file)
	for(;;)
	{

		/* Added by Gouse for ISKB_6000 - Start - 17/01/2013 */
		memset (l_settlement_no,APL_NULL_CHAR,12);
		memset (l_exch_instr_code,APL_NULL_CHAR,13);
		memset (l_cln_exch_map_code,APL_NULL_CHAR,21);
		l_qty=0.0;
		l_count=0;

		//EXEC SQL FETCH cur_bse_security INTO :chr_l_record_row:i_l_record_row;
		EXEC SQL FETCH cur_bse_security INTO :l_settlement_no,:l_exch_instr_code,:l_cln_exch_map_code,:l_qty;
		/* Added by Gouse for ISKB_6000 - End - 17/01/2013 */
												  
		sprintf(chr_g_log_buff,"Fetched cur_bse_fund sqlca.sqlcode is :%d:",sqlca.sqlcode);
		CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);
		IS_ANY_ORA_ERROR_CURSOR

		// Constructing the final row
		strcpy(chr_l_final_record_row,chr_l_member_id);
		strcat(chr_l_final_record_row,",");  //Interoperability changes
		//strcat(chr_l_final_record_row,chr_l_record_row);//Commented by Gouse for ISKB_6000 and added the same stmt in below for loop
		
		// Writing to report file
		/* fprintf(l_ptr_rep_file,"%s\n",chr_l_final_record_row); */ /* UAT Issue - Extra Line at EOF on 16052008 - By Yogesh */

		if (sqlca.sqlcode == 1403)
		{
            CO_ProcMonitor(g_flogfile,"No more Records ",NULL,NULL);
            EXEC SQL CLOSE cur_bse_security;
            APL_GOBACK_SUCCESS;
		}


		/* Added by Gouse for ISKB_6000 - Start - 17/01/2013 */
		while(1)
		{
			if((l_qty > 9999999) && (l_qty > 0))
			{
				Alert("l_qty is |%f|",l_qty);
				if(l_count > 0)
				{
					strcat(chr_l_final_record_row,chr_l_member_id);
					strcat(chr_l_final_record_row,",");  //Interoperability changes
				}

				//Interoperability changes
				/* EXEC SQL SELECT ((SUBSTR(:l_settlement_no,0,4)||'0'||SUBSTR(:l_settlement_no,5,7)||:l_exch_instr_code||RPAD(:l_cln_exch_map_code,11)|| */
				EXEC SQL SELECT ((SUBSTR(:l_settlement_no,0,4)||','||SUBSTR(:l_settlement_no,5,7)||','||:l_exch_instr_code||','||:l_cln_exch_map_code||','||9999999 )||','||',' ) into :chr_l_record_row from dual;
				IS_ANY_ORA_ERROR
				Alert("sqlca.sqlcode is |%d|",sqlca.sqlcode);
				strcat(chr_l_final_record_row,chr_l_record_row);
				//Alert("chr_l_final_record_row is |%s|",chr_l_final_record_row);
				l_qty=l_qty-9999999;
				Alert("l_qty is |%f|",l_qty);
				l_count++;
			}
			else if((l_qty <= 9999999) && (l_qty > 0)) 
			{
				if(l_count > 0)
				{
					strcat(chr_l_final_record_row,chr_l_member_id);
					strcat(chr_l_final_record_row,",");  //Interoperability changes
				}
				Alert("l_qty is |%f|",l_qty);
				//Interoperability l_cln_exch_map_code to 12 char and file format chanegs
				EXEC SQL SELECT (SUBSTR(:l_settlement_no,0,4)||','||SUBSTR(:l_settlement_no,5,7)||','||:l_exch_instr_code||','||:l_cln_exch_map_code||','||:l_qty||','||',') into :chr_l_record_row from dual;
				IS_ANY_ORA_ERROR
				Alert("sqlca.sqlcode is |%d|",sqlca.sqlcode);
				strcat(chr_l_final_record_row,chr_l_record_row);
				//Alert("chr_l_final_record_row is |%s|",chr_l_final_record_row);
				break;
			}
			else
			{
				break;
			}
		}
		/* Added by Gouse for ISKB_6000 - End - 17/01/2013 */


		/* UAT Issue - Extra Line at EOF on 16052008 - By Yogesh - Start */

		if(counter == 0)
		{
			fprintf(l_ptr_rep_file,"%s",chr_l_final_record_row); 
			counter++;
	} 
		else
		{
			/* Inplace of \n chr(13)||chr(10) is used - Blank space at EOF - Gouse - 12/04/2013 */
			EXEC SQL SELECT chr(13)||chr(10)||:chr_l_final_record_row into :chr_l_final_record_row FROM DUAL;
			fprintf(l_ptr_rep_file,"%s",chr_l_final_record_row);	
		}

		/* UAT Issue - Extra Line at EOF on 16052008 - By Yogesh - End */	


	} 
			/* UAT FIX BY AMISH - 15052008 */
	// Cursor for fetching the report data (Middle part of the report) -- End 
/*

	// Constructing the report footer  --Start   
		EXEC SQL SELECT '###'||COUNT(COUNT(*)) into :chr_l_footer_count
				FROM DL_DEAL A,MT_CLI_EXCH_MAP B
				WHERE
					A.DEAL_STAT IN ('CC','SS','MS','CS') AND
					A.DEAL_CD = '3' AND
					A.DL_CLASS = '1' AND
					A.CLH_FLG = 'C' AND
					A.CLIENT = B.CLN_CODE AND
					A.EXCH_CODE = B.CLN_EXCH_CODE AND
					A.MKT_TYPE IN ('5','16') AND
					A.SETTLEMENT_NO = :p_settlment_no AND
                                        A.CLIENT||A.IDENTIY_NO not in (
					SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA') 
					GROUP BY A.SETTLEMENT_NO,B.CLN_EXCH_MAP_CODE;

			IS_ANY_ORA_ERROR

		printf("\n chr_l_footer_count -1- --  |%s|",chr_l_footer_count);
		sprintf(chr_g_log_buff,"Report footer count -- |%s| \n",chr_l_footer_count);
			CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

		strcpy(chr_l_rpt_footer,chr_l_footer_count); // putting the count to report footer
		EXEC SQL SELECT NVL(REPLACE(REPLACE(TO_CHAR(SUM(NVL(NET_AMT,0)),'999999999990.99'),'.',''),' ','0'),0)
				into :chr_l_footer_rpt_sum
				FROM DL_DEAL A,MT_CLI_EXCH_MAP B
				WHERE
					A.DEAL_STAT IN ('CC','SS','MS','CS') AND
					A.DEAL_CD = '3' AND
					A.DL_CLASS = '1' AND
					A.CLH_FLG = 'C' AND
					A.CLIENT = B.CLN_CODE AND
					A.EXCH_CODE = B.CLN_EXCH_CODE AND
					A.MKT_TYPE IN ('5','16') AND
					A.SETTLEMENT_NO =  :p_settlment_no AND
                                        A.CLIENT||A.IDENTIY_NO not in (
					SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA');

				IS_ANY_ORA_ERROR

		printf("\n chr_l_footer_rpt_sum -1- --  |%s|",chr_l_footer_rpt_sum);
		sprintf(chr_g_log_buff,"Report footer sum -- |%s| \n",chr_l_footer_rpt_sum);
			CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

		if(! strcmp(chr_l_footer_rpt_sum,"0") ) // when zero
			strcat(chr_l_rpt_footer," "); // putting early paying sum as blank to report footer
		else
			strcat(chr_l_rpt_footer,chr_l_footer_rpt_sum); // putting early paying sum to report footer

		printf("\n chr_l_rpt_footer -1- --  |%s|",chr_l_rpt_footer);
		
		sprintf(chr_g_log_buff,"Report footer -- |%s| \n",chr_l_rpt_footer);
	    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

		// Writing the rpt footer in file
		fprintf(l_ptr_rep_file,"%s\n",chr_l_rpt_footer);
	// Constructing the report footer  --End
*/
		/* UAT FIX BY AMISH - 15052008 */
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:
		fclose(l_ptr_rep_file); // Closing the file.
		CO_ProcMonitor(g_flogfile, "Leaving Security_Bse() with success", l_debug_info_ptr, NULL);
		printf("\n Leaving Security_Bse() with success \n");
	return(APL_SUCCESS);

	RETURN_FAILURE:
		fclose(l_ptr_rep_file); // Closing the file.
		printf("\n Error in Security_Bse()\n");
	return(APL_FAILURE);
}


static int  Security_Nse(char *p_settlment_no,char *p_deal_date,FILE *g_flogfile, DEBUG_INFO_STRUCT_H   **l_debug_info_ptr)
{
	char chr_l_sysdate[APL_DATE_LEN]  =	APL_NULL_STRING;
	char chr_l_rep_name[FILENAME_LEN_A]   = APL_NULL_STRING; 

	char chr_l_member_id[10] = APL_NULL_STRING;
	short i_l_member_id = 0;
	
	
	char chr_l_record_row[600] = APL_NULL_STRING;
	short i_l_record_row = 0;

	// for report header
	char chr_l_rpt_header[100] = APL_NULL_STRING;
	char chr_l_rec_count_header[20] = APL_NULL_STRING; 

	char chr_l_batch_num[5] = APL_NULL_STRING;
	char chr_l_batch_seq_num[5] = APL_NULL_STRING;
	char chr_l_seqnum_a[10] = APL_NULL_STRING;
	int int_return_val = 0;
	

	//changes done for Early Payin recon starts
	char char_set_typ_no[3]= APL_NULL_STRING;
	char char_exch_instr_cd[13] =APL_NULL_STRING ;
	char char_script_cd[3]= APL_NULL_STRING;
	char char_cln_exch_map[13]=APL_NULL_STRING ;
	char char_mkt_typ[3]= APL_NULL_STRING;
	char char_settl_no[16]= APL_NULL_STRING;
	char chr_sysdate[APL_DATE_LEN]= APL_NULL_STRING;
	char char_qty[12]= APL_NULL_STRING;
	char char_status[3]=APL_NULL_STRING;


char chr_l_del[30] = APL_NULL_STRING;
	short i_l_del = 0;
	//changes done for Early Payin recon ends
	//char chr_l_seq_num[5] = APL_NULL_STRING;

	FILE  *l_ptr_rep_file  =  NULL; 
	INTL_REPT_STRUCT_H   *l_intl_rept_struct_ha  =NULL;

	l_intl_rept_struct_ha = (INTL_REPT_STRUCT_H *) calloc(1,sizeof(INTL_REPT_STRUCT_H));

	PRO_GSEQNUM_STRUCT_H    l_pro_gseqno_struct_h; // For sequence (resetable sequence)

	printf("\n Entering Security_Bse() ");
	printf("\n ** p_settlment_no **  -- |%s|",p_settlment_no);

	// For getting the member id of the bank
	EXEC SQL SELECT MAP_DESC  into :chr_l_member_id :i_l_member_id 
		FROM PRO_SGENSTAT  
			WHERE MAP_TYPE = 'MEMBER_ID' AND MAP_VAL = 'NSE' ;
	IS_ANY_ORA_ERROR
	
	printf("\n chr_l_member_id  --  |%s|",chr_l_member_id);
	sprintf(chr_g_log_buff,"Member ID -- |%s| \n",chr_l_member_id);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	// Getting the system date
	EXEC SQL SELECT to_char(SYS_DATE,'YYYYMMDD') INTO :chr_l_sysdate FROM PRO_SYS_DATE;
	IS_ANY_ORA_ERROR

	printf("\n chr_l_sysdate  --  |%s|",chr_l_sysdate);
	sprintf(chr_g_log_buff,"System date -- |%s| \n",chr_l_sysdate);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	// preparing structure for getting the sequence value from a reset able sequence 
	memset(&l_pro_gseqno_struct_h,NULL, sizeof(l_pro_gseqno_struct_h));
	strcpy(l_pro_gseqno_struct_h.sequencename, "EPR_NSE_SECURITY");
	strcpy(l_pro_gseqno_struct_h.seq_attrb_a, APL_NULL_STRING);
	strcpy(l_pro_gseqno_struct_h.seq_attrb_b, APL_NULL_STRING);
	strcpy(l_pro_gseqno_struct_h.seq_attrb_c, APL_NULL_STRING);

	l_pro_gseqno_struct_h.seq_stepby = 1;
	l_pro_gseqno_struct_h.seq_start = 1;
	l_pro_gseqno_struct_h.last_seqnum = 99;
	l_pro_gseqno_struct_h.recycle_ind = RECYCLE_EOD;

	// geting the sequence number (we have used this function because we want to reset the sequence at EOD)
	int_return_val = CO_RtvNxtSeqNum(&l_pro_gseqno_struct_h,l_debug_info_ptr); 

		if (int_return_val != APL_FAILURE)
		sprintf(chr_l_seqnum_a,"%d",int_return_val);
	else
		APL_GOBACK_FAIL

	strcpy(chr_l_batch_num,chr_l_seqnum_a); 

	printf("\n chr_l_batch_num -1- --  |%s|",chr_l_batch_num);
	// constructing the sequence number (should be of length 2) for file name 
	if (strlen(chr_l_batch_num) == 1)
	{
		strcpy(chr_l_batch_seq_num,"0");
		strcat(chr_l_batch_seq_num,chr_l_batch_num);
	}
	else // having of length 2
	{
		strcpy(chr_l_batch_seq_num,chr_l_batch_num);
	}

	printf("\n chr_l_seq_num -2- --  |%s|",chr_l_batch_seq_num);
	sprintf(chr_g_log_buff,"Sequence Number -- |%s| \n",chr_l_batch_seq_num);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);




if(strlen(p_settlment_no) == 0)
        {
printf("inside if loop");
			EXEC SQL select SETTL_NO INTO :sett_no1 FROM mt_settl_cal
			WHERE TO_CHAR(TO_DATE(START_DATE),'dd/mm/yyyy') = TO_CHAR (to_date(:p_deal_date),'dd/mm/yyyy')
			AND  EXCH_CODE= 'NSE'
			AND SETTL_TYPE ='55';
			IS_ANY_ORA_ERROR

			EXEC SQL select SETTL_NO INTO :sett_no2 FROM mt_settl_cal
			WHERE TO_CHAR(TO_DATE(START_DATE),'dd/mm/yyyy') = TO_CHAR (to_date(:p_deal_date),'dd/mm/yyyy')
			AND  EXCH_CODE= 'NSE'
			AND SETTL_TYPE ='49';
			IS_ANY_ORA_ERROR
strcpy(p_settlment_no,sett_no1);
strcpy(p_settlment_no1,sett_no2);

		}
					

printf("settle number [%s]",p_settlment_no );

printf("settle number [%s]",p_settlment_no1 );

	// Constructing file name 
	strcat(chr_l_rep_name,chr_l_member_id);
	strcat(chr_l_rep_name,"_CLNTEPI_");
	strcat(chr_l_rep_name,chr_l_sysdate);
	strcat(chr_l_rep_name,".T");
	strcat(chr_l_rep_name,chr_l_batch_seq_num); //The batch number of file to be uploaded

	/* ISKB-1721: ASHISH 22-08-2008 Start */
	IF_COND_EXISTS("EARLY_PAYIN_REPORT","CSV_FORMAT")
	{
	strcat(chr_l_rep_name,".csv");
	}

	IF_COND_EXISTS("EARLY_PAYIN_REPORT","TXT_FORMAT")
	{
		strcat(chr_l_rep_name,".txt");
	}
	/* ISKB-1721: ASHISH 22-08-2008 End */
	

	printf("\n Report Name --  |%s|",chr_l_rep_name);
	sprintf(chr_g_log_buff,"Report Name -- |%s| \n",chr_l_rep_name);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	strcat(chr_l_rep_Path,chr_l_rep_name); // forming final path with report name

	printf("\n Final Report Name with path --  |%s|",chr_l_rep_Path);
	sprintf(chr_g_log_buff,"Report Name -- |%s| \n",chr_l_rep_Path);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	// For opening the file in write mode
	if ((l_ptr_rep_file = fopen(chr_l_rep_Path,"w")) == NULL)
   		return(APL_FAILURE);

	// setting the memory for report structure that will b used to access the file in batch monitor
	memset(l_intl_rept_struct_ha,NULL,sizeof(INTL_REPT_STRUCT_H));

	strcpy(l_intl_rept_struct_ha->report_name,chr_l_rep_name);
   	strcpy(l_intl_rept_struct_ha->report_desc, "Early Pay in Report");
   	strcpy(l_intl_rept_struct_ha->report_date, l_date);
   	l_intl_rept_struct_ha->report_width = 100;
   	strcpy(l_intl_rept_struct_ha->task_desc, "EarlyPyinRpt");
   	strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
   	strcpy(l_intl_rept_struct_ha->usr, l_user);

	if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))
        APL_GOBACK_FAIL

	// Constructing the report header  --Start
		// Getting the system date
		EXEC SQL SELECT to_char(SYS_DATE,'DDMMYYYY') INTO :chr_l_sysdate FROM PRO_SYS_DATE;
		IS_ANY_ORA_ERROR

		printf("\n chr_l_sysdate -header-  --  |%s|",chr_l_sysdate);	
		/* ISKB-4678: VILIN 15-02-2011 Start */
		/* KOTAK UAT issue, payinday check has been removed */
		/* D.PAY_IN_DAY = :chr_l_early_payindays */
		Alert("PPD: 22222 ");
		EXEC SQL  SELECT count(COUNT(*)) into :chr_l_rec_count_header
			FROM DL_DEAL A,MT_CLI_EXCH_MAP B, MT_INSTR_EXCH_DET C 
			WHERE 
				// A.DEAL_STAT  IN ('CC','SS','MS','CS') AND
				 A.DEAL_STAT='CC' AND // Added by Pankaj Deshpande 
				A.DEAL_CD = '3' AND
				A.DL_CLASS = '1' AND
				A.CLH_FLG = 'C' AND
				A.MKT_TYPE IN ('55','56','49','50') AND 
				A.CLIENT = B.CLN_CODE AND
				A.EXCH_CODE = B.CLN_EXCH_CODE AND
				A.INSTR_CODE = C.INSTR_CODE AND
				A.EXCH_CODE = C.EXCH_CODE AND
                                (A.MKT_TYPE = C.MKT_TYPE or A.MKT_TYPE = decode(C.MKT_TYPE,'49','55',C.MKT_TYPE)) AND
				A.SETTLEMENT_NO IN (:p_settlment_no ,:p_settlment_no1) AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date
				/* ISKB-1721: ASHISH 20-08-2008 Start */
				AND ((A.INTERFII_FLG = 'Y' AND SCRIP_GRP = 'IL') OR (NVL(A.INTERFII_FLG,'N') != 'Y' AND SCRIP_GRP != 'IL')) AND
                                A.CLIENT||A.IDENTIY_NO not in (
				SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA')
				GROUP BY A.SETTLEMENT_NO,A.MKT_TYPE,C.EXCH_INSTR_CODE,B.CLN_EXCH_MAP_CODE,SCRIP_GRP ;

		/* ISKB-1721: ASHISH 20-08-2008 End */

		printf("\n chr_l_rec_count_header -1- --  |%s|",chr_l_rec_count_header);

		strcpy(chr_l_rpt_header,"01,"); // putting the record type
		strcat(chr_l_rpt_header,"CLEP,"); // putting the file type
		strcat(chr_l_rpt_header,"C,"); // putting the Member Type 
		strcat(chr_l_rpt_header,chr_l_member_id); // putting the Member Code
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_sysdate);  //putting Batch Date 
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_batch_seq_num); // putting the bath number
		strcat(chr_l_rpt_header,",");
		strcat(chr_l_rpt_header,chr_l_rec_count_header); // putting the number records

		printf("\n chr_l_rpt_header -1- --  |%s|",chr_l_rpt_header);
		sprintf(chr_g_log_buff,"Report header -- |%s| \n",chr_l_rpt_header);
	    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

		// Writing the rpt header in file
		fprintf(l_ptr_rep_file,"%s\n",chr_l_rpt_header);
	// Constructing the report header  --End

	// Cursor for fetching the report data  -- start
	/* ISKB-4678: VILIN 15-02-2011 Start */
	/* KOTAK UAT issue, payinday check has been removed */
	/* D.PAY_IN_DAY = :chr_l_early_payindays */
	
	Alert("PPD: 33333 ");
			
	
	EXEC SQL DECLARE cur_security_nse CURSOR FOR
		SELECT COL1,COL2,COL3,COL4,COL6,COL7,COL8,COL9 // added for kotak ISKB_11804
		FROM
		 (
			SELECT 
			'20' AS COL1,
			C.EXCH_INSTR_CODE AS COL2,
			C.SCRIP_GRP  AS COL3,
			B.CLN_EXCH_MAP_CODE  AS COL4,
			B.CLN_EXCH_MAP_CODE  AS COL5,
			DECODE(A.MKT_TYPE,'56','6','55','5','49','M','50','Z')  AS COL6,
			A.SETTLEMENT_NO  AS COL7,
			SUM(A.QTY)  AS COL8,
                        sysdate as COL9
			FROM DL_DEAL A,MT_CLI_EXCH_MAP B, MT_INSTR_EXCH_DET C
			WHERE
				// A.DEAL_STAT  IN ('CC','SS','MS','CS') AND
				 A.DEAL_STAT='CC' AND // Added by Pankaj Deshpande 
				A.DEAL_CD = '3' AND
				A.DL_CLASS = '1' AND
				A.CLH_FLG = 'C' AND
				A.CLIENT = B.CLN_CODE AND
				A.MKT_TYPE IN ('55','56','49','50') AND
				A.EXCH_CODE = B.CLN_EXCH_CODE AND
				A.INSTR_CODE = C.INSTR_CODE AND
				A.EXCH_CODE = C.EXCH_CODE AND
				(A.MKT_TYPE = C.MKT_TYPE or A.MKT_TYPE = decode(C.MKT_TYPE,'49','55',C.MKT_TYPE)) AND
				A.SETTLEMENT_NO IN (:p_settlment_no,:p_settlment_no1)  AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date
				AND ((A.INTERFII_FLG = 'Y' AND SCRIP_GRP = 'IL') OR (NVL(A.INTERFII_FLG,'N') != 'Y' AND SCRIP_GRP != 'IL'))
				/* ISKB-1721: ASHISH 20-08-2008 End */
                                AND A.CLIENT||A.IDENTIY_NO not in (
				SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA')
			GROUP BY A.SETTLEMENT_NO,A.MKT_TYPE,C.EXCH_INSTR_CODE,B.CLN_EXCH_MAP_CODE,SCRIP_GRP
			/* ISKB-4678: VILIN 15-02-2011 End  */
		  ) ;

	// opening the cursor
	EXEC SQL OPEN cur_security_nse;
	CO_ProcMonitor(g_flogfile,"Opened Cursor cur_bse_fund",NULL,NULL);

	IS_ANY_ORA_ERROR
 if(strcmp(p_settlment_no,APL_NULL_STRING) == 0) 
  {
   printf("if loop");	  
        
	EXEC SQL DELETE FROM EARLY_PAYIN_RPT
	WHERE SETTL_NO =(select SETTL_NO FROM mt_settl_cal
	WHERE TO_CHAR(TO_DATE(START_DATE),'dd/mm/yyyy') = TO_CHAR (to_date(:p_deal_date),'dd/mm/yyyy')
	AND  EXCH_CODE= 'NSE'
    AND SETTL_TYPE IN ('55','49'))
	AND EXCH_CD = 'NSE';
	
	IS_ANY_ORA_ERROR
	printf("after deleted ");
 }
else 
{
	printf("else loop");
	
	EXEC SQL DELETE FROM EARLY_PAYIN_RPT
	WHERE SETTL_NO =:p_settlment_no
	AND EXCH_CD = 'NSE';
	IS_ANY_ORA_ERROR
	printf("\n Deleted records from EARLY_PAYIN_RPT for SETTL_NO [%s]",p_settlment_no);
	
}

	// Processing the cursor data -- (Printing the data into file)
	for(;;)
	{
		memset(chr_l_record_row, APL_NULL_CHAR, sizeof(chr_l_record_row));
		memset(char_set_typ_no, APL_NULL_CHAR, sizeof(char_set_typ_no));
		memset(char_exch_instr_cd, APL_NULL_CHAR, sizeof(char_exch_instr_cd));
		memset(char_script_cd, APL_NULL_CHAR, sizeof(char_script_cd));
		memset(char_cln_exch_map, APL_NULL_CHAR, sizeof(char_cln_exch_map));
		memset(char_mkt_typ, APL_NULL_CHAR, sizeof(char_mkt_typ));
		memset(char_settl_no, APL_NULL_CHAR, sizeof(char_settl_no));
		memset(char_qty, APL_NULL_CHAR, sizeof(char_qty));
		memset(chr_sysdate, APL_NULL_CHAR, sizeof(chr_sysdate));
		
		EXEC SQL FETCH cur_security_nse INTO :char_set_typ_no,:char_exch_instr_cd,:char_script_cd,:char_cln_exch_map,:char_mkt_typ , :char_settl_no,:char_qty,:chr_sysdate;
	
	printf("\n settlement No [%s]",char_settl_no);	
		sprintf(chr_g_log_buff,"Fetched cur_bse_fund sqlca.sqlcode is :%d:",sqlca.sqlcode);
		CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);
		IS_ANY_ORA_ERROR_CURSOR

		strcat(chr_l_record_row,char_set_typ_no); 
		strcat(chr_l_record_row,",");
		strcat(chr_l_record_row,char_exch_instr_cd);
		strcat(chr_l_record_row,",");
		strcat(chr_l_record_row,char_script_cd);
		strcat(chr_l_record_row,",");
		strcat(chr_l_record_row,char_cln_exch_map);
		strcat(chr_l_record_row,",");
		strcat(chr_l_record_row,char_cln_exch_map);
		strcat(chr_l_record_row,",");
		strcat(chr_l_record_row,char_mkt_typ);
		strcat(chr_l_record_row,",");
		strcat(chr_l_record_row,char_settl_no);
		strcat(chr_l_record_row,",");
		strcat(chr_l_record_row,char_qty);
		
		// Writing to report file
		fprintf(l_ptr_rep_file,"%s\n",chr_l_record_row);

		if (sqlca.sqlcode == 1403)
		{
            CO_ProcMonitor(g_flogfile,"No more Records ",NULL,NULL);
            EXEC SQL CLOSE cur_security_nse;
            APL_GOBACK_SUCCESS;
		}
		
		/*Changes done for Early Payin Recon by Simar start*/
		strcpy(char_status,"AA");
		if( Early_Payin_Rpt_Insert(chr_l_batch_num,chr_l_rep_name,temp[0],char_settl_no,temp[1],
								   chr_l_rep_Path,char_exch_instr_cd,char_script_cd,char_cln_exch_map,
								  char_mkt_typ,char_qty ,chr_sysdate,char_status,g_flogfile,l_debug_info_ptr)   ==  APL_FAILURE )
		{
			CO_ProcMonitor(g_flogfile, "Returned from Early_Payin_Rpt_Insert() with failure", l_debug_info_ptr, NULL);
			APL_GOBACK_FAIL
		}
	 	else
		{
			
			if( Early_Payin_Alloc_Delete(char_settl_no,char_exch_instr_cd,char_script_cd,char_cln_exch_map,char_qty ,chr_sysdate,char_status,l_debug_info_ptr)   ==  APL_FAILURE )
			{
				CO_ProcMonitor(g_flogfile, "Returned from Early_Payin_Alloc_Delete() with failure", l_debug_info_ptr, NULL);
				APL_GOBACK_FAIL
			}
		} 
                /*Changes done for Early Payin recon by Simar end */
	} 
	// Cursor for fetching the report data -- End 

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:
		fclose(l_ptr_rep_file); // Closing the file.
		CO_ProcMonitor(g_flogfile, "Leaving Security_Nse() with success", l_debug_info_ptr, NULL);
		printf("\n Leaving Security_Nse() with success \n");
	return(APL_SUCCESS);

	RETURN_FAILURE:
		fclose(l_ptr_rep_file); // Closing the file.
		printf("\n Error in Security_Nse() \n");
	return(APL_FAILURE);
}



// Added By Vamshi For MCS Enhancement --Start
static int  Security_Mcs(char *p_settlment_no,char *p_deal_date,FILE *g_flogfile, DEBUG_INFO_STRUCT_H   **l_debug_info_ptr)
{
	char chr_l_sysdate[APL_DATE_LEN]  =	APL_NULL_STRING;
	char chr_l_rep_name[FILENAME_LEN_A]   = APL_NULL_STRING; 

	char chr_l_member_id[10] = APL_NULL_STRING;
	short i_l_member_id = 0;
	
	/************************T1 settlement *******************/
	
	
char chr_l_rep_Path_M[FILENAME_LEN_A+FILEPATH_LEN]   = APL_NULL_STRING;
char chr_l_rep_name_M[FILENAME_LEN_A]   = APL_NULL_STRING;

FILE  *l_ptr_rep_file_M   =  NULL; 
INTL_REPT_STRUCT_H *l_intl_rept_struct_ha_M =NULL;
l_intl_rept_struct_ha_M = (INTL_REPT_STRUCT_H *) calloc(1,sizeof(INTL_REPT_STRUCT_H));
memset(l_intl_rept_struct_ha_M,NULL,sizeof(INTL_REPT_STRUCT_H));
strcpy(chr_l_rep_Path_M,chr_l_rep_Path);
/****************************T1 settlement *************/
	
	char chr_l_record_row[600] = APL_NULL_STRING;
	short i_l_record_row = 0;

	// for report header
	char chr_l_rpt_header[100] = APL_NULL_STRING;
	char chr_l_rec_count_header[20] = APL_NULL_STRING; 

	char chr_l_batch_num[5] = APL_NULL_STRING;
	char chr_l_batch_seq_num[5] = APL_NULL_STRING;
	char chr_l_seqnum_a[10] = APL_NULL_STRING;
	int int_return_val = 0;


	//char chr_l_seq_num[5] = APL_NULL_STRING;

	FILE  *l_ptr_rep_file  =  NULL; 
	INTL_REPT_STRUCT_H   *l_intl_rept_struct_ha  =NULL;

	l_intl_rept_struct_ha = (INTL_REPT_STRUCT_H *) calloc(1,sizeof(INTL_REPT_STRUCT_H));

	PRO_GSEQNUM_STRUCT_H    l_pro_gseqno_struct_h; // For sequence (resetable sequence)

	printf("\n Entering Security_Mcs() ");
	printf("\n ** p_settlment_no **  -- |%s|",p_settlment_no);

	// For getting the member id of the bank
	EXEC SQL SELECT MAP_DESC  into :chr_l_member_id :i_l_member_id 
		FROM PRO_SGENSTAT  
			WHERE MAP_TYPE = 'MEMBER_CD' AND MAP_VAL = 'MCS' ;
	IS_ANY_ORA_ERROR
	
	printf("\n chr_l_member_id  --  |%s|",chr_l_member_id);
	sprintf(chr_g_log_buff,"Member ID -- |%s| \n",chr_l_member_id);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	// Getting the system date
	EXEC SQL SELECT to_char(SYS_DATE,'DDMMYYYY') INTO :chr_l_sysdate FROM PRO_SYS_DATE;
	IS_ANY_ORA_ERROR

	printf("\n chr_l_sysdate  --  |%s|",chr_l_sysdate);
	sprintf(chr_g_log_buff,"System date -- |%s| \n",chr_l_sysdate);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	// preparing structure for getting the sequence value from a reset able sequence 
	memset(&l_pro_gseqno_struct_h,NULL, sizeof(l_pro_gseqno_struct_h));
	strcpy(l_pro_gseqno_struct_h.sequencename, "EPR_MCS_SECURITY");
	strcpy(l_pro_gseqno_struct_h.seq_attrb_a, APL_NULL_STRING);
	strcpy(l_pro_gseqno_struct_h.seq_attrb_b, APL_NULL_STRING);
	strcpy(l_pro_gseqno_struct_h.seq_attrb_c, APL_NULL_STRING);

	l_pro_gseqno_struct_h.seq_stepby = 1;
	l_pro_gseqno_struct_h.seq_start = 1;
	l_pro_gseqno_struct_h.last_seqnum = 1000;
	l_pro_gseqno_struct_h.recycle_ind = RECYCLE_EOD;

	// geting the sequence number (we have used this function because we want to reset the sequence at EOD)
	//int_return_val = CO_RtvNxtSeqNum(&l_pro_gseqno_struct_h,l_debug_info_ptr); // Commented by Tarkeshwar for settlement no issue fix

	int_return_val = getEP_FileNameCNT_Securities("MCX-SX-EQ_SEPI_",chr_l_sysdate); // Tarkeshwar
		if (int_return_val != APL_FAILURE)
		sprintf(chr_l_seqnum_a,"%d",int_return_val);
	else
		APL_GOBACK_FAIL

	strcpy(chr_l_batch_num,chr_l_seqnum_a); 

	printf("\n chr_l_batch_num -1- --  |%s|",chr_l_batch_num);
	// constructing the sequence number (should be of length 2) for file name 
	if (strlen(chr_l_batch_num) == 1)
	{
		strcpy(chr_l_batch_seq_num,"0");
		strcat(chr_l_batch_seq_num,chr_l_batch_num);
	}
	else // having of length 2
	{
		strcpy(chr_l_batch_seq_num,chr_l_batch_num);
	}

	printf("\n chr_l_seq_num -2- --  |%s|",chr_l_batch_seq_num);
	sprintf(chr_g_log_buff,"Sequence Number -- |%s| \n",chr_l_batch_seq_num);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);





if(strlen(p_settlment_no) == 0)
        {
printf("inside if loop");
			EXEC SQL select SETTL_NO INTO :sett_no1 FROM mt_settl_cal
			WHERE TO_CHAR(TO_DATE(START_DATE),'dd/mm/yyyy') = TO_CHAR (to_date(:p_deal_date),'dd/mm/yyyy')
			AND  EXCH_CODE= 'MCS'
			AND SETTL_TYPE ='1';
			IS_ANY_ORA_ERROR

			EXEC SQL select SETTL_NO INTO :sett_no2 FROM mt_settl_cal
			WHERE TO_CHAR(TO_DATE(START_DATE),'dd/mm/yyyy') = TO_CHAR (to_date(:p_deal_date),'dd/mm/yyyy')
			AND  EXCH_CODE= 'MCS'
			AND SETTL_TYPE ='23';
			IS_ANY_ORA_ERROR

strcpy(p_settlment_no,sett_no1);
strcpy(p_settlment_no1,sett_no2);
		}
					

printf("settle number [%s]",p_settlment_no );

printf("settle number [%s]",p_settlment_no1 );

	// Constructing file name 
	strcat(chr_l_rep_name,"MCX-SX-EQ_SEPI_");
	strcat(chr_l_rep_name,chr_l_member_id);
	strcat(chr_l_rep_name,"_");
	strcat(chr_l_rep_name,chr_l_sysdate);
	strcat(chr_l_rep_name,".T");
	strcat(chr_l_rep_name,chr_l_batch_seq_num); //The batch number of file to be uploaded

	printf("\n Report Name --  |%s|",chr_l_rep_name);
	sprintf(chr_g_log_buff,"Report Name -- |%s| \n",chr_l_rep_name);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	strcat(chr_l_rep_Path,chr_l_rep_name); // forming final path with report name

	printf("\n Final Report Name with path --  |%s|",chr_l_rep_Path);
	sprintf(chr_g_log_buff,"Report Name -- |%s| \n",chr_l_rep_Path);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	// For opening the file in write mode
	if ((l_ptr_rep_file = fopen(chr_l_rep_Path,"w")) == NULL)
   		return(APL_FAILURE);

	// setting the memory for report structure that will b used to access the file in batch monitor
	memset(l_intl_rept_struct_ha,NULL,sizeof(INTL_REPT_STRUCT_H));

	strcpy(l_intl_rept_struct_ha->report_name,chr_l_rep_name);
   	strcpy(l_intl_rept_struct_ha->report_desc, "Early Pay in Report");
   	strcpy(l_intl_rept_struct_ha->report_date, l_date);
   	l_intl_rept_struct_ha->report_width = 100;
   	strcpy(l_intl_rept_struct_ha->task_desc, "EarlyPyinRpt");
   	strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
   	strcpy(l_intl_rept_struct_ha->usr, l_user);

	if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))
        APL_GOBACK_FAIL

	// Constructing the report header  --Start
		// Getting the system date
		EXEC SQL SELECT to_char(SYS_DATE,'DDMMYYYY') INTO :chr_l_sysdate FROM PRO_SYS_DATE;
		IS_ANY_ORA_ERROR

		printf("\n chr_l_sysdate -header-  --  |%s|",chr_l_sysdate);	
		
		Alert("PPD: 4444 ");
		
		EXEC SQL  SELECT count(COUNT(*)) into :chr_l_rec_count_header
			FROM DL_DEAL A,MT_CLI_EXCH_MAP B, MT_INSTR_EXCH_DET C 
			WHERE 
				//A.DEAL_STAT  IN ('CC','SS','MS','CS') AND
				 A.DEAL_STAT='CC' AND // Added by Pankaj Deshpande 
				A.DEAL_CD = '3' AND
				A.DL_CLASS = '1' AND
				A.CLH_FLG = 'C' AND
				A.MKT_TYPE IN ('01','03') AND 
				A.CLIENT = B.CLN_CODE AND
				A.EXCH_CODE = B.CLN_EXCH_CODE AND
				A.INSTR_CODE = C.INSTR_CODE AND
				A.EXCH_CODE = C.EXCH_CODE AND
				A.MKT_TYPE = C.MKT_TYPE AND
				A.SETTLEMENT_NO IN (:p_settlment_no , :p_settlment_no1) AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date
				AND ((A.INTERFII_FLG = 'Y' AND SCRIP_GRP = 'IL') OR (NVL(A.INTERFII_FLG,'N') != 'Y' AND SCRIP_GRP != 'IL')) AND
                                A.CLIENT||A.IDENTIY_NO not in (
				SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA')
				GROUP BY A.SETTLEMENT_NO,A.MKT_TYPE,C.EXCH_INSTR_CODE,B.CLN_EXCH_MAP_CODE,SCRIP_GRP ;

		/* ISKB-1721: ASHISH 20-08-2008 End */

		printf("\n chr_l_rec_count_header -1- --  |%s|",chr_l_rec_count_header);

		//strcpy(chr_l_rpt_header,"10,"); // putting the record type
		//strcat(chr_l_rpt_header,"CLEP,"); // putting the file type
		//strcat(chr_l_rpt_header,"C,"); // putting the Member Type 
	/* By Harvinder Singh -- 27/05/2008 -- for getting the member code from data base */
		/* strcat(chr_l_rpt_header,"HDFC,"); // putting the Member Code */
		//strcat(chr_l_rpt_header,chr_l_member_id); // putting the Member Code
		//strcat(chr_l_rpt_header,",");
		//strcat(chr_l_rpt_header,chr_l_sysdate);  //putting Batch Date 
		//strcat(chr_l_rpt_header,",");
		//strcat(chr_l_rpt_header,chr_l_batch_seq_num); // putting the bath number
		//strcat(chr_l_rpt_header,",");
		//strcat(chr_l_rpt_header,chr_l_rec_count_header); // putting the number records

		//printf("\n chr_l_rpt_header -1- --  |%s|",chr_l_rpt_header);
		//sprintf(chr_g_log_buff,"Report header -- |%s| \n",chr_l_rpt_header);
	    //CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

		// Writing the rpt header in file
		//fprintf(l_ptr_rep_file,"%s\n",chr_l_rpt_header);
	// Constructing the report header  --End

	// Cursor for fetching the report data  -- start
	
	Alert("PPD: 55555 ");
	
	EXEC SQL DECLARE cur_security_mcs CURSOR FOR
		SELECT COL1||','||COL2||','||COL3||','||COL4||','||COL5||','||COL6||','||COL7
		FROM
		 (
			SELECT 
			B.CLN_EXCH_MAP_CODE as COL1,
			'C' as COL2,
			C.EXCH_INSTR_CODE as COL5,
			C.SCRIP_GRP  AS COL6,
			DECODE(a.MKT_TYPE,'01','N','03','W','23','M','24','Z')  as COL3,
			A.SETTLEMENT_NO  AS COL4,
			SUM(A.QTY)  AS COL7
			FROM DL_DEAL A,MT_CLI_EXCH_MAP B, MT_INSTR_EXCH_DET C
			WHERE
				// A.DEAL_STAT  IN ('CC','SS','MS','CS') AND
				 A.DEAL_STAT='CC' AND // Added by Pankaj Deshpande 
				A.DEAL_CD = '3' AND
				A.DL_CLASS = '1' AND
				A.CLH_FLG = 'C' AND
				A.CLIENT = B.CLN_CODE AND
				A.MKT_TYPE IN ('01','03','23','24') AND
				A.EXCH_CODE = B.CLN_EXCH_CODE AND
				A.INSTR_CODE = C.INSTR_CODE AND
				A.EXCH_CODE = C.EXCH_CODE AND
				A.MKT_TYPE = C.MKT_TYPE AND
				A.SETTLEMENT_NO IN (:p_settlment_no  ,:p_settlment_no1) AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date
				AND ((A.INTERFII_FLG = 'Y' AND SCRIP_GRP = 'IL') OR (NVL(A.INTERFII_FLG,'N') != 'Y' AND SCRIP_GRP != 'IL'))
                                AND A.CLIENT||A.IDENTIY_NO not in (
				SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA')
			GROUP BY A.SETTLEMENT_NO,A.MKT_TYPE,C.EXCH_INSTR_CODE,B.CLN_EXCH_MAP_CODE,SCRIP_GRP
		  ) ;

	// opening the cursor
	EXEC SQL OPEN cur_security_mcs;
	CO_ProcMonitor(g_flogfile,"Opened Cursor cur_mcs_fund",NULL,NULL);

	IS_ANY_ORA_ERROR

	// Processing the cursor data -- (Printing the data into file)
	for(;;)
	{
		EXEC SQL FETCH cur_security_mcs INTO :chr_l_record_row:i_l_record_row;
												  
		sprintf(chr_g_log_buff,"Fetched cur_mcs_fund sqlca.sqlcode is :%d:",sqlca.sqlcode);
		CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);
		IS_ANY_ORA_ERROR_CURSOR

		// Writing to report file
		fprintf(l_ptr_rep_file,"%s\n",chr_l_record_row);

		if (sqlca.sqlcode == 1403)
		{
            CO_ProcMonitor(g_flogfile,"No more Records ",NULL,NULL);
            EXEC SQL CLOSE cur_security_mcs;
            APL_GOBACK_SUCCESS;
		}
	} 
	// Cursor for fetching the report data -- End 


	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:
		fclose(l_ptr_rep_file); // Closing the file.
		fclose(l_ptr_rep_file_M);
		CO_ProcMonitor(g_flogfile, "Leaving Security_Mcs() with success", l_debug_info_ptr, NULL);
		printf("\n Leaving Security_Mcs() with success \n");
	return(APL_SUCCESS);

	RETURN_FAILURE:
		fclose(l_ptr_rep_file); // Closing the file.
		fclose(l_ptr_rep_file_M);
		printf("\n Error in Security_Mcs() \n");
	return(APL_FAILURE);
}

// Added By Vamshi For MCS Enhancement --End
/*************************************************************************************************
* Function name : Fund_Bse_New_Format()                                                          *
* Description   : It generates new format of BSE fund report                                     *
* Author        : ASHISH                                                                         *
* Date          : 27-08-2008                                                                     *
* Issue         : ISKB-1721                                                                      *
*************************************************************************************************/


static int  Fund_Bse_New_Format(char *p_settlment_no,char *p_deal_date,FILE *g_flogfile, DEBUG_INFO_STRUCT_H   **l_debug_info_ptr)
{
	char chr_l_sysdate[APL_DATE_LEN]  =	APL_NULL_STRING;
	char chr_l_rep_name[FILENAME_LEN_A]   = APL_NULL_STRING; 
   	
	char chr_l_member_id[10] = APL_NULL_STRING;
	short i_l_member_id = 0;
	
/****************T1 settlement ***********/
	
char chr_l_rep_Path_M[FILENAME_LEN_A+FILEPATH_LEN]   = APL_NULL_STRING;
char chr_l_rep_name_M[FILENAME_LEN_A]   = APL_NULL_STRING;

FILE  *l_ptr_rep_file_M   =  NULL; 
INTL_REPT_STRUCT_H *l_intl_rept_struct_ha_M =NULL;
l_intl_rept_struct_ha_M = (INTL_REPT_STRUCT_H *) calloc(1,sizeof(INTL_REPT_STRUCT_H));
memset(l_intl_rept_struct_ha_M,NULL,sizeof(INTL_REPT_STRUCT_H));
strcpy(chr_l_rep_Path_M,chr_l_rep_Path);


char chr_l_rep_Path_P[FILENAME_LEN_A+FILEPATH_LEN]   = APL_NULL_STRING;
char chr_l_rep_name_P[FILENAME_LEN_A]   = APL_NULL_STRING;

FILE  *l_ptr_rep_file_P   =  NULL; 
INTL_REPT_STRUCT_H *l_intl_rept_struct_ha_P =NULL;
l_intl_rept_struct_ha_P = (INTL_REPT_STRUCT_H *) calloc(1,sizeof(INTL_REPT_STRUCT_H));
memset(l_intl_rept_struct_ha_P,NULL,sizeof(INTL_REPT_STRUCT_H));
strcpy(chr_l_rep_Path_P,chr_l_rep_Path);
/******************* T1 settlement *****************/
	
	char chr_l_seq_num[5] = APL_NULL_STRING;
	char chr_l_temp_seq_num[5] = APL_NULL_STRING;

	char chr_l_record_row[600] = APL_NULL_STRING;
	short i_l_record_row = 0;

	int int_return_val=0;
	char chr_l_seqnum_a[10] = APL_NULL_STRING;
	int counter=0; /* 12174 - Interoperability changes */

	FILE  *l_ptr_rep_file  =  NULL; 
	INTL_REPT_STRUCT_H   *l_intl_rept_struct_ha  =NULL;

	PRO_GSEQNUM_STRUCT_H    l_pro_gseqno_struct_h; // For sequence (resetable sequence)

	l_intl_rept_struct_ha = (INTL_REPT_STRUCT_H *) calloc(1,sizeof(INTL_REPT_STRUCT_H));

	printf("\n Entering Fund_Bse_New_Format() ");
	printf("\n ** p_settlment_no **  -- |%s|",p_settlment_no);

	// Getting the system date
	/* EXEC SQL SELECT to_char(SYS_DATE,'DDMMYY') INTO :chr_l_sysdate FROM PRO_SYS_DATE; */
	EXEC SQL SELECT to_char(SYS_DATE,'DDMMYYYY') INTO :chr_l_sysdate FROM PRO_SYS_DATE;   /* 12174 - Interoperability changes */
	IS_ANY_ORA_ERROR

	printf("\n chr_l_sysdate  --  |%s|",chr_l_sysdate);
	sprintf(chr_g_log_buff,"System date -- |%s| \n",chr_l_sysdate);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	// For getting the member id of the bank
         /* 12174 - Interoperability changes */
	/* EXEC SQL SELECT MAP_DESC  into :chr_l_member_id :i_l_member_id 
		FROM PRO_SGENSTAT  
			WHERE MAP_TYPE = 'MEMBER_ID' AND MAP_VAL = 'BSE' ; */
	   EXEC SQL SELECT DECODE(LENGTH(MAP_DESC),3,LPAD(MAP_DESC,4,0),MAP_DESC)  
	   into :chr_l_member_id :i_l_member_id           
		FROM PRO_SGENSTAT  
			WHERE MAP_TYPE = 'MEMBER_ID' AND MAP_VAL = 'BSE' ;
        /* 12174 - Interoperability changes */
	IS_ANY_ORA_ERROR
	
	
	printf("\n chr_l_member_id  --  |%s|",chr_l_member_id);
	sprintf(chr_g_log_buff,"Member ID -- |%s| \n",chr_l_member_id);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	// preparing structure for getting the sequence value from a reset able sequence 
	strcpy(l_pro_gseqno_struct_h.sequencename, "EARLYPYINRPT_BSE");
	strcpy(l_pro_gseqno_struct_h.seq_attrb_a, APL_NULL_STRING);
	strcpy(l_pro_gseqno_struct_h.seq_attrb_b, APL_NULL_STRING);
	strcpy(l_pro_gseqno_struct_h.seq_attrb_c, APL_NULL_STRING);

	l_pro_gseqno_struct_h.seq_stepby = 1;
	l_pro_gseqno_struct_h.seq_start = 1;
	l_pro_gseqno_struct_h.last_seqnum = 999;
	l_pro_gseqno_struct_h.recycle_ind = RECYCLE_EOD;

	// geting the sequence number (we have used this function because we want to reset the sequence at EOD)
	int_return_val = CO_RtvNxtSeqNum(&l_pro_gseqno_struct_h,l_debug_info_ptr); 

	if (int_return_val != APL_FAILURE)
		sprintf(chr_l_seqnum_a,"%d",int_return_val);
	else
		APL_GOBACK_FAIL

	strcpy(chr_l_seq_num,chr_l_seqnum_a); 

	printf("\n chr_l_seq_num -1- --  |%s|",chr_l_seq_num);
	// constructing the sequence number (should be of length 3) for file name 
	if (strlen(chr_l_seq_num) == 1)
	{
		strcpy(chr_l_temp_seq_num,"00");
		strcat(chr_l_temp_seq_num,chr_l_seq_num);
	}
	else if (strlen(chr_l_seq_num) == 2)
	{
		strcpy(chr_l_temp_seq_num,"0");
		strcat(chr_l_temp_seq_num,chr_l_seq_num);
	}
	else // having of length 3
	{
		strcpy(chr_l_temp_seq_num,chr_l_seq_num);
	}

	printf("\n chr_l_seq_num -2- --  |%s|",chr_l_temp_seq_num);
	sprintf(chr_g_log_buff,"Sequence Number -- |%s| \n",chr_l_temp_seq_num);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);




if(strlen(p_settlment_no) == 0)
        {
printf("inside if loop");
			EXEC SQL select SETTL_NO INTO :sett_no1 FROM mt_settl_cal
			WHERE TO_CHAR(TO_DATE(START_DATE),'dd/mm/yyyy') = TO_CHAR (to_date(:p_deal_date),'dd/mm/yyyy')
			AND  EXCH_CODE= 'BSE'
			AND SETTL_TYPE ='45';
			IS_ANY_ORA_ERROR

			EXEC SQL select SETTL_NO INTO :sett_no2 FROM mt_settl_cal
			WHERE TO_CHAR(TO_DATE(START_DATE),'dd/mm/yyyy') = TO_CHAR (to_date(:p_deal_date),'dd/mm/yyyy')
			AND  EXCH_CODE= 'BSE'
			AND SETTL_TYPE ='41';
			IS_ANY_ORA_ERROR

strcpy(p_settlment_no,sett_no1);
strcpy(p_settlment_no1,sett_no2);

		}
					

printf("settle number [%s]",p_settlment_no );

printf("settle number [%s]",p_settlment_no1 );

	// Constructing file name 
	strcat(chr_l_rep_name,"EPF");
	/* strcat(chr_l_rep_name,p_settlment_no); */ /* 12174 - Interoperability changes */
	strcat(chr_l_rep_name,chr_l_sysdate);  /* 12174 - Interoperability changes */
	strcat(chr_l_rep_name,"_");    /* 12174 - Interoperability changes */
	strcat(chr_l_rep_name,chr_l_member_id);
    /* strcat(chr_l_rep_name,"EPF"); */
	strcat(chr_l_rep_name,".csv");    /* 12174 - Interoperability changes */
	
	printf("\n Report Name --  |%s|",chr_l_rep_name);
	sprintf(chr_g_log_buff,"Report Name -- |%s| \n",chr_l_rep_name);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	strcat(chr_l_rep_Path,chr_l_rep_name); // forming final path with report name

	printf("\n Final Report Name and path --  |%s|",chr_l_rep_Path);
	sprintf(chr_g_log_buff," Final Report Name and path -- |%s| \n",chr_l_rep_Path);
    CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);

	// For opening the file in write mode
	if ((l_ptr_rep_file = fopen(chr_l_rep_Path,"w")) == NULL)
   		return(APL_FAILURE);

	// setting the memory for report structure that will b used to access the file in batch monitor
	memset(l_intl_rept_struct_ha,NULL,sizeof(INTL_REPT_STRUCT_H));

	strcpy(l_intl_rept_struct_ha->report_name,chr_l_rep_name);
   	strcpy(l_intl_rept_struct_ha->report_desc, "Early Pay in Report");
   	strcpy(l_intl_rept_struct_ha->report_date, l_date);
   	l_intl_rept_struct_ha->report_width = 100;
   	strcpy(l_intl_rept_struct_ha->task_desc, "EarlyPyinRpt");
   	strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
   	strcpy(l_intl_rept_struct_ha->usr, l_user);

	if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))
        APL_GOBACK_FAIL

		
		EXEC SQL DECLARE cur_bse_fund_new CURSOR FOR
		SELECT COL1
		FROM 
		(	
			(SELECT 'B' AS COL0,
			:chr_l_member_id||','||B.CLN_EXCH_MAP_CODE||','||
			REPLACE(TRIM(SUM(NVL(A.AMOUNT,0) - NVL(AMT_DIFFER,0))),'.','')||','||SUBSTR(A.SETTLEMENT_NO,5,3)||','||','  AS COL1 /*CS0028550 : InterOperability 2 -  amt_differ changes*/                 
			FROM DL_DEAL A,MT_CLI_EXCH_MAP B
			WHERE A.CLIENT = B.CLN_CODE AND
				A.EXCH_CODE = B.CLN_EXCH_CODE AND
				A.DEAL_STAT IN ('CC','SS','MS','CS') AND 
				A.DEAL_CD = '4' AND
				A.DL_CLASS = '1' AND
				A.CLH_FLG = 'C' AND
				A.MKT_TYPE IN ('45','57','41','17') AND
				A.SETTLEMENT_NO IN (:p_settlment_no ,:p_settlment_no1) AND TO_CHAR(TO_DATE(A.deal_date),'dd/mm/yyyy') LIKE :p_deal_date AND
                (GETCLIENTPARAMBYID('EARLY_PAYIN_FND',A.CLIENT))= 'Y' AND
				A.CLIENT||A.IDENTIY_NO not in (
				SELECT CLIENT||IDENTIY_NO FROM DL_EARLYPAYIN_DET WHERE STATUS = 'AA')
				GROUP BY B.CLN_EXCH_MAP_CODE,A.SETTLEMENT_NO)
				)ORDER BY COL0 ;
			
		
		
	/*Modified by siva.ganapathi for ISKB_2221 on 3/5/2009 -- Ended*/


 
	EXEC SQL OPEN cur_bse_fund_new;
	CO_ProcMonitor(g_flogfile,"Opened Cursor cur_bse_fund_new",NULL,NULL);

	IS_ANY_ORA_ERROR

	for(;;)
	{
		EXEC SQL FETCH cur_bse_fund_new INTO :chr_l_record_row:i_l_record_row;
												  
		sprintf(chr_g_log_buff,"Fetched cur_bse_fund_new sqlca.sqlcode is :%d:",sqlca.sqlcode);
		CO_ProcMonitor(g_flogfile,chr_g_log_buff,NULL,NULL);
		IS_ANY_ORA_ERROR_CURSOR

		/* 12174 - Interoperability changes */
		//fprintf(l_ptr_rep_file,"%s\n",chr_l_record_row);
		if(counter == 0)
		{
			fprintf(l_ptr_rep_file,"%s",chr_l_record_row); 
			counter++;
		}
		else
		{
			fprintf(l_ptr_rep_file,"\n%s",chr_l_record_row);	
		}

		if (sqlca.sqlcode == 1403)
		{
            CO_ProcMonitor(g_flogfile,"No more Records ",NULL,NULL);
            EXEC SQL CLOSE cur_bse_fund_new;
            APL_GOBACK_SUCCESS;
		}
		
	} 

	


  	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:
		fclose(l_ptr_rep_file); // Closing the file.
		fclose(l_ptr_rep_file_M); // T1 settlement 
          

		CO_ProcMonitor(g_flogfile, "Leaving Fund_Bse_New_Format() with success", l_debug_info_ptr, NULL);
		printf("\n Leaving Fund_Bse_New_Format() with success \n");
	return(APL_SUCCESS);
	
	RETURN_FAILURE:
		fclose(l_ptr_rep_file); // Closing the file.
		fclose(l_ptr_rep_file_M); // T1 settlement 
         

		printf("\n Error in Fund_Bse_New_Format() \n");
	return(APL_FAILURE);
}

// Tarkeshwar defined the function for sequence no issue fix STARTS 
int getEP_FileNameCNT_Funds(char *sSettlNo, char *sFileName)
{
	DIR *dp;
	struct dirent *ep;
	int iSeqCtr=0;
	FILE *l_init_file = (FILE *)NULL;
	char sReptPath[300] = APL_NULL_STRING;
	DEBUG_INFO_STRUCT_H **l_debug_info_ptr;

	//dp = opendir ("/usr15/SIR05448/mydomain/installedApps/PSLAIX05Node42Cell/ICUSTODY.ear/ICUSTODY.war/Reports/");
	
	memset(sReptPath,0,300);
	
	strcpy(sReptPath,getenv("INTL_ROOT_PATH"));
	strcat(sReptPath,"intl_sun.cfg");
   printf("\nsReptPath:[%s]",sReptPath); // Tarkeshwar	
	if ((l_init_file = fopen(sReptPath,"r")) == (FILE *)NULL)
	{
                printf("Failed to Open file for PATH :[%s]\n",sReptPath);
                APL_GOBACK_FAIL
	}
	printf("\nl_init_file:::[%s]",l_init_file);
   printf("\nfile name [%s]",sReptPath);
   if (APL_FAILURE == CO_ReadToken(l_init_file,"INTL_REP_PATH",sReptPath,l_debug_info_ptr))
   {
	  printf("Error : INTL_CUST_OUT not set in intl_sun.cfg File \n");
          APL_GOBACK_FAIL
   }

   Alert("\nsReptPath:::::[%s]\n\n",sReptPath);

   printf("\nGot the settlement no: [%s]",sSettlNo);
	//sPath = getenv(); // Get the reports path from the environment variable defined in the .profile file
	dp = opendir(sReptPath);
	if (dp != NULL)
	{
		while (ep = readdir (dp))
		{
			if(((strstr(ep->d_name,sFileName)) != NULL) && ((strstr(ep->d_name,sSettlNo)) != NULL))
			{
				//puts (ep->d_name);
				iSeqCtr++; //Increment the counter with presence of the file.
			}
		}
	   printf("\nNext sequence is %d\n\n",iSeqCtr + 1);
		(void) closedir (dp);
	}
	else
		perror ("Couldn't open the directory");
	fclose(l_init_file);
	RETURN_SUCCESS:
		return(iSeqCtr+1);
	RETURN_FAILURE:
		return(APL_FAILURE);
}
// Tarkeshwar defined the function for sequence no issue fix ENDS


// Tarkeshwar defined the function for sequence no issue fix STARTS 
int getEP_FileNameCNT_Securities(char *sFileName, char *sBsnsDate)
{
	DIR *dp;
	struct dirent *ep;
	int iSeqCtr=0;
	FILE *l_init_file = (FILE *)NULL;
	char sReptPath[300] = APL_NULL_STRING;
	DEBUG_INFO_STRUCT_H **l_debug_info_ptr;

	//dp = opendir ("/usr15/SIR05448/mydomain/installedApps/PSLAIX05Node42Cell/ICUSTODY.ear/ICUSTODY.war/Reports/");
	
	memset(sReptPath,0,300);
	
	strcpy(sReptPath,getenv("INTL_ROOT_PATH"));
	strcat(sReptPath,"intl_sun.cfg");
   printf("\nTK::: 2955 sReptPath:[%s]",sReptPath); // Tarkeshwar	
	if ((l_init_file = fopen(sReptPath,"r")) == (FILE *)NULL)
	{
                printf("Failed to Open file for PATH :[%s]\n",sReptPath);
                APL_GOBACK_FAIL
	}
	printf("\nl_init_file:::[%s]",l_init_file);
   printf("\nfile name [%s]",sReptPath);
	printf("\nBusiness Date : [%s]\n",sBsnsDate);
   if (APL_FAILURE == CO_ReadToken(l_init_file,"INTL_REP_PATH",sReptPath,l_debug_info_ptr))
   {
	  printf("Error : INTL_CUST_OUT not set in intl_sun.cfg File \n");
          APL_GOBACK_FAIL
   }

   Alert("\nTK::::2968 sReptPath:::::[%s]\n\n",sReptPath);

	//sPath = getenv(); // Get the reports path from the environment variable defined in the .profile file

	dp = opendir(sReptPath);
	if (dp != NULL)
	{
		while (ep = readdir (dp))
		{
			if(((strstr(ep->d_name,sFileName)) != NULL) && ((strstr(ep->d_name,sBsnsDate)) != NULL))
			{
				//puts (ep->d_name);
				iSeqCtr++; //Increment the counter with presence of the file.
			}
		}
	   printf("\nNext sequence is %d\n\n",iSeqCtr + 1);
		(void) closedir (dp);
	}
	else
		perror ("Couldn't open the directory");
	fclose(l_init_file);
	RETURN_SUCCESS:
		return(iSeqCtr+1);
	RETURN_FAILURE:
		return(APL_FAILURE);
}
// Tarkeshwar defined the function for sequence no issue fix ENDS

//Changes done for Early Payin Recon by Simar starts
 int Early_Payin_Rpt_Insert(char *chr_l_temp_seq_num,
		char *chr_l_rep_name,char *chr_l_rpt_type,char *p_settlment_no,char *chr_l_exch_code,
		char *chr_l_rep_Path,char *chr_l_record_row,char *char_script_cd,char *char_cln_exch_map,
		char *char_mkt_typ,char *char_qty ,char *l_date,char *char_status,FILE *g_flogfile,DEBUG_INFO_STRUCT_H   **l_debug_info_ptr)
{
	printf("\n Entering Early_Payin_Rpt_Insert() ");
	
	
	EXEC SQL INSERT INTO EARLY_PAYIN_RPT VALUES (:chr_l_temp_seq_num,:chr_l_rep_name,
	:chr_l_rpt_type,:p_settlment_no,:chr_l_exch_code,:chr_l_rep_Path,:chr_l_record_row,:char_script_cd,:char_cln_exch_map,
	:char_mkt_typ,:char_qty ,:l_date,:char_status,0,NULL);
	printf("\n sqlcode |%d|",sqlca.sqlcode);
	IS_ANY_ORA_ERROR
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:
	printf("\n Leaving Early_Payin_Rpt_Insert with success \n");
	return(APL_SUCCESS);
	
	RETURN_FAILURE:
	printf("\n Error in Early_Payin_Rpt_Insert \n");
	return(APL_FAILURE);
}

  int Early_Payin_Alloc_Delete(char *p_settlment_no,char *chr_l_record_row,char *char_script_cd,char *char_cln_exch_map,char *char_qty ,char *l_date,char *char_status,DEBUG_INFO_STRUCT_H   **l_debug_info_ptr)
{
	int l_count = 0;
	
	
	EXEC SQL SELECT COUNT(*) INTO 
    :l_count  FROM EARLY_PAYIN_ALOC
	WHERE SETTL_NO =:p_settlment_no;
	printf("\n sqlcode |%d|",sqlca.sqlcode);
	IS_ANY_ORA_ERROR
	Alert("l_count==[%d]\n",l_count);

	if(l_count > 0)
	{
	EXEC SQL INSERT INTO EARLY_PAYIN_ALOC_HIS
	(select :l_date,'D', A.*  from EARLY_PAYIN_ALOC A WHERE SETTL_NO = :p_settlment_no);
	Alert("\n sqlcode |%d|",sqlca.sqlcode);
	IS_ANY_ORA_ERROR
	
	Alert("\n Movement to history completed ");
	EXEC SQL DELETE EARLY_PAYIN_ALOC
	WHERE SETTL_NO =:p_settlment_no ;
	
	Alert("\n sqlcode |%d|",sqlca.sqlcode);
	IS_ANY_ORA_ERROR
	APL_GOBACK_SUCCESS
	}
	else{
		Alert("No record for deletetion");	
		APL_GOBACK_SUCCESS
	}
	
	RETURN_SUCCESS:
	printf("\n Leaving Early_Payin_Alloc_Delete with success \n");
	return(APL_SUCCESS);
	
	RETURN_FAILURE:
	printf("\n Error in Early_Payin_Alloc_Delete \n");
	return(APL_FAILURE);
} 
//Changes done for Early Payin Recon by Simar ends
