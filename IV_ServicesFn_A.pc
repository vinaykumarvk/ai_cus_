




#include "stdio_64.h"
#include <string.h>
#include <stdlib.h>

#include "IV_Control_A.h"

EXEC SQL INCLUDE SQLCA;



int IV_Mod_IVSRVNew(const IV_SERV_MAST_STRUCT *p_iv_serv_mast_struct_a, int *int_p_retstat, 
		     DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	char chr_l_sys_date_time[APL_DATE_LEN];

	EXEC SQL BEGIN DECLARE SECTION;

		IV_SERV_MAST_STRUCT l_iv_servs_mast_struct;

		EXEC SQL VAR l_iv_servs_mast_struct.service_det IS STRING;
		EXEC SQL VAR l_iv_servs_mast_struct.access_stamp IS STRING;
		EXEC SQL VAR l_iv_servs_mast_struct.b_client IS STRING;
		EXEC SQL VAR l_iv_servs_mast_struct.status IS STRING;
		EXEC SQL VAR l_iv_servs_mast_struct.maker IS STRING;
		EXEC SQL VAR l_iv_servs_mast_struct.maker_dt IS STRING;
		EXEC SQL VAR l_iv_servs_mast_struct.checker IS STRING;
		EXEC SQL VAR l_iv_servs_mast_struct.checker_dt IS STRING;

		I_IV_SERV_MAST_STRUCT l_i_iv_serv_mast_struct = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	memset(chr_l_sys_date_time, APL_NULL_CHAR, APL_DATE_LEN);

	if (APL_FAILURE == CO_RtvSysDtTime(chr_l_sys_date_time, l_debug_info_ptr))
	{
		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		APL_GOBACK_FAIL
	}

	memset(l_iv_servs_mast_struct.service_det, APL_NULL_CHAR, IV_DESC_LEN);
	memset(l_iv_servs_mast_struct.access_stamp, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_iv_servs_mast_struct.b_client, APL_NULL_CHAR, APL_CLIENT_LENGTH_GL);
	
			
	strcpy(l_iv_servs_mast_struct.access_stamp, chr_l_sys_date_time);
	strcpy(l_iv_servs_mast_struct.service_det, p_iv_serv_mast_struct_a->service_det);

	l_iv_servs_mast_struct.service_cd = p_iv_serv_mast_struct_a->service_cd;
	l_iv_servs_mast_struct.fees_class = p_iv_serv_mast_struct_a->fees_class;
	l_iv_servs_mast_struct.minimum_fee = p_iv_serv_mast_struct_a->minimum_fee;
	l_iv_servs_mast_struct.std_feeind = p_iv_serv_mast_struct_a->std_feeind;
	l_iv_servs_mast_struct.mastsub_ind = p_iv_serv_mast_struct_a->mastsub_ind;
	l_iv_servs_mast_struct.std_feeind = p_iv_serv_mast_struct_a->std_feeind;
	l_iv_servs_mast_struct.in_on_gen = p_iv_serv_mast_struct_a->in_on_gen;
	
	strcpy(l_iv_servs_mast_struct.status,p_iv_serv_mast_struct_a->status);
	strcpy(l_iv_servs_mast_struct.maker,p_iv_serv_mast_struct_a->maker);
	strcpy(l_iv_servs_mast_struct.maker_dt,chr_l_sys_date_time);
	strcpy(l_iv_servs_mast_struct.checker,"");
	strcpy(l_iv_servs_mast_struct.checker_dt,"");
	
	if ( l_iv_servs_mast_struct.valid_fee_class == NULL )
	{
		l_i_iv_serv_mast_struct.i_valid_fee_class = -1;
	}
	else
	{
		l_iv_servs_mast_struct.valid_fee_class = p_iv_serv_mast_struct_a->valid_fee_class;
	}

	if ( !strlen(p_iv_serv_mast_struct_a->b_client) )
	{
		l_i_iv_serv_mast_struct.i_b_dl_client = -1;
	}
	else
	{
		strcpy(l_iv_servs_mast_struct.b_client, p_iv_serv_mast_struct_a->b_client);
	}

	EXEC SQL INSERT INTO IV_SERV_MAST
		 VALUES (:l_iv_servs_mast_struct INDICATOR :l_i_iv_serv_mast_struct);

	IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_SRVCODE_EXISTS, APL_NULL_STRING, 
					  APL_NULL_STRING, APL_NULL_STRING)
	*int_p_retstat = IV_SUCCESS;
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Mod_IVSRVNew().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
IV_Mod_IVSRVNew().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_Mod_IVSRVLock(IV_SERV_MAST_STRUCT *p_iv_serv_mast_struct_a, int *int_p_retstat, 
		      DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;

		IV_SERV_MAST_STRUCT l_iv_servs_mast_struct;

		EXEC SQL VAR l_iv_servs_mast_struct.service_det IS STRING;
		EXEC SQL VAR l_iv_servs_mast_struct.access_stamp IS STRING;
		EXEC SQL VAR l_iv_servs_mast_struct.b_client IS STRING;
		EXEC SQL VAR l_iv_servs_mast_struct.status IS STRING;
		EXEC SQL VAR l_iv_servs_mast_struct.maker IS STRING;
		EXEC SQL VAR l_iv_servs_mast_struct.maker_dt IS STRING;
		EXEC SQL VAR l_iv_servs_mast_struct.checker IS STRING;
		EXEC SQL VAR l_iv_servs_mast_struct.checker_dt IS STRING;

		I_IV_SERV_MAST_STRUCT l_i_iv_serv_mast_struct = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	EXEC SQL SELECT SERVICE_CD, SERVICE_DET, FEES_CLASS, MINIMUM_FEE, 
			STD_FEEIND, MASTSUB_IND, ACCESS_STAMP, VALID_FEE_CLASS, B_CLIENT, 
			IN_ON_GEN,STATUS,MAKER,MAKER_DT,CHECKER,CHECKER_DT
		 INTO :l_iv_servs_mast_struct INDICATOR :l_i_iv_serv_mast_struct
		 FROM IV_SERV_MAST
		 WHERE ( SERVICE_CD = :p_iv_serv_mast_struct_a->service_cd )
		 FOR UPDATE OF ACCESS_STAMP;

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}
	else if ( sqlca.sqlcode == 1403 )
	{

		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		APL_GOBACK_FAIL
	}

	if ( strcmp(l_iv_servs_mast_struct.access_stamp, p_iv_serv_mast_struct_a->access_stamp) )
	{
		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, ERR_ACCESSSTAMP_CHGD, APL_NULL_STRING,
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	if ( l_i_iv_serv_mast_struct.i_valid_fee_class == -1 )
	{
		*int_p_retstat = IV_COLUMN_NULL_ERR;

		l_iv_servs_mast_struct.valid_fee_class = ' ';
	}

	if ( l_i_iv_serv_mast_struct.i_b_dl_client == -1 )
	{
		*int_p_retstat = IV_COLUMN_NULL_ERR;

		strcpy(l_iv_servs_mast_struct.b_client, " ");
	}
	
	//*p_iv_serv_mast_struct_a = l_iv_servs_mast_struct; In Locking row,this assignment is not required 

	if ( *int_p_retstat == IV_COLUMN_NULL_ERR )
	{
		APL_GOBACK_FAIL
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Mod_IVSRVLock().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
IV_Mod_IVSRVLock().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_Mod_IVSRV(const IV_SERV_MAST_STRUCT *p_iv_serv_mast_struct_a, int *int_p_retstat, 
		     DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	char chr_l_sys_date_time[APL_DATE_LEN];

	EXEC SQL BEGIN DECLARE SECTION;

		IV_SERV_MAST_STRUCT l_iv_servs_mast_struct;

		EXEC SQL VAR l_iv_servs_mast_struct.service_det IS STRING;
		EXEC SQL VAR l_iv_servs_mast_struct.access_stamp IS STRING;
		EXEC SQL VAR l_iv_servs_mast_struct.b_client IS STRING;
		EXEC SQL VAR l_iv_servs_mast_struct.status IS STRING;
		EXEC SQL VAR l_iv_servs_mast_struct.maker IS STRING;
		EXEC SQL VAR l_iv_servs_mast_struct.maker_dt IS STRING;
		EXEC SQL VAR l_iv_servs_mast_struct.checker IS STRING;
		EXEC SQL VAR l_iv_servs_mast_struct.checker_dt IS STRING;

		I_IV_SERV_MAST_STRUCT l_i_iv_serv_mast_struct = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
		
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	l_iv_servs_mast_struct = *p_iv_serv_mast_struct_a;

	if ( l_iv_servs_mast_struct.valid_fee_class == NULL )
	{
		l_i_iv_serv_mast_struct.i_valid_fee_class = -1;
	}

	if ( !strlen(l_iv_servs_mast_struct.b_client) )
	{
		l_i_iv_serv_mast_struct.i_b_dl_client = -1;
	}

	memset(chr_l_sys_date_time, APL_NULL_CHAR, APL_DATE_LEN);

	if (APL_FAILURE == CO_RtvSysDtTime(chr_l_sys_date_time, l_debug_info_ptr))
	{
		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		APL_GOBACK_FAIL
	}

	strcpy(l_iv_servs_mast_struct.access_stamp, chr_l_sys_date_time);
	strcpy(l_iv_servs_mast_struct.maker_dt, chr_l_sys_date_time);
	strcpy(l_iv_servs_mast_struct.checker_dt,"");
	strcpy(l_iv_servs_mast_struct.checker,"");
	strcpy(l_iv_servs_mast_struct.status,"UU");
	strcpy(l_iv_servs_mast_struct.maker,p_iv_serv_mast_struct_a->maker);

	l_iv_servs_mast_struct.fees_class = p_iv_serv_mast_struct_a->fees_class;
	l_iv_servs_mast_struct.minimum_fee = p_iv_serv_mast_struct_a->minimum_fee;
	l_iv_servs_mast_struct.std_feeind = p_iv_serv_mast_struct_a->std_feeind;
	l_iv_servs_mast_struct.mastsub_ind = p_iv_serv_mast_struct_a->mastsub_ind;
	l_iv_servs_mast_struct.std_feeind = p_iv_serv_mast_struct_a->std_feeind;
	l_iv_servs_mast_struct.in_on_gen = p_iv_serv_mast_struct_a->in_on_gen;
           
	EXEC SQL UPDATE IV_SERV_MAST
		 SET SERVICE_DET = :l_iv_servs_mast_struct.service_det 
				  INDICATOR :l_i_iv_serv_mast_struct.i_serv_detail, 
		     FEES_CLASS = :l_iv_servs_mast_struct.fees_class 
				 INDICATOR :l_i_iv_serv_mast_struct.i_fee_class, 
		     MINIMUM_FEE = :l_iv_servs_mast_struct.minimum_fee 
				INDICATOR :l_i_iv_serv_mast_struct.i_minimum_fee, 
		     MASTSUB_IND = :l_iv_servs_mast_struct.mastsub_ind 
				INDICATOR :l_i_iv_serv_mast_struct.i_mastsub_ind, 
		     ACCESS_STAMP = :l_iv_servs_mast_struct.access_stamp 
				     INDICATOR :l_i_iv_serv_mast_struct.i_access_stamp, 
		     B_CLIENT = :l_iv_servs_mast_struct.b_client
				INDICATOR :l_i_iv_serv_mast_struct.i_b_dl_client,
		     IN_ON_GEN = :l_iv_servs_mast_struct.in_on_gen
				INDICATOR :l_i_iv_serv_mast_struct.i_in_on_gen, 
		     STATUS = :l_iv_servs_mast_struct.status
				INDICATOR :l_i_iv_serv_mast_struct.i_status, 
		     MAKER = :l_iv_servs_mast_struct.maker
				INDICATOR :l_i_iv_serv_mast_struct.i_maker,
		     MAKER_DT = :l_iv_servs_mast_struct.maker_dt
				INDICATOR :l_i_iv_serv_mast_struct.i_maker_dt,
		     CHECKER = :l_iv_servs_mast_struct.checker
				INDICATOR :l_i_iv_serv_mast_struct.i_checker,
		     CHECKER_DT = :l_iv_servs_mast_struct.checker_dt
				INDICATOR :l_i_iv_serv_mast_struct.i_checker_dt
		 WHERE ((SERVICE_CD = :p_iv_serv_mast_struct_a->service_cd) AND
			(ACCESS_STAMP = :p_iv_serv_mast_struct_a->access_stamp));

 IS_ANY_ORA_ERROR;

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}
	else if ( sqlca.sqlcode == 1403 )
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		APL_GOBACK_FAIL
	}

	//SP 01-08-2007 

	IF_COND_EXISTS("IV_TEST","SERVMOD")
	{
	EXEC SQL UPDATE IV_CLIENTFEE SET
	FEE_TYPE=:l_iv_servs_mast_struct.fees_class INDICATOR
	:l_i_iv_serv_mast_struct.i_fee_class  WHERE SERVICE_CD =
	:p_iv_serv_mast_struct_a->service_cd; 
	}
	//SP -nocheck fo this sqlstmt

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			EXEC SQL COMMIT;
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Mod_IVSRV().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			EXEC SQL ROLLBACK;
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
IV_Mod_IVSRV().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_Mod_IVSRVDel(const IV_SERV_MAST_STRUCT *p_iv_serv_mast_struct_a, int *int_p_retstat, 
		     DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{	
	char chr_l_sys_date_time[APL_DATE_LEN];

	EXEC SQL BEGIN DECLARE SECTION;

	IV_SERV_MAST_STRUCT l_iv_servs_mast_struct;

	struct sqlca sqlca;

	EXEC SQL VAR l_iv_servs_mast_struct.status IS STRING;
	EXEC SQL VAR l_iv_servs_mast_struct.maker IS STRING;
	EXEC SQL VAR l_iv_servs_mast_struct.maker_dt IS STRING;
	EXEC SQL VAR l_iv_servs_mast_struct.checker IS STRING;
	EXEC SQL VAR l_iv_servs_mast_struct.checker_dt IS STRING;
	EXEC SQL VAR l_iv_servs_mast_struct.access_stamp IS STRING;

	I_IV_SERV_MAST_STRUCT l_i_iv_serv_mast_struct = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

	EXEC SQL END DECLARE SECTION;

	l_iv_servs_mast_struct = *p_iv_serv_mast_struct_a;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	memset(chr_l_sys_date_time, APL_NULL_CHAR, APL_DATE_LEN);

	if (APL_FAILURE == CO_RtvSysDtTime(chr_l_sys_date_time, l_debug_info_ptr))
	{
		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		APL_GOBACK_FAIL
	}

	strcpy(l_iv_servs_mast_struct.access_stamp, chr_l_sys_date_time);
	strcpy(l_iv_servs_mast_struct.maker_dt, chr_l_sys_date_time);
	strcpy(l_iv_servs_mast_struct.checker_dt,"");
	strcpy(l_iv_servs_mast_struct.checker,"");
	strcpy(l_iv_servs_mast_struct.status,"DU");
	strcpy(l_iv_servs_mast_struct.maker,p_iv_serv_mast_struct_a->maker);

	strcpy(l_iv_servs_mast_struct.access_stamp,p_iv_serv_mast_struct_a->access_stamp);
	l_iv_servs_mast_struct.service_cd = p_iv_serv_mast_struct_a->service_cd;

	EXEC SQL UPDATE IV_SERV_MAST SET 
		     STATUS = :l_iv_servs_mast_struct.status
				INDICATOR :l_i_iv_serv_mast_struct.i_status,
		     MAKER = :l_iv_servs_mast_struct.maker
				INDICATOR :l_i_iv_serv_mast_struct.i_maker,
		     MAKER_DT = :l_iv_servs_mast_struct.maker_dt
				INDICATOR :l_i_iv_serv_mast_struct.i_maker_dt,
		     CHECKER = :l_iv_servs_mast_struct.checker
				INDICATOR :l_i_iv_serv_mast_struct.i_checker,
		     CHECKER_DT = :l_iv_servs_mast_struct.checker_dt
				INDICATOR :l_i_iv_serv_mast_struct.i_checker_dt		 
		     WHERE ((SERVICE_CD = :l_iv_servs_mast_struct.service_cd) 
			AND (ACCESS_STAMP = :l_iv_servs_mast_struct.access_stamp));

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}
	else if ( sqlca.sqlcode == 1403 )
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		APL_GOBACK_FAIL
	}
	
	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			EXEC SQL COMMIT;
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Mod_IVSRVDel().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			EXEC SQL ROLLBACK;
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
IV_Mod_IVSRVDel().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}


int IV_Mod_IVSRVAut(const IV_SERV_MAST_STRUCT *p_iv_serv_mast_struct_a, int *int_p_retstat, 
		     DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	char chr_l_sys_date_time[APL_DATE_LEN];
	
        EXEC SQL BEGIN DECLARE SECTION;

	IV_SERV_MAST_STRUCT l_iv_servs_mast_struct;

	struct sqlca sqlca;

	EXEC SQL VAR l_iv_servs_mast_struct.status IS STRING;
	EXEC SQL VAR l_iv_servs_mast_struct.checker IS STRING;
	EXEC SQL VAR l_iv_servs_mast_struct.checker_dt IS STRING;
	EXEC SQL VAR l_iv_servs_mast_struct.access_stamp IS STRING;

	I_IV_SERV_MAST_STRUCT l_i_iv_serv_mast_struct = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

	EXEC SQL END DECLARE SECTION;

	l_iv_servs_mast_struct = *p_iv_serv_mast_struct_a;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	memset(chr_l_sys_date_time, APL_NULL_CHAR, APL_DATE_LEN);

	if (APL_FAILURE == CO_RtvSysDtTime(chr_l_sys_date_time, l_debug_info_ptr))
	{
		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		APL_GOBACK_FAIL
	}

	strcpy(l_iv_servs_mast_struct.checker_dt,chr_l_sys_date_time);
	strcpy(l_iv_servs_mast_struct.access_stamp,p_iv_serv_mast_struct_a->access_stamp);
	strcpy(l_iv_servs_mast_struct.status,p_iv_serv_mast_struct_a->status);/*** 12/02/2007 : Vinay ****/
	l_iv_servs_mast_struct.service_cd = p_iv_serv_mast_struct_a->service_cd;
	
	printf("l_iv_servs_mast_struct.status :|%s|\n",l_iv_servs_mast_struct.status);

	if(strcmp(l_iv_servs_mast_struct.status,"DU"))
	{
		strcpy(l_iv_servs_mast_struct.status,"AA");

		EXEC SQL UPDATE IV_SERV_MAST 
		       SET STATUS = :l_iv_servs_mast_struct.status
				     INDICATOR :l_i_iv_serv_mast_struct.i_status,
			  CHECKER = :l_iv_servs_mast_struct.checker
				     INDICATOR :l_i_iv_serv_mast_struct.i_checker,
		       CHECKER_DT = :l_iv_servs_mast_struct.checker_dt
			  	     INDICATOR :l_i_iv_serv_mast_struct.i_checker_dt		 
		      WHERE SERVICE_CD = :l_iv_servs_mast_struct.service_cd
   		        AND ACCESS_STAMP = :l_iv_servs_mast_struct.access_stamp;

		if ( sqlca.sqlcode < 0 )
		{
			char chr_l_buffer[KEY_LENGTH];

			memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

			ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

			*int_p_retstat = IV_CRITCAL_ERROR_IND;

			CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
				       APL_NULL_STRING, APL_NULL_STRING, 
				       __LINE__, __FILE__);

			APL_GOBACK_FAIL
		}
		else if ( sqlca.sqlcode == 1403 )
		{
			*int_p_retstat = IV_NO_DATA_FOUND_ERR;

			APL_GOBACK_FAIL
		}

	}
	else
	{

		EXEC SQL DELETE FROM IV_SERV_MAST
		     WHERE SERVICE_CD = :l_iv_servs_mast_struct.service_cd;

		if ( sqlca.sqlcode < 0 )
		{
			char chr_l_buffer[KEY_LENGTH];

			memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

			ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

			*int_p_retstat = IV_CRITCAL_ERROR_IND;

			CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
				       APL_NULL_STRING, APL_NULL_STRING, 
				       __LINE__, __FILE__);

			APL_GOBACK_FAIL
		}
		else if ( sqlca.sqlcode == 1403 )
		{
			*int_p_retstat = IV_NO_DATA_FOUND_ERR;

			APL_GOBACK_FAIL
		}
	}


	*int_p_retstat = IV_SUCCESS;
	
	APL_GOBACK_SUCCESS//AIX Warning Removal 
	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			EXEC SQL COMMIT;
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Mod_IVSRVAut().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			EXEC SQL ROLLBACK;
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
IV_Mod_IVSRVAut().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}


int IV_Mod_IVSRVRes(const IV_SERV_MAST_STRUCT *p_iv_serv_mast_struct_a, int *int_p_retstat, 
		     DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	char chr_l_sys_date_time[APL_DATE_LEN];
	
        EXEC SQL BEGIN DECLARE SECTION;

	IV_SERV_MAST_STRUCT l_iv_servs_mast_struct;

	struct sqlca sqlca;

	EXEC SQL VAR l_iv_servs_mast_struct.status IS STRING;
	EXEC SQL VAR l_iv_servs_mast_struct.checker IS STRING;
	EXEC SQL VAR l_iv_servs_mast_struct.checker_dt IS STRING;
	EXEC SQL VAR l_iv_servs_mast_struct.access_stamp IS STRING;

	I_IV_SERV_MAST_STRUCT l_i_iv_serv_mast_struct = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

	EXEC SQL END DECLARE SECTION;

	l_iv_servs_mast_struct = *p_iv_serv_mast_struct_a;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	memset(chr_l_sys_date_time, APL_NULL_CHAR, APL_DATE_LEN);

	if (APL_FAILURE == CO_RtvSysDtTime(chr_l_sys_date_time, l_debug_info_ptr))
	{
		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		APL_GOBACK_FAIL
	}

	strcpy(l_iv_servs_mast_struct.access_stamp, chr_l_sys_date_time);
	strcpy(l_iv_servs_mast_struct.maker_dt, chr_l_sys_date_time);
	strcpy(l_iv_servs_mast_struct.checker_dt,"");
	strcpy(l_iv_servs_mast_struct.checker,"");
	strcpy(l_iv_servs_mast_struct.status,"UU");
	strcpy(l_iv_servs_mast_struct.maker,p_iv_serv_mast_struct_a->maker);

	strcpy(l_iv_servs_mast_struct.access_stamp,p_iv_serv_mast_struct_a->access_stamp);
	l_iv_servs_mast_struct.service_cd = p_iv_serv_mast_struct_a->service_cd;

	EXEC SQL UPDATE IV_SERV_MAST SET 
		     STATUS = :l_iv_servs_mast_struct.status
				INDICATOR :l_i_iv_serv_mast_struct.i_status,
		     MAKER = :l_iv_servs_mast_struct.maker
				INDICATOR :l_i_iv_serv_mast_struct.i_maker,
		     MAKER_DT = :l_iv_servs_mast_struct.maker_dt
				INDICATOR :l_i_iv_serv_mast_struct.i_maker_dt,	
		     CHECKER = :l_iv_servs_mast_struct.checker
				INDICATOR :l_i_iv_serv_mast_struct.i_checker,
		     CHECKER_DT = :l_iv_servs_mast_struct.checker_dt
				INDICATOR :l_i_iv_serv_mast_struct.i_checker_dt		 
		     WHERE ((SERVICE_CD = :l_iv_servs_mast_struct.service_cd) 
			AND (ACCESS_STAMP = :l_iv_servs_mast_struct.access_stamp));

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}
	else if ( sqlca.sqlcode == 1403 )
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		APL_GOBACK_FAIL
	}
	
	*int_p_retstat = IV_SUCCESS;

          APL_GOBACK_SUCCESS//AIX Warning Removal 
	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			EXEC SQL COMMIT;
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Mod_IVSRVRes().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			EXEC SQL ROLLBACK;
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
IV_Mod_IVSRVRes().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}


