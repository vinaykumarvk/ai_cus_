/*
 *   COPYRIGHT NOTICE
 *   
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *   
 *   These materials are confidential and proprietary to
 *   Polaris Software Lab Limited and no part of these materials should
 *   be reproduced, published, transmitted or distributed in any form or
 *   by any means, electronic, mechanical, photocopying, recording or
 *   otherwise, or stored in any information storage or retrieval system
 *   of any nature nor should the materials be disclosed to third parties
 *   or used in any other manner for which this is not authorized, without
 *   the prior express written authorization of Polaris Software Lab Limited.
 */
/*******************************************************************************
 *  
 *    Module Name         :         Deal Processing
 *    
 *    File Name           :         DL_RstSetlGlobal.pc
 *    
 *    Description         :         This file contains all functions which
 *				     are used for reset of deal global settlement. 
 *    
 *                Version Control Block
 *     
 *    Date        Version     Author              Description     RFS No.
 *   ---------   --------  ---------------  ----------------------------------
 *   14/09/2007   1.0        Amit Bhosale		
 *   29/03/2022   1.1        kotubabu        Linux Migration      Kotak Implementaion 
 *
 *******************************************************************************/


#include "CO_HostStructdef.h" 

EXEC SQL INCLUDE SQLCA.H;

#define	COMMIT_COUNT_G 5
#define  PAGELENGTH 49
#define	QUANTITY_LEN  26
#define	AMOUNT_LEN_B  19
#define  CNAME_LEN_A 66
#define	INSTR_NAME_LEN_D	131
#define  FILE_NAME_LEN 13
#define  SEPARATOR "|"

int DL_Proc_GbRst_MnDt_SetlDt(char *,
         char *,
         char ,
         FILE *,
         FILE *,
         int  *,
         char **,
         INTL_ENV_DATA_STRUCT_H *,
         DEBUG_INFO_STRUCT_H **);

int CR_Proc_DLSetlRst (char *,char *,char *,char *,INTL_ENV_DATA_STRUCT_H *,DEBUG_INFO_STRUCT_H **);
int DL_Proc_GbRst(char *,
         char *,char ,
      char **,
      FILE *,
      INTL_ENV_DATA_STRUCT_H *,
      DEBUG_INFO_STRUCT_H **);
int DL_Prnt_GbRstRpt_Hdr(   FILE *,char ,DEBUG_INFO_STRUCT_H **);

int DL_Proc_GbRst_MnDt_SetlDt(char *chr_p_maindate,
			char *chr_p_othdate,
			char chr_p_typeofinstr,
			FILE *p_fp_match,
			FILE *p_logfile,
			int  *p_no_match,
			char **argv,
			INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
			DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

 

   struct sqlca sqlca ;

   char chr_l_h_client_a[APL_CLIENT_LENGTH];
   char chr_l_h_refno_A[APL_TXNREFNO_LEN];
   char chr_l_h_access_stamp[APL_DATE_LEN];
   char chr_l_h_instr_dt[APL_DATE_LEN];
   char chr_l_h_moneydt[APL_DATE_LEN];
   char chr_l_h_settledt_a[APL_DATE_LEN];
   char chr_l_h_ccycode[APL_CCYCODE_LEN];
   char chr_l_h_trcode_a[APL_FLAG_LENGTH];
   char chr_l_h_exarena[3];
   char chr_l_h_instrcode_A[APL_INSTRUMENTCODE_LEN];
   char h_ora_rowid[APL_ROWID_LEN];

	char     chr_l_trdt_a[APL_DATE_LEN]                = APL_NULL_STRING;
	char     chr_l_typeoftrd[DEALTYPE_LEN_A]          = APL_NULL_STRING;
	char     chr_l_locncode_c[APL_LOCNCODE_LENGTH]        = APL_NULL_STRING;
	char     chr_l_locnchng_flg[2]        				= APL_NULL_STRING;

   char chr_l_rep_outqty[27];
   char chr_l_rep_outamt[23];
   char chr_p_action[APL_FLAG_LENGTH];
   char chr_p_buf[BUFFER_LEN] =APL_NULL_STRING;
	
   char chr_l_shs[TYPEOF_INSTR_LEN] = APL_NULL_STRING;
   char chr_l_fmt[TYPEOF_INSTR_LEN] = APL_NULL_STRING;
   char chr_l_rts[TYPEOF_INSTR_LEN]  = APL_NULL_STRING;
   char chr_l_bon[TYPEOF_INSTR_LEN]  = APL_NULL_STRING;

   double l_h_quantity_a =0;
   double chr_l_h_amount =0;

   int int_error_flag = APL_SUCCESS;
   int int_l_reccount = 0;
   int int_l_pglen_m = 7;
   int int_l_chkflg = 0;
   int int_l_amt_declen = 0;

	int int_p_smieligibility_flg = 0;

   short l_i_account = 0;
   short l_i_refno = 0;
   short l_i_access_stamp = 0;
   short l_i_instr_dt = 0;
   short l_i_moneydt = 0;
   short l_i_settledt = 0;
   short l_i_ccycode = 0;
   short int_l_i_trcode = 0;
   short l_i_exarena = 0;
   short l_i_amount = 0;
   short int_l_i_qty = 0;
   short l_i_instr_code = 0;

	short    l_i_trdt                            = 0;
	short    l_i_typeoftrd                       = 0;
	short    l_i_locncode                        = 0;
	short    l_i_locnchng_flg                    = 0;
	short    i_ora_rowid			                     = 0;

   sqlca.sqlcode = 0;



	EXEC SQL VAR h_ora_rowid IS STRING;


   CO_ProcMonitor(p_logfile, 
			"Entered Function DL_Proc_GbRst_MnDt_SetlDt. Going for mandatory checks", 
			NULL,NULL);
	
	memset(chr_p_buf,APL_NULL_CHAR,BUFFER_LEN);
	sprintf(chr_p_buf, "Main  Date : (%s)",chr_p_maindate);
	CO_ProcMonitor(p_logfile, chr_p_buf, l_debug_info_ptr, p_intl_envdatastruct_h);
	
	memset(chr_p_buf,APL_NULL_CHAR,BUFFER_LEN);
	sprintf(chr_p_buf, "Other Date : (%s)",chr_p_othdate);
	CO_ProcMonitor(p_logfile, chr_p_buf, l_debug_info_ptr, p_intl_envdatastruct_h);
 	
   fprintf(p_logfile, "Instrument Type: (%c)\n", chr_p_typeofinstr);
   fflush(p_logfile);


/** ISKB_456:AmitB:17-09-07  **/
/**  	if ((!strlen(chr_p_maindate)) && (!strlen(chr_p_othdate))) **/
        if (!strlen(chr_p_maindate)) 
		{APL_DATA_MISSING("Settlement Date",APL_NULL_STRING,APL_NULL_STRING);
  		int_error_flag = APL_FAILURE;}                 

	

	
   if ( (chr_p_typeofinstr != 'B') && (chr_p_typeofinstr != 'S') && (chr_p_typeofinstr != 'A') )
      {
         APL_DATA_MISSING("Instrument Type", APL_NULL_STRING, APL_NULL_STRING);
         int_error_flag = APL_FAILURE;
      }



  if (int_error_flag == APL_FAILURE)
	{
	APL_GOBACK_FAIL
	}
 


/* By Kapil Start : iskb:456 03/10/2007*/
/*
   strcpy(chr_l_shs,TYPOF_INSTR_SHS);
   strcpy(chr_l_fmt,TYPEOFINSTR_FMT);
   strcpy(chr_l_rts,DEALCD_RTS);
   strcpy(chr_l_bon,TYPEOFINSTR_BOND);
*/


strcpy(chr_l_shs,TYPOF_INSTR_SHS_MAIN);
strcpy(chr_l_fmt,TYPEOFINSTR_FMT_MAIN);
strcpy(chr_l_rts,DEALCD_RTS_MAIN);
strcpy(chr_l_bon,TYPEOFINSTR_BOND_MAIN);

/* By Kapil End : iskb:456 03/10/2007*/



	sqlca.sqlcode =0;


/*Change By Kapil (ISKB_456):  The condition 'A.FAILREASON_CD IS NULL' removed for buy/sale type */
  EXEC SQL DECLARE glbl_st_rst CURSOR FOR
  (SELECT A.CLIENT, A.IDENTIY_NO, A.ACCESS_STAMP ,A.INSTRUMENT_DT, A.MONEY_SETL_DT, A.SETL_DATE,
                       A.CURRENCY_CD, A.DEAL_CD, A.EX_ARENA, A.AMOUNT,A.QTY, A.INSTR_CODE 
                FROM DL_DEAL A,MT_INSTRUMENT B
                        WHERE ( A.DEAL_FRM_ORD ='Y' OR A.ENTRY !='G' )
                                AND A.INSTRUMENT_DT IS NOT NULL
                                AND (A.INSTRCONV_IND !='Y' OR A.INSTRCONV_IND IS NULL)
                                AND (A.STATUS IS NULL)
                                AND (A.DEAL_CD ='1' OR A.DEAL_CD ='3' OR A.DEAL_CD ='5' OR A.DEAL_CD ='7')
                                AND (B.INSTR_CODE = A.INSTR_CODE)
                                AND ((DECODE(:chr_p_typeofinstr,'A','A',B.INSTR_TYPE)=(DECODE(:chr_p_typeofinstr,'S',:chr_l_shs,'B',:chr_l_bon,'A')))
                               OR (DECODE(:chr_p_typeofinstr,'A','A',B.INSTR_TYPE)=(DECODE(:chr_p_typeofinstr,'S',:chr_l_rts,'B',:chr_l_fmt,'A'))))

        GROUP BY A.DEAL_CD, A.CLIENT, A.IDENTIY_NO,A.EX_ARENA, A.QTY, A.INSTR_CODE, A.CURRENCY_CD,
                        A.AMOUNT, A.SETL_DATE, A.INSTRUMENT_DT, A.MONEY_SETL_DT, A.ACCESS_STAMP)
                                UNION ALL
        (SELECT   A.CLIENT, A.IDENTIY_NO, A.ACCESS_STAMP ,A.INSTRUMENT_DT, A.MONEY_SETL_DT, A.SETL_DATE,
                        A.CURRENCY_CD, A.DEAL_CD, A.EX_ARENA, A.AMOUNT,A.QTY, A.INSTR_CODE
 					FROM DL_DEAL A,MT_INSTRUMENT B
                        WHERE ( A.DEAL_FRM_ORD ='Y' OR A.ENTRY !='G' )
                                AND A.INSTRUMENT_DT IS NOT NULL
                                AND (A.INSTRCONV_IND !='Y' OR A.INSTRCONV_IND IS NULL)
                                AND (A.STATUS IS NULL OR
                                        (A.DL_COMPLETEQTY + A.PEND_REG_QTY =A.QTY))
                                AND (A.DEAL_CD ='2' OR A.DEAL_CD ='4' OR A.DEAL_CD ='6' OR A.DEAL_CD ='8')
                                AND (B.INSTR_CODE = A.INSTR_CODE)
                                AND ((DECODE(:chr_p_typeofinstr,'A','A',B.INSTR_TYPE)=(DECODE(:chr_p_typeofinstr,'S',:chr_l_shs,'B',:chr_l_bon,'A')))
                               OR (DECODE(:chr_p_typeofinstr,'A','A',B.INSTR_TYPE)=(DECODE(:chr_p_typeofinstr,'S',:chr_l_rts,'B',:chr_l_fmt,'A'))))
        GROUP BY A.DEAL_CD, A.CLIENT, A.IDENTIY_NO,A.EX_ARENA, A.QTY, A.INSTR_CODE, A.CURRENCY_CD,
                        A.AMOUNT,A.SETL_DATE, A.INSTRUMENT_DT, A.MONEY_SETL_DT, A.ACCESS_STAMP);

  EXEC SQL OPEN glbl_st_rst ;

  IS_ANY_ORA_ERROR;



	for (int_l_reccount=0; ;int_l_reccount++)
	{
		
		

		memset(chr_l_h_client_a, NULL, APL_CLIENT_LENGTH);
		memset(chr_l_h_refno_A, NULL, APL_TXNREFNO_LEN);
		memset(chr_l_h_access_stamp, NULL, APL_DATE_LEN);
		memset(chr_l_h_instr_dt, NULL, APL_DATE_LEN);
		memset(chr_l_h_moneydt, NULL, APL_DATE_LEN);
		memset(chr_l_h_settledt_a, NULL, APL_DATE_LEN);
		memset(chr_l_h_ccycode, NULL, APL_CCYCODE_LEN);
		memset(chr_l_h_trcode_a, NULL, 2);
		memset(chr_l_h_exarena, NULL, 3);
		memset(chr_l_h_instrcode_A, NULL, APL_INSTRUMENTCODE_LEN);

		memset(chr_l_trdt_a     ,APL_NULL_CHAR,APL_DATE_LEN);
		memset(chr_l_typeoftrd,APL_NULL_CHAR,DEALTYPE_LEN_A);
		memset(chr_l_locncode_c ,APL_NULL_CHAR,APL_LOCNCODE_LENGTH);
		memset(chr_l_locnchng_flg ,APL_NULL_CHAR,2);

		l_h_quantity_a =0;
		chr_l_h_amount =0;

		l_i_account = 0;
		l_i_refno = 0;
		l_i_access_stamp = 0;
		l_i_instr_dt = 0;
		l_i_moneydt = 0;
		l_i_settledt = 0;
	   l_i_ccycode =0;
		int_l_i_trcode = 0;
		l_i_exarena = 0;
		int_l_i_qty = 0;
		l_i_amount = 0;
		l_i_instr_code = 0;
		l_i_trdt 			= 0;
		l_i_typeoftrd 		= 0;
		l_i_locncode 		= 0;
		l_i_locnchng_flg 	= 0;
		i_ora_rowid 	= 0;


 EXEC SQL VAR chr_l_h_client_a IS STRING(11);
 EXEC SQL VAR chr_l_h_refno_A  IS STRING(17);
 EXEC SQL VAR chr_l_h_ccycode IS STRING(4);
 EXEC SQL VAR chr_l_h_trcode_a IS STRING(2);
 EXEC SQL VAR chr_l_h_exarena IS STRING(3);
 EXEC SQL VAR chr_l_h_instrcode_A IS STRING(9);
 EXEC SQL VAR chr_l_h_moneydt IS STRING(20);
 EXEC SQL VAR chr_l_h_instr_dt IS STRING(20);
 EXEC SQL VAR chr_l_h_settledt_a IS STRING(20);
 EXEC SQL VAR chr_l_h_access_stamp IS STRING(20);

 EXEC SQL VAR chr_l_trdt_a        IS STRING;
 EXEC SQL VAR chr_l_typeoftrd   IS STRING;
 EXEC SQL VAR chr_l_locncode_c    IS STRING;
 EXEC SQL VAR chr_l_locnchng_flg  IS STRING;

			
		
		EXEC SQL FETCH glbl_st_rst INTO :chr_l_h_client_a:l_i_account, 
	         :chr_l_h_refno_A:l_i_refno,
	         :chr_l_h_access_stamp:l_i_access_stamp,
	         :chr_l_h_instr_dt:l_i_instr_dt,
	         :chr_l_h_moneydt:l_i_moneydt,
	         :chr_l_h_settledt_a:l_i_settledt,
	         :chr_l_h_ccycode:l_i_ccycode,
	         :chr_l_h_trcode_a:int_l_i_trcode,
		 :chr_l_h_exarena:l_i_exarena,
		 :chr_l_h_amount:l_i_amount,
		 :l_h_quantity_a:int_l_i_qty,
		 :chr_l_h_instrcode_A:l_i_instr_code;
	
		if (sqlca.sqlcode == 1403) break;
		
		IS_ANY_ORA_ERROR

		

      fprintf(p_logfile, "Fetched from the cursor -\n");
      fprintf(p_logfile, "Account: (%s)\n", chr_l_h_client_a);
      fprintf(p_logfile, "Reference Number: (%s)\n", chr_l_h_refno_A);



		if (!strcmp(chr_l_h_exarena,"1"))
			{
			if (strcmp(chr_p_maindate,chr_l_h_instr_dt))
				{	
					fprintf(p_logfile, "Instrdt does not match with MainDate - skipping this record.\n");
					continue;
				}
			}
/** ISKB_456:AmitB:17-09-07  **/
/**		else 
			{
			if (strcmp(chr_p_othdate,chr_l_h_instr_dt))
				{	
				fprintf(p_logfile, "Instrdt does not match with OthDate - skipping this record.\n");
					continue;
				}
			}
**/	
		memset(chr_p_action, NULL, 2);
		chr_p_action[0] ='\0';

		if (l_i_moneydt == -1)
			{
			chr_p_action[0] ='S';
			}
		else
			{
			chr_p_action[0] ='B';
			}

	
	memset(chr_p_buf,APL_NULL_CHAR,BUFFER_LEN);
	sprintf(chr_p_buf, "Action Is :%s",chr_p_action);
	CO_ProcMonitor(p_logfile, chr_p_buf, l_debug_info_ptr, p_intl_envdatastruct_h);

		

	
	memset(chr_p_buf,APL_NULL_CHAR,BUFFER_LEN);
	sprintf(chr_p_buf, 
			"Picked up chr_new trade =Account : %s,RefNo : %s",
			chr_l_h_client_a,chr_l_h_refno_A);
	CO_ProcMonitor(p_logfile, chr_p_buf, l_debug_info_ptr, p_intl_envdatastruct_h);





   if (g_mt_commonsys_params_struct_h.ei_smi_ind[0] == 'Y')
   {


// Changed by kapil 17/07/2007 start (ISKB_456):
	 EXEC SQL SELECT location_cd , deal_date , dl_class , loc_chng_ind ,rowid
				 into :chr_l_locncode_c:l_i_locncode , :chr_l_trdt_a:l_i_trdt ,
				 :chr_l_typeoftrd:l_i_typeoftrd ,:chr_l_locnchng_flg:l_i_locnchng_flg,:h_ora_rowid:i_ora_rowid  from dl_deal 
				 where client = :chr_l_h_client_a and IDENTIY_NO = :chr_l_h_refno_A ; 


//Changes  end 
	 IS_ANY_ORA_ERROR

    int_p_smieligibility_flg = 0 ;

    	if (EI_Chk_SMIElg(chr_l_locncode_c,chr_l_trdt_a,chr_l_typeoftrd,chr_l_h_instrcode_A,chr_l_locnchng_flg,h_ora_rowid,&int_p_smieligibility_flg,p_intl_envdatastruct_h,l_debug_info_ptr) == APL_FAILURE)
    	{
      	CO_ProcMonitor(p_logfile,"Failure from SMI_CheckSMIEligibility", NULL, p_intl_envdatastruct_h);
			APL_GOBACK_FAIL
		}

		if(int_p_smieligibility_flg)
		{
			CO_ProcMonitor(p_logfile,"SMI Eligible Trade Found\n", NULL, NULL) ;
			continue ;
		}
	
	}



	CO_ProcMonitor(p_logfile, "Calling CBRstSStFn", l_debug_info_ptr, p_intl_envdatastruct_h);

	if (APL_SUCCESS == CR_Proc_DLSetlRst(chr_l_h_client_a,
			chr_l_h_refno_A,
			chr_p_action,
			chr_l_h_access_stamp,
			p_intl_envdatastruct_h,
			l_debug_info_ptr))
		{
		

	
	memset(chr_p_buf,APL_NULL_CHAR,BUFFER_LEN);
	sprintf(chr_p_buf, 
			"CBRstSStFn Successful for =Account : %s,RefNo : %s",
			chr_l_h_client_a,chr_l_h_refno_A);
	CO_ProcMonitor(p_logfile, chr_p_buf, l_debug_info_ptr, p_intl_envdatastruct_h);

	

	

		if (APL_FAILURE == CR_Proc_InstrQtyRoundToStr(	l_h_quantity_a,
																QUANTITY_LEN,
																chr_l_h_instrcode_A,
																chr_l_rep_outqty,
																l_debug_info_ptr ))
		{
			APL_GOBACK_FAIL
		}

		int_l_amt_declen = 0;
		EXEC SQL SELECT DEC_LEN INTO :int_l_amt_declen
		FROM DL_CURRENCY
		WHERE CURRENCY_CD = :chr_l_h_ccycode;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_VAL_NF,
							"Decimal Len.",
							chr_l_h_ccycode,
							APL_NULL_STRING);

		CO_ToStr(chr_l_h_amount,
			AMOUNT_LEN_B,
			int_l_amt_declen,
			chr_l_rep_outamt);

			fprintf(p_fp_match, 
				"%-11s %-17s %.10s %-9s%s %s %-3s %.11s\n",	
				chr_l_h_client_a, 
				chr_l_h_refno_A, 
				chr_l_h_instr_dt,
				chr_l_h_instrcode_A, 
				chr_l_rep_outqty, 
				chr_l_rep_outamt, 
				chr_l_h_trcode_a, 
				chr_l_h_settledt_a);

			(*p_no_match)++;
		      if (++int_l_pglen_m == PAGELENGTH) 
			{
   		DL_Prnt_GbRstRpt_Line(p_fp_match);
			fprintf(p_fp_match, "\f");
			DL_Prnt_GbRstRpt_Hdr(p_fp_match,chr_p_typeofinstr,l_debug_info_ptr);
			int_l_pglen_m = 7;
			}
 
			CO_ProcMonitor(p_logfile, "Finished Processing the trade successfully", 
						l_debug_info_ptr, p_intl_envdatastruct_h);
   if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
   {
			CO_ProcMonitor(p_logfile, "Errors if any : ", l_debug_info_ptr, p_intl_envdatastruct_h);
			CO_FreeErrLst(l_debug_info_ptr);
   }

			continue;
		}
		else
		{
			if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
			{
				fprintf(p_logfile, "Failed to reset the trade\n");
	
				memset(chr_p_buf,APL_NULL_CHAR,BUFFER_LEN);
				sprintf(chr_p_buf, 
						"Going to free errors");
				CO_ProcMonitor(p_logfile, chr_p_buf, l_debug_info_ptr, p_intl_envdatastruct_h);
				CO_FreeErrLst(l_debug_info_ptr);
			}
			continue;
		}
	}

   EXEC SQL CLOSE glbl_st_rst;

   if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
     {APL_GOBACK_FAIL } 

  APL_GOBACK_SUCCESS
 
  RETURN_SUCCESS :
	{
	memset(chr_p_buf, NULL, BUFFER_LEN);
	sprintf(chr_p_buf, "Processed %d records", int_l_reccount);

	EXEC SQL UPDATE SYS_BATCHPROC
	SET STAT_DET = :chr_p_buf
   WHERE PROCESS_NAME=:argv[0]
   AND   PROC_INIT=:argv[1]
   AND   STARTDATE=:argv[2]
   AND   STATUS='started';

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_REC_NOTFND,
														"Batch_in_proc Rec",
														APL_NULL_STRING,
														APL_NULL_STRING )

	EXEC SQL COMMIT WORK;

	CO_ProcMonitor(p_logfile, "Committed Work", NULL, NULL);

	if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
	{
		CO_ProcMonitor(p_logfile, "Errors if any : ", l_debug_info_ptr, p_intl_envdatastruct_h);
	}
	CO_ProcMonitor(p_logfile, "Leaving Function DL_Proc_GbRst_MnDt_SetlDt Successfully", l_debug_info_ptr, p_intl_envdatastruct_h);
	CO_FreeErrLst(l_debug_info_ptr);
	return(APL_SUCCESS);
	}
  RETURN_FAILURE :
	{
	EXEC SQL ROLLBACK WORK;
	if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
	{
		CO_ProcMonitor(p_logfile, "Errors if any : ", l_debug_info_ptr, p_intl_envdatastruct_h);
	}
	CO_ProcMonitor(p_logfile, "Failed in DL_Proc_GbRst_MnDt_SetlDt and leaving", l_debug_info_ptr, p_intl_envdatastruct_h);
	CO_FreeErrLst(l_debug_info_ptr);
	return(APL_FAILURE);
	}
}

int main(int argc,char **argv) //AIX- Warnings Removal
{
	struct sqlca sqlca;
	DEBUG_INFO_STRUCT_H *l_debug_info_ptr = NULL; 
	INTL_ENV_DATA_STRUCT_H l_intl_env_data_h;
	/* Added by kotubabu for Linux Migration -Start*/
    #ifdef OS_LINUX
	FILE *l_finifile = NULL;
	FILE *l_logfile = NULL;
	#else
    FILE *l_finifile = APL_OUT_FILE;
    FILE *l_logfile = APL_OUT_FILE;
    #endif
    /* Added by kotubabu  for Linux Migration -END*/
	   /* Added by kotubabu for Linux Migration-Start*/
    #ifdef OS_LINUX
     l_finifile = APL_OUT_FILE;
	 l_logfile = APL_OUT_FILE;
    #endif
   /* Added by kotubabu for Linux Migration-End*/

	char chr_p_maindate[APL_DATE_LEN];
	char chr_p_othdate[APL_DATE_LEN];
	char chr_p_typeofinstr[APL_FLAG_LENGTH]=APL_NULL_STRING;

   int int_l_retval=0;

	int int_num = 0;

	char **temp;
	char *y;
   char chr_uname[APL_USERID_LEN] = APL_NULL_STRING;
   char chr_custody_id_b[APL_USERID_LEN] = APL_NULL_STRING;
   char chr_passwd[APL_PASSWD_LEN] = APL_NULL_STRING;
	char chr_l_inifile[PATH_LENGTH] = APL_NULL_STRING;

   EXEC SQL VAR chr_uname IS STRING;
   EXEC SQL VAR chr_passwd IS STRING;

	sqlca.sqlcode = 0;
	
	memset(&l_intl_env_data_h, NULL, sizeof(INTL_ENV_DATA_STRUCT_H));

	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

	strcpy(chr_p_maindate,APL_NULL_STRING);
	strcpy(chr_p_othdate,APL_NULL_STRING);

	

	if ( ( l_finifile=fopen(chr_l_inifile,"r") ) == NULL)
	{
		APL_GOBACK_FAIL
	}

	

	
	APL_FETCH_DB_LOGIN_DETAILS(l_finifile, chr_custody_id_b, chr_uname, chr_passwd, APL_OUT_FILE, &l_debug_info_ptr)

   EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;
   if (sqlca.sqlcode)
   {
   
      APL_GOBACK_FAIL
   }
   else
   {
		
		if (APL_FAILURE == CO_Rtv_RptFileName(	"3L",
														APL_LOGFILE_DESC,
														100,
														argv[5],
														argv,
														&l_logfile,
														&l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL
		}

		



		EXEC SQL COMMIT WORK;




		if (sqlca.sqlcode)
		{
			CO_ProcMonitor(l_logfile, "Could not commit after opening chr_log file", NULL, NULL);
			CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
			APL_GOBACK_FAIL
		}

		

		if (APL_FAILURE == CO_SplitStr(	argv[9],
													'|',
													&int_num,
													&temp ))
		{
			CO_ProcMonitor(l_logfile, "String Split Function returned failure : Exiting", NULL, NULL);
			CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
			APL_GOBACK_FAIL
		}
  
		
      if (int_num != 3)
      {
      
      
			CO_ProcMonitor(l_logfile, "Mandatory Data Missing : Both Dates. Exiting", NULL, NULL);
			CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
			APL_GOBACK_FAIL
		}

      strcpy(chr_p_maindate, temp[0]);
      strcpy(chr_p_othdate, temp[1]);
		
      strcpy(chr_p_typeofinstr,temp[2]);
      

		strcpy(l_intl_env_data_h.usr, argv[3]);
		strcpy(l_intl_env_data_h.h_mode, argv[4]);
		strcpy(l_intl_env_data_h.processtion, argv[5]);
		strcpy(l_intl_env_data_h.auth_req, argv[6]);
		strcpy(l_intl_env_data_h.subprocess, argv[7]);
		strcpy(l_intl_env_data_h.h_process, argv[8]);

		

		if (APL_FAILURE == CO_RtvSysParams(&l_debug_info_ptr))
		{
			CO_ProcMonitor(l_logfile, "Could not get System Params", NULL, NULL);
			CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
			APL_GOBACK_FAIL
		}

	
		int_l_retval = DL_Proc_GbRst(chr_p_maindate, chr_p_othdate,chr_p_typeofinstr[0], argv, l_logfile, &l_intl_env_data_h, &l_debug_info_ptr);

      if ( int_l_retval == APL_FAILURE )
      {
			CO_ProcMonitor(l_logfile, "CDBGRstFn returned Failure", NULL, NULL);
			CO_ProcMonitor(l_logfile, "Rolling Back", NULL, NULL);
			CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
			EXEC SQL ROLLBACK WORK RELEASE;
         APL_GOBACK_FAIL
      }
      else
      {
         
         EXEC SQL UPDATE SYS_BATCHPROC
         SET  status = 'completed'
         WHERE PROCESS_NAME=:argv[0]
         AND   PROC_INIT=:argv[1]
         AND   STARTDATE=:argv[2]
         AND   STATUS='started';


   		if (sqlca.sqlcode)
   		{
				CO_ProcMonitor(l_logfile, "Could Not Update Batch_in_proc", NULL, NULL);
				CO_ProcMonitor(l_logfile, "Rolling Back", NULL, NULL);
				CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
				EXEC SQL ROLLBACK WORK RELEASE;
      		APL_GOBACK_FAIL
   		}

         EXEC SQL COMMIT WORK RELEASE;
			if (sqlca.sqlcode)
			{
				CO_ProcMonitor(l_logfile, "Could not do final commit", NULL, NULL);
				CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
				EXEC SQL ROLLBACK WORK RELEASE;
      		APL_GOBACK_FAIL
   		}

         APL_GOBACK_SUCCESS
      }
   }


	RETURN_SUCCESS : exit(0);
	RETURN_FAILURE : exit(-1);
}

int DL_Proc_GbRst(char *chr_p_maindate,
			 char *chr_p_othdate,char chr_p_typeofinstr,
		char **argv,
		FILE *p_logfile,
		INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
		DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

  

  FILE *l_fp_match   = NULL;

  struct sqlca sqlca;	

  char chr_l_now[APL_DATE_LEN] = APL_NULL_STRING;

  char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	char l_temp_processing_status[51] = APL_NULL_STRING;

  int int_l_error_flag = APL_SUCCESS;
  int int_l_chkflg = 0;
  int int_l_no_match = 0;
  int int_l_no_unmatch = 0;
//Added by Kapil (ISKB_456): 17/09/2007
  short int l_temp_ind =0 ;	
  sqlca.sqlcode = 0;


// Modified by Kapil (ISKB_456):   17-09-2007 Start
  EXEC SQL SELECT PROCESSING_STATUS into :l_temp_processing_status : l_temp_ind
     FROM SYS_BATCHPROC
     WHERE PROCESS_NAME=:argv[0]
        AND   PROC_INIT=:argv[1]
        AND   TO_CHAR(STARTDATE,'dd/mm/yyyy hh24:mi:ss')=:argv[2]
        AND   STATUS='started'
     FOR UPDATE OF PROCESSING_STATUS,STATUS;


  if(APL_ZERO_RESULT_SET) 
 	{
      	CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
        APL_GOBACK_FAIL
        }

  IS_ANY_ORA_ERROR
	
   
/** ISKB_456:AmitB:17-09-07  **/
/**   if ((!strlen(chr_p_maindate)) && (!strlen(chr_p_othdate)))  **/
   if (!strlen(chr_p_maindate))
      {
      APL_DATA_MISSING("Settlement Date", APL_NULL_STRING, APL_NULL_STRING);
	int_l_error_flag = APL_FAILURE;
      } 
 
	

   if ( (chr_p_typeofinstr != 'B') && (chr_p_typeofinstr != 'S') && (chr_p_typeofinstr != 'A') )
   {
      APL_DATA_MISSING("Instrument Type", APL_NULL_STRING, APL_NULL_STRING);
      int_l_error_flag = APL_FAILURE;
   }

   if (APL_FAILURE == int_l_error_flag) APL_GOBACK_FAIL


   

   

   if (APL_FAILURE == CO_Rtv_RptFileName(	"RG", 
				"Trade Settlement Globally Reset ",
				160,
				argv[5],
				argv,
				&l_fp_match,
				l_debug_info_ptr ))
      {
      APL_GOBACK_FAIL
      }

		if (APL_FAILURE == DL_Prnt_GbRstRpt_Hdr(l_fp_match,chr_p_typeofinstr,l_debug_info_ptr))
      {
      APL_GOBACK_FAIL
      }

	
   memset(chr_l_buf, APL_NULL_CHAR, BUFFER_LEN);
   sprintf(chr_l_buf, "Starting Reset of settlement for trades with instrument type (%c)\n", chr_p_typeofinstr);
	CO_ProcMonitor(p_logfile,chr_l_buf,l_debug_info_ptr, p_intl_envdatastruct_h);


   if (APL_FAILURE == DL_Proc_GbRst_MnDt_SetlDt(chr_p_maindate,
				chr_p_othdate,
				chr_p_typeofinstr,
				l_fp_match,
				p_logfile,
				&int_l_no_match,
				argv,
				p_intl_envdatastruct_h,
				l_debug_info_ptr ))
      {
      APL_GOBACK_FAIL
      }

   APL_GOBACK_SUCCESS

     RETURN_SUCCESS :

	CO_ProcMonitor(p_logfile,"No More trades to reset",l_debug_info_ptr,p_intl_envdatastruct_h);
   DL_Prnt_GbRstRpt_Line(l_fp_match);
	CO_ProcMonitor(p_logfile,"Leaving DL_Proc_GbRst Successfully",l_debug_info_ptr,p_intl_envdatastruct_h);
   if (APL_FAILURE == CO_Proc_RptClose(l_fp_match,l_debug_info_ptr)) 
      {
      APL_GOBACK_FAIL
      }
   return(APL_SUCCESS);

    RETURN_FAILURE :

   DL_Prnt_GbRstRpt_Line(l_fp_match);
	CO_ProcMonitor(p_logfile,"No More trades to reset",l_debug_info_ptr,p_intl_envdatastruct_h);
	CO_ProcMonitor(p_logfile,"Failed in CDBGRstFn",l_debug_info_ptr,p_intl_envdatastruct_h);
   CO_Proc_RptClose(l_fp_match, l_debug_info_ptr); 
   return(APL_FAILURE);

}

int DL_Prnt_GbRstRpt_Hdr(   FILE *fp,char chr_p_typeofinstr,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	int i;
	char chr_l_h_codedesc[41] =APL_NULL_STRING;
  char chr_l_typeofinstr[MT_INSTR_TYPE_LEN] = APL_NULL_STRING; // AIX - Warnings

  sprintf(chr_l_typeofinstr,"%c",chr_p_typeofinstr); // AIX - Warnings

   EXEC SQL SELECT MAP_DESC INTO :chr_l_h_codedesc
            FROM PRO_SGENSTAT
            WHERE MAP_TYPE='GR_ACCENT'
            AND MAP_VAL =:chr_p_typeofinstr;
   IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_VAL_NF,
                                           "Code Desc",
                                           //chr_p_typeofinstr,
                                           chr_l_typeofinstr, // AIX - Warnings
                                           APL_NULL_STRING)

	


	for (i=0;i<109;fprintf(fp, "-"),i++);
	fprintf(fp, "\n\t\t\t\t\tSettlement Reset Trade Report\n");
	fprintf(fp,"\t\t\t\t\t      %s\n",chr_l_h_codedesc);
	for (i=0;i<109;fprintf(fp, "-"),i++);
	fprintf(fp, "\n\nAccount     Reference No.     ASD        Instrurity                  Quantity ");
	fprintf(fp, "            Amount Txn Settle Dt.\n");
	for (i=0;i<109;fprintf(fp, "-"),i++);
	fprintf(fp, "\n");
	
   APL_GOBACK_SUCCESS
RETURN_SUCCESS:
   return(APL_SUCCESS);
RETURN_FAILURE:
   return(APL_FAILURE);
}

int DL_Prnt_GbRstRpt_Line(	FILE *fp)
{
	int i;
	for (i=0;i<107;fprintf(fp, "-"),i++);
	fprintf(fp,"\n");
	return(1);
}
