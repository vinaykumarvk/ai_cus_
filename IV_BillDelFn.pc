




#include "stdio_64.h"
#include <unistd.h> 
#include <math.h>   
#include <string.h> 
#include <stdlib.h> 
#include <fcntl.h> /*Added for Linux Mig -Kotubabu*/

#include "IV_Control_A.h"

EXEC SQL INCLUDE SQLCA;

// AIX - Warnings
extern int IV_Rtv_IVCUSTSETUP(char *h_client, 
			                        IV_CLIENTSETUP_STRUCT *l_iv_cltsetup_struct, 
			                        int *int_l_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

int IV_Delivery(const char **p_argv, FILE *p_userlogflptr, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	extern int CO_Pro_DateComp(char *chr_l_fromdate, char *chr_l_todate, 
				int *int_l_diff, DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	extern int IV_Rtv_IVCNTLPARAM(SYS_IVCONTROLPARAM_STRUCT *l_sys_ivcontrol_param_struct,
				 int *int_l_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	extern int IV_Rtv_IsExistUUAccounts(FILE *l_errorlogflptr, 
					 DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	extern int IV_Proc_PassBillLedgerEntry(const char *chr_l_sys_date, 
					 const char *h_client, 
					 const long h_servcode, 
					 const double l_servbillamount, 
					 const char *h_blccycode, 
					 DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	extern int IV_Proc_ConvToFxFn(char *chr_l_from_ccy, char *chr_l_to_ccy, char *l_dom_ccy,
			      char *chr_l_sys_date, double *l_exchgrt, 
			      int *int_l_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	extern int IV_Proc_PassCreditLedgerEntry(const char *h_client, 
					   const char *chr_l_sys_date, 
					   const double h_remcreditamt, 
					   const char *h_blccycode, 
					   DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	extern int IV_Proc_AdjOverbillAmount(const char *chr_l_client, 
				     const double l_overbillamount, 
				     const char *l_blccycode, 
				     int *int_l_retstat, 
				     DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	extern int IV_Rtv_IVLEDGERMaxPymtSeqNum(const char *chr_l_client, 
						const char *chr_l_sys_date, 
						int *int_l_maxpymntseqnum, 
						int *int_l_retstat, 
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	extern int IV_Proc_CurrPrdPymnt(const char *chr_l_client, 
				   const char *chr_l_sys_date, 
				   const char *l_ledg_date, 
				   const double l_creditamount, 
				   const char *l_blccycode, 
				   const int int_l_newpymntseqnum, 
				   int *int_l_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	extern int IV_Rtv_ValDt(char *chr_l_value_date, int *int_l_retstat, 
				   DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	extern int IV_Proc_MakeDirectDebitPymt(const IV_CHEQUE_STRUCT *l_iv_cheque_struct, 
					int *int_l_retstat, 
					DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	extern int IV_Mod_IVBCUSTSETUPAmt(const IV_CLIENTSETUP_STRUCT *l_iv_cltsetup_struct, 
					 int *int_l_retstat, 
					 DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	extern int IV_Mod_BYRACT(const int chr_l_bl_upto_dt_yyyy, 
				 const int chr_l_bl_upto_dt_mm, const char l_typeind, 
				 const double l_yearlybillamount, 
				 int *int_l_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	extern int IV_Proc_Tlx(char *chr_l_client, char *l_str_bill_date, 
			   FILE **l_file_bill_printout, FILE *l_file_logfile, 
			   FILE *l_file_user_logfile,
			   DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	extern int IV_Proc_CalcIVBCNTLPARAMNxtIVDlvDt(SYS_IVCONTROLPARAM_STRUCT *l_sys_ivcontrol_param_struct,
				 int *int_l_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	extern int IV_Mod_IVCNTLPARAM(SYS_IVCONTROLPARAM_STRUCT *l_sys_ivcontrol_param_struct, 
				 int *int_l_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	extern int CO_Rtv_RptFileName(char *chr_rep_st, char *chr_rep_desc, 
				   int rep_widateh, char *func_desc, 
				   char **argv, FILE **file_handle, 
				   DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	extern int CO_Rtv_FileNm_From_Pointer(FILE *fp, char *directorypath, 
					   char *chr_fl_name);

	extern int CO_Round(double chr_p_val, int p_rec, double *int_p_retval);

   	extern int IV_Rtv_MastAcc(const char *chr_l_client, char *chr_l_mstacc,
                int *int_l_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr); 	/* Bageshri HB_IV_004 */
	
	extern int IV_Mod_SubAccBillDlvDt(char *chr_l_client, char *chr_l_sys_date,
                int *int_l_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr); 	/* Bageshri HB_IV_004 */

	char chr_l_sesaminipath[PATH_LENGTH];
	char chr_l_bl_upto_dt_mm[3], chr_l_bl_upto_dt_yyyy[5];
	//char chr_l_pymnt_mm[3], chr_l_pymnt_yyyy[5];
	char chr_l_value_date[APL_DATE_LEN], chr_l_sys_date[APL_DATE_LEN];
	char chr_l_temp_date[APL_DATE_LEN], *chr_l_last = (char *)NULL;
	char chr_l_isopenacccursor = 'N', chr_l_isopenservcursor = 'N';
	char chr_l_sesamlogdirpath[PATH_LENGTH],chr_l_temp_sesamlogdirpath[PATH_LENGTH];
	char chr_l_blprusrlogflnm[PATH_LENGTH], chr_l_blprerrlogflnm[PATH_LENGTH];
	char chr_l_cod_servbillamt[20] = APL_NULL_STRING;
	char chr_g_bill_dlv_ind[2] = "N";	/* Bageshri HB_IV_004 */
	char *chr_l_bill_dlv_ind = NULL;	/* Bageshri HB_IV_004 */
	char *chr_l_cln_str = NULL;		/* Bageshri HB_IV_004 */
	char *chr_l_proc_cln = NULL;		/* Bageshri HB_IV_004 */


	int int_l_servfetchcount = 0, int_l_diff = 0;
	int int_l_retstat = 0, int_l_commitcounter = 0;
	int int_l_maxpymntseqnum = 0, int_l_newpymntseqnum = 0;
	int int_retservbillamt = 0;
	int int_h_count = 0;
	int int_bl_err_level = 0;		/* Bageshri HB_IV_004 */
	int int_bl_err_tot = 0;			/* Bageshri HB_IV_004 */


	double l_exchgrt = 0.0, l_totbillamount = 0.0;
	double l_totosamount = 0.0, l_newtotosamount = 0.0;
	double l_overbilladjamount = 0.0, l_creditadjamount = 0.0;
	double l_servbillamount = 0.0, l_overbillamount = 0.0;
	double l_osamounttoadjust = 0.0, l_prevcreditamount = 0.0;
	double l_yearlybillamount = 0.0, l_yearlypymntamount = 0.0;
	double l_yearlypymntamount2 = 0.0;
	double l_adjamount = 0.0, l_remcreditamount = 0.0, l_directdbpymntamount = 0.0;
	double l_roundedamount_a = 0.0; 
   short l_eu_condexists = 0; 

	//IV_CHEQUE_STRUCT l_iv_cheque_struct;
	IV_CLIENTSETUP_STRUCT l_iv_cltsetup_struct;
	INTL_ENV_DATA_STRUCT_H l_intl_env_data_h;
	FILE *l_errorlogflptr = (FILE *)NULL, *l_SesamIniFlPtr = (FILE *)NULL;
	FILE *l_BlPrFlPtr = (FILE *)NULL; 
	FILE *l_BlPrErrLogFlPtr = (FILE *)NULL;
	FILE *l_BlPrUsrLogFlPtr = (FILE *)NULL;
	FILE *l_user_logfile = p_userlogflptr;   /* Bageshri HB_IV_004 */

	EXEC SQL BEGIN DECLARE SECTION;

		char chr_h_consind, chr_h_batch_in_proc_rowid[APL_ROWID_LEN];
		EXEC SQL VAR chr_h_batch_in_proc_rowid IS STRING;

		char chr_h_custblccycode[APL_CCYCODE_LEN];
		char chr_h_acccustblccycode[APL_CCYCODE_LEN]; 
		EXEC SQL VAR chr_h_custblccycode IS STRING;
		EXEC SQL VAR chr_h_acccustblccycode IS STRING; 

		int int_h_bselclients_count = 0;
		int int_h_decimallenccy = 0; 

		SYS_IVCONTROLPARAM_STRUCT l_sys_ivcontrol_param_struct;
		EXEC SQL VAR l_sys_ivcontrol_param_struct.b_prev_date IS STRING;
		EXEC SQL VAR l_sys_ivcontrol_param_struct.b_upto_date IS STRING;
		EXEC SQL VAR l_sys_ivcontrol_param_struct.b_processdt IS STRING;
		EXEC SQL VAR l_sys_ivcontrol_param_struct.b_dlv_date IS STRING;
		EXEC SQL VAR l_sys_ivcontrol_param_struct.last_dlv_date IS STRING;
		EXEC SQL VAR l_sys_ivcontrol_param_struct.archival_dt IS STRING;
		EXEC SQL VAR l_sys_ivcontrol_param_struct.last_rpt_date IS STRING;

		SYS_BATCHPROC_STRUCT_H l_sys_batchproc_struct_h;
		EXEC SQL VAR l_sys_batchproc_struct_h.process_name IS STRING;
		EXEC SQL VAR l_sys_batchproc_struct_h.start_dt IS STRING;
		EXEC SQL VAR l_sys_batchproc_struct_h.status_ind IS STRING;
		EXEC SQL VAR l_sys_batchproc_struct_h.proc_init IS STRING;
		EXEC SQL VAR l_sys_batchproc_struct_h.processing_status IS STRING;
		EXEC SQL VAR l_sys_batchproc_struct_h.usr IS STRING;
		EXEC SQL VAR l_sys_batchproc_struct_h.stat_det IS STRING;

		struct{
			char client[APL_CLIENT_LENGTH];
			char master_clt[APL_CLIENT_LENGTH];
			char b_gen_ind;
			char b_ccycd[APL_CCYCODE_LEN]; 
		      } h_AccStruct; 
		EXEC SQL VAR h_AccStruct.client IS STRING;
		EXEC SQL VAR h_AccStruct.master_clt IS STRING;
		EXEC SQL VAR h_AccStruct.b_ccycd IS STRING; 

		struct{
			long service_cd;
			double comm_amt;
			double nil_fees_adj;
			double minimumfee_adj;
			double maximum_fee_adj;
			char b_ccycd[APL_CCYCODE_LEN];
		      } h_ServStruct;
		EXEC SQL VAR h_ServStruct.b_ccycd IS STRING;

		struct{
			short int i_dl_client;
			short int i_mstclt;
			short int i_b_gen_flag;
			short int i_bl_currencycode; 
		      } i_AccStruct = {0, 0, 0, 0}; 
		struct{
			short int i_service_cd;
			short int i_cm_amount;
			short int int_i_nilfeeadj;
			short int int_i_minfeeadj;
			short int int_i_maxfeeadj;
			short int i_bl_currencycode;
		      } i_ServStruct = {0, 0, 0, 0, 0, 0};

		short int int_i_decimallenccy = 0;
		short int int_i_batch_in_proc_rowid = 0;
		SYS_BATCHPROC_STRUCT_I l_sys_batchproc_struct_i = {0, 0, 0, 0, 0, 0};

		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	memset(chr_l_sesaminipath, APL_NULL_CHAR, PATH_LENGTH);

	memset(chr_l_sys_date, APL_NULL_CHAR, APL_DATE_LEN);
	memset(chr_l_bl_upto_dt_mm, APL_NULL_CHAR, 3);
	memset(chr_l_bl_upto_dt_yyyy, APL_NULL_CHAR, 5);

	memset(chr_h_batch_in_proc_rowid, APL_NULL_CHAR, APL_ROWID_LEN);
	memset(l_sys_batchproc_struct_h.process_name, APL_NULL_CHAR, 41);
	memset(l_sys_batchproc_struct_h.processing_status, APL_NULL_CHAR, 51);
	memset(l_sys_batchproc_struct_h.proc_init, APL_NULL_CHAR, 41);
	memset(l_sys_batchproc_struct_h.status_ind, APL_NULL_CHAR, 11);
	memset(l_sys_batchproc_struct_h.start_dt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_sys_batchproc_struct_h.usr, APL_NULL_CHAR, APL_USERID_LEN);
	memset(l_sys_batchproc_struct_h.stat_det, APL_NULL_CHAR, 71);

	memset(l_intl_env_data_h.usr, APL_NULL_CHAR, 15);
	memset(l_intl_env_data_h.h_mode, APL_NULL_CHAR, 4);
	memset(l_intl_env_data_h.processtion, APL_NULL_CHAR, 61);
	memset(l_intl_env_data_h.auth_req, APL_NULL_CHAR, 2);
	memset(l_intl_env_data_h.subprocess, APL_NULL_CHAR, 4);
	memset(l_intl_env_data_h.h_process, APL_NULL_CHAR, 2);

	memset(chr_l_sesamlogdirpath, APL_NULL_CHAR, PATH_LENGTH);
	memset(chr_l_temp_sesamlogdirpath, APL_NULL_CHAR, PATH_LENGTH);
	memset(chr_l_blprerrlogflnm, APL_NULL_CHAR, PATH_LENGTH);
	memset(chr_l_blprusrlogflnm, APL_NULL_CHAR, PATH_LENGTH);

	strcpy(chr_l_sys_date, p_argv[2]);

	

	strcpy(chr_l_sys_date, strtok(chr_l_sys_date, " "));
	strcat(chr_l_sys_date, APL_NULL_TIME);

	strcpy(chr_l_sesaminipath, getenv("INTL_ROOT_PATH"));
	strcat(chr_l_sesaminipath, "intl_sun.cfg");

	if ( (l_SesamIniFlPtr = fopen(chr_l_sesaminipath, "r")) == (FILE *)NULL )
	{
		fprintf(APL_OUT_FILE, "CanErroonot open intl_sun.cfg\n");

		APL_GOBACK_FAIL
	}
	
	if( APL_FAILURE == CO_ReadToken(l_SesamIniFlPtr, "INTL_LOG_PATH", 
					chr_l_sesamlogdirpath, l_debug_info_ptr) )
	{
		fprintf(APL_OUT_FILE, "Environment variable INTL_LOG_PATH not found intl_sun.cfg.\n");

		APL_GOBACK_FAIL
	}

	fclose(l_SesamIniFlPtr);

	

	if ( APL_FAILURE == CO_Rtv_RptFileName("1E", "Technical Log File", 100, 
					    (char *)p_argv[5], (char **)p_argv, //AIX Warning Removal 
					    &l_errorlogflptr, l_debug_info_ptr) )
	{
		fprintf(APL_OUT_FILE, "Could not open user chr_log h_file.\n");

		APL_GOBACK_FAIL
	}

	fprintf(l_errorlogflptr, "------------------Bill Delivery Technical Log File -------------------------------\n\n");

	/****************** Bageshri HB_IV_004 : To skip Telex message generation ***********/

	IF_COND_NOT_EXISTS("IV_DELIVERY","NO_TELEX_MSG")
	{
		if (APL_FAILURE == CO_Rtv_RptFileName("1L", APL_LOGFILE_DESC, 100, "BlTlx",
					NULL, &l_BlPrFlPtr, l_debug_info_ptr))
		{
			fprintf(l_errorlogflptr, "Could not open temporary h_file for \
					printing bills.\n");

			fflush(l_errorlogflptr);

			APL_GOBACK_FAIL
		}

		if ( APL_FAILURE == CO_Rtv_RptFileName("1M", APL_LOGFILE_DESC, 100, 
					"BlTlx", NULL, &l_BlPrErrLogFlPtr, 
					l_debug_info_ptr) )
		{
			fprintf(l_errorlogflptr, "Could not Error Log h_file for Bill \
					Printing program.\n");

			fflush(l_errorlogflptr);

			APL_GOBACK_FAIL
		}
		if ( APL_FAILURE == CO_Rtv_FileNm_From_Pointer(l_BlPrErrLogFlPtr, 
					chr_l_sesamlogdirpath, 
					chr_l_blprerrlogflnm) )
		{
			APL_GOBACK_FAIL
		}

		sprintf(chr_l_temp_sesamlogdirpath, "%s/%s", chr_l_sesamlogdirpath, 
				chr_l_blprerrlogflnm);

		strcpy(chr_l_blprerrlogflnm, chr_l_temp_sesamlogdirpath);

		if ( APL_FAILURE == CO_Rtv_RptFileName("1N", APL_LOGFILE_DESC, 100, 
					"BlTlx", NULL, &l_BlPrUsrLogFlPtr, 
					l_debug_info_ptr) )
		{
			fprintf(l_errorlogflptr, "Could not User Log h_file for Bill \
					Printing program.\n");

			fflush(l_errorlogflptr);

			APL_GOBACK_FAIL
		}
		if ( APL_FAILURE == CO_Rtv_FileNm_From_Pointer(l_BlPrUsrLogFlPtr, 
					chr_l_sesamlogdirpath, 
					chr_l_blprusrlogflnm) )
		{
			APL_GOBACK_FAIL
		}

		memset(chr_l_temp_sesamlogdirpath, APL_NULL_CHAR, PATH_LENGTH);

		sprintf(chr_l_temp_sesamlogdirpath, "%s/%s", chr_l_sesamlogdirpath, 
				chr_l_blprusrlogflnm);

		strcpy(chr_l_blprusrlogflnm, chr_l_temp_sesamlogdirpath);


		fclose(l_BlPrErrLogFlPtr);

		l_BlPrErrLogFlPtr = (FILE *)NULL;

		if ( (FILE *)NULL == 
				(l_BlPrErrLogFlPtr = fopen(chr_l_blprerrlogflnm, "a")) )
		{
			fprintf(l_errorlogflptr, "Failed to reopen Bill Printing Error Log h_file in append h_mode.\n");

			fflush(l_errorlogflptr);

			APL_GOBACK_FAIL
		}

		fclose(l_BlPrUsrLogFlPtr);

		l_BlPrUsrLogFlPtr = (FILE *)NULL;

		if ( (FILE *)NULL == 
				(l_BlPrUsrLogFlPtr = fopen(chr_l_blprusrlogflnm, "a")) )
		{
			fprintf(l_errorlogflptr, "Failed to reopen Bill Printing User Log h_file in append h_mode.\n");

			fflush(l_errorlogflptr);

			APL_GOBACK_FAIL
		}
	}
	else
		fprintf(l_errorlogflptr, "Bank specific : Skipped Telex Message Generation\n");

	/********************* Bageshri HB_IV_004 END *****************************/


	EXEC SQL COMMIT;

     
	IS_ANY_ORA_ERROR

	strcpy(l_sys_batchproc_struct_h.process_name, p_argv[0]);
	strcpy(l_sys_batchproc_struct_h.proc_init, p_argv[1]);
	strcpy(l_sys_batchproc_struct_h.start_dt, p_argv[2]);
	strcpy(l_sys_batchproc_struct_h.status_ind, "started");

	strcpy(l_intl_env_data_h.usr, p_argv[3]);

	EXEC SQL SELECT ROWID, PROCESS_NAME, STARTDATE, STATUS, 
			PROC_INIT, PROCESSING_STATUS, USR, EOD_BOD_IND, STAT_DET
		 INTO :chr_h_batch_in_proc_rowid INDICATOR :int_i_batch_in_proc_rowid, 
		      :l_sys_batchproc_struct_h INDICATOR :l_sys_batchproc_struct_i
		 FROM SYS_BATCHPROC
		 WHERE ((PROCESS_NAME = :l_sys_batchproc_struct_h.process_name) AND
			(STARTDATE = :l_sys_batchproc_struct_h.start_dt) AND
			(STATUS = :l_sys_batchproc_struct_h.status_ind))
		 FOR UPDATE OF PROCESSING_STATUS;

	IS_ANY_ORA_ERROR
	if ( l_sys_batchproc_struct_i.i_restart_info == -1 )
	{
		strcpy(l_sys_batchproc_struct_h.processing_status, " ");
	}

	APL_IF_DEBUG
	{
		if ( l_sys_batchproc_struct_i.i_restart_info != -1 )
		{
			char chr_l_buffer[BUFFER_LEN];

			memset(chr_l_buffer, APL_NULL_CHAR, BUFFER_LEN);

			sprintf(chr_l_buffer, "Found Restart Data. Account: %s\n", 
					l_sys_batchproc_struct_h.processing_status);

			CO_ProcMonitor(l_errorlogflptr, chr_l_buffer, 
					(DEBUG_INFO_STRUCT_H **)NULL, 
					(INTL_ENV_DATA_STRUCT_H *)NULL);

			fflush(l_errorlogflptr);
		}
	}

	int_l_retstat = 0;

	/****************** Bageshri HB_IV_004 : Client wise Delivery ***********/

	chr_l_bill_dlv_ind = strtok_r((char *)p_argv[9],",",&chr_l_cln_str);//Changes done for AIX Migration

	if (!chr_l_bill_dlv_ind)
	{
		fprintf(l_errorlogflptr,"Mandatory Data : Bill Delivery Indicator is not passed\n");
		fprintf(l_user_logfile,"Mandatory Data : Bill Delivery Indicator is not passed\n");
		APL_DATA_MISSING("Bill Delivery Indicator",APL_NULL_STRING,APL_NULL_STRING);
		APL_GOBACK_FAIL
	}

	/********************* Bageshri HB_IV_004 END *****************************/

	if ( APL_FAILURE == IV_Rtv_IVCNTLPARAM(&l_sys_ivcontrol_param_struct, &int_l_retstat, 
				l_debug_info_ptr) )
	{
		if ( int_l_retstat == IV_NO_DATA_FOUND_ERR )
		{
			CO_InsertErr(l_debug_info_ptr, ERR_BILLCNTRL_PARAM_NOTFND, 
					APL_NULL_STRING, APL_NULL_STRING, 
					APL_NULL_STRING, __LINE__, __FILE__);
			fprintf(l_user_logfile,"Error : Billing Control Parameters not found\n");
		}

		if ( int_l_retstat != IV_COLUMN_NULL_ERR )
		{
			fprintf(l_errorlogflptr,"Error : Billing control parameters not set properly, Table SYS_IVCONTROLPARAM\n");
			fprintf(l_user_logfile,"Error : Billing control parameters not set properly. Please contact support.\n");
			APL_GOBACK_FAIL
		}
	}

	EXEC SQL SELECT NVL(COUNT(*), 0) INTO :int_h_bselclients_count
		FROM IV_SELCLIENT;

	IS_ANY_ORA_ERROR

		if ( l_sys_ivcontrol_param_struct.generate_ind != 'Y' )
		{
			fprintf(l_errorlogflptr,"Error : Bills are not generated successfully.\n");
			fprintf(l_user_logfile,"Error : Bills are not generated.\n");
			CO_InsertErr(l_debug_info_ptr, ERR_BILLS_NOT_GENERATED, APL_NULL_STRING,
					APL_NULL_STRING, APL_NULL_STRING,
			       __LINE__, __FILE__);
	}

	
	/*********** Bageshri HB_IV_004 : commented as GPSS file generation not used now ************/
	fprintf(l_errorlogflptr, "Skipped GPSS File Generation check\n");

	/*if ( l_sys_ivcontrol_param_struct.b_gen_ind != 'Y' )
	{
		CO_InsertErr(l_debug_info_ptr, ERR_GPSSFILE_NOTGEN, APL_NULL_STRING,
			       APL_NULL_STRING, APL_NULL_STRING,
			       __LINE__, __FILE__);
	}*/

	if ( l_sys_ivcontrol_param_struct.ae_ind != 'Y' )
	{
		fprintf(l_errorlogflptr,"Error : Accounting entries are not processed.\n");
		fprintf(l_user_logfile,"Error : Accounting entries are not processed.\n");
		CO_InsertErr(l_debug_info_ptr, ERR_ACTGENTRY_NOTGEN, APL_NULL_STRING,
			       APL_NULL_STRING, APL_NULL_STRING,
			       __LINE__, __FILE__);
	}

	if (int_h_bselclients_count != 0)
	{
		CO_InsertErr(l_debug_info_ptr, ERR_BILLREGN_NOTCOMPLETE, APL_NULL_STRING,
			       APL_NULL_STRING, APL_NULL_STRING,
			       __LINE__, __FILE__);
	}

		if ( (APL_SUCCESS == CO_Pro_DateComp(l_sys_ivcontrol_param_struct.b_dlv_date, chr_l_sys_date, 
						&int_l_diff, l_debug_info_ptr)) && 
				(int_l_diff < 0) ) 
		{
			fprintf(l_errorlogflptr,"Error : Bill Delivery is not due today.It is due on |%s|\n",l_sys_ivcontrol_param_struct.b_dlv_date);
			fprintf(l_user_logfile,"Error : Bill Delivery is not due today.It is due on %s\n",l_sys_ivcontrol_param_struct.b_dlv_date);

			CO_InsertErr(l_debug_info_ptr, ERR_BILLDLV_NOTDUE, l_sys_ivcontrol_param_struct.b_dlv_date,
					APL_NULL_STRING, APL_NULL_STRING,
					__LINE__, __FILE__);

		}
	if ( APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr) )
	{
		CO_ProcMonitor(l_errorlogflptr, APL_NULL_STRING, l_debug_info_ptr, 
			 (INTL_ENV_DATA_STRUCT_H *)NULL);

		fflush(l_errorlogflptr);

                APL_IF_DEBUG
		{
                        CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
 IV_Delivery().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);

			fflush(l_errorlogflptr);
                }

		CO_FreeErrLst(l_debug_info_ptr);

		APL_GOBACK_FAIL
	}

	if (!strcmp(chr_l_bill_dlv_ind,"Y"))		/* Bageshri HB_IV_004 : Client wise Delivery */
	{
		fprintf(l_errorlogflptr,"************** Bill delivery processing for all clients *****************\n");
		fprintf(l_user_logfile,"************** Bill delivery processing for all clients *****************\n");
		if ( APL_SUCCESS == 
				IV_Rtv_IsExistUUAccounts(l_errorlogflptr, l_debug_info_ptr) )
		{


			CO_InsertErr(l_debug_info_ptr, ERR_UNAUTH_CLIENT, APL_NULL_STRING,
					APL_NULL_STRING, APL_NULL_STRING,
					__LINE__, __FILE__);

			CO_ProcMonitor(l_errorlogflptr, "Error : Unauthorised Accounts exist.\n", 
					(DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
			fprintf(l_user_logfile, "Error : Billing Client Setup details not authorized for all clients.\n");

			fflush(l_errorlogflptr);

			APL_IF_DEBUG
			{
				CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
						IV_Delivery().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
			}

			CO_FreeErrLst(l_debug_info_ptr);

			APL_GOBACK_FAIL
		}
		else if ( APL_SUCCESS ==  CO_ChkErr(*l_debug_info_ptr) )
		{
			APL_GOBACK_FAIL
		}
	}
	else
	{
		fprintf(l_errorlogflptr,"************** Bill delivery processing for selected clients *****************\n");
		fprintf(l_user_logfile,"************** Bill delivery processing for selected clients *****************\n");
	}



     

	strcpy(chr_l_temp_date, l_sys_ivcontrol_param_struct.b_upto_date);
	strtok_r(chr_l_temp_date, "/", &chr_l_last);
	strcpy(chr_l_bl_upto_dt_mm, strtok_r((char *)NULL, "/", &chr_l_last));
	strcpy(chr_l_bl_upto_dt_yyyy, strtok_r((char *)NULL, " ", &chr_l_last));

	memset(chr_l_value_date, APL_NULL_CHAR, APL_DATE_LEN);



	int_l_retstat = 0;

	if (APL_FAILURE == 
			IV_Rtv_ValDt(chr_l_value_date, &int_l_retstat, l_debug_info_ptr))
	{
		CO_ProcMonitor(l_errorlogflptr, "Error : Failed to obtain the Value Date.\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
			fprintf(l_user_logfile, "Error : Failed to obtain Value Days from Billing Setup Parameter.\n");

		fflush(l_errorlogflptr);

		APL_GOBACK_FAIL
	}



	EXEC SQL SELECT DEC_LEN
		INTO :int_h_decimallenccy INDICATOR :int_i_decimallenccy
		FROM DL_CURRENCY
		WHERE CURRENCY_CD = :l_invoice_systemparam_struct_h.b_ccy;

	IS_ANY_ORA_ERROR

	/****************** Bageshri HB_IV_004 : Client wise Delivery ***********/

	if (!strcmp(chr_l_bill_dlv_ind,"N"))
	{
		while ( ((chr_l_proc_cln = strtok_r(NULL,";",&chr_l_cln_str)) != NULL) && chr_l_cln_str != NULL ) 
		{
		int_bl_err_level = 0;

		l_totosamount = 0.0;

		fprintf(l_errorlogflptr, "\nNow processing client %s\n", chr_l_proc_cln);
		fprintf(l_user_logfile, "\nNow processing client %s\n", chr_l_proc_cln);

			if (APL_FAILURE == IV_Rtv_IVCUSTSETUP( chr_l_proc_cln,
						&l_iv_cltsetup_struct,
						&int_l_retstat,
						l_debug_info_ptr))
			{
				if ( int_l_retstat == IV_CRITCAL_ERROR_IND)
				{
				        fprintf(l_errorlogflptr,"Error : Fatal Error In Billing Customer Setup for client |%s|, Table IV_CLIENTSETUP\n",chr_l_proc_cln);
				        fprintf(l_user_logfile,"Error : Database Error. Please contact support.\n");
					CO_InsertErr(  l_debug_info_ptr,
							DB_ERR_NO,
							"IV_CLIENTSETUP",
							APL_NULL_STRING,
							APL_NULL_STRING,
							__LINE__,
							__FILE__);
					APL_GOBACK_FAIL
				}
				else if (int_l_retstat == IV_NO_DATA_FOUND_ERR)
				{
	                      		fprintf(l_errorlogflptr,"Error : Billing Setup Not Found For Client : %s\n",chr_l_proc_cln);
               				fprintf(l_user_logfile,"Error : Billing Setup Not Found For Client : %s\n",chr_l_proc_cln);
					CO_InsertErr(  l_debug_info_ptr,
							ERR_BILLCNTRL_PARAM_NOTFND,
							APL_NULL_STRING,
							APL_NULL_STRING,
							APL_NULL_STRING,
							__LINE__,
							__FILE__);

					APL_GOBACK_FAIL
				}
			}

		l_totosamount = l_iv_cltsetup_struct.total_osamount;
		Alert("Bagee l_totosamount |%lf|",l_totosamount);

		fflush(l_errorlogflptr);

		if ( l_iv_cltsetup_struct.b_gen_ind == 'M' ) 
		{

			/****************** Bageshri HB_IV_004 : To skip Telex message generation ***********/

			IF_COND_NOT_EXISTS("IV_DELIVERY","NO_TELEX_MSG")
			{
				if ( APL_FAILURE == IV_Proc_Tlx(l_iv_cltsetup_struct.client, 
							l_sys_ivcontrol_param_struct.b_upto_date, 
							&l_BlPrFlPtr, 
							l_BlPrErrLogFlPtr, 
							l_BlPrUsrLogFlPtr, 
							l_debug_info_ptr) )
				{
					fprintf(l_errorlogflptr, "Failed to send Bill Delivery Message for |%s|.\n", l_iv_cltsetup_struct.client);

					fflush(l_errorlogflptr);

					APL_GOBACK_FAIL
				}

				fflush(l_BlPrFlPtr);

/*Commented and Rewritten by kotubabu for Linux Migration -No Need for separated Code - START
#ifdef OS_SUN
				if ( ftruncate(l_BlPrFlPtr->_file, 0) == -1 )
				{
					CO_ProcMonitor(l_errorlogflptr, "Failed to truncate the temporary h_file created for printing bills.\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);

					fflush(l_errorlogflptr);

					APL_GOBACK_FAIL
				}
#else
				if ( ftruncate(l_BlPrFlPtr->__fileL, 0) == -1 )
				{
					CO_ProcMonitor(l_errorlogflptr, "Failed to truncate the temporary h_file created for printing bills.\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);

					fflush(l_errorlogflptr);

					APL_GOBACK_FAIL
				}
#endif */
#ifdef OS_LINUX
				if ( ftruncate(open(l_BlPrFlPtr,O_WRONLY), 0) == -1 )
				{
					CO_ProcMonitor(l_errorlogflptr, "Failed to truncate the temporary h_file created for printing bills.\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);

					fflush(l_errorlogflptr);

					APL_GOBACK_FAIL
				}
#else
				if ( ftruncate(l_BlPrFlPtr->_file, 0) == -1 )
				{
					CO_ProcMonitor(l_errorlogflptr, "Failed to truncate the temporary h_file created for printing bills.\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);

					fflush(l_errorlogflptr);

					APL_GOBACK_FAIL
				}
#endif
/*Commented and Rewritten by kotubabu for Linux Migration -No Need for separated Code - END*/

				fflush(l_BlPrFlPtr);
			}

			/********************* Bageshri HB_IV_004 END *****************************/

			int_l_commitcounter++;
			Alert("Bagee --- int_l_commitcounter |%d|",int_l_commitcounter);

			if ( !(int_l_commitcounter % IV_REC_COMMIT_CNT) )
			{
				memset(l_sys_batchproc_struct_h.stat_det, 
				       APL_NULL_CHAR, 71);
				sprintf(l_sys_batchproc_struct_h.stat_det, "%d", 
					int_l_commitcounter);

				fprintf(l_errorlogflptr, 
					"Record %d committed.\n", 
					int_l_commitcounter);

				l_sys_batchproc_struct_i.i_stat_det = 0;

				EXEC SQL UPDATE SYS_BATCHPROC
					 SET STATUS = :l_sys_batchproc_struct_h.status_ind
						       INDICATOR 
						      :l_sys_batchproc_struct_i.i_status_ind,
					     PROCESSING_STATUS = 
						      :l_iv_cltsetup_struct.client
						       INDICATOR 
						      :i_AccStruct.i_dl_client,
					     STAT_DET = 
						      :l_sys_batchproc_struct_h.stat_det
						       INDICATOR 
						    :l_sys_batchproc_struct_i.i_stat_det
					 WHERE ROWID = :chr_h_batch_in_proc_rowid;

				IS_ANY_ORA_ERROR

				EXEC SQL COMMIT WORK;

				IS_ANY_ORA_ERROR

				strcpy(l_sys_batchproc_struct_h.status_ind, "started");

				l_sys_batchproc_struct_i.i_progclr_name = 0;
				l_sys_batchproc_struct_i.i_startdt = 0;
				l_sys_batchproc_struct_i.i_status_ind = 0;
				l_sys_batchproc_struct_i.i_proc_init = 0;
				l_sys_batchproc_struct_i.i_restart_info = 0;
				l_sys_batchproc_struct_i.i_user = 0;
				l_sys_batchproc_struct_i.i_stat_det = 0;

				EXEC SQL SELECT ROWID, PROCESS_NAME, STARTDATE, 
						STATUS, PROC_INIT, PROCESSING_STATUS, 
						USR, EOD_BOD_IND, STAT_DET
					 INTO :chr_h_batch_in_proc_rowid
					       INDICATOR :int_i_batch_in_proc_rowid,
					      :l_sys_batchproc_struct_h
					       INDICATOR :l_sys_batchproc_struct_i
					 FROM SYS_BATCHPROC
					 WHERE ((PROCESS_NAME = 
						   :l_sys_batchproc_struct_h.process_name) 
						AND
						(STARTDATE = 
						   :l_sys_batchproc_struct_h.start_dt)
						AND
						(STATUS = 
						   :l_sys_batchproc_struct_h.status_ind))
					 FOR UPDATE OF PROCESSING_STATUS;

				IS_ANY_ORA_ERROR

			} 

			continue;
		}

		if ( APL_FAILURE == IV_Rtv_MastAcc(l_iv_cltsetup_struct.client, h_AccStruct.master_clt,
					&int_l_retstat, l_debug_info_ptr) )
		{
			if ( int_l_retstat == IV_NO_DATA_FOUND_ERR )
			{
				CO_InsertErr(l_debug_info_ptr, ERR_ACCNOT_FND,
						l_iv_cltsetup_struct.client, APL_NULL_STRING,
						APL_NULL_STRING, __LINE__, __FILE__);
		        	fprintf(l_errorlogflptr,"Error : Client |%s| not found in Client Master, Table MT_CLIENT\n",l_iv_cltsetup_struct.client);
		        	fprintf(l_user_logfile,"Error : For Client %s, details not found in Client Master .\n",l_iv_cltsetup_struct.client);
			}
		        fprintf(l_errorlogflptr,"Error : Failed to fetch Master Client of client |%s|\n",l_iv_cltsetup_struct.client);
		        fprintf(l_user_logfile,"Error : Database Error. Please contact support.\n");

			APL_GOBACK_FAIL
		}

		Alert("Bagee l_totosamount |%lf|",l_totosamount);
		if ( !strcmp(l_iv_cltsetup_struct.client, h_AccStruct.master_clt) )
		{
			chr_h_consind = 'C';

			if( APL_FAILURE == IV_Chk_SubAccAuth(&l_iv_cltsetup_struct.client,l_errorlogflptr,l_user_logfile, l_debug_info_ptr))
			{
				int_bl_err_level = 1;
				int_bl_err_tot = 1;
				fprintf(l_errorlogflptr, "Error : For client |%s|, its sub clients having Bill to 'M' are not authorized.\n", l_iv_cltsetup_struct.client);
				fprintf(l_user_logfile, "Error : For client %s, its sub clients having Bill to 'M' are not authorized.\n", l_iv_cltsetup_struct.client);


			int_l_commitcounter++;
			Alert("Bagee --- int_l_commitcounter |%d|",int_l_commitcounter);

			if ( !(int_l_commitcounter % IV_REC_COMMIT_CNT) )
			{
				memset(l_sys_batchproc_struct_h.stat_det, 
				       APL_NULL_CHAR, 71);
				sprintf(l_sys_batchproc_struct_h.stat_det, "%d", 
					int_l_commitcounter);

				fprintf(l_errorlogflptr, 
					"Record %d committed.\n", 
					int_l_commitcounter);

				l_sys_batchproc_struct_i.i_stat_det = 0;

				EXEC SQL UPDATE SYS_BATCHPROC
					 SET STATUS = :l_sys_batchproc_struct_h.status_ind
						       INDICATOR 
						      :l_sys_batchproc_struct_i.i_status_ind,
					     PROCESSING_STATUS = 
						      :l_iv_cltsetup_struct.client
						       INDICATOR 
						      :i_AccStruct.i_dl_client,
					     STAT_DET = 
						      :l_sys_batchproc_struct_h.stat_det
						       INDICATOR 
						    :l_sys_batchproc_struct_i.i_stat_det
					 WHERE ROWID = :chr_h_batch_in_proc_rowid;

				IS_ANY_ORA_ERROR

				EXEC SQL COMMIT WORK;

				IS_ANY_ORA_ERROR

				strcpy(l_sys_batchproc_struct_h.status_ind, "started");

				l_sys_batchproc_struct_i.i_progclr_name = 0;
				l_sys_batchproc_struct_i.i_startdt = 0;
				l_sys_batchproc_struct_i.i_status_ind = 0;
				l_sys_batchproc_struct_i.i_proc_init = 0;
				l_sys_batchproc_struct_i.i_restart_info = 0;
				l_sys_batchproc_struct_i.i_user = 0;
				l_sys_batchproc_struct_i.i_stat_det = 0;

				EXEC SQL SELECT ROWID, PROCESS_NAME, STARTDATE, 
						STATUS, PROC_INIT, PROCESSING_STATUS, 
						USR, EOD_BOD_IND, STAT_DET
					 INTO :chr_h_batch_in_proc_rowid
					       INDICATOR :int_i_batch_in_proc_rowid,
					      :l_sys_batchproc_struct_h
					       INDICATOR :l_sys_batchproc_struct_i
					 FROM SYS_BATCHPROC
					 WHERE ((PROCESS_NAME = 
						   :l_sys_batchproc_struct_h.process_name) 
						AND
						(STARTDATE = 
						   :l_sys_batchproc_struct_h.start_dt)
						AND
						(STATUS = 
						   :l_sys_batchproc_struct_h.status_ind))
					 FOR UPDATE OF PROCESSING_STATUS;

				IS_ANY_ORA_ERROR
				}
				continue;
			}

		     
		}
		else
		{
			chr_h_consind = 'I';

		     
		}

		l_overbillamount = 0.0;
		l_overbilladjamount = 0.0;
		l_yearlybillamount = 0.0;
		l_yearlypymntamount = 0.0;
		l_yearlypymntamount2 = 0.0;

		memset(chr_h_custblccycode, APL_NULL_CHAR, APL_CCYCODE_LEN);
               //shailesh 031007,ISKB430 changing the cursor names since same 
               //name was used twice due to which the total_OS amount in IV_CLIENTSETUP
               //was not getting updated properly
		EXEC SQL DECLARE ServCursor_1 CURSOR FOR
			 SELECT SERVICE_CD, COMM_AMT, NIL_FEES_ADJ,
				MINIMUMFEE_ADJ, MAXIMUM_FEE_ADJ, B_CCYCD
			 FROM IV_SERVICE_CHRG
			 WHERE ((DATEOF_BILLING = :l_sys_ivcontrol_param_struct.b_upto_date) AND
				(CLIENT = :l_iv_cltsetup_struct.client) AND
				(CONS_FLAG = :chr_h_consind))
			 ORDER BY SERVICE_CD;

		l_totbillamount = 0.0;
		int_l_servfetchcount = 0;

		EXEC SQL OPEN ServCursor_1;

		IS_ANY_ORA_ERROR

		for ( ; ; )
		{
			l_servbillamount = 0.0;

			

			h_ServStruct.service_cd = 0L;
			h_ServStruct.nil_fees_adj = 0.0;
			h_ServStruct.minimumfee_adj = 0.0;
			h_ServStruct.maximum_fee_adj = 0.0;
			h_ServStruct.comm_amt = 0.0;

			memset(h_ServStruct.b_ccycd, APL_NULL_CHAR, 
			       APL_CCYCODE_LEN);

			EXEC SQL FETCH ServCursor_1
				 INTO :h_ServStruct INDICATOR :i_ServStruct;

			IS_ANY_ORA_ERROR

			if ( sqlca.sqlcode == 1403 )
			{
				break;
			}

			chr_l_isopenservcursor = 'Y';

		Alert("Bagee h_ServStruct.comm_amt |%lf|",h_ServStruct.comm_amt);
			l_servbillamount = h_ServStruct.comm_amt + 
					h_ServStruct.nil_fees_adj + 
					h_ServStruct.minimumfee_adj +
					h_ServStruct.maximum_fee_adj;

			memset(chr_l_cod_servbillamt, APL_NULL_CHAR, 20);
			int_retservbillamt = IV_Proc_Round(&l_servbillamount,
											h_ServStruct.b_ccycd,
											chr_l_cod_servbillamt,
											l_debug_info_ptr);
			if (int_retservbillamt == 1)
			{
				l_servbillamount = 0.0;
				sscanf(chr_l_cod_servbillamt, "%lf", &l_servbillamount);
			}
			else
			{
		        	fprintf(l_errorlogflptr,"Error : Failed to round up using currency |%s|\n",h_ServStruct.b_ccycd);
		        	fprintf(l_user_logfile,"Error : Database Error. Please contact support.\n");
				APL_GOBACK_FAIL
			}

			strcpy(chr_h_custblccycode, h_ServStruct.b_ccycd);

			

			if ( (h_ServStruct.service_cd != OVERBILLING) && 
			     (h_ServStruct.service_cd != VOLDISCOUNTFEE) )
			{
				if ( !l_servbillamount )
				{
					continue; 
				}

				l_totbillamount += l_servbillamount;
			}
			else
			{
				l_overbillamount += fabs(l_servbillamount);

				
			}
/*SHAILESH 20022008
			if ( APL_FAILURE == 
				IV_Proc_PassBillLedgerEntry(chr_l_sys_date, 
						      l_iv_cltsetup_struct.client, 
						      h_ServStruct.service_cd, 
						      l_servbillamount, 
						      chr_h_custblccycode, 
						      l_debug_info_ptr) )
			{
		        	fprintf(l_errorlogflptr,"Error : Failed to pass ledger enries for client |%s|\n",l_iv_cltsetup_struct.client);
		        	fprintf(l_user_logfile,"Error : Failed in Bill Delivery for Client %s.\n",l_iv_cltsetup_struct.client);
				APL_GOBACK_FAIL
			}*/

			int_l_servfetchcount++;

		} 

		EXEC SQL CLOSE ServCursor_1;

		chr_l_isopenservcursor = 'N';

		l_newtotosamount = 0.0;
		l_osamounttoadjust = 0.0;
		l_adjamount = 0.0;
		l_remcreditamount = 0.0;
		l_prevcreditamount = 0.0;
		l_creditadjamount = 0.0;
		l_directdbpymntamount = 0.0;

	     

		if ( l_totosamount < 0.0 )
		{
			l_prevcreditamount = fabs(l_totosamount);
		}

		l_osamounttoadjust += l_totbillamount;

		l_osamounttoadjust += ( (l_totosamount > 0.0) ? l_totosamount : 0.0 );

		int_l_retstat = 0;

		if (strlen(chr_h_custblccycode)==0) 
		{
			memset(chr_h_custblccycode,APL_NULL_CHAR,APL_CCYCODE_LEN);
			strcpy(chr_h_custblccycode,chr_h_acccustblccycode);
		}
		Alert("Bagee l_osamounttoadjust |%lf|",l_osamounttoadjust);
                /* '&' removed for AIX Migration to remove warning*/
		if ( APL_FAILURE == IV_Proc_ConvToFxFn(chr_h_custblccycode, 
					(char *)l_invoice_systemparam_struct_h.b_ccy, 
					(char *)g_mt_commonsys_params_struct_h.dom_ccy,
					chr_l_sys_date, &l_exchgrt, 
					&int_l_retstat, l_debug_info_ptr) )
		{
			fprintf(l_errorlogflptr,"Error : Exchange Rate not found for currency |%s| |%s|\n",chr_h_custblccycode,l_invoice_systemparam_struct_h.b_ccy);
			fprintf(l_user_logfile,"Error : Exchange Rate not found for currency %s %s.\n",chr_h_custblccycode,l_invoice_systemparam_struct_h.b_ccy);
			APL_GOBACK_FAIL
		}

		l_yearlybillamount = (l_totbillamount - l_overbillamount) * l_exchgrt;

		

		l_roundedamount_a = 0.0;
		if ( APL_FAILURE == CO_Round(l_yearlybillamount, int_h_decimallenccy, 
					    &l_roundedamount_a) )
		{
			APL_GOBACK_FAIL
		}
		l_yearlybillamount = l_roundedamount_a;

		l_newtotosamount = l_totosamount + l_totbillamount - l_overbillamount;

		if ( (l_overbillamount > 0.0) && (l_osamounttoadjust > 0.0) )
		{
			l_adjamount = MIN(l_osamounttoadjust, l_overbillamount);

			l_osamounttoadjust -= l_adjamount;

			l_overbillamount -= l_adjamount;

			l_overbilladjamount = l_adjamount;
		}

		if ( l_overbillamount > 0.0 )
		{
			l_remcreditamount = l_overbillamount;
		}

		if ( l_prevcreditamount && (l_osamounttoadjust > 0.0) )
		{
			l_adjamount = MIN(l_osamounttoadjust, l_prevcreditamount);

			l_osamounttoadjust -= l_adjamount;

			l_prevcreditamount -= l_adjamount;

			l_creditadjamount = l_adjamount;
		}

		if ( l_prevcreditamount > 0.0 )
		{
			l_remcreditamount += l_prevcreditamount;
		}

		

		Alert("Bagee l_overbilladjamount |%lf|",l_overbilladjamount);
		int_l_retstat = 0;

		if (l_overbilladjamount && 
		   (APL_FAILURE == IV_Proc_AdjOverbillAmount(l_iv_cltsetup_struct.client, 
						     l_overbilladjamount, 
						     chr_h_custblccycode, 
						     &int_l_retstat, l_debug_info_ptr)))
		{
		       	fprintf(l_errorlogflptr,"Error : Failed to adjust overbill amount for client |%s|\n",l_iv_cltsetup_struct.client);
		       	fprintf(l_user_logfile,"Error : Failed in Bill Delivery for Client %s.\n",l_iv_cltsetup_struct.client);
			APL_GOBACK_FAIL
		}

		int_l_retstat = 0;
		Alert("Bagee l_creditadjamount |%lf|",l_creditadjamount);

		if ( l_creditadjamount ) 
		{
			memset(chr_l_sys_date, APL_NULL_CHAR, APL_DATE_LEN);

			strcpy(chr_l_sys_date, p_argv[2]);

			

			strcpy(chr_l_sys_date, strtok(chr_l_sys_date, " "));
			strcat(chr_l_sys_date, APL_NULL_TIME);

			int_l_maxpymntseqnum = 0;

			int_l_retstat = 0;

			if ( APL_FAILURE == IV_Rtv_IVLEDGERMaxPymtSeqNum(
							l_iv_cltsetup_struct.client, 
							chr_l_sys_date, 
							&int_l_maxpymntseqnum, 
							&int_l_retstat, 
							l_debug_info_ptr) )
			{
		       		fprintf(l_errorlogflptr,"Error : Failed to get max INDEN_NUM for client |%s| from table IV_LEDGER\n",l_iv_cltsetup_struct.client);
		       		fprintf(l_user_logfile,"Error : Failed in Bill Delivery for Client %s.\n",l_iv_cltsetup_struct.client);
				APL_GOBACK_FAIL
			}

			int_l_newpymntseqnum = int_l_maxpymntseqnum + 1;

		Alert("Bagee int_l_newpymntseqnum |%d|",int_l_newpymntseqnum);
			if ( APL_FAILURE == 
					IV_Proc_CurrPrdPymnt(l_iv_cltsetup_struct.client, 
							chr_l_sys_date, chr_l_sys_date, 
							l_creditadjamount, 
							chr_h_custblccycode,
							int_l_newpymntseqnum, 
							&int_l_retstat, 
							l_debug_info_ptr) )
			{
		       		fprintf(l_errorlogflptr,"Error : Failed to process payment entries for client |%s| in table IV_LEDGER\n",l_iv_cltsetup_struct.client);
		       		fprintf(l_user_logfile,"Error : Failed in Bill Delivery for Client %s.\n",l_iv_cltsetup_struct.client);
				APL_GOBACK_FAIL
			}
		}

	     

		Alert("Bagee int_l_servfetchcount |%d|",int_l_servfetchcount);
		/*shailesh 2002008if ( int_l_servfetchcount &&
		    	(APL_FAILURE == 
				IV_Proc_PassCreditLedgerEntry(l_iv_cltsetup_struct.client, 
							chr_l_sys_date, 
							l_remcreditamount, 
							chr_h_custblccycode,
							l_debug_info_ptr)) )
		{
		      	fprintf(l_errorlogflptr,"Error : Failed to process ledger entry of EXCESS CREDIT FEE for client |%s| in table IV_LEDGER\n",l_iv_cltsetup_struct.client);
		       	fprintf(l_user_logfile,"Error : Failed in Bill Delivery for Client %s.\n",l_iv_cltsetup_struct.client);
			APL_GOBACK_FAIL
		}*/




		/****************** Bageshri HB_IV_004 : To skip Telex message generation ***********/

		IF_COND_NOT_EXISTS("IV_DELIVERY","NO_TELEX_MSG")
		{
			if ( APL_FAILURE == IV_Proc_Tlx(l_iv_cltsetup_struct.client, 
						l_sys_ivcontrol_param_struct.b_upto_date, 
						&l_BlPrFlPtr, l_BlPrErrLogFlPtr, 
						l_BlPrUsrLogFlPtr, l_debug_info_ptr) )
			{
				fprintf(l_errorlogflptr, "Failed to send Bill Delivery Message for |%s|.\n", l_iv_cltsetup_struct.client);

				fflush(l_errorlogflptr);

				APL_GOBACK_FAIL
			}

			fflush(l_BlPrFlPtr);

/*Commented and Rewritten by kotubabu for Linux Migration -No Need for separated Code - START
#ifdef OS_SUN
			if ( ftruncate(l_BlPrFlPtr->_file, 0) == -1 )
			{
				CO_ProcMonitor(l_errorlogflptr, "Failed to truncate the temporary h_file created for printing bills.\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);

				fflush(l_errorlogflptr);

				APL_GOBACK_FAIL
			}
#else
			if ( ftruncate(l_BlPrFlPtr->__fileL, 0) == -1 )
			{
				CO_ProcMonitor(l_errorlogflptr, "Failed to truncate the temporary h_file created for printing bills.\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);

				fflush(l_errorlogflptr);

				APL_GOBACK_FAIL
			}
#endif
*/
#ifdef OS_LINUX
	if ( ftruncate(open(l_BlPrFlPtr,O_WRONLY), 0) == -1 )
	{
	CO_ProcMonitor(l_errorlogflptr, "Failed to truncate the temporary h_file created for printing bills.\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);

	fflush(l_errorlogflptr);

	APL_GOBACK_FAIL
	}
	#else
	if ( ftruncate(l_BlPrFlPtr->_file, 0) == -1 )
	{
	CO_ProcMonitor(l_errorlogflptr, "Failed to truncate the temporary h_file created for printing bills.\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);

	fflush(l_errorlogflptr);

	APL_GOBACK_FAIL
	}
#endif
/*Commented and Rewritten by kotubabu for Linux Migration -No Need for separated Code - END */

			fflush(l_BlPrFlPtr);
		}

		/********************* Bageshri HB_IV_004 END *****************************/

		Alert("Bagee l_newtotosamount |%lf|",l_newtotosamount);
		/*strcpy(l_iv_cltsetup_struct.client, h_AccStruct.client);*/
		l_iv_cltsetup_struct.total_osamount = l_newtotosamount;
		l_iv_cltsetup_struct.last_lost_amt = l_totosamount;

		if ( !strcmp(l_iv_cltsetup_struct.last_pymt_date, " ") )
		{
			memset(l_iv_cltsetup_struct.last_pymt_date, APL_NULL_CHAR, 
			       APL_DATE_LEN);

			memset(l_iv_cltsetup_struct.last_pymt_ccy, APL_NULL_CHAR, 
			       APL_CCYCODE_LEN);

			l_iv_cltsetup_struct.last_pymt_amt = 0.0;
		}

		strcpy(l_iv_cltsetup_struct.b_dlv_date,chr_l_sys_date); 
		Alert("b dlv date is |%s|",l_iv_cltsetup_struct.b_dlv_date); 

		int_l_retstat = 0;

		if ( APL_FAILURE == IV_Mod_IVBCUSTSETUPAmt(&l_iv_cltsetup_struct, 
							  &int_l_retstat, 
							  l_debug_info_ptr) )
		{
			char chr_l_buffer1[BUFFER_LEN];

			memset(chr_l_buffer1, APL_NULL_CHAR, BUFFER_LEN);

			sprintf(chr_l_buffer1, "Error : Failed to update Amount field(s) for client : %s", l_iv_cltsetup_struct.client);

			if ( int_l_retstat == IV_NO_DATA_FOUND_ERR )
			{
				CO_InsertErr(l_debug_info_ptr, ERR_ACCESSSTAMP_CHGD, 
					       APL_NULL_STRING, APL_NULL_STRING,
					       APL_NULL_STRING, __LINE__, 
					       __FILE__);
			}

			CO_ProcMonitor(l_errorlogflptr, chr_l_buffer1, 
				 (DEBUG_INFO_STRUCT_H **)NULL, 
				 (INTL_ENV_DATA_STRUCT_H *)NULL);

			fflush(l_errorlogflptr);

		      	fprintf(l_user_logfile,"Error : Failed to update Outstanding Amount for Client %s.\n",l_iv_cltsetup_struct.client);

			APL_GOBACK_FAIL
		}
		
		/****************** Bageshri HB_IV_004 : Client wise Delivery ***********/

		if ( !strcmp(l_iv_cltsetup_struct.client, h_AccStruct.master_clt) )
		{

			int_l_retstat = 0;
                        /*** AIX - '&' removed for AIX migration ***/
			if ( APL_FAILURE == IV_Mod_SubAccBillDlvDt(l_iv_cltsetup_struct.client,
					chr_l_sys_date,
						&int_l_retstat, 
						l_debug_info_ptr) )
			{
				fprintf(l_errorlogflptr, "processing client |%s|. Failed to update last bill delivery date for sub clients having Bill to 'M'.\n", l_iv_cltsetup_struct.client);
				fprintf(l_user_logfile, "processing client %s. Failed to update last bill delivery date for sub clients having Bill to 'M'.\n", l_iv_cltsetup_struct.client);

				fflush(l_errorlogflptr);

				APL_GOBACK_FAIL
			}
			else
			{
			        fprintf(l_errorlogflptr,"Completed sub accounts updation for last bill delivery date.\n");
			        fprintf(l_user_logfile,"Completed sub accounts updation for last bill delivery date.\n");
			}
		}

		Alert("Bagee l_iv_cltsetup_struct.last_lost_amt |%lf|",l_iv_cltsetup_struct.last_lost_amt);
		EXEC SQL INSERT INTO IV_OUTSTANDINGAMT
		values(:l_iv_cltsetup_struct.client,:l_sys_ivcontrol_param_struct.b_upto_date,:l_iv_cltsetup_struct.last_lost_amt);

		if (sqlca.sqlcode !=0)
		{
			char chr_l_buffer1[BUFFER_LEN];

			memset(chr_l_buffer1, APL_NULL_CHAR, BUFFER_LEN);

			sprintf(chr_l_buffer1, "Error : Failed to insert into IV_OUTSTANDINGAMT for Client : %s", l_iv_cltsetup_struct.client);

			CO_ProcMonitor(l_errorlogflptr, chr_l_buffer1,
					(DEBUG_INFO_STRUCT_H **)NULL,
					(INTL_ENV_DATA_STRUCT_H *)NULL);

			fflush(l_errorlogflptr);

			fprintf(l_user_logfile,"Error : Failed to update Outstanding Amount for Client %s.\n",l_iv_cltsetup_struct.client);
			APL_GOBACK_FAIL
		}			
		
			
		int_l_retstat = 0;

		Alert("Bagee l_yearlybillamount |%lf|",l_yearlybillamount);
        	if ( APL_FAILURE == IV_Mod_BYRACT(atoi(chr_l_bl_upto_dt_yyyy), 
						  atoi(chr_l_bl_upto_dt_mm), 'B', 
						  l_yearlybillamount, &int_l_retstat, 
						  l_debug_info_ptr) )
        	{
			CO_ProcMonitor(l_errorlogflptr, "Error : Failed to update the Yearly Activity Table\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);

			fflush(l_errorlogflptr);
			fprintf(l_user_logfile,"Error : Failed to update the Yearly Activity Table.\n");

                	APL_GOBACK_FAIL
        	}

		int_l_retstat = 0;

		

		int_l_commitcounter++;

		if ( !strlen(l_iv_cltsetup_struct.client) )
		{
			i_AccStruct.i_dl_client = -1;
		}
		else
		{
			fprintf(l_errorlogflptr,"Finished Processing Client |%s|.\n",l_iv_cltsetup_struct.client);
			fprintf(l_user_logfile,"Finished Processing Client %s.\n",l_iv_cltsetup_struct.client);
		}

			Alert("Bagee --- int_l_commitcounter |%d|",int_l_commitcounter);
		if ( !(int_l_commitcounter % IV_REC_COMMIT_CNT) )
		{
			memset(l_sys_batchproc_struct_h.stat_det, APL_NULL_CHAR, 71);
			sprintf(l_sys_batchproc_struct_h.stat_det, "%d", 
				int_l_commitcounter);

			

			fprintf(l_errorlogflptr, "Record %d committed.\n", 
				int_l_commitcounter);

			l_sys_batchproc_struct_i.i_stat_det = 0;

			EXEC SQL UPDATE SYS_BATCHPROC
				 SET STATUS = :l_sys_batchproc_struct_h.status_ind
					    INDICATOR :l_sys_batchproc_struct_i.i_status_ind,
				     PROCESSING_STATUS = :l_iv_cltsetup_struct.client
					    INDICATOR :i_AccStruct.i_dl_client,
				     STAT_DET = :l_sys_batchproc_struct_h.stat_det
						 INDICATOR 
						 :l_sys_batchproc_struct_i.i_stat_det
				 WHERE ROWID = :chr_h_batch_in_proc_rowid;

			IS_ANY_ORA_ERROR

			EXEC SQL COMMIT WORK;

			IS_ANY_ORA_ERROR

			strcpy(l_sys_batchproc_struct_h.status_ind, "started");

			l_sys_batchproc_struct_i.i_progclr_name = 0;
			l_sys_batchproc_struct_i.i_startdt = 0;
			l_sys_batchproc_struct_i.i_status_ind = 0;
			l_sys_batchproc_struct_i.i_proc_init = 0;
			l_sys_batchproc_struct_i.i_restart_info = 0;
			l_sys_batchproc_struct_i.i_user = 0;
			l_sys_batchproc_struct_i.i_stat_det = 0;

			EXEC SQL SELECT ROWID, PROCESS_NAME, STARTDATE, STATUS, 
					PROC_INIT, PROCESSING_STATUS, USR, EOD_BOD_IND, 
					STAT_DET
				 INTO :chr_h_batch_in_proc_rowid
				       INDICATOR :int_i_batch_in_proc_rowid, 
				      :l_sys_batchproc_struct_h
				       INDICATOR :l_sys_batchproc_struct_i
				 FROM SYS_BATCHPROC
				 WHERE ((PROCESS_NAME = :l_sys_batchproc_struct_h.process_name) 
					AND
					(STARTDATE = :l_sys_batchproc_struct_h.start_dt)
					AND
					(STATUS = :l_sys_batchproc_struct_h.status_ind))
				 FOR UPDATE OF PROCESSING_STATUS;

			IS_ANY_ORA_ERROR

		} 


		}

		EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_h_count
		FROM IV_CLIENTSETUP,SYS_IVCONTROLPARAM,
			(SELECT DISTINCT CLIENT 
			FROM IV_SERVICE_CHRG,SYS_IVCONTROLPARAM
			WHERE IV_SERVICE_CHRG.DATEOF_BILLING = SYS_IVCONTROLPARAM.B_UPTO_DATE) CLN_IV_SERVICE_CHRG
		WHERE CLN_IV_SERVICE_CHRG.CLIENT = IV_CLIENTSETUP.CLIENT AND
			IV_CLIENTSETUP.DATE_OF_INPUT <= SYS_IVCONTROLPARAM.B_UPTO_DATE AND
			IV_CLIENTSETUP.B_GEN_IND = 'S' AND
			IV_CLIENTSETUP.STAT_IND = 'A' AND 
			(IV_CLIENTSETUP.B_DLV_DATE IS NULL 
				OR IV_CLIENTSETUP.B_DLV_DATE <= SYS_IVCONTROLPARAM.LAST_DLV_DATE);

		if((int_h_count == 0) && (int_bl_err_level == 0))
		{
	          	fprintf(l_errorlogflptr, "--SUCCESS-- : BILL DELIVERY IS PROCESSED FOR ALL THE CLIENTS.\n");
         		fprintf(l_user_logfile, "--SUCCESS-- : BILLS DELIVERY IS PROCESSED FOR ALL THE CLIENTS.\n");
			strcpy(chr_g_bill_dlv_ind,"Y");
		}

	}
	if (!strcmp(chr_l_bill_dlv_ind,"Y"))
	{
		/* Bageshri HB_IV_004 : added where clause to consider client wise bill delivery too */

		EXEC SQL DECLARE AccCursor CURSOR FOR
		       SELECT DISTINCT IV_CLIENTSETUP.CLIENT, IV_SERVICE_CHRG.MASTER_CLT, 
			       IV_CLIENTSETUP.B_GEN_IND, IV_CLIENTSETUP.B_CCYCD
		       FROM IV_CLIENTSETUP, IV_SERVICE_CHRG, SYS_IVCONTROLPARAM
		       WHERE ((IV_CLIENTSETUP.CLIENT = IV_SERVICE_CHRG.CLIENT) AND
		              (IV_CLIENTSETUP.DATE_OF_INPUT <= SYS_IVCONTROLPARAM.B_UPTO_DATE) AND
			      (IV_CLIENTSETUP.STAT_IND = 'A') AND
			      (IV_SERVICE_CHRG.DATEOF_BILLING = SYS_IVCONTROLPARAM.B_UPTO_DATE) AND
			      (IV_CLIENTSETUP.B_DLV_DATE IS NULL 
			      OR IV_CLIENTSETUP.B_DLV_DATE <= SYS_IVCONTROLPARAM.LAST_DLV_DATE) AND
			      (IV_CLIENTSETUP.CLIENT > :l_sys_batchproc_struct_h.processing_status))
		       ORDER BY IV_CLIENTSETUP.CLIENT;

		/********************* Bageshri HB_IV_004 END *****************************/

		EXEC SQL OPEN AccCursor;

		IS_ANY_ORA_ERROR

			for ( ; ; )
			{
				memset(h_AccStruct.client, APL_NULL_CHAR, APL_CLIENT_LENGTH);
				memset(h_AccStruct.master_clt, APL_NULL_CHAR, APL_CLIENT_LENGTH);
		h_AccStruct.b_gen_ind = NULL; 
		memset(h_AccStruct.b_ccycd, APL_NULL_CHAR, APL_CCYCODE_LEN);

		EXEC SQL FETCH AccCursor
			 INTO :h_AccStruct INDICATOR :i_AccStruct;

		IS_ANY_ORA_ERROR

		if ( sqlca.sqlcode == 1403 )
		{
			break;
		}

		chr_l_isopenacccursor = 'Y';
		memset(chr_h_acccustblccycode, APL_NULL_CHAR, APL_CCYCODE_LEN); 
		strcpy(chr_h_acccustblccycode, h_AccStruct.b_ccycd); 

		

		fprintf(l_errorlogflptr, "\nNow processing client %s\n", h_AccStruct.client);
		fprintf(l_user_logfile,"\nNow processing client %s\n", h_AccStruct.client);

		fflush(l_errorlogflptr);

		if ( h_AccStruct.b_gen_ind == 'M' ) 
		{

			/****************** Bageshri HB_IV_004 : To skip Telex message generation ***********/

			IF_COND_NOT_EXISTS("IV_DELIVERY","NO_TELEX_MSG")
			{
				if ( APL_FAILURE == IV_Proc_Tlx(h_AccStruct.client, 
							l_sys_ivcontrol_param_struct.b_upto_date, 
							&l_BlPrFlPtr, 
							l_BlPrErrLogFlPtr, 
							l_BlPrUsrLogFlPtr, 
							l_debug_info_ptr) )
				{
					fprintf(l_errorlogflptr, "Failed to send Bill Delivery Message for |%s|.\n", h_AccStruct.client);

					fflush(l_errorlogflptr);

					APL_GOBACK_FAIL
				}

				fflush(l_BlPrFlPtr);
/*Commented and Rewritten by kotubabu for Linux Migration -No Need for separated Code - START
#ifdef OS_SUN
				if ( ftruncate(l_BlPrFlPtr->_file, 0) == -1 )
				{
					CO_ProcMonitor(l_errorlogflptr, "Failed to truncate the temporary h_file created for printing bills.\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);

					fflush(l_errorlogflptr);

					APL_GOBACK_FAIL
				}
#else
				if ( ftruncate(l_BlPrFlPtr->__fileL, 0) == -1 )
				{
					CO_ProcMonitor(l_errorlogflptr, "Failed to truncate the temporary h_file created for printing bills.\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);

					fflush(l_errorlogflptr);

					APL_GOBACK_FAIL
				}
#endif
*/
#ifdef OS_LINUX
	if ( ftruncate(open(l_BlPrFlPtr,O_WRONLY), 0) == -1 )
	{
	CO_ProcMonitor(l_errorlogflptr, "Failed to truncate the temporary h_file created for printing bills.\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);

	fflush(l_errorlogflptr);

	APL_GOBACK_FAIL
	}
	#else
	if ( ftruncate(l_BlPrFlPtr->_file, 0) == -1 )
	{
	CO_ProcMonitor(l_errorlogflptr, "Failed to truncate the temporary h_file created for printing bills.\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);

	fflush(l_errorlogflptr);

	APL_GOBACK_FAIL
	}
#endif
/*Commented and Rewritten by kotubabu for Linux Migration -No Need for separated Code - END */


				fflush(l_BlPrFlPtr);
			}

			/********************* Bageshri HB_IV_004 END *****************************/

			int_l_commitcounter++;

			if ( !(int_l_commitcounter % IV_REC_COMMIT_CNT) )
			{
				memset(l_sys_batchproc_struct_h.stat_det, 
				       APL_NULL_CHAR, 71);
				sprintf(l_sys_batchproc_struct_h.stat_det, "%d", 
					int_l_commitcounter);

				fprintf(l_errorlogflptr, 
					"Record %d committed.\n", 
					int_l_commitcounter);

				l_sys_batchproc_struct_i.i_stat_det = 0;

				EXEC SQL UPDATE SYS_BATCHPROC
					 SET STATUS = :l_sys_batchproc_struct_h.status_ind
						       INDICATOR 
						      :l_sys_batchproc_struct_i.i_status_ind,
					     PROCESSING_STATUS = 
						      :h_AccStruct.client
						       INDICATOR 
						      :i_AccStruct.i_dl_client,
					     STAT_DET = 
						      :l_sys_batchproc_struct_h.stat_det
						       INDICATOR 
						    :l_sys_batchproc_struct_i.i_stat_det
					 WHERE ROWID = :chr_h_batch_in_proc_rowid;

				IS_ANY_ORA_ERROR

				EXEC SQL COMMIT WORK;

				IS_ANY_ORA_ERROR

				strcpy(l_sys_batchproc_struct_h.status_ind, "started");

				l_sys_batchproc_struct_i.i_progclr_name = 0;
				l_sys_batchproc_struct_i.i_startdt = 0;
				l_sys_batchproc_struct_i.i_status_ind = 0;
				l_sys_batchproc_struct_i.i_proc_init = 0;
				l_sys_batchproc_struct_i.i_restart_info = 0;
				l_sys_batchproc_struct_i.i_user = 0;
				l_sys_batchproc_struct_i.i_stat_det = 0;

				EXEC SQL SELECT ROWID, PROCESS_NAME, STARTDATE, 
						STATUS, PROC_INIT, PROCESSING_STATUS, 
						USR, EOD_BOD_IND, STAT_DET
					 INTO :chr_h_batch_in_proc_rowid
					       INDICATOR :int_i_batch_in_proc_rowid,
					      :l_sys_batchproc_struct_h
					       INDICATOR :l_sys_batchproc_struct_i
					 FROM SYS_BATCHPROC
					 WHERE ((PROCESS_NAME = 
						   :l_sys_batchproc_struct_h.process_name) 
						AND
						(STARTDATE = 
						   :l_sys_batchproc_struct_h.start_dt)
						AND
						(STATUS = 
						   :l_sys_batchproc_struct_h.status_ind))
					 FOR UPDATE OF PROCESSING_STATUS;

				IS_ANY_ORA_ERROR

				EXEC SQL OPEN AccCursor;

				IS_ANY_ORA_ERROR

			} 

			continue;
		}

		if ( !strcmp(h_AccStruct.client, h_AccStruct.master_clt) )
		{
			chr_h_consind = 'C';

			/*IF_COND_EXISTS("IV_CLIENT","B_DLV_DATE")
			if( APL_FAILURE == IV_Chk_SubAccAuth(&l_iv_cltsetup_struct.client,l_errorlogflptr,l_debug_info_ptr))
			{
				fprintf(l_errorlogflptr, "processing client %s. Its sub clients having Bill to 'M' are not authorized.\n", l_iv_cltsetup_struct.client);

				continue;
			}*/
		     
		}
		else
		{
			chr_h_consind = 'I';

		     
		}

		l_overbillamount = 0.0;
		l_overbilladjamount = 0.0;
		l_yearlybillamount = 0.0;
		l_yearlypymntamount = 0.0;
		l_yearlypymntamount2 = 0.0;

		memset(chr_h_custblccycode, APL_NULL_CHAR, APL_CCYCODE_LEN);

				EXEC SQL DECLARE ServCursor_2 CURSOR FOR
			 SELECT SERVICE_CD, COMM_AMT, NIL_FEES_ADJ,
				MINIMUMFEE_ADJ, MAXIMUM_FEE_ADJ, B_CCYCD
			 FROM IV_SERVICE_CHRG
			 WHERE ((DATEOF_BILLING = :l_sys_ivcontrol_param_struct.b_upto_date) AND
				(CLIENT = :h_AccStruct.client) AND
				(CONS_FLAG = :chr_h_consind))
			 ORDER BY SERVICE_CD;

		l_totbillamount = 0.0;
		int_l_servfetchcount = 0;

		EXEC SQL OPEN ServCursor_2;

		IS_ANY_ORA_ERROR

		for ( ; ; )
		{
			l_servbillamount = 0.0;

			

			h_ServStruct.service_cd = 0L;
			h_ServStruct.nil_fees_adj = 0.0;
			h_ServStruct.minimumfee_adj = 0.0;
			h_ServStruct.maximum_fee_adj = 0.0;
			h_ServStruct.comm_amt = 0.0;

			memset(h_ServStruct.b_ccycd, APL_NULL_CHAR, 
			       APL_CCYCODE_LEN);

			EXEC SQL FETCH ServCursor_2
				 INTO :h_ServStruct INDICATOR :i_ServStruct;

			IS_ANY_ORA_ERROR

			if ( sqlca.sqlcode == 1403 )
			{
				break;
			}

			chr_l_isopenservcursor = 'Y';

			l_servbillamount = h_ServStruct.comm_amt + 
					h_ServStruct.nil_fees_adj + 
					h_ServStruct.minimumfee_adj +
					h_ServStruct.maximum_fee_adj;

			memset(chr_l_cod_servbillamt, APL_NULL_CHAR, 20);
			int_retservbillamt = IV_Proc_Round(&l_servbillamount,
											h_ServStruct.b_ccycd,
											chr_l_cod_servbillamt,
											l_debug_info_ptr);
			if (int_retservbillamt == 1)
			{
				l_servbillamount = 0.0;
				sscanf(chr_l_cod_servbillamt, "%lf", &l_servbillamount);
			}
			else
			{
		        	fprintf(l_errorlogflptr,"Error : Failed to round up using currency |%s|\n",h_ServStruct.b_ccycd);
		        	fprintf(l_user_logfile,"Error : Database Error. Please contact support.\n");
				APL_GOBACK_FAIL
			}

			strcpy(chr_h_custblccycode, h_ServStruct.b_ccycd);

			

			if ( (h_ServStruct.service_cd != OVERBILLING) && 
			     (h_ServStruct.service_cd != VOLDISCOUNTFEE) )
			{
				if ( !l_servbillamount )
				{
					continue; 
				}

				l_totbillamount += l_servbillamount;
			}
			else
			{
				l_overbillamount += fabs(l_servbillamount);

				
			}
/*SHAILESH 20022008
			if ( APL_FAILURE == 
				IV_Proc_PassBillLedgerEntry(chr_l_sys_date, 
						      h_AccStruct.client, 
						      h_ServStruct.service_cd, 
						      l_servbillamount, 
						      chr_h_custblccycode, 
						      l_debug_info_ptr) )
			{
		        	fprintf(l_errorlogflptr,"Error : Failed to pass ledger enries for client |%s|\n",h_AccStruct.client);
		        	fprintf(l_user_logfile,"Error : Failed in Bill Delivery for Client %s.\n",h_AccStruct.client);
				APL_GOBACK_FAIL
			} */

			int_l_servfetchcount++;

		} 

		EXEC SQL CLOSE ServCursor_2;

		chr_l_isopenservcursor = 'N';

		l_totosamount = 0.0;
		l_newtotosamount = 0.0;
		l_osamounttoadjust = 0.0;
		l_adjamount = 0.0;
		l_remcreditamount = 0.0;
		l_prevcreditamount = 0.0;
		l_creditadjamount = 0.0;
		l_directdbpymntamount = 0.0;

	     

		int_l_retstat = 0;

		if ( APL_FAILURE == IV_Rtv_IVCUSTSETUP(h_AccStruct.client, 
						      &l_iv_cltsetup_struct, &int_l_retstat,
						      l_debug_info_ptr) )
		{
			if ( int_l_retstat == IV_CRITCAL_ERROR_IND )
			{
			        fprintf(l_errorlogflptr,"Error : Fatal Error In Billing Customer Setupfor client |%s|, Table IV_CLIENTSETUP\n",h_AccStruct.client);
			        fprintf(l_user_logfile,"Error : Database Error. Please contact support.\n");
				APL_GOBACK_FAIL
			}
		}

		l_totosamount = l_iv_cltsetup_struct.total_osamount;

	     

		if ( l_totosamount < 0.0 )
		{
			l_prevcreditamount = fabs(l_totosamount);
		}

		l_osamounttoadjust += l_totbillamount;

		l_osamounttoadjust += ( (l_totosamount > 0.0) ? l_totosamount : 0.0 );

		int_l_retstat = 0;

		if (strlen(chr_h_custblccycode)==0) 
		{
			memset(chr_h_custblccycode,APL_NULL_CHAR,APL_CCYCODE_LEN);
			strcpy(chr_h_custblccycode,chr_h_acccustblccycode);
		}

		if ( APL_FAILURE == IV_Proc_ConvToFxFn(chr_h_custblccycode, 
					(char *)l_invoice_systemparam_struct_h.b_ccy, 
					(char *)g_mt_commonsys_params_struct_h.dom_ccy,
					chr_l_sys_date, &l_exchgrt, 
					&int_l_retstat, l_debug_info_ptr) )
		{
		       	fprintf(l_errorlogflptr,"Error : Exchange Rate not found for currency |%s| |%s|\n",chr_h_custblccycode,l_invoice_systemparam_struct_h.b_ccy);
		       	fprintf(l_user_logfile,"Error : Exchange Rate not found for currency %s %s.\n",chr_h_custblccycode,l_invoice_systemparam_struct_h.b_ccy);
			APL_GOBACK_FAIL
		}

		l_yearlybillamount = (l_totbillamount - l_overbillamount) * l_exchgrt;

		

		l_roundedamount_a = 0.0;
		if ( APL_FAILURE == CO_Round(l_yearlybillamount, int_h_decimallenccy, 
					    &l_roundedamount_a) )
		{
		        fprintf(l_errorlogflptr,"Error : Round up failed for client |%s|\n",h_AccStruct.client);
		        fprintf(l_user_logfile,"Error : Round up failed. Please contact support.\n");
			APL_GOBACK_FAIL
		}
		l_yearlybillamount = l_roundedamount_a;

		l_newtotosamount = l_totosamount + l_totbillamount - l_overbillamount;

		if ( (l_overbillamount > 0.0) && (l_osamounttoadjust > 0.0) )
		{
			l_adjamount = MIN(l_osamounttoadjust, l_overbillamount);

			l_osamounttoadjust -= l_adjamount;

			l_overbillamount -= l_adjamount;

			l_overbilladjamount = l_adjamount;
		}

		if ( l_overbillamount > 0.0 )
		{
			l_remcreditamount = l_overbillamount;
		}

		if ( l_prevcreditamount && (l_osamounttoadjust > 0.0) )
		{
			l_adjamount = MIN(l_osamounttoadjust, l_prevcreditamount);

			l_osamounttoadjust -= l_adjamount;

			l_prevcreditamount -= l_adjamount;

			l_creditadjamount = l_adjamount;
		}

		if ( l_prevcreditamount > 0.0 )
		{
			l_remcreditamount += l_prevcreditamount;
		}

		

		int_l_retstat = 0;

		if (l_overbilladjamount && 
		   (APL_FAILURE == IV_Proc_AdjOverbillAmount(h_AccStruct.client, 
						     l_overbilladjamount, 
						     chr_h_custblccycode, 
						     &int_l_retstat, l_debug_info_ptr)))
		{
		       	fprintf(l_errorlogflptr,"Error : Failed to adjust overbill amount for client |%s|\n",h_AccStruct.client);
		       	fprintf(l_user_logfile,"Error : Failed in Bill Delivery for Client %s.\n",h_AccStruct.client);
			APL_GOBACK_FAIL
		}

		int_l_retstat = 0;

		if ( l_creditadjamount ) 
		{
			memset(chr_l_sys_date, APL_NULL_CHAR, APL_DATE_LEN);

			strcpy(chr_l_sys_date, p_argv[2]);

			

			strcpy(chr_l_sys_date, strtok(chr_l_sys_date, " "));
			strcat(chr_l_sys_date, APL_NULL_TIME);

			int_l_maxpymntseqnum = 0;

			int_l_retstat = 0;

			if ( APL_FAILURE == IV_Rtv_IVLEDGERMaxPymtSeqNum(
							h_AccStruct.client, 
							chr_l_sys_date, 
							&int_l_maxpymntseqnum, 
							&int_l_retstat, 
							l_debug_info_ptr) )
			{
		       		fprintf(l_errorlogflptr,"Error : Failed to get max INDEN_NUM for client |%s| from table IV_LEDGER\n",h_AccStruct.client);
		       		fprintf(l_user_logfile,"Error : Failed in Bill Delivery for Client %s.\n",h_AccStruct.client);
				APL_GOBACK_FAIL
			}

			int_l_newpymntseqnum = int_l_maxpymntseqnum + 1;

			if ( APL_FAILURE == 
					IV_Proc_CurrPrdPymnt(h_AccStruct.client, 
							chr_l_sys_date, chr_l_sys_date, 
							l_creditadjamount, 
							chr_h_custblccycode,
							int_l_newpymntseqnum, 
							&int_l_retstat, 
							l_debug_info_ptr) )
			{
		       		fprintf(l_errorlogflptr,"Error : Failed to process payment entries for client |%s| in table IV_LEDGER\n",h_AccStruct.client);
		       		fprintf(l_user_logfile,"Error : Failed in Bill Delivery for Client %s.\n",h_AccStruct.client);
				APL_GOBACK_FAIL
			}
		}

	     
/* shailesh 200208
		if ( int_l_servfetchcount &&
		    	(APL_FAILURE == 
				IV_Proc_PassCreditLedgerEntry(h_AccStruct.client, 
							chr_l_sys_date, 
							l_remcreditamount, 
							chr_h_custblccycode,
							l_debug_info_ptr)) )
		{
		      	fprintf(l_errorlogflptr,"Error : Failed to process ledger entry of EXCESS CREDIT FEE for client |%s| in table IV_LEDGER\n",h_AccStruct.client);
		       	fprintf(l_user_logfile,"Error : Failed in Bill Delivery for Client %s.\n",h_AccStruct.client);
			APL_GOBACK_FAIL
		}
*/



		/****************** Bageshri HB_IV_004 : To skip Telex message generation ***********/

		IF_COND_NOT_EXISTS("IV_DELIVERY","NO_TELEX_MSG")
		{
			if ( APL_FAILURE == IV_Proc_Tlx(h_AccStruct.client, 
					    l_sys_ivcontrol_param_struct.b_upto_date, 
					    &l_BlPrFlPtr, l_BlPrErrLogFlPtr, 
					    l_BlPrUsrLogFlPtr, l_debug_info_ptr) )
		{
			fprintf(l_errorlogflptr, "Failed to send Bill Delivery Message for %s.\n", h_AccStruct.client);

			fflush(l_errorlogflptr);

			APL_GOBACK_FAIL
		}

		fflush(l_BlPrFlPtr);

		/*Commented and Rewritten by kotubabu for Linux Migration -No Need for separated Code - START
		#ifdef OS_SUN
		if ( ftruncate(l_BlPrFlPtr->_file, 0) == -1 )
		{
			CO_ProcMonitor(l_errorlogflptr, "Failed to truncate the temporary h_file created for printing bills.\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);

			fflush(l_errorlogflptr);

			APL_GOBACK_FAIL
		}
		#else
		if ( ftruncate(l_BlPrFlPtr->__fileL, 0) == -1 )
		{
			CO_ProcMonitor(l_errorlogflptr, "Failed to truncate the temporary h_file created for printing bills.\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);

			fflush(l_errorlogflptr);

			APL_GOBACK_FAIL
		}
		#endif
		*/
		#ifdef OS_LINUX
        if ( ftruncate(open(l_BlPrFlPtr,O_WRONLY), 0) == -1 )
		{
			CO_ProcMonitor(l_errorlogflptr, "Failed to truncate the temporary h_file created for printing bills.\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);

			fflush(l_errorlogflptr);

			APL_GOBACK_FAIL
		}
		#else
		if ( ftruncate(l_BlPrFlPtr->__fileL, 0) == -1 )
		{
			CO_ProcMonitor(l_errorlogflptr, "Failed to truncate the temporary h_file created for printing bills.\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);

			fflush(l_errorlogflptr);

			APL_GOBACK_FAIL
		}
		#endif		
		/*Commented and Rewritten by kotubabu for Linux Migration -No Need for separated Code - END*/

		fflush(l_BlPrFlPtr);
		}

		/********************* Bageshri HB_IV_004 END *****************************/


		strcpy(l_iv_cltsetup_struct.client, h_AccStruct.client);
		l_iv_cltsetup_struct.total_osamount = l_newtotosamount;
		l_iv_cltsetup_struct.last_lost_amt = l_totosamount;

		if ( !strcmp(l_iv_cltsetup_struct.last_pymt_date, " ") )
		{
			memset(l_iv_cltsetup_struct.last_pymt_date, APL_NULL_CHAR, 
			       APL_DATE_LEN);

			memset(l_iv_cltsetup_struct.last_pymt_ccy, APL_NULL_CHAR, 
			       APL_CCYCODE_LEN);

			l_iv_cltsetup_struct.last_pymt_amt = 0.0;
		}

		IF_COND_EXISTS("IV_CLIENT","B_DLV_DATE")
			strcpy(l_iv_cltsetup_struct.b_dlv_date,chr_l_sys_date); 

		int_l_retstat = 0;

		if ( APL_FAILURE == IV_Mod_IVBCUSTSETUPAmt(&l_iv_cltsetup_struct, 
							  &int_l_retstat, 
							  l_debug_info_ptr) )
		{
			char chr_l_buffer1[BUFFER_LEN];

			memset(chr_l_buffer1, APL_NULL_CHAR, BUFFER_LEN);

			sprintf(chr_l_buffer1, "Error : Failed to update Outstanding Amount field(s) for client : %s", l_iv_cltsetup_struct.client);

			if ( int_l_retstat == IV_NO_DATA_FOUND_ERR )
			{
				CO_InsertErr(l_debug_info_ptr, ERR_ACCESSSTAMP_CHGD, 
					       APL_NULL_STRING, APL_NULL_STRING,
					       APL_NULL_STRING, __LINE__, 
					       __FILE__);
			}

			CO_ProcMonitor(l_errorlogflptr, chr_l_buffer1, 
				 (DEBUG_INFO_STRUCT_H **)NULL, 
				 (INTL_ENV_DATA_STRUCT_H *)NULL);

			fflush(l_errorlogflptr);
		      	fprintf(l_user_logfile,"Error : Failed to update Outstanding Amount for Client %s.\n",l_iv_cltsetup_struct.client);

			APL_GOBACK_FAIL
		}
		
		/****************** Bageshri HB_IV_004 : Client wise Delivery ***********/

		IF_COND_EXISTS("IV_CLIENT","B_DLV_DATE")
		if ( !strcmp(l_iv_cltsetup_struct.client, h_AccStruct.master_clt) )
		{

			int_l_retstat = 0;
                        /*** AIX - '&' removed for AIX migration ***/
			if ( APL_FAILURE == IV_Mod_SubAccBillDlvDt(l_iv_cltsetup_struct.client, 
						chr_l_sys_date,
						&int_l_retstat, 
						l_debug_info_ptr) )
			{
				fprintf(l_errorlogflptr, "processing client %s. Failed to update last bill delivery date for sub clients having Bill to 'M'.\n", l_iv_cltsetup_struct.client);

				fflush(l_errorlogflptr);

				APL_GOBACK_FAIL
			}
			else
			{
			        fprintf(l_errorlogflptr,"Completed sub accounts updation for last bill delivery date.\n");
			        fprintf(l_user_logfile,"Completed sub accounts updation for last bill delivery date.\n");
			}
		}

		/********************* Bageshri HB_IV_004 END *****************************/
		

		EXEC SQL INSERT INTO IV_OUTSTANDINGAMT
		values(:l_iv_cltsetup_struct.client,:l_sys_ivcontrol_param_struct.b_upto_date,:l_iv_cltsetup_struct.last_lost_amt);

		if (sqlca.sqlcode !=0)
		{
			char chr_l_buffer1[BUFFER_LEN];

			memset(chr_l_buffer1, APL_NULL_CHAR, BUFFER_LEN);

			sprintf(chr_l_buffer1, "Error : Failed to insert into IV_OUTSTANDINGAMT for Customer: %s", l_iv_cltsetup_struct.client);

			CO_ProcMonitor(l_errorlogflptr, chr_l_buffer1,
					(DEBUG_INFO_STRUCT_H **)NULL,
					(INTL_ENV_DATA_STRUCT_H *)NULL);

			fflush(l_errorlogflptr);
			fprintf(l_user_logfile,"Error : Failed to update Outstanding Amount for Client %s.\n",l_iv_cltsetup_struct.client);

			APL_GOBACK_FAIL
		}			
		
			
		int_l_retstat = 0;

        	if ( APL_FAILURE == IV_Mod_BYRACT(atoi(chr_l_bl_upto_dt_yyyy), 
						  atoi(chr_l_bl_upto_dt_mm), 'B', 
						  l_yearlybillamount, &int_l_retstat, 
						  l_debug_info_ptr) )
        	{
			CO_ProcMonitor(l_errorlogflptr, "Failed to update the Yearly Activity Table\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);

			fflush(l_errorlogflptr);
			fprintf(l_user_logfile,"Error : Failed to update the Yearly Activity Table.\n");

                	APL_GOBACK_FAIL
        	}

		int_l_retstat = 0;

		

		int_l_commitcounter++;

		if ( !strlen(h_AccStruct.client) )
		{
			i_AccStruct.i_dl_client = -1;
		}

		if ( !(int_l_commitcounter % IV_REC_COMMIT_CNT) )
		{
			memset(l_sys_batchproc_struct_h.stat_det, APL_NULL_CHAR, 71);
			sprintf(l_sys_batchproc_struct_h.stat_det, "%d", 
				int_l_commitcounter);

			

			fprintf(l_errorlogflptr, "Record %d committed.\n", 
				int_l_commitcounter);

			l_sys_batchproc_struct_i.i_stat_det = 0;

			EXEC SQL UPDATE SYS_BATCHPROC
				 SET STATUS = :l_sys_batchproc_struct_h.status_ind
					    INDICATOR :l_sys_batchproc_struct_i.i_status_ind,
				     PROCESSING_STATUS = :h_AccStruct.client
					    INDICATOR :i_AccStruct.i_dl_client,
				     STAT_DET = :l_sys_batchproc_struct_h.stat_det
						 INDICATOR 
						 :l_sys_batchproc_struct_i.i_stat_det
				 WHERE ROWID = :chr_h_batch_in_proc_rowid;

			IS_ANY_ORA_ERROR

			EXEC SQL COMMIT WORK;

			IS_ANY_ORA_ERROR

			strcpy(l_sys_batchproc_struct_h.status_ind, "started");

			l_sys_batchproc_struct_i.i_progclr_name = 0;
			l_sys_batchproc_struct_i.i_startdt = 0;
			l_sys_batchproc_struct_i.i_status_ind = 0;
			l_sys_batchproc_struct_i.i_proc_init = 0;
			l_sys_batchproc_struct_i.i_restart_info = 0;
			l_sys_batchproc_struct_i.i_user = 0;
			l_sys_batchproc_struct_i.i_stat_det = 0;

			EXEC SQL SELECT ROWID, PROCESS_NAME, STARTDATE, STATUS, 
					PROC_INIT, PROCESSING_STATUS, USR, EOD_BOD_IND, 
					STAT_DET
				 INTO :chr_h_batch_in_proc_rowid
				       INDICATOR :int_i_batch_in_proc_rowid, 
				      :l_sys_batchproc_struct_h
				       INDICATOR :l_sys_batchproc_struct_i
				 FROM SYS_BATCHPROC
				 WHERE ((PROCESS_NAME = :l_sys_batchproc_struct_h.process_name) 
					AND
					(STARTDATE = :l_sys_batchproc_struct_h.start_dt)
					AND
					(STATUS = :l_sys_batchproc_struct_h.status_ind))
				 FOR UPDATE OF PROCESSING_STATUS;

			IS_ANY_ORA_ERROR

			EXEC SQL OPEN AccCursor;

			IS_ANY_ORA_ERROR

		} 

	} 

	EXEC SQL CLOSE AccCursor;

	chr_l_isopenacccursor = 'N';
}

	strcpy(l_sys_batchproc_struct_h.process_name, p_argv[0]);
	strcpy(l_sys_batchproc_struct_h.start_dt, p_argv[2]);
	strcpy(l_sys_batchproc_struct_h.status_ind, "started");

	l_sys_batchproc_struct_i.i_progclr_name = 0;
	l_sys_batchproc_struct_i.i_startdt = 0;
	l_sys_batchproc_struct_i.i_status_ind = 0;
	l_sys_batchproc_struct_i.i_proc_init = 0;
	l_sys_batchproc_struct_i.i_restart_info = 0;
	l_sys_batchproc_struct_i.i_user = 0;
	l_sys_batchproc_struct_i.i_stat_det = 0;

	EXEC SQL SELECT ROWID, PROCESS_NAME, STARTDATE, STATUS, 
			PROC_INIT, PROCESSING_STATUS, USR, EOD_BOD_IND, STAT_DET
		 INTO :chr_h_batch_in_proc_rowid INDICATOR :int_i_batch_in_proc_rowid, 
		      :l_sys_batchproc_struct_h INDICATOR :l_sys_batchproc_struct_i
		 FROM SYS_BATCHPROC
		 WHERE ((PROCESS_NAME = :l_sys_batchproc_struct_h.process_name) AND
			(STARTDATE = :l_sys_batchproc_struct_h.start_dt) AND
			(STATUS = :l_sys_batchproc_struct_h.status_ind))
		 FOR UPDATE OF STATUS;

	IS_ANY_ORA_ERROR

	/****** Bageshri HB_IV_004 : update control parameters only if bill delivered to all clients ******/

	if( (!strcmp(chr_l_bill_dlv_ind,"Y")) || (!strcmp(chr_g_bill_dlv_ind,"Y")) )
{
            	fprintf(l_errorlogflptr,"------------Calutaing billing control parameters for next cycle---------\n");
      		fprintf(l_user_logfile,"-----------Calutaing billing control parameters for next cycle-----------\n");
	int_l_retstat = 0;

	if ( APL_FAILURE == IV_Proc_CalcIVBCNTLPARAMNxtIVDlvDt(&l_sys_ivcontrol_param_struct, 
							 &int_l_retstat, 
							 l_debug_info_ptr) )
	{
		APL_GOBACK_FAIL	
	}

        l_sys_ivcontrol_param_struct.generate_ind = 'N';
        l_sys_ivcontrol_param_struct.b_gen_ind = 'N';
        l_sys_ivcontrol_param_struct.ae_ind = 'N';
	strcpy(l_sys_ivcontrol_param_struct.b_processdt, l_sys_ivcontrol_param_struct.b_upto_date);
	strcpy(l_sys_ivcontrol_param_struct.last_dlv_date, chr_l_sys_date);

	int_l_retstat = 0;

	if ( APL_FAILURE == IV_Mod_IVCNTLPARAM(&l_sys_ivcontrol_param_struct, &int_l_retstat, 
				l_debug_info_ptr) )
	{
		CO_ProcMonitor(l_errorlogflptr, "Failed to find new values of billing control parameters\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);

		fflush(l_errorlogflptr);
		fprintf(l_user_logfile,"Error : Failed to find new values of billing control parameters. Please contact support.\n");

		APL_GOBACK_FAIL
	}


	l_eu_condexists=0;

	if (APL_FAILURE == CO_Chk_CntryEnabled( "VAT_REGULATION",
				"EU_AND_TR_REGULATION",
				&l_eu_condexists,
				l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	if (l_eu_condexists != 0)
	{
		if ( APL_FAILURE == IV_Proc_ResetInvNoSeqNo(l_errorlogflptr,l_debug_info_ptr) )
		{
			CO_ProcMonitor(l_errorlogflptr, "Failed to reset Sequence INVOICE_NO_SEQ\n", (DEBUG_INFO_STRUCT_H **)NULL,(INTL_ENV_DATA_STRUCT_H *)NULL);

			fflush(l_errorlogflptr);
			fprintf(l_user_logfile,"Error : Database error. Please contact support.\n");

			APL_GOBACK_FAIL
		}
	}
}


strcpy(l_sys_batchproc_struct_h.status_ind, "completed");
memset(l_sys_batchproc_struct_h.processing_status, APL_NULL_CHAR, 51);
	l_sys_batchproc_struct_i.i_status_ind = 0;
	l_sys_batchproc_struct_i.i_restart_info = -1;

	

	memset(l_sys_batchproc_struct_h.stat_det, APL_NULL_CHAR, 71);
	sprintf(l_sys_batchproc_struct_h.stat_det, "%d", int_l_commitcounter);

	l_sys_batchproc_struct_i.i_stat_det = 0;

	EXEC SQL UPDATE SYS_BATCHPROC
		 SET STATUS = :l_sys_batchproc_struct_h.status_ind
			       INDICATOR :l_sys_batchproc_struct_i.i_status_ind,
		     PROCESSING_STATUS = :l_sys_batchproc_struct_h.processing_status
				     INDICATOR :l_sys_batchproc_struct_i.i_restart_info,
		     STAT_DET = :l_sys_batchproc_struct_h.stat_det 
				  INDICATOR :l_sys_batchproc_struct_i.i_stat_det
		 WHERE ROWID = :chr_h_batch_in_proc_rowid;

	IS_ANY_ORA_ERROR

   	if(int_bl_err_tot == 1)
            	APL_GOBACK_FAIL
        else
           	APL_GOBACK_SUCCESS


	RETURN_SUCCESS:


		/****************** Bageshri HB_IV_004 : To skip Telex message generation ***********/

		IF_COND_NOT_EXISTS("IV_DELIVERY","NO_TELEX_MSG")
		{
		fclose(l_BlPrFlPtr);
		fclose(l_BlPrErrLogFlPtr);
		fclose(l_BlPrUsrLogFlPtr);
		l_BlPrFlPtr = (FILE *)NULL;
		l_BlPrErrLogFlPtr = (FILE *)NULL;
		l_BlPrUsrLogFlPtr = (FILE *)NULL;
		}
		fprintf(l_errorlogflptr,"\nBill delivery finished successfully.\n");
		fclose(l_errorlogflptr);

		l_errorlogflptr = (FILE *)NULL;

                APL_IF_DEBUG
		{
                        CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Delivery().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
                }

                return APL_SUCCESS;

	RETURN_FAILURE:

                if ( chr_l_isopenservcursor == 'Y' )
                {
                        EXEC SQL CLOSE ServCursor_2;
                }

                if ( chr_l_isopenacccursor == 'Y' )
                {
                        EXEC SQL CLOSE AccCursor;
                }


		/****************** Bageshri HB_IV_004 : To skip Telex message generation ***********/
		/* Added by Gouse to mark complete Bill Del even though its failed - Start */
		strcpy(l_sys_batchproc_struct_h.status_ind, "completed");
		memset(l_sys_batchproc_struct_h.processing_status, APL_NULL_CHAR, 51);
   l_sys_batchproc_struct_i.i_status_ind = 0;
   l_sys_batchproc_struct_i.i_restart_info = -1;



   memset(l_sys_batchproc_struct_h.stat_det, APL_NULL_CHAR, 71);
   sprintf(l_sys_batchproc_struct_h.stat_det, "%d", int_l_commitcounter);

   l_sys_batchproc_struct_i.i_stat_det = 0;

   EXEC SQL UPDATE SYS_BATCHPROC
       SET STATUS = :l_sys_batchproc_struct_h.status_ind
                INDICATOR :l_sys_batchproc_struct_i.i_status_ind,
           PROCESSING_STATUS = :l_sys_batchproc_struct_h.processing_status
                 INDICATOR :l_sys_batchproc_struct_i.i_restart_info,
           STAT_DET = :l_sys_batchproc_struct_h.stat_det
              INDICATOR :l_sys_batchproc_struct_i.i_stat_det
       WHERE ROWID = :chr_h_batch_in_proc_rowid;

   IS_ANY_ORA_ERROR
		/* Added by Gouse to mark complete Bill Del even though its failed - End */


		IF_COND_NOT_EXISTS("IV_DELIVERY","NO_TELEX_MSG")
		{
		fclose(l_BlPrFlPtr);
		fclose(l_BlPrErrLogFlPtr);
		fclose(l_BlPrUsrLogFlPtr);
		l_BlPrFlPtr = (FILE *)NULL;
		l_BlPrErrLogFlPtr = (FILE *)NULL;
		l_BlPrUsrLogFlPtr = (FILE *)NULL;
		}
		fprintf(l_errorlogflptr,"\nBill Delivery Failed.\n");
		fclose(l_errorlogflptr);

		l_errorlogflptr = (FILE *)NULL;

                APL_IF_DEBUG
		{
                        CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
 IV_Delivery().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
                }

                return APL_FAILURE;
}

int IV_Chk_SubAccAuth(char *p_str_client, FILE *p_file_tech_logfile, FILE *p_file_user_logfile,
		 DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	int is_cursor_open = 0,int_l_retstat = 0;

	EXEC SQL BEGIN DECLARE SECTION;

	char chr_l_client[APL_CLIENT_LENGTH];
	short i_client = 0;
	struct sqlca sqlca;

 	EXEC SQL VAR chr_l_client IS STRING;

	EXEC SQL END DECLARE SECTION;

	IV_CLIENTSETUP_STRUCT l_iv_cltsetup_struct;

	FILE *l_file_tech_logfile = p_file_tech_logfile;
	FILE *l_file_user_logfile = p_file_user_logfile;

 	APL_IF_DEBUG
        {
            CO_ProcMonitor(APL_OUT_FILE,"Entered function IV_Chk_SubAccAuth",NULL,NULL);
    	}


	EXEC SQL DECLARE SubDlvCursor_1 CURSOR FOR

		SELECT DISTINCT IV_CLIENTSETUP.CLIENT 
		FROM IV_CLIENTSETUP, IV_SERVICE_CHRG, SYS_IVCONTROLPARAM 
		WHERE ((IV_CLIENTSETUP.CLIENT = IV_SERVICE_CHRG.CLIENT) 
				AND (IV_CLIENTSETUP.B_GEN_IND = 'M') 
				AND (IV_SERVICE_CHRG.MASTER_CLT = :p_str_client) 
				AND (IV_CLIENTSETUP.DATE_OF_INPUT <= SYS_IVCONTROLPARAM.B_UPTO_DATE) 
				AND (IV_SERVICE_CHRG.DATEOF_BILLING = SYS_IVCONTROLPARAM.B_UPTO_DATE));
				/*AND (IV_CLIENTSETUP.B_DLV_DATE IS NULL 
					OR IV_CLIENTSETUP.B_DLV_DATE <= SYS_IVCONTROLPARAM.LAST_DLV_DATE));*/

	EXEC SQL OPEN SubDlvCursor_1;

	IS_ANY_ORA_ERROR

	is_cursor_open = 1;

		for ( ; ; )
		{
			memset(chr_l_client, APL_NULL_CHAR, APL_CLIENT_LENGTH);

			EXEC SQL FETCH SubDlvCursor_1 INTO :chr_l_client:i_client;

			IS_ANY_ORA_ERROR

				if(APL_ZERO_RESULT_SET)
				{
				        fprintf(l_file_tech_logfile,"Completed sub accounts authorization check.\n");
				        fprintf(l_file_user_logfile,"Completed sub accounts authorization check.\n");
					break;
				}
			Alert("Processing sub client |%s| for authorization check ",chr_l_client);
			if (APL_FAILURE == IV_Rtv_IVCUSTSETUP( chr_l_client,
						&l_iv_cltsetup_struct,
						&int_l_retstat,
						l_debug_info_ptr))
			{
				if ( int_l_retstat == IV_CRITCAL_ERROR_IND)
				{
				        fprintf(l_file_tech_logfile,"Error : Fatal Error In Billing Customer Setup for client |%s|, Table IV_CLIENTSETUP\n",chr_l_client);
				        fprintf(l_file_user_logfile,"Error : Database Error. Please contact support.\n");
					CO_InsertErr(  l_debug_info_ptr,
							DB_ERR_NO,
							"IV_CLIENTSETUP",
							APL_NULL_STRING,
							APL_NULL_STRING,
							__LINE__,
							__FILE__);
					APL_GOBACK_FAIL
				}
				else if (int_l_retstat == IV_NO_DATA_FOUND_ERR)
				{
				        fprintf(l_file_tech_logfile,"Error : Billing Setup Not Found For Client : %s\n",chr_l_client);
				        fprintf(l_file_user_logfile,"Error : Billing Setup Not Found For Client : %s\n",chr_l_client);
					CO_InsertErr(  l_debug_info_ptr,
							ERR_BILLCNTRL_PARAM_NOTFND,
							APL_NULL_STRING,
							APL_NULL_STRING,
							APL_NULL_STRING,
							__LINE__,
							__FILE__);

					APL_GOBACK_FAIL
				}
			}
			if(l_iv_cltsetup_struct.stat_ind != 'A')
			{
			        fprintf(l_file_tech_logfile,"Error : Billing Setup Not Authorized For client : |%s|\n",chr_l_client);
			        fprintf(l_file_user_logfile,"Error : Billing Setup Not Authorized For client : %s\n",chr_l_client);
				APL_GOBACK_FAIL
			}
		}		

		EXEC SQL CLOSE SubDlvCursor_1;

		is_cursor_open = 0;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

	if(is_cursor_open == 1)
	{
		EXEC SQL CLOSE SubDlvCursor_1;
	}

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
				IV_Chk_SubAccAuth().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
	}

	return APL_SUCCESS;

RETURN_FAILURE:

	if(is_cursor_open == 1)
	{
		EXEC SQL CLOSE SubDlvCursor_1;
	}

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
				IV_Chk_SubAccAuth().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
	}

	return APL_FAILURE;


}

int IV_Mod_SubAccBillDlvDt(char *p_str_client,char *p_str_sys_date,
		int *int_l_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	int is_cursor_open = 0;
	EXEC SQL BEGIN DECLARE SECTION;
	char chr_l_client[APL_CLIENT_LENGTH];
	short i_client = 0;
	struct sqlca sqlca;
 	EXEC SQL VAR chr_l_client IS STRING;
	EXEC SQL END DECLARE SECTION;

 	APL_IF_DEBUG
        {
            CO_ProcMonitor(APL_OUT_FILE,"Entered function IV_Mod_SubAccBillDlvDt",NULL,NULL);
    	}

	EXEC SQL DECLARE SubDlvCursor_2 CURSOR FOR

		SELECT DISTINCT IV_CLIENTSETUP.CLIENT 
		FROM IV_CLIENTSETUP, IV_SERVICE_CHRG, SYS_IVCONTROLPARAM 
		WHERE ((IV_CLIENTSETUP.CLIENT = IV_SERVICE_CHRG.CLIENT) 
				AND (IV_CLIENTSETUP.B_GEN_IND = 'M') 
				AND (IV_SERVICE_CHRG.MASTER_CLT = :p_str_client) 
				AND (IV_CLIENTSETUP.DATE_OF_INPUT <= SYS_IVCONTROLPARAM.B_UPTO_DATE) 
				AND (IV_CLIENTSETUP.STAT_IND = 'A') 
				AND (IV_SERVICE_CHRG.DATEOF_BILLING = SYS_IVCONTROLPARAM.B_UPTO_DATE) 
				AND (IV_CLIENTSETUP.B_DLV_DATE IS NULL 
					OR IV_CLIENTSETUP.B_DLV_DATE <= SYS_IVCONTROLPARAM.LAST_DLV_DATE));

	EXEC SQL OPEN SubDlvCursor_2;

	IS_ANY_ORA_ERROR

	is_cursor_open = 1;

		for ( ; ; )
		{
			memset(chr_l_client, APL_NULL_CHAR, APL_CLIENT_LENGTH);

			EXEC SQL FETCH SubDlvCursor_2 INTO :chr_l_client:i_client;

			IS_ANY_ORA_ERROR

				if(APL_ZERO_RESULT_SET)
				{
					CO_ProcMonitor(APL_OUT_FILE,"Completed sub accounts updation for last bill delivery date",NULL,NULL);
					break;
				}
			Alert("Processing sub client |%s| for updation of last bill delivery date ",chr_l_client);

			EXEC SQL UPDATE IV_CLIENTSETUP SET  B_DLV_DATE = :p_str_sys_date
				WHERE CLIENT =  :chr_l_client;

				IS_ANY_ORA_ERROR;
		}

		EXEC SQL CLOSE SubDlvCursor_2;

		is_cursor_open = 0;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

	if(is_cursor_open == 1)
	{
		EXEC SQL CLOSE SubDlvCursor_2;
	}

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
				IV_Mod_SubAccBillDlvDt().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
	}

	return APL_SUCCESS;

RETURN_FAILURE:

	if(is_cursor_open == 1)
	{
		EXEC SQL CLOSE SubDlvCursor_2;
	}

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
				IV_Mod_SubAccBillDlvDt().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
	}

	return APL_FAILURE;
}
