







#include "CO_HostStructdef.h"
EXEC SQL INCLUDE SQLCA.H;

int CR_Proc_OrdExecRst(	char *chr_p_client,
							char *p_dealident,
							char *p_deal_access_stamp,
							char *p_ord_access_stamp,
							INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{
	struct sqlca sqlca;
	DL_DEAL_OTH_STRUCT_H	*l_dl_deal_oth_struct_hb		=	NULL;
	DL_DEALAUDIT_STRUCT_H *l_dl_dealaudit_struct_hb			=	NULL;
	INTL_ENV_DATA_STRUCT_H	*l_intl_env_data_h				=	NULL;
	char		chr_l_buf[BUFFER_LEN]							=	APL_NULL_STRING;
	char		chr_l_h_trd_access_stamp[APL_DATE_LEN]	=	APL_NULL_STRING;
	char		chr_l_h_trd_inputdt[APL_DATE_LEN]			=	APL_NULL_STRING;
	char		chr_l_h_trd_origrefno[APL_TXNREFNO_LEN]	=	APL_NULL_STRING;
	char		chr_l_h_trd_confdt[APL_DATE_LEN]			=	APL_NULL_STRING;
	char		chr_l_h_ord_rowid[APL_ROWID_LEN]			=	APL_NULL_STRING;
	char		chr_l_h_ord_access_stamp[APL_DATE_LEN]	=	APL_NULL_STRING;
	char		chr_l_h_ord_buysellflg[APL_FLAG_LENGTH]		=	APL_NULL_STRING;
	char		chr_l_access_stamp[APL_DATE_LEN]			=	APL_NULL_STRING;
	char		chr_l_ord_status[RECORD_STAT_LEN]		=	APL_NULL_STRING;
	char		chr_l_lastexecdt[APL_DATE_LEN]				=	APL_NULL_STRING;
	char		int_l_exist_a										=	APL_NULL_CHAR;
	char		chr_l_auth										=	APL_NULL_CHAR;
	char		chr_l_del											=	APL_NULL_CHAR;
	char		chr_l_cancel										=	APL_NULL_CHAR;
	char		chr_l_exec										=	APL_NULL_CHAR;
	char		chr_l_exectyp									=	APL_NULL_CHAR;
	char		chr_l_expire										=	APL_NULL_CHAR;
	double	l_h_trd_quantity									=	0;
	
	double	l_h_trd_orig_qty							=	0;
	double	l_h_trd_cost								=	0;
	double	l_h_ord_execquantity							=	0;
	double	dbl_l_brkgcomm									=	0;
	double	l_old_quantity									=	0;
	double	l_old_limitcost							=	0;
	double	l_limitcost								=	0;
	short		l_i_trd_qty									=	0;
	
	short		l_i_trd_origqty							=	0;
	short		l_i_trd_inputdt							=	0; 
	short		l_i_trd_access_stamp						=	0;
	short		l_i_trd_origrefno							= 	0;
	short		l_i_trd_confdt								=	0;
	short		l_i_trd_price								=	0;
	short		l_i_ord_execqty							=	0;
	short		l_i_ord_rowid								=	0;
	short		l_i_ord_buysellflg						=	0;
	short		l_i_ord_access_stamp						=	0;
	short		int_l_condexists_A								=	0;
	short		int_l_error_flg									=	APL_SUCCESS;

	#ifdef APL_THREADS
		APL_SET_CONTEXT;
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE,
						"Entering processtion CR_Proc_OrdExecRst\n",
						NULL,
						p_intl_envdatastruct_h );
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf,
					"The client is : %s\n",
					chr_p_client );
		CO_ProcMonitor( 	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_envdatastruct_h );
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf,
					"The trade refno is : %s\n",
					p_dealident );
		CO_ProcMonitor( 	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_envdatastruct_h );
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf,
					"The Access Stamp of Trade Record is : %s\n",
					p_deal_access_stamp );
		CO_ProcMonitor( 	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_envdatastruct_h );
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(	chr_l_buf,
					"The Access Stamp of Order Record is : %s\n",
					p_ord_access_stamp );
		CO_ProcMonitor( 	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_envdatastruct_h );
	}

	

	EXEC SQL VAR	chr_l_h_trd_access_stamp IS STRING;
	EXEC SQL VAR	chr_l_h_trd_inputdt 		IS STRING;
	EXEC SQL VAR	chr_l_h_trd_origrefno 	IS STRING;
	EXEC SQL VAR	chr_l_h_trd_confdt			IS STRING;
	EXEC SQL VAR	chr_l_h_ord_rowid 			IS STRING;
	EXEC SQL VAR 	chr_l_h_ord_access_stamp	IS STRING;
	EXEC SQL VAR 	chr_l_h_ord_buysellflg	IS STRING;

	sqlca.sqlcode = 0;

	

	if ( !strlen(chr_p_client) )
	{
		APL_DATA_MISSING(	"Account",
								APL_NULL_STRING,
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	}

	if ( !strlen(p_dealident) )
	{
		APL_DATA_MISSING(	"Ref. Number",
								APL_NULL_STRING,
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	}

	if ( !strlen(p_deal_access_stamp) )
	{
		APL_DATA_MISSING(	"Access Stamp Of Trd",
								APL_NULL_STRING,
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	}

	if ( !strlen(p_ord_access_stamp) )
	{
		APL_DATA_MISSING(	"Access Stamp of Ord",
								APL_NULL_STRING,
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	}

	if ( int_l_error_flg == APL_FAILURE )
	{
		APL_GOBACK_FAIL;
	}

	
	

	EXEC SQL SELECT 	QTY,
							DATEOF_INPUT,
							ACCESS_STAMP,
							ORIG_REFNO,
							VAL_FDT,
							COST,
							ORIG_QTY
				INTO		:l_h_trd_quantity:l_i_trd_qty,
							:chr_l_h_trd_inputdt:l_i_trd_inputdt,
							:chr_l_h_trd_access_stamp:l_i_trd_access_stamp,
							:chr_l_h_trd_origrefno:l_i_trd_origrefno,
							:chr_l_h_trd_confdt:l_i_trd_confdt,
							:l_h_trd_cost:l_i_trd_price,
							:l_h_trd_orig_qty:l_i_trd_origqty
				FROM		DL_DEAL
				WHERE		CLIENT	=	:chr_p_client
				AND		IDENTIY_NO		=	:p_dealident	
				FOR		UPDATE OF ACCESS_STAMP;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_DEAL_NF,
														chr_p_client,
														p_dealident,
														APL_NULL_STRING );

	if ( l_i_trd_price == -1 )
	{
		l_h_trd_cost = 0;
	}

	
	EXEC SQL SELECT 	ROWID,
							EXEC_QTY,
							ACCESS_STAMP,
							BUY_SELL_IND
				INTO		:chr_l_h_ord_rowid:l_i_ord_rowid,
							:l_h_ord_execquantity:l_i_ord_execqty,
							:chr_l_h_ord_access_stamp:l_i_ord_access_stamp,
							:chr_l_h_ord_buysellflg:l_i_ord_buysellflg
				FROM		OR_ORDERDETAILS
				WHERE		CLIENT	=	:chr_p_client
				AND		ORD_REFNO	=	:chr_l_h_trd_origrefno
				FOR		UPDATE OF ACCESS_STAMP;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_ORD_NOTFND,
														chr_p_client,
														chr_l_h_trd_origrefno,
														APL_NULL_STRING );

	if ( l_i_ord_execqty == -1 )
	{
		l_h_ord_execquantity = 0;
	}

	

	if ( strcmp( chr_l_h_trd_access_stamp, p_deal_access_stamp ) )
	{
		if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
														ERR_ACCESSSTAMP_CHGD,
														"Trade",
														chr_p_client,
														p_dealident,
														__LINE__,
														__FILE__ ) )
		{
			APL_GOBACK_FAIL;
		}
		int_l_error_flg = APL_FAILURE;
	}

	if ( strcmp( chr_l_h_ord_access_stamp, p_ord_access_stamp ) )
	{
		if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
														ERR_ACCESSSTAMP_CHGD,
														"Order",
														chr_p_client,
														chr_l_h_trd_origrefno,
														__LINE__,
														__FILE__ ) )
		{
			APL_GOBACK_FAIL;
		}
		int_l_error_flg = APL_FAILURE;
	}

	

	if ( strlen(chr_l_h_trd_confdt) )
	{
		if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
														ERR_DEAL_CONF,
														chr_p_client,
														p_dealident,
														APL_NULL_STRING,
														__LINE__,
														__FILE__ ) )
		{
			APL_GOBACK_FAIL;
		}
		int_l_error_flg = APL_FAILURE;
	}
	
	

	if( l_h_trd_quantity != l_h_trd_orig_qty )
	{
		if (APL_FAILURE == CO_InsertErr( l_debug_info_ptr,
													  ERR_DEAL_PARTCONF,
													  chr_p_client,
													  p_dealident,
													  APL_NULL_STRING,
													  __LINE__,
													  __FILE__))
		{
			APL_GOBACK_FAIL;
		}
		int_l_error_flg	= APL_FAILURE;
	}

	

	int_l_exist_a 		= 	'Y';
	chr_l_auth  		= 	NULL;
	chr_l_del			=	'N';
	chr_l_cancel		=	NULL;
	chr_l_exec		=	'Y';
	chr_l_exectyp	=	NULL;
	chr_l_expire		=	NULL;

	if ( APL_FAILURE == CR_Chk_Ord(	chr_p_client,
											   chr_l_h_trd_origrefno,
												int_l_exist_a,
												chr_l_auth,
												chr_l_del,
												chr_l_cancel,
												chr_l_exec,
												chr_l_exectyp,
												chr_l_expire,
												l_debug_info_ptr ) )
	{
		int_l_error_flg = APL_FAILURE;
	}

	if ( l_h_trd_quantity > l_h_ord_execquantity )
	{
		if ( APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
														ERR_DATA_INTEGRITY, 
														"Trd QTY > Exec QTY",
														chr_p_client,
														chr_l_h_trd_origrefno,
														__LINE__,
														__FILE__ ) )
		{
			APL_GOBACK_FAIL;
		}
		int_l_error_flg = APL_FAILURE;
	}

	if ( int_l_error_flg == APL_FAILURE )
	{
		APL_GOBACK_FAIL;
	}

	if ( APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr) )
	{
		APL_GOBACK_FAIL;
	}

	

	  

	l_dl_deal_oth_struct_hb = (DL_DEAL_OTH_STRUCT_H*)calloc(1,sizeof(DL_DEAL_OTH_STRUCT_H));
	APL_MALLOC_FAIL(l_dl_deal_oth_struct_hb);

	l_intl_env_data_h = (INTL_ENV_DATA_STRUCT_H*)calloc(1,sizeof(INTL_ENV_DATA_STRUCT_H) );
	APL_MALLOC_FAIL(l_intl_env_data_h);

	

	strcpy(l_intl_env_data_h->usr, p_intl_envdatastruct_h->usr);
	strcpy(l_intl_env_data_h->h_mode, APL_FUNC_DELETE );
	strcpy(l_intl_env_data_h->processtion, p_intl_envdatastruct_h->processtion );
	strcpy(l_intl_env_data_h->auth_req, p_intl_envdatastruct_h->auth_req );
	strcpy(l_intl_env_data_h->subprocess, ORDEXECRESET );
	strcpy(l_intl_env_data_h->h_process, APL_NULL_STRING );	

	strcpy( l_dl_deal_oth_struct_hb->h_dl_client, chr_p_client );
	strcpy( l_dl_deal_oth_struct_hb->h_indentity_no,	 p_dealident );
	strcpy( l_dl_deal_oth_struct_hb->h_locindentity_no,	APL_NULL_STRING ); 
	strcpy( l_dl_deal_oth_struct_hb->h_brkrno, 	APL_NULL_STRING );
	l_dl_deal_oth_struct_hb->h_clt_reqdel_flag[0] = 'N';
	l_dl_deal_oth_struct_hb->h_clt_reqdel_flag[1] = '\0';
	strcpy( l_dl_deal_oth_struct_hb->h_access_stamp, p_deal_access_stamp );

	if ( APL_FAILURE == DL_Proc_TrdOth( 	l_dl_deal_oth_struct_hb,
												  	l_intl_env_data_h,
													l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL;
	}

	

	EXEC SQL SELECT 	ACCESS_STAMP 
				INTO	 	:chr_l_h_trd_access_stamp:l_i_trd_access_stamp
				FROM		DL_DEAL
				WHERE		CLIENT	=	:chr_p_client
				AND		IDENTIY_NO		=	:p_dealident;

	IS_ANY_ORA_ERROR;

	strcpy( l_intl_env_data_h->h_mode, APL_FUNC_AUTHORISE );
	strcpy( l_intl_env_data_h->usr, APL_USER_SYSTEM );
	strcpy( l_dl_deal_oth_struct_hb->h_access_stamp, chr_l_h_trd_access_stamp );

	if ( APL_FAILURE == DL_Proc_TrdOth( 	l_dl_deal_oth_struct_hb,
												  	l_intl_env_data_h,
													l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL;
	}

	

	EXEC SQL INSERT INTO OR_HISEXECORDER
				SELECT 	* 
				FROM		OR_EXECORDER 
				WHERE		CLIENT		= :chr_p_client
				AND		IDENTIY_NO			= :p_dealident
				AND		ORD_REFNO	= :chr_l_h_trd_origrefno
				AND		EXEC_DATE		= :chr_l_h_trd_inputdt;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_ORD_NOTFND,
														"Ord Exec. Recs",
														chr_p_client,
														chr_l_h_trd_origrefno );

	

	EXEC SQL DELETE OR_EXECORDER 
				WHERE		CLIENT		=	:chr_p_client
				AND		IDENTIY_NO			=	:p_dealident 
				AND		ORD_REFNO	=	:chr_l_h_trd_origrefno
				AND		EXEC_DATE		=	:chr_l_h_trd_inputdt;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_ORD_NOTFND,
														"Ord Exec. Recs",
														chr_p_client,
														chr_l_h_trd_origrefno );
	 
	

	if ( APL_FAILURE == CO_RtvSysDtTime( chr_l_access_stamp,
															l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL;
	}

	if ( l_h_ord_execquantity == l_h_trd_quantity )
	{
		strcpy( chr_l_ord_status, STATUS_AUTH );
		strcpy( chr_l_lastexecdt, APL_NULL_STRING );
	}
	else
	{
		strcpy( chr_l_ord_status, STATUS_PART_EXEC );

		EXEC SQL SELECT 	MAX(EXEC_DATE) 
					INTO		:chr_l_lastexecdt
					FROM 		OR_EXECORDER
					WHERE		CLIENT		=	:chr_p_client
					AND		ORD_REFNO	=	:chr_l_h_trd_origrefno;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_REC_NOTFND,
															"Ord. Exec. Dtls",
															chr_p_client,
															chr_l_h_trd_origrefno );
	}

	EXEC SQL UPDATE OR_ORDERDETAILS 
				SET	EXEC_QTY			=  EXEC_QTY - :l_h_trd_quantity,
						ACCESS_STAMP	=	:chr_l_access_stamp,
						CHECKER			=	:p_intl_envdatastruct_h->usr,
						CHECKER_DT		=	:chr_l_access_stamp,
						ORD_STAT	=	:chr_l_ord_status,
						LAST_EXEC_DATE		=	:chr_l_lastexecdt
				WHERE	ROWID				=	:chr_l_h_ord_rowid;

	

	l_dl_dealaudit_struct_hb = (DL_DEALAUDIT_STRUCT_H*)calloc(1,sizeof(DL_DEALAUDIT_STRUCT_H));
	APL_MALLOC_FAIL(l_dl_dealaudit_struct_hb);

	strcpy(l_dl_dealaudit_struct_hb->h_dl_client, chr_p_client);
	strcpy(l_dl_dealaudit_struct_hb->h_indentity_no,   chr_l_h_trd_origrefno);
	l_dl_dealaudit_struct_hb->h_trail_for[0] = ORD_TRAIL_FOR;
	l_dl_dealaudit_struct_hb->h_trail_for[1] = '\0';
	strcpy(l_dl_dealaudit_struct_hb->h_processdetail, p_intl_envdatastruct_h->processtion);
	strcpy(l_dl_dealaudit_struct_hb->h_proc_usr, p_intl_envdatastruct_h->usr);
	strcpy(l_dl_dealaudit_struct_hb->h_subprocess, APL_NULL_STRING);
	strcpy(l_dl_dealaudit_struct_hb->h_logdate, APL_NULL_STRING);
	strcpy(l_dl_dealaudit_struct_hb->h_fail_cd, APL_NULL_STRING);
	l_dl_dealaudit_struct_hb->h_qty = l_h_trd_quantity;
	l_dl_dealaudit_struct_hb->h_dlfromord[0] = 'N';
	l_dl_dealaudit_struct_hb->h_dlfromord[1] = '\0';

	if ( APL_FAILURE == CR_Mod_CLHAudTrail( l_dl_dealaudit_struct_hb,
													l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL;
	} 	

	

	if ( APL_FAILURE == CO_Chk_CntryEnabled(	"ORD_MAINT",
														"UPDATE_ACCBAL",
														&int_l_condexists_A,
														l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL;
	}

	if ( int_l_condexists_A > 0 && ( chr_l_h_ord_buysellflg[0] == SELL_IND ) )
	{
		l_limitcost = l_h_trd_cost * 100;
		dbl_l_brkgcomm	= 0;
		l_old_quantity	=	0;
		l_old_limitcost = 0;

		if ( APL_FAILURE == CR_Mod_CustCashBal(	chr_p_client,
														&l_h_trd_quantity,
														&l_old_quantity,
														&l_limitcost,
														&l_old_limitcost,
														'S',
														&dbl_l_brkgcomm,
														l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL;
		}	
	}

	  APL_GOBACK_SUCCESS //AIX Warning Removal
	RETURN_SUCCESS :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving processtion CR_Proc_OrdExecRst with success\n",
							l_debug_info_ptr,
							p_intl_envdatastruct_h );
		}
		APL_FREE(l_dl_deal_oth_struct_hb);
		APL_FREE(l_dl_dealaudit_struct_hb);
		APL_FREE(l_intl_env_data_h);
		return(APL_SUCCESS);

	RETURN_FAILURE :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving processtion CR_Proc_OrdExecRst with failure\n",
							l_debug_info_ptr,
							p_intl_envdatastruct_h );
		}
		APL_FREE(l_dl_deal_oth_struct_hb);
		APL_FREE(l_dl_dealaudit_struct_hb);
		APL_FREE(l_intl_env_data_h);
		return(APL_FAILURE);
}
