/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         :      Corporate Actions
 *
 * File Name           :      IV_IVAccEnt.pc
 *
 * Description         :      Contains Functions Related to Accounting Entries
 *
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author           Description        RFS No.
 * ---------   --------  ---------------  ------------------   ---------
 * 18/01/2006   1.2        Smita Bhat        New File          Base Version
 * 05/06/2015   1.3        Prateek Singh     Margin AE and Lien Automation     ISKB_1493
 *************************************************************************/
#include "IV_Control_A.h"
#define	SUMMENT				'4'
#define	CLT_CREDIT_IND	'1'
#define	CLT_DEBIT_IND	'0'


EXEC SQL INCLUDE SQLCA;

int	IV_Mod_ActEntNew(PRO_ACCTENT_STRUCT_H		*p_acctent_struct,
							  DEBUG_INFO_STRUCT_H				**l_debug_info_ptr)
{



char					chr_l_buffer[BUFFER_LEN]	= APL_NULL_STRING;

double				l_prvlcy_amount=0.0;
double				chr_l_lcy_amount   =0.0;
double				l_sumlcy_amount=0.0;

EXEC SQL BEGIN DECLARE SECTION;
struct 					sqlca sqlca;
int						int_h_count =0;
char						h_db_cr_flag;

char						chr_h_summent;

double h_lcy_amount = 0.0; 

short						int_i_count =0;
short 					i_lcy_amount =0;
short						i_db_cr_flag = 0;

double					l_dbl_temp = 0;
PRO_ACCTENT_STRUCT_H  	l_pro_acctent_struct_h;
PRO_ACCTENT_STRUCT_I 	l_pro_acctent_struct_i = {0,0,0,0,0,0,0,0,
														0,0,0,0,0,0,0,
														0,0,0,0,0,0,0,0 };

 	EXEC SQL VAR l_pro_acctent_struct_h.brnch_cd  IS STRING;
   EXEC SQL VAR l_pro_acctent_struct_h.inden_num  IS STRING;
   EXEC SQL VAR l_pro_acctent_struct_h.client  IS STRING;
   EXEC SQL VAR l_pro_acctent_struct_h.curr_cd  IS STRING;
   EXEC SQL VAR l_pro_acctent_struct_h.val_date  IS STRING;
   EXEC SQL VAR l_pro_acctent_struct_h.deal_cd  IS STRING;
   EXEC SQL VAR l_pro_acctent_struct_h.spl_clt_cd  IS STRING;
  /* EXEC SQL VAR l_pro_acctent_struct_h.DETAIL  IS STRING; - Smita - Changes Base Version CA - */
   EXEC SQL VAR l_pro_acctent_struct_h.proc_num  IS STRING;
  /* EXEC SQL VAR l_pro_acctent_struct_h.DEALDT  IS STRING; - Smita - changes Base Version CA */
   EXEC SQL VAR l_pro_acctent_struct_h.deal_ident  IS STRING;
   
   EXEC SQL VAR l_pro_acctent_struct_h.passed_through  IS STRING;
   EXEC SQL VAR l_pro_acctent_struct_h.api_status  IS STRING;
   EXEC SQL VAR l_pro_acctent_struct_h.api_reason_code  IS STRING;
   EXEC SQL VAR l_pro_acctent_struct_h.api_reason_desc  IS STRING;
   EXEC SQL VAR l_pro_acctent_struct_h.finacle_tran_id  IS STRING;
   EXEC SQL VAR l_pro_acctent_struct_h.finacle_tran_date  IS STRING;
   EXEC SQL VAR l_pro_acctent_struct_h.api_request_id  IS STRING;



EXEC SQL END DECLARE SECTION;

#ifdef APL_THREADS
		 APL_SET_CONTEXT
		 EXEC SQL CONTEXT USE :my_ctx_local;
#endif


l_pro_acctent_struct_h.fccy_amt = 0;
l_pro_acctent_struct_h.lcl_amount = 0;
l_pro_acctent_struct_h.report_amt  = 0;
l_pro_acctent_struct_h.report_clt  = 0;
l_pro_acctent_struct_h.report_ser  = 0;
l_pro_acctent_struct_h.report_tax = 0;
l_pro_acctent_struct_h.rep_exg_rt  = 0;
l_pro_acctent_struct_h.exchg_rt  = 0;

l_pro_acctent_struct_h		= *p_acctent_struct;




 if (l_pro_acctent_struct_h.rec_refer == APL_NULL_CHAR)
 {		
	  APL_DATA_MISSING("RECORDIDENTIFIER",APL_NULL_STRING,APL_NULL_STRING);
	  APL_GOBACK_FAIL;
 }	


 if (l_pro_acctent_struct_h.status_ind== APL_NULL_CHAR)
 {		
	  APL_DATA_MISSING("STATUS_IND",APL_NULL_STRING,APL_NULL_STRING);
	  APL_GOBACK_FAIL;
 }	

 if (l_pro_acctent_struct_h.module_ind == APL_NULL_CHAR)
 {		
	  APL_DATA_MISSING("MODuLEIDENTIFIER",APL_NULL_STRING,APL_NULL_STRING);
	  APL_GOBACK_FAIL;
 }	

 if (l_pro_acctent_struct_h.client == APL_NULL_CHAR)
 {		
	  APL_DATA_MISSING("CLIENT",APL_NULL_STRING,APL_NULL_STRING);
	  APL_GOBACK_FAIL;
 }	
 if (l_pro_acctent_struct_h.val_date == APL_NULL_CHAR)
 {		
	  APL_DATA_MISSING("VALUEDATE",APL_NULL_STRING,APL_NULL_STRING);
	  APL_GOBACK_FAIL;
 }	

 if (l_pro_acctent_struct_h.db_cr_ind == APL_NULL_CHAR)
 {		
	  APL_DATA_MISSING("STATUS_IND",APL_NULL_STRING,APL_NULL_STRING);
	  APL_GOBACK_FAIL;
 }	

 if (l_pro_acctent_struct_h.proc_num == APL_NULL_CHAR)
 {		
	  APL_DATA_MISSING("batch_no ",APL_NULL_STRING,APL_NULL_STRING);
	  APL_GOBACK_FAIL;
 }	

 if (l_pro_acctent_struct_h.lcl_amount == 0)
 {		
	  APL_DATA_MISSING("LCYAMOUNT",APL_NULL_STRING,APL_NULL_STRING);
	  APL_GOBACK_FAIL;
 }	

 if (l_pro_acctent_struct_h.proc_dt == APL_NULL_CHAR)
 {		
	  APL_DATA_MISSING("STATUS_IND",APL_NULL_STRING,APL_NULL_STRING);
	  APL_GOBACK_FAIL;
 }	




if (!strcmp(l_pro_acctent_struct_h.brnch_cd,APL_NULL_STRING))
	l_pro_acctent_struct_i.i_brnch_cd = -1;

if (!strcmp(l_pro_acctent_struct_h.inden_num,APL_NULL_STRING))
	l_pro_acctent_struct_i.i_sequence_num =  -1;

if (!strcmp(l_pro_acctent_struct_h.curr_cd, APL_NULL_STRING))
	l_pro_acctent_struct_i.i_curr_cd =  -1;

if (l_pro_acctent_struct_h.fccy_amt == 0)	
	l_pro_acctent_struct_i.i_fcy_amt = -1;

if (l_pro_acctent_struct_h.exchg_rt  == 0)	
	l_pro_acctent_struct_i.i_exch_rt = -1;


if (!strcmp(l_pro_acctent_struct_h.deal_cd,APL_NULL_STRING))	
	l_pro_acctent_struct_i.i_deal_cd = -1;

if (!strcmp(l_pro_acctent_struct_h.spl_clt_cd ,APL_NULL_STRING))	
	l_pro_acctent_struct_i.i_spl_clt_cd = -1;


if (!strcmp(l_pro_acctent_struct_h.description ,APL_NULL_STRING ))	
	l_pro_acctent_struct_i.i_description  = -1;

if (l_pro_acctent_struct_h.report_amt  == 0)	
	l_pro_acctent_struct_i.i_rep_amount = -1;

if (l_pro_acctent_struct_h.report_clt  == 0)	
	l_pro_acctent_struct_i.i_report_clt = -1;

if (l_pro_acctent_struct_h.report_tax == 0)	
	l_pro_acctent_struct_i.i_report_tax = -1;

if (l_pro_acctent_struct_h.report_ser  == 0)	
	l_pro_acctent_struct_i.i_report_ser = -1;

if (l_pro_acctent_struct_h.rep_exg_rt == 0)	
	l_pro_acctent_struct_i.i_report_ser = -1;




if (!strcmp(l_pro_acctent_struct_h.deal_ident ,  APL_NULL_STRING ))	
	l_pro_acctent_struct_i.i_deal_ident = -1;
	
if (!strcmp(l_pro_acctent_struct_h.passed_through ,  APL_NULL_STRING ))	
	l_pro_acctent_struct_i.i_passed_through = -1;
if (!strcmp(l_pro_acctent_struct_h.api_status ,  APL_NULL_STRING ))	
	l_pro_acctent_struct_i.i_api_status = -1;
if (!strcmp(l_pro_acctent_struct_h.api_reason_code ,  APL_NULL_STRING ))	
	l_pro_acctent_struct_i.i_api_reason_code = -1;
if (!strcmp(l_pro_acctent_struct_h.api_reason_desc ,  APL_NULL_STRING ))	
	l_pro_acctent_struct_i.i_api_reason_desc = -1;
if (!strcmp(l_pro_acctent_struct_h.finacle_tran_id ,  APL_NULL_STRING ))	
	l_pro_acctent_struct_i.i_finacle_tran_id = -1;
if (!strcmp(l_pro_acctent_struct_h.finacle_tran_date ,  APL_NULL_STRING ))	
	l_pro_acctent_struct_i.i_finacle_tran_date = -1;
if (!strcmp(l_pro_acctent_struct_h.api_request_id ,  APL_NULL_STRING ))	
	l_pro_acctent_struct_i.i_api_request_id = -1;


if (l_pro_acctent_struct_h.rec_refer == SUMMENT)
{
	chr_h_summent	= SUMMENT;

	EXEC SQL SELECT LCL_AMOUNT,	DB_CR_IND
				INTO	:h_lcy_amount:i_lcy_amount ,:h_db_cr_flag:i_db_cr_flag
				FROM PRO_ACCTENT
				WHERE CLIENT     = :l_pro_acctent_struct_h.client
				AND	PROC_NUM    = :l_pro_acctent_struct_h.proc_num	
				AND 	STATUS	   = 'G'	
				AND   REC_REFER	= :chr_h_summent;			

	if (sqlca.sqlcode < 0)
	{

 		char chr_l_buffer[KEY_LENGTH];

      memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

      ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

      CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer,
                APL_NULL_STRING, APL_NULL_STRING,
                __LINE__, __FILE__);

      APL_GOBACK_FAIL

	}
	else if (sqlca.sqlcode == 1403)
	{
		

		EXEC SQL INSERT INTO PRO_ACCTENT 
	  			   VALUES (:l_pro_acctent_struct_h INDICATOR :l_pro_acctent_struct_i);
		
		IS_ANY_ORA_ERROR

	}	
	else
	{
		
		

		
      

		if (h_db_cr_flag == CLT_DEBIT_IND)
		{
			l_prvlcy_amount = ( -1 * h_lcy_amount );
		}
	   else
		{	
			l_prvlcy_amount = h_lcy_amount;
		}

		
		

		if (l_pro_acctent_struct_h.db_cr_ind == CLT_DEBIT_IND)
		{
			chr_l_lcy_amount = ( -1 * l_pro_acctent_struct_h.lcl_amount);
		}
      else
      {
			chr_l_lcy_amount = l_pro_acctent_struct_h.lcl_amount;
      }

		l_sumlcy_amount = l_prvlcy_amount + chr_l_lcy_amount;
		
		

		if (l_sumlcy_amount < 0)
		{
			l_sumlcy_amount = ( -1 * l_sumlcy_amount );
			l_pro_acctent_struct_h.db_cr_ind = CLT_DEBIT_IND;
		}
		else
		{
			l_pro_acctent_struct_h.db_cr_ind = CLT_CREDIT_IND;
		}

		
      
		EXEC SQL UPDATE PRO_ACCTENT 
					SET LCL_AMOUNT = :l_sumlcy_amount,
						 DB_CR_IND		= :l_pro_acctent_struct_h.db_cr_ind 
					WHERE CLIENT  = :l_pro_acctent_struct_h.client
					AND	STATUS	= 'G'
					AND PROC_NUM   = :l_pro_acctent_struct_h.proc_num
               AND REC_REFER = :chr_h_summent;

		IS_ANY_ORA_ERROR
	}
}

else
{
	printf("\n\n\n **** HELLO AMIT *****\n");
	printf("moduleind |%c|\n",  l_pro_acctent_struct_h.module_ind);
	printf("dbcrind |%c|\n", l_pro_acctent_struct_h.db_cr_ind);
	printf("description |%s|\n", l_pro_acctent_struct_h.description);
	printf("statusind |%c|\n", l_pro_acctent_struct_h.status_ind);
	printf("recrefer |%c|\n", l_pro_acctent_struct_h.rec_refer);
	printf("procdt |%s|\n", l_pro_acctent_struct_h.proc_dt);
	printf("ledind |%s|\n", l_pro_acctent_struct_h.leg_ind);
	printf("acctype |%s|\n", l_pro_acctent_struct_h.acc_type);
	   printf("Brnch_cd |%s|\n",l_pro_acctent_struct_h.brnch_cd);
		printf("inden_num |%s|\n",l_pro_acctent_struct_h.inden_num);
		printf("client |%s|\n",l_pro_acctent_struct_h.client);
		printf("curr_cd |%s|\n",l_pro_acctent_struct_h.curr_cd);
		printf("val_date |%s|\n",l_pro_acctent_struct_h.val_date);
		printf("dealcd |%s|\n",l_pro_acctent_struct_h.deal_cd);
		printf("splcld |%s|\n",l_pro_acctent_struct_h.spl_clt_cd);
		printf("procnum |%s|\n",l_pro_acctent_struct_h.proc_num);
		printf("dealident |%s|\n",l_pro_acctent_struct_h.deal_ident);

		printf("fccyamt |%lf|\n",l_pro_acctent_struct_h.fccy_amt);
		printf("lclamtoun |%lf|\n",l_pro_acctent_struct_h.lcl_amount);
		printf("reportamt |%lf|\n",l_pro_acctent_struct_h.report_amt);
		printf("reportclt |%lf|\n",l_pro_acctent_struct_h.report_clt);
		printf("reportser |%lf|\n",l_pro_acctent_struct_h.report_ser);
		printf("reportax |%lf|\n",l_pro_acctent_struct_h.report_tax);
		printf("rep_exg_rt |%lf|\n",l_pro_acctent_struct_h.rep_exg_rt);
		printf("exchg_rt |%lf|\n",l_pro_acctent_struct_h.exchg_rt);
		printf("\n\n AMIT END\n");

    if (APL_FAILURE == CO_Round(l_dbl_temp,3,&l_pro_acctent_struct_h.report_ser))
	{
		APL_GOBACK_FAIL	
	}

	l_pro_acctent_struct_h.report_ser = l_dbl_temp;

	EXEC SQL INSERT INTO PRO_ACCTENT 
		  VALUES (:l_pro_acctent_struct_h INDICATOR :l_pro_acctent_struct_i);

	Alert("\n sqlca.sqlcode = [%d]",sqlca.sqlcode);
	
	IS_ANY_ORA_ERROR
}	



APL_GOBACK_SUCCESS

	

RETURN_FAILURE :

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting out of the BDbInsIACCTENT() unsuccessfully.\n",\
(DEBUG_INFO_STRUCT_H **)NULL,(INTL_ENV_DATA_STRUCT_H *)NULL);
	}
	return (APL_FAILURE);


RETURN_SUCCESS :

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting out of the BDbInsIACCTENT() successfully.\n",\
(DEBUG_INFO_STRUCT_H **)NULL,(INTL_ENV_DATA_STRUCT_H *)NULL);
	}
	return (APL_SUCCESS);
}



int  IV_Mod_ActEnt(char	*p_batch_no,
							 char	*p_batch_date,
							 DEBUG_INFO_STRUCT_H	**l_debug_info_ptr)
{


char	h_proc_num[10];
char	h_batch_dt[APL_DATE_LEN];

EXEC SQL BEGIN DECLARE SECTION;
EXEC SQL VAR h_proc_num IS STRING;
EXEC SQL VAR h_batch_dt IS STRING;

struct	sqlca sqlca;
EXEC SQL END DECLARE SECTION;


#ifdef APL_THREADS
		 APL_SET_CONTEXT
		 EXEC SQL CONTEXT USE :my_ctx_local;
#endif

strcpy(h_proc_num,p_batch_no);
strcpy(h_batch_dt,p_batch_date);

EXEC SQL UPDATE PRO_ACCTENT 
	  SET	STATUS ='P' 
		  WHERE PROC_NUM 			= :h_proc_num
				 AND BATCH_DATE	= :h_batch_dt;	

if (sqlca.sqlcode <0)
{
	char	chr_l_buffer[KEY_LENGTH];
 	memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

   ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

   CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer,
                APL_NULL_STRING, APL_NULL_STRING,
                __LINE__, __FILE__);

   APL_GOBACK_FAIL
}
else if (sqlca.sqlcode == 1403)
{
	CO_InsertErr(l_debug_info_ptr,ERR_BATCHNO_NOTFND,APL_NULL_STRING,
						APL_NULL_STRING,APL_NULL_STRING,
						__LINE__,__FILE__);
	APL_GOBACK_FAIL

}

APL_GOBACK_SUCCESS;


   RETURN_SUCCESS:

      APL_IF_DEBUG
      {
         CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
BBDbUpdIACCTENTFn().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
      }
      return APL_SUCCESS;

   RETURN_FAILURE:

      APL_IF_DEBUG
      {
         CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
BBDbUpdIACCTENTFn().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
      }
      return APL_FAILURE;
}


int IV_Mod_ActEntDel(char	*p_batch_no,
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{



char	h_proc_num[10];
char	h_batch_dt[APL_DATE_LEN];

EXEC SQL BEGIN DECLARE SECTION;	
EXEC SQL VAR h_proc_num IS STRING;
EXEC SQL VAR h_batch_dt IS STRING;

struct	sqlca sqlca;
EXEC SQL END DECLARE SECTION;	


#ifdef APL_THREADS
		 APL_SET_CONTEXT
		 EXEC SQL CONTEXT USE :my_ctx_local;
#endif

strcpy(h_proc_num,p_batch_no);


EXEC SQL DELETE PRO_ACCTENT
WHERE PROC_NUM 		=:h_proc_num
/*AND STATUS = 'N'*/; //Commented by Prateek on 25032013 For Reset AE 

if (sqlca.sqlcode < 0)
{ 

	char	chr_l_buffer[KEY_LENGTH];
 	memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

   ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

   CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer,
                APL_NULL_STRING, APL_NULL_STRING,
                __LINE__, __FILE__);

   APL_GOBACK_FAIL
}
else if (sqlca.sqlcode == 1403)
{
	CO_InsertErr(l_debug_info_ptr,ERR_BATCHNO_NOTFND,APL_NULL_STRING,
						APL_NULL_STRING,APL_NULL_STRING,
						__LINE__,__FILE__);
	APL_GOBACK_FAIL

}

/*Added by Prateek on 05062015 for ISKB_1493(Lien Marking and Margin Automation) - Start
Purpose - While Resetting the AE , records from AE_MARGIN_LOG should be deleted too */

EXEC SQL DELETE FROM AE_MARGIN_LOG
WHERE PROC_NUM 		=:h_proc_num;

printf("\n AE RESET : sqlcode after deletion from AE_MARGIN_LOG is [%d]\n",sqlca.sqlcode);

if (sqlca.sqlcode < 0)
{ 

	char	chr_l_buffer[KEY_LENGTH];
 	memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

   ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

   CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer,
                APL_NULL_STRING, APL_NULL_STRING,
                __LINE__, __FILE__);

   APL_GOBACK_FAIL
}
else if (sqlca.sqlcode == 1403)
{
/*	CO_InsertErr(l_debug_info_ptr,ERR_BATCHNO_NOTFND,APL_NULL_STRING,
						APL_NULL_STRING,APL_NULL_STRING,
						__LINE__,__FILE__);
	APL_GOBACK_FAIL*/
	printf("\n AE RESET :NO ENTRIES IN AE_MARGIN_LOG FOR THIS BATCH NUMBER");


}

/*Added by Prateek on 05062015 for ISKB_1493(Lien Marking and Margin Automation) - End*/

APL_GOBACK_SUCCESS;


   RETURN_SUCCESS:

      APL_IF_DEBUG
      {
         CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Mod_ActEntDel().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
      }
      return APL_SUCCESS;

   RETURN_FAILURE:

      APL_IF_DEBUG
      {
         CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
BDbdelIACCTENTFn().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
      }
      return APL_FAILURE;
}







int  IV_Mod_ActEntStatus(char	*p_batch_no,
									 char	*p_batch_date,
									 DEBUG_INFO_STRUCT_H	**l_debug_info_ptr)
{


char	h_proc_num[10];
char	h_batch_dt[APL_DATE_LEN];

EXEC SQL BEGIN DECLARE SECTION;
EXEC SQL VAR h_proc_num IS STRING;
EXEC SQL VAR h_batch_dt IS STRING;

struct	sqlca sqlca;
EXEC SQL END DECLARE SECTION;


#ifdef APL_THREADS
		 APL_SET_CONTEXT
		 EXEC SQL CONTEXT USE :my_ctx_local;
#endif

strcpy(h_proc_num,p_batch_no);
strcpy(h_batch_dt,p_batch_date);

EXEC SQL UPDATE PRO_ACCTENT 
	  SET	STATUS ='N' 
		  WHERE PROC_NUM 			= :h_proc_num
				 AND BATCH_DATE	= :h_batch_dt;	

if (sqlca.sqlcode <0)
{
	char	chr_l_buffer[KEY_LENGTH];
 	memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

   ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

   CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer,
                APL_NULL_STRING, APL_NULL_STRING,
                __LINE__, __FILE__);

   APL_GOBACK_FAIL
}
else if (sqlca.sqlcode == 1403)
{
	CO_InsertErr(l_debug_info_ptr,ERR_BATCHNO_NOTFND,APL_NULL_STRING,
						APL_NULL_STRING,APL_NULL_STRING,
						__LINE__,__FILE__);
	APL_GOBACK_FAIL

}

APL_GOBACK_SUCCESS;


   RETURN_SUCCESS:

      APL_IF_DEBUG
      {
         CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
BBDbUpdStatusIACCTENTFn().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
      }
      return APL_SUCCESS;

   RETURN_FAILURE:

      APL_IF_DEBUG
      {
         CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
BBDbUpdStatusIACCTENTFn().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
      }
      return APL_FAILURE;
}
