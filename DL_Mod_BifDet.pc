
#include "stdio_64.h"
#include "Intellect_Common.h"
#include "DL_Interface.h"
#include "Intellect_Error.h"
#include "CO_IndStructdef.h"
#include "CO_Commdef.h"

EXEC SQL INCLUDE SQLCA.H;


int DL_Mod_BifDet(char *chr_p_dl_client,
				char *chr_p_dl_identiyno,
				double int_p_qty,
				char *chr_l_access_stamp,
				char chr_p_bothdp_flg,
				double p_mod_qty1,
				double p_mod_qty2,
				char *chr_p_depo_loc1,
				char *chr_p_depo_loc2,
				char *chr_mode,
				INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
				DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	int int_l_count=0;

	DL_BIFDET_STRUCT_H   *l_dl_bifdet_struct_h;

	l_dl_bifdet_struct_h =  (DL_BIFDET_STRUCT_H *)calloc(1,sizeof(DL_BIFDET_STRUCT_H));
/*	APL_MALLOC_FAIL_LOC_A(l_dl_bifdet_struct_h);	*/
	APL_MALLOC_FAIL(l_dl_bifdet_struct_h);
	memset(l_dl_bifdet_struct_h,NULL,sizeof(DL_BIFDET_STRUCT_H));



		strcpy(l_dl_bifdet_struct_h->h_client,chr_p_dl_client);
		strcpy(l_dl_bifdet_struct_h->h_identiy_no,chr_p_dl_identiyno);
		strcpy(l_dl_bifdet_struct_h->h_access_stamp,chr_l_access_stamp);

		printf("\n AMIT: chr_p_dl_client=|%s| \n",chr_p_dl_client);
		printf("\n AMIT: chr_p_dl_identiyno=|%s| \n",chr_p_dl_identiyno);
		printf("\n AMIT: int_p_qty=|%lf| \n",int_p_qty);
		printf("\n AMIT: p_mod_qty1=|%lf| \n",p_mod_qty1);
		printf("\n AMIT: p_mod_qty2=|%lf| \n",p_mod_qty2);
		printf("\n AMIT: chr_p_bothdp_flg=|%c| \n",chr_p_bothdp_flg);
		printf("\n AMIT: chr_p_depo_loc1=|%s| \n",chr_p_depo_loc1);
		printf("\n AMIT: chr_p_depo_loc2=|%s| \n",chr_p_depo_loc2);
			printf("\n AMIT: MODE=|%s| \n",chr_mode);
		printf("\n AMIT: chr_l_access_stamp=|%s| \n",chr_l_access_stamp);

		

	  if( chr_p_bothdp_flg =='Y' && p_mod_qty1 > 0 && p_mod_qty2 > 0)
	  {

			printf("\n Amit:Before Inserting Bifurcation details twice \n");

		  l_dl_bifdet_struct_h->h_qty = p_mod_qty1;
		  strcpy(l_dl_bifdet_struct_h->h_dp_id,chr_p_depo_loc1);
		
		  printf("\n l_dl_bifdet_struct_h->h_client=|%s| \n",l_dl_bifdet_struct_h->h_client);
		  printf("\n l_dl_bifdet_struct_h->h_identiy_no=|%s| \n",l_dl_bifdet_struct_h->h_identiy_no);
		  printf("\n l_dl_bifdet_struct_h->h_qty=|%lf| \n",l_dl_bifdet_struct_h->h_qty);
		  printf("\n l_dl_bifdet_struct_h->h_dp_id=|%s| \n",l_dl_bifdet_struct_h->h_dp_id);
		  printf("\n l_dl_bifdet_struct_h->h_access_stamp=|%s| \n",l_dl_bifdet_struct_h->h_access_stamp);

			
			if ( !strcmp(chr_mode, APL_FUNC_INPUT ) )
			{

			  EXEC SQL INSERT INTO DL_BIFDET VALUES(:l_dl_bifdet_struct_h);
	
			  if(sqlca.sqlcode)
			  {
					printf("\n ERROR 1=|%d| \n",sqlca.sqlcode);
			  }
			  IS_ANY_ORA_ERROR;
			}
			if ( !strcmp(chr_mode, APL_FUNC_MODIFY ) )
			{

			  EXEC SQL UPDATE DL_BIFDET SET
				  QTY  = : l_dl_bifdet_struct_h->h_qty ,
				  ACCESS_STAMP = :l_dl_bifdet_struct_h->h_access_stamp
				  WHERE
				CLIENT = :l_dl_bifdet_struct_h->h_client
				AND	IDENTIY_NO = :l_dl_bifdet_struct_h->h_identiy_no
				AND DP_ID = :l_dl_bifdet_struct_h->h_dp_id;
			  if(sqlca.sqlcode)
			  {
					printf("\n ERROR 1=|%d| \n",sqlca.sqlcode);
			  }
			  IS_ANY_ORA_ERROR;
			}

		  l_dl_bifdet_struct_h->h_qty = p_mod_qty2;
		  strcpy(l_dl_bifdet_struct_h->h_dp_id,chr_p_depo_loc2);

		
  			if ( !strcmp(chr_mode, APL_FUNC_INPUT ) )
			{
				  EXEC SQL INSERT INTO DL_BIFDET VALUES(:l_dl_bifdet_struct_h);
				  if(sqlca.sqlcode)
				  {
						printf("\n ERROR 2=|%d| \n",sqlca.sqlcode);
				  }

				  IS_ANY_ORA_ERROR;
			}

		  	if ( !strcmp(chr_mode, APL_FUNC_MODIFY ) )
			{

			  EXEC SQL UPDATE DL_BIFDET SET
				  QTY  = : l_dl_bifdet_struct_h->h_qty ,
				  ACCESS_STAMP = :l_dl_bifdet_struct_h->h_access_stamp
				  WHERE
				CLIENT = :l_dl_bifdet_struct_h->h_client
				AND	IDENTIY_NO = :l_dl_bifdet_struct_h->h_identiy_no
				AND DP_ID = :l_dl_bifdet_struct_h->h_dp_id;
			  if(sqlca.sqlcode)
			  {
					printf("\n ERROR 1=|%d| \n",sqlca.sqlcode);
			  }
			  IS_ANY_ORA_ERROR;
			}

	  }
	  else if(p_mod_qty1 > 0)
	  {
		   printf("\n Amit:Before Inserting Bifurcation details for chr_p_depo_loc1=|%s| \n",chr_p_depo_loc1);

		  l_dl_bifdet_struct_h->h_qty = p_mod_qty1;
		  strcpy(l_dl_bifdet_struct_h->h_dp_id,chr_p_depo_loc1);

  	   	 if ( !strcmp(chr_mode, APL_FUNC_INPUT))
		 {

			  EXEC SQL INSERT INTO DL_BIFDET VALUES(:l_dl_bifdet_struct_h);
			  if(sqlca.sqlcode)
			  {
					printf("\n ERROR 3=|%d| \n",sqlca.sqlcode);
			  }

			  IS_ANY_ORA_ERROR;
		 }

	   	 if ( !strcmp(chr_mode, APL_FUNC_MODIFY ))
		 {

				  EXEC SQL UPDATE DL_BIFDET SET
				  QTY  = : l_dl_bifdet_struct_h->h_qty ,
				  ACCESS_STAMP = :l_dl_bifdet_struct_h->h_access_stamp
				  WHERE
					CLIENT = :l_dl_bifdet_struct_h->h_client
					AND	IDENTIY_NO = :l_dl_bifdet_struct_h->h_identiy_no
					AND DP_ID = :l_dl_bifdet_struct_h->h_dp_id;

			  if(sqlca.sqlcode)
			  {
					printf("\n ERROR 1=|%d| \n",sqlca.sqlcode);
			  }
			  IS_ANY_ORA_ERROR;
		}

	  }
	   else if(p_mod_qty2 > 0)
	   {
		  printf("\n Amit:Before Inserting Bifurcation details for chr_p_depo_loc2=|%s| \n",chr_p_depo_loc2);
		  l_dl_bifdet_struct_h->h_qty = p_mod_qty2;
		  strcpy(l_dl_bifdet_struct_h->h_dp_id,chr_p_depo_loc2);

			if ( !strcmp(chr_mode, APL_FUNC_INPUT ) )
			{

			  EXEC SQL INSERT INTO DL_BIFDET VALUES(:l_dl_bifdet_struct_h);
	
			  if(sqlca.sqlcode)
			  {
					printf("\n ERROR 1=|%d| \n",sqlca.sqlcode);
			  }
			  IS_ANY_ORA_ERROR;
			}
			if ( !strcmp(chr_mode, APL_FUNC_MODIFY ) )
			{

			  EXEC SQL UPDATE DL_BIFDET SET
				  QTY  = : l_dl_bifdet_struct_h->h_qty ,
				  ACCESS_STAMP = :l_dl_bifdet_struct_h->h_access_stamp
				  WHERE
				CLIENT = :l_dl_bifdet_struct_h->h_client
				AND	IDENTIY_NO = :l_dl_bifdet_struct_h->h_identiy_no
				AND DP_ID = :l_dl_bifdet_struct_h->h_dp_id;
			  if(sqlca.sqlcode)
			  {
					printf("\n ERROR 1=|%d| \n",sqlca.sqlcode);
			  }
			  IS_ANY_ORA_ERROR;
			}
	   }
	   else
	   {
			l_dl_bifdet_struct_h->h_qty = int_p_qty;

			if(!strcmp(chr_p_depo_loc1,APL_NULL_STRING))
			{
			  strcpy(l_dl_bifdet_struct_h->h_dp_id,chr_p_depo_loc1);
			}
			else if(!strcmp(chr_p_depo_loc1,APL_NULL_STRING))
			{
				strcpy(l_dl_bifdet_struct_h->h_dp_id,chr_p_depo_loc2);
			}

			printf("\n Amit:Before Inserting Bifurcation details in ELSE Part \n");
			printf("\n l_dl_bifdet_struct_h->h_qty=|%lf| \n",l_dl_bifdet_struct_h->h_qty);
			printf("\n l_dl_bifdet_struct_h->h_dp_id=|%s| \n",l_dl_bifdet_struct_h->h_dp_id);

			if ( !strcmp(chr_mode, APL_FUNC_INPUT ) )
			{

			  EXEC SQL INSERT INTO DL_BIFDET VALUES(:l_dl_bifdet_struct_h);
	
			  if(sqlca.sqlcode)
			  {
					printf("\n ERROR 1=|%d| \n",sqlca.sqlcode);
			  }
			  IS_ANY_ORA_ERROR;
			}
			if ( !strcmp(chr_mode, APL_FUNC_MODIFY ) )
			{

			  EXEC SQL UPDATE DL_BIFDET SET
				  QTY  = : l_dl_bifdet_struct_h->h_qty ,
				  ACCESS_STAMP = :l_dl_bifdet_struct_h->h_access_stamp
				  WHERE
				CLIENT = :l_dl_bifdet_struct_h->h_client
				AND	IDENTIY_NO = :l_dl_bifdet_struct_h->h_identiy_no
				AND DP_ID = :l_dl_bifdet_struct_h->h_dp_id;
			  if(sqlca.sqlcode)
			  {
					printf("\n ERROR 1=|%d| \n",sqlca.sqlcode);
			  }
			  IS_ANY_ORA_ERROR;
			}

		}



APL_GOBACK_SUCCESS

RETURN_SUCCESS :

APL_IF_DEBUG
	{
		CO_ProcMonitor(   APL_OUT_FILE,"Leaving Function DL_Mod_BifDet with success\n",NULL,NULL);
	}
	return(APL_SUCCESS);

RETURN_FAILURE :

APL_IF_DEBUG
	{
		CO_ProcMonitor(  APL_OUT_FILE,"Leaving Function DL_Mod_BifDet with errors\n",&p_intl_envdatastruct_h,l_debug_info_ptr);
	}
	return(APL_FAILURE);
}




int DL_Chk_Bifur_QTY( char *p_deal_client,
                        char *p_deal_ident,
						char *loc_cd,
						double *bifur_qty,
                        DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	char		chr_l_buf[BUFFER_LEN]						= APL_NULL_STRING;
	double l_bifur_qty = 0;
/*
	sprintf(chr_l_buf, "The RefNo is      : %s", p_deal_ident);
	CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, NULL);
	memset(chr_l_buf, NULL, BUFFER_LEN);
	sprintf(chr_l_buf, "Client is : %s", p_deal_client);
	CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, p_intl_envdatastruct_h);
	memset(chr_l_buf, NULL, BUFFER_LEN);
	sprintf(chr_l_buf, "Location is : %s", loc_cd);
	CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, p_intl_envdatastruct_h);
	memset(chr_l_buf, NULL, BUFFER_LEN);
 	sprintf(chr_l_buf, " bifur_qty : %lf", bifur_qty);
	CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, p_intl_envdatastruct_h);
	memset(chr_l_buf, NULL, BUFFER_LEN);
		
*/
	printf("\n client is **********|%s|\n",p_deal_client);
	printf("\n ref no is **********|%s|\n",p_deal_ident);
	printf("\n location code is **********|%s|\n",loc_cd);
	EXEC SQL SELECT QTY INTO :l_bifur_qty FROM DL_BIFDET
		WHERE CLIENT = :p_deal_client
		AND   IDENTIY_NO = :p_deal_ident
        AND   DP_ID = :loc_cd;

	IS_ANY_ORA_ERROR

	printf("\n BIFUR QTY IS |%lf|\n",l_bifur_qty);

	*bifur_qty = l_bifur_qty;

APL_GOBACK_SUCCESS

RETURN_SUCCESS:
    CO_ProcMonitor(APL_OUT_FILE, "Exiting Function DL_Chk_Bifur_QTY with success", NULL, NULL);
    return (APL_SUCCESS);

RETURN_FAILURE:
    CO_ProcMonitor(APL_OUT_FILE, "Exiting Function DL_Chk_Bifur_QTY with errors", NULL, NULL);
    return (APL_FAILURE);

}