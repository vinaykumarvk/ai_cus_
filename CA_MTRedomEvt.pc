

	
   
   
   
   
   
   
   
   
   
   
   


#include "CR_Common.h"
#include "CA_Common.h"
#define       L_INSTR_CODERR_PLUS_CERR_TYP_LEN        APL_INSTRUMENTCODE_LEN +        EVT_CLASS_
#define       LOCAL_LEN_EVNT_NBR 
#define       FUNC_AREA_LEN  6 
EXEC SQL INCLUDE SQLCA.H;


#define LOG_BUFFER_LEN 300


/* AIX - Warnings Start */
int CO_Pro_DateComp(char *p_from_date, char *p_to_date, int *int_p_diff,DEBUG_INFO_STRUCT_H **l_debug_info_ptr);
int CO_Chk_EMU_Period(char *p_dt, int *p_period_flg,DEBUG_INFO_STRUCT_H **l_debug_info_ptr);
/* AIX - Warnings End */

int   CA_Rtv_EventRec       ( CA_CAEVENT_STRUCT_H   *p_ca_caevent_struct_h_c,
                        		 CA_CAEVENT_STRUCT_H   *p_ca_caevent_struct_h_b,
                        		 CA_CAEVENT_STRUCT_I   *p_ca_caevent_struct_i_b,
                        		 char                *p_ora_rowid,
                        		 DEBUG_INFO_STRUCT_H       **l_debug_info_ptr
                        	  );

static   void  CA_IndVarSet  (  CA_CAEVENT_STRUCT_I    *p_ca_caevent_struct_i_a); 


 static int   CA_MandDataChk (  CA_CAEVENT_STRUCT_H    *p_ca_caevent_struct_h_c,
                               INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
                               DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
                            );


static	int 	CA_Mod_RedonmNew     (   CA_CAEVENT_STRUCT_H    *p_ca_caevent_struct_h_c,
				                   INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
	      				          DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
                 				);

static	int 	CA_Mod_RedonmChg_B    (   CA_CAEVENT_STRUCT_H    *p_ca_caevent_struct_h_c,
				                   INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
	      				          DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
									);

static	int 	CA_Mod_RedonmChg_A    (   CA_CAEVENT_STRUCT_H    *p_ca_caevent_struct_h_c,
				         	       INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
  	      				   	    DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
                  			);

static	int 	CA_Mod_RedonmDel    (   CA_CAEVENT_STRUCT_H    *p_ca_caevent_struct_h_c,
				         	       INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
  	      				   	    DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
									);

static   int   CA_Mod_RedonmReset     (   CA_CAEVENT_STRUCT_H    *p_ca_caevent_struct_h_c,
                               INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
                               DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
                           );

static	int 	CA_Mod_RedonmAuth      (   CA_CAEVENT_STRUCT_H    *p_ca_caevent_struct_h_c,
				         	       INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
  	      				   	    DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
									);





int CA_Proc_RedenominationEventMnt( CA_CAEVENT_STRUCT_H    *p_ca_caevent_struct_h_c,
                     INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
                     DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
                     )
{
	struct sqlca sqlca;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE,"Entered A_RedenomEvtMntFn",NULL,p_intlenv_data_struct_h);
		}
										

	if (	(	!strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_INPUT)	)	)
		{
			if (	CA_Mod_RedonmNew(	p_ca_caevent_struct_h_c,
								p_intlenv_data_struct_h,
								l_debug_info_ptr
							) == APL_FAILURE
				)
				{
					APL_GOBACK_FAIL
				}
			else
				{
					APL_GOBACK_SUCCESS
				}
		}

	

	else if ((!strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_MODIFY)) ||
				(!strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_DELETE)) ||
				(!strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_RESET))||
				(!strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_REVERSE))||
				(!strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_AUTHORISE))
			  )
		{
			if (	CA_Mod_RedonmChg_B(	p_ca_caevent_struct_h_c,
									p_intlenv_data_struct_h,
									l_debug_info_ptr
								) == APL_FAILURE)
				{
					APL_GOBACK_FAIL
				}
			else
				{
					APL_GOBACK_SUCCESS
				}
		}
    
    else  
      {
            CO_InsertErr(l_debug_info_ptr,
                           ERR_INVALID_MODE,
                           p_intlenv_data_struct_h->h_mode,
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           __LINE__,
                           __FILE__
                           );
            APL_GOBACK_FAIL
      }

	
		
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS	:
		{
			APL_IF_DEBUG
			{
				CO_ProcMonitor(APL_OUT_FILE,"Exiting A_RedenomMntEvt successfully",NULL,p_intlenv_data_struct_h);
			}	
			return (APL_SUCCESS);
		}
	RETURN_FAILURE	:
		{
			APL_IF_DEBUG
			{
				CO_ProcMonitor(APL_OUT_FILE,"Exiting A_RedenomMntEvt unsuccessfully",NULL,p_intlenv_data_struct_h);
			}	
			return (APL_FAILURE);
		}


}



static	int CA_Mod_RedonmNew(	CA_CAEVENT_STRUCT_H 	*p_ca_caevent_struct_h_c,
   							INTL_ENV_DATA_STRUCT_H	*p_intlenv_data_struct_h,
	   			   		DEBUG_INFO_STRUCT_H 			**l_debug_info_ptr
									)
{
   
   
   int CO_RtvSysDt(char *p_dt, DEBUG_INFO_STRUCT_H **l_debug_info_ptr);


	

	struct	               sqlca	sqlca;
	CA_CAEVENT_STRUCT_I       *l_ca_caeventimg_struct_i         =   NULL;
	char		               pro_sys_date[APL_DATE_LEN]  =   APL_NULL_STRING;
	char                   *int_pos                     =   NULL;
   char                    chr_log_buff[LOG_BUFFER_LEN]=   APL_NULL_STRING; 


	char             chr_error_key[L_INSTR_CODERR_PLUS_CERR_TYP_LEN] = APL_NULL_STRING;
   char             chr_char_event_nbr[LOCAL_LEN_EVNT_NBR] = APL_NULL_STRING;
	int              int_period_flg = 0;
	int              int_l_diff = 0;
   int              int_h_counter=0;
	short            i_counter=0;
   char             h_typeofinstr[APL_INSTRU_TYPE_LEN] = APL_NULL_STRING;
   char             h_ca_currency[APL_CCYCODE_LEN] = APL_NULL_STRING;
   

	#ifdef APL_THREADS
	APL_SET_CONTEXT
	EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entering S_ReDenomEvtInput",NULL,p_intlenv_data_struct_h);
	}	

	
	if (CO_RtvSysDtTime(pro_sys_date,l_debug_info_ptr) == APL_FAILURE )
   {
     APL_GOBACK_FAIL
   }

	
	if( CA_GenCARefNo ( p_ca_caevent_struct_h_c->h_corp_id ,p_ca_caevent_struct_h_c->h_instr_code,p_ca_caevent_struct_h_c->h_evt_class,pro_sys_date,&p_ca_caevent_struct_h_c->h_evt_nbr,l_debug_info_ptr ) != APL_SUCCESS)
                    {
            CO_InsertErr(l_debug_info_ptr,
                           ERR_CANTGEN_CA_REFNO,
                           p_intlenv_data_struct_h->h_mode,
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           __LINE__,
                           __FILE__
                           );
                       APL_GOBACK_FAIL
                    }



	
	if	 (	CA_MandDataChk(	p_ca_caevent_struct_h_c,
								p_intlenv_data_struct_h,
								l_debug_info_ptr
								) == APL_FAILURE
		 )
			{
				APL_GOBACK_FAIL
			}

	
	(l_ca_caeventimg_struct_i) = (CA_CAEVENT_STRUCT_I * ) calloc ( 1, sizeof(CA_CAEVENT_STRUCT_I ) );
	APL_MALLOC_FAIL(l_ca_caeventimg_struct_i);

	strcpy(p_ca_caevent_struct_h_c->h_access_stamp,pro_sys_date);
	strcpy(pro_sys_date,strtok_r(pro_sys_date," ",&int_pos));
	strcat(pro_sys_date,APL_NULL_TIME);

	
	if ( CA_ChkInstr(p_ca_caevent_struct_h_c->h_instr_code,
							  APL_NULL_STRING,
								"N",
								l_debug_info_ptr
							 ) == APL_FAILURE
		)
	{
		if ( CO_ChkErr(*l_debug_info_ptr) == APL_FAILURE )
		{
			APL_GOBACK_FAIL
		}
	}		


  

	EXEC SQL SELECT  INSTR_TYPE,currency_cd
				INTO   :h_typeofinstr,:h_ca_currency
		   FROM MT_INSTRUMENT
				WHERE instr_code=:p_ca_caevent_struct_h_c->h_instr_code;

	IS_ANY_ORA_ERROR

  EXEC SQL SELECT NVL (count(*),0)
		INTO :int_h_counter:i_counter 
		FROM CASECEVENT
		WHERE INSTR_TYPE=:h_typeofinstr AND CA_EVENT=:p_ca_caevent_struct_h_c->h_evt_class; 

	IS_ANY_ORA_ERROR

  if (int_h_counter == 0)
       {
					  CO_InsertErr(l_debug_info_ptr,
									     ERR_INVALID_EVNTINSTR_COMB, 
									     APL_NULL_STRING,
                                APL_NULL_STRING,
                                APL_NULL_STRING,
                                __LINE__,
                                __FILE__
                                );
         APL_GOBACK_FAIL
		 sprintf(chr_log_buff,"Invalid event type %s for type of instrument %s",p_ca_caevent_struct_h_c->h_evt_class,h_typeofinstr);
		 CO_ProcMonitor(APL_OUT_FILE,chr_log_buff,NULL,p_intlenv_data_struct_h);
		 APL_GOBACK_FAIL
		 } 	



   
	
	

   if ( CO_Chk_EMU_Period(pro_sys_date,&int_period_flg,l_debug_info_ptr) == APL_FAILURE )
	{
		APL_GOBACK_FAIL
	}
	
	if( (int_period_flg == 2) || (int_period_flg == 3) )
	{	
  		if ( CO_Pro_DateComp( p_ca_caevent_struct_h_c->h_decl_date , p_ca_caevent_struct_h_c->h_rec_date , &int_l_diff , l_debug_info_ptr) == APL_FAILURE )	 
		{
			APL_GOBACK_FAIL
		}
		
		if ( int_l_diff < 0 )
		{
					  CO_InsertErr(l_debug_info_ptr,
                                ERR_RECDT_CANT_BEFORE_DECLDT,
									     APL_NULL_STRING,
                                APL_NULL_STRING,
                                APL_NULL_STRING,
                                __LINE__,
                                __FILE__
                                );
         APL_GOBACK_FAIL
		}
		
		int_l_diff=0;

  		if ( CO_Pro_DateComp( p_ca_caevent_struct_h_c->h_rec_date , p_ca_caevent_struct_h_c->h_pymt_dt , &int_l_diff , l_debug_info_ptr) == APL_FAILURE )	 
		{
			APL_GOBACK_FAIL
		}
		
		if ( int_l_diff < 0 )
		{
					  CO_InsertErr(l_debug_info_ptr,
			                       ERR_PAYDT_CANT_BEFORE_RECORDDT,
                                APL_NULL_STRING,
                                APL_NULL_STRING,
                                APL_NULL_STRING,
                                __LINE__,
                                __FILE__
                                );
         APL_GOBACK_FAIL
		}
	}




   
			

	if ( CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS )
	{ 
		APL_GOBACK_FAIL
	}

	
	strcpy(p_ca_caevent_struct_h_c->h_maker,p_intlenv_data_struct_h->usr);
	strcpy(p_ca_caevent_struct_h_c->h_maker_dt,pro_sys_date);



	
	strcpy(p_ca_caevent_struct_h_c->h_stat_date,pro_sys_date);
	
	
	strcpy(p_ca_caevent_struct_h_c->h_evt_stat,APL_STATUS_UNAUTH);


   



  p_ca_caevent_struct_h_c->h_amount_due=0;
  p_ca_caevent_struct_h_c->h_amount_recd=0;
  p_ca_caevent_struct_h_c->h_quantity_due=0;
  p_ca_caevent_struct_h_c->h_quantity_recd=0;
  p_ca_caevent_struct_h_c->h_evt_msg_count=0;
  p_ca_caevent_struct_h_c->h_entl_msg_cnt=0;
  p_ca_caevent_struct_h_c->h_evt_clt_cnt=0;
  p_ca_caevent_struct_h_c->h_entl_clt_cnt=0;
  p_ca_caevent_struct_h_c->h_count_acs_pend=0;
  p_ca_caevent_struct_h_c->h_f_pr=0;

  strcpy(p_ca_caevent_struct_h_c->h_ca_currency,h_ca_currency);




   if(!strlen(p_ca_caevent_struct_h_c->h_proc_oth))
		l_ca_caeventimg_struct_i->i_proc_oth  =  -1;
 	
	CA_IndVarSet(l_ca_caeventimg_struct_i);

   
   
        strcpy(chr_error_key,APL_NULL_STRING);
        strcpy(chr_error_key,p_ca_caevent_struct_h_c->h_instr_code);
        strcat(chr_error_key," ");
        strcat(chr_error_key,p_ca_caevent_struct_h_c->h_evt_class);
        strcpy(chr_char_event_nbr,APL_NULL_STRING);
        strcpy(chr_char_event_nbr,ltoa(p_ca_caevent_struct_h_c->h_evt_nbr)  );
   
			printf("\n Event Footnote is |%s| \n",p_ca_caevent_struct_h_c->h_info_nbr);
         /******** Changes related to 568 Entitlement Generation done by AmitN ********/
			IF_COND_EXISTS("CA_ENTITL","568_GENERATION")
			{
				if(strlen(p_ca_caevent_struct_h_c->h_info_nbr) > 0 && strcmp(p_ca_caevent_struct_h_c->h_evt_class,EVT_MEETING)!=0)
				{
					strcpy(p_ca_caevent_struct_h_c->h_entinfo_no,p_ca_caevent_struct_h_c->h_info_nbr);
					l_ca_caeventimg_struct_i->i_entinfo_no = 0;
				}
			}
			/****************************************************************************/
	

	EXEC SQL INSERT INTO CAEVENT VALUES(:p_ca_caevent_struct_h_c:l_ca_caeventimg_struct_i);

   IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_DUPLICATE_EVENT,
                                     chr_error_key,
                                     p_ca_caevent_struct_h_c->h_decl_date,
                                     chr_char_event_nbr)
   
   APL_IF_DEBUG
            {
                CO_ProcMonitor(APL_OUT_FILE,"Record created successfuly",NULL,p_intlenv_data_struct_h);
            }

	
		
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS	:
		{
			APL_FREE(l_ca_caeventimg_struct_i);
			APL_IF_DEBUG
			{	
				CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_Mod_RedonmNew successfully",NULL,p_intlenv_data_struct_h);
			}	
			return (APL_SUCCESS);
		}
	RETURN_FAILURE	:
		{
			APL_FREE(l_ca_caeventimg_struct_i);
			APL_IF_DEBUG
			{
				CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_Mod_RedonmNew unsuccessfully",NULL,p_intlenv_data_struct_h);
			}	
			return (APL_FAILURE);
		}
}







static   int   CA_MandDataChk(
                                CA_CAEVENT_STRUCT_H    *p_ca_caevent_struct_h_a,
                                INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
                                DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
                              )
{
   struct sqlca sqlca;

   #ifdef APL_THREADS
   APL_SET_CONTEXT
   EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

	
	
   
	  	   
  			
	if(   !strlen(p_ca_caevent_struct_h_a->h_evt_class) )
         		APL_DATA_MISSING("Instrurity ",APL_NULL_STRING,APL_NULL_STRING)

   if(   !strlen(p_ca_caevent_struct_h_a->h_decl_date) )
         		APL_DATA_MISSING("Declaration date",APL_NULL_STRING,APL_NULL_STRING)

   if(   p_ca_caevent_struct_h_a->h_evt_nbr == 0 )
         		APL_DATA_MISSING("Event Number",APL_NULL_STRING,APL_NULL_STRING)

   if(   !strlen(p_ca_caevent_struct_h_a->h_preliminary_flag) )
         		APL_DATA_MISSING("Prelim Indicator",APL_NULL_STRING,APL_NULL_STRING)
     

   if(   !strlen(p_ca_caevent_struct_h_a->h_rec_date) )
         		APL_DATA_MISSING("Record Date",APL_NULL_STRING,APL_NULL_STRING)


   if(   !strlen(p_ca_caevent_struct_h_a->h_pymt_dt) )
         		APL_DATA_MISSING("Pay Date",APL_NULL_STRING,APL_NULL_STRING)

 
	if (  !strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_MODIFY) )
      	{
				if(   !strlen(p_ca_caevent_struct_h_a->h_corp_id)   )
      		   	APL_DATA_MISSING("Corporate Action ID",APL_NULL_STRING,APL_NULL_STRING)
         	
				if(   !strlen(p_ca_caevent_struct_h_a->h_access_stamp)  )
            	   APL_DATA_MISSING("Access Stamp",APL_NULL_STRING,APL_NULL_STRING)
			}

 
	if (   CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS )
         		APL_GOBACK_FAIL
		


      APL_GOBACK_SUCCESS
      RETURN_SUCCESS  :

      {
         APL_IF_DEBUG
         {
            CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_MandDataChk successfully",NULL,p_intlenv_data_struct_h);
         }
         return (APL_SUCCESS);
      }
      RETURN_FAILURE  :
      {
         APL_IF_DEBUG
         {
            CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_MandDataChk unsuccessfully",NULL,p_intlenv_data_struct_h);
         }
         return (APL_FAILURE);
      }
}




static   void  CA_IndVarSet(
                              CA_CAEVENT_STRUCT_I    *p_ca_caevent_struct_i_a
                           )

{
   struct sqlca sqlca;

	p_ca_caevent_struct_i_a->i_ex_date						=	-1;
	p_ca_caevent_struct_i_a->i_respons_date				=	-1;
	p_ca_caevent_struct_i_a->i_expire_date					=	-1;
	p_ca_caevent_struct_i_a->i_pp_date						=	-1;
	p_ca_caevent_struct_i_a->i_proxy_date					=	-1;
	p_ca_caevent_struct_i_a->i_meet_date					=	-1;
	p_ca_caevent_struct_i_a->i_start_date					=	-1;
	p_ca_caevent_struct_i_a->i_effect_date					=	-1;
	p_ca_caevent_struct_i_a->i_op_evt_class			=	-1;
	p_ca_caevent_struct_i_a->i_respons_date_openend		=	-1;
	p_ca_caevent_struct_i_a->i_expire_date_openend		=	-1;
	p_ca_caevent_struct_i_a->i_res_instr_code				=	-1;
	p_ca_caevent_struct_i_a->i_rights_class				=	-1;
	p_ca_caevent_struct_i_a->i_contactinfo					=	-1;
	p_ca_caevent_struct_i_a->i_nrepdate1					=	-1;
	p_ca_caevent_struct_i_a->i_follmsg1date				=	-1;
	p_ca_caevent_struct_i_a->i_follmsg2date				=	-1;
	p_ca_caevent_struct_i_a->i_info_nbr					=	-1;
	p_ca_caevent_struct_i_a->i_entinfo_no				=	-1;
	p_ca_caevent_struct_i_a->i_checker					=	-1;
	p_ca_caevent_struct_i_a->i_checker_dt				=	-1;
	
	p_ca_caevent_struct_i_a->i_dealfrom_dt				=  -1;
	p_ca_caevent_struct_i_a->i_dealto_dt            =  -1;
   p_ca_caevent_struct_i_a->i_subs_date				   =  -1;
   p_ca_caevent_struct_i_a->i_posting_date				=  -1;
   p_ca_caevent_struct_i_a->i_over_subscrp					=  -1;
   p_ca_caevent_struct_i_a->i_div_class					=  -1;		
	
}






static	int CA_Mod_RedonmChg_B (	CA_CAEVENT_STRUCT_H 	*p_ca_caevent_struct_h_c,
   							INTL_ENV_DATA_STRUCT_H	*p_intlenv_data_struct_h,
	   			   		DEBUG_INFO_STRUCT_H 			**l_debug_info_ptr
									)
{



	 if (	!strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_MODIFY)	) 
		{
			if (	CA_Mod_RedonmChg_A(	p_ca_caevent_struct_h_c,
									p_intlenv_data_struct_h,
									l_debug_info_ptr
								) == APL_FAILURE)
				{
					APL_GOBACK_FAIL
				}
			else
				{
					APL_GOBACK_SUCCESS
				}
		}
   
	
    else if  (!strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_DELETE))
		{
			if (	CA_Mod_RedonmDel(	p_ca_caevent_struct_h_c,
									p_intlenv_data_struct_h,
									l_debug_info_ptr
								) == APL_FAILURE)
				{
					APL_GOBACK_FAIL
				}
			else
				{
					APL_GOBACK_SUCCESS
				}
		}
   
	
    else if  (!strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_RESET))
		{
			if (	CA_Mod_RedonmReset(	p_ca_caevent_struct_h_c,
									p_intlenv_data_struct_h,
									l_debug_info_ptr
								) == APL_FAILURE)
				{
					APL_GOBACK_FAIL
				}
			else
				{
					APL_GOBACK_SUCCESS
				}
		}

	
    else if  (!strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_REVERSE))
		{
			if (	CA_Mod_RedonmReverse(	p_ca_caevent_struct_h_c,
									p_intlenv_data_struct_h,
									l_debug_info_ptr
								) == APL_FAILURE)
				{
					APL_GOBACK_FAIL
				}
			else
				{
					APL_GOBACK_SUCCESS
				}
		}
  
	
    else if  (!strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_AUTHORISE))
		{
			if (	CA_Mod_RedonmAuth(	p_ca_caevent_struct_h_c,
									p_intlenv_data_struct_h,
									l_debug_info_ptr
								) == APL_FAILURE)
				{
					APL_GOBACK_FAIL
				}
			else
				{
					APL_GOBACK_SUCCESS
				}
		}


         APL_GOBACK_SUCCESS
         RETURN_SUCCESS  :

      {

         APL_IF_DEBUG
         {
            CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_Mod_RedonmChg_B successfully",NULL,p_intlenv_data_struct_h);
         }
         return (APL_SUCCESS);
      }
      RETURN_FAILURE  :
      {

         APL_IF_DEBUG
         {
            CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_Mod_RedonmChg_B unsuccessfully",NULL,p_intlenv_data_struct_h);
         }
         return (APL_FAILURE);
      }

}










static   int   CA_Mod_RedonmChg_A( CA_CAEVENT_STRUCT_H    *p_ca_caevent_struct_h_c,
                              INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
                              DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
                       )
{
   struct   sqlca sqlca;
   CA_CAEVENT_STRUCT_I    *l_ca_caeventimg_struct_i         =  NULL;
   CA_CASECEVENT_STRUCT_H   *l_ca_casetup_struct_h        =  NULL;

   CA_CASECEVENT_STRUCT_I   *l_ca_casecevent_struct_i        =  NULL;

   CA_CAEVENT_STRUCT_H    *l_ca_caeventimg_struct_h     =  NULL;
   CA_CAEVENT_STRUCT_I    *l_ca_caevent_struct_i     =  NULL;
   char                 rowid[APL_ROWID_LEN]    = APL_NULL_STRING;
   char                 pro_sys_date[APL_DATE_LEN]  = APL_NULL_STRING;
	int              int_period_flg = 0;
	int              int_l_diff = 0;

   char     chr_op_ind[APL_FLAG_LENGTH] = {APL_NO_IND};
   
   #ifdef APL_THREADS
   APL_SET_CONTEXT
   EXEC SQL CONTEXT USE :my_ctx_local;
   #endif
 
APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Entering S_EventModify",NULL,p_intlenv_data_struct_h);
   }
 

  
 
  if  ( CA_MandDataChk( p_ca_caevent_struct_h_c,
                        p_intlenv_data_struct_h,
                        l_debug_info_ptr
                      ) == APL_FAILURE
       )
            APL_GOBACK_FAIL


   
         (l_ca_caeventimg_struct_h) = (CA_CAEVENT_STRUCT_H*)calloc(1,
                              sizeof(CA_CAEVENT_STRUCT_H));
         APL_MALLOC_FAIL(l_ca_caeventimg_struct_h)

         (l_ca_caevent_struct_i) = (CA_CAEVENT_STRUCT_I*)calloc(1,
                              sizeof(CA_CAEVENT_STRUCT_I));
         APL_MALLOC_FAIL(l_ca_caevent_struct_i)

   

         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_corp_id is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_instr_code is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_res_instr_code is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_contactinfo is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_info_nbr is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_entinfo_no is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_maker is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_checker is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_proc_oth is string;

    

         
	  

		if ( CA_Rtv_EventRec( p_ca_caevent_struct_h_c , 
									  l_ca_caeventimg_struct_h,
									  l_ca_caevent_struct_i,
									  rowid,
									  l_debug_info_ptr
									 ) == APL_FAILURE
			)
		{
			APL_GOBACK_FAIL
		}




      
      if (
            strcmp(  p_ca_caevent_struct_h_c->h_access_stamp,
                     l_ca_caeventimg_struct_h->h_access_stamp
                  )
         )
         {
            CO_InsertErr(l_debug_info_ptr,
                           ERR_ACCESSSTAMP_CHGD,
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           __LINE__,
                           __FILE__
                           );
            APL_GOBACK_FAIL
         }



      if (  CA_ChkInstr(p_ca_caevent_struct_h_c->h_instr_code,
                        APL_NULL_STRING,
                        chr_op_ind,
                        l_debug_info_ptr
                        )  ==    APL_FAILURE
         )
            APL_GOBACK_FAIL



         

         if (  (  strcmp(l_ca_caeventimg_struct_h->h_evt_stat,STATUS_RDY_INT)) &&
               (  strcmp(l_ca_caeventimg_struct_h->h_evt_stat,STATUS_CHNG_RDY_INT  )) &&
               (  strcmp(l_ca_caeventimg_struct_h->h_evt_stat,APL_STATUS_UNAUTH    ))  
            )
            {
               CO_InsertErr(l_debug_info_ptr,
                              ERR_EVNT_STS_INVALIDCHG,
                              l_ca_caeventimg_struct_h->h_evt_stat,
                              APL_NULL_STRING,
                              APL_NULL_STRING,
                              __LINE__,
                              __FILE__
                              );
               APL_GOBACK_FAIL
            }



      

      if (  CO_RtvSysDt(pro_sys_date,l_debug_info_ptr) == APL_FAILURE )
         {
            APL_GOBACK_FAIL
         }

   
	
	

   if ( CO_Chk_EMU_Period(pro_sys_date,&int_period_flg,l_debug_info_ptr) == APL_FAILURE )
	{
		APL_GOBACK_FAIL
	}
	
	if( (int_period_flg == 2) || (int_period_flg == 3) )
	{	
  		if ( CO_Pro_DateComp( p_ca_caevent_struct_h_c->h_decl_date , p_ca_caevent_struct_h_c->h_rec_date , &int_l_diff , l_debug_info_ptr) == APL_FAILURE )	 
		{
			APL_GOBACK_FAIL
		}
		
		if ( int_l_diff < 0 )
		{
					  CO_InsertErr(l_debug_info_ptr,
                                ERR_RECDT_CANT_BEFORE_DECLDT,
                                APL_NULL_STRING,
                                APL_NULL_STRING,
                                APL_NULL_STRING,
                                __LINE__,
                                __FILE__
                                );
			CO_ProcMonitor(APL_OUT_FILE,"Error ... Decl. Date > Rec. Date",NULL,p_intlenv_data_struct_h);
         APL_GOBACK_FAIL
		}
		
		int_l_diff=0;

  		if ( CO_Pro_DateComp( p_ca_caevent_struct_h_c->h_rec_date , p_ca_caevent_struct_h_c->h_pymt_dt , &int_l_diff , l_debug_info_ptr) == APL_FAILURE )	 
		{
			APL_GOBACK_FAIL
		}
		
		if ( int_l_diff < 0 )
		{
					  CO_InsertErr(l_debug_info_ptr,
			                       ERR_PAYDT_CANT_BEFORE_RECORDDT,
                                APL_NULL_STRING,
                                APL_NULL_STRING,
                                APL_NULL_STRING,
                                __LINE__,
                                __FILE__
                                );
			CO_ProcMonitor(APL_OUT_FILE,"Error ... Rec. Date > Pay. Date",NULL,p_intlenv_data_struct_h);
         APL_GOBACK_FAIL
		}
	}




   
			

	if ( CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS )
	{ 
		APL_GOBACK_FAIL
	}

      
		if (  !strcmp(l_ca_caeventimg_struct_h->h_evt_stat,STATUS_RDY_INT)) 
      {
         strcpy(p_ca_caevent_struct_h_c->h_stat_date,pro_sys_date);
         strcpy(p_ca_caevent_struct_h_c->h_evt_stat,STATUS_CHNG_RDY_INT);
      }
      else
      {
         strcpy(p_ca_caevent_struct_h_c->h_stat_date,pro_sys_date);
         strcpy(p_ca_caevent_struct_h_c->h_evt_stat,l_ca_caeventimg_struct_h->h_evt_stat);
      }
      strcpy(p_ca_caevent_struct_h_c->h_maker,p_intlenv_data_struct_h->usr);
      strcpy(p_ca_caevent_struct_h_c->h_maker_dt,pro_sys_date);
      strcpy(p_ca_caevent_struct_h_c->h_checker,APL_NULL_STRING);
      strcpy(p_ca_caevent_struct_h_c->h_checker_dt,APL_NULL_STRING);

      if (  CO_RtvSysDtTime(pro_sys_date,l_debug_info_ptr) == APL_FAILURE )
      {
         APL_GOBACK_FAIL
      }
      strcpy(p_ca_caevent_struct_h_c->h_access_stamp,pro_sys_date);


      
      

      (l_ca_caeventimg_struct_i) = (CA_CAEVENT_STRUCT_I*)calloc(1,
                              sizeof(CA_CAEVENT_STRUCT_I));
         APL_MALLOC_FAIL(l_ca_caeventimg_struct_i)

      


         CA_IndVarSet(  l_ca_caeventimg_struct_i );

      

      if    (  CA_Mod_EventRec( p_ca_caevent_struct_h_c,
                                 l_ca_caeventimg_struct_i,
                                 rowid,
                                 l_debug_info_ptr
                              ) == APL_FAILURE
            )
               APL_GOBACK_FAIL

   
         APL_GOBACK_SUCCESS
         RETURN_SUCCESS  :

      {
         APL_FREE(l_ca_caeventimg_struct_i);
         APL_FREE(l_ca_casetup_struct_h);
         APL_FREE(l_ca_casecevent_struct_i);
         APL_FREE(l_ca_caeventimg_struct_h);
         APL_FREE(l_ca_caevent_struct_i);

         APL_IF_DEBUG
         {
            CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_Mod_RedonmChg_A successfully",NULL,p_intlenv_data_struct_h);
         }
         return (APL_SUCCESS);
      }
      RETURN_FAILURE  :
      {
         APL_FREE(l_ca_caeventimg_struct_i);
         APL_FREE(l_ca_casetup_struct_h);
         APL_FREE(l_ca_casecevent_struct_i);
         APL_FREE(l_ca_caeventimg_struct_h);
         APL_FREE(l_ca_caevent_struct_i);

         APL_IF_DEBUG
         {
            CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_Mod_RedonmChg_A unsuccessfully",NULL,p_intlenv_data_struct_h);
         }
         return (APL_FAILURE);
      }
}







static   int   CA_Mod_RedonmDel(  CA_CAEVENT_STRUCT_H    *p_ca_caevent_struct_h_c,
                                 INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
                                 DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
                              )
{
   struct   sqlca sqlca;
   CA_CAEVENT_STRUCT_H    *l_ca_caeventimg_struct_h     =  NULL;
   CA_CAEVENT_STRUCT_I    *l_ca_caevent_struct_i  =  NULL;
   char              rowid[APL_ROWID_LEN] = APL_NULL_STRING;
   char     pro_sys_date[APL_DATE_LEN] = APL_NULL_STRING;
   char     chr_h_rtv_access_stamp[APL_DATE_LEN] = APL_NULL_STRING;
   short    i_rtv_access_stamp = 0;
   char     h_instr_code[APL_INSTRUMENTCODE_LEN] = APL_NULL_STRING;
   short    i_instr_code = 0;
   char     h_res_instr_code[APL_INSTRUMENTCODE_LEN] = APL_NULL_STRING;
   short    i_res_instr_code = 0;
   char     h_evt_stat[APL_STATUS_LEN] = APL_NULL_STRING;
   short    i_evt_stat = 0;
   char     h_maker[APL_USERID_LEN] = APL_NULL_STRING;
   short    i_maker =0;
   char     chr_op_ind[APL_FLAG_LENGTH] = {APL_NO_IND};


   #ifdef APL_THREADS
   APL_SET_CONTEXT
   EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Entered CA_Mod_RedonmDel function",NULL,p_intlenv_data_struct_h);
   }

   

         if(   !strlen(p_ca_caevent_struct_h_c->h_access_stamp) )
            {
               APL_DATA_MISSING("Access Stamp",APL_NULL_STRING,APL_NULL_STRING)
            }

         if(   !strlen(p_ca_caevent_struct_h_c->h_corp_id)  )
            {
               APL_DATA_MISSING("Corporate Action ID",APL_NULL_STRING,APL_NULL_STRING)
            }


   if (   CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS )
         APL_GOBACK_FAIL


         
         (l_ca_caeventimg_struct_h) = (CA_CAEVENT_STRUCT_H*)calloc(1,
                              sizeof(CA_CAEVENT_STRUCT_H));
         APL_MALLOC_FAIL(l_ca_caeventimg_struct_h)

         (l_ca_caevent_struct_i) = (CA_CAEVENT_STRUCT_I*)calloc(1,
                              sizeof(CA_CAEVENT_STRUCT_I));
         APL_MALLOC_FAIL(l_ca_caevent_struct_i)

         

         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_corp_id is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_instr_code is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_res_instr_code is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_contactinfo is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_info_nbr is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_entinfo_no is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_maker is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_checker is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_proc_oth is string;

         

         
		if ( CA_Rtv_EventRec( p_ca_caevent_struct_h_c , 
									  l_ca_caeventimg_struct_h,
									  l_ca_caevent_struct_i,
									  rowid,
									  l_debug_info_ptr
									 ) == APL_FAILURE
			)
		{
			APL_GOBACK_FAIL
		}


      
      if (
            strcmp(  p_ca_caevent_struct_h_c->h_access_stamp,
                     l_ca_caeventimg_struct_h->h_access_stamp
                  )
         )
         {
            CO_InsertErr(l_debug_info_ptr,
                           ERR_ACCESSSTAMP_CHGD,
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           __LINE__,
                           __FILE__
                           );
            APL_GOBACK_FAIL
         }

      
      
      

      if (  (strcmp(l_ca_caeventimg_struct_h->h_evt_stat,STATUS_RDY_INT))   &&
            (strcmp(l_ca_caeventimg_struct_h->h_evt_stat,APL_STATUS_UNAUTH))
         )
         {
            CO_InsertErr(l_debug_info_ptr,
                           ERR_EVNT_STS_INVALIDDEL,
                           l_ca_caeventimg_struct_h->h_evt_stat,
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           __LINE__,
                           __FILE__
                           );
            APL_GOBACK_FAIL
         }


      


      if (  CA_ChkInstr(p_ca_caevent_struct_h_c->h_instr_code,
                        APL_NULL_STRING,
                        chr_op_ind,
                        l_debug_info_ptr
                        )  ==    APL_FAILURE
         )
            APL_GOBACK_FAIL


   

      if (  CO_RtvSysDt(pro_sys_date,l_debug_info_ptr) == APL_FAILURE )
         {
            APL_GOBACK_FAIL
         }

   

      if (  !strcmp(l_ca_caeventimg_struct_h->h_evt_stat,APL_STATUS_UNAUTH) )
         {
            
            
            
            
            EXEC SQL DELETE CANOTIFY
            WHERE corp_id = :p_ca_caevent_struct_h_c->h_corp_id;

            IS_ANY_ORA_ERROR

            
            EXEC SQL DELETE CAEVENT
           WHERE
            ROWID=:rowid;

            IS_ANY_ORA_ERROR

            APL_GOBACK_SUCCESS
         }
      else
         {
         strcpy(p_ca_caevent_struct_h_c->h_evt_stat,STATUS_DEL_UNAUTH);
         strcpy(p_ca_caevent_struct_h_c->h_stat_date,pro_sys_date);
         strcpy(p_ca_caevent_struct_h_c->h_maker,p_intlenv_data_struct_h->usr);
         strcpy(p_ca_caevent_struct_h_c->h_maker_dt,pro_sys_date);

      	
      	if (  CO_RtvSysDtTime(pro_sys_date,l_debug_info_ptr) == APL_FAILURE )
      		{
        		 APL_GOBACK_FAIL
      		}
         strcpy(p_ca_caevent_struct_h_c->h_access_stamp,pro_sys_date);

      	EXEC SQL UPDATE CAEVENT
         	SET
            	MAKER=:p_ca_caevent_struct_h_c->h_maker,
            	MAKER_DT=:p_ca_caevent_struct_h_c->h_maker_dt,
            	CHECKER=NULL,
            	CHECKER_DT=NULL,
            	STATUS=:p_ca_caevent_struct_h_c->h_evt_stat,
            	PROCESSED_DATE=:p_ca_caevent_struct_h_c->h_stat_date,
            	ACCESS_STAMP=:p_ca_caevent_struct_h_c->h_access_stamp
      	WHERE
            	ROWID=:rowid;

      	IS_ANY_ORA_ERROR;
			}

      
     APL_GOBACK_SUCCESS
      RETURN_SUCCESS  :

      {
         APL_FREE(l_ca_caeventimg_struct_h);
         APL_FREE(l_ca_caevent_struct_i);

         APL_IF_DEBUG
         {
            CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_Mod_RedonmDel successfully",NULL,p_intlenv_data_struct_h);
         }
         return (APL_SUCCESS);
      }
      RETURN_FAILURE  :
      {
         APL_FREE(l_ca_caeventimg_struct_h);
         APL_FREE(l_ca_caevent_struct_i);

         APL_IF_DEBUG
         {
            CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_Mod_RedonmDel unsuccessfully",NULL,p_intlenv_data_struct_h);
         }
         return (APL_FAILURE);
      }
}


  





static   int   CA_Mod_RedonmReset(  CA_CAEVENT_STRUCT_H    *p_ca_caevent_struct_h_c,
                                 INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
                                 DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
                              )
{
   struct   sqlca sqlca;
   CA_CAEVENT_STRUCT_H    *l_ca_caeventimg_struct_h     =  NULL;
   CA_CAEVENT_STRUCT_I    *l_ca_caevent_struct_i  =  NULL;
   char              rowid[APL_ROWID_LEN] = APL_NULL_STRING;
   char     pro_sys_date[APL_DATE_LEN] = APL_NULL_STRING;
   char     chr_h_rtv_access_stamp[APL_DATE_LEN] = APL_NULL_STRING;
   short    i_rtv_access_stamp = 0;
   char     h_instr_code[APL_INSTRUMENTCODE_LEN] = APL_NULL_STRING;
   short    i_instr_code = 0;
   char     h_res_instr_code[APL_INSTRUMENTCODE_LEN] = APL_NULL_STRING;
   short    i_res_instr_code = 0;
   char     h_evt_stat[APL_STATUS_LEN] = APL_NULL_STRING;
   short    i_evt_stat = 0;
   char     h_maker[APL_USERID_LEN] = APL_NULL_STRING;
   short    i_maker =0;
   char     chr_op_ind[APL_FLAG_LENGTH] = {APL_NO_IND};


   #ifdef APL_THREADS
   APL_SET_CONTEXT
   EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Entered CA_Mod_RedonmReset function",NULL,p_intlenv_data_struct_h);
   }

   

         if(   !strlen(p_ca_caevent_struct_h_c->h_access_stamp) )
            {
               APL_DATA_MISSING("Access Stamp",APL_NULL_STRING,APL_NULL_STRING)
            }

         if(   !strlen(p_ca_caevent_struct_h_c->h_corp_id)  )
            {
               APL_DATA_MISSING("Corporate Action ID",APL_NULL_STRING,APL_NULL_STRING)
            }


   if (   CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS )
         APL_GOBACK_FAIL


         
         (l_ca_caeventimg_struct_h) = (CA_CAEVENT_STRUCT_H*)calloc(1,
                              sizeof(CA_CAEVENT_STRUCT_H));
         APL_MALLOC_FAIL(l_ca_caeventimg_struct_h)

         (l_ca_caevent_struct_i) = (CA_CAEVENT_STRUCT_I*)calloc(1,
                              sizeof(CA_CAEVENT_STRUCT_I));
         APL_MALLOC_FAIL(l_ca_caevent_struct_i)

         

         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_corp_id is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_instr_code is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_res_instr_code is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_contactinfo is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_info_nbr is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_entinfo_no is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_maker is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_checker is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_proc_oth is string;

         

         
		if ( CA_Rtv_EventRec( p_ca_caevent_struct_h_c , 
									  l_ca_caeventimg_struct_h,
									  l_ca_caevent_struct_i,
									  rowid,
									  l_debug_info_ptr
									 ) == APL_FAILURE
			)
		{
			APL_GOBACK_FAIL
		}



      
      if (
            strcmp(  p_ca_caevent_struct_h_c->h_access_stamp,
                     l_ca_caeventimg_struct_h->h_access_stamp
                  )
         )
         {
            CO_InsertErr(l_debug_info_ptr,
                           ERR_ACCESSSTAMP_CHGD,
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           __LINE__,
                           __FILE__
                           );
            APL_GOBACK_FAIL
         }



      
      

      if  (strcmp(l_ca_caeventimg_struct_h->h_evt_stat,STATUS_DEL_UNAUTH))   
		    if (strcmp(p_ca_caevent_struct_h_c->h_evt_stat,STATUS_REV_UAUTH ))
         
         {
            CO_InsertErr(l_debug_info_ptr,
                           ERR_CANT_RESET,
                           l_ca_caeventimg_struct_h->h_evt_stat,
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           __LINE__,
                           __FILE__
                           );
            APL_GOBACK_FAIL
         }



      
      

      if (  l_ca_caevent_struct_i->i_checker  != -1 )
         {
            CO_InsertErr(l_debug_info_ptr,
                           ERR_EVNT_AUTHORIZED,
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           __LINE__,
                           __FILE__
                           );
            APL_GOBACK_FAIL
         }

      
      

      if (  !strcmp(p_intlenv_data_struct_h->usr,l_ca_caeventimg_struct_h->h_maker)   )
         {
            CO_InsertErr(l_debug_info_ptr,
                           ERR_MAKER_CHECKER_SAME,
                           p_intlenv_data_struct_h->usr,
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           __LINE__,
                           __FILE__
                           );
            APL_GOBACK_FAIL
         }





      


      if (  CA_ChkInstr(p_ca_caevent_struct_h_c->h_instr_code,
                        APL_NULL_STRING,
                        chr_op_ind,
                        l_debug_info_ptr
                        )  ==    APL_FAILURE
         )
            APL_GOBACK_FAIL


   

      if (  CO_RtvSysDt(pro_sys_date,l_debug_info_ptr) == APL_FAILURE )
         {
            APL_GOBACK_FAIL
         }

   
		
		if ( !strcmp(p_ca_caevent_struct_h_c->h_evt_stat,STATUS_REV_UAUTH ))
         strcpy(p_ca_caevent_struct_h_c->h_evt_stat,STATUS_RDY_PYMT);
	   else		
         strcpy(p_ca_caevent_struct_h_c->h_evt_stat,STATUS_RDY_INT);

         strcpy(p_ca_caevent_struct_h_c->h_stat_date,pro_sys_date);
         strcpy(p_ca_caevent_struct_h_c->h_checker,p_intlenv_data_struct_h->usr);
         strcpy(p_ca_caevent_struct_h_c->h_checker_dt,pro_sys_date);

      	

      	if (  CO_RtvSysDtTime(pro_sys_date,l_debug_info_ptr) == APL_FAILURE )
      		{
        		 APL_GOBACK_FAIL
      		}
         strcpy(p_ca_caevent_struct_h_c->h_access_stamp,pro_sys_date);

      	EXEC SQL UPDATE CAEVENT
         	SET
            	CHECKER=:p_ca_caevent_struct_h_c->h_maker,
            	CHECKER_DT=:p_ca_caevent_struct_h_c->h_maker_dt,
            	STATUS=:p_ca_caevent_struct_h_c->h_evt_stat,
            	PROCESSED_DATE=:p_ca_caevent_struct_h_c->h_stat_date,
            	ACCESS_STAMP=:p_ca_caevent_struct_h_c->h_access_stamp
      	WHERE
            	ROWID=:rowid;

      	IS_ANY_ORA_ERROR;

      
     APL_GOBACK_SUCCESS
      RETURN_SUCCESS  :

      {
         APL_FREE(l_ca_caeventimg_struct_h);
         APL_FREE(l_ca_caevent_struct_i);

         APL_IF_DEBUG
         {
            CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_Mod_RedonmReset successfully",NULL,p_intlenv_data_struct_h);
         }
         return (APL_SUCCESS);
      }
      RETURN_FAILURE  :
      {
         APL_FREE(l_ca_caeventimg_struct_h);
         APL_FREE(l_ca_caevent_struct_i);

         APL_IF_DEBUG
         {
            CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_Mod_RedonmReset unsuccessfully",NULL,p_intlenv_data_struct_h);
         }
         return (APL_FAILURE);
      }
}


 



int   CA_Rtv_EventRec( CA_CAEVENT_STRUCT_H   *p_ca_caevent_struct_h_c,
                        CA_CAEVENT_STRUCT_H   *p_ca_caevent_struct_h_b,
                        CA_CAEVENT_STRUCT_I   *p_ca_caevent_struct_i_b,
                        char                *p_ora_rowid,
                        DEBUG_INFO_STRUCT_H       **l_debug_info_ptr
                        )
{
   struct   sqlca sqlca;
   char     rowid[APL_ROWID_LEN]=APL_NULL_STRING;
   char     chr_log_buff[LOG_BUFFER_LEN] = APL_NULL_STRING;

   #ifdef APL_THREADS
   APL_SET_CONTEXT
   EXEC SQL CONTEXT USE :my_ctx_local;
   #endif



   

    EXEC SQL VAR   p_ca_caevent_struct_h_b->h_corp_id is string;
    EXEC SQL VAR   p_ca_caevent_struct_h_b->h_instr_code is string;
    EXEC SQL VAR   p_ca_caevent_struct_h_b->h_res_instr_code is string;
    EXEC SQL VAR   p_ca_caevent_struct_h_b->h_contactinfo is string;
    EXEC SQL VAR   p_ca_caevent_struct_h_b->h_info_nbr is string;
    EXEC SQL VAR   p_ca_caevent_struct_h_b->h_entinfo_no is string;
    EXEC SQL VAR   p_ca_caevent_struct_h_b->h_maker is string;
    EXEC SQL VAR   p_ca_caevent_struct_h_b->h_checker is string;
    EXEC SQL VAR   p_ca_caevent_struct_h_b->h_proc_oth is string;

         

    APL_IF_DEBUG
      {
      CO_ProcMonitor(APL_OUT_FILE,"About to select record to be updated",NULL,NULL);
   sprintf(chr_log_buff,"It has attributes -Ca_id :(%s)  ",p_ca_caevent_struct_h_c->h_corp_id);
      CO_ProcMonitor(APL_OUT_FILE,chr_log_buff,NULL,NULL);
      }

    EXEC SQL SELECT   ROWID,
                      CAEVENT.*
    INTO              :rowid,
                      :p_ca_caevent_struct_h_b:p_ca_caevent_struct_i_b
    FROM CAEVENT
    WHERE corp_id=:p_ca_caevent_struct_h_c->h_corp_id
    FOR UPDATE OF CAEVENT.STATUS;

    IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET( ERR_EVNT_NOTFND_A,
                                            p_ca_caevent_struct_h_c->h_instr_code,
                                           p_ca_caevent_struct_h_c->h_decl_date,
                                           p_ca_caevent_struct_h_c->h_evt_class
                                                                                                          )

   
   strcpy(p_ora_rowid,rowid);

   
   APL_GOBACK_SUCCESS
   RETURN_SUCCESS  :
   {
      APL_IF_DEBUG
      {
         CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_Rtv_EventRec successfully",NULL,NULL);
      }
      return (APL_SUCCESS);
   }
   RETURN_FAILURE  :
   {
      APL_IF_DEBUG
      {
         CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_Rtv_EventRec unsuccessfully",NULL,NULL);
      }
      return (APL_FAILURE);
  }
}








int   CA_Mod_RedonmReverse(  CA_CAEVENT_STRUCT_H    *p_ca_caevent_struct_h_c,
                                 INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
                                 DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
                              )
{
   struct   sqlca sqlca;
   CA_CAEVENT_STRUCT_H    *l_ca_caeventimg_struct_h  =  NULL;
   CA_CAEVENT_STRUCT_I    *l_ca_caevent_struct_i  =  NULL;
   char              rowid[APL_ROWID_LEN] = APL_NULL_STRING;
   char     pro_sys_date[APL_DATE_LEN] = APL_NULL_STRING;
   char     chr_op_ind[APL_FLAG_LENGTH] = {APL_NO_IND};

   #ifdef APL_THREADS
   APL_SET_CONTEXT
   EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,"Entered CA_Mod_RedonmReverse function",NULL,p_intlenv_data_struct_h);
   }

   

         if(   !strlen(p_ca_caevent_struct_h_c->h_access_stamp) )
            {
               APL_DATA_MISSING("Access Stamp",APL_NULL_STRING,APL_NULL_STRING)
            }

         if(   !strlen(p_ca_caevent_struct_h_c->h_corp_id)  )
            {
               APL_DATA_MISSING("Corporate Action ID",APL_NULL_STRING,APL_NULL_STRING)
            }



   if (   CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS )
         APL_GOBACK_FAIL

   
         (l_ca_caeventimg_struct_h) = (CA_CAEVENT_STRUCT_H*)calloc(1,
                              sizeof(CA_CAEVENT_STRUCT_H));
         APL_MALLOC_FAIL(l_ca_caeventimg_struct_h)

         (l_ca_caevent_struct_i) = (CA_CAEVENT_STRUCT_I*)calloc(1,
                              sizeof(CA_CAEVENT_STRUCT_I));
   APL_MALLOC_FAIL(l_ca_caevent_struct_i)

         

         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_corp_id is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_instr_code is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_res_instr_code is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_contactinfo is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_info_nbr is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_entinfo_no is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_maker is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_checker is string;
         EXEC SQL VAR   l_ca_caeventimg_struct_h->h_proc_oth is string;


         

         
		if ( CA_Rtv_EventRec( p_ca_caevent_struct_h_c , 
									  l_ca_caeventimg_struct_h,
									  l_ca_caevent_struct_i,
									  rowid,
									  l_debug_info_ptr
									 ) == APL_FAILURE
			)
		{
			APL_GOBACK_FAIL
		}


      
      if (
            strcmp(  p_ca_caevent_struct_h_c->h_access_stamp,
                     l_ca_caeventimg_struct_h->h_access_stamp
                  )
         )
         {
            CO_InsertErr(l_debug_info_ptr,
                         ERR_ACCESSSTAMP_CHGD,
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           __LINE__,
                           __FILE__
                           );
            APL_GOBACK_FAIL
         }

      
      
            if (  strcmp(l_ca_caeventimg_struct_h->h_evt_stat,STATUS_RDY_PYMT) ) 

               {
                  CO_InsertErr(l_debug_info_ptr,
                                 ERR_EVNT_STS_INVALIDREVERSE,
                                 APL_NULL_STRING,
                                 APL_NULL_STRING,
                                 APL_NULL_STRING,
                                 __LINE__,
                                 __FILE__
                                 );
                  APL_GOBACK_FAIL
               }

      if (  CA_ChkInstr(l_ca_caeventimg_struct_h->h_instr_code,
                        APL_NULL_STRING,
                        chr_op_ind,
                        l_debug_info_ptr
                        )  ==    APL_FAILURE
         )
            APL_GOBACK_FAIL

      

      if (  CO_RtvSysDt(pro_sys_date,l_debug_info_ptr) == APL_FAILURE )
         {
            APL_GOBACK_FAIL
         }

         strcpy(p_ca_caevent_struct_h_c->h_stat_date,pro_sys_date);
         strcpy(p_ca_caevent_struct_h_c->h_evt_stat,STATUS_REV_UAUTH);
         strcpy(p_ca_caevent_struct_h_c->h_maker,p_intlenv_data_struct_h->usr);
         strcpy(p_ca_caevent_struct_h_c->h_maker_dt,pro_sys_date);

      
      if (  CO_RtvSysDtTime(pro_sys_date,l_debug_info_ptr) == APL_FAILURE )
      {
         APL_GOBACK_FAIL
      }
      strcpy(p_ca_caevent_struct_h_c->h_access_stamp,pro_sys_date);

      EXEC SQL UPDATE CAEVENT
         SET
            MAKER=:p_ca_caevent_struct_h_c->h_maker,
            MAKER_DT=:p_ca_caevent_struct_h_c->h_maker_dt,
            CHECKER=NULL,
            CHECKER_DT=NULL,
            STATUS=:p_ca_caevent_struct_h_c->h_evt_stat,
            PROCESSED_DATE=:p_ca_caevent_struct_h_c->h_stat_date,
            ACCESS_STAMP=:p_ca_caevent_struct_h_c->h_access_stamp
      WHERE
            ROWID=:rowid;

      IS_ANY_ORA_ERROR;

      
      APL_GOBACK_SUCCESS
      RETURN_SUCCESS  :

      {
         APL_FREE(l_ca_caeventimg_struct_h);
         APL_FREE(l_ca_caevent_struct_i);

         APL_IF_DEBUG
         {
            CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_Mod_RedonmReverse successfully",NULL,p_intlenv_data_struct_h);
         }
         return (APL_SUCCESS);
      }
      RETURN_FAILURE  :
     {
         APL_FREE(l_ca_caeventimg_struct_h);
         APL_FREE(l_ca_caevent_struct_i);

         APL_IF_DEBUG
         {
            CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_Mod_RedonmReverse unsuccessfully",NULL,p_intlenv_data_struct_h);
         }
         return (APL_FAILURE);
      }
}





static   int CA_Mod_RedonmAuth(  CA_CAEVENT_STRUCT_H    *p_ca_caevent_struct_h_a,
                           INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
                           DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
                        )
{



   

   struct   sqlca sqlca;
   char     h_ora_rowid[APL_ROWID_LEN] = APL_NULL_STRING;
   char     h_instr_code[APL_INSTRUMENTCODE_LEN] = APL_NULL_STRING;
   short    i_instr_code=0;
   char     h_res_instr_code[APL_INSTRUMENTCODE_LEN] = APL_NULL_STRING;
   short    i_res_instr_code=0;
   char     chr_h_rtv_access_stamp[APL_DATE_LEN] = APL_NULL_STRING;
   short    i_rtv_access_stamp=0;
   char     chr_h_rtv_maker[APL_USERID_LEN] = APL_NULL_STRING;
   short    i_rtv_maker=0;
   char     chr_h_rtv_checker[APL_USERID_LEN] = APL_NULL_STRING;
   short    i_rtv_checker=0;
   char     h_evt_stat[APL_STATUS_LEN] = APL_NULL_STRING;
   short    i_evt_stat=0;
   char     chr_h_event_statimg[APL_STATUS_LEN] = APL_NULL_STRING;
   short    i_evnt_statimg=0;
   char     h_typeofinstr[APL_INSTRU_TYPE_LEN] = APL_NULL_STRING;
   short    i_typeofinstr=0;
   int      int_h_counter=0;
   short    i_counter=0;

   char     h_sys_dt[APL_DATE_LEN] = APL_NULL_STRING;
   short    i_sys_date=0;
   char     h_checker[APL_USERID_LEN] = APL_NULL_STRING;
   short    i_checker=0;
   char     chr_h_upd_access_stamp[APL_DATE_LEN] = APL_NULL_STRING;
   short    i_upd_access_stamp=0;
   char     chr_h_upd_event_stat[APL_STATUS_LEN] = APL_NULL_STRING;
   short    i_upd_evnt_stat=0;
   char     chr_op_ind[APL_FLAG_LENGTH] = {APL_NO_IND};


	char     chr_h_func_area[FUNC_AREA_LEN] = {FUNC_AREA_REDENOM};	



   char     h_evt_class[EVT_CLASS_] = APL_NULL_STRING;
   short    i_evt_class=0;

   #ifdef APL_THREADS
   APL_SET_CONTEXT
   EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   APL_IF_DEBUG
	  {
      CO_ProcMonitor(APL_OUT_FILE,"Entering S_Auth",NULL,p_intlenv_data_struct_h);
   }


   if(   !strlen(p_ca_caevent_struct_h_a->h_corp_id  )  )

         APL_DATA_MISSING("Corporate Action ID",APL_NULL_STRING,APL_NULL_STRING)

   if(   !strlen(p_ca_caevent_struct_h_a->h_access_stamp )  )
         APL_DATA_MISSING("Access Stamp missing ",APL_NULL_STRING,APL_NULL_STRING)

   if (  CO_ChkErr(*l_debug_info_ptr)   == APL_SUCCESS   )
      APL_GOBACK_FAIL

   

         

         EXEC SQL VAR   h_instr_code is string;
         EXEC SQL VAR   h_res_instr_code is string;
         EXEC SQL VAR   chr_h_rtv_maker is string;
         EXEC SQL VAR   chr_h_rtv_checker is string;

         


         

         EXEC SQL SELECT ROWID,
                        instr_code,
                        RES_INSTR_CODE,
                        access_stamp,
                        status,
                        maker,
                        checker,
                        CA_EVENT
                  INTO  :h_ora_rowid,
                        :h_instr_code:i_instr_code,
                        :h_res_instr_code:i_res_instr_code,
                        :chr_h_rtv_access_stamp:i_rtv_access_stamp,
                        :h_evt_stat:i_evt_stat,
                        :chr_h_rtv_maker:i_rtv_maker,
                        :chr_h_rtv_checker:i_rtv_checker,
                        :h_evt_class:i_evt_class
         FROM     CAEVENT
         WHERE
            CORP_ID=:p_ca_caevent_struct_h_a->h_corp_id
         FOR UPDATE OF  CAEVENT.STATUS;

         IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET( ERR_EVNT_NOTFND_A,
                                                APL_NULL_STRING,
                                                APL_NULL_STRING,
                                                APL_NULL_STRING
                                                )

      if (i_res_instr_code == -1 )
         strcpy(h_res_instr_code,APL_NULL_STRING);

      

      if (
            strcmp(  p_ca_caevent_struct_h_a->h_access_stamp,
                     chr_h_rtv_access_stamp
                  )
         )
         {
            CO_InsertErr(l_debug_info_ptr,
                           ERR_ACCESSSTAMP_CHGD,
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           __LINE__,
                           __FILE__
                           );
            APL_GOBACK_FAIL
    }

      
      

      if (  i_rtv_checker  != -1 )
         {
            CO_InsertErr(l_debug_info_ptr,
                           ERR_EVNT_AUTHORIZED,
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           __LINE__,
                           __FILE__
                           );
            APL_GOBACK_FAIL
         }

      
      

      if (  !strcmp(p_intlenv_data_struct_h->usr,chr_h_rtv_maker)   )
         {
            CO_InsertErr(l_debug_info_ptr,
                           ERR_MAKER_CHECKER_SAME,
                           p_intlenv_data_struct_h->usr,
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           __LINE__,
                           __FILE__
                           );
            APL_GOBACK_FAIL
         }

      if (  CA_ChkInstr(
                        h_instr_code,
                        APL_NULL_STRING,
                        chr_op_ind,
                        l_debug_info_ptr
                        )
            == APL_FAILURE
         )
         APL_GOBACK_FAIL


    

      if (  CO_RtvSysDt(h_sys_dt,l_debug_info_ptr) == APL_FAILURE )
         {
            APL_GOBACK_FAIL
         }

      

      if (  CO_RtvSysDtTime(chr_h_upd_access_stamp,l_debug_info_ptr) == APL_FAILURE )
      {
         APL_GOBACK_FAIL
      }

      

      strcpy(h_checker,p_intlenv_data_struct_h->usr);

      
      
      

      
      if (  !strcmp(h_evt_stat,STATUS_DEL_UNAUTH)  )
         {
            strcpy(chr_h_upd_event_stat,STATUS_DELETED_A);
         }

      
      
      if (
            (!strcmp(h_evt_stat,APL_STATUS_UNAUTH))     ||
            (!strcmp(h_evt_stat,STATUS_CHNG_RDY_INT))
         )
         {
            strcpy(chr_h_upd_event_stat,STATUS_RDY_INT);
         }



      
      if (  !strcmp(h_evt_stat,STATUS_REV_UAUTH)  )
         {
            strcpy(chr_h_upd_event_stat,STATUS_RDY_ENTL);
         }
      
		
      
      

      if (  !strcmp(chr_h_upd_event_stat,STATUS_DELETED_A) )
      {
            EXEC SQL DELETE CANOTIFY
            WHERE CORP_ID=:p_ca_caevent_struct_h_a->h_corp_id;

            IS_ANY_ORA_ERROR

            
            EXEC SQL DELETE CAEVENT
            WHERE
            ROWID=:h_ora_rowid;

            IS_ANY_ORA_ERROR

      }
      else
      {

			if( !strcmp(chr_h_upd_event_stat,STATUS_RDY_ENTL))
			{
				EXEC SQL DELETE CACHEQUE
				WHERE CORP_ID=:p_ca_caevent_struct_h_a->h_corp_id;

				IS_ANY_ORA_ERROR

				EXEC SQL DELETE CAENTITLEMENT
				WHERE CORP_ID=:p_ca_caevent_struct_h_a->h_corp_id;

				IS_ANY_ORA_ERROR

				EXEC SQL DELETE PRO_EURO_TEMP
				WHERE PROC_AREA = :chr_h_func_area
 		AND	INSTR_CODE    = :h_instr_code;

				IS_ANY_ORA_ERROR 
			}
	
      EXEC SQL UPDATE
      CAEVENT
      SET
         CHECKER     =  :h_checker:i_checker,
         CHECKER_DT  =  :h_sys_dt:i_sys_date,
         STATUS   =  :chr_h_upd_event_stat:i_upd_evnt_stat,
         PROCESSED_DATE     =  :h_sys_dt:i_sys_date,
         ACCESS_STAMP   =:chr_h_upd_access_stamp
      WHERE
         ROWID       =  :h_ora_rowid;

      IS_ANY_ORA_ERROR
      }



         APL_GOBACK_SUCCESS
         RETURN_SUCCESS  :
      {
         APL_IF_DEBUG
         {
             CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_EventAuth successfully",NULL,p_intlenv_data_struct_h);
          }
          return (APL_SUCCESS);
       }
       RETURN_FAILURE  :
       {
          APL_IF_DEBUG
          {
             CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_EventAuth unsuccessfully",NULL,p_intlenv_data_struct_h);
          }
          return (APL_FAILURE);
       }
 }


