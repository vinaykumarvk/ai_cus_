







#include "CO_HostStructdef.h"
EXEC SQL INCLUDE SQLCA.H;




int CR_Proc_CAERst(	char *p_cltdate,
						char *chr_p_batchno,
						FILE *p_logfile,
						char **argv,
						INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	

	struct sqlca sqlca;	
	char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	char chr_l_cae_ind[4] = APL_NULL_STRING;

	int int_l_error_flag = APL_SUCCESS;

	sqlca.sqlcode = 0;

	

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	p_logfile, 
						"Entered Function CR_Proc_CAERst\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Batch No is : %s\n", 
						chr_p_batchno);
		CO_ProcMonitor(	p_logfile, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf, 
						"The Batch chr_date is : %s\n", 
						p_cltdate);
		CO_ProcMonitor(	p_logfile, 
						chr_l_buf,	
						NULL,
						NULL);
	}

	
	

	if (!strlen(chr_p_batchno))
	{
		APL_DATA_MISSING("Batch No.", APL_NULL_STRING, APL_NULL_STRING);
		int_l_error_flag = APL_FAILURE;
	} 
	if (!strlen(p_cltdate))
	{
		APL_DATA_MISSING("Batch Date", APL_NULL_STRING, APL_NULL_STRING);
		int_l_error_flag = APL_FAILURE;
	} 

	if (APL_FAILURE == int_l_error_flag) APL_GOBACK_FAIL

	

	

	strcpy(chr_l_cae_ind, CAE_IND);

	EXEC SQL DELETE DL_DEALDET
	WHERE REPORTDT = :p_cltdate
	AND	STAT_DET = :chr_p_batchno
	AND	FLAG = :chr_l_cae_ind;

	IS_ANY_ORA_ERROR
	
	memset(chr_l_buf, NULL, BUFFER_LEN);
	sprintf(chr_l_buf, "Deleted %d Contingent Accounting Entries Records", sqlca.sqlerrd[2]);
	CO_ProcMonitor(p_logfile, chr_l_buf, NULL, NULL);

	
	
	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Leaving Function CR_Proc_CAERst with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);

   RETURN_FAILURE :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Leaving Function CR_Proc_CAERst with errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);

}

