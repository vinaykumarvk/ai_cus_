




/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to 
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or 
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         :     Maintenance	
 *
 * File Name           :     DateFunctions.pc 
 *
 * Description         :     This file contain Validations for Date in Client Details.	
 *
 *
 *            Version Control Block
 *
 * Date        Version		Author               Description
 * ---------   --------	 ---------------  ---------------------------
 *15/12/2005	1.0	  Kouser Begum		Contains Validation for Date fields 	                                                                                       in Client.			
 *
 *********************************************************************/

#include "CR_Common.h"
#include <time.h>

EXEC SQL INCLUDE SQLCA.H;

int CO_Pro_DateComp(char *p_from_date, char *p_to_date, int *int_p_diff, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	

	

	struct sqlca sqlca;	
	int int_error_flag = APL_SUCCESS;
	char chr_l_from_date[11];
	char chr_l_to_date[11];

	#ifdef APL_THREADS
	APL_SET_CONTEXT
	EXEC SQL CONTEXT USE	:my_ctx_local;
	#endif
	sqlca.sqlcode = 0;

	

   #ifdef SYS_DEBUG
      fprintf(APL_OUT_FILE, "Entered Function CO_Pro_DateComp\n");
      fprintf(APL_OUT_FILE, "The From Date is : %s\n", p_from_date);
      fprintf(APL_OUT_FILE, "The To Date is : %s\n", p_to_date);
   #endif

   

   if (!strlen(p_from_date))
   {
      APL_DATA_MISSING( "From Date",
                        APL_NULL_STRING,
                        APL_NULL_STRING );
      int_error_flag = APL_FAILURE;
   }
   if (!strlen(p_to_date))
   {
      APL_DATA_MISSING( "To Date",
                        APL_NULL_STRING,
                        APL_NULL_STRING );
      int_error_flag = APL_FAILURE;
   }

   if (APL_FAILURE == int_error_flag) APL_GOBACK_FAIL

	

	strncpy(chr_l_from_date, p_from_date, 10);
	strncpy(chr_l_to_date, p_to_date, 10);
	chr_l_from_date[10] = '\0';
	chr_l_to_date[10] = '\0';

	
	

	EXEC SQL SELECT 
	to_date(:chr_l_to_date, 'DD/MM/YYYY')-to_date(:chr_l_from_date, 'DD/MM/YYYY')
	INTO :int_p_diff
 	FROM DUAL;

	IS_ANY_ORA_ERROR;
	
	

	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
      #ifdef SYS_DEBUG
         fprintf(APL_OUT_FILE,"Leaving Function CO_Pro_DateComp successfully\n");
      #endif
      return(APL_SUCCESS);
  
   RETURN_FAILURE :
      #ifdef SYS_DEBUG
         fprintf(APL_OUT_FILE,"Leaving Function CO_Pro_DateComp with errors\n");
      #endif
      return(APL_FAILURE);
}							


int CO_Pro_AddDate(char *p_origdate,int p_incby, char *p_newdate,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	
   struct sqlca sqlca;
   char chr_h_newdate[APL_DATE_LEN]="";
 	// int int_error_flag = APL_SUCCESS; //AIX Warning Removal
 
	#ifdef APL_THREADS
	APL_SET_CONTEXT
	EXEC SQL CONTEXT USE	:my_ctx_local;
	#endif
	sqlca.sqlcode = 0;

	

   #ifdef SYS_DEBUG
      fprintf(APL_OUT_FILE,"Entered CO_Pro_AddDate \n");
		fprintf(APL_OUT_FILE,"Original chr_date is : %s\n", p_origdate);
		fprintf(APL_OUT_FILE,"Increment By  : %d\n", p_incby);
   #endif

   

   if (!strlen(p_origdate))
   {
      APL_DATA_MISSING( "From Date",
                        APL_NULL_STRING,
                        APL_NULL_STRING );
   	APL_GOBACK_FAIL
	}

	

   EXEC SQL SELECT TO_CHAR(TO_DATE(:p_origdate) + :p_incby) INTO :chr_h_newdate FROM DUAL
;

   IS_ANY_ORA_ERROR;

   strcpy(p_newdate, chr_h_newdate);

   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {
      #ifdef SYS_DEBUG
         fprintf(APL_OUT_FILE,"Leaving CO_Pro_AddDate successfully\n");
      #endif
      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {
      #ifdef SYS_DEBUG
         fprintf(APL_OUT_FILE,"Leaving CO_Pro_AddDate with errors\n");
      #endif
      return(APL_FAILURE);
   }
}

int CR_Chk_RegDateValid(char *p_reg_date,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   struct sqlca sqlca;
  // int int_error_flag = APL_SUCCESS;//AIX Warning Removal
   int  int_p_diff  =  0;
   #define D_DATE_LENGTH 11

   #ifdef APL_THREADS
        APL_SET_CONTEXT
        EXEC SQL CONTEXT USE    :my_ctx_local;
   #endif
   sqlca.sqlcode = 0;
   char          chr_p_sys_date[D_DATE_LENGTH];
   char          chr_l_sys_date[D_DATE_LENGTH];
   char          chr_l_reg_date[D_DATE_LENGTH]; 
   APL_IF_DEBUG
           CO_ProcMonitor(APL_OUT_FILE,"Entered Into CR_Chk_RegDateValid Function \n",NULL,NULL);
   #ifdef SYS_DEBUG
      fprintf(APL_OUT_FILE, "Entered Function CR_Chk_RegDateValid\n");
      fprintf(APL_OUT_FILE, "The Reg Date is : |%s|\n", p_reg_date);
      fprintf(APL_OUT_FILE, "The ExpDate is : |%s|\n", p_exp_date);
   #endif

      /*strncpy(chr_l_reg_date, p_reg_date, 19);
      strcat(chr_l_reg_date,APL_NULL_TIME);
      chr_l_reg_date[19] = '\0';*/


      EXEC SQL SELECT TO_CHAR(SYS_DATE,'DD/MM/YYYY')
      INTO :chr_l_sys_date 
      FROM PRO_SYS_DATE; 

      IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_DATE_NOT_SET,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

      strcpy(chr_p_sys_date,chr_l_sys_date);
      strcat(chr_p_sys_date,APL_NULL_TIME);

      strcpy(chr_l_reg_date,p_reg_date);
      strcat(chr_l_reg_date,APL_NULL_TIME);

      printf("Val of Current Date==|%s|\n",chr_p_sys_date);

      printf("Val of REG DATE ==|%s|\n",chr_l_reg_date);

      printf("VAL CURR DATE = |%s|\n",chr_p_sys_date);

      EXEC SQL SELECT
      to_date(:chr_p_sys_date, 'DD/MM/YYYY')-to_date(:chr_l_reg_date, 'DD/MM/YYYY')
      INTO :int_p_diff
      FROM DUAL;
      
   
      if (int_p_diff > 0)
         {
              APL_GOBACK_SUCCESS
         }
        else
              APL_GOBACK_FAIL
 

      /**if (chr_l_reg_date > chr_p_sys_date)
      {
        CO_InsertErr(  l_debug_info_ptr,
                       ERR_REGDATE_PASSED,
                       chr_l_reg_date,
                       APL_NULL_STRING,
                       APL_NULL_STRING,
                       __LINE__,
                       __FILE__);
                       APL_GOBACK_FAIL
      }
      else
         APL_GOBACK_SUCCESS**/
	
    RETURN_SUCCESS :
      {
         APL_IF_DEBUG
                     CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_RegDateValid SUCCESS \n",NULL,NULL);
         return(APL_SUCCESS);
     }

     RETURN_FAILURE :
        {
         APL_IF_DEBUG
                     CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_RegDateValid FAILURE \n",NULL,NULL);
         if (sqlca.sqlcode == 0)
         return(APL_RECS_EXIST);
         else
         return(APL_FAILURE);
       }
}


int CR_Chk_ExpDateValid(char *p_reg_date,char *p_exp_date,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   struct sqlca sqlca;
  // int int_error_flag = APL_SUCCESS;  AIX-Warnings Removal -- unused variable
   char chr_l_reg_date[11];
   char chr_l_exp_date[11];
   int  int_p_diff  =  0;
   #define D_DATE_LENGTH 11
	
   #ifdef APL_THREADS
        APL_SET_CONTEXT
        EXEC SQL CONTEXT USE    :my_ctx_local;
   #endif
   sqlca.sqlcode = 0;
   /*char          chr_p_sys_date[D_DATE_LENGTH]; 
   char          chr_l_sys_date[D_DATE_LENGTH];*/

   APL_IF_DEBUG
           CO_ProcMonitor(APL_OUT_FILE,"Entered Into CR_Chk_ExpDateValid Function \n",NULL,NULL);
   #ifdef SYS_DEBUG
      fprintf(APL_OUT_FILE, "Entered Function CR_Chk_ExpDateValid\n");
      fprintf(APL_OUT_FILE, "The Reg Date is : %s\n", p_reg_date);
      fprintf(APL_OUT_FILE, "The ExpDate is : %s\n", p_exp_date);
   #endif
		
      strncpy(chr_l_reg_date, p_reg_date, 10);
      strncpy(chr_l_exp_date, p_exp_date, 10);
      chr_l_reg_date[10] = '\0';
      chr_l_exp_date[10] = '\0';
      printf("Valu of reg date ==%s\n",chr_l_reg_date);
      printf("Valu of Exp date ==%s\n",chr_l_exp_date);
     
     
      /*EXEC SQL SELECT TO_CHAR(SYS_DATE,'DD/MM/YYYY')
      INTO :chr_l_sys_date
      FROM PRO_SYS_DATE;

      IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_DATE_NOT_SET,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING) 

      strcpy(chr_p_sys_date,chr_l_sys_date);
      strcat(chr_p_sys_date,APL_NULL_TIME); 

      printf("Val of Current Date==%s\n",chr_p_sys_date);*/
		
      EXEC SQL SELECT
      to_date(:chr_l_exp_date, 'DD/MM/YYYY')-to_date(:chr_l_reg_date, 'DD/MM/YYYY')
      INTO :int_p_diff
      FROM DUAL;

      IS_ANY_ORA_ERROR;

      printf("Valu of reg date ==%s\n",chr_l_reg_date);
      printf("Valu of Exp date ==%s\n",chr_l_exp_date);
      printf("Before Checking Reg Date \n");

      if (int_p_diff >= 0)
      {  
            APL_GOBACK_SUCCESS
      } 
      else
            APL_GOBACK_FAIL

      printf("Value Checking Two dates\n");

      RETURN_SUCCESS :
      {
         APL_IF_DEBUG
                     CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_ExpDateValid SUCCESS \n",NULL,NULL);
         return(APL_SUCCESS);
     }

     RETURN_FAILURE :
        {
         APL_IF_DEBUG
                     CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CR_Chk_ExpDateValid FAILURE \n",NULL,NULL);
         if (sqlca.sqlcode == 0)
         return(APL_RECS_EXIST);
         else
         return(APL_FAILURE);
       }
}

int   CO_GetPrevBusinessDay(  const char           *chr_p_inp_date,
                              char                 *p_out_date,
                              DEBUG_INFO_STRUCT_H  **l_debug_info_ptr)
{

	FILE* g_logfile = APL_OUT_FILE;
	   struct sqlca sqlca;
      char  chr_out_date[APL_DATE_LEN] =  APL_NULL_STRING;
      short i_out_date  =  0;

      APL_FUNCTION_ENTER(g_logfile)

  EXEC SQL SELECT MIN(H_DATE) - 1
     INTO  :chr_out_date:i_out_date
	  FROM  MT_HOLIDAY
	  WHERE STATUS='AA'
	 AND BANK_IND = 'Y'
	 CONNECT BY PRIOR  H_DATE - 1 = H_DATE	  
      AND   PRIOR STATUS = STATUS
     START WITH H_DATE=:chr_p_inp_date
     AND   STATUS='AA'
     AND BANK_IND = 'Y';
    IS_ANY_ORA_ERROR


  if (i_out_date == -1)
   {	
       strcpy(chr_out_date,chr_p_inp_date);
   }

    strcpy(p_out_date,chr_out_date);

    APL_GOBACK_SUCCESS
	 RETURN_SUCCESS  :
	 APL_FUNCTION_RET_SUCCESS(g_logfile)
	 RETURN_FAILURE  :
	 APL_FUNCTION_RET_FAILURE(g_logfile)
}

int Rtv_Prev_BussDate(   char *p_current_date,
		char *p_prev_date,
		char *p_exch_code,
		DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca         sqlca;
	char                 l_prev_date[APL_DATE_LEN] = APL_NULL_STRING;
	int                  l_flag = 0;
	char	 chr_l_day[15]  = APL_NULL_STRING; /* ISolve - 155  Skip the Saturday its a Holiday - Rahul - 01/04/2007 */

	APL_FUNCTION_ENTER(APL_OUT_FILE)
		sqlca.sqlcode = 0;

	printf("\n Inside Rtv_Prev_BussDate Exchange Code=|%s| \n",p_exch_code);


	if(!strlen(p_current_date))
	{
		printf("\n Entered Here 1\n");
		EXEC SQL SELECT TO_CHAR(SYS_DATE - 1,'DD/MM/YYYY HH24:MI:SS')
			INTO :l_prev_date
			FROM PRO_SYS_DATE;
	}
	else
	{
		printf("\n Entered Here 2\n");
		EXEC SQL SELECT TO_CHAR(TO_DATE(:p_current_date,'DD/MM/YYYY HH24:MI:SS') - 1,'DD/MM/YYYY HH24:MI:SS')
			INTO :l_prev_date	
			FROM PRO_SYS_DATE;
	}

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_DATE_NOT_SET,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
		printf("\n 31, ***** %s  ****\n",l_prev_date);


	while(1)
	{
		if (CO_Chk_Holiday(l_prev_date,
					&l_flag,
					l_debug_info_ptr,
					p_exch_code) != APL_SUCCESS)
			APL_GOBACK_FAIL

				printf("\n ******* 41, %d \n", l_flag );
		if (l_flag == 0)
			break;
		else
		{
			printf("\n Inside else part l_prev_date=|%s| \n",l_prev_date);
		
			EXEC SQL SELECT TO_CHAR(TO_DATE(:l_prev_date,'DD/MM/YYYY HH24:MI:SS')-1,'DD/MM/YYYY HH24:MI:SS')
				INTO :l_prev_date         FROM DUAL;

			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_DATE_NOT_SET,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
			
			/** Start: ISolve - 155  Skip the Saturday its a Holiday - Rahul - 01/04/2007 **/
			EXEC SQL SELECT TRIM(TO_CHAR(TO_DATE(:l_prev_date,'DD/MM/YYYY HH24:MI:SS'),'DAY')) 
                                   INTO :chr_l_day FROM DUAL;
        	IS_ANY_ORA_ERROR
        
			printf("\n Chek day for Holiday chr_l_day=|%s| \n",chr_l_day);
            if(strcmp(chr_l_day,"SATURDAY")==0)
            {
                       EXEC SQL SELECT TO_CHAR(TO_DATE(:l_prev_date,'DD/MM/YYYY HH24:MI:SS')-1,'DD/MM/YYYY HH24:MI:SS')
										INTO :l_prev_date  FROM DUAL;
                       IS_ANY_ORA_ERROR
                       printf("\n Check for Saterday:New Date=|%s| \n",l_prev_date);
             }
             /** End : ISolve - 155  Skip the Saturday its a Holiday - Rahul - 01/04/2007 **/	
	

		}
	}
	printf("\n 52, Error=%d \n", sqlca.sqlcode );
	strcpy(p_prev_date,l_prev_date);
	APL_GOBACK_SUCCESS
		RETURN_SUCCESS:
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
		RETURN_FAILURE:
		printf("\n Failure in Rtv_Prev_BussDate ora|%d|\n",sqlca.sqlcode);
	APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
}
/* Changes done by Sana for Connection Time-out [start] */
time_t to_seconds_with_time(const char *p_datetime)
{
        struct tm storage={0,0,0,0,0,0,0,0,0};
        char *p=NULL;
        time_t retval=0;

        p=(char *)strptime(p_datetime,"%d/%m/%Y %H:%M:%S",&storage);
        if(p==NULL)
        {
                retval=0;
        }
        else
        {
                retval=mktime(&storage);
        }
        return retval;
}
/* Changes done by Sana for Connection Time-out [end] */
