/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to 
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or 
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         :       Maintenance	
 *
 * File Name           :       RtvAccFieldFn.pc        	
 *
 * Description         :       This file contains various validations for                                                                                fields in Client. 	
 *           
 *
 *            Version Control Block
 *
 * Date        Version		Author               Description
 * ---------   --------	 ---------------  ---------------------------
 * 15/12/2005	1.0        Kouser Begum	      Validations for fields in Client 
 *
 *********************************************************************/

#include <CO_HostStructdef.h>

EXEC SQL INCLUDE sqlca;

 

 int MT_Rtv_AccFldVal(char *chr_p_acct,char *p_link_val,char *p_field_val,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca			  sqlca;
	char						  chr_h_field_val[40];
	short 					  i_field_val;
	char			  			  chr_l_buf[BUFFER_LEN];

	EXEC SQL VAR chr_h_field_val IS STRING;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered processtion MT_Rtv_AccFldVal \n",NULL,NULL);
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Account is %s \n",chr_p_acct);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
		
		memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
		sprintf(chr_l_buf,"Field name is %s \n",p_link_val);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
	}	

	memset(chr_h_field_val,APL_NULL_CHAR,sizeof(chr_h_field_val));
	
	sqlca.sqlcode = 0;

	if (strcmp(p_link_val, "mstacc") == 0)
	{

              	EXEC SQL SELECT CLN_MASTER  
		INTO :chr_h_field_val:i_field_val
		FROM MT_CLIENT
		WHERE CLN_CODE = RTRIM(:chr_p_acct);		
	}

	if (strcmp(p_link_val, "cubk") == 0)
	{
		EXEC SQL SELECT CLN_BRK_ALL
		INTO :chr_h_field_val:i_field_val
		FROM MT_CLIENT
		WHERE CLN_CODE= RTRIM(:chr_p_acct);
		/*WHERE client = RTRIM(:chr_p_acct);*/
	}
	
	if (strcmp(p_link_val, "orderac") == 0)
	{
		EXEC SQL SELECT CLN_ORD_CLT
		INTO :chr_h_field_val:i_field_val
		FROM MT_CLIENT
		WHERE CLN_CODE = RTRIM(:chr_p_acct);
	}
	
	if (strcmp(p_link_val, "billableflg") == 0)
	{
		EXEC SQL SELECT CLN_BILLABLEIND
		INTO :chr_h_field_val:i_field_val
		FROM MT_CLIENT
		WHERE CLN_CODE = RTRIM(:chr_p_acct);	
	}
	
	if (strcmp(p_link_val, "domicile") == 0)
	{
		EXEC SQL SELECT CLN_DOMICILE
		INTO :chr_h_field_val:i_field_val
		FROM MT_CLIENT
		WHERE CLN_CODE = RTRIM(:chr_p_acct);
	}
	
	if (strcmp(p_link_val, "spottrdflg") == 0)
	{
		EXEC SQL SELECT CLN_SPOT_DL_IND
		INTO :chr_h_field_val:i_field_val
		FROM MT_CLIENT
		WHERE CLN_CODE = RTRIM(:chr_p_acct);
	}
	
	if (strcmp(p_link_val, "canregflg") == 0)
	{
		EXEC SQL SELECT CLN_ALLOW_REGIND
		INTO :chr_h_field_val:i_field_val
		FROM MT_CLIENT
		WHERE CLN_CODE = RTRIM(:chr_p_acct);
	}
	
	if (strcmp(p_link_val, "isccflg") == 0)
	{
		EXEC SQL SELECT CLN_ISCC_IND
		INTO :chr_h_field_val:i_field_val
		FROM MT_CLIENT
		WHERE CLN_CODE = RTRIM(:chr_p_acct);
	}
	
	if (strcmp(p_link_val, "partialflg") == 0)
	{
		EXEC SQL SELECT CLN_PARTIAL_IND
		INTO :chr_h_field_val:i_field_val
		FROM MT_CLIENT
		WHERE CLN_CODE = RTRIM(:chr_p_acct);
	}
	
	if (strcmp(p_link_val, "access_stamp") == 0)
	{
		EXEC SQL SELECT ACCESS_STAMP 
		INTO :chr_h_field_val:i_field_val
		FROM MT_CLIENT
		WHERE CLN_CODE = RTRIM(:chr_p_acct);
	}
	
	if (strcmp(p_link_val, "cln_status") == 0)
	{
		EXEC SQL SELECT STATUS
		INTO :chr_h_field_val:i_field_val
		FROM MT_CLIENT
		WHERE CLN_CODE = RTRIM(:chr_p_acct);
	}
	
	if (strcmp(p_link_val, "ourtheir") == 0)
	{
		EXEC SQL SELECT CLN_OUR_THEIR_IND
		INTO :chr_h_field_val:i_field_val
		FROM MT_CLIENT
		WHERE CLN_CODE = RTRIM(:chr_p_acct);
	}
		
	if (strcmp(p_link_val, "fxsalesflg") == 0)
	{
		EXEC SQL SELECT CLN_FX_SELL_IND
		INTO :chr_h_field_val:i_field_val
		FROM MT_CLIENT
		WHERE CLN_CODE = RTRIM(:chr_p_acct);
	}

	if (strcmp(p_link_val, "fxpurchflg") == 0)
	{
		EXEC SQL SELECT CLN_FX_BUY_IND
		INTO :chr_h_field_val:i_field_val
		FROM MT_CLIENT
		WHERE CLN_CODE = RTRIM(:chr_p_acct);
	}
		

	if (strcmp(p_link_val, "ROWID") == 0)
	{
		EXEC SQL SELECT ROWID
		INTO :chr_h_field_val:i_field_val
		FROM MT_CLIENT
		WHERE CLN_CODE = RTRIM(:chr_p_acct)
		FOR UPDATE OF access_stamp;
	}

	if (strcmp(p_link_val, "FEROWID") == 0)
	{
		EXEC SQL SELECT ROWID
		INTO :chr_h_field_val:i_field_val
		FROM MT_CLIENT
		WHERE CLN_CODE = RTRIM(:chr_p_acct);
	}

	
	if (strcmp(p_link_val, "typeofacc") == 0)
	{

                EXEC SQL SELECT CLN_CLASS
		INTO :chr_h_field_val:i_field_val
		FROM MT_CLIENT
		WHERE CLN_CODE = RTRIM(:chr_p_acct);
	}

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"CLIENT",APL_NULL_STRING,APL_NULL_STRING)

	if (i_field_val == -1)
		strcpy((char *)p_field_val, APL_NULL_STRING);
	else
		strcpy((char *)p_field_val, chr_h_field_val);

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion MT_Rtv_AccFldVal \n",NULL,NULL);
		return(APL_SUCCESS);
	}
	
	RETURN_FAILURE :
	{
		APL_IF_DEBUG
			CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion MT_Rtv_AccFldVal \n",NULL,NULL);
		return(APL_FAILURE);
	}
}


/* Kouser - HDFCMT_001 - Client Master Maintenance - Added Function */

/*int Rtv_AccChldFldVal(char *chr_p_acct,int chr_seq_num,char *clt_chld_tab_name,char *p_link_val,char *p_field_val,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   struct sqlca                      			  sqlca;
        char                                              chr_h_field_val[40];
        short                                             i_field_val;
        char                                              chr_l_buf[BUFFER_LEN];

        EXEC SQL VAR chr_h_field_val IS STRING;

        #ifdef APL_THREADS
                APL_SET_CONTEXT
                EXEC SQL CONTEXT USE :my_ctx_local;
        #endif

        APL_DEBUG
        {
                CO_ProcMonitor(APL_OUT_FILE,"Entered processtion MT_Rtv_AccChldFldVal \n",NULL,NULL);
                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Account is %s \n",chr_p_acct);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);

                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Field name is %s \n",p_link_val); 
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
        }

        memset(chr_h_field_val,APL_NULL_CHAR,sizeof(chr_h_field_val));

        sqlca.sqlcode = 0;
      
        if (strcmp(clt_chld_tab_name,"MT_MSGADDRESS") == 0)
        { 
        if (strcmp(p_link_val, "ROWID") == 0)
             { 
                EXEC SQL SELECT ROWID 
                INTO :chr_h_field_val:i_field_val
                FROM MT_MSGADDRESS
                WHERE CLN_CODE = RTRIM(:chr_p_acct)
                AND CLN_ADDR_SEQ_NUM = RTRIM(:chr_seq_num)
                FOR UPDATE OF access_stamp; 
              }
                
        if (strcmp(p_link_val, "access_stamp") == 0)
            {    
                EXEC SQL SELECT ACCESS_STAMP 
                INTO :chr_h_field_val:i_field_val
                FROM MT_MSGADDRESS
                WHERE CLN_CODE = RTRIM(:chr_p_acct)
                AND CLN_ADDR_SEQ_NUM = RTRIM(:chr_seq_num);
           }
     }
      else if (strcmp(clt_chld_tab_name,"MT_CLI_EXCH_MAP") == 0)  
      {
        if (strcmp(p_link_val, "ROWID") == 0)
            {
                EXEC SQL SELECT ROWID 
                INTO :chr_h_field_val:i_field_val
                FROM MT_CLI_EXCH_MAP
                WHERE CLN_CODE = RTRIM(:chr_p_acct)
                AND CLN_ADDR_SEQ_NUM = RTRIM(:chr_seq_num)
                FOR UPDATE OF access_stamp; 
            } 
       
        if (strcmp(p_link_val, "access_stamp") == 0)
            { 
                EXEC SQL SELECT ACCESS_STAMP 
                INTO :chr_h_field_val:i_field_val
                FROM MT_CLI_EXCH_MAP
                WHERE CLN_CODE = RTRIM(:chr_p_acct)
                AND CLN_ADDR_SEQ_NUM = RTRIM(:chr_seq_num);
            } 
       }
      else if (strcmp(clt_chld_tab_name,"MT_CLI_DEPO_MAP") == 0)  
        {
        if (strcmp(p_link_val, "ROWID") == 0)
           {
                EXEC SQL SELECT ROWID 
                INTO :chr_h_field_val:i_field_val
                FROM MT_CLI_DEPO_MAP
                WHERE CLN_CODE = RTRIM(:chr_p_acct)
                AND CLN_ADDR_SEQ_NUM = RTRIM(:chr_seq_num)
                FOR UPDATE OF access_stamp; 
           } 
       if (strcmp(p_link_val, "ACCESS_STAMP") == 0)
           {
                EXEC SQL SELECT ACCESS_STAMP
                INTO :chr_h_field_val:i_field_val
                FROM MT_CLI_DEPO_MAP
                WHERE CLN_CODE = RTRIM(:chr_p_acct)
                AND CLN_ADDR_SEQ_NUM = RTRIM(:chr_seq_num);
            }
        }

     IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"CLIENT",APL_NULL_STRING,APL_NULL_STRING)

        if (i_field_val == -1)
                strcpy((char *)p_field_val, APL_NULL_STRING);
        else
                strcpy((char *)p_field_val, chr_h_field_val);

        APL_GOBACK_SUCCESS

        RETURN_SUCCESS :
        {
                APL_IF_DEBUG
                        CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion MT_Rtv_AccChldFldVal \n",NULL,NULL);
                return(APL_SUCCESS);
        }

        RETURN_FAILURE :
        {
                    APL_IF_DEBUG
                        CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion MT_Rtv_AccChldFldVal \n",NULL,NULL);
                return(APL_FAILURE);
        }
}*/


 /*int Rtv_AccRegFldVal(char *chr_p_acct,char *clt_chld_tab_name,char *p_link_val,char *p_field_val,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   struct sqlca                                           sqlca;
        char                                              chr_h_field_val[40];
        short                                             i_field_val;
        char                                              chr_l_buf[BUFFER_LEN];

        EXEC SQL VAR chr_h_field_val IS STRING;

        #ifdef APL_THREADS
                APL_SET_CONTEXT
                EXEC SQL CONTEXT USE :my_ctx_local;
        #endif

        APL_DEBUG
        {
                CO_ProcMonitor(APL_OUT_FILE,"Entered processtion MT_Rtv_AccRegFldVal \n",NULL,NULL);
                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Account is %s \n",chr_p_acct);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);

                memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
                sprintf(chr_l_buf,"Field name is %s \n",p_link_val);
                CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,NULL);
        }

        memset(chr_h_field_val,APL_NULL_CHAR,sizeof(chr_h_field_val));

        sqlca.sqlcode = 0;

          if (strcmp(clt_chld_tab_name,"MT_REGDETAILS") == 0)
           {
           if (strcmp(p_link_val, "ROWID") == 0)
           {
                    EXEC SQL SELECT ROWID
                    INTO :chr_h_field_val:i_field_val
                    FROM MT_REGDETAILS
                    WHERE CLN_CODE = RTRIM(:chr_p_acct)
                    FOR UPDATE OF access_stamp;
           }
 
          if (strcmp(p_link_val, "access_stamp") == 0)
           {
                     EXEC SQL SELECT ACCESS_STAMP
                     INTO :chr_h_field_val:i_field_val
                     FROM MT_REGDETAILS
                     WHERE CLN_CODE = RTRIM(:chr_p_acct);
            }
            } 

     IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"CLIENT",APL_NULL_STRING,APL_NULL_STRING)
            if (i_field_val == -1)
                   strcpy((char *)p_field_val, APL_NULL_STRING);
            else
                    strcpy((char *)p_field_val, chr_h_field_val);
   
            APL_GOBACK_SUCCESS
  
             RETURN_SUCCESS :
             {
                     APL_IF_DEBUG
                             CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion MT_Rtv_AccRegFldVal \n",NULL,NULL);
                     return(APL_SUCCESS);
            }
   
             RETURN_FAILURE :
            {
                      APL_IF_DEBUG

                             CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion MT_Rtv_AccRegFldVal\n",NULL,NULL);
                     return(APL_FAILURE);
             }
     }*/
           
