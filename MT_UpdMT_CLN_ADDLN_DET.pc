/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
*/
/*********************************************************************
 *
 * Module Name         :      Master Maintenance
 *
 * File Name           :      MT_UpdMT_CLN_ADDLN_DET.pc
 *
 * Description         :      This file contains functions for updating
 *                            Client Additional Details.
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author             Description       RFS No.
 * ---------   --------  ------------         -------------     ---------
 * 20/02/2006   1.0       Kouser Begum           New file        KB_001
 *
 *********************************************************************/


#include "CO_HostStructdef.h"

EXEC SQL INCLUDE SQLCA.H;




int MT_UpdMT_CLN_ADDLN_DET(MT_CLN_ADDLN_DET_STRUCT_H *p_mt_cln_addln_det_struct_h,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr) 
{
	/* Variable Declarations */
  MT_CLN_ADDLN_DET_STRUCT_I *l_mt_cln_addln_det_struct_i;

  struct sqlca sqlca;
  #define  NO_OF_PRIMARY_KEYS 1
  char chr_acc_stamp_compare[APL_DATE_LEN] = APL_NULL_STRING;
  char chr_status_compare[APL_STATUS_LEN] = APL_NULL_STRING;
  char chr_sys_access_stamp[APL_DATE_LEN] = APL_NULL_STRING;
  short p_i_maker, p_i_makerdt, p_i_checker, p_i_checkerdt, p_i_access_stamp;
  short p_i_access_stamp_compare;
  short p_i_status = 0;
  int int_error_flag = APL_SUCCESS;
  int int_l_rowexists = 0;
   char  *l_key_codes[2];
   char  *l_key_values[2];
   char  chr_l_table_name[50] = APL_NULL_STRING;
	  char  chr_l_field_val[40] = APL_NULL_STRING;
   /*Added by usman for CSGL API call - start*/
   int l_retval = 0;
   char keyvalue[50]=APL_NULL_STRING;
   char l_buf[1000] = APL_NULL_STRING;
   short    int_cond_exists     = 0;
   char chr_l_param;
   int l_exstind = 0;
   int valid_cpa_cnt =0;

   /*Added by usman for CSGL API call - end*/

		int	int_retval = APL_SUCCESS;
#ifdef APL_THREADS
    APL_SET_CONTEXT
    EXEC SQL CONTEXT USE :my_ctx_local;
#endif

	 APL_FUNCTION_ENTER(APL_OUT_FILE)

  l_mt_cln_addln_det_struct_i=(MT_CLN_ADDLN_DET_STRUCT_I*)calloc(1,sizeof(MT_CLN_ADDLN_DET_STRUCT_I));

  APL_MALLOC_FAIL(l_mt_cln_addln_det_struct_i)

  p_i_maker =0;
  p_i_makerdt =0;
  p_i_checker =0;
  p_i_checkerdt =0;
  p_i_access_stamp =0;
  p_i_access_stamp_compare =0;

 if (!strlen(p_mt_cln_addln_det_struct_h->h_cln_code)) l_mt_cln_addln_det_struct_i->i_cln_code =-1;
     else l_mt_cln_addln_det_struct_i->i_cln_code =0;

 if (!strlen(p_mt_cln_addln_det_struct_h->h_acc_opn_dt)) l_mt_cln_addln_det_struct_i->i_acc_opn_dt =-1;
     else l_mt_cln_addln_det_struct_i->i_acc_opn_dt =0;


 if (!strlen(p_mt_cln_addln_det_struct_h->h_acc_actv_dt)) l_mt_cln_addln_det_struct_i->i_acc_actv_dt =-1;
     else l_mt_cln_addln_det_struct_i->i_acc_actv_dt =0;


 if (!strlen(p_mt_cln_addln_det_struct_h->h_acc_cls_dt)) l_mt_cln_addln_det_struct_i->i_acc_cls_dt =-1;
     else l_mt_cln_addln_det_struct_i->i_acc_cls_dt =0;


 if (!strlen(p_mt_cln_addln_det_struct_h->h_cert_pub_acc)) l_mt_cln_addln_det_struct_i->i_cert_pub_acc =-1;
     else l_mt_cln_addln_det_struct_i->i_cert_pub_acc =0;

	/*CHITRLEKHA Client Additional Details STARTS*/
if (!strlen(p_mt_cln_addln_det_struct_h->h_sec_cert_pub_acc)) l_mt_cln_addln_det_struct_i->i_sec_cert_pub_acc =-1;
	else l_mt_cln_addln_det_struct_i->i_sec_cert_pub_acc =0;
	
if (!strlen(p_mt_cln_addln_det_struct_h->h_effective_dt)) l_mt_cln_addln_det_struct_i->i_effective_dt =-1;
	else l_mt_cln_addln_det_struct_i->i_effective_dt =0;
	
if (!strlen(p_mt_cln_addln_det_struct_h->h_fatca1)) l_mt_cln_addln_det_struct_i->i_fatca1 =-1;
	else l_mt_cln_addln_det_struct_i->i_fatca1 =0;
	
if (!strlen(p_mt_cln_addln_det_struct_h->h_fatca2)) l_mt_cln_addln_det_struct_i->i_fatca2 =-1;
	else l_mt_cln_addln_det_struct_i->i_fatca2 =0;
	
if (!strlen(p_mt_cln_addln_det_struct_h->h_fatca3)) l_mt_cln_addln_det_struct_i->i_fatca3 =-1;
	else l_mt_cln_addln_det_struct_i->i_fatca3 =0;
	 /*CHITRLEKHA Client Additional Details ENDS*/
	 /*PANITH CSGL STARTS*/
if (!strlen(p_mt_cln_addln_det_struct_h->h_lei_number)) l_mt_cln_addln_det_struct_i->i_lei_number =-1;
	else l_mt_cln_addln_det_struct_i->i_lei_number =0;
if (!strlen(p_mt_cln_addln_det_struct_h->h_ckyc_number)) l_mt_cln_addln_det_struct_i->i_ckyc_number =-1;
	else l_mt_cln_addln_det_struct_i->i_ckyc_number =0;
if (!strlen(p_mt_cln_addln_det_struct_h->h_lei_date)) l_mt_cln_addln_det_struct_i->i_lei_date =-1;
	else l_mt_cln_addln_det_struct_i->i_lei_date =0;
if (!strlen(p_mt_cln_addln_det_struct_h->h_lei_exp_date)) l_mt_cln_addln_det_struct_i->i_lei_exp_date =-1;
	else l_mt_cln_addln_det_struct_i->i_lei_exp_date =0;
	/*PANITH CSGL ENDS*/
 if (!strlen(p_mt_cln_addln_det_struct_h->h_fund_acc_mgr)) l_mt_cln_addln_det_struct_i->i_fund_acc_mgr =-1;
     else l_mt_cln_addln_det_struct_i->i_fund_acc_mgr =0;


 if (!strlen(p_mt_cln_addln_det_struct_h->h_spf_flg)) l_mt_cln_addln_det_struct_i->i_spf_flg =-1;
     else l_mt_cln_addln_det_struct_i->i_spf_flg =0;

 if (!strlen(p_mt_cln_addln_det_struct_h->h_spf_det)) l_mt_cln_addln_det_struct_i->i_spf_det=-1;
     else l_mt_cln_addln_det_struct_i->i_spf_det =0;

 if (!strlen(p_mt_cln_addln_det_struct_h->h_access_stamp)) l_mt_cln_addln_det_struct_i->i_access_stamp =-1;
     else l_mt_cln_addln_det_struct_i->i_access_stamp =0;

 if (!strlen(p_mt_cln_addln_det_struct_h->h_maker)) l_mt_cln_addln_det_struct_i->i_maker =-1;
     else l_mt_cln_addln_det_struct_i->i_maker =0;

 if (!strlen(p_mt_cln_addln_det_struct_h->h_maker_dt)) l_mt_cln_addln_det_struct_i->i_maker_dt =-1;
     else l_mt_cln_addln_det_struct_i->i_maker_dt =0;

 if (!strlen(p_mt_cln_addln_det_struct_h->h_checker)) l_mt_cln_addln_det_struct_i->i_checker =-1;
     else l_mt_cln_addln_det_struct_i->i_checker =0;


 if (!strlen(p_mt_cln_addln_det_struct_h->h_checker_dt)) l_mt_cln_addln_det_struct_i->i_checker_dt =-1;
     else l_mt_cln_addln_det_struct_i->i_checker_dt =0;


 if (!strlen(p_mt_cln_addln_det_struct_h->h_status)) l_mt_cln_addln_det_struct_i->i_status =-1;
     else l_mt_cln_addln_det_struct_i->i_status =0;

 printf("Value of status  begin==%s\n",p_mt_cln_addln_det_struct_h->h_status);


 if(CO_RtvSysDtTime(chr_sys_access_stamp,l_debug_info_ptr) !=APL_SUCCESS)
	{
		APL_GOBACK_FAIL
	}
/* Added by Ram for Upload validation Starts */

   
if(strcmp(p_intl_env_data_struct_h->h_process, "U") == 0)
{
 if ((!strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_INPUT)) || (!strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_MODIFY)))
	{
		if (strlen(p_mt_cln_addln_det_struct_h->h_cert_pub_acc) != 0)
		{
			EXEC SQL SELECT COUNT(*) INTO :valid_cpa_cnt FROM MT_PARTY WHERE STATUS='AA' AND PTY_TYPE='E' 
			AND INSTR(PTY_CODE,:p_mt_cln_addln_det_struct_h->h_cert_pub_acc)>0;

			IS_ANY_ORA_ERROR;

			if (valid_cpa_cnt == 0)
			{

				CO_InsertErr(  l_debug_info_ptr,
                                    NOT_VALID_PRIMARY_CPA,  
                                     APL_NULL_STRING,
                                     APL_NULL_STRING,
                                    APL_NULL_STRING,
                                    __LINE__,
                                   __FILE__);	
                         APL_GOBACK_FAIL
				
			}


		}
		if (strlen(p_mt_cln_addln_det_struct_h->h_sec_cert_pub_acc) != 0)
		{
			EXEC SQL SELECT COUNT(*) INTO :valid_cpa_cnt FROM MT_PARTY WHERE STATUS='AA' AND PTY_TYPE='E' 
			AND INSTR(PTY_CODE,:p_mt_cln_addln_det_struct_h->h_sec_cert_pub_acc)>0;

			IS_ANY_ORA_ERROR;

			if (valid_cpa_cnt == 0)
			{
				if (CO_InsertErr
				(l_debug_info_ptr,
				NOT_VALID_SECONDARY_CPA, 
				APL_NULL_STRING,
				APL_NULL_STRING,
				APL_NULL_STRING,
				__LINE__,
				__FILE__
				) != APL_SUCCESS)
				APL_GOBACK_FAIL
				APL_GOBACK_FAIL
			}


		}
		if (strlen(p_mt_cln_addln_det_struct_h->h_fund_acc_mgr) != 0)
		{
			EXEC SQL SELECT COUNT(*) INTO :valid_cpa_cnt FROM MT_PARTY WHERE STATUS='AA' AND PTY_TYPE='F' 
			AND INSTR(PTY_CODE,:p_mt_cln_addln_det_struct_h->h_fund_acc_mgr)>0;

			IS_ANY_ORA_ERROR;

			if (valid_cpa_cnt == 0)
			{
				if (CO_InsertErr
				(l_debug_info_ptr,
				NOT_VALID_FUNDACC_MNGR, 
				APL_NULL_STRING,
				APL_NULL_STRING,
				APL_NULL_STRING,
				__LINE__,
				__FILE__
				) != APL_SUCCESS)
				APL_GOBACK_FAIL
				APL_GOBACK_FAIL
			}


		}


	}
}

/* Added by Ram for Upload validation Ends */
	
 if (!strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_INPUT))
	{

		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered Input of Function MT_UpdMT_CLN_ADDLN_DET\n",NULL,p_intl_env_data_struct_h);
 	}

        /*Added by Ram for Data Patch FSD Starts*/
		
        if(strcmp(p_intl_env_data_struct_h->h_process, "U") == 0)
		{
			strcpy(p_mt_cln_addln_det_struct_h->h_maker,"GFU");
				l_mt_cln_addln_det_struct_i->i_maker=0;
			strcpy(p_mt_cln_addln_det_struct_h->h_maker_dt,chr_sys_access_stamp);
				l_mt_cln_addln_det_struct_i->i_maker_dt=0;
			strcpy(p_mt_cln_addln_det_struct_h->h_access_stamp,chr_sys_access_stamp);
				l_mt_cln_addln_det_struct_i->i_access_stamp =0;
			strcpy(p_mt_cln_addln_det_struct_h->h_checker,p_intl_env_data_struct_h->usr);
	    		l_mt_cln_addln_det_struct_i->i_checker=0;
  	    	strcpy(p_mt_cln_addln_det_struct_h->h_checker_dt,chr_sys_access_stamp);
	    		l_mt_cln_addln_det_struct_i->i_checker_dt=0;
			strcpy(p_mt_cln_addln_det_struct_h->h_status,STATUS_AUTH);
	    		l_mt_cln_addln_det_struct_i->i_status =0;

		}
        else
		{	

		strcpy(p_mt_cln_addln_det_struct_h->h_status,STATUS_UAUTH);
    l_mt_cln_addln_det_struct_i->i_status =0;
   	strcpy(p_mt_cln_addln_det_struct_h->h_maker,p_intl_env_data_struct_h->usr);
		l_mt_cln_addln_det_struct_i->i_maker=0;
  	strcpy(p_mt_cln_addln_det_struct_h->h_maker_dt,chr_sys_access_stamp);
		l_mt_cln_addln_det_struct_i->i_maker_dt=0;
		strcpy(p_mt_cln_addln_det_struct_h->h_access_stamp,chr_sys_access_stamp);
		l_mt_cln_addln_det_struct_i->i_access_stamp =0;
        }
			/*Added by Ram for Data Patch FSD Ends*/
    /*printf("Tolerance Value ---|%lf|\n",p_mt_cln_addln_det_struct_h->h_tolerance_limit);*/
		EXEC SQL INSERT INTO MT_CLN_ADDLN_DET VALUES (:p_mt_cln_addln_det_struct_h:l_mt_cln_addln_det_struct_i);

		IS_ANY_ORA_ERROR_AND_DUPLICATE(MAP_DET_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
		
		if(strcmp(p_intl_env_data_struct_h->h_process, "U") == 0)
		{	
	
  	        if((!strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_INPUT)) || (!strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_MODIFY)))
			{
		/*Added by Ram for CSGL API call for Upload  - START*/
			
				CO_Chk_CntryEnabled("API_CONSUMER","MT_CLN_ADDLN_DET",&int_cond_exists,l_debug_info_ptr);
                                
                APL_IF_DEBUG
                {
                    printf("API cntry condition = |%d|\n",int_cond_exists);
                }
                
                if(int_cond_exists>0)
			    {
					EXEC SQL SELECT GETCLIENTPARAMBYID('CSGL_CLIENT',:p_mt_cln_addln_det_struct_h->h_cln_code) INTO :chr_l_param FROM DUAL;
					IS_ANY_ORA_ERROR
					
					if(chr_l_param == 'Y')
					{
						EXEC SQL SELECT COUNT(1) INTO :l_exstind FROM MT_CLIENT_CSGL WHERE CUST_CODE = :p_mt_cln_addln_det_struct_h->h_cln_code;
						IS_ANY_ORA_ERROR
						if(l_exstind == 1)
						{
							strcpy(keyvalue,"M.CLN_CODE=");
							strcat(keyvalue,p_mt_cln_addln_det_struct_h->h_cln_code);
				
							l_retval=callCSGLAPI(p_intl_env_data_struct_h->usr, "MT_CLIENTM", keyvalue);
							APL_IF_DEBUG
							{
								if(l_retval == 0)
								{
									CO_ProcMonitor(APL_OUT_FILE, "CSGL_API_call.ksh Executed Successfully\n",NULL,p_intl_env_data_struct_h);
								}
								else
								{
									CO_ProcMonitor(APL_OUT_FILE, "CSGL_API_call.ksh Executed UnSuccessfully\n",NULL,p_intl_env_data_struct_h);
								}
							}
						}
					}     
				}
				
			}	
			/*Added by Ram for CSGL API call for Upload  - END*/
		}
		
		
		
		
	}
	else
	{
	l_key_codes[0]="CLN_CODE";
	l_key_codes[1]=APL_NULL_STRING;
	/*l_key_codes[NO_OF_PRIMARY_KEYS + 1]=APL_NULL_STRING;*/
	
	l_key_values[0]= p_mt_cln_addln_det_struct_h -> h_cln_code;
	l_key_values[1] = APL_NULL_STRING;
	/*l_key_values[NO_OF_PRIMARY_KEYS + 1] = APL_NULL_STRING;*/

		
   strcpy(chr_l_table_name,"MT_CLN_ADDLN_DET");

    int_retval = CR_Rtv_MastChldChrVal( l_key_codes,
                                        l_key_values,
                                        chr_l_table_name,
                                        "ACCESS_STAMP",
                                        chr_l_field_val,
                                        l_debug_info_ptr);

    if (int_retval != APL_SUCCESS)
         APL_GOBACK_FAIL

		strcpy(chr_acc_stamp_compare,chr_l_field_val);
    
		int_retval = CR_Rtv_MastChldChrVal( l_key_codes,
                                        l_key_values,
                                        chr_l_table_name,
                                        "STATUS",
                                        chr_l_field_val,
                                        l_debug_info_ptr);

    if (int_retval != APL_SUCCESS)
         APL_GOBACK_FAIL

		strcpy(chr_status_compare,chr_l_field_val);
	}

 if (!strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_MODIFY))
	{
  	p_i_checker =-1;
  	p_i_checkerdt =-1;
		strcpy(p_mt_cln_addln_det_struct_h->h_checker,APL_NULL_STRING);
		strcpy(p_mt_cln_addln_det_struct_h->h_checker_dt,APL_NULL_STRING);

		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered modify of FunctionMT_UpdMT_CLN_ADDLN_DET\n",NULL,p_intl_env_data_struct_h);
 	}


       	 if(strcmp(p_intl_env_data_struct_h->h_process, "U") == 0)
		{
		   strcpy(p_mt_cln_addln_det_struct_h->h_maker,"GFU");
				l_mt_cln_addln_det_struct_i->i_maker=0;
			strcpy(p_mt_cln_addln_det_struct_h->h_maker_dt,chr_sys_access_stamp);
				l_mt_cln_addln_det_struct_i->i_maker_dt=0;
			strcpy(p_mt_cln_addln_det_struct_h->h_access_stamp,chr_sys_access_stamp);
				l_mt_cln_addln_det_struct_i->i_access_stamp =0;
			strcpy(p_mt_cln_addln_det_struct_h->h_checker,p_intl_env_data_struct_h->usr);
	    		l_mt_cln_addln_det_struct_i->i_checker=0;
  	    	strcpy(p_mt_cln_addln_det_struct_h->h_checker_dt,chr_sys_access_stamp);
	    		l_mt_cln_addln_det_struct_i->i_checker_dt=0;
			strcpy(p_mt_cln_addln_det_struct_h->h_status,STATUS_AUTH);
	    		l_mt_cln_addln_det_struct_i->i_status =0;
				
				EXEC SQL UPDATE MT_CLN_ADDLN_DET  SET 
              ACC_OPN_DT =NVL(:p_mt_cln_addln_det_struct_h->h_acc_opn_dt:l_mt_cln_addln_det_struct_i->i_acc_opn_dt,ACC_OPN_DT),
              ACC_ACTV_DT = NVL(:p_mt_cln_addln_det_struct_h->h_acc_actv_dt:l_mt_cln_addln_det_struct_i->i_acc_actv_dt,ACC_ACTV_DT),
              ACC_CLS_DT = NVL(:p_mt_cln_addln_det_struct_h->h_acc_cls_dt:l_mt_cln_addln_det_struct_i->i_acc_cls_dt,ACC_CLS_DT),
              CERT_PUB_ACC = NVL(:p_mt_cln_addln_det_struct_h->h_cert_pub_acc:l_mt_cln_addln_det_struct_i->i_cert_pub_acc,CERT_PUB_ACC),
              FUND_ACC_MGR = NVL(:p_mt_cln_addln_det_struct_h->h_fund_acc_mgr:l_mt_cln_addln_det_struct_i->i_fund_acc_mgr,CERT_PUB_ACC),
              SPF_FLG = NVL(:p_mt_cln_addln_det_struct_h->h_spf_flg:l_mt_cln_addln_det_struct_i->i_spf_flg,SPF_FLG),
              SPF_DET = NVL(:p_mt_cln_addln_det_struct_h->h_spf_det:l_mt_cln_addln_det_struct_i->i_spf_det,SPF_DET),
              ACCESS_STAMP =:p_mt_cln_addln_det_struct_h->h_access_stamp:l_mt_cln_addln_det_struct_i->i_access_stamp,
            	MAKER =:p_mt_cln_addln_det_struct_h->h_maker:l_mt_cln_addln_det_struct_i->i_maker,
					MAKER_DT =:p_mt_cln_addln_det_struct_h->h_maker_dt:l_mt_cln_addln_det_struct_i->i_maker_dt,
					CHECKER =:p_mt_cln_addln_det_struct_h->h_checker:l_mt_cln_addln_det_struct_i->i_checker,
					CHECKER_DT =:p_mt_cln_addln_det_struct_h->h_checker_dt:l_mt_cln_addln_det_struct_i->i_checker_dt,
            	STATUS =:p_mt_cln_addln_det_struct_h->h_status:l_mt_cln_addln_det_struct_i->i_status,
             TOLERANCE_LIMIT = NVL(:p_mt_cln_addln_det_struct_h->h_tolerance_limit:l_mt_cln_addln_det_struct_i->i_tolerance_limit,TOLERANCE_LIMIT),
			 EFFECTIVE_DT = NVL(:p_mt_cln_addln_det_struct_h -> h_effective_dt:l_mt_cln_addln_det_struct_i->i_effective_dt,EFFECTIVE_DT),
			 SEC_CERT_PUB_ACC = NVL(:p_mt_cln_addln_det_struct_h->h_sec_cert_pub_acc:l_mt_cln_addln_det_struct_i->i_sec_cert_pub_acc,EFFECTIVE_DT),
			 FATCA1 = NVL(:p_mt_cln_addln_det_struct_h->h_fatca1:l_mt_cln_addln_det_struct_i->i_fatca1,FATCA1),
			 FATCA2 = NVL(:p_mt_cln_addln_det_struct_h->h_fatca2:l_mt_cln_addln_det_struct_i->i_fatca2,FATCA2),
			 FATCA3 = NVL(:p_mt_cln_addln_det_struct_h->h_fatca3:l_mt_cln_addln_det_struct_i->i_fatca3,FATCA3),
			 LEI_NUMBER = NVL(:p_mt_cln_addln_det_struct_h->h_lei_number:l_mt_cln_addln_det_struct_i->i_lei_number,LEI_NUMBER),
			 CKYC_NUMBER = NVL(:p_mt_cln_addln_det_struct_h->h_ckyc_number:l_mt_cln_addln_det_struct_i->i_ckyc_number,CKYC_NUMBER),
			 LEI_DATE = NVL(:p_mt_cln_addln_det_struct_h->h_lei_date:l_mt_cln_addln_det_struct_i->i_lei_date,LEI_DATE),
			 LEI_EXP_DATE = NVL(:p_mt_cln_addln_det_struct_h->h_lei_exp_date:l_mt_cln_addln_det_struct_i->i_lei_exp_date,LEI_EXP_DATE)
					WHERE CLN_CODE =:p_mt_cln_addln_det_struct_h->h_cln_code;
              
					IS_ANY_ORA_ERROR;
				
				
		}
        else
		{	
	   if (!strcmp(p_mt_cln_addln_det_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   {
		   
	    
			strcpy(p_mt_cln_addln_det_struct_h->h_access_stamp,chr_sys_access_stamp);
			l_mt_cln_addln_det_struct_i->i_access_stamp =0;
       strcpy(p_mt_cln_addln_det_struct_h->h_status,STATUS_UAUTH);
			l_mt_cln_addln_det_struct_i->i_status =0;
    printf("Tolerance Value ---|%lf|\n",p_mt_cln_addln_det_struct_h->h_tolerance_limit);

			EXEC SQL UPDATE MT_CLN_ADDLN_DET  SET 
              ACC_OPN_DT =:p_mt_cln_addln_det_struct_h->h_acc_opn_dt:l_mt_cln_addln_det_struct_i->i_acc_opn_dt,
              ACC_ACTV_DT =:p_mt_cln_addln_det_struct_h->h_acc_actv_dt:l_mt_cln_addln_det_struct_i->i_acc_actv_dt,
              ACC_CLS_DT =:p_mt_cln_addln_det_struct_h->h_acc_cls_dt:l_mt_cln_addln_det_struct_i->i_acc_cls_dt,
              CERT_PUB_ACC =:p_mt_cln_addln_det_struct_h->h_cert_pub_acc:l_mt_cln_addln_det_struct_i->i_cert_pub_acc,
              FUND_ACC_MGR =:p_mt_cln_addln_det_struct_h->h_fund_acc_mgr:l_mt_cln_addln_det_struct_i->i_fund_acc_mgr,
              SPF_FLG =:p_mt_cln_addln_det_struct_h->h_spf_flg:l_mt_cln_addln_det_struct_i->i_spf_flg,
              SPF_DET =:p_mt_cln_addln_det_struct_h->h_spf_det:l_mt_cln_addln_det_struct_i->i_spf_det,
              ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp,
            	MAKER =:p_intl_env_data_struct_h->usr:p_i_maker,
					MAKER_DT =:chr_sys_access_stamp:p_i_makerdt,
					CHECKER =:p_mt_cln_addln_det_struct_h->h_checker:p_i_checker,
					CHECKER_DT =:p_mt_cln_addln_det_struct_h->h_checker:p_i_checkerdt,
            	STATUS =:p_mt_cln_addln_det_struct_h->h_status:l_mt_cln_addln_det_struct_i->i_status,
             TOLERANCE_LIMIT = :p_mt_cln_addln_det_struct_h->h_tolerance_limit:l_mt_cln_addln_det_struct_i->i_tolerance_limit,
			 EFFECTIVE_DT = :p_mt_cln_addln_det_struct_h -> h_effective_dt:l_mt_cln_addln_det_struct_i->i_effective_dt,
			 SEC_CERT_PUB_ACC =:p_mt_cln_addln_det_struct_h->h_sec_cert_pub_acc:l_mt_cln_addln_det_struct_i->i_sec_cert_pub_acc,
			 FATCA1 =:p_mt_cln_addln_det_struct_h->h_fatca1:l_mt_cln_addln_det_struct_i->i_fatca1,
			 FATCA2 =:p_mt_cln_addln_det_struct_h->h_fatca2:l_mt_cln_addln_det_struct_i->i_fatca2,
			 FATCA3 =:p_mt_cln_addln_det_struct_h->h_fatca3:l_mt_cln_addln_det_struct_i->i_fatca3,
			 LEI_NUMBER =:p_mt_cln_addln_det_struct_h->h_lei_number:l_mt_cln_addln_det_struct_i->i_lei_number,
			 CKYC_NUMBER =:p_mt_cln_addln_det_struct_h->h_ckyc_number:l_mt_cln_addln_det_struct_i->i_ckyc_number,
			 LEI_DATE =:p_mt_cln_addln_det_struct_h->h_lei_date:l_mt_cln_addln_det_struct_i->i_lei_date,
			 LEI_EXP_DATE =:p_mt_cln_addln_det_struct_h->h_lei_exp_date:l_mt_cln_addln_det_struct_i->i_lei_exp_date
					WHERE CLN_CODE =:p_mt_cln_addln_det_struct_h->h_cln_code;
              
					IS_ANY_ORA_ERROR;	

	   }
		else 
	   {
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   } 

	}
	   }
		 
	

 if (!strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_AUTHORISE))
	{

		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered authorize of Function MT_UpdMT_CLN_ADDLN_DET\n",NULL,p_intl_env_data_struct_h);
 	}

		if (!strcmp(p_mt_cln_addln_det_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   {
			printf("Value of Status strt ==|%s|\n",p_mt_cln_addln_det_struct_h->h_status);
			printf("Value of Status Macro ==|%s|\n",STATUS_DEL_UAUTH);
   		if(strcmp(p_mt_cln_addln_det_struct_h->h_status,STATUS_DEL_UAUTH))
	    	{
				printf("Insdie Other than DU Status\n");
	    		strcpy(p_mt_cln_addln_det_struct_h->h_access_stamp,chr_sys_access_stamp);
	    		l_mt_cln_addln_det_struct_i->i_access_stamp =0;
   	    	strcpy(p_mt_cln_addln_det_struct_h->h_checker,p_intl_env_data_struct_h->usr);
	    		l_mt_cln_addln_det_struct_i->i_checker=0;
  	    	strcpy(p_mt_cln_addln_det_struct_h->h_checker_dt,chr_sys_access_stamp);
	    		l_mt_cln_addln_det_struct_i->i_checker_dt=0;
          strcpy(p_mt_cln_addln_det_struct_h->h_status,STATUS_AUTH);
	    		l_mt_cln_addln_det_struct_i->i_status =0;

	    		EXEC SQL UPDATE MT_CLN_ADDLN_DET SET 
           	CHECKER =:p_intl_env_data_struct_h->usr:p_i_checker,
            	CHECKER_DT =:chr_sys_access_stamp:p_i_access_stamp,
					ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp,
            	STATUS =:p_mt_cln_addln_det_struct_h->h_status:l_mt_cln_addln_det_struct_i->i_status
					WHERE CLN_CODE =:p_mt_cln_addln_det_struct_h->h_cln_code;

				IS_ANY_ORA_ERROR;	
			/*Added by usman for CSGL API call - START*/
			
				CO_Chk_CntryEnabled("API_CONSUMER","MT_CLN_ADDLN_DET",&int_cond_exists,l_debug_info_ptr);
                                
                APL_IF_DEBUG
                {
                    printf("API cntry condition = |%d|\n",int_cond_exists);
                }
                
                if(int_cond_exists>0)
			    {
					EXEC SQL SELECT GETCLIENTPARAMBYID('CSGL_CLIENT',:p_mt_cln_addln_det_struct_h->h_cln_code) INTO :chr_l_param FROM DUAL;
					IS_ANY_ORA_ERROR
					
					if(chr_l_param == 'Y')
					{
						EXEC SQL SELECT COUNT(1) INTO :l_exstind FROM MT_CLIENT_CSGL WHERE CUST_CODE = :p_mt_cln_addln_det_struct_h->h_cln_code;
						IS_ANY_ORA_ERROR
						if(l_exstind == 1)
						{
							strcpy(keyvalue,"M.CLN_CODE=");
							strcat(keyvalue,p_mt_cln_addln_det_struct_h->h_cln_code);
				
							l_retval=callCSGLAPI(p_intl_env_data_struct_h->usr, "MT_CLIENTM", keyvalue);
							APL_IF_DEBUG
							{
								if(l_retval == 0)
								{
									CO_ProcMonitor(APL_OUT_FILE, "CSGL_API_call.ksh Executed Successfully\n",NULL,p_intl_env_data_struct_h);
								}
								else
								{
									CO_ProcMonitor(APL_OUT_FILE, "CSGL_API_call.ksh Executed UnSuccessfully\n",NULL,p_intl_env_data_struct_h);
								}
							}
						}
					}     
				}
			/*Added by usman for CSGL API call - END*/	
			}
   	   else  
	    	{
				printf("Inside the Delete Statement\n");
	    		EXEC SQL DELETE MT_CLN_ADDLN_DET 
				WHERE CLN_CODE =:p_mt_cln_addln_det_struct_h->h_cln_code;
          
			   IS_ANY_ORA_ERROR
	    	}
	   }
		else 
	   {
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   } 
	}

  if (!strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_RESET))
	{

		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered reset of Function MT_UpdMT_CLN_ADDLN_DET\n",NULL,p_intl_env_data_struct_h);
 	}

		if (!strcmp(p_mt_cln_addln_det_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   {
   		if(!strcmp(p_mt_cln_addln_det_struct_h->h_status,STATUS_DEL_UAUTH))
	    	{
	    		strcpy(p_mt_cln_addln_det_struct_h->h_access_stamp,chr_sys_access_stamp);
	    		l_mt_cln_addln_det_struct_i->i_access_stamp =0;
   	    	strcpy(p_mt_cln_addln_det_struct_h->h_checker,p_intl_env_data_struct_h->usr);
	    		l_mt_cln_addln_det_struct_i->i_checker=0;
  	    	strcpy(p_mt_cln_addln_det_struct_h->h_checker_dt,chr_sys_access_stamp);
	    		l_mt_cln_addln_det_struct_i->i_checker_dt=0;
          strcpy(p_mt_cln_addln_det_struct_h->h_status,STATUS_AUTH);
	    		l_mt_cln_addln_det_struct_i->i_status =0;

	    		EXEC SQL UPDATE MT_CLN_ADDLN_DET SET 
           	CHECKER =:p_intl_env_data_struct_h->usr:p_i_checker,
            	CHECKER_DT =:chr_sys_access_stamp:p_i_access_stamp,
					ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp,
            	STATUS =:p_mt_cln_addln_det_struct_h->h_status:l_mt_cln_addln_det_struct_i->i_status
				      WHERE CLN_CODE =:p_mt_cln_addln_det_struct_h->h_cln_code;

				IS_ANY_ORA_ERROR;	
			}
	   }
		else 
	   {
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   } 
	}

 if (!strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_DELETE))
	{
  	p_i_checker =-1;
  	p_i_checkerdt =-1;
		strcpy(p_mt_cln_addln_det_struct_h->h_checker,APL_NULL_STRING);
		strcpy(p_mt_cln_addln_det_struct_h->h_checker_dt,APL_NULL_STRING);

		APL_IF_DEBUG
 	{
  		CO_ProcMonitor(APL_OUT_FILE, "Entered delete of Function MT_UpdMT_CLN_ADDLN_DET\n",NULL,p_intl_env_data_struct_h);
 	}

       if(strcmp(p_intl_env_data_struct_h->h_process, "U") == 0)
	   {
				EXEC SQL DELETE FROM MT_CLN_ADDLN_DET
				WHERE CLN_CODE=:p_mt_cln_addln_det_struct_h->h_cln_code;
				
				IS_ANY_ORA_ERROR;
	   }
       else
	   {	   

	   if (!strcmp(p_mt_cln_addln_det_struct_h->h_access_stamp,chr_acc_stamp_compare))
	   {
			strcpy(p_mt_cln_addln_det_struct_h->h_access_stamp,chr_sys_access_stamp);
			l_mt_cln_addln_det_struct_i->i_access_stamp =0;
         strcpy(p_mt_cln_addln_det_struct_h->h_status,STATUS_DEL_UAUTH);
			l_mt_cln_addln_det_struct_i->i_status =0;

			EXEC SQL UPDATE MT_CLN_ADDLN_DET SET 
            	MAKER =:p_intl_env_data_struct_h->usr:p_i_maker,
					MAKER_DT =:chr_sys_access_stamp:p_i_makerdt,
					CHECKER =:p_mt_cln_addln_det_struct_h->h_checker:p_i_checker,
					CHECKER_DT =:p_mt_cln_addln_det_struct_h->h_checker_dt:p_i_checkerdt,
            	STATUS =:p_mt_cln_addln_det_struct_h->h_status:l_mt_cln_addln_det_struct_i->i_status,
					ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp
					WHERE CLN_CODE =:p_mt_cln_addln_det_struct_h->h_cln_code;
              
					IS_ANY_ORA_ERROR;	
		   
	   }
		else 
	   {
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   } 
	}

	}


 if (int_error_flag == APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}
 APL_GOBACK_SUCCESS

 RETURN_SUCCESS :
	{
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
		free(l_mt_cln_addln_det_struct_i);
		return(APL_SUCCESS);
	}
  RETURN_FAILURE :
	{
 	APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
		free(l_mt_cln_addln_det_struct_i);
		return(APL_FAILURE);
	}

}

