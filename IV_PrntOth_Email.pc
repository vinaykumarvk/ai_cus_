


#include<string.h>
#include "IV_Control_A.h"

EXEC SQL INCLUDE SQLCA.H;

int IV_Proc_PrnOthEMINV(	FILE *bill,
					FILE *fl_userlog,
			     	char *chr_p_billdt,
             	char *chr_p_client,
	     			IV_CLIENTSETUP_STRUCT l_iv_clt_setup_struct,	
	     			char p_mastsub,
	     			double *p_tototh,
					int *int_currpos,
	    		 	DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

struct sqlca sqlca;
char *y,*v,*a,*b;
double OthCharge =0.0;
IV_SERV_MAST_STRUCT l_ivservmast_struct;
IV_SERV_OTH_STRUCT l_iv_serv_oth_structb;
PRO_SGENSTAT_STRUCT l_pro_sgenstat_struct;
IV_SERVICE_CHRG_STRUCT l_iv_service_chrg_struct;
SYS_IVCONTROLPARAM_STRUCT     l_sys_ivcntl_param_struct;
IV_CLIENTSETUP_STRUCT l_iv_clientsetup_struct;  				
IV_CLIENT_SERV_BASIS_STRUCT l_iv_client_serv_basis_structa;					

double dbl_l_convothcharge = 0.0,l_convnil_fees = 0.0,l_convminimumfee = 0.0;
double l_convmaximum_feeabs = 0.0,dbl_l_convtotothcharge = 0.0;
double l_convcmamount = 0.0;									

int int_retstat;
int int_headerlen = 8;
int int_counter;
int i;
int int_ret;
int int_newlen;
int int_cmret =0;
int int_othchargeret =0;
int int_retval =0;
int int_l_retstat =0;
char int_cd_no[IV_PARAM_LEN], int_dv_no[IV_PARAM_LEN], *temp; 

EXEC SQL BEGIN DECLARE SECTION;



	double     h_chargequantity=0.0;             
 int        int_h_intchargeqty = 0;
 int        int_h_templength = 0;
	double  h_cmamount=0.0;
	char chr_h_mstclient[11];
	char h_dl_client[11];
	double  dbl_comm=0.0;
	char    h_ccy[4];
	int     int_h_servcode;
	int     int_t_servcode =0;
   char chr_h_serv_desc[IV_DESC_LEN];  				
	char chr_h_temp_client[APL_CLIENT_LENGTH];
	char chr_h_temp_rowid[APL_ROWID_LEN];
	char chr_h_param_val[IV_PARAM_LEN];  

   double dbl_h_schfee=0.0;

	int 	int_l_pagelength = 0;
	short int_l_condexists = 0;


	short i_chargeqty;
	short i_cmamt;
	short i_mstaccount;
	short i_dl_client;
	short i_ccy;
	short i_chargebasis;
	short i_servcode;
	short i_serv_detail;								
	short i_temp_account;
	short i_temp_rowid;
	short i_proc_data_val;  
   short i_schfee;


EXEC SQL VAR l_iv_clt_setup_struct.b_ccycd IS STRING;
EXEC SQL VAR l_ivservmast_struct.service_det IS STRING;
EXEC SQL VAR l_pro_sgenstat_struct.map_desc IS  STRING;
EXEC SQL VAR chr_h_mstclient IS STRING;
EXEC SQL VAR h_dl_client IS STRING;
EXEC SQL VAR h_ccy IS STRING;
EXEC SQL VAR chr_h_serv_desc IS STRING;				
EXEC SQL VAR chr_h_temp_client IS STRING;		
EXEC SQL VAR chr_h_temp_rowid IS STRING;		
EXEC SQL VAR chr_h_param_val IS STRING;        

EXEC SQL END DECLARE SECTION;




double l_underbill = UNDERBILLING;          	
double l_overbill = OVERBILLING;					
double l_splbill = SPECIALBILLING;				

char chr_s_chargeqty[32],chr_s_tmpchargeqty[18];
char chr_s_chargeqty1[13];

double l_othcharge = 0.0;
double TotOthCharge = 0.0;
double l_minimumfee = 0.0;
double l_nil_fees = 0.0;
double l_maximum_fee = 0.0;
double maximum_feeabs = 0.0;


double tot_oth_min = 0.0;				
double tot_oth_nil = 0.0;			
double tot_oth_max = 0.0;		
double l_exchg_rt_fee_bl=1.0;

double tot_oth_cm_amount = 0.0;

double	l_custfee = CUSTODYFEE;
double	l_dealcode = TXNFEE;
double	l_latedealcode		= LATETXNFEE;
double  l_booktrfr_code = IV_BOOKTRF_FEE;
double l_freecacode = FREECAFEE;
double l_vpcacode = VPCAFEE;
double l_trnarnfee = TURNAROUNDTXNFEE;
double	l_minimumfeecode	= MINFEECODE;
double	l_taxfee	= TAXFEE;
double	l_voldis	= VOLDISCOUNTFEE;
double   dbl_l_amendment = AMEND_FEE_IND ;

double   dbl_l_admtxnfee =ADM_TXN_FEE_IND ;
double dbl_l_admcustfee =ADM_CUST_FEE_IND;
double dbl_l_cashdivfee =CASH_DIV_FEE ;
double dbl_l_bondintfee = IV_BONDINT_FEE;
double l_repairfee = REPAIRFEE ;
double l_deltxnfee = DELV_TXN_FEE ;
double dbl_l_cashfee = CASH_ITEMS ;
double l_settalgefee = SETTALGEFEE ;
double dbl_l_bogmsgfee = BOG_MSG_FEE;

int int_maxfeeret = 0;
int int_minfeeret = 0;
int int_nilfeeret = 0;

char chr_f_cmamt[20], chr_f_othcharge[30], chr_f_totothcharge[30];
char chr_f_cmamt1[20];
char chr_f_minfee[30], chr_f_nilfee[30], chr_f_maxfee[30];
char chr_l_amtstr[30], chr_l_chgqtystr[30];
double roundedamount = 0.0; 
double   l_roundedamount = 0.0,l_cumroundedamount = 0.0;
int      int_rndfeeret =0;
char     chr_l_cod_roundedamt[22] = APL_NULL_STRING;

sqlca.sqlcode=0;
memset(chr_f_cmamt, APL_NULL_CHAR, 20);
memset(chr_f_cmamt1, APL_NULL_CHAR, 20);
memset(chr_f_othcharge, APL_NULL_CHAR, 30);
memset(chr_f_totothcharge, APL_NULL_CHAR, 30);
memset(chr_f_minfee, APL_NULL_CHAR, 30);
memset(chr_f_nilfee, APL_NULL_CHAR, 30);
memset(chr_l_amtstr, APL_NULL_CHAR, 30);
memset(chr_l_chgqtystr, APL_NULL_CHAR, 30);

#	ifdef SYS_DEBUG
	fprintf(APL_OUT_FILE,"Entering IV_Proc_PrnOth\n");
	fprintf(APL_OUT_FILE,"Inside IV_Proc_PrnFooter\n");
   fprintf(APL_OUT_FILE,"the billdt  is  %s\n",chr_p_billdt);
	fprintf(APL_OUT_FILE,"the mastsub is  %s\n",p_mastsub);
	fprintf(APL_OUT_FILE,"the client is  %s\n",chr_p_client);
	fprintf(APL_OUT_FILE,"are the pointers geting too much\n");
	fprintf(APL_OUT_FILE,"the country h_code is (%s)\n",g_mt_commonsys_params_struct_h.nation_code);
	#	endif

   
   if ( APL_FAILURE == CO_Chk_CntryEnabled( "BILL_PRINTING",
                                          "PAGE_LENGTH",
                                          &int_l_condexists,
                                          l_debug_info_ptr) )
   {
      APL_GOBACK_FAIL
   }

   if (int_l_condexists)
      int_l_pagelength = 70;
   else  int_l_pagelength = 58;

	fprintf(bill,"\n");
		(*int_currpos)++;
if ((*int_currpos) + int_headerlen >int_l_pagelength)
{
	fprintf(bill,"^pg\n");
	(*int_currpos) = 1;
	if (APL_FAILURE == IV_Proc_PrnOthHdrEMINV(bill,int_currpos,l_iv_clt_setup_struct,&int_retval,l_debug_info_ptr))
	{
		fprintf(fl_userlog,"Could not print Other Services chr_header\n");
		APL_GOBACK_FAIL
	}

}
else
{

if (APL_FAILURE == IV_Proc_PrnOthHdrEMINV(bill,int_currpos,l_iv_clt_setup_struct,&int_retval,l_debug_info_ptr))
{
	fprintf(fl_userlog,"Could not print Other Services chr_header\n");
	APL_GOBACK_FAIL
}

}


int_retstat = IV_SUCCESS;

IV_Rtv_IVCUSTSETUP(chr_p_client,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr);
if (int_retstat == IV_SUCCESS || int_retstat == IV_COLUMN_NULL_ERR)
	{   
     l_exchg_rt_fee_bl = 1.0;
     if (strcmp( l_iv_clientsetup_struct.fees_ccy, l_iv_clientsetup_struct.b_ccycd) != 0)
        {
           int_retstat = IV_SUCCESS;
	
	   
           if(APL_FAILURE == ConvToFxFn_GR(l_iv_clientsetup_struct.fees_ccy,l_iv_clientsetup_struct.b_ccycd,g_mt_commonsys_params_struct_h.dom_ccy,chr_p_billdt,&l_exchg_rt_fee_bl, &int_retstat,l_debug_info_ptr))   
           {
              fprintf(fl_userlog,"Error : Exchange Rate not int_found for currency %s %s\n",l_iv_clientsetup_struct.fees_ccy,l_iv_clientsetup_struct.b_ccycd); 
              fflush(fl_userlog);
           }
		  }
	 }		
 else if(int_retstat == IV_CRITCAL_ERROR_IND)
    {
       fprintf(fl_userlog,"Error : Account %s  not int_found in billing system\n",l_iv_client_serv_basis_structa.client);
       fflush(fl_userlog);
       int_retstat = IV_CRITCAL_ERROR_IND;
       if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
         {
            CO_ProcMonitor(APL_OUT_FILE,APL_NULL_STRING,l_debug_info_ptr,NULL);
            CO_FreeErrLst(l_debug_info_ptr);
         }

       APL_GOBACK_FAIL
    }
  


	memset(&l_sys_ivcntl_param_struct, NULL, sizeof(SYS_IVCONTROLPARAM_STRUCT));
   if (APL_FAILURE == IV_Rtv_IVCNTLPARAM(&l_sys_ivcntl_param_struct,
                                       &int_l_retstat,
                                       l_debug_info_ptr))
   {
      if (int_l_retstat == IV_NO_DATA_FOUND_ERR)
      {
         fprintf(fl_userlog,"Billing Control Parameters Have Not Been Set Up\n");
         CO_InsertErr(l_debug_info_ptr,
                        ERR_BILLCNTRL_PARAM_NOTFND,
                        APL_NULL_STRING,
                        APL_NULL_STRING,
                        APL_NULL_STRING,
                        __LINE__,
                        __FILE__);
         APL_GOBACK_FAIL
      }
   }



EXEC SQL DECLARE curoth CURSOR FOR
SELECT DECODE(NVL(a.SERVICE_QTY,0),0,0,NVL(a.SCHDL_FEE,0)/NVL(a.SERVICE_QTY,0)),NVL(a.SERVICE_QTY,0),
NVL(a.SCHDL_FEE,0),a.SERVICE_CD,a.SERVICE_DET,a.client,'',a.rowid
FROM IV_SERV_OTH a
WHERE a.CLIENT = :chr_p_client
AND a.B_UPTO_DATE = :chr_p_billdt
AND :p_mastsub = 'I'
AND a.SERVICE_CD IN (:l_underbill,:l_overbill,:l_splbill)
AND EXISTS (SELECT b.SERVICE_CD FROM IV_DEAL b
				WHERE b.DATEOF_BILLING = :chr_p_billdt
				AND   b.CLIENT = :chr_p_client
				AND   a.SERVICE_CD = b.SERVICE_CD
				AND   b.CONS_FLAG= 'I' )
UNION
SELECT NVL(SCHDL_FEE,0),NVL(CHRG_QUANT,0),NVL(COMM_AMT,0),IV_SERV_MAST.SERVICE_CD,NVL(SERVICE_DET,NULL),
IV_DEAL_FEE.client,IV_DEAL_FEE.proc_data_val,IV_DEAL_FEE.rowid
FROM IV_DEAL_FEE,IV_SERV_MAST
WHERE DATEOF_BILLING  = :chr_p_billdt
		AND CLIENT  = :chr_p_client 
		AND CLIENT = MASTER_CLT
		AND CONS_FLAG = :p_mastsub
		AND :p_mastsub = 'C'
		AND IV_DEAL_FEE.SERVICE_CD = IV_SERV_MAST.SERVICE_CD
		AND IV_DEAL_FEE.SERVICE_CD IN (:l_underbill,:l_overbill)
UNION
SELECT DECODE(NVL(a.SERVICE_QTY,0),0,0,NVL(a.SCHDL_FEE,0)/NVL(a.SERVICE_QTY,0)),NVL(a.SERVICE_QTY,0),
NVL(a.SCHDL_FEE,0),a.SERVICE_CD,a.SERVICE_DET,a.client,'',a.rowid
FROM IV_SERV_OTH a
WHERE a.CLIENT IN ( SELECT DISTINCT Y.CLN_CODE FROM MT_CLIENT Y,IV_CLIENTSETUP X
                    WHERE Y.CLN_MASTER =:chr_p_client
                      AND Y.CLN_BILLABLEIND='Y'
                      AND Y.STATUS='AA'
                      AND Y.CLN_CODE=X.CLIENT and X.B_GEN_IND = decode( Y.CLN_CODE,Y.CLN_MASTER,'S','M'))
AND a.B_UPTO_DATE = :chr_p_billdt
AND :p_mastsub = 'C'
AND a.SERVICE_CD =:l_splbill
ORDER BY 4,6;

IS_ANY_ORA_ERROR

OthCharge = *p_tototh;

EXEC SQL OPEN curoth;

IS_ANY_ORA_ERROR

if (sqlca.sqlcode <0)
{
	fprintf(fl_userlog,"db Error(BTRANSAC)\n");
	APL_GOBACK_FAIL
}

int_counter =0;

for(;;)
{
	EXEC SQL FETCH curoth INTO :dbl_h_schfee:i_schfee,:h_chargequantity:i_chargeqty,
	:h_cmamount:i_cmamt,:int_h_servcode:i_servcode,:chr_h_serv_desc:i_serv_detail,:chr_h_temp_client:i_temp_account,:chr_h_param_val:i_proc_data_val,chr_h_temp_rowid:i_temp_rowid;
	IS_ANY_ORA_ERROR	

	if (sqlca.sqlcode ==1403)
	{
		 break;
	}
	int_counter++;

 

   
	
      
      if ( ( ((int_h_servcode == UNDERBILLING) || (int_h_servcode == OVERBILLING )) && (p_mastsub == 'I')) ||
			  (int_h_servcode == SPECIALBILLING) )
		{
			h_cmamount *= l_exchg_rt_fee_bl;
			dbl_h_schfee *=l_exchg_rt_fee_bl;
			
		}
	

   if(APL_FAILURE == CO_PadString(chr_h_serv_desc,'R',25," ",l_debug_info_ptr))
      APL_GOBACK_FAIL

	int_t_servcode = int_h_servcode;

   memset(chr_s_chargeqty,'\0',32);
   memset(chr_s_chargeqty1,'\0',13);
	memset(chr_s_tmpchargeqty,'\0',18);
  strcpy(chr_s_tmpchargeqty,APL_NULL_STRING); 
  strcpy(chr_s_chargeqty,APL_NULL_STRING); 
  strcpy(chr_s_chargeqty1,APL_NULL_STRING); 
	 
   if (( int_t_servcode == ADM_CUST_FEE_IND ) || ( int_t_servcode == ADM_TXN_FEE_IND )) 
			
		{
		h_chargequantity = h_chargequantity / l_exchg_rt_fee_bl; 
		IV_Proc_Round (&h_chargequantity,l_iv_clt_setup_struct.fees_ccy,chr_s_tmpchargeqty,l_debug_info_ptr); 
		}
	else
		{
       int_h_intchargeqty = 0;
       int_h_intchargeqty = (int)h_chargequantity;
		sprintf(chr_s_tmpchargeqty,"%d",int_h_intchargeqty);
		}
	

 int_h_templength = 0;
 int_h_templength = strlen(chr_s_tmpchargeqty);
 
 strncpy(chr_s_chargeqty,"             ",(16-int_h_templength));
	strcat(chr_s_chargeqty,chr_s_tmpchargeqty);
	strcat(chr_s_chargeqty,APL_NULL_STRING);
	roundedamount = 0.0;
	memset(chr_l_chgqtystr, APL_NULL_CHAR, 30);
	sscanf(chr_s_chargeqty, "%lf", &roundedamount);
	CO_Rtv_FormatAmt(roundedamount, chr_l_chgqtystr, 'Y', 'Y', l_debug_info_ptr); 
	/* strcpy(chr_s_chargeqty, chr_l_chgqtystr + 12);  */
/*** Subu - Changes taken from SMAC. Above line commented***/
    /* Vijay AIX UAT Fix --- The below logic doesnt work and copies only 11 characters on AIX.
        Example : |           1,000,339.96| getting copied as |,000,339.96|.Hence commenting below logic */
        EXEC SQL SELECT SUBSTR(:chr_l_chgqtystr,-18) INTO :chr_s_chargeqty FROM DUAL;
        IS_ANY_ORA_ERROR
        //printf("Vijay AIX -------- s_chargeqty --|%s|--|%d|\n",chr_s_chargeqty,strlen(chr_s_chargeqty)); Changes done for AIX Migration
        printf("Vijay AIX -------- s_chargeqty --|%s|--|%d|\n",chr_s_chargeqty,(int)strlen(chr_s_chargeqty));



   CO_Trim(chr_s_chargeqty,' ','L',chr_s_chargeqty1,l_debug_info_ptr);

   l_convcmamount = (dbl_h_schfee / l_exchg_rt_fee_bl);	
	int_cmret = IV_Proc_Round (&l_convcmamount,l_iv_clt_setup_struct.fees_ccy,chr_f_cmamt,l_debug_info_ptr); 

	if (int_cmret ==1)
	{
		

		roundedamount = 0.0;
		memset(chr_l_amtstr, APL_NULL_CHAR, 30);

		sscanf(chr_f_cmamt, "%lf", &roundedamount);
		CO_Rtv_FormatAmtCcy(roundedamount, chr_l_amtstr, 'Y', 'Y', l_iv_clt_setup_struct.fees_ccy,l_debug_info_ptr);
		strcpy(chr_f_cmamt, chr_l_amtstr + 10);
   	CO_Trim(chr_f_cmamt,' ','L',chr_f_cmamt1,l_debug_info_ptr);
   	if(APL_FAILURE == CO_PadString(chr_f_cmamt1,'L',25," ",l_debug_info_ptr))
   		APL_GOBACK_FAIL

	}
		else
			APL_GOBACK_FAIL
   
	
	fprintf(bill,"%s\t%s\t%s",chr_s_chargeqty1,chr_h_serv_desc,chr_f_cmamt1);

	
	
	l_convcmamount = (h_cmamount / l_exchg_rt_fee_bl);	
	int_cmret = IV_Proc_Round (&l_convcmamount,l_iv_clt_setup_struct.fees_ccy,chr_f_cmamt,l_debug_info_ptr); 

	if (int_cmret ==1)
	{
		

		roundedamount = 0.0;
		memset(chr_l_amtstr, APL_NULL_CHAR, 30);

		sscanf(chr_f_cmamt, "%lf", &roundedamount);
		CO_Rtv_FormatAmtCcy(roundedamount, chr_l_amtstr, 'Y', 'Y', l_iv_clt_setup_struct.fees_ccy,l_debug_info_ptr);
		strcpy(chr_f_cmamt, chr_l_amtstr + 10);
   	CO_Trim(chr_f_cmamt,' ','L',chr_f_cmamt1,l_debug_info_ptr);
   	if(APL_FAILURE == CO_PadString(chr_f_cmamt1,'L',25," ",l_debug_info_ptr))
   		APL_GOBACK_FAIL

	}
		else
			APL_GOBACK_FAIL
   
	fprintf(bill,"\t%s\n",chr_f_cmamt1);
	(*int_currpos)++;

	
	if ((*int_currpos) + 1 >int_l_pagelength)
	{
		fprintf(bill,"^pg\n");
		(*int_currpos) = 1;
		if (APL_FAILURE == IV_Proc_PrnOthHdrEMINV(bill,int_currpos,l_iv_clt_setup_struct,&int_retval,l_debug_info_ptr))
		{
			fprintf(fl_userlog,"Could not print Other Services chr_header\n");
			APL_GOBACK_FAIL
		}
   }

	

	
        if(int_h_servcode == CASH_DIV_FEE)
        {
		if(strcmp(chr_h_param_val,";")!=0)
		{
	
		strcpy(int_cd_no,strtok_r(chr_h_param_val,";",&temp));
                strcpy(int_dv_no,strtok_r(NULL,";",&temp));

		}
		else
		{
         memset(int_cd_no,APL_NULL_CHAR,IV_PARAM_LEN);
         memset(int_dv_no,APL_NULL_CHAR,IV_PARAM_LEN);
         strcpy(int_cd_no,"0");
         strcpy(int_dv_no,"0");
         strcat(int_cd_no,APL_NULL_STRING);
         strcat(int_dv_no,APL_NULL_STRING);

		}
		if(strcmp(int_cd_no,"0") != 0)
                {
                        strcpy(chr_h_serv_desc,"CASH DIVIDEND");

			if(APL_FAILURE == CO_PadString(int_cd_no,'R',8," ",l_debug_info_ptr))
                                APL_GOBACK_FAIL
                        fprintf(bill,"%s",int_cd_no);
                        fprintf(bill,"%s\n",chr_h_serv_desc);

                        if ((*int_currpos) + 1 >int_l_pagelength)
                        {
                                 fprintf(bill,"^pg\n");
                                 (*int_currpos) = 1;
	
                                 if (APL_FAILURE == IV_Proc_PrnOthHdrEMINV(bill,int_currpos,l_iv_clt_setup_struct,&int_retval,l_debug_info_ptr))

                                 {
                                         fprintf(fl_userlog,"Could not print Other Services chr_header\n");
                                         APL_GOBACK_FAIL
                                 }
                        }
                }

		if(strcmp(int_dv_no,"0") != 0)
                {
                        strcpy(chr_h_serv_desc,"DECREASE IN VALUE");

			if(APL_FAILURE == CO_PadString(int_dv_no,'R',8," ",l_debug_info_ptr))
                                APL_GOBACK_FAIL
                        fprintf(bill,"%s",int_dv_no);
                        fprintf(bill,"%s\n",chr_h_serv_desc);


                        if ((*int_currpos) + 1 >int_l_pagelength)
                        {
                                 fprintf(bill,"^pg\n");
                                 (*int_currpos) = 1;
                                 if (APL_FAILURE == IV_Proc_PrnOthHdrEMINV(bill,int_currpos,l_iv_clt_setup_struct,&int_retval,l_debug_info_ptr))

                                 {
                                         fprintf(fl_userlog,"Could not print Other Services chr_header\n");
                                         APL_GOBACK_FAIL
                                 }

                        }
                }
        }  
	
	OthCharge=OthCharge + h_cmamount;
	

} 

EXEC SQL CLOSE curoth;  

IS_ANY_ORA_ERROR	

if (int_counter ==0 )
{
	fprintf(bill,"\n\tNO OTHER CHARGES FOR ACCOUNT %s\n\n",chr_p_client);
	(*int_currpos)++;
	(*int_currpos)++;
	(*int_currpos)++;
}




if ((*int_currpos) + 1 >int_l_pagelength)
{
	fprintf(bill,"^pg\n");
	(*int_currpos) = 1;
	if (APL_FAILURE == IV_Proc_PrnOthHdrEMINV(bill,int_currpos,l_iv_clt_setup_struct,&int_retval,l_debug_info_ptr))
	{
		fprintf(fl_userlog,"Could not print Other Services chr_header\n");
		APL_GOBACK_FAIL
	}

}

l_othcharge = OthCharge;

fprintf(bill,"\n\tOTHER SERVICES COMMISSION");
(*int_currpos)++;
   
dbl_l_convothcharge = (OthCharge / l_exchg_rt_fee_bl);
int_othchargeret = IV_Proc_Round(&dbl_l_convothcharge,l_iv_clt_setup_struct.fees_ccy,chr_f_othcharge,l_debug_info_ptr);
if (int_othchargeret == 1)
{
		

		roundedamount = 0.0;
		memset(chr_l_amtstr, APL_NULL_CHAR, 30);

		sscanf(chr_f_othcharge, "%lf", &roundedamount);
		CO_Rtv_FormatAmtCcy(roundedamount, chr_l_amtstr, 'Y', 'Y', l_iv_clt_setup_struct.fees_ccy,l_debug_info_ptr);
		strcpy(chr_f_othcharge, chr_l_amtstr + 10); 

	if ( roundedamount != 0 )
	   fprintf(bill,"\t\t%s\n",chr_f_othcharge);
	else
	   fprintf(bill,"\t\t%s\n",chr_f_othcharge);
	(*int_currpos)++;

	if ((*int_currpos) + 1 >int_l_pagelength)
	{
		fprintf(bill,"^pg\n");
		(*int_currpos) = 1;
		if (APL_FAILURE == IV_Proc_PrnOthHdrEMINV(bill,int_currpos,l_iv_clt_setup_struct,&int_retval,l_debug_info_ptr))
		{
			fprintf(fl_userlog,"Could not print Other Services chr_header\n");
			APL_GOBACK_FAIL
		}

	}

}
else
	APL_GOBACK_FAIL
	




if (APL_FAILURE == IV_Rtv_IVSRVCHRG(chr_p_billdt,
												chr_p_client,
												p_mastsub,
												AMEND_FEE_IND ,
												&l_iv_service_chrg_struct,
												&int_retstat,
												l_debug_info_ptr))
{
   if (int_retstat == IV_CRITCAL_ERROR_IND)
   {
         APL_GOBACK_FAIL
   }
   else if (int_retstat == IV_NO_DATA_FOUND_ERR)
   {
      l_iv_service_chrg_struct.nil_fees_adj =0;
      l_iv_service_chrg_struct.minimumfee_adj =0;
      l_iv_service_chrg_struct.maximum_fee_adj =0;

   }
}

l_minimumfee = l_iv_service_chrg_struct.minimumfee_adj ;
l_nil_fees = l_iv_service_chrg_struct.nil_fees_adj;
l_maximum_fee = l_iv_service_chrg_struct.maximum_fee_adj;


	
	
   l_roundedamount   =  l_iv_service_chrg_struct.minimumfee_adj +
                     l_iv_service_chrg_struct.nil_fees_adj +
                     l_iv_service_chrg_struct.maximum_fee_adj +
                     l_iv_service_chrg_struct.comm_amt;

   
   int_rndfeeret  = IV_Proc_Round(&l_roundedamount,
                        l_iv_clt_setup_struct.b_ccycd,
                        chr_l_cod_roundedamt,
                        l_debug_info_ptr);

   if (int_rndfeeret== 1)
   {
      l_roundedamount = 0.0;
      sscanf(chr_l_cod_roundedamt, "%lf", &l_roundedamount);
      l_cumroundedamount = (l_cumroundedamount + l_roundedamount);
   }
   else
   {
      APL_GOBACK_FAIL
   }
   
	

if (APL_FAILURE == IV_Rtv_IVSRVCHRG(chr_p_billdt,
												chr_p_client,
												p_mastsub,
												 ADM_TXN_FEE_IND,
												&l_iv_service_chrg_struct,
												&int_retstat,
												l_debug_info_ptr))
{
   if (int_retstat == IV_CRITCAL_ERROR_IND)
   {
         APL_GOBACK_FAIL
   }
   else if (int_retstat == IV_NO_DATA_FOUND_ERR)
   {
      l_iv_service_chrg_struct.nil_fees_adj =0;
      l_iv_service_chrg_struct.minimumfee_adj =0;
      l_iv_service_chrg_struct.maximum_fee_adj =0;

   }
}

l_minimumfee = l_minimumfee + l_iv_service_chrg_struct.minimumfee_adj ;
l_nil_fees = l_nil_fees + l_iv_service_chrg_struct.nil_fees_adj;
l_maximum_fee = l_maximum_fee + l_iv_service_chrg_struct.maximum_fee_adj;



   

   l_roundedamount   =  l_iv_service_chrg_struct.minimumfee_adj +
                     l_iv_service_chrg_struct.nil_fees_adj +
                     l_iv_service_chrg_struct.maximum_fee_adj +
                     l_iv_service_chrg_struct.comm_amt;

   
   int_rndfeeret  = IV_Proc_Round(&l_roundedamount,
                        l_iv_clt_setup_struct.b_ccycd,
                        chr_l_cod_roundedamt,
                        l_debug_info_ptr);
   if (int_rndfeeret== 1)
   {
      l_roundedamount = 0.0;
      sscanf(chr_l_cod_roundedamt, "%lf", &l_roundedamount);
      l_cumroundedamount = (l_cumroundedamount + l_roundedamount);
   }
   else
   {
      APL_GOBACK_FAIL
   }
   
	

if (APL_FAILURE == IV_Rtv_IVSRVCHRG(chr_p_billdt,
												chr_p_client,
												p_mastsub,
												 ADM_CUST_FEE_IND,
												&l_iv_service_chrg_struct,
												&int_retstat,
												l_debug_info_ptr))
{
   if (int_retstat == IV_CRITCAL_ERROR_IND)
   {
         APL_GOBACK_FAIL
   }
   else if (int_retstat == IV_NO_DATA_FOUND_ERR)
   {
      l_iv_service_chrg_struct.nil_fees_adj =0;
      l_iv_service_chrg_struct.minimumfee_adj =0;
      l_iv_service_chrg_struct.maximum_fee_adj =0;

   }
}

l_minimumfee = l_minimumfee + l_iv_service_chrg_struct.minimumfee_adj ;
l_nil_fees = l_nil_fees + l_iv_service_chrg_struct.nil_fees_adj;
l_maximum_fee = l_maximum_fee + l_iv_service_chrg_struct.maximum_fee_adj;


   

   l_roundedamount   =  l_iv_service_chrg_struct.minimumfee_adj +
                     l_iv_service_chrg_struct.nil_fees_adj +
                     l_iv_service_chrg_struct.maximum_fee_adj +
                     l_iv_service_chrg_struct.comm_amt;

   
   int_rndfeeret  = IV_Proc_Round(&l_roundedamount,
                        l_iv_clt_setup_struct.b_ccycd,
                        chr_l_cod_roundedamt,
                        l_debug_info_ptr);
   if (int_rndfeeret== 1)
   {
      l_roundedamount = 0.0;
      sscanf(chr_l_cod_roundedamt, "%lf", &l_roundedamount);
      l_cumroundedamount = (l_cumroundedamount + l_roundedamount);
   }
   else
   {
      APL_GOBACK_FAIL
   }
   
	

if (APL_FAILURE == IV_Rtv_IVSRVCHRG(chr_p_billdt,
												chr_p_client,
												p_mastsub,
												 CASH_DIV_FEE,
												&l_iv_service_chrg_struct,
												&int_retstat,
												l_debug_info_ptr))
{
   if (int_retstat == IV_CRITCAL_ERROR_IND)
   {
         APL_GOBACK_FAIL
   }
   else if (int_retstat == IV_NO_DATA_FOUND_ERR)
   {
      l_iv_service_chrg_struct.nil_fees_adj =0;
      l_iv_service_chrg_struct.minimumfee_adj =0;
      l_iv_service_chrg_struct.maximum_fee_adj =0;

   }
}

l_minimumfee = l_minimumfee + l_iv_service_chrg_struct.minimumfee_adj ;
l_nil_fees = l_nil_fees + l_iv_service_chrg_struct.nil_fees_adj;
l_maximum_fee = l_maximum_fee + l_iv_service_chrg_struct.maximum_fee_adj;

   

   l_roundedamount   =  l_iv_service_chrg_struct.minimumfee_adj +
                     l_iv_service_chrg_struct.nil_fees_adj +
                     l_iv_service_chrg_struct.maximum_fee_adj +
                     l_iv_service_chrg_struct.comm_amt;

   
   int_rndfeeret  = IV_Proc_Round(&l_roundedamount,
                        l_iv_clt_setup_struct.b_ccycd,
                        chr_l_cod_roundedamt,
                        l_debug_info_ptr);
   if (int_rndfeeret== 1)
   {
      l_roundedamount = 0.0;
      sscanf(chr_l_cod_roundedamt, "%lf", &l_roundedamount);
      l_cumroundedamount = (l_cumroundedamount + l_roundedamount);
   }
   else
   {
      APL_GOBACK_FAIL
   }
   

if (APL_FAILURE == IV_Rtv_IVSRVCHRG(chr_p_billdt,
												chr_p_client,
												p_mastsub,
												 IV_BONDINT_FEE,
												&l_iv_service_chrg_struct,
												&int_retstat,
												l_debug_info_ptr))
{
   if (int_retstat == IV_CRITCAL_ERROR_IND)
   {
         APL_GOBACK_FAIL
   }
   else if (int_retstat == IV_NO_DATA_FOUND_ERR)
   {
      l_iv_service_chrg_struct.nil_fees_adj =0;
      l_iv_service_chrg_struct.minimumfee_adj =0;
      l_iv_service_chrg_struct.maximum_fee_adj =0;

   }
}

l_minimumfee = l_minimumfee + l_iv_service_chrg_struct.minimumfee_adj ;
l_nil_fees = l_nil_fees + l_iv_service_chrg_struct.nil_fees_adj;
l_maximum_fee = l_maximum_fee + l_iv_service_chrg_struct.maximum_fee_adj;

   

   l_roundedamount   =  l_iv_service_chrg_struct.minimumfee_adj +
                     l_iv_service_chrg_struct.nil_fees_adj +
                     l_iv_service_chrg_struct.maximum_fee_adj +
                     l_iv_service_chrg_struct.comm_amt;

   
   int_rndfeeret  = IV_Proc_Round(&l_roundedamount,
                        l_iv_clt_setup_struct.b_ccycd,
                        chr_l_cod_roundedamt,
                        l_debug_info_ptr);
   if (int_rndfeeret== 1)
   {
      l_roundedamount = 0.0;
      sscanf(chr_l_cod_roundedamt, "%lf", &l_roundedamount);
      l_cumroundedamount = (l_cumroundedamount + l_roundedamount);
   }
   else
   {
      APL_GOBACK_FAIL
   }
   


if (APL_FAILURE == IV_Rtv_IVSRVCHRG(chr_p_billdt,
												chr_p_client,
												p_mastsub,
												 REPAIRFEE,
												&l_iv_service_chrg_struct,
												&int_retstat,
												l_debug_info_ptr))
{
   if (int_retstat == IV_CRITCAL_ERROR_IND)
   {
         APL_GOBACK_FAIL
   }
   else if (int_retstat == IV_NO_DATA_FOUND_ERR)
   {
      l_iv_service_chrg_struct.nil_fees_adj =0;
      l_iv_service_chrg_struct.minimumfee_adj =0;
      l_iv_service_chrg_struct.maximum_fee_adj =0;

   }
}

l_minimumfee = l_minimumfee + l_iv_service_chrg_struct.minimumfee_adj ;
l_nil_fees = l_nil_fees + l_iv_service_chrg_struct.nil_fees_adj;
l_maximum_fee = l_maximum_fee + l_iv_service_chrg_struct.maximum_fee_adj;

   

   l_roundedamount   =  l_iv_service_chrg_struct.minimumfee_adj +
                     l_iv_service_chrg_struct.nil_fees_adj +
                     l_iv_service_chrg_struct.maximum_fee_adj +
                     l_iv_service_chrg_struct.comm_amt;

   
   int_rndfeeret  = IV_Proc_Round(&l_roundedamount,
                        l_iv_clt_setup_struct.b_ccycd,
                        chr_l_cod_roundedamt,
                        l_debug_info_ptr);
   if (int_rndfeeret== 1)
   {
      l_roundedamount = 0.0;
      sscanf(chr_l_cod_roundedamt, "%lf", &l_roundedamount);
      l_cumroundedamount = (l_cumroundedamount + l_roundedamount);
   }
   else
   {
      APL_GOBACK_FAIL
   }
   

/*
EXEC SQL SELECT SUM(NVL(MINIMUMFEE_ADJ,0)), 
					 SUM(NVL(NIL_FEES_ADJ,0)),
                SUM(NVL(MAXIMUM_FEE_ADJ,0)),
                SUM(NVL(COMM_AMT,0))
			INTO  :tot_oth_min,
					:tot_oth_nil,
               :tot_oth_max,
               :tot_oth_cm_amount
			FROM  IV_SERVICE_CHRG
			WHERE CLIENT = :chr_p_client
		   AND	DATEOF_BILLING = :chr_p_billdt	
			AND   CONS_FLAG = :p_mastsub
			AND   SERVICE_CD IN (:l_underbill,:l_overbill,:l_splbill);
 
l_minimumfee = l_minimumfee + tot_oth_min;
l_nil_fees = l_nil_fees + tot_oth_nil;
l_maximum_fee = l_maximum_fee + tot_oth_max;



   

   l_roundedamount   =  tot_oth_min +
                     tot_oth_nil +
                     tot_oth_max +
                     tot_oth_cm_amount;

   
   int_rndfeeret  = IV_Proc_Round(&l_roundedamount,
                        l_iv_clt_setup_struct.b_ccycd,
                        chr_l_cod_roundedamt,
                        l_debug_info_ptr);
   if (int_rndfeeret== 1)
   {
      l_roundedamount = 0.0;
      sscanf(chr_l_cod_roundedamt, "%lf", &l_roundedamount);
      l_cumroundedamount = (l_cumroundedamount + l_roundedamount);
   }
   else
   {
      APL_GOBACK_FAIL
   }
 */  



if (APL_FAILURE == IV_Rtv_IVSRVCHRG(chr_p_billdt,
												chr_p_client,
												p_mastsub,
												 DELV_TXN_FEE,
												&l_iv_service_chrg_struct,
												&int_retstat,
												l_debug_info_ptr))
{
   if (int_retstat == IV_CRITCAL_ERROR_IND)
   {
         APL_GOBACK_FAIL
   }
   else if (int_retstat == IV_NO_DATA_FOUND_ERR)
   {
      l_iv_service_chrg_struct.nil_fees_adj =0;
      l_iv_service_chrg_struct.minimumfee_adj =0;
      l_iv_service_chrg_struct.maximum_fee_adj =0;

   }
}

l_minimumfee = l_minimumfee + l_iv_service_chrg_struct.minimumfee_adj ;
l_nil_fees = l_nil_fees + l_iv_service_chrg_struct.nil_fees_adj;
l_maximum_fee = l_maximum_fee + l_iv_service_chrg_struct.maximum_fee_adj;

   

   l_roundedamount   =  l_iv_service_chrg_struct.minimumfee_adj +
                     l_iv_service_chrg_struct.nil_fees_adj +
                     l_iv_service_chrg_struct.maximum_fee_adj +
                     l_iv_service_chrg_struct.comm_amt;

   
   int_rndfeeret  = IV_Proc_Round(&l_roundedamount,
                        l_iv_clt_setup_struct.b_ccycd,
                        chr_l_cod_roundedamt,
                        l_debug_info_ptr);
   if (int_rndfeeret== 1)
   {
      l_roundedamount = 0.0;
      sscanf(chr_l_cod_roundedamt, "%lf", &l_roundedamount);
      l_cumroundedamount = (l_cumroundedamount + l_roundedamount);
   }
   else
   {
      APL_GOBACK_FAIL
   }
   
/* HDFCIV_004 Removed minfee calculation as its separately calculated now 
if (APL_FAILURE == IV_Rtv_IVSRVCHRG(chr_p_billdt,
												chr_p_client,
												p_mastsub,
												MINFEECODE,
												&l_iv_service_chrg_struct,
												&int_retstat,
												l_debug_info_ptr))
{
   if (int_retstat == IV_CRITCAL_ERROR_IND)
   {
         APL_GOBACK_FAIL
   }
   else if (int_retstat == IV_NO_DATA_FOUND_ERR)
   {
      l_iv_service_chrg_struct.nil_fees_adj =0;
      l_iv_service_chrg_struct.minimumfee_adj =0;
      l_iv_service_chrg_struct.maximum_fee_adj =0;

   }
}

l_minimumfee = l_minimumfee + l_iv_service_chrg_struct.minimumfee_adj ;
l_nil_fees = l_nil_fees + l_iv_service_chrg_struct.nil_fees_adj;
l_maximum_fee = l_maximum_fee + l_iv_service_chrg_struct.maximum_fee_adj;

   
   	l_roundedamount   =  l_iv_service_chrg_struct.minimumfee_adj +
      	               l_iv_service_chrg_struct.nil_fees_adj +
         	            l_iv_service_chrg_struct.maximum_fee_adj +
            	         l_iv_service_chrg_struct.comm_amt;


   	int_rndfeeret  = IV_Proc_Round(&l_roundedamount,
      	                  l_iv_clt_setup_struct.b_ccycd,
         	               chr_l_cod_roundedamt,
            	            l_debug_info_ptr);
   	if (int_rndfeeret== 1)
   	{
      	l_roundedamount = 0.0;
      	sscanf(chr_l_cod_roundedamt, "%lf", &l_roundedamount);
      	l_cumroundedamount = (l_cumroundedamount + l_roundedamount);
   	}
   	else
   	{
      	APL_GOBACK_FAIL
   	}
  */ 


EXEC SQL SELECT NVL(SUM(NVL(MINIMUMFEE_ADJ,0)),0), 
					 NVL(SUM(NVL(NIL_FEES_ADJ,0)),0),
					 NVL(SUM(NVL(MAXIMUM_FEE_ADJ,0)),0),
                NVL(SUM(NVL(COMM_AMT,0)),0)
			INTO  :tot_oth_min,
					:tot_oth_nil,
					:tot_oth_max,
               :tot_oth_cm_amount
			FROM  IV_SERVICE_CHRG
			WHERE CLIENT = :chr_p_client
		   AND	DATEOF_BILLING = :chr_p_billdt	
			AND   CONS_FLAG = :p_mastsub
			AND   SERVICE_CD NOT IN (:l_underbill,:l_overbill,:l_splbill,
										:l_custfee,:l_dealcode, :l_latedealcode,
             :l_booktrfr_code,:l_trnarnfee, :l_freecacode,
             :l_vpcacode,:l_minimumfeecode,:l_taxfee, :l_voldis,
				 :dbl_l_amendment,:dbl_l_admtxnfee,:dbl_l_admcustfee,:dbl_l_cashdivfee,
				 :dbl_l_bondintfee,:l_repairfee,:l_deltxnfee,:dbl_l_cashfee,:l_settalgefee,:dbl_l_bogmsgfee);

	IS_ANY_ORA_ERROR
             
l_minimumfee = l_minimumfee + tot_oth_min;
l_nil_fees = l_nil_fees + tot_oth_nil;
l_maximum_fee = l_maximum_fee + tot_oth_max;

   l_roundedamount   =  tot_oth_min +
                     tot_oth_nil +
                     tot_oth_max +
                     tot_oth_cm_amount;

   
   int_rndfeeret  = IV_Proc_Round(&l_roundedamount,
                        l_iv_clt_setup_struct.b_ccycd,
                        chr_l_cod_roundedamt,
                        l_debug_info_ptr);
   if (int_rndfeeret== 1)
   {
      l_roundedamount = 0.0;
      sscanf(chr_l_cod_roundedamt, "%lf", &l_roundedamount);
      l_cumroundedamount = (l_cumroundedamount + l_roundedamount);
   }
   else
   {
      APL_GOBACK_FAIL
   } 


fprintf(bill,"\tNIL FEE ADJUSTMENT");
l_convnil_fees = (l_nil_fees / l_exchg_rt_fee_bl);
int_nilfeeret  = IV_Proc_Round(&l_convnil_fees,l_iv_clt_setup_struct.fees_ccy,chr_f_nilfee,l_debug_info_ptr);
if (int_nilfeeret== 1)
{
		

		roundedamount = 0.0;
		memset(chr_l_amtstr, APL_NULL_CHAR, 30);

		sscanf(chr_f_nilfee, "%lf", &roundedamount);
		CO_Rtv_FormatAmtCcy(roundedamount, chr_l_amtstr, 'Y', 'Y', l_iv_clt_setup_struct.fees_ccy,l_debug_info_ptr);
		strcpy(chr_f_nilfee, chr_l_amtstr + 10); 

   
   fprintf(bill,"\t\t%s\n",chr_f_nilfee);
   (*int_currpos)++;

   

            if ((*int_currpos) + 1 > int_l_pagelength )
            {
               fprintf(bill,"^pg\n");
               (*int_currpos) =1;

					if (APL_FAILURE == IV_Proc_PrnOthHdrEMINV(bill,int_currpos,l_iv_clt_setup_struct,&int_retval,l_debug_info_ptr))
               {
                  fprintf(fl_userlog,"Could not print chr_header for Other  charges\n");
                  APL_GOBACK_FAIL;

               }
            }
}
else 
   APL_GOBACK_FAIL;

fprintf(bill,"\tMIN FEE ADJUSTMENT");
l_convminimumfee = (l_minimumfee / l_exchg_rt_fee_bl);
int_minfeeret  = IV_Proc_Round(&l_convminimumfee,l_iv_clt_setup_struct.fees_ccy,chr_f_minfee,l_debug_info_ptr);
if (int_minfeeret== 1)
{
	

	roundedamount = 0.0;
	memset(chr_l_amtstr, APL_NULL_CHAR, 30);

	sscanf(chr_f_minfee, "%lf", &roundedamount);
	CO_Rtv_FormatAmtCcy(roundedamount, chr_l_amtstr, 'Y', 'Y', l_iv_clt_setup_struct.fees_ccy,l_debug_info_ptr);
	strcpy(chr_f_minfee, chr_l_amtstr + 10); 

   fprintf(bill,"\t\t%s\n",chr_f_minfee);
   (*int_currpos)++;
   

            if ((*int_currpos) + 1 > int_l_pagelength )
            {
               fprintf(bill,"^pg\n");
               (*int_currpos) =1;

               if (APL_FAILURE == IV_Proc_PrnOthHdrEMINV(bill,int_currpos,l_iv_clt_setup_struct,&int_retval,l_debug_info_ptr))
               {
                  fprintf(fl_userlog,"Could not print chr_header for Other charges\n");
                  APL_GOBACK_FAIL;

               }
            }

}
else 
{
   APL_GOBACK_FAIL
}

fprintf(bill,"\tMAX FEE ADJUSTMENT");
maximum_feeabs   = fabs(l_maximum_fee);
l_convmaximum_feeabs = (maximum_feeabs / l_exchg_rt_fee_bl);
int_maxfeeret  = IV_Proc_Round(&l_convmaximum_feeabs,l_iv_clt_setup_struct.fees_ccy,chr_f_maxfee,l_debug_info_ptr);
if (int_maxfeeret== 1)
{
	

	roundedamount = 0.0;
	memset(chr_l_amtstr, APL_NULL_CHAR, 30);

	sscanf(chr_f_maxfee, "%lf", &roundedamount);
	CO_Rtv_FormatAmtCcy(roundedamount, chr_l_amtstr, 'Y', 'Y', l_iv_clt_setup_struct.fees_ccy,l_debug_info_ptr);
	strcpy(chr_f_maxfee, chr_l_amtstr + 10); 

   fprintf(bill,"\t\t%s\n",chr_f_maxfee);
   (*int_currpos)++;
   

            if ((*int_currpos) + 1 > int_l_pagelength )
            {
               fprintf(bill,"^pg\n");
               (*int_currpos) =1;

               if (APL_FAILURE == IV_Proc_PrnOthHdrEMINV(bill,int_currpos,l_iv_clt_setup_struct,&int_retval,l_debug_info_ptr))
               {
                  fprintf(fl_userlog,"Could not print chr_header for Other charges\n");
                  APL_GOBACK_FAIL;

               }
            }

}
else 
{
   APL_GOBACK_FAIL

}



TotOthCharge = l_othcharge + l_minimumfee + l_nil_fees + l_maximum_fee;

fprintf(bill,"\tTOTAL OTHER SERVICES COMMISSION");
dbl_l_convtotothcharge = (TotOthCharge / l_exchg_rt_fee_bl);
int_othchargeret = IV_Proc_Round(&dbl_l_convtotothcharge,l_iv_clt_setup_struct.fees_ccy,chr_f_totothcharge,l_debug_info_ptr);
if (int_othchargeret == 1)
{
	

	roundedamount = 0.0;
	memset(chr_l_amtstr, APL_NULL_CHAR, 30);

	sscanf(chr_f_totothcharge, "%lf", &roundedamount);
	CO_Rtv_FormatAmtCcy(roundedamount, chr_l_amtstr, 'Y', 'Y', l_iv_clt_setup_struct.fees_ccy,l_debug_info_ptr);
	strcpy(chr_f_totothcharge, chr_l_amtstr + 10); 

	if ( roundedamount != 0 )
	   fprintf(bill,"\t\t%s\n",chr_f_totothcharge);
	else
	   fprintf(bill,"\t\t%s\n",chr_f_totothcharge);
	(*int_currpos)++;
	

	if ((*int_currpos) + 1 >int_l_pagelength)
	{
		fprintf(bill,"^pg\n");
		(*int_currpos) = 1;
		if (APL_FAILURE == IV_Proc_PrnOthHdrEMINV(bill,int_currpos,l_iv_clt_setup_struct,&int_retval,l_debug_info_ptr))
		{
			fprintf(fl_userlog,"Could not print Other Services chr_header\n");
			APL_GOBACK_FAIL
		}

	}

}
else
	APL_GOBACK_FAIL
	





*p_tototh = TotOthCharge ;


        {

        RETURN_SUCCESS:
					APL_IF_DEBUG
					{
						CO_ProcMonitor(APL_OUT_FILE,"Exiting out of IV_Proc_PrnOth sucessfully\n",NULL,NULL);

					}
                return(APL_SUCCESS);

        RETURN_FAILURE:
					
					APL_IF_DEBUG
					{
						CO_ProcMonitor(APL_OUT_FILE,"Exiting out of IV_Proc_PrnOth unsucessfully\n",NULL,NULL);

					}

                return(APL_FAILURE);
			 }
}

int IV_Proc_PrnOthMinFeeEMINV(	FILE *bill,
					FILE *fl_userlog,
			     	char *chr_p_billdt,
             	char *chr_p_client,
	     			IV_CLIENTSETUP_STRUCT l_iv_clt_setup_struct,	
	     			char p_mastsub,
	     			double *p_tototh,
					int *int_currpos,
	    		 	DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

struct sqlca sqlca;
char *y,*v,*a,*b;
double OthCharge =0.0;
IV_SERV_MAST_STRUCT l_ivservmast_struct;
IV_SERV_OTH_STRUCT l_iv_serv_oth_structb;
PRO_SGENSTAT_STRUCT l_pro_sgenstat_struct;
IV_SERVICE_CHRG_STRUCT l_iv_service_chrg_struct;
SYS_IVCONTROLPARAM_STRUCT     l_sys_ivcntl_param_struct;
IV_CLIENTSETUP_STRUCT l_iv_clientsetup_struct;  				
IV_CLIENT_SERV_BASIS_STRUCT l_iv_client_serv_basis_structa;					

double dbl_l_convothcharge = 0.0,l_convnil_fees = 0.0,l_convminimumfee = 0.0;
double l_convmaximum_feeabs = 0.0,dbl_l_convtotothcharge = 0.0;
double l_convcmamount = 0.0;									

int int_retstat;
int int_headerlen = 8;
int int_counter;
int i;
int int_ret;
int int_newlen;
int int_cmret =0;
int int_othchargeret =0;
int int_retval =0;
int int_l_retstat =0;
char int_cd_no[IV_PARAM_LEN], int_dv_no[IV_PARAM_LEN], *temp; 

EXEC SQL BEGIN DECLARE SECTION;



	double     h_chargequantity=0.0;             
 int        int_h_intchargeqty = 0;
 int        int_h_templength = 0;
	double  h_cmamount=0.0;
	char chr_h_mstclient[11];
	char h_dl_client[11];
	double  dbl_comm=0.0;
	char    h_ccy[4];
	int     int_h_servcode;
	int     int_t_servcode =0;
   char chr_h_serv_desc[IV_DESC_LEN];  				
	char chr_h_temp_client[APL_CLIENT_LENGTH];
	char chr_h_temp_rowid[APL_ROWID_LEN];
	char chr_h_param_val[IV_PARAM_LEN];  

   double dbl_h_schfee=0.0;

	int 	int_l_pagelength = 0;
	short int_l_condexists = 0;


	short i_chargeqty;
	short i_cmamt;
	short i_mstaccount;
	short i_dl_client;
	short i_ccy;
	short i_chargebasis;
	short i_servcode;
	short i_serv_detail;								
	short i_temp_account;
	short i_temp_rowid;
	short i_proc_data_val;  
   short i_schfee;


EXEC SQL VAR l_iv_clt_setup_struct.b_ccycd IS STRING;
EXEC SQL VAR l_ivservmast_struct.service_det IS STRING;
EXEC SQL VAR l_pro_sgenstat_struct.map_desc IS  STRING;
EXEC SQL VAR chr_h_mstclient IS STRING;
EXEC SQL VAR h_dl_client IS STRING;
EXEC SQL VAR h_ccy IS STRING;
EXEC SQL VAR chr_h_serv_desc IS STRING;				
EXEC SQL VAR chr_h_temp_client IS STRING;		
EXEC SQL VAR chr_h_temp_rowid IS STRING;		
EXEC SQL VAR chr_h_param_val IS STRING;        

EXEC SQL END DECLARE SECTION;




double l_underbill = UNDERBILLING;          	
double l_overbill = OVERBILLING;					
double l_splbill = SPECIALBILLING;				

char chr_s_chargeqty[32],chr_s_tmpchargeqty[18];
char chr_s_chargeqty1[13];

double l_othcharge = 0.0;
double TotOthCharge = 0.0;
double l_minimumfee = 0.0;
double l_nil_fees = 0.0;
double l_maximum_fee = 0.0;
double maximum_feeabs = 0.0;


double tot_oth_min = 0.0;				
double tot_oth_nil = 0.0;			
double tot_oth_max = 0.0;		
double l_exchg_rt_fee_bl=1.0;

double tot_oth_cm_amount = 0.0;

double	l_custfee = CUSTODYFEE;
double	l_dealcode = TXNFEE;
double	l_latedealcode		= LATETXNFEE;
double  l_booktrfr_code = IV_BOOKTRF_FEE;
double l_freecacode = FREECAFEE;
double l_vpcacode = VPCAFEE;
double l_trnarnfee = TURNAROUNDTXNFEE;
double	l_minimumfeecode	= MINFEECODE;
double	l_taxfee	= TAXFEE;
double	l_voldis	= VOLDISCOUNTFEE;
double   dbl_l_amendment = AMEND_FEE_IND ;

double   dbl_l_admtxnfee =ADM_TXN_FEE_IND ;
double dbl_l_admcustfee =ADM_CUST_FEE_IND;
double dbl_l_cashdivfee =CASH_DIV_FEE ;
double dbl_l_bondintfee = IV_BONDINT_FEE;
double l_repairfee = REPAIRFEE ;
double l_deltxnfee = DELV_TXN_FEE ;
double dbl_l_cashfee = CASH_ITEMS ;
double l_settalgefee = SETTALGEFEE ;
double dbl_l_bogmsgfee = BOG_MSG_FEE;

int int_maxfeeret = 0;
int int_minfeeret = 0;
int int_nilfeeret = 0;

char chr_f_cmamt[20], chr_f_othcharge[30], chr_f_totothcharge[30];
char chr_f_cmamt1[20];
char chr_f_minfee[30], chr_f_nilfee[30], chr_f_maxfee[30];
char chr_l_amtstr[30], chr_l_chgqtystr[30];
double roundedamount = 0.0; 
double   l_roundedamount = 0.0,l_cumroundedamount = 0.0;
int      int_rndfeeret =0;
char     chr_l_cod_roundedamt[22] = APL_NULL_STRING;

sqlca.sqlcode=0;
memset(chr_f_cmamt, APL_NULL_CHAR, 20);
memset(chr_f_cmamt1, APL_NULL_CHAR, 20);
memset(chr_f_othcharge, APL_NULL_CHAR, 30);
memset(chr_f_totothcharge, APL_NULL_CHAR, 30);
memset(chr_f_minfee, APL_NULL_CHAR, 30);
memset(chr_f_nilfee, APL_NULL_CHAR, 30);
memset(chr_l_amtstr, APL_NULL_CHAR, 30);
memset(chr_l_chgqtystr, APL_NULL_CHAR, 30);

#	ifdef SYS_DEBUG
	fprintf(APL_OUT_FILE,"Entering IV_Proc_PrnOth\n");
	fprintf(APL_OUT_FILE,"Inside IV_Proc_PrnFooter\n");
   fprintf(APL_OUT_FILE,"the billdt  is  %s\n",chr_p_billdt);
	fprintf(APL_OUT_FILE,"the mastsub is  %s\n",p_mastsub);
	fprintf(APL_OUT_FILE,"the client is  %s\n",chr_p_client);
	fprintf(APL_OUT_FILE,"are the pointers geting too much\n");
	fprintf(APL_OUT_FILE,"the country h_code is (%s)\n",g_mt_commonsys_params_struct_h.nation_code);
	#	endif

   
   if ( APL_FAILURE == CO_Chk_CntryEnabled( "BILL_PRINTING",
                                          "PAGE_LENGTH",
                                          &int_l_condexists,
                                          l_debug_info_ptr) )
   {
      APL_GOBACK_FAIL
   }

   if (int_l_condexists)
      int_l_pagelength = 70;
   else  int_l_pagelength = 58;

if ((*int_currpos) + int_headerlen >int_l_pagelength)
{
	fprintf(bill,"^pg\n");
	(*int_currpos) = 1;
	if (APL_FAILURE == IV_Proc_PrnOthHdrEMINV(bill,int_currpos,l_iv_clt_setup_struct,&int_retval,l_debug_info_ptr))
	{
		fprintf(fl_userlog,"Could not print Other Services chr_header\n");
		APL_GOBACK_FAIL
	}

}
else
{

if (APL_FAILURE == IV_Proc_PrnOthHdrEMINV(bill,int_currpos,l_iv_clt_setup_struct,&int_retval,l_debug_info_ptr))
{
	fprintf(fl_userlog,"Could not print Other Services chr_header\n");
	APL_GOBACK_FAIL
}

}

int_retstat = IV_SUCCESS;

IV_Rtv_IVCUSTSETUP(chr_p_client,&l_iv_clientsetup_struct,&int_retstat,l_debug_info_ptr);
if (int_retstat == IV_SUCCESS || int_retstat == IV_COLUMN_NULL_ERR)
	{   
     l_exchg_rt_fee_bl = 1.0;
     if (strcmp( l_iv_clientsetup_struct.fees_ccy, l_iv_clientsetup_struct.b_ccycd) != 0)
        {
           int_retstat = IV_SUCCESS;
	
	   
           if(APL_FAILURE == ConvToFxFn_GR(l_iv_clientsetup_struct.fees_ccy,l_iv_clientsetup_struct.b_ccycd,g_mt_commonsys_params_struct_h.dom_ccy,chr_p_billdt,&l_exchg_rt_fee_bl, &int_retstat,l_debug_info_ptr))   
           {
              fprintf(fl_userlog,"Error : Exchange Rate not int_found for currency %s %s\n",l_iv_clientsetup_struct.fees_ccy,l_iv_clientsetup_struct.b_ccycd); 
              fflush(fl_userlog);
           }
		  }
	 }		
 else if(int_retstat == IV_CRITCAL_ERROR_IND)
    {
       fprintf(fl_userlog,"Error : Account %s  not int_found in billing system\n",l_iv_client_serv_basis_structa.client);
       fflush(fl_userlog);
       int_retstat = IV_CRITCAL_ERROR_IND;
       if(APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
         {
            CO_ProcMonitor(APL_OUT_FILE,APL_NULL_STRING,l_debug_info_ptr,NULL);
            CO_FreeErrLst(l_debug_info_ptr);
         }

       APL_GOBACK_FAIL
    }
  


	memset(&l_sys_ivcntl_param_struct, NULL, sizeof(SYS_IVCONTROLPARAM_STRUCT));
   if (APL_FAILURE == IV_Rtv_IVCNTLPARAM(&l_sys_ivcntl_param_struct,
                                       &int_l_retstat,
                                       l_debug_info_ptr))
   {
      if (int_l_retstat == IV_NO_DATA_FOUND_ERR)
      {
         fprintf(fl_userlog,"Billing Control Parameters Have Not Been Set Up\n");
         CO_InsertErr(l_debug_info_ptr,
                        ERR_BILLCNTRL_PARAM_NOTFND,
                        APL_NULL_STRING,
                        APL_NULL_STRING,
                        APL_NULL_STRING,
                        __LINE__,
                        __FILE__);
         APL_GOBACK_FAIL
      }
   }



EXEC SQL DECLARE curminfeeoth CURSOR FOR
SELECT 0,0,NVL(a.COMM_AMT,0),a.SERVICE_CD,'MINFEEADJ:'||a.CLIENT as service_det,a.client,'',a.rowid
FROM IV_SERVICE_CHRG a
WHERE a.MASTER_CLT =:chr_p_client
AND a.CLIENT IN ( SELECT DISTINCT Y.CLN_CODE FROM MT_CLIENT Y,IV_CLIENTSETUP X
                    WHERE Y.CLN_MASTER =:chr_p_client
                      AND Y.CLN_BILLABLEIND='Y'
                      AND Y.STATUS='AA'
                      AND X.MINIMUMFEE_TO <> 'Y'
							 AND Y.CLN_CODE=X.CLIENT and X.B_GEN_IND = decode(	Y.CLN_CODE,Y.CLN_MASTER,'S','M'))
AND a.DATEOF_BILLING = :chr_p_billdt
AND a.SERVICE_CD =:l_minimumfeecode 
AND :p_mastsub = 'C'
AND a.cons_flag = 'C'
UNION
SELECT 0,0,NVL(a.COMM_AMT,0),a.SERVICE_CD,'MINFEEADJ:'||a.CLIENT as service_det,a.client,'',a.rowid
FROM IV_SERVICE_CHRG a
WHERE a.MASTER_CLT =:chr_p_client
AND a.CLIENT IN ( SELECT DISTINCT Y.CLN_CODE FROM MT_CLIENT Y,IV_CLIENTSETUP X
                    WHERE Y.CLN_MASTER =:chr_p_client
                      AND Y.CLN_BILLABLEIND='Y'
                      AND Y.STATUS='AA'
                      AND X.MINIMUMFEE_TO ='Y'
                      AND Y.CLN_CODE=X.CLIENT and X.B_GEN_IND = decode( Y.CLN_CODE,Y.CLN_MASTER,'S','M'))
AND a.DATEOF_BILLING = :chr_p_billdt
AND a.SERVICE_CD =:l_minimumfeecode
AND :p_mastsub = 'C'
AND a.cons_flag = 'C'
UNION
SELECT 0,0,NVL(a.COMM_AMT,0),a.SERVICE_CD,'MINFEEADJ:'||a.CLIENT as service_det,a.client,'',a.rowid
FROM IV_SERVICE_CHRG a
WHERE a.CLIENT =:chr_p_client
AND a.DATEOF_BILLING = :chr_p_billdt
AND a.SERVICE_CD =:l_minimumfeecode 
AND :p_mastsub = 'I'
AND a.cons_flag = 'I'
ORDER BY 4,6;

IS_ANY_ORA_ERROR

OthCharge = *p_tototh;

EXEC SQL OPEN curminfeeoth;

IS_ANY_ORA_ERROR

if (sqlca.sqlcode <0)
{
	fprintf(fl_userlog,"db Error(BTRANSAC)\n");
	APL_GOBACK_FAIL
}

int_counter =0;

for(;;)
{
	EXEC SQL FETCH curminfeeoth INTO :dbl_h_schfee:i_schfee,:h_chargequantity:i_chargeqty,
	:h_cmamount:i_cmamt,:int_h_servcode:i_servcode,:chr_h_serv_desc:i_serv_detail,:chr_h_temp_client:i_temp_account,:chr_h_param_val:i_proc_data_val,chr_h_temp_rowid:i_temp_rowid;
	IS_ANY_ORA_ERROR	

	if (sqlca.sqlcode ==1403)
	{
		 break;
	}
	int_counter++;

 
      
   if(APL_FAILURE == CO_PadString(chr_h_serv_desc,'R',25," ",l_debug_info_ptr))
      APL_GOBACK_FAIL

	int_t_servcode = int_h_servcode;

   memset(chr_s_chargeqty,'\0',32);
   memset(chr_s_chargeqty1,'\0',13);
	memset(chr_s_tmpchargeqty,'\0',18);
  strcpy(chr_s_tmpchargeqty,APL_NULL_STRING); 
  strcpy(chr_s_chargeqty,APL_NULL_STRING); 
  strcpy(chr_s_chargeqty1,APL_NULL_STRING); 
	 
		{
       int_h_intchargeqty = 0;
       int_h_intchargeqty = (int)h_chargequantity;
		sprintf(chr_s_tmpchargeqty,"%d",int_h_intchargeqty);
		}
	

 int_h_templength = 0;
 int_h_templength = strlen(chr_s_tmpchargeqty);
 
 strncpy(chr_s_chargeqty,"             ",(16-int_h_templength));
	strcat(chr_s_chargeqty,chr_s_tmpchargeqty);
	strcat(chr_s_chargeqty,APL_NULL_STRING);
	roundedamount = 0.0;
	memset(chr_l_chgqtystr, APL_NULL_CHAR, 30);
	sscanf(chr_s_chargeqty, "%lf", &roundedamount);
	CO_Rtv_FormatAmt(roundedamount, chr_l_chgqtystr, 'Y', 'Y', l_debug_info_ptr); 
	strcpy(chr_s_chargeqty, chr_l_chgqtystr + 12); 

   CO_Trim(chr_s_chargeqty,' ','L',chr_s_chargeqty1,l_debug_info_ptr);

   l_convcmamount = (dbl_h_schfee / l_exchg_rt_fee_bl);	
	int_cmret = IV_Proc_Round (&l_convcmamount,l_iv_clt_setup_struct.fees_ccy,chr_f_cmamt,l_debug_info_ptr); 

	if (int_cmret ==1)
	{
		

		roundedamount = 0.0;
		memset(chr_l_amtstr, APL_NULL_CHAR, 30);

		sscanf(chr_f_cmamt, "%lf", &roundedamount);
		CO_Rtv_FormatAmtCcy(roundedamount, chr_l_amtstr, 'Y', 'Y', l_iv_clt_setup_struct.fees_ccy,l_debug_info_ptr);
		strcpy(chr_f_cmamt, chr_l_amtstr + 10);
   	CO_Trim(chr_f_cmamt,' ','L',chr_f_cmamt1,l_debug_info_ptr);
   	if(APL_FAILURE == CO_PadString(chr_f_cmamt1,'L',25," ",l_debug_info_ptr))
   		APL_GOBACK_FAIL

	}
		else
			APL_GOBACK_FAIL
   
	

	
	fprintf(bill,"%s\t%s\t%s",chr_s_chargeqty1,chr_h_serv_desc,chr_f_cmamt1);

	
	
	l_convcmamount = (h_cmamount / l_exchg_rt_fee_bl);	
	int_cmret = IV_Proc_Round (&l_convcmamount,l_iv_clt_setup_struct.fees_ccy,chr_f_cmamt,l_debug_info_ptr); 

	if (int_cmret ==1)
	{
		

		roundedamount = 0.0;
		memset(chr_l_amtstr, APL_NULL_CHAR, 30);

		sscanf(chr_f_cmamt, "%lf", &roundedamount);
		CO_Rtv_FormatAmtCcy(roundedamount, chr_l_amtstr, 'Y', 'Y', l_iv_clt_setup_struct.fees_ccy,l_debug_info_ptr);
		strcpy(chr_f_cmamt, chr_l_amtstr + 10);
   	CO_Trim(chr_f_cmamt,' ','L',chr_f_cmamt1,l_debug_info_ptr);
   	if(APL_FAILURE == CO_PadString(chr_f_cmamt1,'L',25," ",l_debug_info_ptr))
   		APL_GOBACK_FAIL

	}
		else
			APL_GOBACK_FAIL
   
	fprintf(bill,"\t%s\n",chr_f_cmamt1);
	(*int_currpos)++;

	

	if ((*int_currpos) + 1 >int_l_pagelength)
	{
		fprintf(bill,"^pg\n");
		(*int_currpos) = 1;
		if (APL_FAILURE == IV_Proc_PrnOthHdrEMINV(bill,int_currpos,l_iv_clt_setup_struct,&int_retval,l_debug_info_ptr))
		{
			fprintf(fl_userlog,"Could not print Other Services chr_header\n");
			APL_GOBACK_FAIL
		}
   }

		
	
	OthCharge=OthCharge + h_cmamount;
	
} 

EXEC SQL CLOSE curminfeeoth;  

IS_ANY_ORA_ERROR	

if (int_counter ==0 )
{
	fprintf(bill,"\n\tNO OTHER CHARGES FOR ACCOUNT %s\n\n",chr_p_client);
	(*int_currpos)++;
	(*int_currpos)++;
	(*int_currpos)++;
}




if ((*int_currpos) + 1 >int_l_pagelength)
{
	fprintf(bill,"^pg\n");
	(*int_currpos) = 1;
	if (APL_FAILURE == IV_Proc_PrnOthHdrEMINV(bill,int_currpos,l_iv_clt_setup_struct,&int_retval,l_debug_info_ptr))
	{
		fprintf(fl_userlog,"Could not print Other Services chr_header\n");
		APL_GOBACK_FAIL
	}

}

l_othcharge = OthCharge;

fprintf(bill,"\n\tOTHER SERVICES COMMISSION");
(*int_currpos)++;
  
dbl_l_convothcharge = (OthCharge / l_exchg_rt_fee_bl);
int_othchargeret = IV_Proc_Round(&dbl_l_convothcharge,l_iv_clt_setup_struct.fees_ccy,chr_f_othcharge,l_debug_info_ptr);
if (int_othchargeret == 1)
{
		

		roundedamount = 0.0;
		memset(chr_l_amtstr, APL_NULL_CHAR, 30);

		sscanf(chr_f_othcharge, "%lf", &roundedamount);
		CO_Rtv_FormatAmtCcy(roundedamount, chr_l_amtstr, 'Y', 'Y', l_iv_clt_setup_struct.fees_ccy,l_debug_info_ptr);
		strcpy(chr_f_othcharge, chr_l_amtstr + 10); 

	if ( roundedamount != 0 )
	   fprintf(bill,"\t\t%s\n",chr_f_othcharge);
	else
	   fprintf(bill,"\t\t%s\n",chr_f_othcharge);
	(*int_currpos)++;

	if ((*int_currpos) + 1 >int_l_pagelength)
	{
		fprintf(bill,"^pg\n");
		(*int_currpos) = 1;
		if (APL_FAILURE == IV_Proc_PrnOthHdrEMINV(bill,int_currpos,l_iv_clt_setup_struct,&int_retval,l_debug_info_ptr))
		{
			fprintf(fl_userlog,"Could not print Other Services chr_header\n");
			APL_GOBACK_FAIL
		}

	}

}
else
	APL_GOBACK_FAIL
	





if (APL_FAILURE == IV_Rtv_IVSRVCHRG(chr_p_billdt,
												chr_p_client,
												p_mastsub,
												MINFEECODE,
												&l_iv_service_chrg_struct,
												&int_retstat,
												l_debug_info_ptr))
{
   if (int_retstat == IV_CRITCAL_ERROR_IND)
   {
         APL_GOBACK_FAIL
   }
   else if (int_retstat == IV_NO_DATA_FOUND_ERR)
   {
      l_iv_service_chrg_struct.nil_fees_adj =0;
      l_iv_service_chrg_struct.minimumfee_adj =0;
      l_iv_service_chrg_struct.maximum_fee_adj =0;

   }
}

l_minimumfee = l_minimumfee + l_iv_service_chrg_struct.minimumfee_adj ;
l_nil_fees = l_nil_fees + l_iv_service_chrg_struct.nil_fees_adj;
l_maximum_fee = l_maximum_fee + l_iv_service_chrg_struct.maximum_fee_adj;

   
   	l_roundedamount   =  l_iv_service_chrg_struct.minimumfee_adj +
      	               l_iv_service_chrg_struct.nil_fees_adj +
         	            l_iv_service_chrg_struct.maximum_fee_adj +
            	         l_iv_service_chrg_struct.comm_amt;


   	int_rndfeeret  = IV_Proc_Round(&l_roundedamount,
      	                  l_iv_clt_setup_struct.b_ccycd,
         	               chr_l_cod_roundedamt,
            	            l_debug_info_ptr);
   	if (int_rndfeeret== 1)
   	{
      	l_roundedamount = 0.0;
      	sscanf(chr_l_cod_roundedamt, "%lf", &l_roundedamount);
      	l_cumroundedamount = (l_cumroundedamount + l_roundedamount);
   	}
   	else
   	{
      	APL_GOBACK_FAIL
   	}
   

fprintf(bill,"\tNIL FEE ADJUSTMENT");
l_convnil_fees = (l_nil_fees / l_exchg_rt_fee_bl);
int_nilfeeret  = IV_Proc_Round(&l_convnil_fees,l_iv_clt_setup_struct.fees_ccy,chr_f_nilfee,l_debug_info_ptr);
if (int_nilfeeret== 1)
{
		

		roundedamount = 0.0;
		memset(chr_l_amtstr, APL_NULL_CHAR, 30);

		sscanf(chr_f_nilfee, "%lf", &roundedamount);
		CO_Rtv_FormatAmtCcy(roundedamount, chr_l_amtstr, 'Y', 'Y', l_iv_clt_setup_struct.fees_ccy,l_debug_info_ptr);
		strcpy(chr_f_nilfee, chr_l_amtstr + 10); 

   
   fprintf(bill,"\t\t%s\n",chr_f_nilfee);
   (*int_currpos)++;

   

            if ((*int_currpos) + 1 > int_l_pagelength )
            {
               fprintf(bill,"^pg\n");
               (*int_currpos) =1;

					if (APL_FAILURE == IV_Proc_PrnOthHdrEMINV(bill,int_currpos,l_iv_clt_setup_struct,&int_retval,l_debug_info_ptr))
               {
                  fprintf(fl_userlog,"Could not print chr_header for Other  charges\n");
                  APL_GOBACK_FAIL;

               }
            }
}
else 
   APL_GOBACK_FAIL;

fprintf(bill,"\tMIN FEE ADJUSTMENT");
l_convminimumfee = (l_minimumfee / l_exchg_rt_fee_bl);
int_minfeeret  = IV_Proc_Round(&l_convminimumfee,l_iv_clt_setup_struct.fees_ccy,chr_f_minfee,l_debug_info_ptr);
if (int_minfeeret== 1)
{
	

	roundedamount = 0.0;
	memset(chr_l_amtstr, APL_NULL_CHAR, 30);

	sscanf(chr_f_minfee, "%lf", &roundedamount);
	CO_Rtv_FormatAmtCcy(roundedamount, chr_l_amtstr, 'Y', 'Y', l_iv_clt_setup_struct.fees_ccy,l_debug_info_ptr);
	strcpy(chr_f_minfee, chr_l_amtstr + 10); 

   fprintf(bill,"\t\t%s\n",chr_f_minfee);
   (*int_currpos)++;
   

            if ((*int_currpos) + 1 > int_l_pagelength )
            {
               fprintf(bill,"^pg\n");
               (*int_currpos) =1;

               if (APL_FAILURE == IV_Proc_PrnOthHdrEMINV(bill,int_currpos,l_iv_clt_setup_struct,&int_retval,l_debug_info_ptr))
               {
                  fprintf(fl_userlog,"Could not print chr_header for Other charges\n");
                  APL_GOBACK_FAIL;

               }
            }

}
else 
{
   APL_GOBACK_FAIL
}

fprintf(bill,"\tMAX FEE ADJUSTMENT");
maximum_feeabs   = fabs(l_maximum_fee);
l_convmaximum_feeabs = (maximum_feeabs / l_exchg_rt_fee_bl);
int_maxfeeret  = IV_Proc_Round(&l_convmaximum_feeabs,l_iv_clt_setup_struct.fees_ccy,chr_f_maxfee,l_debug_info_ptr);
if (int_maxfeeret== 1)
{
	

	roundedamount = 0.0;
	memset(chr_l_amtstr, APL_NULL_CHAR, 30);

	sscanf(chr_f_maxfee, "%lf", &roundedamount);
	CO_Rtv_FormatAmtCcy(roundedamount, chr_l_amtstr, 'Y', 'Y', l_iv_clt_setup_struct.fees_ccy,l_debug_info_ptr);
	strcpy(chr_f_maxfee, chr_l_amtstr + 10); 

   fprintf(bill,"\t\t%s\n",chr_f_maxfee);
   (*int_currpos)++;
   

            if ((*int_currpos) + 1 > int_l_pagelength )
            {
               fprintf(bill,"^pg\n");
               (*int_currpos) =1;

               if (APL_FAILURE == IV_Proc_PrnOthHdrEMINV(bill,int_currpos,l_iv_clt_setup_struct,&int_retval,l_debug_info_ptr))
               {
                  fprintf(fl_userlog,"Could not print chr_header for Other charges\n");
                  APL_GOBACK_FAIL;

               }
            }

}
else 
{
   APL_GOBACK_FAIL

}



TotOthCharge = l_othcharge + l_minimumfee + l_nil_fees + l_maximum_fee;

fprintf(bill,"\tTOTAL OTHER SERVICES COMMISSION");
dbl_l_convtotothcharge = (TotOthCharge / l_exchg_rt_fee_bl);
int_othchargeret = IV_Proc_Round(&dbl_l_convtotothcharge,l_iv_clt_setup_struct.fees_ccy,chr_f_totothcharge,l_debug_info_ptr);
if (int_othchargeret == 1)
{
	

	roundedamount = 0.0;
	memset(chr_l_amtstr, APL_NULL_CHAR, 30);

	sscanf(chr_f_totothcharge, "%lf", &roundedamount);
	CO_Rtv_FormatAmtCcy(roundedamount, chr_l_amtstr, 'Y', 'Y', l_iv_clt_setup_struct.fees_ccy,l_debug_info_ptr);
	strcpy(chr_f_totothcharge, chr_l_amtstr + 10); 

	if ( roundedamount != 0 )
	   fprintf(bill,"\t\t%s\n",chr_f_totothcharge);
	else
	   fprintf(bill,"\t\t%s\n",chr_f_totothcharge);
	(*int_currpos)++;
	

	if ((*int_currpos) + 1 >int_l_pagelength)
	{
		fprintf(bill,"^pg\n");
		(*int_currpos) = 1;
		if (APL_FAILURE == IV_Proc_PrnOthHdrEMINV(bill,int_currpos,l_iv_clt_setup_struct,&int_retval,l_debug_info_ptr))
		{
			fprintf(fl_userlog,"Could not print Other Services chr_header\n");
			APL_GOBACK_FAIL
		}

	}

}
else
	APL_GOBACK_FAIL
	





*p_tototh = TotOthCharge ;


        {

        RETURN_SUCCESS:
					APL_IF_DEBUG
					{
						CO_ProcMonitor(APL_OUT_FILE,"Exiting out of IV_Proc_PrnOth sucessfully\n",NULL,NULL);

					}
                return(APL_SUCCESS);

        RETURN_FAILURE:
					
					APL_IF_DEBUG
					{
						CO_ProcMonitor(APL_OUT_FILE,"Exiting out of IV_Proc_PrnOth unsucessfully\n",NULL,NULL);

					}

                return(APL_FAILURE);
			 }
}
