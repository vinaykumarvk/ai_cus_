/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2020 Intellect Design Arena Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Intellect Design Arena Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Intellect Design Arena Limited.
*/
/*********************************************************************
 *
 * Module Name         :      Master Maintenance
 *
 * File Name           :      FPI_Repair_DL_Deal.pc
 *
 * Description         :      This file contains db functions for updating
 *                            Master Details.
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author         Description       RFS No.
 * ---------   --------  ------------     -------------     ---------
 * 29/01/2024   1.0       RAHUL        New file       FPI_Repair_DL_Deal.pc
 *********************************************************************/


#include "CO_HostStructdef.h"
#include "CA_InterFace.h"
#include "CA_Common.h"
#include "Intellect_Common.h"
#define APL_DEPO_NSDL "NSDL"

EXEC SQL INCLUDE SQLCA.H;


int	FPI_DL_Deal(	SYS_DL_DEAL_STRUCT_H			*p_sys_dl_deal_struct_h,
							INTL_ENV_DATA_STRUCT_H	*p_intlenv_data_struct_h,
							char *l_Deal_flag,
							DEBUG_INFO_STRUCT_H			**l_debug_info_ptr)
{
	
	APL_FUNCTION_ENTER(APL_OUT_FILE);
	DL_DEALREPAIR_STRUCT_H *p_dl_dealrepair_struct_h;
	
		char l_sur_flag[2]= APL_NULL_STRING;
		char l_first_trad[2]= APL_NULL_STRING;
		char l_sur_date[APL_DATE_LEN]= APL_NULL_STRING;
		char l_cool_date[APL_DATE_LEN]= APL_NULL_STRING;
		char l_discls_date[APL_DATE_LEN]= APL_NULL_STRING;
		char l_rst_date[APL_DATE_LEN]= APL_NULL_STRING;
		char l_dl_date[APL_DATE_LEN]= APL_NULL_STRING;
        char ErrorDesc_var[1000];
        char l_str_clientCode[20];
		char l_str_instr[10];
        char lStrFPIAQry[2000];
        char ErrorDesc[1000];
		char lStrFPIFQry[2000];
		char lStrNSDLQry[2000];
		char lStrDiscSurrQry[2000];
		char lStrSurrQry[2000];
		char lStrFPISurrQry[2000];
		int l_FPI_CNT=0;	
		int repair_cnt=0;
		int l_instr_cnt=0;
		short i_sur_flag   = 0;
		short i_first_trade   = 0;
		short i_sur_date   = 0;
		short i_cool_date   = 0;
		short i_discls_date   = 0;
		short i_rst_date   = 0;
		short i_dl_date   = 0;

	p_dl_dealrepair_struct_h =  (DL_DEALREPAIR_STRUCT_H *)calloc(1,sizeof(DL_DEALREPAIR_STRUCT_H));
	APL_MALLOC_FAIL(p_dl_dealrepair_struct_h);
	memset(p_dl_dealrepair_struct_h,NULL,sizeof(DL_DEALREPAIR_STRUCT_H));
		
	Alert("Before l_str_clientCode: %s",p_sys_dl_deal_struct_h->h_dl_client);
	Alert("Before l_str_instr: %s",p_sys_dl_deal_struct_h->h_instr_code);
	Alert("Before l_dl_date: %s",p_sys_dl_deal_struct_h->h_dlt);
	strcpy(l_dl_date, p_sys_dl_deal_struct_h->h_dlt);
    strcpy(l_str_clientCode, p_sys_dl_deal_struct_h->h_dl_client);
	strcpy(l_str_instr, p_sys_dl_deal_struct_h->h_instr_code);
	Alert("after l_str_clientCode: %s",p_sys_dl_deal_struct_h->h_dl_client);
	Alert("after l_str_instr: %s",p_sys_dl_deal_struct_h->h_instr_code);
	Alert("after l_dl_date: %s",p_sys_dl_deal_struct_h->h_dlt);
	
	if( (strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_MODIFY)==0) || (strcmp(p_intlenv_data_struct_h->h_mode, APL_FUNC_INPUT)==0) || (strcmp(p_intlenv_data_struct_h->h_mode,RPR_MODE)==0) )  
	{
		
	//Restrict For otheres start by Rahul
    if((repair_cnt == 0) && ((strcmp(p_sys_dl_deal_struct_h->h_dealcd,"2")==0) ||  (strcmp(p_sys_dl_deal_struct_h->h_dealcd,"4")==0))) 
	{ 
	EXEC SQL SELECT count (*) INTO :repair_cnt FROM MT_FPI_NSDL_RESTRICTION A WHERE CLIENT =:p_sys_dl_deal_struct_h->h_dl_client and RESTRICTON_ON='O' AND A.INSTR_CODE = :p_sys_dl_deal_struct_h->h_instr_code;
	
	Alert("RAHUL1 st1:sqlca.sqlcode |%d| \n",sqlca.sqlcode);	
	
	IS_ANY_ORA_ERROR
	Alert("1st:sqlca.sqlcode |%d| \n",sqlca.sqlcode);	
	Alert("1st:repair_cnt |%d| \n",repair_cnt);	

	if(repair_cnt > 0)
	{
		CO_InsertErr(l_debug_info_ptr, 
								ERROR_RESTRICTON_ON_OTHINST, 
								p_sys_dl_deal_struct_h->h_indentity_no,
								APL_NULL_STRING, 
								APL_NULL_STRING, 
								__LINE__, 
								__FILE__);
					  		
		
	}
	}
	//Restrict For otheres end by Rahul
	if((repair_cnt == 0) && ((strcmp(p_sys_dl_deal_struct_h->h_dealcd,"2")==0) ||  (strcmp(p_sys_dl_deal_struct_h->h_dealcd,"4")==0))) 
	{ 
	EXEC SQL SELECT count (*) INTO :repair_cnt FROM MT_FPI_NSDL_RESTRICTION A WHERE CLIENT =:p_sys_dl_deal_struct_h->h_dl_client and RESTRICTON_ON='O' AND  A.INSTR_SUB_TYPE = (select INSTR_SUB_TYPE from mt_instrument B where  B.instr_code= :p_sys_dl_deal_struct_h->h_instr_code );
	
	Alert("CLLM st1:sqlca.sqlcode |%d| \n",sqlca.sqlcode);	
	
	IS_ANY_ORA_ERROR
	Alert("1st:sqlca.sqlcode |%d| \n",sqlca.sqlcode);	
	Alert("1st:repair_cnt |%d| \n",repair_cnt);	
	if(repair_cnt > 0)
	{
		CO_InsertErr(l_debug_info_ptr, 
								ERROR_RESTRICTON_ON_OTHER, 
								p_sys_dl_deal_struct_h->h_indentity_no,
								APL_NULL_STRING, 
								APL_NULL_STRING, 
								__LINE__, 
								__FILE__);
					  		
		
	}
	}
	
	Alert("coming FPI_DEAL");
	Alert("2nd:sqlca.sqlcode |%d| \n",sqlca.sqlcode);	
	Alert("2nd:repair_cnt |%d| \n",repair_cnt);	         
	
	if((repair_cnt == 0) && ((strcmp(p_sys_dl_deal_struct_h->h_dealcd,"2")==0) ||  (strcmp(p_sys_dl_deal_struct_h->h_dealcd,"4")==0)))
	{		 
        Alert("Inside RESTRICTON_ON=F or Breach Type=O");	

        sprintf(lStrFPIFQry,"SELECT CASE WHEN (TO_DATE('%s', 'DD/MM/YYYY hh24:mi:ss') <= COOLING_OF_DATE)  THEN 'Deal Date is On or Less than the Cooling Of Date' ELSE CASE WHEN  ((TO_DATE('%s', 'DD/MM/YYYY HH24:MI:SS')  <= COOLING_OF_DATE) OR (TO_DATE('%s', 'DD/MM/YYYY HH24:MI:SS') > DISCLOSURE_DUE_DATE))  THEN  'Deal Date is Not between the Cooling Date and Disclosure Date' END END  as ERRORDESC  FROM (SELECT COOLING_OF_DATE, DISCLOSURE_DUE_DATE  FROM  MT_FPI_NSDL_RESTRICTION A  WHERE  A.CLIENT = '%s' AND A.STATUS = 'AA' AND  A.RESTRICTON_ON = 'F' AND  A.BREACH_TYPE ='O' AND   (A.INSTR_CODE = '%s' or CORP_GROUP = (select B.INSTR_CORPORATE_GRP from mt_instrument B where B.instr_code='%s')) AND (getclientparambyid('FPI_CMP_LMT_CHK','%s') = 'Y') AND exists (SELECT 1 FROM PRO_SGENSTAT WHERE MAP_TYPE = 'INS_SUB_TYPE_ALW_AUM'  AND MAP_VAL IN ('EQ','EU'))) ",l_dl_date, l_dl_date, l_dl_date,l_str_clientCode,l_str_instr,l_str_instr, l_str_clientCode);
		  
		EXEC SQL PREPARE pStmt1 FROM :lStrFPIFQry;
		EXEC SQL DECLARE cSysCursor1 CURSOR FOR pStmt1;
		EXEC SQL OPEN cSysCursor1;
		IS_ANY_ORA_ERROR;
    
		for( ; ; ) {
			EXEC SQL FETCH cSysCursor1 INTO :ErrorDesc_var;			
			if (sqlca.sqlcode != 0) {
				break;
			}

			strcpy(ErrorDesc, ErrorDesc_var);
			Alert("Error Description in 1st For Loop %s", ErrorDesc);
		  
			if (strlen(ErrorDesc_var) > 0) {
			   repair_cnt++;
			   if (strcmp(ErrorDesc_var, "Deal Date is On or Less than the Cooling Of Date") == 0) {
					 CO_InsertErr(l_debug_info_ptr,
								  LESS_THAN_COOLING_DATE,
								  p_sys_dl_deal_struct_h->h_indentity_no,
								  APL_NULL_STRING,
								  APL_NULL_STRING, 
								   __LINE__,
								   __FILE__);
				} else {
				// Deal Date is Not between the Cooling Date and Disclosure Date
					 CO_InsertErr(l_debug_info_ptr,
								  DISCLOSER_DATE_ERROR,
								  p_sys_dl_deal_struct_h->h_indentity_no,
								  APL_NULL_STRING,
								  APL_NULL_STRING,
								  __LINE__,
								   __FILE__);
				}
			}
		}

		EXEC SQL CLOSE cSysCursor1;		  

	} 
		
	Alert("3rs:sqlca.sqlcode |%d| \n",sqlca.sqlcode);	
	Alert("3rd:repair_cnt |%d| \n",repair_cnt);	    	
	if((repair_cnt == 0) && ((strcmp(p_sys_dl_deal_struct_h->h_dealcd,"2")==0) ||  (strcmp(p_sys_dl_deal_struct_h->h_dealcd,"4")==0)))
	{
    
		Alert("Inside RESTRICTON_ON=F or Breach Type=A");		 
	  
	  
		sprintf(lStrFPIAQry, "SELECT CASE WHEN (TO_DATE('%s', 'DD/MM/YYYY HH24:MI:SS') <= REALLIGN_DUE_DATE) THEN 'Deal Date is On or Less than the Reallign Due Date' ELSE CASE WHEN ((TO_DATE('%s', 'DD/MM/YYYY HH24:MI:SS')  <= REALLIGN_DUE_DATE) OR (TO_DATE('%s', 'DD/MM/YYYY HH24:MI:SS') > DISCLOSURE_DUE_DATE)) THEN 'Deal Date is Not between the Reallign Due Date and Disclosure Date' END END AS ERRORDESC FROM (SELECT  REALLIGN_DUE_DATE, DISCLOSURE_DUE_DATE FROM MT_FPI_NSDL_RESTRICTION A WHERE A.CLIENT = '%s' AND A.STATUS = 'AA' AND A.RESTRICTON_ON = 'F' AND A.BREACH_TYPE = 'A' AND (getclientparambyid('FPI_CMP_LMT_CHK', '%s') = 'Y') AND EXISTS (SELECT 1 FROM PRO_SGENSTAT WHERE MAP_TYPE = 'INS_SUB_TYPE_ALW_AUM' AND MAP_VAL IN ('EQ', 'EU'))) ", l_dl_date, l_dl_date, l_dl_date,l_str_clientCode, l_str_clientCode);

		EXEC SQL PREPARE pStmt FROM :lStrFPIAQry;
		EXEC SQL DECLARE cSysCursor CURSOR FOR pStmt;
		EXEC SQL OPEN cSysCursor;
		IS_ANY_ORA_ERROR;

		for( ; ; ) {		
		EXEC SQL FETCH cSysCursor INTO :ErrorDesc_var;
		if (sqlca.sqlcode != 0) {
			break;
		}

		strcpy(ErrorDesc, ErrorDesc_var);
		Alert("Error Description in 2nd For Loop %s", ErrorDesc);
	  
		if (strlen(ErrorDesc_var) > 0) {
			   repair_cnt++;
			   if (strcmp(ErrorDesc_var, "Deal Date is On or Less than the Reallign Due Date") == 0) {
					 CO_InsertErr(l_debug_info_ptr,
								  LESS_THAN_REALLIGN_DATE,
								  p_sys_dl_deal_struct_h->h_indentity_no,
								  APL_NULL_STRING,
								  APL_NULL_STRING, 
								   __LINE__,
								   __FILE__);
				} else {
				// Deal Date is Not between the Reallign Due Date and Disclosure Date
					 CO_InsertErr(l_debug_info_ptr,
								  BETWEEN_REALLIGN_DISCLOSURE_DATE,
								  p_sys_dl_deal_struct_h->h_indentity_no,
								  APL_NULL_STRING,
								  APL_NULL_STRING,
								  __LINE__,
								   __FILE__);
				}
			}	
		}	

		EXEC SQL CLOSE cSysCursor;
	}
	
		Alert("4th:sqlca.sqlcode |%d| \n",sqlca.sqlcode);	
		Alert("4th:repair_cnt |%d| \n",repair_cnt);
	
	if((repair_cnt == 0) && ((strcmp(p_sys_dl_deal_struct_h->h_dealcd,"2")==0) ||  (strcmp(p_sys_dl_deal_struct_h->h_dealcd,"4")==0)))
	{
        Alert("Inside RESTRICTON_ON=N & BREACH_TYPE=A");		 
	      
        sprintf(lStrNSDLQry,"SELECT CASE WHEN (TO_DATE('%s', 'DD/MM/YYYY hh24:mi:ss') <= REALLIGN_DUE_DATE)  THEN 'Deal Date is On or Less than the Reallign Due Date' ELSE CASE WHEN  (TO_DATE('%s', 'DD/MM/YYYY HH24:MI:SS')  <= REALLIGN_DUE_DATE) OR (TO_DATE('%s', 'DD/MM/YYYY HH24:MI:SS') > DISCLOSURE_DUE_DATE)  THEN  'Deal Date is Not between the Reallign Due Date and Disclosure Date' END END  as ERRORDESC  FROM (SELECT REALLIGN_DUE_DATE, DISCLOSURE_DUE_DATE  FROM  MT_FPI_NSDL_RESTRICTION A  WHERE  A.NSDL_GROUP_ID in (SELECT  NSDL_GRP_ID FROM MT_CLI_FPI_MAP  where cln_code = '%s') AND A.STATUS = 'AA' AND  A.RESTRICTON_ON = 'N' AND  A.BREACH_TYPE ='A' AND (getclientparambyid('FPI_CMP_LMT_CHK','%s') = 'Y') AND exists (SELECT 1 FROM PRO_SGENSTAT WHERE MAP_TYPE = 'INS_SUB_TYPE_ALW_AUM'  AND MAP_VAL IN ('EQ','EU'))) ",l_dl_date,l_dl_date,l_dl_date,l_str_clientCode,l_str_clientCode); 


		EXEC SQL PREPARE pStmt2 FROM :lStrNSDLQry;
		EXEC SQL DECLARE cSysCursor2 CURSOR FOR pStmt2;
		EXEC SQL OPEN cSysCursor2;
		IS_ANY_ORA_ERROR;

		for( ; ; ) {			
			EXEC SQL FETCH cSysCursor2 INTO :ErrorDesc_var;
			if (sqlca.sqlcode != 0) {
				break;
			}

			strcpy(ErrorDesc, ErrorDesc_var);
			Alert("Error Description in 3rd For Loop %s", ErrorDesc);
	  
			if (strlen(ErrorDesc_var) > 0) {
				repair_cnt++;
				if (strcmp(ErrorDesc_var, "Deal Date is On or Less than the Reallign Due Date") == 0) {
					 CO_InsertErr(l_debug_info_ptr,
								  LESS_THAN_REALLIGN_DATE,
								  p_sys_dl_deal_struct_h->h_indentity_no,
								  APL_NULL_STRING,
								  APL_NULL_STRING, 
								   __LINE__,
								   __FILE__);
				} else {
				// Deal Date is Not between the Reallign Due Date and Disclosure Date
					 CO_InsertErr(l_debug_info_ptr,
								  BETWEEN_REALLIGN_DISCLOSURE_DATE,
								  p_sys_dl_deal_struct_h->h_indentity_no,
								  APL_NULL_STRING,
								  APL_NULL_STRING,
								  __LINE__,
								   __FILE__);
				}
			}
		}
    EXEC SQL CLOSE cSysCursor2;		  
	}
		Alert("5th:sqlca.sqlcode |%d| \n",sqlca.sqlcode);	
		Alert("5th:repair_cnt |%d| \n",repair_cnt);
	if((repair_cnt == 0) && ((strcmp(p_sys_dl_deal_struct_h->h_dealcd,"2")==0) ||  (strcmp(p_sys_dl_deal_struct_h->h_dealcd,"4")==0)))
	{
        Alert("BW DiscSurrenderst1:sqlca.sqlcode |%d| \n",sqlca.sqlcode);
		
		sprintf(lStrDiscSurrQry, "SELECT CASE WHEN (TO_DATE('%s', 'DD/MM/YYYY hh24:mi:ss') > DISCLOSURE_DUE_DATE AND TO_DATE('%s', 'DD/MM/YYYY hh24:mi:ss') <= SURRENDER_DUE_DATE) THEN 'Deal Date is between the Disclosure Date and Surrender Due Date' END as ERRORDESC FROM (SELECT CLIENT, SURRENDER_DUE_DATE, DISCLOSURE_DUE_DATE FROM (SELECT CLIENT, SURRENDER_DUE_DATE, DISCLOSURE_DUE_DATE FROM MT_FPI_NSDL_RESTRICTION A WHERE (A.CLIENT='%s' OR A.NSDL_GROUP_ID in (SELECT  NSDL_GRP_ID FROM MT_CLI_FPI_MAP  where cln_code = '%s')) AND A.STATUS = 'AA'  AND SURRENDER_DUE_DATE IS NOT NULL AND DISCLOSURE_DUE_DATE IS NOT NULL ORDER BY DISCLOSURE_DUE_DATE DESC) WHERE ROWNUM = 1) WHERE EXISTS (SELECT 1 FROM PRO_SGENSTAT WHERE MAP_TYPE = 'INS_SUB_TYPE_ALW_AUM' AND MAP_VAL IN ('EQ','EU')) AND (getclientparambyid('FPI_CMP_LMT_CHK','%s') = 'Y')", l_dl_date, l_dl_date, l_str_clientCode, l_str_clientCode,l_str_clientCode);

		EXEC SQL PREPARE pStmt3 FROM :lStrDiscSurrQry;
		EXEC SQL DECLARE cSysCursor3 CURSOR FOR pStmt3;
		EXEC SQL OPEN cSysCursor3;
		IS_ANY_ORA_ERROR;

		for( ; ; ) {
			
			EXEC SQL FETCH cSysCursor3 INTO :ErrorDesc_var;
			if (sqlca.sqlcode != 0) {
				break;
			}

			strcpy(ErrorDesc, ErrorDesc_var);
			Alert("Error Description in 3rd For Loop %s", ErrorDesc);
	  
			if (strlen(ErrorDesc_var) > 0) {
				repair_cnt++;
				if (strcmp(ErrorDesc_var, "Deal Date is between the Disclosure Date and Surrender Due Date") == 0) {
					 CO_InsertErr(l_debug_info_ptr,
								  BETWEEN_DISCLOSURE_SURRENDER_DATE,
								  p_sys_dl_deal_struct_h->h_indentity_no,
								  APL_NULL_STRING,
								  APL_NULL_STRING, 
								   __LINE__,
								   __FILE__);
				} 
			}
		}		
		EXEC SQL CLOSE cSysCursor3;	
	}
	
	
	Alert("6th:sqlca.sqlcode |%d| \n",sqlca.sqlcode);	
		Alert("5th:repair_cnt |%d| \n",repair_cnt);
	
	if(repair_cnt == 0)
	{
        Alert("Inside Trade is > Surrender Due Date");
		
		sprintf(lStrSurrQry,"SELECT CASE WHEN (TO_DATE('%s', 'DD/MM/YYYY hh24:mi:ss') > SURRENDER_DUE_DATE) THEN 'Purchase/Sale are not allowed after the Surrender Due Date' END  as ERRORDESC  FROM (SELECT CLIENT,SURRENDER_DUE_DATE FROM (SELECT  CLIENT,SURRENDER_DUE_DATE, DISCLOSURE_DUE_DATE  FROM  MT_FPI_NSDL_RESTRICTION A  WHERE (A.CLIENT='%s' OR A.NSDL_GROUP_ID in (SELECT  NSDL_GRP_ID FROM MT_CLI_FPI_MAP  where cln_code = '%s')) AND A.STATUS = 'AA' AND SURRENDER_DUE_DATE IS NOT NULL ORDER BY DISCLOSURE_DUE_DATE DESC) WHERE ROWNUM = 1) where exists (SELECT 1 FROM PRO_SGENSTAT WHERE MAP_TYPE = 'INS_SUB_TYPE_ALW_AUM'  AND MAP_VAL IN ('EQ','EU')) AND (getclientparambyid('FPI_CMP_LMT_CHK','%s') = 'Y')", l_dl_date,l_str_clientCode,l_str_clientCode,l_str_clientCode); 


		EXEC SQL PREPARE pStmt4 FROM :lStrSurrQry;
		EXEC SQL DECLARE cSysCursor4 CURSOR FOR pStmt4;
		EXEC SQL OPEN cSysCursor4;
		IS_ANY_ORA_ERROR;

		for( ; ; ) {
			
			EXEC SQL FETCH cSysCursor4 INTO :ErrorDesc_var;
			if (sqlca.sqlcode != 0) {
				break;
			}

			strcpy(ErrorDesc, ErrorDesc_var);
			Alert("Error Description in 3rd For Loop %s", ErrorDesc);
	  
			if (strlen(ErrorDesc_var) > 0) {
				repair_cnt++;
				if (strcmp(ErrorDesc_var, "Purchase/Sale are not allowed after the Surrender Due Date") == 0) {
					 CO_InsertErr(l_debug_info_ptr,
								  GREATER_THAN_SURRENDER_DATE,
								  p_sys_dl_deal_struct_h->h_indentity_no,
								  APL_NULL_STRING,
								  APL_NULL_STRING, 
								   __LINE__,
								   __FILE__);
				} 
			}
		}
		
		EXEC SQL CLOSE cSysCursor4;		
	}
	
	if((repair_cnt == 0) && ((strcmp(p_sys_dl_deal_struct_h->h_dealcd,"2")==0) ||  (strcmp(p_sys_dl_deal_struct_h->h_dealcd,"4")==0)))
	{    
		Alert("Inside RESTRICTON_ON=F & Surrender Date");	 	  
	  
		sprintf(lStrFPISurrQry, "SELECT CASE WHEN  ((TO_DATE('%s', 'DD/MM/YYYY HH24:MI:SS')  >= REST_FOR_PURCHASE) AND (TO_DATE('%s', 'DD/MM/YYYY HH24:MI:SS') <= SURRENDER_DUE_DATE)) THEN 'Purchase Trades are not allowed during the Surrender period' END  AS ERRORDESC FROM (SELECT  REST_FOR_PURCHASE, SURRENDER_DUE_DATE FROM MT_FPI_NSDL_RESTRICTION A WHERE A.CLIENT = '%s' AND A.STATUS = 'AA' AND A.RESTRICTON_ON = 'F' AND SURRENDER_DUE_DATE IS NOT NULL AND REST_FOR_PURCHASE IS NOT NULL AND A.SURRENDER_APPLICABLE = 'S' AND (getclientparambyid('FPI_CMP_LMT_CHK', '%s') = 'Y') AND EXISTS (SELECT 1 FROM PRO_SGENSTAT WHERE MAP_TYPE = 'INS_SUB_TYPE_ALW_AUM' AND MAP_VAL IN ('EQ', 'EU'))) ", l_dl_date, l_dl_date, l_str_clientCode, l_str_clientCode);
		
		EXEC SQL PREPARE pStmt5 FROM :lStrFPISurrQry;
		EXEC SQL DECLARE cSysCursor5 CURSOR FOR pStmt5;
		EXEC SQL OPEN cSysCursor5;
		IS_ANY_ORA_ERROR;

		for( ; ; ) {
		
		EXEC SQL FETCH cSysCursor5 INTO :ErrorDesc_var;
		if (sqlca.sqlcode != 0) {
			break;
		}

		strcpy(ErrorDesc, ErrorDesc_var);
		Alert("Error Description in 5nd For Loop %s", ErrorDesc);
	  
		if (strlen(ErrorDesc_var) > 0) {
			   repair_cnt++;
			   if (strcmp(ErrorDesc_var, "Purchase Trades are not allowed during the Surrender period") == 0) {
					 CO_InsertErr(l_debug_info_ptr,
								  ERROR_REST_SURRENDER_PERIOD,
								  p_sys_dl_deal_struct_h->h_indentity_no,
								  APL_NULL_STRING,
								  APL_NULL_STRING, 
								   __LINE__,
								   __FILE__);
				} 
			}	
		}	

		EXEC SQL CLOSE cSysCursor5;
	}
	
	
	  	        
	Alert("At last:repair_cnt |%d| \n",repair_cnt);

	if (repair_cnt >0)
	{
	
	if(strcmp(l_Deal_flag,"U")==0)	
	{ 
	//p_dl_dealrepair_struct_h -> h_dl_rep_identno=int_p_trdrepseqnum;
    strcpy(p_dl_dealrepair_struct_h -> h_client,p_sys_dl_deal_struct_h->h_dl_client);
    strcpy(p_dl_dealrepair_struct_h -> h_identiy_no,p_sys_dl_deal_struct_h->h_indentity_no);
    strcpy(p_dl_dealrepair_struct_h -> h_deal_cd,p_sys_dl_deal_struct_h->h_dealcd);
    strcpy(p_dl_dealrepair_struct_h -> h_deal_date,p_sys_dl_deal_struct_h->h_dlt);
    strcpy(p_dl_dealrepair_struct_h -> h_setl_date,p_sys_dl_deal_struct_h->h_setldt);
    p_dl_dealrepair_struct_h -> h_qty=p_sys_dl_deal_struct_h->h_qty;
    strcpy(p_dl_dealrepair_struct_h -> h_instr_code,p_sys_dl_deal_struct_h->h_instr_code);
    strcpy(p_dl_dealrepair_struct_h -> h_currency_cd,p_sys_dl_deal_struct_h->h_currencycode);
    strcpy(p_dl_dealrepair_struct_h -> h_domestic_cpclt,p_sys_dl_deal_struct_h->h_domcpclt_cd);
    strcpy(p_dl_dealrepair_struct_h -> h_dl_class,p_sys_dl_deal_struct_h->h_classofdl);
    strcpy(p_dl_dealrepair_struct_h -> h_ex_arena,p_sys_dl_deal_struct_h->h_ex_arena);
    strcpy(p_dl_dealrepair_struct_h -> h_spottrd_ind,p_sys_dl_deal_struct_h->h_isspotdl);
    strcpy(p_dl_dealrepair_struct_h -> h_entry,p_sys_dl_deal_struct_h->h_entry);
    strcpy(p_dl_dealrepair_struct_h -> h_dateof_input,p_sys_dl_deal_struct_h->h_newdt);
    strcpy(p_dl_dealrepair_struct_h -> h_maker,p_sys_dl_deal_struct_h->h_maker);
	strcpy(p_dl_dealrepair_struct_h -> h_maker_dt,p_sys_dl_deal_struct_h->h_maker_dt);
    strcpy(p_dl_dealrepair_struct_h -> h_deal_stat,p_sys_dl_deal_struct_h->h_deal_status);
    strcpy(p_dl_dealrepair_struct_h -> h_access_stamp,p_sys_dl_deal_struct_h->h_access_stamp);
    p_dl_dealrepair_struct_h -> h_amount=p_sys_dl_deal_struct_h->h_amt;
    strcpy(p_dl_dealrepair_struct_h -> h_domcp_custodyclt,p_sys_dl_deal_struct_h->h_domcp_custodyclt);
    strcpy(p_dl_dealrepair_struct_h -> h_cp_clt,p_sys_dl_deal_struct_h->h_countclt);
    strcpy(p_dl_dealrepair_struct_h -> h_cp_cltname,p_sys_dl_deal_struct_h->h_countcltnm);
    strcpy(p_dl_dealrepair_struct_h -> h_clientof,p_sys_dl_deal_struct_h->h_clientof);
    strcpy(p_dl_dealrepair_struct_h -> h_info1,p_sys_dl_deal_struct_h->h_info1);
    strcpy(p_dl_dealrepair_struct_h -> h_fx_reqd,p_sys_dl_deal_struct_h->h_fx_reqd);
    p_dl_dealrepair_struct_h -> h_custodycomm=p_sys_dl_deal_struct_h->h_custodycomm;
    p_dl_dealrepair_struct_h -> h_brokercomm=p_sys_dl_deal_struct_h->h_brokercomm;
    p_dl_dealrepair_struct_h -> h_stx_comm=p_sys_dl_deal_struct_h->h_stx_comm;
    p_dl_dealrepair_struct_h -> h_oth_comm=p_sys_dl_deal_struct_h->h_oth_comm;
    strcpy(p_dl_dealrepair_struct_h -> h_location_cd,p_sys_dl_deal_struct_h->h_loccode);
    strcpy(p_dl_dealrepair_struct_h -> h_status_pos,p_sys_dl_deal_struct_h->h_pos_stat);
    strcpy(p_dl_dealrepair_struct_h -> h_brk_no,p_sys_dl_deal_struct_h->h_brkrno);
    strcpy(p_dl_dealrepair_struct_h -> h_gl_client,p_sys_dl_deal_struct_h->h_cash_client);
    strcpy(p_dl_dealrepair_struct_h -> h_instruct_person,p_sys_dl_deal_struct_h->h_instruct_person);
    strcpy(p_dl_dealrepair_struct_h -> h_clientof_cd,p_sys_dl_deal_struct_h->h_clientofcode);
    strcpy(p_dl_dealrepair_struct_h -> h_inter_med_person,p_sys_dl_deal_struct_h->h_inter_med_person);
	strcpy(p_dl_dealrepair_struct_h -> h_inter_med_personnm,p_sys_dl_deal_struct_h->h_inter_med_personnm);
    strcpy(p_dl_dealrepair_struct_h -> h_fxccy,p_sys_dl_deal_struct_h->h_fxccy);
    strcpy(p_dl_dealrepair_struct_h -> h_lcl_identno,p_sys_dl_deal_struct_h->h_locindentity_no);
    strcpy(p_dl_dealrepair_struct_h -> h_uniq_ident_no,p_sys_dl_deal_struct_h->h_uniq_ident_no);
    strcpy(p_dl_dealrepair_struct_h -> h_related_ident_no,p_sys_dl_deal_struct_h->h_related_indentity_no);
    strcpy(p_dl_dealrepair_struct_h -> h_del_rec_date,p_sys_dl_deal_struct_h->h_delrecdate);
    strcpy(p_dl_dealrepair_struct_h -> h_settlement_no,p_sys_dl_deal_struct_h->h_settlement_no);
    strcpy(p_dl_dealrepair_struct_h -> h_mkt_type,p_sys_dl_deal_struct_h->h_mkt_type);
    strcpy(p_dl_dealrepair_struct_h -> h_clh_flg,p_sys_dl_deal_struct_h->h_clh_flg);
    strcpy(p_dl_dealrepair_struct_h -> h_payin_dt,p_sys_dl_deal_struct_h->h_payin_dt);
    strcpy(p_dl_dealrepair_struct_h -> h_payout_dt,p_sys_dl_deal_struct_h->h_payout_dt);
    strcpy(p_dl_dealrepair_struct_h -> h_exch_code,p_sys_dl_deal_struct_h->h_exch_code);
    strcpy(p_dl_dealrepair_struct_h -> h_interfii_flg,p_sys_dl_deal_struct_h->h_interfii_flg);
    strcpy(p_dl_dealrepair_struct_h -> h_instr_code,p_sys_dl_deal_struct_h->h_instr_code);
    p_dl_dealrepair_struct_h -> h_net_amt=p_sys_dl_deal_struct_h->h_net_amt;
    strcpy(p_dl_dealrepair_struct_h -> h_trd_exch,p_sys_dl_deal_struct_h->h_trd_exch);
    strcpy(p_dl_dealrepair_struct_h -> h_trd_setl_no,p_sys_dl_deal_struct_h->h_trd_setl_no);
    strcpy(p_dl_dealrepair_struct_h -> h_trd_mkt_type,p_sys_dl_deal_struct_h->h_trd_mkt_type);
    p_dl_dealrepair_struct_h -> h_stamp_duty=p_sys_dl_deal_struct_h->h_stamp_duty;
    //strcpy(p_dl_dealrepair_struct_h -> h_dl_debt_num,p_sys_dl_deal_struct_h->h_dl_debt_num);
	
		if(DL_RepairInsDb(p_dl_dealrepair_struct_h ,p_intlenv_data_struct_h ,l_debug_info_ptr) != APL_SUCCESS)
		{
				Alert("VL::: Failed to insert in Deal Repair\n");
				APL_GOBACK_FAIL
		}
	}
		//memset(g_Deal_flag,   APL_NULL_CHAR,2);

	APL_GOBACK_FAIL
	
   }


}
	 
 APL_GOBACK_SUCCESS

RETURN_SUCCESS :
	{
			APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE);
			return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
			APL_FUNCTION_RET_FAILURE(APL_OUT_FILE);
			return(APL_FAILURE);
	}	
}
