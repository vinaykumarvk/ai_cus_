

#include "CO_HostStructdef.h"
#include "CA_Common.h"

#define S_CODE_LENGTH            21
#define S_CODE_VAL_LENGTH        5
#define S_SECTRCODE_LEN			4
#define S_VALIDNOTE1				"S00000"
#define S_VALIDNOTE2				"M00000"
#define S_VERWITH_NOTE1			"EPT"
#define S_VERWITH_NOTE2       "EVI"
#define S_OURTHEIR_O				'O'
#define S_OURTHEIR_T				'T'
#define S_SECTOR1					"7"
#define S_SECTOR2					"6"
#define S_CUBKA					'A'


EXEC SQL INCLUDE SQLCA.H;








int DL_Mod_DLPmt(	DL_DEAL_PMTDET_STRUCT_H *p_dl_deal_pmtdet_struct_h_d, 
							INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h,
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr ) 
{

	struct sqlca sqlca;
	short 	int_l_error_flg = APL_SUCCESS, 
				l_locrefnoexists = 0,
				int_l_condexists = 0,
				l_i_access_stamp = 0,
				l_i_maker = 0,
				l_i_checker = 0,
				l_i_TrCode = 0,
				l_i_trdqty = 0,
				l_i_trdamt = 0,
				l_i_domcpac = 0,
				l_i_countacc = 0,
				l_i_instr_code = 0,
				l_i_locncode = 0,
				l_i_ccycode = 0,
				l_i_trdt = 0,
				l_i_ourtheir = 0,
				l_i_cubk = 0, 
				l_i_rowid = 0,
				l_i_posn_status = 0,
				l_i_CSD = 0,
				l_i_trdfromord = 0,
				l_i_failcode = 0,
				l_i_ccy_decimallen = 0, 
				l_i_minfmttrdqty = 0,
				l_i_typeofinstr = 0,
				l_i_temp_qty = 0,
				l_i_brkcomm	=	0,
				l_i_amount = 0,
				l_i_cashaccount = 0,
				l_i_allow_partials = 0,
				int_l_rowexists = 0;

	short		l_i_subfailcode=0;
    
	char	 	chr_l_fieldname[21], 
				chr_l_h_access_stamp[APL_DATE_LEN], 
				chr_l_h_trcode[APL_FLAG_LENGTH], 
				chr_l_h_rowid[APL_ROWID_LEN],
				chr_mainfuncarea[APL_MAINFUNCAREA_LEN], 
				chr_l_condid[APL_CONDID_LEN],
				chr_l_h_countacc_a[APL_COUNTACC_LEN], 
				chr_l_h_instrcode_A[APL_INSTRUMENTCODE_LEN], 
				chr_l_h_locncode_a[APL_LOCNCODE_LENGTH], 
				chr_l_h_ccycode[APL_CCYCODE_LEN],
				chr_l_accpartialflg[APL_FLAG_LENGTH], 
				chr_l_h_trdt_a[APL_DATE_LEN],
				chr_l_h_maker[APL_USERID_LEN], 
				chr_l_h_checker[APL_USERID_LEN],
				chr_l_h_trdfromord[APL_FLAG_LENGTH], 
				int_l_h_failcode[FAILREAS_CD_LEN],
				chr_l_h_posn_status[STATUS_POS_LEN], 
				chr_l_postype[4],
				chr_l_clscode[CLSCD_LEN], 
				chr_l_curr_date_time[APL_DATE_LEN],
				chr_l_h_csd[APL_DATE_LEN], 
				chr_l_h_domcpac[APL_CLIENT_LENGTH],
				chr_l_h_cubk[APL_FLAG_LENGTH], 
				chr_l_h_ourtheir[APL_FLAG_LENGTH],
				chr_l_h_typeofinstr[TYPEOF_INSTR_LEN],
				chr_l_trcodeinstrflg_a[APL_FLAG_LENGTH],
				chr_l_custnote_a[71],
				chr_l_trade_status[APL_STATUS_LEN],
				chr_l_buf[BUFFER_LEN],
				chr_l_subfunc_b[APL_MAINFUNCAREA_LEN],  
            chr_l_fieldval[APL_MAINFUNCAREA_LEN],
				chr_l_h_codetype[S_CODE_LENGTH],
				chr_l_h_codeval[S_CODE_VAL_LENGTH],
				chr_l_h_countrycode[APL_CTRY_CODE_LEN],
				chr_l_h_cashclient[APL_CLIENT_LENGTH],
				chr_l_allow_partials[APL_FLAG_LENGTH],
				chr_l_failcode_A[FAILREAS_CD_LEN],
				chr_l_failnote[36],
				chr_custnote_date[APL_DATE_LEN],   
				l_block_type[5] = APL_NULL_STRING;
	double 	l_h_trdamount = 0, 
				l_h_trdquantity = 0, 
				l_qty_ratio = 0, 
				l_mod_dealposn = 0, 
				l_h_brokercomm	=	0,
				chr_l_h_amount = 0,			
				l_CurrPosn = 0, 
				l_TempPosn = 0, 
				l_cost = 0,
				l_round_cost = 0,
				l_round_quantity = 0,
				l_h_minfmttrdquantity = 0,
				l_round_amount = 0,
				l_h_temp_quantity=0.0,
				l_h_temp_quantity_rnd=0.0,
				l_round_gramount = 0,
				l_dbl_settle_identity_no_a=0.0;
	int 		int_l_datecmp = 0, 
				int_l_trdrepseqnum = 0, 
				int_l_hol_exist = 0,
				int_l_enufvdp = APL_SUCCESS,
				int_l_h_ccy_decimallen = 0,
				l_subfailreason_cd = 0,
				int_l_exists_a = 0;

	int		int_l_h_subfailcode=0;
	int      int_l_dummy=0;

	int   	int_p_smieligibility_flg = 0;
	char  	chr_l_h_locnchng_flg[2]  = APL_NULL_STRING;
	char  	chr_l_h_typeoftrd[3]     = APL_NULL_STRING;
	char 		chr_l_pretrd_status[3]	= APL_NULL_STRING;
	short		l_i_locnchng_flg 		= 0;
	short		l_i_typeoftrd 			= 0;
	short		l_i_pretrd_status		= 0;

	short    int_retval	=	0;
	char     chr_l_temp_note1[261] = APL_NULL_STRING;
	char 		chr_l_cubk_exttrd[2];
	char 		l_param_str[201]=APL_NULL_STRING;

	
	char chr_l_h_sectrcode[S_SECTRCODE_LEN];
	int int_l_h_count = 0;
	short l_i_sectrcode = 0;
	short l_i_count = 0;
	
	short l_ext_trd_check   =  0; 

	DL_DEALAUDIT_STRUCT_H *l_dl_dealaudit_struct_ha = NULL;
	SYS_DL_DEAL_STRUCT_H *l_sys_dl_deal_struct_hj = NULL;
	INTL_ENV_DATA_STRUCT_H *l_intl_envdata_struct_h = NULL;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	sqlca.sqlcode = 0;

   
   G_SYS_ACCOUNT_LEN = 10; 

	strcpy(chr_l_failcode_A,APL_NULL_STRING);
	strcpy(chr_l_failnote,APL_NULL_STRING);
	strcpy(chr_l_fieldname, APL_NULL_STRING);
	strcpy(chr_l_h_access_stamp, APL_NULL_STRING);
	strcpy(chr_l_h_trcode, APL_NULL_STRING);
	strcpy(chr_l_h_rowid, APL_NULL_STRING);
	strcpy(chr_mainfuncarea, APL_NULL_STRING);
	strcpy(chr_l_condid, APL_NULL_STRING);
	strcpy(chr_l_h_countacc_a, APL_NULL_STRING);
	strcpy(chr_l_h_instrcode_A, APL_NULL_STRING);
	strcpy(chr_l_h_locncode_a, APL_NULL_STRING);
	strcpy(chr_l_h_ccycode, APL_NULL_STRING);
	strcpy(chr_l_accpartialflg, APL_NULL_STRING);
	strcpy(chr_l_h_trdt_a, APL_NULL_STRING);
	strcpy(chr_l_h_maker, APL_NULL_STRING);
	strcpy(chr_l_h_checker, APL_NULL_STRING);
	strcpy(chr_l_h_trdfromord, APL_NULL_STRING);
	strcpy(int_l_h_failcode, APL_NULL_STRING);
	strcpy(chr_l_h_posn_status, APL_NULL_STRING);
	strcpy(chr_l_postype, APL_NULL_STRING);
	strcpy(chr_l_clscode, APL_NULL_STRING);
	strcpy(chr_l_curr_date_time, APL_NULL_STRING);
	strcpy(chr_l_h_csd, APL_NULL_STRING);
	strcpy(chr_l_h_domcpac, APL_NULL_STRING);
	strcpy(chr_l_h_cubk, APL_NULL_STRING);
	strcpy(chr_l_h_ourtheir, APL_NULL_STRING);
	strcpy(chr_l_h_typeofinstr, APL_NULL_STRING);
	strcpy(chr_l_custnote_a, APL_NULL_STRING);
	strcpy(chr_l_trcodeinstrflg_a, APL_NULL_STRING);
	strcpy(chr_l_trade_status, APL_NULL_STRING);
	strcpy(chr_l_buf, APL_NULL_STRING);
	strcpy(chr_l_subfunc_b,APL_NULL_STRING);
	strcpy(chr_l_fieldval,APL_NULL_STRING);
	strcpy(chr_l_h_cashclient,APL_NULL_STRING);
	
	strcpy(chr_l_h_sectrcode,APL_NULL_STRING);
	strcpy(chr_l_h_codeval,APL_NULL_STRING);
	strcpy(chr_l_h_codetype,APL_NULL_STRING);
	strcpy(chr_l_h_countrycode,APL_NULL_STRING);
	
	strcpy(chr_custnote_date,APL_NULL_STRING); 
	
	
	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE,
						"Entering Function DL_Mod_DLPmt\n",
						NULL,
						p_intl_env_data_struct_h );
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf,
						"The Account is : %s\n", 
						p_dl_deal_pmtdet_struct_h_d->h_dl_client );
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h );
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf,
						"The Ref. Number is : %s\n", 
						p_dl_deal_pmtdet_struct_h_d->h_indentity_no );
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h );
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf,
						"The Conf. Date is : %s\n", 
						p_dl_deal_pmtdet_struct_h_d->h_confdate );
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h );
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf,
						"Verified With : %s\n", 
						p_dl_deal_pmtdet_struct_h_d->h_verfied_with );
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h );
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf,
						"The Difference Amt is : %f\n", 
						p_dl_deal_pmtdet_struct_h_d->h_diffamount );
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h );
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf,
						"The Wording is : %s\n", 
						p_dl_deal_pmtdet_struct_h_d->h_info1 );
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h );
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf,
						"The IsPartial Flag is : %c\n",
						p_dl_deal_pmtdet_struct_h_d->h_ispart_ );
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h );
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf,
						"The Broker Number is : %s\n",
						p_dl_deal_pmtdet_struct_h_d->h_brkrno );
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h );
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf,
						"The New Quantity is : %f\n",
						p_dl_deal_pmtdet_struct_h_d->h_newquantity );
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h );
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf,
						"The New Amount is : %f\n",
						p_dl_deal_pmtdet_struct_h_d->h_newamount );
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h );
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf,
						"The New Ref. Number is : %s\n",
						p_dl_deal_pmtdet_struct_h_d->h_newindentity_no );
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h );
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf,
						"The New Local Ref. Number is : %s\n",
						p_dl_deal_pmtdet_struct_h_d->h_newlocindentity_no );
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h );
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(		chr_l_buf,
						"The Access Stamp is : %s\n",
						p_dl_deal_pmtdet_struct_h_d->h_access_stamp );
		CO_ProcMonitor(	APL_OUT_FILE,
						chr_l_buf,
						NULL,
						p_intl_env_data_struct_h );
	}

	

	l_dl_dealaudit_struct_ha = (DL_DEALAUDIT_STRUCT_H*)calloc(1,sizeof(DL_DEALAUDIT_STRUCT_H));
	APL_MALLOC_FAIL(l_dl_dealaudit_struct_ha);

	

	if ( !strcmp(p_dl_deal_pmtdet_struct_h_d->h_dl_client, APL_NULL_STRING ) )
	{
		APL_DATA_MISSING(	"Account", 
								APL_NULL_STRING, 
								APL_NULL_STRING ); 
		int_l_error_flg = APL_FAILURE;
	}
	else 
	{
		int_l_dummy=0;
		if (APL_FAILURE == CO_Chk_SplVal( "EUROCLEAR",
													"DUMMY_ACC",
													p_dl_deal_pmtdet_struct_h_d->h_dl_client,
													&int_l_dummy,
													l_debug_info_ptr))
		{
	 		APL_GOBACK_FAIL
		}
		if (int_l_dummy)
		{
			CO_InsertErr(l_debug_info_ptr,
								ERR_DEAL_CONF_NOTALLOWED,
								p_dl_deal_pmtdet_struct_h_d->h_dl_client,
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__);
		} 
	}

	if ( !strcmp(p_dl_deal_pmtdet_struct_h_d->h_indentity_no, APL_NULL_STRING) )
	{
		APL_DATA_MISSING(	"Ref. Number", 
								APL_NULL_STRING, 
								APL_NULL_STRING ); 
		int_l_error_flg = APL_FAILURE;
	}
	if ( !strcmp(p_dl_deal_pmtdet_struct_h_d->h_confdate, APL_NULL_STRING) )
	{
		APL_DATA_MISSING(	"Conf. Date", 
								APL_NULL_STRING, 
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	}
	if ( !strcmp(p_dl_deal_pmtdet_struct_h_d->h_access_stamp, APL_NULL_STRING) )
	{
		APL_DATA_MISSING(	"Access Stamp", 
								APL_NULL_STRING, 
								APL_NULL_STRING );
		int_l_error_flg = APL_FAILURE;
	}

	if ( l_mt_core_sys_params_struct_h.part_confirm[0] == 'N' &&
			p_dl_deal_pmtdet_struct_h_d->h_ispart_[0] == 'Y' ) 
	{
		if	(	CO_InsertErr(	l_debug_info_ptr,
										ERR_PARTIAL_NOTALLOWED,
										APL_NULL_STRING,
										APL_NULL_STRING,
										APL_NULL_STRING,
										__LINE__,
										__FILE__ ) == APL_FAILURE )
		{
			APL_GOBACK_FAIL;
		}
		int_l_error_flg = APL_FAILURE;
	}

	

	if ( p_dl_deal_pmtdet_struct_h_d->h_diffamount > l_mt_core_sys_params_struct_h.allowed_amtdiff )
	{
		
		EXEC SQL SELECT CURRENCY_CD
				INTO :chr_l_h_ccycode:l_i_ccycode FROM DL_DEAL
				WHERE  CLIENT = :p_dl_deal_pmtdet_struct_h_d->h_dl_client
				AND    IDENTIY_NO = :p_dl_deal_pmtdet_struct_h_d->h_indentity_no;

		strcpy(chr_mainfuncarea, APL_NULL_STRING);
		strcpy(chr_l_condid, APL_NULL_STRING);
		strcpy(chr_mainfuncarea, "TRD_PREMATCH");
		strcpy(chr_l_condid, "MAXAMT_GR_CPAMT_WARN");
		int_l_condexists = 0;
		if ( APL_SUCCESS == CO_Chk_CntryEnabled( chr_mainfuncarea,
															chr_l_condid,
															&int_l_condexists,
															l_debug_info_ptr ) )
		{
			if (int_l_condexists > 0)
			{
				if (!strcmp(chr_l_h_ccycode,g_mt_commonsys_params_struct_h.dom_ccy))
				{
					if ( CO_InsertWarning( l_debug_info_ptr,
												ERR_DEAL_DIFFAMT_MORE_SETUP,
												p_dl_deal_pmtdet_struct_h_d->h_dl_client,
												p_dl_deal_pmtdet_struct_h_d->h_indentity_no,
												APL_NULL_STRING,
												__LINE__,
												__FILE__) == APL_FAILURE )
					{
						APL_GOBACK_FAIL;
					}
				}
			}
			else
			{
				if	(	CO_InsertErr(	l_debug_info_ptr,
										ERR_DEAL_DIFFAMT_MORE_SETUP,
										p_dl_deal_pmtdet_struct_h_d->h_dl_client,
										p_dl_deal_pmtdet_struct_h_d->h_indentity_no, 
										APL_NULL_STRING,
										__LINE__,
										__FILE__ ) == APL_FAILURE )
				{
					APL_GOBACK_FAIL;
				}
				int_l_error_flg = APL_FAILURE;
			}
		}
	}

	if ( int_l_error_flg == APL_FAILURE )
	{
		APL_GOBACK_FAIL;
	}
 
	

	EXEC SQL VAR chr_l_h_rowid			IS STRING;
	EXEC SQL VAR chr_l_h_access_stamp IS STRING;
	EXEC SQL VAR chr_l_h_maker			IS STRING;
	EXEC SQL VAR chr_l_h_checker		IS STRING;
	EXEC SQL VAR chr_l_h_trcode			IS STRING;
	EXEC SQL VAR chr_l_h_domcpac		IS STRING;
	EXEC SQL VAR chr_l_h_countacc_a		IS STRING;
	EXEC SQL VAR chr_l_h_instrcode_A			IS STRING;
	EXEC SQL VAR chr_l_h_locncode_a		IS STRING;
	EXEC SQL VAR chr_l_h_ccycode		IS STRING;
	EXEC SQL VAR chr_l_h_trdt_a			IS STRING;
	EXEC SQL VAR chr_l_h_posn_status  IS STRING;
	EXEC SQL VAR chr_l_h_csd				IS STRING;
	EXEC SQL VAR chr_l_h_trdfromord	IS STRING;
	EXEC SQL VAR int_l_h_failcode		IS STRING;
	EXEC SQL VAR chr_l_h_cashclient	IS STRING;
	EXEC SQL VAR chr_l_h_typeoftrd    IS STRING;
	EXEC SQL VAR chr_l_h_locnchng_flg IS STRING;

	memset(chr_l_h_countacc_a,APL_NULL_CHAR,sizeof(chr_l_h_countacc_a)); 
	

	EXEC SQL SELECT 	ROWID,
							ACCESS_STAMP, 
							MAKER,
							CHECKER,
							DEAL_CD,
							QTY,
							NET_AMT,/**UAT Fix-- change amount to net_amt***/
							DOMESTIC_CPCLT,
							CP_CLT,
							INSTR_CODE,
							LOCATION_CD,
							CURRENCY_CD,
							DEAL_DATE,
							STATUS_POS,
							SETL_DATE,
							DEAL_FRM_ORD,
							FAILREASON_CD,
							BROKERCOMM,
							AMOUNT,
							GL_CLIENT,
							SUB_FAIL_CD,
							DL_CLASS,
							LOC_CHNG_IND,
							DEAL_STAT
			INTO  :chr_l_h_rowid:l_i_rowid,	
					:chr_l_h_access_stamp:l_i_access_stamp, 
					:chr_l_h_maker:l_i_maker,
					:chr_l_h_checker:l_i_checker,
					:chr_l_h_trcode:l_i_TrCode,
					:l_h_trdquantity:l_i_trdqty,
					:l_h_trdamount:l_i_trdamt,
					:chr_l_h_domcpac:l_i_domcpac,
					:chr_l_h_countacc_a:l_i_countacc,
					:chr_l_h_instrcode_A:l_i_instr_code,
					:chr_l_h_locncode_a:l_i_locncode,
					:chr_l_h_ccycode:l_i_ccycode,
					:chr_l_h_trdt_a:l_i_trdt,
					:chr_l_h_posn_status:l_i_posn_status,
					:chr_l_h_csd:l_i_CSD,
					:chr_l_h_trdfromord:l_i_trdfromord,
					:int_l_h_failcode:l_i_failcode,
					:l_h_brokercomm:l_i_brkcomm,
					:chr_l_h_amount:l_i_amount,
					:chr_l_h_cashclient:l_i_cashaccount,
					:int_l_h_subfailcode:l_i_subfailcode,
					:chr_l_h_typeoftrd:l_i_typeoftrd,
					:chr_l_h_locnchng_flg:l_i_locnchng_flg,
					:chr_l_pretrd_status:l_i_pretrd_status
			FROM 	DL_DEAL
			WHERE	CLIENT 	= :p_dl_deal_pmtdet_struct_h_d->h_dl_client
			AND	IDENTIY_NO		= :p_dl_deal_pmtdet_struct_h_d->h_indentity_no 
			FOR UPDATE OF ACCESS_STAMP;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_DEAL_NF,
														p_dl_deal_pmtdet_struct_h_d->h_dl_client,
														p_dl_deal_pmtdet_struct_h_d->h_indentity_no,
														APL_NULL_STRING );

	
					printf("\n  calling DL_Mod_Posn 1 .. chr_l_h_locncode_a=|%s|\n",chr_l_h_locncode_a);
   
   if (APL_FAILURE == DL_Proc_SetlSeqNoRst(p_dl_deal_pmtdet_struct_h_d->h_dl_client, p_dl_deal_pmtdet_struct_h_d->h_indentity_no, 
                                         chr_l_h_rowid, &l_dbl_settle_identity_no_a, 'U', p_intl_env_data_struct_h, l_debug_info_ptr))
            APL_GOBACK_FAIL
   

	
   if (strcmp(g_mt_commonsys_params_struct_h.ei_smi_ind,"Y") == 0)
   {
       if (EI_Chk_SMIElg(chr_l_h_locncode_a,
                                   chr_l_h_trdt_a,
                                   chr_l_h_typeoftrd,
                                   chr_l_h_instrcode_A,
                                   chr_l_h_locnchng_flg,
											  chr_l_h_rowid,
                                   &int_p_smieligibility_flg,
                                   p_intl_env_data_struct_h,
                                   l_debug_info_ptr
                                   ) == APL_FAILURE)
         {
            CO_ProcMonitor(APL_OUT_FILE,"Failure from SMI_CheckSMIEligibility", NULL, p_intl_env_data_struct_h);
            APL_GOBACK_FAIL;
         }
	}

   if (	(strcmp(g_mt_commonsys_params_struct_h.ei_smi_ind,"Y") == 0) &&
       	(int_p_smieligibility_flg) )
         ;
   /* Gouse - Access stamp check with DL_DEAL not required since access stamp check will be done for record in DL_SINGLE_PREMATCH 
   [Start of commenting] */
   /*
	else if ( strcmp(chr_l_h_access_stamp, p_dl_deal_pmtdet_struct_h_d->h_access_stamp) )
	{
		CO_InsertErr(	l_debug_info_ptr,
								ERR_ACCESSSTAMP_CHGD,
								p_dl_deal_pmtdet_struct_h_d->h_dl_client,
								p_dl_deal_pmtdet_struct_h_d->h_indentity_no,
								APL_NULL_STRING,
								__LINE__,
								__FILE__ ); 
		APL_GOBACK_FAIL;
	}
	*/
   /* Gouse - Access stamp check with DL_DEAL not required since access stamp check will be done for record in DL_SINGLE_PREMATCH 
   [End of commenting] */

   if (	(strcmp(g_mt_commonsys_params_struct_h.ei_smi_ind,"Y") == 0) &&
       	(int_p_smieligibility_flg) )
   {
		
		if( strcmp(chr_l_pretrd_status,STATUS_AUTH) )
		{
			CO_InsertErr(	l_debug_info_ptr,
								ERR_INVALID_TRD_STATUS,
								p_dl_deal_pmtdet_struct_h_d->h_dl_client,
								p_dl_deal_pmtdet_struct_h_d->h_indentity_no,
								APL_NULL_STRING,
								__LINE__,
								__FILE__ ); 
			APL_GOBACK_FAIL
		}
	}

	
	if (l_i_cashaccount == -1)
	{
		strcpy(chr_l_h_cashclient,APL_NULL_STRING);

	}

	
	
	if ( APL_FAILURE == DL_Chk_DLDet(	p_dl_deal_pmtdet_struct_h_d->h_dl_client, 
												p_dl_deal_pmtdet_struct_h_d->h_indentity_no,
												'Y', NULL, 'N', 'N', NULL, NULL,
												NULL, NULL, l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL;
	}

	


	if ( 	!strcmp(chr_l_h_checker, APL_NULL_STRING) &&
			!strcmp(chr_l_h_maker, p_intl_env_data_struct_h->usr) &&
			p_intl_env_data_struct_h->auth_req[0] == 'Y' )
	{
		CO_InsertErr( 	l_debug_info_ptr,
								ERR_MAKER_CHECKER_SAME,
								p_dl_deal_pmtdet_struct_h_d->h_dl_client,
								p_dl_deal_pmtdet_struct_h_d->h_indentity_no,
								APL_NULL_STRING, 
								__LINE__,
								__FILE__ );
		APL_GOBACK_FAIL;
	}


	
	
	
	if (chr_l_h_trdfromord[0] == 'Y' )
	{
		if ( APL_FAILURE == CO_Chk_AccValid( p_dl_deal_pmtdet_struct_h_d->h_dl_client,
													'Y', 'C', 'B', NULL, 'Y', 'N',
													'N', 'N',
													l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL;
		}
	}
	else
	{
		if ( APL_FAILURE == CO_Chk_AccValid( p_dl_deal_pmtdet_struct_h_d->h_dl_client,
													'Y', 'C', NULL, NULL, 'Y', 'N',
													'N', 'N',
													l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL;
		}
	}
	

	EXEC SQL SELECT INSTR_TYPE, MIN_FMT_DL_QTY
	INTO 	:chr_l_h_typeofinstr:l_i_typeofinstr,
			:l_h_minfmttrdquantity:l_i_minfmttrdqty
	FROM MT_INSTRUMENT
	WHERE INSTR_CODE = RTRIM(:chr_l_h_instrcode_A);

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_INSTR_NOTFND,
														chr_l_h_instrcode_A,
														APL_NULL_STRING,
														APL_NULL_STRING)

	if (!strcmp(chr_l_h_typeofinstr, "FMT"))
	{
		if (((p_dl_deal_pmtdet_struct_h_d->h_ispart_[0] == 'Y') &&
			  (p_dl_deal_pmtdet_struct_h_d->h_newquantity < l_h_minfmttrdquantity)) ||
			 ((p_dl_deal_pmtdet_struct_h_d->h_ispart_[0] == 'N') &&
			  (l_h_trdquantity < l_h_minfmttrdquantity)))
		{
			if (APL_FAILURE == CO_InsertErr(	l_debug_info_ptr,
															ERR_QTY_CANT_LESS_MINFINQTY,
															p_dl_deal_pmtdet_struct_h_d->h_dl_client,
															p_dl_deal_pmtdet_struct_h_d->h_indentity_no,
															chr_l_h_instrcode_A,
															__LINE__,
															__FILE__ ))
			{
				APL_GOBACK_FAIL
			}
		}

		

		if ((p_dl_deal_pmtdet_struct_h_d->h_ispart_[0] == 'Y') &&
			 ((l_h_trdquantity - p_dl_deal_pmtdet_struct_h_d->h_newquantity) < l_h_minfmttrdquantity))
		{
			CO_InsertWarning(	l_debug_info_ptr,
									W_REM_QTY_LESS_MINFMTQTY,
									p_dl_deal_pmtdet_struct_h_d->h_dl_client,
									p_dl_deal_pmtdet_struct_h_d->h_indentity_no,
									chr_l_h_instrcode_A,
									__LINE__,
									__FILE__ );
		}
	}

	if ( p_dl_deal_pmtdet_struct_h_d->h_ispart_[0] == 'Y' )
	{



		strcpy(chr_l_allow_partials, APL_NULL_STRING);
		EXEC SQL VAR chr_l_allow_partials IS STRING;

		EXEC SQL SELECT PARTIAL_IND_A
		INTO :chr_l_allow_partials:l_i_allow_partials
		FROM DL_DEAL
		WHERE CLIENT = :p_dl_deal_pmtdet_struct_h_d->h_dl_client
		AND IDENTIY_NO =:p_dl_deal_pmtdet_struct_h_d->h_indentity_no;

		IS_ANY_ORA_ERROR;

		if (l_i_allow_partials==-1)
			strcpy(chr_l_allow_partials,APL_NULL_STRING);

      if ( chr_l_allow_partials[0] != 'Y' )
      {
      	CO_InsertErr(   l_debug_info_ptr,
                           ERR_PARTIAL_NOTALLOWED,
                           p_dl_deal_pmtdet_struct_h_d->h_dl_client,
                           APL_NULL_STRING,
                           APL_NULL_STRING,
                           __LINE__,
                           __FILE__ );
         APL_GOBACK_FAIL;
      }


		if ( p_dl_deal_pmtdet_struct_h_d->h_newquantity == 0 )
		{
			APL_DATA_MISSING(	"New Quantity",
									p_dl_deal_pmtdet_struct_h_d->h_dl_client,
									p_dl_deal_pmtdet_struct_h_d->h_indentity_no );
			int_l_error_flg = APL_FAILURE;
		}
	
		if ( p_dl_deal_pmtdet_struct_h_d->h_newquantity >= l_h_trdquantity )
		{
			if ( CO_InsertErr( 	l_debug_info_ptr,
											ERR_DEAL_QTY_SHLD_LESS_ORIGQTY,
											p_dl_deal_pmtdet_struct_h_d->h_dl_client,
											p_dl_deal_pmtdet_struct_h_d->h_indentity_no, 
											APL_NULL_STRING,
											__LINE__,
											__FILE__ ) == APL_FAILURE ) 
			{
				APL_GOBACK_FAIL;
			}
			int_l_error_flg = APL_FAILURE;
		}

		if ( !strcmp( p_dl_deal_pmtdet_struct_h_d->h_newindentity_no, APL_NULL_STRING) )
		{
			APL_DATA_MISSING(	"New Ref. Number", 
									p_dl_deal_pmtdet_struct_h_d->h_dl_client,
									p_dl_deal_pmtdet_struct_h_d->h_indentity_no );
			int_l_error_flg = APL_FAILURE;
		}

		if ( ( VAL_VP_DEAL(chr_l_h_trcode[0]) ) && 
				p_dl_deal_pmtdet_struct_h_d->h_newamount < 1 )
		{
			APL_DATA_MISSING( "New Amount",
									p_dl_deal_pmtdet_struct_h_d->h_dl_client,
									p_dl_deal_pmtdet_struct_h_d->h_indentity_no );
			int_l_error_flg = APL_FAILURE;
		}

		if ( ( VAL_VP_DEAL(chr_l_h_trcode[0]) ) && 
				p_dl_deal_pmtdet_struct_h_d->h_newamount >= l_h_trdamount )
		{
			if (	CO_InsertErr( 	l_debug_info_ptr,
											ERR_DEAL_AMT_MUST_LESS_ORIGAMT,
											p_dl_deal_pmtdet_struct_h_d->h_dl_client,
											p_dl_deal_pmtdet_struct_h_d->h_indentity_no, 
											APL_NULL_STRING,
											__LINE__,
											__FILE__ ) == APL_FAILURE )
			{
				APL_GOBACK_FAIL;
			}
			int_l_error_flg = APL_FAILURE;
		}

		
		

		strcpy(chr_mainfuncarea, APL_NULL_STRING);
		strcpy(chr_l_condid, APL_NULL_STRING);
		strcpy(chr_mainfuncarea, "TRD_LOCREFNO_PMT");
		strcpy(chr_l_condid, "LOCREFNO_NOT_NULL");
		int_l_condexists = 0;

		if ( APL_SUCCESS == CO_Chk_CntryEnabled(	chr_mainfuncarea,
															chr_l_condid,
															&int_l_condexists,
															l_debug_info_ptr ) )
		{
			if ( int_l_condexists > 0 &&
					!strlen( p_dl_deal_pmtdet_struct_h_d->h_newlocindentity_no) )
			{
				if ( CO_InsertErr(	l_debug_info_ptr,
											ERR_DEAL_LOCREFNO_CANTEMPTY,
											APL_NULL_STRING,
											APL_NULL_STRING,
											APL_NULL_STRING,
											__LINE__,
											__FILE__ ) == APL_FAILURE )
				{
					APL_GOBACK_FAIL;
				}
			}
		}
		else
		{
			APL_GOBACK_FAIL;
		}

		if ( int_l_error_flg == APL_FAILURE )
		{
			APL_GOBACK_FAIL;
		}

		if ( APL_FAILURE == DL_Chk_DLDet( p_dl_deal_pmtdet_struct_h_d->h_dl_client,
													p_dl_deal_pmtdet_struct_h_d->h_newindentity_no,
													'N', NULL, NULL, NULL, 
													NULL, NULL, NULL, NULL,
													l_debug_info_ptr ) )
		{
			int_l_error_flg = APL_FAILURE;
		}
	} 

	if ( int_l_error_flg == APL_FAILURE )
	{
		APL_GOBACK_FAIL;
	}
	
	


	IF_COND_EXISTS("DL_DEAL","DOMCPAC")
	{
		if ( APL_FAILURE == CO_Chk_AccValid( chr_l_h_domcpac,
													'Y', 'B', NULL, NULL, 'Y', 'N',
													'N', 'N',
													l_debug_info_ptr ) )
		{
			int_l_error_flg = APL_FAILURE;
		}


	

	strcpy(chr_mainfuncarea, APL_NULL_STRING);   
	strcpy(chr_l_condid, APL_NULL_STRING);
	strcpy(chr_mainfuncarea, "TRD_MAINT");
	strcpy(chr_l_condid, "EXT_TRD_CNTAC_ALWD");
	l_ext_trd_check = 0;
	if ( APL_FAILURE == CO_Chk_CntryEnabled( chr_mainfuncarea,
														chr_l_condid,
														&l_ext_trd_check,
														l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL
	}
	if((strcmp(l_mt_core_sys_params_struct_h.custody_clt_cd,chr_l_h_domcpac)==0) ||(l_ext_trd_check==0))
	{
		if ( strlen(chr_l_h_countacc_a) )
		{
			if ( APL_FAILURE == CO_Chk_AccValid( chr_l_h_countacc_a,
														'Y', 'C', 'C', NULL, 'Y', 'N',
														'N', 'N',
														l_debug_info_ptr ) )
			{
				int_l_error_flg = APL_FAILURE;
			}
		}
	} 

	}		

	if ( APL_FAILURE == CO_Chk_InstrValid( chr_l_h_instrcode_A,
												'Y', 'Y', 'N', 'N',
												NULL, 'N',
												l_debug_info_ptr ) )
	{
		int_l_error_flg = APL_FAILURE;
	}

	

	if ( l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y' )
	{
		if ( APL_FAILURE == MT_Chk_Loc( chr_l_h_locncode_a,
													'Y', 'Y', 'N', 
													l_debug_info_ptr ) )
		{
			int_l_error_flg = APL_FAILURE;
		}
	}

	

	if ( APL_FAILURE == CO_Chk_CcyValid( chr_l_h_ccycode,
												'M', 'Y',  
												l_debug_info_ptr ) )
	{
		int_l_error_flg = APL_FAILURE;
	}

	

	if ( APL_SUCCESS == DL_Chk_TrCdInstr(	chr_l_h_instrcode_A,        
													chr_l_h_trcode[0],
													&chr_l_trcodeinstrflg_a[0],
													l_debug_info_ptr ) )
	{
		if ( chr_l_trcodeinstrflg_a[0] == 'N' )
		{
			if ( CO_InsertErr(	l_debug_info_ptr,
										ERR_DEAL_DEALTYP_NVALFORINSTR_A,
										chr_l_h_instrcode_A,
										chr_l_h_trcode,
										APL_NULL_STRING,
										__LINE__,
										__FILE__ ) == APL_FAILURE )
			{
				APL_GOBACK_FAIL;
			}
			int_l_error_flg = APL_FAILURE;
		}
	}
	else
	{
		APL_GOBACK_FAIL;
	}
	
	printf("chr_l_h_trdt_a is %s\n,p_dl_deal_pmtdet_struct_h_d->h_confdate is %s\n",chr_l_h_trdt_a,p_dl_deal_pmtdet_struct_h_d->h_confdate);


	

	if ( APL_SUCCESS == CO_Pro_DateComp(	chr_l_h_trdt_a,
												 	p_dl_deal_pmtdet_struct_h_d->h_confdate, 
													&int_l_datecmp,  
													l_debug_info_ptr ) )
	{
		if ( int_l_datecmp < 0 )
		{
			if(	CO_InsertErr( 	l_debug_info_ptr,
											ERR_DEAL_CONFDT_NO_DEALDT, 
											p_dl_deal_pmtdet_struct_h_d->h_dl_client,
											p_dl_deal_pmtdet_struct_h_d->h_indentity_no, 
											APL_NULL_STRING,
											__LINE__,
											__FILE__ ) == APL_FAILURE )
			{
				APL_GOBACK_FAIL;
			}
			int_l_error_flg = APL_FAILURE; 
		}
	}
	else
	{
		APL_GOBACK_FAIL;
	}

	

	int_l_hol_exist = 0;

	if ( APL_SUCCESS == CO_Chk_Holiday(	p_dl_deal_pmtdet_struct_h_d->h_confdate,
														&int_l_hol_exist,
														l_debug_info_ptr,APL_NULL_STRING ) )
	{
		if ( int_l_hol_exist != 0 )
		{
			if ( CO_InsertErr(	l_debug_info_ptr,
										ERR_DATE_IS_HOLIDAY,
										p_dl_deal_pmtdet_struct_h_d->h_confdate,
										APL_NULL_STRING,
										APL_NULL_STRING,
										__LINE__,
										__FILE__ ) == APL_FAILURE )
			{
				APL_GOBACK_FAIL;
			}
			int_l_error_flg = APL_FAILURE;
		}
	}
	else
	{
		APL_GOBACK_FAIL;
	}

	

	strcpy(chr_mainfuncarea, APL_NULL_STRING);
	strcpy(chr_l_condid, APL_NULL_STRING);
	strcpy(chr_mainfuncarea, "TRD_PMT_VERWITH_CHK");
	strcpy(chr_l_condid, "VAL_VERWITH_FOR_CZ");
	int_l_condexists = 0;
	
	if ( APL_SUCCESS == CO_Chk_CntryEnabled(	chr_mainfuncarea,
														chr_l_condid,
														&int_l_condexists,
														l_debug_info_ptr ) )
	{
		if ( int_l_condexists > 0 )
		{
			if ( !strcmp( chr_l_h_locncode_a, "SCP" ) &&
					!strlen( p_dl_deal_pmtdet_struct_h_d->h_verfied_with ) )
			{
				APL_DATA_MISSING( "Verified With",
										p_dl_deal_pmtdet_struct_h_d->h_dl_client,
										p_dl_deal_pmtdet_struct_h_d->h_indentity_no ); 
				int_l_error_flg = APL_FAILURE;
			}
			
			if ( strlen(p_dl_deal_pmtdet_struct_h_d->h_verfied_with) )
			{
				int_l_rowexists = 0;
			
				EXEC SQL Select 1 
				into :int_l_rowexists 
				From PRO_SGENSTAT 	
				where ((MAP_VAL = :p_dl_deal_pmtdet_struct_h_d->h_verfied_with) AND
						 (MAP_TYPE = 'VERWITH') AND 
						 (NATION_CODE = 'CZ'));

				IS_ANY_ORA_ERROR;

				
				if (!int_l_rowexists)
				{
					if	(	CO_InsertErr(	l_debug_info_ptr,
													ERR_DEAL_NVAL_VERWITH_CZ,
													p_dl_deal_pmtdet_struct_h_d->h_dl_client,
													p_dl_deal_pmtdet_struct_h_d->h_indentity_no, 
													APL_NULL_STRING,
													__LINE__,
													__FILE__ ) == APL_FAILURE )
					{
						APL_GOBACK_FAIL;
					}
					int_l_error_flg = APL_FAILURE;
				}
			}
		}
	}	
	else
	{
		APL_GOBACK_FAIL;
	}

	

   strcpy(chr_mainfuncarea,"TRADE_MAINT_HU");
   strcpy(chr_l_subfunc_b,"LOC");
	strcpy(chr_l_fieldval,chr_l_h_locncode_a);

   int_retval=CO_Chk_SplVal(chr_mainfuncarea,chr_l_subfunc_b,chr_l_fieldval,&int_l_exists_a,l_debug_info_ptr);
   if(int_retval == APL_FAILURE)
    	APL_GOBACK_FAIL

   if(int_l_exists_a > 0)
	{
		 EXEC SQL VAR chr_l_h_codetype IS STRING;
       EXEC SQL VAR chr_l_h_codeval IS STRING;
       EXEC SQL VAR chr_l_h_countrycode IS STRING;

       strcpy(chr_l_h_countrycode,g_mt_commonsys_params_struct_h.nation_code);

		
		strcpy(chr_mainfuncarea, APL_NULL_STRING);
		strcpy(chr_l_condid, APL_NULL_STRING);
		strcpy(chr_mainfuncarea, "TRD_PMT_VERWITH_CHK");
		strcpy(chr_l_condid, "VAL_VERWITH_FOR_HU");
		int_l_condexists = 0;
	
		if ( APL_SUCCESS == CO_Chk_CntryEnabled(	chr_mainfuncarea,
															chr_l_condid,
															&int_l_condexists,
															l_debug_info_ptr ) )
		{
			if ( int_l_condexists > 0 )
			{
			
			
			
			
			
				if ( !strlen( p_dl_deal_pmtdet_struct_h_d->h_verfied_with ) )
				{
					APL_DATA_MISSING( "Verified With",
											p_dl_deal_pmtdet_struct_h_d->h_dl_client,
											p_dl_deal_pmtdet_struct_h_d->h_indentity_no ); 
					int_l_error_flg = APL_FAILURE;
				}
		
				if ( strlen(p_dl_deal_pmtdet_struct_h_d->h_verfied_with) )
				{
					
					
					

					strcpy(chr_l_h_codeval,p_dl_deal_pmtdet_struct_h_d->h_verfied_with);

					if  ( ( VAL_VP_DEAL(chr_l_h_trcode[0]) )) 
					{
						
							 

						strcpy(chr_l_h_codetype,"VERWITH_VP");
						
						EXEC SQL SELECT NVL(COUNT(*),0) 
						INTO :int_l_h_count:l_i_count 
						FROM PRO_SGENSTAT
       				WHERE ((MAP_TYPE = :chr_l_h_codetype) AND
								 (MAP_VAL = :chr_l_h_codeval) AND
         					 (NATION_CODE = :chr_l_h_countrycode));
   
						IS_ANY_ORA_ERROR;

						if (int_l_h_count = 0 ) 
						{
							if (	CO_InsertErr(	l_debug_info_ptr,
														ERR_DEAL_NVAL_VERWITH_HU_VP,
														p_dl_deal_pmtdet_struct_h_d->h_dl_client,
														p_dl_deal_pmtdet_struct_h_d->h_indentity_no, 
														APL_NULL_STRING,
														__LINE__,
														__FILE__ ) == APL_FAILURE )
							{	
								APL_GOBACK_FAIL;
							}
							int_l_error_flg = APL_FAILURE;
						}

					}

					if ( ( VAL_FREE_DEAL(chr_l_h_trcode[0]) ) )
               {
						strcpy(chr_l_h_codetype,"VERWITH_FREE");

                  EXEC SQL SELECT NVL(COUNT(*),0)
                  INTO :int_l_h_count:l_i_count
                  FROM PRO_SGENSTAT
                  WHERE ((MAP_TYPE = :chr_l_h_codetype) AND
                         (MAP_VAL = :chr_l_h_codeval) AND
                         (NATION_CODE = :chr_l_h_countrycode));
  
                  IS_ANY_ORA_ERROR;

                  if (int_l_h_count = 0 )
                  {
                     if (  CO_InsertErr(   l_debug_info_ptr,
                                          ERR_DEAL_NVAL_VERWITH_HU_FREE_A,
														 p_dl_deal_pmtdet_struct_h_d->h_dl_client,
                                          p_dl_deal_pmtdet_struct_h_d->h_indentity_no,
                                          APL_NULL_STRING,
                                          __LINE__,
                                          __FILE__ ) == APL_FAILURE )
                     {
                        APL_GOBACK_FAIL;
                     }
                     int_l_error_flg = APL_FAILURE;
                  }
               }

				}
			}	
		}
		else
		{
			APL_GOBACK_FAIL;
		}

	

		strcpy(chr_mainfuncarea, APL_NULL_STRING);
		strcpy(chr_l_condid, APL_NULL_STRING);
		strcpy(chr_mainfuncarea, "TRD_PMT_NOTE1_CHK");
		strcpy(chr_l_condid, "VAL_NOTE1_FOR_HU");
		int_l_condexists = 0;
	
		if ( APL_SUCCESS == CO_Chk_CntryEnabled(	chr_mainfuncarea,
															chr_l_condid,
															&int_l_condexists,
															l_debug_info_ptr ) )
		{
			if (( int_l_condexists > 0 ) &&  strlen(p_dl_deal_pmtdet_struct_h_d->h_info1))
			 {
				 
					
				if ( ( VAL_DELIVER_DEAL(chr_l_h_trcode[0]) ) || chr_l_h_trcode[0]=='5' || chr_l_h_trcode[0]=='7' )
				{

					if ( !strcmp(p_dl_deal_pmtdet_struct_h_d->h_verfied_with,S_VERWITH_NOTE1) ||
						! strcmp(p_dl_deal_pmtdet_struct_h_d->h_verfied_with,  S_VERWITH_NOTE2))
					{
						EXEC SQL VAR chr_l_h_ourtheir 	IS STRING;
						EXEC SQL VAR chr_l_h_cubk		IS STRING;

						
						
						if (strcmp(chr_l_h_domcpac,l_mt_core_sys_params_struct_h.custody_clt_cd))
						{
							EXEC SQL SELECT 	CLN_OUR_THEIR_IND,
													CLN_BRK_ALL
							INTO	chr_l_h_ourtheir:l_i_ourtheir,
									chr_l_h_cubk:l_i_cubk
							FROM 	MT_CLIENT
							WHERE	CLN_CODE = :chr_l_h_domcpac;

							IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_ACCNOT_FND,
																				chr_l_h_domcpac,
																				APL_NULL_STRING,
																				APL_NULL_STRING );
						}
						else 
						{
                    
                  	EXEC SQL SELECT   CLN_OUR_THEIR_IND,
                              			CLN_BRK_ALL
                  	INTO  chr_l_h_ourtheir:l_i_ourtheir,
                        	chr_l_h_cubk:l_i_cubk
                  	FROM  MT_CLIENT
                  	WHERE CLN_CODE = rtrim(SUBSTR(:chr_l_h_countacc_a,1,:G_SYS_ACCOUNT_LEN));

                  	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET( ERR_ACCNOT_FND,
                                                   			chr_l_h_countacc_a,
                                                   			APL_NULL_STRING,
                                                   			APL_NULL_STRING );
               	}

						if ( chr_l_h_ourtheir[0] == S_OURTHEIR_O && chr_l_h_cubk[0] != 'A' )
						{
							if ( !strlen(p_dl_deal_pmtdet_struct_h_d->h_info1) || 
								(strlen(p_dl_deal_pmtdet_struct_h_d->h_info1) > 6 ) ) 
							{
								if (	CO_InsertErr(	l_debug_info_ptr,
																ERR_DEAL_NVAL_NOTE1_HU,
																p_dl_deal_pmtdet_struct_h_d->h_dl_client,
																p_dl_deal_pmtdet_struct_h_d->h_indentity_no, 
																APL_NULL_STRING,
																__LINE__,
																__FILE__ ) == APL_FAILURE )
								{
									APL_GOBACK_FAIL;
								}
								int_l_error_flg = APL_FAILURE;
							}
						}

						
						if ( chr_l_h_ourtheir[0] == S_OURTHEIR_T && chr_l_h_cubk[0] != S_CUBKA )
               	{
							EXEC SQL VAR chr_l_h_sectrcode IS STRING;

							EXEC SQL SELECT SEC_DL_CODE
							INTO :chr_l_h_sectrcode:l_i_sectrcode
							FROM MT_INSTRUMENT
							WHERE INSTR_CODE = RTRIM(:chr_l_h_instrcode_A);

							IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET( ERR_INSTR_NOTFND,
                                          						chr_l_h_instrcode_A,
                                          						APL_NULL_STRING,
                                          						APL_NULL_STRING);

							if (!strcmp(chr_l_h_sectrcode,S_SECTOR1) ||
								 !strcmp(chr_l_h_sectrcode,S_SECTOR2))
							{
								if (strcmp(p_dl_deal_pmtdet_struct_h_d->h_info1,S_VALIDNOTE1) &&
								 	strcmp(p_dl_deal_pmtdet_struct_h_d->h_info1,S_VALIDNOTE2) )
                  		{
                     		if (  CO_InsertErr(   l_debug_info_ptr,
                          	                   		ERR_DEAL_NVAL_NOTE1_HU_OURTHEIR_T,
                                             		p_dl_deal_pmtdet_struct_h_d->h_dl_client,
                                             		p_dl_deal_pmtdet_struct_h_d->h_indentity_no,
                                             		APL_NULL_STRING,
                                             		__LINE__,
                                             		__FILE__ ) == APL_FAILURE )
                     		{
                        		APL_GOBACK_FAIL;
                     		}
                     		int_l_error_flg = APL_FAILURE;
                  		}
							}
               	}
						
					}
				}
			}
		}	
		else
		{	
			APL_GOBACK_FAIL;
		}
	}

	

	strcpy(chr_mainfuncarea,"TRD_PMT_VERWITH_CHK");
	strcpy(chr_l_condid,"VAL_VERWITH_FOR_HU");
	 
	if ( APL_FAILURE == CO_Chk_CntryEnabled( chr_mainfuncarea,
														chr_l_condid,
														&int_l_condexists,
														l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL
	}

	if(int_l_condexists > 0)
	{
	
	
	strcpy(chr_mainfuncarea,"TRADE_MAINT_HU");
   strcpy(chr_l_subfunc_b,"CPAMT_VERWITH");
  	strcpy(chr_l_fieldval,p_dl_deal_pmtdet_struct_h_d->h_verfied_with);

   int_retval=CO_Chk_SplVal(chr_mainfuncarea,chr_l_subfunc_b,chr_l_fieldval,&int_l_exists_a,l_debug_info_ptr);
   if(int_retval == APL_FAILURE)
   	APL_GOBACK_FAIL

   if ( (int_l_exists_a > 0) && p_dl_deal_pmtdet_struct_h_d->h_cpamt <= 0.0)
   {
   	if (  CO_InsertErr(   l_debug_info_ptr,
                              ERR_INVALID_CNTRPARTYAMT,
                              p_dl_deal_pmtdet_struct_h_d->h_dl_client,
                              p_dl_deal_pmtdet_struct_h_d->h_indentity_no,
                              APL_NULL_STRING,
                              __LINE__,
     			                  __FILE__ ) == APL_FAILURE )
      {
      	APL_GOBACK_FAIL;
      }
      int_l_error_flg = APL_FAILURE;
	}

	
	}

	

	if ( int_l_error_flg == APL_FAILURE )
	{
		APL_GOBACK_FAIL;
	}

	
	

	if ( p_dl_deal_pmtdet_struct_h_d->h_ispart_[0] == 'Y' )
	{
		l_mod_dealposn = p_dl_deal_pmtdet_struct_h_d->h_newquantity;
	}
	else
	{
	/*ISKB_8722 - Using APL_DOUBLE_EQUAL Macro to compare the deal quantities. - Starts*/
	//added by aditya for for Global Pre-Match Extract ISKB_8454 starts
	printf("\n testing p_dl_deal_pmtdet_struct_h_d->h_ispart_[0]=|%c|\n",p_dl_deal_pmtdet_struct_h_d->h_ispart_[0]);
	fflush(stdout);
	printf("\n testing p_dl_deal_pmtdet_struct_h_d->h_newquantity=|%f|\n",p_dl_deal_pmtdet_struct_h_d->h_newquantity);
	fflush(stdout);
	printf("\n Testing p_dl_deal_pmtdet_struct_h_d->h_newquantity=|%lf|\n",p_dl_deal_pmtdet_struct_h_d->h_newquantity);
	fflush(stdout);
	printf("\n Testing l_h_trdquantity=|%lf|\n",l_h_trdquantity);
	fflush(stdout);
	//if ( p_dl_deal_pmtdet_struct_h_d->h_newquantity!=l_h_trdquantity)
	if (!APL_DOUBLE_EQUAL(l_h_trdquantity,p_dl_deal_pmtdet_struct_h_d->h_newquantity))
	{
	printf("\n aditya:HERE1 \n");
						if (	CO_InsertErr(	l_debug_info_ptr,
														ERR_INVALID_QTY,
														p_dl_deal_pmtdet_struct_h_d->h_dl_client,
														chr_l_h_instrcode_A,
														APL_NULL_STRING,
														__LINE__,
														__FILE__ ) == APL_FAILURE )
						{
							APL_GOBACK_FAIL;
						}	
	}
	printf("\n aditya:HERE4 \n");
	//added by aditya for for Global Pre-Match Extract ISKB_8454 Ends
	/*ISKB_8722 - Using APL_DOUBLE_EQUAL Macro to compare the deal quantities. - Ends*/

		l_mod_dealposn = l_h_trdquantity;
	}

	
	if(CA_Rtv_Block_Type(  p_dl_deal_pmtdet_struct_h_d->h_indentity_no,
				chr_l_h_typeoftrd,
				chr_l_h_trcode,
				l_block_type,
				l_debug_info_ptr) == APL_FAILURE)
	{
			APL_GOBACK_FAIL
	}

		
	
	
	if ( APL_FAILURE == DL_Proc_PosLock(	p_dl_deal_pmtdet_struct_h_d->h_dl_client,
													chr_l_h_instrcode_A,
													chr_l_h_locncode_a,
													APL_NULL_STRING,l_block_type,
													l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL;
	}
	printf("\n Through with DL_Proc_PosLock .......\n");

    printf("\n chr_l_h_trcode=|%s| \n",chr_l_h_trcode);		

	if ( VAL_DELIVER_DEAL(chr_l_h_trcode[0]) || chr_l_h_trcode[0]=='7')
	{
		printf("\n AMit:HERE1 \n");

/** Changes:AmitB:27/09/06:Split Trade Confirmation **/
	IF_COND_EXISTS("SPLIT_PROCESSING","SPCR_MULTITRD")
	{	
		
	 if(strcmp(chr_l_h_typeoftrd,DEALTYPE_CORP_A) && (strncmp(p_dl_deal_pmtdet_struct_h_d->h_indentity_no,STOCK_SPLIT,strlen(STOCK_SPLIT) - 1) || strncmp(p_dl_deal_pmtdet_struct_h_d->h_indentity_no,CACR_IND,strlen(CACR_IND))))
	 {
		
           printf("\n At line number 1445 \n");
		
			if ( APL_FAILURE == DL_Chk_AvlPos(	p_dl_deal_pmtdet_struct_h_d->h_dl_client,
														chr_l_h_instrcode_A,
														chr_l_h_locncode_a,
														'Y','N','N','Y','Y','N','N','N',
														l_block_type,
														&l_CurrPosn,
														l_debug_info_ptr) )
			{
				APL_GOBACK_FAIL;
			}

			
	
	printf("\n l_CurrPosn=|%lf|l_mod_dealposn-|%lf| \n",l_CurrPosn,l_mod_dealposn);	
		
		if ( l_CurrPosn < l_mod_dealposn )
		{
			           printf("\n At line number 1464 \n");
			
			strcpy(chr_mainfuncarea, APL_NULL_STRING);
			strcpy(chr_l_condid, APL_NULL_STRING);
			strcpy(chr_mainfuncarea, "TRD_PMT_ENUFPOSN_CHK");
			strcpy(chr_l_condid, "NOT_ENUFPOSN_WARNING");
			int_l_condexists = 0;
	
			if ( APL_SUCCESS == CO_Chk_CntryEnabled(	chr_mainfuncarea,
																chr_l_condid,
																&int_l_condexists,
																l_debug_info_ptr ) )
			{
				if ( int_l_condexists > 0 )
				{
					strcpy(chr_l_fieldname, APL_NULL_STRING);
					strcpy(chr_l_fieldname, "clscode");
					strcpy(chr_l_clscode, APL_NULL_STRING);

					if ( APL_FAILURE == CR_Rtv_InstrChrVal(	chr_l_h_instrcode_A,
																	chr_l_fieldname,
																	chr_l_clscode,
																	l_debug_info_ptr ) )
					{
						APL_GOBACK_FAIL;
					}
	
					if ( !strcmp( chr_l_clscode, "MIN" ) ) 
					{
						if (	CO_InsertWarning(	l_debug_info_ptr,
														ERR_DEAL_NENUFPOSN,
														p_dl_deal_pmtdet_struct_h_d->h_dl_client,
														chr_l_h_instrcode_A,
														APL_NULL_STRING,
														__LINE__,
														__FILE__ ) == APL_FAILURE )
						{
							APL_GOBACK_FAIL;
						}
						int_l_error_flg = APL_FAILURE;
					} 
					else
					{
						if (	CO_InsertErr(	l_debug_info_ptr,
														ERR_DEAL_NENUFPOSN,
														p_dl_deal_pmtdet_struct_h_d->h_dl_client,
														chr_l_h_instrcode_A,
														APL_NULL_STRING,
														__LINE__,
														__FILE__ ) == APL_FAILURE )
						{
							APL_GOBACK_FAIL;
						}
						int_l_error_flg = APL_FAILURE;
					}
				}
				else
				{
					if (	CO_InsertErr(	l_debug_info_ptr,
													ERR_DEAL_NENUFPOSN,
													p_dl_deal_pmtdet_struct_h_d->h_dl_client,
													chr_l_h_instrcode_A,
													APL_NULL_STRING,
													__LINE__,
													__FILE__ ) == APL_FAILURE )
					{
						APL_GOBACK_FAIL;
					}
					int_l_error_flg = APL_FAILURE;
				}
			}
			else
			{
				APL_GOBACK_FAIL;
			}
		}
		
	 }
	 else
	 {
		 printf("\n Amit:Split/CR deal .. So skipping check \n");
	 }
	}
 	else
	{
	                  printf("\n At line number 1549 \n");	
   		
			if ( APL_FAILURE == DL_Chk_AvlPos(	p_dl_deal_pmtdet_struct_h_d->h_dl_client,
														chr_l_h_instrcode_A,
														chr_l_h_locncode_a,
														'Y','N','N','Y','Y','N','N','N',
														l_block_type,
														&l_CurrPosn,
														l_debug_info_ptr) )
			{
				APL_GOBACK_FAIL;
			}

		
		if ( l_CurrPosn < l_mod_dealposn )
		{
			
			            printf("\n At line number 1566 \n");
			 
			strcpy(chr_mainfuncarea, APL_NULL_STRING);
			strcpy(chr_l_condid, APL_NULL_STRING);
			strcpy(chr_mainfuncarea, "TRD_PMT_ENUFPOSN_CHK");
			strcpy(chr_l_condid, "NOT_ENUFPOSN_WARNING");
			int_l_condexists = 0;
	
			if ( APL_SUCCESS == CO_Chk_CntryEnabled(	chr_mainfuncarea,
																chr_l_condid,
																&int_l_condexists,
																l_debug_info_ptr ) )
			{
				if ( int_l_condexists > 0 )
				{
					
					           printf("\n At line number 1582 \n");
					
					strcpy(chr_l_fieldname, APL_NULL_STRING);
					strcpy(chr_l_fieldname, "clscode");
					strcpy(chr_l_clscode, APL_NULL_STRING);

					if ( APL_FAILURE == CR_Rtv_InstrChrVal(	chr_l_h_instrcode_A,
																	chr_l_fieldname,
																	chr_l_clscode,
																	l_debug_info_ptr ) )
					{
						APL_GOBACK_FAIL;
					}
	
					if ( !strcmp( chr_l_clscode, "MIN" ) ) 
					{
						if (	CO_InsertWarning(	l_debug_info_ptr,
														ERR_DEAL_NENUFPOSN,
														p_dl_deal_pmtdet_struct_h_d->h_dl_client,
														chr_l_h_instrcode_A,
														APL_NULL_STRING,
														__LINE__,
														__FILE__ ) == APL_FAILURE )
						{
							APL_GOBACK_FAIL;
						}
						int_l_error_flg = APL_FAILURE;
					} 
					else
					{
						
						           printf("\n At line number 1613 else part \n");
						 
						if (	CO_InsertErr(	l_debug_info_ptr,
														ERR_DEAL_NENUFPOSN,
														p_dl_deal_pmtdet_struct_h_d->h_dl_client,
														chr_l_h_instrcode_A,
														APL_NULL_STRING,
														__LINE__,
														__FILE__ ) == APL_FAILURE )
						{
							APL_GOBACK_FAIL;
						}
						int_l_error_flg = APL_FAILURE;
					}
				}
				else
				{
					           printf("\n At line number 1629 \n");
					
					if (	CO_InsertErr(	l_debug_info_ptr,
													ERR_DEAL_NENUFPOSN,
													p_dl_deal_pmtdet_struct_h_d->h_dl_client,
													chr_l_h_instrcode_A,
													APL_NULL_STRING,
													__LINE__,
													__FILE__ ) == APL_FAILURE )
					{
						APL_GOBACK_FAIL;
					}
					int_l_error_flg = APL_FAILURE;
				}
			}
			else
			{
				APL_GOBACK_FAIL;
			}
		}

	}		
		

		int_l_datecmp = 0;
		if ( APL_FAILURE == CO_Pro_DateComp(	p_dl_deal_pmtdet_struct_h_d->h_confdate,
														chr_l_h_csd,
														&int_l_datecmp,
														l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL;
		}

		
		
		if ( int_l_datecmp < 0 )
		{
			           printf("\n At line number 1667 \n");
			
			IF_COND_EXISTS("SPLIT_PROCESSING","SPCR_MULTITRD")
			{
			 if(strcmp(chr_l_h_typeoftrd,DEALTYPE_CORP_A) && (strncmp(p_dl_deal_pmtdet_struct_h_d->h_indentity_no,STOCK_SPLIT,strlen(STOCK_SPLIT) - 1) || strncmp(p_dl_deal_pmtdet_struct_h_d->h_indentity_no,CACR_IND,strlen(CACR_IND))))
				{
					           printf("\n At line number 1673 Insside IF \n");
					
					if ( APL_FAILURE == DL_Chk_VDPPos(	p_dl_deal_pmtdet_struct_h_d->h_dl_client,
															chr_l_h_instrcode_A,
															chr_l_h_locncode_a,
															chr_l_h_posn_status,
															l_mod_dealposn,
															p_dl_deal_pmtdet_struct_h_d->h_confdate,
															&int_l_enufvdp,
															l_debug_info_ptr ) )
					{
						APL_GOBACK_FAIL;
					}
				}
				else
				{
					printf("\n Amit:DL_Mod_DLPmt:Split/CR Deal... Skipping Check1 \n");
				}
			}
            else
			{	            printf("\n At line number 1693 Insdie Else \n");
		
				if ( APL_FAILURE == DL_Chk_VDPPos(	p_dl_deal_pmtdet_struct_h_d->h_dl_client,
															chr_l_h_instrcode_A,
															chr_l_h_locncode_a,
															chr_l_h_posn_status,
															l_mod_dealposn,
															p_dl_deal_pmtdet_struct_h_d->h_confdate,
															&int_l_enufvdp,
															l_debug_info_ptr ) )
					{
						APL_GOBACK_FAIL;
					}

			}
		}
		else
		{
			printf("\n Amit:chr_l_h_typeoftrd=|%s| p_dl_deal_pmtdet_struct_h_d->h_indentity_no=|%s| \n",chr_l_h_typeoftrd,p_dl_deal_pmtdet_struct_h_d->h_indentity_no);

			
/** Changes:AmitB:27/09/06:Split Trade Confirmation **/
		IF_COND_EXISTS("SPLIT_PROCESSING","SPCR_MULTITRD")	
		{		
		  if(strcmp(chr_l_h_typeoftrd,DEALTYPE_CORP_A) && (strncmp(p_dl_deal_pmtdet_struct_h_d->h_indentity_no,STOCK_SPLIT,strlen(STOCK_SPLIT) - 1) || strncmp(p_dl_deal_pmtdet_struct_h_d->h_indentity_no,CACR_IND,strlen(CACR_IND))))
		  {
		 	 printf("\n Amit:Now it should not come here \n");  
			 if ( APL_FAILURE == DL_Chk_VDPPos(	p_dl_deal_pmtdet_struct_h_d->h_dl_client,
															chr_l_h_instrcode_A,
															chr_l_h_locncode_a,
															chr_l_h_posn_status,
															l_mod_dealposn,
															chr_l_h_csd,
															&int_l_enufvdp,
															l_debug_info_ptr ) )
			 {
				 APL_GOBACK_FAIL;
			 }
			 
			 printf("\n Completed VDPPos function \n");
		  }
		  else
		  {
			 printf("\n Amit:DL_Mod_DLPmt:Split/CR Deal... Skipping Check2 \n");
		  }
		}
	    else
	    {
			           printf("\n At line number 1741 Else part \n");
			
		  if ( APL_FAILURE == DL_Chk_VDPPos(	p_dl_deal_pmtdet_struct_h_d->h_dl_client,
															chr_l_h_instrcode_A,
															chr_l_h_locncode_a,
															chr_l_h_posn_status,
															l_mod_dealposn,
															chr_l_h_csd,
															&int_l_enufvdp,
															l_debug_info_ptr ) )
			{
				APL_GOBACK_FAIL;
			}
	    }
		
	   }
	}

	if ( APL_FAILURE == CO_RtvSysDtTime( chr_l_curr_date_time,
															l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL;
	}
printf("\n Through with CO_RtvSysDtTime .......\n");

	if ( APL_SUCCESS == CO_ChkErr( *l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL;
	}
printf("\n Through with CO_ChkErr .......\n");

	

	EXEC SQL SELECT DEC_LEN
				INTO	:int_l_h_ccy_decimallen:l_i_ccy_decimallen
				FROM	DL_CURRENCY
				WHERE CURRENCY_CD 	= :chr_l_h_ccycode ;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_VAL_NF,
														"Decimal length",
														"Type Of Instr",
														APL_NULL_STRING );


	
	
	if(p_dl_deal_pmtdet_struct_h_d->h_grossamount != 0)
	{
		strcpy(chr_mainfuncarea,"TRADE_MAINT");
		strcpy(chr_l_subfunc_b,"GROSS_AMT_LOCATION");
		strcpy(chr_l_fieldval,chr_l_h_locncode_a);
		int_retval=CO_Chk_SplVal(chr_mainfuncarea,chr_l_subfunc_b,chr_l_fieldval,&int_l_exists_a,l_debug_info_ptr);
		if(int_retval == APL_FAILURE)
			APL_GOBACK_FAIL
		if(int_l_exists_a == 0)
			CO_InsertErr(l_debug_info_ptr,ERR_INVALID_GROSS_AMT,chr_l_h_locncode_a,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);
      else
		{	
			printf("\n Inside int_l_exists not equal to 0\n");
			l_round_gramount = 0;
			CO_Round(p_dl_deal_pmtdet_struct_h_d->h_grossamount,
           		  int_l_h_ccy_decimallen,
           		&l_round_gramount);
			if (p_dl_deal_pmtdet_struct_h_d->h_ispart_[0] == 'N')
				{
					printf("\n Inside h_ispart_ = n \n");
					l_h_brokercomm = l_round_gramount; 
					
               if((!strcmp(chr_l_h_typeoftrd,PROPREMOTEDEAL))||(!strcmp(chr_l_h_typeoftrd,NONPROPREMOTEDEAL)))
					{
						chr_l_h_amount = l_round_gramount;
					}
					
					else if ( p_dl_deal_pmtdet_struct_h_d->h_newamount > 0 )
               {
                  l_round_gramount = 0;
                  CO_Round(p_dl_deal_pmtdet_struct_h_d->h_newamount,
                          int_l_h_ccy_decimallen,
                          &l_round_gramount);
                  chr_l_h_amount = l_round_gramount ;
               }
						
				}
		}
	}
	
	else if(p_dl_deal_pmtdet_struct_h_d->h_grossamount == 0)
	{
					printf("\n Inside h_grossamount = 0 \n");
		strcpy(chr_mainfuncarea,"TRADE_MAINT");
      strcpy(chr_l_subfunc_b,"GROSS_AMT_LOCATION");
      strcpy(chr_l_fieldval,chr_l_h_locncode_a);
      int_retval=CO_Chk_SplVal(chr_mainfuncarea,chr_l_subfunc_b,chr_l_fieldval,&int_l_exists_a,l_debug_info_ptr);
      if(int_retval == APL_FAILURE)
         APL_GOBACK_FAIL
		if((int_l_exists_a > 0) && (p_dl_deal_pmtdet_struct_h_d->h_ispart_[0] == 'N'))
			{
				l_h_brokercomm = l_round_gramount; 
				
            if((!strcmp(chr_l_h_typeoftrd,PROPREMOTEDEAL))||(!strcmp(chr_l_h_typeoftrd,NONPROPREMOTEDEAL)))
				{
					chr_l_h_amount = l_round_gramount;
				}
				
				else if ( p_dl_deal_pmtdet_struct_h_d->h_newamount > 0 ) 
            {
               l_round_gramount = 0;
               CO_Round(p_dl_deal_pmtdet_struct_h_d->h_newamount,
                       int_l_h_ccy_decimallen,
                       &l_round_gramount);
               chr_l_h_amount = l_round_gramount ;
            }
				
			}
	}
	

					printf("\n Outof all else if \n");
	if ( p_dl_deal_pmtdet_struct_h_d->h_ispart_[0] == 'Y' )
	{
		l_sys_dl_deal_struct_hj = (SYS_DL_DEAL_STRUCT_H*)calloc(1,sizeof(SYS_DL_DEAL_STRUCT_H));
		APL_MALLOC_FAIL(l_sys_dl_deal_struct_hj);
		
		l_intl_envdata_struct_h = (INTL_ENV_DATA_STRUCT_H*)calloc(1,sizeof(INTL_ENV_DATA_STRUCT_H));
		APL_MALLOC_FAIL(l_intl_envdata_struct_h);

		

		strcpy(l_intl_envdata_struct_h->usr, p_intl_env_data_struct_h->usr);
		strcpy(l_intl_envdata_struct_h->h_mode, APL_FUNC_INPUT);
		strcpy(l_intl_envdata_struct_h->processtion, p_intl_env_data_struct_h->processtion);
		strcpy(l_intl_envdata_struct_h->auth_req, p_intl_env_data_struct_h->auth_req);
		strcpy(l_intl_envdata_struct_h->subprocess, APL_NULL_STRING);
		strcpy(l_intl_envdata_struct_h->h_process, p_intl_env_data_struct_h->h_process);

		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_dl_client  			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_indentity_no 				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_dlt 					IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_setldt 			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_ex_arena				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_instrdate					IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_moneydate				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_domcpclt_cd				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_isspotdl			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_dlfromord			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_entry 			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_reapired_ind			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_domcp_custodyclt			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_countclt 			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_countcltnm			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_clientof			IS STRING;		
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_custinfo				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_fx_reqd				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_ispymtlocal			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_verfied_with				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_brkrno				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_fail_cd				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_failinfo				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_ispart_			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_report_at_eom_ind				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_billdate				IS STRING;	
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_locindentity_no				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_instruct_person			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_dealcd				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_instr_code				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_currencycode				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_classofdl			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_origindentity_no			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_newdt				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_maker					IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_maker_dt				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_deal_status		IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_access_stamp		IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_info1					IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_loccode 			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_reginstr_ind				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_pos_stat			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_status_reg			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_confdate				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_matchindentity_no			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_markfaildate			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_candropdate			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_checker				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_checker_dt			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_instrconv_ind			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_ndsbldate				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_lrdltype			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_ndsdate					IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_ublckdate				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_delrecdate				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_lastregdate			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_lr_chkdate				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_lr_confdate			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_lr_instrdate				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_tmpoutdate				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_tmpretdate				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_transmitdate			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_hostdate				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_lr_ndsbldate			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_lr_ndsdate				IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_lr_ublckdate			IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_clt_reqdel_flag		IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_mod_hispos_ind		IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_updhispos_date		IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_cash_client      IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_allow_part_s    IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_locchng_flg    	IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hj->h_comm_indentity_no    	IS STRING;
      
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_instruct_personnm       IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_clientofcode     IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_inter_med_person         IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_inter_med_personnm       IS STRING;
      
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_fxccy       IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_uniq_ident_no       IS STRING;
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_exp_setl_date      IS STRING; 
      EXEC SQL VAR l_sys_dl_deal_struct_hj->h_misinfo          IS STRING; 

		memset(l_sys_dl_deal_struct_hj->h_countclt,APL_NULL_CHAR,sizeof(l_sys_dl_deal_struct_hj->h_countclt));
		

      
		EXEC SQL SELECT * INTO :l_sys_dl_deal_struct_hj FROM DL_DEAL 
								WHERE ROWID = :chr_l_h_rowid;

		if ( sqlca.sqlcode != -1405 )
		{
			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET( ERR_DEAL_NF,
																p_dl_deal_pmtdet_struct_h_d->h_dl_client,
																p_dl_deal_pmtdet_struct_h_d->h_indentity_no,
																APL_NULL_STRING ); 
		}

		strcpy(l_sys_dl_deal_struct_hj->h_indentity_no, p_dl_deal_pmtdet_struct_h_d->h_newindentity_no);
		l_round_quantity = 0;
		CR_Proc_InstrQtyRound(	l_mod_dealposn, chr_l_h_instrcode_A,&l_round_quantity,l_debug_info_ptr);
		l_sys_dl_deal_struct_hj->h_qty = l_round_quantity;
		l_round_amount = 0;
		CO_Round(	p_dl_deal_pmtdet_struct_h_d->h_newamount,
					int_l_h_ccy_decimallen,
					&l_round_amount );
		/**l_sys_dl_deal_struct_hj->h_amt = l_round_amount; **/
		
		if ( l_sys_dl_deal_struct_hj->h_dlfromord[0] == 'Y')
		{
			l_intl_envdata_struct_h->h_process[0] = 'S';
			l_intl_envdata_struct_h->h_process[1] = '\0';
			strcpy(l_sys_dl_deal_struct_hj->h_origindentity_no,p_dl_deal_pmtdet_struct_h_d->h_indentity_no);
			
			strcpy(l_sys_dl_deal_struct_hj->h_entry,"M");

		}
		l_sys_dl_deal_struct_hj->h_dlfromord[0] = 'N';
		l_sys_dl_deal_struct_hj->h_dlfromord[1] = '\0';
		strcpy(l_sys_dl_deal_struct_hj->h_locindentity_no,p_dl_deal_pmtdet_struct_h_d->h_newlocindentity_no);	

		l_qty_ratio = p_dl_deal_pmtdet_struct_h_d->h_newquantity/l_h_trdquantity;
		EXEC SQL SELECT ROUND(BROKERCOMM*:l_qty_ratio,:int_l_h_ccy_decimallen),
							 ROUND(STX_COMM * :l_qty_ratio,:int_l_h_ccy_decimallen),
							 ROUND(AMOUNT *:l_qty_ratio,:int_l_h_ccy_decimallen),
							 ROUND(STAMP_DUTY *:l_qty_ratio,:int_l_h_ccy_decimallen)
							 INTO :l_sys_dl_deal_struct_hj->h_brokercomm,
									:l_sys_dl_deal_struct_hj->h_stx_comm,
									:l_sys_dl_deal_struct_hj->h_amt,
									:l_sys_dl_deal_struct_hj->h_stamp_duty
							 FROM DL_DEAL WHERE ROWID = :chr_l_h_rowid;

		IS_ANY_ORA_ERROR
		
		/**l_sys_dl_deal_struct_hj->h_brokercomm = p_dl_deal_pmtdet_struct_h_d->h_grossamount;**/
		l_sys_dl_deal_struct_hj->h_custodycomm = 0;
		/**l_sys_dl_deal_struct_hj->h_stx_comm = 0;**/
		l_sys_dl_deal_struct_hj->h_oth_comm = 0;
		l_sys_dl_deal_struct_hj->h_net_amt =l_round_amount;
		
		strcpy(l_sys_dl_deal_struct_hj->h_confdate,p_dl_deal_pmtdet_struct_h_d->h_confdate);
		strcpy(l_sys_dl_deal_struct_hj->h_verfied_with,p_dl_deal_pmtdet_struct_h_d->h_verfied_with);
		l_sys_dl_deal_struct_hj->h_diffamount = p_dl_deal_pmtdet_struct_h_d->h_diffamount;

      

      strcpy(chr_l_temp_note1, l_sys_dl_deal_struct_hj->h_info1);
      strcpy(l_sys_dl_deal_struct_hj->h_info1, p_dl_deal_pmtdet_struct_h_d->h_info1);

		l_sys_dl_deal_struct_hj->h_ispart_[0] = 'N';
		l_sys_dl_deal_struct_hj->h_ispart_[1] = '\0';
		strcpy(l_sys_dl_deal_struct_hj->h_brkrno, p_dl_deal_pmtdet_struct_h_d->h_brkrno);
		strcpy(l_sys_dl_deal_struct_hj->h_fail_cd, APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj->h_markfaildate, APL_NULL_STRING);
		strcpy(l_sys_dl_deal_struct_hj->h_access_stamp, chr_l_curr_date_time);
		strcpy(l_sys_dl_deal_struct_hj->h_deal_status, STATUS_CONF);
		strcpy(l_sys_dl_deal_struct_hj->h_custinfo, APL_NULL_STRING);

		if ( !strcmp( chr_l_h_checker, APL_NULL_STRING ) ||
				!strcmp( chr_l_h_maker, chr_l_h_checker ) )
		{
			strcpy(l_sys_dl_deal_struct_hj->h_checker, APL_NULL_STRING);
			strcpy(l_sys_dl_deal_struct_hj->h_checker_dt, APL_NULL_STRING);
			strcpy(l_sys_dl_deal_struct_hj->h_checker, p_intl_env_data_struct_h->usr);
			strcpy(l_sys_dl_deal_struct_hj->h_checker_dt, chr_l_curr_date_time);
		}

		

		strcpy(chr_mainfuncarea, APL_NULL_STRING);
		strcpy(chr_l_condid, APL_NULL_STRING);
		strcpy(chr_mainfuncarea, "TRD_PMT_PAR_TYPOFTRD");
		strcpy(chr_l_condid, "UPD_TYPEOFTRD_TO_20");
		int_l_condexists = 0;
	
		if ( APL_SUCCESS == CO_Chk_CntryEnabled(	chr_mainfuncarea,
															chr_l_condid,
															&int_l_condexists,
															l_debug_info_ptr ) )
		{
			if ( 	int_l_condexists > 0 ) 
			{	
				strcpy(l_sys_dl_deal_struct_hj->h_classofdl, NONBILLDEAL );
			}
		}
		else
		{
			APL_GOBACK_FAIL;
		}

		

		strcpy(chr_mainfuncarea, APL_NULL_STRING);
		strcpy(chr_l_condid, APL_NULL_STRING);
		strcpy(chr_mainfuncarea, "TRD_PMT_PAR_CUSTNOTE");
		strcpy(chr_l_condid, "UPD_CUSNOTE_INSTRMONDT");
		int_l_condexists = 0;
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf(chr_l_buf," entering for country check%s\n",l_sys_dl_deal_struct_hj->h_custinfo);
		CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);

		if ( APL_SUCCESS == CO_Chk_CntryEnabled(	chr_mainfuncarea,
															chr_l_condid,
															&int_l_condexists,
															l_debug_info_ptr ) )
		{
			if ( 	int_l_condexists > 0 ) 
			{	
					
				
				
					if (strcmp(g_mt_commonsys_params_struct_h.nation_code, "HU") == 0)
					{
						
						EXEC SQL  SELECT TO_CHAR(TO_DATE(:p_dl_deal_pmtdet_struct_h_d->h_confdate),'dd-chr_mm-yyyy')
										INTO :chr_custnote_date
										FROM DUAL;
						
						strcpy(l_sys_dl_deal_struct_hj->h_custinfo, "SETTLE. DT: " );
						strcat(l_sys_dl_deal_struct_hj->h_custinfo, chr_custnote_date);
					
						memset( chr_l_buf, NULL, BUFFER_LEN );
						sprintf(chr_l_buf,"The chr_value of client_note is: %s\n",l_sys_dl_deal_struct_hj->h_custinfo);
						CO_ProcMonitor(APL_OUT_FILE,chr_l_buf,NULL,p_intl_env_data_struct_h);
						if ( VAL_VP_DEAL(chr_l_h_trcode[0]) ) 
						{
							if ( (atof(p_dl_deal_pmtdet_struct_h_d->h_brkrno) > 0 ) &&
									strcmp( p_dl_deal_pmtdet_struct_h_d->h_brkrno, APL_NULL_STRING) )
							{
								strcat(l_sys_dl_deal_struct_hj->h_custinfo, "	MONEY SETTLE. DT : ");
								strcat(l_sys_dl_deal_struct_hj->h_custinfo, p_dl_deal_pmtdet_struct_h_d->h_brkrno );
							}
						else
							{
							strcat(l_sys_dl_deal_struct_hj->h_custinfo, "	");
							strcat(l_sys_dl_deal_struct_hj->h_custinfo, p_dl_deal_pmtdet_struct_h_d->h_brkrno);
							}
						}
					} 
				

				strcpy(l_sys_dl_deal_struct_hj->h_fail_cd, "90");
				strcpy(l_sys_dl_deal_struct_hj->h_markfaildate, APL_NULL_STRING);
				l_sys_dl_deal_struct_hj->h_subfailreas_cd= 0;

				
				l_sys_dl_deal_struct_hj->h_cpamt = p_dl_deal_pmtdet_struct_h_d->h_cpamt;
				
	
				
				
				if (strcmp(int_l_h_failcode,"90")) 
				{
					if ( APL_FAILURE == GBDbInsIMSGENT(	MS_MSGNO_534,
																p_dl_deal_pmtdet_struct_h_d->h_newindentity_no,
																p_dl_deal_pmtdet_struct_h_d->h_dl_client,
																'Y',
																l_param_str,
																l_debug_info_ptr ) )
					{
						APL_GOBACK_FAIL;
					}
				}
			}
		}
		else
		{
			APL_GOBACK_FAIL;
		}

	  strcpy(l_sys_dl_deal_struct_hj->h_msg_stat,APL_NULL_STRING);	 
		
 	  strcpy(l_sys_dl_deal_struct_hj->h_exp_setl_date, p_dl_deal_pmtdet_struct_h_d->h_exp_setl_date);
		

   	
   	
      if (!strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_INPUT))
         strcpy(l_sys_dl_deal_struct_hj->h_allow_part_s,"N");
   	
           /* Added by Shradha for Kotak Phase 2 IOP-- Starts */
	   if(!strcmp(p_intl_env_data_struct_h->h_mode,APL_FUNC_AUTHORISE))
	   {
		 strcpy(l_sys_dl_deal_struct_hj->h_misinfo,"PARTIAL PREMATCH"); //Interop
	   }
	   /* Added by Shradha for Kotak Phase 2 IOP-- Ends */
   
		if ( APL_FAILURE == DL_Proc_Trd(	l_sys_dl_deal_struct_hj,
													&int_l_trdrepseqnum,
													l_intl_envdata_struct_h,
													l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL;
		}


         if (APL_FAILURE==EI_Mod_MQData(l_sys_dl_deal_struct_hj->h_dl_client,
                                        l_sys_dl_deal_struct_hj->h_indentity_no,
                                        NULL,
                                        NULL,
                                        "B",
                                         l_debug_info_ptr))
                     APL_GOBACK_FAIL

		if ( !strcmp( chr_l_h_checker, APL_NULL_STRING ) ||
				!strcmp( chr_l_h_maker, chr_l_h_checker ) )
		{
			strcpy( chr_l_trade_status, APL_NULL_STRING );
			strcpy( chr_l_trade_status, STATUS_AUTH );

			EXEC SQL SELECT QTY
			INTO :l_h_temp_quantity:l_i_temp_qty
			FROM DL_DEAL
			WHERE ROWID = :chr_l_h_rowid;

			IS_ANY_ORA_ERROR;
			
			CR_Proc_InstrQtyRound(l_h_temp_quantity-p_dl_deal_pmtdet_struct_h_d->h_newquantity,chr_l_h_instrcode_A,&l_h_temp_quantity_rnd,l_debug_info_ptr);
			printf("HELLO*******\n");
			printf("Ratio for new deal was |%lf|\n");
			l_qty_ratio = 1.00 - l_qty_ratio;
			printf("Ratio for old deal is |%lf|\n");


			EXEC SQL UPDATE DL_DEAL 
						SET	QTY				= :l_h_temp_quantity_rnd,
							 	NET_AMT			= ROUND(NET_AMT *:l_qty_ratio,:int_l_h_ccy_decimallen),
							 	BROKERCOMM		= ROUND(BROKERCOMM *:l_qty_ratio,:int_l_h_ccy_decimallen),
							 	STX_COMM			= ROUND(STX_COMM *:l_qty_ratio,:int_l_h_ccy_decimallen),
								STAMP_DUTY			= ROUND(STAMP_DUTY *:l_qty_ratio,:int_l_h_ccy_decimallen),
							 	AMOUNT			= ROUND(AMOUNT *:l_qty_ratio,:int_l_h_ccy_decimallen),
								PARTIAL_IND_B		= :p_dl_deal_pmtdet_struct_h_d->h_ispart_,
								CHECKER			= :p_intl_env_data_struct_h->usr,
								CHECKER_DT		= :chr_l_curr_date_time,
								/*
								DEAL_STAT	= :chr_l_trade_status,
								*//* changes by amish --20/05 */
								COMM_IDENT_NO		= :p_dl_deal_pmtdet_struct_h_d->h_comm_indentity_no,
								ACCESS_STAMP	= :chr_l_curr_date_time 
						WHERE ROWID 			= :chr_l_h_rowid;
		}
		else
		{
			EXEC SQL SELECT QTY
			INTO :l_h_temp_quantity:l_i_temp_qty
			FROM DL_DEAL
			WHERE ROWID = :chr_l_h_rowid;

			IS_ANY_ORA_ERROR;
			
			CR_Proc_InstrQtyRound(l_h_temp_quantity-p_dl_deal_pmtdet_struct_h_d->h_newquantity,chr_l_h_instrcode_A,&l_h_temp_quantity_rnd,l_debug_info_ptr);

			/*** l_qty_ratio = l_h_temp_quantity_rnd/p_dl_deal_pmtdet_struct_h_d->h_newquantity; **/
			printf("HELLO*******\n");
			printf("Ratio for new deal was |%lf|\n");
			l_qty_ratio = 1.00 - l_qty_ratio;
			printf("Ratio for old deal is |%lf|\n");

			EXEC SQL UPDATE DL_DEAL 
						SET	QTY				= :l_h_temp_quantity_rnd,
							 	NET_AMT			= ROUND(NET_AMT *:l_qty_ratio,:int_l_h_ccy_decimallen),
							 	BROKERCOMM		= ROUND(BROKERCOMM *:l_qty_ratio,:int_l_h_ccy_decimallen),
							 	STX_COMM			= ROUND(STX_COMM *:l_qty_ratio,:int_l_h_ccy_decimallen),
								STAMP_DUTY			= ROUND(STAMP_DUTY *:l_qty_ratio,:int_l_h_ccy_decimallen),
							 	AMOUNT			= ROUND(AMOUNT *:l_qty_ratio,:int_l_h_ccy_decimallen),
								PARTIAL_IND_B		= :p_dl_deal_pmtdet_struct_h_d->h_ispart_,
								COMM_IDENT_NO		= :p_dl_deal_pmtdet_struct_h_d->h_comm_indentity_no,
								ACCESS_STAMP	= :chr_l_curr_date_time
						WHERE ROWID 			= :chr_l_h_rowid;
		}
		IS_ANY_ORA_ERROR;

	}
	else
	
	{


					printf("\n Inside partial = N \n");
		if (g_mt_commonsys_params_struct_h.ei_smi_ind[0] == 'Y')
			{
				if(int_p_smieligibility_flg)
					{
						strcpy(chr_l_failcode_A,"90");
						l_subfailreason_cd = 0;
						strcpy(chr_l_failnote,"PREMATCHED");
					}
				else
					{
						strcpy(chr_l_failcode_A,APL_NULL_STRING);
						l_subfailreason_cd = NULL;
						strcpy(chr_l_failnote,APL_NULL_STRING);
					}
			}	
		strcpy( chr_l_trade_status, APL_NULL_STRING );
		strcpy( chr_l_trade_status, STATUS_CONF );

      

 
					printf("\n Now doing update on dl_deal .. \n");
		if ( !strcmp( chr_l_h_checker, APL_NULL_STRING ) ||
				!strcmp( chr_l_h_maker, chr_l_h_checker ) )
		{
			
					printf("\n First if update on dl_deal .. \n");

			EXEC SQL UPDATE DL_DEAL 
						SET 	VAL_FDT 			= :p_dl_deal_pmtdet_struct_h_d->h_confdate,
								VERFIED_WITH 			= :p_dl_deal_pmtdet_struct_h_d->h_verfied_with,
								AMT_DIFFER 			= :p_dl_deal_pmtdet_struct_h_d->h_diffamount,
                        INFO1          = :p_dl_deal_pmtdet_struct_h_d->h_info1,
								FAILREASON_CD			= :chr_l_failcode_A,
								SUB_FAIL_CD		= :l_subfailreason_cd,
								FAIL_DET			= :chr_l_failnote,
								DATEOF_MARKFAIL 		= NULL,
								CHECKER			= :p_intl_env_data_struct_h->usr,
								CHECKER_DT		= :chr_l_curr_date_time,
								ACCESS_STAMP	= :chr_l_curr_date_time,
								DEAL_STAT	= :chr_l_trade_status,
								COMM_IDENT_NO		= :p_dl_deal_pmtdet_struct_h_d->h_comm_indentity_no,
								BROKERCOMM		   = :l_h_brokercomm,
								EXP_SETLDATE		= :p_dl_deal_pmtdet_struct_h_d->h_exp_setl_date,
								AMOUNT			= :chr_l_h_amount
						WHERE	ROWID				= :chr_l_h_rowid;
		}
      
		else
		{
					printf("\n First else update on dl_deal .. \n");
			EXEC SQL UPDATE DL_DEAL 
						SET 	VAL_FDT 			= :p_dl_deal_pmtdet_struct_h_d->h_confdate,
								VERFIED_WITH 			= :p_dl_deal_pmtdet_struct_h_d->h_verfied_with,
								AMT_DIFFER 			= :p_dl_deal_pmtdet_struct_h_d->h_diffamount,
                        INFO1          = :p_dl_deal_pmtdet_struct_h_d->h_info1,
								FAILREASON_CD			= :chr_l_failcode_A,
								SUB_FAIL_CD		= :l_subfailreason_cd,
								FAIL_DET			= :chr_l_failnote,
								DATEOF_MARKFAIL 		= NULL,
								ACCESS_STAMP	= :chr_l_curr_date_time,
								DEAL_STAT	= :chr_l_trade_status,
								COMM_IDENT_NO		= :p_dl_deal_pmtdet_struct_h_d->h_comm_indentity_no,
								BROKERCOMM	      = :l_h_brokercomm,
								EXP_SETLDATE		= :p_dl_deal_pmtdet_struct_h_d->h_exp_setl_date,
								AMOUNT			= :chr_l_h_amount	
						WHERE	ROWID				= :chr_l_h_rowid;
		}
      

		IS_ANY_ORA_ERROR;
 

		

					printf("\n calling cntrycondchk .. \n");
		strcpy(chr_mainfuncarea, APL_NULL_STRING);
		strcpy(chr_l_condid, APL_NULL_STRING);
		strcpy(chr_mainfuncarea, "TRD_PMT_PAR_CUSTNOTE");
		strcpy(chr_l_condid, "UPD_CUSNOTE");
		int_l_condexists = 0;
	
		if ( APL_SUCCESS == CO_Chk_CntryEnabled(	chr_mainfuncarea,
															chr_l_condid,
															&int_l_condexists,
															l_debug_info_ptr ) )
		{
			if ( 	int_l_condexists > 0 ) 
			{	
					printf("\n int_l_cond exists > 0  .. \n");
					
				
				
					if (strcmp(g_mt_commonsys_params_struct_h.nation_code, "HU") == 0)
					{
						
					printf("\n country is HU  .. \n");
						EXEC SQL  SELECT TO_CHAR(TO_DATE(:p_dl_deal_pmtdet_struct_h_d->h_confdate),'dd-chr_mm-yyyy')
										INTO :chr_custnote_date
										FROM DUAL;

						
                  
						strcpy(chr_l_custnote_a, "SETTLE. DT: " );
						
						strcat(chr_l_custnote_a, chr_custnote_date);
						if ( VAL_VP_DEAL(chr_l_h_trcode[0]) ) 
							{
								if ( (atof(p_dl_deal_pmtdet_struct_h_d->h_brkrno) > 0 ) &&
										strcmp( p_dl_deal_pmtdet_struct_h_d->h_brkrno, APL_NULL_STRING) )
								{
									strcat(chr_l_custnote_a, "	MONEY SETTLE. DT : ");
									strcat(chr_l_custnote_a, p_dl_deal_pmtdet_struct_h_d->h_brkrno );
								}
							else
								{
								strcat(chr_l_custnote_a, "	");
								strcat(chr_l_custnote_a, p_dl_deal_pmtdet_struct_h_d->h_brkrno);
								}
							}
					} 

				
				
			    strcpy(chr_l_failcode_A,"90");	
				 int_l_h_subfailcode=0;
				

				
 
					printf("\n 2nd update on dl_deal  .. \n");
				EXEC SQL UPDATE DL_DEAL
						SET 	CLIENT_NOTE = :chr_l_custnote_a,
								CP_AMT = :p_dl_deal_pmtdet_struct_h_d->h_cpamt,
								FAILREASON_CD = '90',
								SUB_FAIL_CD	=	0,
								DATEOF_MARKFAIL = NULL
						WHERE ROWID = :chr_l_h_rowid;

				IS_ANY_ORA_ERROR;
							
				
					
				
				if (strcmp(int_l_h_failcode,"90")) 
            {
					memset(l_param_str,APL_NULL_CHAR,201);
					printf("\n failreason_cd is 90  .. \n");
					if ( APL_FAILURE == GBDbInsIMSGENT(	MS_MSGNO_534,
																p_dl_deal_pmtdet_struct_h_d->h_indentity_no,
																p_dl_deal_pmtdet_struct_h_d->h_dl_client,
																'Y',
																l_param_str,
																l_debug_info_ptr ) )
					{
						APL_GOBACK_FAIL;
					}
				}
            /* ISKB-361 : ASHISH 22-01-2008 Start */
            if (strcmp(int_l_h_failcode,"90") == 0)
            {
               memset(l_param_str,APL_NULL_CHAR,201);
               printf("\n failreason_cd is 90 and for DVP deals  .. \n");
               if ( APL_FAILURE == GBDbInsIMSGENT( MS_MSGNO_534,
                                                p_dl_deal_pmtdet_struct_h_d->h_indentity_no,
                                                p_dl_deal_pmtdet_struct_h_d->h_dl_client,
                                                'Y',
                                                l_param_str,
                                                l_debug_info_ptr ) )
               {
                  APL_GOBACK_FAIL;
               }
            }
            /* ISKB-361: ASHISH 22-01-2008 End */
			}
		}
		else
		{
			APL_GOBACK_FAIL;
		}

					printf("\n through with cntry iv_cond chk .. \n");
		      
				if (strcmp(chr_l_failcode_A,"90")==0)
				{
					printf("\n failreason_cd is 90 .. \n");
            	if ( APL_FAILURE ==  DL_Mod_CCSPendDL(p_dl_deal_pmtdet_struct_h_d->h_dl_client,
                                                   p_dl_deal_pmtdet_struct_h_d->h_indentity_no,
                                                   MS_CCS_FC,
                                                   "90",
                                                   "0",
                                                   chr_l_custnote_a,
                                                   &l_debug_info_ptr) )
            	{
               	APL_GOBACK_FAIL
					}
            }
					printf("\n calling DL_Mod_CCSPendDL .. \n");
            if ( APL_FAILURE ==  DL_Mod_CCSPendDL(p_dl_deal_pmtdet_struct_h_d->h_dl_client,
                                                   p_dl_deal_pmtdet_struct_h_d->h_indentity_no,
                                                   MS_CCS_RL,
                                                   APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,
                                                   &l_debug_info_ptr) )
            {
               APL_GOBACK_FAIL
				}
            	
	}
							 
	 


		strcpy(chr_mainfuncarea, APL_NULL_STRING);
		strcpy(chr_l_condid, APL_NULL_STRING);
		strcpy(chr_mainfuncarea, "TRD_MAINT");
		strcpy(chr_l_condid, "TRANSMITDT_CHECK");
		int_l_condexists = 0;

					printf("\n again calling CO_Chk_CntryEnabled .. \n");
		if ( APL_FAILURE == CO_Chk_CntryEnabled( chr_mainfuncarea,
															chr_l_condid,
															&int_l_condexists,
															l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL
		}

		if(int_l_condexists==1)
		{
			if ((strcmp(chr_l_h_trcode,"2")!=0) &&  (strcmp(chr_l_h_domcpac,l_mt_core_sys_params_struct_h.custody_clt_cd)))
			{
				EXEC SQL UPDATE DL_DEAL SET TRANS_DATE = NULL
							WHERE ROWID=:chr_l_h_rowid;
				
				IS_ANY_ORA_ERROR
			}
		}
	  
		if(CA_Rtv_Block_Type(  p_dl_deal_pmtdet_struct_h_d -> h_indentity_no,
					chr_l_h_typeoftrd,
					chr_l_h_trcode,
					l_block_type,
					l_debug_info_ptr) == APL_FAILURE)
		{
				APL_GOBACK_FAIL
		}
	

	if ( p_dl_deal_pmtdet_struct_h_d->h_ispart_[0] == 'Y' )
	{
		

		if ( APL_FAILURE == DL_Mod_Posn(	p_dl_deal_pmtdet_struct_h_d->h_dl_client,
														chr_l_h_instrcode_A,
														chr_l_h_locncode_a,
														chr_l_h_posn_status,
														'U',
														chr_l_h_trcode[0],
														&l_mod_dealposn,
														'D',l_block_type,
														l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL;
		}
	}
	else
	{
					printf("\n  calling DL_Mod_Posn 1 .. chr_l_h_locncode_a=|%s|\n",chr_l_h_locncode_a);
		if ( APL_FAILURE == DL_Mod_Posn(	p_dl_deal_pmtdet_struct_h_d->h_dl_client,
														chr_l_h_instrcode_A,
														chr_l_h_locncode_a,
														chr_l_h_posn_status,
														'U',
														chr_l_h_trcode[0],
														&l_mod_dealposn,
														'D',l_block_type,
														l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL;
		}

					printf("\n  calling DL_Mod_Posn 2 .. \n");
		if ( APL_FAILURE == DL_Mod_Posn(	p_dl_deal_pmtdet_struct_h_d->h_dl_client,
														chr_l_h_instrcode_A,
														chr_l_h_locncode_a,
														chr_l_h_posn_status,
														'C',
														chr_l_h_trcode[0],
														&l_mod_dealposn,
														'I',l_block_type,
														l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL;
		}
	}	

    
					printf("\n  calling EI_Mod_MQData .. \n");
         if (APL_FAILURE==EI_Mod_MQData(p_dl_deal_pmtdet_struct_h_d->h_dl_client,
                                        p_dl_deal_pmtdet_struct_h_d->h_indentity_no,
                                        NULL,
                                        NULL,
                                        "B",
                                        l_debug_info_ptr))
         APL_GOBACK_FAIL  


	
	

	

	strcpy(l_dl_dealaudit_struct_ha->h_dl_client, p_dl_deal_pmtdet_struct_h_d->h_dl_client);
	strcpy(l_dl_dealaudit_struct_ha->h_indentity_no,	 p_dl_deal_pmtdet_struct_h_d->h_indentity_no);
	strcpy(l_dl_dealaudit_struct_ha->h_trail_for, "T");
	strcpy(l_dl_dealaudit_struct_ha->h_processdetail, p_intl_env_data_struct_h->processtion);
	strcpy(l_dl_dealaudit_struct_ha->h_proc_usr, p_intl_env_data_struct_h->usr);
	if ( p_dl_deal_pmtdet_struct_h_d->h_ispart_[0] == 'Y' )
	{
		strcpy(l_dl_dealaudit_struct_ha->h_subprocess, PARTIALCONFIRM);
	}
	else
	{
		strcpy(l_dl_dealaudit_struct_ha->h_subprocess, APL_NULL_STRING);
	}
	strcpy(l_dl_dealaudit_struct_ha->h_logdate, APL_NULL_STRING);
	

 
	
	if (p_dl_deal_pmtdet_struct_h_d->h_ispart_[0] == 'Y')
	{
		strcpy(l_dl_dealaudit_struct_ha->h_fail_cd, l_sys_dl_deal_struct_hj->h_fail_cd);
	}
	else
	{
		strcpy(l_dl_dealaudit_struct_ha->h_fail_cd,chr_l_failcode_A);
	}

	
	if(l_i_failcode != -1)
		l_dl_dealaudit_struct_ha->h_subfailreas_cd= int_l_h_subfailcode;
	if ( p_dl_deal_pmtdet_struct_h_d->h_ispart_[0] == 'Y' )
	{
		l_dl_dealaudit_struct_ha->h_qty = l_h_trdquantity - l_mod_dealposn;
	}
	else
	{
		l_dl_dealaudit_struct_ha->h_qty = l_h_trdquantity;
	}
 	strcpy(l_dl_dealaudit_struct_ha->h_dlfromord, chr_l_h_trdfromord);

					printf("\n  calling CR_Mod_CLHAudTrail .. \n");
	if ( APL_FAILURE == CR_Mod_CLHAudTrail(	l_dl_dealaudit_struct_ha,
													l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL;
	} 

	APL_GOBACK_SUCCESS;

	

	RETURN_SUCCESS :
		APL_FREE(l_dl_dealaudit_struct_ha);
		APL_FREE(l_sys_dl_deal_struct_hj);
		APL_FREE(l_intl_envdata_struct_h);
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function DL_Mod_DLPmt with Success\n",
							NULL,
							p_intl_env_data_struct_h );
		}
		return(APL_SUCCESS);

	RETURN_FAILURE :
		APL_FREE(l_dl_dealaudit_struct_ha);
		APL_FREE(l_sys_dl_deal_struct_hj);
		APL_FREE(l_intl_envdata_struct_h);
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function DL_Mod_DLPmt with Errors\n",
							NULL,
							p_intl_env_data_struct_h );
		}
		return(APL_FAILURE);
}





int DL_Mod_DLPmtChng(	DL_DEAL_PMTCHG_STRUCT_H *p_dl_deal_pmtchg_struct_h_b,
							INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,	
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{

	

	struct sqlca sqlca;	

	short		l_i_access_stamp 	= 0;
	short		l_i_domcpac			= 0;
	short		l_i_countacc		= 0;
	short		l_i_instr_code			= 0;
	short		l_i_locncode		= 0;
	short		l_i_ccycode			= 0;
	short		l_i_numamend		= 0;
	short		int_l_i_qty				= 0;
	short		l_i_trdfromord		= 0;
	short		l_i_decimallen		= 0;

	int 		int_l_error_flag 	= APL_SUCCESS;
	int	   int_l_h_numamend   = 0;
	int		int_l_h_decimallen	= 0;

	char		chr_l_h_domcpac[APL_CLIENT_LENGTH] 		= APL_NULL_STRING;
	char 		chr_l_h_countacc_a[APL_COUNTACC_LEN]	= APL_NULL_STRING; 
	char  	chr_l_h_instrcode_A[APL_INSTRUMENTCODE_LEN] 		= APL_NULL_STRING;
	char  	chr_l_h_locncode_a[APL_LOCNCODE_LENGTH]	= APL_NULL_STRING;
	char 		chr_l_h_ccycode[APL_CCYCODE_LEN] 		= APL_NULL_STRING;
	char 		chr_l_h_access_stamp[APL_DATE_LEN] 	= APL_NULL_STRING;
	char     chr_l_maker[APL_USERID_LEN] 			= APL_NULL_STRING;
	char		chr_l_makerdt[APL_DATE_LEN] 			= APL_NULL_STRING;
	char		chr_l_checker[APL_USERID_LEN] 			= APL_NULL_STRING;
	char		chr_l_checkerdt[APL_DATE_LEN] 			= APL_NULL_STRING;
	char  	chr_l_rowid_A[APL_ROWID_LEN] 				= APL_NULL_STRING;
	char  	chr_l_now[APL_DATE_LEN] 					= APL_NULL_STRING;
	char  	chr_l_h_trdfromord[APL_FLAG_LENGTH] 		= APL_NULL_STRING;
	char		chr_l_trcode_a[APL_FLAG_LENGTH] 				= APL_NULL_STRING;
	char 		chr_l_typeofinstr[TYPEOF_INSTR_LEN]			= APL_NULL_STRING;
	char		chr_l_trd_status[APL_STATUS_LEN] 		= APL_NULL_STRING;
	char		chr_l_buf[BUFFER_LEN]						= APL_NULL_STRING;
	short    l_ext_trd_check   =  0  ;     
	char     chr_mainfuncarea[APL_MAINFUNCAREA_LEN]   = APL_NULL_STRING;
	char     chr_l_condid[APL_CONDID_LEN]               = APL_NULL_STRING;

	double	l_h_quantity_a	= 0.0;
	double	chr_l_val		= 0.0;

	DL_DEALAUDIT_STRUCT_H *l_dl_dealaudit_struct_h = NULL;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE	:my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	

	EXEC SQL VAR chr_l_h_access_stamp	IS STRING;
	EXEC SQL VAR chr_l_h_domcpac 		IS STRING;
	EXEC SQL VAR chr_l_h_countacc_a 		IS STRING;
	EXEC SQL VAR chr_l_h_instrcode_A 		IS STRING;
	EXEC SQL VAR chr_l_h_locncode_a 		IS STRING;
	EXEC SQL VAR chr_l_h_ccycode 		IS STRING;

	

	l_dl_dealaudit_struct_h = (DL_DEALAUDIT_STRUCT_H *)calloc(1, sizeof(DL_DEALAUDIT_STRUCT_H));
	APL_MALLOC_FAIL(l_dl_dealaudit_struct_h);

	memset(chr_l_h_countacc_a,APL_NULL_CHAR,sizeof(chr_l_h_countacc_a));
	

	

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE, "Entered Function CDBUpdPMTChgFn", NULL, p_intl_envdatastruct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "The Account is    : %s", p_dl_deal_pmtchg_struct_h_b->h_dl_client);
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, p_intl_envdatastruct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "The RefNo is      : %s", p_dl_deal_pmtchg_struct_h_b->h_indentity_no);
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, p_intl_envdatastruct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "The Trade Date is : %s", p_dl_deal_pmtchg_struct_h_b->h_dlt);
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, p_intl_envdatastruct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "The CSD is        : %s", p_dl_deal_pmtchg_struct_h_b->h_setldt);
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, p_intl_envdatastruct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "The Price is      : %f", p_dl_deal_pmtchg_struct_h_b->h_pr);
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, p_intl_envdatastruct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "The Amount is     : %f", p_dl_deal_pmtchg_struct_h_b->h_amt);
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, p_intl_envdatastruct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "The DomCPBnkAc is : %s", p_dl_deal_pmtchg_struct_h_b->h_domcp_custodyclt);
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, p_intl_envdatastruct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "The CountAcc is   : %s", p_dl_deal_pmtchg_struct_h_b->h_countclt);
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, p_intl_envdatastruct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "The CountAccNm is : %s", p_dl_deal_pmtchg_struct_h_b->h_countcltnm);
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, p_intl_envdatastruct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "The CustChgFlg is : %s", p_dl_deal_pmtchg_struct_h_b->h_cust_chgind);
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, p_intl_envdatastruct_h);
	}
	

	
	

	if (!strlen(p_dl_deal_pmtchg_struct_h_b->h_dl_client))
	{
		APL_DATA_MISSING("Account", APL_NULL_STRING, APL_NULL_STRING);
		int_l_error_flag = APL_FAILURE;
	} 
	if (!strlen(p_dl_deal_pmtchg_struct_h_b->h_indentity_no))
	{
		APL_DATA_MISSING("RefNo", APL_NULL_STRING, APL_NULL_STRING);
		int_l_error_flag = APL_FAILURE;
	} 
	if (!strlen(p_dl_deal_pmtchg_struct_h_b->h_dlt))
	{
		APL_DATA_MISSING("Trade Date", APL_NULL_STRING, APL_NULL_STRING);
		int_l_error_flag = APL_FAILURE;
	} 
	if (!strlen(p_dl_deal_pmtchg_struct_h_b->h_setldt))
	{
		APL_DATA_MISSING("CSD", APL_NULL_STRING, APL_NULL_STRING);
		int_l_error_flag = APL_FAILURE;
	} 
	if (!strlen(p_dl_deal_pmtchg_struct_h_b->h_domcp_custodyclt))
	{
		APL_DATA_MISSING("DomCPBnkAc", APL_NULL_STRING, APL_NULL_STRING);
		int_l_error_flag = APL_FAILURE;
	} 

	if (APL_FAILURE == int_l_error_flag) APL_GOBACK_FAIL

	

	if (APL_FAILURE == DL_Rtv_TrdChrVal(	p_dl_deal_pmtchg_struct_h_b->h_dl_client,
													p_dl_deal_pmtchg_struct_h_b->h_indentity_no,
													"rowid",
													chr_l_rowid_A,
													l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	

	if (APL_FAILURE == DL_Rtv_TrdChrVal(	p_dl_deal_pmtchg_struct_h_b->h_dl_client,
													p_dl_deal_pmtchg_struct_h_b->h_indentity_no,
													"trcode",
													chr_l_trcode_a,
													l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	if ( VAL_VP_DEAL(chr_l_trcode_a[0]) )
	{
		if (p_dl_deal_pmtchg_struct_h_b->h_amt < 1)
		{
			APL_DATA_MISSING("Amount", APL_NULL_STRING, APL_NULL_STRING);
			int_l_error_flag = APL_FAILURE;
		}
	}  	

	if (APL_FAILURE == int_l_error_flag) APL_GOBACK_FAIL

	

	EXEC SQL SELECT 	ACCESS_STAMP, DOMESTIC_CPCLT, CP_CLT,
							INSTR_CODE, LOCATION_CD, CURRENCY_CD, 
							AMEND_COUNT, QTY, DEAL_FRM_ORD 
	INTO	:chr_l_h_access_stamp:l_i_access_stamp,
			:chr_l_h_domcpac:l_i_domcpac,
			:chr_l_h_countacc_a:l_i_countacc,
			:chr_l_h_instrcode_A:l_i_instr_code,
			:chr_l_h_locncode_a:l_i_locncode,
			:chr_l_h_ccycode:l_i_ccycode,
			:int_l_h_numamend:l_i_numamend,
			:l_h_quantity_a:int_l_i_qty,
			:chr_l_h_trdfromord:l_i_trdfromord
	FROM DL_DEAL
	WHERE ROWID = :chr_l_rowid_A;
			

	

	if (strcmp(chr_l_h_access_stamp, p_dl_deal_pmtchg_struct_h_b->h_access_stamp))
	{
		CO_InsertErr(	l_debug_info_ptr,
								ERR_ACCESSSTAMP_CHGD,
								APL_NULL_STRING,
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__ );
		APL_GOBACK_FAIL
	}


	

   if (APL_FAILURE == DL_Chk_DLDet(  p_dl_deal_pmtchg_struct_h_b->h_dl_client,
                                    p_dl_deal_pmtchg_struct_h_b->h_indentity_no,
                                    'Y', 
                                    NULL,  
                                    'N', 
                                    'N', 
                                    'N', 
                                    NULL,
                                    NULL,
                                    NULL,
                                    l_debug_info_ptr ))
   {
      int_l_error_flag = APL_FAILURE;
   }

	

	

	if (chr_l_h_trdfromord[0] == 'Y')
	{
		if ( APL_FAILURE == CO_Chk_AccValid(	p_dl_deal_pmtchg_struct_h_b->h_dl_client, 
												'Y', 
												'C', 
												'B',
												NULL, 
												'Y', 
												'N',
												'N',
												'N',
												l_debug_info_ptr))
		{
			int_l_error_flag = APL_FAILURE;
		}
	}
	else
	{
		if ( APL_FAILURE == CO_Chk_AccValid(	p_dl_deal_pmtchg_struct_h_b->h_dl_client, 
													'Y', 
													'C', 
													NULL, 
													NULL, 
													'Y', 
													'N', 
													'N', 
													'N', 
													l_debug_info_ptr ) )
   	{
      	int_l_error_flag = APL_FAILURE;
   	}
	}

	
	IF_COND_EXISTS("DL_DEAL","DOMCPAC")
	{
   if ( APL_FAILURE == CO_Chk_AccValid(	chr_l_h_domcpac, 
												'Y', 
												'B', 
												NULL, 
												NULL, 
												'Y', 
												'N', 
												'N', 
												'N', 
												l_debug_info_ptr ) )
   {
      int_l_error_flag = APL_FAILURE;
	}

	


	   strcpy(chr_mainfuncarea, APL_NULL_STRING);   
		strcpy(chr_l_condid, APL_NULL_STRING);
		strcpy(chr_mainfuncarea, "TRD_MAINT");
		strcpy(chr_l_condid, "EXT_TRD_CNTAC_ALWD");
		l_ext_trd_check = 0;
		if ( APL_FAILURE == CO_Chk_CntryEnabled( chr_mainfuncarea,
															chr_l_condid,
															&l_ext_trd_check,
															l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL;
		}

			if((strcmp(l_mt_core_sys_params_struct_h.custody_clt_cd,chr_l_h_domcpac)==0) ||(l_ext_trd_check==0))
			{
				if (strlen(chr_l_h_countacc_a) )
				{
					if ( APL_FAILURE == CO_Chk_AccValid( chr_l_h_countacc_a,
																'Y',
																'C',
																'C',
																NULL,
																'Y',
																'N',
																'N',
																'N',
																l_debug_info_ptr ) )
					{
						int_l_error_flag = APL_FAILURE;
					}
				}
			}          

	

	if ( APL_FAILURE == CO_Chk_AccValid(	p_dl_deal_pmtchg_struct_h_b->h_domcp_custodyclt, 
												'Y', 
												'B', 
												NULL, 
												NULL, 
												'Y', 
												'N', 
												'N', 
												'N', 
												l_debug_info_ptr ) )
   {
      int_l_error_flag = APL_FAILURE;
   }

	}	

	if ( APL_FAILURE == CO_Chk_InstrValid(	chr_l_h_instrcode_A, 
												'Y', 
												'Y', 
												'N', 
												'N', 
												NULL, 
												'N', 
												l_debug_info_ptr ) )
   {
      int_l_error_flag = APL_FAILURE;
   }
	
	

	if (l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y')
	{
		if (APL_FAILURE == MT_Chk_Loc(	chr_l_h_locncode_a,
													'Y',
													'Y',
													NULL,
													l_debug_info_ptr ))
		{
			int_l_error_flag = APL_FAILURE;
		}
	}

	

	if ( APL_FAILURE == CO_Chk_CcyValid(	chr_l_h_ccycode, 
												'M', 
												'Y', 
												l_debug_info_ptr ) )
   {
      int_l_error_flag = APL_FAILURE;
   }
	

	

	if (APL_FAILURE == int_l_error_flag) APL_GOBACK_FAIL

	if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr)) APL_GOBACK_FAIL

	

	if (APL_FAILURE == CO_RtvSysDtTime(chr_l_now, l_debug_info_ptr))
	{
		APL_GOBACK_FAIL
	}
	
	
	

	EXEC SQL SELECT DEC_LEN
	INTO :int_l_h_decimallen:l_i_decimallen
	FROM DL_CURRENCY
	WHERE CURRENCY_CD = :chr_l_h_ccycode;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_CCY_NOTFND,
														chr_l_h_ccycode,
														APL_NULL_STRING,
														APL_NULL_STRING);

   EXEC SQL SELECT INSTR_TYPE INTO :chr_l_typeofinstr
   FROM MT_INSTRUMENT
   WHERE instr_code = RTRIM(:chr_l_h_instrcode_A);

   IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET( ERR_INSTR_NOTFND,
                                          chr_l_h_instrcode_A,
                                          APL_NULL_STRING,
                                          APL_NULL_STRING );

	

	if (!strcmp(chr_l_typeofinstr, APL_INSTRU_FMT))
	{
		chr_l_val = 0;
		CO_Round(	p_dl_deal_pmtchg_struct_h_b->h_pr, 3, &chr_l_val);
		p_dl_deal_pmtchg_struct_h_b->h_pr = chr_l_val;

		p_dl_deal_pmtchg_struct_h_b->h_pr/=100;
	}
	else
	{
		chr_l_val = 0;
		CO_Round(	p_dl_deal_pmtchg_struct_h_b->h_pr, int_l_h_decimallen, &chr_l_val);
		p_dl_deal_pmtchg_struct_h_b->h_pr = chr_l_val;
	}

	if (p_dl_deal_pmtchg_struct_h_b->h_cust_chgind[0] == 'Y')
		int_l_h_numamend += 1;

	strcpy(chr_l_maker, p_intl_envdatastruct_h->usr);
	strcpy(chr_l_makerdt, chr_l_now);
	strcpy(chr_l_trd_status, APL_STATUS_UNAUTH);

	if (p_intl_envdatastruct_h->auth_req[0] == 'N')
	{
		strcpy(chr_l_checker, chr_l_maker);
		strcpy(chr_l_checkerdt, chr_l_makerdt);
		strcpy(chr_l_trd_status, APL_STS_AUTH);
	}
	else
	{
		strcpy(chr_l_checker, APL_NULL_STRING);
		strcpy(chr_l_checkerdt, APL_NULL_STRING);
	} 

	EXEC SQL UPDATE dl_deal
	SET	deal_date         = :p_dl_deal_pmtchg_struct_h_b->h_dlt,
			setl_date     = :p_dl_deal_pmtchg_struct_h_b->h_setldt,
			COST        = :p_dl_deal_pmtchg_struct_h_b->h_pr,
			AMOUNT       = ROUND(:p_dl_deal_pmtchg_struct_h_b->h_amt, :int_l_h_decimallen),
			DOMCP_CUSTODYCLT   = :p_dl_deal_pmtchg_struct_h_b->h_domcp_custodyclt,
			cp_clt     = :p_dl_deal_pmtchg_struct_h_b->h_countclt,
			CP_CLTNAME   = :p_dl_deal_pmtchg_struct_h_b->h_countcltnm,
			AMEND_COUNT     = :int_l_h_numamend,
			ORIG_AMOUNT      = ROUND(:p_dl_deal_pmtchg_struct_h_b->h_amt, :int_l_h_decimallen),
			failreason_cd     = NULL,
			sub_fail_cd	 =	NULL,
			DATEOF_MARKFAIL	 = NULL,
			maker        = :chr_l_maker,
			maker_dt      = :chr_l_makerdt,
			DEAL_STAT = :chr_l_trd_status,
			checker      = :chr_l_checker,
			checker_dt    = :chr_l_checkerdt,
			access_stamp = :chr_l_now
	WHERE rowid = :chr_l_rowid_A;

	
	

	strcpy(l_dl_dealaudit_struct_h->h_dl_client, p_dl_deal_pmtchg_struct_h_b->h_dl_client);
	strcpy(l_dl_dealaudit_struct_h->h_indentity_no, p_dl_deal_pmtchg_struct_h_b->h_indentity_no);
	strcpy(l_dl_dealaudit_struct_h->h_trail_for, "T");
	strcpy(l_dl_dealaudit_struct_h->h_processdetail, p_intl_envdatastruct_h->processtion);
	strcpy(l_dl_dealaudit_struct_h->h_proc_usr, p_intl_envdatastruct_h->usr);
	if (p_dl_deal_pmtchg_struct_h_b->h_cust_chgind[0] == 'Y')
	{
		strcpy(l_dl_dealaudit_struct_h->h_subprocess, CUST_CHNG_IND);
	}
	else
	{
		strcpy(l_dl_dealaudit_struct_h->h_subprocess, USERCHANGE);
	}
	strcpy(l_dl_dealaudit_struct_h->h_logdate, APL_NULL_STRING);
	strcpy(l_dl_dealaudit_struct_h->h_fail_cd, APL_NULL_STRING);
	l_dl_dealaudit_struct_h->h_qty = l_h_quantity_a;
	strcpy(l_dl_dealaudit_struct_h->h_dlfromord, chr_l_h_trdfromord);
						
	if (APL_FAILURE == CR_Mod_CLHAudTrail(l_dl_dealaudit_struct_h, l_debug_info_ptr))
	{
		APL_GOBACK_FAIL
	} 
	
	
	
	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,
						"Leaving Function DL_Mod_DLPmtChng successfully",
						NULL,
						p_intl_envdatastruct_h);
		free(l_dl_dealaudit_struct_h);
      return(APL_SUCCESS);

   RETURN_FAILURE :
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,
						"Leaving Function DL_Mod_DLPmtChng with errors",
						NULL,
						p_intl_envdatastruct_h);
		free(l_dl_dealaudit_struct_h);
      return(APL_FAILURE);

}
int DL_Mod_DLVDPFailCd(  DL_DEAL_PMTDET_STRUCT_H *p_dl_deal_pmtdet_struct_h_d, 
                     	INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h,
                     	DEBUG_INFO_STRUCT_H **l_debug_info_ptr ) 
{
	struct sqlca sqlca;
	int   	int_p_smieligibility_flg 				= 0;
	char     chr_l_now[APL_DATE_LEN]              = APL_NULL_STRING;
	char		chr_l_h_rowid[APL_ROWID_LEN]			= APL_NULL_STRING;
	char		chr_l_h_instrcode_A[APL_INSTRUMENTCODE_LEN]			= APL_NULL_STRING;
	char		chr_l_h_locncode_a[APL_LOCNCODE_LENGTH]	= APL_NULL_STRING;	
	char     chr_l_h_typeoftrd[3]     				= APL_NULL_STRING;
	char		chr_l_h_trdt_a[APL_DATE_LEN]				= APL_NULL_STRING;
	char		int_l_h_failcode[FAILREAS_CD_LEN]		= APL_NULL_STRING;
	char     chr_l_h_locnchng_flg[2]  				= APL_NULL_STRING;


   int   int_l_h_subfailcode      = 0;
   short l_i_subfailcode      = 0;
   char     chr_l_h_trdfromord[2]    = APL_NULL_STRING ;
   short    l_i_trdfromord       = 0;
   double   l_h_quantity_a              =  0;
   short    i_h_qty              =  0;


	short		l_i_rowid				= 0;
	short		l_i_instr_code				= 0;
	short 	l_i_locncode			= 0;
	short		l_i_typeoftrd			= 0;
	short		l_i_trdt					= 0;
	short		l_i_failcode			= 0;
	short		l_i_locnchng_flg		= 0;
	char		l_param_str[201]	=APL_NULL_STRING;

   DL_DEALAUDIT_STRUCT_H *l_dl_dealaudit_struct_ha = NULL;

  	EXEC SQL VAR chr_l_h_rowid        IS STRING;
	EXEC SQL VAR chr_l_h_instrcode_A       IS STRING;
	EXEC SQL VAR chr_l_h_locncode_a     IS STRING;
	EXEC SQL VAR chr_l_h_typeoftrd    IS STRING;
	EXEC SQL VAR chr_l_h_trdt_a         IS STRING;
	EXEC SQL VAR int_l_h_failcode     IS STRING;
	EXEC SQL VAR chr_l_h_locnchng_flg IS STRING;

   EXEC SQL VAR chr_l_h_trdfromord   IS STRING;
	
	#ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   
   l_dl_dealaudit_struct_ha = (DL_DEALAUDIT_STRUCT_H*)calloc(1,sizeof(DL_DEALAUDIT_STRUCT_H));
   APL_MALLOC_FAIL(l_dl_dealaudit_struct_ha);
   
   sqlca.sqlcode = 0;


	EXEC SQL SELECT   ROWID,
                     INSTR_CODE,
                     LOCATION_CD,
                     DL_CLASS,
                     DEAL_DATE,
                     FAILREASON_CD,
                     LOC_CHNG_IND,
                     SUB_FAIL_CD,
                     QTY,
                     DEAL_FRM_ORD
   	   INTO  :chr_l_h_rowid:l_i_rowid,
               :chr_l_h_instrcode_A:l_i_instr_code,
               :chr_l_h_locncode_a:l_i_locncode,
					:chr_l_h_typeoftrd:l_i_typeoftrd,
               :chr_l_h_trdt_a:l_i_trdt,
               :int_l_h_failcode:l_i_failcode,
               :chr_l_h_locnchng_flg:l_i_locnchng_flg,
               :int_l_h_subfailcode:l_i_subfailcode,
               :l_h_quantity_a:i_h_qty,
               :chr_l_h_trdfromord:l_i_trdfromord
         FROM  DL_DEAL
         WHERE CLIENT  = :p_dl_deal_pmtdet_struct_h_d->h_dl_client
         AND   IDENTIY_NO    = :p_dl_deal_pmtdet_struct_h_d->h_indentity_no
         FOR UPDATE OF ACCESS_STAMP;

      
   strcpy(l_dl_dealaudit_struct_ha->h_dl_client, p_dl_deal_pmtdet_struct_h_d->h_dl_client);
   strcpy(l_dl_dealaudit_struct_ha->h_indentity_no, p_dl_deal_pmtdet_struct_h_d->h_indentity_no);
   strcpy(l_dl_dealaudit_struct_ha->h_trail_for, "T");
   strcpy(l_dl_dealaudit_struct_ha->h_processdetail, p_intl_env_data_struct_h->processtion);
	strcat(l_dl_dealaudit_struct_ha->h_processdetail,"-VDP_FAIL");
   strcpy(l_dl_dealaudit_struct_ha->h_proc_usr, p_intl_env_data_struct_h->usr);
   strcpy(l_dl_dealaudit_struct_ha->h_logdate, APL_NULL_STRING);
   strcpy(l_dl_dealaudit_struct_ha->h_fail_cd, int_l_h_failcode);
   if(l_i_subfailcode != -1)
      l_dl_dealaudit_struct_ha->h_subfailreas_cd = int_l_h_subfailcode;
   l_dl_dealaudit_struct_ha->h_qty = l_h_quantity_a;
   strcpy(l_dl_dealaudit_struct_ha->h_dlfromord, chr_l_h_trdfromord);
   strcpy(l_dl_dealaudit_struct_ha->h_subprocess, p_intl_env_data_struct_h->subprocess);

		 if (EI_Chk_SMIElg(chr_l_h_locncode_a,
                                   chr_l_h_trdt_a,
                                   chr_l_h_typeoftrd,
                                   chr_l_h_instrcode_A,
                                   chr_l_h_locnchng_flg,
											  chr_l_h_rowid,
                                   &int_p_smieligibility_flg,
                                   p_intl_env_data_struct_h,
                                   l_debug_info_ptr
                                   ) == APL_FAILURE)
         {
            CO_ProcMonitor(APL_OUT_FILE,"Failure from SMI_CheckSMIEligibility", NULL, p_intl_env_data_struct_h);
            APL_GOBACK_FAIL;
         }

		if ((int_p_smieligibility_flg) && strcmp(int_l_h_failcode,"15") != 0)
		{
			if (APL_FAILURE == CO_RtvSysDtTime(chr_l_now, l_debug_info_ptr))
			{
				APL_GOBACK_FAIL;
			}
			EXEC SQL UPDATE dl_deal
			SET   failreason_cd     = '15',
			sub_fail_cd  = 0,
			DATEOF_MARKFAIL   = :chr_l_now,
			access_stamp = :chr_l_now
			WHERE CLIENT  = :p_dl_deal_pmtdet_struct_h_d->h_dl_client
			AND   IDENTIY_NO    = :p_dl_deal_pmtdet_struct_h_d->h_indentity_no;
			EXEC SQL COMMIT ;
			memset(l_param_str,APL_NULL_CHAR,201);
			if ( APL_FAILURE == GBDbInsIMSGENT( MS_MSGNO_534,
															p_dl_deal_pmtdet_struct_h_d->h_indentity_no,
															p_dl_deal_pmtdet_struct_h_d->h_dl_client,
															'Y',
															l_param_str,
															l_debug_info_ptr ) )
			{
				APL_GOBACK_FAIL;
			}

			
         if ( APL_FAILURE ==  DL_Mod_CCSPendDL(p_dl_deal_pmtdet_struct_h_d->h_dl_client,
                                                p_dl_deal_pmtdet_struct_h_d->h_indentity_no,
                                                MS_CCS_FC,
                                                "15",
                                                APL_NULL_STRING,
                                                APL_NULL_STRING,
                                                &l_debug_info_ptr) )
         {
             APL_GOBACK_FAIL
         }
			

         
         strcpy(l_dl_dealaudit_struct_ha->h_fail_cd,"15");
         l_dl_dealaudit_struct_ha->h_subfailreas_cd = 0; 

         
         l_debug_info_ptr = NULL;

         if(APL_FAILURE == CR_Mod_CLHAudTrail(l_dl_dealaudit_struct_ha, l_debug_info_ptr))
            {
               APL_GOBACK_FAIL;
            }
	}
APL_GOBACK_SUCCESS;

   RETURN_SUCCESS :
   APL_FREE(l_dl_dealaudit_struct_ha);
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,
                  "Leaving Function DL_Mod_DLVDPFailCd successfully",
                  NULL,
                  p_intl_env_data_struct_h);
      return(APL_SUCCESS);

   RETURN_FAILURE :
   APL_FREE(l_dl_dealaudit_struct_ha);
      APL_IF_DEBUG
         CO_ProcMonitor(APL_OUT_FILE,
                  "Leaving Function DL_Mod_DLVDPFailCd with errors",
                  NULL,
                  p_intl_env_data_struct_h);
      return(APL_FAILURE);
}
