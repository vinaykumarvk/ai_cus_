/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
*/
/*********************************************************************
 *
 * Module Name         :      Billing Maintenance
 *
 * File Name           :      IV_ProcBucketTxnMnt.pc
 *
 * Description         :      This file contains functions for updating
 *                            Basket Transaction Details.
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author             Description       RFS No.
 * ---------   --------  ------------         -------------     ---------
 * 22/11/2006   1.0       vinay kalaskar      New file        HDFCIV_007
 *
 *********************************************************************/


#include "stdio_64.h"
#include <string.h>
#include <stdlib.h>
				      
#include "IV_Control_A.h"
#define  APL_MAXLINE_SIZE 350


EXEC SQL INCLUDE SQLCA.H;

int IV_Mod_BucketTxnNew(const IV_BUCKET_TXN_STRUCT *p_ivBucketTxn_struct,const INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	 FILE *p_logfile;

	 char flag='T';

    char **l_main_list_val;
    char **l_identitylist_val;
    char **l_grouplist_val;

    char l_mainlist[6000] = APL_NULL_STRING;
    char l_identlist[5000] = APL_NULL_STRING;
    char l_grouplist[2000] = APL_NULL_STRING;
    char l_client[20] = APL_NULL_STRING;
    char l_identity[200] = APL_NULL_STRING;
    char group_value[20] = APL_NULL_STRING;
    char group_prev_value[20] = APL_NULL_STRING;
    char identity_value[200] = APL_NULL_STRING;

    char chr_identity[200] = APL_NULL_STRING;
    char l_param_final[6000] = APL_NULL_STRING;

    char l_query[5000]=APL_NULL_STRING;

    int l_mainlist_no = 0;
    int l_identitylist_no = 0;
    int l_grouplist_no = 0;
    int l_group_count = 0;
    int l_sequence_no = 0;

    int i=0,j=0,k=0;
    
    short chr_identity_i = 0;

    EXEC SQL VAR chr_identity IS STRING;
    EXEC SQL VAR l_query IS STRING;

	 strcpy(l_mainlist,p_ivBucketTxn_struct->identitylist);
	 strcpy(l_client,p_ivBucketTxn_struct->client);

	 printf("l_mainlist :|%s|\n",l_mainlist);

	 
	 if (APL_FAILURE == CO_SplitStr(l_mainlist,'|',&l_mainlist_no,&l_main_list_val))
	 {   
	 	 fprintf(p_logfile, "\nString split processtion failed for l_mainlist\n");
	    APL_GOBACK_FAIL
	 }


	 for(i=0;i<l_mainlist_no;i++)
	 {
		 if(i==0)
			strcpy(l_identlist,l_main_list_val[i]);
		 else if(i==1)  
			strcpy(l_grouplist,l_main_list_val[i]);
	 }

	 printf("l_identlist :|%s|\n",l_identlist);
		
	 if (APL_FAILURE == CO_SplitStr(l_identlist,';',&l_identitylist_no,&l_identitylist_val))
	 {   
	 	 fprintf(p_logfile, "\nString split processtion failed for l_identlist\n");
	    APL_GOBACK_FAIL
	 }

	 printf("l_grouplist :|%s|\n",l_grouplist);

	 if (APL_FAILURE == CO_SplitStr(l_grouplist,',',&l_grouplist_no,&l_grouplist_val))
	 {   
	 	 fprintf(p_logfile, "\nString split processtion failed for l_grouplist\n");
	    APL_GOBACK_FAIL
	 }


	 for(j=0;j<l_identitylist_no;j++)
	 {
	     strcpy(l_identity,l_identitylist_val[j]);

   	 	 EXEC SQL SELECT INFORMATON INTO :chr_identity:chr_identity_i  
		 FROM  DL_DEAL
		 WHERE IDENTIY_NO=:l_identity
		 AND CLIENT=:l_client;

		 if(chr_identity_i==0)
		 flag='F';

	 }

	 printf("flag :|%c|\n",flag);

	 if(flag == 'F')
	 {
		   CO_InsertErr(l_debug_info_ptr, 
				ERR_BUCKET_EXIST,
				APL_NULL_STRING, 
				APL_NULL_STRING, 
				APL_NULL_STRING, 
				__LINE__, 
				__FILE__) ;
		  APL_GOBACK_FAIL;	  
   	 }

	printf("l_grouplist_no :|%d|\n",l_grouplist_no);

	j=0;

	for(k=0;k<l_grouplist_no;k++)
	{
		strcpy(group_value,l_grouplist_val[k]);
		printf("k :|%d|\n",k);
		if(k > 0)
		{
			strcpy(group_value,l_grouplist_val[k]);
			i=l_group_count - 1;

			printf("group_value :|%s|\n",group_value);
			printf("group_prev_value :|%s|\n",group_prev_value);

			if(strcmp(group_value,group_prev_value))
			{
				EXEC SQL SELECT IV_BUCKETTXN_SEQ.NEXTVAL INTO :l_sequence_no FROM DUAL;

				printf("l_sequence_no :|%d|\n",l_sequence_no);

				printf("l_group_count ** :|%d|-- j/i :|%d||%d|\n",l_group_count,j,i);
				strcpy(l_param_final,APL_NULL_STRING);

				for(j;j<l_group_count;j++)		 
				{
	    			   strcpy(identity_value,l_identitylist_val[j]);
				   strcat(l_param_final,"'");	
				   strcat(l_param_final,identity_value);
				   strcat(l_param_final,"'");
				   if(j!=i)
				   strcat(l_param_final,",");
	   
				}
				j = l_group_count;

			  printf("l_client :|%s|\n",l_client);
			  printf("l_param_final:|%s|\n",l_param_final);
			  printf("l_sequence_no :|%d|\n",l_sequence_no);

			  sprintf(l_query,"UPDATE DL_DEAL SET INFORMATON='%d' WHERE CLIENT = '%s' AND IDENTIY_NO IN (%s)",l_sequence_no,l_client,l_param_final);

			  printf("l_query:|%s|\n",l_query);
				
			  EXEC SQL EXECUTE IMMEDIATE :l_query;

				  Alert("Before Add COMMIT |%d|\n",sqlca.sqlcode) ;
				  EXEC SQL COMMIT WORK;	 
				  Alert("After Add COMMIT |%d|\n",sqlca.sqlcode) ;
		  					


			}
			else if(k == l_grouplist_no -1)
			{
				i=l_group_count;
				EXEC SQL SELECT IV_BUCKETTXN_SEQ.NEXTVAL INTO :l_sequence_no FROM DUAL;

				printf("l_sequence_no ** :|%d|\n",l_sequence_no);

				printf("l_group_count ** :|%d|-- j/i ** :|%d||%d|\n",l_group_count,j,i);
				strcpy(l_param_final,APL_NULL_STRING);
				for(j;j<=l_group_count;j++)		 
				{
	    			   strcpy(identity_value,l_identitylist_val[j]);
				   strcat(l_param_final,"'");	
				   strcat(l_param_final,identity_value);
				   strcat(l_param_final,"'");
				   if(j!=i)
				   strcat(l_param_final,",");

				}
				j = l_group_count;

			  printf("l_client :|%s|\n",l_client);
			  printf("l_param_final:|%s|\n",l_param_final);
			  printf("l_sequence_no :|%d|\n",l_sequence_no);

			  sprintf(l_query,"UPDATE DL_DEAL SET INFORMATON='%d' WHERE CLIENT = '%s' AND IDENTIY_NO IN (%s)",l_sequence_no,l_client,l_param_final);

			  printf("l_query:|%s|\n",l_query);
				
			  EXEC SQL EXECUTE IMMEDIATE :l_query;

				  Alert("Before Add COMMIT |%d|\n",sqlca.sqlcode) ;
				  EXEC SQL COMMIT WORK;	 
				  Alert("After Add COMMIT |%d|\n",sqlca.sqlcode) ;
				
			}
			strcpy(group_prev_value,l_grouplist_val[k]);
		}
		else if(k == 0)
		{
			strcpy(group_prev_value,l_grouplist_val[k]);
		}
		l_group_count++;
	 }


	  APL_GOBACK_SUCCESS
//AIX Warning Removal - Braces Added
	  RETURN_SUCCESS:
       
	  {
       
	  APL_IF_DEBUG
	  {
		  CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of IV_Mod_BucketTxnNew().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
     
	    }
	     return APL_SUCCESS;	 
	  }  

     RETURN_FAILURE:

       {
     APL_IF_DEBUG
	  {
		  CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of IV_Mod_BucketTxnNew().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);		  
          }	  
	  
        return APL_FAILURE;	 
     }
}		 



int IV_Mod_BucketTxnChg(const IV_BUCKET_TXN_STRUCT *p_ivBucketTxn_struct,const INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	FILE *p_logfile;

    char **l_main_list_val;
    char **l_sub_list_val;
    char **l_sequence_list_val;
    char **l_clientcount_val;

    char l_mainlist[6000] = APL_NULL_STRING;
    char l_sublist[6000] = APL_NULL_STRING;
    char l_identlist[6000] = APL_NULL_STRING;
    char l_sequencelist[5000] = APL_NULL_STRING;
    char l_clientcount[6000] = APL_NULL_STRING;

    char l_client[20] = APL_NULL_STRING;
    char l_sequence[20] = APL_NULL_STRING;
    char l_prev_sequence[20] = APL_NULL_STRING;


    char l_query[5000]=APL_NULL_STRING;
    char l_delete_query[5000]=APL_NULL_STRING;

    int l_mainlist_no = 0;
    int l_sublist_no = 0;
    int l_sequencelist_no = 0;

    int l_counter_value = 0;
    int l_clientcount_no = 0;

    int l_sequence_no = 0;
    int l_prev_seqno = 0;
    int l_prev_sequence_no = 0;
    int g_sequence_no = 0;

    int i=0,j=0,k=0;
    
    EXEC SQL VAR l_query IS STRING;
    EXEC SQL VAR l_delete_query IS STRING;

	 strcpy(l_mainlist,p_ivBucketTxn_struct->identitylist);
	 strcpy(l_client,p_ivBucketTxn_struct->client);

	 printf("l_mainlist :|%s|\n",l_mainlist);

	 if (APL_FAILURE == CO_SplitStr(l_mainlist,'^',&l_mainlist_no,&l_main_list_val))
	 {   
	    fprintf(p_logfile, "\nString split processtion failed for l_mainlist\n");
	    APL_GOBACK_FAIL
	 }

	 
	 for(i=0;i<l_mainlist_no;i++)
	 {
	      strcpy(l_sublist,l_main_list_val[i]);
	 
	      printf("l_sublist :|%s|\n",l_sublist);

		 if (APL_FAILURE == CO_SplitStr(l_sublist,';',&l_sublist_no,&l_sub_list_val))
		 {   
		    fprintf(p_logfile, "\nString split processtion failed for l_sublist \n");
		    APL_GOBACK_FAIL
		 }

		 for(j=0;j<l_sublist_no;j++)
		 {
		    if(j==0)
			strcpy(l_identlist,l_sub_list_val[j]);
		    else if(j==1)
			strcpy(l_sequencelist,l_sub_list_val[j]);
		 }

 		 printf("l_identlist:|%s|\n",l_identlist);

		 l_counter_value = 0;

		 if (APL_FAILURE == CO_SplitStr(l_identlist,',',&l_clientcount_no,&l_clientcount_val))
		 {   
			 printf("String split processtion failed for l_identlist \n");
			 APL_GOBACK_FAIL
		 }

		 printf("l_clientcount_no :|%d|\n",l_clientcount_no);
		 
		 if(l_clientcount_no >= 1)
			 l_counter_value = 1;
		 else
			 l_counter_value = 0;
		
		 if(l_counter_value == 1)
		 {		
			 printf("l_sequencelist:|%s|\n",l_sequencelist);

			 if (APL_FAILURE == CO_SplitStr(l_sequencelist,',',&l_sequencelist_no,&l_sequence_list_val))
			 {   
			    fprintf(p_logfile, "\nString split processtion failed for l_sequencelist \n");
			    APL_GOBACK_FAIL
			 }

			 printf("Before For Loop -- l_sequencelist_no :|%d|\n",l_sequencelist_no);

			 for(k=0;k<l_sequencelist_no;k++)
			 {
				if(k>0)
				strcpy(l_sequence,l_sequence_list_val[k]);
				else if(k==0)
				strcpy(l_prev_sequence,l_sequence_list_val[k]);

				if(k > 0)
				{						
					EXEC SQL SELECT GREATEST(DECODE(:l_sequence,'null',0,:l_sequence),
						 DECODE(:l_prev_sequence,'null',0,:l_prev_sequence)) 
						 INTO :l_prev_sequence_no
						 FROM DUAL;

					if(l_prev_sequence_no > 0)
					{
						if((g_sequence_no >= l_prev_sequence_no)&&
						   (g_sequence_no >= l_sequence_no))
						l_sequence_no = g_sequence_no;

						g_sequence_no = l_prev_sequence_no;
					}
					strcpy(l_prev_sequence,l_sequence);
				}				
			}

			printf("l_sequence_no :|%d|\n",l_sequence_no);
			printf("l_prev_seqno :|%d|\n",l_prev_seqno);
			printf("g_sequence_no :|%d|\n",g_sequence_no);

			if((l_sequence_no == l_prev_seqno)&&(g_sequence_no == l_prev_seqno))
				EXEC SQL SELECT IV_BUCKETTXN_SEQ.NEXTVAL INTO :l_sequence_no FROM DUAL;
			else if((l_sequence_no == l_prev_seqno)&&(g_sequence_no > 0))
				l_sequence_no = g_sequence_no;
			   


		      sprintf(l_delete_query,"UPDATE DL_DEAL SET INFORMATON=NULL WHERE CLIENT = '%s' AND IDENTIY_NO IN (%s)",l_client,l_identlist);

			printf("l_delete_query:|%s|\n",l_delete_query);
		 
			EXEC SQL EXECUTE IMMEDIATE :l_delete_query;

			Alert("Before delete COMMIT |%d|\n",sqlca.sqlcode) ;
			EXEC SQL COMMIT WORK;
			Alert("After delete COMMIT |%d|\n",sqlca.sqlcode) ;
			
			sprintf(l_query,"UPDATE DL_DEAL SET INFORMATON='%d' WHERE CLIENT = '%s' AND IDENTIY_NO IN (%s)",l_sequence_no,l_client,l_identlist);

			printf("l_query:|%s|\n",l_query);
					
			EXEC SQL EXECUTE IMMEDIATE :l_query;

			l_prev_seqno=l_sequence_no;

			Alert("Before Update COMMIT |%d|\n",sqlca.sqlcode) ;
			EXEC SQL COMMIT WORK;	 
			Alert("After Update COMMIT |%d|\n",sqlca.sqlcode) ;
		}							
	 }
	
//AIX - Warnings Removal
	  APL_GOBACK_SUCCESS
	
	  RETURN_SUCCESS:
       
	  {
       
	  APL_IF_DEBUG
	  {
		  CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of IV_Mod_BucketTxnChg().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
     
	   }
	     return APL_SUCCESS;	 
	  }  

     RETURN_FAILURE:
      {

     APL_IF_DEBUG
	  {
		  CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of IV_Mod_BucketTxnChg().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);		  
	 }  
        return APL_FAILURE;	 
     }
	
      
	
}

int  IV_Mod_BucketTxnDel(const IV_BUCKET_TXN_STRUCT *p_ivBucketTxn_struct,const INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)

{
	    FILE *p_logfile;


	    char l_identlist[5000] = APL_NULL_STRING;
	    char l_client[20] = APL_NULL_STRING;

	    char l_delete_query[5000]=APL_NULL_STRING;
	    
	    EXEC SQL VAR l_delete_query IS STRING;

	    strcpy(l_identlist,p_ivBucketTxn_struct->identitylist);
	    strcpy(l_client,p_ivBucketTxn_struct->client);

	    printf("l_identlist :|%s|\n",l_identlist);

	    sprintf(l_delete_query,"UPDATE DL_DEAL SET INFORMATON=NULL WHERE CLIENT = '%s' AND IDENTIY_NO IN (%s)",l_client,l_identlist);

	    printf("l_delete_query:|%s|\n",l_delete_query);
	 
	    EXEC SQL EXECUTE IMMEDIATE :l_delete_query;

	    Alert("Before Delete COMMIT |%d|\n",sqlca.sqlcode) ;
	    EXEC SQL COMMIT WORK;
	    Alert("After Delete COMMIT |%d|\n",sqlca.sqlcode) ;
		

	APL_GOBACK_SUCCESS
		 
		 
	RETURN_SUCCESS:
       
	{
       
	APL_IF_DEBUG
	{
		 CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of IV_Mod_BucketTxnDel().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
	 }
	    return APL_SUCCESS;	 
   }
       

   RETURN_FAILURE:
    {
   APL_IF_DEBUG
	{
		 CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of IV_Mod_BucketTxnDel().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);		  
	
	    }
	    return APL_FAILURE;	 
	}
      
}

