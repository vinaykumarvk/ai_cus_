/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         :      Corporate Actions
 *
 * File Name           :      CA_RightEvt.pc
 *
 * Description         :      Contains Functions Related to CA Rights
 *
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author           Description        RFS No.
 * ---------   --------  ---------------  ------------------   ---------
 * 18/01/2006   1.2        Smita Bhat        New File          Base Version
 *************************************************************************/
#include "stdio_64.h"
#include <string.h>
#include <math.h>
#include "CO_Commdef.h"
#include "MT_Interface.h"
#include "CR_Common.h"
#define E_NOT_A_CHILD			33
#define APL_RTS_PAID 			"RP"
#define S_LRDEAL_TYP 				"16"
#define S_NOTE_LEN				260 
#define MSG_PARAM_LEN			60 
#define S_TXNREFNO_LEN			17 
#define MSG_PARAM_STRUCT_SEP ";"

#include "CA_Common.h"
#include "CA_InterFace.h"

EXEC SQL INCLUDE SQLCA.H;


static int CA_Rtv_PopulateTrade(CA_DEAL_STRUCT_H *p_ca_deal_struct_h,
											CA_CARTSPROC_STRUCT_H *l_ca_cartsproc_struct_h_ptr,
											DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	char h_regbrflag[3];
	char h_allow_regflag[APL_FLAG_LENGTH];
	short int_cond_exists;
	char chr_l_clscode_a[CLSCD_LEN];
	char chr_l_manifldflg[APL_FLAG_LENGTH];
	char pro_sys_date[APL_DATE_LEN];
	char chr_l_note1[CA_INFO_LEN];
	
	char chr_curr_date[APL_DATE_LEN] = APL_NULL_STRING;
	int	int_date_diff = 0;
	 
   char     chr_mainfuncarea[APL_MAINFUNCAREA_LEN]= APL_NULL_STRING;
   char     chr_l_condindent[APL_CONDID_LEN]         = APL_NULL_STRING;
   short  l_settledteqtrdt              = 0;
	
	int int_period_flg=0;
struct sqlca sqlca;
#ifdef APL_THREADS
APL_SET_CONTEXT
EXEC SQL CONTEXT USE :my_ctx_local;
#endif

	int_cond_exists=0;
	EXEC SQL VAR h_regbrflag is STRING;
	EXEC SQL VAR p_ca_deal_struct_h->h_ex_arena is STRING;
	strcpy(p_ca_deal_struct_h->h_dl_client,l_ca_cartsproc_struct_h_ptr->h_dl_client);
	
   memset(chr_mainfuncarea, APL_NULL_CHAR, APL_MAINFUNCAREA_LEN);
   memset(chr_l_condindent, APL_NULL_CHAR, APL_CONDID_LEN);
	
	if(CO_RtvSysDt(chr_curr_date,
							  l_debug_info_ptr)==APL_FAILURE)
		APL_GOBACK_FAIL

    EXEC SQL SELECT
    TO_DATE(:l_ca_cartsproc_struct_h_ptr->h_pymt_dt) -
    TO_DATE(:chr_curr_date)
    INTO  :int_date_diff
    FROM  DUAL;

    IS_ANY_ORA_ERROR
		
	 strcpy(p_ca_deal_struct_h->h_dlt,chr_curr_date);

	 if	(	int_date_diff >= 0 )
	 {
		strcpy(p_ca_deal_struct_h->h_setldt,l_ca_cartsproc_struct_h_ptr->h_pymt_dt);
	 }
	 else
	 {
		strcpy(p_ca_deal_struct_h->h_setldt,chr_curr_date);
	 }


	

	
	strcpy(p_ca_deal_struct_h->h_classofdl,"18");
	if(!strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind,APL_YES_IND))
	strcpy(p_ca_deal_struct_h->h_loccode,l_ca_cartsproc_struct_h_ptr->h_loccode);
	strcpy(p_ca_deal_struct_h->h_currencycode,l_ca_cartsproc_struct_h_ptr->h_sub_currency);

	
	#ifdef EMU_PROCESSING

	if ( !strcmp(p_ca_deal_struct_h->h_dealcd,APL_DEAL_RVP) )
	{
		if ( CO_Chk_EMU_Period(APL_NULL_STRING,&int_period_flg,l_debug_info_ptr) == APL_FAILURE )
   	{
      	APL_GOBACK_FAIL
   	}

		if (int_period_flg == 2 )
		{
			strcpy(p_ca_deal_struct_h->h_currencycode,		APL_EMU_CCYCODE);
		}
	}
	#endif

	
/**

	if(CO_Chk_CntryEnabled("TRD_LRTRDTYP",
								"LRTRDTYP_NOT_NULL",
								&int_cond_exists,
								l_debug_info_ptr)==APL_FAILURE)
		APL_GOBACK_FAIL
	else
	if(int_cond_exists>0)
	{
		
      if(CO_Chk_CntryEnabled("TRD_LRTRDTYP",
                        "LRTRDTYP_MOROCCO",
                        &int_cond_exists,
                        l_debug_info_ptr)==APL_FAILURE)
         APL_GOBACK_FAIL
      else
		{
			if(int_cond_exists>0)
         {
				if(CO_RtvSysDt(pro_sys_date,l_debug_info_ptr)== APL_FAILURE)
                  APL_GOBACK_FAIL
            strcpy(p_ca_deal_struct_h->h_ndsbldate, pro_sys_date);	
         }	
			strcpy(p_ca_deal_struct_h->h_lrdltype,S_LRDEAL_TYP);
		}
	}
	**/
	if(CA_Rtv_LrDealType(   RTS_PROC,
				p_ca_deal_struct_h->h_dealcd,
				APL_NULL_STRING,
				APL_NULL_STRING,
				pro_sys_date,
				p_ca_deal_struct_h->h_lrdltype,
				p_ca_deal_struct_h->h_ndsbldate,
				l_debug_info_ptr)	==	APL_FAILURE)
	{
		Alert("Failed In CA_Rtv_LrDealType");
		APL_GOBACK_FAIL
	}

	if((!strcmp(p_ca_deal_struct_h->h_dealcd,APL_DEAL_RF))||
		(!strcmp(p_ca_deal_struct_h->h_dealcd,APL_DEAL_RVP))) {
	strcpy(p_ca_deal_struct_h->h_instr_code,l_ca_cartsproc_struct_h_ptr->h_instr_parent);
	if(!strcmp(l_mt_core_sys_params_struct_h.manifld_print_ind, APL_YES_IND)) 
	{
		if(!strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind, APL_YES_IND))
		{
			if ( 	CO_Rtv_FldValChar(	"manifld_ind",
												"mt_location", 
												"location_cd",
												p_ca_deal_struct_h->h_loccode,	
												chr_l_manifldflg,
												l_debug_info_ptr )==APL_FAILURE)
				APL_GOBACK_FAIL
			
			if(chr_l_manifldflg[0]==APL_YES_FLAG)
			{	int_cond_exists=0;
				if ( CR_Rtv_InstrChrVal(	p_ca_deal_struct_h->h_instr_code, 
											"clscode", 
											chr_l_clscode_a, 
											l_debug_info_ptr ) ==APL_FAILURE)
					APL_GOBACK_FAIL
				if(CO_Chk_CntryEnabled("TRD_MANIFOLD",
											"MANI_NOTREQD_FOR_MIN",
											&int_cond_exists,
											l_debug_info_ptr)==APL_FAILURE)
					APL_GOBACK_FAIL
				if((int_cond_exists >0)&& (!strcmp(chr_l_clscode_a,"MIN"))) 
					strcpy(p_ca_deal_struct_h->h_delrecdate,APL_NULL_STRING);
				else
				{
					if(CO_RtvSysDt(pro_sys_date,l_debug_info_ptr)== APL_FAILURE)
						APL_GOBACK_FAIL
					strcpy(p_ca_deal_struct_h->h_delrecdate,pro_sys_date);
				}
					
			}
			else
				strcpy(p_ca_deal_struct_h->h_delrecdate,APL_NULL_STRING);

		}	
		else		
		{	int_cond_exists=0;
			if ( CR_Rtv_InstrChrVal(	p_ca_deal_struct_h->h_instr_code, 
										"clscode", 
										chr_l_clscode_a, 
										l_debug_info_ptr ) ==APL_FAILURE)
				APL_GOBACK_FAIL
			if(CO_Chk_CntryEnabled("TRD_MANIFOLD",
										"MANI_NOTREQD_FOR_MIN",
										&int_cond_exists,
										l_debug_info_ptr)==APL_FAILURE)
				APL_GOBACK_FAIL
			if((int_cond_exists >0)&& (!strcmp(chr_l_clscode_a,"MIN"))) 
				strcpy(p_ca_deal_struct_h->h_delrecdate,APL_NULL_STRING);
			else
			{
				if(CO_RtvSysDt(pro_sys_date,l_debug_info_ptr)== APL_FAILURE)
				APL_GOBACK_FAIL
				strcpy(p_ca_deal_struct_h->h_delrecdate,pro_sys_date);
			}
		}
	}	
	else
		strcpy(p_ca_deal_struct_h->h_delrecdate,APL_NULL_STRING);

	EXEC SQL SELECT REG_BR_IND,EX_ARENA INTO
				:h_regbrflag,:p_ca_deal_struct_h->h_ex_arena
	FROM MT_INSTRUMENT
	WHERE INSTR_CODE=:l_ca_cartsproc_struct_h_ptr->h_instr_parent;
	IS_ANY_ORA_ERROR
	if(!strcmp(h_regbrflag,APL_INSTRU_REGD))
		strcpy(p_ca_deal_struct_h->h_reginstr_ind,APL_YES_IND);
	else
		strcpy(p_ca_deal_struct_h->h_reginstr_ind,APL_NO_IND);

	if(!strcmp(l_mt_core_sys_params_struct_h.proc_reg_ind, APL_YES_IND) &&
		!strcmp(h_regbrflag,APL_INSTRU_BEAR))
		strcpy(p_ca_deal_struct_h->h_pos_stat, "000");
	else if(!strcmp(l_mt_core_sys_params_struct_h.proc_reg_ind, APL_YES_IND) &&
				!strcmp(h_regbrflag,APL_INSTRU_REGD))
		strcpy(p_ca_deal_struct_h->h_pos_stat, "001");
		if(strcmp(l_ca_cartsproc_struct_h_ptr->h_info_nbr,APL_NULL_STRING)) 
		{
			short i_footinfo=0;
			EXEC SQL VAR l_ca_cartsproc_struct_h_ptr->h_info_nbr IS STRING;
			EXEC SQL SELECT INFO_1 INTO :chr_l_note1:i_footinfo
			FROM CANOTE
			WHERE INFO_SEQ=:l_ca_cartsproc_struct_h_ptr->h_info_nbr;
			IS_ANY_ORA_ERROR
			if(i_footinfo==-1) 
			{
				CO_InsertErr(l_debug_info_ptr,
									ERR_REC_NOTFND,
									l_ca_cartsproc_struct_h_ptr->h_info_nbr,
									NULL,
									NULL,	
									__LINE__,
									__FILE__
									);
				APL_GOBACK_FAIL
			}
			else
			{
				strncpy(p_ca_deal_struct_h->h_info1,chr_l_note1,S_NOTE_LEN);
				p_ca_deal_struct_h->h_info1[S_NOTE_LEN]='\0';
			}
		} 
		else  
		{
			sprintf(p_ca_deal_struct_h->h_info1,
					 	"Replacement of %s for %s declared on %s",
					 	l_ca_cartsproc_struct_h_ptr->h_instr_code,
				 		l_ca_cartsproc_struct_h_ptr->h_ca_event,
					 	l_ca_cartsproc_struct_h_ptr->h_decl_date);
	 	}
		EXEC SQL VAR h_allow_regflag IS STRING;
		EXEC SQL SELECT CLN_ALLOW_REGIND
					INTO :h_allow_regflag
		FROM MT_CLIENT
		WHERE CLN_CODE=:l_ca_cartsproc_struct_h_ptr->h_dl_client;
		IS_ANY_ORA_ERROR

		if (!strcmp(l_mt_core_sys_params_struct_h.proc_reg_ind, APL_YES_IND))
		{
			if(!strcmp(h_allow_regflag,APL_YES_IND))
				strcpy(p_ca_deal_struct_h->h_status_reg,"2");
			else
				strcpy(p_ca_deal_struct_h->h_status_reg,"C");
		}

		/**strcpy(p_ca_deal_struct_h->h_deal_status,"CC");
		 * Need To Check Later, Rights On Confirmed Or Settled Status, Please Change in Function Rtv_CADeal_Status **/
		if(Rtv_CADeal_Status(	p_ca_deal_struct_h->h_dealcd,
										"RT",
										APL_NULL_STRING,
										APL_NULL_STRING,
										p_ca_deal_struct_h->h_deal_status,
										l_debug_info_ptr) == APL_FAILURE)
		{
			Alert("Deal Status (%s)",p_ca_deal_struct_h->h_deal_status);
			APL_GOBACK_FAIL
		}
		
		strcpy(p_ca_deal_struct_h->h_fail_cd,"01");
	} else { 
	  
     strcpy(chr_mainfuncarea,"RIGHTS_PROCESSING");
     strcpy(chr_l_condindent,"SETTLEDTEQTRDT");
     l_settledteqtrdt = 0;
     if  ( APL_SUCCESS == CO_Chk_CntryEnabled(chr_mainfuncarea, chr_l_condindent,
                                            &l_settledteqtrdt, l_debug_info_ptr))
     {
			if (l_settledteqtrdt > 0)
			{
     			strcpy(p_ca_deal_struct_h->h_setldt,chr_curr_date);
			}
     }	
	  else
	  {	
	  	   APL_GOBACK_FAIL
	  }
			
	strcpy(p_ca_deal_struct_h->h_instr_code,l_ca_cartsproc_struct_h_ptr->h_instr_code);
	if(!strcmp(l_mt_core_sys_params_struct_h.manifld_print_ind, APL_YES_IND)) 
	{
		if(!strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind, APL_YES_IND))
		{
			if ( 	CO_Rtv_FldValChar(	"manifld_ind",
												"mt_location", 
												"location_cd",
												p_ca_deal_struct_h->h_loccode,	
												chr_l_manifldflg,
												l_debug_info_ptr )==APL_FAILURE)
				APL_GOBACK_FAIL
			
			if(chr_l_manifldflg[0]==APL_YES_FLAG)
			{	int_cond_exists=0;
				if ( CR_Rtv_InstrChrVal(	p_ca_deal_struct_h->h_instr_code, 
											"clscode", 
											chr_l_clscode_a, 
											l_debug_info_ptr ) ==APL_FAILURE)
					APL_GOBACK_FAIL
				if(CO_Chk_CntryEnabled("TRD_MANIFOLD",
											"MANI_NOTREQD_FOR_MIN",
											&int_cond_exists,
											l_debug_info_ptr)==APL_FAILURE)
					APL_GOBACK_FAIL
				if((int_cond_exists >0)&& (!strcmp(chr_l_clscode_a,"MIN"))) 
					strcpy(p_ca_deal_struct_h->h_delrecdate,APL_NULL_STRING);
				else
				{
					if(CO_RtvSysDt(pro_sys_date,l_debug_info_ptr)== APL_FAILURE)
						APL_GOBACK_FAIL
					strcpy(p_ca_deal_struct_h->h_delrecdate,pro_sys_date);
				}
					
			}
			else
				strcpy(p_ca_deal_struct_h->h_delrecdate,APL_NULL_STRING);

		}	
		else		
		{	int_cond_exists=0;
			if ( CR_Rtv_InstrChrVal(	p_ca_deal_struct_h->h_instr_code, 
										"clscode", 
										chr_l_clscode_a, 
										l_debug_info_ptr ) ==APL_FAILURE)
				APL_GOBACK_FAIL
			if(CO_Chk_CntryEnabled("TRD_MANIFOLD",
										"MANI_NOTREQD_FOR_MIN",
										&int_cond_exists,
										l_debug_info_ptr)==APL_FAILURE)
				APL_GOBACK_FAIL
			if((int_cond_exists >0)&& (!strcmp(chr_l_clscode_a,"MIN"))) 
				strcpy(p_ca_deal_struct_h->h_delrecdate,APL_NULL_STRING);
			else
			{
				if(CO_RtvSysDt(pro_sys_date,l_debug_info_ptr)== APL_FAILURE)
				APL_GOBACK_FAIL
				strcpy(p_ca_deal_struct_h->h_delrecdate,pro_sys_date);
			}
		}
	}	
	else
		strcpy(p_ca_deal_struct_h->h_delrecdate,APL_NULL_STRING);
	EXEC SQL SELECT REG_BR_IND,EX_ARENA INTO
				:h_regbrflag,:p_ca_deal_struct_h->h_ex_arena
	FROM MT_INSTRUMENT
	WHERE INSTR_CODE=:l_ca_cartsproc_struct_h_ptr->h_instr_code;
	IS_ANY_ORA_ERROR
	if(!strcmp(h_regbrflag,APL_INSTRU_REGD))
		strcpy(p_ca_deal_struct_h->h_reginstr_ind,APL_YES_IND);
	else
		strcpy(p_ca_deal_struct_h->h_reginstr_ind,APL_NO_IND);

	if(!strcmp(l_mt_core_sys_params_struct_h.proc_reg_ind, APL_YES_IND) &&
		!strcmp(h_regbrflag,APL_INSTRU_BEAR))
		strcpy(p_ca_deal_struct_h->h_pos_stat, "000");
	else if(!strcmp(l_mt_core_sys_params_struct_h.proc_reg_ind, APL_YES_IND) &&
				!strcmp(h_regbrflag,APL_INSTRU_REGD))
		strcpy(p_ca_deal_struct_h->h_pos_stat, "001");
	EXEC SQL VAR h_allow_regflag IS STRING;
		EXEC SQL SELECT CLN_ALLOW_REGIND
					INTO :h_allow_regflag
		FROM MT_CLIENT
		WHERE CLN_CODE=:l_ca_cartsproc_struct_h_ptr->h_dl_client;
		IS_ANY_ORA_ERROR
		strcpy(p_ca_deal_struct_h->h_deal_status,"CS");
		strcpy(p_ca_deal_struct_h->h_instr_code,l_ca_cartsproc_struct_h_ptr->h_instr_code);
		if((!strcmp(l_mt_core_sys_params_struct_h.proc_reg_ind,APL_YES_IND)) &&
			(!strcmp(h_regbrflag,APL_INSTRU_REGD)) &&
			(!strcmp(h_allow_regflag,APL_YES_IND)))
			strcpy(p_ca_deal_struct_h->h_pos_stat,"003");
		if(CA_ChkPosition(p_ca_deal_struct_h->h_instr_code,
						 p_ca_deal_struct_h->h_dl_client,
						 p_ca_deal_struct_h->h_loccode,
						 p_ca_deal_struct_h->h_qty,
						 p_ca_deal_struct_h->h_pos_stat,
						 p_ca_deal_struct_h->h_deal_status,
						 &(p_ca_deal_struct_h->h_delta_000),
						 &(p_ca_deal_struct_h->h_delta_001),
						 &(p_ca_deal_struct_h->h_delta_002),"FREE",
						 "RT",
						 APL_NULL_STRING,
						 l_debug_info_ptr) == APL_FAILURE)
			APL_GOBACK_FAIL
	}

	if(CA_SbiRptPopulate(  RTS_PROC,
				APL_NULL_STRING,
				APL_NULL_STRING,
				pro_sys_date,
				p_ca_deal_struct_h,
				l_debug_info_ptr) == APL_FAILURE)
	{
		Alert("Failed in CA_SbiRptPopulate");
		APL_GOBACK_FAIL
	}

	APL_GOBACK_SUCCESS
	RETURN_SUCCESS:
	{
		return APL_SUCCESS;
	}
	RETURN_FAILURE:
	{
		return APL_FAILURE;
	}
}



static int CA_Proc_RightsAuth_A(CA_CARTSPROC_STRUCT_H *l_ca_cartsproc_struct_h_ptr,
									  int *int_p_result,
									  DEBUG_INFO_STRUCT_H **l_debug_info_ptr,
									  INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h)
{
	double num_instr_parent;
	double new_round_val=0.0;
	CA_DEAL_STRUCT_H l_ca_deal_struct_h;
	char 	chr_dummyrefno[S_TXNREFNO_LEN]=APL_NULL_STRING;
	char 	h_evt_stat[APL_STATUS_LEN]= APL_NULL_STRING;
	char	chr_msg_param_string[MSG_PARAM_LEN]=APL_NULL_STRING;
	short i_evt_stat;
	char chr_eventtype[8] = APL_NULL_STRING;
	char deal_cd[2] = APL_NULL_STRING;
	
	int int_period_flg=0;
	double grd_euro_exchg_rt=0.0;
   char   chr_eur_ccycode[APL_CCYCODE_LEN]={APL_EMU_CCYCODE};
   char   chr_grd_ccycode[APL_CCYCODE_LEN]={APL_GRD_CCYCODE};
	double round_val = 0.0;
	
	
	int int_l_choice = 0 ;
   char chr_l_subfun[APL_SUB_FUN_LEN]=APL_NULL_STRING;	
	short int_l_rucondexists	=0;
	short l_seven_dec	=0;
   char chr_lp_access[APL_DATE_LEN] = APL_NULL_STRING;
   char chr_lp_decldt[17] = APL_NULL_STRING;
   char chr_lp_param[17] = APL_NULL_STRING;
	char chr_l_h_acc_class[3] = APL_NULL_STRING ;
	int      int_period_flg1                     = 0;
	char chr_h_str_amt[50] = APL_NULL_STRING;
	char chr_h_str_temp[18] = APL_NULL_STRING;
	int	i	=	0;
	double dbl_h_temp_amount;
	double dbl_h_temp_amount1;
	short int_i_temp_lastdigit = 0;
   EXEC SQL VAR chr_l_h_acc_class IS STRING ;

   short l_i_acc_class = 0 ;


struct sqlca sqlca;
#ifdef APL_THREADS
APL_SET_CONTEXT
EXEC SQL CONTEXT USE :my_ctx_local;
#endif
	
	memset(h_evt_stat,APL_NULL_CHAR,sizeof(APL_STATUS_LEN));
printf("\n Inside CA_Proc_RightsAuth_A ..");
printf("\n Inside CA_Proc_RightsAuth_A with event nbr %d..",l_ca_cartsproc_struct_h_ptr->h_evt_nbr);

	if(strlen(l_ca_cartsproc_struct_h_ptr->h_corp_id) !=0)
	{
		EXEC SQL SELECT status into :h_evt_stat:i_evt_stat
		from CAEVENT where corp_id = RTRIM(:l_ca_cartsproc_struct_h_ptr->h_corp_id);
		IS_ANY_ORA_ERROR
		if(strcmp(h_evt_stat,STATUS_PART_PAID) &&
		  (strcmp(h_evt_stat,STATUS_MSG_PAID_CLSD))&&
		  (strcmp(h_evt_stat,STATUS_RDY_PYMT)))
			{	
				CO_InsertErr(l_debug_info_ptr,
									ERR_EVNTSTS_INVALID,
									l_ca_cartsproc_struct_h_ptr->h_corp_id,
									":",
									h_evt_stat,	
									__LINE__,
									__FILE__
									);
				APL_GOBACK_FAIL
			}
	}
	
	if(!strcmp(l_ca_cartsproc_struct_h_ptr->h_evt_stat,STATUS_DEL_AUTH)) {
		*int_p_result=APL_FAILURE;
		CO_InsertErr(l_debug_info_ptr,
							ERR_REC_MARKEDDEL,
							l_ca_cartsproc_struct_h_ptr->h_instr_code,
							l_ca_cartsproc_struct_h_ptr->h_dl_client,
							l_ca_cartsproc_struct_h_ptr->h_ca_event,
							__LINE__,
							__FILE__
							);
		APL_GOBACK_SUCCESS
		}
	
	if(!strcmp(l_ca_cartsproc_struct_h_ptr->h_evt_stat,APL_STS_AUTH)) {
		*int_p_result=APL_FAILURE;
		CO_InsertErr(l_debug_info_ptr,
							ERR_REC_AUTHORIZED,
							l_ca_cartsproc_struct_h_ptr->h_instr_code,
							l_ca_cartsproc_struct_h_ptr->h_dl_client,
							l_ca_cartsproc_struct_h_ptr->h_ca_event,
							__LINE__,
							__FILE__
							);
		APL_GOBACK_SUCCESS
		}
	
	if(CO_RtvSysDtTime(l_ca_cartsproc_struct_h_ptr->h_access_stamp,
									l_debug_info_ptr)==APL_FAILURE)
		APL_GOBACK_FAIL

	strcpy(l_ca_cartsproc_struct_h_ptr->h_evt_stat,APL_STS_AUTH);
	strcpy(chr_eventtype,RTS_PROC);
	if(l_ca_cartsproc_struct_h_ptr->h_lapsequenceuantity>0) 
	{
		memset(&l_ca_deal_struct_h,NULL,sizeof(CA_DEAL_STRUCT_H));
		strcpy(l_ca_deal_struct_h.h_dealcd,APL_DEAL_DF);
		l_ca_deal_struct_h.h_amt=0.0;
		l_ca_deal_struct_h.h_qty=l_ca_cartsproc_struct_h_ptr->h_lapsequenceuantity;
		l_ca_deal_struct_h.h_pr=0.0;

		
		 
		sprintf(l_ca_deal_struct_h.h_info1,
				 "Replacement of %s for %s declared on %s for a lapse quantity of %lf",
				 l_ca_cartsproc_struct_h_ptr->h_instr_code,
				 l_ca_cartsproc_struct_h_ptr->h_ca_event,
				 l_ca_cartsproc_struct_h_ptr->h_decl_date,
				 l_ca_deal_struct_h.h_qty);

printf("\n calling CA_Rtv_PopulateTrade ..");
		if(CA_Rtv_PopulateTrade(&l_ca_deal_struct_h,
									 l_ca_cartsproc_struct_h_ptr,
									 l_debug_info_ptr)==APL_FAILURE)
			APL_GOBACK_FAIL
	
		
printf("\n calling CO_GenRefno ..");
		if(APL_FAILURE == CO_GenRefno(chr_eventtype,
												APL_NULL_STRING,
												deal_cd,
												chr_dummyrefno,
												l_debug_info_ptr))
		{
			APL_GOBACK_FAIL
		}
		strcpy(l_ca_deal_struct_h.h_indentity_no,chr_dummyrefno);
   
printf("\n calling CA_Mod_NewTrade ..");

		if(CA_Mod_NewTrade(&l_ca_deal_struct_h,
							  p_intlenv_data_struct_h,
							  chr_dummyrefno,
							  l_debug_info_ptr)==APL_FAILURE) {
			APL_IF_DEBUG {				
			CO_ProcMonitor(APL_OUT_FILE,"Could not create trade\n",NULL,p_intlenv_data_struct_h);
			}
			APL_GOBACK_FAIL
			} else
			APL_IF_DEBUG  {
			CO_ProcMonitor(APL_OUT_FILE,"Created trade\n",NULL,p_intlenv_data_struct_h);
			}
			printf("trade_struct.h_deal_status is %s\n",l_ca_deal_struct_h.h_deal_status);	

			if( CA_MovePos(	&l_ca_deal_struct_h ,
						"RT",
						APL_NULL_STRING,
						l_debug_info_ptr) == APL_FAILURE)
			{
				fprintf(APL_OUT_FILE,"Failed in CA_MovePos \n");
			}

   int_l_rucondexists = 0 ;

   if(CO_Chk_CntryEnabled("PAY_PROC","RUSTAT_TRDAUTH",&int_l_rucondexists,l_debug_info_ptr)==APL_FAILURE)
    APL_GOBACK_FAIL
   else
    EXEC SQL SELECT CLN_CLAS INTO :chr_l_h_acc_class:l_i_acc_class FROM MT_CLIENT
    WHERE CLN_CODE = :l_ca_deal_struct_h.h_dl_client ;

   IS_ANY_ORA_ERROR
   	if( (int_l_rucondexists>0) && !(strcmp(chr_l_h_acc_class,"2")) )
		{
			printf("non proprietary client for RU so no MT566 and it is a LAPS Trade\n");
         
           if (APL_FAILURE == CO_RtvMachDtTime(chr_lp_access, l_debug_info_ptr))
           {
            APL_GOBACK_FAIL
           }
			sprintf(chr_lp_param,"%s%s%d%s",
					l_ca_cartsproc_struct_h_ptr->h_ca_event,
					MSG_PARAM_STRUCT_SEP,
					l_ca_cartsproc_struct_h_ptr->h_evt_nbr,
					MSG_PARAM_STRUCT_SEP);

			 strncpy(chr_lp_decldt,l_ca_cartsproc_struct_h_ptr->h_decl_date,10);	
 
           EXEC SQL INSERT INTO DEAL_EVNTIDLINK VALUES ('563N02',:l_ca_deal_struct_h.h_dl_client,:chr_dummyrefno,:chr_lp_decldt,:chr_lp_param,:chr_lp_access);
				 IS_ANY_ORA_ERROR
		}
		else
   	{
        printf("\n Inside PROPRIETARY  with event nbr %d..",l_ca_cartsproc_struct_h_ptr->h_evt_nbr);
			sprintf(chr_msg_param_string,"%s%s%s%s%s%s%d%s%s%s",
					l_ca_cartsproc_struct_h_ptr->h_instr_code,
					MSG_PARAM_STRUCT_SEP,
					l_ca_cartsproc_struct_h_ptr->h_ca_event,
					MSG_PARAM_STRUCT_SEP,
					l_ca_cartsproc_struct_h_ptr->h_decl_date,
					MSG_PARAM_STRUCT_SEP,
					l_ca_cartsproc_struct_h_ptr->h_evt_nbr,
					MSG_PARAM_STRUCT_SEP,
					chr_dummyrefno,
					MSG_PARAM_STRUCT_SEP);
			
				printf("\n calling GBDbInsIMSGENT for 563N02 ..");
				if(GBDbInsIMSGENT("563N02",
								  APL_NULL_STRING,
								  l_ca_cartsproc_struct_h_ptr->h_dl_client,
								  APL_YES_FLAG,
								  chr_msg_param_string,
							  	l_debug_info_ptr)==APL_FAILURE)
					{
						CO_ProcMonitor(APL_OUT_FILE,"Failure from GBDbInsIMSGENT\n",NULL,p_intlenv_data_struct_h);
						APL_GOBACK_FAIL
					}
			}
	}

	

	

   strcpy(chr_l_subfun,p_intlenv_data_struct_h -> subprocess);

   int_l_choice = atoi( chr_l_subfun ) ;
	
	
		
      if ( CO_Chk_CcyConvDt("",&int_period_flg1,l_debug_info_ptr) == APL_FAILURE )
      {
         APL_GOBACK_FAIL
      }

	if(l_ca_cartsproc_struct_h_ptr->h_takeupquantity!=0) {
	if (int_l_choice == 1)
	{ 
	if (!strcmp(l_ca_cartsproc_struct_h_ptr->h_ca_event,APL_RTS_PAID)) {
		memset(&l_ca_deal_struct_h,NULL,sizeof(CA_DEAL_STRUCT_H));
		strcpy(l_ca_deal_struct_h.h_dealcd,APL_DEAL_RF);
		l_ca_deal_struct_h.h_amt=0.0;
		l_ca_deal_struct_h.h_qty=(l_ca_cartsproc_struct_h_ptr->h_sub_new_quantity/l_ca_cartsproc_struct_h_ptr->h_sub_base_quantity);
		l_ca_deal_struct_h.h_qty = l_ca_deal_struct_h.h_qty*l_ca_cartsproc_struct_h_ptr->h_takeupquantity;
		
		
		l_seven_dec=0;
   	if(CO_Chk_CntryEnabled("CA_QTY_LEN","SEVEN_DEC",&l_seven_dec,l_debug_info_ptr)==APL_FAILURE)
    	APL_GOBACK_FAIL
		if(l_seven_dec==0) 
		{	
			new_round_val=0.0;
			EXEC SQL SELECT TRUNC(:l_ca_deal_struct_h.h_qty) INTO :l_ca_deal_struct_h.h_qty FROM DUAL;
			IS_ANY_ORA_ERROR
		}
		l_ca_deal_struct_h.h_pr=0.0;
		if(CA_Rtv_PopulateTrade(&l_ca_deal_struct_h,
									 l_ca_cartsproc_struct_h_ptr,
									 l_debug_info_ptr)==APL_FAILURE)
			APL_GOBACK_FAIL
		
		
		memset(chr_dummyrefno,APL_NULL_CHAR,APL_TXNREFNO_LEN);
		sleep(1);
		if(APL_FAILURE == CO_GenRefno(chr_eventtype,
												APL_NULL_STRING,
												deal_cd,
												chr_dummyrefno,
												l_debug_info_ptr))
		{
			APL_GOBACK_FAIL
		}
		strcpy(l_ca_deal_struct_h.h_indentity_no,chr_dummyrefno);
		if(CA_Mod_NewTrade(&l_ca_deal_struct_h,
							  p_intlenv_data_struct_h,
							  chr_dummyrefno,
							  l_debug_info_ptr)==APL_FAILURE) {
			APL_IF_DEBUG {
			CO_ProcMonitor(APL_OUT_FILE,"Could not create trade\n",NULL,p_intlenv_data_struct_h);
			}
			APL_GOBACK_FAIL
			} else
			APL_IF_DEBUG  {
			CO_ProcMonitor(APL_OUT_FILE,"Created trade\n",NULL,p_intlenv_data_struct_h);
			}
				if(CA_MovePos(	&l_ca_deal_struct_h ,
							"RT",
							APL_NULL_STRING,
							l_debug_info_ptr) == APL_FAILURE)
				{
					APL_GOBACK_FAIL
				}
        

	} else {
		memset(&l_ca_deal_struct_h,NULL,sizeof(CA_DEAL_STRUCT_H));
		strcpy(l_ca_deal_struct_h.h_dealcd,APL_DEAL_RVP);
		l_ca_deal_struct_h.h_qty=(l_ca_cartsproc_struct_h_ptr->h_sub_new_quantity/l_ca_cartsproc_struct_h_ptr->h_sub_base_quantity);
		l_ca_deal_struct_h.h_qty = l_ca_deal_struct_h.h_qty*l_ca_cartsproc_struct_h_ptr->h_takeupquantity;
		
		
		l_seven_dec=0;
   	if(CO_Chk_CntryEnabled("CA_QTY_LEN","SEVEN_DEC",&l_seven_dec,l_debug_info_ptr)==APL_FAILURE)
    	APL_GOBACK_FAIL
		if(l_seven_dec==0)
		{	
		EXEC SQL SELECT TRUNC(:l_ca_deal_struct_h.h_qty) into :l_ca_deal_struct_h.h_qty FROM DUAL;
		IS_ANY_ORA_ERROR
		}


			l_ca_deal_struct_h.h_pr=l_ca_cartsproc_struct_h_ptr->h_sub_pr;

		
		#ifdef EMU_PROCESSING
		if ( CO_Chk_EMU_Period(APL_NULL_STRING,&int_period_flg,l_debug_info_ptr) == APL_FAILURE )
   	{
      	APL_GOBACK_FAIL
   	}

		if (int_period_flg == 2 )
		{
			if ( !strcmp(l_ca_cartsproc_struct_h_ptr->h_sub_currency,APL_GRD_CCYCODE) )
			{	
         if ( !strcmp(l_mt_core_sys_params_struct_h.dir_indir_fxqt_ind,"I") )
         {

			EXEC SQL SELECT a.EXCHGRT
         INTO :grd_euro_exchg_rt
         FROM  MT_EXCHRATE a
         WHERE a.DENOM_CCY=:chr_eur_ccycode
         AND   a.currency_cd= :chr_grd_ccycode
         AND a.RATE_DATE = ( SELECT MAX(b.RATE_DATE)
                     FROM MT_EXCHRATE b
                     WHERE b.DENOM_CCY = :chr_eur_ccycode
                     AND b.currency_cd = :chr_grd_ccycode
                  );


         IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"GRD-EUR","Indirect","Exchange rate")
         }
         else
         {
         EXEC SQL SELECT a.EXCHGRT
         INTO :grd_euro_exchg_rt
         FROM  MT_EXCHRATE a
         WHERE a.DENOM_CCY=:chr_grd_ccycode
         AND   a.currency_cd= :chr_eur_ccycode
         AND a.RATE_DATE = ( SELECT MAX(b.RATE_DATE)
                     FROM MT_EXCHRATE b
                     WHERE b.DENOM_CCY = :chr_grd_ccycode
                     AND b.currency_cd = :chr_eur_ccycode
                  );

         IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"EUR-GRD","Direct","Exchange rate")
         }

				l_ca_deal_struct_h.h_pr= l_ca_deal_struct_h.h_pr/ grd_euro_exchg_rt;
				round_val = 0.0;		
				
				
				CO_Round( l_ca_deal_struct_h.h_pr,
                        6,
                     &round_val);
				
      		l_ca_deal_struct_h.h_pr = round_val;

				l_ca_deal_struct_h.h_amt=l_ca_deal_struct_h.h_pr*l_ca_deal_struct_h.h_qty;
				round_val = 0.0;		
     			 CO_Round( l_ca_deal_struct_h.h_amt,
            			   2,
               		&round_val);
      		l_ca_deal_struct_h.h_amt = round_val;


			}
			else
			{
				l_ca_deal_struct_h.h_amt=l_ca_deal_struct_h.h_pr*l_ca_deal_struct_h.h_qty;
			}
		}

		else
		{
			l_ca_deal_struct_h.h_amt=l_ca_deal_struct_h.h_pr*l_ca_deal_struct_h.h_qty;
		}
		#else
			
        if ((int_period_flg1 ==1) && (strcmp(g_mt_commonsys_params_struct_h.nation_code,"TR")==0 ))
           {
						EXEC SQL SELECT TRUNC(:l_ca_deal_struct_h.h_qty,:l_mt_core_sys_params_struct_h.qty_dec_len) INTO :l_ca_deal_struct_h.h_qty FROM DUAL;
						IS_ANY_ORA_ERROR

              dbl_h_temp_amount=l_ca_deal_struct_h.h_pr*l_ca_deal_struct_h.h_qty;
              printf(" **********%lf*************** \n",l_ca_deal_struct_h.h_qty);
              printf(" **********%lf*************** \n",l_ca_deal_struct_h.h_pr);
              printf(" **********%lf*************** \n",dbl_h_temp_amount);
              fflush(stdout);

              if(APL_FAILURE == CO_ToStr(dbl_h_temp_amount,18,6,chr_h_str_amt))
               	APL_GOBACK_FAIL
              printf(" **********%s*************** \n",chr_h_str_amt);
              printf(" **********%d***************length \n",(int)strlen(chr_h_str_amt));  // AIX -Warnings Removal
              fflush(stdout);

              
              printf(" **********%s*************** \n",chr_h_str_amt);
              fflush(stdout);
				  while(chr_h_str_amt[i]!='.')
					{
						chr_h_str_temp[i]=	chr_h_str_amt[i];
						i=i+1;
					}	
              printf(" **********%s*************** \n",chr_h_str_temp);
					memset(chr_h_str_temp,APL_NULL_CHAR,18);
					strcpy(chr_h_str_temp,chr_h_str_amt+i+1);
              printf(" **********%s*************** \n",chr_h_str_temp);
              printf(" **********%d*************** \n",atoi(chr_h_str_temp));
					if(atoi(chr_h_str_temp)>100)
					int_i_temp_lastdigit=1;

              if (int_i_temp_lastdigit > 0)
                  { 
              printf(" **********%lf*************** \n",dbl_h_temp_amount);
              fflush(stdout);
						EXEC SQL SELECT TRUNC(:dbl_h_temp_amount,2) INTO :dbl_h_temp_amount1 FROM DUAL;
						IS_ANY_ORA_ERROR

			          l_ca_deal_struct_h.h_amt=	dbl_h_temp_amount1 + 0.01;
              printf(" **********%lf*************** \n",l_ca_deal_struct_h.h_amt);
              fflush(stdout);
                   
                  }
			  }
        else
           {
			    l_ca_deal_struct_h.h_amt=l_ca_deal_struct_h.h_pr*l_ca_deal_struct_h.h_qty;
			  }
		#endif
		
		if(CA_Rtv_PopulateTrade(&l_ca_deal_struct_h,
									 l_ca_cartsproc_struct_h_ptr,
									 l_debug_info_ptr)==APL_FAILURE)
			APL_GOBACK_FAIL
		memset(chr_dummyrefno,NULL,S_TXNREFNO_LEN);
		
		memset(chr_dummyrefno,APL_NULL_CHAR,APL_TXNREFNO_LEN);
		sleep(1);
		if(APL_FAILURE == CO_GenRefno(chr_eventtype,
												APL_NULL_STRING,
												deal_cd,
												chr_dummyrefno,
												l_debug_info_ptr))
		{
			APL_GOBACK_FAIL
		}
		strcpy(l_ca_deal_struct_h.h_indentity_no,chr_dummyrefno);
		if(CA_Mod_NewTrade(&l_ca_deal_struct_h,
							  p_intlenv_data_struct_h,
							  chr_dummyrefno,
							  l_debug_info_ptr)==APL_FAILURE) {
			APL_IF_DEBUG {
			CO_ProcMonitor(APL_OUT_FILE,"Could not create trade",NULL,p_intlenv_data_struct_h); 
			}
			APL_GOBACK_FAIL
			} else
			APL_IF_DEBUG {
			CO_ProcMonitor(APL_OUT_FILE,"Created trade",NULL,p_intlenv_data_struct_h);
			}
				if(CA_MovePos(	&l_ca_deal_struct_h ,
							"RT",
							APL_NULL_STRING,
							l_debug_info_ptr) == APL_FAILURE)
				{
					APL_GOBACK_FAIL
				}
   
	}
	}
		
		memset(&l_ca_deal_struct_h,NULL,sizeof(CA_DEAL_STRUCT_H));
		strcpy(l_ca_deal_struct_h.h_dealcd,APL_DEAL_DF);
		l_ca_deal_struct_h.h_amt=0.0;
		l_ca_deal_struct_h.h_qty=l_ca_cartsproc_struct_h_ptr->h_takeupquantity;
		l_ca_deal_struct_h.h_pr=0.0;
		
		 
		sprintf(l_ca_deal_struct_h.h_info1,
				 "Replacement of %s for %s declared on %s for a takeup quantity of %lf",
				 l_ca_cartsproc_struct_h_ptr->h_instr_code,
				 l_ca_cartsproc_struct_h_ptr->h_ca_event,
				 l_ca_cartsproc_struct_h_ptr->h_decl_date,
				 l_ca_deal_struct_h.h_qty);
		if(CA_Rtv_PopulateTrade(&l_ca_deal_struct_h,
									 l_ca_cartsproc_struct_h_ptr,
									 l_debug_info_ptr)==APL_FAILURE)
			APL_GOBACK_FAIL
		
		memset(chr_dummyrefno,APL_NULL_CHAR,APL_TXNREFNO_LEN);
		sleep(1);
		if(APL_FAILURE == CO_GenRefno(chr_eventtype,
												APL_NULL_STRING,
												deal_cd,
												chr_dummyrefno,
												l_debug_info_ptr))
		{
			APL_GOBACK_FAIL
		}
		strcpy(l_ca_deal_struct_h.h_indentity_no,chr_dummyrefno);
printf("\n calling CA_Mod_NewTrade ..");
		if(CA_Mod_NewTrade(&l_ca_deal_struct_h,
							  p_intlenv_data_struct_h,
							  chr_dummyrefno,
							  l_debug_info_ptr)==APL_FAILURE) {
			APL_IF_DEBUG  {
			CO_ProcMonitor(APL_OUT_FILE,"Could not create trade",NULL,p_intlenv_data_struct_h);
			}
			APL_GOBACK_FAIL
			} else
			APL_IF_DEBUG  {
			CO_ProcMonitor(APL_OUT_FILE,"Created trade",NULL,p_intlenv_data_struct_h); 
			}
				if(CA_MovePos(	&l_ca_deal_struct_h ,
							"RT",
							APL_NULL_STRING,
							l_debug_info_ptr) == APL_FAILURE)
				{
					APL_GOBACK_FAIL
				}

   
			printf("trade_struct.h_deal_status is %s\n",l_ca_deal_struct_h.h_deal_status);	
   	int_l_rucondexists = 0 ;

 	  if(CO_Chk_CntryEnabled("PAY_PROC","RUSTAT_TRDAUTH",&int_l_rucondexists,l_debug_info_ptr)==APL_FAILURE)
   	 APL_GOBACK_FAIL
   	else
    	EXEC SQL SELECT CLN_CLAS INTO :chr_l_h_acc_class:l_i_acc_class FROM MT_CLIENT
    	WHERE CLN_CODE = :l_ca_deal_struct_h.h_dl_client ;

 	  	IS_ANY_ORA_ERROR
		   if( (int_l_rucondexists>0) && !(strcmp(chr_l_h_acc_class,"2")) )
   		{
				printf("non proprietary client for RU so no MT566\n");
			}
			else
			{
            memset(chr_msg_param_string,NULL,MSG_PARAM_LEN);
            sprintf(chr_msg_param_string,"%s%s%s%s%s%s%d%s%s%s",
                  l_ca_cartsproc_struct_h_ptr->h_instr_code,
                  MSG_PARAM_STRUCT_SEP,
                  l_ca_cartsproc_struct_h_ptr->h_ca_event,
                  MSG_PARAM_STRUCT_SEP,
                  l_ca_cartsproc_struct_h_ptr->h_decl_date,
                  MSG_PARAM_STRUCT_SEP,
                  l_ca_cartsproc_struct_h_ptr->h_evt_nbr,
                  MSG_PARAM_STRUCT_SEP,
                  chr_dummyrefno,
                  MSG_PARAM_STRUCT_SEP);
         printf("\n calling GBDbInsIMSGENT for 563N01 ..");
         if(GBDbInsIMSGENT("563N01",
                       APL_NULL_STRING,
                       l_ca_cartsproc_struct_h_ptr->h_dl_client,
                       APL_YES_FLAG,
                       chr_msg_param_string,
                       l_debug_info_ptr)==APL_FAILURE)
            {
               CO_ProcMonitor(APL_OUT_FILE,"Failure from GBDbInsIMSGENT\n",NULL,p_intlenv_data_struct_h);
               APL_GOBACK_FAIL
            }
			}
        
	}
	EXEC SQL UPDATE CARTSPROC
		SET checker=:l_ca_cartsproc_struct_h_ptr->h_checker,
			 CHECKER_DT=:l_ca_cartsproc_struct_h_ptr->h_checker_dt,
			 status=:l_ca_cartsproc_struct_h_ptr->h_evt_stat,
			 access_stamp=:l_ca_cartsproc_struct_h_ptr->h_access_stamp
		WHERE instr_code  = :l_ca_cartsproc_struct_h_ptr->h_instr_code
		AND	client = :l_ca_cartsproc_struct_h_ptr->h_dl_client
		AND	CA_EVENT  = :l_ca_cartsproc_struct_h_ptr->h_ca_event
		AND	evnt_indnt= :l_ca_cartsproc_struct_h_ptr->h_evt_nbr
		AND	declare_dt = :l_ca_cartsproc_struct_h_ptr->h_decl_date;
		IS_ANY_ORA_ERROR
RETURN_SUCCESS:
{
	return APL_SUCCESS;
}
RETURN_FAILURE:
{
	return APL_FAILURE;
}
}


static int CA_Chk_RightsQty(CA_CARTSPROC_STRUCT_H *l_ca_cartsproc_struct_h_ptr,
							 	int *int_p_result,
							 DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
struct sqlca sqlca;
double int_l_temp=0.0;
short	int_l_condexists=0;
#ifdef APL_THREADS
APL_SET_CONTEXT
EXEC SQL CONTEXT USE :my_ctx_local;
#endif
	if(l_ca_cartsproc_struct_h_ptr->h_lapsequenceuantity<0||
		l_ca_cartsproc_struct_h_ptr->h_total_quantity<0||
		l_ca_cartsproc_struct_h_ptr->h_takeupquantity<0||
		l_ca_cartsproc_struct_h_ptr->h_sub_base_quantity<0||
		l_ca_cartsproc_struct_h_ptr->h_sub_new_quantity<0) {
		CO_InsertErr(l_debug_info_ptr,
							ERR_VALUE_CANT_NEGATIVE,
							l_ca_cartsproc_struct_h_ptr->h_instr_code,
							l_ca_cartsproc_struct_h_ptr->h_dl_client,
							NULL,
							__LINE__,
							__FILE__);
		APL_GOBACK_FAIL
		}
		printf("%.7lf, %.7lf\n",l_ca_cartsproc_struct_h_ptr->h_lapsequenceuantity,l_ca_cartsproc_struct_h_ptr->h_takeupquantity);
		printf("%.10lf, %.10lf\n",l_ca_cartsproc_struct_h_ptr->h_total_quantity,l_ca_cartsproc_struct_h_ptr->h_lapsequenceuantity+l_ca_cartsproc_struct_h_ptr->h_takeupquantity);
 	  if(CO_Chk_CntryEnabled("CA_QTY_LEN","SEVEN_DEC",&int_l_condexists,l_debug_info_ptr)==APL_FAILURE)
   	 APL_GOBACK_FAIL
		if(int_l_condexists>0)
		{
			EXEC SQL SELECT ROUND((:l_ca_cartsproc_struct_h_ptr->h_lapsequenceuantity +:l_ca_cartsproc_struct_h_ptr->h_takeupquantity),:l_mt_core_sys_params_struct_h.qty_dec_len) INTO :int_l_temp FROM DUAL;
			IS_ANY_ORA_ERROR
		}
		else
		{
			int_l_temp= l_ca_cartsproc_struct_h_ptr->h_lapsequenceuantity +l_ca_cartsproc_struct_h_ptr->h_takeupquantity;
		}
	
		if(int_l_temp>l_ca_cartsproc_struct_h_ptr->h_total_quantity) {
		CO_InsertErr(l_debug_info_ptr,
							ERR_DEAL_NENUFPOSN,
							l_ca_cartsproc_struct_h_ptr->h_instr_code,
							l_ca_cartsproc_struct_h_ptr->h_dl_client,
							l_ca_cartsproc_struct_h_ptr->h_ca_event,
							__LINE__,
							__FILE__);
		APL_GOBACK_FAIL
		}
RETURN_SUCCESS:
{
	return APL_SUCCESS;
}
RETURN_FAILURE:
{
	return APL_FAILURE;
}
}


static int CA_Chk_RightsDate(CA_CARTSPROC_STRUCT_H   *l_ca_cartsproc_struct_h_ptr,
							  int 				*int_p_result,
							  DEBUG_INFO_STRUCT_H    *l_debug_info_ptr)
{
	

*int_p_result=APL_SUCCESS;
APL_GOBACK_SUCCESS
RETURN_SUCCESS:
{
	return APL_SUCCESS;
}
RETURN_FAILURE:
{
	return APL_FAILURE;
}
}

static int CA_Chk_RightsAuthData(	CA_RHTS_SUTH_STRUCT_H  *l_ca_cartsproc_struct_h_ptr,
								INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h,
								DEBUG_INFO_STRUCT_H   **l_debug_info_ptr)
	{
struct sqlca sqlca;
#ifdef APL_THREADS
APL_SET_CONTEXT
EXEC SQL CONTEXT USE :my_ctx_local;
#endif
	if	(	!strlen(l_ca_cartsproc_struct_h_ptr->h_decl_date)	)
		APL_DATA_MISSING("Decl date",APL_NULL_STRING,APL_NULL_STRING)	
	if	(	!strlen(l_ca_cartsproc_struct_h_ptr->h_dl_client)	)
		APL_DATA_MISSING("Account",APL_NULL_STRING,APL_NULL_STRING)	

	if(	!strlen(l_ca_cartsproc_struct_h_ptr->h_instr_code)	)
		APL_DATA_MISSING("Instrument Code",APL_NULL_STRING,APL_NULL_STRING)

	
	if(	!strlen(l_ca_cartsproc_struct_h_ptr->h_ca_event)	)
		APL_DATA_MISSING("Instrument type ",APL_NULL_STRING,APL_NULL_STRING)	

	if(l_ca_cartsproc_struct_h_ptr->h_evt_nbr==0)
		APL_DATA_MISSING("Evnt_nbr",APL_NULL_STRING,APL_NULL_STRING)	
	if(!strlen(p_intlenv_data_struct_h->usr))
		APL_DATA_MISSING("Checker name",APL_NULL_STRING,APL_NULL_STRING);

	if	(CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL

	APL_GOBACK_SUCCESS
	RETURN_SUCCESS	:
	
	{
		return (APL_SUCCESS);
	}
	RETURN_FAILURE	:
	{
		return (APL_FAILURE);
	}
}
static int CA_Chk_RightsDel(	CA_CARTSPROC_STRUCT_H  *l_ca_cartsproc_struct_h_ptr,
								INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h,
								DEBUG_INFO_STRUCT_H   **l_debug_info_ptr)
	{
char h_evt_stat[APL_STATUS_LEN];
short i_evt_stat;
struct sqlca sqlca;
#ifdef APL_THREADS
APL_SET_CONTEXT
EXEC SQL CONTEXT USE :my_ctx_local;
#endif
	
	memset(h_evt_stat,APL_NULL_CHAR,sizeof(APL_STATUS_LEN));
	if((strlen(l_ca_cartsproc_struct_h_ptr->h_corp_id) !=0) &&
		(strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_DELETE)))
	{
		EXEC SQL SELECT status into :h_evt_stat:i_evt_stat
		from CAEVENT where corp_id = RTRIM(:l_ca_cartsproc_struct_h_ptr->h_corp_id);
		IS_ANY_ORA_ERROR
		if(strcmp(h_evt_stat,STATUS_PART_PAID) &&
		  (strcmp(h_evt_stat,STATUS_MSG_PAID_CLSD))&&
		  (strcmp(h_evt_stat,STATUS_RDY_PYMT)))
			{	
				CO_InsertErr(l_debug_info_ptr,
									ERR_EVNTSTS_INVALID,
									l_ca_cartsproc_struct_h_ptr->h_corp_id,
									":",
									h_evt_stat,	
									__LINE__,
									__FILE__
									);
				APL_GOBACK_FAIL
			}
	}
	if	(	!strlen(l_ca_cartsproc_struct_h_ptr->h_dl_client)	)
		APL_DATA_MISSING("Account",APL_NULL_STRING,APL_NULL_STRING)	

	if(	!strlen(l_ca_cartsproc_struct_h_ptr->h_instr_code)	)
		APL_DATA_MISSING("Instrument Code",APL_NULL_STRING,APL_NULL_STRING)

	
	if(	!strlen(l_ca_cartsproc_struct_h_ptr->h_ca_event)	)
		APL_DATA_MISSING("Instrument type ",APL_NULL_STRING,APL_NULL_STRING)	
	if( !strlen(l_ca_cartsproc_struct_h_ptr->h_decl_date) )
		APL_DATA_MISSING("Decl_dt ",APL_NULL_STRING,APL_NULL_STRING);

		if(strlen(p_intlenv_data_struct_h->usr)) {
			strcpy(l_ca_cartsproc_struct_h_ptr->h_maker,p_intlenv_data_struct_h->usr);
		} else {
		APL_DATA_MISSING("Maker",APL_NULL_STRING,APL_NULL_STRING)	
	}

	if(l_ca_cartsproc_struct_h_ptr->h_evt_nbr==0)
		APL_DATA_MISSING("Evnt_nbr",APL_NULL_STRING,APL_NULL_STRING)	

	if	(CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL

	APL_GOBACK_SUCCESS
	RETURN_SUCCESS	:
	
	{
		return (APL_SUCCESS);
	}
	RETURN_FAILURE	:
	{
		return (APL_FAILURE);
	}
}


static	int	CA_Chk_RightsReset( CA_CARTSPROC_STRUCT_H    *l_ca_cartsproc_struct_h_ptr,
 				                    INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
            				         DEBUG_INFO_STRUCT_H         **l_debug_info_ptr)
{

	
	int int_holiday_flag = 0;
	

struct sqlca sqlca;
#ifdef APL_THREADS
APL_SET_CONTEXT
EXEC SQL CONTEXT USE :my_ctx_local;
#endif
 if(l_ca_cartsproc_struct_h_ptr->h_takeupquantity) {
	if	(	(l_ca_cartsproc_struct_h_ptr->h_sub_base_quantity==	0)	||
			(l_ca_cartsproc_struct_h_ptr->h_sub_new_quantity	==	0)	){
		APL_DATA_MISSING("Ratio incomplete ",APL_NULL_STRING,APL_NULL_STRING)	
		}
	}

	if	(	!strlen(l_ca_cartsproc_struct_h_ptr->h_instr_parent)	) 
		APL_DATA_MISSING("Parent Instrument",APL_NULL_STRING,APL_NULL_STRING)	

	
   if( !strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind,APL_YES_IND)) {
		if(	!strlen(l_ca_cartsproc_struct_h_ptr->h_loccode)	)
			APL_DATA_MISSING("Location code",APL_NULL_STRING,APL_NULL_STRING)	
	}

		if(CO_RtvSysDt(l_ca_cartsproc_struct_h_ptr->h_maker_dt,
								  l_debug_info_ptr)==APL_FAILURE)
		APL_DATA_MISSING("Maker date",APL_NULL_STRING,APL_NULL_STRING);


	if(strcmp(l_ca_cartsproc_struct_h_ptr->h_ca_event,APL_RTS_PAID)&&l_ca_cartsproc_struct_h_ptr->h_takeupquantity) {
		if(l_ca_cartsproc_struct_h_ptr->h_sub_pr==0)
			APL_DATA_MISSING("Sub_price",APL_NULL_STRING,APL_NULL_STRING);
	}

	if(!strlen(l_ca_cartsproc_struct_h_ptr->h_sub_currency))
		APL_DATA_MISSING("Sub_ccy",APL_NULL_STRING,APL_NULL_STRING);

	
	if(!strlen(l_ca_cartsproc_struct_h_ptr->h_pymt_dt))
	{
		APL_DATA_MISSING("Pay Date",APL_NULL_STRING,APL_NULL_STRING);
	}
	else
	{
            int_holiday_flag = 0;
            if (  CO_Chk_Holiday(l_ca_cartsproc_struct_h_ptr->h_pymt_dt,
                                    &int_holiday_flag,
                                    l_debug_info_ptr,APL_NULL_STRING)
                  == APL_FAILURE
               )
            {
               APL_GOBACK_FAIL
            }

            if (  int_holiday_flag   )
            {
               CO_InsertErr( l_debug_info_ptr,
                                 ERR_DATE_IS_HOLIDAY,
                                 "Pay Date",
                                 APL_NULL_STRING,
                                 APL_NULL_STRING,
                                 __LINE__,
                                 __FILE__);
            }
	}

	if	(CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			APL_GOBACK_FAIL

		APL_GOBACK_SUCCESS
		RETURN_SUCCESS	:
		
		{
			return (APL_SUCCESS);
		}
		RETURN_FAILURE	:
		{
			return (APL_FAILURE);
		}
}

static int CA_Mod_DelRecord(		CA_CARTSPROC_STRUCT_H 	*l_ca_cartsproc_struct_h_ptr,
										int 					*int_p_result,
										DEBUG_INFO_STRUCT_H 		**l_debug_info_ptr,
										INTL_ENV_DATA_STRUCT_H 	*p_intlenv_data_struct_h) 
{
	char h_evt_stat[APL_FUNC_LEN];
	short i_evt_stat;
	char h_access_stamp[APL_DATE_LEN]=APL_NULL_STRING;
	char chr_sys_date_time[APL_DATE_LEN]=APL_NULL_STRING;
	short i_access_stamp;
	char h_maker[APL_USERID_LEN];
	short i_maker;
struct sqlca sqlca;
#ifdef APL_THREADS
APL_SET_CONTEXT
EXEC SQL CONTEXT USE :my_ctx_local;
#endif
	*int_p_result=APL_SUCCESS;

	EXEC SQL VAR h_evt_stat IS STRING;
	EXEC SQL VAR h_access_stamp IS STRING;
	EXEC SQL VAR h_maker IS STRING;
	EXEC SQL VAR l_ca_cartsproc_struct_h_ptr->h_decl_date IS STRING;

	EXEC SQL SELECT status,
						 access_stamp,
						 maker
					INTO :h_evt_stat :i_evt_stat,
						  :h_access_stamp :i_access_stamp,
						  :h_maker :i_maker
		FROM CARTSPROC 
		WHERE instr_code=:l_ca_cartsproc_struct_h_ptr->h_instr_code
		AND   CA_EVENT=:l_ca_cartsproc_struct_h_ptr->h_ca_event
		AND   client=:l_ca_cartsproc_struct_h_ptr->h_dl_client
		AND   evnt_indnt=:l_ca_cartsproc_struct_h_ptr->h_evt_nbr
		AND	declare_dt=:l_ca_cartsproc_struct_h_ptr->h_decl_date
		FOR UPDATE OF status;

	IS_ANY_ORA_ERROR
	if(APL_ZERO_RESULT_SET) 
	{
		if(CO_InsertErr(l_debug_info_ptr,
							ERR_REC_NOTFND,
							l_ca_cartsproc_struct_h_ptr->h_instr_code,
							l_ca_cartsproc_struct_h_ptr->h_dl_client,
							l_ca_cartsproc_struct_h_ptr->h_ca_event,
							__LINE__,
							__FILE__)==APL_FAILURE)
			APL_GOBACK_FAIL
		*int_p_result=APL_FAILURE;
		APL_GOBACK_SUCCESS
		}
	if(!strcmp(h_evt_stat,STATUS_DEL_AUTH)) {
		if(CO_InsertErr(l_debug_info_ptr,
							ERR_REC_MARKEDDEL,
							l_ca_cartsproc_struct_h_ptr->h_instr_code,
							l_ca_cartsproc_struct_h_ptr->h_dl_client,
							l_ca_cartsproc_struct_h_ptr->h_ca_event,
							__LINE__,
							__FILE__)==APL_FAILURE)
			APL_GOBACK_FAIL
		*int_p_result=APL_FAILURE;
		APL_GOBACK_SUCCESS
	}
	if(!strcmp(h_evt_stat,APL_STATUS_UNAUTH)) 
	{
		if(strcmp(h_access_stamp,
					  l_ca_cartsproc_struct_h_ptr->h_access_stamp)!=0) 
	  {
			
		if(CO_InsertErr(l_debug_info_ptr,
							ERR_ACCESSSTAMP_CHGD,
							l_ca_cartsproc_struct_h_ptr->h_instr_code,
							l_ca_cartsproc_struct_h_ptr->h_dl_client,
							l_ca_cartsproc_struct_h_ptr->h_ca_event,
							__LINE__,
							__FILE__)==APL_FAILURE)
			APL_GOBACK_FAIL
			*int_p_result=APL_FAILURE;
			APL_GOBACK_SUCCESS
		}

		if(CO_RtvSysDtTime(chr_sys_date_time,l_debug_info_ptr)== APL_FAILURE)	
			APL_GOBACK_FAIL
		
		EXEC SQL UPDATE CARTSPROC
			SET 
			STATUS='DD',
			access_stamp = :chr_sys_date_time
			WHERE instr_code=:l_ca_cartsproc_struct_h_ptr->h_instr_code
			AND   CA_EVENT=:l_ca_cartsproc_struct_h_ptr->h_ca_event
			AND   client=:l_ca_cartsproc_struct_h_ptr->h_dl_client
			AND   evnt_indnt=:l_ca_cartsproc_struct_h_ptr->h_evt_nbr
			AND	declare_dt=:l_ca_cartsproc_struct_h_ptr->h_decl_date;
		IS_ANY_ORA_ERROR
		*int_p_result=APL_SUCCESS;
		APL_GOBACK_SUCCESS
	}
	else
	{
		
		if(CO_InsertErr(l_debug_info_ptr,
							ERR_REC_AUTHORIZED,
							l_ca_cartsproc_struct_h_ptr->h_instr_code,
							l_ca_cartsproc_struct_h_ptr->h_dl_client,
							l_ca_cartsproc_struct_h_ptr->h_ca_event,
							__LINE__,
							__FILE__)==APL_FAILURE)
			APL_GOBACK_FAIL
		*int_p_result=APL_FAILURE;
		APL_GOBACK_SUCCESS
	}
APL_GOBACK_SUCCESS
RETURN_SUCCESS:
{
	return APL_SUCCESS;
}
RETURN_FAILURE:
{
	return APL_FAILURE;
}
}



static int CA_Mod_NewRecord(		CA_CARTSPROC_STRUCT_H 	*l_ca_cartsproc_struct_h_ptr,
										int 					*int_p_result,
										DEBUG_INFO_STRUCT_H 		**l_debug_info_ptr,
										INTL_ENV_DATA_STRUCT_H 	*p_intlenv_data_struct_h) 
{
	char h_evt_stat[APL_FUNC_LEN];
	short i_evt_stat;
	char h_access_stamp[APL_DATE_LEN];
	short i_access_stamp;
	char h_maker[APL_USERID_LEN];
	short i_maker;
struct sqlca sqlca;
#ifdef APL_THREADS
APL_SET_CONTEXT
EXEC SQL CONTEXT USE :my_ctx_local;
#endif
	*int_p_result=APL_SUCCESS;
	if(CO_RtvSysDtTime(l_ca_cartsproc_struct_h_ptr->h_access_stamp,
									l_debug_info_ptr)==APL_FAILURE)
		APL_GOBACK_FAIL

	strcpy(l_ca_cartsproc_struct_h_ptr->h_evt_stat,APL_STATUS_UNAUTH);

	EXEC SQL INSERT INTO CARTSPROC
		VALUES(:l_ca_cartsproc_struct_h_ptr);
       //Nandlal changes for type converting from int to char * 
	char *tmpEvtNbr = NULL;
        tmpEvtNbr =(char *)malloc(sizeof(int));
        sprintf(tmpEvtNbr,"%d",l_ca_cartsproc_struct_h_ptr->h_evt_nbr);

	IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_REC_EXIST,l_ca_cartsproc_struct_h_ptr->h_instr_code,l_ca_cartsproc_struct_h_ptr->h_dl_client,tmpEvtNbr);
	RETURN_SUCCESS:
	{
		return APL_SUCCESS;
	}
	RETURN_FAILURE:
	{
		return APL_FAILURE;
	}
	}

static int CA_Mod_ChgRecord(		CA_CARTSPROC_STRUCT_H 	*l_ca_cartsproc_struct_h_ptr,
										int 					*int_p_result,
										DEBUG_INFO_STRUCT_H 		**l_debug_info_ptr,
										INTL_ENV_DATA_STRUCT_H 	*p_intlenv_data_struct_h) 
{
	char h_evt_stat[APL_FUNC_LEN];
	short i_evt_stat;
	char h_access_stamp[APL_DATE_LEN]=APL_NULL_STRING;
	short i_access_stamp;
	char h_maker[APL_USERID_LEN];
	short i_maker;
	int int_result;
struct sqlca sqlca;
#ifdef APL_THREADS
APL_SET_CONTEXT
EXEC SQL CONTEXT USE :my_ctx_local;
#endif
	*int_p_result=APL_SUCCESS;

	EXEC SQL VAR h_evt_stat IS STRING;
	EXEC SQL VAR h_access_stamp IS STRING;
	EXEC SQL VAR h_maker IS STRING;

	EXEC SQL SELECT status,
						 access_stamp,
						 maker
					INTO :h_evt_stat :i_evt_stat,
						  :h_access_stamp :i_access_stamp,
						  :h_maker :i_maker
		FROM CARTSPROC 
		WHERE instr_code=:l_ca_cartsproc_struct_h_ptr->h_instr_code
		AND   CA_EVENT=:l_ca_cartsproc_struct_h_ptr->h_ca_event
		AND   client=:l_ca_cartsproc_struct_h_ptr->h_dl_client
		AND   evnt_indnt=:l_ca_cartsproc_struct_h_ptr->h_evt_nbr
		AND   declare_dt=:l_ca_cartsproc_struct_h_ptr->h_decl_date;


	IS_ANY_ORA_ERROR
	if(APL_ZERO_RESULT_SET) 
	{
		if(CO_InsertErr(l_debug_info_ptr,
							ERR_REC_NOTFND,
							l_ca_cartsproc_struct_h_ptr->h_instr_code,
							l_ca_cartsproc_struct_h_ptr->h_dl_client,
							l_ca_cartsproc_struct_h_ptr->h_ca_event,
							__LINE__,
							__FILE__)==APL_FAILURE)
			APL_GOBACK_FAIL
		*int_p_result=APL_FAILURE;
		APL_GOBACK_SUCCESS
	}
	if(!strcmp(h_evt_stat,APL_STATUS_UNAUTH)) 
	{
		if(strcmp(h_access_stamp,
					  l_ca_cartsproc_struct_h_ptr->h_access_stamp)) 
		{
			
		if(CO_InsertErr(l_debug_info_ptr,
							ERR_ACCESSSTAMP_CHGD,
							l_ca_cartsproc_struct_h_ptr->h_instr_code,
							l_ca_cartsproc_struct_h_ptr->h_dl_client,
							l_ca_cartsproc_struct_h_ptr->h_ca_event,
							__LINE__,
							__FILE__)==APL_FAILURE)
			APL_GOBACK_FAIL
			*int_p_result=APL_FAILURE;
			APL_GOBACK_SUCCESS
		}

	   if(CO_RtvSysDtTime(l_ca_cartsproc_struct_h_ptr->h_access_stamp,
										l_debug_info_ptr)==APL_FAILURE)
						APL_GOBACK_FAIL	

		EXEC SQL UPDATE CARTSPROC
			SET INSTR_PARENT=:l_ca_cartsproc_struct_h_ptr->h_instr_parent,
				 TOTAL_QUANTITY=:l_ca_cartsproc_struct_h_ptr->h_total_quantity,
				 TAKEUP_QUANTITY=:l_ca_cartsproc_struct_h_ptr->h_takeupquantity,
				 SUB_BASE_QUANTITY=:l_ca_cartsproc_struct_h_ptr->h_sub_base_quantity,
				 SUB_NEW_QUANTITY=:l_ca_cartsproc_struct_h_ptr->h_sub_new_quantity,
				 corp_id=:l_ca_cartsproc_struct_h_ptr->h_corp_id,
				 SUB_PR=:l_ca_cartsproc_struct_h_ptr->h_sub_pr,
				 location_cd=:l_ca_cartsproc_struct_h_ptr->h_loccode,
				 LAPSE_QTY=:l_ca_cartsproc_struct_h_ptr->h_lapsequenceuantity,
				 INFO_SEQ=:l_ca_cartsproc_struct_h_ptr->h_info_nbr,
				 maker=:l_ca_cartsproc_struct_h_ptr->h_maker,
				 MAKER_DT=:l_ca_cartsproc_struct_h_ptr->h_maker_dt,
				 dateof_payment=:l_ca_cartsproc_struct_h_ptr->h_pymt_dt,
				 checker=:l_ca_cartsproc_struct_h_ptr->h_checker,
				 CHECKER_DT=:l_ca_cartsproc_struct_h_ptr->h_checker_dt,
				 access_stamp=:l_ca_cartsproc_struct_h_ptr->h_access_stamp,
				 trans_date=NULL 
			WHERE instr_code=:l_ca_cartsproc_struct_h_ptr->h_instr_code 
			AND   CA_EVENT=:l_ca_cartsproc_struct_h_ptr->h_ca_event
			AND   client=:l_ca_cartsproc_struct_h_ptr->h_dl_client
			AND   evnt_indnt=:l_ca_cartsproc_struct_h_ptr->h_evt_nbr
			AND   declare_dt=:l_ca_cartsproc_struct_h_ptr->h_decl_date;
		IS_ANY_ORA_ERROR
		*int_p_result=APL_SUCCESS;
		APL_GOBACK_SUCCESS
	}
	else
	{
		if(!strcmp(h_evt_stat,APL_STS_AUTH)) {
		
		if(CO_InsertErr(l_debug_info_ptr,
							ERR_REC_AUTHORIZED,
							l_ca_cartsproc_struct_h_ptr->h_instr_code,
							l_ca_cartsproc_struct_h_ptr->h_dl_client,
							l_ca_cartsproc_struct_h_ptr->h_ca_event,
							__LINE__,
							__FILE__)==APL_FAILURE)
			APL_GOBACK_FAIL
		*int_p_result=APL_FAILURE;
		APL_GOBACK_SUCCESS
		} else {
		if(CO_InsertErr(l_debug_info_ptr,
							ERR_REC_MARKEDDEL,
							l_ca_cartsproc_struct_h_ptr->h_instr_code,
							l_ca_cartsproc_struct_h_ptr->h_dl_client,
							l_ca_cartsproc_struct_h_ptr->h_ca_event,
							__LINE__,
							__FILE__)==APL_FAILURE)
			APL_GOBACK_FAIL
		*int_p_result=APL_FAILURE;
		APL_GOBACK_SUCCESS
		}
	}
RETURN_FAILURE:
{
	return APL_FAILURE;
}
RETURN_SUCCESS:
{
	return APL_SUCCESS;
}
}


int CA_Proc_RightsUpd(CA_CARTSPROC_STRUCT_H *l_ca_cartsproc_struct_h_ptr,
						 int 				  *int_p_result,
						 DEBUG_INFO_STRUCT_H    **l_debug_info_ptr,
						 INTL_ENV_DATA_STRUCT_H  *p_intl_env_data_struct_h) 
{
int int_result;
char *h_mode;
MT_CLIENT_STRUCT_H l_mt_client_struct_h;
MT_INSTRUMENT_STRUCT_H l_mt_instrument_struct_h;
struct sqlca sqlca;
#ifdef APL_THREADS
APL_SET_CONTEXT
EXEC SQL CONTEXT USE :my_ctx_local;
#endif
h_mode=p_intl_env_data_struct_h->h_mode;
EXEC SQL VAR l_ca_cartsproc_struct_h_ptr->h_instr_code IS STRING;
EXEC SQL VAR l_ca_cartsproc_struct_h_ptr->h_corp_id IS STRING;
EXEC SQL VAR l_ca_cartsproc_struct_h_ptr->h_decl_date IS STRING;
EXEC SQL VAR l_ca_cartsproc_struct_h_ptr->h_dl_client IS STRING;
EXEC SQL VAR l_ca_cartsproc_struct_h_ptr->h_ca_event IS STRING;
EXEC SQL VAR l_ca_cartsproc_struct_h_ptr->h_instr_parent IS STRING;
EXEC SQL VAR l_ca_cartsproc_struct_h_ptr->h_loccode IS STRING;
EXEC SQL VAR l_ca_cartsproc_struct_h_ptr->h_evt_stat IS STRING;
EXEC SQL VAR l_ca_cartsproc_struct_h_ptr->h_maker IS STRING;
EXEC SQL VAR l_ca_cartsproc_struct_h_ptr->h_maker_dt IS STRING;
EXEC SQL VAR l_ca_cartsproc_struct_h_ptr->h_checker IS STRING;
EXEC SQL VAR l_ca_cartsproc_struct_h_ptr->h_checker_dt IS STRING;
EXEC SQL VAR l_ca_cartsproc_struct_h_ptr->h_access_stamp IS STRING;
EXEC SQL VAR l_ca_cartsproc_struct_h_ptr->h_sub_currency IS STRING;

if(CA_Chk_RightsDel(l_ca_cartsproc_struct_h_ptr,
					p_intl_env_data_struct_h,
					l_debug_info_ptr)==APL_FAILURE)
					APL_GOBACK_FAIL

if(!strcmp(h_mode,APL_FUNC_DELETE)) 
{
	if(CA_Mod_DelRecord(l_ca_cartsproc_struct_h_ptr,
					&int_result,
					l_debug_info_ptr,
					p_intl_env_data_struct_h)==APL_FAILURE) 
		{
		APL_GOBACK_FAIL
		}
		else 
		{
			*int_p_result=int_result;
			APL_GOBACK_SUCCESS;
		}
}

if(CA_Chk_RightsReset(l_ca_cartsproc_struct_h_ptr,
						p_intl_env_data_struct_h,
						l_debug_info_ptr)==APL_FAILURE) 
						APL_GOBACK_FAIL 

if(CA_Chk_RightsQty(l_ca_cartsproc_struct_h_ptr,&int_result,l_debug_info_ptr)==APL_FAILURE)
{
	*int_p_result=APL_FAILURE;
	APL_GOBACK_SUCCESS
}

if(CA_ChkAcc(l_ca_cartsproc_struct_h_ptr->h_dl_client,
					 &l_mt_client_struct_h,
					 &int_result,
					 l_debug_info_ptr)==APL_SUCCESS)
{
	if(int_result==APL_FAILURE) 
	{
		*int_p_result=APL_FAILURE;
		APL_GOBACK_SUCCESS
	}
}
else
	APL_GOBACK_FAIL 

/*Changes - Base Version CA - Smita - Changed fn name CA_ChkInstrument to CA_ChkInstrument*/
if(CA_ChkInstrument(l_ca_cartsproc_struct_h_ptr->h_instr_code,
				&l_mt_instrument_struct_h,
				&int_result,
				l_debug_info_ptr)==APL_SUCCESS)
{
	if(int_result==APL_FAILURE) 
	{
		*int_p_result=APL_FAILURE;
		APL_GOBACK_SUCCESS
	}
}
else
	APL_GOBACK_FAIL 
if (	!( (	!strcmp(l_mt_instrument_struct_h.h_instr_type,APL_INSTRU_RIGHTS) ||
				!strcmp(l_mt_instrument_struct_h.h_instr_type,APL_INSTRU_SHARE)) &&
			(!strcmp(l_mt_instrument_struct_h.h_mother_sec_ind,APL_NO_IND) )
		)
	)
{
	*int_p_result = APL_FAILURE;
	CO_InsertErr(l_debug_info_ptr,
						ERR_RES_INSTR_INVALID,
						l_ca_cartsproc_struct_h_ptr->h_instr_code,
						APL_NULL_STRING,
						APL_NULL_STRING,
						__LINE__,
						__FILE__);	
   		
	APL_GOBACK_SUCCESS
}

if(CA_ChkInstrument(l_ca_cartsproc_struct_h_ptr->h_instr_parent,
				&l_mt_instrument_struct_h,
			   &int_result,
				l_debug_info_ptr)==APL_SUCCESS)
{
	if(int_result==APL_FAILURE)
	{
		*int_p_result=APL_FAILURE;
		APL_GOBACK_SUCCESS
	}
}
else
	APL_GOBACK_FAIL
	
if (strcmp(l_mt_instrument_struct_h.h_instr_type,APL_INSTRU_SHARE))
{
	*int_p_result = APL_FAILURE;
	CO_InsertErr(l_debug_info_ptr,
						ERR_RES_INSTR_INVALID,
						l_ca_cartsproc_struct_h_ptr->h_instr_parent,
						APL_NULL_STRING,
						APL_NULL_STRING,
						__LINE__,
						__FILE__);	
   		
	APL_GOBACK_SUCCESS
}
if(CA_Chk_RightsDate(l_ca_cartsproc_struct_h_ptr,&int_result,*l_debug_info_ptr)==APL_SUCCESS) //AIX -Warning Removal
{
	if(int_result==APL_FAILURE) 
	{
		*int_p_result=APL_FAILURE;
		APL_GOBACK_SUCCESS
	}
} 
else
	APL_GOBACK_FAIL 


if(!strcmp(h_mode,APL_FUNC_MODIFY)) 
{
	if(CA_Mod_ChgRecord(l_ca_cartsproc_struct_h_ptr,
					&int_result,
					l_debug_info_ptr,
					p_intl_env_data_struct_h)==APL_FAILURE) 
		{
		APL_GOBACK_FAIL
		}
		else 
		{
			*int_p_result=int_result;
			APL_GOBACK_SUCCESS;
		}
}

if(!strcmp(h_mode,APL_FUNC_INPUT)) 
{
	if(CA_Mod_NewRecord(l_ca_cartsproc_struct_h_ptr,
					&int_result,
					l_debug_info_ptr,
					p_intl_env_data_struct_h)==APL_FAILURE) 
		{
		APL_GOBACK_FAIL
		} 
		else
		{
			*int_p_result=int_result;
			APL_GOBACK_SUCCESS;
		}
}

RETURN_SUCCESS:
{
	return APL_SUCCESS;
}
RETURN_FAILURE:
{
	return APL_FAILURE;
}
}
static int CA_Rtv_GetAlldetails(CA_RHTS_SUTH_STRUCT_H *p_ca_rhts_suth_struct_h,
								CA_CARTSPROC_STRUCT_H *l_ca_cartsproc_struct_h_ptr,
								int *int_p_result,
								DEBUG_INFO_STRUCT_H **l_debug_info_ptr,
								INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h)
{
char chr_temp_access_stamp[APL_DATE_LEN];
CA_CARTSPROC_STRUCT_I l_ca_cartsproc_struct_i;
CA_CARTSPROC_STRUCT_I *l_ca_cartsproc_struct_i_ptr;
struct sqlca sqlca;
#ifdef APL_THREADS
APL_SET_CONTEXT
EXEC SQL CONTEXT USE :my_ctx_local;
#endif
l_ca_cartsproc_struct_i_ptr=&l_ca_cartsproc_struct_i;
strcpy(chr_temp_access_stamp,p_ca_rhts_suth_struct_h->h_access_stamp);
EXEC SQL SELECT * INTO :l_ca_cartsproc_struct_h_ptr :l_ca_cartsproc_struct_i_ptr
	FROM CARTSPROC 
	WHERE instr_code=:p_ca_rhts_suth_struct_h->h_instr_code
	AND   CA_EVENT=:p_ca_rhts_suth_struct_h->h_ca_event
	AND   client=:p_ca_rhts_suth_struct_h->h_dl_client
	AND   evnt_indnt=:p_ca_rhts_suth_struct_h->h_evt_nbr
	AND   declare_dt=:p_ca_rhts_suth_struct_h->h_decl_date;
	IS_ANY_ORA_ERROR
	if(APL_ZERO_RESULT_SET) 
	{
		if(CO_InsertErr(l_debug_info_ptr,
							ERR_REC_NOTFND,
							p_ca_rhts_suth_struct_h->h_instr_code,
							p_ca_rhts_suth_struct_h->h_dl_client,
							l_ca_cartsproc_struct_h_ptr->h_ca_event,
							__LINE__,
							__FILE__)==APL_FAILURE)
			APL_GOBACK_FAIL
		*int_p_result=APL_FAILURE;
		APL_GOBACK_SUCCESS
	}
*int_p_result=APL_SUCCESS;
if(strcmp(p_intlenv_data_struct_h->usr,l_ca_cartsproc_struct_h_ptr->h_maker))
	strcpy(l_ca_cartsproc_struct_h_ptr->h_checker,p_intlenv_data_struct_h->usr);
else
{
		if(CO_InsertErr(l_debug_info_ptr,
							ERR_MAKER_CHECKER_SAME,
							p_ca_rhts_suth_struct_h->h_instr_code,
							p_ca_rhts_suth_struct_h->h_dl_client,
							l_ca_cartsproc_struct_h_ptr->h_ca_event,
							__LINE__,
							__FILE__)==APL_FAILURE)
			APL_GOBACK_FAIL
	 APL_GOBACK_SUCCESS
}

if(strlen(p_ca_rhts_suth_struct_h->h_checker_dt)==0) {
	if(CO_RtvSysDt(l_ca_cartsproc_struct_h_ptr->h_checker_dt,
							  l_debug_info_ptr)==APL_FAILURE)
		APL_GOBACK_FAIL
} else {
	strcpy(l_ca_cartsproc_struct_h_ptr->h_checker_dt,p_ca_rhts_suth_struct_h->h_checker_dt);
	}
if(strcmp(chr_temp_access_stamp,l_ca_cartsproc_struct_h_ptr->h_access_stamp)) {
	*int_p_result=APL_FAILURE;
		if(CO_InsertErr(l_debug_info_ptr,
							ERR_ACCESSSTAMP_CHGD,
							p_ca_rhts_suth_struct_h->h_instr_code,
							p_ca_rhts_suth_struct_h->h_dl_client,
							l_ca_cartsproc_struct_h_ptr->h_ca_event,
							__LINE__,
							__FILE__)==APL_FAILURE)
			APL_GOBACK_FAIL
	 APL_GOBACK_SUCCESS
	}
RETURN_SUCCESS:
{
	return APL_SUCCESS;
}
RETURN_FAILURE:
{
	return APL_FAILURE;
}
}

int CA_Proc_RightsAuth_B(CA_RHTS_SUTH_STRUCT_H *p_ca_rhts_suth_struct_h,
						 int 				  *int_p_result,
						 DEBUG_INFO_STRUCT_H    **l_debug_info_ptr,
						 INTL_ENV_DATA_STRUCT_H  *p_intl_env_data_struct_h) 
{
struct sqlca sqlca;
CA_CARTSPROC_STRUCT_H l_ca_cartsproc_struct_h;
MT_CLIENT_STRUCT_H l_mt_client_struct_h;
MT_INSTRUMENT_STRUCT_H l_mt_instrument_struct_h;
int int_result;
char *h_mode;
CA_CARTSPROC_STRUCT_H *l_ca_cartsproc_struct_h_ptr;
#ifdef APL_THREADS
APL_SET_CONTEXT
EXEC SQL CONTEXT USE :my_ctx_local;
#endif
l_ca_cartsproc_struct_h_ptr=&l_ca_cartsproc_struct_h;
h_mode=p_intl_env_data_struct_h->h_mode;
EXEC SQL VAR p_ca_rhts_suth_struct_h->h_instr_code IS STRING;
EXEC SQL VAR p_ca_rhts_suth_struct_h->h_dl_client IS STRING;
EXEC SQL VAR p_ca_rhts_suth_struct_h->h_ca_event IS STRING;
EXEC SQL VAR p_ca_rhts_suth_struct_h->h_decl_date IS STRING;

if(CA_Chk_RightsAuthData(p_ca_rhts_suth_struct_h,
					p_intl_env_data_struct_h,
					l_debug_info_ptr)==APL_FAILURE)
					APL_GOBACK_FAIL

if(CA_Rtv_GetAlldetails(p_ca_rhts_suth_struct_h,
					 l_ca_cartsproc_struct_h_ptr,
					 &int_result,
					 l_debug_info_ptr,
					 p_intl_env_data_struct_h)==APL_FAILURE)
					 APL_GOBACK_FAIL
if(int_result==APL_FAILURE){
	*int_p_result=APL_FAILURE;
	APL_GOBACK_SUCCESS;
	}
printf("\n Entered CA_Proc_RightsAuth_B  ..");

if(!strcmp(h_mode,APL_FUNC_DELETE)) 
{
	if(CA_Mod_DelRecord(l_ca_cartsproc_struct_h_ptr,
					&int_result,
					l_debug_info_ptr,
					p_intl_env_data_struct_h)==APL_FAILURE) 
		{
		APL_GOBACK_FAIL
		}
		else 
		{
			*int_p_result=int_result;
			APL_GOBACK_SUCCESS;
		}
}

if(CA_Chk_RightsQty(l_ca_cartsproc_struct_h_ptr,&int_result,l_debug_info_ptr)==APL_FAILURE)
{
	*int_p_result=APL_FAILURE;
	APL_GOBACK_SUCCESS
}

printf("\n calling CA_ChkAcc  ..");
if(CA_ChkAcc(l_ca_cartsproc_struct_h_ptr->h_dl_client,
					 &l_mt_client_struct_h,
					 &int_result,
					 l_debug_info_ptr)==APL_SUCCESS)
{
	if(int_result==APL_FAILURE) 
	{
		*int_p_result=APL_FAILURE;
		APL_GOBACK_SUCCESS
	}
}
else
	APL_GOBACK_FAIL 



printf("\n calling CA_ChkInstrument  ..");
if(CA_ChkInstrument(l_ca_cartsproc_struct_h_ptr->h_instr_code,
				&l_mt_instrument_struct_h,
				&int_result,
				l_debug_info_ptr)==APL_SUCCESS)
{
	if(int_result==APL_FAILURE) 
	{
		*int_p_result=APL_FAILURE;
		APL_GOBACK_SUCCESS
	}
}
else
	APL_GOBACK_FAIL 

if (	!( (	!strcmp(l_mt_instrument_struct_h.h_instr_type,APL_INSTRU_RIGHTS) ||
				!strcmp(l_mt_instrument_struct_h.h_instr_type,APL_INSTRU_SHARE)) &&
			(!strcmp(l_mt_instrument_struct_h.h_mother_sec_ind,APL_NO_IND) )
		)
	)
{
	*int_p_result = APL_FAILURE;
	CO_InsertErr(l_debug_info_ptr,
						ERR_RES_INSTR_INVALID,
						l_ca_cartsproc_struct_h_ptr->h_instr_code,
						APL_NULL_STRING,
						APL_NULL_STRING,
						__LINE__,
						__FILE__);	
   		
	APL_GOBACK_SUCCESS
}

printf("\n calling CA_ChkInstrument again ..");
if(CA_ChkInstrument(l_ca_cartsproc_struct_h_ptr->h_instr_parent,
				&l_mt_instrument_struct_h,
			   &int_result,
				l_debug_info_ptr)==APL_SUCCESS)
{
	if(int_result==APL_FAILURE)
	{
		*int_p_result=APL_FAILURE;
		APL_GOBACK_SUCCESS
	}
}
else
	APL_GOBACK_FAIL
	
if (strcmp(l_mt_instrument_struct_h.h_instr_type,APL_INSTRU_SHARE))
{
	*int_p_result = APL_FAILURE;
	CO_InsertErr(l_debug_info_ptr,
						ERR_RES_INSTR_INVALID,
						l_ca_cartsproc_struct_h_ptr->h_instr_parent,
						APL_NULL_STRING,
						APL_NULL_STRING,
						__LINE__,
						__FILE__);	
   		
	APL_GOBACK_SUCCESS
}

printf("\n calling CA_Chk_RightsDate ..");
if(CA_Chk_RightsDate(l_ca_cartsproc_struct_h_ptr,&int_result,*l_debug_info_ptr)==APL_SUCCESS) //AIX -Warning Removal
{
	if(int_result==APL_FAILURE) 
	{
		*int_p_result=APL_FAILURE;
		APL_GOBACK_SUCCESS
	}
} 
else
	APL_GOBACK_FAIL 



if(!strcmp(h_mode,APL_FUNC_AUTHORISE)) 
{
printf("\n calling CA_Proc_RightsAuth_A  ..");
	if(CA_Proc_RightsAuth_A(l_ca_cartsproc_struct_h_ptr,
					&int_result,
					l_debug_info_ptr,
					p_intl_env_data_struct_h)==APL_FAILURE) 
		{
		APL_GOBACK_FAIL
		} 
		else
		{
			*int_p_result=int_result;
			APL_GOBACK_SUCCESS;
		}
}

RETURN_SUCCESS:
{
	return APL_SUCCESS;
}
RETURN_FAILURE:
{
	return APL_FAILURE;
}
}
