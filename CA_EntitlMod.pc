/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         :      Corporate Actions
 *
 * File Name           :      CA_EntitlMod.pc
 *
 * Description         :      Contains Functions Related to Entitlement Maintenance
 *
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author           Description		RFS No.
 * ---------   --------  ---------------  ------------------	---------
 * 22/02/2006   1.4	   Smita Bhat   Changes for new Cols	HDFCCA_001,HDFCCA_002,HDFCCA_017
 *                                      Changed Variables as per Coding Stds
 *************************************************************************/

#include "CR_Common.h"
#include "CA_Common.h"
#include "CO_Commdef.h"

EXEC SQL INCLUDE SQLCA.H;

/*Smita - Entitlement Maintenance - HDFCCA_001,HDFCCA_002,HDFCCA_017*/
#include <strings.h>
char *strtok_r(char *s1, const char *s2, char **lasts);
/*Smita - Entitlement Maintenance - HDFCCA_001,HDFCCA_002,HDFCCA_017*/

#define	GET_ACCESS_STAMP_APL_DATE \
if (  CO_RtvSysDtTime(pro_sys_date,l_debug_info_ptr) == APL_FAILURE )\
   {\
     APL_GOBACK_FAIL\
    }\
printf("Access .................. |%s| .......BIJU\n",pro_sys_date);\
int_pos = (char *)NULL;\
strcpy(p_ca_caentitlement_struct_h->h_access_stamp,pro_sys_date);\
strcpy(pro_sys_date,strtok_r(pro_sys_date," ",&int_pos));\
strcat(pro_sys_date,APL_NULL_TIME);

#define	SET_MAKER_MAKERDT \
strcpy(p_ca_caentitlement_struct_h->h_maker,p_intlenv_data_struct_h->usr);\
strcpy(p_ca_caentitlement_struct_h->h_maker_dt,pro_sys_date);

#define	SET_CHECKER_CHECKERDT \
l_ca_caentitlement_struct_i->i_checker		=	-1;\
l_ca_caentitlement_struct_i->i_checker_dt	=	-1;

#define  VAL_ACCESS_STAMP \
	printf(" Access stams |%s| |%s|\n",p_ca_caentitlement_struct_h->h_access_stamp,l_ca_caentitlement_struct_h->h_access_stamp);\
if (	strcmp(	p_ca_caentitlement_struct_h->h_access_stamp,l_ca_caentitlement_struct_h->h_access_stamp)){\
	CO_InsertErr(l_debug_info_ptr,\
						ERR_ACCESSSTAMP_CHGD,\
						APL_NULL_STRING,\
						APL_NULL_STRING,\
						APL_NULL_STRING,\
						__LINE__,\
						__FILE__\
						);\
	APL_GOBACK_FAIL\
}\

#define ENT_IND 1
#define IMG_IND 0
#define LOG_BUFFER_LEN 70



static	int 	CA_EntitlAdd(	CA_CAENTITLEMENT_STRUCT_H    *p_ca_caentitlement_struct_h,
				                  INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
	      				         DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
                 				);

static	int 	CA_EntitlMod( CA_CAENTITLEMENT_STRUCT_H    *p_ca_caentitlement_struct_h,
				                  INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
  	      				         DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
                 				);

static	int 	CA_EntitlFreezUnfreez( CA_CAENTITLEMENT_STRUCT_H    *p_ca_caentitlement_struct_h,
					                INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
  	      				          DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
  	              			  	);

static	int 	CA_EntitlReverse(CA_CAENTITLEMENT_STRUCT_H    *p_ca_caentitlement_struct_h,
				           	      INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
  	      				         DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
                  				);

static	int 	CA_EntitlDel(  CA_CAENTITLEMENT_STRUCT_H    *p_ca_caentitlement_struct_h,
				         	       INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
  	      				   	    DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
                  			);

			int 	CA_CheckEntl( char						*chr_p_ca_id,
									char						*chr_p_client, 
								   CA_CHK_DET_STRUCT_H		*p_ca_chk_det_struct_h,
				     	      	INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
									DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
                  		);

static	int	CA_ChkIncomeDue( CA_CAENTITLEMENT_STRUCT_H   *p_ca_caentitlement_struct_h,
									 CA_CAENTITLEMENT_STRUCT_H   *p_entitlimg_struct_h,
									 DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
                  	   	);

static	int	CA_MandDataChk( CA_CAENTITLEMENT_STRUCT_H    *p_ca_caentitlement_struct_h,
 				                  INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
            			         DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
                 				);

			int	CA_NewEntitl(CA_CAENTITLEMENT_STRUCT_H	*p_ca_caentitlement_struct_h,
											CA_CAENTITLEMENT_STRUCT_I	*p_ca_caentitlement_struct_i,
											DEBUG_INFO_STRUCT_H		**l_debug_info_ptr
											);

static	int	CA_NewEntitlImage(CA_CAENTITLEMENT_STRUCT_H	*p_ca_caentitlement_struct_h,
											CA_CAENTITLEMENT_STRUCT_I	*p_ca_caentitlement_struct_i,
											DEBUG_INFO_STRUCT_H		**l_debug_info_ptr
											);

static	int	CA_Mod_Status(CA_CAENTITLEMENT_STRUCT_H	*p_ca_caentitlement_struct_h,
								char					*p_ora_rowid,
								DEBUG_INFO_STRUCT_H		**l_debug_info_ptr
								);

int	CA_RtvEntitl(char					*chr_p_ca_id,
								char					*chr_p_client,
								CA_CAENTITLEMENT_STRUCT_H	*p_ca_caentitlement_struct_h,
								CA_CAENTITLEMENT_STRUCT_I	*p_ca_caentitlement_struct_i,
								char					*p_ora_rowid,
								short					*p_img_ind,
								DEBUG_INFO_STRUCT_H		**l_debug_info_ptr
								);

int CA_Mod_Entitl( CA_CAENTITLEMENT_STRUCT_H    *p_ca_caentitlement_struct_h,
                     INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
                     DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
                  );

int CA_ChkUURstPymt( char 			*chr_p_ca_id,
						 char				*chr_p_client,
						 int			   *int_p_count,
						 int			   *p_gp_count,
						 DEBUG_INFO_STRUCT_H  **l_debug_info_ptr
						);

extern int Process_AttCorpAdj( char *,char *,char *,char *,int , double , double *, DEBUG_INFO_STRUCT_H  **);

int CA_Mod_Entitl( CA_CAENTITLEMENT_STRUCT_H    *p_ca_caentitlement_struct_h,
                     INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
                     DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
                  )
{
	struct sqlca sqlca;
	unsigned int int_gp_count=0;
	char chr_sys_sts_auth[APL_STATUS_LEN] ={APL_STS_AUTH};
	
   int int_h_no_rec=0;
   char chr_h_redenom_type[EVT_CLASS_] = {EVT_REDOM};

 	EXEC SQL VAR chr_h_redenom_type     is string;

	#ifdef APL_THREADS
	APL_SET_CONTEXT
	EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE,"Entered A_DbUpdEntitlFn",NULL,p_intlenv_data_struct_h);
		}

   EXEC SQL SELECT NVL(count(*),0)
   INTO :int_h_no_rec
   FROM CAEVENT
   WHERE corp_id=:p_ca_caentitlement_struct_h->h_corp_id
   AND   CA_EVENT=:chr_h_redenom_type ;

   if ( ( int_h_no_rec != 0) )
      {
            CO_InsertErr(        	l_debug_info_ptr,
                                   	ERR_REDN_EVNTENTITLE_MNT_NOTALLOWED,
                                   	p_intlenv_data_struct_h->h_mode,
                                   	APL_NULL_STRING,
                                   	APL_NULL_STRING,
                                    __LINE__,
                                    __FILE__
                                    );
        APL_GOBACK_FAIL
      }

	if ( strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_REVERSE) )
	{
		EXEC SQL SELECT NVL(count(*),0)
		INTO :int_gp_count
		FROM CAGLPYMT
		WHERE corp_id=:p_ca_caentitlement_struct_h->h_corp_id
		AND	stat_pymt <> :chr_sys_sts_auth
		AND	rownum < 2	;

		IS_ANY_ORA_ERROR

		if ( int_gp_count > 0 )
		{
			INSERT_GLOB_PYMT_WARNING_ENT
		}

		if ( CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS )
		{
			APL_GOBACK_FAIL
		}
	}
										
	if (	(	!strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_INPUT)	)	)
		{
			APL_IF_DEBUG	
			{
				CO_ProcMonitor(APL_OUT_FILE,"Mode is INPUT ",NULL,p_intlenv_data_struct_h);
			}

			if (	CA_EntitlAdd(	p_ca_caentitlement_struct_h,
										p_intlenv_data_struct_h,
										l_debug_info_ptr
										) == APL_FAILURE
				)
				{
					APL_GOBACK_FAIL
				}
			else
				{
					APL_GOBACK_SUCCESS
				}
		}
		
	if (	(	!strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_MODIFY)	)	)
		{
			APL_IF_DEBUG
			{	
				CO_ProcMonitor(APL_OUT_FILE,"Mode is MODIFY",NULL,p_intlenv_data_struct_h);
			}	
			if (	CA_EntitlMod(	p_ca_caentitlement_struct_h,
											p_intlenv_data_struct_h,
											l_debug_info_ptr
										) == APL_FAILURE)
				{
					APL_GOBACK_FAIL
				}
			else
				{
					APL_GOBACK_SUCCESS
				}
		}
		
	if (	
			!strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_FREEZE)		
			||
	 		!strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_UNFREEZE)	
		)
		{
			APL_IF_DEBUG	
			{		
				if	(	!strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_FREEZE)	)
				CO_ProcMonitor(APL_OUT_FILE,"Mode is FREEZE ",NULL,p_intlenv_data_struct_h);
				else
				CO_ProcMonitor(APL_OUT_FILE,"Mode is UNFREEZE ",NULL,p_intlenv_data_struct_h);
			}	
			if (	CA_EntitlFreezUnfreez(	p_ca_caentitlement_struct_h,
											p_intlenv_data_struct_h,
											l_debug_info_ptr
										) == APL_FAILURE)
				{
					APL_GOBACK_FAIL
				}
			else
				{
					APL_GOBACK_SUCCESS
				}
		}

	if (	(	!strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_REVERSE)	)	)
		{
			APL_IF_DEBUG	
			{	
				CO_ProcMonitor(APL_OUT_FILE,"Mode is REVERSE",NULL,p_intlenv_data_struct_h);
			}	
			if (	CA_EntitlReverse(	p_ca_caentitlement_struct_h,
											p_intlenv_data_struct_h,
											l_debug_info_ptr
										) == APL_FAILURE)
				{
					APL_GOBACK_FAIL
				}
			else
				{
					APL_GOBACK_SUCCESS
				}
		}

	if (	(	!strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_DELETE)	)	)
		{
			APL_IF_DEBUG	
			{
				CO_ProcMonitor(APL_OUT_FILE,"Mode is DELETE",NULL,p_intlenv_data_struct_h);
			}	
			if (	CA_EntitlDel(	p_ca_caentitlement_struct_h,
											p_intlenv_data_struct_h,
											l_debug_info_ptr
										) == APL_FAILURE)
				{
					APL_GOBACK_FAIL
				}
			else
				{
					APL_GOBACK_SUCCESS
				}
		}
		
		APL_GOBACK_SUCCESS
		RETURN_SUCCESS	:
		{
			APL_IF_DEBUG
			{
				CO_ProcMonitor(APL_OUT_FILE,"Exiting A_DbUpdEntitl successfully",NULL,p_intlenv_data_struct_h);
			}	
			return (APL_SUCCESS);
		}

		RETURN_FAILURE	:
		{
			APL_IF_DEBUG
			{
				CO_ProcMonitor(APL_OUT_FILE,"Exiting A_DbUpdEntitl unsuccessfully",NULL,p_intlenv_data_struct_h);
			}	
			return (APL_FAILURE);
		}
}

static	int CA_EntitlAdd(	CA_CAENTITLEMENT_STRUCT_H 	*p_ca_caentitlement_struct_h,
   									INTL_ENV_DATA_STRUCT_H	*p_intlenv_data_struct_h,
	   					   		DEBUG_INFO_STRUCT_H 			**l_debug_info_ptr
									)
{
	//struct	sqlca	sqlca; //AIX -Warning Removal
	CA_CAENTITLEMENT_STRUCT_I	*l_ca_caentitlement_struct_i		=	NULL;
	CA_CHK_DET_STRUCT_H    *l_ca_chk_det_struct_h   =  NULL;
	char		pro_sys_date[APL_DATE_LEN]=APL_NULL_STRING;
	char		*int_pos;

	#ifdef APL_THREADS
	APL_SET_CONTEXT
	EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entering S_EntitlInput",NULL,p_intlenv_data_struct_h);
	}	

	if	 (	CA_MandDataChk(	p_ca_caentitlement_struct_h,
								p_intlenv_data_struct_h,
								l_debug_info_ptr
								) == APL_FAILURE
		 )
			{
				APL_GOBACK_FAIL
			}

	l_ca_chk_det_struct_h=(CA_CHK_DET_STRUCT_H *)calloc(	1,sizeof(CA_CHK_DET_STRUCT_H)	);
	APL_MALLOC_FAIL(l_ca_chk_det_struct_h) 
	
	(l_ca_caentitlement_struct_i) = (CA_CAENTITLEMENT_STRUCT_I*)calloc(1,sizeof(CA_CAENTITLEMENT_STRUCT_I));	
	APL_MALLOC_FAIL(l_ca_caentitlement_struct_i) 

	GET_ACCESS_STAMP_APL_DATE 
	
	if ( CA_RndEntitl(p_ca_caentitlement_struct_h,
						  l_debug_info_ptr
						 ) == APL_FAILURE
		)
	{
		APL_GOBACK_FAIL
	}
	
	if (	CA_CheckEntl(  p_ca_caentitlement_struct_h->h_corp_id,
							 p_ca_caentitlement_struct_h->h_dl_client,
 	 		   		    l_ca_chk_det_struct_h, 
 	 		   		    p_intlenv_data_struct_h, 
						 	 l_debug_info_ptr
         		   	 )	==	APL_FAILURE 
		)
	{
		APL_GOBACK_FAIL
	}
	
	SET_MAKER_MAKERDT 
	SET_CHECKER_CHECKERDT

	strcpy(p_ca_caentitlement_struct_h->h_stat_date,pro_sys_date);
	strcpy(p_ca_caentitlement_struct_h->h_entitl_stat,APL_STATUS_UNAUTH);
	
	p_ca_caentitlement_struct_h->h_amount_recd 	= 0.0;
	p_ca_caentitlement_struct_h->h_quantity_recd 	= 0.0;
	l_ca_caentitlement_struct_i->i_nrepdate2		= -1;
	l_ca_caentitlement_struct_i->i_nrepdate3		= -1;
	l_ca_caentitlement_struct_i->i_sent550date	= -1;

	if	(	CA_NewEntitl(	p_ca_caentitlement_struct_h,
								l_ca_caentitlement_struct_i,
								l_debug_info_ptr
							)	==	APL_FAILURE
		)
		{
				APL_GOBACK_FAIL
		}
	
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS	:
		{
			APL_FREE(l_ca_chk_det_struct_h);
			APL_FREE(l_ca_caentitlement_struct_i);
			APL_IF_DEBUG
			{	
				CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_EntitlAdd successfully",NULL,p_intlenv_data_struct_h);
			}	
			return (APL_SUCCESS);
		}
	RETURN_FAILURE	:
		{
			APL_FREE(l_ca_chk_det_struct_h);
			APL_FREE(l_ca_caentitlement_struct_i);
			APL_IF_DEBUG
			{
				CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_EntitlAdd unsuccessfully",NULL,p_intlenv_data_struct_h);
			}	
			return (APL_FAILURE);
		}
}


		
static	int 	CA_EntitlMod( CA_CAENTITLEMENT_STRUCT_H    *p_ca_caentitlement_struct_h,
				                  INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
  	      				         DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
                 				)
{
	//struct	sqlca	sqlca; //AIX -Warning Removal
	CA_CAENTITLEMENT_STRUCT_I	*l_ca_caentitlement_struct_i			=	NULL;
	CA_CAENTITLEMENT_STRUCT_H	*l_ca_caentitlement_struct_h		=	NULL;
	CA_CAENTITLEMENT_STRUCT_I	*l_ca_caentitlementimg_struct_i		=	NULL;
	CA_CHK_DET_STRUCT_H    *l_ca_chk_det_struct_h   =  NULL;
	char						*int_pos;
	char					 	rowid[APL_ROWID_LEN] = APL_NULL_STRING;
	char						pro_sys_date[APL_DATE_LEN] = APL_NULL_STRING;
	short					   img_ind=ENT_IND;
	
	#ifdef APL_THREADS
	APL_SET_CONTEXT
	EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entering S_EntitlModify",NULL,p_intlenv_data_struct_h);
	}

	if	 (	CA_MandDataChk(	p_ca_caentitlement_struct_h,
								p_intlenv_data_struct_h,
								l_debug_info_ptr
							) == APL_FAILURE
		 )
	APL_GOBACK_FAIL
		
	l_ca_chk_det_struct_h=(CA_CHK_DET_STRUCT_H *)calloc(	1,sizeof(CA_CHK_DET_STRUCT_H)	);
	APL_MALLOC_FAIL(l_ca_chk_det_struct_h) 

	(l_ca_caentitlement_struct_h) = (CA_CAENTITLEMENT_STRUCT_H*)calloc(2,sizeof(CA_CAENTITLEMENT_STRUCT_H));	
	APL_MALLOC_FAIL(l_ca_caentitlement_struct_h) 
		
	(l_ca_caentitlementimg_struct_i) = (CA_CAENTITLEMENT_STRUCT_I*)calloc(2,sizeof(CA_CAENTITLEMENT_STRUCT_I));	
	APL_MALLOC_FAIL(l_ca_caentitlementimg_struct_i) 
	
	(l_ca_caentitlement_struct_i) = (CA_CAENTITLEMENT_STRUCT_I*)calloc(2,sizeof(CA_CAENTITLEMENT_STRUCT_I));	
	APL_MALLOC_FAIL(l_ca_caentitlement_struct_i) 

	img_ind=ENT_IND;
   if	(	CA_RtvEntitl(		p_ca_caentitlement_struct_h->h_corp_id,
   								p_ca_caentitlement_struct_h->h_dl_client,
									l_ca_caentitlement_struct_h,
									l_ca_caentitlementimg_struct_i,
									rowid,
									&img_ind,
									l_debug_info_ptr
							)		==	APL_FAILURE
		)
	{
		APL_GOBACK_FAIL
	}
   APL_IF_DEBUG
   {
      printf("Access Stamp  From Table = |%s|\n",p_ca_caentitlement_struct_h->h_access_stamp);
      printf("Access Stamp from Structure = |%s|\n",l_ca_caentitlement_struct_h->h_access_stamp);
   }	
	VAL_ACCESS_STAMP 
	
	if	(	(strcmp(l_ca_caentitlement_struct_h->h_entitl_stat,STATUS_CHNG_RDY_PYMT)) &&	 
			(strcmp(l_ca_caentitlement_struct_h->h_entitl_stat,STATUS_RDY_PYMT)) &&	 
			(strcmp(l_ca_caentitlement_struct_h->h_entitl_stat,STATUS_CHNG_PART_PAID)	)	&& 
			(strcmp(l_ca_caentitlement_struct_h->h_entitl_stat,STATUS_PART_PAID)	)	&& 
			(strcmp(l_ca_caentitlement_struct_h->h_entitl_stat,STATUS_CHNG_PAID_CLSD)	)	&& 
			(strcmp(l_ca_caentitlement_struct_h->h_entitl_stat,STATUS_MSG_PAID_CLSD)	)	&& 
			(strcmp(l_ca_caentitlement_struct_h->h_entitl_stat,APL_STATUS_UNAUTH)	)
		)
		{
			CO_InsertErr(l_debug_info_ptr,
	 						   ERR_ENTITLESTS_INVALIDCHG,	
								APL_NULL_STRING,
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__
								);
			APL_GOBACK_FAIL
		}
	
  	GET_ACCESS_STAMP_APL_DATE
	
	if ( CA_RndEntitl	(	p_ca_caentitlement_struct_h,
						  		l_debug_info_ptr
						 	) == APL_FAILURE
		)
	{
		APL_GOBACK_FAIL
	}
	
	if	(	CA_CheckEntl(		p_ca_caentitlement_struct_h->h_corp_id,
									p_ca_caentitlement_struct_h->h_dl_client,
 	 		   		    		l_ca_chk_det_struct_h, 
									p_intlenv_data_struct_h,
									l_debug_info_ptr
							)		==	APL_FAILURE
		)
	{
		APL_GOBACK_FAIL
	}

	if	(	CA_ChkIncomeDue( p_ca_caentitlement_struct_h,
							 l_ca_caentitlement_struct_h,
		    				 l_debug_info_ptr
                   	)	==	APL_FAILURE
		)
	{
		APL_GOBACK_FAIL
	}
		
	if	(	!strcmp(l_ca_caentitlement_struct_h->h_entitl_stat,STATUS_RDY_PYMT) ||
			!strcmp(l_ca_caentitlement_struct_h->h_entitl_stat,STATUS_PART_PAID) ||
			!strcmp(l_ca_caentitlement_struct_h->h_entitl_stat,STATUS_MSG_PAID_CLSD) 
		)
	{
		if (	CA_NewEntitlImage(l_ca_caentitlement_struct_h,
										l_ca_caentitlementimg_struct_i,
										l_debug_info_ptr
										)	==	APL_FAILURE
			)
		{
			APL_GOBACK_FAIL
		}
		strcpy(p_ca_caentitlement_struct_h->h_stat_date,pro_sys_date);
	}
	else	
	{
		strcpy(p_ca_caentitlement_struct_h->h_entitl_stat,l_ca_caentitlement_struct_h->h_entitl_stat);
		strcpy(p_ca_caentitlement_struct_h->h_stat_date,l_ca_caentitlement_struct_h->h_stat_date);
	}	
	
	if	(	!strcmp(l_ca_caentitlement_struct_h->h_entitl_stat,STATUS_RDY_PYMT) 
		)
	{
		strcpy(p_ca_caentitlement_struct_h->h_entitl_stat,STATUS_CHNG_RDY_PYMT);
	}	
	
	else if	(	!strcmp(l_ca_caentitlement_struct_h->h_entitl_stat,STATUS_PART_PAID) 
				)
	{
		strcpy(p_ca_caentitlement_struct_h->h_entitl_stat,STATUS_CHNG_PART_PAID);
	}	
	
	else	if	(	!strcmp(l_ca_caentitlement_struct_h->h_entitl_stat,STATUS_MSG_PAID_CLSD) 
				)
	{
		strcpy(p_ca_caentitlement_struct_h->h_entitl_stat,STATUS_CHNG_PAID_CLSD);
	}	
	
	SET_MAKER_MAKERDT 
	SET_CHECKER_CHECKERDT
	
	strcpy(p_ca_caentitlement_struct_h->h_sent550date,l_ca_caentitlement_struct_h->h_sent550date);
	//if ( l_ca_caentitlement_struct_i->i_sent550date = -1 ) 
	if ( l_ca_caentitlement_struct_i->i_sent550date == -1 ) // AIX - Warnings
		l_ca_caentitlement_struct_i->i_sent550date = -1 ;		
	
	if		(	CA_Mod_EntitlRec(p_ca_caentitlement_struct_h,
										l_ca_caentitlement_struct_i,
										rowid,
										l_debug_info_ptr
										) == APL_FAILURE
			)
	{
		APL_GOBACK_FAIL
	}	
	
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS	:
		{
			APL_FREE(l_ca_chk_det_struct_h);
			APL_FREE(l_ca_caentitlement_struct_i);
			APL_FREE(l_ca_caentitlement_struct_h);
			APL_FREE(l_ca_caentitlementimg_struct_i);
			
			APL_IF_DEBUG
			{
				CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_EntitlMod successfully",NULL,p_intlenv_data_struct_h);
			}	
			return (APL_SUCCESS);
		}
	RETURN_FAILURE	:
		{
			APL_FREE(l_ca_chk_det_struct_h);
			APL_FREE(l_ca_caentitlement_struct_i);
			APL_FREE(l_ca_caentitlement_struct_h);
			APL_FREE(l_ca_caentitlementimg_struct_i);
			
			APL_IF_DEBUG
			{
				CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_EntitlMod unsuccessfully",NULL,p_intlenv_data_struct_h);
			}	
			return (APL_FAILURE);
		}

}



static	int 	CA_EntitlFreezUnfreez(  CA_CAENTITLEMENT_STRUCT_H    	*p_ca_caentitlement_struct_h,
   				                  		INTL_ENV_DATA_STRUCT_H   		*p_intlenv_data_struct_h,
  	         				         		DEBUG_INFO_STRUCT_H         	**l_debug_info_ptr
                  				)
{
	
	//struct	sqlca	sqlca; //AIX -Warning Removal
	CA_CAENTITLEMENT_STRUCT_H	*l_ca_caentitlement_struct_h	=	NULL;
	CA_CAENTITLEMENT_STRUCT_I	*l_ca_caentitlementimg_struct_i	=	NULL;
	CA_CHK_DET_STRUCT_H    *l_ca_chk_det_struct_h   =  NULL;
	char						*int_pos;
	char					 	rowid[APL_ROWID_LEN]=APL_NULL_STRING;
	char						pro_sys_date[APL_DATE_LEN] = APL_NULL_STRING;
	short					   img_ind=ENT_IND;
	
	#ifdef APL_THREADS
	APL_SET_CONTEXT
	EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered CA_EntitlFreezUnfreez function",NULL,p_intlenv_data_struct_h);
	}	
	
	if(	!strlen(p_ca_caentitlement_struct_h->h_access_stamp)	)
	{
		APL_DATA_MISSING("Access Stamp",APL_NULL_STRING,APL_NULL_STRING)	
	}
	
	if(	!strlen(p_ca_caentitlement_struct_h->h_corp_id)	)
	{	
		APL_DATA_MISSING("Corporate Action ID",APL_NULL_STRING,APL_NULL_STRING)	
	}
			
	if(	!strlen(p_ca_caentitlement_struct_h->h_dl_client)	)
	{	
		APL_DATA_MISSING("Account",APL_NULL_STRING,APL_NULL_STRING)	
	}

	if	(	 CO_ChkErr(*l_debug_info_ptr)	== APL_SUCCESS	)
			APL_GOBACK_FAIL
	
	l_ca_chk_det_struct_h=(CA_CHK_DET_STRUCT_H *)calloc(	1,sizeof(CA_CHK_DET_STRUCT_H)	);
	APL_MALLOC_FAIL(l_ca_chk_det_struct_h) 

	(l_ca_caentitlement_struct_h) = (CA_CAENTITLEMENT_STRUCT_H*)calloc(2,sizeof(CA_CAENTITLEMENT_STRUCT_H));	
	APL_MALLOC_FAIL(l_ca_caentitlement_struct_h) 
		
	(l_ca_caentitlementimg_struct_i) = (CA_CAENTITLEMENT_STRUCT_I*)calloc(2,sizeof(CA_CAENTITLEMENT_STRUCT_I));	
	APL_MALLOC_FAIL(l_ca_caentitlementimg_struct_i) 
	
	img_ind=ENT_IND;
   if	(	CA_RtvEntitl	(	p_ca_caentitlement_struct_h->h_corp_id,
   								p_ca_caentitlement_struct_h->h_dl_client,
									l_ca_caentitlement_struct_h,
									l_ca_caentitlementimg_struct_i,
									rowid,
									&img_ind,
									l_debug_info_ptr
								)	==	APL_FAILURE
		)
	{
		APL_GOBACK_FAIL
	}
   APL_IF_DEBUG
   {
      printf("Access Stamp  From Table = |%s|\n",p_ca_caentitlement_struct_h->h_access_stamp);
      printf("Access Stamp from Structure = |%s|\n",l_ca_caentitlement_struct_h->h_access_stamp);
   }	
	VAL_ACCESS_STAMP 
	
	if	(	!strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_FREEZE)	)
		{
			if	(	strcmp(l_ca_caentitlement_struct_h->h_entitl_stat,STATUS_RDY_PYMT)&&
						strcmp(l_ca_caentitlement_struct_h->h_entitl_stat,STATUS_PART_PAID)
				)
				{
						CO_InsertErr(l_debug_info_ptr,
											ERR_ENTITLESTS_INVALIDFRZ,
											APL_NULL_STRING,
											APL_NULL_STRING,
											APL_NULL_STRING,
											__LINE__,
											__FILE__
											);
						APL_GOBACK_FAIL
				}	
		}		

	if	(	!strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_UNFREEZE)	)
		{
			if	(	strcmp(l_ca_caentitlement_struct_h->h_entitl_stat,STATUS_FROZ_RP)	&&
					strcmp(l_ca_caentitlement_struct_h->h_entitl_stat,STATUS_FROZ_PP)	
				)
				{
						CO_InsertErr(l_debug_info_ptr,
											ERR_ENTITLESTS_INVALIDUNFRZ,
											APL_NULL_STRING,
											APL_NULL_STRING,
											APL_NULL_STRING,
											__LINE__,
											__FILE__
											);
						APL_GOBACK_FAIL
				}	
		}

  	GET_ACCESS_STAMP_APL_DATE
	
	if	(		CA_CheckEntl	(	p_ca_caentitlement_struct_h->h_corp_id,
									p_ca_caentitlement_struct_h->h_dl_client,
 	 		   		    		l_ca_chk_det_struct_h, 
									p_intlenv_data_struct_h,
									l_debug_info_ptr
							)	==	APL_FAILURE
		)
	{
		APL_GOBACK_FAIL
	}

	if (	CA_NewEntitlImage(l_ca_caentitlement_struct_h,
									l_ca_caentitlementimg_struct_i,
									l_debug_info_ptr
									)	==	APL_FAILURE
		)
		{
			APL_GOBACK_FAIL
		}
	
	strcpy(p_ca_caentitlement_struct_h->h_stat_date,pro_sys_date);
	
	if	(	!strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_FREEZE)	)
	{
		strcpy(p_ca_caentitlement_struct_h->h_entitl_stat,STATUS_FROZ_UAUTH_A);
	}
	else
	{
		strcpy(p_ca_caentitlement_struct_h->h_entitl_stat,STATUS_UNFRZ_UAUTH);
 	}
	
	SET_MAKER_MAKERDT 
	
	if	(	CA_Mod_Status(p_ca_caentitlement_struct_h,
						rowid,
						l_debug_info_ptr
						)	==	APL_FAILURE
		)
	{
		APL_GOBACK_FAIL
	}		
		
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS	:
	{
		APL_FREE(l_ca_chk_det_struct_h);
		APL_FREE(l_ca_caentitlement_struct_h);
		APL_FREE(l_ca_caentitlementimg_struct_i);
		APL_IF_DEBUG
		{	
			CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_EntitlFreezUnfreez successfully",NULL,p_intlenv_data_struct_h);	
		}	
		return (APL_SUCCESS);
	}
	RETURN_FAILURE	:
	{
		APL_FREE(l_ca_chk_det_struct_h);
		APL_FREE(l_ca_caentitlement_struct_h);
		APL_FREE(l_ca_caentitlementimg_struct_i);
		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_EntitlFreezUnfreez unsuccessfully",NULL,p_intlenv_data_struct_h);	
		}	
		return (APL_FAILURE);
		}
}



static	int 	CA_EntitlReverse(  CA_CAENTITLEMENT_STRUCT_H    *p_ca_caentitlement_struct_h,
					                  INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
  		      				         DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
                  				)
{
	//struct	sqlca	sqlca; //AIX -Warning Removal
	CA_CAENTITLEMENT_STRUCT_H	*l_ca_caentitlement_struct_h	=	NULL;
	CA_CAENTITLEMENT_STRUCT_I	*l_ca_caentitlementimg_struct_i	=	NULL;
	CA_CHK_DET_STRUCT_H    *l_ca_chk_det_struct_h   =  NULL;
	char		*int_pos;
	char	 	rowid[APL_ROWID_LEN] = APL_NULL_STRING;
	char		pro_sys_date[APL_DATE_LEN] = APL_NULL_STRING;
	int		count=0;
	int		int_gp_count=0;
	short    img_ind=ENT_IND;

	#ifdef APL_THREADS
	APL_SET_CONTEXT
	EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE," Entered CA_EntitlReverse function",NULL,p_intlenv_data_struct_h);
	}
	
	if(	!strlen(p_ca_caentitlement_struct_h->h_access_stamp)	)
				{
					APL_DATA_MISSING("Access Stamp",APL_NULL_STRING,APL_NULL_STRING)	
				}

	if(	!strlen(p_ca_caentitlement_struct_h->h_corp_id)	)
				{
					APL_DATA_MISSING("Corporate Action ID",APL_NULL_STRING,APL_NULL_STRING)	
				}
				
	if(	!strlen(p_ca_caentitlement_struct_h->h_dl_client)	)
				{	
					APL_DATA_MISSING("Account",APL_NULL_STRING,APL_NULL_STRING)	
				}

	if	(	 CO_ChkErr(*l_debug_info_ptr)	== APL_SUCCESS	)
			APL_GOBACK_FAIL
	
	
	l_ca_chk_det_struct_h=(CA_CHK_DET_STRUCT_H *)calloc(	1,sizeof(CA_CHK_DET_STRUCT_H)	);
	APL_MALLOC_FAIL(l_ca_chk_det_struct_h) 

	(l_ca_caentitlement_struct_h) = (CA_CAENTITLEMENT_STRUCT_H*)calloc(2,sizeof(CA_CAENTITLEMENT_STRUCT_H));	
	APL_MALLOC_FAIL(l_ca_caentitlement_struct_h) 
	
	(l_ca_caentitlementimg_struct_i) = (CA_CAENTITLEMENT_STRUCT_I*)calloc(2,sizeof(CA_CAENTITLEMENT_STRUCT_I));	
	APL_MALLOC_FAIL(l_ca_caentitlementimg_struct_i) 
	
	img_ind=ENT_IND;
   if	(	CA_RtvEntitl(p_ca_caentitlement_struct_h->h_corp_id,
   								p_ca_caentitlement_struct_h->h_dl_client,
									l_ca_caentitlement_struct_h,
									l_ca_caentitlementimg_struct_i,
									rowid,
									&img_ind,
									l_debug_info_ptr
									)	==	APL_FAILURE
		)
	{
		APL_GOBACK_FAIL
	}
   APL_IF_DEBUG
   {
      printf("Access Stamp  From Table = |%s|\n",p_ca_caentitlement_struct_h->h_access_stamp);
      printf("Access Stamp from Structure = |%s|\n",l_ca_caentitlement_struct_h->h_access_stamp);
   }	
	VAL_ACCESS_STAMP 

	if	(	strcmp(l_ca_caentitlement_struct_h->h_entitl_stat,STATUS_RDY_PYMT)	
		)
		{
			CO_InsertErr(l_debug_info_ptr,
								ERR_ENTITLESTS_INVALIDREVERSE,
								APL_NULL_STRING,
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__
								);
						APL_GOBACK_FAIL
		
		}	

  	GET_ACCESS_STAMP_APL_DATE
	
	if	(	CA_CheckEntl(		p_ca_caentitlement_struct_h->h_corp_id,
									p_ca_caentitlement_struct_h->h_dl_client,
 	 				      	   l_ca_chk_det_struct_h, 
									p_intlenv_data_struct_h,
									l_debug_info_ptr
							)	==	APL_FAILURE
		)
	{
		APL_GOBACK_FAIL
	}
	count = 0;
	if 	(CA_ChkUURstPymt( p_ca_caentitlement_struct_h->h_corp_id,
								 p_ca_caentitlement_struct_h->h_dl_client,
								 &count,
								 &int_gp_count,
								 l_debug_info_ptr
								)	==	APL_FAILURE
			)
	{
		APL_GOBACK_FAIL
	}

	if (	(count > 0) ||  (int_gp_count > 0)		)
	{
		if (count > 0 )
		{
			CO_InsertErr(l_debug_info_ptr,
			   			   ERR_UNREV_PYMT_CANT_REV_ENT, 
								APL_NULL_STRING,
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__
								);
		}				
		if (int_gp_count > 0 )
		{
			CO_InsertErr(l_debug_info_ptr,
			   			   ERR_UNAUT_GPPYMT_CANT_REV_ENT, 
								APL_NULL_STRING,
								APL_NULL_STRING,
								APL_NULL_STRING,
								__LINE__,
								__FILE__
								);
		}				
				APL_GOBACK_FAIL
	}

		
	if (	CA_NewEntitlImage(l_ca_caentitlement_struct_h,
									l_ca_caentitlementimg_struct_i,
									l_debug_info_ptr
									)	==	APL_FAILURE
		)
	{
		APL_GOBACK_FAIL
	}

	strcpy(p_ca_caentitlement_struct_h->h_entitl_stat,STATUS_REV_UAUTH);
	strcpy(p_ca_caentitlement_struct_h->h_stat_date,pro_sys_date);
	
	SET_MAKER_MAKERDT 
	
	if	(	CA_Mod_Status(p_ca_caentitlement_struct_h,
						rowid,
						l_debug_info_ptr
						)	==	APL_FAILURE
		)
	{
		APL_GOBACK_FAIL
	}		
		
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS	:
	{
		APL_FREE(l_ca_chk_det_struct_h);
		APL_FREE(l_ca_caentitlement_struct_h);
		APL_FREE(l_ca_caentitlementimg_struct_i);
		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_EntitlReverse successfully",NULL,p_intlenv_data_struct_h);
		}	
		return (APL_SUCCESS);
	}
	RETURN_FAILURE	:
	{
		APL_FREE(l_ca_chk_det_struct_h);
		APL_FREE(l_ca_caentitlement_struct_h);
		APL_FREE(l_ca_caentitlementimg_struct_i);
		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_EntitlReverse unsuccessfully",NULL,p_intlenv_data_struct_h);
		}	
		return (APL_FAILURE);
	}
}



static	int 	CA_EntitlDel(  CA_CAENTITLEMENT_STRUCT_H    *p_ca_caentitlement_struct_h,
					                  INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
  		      				         DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
                  				)
{
	struct	sqlca	sqlca;
	CA_CAENTITLEMENT_STRUCT_H	*l_ca_caentitlement_struct_h		=	NULL;
	CA_CAENTITLEMENT_STRUCT_I	*l_ca_caentitlementimg_struct_i	   =	NULL;
	CA_CHK_DET_STRUCT_H    *l_ca_chk_det_struct_h   =  NULL;
	char		*int_pos;
	char	 	rowid[APL_ROWID_LEN]=APL_NULL_STRING;
	char		pro_sys_date[APL_DATE_LEN]=APL_NULL_STRING;
	short    img_ind=ENT_IND;
 //AIX -Warning Removal
   //char     event_status[APL_STATUS_LEN]=APL_NULL_STRING;
	//int		int_p_count=0;
	
	#ifdef APL_THREADS
	APL_SET_CONTEXT
	EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered CA_EntitlDel function",NULL,p_intlenv_data_struct_h);
	}
	
	if(	!strlen(p_ca_caentitlement_struct_h->h_access_stamp)	)
				{
					APL_DATA_MISSING("Access Stamp",APL_NULL_STRING,APL_NULL_STRING)	
				}
					
	if(	!strlen(p_ca_caentitlement_struct_h->h_corp_id)	)
				{
					APL_DATA_MISSING("Corporate Action ID",APL_NULL_STRING,APL_NULL_STRING)	
				}

	if(	!strlen(p_ca_caentitlement_struct_h->h_dl_client)	)
				{	
					APL_DATA_MISSING("Account",APL_NULL_STRING,APL_NULL_STRING)	
				}
	if	(	 CO_ChkErr(*l_debug_info_ptr)	== APL_SUCCESS	)
			APL_GOBACK_FAIL
	
	(l_ca_caentitlement_struct_h) = (CA_CAENTITLEMENT_STRUCT_H*)calloc(2,sizeof(CA_CAENTITLEMENT_STRUCT_H));	
	APL_MALLOC_FAIL(l_ca_caentitlement_struct_h) 
		
	(l_ca_caentitlementimg_struct_i) = (CA_CAENTITLEMENT_STRUCT_I*)calloc(2,sizeof(CA_CAENTITLEMENT_STRUCT_I));	
	APL_MALLOC_FAIL(l_ca_caentitlementimg_struct_i) 
	
	l_ca_chk_det_struct_h=(CA_CHK_DET_STRUCT_H *)calloc(	1,sizeof(CA_CHK_DET_STRUCT_H)	);
	APL_MALLOC_FAIL(l_ca_chk_det_struct_h) 
	
	img_ind=ENT_IND;
   if	(	CA_RtvEntitl(p_ca_caentitlement_struct_h->h_corp_id,
   								p_ca_caentitlement_struct_h->h_dl_client,
									l_ca_caentitlement_struct_h,
									l_ca_caentitlementimg_struct_i,
									rowid,
									&img_ind,
									l_debug_info_ptr
									)	==	APL_FAILURE
		)
	{
		APL_GOBACK_FAIL
	}

	APL_IF_DEBUG
	{
		printf("Access Stamp  From Table = |%s|\n",p_ca_caentitlement_struct_h->h_access_stamp);
		printf("Access Stamp from Structure = |%s|\n",l_ca_caentitlement_struct_h->h_access_stamp);
	}	
	VAL_ACCESS_STAMP 
	
	if	( strcmp(l_ca_caentitlement_struct_h->h_entitl_stat,APL_STATUS_UNAUTH) &&
		  strcmp(l_ca_caentitlement_struct_h->h_entitl_stat,STATUS_PENDING)
		)
	{
		CO_InsertErr(l_debug_info_ptr,
							ERR_ENTITLESTS_INVALIDDEL,
							APL_NULL_STRING,
							APL_NULL_STRING,
							APL_NULL_STRING,
							__LINE__,
							__FILE__
							);
		APL_GOBACK_FAIL
	}
	
  	GET_ACCESS_STAMP_APL_DATE
	
	if	(	CA_CheckEntl	(		p_ca_caentitlement_struct_h->h_corp_id,
									p_ca_caentitlement_struct_h->h_dl_client,
  		   		            l_ca_chk_det_struct_h, 
									p_intlenv_data_struct_h,
									l_debug_info_ptr
								)	==	APL_FAILURE
		)
	{
		APL_GOBACK_FAIL
	}		

	
	EXEC SQL DELETE CAREPLY
	WHERE corp_id=:p_ca_caentitlement_struct_h->h_corp_id
	AND	client = :p_ca_caentitlement_struct_h->h_dl_client;

	IS_ANY_ORA_ERROR

	EXEC SQL DELETE CAENTITLEMENT
	WHERE
			ROWID = :rowid;
	
	IS_ANY_ORA_ERROR

	
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS	:
	{
		APL_FREE(l_ca_chk_det_struct_h);
		APL_FREE(l_ca_caentitlement_struct_h)	
		APL_FREE(l_ca_caentitlementimg_struct_i)	
		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_EntitlDel successfully",NULL,p_intlenv_data_struct_h);
		}	
		return (APL_SUCCESS);
	}
	RETURN_FAILURE	:
	{
		APL_FREE(l_ca_chk_det_struct_h);
		APL_FREE(l_ca_caentitlement_struct_h)	
		APL_FREE(l_ca_caentitlementimg_struct_i)	
		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_EntitlDel unsuccessfully",NULL,p_intlenv_data_struct_h);
		}	
		return (APL_FAILURE);
	}
}


int 	CA_CheckEntl( 			char                 	*chr_p_ca_id,
                     		char                 	*chr_p_client,
								   CA_CHK_DET_STRUCT_H		*p_ca_chk_det_struct_h,
				     	      	INTL_ENV_DATA_STRUCT_H  *p_intlenv_data_struct_h,
									DEBUG_INFO_STRUCT_H     **l_debug_info_ptr
								)
{
	struct sqlca sqlca;

	char	h_res_instr_code[APL_INSTRUMENTCODE_LEN];
	short	i_res_instr_code=0;
	//int	int_date_diff=0; //AIX -Warning Removal
	short	int_error_ind=APL_SUCCESS;	
   CA_CHK_DET_STRUCT_I    *l_ca_chk_det_struct_i   =  NULL;
	char		chr_op_ind[APL_FLAG_LENGTH] = APL_NULL_STRING;
	
	char	chr_h_acc_stat[APL_STATUS_LEN] = APL_NULL_STRING;
	char	h_checker_dt[APL_DATE_LEN] = APL_NULL_STRING;
	short i_checker_dt=0;
	int int_l_dummy = 0;

	#ifdef APL_THREADS
	APL_SET_CONTEXT
	EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
  
	l_ca_chk_det_struct_i=(CA_CHK_DET_STRUCT_I *)calloc(  2,sizeof(CA_CHK_DET_STRUCT_I));
   APL_MALLOC_FAIL(l_ca_chk_det_struct_i)
	
   
	EXEC SQL VAR   p_ca_chk_det_struct_h->h_instr_code    is string;
   EXEC SQL VAR   h_res_instr_code                     is string;

	int_l_dummy=0;
	if (APL_FAILURE == CO_Chk_SplVal("EUROCLEAR",
											  "DUMMY_ACC",
											  chr_p_client,
											  &int_l_dummy,
											  l_debug_info_ptr))
	{
		APL_GOBACK_FAIL
	}
	if (int_l_dummy)
	{
		CO_InsertErr(l_debug_info_ptr,
							ERR_ENTITLE_NOTALLOWED_DMYACC,
							chr_p_client,
							APL_NULL_STRING,
							APL_NULL_STRING,
							__LINE__,
							__FILE__);
		APL_GOBACK_FAIL;
	}

	EXEC SQL SELECT	
                  CA_EVENT,
                  REC_DATE,
                  INSTR_CODE,
                  RES_INSTR_CODE,
                  NVL(AMOUNT_BAL,0),
                  NVL(RECEIVED_AMT,0),
                  NVL(QUANTITY_BAL,0),
                  NVL(QUANTITY_RECEIVED,0),
						NVL(ENTL_MSG_CNT,0),
						NVL(ENTL_CLT_CNT,0),	
                  STATUS /*Smita - HDFCCA_BaseVer - Changed Col Name*/
				INTO
       :p_ca_chk_det_struct_h->h_evt_class:l_ca_chk_det_struct_i->i_evt_class,
       :p_ca_chk_det_struct_h->h_rec_date:l_ca_chk_det_struct_i->i_rec_date,
       :p_ca_chk_det_struct_h->h_instr_code:l_ca_chk_det_struct_i->i_instr_code,
       :h_res_instr_code:i_res_instr_code,
       :p_ca_chk_det_struct_h->h_evt_instr_inc_bal:l_ca_chk_det_struct_i->i_evt_instr_inc_bal,
       :p_ca_chk_det_struct_h->h_evt_amt_recd:l_ca_chk_det_struct_i->i_evt_amt_recd,
       :p_ca_chk_det_struct_h->h_evt_quantity_due:l_ca_chk_det_struct_i->i_evt_quantity_due,
       :p_ca_chk_det_struct_h->h_evt_quantity_recd:l_ca_chk_det_struct_i->i_evt_quantity_recd,
       :p_ca_chk_det_struct_h->h_entl_msg_cnt:l_ca_chk_det_struct_i->i_entl_msg_cnt,
       :p_ca_chk_det_struct_h->h_entl_clt_cnt:l_ca_chk_det_struct_i->i_entl_clt_cnt,
       :p_ca_chk_det_struct_h->h_evt_stat:l_ca_chk_det_struct_i->i_evt_stat
				FROM
						CAEVENT
				WHERE
						CORP_ID	=:chr_p_ca_id;
				

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_EVNT_FOR_ENTITL_NOTFND,
													  APL_NULL_STRING,
													  APL_NULL_STRING,
													  APL_NULL_STRING
													)

	if ( !strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_DELETE)  )
	{
	if (  strcmp(p_ca_chk_det_struct_h->h_evt_stat,STATUS_RDY_PYMT)   &&
         strcmp(p_ca_chk_det_struct_h->h_evt_stat,STATUS_PART_PAID)	 &&
         strcmp(p_ca_chk_det_struct_h->h_evt_stat,STATUS_REV_UAUTH)
      )
      {
           	if	(CO_InsertErr(l_debug_info_ptr,
              	 		          ERR_EVNTSTS_INVALID,
                       	   	 "Status is : ",
                       	   	 p_ca_chk_det_struct_h->h_evt_stat,
                       	   	 APL_NULL_STRING,
                          		 __LINE__,
                          		 __FILE__
   	                       	  )	==	APL_FAILURE
					)
				{
					APL_GOBACK_FAIL
				}
				else
					{
						int_error_ind	=	APL_FAILURE;
					}
         }
	}
	else
	{
	if (  strcmp(p_ca_chk_det_struct_h->h_evt_stat,STATUS_RDY_PYMT)   &&
         strcmp(p_ca_chk_det_struct_h->h_evt_stat,STATUS_PART_PAID)	
      )
      {
           	if	(CO_InsertErr(l_debug_info_ptr,
              	 		          ERR_EVNTSTS_INVALID,
                       	   	 "Status is : ",
                       	   	 p_ca_chk_det_struct_h->h_evt_stat,
                       	   	 APL_NULL_STRING,
                          		 __LINE__,
                          		 __FILE__
   	                       	  )	==	APL_FAILURE
					)
				{
					APL_GOBACK_FAIL
				}
				else
					{
						int_error_ind	=	APL_FAILURE;
					}
      }
	}

	if	( i_res_instr_code	==	-1	)
	{
		strcpy(h_res_instr_code,APL_NULL_STRING);
	}

   if ( !strcmp(p_ca_chk_det_struct_h->h_evt_class,EVT_OFFER) )
	{
		strcpy(chr_op_ind,APL_YES_IND);
	}
	else
	{
		strcpy(chr_op_ind,APL_NO_IND);
	}

	if (  CA_ChkInstr		( 	 p_ca_chk_det_struct_h->h_instr_code,
                            h_res_instr_code,
									 chr_op_ind,
                            l_debug_info_ptr
                        )  ==    APL_FAILURE
         )
         {
				int_error_ind	=	APL_FAILURE;
			}

	if (  CO_Chk_AccValid(chr_p_client,
                        APL_YES_FLAG,
                        'C',
                        APL_NULL_STRING,
                        APL_NULL_STRING,
                        APL_NULL_STRING,
                        APL_NO_FLAG,
                        APL_NULL_STRING,
                        APL_NO_FLAG,
                        l_debug_info_ptr
                        )  == APL_FAILURE
      )
    {
		int_error_ind	=	APL_FAILURE;
	 } 

		EXEC SQL SELECT STATUS,CHECKER_DT
		INTO :chr_h_acc_stat,:h_checker_dt:i_checker_dt
		FROM	MT_CLIENT
		WHERE cln_code=:chr_p_client;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_ACCNOT_FND,
														  chr_p_client,
														  APL_NULL_STRING,
														  APL_NULL_STRING
														 )
/*//Swapnil start here for freeze account.
	if ( i_checker_dt == -1 )
	{
		if ( !strcmp(chr_h_acc_stat,STATUS_UNFROZ_UAUTH) )
		{
        	CO_InsertWarning(l_debug_info_ptr,
          		          ERR_ACCOUNT_MARKEDFORUNFRZN,
                 	   	 chr_p_client,
								 APL_NULL_STRING,
                 	   	 APL_NULL_STRING,
                    		 __LINE__,
                    		 __FILE__
                       	  );
		}
		else if ( !strcmp(chr_h_acc_stat,STATUS_FROZ_UAUTH) )
		{
        	CO_InsertWarning(l_debug_info_ptr,
          		          ERR_ACCOUNT_MARKEDFORFRZN,
                 	   	 chr_p_client,
								 APL_NULL_STRING,
                 	   	 APL_NULL_STRING,
                    		 __LINE__,
                    		 __FILE__
                       	  );
		}
		else
		{
        	CO_InsertWarning(l_debug_info_ptr,
          		          ERR_ACCOUNT_UNAUTH,
                 	   	 chr_p_client,
								 APL_NULL_STRING,
                 	   	 APL_NULL_STRING,
                    		 __LINE__,
                    		 __FILE__
                       	  );
		}
	}
	*/
	//if ( !strcmp(chr_h_acc_stat,STATUS_FROZ_AUTH) )
	if ( strcmp(chr_h_acc_stat,"CA")==0 )
	{
     	CO_InsertWarning(l_debug_info_ptr,
        		          ERR_ACCOUNT_CLOSED,
              	   	 chr_p_client,
							 APL_NULL_STRING,
              	   	 APL_NULL_STRING,
                  	 __LINE__,
                    	 __FILE__
                       	  );
	}
//Swapnil end here for freeze account.
	if	(	 CO_ChkErr(*l_debug_info_ptr)	== APL_SUCCESS	)
	{
		APL_GOBACK_FAIL
	}
			APL_GOBACK_SUCCESS
			RETURN_SUCCESS	:
		
		{
			APL_FREE(l_ca_chk_det_struct_i);
			APL_IF_DEBUG
			{
				CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_CheckEntl successfully",NULL,p_intlenv_data_struct_h);
			}
			return (APL_SUCCESS);
		}
		RETURN_FAILURE	:
		{
			APL_FREE(l_ca_chk_det_struct_i);
			APL_IF_DEBUG
			{
				CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_CheckEntl unsuccessfully",NULL,p_intlenv_data_struct_h);
			}	
			return (APL_FAILURE);
		}
}


static	int	CA_ChkIncomeDue( CA_CAENTITLEMENT_STRUCT_H   *p_ca_caentitlement_struct_h,
									 CA_CAENTITLEMENT_STRUCT_H   *p_entitlimg_struct_h,
									 DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
                  	   	)
{
	struct	sqlca	sqlca;

	double   h_sum_earnings         =  0.0;
   short    i_sum_income         =  0;
   double   h_sum_quantity            =  0.0;
   short    i_sum_qty            =  0;
	short	   int_error_ind = APL_SUCCESS;

	/* Chirag 01-11-2006 SP-CR Entitle modification after deal generation */

	char l_ca_event[3] = APL_NULL_STRING;
	char l_op_evt_class[3] = APL_NULL_STRING;

	short i_ca_event = 0;
	short i_op_evt_class = 0;
	short qty_flg = 0;

	/* Chirag 01-11-2006 SP-CR Entitle modification after deal generation */

	#ifdef APL_THREADS
	APL_SET_CONTEXT
	EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	/* Chirag 01-11-2006 SP-CR Entitle modification after deal generation */
	printf("Chking deals are created for Entitlements.....\n");
	if(p_entitlimg_struct_h->h_quantity_recd > 0)
	{
		printf("Deals created Entitlements are found......\n");
		EXEC SQL SELECT CA_EVENT,OP_EVT_CLASS INTO :l_ca_event:i_ca_event,:l_op_evt_class:i_op_evt_class
				FROM CAEVENT
				WHERE CORP_ID = : p_ca_caentitlement_struct_h->h_corp_id;
		IS_ANY_ORA_ERROR
		
		printf("Event we got : |%s| \n",l_ca_event);
		if((!strcmp(l_ca_event,"SP") && !strcmp(l_op_evt_class,"SP")) || !strcmp(l_ca_event,"CR"))
			qty_flg = 1;
	}

	/* Chirag 01-11-2006 SP-CR Entitle modification after deal generation */
	
	if	(APL_LESS(p_ca_caentitlement_struct_h->h_instr_inc_bal,p_entitlimg_struct_h->h_amount_recd))
		{
 			int_error_ind	=	APL_FAILURE;
        	if	(CO_InsertErr(l_debug_info_ptr,
           	 		          ERR_INCDUE_LESS_AMTRECED,
                    	   	 APL_NULL_STRING,
                    	   	 APL_NULL_STRING,
                    	   	 APL_NULL_STRING,
                       		 __LINE__,
                       		 __FILE__
                          	  )	==	APL_FAILURE
							)
			{
				APL_GOBACK_FAIL
			}
		}
	if(qty_flg == 0) /* Condition added Chirag 01-11-2006 SP-CR Entitle modification after deal generation */
	{
		if	(	APL_LESS(p_ca_caentitlement_struct_h->h_quantity_due,p_entitlimg_struct_h->h_quantity_recd)
			)
			{
				int_error_ind	=	APL_FAILURE;
			if	(CO_InsertErr(l_debug_info_ptr,
						  ERR_QTYDUE_LESS_QTYRECED,
					 APL_NULL_STRING,
					 APL_NULL_STRING,
					 APL_NULL_STRING,
					 __LINE__,
					 __FILE__
					  )	==	APL_FAILURE
								)
				{
					APL_GOBACK_FAIL
				}
			}
	}

	if	(	int_error_ind	==	APL_FAILURE	)
		{
			APL_GOBACK_FAIL
		}
	
	EXEC SQL SELECT
                  SUM(NVL(CURR_PYMT,0)),
                  SUM(NVL(QUANTITY_RECEIVED,0))
   INTO
                  h_sum_earnings:i_sum_income,
                  h_sum_quantity:i_sum_qty
   FROM
                  CACHEQUE
   WHERE
                  CORP_ID=:p_ca_caentitlement_struct_h->h_corp_id    AND
                  CLIENT=:p_ca_caentitlement_struct_h->h_dl_client   AND
                  STAT_PYMT NOT IN   ('RV','DL');
	IS_ANY_ORA_ERROR
	
	if	(	 APL_LESS(p_ca_caentitlement_struct_h->h_instr_inc_bal,h_sum_earnings )  )
		{
 			int_error_ind	=	APL_FAILURE;
        	if	(CO_InsertErr(l_debug_info_ptr,
           	 		          ERR_INCDUE_LESS_SUMCASHPAYMNT,
                    	   	 APL_NULL_STRING,
                    	   	 APL_NULL_STRING,
                    	   	 APL_NULL_STRING,
                       		 __LINE__,
                       		 __FILE__
                          	  )	==	APL_FAILURE
							)
			{
				APL_GOBACK_FAIL
			}
		}
	
	if	(	APL_LESS(p_ca_caentitlement_struct_h->h_quantity_due, h_sum_quantity)	)
		{
 			int_error_ind	=	APL_FAILURE;
        	if	(CO_InsertErr(l_debug_info_ptr,
           	 		          ERR_QTYDUE_LESS_SUM_STKPAYMNT,
                    	   	 APL_NULL_STRING,
                    	   	 APL_NULL_STRING,
                    	   	 APL_NULL_STRING,
                       		 __LINE__,
                       		 __FILE__
                          	  )	==	APL_FAILURE
							)
			{
				APL_GOBACK_FAIL
			}
		}
	
	if	(	int_error_ind	==	APL_FAILURE	)
		{
			APL_GOBACK_FAIL
		}
	
	
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS	:
		{
			APL_IF_DEBUG
			{
				CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_ChkIncomeDue successfully",NULL,NULL);
			}
			return (APL_SUCCESS);
		}
	RETURN_FAILURE	:
		{
			APL_IF_DEBUG
			{
				CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_ChkIncomeDue unsuccessfully",NULL,NULL);
			}	
			return (APL_FAILURE);
		}
}



static	int	CA_MandDataChk(
			                       CA_CAENTITLEMENT_STRUCT_H    *p_ca_caentitlement_struct_h,
 				                    INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
            				        DEBUG_INFO_STRUCT_H         **l_debug_info_ptr
                  				)
{
	struct sqlca sqlca;
	
	double   i_safeks=0.0;
	short    l_cond_bopos=0; 
	char chr_l_ce_typ[EVT_CLASS_] =APL_NULL_STRING;
	/* PJ */
	char		chr_corp_id[CA_CORP_ID_LEN],chr_instr_code[APL_INSTRUMENTCODE_LEN],h_ex_date[APL_DATE_LEN];
	int		h_priority;
	short		i_priority=0, i_chr_corp_id=0, i_chr_instr_code=0, i_ex_date=0;
	double	l_future_pos=0.0;
	
	#ifdef APL_THREADS
	APL_SET_CONTEXT
	EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	memset (chr_corp_id,APL_NULL_CHAR,CA_CORP_ID_LEN);
	memset (chr_instr_code,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
	memset (h_ex_date,APL_NULL_CHAR,APL_DATE_LEN);

	EXEC SQL VAR chr_l_ce_typ is string;
	EXEC SQL VAR chr_corp_id is string;
	EXEC SQL VAR chr_instr_code is string;
	EXEC SQL VAR h_ex_date is string;

		if (	!strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_MODIFY)	)
		{	
			if(	!strlen(p_ca_caentitlement_struct_h->h_access_stamp)	)
					APL_DATA_MISSING("Access Stamp",APL_NULL_STRING,APL_NULL_STRING)	
			if(	!strlen(p_ca_caentitlement_struct_h->h_entitl_stat)	)
					APL_DATA_MISSING("Entitl Status",APL_NULL_STRING,APL_NULL_STRING)	
		}
	
	if(	!strlen(p_ca_caentitlement_struct_h->h_corp_id)	)
			APL_DATA_MISSING("Corporate Action ID",APL_NULL_STRING,APL_NULL_STRING)	

	if (  !strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_INPUT) || 
			!strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_MODIFY) )
	{
/*		EXEC SQL SELECT NVL(SUM(SAFEKEEP_POS)+SUM(VAL_REC)+SUM(NVALRECEIVE)+SUM(DP_REC)-SUM(VAL_DEL)-SUM(NVALDELIVER)-SUM(DP_DEL),0)  Changes Done By Amit Bhosale*/
		EXEC SQL  SELECT NVL(NVL(SUM(SAFEKEEP_POS),0)+NVL(SUM(VAL_REC),0)+NVL(SUM(NVALRECEIVE),0)+NVL(SUM(DP_REC),0)-NVL(SUM(VAL_DEL),0)-NVL(SUM(NVALDELIVER),0)-NVL(SUM(DP_DEL),0),0) 
		INTO :i_safeks
		FROM CAEVENT A, DL_SAFEK B
		WHERE A.CORP_ID = :p_ca_caentitlement_struct_h->h_corp_id AND
				B.CLIENT = :p_ca_caentitlement_struct_h->h_dl_client AND
				B.INSTR_CODE = A.INSTR_CODE AND 
                                B.BLOCK_TYPE = 'FREE';
		if (APL_FAILURE == CO_Chk_CntryEnabled("CA_ENTITL","POSN_NOCHECK_BO",&l_cond_bopos,l_debug_info_ptr)) 
   	{
      	   APL_GOBACK_FAIL
   	}
		
		EXEC SQL SELECT CA_EVENT,INSTR_CODE,PRIORITY,ATTACH_CORP_ID,EX_DATE
		INTO :chr_l_ce_typ,chr_instr_code:i_chr_instr_code,h_priority:i_priority,chr_corp_id:i_chr_corp_id,
			  :h_ex_date:i_ex_date
		FROM CAEVENT
		WHERE CORP_ID = :p_ca_caentitlement_struct_h->h_corp_id;

		IS_ANY_ORA_ERROR;
	
	/* PJ UAT Fix Calculate appropriate safek for attached event
		1. Get Priority of corp id if current priority is 2 */
		if (h_priority > 1 && strlen(chr_corp_id) != 0 )  // AIX -Warnings Removal	
		{
					if(Process_AttCorpAdj(	chr_corp_id,
							chr_instr_code,
							h_ex_date,
							p_ca_caentitlement_struct_h->h_dl_client,
							h_priority,
							p_ca_caentitlement_struct_h->h_entitl_pos,
							&l_future_pos,
							l_debug_info_ptr) == APL_FAILURE)
					{
					printf("Failed InCalculating attach event adjustment");
					APL_GOBACK_FAIL

					}
					i_safeks   = i_safeks + l_future_pos;
			
		}
	/* PJ end */

/*		if ((i_safeks <= 0) || (i_safeks < p_ca_caentitlement_struct_h->h_entitl_pos ) )
		{
			if((strcmp(chr_l_ce_typ,EVT_BONUS)) || (l_cond_bopos == 0))
			{
            CO_InsertErr(        l_debug_info_ptr,
                                   ERR_DEAL_NENUFPOSN,
                                   APL_NULL_STRING,
                                   APL_NULL_STRING,
                                   APL_NULL_STRING,
                                    __LINE__,
                                    __FILE__
                                    );
        		APL_GOBACK_FAIL
			}
		}
*/	}

	if(	!strlen(p_ca_caentitlement_struct_h->h_dl_client)	)
			APL_DATA_MISSING("Instrument",APL_NULL_STRING,APL_NULL_STRING) /*Smita - Entitlement Mnt- HDFCCA_001*/
	
	if(	p_ca_caentitlement_struct_h->h_entitl_pos	==	0	)
			APL_DATA_MISSING("Entitl Posn",APL_NULL_STRING,APL_NULL_STRING)
	
	if(	!strlen(p_ca_caentitlement_struct_h->h_entitl_ccy)	)
			APL_DATA_MISSING("Currency",APL_NULL_STRING,APL_NULL_STRING)	
			
	if	(	 CO_ChkErr(*l_debug_info_ptr)	== APL_SUCCESS	)
			APL_GOBACK_FAIL

		APL_GOBACK_SUCCESS
		RETURN_SUCCESS	:
		
		{
			APL_IF_DEBUG
			{
				CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_MandDataChk successfully",NULL,p_intlenv_data_struct_h);
			}	
			return (APL_SUCCESS);
		}
		RETURN_FAILURE	:
		{
			APL_IF_DEBUG
			{
				CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_MandDataChk unsuccessfully",NULL,p_intlenv_data_struct_h);
			}	
			return (APL_FAILURE);
		}
}


int	CA_NewEntitl(CA_CAENTITLEMENT_STRUCT_H	*p_ca_caentitlement_struct_h,
								CA_CAENTITLEMENT_STRUCT_I	*p_ca_caentitlement_struct_i,
								DEBUG_INFO_STRUCT_H		   **l_debug_info_ptr
								)
{
	struct	sqlca	sqlca;

	#ifdef APL_THREADS
	APL_SET_CONTEXT
	EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	EXEC SQL INSERT INTO CAENTITLEMENT VALUES (:p_ca_caentitlement_struct_h:p_ca_caentitlement_struct_i);
	
	IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_DUPLICATE_ENTITLE,
												 p_ca_caentitlement_struct_h->h_corp_id, 
												 p_ca_caentitlement_struct_h->h_dl_client,
												 APL_NULL_STRING) 

		
			APL_GOBACK_SUCCESS
			RETURN_SUCCESS	:
		
		{
			APL_IF_DEBUG
			{
				CO_ProcMonitor(APL_OUT_FILE,"Record inserted successfuly",NULL,NULL);
				CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_NewEntitl successfully",NULL,NULL);
			}
			return (APL_SUCCESS);
		}
		RETURN_FAILURE	:
		{
			APL_IF_DEBUG
			{
				CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_NewEntitl unsuccessfully",NULL,NULL);
			}	
			return (APL_FAILURE);
		}
}


static	int	CA_NewEntitlImage(CA_CAENTITLEMENT_STRUCT_H	*p_ca_caentitlement_struct_h,
											CA_CAENTITLEMENT_STRUCT_I	*p_ca_caentitlement_struct_i,
											DEBUG_INFO_STRUCT_H		**l_debug_info_ptr
											)
{	
	struct sqlca sqlca;

	#ifdef APL_THREADS
	APL_SET_CONTEXT
	EXEC SQL CONTEXT USE :my_ctx_local;
	#endif


		EXEC SQL INSERT INTO CAENTITLEMENTMG VALUES (:p_ca_caentitlement_struct_h:p_ca_caentitlement_struct_i);

		IS_ANY_ORA_ERROR_AND_DUPLICATE(	ERR_DUPLICATE_ENTITLEIMG,
														p_ca_caentitlement_struct_h->h_corp_id,
														p_ca_caentitlement_struct_h->h_dl_client,
														APL_NULL_STRING) 
		
		
			APL_GOBACK_SUCCESS
			RETURN_SUCCESS	:
		
		{
			APL_IF_DEBUG
			{
				CO_ProcMonitor(APL_OUT_FILE,"Image Record inserted successfuly",NULL,NULL);
				CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_NewEntitlImage successfully",NULL,NULL);
			}	
			return (APL_SUCCESS);
		}
		RETURN_FAILURE	:
		{
			APL_IF_DEBUG
			{
				CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_NewEntitlImage unsuccessfully",NULL,NULL);
			}	
			return (APL_FAILURE);
		}
}


static	int	CA_Mod_Status(CA_CAENTITLEMENT_STRUCT_H	*p_ca_caentitlement_struct_h,
								char					*p_ora_rowid,	
								DEBUG_INFO_STRUCT_H		**l_debug_info_ptr
								)
{
	struct	sqlca	sqlca;

	#ifdef APL_THREADS
	APL_SET_CONTEXT
	EXEC SQL CONTEXT USE :my_ctx_local;
	#endif


	EXEC SQL UPDATE CAENTITLEMENT	
	SET
		MAKER=:p_ca_caentitlement_struct_h->h_maker,
		MAKER_DT=:p_ca_caentitlement_struct_h->h_maker_dt,
		CHECKER=NULL,
		CHECKER_DT=NULL,
		STATUS=:p_ca_caentitlement_struct_h->h_entitl_stat, /*Smita - Changed Col Name - HDFCCA Base Ver*/
		PROCESSED_DATE=:p_ca_caentitlement_struct_h->h_stat_date,
		ACCESS_STAMP=:p_ca_caentitlement_struct_h->h_access_stamp
	WHERE
				ROWID=:p_ora_rowid;	

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_ENTITLE_NOTFND,
														  p_ca_caentitlement_struct_h->h_corp_id,
														  p_ca_caentitlement_struct_h->h_dl_client,
														  APL_NULL_STRING
														 );
		
		
			APL_GOBACK_SUCCESS
			RETURN_SUCCESS	:
		
		{
			APL_IF_DEBUG
			{
				CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_Mod_Status successfully",NULL,NULL);
			}	
			return (APL_SUCCESS);
		}
		RETURN_FAILURE	:
		{
			APL_IF_DEBUG
			{
				CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_Mod_Status unsuccessfully",NULL,NULL);
			}	
			return (APL_FAILURE);
		}
}




int	CA_RtvEntitl(char					*chr_p_ca_id,
								char					*chr_p_client,
								CA_CAENTITLEMENT_STRUCT_H	*p_ca_caentitlement_struct_h,
								CA_CAENTITLEMENT_STRUCT_I	*p_ca_caentitlement_struct_i,
								char					*p_ora_rowid,
								short				   *p_img_ind,
								DEBUG_INFO_STRUCT_H		**l_debug_info_ptr
								)
{
	struct	sqlca	sqlca;
	char		rowid[APL_ROWID_LEN]=APL_NULL_STRING;
	char		chr_log_buff[LOG_BUFFER_LEN] = APL_NULL_STRING;

	#ifdef APL_THREADS
	APL_SET_CONTEXT
	EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	
	EXEC SQL VAR	p_ca_caentitlement_struct_h->h_corp_id is string;
	EXEC SQL VAR	p_ca_caentitlement_struct_h->h_dl_client is string;
	EXEC SQL VAR	p_ca_caentitlement_struct_h->h_maker is string;
	EXEC SQL VAR	p_ca_caentitlement_struct_h->h_checker is string;

	
	if	(*p_img_ind == ENT_IND )
	{			
		APL_IF_DEBUG
		{
		CO_ProcMonitor(APL_OUT_FILE,"About to select record to be updated",NULL,NULL);
		sprintf(chr_log_buff,"It has attributes -Ca_id :(%s)  Account (%s)",chr_p_ca_id,chr_p_client); 
		CO_ProcMonitor(APL_OUT_FILE,chr_log_buff,NULL,NULL);
		}
	
		EXEC SQL SELECT 	ROWID,
							CAENTITLEMENT.*
		INTO					:rowid,
							:p_ca_caentitlement_struct_h:p_ca_caentitlement_struct_i	 
		FROM CAENTITLEMENT 
  		WHERE corp_id=:chr_p_ca_id AND
				client=:chr_p_client 
   	FOR UPDATE OF	CAENTITLEMENT.STATUS;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_ENTITLE_NOTFND,
															chr_p_ca_id,
															chr_p_client,
															APL_NULL_STRING
														 )	
	}
	else if (*p_img_ind == IMG_IND )
	{	/* Added aditional condition based on ACESS_STAMP (Latest rec) to filter the 
                   multiple row fetch in the result - Log No: ISKB_3095 - Dec 2009 - Naren V  */

		EXEC SQL SELECT ROWID,
				CAENTITLEMENTMG.*
			   INTO :rowid,
				:p_ca_caentitlement_struct_h:p_ca_caentitlement_struct_i	 
			   FROM CAENTITLEMENTMG 
			  WHERE CORP_ID      = :chr_p_ca_id AND
				CLIENT       = :chr_p_client
			    AND ACCESS_STAMP = (SELECT MAX(ACCESS_STAMP)
						  FROM CAENTITLEMENTMG
						 WHERE CORP_ID = :chr_p_ca_id 
						   AND CLIENT  = :chr_p_client)
			    AND ROWNUM       < 2 
			    FOR UPDATE OF CAENTITLEMENTMG.STATUS;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_ENTITLEIMG_NOTFND,
															chr_p_ca_id,
															chr_p_client,
															APL_NULL_STRING
														 )	
	}

	
	if	(p_ca_caentitlement_struct_i->i_entitl_pos == -1)
	{
		p_ca_caentitlement_struct_h->h_entitl_pos = 0.0;
	}			

	if	(p_ca_caentitlement_struct_i->i_instr_inc_bal == -1)
	{
		p_ca_caentitlement_struct_h->h_instr_inc_bal = 0.0;
	}			
	
	if	(p_ca_caentitlement_struct_i->i_quantity_due == -1)
	{
		p_ca_caentitlement_struct_h->h_quantity_due = 0.0;
	}			

	if	(p_ca_caentitlement_struct_i->i_quantity_recd == -1)
	{
		p_ca_caentitlement_struct_h->h_quantity_recd = 0.0;
	}			

	if	(p_ca_caentitlement_struct_i->i_amount_recd == -1)
	{
		p_ca_caentitlement_struct_h->h_amount_recd = 0.0;
	}			

	/*Smita - Entitlement Maintenance - HDFCCA_001,HDFCCA_002,HDFCCA_017*/
	if (p_ca_caentitlement_struct_i->i_fract_due == -1)
	{
		p_ca_caentitlement_struct_h->h_fract_due = 0.0;
	}

	if (p_ca_caentitlement_struct_i->i_fract_rcvd == -1)
	{
		p_ca_caentitlement_struct_h->h_fract_rcvd = 0.0;
	}
	/*Smita - Entitlement Maintenance - HDFCCA_001,HDFCCA_002,HDFCCA_017*/
	
	strcpy(p_ora_rowid,rowid);

	
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS	:
	{
		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_RtvEntitl successfully",NULL,NULL);
		}	
		return (APL_SUCCESS);
	}
	RETURN_FAILURE	:
	{
		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_RtvEntitl unsuccessfully",NULL,NULL);
		}
		return (APL_FAILURE);
	}
}




int	CA_Mod_EntitlRec(	CA_CAENTITLEMENT_STRUCT_H	*p_ca_caentitlement_struct_h,
									CA_CAENTITLEMENT_STRUCT_I	*p_ca_caentitlement_struct_i,
									char						*p_ora_rowid,
									DEBUG_INFO_STRUCT_H			**l_debug_info_ptr
								)
{
	struct	sqlca	sqlca;

	#ifdef APL_THREADS
			APL_SET_CONTEXT
			EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Entered A_UpdateEntitlRec",NULL,NULL);
	}

	
	/*Smita - Added Fields Fract_Due & Fract_Rcvd - HDFCCA_001,HDFCCA_002,HDFCCA_017*/	
		Alert("Debug for ISKB_9835 BOD fails in Entitlement starts====================================================");
		Alert("\n ELIG_ENTITL_POS=|%lf|",p_ca_caentitlement_struct_h->h_entitl_pos);
		Alert("\n CCY_FOR_ENTITL=|%s|",p_ca_caentitlement_struct_h->h_entitl_ccy);
		Alert("\n INSTR_INC_BAL=|%lf|",p_ca_caentitlement_struct_h->h_instr_inc_bal);
		Alert("\n QUANTITY_BAL=|%lf|",p_ca_caentitlement_struct_h->h_quantity_due);
		Alert("\n DATEFORSEND550=|%s|",p_ca_caentitlement_struct_h->h_sent550date);
		Alert("\n STATUS=|%s|",p_ca_caentitlement_struct_h->h_entitl_stat);
		Alert("\n PROCESSED_DATE=|%s|",p_ca_caentitlement_struct_h->h_stat_date);
		Alert("\n MAKER=|%s|",p_ca_caentitlement_struct_h->h_maker);
		Alert("\n MAKER_DT=|%s|",p_ca_caentitlement_struct_h->h_maker_dt);
		Alert("\n CHECKER=|%s|",p_ca_caentitlement_struct_h->h_checker);
		Alert("\n CHECKER_DT=|%s|",p_ca_caentitlement_struct_h->h_checker_dt);
		Alert("\n ACCESS_STAMP=|%s|",p_ca_caentitlement_struct_h->h_access_stamp);
		Alert("\n CUSTODYTAX_RATE=|%lf|",p_ca_caentitlement_struct_h->h_tax_rate);
		Alert("\n FRACT_DUE=|%lf|",p_ca_caentitlement_struct_h->h_fract_due);
		Alert("\n FRACT_RCVD=|%lf|",p_ca_caentitlement_struct_h->h_fract_rcvd);
		Alert(" sqlca sqlcode is **%d**\n",sqlca.sqlcode);
		sqlca.sqlcode=0;
		Alert("\n Debug for ISKB_9835 BOD fails in Entitlement ends====================================================");
		
		

	EXEC SQL UPDATE CAENTITLEMENT SET
		ELIG_ENTITL_POS =:p_ca_caentitlement_struct_h->h_entitl_pos:p_ca_caentitlement_struct_i->i_entitl_pos,	
		CCY_FOR_ENTITL =:p_ca_caentitlement_struct_h->h_entitl_ccy:p_ca_caentitlement_struct_i->i_entitl_ccy,	
		INSTR_INC_BAL =:p_ca_caentitlement_struct_h->h_instr_inc_bal:p_ca_caentitlement_struct_i->i_instr_inc_bal,	
		QUANTITY_BAL =:p_ca_caentitlement_struct_h->h_quantity_due:p_ca_caentitlement_struct_i->i_quantity_due,	
		DATEFORSEND550 =:p_ca_caentitlement_struct_h->h_sent550date:p_ca_caentitlement_struct_i->i_sent550date,	
		STATUS=:p_ca_caentitlement_struct_h->h_entitl_stat:p_ca_caentitlement_struct_i->i_entitl_stat,
		PROCESSED_DATE=:p_ca_caentitlement_struct_h->h_stat_date:p_ca_caentitlement_struct_i->i_stat_date,	
		MAKER =:p_ca_caentitlement_struct_h->h_maker:p_ca_caentitlement_struct_i->i_maker,
		MAKER_DT =:p_ca_caentitlement_struct_h->h_maker_dt:p_ca_caentitlement_struct_i->i_maker_dt,
		CHECKER =:p_ca_caentitlement_struct_h->h_checker:p_ca_caentitlement_struct_i->i_checker,
		CHECKER_DT =:p_ca_caentitlement_struct_h->h_checker_dt:p_ca_caentitlement_struct_i->i_checker_dt,
		ACCESS_STAMP=:p_ca_caentitlement_struct_h->h_access_stamp:p_ca_caentitlement_struct_i->i_access_stamp,	
		CUSTODYTAX_RATE=:p_ca_caentitlement_struct_h->h_tax_rate:p_ca_caentitlement_struct_i->i_tax_rate,
  		FRACT_DUE =:p_ca_caentitlement_struct_h->h_fract_due:p_ca_caentitlement_struct_i->i_fract_due,
		FRACT_RCVD =:p_ca_caentitlement_struct_h->h_fract_rcvd:p_ca_caentitlement_struct_i->i_fract_rcvd		
		WHERE
				ROWID=:p_ora_rowid;
		
		Alert("\n Debug for ISKB_9835 BOD fails in Entitlement starts====================================================");
		Alert(" sqlca sqlcode is **%d**\n",sqlca.sqlcode);
		Alert("\n Debug for ISKB_9835 BOD fails in Entitlement ends====================================================");
		
		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_ENTITLE_NOTFND,
														  p_ca_caentitlement_struct_h->h_corp_id,
														  p_ca_caentitlement_struct_h->h_dl_client,
														  APL_NULL_STRING
														 );
	
			APL_GOBACK_SUCCESS
			RETURN_SUCCESS	:
		
		{
			APL_IF_DEBUG
			{
				CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_Mod_EntitlRec successfully having updated all fields in Entitl record-(Modify/Reset)",NULL,NULL);
			}	
			return (APL_SUCCESS);
		}
		RETURN_FAILURE	:
		{
			APL_IF_DEBUG
			{
				CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_Mod_EntitlRec unsuccessfully having tried to update all fields in Entitl record(Modify/Reset)",NULL,NULL);
			}	
			return (APL_FAILURE);
		}
	}




int CA_ChkUURstPymt( char 			*chr_p_ca_id,
						 char				*chr_p_client,
						 int			   *int_p_count,
						 int			   *p_gp_count,
						 DEBUG_INFO_STRUCT_H  **l_debug_info_ptr
						)
{
	struct	sqlca	sqlca;
	int	int_h_pay_counter=0;		
	int	int_h_glb_pay_counter=0;		

	#ifdef APL_THREADS
			APL_SET_CONTEXT
			EXEC SQL CONTEXT USE :my_ctx_local;
	#endif


		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE,"Entering A_ChkUnrvPymt",NULL,NULL);
		}	

	
	EXEC SQL SELECT NVL(count(*),0) 
	INTO :int_h_pay_counter
	FROM CACHEQUE
	WHERE 
			CORP_ID	=:chr_p_ca_id	AND
			CLIENT =:chr_p_client AND
			STAT_PYMT	NOT IN ('RV','DL')			AND
			rownum < 2;
				
	IS_ANY_ORA_ERROR

	*int_p_count = int_h_pay_counter;

	
	EXEC SQL SELECT NVL(count(*),0) 
	INTO :int_h_glb_pay_counter
	FROM CAGLPYMT
	WHERE 
			CORP_ID	=:chr_p_ca_id AND	
			STAT_PYMT	NOT IN ('AA')			AND
			rownum < 2;
				
	IS_ANY_ORA_ERROR

	*p_gp_count =  int_h_glb_pay_counter;

	
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS	:
	{
		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE,"Exiting A_ChkUnrvPymt successfully",NULL,NULL);
		}	
		return (APL_SUCCESS);
	}
	RETURN_FAILURE	:
	{
		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE,"Exiting A_ChkUnrvPymt unsuccessfully",NULL,NULL);
		}
		return (APL_FAILURE);
	}
}

int  CA_RndEntitl(CA_CAENTITLEMENT_STRUCT_H *p_ca_caentitlement_struct_h,
					  DEBUG_INFO_STRUCT_H     **l_debug_info_ptr
						 ) 
{
	struct	sqlca	sqlca;
	int		int_decimal_len;
	double   round_inc_val=0.0;
	double   round_quantity_val=0.0;
	char		chr_l_h_instrcode_A[APL_INSTRUMENTCODE_LEN]		= APL_NULL_STRING;
	short		l_i_instr_code	 = 0;
	
	short Trunc_Cond_exists_h	=0;
	int int_period_flg1 =0;
	char  chr_mainfuncarea_h [APL_MAINFUNCAREA_LEN];
	char  chr_condid_h       [APL_CONDID_LEN];
	char	chr_l_field_val[21] =APL_NULL_STRING;
	char	chr_l_typeofinstr[4] =APL_NULL_STRING;
	short i_field_val =0;
	short i_typeofinstr =0;
	


	#ifdef APL_THREADS
			APL_SET_CONTEXT
			EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	
	EXEC SQL VAR chr_l_typeofinstr IS STRING;
	EXEC SQL VAR chr_l_field_val IS STRING;
   strcpy(chr_mainfuncarea_h,  "CA_ENTITL");
   strcpy(chr_condid_h,        "NO_TRUNC_ENT_QTY");
   Trunc_Cond_exists_h = 0;
	memset(chr_l_h_instrcode_A,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
	memset(chr_l_typeofinstr,APL_NULL_CHAR,4);

	EXEC SQL SELECT INSTR_CODE
	INTO :chr_l_h_instrcode_A:l_i_instr_code
	FROM CAEVENT
	WHERE CORP_ID = RTRIM(:p_ca_caentitlement_struct_h->h_corp_id);

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_REC_NOTFND,
														"Event Record",
														p_ca_caentitlement_struct_h->h_corp_id,
														APL_NULL_STRING )

	printf("l_h_instr_code is %s\n",chr_l_h_instrcode_A);
   if(CO_Chk_CntryEnabled(   chr_mainfuncarea_h,
                           chr_condid_h,
                           &Trunc_Cond_exists_h,
                           l_debug_info_ptr)==APL_FAILURE)
      APL_GOBACK_FAIL

   int_period_flg1=0;
   if ( CO_Chk_CcyConvDt("",&int_period_flg1,l_debug_info_ptr) == APL_FAILURE )
      APL_GOBACK_FAIL

   if ((int_period_flg1>0)&&(Trunc_Cond_exists_h>0))
   {

		EXEC SQL SELECT TRUNC(:p_ca_caentitlement_struct_h->h_instr_inc_bal,:l_mt_core_sys_params_struct_h.amount_decimal_len) INTO :round_inc_val FROM DUAL;
      IS_ANY_ORA_ERROR


		EXEC SQL SELECT INSTR_TYPE INTO :chr_l_typeofinstr:i_typeofinstr  
					FROM MT_INSTRUMENT WHERE INSTR_CODE =rtrim(:chr_l_h_instrcode_A);
		IS_ANY_ORA_ERROR
		printf(" chr_l_typeofinstr is **%s**\n",chr_l_typeofinstr);
		printf(" instr_code is **%s**\n",chr_l_h_instrcode_A);
		printf(" sqlca sqlcode is **%d**\n",sqlca.sqlcode);
      fflush(stdout);
		if(strcmp(chr_l_typeofinstr,TYPOF_INSTR_SHS)==0)
		{
			printf("I am here\n");
			EXEC SQL SELECT FIELD_VAL INTO :chr_l_field_val:i_field_val
						FROM PRO_GSSPLVAL 
						WHERE MAIN_FUN='QUANTITY_DEC_LEN'
						AND SUB_PROCESS ='DEC_FOR_EQUITIES'
						AND NATION = :g_mt_commonsys_params_struct_h.nation_code;
			IS_ANY_ORA_ERROR
			EXEC SQL SELECT TRUNC(:p_ca_caentitlement_struct_h->h_quantity_due,:chr_l_field_val) INTO :round_quantity_val FROM DUAL;
		IS_ANY_ORA_ERROR
		}
		else
		{
			EXEC SQL SELECT FIELD_VAL INTO :chr_l_field_val:i_field_val
						FROM PRO_GSSPLVAL 
						WHERE MAIN_FUN='QUANTITY_DEC_LEN'
						AND SUB_PROCESS ='DEC_FOR_BONDS'
						AND NATION = :g_mt_commonsys_params_struct_h.nation_code;
			IS_ANY_ORA_ERROR
			EXEC SQL SELECT TRUNC(:p_ca_caentitlement_struct_h->h_quantity_due,:chr_l_field_val) INTO :round_quantity_val FROM DUAL;
		IS_ANY_ORA_ERROR
		}
	p_ca_caentitlement_struct_h->h_instr_inc_bal = round_inc_val;
	p_ca_caentitlement_struct_h->h_quantity_due = round_quantity_val;
	}				
	else
	{

	EXEC SQL SELECT DEC_LEN
	INTO :int_decimal_len
	FROM	DL_CURRENCY
	WHERE CURRENCY_CD =:p_ca_caentitlement_struct_h->h_entitl_ccy;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_CCY_NOTFND,p_ca_caentitlement_struct_h->h_entitl_ccy,APL_NULL_STRING,APL_NULL_STRING)

	CO_Round(p_ca_caentitlement_struct_h->h_instr_inc_bal,
			  int_decimal_len,
			  &round_inc_val);			  	

	p_ca_caentitlement_struct_h->h_instr_inc_bal = round_inc_val;

	

	

	
	if (APL_FAILURE == CR_Proc_InstrQtyRound(	p_ca_caentitlement_struct_h->h_quantity_due,
														chr_l_h_instrcode_A,
														&round_quantity_val,
														l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	p_ca_caentitlement_struct_h->h_quantity_due = round_quantity_val;
	}

	
	APL_GOBACK_SUCCESS
	RETURN_SUCCESS	:
	{
		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_RndEntitl successfully",NULL,NULL);
		}	
		return (APL_SUCCESS);
	}
	RETURN_FAILURE	:
	{
		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE,"Exiting CA_RndEntitl unsuccessfully",NULL,NULL);
		}
		return (APL_FAILURE);
	}
}

