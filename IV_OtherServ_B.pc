




#include "stdio_64.h"
#include <string.h>
#include <stdlib.h>

#include "IV_Control_A.h"

EXEC SQL INCLUDE SQLCA;



int IV_Rtv_IVOTHSRV(IV_SERV_OTH_STRUCT *p_iv_serv_oth_struct, int *int_p_retstat, 
			DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	EXEC SQL BEGIN DECLARE SECTION;

		IV_SERV_OTH_STRUCT l_iv_serv_oth_structa;

		EXEC SQL VAR l_iv_serv_oth_structa.client IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.b_upto_date IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.service_det IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.maker IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.maker_dt IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.access_stamp IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.checker IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.checker_dt IS STRING;

		I_IV_SERV_OTH_STRUCT l_i_iv_serv_oth_struct = {0, 0, 0, 0, 0, 0, 
							0, 0, 0, 0, 0, 0, 0};
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	EXEC SQL SELECT CLIENT, SERVICE_CD, B_UPTO_DATE, SERVICE_QTY, 
			MAKER, MAKER_DT, ACCESS_STAMP, SERVICE_DET, 
			SCHDL_FEE, SERVICE_STAT, CHECKER, CHECKER_DT, INDEN_NUM
		 INTO :l_iv_serv_oth_structa INDICATOR :l_i_iv_serv_oth_struct
		 FROM IV_SERV_OTH
		 WHERE ((CLIENT = :p_iv_serv_oth_struct->client) AND
			(B_UPTO_DATE = :p_iv_serv_oth_struct->b_upto_date) AND
			(SERVICE_CD = :p_iv_serv_oth_struct->service_cd));

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}
	else if ( sqlca.sqlcode == 1403 )
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		APL_GOBACK_FAIL
	}

	if ( l_i_iv_serv_oth_struct.i_checker == -1 )
	{
		strcpy(l_iv_serv_oth_structa.checker, " ");
		strcpy(l_iv_serv_oth_structa.checker_dt, " ");

		*int_p_retstat = IV_COLUMN_NULL_ERR;
	}

	*p_iv_serv_oth_struct = l_iv_serv_oth_structa;

	if ( *int_p_retstat == IV_COLUMN_NULL_ERR )
	{
		APL_GOBACK_FAIL
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Rtv_IVOTHSRV().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
IV_Rtv_IVOTHSRV().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_Mod_IVOTHSRVNew(const IV_SERV_OTH_STRUCT *p_iv_serv_oth_struct, 
			int *int_p_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	extern int CO_RtvSysDtTime(char *chr_l_sys_date_time, 
					DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	

	char *chr_l_last = (char *)NULL;
	char chr_l_sys_date_time[APL_DATE_LEN], chr_l_sys_date[APL_DATE_LEN];

	EXEC SQL BEGIN DECLARE SECTION;

		IV_SERV_OTH_STRUCT l_iv_serv_oth_structa;

		EXEC SQL VAR l_iv_serv_oth_structa.client IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.b_upto_date IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.service_det IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.maker IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.maker_dt IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.access_stamp IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.checker IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.checker_dt IS STRING;

		I_IV_SERV_OTH_STRUCT l_i_iv_serv_oth_struct = {0, 0, 0, 0, 0, 0, 
							0, 0, 0, 0, 0, 0, 0};
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	memset(l_iv_serv_oth_structa.client, APL_NULL_CHAR, APL_CLIENT_LENGTH);
	memset(l_iv_serv_oth_structa.b_upto_date, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_iv_serv_oth_structa.service_det, APL_NULL_CHAR, 22);
	memset(l_iv_serv_oth_structa.maker, APL_NULL_CHAR, APL_USERID_LEN);
	memset(l_iv_serv_oth_structa.maker_dt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_iv_serv_oth_structa.access_stamp, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_iv_serv_oth_structa.checker, APL_NULL_CHAR, APL_USERID_LEN);
	memset(l_iv_serv_oth_structa.checker_dt, APL_NULL_CHAR, APL_DATE_LEN);

	memset(chr_l_sys_date, APL_NULL_CHAR, APL_DATE_LEN);
	memset(chr_l_sys_date_time, APL_NULL_CHAR, APL_DATE_LEN);
        /*ISKB_1737 Pallavi Changes Starts*/
	char pro_sys_date[APL_DATE_LEN]	= APL_NULL_STRING;
	int int_datediff = 0;
	short int_error_ind = APL_SUCCESS;
	char billing_period[50]	= APL_NULL_STRING;
        /*ISKB_1737 Pallavi Changes Ends*/
	if (APL_FAILURE == CO_RtvSysDtTime(chr_l_sys_date_time, l_debug_info_ptr))
	{
		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		APL_GOBACK_FAIL
	}

	strcpy(chr_l_sys_date, chr_l_sys_date_time);
	strcpy(chr_l_sys_date, strtok_r(chr_l_sys_date, " ", &chr_l_last));
	strcat(chr_l_sys_date, APL_NULL_TIME);

	l_iv_serv_oth_structa = *p_iv_serv_oth_struct;

	strcpy(l_iv_serv_oth_structa.maker_dt, chr_l_sys_date);
	strcpy(l_iv_serv_oth_structa.access_stamp, chr_l_sys_date_time);

	if ( !strlen(p_iv_serv_oth_struct->checker) )
	{
		l_i_iv_serv_oth_struct.i_checker = -1;
		l_i_iv_serv_oth_struct.i_checker_dt = -1;
	}
	else
	{
		strcpy(l_iv_serv_oth_structa.checker_dt, chr_l_sys_date);
	}
/*ISKB_1737 Pallavi Changes Starts*/
        Alert("l_iv_client_othserv_struct_h.b_upto_date..|%s|",l_iv_serv_oth_structa.b_upto_date);
        Alert("l_iv_serv_oth_structa.service_cd..|%d|",l_iv_serv_oth_structa.service_cd);
	Alert("l_iv_client_othserv_struct_h.service_det..|%s|",l_iv_serv_oth_structa.service_det);
	strcpy(billing_period,l_iv_serv_oth_structa.service_det);
	Alert("billing_period..|%s|",billing_period);
        if((l_iv_serv_oth_structa.service_cd == 98)||(l_iv_serv_oth_structa.service_cd == 99))
	{
           if (	CO_RtvSysDt(pro_sys_date,l_debug_info_ptr) == APL_FAILURE )
	   {
		APL_GOBACK_FAIL
           }
           Alert("pro_sys_date..|%s|",pro_sys_date);
           
           EXEC SQL SELECT SUBSTR(:billing_period,1,10)||' 12:00:00' INTO :billing_period FROM DUAL;
	   Alert("billing_period..11|%s|",billing_period);
	EXEC SQL SELECT TO_DATE(:pro_sys_date) - TO_DATE(:billing_period)INTO :int_datediff FROM DUAL;
		IS_ANY_ORA_ERROR

           Alert("int_datediff..|%d|",int_datediff);

		if	(	int_datediff	<	0	)
			{
				if ( CO_InsertErr(l_debug_info_ptr,
										  ERR_BILL_PERIOD_SHLD_NOTBE_FUTURE,
										  APL_NULL_STRING,
										  APL_NULL_STRING,
									     APL_NULL_STRING,
									     __LINE__,
									     __FILE__) == APL_FAILURE
					 )	
				APL_GOBACK_FAIL
				else 
				int_error_ind = APL_FAILURE;
			}
      }
/*ISKB_1737 Pallavi Changes Ends*/
	EXEC SQL INSERT INTO IV_SERV_OTH
		 VALUES (:l_iv_serv_oth_structa INDICATOR :l_i_iv_serv_oth_struct);

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Mod_IVOTHSRVNew().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
IV_Mod_IVOTHSRVNew().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_Mod_IVOTHSRVLock(IV_SERV_OTH_STRUCT *p_iv_serv_oth_struct, int *int_p_retstat, 
			 DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	EXEC SQL BEGIN DECLARE SECTION;

		IV_SERV_OTH_STRUCT l_iv_serv_oth_structa;

		EXEC SQL VAR l_iv_serv_oth_structa.client IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.b_upto_date IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.service_det IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.maker IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.maker_dt IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.access_stamp IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.checker IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.checker_dt IS STRING;

		I_IV_SERV_OTH_STRUCT l_i_iv_serv_oth_struct = {0, 0, 0, 0, 0, 0, 
							0, 0, 0, 0, 0, 0};
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	EXEC SQL SELECT CLIENT, SERVICE_CD, B_UPTO_DATE, SERVICE_QTY, 
			MAKER, MAKER_DT, ACCESS_STAMP, SERVICE_DET, 
			SCHDL_FEE, SERVICE_STAT, CHECKER, CHECKER_DT, INDEN_NUM
		 INTO :l_iv_serv_oth_structa INDICATOR :l_i_iv_serv_oth_struct
		 FROM IV_SERV_OTH
		 WHERE ((CLIENT = :p_iv_serv_oth_struct->client) AND
			(B_UPTO_DATE = :p_iv_serv_oth_struct->b_upto_date) AND
			(SERVICE_CD = :p_iv_serv_oth_struct->service_cd) AND
			(INDEN_NUM = :p_iv_serv_oth_struct->inden_num))
		 FOR UPDATE OF ACCESS_STAMP;

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}
	else if ( sqlca.sqlcode == 1403 )
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		APL_GOBACK_FAIL
	}

	if ( strcmp(l_iv_serv_oth_structa.access_stamp, p_iv_serv_oth_struct->access_stamp) )
	{
		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, ERR_ACCESSSTAMP_CHGD, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       APL_NULL_STRING, __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	if ( l_i_iv_serv_oth_struct.i_checker == -1 )
	{
		strcpy(l_iv_serv_oth_structa.checker, " ");
		strcpy(l_iv_serv_oth_structa.checker_dt, " ");

		*int_p_retstat = IV_COLUMN_NULL_ERR;
	}

	*p_iv_serv_oth_struct = l_iv_serv_oth_structa;

	if ( *int_p_retstat == IV_COLUMN_NULL_ERR )
	{
		APL_GOBACK_FAIL
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Mod_IVOTHSRVLock().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
IV_Mod_IVOTHSRVLock().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_Mod_IVOTHSRV(const IV_SERV_OTH_STRUCT *p_iv_serv_oth_struct, 
			const char p_blgenflag, 
			const INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h, 
			int *int_p_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	extern int CO_RtvSysDtTime(char *chr_l_sys_date_time, 
					DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	

	char chr_l_usermode, *chr_l_last = (char *)NULL;
	char chr_l_sys_date[APL_DATE_LEN], chr_l_sys_date_time[APL_DATE_LEN];
	int int_l_status = 0;

	EXEC SQL BEGIN DECLARE SECTION;

		IV_SERV_OTH_STRUCT l_iv_serv_oth_structa;

		EXEC SQL VAR l_iv_serv_oth_structa.client IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.b_upto_date IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.service_det IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.maker IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.maker_dt IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.access_stamp IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.checker IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.checker_dt IS STRING;

		I_IV_SERV_OTH_STRUCT l_i_iv_serv_oth_struct = {0, 0, 0, 0, 0, 0, 
							0, 0, 0, 0, 0, 0};
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	if ( !strcmp(p_intl_envdatastruct_h->h_mode, APL_FUNC_MODIFY) )
	{
		chr_l_usermode = 'M';
	}
	else if ( !strcmp(p_intl_envdatastruct_h->h_mode, APL_FUNC_DELETE) )
	{
		chr_l_usermode = 'D';
	}
	else if ( !strcmp(p_intl_envdatastruct_h->h_mode, APL_FUNC_AUTHORISE) )
	{
		chr_l_usermode = 'A';
	}

	memset(chr_l_sys_date, APL_NULL_CHAR, APL_DATE_LEN);
	memset(chr_l_sys_date_time, APL_NULL_CHAR, APL_DATE_LEN);

	if (APL_FAILURE == CO_RtvSysDtTime(chr_l_sys_date_time, l_debug_info_ptr))
	{
		APL_GOBACK_FAIL
	}

	strcpy(chr_l_sys_date, chr_l_sys_date_time);
	strcpy(chr_l_sys_date, strtok_r(chr_l_sys_date, " ", &chr_l_last));
	strcat(chr_l_sys_date, APL_NULL_TIME);

	memset(l_iv_serv_oth_structa.client, APL_NULL_CHAR, APL_CLIENT_LENGTH);
	memset(l_iv_serv_oth_structa.b_upto_date, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_iv_serv_oth_structa.maker, APL_NULL_CHAR, APL_USERID_LEN);
	memset(l_iv_serv_oth_structa.maker_dt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_iv_serv_oth_structa.service_det, APL_NULL_CHAR, 22);
	memset(l_iv_serv_oth_structa.access_stamp, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_iv_serv_oth_structa.checker, APL_NULL_CHAR, APL_USERID_LEN);
	memset(l_iv_serv_oth_structa.checker_dt, APL_NULL_CHAR, APL_DATE_LEN);

	strcpy(l_iv_serv_oth_structa.client, p_iv_serv_oth_struct->client);
	strcpy(l_iv_serv_oth_structa.b_upto_date, p_iv_serv_oth_struct->b_upto_date);
	strcpy(l_iv_serv_oth_structa.access_stamp, chr_l_sys_date_time);

	l_iv_serv_oth_structa.service_cd = p_iv_serv_oth_struct->service_cd;
	l_iv_serv_oth_structa.inden_num = p_iv_serv_oth_struct->inden_num;

	if ( chr_l_usermode == 'M' )
	{
		if ( !strcmp(p_intl_envdatastruct_h->auth_req, APL_NO_IND) && 
		     (p_blgenflag == 'N') )
		{
			l_iv_serv_oth_structa.service_stat = 'A';

			strcpy(l_iv_serv_oth_structa.maker, p_intl_envdatastruct_h->usr);
			strcpy(l_iv_serv_oth_structa.maker_dt, chr_l_sys_date);
			strcpy(l_iv_serv_oth_structa.checker, p_intl_envdatastruct_h->usr);
			strcpy(l_iv_serv_oth_structa.checker_dt, chr_l_sys_date);
		}
		else
		{
			l_iv_serv_oth_structa.service_stat = 'U';

			strcpy(l_iv_serv_oth_structa.maker, p_intl_envdatastruct_h->usr);
			strcpy(l_iv_serv_oth_structa.maker_dt, chr_l_sys_date);

			l_i_iv_serv_oth_struct.i_checker = -1;
			l_i_iv_serv_oth_struct.i_checker_dt = -1;
		}

		l_iv_serv_oth_structa.service_qty = p_iv_serv_oth_struct->service_qty;
		l_iv_serv_oth_structa.schdl_fee = p_iv_serv_oth_struct->schdl_fee;

		strcpy(l_iv_serv_oth_structa.service_det, p_iv_serv_oth_struct->service_det);
	}
	else if ( chr_l_usermode == 'D' )
	{
		l_iv_serv_oth_structa.service_stat = 'D';

		strcpy(l_iv_serv_oth_structa.maker, p_intl_envdatastruct_h->usr);
		strcpy(l_iv_serv_oth_structa.maker_dt, chr_l_sys_date);

		l_i_iv_serv_oth_struct.i_checker = -1;
		l_i_iv_serv_oth_struct.i_checker_dt = -1;
	}
	else if ( chr_l_usermode == 'A' )
	{
		l_iv_serv_oth_structa.service_stat = 'A';

		strcpy(l_iv_serv_oth_structa.checker, p_intl_envdatastruct_h->usr);
		strcpy(l_iv_serv_oth_structa.checker_dt, chr_l_sys_date);
	}

	strcpy(l_iv_serv_oth_structa.access_stamp, chr_l_sys_date_time);

	if ( chr_l_usermode == 'M' )
	{
		EXEC SQL UPDATE IV_SERV_OTH
			 SET SERVICE_DET = :l_iv_serv_oth_structa.service_det
					  INDICATOR :l_i_iv_serv_oth_struct.i_serv_detail,
			     SERVICE_QTY = :l_iv_serv_oth_structa.service_qty
					 INDICATOR :l_i_iv_serv_oth_struct.i_serv_quantity, 
			     SCHDL_FEE = :l_iv_serv_oth_structa.schdl_fee
					INDICATOR :l_i_iv_serv_oth_struct.i_schdl_fee, 
			     MAKER = :l_iv_serv_oth_structa.maker
				      INDICATOR :l_i_iv_serv_oth_struct.i_maker, 
			     MAKER_DT = :l_iv_serv_oth_structa.maker_dt
					INDICATOR :l_i_iv_serv_oth_struct.i_maker_dt, 
			     CHECKER = :l_iv_serv_oth_structa.checker
					INDICATOR :l_i_iv_serv_oth_struct.i_checker, 
			     CHECKER_DT = :l_iv_serv_oth_structa.checker_dt
					  INDICATOR :l_i_iv_serv_oth_struct.i_checker_dt,
			     ACCESS_STAMP = :l_iv_serv_oth_structa.access_stamp
					     INDICATOR 
					    :l_i_iv_serv_oth_struct.i_access_stamp, 
			     SERVICE_STAT = :l_iv_serv_oth_structa.service_stat
					   INDICATOR 
					  :l_i_iv_serv_oth_struct.i_service_stat
			 WHERE ((CLIENT = :p_iv_serv_oth_struct->client) AND
				(B_UPTO_DATE = :p_iv_serv_oth_struct->b_upto_date) AND
				(SERVICE_CD = :p_iv_serv_oth_struct->service_cd) AND
				(INDEN_NUM = :p_iv_serv_oth_struct->inden_num) AND
				(ACCESS_STAMP = :p_iv_serv_oth_struct->access_stamp));
	}
	else if ( chr_l_usermode == 'D' )
	{
		EXEC SQL UPDATE IV_SERV_OTH
			 SET MAKER = :l_iv_serv_oth_structa.maker
				      INDICATOR :l_i_iv_serv_oth_struct.i_maker, 
			     MAKER_DT = :l_iv_serv_oth_structa.maker_dt
					INDICATOR :l_i_iv_serv_oth_struct.i_maker_dt, 
			     CHECKER = :l_iv_serv_oth_structa.checker
					INDICATOR :l_i_iv_serv_oth_struct.i_checker, 
			     CHECKER_DT = :l_iv_serv_oth_structa.checker_dt
					  INDICATOR :l_i_iv_serv_oth_struct.i_checker_dt,
			     ACCESS_STAMP = :l_iv_serv_oth_structa.access_stamp
					     INDICATOR 
					    :l_i_iv_serv_oth_struct.i_access_stamp, 
			     SERVICE_STAT = :l_iv_serv_oth_structa.service_stat
					   INDICATOR 
					  :l_i_iv_serv_oth_struct.i_service_stat
			 WHERE ((CLIENT = :p_iv_serv_oth_struct->client) AND
				(B_UPTO_DATE = :p_iv_serv_oth_struct->b_upto_date) AND
				(SERVICE_CD = :p_iv_serv_oth_struct->service_cd) AND
				(INDEN_NUM = :p_iv_serv_oth_struct->inden_num) AND
				(ACCESS_STAMP = :p_iv_serv_oth_struct->access_stamp));
	}
	else if ( chr_l_usermode == 'A' )
	{
		EXEC SQL UPDATE IV_SERV_OTH
			 SET CHECKER = :l_iv_serv_oth_structa.checker
				      INDICATOR :l_i_iv_serv_oth_struct.i_checker, 
			     CHECKER_DT = :l_iv_serv_oth_structa.checker_dt
					INDICATOR :l_i_iv_serv_oth_struct.i_checker_dt, 
			     ACCESS_STAMP = :l_iv_serv_oth_structa.access_stamp
					     INDICATOR 
					    :l_i_iv_serv_oth_struct.i_access_stamp, 
			     SERVICE_STAT = :l_iv_serv_oth_structa.service_stat
					   INDICATOR 
					  :l_i_iv_serv_oth_struct.i_service_stat
			 WHERE ((CLIENT = :p_iv_serv_oth_struct->client) AND
				(B_UPTO_DATE = :p_iv_serv_oth_struct->b_upto_date) AND
				(SERVICE_CD = :p_iv_serv_oth_struct->service_cd) AND
				(INDEN_NUM = :p_iv_serv_oth_struct->inden_num) AND
				(ACCESS_STAMP = :p_iv_serv_oth_struct->access_stamp));
	}

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}
	else if ( sqlca.sqlcode == 1403 )
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		APL_GOBACK_FAIL
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Mod_IVOTHSRV().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
IV_Mod_IVOTHSRV().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_Mod_IVOTHSRVDel(const IV_SERV_OTH_STRUCT *p_iv_serv_oth_struct, 
			int *int_p_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	EXEC SQL BEGIN DECLARE SECTION;

		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	EXEC SQL DELETE FROM IV_SERV_OTH
		 WHERE ((CLIENT = :p_iv_serv_oth_struct->client) AND
			(B_UPTO_DATE = :p_iv_serv_oth_struct->b_upto_date) AND
			(SERVICE_CD = :p_iv_serv_oth_struct->service_cd) AND
			(INDEN_NUM = :p_iv_serv_oth_struct->inden_num) AND
			(ACCESS_STAMP = :p_iv_serv_oth_struct->access_stamp));

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}
	else if ( sqlca.sqlcode == 1403 )
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		APL_GOBACK_FAIL
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Mod_IVOTHSRVDel().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
IV_Mod_IVOTHSRVDel().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_Rtv_IVOTHSRVMaxSeqNum(const IV_SERV_OTH_STRUCT *p_iv_serv_oth_struct, 
				 int *p_maxseqnum, int *int_p_retstat, 
				 DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	EXEC SQL BEGIN DECLARE SECTION;

		int int_h_maxseqnum = 0;
		short int int_i_maxseqnum = 0;
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif


	EXEC SQL SELECT NVL( MAX(inden_num), 0 )
		 INTO :int_h_maxseqnum INDICATOR :int_i_maxseqnum 
		 FROM IV_SERV_OTH
		 WHERE ((CLIENT = :p_iv_serv_oth_struct->client) AND
			(B_UPTO_DATE = :p_iv_serv_oth_struct->b_upto_date) AND
			(SERVICE_CD = :p_iv_serv_oth_struct->service_cd));

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	*p_maxseqnum = int_h_maxseqnum;

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Rtv_IVOTHSRVMaxSeqNum().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
IV_Rtv_IVOTHSRVMaxSeqNum().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_Rtv_IVOTHSRVAnyRow(IV_SERV_OTH_STRUCT *p_iv_serv_oth_struct, 
			      int *int_p_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	EXEC SQL BEGIN DECLARE SECTION;

		IV_SERV_OTH_STRUCT l_iv_serv_oth_structa;
		EXEC SQL VAR l_iv_serv_oth_structa.client IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.b_upto_date IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.maker IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.maker_dt IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.access_stamp IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.service_det IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.checker IS STRING;
		EXEC SQL VAR l_iv_serv_oth_structa.checker_dt IS STRING;

		I_IV_SERV_OTH_STRUCT l_i_iv_serv_oth_struct = {0, 0, 0, 0, 0, 0, 
							0, 0, 0, 0, 0, 0, 0};
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	memset(l_iv_serv_oth_structa.client, APL_NULL_CHAR, APL_CLIENT_LENGTH);
	memset(l_iv_serv_oth_structa.b_upto_date, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_iv_serv_oth_structa.maker, APL_NULL_CHAR, APL_USERID_LEN);
	memset(l_iv_serv_oth_structa.maker_dt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_iv_serv_oth_structa.access_stamp, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_iv_serv_oth_structa.service_det, APL_NULL_CHAR, IV_DESC_LEN);
	memset(l_iv_serv_oth_structa.checker, APL_NULL_CHAR, APL_USERID_LEN);
	memset(l_iv_serv_oth_structa.checker_dt, APL_NULL_CHAR, APL_DATE_LEN);

	l_iv_serv_oth_structa.service_cd = 0L;
	l_iv_serv_oth_structa.service_qty = 0.0;
	l_iv_serv_oth_structa.schdl_fee = 0.0;
	l_iv_serv_oth_structa.inden_num = 0;
	l_iv_serv_oth_structa.service_stat = NULL;

	

	EXEC SQL SELECT CLIENT, SERVICE_CD, B_UPTO_DATE, SERVICE_QTY, 
			MAKER, MAKER_DT, ACCESS_STAMP, SERVICE_DET, 
			SCHDL_FEE, SERVICE_STAT, CHECKER, CHECKER_DT, INDEN_NUM
		 INTO :l_iv_serv_oth_structa INDICATOR :l_i_iv_serv_oth_struct
		 FROM IV_SERV_OTH
		 WHERE ((CLIENT = :p_iv_serv_oth_struct->client) AND
			(B_UPTO_DATE = :p_iv_serv_oth_struct->b_upto_date) AND
			(SERVICE_CD = :p_iv_serv_oth_struct->service_cd) AND
			(INDEN_NUM = :p_iv_serv_oth_struct->inden_num));

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}
	else if ( sqlca.sqlcode == 1403 )
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		APL_GOBACK_FAIL
	}

	if ( l_i_iv_serv_oth_struct.i_checker == -1 )
	{
		strcpy(l_iv_serv_oth_structa.checker, " ");
		strcpy(l_iv_serv_oth_structa.checker_dt, " ");
	}

	*p_iv_serv_oth_struct = l_iv_serv_oth_structa;

	if ( l_i_iv_serv_oth_struct.i_checker == -1 )
	{
		*int_p_retstat = IV_COLUMN_NULL_ERR;

		APL_GOBACK_FAIL
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
BBDb**().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
BBDb**().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}
