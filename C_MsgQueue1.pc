








#include "stdio_64.h"
#include <stdlib.h>
#include <string.h>
#include "CR_Common.h"

#include <cmqc.h>

#include "MS_Mq.h"
#include "Intellect_Common.h"
#include <string.h>
#define COMMIT_COUNT_D 500

EXEC SQL INCLUDE SQLCA;
EXEC SQL INCLUDE ORACA;

#define REC_LOCK_ORA_ERROR -54




EI_MQ_Main(int *count,char *p_ora_rowid,FILE *chr_finifile,FILE *l_errfile,FILE *l_logfile,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{



struct sqlca sqlca;

char	chr_mq_manager[MQ_MGER_NAMERR_LEN]		= APL_NULL_STRING;
char	chr_l_row_id[19]							= APL_NULL_STRING;
char	chr_l_h_business_dt[11]					= APL_NULL_STRING;
char 	chr_l_h_cntry_code[3]						= APL_NULL_STRING;
char  chr_l_app_id[9]								= APL_NULL_STRING;
char	chr_l_dt_time[APL_DATE_LEN]				= APL_NULL_STRING;
char 	chr_l_sent_msg_count[11]					= APL_NULL_STRING;
char  chr_l_desc[31]								= APL_NULL_STRING;
char  chr_l_common_flg[2]                  = APL_NULL_STRING;
char  chr_l_mqname_common[QNAME_LEN]                  = APL_NULL_STRING;
char  chr_l_mqname_instrument[QNAME_LEN]                = APL_NULL_STRING;
char  chr_l_mqname_mktprc[QNAME_LEN]                  = APL_NULL_STRING;
char  chr_l_mqname_client[QNAME_LEN]                 = APL_NULL_STRING;
char  chr_l_mqname_trdhld[QNAME_LEN]                  = APL_NULL_STRING;
char  chr_l_mqname_eodbod[QNAME_LEN]                  = APL_NULL_STRING;
char  chr_l_reply_q_common[QNAME_LEN]                 = APL_NULL_STRING;
char  chr_l_reply_q_instr[QNAME_LEN]                    = APL_NULL_STRING;
char  chr_l_reply_q_acc[QNAME_LEN]                    = APL_NULL_STRING;
char  chr_l_reply_q_mktprc[QNAME_LEN]                 = APL_NULL_STRING;
char  chr_l_reply_q_trdhld[QNAME_LEN]                 = APL_NULL_STRING;
char  chr_l_reply_q_eodbod[QNAME_LEN]                 = APL_NULL_STRING;
char  chr_l_qname[QNAME_LEN]                          = APL_NULL_STRING;
char  chr_l_reply_qname[QNAME_LEN]                    = APL_NULL_STRING;
char  chr_l_event_typ[3]                      = APL_NULL_STRING;
char  chr_l_no_of_queues[3]							= APL_NULL_STRING;
short i_mqname_common                  =  0;
short i_reply_q_common                 =  0;

short l_i_cntry_code							=	0;
short i_row_id									=	0;
short l_i_business_dt	 					=	0;
short i_reply_qname							=	0;
short i_qname									=	0;
short i_evt_typ								=	0;
int	int_l_que_no									= 	0;
int 	int_l_err_flg								=	0;
int   int_l_no_queues                   =  0;
short i_common_flg                     =  0;
short i_no_of_queues                   =  0;
short i_dt_time                        =  0;
short i_sent_msg_count                 =  0;





   MQOD     od = {MQOD_DEFAULT};    
   MQMD     md = {MQMD_DEFAULT};    
   MQPMO   pmo = {MQPMO_DEFAULT};   
      

   MQHCONN  Hcon;                   
   MQHOBJ   Hobj;                   
	MQHOBJ	Hobj_actual;
	

	MQHOBJ	Hobj_Instr;
	MQHOBJ   Hobj_Acc;
	MQHOBJ   Hobj_MktPrc;
	MQHOBJ   Hobj_TrdHld;
	MQHOBJ	Hobj_EodBod;
 
	
   MQLONG   O_options;              
   MQLONG   C_options;              
   MQLONG   CompCode;               
   MQLONG   OpenCode;               
   MQLONG   Reason;                 
   MQLONG   CReason;                
   MQLONG   messlen;                





EI_MQ_DATA_STRUCT_H *l_ei_mq_data_struct_hc = NULL;
EI_MQ_DATA_STRUCT_I *l_ei_mq_data_struct_i = NULL;
char				*chr_l_data			= NULL;


EXEC SQL VAR l_ei_mq_data_struct_hc->h_evt_typ 		IS STRING;
EXEC SQL VAR l_ei_mq_data_struct_hc->h_proc_data 			IS STRING;
EXEC SQL VAR l_ei_mq_data_struct_hc->h_business_date 	IS STRING;
EXEC SQL VAR l_ei_mq_data_struct_hc->h_status_ind 			IS STRING;
EXEC SQL VAR chr_l_row_id 							IS STRING;
EXEC SQL VAR chr_l_qname								IS STRING;
EXEC SQL VAR chr_l_reply_qname						IS STRING;
EXEC SQL VAR chr_l_mqname_common						IS STRING;
EXEC SQL VAR chr_l_h_business_dt						IS STRING;
EXEC SQL VAR chr_l_h_cntry_code						IS STRING;
EXEC SQL VAR chr_l_common_flg						IS STRING;
EXEC SQL VAR chr_l_event_typ						IS STRING;
EXEC SQL VAR chr_l_dt_time						IS STRING;
EXEC SQL VAR chr_l_sent_msg_count						IS STRING;
EXEC SQL VAR chr_l_no_of_queues						IS STRING;

l_ei_mq_data_struct_hc = (EI_MQ_DATA_STRUCT_H *)calloc(1,sizeof(EI_MQ_DATA_STRUCT_H));
l_ei_mq_data_struct_i = (EI_MQ_DATA_STRUCT_I *)calloc(1,sizeof(EI_MQ_DATA_STRUCT_I));
chr_l_data		= (char *)calloc(1,sizeof(char)* MQ_PUT_DATA_LEN);


APL_MALLOC_FAIL(l_ei_mq_data_struct_hc);
APL_MALLOC_FAIL(l_ei_mq_data_struct_i);
APL_MALLOC_FAIL(chr_l_data);


CO_ProcMonitor(APL_OUT_FILE,"Entered IMsgQueueMainFn",NULL,NULL);



	if (CO_ReadToken(chr_finifile,"MQ_MANAGER",chr_mq_manager,l_debug_info_ptr) == APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}
	if(!strlen(chr_mq_manager))
	{
		APL_GOBACK_FAIL
	}
	

CO_ProcMonitor(APL_OUT_FILE,chr_mq_manager,NULL,NULL);


	if ((*count) != 1)
	{
		CO_ProcMonitor(l_logfile,"Ready For Connection\n",NULL,NULL);
	}

	MQCONN(chr_mq_manager,              
          &Hcon,                   
          &CompCode,               
          &CReason);               
	
   	if ( (CompCode == MQCC_FAILED) || (CReason != MQRC_NONE) )
			{
				fprintf(l_errfile,"MQCONN ended with reason h_code %ld\n", CReason);
				CO_ProcMonitor(APL_OUT_FILE,"MQCONN ended",NULL,NULL);
				int_l_err_flg = 1;	
				APL_GOBACK_FAIL 
			}
		else
			{
				CO_ProcMonitor(APL_OUT_FILE,"MQCONN Established",NULL,NULL);
				if ((*count) != 1)
				{
					CO_ProcMonitor(l_logfile,"MQCONN Established \n",NULL,NULL);
					CO_ProcMonitor(APL_OUT_FILE,"MQCONN Established",NULL,NULL);
				}
			}

	
		
      EXEC SQL SELECT nation_code INTO :chr_l_h_cntry_code:l_i_cntry_code
                              FROM MT_COMMON_SYS_PARAMS;


            IS_ANY_ORA_ERROR
     

      EXEC SQL SELECT map_val INTO :chr_l_no_of_queues:i_no_of_queues 
										FROM PRO_SGENSTAT WHERE
										map_type='NO_OF_QUEUES' ;
				IS_ANY_ORA_ERROR
		int_l_no_queues = atol(chr_l_no_of_queues);

    
      EXEC SQL SELECT map_val INTO :chr_l_common_flg:i_common_flg
										FROM PRO_SGENSTAT WHERE
										map_type='COMMON_FLAG' ;
             IS_ANY_ORA_ERROR


      if(strcmp(chr_l_common_flg,"Y")== 0)
          {
				EXEC SQL SELECT QUEUE_NAME ,RPLY_QUEUE_NAME 
							INTO :chr_l_mqname_common:i_mqname_common , chr_l_reply_q_common:i_reply_q_common								
							FROM PRO_MQNAMES
                     WHERE nation_code=:chr_l_h_cntry_code
									AND EVENT_CLASS is null; 
            if(sqlca.sqlcode == -2112)
					{
					fprintf(l_errfile,"If Common queue is used for the country then there should be only one row in table cmqnames for that country. \n");
					}
	   			IS_ANY_ORA_ERROR
			 }
      else if(strcmp(chr_l_common_flg,"N")==0)
			 {
            EXEC SQL DECLARE q_cur CURSOR FOR
				SELECT  QUEUE_NAME,RPLY_QUEUE_NAME,EVENT_CLASS	  
				FROM PRO_MQNAMES
				WHERE nation_code=:chr_l_h_cntry_code
						AND EVENT_CLASS is null;
		      IS_ANY_ORA_ERROR

            EXEC SQL OPEN q_cur;
				for(;;)
					{
					
						memset(chr_l_qname,APL_NULL_CHAR,QNAME_LEN);
						memset(chr_l_reply_qname,APL_NULL_CHAR,QNAME_LEN);

					  EXEC SQL FETCH q_cur INTO :chr_l_qname:i_qname ,:chr_l_reply_qname:i_reply_qname , :chr_l_event_typ:i_evt_typ; 
					  			IS_ANY_ORA_ERROR_CURSOR
					  if ( !strlen(chr_l_qname) )
   						{
      						APL_DATA_MISSING( "QUEUE NAME",
                        						APL_NULL_STRING,
                        						APL_NULL_STRING );
   						}
                if ( !strlen(chr_l_event_typ) )
   						{
      						APL_DATA_MISSING( "EVENT TYPE",
                       							 APL_NULL_STRING,
                      						    APL_NULL_STRING );
  							 }
                 if(strcmp(chr_l_event_typ,MQ_INSTRUMENT) == 0)
							{
								strcpy(chr_l_mqname_instrument,chr_l_qname);
								strcpy(chr_l_reply_q_instr,chr_l_reply_qname);
							}
                 else if(strcmp(chr_l_event_typ,MQ_CLIENT) == 0)
							{
								strcpy(chr_l_mqname_client,chr_l_qname);
								strcpy(chr_l_reply_q_acc,chr_l_reply_qname);

					      }
                 else if(strcmp(chr_l_event_typ,MQ_MKTPRC) == 0)
							{
								strcpy(chr_l_mqname_mktprc,chr_l_qname);
								strcpy(chr_l_reply_q_mktprc,chr_l_reply_qname);
			            }
					 else if(strcmp(chr_l_event_typ,MQ_DEALHLD) == 0)
                     {
                        strcpy(chr_l_mqname_trdhld,chr_l_qname);
                        strcpy(chr_l_reply_q_trdhld,chr_l_reply_qname);
                     }
                else if(strcmp(chr_l_event_typ,MQ_BOD) == 0 || strcmp(chr_l_event_typ,MQ_EOD) == 0 )
                     {
                        strcpy(chr_l_mqname_eodbod,chr_l_qname);
                        strcpy(chr_l_reply_q_eodbod,chr_l_reply_qname);
                     }	

					}
          EXEC SQL CLOSE q_cur;			
         }
			else
			{
				fprintf(l_errfile,"The CODE_VAL i.e COMMON_FLAG  in csgenstat should be 'Y' or 'N'\n "); 			
				APL_GOBACK_FAIL
			}
	

	 


	for(int_l_que_no; int_l_que_no < int_l_no_queues; int_l_que_no++)
		{
			if (int_l_err_flg != 0)
				{
					APL_GOBACK_FAIL
				}
 			if (strcmp(chr_l_common_flg,"Y") == 0)
				{
					strcpy(od.ObjectName,chr_l_mqname_common);  
				}
			else				
				{
				switch(int_l_que_no)			
				{
					case 0:
					{	
						strcpy(od.ObjectName,chr_l_mqname_instrument);
						break;
					}
				
					case 1:
					{
						strcpy(od.ObjectName,chr_l_mqname_mktprc);
						break;
					}
				
					case 2:
					{
						strcpy(od.ObjectName,chr_l_mqname_client);
						break;
					}
		
					case 3:
					{
						strcpy(od.ObjectName,chr_l_mqname_trdhld);
						break;
					}
				
					case 4:
					{
						strcpy(od.ObjectName,chr_l_mqname_eodbod);
						break;
					}


					default:
					{
						fprintf(l_errfile,"Check number of queues\n");
						CO_ProcMonitor(APL_OUT_FILE,"Check number of queues",NULL,NULL);
						strcpy(od.ObjectName,APL_NULL_STRING);
					}
				}
				}	

				if ((*count) != 1)
					{
						CO_ProcMonitor(l_logfile,"",NULL,NULL);
						fprintf(l_logfile,"Opening Queue %s\n",od.ObjectName);
						CO_ProcMonitor(APL_OUT_FILE,"Opening queues",NULL,NULL);
					}

					O_options = MQOO_OUTPUT                
                           + MQOO_FAIL_IF_QUIESCING;  					

				CO_ProcMonitor(APL_OUT_FILE,"Opening queue",NULL,NULL); 


				 MQOPEN(  Hcon,	   
                     &od,        
                     O_options,  
                     &Hobj,      
                     &OpenCode,   
                     &Reason);   

               if ( Reason != MQRC_NONE )
                  {
                     fprintf(l_errfile,"MQOPEN ended with reason h_code %dl for queue %s\n", Reason,od.ObjectName);
							int_l_err_flg = 1;
							APL_GOBACK_FAIL
                  }
               if (OpenCode == MQCC_FAILED)
                  {
                     fprintf(l_errfile,"Unable to open queue %s for output\n", od.ObjectName);
							int_l_err_flg = 1;
							APL_GOBACK_FAIL
                  }	
					
					if ((Reason == MQRC_NONE) || (OpenCode != MQCC_FAILED)) 
						{
							if ((*count) != 1)
							{
								CO_ProcMonitor(l_logfile,"",NULL,NULL);
								fprintf(l_logfile,"Queue %s successfully opened\n",od.ObjectName);
							}

							if (strcmp(chr_l_common_flg,"Y") == 0) 
								{
									Hobj_actual = Hobj; 
								}
							else
								{
									switch (int_l_que_no)
									{
										case 0	:
											{
												Hobj_Instr = Hobj ;
												break;
											}
										case 1	:
											{
												Hobj_MktPrc = Hobj;
												break;
											}
										case 2	:
											{
												Hobj_Acc = Hobj;
												break;
											}
										case 3	:
											{
												Hobj_TrdHld = Hobj;
												break;
											}
										case 4	:
											{
												Hobj_EodBod = Hobj;
												break;
											}
										default 	:
											{
												break;
											}
									}
							}			 
						}			
						
			
		}						


					CO_ProcMonitor(APL_OUT_FILE,"Queues Opened Successfully",NULL,NULL);

		

for( ; ; )
{

	sleep(5);


	EXEC SQL DECLARE mq_data_cur CURSOR FOR
				SELECT ROWID,PRO_MQ_DATA.*
						FROM PRO_MQ_DATA
						WHERE status_ind = 'N' 
						ORDER BY identity_no;


  	EXEC SQL OPEN mq_data_cur;
	IS_ANY_ORA_ERROR 
	for( ; ; ) 
	{
		
		memset(l_ei_mq_data_struct_hc,NULL,sizeof(EI_MQ_DATA_STRUCT_H));
		memset(l_ei_mq_data_struct_i,NULL,sizeof(EI_MQ_DATA_STRUCT_I));

		EXEC SQL FETCH mq_data_cur INTO :chr_l_row_id:i_row_id, :l_ei_mq_data_struct_hc:l_ei_mq_data_struct_i;
		IS_ANY_ORA_ERROR	
	
		if (sqlca.sqlcode == 1403)
			{
				CO_ProcMonitor(APL_OUT_FILE,"No New Record Found ",NULL,NULL);
				break;
			}


		EXEC SQL SELECT to_char(to_date(:l_ei_mq_data_struct_hc->h_business_date),'DD/MM/YYYY')
                              INTO :chr_l_h_business_dt:l_i_business_dt
                              FROM DUAL;

				IS_ANY_ORA_ERROR	



				strncpy(md.StrucId,MQMD_STRUC_ID,(size_t)4);
				md.Version 				= MQMD_VERSION_1;
				md.Report  				= MQRO_NONE;
				md.MsgType				= MQMT_DATAGRAM;
				md.Expiry				= MQEI_UNLIMITED;
				md.Feedback 			= MQFB_NONE;
				md.Encoding				= MQENC_NATIVE; 
				md.CodedCharSetId		= MQCCSI_Q_MGR; 
				strncpy(md.Format,MQFMT_STRING,(size_t)MQ_FORMAT_LENGTH);
				md.Priority				= MQPRI_PRIORITY_AS_Q_DEF;
				md.Persistence			= MQPER_PERSISTENT;
				
				strcpy(md.ReplyToQMgr,APL_NULL_STRING);

				if (CO_ReadToken(chr_finifile,"INTL_NAME",md.ApplIdentityData,l_debug_info_ptr) == APL_FAILURE)
   			{
      			APL_GOBACK_FAIL;
   			}

				md.PutApplType			= MQAT_UNIX;

				if (CO_ReadToken(chr_finifile,"INTL_NAME",md.PutApplName,l_debug_info_ptr) == APL_FAILURE)
            {
               APL_GOBACK_FAIL;
            }

				
				strcpy(chr_l_app_id,"SMAC2000");	
					
		
				

		   	memset(chr_l_data,APL_NULL_CHAR,MQ_PUT_DATA_LEN);
            strcpy(chr_l_data,chr_l_h_cntry_code);
            strcat(chr_l_data,chr_l_h_business_dt);
            strcat(chr_l_data,chr_l_app_id);
            strcat(chr_l_data,l_ei_mq_data_struct_hc->h_evt_typ);

						



		if (strcmp(MQ_INSTRUMENT,l_ei_mq_data_struct_hc->h_evt_typ) == 0)
			{
			
				strcat(chr_l_data,l_ei_mq_data_struct_hc->h_proc_data);
				
				if ( strcmp(chr_l_data,APL_NULL_STRING) != 0)
					{	

					if (strcmp(chr_l_common_flg,"Y") != 0)
						{	
							Hobj_actual = Hobj_Instr;
							strcpy(md.ReplyToQ,chr_l_reply_q_instr);
						}
					else
						{
							strcpy(md.ReplyToQ,chr_l_reply_q_common);
						}

					messlen = strlen(chr_l_data) ;
				
						 MQPUT(  Hcon,       
                           Hobj_actual,   
                           &md,        
                           &pmo,       
                           messlen,    
                           chr_l_data,     
                           &CompCode,  
                           &Reason);   

                     if (Reason != MQRC_NONE)
                     {
								fprintf(l_errfile,"MQPUT ended with the Reason Code %dl for %s having rowid %s and seq no %d\n", Reason,chr_l_mqname_instrument,chr_l_row_id,l_ei_mq_data_struct_hc->h_sequence_no);

								CO_ProcMonitor(APL_OUT_FILE,"MQPUT Failed",NULL,NULL);
								int_l_err_flg = 1;
								APL_GOBACK_FAIL
							}
						
					}	

				EXEC SQL UPDATE PRO_MQ_DATA SET status_ind = 'P' WHERE rowid = :chr_l_row_id;

				EXEC SQL COMMIT;			

				fprintf(l_logfile,"Data having identity_no %d and rowid %s is successfully pushed into Queue %s\n",l_ei_mq_data_struct_hc->h_sequence_no,chr_l_row_id,chr_l_mqname_instrument);

			}




		if (strcmp(l_ei_mq_data_struct_hc->h_evt_typ,MQ_MKTPRC) == 0)
			{
				
				strcat(chr_l_data,l_ei_mq_data_struct_hc->h_proc_data);

				if ( strcmp(chr_l_data,APL_NULL_STRING) != 0)
               {

					if (strcmp(chr_l_common_flg,"Y") != 0)
                 	{
                    	Hobj_actual = Hobj_MktPrc;
							strcpy(md.ReplyToQ,chr_l_reply_q_mktprc);
                  }
               else
                  {
                     strcpy(md.ReplyToQ,chr_l_reply_q_common);
                  }

               messlen = strlen(chr_l_data) ;

                   MQPUT(  Hcon,       
                           Hobj_actual,       
                           &md,        
                           &pmo,       
                           messlen,    
                           chr_l_data,     
                           &CompCode,  
                           &Reason);   

                     if (Reason != MQRC_NONE)
                     {
								fprintf(l_errfile,"MQPUT ended with the Reason Code %dl for %s having rowid %s and seq no %d\n", Reason,chr_l_mqname_mktprc,chr_l_row_id,l_ei_mq_data_struct_hc->h_sequence_no);

								CO_ProcMonitor(APL_OUT_FILE,"MQPUT Failed",NULL,NULL);
								int_l_err_flg = 1;
								APL_GOBACK_FAIL
                     }

               }


					EXEC SQL UPDATE PRO_MQ_DATA SET status_ind = 'P' WHERE rowid = :chr_l_row_id;

					EXEC SQL COMMIT;			

				fprintf(l_logfile,"Data having identity_no %d and rowid %s is successfully pushed into Queue %s\n",l_ei_mq_data_struct_hc->h_sequence_no,chr_l_row_id,chr_l_mqname_mktprc);

			}





		if (strcmp(l_ei_mq_data_struct_hc->h_evt_typ,MQ_CLIENT) == 0)
			{

				strcat(chr_l_data,l_ei_mq_data_struct_hc->h_proc_data);

				if ( strcmp(chr_l_data,APL_NULL_STRING) != 0)
               {

					if (strcmp(chr_l_common_flg,"Y") != 0)
                  {
                     Hobj_actual = Hobj_Acc;
							strcpy(md.ReplyToQ,chr_l_reply_q_acc);
                  }
               else
                  {
                     strcpy(md.ReplyToQ,chr_l_reply_q_common);
                  }

               messlen = strlen(chr_l_data) ;

                   MQPUT(  Hcon,       
                           Hobj_actual,       
                           &md,        
                           &pmo,       
                           messlen,    
                           chr_l_data,     
                           &CompCode,  
                           &Reason);   

                     if (Reason != MQRC_NONE)
                     {
								fprintf(l_errfile,"MQPUT ended with the Reason Code %dl for %s having rowid %s and seq no %d\n", Reason,chr_l_mqname_client,chr_l_row_id,l_ei_mq_data_struct_hc->h_sequence_no);

								CO_ProcMonitor(APL_OUT_FILE,"MQPUT Failed",NULL,NULL);
								int_l_err_flg = 1;
								APL_GOBACK_FAIL
                     }


					EXEC SQL UPDATE PRO_MQ_DATA SET status_ind = 'P' WHERE rowid = :chr_l_row_id;

					EXEC SQL COMMIT;			

				fprintf(l_logfile,"Data having identity_no %d and rowid %s is successfully pushed into Queue %s\n",l_ei_mq_data_struct_hc->h_sequence_no,chr_l_row_id,chr_l_mqname_client);

               }

			}





      if (strcmp(l_ei_mq_data_struct_hc->h_evt_typ,MQ_DEALHLD) == 0)
         {

            if(!strncmp(l_ei_mq_data_struct_hc->h_proc_data,chr_l_data,20))
				  {
					  memset(chr_l_data,APL_NULL_CHAR,MQ_PUT_DATA_LEN);
                 strcpy(chr_l_data,l_ei_mq_data_struct_hc->h_proc_data);
              }
				else  
              {
                 strcat(chr_l_data,l_ei_mq_data_struct_hc->h_proc_data);

				  }
            
                
            if ( strcmp(chr_l_data,APL_NULL_STRING) != 0)
               {

					if (strcmp(chr_l_common_flg,"Y") != 0)
                  {
                     Hobj_actual = Hobj_TrdHld;
							strcpy(md.ReplyToQ,chr_l_reply_q_trdhld);
                  }
               else
                  {
                     strcpy(md.ReplyToQ,chr_l_reply_q_common);
                  }

               messlen = strlen(chr_l_data) ;

                   MQPUT(  Hcon,       
                           Hobj_actual,
                           &md,        
                           &pmo,       
                           messlen,    
                           chr_l_data,     
                           &CompCode,  
                           &Reason);   

                     if (Reason != MQRC_NONE)
                     {
                        fprintf(l_errfile,"MQPUT ended with the Reason Code %dl for %s having rowid %s and seq no %d\n", Reason,chr_l_mqname_trdhld,chr_l_row_id,l_ei_mq_data_struct_hc->h_sequence_no);

                        CO_ProcMonitor(APL_OUT_FILE,"MQPUT Failed",NULL,NULL);
                        int_l_err_flg = 1;
                        APL_GOBACK_FAIL
                     }

				EXEC SQL UPDATE PRO_MQ_DATA SET status_ind = 'P' WHERE rowid = :chr_l_row_id;

            EXEC SQL COMMIT;

            fprintf(l_logfile,"Data having identity_no %d and rowid %s is successfully pushed into Queue %s\n",l_ei_mq_data_struct_hc->h_sequence_no,chr_l_row_id,chr_l_mqname_trdhld);

               }
		 }





      if ((strcmp(l_ei_mq_data_struct_hc->h_evt_typ,MQ_BOD) == 0)||(strcmp(l_ei_mq_data_struct_hc->h_evt_typ,MQ_EOD) == 0))
         {


			

				if (strcmp(l_ei_mq_data_struct_hc->h_evt_typ,MQ_BOD) == 0)
					{
						strcpy(chr_l_desc,"Start Of Day for Branch ");
						strcat(chr_l_desc,chr_l_h_cntry_code);
						strcat(chr_l_desc,"    ");
					} 		

				else 
 					{
						strcpy(chr_l_desc,"End Of Day for Branch ");
                  strcat(chr_l_desc,chr_l_h_cntry_code);
                  strcat(chr_l_desc,"      ");
					}

				strcat(chr_l_data,chr_l_desc);

				EXEC SQL SELECT BUSS_DATE INTO :chr_l_dt_time:i_dt_time FROM PRO_MQ_DATA where rowid = :chr_l_row_id;
				
				IS_ANY_ORA_ERROR
			
				strcat(chr_l_data,chr_l_dt_time);
				
				if (strcmp(l_ei_mq_data_struct_hc->h_evt_typ,MQ_EOD) == 0)
					{
						strcat(chr_l_data,l_ei_mq_data_struct_hc->h_proc_data);
					}


            if ( strcmp(chr_l_data,APL_NULL_STRING) != 0)
               {
					
					if (strcmp(chr_l_common_flg,"Y") != 0)
                  {
                     Hobj_actual = Hobj_EodBod;
							strcpy(md.ReplyToQ,chr_l_reply_q_eodbod);
                  }
               else
                  {
                     strcpy(md.ReplyToQ,chr_l_reply_q_common);
                  }

               messlen = strlen(chr_l_data) ;

                   MQPUT(  Hcon,       
                           Hobj_actual,
                           &md,        
                           &pmo,       
                           messlen,    
                           chr_l_data,     
                           &CompCode,  
                           &Reason);   

                     if (Reason != MQRC_NONE)
                     {
                        fprintf(l_errfile,"MQPUT ended with the Reason Code %dl for %s having rowid %s and seq no %d\n", Reason,chr_l_mqname_eodbod,chr_l_row_id,l_ei_mq_data_struct_hc->h_sequence_no);

                        CO_ProcMonitor(APL_OUT_FILE,"MQPUT Failed",NULL,NULL);
                        int_l_err_flg = 1;
                        APL_GOBACK_FAIL
                     }


            
				EXEC SQL UPDATE PRO_MQ_DATA SET status_ind = 'P' WHERE rowid = :chr_l_row_id;

            EXEC SQL COMMIT;

            fprintf(l_logfile,"Data having identity_no %d and rowid %s is successfully pushed into Queue %s\n",l_ei_mq_data_struct_hc->h_sequence_no,chr_l_row_id,chr_l_mqname_eodbod);

               }



			}
			
			

   CO_ProcMonitor(l_logfile,"Record Committed",NULL,NULL);
	CO_ProcMonitor(APL_OUT_FILE,"Record Committed",NULL,NULL); 

	}

}
		

		

RETURN_SUCCESS:

		   

   EXEC SQL CLOSE mq_data_cur ;

   

	if ((*count) != 1)
	{
		CO_ProcMonitor(l_logfile,"Disconnecting the MQCONN \n",NULL,NULL);
	}

	CO_ProcMonitor(APL_OUT_FILE,"Disconnecting the MQCONN",NULL,NULL);

   MQDISC(  &Hcon,
            &CompCode,
            &Reason);

   if (Reason != MQRC_NONE)
      {
         fprintf(l_errfile,"Problem Occurred in Closing of MQ  Connection due to Reason %dl\n",Reason);
      }

	CO_ProcMonitor(APL_OUT_FILE,"Exiting successfully  out of EI_MQ_Main()\n",NULL,NULL);
		  APL_FREE(l_ei_mq_data_struct_hc);
		  APL_FREE(l_ei_mq_data_struct_i);
		  APL_FREE(chr_l_data);
		  *count = 1;
		  fflush(l_logfile);
        fflush(l_errfile);
		  fflush(APL_OUT_FILE);

	return APL_SUCCESS;
	
RETURN_FAILURE:

	CO_ProcMonitor(APL_OUT_FILE,"Exiting unsuccesfully out of EI_MQ_Main()\n",NULL,NULL);
	
	

	EXEC SQL CLOSE mq_data_cur ;

	



	CO_ProcMonitor(APL_OUT_FILE,"Disconnecting the MQCONN",NULL,NULL);
	 CO_ProcMonitor(l_errfile, APL_NULL_STRING, l_debug_info_ptr,NULL);
	MQDISC(	&Hcon,
				&CompCode,
				&Reason);

	if (Reason != MQRC_NONE)
		{
			fprintf(l_errfile,"Problem Occurred in Closing of MQ  Connection due to Reason %dl\n",Reason);
		}
		  APL_FREE(l_ei_mq_data_struct_hc);
		  APL_FREE(l_ei_mq_data_struct_i);
		  APL_FREE(chr_l_data);
		  *count = 0;
		  fflush(l_logfile);
		  fflush(l_errfile);
		  fflush(APL_OUT_FILE);

	return APL_FAILURE;
}


