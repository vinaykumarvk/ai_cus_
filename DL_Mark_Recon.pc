/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         :      DEAL PROCESSING
 *
 * File Name           :      DL_Mark_Recon.pc
 *
 * Description         :      DEAL Mark Recon
 *
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author           Description        RFS No.
 * ---------   --------  ---------------  ------------------   ---------
 * 
 *************************************************************************/



#include<stdio_64.h>
#include "Intellect_Common.h"
#include "Intellect_Interface.h"
#include "DL_Interface.h"
#include "BT_Common.h"
#include "CR_Common.h"
#include "Intellect_Error.h"
#include "CO_IndStructdef.h"

#define DATA_FIELD_SEPRTR ''
#define DATA_VALUE_SEPRTR ''


EXEC SQL INCLUDE SQLCA.H;

int main(int argc,char **argv) //AIX-Warnings Removal 
{	
	 DEBUG_INFO_STRUCT_H **l_debug_info_ptr = (DEBUG_INFO_STRUCT_H **) NULL;
	 l_debug_info_ptr = (DEBUG_INFO_STRUCT_H **)calloc(1,sizeof(DEBUG_INFO_STRUCT_H *)); 
	 
	
	 INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h;
	 p_intl_envdatastruct_h =(INTL_ENV_DATA_STRUCT_H *) calloc(1,sizeof(INTL_ENV_DATA_STRUCT_H));
	 memset(p_intl_envdatastruct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H));
	 APL_MALLOC_FAIL(p_intl_envdatastruct_h);

	 
 	 short int_ret_val = 0;
	 int l_int_num = 0;
	 int l_int_num1 = 0;
	 int l_flag = 0;
	 int int_error_flag = APL_SUCCESS;

	 char *p_user = NULL;
	 char *p_filename = NULL;
	 char  **temp = ( char **)NULL;
	 char  **temp1 = ( char **)NULL;
	 char	query[200] = APL_NULL_STRING;
 	 char	query1[200] = APL_NULL_STRING;
	 char  p_env_str[2000] = APL_NULL_STRING;

	 char *chr_db_id = NULL;
	 char *chr_db_pwd = NULL;
	 char l_cln_code[11] = APL_NULL_STRING;
	 char l_ref_no[17] = APL_NULL_STRING;	 
	 char l_records[400] = APL_NULL_STRING;
	 char l_pkey[400] = APL_NULL_STRING;
	 char l_pkey_fail[400] = APL_NULL_STRING;
	 char l_mode[10] = APL_NULL_STRING;
	 char l_status[3] = APL_NULL_STRING;
     char l_clh_flg[2] = APL_NULL_STRING;
	 char l_pkey_temp[400] = APL_NULL_STRING;
	 char l_pkey_fail_temp[400] = APL_NULL_STRING;
	 
	 int i = 0;
  
	 FILE *l_logfile = (FILE *)NULL;
	 FILE *p_logfile = NULL;

	 printf("ENV 0 |%s|\n",argv[0]); 	 
 	 printf("ENV 1 |%s|\n",argv[1]); 	 
 	 printf("ENV 2 |%s|\n",argv[2]); 
	 printf("ENV 3 |%s|\n",argv[3]); 
	 printf("ENV 4 |%s|\n",argv[4]); 
	 printf("ENV 5 |%s|\n",argv[5]); 
	 printf("ENV 6 |%s|\n",argv[6]); 
	 printf("ENV 7 |%s|\n",argv[7]); 
	 printf("ENV 8 |%s|\n",argv[8]); 
     			
	strcpy(l_mode,argv[4]);
	printf("MODE IS |%s|\n",l_mode);
	if(	CO_Get_DBConnect(l_debug_info_ptr) == APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}

	/***********	Processing INPUT PARAMETERS	START	**********/
	printf("ENTERING To Processing INPUT PARAMETERS\n");

	/*printf("APL_LOGFILE_DESC|%s|l_logfile|%s|argv[5]|%s|argv|%S|",APL_LOGFILE_DESC,l_logfile,argv[5],argv);*/
	if (APL_FAILURE == CO_Rtv_RptFileName( "7g",
				APL_LOGFILE_DESC,
				100,
				argv[5],
				argv,
				&l_logfile,
				l_debug_info_ptr ) ) 
		{
			CO_ProcMonitor(l_logfile, "Failure from CO RTY:", l_debug_info_ptr, NULL);
			APL_GOBACK_FAIL
		} 


		

	if(BT_Status_Update(argv[0],
				argv[1],
				argv[2],
				APL_STARTED_STATUS,
				l_debug_info_ptr) ==APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}

	
	//printf("APL_LOGFILE_DESC|%s|l_logfile|%s|argv[5]|%s|argv|%S|",APL_LOGFILE_DESC,l_logfile,argv[5],argv); Changes done for AIX Migration
	printf("APL_LOGFILE_DESC|%s|argv[5]|%s|",APL_LOGFILE_DESC,argv[5]);
	if(APL_FAILURE == CO_SplitStr(argv[9],
				'|',
				&l_int_num,&temp))
		{
			CO_ProcMonitor(l_logfile, "Failure from StrSplitFn", l_debug_info_ptr, NULL);
			APL_GOBACK_FAIL

		}
		
    if(sqlca.sqlcode)
		{
			APL_GOBACK_FAIL
		}

	printf("\n no of arguments are |%d|\n", l_int_num);
	
	for(i=0;i<l_int_num;i++)
	{	
		printf("\nENTERING FOR LOOP\n");
		strcpy(l_records,temp[i]);
		printf("\n  argument |%d| is|%s|",i,temp[0]);
		
		
		
		/*EXEC SQL SELECT STATUS INTO :l_status from DL_EXCHOBLIGATION	WHERE INSTR_CD||';'||SETTLEMENT_NO||';'||DEAL_DT
		 	in (:l_records);
		 printf("STATUS IS |%s|\n",l_status);
		 
		*/	
	
		printf("\n********Entering to update Status*********\n");
		printf("\nl_records is |%s|",l_records);
		sprintf(query,"UPDATE DL_EXCHOBLIGATION  set STATUS = 'RC'  WHERE INSTR_CD||';'||SETTLEMENT_NO||';'||TO_CHAR(DEAL_DT,'DD/MM/YYYY') in '%s'",l_records);
		printf("\nQUERY IS |%s|\n",query);
		EXEC SQL EXECUTE IMMEDIATE :query;
		IS_ANY_ORA_ERROR
		printf("\n  Updat the  Status of Record  |%s|",temp[i]);
		
			
							
	}	

	/*
	EXEC SQL COMMIT WORK;
	*/
	
	
	RETURN_SUCCESS :
		CO_ProcMonitor(l_logfile, "SUCESS IN MAIN", l_debug_info_ptr, NULL);

	if(BT_Status_Completed(argv[0],
				argv[1],
				argv[2],
				l_debug_info_ptr)   ==  APL_FAILURE )
	{
		APL_GOBACK_FAIL
	}


	CO_Proc_RptClose(l_logfile, l_debug_info_ptr);



	EXEC SQL COMMIT WORK;

	if(sqlca.sqlcode != 0)APL_GOBACK_FAIL
		exit(0);

	RETURN_FAILURE    :
	/*CO_Proc_RptClose(l_logfile, l_debug_info_ptr);
	CO_ProcMonitor(l_logfile, "Failure in prog", l_debug_info_ptr, NULL);*/

	exit(APL_FAILURE);
		 
}
