/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
*/
/*********************************************************************
 *
 * Module Name         :      Master Maintenance
 *
 * File Name           :      DL_UpdDL_Single_Prematch.pc
 *
 * Description         :      This file contains db functions for updating
 *                            Master Details.
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author         Description       RFS No.
 * ---------   --------  ------------     -------------     ---------
 * 19/11/2008   1.0       Sheetal        New file       IB_PH3_53
 *
 *********************************************************************/


#include "CO_HostStructdef.h"

EXEC SQL INCLUDE SQLCA.H;

int DL_UpdSingle_Prematch(DL_SINGLE_PREMATCH_STRUCT_H *p_dl_single_prematch_struct_h,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr) 
{
	printf("JC::: In function DL_UpdSingle_Prematch with mode [%s]\n", p_intl_envdatastruct_h->h_mode);
	/* Variable Declarations */
	DL_SINGLE_PREMATCH_STRUCT_I *l_dl_single_prematch_struct_i;

	struct sqlca sqlca;

	char chr_acc_stamp_compare[APL_DATE_LEN] = APL_NULL_STRING;
	char chr_status_compare[APL_STATUS_LEN] = APL_NULL_STRING;
	char chr_sys_access_stamp[APL_DATE_LEN] = APL_NULL_STRING;
	short p_i_maker, p_i_makerdt, p_i_checker, p_i_checkerdt, p_i_access_stamp;
	short p_i_access_stamp_compare;
	short p_i_status = 0;
	int int_error_flag = APL_SUCCESS;
	int int_l_rowexists = 0;
	char  *l_key_codes[22];
	char  *l_key_values[22];
	char  chr_l_table_name[50] = APL_NULL_STRING;
	char  chr_l_field_val[40] = APL_NULL_STRING;

	int	int_retval = APL_SUCCESS;
	#ifdef APL_THREADS
	APL_SET_CONTEXT
	EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	APL_FUNCTION_ENTER(APL_OUT_FILE)

	l_dl_single_prematch_struct_i=(DL_SINGLE_PREMATCH_STRUCT_I*)calloc(1,sizeof(DL_SINGLE_PREMATCH_STRUCT_I));

	APL_MALLOC_FAIL(l_dl_single_prematch_struct_i)

	p_i_maker =0;
	p_i_makerdt =0;
	p_i_checker =0;
	p_i_checkerdt =0;
	p_i_access_stamp =0;
	p_i_access_stamp_compare =0;

	if(!strlen(p_dl_single_prematch_struct_h ->h_dl_client))  
		l_dl_single_prematch_struct_i -> i_dl_client = -1;
	else
		l_dl_single_prematch_struct_i -> i_dl_client = 0;

	if(!strlen(p_dl_single_prematch_struct_h ->h_identiy_no))  
		l_dl_single_prematch_struct_i -> i_identiy_no = -1;
	else
		l_dl_single_prematch_struct_i -> i_identiy_no = 0;

	if(!strlen(p_dl_single_prematch_struct_h ->h_confdate)) 
		l_dl_single_prematch_struct_i -> i_confdate = -1;
	else
		l_dl_single_prematch_struct_i -> i_confdate= 0;

	if(!strlen(p_dl_single_prematch_struct_h ->h_exp_settl_date))
		l_dl_single_prematch_struct_i -> i_exp_settl_date = -1;
	else
		l_dl_single_prematch_struct_i -> i_exp_settl_date = 0;

	if(!strlen(p_dl_single_prematch_struct_h ->h_verified_with))  
		l_dl_single_prematch_struct_i -> i_verified_with = -1;
	else
		l_dl_single_prematch_struct_i -> i_verified_with = 0;
	
	if(!strlen(p_dl_single_prematch_struct_h ->h_info1))  
		l_dl_single_prematch_struct_i -> i_info1 = -1;
	else
		l_dl_single_prematch_struct_i -> i_info1 = 0;

	if(!strlen(p_dl_single_prematch_struct_h ->h_ispartial))  
		l_dl_single_prematch_struct_i -> i_ispartial = -1;
	else
		l_dl_single_prematch_struct_i -> i_ispartial = 0;

	if(!strlen(p_dl_single_prematch_struct_h ->h_broker_ord_no))  
		l_dl_single_prematch_struct_i -> i_broker_ord_no = -1;
	else
		l_dl_single_prematch_struct_i -> i_broker_ord_no = 0;
	
	if(!strlen(p_dl_single_prematch_struct_h ->h_orig_identiy_no))  
		l_dl_single_prematch_struct_i -> i_orig_identiy_no = -1;
	else
		l_dl_single_prematch_struct_i -> i_orig_identiy_no = 0;

	if(!strlen(p_dl_single_prematch_struct_h ->h_loc_ref_no))  
		l_dl_single_prematch_struct_i -> i_loc_ref_no = -1;
	else
		l_dl_single_prematch_struct_i -> i_loc_ref_no = 0;

	if(!strlen(p_dl_single_prematch_struct_h ->h_maker))  
		l_dl_single_prematch_struct_i -> i_maker = -1;
	else
		l_dl_single_prematch_struct_i -> i_maker = 0;

	if(!strlen(p_dl_single_prematch_struct_h ->h_maker_dt)) 
		l_dl_single_prematch_struct_i -> i_maker_dt = -1;
	else
		l_dl_single_prematch_struct_i -> i_maker_dt = 0;

	if(!strlen(p_dl_single_prematch_struct_h ->h_access_stamp)) 
		l_dl_single_prematch_struct_i -> i_access_stamp = -1;
	else
		l_dl_single_prematch_struct_i -> i_access_stamp = 0;

	if(!strlen(p_dl_single_prematch_struct_h ->h_checker))  
		l_dl_single_prematch_struct_i -> i_checker = -1;
	else
		l_dl_single_prematch_struct_i -> i_checker = 0;

	if(!strlen(p_dl_single_prematch_struct_h ->h_checker_dt)) 
		l_dl_single_prematch_struct_i -> i_checker_dt = -1;
	else
		l_dl_single_prematch_struct_i -> i_checker_dt = 0;

	if(!strlen(p_dl_single_prematch_struct_h ->h_status))  
		l_dl_single_prematch_struct_i -> i_status = -1;
	else
		l_dl_single_prematch_struct_i -> i_status = 0;


	if(CO_RtvSysDtTime(chr_sys_access_stamp,l_debug_info_ptr) !=APL_SUCCESS)
	{
		APL_GOBACK_FAIL
	}

	if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_INPUT))
	{
		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Entered Input of Function DL_UpdSingle_Prematch\n",
									NULL,p_intl_envdatastruct_h);
		}

		strcpy(p_dl_single_prematch_struct_h->h_status,STATUS_UAUTH);
		l_dl_single_prematch_struct_i->i_status =0;
		strcpy(p_dl_single_prematch_struct_h->h_maker,p_intl_envdatastruct_h->usr);
		l_dl_single_prematch_struct_i->i_maker=0;
		strcpy(p_dl_single_prematch_struct_h->h_maker_dt,chr_sys_access_stamp);
		l_dl_single_prematch_struct_i->i_maker_dt=0;
		strcpy(p_dl_single_prematch_struct_h->h_access_stamp,chr_sys_access_stamp);
		l_dl_single_prematch_struct_i->i_access_stamp =0;

		EXEC SQL INSERT INTO DL_SINGLE_PREMATCH VALUES (:p_dl_single_prematch_struct_h:l_dl_single_prematch_struct_i);

		printf("JC::: ORA for Insert DL_SINGLE_PREMATCH [%d]\n", sqlca.sqlcode);

		IS_ANY_ORA_ERROR_AND_DUPLICATE(MAP_DET_EXIST,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
	}
	else
	{
		l_key_codes[0]="DL_CLIENT";
		l_key_codes[1]="IDENTIY_NO";
		l_key_codes[2]="ORIG_IDENTIY_NO";
		l_key_codes[3]=APL_NULL_STRING;
		
		l_key_values[0]=p_dl_single_prematch_struct_h -> h_dl_client;
		l_key_values[1]=p_dl_single_prematch_struct_h -> h_identiy_no;
		l_key_values[2]=p_dl_single_prematch_struct_h -> h_orig_identiy_no;
		l_key_values[3] = APL_NULL_STRING;

			
	   	strcpy(chr_l_table_name,"DL_SINGLE_PREMATCH");

		int_retval = CR_Rtv_MastChldChrVal( l_key_codes,
						l_key_values,
						chr_l_table_name,
						"ACCESS_STAMP",
						chr_l_field_val,
						l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
			 APL_GOBACK_FAIL

		strcpy(chr_acc_stamp_compare,chr_l_field_val);
		printf("JC::: Access stamp from db... [%s]\n", chr_acc_stamp_compare);
		
		int_retval = CR_Rtv_MastChldChrVal( l_key_codes,
							l_key_values,
							chr_l_table_name,
							"STATUS",
							chr_l_field_val,
							l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
			 APL_GOBACK_FAIL

		strcpy(chr_status_compare,chr_l_field_val);
		printf("JC::: Status from db... [%s]\n", chr_status_compare);
	}

	printf("JC::: Access stamp from param string... [%s]\n", p_dl_single_prematch_struct_h->h_access_stamp);
	if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_MODIFY))
	{
		p_i_checker = -1;
		p_i_checkerdt = -1;
		strcpy(p_dl_single_prematch_struct_h->h_checker,APL_NULL_STRING);
		strcpy(p_dl_single_prematch_struct_h->h_checker_dt,APL_NULL_STRING);

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Entered modify of Function MT_ModDBNoDlvDet\n",
							NULL,p_intl_envdatastruct_h);
		}

		if (!strcmp(p_dl_single_prematch_struct_h->h_access_stamp,chr_acc_stamp_compare))
		{
			strcpy(p_dl_single_prematch_struct_h->h_access_stamp,chr_sys_access_stamp);
			l_dl_single_prematch_struct_i->i_access_stamp =0;
			strcpy(p_dl_single_prematch_struct_h->h_status,STATUS_UAUTH);
			l_dl_single_prematch_struct_i->i_status =0;

			EXEC SQL UPDATE DL_SINGLE_PREMATCH  
				SET 
				MAKER =:p_intl_envdatastruct_h->usr:p_i_maker,
				MAKER_DT =:chr_sys_access_stamp:p_i_makerdt,
				CHECKER =:p_dl_single_prematch_struct_h->h_checker:p_i_checker,
				CHECKER_DT =:p_dl_single_prematch_struct_h->h_checker:p_i_checkerdt,
				ACCESS_STAMP = :p_dl_single_prematch_struct_h->h_access_stamp:l_dl_single_prematch_struct_i->i_access_stamp,
				STATUS =:p_dl_single_prematch_struct_h->h_status:l_dl_single_prematch_struct_i->i_status,
				CONFDATE = :p_dl_single_prematch_struct_h->h_confdate:l_dl_single_prematch_struct_i->i_confdate,
				EXP_SETTL_DATE = :p_dl_single_prematch_struct_h->h_exp_settl_date:l_dl_single_prematch_struct_i->i_exp_settl_date,
				verified_with = :p_dl_single_prematch_struct_h->h_verified_with:l_dl_single_prematch_struct_i->i_verified_with,
				INFO1 = :p_dl_single_prematch_struct_h->h_info1:l_dl_single_prematch_struct_i->i_info1,
				DIFFAMOUNT = :p_dl_single_prematch_struct_h->h_diffamount:l_dl_single_prematch_struct_i->i_diffamount,
				BROKER_ORD_NO = :p_dl_single_prematch_struct_h->h_broker_ord_no:l_dl_single_prematch_struct_i->i_broker_ord_no,
				LOCAL_REF_NO = :p_dl_single_prematch_struct_h->h_loc_ref_no:l_dl_single_prematch_struct_i->i_loc_ref_no,
				NEWQUANTITY = :p_dl_single_prematch_struct_h->h_newquantity:l_dl_single_prematch_struct_i->i_newquantity,
				NEWAMOUNT = :p_dl_single_prematch_struct_h->h_newamount:l_dl_single_prematch_struct_i->i_newamount,
				CPAMT = :p_dl_single_prematch_struct_h->h_cpamt:l_dl_single_prematch_struct_i->i_cpamt,
				BROK_CMBP_ID = :p_dl_single_prematch_struct_h->h_brok_cmbp_id:l_dl_single_prematch_struct_i->i_brok_cmbp_id,
				BROK_DP_ID = :p_dl_single_prematch_struct_h->h_brok_dp_id:l_dl_single_prematch_struct_i->i_brok_dp_id,
				CP_DP_ID = :p_dl_single_prematch_struct_h->h_cp_dp_id:l_dl_single_prematch_struct_i->i_cp_dp_id,
				CP_CLIENT_ID = :p_dl_single_prematch_struct_h->h_cp_client_id:l_dl_single_prematch_struct_i->i_cp_client_id,
				MKT_TYPE = :p_dl_single_prematch_struct_h->h_mkt_type:l_dl_single_prematch_struct_i->i_mkt_type,
				LOCATION_CD = :p_dl_single_prematch_struct_h->h_location_cd:l_dl_single_prematch_struct_i->i_location_cd,
				EXECUTION_DATE = :p_dl_single_prematch_struct_h->h_execution_date:l_dl_single_prematch_struct_i->i_execution_date,
				DP_INSTR_FLAG = :p_dl_single_prematch_struct_h->h_dp_instr_flag:l_dl_single_prematch_struct_i->i_dp_instr_flag,
				INTER_DP_FLAG = :p_dl_single_prematch_struct_h->h_inter_dp_flag:l_dl_single_prematch_struct_i->i_inter_dp_flag,
				DEFER_SEC_SETT = :p_dl_single_prematch_struct_h->h_defer_sec_sett_flg:l_dl_single_prematch_struct_i->i_defer_sec_sett_flg,
				DEFER_MON_SETT = :p_dl_single_prematch_struct_h->h_defer_mon_sett_flg:l_dl_single_prematch_struct_i->i_defer_mon_sett_flg 
				WHERE 
					DL_CLIENT =:p_dl_single_prematch_struct_h->h_dl_client AND 
					IDENTIY_NO =:p_dl_single_prematch_struct_h->h_identiy_no AND
					ORIG_IDENTIY_NO =:p_dl_single_prematch_struct_h->h_orig_identiy_no;

			printf("JC::: ORA for Modify DL_SINGLE_PREMATCH [%d]\n", sqlca.sqlcode);
			  
			IS_ANY_ORA_ERROR;
		}
		else 
	   	{
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   	} 
	}

	 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_AUTHORISE))
	{

		APL_IF_DEBUG
 		{
  			CO_ProcMonitor(APL_OUT_FILE, "Entered authorize of Function MT_ModDBNoDlvDet\n",
											NULL,p_intl_envdatastruct_h);
 		}

		if (!strcmp(p_dl_single_prematch_struct_h->h_access_stamp,chr_acc_stamp_compare))
		{
   			if(strcmp(p_dl_single_prematch_struct_h->h_status,STATUS_DEL_UAUTH))
	    	{
	    		strcpy(p_dl_single_prematch_struct_h->h_access_stamp,chr_sys_access_stamp);
	    		l_dl_single_prematch_struct_i->i_access_stamp =0;
   	    		strcpy(p_dl_single_prematch_struct_h->h_checker,p_intl_envdatastruct_h->usr);
	    		l_dl_single_prematch_struct_i->i_checker=0;
  	    		strcpy(p_dl_single_prematch_struct_h->h_checker_dt,chr_sys_access_stamp);
	    		l_dl_single_prematch_struct_i->i_checker_dt=0;
				strcpy(p_dl_single_prematch_struct_h->h_status,STATUS_AUTH);
	    		l_dl_single_prematch_struct_i->i_status =0;

				
	    		EXEC SQL UPDATE DL_SINGLE_PREMATCH SET 
					CHECKER =:p_intl_envdatastruct_h->usr:p_i_checker,
					CHECKER_DT =:chr_sys_access_stamp:p_i_access_stamp,
					ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp,
					STATUS =:p_dl_single_prematch_struct_h->h_status:l_dl_single_prematch_struct_i->i_status
					WHERE 
					DL_CLIENT =:p_dl_single_prematch_struct_h->h_dl_client AND 
					IDENTIY_NO =:p_dl_single_prematch_struct_h->h_identiy_no AND
					ORIG_IDENTIY_NO =:p_dl_single_prematch_struct_h->h_orig_identiy_no;

				printf("JC::: ORA for Auth DL_SINGLE_PREMATCH [%d]\n", sqlca.sqlcode);

				IS_ANY_ORA_ERROR;
			}
   			else  
			{
	    		EXEC SQL DELETE DL_SINGLE_PREMATCH 
				WHERE 
					DL_CLIENT =:p_dl_single_prematch_struct_h->h_dl_client AND 
					IDENTIY_NO =:p_dl_single_prematch_struct_h->h_identiy_no AND
					ORIG_IDENTIY_NO =:p_dl_single_prematch_struct_h->h_orig_identiy_no;
				printf("JC::: ORA for Delete DL_SINGLE_PREMATCH [%d]\n", sqlca.sqlcode);
          
				IS_ANY_ORA_ERROR
			}
		}
		else 
		{
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
		} 
	}

	if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_RESET))
	{

		APL_IF_DEBUG
 		{
  			CO_ProcMonitor(APL_OUT_FILE, "Entered reset of Function MT_ModDBNoDlvDet\n",
											NULL,p_intl_envdatastruct_h);
 		}

		if (!strcmp(p_dl_single_prematch_struct_h->h_access_stamp,chr_acc_stamp_compare))
		{
   			if(!strcmp(p_dl_single_prematch_struct_h->h_status,STATUS_DEL_UAUTH))
	    	{
	    		strcpy(p_dl_single_prematch_struct_h->h_access_stamp,chr_sys_access_stamp);
	    		l_dl_single_prematch_struct_i->i_access_stamp =0;
   	    		strcpy(p_dl_single_prematch_struct_h->h_checker,p_intl_envdatastruct_h->usr);
	    		l_dl_single_prematch_struct_i->i_checker=0;
  	    		strcpy(p_dl_single_prematch_struct_h->h_checker_dt,chr_sys_access_stamp);
	    		l_dl_single_prematch_struct_i->i_checker_dt=0;
				strcpy(p_dl_single_prematch_struct_h->h_status,STATUS_AUTH);
	    		l_dl_single_prematch_struct_i->i_status =0;

				
	    		EXEC SQL UPDATE DL_SINGLE_PREMATCH SET 
           		CHECKER =:p_intl_envdatastruct_h->usr:p_i_checker,
            	CHECKER_DT =:chr_sys_access_stamp:p_i_access_stamp,
				ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp,
            	STATUS =:p_dl_single_prematch_struct_h->h_status:l_dl_single_prematch_struct_i->i_status
				WHERE 
					DL_CLIENT =:p_dl_single_prematch_struct_h->h_dl_client AND 
					IDENTIY_NO =:p_dl_single_prematch_struct_h->h_identiy_no AND
					ORIG_IDENTIY_NO =:p_dl_single_prematch_struct_h->h_orig_identiy_no;
				printf("JC::: ORA for Reset DL_SINGLE_PREMATCH [%d]\n", sqlca.sqlcode);
				IS_ANY_ORA_ERROR;	
				
			}
	   }
		else 
	   {
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
	   } 
	}

	if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_DELETE))
	{
  		p_i_checker =-1;
  		p_i_checkerdt =-1;
		strcpy(p_dl_single_prematch_struct_h->h_checker,APL_NULL_STRING);
		strcpy(p_dl_single_prematch_struct_h->h_checker_dt,APL_NULL_STRING);

		APL_IF_DEBUG
 		{
  			CO_ProcMonitor(APL_OUT_FILE, "Entered delete of Function for Single Prematch\n",
													NULL,p_intl_envdatastruct_h);
 		}

		if (!strcmp(p_dl_single_prematch_struct_h->h_access_stamp,chr_acc_stamp_compare))
		{
			strcpy(p_dl_single_prematch_struct_h->h_access_stamp,chr_sys_access_stamp);
			l_dl_single_prematch_struct_i->i_access_stamp =0;
			strcpy(p_dl_single_prematch_struct_h->h_status,STATUS_DEL_UAUTH);
			l_dl_single_prematch_struct_i->i_status =0;

			 
			EXEC SQL UPDATE DL_SINGLE_PREMATCH SET 
            		MAKER =:p_intl_envdatastruct_h->usr:p_i_maker,
					MAKER_DT =:chr_sys_access_stamp:p_i_makerdt,
					CHECKER =:p_dl_single_prematch_struct_h->h_checker:p_i_checker,
					CHECKER_DT =:p_dl_single_prematch_struct_h->h_checker:p_i_checkerdt,
            		STATUS =:p_dl_single_prematch_struct_h->h_status:l_dl_single_prematch_struct_i->i_status,
					ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp
					WHERE 
						DL_CLIENT =:p_dl_single_prematch_struct_h->h_dl_client AND 
						IDENTIY_NO =:p_dl_single_prematch_struct_h->h_identiy_no AND
						ORIG_IDENTIY_NO =:p_dl_single_prematch_struct_h->h_orig_identiy_no;
			printf("JC::: ORA for Delete UnAuth DL_SINGLE_PREMATCH [%d]\n", sqlca.sqlcode);
               
			IS_ANY_ORA_ERROR;	
		}
		else 
		{
			if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
			APL_GOBACK_FAIL
		} 
	}


	if (int_error_flag == APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}
	
	
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		APL_FUNCTION_RET_SUCCESS(APL_OUT_FILE)
		free(l_dl_single_prematch_struct_i);
		return(APL_SUCCESS);
	}
	RETURN_FAILURE :
	{
 		APL_FUNCTION_RET_FAILURE(APL_OUT_FILE)
		free(l_dl_single_prematch_struct_i);
		return(APL_FAILURE);
	}

}
