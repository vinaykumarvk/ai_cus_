/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to 
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or 
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/***********************************************************************************************
 *
 * Module Name         :		Deal
 *
 * File Name           :		Daemon_DL.pc
 *
 * Description         :		
 *           
 *
 *            Version Control Block
 *
 * Date        Version   Author           Description              RFS No.
 * ----------- --------	 ---------------  -----------------------  -----------
 * 20-Jul-2010 1.0.1.26  Naren V          NSDL DP Ins File Format  ISKB_3298
 *                                        Changes - Additional ch
 *                                        anges initiated by NSDL
 *                                        depository are incorpor
 *                                        ated to change the ACC_
 *                                        TYPE check static value
 *                                        as '40' which was  '20'
 *                                        for NSDL pool file earl
 *                                        ier.
 *
 *
 * 14-Oct-2010 1.0.1.27 Pasha Shaik       Variable length increased ISKB_4294
					  for for resolving the issue 
 ***********************************************************************************************/

#include "stdio_64.h"
#include "MS_Swift.h"
#include "DL_Interface.h"
#include <unistd.h>
#define DEALMS_LINK_SEQ_NAME "CMSGLINK_SEQ"
#define STATUS_AUTH "AA" //Added For PMS Changes
#include "WI_Interface.h" //Added for Web PMS Bulk Authorization 
EXEC SQL INCLUDE SQLCA;

char g_mis_info[4001] = APL_NULL_STRING;
char  g_param_str[4001] = APL_NULL_STRING;
char g_envoir_data[4001] = APL_NULL_STRING;


char *chr_h_error_desc;
DEBUG_INFO_STRUCT_H **l_debug_info_ptr ;
DEBUG_INFO_STRUCT_H         *l_debug_info_struct_h_tmp=NULL; 
main(int argc,char **argv)
{

	
	int   DL_Proc_DLPopulate(int *int_p_trdrepseqnum,SYS_DL_DEAL_STRUCT_H *p_sys_dl_deal_struct_h_a,char *chr_p_param_str);
	int   DL_Proc_PmtDetPopulate(DL_DEAL_PMTDET_STRUCT_H *p_dl_deal_pmtdet_struct_h_e,char *chr_p_param_str);
	int   DL_Proc_DLOthPopulate(DL_DEAL_OTH_STRUCT_H *p_dl_deal_oth_struct_h_b,char *chr_p_param_str);
	int   DL_Proc_DLPmtPopulate(DL_DEAL_PMTCHG_STRUCT_H *p_dl_deal_pmtchg_struct_h_c,char *chr_p_param_str);
	int   DL_Proc_SetlDetPopulate(char *p_eventid,DL_DEAL_SSTDET_STRUCT_H *p_dl_deal_sstdet_struct_h_a,char *chr_p_param_str);
	int   DL_Proc_RstPmPopulate(char *p_client, char *p_indentity_no, char *chr_p_access_stamp,char *chr_p_param_str);
	int   DL_Proc_RstSetlPopulate(char *p_client, char *p_indentity_no, char *chr_p_access_stamp,char *p_env_action,char *chr_p_param_str);
	int   DL_Proc_RstCLHPopulate(char *p_client, char *p_indentity_no,char *chr_p_param_str);
	int   DL_Proc_DLFailPopulate(DL_DEAL_FAIL_STRUCT_H *p_dl_deal_fail_struct_h, char *chr_p_param_str);
	int   DL_Proc_DLNDSPopulate(DL_DEAL_NDS_STRUCT_H *p_dl_deal_nds_struct_h, char *chr_p_param_str);
	int   DL_Proc_RUPrmtDetPopulate(DL_DEAL_PMTDET_STRUCT_H *p_dl_deal_pmtdet_struct_h_e,char *p_stregno,char *chr_p_param_str);
	int   DL_Proc_RUSetlDetPopulate(char *p_eventid,char *p_stregno,DL_DEAL_SSTDET_STRUCT_H *p_dl_deal_sstdet_struct_h_a,char *chr_p_param_str);
	int   DL_Proc_InstrConvInpPopulate(DL_INSTRUMENTCONV_OTH_STRUCT_H *p_dl_instrumentconv_oth_struct_h, char *chr_p_param_str);
	int   DL_Proc_InstrChgPopulate(DL_INSTRUMENTCHG_STRUCT2_H *l_dl_instrumentchg_struct2_ha, char *chr_p_param_str);
	int   DL_Proc_LocChgPopulate(char *chr_l_cseqno, DL_LOCNCHG_STRUCT_H *l_dl_locnchg_struct_h,char *chr_h_param_str);
	int   DL_Proc_UpdMisPopulate(char *chr_l_mistxnrefno, DL_MISDEAL_STRUCT_H *l_dl_misdeal_struct_ha, char *chr_h_param_str);
	int   DL_Proc_MktPrcPopulate(MT_DLYMKTPRC_STRUCT_H *l_mt_dlymktprc_struct_h, char *chr_h_param_str);
	int   DL_Proc_RegDetPopulate(DL_REGDET_STRUCT_H *p_dl_regdet_struct_h, char *chr_p_param_str);
	int   DL_Proc_RegArrPopulate(REQDETAILS_STRUCT_H *p_reqdetails_struct_h, char *chr_p_param_str);
	int   DL_Proc_RegTrfDetPopulate(REG_TRF_STRUCT_H *p_reg_trf_struct_h, char *chr_p_param_str);
	int   DL_Proc_RstRegDetPopulate(DL_REGDET_STRUCT_H *p_dl_regdet_struct_h, char *chr_p_param_str);
	int   DL_Proc_OrdDetPopulate(OR_ORDERDETAILS_STRUCT_H *p_or_orderdetails_struct_h_b, char *p_ord_ident, char *chr_p_param_str);
	int   DL_Proc_ResOrdPopulate(char *p_ord_client, char *p_deal_ident, char *p_deal_access_stamp, char *p_ord_access_stamp,char *chr_p_param_str);
	int   DL_Proc_OrdArrPopulate(ORDERDETAILS_STRUCT_H *p_or_orderdetails_struct_h_b, char *chr_p_param_str);
	int   DL_Proc_OrdPopulate(DEAL_EXECDET_STRUCT_H *p_deal_execdet_struct_h_b,char *chr_p_param_str);
	int   DL_Proc_SMIAmdCanUpdStatPopulate(char *p_client, char *p_indentity_no, char *p_clt_rej_flag, char *p_amd_can_flag,char *chr_p_param_str);



	int   CO_Rtv_EnvStruct(INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,char *p_env_str);
	int 	CO_Rtv_ErrStruct(char *p_error_desc,DEBUG_INFO_STRUCT_H **l_debug_info_ptr);
	int   CO_Rtv_ErrString(DEBUG_INFO_STRUCT_H **l_debug_info_ptr,char *p_error_desc);
	int   CO_Rtv_Error(DEBUG_INFO_STRUCT_H **l_debug_info_ptr,char *p_error_desc); /* Kalyan */
	void  CO_Rtv_DataString(char *chr_p_str, char *p_lbl,char *p_data_value);
	void  CO_Rtv_DataDbl(char *chr_p_str, char *p_lbl,double *p_data_value);
	void  CO_Rtv_DataInt(char *chr_p_str, char *p_lbl,int *p_data_value);
	int Batch_Proc_MarkSuccessProcess(char *p_ora_rowid,char *p_return_value);
	int Proc_MarkFailProcess(char *p_ora_rowid, DEBUG_INFO_STRUCT_H **l_debug_info_ptr);
	int	DL_Proc_MultReasPopulate(char *chr_p_str,int *p_ret_value);
	int Populate_DL_BIFDET(DL_BIFDET_STRUCT_H *p_dl_bifdet_struct_h,char * p_param_data);/** DL_BIFDET **/
	int   DL_Proc_DLSetlSing(DL_DEAL_SSTDET_STRUCT_H *p_dl_deal_sstdet_struct_h_a, char *p_eventid, INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h, DEBUG_INFO_STRUCT_H **l_debug_info_ptr);
	int Populate_DL_BCN(DL_BCN_STRUCT_H *p_dl_bcn_struct_h,char * p_param_data);
	int   Populate_DL_EXCHGORD_UPLD(DL_EXCHGORD_UPLD_STRUCT_H *l_dl_exchgord_upld_struct_h,char *p_param_data);  
	int Batch_Proc_GridMarkSuccessProcss(char *p_ora_rowid,char *p_return_value,char *p_access_stamp);
	int Populate_DL_DEALREPAIR(DL_DEALREPAIR_STRUCT_H *p_dl_dealrepair_struct_h,char * p_param_data);
	int Proc_MarkFailProcess_Deal(char *p_ora_rowid,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,char *chr_web_h_error_desc1, char *chr_web_h_error_desc2, DEBUG_INFO_STRUCT_H **l_debug_info_ptr);
	/*******ADDED BY AMOL*********/
	int Populate_DL_NSE_OBL(DL_NSC_OBL_STRUCT_H *p_dl_nse_obl_struct_h,char * p_param_data);
	int Populate_DL_POOLACCRECS(DL_POOLACCRECS_STRUCT_H *p_dl_poolaccrecs_struct_h,char * p_param_data);
	int Populate_DL_BSE_OBL(DL_BSE_OBL_STRUCT_H *p_dl_bse_obl_struct_h,char * p_param_data);
	int Populate_DL_UPL_SOH(DL_UPL_SOH_STRUCT_H *l_dl_upl_soh_struct_h,char * p_param_data);
	int Populate_DL_CDSL_UPL_A(CDSL_UPL_A_STRUCT_H *p_cdsl_upl_a_struct_h,char * p_param_data);
	int Populate_DL_CDSL_UPL_B(CDSL_UPL_B_STRUCT_H *p_cdsl_upl_b_struct_h,char * p_param_data);
        /* Gouse - Single Prematch ~IB_PH3_53~ [Start] */
	int Populate_DL_SINGLE_PREMATCH(DL_SINGLE_PREMATCH_STRUCT_H *p_dl_single_prematch_struct_h, char *p_param_data);
	/* Gouse - Single Prematch ~IB_PH3_53~ [End] */

/*******ADDED BY AMISH*********/
/***********TAKEOVER********************/
int Populate_DL_TAKEOVER(DL_TAKEOVER_STRUCT_H *p_dl_takeover_struct_h,char * p_param_data);
int Populate_DL_TAKEOVER_SEQ(DL_TAKEOVER_SEQ_STRUCT_H *p_dl_takeover_seq_struct_h,char * p_param_data);
int MT_UpdDL_TAKEOVER (DL_TAKEOVER_STRUCT_H *p_dl_takeover_struct_h,DL_TAKEOVER_SEQ_STRUCT_H *p_dl_takeover_seq_struct_h, INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr);
int MT_ModDbDL_TAKEOVER(DL_TAKEOVER_STRUCT_H *p_dl_takeover_struct_h,DL_TAKEOVER_SEQ_STRUCT_H *p_dl_takeover_seq_struct_h,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

/**********MARK SHORTAGE**************/
int DL_ProcMARKSHORTAGE (DL_MARKSHORTAGE_STRUCT_H *p_dl_markshortage_struct_h, INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr);//rahul
int Populate_DL_MARKSHORTAGE(DL_MARKSHORTAGE_STRUCT_H *p_dl_markshortage_struct_h,char * p_param_data);//rahul

/***********************SQUARE OFF--AMISH************************/
int Populate_DL_SQOFF(DL_SQOFF_STRUCT_H *p_dl_sqoff_struct_h,char * p_param_data); /* HDFCDL_015 - Sundar */
int DL_ModSqOff (DL_SQOFF_STRUCT_H *p_dl_sqoff_struct_h, INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

int Populate_DL_DPGEN_DET(DL_DPGEN_DET_STRUCT_H *p_dl_dpgen_det_struct_h,char * p_param_data);
int Populate_DL_POOLACCDMP(DL_POOLACCDMP_STRUCT_H *p_dl_poolaccdmp_struct_h,char * p_param_data);/* HDFCDL_011 - Sundar - PoolA/C Dump */
int Populate_POOLACDET(POOLACDET_STRUCT_H *p_poolacdet_struct_h,char *p_param_data);/*** vinay ****/	
int   Populate_DL_INTR_SCH(DL_INTR_SCH_STRUCT_H *l_dl_intr_sch_struct_h,char *p_param_data);
/* HDFCDL_024  - Manik Trivedi */
int   Populate_DL_INTR_SCH_DET(DL_INTR_SCH_DET_STRUCT_H *l_dl_intr_sch_det_struct_h,char *p_param_data);
/* HDFCDL_024 - Manik Trivedi */

int DL_MarkDVP_Func(SYS_DL_DEAL_STRUCT_H *p_sys_dl_deal_struct_h_a,int *int_p_trdrepseqnum,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr);	

/***** JC - ISKB 487 -- Start *****/
int	DL_Proc_DecimalAdjPopulate(DL_DEAL_DECI_ADJ_STRUCT_H *p_dl_deal_deci_adj_struct_h_a, char *chr_p_param_str);
/***** JC - ISKB 487 -- End *****/

	EXEC SQL BEGIN DECLARE SECTION;
	char	h_ora_rowid[APL_ROWID_LEN];
	char 	chr_h_param_str[4001] = APL_NULL_STRING;
	char  chr_h_param_str_bif[4001] = APL_NULL_STRING;
	char  chr_h_param_str_dpgen[4001] = APL_NULL_STRING;
    char  chr_h_param_str_globalpm[4001] = APL_NULL_STRING; /*Gouse - For Single Prematch Auth */
	
	char chr_h_param_str_pool[4001] = APL_NULL_STRING;/****** vinay *****/
	
	char 	chr_h_error_str[4001] = APL_NULL_STRING;
	char 	chr_web_h_error_desc1[4001] = APL_NULL_STRING;
	char 	chr_web_h_error_desc2[4001] = APL_NULL_STRING;
	char 	chr_h_env_str[2001] = APL_NULL_STRING;
	char 	chr_h_func_name[100] = APL_NULL_STRING;
	char 	chr_l_return_value[4001] = APL_NULL_STRING;
	char  h_mis_info[4001] = APL_NULL_STRING;
	char chr_l_cseqno[17];
	char chr_l_mistxnrefno[17];
	char 	chr_h_548_param_str[4001] = APL_NULL_STRING;
	char 	l_data_fld_sep_str[2] = APL_NULL_STRING;
	 char  *p_order_no;
	 	char 	*l_chr_order; /* force match related changes --amish-0905 */
			char 	*l_chr_deal;

	/** New Variable by AmitB-020506  **/
	char chr_l_first_char[2]=APL_NULL_STRING;
	char chr_l_settl_temp[14]=APL_NULL_STRING;
	char chr_l_interdp_char[3]=APL_NULL_STRING;
	char chr_l_second_char[2]=APL_NULL_STRING;
	char chr_l_two_char[3]=APL_NULL_STRING;
	
	int	int_h_snd_msg				 =	0;

	short i_func_param_str=0;
	short   i_ora_rowid=0;
	short   i_func_name=0;
	short   i_env_str=0;
	short   i_proc_data=0;
	short   i_error_str=0;
	short    i_mis_info=0;
   
   /* veda */
	char  chr_l_audit_data[4001] = APL_NULL_STRING;/* HDFCGN_001 Sonali Audit*/	
	char  chr_h_param_str_temp[4001] = APL_NULL_STRING;/* HDFCGN_001 Sonali Audit*/	
   char  chr_l_data_key[4001] = APL_NULL_STRING;/*HDFCGN_001 Sonali Audit*/	
	char  chr_h_entity_name[100] = APL_NULL_STRING;/*HDFCGN_001 Sonali Audit*/	 
	char  chr_h_comments[4001] = APL_NULL_STRING;/*HDFCGN_001 Sonali Audit*/
	/*******/										  

	/** amish **/
	char  chr_h_param_str1[4001] = APL_NULL_STRING;	
	/** amish **/

	/** Kalyan **/
	char l_instr_name[131];
	char l_pty_name[131];
	char l_instr_code[9];
	char l_pty_code[11];
	char l_instr_1[21],l_instr_2[21],l_instr_3[21];
	char l_pty_1[21],l_pty_2[21],l_pty_3[21];
        int l_errorset = 0;
        int l_instrcou = 0;
	int l_no_del_cnt = 0;
	char l_sett_datek[22] = APL_NULL_STRING;

        char l_dl_date[11];

	char l_pty_type_broker[2] = "B";
	char l_trigger[3]=APL_NULL_STRING;
	char deal_stat[3]=APL_NULL_STRING;
	int int_l_count = 0;
	//int int_l_err_flag = 0;
	char pre_stat[3]=APL_NULL_STRING;

        EXEC SQL VAR l_instr_1 IS STRING;
        EXEC SQL VAR l_instr_2 IS STRING;
        EXEC SQL VAR l_instr_3 IS STRING;
        EXEC SQL VAR l_pty_1 IS STRING;
        EXEC SQL VAR l_pty_2 IS STRING;
        EXEC SQL VAR l_pty_3 IS STRING;
        /*EXEC SQL VAR l_dl_date IS STRING;*/ /*Commented by Asmeet for isolve 12174 Interoperability*/
        EXEC SQL VAR l_sett_datek IS STRING;

	/** Kalyan **/

	EXEC SQL VAR h_ora_rowid IS STRING;
	EXEC SQL VAR chr_h_error_desc IS STRING;
	EXEC SQL VAR chr_h_param_str IS STRING;
	EXEC SQL VAR chr_h_param_str_pool IS STRING;
	EXEC SQL VAR chr_h_error_str IS STRING;
	EXEC SQL VAR chr_h_env_str IS STRING;
	EXEC SQL VAR chr_h_func_name IS STRING;
	EXEC SQL VAR chr_l_cseqno IS STRING;
	EXEC SQL VAR chr_l_mistxnrefno IS STRING;
	EXEC SQL VAR chr_h_548_param_str IS STRING;
	
	EXEC SQL END DECLARE SECTION;
	
	struct sqlca sqlca;
	SYS_DL_DEAL_STRUCT_H	*l_sys_dl_deal_struct_h ;
	DL_DEAL_PMTDET_STRUCT_H	*l_dl_deal_pmtdet_struct_hd ;
	DL_DEAL_OTH_STRUCT_H	*l_dl_deal_oth_struct_hc ;
	DL_DEAL_PMTCHG_STRUCT_H	*l_dl_deal_pmtchg_struct_h ;
	DL_DEAL_SSTDET_STRUCT_H	*l_dl_dealsstdet_struct_h ;
	DL_DEAL_FAIL_STRUCT_H	*l_dl_deal_fail_struct_hc ;
	DL_DEAL_NDS_STRUCT_H	*l_dl_deal_nds_struct_h ;
   DL_INSTRUMENTCONV_OTH_STRUCT_H *l_dl_instrumentconv_oth_struct_h;
   DL_INSTRUMENTCHG_STRUCT2_H *l_dl_instrumentchg_struct2_h;
   DL_LOCNCHG_STRUCT_H *l_dl_locnchg_struct_h;
   DL_MISDEAL_STRUCT_H *l_dl_misdeal_struct_ha;
   MT_DLYMKTPRC_STRUCT_H *l_mt_dlymktprc_struct_h;
   DL_REGDET_STRUCT_H *l_dl_regdetstruct_h;
   REQDETAILS_STRUCT_H *l_reqdetails_struct_ha;
   REG_TRF_STRUCT_H *l_reg_trf_struct_h;
	OR_ORDERDETAILS_STRUCT_H *l_or_orderdetails_struct_hb;
	DEAL_EXECDET_STRUCT_H *l_deal_execdet_struct_h;
	ORDERDETAILS_STRUCT_H *l_orderdetails_struct_h;
	DL_BIFDET_STRUCT_H   *l_dl_bifdet_struct_h;
	DL_BCN_STRUCT_H    *l_dl_bcn_struct_h;
	DL_EXCHGORD_UPLD_STRUCT_H *l_dl_exchgord_upld_struct_h;

 /* ADDED BY AMOL **/
	DL_NSC_OBL_STRUCT_H *l_dl_nse_obl_struct_h;
	DL_POOLACCRECS_STRUCT_H *l_dl_poolaccrecs_struct_h;
	DL_INTR_SCH_STRUCT_H *l_dl_intr_sch_struct_h;
	DL_INTR_SCH_DET_STRUCT_H *l_dl_intr_sch_det_struct_h;
	DL_BSE_OBL_STRUCT_H *l_dl_bse_obl_struct_h;
	DL_UPL_SOH_STRUCT_H *l_dl_upl_soh_struct_h;
	CDSL_UPL_A_STRUCT_H *l_cdsl_upl_a_struct_h;
	CDSL_UPL_B_STRUCT_H *l_cdsl_upl_b_struct_h;
        /* Gouse - Single Prematch ~IB_PH3_53~ [Start] */
	DL_SINGLE_PREMATCH_STRUCT_H *l_dl_single_prematch_struct_h;
	/* Gouse - Single Prematch ~IB_PH3_53~ [End] */

 /* ADDED BY AMISH **/
 DL_TAKEOVER_STRUCT_H  *l_dl_takeover_struct_h;
 DL_TAKEOVER_SEQ_STRUCT_H *l_dl_takeover_seq_struct_h;

 DL_MARKSHORTAGE_STRUCT_H *l_dl_markshortage_struct_h;
 /****AMISH*********/
 /**SUNDAR*********************/
 DL_SQOFF_STRUCT_H     *l_dl_sqoff_struct_h;
DL_DPGEN_DET_STRUCT_H *l_dl_dpgen_det_struct_h;
DL_POOLACCDMP_STRUCT_H *l_dl_poolaccdmp_struct_h;
POOLACDET_STRUCT_H *l_poolacdet_struct_h;/***** vinay *****/
DL_UPDDPINST_STRUCT_H *l_dl_upddpinst_struct_h;
DL_INST_COD_STRUCT_H *l_dl_inst_cod_struct_h;

DL_DEAL_DECI_ADJ_STRUCT_H *l_dl_deal_deci_adj_struct_h; /* JC - ISKB 487 */

	short int_ret_val	=	0;
	short pool_ret_val= 0;/**** vinay ****/
	int *int_ptr_trdrepseqnum=NULL;
	char *chr_l_eventid;
	char *chr_l_client;
	char *chr_l_refno;
	char *chr_l_access_stamp;
	char *chr_l_env_action;
	char *chr_l_stregno;
	char *chr_l_ord_refno;
	char *chr_l_ord_access_stamp;
	char *chr_l_acc_rej_flag;
	char *chr_l_amd_can_flag;
  char *chr_l_transfer_no; /* Manik Trivedi , HDFDL_024 */
  char *chr_l_blk_ref_no; /* Manik Trivedi , HDFDL_026 */

	int l_sleep_microseconds = 0; 
	int l_sleep_seconds = 0 ;	

	//Added by Vikash for T0 Swift/Sebi
	int tZeroBCNCount = 0;	
	char settl_type[3]=APL_NULL_STRING;
	char settl_no[10]=APL_NULL_STRING;
	char payin_dt[25]=APL_NULL_STRING;
	char payout_dt[25]=APL_NULL_STRING;
	
//Added by Asmeet for isolve 12174 Interoperability starts
int l_int_num = 0;
char chr_l_setl_det[21]=APL_NULL_STRING;
short i_setl_det=0;
char  **temp = ( char **)NULL;
//Added by Asmeet for isolve 12174 Interoperability ends	
// Swapnil PMS 12434 Starts 
char chr_l_cmbp_id1[21]=APL_NULL_STRING;
short i_cmbp_id1=0;
char chr_l_cln_master[11]=APL_NULL_STRING;
char chr_l_cln_master1[11]=APL_NULL_STRING;
char chr_l_cln_code[11]=APL_NULL_STRING;
short i_cln_master=0;
short i_cln_master1=0;

// Swapnil PMS 12434 Ends

	FILE *chr_finifile=NULL;
	char chr_inifile[PATH_LENGTH],chr_l_uname[APL_USERID_LEN],chr_l_passwd[APL_PASSWD_LEN],chr_custody_id_b[APL_USERID_LEN],chr_buffer[KEY_LENGTH];
	DEBUG_INFO_STRUCT_H *l_debuginfo = (DEBUG_INFO_STRUCT_H *)NULL;
	INTL_ENV_DATA_STRUCT_H l_intl_env_data_h;
	INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h;
	
	memset(chr_inifile,APL_NULL_CHAR,PATH_LENGTH);
	memset(chr_buffer,APL_NULL_CHAR,KEY_LENGTH);
	memset(chr_l_uname,APL_NULL_CHAR,40);
	memset(chr_l_passwd,APL_NULL_CHAR,40);
	memset(chr_l_setl_det,APL_NULL_CHAR,21); //Interoperabilty

   p_order_no =  (char *)calloc(26,sizeof(char));

   p_intlenv_data_struct_h =  (INTL_ENV_DATA_STRUCT_H *)calloc(1,sizeof(INTL_ENV_DATA_STRUCT_H));
   APL_MALLOC_FAIL(p_intlenv_data_struct_h);
   memset(p_intlenv_data_struct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H));


	if ( ( l_debug_info_struct_h_tmp = (DEBUG_INFO_STRUCT_H *)calloc(1,sizeof(DEBUG_INFO_STRUCT_H)) ) == NULL )
			 APL_GOBACK_FAIL ;

	if ( ( (l_debug_info_ptr) = (DEBUG_INFO_STRUCT_H **)calloc(1,sizeof(DEBUG_INFO_STRUCT_H *)) ) == NULL )	
			 APL_GOBACK_FAIL ;
	
	CO_PrnErr(*l_debug_info_ptr) ;

	if ( argc != 2)
	{
		printf("\n Invalid sleep time for daemon ... \n ");
		APL_GOBACK_FAIL
	}
	else
	{
		printf("\n ******************  Server Started With Sleep Time :%s:****************\n",argv[1]);
		sscanf(argv[1],"%d.%d",&l_sleep_seconds,&l_sleep_microseconds);
	   l_sleep_microseconds = l_sleep_microseconds * 10000;	
	}

	strcpy(chr_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_inifile,"/intl_sun.cfg");
	if ( (chr_finifile = fopen(chr_inifile,"r") ) == NULL)
	        APL_GOBACK_FAIL;

   APL_FETCH_DB_LOGIN_DETAILS(chr_finifile, chr_custody_id_b, chr_l_uname, chr_l_passwd , APL_OUT_FILE , &l_debuginfo)
   EXEC SQL CONNECT :chr_l_uname IDENTIFIED BY :chr_l_passwd;
   printf("sqlcode %d\n",sqlca.sqlcode);
	if(sqlca.sqlcode != 0)                                            
   {
     ltoa_r(sqlca.sqlcode,chr_buffer,KEY_LENGTH-1);
     CO_InsertErr(&l_debuginfo,DB_ERR_NO,chr_buffer,
                 APL_NULL_STRING,APL_NULL_STRING,
                 __LINE__,__FILE__);
     APL_GOBACK_FAIL

   }

	if ( CO_RtvSysParams(l_debug_info_ptr) == APL_FAILURE)
	{
		printf("\nReturned unsuccessfully from CO_RtvSysParams processtion\n");
		APL_GOBACK_FAIL
	}

	
	memset(g_mis_info,APL_NULL_CHAR,4001);
	memset(g_envoir_data,APL_NULL_CHAR,4001);
	memset(g_param_str,APL_NULL_CHAR,4001);


	EXEC SQL UPDATE PRO_DAEMON_STATUS SET STATUS = 1 where PROC_NAME = 'Daemon_DL';
	IS_ANY_ORA_ERROR;
	sprintf(l_data_fld_sep_str,"%c",DATA_FIELD_SEPRTR);	
	strcat(l_data_fld_sep_str,APL_NULL_STRING);
	while(1)
	{
		
		
		

      
		/* Daemon should go in sleep mode only when there are no records for processing 
		 	Hence this code has been moved to 'No Data Found' section */ 
		/*
      if(l_sleep_seconds != 0)
      {
         sleep(l_sleep_seconds);
      }
      /**usleep(l_sleep_microseconds);
		*/

		strcpy(h_ora_rowid,APL_NULL_STRING);	
		i_ora_rowid = -1;
	//	strcpy(chr_h_param_str,APL_NULL_STRING);
	//	Alert("Memory allcoated now");	
		memset(chr_h_param_str,APL_NULL_CHAR,4001);		
		strcpy(chr_h_error_str,APL_NULL_STRING);
		strcpy(chr_web_h_error_desc1,APL_NULL_STRING);
		strcpy(chr_web_h_error_desc2,APL_NULL_STRING);
		strcpy(chr_h_env_str,APL_NULL_STRING);
		strcpy(chr_h_func_name,APL_NULL_STRING);
		strcpy(chr_l_return_value,APL_NULL_STRING);
		strcpy(chr_l_cseqno,APL_NULL_STRING);
		strcpy(chr_l_mistxnrefno,APL_NULL_STRING);
		memset(g_mis_info,APL_NULL_CHAR,4001);
		memset(h_mis_info,APL_NULL_CHAR,4001);
		memset(g_envoir_data,APL_NULL_CHAR,4001);
		memset(g_param_str,APL_NULL_CHAR,4001);

		i_func_name=0;
		i_env_str=0;
		i_proc_data=0;
		i_error_str=0;

		/* Changes By Kalyan to set the error to zero*/
		l_errorset = 0;
		l_instrcou = 0;
		
		strcpy(l_instr_name,APL_NULL_STRING);
		strcpy(l_pty_name,APL_NULL_STRING);
		strcpy(l_instr_code,APL_NULL_STRING);
		strcpy(l_pty_code,APL_NULL_STRING);
		strcpy(l_instr_1,APL_NULL_STRING);	
	   strcpy(l_instr_2,APL_NULL_STRING);	
	   strcpy(l_instr_3,APL_NULL_STRING);	
		strcpy(l_pty_1,APL_NULL_STRING);	
    strcpy(l_pty_2,APL_NULL_STRING);	
	   strcpy(l_pty_3,APL_NULL_STRING);	
		l_errorset = 0;
		l_instrcou = 0;
		l_no_del_cnt =0;



		/* Changes By Kalyan till here */

		     /* HDFCGN_001 Sonali Audit */
		      strcpy(chr_h_param_str_temp,APL_NULL_STRING);
			   strcpy(chr_l_audit_data,APL_NULL_STRING);
			   strcpy(chr_l_data_key,APL_NULL_STRING);
			  strcpy(chr_h_error_str,APL_NULL_STRING);

                //Below Query commented and re-written by Tushar for Request table optimization. Below query changed to fetch the records basis priority - ISKB_10215(and ISKB_10144) (only for deal)
                //New priority column has been added in Pro request table and higher priority is assigned to requests received from front end. 
		/*EXEC SQL SELECT ROWID INTO :h_ora_rowid:i_ora_rowid from PRO_REQUEST_DEAL where
		REQUEST_SEQ = (SELECT MIN(REQUEST_SEQ) FROM PRO_REQUEST_DEAL WHERE STATUS = '0')
		and rownum < 2  FOR UPDATE NOWAIT;*/
		 
                EXEC SQL SELECT ROWID INTO :h_ora_rowid:i_ora_rowid from PRO_REQUEST_DEAL where (PRIORITY,REQUEST_SEQ) IN (SELECT PRIORITY,MIN(REQUEST_SEQ) FROM PRO_REQUEST_DEAL WHERE STATUS = '0' GROUP BY PRIORITY) AND ROWNUM <=1 FOR UPDATE NOWAIT;
		
		if (sqlca.sqlcode == -54)
		{
			continue;
		}

		IS_ANY_ORA_ERROR

		if (sqlca.sqlcode == 1403)
		{
			EXEC SQL COMMIT;
			IS_ANY_ORA_ERROR;

      	if(l_sleep_seconds != 0)
      	{
         	sleep(l_sleep_seconds);
      	}
      	/**usleep(l_sleep_microseconds);**/

			continue;
		}

		
			
		EXEC SQL UPDATE PRO_REQUEST_DEAL SET STATUS = '1' where ROWID=:h_ora_rowid;
		IS_ANY_ORA_ERROR
		EXEC SQL COMMIT;
		IS_ANY_ORA_ERROR

		
		EXEC SQL SELECT PROC_NAME, ENVIRON_DATA, PROC_DATA, ERROR_DET, MIS_INFO 
		INTO :chr_h_func_name:i_func_name,:chr_h_env_str:i_env_str,:chr_h_param_str:i_proc_data,:chr_h_error_str:i_error_str ,:h_mis_info:i_mis_info
		from PRO_REQUEST_DEAL where ROWID=:h_ora_rowid FOR UPDATE NOWAIT;

		if (sqlca.sqlcode == -54)
		{
			continue;
		}

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"CLIENT_TRADE","FATAL ERR","ROWID");

		strcat(chr_h_env_str,l_data_fld_sep_str);
		strcat(chr_h_param_str,l_data_fld_sep_str);
		strcat(chr_h_error_str,l_data_fld_sep_str);
		strcpy(g_param_str,chr_h_param_str);
		strcpy(g_mis_info, h_mis_info);
		strcpy(g_envoir_data,chr_h_param_str);

		APL_IF_DEBUG
		{
			printf(" g_mis_info = %s \n",g_mis_info); fflush(stdout);
		}
		
		
	   p_intlenv_data_struct_h =  (INTL_ENV_DATA_STRUCT_H *)calloc(1,sizeof(INTL_ENV_DATA_STRUCT_H));
	   APL_MALLOC_FAIL_LOC_A(p_intlenv_data_struct_h);
	   memset(p_intlenv_data_struct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H));
         Alert("\n Doing calloc now...\n");
		printf("\n Calling CO_Rtv_EnvStruct now...|%s|\n",chr_h_env_str); fflush(stdout);
		int_ret_val = CO_Rtv_EnvStruct(p_intlenv_data_struct_h,chr_h_env_str);

		Alert("\n Doing calloc now...\n");
		chr_h_error_desc =  (char *)calloc(4001,sizeof(char));
		Alert("\n calloc done...\n");
		APL_MALLOC_FAIL_LOC_A(chr_h_error_desc);

  		memset(chr_h_error_desc,NULL,sizeof(char));
		
		strcpy(chr_h_entity_name,p_intlenv_data_struct_h->processtion);
		
		Alert("\n In Daemon Mode is=|%s| |%s|\n",p_intlenv_data_struct_h->h_mode, chr_h_entity_name);


		CO_Rtv_DataString(chr_h_param_str,"COMMENTS",chr_h_comments);

		strcpy(chr_h_param_str_temp,chr_h_param_str);
		printf("chr_h_param_str_temp =|%s|",chr_h_param_str_temp); fflush(stdout);
		int_ret_val = CO_PopulateAuditString(chr_h_entity_name,chr_h_param_str_temp,chr_l_audit_data,chr_l_data_key,l_debug_info_ptr);
		
		Alert("\n Calling CO_Upd_AudLog_Chk_SysOnline now...\n");
		INTL_WARNING  /* veda (addition of arguments in the if statement) */
		
		
		printf("\n\n **** en=%s parm=%s data=%s key=%s",chr_h_entity_name, chr_h_param_str_temp, chr_l_audit_data, chr_l_data_key);
		fflush(stdout);      
      if ( APL_FAILURE==CO_Upd_AudLog_Chk_SysOnline(p_intlenv_data_struct_h,chr_l_audit_data,chr_l_data_key,chr_h_comments,l_debug_info_ptr)) 
		{
			Alert("\n Calling Proc_MarkFailProcess now...");
			Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			Alert("\n Done with Proc_MarkFailProcess continuing...");
			continue;
		}
		Alert("before S_NON_DCE_ERASE_DUMMY_WARNING \n");
		S_NON_DCE_ERASE_DUMMY_WARNING;
		Alert("after S_NON_DCE_ERASE_DUMMY_WARNING \n");
		/* Start - Changes for Audit Trail - Rahul 20Jun2007 */
		if (!strcmp(chr_h_entity_name,"DL_DEAL") && !strcmp(p_intlenv_data_struct_h->h_mode,"SEB"))
		{
			strcpy(p_intlenv_data_struct_h->h_mode,"MOD");
		}
		if (!strcmp(chr_h_entity_name,"DL_DEAL") && !strcmp(p_intlenv_data_struct_h->h_mode,"SRS"))
		{
			strcpy(p_intlenv_data_struct_h->processtion,"DLSSTRST");
		}
		/* End  - Changes for Audit Trail - Rahul 20Jun2007 */

		if (strlen(chr_h_error_str) != 0){
			Alert("before CO_Rtv_ErrStruct \n");
			int_ret_val = CO_Rtv_ErrStruct(chr_h_error_str,l_debug_info_ptr);
			Alert("after CO_Rtv_ErrStruct \n");
		}
		Alert("\n entered the CO_Rtv_ErrStruct... ");
		/***************************************SUNDAR NEW CHANGES **************************************************/

		if (strcmp(chr_h_func_name,"wrp_GBGenTrdFn") == 0)
		{
			
			char l_uplref_id[121] = APL_NULL_STRING;
			memset(l_uplref_id, APL_NULL_CHAR,121);

			char l_settl_ty[3];  //To changes by Denish
			memset(l_settl_ty, APL_NULL_CHAR,3);

			CO_PrnErr(*l_debug_info_ptr) ;

			INTL_WARNING

			CO_PrnErr(*l_debug_info_ptr) ;

			CO_Rtv_DataString(chr_h_param_str,"TRIGGER",l_trigger);
			printf("l_trigger   |%s|",l_trigger);
		   l_sys_dl_deal_struct_h =  (SYS_DL_DEAL_STRUCT_H *)calloc(1,sizeof(SYS_DL_DEAL_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_sys_dl_deal_struct_h);
		   memset(l_sys_dl_deal_struct_h,NULL,sizeof(SYS_DL_DEAL_STRUCT_H));

		   int_ptr_trdrepseqnum =  (int *)calloc(1,sizeof(int));
		   APL_MALLOC_FAIL_LOC_A(int_ptr_trdrepseqnum);   
		   memset(int_ptr_trdrepseqnum,NULL,sizeof(int));

			l_dl_bifdet_struct_h =  (DL_BIFDET_STRUCT_H *)calloc(1,sizeof(DL_BIFDET_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_dl_bifdet_struct_h);
			memset(l_dl_bifdet_struct_h,NULL,sizeof(DL_BIFDET_STRUCT_H));
			
			Alert("CSGL UAT core fix.");
			//memset(chr_l_return_value,0,sizeof(chr_l_return_value));
            memset(chr_l_return_value,APL_NULL_CHAR,sizeof(chr_l_return_value));		
			 /* l_dl_bifdet_struct_i = (DL_BIFDET_STRUCT_I *)calloc(1,sizeof(DL_BIFDET_STRUCT_I));
			APL_MALLOC_FAIL_LOC_A(l_dl_bifdet_struct_i); */

			CO_Rtv_DataString(chr_h_param_str,"SETTELMENT_TYPE",(char *)l_settl_ty);    //To changes by Denish
			Alert("l_settl_ty: %s",l_settl_ty);

			Alert("\n Calling DL_Proc_DLPopulate now...\n");
			strcpy(chr_h_param_str_bif,chr_h_param_str);
			int_ret_val = DL_Proc_DLPopulate(int_ptr_trdrepseqnum,l_sys_dl_deal_struct_h,chr_h_param_str);
			
			/*Changes done by Vikash for T0 SWIFT/SEBI  -start*/
			if((strcmp(l_sys_dl_deal_struct_h->h_entry,"S")==0) || (strcmp(l_sys_dl_deal_struct_h->h_entry,"T")==0))
			{
				Alert("For T0 in Deal");
				Alert("l_sys_dl_deal_struct_h -> h_dlt: |%s|\n", l_sys_dl_deal_struct_h -> h_dlt);
				Alert("l_sys_dl_deal_struct_h -> h_setldt: |%s|\n", l_sys_dl_deal_struct_h -> h_setldt);
				Alert("Before T0 DL_DEAL EXCH_CODE: |%s|\n", l_sys_dl_deal_struct_h->h_trd_exch);
					
				if(!strcmp(l_sys_dl_deal_struct_h -> h_dlt, l_sys_dl_deal_struct_h -> h_setldt))
				{
					Alert("Inside else condition settl_date and deal_dt is equal condition for T0");
					if(!strcmp(l_sys_dl_deal_struct_h->h_trd_exch, "NSE"))
					{
						strcpy(l_sys_dl_deal_struct_h -> h_trd_mkt_type, "55");
					}
					else if(!strcmp(l_sys_dl_deal_struct_h->h_trd_exch, "BSE"))
					{
						strcpy(l_sys_dl_deal_struct_h -> h_trd_mkt_type, "45");
					}
					
					EXEC SQL SELECT SETTL_NO, PAY_IN_DT, PAY_OUT_DT INTO :settl_no, payin_dt, payout_dt from MT_SETTL_CAL where exch_code = :l_sys_dl_deal_struct_h->h_trd_exch and settl_type = :l_sys_dl_deal_struct_h -> h_trd_mkt_type and start_date = :l_sys_dl_deal_struct_h -> h_dlt;
					
					
					strcpy(l_sys_dl_deal_struct_h -> h_trd_setl_no, settl_no);
					strcpy(l_sys_dl_deal_struct_h -> h_payin_dt, payin_dt);
					strcpy(l_sys_dl_deal_struct_h -> h_payout_dt, payout_dt);
					
					Alert("->settl_no |%s|", l_sys_dl_deal_struct_h -> h_trd_setl_no);
					Alert("->payin_dt |%s|", l_sys_dl_deal_struct_h -> h_payin_dt);
					Alert("->payout_dt |%s|", l_sys_dl_deal_struct_h -> h_payout_dt, payout_dt);
				}
				Alert("l_sys_dl_deal_struct_h -> h_trd_mkt_type: |%s|", l_sys_dl_deal_struct_h -> h_trd_mkt_type);
			}
			/*Changes done by Vikash for T0 SWIFT/SEBI  -end*/
			
			int err_RFP_glag=0;
			
			/*Added for isolve 12174 Interoperability - Prod issue 08/07/19 Starts*/
			if((strcmp(l_sys_dl_deal_struct_h->h_entry,"W")==0)||strcmp(l_sys_dl_deal_struct_h->h_entry,"S")==0)
			{
			memset(l_dl_date,APL_NULL_CHAR,sizeof(l_dl_date));
			strncpy(l_dl_date,l_sys_dl_deal_struct_h->h_dlt,10);

				EXEC SQL SELECT COUNT(*) INTO :l_no_del_cnt FROM MT_NO_DELV WHERE INSTR_CODE = :l_sys_dl_deal_struct_h->h_instr_code AND EXCH_CODE= :l_sys_dl_deal_struct_h->h_trd_exch AND TO_DATE(:l_dl_date) between TRUNC(NO_DEL_FROM) AND TRUNC(NO_DEL_TO) AND STATUS='AA';
				if(sqlca.sqlcode != 0)
				{
					printf("KS -- Error [%s] has occurred while fetching no delivery count... \n",sqlca.sqlerrm.sqlerrmc);
				}

				if(l_no_del_cnt != 0)
				{

					EXEC SQL SELECT 
							 SETTL_NO
						INTO
							:l_sys_dl_deal_struct_h->h_trd_setl_no
						FROM
							MT_SETTL_CAL
						WHERE
							EXCH_CODE =:l_sys_dl_deal_struct_h->h_trd_exch AND 
							SETTL_NO||SETTL_TYPE =( SELECT
										CARRY_FW_STLNO||MKT_TYPE 
									FROM
										MT_NO_DELV
									WHERE
										EXCH_CODE=:l_sys_dl_deal_struct_h->h_trd_exch AND
										INSTR_CODE= :l_sys_dl_deal_struct_h->h_instr_code AND
										TO_DATE(:l_dl_date ,'DD/MM/YYYY') BETWEEN
										TRUNC(NO_DEL_FROM)  and TRUNC(NO_DEL_TO) AND 		
										STATUS = 'AA'
								);
					if(sqlca.sqlcode != 0)
					{
						Alert("KS -- Error [%s] has occurred while fetching settlemnet details upon mt_no_delv.. \n",sqlca.sqlerrm.sqlerrmc);
					}
							

				}
				else
				{

					Alert("HM :: exch %s\n mkt typ %s \n date %s",l_sys_dl_deal_struct_h->h_trd_exch,l_sys_dl_deal_struct_h->h_trd_mkt_type,l_dl_date);
					EXEC SQL SELECT 
								SETTL_NO
						INTO
								:l_sys_dl_deal_struct_h->h_trd_setl_no
						FROM
								MT_SETTL_CAL
						WHERE
								to_char(START_DATE,'DD/MM/YYYY') = :l_dl_date AND
								EXCH_CODE = :l_sys_dl_deal_struct_h->h_trd_exch AND
								SETTL_TYPE= :l_sys_dl_deal_struct_h->h_trd_mkt_type AND 
								STATUS='AA';
		
					if(sqlca.sqlcode != 0)
					{
						printf("KS -- Error [%s] has occurred while fetching settlno... \n",sqlca.sqlerrm.sqlerrmc);
					}
				}
				printf("HM :: Values Selected are \nSETTL_NO :  %s\n",l_sys_dl_deal_struct_h->h_trd_setl_no);
			}

			/*Added for isolve 12174 Interoperability - Prod issue 08/07/19 ends*/
			
			/*Added by Imran starts */
			if(strcmp(l_sys_dl_deal_struct_h->h_entry,"W")==0)
			{
				strcpy(l_sys_dl_deal_struct_h->h_interfii_flg,"N");
				strcpy(l_sys_dl_deal_struct_h->h_r_delay,"P");
				strcpy(l_sys_dl_deal_struct_h->h_sebi_reported,"N");
				strcpy(l_sys_dl_deal_struct_h->h_r_type,"00");

				if (strcmp(l_sys_dl_deal_struct_h->h_clh_flg,"C")==0)
					strcpy(l_sys_dl_deal_struct_h->h_r_sett_code,"C");
				else
					strcpy(l_sys_dl_deal_struct_h->h_r_sett_code,"H");
			}
			/*Added by Imran ends */
			
			/*Added by Asmeet for isolve 12174 Interoperability Starts*/
			if(!strcmp(l_sys_dl_deal_struct_h->h_exch_code,APL_NULL_STRING) && strcmp(l_sys_dl_deal_struct_h->h_trd_exch,APL_NULL_STRING) && strcmp(l_sys_dl_deal_struct_h->h_trd_mkt_type,APL_NULL_STRING))
			{
            memset(l_dl_date,APL_NULL_CHAR,sizeof(l_dl_date));	
			strncpy(l_dl_date,l_sys_dl_deal_struct_h->h_dlt,10);
			EXEC SQL SELECT GET_INTEROP_SETL_DET(:l_sys_dl_deal_struct_h-> h_dl_client,:l_sys_dl_deal_struct_h-> h_trd_exch,:l_sys_dl_deal_struct_h->h_trd_mkt_type,:l_sys_dl_deal_struct_h-> h_trd_setl_no,:l_dl_date,:l_sys_dl_deal_struct_h->h_instr_code) into :chr_l_setl_det:i_setl_det FROM DUAL;
			
			Alert("shr -- Error %d occurrred while fetching from GET_INTEROP_SETL_DET \n",sqlca.sqlcode);
			Alert("chr_l_setl_det == |%s|",chr_l_setl_det);
			
			if(strcmp(chr_l_setl_det,APL_NULL_STRING))
			{
					if(APL_FAILURE == CO_SplitStr(chr_l_setl_det,
						'|',
						&l_int_num,&temp))
					{
						CO_ProcMonitor(APL_OUT_FILE, "Failure from StrSplitFn", l_debug_info_ptr, NULL);
					}
					else
					{
						strcpy(l_sys_dl_deal_struct_h->h_exch_code,temp[0]);
						strcpy(l_sys_dl_deal_struct_h->h_mkt_type,temp[1]);
						strcpy(l_sys_dl_deal_struct_h->h_settlement_no,temp[2]);
						
					}
	                 printf("\n shr:: arguments are A--|%s| B--|%s| C--|%s|", temp[0],temp[1],temp[2]);
					 fflush(stdout);
			}
			}
			/*Added by Asmeet for isolve 12174 Interoperability Ends*/

			printf("\n Calling DL_Proc_Trd now...\n");
			strcpy(l_sys_dl_deal_struct_h->h_isspotdl,l_mt_core_sys_params_struct_h.proc_spot_dl_ind);
			/*strcpy(l_sys_dl_deal_struct_h->h_loccode,"");*//*to skip the mandatory chk put depo code*/


			/* Kalyan -- For Settlement No Changes - Web */

			memset(l_dl_date,APL_NULL_CHAR,sizeof(l_dl_date));		/* SIT fix */
			Alert("h_dlt = |%s|",l_sys_dl_deal_struct_h->h_dlt);
			fflush(stdout);
			strncpy(l_dl_date,l_sys_dl_deal_struct_h->h_dlt,10);

			printf("KS -- selected start date is ..... [%s]\n",l_dl_date);

			if((strcmp(l_sys_dl_deal_struct_h->h_entry,"W")==0)||strcmp(l_sys_dl_deal_struct_h->h_entry,"S")==0)
			{
				EXEC SQL SELECT COUNT(*) INTO :l_no_del_cnt FROM MT_NO_DELV WHERE INSTR_CODE = :l_sys_dl_deal_struct_h->h_instr_code AND EXCH_CODE= :l_sys_dl_deal_struct_h->h_exch_code AND TO_DATE(:l_dl_date) between TRUNC(NO_DEL_FROM) AND TRUNC(NO_DEL_TO) AND STATUS='AA';
				if(sqlca.sqlcode != 0)
				{
					printf("KS -- Error [%s] has occurred while fetching no delivery count... \n",sqlca.sqlerrm.sqlerrmc);
				}

				if(l_no_del_cnt != 0)
				{

					EXEC SQL SELECT 
							 SETTL_NO, PAY_IN_DT ,PAY_OUT_DT , END_DATE
						INTO
							:l_sys_dl_deal_struct_h->h_settlement_no,
							:l_sys_dl_deal_struct_h->h_payin_dt,
							:l_sys_dl_deal_struct_h->h_payout_dt,
							:l_sys_dl_deal_struct_h->h_setldt
						FROM
							MT_SETTL_CAL
						WHERE
							EXCH_CODE =:l_sys_dl_deal_struct_h->h_exch_code AND 
							SETTL_NO||SETTL_TYPE =( SELECT
										CARRY_FW_STLNO||MKT_TYPE /*Retro with HDFC to add Settl Type in Query - Rahul 10Apr2008 */ 
									FROM
										MT_NO_DELV
									WHERE
										EXCH_CODE=:l_sys_dl_deal_struct_h->h_exch_code AND
										INSTR_CODE= :l_sys_dl_deal_struct_h->h_instr_code AND
										TO_DATE(:l_dl_date ,'DD/MM/YYYY') BETWEEN
										TRUNC(NO_DEL_FROM)  and TRUNC(NO_DEL_TO) AND 		
										STATUS = 'AA'
								);
					if(sqlca.sqlcode != 0)
					{
						printf("KS -- Error [%s] has occurred while fetching settlemnet details upon mt_no_delv.. \n",sqlca.sqlerrm.sqlerrmc);
					}
							

				}
				else
				{

					EXEC SQL SELECT 
								SETTL_NO, PAY_IN_DT ,PAY_OUT_DT , END_DATE
						INTO
								:l_sys_dl_deal_struct_h->h_settlement_no,
								:l_sys_dl_deal_struct_h->h_payin_dt,
								:l_sys_dl_deal_struct_h->h_payout_dt,
								:l_sett_datek
						FROM
								MT_SETTL_CAL
						WHERE
								//to_char(START_DATE,'DD/MM/YYYY') = trunc(:l_sys_dl_deal_struct_h->h_dlt) AND
								to_char(START_DATE,'DD/MM/YYYY') = :l_dl_date AND
								EXCH_CODE = :l_sys_dl_deal_struct_h->h_exch_code AND
								SETTL_TYPE= :l_sys_dl_deal_struct_h->h_mkt_type AND //Commented By Kalyan /* Comment removed - Retro with HDFC to add Settl Type in Query - Rahul 10Apr2008 */
								STATUS='AA';
		
					if(sqlca.sqlcode != 0)
					{
						printf("KS -- Error [%s] has occurred while fetching settlno... \n",sqlca.sqlerrm.sqlerrmc);
					}
					if(strlen(l_sys_dl_deal_struct_h->h_setldt)==0||(strcmp(l_sys_dl_deal_struct_h->h_clh_flg,"C")==0))
					{
						printf("KS -- Copying Settlement Date [%s]\nClh Flag is ...[%s]\n",l_sett_datek,l_sys_dl_deal_struct_h->h_clh_flg);
						strcpy(l_sys_dl_deal_struct_h->h_setldt,l_sett_datek);
					}
				}
					

				printf("KS -- Values Selected are \nSETTL_NO :  %s\nPAY_IN_DT :  %s\nPAY_OUT_DT  :  %s\n SETL_DATE :  %s\n",l_sys_dl_deal_struct_h->h_settlement_no,l_sys_dl_deal_struct_h->h_payin_dt,l_sys_dl_deal_struct_h->h_payout_dt,l_sys_dl_deal_struct_h->h_setldt);
			}
						 
			/* Kalyan -- For Settlement No Changes - Web - Till Here*/

				
			
			/* Kalyan -- For Web Module */


			if(strlen(l_sys_dl_deal_struct_h->h_instr_code)>0)
			{
				EXEC SQL SELECT COUNT(*) INTO :l_instrcou FROM MT_INSTRUMENT WHERE INSTR_CODE= :l_sys_dl_deal_struct_h->h_instr_code;
				if(sqlca.sqlcode != 0)
				{
					printf("KS -- Error %d occurrred while fetching INSTR_CODE from MT_INSTRUMENT \n",sqlca.sqlcode);
				}
			
				/*	ISKB_2224	Addition of condition with ISIN for Instrument Code	*/	
				if (l_instrcou == 0)
				{
					EXEC SQL SELECT COUNT(*) INTO :l_instrcou FROM MT_INSTRUMENT WHERE INSTR_ISIN= :l_sys_dl_deal_struct_h->h_instr_code;
					if(sqlca.sqlcode != 0)
					{
						printf("KS -- Error %d occurrred while fetching INSTR_ISIN from MT_INSTRUMENT \n",sqlca.sqlcode);
					}
			
					if (l_instrcou == 1)
					{
						EXEC SQL SELECT  INSTR_CODE INTO :l_instr_code
								FROM MT_INSTRUMENT WHERE INSTR_ISIN = :l_sys_dl_deal_struct_h->h_instr_code;	
						if(sqlca.sqlcode != 0)
						{
							printf("KS -- Error %d occurrred while fetching INSTR_ISIN from MT_INSTRUMENT \n",sqlca.sqlcode);
						}
						printf("KS -- Fetched Instrument Code is [%s] for ISIN |%s|\n",l_instr_code,l_sys_dl_deal_struct_h->h_instr_code);
						strcpy(l_sys_dl_deal_struct_h->h_instr_code,l_instr_code);
					}
				}
			}
				
			if ((!strcmp(l_sys_dl_deal_struct_h->h_entry,"W"))&&(l_instrcou == 0))
       {

          printf("KS -- Entered Web Module Instcode Check\n");

				
          CO_Rtv_DataString(chr_h_param_str,"INSTR_NAME",l_instr_name);
          printf("\nKS -- Instr_name fetched is [%s]\n",l_instr_name);

          EXEC SQL SELECT 	INSTR_CODE INTO :l_instr_code 
										FROM MT_INSTRUMENT WHERE 
										INSTR_NAME = :l_instr_name OR 
										INSTR_ISIN = :l_instr_name OR 
										INSTR_NAME = :l_sys_dl_deal_struct_h->h_instr_code OR 
										INSTR_ISIN = :l_sys_dl_deal_struct_h->h_instr_code;

          if(sqlca.sqlcode==1403)
          {
             l_errorset=1;

             if(strlen(l_instr_name) == 0)
					{
             	printf("Instrument Code [%s] not Found \n",l_sys_dl_deal_struct_h->h_instr_code);

						strcpy(chr_web_h_error_desc1,"[");
						strcat(chr_web_h_error_desc1,l_sys_dl_deal_struct_h->h_instr_code);
						strcat(chr_web_h_error_desc1,"]-");
						strcat(chr_web_h_error_desc1,"Instrument Not Found|#");
					/*	
             	CO_InsertErr(  l_debug_info_ptr,
               	               ERR_INSTR_NOTFND,
               	               l_sys_dl_deal_struct_h->h_instr_code,
                             	APL_NULL_STRING,
                             	APL_NULL_STRING,
                             	__LINE__,
                             	__FILE__);
					*/
					}
					else
					{
						/*
						EXEC SQL SELECT 	SUBSTR(:l_instr_name,0,19) , 
											SUBSTR(:l_instr_name,20,19) , 
											SUBSTR(:l_instr_name,39,19) 
									into 	:l_instr_1,
											:l_instr_2,
											:l_instr_3 
									FROM DUAL;

						printf("\n l_instr_1 - [%s] \nl_instr_2 - [%s] \nl_instr_3 - [%s]\n",l_instr_1,l_instr_2,l_instr_3);

             	printf("Instrument Code not Found for Instrument Name[%s]\n",l_instr_name);
             	CO_InsertErr(  l_debug_info_ptr,
               	               ERR_INSTR_NOTFND,
               	               l_instr_1,
                             	l_instr_2,
                             	l_instr_3,
                             	__LINE__,
                             	__FILE__);
						*/
             	printf("Instrument Code not Found for Instrument Name[%s]\n",l_instr_name);
						strcpy(chr_web_h_error_desc1,"[");
						strcat(chr_web_h_error_desc1,l_instr_name);
						strcat(chr_web_h_error_desc1,"]-");
						strcat(chr_web_h_error_desc1,"Instrument Not Found|#");
						/*
             	CO_InsertErr(  l_debug_info_ptr,
               	               ERR_INSTR_NOTFND,
               	               l_instr_name,
                             	APL_NULL_STRING,
                             	APL_NULL_STRING,
                             	__LINE__,
                             	__FILE__);
						*/
					}

             //int_ret_val = Proc_MarkFailProcess_Deal(h_ora_rowid,p_intlenv_data_struct_h, l_debug_info_ptr);
				}
				else if (sqlca.sqlcode != 0)
				{
					l_errorset=1;
             printf("Error had occurred while fetching instr_code for instrumet[%s]\n",l_instr_name);
					printf("Error [%s] \n",sqlca.sqlerrm.sqlerrmc);
           //int_ret_val = Proc_MarkFailProcess_Deal(h_ora_rowid,p_intlenv_data_struct_h, l_debug_info_ptr);
				}
				printf("KS -- Fetched Instrument Code is [%s]\n",l_instr_code);
				strcpy(l_sys_dl_deal_struct_h->h_instr_code,l_instr_code);
			} 
			
			printf("KS -- Final Instrument Code is [%s]\n",l_sys_dl_deal_struct_h->h_instr_code);
			l_instrcou=0;

			if(strlen(l_sys_dl_deal_struct_h->h_domcpclt_cd)>0)
       {
         EXEC SQL SELECT COUNT(*) INTO :l_instrcou FROM MT_PARTY WHERE PTY_CODE= :l_sys_dl_deal_struct_h->h_domcpclt_cd;
         if(sqlca.sqlcode != 0)
         {
            printf("KS -- Error %d occurrred while fetching from MT_PARTY \n",sqlca.sqlcode);
         }
       }

       if ((!strcmp(l_sys_dl_deal_struct_h->h_entry,"W"))&&(l_instrcou == 0))
       {

         printf("KS -- Entered Web Module Domestic_Cpclt  Check\n");

	printf("JC::: Param string ---- [%s]\n", chr_h_param_str);
         CO_Rtv_DataString(chr_h_param_str,"DOMESTIC_CP_NAME",l_pty_name);
         printf("\nKS -- Party Name fetched is [%s]\n",l_pty_name);

	printf("\nJC::: h_domcpclt_cd -- [%s]\n", l_sys_dl_deal_struct_h->h_domcpclt_cd);
	printf("JC::: l_pty_name    -- [%s]\n", l_pty_name);

	 /* JC - Commented - ISKB - 558 -- Start
         EXEC SQL SELECT PTY_CODE INTO :l_pty_code
                        FROM MT_PARTY WHERE
                        PTY_NAME = :l_pty_name OR
                        PTY_BIC_CODE = :l_pty_name OR
                        PTY_NAME = :l_sys_dl_deal_struct_h->h_domcpclt_cd OR
                        PTY_BIC_CODE = :l_sys_dl_deal_struct_h->h_domcpclt_cd;
        JC - Commented - ISKB - 558 -- End */

        /* JC - ISKB - 558 -- Start */
	EXEC SQL SELECT PTY_CODE INTO :l_pty_code
		FROM MT_PARTY WHERE
		(PTY_NAME = :l_pty_name OR
		PTY_BIC_CODE = :l_pty_name OR
		PTY_NAME = :l_sys_dl_deal_struct_h->h_domcpclt_cd OR
		PTY_BIC_CODE = :l_sys_dl_deal_struct_h->h_domcpclt_cd ) AND 
		PTY_TYPE = :l_pty_type_broker;

	IS_ANY_ORA_ERROR

	printf("JC::: ORA for selecting Party Code -- [%d]\n", sqlca.sqlcode);
        /* JC - ISKB - 558 -- End */

         if(sqlca.sqlcode==1403)
         {
		printf("JC::: Party code not found... \n");
            	l_errorset=1;

	     	if (strlen(l_pty_name) == 0)
		{
            		printf("JC::: Domestic CPCLT Code [%s] not Found \n",l_sys_dl_deal_struct_h->h_domcpclt_cd);
			strcpy(chr_web_h_error_desc2,"[");
			strcat(chr_web_h_error_desc2,l_sys_dl_deal_struct_h->h_domcpclt_cd);
			strcat(chr_web_h_error_desc2,"]-");
			strcat(chr_web_h_error_desc2,"Broker Code not Found|#");

            		CO_InsertErr(   l_debug_info_ptr,
                            ERR_DOMESTIC_CPCLT_NOTFOUND,
                            l_sys_dl_deal_struct_h->h_domcpclt_cd,
                            l_pty_2,
                            l_pty_3,
                            __LINE__,
                            __FILE__);
            	}
            	else
            	{
			/*				
            			EXEC SQL SELECT SUBSTR(:l_pty_name,0,19) , 
										SUBSTR(:l_pty_name,20,19) , 
										SUBSTR(:l_pty_name,39,19) 
										into :l_pty_1,:l_pty_2,:l_pty_3 FROM DUAL;

            			printf("\n l_pty_1 - [%s] \nl_pty_2 - [%s] \nl_pty_3 - [%s]\n",l_pty_1,l_pty_2,l_pty_3);
            			printf("Domestic CPCLT Code not Found for Domestic CPCLT Name[%s]\n",l_pty_name);

            			CO_InsertErr(   l_debug_info_ptr,
                            ERR_DOMESTIC_CPCLT_NOTFOUND,
                            l_pty_1,
                            l_pty_2,
                            l_pty_3,
                            __LINE__,
                            __FILE__);
			*/

			printf("JC::: l_pty_name -- [%s]\n", l_pty_name);
			strcpy(chr_web_h_error_desc2,"[");
			strcat(chr_web_h_error_desc2,l_pty_name);
			strcat(chr_web_h_error_desc2,"]-");
			strcat(chr_web_h_error_desc2,"Broker code/name not found|#");

			/*
            			CO_InsertErr(   l_debug_info_ptr,
                            ERR_DOMESTIC_CPCLT_NOTFOUND,
                            l_pty_name,
                            APL_NULL_STRING,
                            APL_NULL_STRING,
                            __LINE__,
                            __FILE__);
			*/
		}


            //int_ret_val = Proc_MarkFailProcess_Deal(h_ora_rowid,p_intlenv_data_struct_h, l_debug_info_ptr); 
          }
          else if (sqlca.sqlcode != 0)
          {
             l_errorset=1;
             printf("Error had occurred while fetching Domestic CPCLT Code for CPCLT Name [%s]\n",l_pty_name);
             printf("Error [%s] \n",sqlca.sqlerrm.sqlerrmc);
             /*int_ret_val = Proc_MarkFailProcess_Deal(h_ora_rowid,p_intlenv_data_struct_h, l_debug_info_ptr);*/
          }
          printf("KS -- Fetched Domestic CPCLT Code is [%s]\n",l_pty_code);
          strcpy(l_sys_dl_deal_struct_h->h_domcpclt_cd,l_pty_code);
      }
       /* Kalyan -- Till Here */

			strcpy(l_sys_dl_deal_struct_h->h_domcp_custodyclt,l_sys_dl_deal_struct_h->h_domcpclt_cd);
			printf("domcp is %s\n",l_sys_dl_deal_struct_h->h_domcp_custodyclt);	
			printf("h_domcpclt_cd is %s\n",l_sys_dl_deal_struct_h->h_domcpclt_cd);	
			/*
			if ((!strcmp(l_sys_dl_deal_struct_h->h_entry,"W"))&&(l_errorset == 1))
			{
				if ( strcmp(p_intl_envdatastruct_h->h_mode,"RPR")==0)
				{
					printf("\n ..Since Mode is RPR, this must have been called from Repair mode by user.. hence calling original error population function ...  \n");
					int_ret_val = CO_Rtv_ErrString(l_debug_info_ptr,chr_web_h_error_desc);
				}
				else
				{
					printf("KS -- Calling CO_Rtv_Error \n");
					printf("\n ..Since Mode is not RPR, this must have been called from Web Deal Creation through Web Deal Transfer .. hence calling new error population function ...  \n");
					int_ret_val = CO_Rtv_Error(l_debug_info_ptr,chr_web_h_error_desc);
				}
				CO_FreeErrLst(l_debug_info_ptr);
				INTL_WARNING
				S_NON_DCE_ERASE_DUMMY_WARNING;
				INTL_WARNING
			}
			*/
		/* Changes done by Dnyanesh */
		/* if(l_errorset == 0)  Kalyan */
		if(1 == 1) /* Kalyan */
		{
			Alert("p_intlenv_data_struct_h->subprocess : %s",p_intlenv_data_struct_h->subprocess);
			Alert("p_intlenv_data_struct_h->h_process : %s",p_intlenv_data_struct_h->h_process);
			Alert("p_intlenv_data_struct_h->processtion: %s",p_intlenv_data_struct_h->processtion);
			
			/*To changes by Denish -starts */ 
			if( (strcmp(p_intlenv_data_struct_h->processtion,"GFU")==0) && ((strcmp(p_intlenv_data_struct_h->subprocess,"GFU")==0) || (strcmp(p_intlenv_data_struct_h->h_process,"GFU")==0)))
			{
			
				if(((CHECK_EXISTANCE_OF_ERROR) && MT_validateT0Settlement(l_sys_dl_deal_struct_h,p_intlenv_data_struct_h,l_settl_ty,l_debug_info_ptr) == APL_SUCCESS) )
				{
					Alert("SUCCESS FROM MT_validateT0Settlement");
					
				}
				else 
				{
					Alert("FAILURE FROM MT_validateT0Settlement");
				}			  			
		   }			
			/*To changes by Denish -End */
			
		
		if(!strcmp(l_trigger,"API")){
				strcpy(l_sys_dl_deal_struct_h->h_checker,"SYSTEM");
		}
			printf("\n Calling DL_Proc_Trd now...\n");
			CO_Rtv_DataString(chr_h_env_str,"UPLREF_ID",l_uplref_id);
			
			/*company level limit monitoring start */
			if (((strcmp(l_sys_dl_deal_struct_h->h_entry,"W")==0)|| strcmp(l_sys_dl_deal_struct_h->h_entry,"S")==0 ||(strcmp(l_sys_dl_deal_struct_h->h_entry,"T")==0)) || ((strcmp(l_uplref_id,"DL_DEAL_PMS_UPL")==0) && strcmp(l_sys_dl_deal_struct_h->h_entry,"U") == 0) )
			{
			if(((CHECK_EXISTANCE_OF_ERROR) && FPI_DL_Deal(l_sys_dl_deal_struct_h,p_intlenv_data_struct_h,"D",l_debug_info_ptr) == APL_SUCCESS) )
			{
				Alert("SUCCESS FROM FPI_DL_Deal");
				
			}
            else 
			{
				Alert("FAILURE FROM FPI_DL_Deal");
				//*proc_dl_flg=0;
				err_RFP_glag=1;
			}			
			}
			if((err_RFP_glag ==0 && DL_Proc_Trd(l_sys_dl_deal_struct_h,int_ptr_trdrepseqnum,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
			{
				/*company level limit monitoring end*/
				/*  Bifurcation Details Updates are not required 
				if (!strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_INPUT))
				{
					int_ret_val = Populate_DL_BIFDET(l_dl_bifdet_struct_h,chr_h_param_str_bif);
					strcpy(l_dl_bifdet_struct_h->h_access_stamp,l_sys_dl_deal_struct_h->h_access_stamp);
					strcpy(l_dl_bifdet_struct_h->h_dp_id,"NSDL");

					EXEC SQL INSERT INTO DL_BIFDET VALUES (:l_dl_bifdet_struct_h);

           		IS_ANY_ORA_ERROR;
				}

				if (!strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_DELETE))
				{
					EXEC SQL DELETE FROM DL_BIFDET WHERE
						CLIENT =:l_sys_dl_deal_struct_h->h_dl_client AND
						IDENTIY_NO =:l_sys_dl_deal_struct_h->h_indentity_no;
					IS_ANY_ORA_ERROR;
				}
				*/
					CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_Trd with Success\n",NULL,p_intlenv_data_struct_h);
					//added by usman for CSGL API call-Started
					if(!strcmp(l_trigger,"API")){
					printf("\n Calling Auth DBG...\n");
					
					/*Print and Reset debug infor pointer*/
					CO_PrnErr(*l_debug_info_ptr) ;
					//CO_FreeErrLst(l_debug_info_ptr);
					
					strcpy(chr_h_comments,"SYSTEM AUTHORIZE");
					 
					strcpy(p_intlenv_data_struct_h->usr,"SYSTEM");
			        strcpy(p_intlenv_data_struct_h->h_mode,APL_FUNC_AUTHORISE);
                                        if((strcmp(chr_l_audit_data,APL_NULL_STRING)!=0) && (strcmp(chr_l_data_key,APL_NULL_STRING)!=0))
					{
					  if ( APL_FAILURE==CO_Upd_AudLog_Chk_SysOnline(p_intlenv_data_struct_h,chr_l_audit_data,chr_l_data_key,chr_h_comments,l_debug_info_ptr)) 
					  {
					     CO_ProcMonitor(APL_OUT_FILE,"Failed in CO_Upd_AudLog_Chk_SysOnline API\n",NULL,p_intlenv_data_struct_h);	
					  }
                                       }
					CO_PrnErr(*l_debug_info_ptr) ;
					/*other structure is subset of deal structure. Now intentionally passing small structue. CSGL UAT core issue RND.*/
					l_dl_deal_oth_struct_hc =  (DL_DEAL_OTH_STRUCT_H *)calloc(1,sizeof(DL_DEAL_OTH_STRUCT_H));
					APL_MALLOC_FAIL_LOC_A(l_dl_deal_oth_struct_hc);
					//int_ret_val = DL_Proc_DLOthPopulate(l_dl_deal_oth_struct_hc,chr_h_param_str);

					strcpy(l_dl_deal_oth_struct_hc->h_access_stamp,"DD/MM/YYYY");
					strcpy (l_dl_deal_oth_struct_hc->h_dl_client ,l_sys_dl_deal_struct_h->h_dl_client);
					printf("1 %s" ,l_dl_deal_oth_struct_hc->h_dl_client); fflush(stdout);
					strcpy (l_dl_deal_oth_struct_hc->h_indentity_no ,l_sys_dl_deal_struct_h->h_indentity_no);
					printf("2 %s" ,l_dl_deal_oth_struct_hc->h_indentity_no); fflush(stdout);
					strcpy (l_dl_deal_oth_struct_hc->h_locindentity_no ,l_sys_dl_deal_struct_h->h_locindentity_no);
					printf("3 %s" ,l_dl_deal_oth_struct_hc->h_locindentity_no); fflush(stdout);
					strcpy (l_dl_deal_oth_struct_hc->h_brkrno ,l_sys_dl_deal_struct_h->h_brkrno);
					printf("4 %s" ,l_dl_deal_oth_struct_hc->h_brkrno); fflush(stdout);
					strcpy (l_dl_deal_oth_struct_hc->h_clt_reqdel_flag ,l_sys_dl_deal_struct_h->h_clt_reqdel_flag);
					printf("5 %s" ,l_dl_deal_oth_struct_hc->h_clt_reqdel_flag); fflush(stdout);
					strcpy (l_dl_deal_oth_struct_hc->h_dealcd ,l_sys_dl_deal_struct_h->h_dealcd);
					printf("6 %s" ,l_dl_deal_oth_struct_hc->h_dealcd); fflush(stdout);
					strcpy (l_dl_deal_oth_struct_hc->h_dlt ,l_sys_dl_deal_struct_h->h_dlt);
					printf("7 %s" ,l_dl_deal_oth_struct_hc->h_dl_client); fflush(stdout);
					strcpy (l_dl_deal_oth_struct_hc->h_setldt ,l_sys_dl_deal_struct_h->h_setldt);
					printf("8 %s" ,l_dl_deal_oth_struct_hc->h_setldt); fflush(stdout);
					strcpy (l_dl_deal_oth_struct_hc->h_classofdl ,l_sys_dl_deal_struct_h->h_classofdl);
					printf("9 %s" ,l_dl_deal_oth_struct_hc->h_classofdl); fflush(stdout);
					strcpy (l_dl_deal_oth_struct_hc->h_lrdltype ,l_sys_dl_deal_struct_h->h_lrdltype);
					strcpy (l_dl_deal_oth_struct_hc->h_domcpclt_cd ,l_sys_dl_deal_struct_h->h_domcpclt_cd);
					printf("10 %s" ,l_dl_deal_oth_struct_hc->h_domcpclt_cd); fflush(stdout);
					strcpy (l_dl_deal_oth_struct_hc->h_custinfo ,l_sys_dl_deal_struct_h->h_custinfo);
					printf("11 %s" ,l_dl_deal_oth_struct_hc->h_custinfo); fflush(stdout);
					strcpy (l_dl_deal_oth_struct_hc->h_lr_ndsdate ,l_sys_dl_deal_struct_h->h_lr_ndsdate);
					printf("12 %s" ,l_dl_deal_oth_struct_hc->h_lr_ndsdate); fflush(stdout);
					l_dl_deal_oth_struct_hc->h_amt = l_dl_deal_oth_struct_hc->h_amt;
					l_dl_deal_oth_struct_hc->h_pr = l_dl_deal_oth_struct_hc->h_pr;
					printf("13 %d", l_dl_deal_oth_struct_hc->h_amt); fflush(stdout);
					printf("14 %d", l_dl_deal_oth_struct_hc->h_pr); fflush(stdout);

					CO_PrnErr(*l_debug_info_ptr) ;
					if((  DL_Proc_TrdOth( l_dl_deal_oth_struct_hc, 
                              p_intlenv_data_struct_h,
                              l_debug_info_ptr)  == APL_SUCCESS)
				   && CHECK_EXISTANCE_OF_ERROR  /*Temporarily commenting for Debug*/
				)	
				{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_TrdOth with Success for API call\n",NULL,p_intlenv_data_struct_h);
						int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value); 
				}
				else
				{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_TrdOth with Failure for API call\n",NULL,p_intlenv_data_struct_h);
						int_ret_val = Proc_MarkFailProcess_Deal(h_ora_rowid,p_intlenv_data_struct_h, chr_web_h_error_desc1, chr_web_h_error_desc2, l_debug_info_ptr); 
				}
					CO_PrnErr(*l_debug_info_ptr) ;
					
					free (l_dl_deal_oth_struct_hc);
					}
			//added by usman for CSGL API call- end
			 else {
			printf("\n Calling Batch_Proc_MarkSuccessProcess now...%d\n",strlen(g_mis_info));
					int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value); 
					Alert("PSS done marking Success");
			}
			}
			else
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_Trd with Failure\n",NULL,p_intlenv_data_struct_h);
		printf("\n Calling Proc_MarkFailProcess now...\n");
				int_ret_val = Proc_MarkFailProcess_Deal(h_ora_rowid,p_intlenv_data_struct_h, chr_web_h_error_desc1, chr_web_h_error_desc2, l_debug_info_ptr); 
			}
		}
		else /* Kalyan */
		{
                	int_ret_val = Proc_MarkFailProcess_Deal(h_ora_rowid,p_intlenv_data_struct_h, chr_web_h_error_desc1, chr_web_h_error_desc2, l_debug_info_ptr); 
		}
			free(l_sys_dl_deal_struct_h);
			free(l_dl_bifdet_struct_h);
			free(int_ptr_trdrepseqnum);
			Alert("wrp_GBGenTrdFn done Success");
		}
		
		/******************** HDFCDL_004 /BCN Maintenance - Sundar *****************************************/
		

               /* Retro from ICICI- for  PMS Processing-  13042015- Start-*/

else if (strcmp(chr_h_func_name,"wrp_GBGenTrdAllcFleFn") == 0)
		{
			INTL_WARNING;
			short l_int_error_flag = 0;
			short l_int_buy_flag = 0; //PMS isolve KB_12434
                       
                        char hvBuyClnMaster[11] =APL_NULL_STRING;
                        char hvSellClnMaster[11] =APL_NULL_STRING;
                        char hClnMaster[11] =APL_NULL_STRING;//PMS isolve KB_12434

			Alert("Entered into wrp_GBGenTrdAllcFleFn \n");

			l_sys_dl_deal_struct_h =  (SYS_DL_DEAL_STRUCT_H *)calloc(1,sizeof(SYS_DL_DEAL_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_sys_dl_deal_struct_h);
			memset(l_sys_dl_deal_struct_h,NULL,sizeof(SYS_DL_DEAL_STRUCT_H));

			int_ptr_trdrepseqnum =  (int *)calloc(1,sizeof(int));
			APL_MALLOC_FAIL_LOC_A(int_ptr_trdrepseqnum);
			memset(int_ptr_trdrepseqnum,NULL,sizeof(int));

                        printf("\n PRI1 p_intlenv_data_struct_h->subprocess :[%s]",p_intlenv_data_struct_h->subprocess);

			char h_instr_isin[13]=APL_NULL_STRING;
			char h_location_cd1[5]=APL_NULL_STRING;
			char dl_location_cd[5]=APL_NULL_STRING;
			/*Added for PMS isolve KB_12434 Starts*/
			char h_client_cd1[21]=APL_NULL_STRING; 
			char h_client_cd[21]=APL_NULL_STRING; 
			char client_cd[21]=APL_NULL_STRING; 
			char client_depo[21]=APL_NULL_STRING; 
			char h_cmbp_id_client[21]=APL_NULL_STRING; 
			char h_client_depo_map_id[21]=APL_NULL_STRING; 
			char loc_cd[5]=APL_NULL_STRING;
			char h_cp_depo_cd[5]=APL_NULL_STRING; 
			char chr_l_client_param[2] =APL_NULL_STRING;
			/*Added for PMS isolve KB_12434 Ends*/
			
			char h_cp_cln_id[DL_CP_CLNID_LEN];
			char h_cp_depo_id[DL_CP_DPID_LEN];
                        short i_loc_code = 0; //PMS
                        short i_cp_depo_cln_id = 0; //PMS
                        /*Added for PMS isolve KB_12434 Starts*/
						short i_cmbp_id_client = 0;  
                        short i_client_depo_map_id = 0;  
                        short i_cp_depo_cd = 0; 
						/*Added for PMS isolve KB_12434 Ends*/
                        short i_cp_depo_dp_id = 0; //PMS
         short hvPmsAuthInd = 0; //Added for Web PMS Authorization
         char h_pms_sell_client[DL_CLIENT_LEN]=APL_NULL_STRING; //Added for Web PMS Authorization
		 	char l_settl_ty[3];  //To changes by Denish
		 	memset(l_settl_ty, APL_NULL_CHAR,3);
						
		 	CO_Rtv_DataString(chr_h_param_str,"SETTELMENT_TYPE",(char *)l_settl_ty);  //To changes by Denish
		 	Alert("l_settl_ty: %s",l_settl_ty);

			memset(h_location_cd1,APL_NULL_CHAR,sizeof(h_location_cd1));
			memset(h_location_cd1,APL_NULL_CHAR,sizeof(dl_location_cd));
			memset(h_cp_cln_id,APL_NULL_CHAR,sizeof(h_cp_cln_id));
			/*Added for PMS isolve KB_12434 Starts*/
			memset(h_client_cd,APL_NULL_CHAR,sizeof(h_client_cd1)); 
			memset(h_cmbp_id_client,APL_NULL_CHAR,sizeof(client_cd)); 
			memset(h_client_depo_map_id,APL_NULL_CHAR,sizeof(client_depo)); 
			memset(h_cp_depo_cd,APL_NULL_CHAR,sizeof(loc_cd)); 
			/*Added for PMS isolve KB_12434 Ends*/
			memset(h_cp_depo_id,APL_NULL_CHAR,sizeof(h_cp_depo_id));
			memset(h_instr_isin,APL_NULL_CHAR,sizeof(h_instr_isin));

			memset(hvBuyClnMaster,APL_NULL_CHAR,sizeof(hvBuyClnMaster));
			memset(hvSellClnMaster,APL_NULL_CHAR,sizeof(hvSellClnMaster));
			memset(hClnMaster,APL_NULL_CHAR,sizeof(hClnMaster)); //Added for PMS isolve KB_12434
            memset(chr_l_client_param,APL_NULL_CHAR,sizeof(chr_l_client_param)); //Added for PMS isolve KB_12434
			memset(h_pms_sell_client,APL_NULL_CHAR,sizeof(h_pms_sell_client)); //Added for Web PMS Authorization

			int_ret_val = DL_Proc_DLPopulate(int_ptr_trdrepseqnum,l_sys_dl_deal_struct_h,chr_h_param_str);

                        printf("\n WEBBBB PMSSS :[%s]",p_intlenv_data_struct_h->subprocess);
//                        fflush(stdout);

//Added for Web PMS Authorization:start         
//Following is Added on 21122015 - To identify deals - If it is uploaded in custody or it is web custody deals which are authorized in custody. So Considering Initial mode for Web PMS Auth is AUT set subprocess or some oher identifier
         strcpy(p_intlenv_data_struct_h->auth_req,"N");

         if(strcmp(p_intlenv_data_struct_h->h_mode,"AUT") == 0)
         {
             hvPmsAuthInd = 1;

             strcpy(p_intlenv_data_struct_h->subprocess,"PMS");
             strcpy(p_intlenv_data_struct_h->h_mode,"INP");
             strcpy(h_pms_sell_client,l_sys_dl_deal_struct_h->h_dl_client);
         }

         printf("\n WEBBBB PMSSS2 :[%s]",p_intlenv_data_struct_h->subprocess);
         printf("\n PMSSS AUTH_REQ2:[%s]",p_intlenv_data_struct_h->auth_req);
         printf("\n PMSSS SELL_CLN:[%s]",h_pms_sell_client);
//Added for Web PMS Authorization:end
                        if(strcmp(p_intlenv_data_struct_h->subprocess,"PMS") == 0)
                        {
                           printf("\n For WCUST deal");
                           printf("\n For WCUST deal populate Location and Broker:[%s][%s]",l_sys_dl_deal_struct_h->h_dl_client,l_sys_dl_deal_struct_h->h_instr_code);
                           // FROM WCUSTODY INSTR read from file is instr_isin - populate it in instr_code

                               // Validate Location
                               EXEC SQL SELECT GET_PMS_LOCATION(:l_sys_dl_deal_struct_h->h_dl_client,:l_sys_dl_deal_struct_h->h_instr_code)
                                        INTO :l_sys_dl_deal_struct_h->h_loccode :i_loc_code
                                        FROM DUAL;
                               IS_ANY_ORA_ERROR
                               printf("\n l_sys_dl_deal_struct_h->h_loccode Is :[%s]",l_sys_dl_deal_struct_h->h_loccode);

                           l_int_error_flag = 1;
                        }
                        else
                        {
                           printf("\n In Custody Valiate Master Account And Sub Account");
			    Alert("\n Inn Custody Valiate h_dl_client|%s|",l_sys_dl_deal_struct_h->h_dl_client);
			    Alert("\n Inn Custody Valiate h_cln_depoacc|%s|",l_sys_dl_deal_struct_h->h_cln_depoacc);
						   
					/*Added by Asmeet-- If Sell Client or Buy Client is freezed, null values where getting passed in these variables, so to handle this, new condition is added for Sell Client and Buy Client if they are freezed or null.   Starts*/	
						if(strcmp(l_sys_dl_deal_struct_h->h_dl_client,APL_NULL_STRING) == 0 || strcmp(l_sys_dl_deal_struct_h->h_cln_depoacc,APL_NULL_STRING) == 0)
					   {
						   printf("\n Sell Client and Buy Client is improper, either it's freezed or is blank ");
						   l_int_error_flag = 0;
						   CO_InsertErr(   l_debug_info_ptr,
                                                               ERR_PMS_CLN_NOTPROPER,
                                                               APL_NULL_STRING,
                                                               APL_NULL_STRING,
                                                               APL_NULL_STRING,
                                                               __LINE__,
                                                               __FILE__);
							int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
					   }
					/*Added by Asmeet-- If Sell Client or Buy Client is freezed, null values where getting passed in these variables, so to handle this, new condition is added for Sell Client and Buy Client if they are freezed or null.		Ends*/

                           // Following If Condition Added On 28072015 - Priyanka B.

                          else if(strcmp(l_sys_dl_deal_struct_h->h_cln_depoacc,l_sys_dl_deal_struct_h->h_dl_client) == 0)
                           {
                              printf("\n Sell Client And Buy Client Both Are Same, It's Not Valid ");
                              l_int_error_flag = 0;
                              CO_InsertErr(   l_debug_info_ptr,
                                                               ERR_PMS_CLIENT_INVALID,
                                                               APL_NULL_STRING,
                                                               APL_NULL_STRING,
                                                               APL_NULL_STRING,
                                                               __LINE__,
                                                               __FILE__);
                               int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
                           }
                           else
                           {  

                           //Select Master account of DF Client - Compare it with RF Client
                           //If it is not matching - Get Master Of RF Client and Comapre it with DF Client
                           //If it is not matching - Error 

                           EXEC SQL SELECT CLN_MASTER INTO :hvBuyClnMaster
                                          FROM MT_CLIENT WHERE CLN_CODE = :l_sys_dl_deal_struct_h->h_cln_depoacc;
   
                           IS_ANY_ORA_ERROR
                            
                           printf("\n hvBuyClnMaster :[%s]",hvBuyClnMaster);

                           //Compare Sell Client with Buy Client's Master acct - If Not same  
                           if(strcmp(hvBuyClnMaster,l_sys_dl_deal_struct_h->h_dl_client) != 0)
                           {
                               printf("\n Sell Client is not matching with buy client's Master Account");

                               EXEC SQL SELECT CLN_MASTER INTO :hvSellClnMaster
                                          FROM MT_CLIENT WHERE CLN_CODE = :l_sys_dl_deal_struct_h->h_dl_client;

                               IS_ANY_ORA_ERROR

                               printf("\n hvSellClnMaster :[%s]",hvSellClnMaster);

                               if(strcmp(hvSellClnMaster,l_sys_dl_deal_struct_h->h_cln_depoacc) != 0)
                               {
                                 printf("\n Buy Client is not matching Sell client's Master Account");
                                     l_int_error_flag = 0;
                                              CO_InsertErr(   l_debug_info_ptr,
                                                                        ERR_PMS_MSTR_SUBACCT,
                                                                        APL_NULL_STRING,
                                                                        APL_NULL_STRING,
                                                                        APL_NULL_STRING,
                                                                        __LINE__,
                                                                        __FILE__);
                                     int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
                               }
                               else
                                  l_int_error_flag =1; 
                           }
                           else
                                l_int_error_flag = 1;

                        }

                        }

              if(l_int_error_flag == 1)
              {
				Alert("p_intlenv_data_struct_h->subprocess : %s",p_intlenv_data_struct_h->subprocess);
				Alert("p_intlenv_data_struct_h->h_process : %s",p_intlenv_data_struct_h->h_process);
				Alert("p_intlenv_data_struct_h->processtion: %s",p_intlenv_data_struct_h->processtion);
				/*To changes by Denish -starts */ 
				if( (strcmp(p_intlenv_data_struct_h->processtion,"GFU")==0) && ((strcmp(p_intlenv_data_struct_h->subprocess,"GFU")==0) || (strcmp(p_intlenv_data_struct_h->h_process,"GFU")==0)))
				{

					if(((CHECK_EXISTANCE_OF_ERROR) && MT_validateT0Settlement(l_sys_dl_deal_struct_h,p_intlenv_data_struct_h,l_settl_ty,l_debug_info_ptr) == APL_SUCCESS) )
					{
						Alert("SUCCESS FROM MT_validateT0Settlement");
					}
					else 
					{
						Alert("FAILURE FROM MT_validateT0Settlement");
					}
						
				}			
				/*To changes by Denish -End */
				  

		       //	CO_Rtv_DataString(chr_h_param_str,"LOCATION_CD1",h_location_cd1);
                         Alert("Location code passed through Gfformatmap |%s|",l_sys_dl_deal_struct_h->h_loccode);
                           strcpy(h_location_cd1,l_sys_dl_deal_struct_h->h_loccode); 
                           Alert("h_location_cd1 aftr strcpy func |%s|",h_location_cd1);
                         Alert("l_sys_dl_deal_struct_h->h_loccodeeeeeeee |%s|",l_sys_dl_deal_struct_h->h_loccode);
			if (   (strlen(h_location_cd1)== 0) || (strlen(l_sys_dl_deal_struct_h->h_loccode)== 0) )
			{
				l_int_error_flag = 0;

							CO_InsertErr(   l_debug_info_ptr,
									ERR_LOCN_NOTFND,
									APL_NULL_STRING,
									APL_NULL_STRING,
									APL_NULL_STRING,
									__LINE__,
									__FILE__);				
	  			int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			else
			{
				l_int_error_flag = 1;
			}
                       printf("\n l_sys_dl_deal_struct_h->h_indentity_no :[%s]",l_sys_dl_deal_struct_h->h_indentity_no);

                       if(strlen(l_sys_dl_deal_struct_h->h_indentity_no) == 0)
                       {
                       Alert(" deal ref no gen startss ");	
			/*Deal Refernce No. Generation Starts*/
			int int_l_seqnum_a=0;
			int int_return_val=0;
			char l_sysdate[9];
			char l_seqnum_a1[6];
			char l_str_pmsdlrefno[16];

			short i_sysdate = 0;
			short i_seqnum_a1 = 0;

			memset(l_sysdate,APL_NULL_CHAR,sizeof(l_sysdate));
			memset(l_seqnum_a1,APL_NULL_CHAR,sizeof(l_seqnum_a1));
			memset(l_str_pmsdlrefno,APL_NULL_CHAR,sizeof(l_str_pmsdlrefno));
			memset(chr_l_cmbp_id1,APL_NULL_CHAR,sizeof(chr_l_cmbp_id1)); //Swapnil pms 12434  
			memset(chr_l_cln_master,APL_NULL_CHAR,sizeof(chr_l_cln_master));  //Swapnil pms 12434 
			memset(chr_l_cln_master1,APL_NULL_CHAR,sizeof(chr_l_cln_master1));  //Swapnil pms 12434 
			memset(chr_l_cln_code,APL_NULL_CHAR,sizeof(chr_l_cln_code));  //Swapnil pms 12434 
			
			PRO_GSEQNUM_STRUCT_H    l_pro_gseqno_struct_h;

			strcpy(l_pro_gseqno_struct_h.sequencename, "PMSDLREFSEQ");
			strcpy(l_pro_gseqno_struct_h.seq_attrb_a, APL_NULL_STRING);
			strcpy(l_pro_gseqno_struct_h.seq_attrb_b, APL_NULL_STRING);
			strcpy(l_pro_gseqno_struct_h.seq_attrb_c, APL_NULL_STRING);
			
			l_pro_gseqno_struct_h.seq_stepby = 1;
			l_pro_gseqno_struct_h.seq_start = 1;
			l_pro_gseqno_struct_h.last_seqnum = 99999;
			l_pro_gseqno_struct_h.recycle_ind = RECYCLE_EOD;

			int_return_val = CO_RtvNxtSeqNum(&l_pro_gseqno_struct_h,l_debug_info_ptr);
			printf("\n int_return_val |%d|",int_return_val);

				int_l_seqnum_a	= int_return_val;

			printf("\n int_l_seqnum_a is |%d|",int_l_seqnum_a);

			EXEC SQL SELECT TO_CHAR(SYS_DATE,'DDMMYYYY'),LPAD(:int_l_seqnum_a,5,'0') INTO :l_sysdate:i_sysdate,:l_seqnum_a1:i_seqnum_a1 FROM PRO_SYS_DATE;
			IS_ANY_ORA_ERROR

			sprintf(l_str_pmsdlrefno,"PM%s%s",l_sysdate,l_seqnum_a1);
			strcpy(l_sys_dl_deal_struct_h->h_indentity_no,l_str_pmsdlrefno);
			printf("Deal reference number generated is |%s|",l_sys_dl_deal_struct_h->h_indentity_no);
			/*Deal Refernce No. Generation Ends*/
                       }

			/** First Deal Creation Starts **/
			strcpy(dl_location_cd,l_sys_dl_deal_struct_h->h_loccode);
			strcpy(l_sys_dl_deal_struct_h->h_domcp_custodyclt,l_sys_dl_deal_struct_h->h_domcpclt_cd); // Added by Hari for IB_6762
			printf("\n l_sys_dl_deal_struct_h->h_pltopl_flg |%s|",l_sys_dl_deal_struct_h->h_pltopl_flg);
			strcpy(l_sys_dl_deal_struct_h->h_pltopl_flg,"Q");
                        CO_ProcMonitor(APL_OUT_FILE,"Now calling DL_Proc_Trd for 1st deal\n",NULL,p_intlenv_data_struct_h);
			
		/*Added by Swapnil for isolve KB_12434 Starts*/
			
                           EXEC SQL SELECT CLN_MASTER INTO :chr_l_cln_master:i_cln_master 
                                          FROM MT_CLIENT WHERE CLN_CODE = :l_sys_dl_deal_struct_h->h_dl_client;
   
                           IS_ANY_ORA_ERROR
            Alert("\n  chr_l_cln_master =|%s|",chr_l_cln_master); 
			
                               if(strcmp(chr_l_cln_master,l_sys_dl_deal_struct_h->h_dl_client) == 0)
                               {     
								   strcpy(chr_l_cln_code,chr_l_cln_master);
								   Alert("\n  23 chr_l_cln_code=|%s| ",chr_l_cln_code);
							   }
							   else
							   {
								  EXEC SQL SELECT CLN_MASTER INTO :chr_l_cln_master1:i_cln_master1 
                                          FROM MT_CLIENT WHERE CLN_CODE = :chr_l_cln_master;
   
									IS_ANY_ORA_ERROR 
									
									strcpy(chr_l_cln_code,chr_l_cln_master1);
									 Alert("\n  24 chr_l_cln_code=|%s| ",chr_l_cln_code);
							   }
							
			Alert("\n  25 chr_l_cln_code=|%s| ",chr_l_cln_code);
			
			
			 EXEC SQL SELECT CMBP_ID INTO :chr_l_cmbp_id1:i_cmbp_id1 
			 FROM MT_CLI_DEPO_MAP 
			 WHERE CLN_CODE =:chr_l_cln_code   
			 AND CLN_DEPO_CODE=:l_sys_dl_deal_struct_h->h_loccode;
			 IS_ANY_ORA_ERROR
			 
			 Alert("\n  chr_l_cmbp_id1 =|%s|",chr_l_cmbp_id1);
			 Alert("\n  h_dl_client =|%s|",l_sys_dl_deal_struct_h->h_dl_client);
			 Alert("\n  h_loccode =|%s|",l_sys_dl_deal_struct_h->h_loccode);
			 
			 
 	if(strcmp(chr_l_cmbp_id1,APL_NULL_STRING) ==0 )
			{

				strcpy(l_sys_dl_deal_struct_h->h_ex_arena,"2");
				strcpy(l_sys_dl_deal_struct_h->h_trd_mkt_type,APL_NULL_STRING);
				strcpy(l_sys_dl_deal_struct_h->h_trd_setl_no,APL_NULL_STRING);
			    strcpy(l_sys_dl_deal_struct_h->h_trd_exch,APL_NULL_STRING);
				strcpy(l_sys_dl_deal_struct_h->h_payin_dt,APL_NULL_STRING);				
				strcpy(l_sys_dl_deal_struct_h->h_payout_dt,APL_NULL_STRING);				
				strcpy(l_sys_dl_deal_struct_h->h_setldt,l_sys_dl_deal_struct_h->h_dlt);
  
			}
			 /* Added by Swapnil for isolve KB_12434 Ends */
		/*Added by Asmeet for isolve KB_12434 Starts*/
			if(strcmp(l_sys_dl_deal_struct_h->h_ex_arena,"1")==0)
			{
					printf("\n Before  Trade in Daemon_Dl.pc_1 wrp_GBGenTrdAllcFleFn\n");		
				/*Added by Asmeet for isolve 12174 Interoperability Starts*/
				if(!strcmp(l_sys_dl_deal_struct_h->h_exch_code,APL_NULL_STRING) && strcmp(l_sys_dl_deal_struct_h->h_trd_exch,APL_NULL_STRING) && strcmp(l_sys_dl_deal_struct_h->h_trd_mkt_type,APL_NULL_STRING))
				{
					printf("\n INSIDE Trade in Daemon_Dl.pc_2 \n");	
				memset(l_dl_date,APL_NULL_CHAR,sizeof(l_dl_date));	
				strncpy(l_dl_date,l_sys_dl_deal_struct_h->h_dlt,10);
				EXEC SQL SELECT GET_INTEROP_SETL_DET(:l_sys_dl_deal_struct_h-> h_dl_client,:l_sys_dl_deal_struct_h-> h_trd_exch,:l_sys_dl_deal_struct_h->h_trd_mkt_type,:l_sys_dl_deal_struct_h-> h_trd_setl_no,:l_dl_date,:l_sys_dl_deal_struct_h->h_instr_code) into :chr_l_setl_det:i_setl_det FROM DUAL;
				
				Alert("shr -- Error %d occurrred while fetching from GET_INTEROP_SETL_DET wrp_GBGenTrdAllcFleFn\n",sqlca.sqlcode);
				Alert("chr_l_setl_det == |%s|",chr_l_setl_det);
				
				if(strcmp(chr_l_setl_det,APL_NULL_STRING))
				{
						if(APL_FAILURE == CO_SplitStr(chr_l_setl_det,
							'|',
							&l_int_num,&temp))
						{
							CO_ProcMonitor(APL_OUT_FILE, "Failure from StrSplitFn", l_debug_info_ptr, NULL);
						}
						else
						{
							strcpy(l_sys_dl_deal_struct_h->h_exch_code,temp[0]);
							strcpy(l_sys_dl_deal_struct_h->h_mkt_type,temp[1]);
							strcpy(l_sys_dl_deal_struct_h->h_settlement_no,temp[2]);
							
						}
						 Alert("\n shr wrp_GBGenTrdAllcFleFn:::: arguments are A--|%s| B--|%s| C--|%s|", temp[0],temp[1],temp[2]);
				}
				}
				
				if(strcmp(l_sys_dl_deal_struct_h->h_exch_code,APL_NULL_STRING) == 0)
					  {  
					   CO_InsertErr(   l_debug_info_ptr,
										ERR_EXCH_CD_MISSING,
										l_sys_dl_deal_struct_h->h_exch_code,
										l_pty_2,
										l_pty_3,
										__LINE__,
										__FILE__);
					  }
					  
				 if(strcmp(l_sys_dl_deal_struct_h->h_mkt_type,APL_NULL_STRING) == 0)
					  { 
						CO_InsertErr(   l_debug_info_ptr,
										ERR_MKT_TYPE_MISSING,
										l_sys_dl_deal_struct_h->h_mkt_type,
										l_pty_2,
										l_pty_3,
										__LINE__,
										__FILE__);
					  }
					  
				 if(strcmp(l_sys_dl_deal_struct_h->h_settlement_no,APL_NULL_STRING) == 0)
					  { 
						CO_InsertErr(   l_debug_info_ptr,
										ERR_SETTL_NO_MISSING,
										l_sys_dl_deal_struct_h->h_settlement_no,
										l_pty_2,
										l_pty_3,
										__LINE__,
										__FILE__);
					  }
					  
				/*Added by Asmeet for isolve 12174 Interoperability Ends*/		
			}				
			/*Added by Asmeet for isolve KB_12434 Ends*/			
			if((DL_Proc_Trd(l_sys_dl_deal_struct_h,int_ptr_trdrepseqnum,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_Trd 1 with Success\n",NULL,p_intlenv_data_struct_h);

				l_int_error_flag = 1;
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_Trd 1 with Failure\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);

				l_int_error_flag = 0;
			}
                        printf("\n FIRST DEAL CREATION ENDS");
          Alert("\n 03022016-Deal sqlca.sqlcode:[%d]",sqlca.sqlcode);

			/** First Deal Creation Ends **/

			/** Prematch for First Deal Starts **/
			if (l_int_error_flag == 1)
			{
		                 Alert("Prematch for the 1st dealll start");

                          	l_int_error_flag = 0;

				l_dl_single_prematch_struct_h = (DL_SINGLE_PREMATCH_STRUCT_H *)calloc(1, sizeof(DL_SINGLE_PREMATCH_STRUCT_H));
				APL_MALLOC_FAIL_LOC_A(l_dl_single_prematch_struct_h);
				memset(l_dl_single_prematch_struct_h, NULL, sizeof(DL_SINGLE_PREMATCH_STRUCT_H));

		                /* Added by Hari for IB_6724 for Skipping Prematch - start */
				l_dl_deal_pmtdet_struct_hd =  (DL_DEAL_PMTDET_STRUCT_H *)calloc(1,sizeof(DL_DEAL_PMTDET_STRUCT_H));
				memset(l_dl_deal_pmtdet_struct_hd,NULL,sizeof(DL_DEAL_PMTDET_STRUCT_H));

				l_dl_dpgen_det_struct_h =  (DL_DPGEN_DET_STRUCT_H *)calloc(1,sizeof(DL_DPGEN_DET_STRUCT_H));
				memset(l_dl_dpgen_det_struct_h,NULL,sizeof(DL_DPGEN_DET_STRUCT_H));
                                /* Added by Hari for IB_6724 for Skipping Prematch - end */
				int_ret_val = Populate_DL_SINGLE_PREMATCH(l_dl_single_prematch_struct_h,chr_h_param_str);

				/*Copying variables in prematch and dp_gen_det structure starts*/
				strcpy(l_dl_single_prematch_struct_h->h_dl_client,l_sys_dl_deal_struct_h->h_dl_client);
				strcpy(l_dl_single_prematch_struct_h->h_identiy_no,l_sys_dl_deal_struct_h->h_indentity_no);
				strcpy(l_dl_single_prematch_struct_h->h_orig_identiy_no,l_sys_dl_deal_struct_h->h_indentity_no);
				strcpy(l_dl_single_prematch_struct_h->h_defer_sec_sett_flg,"N");
				strcpy(l_dl_single_prematch_struct_h->h_defer_mon_sett_flg,"N");
				strcpy(l_dl_single_prematch_struct_h->h_confdate,l_sys_dl_deal_struct_h->h_dlt);
				strcpy(l_dl_single_prematch_struct_h->h_exp_settl_date,l_sys_dl_deal_struct_h->h_dlt);
				strcpy(l_dl_single_prematch_struct_h->h_execution_date,l_sys_dl_deal_struct_h->h_dlt);
				strcpy(l_dl_single_prematch_struct_h->h_ispartial,"N");
				strcpy(l_dl_single_prematch_struct_h->h_access_stamp,l_sys_dl_deal_struct_h->h_access_stamp);
				strcpy(l_dl_single_prematch_struct_h->h_location_cd,l_sys_dl_deal_struct_h->h_loccode);
				strcpy(l_dl_single_prematch_struct_h->h_mkt_type,l_sys_dl_deal_struct_h->h_mkt_type);
				l_dl_single_prematch_struct_h->h_newquantity = l_sys_dl_deal_struct_h->h_qty;
				l_dl_single_prematch_struct_h->h_newamount = l_sys_dl_deal_struct_h->h_origamount;
			
                                /*
				if (strcmp (l_sys_dl_deal_struct_h->h_loccode,h_location_cd1) == 0)
				{
					strcpy(l_dl_single_prematch_struct_h->h_inter_dp_flag,"N");
				}
				else
				{
					strcpy(l_dl_single_prematch_struct_h->h_inter_dp_flag,"Y");
				} */
				printf("\n h_location_cd1 after inter dp flag check |%s|",h_location_cd1);
				EXEC SQL SELECT CLN_DEPO_MAP_DP_ID,CLN_DEPO_MAP_CLIENT_ID,CMBP_ID,CLN_DEPO_CODE INTO :h_cp_depo_id :i_cp_depo_dp_id,:h_cp_cln_id:i_cp_depo_cln_id,:h_cmbp_id_client:i_cmbp_id_client,:h_cp_depo_cd:i_cp_depo_cd FROM MT_CLI_DEPO_MAP WHERE CLN_CODE=:l_sys_dl_deal_struct_h->h_cln_depoacc AND CLN_DEPO_CODE=:h_location_cd1;
				IS_ANY_ORA_ERROR

				//if (strcmp(l_sys_dl_deal_struct_h->h_dealcd,"1") == 0)
				//{
					printf("\n h_cp_dp_id after query1|%s|",h_cp_depo_id);
					printf("\n h_cp_cln_id after query1|%s|",h_cp_cln_id);

					
					
					/*if(strcmp(l_sys_dl_deal_struct_h->h_ex_arena,"1")==0)
					{
						strcpy(l_dl_single_prematch_struct_h->h_brok_dp_id,h_cp_depo_id);
						strcpy(l_dl_single_prematch_struct_h->h_brok_cmbp_id,h_cp_cln_id);
						strcpy(l_dl_single_prematch_struct_h->h_cp_dp_id,APL_NULL_STRING);
						strcpy(l_dl_single_prematch_struct_h->h_cp_client_id,APL_NULL_STRING);
						
					
					}	
					else	
					{
						strcpy(l_dl_single_prematch_struct_h->h_cp_dp_id,h_cp_depo_id);
						strcpy(l_dl_single_prematch_struct_h->h_cp_client_id,h_cp_cln_id);
						strcpy(l_dl_single_prematch_struct_h->h_brok_dp_id,APL_NULL_STRING);
						strcpy(l_dl_single_prematch_struct_h->h_brok_cmbp_id,APL_NULL_STRING);
					}*/					
						
                        /*Condition added by Asmeet for KOTAK isolve 12434 to pass values to brok_dp_id and brok_cmbp_id instead of APL_NULL_STRING for on-mkt deals starts*/
					EXEC SQL SELECT CLN_MASTER INTO :hClnMaster
							FROM MT_CLIENT WHERE CLN_CODE = :l_sys_dl_deal_struct_h->h_dl_client;
					
					if(strcmp(hClnMaster,l_sys_dl_deal_struct_h->h_dl_client) == 0)
					{
					   EXEC SQL SELECT CLN_DEPO_MAP_DP_ID,CMBP_ID,CLN_DEPO_CODE INTO :h_client_depo_map_id:i_client_depo_map_id,:h_cmbp_id_client:i_cmbp_id_client,    :h_cp_depo_cd:i_cp_depo_cd FROM MT_CLI_DEPO_MAP 
								WHERE CLN_CODE=:l_sys_dl_deal_struct_h->h_dl_client
								AND CLN_DEPO_CODE=:h_location_cd1;
								IS_ANY_ORA_ERROR
					}
					else
					{
						strcpy(h_client_depo_map_id,h_cp_depo_id);						
						if(strcmp(l_sys_dl_deal_struct_h->h_ex_arena,"1")==0)
						{	
							strcpy(h_cp_cln_id,h_cmbp_id_client);				
							l_int_buy_flag = 1;
						}
						else
						{
							l_int_buy_flag = 0;
						}
						
					}	
					if(strcmp(l_sys_dl_deal_struct_h->h_ex_arena,"1")==0)
					{
						strcpy(l_dl_single_prematch_struct_h->h_brok_dp_id,h_cp_depo_id);
						strcpy(l_dl_single_prematch_struct_h->h_brok_cmbp_id,h_cp_cln_id);
						strcpy(l_dl_single_prematch_struct_h->h_cp_dp_id,APL_NULL_STRING);
						strcpy(l_dl_single_prematch_struct_h->h_cp_client_id,APL_NULL_STRING);
						
					
					}	
					else	
					{
						strcpy(l_dl_single_prematch_struct_h->h_cp_dp_id,h_cp_depo_id);
						strcpy(l_dl_single_prematch_struct_h->h_cp_client_id,h_cp_cln_id);
						strcpy(l_dl_single_prematch_struct_h->h_brok_dp_id,APL_NULL_STRING);
						strcpy(l_dl_single_prematch_struct_h->h_brok_cmbp_id,APL_NULL_STRING);
					}		
/*						
					if(strcmp(l_sys_dl_deal_struct_h->h_ex_arena,"1")==0)
					{
						strcpy(l_dl_single_prematch_struct_h->h_brok_dp_id,h_client_depo_map_id);
						strcpy(l_dl_single_prematch_struct_h->h_brok_cmbp_id,h_cmbp_id_client);
					}
					else
					{
						strcpy(l_dl_single_prematch_struct_h->h_brok_dp_id,APL_NULL_STRING);
						strcpy(l_dl_single_prematch_struct_h->h_brok_cmbp_id,APL_NULL_STRING);
					}
*/
				/*Condition added by Asmeet for KOTAK isolve 12434 to pass values to brok_dp_id and brok_cmbp_id instead of APL_NULL_STRING for on-mkt deals Ends*/	

			
				
				
			/* Added by Hari for IB_6724 for Skipping Prematch - start */

                        strcpy(l_dl_deal_pmtdet_struct_hd->h_dl_client,l_dl_single_prematch_struct_h->h_dl_client);
                        strcpy(l_dl_deal_pmtdet_struct_hd->h_indentity_no,l_dl_single_prematch_struct_h->h_identiy_no);
                        strcpy(l_dl_deal_pmtdet_struct_hd->h_confdate,l_dl_single_prematch_struct_h->h_confdate);
                        strcpy(l_dl_deal_pmtdet_struct_hd->h_verfied_with,l_dl_single_prematch_struct_h->h_verified_with);
                        //strcpy(l_dl_deal_pmtdet_struct_hd->h_diffamount,l_dl_single_prematch_struct_h->h_diffamount);
                        l_dl_deal_pmtdet_struct_hd->h_diffamount = l_dl_single_prematch_struct_h->h_diffamount;
                        strcpy(l_dl_deal_pmtdet_struct_hd->h_info1,l_dl_single_prematch_struct_h->h_info1);
                        strcpy(l_dl_deal_pmtdet_struct_hd->h_ispart_,l_dl_single_prematch_struct_h->h_ispartial);
                        strcpy(l_dl_deal_pmtdet_struct_hd->h_brkrno,l_dl_single_prematch_struct_h->h_broker_ord_no);
                        //strcpy(l_dl_deal_pmtdet_struct_hd->h_newquantity,l_dl_single_prematch_struct_h->h_newquantity);
                        l_dl_deal_pmtdet_struct_hd->h_newquantity = l_dl_single_prematch_struct_h->h_newquantity;
                        l_dl_deal_pmtdet_struct_hd->h_newamount = l_dl_single_prematch_struct_h->h_newamount;
                        strcpy(l_dl_deal_pmtdet_struct_hd->h_newindentity_no,l_dl_single_prematch_struct_h->h_identiy_no);
                        strcpy(l_dl_deal_pmtdet_struct_hd->h_newlocindentity_no,l_dl_single_prematch_struct_h->h_identiy_no);
                        strcpy(l_dl_deal_pmtdet_struct_hd->h_access_stamp,l_dl_single_prematch_struct_h->h_access_stamp);
                        //strcpy(l_dl_deal_pmtdet_struct_hd->h_grossamount,l_dl_deal_struct_h->h_amt);
                        l_dl_deal_pmtdet_struct_hd->h_grossamount = 0; //PT did 0
                        //strcpy(l_dl_deal_pmtdet_struct_hd->h_cpamt,l_dl_single_prematch_struct_h->h_cpamt);
                        l_dl_deal_pmtdet_struct_hd->h_cpamt = l_dl_single_prematch_struct_h->h_cpamt;
                        strcpy(l_dl_deal_pmtdet_struct_hd->h_comm_indentity_no,l_sys_dl_deal_struct_h->h_comm_indentity_no);
                        strcpy(l_dl_deal_pmtdet_struct_hd->h_exp_setl_date,l_dl_single_prematch_struct_h->h_exp_settl_date);
                        strcpy(l_dl_deal_pmtdet_struct_hd->h_newlocindentity_no,l_dl_single_prematch_struct_h->h_location_cd);



                        strcpy(l_dl_dpgen_det_struct_h->h_dl_ref_no,l_dl_single_prematch_struct_h->h_identiy_no);
                        strcpy(l_dl_dpgen_det_struct_h->h_dl_client,l_dl_single_prematch_struct_h->h_dl_client);

                        strcpy(l_dl_dpgen_det_struct_h->h_broker_dpid,l_dl_single_prematch_struct_h->h_brok_dp_id);
                        strcpy(l_dl_dpgen_det_struct_h->h_broker_cmbpid,l_dl_single_prematch_struct_h->h_brok_cmbp_id);
                        strcpy(l_dl_dpgen_det_struct_h->h_cp_dpid,l_dl_single_prematch_struct_h->h_cp_dp_id);
                        strcpy(l_dl_dpgen_det_struct_h->h_cp_clnid,l_dl_single_prematch_struct_h->h_cp_client_id);

                        strcpy(l_dl_dpgen_det_struct_h->h_gendp_flg,l_dl_single_prematch_struct_h->h_dp_instr_flag);		
                        strcpy(l_dl_dpgen_det_struct_h->h_maker,l_dl_single_prematch_struct_h->h_maker);

                        strcpy(l_dl_dpgen_det_struct_h->h_maker_dt,l_dl_single_prematch_struct_h->h_maker_dt);
                        strcpy(l_dl_dpgen_det_struct_h->h_access_stamp,l_dl_single_prematch_struct_h->h_access_stamp);
                        strcpy(l_dl_dpgen_det_struct_h->h_mkt_type,l_dl_single_prematch_struct_h->h_mkt_type);

                        //strcpy(l_dl_dpgen_det_struct_h->h_qty,l_dl_single_prematch_struct_h->h_newquantity);
                        l_dl_dpgen_det_struct_h->h_qty = l_dl_single_prematch_struct_h->h_newquantity;
                        strcpy(l_dl_dpgen_det_struct_h->h_exec_dt,l_dl_single_prematch_struct_h->h_execution_date);
          /* commented  strcpy(l_dl_dpgen_det_struct_h->h_interdp_flg,l_dl_single_prematch_struct_h->h_inter_dp_flag);
                          by swathi for testing- add to struct */

			/* Added by Hari for IB_6724 for Skipping Prematch - end */

				//}
				/*else
				{
					strcpy(l_dl_single_prematch_struct_h->h_cp_dp_id,APL_NULL_STRING);
					strcpy(l_dl_single_prematch_struct_h->h_cp_client_id,APL_NULL_STRING);
					strcpy(l_dl_single_prematch_struct_h->h_brok_dp_id,h_cp_dp_id);
					strcpy(l_dl_single_prematch_struct_h->h_brok_cmbp_id,h_cp_cln_id);
				}*/
				/*Copying variables in prematch and dp_gen_det structure ends*/

			/* Added by Hari for IB_6724 for Skipping Prematch - start */
				
                         CO_ProcMonitor(APL_OUT_FILE,"\n NOW CALLING DL_Mod_DLPmt for 1st deal\n",NULL,p_intlenv_data_struct_h);

                        /*Sheetal -Condition added to check for DU status*/
                        if(strcmp(p_intlenv_data_struct_h->h_mode, "AUT") == 0 && strcmp(l_dl_single_prematch_struct_h->h_status, "DU") == 0)
                                {
                                        if((DL_ModSingle_Prematch(l_dl_single_prematch_struct_h,
                                                                        p_intlenv_data_struct_h,
                                                                        l_debug_info_ptr)
                                                        == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
                                        {
                                                CO_ProcMonitor(APL_OUT_FILE, "Returned from DL_ModSingle_Prematch called from Global Prematch with SUCCESS\n", NULL, p_intlenv_data_struct_h);
                                                //int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid, chr_l_return_value); Commenetd by Hari for IB_6964
                                        }
                                        else
                                        {
                                                CO_ProcMonitor(APL_OUT_FILE, "Returned from DL_ModSingle_Prematch called from Global Prematch with failure\n", NULL, p_intlenv_data_struct_h);
                                                int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
                                        }

                                }
								
                        else if((  DL_Mod_DLPmt(l_dl_deal_pmtdet_struct_hd,
                                                                  p_intlenv_data_struct_h,
                                                                  l_debug_info_ptr)  == APL_SUCCESS) && CHECK_EXISTANCE_OF_ERROR )
								{
                                CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Mod_DLPmt for 1st deal\n",NULL,p_intlenv_data_struct_h);

                                if(MT_UpdDL_DPGEN_DET(l_dl_dpgen_det_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)
                                {
                          //          int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value); Commented by Hari for IB_6964
								 IF_COND_EXISTS("PREMATCH", "SINGLE_PREMATCH_AUTH")
								 {
                                /* JC - IB_PH3_53 - To add and update details in table dl_single_prematch [Start] */
								/* Hari	if(strcmp(p_intlenv_data_struct_h->usr, "GFU") == 0)
									  { Hari */
                                        /* To Add the record in dl_single_prematch with UU status */
                                        strcpy(p_intlenv_data_struct_h->h_mode, "INP");
                                        printf("JC::: Mode is [%s]\n", p_intlenv_data_struct_h->h_mode);

					/* Added by Hari for IB_6911 - start */
                                          Alert("For updating record with AA status - in single prematch-start");
					strcpy(l_dl_single_prematch_struct_h->h_status,STATUS_AUTH);
					strcpy(l_dl_single_prematch_struct_h->h_maker,p_intlenv_data_struct_h->usr);
					strcpy(l_dl_single_prematch_struct_h->h_maker_dt,l_sys_dl_deal_struct_h->h_access_stamp);
					strcpy(l_dl_single_prematch_struct_h->h_access_stamp,l_sys_dl_deal_struct_h->h_access_stamp);
					strcpy(l_dl_single_prematch_struct_h->h_checker,p_intlenv_data_struct_h->usr);
					strcpy(l_dl_single_prematch_struct_h->h_checker_dt,l_sys_dl_deal_struct_h->h_access_stamp);
                                        Alert("For updating record with AA status - in single prematch-end");
					/* Added by Hari for IB_6911 - end */                                      

                                        printf("Now Calling DL_ModSingle_Prematch function for Single Prematch\n");
                                        if((DL_ModSingle_Prematch(l_dl_single_prematch_struct_h,
                                                                        p_intlenv_data_struct_h,
                                                                        l_debug_info_ptr)
                                                        == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
                                        {
												l_int_error_flag = 1;
                                                CO_ProcMonitor(APL_OUT_FILE, "Returned from DL_ModSingle_Prematch called from Global Prematch with SUCCESS\n", NULL, p_intlenv_data_struct_h);
                                                //int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid, chr_l_return_value); Commented by Hari for IB_6964
                                        }
                                        else
                                        {
												l_int_error_flag = 0;
                                                CO_ProcMonitor(APL_OUT_FILE, "Returned from DL_ModSingle_Prematch called from Global Prematch with failure\n", NULL, p_intlenv_data_struct_h);
                                                int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
                                        }
									  // Hari}
                                /* JC - IB_PH3_53 - To add and update details in table dl_single_prematch [End] */

                                /* JC - IB_PH3_53 - To update the record with AA status in dl_single_prematch
                                since there is success from DL_Mod_DLPmt and MT_UpdDL_DPGEN_DET [Start] */
                                   Alert("Commented part For updating record with AA status - in single prematch- start"); 
                                   if((strcmp(p_intlenv_data_struct_h->usr, "GFU") == 0) || (strcmp(p_intlenv_data_struct_h->subprocess,"PMS") == 0)) // OR CONDITION ADDED FOR PMS -Priyanka subprocess = PMS will stand for WCUSTODY UPLOAD
                                { 
                                 /* Commented by Hari for IB_6911 - start */
                                        strcpy(p_intlenv_data_struct_h->usr, "SYSTEM");
                                        strcpy(p_intlenv_data_struct_h->h_mode, "AUT"); 
                                 /* Commented by Hari for IB_6911 - end */
                                }
                               /* Commented by Hari for IB_6911 - start */
                                   
                                printf("JC::: Mode is [%s]\n", p_intlenv_data_struct_h->h_mode);
                                printf("JC::: User is [%s]\n", p_intlenv_data_struct_h->usr);
						
                                printf("Calling DL_ModSingle_Prematch function for Single Prematch 2222222222\n");
                                if((DL_ModSingle_Prematch(l_dl_single_prematch_struct_h,
                                                                        p_intlenv_data_struct_h,
                                                                        l_debug_info_ptr)
                                                        == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
                                {
										l_int_error_flag = 1;
                                        CO_ProcMonitor(APL_OUT_FILE, "Returned from DL_ModSingle_Prematch called from Global Prematch with SUCCESS\n", NULL, p_intlenv_data_struct_h);
                                        // Following Is Corrected On 28072015 - Priyanka B.
//                                        //int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid, chr_l_return_value);
                                           l_int_error_flag = 1;
                                }
                                else
                                {
										l_int_error_flag = 0;
										CO_ProcMonitor(APL_OUT_FILE, "Returned from DL_ModSingle_Prematch called from Global Prematch with failure\n", NULL, p_intlenv_data_struct_h);
                                        int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
                                }
                                Alert("Commented part For updating record with AA status - in single prematch- end"); 
                                /* Commented by Hari for IB_6911 - end */
                                /* JC - IB_PH3_53 - To update the record with AA status in dl_single_prematch
                                since there is success from DL_Mod_DLPmt and MT_UpdDL_DPGEN_DET [End] */
								}

                                }
                                else
                                {
										l_int_error_flag = 0;
                                        int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
                                }

						}

         else if (g_mt_commonsys_params_struct_h.ei_smi_ind[0] == 'Y')
         {
			 l_int_error_flag = 0;
            if(CO_ScanErrCode(*l_debug_info_ptr,ERR_DEAL_NENUF_VDP) == APL_SUCCESS)
            {
               if(  DL_Mod_DLVDPFailCd( l_dl_deal_pmtdet_struct_hd,
                                       p_intlenv_data_struct_h,
                                       l_debug_info_ptr)  == APL_SUCCESS)
                {
                  CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Mod_DLVDPFailCd\n",NULL,p_intlenv_data_struct_h);

                                                EXEC SQL COMMIT;
                                                IS_ANY_ORA_ERROR;
                                                int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
                }
                else
               {
                  CO_ProcMonitor(APL_OUT_FILE,"Returned failure from DL_Mod_DLVDPFailCd\n",NULL,p_intlenv_data_struct_h);
                                                int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
               }
            }
            else
            {
               CO_ProcMonitor(APL_OUT_FILE,"Returned failure from DL_Mod_DLPmt for 1st deal\n",NULL,p_intlenv_data_struct_h);
                                        int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
            }
         }
         else
         {
			 l_int_error_flag = 0;
            CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Mod_DLPmt for 1st deal\n",NULL,p_intlenv_data_struct_h);
                                int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
		
	/* Added by Hari for IB_6724 for Skipping Prematch - end */

				//Calling Prematch Function
				
        /* Commented by Hari for IB_6724 for Skipping prematch - start */
               /*      CO_ProcMonitor(APL_OUT_FILE,"Now calling DL_ModSingle_Prematch\n",NULL,p_intlenv_data_struct_h);
				if((  DL_ModSingle_Prematch(l_dl_single_prematch_struct_h,
                     p_intlenv_data_struct_h,
                     l_debug_info_ptr)  == APL_SUCCESS)
							&& CHECK_EXISTANCE_OF_ERROR) 					
				{
					printf("Success from prematch of trade 1... Not comitting and going forward...\n");
					CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Mod_DLPmt\n",NULL,p_intlenv_data_struct_h);

					l_int_error_flag =1;
				}
				else
				{
					printf("Failure from prematch of trade 1... Calling Proc_MarkFailProcess\n");
					CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Mod_DLPmt\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);

					l_int_error_flag = 0;
				}
                 */
            /* Commented by Hari for IB_6724 for Skipping prematch - end */
				/** Prematch for First Deal Ends **/
                                   printf("\n PREMATCH PROCESSING FOR 1st DEAL ENDS");

				if (l_int_error_flag == 1)
				{
                                        Alert("second deal start"); 
					l_int_error_flag = 0;

					/** Second Deal Creation Starts **/
					printf("\n second trade started");
                                           //Need to cpy other deal code to structure aftr 1st trade creation success
		EXEC SQL SELECT DECODE(:l_sys_dl_deal_struct_h->h_dealcd,'1','2','2','1') INTO :l_sys_dl_deal_struct_h->h_dealcd FROM DUAL; 

					IS_ANY_ORA_ERROR

					printf("\n dl_location_cd2 |%s|",dl_location_cd);
					EXEC SQL SELECT CLN_DEPO_MAP_DP_ID,CLN_DEPO_MAP_CLIENT_ID INTO :h_cp_depo_id:i_cp_depo_dp_id,:h_cp_cln_id:i_cp_depo_cln_id FROM MT_CLI_DEPO_MAP WHERE CLN_CODE=:l_sys_dl_deal_struct_h->h_dl_client AND CLN_DEPO_CODE=:dl_location_cd;
					IS_ANY_ORA_ERROR

					strcpy(l_sys_dl_deal_struct_h->h_loccode,h_location_cd1);
					strcpy(l_sys_dl_deal_struct_h->h_domcp_custodyclt,l_sys_dl_deal_struct_h->h_domcpclt_cd); // Added by Hari for IB_6762
					strcpy(l_sys_dl_deal_struct_h->h_isspotdl,l_mt_core_sys_params_struct_h.proc_spot_dl_ind);
					
					strcpy(h_client_cd,l_sys_dl_deal_struct_h->h_dl_client); //Added by Asmeet to store value dl_client for isolve KB_12434
					strcpy(l_sys_dl_deal_struct_h->h_dl_client,APL_NULL_STRING);
					strcpy(l_sys_dl_deal_struct_h->h_dl_client,l_sys_dl_deal_struct_h->h_cln_depoacc);
					strncpy(l_dl_date,l_sys_dl_deal_struct_h->h_dlt,10);
				/* Added by Hari for IB_6724 for Skipping Prematch - start */
					strcpy(p_intlenv_data_struct_h->usr, "GFU");
					strcpy(p_intlenv_data_struct_h->h_mode,APL_FUNC_INPUT);
				/* Added by Hari for IB_6724 for Skipping Prematch - end */
                                        CO_ProcMonitor(APL_OUT_FILE,"Now calling DL_Proc_Trd for 2nd deal\n",NULL,p_intlenv_data_struct_h);
					Alert("Entering into DL_Proc_Trd 2 \n");
					if((DL_Proc_Trd(l_sys_dl_deal_struct_h,int_ptr_trdrepseqnum,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
					{
						printf("Second deal created successfully... Not comitting and going ahead...\n");
						CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_Trd with Success\n",NULL,p_intlenv_data_struct_h);

						l_int_error_flag = 1;
					}
					else
					{
						printf("JC::: Second deal RF failed... Calling Proc_MarkFailProcess\n");
						CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_Trd with Failure\n",NULL,p_intlenv_data_struct_h);
						int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);

						l_int_error_flag =0;
					}
					/** Second Deal Creation Ends **/

					/** Second Deal Prematch Starts **/
					if (l_int_error_flag == 1)
					{
				                Alert("Prematch for second deal start");	
                                         	l_int_error_flag = 0;

						/*Copy Values to Prematch Strucure*/
						
						/* Added by Hari for IB_6724 for Skipping Prematch - start*/
						strcpy(l_dl_single_prematch_struct_h->h_dl_client,l_sys_dl_deal_struct_h->h_dl_client);
						/* Added by Hari for IB_6724 for Skipping Prematch - end*/

						strcpy(l_dl_single_prematch_struct_h->h_identiy_no,l_sys_dl_deal_struct_h->h_indentity_no);
						strcpy(l_dl_single_prematch_struct_h->h_orig_identiy_no,l_sys_dl_deal_struct_h->h_indentity_no);
						strcpy(l_dl_single_prematch_struct_h->h_confdate,l_sys_dl_deal_struct_h->h_dlt);
						strcpy(l_dl_single_prematch_struct_h->h_exp_settl_date,l_sys_dl_deal_struct_h->h_dlt);
						strcpy(l_dl_single_prematch_struct_h->h_execution_date,l_sys_dl_deal_struct_h->h_dlt);
						strcpy(l_dl_single_prematch_struct_h->h_ispartial,"N");
						strcpy(l_dl_single_prematch_struct_h->h_defer_sec_sett_flg,"N");
						strcpy(l_dl_single_prematch_struct_h->h_defer_mon_sett_flg,"N");
						strcpy(l_dl_single_prematch_struct_h->h_access_stamp,l_sys_dl_deal_struct_h->h_access_stamp);
						strcpy(l_dl_single_prematch_struct_h->h_location_cd,l_sys_dl_deal_struct_h->h_loccode);
						strcpy(l_dl_single_prematch_struct_h->h_mkt_type,l_sys_dl_deal_struct_h->h_mkt_type);
						l_dl_single_prematch_struct_h->h_newquantity = l_sys_dl_deal_struct_h->h_qty;
						l_dl_single_prematch_struct_h->h_newamount = l_sys_dl_deal_struct_h->h_origamount;

				                 Alert("Loc code based inter dp flagg");
                      
                        if (strcmp (l_sys_dl_deal_struct_h->h_loccode,dl_location_cd) == 0)
						{
							strcpy(l_dl_single_prematch_struct_h->h_inter_dp_flag,"N");
						}
						else
						{
							strcpy(l_dl_single_prematch_struct_h->h_inter_dp_flag,"Y");
						}
 



				/*Added by Swapnil for isolve ISKB_12434 Starts*/	
				EXEC SQL 
					SELECT GETCLIENTPARAMBYID('DVP_RECPT_INSTR',:l_sys_dl_deal_struct_h->h_dl_client)
					INTO :chr_l_client_param
					FROM DUAL;
				IS_ANY_ORA_ERROR
				Alert("chr_l_client_param |%s|",chr_l_client_param);
				Alert("\n h_dp_instr_flag1 =|%s|",l_sys_dl_deal_struct_h->h_dealcd);
				Alert("\n h_dl_client =|%s|",l_sys_dl_deal_struct_h->h_dl_client);				
                 
				 /*Added by Asmeet for isolve KB_12434 Starts*/
				 if(strcmp(l_sys_dl_deal_struct_h->h_ex_arena,"1")==0)
				 { 
					 if(strcmp(hClnMaster,l_sys_dl_deal_struct_h->h_dl_client) == 0)
					 { 
		                if((strcmp(h_cmbp_id_client,APL_NULL_STRING)==0) || (strcmp(h_cp_depo_cd,"CDSL")==0) || (l_int_buy_flag == 1))
						     strcpy(l_dl_single_prematch_struct_h->h_dp_instr_flag,"N");
						else
						     strcpy(l_dl_single_prematch_struct_h->h_dp_instr_flag,"Y");
					 }
					else
					{
					 if((strcmp(l_sys_dl_deal_struct_h->h_dealcd,"2") == 0 ) && (strcmp(chr_l_client_param,"N")== 0))
						{
							strcpy(l_dl_single_prematch_struct_h->h_dp_instr_flag,"N");
							
						}
                        else
						{
							strcpy(l_dl_single_prematch_struct_h->h_dp_instr_flag,"Y");
							
						}												
					}
				 }		
					Alert("\n h_dp_instr_flag =|%s|",l_dl_single_prematch_struct_h->h_dp_instr_flag);
					/*Added by Swapnil for isolve KB_12434 Ends*/
                                          /*Added by Asmeet for isolve KB_12434 Ends*/
						/*if (strcmp(l_sys_dl_deal_struct_h -> h_dealcd,"1") == 0)
						{*/
							printf("\nJaved h_cp_dp_id after query2|%s|",h_cp_depo_id);
							printf("\nJaved h_cp_cln_id after quer2|%s|",h_cp_cln_id);

							strcpy(l_dl_single_prematch_struct_h->h_cp_dp_id,h_cp_depo_id);
							strcpy(l_dl_single_prematch_struct_h->h_cp_client_id,h_cp_cln_id);
							
							/*Condition added by Asmeet for KOTAK isolve 12434 to pass values to brok_dp_id and brok_cmbp_id instead of APL_NULL_STRING for on-mkt deals Starts*/
							if(strcmp(l_sys_dl_deal_struct_h->h_ex_arena,"1")==0)
							{
								strcpy(l_dl_single_prematch_struct_h->h_brok_dp_id,h_client_depo_map_id);
								strcpy(l_dl_single_prematch_struct_h->h_brok_cmbp_id,h_cmbp_id_client);
							}
							else
							{
								strcpy(l_dl_single_prematch_struct_h->h_brok_dp_id,APL_NULL_STRING);
								strcpy(l_dl_single_prematch_struct_h->h_brok_cmbp_id,APL_NULL_STRING);
							}
                            /*Condition added by Asmeet for KOTAK isolve 12434 to pass values to brok_dp_id and brok_cmbp_id instead of APL_NULL_STRING for on-mkt deals Ends*/

							
							
						
			/* Added by Hari for IB_6724 for Skipping Prematch - start */

                        strcpy(l_dl_deal_pmtdet_struct_hd->h_dl_client,l_dl_single_prematch_struct_h->h_dl_client);
                        strcpy(l_dl_deal_pmtdet_struct_hd->h_indentity_no,l_dl_single_prematch_struct_h->h_identiy_no);
                        strcpy(l_dl_deal_pmtdet_struct_hd->h_confdate,l_dl_single_prematch_struct_h->h_confdate);
                        strcpy(l_dl_deal_pmtdet_struct_hd->h_verfied_with,l_dl_single_prematch_struct_h->h_verified_with);
                        //strcpy(l_dl_deal_pmtdet_struct_hd->h_diffamount,l_dl_single_prematch_struct_h->h_diffamount);
                        l_dl_deal_pmtdet_struct_hd->h_diffamount = l_dl_single_prematch_struct_h->h_diffamount;
                        strcpy(l_dl_deal_pmtdet_struct_hd->h_info1,l_dl_single_prematch_struct_h->h_info1);
                        strcpy(l_dl_deal_pmtdet_struct_hd->h_ispart_,l_dl_single_prematch_struct_h->h_ispartial);
                        strcpy(l_dl_deal_pmtdet_struct_hd->h_brkrno,l_dl_single_prematch_struct_h->h_broker_ord_no);
                        //strcpy(l_dl_deal_pmtdet_struct_hd->h_newquantity,l_dl_single_prematch_struct_h->h_newquantity);
                        l_dl_deal_pmtdet_struct_hd->h_newquantity = l_dl_single_prematch_struct_h->h_newquantity;
                        l_dl_deal_pmtdet_struct_hd->h_newamount = l_dl_single_prematch_struct_h->h_newamount;
                        strcpy(l_dl_deal_pmtdet_struct_hd->h_newindentity_no,l_dl_single_prematch_struct_h->h_identiy_no);
                        strcpy(l_dl_deal_pmtdet_struct_hd->h_newlocindentity_no,l_dl_single_prematch_struct_h->h_identiy_no);
                        strcpy(l_dl_deal_pmtdet_struct_hd->h_access_stamp,l_dl_single_prematch_struct_h->h_access_stamp);
                        //strcpy(l_dl_deal_pmtdet_struct_hd->h_grossamount,l_dl_deal_struct_h->h_amt);
                        l_dl_deal_pmtdet_struct_hd->h_grossamount = 0; //PT did 0
                        //strcpy(l_dl_deal_pmtdet_struct_hd->h_cpamt,l_dl_single_prematch_struct_h->h_cpamt);
                        l_dl_deal_pmtdet_struct_hd->h_cpamt = l_dl_single_prematch_struct_h->h_cpamt;
                        strcpy(l_dl_deal_pmtdet_struct_hd->h_comm_indentity_no,l_sys_dl_deal_struct_h->h_comm_indentity_no);
                        strcpy(l_dl_deal_pmtdet_struct_hd->h_exp_setl_date,l_dl_single_prematch_struct_h->h_exp_settl_date);
                        strcpy(l_dl_deal_pmtdet_struct_hd->h_newlocindentity_no,l_dl_single_prematch_struct_h->h_location_cd);



                        strcpy(l_dl_dpgen_det_struct_h->h_dl_ref_no,l_dl_single_prematch_struct_h->h_identiy_no);
                        strcpy(l_dl_dpgen_det_struct_h->h_dl_client,l_dl_single_prematch_struct_h->h_dl_client);

                        strcpy(l_dl_dpgen_det_struct_h->h_broker_dpid,l_dl_single_prematch_struct_h->h_brok_dp_id);
                        strcpy(l_dl_dpgen_det_struct_h->h_broker_cmbpid,l_dl_single_prematch_struct_h->h_brok_cmbp_id);
                        strcpy(l_dl_dpgen_det_struct_h->h_cp_dpid,l_dl_single_prematch_struct_h->h_cp_dp_id);
                        strcpy(l_dl_dpgen_det_struct_h->h_cp_clnid,l_dl_single_prematch_struct_h->h_cp_client_id);

                        strcpy(l_dl_dpgen_det_struct_h->h_gendp_flg,l_dl_single_prematch_struct_h->h_dp_instr_flag);
                        strcpy(l_dl_dpgen_det_struct_h->h_maker,l_dl_single_prematch_struct_h->h_maker);

                        strcpy(l_dl_dpgen_det_struct_h->h_maker_dt,l_dl_single_prematch_struct_h->h_maker_dt);
                        strcpy(l_dl_dpgen_det_struct_h->h_access_stamp,l_dl_single_prematch_struct_h->h_access_stamp);
                        strcpy(l_dl_dpgen_det_struct_h->h_mkt_type,l_dl_single_prematch_struct_h->h_mkt_type);

                        //strcpy(l_dl_dpgen_det_struct_h->h_qty,l_dl_single_prematch_struct_h->h_newquantity);
                        l_dl_dpgen_det_struct_h->h_qty = l_dl_single_prematch_struct_h->h_newquantity;
                        strcpy(l_dl_dpgen_det_struct_h->h_exec_dt,l_dl_single_prematch_struct_h->h_execution_date);
                        //strcpy(l_dl_dpgen_det_struct_h->h_gendp_flg,l_dl_single_prematch_struct_h->h_inter_dp_flag);
                                       
                        /* Added by Hari for IB_6724 for Skipping Prematch - end */

						/*}
						else
						{
							strcpy(l_dl_single_prematch_struct_h->h_cp_dp_id,APL_NULL_STRING);
							strcpy(l_dl_single_prematch_struct_h->h_cp_client_id,APL_NULL_STRING);
							strcpy(l_dl_single_prematch_struct_h->h_brok_dp_id,h_cp_dp_id);
							strcpy(l_dl_single_prematch_struct_h->h_brok_cmbp_id,h_cp_cln_id);
						}*/
						strcpy(l_dl_single_prematch_struct_h->h_dl_client,l_sys_dl_deal_struct_h->h_cln_depoacc);
						/*Copying variables in prematch and dp_gen_det structure ends*/
		
                        /* Added by Hari for IB_6724 for Skipping Prematch - start */
				
                         CO_ProcMonitor(APL_OUT_FILE,"Now calling DL_Mod_DLPmt for 2nd deal\n",NULL,p_intlenv_data_struct_h);
                        /*Sheetal -Condition added to check for DU status*/
                        if(strcmp(p_intlenv_data_struct_h->h_mode, "AUT") == 0 && strcmp(l_dl_single_prematch_struct_h->h_status, "DU") == 0)
                                {
                                        if((DL_ModSingle_Prematch(l_dl_single_prematch_struct_h,
                                                                        p_intlenv_data_struct_h,
                                                                        l_debug_info_ptr)
                                                        == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
                                        {
                                                CO_ProcMonitor(APL_OUT_FILE, "Returned from DL_ModSingle_Prematch called from Global Prematch with SUCCESS\n", NULL, p_intlenv_data_struct_h);
                                                //int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid, chr_l_return_value); Commented by Hari for IB_6964
                                        }
                                        else
                                        {
                                                CO_ProcMonitor(APL_OUT_FILE, "Returned from DL_ModSingle_Prematch called from Global Prematch with failure\n", NULL, p_intlenv_data_struct_h);
                                                int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
                                        }

                                }
								
                        else if((  DL_Mod_DLPmt(l_dl_deal_pmtdet_struct_hd,
                                                                  p_intlenv_data_struct_h,
                                                                  l_debug_info_ptr)  == APL_SUCCESS) && CHECK_EXISTANCE_OF_ERROR )
								{
                                CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Mod_DLPmt\n",NULL,p_intlenv_data_struct_h);

                                if(MT_UpdDL_DPGEN_DET(l_dl_dpgen_det_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)
                                {
                                //    int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value); Commented by Hari for IB_6964
								 IF_COND_EXISTS("PREMATCH", "SINGLE_PREMATCH_AUTH")
								 {
                                /* JC - IB_PH3_53 - To add and update details in table dl_single_prematch [Start] */
								/* Hari	if(strcmp(p_intlenv_data_struct_h->usr, "GFU") == 0)
									  { Hari */
                                        /* To Add the record in dl_single_prematch with UU status */
                                        strcpy(p_intlenv_data_struct_h->h_mode, "INP");
                                        printf("JC::: Mode is [%s]\n", p_intlenv_data_struct_h->h_mode);

                                          /* Added by Hari for IB_6911 - start */

                                          strcpy(l_dl_single_prematch_struct_h->h_status,STATUS_AUTH);
                                          strcpy(l_dl_single_prematch_struct_h->h_maker,p_intlenv_data_struct_h->usr);
                                          strcpy(l_dl_single_prematch_struct_h->h_maker_dt,l_sys_dl_deal_struct_h->h_access_stamp);
                                          strcpy(l_dl_single_prematch_struct_h->h_access_stamp,l_sys_dl_deal_struct_h->h_access_stamp);
                                          strcpy(l_dl_single_prematch_struct_h->h_checker,p_intlenv_data_struct_h->usr);
                                          strcpy(l_dl_single_prematch_struct_h->h_checker_dt,l_sys_dl_deal_struct_h->h_access_stamp);

                                          /* Added by Hari for IB_6911 - end */

                                        printf("Calling DL_ModSingle_Prematch function for Single Prematch\n");
                                        if((DL_ModSingle_Prematch(l_dl_single_prematch_struct_h,
                                                                        p_intlenv_data_struct_h,
                                                                        l_debug_info_ptr)
                                                        == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
                                        {
												l_int_error_flag = 1;
                                                CO_ProcMonitor(APL_OUT_FILE, "Returned from DL_ModSingle_Prematch called from Global Prematch with SUCCESS\n", NULL, p_intlenv_data_struct_h);
                                                //int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid, chr_l_return_value); Commented by Hari for IB_6964
                                        }
                                        else
                                        {
												l_int_error_flag = 0;
                                                CO_ProcMonitor(APL_OUT_FILE, "Returned from DL_ModSingle_Prematch called from Global Prematch with failure\n", NULL, p_intlenv_data_struct_h);
                                                int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
                                        }
									  // Hari }
                                /* JC - IB_PH3_53 - To add and update details in table dl_single_prematch [End] */

                                /* JC - IB_PH3_53 - To update the record with AA status in dl_single_prematch
                                since there is success from DL_Mod_DLPmt and MT_UpdDL_DPGEN_DET [Start] */
                                 if(strcmp(p_intlenv_data_struct_h->usr, "GFU") == 0)
                                { 
                                /* Commented by Hari for IB_6911 - start */
                                        strcpy(p_intlenv_data_struct_h->usr, "SYSTEM");
                                        strcpy(p_intlenv_data_struct_h->h_mode, "AUT"); 
                                /* Commented by Hari for IB_6911 - end */
                                 } 
                                /* Commented by Hari for IB_6911 - start */
                                printf("JC::: Mode is [%s]\n", p_intlenv_data_struct_h->h_mode);
                                printf("JC::: User is [%s]\n", p_intlenv_data_struct_h->usr);
						
                                printf("Calling DL_ModSingle_Prematch function for Single Prematch\n");
                                if((DL_ModSingle_Prematch(l_dl_single_prematch_struct_h,
                                                                        p_intlenv_data_struct_h,
                                                                        l_debug_info_ptr)
                                                        == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
                                {
										l_int_error_flag = 1;
                                        CO_ProcMonitor(APL_OUT_FILE, "Returned from DL_ModSingle_Prematch called from Global Prematch with SUCCESS\n", NULL, p_intlenv_data_struct_h);
                                       // Following is corrected on 28072015 - Priyanka B.
                                       // int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid, chr_l_return_value);
                                       l_int_error_flag = 1;
                                }
                                else
                                {
										l_int_error_flag = 0;
										CO_ProcMonitor(APL_OUT_FILE, "Returned from DL_ModSingle_Prematch called from Global Prematch with failure\n", NULL, p_intlenv_data_struct_h);
                                        int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
                                } 
                                /* Commented by Hari for IB_6911 - end */
                                /* JC - IB_PH3_53 - To update the record with AA status in dl_single_prematch
                                since there is success from DL_Mod_DLPmt and MT_UpdDL_DPGEN_DET [End] */
								}

                                }
                                else
                                {
										l_int_error_flag = 0;
                                        int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
                                }

						}

         else if (g_mt_commonsys_params_struct_h.ei_smi_ind[0] == 'Y')
         {
			 l_int_error_flag = 0;
            if(CO_ScanErrCode(*l_debug_info_ptr,ERR_DEAL_NENUF_VDP) == APL_SUCCESS)
            {
               if(  DL_Mod_DLVDPFailCd( l_dl_deal_pmtdet_struct_hd,
                                       p_intlenv_data_struct_h,
                                       l_debug_info_ptr)  == APL_SUCCESS)
                {
                  CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Mod_DLVDPFailCd\n",NULL,p_intlenv_data_struct_h);

                                                EXEC SQL COMMIT;
                                                IS_ANY_ORA_ERROR;
                                                int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
                }
                else
               {
                  CO_ProcMonitor(APL_OUT_FILE,"Returned failure from DL_Mod_DLVDPFailCd\n",NULL,p_intlenv_data_struct_h);
                                                int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
               }
            }
            else
            {
               CO_ProcMonitor(APL_OUT_FILE,"Returned failure from DL_Mod_DLPmt for 2nd deal\n",NULL,p_intlenv_data_struct_h);
                                        int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
            }
         }
         else
         {
			 l_int_error_flag = 0;
            CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Mod_DLPmt for 2nd deal\n",NULL,p_intlenv_data_struct_h);
                                int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
		
         /* Added by Hari for IB_6724 for Skipping Prematch - end */

						//Calling Prematch Function
					
                                               /* Commented by Hari for IB_6724 for Skipping Prematch - start */
                                               /* CO_ProcMonitor(APL_OUT_FILE,"Now calling DL_ModSingle_Prematch for trade2\n",NULL,p_intlenv_data_struct_h);
						if((  DL_ModSingle_Prematch(l_dl_single_prematch_struct_h,
							             p_intlenv_data_struct_h,
					                     l_debug_info_ptr)  == APL_SUCCESS)
										&& CHECK_EXISTANCE_OF_ERROR) 					
						{
							printf("Success from prematch of trade 2...\n");
							l_int_error_flag= 1;
							CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Mod_DLPmt\n",NULL,p_intlenv_data_struct_h);
							
						}
						else
						{
							printf("Failure from prematch of trade 2... Calling Proc_MarkFailProcess\n");
							CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Mod_DLPmt\n",NULL,p_intlenv_data_struct_h);
							int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);

							l_int_error_flag = 0;
						} */
                                                /* Commented by Hari for IB_6724 for Skipping Prematch - end */
						/*Second Deal Prematch Ends*/

						if (l_int_error_flag == 1)
						{
							EXEC SQL UPDATE DL_DEAL SET CLN_DEPOACC = NULL WHERE IDENTIY_NO = :l_sys_dl_deal_struct_h->h_indentity_no;
							printf("\n ORA after update of CLN_DEPOACC in deal table - [%d] for deal ref [%s]\n", sqlca.sqlcode, l_sys_dl_deal_struct_h->h_indentity_no);
							IS_ANY_ORA_ERROR
		//Added for Web PMS Authorization:start
                     //This is added to check if deals are PMS Unauth deals and is authorized from custody: 08012016
                     printf("hvPmsAuthInd :[%d]",hvPmsAuthInd);  
                     printf("h_pms_sell_client :[%s]",h_pms_sell_client);  
                     if(hvPmsAuthInd == 1)
                     {
                        if((WI_CreateDL(l_sys_dl_deal_struct_h,h_pms_sell_client,
                                  p_intlenv_data_struct_h,
                                    l_debug_info_ptr)  == APL_SUCCESS)
                              && CHECK_EXISTANCE_OF_ERROR)
                        {
                           printf(" SUCCESS FROM WI_CreateDL() FOR AUTH...\n");
                           l_int_error_flag= 1;
                           CO_ProcMonitor(APL_OUT_FILE,"Returned from WI_CreateDL\n",NULL,p_intlenv_data_struct_h);
                        }
                        else
                        {
                           printf("Failure from WI_CreateDL... Calling Proc_MarkFailProcess\n");
                           CO_ProcMonitor(APL_OUT_FILE,"Returned from WI_CreateDL\n",NULL,p_intlenv_data_struct_h);
                           int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
                            l_int_error_flag = 0;
                        } 
                     }
                     printf("l_int_error_flag:[%d]",l_int_error_flag); 
                     if(l_int_error_flag == 1)
							int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
						//Added for Web PMS Authorization:end
						}
					}
				}
				
			   free(l_dl_single_prematch_struct_h);
			   free(l_dl_deal_pmtdet_struct_hd);
               free(l_dl_dpgen_det_struct_h);
			}			
		}			

			free(l_sys_dl_deal_struct_h);
			free(int_ptr_trdrepseqnum);

		}
		
/* Retro from ICICI- for  PMS Processing-  13042015- Ends-*/		
		//Added by Sharanya  for Web PMS Authorization:start
			else if (strcmp(chr_h_func_name,"wrp_DeleteWebPMSTrans") == 0)
		{
			INTL_WARNING;
			Alert("Entered into wrp_DeleteWebPMSTrans \n");
	
			WI_DEAL_PMS_STRUCT_H *l_wi_deal_pms_struct_h;
			WI_DEAL_PMS_STRUCT_I *l_wi_deal_pms_struct_i;

                        l_wi_deal_pms_struct_h =  (WI_DEAL_PMS_STRUCT_H *)calloc(1,sizeof(WI_DEAL_PMS_STRUCT_H));
			APL_MALLOC_FAIL(l_wi_deal_pms_struct_h);
			memset(l_wi_deal_pms_struct_h,NULL,sizeof(WI_DEAL_PMS_STRUCT_H));
			
                        l_wi_deal_pms_struct_i =  (WI_DEAL_PMS_STRUCT_I *)calloc(1,sizeof(WI_DEAL_PMS_STRUCT_I));
			APL_MALLOC_FAIL(l_wi_deal_pms_struct_i);
			memset(l_wi_deal_pms_struct_i,NULL,sizeof(WI_DEAL_PMS_STRUCT_I));

                        printf("\n Calling Populate_WEB_PMS_DEAL now...\n");
			int_ret_val = Populate_WEB_PMS_DEAL(l_wi_deal_pms_struct_h,chr_h_param_str);
		
			CO_ProcMonitor(APL_OUT_FILE,"Now calling PMS_Delete_Deal\n",NULL,p_intlenv_data_struct_h);
			printf(APL_OUT_FILE,"Now calling PMS_Delete_Deal\n",NULL,p_intlenv_data_struct_h);
			if((PMS_Delete_Deal(l_wi_deal_pms_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && CHECK_EXISTANCE_OF_ERROR)
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from PMS_Delete_Deal SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from PMS_Delete_Deal FAILURE \n",NULL,p_intlenv_data_struct_h);
			
                                int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
	                }
			free(l_wi_deal_pms_struct_h);
		}
		//Added by Sharanya  for Web PMS Authorization
		else if (strcmp(chr_h_func_name,"wrp_DLUpdBCNFn") == 0)
		{
		  printf("\n calling the wrp_DLUpdBCNFn ...\n");
			INTL_WARNING;
			Alert("Entered into wrp_DLUpdBCNFn \n");
			l_dl_bcn_struct_h =  (DL_BCN_STRUCT_H *)calloc(1,sizeof(DL_BCN_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_dl_bcn_struct_h);
			memset(l_dl_bcn_struct_h,NULL,sizeof(DL_BCN_STRUCT_H));
 printf("\n memory allocation wrp_DLUpdBCNFn ...\n");
			int_ret_val = Populate_DL_BCN(l_dl_bcn_struct_h,chr_h_param_str);
			 printf("\n entered the  Populate_DL_BCN...\n");
			/* if(!strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_INPUT))
			{
				int_ret_val = DL_BCN_Default_Val(chr_def_param_str,l_debug_info_ptr);
				int_ret_val = DL_Proc_DefBCN_Populate(l_dl_bcn_struct_h,chr_def_param_str);
			}*/

			/*Changes done by Vikash for T0 515  -start*/
			if((strcmp(l_dl_bcn_struct_h->h_entry,"T")==0) || (strcmp(l_dl_bcn_struct_h->h_entry,"S")==0))
			{
				Alert("For T0 in BCN");
				Alert("l_dl_bcn_struct_h -> h_dl_date: |%s|\n", l_dl_bcn_struct_h -> h_dl_date);
				Alert("l_dl_bcn_struct_h -> h_sett_dt: |%s|\n", l_dl_bcn_struct_h -> h_sett_dt);
					
				EXEC SQL SELECT count(*) INTO :tZeroBCNCount from MT_SETTL_CAL where EXCH_CODE = :l_dl_bcn_struct_h -> h_exch_cd and SETTL_NO = :l_dl_bcn_struct_h -> h_settlement_no and STATUS = 'AA';
				
				Alert("tZeroBCNCount: |%d|\n", tZeroBCNCount);
				Alert("For T0 DL_BCN EXCH_CODE: |%s|\n", l_dl_bcn_struct_h -> h_exch_cd);
				
				if(tZeroBCNCount > 0)
				{
					EXEC SQL SELECT settl_type INTO :settl_type from MT_SETTL_CAL where EXCH_CODE = :l_dl_bcn_struct_h -> h_exch_cd and SETTL_NO = :l_dl_bcn_struct_h -> h_settlement_no and STATUS = 'AA';
					
					Alert("settl_type: |%s|\n", settl_type);
					
					if(!strcmp(l_dl_bcn_struct_h -> h_exch_cd, "NSE") && (!strcmp(settl_type, "55")))
					{
						strcpy(l_dl_bcn_struct_h -> h_mkt_type, settl_type);
					}
					else if(!strcmp(l_dl_bcn_struct_h -> h_exch_cd, "BSE") && (!strcmp(settl_type, "45")))
					{
						strcpy(l_dl_bcn_struct_h -> h_mkt_type, settl_type);
					}
					
					else if(!strcmp(l_dl_bcn_struct_h -> h_dl_date, l_dl_bcn_struct_h -> h_sett_dt))
					{
						Alert("Inside if condition settl_date and dl_dt is equal condition for T0");
						if(!strcmp(l_dl_bcn_struct_h -> h_exch_cd, "NSE"))
						{
							strcpy(l_dl_bcn_struct_h -> h_mkt_type, "55");
						}
						else if(!strcmp(l_dl_bcn_struct_h -> h_exch_cd, "BSE"))
						{
							strcpy(l_dl_bcn_struct_h -> h_mkt_type, "45");
						}
					}
				}
				else
				{	
					if(!strcmp(l_dl_bcn_struct_h -> h_dl_date, l_dl_bcn_struct_h -> h_sett_dt))
					{
						Alert("Inside else condition settl_date and dl_dt is equal condition for T0");
						if(!strcmp(l_dl_bcn_struct_h -> h_exch_cd, "NSE"))
						{
							strcpy(l_dl_bcn_struct_h -> h_mkt_type, "55");
						}
						else if(!strcmp(l_dl_bcn_struct_h -> h_exch_cd, "BSE"))
						{
							strcpy(l_dl_bcn_struct_h -> h_mkt_type, "45");
						}
					}
				}

			Alert("l_dl_bcn_struct_h -> h_mkt_type: |%s|", l_dl_bcn_struct_h -> h_mkt_type);
			}
			/*Changes done by Vikash for T0 515  -end*/

			CO_ProcMonitor(APL_OUT_FILE,"Now calling DL_ModDL_BCNFn\n",NULL,p_intlenv_data_struct_h);
			if((DL_ModDL_BCN(l_dl_bcn_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && CHECK_EXISTANCE_OF_ERROR)
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_ModDL_BCNFn SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_ModDL_BCNFn FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess_BCN(l_dl_bcn_struct_h,p_intlenv_data_struct_h,h_ora_rowid,l_debug_info_ptr);
			}
			 printf("\n entered the  DL_ModDL_BCN...\n");
			free(l_dl_bcn_struct_h);
			 printf("\n after the free l_dl_bcn_struct_h ...\n");
		}
		else if (strcmp(chr_h_func_name,"wrp_DLRprBCNFn") == 0)
		{
			INTL_WARNING;
			Alert("Entered into wrp_DLRprBCNFn \n");
			l_dl_bcn_struct_h =  (DL_BCN_STRUCT_H *)calloc(1,sizeof(DL_BCN_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_dl_bcn_struct_h);
			memset(l_dl_bcn_struct_h,NULL,sizeof(DL_BCN_STRUCT_H));

			int_ret_val = Populate_DL_BCN(l_dl_bcn_struct_h,chr_h_param_str);
			CO_ProcMonitor(APL_OUT_FILE,"Calling Proc_MarkFailProcess_BCN FAILURE \n",NULL,p_intlenv_data_struct_h);
			strcpy(l_dl_bcn_struct_h->h_entry,APL_ENTRY_FLG_SYS);
			int_ret_val = Proc_MarkFailProcess_BCN(l_dl_bcn_struct_h,p_intlenv_data_struct_h,h_ora_rowid,l_debug_info_ptr);

			/* if(!strcmp(p_intlenv_data_struct_h->h_mode,APL_FUNC_INPUT))
			{
				int_ret_val = DL_BCN_Default_Val(chr_def_param_str,l_debug_info_ptr);
				int_ret_val = DL_Proc_DefBCN_Populate(l_dl_bcn_struct_h,chr_def_param_str);
			}*/
/*
			CO_ProcMonitor(APL_OUT_FILE,"Now calling DL_ModDL_BCNFn\n",NULL,p_intlenv_data_struct_h);
			if((DL_ModDL_BCN(l_dl_bcn_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS) && CHECK_EXISTANCE_OF_ERROR)
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_ModDL_BCNFn SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_ModDL_BCNFn FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess_BCN(l_dl_bcn_struct_h,p_intlenv_data_struct_h,h_ora_rowid,l_debug_info_ptr);
			}
*/
			free(l_dl_bcn_struct_h);
		}
		
		
		else if (strcmp(chr_h_func_name,"wrp_CDBUpdPmtDetFn") == 0)
		{
			
			INTL_WARNING;
			Alert("Entered into wrp_CDBUpdPmtDetFn \n");
		   l_dl_deal_pmtdet_struct_hd =  (DL_DEAL_PMTDET_STRUCT_H *)calloc(1,sizeof(DL_DEAL_PMTDET_STRUCT_H));
		   APL_MALLOC_FAIL_LOC_A(l_dl_deal_pmtdet_struct_hd);
		   memset(l_dl_deal_pmtdet_struct_hd,NULL,sizeof(DL_DEAL_PMTDET_STRUCT_H));

		   l_dl_dpgen_det_struct_h =  (DL_DPGEN_DET_STRUCT_H *)calloc(1,sizeof(DL_DPGEN_DET_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_dl_dpgen_det_struct_h);
			memset(l_dl_dpgen_det_struct_h,NULL,sizeof(DL_DPGEN_DET_STRUCT_H));
                        /* Gouse - For entry in single prematch [Start] */
			IF_COND_EXISTS("PREMATCH", "SINGLE_PREMATCH_AUTH")
			{
				l_dl_single_prematch_struct_h = (DL_SINGLE_PREMATCH_STRUCT_H *)calloc(1, sizeof(DL_SINGLE_PREMATCH_STRUCT_H));
				APL_MALLOC_FAIL_LOC_A(l_dl_single_prematch_struct_h);
				memset(l_dl_single_prematch_struct_h, NULL, sizeof(DL_SINGLE_PREMATCH_STRUCT_H));
				strcpy(chr_h_param_str_globalpm,chr_h_param_str);
				int_ret_val = Populate_DL_SINGLE_PREMATCH(l_dl_single_prematch_struct_h, chr_h_param_str_globalpm);
			}
			/* Gouse - For entry in single prematch [End] */

			strcpy(chr_h_param_str_dpgen,chr_h_param_str);


			int_ret_val = DL_Proc_PmtDetPopulate(l_dl_deal_pmtdet_struct_hd,chr_h_param_str);
			
			int_ret_val = Populate_DL_DPGEN_DET(l_dl_dpgen_det_struct_h,chr_h_param_str_dpgen);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling DL_Mod_DLPmt\n",NULL,p_intlenv_data_struct_h);
			/*Gouse -Condition added to check for DU status*/
			if(strcmp(p_intlenv_data_struct_h->h_mode, "AUT") == 0 && strcmp(l_dl_single_prematch_struct_h->h_status, "DU") == 0)
				{
					if((DL_ModSingle_Prematch(l_dl_single_prematch_struct_h, 
									p_intlenv_data_struct_h, 
									l_debug_info_ptr) 
							== APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
					{
						CO_ProcMonitor(APL_OUT_FILE, "Returned from DL_ModSingle_Prematch called from Global Prematch with SUCCESS\n", NULL, p_intlenv_data_struct_h);
						int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid, chr_l_return_value); 
					}
					else
					{
						CO_ProcMonitor(APL_OUT_FILE, "Returned from DL_ModSingle_Prematch called from Global Prematch with failure\n", NULL, p_intlenv_data_struct_h);
						int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
					}
					
				}

       else if((  DL_Mod_DLPmt(l_dl_deal_pmtdet_struct_hd,
                              p_intlenv_data_struct_h,
                              l_debug_info_ptr)  == APL_SUCCESS)
               && CHECK_EXISTANCE_OF_ERROR
            )
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Mod_DLPmt\n",NULL,p_intlenv_data_struct_h);

				if(MT_UpdDL_DPGEN_DET(l_dl_dpgen_det_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)
				{
                                    int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);

		        IF_COND_EXISTS("PREMATCH", "SINGLE_PREMATCH_AUTH")
			{
				/* Gouse - IB_PH3_53 - To add and update details in table dl_single_prematch [Start] */
				if(strcmp(p_intlenv_data_struct_h->usr, "GFU") == 0)
				{
					/* To Add the record in dl_single_prematch with UU status */	
					strcpy(p_intlenv_data_struct_h->h_mode, "INP");
					printf("Gouse::: Mode is [%s]\n", p_intlenv_data_struct_h->h_mode);

					printf("Calling DL_ModSingle_Prematch function for Single Prematch\n");
					if((DL_ModSingle_Prematch(l_dl_single_prematch_struct_h, 
									p_intlenv_data_struct_h, 
									l_debug_info_ptr) 
							== APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
					{
						CO_ProcMonitor(APL_OUT_FILE, "Returned from DL_ModSingle_Prematch called from Global Prematch with SUCCESS\n", NULL, p_intlenv_data_struct_h);
						int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid, chr_l_return_value); 
					}
					else
					{
						CO_ProcMonitor(APL_OUT_FILE, "Returned from DL_ModSingle_Prematch called from Global Prematch with failure\n", NULL, p_intlenv_data_struct_h);
						int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
					}
				}
				/* Gouse - IB_PH3_53 - To add and update details in table dl_single_prematch [End] */

				/* Gouse - IB_PH3_53 - To update the record with AA status in dl_single_prematch 
				since there is success from DL_Mod_DLPmt and MT_UpdDL_DPGEN_DET [Start] */
				if(strcmp(p_intlenv_data_struct_h->usr, "GFU") == 0)
				{
					strcpy(p_intlenv_data_struct_h->usr, "SYSTEM");
					strcpy(p_intlenv_data_struct_h->h_mode, "AUT");
				}
				printf("Gouse::: Mode is [%s]\n", p_intlenv_data_struct_h->h_mode);
				printf("Gouse::: User is [%s]\n", p_intlenv_data_struct_h->usr);

				printf("Calling DL_ModSingle_Prematch function for Single Prematch\n");
				if((DL_ModSingle_Prematch(l_dl_single_prematch_struct_h, 
									p_intlenv_data_struct_h, 
									l_debug_info_ptr) 
							== APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
				{
					CO_ProcMonitor(APL_OUT_FILE, "Returned from DL_ModSingle_Prematch called from Global Prematch with SUCCESS\n", NULL, p_intlenv_data_struct_h);
					int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid, chr_l_return_value); 
				}
				else
				{
					CO_ProcMonitor(APL_OUT_FILE, "Returned from DL_ModSingle_Prematch called from Global Prematch with failure\n", NULL, p_intlenv_data_struct_h);
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
				}
				/* Gouse - IB_PH3_53 - To update the record with AA status in dl_single_prematch 
				since there is success from DL_Mod_DLPmt and MT_UpdDL_DPGEN_DET [End] */
			}

				}
				else
				{
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
				}

         }
         else if (g_mt_commonsys_params_struct_h.ei_smi_ind[0] == 'Y')
         {
            if(CO_ScanErrCode(*l_debug_info_ptr,ERR_DEAL_NENUF_VDP) == APL_SUCCESS)
            {
               if(  DL_Mod_DLVDPFailCd( l_dl_deal_pmtdet_struct_hd,
                                       p_intlenv_data_struct_h,
                                       l_debug_info_ptr)  == APL_SUCCESS)
                {
                  CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Mod_DLVDPFailCd\n",NULL,p_intlenv_data_struct_h);
						
						EXEC SQL COMMIT;
						IS_ANY_ORA_ERROR;
						int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
                }
                else
               {
                  CO_ProcMonitor(APL_OUT_FILE,"Returned failure from DL_Mod_DLVDPFailCd\n",NULL,p_intlenv_data_struct_h);
						int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
               }
            }
            else
            {
               CO_ProcMonitor(APL_OUT_FILE,"Returned failure from DL_Mod_DLPmt\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
            }
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Mod_DLPmt\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
			free(l_dl_deal_pmtdet_struct_hd);
                        free(l_dl_single_prematch_struct_h);
                        free(l_dl_dpgen_det_struct_h);
		}

                /* Gouse - Single Prematch IB_PH3_53 [Start] */
		else if(strcmp(chr_h_func_name, "wrp_CDBUpdPmtDetFnAdd") == 0)
		{
	        //Added by Swapnil ISKB_2188  Start
			char  chr_l_classofdeal[3]=APL_NULL_STRING;
			short i_chr_l_classofdeal = 0;
			int   i_apl_indicator=0;
			char 	chr_h_param_str_l[4001] = APL_NULL_STRING;
		//Added by Swapnil ISKB_2188  End
		int int_l_err_flag = 0;
			
			printf("Gouse::: Wrapper is wrp_CDBUpdPmtDetFnAdd\n");

			INTL_WARNING;
			CO_Rtv_DataString(chr_h_param_str,"TRIGGER",l_trigger);
			l_dl_single_prematch_struct_h = (DL_SINGLE_PREMATCH_STRUCT_H *)calloc(1, sizeof(DL_SINGLE_PREMATCH_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_dl_single_prematch_struct_h);
			memset(l_dl_single_prematch_struct_h, NULL, sizeof(DL_SINGLE_PREMATCH_STRUCT_H));
            strcpy(chr_h_param_str_l,chr_h_param_str);
            strcpy(chr_h_param_str_pool,chr_h_param_str);
			printf("Calling Populate function for Single Prematch\n");
			int_ret_val = Populate_DL_SINGLE_PREMATCH(l_dl_single_prematch_struct_h, chr_h_param_str);

			CO_ProcMonitor(APL_OUT_FILE, "Now calling DL_ModSingle_Prematch\n", NULL, p_intlenv_data_struct_h);

			if(strcmp(p_intlenv_data_struct_h->h_mode, "ADD") == 0)
			{
				strcpy(p_intlenv_data_struct_h->h_mode, "INP");
				printf("JC::: Mode is [%s]\n", p_intlenv_data_struct_h->h_mode);
			}

			
	//Added by Swapnil for isolve ISKB_2188 start 
			
	EXEC SQL SELECT DL_CLASS
	INTO 	:chr_l_classofdeal:i_chr_l_classofdeal
	FROM DL_DEAL
	WHERE CLIENT=:l_dl_single_prematch_struct_h->h_dl_client 
	AND IDENTIY_NO=:l_dl_single_prematch_struct_h->h_identiy_no;
	
	IS_ANY_ORA_ERROR
	
	printf("sqlca.sqlcode==|%d|",sqlca.sqlcode);
	printf("chr_l_classofdeal==|%s|",chr_l_classofdeal);
	
	if(strcmp(chr_l_classofdeal,"19")==0)
	{
		if ( APL_FAILURE == CO_Chk_AccValid_CA(	l_dl_single_prematch_struct_h->h_dl_client, 
														'Y','C',NULL,NULL,'Y','N',
														'N','N',
														l_debug_info_ptr))
			{    
                CO_ProcMonitor(APL_OUT_FILE, "Returned from DL_ModSingle_Prematch with failure\n", NULL, p_intlenv_data_struct_h);
		int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
                i_apl_indicator=1;
									
			}
	}			
	
    if(i_apl_indicator==0)
	{
		if(!strcmp(l_trigger,"API")){
		
		/*Print and Reset debug infor pointer*/
		CO_PrnErr(*l_debug_info_ptr) ;
		//CO_FreeErrLst(l_debug_info_ptr);

		printf("l_sys_dl_deal_struct_h->h_indentity_no|%s| \n",l_dl_single_prematch_struct_h->h_identiy_no);
		printf("l_sys_dl_deal_struct_h->h_dl_client|%s| \n",l_dl_single_prematch_struct_h->h_dl_client);
		EXEC SQL SELECT DEAL_STAT INTO :deal_stat
		FROM DL_DEAL WHERE IDENTIY_NO=:l_dl_single_prematch_struct_h->h_identiy_no AND CLIENT=:l_dl_single_prematch_struct_h->h_dl_client;
		
		
		printf("deal_stat |%s|\n", deal_stat);
		
		printf("l_dl_single_prematch_struct_h->h_identiy_no|%s| \n",l_dl_single_prematch_struct_h->h_identiy_no);
		printf("l_dl_single_prematch_struct_h->h_dl_client|%s| \n",l_dl_single_prematch_struct_h->h_dl_client);
		EXEC SQL SELECT COUNT(IDENTIY_NO) INTO :int_l_count
		FROM DL_SINGLE_PREMATCH WHERE DL_CLIENT =:l_dl_single_prematch_struct_h->h_dl_client AND IDENTIY_NO =:l_dl_single_prematch_struct_h->h_identiy_no;
		
		printf("int_l_count |%d|\n", int_l_count);
		
		if(!int_l_count==0){
		
		printf("calling existing single prematch query");
		
		EXEC SQL SELECT ACCESS_STAMP ,STATUS INTO :l_dl_single_prematch_struct_h->h_access_stamp,:pre_stat
		FROM DL_SINGLE_PREMATCH WHERE DL_CLIENT =:l_dl_single_prematch_struct_h->h_dl_client AND IDENTIY_NO =:l_dl_single_prematch_struct_h->h_identiy_no;
	    printf("l_dl_single_prematch_struct_h->h_access_stamp |%s|\n",l_dl_single_prematch_struct_h->h_access_stamp);
		printf("pre_stat |%s|\n", pre_stat);
		}
			if(strcmp(deal_stat,"AA")==0 && int_l_count==0){
			printf("Calling DL_ModSingle_Prematch function for Single Prematch\n");
			if((DL_ModSingle_Prematch(l_dl_single_prematch_struct_h, p_intlenv_data_struct_h, l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
			{
				CO_ProcMonitor(APL_OUT_FILE, "Returned from DL_ModSingle_Prematch with SUCCESS\n", NULL, p_intlenv_data_struct_h);
					strcpy(pre_stat,"UU");
					//CO_ProcMonitor(APL_OUT_FILE,"before commit successup\n",NULL,NULL);
					//EXEC SQL COMMIT ;
					//CO_ProcMonitor(APL_OUT_FILE,"after commit successup\n",NULL,NULL);
					IS_ANY_ORA_ERROR;
					//int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid, chr_l_return_value); 
				}
				else
				{
					CO_ProcMonitor(APL_OUT_FILE, "Returned from DL_ModSingle_Prematch with failure\n", NULL, p_intlenv_data_struct_h);
					int_l_err_flag=1;
					//int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
				}
			}
					CO_PrnErr(*l_debug_info_ptr) ;
					//CO_FreeErrLst(l_debug_info_ptr);

			if(strcmp(pre_stat,"UU")==0 && (CHECK_EXISTANCE_OF_ERROR)){
				    printf("Calling DL_ModSingle_Prematch authorization\n");
					l_dl_deal_pmtdet_struct_hd =  (DL_DEAL_PMTDET_STRUCT_H *)calloc(1,sizeof(DL_DEAL_PMTDET_STRUCT_H));
					APL_MALLOC_FAIL_LOC_A(l_dl_deal_pmtdet_struct_hd);
					memset(l_dl_deal_pmtdet_struct_hd,NULL,sizeof(DL_DEAL_PMTDET_STRUCT_H));
					int_ret_val = DL_Proc_PmtDetPopulate(l_dl_deal_pmtdet_struct_hd,chr_h_param_str_l);
					printf("l_dl_deal_pmtdet_struct_hd ",l_dl_deal_pmtdet_struct_hd->h_confdate);

					strcpy(p_intlenv_data_struct_h->usr, "SYSTEM");
					stpcpy(p_intlenv_data_struct_h->h_mode,"AUT");
					if((  DL_Mod_DLPmt(l_dl_deal_pmtdet_struct_hd,
                              p_intlenv_data_struct_h,
                              l_debug_info_ptr)  == APL_SUCCESS)
                               && CHECK_EXISTANCE_OF_ERROR //Temporary commented
                    ){
					CO_ProcMonitor(APL_OUT_FILE, "CALLING AUTH PART\n", NULL, p_intlenv_data_struct_h);
					strcpy(p_intlenv_data_struct_h->usr, "SYSTEM");
					stpcpy(p_intlenv_data_struct_h->h_mode,"AUT");

					CO_PrnErr(*l_debug_info_ptr) ;
					//CO_FreeErrLst(l_debug_info_ptr);

					if((DL_ModSingle_Prematch(l_dl_single_prematch_struct_h, 
									p_intlenv_data_struct_h, 
									l_debug_info_ptr) 
							== APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR) //Temporary commented
						)
					{
						CO_ProcMonitor(APL_OUT_FILE, "Returned from DL_ModSingle_Prematch called from SINGLE Prematch with SUCCESS\n", NULL, p_intlenv_data_struct_h);
						strcpy(pre_stat,"AA");
						//CO_ProcMonitor(APL_OUT_FILE,"before commit successup\n",NULL,NULL);
						//EXEC SQL COMMIT ;
						//CO_ProcMonitor(APL_OUT_FILE,"after commit successup\n",NULL,NULL);
						IS_ANY_ORA_ERROR;
						
					}
					else
						{
						CO_ProcMonitor(APL_OUT_FILE, "Returned from DL_ModSingle_Prematch called from SINGLE Prematch with failure\n", NULL, p_intlenv_data_struct_h);
						int_l_err_flag=1;
						//int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
					}
					CO_PrnErr(*l_debug_info_ptr) ;
					//CO_FreeErrLst(l_debug_info_ptr);

				}else{
					CO_ProcMonitor(APL_OUT_FILE, "Returned from DL_Mod_DLPmt called from SINGLE Prematch with failure\n", NULL, p_intlenv_data_struct_h);
						int_l_err_flag=1;
						//int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
				}
				
				APL_FREE(l_dl_deal_pmtdet_struct_hd);
			}
			if(strcmp(pre_stat,"AA")==0 && (CHECK_EXISTANCE_OF_ERROR)){
				
							printf("\nCalling SST...\n");
							l_dl_dealsstdet_struct_h =  (DL_DEAL_SSTDET_STRUCT_H *)calloc(1,sizeof(DL_DEAL_SSTDET_STRUCT_H));
							APL_MALLOC_FAIL_LOC_A(l_dl_dealsstdet_struct_h);
							memset(l_dl_dealsstdet_struct_h,NULL,sizeof(DL_DEAL_SSTDET_STRUCT_H));
                            chr_l_eventid =  (char *)calloc(17,sizeof(char));
							APL_MALLOC_FAIL_LOC_A(chr_l_eventid);   
							memset(chr_l_eventid,NULL,sizeof(char));

							int_ret_val = DL_Proc_SetlDetPopulate(chr_l_eventid,l_dl_dealsstdet_struct_h,chr_h_param_str_pool);
							strcpy(p_intlenv_data_struct_h->usr, "SYSTEM");
					        stpcpy(p_intlenv_data_struct_h->h_mode,"SST");
					        stpcpy(p_intlenv_data_struct_h->auth_req,"Y");
							if((  DL_Proc_DLSetlSing(l_dl_dealsstdet_struct_h,
							chr_l_eventid,
							p_intlenv_data_struct_h,
							l_debug_info_ptr)  == APL_SUCCESS)
							 && CHECK_EXISTANCE_OF_ERROR //Temporary commented
							)
							{
								CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_DLSetlSing with Success\n",NULL,p_intlenv_data_struct_h);
						//int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value); 
							}
							else
							{
								CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_DLSetlSing with Failure\n",NULL,p_intlenv_data_struct_h);
						int_l_err_flag=1;
								//int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
							}
							APL_FREE(l_dl_dealsstdet_struct_h);
							CO_PrnErr(*l_debug_info_ptr) ;
							//CO_FreeErrLst(l_debug_info_ptr);
				    	
				    	}
			if(int_l_err_flag==0){
			int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid, chr_l_return_value);
			}else{
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
				int_l_err_flag==0;				
			}
			printf("End of api call for prematch and settlemnet \n");
					}
		else {
			printf("Calling DL_ModSingle_Prematch function for Single Prematch\n");
			if((DL_ModSingle_Prematch(l_dl_single_prematch_struct_h, p_intlenv_data_struct_h, l_debug_info_ptr) == APL_SUCCESS) && (CHECK_EXISTANCE_OF_ERROR))
			{
				CO_ProcMonitor(APL_OUT_FILE, "Returned from DL_ModSingle_Prematch with SUCCESS\n", NULL, p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid, chr_l_return_value); 
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE, "Returned from DL_ModSingle_Prematch with failure\n", NULL, p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
			}
	}
	}

//Added by Swapnil for isolve ISKB_2188 End 
			APL_FREE(l_dl_single_prematch_struct_h);
		}
		/* Gouse - Single Prematch IB_PH3_53 [End] */

		else if (strcmp(chr_h_func_name,"wrp_CBUpdTrdOthFn") == 0)
		{
			
			INTL_WARNING
			CO_Rtv_DataString(chr_h_param_str,"TRIGGER",l_trigger);
		   l_dl_deal_oth_struct_hc =  (DL_DEAL_OTH_STRUCT_H *)calloc(1,sizeof(DL_DEAL_OTH_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_dl_deal_oth_struct_hc);

		   memset(l_dl_deal_oth_struct_hc,NULL,sizeof(DL_DEAL_OTH_STRUCT_H));

			int_ret_val = DL_Proc_DLOthPopulate(l_dl_deal_oth_struct_hc,chr_h_param_str);

			/*Added by shrinath for ISKB_9306 deal not delete if present in tax tracker menu start */
			if (strcmp(p_intlenv_data_struct_h->h_mode,"DEL") == 0)
			{
				int int_Tx_Tracker_count=0;

				EXEC SQL SELECT COUNT(*) into int_Tx_Tracker_count FROM DL_TAX_TRACKER WHERE CLIENT=:l_dl_deal_oth_struct_hc->h_dl_client  AND REF_NO=:l_dl_deal_oth_struct_hc->h_indentity_no;
				Alert("int_Tx_Tracker_count :|%d|",int_Tx_Tracker_count);
				IS_ANY_ORA_ERROR

				if (int_Tx_Tracker_count > 0)
				{
					Alert("Record Exists in Tax Tracker Cannot Delete Deal");
					CO_InsertErr(   l_debug_info_ptr,
									ERR_DEAL_NOT_DELETE,
									l_dl_deal_oth_struct_hc->h_indentity_no,
									l_pty_2,
									l_pty_3,
									__LINE__,
									__FILE__);
				}	
				
			}
			/*Added by shrinath for ISKB_9306 deal not delete if present in tax tracker menu end */
			if(!strcmp(l_trigger,"API")){
				strcpy(p_intlenv_data_struct_h->usr,"SYSTEM");
				strcpy(l_dl_deal_oth_struct_hc->h_access_stamp,"DD/MM/YYYY");
			
			}
         if((  DL_Proc_TrdOth( l_dl_deal_oth_struct_hc, 
                              p_intlenv_data_struct_h,
                              l_debug_info_ptr)  == APL_SUCCESS)
               && CHECK_EXISTANCE_OF_ERROR
            )
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_TrdOth with Success\n",NULL,p_intlenv_data_struct_h);
					//added by usman for CSGL API call-Started
					if(!strcmp(l_trigger,"API")){
					printf("\n Calling Auth...\n");

					/*Print and Reset debug infor pointer*/
					CO_PrnErr(*l_debug_info_ptr) ;
					//CO_FreeErrLst(l_debug_info_ptr);

					strcpy(p_intlenv_data_struct_h->usr,"SYSTEM");
			        strcpy(p_intlenv_data_struct_h->h_mode,APL_FUNC_AUTHORISE);
					
					if((  DL_Proc_TrdOth( l_dl_deal_oth_struct_hc, 
                              p_intlenv_data_struct_h,
                              l_debug_info_ptr)  == APL_SUCCESS)
               && CHECK_EXISTANCE_OF_ERROR
				)	
				{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_TrdOth with Success for API call\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value); 
				}
				else
				{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_TrdOth with Failure for API call\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
				}
					}
					else {
			//added by usman for CSGL API call- end
					CO_PrnErr(*l_debug_info_ptr) ;
					int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value); 
			}
			}
			else
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_TrdOth with Failure\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
			}
			free(l_dl_deal_oth_struct_hc);
		}
		else if (strcmp(chr_h_func_name,"wrp_CDBUpdPMTChgFn") == 0)
		{
			
			INTL_WARNING
		   l_dl_deal_pmtchg_struct_h =  (DL_DEAL_PMTCHG_STRUCT_H *)calloc(1,sizeof(DL_DEAL_PMTCHG_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_dl_deal_pmtchg_struct_h);
		   memset(l_dl_deal_pmtchg_struct_h,NULL,sizeof(DL_DEAL_PMTCHG_STRUCT_H));

			int_ret_val = DL_Proc_DLPmtPopulate(l_dl_deal_pmtchg_struct_h,chr_h_param_str);
         if((  DL_Mod_DLPmtChng(l_dl_deal_pmtchg_struct_h,
                              p_intlenv_data_struct_h,
                              l_debug_info_ptr)  == APL_SUCCESS)
               && CHECK_EXISTANCE_OF_ERROR
            )
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Mod_DLPmtChng with Success\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value); 
			}
			else
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Mod_DLPmtChng with Failure\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
			}
			free(l_dl_deal_pmtchg_struct_h);
		}
		else if (strcmp(chr_h_func_name,"wrp_CDBUpdSSTDetFn") == 0)
		{
			
			INTL_WARNING
		   l_dl_dealsstdet_struct_h =  (DL_DEAL_SSTDET_STRUCT_H *)calloc(1,sizeof(DL_DEAL_SSTDET_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_dl_dealsstdet_struct_h);
		   memset(l_dl_dealsstdet_struct_h,NULL,sizeof(DL_DEAL_SSTDET_STRUCT_H));

		   chr_l_eventid =  (char *)calloc(17,sizeof(char));
		   APL_MALLOC_FAIL_LOC_A(chr_l_eventid);   
		   memset(chr_l_eventid,NULL,sizeof(char));

			int_ret_val = DL_Proc_SetlDetPopulate(chr_l_eventid,l_dl_dealsstdet_struct_h,chr_h_param_str);
 
        if((  DL_Proc_DLSetlSing(l_dl_dealsstdet_struct_h,
                              chr_l_eventid,
                              p_intlenv_data_struct_h,
                              l_debug_info_ptr)  == APL_SUCCESS)
               && CHECK_EXISTANCE_OF_ERROR
            )
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_DLSetlSing with Success\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value); 
			}
			else
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_DLSetlSing with Failure\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
			}
			free(l_dl_dealsstdet_struct_h);
			free(chr_l_eventid);
		}
		else if (strcmp(chr_h_func_name,"wrp_CBRstPmTFn") == 0)
		{
			
			INTL_WARNING

		   chr_l_client =  (char *)calloc(APL_CLIENT_LENGTH,sizeof(char));
		   APL_MALLOC_FAIL_LOC_A(chr_l_client);   
		   memset(chr_l_client,NULL,sizeof(char));

		   chr_l_refno =  (char *)calloc(APL_TXNREFNO_LEN,sizeof(char));
		   APL_MALLOC_FAIL_LOC_A(chr_l_refno);   
		   memset(chr_l_refno,NULL,sizeof(char));

		   chr_l_access_stamp =  (char *)calloc(APL_DATE_LEN,sizeof(char));
		   APL_MALLOC_FAIL_LOC_A(chr_l_access_stamp);   
		   memset(chr_l_access_stamp,NULL,sizeof(char));

			int_ret_val = DL_Proc_RstPmPopulate(chr_l_client,chr_l_refno,chr_l_access_stamp,chr_h_param_str);
         if((  CR_Proc_DLPmtRst(    chr_l_client,
                              chr_l_refno,
                              chr_l_access_stamp,
                              p_intlenv_data_struct_h,
                              l_debug_info_ptr)  == APL_SUCCESS)
               && CHECK_EXISTANCE_OF_ERROR
            ) 
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Proc_DLPmtRst with Success\n",NULL,p_intlenv_data_struct_h);
                                        /* Gouse - To delete record from DL_SINGLE_PREMATCH table [Start] */
			                IF_COND_EXISTS("PREMATCH", "SINGLE_PREMATCH_AUTH")
			                {
				                printf("\nGouse::: Client - [%s]\n", chr_l_client);
				                printf("Gouse::: Ref no - [%s]\n", chr_l_refno);

				               EXEC SQL DELETE FROM DL_SINGLE_PREMATCH 
					       WHERE DL_CLIENT = :chr_l_client
					       AND IDENTIY_NO = :chr_l_refno;

			                       printf("JC::: ORA for delete from DL_SINGLE_PREMATCH - [%d]\n", sqlca.sqlcode);
				               IS_ANY_ORA_ERROR
			                 }
			               /* Gouse - To delete record from DL_SINGLE_PREMATCH table [End] */
					int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value); 
			}
			else
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Proc_DLPmtRst with Failure\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
			}
			free(chr_l_client);
			free(chr_l_refno);
			free(chr_l_access_stamp);
		}
		else if (strcmp(chr_h_func_name,"wrp_CBRstSStFn") == 0)
		{
			
			INTL_WARNING

		   chr_l_client =  (char *)calloc(APL_CLIENT_LENGTH,sizeof(char));
		   APL_MALLOC_FAIL_LOC_A(chr_l_client);   
		   memset(chr_l_client,NULL,sizeof(char));

		   chr_l_refno =  (char *)calloc(APL_TXNREFNO_LEN,sizeof(char));
		   APL_MALLOC_FAIL_LOC_A(chr_l_refno);   
		   memset(chr_l_refno,NULL,sizeof(char));

		   chr_l_access_stamp =  (char *)calloc(APL_DATE_LEN,sizeof(char));
		   APL_MALLOC_FAIL_LOC_A(chr_l_access_stamp);   
		   memset(chr_l_access_stamp,NULL,sizeof(char));

		   chr_l_env_action =  (char *)calloc(APL_FLAG_LENGTH,sizeof(char));
		   APL_MALLOC_FAIL_LOC_A(chr_l_env_action);   
		   memset(chr_l_env_action,NULL,sizeof(char));

			int_ret_val = DL_Proc_RstSetlPopulate(chr_l_client,chr_l_refno,chr_l_access_stamp,chr_l_env_action,chr_h_param_str);
         if((  CR_Proc_DLSetlRst(    chr_l_client,
                              chr_l_refno,
                              chr_l_env_action,
                              chr_l_access_stamp,
                              p_intlenv_data_struct_h,
                              l_debug_info_ptr)  == APL_SUCCESS)
               && CHECK_EXISTANCE_OF_ERROR
            )
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Proc_DLSetlRst with Success\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value); 
			}
			else
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Proc_DLSetlRst with Failure\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
			}
			free(chr_l_client);
			free(chr_l_refno);
			free(chr_l_access_stamp);
			free(chr_l_env_action);
		}
		else if (strcmp(chr_h_func_name,"wrp_CBRstClhSFn") == 0)
		{
			
			INTL_WARNING

		   chr_l_client =  (char *)calloc(APL_CLIENT_LENGTH,sizeof(char));
		   APL_MALLOC_FAIL_LOC_A(chr_l_client);   
		   memset(chr_l_client,NULL,sizeof(char));

		   chr_l_refno =  (char *)calloc(APL_TXNREFNO_LEN,sizeof(char));
		   APL_MALLOC_FAIL_LOC_A(chr_l_refno);   
		   memset(chr_l_refno,NULL,sizeof(char));

			int_ret_val = DL_Proc_RstCLHPopulate(chr_l_client,chr_l_refno,chr_h_param_str);
         if((  CR_Proc_CLHRstSingle(   chr_l_client,
                              chr_l_refno,
                              p_intlenv_data_struct_h,
                              l_debug_info_ptr)  == APL_SUCCESS)
               && CHECK_EXISTANCE_OF_ERROR
            )
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Proc_CLHRstSingle with Success\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value); 
			}
			else
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Proc_CLHRstSingle with Failure\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
			}
			free(chr_l_client);
			free(chr_l_refno);
		}
		else if (strcmp(chr_h_func_name,"wrp_CDBUpdTrdFailFn") == 0)
		{
         
         INTL_WARNING
         l_dl_deal_fail_struct_hc =  (DL_DEAL_FAIL_STRUCT_H *)calloc(1,sizeof(DL_DEAL_FAIL_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_dl_deal_fail_struct_hc);

         memset(l_dl_deal_fail_struct_hc,NULL,sizeof(DL_DEAL_FAIL_STRUCT_H));

         int_ret_val = DL_Proc_DLFailPopulate(l_dl_deal_fail_struct_hc,chr_h_param_str);
         if((  DL_Mod_DLFailReas(  l_dl_deal_fail_struct_hc,
                        p_intlenv_data_struct_h,
                        l_debug_info_ptr)  == APL_SUCCESS)
               && CHECK_EXISTANCE_OF_ERROR
            )
         {
               CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Mod_DLFailReas with Success\n",NULL,p_intlenv_data_struct_h);
               int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
               CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Mod_DLFailReas with Failure\n",NULL,p_intlenv_data_struct_h);
               int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         free(l_dl_deal_fail_struct_hc);
		}
		else if (strcmp(chr_h_func_name,"wrp_CDBUpdMultStatFn") == 0)
		{
			
			INTL_WARNING
		   l_dl_deal_fail_struct_hc =  (DL_DEAL_FAIL_STRUCT_H *)calloc(1,sizeof(DL_DEAL_FAIL_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_dl_deal_fail_struct_hc);
			strcpy(chr_h_548_param_str,chr_h_param_str);

		   memset(l_dl_deal_fail_struct_hc,NULL,sizeof(DL_DEAL_FAIL_STRUCT_H));

			int_ret_val = DL_Proc_DLFailPopulate(l_dl_deal_fail_struct_hc,chr_h_param_str);
			if( DL_Proc_MultReasPopulate(chr_h_548_param_str, &int_h_snd_msg)==APL_SUCCESS)
			{

         	if((  DL_Mod_MultReas(  l_dl_deal_fail_struct_hc,
									 int_h_snd_msg,
									 p_intlenv_data_struct_h,
               	         l_debug_info_ptr)  == APL_SUCCESS)
               	&& CHECK_EXISTANCE_OF_ERROR
            	)
				{
						CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Mod_DLFailReas with Success\n",NULL,p_intlenv_data_struct_h);
						int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value); 
				}
				else
				{
						CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Mod_DLFailReas with Failure\n",NULL,p_intlenv_data_struct_h);
						int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
				}
			}
			else
			{
						CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_MultReasPopulate with Failure\n",NULL,p_intlenv_data_struct_h);
						int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
			}
				free(l_dl_deal_fail_struct_hc);
			
		}
		else if (strcmp(chr_h_func_name,"wrp_CDBUpdNdsFn") == 0)
		{
			
			INTL_WARNING
		   l_dl_deal_nds_struct_h =  (DL_DEAL_NDS_STRUCT_H *)calloc(1,sizeof(DL_DEAL_NDS_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_dl_deal_nds_struct_h);

		   memset(l_dl_deal_nds_struct_h,NULL,sizeof(DL_DEAL_NDS_STRUCT_H));

			int_ret_val = DL_Proc_DLNDSPopulate(l_dl_deal_nds_struct_h,chr_h_param_str);
         if((  DL_Mod_NDS(l_dl_deal_nds_struct_h,
                              p_intlenv_data_struct_h,
                              l_debug_info_ptr)  == APL_SUCCESS)
               && CHECK_EXISTANCE_OF_ERROR
            )
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Mod_NDS with Success\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value); 
			}
			else
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Mod_NDS with Failure\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
			}
			free(l_dl_deal_nds_struct_h);
		}
		else if (strcmp(chr_h_func_name,"wrp_CRUDBUpdPmtDetFn") == 0)
		{
			
			INTL_WARNING

		   l_dl_deal_pmtdet_struct_hd =  (DL_DEAL_PMTDET_STRUCT_H *)calloc(1,sizeof(DL_DEAL_PMTDET_STRUCT_H));
		   APL_MALLOC_FAIL_LOC_A(l_dl_deal_pmtdet_struct_hd);
		   memset(l_dl_deal_pmtdet_struct_hd,NULL,sizeof(DL_DEAL_PMTDET_STRUCT_H));

		   chr_l_stregno =  (char *)calloc(2000,sizeof(char));
		   APL_MALLOC_FAIL_LOC_A(chr_l_stregno);   
		   memset(chr_l_stregno,NULL,sizeof(char));

			int_ret_val = DL_Proc_RUPrmtDetPopulate(l_dl_deal_pmtdet_struct_hd,chr_l_stregno,chr_h_param_str);

         if((  CRUDBUpdPmtDetFn(l_dl_deal_pmtdet_struct_hd,
                              chr_l_stregno,
                              p_intlenv_data_struct_h,
                              l_debug_info_ptr)  == APL_SUCCESS)
               && CHECK_EXISTANCE_OF_ERROR
            )			
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CRUDBUpdPmtDetFn\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CRUDBUpdPmtDetFn\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
			free(l_dl_deal_pmtdet_struct_hd);
			free(chr_l_stregno);
		}
		else if (strcmp(chr_h_func_name,"wrp_CRUDBUpdSSTDetFn") == 0)
		{
			
			INTL_WARNING
		   l_dl_dealsstdet_struct_h =  (DL_DEAL_SSTDET_STRUCT_H *)calloc(1,sizeof(DL_DEAL_SSTDET_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_dl_dealsstdet_struct_h);
		   memset(l_dl_dealsstdet_struct_h,NULL,sizeof(DL_DEAL_SSTDET_STRUCT_H));

		   chr_l_eventid =  (char *)calloc(17,sizeof(char));
		   APL_MALLOC_FAIL_LOC_A(chr_l_eventid);   
		   memset(chr_l_eventid,NULL,sizeof(char));

		   chr_l_stregno =  (char *)calloc(2000,sizeof(char));
		   APL_MALLOC_FAIL_LOC_A(chr_l_stregno);   
		   memset(chr_l_stregno,NULL,sizeof(char));

			int_ret_val = DL_Proc_RUSetlDetPopulate(chr_l_eventid,chr_l_stregno,l_dl_dealsstdet_struct_h,chr_h_param_str);
         if((  DL_Proc_DLSetlRRMMSing(l_dl_dealsstdet_struct_h,
                              chr_l_eventid,
                              chr_l_stregno,
                              p_intlenv_data_struct_h,
                              l_debug_info_ptr)  == APL_SUCCESS)
               && CHECK_EXISTANCE_OF_ERROR
            ) 
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_DLSetlRRMMSing with Success\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value); 
			}
			else
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_DLSetlRRMMSing with Failure\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
			}
			free(l_dl_dealsstdet_struct_h);
			free(chr_l_eventid);
			free(chr_l_stregno);
		}
      else if (strcmp(chr_h_func_name,"wrp_CBInpInstrConvFn") == 0)
      {
          
         INTL_WARNING
         strcpy(chr_l_return_value,APL_NULL_STRING);
         l_dl_instrumentconv_oth_struct_h = (DL_INSTRUMENTCONV_OTH_STRUCT_H *)calloc(1, sizeof(DL_INSTRUMENTCONV_OTH_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_dl_instrumentconv_oth_struct_h);

          memset(l_dl_instrumentconv_oth_struct_h, NULL,sizeof(DL_INSTRUMENTCONV_OTH_STRUCT_H));
          int_ret_val = DL_Proc_InstrConvInpPopulate(l_dl_instrumentconv_oth_struct_h, chr_h_param_str);
         if((  CR_Mod_NewInstrConv( l_dl_instrumentconv_oth_struct_h,
                              p_intlenv_data_struct_h,
                              l_debug_info_ptr)  == APL_SUCCESS)
               && CHECK_EXISTANCE_OF_ERROR
            )
         {
               CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_NewInstrConv with Success\n",NULL,p_intlenv_data_struct_h);
               int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
               CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_NewInstrConv with Failure\n",NULL,p_intlenv_data_struct_h);
               int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         free(l_dl_instrumentconv_oth_struct_h);
      }
      else if (strcmp(chr_h_func_name,"wrp_CBInstrChgCdFn") == 0)
      {
          
         INTL_WARNING
         strcpy(chr_l_return_value,APL_NULL_STRING);
         l_dl_instrumentchg_struct2_h = (DL_INSTRUMENTCHG_STRUCT2_H *)calloc(1, sizeof(DL_INSTRUMENTCHG_STRUCT2_H));
         APL_MALLOC_FAIL_LOC_A(l_dl_instrumentchg_struct2_h);

          memset(l_dl_instrumentchg_struct2_h, NULL, sizeof(DL_INSTRUMENTCHG_STRUCT2_H));

         int_ret_val = DL_Proc_InstrChgPopulate(l_dl_instrumentchg_struct2_h , chr_h_param_str);
         if((  CR_Proc_InstrCdChg(  l_dl_instrumentchg_struct2_h,
                              p_intlenv_data_struct_h,
                              l_debug_info_ptr)  == APL_SUCCESS)
               && CHECK_EXISTANCE_OF_ERROR
            )
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Proc_InstrCdChg with Success\n",NULL,p_intlenv_data_struct_h);
               int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
               CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Proc_InstrCdChg with Failure\n",NULL,p_intlenv_data_struct_h);
               int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         free(l_dl_instrumentchg_struct2_h);
      }
      else if (strcmp(chr_h_func_name,"wrp_CBUpdLocChgFn")  == 0)
      {
          
          INTL_WARNING
          strcpy(chr_l_return_value,APL_NULL_STRING);
          l_dl_locnchg_struct_h = (DL_LOCNCHG_STRUCT_H *)calloc(1, sizeof(DL_LOCNCHG_STRUCT_H));
          APL_MALLOC_FAIL_LOC_A(l_dl_locnchg_struct_h);

          memset(l_dl_locnchg_struct_h, NULL, sizeof(DL_LOCNCHG_STRUCT_H));


          int_ret_val = DL_Proc_LocChgPopulate(chr_l_cseqno, l_dl_locnchg_struct_h,chr_h_param_str);
          if((    CR_Proc_LocChg(l_dl_locnchg_struct_h,
                                               chr_l_cseqno,
                                                p_intlenv_data_struct_h,
                                                l_debug_info_ptr)   == APL_SUCCESS)
                                        && CHECK_EXISTANCE_OF_ERROR
                                )
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Proc_LocChg with Success\n",NULL,p_intlenv_data_struct_h);
            strcpy(chr_l_return_value,APL_NULL_STRING);
            strcpy(chr_l_return_value,chr_l_cseqno);
               int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
               CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Proc_LocChg with Failure\n",NULL,p_intlenv_data_struct_h);
               int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         free(l_dl_locnchg_struct_h);
         /* free(chr_l_cseqno); PJ */
      }
      else if (strcmp(chr_h_func_name,"wrp_CBUpdMisFn")  == 0)
      {
          
          INTL_WARNING
          strcpy(chr_l_return_value,APL_NULL_STRING);
          l_dl_misdeal_struct_ha = (DL_MISDEAL_STRUCT_H *)calloc(1, sizeof(DL_MISDEAL_STRUCT_H));
          APL_MALLOC_FAIL_LOC_A(l_dl_misdeal_struct_ha);

          memset(l_dl_misdeal_struct_ha, NULL, sizeof(DL_MISDEAL_STRUCT_H));

          int_ret_val = DL_Proc_UpdMisPopulate(chr_l_mistxnrefno, l_dl_misdeal_struct_ha, chr_h_param_str);
          if((    DL_Mod_MisTxn( l_dl_misdeal_struct_ha,
                                             chr_l_mistxnrefno,
                                            p_intlenv_data_struct_h,
                                         l_debug_info_ptr)  == APL_SUCCESS)
                                        && CHECK_EXISTANCE_OF_ERROR
                                )
          {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Mod_MisTxn with Success\n",NULL,p_intlenv_data_struct_h);
            strcpy(chr_l_return_value,APL_NULL_STRING);
            strcpy(chr_l_return_value,chr_l_mistxnrefno);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
               CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Mod_MisTxn with Failure\n",NULL,p_intlenv_data_struct_h);
               int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         free(l_dl_misdeal_struct_ha);
         /* free(chr_l_mistxnrefno);  PJ */
      }
      else if (strcmp(chr_h_func_name,"wrp_CBUpdMktPrcFn")  == 0)
      {
          
          INTL_WARNING
          strcpy(chr_l_return_value,APL_NULL_STRING);
          l_mt_dlymktprc_struct_h = (MT_DLYMKTPRC_STRUCT_H *)calloc(1, sizeof(MT_DLYMKTPRC_STRUCT_H));
          APL_MALLOC_FAIL_LOC_A(l_mt_dlymktprc_struct_h);

           memset(l_mt_dlymktprc_struct_h, NULL, sizeof(MT_DLYMKTPRC_STRUCT_H));

           int_ret_val = DL_Proc_MktPrcPopulate(l_mt_dlymktprc_struct_h, chr_h_param_str);
           if((    CR_Proc_MrktPr( l_mt_dlymktprc_struct_h,
                                                  p_intlenv_data_struct_h,
                                            l_debug_info_ptr)       == APL_SUCCESS)
                                        && CHECK_EXISTANCE_OF_ERROR
                                )
           {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Proc_MrktPr with Success\n",NULL,p_intlenv_data_struct_h);
            strcpy(chr_l_return_value,APL_NULL_STRING);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
               CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Proc_MrktPr with Failure\n",NULL,p_intlenv_data_struct_h);
               int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         free(l_mt_dlymktprc_struct_h);
      }
		else if (strcmp(chr_h_func_name,"wrp_CDBUpdRegnFn") == 0)
		{
			
			INTL_WARNING
		   l_dl_regdetstruct_h =  (DL_REGDET_STRUCT_H *)calloc(1,sizeof(DL_REGDET_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_dl_regdetstruct_h);

		   memset(l_dl_regdetstruct_h,NULL,sizeof(DL_REGDET_STRUCT_H));

		   l_reqdetails_struct_ha =  (REQDETAILS_STRUCT_H *)calloc(1,sizeof(REQDETAILS_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_reqdetails_struct_ha);

		   memset(l_reqdetails_struct_ha,NULL,sizeof(REQDETAILS_STRUCT_H));

			int_ret_val = DL_Proc_RegDetPopulate(l_dl_regdetstruct_h,chr_h_param_str);
			int_ret_val = DL_Proc_RegArrPopulate(l_reqdetails_struct_ha,chr_h_param_str);

         if((  DL_Mod_DLRegStat(  l_dl_regdetstruct_h,
                              l_reqdetails_struct_ha,
                              p_intlenv_data_struct_h,
                              l_debug_info_ptr)  == APL_SUCCESS)
               && CHECK_EXISTANCE_OF_ERROR
            )
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Mod_DLRegStat with Success\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value); 
			}
			else
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Mod_DLRegStat with Failure\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
			}
			free(l_dl_regdetstruct_h);
			free(l_reqdetails_struct_ha);
		}
		else if (strcmp(chr_h_func_name,"wrp_CDBUpdRegnFn") == 0)
		{
			
			INTL_WARNING
		   l_reg_trf_struct_h =  (REG_TRF_STRUCT_H *)calloc(1,sizeof(REG_TRF_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_reg_trf_struct_h);

		   memset(l_reg_trf_struct_h,NULL,sizeof(REG_TRF_STRUCT_H));

			int_ret_val = DL_Proc_RegTrfDetPopulate(l_reg_trf_struct_h,chr_h_param_str);
         if((  CBDoRegnFn( l_reg_trf_struct_h,
                           p_intlenv_data_struct_h,
                           l_debug_info_ptr)  == APL_SUCCESS)
               && CHECK_EXISTANCE_OF_ERROR
            )
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from CBDoRegnFn with Success\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value); 
			}
			else
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from CBDoRegnFn with Failure\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
			}
			free(l_reg_trf_struct_h);
		}
		else if (strcmp(chr_h_func_name,"wrp_CDBRstRegnFn") == 0)
		{
			
			INTL_WARNING
		   l_dl_regdetstruct_h =  (DL_REGDET_STRUCT_H *)calloc(1,sizeof(DL_REGDET_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_dl_regdetstruct_h);

		   memset(l_dl_regdetstruct_h,NULL,sizeof(DL_REGDET_STRUCT_H));

			int_ret_val = DL_Proc_RstRegDetPopulate(l_dl_regdetstruct_h,chr_h_param_str);
         if((  DL_Proc_DLRegStat(  l_dl_regdetstruct_h,
                              p_intlenv_data_struct_h,
                              l_debug_info_ptr)  == APL_SUCCESS)
               && CHECK_EXISTANCE_OF_ERROR
            )
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_DLRegStat with Success\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value); 
			}
			else
			{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_DLRegStat with Failure\n",NULL,p_intlenv_data_struct_h);
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
			}
			free(l_dl_regdetstruct_h);
		}
	   else if (strcmp(chr_h_func_name,"wrp_CBUpdOrdFn") == 0)
      {
         
         INTL_WARNING
         l_or_orderdetails_struct_hb =  (OR_ORDERDETAILS_STRUCT_H *)calloc(1,sizeof(OR_ORDERDETAILS_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_or_orderdetails_struct_hb);
         memset(l_or_orderdetails_struct_hb,NULL,sizeof(OR_ORDERDETAILS_STRUCT_H));

         chr_l_ord_refno =  (char *)calloc(17,sizeof(char));
         APL_MALLOC_FAIL_LOC_A(chr_l_ord_refno);
         memset(chr_l_ord_refno,NULL,sizeof(char));

         int_ret_val = DL_Proc_OrdDetPopulate(l_or_orderdetails_struct_hb,chr_l_ord_refno,chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling CR_Mod_Ord\n",NULL,p_intlenv_data_struct_h);
         if((  CR_Mod_Ord(    l_or_orderdetails_struct_hb,
                              chr_l_ord_refno,
                              p_intlenv_data_struct_h,
                              l_debug_info_ptr)  == APL_SUCCESS)
               && CHECK_EXISTANCE_OF_ERROR
            )
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_Ord\n",NULL,p_intlenv_data_struct_h);
            strcpy(chr_l_return_value,chr_l_ord_refno);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_Ord\n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

         free(l_or_orderdetails_struct_hb);
         free(chr_l_ord_refno);
      }	
      else if (strcmp(chr_h_func_name,"wrp_CDBRstOrdExecFn") == 0)
      {
         
         INTL_WARNING

         chr_l_client =  (char *)calloc(11,sizeof(char));
         APL_MALLOC_FAIL_LOC_A(chr_l_client);
         memset(chr_l_client,NULL,sizeof(char));

         chr_l_refno =  (char *)calloc(17,sizeof(char));
         APL_MALLOC_FAIL_LOC_A(chr_l_refno);
         memset(chr_l_refno,NULL,sizeof(char));

         chr_l_access_stamp =  (char *)calloc(20,sizeof(char));
         APL_MALLOC_FAIL_LOC_A(chr_l_access_stamp);
         memset(chr_l_access_stamp,NULL,sizeof(char));

         chr_l_ord_access_stamp =  (char *)calloc(20,sizeof(char));
         APL_MALLOC_FAIL_LOC_A(chr_l_ord_access_stamp);
         memset(chr_l_ord_access_stamp,NULL,sizeof(char));

         int_ret_val = DL_Proc_ResOrdPopulate(chr_l_client,chr_l_refno,chr_l_access_stamp,chr_l_ord_access_stamp,chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling CR_Proc_OrdExecRst\n",NULL,p_intlenv_data_struct_h);
         if((  CR_Proc_OrdExecRst(  chr_l_client,
                                 chr_l_refno,
                                 chr_l_access_stamp,
                                 chr_l_ord_access_stamp,
                                 p_intlenv_data_struct_h,
                                 l_debug_info_ptr)  == APL_SUCCESS)
               && CHECK_EXISTANCE_OF_ERROR
            )
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Proc_OrdExecRst\n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Proc_OrdExecRst\n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

         free(chr_l_client);
         free(chr_l_refno);
         free(chr_l_access_stamp);
         free(chr_l_ord_access_stamp);
      }
      else if (strcmp(chr_h_func_name,"wrp_CBUpdOrdtFn") == 0)
      {
         
         INTL_WARNING

         l_deal_execdet_struct_h =  (DEAL_EXECDET_STRUCT_H *)calloc(1,sizeof(DEAL_EXECDET_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_deal_execdet_struct_h);
         memset(l_deal_execdet_struct_h,NULL,sizeof(DEAL_EXECDET_STRUCT_H));

         l_orderdetails_struct_h =  (ORDERDETAILS_STRUCT_H *)calloc(1,sizeof(ORDERDETAILS_STRUCT_H));
         APL_MALLOC_FAIL_LOC_A(l_orderdetails_struct_h);
         memset(l_orderdetails_struct_h,NULL,sizeof(ORDERDETAILS_STRUCT_H));

         int_ret_val = DL_Proc_OrdPopulate(l_deal_execdet_struct_h,chr_h_param_str);
         int_ret_val = DL_Proc_OrdArrPopulate(l_orderdetails_struct_h,chr_h_param_str);

         CO_ProcMonitor(APL_OUT_FILE,"Now calling CR_Mod_OrdExec\n",NULL,p_intlenv_data_struct_h);
         if((  CR_Mod_OrdExec(   l_deal_execdet_struct_h,
                              l_orderdetails_struct_h,
                              p_intlenv_data_struct_h,
                              l_debug_info_ptr)  == APL_SUCCESS)
               && CHECK_EXISTANCE_OF_ERROR
            )
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_OrdExec\n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from CR_Mod_OrdExec\n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

         free(l_orderdetails_struct_h);
         free(l_deal_execdet_struct_h);
      }
      else if (strcmp(chr_h_func_name,"wrp_SMI_AmdCanUpdStat") == 0)
      {
         
         INTL_WARNING

         chr_l_client =  (char *)calloc(11,sizeof(char));
         APL_MALLOC_FAIL_LOC_A(chr_l_client);
         memset(chr_l_client,NULL,sizeof(char));

         chr_l_refno =  (char *)calloc(17,sizeof(char));
         APL_MALLOC_FAIL_LOC_A(chr_l_refno);
         memset(chr_l_refno,NULL,sizeof(char));

         chr_l_acc_rej_flag =  (char *)calloc(APL_FLAG_LENGTH,sizeof(char));
         APL_MALLOC_FAIL_LOC_A(chr_l_acc_rej_flag);
         memset(chr_l_acc_rej_flag,NULL,sizeof(char));

         chr_l_amd_can_flag =  (char *)calloc(APL_FLAG_LENGTH,sizeof(char));
         APL_MALLOC_FAIL_LOC_A(chr_l_amd_can_flag);
         memset(chr_l_amd_can_flag,NULL,sizeof(char));

         int_ret_val = DL_Proc_SMIAmdCanUpdStatPopulate(chr_l_client,chr_l_refno,chr_l_acc_rej_flag,chr_l_amd_can_flag,chr_h_param_str);
         CO_ProcMonitor(APL_OUT_FILE,"Now calling EI_Chk_SMICanModStat\n",NULL,p_intlenv_data_struct_h);
         if(   (EI_Chk_SMICanModStat(chr_l_client,
                                 chr_l_refno,
                                 chr_l_acc_rej_flag,
                                 chr_l_amd_can_flag,
                                 p_intlenv_data_struct_h,
                                 l_debug_info_ptr)  == APL_SUCCESS) &&
                  CHECK_EXISTANCE_OF_ERROR )
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from EI_Chk_SMICanModStat\n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from EI_Chk_SMICanModStat\n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }

         free(chr_l_client);
         free(chr_l_refno);
         free(chr_l_acc_rej_flag);
         free(chr_l_amd_can_flag);
      }

		/************************************* New wrapper for DL_BIFDET - SUNDAR **********************************/

		else if (strcmp(chr_h_func_name,"wrp_HDFCDLBifDetFn") == 0)
		{

			INTL_WARNING
				l_dl_bifdet_struct_h =  (DL_BIFDET_STRUCT_H *)calloc(1,sizeof(DL_BIFDET_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_dl_bifdet_struct_h);
			memset(l_dl_bifdet_struct_h,NULL,sizeof(DL_BIFDET_STRUCT_H));

			int_ret_val = Populate_DL_BIFDET(l_dl_bifdet_struct_h,chr_h_param_str);
			/*
			 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_INPUT))
				    {

			exec sql select * from dl_bifdet where client=:l_dl_bifdet_struct_h->h_client and 
				                                    h_identiy_no=:l_dl_bifdet_struct_h->h_dl_ref_no;
					 }
         if(sqlca.sqlcode==1403)
			{
				      EXEC SQL INSERT INTO DL_BIFDET VALUES (:p_dl_bifdet_struct_h:l_dl_bifdet_struct_i);

			}
			else 
			{
				EXEC SQL UPDATE DL_BIFDET  SET
					DP_ID =:p_dl_bifdet_struct_h->h_dp_id :l_dl_bifdet_struct_i-> i_dp_id,
							QTY =:p_dl_bifdet_struct_h->h_qty :l_dl_bifdet_struct_i-> i_qty,
							ACCESS_STAMP =:p_dl_bifdet_struct_h->h_access_stamp :l_dl_bifdet_struct_i->i_access_stamp
								WHERE
								CLIENT =:p_dl_bifdet_struct_h->h_client AND
								IDENTIY_NO =:p_dl_bifdet_struct_h->h_identiy_no;

				IS_ANY_ORA_ERROR;
			}

			*/
			if((  DL_ModDL_BifDet(l_dl_bifdet_struct_h,
							p_intlenv_data_struct_h,
							l_debug_info_ptr)  == APL_SUCCESS)
					&& CHECK_EXISTANCE_OF_ERROR
			  )
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_ModDL_BifDet with Success\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_GridMarkSuccessProcss(h_ora_rowid,chr_l_return_value,l_dl_bifdet_struct_h->h_access_stamp); 
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_ModDL_BifDet with Failure\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
			}
			free(l_dl_bifdet_struct_h);
		}
		/************ADDED BY AMISH --TAKEOVER*****************************/
		else if (strcmp(chr_h_func_name,"wrp_DL_Proc_TKOVER") == 0)
		{
			  printf("\n entered in function wrp_DL_Proc_TKOVER \n");
        INTL_WARNING
           l_dl_takeover_struct_h =  (DL_TAKEOVER_STRUCT_H *)calloc(1,sizeof(DL_TAKEOVER_STRUCT_H));
        APL_MALLOC_FAIL_LOC_A(l_dl_takeover_struct_h);
        memset(l_dl_takeover_struct_h,NULL,sizeof(DL_TAKEOVER_STRUCT_H));
          l_dl_takeover_seq_struct_h = (DL_TAKEOVER_SEQ_STRUCT_H *)calloc(1,sizeof(DL_TAKEOVER_SEQ_STRUCT_H));
        APL_MALLOC_FAIL_LOC_A(l_dl_takeover_seq_struct_h);
        memset(l_dl_takeover_seq_struct_h,NULL,sizeof(DL_TAKEOVER_SEQ_STRUCT_H));
        strcpy(chr_h_param_str1,chr_h_param_str);
        int_ret_val = Populate_DL_TAKEOVER(l_dl_takeover_struct_h,chr_h_param_str);
        int_ret_val= Populate_DL_TAKEOVER_SEQ(l_dl_takeover_seq_struct_h,chr_h_param_str1);
        printf("env date %s\n",p_intlenv_data_struct_h->processtion);
        if((  MT_UpdDL_TAKEOVER(l_dl_takeover_struct_h,l_dl_takeover_seq_struct_h,
                    p_intlenv_data_struct_h,
                    l_debug_info_ptr)  == APL_SUCCESS)
              && CHECK_EXISTANCE_OF_ERROR
          )
        {
				 CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_TAKEOVER with Success\n",NULL,p_intlenv_data_struct_h);
           CO_ProcMonitor(APL_OUT_FILE, "Returned successfully",NULL,p_intlenv_data_struct_h);

				Alert("Mode : |%s| \n",p_intlenv_data_struct_h->h_mode);
				Alert("User : |%s| \n",p_intlenv_data_struct_h->usr);

				/* Upload file take over should be auto authorize - [Retrofit HDFC] */
				if(strcmp(p_intlenv_data_struct_h->h_process,"U")==0 && strcmp(p_intlenv_data_struct_h->h_mode,"INP")==0) 
				{
					
						  strcpy(p_intlenv_data_struct_h->h_mode,APL_FUNC_AUTHORISE);
						  stpcpy(p_intlenv_data_struct_h->usr,"SYSTEM");

						  if((  MT_UpdDL_TAKEOVER(l_dl_takeover_struct_h,l_dl_takeover_seq_struct_h,
																	 p_intlenv_data_struct_h,
																	 l_debug_info_ptr)  == APL_SUCCESS)
												&& CHECK_EXISTANCE_OF_ERROR
							 )
						  {								
									 CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_TAKEOVER  auto Auth with Success\n",NULL,p_intlenv_data_struct_h);
           int_ret_val = Batch_Proc_GridMarkSuccessProcss(h_ora_rowid,chr_l_return_value,l_dl_takeover_struct_h->h_accesstamp);
			 }

						  else

						  {
									 CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_TAKEOVER auto Auth with Failure\n",NULL,p_intlenv_data_struct_h);
									 printf("row id %s\n",h_ora_rowid);
									 int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);

						  }

				}
				else
				{
					 int_ret_val = Batch_Proc_GridMarkSuccessProcss(h_ora_rowid,chr_l_return_value,l_dl_takeover_struct_h->h_accesstamp);								
				}
						  /* Upload file take over should be auto authorize - [Retrofit HDFC] */
			}
        else
        {
           CO_ProcMonitor(APL_OUT_FILE,"Returned from MT_UpdDL_TAKEOVER with Failure\n",NULL,p_intlenv_data_struct_h);
           printf("row id %s\n",h_ora_rowid);
           int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
        }
        free(l_dl_takeover_struct_h);
        free(l_dl_takeover_seq_struct_h);
		}
		/*****************************************MARK SHORTAGE***************************************/
		else if (strcmp(chr_h_func_name,"wrp_DL_MarkShortage") == 0)
		{
			  INTL_WARNING
        l_dl_markshortage_struct_h = (DL_MARKSHORTAGE_STRUCT_H *)calloc(1,sizeof(DL_MARKSHORTAGE_STRUCT_H) );
        APL_MALLOC_FAIL_LOC_A(l_dl_markshortage_struct_h);
        memset(l_dl_markshortage_struct_h,NULL,sizeof(DL_MARKSHORTAGE_STRUCT_H));

        int_ret_val = Populate_DL_MARKSHORTAGE(l_dl_markshortage_struct_h,chr_h_param_str);

        if((DL_ProcMARKSHORTAGE(l_dl_markshortage_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr)== APL_SUCCESS)&& CHECK_EXISTANCE_OF_ERROR )
        {
			 CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_ProcMARKSHORTAGE with Success\n",NULL,p_intlenv_data_struct_h);
        int_ret_val = Batch_Proc_GridMarkSuccessProcss(h_ora_rowid,chr_l_return_value,l_dl_markshortage_struct_h->h_access_stamp);
        }
        else
        {
           CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_ProcMARKSHORTAGE with Failure\n",NULL,p_intlenv_data_struct_h);
           int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
        }
        free(l_dl_markshortage_struct_h);
     }
     /***************************ENDSSSSSSS*************************************/
		/* HDFCDL_015 DL_SQOFF Table Wrapper - Sundar */
		else if (strcmp(chr_h_func_name,"wrp_DLUpdSqOffFn") == 0)
		{
			
        INTL_WARNING
        l_dl_sqoff_struct_h =  (DL_SQOFF_STRUCT_H *)calloc(1,sizeof(DL_SQOFF_STRUCT_H));
        APL_MALLOC_FAIL_LOC_A(l_dl_sqoff_struct_h);

        memset(l_dl_sqoff_struct_h,NULL,sizeof(DL_SQOFF_STRUCT_H));

        int_ret_val = Populate_DL_SQOFF(l_dl_sqoff_struct_h,chr_h_param_str);

        if((  DL_ModSqOff(  l_dl_sqoff_struct_h,
                    p_intlenv_data_struct_h,
                    l_debug_info_ptr)  == APL_SUCCESS)
              && CHECK_EXISTANCE_OF_ERROR
          )
        {
           CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_ModSqOff with Success\n",NULL,p_intlenv_data_struct_h);
       	 int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value); 
        }
        else
        {
           CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_ModSqOff with Failure\n",NULL,p_intlenv_data_struct_h);
           int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
        }
        free(l_dl_sqoff_struct_h);
		}
		/************************************* New wrapper for DL_BIFDET - SUNDAR **********************************/
		else if (strcmp(chr_h_func_name,"wrp_HDFCExchOrdUpldFn") == 0)
		{
			INTL_WARNING;
			l_dl_exchgord_upld_struct_h= (DL_EXCHGORD_UPLD_STRUCT_H *)calloc(1,sizeof(DL_EXCHGORD_UPLD_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_dl_exchgord_upld_struct_h);

			memset(l_dl_exchgord_upld_struct_h,NULL,sizeof(DL_EXCHGORD_UPLD_STRUCT_H));

			int_ret_val = Populate_DL_EXCHGORD_UPLD(l_dl_exchgord_upld_struct_h,chr_h_param_str);

			if((DL_ModExchgOrd_Upld(l_dl_exchgord_upld_struct_h,p_order_no,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)&&(CHECK_EXISTANCE_OF_ERROR))
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_ModExchgOrd_Upld SUCCESS \n",NULL,p_intlenv_data_struct_h);    
				strcpy(chr_l_return_value,p_order_no);

				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_ModExchgOrd_Upld FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			free(l_dl_exchgord_upld_struct_h);
		}
		/************************************* New wrapper for DL_NSE_OBL - AMOL **********************************/
		else if (strcmp(chr_h_func_name,"wrp_NSEOBLFn") == 0)
		{
			INTL_WARNING;
			l_dl_nse_obl_struct_h= (DL_NSC_OBL_STRUCT_H *)calloc(1,sizeof(DL_NSC_OBL_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_dl_nse_obl_struct_h);

			memset(l_dl_nse_obl_struct_h,NULL,sizeof(DL_NSC_OBL_STRUCT_H));

			int_ret_val = Populate_DL_NSE_OBL(l_dl_nse_obl_struct_h,chr_h_param_str);

			if((DL_ModDBDL_NSE_OBL(l_dl_nse_obl_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)&&(CHECK_EXISTANCE_OF_ERROR))
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_ModExchgOrd_Upld SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_ModExchgOrd_Upld FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			free(l_dl_nse_obl_struct_h);
		}
		else if(strcmp(chr_h_func_name,"wrp_poolaccres") == 0)
		{
			INTL_WARNING;
			l_dl_poolaccrecs_struct_h= (DL_POOLACCRECS_STRUCT_H *)calloc(1,sizeof(DL_POOLACCRECS_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_dl_poolaccrecs_struct_h);

			memset(l_dl_poolaccrecs_struct_h,NULL,sizeof(DL_POOLACCRECS_STRUCT_H));

			int_ret_val = Populate_DL_POOLACCRECS(l_dl_poolaccrecs_struct_h,chr_h_param_str);

			if((DL_ModDBDL_POOLACCRECS(l_dl_poolaccrecs_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)&&(CHECK_EXISTANCE_OF_ERROR))
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_POOLACCRECS SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_POOLACCRECS FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			free(l_dl_poolaccrecs_struct_h);
		}
		/* HDFCDL_011 Pool Account Dump - Sundar *******************************************************/

		else if (strcmp(chr_h_func_name,"wrp_HDFCPoolAccDumpFn")  == 0)
		{
					
			INTL_WARNING
				strcpy(chr_l_return_value,APL_NULL_STRING);
			
			l_dl_poolaccdmp_struct_h = (DL_POOLACCDMP_STRUCT_H *)calloc(1, sizeof(DL_POOLACCDMP_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_dl_poolaccdmp_struct_h);
			
			l_poolacdet_struct_h = (POOLACDET_STRUCT_H *)calloc(1,sizeof(POOLACDET_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_poolacdet_struct_h);
			
			memset(l_dl_poolaccdmp_struct_h, NULL, sizeof(DL_POOLACCDMP_STRUCT_H));
			memset(l_poolacdet_struct_h, NULL, sizeof(POOLACDET_STRUCT_H));
			
			strcpy(chr_h_param_str_pool, chr_h_param_str);

			pool_ret_val= Populate_POOLACDET(l_poolacdet_struct_h,chr_h_param_str_pool);
			
			int_ret_val = Populate_DL_POOLACCDMP(l_dl_poolaccdmp_struct_h, chr_h_param_str);

			//printf("\n INSTR_ISIN = |%s| DEPO_CODE=|%s| EXCH_CODE=|%s| USER=|%s|\n",l_dl_poolaccdmp_struct_h->h_instr_isin,l_dl_poolaccdmp_struct_h->h_depo_code,l_dl_poolaccdmp_struct_h->h_exch_code,p_intlenv_data_struct_h->usr);

			/*	Comment for HDFC UAT Error Fix by Amish	09052007	*/	
			/*
			if(strcmp(l_dl_poolaccdmp_struct_h->h_depo_code,"CDSL")==0 && strcmp(l_dl_poolaccdmp_struct_h->h_exch_code,"BSE")==0 && strcmp(p_intlenv_data_struct_h->usr,"GFU")==0)
			{
				printf("\n BSE Original Settlement no=|%s|",l_dl_poolaccdmp_struct_h->h_settlemt_no);
				printf("\n BSE Original Mkt Type=|%s|",l_dl_poolaccdmp_struct_h->h_mkt_type);
				printf("\n BSE First Character is=|%c| \n",l_dl_poolaccdmp_struct_h->h_settlemt_no[0]);

				if(isalpha(l_dl_poolaccdmp_struct_h->h_settlemt_no[0]))
				{
					printf("\n Inside ISAPLHA \n");
					strncpy(chr_l_interdp_char,l_dl_poolaccdmp_struct_h->h_settlemt_no,2);

					if(strcmp(chr_l_interdp_char,"RM")==0)
					{		
						strcpy(l_dl_poolaccdmp_struct_h->h_mkt_type,"5");
					}
					else if(strcmp(chr_l_interdp_char,"AR")==0)
					{
						strcpy(l_dl_poolaccdmp_struct_h->h_mkt_type,"4");
					}
					if(strcmp(chr_l_interdp_char,"CO")==0)
					{		
						strcpy(l_dl_poolaccdmp_struct_h->h_mkt_type,"2");
					}		

					strcpy(chr_l_settl_temp,l_dl_poolaccdmp_struct_h->h_settlemt_no+2);
					strcpy(l_dl_poolaccdmp_struct_h->h_settlemt_no,chr_l_settl_temp);
					l_dl_poolaccdmp_struct_h->h_settlemt_no[strlen(l_dl_poolaccdmp_struct_h->h_settlemt_no)]=APL_NULL_CHAR;
					printf("\n BSE:Aplha:SettlementNo=|%s| \n",l_dl_poolaccdmp_struct_h->h_settlemt_no);
					printf("\n BSE:Aplha:MktType=|%s| \n",l_dl_poolaccdmp_struct_h->h_mkt_type);				
					
				}
				else if(isdigit(l_dl_poolaccdmp_struct_h->h_settlemt_no[0]))
				{
						printf("\n Inside ISNUMERIC \n");
						
			
						strncpy(chr_l_two_char,l_dl_poolaccdmp_struct_h->h_settlemt_no+4,2);
					
						printf("\n BSE:chr_l_two_char=|%s| \n",chr_l_two_char);
			
						if(strcmp(chr_l_two_char,"00")==0)
						{
							strcpy(l_dl_poolaccdmp_struct_h->h_mkt_type,"5");
						}
						else if(strcmp(chr_l_two_char,"01")==0)				
						{
							strcpy(l_dl_poolaccdmp_struct_h->h_mkt_type,"4");	
						}
						else if(strcmp(chr_l_two_char,"04")==0)
						{
							strcpy(l_dl_poolaccdmp_struct_h->h_mkt_type,"16");	
						}
						else if(strcmp(chr_l_two_char,"06")==0)
						{
							strcpy(l_dl_poolaccdmp_struct_h->h_mkt_type,"2");	
						}
						else if(strcmp(chr_l_two_char,"07")==0)
						{
							strcpy(l_dl_poolaccdmp_struct_h->h_mkt_type,"2");	
						}
						
						l_dl_poolaccdmp_struct_h->h_mkt_type[strlen(l_dl_poolaccdmp_struct_h->h_mkt_type)]=APL_NULL_CHAR;
						
						strcpy(chr_l_settl_temp,l_dl_poolaccdmp_struct_h->h_settlemt_no+6);
						strcpy(l_dl_poolaccdmp_struct_h->h_settlemt_no,chr_l_settl_temp);
						l_dl_poolaccdmp_struct_h->h_settlemt_no[strlen(l_dl_poolaccdmp_struct_h->h_settlemt_no)]=APL_NULL_CHAR;
						
						printf("\n BSE Settlement No=|%s|\n", l_dl_poolaccdmp_struct_h->h_settlemt_no);
						printf("\n BSE Mkt Type=|%s| \n",l_dl_poolaccdmp_struct_h->h_mkt_type);
		
				}
			}	
			if(strcmp(l_dl_poolaccdmp_struct_h->h_depo_code,"CDSL")==0 && strcmp(l_dl_poolaccdmp_struct_h->h_exch_code,"NSE")==0 && strcmp(p_intlenv_data_struct_h->usr,"GFU")==0)
			{

				printf("\n NSE Original Settlement no=|%s| \n",l_dl_poolaccdmp_struct_h->h_settlemt_no);
				printf("\n NSE Original Mkt Type=|%s| \n",l_dl_poolaccdmp_struct_h->h_mkt_type);

				strncpy(chr_l_first_char,l_dl_poolaccdmp_struct_h->h_settlemt_no,1);
				strncpy(chr_l_second_char,l_dl_poolaccdmp_struct_h->h_settlemt_no+1,1);
				strncpy(chr_l_two_char,l_dl_poolaccdmp_struct_h->h_settlemt_no,2);

				printf("\n **** First Character is=|%s| **** \n",chr_l_first_char);
				printf("\n **** Second Character is=|%c| **** \n",l_dl_poolaccdmp_struct_h->h_settlemt_no[1]);
				printf("\n **** Starting Two Characters are=|%s| **** \n",chr_l_two_char);

				if(isdigit(l_dl_poolaccdmp_struct_h->h_settlemt_no[1])) 
				{
					printf("\n INSIDE IF PART \n");	
		
					printf("\n Settlement_NO Length=|%d| \n",strlen(l_dl_poolaccdmp_struct_h->h_settlemt_no));		
					strncpy(chr_l_settl_temp,l_dl_poolaccdmp_struct_h->h_settlemt_no+1,strlen(l_dl_poolaccdmp_struct_h->h_settlemt_no)-2);
					strcpy(l_dl_poolaccdmp_struct_h->h_settlemt_no,chr_l_settl_temp);
					l_dl_poolaccdmp_struct_h->h_settlemt_no[strlen(l_dl_poolaccdmp_struct_h->h_settlemt_no)]=APL_NULL_CHAR;	
					printf("\n Here Settlement_No=|%s| \n",l_dl_poolaccdmp_struct_h->h_settlemt_no);
					
					if(strcmp(chr_l_first_char,"N")==0)
					{
						strcpy(l_dl_poolaccdmp_struct_h->h_mkt_type,"13");
					}
					if(strcmp(chr_l_first_char,"A")==0)
					{
						strcpy(l_dl_poolaccdmp_struct_h->h_mkt_type,"14");
					}
					if(strcmp(chr_l_first_char,"W")==0)
					{
						strcpy(l_dl_poolaccdmp_struct_h->h_mkt_type,"22");
					}
					if(strcmp(chr_l_first_char,"D")==0)
					{
						strcpy(l_dl_poolaccdmp_struct_h->h_mkt_type,"21");
					}
					if(strcmp(chr_l_first_char,"B")==0)
					{
						strcpy(l_dl_poolaccdmp_struct_h->h_mkt_type,"02");
					}
				}
				else
				{
					printf("\n Inside Else Part \n");


					if(strcmp(chr_l_two_char,"NR")==0)
					{
						strcpy(l_dl_poolaccdmp_struct_h->h_mkt_type,"13");
					}
					if(strcmp(chr_l_two_char,"NA")==0)
					{
						strcpy(l_dl_poolaccdmp_struct_h->h_mkt_type,"14");
					}
					if(strcmp(chr_l_two_char,"TT")==0)
					{
						strcpy(l_dl_poolaccdmp_struct_h->h_mkt_type,"22");
					}
					if(strcmp(chr_l_two_char,"CO")==0)
					{
						strcpy(l_dl_poolaccdmp_struct_h->h_mkt_type,"02");
					}

					strcpy(l_dl_poolaccdmp_struct_h->h_settlemt_no,l_dl_poolaccdmp_struct_h->h_settlemt_no+2);			

				}

				printf("\n NSE Settlement No=|%s|\n", l_dl_poolaccdmp_struct_h->h_settlemt_no);
				printf("\n NSE Mkt Type=|%s| \n",l_dl_poolaccdmp_struct_h->h_mkt_type);

			}
			*/
			/* Changes By AmitB 04/09/06 for only uploading records with BeneAcc=20 */
			
			printf("\n Amit:Benef.Acc=|%s| \n",l_dl_poolaccdmp_struct_h->h_benef_acctype);
			if(strcmp(l_dl_poolaccdmp_struct_h->h_depo_code,"NSDL")==0)
			{
			 /* if(strcmp(l_dl_poolaccdmp_struct_h->h_benef_acctype,"20")==0)
			  ** Static Value validation is modified to '40' from '20' as per the NSDL standards
			  ** Modified For ISKB_3298 Changes - Jul2010 - Naren V */

			 if(strcmp(l_dl_poolaccdmp_struct_h->h_benef_acctype,"40")==0)
			 {		
							
				if((    DL_ModDL_PoolAccDmp( l_dl_poolaccdmp_struct_h,l_poolacdet_struct_h,
							p_intlenv_data_struct_h,
							l_debug_info_ptr)       == APL_SUCCESS)
					&& CHECK_EXISTANCE_OF_ERROR)
				{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_ModDL_PoolAccDmp with Success\n",NULL,p_intlenv_data_struct_h);
					strcpy(chr_l_return_value,APL_NULL_STRING);
					int_ret_val = Batch_Proc_GridMarkSuccessProcss(h_ora_rowid,chr_l_return_value,l_dl_poolaccdmp_struct_h->h_access_stamp);
			//	int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
				}
				else
				{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_ModDL_PoolAccDmp with Failure\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
				}
			 }
			 else
			 {
				 /* CO_ProcMonitor(APL_OUT_FILE,"Skipping Record:Benf.Acc not Equal to 20)\n",NULL,NULL);
				  ** Static Value validation is modified to '40' from '20' as per the NSDL standards
				  ** Modified For ISKB_3298 Changes - Jul2010 - Naren V */

				 CO_ProcMonitor(APL_OUT_FILE,"Skipping Record:Benf.Acc not Equal to 40)\n",NULL,NULL);

			 	 strcpy(chr_l_return_value,"Skipping Record:Benf.Acc not Equal to 40");
				 int_ret_val = Batch_Proc_GridMarkSuccessProcss(h_ora_rowid,chr_l_return_value,l_dl_poolaccdmp_struct_h->h_access_stamp);
			 }
			}
	  		else // If not NSDL - Normal Processing
			{
				if((    DL_ModDL_PoolAccDmp( l_dl_poolaccdmp_struct_h,l_poolacdet_struct_h,
							p_intlenv_data_struct_h,
							l_debug_info_ptr)       == APL_SUCCESS)
					&& CHECK_EXISTANCE_OF_ERROR)
				{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_ModDL_PoolAccDmp with Success\n",NULL,p_intlenv_data_struct_h);
					strcpy(chr_l_return_value,APL_NULL_STRING);
					int_ret_val = Batch_Proc_GridMarkSuccessProcss(h_ora_rowid,chr_l_return_value,l_dl_poolaccdmp_struct_h->h_access_stamp);
			//	int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
				}
				else
				{
					CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_ModDL_PoolAccDmp with Failure\n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
				}
			}		
			free(l_dl_poolaccdmp_struct_h);
		}
		/* HDFCDL_011 Pool Account Dump - Sundar *******************************************************/
     /* HDFCDL_024 - Manik Trivedi */
      else if (strcmp(chr_h_func_name,"wrp_MTUpdIntrScheFn") == 0)
      {
         INTL_WARNING;
         l_dl_intr_sch_struct_h=(DL_INTR_SCH_STRUCT_H *)calloc(1,sizeof(DL_INTR_SCH_STRUCT_H));
		   chr_l_transfer_no=(char *)calloc(10,sizeof(char));
         APL_MALLOC_FAIL_LOC_A(l_dl_intr_sch_struct_h);

         memset(l_dl_intr_sch_struct_h,NULL,sizeof(DL_INTR_SCH_STRUCT_H));

		   int_ret_val = Populate_DL_INTR_SCH(l_dl_intr_sch_struct_h,chr_h_param_str);

		   if((DL_ModIntrSchm(l_dl_intr_sch_struct_h,chr_l_transfer_no,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)&&(CHECK_EXISTANCE_OF_ERROR))
		   {
		      CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_ModIntrSchm SUCCESS \n",NULL,p_intlenv_data_struct_h);
		      strcpy(chr_l_return_value,chr_l_transfer_no);

            int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
         }
         else
         {
            CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_ModIntrSchm FAILURE \n",NULL,p_intlenv_data_struct_h);
            int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         free(l_dl_intr_sch_struct_h);
      }
      else if (strcmp(chr_h_func_name,"wrp_MTUpdIntrScheDetFn") == 0)
      {
          INTL_WARNING;

          l_dl_intr_sch_det_struct_h = (DL_INTR_SCH_DET_STRUCT_H *)calloc(1,sizeof(DL_INTR_SCH_DET_STRUCT_H));
          chr_l_access_stamp=(char *)calloc(APL_DATE_LEN,sizeof(char));

          APL_MALLOC_FAIL_LOC_A(l_dl_intr_sch_det_struct_h);

          memset(l_dl_intr_sch_det_struct_h,NULL,sizeof(DL_INTR_SCH_DET_STRUCT_H));

          int_ret_val = Populate_DL_INTR_SCH_DET(l_dl_intr_sch_det_struct_h,chr_h_param_str);

          if((DL_ModIntrSchmDet(l_dl_intr_sch_det_struct_h,chr_l_access_stamp,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)&&(CHECK_EXISTANCE_OF_ERROR))
			{
          CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_ModIntrSchmDet SUCCESS \n",NULL,p_intlenv_data_struct_h);

          strcpy(chr_l_return_value,chr_l_access_stamp);

			 int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			 }
         else
         {
           CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_ModIntrSchmDet FAILURE \n",NULL,p_intlenv_data_struct_h);
           int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
         }
         free(l_dl_intr_sch_det_struct_h);
     }
		else if(strcmp(chr_h_func_name,"wrp_pool_acc_gfu") == 0)
		{
			INTL_WARNING;
			l_dl_poolaccdmp_struct_h= (DL_POOLACCDMP_STRUCT_H *)calloc(1,sizeof(DL_POOLACCDMP_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_dl_poolaccdmp_struct_h);

			memset(l_dl_poolaccdmp_struct_h,NULL,sizeof(DL_POOLACCDMP_STRUCT_H));

			int_ret_val = Populate_DL_POOLACCDMP(l_dl_poolaccdmp_struct_h,chr_h_param_str);

			if((DL_ModDBPool_Acc_GFU(l_dl_poolaccdmp_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)&&(CHECK_EXISTANCE_OF_ERROR))
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from POOL_ACC_GFU SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from POOL_ACC_GFU FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			free(l_dl_poolaccrecs_struct_h);
		}
		else if(strcmp(chr_h_func_name,"wrp_DLUpdDpIntFn") == 0)
		{
			INTL_WARNING;
			l_dl_upddpinst_struct_h= (DL_UPDDPINST_STRUCT_H *)calloc(1,sizeof(DL_UPDDPINST_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_dl_upddpinst_struct_h);
			
			memset(l_dl_upddpinst_struct_h,NULL,sizeof(DL_UPDDPINST_STRUCT_H));

			int_ret_val = DL_Proc_DPInstPopulate(l_dl_upddpinst_struct_h,chr_h_param_str);

			if((DL_Upd_DPInst(l_dl_upddpinst_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)&&(CHECK_EXISTANCE_OF_ERROR))
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_UpdDpInst SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);

			}
			free(l_dl_upddpinst_struct_h);
		}
		else if(strcmp(chr_h_func_name,"wrp_DLInstCODFn") == 0)
		{
			INTL_WARNING;
			l_dl_inst_cod_struct_h= (DL_INST_COD_STRUCT_H *)calloc(1,sizeof(DL_INST_COD_STRUCT_H));
		   APL_MALLOC_FAIL_LOC_A(l_dl_inst_cod_struct_h);	
			
			memset(l_dl_inst_cod_struct_h,NULL,sizeof(DL_INST_COD_STRUCT_H));

			int_ret_val = DL_Proc_CODPopulate(l_dl_inst_cod_struct_h,chr_h_param_str);

			if((DL_Inst_COD(l_dl_inst_cod_struct_h,argv,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)&&(CHECK_EXISTANCE_OF_ERROR))
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_InstCOD SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_InstCOD FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			free(l_dl_inst_cod_struct_h);
		}
		/* added by amish --09/05 */
		 else if (strcmp(chr_h_func_name,"wrp_ExchForcMatchFn") == 0)
	      {
		 INTL_WARNING;

		
	      /* l_chr_deal   = (char *)calloc(400,sizeof(char));
		 l_chr_order = (char *)calloc(400,sizeof(char)); */
		 l_chr_deal = (char *)calloc(10000,sizeof(char)); /* Above code commented and  Length incremented by pasha for ISKB_4294 on 14102010 */
		 l_chr_order= (char *)calloc(10000,sizeof(char)); /* Above code commented and  Length incremented by pasha for ISKB_4294 on 14102010 */

		 int_ret_val = Populate_FORCE_MATCHING(l_chr_deal,l_chr_order,chr_h_param_str);

		 if((DL_Force_Match(l_chr_deal,l_chr_order,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)&&(CHECK_EXISTANCE_OF_ERROR))
		 {
		    CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Force_Match SUCCESS \n",NULL,p_intlenv_data_struct_h);
		    int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
		 }
		 else
		 {
		    CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Force_Match FAILURE \n",NULL,p_intlenv_data_struct_h);
		    int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
		 }

		 /* Added for ISKB_4294 on 14102010 */
		 free(l_chr_deal);    
		 free(l_chr_order);
		 /* End Of ISKB_4294 Changes        */

	    }else if (strcmp(chr_h_func_name,"wrp_DLMarkDVPFn") == 0)
		{
				
			INTL_WARNING
		   l_sys_dl_deal_struct_h =  (SYS_DL_DEAL_STRUCT_H *)calloc(1,sizeof(SYS_DL_DEAL_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_sys_dl_deal_struct_h);
		   memset(l_sys_dl_deal_struct_h,NULL,sizeof(SYS_DL_DEAL_STRUCT_H));

		 int_ptr_trdrepseqnum =  (int *)calloc(1,sizeof(int));
		  // APL_MALLOC_FAIL_LOC_A(int_ptr_trdrepseqnum);   
		   memset(int_ptr_trdrepseqnum,NULL,sizeof(int));

			
			 /* l_dl_bifdet_struct_i = (DL_BIFDET_STRUCT_I *)calloc(1,sizeof(DL_BIFDET_STRUCT_I));
			APL_MALLOC_FAIL_LOC_A(l_dl_bifdet_struct_i); */

			printf("\n Calling DL_Proc_DLPopulate now...\n");
//			strcpy(chr_h_param_str_bif,chr_h_param_str);
			int_ret_val = DL_Proc_DLPopulate(int_ptr_trdrepseqnum,l_sys_dl_deal_struct_h,chr_h_param_str);


			printf("\n Calling DL_MarkDVP_Func now...\n");
//			strcpy(l_sys_dl_deal_struct_h->h_isspotdl,l_mt_core_sys_params_struct_h.proc_spot_dl_ind);
			/*strcpy(l_sys_dl_deal_struct_h->h_loccode,"");*//*to skip the mandatory chk put depo code*/
//			strcpy(l_sys_dl_deal_struct_h->h_domcp_custodyclt,l_sys_dl_deal_struct_h->h_domcpclt_cd);
//			printf("domcp is %s\n",l_sys_dl_deal_struct_h->h_domcp_custodyclt);	
			

			
			if((DL_MarkDVP_Func(l_sys_dl_deal_struct_h,int_ptr_trdrepseqnum,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)&&(CHECK_EXISTANCE_OF_ERROR))
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from Mark DVP funtion with SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from Mark DVP funtion with  FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			free(l_sys_dl_deal_struct_h);
			free(int_ptr_trdrepseqnum);
		}

		else if(strcmp(chr_h_func_name,"wrp_DLUpd_CDSLDpIntFn") == 0)
		{
			INTL_WARNING;
			l_dl_upddpinst_struct_h= (DL_UPDDPINST_STRUCT_H *)calloc(1,sizeof(DL_UPDDPINST_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_dl_upddpinst_struct_h);

			memset(l_dl_upddpinst_struct_h,NULL,sizeof(DL_UPDDPINST_STRUCT_H));

			int_ret_val = DL_Proc_CDSLDPInstPopulate(l_dl_upddpinst_struct_h,chr_h_param_str);

			if((DL_Upd_CDSLDPInst(l_dl_upddpinst_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)&&(CHECK_EXISTANCE_OF_ERROR))
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Upd_CDSLDPInst SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);

			}
			free(l_dl_upddpinst_struct_h);
		}
		else if(strcmp(chr_h_func_name,"wrp_DLInstCDSLCODFn") == 0)
		{
			INTL_WARNING;
			l_dl_inst_cod_struct_h= (DL_INST_COD_STRUCT_H *)calloc(1,sizeof(DL_INST_COD_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_dl_inst_cod_struct_h);

			memset(l_dl_inst_cod_struct_h,NULL,sizeof(DL_INST_COD_STRUCT_H));

			int_ret_val = DL_Proc_CDSLCODPopulate(l_dl_inst_cod_struct_h,chr_h_param_str);

			printf("\n After Retriving DATA \n");
			printf("\n l_dl_inst_cod_struct_h->h_dpm_transaction_no=|%d| \n",l_dl_inst_cod_struct_h->h_dpm_transaction_no);

			if((DL_Inst_COD_CDSL(l_dl_inst_cod_struct_h,argv,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)&&(CHECK_EXISTANCE_OF_ERROR))
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_InstCOD_CDSL SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_InstCOD_CDSL FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			free(l_dl_inst_cod_struct_h);
		}
		/************************************* New wrapper for DL_BSE_OBL - AMOL **********************************/
		else if (strcmp(chr_h_func_name,"wrp_BSEOBLFn") == 0)
		{
			INTL_WARNING;
			l_dl_bse_obl_struct_h= (DL_BSE_OBL_STRUCT_H *)calloc(1,sizeof(DL_BSE_OBL_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_dl_bse_obl_struct_h);

			memset(l_dl_bse_obl_struct_h,NULL,sizeof(DL_BSE_OBL_STRUCT_H));

			printf("\nBefore ProcPopulate");

			int_ret_val = Populate_DL_BSE_OBL(l_dl_bse_obl_struct_h,chr_h_param_str);

			printf("\nInside Daemon Deal ");
			if((DL_ModDBDL_BSE_OBL(l_dl_bse_obl_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)&&(CHECK_EXISTANCE_OF_ERROR))
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_BSE Obligation SUCCESS \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
			}
			else
			{
				CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_BSE_Obligation FAILURE \n",NULL,p_intlenv_data_struct_h);
				int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
			}
			free(l_dl_bse_obl_struct_h);
		}	
		 /************************************* New wrapper for DL_UPL_SOH - AMOL **********************************/
		 else if (strcmp(chr_h_func_name,"wrp_UPLSOHFn") == 0)
		 {
				 INTL_WARNING;
				 l_dl_upl_soh_struct_h= (DL_UPL_SOH_STRUCT_H *)calloc(1,sizeof(DL_UPL_SOH_STRUCT_H));
				 APL_MALLOC_FAIL_LOC_A(l_dl_upl_soh_struct_h);

				 memset(l_dl_upl_soh_struct_h,NULL,sizeof(DL_UPL_SOH_STRUCT_H));

				 printf("\nBefore ProcPopulate");

				 int_ret_val = Populate_DL_UPL_SOH(l_dl_upl_soh_struct_h,chr_h_param_str);

				 printf("\nInside Daemon Deal ");
				 if((DL_ModDB_UPL_SOH(l_dl_upl_soh_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)&&(CHECK_EXISTANCE_OF_ERROR))
				 {
						 CO_ProcMonitor(APL_OUT_FILE,"Returned from Deal Upload SOH SUCCESS \n",NULL,p_intlenv_data_struct_h);
						 int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
				 }
				 else
				 {
						 CO_ProcMonitor(APL_OUT_FILE,"Returned from Deal Upload SOH FAILURE \n",NULL,p_intlenv_data_struct_h);
						 int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
				 }
				 free(l_dl_upl_soh_struct_h);
		 }
		 /*Start- ISKB351 - Commented to revert CDSL Uplad changes - Rahul 24Sept2007*/
		 /************************************* New wrapper for DL_UPL_CDSL_A - AMOL **********************************/
		/* else if (strcmp(chr_h_func_name,"wrp_UPL_CDSL_AFn") == 0)
		 {
				 INTL_WARNING;
				 l_cdsl_upl_a_struct_h= (CDSL_UPL_A_STRUCT_H *)calloc(1,sizeof(CDSL_UPL_A_STRUCT_H));
				 APL_MALLOC_FAIL_LOC_A(l_cdsl_upl_a_struct_h);

				 memset(l_cdsl_upl_a_struct_h,NULL,sizeof(CDSL_UPL_A_STRUCT_H));

				 printf("\nBefore ProcPopulate");

				 int_ret_val = Populate_DL_CDSL_UPL_A(l_cdsl_upl_a_struct_h,chr_h_param_str);

				 printf("\nInside Daemon Deal ");
				 if((DL_ModDB_CDSL_UPL_A(l_cdsl_upl_a_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)&&(CHECK_EXISTANCE_OF_ERROR))
				 {
						 CO_ProcMonitor(APL_OUT_FILE,"Returned from Deal Upload SOH CDSL A SUCCESS \n",NULL,p_intlenv_data_struct_h);
						 int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
				 }
				 else
				 {
						 CO_ProcMonitor(APL_OUT_FILE,"Returned from Deal Upload SOH CDSL A FAILURE \n",NULL,p_intlenv_data_struct_h);
						 int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
				 }
				 free(l_cdsl_upl_a_struct_h);
		 }		*/ 
		 /************************************* New wrapper for DL_UPL_CDSL_B - AMOL **********************************/
		/*else if (strcmp(chr_h_func_name,"wrp_UPL_CDSL_BFn") == 0)
		 {
				 INTL_WARNING;
				 l_cdsl_upl_b_struct_h= (CDSL_UPL_B_STRUCT_H *)calloc(1,sizeof(CDSL_UPL_B_STRUCT_H));
				 APL_MALLOC_FAIL_LOC_A(l_cdsl_upl_b_struct_h);

				 memset(l_cdsl_upl_b_struct_h,NULL,sizeof(CDSL_UPL_B_STRUCT_H));

				 printf("\nBefore ProcPopulate");

				 int_ret_val = Populate_DL_CDSL_UPL_B(l_cdsl_upl_b_struct_h,chr_h_param_str);

				 printf("\nInside Daemon Deal ");
				 if((DL_ModDB_CDSL_UPL_B(l_cdsl_upl_b_struct_h,p_intlenv_data_struct_h,l_debug_info_ptr) == APL_SUCCESS)&&(CHECK_EXISTANCE_OF_ERROR))
				 {
						 CO_ProcMonitor(APL_OUT_FILE,"Returned from Deal Upload SOH CDSL B SUCCESS \n",NULL,p_intlenv_data_struct_h);
						 int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
				 }
				 else
				 {
						 CO_ProcMonitor(APL_OUT_FILE,"Returned from Deal Upload SOH CDSL B FAILURE \n",NULL,p_intlenv_data_struct_h);
						 int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
				 }
				 free(l_cdsl_upl_b_struct_h);
		 }	*/	 
		 /*Amol -121206 - Fail reason Update - BCN*/
 		 /* End - ISKB351 - Commented to revert CDSL Uplad changes - Rahul 24Sept2007*/
 		else if (strcmp(chr_h_func_name,"wrp_CDBUpdMultStatFn_BCN") == 0)
		{
			
			INTL_WARNING
		   l_dl_deal_fail_struct_hc =  (DL_DEAL_FAIL_STRUCT_H *)calloc(1,sizeof(DL_DEAL_FAIL_STRUCT_H));
			APL_MALLOC_FAIL_LOC_A(l_dl_deal_fail_struct_hc);
			strcpy(chr_h_548_param_str,chr_h_param_str);

		   memset(l_dl_deal_fail_struct_hc,NULL,sizeof(DL_DEAL_FAIL_STRUCT_H));

			int_ret_val = DL_Proc_DLFailPopulate(l_dl_deal_fail_struct_hc,chr_h_param_str);
			if( DL_Proc_MultReasPopulate(chr_h_548_param_str, &int_h_snd_msg)==APL_SUCCESS)
			{

         	if((  DL_Mod_MultReas_BCN(  l_dl_deal_fail_struct_hc,
									 int_h_snd_msg,
									 p_intlenv_data_struct_h,
               	         l_debug_info_ptr)  == APL_SUCCESS)
               	&& CHECK_EXISTANCE_OF_ERROR
            	)
				{
						CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Mod_DLFailReas with Success\n",NULL,p_intlenv_data_struct_h);
						int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value); 
				}
				else
				{
						CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Mod_DLFailReas with Failure\n",NULL,p_intlenv_data_struct_h);
						int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
				}
			}
			else
			{
						CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_Proc_MultReasPopulate with Failure\n",NULL,p_intlenv_data_struct_h);
						int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr); 
			}
				free(l_dl_deal_fail_struct_hc);
			
		}

		/***** JC - ISKB 487 -- Start *****/
		else if (strcmp(chr_h_func_name,"wrp_DL_DecimalChng") == 0)
		 {
				 INTL_WARNING;
				 l_dl_deal_deci_adj_struct_h = (DL_DEAL_DECI_ADJ_STRUCT_H *)calloc(1,sizeof(DL_DEAL_DECI_ADJ_STRUCT_H));
				 APL_MALLOC_FAIL_LOC_A(l_dl_deal_deci_adj_struct_h);

				 memset(l_dl_deal_deci_adj_struct_h,NULL,sizeof(DL_DEAL_DECI_ADJ_STRUCT_H));
				 
				 int_ret_val = DL_Proc_DecimalAdjPopulate(l_dl_deal_deci_adj_struct_h, chr_h_param_str);

				 if((DL_ModDecimalAdj(l_dl_deal_deci_adj_struct_h, p_intlenv_data_struct_h, l_debug_info_ptr) == APL_SUCCESS)&&(CHECK_EXISTANCE_OF_ERROR))
				 {
						 CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_ModDecimalAdj SUCCESS \n",NULL,p_intlenv_data_struct_h);
						 int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
				 }
				 else
				 {
						 CO_ProcMonitor(APL_OUT_FILE,"Returned from DL_ModDecimalAdj FAILURE \n",NULL,p_intlenv_data_struct_h);
						 int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
				 }
				 free(l_dl_deal_deci_adj_struct_h);
		 }
		 /***** JC - ISKB 487 -- End *****/

		else
		{
			INTL_WARNING
         int_ret_val = CO_InsertErr(l_debug_info_ptr,
                                    FUNC_NF,
                                    APL_NULL_STRING,
                                    APL_NULL_STRING,
                                    APL_NULL_STRING,
                                    __LINE__,
                                    __FILE__);
         int_ret_val = Proc_MarkFailProcess(h_ora_rowid, l_debug_info_ptr);
      }
		Alert("Free chr_h_error_desc...");
		free(p_intlenv_data_struct_h);	
		Alert("Free chr_h_error_desc...");
		free(chr_h_error_desc);
		Alert("Before Free l_debug_info_ptr...");
		fflush(stdout);
		CO_FreeErrLst(l_debug_info_ptr);
		//Alert("Before Free l_debug_info_struct_h_tmp...");
		//CO_FreeErrLst(l_debug_info_struct_h_tmp); //Comment this if First UAT Debug failed
		Alert("Moving for another record");
		fflush(stdout);
	}

   APL_GOBACK_SUCCESS;

RETURN_SUCCESS:

   EXEC SQL COMMIT ;
        CO_ProcMonitor(APL_OUT_FILE,"Exiting successfully  out of Trade Daemon\n",NULL,NULL);
        fclose(chr_finifile);
        exit(0);

RETURN_FAILURE:
   EXEC SQL ROLLBACK;
        CO_ProcMonitor(APL_OUT_FILE,"Exiting unsuccesfully out of Trade Daemon\n",l_debug_info_ptr,NULL);
        fclose(chr_finifile);
        exit(-1);
}

int Batch_Proc_MarkSuccessProcess(char *p_ora_rowid,char *p_return_value)
{
	short int_ret_val  =  0;
	char  l_str_mis_info[4001]=APL_NULL_STRING;
	char chr_l_error_desc[4001]   =  APL_NULL_STRING;

	APL_IF_DEBUG
	{
		Alert("SUCESSUPDATE %s \n",g_mis_info);
		Alert("SUCESSUPDATE len %d \n",strlen(g_mis_info));
	}

 	 if(strlen(g_mis_info))
	{
		Alert("INSIDE: %s \n",g_mis_info);
		strcpy(l_str_mis_info,g_mis_info);

		if( APL_FAILURE == Update_Tables(l_str_mis_info,"STP",chr_l_error_desc,l_debug_info_ptr))
		{
			APL_IF_DEBUG
			{
				CO_ProcMonitor(APL_OUT_FILE,"The common tables related to Deformater processing could not be updated\n",NULL,NULL);
			}
			APL_GOBACK_FAIL
		}
	} 

	EXEC SQL UPDATE PRO_REQUEST_DEAL set STATUS = '2',ERROR_DET='SUCCESS'||:p_return_value
	where rowid=:p_ora_rowid;
	IS_ANY_ORA_ERROR;

	EXEC SQL COMMIT ;
	IS_ANY_ORA_ERROR;

	int_ret_val = APL_SUCCESS;
		Alert("END OF COMMIT: \n");
	S_NON_DCE_ERASE_DUMMY_WARNING;
		Alert("END OF COMMIT !! \n");


RETURN_SUCCESS :
	return(APL_SUCCESS);

RETURN_FAILURE :
	return(APL_FAILURE);
}

int Proc_MarkFailProcess(char *p_ora_rowid, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	short int_ret_val  =  0;
	char chr_l_error_desc[4001]   =  APL_NULL_STRING;
	char h_mis_info[4001] = APL_NULL_STRING;
	char l_chr_envoir_data[4001] = APL_NULL_STRING;
	char chr_l_str_filename[71] = APL_NULL_STRING;
	char l_str_msg_name[7] = APL_NULL_STRING;

	EXEC SQL ROLLBACK ;
	IS_ANY_ORA_ERROR;

	int_ret_val = APL_FAILURE;

	S_NON_DCE_ERASE_DUMMY_WARNING;
	printf("\n Now calling CO_Rtv_ErrString..");
	int_ret_val = CO_Rtv_ErrString(l_debug_info_ptr,chr_h_error_desc);
	printf("\n Done with calling CO_Rtv_ErrString..");

/*	if(strlen (g_param_str))
	{
		strcpy(h_mis_info ,g_param_str);
		strcpy(chr_l_error_desc,chr_h_error_desc);
		strcpy(l_chr_envoir_data,g_envoir_data);
		APL_IF_DEBUG
		{
			printf("IN FAILURE UPDATE |%s| \n",h_mis_info);
		}
		if(APL_FAILURE ==Update_Tables(h_mis_info,l_chr_envoir_data,"RPR",chr_l_error_desc,l_debug_info_ptr))
		{
			APL_IF_DEBUG
			{
				CO_ProcMonitor(APL_OUT_FILE,"The common tables related to Deformater processing could not be updated\n",NULL,NULL);
			}
		 APL_GOBACK_FAIL 
		}
	} */
   if(strlen(chr_h_error_desc)>0)	
	{
		EXEC SQL update  PRO_REQUEST_DEAL set STATUS = '3',ERROR_DET=:chr_h_error_desc
		where rowid=:p_ora_rowid;

			APL_GOBACK_FAIL
	}
	else
	{
		EXEC SQL update  PRO_REQUEST_DEAL set STATUS = '2',ERROR_DET='SUCCESS'
		where rowid=:p_ora_rowid;
	}

	IS_ANY_ORA_ERROR;

	EXEC SQL COMMIT;
	IS_ANY_ORA_ERROR;

	printf("\n 1..");
	strcpy(chr_h_error_desc,APL_NULL_STRING);
	printf("\n 2..");

	S_NON_DCE_ERASE_DUMMY_WARNING;
	printf("\n 3..");


	printf("\n Done with Proc_MarkFailProcess...");
RETURN_SUCCESS :
	return(APL_SUCCESS);

RETURN_FAILURE :
	return(APL_FAILURE);
}


int Proc_MarkFailProcess_BCN(DL_BCN_STRUCT_H *p_dl_bcn_struct_h_l,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,char *p_ora_rowid, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	short int_ret_val  =  0;
	char chr_l_error_desc[4001]   =  APL_NULL_STRING;

	EXEC SQL ROLLBACK ;
	IS_ANY_ORA_ERROR;

	/* changes by amish --same function is called again after few lines --- */
	/*	
	printf(" the entry is |%s|",p_dl_bcn_struct_h_l->h_entry);
	if (!strcmp(p_dl_bcn_struct_h_l->h_entry,APL_ENTRY_FLG_SYS))
	{
		CR_Chk_RepAtBCN(p_dl_bcn_struct_h_l ,p_intl_envdatastruct_h ,l_debug_info_ptr);
	}
	
	*/
	int_ret_val = APL_FAILURE;

	S_NON_DCE_ERASE_DUMMY_WARNING;

	printf("\n Now calling CO_Rtv_ErrString..");

	int_ret_val = CO_Rtv_ErrString(l_debug_info_ptr,chr_h_error_desc);

	printf("\n Done with calling CO_Rtv_ErrString..");

	printf(" the entry is |%s|",p_dl_bcn_struct_h_l->h_entry);
	if (!strcmp(p_dl_bcn_struct_h_l->h_entry,APL_ENTRY_FLG_SYS))
	{
		CR_Chk_RepAtBCN(p_dl_bcn_struct_h_l ,p_intl_envdatastruct_h ,l_debug_info_ptr);
		
		if(strlen(g_mis_info))
		{
			strcpy(chr_l_error_desc,chr_h_error_desc);
			Update_Tables(g_mis_info,"RPR",chr_l_error_desc,l_debug_info_ptr);
		}
	}

	if(strlen(chr_h_error_desc)>0)
	{
		EXEC SQL update  PRO_REQUEST_DEAL set STATUS = '3',ERROR_DET=:chr_h_error_desc
			where rowid=:p_ora_rowid;
	}
	else
	{
		EXEC SQL update  PRO_REQUEST_DEAL set STATUS = '2',ERROR_DET='SUCCESS'
			where rowid=:p_ora_rowid;
	}

	IS_ANY_ORA_ERROR;
	printf("\n 1..");
	strcpy(chr_h_error_desc,APL_NULL_STRING);
	printf("\n 2..");

	S_NON_DCE_ERASE_DUMMY_WARNING;
	printf("\n 3..");


	printf("\n Done with Proc_MarkFailProcess...");
RETURN_SUCCESS :
	return(APL_SUCCESS);

RETURN_FAILURE :
	return(APL_FAILURE);

}

int Batch_Proc_GridMarkSuccessProcss(char *p_ora_rowid,char *p_return_value,char *p_access_stamp)
{
	char l_data_fld_sep_str[2]      =     APL_NULL_STRING;
	/*sprintf(l_data_fld_sep_str,"%c",DATA_FIELD_SEPRTR);
	 *    strcat(l_data_fld_sep_str,APL_NULL_STRING);*/
	short int_ret_val  =  0;
	sprintf(l_data_fld_sep_str,"%c",DATA_FIELD_SEPRTR);
	strcat(l_data_fld_sep_str,APL_NULL_STRING);


	EXEC SQL UPDATE PRO_REQUEST_DEAL set STATUS = '2',ERROR_DET='SUCCESS'||:p_return_value||:l_data_fld_sep_str||:p_access_stamp||:l_data_fld_sep_str
		where rowid=:p_ora_rowid;
	IS_ANY_ORA_ERROR;

	CO_ProcMonitor(APL_OUT_FILE,"before commit successup\n",NULL,NULL);
	EXEC SQL COMMIT ;
	CO_ProcMonitor(APL_OUT_FILE,"after commit successup\n",NULL,NULL);
	IS_ANY_ORA_ERROR;


	int_ret_val = APL_SUCCESS;
	S_NON_DCE_ERASE_DUMMY_WARNING;


RETURN_SUCCESS :
	return(APL_SUCCESS);

RETURN_FAILURE :
	return(APL_FAILURE);
}



int Proc_MarkFailProcess_Deal(char *p_ora_rowid,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,char *chr_web_h_error_desc1, char *chr_web_h_error_desc2, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	short int_ret_val  =  0;
	char chr_l_error_desc[4001]   =  APL_NULL_STRING;
	char chr_l_error[4001]   =  APL_NULL_STRING; // Kalyan
	char  l_str_mis_info[4001]=APL_NULL_STRING;
	DL_DEALREPAIR_STRUCT_H *l_dl_dealrepair_struct_h;

	/* JC - ISKB - 532 -- Start */
	char l_pty_code[11] = APL_NULL_STRING;
	char l_pty_type_broker[2] = "B";
	char l_pty_name[131] = APL_NULL_STRING;
	void  CO_Rtv_DataString(char *chr_p_str, char *p_lbl,char *p_data_value);
	/* JC - ISKB - 532 -- End */
	
	/*Added isolve 12174 Interoperability */
	int l_int_num = 0;
	char chr_l_setl_det[21]=APL_NULL_STRING;
	char  **temp = ( char **)NULL;
	short i_setl_det=0;
	char l_dl_date[11];
	/*Added isolve 12174 Interoperability */

	//Added by Vikash for T0 Swift/Sebi
	char settl_no_repair[10]=APL_NULL_STRING;
	char payin_dt_repair[25]=APL_NULL_STRING;
	char payout_dt_repair[25]=APL_NULL_STRING;

	EXEC SQL ROLLBACK ;
	IS_ANY_ORA_ERROR;


	l_dl_dealrepair_struct_h =  (DL_DEALREPAIR_STRUCT_H *)calloc(1,sizeof(DL_DEALREPAIR_STRUCT_H));
	APL_MALLOC_FAIL(l_dl_dealrepair_struct_h);
	memset(l_dl_dealrepair_struct_h,NULL,sizeof(DL_DEALREPAIR_STRUCT_H));


	int_ret_val = APL_FAILURE;

	S_NON_DCE_ERASE_DUMMY_WARNING;

	int_ret_val = Populate_DL_DEALREPAIR(l_dl_dealrepair_struct_h,g_param_str); /* Kalyan */
	
	/*Changes done by Vikash for T0 SWIFT/SEBI  -start*/
	if((strcmp(l_dl_dealrepair_struct_h->h_entry,"S")==0) || (strcmp(l_dl_dealrepair_struct_h->h_entry,"T")==0))
	{
		Alert("For T0 in Deal Repair");
		Alert("l_dl_dealrepair_struct_h -> h_deal_date: |%s|\n", l_dl_dealrepair_struct_h -> h_deal_date);
		Alert("l_dl_dealrepair_struct_h -> h_setl_date: |%s|\n", l_dl_dealrepair_struct_h -> h_setl_date);
		Alert("Before T0 DL_DEALREPAIR EXCH_CODE: |%s|\n", l_dl_dealrepair_struct_h->h_trd_exch);
			
		if(!strcmp(l_dl_dealrepair_struct_h -> h_deal_date, l_dl_dealrepair_struct_h -> h_setl_date))
		{
			Alert("Inside else condition settl_date and deal_dt is equal condition for T0");
			if(!strcmp(l_dl_dealrepair_struct_h->h_trd_exch, "NSE"))
			{
				strcpy(l_dl_dealrepair_struct_h -> h_trd_mkt_type, "55");
			}
			else if(!strcmp(l_dl_dealrepair_struct_h->h_trd_exch, "BSE"))
			{
				strcpy(l_dl_dealrepair_struct_h -> h_trd_mkt_type, "45");
			}
			
			EXEC SQL SELECT SETTL_NO, PAY_IN_DT, PAY_OUT_DT INTO :settl_no_repair, payin_dt_repair, payout_dt_repair from MT_SETTL_CAL where exch_code = :l_dl_dealrepair_struct_h->h_trd_exch and settl_type = :l_dl_dealrepair_struct_h -> h_trd_mkt_type and start_date = :l_dl_dealrepair_struct_h -> h_deal_date;
								
			strcpy(l_dl_dealrepair_struct_h -> h_trd_setl_no, settl_no_repair);
			strcpy(l_dl_dealrepair_struct_h -> h_payin_dt, payin_dt_repair);
			strcpy(l_dl_dealrepair_struct_h -> h_payout_dt, payout_dt_repair);
			
			Alert("->settl_no_repair |%s|", l_dl_dealrepair_struct_h -> h_trd_setl_no);
			Alert("->payin_dt_repair |%s|", l_dl_dealrepair_struct_h -> h_payin_dt);
			Alert("->payout_dt_repair |%s|", l_dl_dealrepair_struct_h -> h_payout_dt);
		}
		Alert("l_dl_dealrepair_struct_h -> h_trd_mkt_type: |%s|", l_dl_dealrepair_struct_h -> h_trd_mkt_type);
	}
	/*Changes done by Vikash for T0 SWIFT/SEBI  -end*/
	
	printf("\n Now checking GET_INTEROP_SETL_DET..if required to be call; Yes, then calling");	
	/*Added isolve 12174 Interoperability Starts*/
	        memset(l_dl_date,APL_NULL_CHAR,sizeof(l_dl_date));	
			
			if(!strcmp(l_dl_dealrepair_struct_h->h_exch_code,APL_NULL_STRING) && strcmp(l_dl_dealrepair_struct_h->h_trd_exch,APL_NULL_STRING) && strcmp(l_dl_dealrepair_struct_h->h_trd_mkt_type,APL_NULL_STRING) && strcmp(l_dl_dealrepair_struct_h->h_deal_date,APL_NULL_STRING))
			{
			strncpy(l_dl_date,l_dl_dealrepair_struct_h->h_deal_date,10);
			
			EXEC SQL SELECT GET_INTEROP_SETL_DET(:l_dl_dealrepair_struct_h-> h_client,:l_dl_dealrepair_struct_h-> h_trd_exch,:l_dl_dealrepair_struct_h->h_trd_mkt_type,:l_dl_dealrepair_struct_h-> h_trd_setl_no,:l_dl_date,:l_dl_dealrepair_struct_h->h_instr_code) into :chr_l_setl_det:i_setl_det FROM DUAL;
			
			Alert("HM :: Error %d occurrred while fetching from GET_INTEROP_SETL_DET \n",sqlca.sqlcode);
			Alert("Repair : chr_l_setl_det == |%s|",chr_l_setl_det);
			
				if(strcmp(chr_l_setl_det,APL_NULL_STRING))
				{
						if(APL_FAILURE == CO_SplitStr(chr_l_setl_det,
							'|',
							&l_int_num,&temp))
						{
							CO_ProcMonitor(APL_OUT_FILE, "Repair : Failure from StrSplitFn", l_debug_info_ptr, NULL);
						}
						else
						{
							strcpy(l_dl_dealrepair_struct_h->h_exch_code,temp[0]);
							strcpy(l_dl_dealrepair_struct_h->h_mkt_type,temp[1]);
							strcpy(l_dl_dealrepair_struct_h->h_settlement_no,temp[2]);
							
						}
						 Alert("\n HM :: arguments are A--|%s| B--|%s| C--|%s|", temp[0],temp[1],temp[2]);
				}
			}
	/*Added for isolve 12174 Interoperability Ends*/
	
	printf("\n Now calling CO_Rtv_ErrString..");	
	/* Kalyan */ /* Web UAT Fix. Changed by Dnaynesh. 28/04/2007 . Variable comparison was not proper */
	if( strcmp(l_dl_dealrepair_struct_h->h_entry,"W")==0)
	{
		printf("\n ..Entry Type is WEB.. \n");

		if ( strcmp(p_intl_envdatastruct_h->h_mode,"RPR")==0)
		{
			printf("\n ..Since Mode is RPR, this must have been called from Repair mode by user.. hence calling original error population function ...  \n");
			int_ret_val = CO_Rtv_ErrString(l_debug_info_ptr,chr_h_error_desc);
		}
		else
		{
			printf("KS -- Calling CO_Rtv_Error \n");
			printf("\n ..Since Mode is not RPR, this must have been called from Web Deal Creation through Web Deal Transfer .. hence calling new error population function ...  \n");
			int_ret_val = CO_Rtv_Error(l_debug_info_ptr,chr_h_error_desc);
			if  (strstr(chr_h_error_desc,chr_web_h_error_desc1) == 0 )
			{
				strcat(chr_h_error_desc,chr_web_h_error_desc1);
			}
			if  (strstr(chr_h_error_desc,chr_web_h_error_desc2) == 0 )
			{
				strcat(chr_h_error_desc,chr_web_h_error_desc2);
			}
		}
	}
	else
	{
		printf("\n ..Entry Type is Normal and not WEB.. \n");
		int_ret_val = CO_Rtv_ErrString(l_debug_info_ptr,chr_h_error_desc);
	}

	printf("\n Done with calling CO_Rtv_ErrString..");

	//int_ret_val = Populate_DL_DEALREPAIR(l_dl_dealrepair_struct_h,g_param_str); Kalyan
	/*** Commented Rakesh  S
	l_dl_dealrepair_struct_h -> h_dl_rep_identno =1234;
	strcpy(l_dl_dealrepair_struct_h->h_entry,"S");
	***/

	printf(" the entry is |%s|",l_dl_dealrepair_struct_h->h_entry);
	//Changes done by Sunny to show failure reason of swift SEBI and Upload to note column of deal repair start
	if (!strcmp(l_dl_dealrepair_struct_h->h_entry,APL_ENTRY_FLG_SYS) || !strcmp(l_dl_dealrepair_struct_h->h_entry,APL_ENTRY_SEBI) || !strcmp(l_dl_dealrepair_struct_h->h_entry,APL_UPLD_ENTRY))
	{
		/* JC - ISKB_532 -- To Handle error if function returns failure */
                //Changes done by Sunny to show failure reason of swift SEBI to note column of deal repair
		if( strcmp(chr_h_error_desc,APL_NULL_STRING) )
		{
		      strncpy(l_dl_dealrepair_struct_h->h_info1,chr_h_error_desc,258);
		}
	        //Changes done by Sunny to show failure reason of swift SEBI to note column of deal repair end

                if(DL_RepairInsDb(l_dl_dealrepair_struct_h ,p_intl_envdatastruct_h ,l_debug_info_ptr) != APL_SUCCESS)
                {
                        printf("JC::: Failed to insert in Deal Repair\n");
                        APL_GOBACK_FAIL
                }
		if(strlen(g_mis_info))
		{
			strcpy(l_str_mis_info,g_mis_info);
			strcpy(chr_l_error_desc,chr_h_error_desc);

		    Update_Tables(g_mis_info,"RPR",chr_l_error_desc,l_debug_info_ptr);
		}
	}

	/* Kalyan - For WEB MODULE */
	if (!strcmp(l_dl_dealrepair_struct_h->h_entry,"W")&& strlen(chr_h_error_desc)>0)
	{
		printf("KS -- Setting the error to info1 field -- [%s]\n",chr_l_error);
		strcpy(l_dl_dealrepair_struct_h->h_info1,chr_h_error_desc);

		/* JC - ISKB - 532 -- Start */
		printf("***************\nJC::: Param string ---- [%s]\n", g_param_str);
		CO_Rtv_DataString(g_param_str,"DOMESTIC_CP_NAME",l_pty_name);
		printf("JC::: Party Name - [%s]\n",l_pty_name);
		printf("JC::: h_domcpclt_cd -- [%s]\n", l_dl_dealrepair_struct_h->h_domestic_cpclt);
		printf("JC::: l_pty_name    -- [%s]\n", l_pty_name);
		int l_instrcou=0;
		if(strlen(l_dl_dealrepair_struct_h->h_domestic_cpclt)>0)
		{
         EXEC SQL SELECT COUNT(*) INTO :l_instrcou FROM MT_PARTY WHERE PTY_CODE= :l_dl_dealrepair_struct_h->h_domestic_cpclt;
         if(sqlca.sqlcode != 0)
         {
            printf("KS -- Error %d occurrred while fetching from MT_PARTY \n",sqlca.sqlcode);
         }
		}
		if(l_instrcou==0)
		{
		EXEC SQL SELECT PTY_CODE INTO :l_pty_code
			FROM MT_PARTY WHERE
			(PTY_NAME = :l_pty_name OR
			PTY_BIC_CODE = :l_pty_name OR
			PTY_NAME = :l_dl_dealrepair_struct_h->h_domestic_cpclt OR
			PTY_BIC_CODE = :l_dl_dealrepair_struct_h->h_domestic_cpclt ) AND
			PTY_TYPE = :l_pty_type_broker;
		IS_ANY_ORA_ERROR

		printf("JC::: ORA for selecting Party Code -- [%d]\n", sqlca.sqlcode);
		strcpy(l_dl_dealrepair_struct_h->h_domestic_cpclt,l_pty_code);
		printf("JC::: Domestic CPCLT Code is [%s]\n***************\n", l_dl_dealrepair_struct_h->h_domestic_cpclt);
		}
		/* JC - ISKB - 532 -- End */

		/* JC - ISKB_532 -- To Handle error if function returns failure */
                if(DL_RepairInsDb(l_dl_dealrepair_struct_h ,p_intl_envdatastruct_h ,l_debug_info_ptr) != APL_SUCCESS)
                {
                        printf("JC::: Failed to insert in Deal Repair\n");
                        APL_GOBACK_FAIL
                }

		if(strlen(g_mis_info))
		{
			strcpy(l_str_mis_info,g_mis_info);
			strcpy(chr_l_error_desc,chr_h_error_desc);

		    Update_Tables(g_mis_info,"RPR",chr_l_error_desc,l_debug_info_ptr);
		}
	}
	/* Till Here  Kalyan - For WEB MODULE */

	if(strlen(chr_h_error_desc)>0)
	{
		EXEC SQL update  PRO_REQUEST_DEAL set STATUS = '3',ERROR_DET=:chr_h_error_desc
			where rowid=:p_ora_rowid;
	}
	else
	{
		EXEC SQL update  PRO_REQUEST_DEAL set STATUS = '2',ERROR_DET='SUCCESS'
			where rowid=:p_ora_rowid;
	}

	IS_ANY_ORA_ERROR;
	printf("\n 1..");
	strcpy(chr_h_error_desc,APL_NULL_STRING);
	printf("\n 2..");

	S_NON_DCE_ERASE_DUMMY_WARNING;
	printf("\n 3..");


	printf("\n Done with Proc_MarkFailProcess...");
RETURN_SUCCESS :
	return(APL_SUCCESS);

RETURN_FAILURE :
	return(APL_FAILURE);

}




int Update_Tables (char *p_str_mis_info,char *p_str_rprflg,char *p_error_desc,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	DF_COMMON_MSGRPT_STRUCT_H *h_df_common_msgrptStruct;
	char  l_str_mis_info[4001] = APL_NULL_STRING;


	h_df_common_msgrptStruct = (DF_COMMON_MSGRPT_STRUCT_H *)calloc(1,sizeof(DF_COMMON_MSGRPT_STRUCT_H));
	APL_MALLOC_FAIL(h_df_common_msgrptStruct)
		memset(h_df_common_msgrptStruct,NULL,sizeof(DF_COMMON_MSGRPT_STRUCT_H));


	strcpy(l_str_mis_info, p_str_mis_info);

	if( CPopulateDfCommonMsgrptStruct(l_str_mis_info, h_df_common_msgrptStruct)== APL_FAILURE)
	{
		APL_IF_DEBUG
		{
			printf("CPopulatedfCommonMsgrptStruct  FAILED \n");
		}
		APL_GOBACK_FAIL
	}
	APL_IF_DEBUG
	{
		printf("out of function CPopulateDfCommonMsgrptStruct successfully \n");
	}

	if(strcmp(p_str_rprflg ,"STP") == 0)
	{
		strcpy(h_df_common_msgrptStruct->h_msgsts,"STP");
		strcpy(h_df_common_msgrptStruct->h_failure_reason,"SUCCESS ");
		strcpy(h_df_common_msgrptStruct->h_trd_ca,"T");
		strcpy(h_df_common_msgrptStruct->h_ca_id,APL_NULL_STRING);
		strcpy(h_df_common_msgrptStruct->h_mis_info,APL_NULL_STRING);

		if (GDbInsDF_COMMON_MSGRPT(h_df_common_msgrptStruct,l_debug_info_ptr) == APL_FAILURE)
		{
			APL_IF_DEBUG
			{
				printf("GDbInsDF_COMMON_MSGRPT FAILED\n");
			}
			APL_GOBACK_FAIL
		}
	}
	else
	{
		memset(l_str_mis_info,NULL,4001);
		strcpy(l_str_mis_info, p_str_mis_info);
		Parse_Error(p_error_desc,l_str_mis_info,l_debug_info_ptr);
	}

	APL_IF_DEBUG
	{
		printf("OUT OF GDbInsDF_COMMON_MSGRPT SUCCESS \n");
	}
RETURN_SUCCESS :
	free(h_df_common_msgrptStruct);
	APL_IF_DEBUG
	{
		printf("Leaving fuction Update_Tables successfully.\n");
	}
	return(APL_SUCCESS);
RETURN_FAILURE :
	free(h_df_common_msgrptStruct);
	CO_Rtv_ErrString(l_debug_info_ptr,chr_h_error_desc);
	APL_IF_DEBUG
	{
		printf("ERROR iS = %s \n",chr_h_error_desc);
		printf("Leaving fuction Update_Tables unsuccessfully.\n");
	}
	return(APL_FAILURE);
}


int Parse_Error(char * p_err_desc, char *p_str_misinfo,DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{
	char  **l_str_reasons ;
	char    **l_str_fields;
	char  chr_l_failreason[201] = APL_NULL_STRING;
	int  l_int_numreasons;
	int  l_int_numfields;
	int  l_int_loopcount;
	char  l_str_mis_info[4001]=APL_NULL_STRING;

	DF_COMMON_MSGRPT_STRUCT_H *h_df_common_msgrptStruct;

	h_df_common_msgrptStruct = (DF_COMMON_MSGRPT_STRUCT_H *)calloc(1,sizeof(DF_COMMON_MSGRPT_STRUCT_H));
	APL_MALLOC_FAIL(h_df_common_msgrptStruct)
		memset(h_df_common_msgrptStruct,NULL,sizeof(DF_COMMON_MSGRPT_STRUCT_H));

	printf("\n the ERROR DISCRIPTION IS |%s|",p_err_desc);


	if (APL_FAILURE == CO_SplitStr(  p_err_desc,
				'#',
				&l_int_numreasons,
				&l_str_reasons ))
	{
		APL_IF_DEBUG
		{
			printf("inside lreason SPLIT %d\n", strlen(l_str_reasons));
		}
		if(strlen(l_str_reasons)==0)
		{
			printf("Failure from StrSplitFni: NO ERROR DESCRIPTION \n ");
		}
	}

	for(l_int_loopcount=0;l_int_loopcount<l_int_numreasons;l_int_loopcount++)
	{
		APL_IF_DEBUG
		{
			printf("inside for loop loopcount= %d\n",l_int_loopcount);
		}
		if (APL_FAILURE == CO_SplitStr( l_str_reasons[l_int_loopcount  ],
					'|',
					&l_int_numfields,
					&l_str_fields ))
		{
			APL_IF_DEBUG
			{
				printf("inside lreason SPLIT %d\n", strlen(l_str_reasons));
			}
			if(strlen(l_str_fields)==0)
			{
				APL_IF_DEBUG
				{
					printf( "Failure from StrSplitFni: NO ERROR FIELDS");
				}
			}
		}
		APL_IF_DEBUG
		{
			printf("*******%d \n",l_int_numfields);
			printf("%s %s %d\n",l_str_fields[3],l_str_fields[2],l_int_numfields);
		}
		strcpy(chr_l_failreason,APL_NULL_STRING);
		/*
		strcpy(chr_l_failreason,"From Trade Server : ");
		*/
		strcpy(chr_l_failreason , l_str_fields[l_int_numfields -1]);
	/*
		if (strcmp(l_str_fields[l_int_numfields -1],"2") == 0)
	*/
		if (strlen(l_str_fields[2])!=0)
		{
			strcat(chr_l_failreason, " - ");
			strcat(chr_l_failreason, l_str_fields[2]);
		}

		APL_IF_DEBUG
		{
			printf("%s \n",chr_l_failreason);
		}



		strcpy(l_str_mis_info,p_str_misinfo);
		if( CPopulateDfCommonMsgrptStruct(l_str_mis_info, h_df_common_msgrptStruct)== APL_FAILURE)
		{
			APL_IF_DEBUG
			{
				printf("CPopulatedfCommonMsgrptStruct  FAILED \n");
			}
			APL_GOBACK_FAIL
		}
		strcpy(h_df_common_msgrptStruct->h_msgsts,"RPR");
		strcpy(h_df_common_msgrptStruct->h_trd_ca,"T");
		strcpy(h_df_common_msgrptStruct->h_ca_id,APL_NULL_STRING);
		strcpy(h_df_common_msgrptStruct->h_mis_info,APL_NULL_STRING);
		strcpy(h_df_common_msgrptStruct->h_failure_reason,chr_l_failreason);

		if (GDbInsDF_COMMON_MSGRPT(h_df_common_msgrptStruct,l_debug_info_ptr) == APL_FAILURE)
		{
			APL_IF_DEBUG
			{
				printf("GDbInsDF_COMMON_MSGRPT FAILED\n");
			}
			APL_GOBACK_FAIL
		}


	}

	APL_GOBACK_SUCCESS
		RETURN_SUCCESS:
		{
			free(h_df_common_msgrptStruct);
			APL_IF_DEBUG
			{
				CO_ProcMonitor(APL_OUT_FILE, "Exiting Out Of  Parse_Error successfully\n", NULL, NULL);
			}
			return(APL_SUCCESS);
		}

RETURN_FAILURE:
	{
		free(h_df_common_msgrptStruct);
		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting Out Of Parse_Error unsuccessfully\n", NULL, NULL);
		}
		return(APL_FAILURE);
	}
}

