


   
   
   
   
   
   
   
   
   
   
   
   




#include <CO_HostStructdef.h>

EXEC SQL INCLUDE sqlca;

#define FILENAME_LEN_A			80
/*AIX Warning Removal*/
#ifdef BUFFER_LEN
#undef BUFFER_LEN
#endif
#define BUFFER_LEN				100

//main(int argc,char **argv)
int main(int argc,char **argv)//Changes done for AIX Migration
{
	DEBUG_INFO_STRUCT_H			*l_debug_info_ptr = NULL;
	FILE						*l_ptr_ini_file = NULL;
	FILE						*l_ptr_log_file = NULL;
	INTL_ENV_DATA_STRUCT_H	l_intl_envdatastruct_h;
	char						chr_l_inifile[FILENAME_LEN_A]   = APL_NULL_STRING;
	char						chr_uname[APL_USERID_LEN]   = APL_NULL_STRING;
	char						chr_passwd[APL_PASSWD_LEN]  = APL_NULL_STRING;
	char						chr_custody_id_b[APL_USERID_LEN]  = APL_NULL_STRING;
	int						int_l_flg = 0;
	int						int_retval = 0;
	struct sqlca			sqlca;

	memset(&l_intl_envdatastruct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H));
	
	

	strcpy(l_intl_envdatastruct_h.usr, argv[3]);
	strcpy(l_intl_envdatastruct_h.h_mode, argv[4]);
	strcpy(l_intl_envdatastruct_h.processtion, argv[5]);
	strcpy(l_intl_envdatastruct_h.auth_req, argv[6]);
	strcpy(l_intl_envdatastruct_h.subprocess, argv[7]);
	strcpy(l_intl_envdatastruct_h.h_process, argv[8]);
	
	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

	if ((l_ptr_ini_file = fopen(chr_l_inifile,"r")) == NULL)
		exit(-1);

	APL_FETCH_DB_LOGIN_DETAILS(l_ptr_ini_file,chr_custody_id_b,chr_uname,chr_passwd,APL_OUT_FILE,&l_debug_info_ptr)
	
	
	
	if (CO_DB_Connection_J(chr_uname,chr_passwd,&l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL

	

	int_retval = CO_Rtv_RptFileName("3h",APL_LOGFILE_DESC,100,argv[5],argv,&l_ptr_log_file,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL
	}

	

	EXEC SQL COMMIT WORK;
	
	if (sqlca.sqlcode != 0)
	{
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL
	}

	CO_ProcMonitor(l_ptr_log_file,"Settlement Cash Flow Report Report",NULL,NULL);
	CO_ProcMonitor(l_ptr_log_file,"__________________________________\n",NULL,NULL);
	CO_ProcMonitor(l_ptr_log_file,"Work Committed after chr_logfile creation \n",NULL,&l_intl_envdatastruct_h);

	

	if (CO_RtvSysParams(&l_debug_info_ptr) != APL_SUCCESS)
	{
		CO_ProcMonitor(l_ptr_log_file,"Unable to get system parameters - Rollback done \n",NULL,&l_intl_envdatastruct_h);
		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);
		
		EXEC SQL ROLLBACK WORK RELEASE;
		
		APL_GOBACK_FAIL	
	}

	
	 
	int_retval = CO_Proc_BtchLock(argv,l_ptr_log_file,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		CO_ProcMonitor(l_ptr_log_file,"Unable to lock BATCH_IN_PROC record - Rollback done \n",NULL,&l_intl_envdatastruct_h);
		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		EXEC SQL ROLLBACK WORK RELEASE;
		
		APL_GOBACK_FAIL
	}

	

	int_retval = DL_Rtv_SetlCashFl_Rpt(argv,l_ptr_log_file,&l_intl_envdatastruct_h,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		int_l_flg = 1;

	   CO_Proc_Exit(argv,l_ptr_log_file,&l_debug_info_ptr,int_l_flg);
		
		if (CO_ChkErr(l_debug_info_ptr) == APL_SUCCESS)
		{
			
			CO_ProcMonitor(l_ptr_log_file,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_envdatastruct_h);
			CO_FreeErrLst(&l_debug_info_ptr);
			
		}

		CO_ProcMonitor(l_ptr_log_file,"FAILURE from Settlement Cash Flow Report generation program \n",NULL,&l_intl_envdatastruct_h);

		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		APL_GOBACK_FAIL	
	}
	else
	{
		int_l_flg = 0;

		CO_Proc_Exit(argv,l_ptr_log_file,&l_debug_info_ptr,int_l_flg);

		if (CO_ChkErr(l_debug_info_ptr) == APL_SUCCESS)
		{
			
			CO_ProcMonitor(l_ptr_log_file,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_envdatastruct_h);
			CO_FreeErrLst(&l_debug_info_ptr);

		}

		CO_ProcMonitor(l_ptr_log_file,"SUCCESS from Settlement Cash Flow Report generation program \n",NULL,&l_intl_envdatastruct_h);

		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		APL_GOBACK_SUCCESS
	}

	RETURN_SUCCESS	: 
	{
		fclose(l_ptr_ini_file);
	   return(0);
	}

	RETURN_FAILURE	: 
	{
		fclose(l_ptr_ini_file);
  		return(-1);	
	}
}


 
 int DL_Rtv_SetlCashFl_Rpt(char **argv,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca			  sqlca;
	char						  chr_l_sys_date[APL_DATE_LEN] = APL_NULL_STRING;
	char						  **temp = NULL;
	int						  int_num = 0;
	SYS_DL_DEAL_STRUCT_H	  l_sys_dl_deal_struct_hb;
	SYS_DL_DEAL_STRUCT_I	  l_sys_dl_deal_struct_il;
	int						  int_retval;
	char						  chr_l_asd[APL_FLAG_LENGTH] = APL_NULL_STRING;
	char						  chr_l_date[APL_DATE_LEN] = APL_NULL_STRING;
	char						  chr_l_new_txn[APL_FLAG_LENGTH] = APL_NULL_STRING;
	char						  chr_l_locncode_c[APL_LOCNCODE_LENGTH] = APL_NULL_STRING;
	FILE						  *l_ptr_settl_cash_rpt_file = NULL;
	double					  l_inflow = 0.0;
	double					  l_outflow = 0.0;
	char						  chr_l_prev_domcpac[11] = APL_NULL_STRING;
	char   					  int_l_int_acc[11] = APL_NULL_STRING;
	char						  chr_l_acc_type[2] = APL_NULL_STRING;
	double					  l_tot_inflow = 0.0;
	double					  l_tot_outflow = 0.0;
	char						l_temp_client[11]  = APL_NULL_STRING;

	EXEC SQL VAR l_sys_dl_deal_struct_hb.h_dl_client IS STRING;
	EXEC SQL VAR l_sys_dl_deal_struct_hb.h_indentity_no IS STRING;
	EXEC SQL VAR l_sys_dl_deal_struct_hb.h_domcpclt_cd IS STRING;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion DL_Rtv_SetlCashFl_Rpt \n",NULL,p_intl_env_data_struct_h_d);

	sqlca.sqlcode = 0;

	

	if (CO_SplitStr(argv[9],'|',&int_num,&temp) != APL_SUCCESS)
		return(APL_FAILURE);
	
	strcpy(chr_l_date,temp[0]);
	
	if (strlen(chr_l_date) == 0)
		APL_DATA_MISSING("DATE",APL_NULL_STRING,APL_NULL_STRING)
	
	strcpy(chr_l_asd,temp[1]);
	
	if (strlen(chr_l_asd) == 0)
		APL_DATA_MISSING("ASD FLAG",APL_NULL_STRING,APL_NULL_STRING)
	
	strcpy(chr_l_locncode_c,temp[2]);

	

	

	strcpy(chr_l_new_txn,temp[3]);

	if (strlen(chr_l_new_txn) == 0)
		APL_DATA_MISSING("NEW TXN FLAG",APL_NULL_STRING,APL_NULL_STRING)
	
	if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
		return(APL_FAILURE);	

	

		strcpy(chr_l_acc_type,temp[4]);

		if (strlen(chr_l_acc_type) == 0)
			APL_DATA_MISSING("ACCOUNT TYPE(BRK/INTACC/ALL)",APL_NULL_STRING,APL_NULL_STRING)
		
		

		if (strcmp(chr_l_acc_type,"I") == 0) 
		{
			strcpy(int_l_int_acc,l_mt_core_sys_params_struct_h.custody_clt_cd);
		}    
	

	

	int_retval = CO_Rtv_RptFileName("EN","Settlement Cash Flow Report",80,p_intl_env_data_struct_h_d->processtion,argv,&l_ptr_settl_cash_rpt_file,l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
		return(APL_FAILURE);

	

	int_retval = DL_Prnt_SetlCashFl_RptHdr(l_ptr_settl_cash_rpt_file,chr_l_date,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
		APL_GOBACK_FAIL

	if (CO_RtvSysDt(chr_l_sys_date,l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL

	

	if ( (strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind,"Y") == 0) &&
		  ( strlen(chr_l_locncode_c) != 0 ) )	
	{
		if(strcmp(chr_l_acc_type,"A") == 0) 
		{
			if (strcmp(chr_l_asd,"Y") == 0)
			{
				EXEC SQL DECLARE TradeInfo11 CURSOR FOR
					SELECT * FROM DL_DEAL
					WHERE deal_cd IN ('3','4','5','6','7','8')
					AND VAL_FDT IS NOT NULL
					AND location_cd = :chr_l_locncode_c
					AND setl_date = :chr_l_date
					AND ((INSTRUMENT_DT IS NOT NULL AND INSTRUMENT_DT = :chr_l_date)
							OR (INSTRUMENT_DT IS NULL AND VAL_FDT = :chr_l_date)) 
					ORDER BY domestic_cpclt
					FOR UPDATE OF access_stamp;
		
				EXEC SQL OPEN TradeInfo11;
		
				IS_ANY_ORA_ERROR
			}
			else if (strcmp(chr_l_asd,"N") == 0)
			{
				EXEC SQL DECLARE TradeInfo12 CURSOR FOR
					SELECT * FROM DL_DEAL 
					WHERE deal_cd IN ('3','4','5','6','7','8')
					AND VAL_FDT IS NOT NULL
					AND location_cd = :chr_l_locncode_c
					AND setl_date <= :chr_l_date
					AND ((INSTRUMENT_DT IS NOT NULL AND INSTRUMENT_DT = :chr_l_date)
							OR (INSTRUMENT_DT IS NULL AND VAL_FDT = :chr_l_date)) 
					ORDER BY domestic_cpclt
					FOR UPDATE OF access_stamp;

				EXEC SQL OPEN TradeInfo12;

				IS_ANY_ORA_ERROR
			}
		}
		else	
		{
			if (strcmp(chr_l_asd,"Y") == 0)
         {
            EXEC SQL DECLARE TradeInfo13 CURSOR FOR
               SELECT * FROM DL_DEAL A, MT_CLIENT B
               WHERE A.deal_cd IN ('3','4','5','6','7','8')
               AND A.VAL_FDT IS NOT NULL
               AND A.location_cd = :chr_l_locncode_c
               AND A.setl_date = :chr_l_date
               AND ((A.INSTRUMENT_DT IS NOT NULL AND A.INSTRUMENT_DT = :chr_l_date)
                     OR (A.INSTRUMENT_DT IS NULL AND A.VAL_FDT = :chr_l_date))
					AND A.domestic_cpclt = B.CLN_CODE
					AND (B.CLN_BRK_ALL = :chr_l_acc_type OR B.CLN_CODE = :int_l_int_acc)
               ORDER BY A.domestic_cpclt
               FOR UPDATE OF A.access_stamp;

            EXEC SQL OPEN TradeInfo13;

            IS_ANY_ORA_ERROR
         }
         else if (strcmp(chr_l_asd,"N") == 0)
         {
            EXEC SQL DECLARE TradeInfo14 CURSOR FOR
               SELECT * FROM DL_DEAL A, MT_CLIENT B
					WHERE A.deal_cd IN ('3','4','5','6','7','8')
               AND A.VAL_FDT IS NOT NULL
               AND A.location_cd = :chr_l_locncode_c
               AND A.setl_date <= :chr_l_date
               AND ((A.INSTRUMENT_DT IS NOT NULL AND A.INSTRUMENT_DT = :chr_l_date)
                     OR (A.INSTRUMENT_DT IS NULL AND A.VAL_FDT = :chr_l_date))
               AND A.domestic_cpclt = B.CLN_CODE
               AND (B.CLN_BRK_ALL = :chr_l_acc_type OR B.CLN_CODE = :int_l_int_acc)
               ORDER BY A.domestic_cpclt
               FOR UPDATE OF A.access_stamp;

            EXEC SQL OPEN TradeInfo14;

            IS_ANY_ORA_ERROR
         }
		}
			
	}
	else
	{
		

		if (strcmp(chr_l_acc_type,"A") == 0) 
      {
			if (strcmp(chr_l_asd,"Y") == 0)
			{
				EXEC SQL DECLARE TradeInfo21 CURSOR FOR
					SELECT * FROM DL_DEAL 
					WHERE deal_cd IN ('3','4','5','6','7','8')
					AND VAL_FDT IS NOT NULL
					AND setl_date = :chr_l_date
					AND ((INSTRUMENT_DT IS NOT NULL AND INSTRUMENT_DT = :chr_l_date)
							OR (INSTRUMENT_DT IS NULL AND VAL_FDT = :chr_l_date)) 
					ORDER BY domestic_cpclt
					FOR UPDATE OF access_stamp;

				EXEC SQL OPEN TradeInfo21;

				IS_ANY_ORA_ERROR
			}
			else if (strcmp(chr_l_asd,"N") == 0)
			{
				EXEC SQL DECLARE TradeInfo22 CURSOR FOR
					SELECT * FROM DL_DEAL
					WHERE deal_cd IN ('3','4','5','6','7','8')
					AND VAL_FDT IS NOT NULL
					AND setl_date <= :chr_l_date
					AND ((INSTRUMENT_DT IS NOT NULL AND INSTRUMENT_DT = :chr_l_date)
							OR (INSTRUMENT_DT IS NULL AND VAL_FDT = :chr_l_date)) 
					ORDER BY domestic_cpclt
					FOR UPDATE OF access_stamp;

				EXEC SQL OPEN TradeInfo22;

				IS_ANY_ORA_ERROR
			}
		}
		else 
		{
			if (strcmp(chr_l_asd,"Y") == 0)
         {
            EXEC SQL DECLARE TradeInfo23 CURSOR FOR
               SELECT * FROM DL_DEAL A, MT_CLIENT B
               WHERE A.deal_cd IN ('3','4','5','6','7','8')
               AND A.VAL_FDT IS NOT NULL
               AND A.setl_date = :chr_l_date
               AND ((A.INSTRUMENT_DT IS NOT NULL AND A.INSTRUMENT_DT = :chr_l_date)
                     OR (A.INSTRUMENT_DT IS NULL AND A.VAL_FDT = :chr_l_date))
					AND A.domestic_cpclt = B.CLN_CODE
               AND (B.CLN_BRK_ALL = :chr_l_acc_type OR B.CLN_CODE = :int_l_int_acc)
               ORDER BY A.domestic_cpclt
               FOR UPDATE OF A.access_stamp;

            EXEC SQL OPEN TradeInfo23;

            IS_ANY_ORA_ERROR
         }
         else if (strcmp(chr_l_asd,"N") == 0)
         {
            EXEC SQL DECLARE TradeInfo24 CURSOR FOR
               SELECT * FROM DL_DEAL A, MT_CLIENT B
               WHERE A.deal_cd IN ('3','4','5','6','7','8')
               AND A.VAL_FDT IS NOT NULL
               AND A.setl_date <= :chr_l_date
               AND ((A.INSTRUMENT_DT IS NOT NULL AND A.INSTRUMENT_DT = :chr_l_date)
                     OR (A.INSTRUMENT_DT IS NULL AND A.VAL_FDT = :chr_l_date))
					AND A.domestic_cpclt = B.CLN_CODE
               AND (B.CLN_BRK_ALL = :chr_l_acc_type OR B.CLN_CODE = :int_l_int_acc)
               ORDER BY A.domestic_cpclt
               FOR UPDATE OF A.access_stamp;

            EXEC SQL OPEN TradeInfo24;

            IS_ANY_ORA_ERROR
         }
		}
	}

	for(;;)
	{

		

		if ( (strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind,"Y") == 0) &&
			  ( strlen(chr_l_locncode_c) != 0 ) )
		{
			if (strcmp(chr_l_acc_type,"A") == 0)
				{
					if (strcmp(chr_l_asd,"Y") == 0)
						EXEC SQL FETCH TradeInfo11 INTO :l_sys_dl_deal_struct_hb:l_sys_dl_deal_struct_il;
					else if (strcmp(chr_l_asd,"N") == 0)
						EXEC SQL FETCH TradeInfo12 INTO :l_sys_dl_deal_struct_hb:l_sys_dl_deal_struct_il;
				}
			else
				{
					if (strcmp(chr_l_asd,"Y") == 0)
						EXEC SQL FETCH TradeInfo13 INTO :l_sys_dl_deal_struct_hb:l_sys_dl_deal_struct_il;
					else if (strcmp(chr_l_asd,"N") == 0)
						EXEC SQL FETCH TradeInfo14 INTO :l_sys_dl_deal_struct_hb:l_sys_dl_deal_struct_il;
				}
		}

		

		else if ( (strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind,"N") == 0) ||
					 ( strlen(chr_l_locncode_c) == 0 ) )
		{
			if (strcmp(chr_l_acc_type,"A") == 0)
				{
					if (strcmp(chr_l_asd,"Y") == 0)
						EXEC SQL FETCH TradeInfo21 INTO :l_sys_dl_deal_struct_hb:l_sys_dl_deal_struct_il;
					else if (strcmp(chr_l_asd,"N") == 0)
						EXEC SQL FETCH TradeInfo22 INTO :l_sys_dl_deal_struct_hb:l_sys_dl_deal_struct_il;
				}
			else
				{
					if (strcmp(chr_l_asd,"Y") == 0)
						EXEC SQL FETCH TradeInfo23 INTO :l_sys_dl_deal_struct_hb:l_sys_dl_deal_struct_il;
					else if (strcmp(chr_l_asd,"N") == 0)
						EXEC SQL FETCH TradeInfo24 INTO :l_sys_dl_deal_struct_hb:l_sys_dl_deal_struct_il;
				}
		}

		IS_ANY_ORA_ERROR

		if (APL_ZERO_RESULT_SET)
		{
			if (strcmp(chr_l_prev_domcpac,APL_NULL_STRING) != 0)
			{
				int_retval = DL_Prnt_SetlCashFl_Rpt(l_ptr_settl_cash_rpt_file,chr_l_prev_domcpac,l_inflow,l_outflow,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);
				if (int_retval != APL_SUCCESS)
					APL_GOBACK_FAIL
			
				l_tot_inflow = l_tot_inflow + l_inflow;
				l_tot_outflow = l_tot_outflow + l_outflow;
			}

			break;
		}

		
		
		if (strcmp(chr_l_new_txn,"Y") == 0)
		{
			EXEC SQL SELECT client into :l_temp_client
			FROM DL_DEALDET
			WHERE client = :l_sys_dl_deal_struct_hb.h_dl_client
			AND   IDENTIY_NO = :l_sys_dl_deal_struct_hb.h_indentity_no
			AND   FLAG = 'SCF';

			IS_ANY_ORA_ERROR

			if (sqlca.sqlcode != 1403)
				continue;
		}

		

		if ((strcmp(chr_l_prev_domcpac,l_sys_dl_deal_struct_hb.h_domcpclt_cd) != 0) && (strcmp(chr_l_prev_domcpac,APL_NULL_STRING) != 0))
		{
			

			int_retval = DL_Prnt_SetlCashFl_Rpt(l_ptr_settl_cash_rpt_file,chr_l_prev_domcpac,l_inflow,l_outflow,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);
			if (int_retval != APL_SUCCESS)
				APL_GOBACK_FAIL

			l_tot_inflow = l_tot_inflow + l_inflow;
			l_tot_outflow = l_tot_outflow + l_outflow;
			
			l_inflow = 0.0;
			l_outflow = 0.0;
		}

		if ((strcmp(l_sys_dl_deal_struct_hb.h_dealcd,APL_DEAL_DVP) == 0) || (strcmp(l_sys_dl_deal_struct_hb.h_dealcd,APL_DEAL_CR) == 0) || (strcmp(l_sys_dl_deal_struct_hb.h_dealcd,APL_DEAL_RCR) == 0))
			l_inflow = l_inflow + l_sys_dl_deal_struct_hb.h_amt;
		else if ((strcmp(l_sys_dl_deal_struct_hb.h_dealcd,APL_DEAL_RVP) == 0) || (strcmp(l_sys_dl_deal_struct_hb.h_dealcd,APL_DEAL_CD) == 0) || (strcmp(l_sys_dl_deal_struct_hb.h_dealcd,APL_DEAL_DCD) == 0))
			l_outflow = l_outflow + l_sys_dl_deal_struct_hb.h_amt;

		

		EXEC SQL SELECT client into :l_temp_client
		FROM DL_DEALDET
		WHERE client = :l_sys_dl_deal_struct_hb.h_dl_client
		AND   IDENTIY_NO = :l_sys_dl_deal_struct_hb.h_indentity_no
		AND   FLAG = 'SCF';

		IS_ANY_ORA_ERROR

		if (sqlca.sqlcode == 1403)
		{
			EXEC SQL INSERT INTO DL_DEALDET
			VALUES (:l_sys_dl_deal_struct_hb.h_dl_client,:l_sys_dl_deal_struct_hb.h_indentity_no,:chr_l_sys_date,'SCF',NULL);
			IS_ANY_ORA_ERROR
		}
		else if (sqlca.sqlcode == 0)
		{
			EXEC SQL UPDATE DL_DEALDET
			SET   REPORTDT = :chr_l_sys_date
			WHERE client = :l_sys_dl_deal_struct_hb.h_dl_client
			AND   IDENTIY_NO = :l_sys_dl_deal_struct_hb.h_indentity_no
			AND   FLAG = 'SCF';

			IS_ANY_ORA_ERROR
		}
		
		strcpy(chr_l_prev_domcpac,l_sys_dl_deal_struct_hb.h_domcpclt_cd);
	}

	

	if ( (strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind,"Y") == 0) &&
		  ( strlen(chr_l_locncode_c) != 0 ) )
	{
		if (strcmp(chr_l_acc_type,"A") == 0)
			{
				if (strcmp(chr_l_asd,"Y") == 0)
					EXEC SQL CLOSE TradeInfo11;
				else if (strcmp(chr_l_asd,"N") == 0)
					EXEC SQL CLOSE TradeInfo12;
			}
		else
			{
				if (strcmp(chr_l_asd,"Y") == 0)
					EXEC SQL CLOSE TradeInfo13;
				else if (strcmp(chr_l_asd,"N") == 0)
					EXEC SQL CLOSE TradeInfo14;
			}
	}
	else
	{
		if (strcmp(chr_l_acc_type,"A") == 0)
			{
				if (strcmp(chr_l_asd,"Y") == 0)
					EXEC SQL CLOSE TradeInfo21;
				else if (strcmp(chr_l_asd,"N") == 0)
					EXEC SQL CLOSE TradeInfo22;
			}
		else
			{
				if (strcmp(chr_l_asd,"Y") == 0)
					EXEC SQL CLOSE TradeInfo23;
				else if (strcmp(chr_l_asd,"N") == 0)
					EXEC SQL CLOSE TradeInfo24;
			}
	}

	if (sqlca.sqlerrd[2] == 0)
		fprintf(l_ptr_settl_cash_rpt_file,"               ---Nothing to report---  \n\n");
	else
	{
		

		int_retval = DL_Prnt_SetlCashFl_RptSumm(l_ptr_settl_cash_rpt_file,l_tot_inflow,l_tot_outflow,p_ptr_log_file,p_intl_env_data_struct_h_d,l_debug_info_ptr);
	
		if (int_retval != APL_SUCCESS)
			APL_GOBACK_FAIL
	}

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion DL_Rtv_SetlCashFl_Rpt successfully \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion DL_Rtv_SetlCashFl_Rpt with failure \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_FAILURE);
	}
}



 
 int DL_Prnt_SetlCashFl_RptHdr(FILE *p_ptr_settl_cash_rpt_file,char *p_dt,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca	sqlca;
	char				chr_l_corp_name[41] = APL_NULL_STRING;
	short				i_ca_clr_name;
	int				i;
	char				chr_l_date[11] = APL_NULL_STRING;

	EXEC SQL VAR chr_l_corp_name IS STRING;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion DL_Prnt_SetlCashFl_RptHdr \n",NULL,NULL);
	
	sqlca.sqlcode = 0;

	chr_l_date[0] = *p_dt;
	chr_l_date[1] = *(p_dt+1);
	chr_l_date[2] = *(p_dt+2);
	chr_l_date[3] = *(p_dt+3);
	chr_l_date[4] = *(p_dt+4);
	chr_l_date[5] = *(p_dt+5);
	chr_l_date[6] = *(p_dt+6);
	chr_l_date[7] = *(p_dt+7);
	chr_l_date[8] = *(p_dt+8);
	chr_l_date[9] = *(p_dt+9);
	chr_l_date[10] = '\0';

	EXEC SQL SELECT ca_identname
	INTO :chr_l_corp_name:i_ca_clr_name
	FROM MT_COMMON_SYS_PARAMS;
	
	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_DATE_NOT_SET,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	fprintf(p_ptr_settl_cash_rpt_file,"\n");

	fprintf(p_ptr_settl_cash_rpt_file,"                       %s\n\n",chr_l_corp_name);
	fprintf(p_ptr_settl_cash_rpt_file,"             Cash Flow Report For %s  \n\n",chr_l_date);

	for (i=0;i<205;i++)
		fprintf(p_ptr_settl_cash_rpt_file,"-");
	
	fprintf(p_ptr_settl_cash_rpt_file,"\n");

	fprintf(p_ptr_settl_cash_rpt_file,"Counterparty                                                       Bank                                                                                                  Inflow                   Outflow               \n");
	
	for (i=0;i<205;i++)
		fprintf(p_ptr_settl_cash_rpt_file,"-");
	
	fprintf(p_ptr_settl_cash_rpt_file,"\n");

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion DL_Prnt_SetlCashFl_RptHdr successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion DL_Prnt_SetlCashFl_RptHdr with failure \n",NULL,NULL);

		return(APL_FAILURE);
	}
}


 
 int DL_Prnt_SetlCashFl_Rpt(FILE *p_ptr_settl_cash_rpt_file,char *p_prev_domcpac,double p_inflow,double p_outflow,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca	sqlca;
	char				chr_l_bankname[81] = APL_NULL_STRING;
	short				i_bankname;
	char				chr_l_prev_domcpac_cname[66] = APL_NULL_STRING;
	char				chr_l_tmp_bankname[81]	=	APL_NULL_STRING;
	char				chr_l_char_amt1[25]	=	APL_NULL_STRING;
	char				chr_l_char_amt2[25]	=	APL_NULL_STRING;
	short				i_prev_domcpac_cname;
	int				i;
	double		   l_net_outflow;	
	double		   l_net_inflow;	

	EXEC SQL VAR chr_l_prev_domcpac_cname IS STRING;
	EXEC SQL VAR chr_l_bankname IS STRING;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion DL_Prnt_SetlCashFl_Rpt \n",NULL,NULL);
	
	sqlca.sqlcode = 0;
	strcpy(chr_l_char_amt2,"0");
	strcpy(chr_l_tmp_bankname,"CBT");

	EXEC SQL SELECT cln_name,CLN_REG_NAME
	INTO :chr_l_prev_domcpac_cname:i_prev_domcpac_cname,:chr_l_bankname:i_bankname
	FROM MT_CLIENT
	WHERE CLN_CODE = :p_prev_domcpac;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	if ( APL_FAILURE == CO_Rtv_FormatAmt( p_inflow, chr_l_char_amt1, 'Y', 'Y', l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL;
	}

	fprintf(p_ptr_settl_cash_rpt_file,"%-67s%-82s%-26s%+26s\n\n",chr_l_prev_domcpac_cname,chr_l_tmp_bankname,chr_l_char_amt1,chr_l_char_amt2);
	
	if ( APL_FAILURE == CO_Rtv_FormatAmt( p_outflow, chr_l_char_amt1, 'Y', 'Y', l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL;
	}

	fprintf(p_ptr_settl_cash_rpt_file,"%-67s%-82s%+26s%-26s\n\n",chr_l_prev_domcpac_cname,chr_l_bankname,chr_l_char_amt2,chr_l_char_amt1);
		
	fprintf(p_ptr_settl_cash_rpt_file,"\n");
	
	for (i=0;i<205;i++)
		fprintf(p_ptr_settl_cash_rpt_file,"-");
	
	if (p_outflow > p_inflow)
	{
		l_net_outflow = (p_outflow - p_inflow);
	
		if ( APL_FAILURE == CO_Rtv_FormatAmt( l_net_outflow, chr_l_char_amt1, 'Y', 'Y', l_debug_info_ptr ))
		{
			APL_GOBACK_FAIL;
		}

		fprintf(p_ptr_settl_cash_rpt_file,"\nNet Outflow For CP %-25s\n",chr_l_char_amt1);

	}
	else
	{
		l_net_inflow = (p_inflow - p_outflow);
		
		if ( APL_FAILURE == CO_Rtv_FormatAmt( l_net_inflow, chr_l_char_amt1, 'Y', 'Y', l_debug_info_ptr ))
		{
			APL_GOBACK_FAIL;
		}

		fprintf(p_ptr_settl_cash_rpt_file,"\nNet Inflow For CP  %-25s\n",chr_l_char_amt1);

	}
	
	for (i=0;i<205;i++)
		fprintf(p_ptr_settl_cash_rpt_file,"-");
	
	fprintf(p_ptr_settl_cash_rpt_file,"\n");
		
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion DL_Prnt_SetlCashFl_Rpt successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion DL_Prnt_SetlCashFl_Rpt with failure \n",NULL,NULL);

		return(APL_FAILURE);
	}
}


 
 int DL_Prnt_SetlCashFl_RptSumm(FILE *p_ptr_settl_cash_rpt_file,double p_tot_inflow,double p_tot_outflow,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca	sqlca;
	int				i;
	double         l_net_tot_inflow;
	double			l_net_tot_outflow;
	char				chr_l_char_amt1[25]	=	APL_NULL_STRING;
	char				chr_l_char_amt2[25]	=	APL_NULL_STRING;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion DL_Prnt_SetlCashFl_RptSumm \n",NULL,NULL);
	
	sqlca.sqlcode = 0;
		
	if ( APL_FAILURE == CO_Rtv_FormatAmt( p_tot_inflow, chr_l_char_amt1, 'Y', 'Y', l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL;
	}

	if ( APL_FAILURE == CO_Rtv_FormatAmt( p_tot_outflow, chr_l_char_amt2, 'Y', 'Y', l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL;
	}

	fprintf(p_ptr_settl_cash_rpt_file,"\n\nTotal Inflow:      %-26s    Total Outflow:    %-26s\n\n",chr_l_char_amt1,chr_l_char_amt2);
	
	for (i=0;i<205;i++)
		fprintf(p_ptr_settl_cash_rpt_file,"-");
		
	fprintf(p_ptr_settl_cash_rpt_file,"\n");
	
	if (p_tot_outflow > p_tot_inflow)
	{
		l_net_tot_outflow = (p_tot_outflow - p_tot_inflow);
	
		if ( APL_FAILURE == CO_Rtv_FormatAmt( l_net_tot_outflow, chr_l_char_amt1, 'Y', 'Y', l_debug_info_ptr ))
		{
			APL_GOBACK_FAIL;
		}

		fprintf(p_ptr_settl_cash_rpt_file,"\nNet Total Outflow: %-26s    \n\n",chr_l_char_amt1);

	}
	else
	{
		l_net_tot_inflow = (p_tot_inflow - p_tot_outflow);
		
		if ( APL_FAILURE == CO_Rtv_FormatAmt( l_net_tot_inflow, chr_l_char_amt1, 'Y', 'Y', l_debug_info_ptr ))
		{
			APL_GOBACK_FAIL;
		}

		fprintf(p_ptr_settl_cash_rpt_file,"\nNet Total Inflow:  %-26s     \n\n",chr_l_char_amt1);

	}
	
	for (i=0;i<205;i++)
		fprintf(p_ptr_settl_cash_rpt_file,"-");

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion DL_Prnt_SetlCashFl_RptSumm successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion DL_Prnt_SetlCashFl_RptSumm with failure \n",NULL,NULL);

		return(APL_FAILURE);
	}
}



 
 int CO_Proc_BtchLock(char **argv,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca					sqlca;
   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;

EXEC SQL VAR chr_g_restart_data is string;

	sqlca.sqlcode = 0;
		
	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CO_Proc_BtchLock\n",NULL,NULL);

	EXEC SQL SELECT processing_status INTO :chr_g_restart_data:g_restart_data_i
	FROM SYS_BATCHPROC
	WHERE process_name = :argv[0]
	AND   proc_init = :argv[1]
	AND STARTDATE = :argv[2]
	AND status = 'started'
	FOR UPDATE OF processing_status,status;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_BtchLock successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_BtchLock with failure \n",NULL,NULL);

		return(APL_FAILURE);
	}
}


 
 int CO_Proc_Exit(char **argv,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr,int p_flg)
 {
	struct sqlca					sqlca;
	char								chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;

	sqlca.sqlcode = 0;
		
	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CO_Proc_Exit\n",NULL,NULL);
	if (p_flg == 0)
	{
		

		if (CO_ChkErr(*l_debug_info_ptr) != APL_SUCCESS)
		{
			memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
			sprintf(chr_l_buf,"Finished Settlement Cash Flow Report Generation");

			EXEC SQL UPDATE SYS_BATCHPROC
			SET stat_det = :chr_l_buf,
				 status = 'completed'
			WHERE process_name = :argv[0]
			AND   proc_init = :argv[1]
			AND STARTDATE = :argv[2]
			AND status = 'started';
	
			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

		}

		EXEC SQL COMMIT WORK RELEASE;

		CO_ProcMonitor(p_ptr_log_file,"Work Committed \n",NULL,NULL);
	}
	else if (p_flg == 1)
	{
		EXEC SQL ROLLBACK WORK RELEASE;

		CO_ProcMonitor(p_ptr_log_file,"Rollback done \n",NULL,NULL);
	}

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_Exit successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_Exit with failure \n",NULL,NULL);

		return(APL_FAILURE);
	}
}


 
 int CO_DB_Connection_J(char *p_username,char *p_passwd,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca					sqlca;

	sqlca.sqlcode = 0;
		
	CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CO_DB_Connection_J\n",NULL,NULL);
	
	EXEC SQL CONNECT :p_username IDENTIFIED BY :p_passwd;

	if (sqlca.sqlcode != 0)
		APL_GOBACK_FAIL

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(APL_OUT_FILE, "Leaving processtion CO_DB_Connection_J successfully \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(APL_OUT_FILE, "Leaving processtion CO_DB_Connection_J with failure \n",NULL,NULL);

		return(APL_FAILURE);
	}
}
