/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to 
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or 
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         :	
 *
 * File Name           :
 *
 * Description         :	
 *
 *           
 *
 *            Version Control Block
 *
 * Date        Version		Author               Description
 * ---------   --------	 ---------------  ---------------------------
 *					
 *
 *********************************************************************/

#include "CR_Header_C.h"

EXEC SQL INCLUDE SQLCA.H;



	






int CO_Chk_SecValid(char *p_secode, char p_exist, char p_auth, char p_del, char p_frozen, char p_mothchld, char p_converted, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{



	

	struct sqlca sqlca;	
	MT_INSTRUMENT_STRUCT_H l_mt_rusec_struct_h_a;
	MT_INSTRUMENT_STRUCT_I l_mt_rusec_struct_i_ab;
	short success_flg = APL_SUCCESS;
	char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;

	#ifdef APL_THREADS 
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif
	
	sqlca.sqlcode=0;

	memset(&l_mt_rusec_struct_h_a, NULL, sizeof(MT_INSTRUMENT_STRUCT_H));
	memset(&l_mt_rusec_struct_i_ab, NULL, sizeof(MT_INSTRUMENT_STRUCT_I));

	APL_IF_DEBUG
	{
      CO_ProcMonitor(	APL_OUT_FILE, 
						"Entered Function CO_Chk_SecValid\n",
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(		chr_l_buf, 
						"The Security Code is : %s\n", 
						p_secode);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(		chr_l_buf, 
						"The Exist Flag is : %c\n", 
						p_exist);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(		chr_l_buf, 
						"The Authorisation Flag is : %c\n", 
						p_auth);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(		chr_l_buf, 
						"The Delete Flag is : %c\n", 
						p_del);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(		chr_l_buf, 
						"The Frozen Flag is : %c\n", 
						p_frozen);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(		chr_l_buf, 
						"The Mother/Child Flag is : %c\n", 
						p_mothchld);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
		memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(		chr_l_buf, 
						"The Converted Flag is : %c\n", 
						p_converted);
      CO_ProcMonitor(	APL_OUT_FILE, 
						chr_l_buf,	
						NULL,
						NULL);
	}

	
	

	if (!strlen(p_secode))
	{
		APL_DATA_MISSING("Security", APL_NULL_STRING, APL_NULL_STRING);
		APL_GOBACK_FAIL
	}

	

	if (p_exist == NULL) p_exist = 'Y';


	

	EXEC SQL SELECT * INTO :l_mt_rusec_struct_h_a:l_mt_rusec_struct_i_ab FROM MT_INSTRUMENT 
	WHERE security_cd=:p_secode;

	IS_ANY_ORA_ERROR;
	

	

	if ((sqlca.sqlcode == 1403) && (p_exist == 'Y'))
	{
		CO_InsertErr(l_debug_info_ptr, ERR_SEC_NOTFND, p_secode, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__);    
		APL_GOBACK_FAIL
	}

	if ((sqlca.sqlcode == 0) && (p_exist == 'N'))
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_SECURITY_EXIST, p_secode, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )   
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}
	

	if ( ( l_mt_rusec_struct_i_ab.i_authoriserdt == -1 ) && (p_auth=='Y'))
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_UNAUTH_SEC, p_secode, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}
	
	if ( ( l_mt_rusec_struct_i_ab.i_authoriserdt != -1 ) && (p_auth=='N'))
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_SEC_AUTHORIZED, p_secode, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	

	l_mt_rusec_struct_h_a.h_sec_stat[2]='\0';	
	if ((strcmp(l_mt_rusec_struct_h_a.h_sec_stat, "DU")) && (p_del=='Y'))
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_SEC_NOTMARKEDDEL, p_secode, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}
	
	if ((!strcmp(l_mt_rusec_struct_h_a.h_sec_stat, "DU")) && (p_del=='N'))
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_SEC_MARKEDDEL, p_secode, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	

	if ((strcmp(l_mt_rusec_struct_h_a.h_sec_stat, "FU")&&strcmp(l_mt_rusec_struct_h_a.h_sec_stat, "FA")) && (p_frozen=='Y'))
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_SEC_NOTFRZN, p_secode, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}
	
	if (((!strcmp(l_mt_rusec_struct_h_a.h_sec_stat, "FU"))||(!strcmp(l_mt_rusec_struct_h_a.h_sec_stat, "FA"))) && (p_frozen=='N'))
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_SECURITY_FRZN, p_secode, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}


	

	if ((l_mt_rusec_struct_h_a.h_mother_sec_ind[0] == 'N') && (p_mothchld == 'M'))
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_SEC_NOTMOTHERSEC, p_secode, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ((l_mt_rusec_struct_h_a.h_mother_sec_ind[0] == 'Y') && (p_mothchld == 'C'))
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_SEC_MOTHERSEC, p_secode, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}
		

	

	if ((l_mt_rusec_struct_i_ab.i_new_cd == -1) && (p_converted == 'Y'))
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_SEC_NOTUNDERCONV, p_secode, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	if ((l_mt_rusec_struct_i_ab.i_new_cd != -1) && (p_converted == 'N'))
	{
		if ( APL_FAILURE == CO_InsertErr(l_debug_info_ptr, ERR_UNDERCONV_SEC, p_secode, APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__) )
		{
			APL_GOBACK_FAIL;
		}
		success_flg = APL_FAILURE;
	}

	

	if (APL_FAILURE == success_flg )
	{
		 APL_GOBACK_FAIL
	}
	else
	{
		APL_GOBACK_SUCCESS
	}

   RETURN_SUCCESS :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CO_Chk_SecValid with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);
  
   RETURN_FAILURE :
		APL_IF_DEBUG
		{
         CO_ProcMonitor(	APL_OUT_FILE,
							"Leaving Function CO_Chk_SecValid with Errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);
}							

	
