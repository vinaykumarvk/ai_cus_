/*COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         :  Maintenance
 *
 * File Name           :  MT_Updclntinstr.pc 
 *
 * Description         :  This file contains all functions for maintenance of
 *                        Client instrument details
 *
 *
 *            Version Control Block
 *
 * Date        Version          Author               Description
 * ---------   --------  ---------------  ---------------------------
 *              1.0              ANIL               NEW FILE
 *
 *********************************************************************/


#include  "CO_IndStructdef.h"
#include  "MT_Interface.h"
#include  "CR_Common.h"
#include  "CO_Commdef.h"
#include  "Intellect_Error.h"
#include "Intellect_Common.h"
#include "sqlca.h"

int MT_UpdCln_Instr(MT_CLN_INSTR_STRUCT_H *p_mt_cln_instr_struct_h, INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
   {
      MT_CLN_INSTR_STRUCT_I *l_mt_clninstr_struct_i;
      struct sqlca sqlca;
      char chr_acc_stamp_compare[APL_DATE_LEN];
      char chr_sys_time_stamp[APL_DATE_LEN];
      short l_maker, l_makerdt, l_checker, l_checkerdt, l_access_stamp;
      short l_access_stamp_compare;
      int int_error_flag = APL_SUCCESS;
      int int_l_rowexists = 0;
#ifdef APL_THREADS
    APL_SET_CONTEXT
    EXEC SQL CONTEXT USE :my_ctx_local;
#endif
    APL_IF_DEBUG
      {
       CO_ProcMonitor(APL_OUT_FILE, "Entered Function MT_UpdCln_Instr\n",
                NULL,p_intl_envdatastruct_h);
      }
l_mt_clninstr_struct_i=(MT_CLN_INSTR_STRUCT_I*)calloc(1,sizeof(MT_CLN_INSTR_STRUCT_I));
  APL_MALLOC_FAIL(l_mt_clninstr_struct_i)
  l_maker =0;
  l_makerdt =0;
  l_checker =0;
  l_checkerdt =0;
  l_access_stamp =0;
  l_access_stamp_compare =0;

   APL_IF_DEBUG
     {
      CO_ProcMonitor(APL_OUT_FILE, "Entered Function MT_UpdCln_Instr\n",
                NULL,p_intl_envdatastruct_h);
     }
 if (!strlen(p_mt_cln_instr_struct_h->h_cln_code)) l_mt_clninstr_struct_i->i_cln_code =-1;
     else l_mt_clninstr_struct_i->i_cln_code =0;
 if (!strlen(p_mt_cln_instr_struct_h->h_instr_code)) l_mt_clninstr_struct_i->i_instr_code =-1;
     else l_mt_clninstr_struct_i->i_instr_code =0;
 if (!strlen(p_mt_cln_instr_struct_h->h_cln_instr_code)) l_mt_clninstr_struct_i->i_cln_instr_code =-1;
     else l_mt_clninstr_struct_i->i_cln_instr_code =0;
 if (!strlen(p_mt_cln_instr_struct_h->h_maker)) l_mt_clninstr_struct_i->i_maker =-1;
     else l_mt_clninstr_struct_i->i_maker =0;
 if (!strlen(p_mt_cln_instr_struct_h->h_maker_dt)) l_mt_clninstr_struct_i->i_maker_dt =-1;
     else l_mt_clninstr_struct_i->i_maker_dt =0;
 if (!strlen(p_mt_cln_instr_struct_h->h_access_stamp)) l_mt_clninstr_struct_i->i_access_stamp =-1;
     else l_mt_clninstr_struct_i->i_access_stamp =0;
 if (!strlen(p_mt_cln_instr_struct_h->h_status)) l_mt_clninstr_struct_i->i_status =-1;
       else l_mt_clninstr_struct_i->i_status =0; 

 if(CO_RtvSysDtTime(chr_sys_time_stamp,l_debug_info_ptr) !=APL_SUCCESS)
  {
        APL_GOBACK_FAIL
  }
 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_INPUT))
 {
     APL_IF_DEBUG
      {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Input h_mode of Function MT_UpdCln_Instr\n",
                NULL,p_intl_envdatastruct_h);
      }
    strcpy(p_mt_cln_instr_struct_h->h_status,STATUS_UAUTH);
             l_mt_clninstr_struct_i->i_status =0; 
    strcpy(p_mt_cln_instr_struct_h->h_maker,p_intl_envdatastruct_h->usr);
            l_mt_clninstr_struct_i->i_maker =0;
    strcpy(p_mt_cln_instr_struct_h->h_maker_dt,chr_sys_time_stamp);
            l_mt_clninstr_struct_i->i_maker_dt =0; 
    strcpy(p_mt_cln_instr_struct_h->h_access_stamp,chr_sys_time_stamp);
            l_mt_clninstr_struct_i->i_access_stamp =0;
    strcpy(p_mt_cln_instr_struct_h->h_checker,APL_NULL_STRING);
    strcpy(p_mt_cln_instr_struct_h->h_checker_dt,APL_NULL_STRING);
     EXEC SQL INSERT INTO MT_CLN_INST_MAP VALUES (:p_mt_cln_instr_struct_h:l_mt_clninstr_struct_i);
		 printf("\n After insert sqlca.sqlcode is |%d| \n", sqlca.sqlcode);
     IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_RECORD_EXISTS,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
  }
if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_MODIFY))
     {
       l_checker =-1;
       l_checkerdt =-1;
       strcpy(p_mt_cln_instr_struct_h->h_checker,APL_NULL_STRING);
       strcpy(p_mt_cln_instr_struct_h->h_checker_dt,APL_NULL_STRING);
  CO_ProcMonitor(APL_OUT_FILE, "Entered Modify h_mode of Function  MT_UpdCln_Instr\n",NULL,p_intl_envdatastruct_h);
       EXEC SQL SELECT ACCESS_STAMP, STATUS
         INTO   :chr_acc_stamp_compare:l_access_stamp_compare,
             :p_mt_cln_instr_struct_h->h_status:l_mt_clninstr_struct_i->i_status
                 FROM  MT_CLN_INST_MAP
             WHERE CLN_CODE =:p_mt_cln_instr_struct_h->h_cln_code
         AND    INSTR_CODE=:p_mt_cln_instr_struct_h->h_instr_code
                  FOR UPDATE;
            IS_ANY_ORA_ERROR;
    if (!strcmp(p_mt_cln_instr_struct_h->h_access_stamp,chr_acc_stamp_compare))
       {
      if(strcmp(p_mt_cln_instr_struct_h->h_status,STATUS_DEL_UAUTH))
       {
         strcpy(p_mt_cln_instr_struct_h->h_access_stamp,chr_sys_time_stamp);
         l_mt_clninstr_struct_i->i_access_stamp =0;
         strcpy(p_mt_cln_instr_struct_h->h_status,STATUS_UAUTH);
         l_mt_clninstr_struct_i->i_status =0;
         strcpy(p_mt_cln_instr_struct_h->h_maker,p_intl_envdatastruct_h->usr);
          l_mt_clninstr_struct_i->i_maker =0; 
          
         EXEC SQL UPDATE MT_CLN_INST_MAP SET
         CLN_INSTR_CODE =:p_mt_cln_instr_struct_h->h_cln_instr_code:l_mt_clninstr_struct_i->i_cln_instr_code,
         MAKER =:p_intl_envdatastruct_h->usr:l_maker,
         MAKER_DT =:chr_sys_time_stamp:l_makerdt,
         CHECKER_DT =:p_mt_cln_instr_struct_h->h_checker_dt:l_checkerdt,
         STATUS =:p_mt_cln_instr_struct_h->h_status:l_mt_clninstr_struct_i->i_status,
         ACCESS_STAMP =:chr_sys_time_stamp:l_access_stamp
         WHERE CLN_CODE =:p_mt_cln_instr_struct_h->h_cln_code
         AND    INSTR_CODE=:p_mt_cln_instr_struct_h->h_instr_code;
         IS_ANY_ORA_ERROR;
      }
    else
     {
         if (CO_InsertErr
                        (l_debug_info_ptr,
                         ERR_CLNTINSTMODIFY_NOTALLOWED,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         __LINE__,
                         __FILE__
                        ) != APL_SUCCESS)
                        APL_GOBACK_FAIL
                        APL_GOBACK_FAIL
     }
  }
      else
        {
         if (CO_InsertErr
                        (l_debug_info_ptr,
                         ERR_ACCESSSTAMP_CHGD,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         __LINE__,
                         __FILE__
                        ) != APL_SUCCESS)
                        APL_GOBACK_FAIL
                        APL_GOBACK_FAIL
           }
   }

if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_AUTHORISE))
        {
        APL_IF_DEBUG
         {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Authorize h_mode of Function MT_UpdCln_Instr\n",
                NULL,p_intl_envdatastruct_h);
         }
        memset(p_mt_cln_instr_struct_h->h_status, NULL, APL_STATUS_LEN);

        EXEC SQL SELECT ACCESS_STAMP, STATUS
         INTO   :chr_acc_stamp_compare:l_access_stamp_compare,
                :p_mt_cln_instr_struct_h->h_status:l_mt_clninstr_struct_i->i_status
                 FROM  MT_CLN_INST_MAP
          WHERE CLN_INSTR_CODE =:p_mt_cln_instr_struct_h->h_cln_instr_code
           AND CLN_CODE =:p_mt_cln_instr_struct_h->h_cln_code
         FOR UPDATE;
IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_RECORD_EXISTS,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
        IS_ANY_ORA_ERROR
        if (!strcmp(p_mt_cln_instr_struct_h->h_access_stamp,chr_acc_stamp_compare))
           {
        if(strcmp(p_mt_cln_instr_struct_h->h_status,STATUS_DEL_UAUTH))
            {
            strcpy(p_mt_cln_instr_struct_h->h_access_stamp,chr_sys_time_stamp);
            l_mt_clninstr_struct_i->i_access_stamp =0;
             strcpy(p_mt_cln_instr_struct_h->h_checker,p_intl_envdatastruct_h->usr);
            l_mt_clninstr_struct_i->i_checker=0;
            strcpy(p_mt_cln_instr_struct_h->h_checker_dt,chr_sys_time_stamp);
            l_mt_clninstr_struct_i->i_checker_dt=0;
            strcpy(p_mt_cln_instr_struct_h->h_status,STATUS_AUTH);
            l_mt_clninstr_struct_i->i_status =0;
       EXEC SQL UPDATE MT_CLN_INST_MAP SET
       CHECKER =:p_intl_envdatastruct_h->usr:l_checker,
       CHECKER_DT =:chr_sys_time_stamp:l_checkerdt,
       ACCESS_STAMP =:chr_sys_time_stamp:l_access_stamp,
       STATUS =:p_mt_cln_instr_struct_h->h_status:l_mt_clninstr_struct_i->i_status
          WHERE CLN_INSTR_CODE =:p_mt_cln_instr_struct_h->h_cln_instr_code
           AND CLN_CODE =:p_mt_cln_instr_struct_h->h_cln_code;
                IS_ANY_ORA_ERROR;
                }
            else
 {
            EXEC SQL DELETE MT_CLN_INST_MAP 
     WHERE CLN_INSTR_CODE =:p_mt_cln_instr_struct_h->h_cln_instr_code
          AND CLN_CODE =:p_mt_cln_instr_struct_h->h_cln_code;
            IS_ANY_ORA_ERROR
            }
           }
        else
           {
                if (CO_InsertErr
                        (l_debug_info_ptr,
                         ERR_ACCESSSTAMP_CHGD,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         __LINE__,
                         __FILE__
                        ) != APL_SUCCESS)
                        APL_GOBACK_FAIL
                        APL_GOBACK_FAIL
           }

  }

if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_DELETE))
        {
        l_checker =-1;
        l_checkerdt =-1;
       strcpy(p_mt_cln_instr_struct_h->h_checker,APL_NULL_STRING);
       strcpy(p_mt_cln_instr_struct_h->h_checker_dt,APL_NULL_STRING);
          APL_IF_DEBUG
           {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Delete h_mode of Function  MT_UpdCln_Instr\n",
                NULL,p_intl_envdatastruct_h);
              }
 EXEC SQL SELECT ACCESS_STAMP
                  INTO :chr_acc_stamp_compare:l_access_stamp_compare
                  FROM MT_CLN_INST_MAP
                      WHERE CLN_CODE =:p_mt_cln_instr_struct_h->h_cln_code
         AND    INSTR_CODE=:p_mt_cln_instr_struct_h->h_instr_code
                  FOR UPDATE ;
        IS_ANY_ORA_ERROR

        if (!strcmp(p_mt_cln_instr_struct_h->h_access_stamp,chr_acc_stamp_compare))
           {
        strcpy(p_mt_cln_instr_struct_h->h_access_stamp,chr_sys_time_stamp);
        l_mt_clninstr_struct_i->i_access_stamp =0;
        strcpy(p_mt_cln_instr_struct_h->h_status,STATUS_DEL_UAUTH);
        l_mt_clninstr_struct_i->i_status =0;
        EXEC SQL UPDATE MT_CLN_INST_MAP SET
                MAKER =:p_intl_envdatastruct_h->usr:l_maker,
         MAKER_DT =:chr_sys_time_stamp:l_makerdt,       
                CHECKER =:p_mt_cln_instr_struct_h->h_checker:l_checker,
                CHECKER_DT =:p_mt_cln_instr_struct_h->h_checker_dt:l_checkerdt,
                ACCESS_STAMP =:chr_sys_time_stamp:l_access_stamp,
                STATUS =:p_mt_cln_instr_struct_h->h_status:l_mt_clninstr_struct_i->i_status
                  WHERE CLN_CODE =:p_mt_cln_instr_struct_h->h_cln_code
         AND    INSTR_CODE=:p_mt_cln_instr_struct_h->h_instr_code;
        IS_ANY_ORA_ERROR
           }
        else
          {
                if (CO_InsertErr
                        (l_debug_info_ptr,
                         ERR_ACCESSSTAMP_CHGD,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         __LINE__,
                         __FILE__
                        ) != APL_SUCCESS)
                        APL_GOBACK_FAIL
                        APL_GOBACK_FAIL
   }
}
if (int_error_flag == APL_FAILURE)
        {
        APL_GOBACK_FAIL
        }

 if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_RESET))
        {
          APL_IF_DEBUG
          {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Reset h_mode of Function MT_UpdCln_Instr\n",
                NULL,p_intl_envdatastruct_h);
          }
        memset(p_mt_cln_instr_struct_h->h_status, NULL, APL_STATUS_LEN);

        EXEC SQL SELECT ACCESS_STAMP, STATUS
                 INTO   :chr_acc_stamp_compare:l_access_stamp_compare,
                        :p_mt_cln_instr_struct_h->h_status:l_mt_clninstr_struct_i->i_status
                 FROM MT_CLN_INST_MAP
                  WHERE CLN_INSTR_CODE =:p_mt_cln_instr_struct_h->h_cln_instr_code
						AND CLN_CODE =:p_mt_cln_instr_struct_h->h_cln_code
                  FOR UPDATE ;
IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_RECORD_EXISTS,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
        IS_ANY_ORA_ERROR

        if (!strcmp(p_mt_cln_instr_struct_h->h_access_stamp,chr_acc_stamp_compare))
           {
        if(!strcmp(p_mt_cln_instr_struct_h->h_status,STATUS_DEL_UAUTH))
            {
            strcpy(p_mt_cln_instr_struct_h->h_access_stamp,chr_sys_time_stamp);
            l_mt_clninstr_struct_i->i_access_stamp =0;
             strcpy(p_mt_cln_instr_struct_h->h_checker,p_intl_envdatastruct_h->usr);
            l_mt_clninstr_struct_i->i_checker=0;
            strcpy(p_mt_cln_instr_struct_h->h_checker_dt,chr_sys_time_stamp);
            l_mt_clninstr_struct_i->i_checker_dt=0;
            strcpy(p_mt_cln_instr_struct_h->h_status,STATUS_AUTH);
            l_mt_clninstr_struct_i->i_status =0;
          EXEC SQL UPDATE MT_CLN_INST_MAP SET
           CHECKER =:p_intl_envdatastruct_h->usr:l_checker,
           CHECKER_DT =:chr_sys_time_stamp:l_checkerdt,
           ACCESS_STAMP =:chr_sys_time_stamp:l_access_stamp,
                STATUS =:p_mt_cln_instr_struct_h->h_status:l_mt_clninstr_struct_i->i_status
                  WHERE CLN_INSTR_CODE =:p_mt_cln_instr_struct_h->h_cln_instr_code
					AND CLN_CODE =:p_mt_cln_instr_struct_h->h_cln_code;
                IS_ANY_ORA_ERROR;
                }
         else
{
                 if (CO_InsertErr
                        (l_debug_info_ptr,
                         ERR_CLNTINSTRESET_NOTALLOWED,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         __LINE__,
                         __FILE__
                        ) != APL_SUCCESS)
                        APL_GOBACK_FAIL
                        APL_GOBACK_FAIL
           }
}
        else
 {
                if (CO_InsertErr
                        (l_debug_info_ptr,
                         ERR_ACCESSSTAMP_CHGD,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         APL_NULL_STRING,
                         __LINE__,
                         __FILE__
                        ) != APL_SUCCESS)
                        APL_GOBACK_FAIL
                        APL_GOBACK_FAIL
           }
        }

 if (int_error_flag == APL_FAILURE)
        {
        APL_GOBACK_FAIL

        }
        APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
        {
          CO_ProcMonitor(APL_OUT_FILE, "Function MT_UpdCln_Instr successful\n",NULL,p_intl_envdatastruct_h);
        free(l_mt_clninstr_struct_i);
        return(APL_SUCCESS);
        }
   RETURN_FAILURE :
        {
        CO_ProcMonitor(APL_OUT_FILE, "Function MT_UpdCln_Instr failed\n",NULL,p_intl_envdatastruct_h);
        free(l_mt_clninstr_struct_i);
        return(APL_FAILURE);
   }

}
int MTUsrAuthClnInstrFn(char *p_cln_instr_code,char *p_cln_code,char *p_user,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
  struct sqlca sqlca;
  char maker[15];
  short l_maker = 0;
  int int_error_flag = APL_SUCCESS;

#ifdef APL_THREADS
    APL_SET_CONTEXT
    EXEC SQL CONTEXT USE :my_ctx_local;
#endif

APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Function MTUsrAuthCompanyFn\n",
                NULL,NULL);
 }

  if (!strlen(p_cln_instr_code))
        {
        APL_DATA_MISSING("Client instrument Code",APL_NULL_STRING,APL_NULL_STRING);
        int_error_flag = APL_FAILURE;
        }
  if (!strlen(p_cln_code))
        {
        APL_DATA_MISSING("Client Code",APL_NULL_STRING,APL_NULL_STRING);
        int_error_flag = APL_FAILURE;
        }

  if (!strlen(p_user))
        {
        APL_DATA_MISSING("User",APL_NULL_STRING,APL_NULL_STRING);
        int_error_flag = APL_FAILURE;
        }

  if (int_error_flag == APL_FAILURE)
        {
        APL_GOBACK_FAIL
        }
  EXEC SQL VAR maker IS STRING(15);
 EXEC SQL SELECT MAKER
                INTO :maker:l_maker
                FROM MT_CLN_INST_MAP
                WHERE CLN_INSTR_CODE =:p_cln_instr_code
                 AND CLN_CODE =:p_cln_code;

        IS_ANY_ORA_ERROR
printf("\n the user is |%s|\n",p_user);
printf("\n the maker is |%s|\n",maker);
  if (strcmp(p_user,maker)==0)
 {
         if (CO_InsertErr
                        (l_debug_info_ptr,
                        ERR_MAKER_CHECKER_SAME,
                        APL_NULL_STRING,
                        APL_NULL_STRING,
                        APL_NULL_STRING,
                        __LINE__,
                         __FILE__
                        ) == APL_SUCCESS)
        APL_GOBACK_FAIL
        int_error_flag = APL_FAILURE;
        }

  if (int_error_flag == APL_FAILURE)
        {
        APL_GOBACK_FAIL
        }

  APL_GOBACK_SUCCESS
 RETURN_SUCCESS :
        {

APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "MTUsrAuthClnInstrFn Successful\n",
                NULL,NULL);
 }
        return(APL_SUCCESS);
        }
RETURN_FAILURE :
        {

APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "MTUsrAuthClnInstrFn unsuccessful\n",
                NULL,NULL);
 }

        return(APL_FAILURE);
        }

}



int Cr_Chk_ValatClninstr(MT_CLN_INSTR_STRUCT_H *p_mt_cln_instr_struct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
        struct sqlca sqlca;
        char chr_p_Instatus[3];
        char chr_p_Clstatus[3];
        short l_Istatus;
        short l_CStatus;
       int      l_instr_count = 0;
#ifdef APL_THREADS
        APL_SET_CONTEXT
                EXEC SQL CONTEXT USE :my_ctx_local;
#endif

        APL_IF_DEBUG
        {
                CO_ProcMonitor(APL_OUT_FILE, "Entered Function Cr_Chk_ValatClninstr \n",
                                NULL,NULL);
        }
        memset(chr_p_Instatus,NULL,3);
        memset(chr_p_Clstatus,NULL,3);

EXEC SQL SELECT STATUS into :chr_p_Instatus:l_Istatus
                FROM MT_INSTRUMENT
                WHERE INSTR_CODE =:p_mt_cln_instr_struct_h->h_instr_code;
     IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

        if (!strcmp(chr_p_Instatus,STATUS_UAUTH))
        {
                APL_GOBACK_FAIL
        }

        EXEC SQL SELECT STATUS into :chr_p_Clstatus:l_CStatus
                FROM MT_CLIENT
                WHERE CLN_CODE =:p_mt_cln_instr_struct_h->h_cln_code;
     IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
        if (!strcmp(chr_p_Clstatus,STATUS_UAUTH))
        {
                APL_GOBACK_FAIL
        }

if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
            {
            APL_GOBACK_FAIL
            }
else
APL_GOBACK_SUCCESS
RETURN_SUCCESS :
               {
          APL_IF_DEBUG
                {
                 CO_ProcMonitor(APL_OUT_FILE, "Function Cr_Chk_ValatClninstr is successful\n",
                                        NULL,NULL);
                }
                return(APL_SUCCESS);
                }
RETURN_FAILURE :
                  {
                APL_IF_DEBUG
                {
                CO_ProcMonitor(APL_OUT_FILE, " Function Cr_Chk_ValatClninstr is failed\n",
                                        NULL,NULL);
                }
               return(APL_FAILURE); 
                  }
}



int CRChkClnInstr(MT_CLN_INSTR_STRUCT_H *p_mt_cln_instr_struct_h,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
      struct sqlca   sqlca;
      int      l_instr_count = 0;
      APL_IF_DEBUG
      {
         CO_ProcMonitor(APL_OUT_FILE,"Entered Processation CRChkClnInstr \n",NULL,NULL);
      }

      sqlca.sqlcode = 0;
         EXEC SQL SELECT NVL(COUNT(*),0) INTO :l_instr_count
                  FROM   MT_CLN_INST_MAP
                  WHERE    INSTR_CODE     =:p_mt_cln_instr_struct_h->h_instr_code
                  AND      CLN_CODE =:p_mt_cln_instr_struct_h->h_cln_code;
          if (l_instr_count == 0)
           {
                if(CO_InsertErr(
                        l_debug_info_ptr,
                        ERR_CLIENTINSTRUMENT_NOTFND,
                       APL_NULL_STRING,
                        APL_NULL_STRING,
                       APL_NULL_STRING,
                        __LINE__,
                        __FILE__
                        )!= APL_SUCCESS)
 APL_GOBACK_FAIL
 APL_GOBACK_FAIL
           }
if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
            {
            APL_GOBACK_FAIL
            }
else
APL_GOBACK_SUCCESS
      RETURN_SUCCESS :
      {
      APL_IF_DEBUG
    CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CRChkClnInstr with Success\n",NULL,p_intl_envdatastruct_h);
      return(APL_SUCCESS);
      }

      RETURN_FAILURE :
      {
      APL_IF_DEBUG
  CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CRChkClnInstr with Failure\n",NULL,p_intl_envdatastruct_h);
    return(APL_FAILURE);// Added for AIX Migration changes
      }
}	


