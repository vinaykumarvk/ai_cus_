




#include "stdio_64.h"
#include <string.h>
#include <stdlib.h>
#include "Intellect_Common.h"
#include "IV_Control_A.h"

EXEC SQL INCLUDE SQLCA;



int IV_Mod_IVPymt_Mkr_Ckr(const IV_CHEQUE_STRUCT *p_iv_cheque_struct_a, 
			   const INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h, 
			   int *int_p_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	extern int CO_RtvSysDtTime(char *chr_l_sys_date_time, 
				        DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	

	char chr_l_buffer1[BUFFER_LEN];
	char chr_l_usermode, *chr_l_last = (char *)NULL;
	char chr_l_sys_date[APL_DATE_LEN], chr_l_sys_date_time[APL_DATE_LEN];

	EXEC SQL BEGIN DECLARE SECTION;

		struct {
			 int pay_seq;
			 char status_pymt;
			 char maker[APL_USERID_LEN];
			 char maker_dt[APL_DATE_LEN];
			 char checker[APL_USERID_LEN];
			 char checker_dt[APL_DATE_LEN];
			 char access_stamp[APL_DATE_LEN];
		       } h_bpayment_mkr_chkr;

		EXEC SQL VAR h_bpayment_mkr_chkr.maker IS STRING;
		EXEC SQL VAR h_bpayment_mkr_chkr.maker_dt IS STRING;
		EXEC SQL VAR h_bpayment_mkr_chkr.checker IS STRING;
		EXEC SQL VAR h_bpayment_mkr_chkr.checker_dt IS STRING;
		EXEC SQL VAR h_bpayment_mkr_chkr.access_stamp IS STRING;

		struct {
			 short int i_aut_sequencenum;
			 short int i_pymt_status;
			 short int i_maker;
			 short int i_maker_dt;
			 short int i_checker;
			 short int i_checker_dt;
			 short int i_access_stamp;
		       } i_bpayment_mkr_chkr = {0, 0, 0, 0, 0, 0, 0};

		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS 
		APL_SET_CONTEXT 
		EXEC SQL CONTEXT USE :my_ctx_local; 
	#endif 

	if ( !strlen(p_iv_cheque_struct_a->client) ) 
	{
		APL_DATA_MISSING("Account", APL_NULL_STRING, APL_NULL_STRING)
	}

	if ( !strlen(p_iv_cheque_struct_a->dateof_payment) )
	{
		APL_DATA_MISSING("Payment Date", APL_NULL_STRING, 
				 APL_NULL_STRING)
	}

	memset(chr_l_buffer1, APL_NULL_CHAR, BUFFER_LEN);
	sprintf(chr_l_buffer1, "%d", p_iv_cheque_struct_a->inden_num);

	if ( !strlen(chr_l_buffer1) )
	{
		APL_DATA_MISSING("Sequence Number", APL_NULL_STRING, 
				 APL_NULL_STRING)
	}
	
	if ( !strlen(p_intl_envdatastruct_h->usr) )
	{
		APL_DATA_MISSING("User ID", APL_NULL_STRING, APL_NULL_STRING) 
	}

	if ( !strlen(p_intl_envdatastruct_h->h_mode) )
	{
		APL_DATA_MISSING("Mode", APL_NULL_STRING, APL_NULL_STRING) 
	}

	if ( !strlen(p_iv_cheque_struct_a->access_stamp) )
	{
		APL_DATA_MISSING("Access Stamp", APL_NULL_STRING, 
				 APL_NULL_STRING)
	}
	
	if ( APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr) )
	{
		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		APL_GOBACK_FAIL
	}

	h_bpayment_mkr_chkr.status_pymt = NULL;
	h_bpayment_mkr_chkr.pay_seq = 0;

	memset(h_bpayment_mkr_chkr.maker, APL_NULL_CHAR, APL_USERID_LEN);
	memset(h_bpayment_mkr_chkr.maker_dt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(h_bpayment_mkr_chkr.checker, APL_NULL_CHAR, APL_USERID_LEN);
	memset(h_bpayment_mkr_chkr.checker_dt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(h_bpayment_mkr_chkr.access_stamp, APL_NULL_CHAR, APL_DATE_LEN);

	if ( !strcmp(p_intl_envdatastruct_h->h_mode, APL_FUNC_INPUT) )
	{
		chr_l_usermode = 'I'; 
	}
	else if ( !strcmp(p_intl_envdatastruct_h->h_mode, APL_FUNC_MODIFY) )
	{
		chr_l_usermode = 'M';
	}
	else if ( !strcmp(p_intl_envdatastruct_h->h_mode, APL_FUNC_DELETE) )
	{
		chr_l_usermode = 'D';
	}
	else if ( !strcmp(p_intl_envdatastruct_h->h_mode, APL_FUNC_AUTHORISE) )
	{
		chr_l_usermode = 'A';
	}

	memset(chr_l_sys_date, APL_NULL_CHAR, APL_DATE_LEN);
	memset(chr_l_sys_date_time, APL_NULL_CHAR, APL_DATE_LEN);

	if (APL_FAILURE == CO_RtvSysDtTime(chr_l_sys_date_time, l_debug_info_ptr))
	{
		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		APL_GOBACK_FAIL	
	}

	strcpy(chr_l_sys_date, chr_l_sys_date_time);
	strcpy(chr_l_sys_date, strtok_r(chr_l_sys_date, " ", &chr_l_last));
	strcat(chr_l_sys_date, APL_NULL_TIME);

	if ( chr_l_usermode != 'A' )
	{
		strcpy(h_bpayment_mkr_chkr.maker, p_intl_envdatastruct_h->usr);
		strcpy(h_bpayment_mkr_chkr.maker_dt, chr_l_sys_date);
		strcpy(h_bpayment_mkr_chkr.access_stamp, chr_l_sys_date_time);

		if ( chr_l_usermode == 'D' )
		{
			h_bpayment_mkr_chkr.status_pymt = 'D';
		}
		else
		{
			h_bpayment_mkr_chkr.status_pymt = 'U';
		}

		EXEC SQL UPDATE IV_CHEQUE
			 SET MAKER = :h_bpayment_mkr_chkr.maker 
				      INDICATOR :i_bpayment_mkr_chkr.i_maker, 
			     MAKER_DT = :h_bpayment_mkr_chkr.maker_dt 
				       INDICATOR :i_bpayment_mkr_chkr.i_maker_dt,
			     ACCESS_STAMP = :h_bpayment_mkr_chkr.access_stamp 
					     INDICATOR 
					    :i_bpayment_mkr_chkr.i_access_stamp,
			     STATUS = :h_bpayment_mkr_chkr.status_pymt 
					   INDICATOR 
					  :i_bpayment_mkr_chkr.i_pymt_status
		 WHERE ((DATEOF_PAYMENT = :p_iv_cheque_struct_a->dateof_payment) AND
			(CLIENT = :p_iv_cheque_struct_a->client) AND
			(INDEN_NUM = :p_iv_cheque_struct_a->inden_num) AND
			(ACCESS_STAMP = :p_iv_cheque_struct_a->access_stamp)); 
	}
	else 
	{
		strcpy(h_bpayment_mkr_chkr.checker, p_intl_envdatastruct_h->usr);
		strcpy(h_bpayment_mkr_chkr.checker_dt, chr_l_sys_date);
		strcpy(h_bpayment_mkr_chkr.access_stamp, chr_l_sys_date_time);

		h_bpayment_mkr_chkr.status_pymt = 'A';

		EXEC SQL UPDATE IV_CHEQUE
			 SET CHECKER = :h_bpayment_mkr_chkr.checker 
				       INDICATOR :i_bpayment_mkr_chkr.i_checker,
			     CHECKER_DT = :h_bpayment_mkr_chkr.checker_dt 
					  INDICATOR 
					 :i_bpayment_mkr_chkr.i_checker_dt,
			     ACCESS_STAMP = :h_bpayment_mkr_chkr.access_stamp 
					     INDICATOR 
					    :i_bpayment_mkr_chkr.i_access_stamp,
			     STATUS = :h_bpayment_mkr_chkr.status_pymt 
					   INDICATOR 
					  :i_bpayment_mkr_chkr.i_pymt_status
			 WHERE ((DATEOF_PAYMENT = :p_iv_cheque_struct_a->dateof_payment) AND
				(CLIENT = :p_iv_cheque_struct_a->client) AND
				(INDEN_NUM = :p_iv_cheque_struct_a->inden_num) AND
				(ACCESS_STAMP = :p_iv_cheque_struct_a->access_stamp)); 

	} 

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}
	else if ( sqlca.sqlcode == 1403 )
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		APL_GOBACK_FAIL
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Mod_IVPymt_Mkr_Ckr().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
IV_Mod_IVPymt_Mkr_Ckr().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_Mod_IVPymtSeqNum(const IV_CHEQUE_STRUCT *p_iv_cheque_struct_a, 
			     int *int_p_retstat, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	EXEC SQL BEGIN DECLARE SECTION;

		short int int_i_aut_seqnum = 0;
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	EXEC SQL UPDATE IV_CHEQUE
		 SET PAY_SEQ = :p_iv_cheque_struct_a->pay_seq 
				   INDICATOR :int_i_aut_seqnum
		 WHERE ((DATEOF_PAYMENT = :p_iv_cheque_struct_a->dateof_payment) AND
			(CLIENT = :p_iv_cheque_struct_a->client) AND
			(INDEN_NUM = :p_iv_cheque_struct_a->inden_num) AND
			(ACCESS_STAMP = :p_iv_cheque_struct_a->access_stamp));

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}
	else if ( sqlca.sqlcode == 1403 )
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		APL_GOBACK_FAIL
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Mod_IVPymtSeqNum().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
BBDbBPAYMENTAutSeqNum().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}
