



















#include "CO_HostStructdef.h"

#define  FILE_NAME_LEN 13

EXEC SQL INCLUDE SQLCA.H;

char  chr_p_log_buff[MSG_LENGTH];

int DL_Proc_InstrCodeLock (DL_INSTRUMENTCHG_STRUCT2_H *l_dl_instrumentchg_struct2_ha,
						FILE *p_logfile,
						INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

  struct sqlca sqlca;

	char chr_l_chgisin[13];
	char chr_l_listedflg[APL_FLAG_LENGTH];
	char chr_l_chgmaker[APL_USERID_LEN];
	char chr_l_chginstrcode[APL_INSTRUMENTCODE_LEN];

	short p_i_chgcode =0;
	short p_i_chgisin =0;
	short p_i_listedflg =0;
	short p_i_chgmaker =0; 

  CO_ProcMonitor(p_logfile, "Entered Function DL_Proc_InstrCodeLock\n",
		NULL,p_intl_envdatastruct_h);

  if (!strlen(l_dl_instrumentchg_struct2_ha->h_oldinstr_code)) 
			APL_DATA_MISSING("Old Instrode","Table Lock & Check","CDBInstrTblLckFn");

   if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
      {
      APL_GOBACK_FAIL
      }

	

	memset(chr_l_chgmaker,APL_NULL_CHAR,APL_USERID_LEN);
	memset(chr_l_chginstrcode,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);

	EXEC SQL SELECT CHNG_CD, CHNG_ISIN, CHNG_LST_IND, CHG_MKR
			INTO :chr_l_chginstrcode:p_i_chgcode,
			:chr_l_chgisin:p_i_chgisin,
			:chr_l_listedflg:p_i_listedflg,
			:chr_l_chgmaker:p_i_chgmaker
		FROM MT_INSTRUMENT WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code
				FOR UPDATE OF CHNG_CD;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_INSTR_NOTFND,
										l_dl_instrumentchg_struct2_ha->h_oldinstr_code,
										"Old Instrode",
										ltoa(sqlca.sqlcode));

	strcpy(l_dl_instrumentchg_struct2_ha->h_newinstr_code,chr_l_chginstrcode);
	strcpy(l_dl_instrumentchg_struct2_ha->h_newinstr_isincode,chr_l_chgisin);
	strcpy(l_dl_instrumentchg_struct2_ha->h_listed_ind,chr_l_listedflg);

   if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
      {
      APL_GOBACK_FAIL
      }

	if (!strlen(l_dl_instrumentchg_struct2_ha->h_oldinstr_code))
    {
      if (CO_InsertErr
         (l_debug_info_ptr,
          ERR_INSTR_NOTUNDERCHG,
          
          l_dl_instrumentchg_struct2_ha->h_oldinstr_code,
          APL_NULL_STRING,
          APL_NULL_STRING,
          __LINE__,
          __FILE__
         ) != APL_SUCCESS)
         APL_GOBACK_FAIL
      }

	if (!strlen(l_dl_instrumentchg_struct2_ha->h_newinstr_code))
    {
      if (CO_InsertErr
         (l_debug_info_ptr,
          ERR_INSTR_NOTUNDERCHG,
          
          "Change To Instrode",
          "Missing in table",
          "Please Requery",
          __LINE__,
          __FILE__
         ) != APL_SUCCESS)
         APL_GOBACK_FAIL
      }

	if (!strlen(l_dl_instrumentchg_struct2_ha->h_newinstr_isincode))
    {
      if (CO_InsertErr
         (l_debug_info_ptr,
          ERR_INSTR_NOTUNDERCHG,
          
          "New ISIN code",
          "Missing in table",
          "Please Requery",
          __LINE__,
          __FILE__
         ) != APL_SUCCESS)
         APL_GOBACK_FAIL
      }


	if (!strlen(l_dl_instrumentchg_struct2_ha->h_listed_ind))
    {
      if (CO_InsertErr
         (l_debug_info_ptr,
          ERR_INSTR_NOTUNDERCHG,
          
          "New Listed Flag",
          "Missing in table",
          "Please Requery",
          __LINE__,
          __FILE__
         ) != APL_SUCCESS)
         APL_GOBACK_FAIL
      }

	if (!strlen(chr_l_chgmaker))
    {
      if (CO_InsertErr
         (l_debug_info_ptr,
          ERR_INSTR_NOTUNDERCHG,
          
          "New Maker",
          "Missing in table",
          "Please Requery",
          __LINE__,
          __FILE__
         ) != APL_SUCCESS)
         APL_GOBACK_FAIL
      }

   if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
      {
      APL_GOBACK_FAIL
      }

   if (APL_FAILURE ==CO_Chk_InstrValid(l_dl_instrumentchg_struct2_ha->h_oldinstr_code,
                                 'Y','Y',
                                 APL_NULL_STRING,
                                 APL_NULL_STRING,
                                 APL_NULL_STRING,
                                 APL_NULL_STRING,
                                 l_debug_info_ptr))
        {
        APL_GOBACK_FAIL
        }

   if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
      {
      APL_GOBACK_FAIL
      }

   if (APL_FAILURE ==CO_Chk_InstrValid(l_dl_instrumentchg_struct2_ha->h_newinstr_code,
                                 'N',
                                 APL_NULL_STRING,
                                 APL_NULL_STRING,
                                 APL_NULL_STRING,
                                 APL_NULL_STRING,
                                 APL_NULL_STRING,
                                 l_debug_info_ptr))
        {
        APL_GOBACK_FAIL
        }

   if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
      {
      APL_GOBACK_FAIL
      }

  if(!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_AUTHORISE))
   {
   if ( APL_FAILURE == CR_Proc_InstrChngMkrChr(l_dl_instrumentchg_struct2_ha->h_oldinstr_code,
                          p_intl_envdatastruct_h->usr,
                          l_debug_info_ptr))
      {
      APL_GOBACK_FAIL;
      }
   }

   if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
      {
      APL_GOBACK_FAIL
      }


		

		EXEC SQL LOCK TABLE
				CAEVENT		
					IN EXCLUSIVE MODE NOWAIT;

		IS_ANY_ORA_ERROR

  		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			{
			APL_GOBACK_FAIL
			}

		

		EXEC SQL LOCK TABLE
			   MT_INSTRUMENT
					IN EXCLUSIVE MODE NOWAIT;

		IS_ANY_ORA_ERROR

  		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			{
			APL_GOBACK_FAIL
			}

		

		EXEC SQL LOCK TABLE
			   CAEVENTMG	
					IN EXCLUSIVE MODE NOWAIT;

		IS_ANY_ORA_ERROR

  		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			{
			APL_GOBACK_FAIL
			}

		

		EXEC SQL LOCK TABLE
				CARTSPROC 
					IN EXCLUSIVE MODE NOWAIT;

		IS_ANY_ORA_ERROR

  		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			{
			APL_GOBACK_FAIL
			}

		

		EXEC SQL LOCK TABLE
				CALOGAUTOEVENT
					IN EXCLUSIVE MODE NOWAIT;

		IS_ANY_ORA_ERROR

  		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			{
			APL_GOBACK_FAIL
			}

		

		EXEC SQL LOCK TABLE
			   MT_DLYMKTPRC	
					IN EXCLUSIVE MODE NOWAIT;

		IS_ANY_ORA_ERROR

  		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			{
			APL_GOBACK_FAIL
			}

		

		EXEC SQL LOCK TABLE
				MT_HISDLYMKTPRC			
					IN EXCLUSIVE MODE NOWAIT;

		IS_ANY_ORA_ERROR

  		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			{
			APL_GOBACK_FAIL
			}

		

		EXEC SQL LOCK TABLE
				OR_HISORDER			
					IN EXCLUSIVE MODE NOWAIT;

		IS_ANY_ORA_ERROR

  		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			{
			APL_GOBACK_FAIL
			}

		

		EXEC SQL LOCK TABLE
				DL_HISSAFEK			
					IN EXCLUSIVE MODE NOWAIT;

		IS_ANY_ORA_ERROR

  		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			{
			APL_GOBACK_FAIL
			}

		

		EXEC SQL LOCK TABLE
				DL_HISDEAL			
					IN EXCLUSIVE MODE NOWAIT;

		IS_ANY_ORA_ERROR

  		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			{
			APL_GOBACK_FAIL
			}

		

		EXEC SQL LOCK TABLE
				DL_LOCNCHG
					IN EXCLUSIVE MODE NOWAIT;

		IS_ANY_ORA_ERROR

  		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			{
			APL_GOBACK_FAIL
			}

		

		EXEC SQL LOCK TABLE
				DL_LOCALREPSAFEK
					IN EXCLUSIVE MODE NOWAIT;

		IS_ANY_ORA_ERROR

  		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			{
			APL_GOBACK_FAIL
			}

		

		EXEC SQL LOCK TABLE
				DL_MISDEAL
					IN EXCLUSIVE MODE NOWAIT;

		IS_ANY_ORA_ERROR

  		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			{
			APL_GOBACK_FAIL
			}

		

		EXEC SQL LOCK TABLE
				MT_MTHLYMKTPRC			
					IN EXCLUSIVE MODE NOWAIT;

		IS_ANY_ORA_ERROR

  		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			{
			APL_GOBACK_FAIL
			}

		

		EXEC SQL LOCK TABLE
				OR_ORDERDETAILS			
					IN EXCLUSIVE MODE NOWAIT;

		IS_ANY_ORA_ERROR

  		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			{
			APL_GOBACK_FAIL
			}

		

		EXEC SQL LOCK TABLE
				DL_SAFEK			
					IN EXCLUSIVE MODE NOWAIT;

		IS_ANY_ORA_ERROR

  		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			{
			APL_GOBACK_FAIL
			}

		

		EXEC SQL LOCK TABLE
				DL_DEAL			
					IN EXCLUSIVE MODE NOWAIT;

		IS_ANY_ORA_ERROR

  		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			{
			APL_GOBACK_FAIL
			}

		

		EXEC SQL LOCK TABLE
				DL_DEALREPAIR			
					IN EXCLUSIVE MODE NOWAIT;

		IS_ANY_ORA_ERROR

  		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			{
			APL_GOBACK_FAIL
			}

		

		EXEC SQL LOCK TABLE
				DL_DEALCLIENTIMG			
					IN EXCLUSIVE MODE NOWAIT;

		IS_ANY_ORA_ERROR

  		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			{
			APL_GOBACK_FAIL
			}

		

		EXEC SQL LOCK TABLE
				IV_CLIENTHOLDING		
					IN EXCLUSIVE MODE NOWAIT;

		IS_ANY_ORA_ERROR

  		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			{
			APL_GOBACK_FAIL
			}

      

      EXEC SQL LOCK TABLE
            DL_DEALRST
               IN EXCLUSIVE MODE NOWAIT;

      IS_ANY_ORA_ERROR

      if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         {
         APL_GOBACK_FAIL
         }

      

      EXEC SQL LOCK TABLE
            MT_TEMPMKTPRC
               IN EXCLUSIVE MODE NOWAIT;

      IS_ANY_ORA_ERROR

      if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         {
         APL_GOBACK_FAIL
         }

      

      EXEC SQL LOCK TABLE
            DL_INSTRUMENTCONV_TEMP
               IN EXCLUSIVE MODE NOWAIT;

      IS_ANY_ORA_ERROR

      if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         {
         APL_GOBACK_FAIL
         }


      EXEC SQL LOCK TABLE
            DL_INSTRUMENTCONV_REP_TEMP
               IN EXCLUSIVE MODE NOWAIT;

      IS_ANY_ORA_ERROR

      if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         {
         APL_GOBACK_FAIL
         }

      EXEC SQL LOCK TABLE
            PRO_EURO_TEMP
               IN EXCLUSIVE MODE NOWAIT;

      IS_ANY_ORA_ERROR

      if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         {
         APL_GOBACK_FAIL
         }

      EXEC SQL LOCK TABLE
            DL_RUINSTRUMENT
               IN EXCLUSIVE MODE NOWAIT;

      IS_ANY_ORA_ERROR

      if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         {
         APL_GOBACK_FAIL
         }


      EXEC SQL LOCK TABLE
            DL_RUHISSAFEK
               IN EXCLUSIVE MODE NOWAIT;

      IS_ANY_ORA_ERROR

      if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         {
         APL_GOBACK_FAIL
         }

      EXEC SQL LOCK TABLE
            DL_RUDEAL
               IN EXCLUSIVE MODE NOWAIT;

      IS_ANY_ORA_ERROR

      if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         {
         APL_GOBACK_FAIL
         }

      EXEC SQL LOCK TABLE
            DL_RUSAFEK
               IN EXCLUSIVE MODE NOWAIT;

      IS_ANY_ORA_ERROR

      if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         {
         APL_GOBACK_FAIL
         }

      EXEC SQL LOCK TABLE
            DL_RUHISDEAL
               IN EXCLUSIVE MODE NOWAIT;

      IS_ANY_ORA_ERROR

      if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         {
         APL_GOBACK_FAIL
         }


      EXEC SQL LOCK TABLE
            DL_SMI_PENDTXN
               IN EXCLUSIVE MODE NOWAIT;

      IS_ANY_ORA_ERROR

      if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         {
         APL_GOBACK_FAIL
         }


      EXEC SQL LOCK TABLE
            DL_AUTOSETTHUWRK
               IN EXCLUSIVE MODE NOWAIT;

      IS_ANY_ORA_ERROR

      if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         {
         APL_GOBACK_FAIL
         }


      EXEC SQL LOCK TABLE
            DL_SMI_TMP_TRADE
               IN EXCLUSIVE MODE NOWAIT;

      IS_ANY_ORA_ERROR

      if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         {
         APL_GOBACK_FAIL
         }


      EXEC SQL LOCK TABLE
            DL_LOCALREPSAFEKMA
               IN EXCLUSIVE MODE NOWAIT;

      IS_ANY_ORA_ERROR

      if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         {
         APL_GOBACK_FAIL
         }

      EXEC SQL LOCK TABLE
             DL_WEEKTXNBAL
               IN EXCLUSIVE MODE NOWAIT;

      IS_ANY_ORA_ERROR

      if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
         {
         APL_GOBACK_FAIL
         }

		EXEC SQL LOCK TABLE
				DL_COPYHISTORY			
					IN EXCLUSIVE MODE NOWAIT;

		IS_ANY_ORA_ERROR

  		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			{
			APL_GOBACK_FAIL
			}


  APL_GOBACK_SUCCESS

  RETURN_SUCCESS :
	{
   CO_ProcMonitor(p_logfile, "Leaving Function DL_Proc_InstrCodeLock Successfully\n",
		l_debug_info_ptr,p_intl_envdatastruct_h);

	return(APL_SUCCESS);
	}
  RETURN_FAILURE :
	{
   CO_ProcMonitor(p_logfile, "Leaving Function DL_Proc_InstrCodeLock Unsuccessfully\n",
		l_debug_info_ptr,p_intl_envdatastruct_h);

	return(APL_FAILURE);
	}

}


int DL_Mod_InstrCode (DL_INSTRUMENTCHG_STRUCT2_H *l_dl_instrumentchg_struct2_ha,
						FILE *p_logfile,
						INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

  struct sqlca sqlca;

  MT_INSTRUMENT_STRUCT_H *l_mt_instrument_struct_ha_a;	
  MT_INSTRUMENT_STRUCT_I *l_mt_instrument_struct_ia;	
  DL_DEALAUDIT_STRUCT_H *l_dl_dealaudit_struct_hc;	
   MT_RUSRN_STRUCT_H l_mt_rusrn_struct_h;
   MT_RUSRN_STRUCT_I l_mt_rusrn_struct_i;
	char chr_l_oldinstrcode[APL_INSTRUMENTCODE_LEN] = {NULL};
	char chr_l_minstrcode[APL_INSTRUMENTCODE_LEN] ={NULL};
	char chr_l_mmaker[APL_USERID_LEN] ={NULL};
	char chr_l_mchecker[APL_USERID_LEN] ={NULL};
	char chr_l_mdate[APL_DATE_LEN] ={NULL};

  short p_i_chgcode		 =0;
  short p_i_chginstr_code	 =0;
  short p_i_chgoldcode	 =0;
  short p_i_refno			 =0;
  short p_i_qty			 =0;
  short p_i_chgisincode  =0;
  short p_i_listedflg	 =0;
  short p_i_userid		 =0;
  short p_i_access_stamp =0;
  short p_i_account		 =0;
  short p_i_failcode		 =0;
  short p_i_trdfromord	 =0;

	short p_i_subfailcode	 =0;

  int int_p_count 		=0;
  int int_p_reccount 	=0; 
  int int_p_isincount	=0; 

  l_mt_instrument_struct_ha_a   = (MT_INSTRUMENT_STRUCT_H *)calloc(1,sizeof(MT_INSTRUMENT_STRUCT_H ));
  APL_MALLOC_FAIL(l_mt_instrument_struct_ha_a);
  l_mt_instrument_struct_ia = (MT_INSTRUMENT_STRUCT_I *)calloc(1,sizeof(MT_INSTRUMENT_STRUCT_I ));
  APL_MALLOC_FAIL(l_mt_instrument_struct_ia);
  l_dl_dealaudit_struct_hc				= (DL_DEALAUDIT_STRUCT_H *)calloc(1,sizeof(DL_DEALAUDIT_STRUCT_H ));
  APL_MALLOC_FAIL(l_dl_dealaudit_struct_hc);

  

  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_instr_code 					IS STRING;

		/* changes by bageshri for 10G migration */
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_currency_cd 					IS STRING;
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_location_cd 				IS STRING;
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_reg_br_ind				IS STRING;
		
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_allow_rf 					IS STRING;
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_allow_rvp 					IS STRING;
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_allow_df 					IS STRING;
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_allow_dvp 					IS STRING;
		
  		/* changes by bageshri for 10G migration */
		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_ord_type 				IS STRING;
		
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_mother_sec_ind 				IS STRING;
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_ex_arena 					IS STRING;
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_listed_ind 				IS STRING;
		
  		/* changes by bageshri for 10G migration */
		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_dateof_input	 				IS STRING;
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_new_maker 				IS STRING;
		
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_maker 					IS STRING;
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_maker_dt 					IS STRING;
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_access_stamp 			IS STRING;
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_checker 					IS STRING;
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_checker_dt 				IS STRING;
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_status 				IS STRING;
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_new_issue 				IS STRING;
		
  		/* changes by bageshri for 10G migration */
		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_new_checker 				IS STRING;
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_chng_lst_ind 			IS STRING;
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_cert_of_own_in 			IS STRING;
		
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_instr_name 					IS STRING;
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_instr_isin 						IS STRING;
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_tipo_inv 					IS STRING;
		
  		/* changes by bageshri for 10G migration */
		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_instr_type 					IS STRING;
  		
		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_instr_parent 				IS STRING;
		/* commented by bageshri for 10G migration */
		/*
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_prodateype 				IS STRING;
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_instrdealcd 				IS STRING;
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_cmp_code 					IS STRING;
  		*/
		
		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_classcd 					IS STRING;
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_new_cd 					IS STRING;
		
  		/* changes by bageshri for 10G migration */
		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_chng_isin 					IS STRING;
  		
		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_issue_date					IS STRING;
  		
		/* changes by bageshri for 10G migration */
		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_chg_mkr 				IS STRING;
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_ca_name 				IS STRING;
		
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_chng_cd 					IS STRING;
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_mature_dt 				IS STRING;
  		
		/* changes by bageshri for 10G migration */
		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_int_typ 					IS STRING;
		
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_freq_code 					IS STRING;
  		
		/* changes by bageshri for 10G migration */
		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_int_acctyp 				IS STRING;
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_last_pymt_date 				IS STRING;
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_next_pay_date 				IS STRING;
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_old_lst_paydt 				IS STRING;
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_mod_last_paydt 				IS STRING;
		
  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_taxonmat_ind 			IS STRING;
  		
		/* changes by bageshri for 10G migration */
		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_disct_ind 			IS STRING;

  		EXEC SQL VAR l_mt_instrument_struct_ha_a->h_ca_addrdet 				IS STRING;

  		EXEC SQL VAR chr_l_oldinstrcode	IS STRING;

	   EXEC SQL VAR l_mt_rusrn_struct_h.h_stat_reg_no IS STRING;
      EXEC SQL VAR l_mt_rusrn_struct_h.h_instr_code IS STRING;
      EXEC SQL VAR l_mt_rusrn_struct_h.h_instr_name IS STRING;
      EXEC SQL VAR l_mt_rusrn_struct_h.h_identiy_num IS STRING ;
      EXEC SQL VAR l_mt_rusrn_struct_h.h_maker IS STRING;
      EXEC SQL VAR l_mt_rusrn_struct_h.h_checker IS STRING;
      EXEC SQL VAR l_mt_rusrn_struct_h.h_checker_dt IS STRING;
      EXEC SQL VAR l_mt_rusrn_struct_h.h_access_stamp IS STRING;
      EXEC SQL VAR l_mt_rusrn_struct_h.h_newdt IS STRING;
      EXEC SQL VAR l_mt_rusrn_struct_h.h_srnstatus_ind IS STRING;	
  

   l_mt_instrument_struct_ia->i_instr_code = 0;

	/* changes by bageshri for 10G migration */
   l_mt_instrument_struct_ia->i_currency_cd = 0;
	
   l_mt_instrument_struct_ia->i_nominal_value = 0;

	/* changes by bageshri for 10G migration */
   l_mt_instrument_struct_ia->i_reg_br_ind = 0;
	
   l_mt_instrument_struct_ia->i_allow_rf = 0;
   l_mt_instrument_struct_ia->i_allow_rvp = 0;
   l_mt_instrument_struct_ia->i_allow_df = 0;
   l_mt_instrument_struct_ia->i_allow_dvp = 0;
   
	/* changes by bageshri for 10G migration */
	l_mt_instrument_struct_ia->i_ord_type = 0;
	
   l_mt_instrument_struct_ia->i_mother_sec_ind = 0;
   l_mt_instrument_struct_ia->i_ex_arena = 0;
   l_mt_instrument_struct_ia->i_listed_ind = 0;
   
	/* changes by bageshri for 10G migration */
	l_mt_instrument_struct_ia->i_dateof_input = 0;
	
   l_mt_instrument_struct_ia->i_threshold_qty = 0;
   l_mt_instrument_struct_ia->i_maker = 0;
   l_mt_instrument_struct_ia->i_maker_dt = 0;
   l_mt_instrument_struct_ia->i_access_stamp = 0;
   l_mt_instrument_struct_ia->i_total_pdcapita = 0;
   l_mt_instrument_struct_ia->i_status = 0;
   l_mt_instrument_struct_ia->i_new_issue = 0;
   l_mt_instrument_struct_ia->i_instr_name = 0;
   l_mt_instrument_struct_ia->i_instr_isin = 0;
   l_mt_instrument_struct_ia->i_tipo_inv = 0;
   
	/* changes by bageshri for 10G migration */
	l_mt_instrument_struct_ia->i_instr_type = 0;

	/* commented by bageshri for 10G migration */
	/*
   l_mt_instrument_struct_ia->i_instrdealcd = 0;
   l_mt_instrument_struct_ia->i_prodateype = 0;
   */

  CO_ProcMonitor(p_logfile, "Entered Input Function DL_Mod_InstrCode\n",
				l_debug_info_ptr,p_intl_envdatastruct_h);

	fprintf(p_logfile,"Old Instrode in Replace Function :(%s)\n",
				l_dl_instrumentchg_struct2_ha->h_oldinstr_code);

		
	   

		EXEC SQL SELECT * INTO :l_mt_instrument_struct_ha_a:l_mt_instrument_struct_ia
				FROM MT_INSTRUMENT
				WHERE INSTR_CODE =:l_dl_instrumentchg_struct2_ha->h_oldinstr_code;

		fprintf(p_logfile,"Old Instrode in Replace Function :(%s)\n",
				l_dl_instrumentchg_struct2_ha->h_oldinstr_code);

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_INSTR_NOTFND,
										l_dl_instrumentchg_struct2_ha->h_oldinstr_code,
										"Old Instrode",
										ltoa(sqlca.sqlcode));

		l_mt_instrument_struct_ia->i_instr_code =0;
		l_mt_instrument_struct_ia->i_maker =0;
		l_mt_instrument_struct_ia->i_checker =0;
		l_mt_instrument_struct_ia->i_instr_isin =0;
		l_mt_instrument_struct_ia->i_listed_ind =0;
		l_mt_instrument_struct_ia->i_access_stamp =0;

		l_mt_instrument_struct_ia->i_chng_cd =-1;

	   /* changes by bageshri for 10G migration */	
		l_mt_instrument_struct_ia->i_chng_isin =-1;
		l_mt_instrument_struct_ia->i_chng_lst_ind =-1;
		l_mt_instrument_struct_ia->i_chg_mkr =-1;

		memset(chr_l_minstrcode,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
		memset(chr_l_mmaker,APL_NULL_CHAR,APL_USERID_LEN);
		memset(chr_l_mchecker,APL_NULL_CHAR,APL_USERID_LEN);

		strcpy(chr_l_minstrcode,l_mt_instrument_struct_ha_a->h_chng_cd);
		
		/* changes by bageshri for 10G migration */
		strcpy(chr_l_mmaker,l_mt_instrument_struct_ha_a->h_chg_mkr);
		
		strcpy(chr_l_mchecker,p_intl_envdatastruct_h->usr);

		strcpy(chr_l_oldinstrcode,l_mt_instrument_struct_ha_a->h_instr_code);
		
		fprintf(p_logfile,"Old Instrode  To Delete :(%s)\n",
				chr_l_oldinstrcode);

		strcpy(l_mt_instrument_struct_ha_a->h_instr_code,APL_NULL_STRING);
		strcpy(l_mt_instrument_struct_ha_a->h_instr_isin,APL_NULL_STRING);
		strcpy(l_mt_instrument_struct_ha_a->h_listed_ind,APL_NULL_STRING);
		strcpy(l_mt_instrument_struct_ha_a->h_access_stamp,APL_NULL_STRING);

		strcpy(l_mt_instrument_struct_ha_a->h_instr_code,l_mt_instrument_struct_ha_a->h_chng_cd);

		/* changes by bageshri for 10G migration */
		strcpy(l_mt_instrument_struct_ha_a->h_instr_isin,l_mt_instrument_struct_ha_a->h_chng_isin);
		strcpy(l_mt_instrument_struct_ha_a->h_listed_ind,l_mt_instrument_struct_ha_a->h_chng_lst_ind);

  		if (APL_FAILURE == CO_RtvSysDtTime(l_mt_instrument_struct_ha_a->h_access_stamp, l_debug_info_ptr))
	  		{
			APL_GOBACK_FAIL
			}

		

		fprintf(p_logfile,"\n\nNEW VALUES OF :\n");

		fprintf(p_logfile,"Instrode 			:(%s)\n",l_mt_instrument_struct_ha_a->h_instr_code);
		fprintf(p_logfile,"ISIN   			:(%s)\n",l_mt_instrument_struct_ha_a->h_instr_isin);
		fprintf(p_logfile,"Listed Flag  	:(%s)\n",l_mt_instrument_struct_ha_a->h_listed_ind);
		fprintf(p_logfile,"Access Stamp 	:(%s)\n",l_mt_instrument_struct_ha_a->h_access_stamp);

		fprintf(p_logfile,"Going To Null out Chg fields\n\n");

		

		strcpy(l_mt_instrument_struct_ha_a->h_chng_cd,APL_NULL_STRING);

		/* changes by bageshri for 10G migration */
		strcpy(l_mt_instrument_struct_ha_a->h_chng_isin,APL_NULL_STRING);
		strcpy(l_mt_instrument_struct_ha_a->h_chng_lst_ind,APL_NULL_STRING);
		strcpy(l_mt_instrument_struct_ha_a->h_chg_mkr,APL_NULL_STRING);

		fprintf(p_logfile,"Nulled Out the Chg fields successfully\n\n");

		sqlca.sqlcode =0;

		EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_p_isincount
					FROM MT_INSTRUMENT WHERE INSTR_ISIN =:l_mt_instrument_struct_ha_a->h_instr_isin;

		IS_ANY_ORA_ERROR

		if (int_p_isincount >0)
		{
		if (CO_InsertErr
         (l_debug_info_ptr,
          ERR_INSTR_ISIN_EXISTS,
          
          APL_NULL_STRING,
          APL_NULL_STRING,
          APL_NULL_STRING,
          __LINE__,
          __FILE__
         ) != APL_SUCCESS)
         APL_GOBACK_FAIL
		}

		sqlca.sqlcode =0;

		EXEC SQL INSERT INTO MT_INSTRUMENT VALUES (:l_mt_instrument_struct_ha_a:l_mt_instrument_struct_ia);

		fprintf(p_logfile," The SQL Error On Insertion(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_INSTRUMENT_EXIST,
												l_dl_instrumentchg_struct2_ha->h_newinstr_code,
												"New Instrode",
												APL_NULL_STRING);

		

      EXEC SQL UPDATE 
					CAEVENT
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error for CAEVENT(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;

      EXEC SQL UPDATE 
					CAEVENTMG
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error AEVENTIMG(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;

      EXEC SQL UPDATE 
					CARTSPROC
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error ARIGHTSPRO(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;

      EXEC SQL UPDATE 
				CALOGAUTOEVENT
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error ALOGAUTOEVNT(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;

      EXEC SQL UPDATE 
					MT_DLYMKTPRC
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error CDLYMKTPRC(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;

      EXEC SQL UPDATE 
					MT_HISDLYMKTPRC
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error CHISDLYMKTPRC(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;

      EXEC SQL UPDATE 
					OR_HISORDER
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error CHISORDER(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR
			
		sqlca.sqlcode =0;

      EXEC SQL UPDATE 
					DL_HISSAFEK
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error CHISSAFEK(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;

      EXEC SQL UPDATE 
					DL_HISDEAL
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error CHISTRADE(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;

      EXEC SQL UPDATE 
					DL_LOCNCHG
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error CLOCNCHG(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;

      EXEC SQL UPDATE 
					DL_LOCALREPSAFEK
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error CLRSAFEK(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;

      EXEC SQL UPDATE 
					DL_MISDEAL
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error CMISTXN(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;

      EXEC SQL UPDATE 
					MT_MTHLYMKTPRC
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error CMTHLYMKTPRC(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;

      EXEC SQL UPDATE 
					OR_ORDERDETAILS
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error CORDER(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;

      EXEC SQL UPDATE 
					DL_SAFEK
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error DL_SAFEK(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;

      EXEC SQL UPDATE 
					DL_DEAL
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error DL_DEAL(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;

      EXEC SQL UPDATE 
					DL_DEALREPAIR
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error CTRADEREPAIR(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;

      EXEC SQL UPDATE 
					DL_DEALCLIENTIMG
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error CTRDACCIMG(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;

      EXEC SQL UPDATE 
					IV_CLIENTHOLDING
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error BACCTSAFEK(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;

      EXEC SQL UPDATE 
					CANOTIFY
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error AALERT(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;

      EXEC SQL UPDATE 
				   CABACKSETTLE	
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error ABACKSETL(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;

      EXEC SQL UPDATE 
				   DL_CLHTR	
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error CCLHTR(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;

      EXEC SQL UPDATE 
					MT_EOMMTHLYMKTPRC
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error CEOMMTHLYMKTPRC(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;

      EXEC SQL UPDATE 
					DL_EOMSAFEK
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error CEOMSAFEK(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;

      EXEC SQL UPDATE 
					DL_EOMDEAL
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error CEOMTRADE(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;


      EXEC SQL UPDATE 
					DL_WEEKTXNBAL
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error WEEKTXNBAL(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;

      EXEC SQL UPDATE 
					DL_COPYHISTORY
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error CCPYHISTRADE(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;


      EXEC SQL UPDATE 
					DL_LOCALREPPROC
					SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile," The SQL Error CLRPROC(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;

      EXEC SQL UPDATE
               DL_DEALRST
               SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
            WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code;

   fprintf(p_logfile," The SQL Error CTRADERST(if any) : (%d)\n",sqlca.sqlcode);

      IS_ANY_ORA_ERROR


      sqlca.sqlcode =0;

      EXEC SQL UPDATE
               MT_TEMPMKTPRC
               SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
            WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code;

   fprintf(p_logfile," The SQL Error CTEMPMKTPRC(if any) : (%d)\n",sqlca.sqlcode);

      IS_ANY_ORA_ERROR


      sqlca.sqlcode =0;

      EXEC SQL UPDATE
               DL_INSTRUMENTCONV_TEMP
               SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
            WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code;

   fprintf(p_logfile," The SQL Error CINSTRCONV_TEMP(if any) : (%d)\n",sqlca.sqlcode);

      IS_ANY_ORA_ERROR


      sqlca.sqlcode =0;

      EXEC SQL UPDATE
               DL_INSTRUMENTCONV_REP_TEMP
               SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
            WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code;

   fprintf(p_logfile," The SQL Error CSECCONV_REP_TEMP(if any) : (%d)\n",sqlca.sqlcode);

      IS_ANY_ORA_ERROR

      sqlca.sqlcode =0;

      EXEC SQL UPDATE
               DL_LOCALREPPROC2
               SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
            WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code;

   fprintf(p_logfile," The SQL Error CLRPROC2(if any) : (%d)\n",sqlca.sqlcode);

      IS_ANY_ORA_ERROR

      sqlca.sqlcode =0;

      EXEC SQL UPDATE
               DL_LOCALREPPROC3
               SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
            WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code;

   fprintf(p_logfile," The SQL Error CLRPROC3(if any) : (%d)\n",sqlca.sqlcode);

      IS_ANY_ORA_ERROR



      sqlca.sqlcode =0;

      EXEC SQL UPDATE
               PRO_EURO_TEMP
               SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
            WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code;

   fprintf(p_logfile," The SQL Error EURO_TEMP(if any) : (%d)\n",sqlca.sqlcode);

      IS_ANY_ORA_ERROR

	EXEC SQL DECLARE SRN_CUR CURSOR FOR 
	SELECT * FROM DL_RUSRN
	where INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code;
	IS_ANY_ORA_ERROR

	EXEC SQL OPEN SRN_CUR;
	IS_ANY_ORA_ERROR
	for(;;)
	{
   memset(&l_mt_rusrn_struct_h, NULL, sizeof(MT_RUSRN_STRUCT_H));
   memset(&l_mt_rusrn_struct_i, NULL, sizeof(MT_RUSRN_STRUCT_I));

	EXEC SQL FETCH SRN_CUR INTO :l_mt_rusrn_struct_h:l_mt_rusrn_struct_i;
	IS_ANY_ORA_ERROR_CURSOR
	strcpy(l_mt_rusrn_struct_h.h_instr_code,l_mt_instrument_struct_ha_a->h_instr_code);

	EXEC SQL INSERT INTO DL_RUSRN VALUES (:l_mt_rusrn_struct_h:l_mt_rusrn_struct_i);

	IS_ANY_ORA_ERROR	
	}
	EXEC SQL CLOSE SRN_CUR;
	IS_ANY_ORA_ERROR
      sqlca.sqlcode =0;

      EXEC SQL UPDATE
               DL_RUINSTRUMENT
               SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
            WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code;

   fprintf(p_logfile," The SQL Error CRUINSTRUMENT(if any) : (%d)\n",sqlca.sqlcode);

      IS_ANY_ORA_ERROR

	EXEC SQL DELETE DL_RUSRN WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code;
	IS_ANY_ORA_ERROR

      sqlca.sqlcode =0;

      EXEC SQL UPDATE
               DL_RUHISSAFEK
               SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
            WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code;

   fprintf(p_logfile," The SQL Error CRUHISSAFEK(if any) : (%d)\n",sqlca.sqlcode);

      IS_ANY_ORA_ERROR

      sqlca.sqlcode =0;

      EXEC SQL UPDATE
               DL_RUDEAL
               SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
            WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code;

   fprintf(p_logfile," The SQL Error CRUTRADE(if any) : (%d)\n",sqlca.sqlcode);

      IS_ANY_ORA_ERROR

      sqlca.sqlcode =0;

      EXEC SQL UPDATE
               DL_RUSAFEK
               SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
            WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code;

   fprintf(p_logfile," The SQL Error CRUSAFEK(if any) : (%d)\n",sqlca.sqlcode);

      IS_ANY_ORA_ERROR


      sqlca.sqlcode =0;

      EXEC SQL UPDATE
               DL_RUHISDEAL
               SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
            WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code;

   fprintf(p_logfile," The SQL Error CRUHISTRADE(if any) : (%d)\n",sqlca.sqlcode);

      IS_ANY_ORA_ERROR




      sqlca.sqlcode =0;

      EXEC SQL UPDATE
               DL_SMI_PENDTXN
               SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
            WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code;

   fprintf(p_logfile," The SQL Error SMI_PENDTXN(if any) : (%d)\n",sqlca.sqlcode);

      IS_ANY_ORA_ERROR

      sqlca.sqlcode =0;

      EXEC SQL UPDATE
               DL_AUTOSETTHUWRK
               SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
            WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code;

   fprintf(p_logfile," The SQL Error CAUTOSETTHUWRK(if any) : (%d)\n",sqlca.sqlcode);

      IS_ANY_ORA_ERROR


      sqlca.sqlcode =0;

      EXEC SQL UPDATE
               DL_SMI_TMP_TRADE
               SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
            WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code;

   fprintf(p_logfile," The SQL Error SMI_TMP_TRADE(if any) : (%d)\n",sqlca.sqlcode);

      IS_ANY_ORA_ERROR


      sqlca.sqlcode =0;

      EXEC SQL UPDATE
              DL_LOCALREPSAFEKMA
               SET INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code
            WHERE INSTR_CODE = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code;

   fprintf(p_logfile," The SQL Error CLRSAFEKMA(if any) : (%d)\n",sqlca.sqlcode);

      IS_ANY_ORA_ERROR


		sqlca.sqlcode =0;
		

		EXEC SQL UPDATE MT_INSTRUMENT
					SET INSTR_PARENT =:l_mt_instrument_struct_ha_a->h_instr_code
				WHERE INSTR_PARENT = :l_dl_instrumentchg_struct2_ha->h_oldinstr_code; 

	fprintf(p_logfile,"\n The SQL Error On changing the parent instrument(if any) : (%d)\n\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;

		


		EXEC SQL DECLARE his_trade CURSOR FOR
					(SELECT CLIENT, IDENTIY_NO ,FAILREASON_CD, QTY, DEAL_FRM_ORD,SUB_FAIL_CD
						FROM DL_HISDEAL WHERE
							INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code);
		
		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;

		strcpy(l_dl_dealaudit_struct_hc->h_trail_for,"T");
		strcpy(l_dl_dealaudit_struct_hc->h_processdetail,p_intl_envdatastruct_h->processtion);
		strcpy(l_dl_dealaudit_struct_hc->h_proc_usr,p_intl_envdatastruct_h->usr);
		strcpy(l_dl_dealaudit_struct_hc->h_subprocess,p_intl_envdatastruct_h->subprocess);

  		if (APL_FAILURE == CO_RtvSysDtTime(l_dl_dealaudit_struct_hc->h_logdate, l_debug_info_ptr))
	  		{
			APL_GOBACK_FAIL
			}

		EXEC SQL OPEN his_trade;
		IS_ANY_ORA_ERROR

		for(int_p_reccount =0; ; int_p_reccount++)
			{
			
  			EXEC SQL VAR l_dl_dealaudit_struct_hc->h_dl_client IS STRING;
  			EXEC SQL VAR l_dl_dealaudit_struct_hc->h_indentity_no IS STRING;
  			EXEC SQL VAR l_dl_dealaudit_struct_hc->h_fail_cd IS STRING;
  			EXEC SQL VAR l_dl_dealaudit_struct_hc->h_dlfromord IS STRING;

			strcpy(l_dl_dealaudit_struct_hc->h_dl_client,APL_NULL_STRING);
			strcpy(l_dl_dealaudit_struct_hc->h_indentity_no,APL_NULL_STRING);
			strcpy(l_dl_dealaudit_struct_hc->h_fail_cd,APL_NULL_STRING);
			strcpy(l_dl_dealaudit_struct_hc->h_dlfromord,APL_NULL_STRING);

			l_dl_dealaudit_struct_hc->h_subfailreas_cd	=	0;

			l_dl_dealaudit_struct_hc->h_qty =0;

			sqlca.sqlcode = 0;

			EXEC SQL FETCH his_trade 
					INTO :l_dl_dealaudit_struct_hc->h_dl_client:p_i_account,
					:l_dl_dealaudit_struct_hc->h_indentity_no:p_i_refno,
					:l_dl_dealaudit_struct_hc->h_fail_cd:p_i_failcode,
					:l_dl_dealaudit_struct_hc->h_qty:p_i_qty,
					:l_dl_dealaudit_struct_hc->h_dlfromord:p_i_trdfromord,
					:l_dl_dealaudit_struct_hc->h_subfailreas_cd:p_i_subfailcode;

			IS_ANY_ORA_ERROR

			if (sqlca.sqlcode == 1403) break;

		   
		   if (APL_FAILURE == CR_Mod_InstrChngAud(l_dl_dealaudit_struct_hc, l_mt_instrument_struct_ha_a->h_instr_code, l_debug_info_ptr))
				{
				fprintf(p_logfile,"Failed in CR_Mod_InstrChngAud for Histrade\n");
				APL_GOBACK_FAIL
				}			

			continue;
	
			}

		EXEC SQL CLOSE his_trade;

		fprintf(p_logfile," Audit Trail For History Trade done\n");

			

		EXEC SQL DECLARE his_order CURSOR FOR
					(SELECT CLIENT, ORD_REFNO , EXEC_QTY
						FROM OR_HISORDER	TRADE WHERE
							INSTR_CODE = :l_mt_instrument_struct_ha_a->h_instr_code);
		
		IS_ANY_ORA_ERROR

		int_p_reccount =0;

		strcpy(l_dl_dealaudit_struct_hc->h_trail_for,"O");
		strcpy(l_dl_dealaudit_struct_hc->h_processdetail,p_intl_envdatastruct_h->processtion);
		strcpy(l_dl_dealaudit_struct_hc->h_proc_usr,p_intl_envdatastruct_h->usr);
		strcpy(l_dl_dealaudit_struct_hc->h_subprocess,p_intl_envdatastruct_h->subprocess);
		strcpy(l_dl_dealaudit_struct_hc->h_dlfromord,"N");

  		if (APL_FAILURE == CO_RtvSysDtTime(l_dl_dealaudit_struct_hc->h_logdate, l_debug_info_ptr))
	  		{
			APL_GOBACK_FAIL
			}

		EXEC SQL OPEN his_order;
		IS_ANY_ORA_ERROR

		for(int_p_reccount =0; ; int_p_reccount++)
			{
			
  			EXEC SQL VAR l_dl_dealaudit_struct_hc->h_dl_client IS STRING(11);
  			EXEC SQL VAR l_dl_dealaudit_struct_hc->h_indentity_no IS STRING(17);

			strcpy(l_dl_dealaudit_struct_hc->h_dl_client,APL_NULL_STRING);
			strcpy(l_dl_dealaudit_struct_hc->h_indentity_no,APL_NULL_STRING);
			
			l_dl_dealaudit_struct_hc->h_qty =0;

			sqlca.sqlcode = 0;

			EXEC SQL FETCH his_order
					INTO :l_dl_dealaudit_struct_hc->h_dl_client:p_i_account,
					:l_dl_dealaudit_struct_hc->h_indentity_no:p_i_refno,
					:l_dl_dealaudit_struct_hc->h_qty:p_i_qty;

			IS_ANY_ORA_ERROR

			if (sqlca.sqlcode == 1403) break;

		   
		   if (APL_FAILURE == CR_Mod_InstrChngAud(l_dl_dealaudit_struct_hc, l_mt_instrument_struct_ha_a->h_instr_code, l_debug_info_ptr))
				{
				fprintf(p_logfile,"Failed in CR_Mod_InstrChngAud for Histrade\n");
				APL_GOBACK_FAIL
				}			

			continue;
	
			}


		EXEC SQL CLOSE his_order;

		fprintf(p_logfile," Audit Trail For History Orders done\n");

		
		memset(chr_l_mdate,APL_NULL_CHAR,APL_DATE_LEN);

		if(CO_RtvSysDt(chr_l_mdate,l_debug_info_ptr)==APL_FAILURE)
			{APL_GOBACK_FAIL}

		sqlca.sqlcode =0;

		EXEC SQL INSERT INTO DL_INSTRUMENTCHG
								VALUES (:chr_l_oldinstrcode,
											:chr_l_minstrcode,
											:chr_l_mdate,
											:chr_l_mmaker,
											:chr_l_mchecker);

		IS_ANY_ORA_ERROR

		sqlca.sqlcode =0;
		fprintf(p_logfile,"Old Instrode in Replace Function :(%s)\n",
				l_dl_instrumentchg_struct2_ha->h_oldinstr_code);
		EXEC SQL DELETE MT_INSTRUMENT WHERE
				INSTR_CODE =:chr_l_oldinstrcode;

		fprintf(p_logfile," The SQL Error on Deletion(if any) : (%d)\n",sqlca.sqlcode);

		IS_ANY_ORA_ERROR

		fprintf(p_logfile,"\nDeleted the old Record Successfully\n\n");

  		if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
			{
			APL_GOBACK_FAIL
			}

  		APL_GOBACK_SUCCESS


  if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
	{
	APL_GOBACK_FAIL
	}

  APL_GOBACK_SUCCESS

  RETURN_SUCCESS :
	{
   CO_ProcMonitor(p_logfile, "Leaving Function DL_Mod_InstrCode Successfully\n",
		l_debug_info_ptr,p_intl_envdatastruct_h);

	free(l_mt_instrument_struct_ha_a);
	free(l_mt_instrument_struct_ia);
	free(l_dl_dealaudit_struct_hc);

	return(APL_SUCCESS);
	}
  RETURN_FAILURE :
	{
	fprintf(p_logfile," The SQL Error (if any) : (%d)\n",sqlca.sqlcode);

   CO_ProcMonitor(p_logfile, "Leaving Function DL_Mod_InstrCode Unsuccessfully\n",
		l_debug_info_ptr,p_intl_envdatastruct_h);

	free(l_mt_instrument_struct_ha_a);
	free(l_mt_instrument_struct_ia);
	free(l_dl_dealaudit_struct_hc);

	return(APL_FAILURE);
	}

}

int DL_Proc_InstrCodeChg(char *old_instr_cd,
						char **argv,
						FILE *p_logfile,
						INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

  

  FILE *l_fp_match   = NULL;

  struct sqlca sqlca;	

   DL_INSTRUMENTCHG_STRUCT2_H *l_dl_instrumentchg_struct2_ha;

  char chr_l_now[APL_DATE_LEN] = APL_NULL_STRING;
  char chr_p_logfile_name[FILE_NAME_LEN] = APL_NULL_STRING;
   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;

  int int_l_error_flag = APL_SUCCESS;
  int int_l_chkflg = 0;
  int int_l_no_match = 0;

EXEC SQL VAR chr_g_restart_data is string;
  sqlca.sqlcode = 0;

   l_dl_instrumentchg_struct2_ha = (DL_INSTRUMENTCHG_STRUCT2_H *)calloc(1,sizeof(DL_INSTRUMENTCHG_STRUCT2_H));

	memset(l_dl_instrumentchg_struct2_ha->h_oldinstr_code,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
	memset(l_dl_instrumentchg_struct2_ha->h_newinstr_code,APL_NULL_CHAR,APL_INSTRUMENTCODE_LEN);
	memset(l_dl_instrumentchg_struct2_ha->h_newinstr_isincode,APL_NULL_CHAR,13);
	memset(l_dl_instrumentchg_struct2_ha->h_listed_ind,APL_NULL_CHAR,APL_FLAG_LENGTH);
	memset(l_dl_instrumentchg_struct2_ha->h_access_stamp,APL_NULL_CHAR,APL_DATE_LEN);

	

   if (!strlen(old_instr_cd))
      {
      APL_DATA_MISSING("Old Instrode", APL_NULL_STRING, APL_NULL_STRING);
      } 

   if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
     {APL_GOBACK_FAIL } 

	strcpy(l_dl_instrumentchg_struct2_ha->h_oldinstr_code,old_instr_cd);

	

	  fprintf(p_logfile, "Entered Function CDBInstrCgAuthFn\n");
	  fprintf(p_logfile, "CDBInstrCgAuthFn Finished opening File\n");
	  fprintf(p_logfile, "CDBInstrCgAuthFn :OLD Instrode : %s \n",old_instr_cd);
		
	

  EXEC SQL SELECT PROCESSING_STATUS INTO :chr_g_restart_data:g_restart_data_i
     FROM SYS_BATCHPROC
     WHERE PROCESS_NAME=:argv[0]
        AND   PROC_INIT=:argv[1]
        AND   STARTDATE=:argv[2]
        AND   STATUS='started'
     FOR UPDATE OF PROCESSING_STATUS,STATUS;


  if(APL_ZERO_RESULT_SET) 
 	{
   CO_ProcMonitor(p_logfile,"E:No entry in batch_in_proc",NULL,NULL);
   APL_GOBACK_FAIL
   }

  IS_ANY_ORA_ERROR
	
		fprintf(p_logfile, "Successfully locked the batch record\n");


   

	

   if (APL_FAILURE ==DL_Proc_InstrCodeLock(l_dl_instrumentchg_struct2_ha, 
												p_logfile,
												p_intl_envdatastruct_h,
												l_debug_info_ptr ))
      {
		fprintf(p_logfile, "Failed In Obtaining Locks on all tables\n\n");

      APL_GOBACK_FAIL
      }

	if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		{
      APL_GOBACK_FAIL   
		}
 
   if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
     {APL_GOBACK_FAIL } 

	

   if (APL_FAILURE == DL_Mod_InstrCode(l_dl_instrumentchg_struct2_ha,
												p_logfile,
												p_intl_envdatastruct_h,
												l_debug_info_ptr ))
      {
		fprintf(p_logfile, "Failed In updating all the tables\n\n");

      APL_GOBACK_FAIL
      }

	if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr))
		{
      APL_GOBACK_FAIL   
		}
 
   if (CO_ChkErr(*l_debug_info_ptr) ==APL_SUCCESS)
     {APL_GOBACK_FAIL } 

   APL_GOBACK_SUCCESS

 RETURN_SUCCESS :

   CO_ProcMonitor(p_logfile, "No Errors Found: ", l_debug_info_ptr, p_intl_envdatastruct_h);

	fprintf(p_logfile, "Success In DL_Proc_InstrCodeChg\n\n");
	free(l_dl_instrumentchg_struct2_ha);

	CO_FreeErrLst(l_debug_info_ptr);

   return(APL_SUCCESS);

 RETURN_FAILURE :

	fprintf(p_logfile, "Failed In DL_Proc_InstrCodeChg\n\n");

   CO_ProcMonitor(p_logfile, "Got Errors : ", l_debug_info_ptr, p_intl_envdatastruct_h);
	free(l_dl_instrumentchg_struct2_ha);

	CO_FreeErrLst(l_debug_info_ptr);

   return(APL_FAILURE);

}

int main(int argc,char **argv) //AIX -Warnings Removal
{
	struct sqlca sqlca;

   DEBUG_INFO_STRUCT_H *l_debug_info_ptr = NULL;
	INTL_ENV_DATA_STRUCT_H l_intl_env_data_h;
	FILE *l_finifile = NULL;
	FILE *l_logfile = NULL;

	char old_instr_cd[APL_INSTRUMENTCODE_LEN];

   int int_l_retval=0;

	int int_num = 0;

	char **temp;
	char *y;
   char chr_uname[APL_USERID_LEN] = APL_NULL_STRING;
   char chr_custody_id_b[APL_USERID_LEN] = APL_NULL_STRING;
   char chr_passwd[APL_PASSWD_LEN] = APL_NULL_STRING;
	char chr_l_inifile[PATH_LENGTH] = APL_NULL_STRING;

   EXEC SQL VAR chr_uname IS STRING;
   EXEC SQL VAR chr_custody_id_b IS STRING;
   EXEC SQL VAR chr_passwd IS STRING;

	sqlca.sqlcode = 0;

	memset(&l_intl_env_data_h, NULL, sizeof(INTL_ENV_DATA_STRUCT_H));
	fflush(stdout);

	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

			fprintf(APL_OUT_FILE, "\n\tEntered MAIN. Going for Filename, File allocation etc\n");

	

	if ( ( l_finifile=fopen(chr_l_inifile,"r") ) == NULL)
	{
		APL_GOBACK_FAIL
	}

	

	

	APL_FETCH_DB_LOGIN_DETAILS(l_finifile, chr_custody_id_b, chr_uname, chr_passwd, APL_OUT_FILE, &l_debug_info_ptr)

   EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;

   if (sqlca.sqlcode)
   {
      APL_GOBACK_FAIL
   }

	

   else
   {
		

		if (APL_FAILURE == CO_Rtv_RptFileName(	"3F",
														APL_LOGFILE_DESC,
														100,
														argv[5],
														argv,
														&l_logfile,
														&l_debug_info_ptr ) )
		{
			APL_GOBACK_FAIL
		}

		

		EXEC SQL COMMIT WORK;

		if (sqlca.sqlcode)
		{
			CO_ProcMonitor(l_logfile, "Could not commit after opening chr_log file", NULL, NULL);
			CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
			APL_GOBACK_FAIL
		}

		

		if (APL_FAILURE == CO_SplitStr(	argv[9],
													'|',
													&int_num,
													&temp ))
		{
			CO_ProcMonitor(l_logfile, "String Split Fn returned failure; exiting", NULL, NULL);
			CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
			APL_GOBACK_FAIL
		}

		if (int_num ==0)
		{
			CO_ProcMonitor(l_logfile, "There were no params. Mandatory data missing; Exiting", NULL, NULL);
			CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
			APL_GOBACK_FAIL
		}

      strcpy(old_instr_cd, temp[0]);

		

		strcpy(l_intl_env_data_h.usr, argv[3]);
		strcpy(l_intl_env_data_h.h_mode, argv[4]);
		strcpy(l_intl_env_data_h.processtion, argv[5]);
		strcpy(l_intl_env_data_h.auth_req, argv[6]);
		strcpy(l_intl_env_data_h.subprocess, argv[7]);
		strcpy(l_intl_env_data_h.h_process, argv[8]);

		

		if (APL_FAILURE == CO_RtvSysParams(&l_debug_info_ptr))
		{
			CO_ProcMonitor(l_logfile, "Could Not Get System Params; Exiting", NULL, NULL);
			CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
			APL_GOBACK_FAIL
		}

	fprintf(APL_OUT_FILE, "Successfully got Sys Params\n");
	fprintf(APL_OUT_FILE, "userid   : (%s)\n",l_intl_env_data_h.usr);
	fprintf(APL_OUT_FILE, "mode     : (%s)\n",l_intl_env_data_h.h_mode);
	fprintf(APL_OUT_FILE, "function : (%s)\n",l_intl_env_data_h.processtion);
	fprintf(APL_OUT_FILE, "auth_req : (%s)\n",l_intl_env_data_h.auth_req);
	fprintf(APL_OUT_FILE, "subfun   : (%s)\n",l_intl_env_data_h.subprocess);
	fprintf(APL_OUT_FILE, "action   : (%s)\n",l_intl_env_data_h.h_process);
	fprintf(APL_OUT_FILE, "About to call DL_Proc_InstrCodeChg\n");

		
      int_l_retval = DL_Proc_InstrCodeChg(old_instr_cd, 
											argv, 
											l_logfile, 
											&l_intl_env_data_h, 
											&l_debug_info_ptr);

		

      if ( int_l_retval == APL_FAILURE )
      {
			CO_ProcMonitor(l_logfile, "CDBBtchInstrCgFn Failed Exiting from main", NULL, NULL);
			CO_ProcMonitor(l_logfile, "Rolling Back", NULL, NULL);
			CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
			EXEC SQL ROLLBACK WORK RELEASE;
         APL_GOBACK_FAIL
      }
      else
      {
			CO_ProcMonitor(l_logfile, "CDBBtchInstrCgFn returned Success", NULL, NULL);

         EXEC SQL UPDATE SYS_BATCHPROC
         SET  status = 'completed'
         WHERE PROCESS_NAME=:argv[0]
         AND   PROC_INIT=:argv[1]
         AND   STARTDATE=:argv[2]
         AND   STATUS='started';
			
			if(sqlca.sqlcode)
			{
				CO_ProcMonitor(l_logfile, "Could not update Batch_in_proc", NULL, NULL);
				CO_ProcMonitor(l_logfile, "Rolling Back", NULL, NULL);
				CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
			 	EXEC SQL ROLLBACK WORK RELEASE;
          	APL_GOBACK_FAIL
			}

         EXEC SQL COMMIT WORK RELEASE;
			if (sqlca.sqlcode)
			{
				CO_ProcMonitor(l_logfile, "Could not do final commit", NULL, NULL);
				CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
				EXEC SQL ROLLBACK WORK RELEASE;
				APL_GOBACK_FAIL
			}
			CO_ProcMonitor(l_logfile, "Committed work", NULL, NULL);
			CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
         APL_GOBACK_SUCCESS
      }
   }

	RETURN_SUCCESS : exit(0);
	RETURN_FAILURE : exit(-1);

}

