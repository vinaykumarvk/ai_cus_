


   
   
   
   
   
   
   
   
   
   
   
   




#include <CO_HostStructdef.h>

EXEC SQL INCLUDE sqlca;

#define CLH_PAGE_LEN   55

#define FILENAME_LEN_A			80

int main(int argc,char **argv)//Changes done for AIX Migration
{
	DEBUG_INFO_STRUCT_H			*l_debug_info_ptr = NULL;
	FILE						*l_ptr_ini_file = NULL;
	FILE						*l_ptr_log_file = NULL;
	INTL_ENV_DATA_STRUCT_H	l_intl_envdatastruct_h;
	char						chr_l_inifile[FILENAME_LEN_A]   = APL_NULL_STRING;
	char						chr_uname[APL_USERID_LEN]   = APL_NULL_STRING;
	char						chr_passwd[APL_PASSWD_LEN]  = APL_NULL_STRING;
	char						chr_custody_id_b[APL_USERID_LEN]  = APL_NULL_STRING;
	int						int_l_flg = 0;
	int						int_retval = 0;
	struct sqlca			sqlca;

	memset(&l_intl_envdatastruct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H));
	
	

	strcpy(l_intl_envdatastruct_h.usr, argv[3]);
	strcpy(l_intl_envdatastruct_h.h_mode, argv[4]);
	strcpy(l_intl_envdatastruct_h.processtion, argv[5]);
	strcpy(l_intl_envdatastruct_h.auth_req, argv[6]);
	strcpy(l_intl_envdatastruct_h.subprocess, argv[7]);
	strcpy(l_intl_envdatastruct_h.h_process, argv[8]);
	
	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

	if ((l_ptr_ini_file = fopen(chr_l_inifile,"r")) == NULL)
		exit(-1);

	APL_FETCH_DB_LOGIN_DETAILS(l_ptr_ini_file,chr_custody_id_b,chr_uname,chr_passwd,APL_OUT_FILE,&l_debug_info_ptr)
	
	
	
	if (CO_DB_Connection_B(chr_uname,chr_passwd,&l_debug_info_ptr) != APL_SUCCESS)
		APL_GOBACK_FAIL

	

	int_retval = CO_Rtv_RptFileName("3U",APL_LOGFILE_DESC,100,argv[5],argv,&l_ptr_log_file,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL
	}

	

	EXEC SQL COMMIT WORK;
	
	if (sqlca.sqlcode != 0)
	{
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		EXEC SQL ROLLBACK WORK RELEASE;
		APL_GOBACK_FAIL
	}

	CO_ProcMonitor(l_ptr_log_file,"Reset Clearing House ",NULL,NULL);
	CO_ProcMonitor(l_ptr_log_file,"_______________________\n",NULL,NULL);
	
	CO_ProcMonitor(l_ptr_log_file,"Work Committed after chr_logfile creation \n",NULL,&l_intl_envdatastruct_h);

	

	if (CO_RtvSysParams(&l_debug_info_ptr) != APL_SUCCESS)
	{
		CO_ProcMonitor(l_ptr_log_file,"Unable to get system parameters - Rollback done \n",NULL,&l_intl_envdatastruct_h);
		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);
		
		EXEC SQL ROLLBACK WORK RELEASE;
		
		APL_GOBACK_FAIL	
	}

	
	 
	int_retval = CO_Proc_BtchLock(argv,l_ptr_log_file,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		CO_ProcMonitor(l_ptr_log_file,"Unable to lock BATCH_IN_PROC record - Rollback done \n",NULL,&l_intl_envdatastruct_h);
		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		EXEC SQL ROLLBACK WORK RELEASE;
		
		APL_GOBACK_FAIL
	}

	

	int_retval = CR_Proc_DBCLHRstGlobal(argv,l_ptr_log_file,&l_intl_envdatastruct_h,&l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		int_l_flg = 1;

	   CO_Proc_Exit(argv,l_ptr_log_file,&l_debug_info_ptr,int_l_flg);
		
		if (CO_ChkErr(l_debug_info_ptr) == APL_SUCCESS)
		{
			
			CO_ProcMonitor(l_ptr_log_file,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_envdatastruct_h);
			CO_FreeErrLst(&l_debug_info_ptr);

		}

		CO_ProcMonitor(l_ptr_log_file,"FAILURE from reset of clearing house program \n",NULL,&l_intl_envdatastruct_h);

		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		APL_GOBACK_FAIL	
	}
	else
	{
		int_l_flg = 0;

		CO_Proc_Exit(argv,l_ptr_log_file,&l_debug_info_ptr,int_l_flg);

		if (CO_ChkErr(l_debug_info_ptr) == APL_SUCCESS)
		{
			
			CO_ProcMonitor(l_ptr_log_file,APL_NULL_STRING,&l_debug_info_ptr,&l_intl_envdatastruct_h);
			CO_FreeErrLst(&l_debug_info_ptr);

		}

		CO_ProcMonitor(l_ptr_log_file,"SUCCESS from reset of clearing house program \n",NULL,&l_intl_envdatastruct_h);

		
		CO_Proc_RptClose(l_ptr_log_file,&l_debug_info_ptr);

		APL_GOBACK_SUCCESS
	}

	RETURN_SUCCESS	: 
	{
		fclose(l_ptr_ini_file);
	   return(0);
	}

	RETURN_FAILURE	: 
	{
		fclose(l_ptr_ini_file);
  		return(-1);	
	}
}



 
 int CR_Proc_DBCLHRstGlobal(char **argv,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca						sqlca;
	SYS_DL_DEAL_STRUCT_H				l_sys_dl_deal_struct_hb;
	SYS_DL_DEAL_STRUCT_I				l_sys_dl_deal_struct_il;
	char									chr_mainfuncarea[APL_MAINFUNCAREA_LEN] = APL_NULL_STRING;
	char									chr_l_condid[APL_CONDID_LEN] = APL_NULL_STRING;
	short									int_l_condexists = 0;			
	short									l_CondExists1 = 0;   		
	int									int_retval = 0;
	int									int_l_pglen_m = 7;
	FILE									*l_clh_rst_rpt_file = NULL;
	char									chr_l_from_locrefno[17] = APL_NULL_STRING;
	char									chr_l_to_locrefno[17] = APL_NULL_STRING;
	char									chr_l_transmitdt[APL_DATE_LEN] = APL_NULL_STRING;
	int									int_num = 0;
	char									**temp = NULL;
	short									l_cur_ind = 0;
	short									l_CondExists2 = 0; 
	int									int_l_nopage = 1;  
	DL_DEALAUDIT_STRUCT_H *l_dl_dealaudit_struct_h  = NULL;
	char									chr_h_clhclient_hu[16] = APL_NULL_STRING;
	short									i_clhaccount_hu = 0;


	EXEC SQL VAR l_sys_dl_deal_struct_hb.h_dl_client IS STRING;
	EXEC SQL VAR l_sys_dl_deal_struct_hb.h_indentity_no IS STRING;

	memset(&l_sys_dl_deal_struct_hb, NULL, sizeof(SYS_DL_DEAL_STRUCT_H));
	memset(&l_sys_dl_deal_struct_il, NULL, sizeof(SYS_DL_DEAL_STRUCT_I));
	
	l_dl_dealaudit_struct_h = (DL_DEALAUDIT_STRUCT_H *)calloc(1, sizeof(DL_DEALAUDIT_STRUCT_H));

   APL_MALLOC_FAIL(l_dl_dealaudit_struct_h);

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CR_Proc_DBCLHRstGlobal \n",NULL,p_intl_env_data_struct_h_d);
	
	strcpy(chr_mainfuncarea,"CLG_HOUSE_RST");
   strcpy(chr_l_condid,"LOC_REF_NO");

   int_retval = CO_Chk_CntryEnabled(chr_mainfuncarea,chr_l_condid,&l_CondExists1,l_debug_info_ptr);
   if (int_retval != APL_SUCCESS)
		{
		CO_ProcMonitor(p_ptr_log_file,"Unable to get values into l_CondExists1",NULL,NULL);
      APL_GOBACK_FAIL
		}

 	
	strcpy(chr_mainfuncarea,"CLG_HOUSE_RST");
	strcpy(chr_l_condid,"CZ_REPORT");
 	
	int_retval = CO_Chk_CntryEnabled(chr_mainfuncarea,chr_l_condid,&l_CondExists2,l_debug_info_ptr);
   if (int_retval != APL_SUCCESS)
      APL_GOBACK_FAIL

   if ( (l_CondExists1 > 0) || (l_CondExists2 > 0) ) 
	
	int_retval = CO_Rtv_RptFileName("CR","Clearing House Reset - Global",135,p_intl_env_data_struct_h_d->processtion,argv,&l_clh_rst_rpt_file,l_debug_info_ptr);
	else
		int_retval = CO_Rtv_RptFileName("CR","Clearing House Reset - Global",80,p_intl_env_data_struct_h_d->processtion,argv,&l_clh_rst_rpt_file,l_debug_info_ptr);

	if (int_retval != APL_SUCCESS)
	{
		
		return(APL_FAILURE);
	}
	
	

  if ( (l_CondExists1 > 0) || (l_CondExists2 > 0) ) 

		{
		 	int_retval = RstClhGRepHdr_HU(l_clh_rst_rpt_file,&int_l_nopage,l_debug_info_ptr);
			if (int_retval != APL_SUCCESS)
			{
				CO_ProcMonitor(p_ptr_log_file,"Unable to print chr_header for the report",NULL,NULL);
				APL_GOBACK_FAIL
			}
			int_l_pglen_m = 9;
		}
		
	else
   	int_retval = CR_Prnt_CLHRstRptHdrGlobal(l_clh_rst_rpt_file,l_debug_info_ptr);
		if (int_retval != APL_SUCCESS)
			{
			CO_ProcMonitor(p_ptr_log_file,"Unable to print chr_header for the report",NULL,NULL);
			APL_GOBACK_FAIL
			}
		

	

	if (CO_SplitStr(argv[9],'|',&int_num,&temp) != APL_SUCCESS)
		{
		CO_ProcMonitor(p_ptr_log_file,"Unable to split argv[9]",NULL,NULL);
		APL_GOBACK_FAIL
		}
	
	strcpy(chr_l_transmitdt,temp[0]);

	if (strlen(chr_l_transmitdt) == 0)
		{
		APL_DATA_MISSING("TRANSMIT DATE",APL_NULL_STRING,APL_NULL_STRING)
		APL_GOBACK_FAIL
		}
	
	strcpy(chr_mainfuncarea,"CLG_HOUSE_RST");
	strcpy(chr_l_condid,"LOCREFNO_NULL");

	int_retval = CO_Chk_CntryEnabled(chr_mainfuncarea,chr_l_condid,&int_l_condexists,l_debug_info_ptr);
	if (int_retval != APL_SUCCESS)
		{
		CO_ProcMonitor(p_ptr_log_file,"CM_CntryCondChkFn failed for l_CondExists",NULL,NULL);
		APL_GOBACK_FAIL
		}


		
	if ((int_l_condexists > 0) && (l_CondExists1 == 0))
	{
		
	}

	else if (l_CondExists1 > 0)    
	{
		strcpy(chr_l_from_locrefno,temp[1]);
		strcpy(chr_l_to_locrefno,temp[2]);
		
		if ((strlen(chr_l_from_locrefno) != 0) && (strlen(chr_l_to_locrefno) != 0))
			l_cur_ind = 1;
		else if ((strlen(chr_l_from_locrefno) != 0) && (strlen(chr_l_to_locrefno) == 0)) 
			l_cur_ind = 2;
		else if ((strlen(chr_l_from_locrefno) == 0) && (strlen(chr_l_to_locrefno) != 0))
			l_cur_ind = 3;
		else if ((strlen(chr_l_from_locrefno) == 0) && (strlen(chr_l_to_locrefno) == 0))
			l_cur_ind = 4;	
	}
	
	if (CO_ChkErr(*l_debug_info_ptr) == APL_SUCCESS)
		APL_GOBACK_FAIL
	
	sqlca.sqlcode = 0;

	if ((int_l_condexists > 0) && (l_CondExists1 == 0))
	{
		EXEC SQL DECLARE TradeRecs1 CURSOR FOR
		SELECT * FROM DL_DEAL
		WHERE trans_date = :chr_l_transmitdt;
		

		EXEC SQL OPEN TradeRecs1;
	}

	else if (l_CondExists1 > 0)
	{
		if (l_cur_ind == 1)
		{
			EXEC SQL DECLARE TradeRecs3 CURSOR FOR
			SELECT * FROM DL_DEAL
			WHERE trans_date = :chr_l_transmitdt
			AND TO_NUMBER(lcl_identno) BETWEEN TO_NUMBER(:chr_l_from_locrefno) AND TO_NUMBER(:chr_l_to_locrefno)
			AND DEAL_STAT <> 'CS';

			EXEC SQL OPEN TradeRecs3;
		}

		else if (l_cur_ind == 2)
		{
			EXEC SQL DECLARE TradeRecs4 CURSOR FOR
			SELECT * FROM DL_DEAL
			WHERE trans_date = :chr_l_transmitdt
			AND TO_NUMBER(lcl_identno) >= TO_NUMBER(:chr_l_from_locrefno)
			AND DEAL_STAT <> 'CS';

			EXEC SQL OPEN TradeRecs4;
		}

		else if (l_cur_ind == 3)
		{
			EXEC SQL DECLARE TradeRecs5 CURSOR FOR
			SELECT * FROM DL_DEAL
			WHERE trans_date = :chr_l_transmitdt
			AND TO_NUMBER(lcl_identno) <= TO_NUMBER(:chr_l_to_locrefno)
			AND DEAL_STAT <> 'CS';
		
			EXEC SQL OPEN TradeRecs5;
		}

		else if (l_cur_ind == 4)
		{
			EXEC SQL DECLARE TradeRecs6 CURSOR FOR
			SELECT * FROM DL_DEAL
			WHERE trans_date = :chr_l_transmitdt
			AND DEAL_STAT <> 'CS';
		
			EXEC SQL OPEN TradeRecs6;
		}
	}
	
	else
	{
		EXEC SQL DECLARE TradeRecs2 CURSOR FOR
		SELECT * FROM DL_DEAL
		WHERE trans_date = :chr_l_transmitdt
		AND DEAL_STAT <> 'CS';

		EXEC SQL OPEN TradeRecs2;
	}

	IS_ANY_ORA_ERROR

	for(;;)
	{
		if ((int_l_condexists > 0) && (l_CondExists1 == 0))    
			EXEC SQL FETCH TradeRecs1 INTO :l_sys_dl_deal_struct_hb:l_sys_dl_deal_struct_il;
		
		else if (l_CondExists1 > 0)
		{
			if (l_cur_ind == 1)
				EXEC SQL FETCH TradeRecs3 INTO :l_sys_dl_deal_struct_hb:l_sys_dl_deal_struct_il;
			
			else if (l_cur_ind == 2)
				EXEC SQL FETCH TradeRecs4 INTO :l_sys_dl_deal_struct_hb:l_sys_dl_deal_struct_il;
			
			else if (l_cur_ind == 3)
				EXEC SQL FETCH TradeRecs5 INTO :l_sys_dl_deal_struct_hb:l_sys_dl_deal_struct_il;
			
			else if (l_cur_ind == 4)
				EXEC SQL FETCH TradeRecs6 INTO :l_sys_dl_deal_struct_hb:l_sys_dl_deal_struct_il;
		}
		
		else
			EXEC SQL FETCH TradeRecs2 INTO :l_sys_dl_deal_struct_hb:l_sys_dl_deal_struct_il;

		IS_ANY_ORA_ERROR

		if (APL_ZERO_RESULT_SET)
			break;

		if ((int_l_condexists > 0) && (l_CondExists1 == 0))    
		{
			EXEC SQL UPDATE DL_DEAL
			SET trans_date = NULL,
			 	 lcl_identno = NULL,
			 	 LRNDS_DATE = NULL  
			WHERE client= :l_sys_dl_deal_struct_hb.h_dl_client
			AND   IDENTIY_NO = :l_sys_dl_deal_struct_hb.h_indentity_no;
		}
		else if (int_l_condexists > 0)    
		{
			EXEC SQL UPDATE DL_DEAL
			SET trans_date = NULL,
			 	 lcl_identno = NULL
			WHERE client= :l_sys_dl_deal_struct_hb.h_dl_client
			AND   IDENTIY_NO = :l_sys_dl_deal_struct_hb.h_indentity_no;
		}
		else
		{
			EXEC SQL UPDATE DL_DEAL
			SET trans_date = NULL
			WHERE client = :l_sys_dl_deal_struct_hb.h_dl_client
			AND   IDENTIY_NO = :l_sys_dl_deal_struct_hb.h_indentity_no;
		}

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	if ( (l_CondExists1 > 0) || (l_CondExists2 > 0) )
		{
			EXEC SQL SELECT CLN_CLH
			INTO :chr_h_clhclient_hu:i_clhaccount_hu
			FROM MT_CLIENT
			WHERE CLN_CODE = :l_sys_dl_deal_struct_hb.h_dl_client;
			
			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
		}

		

      if (++int_l_pglen_m == CLH_PAGE_LEN)
      {
		if ( (l_CondExists1 > 0) || (l_CondExists2 > 0) )
				{
					int_retval = RstClhGRepFtr_HU(l_clh_rst_rpt_file,l_debug_info_ptr);
					
					if (int_retval != APL_SUCCESS)
						{
						CO_ProcMonitor(p_ptr_log_file,"RstClhGRepFtr failed",NULL,NULL);
						APL_GOBACK_FAIL
						}

					int_l_nopage = int_l_nopage + 1;
					
					int_retval = RstClhGRepHdr_HU(l_clh_rst_rpt_file,&int_l_nopage,l_debug_info_ptr);
					
					if (int_retval != APL_SUCCESS)
						{
						CO_ProcMonitor(p_ptr_log_file,"RstClhGRepHdr_HU Failed",NULL,NULL);
						APL_GOBACK_FAIL
						}
					
					int_l_pglen_m = 9;
				}
			
			else
				
				{
         		int_retval = CR_Prnt_CLHRstRptLine(l_clh_rst_rpt_file,l_debug_info_ptr);
				 	if (int_retval != APL_SUCCESS)
						{
						CO_ProcMonitor(p_ptr_log_file,"CDBRstClhGRepFtrFn Function Failed",NULL,NULL);
                  APL_GOBACK_FAIL
						}
         		fprintf(l_clh_rst_rpt_file,"\f");
         		fprintf(l_clh_rst_rpt_file,"\n");
         		int_retval = CR_Prnt_CLHRstRptHdrGlobal(l_clh_rst_rpt_file,l_debug_info_ptr);
					if (int_retval != APL_SUCCESS)
						{
						CO_ProcMonitor(p_ptr_log_file,"CDBRstClhGRepHdrFn Function Failed",NULL,NULL);
   	      		APL_GOBACK_FAIL
						}
	
         		int_l_pglen_m = 7;
				}
      }

		
		if ( (l_CondExists1 > 0) || (l_CondExists2 > 0) )
			{
			 int_retval = CR_Prnt_CLHRstRptDetGlobal(l_clh_rst_rpt_file,
														l_sys_dl_deal_struct_hb.h_dl_client,
														chr_h_clhclient_hu,											
														l_sys_dl_deal_struct_hb.h_indentity_no,
														l_sys_dl_deal_struct_hb.h_instr_code,
														l_sys_dl_deal_struct_hb.h_confdate,
														l_sys_dl_deal_struct_hb.h_dealcd,
														l_sys_dl_deal_struct_hb.h_qty,
														p_intl_env_data_struct_h_d,
														l_debug_info_ptr);
       	if (int_retval != APL_SUCCESS)
					{
					CO_ProcMonitor(p_ptr_log_file,"CDBRstClhGRepDetailsFn Function Failed",NULL,NULL);
               APL_GOBACK_FAIL
					}
			}
		else
		
			{
			int_retval = CR_Prnt_CLHRstRptGlobal(l_clh_rst_rpt_file,
														l_sys_dl_deal_struct_hb.h_dl_client,
														l_sys_dl_deal_struct_hb.h_indentity_no,
														p_ptr_log_file,
														p_intl_env_data_struct_h_d,
														l_debug_info_ptr);

			if (int_retval != APL_SUCCESS)
				{
				CO_ProcMonitor(p_ptr_log_file,"WriteClHouseResetRepGFn Function Failed",NULL,NULL);
				APL_GOBACK_FAIL
				}
			}

		

         memset(l_dl_dealaudit_struct_h, NULL, sizeof(DL_DEALAUDIT_STRUCT_H));
         strcpy(l_dl_dealaudit_struct_h->h_dl_client,l_sys_dl_deal_struct_hb.h_dl_client);
         strcpy(l_dl_dealaudit_struct_h->h_indentity_no,l_sys_dl_deal_struct_hb.h_indentity_no);
         strcpy(l_dl_dealaudit_struct_h->h_trail_for, "T");
         strcpy(l_dl_dealaudit_struct_h->h_processdetail,p_intl_env_data_struct_h_d->processtion);
         strcpy(l_dl_dealaudit_struct_h->h_proc_usr,p_intl_env_data_struct_h_d->usr);
         strcpy(l_dl_dealaudit_struct_h->h_subprocess,p_intl_env_data_struct_h_d->subprocess);
         strcpy(l_dl_dealaudit_struct_h->h_logdate,APL_NULL_STRING);
         strcpy(l_dl_dealaudit_struct_h->h_fail_cd,APL_NULL_STRING);
         l_dl_dealaudit_struct_h->h_qty = l_sys_dl_deal_struct_hb.h_qty;
         strcpy(l_dl_dealaudit_struct_h->h_dlfromord,l_sys_dl_deal_struct_hb.h_dlfromord);

         printf("Now updating Audit Trail\n");
         fflush(stdout);

			int_retval = CR_Mod_CLHAudTrail(l_dl_dealaudit_struct_h,l_debug_info_ptr);
			if (int_retval != APL_SUCCESS)
				{
				CO_ProcMonitor(p_ptr_log_file,"Audit Trail Function Failed",NULL,NULL);
				APL_GOBACK_FAIL
				}
	}

	if(sqlca.sqlerrd[2] == 0)
	{
		CO_ProcMonitor(p_ptr_log_file,"No Records Processed",NULL,NULL);
		APL_GOBACK_SUCCESS
	}

	if ((int_l_condexists > 0) && (l_CondExists1 == 0))
		EXEC SQL CLOSE TradeRecs1;
	else if (l_CondExists1 > 0)
		{
		if (l_cur_ind == 1)
			EXEC SQL CLOSE TRadeRecs3;
		else if (l_cur_ind == 2)
			EXEC SQL CLOSE TradeRecs4;
		else if (l_cur_ind == 3)
			EXEC SQL CLOSE TradeRecs5;
		else
			EXEC SQL CLOSE TradeRecs6;
		}
	else
		EXEC SQL CLOSE TradeRecs2;

	if (sqlca.sqlerrd[2] == 0)
	{
		CO_InsertErr(l_debug_info_ptr,ERR_NOTHING_RESET,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__);

		APL_GOBACK_FAIL
	}

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		if (l_CondExists1 > 0)
		{
      	int_retval = RstClhGRepFtr_HU(l_clh_rst_rpt_file,l_debug_info_ptr);
			if (int_retval != APL_SUCCESS)
			{
			CO_ProcMonitor(p_ptr_log_file,"RstClhGRepFtr_HU Function Failed",NULL,NULL);
   		APL_GOBACK_FAIL
			}
		}
		else
		{
      	int_retval = CR_Prnt_CLHRstRptLine(l_clh_rst_rpt_file,l_debug_info_ptr);
			if (int_retval != APL_SUCCESS)
			{
			CO_ProcMonitor(p_ptr_log_file,"CDBRstClhGRepFtrFn Function Failed",NULL,NULL);
   		APL_GOBACK_FAIL
			}
		}

		int_retval = CO_Proc_RptClose(l_clh_rst_rpt_file,l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
			{
			CO_ProcMonitor(p_ptr_log_file,"GDBClosRepFlFn Function Failed",NULL,NULL);
			APL_GOBACK_FAIL
			}
		
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CR_Proc_DBCLHRstGlobal SUCCESS \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		if (l_CondExists1 > 0)
		{
      	int_retval = RstClhGRepFtr_HU(l_clh_rst_rpt_file,l_debug_info_ptr);
			if (int_retval != APL_SUCCESS)
			{
			CO_ProcMonitor(p_ptr_log_file,"RstClhGRepFtr_HU Function Failed",NULL,NULL);
			APL_GOBACK_FAIL
			}
		}
		else
		{
      	int_retval = CR_Prnt_CLHRstRptLine(l_clh_rst_rpt_file,l_debug_info_ptr);
			if (int_retval != APL_SUCCESS)
			{
			CO_ProcMonitor(p_ptr_log_file,"CDBRstClhGRepFtrFn Function Failed",NULL,NULL);
   		APL_GOBACK_FAIL
			}
		}


		
		int_retval = CO_Proc_RptClose(l_clh_rst_rpt_file,l_debug_info_ptr);

		if (int_retval != APL_SUCCESS)
			{
			CO_ProcMonitor(p_ptr_log_file,"GDBClosRepFlFn Function Failed",NULL,NULL);
			APL_GOBACK_FAIL
			}
		
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CR_Proc_DBCLHRstGlobal FAILURE \n",NULL,p_intl_env_data_struct_h_d);

		return(APL_FAILURE);
	}
}


 
 int CO_Proc_BtchLock(char **argv,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca					sqlca;
   char                  chr_g_restart_data[APL_RESTARTDATA_LENGTH];
    short                 g_restart_data_i;

EXEC SQL VAR chr_g_restart_data is string;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CO_Proc_BtchLock\n",NULL,NULL);
	
	sqlca.sqlcode = 0;

	EXEC SQL SELECT processing_status INTO :chr_g_restart_data:g_restart_data_i
	FROM SYS_BATCHPROC
	WHERE process_name = :argv[0]
	AND   proc_init = :argv[1]
	AND STARTDATE = :argv[2]
	AND status = 'started'
	FOR UPDATE OF processing_status,status;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_BtchLock SUCCESS \n",NULL,NULL);
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_BtchLock FAILURE \n",NULL,NULL);
		return(APL_FAILURE);
	}
}


 
 int CO_Proc_Exit(char **argv,FILE *p_ptr_log_file,DEBUG_INFO_STRUCT_H **l_debug_info_ptr,int p_flg)
 {
	struct sqlca					sqlca;
	char								chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CO_Proc_Exit\n",NULL,NULL);
	
	sqlca.sqlcode = 0;

	if (p_flg == 0)
	{
		

		if (CO_ChkErr(*l_debug_info_ptr) != APL_SUCCESS)
		{
			memset(chr_l_buf,APL_NULL_CHAR,BUFFER_LEN);
			sprintf(chr_l_buf,"Finished Reset of Clearing House");

			EXEC SQL UPDATE SYS_BATCHPROC
			SET stat_det = :chr_l_buf,
			    status = 'completed'
			WHERE process_name = :argv[0]
			AND   proc_init = :argv[1]
			AND STARTDATE = :argv[2]
			AND status = 'started';

			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
		}

		EXEC SQL COMMIT WORK RELEASE;

		CO_ProcMonitor(p_ptr_log_file,"Work Committed \n",NULL,NULL);
	}
	else if (p_flg == 1)
	{
		EXEC SQL ROLLBACK WORK RELEASE;

		CO_ProcMonitor(p_ptr_log_file,"Rollback done \n",NULL,NULL);
	}

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_Exit SUCCESS \n",NULL,NULL);
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CO_Proc_Exit FAILURE \n",NULL,NULL);
		return(APL_FAILURE);
	}
}


 
 int CO_DB_Connection_B(char *p_username,char *p_passwd,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca					sqlca;

	CO_ProcMonitor(APL_OUT_FILE,"Entered processtion CO_DB_Connection_B\n",NULL,NULL);
	
	sqlca.sqlcode = 0;

	EXEC SQL CONNECT :p_username IDENTIFIED BY :p_passwd;

	if (sqlca.sqlcode != 0)
		APL_GOBACK_FAIL

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CO_DB_Connection_B SUCCESS \n",NULL,NULL);
		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(APL_OUT_FILE,"Leaving processtion CO_DB_Connection_B FAILURE \n",NULL,NULL);
		return(APL_FAILURE);
	}
}	


 
 int CR_Prnt_CLHRstRptGlobal(FILE *p_clh_rst_rpt_file,char *chr_p_client,char *chr_p_refno,FILE *p_ptr_log_file,INTL_ENV_DATA_STRUCT_H *p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
 {
	struct sqlca					sqlca;
	char								h_mstclt[11] = APL_NULL_STRING;
	short								i_mstclt;
	char								h_clhclient[16] = APL_NULL_STRING;
	short								i_clhclient;
	char								h_instr_code[9] = APL_NULL_STRING;
	short								i_instr_code;
	char								h_confdate[20] = APL_NULL_STRING;
	short								i_confdate;
	char								h_dealcd[2] = APL_NULL_STRING;
	short								i_dealcd;
	char								chr_p_trtype[4];

	CO_ProcMonitor(p_ptr_log_file,"Entered processtion CR_Prnt_CLHRstRptGlobal\n",NULL,NULL);
	
	sqlca.sqlcode = 0;
	memset(h_mstclt,APL_NULL_CHAR,11);
	memset(h_clhclient,APL_NULL_CHAR,16);

	EXEC SQL VAR h_mstclt IS STRING;
	EXEC SQL VAR h_clhclient IS STRING;

	EXEC SQL SELECT cln_master
	INTO :h_mstclt:i_mstclt
	FROM MT_CLIENT
	WHERE CLN_CODE = :chr_p_client;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

   EXEC SQL SELECT  CLN_CLH
   INTO :h_clhclient:i_clhclient
   FROM MT_CLIENT
   WHERE CLN_CODE =:h_mstclt;

   IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)

	EXEC SQL SELECT instr_code,VAL_FDT,deal_cd
	INTO :h_instr_code:i_instr_code,:h_confdate:i_confdate,h_dealcd:i_dealcd
	FROM DL_DEAL
	WHERE client = :chr_p_client
	AND IDENTIY_NO = :chr_p_refno;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
	

  memset(chr_p_trtype,APL_NULL_CHAR,4);
  if (h_dealcd[0] == DEALCD_DF)
   {
   strcpy(chr_p_trtype,"DF"); 
   }

  if (h_dealcd[0] ==DEALCD_RF)
   {
   strcpy(chr_p_trtype,"RF"); 
   }

  if (h_dealcd[0] ==DEALCD_DVP)
   {
   strcpy(chr_p_trtype,"DVP"); 
   }

  if (h_dealcd[0] ==DEALCD_RVP)
   {
   strcpy(chr_p_trtype,"RVP"); 
   }

  if (h_dealcd[0] == DEALCD_CD)
   {
   strcpy(chr_p_trtype,"CD"); 
   }

  if (h_dealcd[0] ==DEALCD_CR)
   {
   strcpy(chr_p_trtype,"CR"); 
   }

  if (h_dealcd[0] ==DEALCD_DCD)
   {
   strcpy(chr_p_trtype,"DCD"); 
   }

  if (h_dealcd[0] ==DEALCD_RCR)
   {
   strcpy(chr_p_trtype,"RCR"); 
   }

	fprintf(p_clh_rst_rpt_file,
				"%-10.10s %-10.10s  %-15.15s %-16.16s %-8.8s %-10.10s %s\n",
				chr_p_client,
				h_mstclt,
				h_clhclient,
				chr_p_refno,
				h_instr_code,
				h_confdate,
				chr_p_trtype);

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CR_Prnt_CLHRstRptGlobal SUCCESS \n",NULL,NULL);

		return(APL_SUCCESS);
	}

	RETURN_FAILURE :
	{
		CO_ProcMonitor(p_ptr_log_file,"Leaving processtion CR_Prnt_CLHRstRptGlobal FAILURE \n",NULL,NULL);

		return(APL_FAILURE);
	}

}




int CR_Prnt_CLHRstRptHdrGlobal(FILE *fp,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca sqlca;
 	int i;
	char chr_p_corpname[41];
	int int_p_pad =0;

	sqlca.sqlcode =0;
	memset (chr_p_corpname,APL_NULL_CHAR,41);
	fprintf(fp, "\n");
	for (i=0;i<84;fprintf(fp, "-"),i++);
	fprintf(fp,"\n");
	fprintf(fp,"%27sCLEARING HOUSE RESET REPORT\n\n"," ");

	EXEC SQL VAR chr_p_corpname IS STRING;

   EXEC SQL SELECT CA_IDENTNAME INTO :chr_p_corpname FROM
				MT_COMMON_SYS_PARAMS;
	int_p_pad = (42 -((strlen(chr_p_corpname))/2));
	for  (i=0;i<int_p_pad;fprintf(fp," "),i++);
	fprintf(fp, "%s\n\n",chr_p_corpname);

	fprintf(fp,
	"Account    Master Acc. CLH Account     Ref.No.          Instrurity Conf.Date  Tr.Code \n");
	for (i=0;i<84;fprintf(fp, "-"),i++);
	fprintf(fp,"\n");
   return(APL_SUCCESS);
}



int RstClhGRepHdr_HU(FILE *fp,int *p_nopage,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	struct sqlca sqlca;
	int i;
	char chr_p_corpname[41];
	char chr_l_sysdate_b[APL_DATE_LEN] = APL_NULL_STRING;
   
   sqlca.sqlcode =0;
   memset (chr_p_corpname,APL_NULL_CHAR,41);

   fprintf(fp, "\n");
   
   for(i = 0; i < 43; i++)
      fprintf(fp," ");

   fprintf(fp,"Clearing House Hand-off File Consolidated Report");

   fprintf(fp,"\n");

   for(i = 0; i < 43; i++)
      fprintf(fp," ");

   for(i = 43; i < 91; i++)
      fprintf(fp,"-");

   fprintf(fp,"\n");

	if (CO_RtvSysDt(chr_l_sysdate_b,l_debug_info_ptr) == APL_FAILURE)
   	APL_GOBACK_FAIL

   fprintf(fp,"%.10s",chr_l_sysdate_b);   

   for(i = 10; i < 57; i++)
      fprintf(fp," ");

   EXEC SQL VAR chr_p_corpname IS STRING;

   EXEC SQL SELECT CA_IDENTNAME INTO :chr_p_corpname FROM
            MT_COMMON_SYS_PARAMS;

   IS_ANY_ORA_ERROR
 
   if (sqlca.sqlcode == 1403) 
   {  
      CO_InsertErr(l_debug_info_ptr,ERR_DEAL_NF,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING,__LINE__,__FILE__); 

      APL_GOBACK_FAIL
   } 
 
   fprintf(fp,"%s",chr_p_corpname);

   for (i = 77; i < 125; i++)
	fprintf(fp, " ");

   fprintf(fp,"Page");

   fprintf(fp,"  ");

	fprintf(fp,"%04d",*p_nopage);

   fprintf(fp,"\n");

   fprintf(fp,"\n");

   fprintf(fp,"Broker Handoff File Details");

   fprintf(fp,"\n");

   for (i = 0; i < 135; i++)
      fprintf(fp,"-");

   fprintf(fp,"\n");
	
   fprintf(fp,"Broker     CLH. Code        Reference No.   Instr. Code  Mkt.Code   Pre-Matched   Trade Code            Quantity" );

   fprintf(fp,"\n");

   for (i = 0; i < 135; i++)
      fprintf(fp,"-");

   fprintf(fp,"\n");

   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {

      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {

      return(APL_FAILURE);
   }
}




int RstClhGRepFtr_HU(FILE *fp,INTL_ENV_DATA_STRUCT_H p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   int i;
	
   for (i=0;i<55;i++)
         fprintf(fp,"-");
   fprintf(fp,"End Of Report");
   for (i=68;i<135;i++)
         fprintf(fp,"-");

   return(APL_SUCCESS);

}



int CR_Prnt_CLHRstRptLine(FILE *fp,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
   int i;
   for (i=0;i<84;fprintf(fp, "-"),i++);
   fprintf(fp, "\n");
   return(APL_SUCCESS);
}




int CR_Prnt_CLHRstRptDetGlobal(FILE *fp, char *chr_p_client,char *p_clhclient,char *chr_p_refno,char *p_instr_code,char *chr_p_confdt,char *p_dealcd,double p_quantity,INTL_ENV_DATA_STRUCT_H p_intl_env_data_struct_h_d,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)

{
   int i = 0;     
   char chr_tmp[4] = APL_NULL_STRING; 
	

   fprintf(fp,"%-10s",chr_p_client);

   for(i = 0;i < 2; i++)
      fprintf(fp," ");

   fprintf(fp,"%-15s",p_clhclient);

   fprintf(fp," ");

   fprintf(fp,"%-16s",chr_p_refno);

   for(i = 0;i < 2; i++)
      fprintf(fp," ");

   fprintf(fp,"%-8s",p_instr_code);

   for(i = 0;i < 4; i++)

  fprintf(fp," ");

   fprintf(fp,"NIL");

   for(i = 0;i < 6; i++)
      fprintf(fp," ");

   fprintf(fp,"%.10s",chr_p_confdt);  

   for(i = 0;i < 5; i++)
      fprintf(fp," ");
	
	

   if (strcmp(p_dealcd,"1") == 0)
      strcpy(chr_tmp," DF");

   if (strcmp(p_dealcd,"2") == 0)
      strcpy(chr_tmp," RF");

   if (strcmp(p_dealcd,"3") == 0)
      strcpy(chr_tmp,"DVP");

   if (strcmp(p_dealcd,"4") == 0)
      strcpy(chr_tmp,"RVP");

   if (strcmp(p_dealcd,"5") == 0)
      strcpy(chr_tmp," CD");

   if (strcmp(p_dealcd,"6") == 0)
      strcpy(chr_tmp," CR");

   if (strcmp(p_dealcd,"7") == 0)
      strcpy(chr_tmp,"DCD");

   if (strcmp(p_dealcd,"8") == 0)
      strcpy(chr_tmp,"RCR");

   fprintf(fp,"%s",chr_tmp);

   for(i = 0;i < 7; i++)
      fprintf(fp," ");

   fprintf(fp,"%18.2f",p_quantity);

   fprintf(fp,"\n");

 APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
   {

      return(APL_SUCCESS);
   }

   RETURN_FAILURE :
   {

      return(APL_FAILURE);
   }


}








int CR_Mod_CLHAudTrail(  DL_DEALAUDIT_STRUCT_H *p_dl_dealaudit_struct_h, 
                     DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

   

   struct sqlca sqlca;  
   DL_DEALAUDIT_STRUCT_I *l_dl_dealaudit_struct_i=NULL;
   int int_l_error_flag = APL_SUCCESS;
   char  chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
   char  chr_l_instrcode_a[APL_INSTRUMENTCODE_LEN] = APL_NULL_STRING;
   double l_quantity = 0.0;

   #ifdef APL_THREADS
      APL_SET_CONTEXT
      EXEC SQL CONTEXT USE :my_ctx_local;
   #endif

   sqlca.sqlcode = 0;

   
 APL_IF_DEBUG
   {
      CO_ProcMonitor(   APL_OUT_FILE,
                  "Entered Function CR_Mod_CLHAudTrail\n",
                  NULL,
                  NULL);
      memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(    chr_l_buf,
                  "The Account is : %s\n",
                  p_dl_dealaudit_struct_h->h_dl_client);
      CO_ProcMonitor(   APL_OUT_FILE,
                  chr_l_buf,
                  NULL,
                  NULL);
      memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(    chr_l_buf,
                  "The RefNo is : %s\n",
                  p_dl_dealaudit_struct_h->h_indentity_no);
      CO_ProcMonitor(   APL_OUT_FILE,
                  chr_l_buf,
                  NULL,
                  NULL);
      memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(    chr_l_buf,
                  "The Trailfor is : %s\n",
                  p_dl_dealaudit_struct_h->h_trail_for);
      CO_ProcMonitor(   APL_OUT_FILE,
                  chr_l_buf,
                  NULL,
                  NULL);
      memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(    chr_l_buf,
                  "The FuncDesc is : %s\n",
                  p_dl_dealaudit_struct_h->h_processdetail);
      CO_ProcMonitor(   APL_OUT_FILE,
                  chr_l_buf,
                  NULL,
                  NULL);
      memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(    chr_l_buf,
                  "The LogUser is : %s\n",
                  p_dl_dealaudit_struct_h->h_proc_usr);
      CO_ProcMonitor(   APL_OUT_FILE,
                  chr_l_buf,
                  NULL,
                  NULL);
      memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(    chr_l_buf,
                  "The SubFun is : %s\n",
                  p_dl_dealaudit_struct_h->h_subprocess);
      CO_ProcMonitor(   APL_OUT_FILE,
                  chr_l_buf,
                  NULL,
                  NULL);
      memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(    chr_l_buf,
"The Failcode is : %s\n",
                  p_dl_dealaudit_struct_h->h_fail_cd);
      CO_ProcMonitor(   APL_OUT_FILE,
                  chr_l_buf,
                  NULL,
                  NULL);
      memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(    chr_l_buf,
                  "The Quantity is : %f\n",
                  p_dl_dealaudit_struct_h->h_qty);
      CO_ProcMonitor(   APL_OUT_FILE,
                  chr_l_buf,
                  NULL,
                  NULL);
      memset( chr_l_buf, NULL, BUFFER_LEN );
      sprintf(    chr_l_buf,
                  "The TrdFromOrd is : %s\n",
                  p_dl_dealaudit_struct_h->h_dlfromord);
      CO_ProcMonitor(   APL_OUT_FILE,
                  chr_l_buf,
                  NULL,
                  NULL);
   }


   

   l_dl_dealaudit_struct_i = (DL_DEALAUDIT_STRUCT_I *)calloc(1,sizeof(DL_DEALAUDIT_STRUCT_I));
   APL_MALLOC_FAIL(l_dl_dealaudit_struct_i);


   

   if (!strlen(p_dl_dealaudit_struct_h->h_dl_client))
   {
      APL_DATA_MISSING("Account", APL_NULL_STRING, APL_NULL_STRING);
      int_l_error_flag = APL_FAILURE;
   }
   if (!strlen(p_dl_dealaudit_struct_h->h_indentity_no))
   {
      APL_DATA_MISSING("Reference No.", APL_NULL_STRING, APL_NULL_STRING);
      int_l_error_flag = APL_FAILURE;
   }
   if (!strlen(p_dl_dealaudit_struct_h->h_processdetail))
   {
      APL_DATA_MISSING("Function", APL_NULL_STRING, APL_NULL_STRING);
      int_l_error_flag = APL_FAILURE;
   }
   if (!strlen(p_dl_dealaudit_struct_h->h_proc_usr))
   {
      APL_DATA_MISSING("Log User", APL_NULL_STRING, APL_NULL_STRING);
      int_l_error_flag = APL_FAILURE;
   }
   if (!strlen(p_dl_dealaudit_struct_h->h_trail_for))
   {
      APL_DATA_MISSING("Trail For", APL_NULL_STRING, APL_NULL_STRING);
 int_l_error_flag = APL_FAILURE;
   }
   
   if (!strlen(p_dl_dealaudit_struct_h->h_dlfromord))
   {
      APL_DATA_MISSING("TrdFromOrd", APL_NULL_STRING, APL_NULL_STRING);
      int_l_error_flag = APL_FAILURE;
   }

   if (APL_FAILURE == int_l_error_flag) APL_GOBACK_FAIL

   

   if (APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr)) APL_GOBACK_FAIL

   


   
  
   

   if ( !strlen(p_dl_dealaudit_struct_h->h_logdate) )
   {
      if( CO_RtvSysDtTime(p_dl_dealaudit_struct_h->h_logdate,l_debug_info_ptr) ==
                                                                  APL_FAILURE )
         APL_GOBACK_FAIL
   }

   

   l_dl_dealaudit_struct_i->i_dl_client = 0;
   l_dl_dealaudit_struct_i->i_indentity_no = 0;
   l_dl_dealaudit_struct_i->i_trail_for = 0;
   l_dl_dealaudit_struct_i->i_processdetail = 0;
   l_dl_dealaudit_struct_i->i_proc_usr = 0;
   l_dl_dealaudit_struct_i->i_logdate = 0;
   l_dl_dealaudit_struct_i->i_dlfromord = 0;
   l_dl_dealaudit_struct_i->i_subprocess = 0;
   l_dl_dealaudit_struct_i->i_failreas_cd = 0;
   l_dl_dealaudit_struct_i->i_qty = 0;
	
	l_dl_dealaudit_struct_i->i_subfailreas_cd = 0;
   if (!strlen(p_dl_dealaudit_struct_h->h_subprocess)) l_dl_dealaudit_struct_i->i_subprocess = -1;
   if (!strlen(p_dl_dealaudit_struct_h->h_fail_cd))
	{
		l_dl_dealaudit_struct_i->i_failreas_cd = -1;
		l_dl_dealaudit_struct_i->i_subfailreas_cd =	-1;
	}
   

	EXEC SQL SELECT instr_code 
	INTO :chr_l_instrcode_a
	FROM DL_DEAL
	WHERE CLIENT = RTRIM(:p_dl_dealaudit_struct_h->h_dl_client) AND IDENTIY_NO = RTRIM(:p_dl_dealaudit_struct_h->h_indentity_no);

	CR_Proc_InstrQtyRound(p_dl_dealaudit_struct_h->h_qty,chr_l_instrcode_a,&l_quantity,l_debug_info_ptr);

   p_dl_dealaudit_struct_h->h_qty = l_quantity;

   

   EXEC SQL INSERT INTO DL_DEALAUDIT VALUES (:p_dl_dealaudit_struct_h:l_dl_dealaudit_struct_i);
   IS_ANY_ORA_ERROR;

   

   APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
      APL_IF_DEBUG
      {
         CO_ProcMonitor(   APL_OUT_FILE,
                     "Leaving Function CR_Mod_CLHAudTrail with success\n",
                     NULL,
                     NULL);
      }

	   APL_FREE(l_dl_dealaudit_struct_i);
      return(APL_SUCCESS);

   RETURN_FAILURE :
      APL_IF_DEBUG
      {
         CO_ProcMonitor(   APL_OUT_FILE,
                     "Leaving Function CR_Mod_CLHAudTrail with errors\n",
                     NULL,
                     NULL);
      }
	   APL_FREE(l_dl_dealaudit_struct_i);
      return(APL_FAILURE);

}


