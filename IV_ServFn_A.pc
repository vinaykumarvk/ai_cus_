




#include "stdio_64.h"
#include <string.h>
#include <stdlib.h>

#include "IV_Control_A.h"

EXEC SQL INCLUDE SQLCA;

//SP --function added to allow auth of billing service code and update billing account  
int IV_Mod_IVServUpdate(const long p_servcode,char *p_b_client,int *int_p_retstat,
               DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
char AE_IND;
EXEC SQL SELECT AE_IND INTO :AE_IND FROM SYS_IVCONTROLPARAM;
IS_ANY_ORA_ERROR
printf("AE_IND is [%c]",AE_IND);
printf("SP......p_b_client is %s",p_b_client);
if(AE_IND=='G')
{
                
		char chr_l_buffer[KEY_LENGTH];

                memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

                ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		CO_InsertErr(l_debug_info_ptr,ERR_AEGENERATED, chr_l_buffer,
                               APL_NULL_STRING, APL_NULL_STRING,
                               __LINE__, __FILE__);
APL_GOBACK_FAIL
}
else
{
EXEC SQL UPDATE IV_CLIENT_SERV_BASIS SET
	BILL_ACC=:p_b_client
	WHERE SERVICE_CD =:p_servcode;
 if ( sqlca.sqlcode < 0 )
        {
                char chr_l_buffer[KEY_LENGTH];

                memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

                ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

                *int_p_retstat = IV_CRITCAL_ERROR_IND;

                CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer,
                               APL_NULL_STRING, APL_NULL_STRING,
                               __LINE__, __FILE__);

                APL_GOBACK_FAIL
        }
	*int_p_retstat = IV_SUCCESS;

        APL_GOBACK_SUCCESS

        RETURN_SUCCESS:

                APL_IF_DEBUG
                {
                        CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Mod_IVServUpdate().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
                }

                return APL_SUCCESS;

        RETURN_FAILURE:

                APL_IF_DEBUG
                {
                        CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
IV_Mod_IVServUpdate().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
                }

                return APL_FAILURE;


}
}

int IV_Proc_ExistServFeeStruct(const long p_servcode, int *int_p_retstat, 
			  DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	EXEC SQL BEGIN DECLARE SECTION;

		int int_h_count = 0;
		short int int_i_count = 0;
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	EXEC SQL SELECT NVL( COUNT(*), 0 )
		 INTO :int_h_count INDICATOR :int_i_count
		 FROM IV_CLIENTFEE
		 WHERE (SERVICE_CD = :p_servcode);

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	if ( !int_h_count )
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		APL_GOBACK_FAIL
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Proc_ExistServFeeStruct().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
IV_Proc_ExistServFeeStruct().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_Proc_ExistOsAmt(const long p_servcode, int *int_p_retstat, 
		  DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	EXEC SQL BEGIN DECLARE SECTION;

		int int_h_count = 0;
		short int int_i_count = 0;
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	EXEC SQL SELECT NVL( COUNT(*), 0 )
		 INTO :int_h_count INDICATOR :int_i_count
		 FROM IV_LEDGER
		 WHERE ((SERVICE_CD = :p_servcode) AND
			(OUT_STAND_AMT > 0.0));

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	if ( !int_h_count )
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		APL_GOBACK_FAIL
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Proc_ExistOsAmt().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
IV_Proc_ExistOsAmt().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}



int IV_Proc_ExistOthServAcc(const long p_servcode, int *int_p_retstat, 
		       DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	

	extern int IV_Rtv_IVCNTLPARAM(SYS_IVCONTROLPARAM_STRUCT *l_sys_ivcntlparam_struct, 
				    int *int_l_retstat, 
				    DEBUG_INFO_STRUCT_H **l_debug_info_ptr);

	

	int int_l_status = 0;
	SYS_IVCONTROLPARAM_STRUCT l_sys_ivcntlparam_struct;

	EXEC SQL BEGIN DECLARE SECTION;

		int int_h_count = 0;
		char chr_h_bl_upto_dt[APL_DATE_LEN];
		short int int_i_count = 0;
		struct sqlca sqlca;

	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	memset(l_sys_ivcntlparam_struct.b_prev_date, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_sys_ivcntlparam_struct.b_upto_date, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_sys_ivcntlparam_struct.b_processdt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_sys_ivcntlparam_struct.b_dlv_date, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_sys_ivcntlparam_struct.last_dlv_date, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_sys_ivcntlparam_struct.archival_dt, APL_NULL_CHAR, APL_DATE_LEN);
	memset(l_sys_ivcntlparam_struct.last_rpt_date, APL_NULL_CHAR, APL_DATE_LEN);

	l_sys_ivcntlparam_struct.generate_ind = NULL;
	l_sys_ivcntlparam_struct.b_gen_ind = NULL;
	l_sys_ivcntlparam_struct.ae_ind = NULL;

	int_l_status = 0;

	if ( APL_FAILURE == IV_Rtv_IVCNTLPARAM(&l_sys_ivcntlparam_struct, &int_l_status, 
					     l_debug_info_ptr) )
	{
		if ( int_l_status == IV_CRITCAL_ERROR_IND )
		{
			*int_p_retstat = int_l_status;

			APL_GOBACK_FAIL
		}
		else if ( int_l_status == IV_NO_DATA_FOUND_ERR )
		{
			

			*int_p_retstat = int_l_status;

			APL_GOBACK_FAIL
		}
	}

	strcpy(chr_h_bl_upto_dt, l_sys_ivcntlparam_struct.b_upto_date);

	EXEC SQL SELECT NVL( COUNT(*), 0 )
		 INTO :int_h_count INDICATOR :int_i_count
		 FROM IV_SERV_OTH
		 WHERE ((SERVICE_CD = :p_servcode) AND
			(B_UPTO_DATE = :chr_h_bl_upto_dt));

	if ( sqlca.sqlcode < 0 )
	{
		char chr_l_buffer[KEY_LENGTH];

		memset(chr_l_buffer, APL_NULL_CHAR, KEY_LENGTH);

		ltoa_r(sqlca.sqlcode, chr_l_buffer, KEY_LENGTH - 1);

		*int_p_retstat = IV_CRITCAL_ERROR_IND;

		CO_InsertErr(l_debug_info_ptr, DB_ERR_NO, chr_l_buffer, 
			       APL_NULL_STRING, APL_NULL_STRING, 
			       __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	if ( !int_h_count )
	{
		*int_p_retstat = IV_NO_DATA_FOUND_ERR;

		APL_GOBACK_FAIL
	}

	*int_p_retstat = IV_SUCCESS;

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting successfully out of \
IV_Proc_ExistOthServAcc().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_SUCCESS;

	RETURN_FAILURE:

		APL_IF_DEBUG
		{
			CO_ProcMonitor(APL_OUT_FILE, "Exiting unsuccessfully out of\
IV_Proc_ExistOthServAcc().\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		}

		return APL_FAILURE;
}
