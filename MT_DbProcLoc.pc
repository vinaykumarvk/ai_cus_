













#include "CO_HostStructdef.h"

EXEC SQL INCLUDE SQLCA.H;




int CR_Mod_DBLoc(MT_LOCATION_STRUCT_H *p_mt_location_struct_h_b,INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,DEBUG_INFO_STRUCT_H **l_debug_info_ptr) 
{
  MT_LOCATION_STRUCT_I *l_mt_location_struct_ia;

  struct sqlca sqlca;

  char chr_acc_stamp_compare[APL_DATE_LEN];
  char chr_sys_access_stamp[APL_DATE_LEN];
  short p_i_maker, p_i_makerdt, p_i_checker, p_i_checkerdt, p_i_access_stamp;
  short p_i_access_stamp_compare;
  short p_i_locn_status = 0;
  int int_error_flag = APL_SUCCESS;
  int int_l_rowexists = 0;
#ifdef APL_THREADS
    APL_SET_CONTEXT
    EXEC SQL CONTEXT USE :my_ctx_local;
#endif

APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Function GDBUpdLocFn\n",
		NULL,p_intl_envdatastruct_h);
 }

  l_mt_location_struct_ia=(MT_LOCATION_STRUCT_I*)calloc(1,sizeof(MT_LOCATION_STRUCT_I));

  APL_MALLOC_FAIL(l_mt_location_struct_ia)

  p_i_maker =0;
  p_i_makerdt =0;
  p_i_checker =0;
  p_i_checkerdt =0;
  p_i_access_stamp =0;
  p_i_access_stamp_compare =0;


APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Function GDBUpdLocFn\n",
		NULL,p_intl_envdatastruct_h);
 }

 if (!strlen(p_mt_location_struct_h_b->h_loccode)) l_mt_location_struct_ia->i_loccode =-1;
     else l_mt_location_struct_ia->i_loccode =0;
 if (!strlen(p_mt_location_struct_h_b->h_maker)) l_mt_location_struct_ia->i_maker =-1; 
     else l_mt_location_struct_ia->i_maker =0;
 if (!strlen(p_mt_location_struct_h_b->h_maker_dt)) l_mt_location_struct_ia->i_maker_dt =-1; 
     else l_mt_location_struct_ia->i_maker_dt =0;
 if (!strlen(p_mt_location_struct_h_b->h_pos_stat)) l_mt_location_struct_ia->i_status_pos =-1; 
     else l_mt_location_struct_ia->i_status_pos =0;
 if (!strlen(p_mt_location_struct_h_b->h_manifld_ind)) l_mt_location_struct_ia->i_manifld_ind =-1; 
     else l_mt_location_struct_ia->i_manifld_ind =0;
 if (!strlen(p_mt_location_struct_h_b->h_status)) l_mt_location_struct_ia->i_status =-1; 
     else l_mt_location_struct_ia->i_status =0;
 if (!strlen(p_mt_location_struct_h_b->h_locdetail)) l_mt_location_struct_ia->i_locdetail =-1; 
     else l_mt_location_struct_ia->i_locdetail =0;
 if (!strlen(p_mt_location_struct_h_b->h_checker)) l_mt_location_struct_ia->i_checker =-1; 
     else l_mt_location_struct_ia->i_checker =0;
 if (!strlen(p_mt_location_struct_h_b->h_checker_dt)) l_mt_location_struct_ia->i_checker_dt =-1; 
     else l_mt_location_struct_ia->i_checker_dt =0;
 if (!strlen(p_mt_location_struct_h_b->h_physical_ind)) l_mt_location_struct_ia->i_physical_ind =-1; 
     else l_mt_location_struct_ia->i_physical_ind =0;
 if (!strlen(p_mt_location_struct_h_b->h_iso_loccode)) l_mt_location_struct_ia->i_iso_loccode =-1;
		else l_mt_location_struct_ia->i_iso_loccode =0;
		
  
 
 if (!strlen(p_mt_location_struct_h_b->h_access_stamp)) l_mt_location_struct_ia->i_access_stamp =-1; 
     else l_mt_location_struct_ia->i_access_stamp =0;

	

 if (!strlen(p_mt_location_struct_h_b->h_avail_flag)) l_mt_location_struct_ia->i_avail_flag =-1;
        else l_mt_location_struct_ia->i_avail_flag =0;

 
if (!strlen(p_mt_location_struct_h_b->h_depo)) l_mt_location_struct_ia->i_depo =-1;
        else l_mt_location_struct_ia->i_depo =0;

 if(CO_RtvSysDtTime(chr_sys_access_stamp,l_debug_info_ptr) !=APL_SUCCESS)
	{
	APL_GOBACK_FAIL
	}
	

  
  if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_INPUT))
	{

APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Input h_mode of Function GDBUpdLocFn\n",
		NULL,p_intl_envdatastruct_h);
 }

	strcpy(p_mt_location_struct_h_b->h_status,STATUS_UAUTH);/*Smita - Changed statua struct var - HDFCCA_Base Ver*/

      	l_mt_location_struct_ia->i_status =0;
   	strcpy(p_mt_location_struct_h_b->h_maker,p_intl_envdatastruct_h->usr);
	l_mt_location_struct_ia->i_maker=0;
  	strcpy(p_mt_location_struct_h_b->h_maker_dt,chr_sys_access_stamp);
	l_mt_location_struct_ia->i_maker_dt=0;
	strcpy(p_mt_location_struct_h_b->h_access_stamp,chr_sys_access_stamp);
	l_mt_location_struct_ia->i_access_stamp =0;

	EXEC SQL INSERT INTO MT_LOCATION VALUES (:p_mt_location_struct_h_b:l_mt_location_struct_ia);

	IS_ANY_ORA_ERROR_AND_DUPLICATE(ERR_LOCN_EXISTS,APL_NULL_STRING,APL_NULL_STRING,APL_NULL_STRING)
        }

  if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_MODIFY))
	{
  	p_i_checker =-1;
  	p_i_checkerdt =-1;
	strcpy(p_mt_location_struct_h_b->h_checker,APL_NULL_STRING);
	strcpy(p_mt_location_struct_h_b->h_checker_dt,APL_NULL_STRING);

APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Modify h_mode of Function GDBUpdLocFn\n",
		NULL,p_intl_envdatastruct_h);
 }

        
	EXEC SQL SELECT ACCESS_STAMP
		  INTO :chr_acc_stamp_compare:p_i_access_stamp_compare
		  FROM MT_LOCATION
	       	  WHERE LOCATION_CD =:p_mt_location_struct_h_b->h_loccode
                  FOR UPDATE OF LOCATION_DESC;

	IS_ANY_ORA_ERROR

	if (!strcmp(p_mt_location_struct_h_b->h_access_stamp,chr_acc_stamp_compare))
	   {
	strcpy(p_mt_location_struct_h_b->h_access_stamp,chr_sys_access_stamp);
	l_mt_location_struct_ia->i_access_stamp =0;
        strcpy(p_mt_location_struct_h_b->h_status,STATUS_UAUTH);
	l_mt_location_struct_ia->i_status =0;

	EXEC SQL UPDATE MT_LOCATION SET 
            	MAKER =:p_intl_envdatastruct_h->usr:p_i_maker,
		MAKER_DT =:chr_sys_access_stamp:p_i_makerdt,
		CHECKER =:p_mt_location_struct_h_b->h_checker:p_i_checker,
		CHECKER_DT =:p_mt_location_struct_h_b->h_checker:p_i_checkerdt,
            	STATUS =:p_mt_location_struct_h_b->h_status:l_mt_location_struct_ia->i_status,
            	STATUS_POS =:p_mt_location_struct_h_b->h_pos_stat:l_mt_location_struct_ia->i_status_pos,
            	MANIFLD_IND=:p_mt_location_struct_h_b->h_manifld_ind:l_mt_location_struct_ia->i_manifld_ind,
            	LOCATION_DESC=:p_mt_location_struct_h_b->h_locdetail:l_mt_location_struct_ia->i_locdetail,
            	PHYSICAL_IND =:p_mt_location_struct_h_b->h_physical_ind:l_mt_location_struct_ia->i_physical_ind,
					ISO_LOCNCD = :p_mt_location_struct_h_b->h_iso_loccode:l_mt_location_struct_ia->i_iso_loccode,
					AVAIL_IND = :p_mt_location_struct_h_b->h_avail_flag:l_mt_location_struct_ia->i_avail_flag,
               DEPO = :p_mt_location_struct_h_b->h_depo:l_mt_location_struct_ia->i_depo,
		ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp
	       	  	WHERE LOCATION_CD =:p_mt_location_struct_h_b->h_loccode;
					 
					
              
	IS_ANY_ORA_ERROR;	
	   }
	else 
	   {
		if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
	   } 
	}
	

  if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_AUTHORISE))
	{

APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Authorize h_mode of Function GDBUpdLocFn\n",
		NULL,p_intl_envdatastruct_h);
 }

	memset(p_mt_location_struct_h_b->h_status, NULL, APL_STATUS_LEN);

        
	EXEC SQL SELECT ACCESS_STAMP, STATUS
		 INTO 	:chr_acc_stamp_compare:p_i_access_stamp_compare,
		 	:p_mt_location_struct_h_b->h_status:p_i_locn_status
		 FROM MT_LOCATION
	       	  WHERE LOCATION_CD =:p_mt_location_struct_h_b->h_loccode
                  FOR UPDATE OF LOCATION_DESC;

        IS_ANY_ORA_ERROR

	if (!strcmp(p_mt_location_struct_h_b->h_access_stamp,chr_acc_stamp_compare))
	   {
   	if(strcmp(p_mt_location_struct_h_b->h_status,STATUS_DEL_UAUTH))
	    {
	    strcpy(p_mt_location_struct_h_b->h_access_stamp,chr_sys_access_stamp);
	    l_mt_location_struct_ia->i_access_stamp =0;
   	    strcpy(p_mt_location_struct_h_b->h_checker,p_intl_envdatastruct_h->usr);
	    l_mt_location_struct_ia->i_checker=0;
  	    strcpy(p_mt_location_struct_h_b->h_checker_dt,chr_sys_access_stamp);
	    l_mt_location_struct_ia->i_checker_dt=0;
            strcpy(p_mt_location_struct_h_b->h_status,STATUS_AUTH);
	    l_mt_location_struct_ia->i_status =0;

	    EXEC SQL UPDATE MT_LOCATION SET 
           	CHECKER =:p_intl_envdatastruct_h->usr:p_i_checker,
            	CHECKER_DT =:chr_sys_access_stamp:p_i_access_stamp,
		ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp,
            	STATUS =:p_mt_location_struct_h_b->h_status:l_mt_location_struct_ia->i_status
			WHERE LOCATION_CD =:p_mt_location_struct_h_b->h_loccode;

		IS_ANY_ORA_ERROR;	
		}
   	    else 
	    {
	    EXEC SQL DELETE MT_LOCATION 
	    WHERE LOCATION_CD =:p_mt_location_struct_h_b->h_loccode;
            IS_ANY_ORA_ERROR
	    }
	   }
	else 
	   {
		if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
	   } 
	}


  if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_RESET))
	{

APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Reset h_mode of Function GDBUpdLocFn\n",
		NULL,p_intl_envdatastruct_h);
 }

	memset(p_mt_location_struct_h_b->h_status, NULL, APL_STATUS_LEN);

        

	EXEC SQL SELECT ACCESS_STAMP, STATUS
		 INTO 	:chr_acc_stamp_compare:p_i_access_stamp_compare,
		 	:p_mt_location_struct_h_b->h_status:p_i_locn_status
		 FROM MT_LOCATION
	       	  WHERE LOCATION_CD =:p_mt_location_struct_h_b->h_loccode
                  FOR UPDATE OF LOCATION_DESC;

        IS_ANY_ORA_ERROR

	if (!strcmp(p_mt_location_struct_h_b->h_access_stamp,chr_acc_stamp_compare))
	   {
   	if(!strcmp(p_mt_location_struct_h_b->h_status,STATUS_DEL_UAUTH))
	    {
	    strcpy(p_mt_location_struct_h_b->h_access_stamp,chr_sys_access_stamp);
	    l_mt_location_struct_ia->i_access_stamp =0;
   	    strcpy(p_mt_location_struct_h_b->h_checker,p_intl_envdatastruct_h->usr);
	    l_mt_location_struct_ia->i_checker=0;
  	    strcpy(p_mt_location_struct_h_b->h_checker_dt,chr_sys_access_stamp);
	    l_mt_location_struct_ia->i_checker_dt=0;
            strcpy(p_mt_location_struct_h_b->h_status,STATUS_AUTH);
	    l_mt_location_struct_ia->i_status =0;

	    EXEC SQL UPDATE MT_LOCATION SET 
           	CHECKER =:p_intl_envdatastruct_h->usr:p_i_checker,
            	CHECKER_DT =:chr_sys_access_stamp:p_i_access_stamp,
		ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp,
            	STATUS =:p_mt_location_struct_h_b->h_status:l_mt_location_struct_ia->i_status
			WHERE LOCATION_CD =:p_mt_location_struct_h_b->h_loccode;

		IS_ANY_ORA_ERROR;	
		}
	   }
	else 
	   {
		if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
	   } 
	}

  if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_DELETE))
	{
  	p_i_checker =-1;
  	p_i_checkerdt =-1;
	strcpy(p_mt_location_struct_h_b->h_checker,APL_NULL_STRING);
	strcpy(p_mt_location_struct_h_b->h_checker_dt,APL_NULL_STRING);

APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Delete h_mode of Function GDBUpdLocFn\n",
		NULL,p_intl_envdatastruct_h);
 }


        
	EXEC SQL SELECT ACCESS_STAMP
		  INTO :chr_acc_stamp_compare:p_i_access_stamp_compare
		  FROM MT_LOCATION
	       	  WHERE LOCATION_CD =:p_mt_location_struct_h_b->h_loccode
                  FOR UPDATE OF LOCATION_DESC;

        IS_ANY_ORA_ERROR

	if (!strcmp(p_mt_location_struct_h_b->h_access_stamp,chr_acc_stamp_compare))
	   {
	strcpy(p_mt_location_struct_h_b->h_access_stamp,chr_sys_access_stamp);
	l_mt_location_struct_ia->i_access_stamp =0;
	strcpy(p_mt_location_struct_h_b->h_status,STATUS_DEL_UAUTH);
	l_mt_location_struct_ia->i_status =0;

	EXEC SQL UPDATE MT_LOCATION SET 
            	MAKER =:p_intl_envdatastruct_h->usr:p_i_maker,
		MAKER_DT =:chr_sys_access_stamp:p_i_makerdt,
		CHECKER =:p_mt_location_struct_h_b->h_checker:p_i_checker,
		CHECKER_DT =:p_mt_location_struct_h_b->h_checker:p_i_checkerdt,
		ACCESS_STAMP =:chr_sys_access_stamp:p_i_access_stamp,
            	STATUS =:p_mt_location_struct_h_b->h_status:l_mt_location_struct_ia->i_status
			WHERE LOCATION_CD =:p_mt_location_struct_h_b->h_loccode;

	IS_ANY_ORA_ERROR
	   }
	else 
	   {
		if (CO_InsertErr
			(l_debug_info_ptr,
			 ERR_ACCESSSTAMP_CHGD, 
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 APL_NULL_STRING,
			 __LINE__,
			 __FILE__
			) != APL_SUCCESS)
			APL_GOBACK_FAIL
	   } 
	}

  if (int_error_flag == APL_FAILURE)
	{
	APL_GOBACK_FAIL
	}
  APL_GOBACK_SUCCESS

  RETURN_SUCCESS :
	{

APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Function GDBUpdLocFn successful\n",
		NULL,p_intl_envdatastruct_h);
 }
	free(l_mt_location_struct_ia);
	return(APL_SUCCESS);
	}
  RETURN_FAILURE :
	{

APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Function GDBUpdLocFn unsuccessful\n",
		NULL,p_intl_envdatastruct_h);
 }

	free(l_mt_location_struct_ia);
	return(APL_FAILURE);
	}

}

int CR_Chk_LocMkrChkr(char *p_location,char *p_user,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
  struct sqlca sqlca;
  char maker[15];
  short p_i_maker = 0;
  int int_error_flag = APL_SUCCESS;

#ifdef APL_THREADS
    APL_SET_CONTEXT
    EXEC SQL CONTEXT USE :my_ctx_local;
#endif

APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Function GDBUsrAuthLocFn\n",
		NULL,NULL);
 }
  
  
  if (!strlen(p_location))
	{
	APL_DATA_MISSING("Location Code",APL_NULL_STRING,APL_NULL_STRING);
   	int_error_flag = APL_FAILURE;
	} 

  if (!strlen(p_user))
	{
	APL_DATA_MISSING("User",APL_NULL_STRING,APL_NULL_STRING);
   	int_error_flag = APL_FAILURE;
	}
 
  if (int_error_flag == APL_FAILURE)
	{
	APL_GOBACK_FAIL
	}
  EXEC SQL VAR maker IS STRING(15);
  EXEC SQL SELECT MAKER 
		INTO :maker:p_i_maker
		FROM MT_LOCATION
			WHERE LOCATION_CD =:p_location;

	IS_ANY_ORA_ERROR	

  if (p_user == maker)
	{
	 if (CO_InsertErr
			(l_debug_info_ptr,
			ERR_MAKER_CHECKER_SAME, 
			APL_NULL_STRING,
			APL_NULL_STRING,
			APL_NULL_STRING,
			__LINE__,
			__FILE__
			) != APL_SUCCESS)
	APL_GOBACK_FAIL
   	int_error_flag = APL_FAILURE;
	}

  if (int_error_flag == APL_FAILURE)
	{
	APL_GOBACK_FAIL
	}

  APL_GOBACK_SUCCESS

  RETURN_SUCCESS :
	{

APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "GDBUsrAuthLocFn Successful\n",
		NULL,NULL);
 }
	return(APL_SUCCESS);
	}
  RETURN_FAILURE :
	{

APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "GDBUsrAuthLocFn unsuccessful\n",
		NULL,NULL);
 }

	return(APL_FAILURE);
	}
 
}

int CR_Chk_InstrAtLoc(char *p_location,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
  struct sqlca sqlca;
  int int_p_locexist =0;
  short p_i_LocExist =0;
   int int_error_flag = APL_SUCCESS;

#ifdef APL_THREADS
    APL_SET_CONTEXT
    EXEC SQL CONTEXT USE :my_ctx_local;
#endif

APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Function CR_Chk_InstrAtLoc \n",
		NULL,NULL);
 }

  EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_p_locexist:p_i_LocExist
		FROM MT_INSTRUMENT
		WHERE LOCATION_CD =:p_location; 
		
  IS_ANY_ORA_ERROR 

 if (int_p_locexist ==0)
	{
	APL_GOBACK_SUCCESS
	}
	else APL_GOBACK_FAIL

  RETURN_SUCCESS :
	{

APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Function CR_Chk_InstrAtLoc is successful\n",
		NULL,NULL);
 }

	return(APL_SUCCESS);
	}
  RETURN_FAILURE :
	{

APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "CDBLocInInstrFn could not find Location given in the Instrurity table\n",
		NULL,NULL);
 }
	return(APL_FAILURE);
	}
}

int CR_Chk_PosAtLoc(char *p_location,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
  struct sqlca sqlca;
  int int_p_locexist =0;
  short p_i_LocExist =0;
   int int_error_flag = APL_SUCCESS;

#ifdef APL_THREADS
    APL_SET_CONTEXT
    EXEC SQL CONTEXT USE :my_ctx_local;
#endif

APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Function CR_Chk_PosAtLoc\n",
		NULL,NULL);
 }

  EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_p_locexist:p_i_LocExist
		FROM DL_SAFEK
		WHERE LOCATION_CD =:p_location; 
		
  IS_ANY_ORA_ERROR 

 if (int_p_locexist ==0)
	{
	APL_GOBACK_SUCCESS
	}
	else APL_GOBACK_FAIL

  RETURN_SUCCESS :
	{
  
APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Function CR_Chk_PosAtLoc successful in finding location in Positions table\n",
		NULL,NULL);
 }
	return(APL_SUCCESS);
	}
  RETURN_FAILURE :
	{
APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Function CR_Chk_PosAtLoc could nit find location in Safekeeping table\n",
		NULL,NULL);
 }

	return(APL_FAILURE);
	}
}

int CR_Chk_PymtAtLoc(char *p_location,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
  struct sqlca sqlca;
  int int_p_locexist =0;
  short p_i_LocExist =0;
   int int_error_flag = APL_SUCCESS;
  
#ifdef APL_THREADS
    APL_SET_CONTEXT
    EXEC SQL CONTEXT USE :my_ctx_local;
#endif

APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Function CR_Chk_PymtAtLoc\n",
		NULL,NULL);
 }

  EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_p_locexist:p_i_LocExist
		FROM CACHEQUE
		WHERE LOCATION_CD =:p_location; 
		
  IS_ANY_ORA_ERROR 

 if (int_p_locexist ==0)
	{
	APL_GOBACK_SUCCESS
	}
	else APL_GOBACK_FAIL

  RETURN_SUCCESS :
	{
  
APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Function CR_Chk_PymtAtLoc Successful\n",
		NULL,NULL);
 }
	return(APL_SUCCESS);
	}
  RETURN_FAILURE :
	{
APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "CDBLocInPmntFn unsuccessful\n",
		NULL,NULL);
 }
	return(APL_FAILURE);
	}
}

int CR_Chk_TrdAtLoc(char *p_location,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
  struct sqlca sqlca;
  int int_p_locexist =0;
  short p_i_LocExist =0;
   int int_error_flag = APL_SUCCESS;
  
#ifdef APL_THREADS
    APL_SET_CONTEXT
    EXEC SQL CONTEXT USE :my_ctx_local;
#endif

APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "Entered Function CR_Chk_TrdAtLoc\n",
		NULL,NULL);
 }

  EXEC SQL SELECT NVL(COUNT(*),0) INTO :int_p_locexist:p_i_LocExist
		FROM DL_DEAL 
		WHERE LOCATION_CD =:p_location; 
		
  IS_ANY_ORA_ERROR 

 if (int_p_locexist ==0)
	{
	APL_GOBACK_SUCCESS
	}
	else APL_GOBACK_FAIL

  RETURN_SUCCESS :
	{
  
APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "CDBLocInTrdFn successful\n",
		NULL,NULL);
 }
	return(APL_SUCCESS);
	}
  RETURN_FAILURE :
	{
  
APL_IF_DEBUG
 {
  CO_ProcMonitor(APL_OUT_FILE, "CDBLocInTrdFn unsuccessful\n",
		NULL,NULL);
 }
	return(APL_FAILURE);
	}
}

