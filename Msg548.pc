
#include "CA_Common.h"
#include<DL_Csd.h>
#include<stdlib.h>
#include "MS_Swift.h"
#include "CO_OthStructdef.h"
#include "CO_Commdef.h"
#include "BT_Common.h"

EXEC SQL INCLUDE SQLCA.H;

#define	RTV_SYSTEM_DATA
#define  MSG_PARAM_STRUCT_SEP ";" 

char **l_chr_arglist= NULL;
char **l_chr_arglist2= NULL;
	/* Added by kotubabu for Linux Migration -Start*/
    #ifdef OS_LINUX
FILE	*g_inifile = NULL;
FILE	*g_logfile = NULL;
    #else
    FILE *g_inifile = APL_OUT_FILE;
    FILE *g_logfile = APL_OUT_FILE;
    #endif
   /* Added by kotubabu for Linux Migration-End*/

char						chr_g_progname			[APL_BATCH_PROGNAME_LEN]= APL_NULL_STRING;
char						chr_g_key					[APL_BATCH_KEY_LEN]= APL_NULL_STRING;
char						chr_g_start_date		[APL_DATE_LEN]= APL_NULL_STRING;
char						chr_g_funccode			[CA_FUNC_CD_LEN]= APL_NULL_STRING;
char						chr_g_sys_date			[APL_DATE_LEN]= APL_NULL_STRING;
char						chr_g_sys_date_time	[APL_DATE_LEN]= APL_NULL_STRING;
char						chr_g_restart_data_h	[APL_RESTARTDATA_LENGTH]= APL_NULL_STRING;
char						chr_g_client			[APL_CLIENT_LENGTH]= APL_NULL_STRING;
char						chr_g_log_buff[MSG_LENGTH]= APL_NULL_STRING;
short						g_restart_data_i;
char						g_chr_outmsg_dir[PATH_LENGTH] = APL_NULL_STRING;
char chr_g_brok_dir[PATH_LENGTH] = APL_NULL_STRING;
char g_param_str[5000] = APL_NULL_STRING;


int main(int argc, char ** argv)
{

	DEBUG_INFO_STRUCT_H			**l_debug_info_ptr=NULL,
										*l_debug_info_struct=NULL;
    #ifdef OS_LINUX     /* Added by kotubabu for Linux Migration-Start*/
     g_inifile = APL_OUT_FILE;
	 g_logfile = APL_OUT_FILE;
    #endif                /* Added by kotubabu for Linux Migration-End*/
	INTL_ENV_DATA_STRUCT_H	p_intlenv_data_struct_h;
	char						chr_inifile[PATH_LENGTH]= APL_NULL_STRING;
	char						chr_logfile[PATH_LENGTH]= APL_NULL_STRING;
	char						chr_custody_id[APL_USERID_LEN];
	char						chr_warn_cd_eventunauth[CA_ALERT_CODE_LEN]={ALERT_EVT_UAUTH};

	EXEC SQL BEGIN DECLARE SECTION;
		char chr_uname[APL_USERID_LEN];
		char chr_passwd[APL_PASSWD_LEN];
		EXEC SQL VAR chr_uname IS STRING;
		EXEC SQL VAR chr_passwd IS STRING;
	EXEC SQL END DECLARE SECTION; 


	l_debug_info_ptr = &l_debug_info_struct;

	/*if(CO_Get_DBConnect(l_debug_info_ptr) == APL_FAILURE)
	{
		APL_GOBACK_FAIL

	}*/

	strcpy(chr_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_inifile,"/intl_sun.cfg");

	if ( ( g_inifile=fopen(chr_inifile,"r") ) == NULL)
		exit(-1);	

	APL_FETCH_DB_LOGIN_DETAILS(g_inifile,chr_custody_id,chr_uname,chr_passwd,APL_OUT_FILE,l_debug_info_ptr)
		EXEC SQL CONNECT :chr_uname IDENTIFIED BY :chr_passwd;
	IS_ANY_ORA_ERROR; 
	if( sqlca.sqlcode != 0 )
		printf("sqlca.sqlcode is|%d|\n",sqlca.sqlcode); 	

	if ( CO_Rtv_RptFileName("2F",
				APL_LOGFILE_DESC,
				100,
				argv[5],
				argv,
				&g_logfile,
				l_debug_info_ptr) ==APL_FAILURE) 
	{
		exit(-1);
	}


	if ( argc < 4 )
	{
		CO_ProcMonitor(g_logfile,"All Arguments expected by  program not passed \n",NULL
				,NULL);
		APL_GOBACK_FAIL
	}
	strcpy(chr_g_progname,	argv[0]);
	strcpy(chr_g_key,			argv[1]);
	strcpy(chr_g_start_date,	argv[2]);
	strcpy(chr_g_funccode,argv[5]);

	if ( CO_RtvSysParams(l_debug_info_ptr) == APL_FAILURE)
		APL_GOBACK_FAIL;
	if(CO_RtvSysDt(chr_g_sys_date,l_debug_info_ptr)==APL_FAILURE)
		APL_GOBACK_FAIL;
	
	memset(g_chr_outmsg_dir,APL_NULL_CHAR,PATH_LENGTH);
	if (CO_ReadToken(g_inifile,"INTL_MS_OUT_PATH",g_chr_outmsg_dir,l_debug_info_ptr) != APL_SUCCESS)
	{
		return(APL_FAILURE);
	}
	memset(chr_g_brok_dir,APL_NULL_CHAR,sizeof(chr_g_brok_dir));
	if (CO_ReadToken(g_inifile,"INTL_REP_PATH",chr_g_brok_dir,l_debug_info_ptr) != APL_SUCCESS)
 	{
 		return(APL_FAILURE);
 	}

	if ( NEW_DL_Proc_548Msg(g_logfile,argv,&p_intlenv_data_struct_h,l_debug_info_ptr) == APL_FAILURE)
		APL_GOBACK_FAIL

	if ( CO_ReportFileScript(g_param_str,
                                                                argv,
                                                                chr_g_brok_dir,
                                                                g_logfile,
                                                                l_debug_info_ptr)== APL_FAILURE)
                APL_GOBACK_FAIL

/*	if ( DL_Proc_548Msg(g_logfile,argv,&p_intlenv_data_struct_h,l_debug_info_ptr) == APL_FAILURE)
		APL_GOBACK_FAIL;*/
	printf("\n ********************************Vaibhav*********************************");

RETURN_SUCCESS:
	{
		if(APL_FAILURE == BT_Status_Completed(argv[0],argv[1],argv[2],l_debug_info_ptr))
		{
			APL_GOBACK_FAIL
		}
		EXEC SQL COMMIT WORK;
		if(sqlca.sqlcode != 0)
			APL_GOBACK_FAIL
				exit(0);


		/*		EXEC SQL UPDATE SYS_BATCHPROC
				SET status 			= 'completed'
				WHERE process_name		=	RTRIM(:argv[0])
				AND	proc_init			=	RTRIM(:argv[1])
				AND	STARTDATE	=	:argv[2]
				AND	status		=	'started';
				IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"BATCH_IN_PROC",chr_g_progname,chr_g_key)

				EXEC SQL COMMIT;
				IS_ANY_ORA_ERROR
				CO_ProcMonitor(g_logfile,"RECORD COMMITTED \n",NULL,NULL);

				sprintf(chr_g_log_buff," 548 Message Generation Completed successfully\n");
				CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);
				fclose(g_logfile);
				exit(0);
				*/
	}
RETURN_FAILURE:
	{
		sprintf(chr_g_log_buff,"548 Message Generation exiting with failure\n");
		CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);
		fclose(g_logfile);
		exit(-1);
	}
}
/*Nikhil paste*/
int	DL_Proc_548Msg(FILE *g_logfile,char **argv,INTL_ENV_DATA_STRUCT_H	*p_intlenv_data_struct_h,
						DEBUG_INFO_STRUCT_H			**l_debug_info_ptr)				
{	
	struct sqlca sqlca;

	char  chr_g_log_buffer[BUFFER_LEN] = APL_NULL_STRING;
	FILE  *l_ptr_ini_file = NULL;
	char  chr_l_inifile[100]= APL_NULL_STRING;
	int l_int_num=0;
	int	int_result			=	0;
	int	int_l_noevemsgs		=	0;
	int   int_l_ismsgagain   = 0;      
	int   int_l_datecmp_proxy_sys = 0; 
	short	i_rowid=0;
	int counter=0;
	int counter1=0;
	int counter2=0;
	int counter4=0;
	int i = 0;
	char                 val[80];
	char chr_h_prepdate_new1[APL_DATE_LEN] = APL_NULL_STRING;
	short i_prepdate_new1 =0;
	char l_batch_no[8] = APL_NULL_STRING;
	char l_new_batch_no[8] = APL_NULL_STRING;


	char chr_l_msg_file[31]=APL_NULL_STRING;
	char l_chr_speedy[2]    =  APL_NULL_STRING;
	char l_chr_nonspeedy[2] =  APL_NULL_STRING;
	char l_chr_all[2]       =  APL_NULL_STRING;
	char l_chr_clientbrok[2]  =  APL_NULL_STRING;
	char l_broker_cd[11]=       APL_NULL_STRING; 
	char chr_l_msgfilename[11] =  APL_NULL_STRING;
	char l_flag;  /* Vaibhav 17-July-2006 */          
	short  i_msgfilename;	

	char 	chr_warn_cd_instrunauth[CA_ALERT_CODE_LEN] ={ALERT_INSTR_UAUTH};
	char 	chr_warn_cd_instrnf[CA_ALERT_CODE_LEN] ={ALERT_INSTR_NOTFND};

	char 	chr_warn_cd_DPunauth[CA_ALERT_CODE_LEN] ={ALERT_DP_UAUTH};
	char 	chr_warn_cd_DPnf[CA_ALERT_CODE_LEN] ={ALERT_DP_NOTFND};
	char  chr_warn_cd_InvalidCD[CA_ALERT_CODE_LEN]={ALERT_DEPO_INVALID};
	int   *int_p_result = 0;

	FILE  *l_ptr_outmsg_file = NULL;	
	FILE  *l_ptr_broktemp_file = NULL;	
	char  chr_l_outmsg_dir[PATH_LENGTH]= APL_NULL_STRING;
	char  chr_l_outmsg_file_name[FILENAME_LEN_A]= APL_NULL_STRING;
	char  chr_l_broktemp_dir[PATH_LENGTH]= APL_NULL_STRING;
	char  chr_l_broktemp_file_name[PATH_LENGTH]= APL_NULL_STRING;
	char  chr_file_name[FILENAME_LEN_A]= APL_NULL_STRING;
	char  chr_l_brok_dir[PATH_LENGTH]= APL_NULL_STRING;
	char  l_file_seq[10] = APL_NULL_STRING;
	char  l_buf2[502] = APL_NULL_STRING;


	MS_MSGLOG_STRUCT    l_ms_msglog_struct_h;   /* Structure for MS_MSGLOG*/
	MS_MSGLOG_I_STRUCT    l_ms_msglog_struct_i;   /* Structure for MS_MSGLOG*/

	INTL_REPT_STRUCT_H            *l_intl_rept_struct_ha  =NULL;

	l_intl_rept_struct_ha   = (INTL_REPT_STRUCT_H *)calloc(1, sizeof(INTL_REPT_STRUCT_H));
	APL_MALLOC_FAIL(l_intl_rept_struct_ha);	

	EXEC SQL BEGIN DECLARE SECTION;
		EXEC SQL VAR l_ms_msglog_struct_h.msg IS STRING;
		EXEC SQL VAR chr_g_restart_data_h is string;
	EXEC SQL END DECLARE SECTION;
	
	memset(&l_ms_msglog_struct_h,NULL,sizeof(MS_MSGLOG_STRUCT));
	memset(&l_ms_msglog_struct_i,NULL,sizeof(MS_MSGLOG_I_STRUCT));
	memset(l_ms_msglog_struct_h.msg,APL_NULL_CHAR,31);

	if(CO_RtvSysDtTime(chr_g_sys_date_time,l_debug_info_ptr)== APL_FAILURE)		
		APL_GOBACK_FAIL;

	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

	if ( ( l_ptr_ini_file=fopen(chr_l_inifile,"r") ) == NULL)
	{
		APL_GOBACK_FAIL;
	}

	if(APL_FAILURE == CO_SplitStr(argv[9],
				';',
				&l_int_num,&l_chr_arglist))
	{
		CO_ProcMonitor(g_logfile, "Failure from StrSplitFn", NULL, NULL);
		APL_GOBACK_FAIL

	}

	if (l_int_num != 7)  /* Vaibhav 12-07-2006 */
	{
		printf("\n Total no of arguments are |%d|", l_int_num);
		CO_ProcMonitor(g_logfile, "Improper Number of arguements", NULL, NULL);
		APL_GOBACK_FAIL
	}

	printf("\n Total no of arguments are |%d|", l_int_num);
	strcpy(l_chr_speedy, l_chr_arglist[4]);
	strcpy(l_chr_nonspeedy, l_chr_arglist[4]);
	strcpy(l_chr_all ,l_chr_arglist[5]);
	strcpy(l_chr_clientbrok ,l_chr_arglist[6]);
	printf("\n Speedy  |%s|",l_chr_speedy);
	printf("\n NonSpeedy  |%s|",l_chr_speedy);
	printf("\n All  |%s|", l_chr_all);
	printf("\n vaibhav\n");
	printf("\n Client/Broker  |%s|", l_chr_clientbrok);
	/* vaibhav 17 July 2006 */
	if(strcmp(l_chr_clientbrok,"B")==0)
	{
		l_flag='B';
	}
	
	if(strcmp(l_chr_clientbrok,"C")==0)
	{
		l_flag='I';
	}
	/* Vaibhav 17 July 2006 */
  printf("\n FLAG VALUE IS  |%c|", l_flag);
	printf("\n ********************************Before IF Loop OF 'S'*********************************");
				
		EXEC SQL SELECT to_char(to_date(:chr_g_sys_date_time),'yyyymmddhh24miss')
		INTO :chr_h_prepdate_new1:i_prepdate_new1
		FROM DUAL;
		IS_ANY_ORA_ERROR
		printf("chr_h_prepdate_new1 is %s\n",chr_h_prepdate_new1);

	if(strcmp(l_chr_speedy,"S")==0)   /*** Speedy Network **********/
	{

		printf("\n ********************************Inside IF Loop OF 'S'*********************************");
		memset(chr_l_outmsg_dir,APL_NULL_CHAR,PATH_LENGTH);

		if (CO_ReadToken(l_ptr_ini_file,"INTL_MS_OUT_PATH",chr_l_outmsg_dir,l_debug_info_ptr) != APL_SUCCESS)
		{
			return(APL_FAILURE);
		}
		memset(chr_l_broktemp_dir,APL_NULL_CHAR,PATH_LENGTH);

		if (CO_ReadToken(l_ptr_ini_file,"INTL_548_BROK_TMP_PATH",chr_l_broktemp_dir,l_debug_info_ptr) != APL_SUCCESS)
		{
			return(APL_FAILURE);
		}
		memset(chr_l_brok_dir,APL_NULL_CHAR,PATH_LENGTH);


		if (CO_ReadToken(l_ptr_ini_file,"INTL_REP_PATH",chr_l_brok_dir,l_debug_info_ptr) != APL_SUCCESS)
		{
			return(APL_FAILURE);
		}
		memset(chr_l_broktemp_file_name,APL_NULL_CHAR,PATH_LENGTH);
		strcpy(chr_l_broktemp_file_name,chr_l_broktemp_dir); /** TUX: CULPRIT LINE This might be the problem ***/

		EXEC SQL SELECT BROK_548_SEQ.NEXTVAL 
			INTO :l_file_seq
			FROM DUAL;
		IS_ANY_ORA_ERROR;
		strcat(chr_l_broktemp_file_name,l_file_seq);
		strcat(chr_l_broktemp_file_name,".txt");

		strcpy( chr_file_name,l_file_seq);
		strcat( chr_file_name,".txt");

		if ((l_ptr_broktemp_file = fopen(chr_l_broktemp_file_name,"w+")) == NULL)
		{
			return(APL_FAILURE);
		}
		memset(l_batch_no ,APL_NULL_CHAR,8);
		memset(l_new_batch_no ,APL_NULL_CHAR,8);
		EXEC SQL SELECT BROK_548_BATCHNO.NEXTVAL 
			INTO :l_batch_no
			FROM DUAL;
		IS_ANY_ORA_ERROR;

		EXEC SQL SELECT LPAD(:l_batch_no,7,'0') into :l_new_batch_no FROM DUAL;
		IS_ANY_ORA_ERROR

		fprintf(l_ptr_broktemp_file ,"{%s}",l_new_batch_no);
		fprintf(l_ptr_broktemp_file ,"{%s}\n",chr_h_prepdate_new1);

		EXEC SQL DECLARE Msg548Cur CURSOR FOR
			SELECT * from MS_MSGLOG WHERE STATUS='P' AND CONTACT_DETAILS='SPEEDE'AND MESSAGE_CLASS=:l_flag;

		EXEC SQL OPEN Msg548Cur;
		IS_ANY_ORA_ERROR;
		CO_ProcMonitor(g_logfile,"Opened Cursor Msg548Cur",NULL,NULL);



		sprintf(chr_g_log_buff,"548 Message Generation Successfully started on (%s)\n",
				chr_g_sys_date_time);
		CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);


		for(;;)
		{			

			/*	EXEC SQL FETCH Msg548Cur INTO :chr_l_msg_file;  */      /** use structure**/
			EXEC SQL FETCH Msg548Cur INTO :l_ms_msglog_struct_h:l_ms_msglog_struct_i;

			if(APL_ZERO_RESULT_SET)
			{

				if(counter==0)
				{
					CO_ProcMonitor(g_logfile,"No Records Found in l_cur_gen_clh_dpinstr CURSOR!" ,NULL,NULL);
				}

				EXEC SQL CLOSE Msg548Cur;
				break;

			}
			IS_ANY_ORA_ERROR;

				counter++;	

			memset(chr_l_outmsg_file_name,APL_NULL_CHAR,80);

			printf("\n*********************Before CAT**************************");   
			strcpy(chr_l_outmsg_file_name,chr_l_outmsg_dir);
			printf("\n File Name =|%s|.\n",l_ms_msglog_struct_h.msg);
			strcat(chr_l_outmsg_file_name,l_ms_msglog_struct_h.msg);
			printf("\n File Name =|%s|.\n",chr_l_outmsg_file_name);
			printf("\n*********************After CAT2**************************\n");   
			/*	strcpy(chr_l_outmsg_file_name,chr_l_outmsg_dir);
				strcat(chr_l_outmsg_file_name,l_ms_msglog_struct_h.msg); */


			if ((l_ptr_outmsg_file = fopen(chr_l_outmsg_file_name,"r")) == NULL)
			{
				printf("\n *** Error in reading FIle ***\n");
				return(APL_FAILURE);
			}
                        /*Vaibhav 11-Oct-2006*/ 
			fprintf(l_ptr_broktemp_file ,"{IFN%s}",l_ms_msglog_struct_h.swift_msg_no);
			/*fprintf(l_ptr_broktemp_file ,"{IFN548}");*/
			/*Vaibhav 11-Oct-2006*/ 
			fprintf(l_ptr_broktemp_file ,"{%s}",l_ms_msglog_struct_h.contact_details1);
			fprintf(l_ptr_broktemp_file ,"{%s}{\n",l_ms_msglog_struct_h.contact_details);

			while(!feof(l_ptr_outmsg_file))
			{
				fscanf(l_ptr_outmsg_file, "%[^\n]\n",val);
				fputs(val,l_ptr_broktemp_file );
				fprintf(l_ptr_broktemp_file ,"\n");

			}
			fprintf(l_ptr_broktemp_file ,"-}\n");
			fclose(l_ptr_outmsg_file);

			EXEC SQL UPDATE MS_MSGLOG
				SET STATUS='A' 
				WHERE MSG=:l_ms_msglog_struct_h.msg
				AND MESSAGE_IND=:l_ms_msglog_struct_h.message_ind;
			IS_ANY_ORA_ERROR


		}	/* *** END OF FOR  LOOP  ***** */	

	 fclose(l_ptr_broktemp_file);				
	 printf("chr_l_broktemp_dir is %s|\n",chr_l_broktemp_dir);
	 printf("chr_l_brok_dir is %s|\n",chr_l_brok_dir);
	 sprintf(l_buf2, "mv %s* %s",chr_l_broktemp_dir,chr_l_brok_dir);
	 printf("l_buf2 is %s\n",l_buf2);
	 if( system(l_buf2) != 0)
	     fprintf(g_logfile,"\n Unable to move files from Broker dir to reports directory ");
     printf("\n Amit: Before Calling Report Function 1\n");

	  strcpy(l_intl_rept_struct_ha->report_name, chr_file_name);
	  strcpy(l_intl_rept_struct_ha->report_desc, "REPORT");
	  strcpy(l_intl_rept_struct_ha->report_date, argv[2]);
	  l_intl_rept_struct_ha->report_width = 100;
	  strcpy(l_intl_rept_struct_ha->task_desc, argv[5]);
	  strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
	  strcpy(l_intl_rept_struct_ha->usr, argv[3]);


     printf("\n Amit: Before Calling Report Function 1\n");
     printf("\nFILE chr_file_name= |%s|\n",chr_file_name);
     if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))

     {
         APL_GOBACK_FAIL;
     }

    printf("\n Amit: After Calling Report Function 1\n");

	} /********** END OF IF  **********/ 



	if(strcmp(l_chr_speedy,"N")==0)
	{

		printf("\n ********************************Inside IF Loop OF 'Non Speedy'*********************************");
		if(strcmp(l_chr_all,"A")==0)
		{	

			printf("\n ********************************Inside IF Loop when Option ALL 'A'*********************************");

			memset(chr_l_outmsg_dir,APL_NULL_CHAR,PATH_LENGTH);
			if (CO_ReadToken(l_ptr_ini_file,"INTL_MS_OUT_PATH",chr_l_outmsg_dir,l_debug_info_ptr) != APL_SUCCESS)
			{
				return(APL_FAILURE);
			}

			memset(chr_l_broktemp_dir,APL_NULL_CHAR,PATH_LENGTH);

			if (CO_ReadToken(l_ptr_ini_file,"INTL_548_BROK_TMP_PATH",chr_l_broktemp_dir,l_debug_info_ptr) != APL_SUCCESS)
			{
				return(APL_FAILURE);
			}
			memset(chr_l_brok_dir,APL_NULL_CHAR,PATH_LENGTH);

			if (CO_ReadToken(l_ptr_ini_file,"INTL_REP_PATH",chr_l_brok_dir,l_debug_info_ptr) != APL_SUCCESS)
			{
				return(APL_FAILURE);
			}

			EXEC SQL DECLARE  Msg548_BrkWise CURSOR FOR
				SELECT  DISTINCT CLIENT from MS_MSGLOG WHERE STATUS='P'
				AND CONTACT_DETAILS!='SPEEDE' AND MESSAGE_CLASS=:l_flag; /* Vaibhav 17 July 2006*/

			/**SELECT PTY_CODE FROM MT_PARTY WHERE PTY_TYPE='B' 
			  AND STATUS ='AA';                 CURSOR NO1*/

			EXEC SQL OPEN Msg548_BrkWise;

			CO_ProcMonitor(g_logfile,"Opened Cursor Msg548Cur",NULL,NULL);


			IS_ANY_ORA_ERROR;
			printf("sqlca.sqlcode is |%d|\n",sqlca.sqlcode);

			sprintf(chr_g_log_buff,"548 Message Generation Successfully started on (%s)\n",
					chr_g_sys_date_time);
			CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);

			EXEC SQL DECLARE Msg548_BrkWise_msg CURSOR FOR
				SELECT *  from MS_MSGLOG WHERE STATUS='P' 
				AND CONTACT_DETAILS!='SPEEDE' 
				AND CLIENT=:l_broker_cd;    /*CURSOR NO2*/


			sprintf(chr_g_log_buff,"548 Message Generation Successfully started on (%s)\n",
					chr_g_sys_date_time);
			CO_ProcMonitor(g_logfile,chr_g_log_buff,l_debug_info_ptr,NULL);



			for(;;)
			{

				/* EXEC SQL FETCH Msg548Cur INTO :chr_l_msg_file;  */      /** use structure**/
				EXEC SQL FETCH Msg548_BrkWise INTO :l_broker_cd;

				printf("l_broker_cd is |%s|\n",l_broker_cd);
				if(APL_ZERO_RESULT_SET)
				{

					if(counter==0)
					{
						CO_ProcMonitor(g_logfile,"No Records Found in l_cur_gen_clh_dpinstr CURSOR!" ,NULL,NULL);
					}
					break;
				}
				EXEC SQL OPEN Msg548_BrkWise_msg;
				CO_ProcMonitor(g_logfile,"Opened Cursor Msg548Cur",NULL,NULL);
				IS_ANY_ORA_ERROR;
				printf("sqlca.sqlcode is |%d|\n",sqlca.sqlcode);
				memset(chr_l_broktemp_file_name,APL_NULL_CHAR,PATH_LENGTH);
				strcpy(chr_l_broktemp_file_name,chr_l_broktemp_dir);
				EXEC SQL  SELECT BROK_548_SEQ.NEXTVAL
					INTO :l_file_seq
					FROM DUAL;
					printf("sqlca.sqlcode is |%d|\n",sqlca.sqlcode);
				IS_ANY_ORA_ERROR;

				printf("\n ************ TEST **********\n");
				strcat(chr_l_broktemp_file_name,l_file_seq); 
				strcat(chr_l_broktemp_file_name,".txt");
				strcpy( chr_file_name,l_file_seq);   /****Madhuri*****/
				strcat( chr_file_name,".txt");


				printf("\n ************ TEST 1**********\n");
				if ((l_ptr_broktemp_file = fopen(chr_l_broktemp_file_name,"w+")) == NULL)
				{
					printf("\n Cannot Open file |%s| ", chr_l_broktemp_file_name);
					return(APL_FAILURE);
				}
				memset(l_batch_no ,APL_NULL_CHAR,8);
				memset(l_new_batch_no ,APL_NULL_CHAR,8);
				EXEC SQL SELECT BROK_548_BATCHNO.NEXTVAL 
						INTO :l_batch_no
						FROM DUAL;
				IS_ANY_ORA_ERROR;

				EXEC SQL SELECT LPAD(:l_batch_no,7,'0') into :l_new_batch_no FROM DUAL;
				IS_ANY_ORA_ERROR
				fprintf(l_ptr_broktemp_file ,"{%s}",l_new_batch_no);
				fprintf(l_ptr_broktemp_file ,"{%s}\n",chr_h_prepdate_new1);
				/*************************************************************************************/
				for(;;)
				{

					EXEC SQL FETCH Msg548_BrkWise_msg 
						INTO :l_ms_msglog_struct_h:l_ms_msglog_struct_i
						;

					if(APL_ZERO_RESULT_SET)
					{

						if(counter==0)
						{
							CO_ProcMonitor(g_logfile,"No Records Found in l_cur_gen_clh_dpinstr CURSOR!" ,NULL,NULL);
						}

						EXEC SQL CLOSE Msg548_BrkWise_msg;
						break;

					}
					IS_ANY_ORA_ERROR
						printf("sqlca.sqlcode is |%d|\n",sqlca.sqlcode);

					counter++;


					memset(chr_l_outmsg_file_name,APL_NULL_CHAR,80);

					strcpy(chr_l_outmsg_file_name,chr_l_outmsg_dir);
					printf("\n File Name =|%s|.\n",l_ms_msglog_struct_h.msg);
					strcat(chr_l_outmsg_file_name,l_ms_msglog_struct_h.msg);
					printf("\n File Name =|%s|.\n",chr_l_outmsg_file_name);
					printf("\nFILE2=|%s|\n",chr_l_outmsg_file_name);
					if ((l_ptr_outmsg_file = fopen(chr_l_outmsg_file_name,"r")) == NULL)
					{
						printf("\n Cannot Open File \n");
						return(APL_FAILURE);
					}

					/*Vaibhav 11-Oct-2006*/ 
					fprintf(l_ptr_broktemp_file ,"{IFN%s}",l_ms_msglog_struct_h.swift_msg_no);
                                        /*fprintf(l_ptr_broktemp_file ,"{IFN548}");*/ 
					/*Vaibhav 11-Oct-2006*/ 
					fprintf(l_ptr_broktemp_file ,"{%s}",l_ms_msglog_struct_h.contact_details1);
					fprintf(l_ptr_broktemp_file ,"{%s}{\n",l_ms_msglog_struct_h.contact_details);
					while(!feof(l_ptr_outmsg_file))
					{
						fscanf(l_ptr_outmsg_file, "%[^\n]\n",val);
						printf("val is |%s|\n",val);
						fflush(stdout);
						fputs(val,l_ptr_broktemp_file );
						fprintf(l_ptr_broktemp_file ,"\n");
					}
					fprintf(l_ptr_broktemp_file ,"-}\n");
					fclose(l_ptr_outmsg_file); 

	 				printf("chr_l_broktemp_dir is %s|\n",chr_l_broktemp_dir);
	 				printf("chr_l_brok_dir is %s|\n",chr_l_brok_dir);
    				sprintf(l_buf2, "mv %s* %s",chr_l_broktemp_dir,chr_l_brok_dir);
	     			printf("l_buf2 is %s\n",l_buf2);
		      	if( system(l_buf2) != 0)
					    fprintf(g_logfile,"\n Unable to move files from Broker dir to reports directory ");
				/*
			       strcpy(l_intl_rept_struct_ha->report_name, chr_file_name);
			       strcpy(l_intl_rept_struct_ha->report_desc, "REPORT");
  			       strcpy(l_intl_rept_struct_ha->report_date, argv[2]);
			       l_intl_rept_struct_ha->report_width = 100;
			       strcpy(l_intl_rept_struct_ha->task_desc, argv[5]);
					 strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
					 strcpy(l_intl_rept_struct_ha->usr, argv[3]);


					 printf("\n Amit: Before Calling Report Function 2\n");
					 printf("\nFILE chr_file_name= |%s|\n",chr_file_name);
					 if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))

			       {
					      APL_GOBACK_FAIL;
					 }   */

					EXEC SQL UPDATE MS_MSGLOG
						SET STATUS='A' 
						WHERE MSG=:l_ms_msglog_struct_h.msg
						AND MESSAGE_IND=:l_ms_msglog_struct_h.message_ind;
					IS_ANY_ORA_ERROR
				}  /* *** END OF FOR  LOOP  ***** */
				printf("\n Amit: Before Calling Report Function 1\n");
				strcpy(l_intl_rept_struct_ha->report_name, chr_file_name);
				strcpy(l_intl_rept_struct_ha->report_desc, "REPORT");
				strcpy(l_intl_rept_struct_ha->report_date, argv[2]);
				l_intl_rept_struct_ha->report_width = 100;
				strcpy(l_intl_rept_struct_ha->task_desc, argv[5]);
				strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
				strcpy(l_intl_rept_struct_ha->usr, argv[3]);


				printf("\n Amit: Before Calling Report Function 2\n");
				printf("\nFILE chr_file_name= |%s|\n",chr_file_name);
				if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))

				{
					APL_GOBACK_FAIL;
				}  

				/*******************************************************************************/
				fclose(l_ptr_broktemp_file);  
				EXEC SQL CLOSE Msg548_BrkWise_msg;

			}

			EXEC SQL CLOSE Msg548_BrkWise;
		}  /* End of If Loop 'ALL' */


		if(strcmp(l_chr_all,"S")==0)
		{	

			printf("\n ********************************Inside IF Loop when Option SELECTED 'S'*********************************");


			memset(chr_l_outmsg_dir,APL_NULL_CHAR,PATH_LENGTH);
			if (CO_ReadToken(l_ptr_ini_file,"INTL_MS_OUT_PATH",chr_l_outmsg_dir,l_debug_info_ptr) != APL_SUCCESS)
			{
				return(APL_FAILURE);
			}


			memset(chr_l_broktemp_dir,APL_NULL_CHAR,PATH_LENGTH);
			if (CO_ReadToken(l_ptr_ini_file,"INTL_548_BROK_TMP_PATH",chr_l_broktemp_dir,l_debug_info_ptr) != APL_SUCCESS)
			{
				return(APL_FAILURE);
			}
			memset(chr_l_brok_dir,APL_NULL_CHAR,PATH_LENGTH);

			if (CO_ReadToken(l_ptr_ini_file,"INTL_REP_PATH",chr_l_brok_dir,l_debug_info_ptr) != APL_SUCCESS)
			{
				return(APL_FAILURE);
			}

			if(APL_FAILURE == CO_SplitStr(l_chr_arglist[2],
						'|',
						&l_int_num,&l_chr_arglist2))
			{
				CO_ProcMonitor(g_logfile, "Failure from StrSplitFn", NULL, NULL);
				APL_GOBACK_FAIL

			}
			printf("\n int_num =|%d|\n",l_int_num);
			printf("\n Before For loop vvvvvaaaaaaaaaiiiiibbbbbbbbhhhhhhhaaaaaaaavvvvline no 576\n");
			int cnt=0;
			for(cnt=0;cnt<l_int_num;cnt++)
			{
				printf("HERE!!!\n");
				printf("\n l_chr_arglist2[cnt]=|%d||%s| \n",cnt,l_chr_arglist2[cnt]);
			}

			for(i=0;i<l_int_num;i++)
			{

				EXEC SQL DECLARE cur_NonspeedySel CURSOR FOR 
					SELECT * FROM ms_msglog
					WHERE CLIENT=:l_chr_arglist2[i]
					AND CONTACT_DETAILS!='SPEEDE'
					AND STATUS='P' AND MESSAGE_CLASS=:l_flag; /* Vaibhav 17 July 2006 */
				IS_ANY_ORA_ERROR


				EXEC SQL OPEN cur_NonspeedySel;
				IS_ANY_ORA_ERROR
				EXEC SQL  SELECT BROK_548_SEQ.NEXTVAL
					INTO :l_file_seq
					FROM DUAL;
				IS_ANY_ORA_ERROR	;	

				memset(chr_l_broktemp_file_name,APL_NULL_CHAR,PATH_LENGTH);
				strcpy(chr_l_broktemp_file_name,chr_l_broktemp_dir);
				strcat(chr_l_broktemp_file_name,l_file_seq);
				strcat(chr_l_broktemp_file_name,".txt");
				strcpy( chr_file_name,l_file_seq);
				strcat( chr_file_name,".txt");
				printf("\nFILE chr_file_name (Just After strcat) = |%s|\n",chr_file_name);

				printf("\n chr_l_broktemp_file_name=|%s| \n",chr_l_broktemp_file_name);

				if ((l_ptr_broktemp_file = fopen(chr_l_broktemp_file_name,"w")) == NULL)
				{
					return(APL_FAILURE);
				}				
				memset(l_batch_no ,APL_NULL_CHAR,8);
				memset(l_new_batch_no ,APL_NULL_CHAR,8);
				EXEC SQL SELECT BROK_548_BATCHNO.NEXTVAL 
					INTO :l_batch_no
					FROM DUAL;
				IS_ANY_ORA_ERROR;

				EXEC SQL SELECT LPAD(:l_batch_no,7,'0') into :l_new_batch_no FROM DUAL;
				IS_ANY_ORA_ERROR
				fprintf(l_ptr_broktemp_file ,"{%s}",l_new_batch_no);
				fprintf(l_ptr_broktemp_file ,"{%s}\n",chr_h_prepdate_new1);
				for(;;)
				{			
					memset(&l_ms_msglog_struct_h,NULL,sizeof(MS_MSGLOG_STRUCT));
					memset(&l_ms_msglog_struct_i,0,sizeof(MS_MSGLOG_I_STRUCT));
					EXEC SQL FETCH cur_NonspeedySel INTO :l_ms_msglog_struct_h:l_ms_msglog_struct_i;
					if(APL_ZERO_RESULT_SET)
					{
						printf("\n Before For loop vvvvvaaaaaaaaaiiiiibbbbbbbbhhhhhhhaaaaaaaavvvvline no********* 588\n");

						if(counter1==0)
						{
							CO_ProcMonitor(g_logfile,"No Records Found cur_NonspeedySel CURSOR!" ,NULL,NULL);
						}

						EXEC SQL CLOSE cur_NonspeedySel;
						break;
					}
					IS_ANY_ORA_ERROR

						printf("\n Enter in loop1\n");  

					strcpy(chr_l_outmsg_file_name,chr_l_outmsg_dir);
					printf("\n File Name =|%s|.\n",l_ms_msglog_struct_h.msg);
					strcat(chr_l_outmsg_file_name,l_ms_msglog_struct_h.msg);
					printf("\n File Name =|%s|.\n",chr_l_outmsg_file_name);
					printf("\n*********************After CAT1**************************");
					if ((l_ptr_outmsg_file = fopen(chr_l_outmsg_file_name,"r")) == NULL)
					{
						return(APL_FAILURE);
					}


					printf("\n Enter in loop3\n");
					/*Vaibhav 11-Oct-2006*/ 
					fprintf(l_ptr_broktemp_file ,"{IFN%s}",l_ms_msglog_struct_h.swift_msg_no);
					/*fprintf(l_ptr_broktemp_file ,"{IFN548}");*/
					/*Vaibhav 11-Oct-2006*/ 
					fprintf(l_ptr_broktemp_file ,"{%s}",l_ms_msglog_struct_h.contact_details1);
					fprintf(l_ptr_broktemp_file ,"{%s}{\n",l_ms_msglog_struct_h.contact_details);
					while(!feof(l_ptr_outmsg_file))
					{
						fscanf(l_ptr_outmsg_file, "%[^\n]\n",val);
						printf(" val is |%s|\n",val);
						fputs(val,l_ptr_broktemp_file );
						fprintf(l_ptr_broktemp_file ,"\n");
					}
					fprintf(l_ptr_broktemp_file ,"-}\n");
					fclose(l_ptr_outmsg_file);

					EXEC SQL UPDATE MS_MSGLOG
						SET STATUS='A'
						WHERE MSG=:l_ms_msglog_struct_h.msg
						AND MESSAGE_IND=:l_ms_msglog_struct_h.message_ind;
					if ( sqlca.sqlcode !=0 )
						printf("\n Amit:sqlca.sqlcode=|%d| \n",sqlca.sqlcode);
					IS_ANY_ORA_ERROR
				}

				fclose(l_ptr_broktemp_file);
				EXEC SQL CLOSE cur_NonspeedySel;
				IS_ANY_ORA_ERROR
      		
	 				printf("chr_l_broktemp_dir is %s|\n",chr_l_broktemp_dir);
	 				printf("chr_l_brok_dir is %s|\n",chr_l_brok_dir);
				sprintf(l_buf2, "mv %s* %s",chr_l_broktemp_dir,chr_l_brok_dir);
			   printf("l_buf2 is %s\n",l_buf2);
			   if( system(l_buf2) != 0)
			         fprintf(g_logfile,"\n Unable to move files from Broker dir to reports directory ");


		      printf("\n Amit: Before Calling Report Function 1\n");

	      	strcpy(l_intl_rept_struct_ha->report_name, chr_file_name);
			   strcpy(l_intl_rept_struct_ha->report_desc, "REPORT");
			   strcpy(l_intl_rept_struct_ha->report_date, argv[2]);
			 	l_intl_rept_struct_ha->report_width = 100;
			   strcpy(l_intl_rept_struct_ha->task_desc, argv[5]);
			   strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
			   strcpy(l_intl_rept_struct_ha->usr, argv[3]);


	      	printf("\n Amit: Before Calling Report Function 1\n");
			   printf("\nFILE chr_file_name= |%s|\n",chr_file_name);
			   if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))

		      {
		         APL_GOBACK_FAIL;
		      }

		      printf("\n Amit: After Calling Report Function 1\n");

			}  /* End of If Loop 'SELECTED' */

		}  /*********END OF IF Non-Speedy************/
	}
	/** TUX making entry in Report table **/

	APL_GOBACK_SUCCESS;

RETURN_SUCCESS:
	{
		free(l_intl_rept_struct_ha);
		CO_ProcMonitor(g_logfile,"Leaving  DL_Proc_548Msg With Success",NULL,NULL);
		return(APL_SUCCESS);
	}

RETURN_FAILURE:
	{
		free(l_intl_rept_struct_ha);
		CO_ProcMonitor(g_logfile,"Leaving  DL_Proc_548Msg With Success",NULL,NULL);
		printf("\n Error Inside DL_Proc_548Msg:ORA|%d|\n",sqlca.sqlcode);
		sprintf(chr_g_log_buffer,"Leaving DL_Proc_548Msg With Failure ORA|%d|\n",sqlca.sqlcode);
		CO_ProcMonitor(g_logfile,chr_g_log_buffer,l_debug_info_ptr,NULL);
		return(APL_FAILURE);
	}
	

}/*  ******** END OF FUNCTION ******** */
/*Nikhil paste end*/
	
int	NEW_DL_Proc_548Msg(FILE *g_logfile,char **argv,INTL_ENV_DATA_STRUCT_H	*p_intlenv_data_struct_h,
						DEBUG_INFO_STRUCT_H			**l_debug_info_ptr)				

{	
	struct sqlca sqlca;
	char  chr_g_log_buffer[BUFFER_LEN] = APL_NULL_STRING;
	FILE  *l_ptr_ini_file = NULL;
	char  chr_l_inifile[100]= APL_NULL_STRING;
	INTL_REPT_STRUCT_H            *l_intl_rept_struct_ha  =NULL;

	FILE  *l_file_out =NULL;/*NIKHIL S*/
	FILE  *l_file_in =NULL;/*NIKHIL S*/
	char                 val[80];
	char  chr_l_outmsg_dir[PATH_LENGTH]= APL_NULL_STRING;
	char  chr_l_outmsg_file_name[FILENAME_LEN_A]= APL_NULL_STRING;
	char  chr_l_broktemp_dir[PATH_LENGTH]= APL_NULL_STRING;
	char  chr_l_broktemp_file_name[PATH_LENGTH]= APL_NULL_STRING;
	char  chr_l_brok_dir[PATH_LENGTH]= APL_NULL_STRING;
	char l_temp_filename[50]; /*nikhil S*/
	char l_outfile[50];
   char l_cust_dp_id[36];/*nikhil S*/
	char l_sender[36];/*nikhil S*/
	char l_servprov[36];/*nikhil S*/
	char  chr_l_file_out[PATH_LENGTH]= APL_NULL_STRING;
	char  chr_l_file_in[PATH_LENGTH]= APL_NULL_STRING;
	int l_rec_cnt =0; /*nikhil S*/
	int l_temp=0;
	int l_test=0;
	int l_int_num=0;
	int l_loop=0;
	char l_msglog_rowid[APL_ROWID_LEN] = APL_NULL_STRING;/*nikhil S*/
	char l_cmw_rowid[APL_ROWID_LEN]  = APL_NULL_STRING; /*nikhil S*/
   char l_in_msgtype[4][4];
   char l_out_msgtype[4][4];
	char  l_buf2[502] = APL_NULL_STRING;
	char  l_flag1[2] = APL_NULL_STRING;
	 char l_client[11] = APL_NULL_STRING;
	int l_flg_rec =0;
   char l_bcn_stat[3] = APL_NULL_STRING;


	char l_chr_speedy[2]    =  APL_NULL_STRING;
	char l_chr_all[2]       =  APL_NULL_STRING;
	char l_chr_clientbrok[2]  =  APL_NULL_STRING;
		
	char l_flag;
	char l_param_str[5000]=  APL_NULL_STRING;	/*Isolve314:15/05/2007 */

	short i_ind =0;	
	short i_ind1 =0;	

	char *l_list;
	l_intl_rept_struct_ha   = (INTL_REPT_STRUCT_H *)calloc(1, sizeof(INTL_REPT_STRUCT_H));
	APL_MALLOC_FAIL(l_intl_rept_struct_ha);	
	int l_len_list;
	char l_chr_548seq[8]= APL_NULL_STRING;	/*Isolve336:AmitB:18/06/2007*/
	char l_chr_filedate[15]= APL_NULL_STRING;

	strcpy(l_in_msgtype[0],"540");
	strcpy(l_in_msgtype[1],"541");
	strcpy(l_in_msgtype[2],"542");
	strcpy(l_in_msgtype[3],"543");

	strcpy(l_out_msgtype[0],"544");
	strcpy(l_out_msgtype[1],"545");
	strcpy(l_out_msgtype[2],"546");
	strcpy(l_out_msgtype[3],"547");
/*NIkhil from prev function*/
	CO_ProcMonitor(g_logfile, "Entered NEW_DL_Proc_548Msg function", NULL, NULL);
	printf("Entered NEW_DL_Proc_548Msg function");
	l_intl_rept_struct_ha   = (INTL_REPT_STRUCT_H *)calloc(1, sizeof(INTL_REPT_STRUCT_H));
	APL_MALLOC_FAIL(l_intl_rept_struct_ha);	
	if(APL_FAILURE == CO_SplitStr(argv[9],
				';',
				&l_int_num,&l_chr_arglist))
	{
		CO_ProcMonitor(g_logfile, "Failure from StrSplitFn", NULL, NULL);
		APL_GOBACK_FAIL

	}

	if (l_int_num != 7)  /* Vaibhav 12-07-2006 */
	{
		printf("\n Total no of arguments are |%d|", l_int_num);
		CO_ProcMonitor(g_logfile, "Improper Number of arguements", NULL, NULL);
		APL_GOBACK_FAIL
	}

	printf("\n Total no of arguments are |%d|", l_int_num);
	memset(l_chr_speedy,APL_NULL_CHAR,2);
	memset(l_chr_all,APL_NULL_CHAR,2);
	memset(l_chr_clientbrok,APL_NULL_CHAR,2);
	memset(l_flag1,APL_NULL_CHAR,sizeof(l_flag1));	/* Added By Sana for SIT issue fix */
	memset(l_servprov,APL_NULL_CHAR,sizeof(l_servprov));	/* Added By Sana for SIT issue fix */
	memset(l_sender,APL_NULL_CHAR,sizeof(l_sender));	/* Added By Sana for SIT issue fix */

	strcpy(l_chr_speedy, l_chr_arglist[4]); /* 'S' -> Speedy 'N' -> Non Speedy*/
	strcpy(l_chr_all ,l_chr_arglist[5]); /*See if all clients/brok 'A' -> ALL 'S' -> Selected*/
	strcpy(l_chr_clientbrok ,l_chr_arglist[6]);/*'B' -> Broker 'C' -> Client*/
	printf("\n Speedy  |%s|",l_chr_speedy);
	printf("\n All  |%s|", l_chr_all);
	printf("\n Client/Broker  |%s|", l_chr_clientbrok);
	/* vaibhav 17 July 2006 */
	if(strcmp(l_chr_clientbrok,"B")==0)
	{
		l_flag='B';
	}
	
	if(strcmp(l_chr_clientbrok,"C")==0)
	{
		l_flag='I';
	}
	l_flag1[0]=l_flag;
	l_flag1[1]='\0';
	printf( " \n l_flag1 :%s:",l_flag1);
/*NIkhil from prev function end*/
	for (l_temp=0;l_temp<4;l_temp++)
		{
			printf("\n IN :%s: ------------> OUT :%s:", l_in_msgtype[l_temp],l_out_msgtype[l_temp]);
		}
	

		 EXEC SQL BEGIN DECLARE SECTION; 
			EXEC SQL VAR l_outfile  is string; 
			EXEC SQL VAR l_temp_filename  is string;
  /*Nikhil S*/
			EXEC SQL VAR l_cust_dp_id is string; 
  /*Nikhil S*/
			EXEC SQL VAR l_sender is string;
  /*Nikhil S*/
		 EXEC SQL VAR l_servprov is string; 
 		 EXEC SQL VAR l_msglog_rowid is string;
		 EXEC SQL VAR l_cmw_rowid is string; 
		EXEC SQL VAR l_bcn_stat is STRING;
		 EXEC SQL VAR l_outfile IS STRING;
		 EXEC SQL VAR l_list IS STRING; 
		 EXEC SQL VAR l_out_msgtype IS STRING;
		 EXEC SQL VAR l_in_msgtype IS STRING;
		 EXEC SQL VAR l_flag1 IS STRING; 
		 EXEC SQL VAR l_client IS STRING;

		
	 EXEC SQL END DECLARE SECTION;  

	memset(l_outfile,APL_NULL_CHAR,50); /*Nikhil S*/
	memset(l_temp_filename,APL_NULL_CHAR,50); /*Nikhil S*/
	memset(l_cust_dp_id,APL_NULL_CHAR,36);/*Nikhil S*/
	memset(l_sender,APL_NULL_CHAR,36);/*Nikhil S*/
	

	if(CO_RtvSysDtTime(chr_g_sys_date_time,l_debug_info_ptr)== APL_FAILURE)		
		APL_GOBACK_FAIL;

	strcpy(chr_l_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_l_inifile,"intl_sun.cfg");

	if ( ( l_ptr_ini_file=fopen(chr_l_inifile,"r") ) == NULL)
	{
		APL_GOBACK_FAIL;
	}

		memset(chr_l_outmsg_dir,APL_NULL_CHAR,PATH_LENGTH);

		if (CO_ReadToken(l_ptr_ini_file,"INTL_MS_OUT_PATH",chr_l_outmsg_dir,l_debug_info_ptr) != APL_SUCCESS)
		{
			return(APL_FAILURE);
		}

		memset(chr_l_broktemp_dir,APL_NULL_CHAR,PATH_LENGTH);

		if (CO_ReadToken(l_ptr_ini_file,"INTL_548_BROK_TMP_PATH",chr_l_broktemp_dir,l_debug_info_ptr) != APL_SUCCESS)
		{
			return(APL_FAILURE);
		}
		memset(chr_l_file_out,APL_NULL_CHAR,PATH_LENGTH); /*Nikhil */
		strcpy(chr_l_file_out,chr_l_broktemp_dir);/*Nikhil */
		memset(chr_l_brok_dir,APL_NULL_CHAR,PATH_LENGTH);


		if (CO_ReadToken(l_ptr_ini_file,"INTL_REP_PATH",chr_l_brok_dir,l_debug_info_ptr) != APL_SUCCESS)
		{
			return(APL_FAILURE);
		}
		memset(chr_l_broktemp_file_name,APL_NULL_CHAR,PATH_LENGTH);
		strcpy(chr_l_broktemp_file_name,chr_l_broktemp_dir); /** TUX: CULPRIT LINE This might be the problem ***/

		/*NIKHIL S*/
/* This loop is executed twice for 548 Brokers only*/
/* Second time for unmapped trades consolidation*/

if(!strcmp(l_chr_speedy,"S"))/*if Speedy messages are to be generated*/
{
	CO_ProcMonitor(g_logfile, "Request is for Speedy messages", NULL, NULL);
		/* CODE FOR 548 SPEEDE INTRA FLAT START*/
/* This loop is executed 3 times if the flag is I (C.MSG_TYPE = 541/2/3/4) 
	else 1 time if it is for B (C.MSG_TYPE =515) */
	for(l_loop= 0;l_loop <4;l_loop++) 
	{
		if(l_flag == 'B')
		{
			printf("\n Its's Broker directly exiting l_loop loop next time");
			CO_ProcMonitor(g_logfile,"\n Its's Broker directly exiting l_loop loop next time",NULL,NULL);
			l_loop=4;
		}
		l_rec_cnt=0;
		if(l_flag == 'B')
		{
				   EXEC SQL  SELECT count(L.MSG) INTO :l_rec_cnt
							 FROM COMMON_MSG_WRAPPER C, MS_MSGENT E, MS_MSGLOG L, DL_BCN B
							 WHERE C.REFNO = E.PROC_INIT
							 AND L.MESSAGE_IND = E.SWIFT_MSG_SEQNO
							 AND B.CONTRACT_CD = C.REFNO 
							 AND B.BROKER_CD = C.BROKER_CD
							 AND TO_CHAR(B.DL_DATE,'DD/MM/YYYY') = TO_CHAR(C.DEAL_DT,'DD/MM/YYYY')
							 AND C.MSG_TYPE = '515'
							 AND C.status ='R' AND C.FLGSPEEDY ='Y' AND C.SENDER ='SPEEDE' AND C.STP_STAT='STP'
							 AND L.MESSAGE_CLASS= :l_flag1
							 /*AND B.STATUS = DECODE(:l_unmap,0,'RC',1,'AA')
							 AND DECODE(:l_unmap,1,B.FAILREASON_CD,' ') = DECODE(:l_unmap,1,'95',' ')*/
							 AND (B.STATUS ='RC' OR (B.STATUS ='AA' AND B.FAILREASON_CD='95'))
							 AND C.BROKER_CD = L.CLIENT
							 AND L.STATUS = 'M'; 

				  IS_ANY_ORA_ERROR;
		}
		else
		{
				   EXEC SQL  SELECT count(L.MSG) INTO :l_rec_cnt
							 FROM COMMON_MSG_WRAPPER C, MS_MSGENT E, MS_MSGLOG L
							 WHERE C.REFNO = E.PROC_INIT
							 AND L.MESSAGE_IND = E.SWIFT_MSG_SEQNO
							 AND C.MSG_TYPE = :l_in_msgtype[l_loop]
							 AND C.status ='R' AND C.FLGSPEEDY ='Y' AND C.SENDER ='SPEEDE' AND C.STP_STAT='STP'
							 AND L.MESSAGE_CLASS= :l_flag1 AND L.SWIFT_MSG_NO = :l_out_msgtype[l_loop]
							 AND C.CLIENT= L.CLIENT
							 AND L.STATUS = 'M';  

				  IS_ANY_ORA_ERROR;
		}

		if(l_rec_cnt >0)
		{
			
			 EXEC SQL SELECT 'IFN'||DECODE(:l_flag1,'B','548',:l_out_msgtype[l_loop])||'INTRA.'||
				TO_CHAR(SYSDATE,'DDMMYYHH24MISS') 
			INTO :l_temp_filename FROM DUAL;  

			IS_ANY_ORA_ERROR;
			printf("\nNikhil l_temp_filename is :%s",l_temp_filename);
			
			memset(l_outfile,APL_NULL_CHAR,50); /*Nikhil S*/
			strcpy(l_outfile,l_temp_filename);
			strcat(chr_l_file_out,l_temp_filename);
			printf("\nNikhil chr_l_file_out is :%s:",chr_l_file_out);
		
				  if ((l_file_out = fopen(chr_l_file_out,"w+")) == NULL)
				  {
							 return(APL_FAILURE);
				  }
				  /* ISolve-336:AmitB:File Header Added:180607 */

				  EXEC SQL SELECT LPAD(DL_548SEQ.NEXTVAL,7,'0') INTO :l_chr_548seq FROM DUAL;
				  IS_ANY_ORA_ERROR;
				  printf("\n chr_g_sys_date_time=|%s| \n",chr_g_sys_date_time);
//				  EXEC SQL SELECT CONCAT(TO_CHAR(sys_date,'YYYYMMDD'),(SELECT  TO_CHAR(SYSDATE,'HH24MISS') FROM DUAL)) INTO :l_chr_filedate FROM PRO_SYS_DATE;
				  EXEC SQL SELECT TO_CHAR(TO_DATE(:chr_g_sys_date_time),'yyyymmddhh24miss') INTO :l_chr_filedate FROM DUAL;
				  IS_ANY_ORA_ERROR;
				  				  
				  fprintf(l_file_out,"{%s}{%s}\n",l_chr_548seq,l_chr_filedate);

				  if(l_flag == 'B')
				  {
							 printf("\n Declaring MSG548_FLAT_B");
							 EXEC SQL DECLARE MSG548_FLAT_B  CURSOR FOR
										SELECT L.MSG,C.RECIEVER,L.ROWID,C.ROWID,B.STATUS 
										FROM COMMON_MSG_WRAPPER C, MS_MSGENT E, MS_MSGLOG L, DL_BCN B
										WHERE C.REFNO = E.PROC_INIT
										AND L.MESSAGE_IND = E.SWIFT_MSG_SEQNO
										AND B.CONTRACT_CD = C.REFNO 
										AND B.BROKER_CD = C.BROKER_CD
										AND TO_CHAR(B.DL_DATE,'DD/MM/YYYY') = TO_CHAR(C.DEAL_DT,'DD/MM/YYYY')
										AND C.MSG_TYPE = '515'
										AND C.status ='R' AND C.FLGSPEEDY ='Y' AND C.SENDER ='SPEEDE' AND C.STP_STAT='STP'
										AND L.MESSAGE_CLASS= :l_flag1
										/*AND B.STATUS = DECODE(:l_unmap,0,'RC',1,'AA')
										  AND DECODE(:l_unmap,1,B.FAILREASON_CD,' ') = DECODE(:l_unmap,1,'95',' ')*/
										AND (B.STATUS ='RC' OR (B.STATUS ='AA' AND B.FAILREASON_CD='95'))
										AND C.BROKER_CD = L.CLIENT
										AND L.STATUS = 'M';  

							 IS_ANY_ORA_ERROR;	
				  }
				  else
				  {
							 printf("\n Declaring MSG548_FLAT_I");
							 EXEC SQL DECLARE MSG548_FLAT_I  CURSOR FOR
										SELECT L.MSG,C.RECIEVER,L.ROWID,C.ROWID 
										FROM COMMON_MSG_WRAPPER C, MS_MSGENT E, MS_MSGLOG L
										WHERE C.REFNO = E.PROC_INIT
										AND L.MESSAGE_IND = E.SWIFT_MSG_SEQNO
										AND C.MSG_TYPE = :l_in_msgtype[l_loop]
										AND C.status ='R' AND C.FLGSPEEDY ='Y' AND C.SENDER ='SPEEDE' AND C.STP_STAT='STP'
										AND L.MESSAGE_CLASS= :l_flag1 AND L.SWIFT_MSG_NO = :l_out_msgtype[l_loop]
										AND C.CLIENT= L.CLIENT
										AND L.STATUS = 'M';  


							 IS_ANY_ORA_ERROR;
				  }
				if(l_flag == 'B')	
				   EXEC SQL OPEN MSG548_FLAT_B;  
				else
				   EXEC SQL OPEN MSG548_FLAT_I;  

				  IS_ANY_ORA_ERROR;	
				  for(;;)
				  {
							 memset(l_temp_filename,APL_NULL_CHAR,50); /*Nikhil S*/
							 memset(l_cust_dp_id,APL_NULL_CHAR,36);/*Nikhil S*/
							 memset(l_msglog_rowid,APL_NULL_CHAR,APL_ROWID_LEN);
							 memset(l_cmw_rowid,APL_NULL_CHAR,APL_ROWID_LEN);
							 memset(l_bcn_stat,APL_NULL_CHAR,3);
							if(l_flag == 'B')
							  EXEC SQL FETCH MSG548_FLAT_B INTO :l_temp_filename,:l_cust_dp_id,:l_msglog_rowid,:l_cmw_rowid,:l_bcn_stat;
							else
							  EXEC SQL FETCH MSG548_FLAT_I INTO :l_temp_filename,:l_cust_dp_id,:l_msglog_rowid,:l_cmw_rowid; 
							 IS_ANY_ORA_ERROR;	
							 if(APL_ZERO_RESULT_SET)
							 {
										break;
							 }

							memset(chr_l_outmsg_dir,APL_NULL_CHAR,PATH_LENGTH);
							if (CO_ReadToken(l_ptr_ini_file,"INTL_MS_OUT_PATH",chr_l_outmsg_dir,l_debug_info_ptr) != APL_SUCCESS)
							{
								Alert("Unable to Read Token INTL_MS_OUT_PATH from config file");
								return(APL_FAILURE);
							}
							 memset(chr_l_file_in,APL_NULL_CHAR,PATH_LENGTH); /*Nikhil */
							 printf("chr_l_outmsg_dir before = |%s|",chr_l_outmsg_dir);
							 strcpy(chr_l_file_in,chr_l_outmsg_dir);/*Nikhil */
							 printf("chr_l_outmsg_dir after = |%s|",chr_l_outmsg_dir);

							 printf("l_temp_filename before = |%s|",l_temp_filename);
							 strcat(chr_l_file_in,l_temp_filename);
							 printf("l_temp_filename after = |%s|",l_temp_filename);

							 printf("\n Nikhil Incoming file is :%s:",chr_l_file_in);
							 EXEC SQL UPDATE MS_MSGLOG
							SET STATUS='A' 
							WHERE ROWID=:l_msglog_rowid ;  

							IS_ANY_ORA_ERROR
							/*if it is for unmapped don't change its status as we will need it when trade  is mapped*/
							if(l_flag == 'I' || (l_flag == 'B' && strcmp(l_bcn_stat,"RC") == 0))
							{
								 EXEC SQL UPDATE COMMON_MSG_WRAPPER
								SET STATUS='P' 
								WHERE ROWID=:l_cmw_rowid ;  

								IS_ANY_ORA_ERROR
							}
							 if((l_file_in = fopen(chr_l_file_in,"r")) == NULL)
							 {
										Alert("Could not open the file |%s|",chr_l_file_in);
										return(APL_FAILURE);	
							 }
							 fprintf(l_file_out,"{IFN");
							if(l_flag == 'B')
								fprintf(l_file_out,"548}");
							else/*{*/
								fprintf(l_file_out,"%s}",l_out_msgtype[l_loop]);
							//Isolve-336:AmitB:File Header Added:180607 */
//							 fprintf(l_file_out,"{%s}",l_cust_dp_id);
							 fprintf(l_file_out,"{INCUS017}");
							 fprintf(l_file_out,"{SPEEDE}");
							 fprintf(l_file_out,"{\n");
							 while (!feof(l_file_in))
							 {
										memset(val,APL_NULL_CHAR,81);
										fscanf(l_file_in, "%[^\n]\n",val);
										printf("val is |%s|\n",val);
										fflush(stdout);
										fputs(val,l_file_out);
										fprintf(l_file_out,"\n");
							 }
							 fprintf(l_file_out,"-}\n");
							 fclose(l_file_in);

				  }
				  fclose(l_file_out);
				/*From Prev Func*/
	 				sprintf(l_buf2, "mv %s* %s",chr_l_broktemp_dir,chr_l_brok_dir);
	            printf("l_buf2 is %s\n",l_buf2);
	            if( system(l_buf2) != 0)
	                fprintf(g_logfile,"\n Unable to move files from Broker dir to reports directory ");
                printf("\n Amit: Before Calling Report Function 1-1\n");
					CO_ProcMonitor(g_logfile, "Before Calling Report Function 1-1", NULL, NULL);
	             
					memset(l_intl_rept_struct_ha->report_name,APL_NULL_CHAR,51);
					memset(l_intl_rept_struct_ha->report_desc,APL_NULL_CHAR,APL_REPDESC_LENGTH);
					memset(l_intl_rept_struct_ha->report_date,APL_NULL_CHAR,APL_DATE_LEN);
					memset(l_intl_rept_struct_ha->task_desc,APL_NULL_CHAR,61);
					memset(l_intl_rept_struct_ha->fe_be_ind,APL_NULL_CHAR,APL_FLAG_LENGTH);
					memset(l_intl_rept_struct_ha->usr,APL_NULL_CHAR,15);
					strcpy(l_intl_rept_struct_ha->report_name,l_outfile );
	             strcpy(l_intl_rept_struct_ha->report_desc, "REPORT");
	            strcpy(l_intl_rept_struct_ha->report_date, argv[2]);
	            l_intl_rept_struct_ha->report_width = 100;
	            strcpy(l_intl_rept_struct_ha->task_desc, argv[5]);
	  				strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
	            strcpy(l_intl_rept_struct_ha->usr, argv[3]);


               printf("\nFILE l_outfile1 = |%s|\n",l_outfile);
               if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))
               {
                   APL_GOBACK_FAIL;
               }
			/*Isolve314:15/05/2007 */
			strcat(l_param_str,l_outfile);
			strcat(l_param_str,MSG_PARAM_STRUCT_SEP);	
              printf("\n Amit: After Calling Report Function 1-1\n");
				/*From Prev Func End*/
				if(l_flag == 'B')	
				   EXEC SQL CLOSE MSG548_FLAT_B;  
				else
				   EXEC SQL CLOSE MSG548_FLAT_I;  

		}
		else
		{
			CO_ProcMonitor(g_logfile, "No Records found to print in 548 Speede  Intra Flat", NULL, NULL);
			printf("\n No Records found to print in 548 Speede  Intra Flat");
		}
		/* CODE FOR 548 SPEEDE INTRA FLAT END*/

		/*CODE FOR 548 SPEEDE INTRA ISO START*/
		if(l_flag == 'B')
		{
				  EXEC SQL DECLARE MT548ISOSENDER_B CURSOR FOR
							 SELECT DISTINCT(C.SENDER) FROM COMMON_MSG_WRAPPER C, MS_MSGENT E, MS_MSGLOG L, DL_BCN B
							 WHERE C.REFNO = E.PROC_INIT  AND L.MESSAGE_IND = E.SWIFT_MSG_SEQNO
							 AND B.CONTRACT_CD = C.REFNO
							 AND B.BROKER_CD = C.BROKER_CD
							 AND TO_CHAR(B.DL_DATE,'DD/MM/YYYY') = TO_CHAR(C.DEAL_DT,'DD/MM/YYYY')
							 AND C.MSG_TYPE = '515'
							 AND C.status ='R' AND C.FLGSPEEDY ='Y' AND C.SENDER <> 'SPEEDE'  AND C.STP_STAT='STP'
							 AND L.MESSAGE_CLASS=:l_flag1
							 /*AND B.STATUS = DECODE(:l_unmap,0,'RC',1,'AA',' ')
							 AND DECODE(:l_unmap,1,B.FAILREASON_CD,' ') = DECODE(:l_unmap,1,'95',' ')*/
							 AND (B.STATUS ='RC' OR (B.STATUS ='AA' AND B.FAILREASON_CD='95'))
							 AND C.BROKER_CD = L.CLIENT
							 AND L.STATUS = 'M';  

				  IS_ANY_ORA_ERROR;

				   EXEC SQL OPEN MT548ISOSENDER_B; 


				   /* Commented and declared below by Sana EXEC SQL DECLARE MT548ISO_B CURSOR FOR
							 SELECT L.MSG,C.RECIEVER,L.ROWID,C.ROWID,B.STATUS 
							 FROM COMMON_MSG_WRAPPER C, MS_MSGENT E, MS_MSGLOG L, DL_BCN B
							 WHERE C.REFNO = E.PROC_INIT  AND L.MESSAGE_IND = E.SWIFT_MSG_SEQNO
							 AND B.CONTRACT_CD = C.REFNO
							 AND B.BROKER_CD = C.BROKER_CD
							 AND TO_CHAR(B.DL_DATE,'DD/MM/YYYY') = TO_CHAR(C.DEAL_DT,'DD/MM/YYYY')
							 AND C.MSG_TYPE = '515'
							 AND C.status ='R' AND C.FLGSPEEDY ='Y' AND C.SENDER =:l_sender AND C.STP_STAT='STP'
							 AND L.MESSAGE_CLASS= :l_flag1
							 //AND B.STATUS = DECODE(:l_unmap,0,'RC',1,'AA',' ')
							 //AND DECODE(:l_unmap,1,B.FAILREASON_CD,' ') = DECODE(:l_unmap,1,'95',' ')
							 AND (B.STATUS ='RC' OR (B.STATUS ='AA' AND B.FAILREASON_CD='95'))
							 AND C.BROKER_CD = L.CLIENT
							 AND L.STATUS = 'M'; 


				  IS_ANY_ORA_ERROR; */
		}
			else
			{
					   EXEC SQL DECLARE MT548ISOSENDER_I CURSOR FOR
								 SELECT DISTINCT(C.SENDER) FROM COMMON_MSG_WRAPPER C, MS_MSGENT E, MS_MSGLOG L
								 WHERE C.REFNO = E.PROC_INIT  AND L.MESSAGE_IND = E.SWIFT_MSG_SEQNO
								 AND C.MSG_TYPE = :l_in_msgtype[l_loop]
								 AND C.status ='R' AND C.FLGSPEEDY ='Y' AND C.SENDER <> 'SPEEDE'  AND C.STP_STAT='STP'
								 AND L.MESSAGE_CLASS=:l_flag1 AND L.SWIFT_MSG_NO = :l_out_msgtype[l_loop]
								 AND C.CLIENT = L.CLIENT
								 AND L.STATUS = 'M'; 


					  IS_ANY_ORA_ERROR;

					   EXEC SQL OPEN MT548ISOSENDER_I; 

					   /* Changed and declared below by Sana EXEC SQL DECLARE MT548ISO_I CURSOR FOR
								 SELECT L.MSG,C.RECIEVER,L.ROWID,C.ROWID  FROM COMMON_MSG_WRAPPER C, MS_MSGENT E, MS_MSGLOG L
								 WHERE C.REFNO = E.PROC_INIT  AND L.MESSAGE_IND = E.SWIFT_MSG_SEQNO
								 AND C.MSG_TYPE = :l_in_msgtype[l_loop]
								 AND C.status ='R' AND C.FLGSPEEDY ='Y' AND C.SENDER =:l_sender AND C.STP_STAT='STP'
								 AND L.MESSAGE_CLASS= :l_flag1 AND L.SWIFT_MSG_NO = :l_out_msgtype[l_loop]
								 AND C.CLIENT = L.CLIENT
								 AND L.STATUS = 'M'; 

					  IS_ANY_ORA_ERROR;*/
			}
			for(;;)
			{	
				memset(l_sender,APL_NULL_CHAR,36);
				if(l_flag == 'B')
					EXEC SQL FETCH MT548ISOSENDER_B INTO :l_sender; 
				else
					EXEC SQL FETCH MT548ISOSENDER_I INTO :l_sender; 

				IS_ANY_ORA_ERROR;
				if(sqlca.sqlcode == 1403)
					break;
				memset(chr_l_file_out,APL_NULL_CHAR,PATH_LENGTH); /*Nikhil */
				strcpy(chr_l_file_out,chr_l_broktemp_dir);/*Nikhil */
				
				 EXEC SQL SELECT :l_sender||'.'||TO_CHAR(SYSDATE,'DDMMYYHH24MISS') INTO :l_temp_filename FROM DUAL; 

				IS_ANY_ORA_ERROR;
				memset(l_outfile,APL_NULL_CHAR,50); /*Nikhil S*/
				strcpy(l_outfile,l_temp_filename);
				printf("\nNikhil l_temp_filename is :%s",l_temp_filename);
				memset(l_outfile,APL_NULL_CHAR,50); /*Nikhil S*/
				strcpy(l_outfile,l_temp_filename);
				strcat(chr_l_file_out,l_temp_filename);
				printf("\nNikhil chr_l_file_out is :%s:",chr_l_file_out);
		
				  if ((l_file_out = fopen(chr_l_file_out,"w+")) == NULL)
				  {
							 return(APL_FAILURE);
			   	}
				if(l_flag == 'B')
				{
						EXEC SQL DECLARE MT548ISO_B CURSOR FOR
								 SELECT L.MSG,C.RECIEVER,L.ROWID,C.ROWID,B.STATUS 
								 FROM COMMON_MSG_WRAPPER C, MS_MSGENT E, MS_MSGLOG L, DL_BCN B
								 WHERE C.REFNO = E.PROC_INIT  AND L.MESSAGE_IND = E.SWIFT_MSG_SEQNO
								 AND B.CONTRACT_CD = C.REFNO
								 AND B.BROKER_CD = C.BROKER_CD
								 AND TO_CHAR(B.DL_DATE,'DD/MM/YYYY') = TO_CHAR(C.DEAL_DT,'DD/MM/YYYY')
								 AND C.MSG_TYPE = '515'
								 AND C.status ='R' AND C.FLGSPEEDY ='Y' AND C.SENDER =:l_sender AND C.STP_STAT='STP'
								 AND L.MESSAGE_CLASS= :l_flag1
								 /*AND B.STATUS = DECODE(:l_unmap,0,'RC',1,'AA',' ')
								 AND DECODE(:l_unmap,1,B.FAILREASON_CD,' ') = DECODE(:l_unmap,1,'95',' ')*/
								 AND (B.STATUS ='RC' OR (B.STATUS ='AA' AND B.FAILREASON_CD='95'))
								 AND C.BROKER_CD = L.CLIENT
								 AND L.STATUS = 'M'; 
					  IS_ANY_ORA_ERROR;
					  
					  EXEC SQL OPEN  MT548ISO_B;  
				}
				else
				{
						EXEC SQL DECLARE MT548ISO_I CURSOR FOR
									 SELECT L.MSG,C.RECIEVER,L.ROWID,C.ROWID  FROM COMMON_MSG_WRAPPER C, MS_MSGENT E, MS_MSGLOG L
									 WHERE C.REFNO = E.PROC_INIT  AND L.MESSAGE_IND = E.SWIFT_MSG_SEQNO
									 AND C.MSG_TYPE = :l_in_msgtype[l_loop]
									 AND C.status ='R' AND C.FLGSPEEDY ='Y' AND C.SENDER =:l_sender AND C.STP_STAT='STP'
									 AND L.MESSAGE_CLASS= :l_flag1 AND L.SWIFT_MSG_NO = :l_out_msgtype[l_loop]
									 AND C.CLIENT = L.CLIENT
									 AND L.STATUS = 'M'; 
						  IS_ANY_ORA_ERROR;

						  EXEC SQL OPEN  MT548ISO_I;  
				}
				
				CO_ProcMonitor(g_logfile, "Opened Cursor MT548ISO", NULL, NULL);
				for(;;)
				  {
							 memset(l_temp_filename,APL_NULL_CHAR,50); /*Nikhil S*/
							 memset(l_cust_dp_id,APL_NULL_CHAR,36);/*Nikhil S*/
							 memset(l_msglog_rowid,APL_NULL_CHAR,APL_ROWID_LEN);
							 memset(l_cmw_rowid,APL_NULL_CHAR,APL_ROWID_LEN);
							 memset(l_bcn_stat,APL_NULL_CHAR,3);
							if(l_flag == 'B')	
								EXEC SQL FETCH MT548ISO_B INTO :l_temp_filename,:l_cust_dp_id,:l_msglog_rowid,:l_cmw_rowid,:l_bcn_stat; 
							else
								EXEC SQL FETCH MT548ISO_I INTO :l_temp_filename,:l_cust_dp_id,:l_msglog_rowid,:l_cmw_rowid; 


							 IS_ANY_ORA_ERROR;	
							 CO_ProcMonitor(g_logfile, "Fetched Cursor MT548ISO", NULL, NULL);
							 if(APL_ZERO_RESULT_SET)
							 {
										printf("\nBreaking from MT548ISO loop...");
										break;
							 }
							 memset(chr_l_file_in,APL_NULL_CHAR,PATH_LENGTH); /*Nikhil */
							 memset(chr_l_file_in,APL_NULL_CHAR,PATH_LENGTH);
							 //strcpy(chr_l_outmsg_dir,g_chr_outmsg_dir);
							 /* Added by Gouse - Prod Issue - 13/09/2012 - Start */
							 memset(chr_l_outmsg_dir,APL_NULL_CHAR,PATH_LENGTH);
							 if (CO_ReadToken(l_ptr_ini_file,"INTL_MS_OUT_PATH",chr_l_outmsg_dir,l_debug_info_ptr) != APL_SUCCESS)
 							 {
								Alert("Unable to Read Token INTL_MS_OUT_PATH from config file");
								return(APL_FAILURE);
 							 }
							 /* Added by Gouse - Prod Issue - 13/09/2012 - End */
							 Alert("chr_l_outmsg_dir is |%s|",chr_l_outmsg_dir);
						
							 strcpy(chr_l_file_in,chr_l_outmsg_dir);/*Nikhil */
							 strcat(chr_l_file_in,l_temp_filename);			
							 fflush(stdout);

							EXEC SQL UPDATE MS_MSGLOG
							SET STATUS='A' 
							WHERE ROWID=:l_msglog_rowid ;  

							IS_ANY_ORA_ERROR

							if(l_flag == 'I' || (l_flag == 'B' && strcmp(l_bcn_stat,"RC") == 0))
							{
								EXEC SQL UPDATE COMMON_MSG_WRAPPER
								SET STATUS='P' 
								WHERE ROWID=:l_cmw_rowid ; 
								IS_ANY_ORA_ERROR
							}
							 if((l_file_in = fopen(chr_l_file_in,"r")) == NULL)
							 {
										return(APL_FAILURE);	
							 }
							 fprintf(l_file_out,"{IFN");
							if(l_flag == 'B')
								fprintf(l_file_out,"548}");
							else/*{*/
								fprintf(l_file_out,"%s}",l_out_msgtype[l_loop]);
							 fprintf(l_file_out,"{%s}",l_cust_dp_id);
							 fprintf(l_file_out,"{%s}\n",l_sender);
							 fprintf(l_file_out,"{\n");
							 while (!feof(l_file_in))
							 {
										memset(val,APL_NULL_CHAR,81);
										fscanf(l_file_in, "%[^\n]\n",val);
										printf("val is |%s|\n",val);
										fflush(stdout);
										fputs(val,l_file_out);
										fprintf(l_file_out,"\n");
							 }
							 fprintf(l_file_out,"-}\n");
							 fclose(l_file_in);

				  }
				  fclose(l_file_out);
				/*From Prev Func*/
	 				sprintf(l_buf2, "mv %s* %s",chr_l_broktemp_dir,chr_l_brok_dir);
	            printf("l_buf2 is %s\n",l_buf2);
				fflush(stdout);
	            if( system(l_buf2) != 0)
	                fprintf(g_logfile,"\n Unable to move files from Broker dir to reports directory ");
					CO_ProcMonitor(g_logfile, "Before Calling Report Function", NULL, NULL);
                printf("\n Amit: Before Calling Report Function 2-1\n");
				fflush(stdout);
	             
					memset(l_intl_rept_struct_ha->report_name,APL_NULL_CHAR,51);
					memset(l_intl_rept_struct_ha->report_desc,APL_NULL_CHAR,APL_REPDESC_LENGTH);
					memset(l_intl_rept_struct_ha->report_date,APL_NULL_CHAR,APL_DATE_LEN);
					memset(l_intl_rept_struct_ha->task_desc,APL_NULL_CHAR,61);
					memset(l_intl_rept_struct_ha->fe_be_ind,APL_NULL_CHAR,APL_FLAG_LENGTH);
					memset(l_intl_rept_struct_ha->usr,APL_NULL_CHAR,15);
					strcpy(l_intl_rept_struct_ha->report_name,l_outfile );
	             strcpy(l_intl_rept_struct_ha->report_desc, "REPORT");
	            strcpy(l_intl_rept_struct_ha->report_date, argv[2]);
	            l_intl_rept_struct_ha->report_width = 100;
	            strcpy(l_intl_rept_struct_ha->task_desc, argv[5]);
	  				strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
	            strcpy(l_intl_rept_struct_ha->usr, argv[3]);


               printf("\n Amit: Before Calling Report Function 2-2\n");
               printf("\nFILE l_outfile2 = |%s|\n",l_outfile);
               if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))
               {
                   APL_GOBACK_FAIL;
               }
			   else
				{
				   printf("Return Successfully");
				   fflush(stdout);
				}
			   /*Isolve314:15/05/2007 */
			strcat(l_param_str,l_outfile);
			strcat(l_param_str,MSG_PARAM_STRUCT_SEP);

              printf("\n Amit: After Calling Report Function 2\n");
			  fflush(stdout);
				/*From Prev Func End*/
				if(l_flag == 'B')
				   EXEC SQL CLOSE MT548ISO_B;  

			sleep(1);	
			}
			if(l_flag == 'B')
			 EXEC SQL CLOSE MT548ISOSENDER_B;  
			else
			 EXEC SQL CLOSE MT548ISOSENDER_I; 



	}/*for(l_loop= 0;l_loop <4;l_loop++) ends here*/
}/*Speedy Ends*/

		/*CODE FOR 548 SPEEDE INTRA ISO END*/

		/*CODE FOR 548 SPEEDE INTRA IOP START*/
if(!strcmp(l_chr_speedy,"N"))/*if Non Speedy messages are to be generated*/
{
					  l_int_num = 0;
					  if(APL_FAILURE == CO_SplitStr(l_chr_arglist[2],
													  '|',
													  &l_int_num,&l_chr_arglist2))
					  {
								 CO_ProcMonitor(g_logfile, "Failure from StrSplitFn", NULL, NULL);
								 APL_GOBACK_FAIL
					  }

					  l_len_list=0;
					  for (l_temp=0;l_temp<l_int_num;l_temp++)
					  {
								 l_len_list += strlen(l_chr_arglist2[l_temp]);
								 l_len_list += 3; /*ADD 3 for arranging data as 'l_chr_arglist2[l_temp]', */
					  }
					  l_len_list += 3;/*  ADDED ' ' at end of string*/
			
			printf("\n NIKHIL l_len_list :%d:",l_len_list);
			l_list = (char *) calloc(l_len_list,sizeof(char));
			memset(l_list,APL_NULL_CHAR,l_len_list);
			for (l_temp=0;l_temp<l_int_num;l_temp++)
			{
				printf("\n NIKHIL l_chr_arglist2[l_temp] :%s:",l_chr_arglist2[l_temp]);
				strcat(l_list,"'");
				strcat(l_list,l_chr_arglist2[l_temp]);
				strcat(l_list,"',");
			}
			strcat(l_list,"' '");/* Added ' ' to select ALL brokers when selected*/
			printf("\n NIKHIL l_list :%s: :%d:",l_list,(int)strlen(l_list)); //AIX - Warnings Removal
		   fprintf(g_logfile," \nl_list :%s: :%d:",l_list,(int)strlen(l_list));
			/* New QUERIES*/
			if(l_flag == 'B')
			{
					  /* printf("\n Declaring MT548IOPSENDER_B CURSOR");
					  printf("\n DECLARE NIKHIL :l_chr_arglist[5] :%s:",l_chr_arglist[5]);
					  printf("\n DECLARE NIKHIL l_list :%s:",l_list);
					  printf("\n DECLARE NIKHIL l_flag1 :%s:",l_flag1);
					  printf("\n DECLARE NIKHIL l_flag :%c:",l_flag); */
					  printf("\n Chk : Msg548 : Generation ");
					  fflush(stdout);

					   EXEC SQL DECLARE MT548IOPSENDER_B CURSOR FOR
						  SELECT DISTINCT(C.SENDER),C.SERVPROV FROM COMMON_MSG_WRAPPER C, MS_MSGENT E, MS_MSGLOG L, DL_BCN B
								 WHERE C.REFNO = E.PROC_INIT  AND L.MESSAGE_IND = E.SWIFT_MSG_SEQNO
								 AND B.CONTRACT_CD=C.REFNO 
								 AND B.BROKER_CD = C.BROKER_CD 
								 AND TO_CHAR(B.DL_DATE,'DD/MM/YYYY') = TO_CHAR(C.DEAL_DT,'DD/MM/YYYY')
								 AND C.MSG_TYPE  = '515'
								 AND C.status ='R' AND C.FLGSPEEDY ='N' AND C.SENDER <> 'SPEEDE'
								 AND C.STP_STAT='STP'
								 AND L.MESSAGE_CLASS = :l_flag1 
								 /* AND B.STATUS = DECODE(:l_unmap,0,'RC',1,'AA',' ')
								 AND DECODE(:l_unmap,1,B.FAILREASON_CD,' ') = DECODE(:l_unmap,1,'95',' ') */
								 AND (B.STATUS ='RC' OR (B.STATUS ='AA' AND B.FAILREASON_CD='95'))
								 AND C.BROKER_CD = L.CLIENT
								 AND L.STATUS = 'M'; 



					  /* printf ("\n NNN1  sqlca.sqlcode :%d:",sqlca.sqlcode);
					  printf("\n DECLARE NIKHIL l_flag1 :%s:",l_flag1); */
					  printf("\n Sql code = |%d|", sqlca.sqlcode);
					  IS_ANY_ORA_ERROR;

					  printf ("\n NNN1  sqlca.sqlcode :%d:",sqlca.sqlcode);


					   /* EXEC SQL DECLARE MT548IOP_B CURSOR FOR
								 SELECT L.MSG,L.CLIENT,C.RECIEVER,L.ROWID,C.ROWID,B.STATUS 
								 FROM COMMON_MSG_WRAPPER C, MS_MSGENT E, MS_MSGLOG L, DL_BCN B
								 WHERE C.REFNO = E.PROC_INIT  AND L.MESSAGE_IND = E.SWIFT_MSG_SEQNO
								 AND B.CONTRACT_CD = C.REFNO
								 AND B.BROKER_CD = C.BROKER_CD
								 AND TO_CHAR(B.DL_DATE,'DD/MM/YYYY') = TO_CHAR(C.DEAL_DT,'DD/MM/YYYY')
								 AND C.MSG_TYPE = '515'
								 AND C.status ='R' AND C.FLGSPEEDY ='N' AND C.SENDER =:l_sender AND C.STP_STAT='STP'
								 AND C.SERVPROV = :l_servprov
								 AND C.REFNO = E.PROC_INIT  AND L.MESSAGE_IND = E.SWIFT_MSG_SEQNO
								 AND L.MESSAGE_CLASS=:l_flag1 */
								 /*AND B.STATUS = DECODE(:l_unmap,0,'RC',1,'AA',' ')
								 AND DECODE(:l_unmap,1,B.FAILREASON_CD,' ') = DECODE(:l_unmap,1,'95',' ')*/
								 /* AND (B.STATUS ='RC' OR (B.STATUS ='AA' AND B.FAILREASON_CD='95'))
								 AND C.BROKER_CD = L.CLIENT
								 AND L.STATUS = 'M';  

					  IS_ANY_ORA_ERROR;
					  printf ("\n NNN1223  sqlca.sqlcode :%d:",sqlca.sqlcode); */
			}
			else
			{
					  printf("\n Declaring MT548IOPSENDER_I CURSOR");
					   EXEC SQL DECLARE MT548IOPSENDER_I CURSOR FOR
								 SELECT DISTINCT(C.SENDER),C.SERVPROV FROM COMMON_MSG_WRAPPER C, MS_MSGENT E, MS_MSGLOG L
								 WHERE C.REFNO = E.PROC_INIT  AND L.MESSAGE_IND = E.SWIFT_MSG_SEQNO
								 AND C.MSG_TYPE  =:l_in_msgtype[l_loop]
								 AND C.status ='R' AND C.FLGSPEEDY ='N' AND C.SENDER <> 'SPEEDE'
								 AND C.STP_STAT='STP'
								 AND L.MESSAGE_CLASS=:l_flag1 AND L.SWIFT_MSG_NO = :l_out_msgtype[l_loop]
								 AND C.CLIENT = L.CLIENT
								 AND L.STATUS = 'M';  



					  IS_ANY_ORA_ERROR;


					   EXEC SQL DECLARE MT548IOP_I CURSOR FOR
								 SELECT L.MSG,L.CLIENT,C.RECIEVER,L.ROWID,C.ROWID  FROM COMMON_MSG_WRAPPER C, MS_MSGENT E, MS_MSGLOG L
								 WHERE C.REFNO = E.PROC_INIT  AND L.MESSAGE_IND = E.SWIFT_MSG_SEQNO
								AND C.MSG_TYPE = :l_in_msgtype[l_loop]
								 AND C.status ='R' AND C.FLGSPEEDY ='N' AND C.SENDER =:l_sender AND C.STP_STAT='STP'
								 AND C.SERVPROV = :l_servprov
								 AND L.MESSAGE_CLASS=:l_flag1 AND L.SWIFT_MSG_NO = :l_out_msgtype[l_loop]
								 AND C.CLIENT = L.CLIENT
								 AND L.STATUS = 'M';  



					  IS_ANY_ORA_ERROR;

			}
			/* New QUERIES*/

/* This loop is executed 3 times if the flag is I (C.MSG_TYPE = 541/2/3/4) 
	else 1 time if it is for B (C.MSG_TYPE =515) */
	for(l_loop= 0;l_loop <4;l_loop++)
	{
		if(l_flag == 'B')
		{
			 EXEC SQL OPEN MT548IOPSENDER_B;  

			printf ("\n NNN2  sqlca.sqlcode :%d:",sqlca.sqlcode);
		}
		else
		{
		 EXEC SQL OPEN MT548IOPSENDER_I;  
		}

		if(l_flag == 'B')
		{
			printf("\n Its's Broker directly exiting l_loop loop next time");
			CO_ProcMonitor(g_logfile," Its's Broker directly exiting l_loop loop next time",NULL,NULL);
			l_loop=4;
		}
			for(;;)
			{	
				memset(l_sender,APL_NULL_CHAR,36);
				memset(l_servprov,APL_NULL_CHAR,36);
				i_ind = 0;
				i_ind1 = 0;
				printf("\n FETCH NIKHIL :l_chr_arglist[5] :%s:",l_chr_arglist[5]);
				printf("\n FETCH NIKHIL l_list :%s:",l_list);
				printf("\n FETCH NIKHIL l_flag1 :%s:",l_flag1);
				printf("\n FETCH NIKHIL l_flag :%c:",l_flag);
				
				if(l_flag == 'B')
				 EXEC SQL FETCH MT548IOPSENDER_B INTO :l_sender:i_ind,:l_servprov:i_ind1; 
				else
				 EXEC SQL FETCH MT548IOPSENDER_I INTO :l_sender,:l_servprov;

				IS_ANY_ORA_ERROR;
				if(APL_ZERO_RESULT_SET)
					break;
				memset(chr_l_file_out,APL_NULL_CHAR,PATH_LENGTH); /*Nikhil */
				strcpy(chr_l_file_out,chr_l_broktemp_dir);/*Nikhil */
				
				
				EXEC SQL SELECT :l_sender||'.'||:l_servprov||'.'||DECODE(:l_flag1,'B','548',:l_out_msgtype[l_loop])||'.'||
				TO_CHAR(SYSDATE,'DDMMYYHH24MISS') 
				INTO :l_temp_filename 
				FROM DUAL; 

				IS_ANY_ORA_ERROR;
				memset(l_outfile,APL_NULL_CHAR,50); /*Nikhil S*/
				strcpy(l_outfile,l_temp_filename);
				printf("\nNikhil l_temp_filename is :%s",l_temp_filename);
				strcat(chr_l_file_out,l_temp_filename);
				printf("\nNikhil chr_l_file_out is :%s:",chr_l_file_out);
				l_flg_rec = 0;
				  if ((l_file_out = fopen(chr_l_file_out,"w+")) == NULL)
				  {
							 return(APL_FAILURE);
			   	}
							 fprintf(g_logfile,"\nNikhil chr_l_file_oute is :%s",chr_l_file_out);
				if(l_flag == 'B')
				{
					Alert("Declaring cursor MT548IOP_B");
					fflush(stdout);
					EXEC SQL DECLARE MT548IOP_B CURSOR FOR
                                                                 SELECT L.MSG,L.CLIENT,C.RECIEVER,L.ROWID,C.ROWID,B.STATUS
                                                                 FROM COMMON_MSG_WRAPPER C, MS_MSGENT E, MS_MSGLOG L, DL_BCN B
                                                                 WHERE C.REFNO = E.PROC_INIT  AND L.MESSAGE_IND = E.SWIFT_MSG_SEQNO
                                                                 AND B.CONTRACT_CD = C.REFNO
                                                                 AND B.BROKER_CD = C.BROKER_CD
                                                                 AND TO_CHAR(B.DL_DATE,'DD/MM/YYYY') = TO_CHAR(C.DEAL_DT,'DD/MM/YYYY')
                                                                 AND C.MSG_TYPE = '515'
                                                                 AND C.status ='R' AND C.FLGSPEEDY ='N' AND C.SENDER =:l_sender AND C.STP_STAT='STP'
                                                                 AND C.SERVPROV = :l_servprov
                                                                 AND C.REFNO = E.PROC_INIT  AND L.MESSAGE_IND = E.SWIFT_MSG_SEQNO
                                                                 AND L.MESSAGE_CLASS=:l_flag1
                                                                 /*AND B.STATUS = DECODE(:l_unmap,0,'RC',1,'AA',' ')
                                                                 AND DECODE(:l_unmap,1,B.FAILREASON_CD,' ') = DECODE(:l_unmap,1,'95',' ')*/
                                                                 AND (B.STATUS ='RC' OR (B.STATUS ='AA' AND B.FAILREASON_CD='95'))
                                                                 AND C.BROKER_CD = L.CLIENT
                                                                 AND L.STATUS = 'M';
					Alert("Sqlca code for MT548IOP_B = |%d|",sqlca.sqlcode);
					fflush(stdout);

					IS_ANY_ORA_ERROR

					EXEC SQL OPEN  MT548IOP_B;
				}
				else
					EXEC SQL OPEN  MT548IOP_I;

				for(;;)
				  {
							 memset(l_temp_filename,APL_NULL_CHAR,50); /*Nikhil S*/
							 memset(l_cust_dp_id,APL_NULL_CHAR,36);/*Nikhil S*/
							 memset(l_msglog_rowid,APL_NULL_CHAR,APL_ROWID_LEN);
							 memset(l_cmw_rowid,APL_NULL_CHAR,APL_ROWID_LEN);
							 memset(l_client,APL_NULL_CHAR,11);
							 memset(l_bcn_stat,APL_NULL_CHAR,3);
							if(l_flag == 'B')
							{
							 EXEC SQL FETCH MT548IOP_B INTO :l_temp_filename,:l_client,:l_cust_dp_id,:l_msglog_rowid,:l_cmw_rowid,:l_bcn_stat;

							 printf("\n Nikhil BCN STATUS FOR MT548IOP_B is :%s:",l_bcn_stat);
							}
							else
							 EXEC SQL FETCH MT548IOP_I INTO :l_temp_filename,:l_client,:l_cust_dp_id,:l_msglog_rowid,:l_cmw_rowid;

							IS_ANY_ORA_ERROR;	
							 CO_ProcMonitor(g_logfile, "Fetched Cursor MT548IOP", NULL, NULL);
							 if(APL_ZERO_RESULT_SET)
							 {
										break;
							 }
							printf("\n NIkhil l_chr_all :%s:",l_chr_all);
							printf("\n NIkhil l_client :%s:",l_client);
							if(l_flag == 'B' && strcmp(l_chr_all,"S") == 0)
							{
							 if(!strstr(l_list,l_client))
							   continue;
							}
							l_flg_rec++;
							 memset(chr_l_file_in,APL_NULL_CHAR,PATH_LENGTH); /*Nikhil */
							 /* Added by Gouse - Prod Issue - 13/09/2012 - Start */
							 memset(chr_l_outmsg_dir,APL_NULL_CHAR,PATH_LENGTH);
							 if (CO_ReadToken(l_ptr_ini_file,"INTL_MS_OUT_PATH",chr_l_outmsg_dir,l_debug_info_ptr) != APL_SUCCESS)
 							 {
								Alert("Unable to Read Token INTL_MS_OUT_PATH from config file");
								return(APL_FAILURE);
 							 }
							 /* Added by Gouse - Prod Issue - 13/09/2012 - End */
							 Alert("chr_l_outmsg_dir is |%s|",chr_l_outmsg_dir);
							 strcpy(chr_l_file_in,chr_l_outmsg_dir);/*Nikhil */
							 strcat(chr_l_file_in,l_temp_filename);
							 printf("\n Nikhil Incoming file is :%s:",chr_l_file_in);
							
							 if((l_file_in = fopen(chr_l_file_in,"r")) == NULL)
							 {
								Alert("Unable to open the file");
								return(APL_FAILURE);	
							 }
							EXEC SQL UPDATE MS_MSGLOG
							SET STATUS='A' 
							WHERE ROWID=:l_msglog_rowid ; 
							IS_ANY_ORA_ERROR
							/*if it is for unmapped don't change its status as we will need it when trade  is mapped*/
							if(l_flag == 'I' || (l_flag == 'B' && strcmp(l_bcn_stat,"RC") == 0))
							{
								EXEC SQL UPDATE COMMON_MSG_WRAPPER
								SET STATUS='P' 
								WHERE ROWID=:l_cmw_rowid ; 
								IS_ANY_ORA_ERROR
							}
							 fprintf(l_file_out,"{IFN");
							if(l_flag == 'B')
								fprintf(l_file_out,"548}");
							else/*{*/
								fprintf(l_file_out,"%s}",l_out_msgtype[l_loop]);
							 fprintf(l_file_out,"{%s}",l_cust_dp_id);
							 fprintf(l_file_out,"{%s}\n",l_sender);
							 fprintf(l_file_out,"{\n");
							 while (!feof(l_file_in))
							 {
										memset(val,APL_NULL_CHAR,81);
										fscanf(l_file_in, "%[^\n]\n",val);
										printf("val is |%s|\n",val);
										fflush(stdout);
										fputs(val,l_file_out);
										fprintf(l_file_out,"\n");
							 }
							 fprintf(l_file_out,"-}\n");
							 fclose(l_file_in);

				  }
				  fclose(l_file_out);
					if(l_flg_rec ==  0)
						{
							fprintf(g_logfile,"\n No records in file :%s: Hence deleting it ",chr_l_file_out);
							printf("\n No records in file ");
							printf("\n chr_l_file_out :%s:",chr_l_file_out);
							sprintf(l_buf2, "rm -f %s",chr_l_file_out);
							printf("l_buf2 is %s\n",l_buf2);
							if( system(l_buf2) != 0)
								fprintf(g_logfile,"\n Unable to remove file");

						}
						else
						{
								  /*From Prev Func
								  sprintf(l_buf2, "mv %s* %s",chr_l_broktemp_dir,chr_l_brok_dir);
								  printf("l_buf2 is %s\n",l_buf2);
								  if( system(l_buf2) != 0)
											 fprintf(g_logfile,"\n Unable to move files from Broker dir to reports directory ");*/
								
								  printf("\n Inside Else Part 3-1\n");		
								  sprintf(l_buf2, "mv %s* %s",chr_l_broktemp_dir,chr_l_brok_dir);
								  printf("l_buf2 is %s\n",l_buf2);
								  if( system(l_buf2) != 0)
								  fprintf(g_logfile,"\n Unable to move files from Broker dir to reports directory ");

								  CO_ProcMonitor(g_logfile, "Before Calling Report Function3", NULL, NULL);
								  printf("\n Amit: Before Calling Report Function 3-1\n");

								  memset(l_intl_rept_struct_ha->report_name,APL_NULL_CHAR,51);
								  memset(l_intl_rept_struct_ha->report_desc,APL_NULL_CHAR,APL_REPDESC_LENGTH);
								  memset(l_intl_rept_struct_ha->report_date,APL_NULL_CHAR,APL_DATE_LEN);
								  memset(l_intl_rept_struct_ha->task_desc,APL_NULL_CHAR,61);
								  memset(l_intl_rept_struct_ha->fe_be_ind,APL_NULL_CHAR,APL_FLAG_LENGTH);
								  memset(l_intl_rept_struct_ha->usr,APL_NULL_CHAR,15);
								  strcpy(l_intl_rept_struct_ha->report_name,l_outfile );
								  strcpy(l_intl_rept_struct_ha->report_desc, "REPORT");
								  strcpy(l_intl_rept_struct_ha->report_date, argv[2]);
								  l_intl_rept_struct_ha->report_width = 100;
								  strcpy(l_intl_rept_struct_ha->task_desc, argv[5]);
								  strcpy(l_intl_rept_struct_ha->fe_be_ind, APL_BE_IND);
								  strcpy(l_intl_rept_struct_ha->usr, argv[3]);


								  printf("\n Amit: Before Calling Report Function 3-2\n");
								  printf("\n Amit: report_name=|%s|\n",l_intl_rept_struct_ha->report_name);
								  printf("\n Amit: report_desc=|%s|\n",l_intl_rept_struct_ha->report_desc);
								  printf("\nFILE l_outfile3 = |%s|\n",l_outfile);
								  if (APL_FAILURE == CO_Proc_DBRptIns( l_intl_rept_struct_ha, l_debug_info_ptr))
								  {
											 APL_GOBACK_FAIL;
								  }
								  /*Isolve314:15/05/2007 */
									strcat(l_param_str,l_outfile);
									strcat(l_param_str,MSG_PARAM_STRUCT_SEP);	
								  printf("\n Amit: After Calling Report Function 3\n");

						}

				/*From Prev Func End*/
				  if(l_flag == 'B')
				  EXEC SQL CLOSE MT548IOP_B; 
				  else
				   EXEC SQL CLOSE MT548IOP_I;  
				
			}
			if(l_flag == 'B')
			 EXEC SQL CLOSE MT548IOPSENDER_B; 
			else
			 EXEC SQL CLOSE MT548IOPSENDER_I; 

	}/* for(l_loop= 0;l_loop <4;l_loop++) Nonspeedy end*/

}
		/*CODE FOR 548 SPEEDE INTRA IOP END*/

/*Nikhil S end*/
/*Isolve314:15/05/2007 */
		memset(g_param_str,APL_NULL_CHAR,sizeof(g_param_str));
		strcpy(g_param_str,l_param_str);
		Alert("g_param_str = |%s|",g_param_str);
		fflush(stdout);
	/* if ( CO_ReportFileScript(l_param_str,
								argv,
								chr_l_brok_dir,
								g_logfile,
								l_debug_info_ptr)== APL_FAILURE)
		APL_GOBACK_FAIL */

	APL_GOBACK_SUCCESS

RETURN_SUCCESS:
	{
		free(l_intl_rept_struct_ha);
		CO_ProcMonitor(g_logfile,"Leaving  NEW_DL_Proc_548Msg With Success",NULL,NULL);
		return(APL_SUCCESS);
	}

RETURN_FAILURE:
	{
		free(l_intl_rept_struct_ha);
		CO_ProcMonitor(g_logfile,"Leaving  NEW_DL_Proc_548Msg With Failure",NULL,NULL);
		printf("\n Error Inside DL_Proc_548Msg:ORA|%d|\n",sqlca.sqlcode);
		sprintf(chr_g_log_buffer,"Leaving NEW_DL_Proc_548Msg With Failure ORA|%d|\n",sqlca.sqlcode);
		CO_ProcMonitor(g_logfile,chr_g_log_buffer,l_debug_info_ptr,NULL);
		return(APL_FAILURE);
	}
}

/* AmitB:Isolve314:new fuction for  download all the SEBI messages:15/05/2007*/
int CO_ReportFileScript(char *p_param_str,char **argv,char *p_rep_path,FILE *fl_userlog,
		      			DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	printf("Entering Inside CO_ReportFileScript Function");
	fflush(stdout);

	fflush(fl_userlog);

	fprintf(fl_userlog,"Entering Inside CO_ReportFileScript Function\n");

	FILE *l_init_file 				= (FILE *)NULL;
	char l_init_path[300]				= APL_NULL_STRING;
	char l_tar_path[5000]				= APL_NULL_STRING;
	char l_zip_path[5000]				= APL_NULL_STRING;
	char l_common_name[5000]			= APL_NULL_STRING;
	char l_time_stamp[30]				= APL_NULL_STRING;
	char l_start_date[20]				= APL_NULL_STRING;
	char l_user[20]					= APL_NULL_STRING;

	char l_param_str[5000]				= APL_NULL_STRING;
	char l_rep_path[5000]				= APL_NULL_STRING;
	char **temp;
	int l_int_num = 0;
	int i=0;
	//char l_tar_file[200]				= APL_NULL_STRING;
	char l_tar_file[2000]				= APL_NULL_STRING;

	memset(l_init_path,APL_NULL_CHAR,sizeof(l_init_path));
	memset(l_tar_path,APL_NULL_CHAR,sizeof(l_tar_path));
	memset(l_zip_path,APL_NULL_CHAR,sizeof(l_zip_path));
	memset(l_common_name,APL_NULL_CHAR,sizeof(l_common_name));
	memset(l_rep_path,APL_NULL_CHAR,sizeof(l_rep_path));

	INTL_REPT_STRUCT_H   *l_intl_rept_struct_ha = NULL;
	//memset(&l_intl_rept_struct_ha,APL_NULL_CHAR,sizeof(INTL_REPT_STRUCT_H));
	l_intl_rept_struct_ha = (INTL_REPT_STRUCT_H *)calloc(1, sizeof(INTL_REPT_STRUCT_H));
	APL_MALLOC_FAIL(l_intl_rept_struct_ha);	
	
	strcpy(l_start_date,argv[2]);
	strcpy(l_user,argv[3]);
	strcpy(l_param_str,p_param_str);
	strcpy(l_rep_path,p_rep_path);

	fprintf(fl_userlog,"l_start_date:|%s|\n",l_start_date);
	
	strcpy(l_init_path,getenv("INTL_ROOT_PATH"));
	strcat(l_init_path,"intl_sun.cfg");

	fprintf(fl_userlog,"l_init_path :|%s|\n",l_init_path);
	
	if((l_init_file = fopen(l_init_path,"r")) == (FILE *)NULL)
	{
		fprintf(fl_userlog,"Error : Failed to Open File PATH :|%s|\n",l_init_path);
		printf("Error : Failed to Open File PATH :|%s|\n",l_init_path);
		APL_GOBACK_FAIL
	}


	EXEC SQL SELECT TO_CHAR(SYSDATE,'DD_MON_YYYY')||CHR(95)||TO_CHAR(SYSDATE,'HH24_MI_SS')
				INTO :l_time_stamp
				FROM DUAL;

	fprintf(fl_userlog,"TIME STAMP is :|%s|\n",l_time_stamp);


	if(APL_FAILURE == CO_SplitStr(l_param_str,
                                ';',
                                &l_int_num,&temp))
        {
                CO_ProcMonitor(fl_userlog, "Failure from StrSplitFn", NULL, NULL);
                APL_GOBACK_FAIL
		}

			strcpy(l_tar_path,"tar -cvf ");
			strcat(l_tar_path,l_rep_path);
			strcat(l_tar_path,"Consolidated");
			strcat(l_tar_path,"_");
			strcat(l_tar_path,l_time_stamp);
			strcat(l_tar_path,".tar ");
			
			strcat(l_tar_file,"Consolidated");
			strcat(l_tar_file,"_");
			strcat(l_tar_file,l_time_stamp);
			strcat(l_tar_file,".tar");

			for(i=0;i<l_int_num;i++)
			{
				strcat(l_tar_path,l_rep_path);
				strcat(l_tar_path,temp[i]);
				strcat(l_tar_path," ");
			}

		if(l_int_num>0)
		{
			fprintf(fl_userlog,"TAR PATH :|%s|\n",l_tar_path);

			system(l_tar_path);
			fprintf(fl_userlog,"Status of TAR command|%s|\n",l_tar_path);

			strcpy(l_zip_path,"gzip -f ");
			strcat(l_zip_path,l_rep_path);
			strcat(l_zip_path,l_tar_file);

			fprintf(fl_userlog,"ZIP PATH :|%s|\n",l_zip_path);
			
			system(l_zip_path);


			strcpy(l_common_name,l_tar_file);
			strcat(l_common_name,".gz");
			
			memset(l_intl_rept_struct_ha->report_name,APL_NULL_CHAR,51);
                        memset(l_intl_rept_struct_ha->report_desc,APL_NULL_CHAR,APL_REPDESC_LENGTH);
                        memset(l_intl_rept_struct_ha->report_date,APL_NULL_CHAR,APL_DATE_LEN);
                        memset(l_intl_rept_struct_ha->task_desc,APL_NULL_CHAR,61);
                        memset(l_intl_rept_struct_ha->fe_be_ind,APL_NULL_CHAR,APL_FLAG_LENGTH);
                        memset(l_intl_rept_struct_ha->usr,APL_NULL_CHAR,15);
			strcpy(l_intl_rept_struct_ha->report_name,l_common_name);
			//strcat(l_intl_rept_struct_ha->report_name,"\0");
			strcpy(l_intl_rept_struct_ha->report_desc,"REPORT");
			//strcat(l_intl_rept_struct_ha->report_desc,"\0");
			strcpy(l_intl_rept_struct_ha->report_date,l_start_date);
			l_intl_rept_struct_ha->report_width = 100 ;
			strcpy(l_intl_rept_struct_ha->task_desc,argv[5]);
			strcpy(l_intl_rept_struct_ha->fe_be_ind,"B");
			strcpy(l_intl_rept_struct_ha->usr,l_user);

			 fprintf(fl_userlog,"Entering CO_Proc_DBRptIns\n");
			 fprintf(fl_userlog,"report_name:|%s|\n",l_intl_rept_struct_ha->report_name);
			 fprintf(fl_userlog,"report_desc:|%s|\n",l_intl_rept_struct_ha->report_desc);
			 fprintf(fl_userlog,"report_date:|%s|\n",l_intl_rept_struct_ha->report_date);
			 //fprintf(fl_userlog,"report_width:|%ld|\n",l_intl_rept_struct_ha.report_width); CHanges done for AIX Migration
			 fprintf(fl_userlog,"report_width:|%d|\n",l_intl_rept_struct_ha->report_width);
			 fprintf(fl_userlog,"task_desc:|%s|\n",l_intl_rept_struct_ha->task_desc);
			 fprintf(fl_userlog,"fe_be_ind:|%s|\n",l_intl_rept_struct_ha->fe_be_ind);
			 fprintf(fl_userlog,"usr:|%s|\n",l_intl_rept_struct_ha->usr);
		   
		    if(APL_FAILURE == CO_Proc_DBRptIns(l_intl_rept_struct_ha,l_debug_info_ptr))
		    {
				fprintf(fl_userlog,"Error : Failure From CO_Proc_DBRptIns\n");
				APL_GOBACK_FAIL
		    }
		}
	fclose(l_init_file);
	
APL_GOBACK_SUCCESS

RETURN_FAILURE:
	APL_IF_DEBUG
	{
		//CO_ProcMonitor(APL_OUT_FILE, "Exiting Unsuccessfully out of CO_ReportFileScript\n", (DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		printf("\n Exiting Unsuccessfully out of CO_ReportFileScript\n");
		fflush(stdout);
		fprintf(fl_userlog,"Exiting Unsuccessfully out of CO_ReportFileScript\n");
	}
	return (APL_FAILURE);

RETURN_SUCCESS:
	APL_IF_DEBUG
	{
		//CO_ProcMonitor(APL_OUT_FILE,"Exiting Succesfully out of CO_ReportFileScript\n",(DEBUG_INFO_STRUCT_H **)NULL, (INTL_ENV_DATA_STRUCT_H *)NULL);
		printf("\n Exiting Successfully out of CO_ReportFileScript\n");
		fflush(stdout);
		fprintf(fl_userlog,"Exiting Successfully out of CO_ReportFileScript\n");
	}
	return (APL_SUCCESS);

}
