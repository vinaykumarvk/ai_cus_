/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         :      DEAL PROCESSING
 *
 * File Name           :      DL_BCN_MAP.pc
 *
 * Description         :      DEAL BCN MAPPING
 *
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author           Description        RFS No.
 * ---------   --------  ---------------  ------------------   ---------
 * 16/02/2006   1.0                          DEAL BCN MAPPING  HDFCDL_010
 * 24/03/2022   1.1      kotubabu N          Linux Migration    Kotak Implementation
 *************************************************************************/



#include<stdio_64.h>
#include "Intellect_Common.h"
#include "Intellect_Interface.h"
#include "DL_Interface.h"
#include "BT_Common.h"
#include "Intellect_Error.h"
#include "CO_IndStructdef.h"
#include "CO_Commdef.h"

#define DATA_FIELD_SEPRTR ''
#define DATA_VALUE_SEPRTR ''

 /* Added by kotubabu for Linux Migration -Start*/
#ifdef OS_LINUX
FILE *g_logfile,*g_flogfile; //Added by rahul for migration
#else
FILE* g_flogfile = APL_OUT_FILE;
FILE* g_logfile = APL_OUT_FILE;
#endif
 /* Added by kotubabu for Linux Migration-End*/
char  **temp = ( char **)NULL;
short int_l_condexists =0; //isolve_12151 : Changes done for InterOperability by Tushar
int exch_mkt_flg=0;

EXEC SQL INCLUDE SQLCA.H;

int main(int argc,char **argv)  //AIX-Warnings Removal
{	
     /* Added by kotubabu for Linux Migration-Start*/
	   #ifdef OS_LINUX
         g_flogfile = APL_OUT_FILE;
         g_logfile = APL_OUT_FILE;
       #endif
    /* Added by kotubabu for Linux Migration-End*/
	 DEBUG_INFO_STRUCT_H **l_debug_info_ptr = (DEBUG_INFO_STRUCT_H **) NULL;
	 l_debug_info_ptr = (DEBUG_INFO_STRUCT_H **)calloc(1,sizeof(DEBUG_INFO_STRUCT_H *)); 

	 int l_int_num = 0;
	 int tol_limit = 0;
	 char *p_user = NULL;
	 char *p_filename = NULL;

	 char l_exchange[10] = APL_NULL_STRING;
	 char l_settlment_no[16] = APL_NULL_STRING;
	 char l_mkt_type[3]= APL_NULL_STRING;
	 char  ToleranceString[100] = APL_NULL_STRING;	
	 char l_user[APL_USERID_LEN] = APL_NULL_STRING;
	 char l_date[21] = APL_NULL_STRING;
	 int l_match_cnt=0;
	  
	 FILE *l_logfile = (FILE *)NULL;
	 FILE *p_logfile = NULL;

	// Pankaj Deshpande for Additional Changes to Confirmation - Starts
	char l_cln_master[11] = APL_NULL_STRING;
	char l_cln_code[11] = APL_NULL_STRING;
	char l_trade_type[5]= APL_NULL_STRING;
	// Pankaj Deshpande for Additional Changes to Confirmation - Ends
	
	if(CO_Get_DBConnect(l_debug_info_ptr) == APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}

/***********	Processing INPUT PARAMETERS	START	**********/


	if (APL_FAILURE == CO_Rtv_RptFileName( "7g",
				APL_LOGFILE_DESC,
				100,
				argv[5],
				argv,
				&g_flogfile,
				l_debug_info_ptr ) ) 
		{
			CO_ProcMonitor(g_flogfile, "Failure from CO RTY:", l_debug_info_ptr, NULL);
			APL_GOBACK_FAIL
		} 


	if(BT_Status_Update(argv[0],
				argv[1],
				argv[2],
				APL_STARTED_STATUS,
				l_debug_info_ptr) ==APL_FAILURE)
	{
		APL_GOBACK_FAIL
	}


	Alert("PPD: argv 3: |%s|", argv[2]);
	Alert("PPD: argv 4: |%s|", argv[3]);
	Alert("PPD: argv 5: |%s|", argv[4]);
	Alert("PPD: argv 6: |%s|", argv[5]);
	Alert("PPD: argv 7: |%s|", argv[6]);
	
	Alert("PPD: argv 8: |%s|", argv[7]);
	Alert("PPD: argv 9: |%s|", argv[8]);
	Alert("PPD: argv 10: |%s|", argv[9]);
	Alert("PPD: argv 11: |%s|", argv[10]);
	Alert("PPD: argv 12: |%s|", argv[11]);
	
	if(APL_FAILURE == CO_SplitStr(argv[9],
				'|',
				&l_int_num,&temp))
		{
			CO_ProcMonitor(g_flogfile, "Failure from StrSplitFn", l_debug_info_ptr, NULL);
			APL_GOBACK_FAIL

		}
		
    if(sqlca.sqlcode)
		{
			APL_GOBACK_FAIL
		}


   if(l_int_num != 6)
		{
			printf("\n total no of arguments are |%d|", l_int_num);
			CO_ProcMonitor(g_flogfile, "Improper Number of arguements", l_debug_info_ptr, NULL);
			/*CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);*/
			APL_GOBACK_FAIL
		}

	printf("\n no of arguments are |%d|", l_int_num);
	printf("\n  arguments are A--|%s|", temp[0]);
	printf("\n  arguments are B--|%s|", temp[1]);
	printf("\n  arguments are C--|%s|", temp[2]);
	
	Alert("PPD: arguments are D--|%s|", temp[3]);
	Alert("PPD: arguments are E--|%s|", temp[4]);
	Alert("PPD: arguments are F--|%s|", temp[5]);
			
	  strcpy(l_user,argv[3]); 
	  strcpy(l_date,argv[2]);
	  printf("\n***********88USER IS |%s|\n",l_user);
	  printf("\n********DATE IS********|%s|\n",l_date);
	strcpy(l_settlment_no, temp[0]);
    strcpy(l_mkt_type, temp[1]);
	strcpy(l_exchange, temp[2]);
	
	strcpy(l_cln_master, temp[3]);
	strcpy(l_cln_code, temp[4]);
	strcpy(l_trade_type, temp[5]);
	
	printf("\n Selected Exchange Code is  |%s|",l_exchange);
	printf("\n Selected settlment Number is  |%s|",l_settlment_no);
	printf("\n Selected Market Type is  |%s|", l_mkt_type);
	
	printf("PPD: Client Master is:  |%s|", l_cln_master);
	printf("PPD: Client Code is:  |%s|", l_cln_code);
	printf("PPD: Trade Type is:  |%s|", l_trade_type);

	if (!strlen(temp[0]))
		{
			printf("\n Mandatory Data Missing: Settlment Number |%s|",l_settlment_no);
			CO_ProcMonitor(g_flogfile, "Mandatory Data Missing: Settlment Number", l_debug_info_ptr, NULL);
			/*CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);*/
			APL_GOBACK_FAIL
		} 
	

/*************	Processing INPUT PARAMETERS	END	***************/

/** Check master records exists- AmitB 240207	**/
	EXEC SQL SELECT COUNT(*) INTO :l_match_cnt FROM MATCHING_MASTER;
		if(l_match_cnt == 0)
		{
			fprintf(g_flogfile,"\n No Mapping Criteria Maintained in MATCHING_MASTER !\n");
			APL_GOBACK_FAIL
		}
		IS_ANY_ORA_ERROR
	
	//isolve_12151 : Changes done for InterOperability by Tushar starts
	if (APL_FAILURE == CO_Chk_CntryEnabled("INTEROPERABILITY","SETL_TRD", &int_l_condexists, l_debug_info_ptr ))
		{	
			APL_GOBACK_FAIL
		}
	//isolve_12151 : Changes done for InterOperability by Tushar Ends
	
   if(APL_FAILURE == OneToOne(ToleranceString,l_settlment_no,l_mkt_type,l_exchange,l_cln_master,l_cln_code,l_trade_type,l_user,l_date,g_flogfile,l_debug_info_ptr))
		{
			CO_ProcMonitor(g_flogfile, "oneTOone mapping returned failure", l_debug_info_ptr, NULL);
		
		   /*CO_Proc_RptClose(l_logfile, &l_debug_info_ptr);
			*/
			APL_GOBACK_FAIL
		}

APL_GOBACK_SUCCESS
	/*
	RETURN_SUCCESS:
	 printf("\n OneToOne Successfully Completed \n");		
	 return(APL_SUCCESS);
		
   RETURN_FAILURE:
	printf("\n\n In main:Error in OneToOne \n");
	printf("\n SQL CODE IS |%d|\n\n",sqlca.sqlcode);

	 return(APL_FAILURE);
	*/

	RETURN_SUCCESS :
		CO_ProcMonitor(g_flogfile, "SUCESS IN MAIN", l_debug_info_ptr, NULL);

	if(BT_Status_Completed(argv[0],
				argv[1],
				argv[2],
				l_debug_info_ptr)   ==  APL_FAILURE )
	{
		APL_GOBACK_FAIL
	}
	CO_Proc_RptClose(g_flogfile, l_debug_info_ptr);

	EXEC SQL COMMIT WORK;

	if(sqlca.sqlcode != 0)APL_GOBACK_FAIL
		exit(0);

	RETURN_FAILURE    :
	CO_Proc_RptClose(g_flogfile, l_debug_info_ptr);
	exit(-1);
		 
}


/* ********************************************************************************* */
/*							ONE TO ONE START										*/


/*
int OneToOne(char *ToleranceString,char *p_settlement_no,char *p_mkt_type,char *p_exchange,DEBUG_INFO_STRUCT_H **l_debug_info_ptr) 	
*/

int OneToOne(char *ToleranceString,char *p_settlement_no,char *p_mkt_type,char *p_exchange,char *p_cln_master,char *p_cln_code,char *p_trade_type,char *p_chr_user, char *p_chr_date,FILE *g_flogfile,DEBUG_INFO_STRUCT_H **l_debug_info_ptr) 	
{	
	FILE  *l_ptr_ini_file = NULL;
	FILE  *l_ptr_handoff_file = NULL;
    char  chr_g_log_buffer[BUFFER_LEN] = APL_NULL_STRING;

	


	 char  forced_match='N';
	 char OrderMatch='N';
	 char  P_EXCHG_CODE[100];
	 char  DealString[4001] = APL_NULL_STRING;
	 char  BCNString[4001] = APL_NULL_STRING;
	 char  MatchDealDataString[4001] = APL_NULL_STRING;
	 char MatchBCNDataString[4001] = APL_NULL_STRING;
	 char nmatch[4001] = APL_NULL_STRING;
	 char pmatch[4001] = APL_NULL_STRING;
	 char l_nmatch[4001] = APL_NULL_STRING;
	 char l_pmatch[4001] = APL_NULL_STRING;
	 char bcnreqd[20] = APL_NULL_STRING;
	 char l_counter[15] =  APL_NULL_STRING;
	 char rpt_comments_no_record[25] = "MAPPING NOT REQUIRED";
	 char rpt_comments_sucess[10] = "MAPPED";
	 int failcode = 30;
	 char l_failcode[3] = APL_NULL_STRING;
	 int l_subfail_cd = 0;
	 short i_failcode = 0;
	 short i_subfail_cd = 0;
	 char iden[16] = APL_NULL_STRING;
	 short i_bcnreqd = 0;
	 char l_sys_date[20] = APL_NULL_STRING;
	 int l_nmap_count = 0;
	 short i_nmap_count = 0;
	 /* New Variables declared  by Amit B. 04/05/2006 */
	 double int_l_price=0.0;
	 double int_l_amount=0.0;	
  /** Added by Vijay **/
  char l_note1[100]            = APL_NULL_STRING;
  double l_tolerance_limit     = 0;
  short i_tolerance_limit      = 0;
  double l_old_net_amount      = 0;
  /** Vijay Changes End **/

	 char l_chr_rep_id[4]=  APL_NULL_STRING;
	 char l_chr_rep_format[2]=  APL_NULL_STRING;
	 char l_chr_rep_name[15]=  APL_NULL_STRING;
	 char l_chr_start_date[20]=  APL_NULL_STRING; 
	 char l_chr_user[APL_USERID_LEN]=  APL_NULL_STRING; 
	 char l_chr_fieldval[25] =  APL_NULL_STRING; 
    char chr_param_string[201] = APL_NULL_STRING;
	 char l_contract_cd[17]=APL_NULL_STRING;
	 char l_dl_date[APL_DATE_LEN]=APL_NULL_STRING;
	 int l_btch_no=0;
	 char l_broker_cd[11]=APL_NULL_STRING;
	 char l_deal_fr[3] = APL_NULL_STRING;
	 short i_deal_fr =0;
	 int l_deal_subfail=0;
	 short i_deal_subfail =0;
	 // Pankaj Deshpande
	 char  	*l_sqlstmt = (char *)NULL;
	char  	*l_sqlstmt_append = APL_NULL_STRING;
	char l_cln_param_val[3] = APL_NULL_STRING; 
	char l_str_sett_exch[4] = APL_NULL_STRING;
	char l_str_mkt_type[3] = APL_NULL_STRING;
	char l_str_sett_no[8] = APL_NULL_STRING;
	short i_str_sett_exch=0;
	short i_str_mkt_type=0;
	/* ISKB-305 - BCN Mapping summary report - Rahul -16May2007 */
	int l_proc_rec = 0;
	int l_map_rec = 0;
	int l_unmap_rec = 0;
	char l_syst_date[20] = APL_NULL_STRING;
	int l_db_proc_rec = 0;
	int l_db_map_rec = 0;
	int l_db_unmap_rec = 0;
	char l_proc_bcn[4000] = APL_NULL_STRING;
	/* ISKB-305 - BCN Mapping summary report - Rahul -16May2007 */
	

	short int_tolerance_flag = 0; /* ASHISH 04-08-2008 for Tolerance Limit */
	 
	 SYS_DL_DEAL_STRUCT_H *l_sys_dl_deal_struct_hc = NULL;
	 SYS_DL_DEAL_STRUCT_I *l_sys_dl_deal_struct_ij = NULL;
		
	 DL_BCN_STRUCT_H *l_dl_BCN_struct_h = NULL;
	 DL_BCN_STRUCT_I *l_dl_BCN_struct_i = NULL;
	

	   	  
	 EXEC SQL BEGIN DECLARE SECTION;

	 EXEC SQL VAR DealString IS STRING;
	 EXEC SQL VAR BCNString IS STRING;
	 EXEC SQL VAR MatchDealDataString IS STRING;
	 EXEC SQL VAR MatchBCNDataString IS STRING;

	 EXEC SQL VAR p_settlement_no IS STRING;
	 EXEC SQL VAR p_mkt_type IS STRING;
	 EXEC SQL VAR p_exchange IS STRING;
	 
	/* Added by Pankaj Deshpande for Additional Changes to Confirmation - Starts */
	EXEC SQL VAR p_cln_code IS STRING;
	EXEC SQL VAR p_cln_master IS STRING;
	EXEC SQL VAR p_trade_type IS STRING;
	/* Added by Pankaj Deshpande for Additional Changes to Confirmation - Ends */
	 
	 EXEC SQL VAR nmatch IS STRING;
	 EXEC SQL VAR pmatch IS STRING;
	 EXEC SQL VAR l_nmatch IS STRING;
	 EXEC SQL VAR l_pmatch IS STRING;
	 EXEC SQL VAR l_nmatch IS STRING;
	 EXEC SQL VAR l_pmatch IS STRING;
	 EXEC SQL VAR bcnreqd IS STRING;
	 EXEC SQL VAR l_counter IS STRING;
	 EXEC SQL VAR rpt_comments_no_record IS STRING;
	 EXEC SQL VAR rpt_comments_sucess IS STRING;
	 EXEC SQL VAR l_counter IS STRING;
    EXEC SQL VAR l_broker_cd IS STRING;
    EXEC SQL VAR l_contract_cd IS STRING;
    EXEC SQL VAR l_dl_date IS STRING;

	 
	 
	 EXEC SQL END DECLARE SECTION;

	// Pankaj Deshpande
	l_sqlstmt = (char *)calloc(150000,sizeof(char));
	memset(l_sqlstmt,APL_NULL_CHAR,150000);
	l_sqlstmt_append = (char *)calloc(150000,sizeof(char));
	memset(l_sqlstmt_append,APL_NULL_CHAR,150000);
	
	 l_sys_dl_deal_struct_hc=(SYS_DL_DEAL_STRUCT_H *)calloc(1,sizeof(SYS_DL_DEAL_STRUCT_H));
	 APL_MALLOC_FAIL(l_sys_dl_deal_struct_hc);
	 l_dl_BCN_struct_h=(DL_BCN_STRUCT_H *)calloc(1,sizeof(DL_BCN_STRUCT_H));
	 APL_MALLOC_FAIL(l_dl_BCN_struct_h);

	 l_sys_dl_deal_struct_ij=(SYS_DL_DEAL_STRUCT_I *)calloc(1,sizeof(SYS_DL_DEAL_STRUCT_I));
	 APL_MALLOC_FAIL(l_sys_dl_deal_struct_ij);	

	 l_dl_BCN_struct_i=(DL_BCN_STRUCT_I *)calloc(1,sizeof(DL_BCN_STRUCT_I));
	  APL_MALLOC_FAIL(l_dl_BCN_struct_i);	

	  
	 memset(l_sys_dl_deal_struct_hc, NULL, sizeof(SYS_DL_DEAL_STRUCT_H));
	 memset(l_dl_BCN_struct_h, NULL, sizeof(DL_BCN_STRUCT_H));

	 memset(l_sys_dl_deal_struct_ij, NULL, sizeof(SYS_DL_DEAL_STRUCT_I));
	 memset(l_dl_BCN_struct_i, NULL, sizeof(DL_BCN_STRUCT_I));
	
	 
	 
	 printf("\n Before Starting 1To1 matching argv[0]=|%s|",p_settlement_no);
	 printf("\n Before Starting 1To1 matching argv[1]=|%s|",p_mkt_type);

	 printf("\n Before Starting 1To1 matching argv[2]=|%s|",p_exchange);

	 CO_ProcMonitor(g_flogfile,"Entered into MAPPING FUNCTION",NULL,NULL);


	 sprintf(chr_g_log_buffer,"SETTLEMENT NO=|%s|",p_settlement_no);
	 CO_ProcMonitor(g_flogfile,chr_g_log_buffer,NULL,NULL);
		
	 sprintf(chr_g_log_buffer,"MKT TYPE =|%s|",p_mkt_type);
	 CO_ProcMonitor(g_flogfile,chr_g_log_buffer,NULL,NULL);

	 sprintf(chr_g_log_buffer,"EXCH CODE =|%s|",p_exchange);
	 CO_ProcMonitor(g_flogfile,chr_g_log_buffer,NULL,NULL);


		

		EXEC SQL BEGIN DECLARE SECTION;

		
		EXEC SQL VAR l_sys_dl_deal_struct_hc->h_indentity_no IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hc->h_instr_code IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hc->h_dl_client IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hc->h_dlt IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hc->h_setldt IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hc->h_clh_flg IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hc->h_brkrno IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hc->h_dealcd IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hc->h_deal_status IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hc->h_fail_cd IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hc->h_contract_req IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hc->h_settlement_no IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hc->h_exch_code IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hc->h_mkt_type IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hc->h_domcpclt_cd IS STRING;
		EXEC SQL VAR l_sys_dl_deal_struct_hc->h_countclt IS STRING;


	  
		EXEC SQL VAR l_dl_BCN_struct_h->h_dl_ref_no IS STRING;
		EXEC SQL VAR l_dl_BCN_struct_h->h_instr_cd IS STRING;
		EXEC SQL VAR l_dl_BCN_struct_h->h_client_cd IS STRING;
		EXEC SQL VAR l_dl_BCN_struct_h->h_dl_date IS STRING;
		EXEC SQL VAR l_dl_BCN_struct_h->h_sett_dt IS STRING;
		EXEC SQL VAR l_dl_BCN_struct_h->h_clh_flg IS STRING;
		EXEC SQL VAR l_dl_BCN_struct_h->h_broker_cd IS STRING;
		EXEC SQL VAR l_dl_BCN_struct_h->h_deal_cd IS STRING;
		EXEC SQL VAR l_dl_BCN_struct_h->h_status IS STRING;
		EXEC SQL VAR l_dl_BCN_struct_h->h_settlement_no IS STRING;
		EXEC SQL VAR l_dl_BCN_struct_h->h_contract_cd IS STRING;
		EXEC SQL VAR l_dl_BCN_struct_h->h_mkt_type IS STRING;
		EXEC SQL VAR l_dl_BCN_struct_h->h_exch_cd IS STRING;
					
		EXEC SQL END DECLARE SECTION;
		
		EXEC SQL SELECT SYS_DATE INTO :l_sys_date from pro_sys_date;
		printf("*************SYS DATE IS |%s|",l_sys_date);
		IS_ANY_ORA_ERROR
		
		EXEC SQL SELECT settlement_no  into :l_counter FROM dl_deal 
		WHERE settlement_no  = :p_settlement_no
		AND DEAL_STAT = 'AA'
			and rownum = 1;

			if(sqlca.sqlcode)
				  {
						printf("\n Failed chekin of settlement no|%d|\n ",sqlca.sqlcode);
				  }

		IS_ANY_ORA_ERROR	
				
		if(strcmp(l_counter,APL_NULL_STRING)==0)
		  {
			EXEC SQL INSERT INTO DL_BCNMAP_RPT (COMMENTS,SETTLEMENT_NO,REPORT_DATE) VALUES ('NO RECORD FOUND FOR SELECTED SETTLEMENT NO',:p_settlement_no,:p_chr_date);
			IS_ANY_ORA_ERROR
		  }
					
		if(strcmp(p_mkt_type,APL_NULL_STRING) == 0)
			strcpy(p_mkt_type,"%");

		if(strcmp(p_exchange,APL_NULL_STRING) == 0)
			strcpy(p_exchange,"%");

		/* Added by Pankaj Deshpande for Additional Changes to Confirmation - Starts */
		if(strcmp(p_cln_code,APL_NULL_STRING) == 0)
			strcpy(p_cln_code,"%");
		if(strcmp(p_cln_master,APL_NULL_STRING) == 0)
			strcpy(p_cln_master,"%");
		/* Added by Pankaj Deshpande for Additional Changes to Confirmation - Ends */
		
		printf("vals are %s  %s \n",p_mkt_type,p_exchange);
		Alert("PPD: Client code is: |%s| Client Master: |%s| Trade Type: |%s|",p_cln_code,p_cln_master,p_trade_type);

		EXEC SQL SELECT BCNMAP_BTCH.NEXTVAL
					INTO :l_btch_no
					FROM DUAL;
		IS_ANY_ORA_ERROR
        /* Added by Ram for the SNOW - CS0114882 - Starts */
		
        EXEC SQL INSERT INTO DL_HISBCN_TEMP (SELECT A.CONTRACT_CD, A.MKT_TYPE , A.TRAN_TYPE , 
				A.DL_DATE , A.DL_PRICE, A.BROKERCOMM  , A.EXCH_CD , A.DEAL_CD , A.CLH_FLG ,
			    A.SEBI_REG_NO, A.BROKER_CD  , A.CLIENT_CD   , A.QTY , A.INSTR_CD, A.SETTLEMENT_NO ,
				A.DL_AMT  , A.BROKERAGE_AMT   , A.STT_AMT , A.SETTLMENT_AMT   , A.DL_REF_NO  , A.INTER_FII_FLG,
				A.SEBI_REPORTED, A.ENTRY, A.REPAIRED_IND , A.MAKER   , A.MAKER_DT, A.ACCESS_STAMP, A.CHECKER , A.CHECKER_DT,
				A.STATUS   , A.SETT_DT , A.NARRATIVE   , A.OFF_MARKET   , A.COUNTER_PTY, A.R_TRANS_CODE , A.R_SETT_CODE  , 
				A.R_DELAY  , A.R_TYPE   , A.REPO_DATE   , A.AMEND_DT, A.FAILREASON_CD, A.SUB_FAIL_CD, A.LR_VALDATE  , A.ADDR_FRM ,
				A.ADDR_TO,a.ACCESS_STAMP, A.STAMP_DUTY 
				FROM DL_BCN A
				where A.dl_date < to_date(:l_sys_date,'dd/mm/yyyy hh24:mi:ss') - 10
				and A.status='AA');
        
		IS_ANY_ORA_ERROR
		
		
		EXEC SQL DELETE FROM DL_BCN
			     Where dl_date < to_date(:l_sys_date,'dd/mm/yyyy hh24:mi:ss') - 10
                 and status='AA';
				 
		IS_ANY_ORA_ERROR		 
       
	   /* Added by Ram for the SNOW - CS0114882 - Ends */

		printf("JC::: ORA before declare cursor - [%d]\n", sqlca.sqlcode);
		sqlca.sqlcode = 0;

		//isolve_12151 : Changes done for InterOperability by Tushar starts
		// Added by Pankaj Deshpande for extra parameters changes - starts 
		if( int_l_condexists > 0)
		{
			memset(l_sqlstmt,APL_NULL_CHAR,150000);
			memset(l_sqlstmt_append,APL_NULL_CHAR,150000);	
			
			sprintf(l_sqlstmt," SELECT a.identiy_no,a.instr_code, a.client, a.deal_date, a.setl_date, a.cost, a.qty, a.clh_flg, a.brk_no,a.brokercomm,a.net_amt, a.deal_cd, a.deal_stat, a.failreason_cd,a.contract_req,a.TRD_SETL_NO, a.amount, a.TRD_EXCH, a.TRD_MKT_TYPE, a.contract_cd,a.domestic_cpclt,a.CP_CLT,a.stx_comm,a.stamp_duty,NVL(a.INTERFII_FLG,'N'), 					SUBSTR(REPLACE(REPLACE(a.info1,CHR(13),NULL),CHR(10),NULL),1,160) FROM dl_deal a, MT_CLIENT B WHERE A.CLIENT = B.CLN_CODE AND  ");
			
			sprintf(l_sqlstmt_append, " a.TRD_SETL_NO =  '%s' AND a.TRD_MKT_TYPE LIKE '%s' AND a.TRD_EXCH LIKE '%s'  AND B.CLN_CODE LIKE  '%s'  AND B.CLN_MASTER LIKE '%s' ", p_settlement_no,p_mkt_type,p_exchange,p_cln_code,p_cln_master );
			strcat(l_sqlstmt,l_sqlstmt_append);
			memset(l_sqlstmt_append,APL_NULL_CHAR,150000);	
			
			
			printf("\n PPD: l_sqlstmt: |%s|", l_sqlstmt);
			fflush(stdout);
			
			if(strcmp(p_trade_type,"BUY")==0)
			{
				sprintf(l_sqlstmt_append," AND A.DEAL_CD in ('2','4') ");
				strcat(l_sqlstmt,l_sqlstmt_append);
				memset(l_sqlstmt_append,APL_NULL_CHAR,150000);	
			}
			else if(strcmp(p_trade_type,"SELL")==0)
			{
				sprintf(l_sqlstmt_append," AND A.DEAL_CD in ('1','3') ");
				strcat(l_sqlstmt,l_sqlstmt_append);
				memset(l_sqlstmt_append,APL_NULL_CHAR,150000);
			}
			else
			{
				sprintf(l_sqlstmt_append," AND A.DEAL_CD in ('1','2','3','4') ");
				strcat(l_sqlstmt,l_sqlstmt_append);
				memset(l_sqlstmt_append,APL_NULL_CHAR,150000);
			}
			sprintf(l_sqlstmt_append," AND  a.DEAL_STAT != 'RC' AND a.DEAL_STAT = 'AA' AND (a.CHECKER IS NOT NULL AND a.CHECKER_DT IS NOT NULL) AND ( a.FAILREASON_CD != '90' or a.FAILREASON_CD IS NULL) AND (a.PLTOPL_FLG IN('F','N','S','M') or a.PLTOPL_FLG IS NULL)  FOR UPDATE NOWAIT");   /*Added the PLTOPL_FLG condtion by Ram for not to consider block in stop custodian flag for the enhacnement CS0169152 */
			strcat(l_sqlstmt,l_sqlstmt_append);
			memset(l_sqlstmt_append,APL_NULL_CHAR,150000);
			
			printf("\n PPD: query for the cursor 111: |%s|", l_sqlstmt);
			fflush(stdout);
			
			EXEC SQL PREPARE sss FROM :l_sqlstmt;
			IS_ANY_ORA_ERROR
			/** Cursor Query Changed By Vijay For Tolerance Limit Enhancement **/
			EXEC SQL DECLARE deal_outer CURSOR FOR	sss;
			IS_ANY_ORA_ERROR
			
		}
		else
		{
			memset(l_sqlstmt,APL_NULL_CHAR,150000);
			strcpy(l_sqlstmt," SELECT a.identiy_no, a.instr_code, a.client, a.deal_date, a.setl_date, a.cost, a.qty, a.clh_flg, a.brk_no, a.brokercomm, a.net_amt,a.deal_cd, a.deal_stat, a.failreason_cd, a.contract_req, a.settlement_no, a.amount, a.exch_code, a.mkt_type, a.contract_cd, a.domestic_cpclt,a.CP_CLT,a.stx_comm,a.stamp_duty,NVL(a.INTERFII_FLG,'N'), SUBSTR(REPLACE(REPLACE(a.info1,CHR(13),NULL),CHR(10),NULL),1,160) FROM dl_deal a, MT_CLIENT B  WHERE A.CLIENT = B.CLN_CODE AND " ); 
			
			sprintf(l_sqlstmt_append," a.settlement_no = '%s' AND a.mkt_type LIKE '%s' AND a.exch_code LIKE '%s' AND  B.CLN_CODE LIKE '%s'  AND B.CLN_MASTER LIKE '%s' ",p_settlement_no,p_mkt_type,p_exchange,p_cln_code,p_cln_master);
			strcat(l_sqlstmt,l_sqlstmt_append);
			memset(l_sqlstmt_append,APL_NULL_CHAR,150000);	
			
			printf("\n PPD: l_sqlstmt: |%s|", l_sqlstmt);
			fflush(stdout);
			
			if(strcmp(p_trade_type,"BUY")==0)
			{
				strcpy(l_sqlstmt_append," AND A.DEAL_CD in('2','4') ");
				strcat(l_sqlstmt,l_sqlstmt_append);
				memset(l_sqlstmt_append,APL_NULL_CHAR,150000);	
			}
			else if(strcmp(p_trade_type,"SELL")==0)
			{
				strcpy(l_sqlstmt_append," AND A.DEAL_CD in('1','3') ");
				strcat(l_sqlstmt,l_sqlstmt_append);
				memset(l_sqlstmt_append,APL_NULL_CHAR,150000);
			}
			else
			{
				strcpy(l_sqlstmt_append," AND A.DEAL_CD in('1','2','3','4') ");
				strcat(l_sqlstmt,l_sqlstmt_append);
				memset(l_sqlstmt_append,APL_NULL_CHAR,150000);
			}
			strcpy(l_sqlstmt_append," AND  a.DEAL_STAT != 'RC' AND a.DEAL_STAT = 'AA' AND (a.CHECKER IS NOT NULL AND a.CHECKER_DT IS NOT NULL) AND ( a.FAILREASON_CD != '90' or a.FAILREASON_CD IS NULL) AND (a.PLTOPL_FLG IN('F','N','S','M') or a.PLTOPL_FLG IS NULL) FOR UPDATE NOWAIT");  /*Added the PLTOPL_FLG condtion by Ram for not to consider block in stop custodian flag for the enhacnement CS0169152 */
			strcat(l_sqlstmt,l_sqlstmt_append);
			memset(l_sqlstmt_append,APL_NULL_CHAR,150000);
			
			printf("\n PPD: query for the cursor: |%s|", l_sqlstmt);
			fflush(stdout);
			
			EXEC SQL PREPARE sss1 FROM :l_sqlstmt;
			IS_ANY_ORA_ERROR
			
			EXEC SQL DECLARE deal_outer1 CURSOR FOR	sss1;
			IS_ANY_ORA_ERROR	
		}
		// Added by Pankaj Deshpande for extra parameters changes - Ends 
		//isolve_12151 : Changes done for InterOperability by Tushar Ends
		
		printf("JC::: ORA for cursor declare - [%d]\n", sqlca.sqlcode);
		sqlca.sqlcode = 0;
				
		if( int_l_condexists>0)
		{			
			EXEC SQL OPEN deal_outer;
			if (sqlca.sqlcode == -54)
			{
			CO_ProcMonitor(g_flogfile,"Record has been modified by another program. Please try after sometime",NULL,NULL);
			}
			IS_ANY_ORA_ERROR
		}
		else
		{
			EXEC SQL OPEN deal_outer1;
			if (sqlca.sqlcode == -54)
			{
			CO_ProcMonitor(g_flogfile,"Record has been modified by another program. Please try after sometime",NULL,NULL);
			}
			IS_ANY_ORA_ERROR
		}
	 	/* IB_12174 InterOperability ENDS*/

		printf("JC::: ORA for cursor open - [%d]\n", sqlca.sqlcode);
		printf(" settlement no in DEAL IS |%s|\n",p_settlement_no);	
		sqlca.sqlcode = 0;

		for(;;)
		{
			exch_mkt_flg=0; 
			memset(l_cln_param_val,APL_NULL_CHAR,sizeof(l_cln_param_val));
			memset(l_str_sett_exch,APL_NULL_CHAR,sizeof(l_str_sett_exch));
			memset(l_str_mkt_type,APL_NULL_CHAR,sizeof(l_str_mkt_type));
			memset(l_str_sett_no,APL_NULL_CHAR,sizeof(l_str_sett_no));
			printf("JC::: Deal Net amount before memset -- [%lf]\n", l_sys_dl_deal_struct_hc->h_net_amt);
			l_sys_dl_deal_struct_hc->h_net_amt = 0;
			printf("JC::: Deal Net amount after memset -- [%lf]\n", l_sys_dl_deal_struct_hc->h_net_amt);
			/* IB_12174 InterOperability*/
		if( int_l_condexists>0)
		{
		   EXEC SQL FETCH deal_outer 
			INTO :l_sys_dl_deal_struct_hc->h_indentity_no:l_sys_dl_deal_struct_ij->i_indentity_no,
		               	:l_sys_dl_deal_struct_hc->h_instr_code:l_sys_dl_deal_struct_ij->i_instr_code,
				:l_sys_dl_deal_struct_hc->h_dl_client:l_sys_dl_deal_struct_ij->i_dl_client,
		                :l_sys_dl_deal_struct_hc->h_dlt:l_sys_dl_deal_struct_ij->i_dlt,
				:l_sys_dl_deal_struct_hc->h_setldt:l_sys_dl_deal_struct_ij->i_setldt,
		                :l_sys_dl_deal_struct_hc->h_pr:l_sys_dl_deal_struct_ij->i_pr,
				:l_sys_dl_deal_struct_hc->h_qty:l_sys_dl_deal_struct_ij->i_qty,
				:l_sys_dl_deal_struct_hc->h_clh_flg:l_sys_dl_deal_struct_ij->i_clh_flg,
				:l_sys_dl_deal_struct_hc->h_brkrno:l_sys_dl_deal_struct_ij->i_brkrno,
                                :l_sys_dl_deal_struct_hc->h_brokercomm:l_sys_dl_deal_struct_ij->i_brokercomm,
				:l_sys_dl_deal_struct_hc->h_net_amt:l_sys_dl_deal_struct_ij->i_net_amt,
				:l_sys_dl_deal_struct_hc->h_dealcd:l_sys_dl_deal_struct_ij->i_dealcd,
				:l_sys_dl_deal_struct_hc->h_deal_status:l_sys_dl_deal_struct_ij->i_deal_status,
				:l_sys_dl_deal_struct_hc->h_fail_cd:l_sys_dl_deal_struct_ij->i_failreas_cd,
				:l_sys_dl_deal_struct_hc->h_contract_req:l_sys_dl_deal_struct_ij->i_contract_req,
				:l_sys_dl_deal_struct_hc->h_settlement_no:l_sys_dl_deal_struct_ij->i_settlement_no,
				:l_sys_dl_deal_struct_hc->h_amt:l_sys_dl_deal_struct_ij->i_amt,
				:l_sys_dl_deal_struct_hc->h_exch_code:l_sys_dl_deal_struct_ij->i_exch_code,
				:l_sys_dl_deal_struct_hc->h_mkt_type:l_sys_dl_deal_struct_ij->i_mkt_type,
	  			:l_sys_dl_deal_struct_hc->h_contract_cd:l_sys_dl_deal_struct_ij->i_contract_cd,
				:l_sys_dl_deal_struct_hc->h_domcpclt_cd:l_sys_dl_deal_struct_ij->i_domcpclt_cd,
				:l_sys_dl_deal_struct_hc->h_countclt:l_sys_dl_deal_struct_ij->i_countclt,
				:l_sys_dl_deal_struct_hc->h_stx_comm:l_sys_dl_deal_struct_ij->i_stx_comm,
				:l_sys_dl_deal_struct_hc->h_stamp_duty:l_sys_dl_deal_struct_ij->i_stamp_duty, /* SNOW- CS0046502 Added by Shradha for Stamp Duty Enh. */
				:l_sys_dl_deal_struct_hc->h_interfii_flg:l_sys_dl_deal_struct_ij->i_interfii_flg,/*ISKB307 - RahulC*/
                :l_sys_dl_deal_struct_hc->h_info1:l_sys_dl_deal_struct_ij->i_info1;
                                /*:l_tolerance_limit:i_tolerance_limit;  Added By Vijay For Tolerance Limit */
		}
		else
		{
			EXEC SQL FETCH deal_outer1 
			 INTO :l_sys_dl_deal_struct_hc->h_indentity_no:l_sys_dl_deal_struct_ij->i_indentity_no,
		               	:l_sys_dl_deal_struct_hc->h_instr_code:l_sys_dl_deal_struct_ij->i_instr_code,
				:l_sys_dl_deal_struct_hc->h_dl_client:l_sys_dl_deal_struct_ij->i_dl_client,
		                :l_sys_dl_deal_struct_hc->h_dlt:l_sys_dl_deal_struct_ij->i_dlt,
				:l_sys_dl_deal_struct_hc->h_setldt:l_sys_dl_deal_struct_ij->i_setldt,
		                :l_sys_dl_deal_struct_hc->h_pr:l_sys_dl_deal_struct_ij->i_pr,
				:l_sys_dl_deal_struct_hc->h_qty:l_sys_dl_deal_struct_ij->i_qty,
				:l_sys_dl_deal_struct_hc->h_clh_flg:l_sys_dl_deal_struct_ij->i_clh_flg,
				:l_sys_dl_deal_struct_hc->h_brkrno:l_sys_dl_deal_struct_ij->i_brkrno,
                                :l_sys_dl_deal_struct_hc->h_brokercomm:l_sys_dl_deal_struct_ij->i_brokercomm,
				:l_sys_dl_deal_struct_hc->h_net_amt:l_sys_dl_deal_struct_ij->i_net_amt,
				:l_sys_dl_deal_struct_hc->h_dealcd:l_sys_dl_deal_struct_ij->i_dealcd,
				:l_sys_dl_deal_struct_hc->h_deal_status:l_sys_dl_deal_struct_ij->i_deal_status,
				:l_sys_dl_deal_struct_hc->h_fail_cd:l_sys_dl_deal_struct_ij->i_failreas_cd,
				:l_sys_dl_deal_struct_hc->h_contract_req:l_sys_dl_deal_struct_ij->i_contract_req,
				:l_sys_dl_deal_struct_hc->h_settlement_no:l_sys_dl_deal_struct_ij->i_settlement_no,
				:l_sys_dl_deal_struct_hc->h_amt:l_sys_dl_deal_struct_ij->i_amt,
				:l_sys_dl_deal_struct_hc->h_exch_code:l_sys_dl_deal_struct_ij->i_exch_code,
				:l_sys_dl_deal_struct_hc->h_mkt_type:l_sys_dl_deal_struct_ij->i_mkt_type,
	  			:l_sys_dl_deal_struct_hc->h_contract_cd:l_sys_dl_deal_struct_ij->i_contract_cd,
				:l_sys_dl_deal_struct_hc->h_domcpclt_cd:l_sys_dl_deal_struct_ij->i_domcpclt_cd,
				:l_sys_dl_deal_struct_hc->h_countclt:l_sys_dl_deal_struct_ij->i_countclt,
				:l_sys_dl_deal_struct_hc->h_stx_comm:l_sys_dl_deal_struct_ij->i_stx_comm,
				:l_sys_dl_deal_struct_hc->h_stamp_duty:l_sys_dl_deal_struct_ij->i_stamp_duty, /* SNOW- CS0046502 Added by Shradha for Stamp Duty Enh. */
		   :l_sys_dl_deal_struct_hc->h_interfii_flg:l_sys_dl_deal_struct_ij->i_interfii_flg,/*ISKB307 - RahulC*/
                                :l_sys_dl_deal_struct_hc->h_info1:l_sys_dl_deal_struct_ij->i_info1;
                                /*:l_tolerance_limit:i_tolerance_limit;  Added By Vijay For Tolerance Limit */
		}
			printf("JC::: ORA for cursor fetch - [%d]\n", sqlca.sqlcode);
			printf("\n identity no in DEAL IS |%s|", l_sys_dl_deal_struct_hc->h_indentity_no);
			printf("\n l_sys_dl_deal_struct_hc->h_domcpclt_cd ******IS |%s|", l_sys_dl_deal_struct_hc->h_domcpclt_cd);
			printf("\n client in DEAL IS |%s|", l_sys_dl_deal_struct_hc->h_dl_client);
			printf("\n clh flag is  |%s|", l_sys_dl_deal_struct_hc->h_clh_flg);
			printf("\n setl no in DEAL IS |%s|", l_sys_dl_deal_struct_hc->h_setldt);
			printf("\n settlement no in DEAL IS |%s|", l_sys_dl_deal_struct_hc->h_settlement_no);
			printf("\n IN FUNCTION:AMISH*************88NET AMOUNT  in DEAL IS |%lf|", l_sys_dl_deal_struct_hc->h_net_amt);

			if(sqlca.sqlcode)
			{
				printf("\n Failed FETCHING OF DEAL DATA  |%d|\n ",sqlca.sqlcode);
			}

			IS_ANY_ORA_ERROR
													 
			if(APL_ZERO_RESULT_SET)
			{	
				break;
			}
			   CO_ProcMonitor(g_flogfile,"DEAL DATA FETCHED SUCCESSFULLY",NULL,NULL);
			
			/* JC - [Start] */
			EXEC SQL
			SELECT NVL(TOLERANCE_LIMIT, 0) INTO :l_tolerance_limit:i_tolerance_limit
			FROM MT_CLN_ADDLN_DET
			WHERE CLN_CODE = :l_sys_dl_deal_struct_hc->h_dl_client;

			printf("\nJC::: ORA for Tolerance Limit - [%d]\n", sqlca.sqlcode);
			IS_ANY_ORA_ERROR

			if(sqlca.sqlcode == 1403)
			{
				printf("JC::: 1403");
				l_tolerance_limit = 0;
			}

			printf("JC::: Tolerance Limit for Client|%s| -- [%lf]\n", l_sys_dl_deal_struct_hc->h_dl_client, l_tolerance_limit);
			 /* JC - [End] */
						
			EXEC SQL SELECT CONTRACT_REQ  into :bcnreqd:i_bcnreqd FROM dl_deal
			WHERE   IDENTIY_NO = :l_sys_dl_deal_struct_hc->h_indentity_no
			AND  CLIENT = :l_sys_dl_deal_struct_hc->h_dl_client;
			
			IS_ANY_ORA_ERROR

			if(strcmp(bcnreqd,"N") == 0)
			{
				 printf("\n MAPPING NOT REQUIRED ");

				 sprintf(chr_g_log_buffer,"MAPPING NOT REQ FOR fol client=|%s| and identity no =|%s|",l_sys_dl_deal_struct_hc->h_dl_client,l_sys_dl_deal_struct_hc->h_indentity_no);
				 CO_ProcMonitor(g_flogfile,chr_g_log_buffer,NULL,NULL);

				memset(l_deal_fr,APL_NULL_CHAR,3);
				l_deal_subfail=0;
				EXEC SQL SELECT FAILREASON_CD,nvl(SUB_FAIL_CD,0) 
					INTO :l_deal_fr:i_deal_fr,:l_deal_subfail:i_deal_subfail
					FROM DL_DEAL
					WHERE IDENTIY_NO = :l_sys_dl_deal_struct_hc->h_indentity_no
					AND  CLIENT = :l_sys_dl_deal_struct_hc->h_dl_client;

				 IS_ANY_ORA_ERROR

					EXEC SQL UPDATE dl_deal 
					SET DEAL_STAT = 'RC',
						 failreason_cd  = '90',
						 Sub_Fail_Cd = 0
					WHERE  IDENTIY_NO = :l_sys_dl_deal_struct_hc->h_indentity_no
					AND  CLIENT = :l_sys_dl_deal_struct_hc->h_dl_client;		 

					IS_ANY_ORA_ERROR
					
						if(strcmp(l_deal_fr,"90")!=0) 
						{
							memset(chr_param_string,APL_NULL_CHAR,201);
            						if ( APL_FAILURE == GBDbInsIMSGENT( "534",
						                       l_sys_dl_deal_struct_hc->h_indentity_no,
						                       l_sys_dl_deal_struct_hc->h_dl_client,
						                     'Y',
							               chr_param_string,
							     		l_debug_info_ptr ) )
				     			{
				          			APL_GOBACK_FAIL;
				     			}
						}
					if(sqlca.sqlcode)
					{
						printf("\n Failed Update of Deal if looop  |%d|\n ",sqlca.sqlcode);
				 	}

		 		   EXEC SQL INSERT INTO DL_BCNMAP_RPT VALUES
				   (
					 :l_sys_dl_deal_struct_hc ->h_dl_client,
					 :l_sys_dl_deal_struct_hc ->h_indentity_no,
					  NULL,
					 'RC',
					  NULL,
					  :rpt_comments_no_record,
					  :l_sys_dl_deal_struct_hc->h_settlement_no,
					  :p_chr_date,
					  NULL,
					  NULL,
					  NULL,
					  :l_btch_no
				    );

					printf("\n Failed INSERT IN RPT  looop  |%d|\n ",sqlca.sqlcode);
					IS_ANY_ORA_ERROR

			 }
			else
			{
				
				EXEC SQL SELECT GETCLIENTPARAMBYID('BCN_MAP_EXCH',:l_sys_dl_deal_struct_hc->h_dl_client) INTO :l_cln_param_val  FROM DUAL;
				IS_ANY_ORA_ERROR
				
				printf("\n PPD: client param value is |%s|",l_cln_param_val );
				fflush(stdout);
			
				// Added by Pankaj Deshpande for extra parameters changes - starts 
				if ( l_proc_rec == 0)
				 {
						memset(l_sqlstmt,APL_NULL_CHAR,150000);
						memset(l_sqlstmt_append,APL_NULL_CHAR,150000);
						sprintf(l_sqlstmt,"select count(*) from dl_bcn A, MT_CLIENT B  WHERE A.CLIENT_CD = B.CLN_CODE AND A.STATUS = 'AA' AND  " );
						sprintf(l_sqlstmt_append," B.CLN_CODE LIKE '%s'  and B.CLN_MASTER LIKE '%s'  ",p_cln_code,p_cln_master);
						strcat(l_sqlstmt,l_sqlstmt_append);
						memset(l_sqlstmt_append,APL_NULL_CHAR,150000);
						
						if(strcmp(l_cln_param_val,"Y")==0)
						{
							sprintf(l_sqlstmt_append,"AND A.settlement_no LIKE '%%' AND A.MKT_TYPE LIKE '%%' AND A.EXCH_CD LIKE '%%'");
							strcat(l_sqlstmt,l_sqlstmt_append);
							memset(l_sqlstmt_append,APL_NULL_CHAR,150000);	
						}
						else 
						{
							sprintf(l_sqlstmt_append,"AND A.settlement_no = '%s' AND A.MKT_TYPE LIKE '%s' AND A.EXCH_CD LIKE '%s' ",p_settlement_no,p_mkt_type,p_exchange );
							strcat(l_sqlstmt,l_sqlstmt_append);
							memset(l_sqlstmt_append,APL_NULL_CHAR,150000);
						}
						
						if(strcmp(p_trade_type,"BUY")==0)
						{
							strcpy(l_sqlstmt_append," AND A.DEAL_CD in('2','4') ");
							strcat(l_sqlstmt,l_sqlstmt_append);
							memset(l_sqlstmt_append,APL_NULL_CHAR,150000);	
						}
						else if(strcmp(p_trade_type,"SELL")==0)
						{
							strcpy(l_sqlstmt_append," AND A.DEAL_CD in('1','3') ");
							strcat(l_sqlstmt,l_sqlstmt_append);
							memset(l_sqlstmt_append,APL_NULL_CHAR,150000);
						}
						else
						{
							strcpy(l_sqlstmt_append," AND A.DEAL_CD in('1','2','3','4') ");
							strcat(l_sqlstmt,l_sqlstmt_append);
							memset(l_sqlstmt_append,APL_NULL_CHAR,150000);
						}
				
						printf("\n PPD: bcn count query: |%s|",l_sqlstmt);
						fflush(stdout);
					
						EXEC SQL PREPARE sss3 FROM :l_sqlstmt;
						IS_ANY_ORA_ERROR
						
						EXEC SQL DECLARE BCN_Count CURSOR FOR sss3;
						IS_ANY_ORA_ERROR	
						
						EXEC SQL OPEN BCN_Count;
			
						for(;;)
						{
							printf("sqlcode first%d\n",sqlca.sqlcode);
							EXEC SQL FETCH BCN_Count 
							INTO :l_proc_rec;
							
							if(APL_ZERO_RESULT_SET)
							break;
						}
						
						EXEC SQL CLOSE BCN_Count;
						
						printf("\nPPD: BCN Mapping summary report - Rahul - Processed Recordes |%d|\n",l_proc_rec);
						
				}
                
				memset(l_sqlstmt,APL_NULL_CHAR,150000);
				memset(l_sqlstmt_append,APL_NULL_CHAR,150000);	
				
				sprintf(l_sqlstmt,"select A.dl_ref_no,A.instr_cd,A.client_cd,A.dl_date,A.sett_dt,A.dl_price,A.qty,A.clh_flg,A.broker_cd,A.brokerage_amt, A.settlment_amt,A.deal_cd,A.status,A.settlement_no,A.contract_cd,A.dl_amt,A.mkt_type,A.exch_cd,A.stt_amt,A.stamp_duty,NVL(DECODE(A.INTER_FII_FLG,'T','Y',A.INTER_FII_FLG),'N') from dl_bcn A, MT_CLIENT B  WHERE A.CLIENT_CD = B.CLN_CODE AND A.STATUS = 'AA'  " );
				sprintf(l_sqlstmt_append,"  AND B.CLN_CODE LIKE '%s'  and B.CLN_MASTER LIKE '%s' ",p_cln_code,p_cln_master);
				strcat(l_sqlstmt,l_sqlstmt_append);
				memset(l_sqlstmt_append,APL_NULL_CHAR,150000);
				
				if(strcmp(l_cln_param_val,"Y")==0)
				{
					sprintf(l_sqlstmt_append," AND A.settlement_no LIKE '%%' AND A.MKT_TYPE LIKE '%%' AND A.EXCH_CD LIKE '%%'");
					strcat(l_sqlstmt,l_sqlstmt_append);
					memset(l_sqlstmt_append,APL_NULL_CHAR,150000);	
				}
				else 
				{
					sprintf(l_sqlstmt_append,"AND A.settlement_no = '%s' AND A.MKT_TYPE LIKE '%s' AND A.EXCH_CD LIKE '%s' ",p_settlement_no,p_mkt_type,p_exchange );
					strcat(l_sqlstmt,l_sqlstmt_append);
					memset(l_sqlstmt_append,APL_NULL_CHAR,150000);
				}
				
				printf("\n PPD: bcn inner query: |%s|",l_sqlstmt);
				fflush(stdout);
				
				if(strcmp(p_trade_type,"BUY")==0)
				{
					strcpy(l_sqlstmt_append," AND A.DEAL_CD in('2','4') ");
					strcat(l_sqlstmt,l_sqlstmt_append);
					memset(l_sqlstmt_append,APL_NULL_CHAR,150000);	
				}
				else if(strcmp(p_trade_type,"SELL")==0)
				{
					strcpy(l_sqlstmt_append," AND A.DEAL_CD in('1','3') ");
					strcat(l_sqlstmt,l_sqlstmt_append);
					memset(l_sqlstmt_append,APL_NULL_CHAR,150000);
				}
				else
				{
					strcpy(l_sqlstmt_append," AND A.DEAL_CD in('1','2','3','4') ");
					strcat(l_sqlstmt,l_sqlstmt_append);
					memset(l_sqlstmt_append,APL_NULL_CHAR,150000);
				}
				strcpy(l_sqlstmt_append," FOR UPDATE NOWAIT");
							strcat(l_sqlstmt,l_sqlstmt_append);
							memset(l_sqlstmt_append,APL_NULL_CHAR,150000);
				printf("\n PPD: bcn inner query: |%s|",l_sqlstmt);
				fflush(stdout);
				
				EXEC SQL PREPARE sss2 FROM :l_sqlstmt;
				IS_ANY_ORA_ERROR
				
				EXEC SQL DECLARE BCN_inner CURSOR FOR	sss2;
				IS_ANY_ORA_ERROR	
				// Added by Pankaj Deshpande for extra parameters changes - Ends  
				
				if(sqlca.sqlcode)
				{
					printf("\n Failed selecting OF BCN DATA  |%d|\n ",sqlca.sqlcode);
				}
				 IS_ANY_ORA_ERROR

				 EXEC SQL OPEN BCN_inner;
				        if (sqlca.sqlcode == -54)
						{
			CO_ProcMonitor(g_flogfile,"\n record has been modified by another program !\n",NULL,NULL);
						}
				 
					/*
					printf("\n Before Starting 1To1 matching--BCN argv[0]=|%s|",p_settlement_no);
					*/
				for(;;)
				{
				
					printf("sqlcode first%d\n",sqlca.sqlcode);
					/*if(APL_ZERO_RESULT_SET)
					break;
				   */
					EXEC SQL FETCH BCN_inner 
					INTO :l_dl_BCN_struct_h->h_dl_ref_no:l_dl_BCN_struct_i->i_dl_ref_no,
					 :l_dl_BCN_struct_h->h_instr_cd:l_dl_BCN_struct_i->i_instr_cd,
					 :l_dl_BCN_struct_h->h_client_cd:l_dl_BCN_struct_i->i_client_cd,
					 :l_dl_BCN_struct_h->h_dl_date:l_dl_BCN_struct_i->i_dl_date,
					 :l_dl_BCN_struct_h->h_sett_dt:l_dl_BCN_struct_i->i_sett_dt,
					 :l_dl_BCN_struct_h->h_dl_price:l_dl_BCN_struct_i->i_dl_price,
					 :l_dl_BCN_struct_h->h_qty:l_dl_BCN_struct_i->i_qty,
					 :l_dl_BCN_struct_h->h_clh_flg:l_dl_BCN_struct_i->i_clh_flg,
					 :l_dl_BCN_struct_h->h_broker_cd:l_dl_BCN_struct_i->i_broker_cd,
					 :l_dl_BCN_struct_h->h_brokerage_amt:l_dl_BCN_struct_i->i_brokerage_amt,
					 :l_dl_BCN_struct_h->h_settlment_amt:l_dl_BCN_struct_i->i_settlment_amt,
					 :l_dl_BCN_struct_h->h_deal_cd:l_dl_BCN_struct_i->i_deal_cd,
					 :l_dl_BCN_struct_h->h_status:l_dl_BCN_struct_i->i_status,
					 :l_dl_BCN_struct_h->h_settlement_no:l_dl_BCN_struct_i->i_settlement_no,
					 :l_dl_BCN_struct_h->h_contract_cd:l_dl_BCN_struct_i->i_contract_cd,
					 :l_dl_BCN_struct_h->h_dl_amt:l_dl_BCN_struct_i->i_dl_amt,	
					 :l_dl_BCN_struct_h->h_mkt_type:l_dl_BCN_struct_i->i_mkt_type,
					 :l_dl_BCN_struct_h->h_exch_cd:l_dl_BCN_struct_i->i_exch_cd,
					 :l_dl_BCN_struct_h->h_stt_amt:l_dl_BCN_struct_i->i_stt_amt,
					 :l_dl_BCN_struct_h->h_stamp_duty:l_dl_BCN_struct_i->i_stamp_duty,
					 :l_dl_BCN_struct_h->h_inter_fii_flg:l_dl_BCN_struct_i->i_inter_fii_flg/*ISKB307 - RahulC*/;
					
					printf("sqlcode %d\n",sqlca.sqlcode);
					printf("\n settlement no in BCN IS |%s|%s|%s|\n",l_dl_BCN_struct_h->h_settlement_no,l_dl_BCN_struct_h->h_dl_ref_no,l_dl_BCN_struct_h->h_client_cd);
					printf("\n INSTR CODE in BCN IS |%s|\n",l_dl_BCN_struct_h->h_instr_cd);
					printf("\n *******CONTRACT CODE in BCN IS |%s|\n",l_dl_BCN_struct_h->h_contract_cd);
				

					if(APL_ZERO_RESULT_SET)
					break;
  
             /* Changes Done By Vijay For Tolerance Limit */

		printf("*** For Tolerance Limit *** \nContract code in BCN - [%s]\n", l_dl_BCN_struct_h->h_contract_cd);
		printf("JC::: Amount in BCN - [%lf]\n", l_dl_BCN_struct_h->h_settlment_amt);
		printf("JC::: Amount in Deal - [%lf]\n", l_sys_dl_deal_struct_hc->h_net_amt);

		int_tolerance_flag = 0;   /* ASHISH 04-08-2008 for Tolerance Limit */

		/* JC - Added equal to (=) as the tolerance limit values are inclusive for mapping */
		/* JC - Added one more condition - to check if deal amt is not equal to bcn amt */
	/* JC - Commented the if loop and rectified it because limit is not in %, it is in amount 
             if ((l_dl_BCN_struct_h->h_settlment_amt >= (l_sys_dl_deal_struct_hc->h_net_amt - (l_sys_dl_deal_struct_hc->h_net_amt*l_tolerance_limit/100)))&&
                 (l_dl_BCN_struct_h->h_settlment_amt <=(l_sys_dl_deal_struct_hc->h_net_amt + (l_sys_dl_deal_struct_hc->h_net_amt*l_tolerance_limit/100))) &&
		(l_sys_dl_deal_struct_hc->h_net_amt != l_dl_BCN_struct_h->h_settlment_amt) )
	JC - Commented the if loop and rectified it because limit is not in %, it is in amount */

	/* JC - Rectified the if loop below */
		if((l_dl_BCN_struct_h->h_settlment_amt >= (l_sys_dl_deal_struct_hc->h_net_amt - l_tolerance_limit)) && 
			(l_dl_BCN_struct_h->h_settlment_amt <= (l_sys_dl_deal_struct_hc->h_net_amt + l_tolerance_limit)) && 
			(l_sys_dl_deal_struct_hc->h_net_amt != l_dl_BCN_struct_h->h_settlment_amt))
	    {
		int_tolerance_flag = 1;  /* ASHISH 04-08-2008 for Tolerance Limit */

                printf("**************Changing Net Amount Vijay for Tol Limiting **\n");
		printf("JC::: Original deal amount - [%lf]\n", l_sys_dl_deal_struct_hc->h_net_amt);

                l_old_net_amount = l_sys_dl_deal_struct_hc->h_net_amt;
		l_sys_dl_deal_struct_hc->h_net_amt = l_dl_BCN_struct_h->h_settlment_amt;

                 /*Commented by siva.ganapathi for ISKB_3524 -- started */
                 /* sprintf(l_note1,"|NET AMOUNT CHANGED AS PER BCN. ORIGINAL DEAL AMOUNT IS INR %lf|",l_old_net_amount);
                    strcat(l_sys_dl_deal_struct_hc->h_info1,l_note1);*/
                  /*Commented by siva.ganapathi for ISKB_3524 -- Ended */

		printf("JC::: Amount to be updated in DL_BCN_TOL - [%lf]\n", l_old_net_amount);
		printf("JC::: Deal amount to be updated as - [%lf]\n", l_sys_dl_deal_struct_hc->h_net_amt);

	    }
             /** Changes By Vijay Ends **/
                 		
					/* ISKB-305 - BCN Mapping summary report - Rahul -16May2007
                    
					if(!strstr(l_proc_bcn,l_dl_BCN_struct_h->h_contract_cd))
					{
						l_proc_rec ++;
						strcat(l_proc_bcn,l_dl_BCN_struct_h->h_contract_cd);
						printf("\nBCN Mapping summary report - Rahul - processed Contrct Code|%s|",l_proc_bcn);
					}
                    printf("\nBCN Mapping summary report - Rahul - Processed Recordes |%d|\n",l_proc_rec);
                    /* ISKB-305 - BCN Mapping summary report - Rahul -16May2007 */

					/*ISKB307- InterFII Issue - RahulC*/
					if (strcmp(l_sys_dl_deal_struct_hc->h_interfii_flg,l_dl_BCN_struct_h->h_inter_fii_flg) != 0)
					{
						printf("\n**********Inter FII Flag not Match**************\n");
						continue;
					}
					/*ISKB307- InterFII Issue - RahulC*/
					
					printf("\n after Starting 1To1 matching--BCN argv[0]=|%s|",p_settlement_no);

					OrderMatch='N';
				    strcpy(DealString,APL_NULL_STRING);

					if(APL_FAILURE == DealStringForm(l_sys_dl_deal_struct_hc,DealString))
					 {
		
						APL_GOBACK_FAIL
					 }
			
					printf("\n DealString is :|%s|\n",DealString);  
			
					strcpy(BCNString,APL_NULL_STRING);
					
					if(APL_FAILURE == BCNStringForm(l_dl_BCN_struct_h,BCNString))
					{
						APL_GOBACK_FAIL
					}
				
					printf("\n BCN String :|%s|\n ",BCNString); 
							
					strcpy(MatchDealDataString,APL_NULL_STRING);
					strcpy(MatchBCNDataString,APL_NULL_STRING);

				// p_cln_code parameter added by Dipak for CS0064742 - Additional changes  for t0 confirmation
				if(APL_FAILURE == MatchDataStringForm(MatchDealDataString,MatchBCNDataString,ToleranceString,
				l_sys_dl_deal_struct_hc->h_exch_code,l_cln_param_val,l_debug_info_ptr))
					  {
							APL_GOBACK_FAIL		
					  }
					/*
					printf("\n MatchDealDataString=|%s|\n",MatchDealDataString);
					printf("\n MatchBCNDataString=|%s|\n",MatchBCNDataString);
					*/
			


					if(APL_FAILURE == FuncMatch(l_sys_dl_deal_struct_hc,l_dl_BCN_struct_h,DealString,BCNString,
						MatchDealDataString,MatchBCNDataString,ToleranceString,&OrderMatch,&nmatch,
						&pmatch,l_debug_info_ptr))
					  {
							APL_GOBACK_FAIL		
					  }
					printf("\n OrderMatch:|%c|\n",OrderMatch);
					printf("\n forced_match:|%c|\n",forced_match);

					/*Added by siva.ganapathi for ISKB_4120 on 09-Aug-2010-- started*/
					if (int_tolerance_flag == 1 && OrderMatch != 'Y')
					{	
						printf("\n deal net amount is reseteing to original net amount");
						printf("\n Deal ref no is %s l_old_net_amount is %lf l_sys_dl_deal_struct_hc->h_net_amt is %lf",l_sys_dl_deal_struct_hc->h_indentity_no,l_old_net_amount,l_sys_dl_deal_struct_hc->h_net_amt);
						fflush(stdout);
						l_sys_dl_deal_struct_hc->h_net_amt = l_old_net_amount;
					}
					/*Added by siva.ganapathi for ISKB_4120 on 09-Aug-2010-- Ended*/

					if(OrderMatch == 'Y')
					 {

                                               /*Added by siva.ganapathi for ISKB_3524 --- started*/  

                                                if ( int_tolerance_flag == 1)
                                                {
                                                     sprintf(l_note1,"|NET AMOUNT CHANGED AS PER BCN. ORIGINAL DEAL AMOUNT IS INR %lf|",l_old_net_amount);
                                                     strcat(l_sys_dl_deal_struct_hc->h_info1,l_note1);
                                                 }                  

                                               /*Added by siva.ganapathi for ISKB_3524 --- Ended*/  

						 strcat(l_pmatch,pmatch);
						 printf("mapped string is |%s|",pmatch);
						 strcpy(pmatch,APL_NULL_STRING);

						printf("\n*******amish*****client =|%s|,ref no = |%s|,CONTRACT CODE = |%s|\n",l_sys_dl_deal_struct_hc ->h_dl_client,l_sys_dl_deal_struct_hc ->h_indentity_no,l_dl_BCN_struct_h ->h_contract_cd);
						EXEC SQL DELETE FROM DL_BCNMAP_RPT
						WHERE DL_CLIENT = :l_sys_dl_deal_struct_hc ->h_dl_client
						AND  DL_REF_NO = :l_sys_dl_deal_struct_hc ->h_indentity_no
						AND BATCH_NO =:l_btch_no;
						
						if(sqlca.sqlcode)
							{
								printf("\n *************Failed DELETE FROM  report table |%d|\n",sqlca.sqlcode);
							}

						IS_ANY_ORA_ERROR
						
						
						EXEC SQL DELETE FROM DL_BCNMAP_RPT
						WHERE CONTRACT_CD = :l_dl_BCN_struct_h ->h_contract_cd
					   AND BROKER_CD =:l_dl_BCN_struct_h->h_broker_cd
						AND dl_date =:l_dl_BCN_struct_h->h_dl_date	
						AND BATCH_NO =:l_btch_no;
						
						if(sqlca.sqlcode)
							{
								printf("\n **************8Failed DELETE FROM  2 report table |%d|\n",sqlca.sqlcode);
							}


						IS_ANY_ORA_ERROR


						EXEC SQL INSERT INTO DL_BCNMAP_RPT VALUES
							(
								:l_sys_dl_deal_struct_hc ->h_dl_client,
								:l_sys_dl_deal_struct_hc ->h_indentity_no,
								:l_dl_BCN_struct_h ->h_contract_cd,
								'RC',
								 NULL,
								:l_pmatch,
								:l_sys_dl_deal_struct_hc->h_settlement_no,
								:p_chr_date,
								NULL
                        ,:l_dl_BCN_struct_h->h_broker_cd,
								:l_dl_BCN_struct_h->h_dl_date,
								:l_btch_no
							);

						strcpy(l_pmatch,APL_NULL_STRING);
							if(sqlca.sqlcode)
							{
								printf("\n Failed Insert into report table |%d|\n",sqlca.sqlcode);
							}
						IS_ANY_ORA_ERROR

                /****************************Updating DL_BCN_TOL With Changed Net amount *******************************/
                /** Added by Vijay For Tolerance Limit Enhancement **/
                /* if(l_tolerance_limit > 0) */
		if(int_tolerance_flag == 1) /* ASHISH 04-08-2008 Changed if loop */
                {
                	EXEC SQL INSERT INTO DL_BCN_TOL VALUES(:l_sys_dl_deal_struct_hc ->h_dl_client,
							:l_sys_dl_deal_struct_hc ->h_indentity_no,
                                                        :l_old_net_amount,
                                                        :l_tolerance_limit,
                                                        :p_chr_date);
			printf("JC::: ORA for inserting values in DL_BCN_TOL - [%d]\n", sqlca.sqlcode);
                    
			IS_ANY_ORA_ERROR
                }
                /*********************************************************************************************************/

		sprintf(chr_g_log_buffer,"RECORD MAPPED FOR FOLL client and identiy no--|%s|and|%s| in DEAL AND contract cd --|%s| in BCN",
		l_sys_dl_deal_struct_hc ->h_dl_client,l_sys_dl_deal_struct_hc ->h_indentity_no,l_dl_BCN_struct_h ->h_contract_cd);
		CO_ProcMonitor(g_flogfile,chr_g_log_buffer,NULL,NULL);
		printf("updating account |%s| refno |%s|\n",l_sys_dl_deal_struct_hc ->h_dl_client,l_sys_dl_deal_struct_hc ->h_indentity_no);	
		 	memset(l_deal_fr,APL_NULL_CHAR,3);
			l_deal_subfail=0;
			EXEC SQL SELECT FAILREASON_CD,nvl(SUB_FAIL_CD,0) 
					INTO :l_deal_fr:i_deal_fr,:l_deal_subfail:i_deal_subfail
					FROM DL_DEAL
					WHERE IDENTIY_NO = :l_sys_dl_deal_struct_hc->h_indentity_no
					AND  CLIENT = :l_sys_dl_deal_struct_hc->h_dl_client;

			IS_ANY_ORA_ERROR

			/* Updating the Net Amount and Info1 for Tolerance Limit enhancement in Deal table */
			EXEC SQL UPDATE DL_DEAL DL SET DL.failreason_cd  = '90', 
                                 DL.Sub_Fail_Cd = 0,
                                 DL.DEAL_STAT = 'RC',
						DL.CONTRACT_CD = :l_dl_BCN_struct_h->h_contract_cd,
                                 DL.NET_AMT = :l_sys_dl_deal_struct_hc->h_net_amt,
                                 DL.INFO1 = :l_sys_dl_deal_struct_hc->h_info1 
				WHERE 
				DL.CLIENT = :l_sys_dl_deal_struct_hc ->h_dl_client
				AND DL.IDENTIY_NO = :l_sys_dl_deal_struct_hc ->h_indentity_no;
			printf("sqlca.sqlcode after deaal update is %d\n",sqlca.sqlcode);
			IS_ANY_ORA_ERROR	

			if(strcmp(l_deal_fr,"90")!=0) 
			{
				memset(chr_param_string,APL_NULL_CHAR,201);
            			if ( APL_FAILURE == GBDbInsIMSGENT( "534",
						                    l_sys_dl_deal_struct_hc->h_indentity_no,
						                    l_sys_dl_deal_struct_hc->h_dl_client,
						                    'Y',
						               chr_param_string,
						     		l_debug_info_ptr ) )
				{
				          APL_GOBACK_FAIL;
				}
			}
/**
						EXEC SQL UPDATE DL_DEAL DL SET DL.DEAL_STAT = 'RC' WHERE 
						DL.CLIENT = :l_sys_dl_deal_struct_hc ->h_dl_client
						AND	  DL.IDENTIY_NO = :l_sys_dl_deal_struct_hc ->h_indentity_no;

						IS_ANY_ORA_ERROR
				
						EXEC SQL UPDATE DL_DEAL DL SET DL.CONTRACT_CD = :l_dl_BCN_struct_h->h_contract_cd WHERE
						DL.CLIENT = :l_sys_dl_deal_struct_hc ->h_dl_client
						AND	  DL.IDENTIY_NO = :l_sys_dl_deal_struct_hc ->h_indentity_no;
			***/	
					
						/*** Changes by Amit B. 02/05/2006 ***/		
							
				/***		if(l_sys_dl_deal_struct_hc ->h_amt <= 0)
						{**/
							
							// Pankaj Deshpande 
							if ( exch_mkt_flg == 1)
							{
								EXEC SQL UPDATE DL_DEAL DL 
								SET TRD_EXCH=:l_dl_BCN_struct_h->h_exch_cd ,
								TRD_MKT_TYPE  =:l_dl_BCN_struct_h->h_mkt_type ,
								TRD_SETL_NO =:l_dl_BCN_struct_h->h_settlement_no
								WHERE DL.CLIENT = :l_sys_dl_deal_struct_hc ->h_dl_client
								AND DL.IDENTIY_NO = :l_sys_dl_deal_struct_hc ->h_indentity_no;
								
								printf("\n update OF TRD_EXCH and TRD_MKT_TYPE |%d|\n",sqlca.sqlcode);
								IS_ANY_ORA_ERROR
								
								EXEC SQL SELECT SETT_EXCH, SETT_MKT_TYPE into :l_str_sett_exch:i_str_sett_exch,:l_str_mkt_type:i_str_mkt_type						
								FROM STATIC_TRAD_SETT_EXCH
								WHERE TRD_EXCH   =:l_dl_BCN_struct_h->h_exch_cd
								AND TRD_MKT_TYPE = :l_dl_BCN_struct_h->h_mkt_type
								AND SETT_EXCH    = GETCLIENTPARAMBYID('PREFERRED_EXCH',:l_sys_dl_deal_struct_hc ->h_dl_client);
									
								printf("\n select OF SETT_EXCH and SETT_MKT_TYPE |%d|\n",sqlca.sqlcode);
								IS_ANY_ORA_ERROR
								
								if((strcmp(l_str_sett_exch,"")==0) && (strcmp(l_str_mkt_type,"")==0))
								{
									EXEC SQL UPDATE DL_DEAL DL 
									SET EXCH_CODE=:l_dl_BCN_struct_h->h_exch_cd ,
									MKT_TYPE  =:l_dl_BCN_struct_h->h_mkt_type ,
									SETTLEMENT_NO =:l_dl_BCN_struct_h->h_settlement_no 
									WHERE DL.CLIENT = :l_sys_dl_deal_struct_hc ->h_dl_client
									AND DL.IDENTIY_NO = :l_sys_dl_deal_struct_hc ->h_indentity_no;
									printf("\n update if OF SETT_EXCH and SETT_MKT_TYPE |%d|\n",sqlca.sqlcode);
									IS_ANY_ORA_ERROR
								}
								else
								{
									 EXEC SQL SELECT SETTL_NO into :l_str_sett_no
									 FROM MT_SETTL_CAL S
									 WHERE S.EXCH_CODE      =:l_str_sett_exch
									 AND S.SETTL_TYPE       = :l_str_mkt_type
									 AND TRUNC(S.START_DATE)= TRUNC(TO_DATE(:l_sys_dl_deal_struct_hc->h_dlt,'DD/MM/YYYY HH24:MI:SS'));
									
									printf("\n select OF SETTL_NO |%d|\n",sqlca.sqlcode);
									IS_ANY_ORA_ERROR
									
									EXEC SQL UPDATE DL_DEAL DL 
									SET EXCH_CODE=:l_str_sett_exch ,
									MKT_TYPE  =:l_str_mkt_type,
									SETTLEMENT_NO =:l_str_sett_no
									WHERE DL.CLIENT = :l_sys_dl_deal_struct_hc ->h_dl_client
									AND DL.IDENTIY_NO = :l_sys_dl_deal_struct_hc ->h_indentity_no;
									printf("\n update else OF SETT_EXCH and SETT_MKT_TYPE |%d|\n",sqlca.sqlcode);
									IS_ANY_ORA_ERROR									
								}
							}
							
								EXEC SQL UPDATE DL_DEAL DL SET AMOUNT=:l_dl_BCN_struct_h->h_dl_amt ,
																		 COST =:l_dl_BCN_struct_h->h_dl_price
													WHERE
								  			DL.CLIENT = :l_sys_dl_deal_struct_hc ->h_dl_client
											AND DL.IDENTIY_NO = :l_sys_dl_deal_struct_hc ->h_indentity_no;

								printf("\n UPDATED OF DEAL AMOUNT and price |%d|\n",sqlca.sqlcode);
								IS_ANY_ORA_ERROR

								/**EXEC SQL SELECT amount INTO :int_l_amount FROM dl_deal
							  				WHERE client=:l_sys_dl_deal_struct_hc ->h_dl_client
											AND identiy_no=:l_sys_dl_deal_struct_hc ->h_indentity_no;		
								
								if(sqlca.sqlcode)
								{	
									printf("\n Error Fetching Deal Amount|%d| \n",sqlca.sqlcode);
								}
								IS_ANY_ORA_ERROR
								
									
								printf("\n Deal Amount=|%lf| Deal Qty=|%lf| \n",int_l_amount,l_sys_dl_deal_struct_hc ->h_qty);
								
								int_l_price=int_l_amount/l_sys_dl_deal_struct_hc ->h_qty;
								
								printf("\n ********* Calculated Price=|%lf| \n",int_l_price);
								
								EXEC SQL UPDATE DL_DEAL SET COST=:int_l_price
									WHERE client=:l_sys_dl_deal_struct_hc ->h_dl_client
									AND identiy_no=:l_sys_dl_deal_struct_hc ->h_indentity_no;
								
								if(sqlca.sqlcode)
								{
									printf("\n Error Updating Price in DL_DEAL |%d|\n",sqlca.sqlcode);
								}
								
								IS_ANY_ORA_ERROR
									
											
						}***/
						/* changes done by Akshay rokade for ISKB_10241 start*/	
                        //if(l_sys_dl_deal_struct_hc ->h_brokercomm <= 0)
						//{
							
								EXEC SQL UPDATE DL_DEAL DL SET brokercomm=:l_dl_BCN_struct_h->h_brokerage_amt WHERE
								  			DL.CLIENT = :l_sys_dl_deal_struct_hc ->h_dl_client
											AND DL.IDENTIY_NO = :l_sys_dl_deal_struct_hc ->h_indentity_no;

								printf("\n UPDATED BROKERCOMM sqlca.sqlcode is|%d|\n",sqlca.sqlcode);
								IS_ANY_ORA_ERROR
											
						//}
						
						//if(l_sys_dl_deal_struct_hc ->h_stx_comm <= 0)
						//{
							
							EXEC SQL UPDATE DL_DEAL DL SET STX_COMM=:l_dl_BCN_struct_h->h_stt_amt WHERE
								  			DL.CLIENT = :l_sys_dl_deal_struct_hc ->h_dl_client
											AND DL.IDENTIY_NO = :l_sys_dl_deal_struct_hc ->h_indentity_no;

								printf("\n UPDATED sttamount sqlca.sqlcode is|%d|\n",sqlca.sqlcode);
								IS_ANY_ORA_ERROR
											
						//}
						/* changes done by Akshay rokade for ISKB_10241 end*/
						/*
						(DL.settlement_no,DL.CLIENT,DL.IDENTIY_NO) IN 
						(SELECT RPT.settlement_no,RPT.DL_CLIENT,RPT.DL_REF_NO  FROM DL_BCNMAP_RPT RPT WHERE
						 RPT.DL_CLIENT=DL.CLIENT AND RPT.DL_REF_NO=DL.IDENTIY_NO  AND  RPT.STATUS='RC');
						*/
							/* SNOW- CS0046502 Added by Shradha for Stamp Duty Enh. - Starts */
							EXEC SQL UPDATE DL_DEAL DL SET STAMP_DUTY=:l_dl_BCN_struct_h->h_stamp_duty WHERE
								  			DL.CLIENT = :l_sys_dl_deal_struct_hc ->h_dl_client
											AND DL.IDENTIY_NO = :l_sys_dl_deal_struct_hc ->h_indentity_no;

								printf("\n UPDATED stamp duty sqlca.sqlcode is|%d|\n",sqlca.sqlcode);
								IS_ANY_ORA_ERROR
							/* SNOW- CS0046502 Added by Shradha for Stamp Duty Enh. - Ends */

						 memset(l_deal_fr,APL_NULL_CHAR,3);
						 l_deal_subfail=0;
						EXEC SQL SELECT FAILREASON_CD ,nvl(SUB_FAIL_CD ,0)
									INTO :l_deal_fr:i_deal_fr,:l_deal_subfail:i_deal_subfail
									FROM DL_BCN
									WHERE CONTRACT_CD = :l_dl_BCN_struct_h ->h_contract_cd
									AND BROKER_CD =:l_dl_BCN_struct_h->h_broker_cd
									AND DL_DATE =:l_dl_BCN_struct_h->h_dl_date ;

						IS_ANY_ORA_ERROR
							
									

						 EXEC SQL UPDATE DL_BCN BC SET BC.DL_REF_NO =:l_sys_dl_deal_struct_hc ->h_indentity_no ,
																BC.FAILREASON_CD ='90',
																BC.SUB_FAIL_CD = 0,
							 									STATUS = 'RC' 
																WHERE
							CONTRACT_CD = :l_dl_BCN_struct_h ->h_contract_cd
					      AND BROKER_CD =:l_dl_BCN_struct_h->h_broker_cd
					      AND DL_DATE =:l_dl_BCN_struct_h->h_dl_date ;

						 printf("\n UPDATED BCN contract code  %s||%d|\n",l_dl_BCN_struct_h ->h_contract_cd,sqlca.sqlcode);
						 IS_ANY_ORA_ERROR

					  /* ISKB-305 - BCN Mapping summary report - Rahul -16May2007 */ 
					   l_map_rec++;
					   printf("\nBCN Mapping summary report - Rahul - Mapped Recordes |%d|\n",l_map_rec);
					   /* ISKB-305 - BCN Mapping summary report - Rahul -16May2007 */

							 if((strcmp(l_deal_fr,"90")!=0) || (l_deal_subfail!=0))
							 {
               				memset(chr_param_string,APL_NULL_CHAR,201);
               				strcpy(chr_param_string,l_dl_BCN_struct_h ->h_contract_cd);
               				strcat(chr_param_string,";");
               				strcat(chr_param_string,l_dl_BCN_struct_h->h_broker_cd);
               				strcat(chr_param_string,";");
               				strcat(chr_param_string,l_dl_BCN_struct_h->h_dl_date);
               				strcat(chr_param_string,";");
               				strcat(chr_param_string,APL_NULL_STRING);
								
              					GBDbInsIMSGENT( "548N04",l_dl_BCN_struct_h->h_contract_cd,l_dl_BCN_struct_h->h_broker_cd,'Y',chr_param_string,l_debug_info_ptr);
							}	
						 /**EXEC SQL  UPDATE DL_BCN BC SET STATUS = 'RC' WHERE 
							CONTRACT_CD = :l_dl_BCN_struct_h ->h_contract_cd;
						***/
						 
							 /*
						 CLIENT_CD = 
						
						(DL.settlement_no,DL.CLIENT,DL.IDENTIY_NO) IN 
						(SELECT RPT.settlement_no,RPT.DL_CLIENT,RPT.DL_REF_NO  FROM DL_BCNMAP_RPT RPT WHERE
						 RPT.DL_CLIENT=DL.CLIENT AND RPT.DL_REF_NO=DL.IDENTIY_NO  AND  RPT.STATUS='RC');
							*/

						/*
						EXEC SQL  UPDATE DL_BCN BC SET STATUS = 'RC' WHERE (BC.settlement_no) IN (SELECT RPT.settlement_no FROM DL_BCNMAP_RPT RPT WHERE  RPT.STATUS='RC');

						printf("\n Failed UPDATE into contract cd |%d|\n",sqlca.sqlcode);
						IS_ANY_ORA_ERROR
						*/
						break;

					 }    
					else
					{
						printf("NOT MAPPED STRING IS |%s|",nmatch);
						if(strcmp(nmatch,"QTY")==0)
						{
							EXEC SQL SELECT FAILREASON_CD,SUB_FAIL_CD into :l_failcode:i_failcode,l_subfail_cd:i_subfail_cd from matching_master
							WHERE usefield='Y'
							AND proc_ind='P'
							AND DEALFIELD = 'QTY';

							IS_ANY_ORA_ERROR
						}
						else if(strcmp(nmatch,"DEAL_DATE")==0)
						{
							EXEC SQL SELECT FAILREASON_CD,SUB_FAIL_CD into :l_failcode:i_failcode,l_subfail_cd:i_subfail_cd from matching_master
							WHERE usefield='Y'
							AND proc_ind='P'
							AND DEALFIELD = 'DEAL_DATE';

							IS_ANY_ORA_ERROR
						}
						else if(strcmp(nmatch,"SETL_DATE")==0)
						{
							EXEC SQL SELECT FAILREASON_CD,SUB_FAIL_CD into :l_failcode:i_failcode,l_subfail_cd:i_subfail_cd from matching_master
							WHERE usefield='Y'
							AND proc_ind='P'
							AND DEALFIELD = 'SETL_DATE';

							IS_ANY_ORA_ERROR
						}
						else if(strcmp(nmatch,"CLIENT")==0)
						{
							EXEC SQL SELECT FAILREASON_CD,SUB_FAIL_CD into :l_failcode:i_failcode,l_subfail_cd:i_subfail_cd from matching_master
							WHERE usefield='Y'
							AND proc_ind='P'
							AND DEALFIELD = 'CLIENT';

							IS_ANY_ORA_ERROR
						}
						else if(strcmp(nmatch,"INSTR_CODE")==0)
						{
							EXEC SQL SELECT FAILREASON_CD,SUB_FAIL_CD into :l_failcode:i_failcode,l_subfail_cd:i_subfail_cd from matching_master
							WHERE usefield='Y'
							AND proc_ind='P'
							AND DEALFIELD = 'INSTR_CODE';

							IS_ANY_ORA_ERROR
						}
						else if(strcmp(nmatch,"NET_AMT")==0)
						{
							EXEC SQL SELECT FAILREASON_CD,SUB_FAIL_CD into :l_failcode:i_failcode,l_subfail_cd:i_subfail_cd from matching_master
							WHERE usefield='Y'
							AND proc_ind='P'
							AND DEALFIELD = 'NET_AMT';

							IS_ANY_ORA_ERROR
						}
						else if(strcmp(nmatch,"DEAL_CD")==0)
						{
							/*
							EXEC SQL SELECT DEAL_CD into :l_dealcd:i_dealcd FROM DL_DEAL
							WHERE
							*/
							if(((strcmp(l_sys_dl_deal_struct_hc->h_dealcd,"1")==0 || strcmp(l_sys_dl_deal_struct_hc->h_dealcd,"3")==0) &&
								(strcmp(l_dl_BCN_struct_h->h_deal_cd,"2")==0 || strcmp(l_dl_BCN_struct_h->h_deal_cd,"4")==0)) ||
								((strcmp(l_sys_dl_deal_struct_hc->h_dealcd,"2")==0 || strcmp(l_sys_dl_deal_struct_hc->h_dealcd,"4")==0) &&
								(strcmp(l_dl_BCN_struct_h->h_deal_cd,"1")==0 || strcmp(l_dl_BCN_struct_h->h_deal_cd,"3")==0)))
								{
									EXEC SQL SELECT FAILREASON_CD,SUB_FAIL_CD into :l_failcode:i_failcode,l_subfail_cd:i_subfail_cd from matching_master
									WHERE usefield='Y'
									AND proc_ind='P'
									AND DEALFIELD = 'DEAL_CD';

									IS_ANY_ORA_ERROR

								}
							
							if(((strcmp(l_sys_dl_deal_struct_hc->h_dealcd,"1")==0 || strcmp(l_sys_dl_deal_struct_hc->h_dealcd,"2")==0) &&
								(strcmp(l_dl_BCN_struct_h->h_deal_cd,"3")==0 || strcmp(l_dl_BCN_struct_h->h_deal_cd,"4")==0))||
								((strcmp(l_sys_dl_deal_struct_hc->h_dealcd,"3")==0 || strcmp(l_sys_dl_deal_struct_hc->h_dealcd,"4")==0) &&
								(strcmp(l_dl_BCN_struct_h->h_deal_cd,"1")==0 || strcmp(l_dl_BCN_struct_h->h_deal_cd,"2")==0)))

								{
									strcpy(l_failcode,"95");
									l_subfail_cd = 15;
	
								}

							
						}
						else
						{
							strcpy(l_failcode,"95");
							l_subfail_cd = 03;
						}
					

						strcat(l_nmatch,"NOT MAPPED--");
						strcat(l_nmatch,"CONTRACT CODE = ");
						strcat(l_nmatch,l_dl_BCN_struct_h->h_contract_cd); 
						strcat(l_nmatch,":FIELDS NOT MAPPED--> ");
						strcat(l_nmatch,nmatch);
						printf("not mapped string is |%s|",nmatch);
						strcpy(nmatch,APL_NULL_STRING);
							EXEC SQL INSERT INTO DL_BCNMAP_RPT VALUES
								(
									:l_sys_dl_deal_struct_hc ->h_dl_client,
									:l_sys_dl_deal_struct_hc->h_indentity_no,
									:l_dl_BCN_struct_h ->h_contract_cd,
									'AA',
									:l_failcode,
									:l_nmatch,			
									:l_sys_dl_deal_struct_hc->h_settlement_no,
									:p_chr_date,
									:l_subfail_cd
                           ,:l_dl_BCN_struct_h->h_broker_cd,
								   :l_dl_BCN_struct_h->h_dl_date,
									:l_btch_no
								);

							strcpy(l_nmatch,APL_NULL_STRING);
							if(sqlca.sqlcode)
								{
									printf("\n Failed Insert into OrderMatch_1TO1 |%d|\n",sqlca.sqlcode);
								}
							IS_ANY_ORA_ERROR
							sprintf(chr_g_log_buffer,"RECORD DID NOT MAPPED FOR FOLL client and identiy no--|%s|and|%s| in DEAL AND contract cd --|%s| in BCN",
								l_sys_dl_deal_struct_hc ->h_dl_client,l_sys_dl_deal_struct_hc ->h_indentity_no,l_dl_BCN_struct_h ->h_contract_cd);
							CO_ProcMonitor(g_flogfile,chr_g_log_buffer,NULL,NULL);



					}

				}
				
				EXEC SQL CLOSE BCN_inner;

				if(OrderMatch != 'Y')
				 {
					EXEC SQL SELECT max(SUB_FAIL_CD) into :l_nmap_count:i_nmap_count FROM DL_BCNMAP_RPT 
					WHERE DL_CLIENT = :l_sys_dl_deal_struct_hc ->h_dl_client
					AND DL_REF_NO = :l_sys_dl_deal_struct_hc ->h_indentity_no
					AND STATUS = 'AA'
					AND BATCH_NO =:l_btch_no;

					/*
					if(l_nmap_count > 1)
					 {
						strcpy(l_failcode,"95");
						l_subfail_cd = 03;
					 }
					 */
				 	memset(l_deal_fr,APL_NULL_CHAR,3);
					l_deal_subfail=0;
				 EXEC SQL SELECT FAILREASON_CD,nvl(SUB_FAIL_CD,0) 
					 					INTO :l_deal_fr:i_deal_fr,:l_deal_subfail:i_deal_subfail
										FROM DL_DEAL
										WHERE IDENTIY_NO = :l_sys_dl_deal_struct_hc->h_indentity_no
										AND  CLIENT = :l_sys_dl_deal_struct_hc->h_dl_client;

				 IS_ANY_ORA_ERROR
					 /*shailesh updating CLIENT_NOTE as null ISKB 1032 Issue Log 115*/
					EXEC SQL UPDATE DL_DEAL DL SET DL.failreason_cd  = '95', DL.Sub_Fail_Cd = 3,DL.CLIENT_NOTE = NULL  WHERE 
					DL.CLIENT = :l_sys_dl_deal_struct_hc ->h_dl_client
					AND	  DL.IDENTIY_NO = :l_sys_dl_deal_struct_hc ->h_indentity_no
					AND DL.DEAL_STAT = 'AA';
					IS_ANY_ORA_ERROR
					if((strcmp(l_deal_fr,"95")!=0) || (l_deal_subfail!=3))
					{
						memset(chr_param_string,APL_NULL_CHAR,201);
           			if ( APL_FAILURE == GBDbInsIMSGENT( "534",
								                           l_sys_dl_deal_struct_hc->h_indentity_no,
									                        l_sys_dl_deal_struct_hc->h_dl_client,
							   		                     'Y',
							         		               chr_param_string,
							               		     		l_debug_info_ptr ) )
			     		{
			          APL_GOBACK_FAIL;
			     		}
					}


				 }

				printf("\n Failed UPDATE INTO DEAL FAIL CODE |%d|\n",sqlca.sqlcode);
			
			}	

		}
				/* IB_12174 InterOperability */
				if( int_l_condexists>0)
					EXEC SQL CLOSE deal_outer;
				else
					EXEC SQL CLOSE deal_outer1;


		 CO_ProcMonitor(g_flogfile,"EXISTING SUCCESSFULL OUT OF MAPPING PROCESS",NULL,NULL);

	      /* ISKB-305 - BCN Mapping summary report - Rahul -16May2007 */ 
		  if(CO_RtvSysDtTime(l_syst_date,l_debug_info_ptr) !=APL_SUCCESS)
//		   if(CO_RtvLocalSysDtTime(l_syst_date,l_debug_info_ptr) !=APL_SUCCESS)
		  {
                	APL_GOBACK_FAIL
		  }
                  /*** Added %s for AIX Migration***/
		  printf("\nBCN Mapping summary report - Rahul - Mapping Date |%s|\n",l_syst_date);

		  EXEC SQL SELECT PROC_RECORD,MAP_RECORD,UNMAP_RECORD INTO :l_db_proc_rec,:l_db_map_rec,:l_db_unmap_rec
		  FROM DL_BCNMAP_SUM_RPT  WHERE SETTLEMENT_NO = :p_settlement_no AND 
		  MAP_DATE = (SELECT MAX(MAP_DATE) FROM DL_BCNMAP_SUM_RPT WHERE SETTLEMENT_NO = :p_settlement_no)
		  and rownum = 1;//Added For ISKB_6193(Unable to Process BCN Mapping) 
		  IS_ANY_ORA_ERROR
		   printf("\nBCN Mapping summary report - Rahul - Privious Processed  -- >|%d|  - Priviously Mapped |%d| \n",l_db_proc_rec,l_db_map_rec);
			
			if (sqlca.sqlerrd[2] != 0)
			{
				if(l_proc_rec == 0)
					l_proc_rec = l_proc_rec + l_db_proc_rec;
				else
					l_proc_rec = (l_proc_rec - l_db_unmap_rec ) + l_db_proc_rec;
					l_map_rec = l_map_rec + l_db_map_rec;
			}
	   	  
		  printf("\n Processed BCN -->|%d| Mapped BCN |%d|\n",l_proc_rec, l_map_rec);				
		  l_unmap_rec = l_proc_rec - l_map_rec;
		  printf("\nBCN Mapping summary report - Rahul - UnMapped Recordes |%d|\n",l_unmap_rec);
		  		  
		  EXEC SQL INSERT INTO DL_BCNMAP_SUM_RPT VALUES
		  (:p_settlement_no,:l_syst_date,:l_proc_rec ,:l_map_rec,:l_unmap_rec,:l_btch_no);
  		  IS_ANY_ORA_ERROR
		  printf("\nBCN Mapping summary report - Rahul - Record Inserted successfully\n");
          /* ISKB-305 - BCN Mapping summary report - Rahul -16May2007 */

		 CO_ProcMonitor(g_flogfile,"NOW CALLING CO CREATE REPORT ",NULL,NULL);
               /** Vedavati **/

               EXEC SQL DECLARE bcnmap CURSOR FOR
               SELECT a.SUB_FAIL_CD , a.CONTRACT_CD, a.BROKER_CD, a.DL_DATE FROM DL_BCNMAP_RPT a,DL_BCN b
               WHERE a.SUB_FAIL_CD IS NOT NULL AND a.SUB_FAIL_CD <> '3'
               AND a.CONTRACT_CD = b.CONTRACT_CD
               AND a.DL_DATE =b.DL_DATE
               AND a.BROKER_CD=b.BROKER_CD
					AND a.BATCH_NO =:l_btch_no AND BATCH_NO IS NOT NULL;
               printf(" 879 sqlca.sqlcode is %d\n",sqlca.sqlcode);
               IS_ANY_ORA_ERROR

               EXEC SQL OPEN bcnmap;
               /*printf("883 sqlca.sqlcode is %d\n",sqlca.sqlcode);*/
               IS_ANY_ORA_ERROR
              for(;;)
              {
               EXEC SQL FETCH bcnmap INTO :l_nmap_count,:l_contract_cd,:l_broker_cd,:l_dl_date;
               printf(" 90000 sqlca.sqlcode is %d\n",sqlca.sqlcode);
               if(APL_ZERO_RESULT_SET)
               break;
               printf(" 888 sqlca.sqlcode is %d\n",sqlca.sqlcode);
               IS_ANY_ORA_ERROR
               printf("890 the value of = |%s|\n",l_failcode);
               printf("890 the value of = |%d|\n",l_nmap_count);

               if((l_nmap_count != NULL) && (l_nmap_count != 3))	//Changes AmitB on 06/09/06
                {

                   memset(l_deal_fr,APL_NULL_CHAR,3);
						 l_deal_subfail=0;
						 EXEC SQL SELECT FAILREASON_CD ,nvl(SUB_FAIL_CD,0)
						          INTO :l_deal_fr:i_deal_fr,:l_deal_subfail:i_deal_subfail
						          FROM DL_BCN
						          WHERE CONTRACT_CD = :l_contract_cd
									 AND BROKER_CD =:l_broker_cd
									 AND DL_DATE =:l_dl_date ;

                  IS_ANY_ORA_ERROR


                  EXEC SQL UPDATE DL_BCN A SET A.FAILREASON_CD = '95',
                                               A.SUB_FAIL_CD = :l_nmap_count
                                           WHERE A.CONTRACT_CD=:l_contract_cd
                                           AND   A.BROKER_CD =:l_broker_cd
                                           AND   A.DL_DATE =:l_dl_date;
                  /*printf("894 sqlca.sqlcode is %d\n",sqlca.sqlcode);*/
                  IS_ANY_ORA_ERROR

               	printf("l_contract_cd is |%s|,l_broker_cd is |%s| , l_dl_date is |%s|\n",l_contract_cd,l_broker_cd,l_dl_date);

						if((strcmp(l_deal_fr,"95")!=0) || (l_deal_subfail!=l_nmap_count))
						{

               			memset(chr_param_string,APL_NULL_CHAR,201);
               			strcpy(chr_param_string,l_contract_cd);
               			strcat(chr_param_string,";");
               			strcat(chr_param_string,l_broker_cd);
               			strcat(chr_param_string,";");
               			strcat(chr_param_string,l_dl_date);
               			strcat(chr_param_string,";");
               			strcat(chr_param_string,APL_NULL_STRING);

						 printf("\n Entered in Cntry Cond 1\n");
/*						 IF_COND_EXISTS("DL_UNMAP","UNMAP548")
						 {
							printf("\n Entered in Cntry Cond 1\n");
						 }
						 else
						 {
							printf("\n 1:Now Sending 548 for UnMapped BCN Contract=|%s|\n",l_contract_cd);
              				GBDbInsIMSGENT( "548N04",l_contract_cd,l_broker_cd,'Y',chr_param_string,l_debug_info_ptr);
						 }
*/						 }
            printf("\n UPDATED INTO DEAL_BCN FAIL CODE sqlca.sqlcode is  |%d|\n",sqlca.sqlcode);
                }
               }
              EXEC SQL CLOSE bcnmap;

				  		EXEC SQL DECLARE bcnmap1 CURSOR FOR
                     SELECT max(a.SUB_FAIL_CD ), a.CONTRACT_CD, a.BROKER_CD, a.DL_DATE 
								FROM DL_BCNMAP_RPT a,DL_BCN b 
								WHERE a.CONTRACT_CD = b.CONTRACT_CD 
								AND a.DL_DATE =b.DL_DATE 
								AND a.BROKER_CD=b.BROKER_CD 
								AND a.BATCH_NO =:l_btch_no AND BATCH_NO IS NOT NULL
								group by a.contract_cd,a.broker_cd,a.dl_date 
								having max(a.sub_fail_cd)='3';
               printf(" 879 sqlca.sqlcode is %d\n",sqlca.sqlcode);
               IS_ANY_ORA_ERROR					
               EXEC SQL OPEN bcnmap1;
			      IS_ANY_ORA_ERROR
			      for(;;)
				   {
				        EXEC SQL FETCH bcnmap1 INTO :l_nmap_count,:l_contract_cd,:l_broker_cd,:l_dl_date;
	                printf(" 90000 sqlca.sqlcode is %d\n",sqlca.sqlcode);
	                if(APL_ZERO_RESULT_SET)
	                break;
	                printf(" 888 sqlca.sqlcode is %d\n",sqlca.sqlcode);
	                IS_ANY_ORA_ERROR
	                printf("890 the value of = |%s|\n",l_failcode);
	                printf("890 the value of = |%d|\n",l_nmap_count);

                   memset(l_deal_fr,APL_NULL_CHAR,3);
		            	l_deal_subfail=0;
						  EXEC SQL SELECT FAILREASON_CD ,nvl(SUB_FAIL_CD,0)
						                    INTO :l_deal_fr:i_deal_fr,:l_deal_subfail:i_deal_subfail
						                    FROM DL_BCN
						                    WHERE CONTRACT_CD = :l_contract_cd
						                    AND BROKER_CD =:l_broker_cd
						                    AND DL_DATE =:l_dl_date ;

           				IS_ANY_ORA_ERROR


                  EXEC SQL UPDATE DL_BCN A SET A.FAILREASON_CD = '95',
                                         A.SUB_FAIL_CD = 3
                                       WHERE A.CONTRACT_CD=:l_contract_cd
                                       AND   A.BROKER_CD =:l_broker_cd
                                      AND   A.DL_DATE =:l_dl_date;
               /*printf("894 sqlca.sqlcode is %d\n",sqlca.sqlcode);*/
                 IS_ANY_ORA_ERROR

               printf("l_contract_cd is |%s|,l_broker_cd is |%s| , l_dl_date is |%s|\n",l_contract_cd,l_broker_cd,l_dl_date);

               if((strcmp(l_deal_fr,"95")!=0) || (l_deal_subfail!=l_nmap_count))
               {

                   memset(chr_param_string,APL_NULL_CHAR,201);
                  strcpy(chr_param_string,l_contract_cd);
                 strcat(chr_param_string,";");
                 strcat(chr_param_string,l_broker_cd);
                 strcat(chr_param_string,";");
                 strcat(chr_param_string,l_dl_date);
                 strcat(chr_param_string,";");
                strcat(chr_param_string,APL_NULL_STRING);

					printf("\n Entered in Cntry Cond 2\n");
/*					IF_COND_EXISTS("DL_UNMAP","UNMAP548")
					{
						printf("\n Entered in Cntry Cond 2\n");
					}
					else
					{	
						printf("\n 2:Now Sending 548 for UnMapped BCN Contract=|%s|\n",l_contract_cd);
						GBDbInsIMSGENT( "548N04",l_contract_cd,l_broker_cd,'Y',chr_param_string,l_debug_info_ptr);
					}
*/               }
					}

/*		EXEC SQL UPDATE DL_DEAL DL SET DL.DEAL_STAT = 'RC' WHERE (DL.CLIENT,DL.IDENTIY_NO) IN (SELECT RPT.DL_CLIENT,RPT.DL_REF_NO FROM DL_BCNMAP_RPT RPT WHERE RPT.DL_CLIENT=DL.CLIENT AND RPT.DL_REF_NO=DL.IDENTIY_NO AND RPT.STATUS='RC');
		IS_ANY_ORA_ERROR
		printf("\n Failed UPDATE into DEAL STATUS |%d|\n",sqlca.sqlcode);
		
		EXEC SQL COMMIT WORK ;
*/
/*
		EXEC SQL UPDATE DL_DEAL DL SET DL.DEAL_STAT = 'RC' WHERE (DL.settlement_no) IN (SELECT RPT.settlement_no FROM DL_BCNMAP_RPT RPT WHERE  RPT.STATUS='RC');
		IS_ANY_ORA_ERROR
		printf("\n Failed UPDATE into DEAL STATUS |%d|\n",sqlca.sqlcode);
*/



		/*
		EXEC SQL  UPDATE DL_BCN BC SET STATUS = 'RC' WHERE (BC.CLIENT_CD,BC.DL_REF_NO) IN (SELECT RPT.DL_CLIENT,RPT.DL_REF_NO FROM DL_BCNMAP_RPT RPT WHERE RPT.DL_CLIENT=BC.CLIENT_CD AND RPT.DL_REF_NO=BC.DL_REF_NO AND RPT.STATUS='RC');			

		printf("\n Failed UPDATE INTO BCN STATUS |%d|\n",sqlca.sqlcode);
		IS_ANY_ORA_ERROR
		*/


		/*
		sprintf(l_chr_fieldval,"%c%s",DATA_FIELD_SEPRTR,l_sys_date);
		*/
		strcpy(l_chr_rep_id,"406");
		strcpy(l_chr_rep_format,"1");
		strcpy(l_chr_rep_name,"Mapping_Report");
		strcpy(l_chr_start_date,p_chr_date);
		printf("date is IN BCN****|%s|",l_chr_start_date);
		strcpy(l_chr_user,p_chr_user);
		printf("\n*********USER IS******** |%s|\n",l_chr_user);
		printf("\n********amish*******|%s|\n",p_settlement_no);
		sprintf(l_chr_fieldval,"%s%c",p_settlement_no,DATA_FIELD_SEPRTR);
		printf("\n********amish*******|%s|\n",l_chr_fieldval);
		/*
		strcat(l_chr_fieldval,l_sys_date);
		strcat(l_chr_fieldval,DATA_FIELD_SEPRTR);
		*/
		printf("\nparam string is|%s|\n",l_chr_fieldval);
		
/***		if(   CO_CreateReport(l_chr_rep_id,
				    l_chr_rep_format,
                    l_chr_rep_name,
                    l_chr_fieldval,
                    l_chr_start_date,
				    l_chr_user,
				    l_debug_info_ptr) == APL_FAILURE)
			 {
			 	APL_GOBACK_FAIL
			 }**/
	
		APL_GOBACK_SUCCESS							

		RETURN_SUCCESS: 

		/*		printf("\n Sucess Inside OneToOne \n");		*/
		return(APL_SUCCESS);

		RETURN_FAILURE:
	
		printf("\n Error Inside OneToOne \n");
		return(APL_FAILURE);

}



int FuncMatch(SYS_DL_DEAL_STRUCT_H *p_dl_deal_struct_h,DL_BCN_STRUCT_H *p_dl_BCN_struct_h,char *p_DealString,
char *p_BCNString,char *p_MatchDealDataString,char *p_MatchBCNDataString,char *p_ToleranceString,
char *p_OrderMatch,char *p_nmatch,char *p_pmatch,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	
	char MatchFlag = 'Y';
	char **temp1 = NULL;
	char **temp2 = NULL;
	char *temp3 = NULL;
	char *temp4 = NULL;
	char **temp_tol;
	char *pair1 = NULL;
	char *pair2 = NULL;
	char *temp5[10] ;
	char *temp6[10] ;
	int  int_num_1=0;
	int  int_num_2=0;
	int  int_num_3=0;
	char p_source1[4001] = APL_NULL_STRING;
	char p_source2[4001] = APL_NULL_STRING;
	char p_source3[4001] = APL_NULL_STRING;
	char p_source4[4001] = APL_NULL_STRING;
	char p_source5[100]=APL_NULL_STRING;
	
	char CompareDealData[1000] = APL_NULL_STRING;
	char CompareBCNData[1000] = APL_NULL_STRING;
	int i=0;
	int j=0;
	int k=0;
	double diff_nse=0;
	double diff_bse=0;
	
	double Bcomm = 0;
	double diff = 0;
	char P_EXCHG_CODE[10]=APL_NULL_STRING;
	char P_DEAL_CD[10]=APL_NULL_STRING;
	char P_FIELD[30]=APL_NULL_STRING;
  	double Brkg_mod = 0;
	double tot_brkg=0;
	double brkg_adjust=0;
	double tolerance=0;
	int forctr=0;
	int flag = 0;
	double amt_diff=0.0;	/* new variable- AmitB- 080307	*/
   
	char l_com[4001] = APL_NULL_STRING;
	char l_pcom[4001] = APL_NULL_STRING;
	char chr_net_amt[30] = APL_NULL_STRING;
	char chr_sett_amt[30] =  APL_NULL_STRING;
	char chr_net_amt1[30] = APL_NULL_STRING;
	char chr_sett_amt1[30] =  APL_NULL_STRING;
	char chr_net_amt2[30] = APL_NULL_STRING;
	char chr_sett_amt2[30] =  APL_NULL_STRING;
	EXEC SQL BEGIN DECLARE SECTION;

	EXEC SQL VAR CompareDealData IS STRING;	
	EXEC SQL VAR CompareBCNData IS STRING;
	EXEC SQL VAR p_source1 IS STRING;
	EXEC SQL VAR p_source2 IS STRING;
	EXEC SQL VAR p_source3 IS STRING;
	EXEC SQL VAR p_source4 IS STRING;
	EXEC SQL VAR p_source5 IS STRING;
	EXEC SQL VAR l_pcom IS STRING;
	EXEC SQL VAR l_com IS STRING;
	EXEC SQL VAR P_EXCHG_CODE IS STRING;
	EXEC SQL VAR P_DEAL_CD IS STRING;
	EXEC SQL VAR P_FIELD IS STRING;
	EXEC SQL VAR temp1 IS STRING;
	EXEC SQL VAR temp2 IS STRING;
	EXEC SQL VAR temp_tol IS STRING;
	

	EXEC SQL END DECLARE SECTION;

	memset(l_com, NULL, sizeof(l_com));
	memset(l_com, NULL, sizeof(l_pcom));


	memset(p_source1, NULL, sizeof(p_source1));
	memset(p_source2, NULL, sizeof(p_source2));
	memset(p_source3, NULL, sizeof(p_source3));
	memset(p_source4, NULL, sizeof(p_source4));
	memset(p_source5, NULL, sizeof(p_source5));

	memset(CompareDealData, NULL, sizeof(CompareDealData));
	memset(CompareBCNData, NULL, sizeof(CompareBCNData));

	strcpy(p_source1,p_MatchDealDataString);
	strcpy(p_source2,p_MatchBCNDataString);
	strcpy(p_source3,p_DealString);
	strcpy(p_source4,p_BCNString);
	strcpy(p_source5,p_ToleranceString);


/*
	printf("\n deal MATCHING STRING IS |%s|",p_source1);
	printf("\n deal  STRING IS |%s|",p_source3);
	
	printf("\n BCN MATCHING STRING IS |%s|",p_source2);
	printf("\n BCN  STRING IS |%s|",p_source4);
*/
	
	if(APL_FAILURE == CO_SplitStr(p_source1,'#',&int_num_1,&temp1)) /* gives coln name */
		{
			APL_GOBACK_FAIL
		}	

 	if(APL_FAILURE == CO_SplitStr(p_source2,'#',&int_num_2,&temp2))
		{
			APL_GOBACK_FAIL
		}

	if(APL_FAILURE == CO_SplitStr(p_source5,'#',&int_num_3,&temp_tol))
		{
			APL_GOBACK_FAIL
		}	


	for(i=0;i<int_num_1;i++)
		{
			CO_Rtv_DataString(p_source3,temp1[i],CompareDealData);  /*gives data value corresepondin to coln name */
			CO_Rtv_DataString(p_source4,temp2[i],CompareBCNData);
	
             /*   printf("\n Got values for deal & BCN for fields |%s| ,|%s| as: |%s| & |%s| ",temp1[i],temp2[i],CompareDealData,CompareBCNData);
	         */
			if(strcmp(CompareDealData,CompareBCNData)==0)
				{
					temp3=temp1[i];
					temp5[j]=temp3;
					j++;
                   /*			printf("\n Data Matching for |%s|\n",temp1[i]);	
                   */
				}
			else
				{
					strcpy(P_FIELD,temp1[i]);
					strcpy(P_EXCHG_CODE,p_dl_deal_struct_h->h_exch_code);
					strcpy(P_DEAL_CD,p_dl_deal_struct_h->h_dealcd);
					printf("\n P_FIELD |%s| \n",P_FIELD);
					printf("\n P_FIELD |%s| \n",temp1[i]);
					printf("\n P_FIELD |%s| \n",temp2[i]);
				    /*
					if(strcmp(temp1[i],"AMOUNT")==0 && strcmp(temp2[i],"DL_AMT")==0 && strcmp(p_dl_deal_struct_h->h_exch_code,"NSE")==0)
					 {	
						flag = 1;
						diff_nse=atof(CompareDealData) - atoi(CompareBCNData);
						Bcomm=p_dl_deal_struct_h->h_brokercomm;
						printf("\n Entered 1st if\n");
						printf("\n Difference NSE =|%lf| Bcomm=|%lf| 10p_OF_BKG= |%lf|\n",diff_nse,Bcomm,Bcomm*(atof(temp_tol[i]))/100);
	
	       				if(fabs(diff_nse) <= Bcomm*(atof(temp_tol[i]))/100)//AIX Warning Removal
						 {	
								printf("\n tolerance within limit");	
						 }
    					else
	    				 {
		    			    MatchFlag='N';
			    		   	temp4=temp1[i];
				    		temp6[k]=temp4;
					    	k++;

						}
				   	}
					
		    		  else 
	   		    	  */
				  if(strcmp(temp1[i],"NET_AMT")==0 && strcmp(temp2[i],"SETTLMENT_AMT")==0  )
				   {	
					    /* changes by amish -- 31/10/2006 ************************************start */
					  /*
					  strcpy(chr_net_amt,CompareDealData);
					  */
					  printf("\namish*****deal net amount issssssssssssssssss|%s|\n",CompareDealData);
						/*
						strcpy(chr_sett_amt,CompareBCNData);
						*/
   					  printf("\namish*****bcn net amount issssssssssssssssss|%s|\n",CompareBCNData);

/*    					EXEC SQL SELECT round(:CompareDealData,2),round(:CompareBCNData,2),round(:CompareDealData,1),round(:CompareBCNData,1) INTO :chr_net_amt,:chr_sett_amt,:chr_net_amt1,:chr_sett_amt1 from dual;	*/
						EXEC SQL SELECT trunc(:CompareDealData,2),trunc(:CompareBCNData,2),trunc(:CompareDealData,1),trunc(:CompareBCNData,1),trunc(:CompareDealData),trunc(:CompareBCNData) INTO :chr_net_amt,:chr_sett_amt,:chr_net_amt1,:chr_sett_amt1,chr_net_amt2,chr_sett_amt2 from dual;

						IS_ANY_ORA_ERROR
	    				printf("\namish*****deal & BCN net amount AFTER 1ST TRUNC OFF issssssssssssssssss|%s|,|%s|\n",chr_net_amt,chr_sett_amt);
    					printf("\namish*****deal & BCN net amount AFTER 2nd TRUNC OFF issssssssssssssssss|%s|,|%s|\n",chr_net_amt1,chr_sett_amt1);
						printf("\namish*****deal & BCN net amount AFTER Total TRUNC OFF issssssssssssssssss|%s|,|%s|\n",chr_net_amt2,chr_sett_amt2);

						/*						
		    			EXEC SQL SELECT round(:CompareBCNData,2) INTO :chr_sett_amt from dual; 
							IS_ANY_ORA_ERROR
			    		printf("\namish*****bcn net amount AFTER 1ST ROUND OFF issssssssssssssssss|%s|\n",chr_sett_amt);
					
					
				    	EXEC SQL SELECT round(:CompareDealData,1) INTO :chr_net_amt1 from dual;
				 	    	IS_ANY_ORA_ERROR
    					printf("\namish*****deal net amount AFTER 2nd ROUND OFF issssssssssssssssss|%s|\n",chr_net_amt1);
						
	    				EXEC SQL SELECT round(:CompareBCNData,1) INTO :chr_sett_amt1 from dual;
			    			IS_ANY_ORA_ERROR
		     			printf("\namish*****bcn net amount AFTER 2nd ROUND OFF issssssssssssssssss|%s|\n",chr_sett_amt1);
						*/
						/* Calculate Amt Diff-AmitB-080307 */
						amt_diff=atof(CompareDealData) - atof(CompareBCNData);
						printf("\n 1Rs: amt_diff=|%lf| |%lf| |%d| \n",amt_diff,fabs(amt_diff),abs(amt_diff));

   				      if(strcmp(chr_net_amt,chr_sett_amt)==0)
					   {
						 printf("\n data matching after 1st Trunc off\n");
 						 temp3=temp1[i];
						 temp5[j]=temp3;
						 j++;
						 /*			printf("\n Data Matching for |%s|\n",temp1[i]);	
						 */
					   }
    				   else if(strcmp(chr_net_amt1,chr_sett_amt1)==0)
	    				{
							printf("\n data matching after 2nd Trunc off\n");
							temp3=temp1[i];
							temp5[j]=temp3;
							j++;
										
		    			}
						else if(strcmp(chr_net_amt2,chr_sett_amt2)==0)
	    				{
							printf("\n data matching after Total Trunc off\n");
							temp3=temp1[i];
							temp5[j]=temp3;
							j++;
										
		    			 }	/* Condn Added- AmitB- 080307 */
						 else if(fabs(amt_diff)<=1)
						 {
							printf("\n data matching after After Considering 1Rs Difference \n");
							temp3=temp1[i];
							temp5[j]=temp3;
							j++;

						 }
			    		 else
				    	 {

					    	  flag = 1;
						   /*
						   diff_bse=atof(CompareDealData) - atof(CompareBCNData);
						   */
						   diff_bse=atof(chr_net_amt1) - atof(chr_sett_amt1);
					       Bcomm= p_dl_deal_struct_h->h_brokercomm;
				      
				
						   printf("\n Entered 2nd if\n");
						   printf("\n amish**************tolerance limit is |%s|\n",temp_tol[i]);
						   printf("\n Difference BSE=|%lf| Bcomm=|%lf| 10p_OF_BKG= |%lf|\n",diff_bse,Bcomm,Bcomm*(atof(temp_tol[i]))/100);
						
						
  						  if(fabs(diff_bse) <= Bcomm*(atof(temp_tol[i]))/100)
							{	
								printf("\n tolerance within limit");		
							}
						 else
							{
								printf("\n tolerance greater");
								MatchFlag='N';
								temp4=temp1[i];
								temp6[k]=temp4;
								k++;
									/*
							    pair1=temp1[i];
 								pair2=temp2[i];
								*/
							}
                	  }
					  /* changes by amish -- 31/10/2006 ************************************end */
				   }
				  else
				   {
					  printf("\n NO MATCH FOUND FOR TOLERANCE");
					  MatchFlag='N';
					  temp4=temp1[i];
  					  temp6[k]=temp4;
					  k++;
					   /*
					   pair1=temp1[i];
					  pair2=temp2[i];
					  */
				   }
			   }

		}
			 
	  /*
			 printf("\n Data Not Matching for |%s|\n",temp1[i]);	
		
	*/
		int m;
/*	printf("\n Data mapped for following fields:\n");
	for(m=0;m<j;m++)
	{
		printf("|%s|\n",temp5[m]);
	}
*/
	   if(MatchFlag == 'N')
	   {
		  int n;	
		 /*	  printf("\n Data did not match for following fields:\n");
		  */	  
 		for(n=0;n<k;n++)
		   {	
				strcat(l_com,temp6[n]);
				if(n != (k-1))
				strcat(l_com,"#");
			    printf(" FieldName:|%s|\n",temp6[n]);
 		   }
	
		  printf("\nDATA DID NOT MATCH FOR FOLLOWIG FIELDS: |%s| ",l_com );
		  /*
		  strcat(p_nmatch,"CONTRACT CODE = ");
		  strcat(p_nmatch,p_dl_BCN_struct_h->h_contract_cd); 
    	  strcat(p_nmatch,":FIELDS NOT MAPPED--> ");
		  */
		/*
		strcat(p_nmatch,"NOT MAPPED: ");
		*/	
		strcat(p_nmatch,l_com);
		/*
		if(flag == 1)
			strcat(p_nmatch,"(WITH TOLERANCE)||");	
			*/
		strcpy(l_com,APL_NULL_STRING);
		printf("\nDATA DID NOT MATCH FOR FOLLOWIG FIELDS: |%s| ",p_nmatch );
	   }    
	  else
	   {
		if(flag == 1)
		  {
		 	strcat(l_pcom,"MAPPED WITH TOLERANCE");
		  }
		 else
		   {
			 strcat(l_pcom,"MAPPED ");
		   }

	   strcat(p_pmatch,l_pcom);
	   strcpy(l_pcom,APL_NULL_STRING); 
	   *p_OrderMatch='Y';
	   }	 	
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:
/*	printf("\n\n Inside FuncMatch - Successfully Completed \n");		*/
	return(APL_SUCCESS);
		
   RETURN_FAILURE:
	
/*	printf("Inside FuncMatch - Failed");                         */  
	return(APL_FAILURE);
 }



int BCNStringForm(DL_BCN_STRUCT_H *p_dl_BCN_struct_h,char* param_BCNString)
{	

	char l_BCNString[4001] = APL_NULL_STRING;
	char l_temp[4001] = APL_NULL_STRING;

	memset(l_BCNString, NULL, sizeof(l_BCNString));
	memset(l_temp, NULL, sizeof(l_temp));
	
	sprintf(l_temp,"%cINSTR_CD%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_dl_BCN_struct_h->h_instr_cd);
	strcat(l_temp,"\0");
	strcat(l_BCNString,l_temp);
	strcpy(l_temp,APL_NULL_STRING);

	sprintf(l_temp,"%cSETTLEMENT_NO%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_dl_BCN_struct_h->h_settlement_no);
	strcat(l_temp,"\0");
	strcat(l_BCNString,l_temp);
	strcpy(l_temp,APL_NULL_STRING);

	sprintf(l_temp,"%cCLIENT_CD%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_dl_BCN_struct_h->h_client_cd);
	strcat(l_temp,"\0");
	strcat(l_BCNString,l_temp);
	strcpy(l_temp,APL_NULL_STRING);

	sprintf(l_temp,"%cDL_DATE%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_dl_BCN_struct_h->h_dl_date);
	strcat(l_temp,"\0");
	strcat(l_BCNString,l_temp);
	strcpy(l_temp,APL_NULL_STRING);

	sprintf(l_temp,"%cSETT_DT%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_dl_BCN_struct_h->h_sett_dt);
	strcat(l_temp,"\0");
	strcat(l_BCNString,l_temp);
	strcpy(l_temp,APL_NULL_STRING);
/*	sprintf(l_temp,"%cQTY%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,(char *)ltoa(p_dl_BCN_struct_h->h_qty));*///AIX Warning Removal
	sprintf(l_temp,"%cQTY%c%lf",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_dl_BCN_struct_h->h_qty);
	strcat(l_temp,"\0");
	strcat(l_BCNString,l_temp);
	strcpy(l_temp,APL_NULL_STRING);

	sprintf(l_temp,"%cBROKER_CD%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_dl_BCN_struct_h->h_broker_cd);
	strcat(l_temp,"\0");
	strcat(l_BCNString,l_temp);
	strcpy(l_temp,APL_NULL_STRING);
	
		/* changes by amish - 31/10/2006 */
	/*
	sprintf(l_temp,"%cBROKERAGE_AMT%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,(char *)ltoa(p_dl_BCN_struct_h->h_brokerage_amt));
	*/
	sprintf(l_temp,"%cBROKERAGE_AMT%c%lf",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_dl_BCN_struct_h->h_brokerage_amt);
	printf("\n brokerage amount is***|%s|\n",l_temp);
	strcat(l_temp,"\0");
	strcat(l_BCNString,l_temp);
	strcpy(l_temp,APL_NULL_STRING);

	sprintf(l_temp,"%cCLH_FLG%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_dl_BCN_struct_h->h_clh_flg);
	strcat(l_temp,"\0");
	strcat(l_BCNString,l_temp);
	strcpy(l_temp,APL_NULL_STRING);

	sprintf(l_temp,"%cDEAL_CD%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_dl_BCN_struct_h->h_deal_cd);
	strcat(l_temp,"\0");
	strcat(l_BCNString,l_temp);
	strcpy(l_temp,APL_NULL_STRING);

	sprintf(l_temp,"%cMKT_TYPE%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_dl_BCN_struct_h->h_mkt_type);
	strcat(l_temp,"\0");
	strcat(l_BCNString,l_temp);
	strcpy(l_temp,APL_NULL_STRING);

	sprintf(l_temp,"%cEXCH_CD%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_dl_BCN_struct_h->h_exch_cd);
	strcat(l_temp,"\0");
	strcat(l_BCNString,l_temp);
	strcpy(l_temp,APL_NULL_STRING);
				/*changes by amish - 31/10/2006 */
	/*
	sprintf(l_temp,"%cDL_PRICE%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,(char *)ltoa(p_dl_BCN_struct_h->h_dl_price));
	*/
	sprintf(l_temp,"%cDL_PRICE%c%lf",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_dl_BCN_struct_h->h_dl_price);
	strcat(l_temp,"\0");
	strcat(l_BCNString,l_temp);
	strcpy(l_temp,APL_NULL_STRING);

				/*changes by amish - 31/10/2006 */
	/*
	sprintf(l_temp,"%cDL_AMT%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,(char *)ltoa(p_dl_BCN_struct_h->h_dl_amt));
	*/
	sprintf(l_temp,"%cDL_AMT%c%lf",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_dl_BCN_struct_h->h_dl_amt);
	strcat(l_temp,"\0");
	strcat(l_BCNString,l_temp);
	strcpy(l_temp,APL_NULL_STRING);

				/*changes by amish - 31/10/2006 */
	/*
	sprintf(l_temp,"%cSETTLMENT_AMT%c%s%c",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,(char *)ltoa(p_dl_BCN_struct_h->h_settlment_amt),DATA_FIELD_SEPRTR);
	*/
	sprintf(l_temp,"%cSETTLMENT_AMT%c%lf%c",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_dl_BCN_struct_h->h_settlment_amt,DATA_FIELD_SEPRTR);
	printf("\n***********IN BCN ---- SETTLEMENT AMOUNT ISSSSS |%s|\n",l_temp);
	strcat(l_temp,"\0");
	strcat(l_BCNString,l_temp);	
	strcpy(l_temp,APL_NULL_STRING);
	strcpy(param_BCNString,l_BCNString);
	
	APL_GOBACK_SUCCESS

	  RETURN_SUCCESS:
	   
	/*		printf("\n Sucess inside  BCNStringForm\n" );
	*/return(APL_SUCCESS);
	   
 	  RETURN_FAILURE:
	   
		printf("Failed inside  BCNStringForm");
	   	return(APL_FAILURE);
}

int DealStringForm(SYS_DL_DEAL_STRUCT_H *p_sys_dl_deal_struct_hc,char *param_DealString)
{
	char l_DealString[4001];
	char l_temp[4001];

	memset(l_DealString, NULL, sizeof(l_DealString));
	memset(l_temp, NULL, sizeof(l_temp));

	sprintf(l_temp,"%cINSTR_CODE%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_sys_dl_deal_struct_hc->h_instr_code);
	strcat(l_temp,"\0");
	strcat(l_DealString,l_temp);
	strcpy(l_temp,APL_NULL_STRING);

	sprintf(l_temp,"%cSETTLEMENT_NO%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_sys_dl_deal_struct_hc->h_settlement_no);	
	strcat(l_temp,"\0");
	strcat(l_DealString,l_temp);
	strcpy(l_temp,APL_NULL_STRING);

	sprintf(l_temp,"%cCLIENT%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_sys_dl_deal_struct_hc->h_dl_client);
	strcat(l_temp,"\0");
	strcat(l_DealString,l_temp);
	strcpy(l_temp,APL_NULL_STRING);

	sprintf(l_temp,"%cDEAL_DATE%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_sys_dl_deal_struct_hc->h_dlt);
	strcat(l_temp,"\0");
	strcat(l_DealString,l_temp);
	strcpy(l_temp,APL_NULL_STRING);

	sprintf(l_temp,"%cSETL_DATE%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_sys_dl_deal_struct_hc->h_setldt);
	strcat(l_temp,"\0");
	strcat(l_DealString,l_temp);
	strcpy(l_temp,APL_NULL_STRING);
/*	sprintf(l_temp,"%cQTY%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,(char *)ltoa(p_sys_dl_deal_struct_hc->h_qty)); *///AIX Warning Removal
	sprintf(l_temp,"%cQTY%c%lf",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_sys_dl_deal_struct_hc->h_qty); 
	strcat(l_temp,"\0");
	strcat(l_DealString,l_temp);
	strcpy(l_temp,APL_NULL_STRING);

	sprintf(l_temp,"%cBRK_NO%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_sys_dl_deal_struct_hc->h_brkrno);
	strcat(l_temp,"\0");
	strcat(l_DealString,l_temp);
	strcpy(l_temp,APL_NULL_STRING);

			/*changes by amish - 31/10/2006 */
	/*
	sprintf(l_temp,"%cBROKERCOMM%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,(char *)ltoa(p_sys_dl_deal_struct_hc->h_brokercomm));
	*/
	sprintf(l_temp,"%cBROKERCOMM%c%lf",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_sys_dl_deal_struct_hc->h_brokercomm);
	strcat(l_temp,"\0");
	strcat(l_DealString,l_temp);
	strcpy(l_temp,APL_NULL_STRING);

	sprintf(l_temp,"%cCLH_FLG%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_sys_dl_deal_struct_hc->h_clh_flg);
	strcat(l_temp,"\0");
	strcat(l_DealString,l_temp);
   	strcpy(l_temp,APL_NULL_STRING);

	sprintf(l_temp,"%cDEAL_CD%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_sys_dl_deal_struct_hc->h_dealcd);
	strcat(l_temp,"\0");
	strcat(l_DealString,l_temp);
	strcpy(l_temp,APL_NULL_STRING);

	sprintf(l_temp,"%cEXCH_CODE%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_sys_dl_deal_struct_hc->h_exch_code);
	strcat(l_temp,"\0");
	strcat(l_DealString,l_temp);
	strcpy(l_temp,APL_NULL_STRING);

	sprintf(l_temp,"%cMKT_TYPE%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_sys_dl_deal_struct_hc->h_mkt_type);
	strcat(l_temp,"\0");
	strcat(l_DealString,l_temp);
	strcpy(l_temp,APL_NULL_STRING);
		/*changes by amish - 31/10/2006 */
	/*
	sprintf(l_temp,"%cCOST%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,(char *)ltoa(p_sys_dl_deal_struct_hc->h_pr));
	*/
		sprintf(l_temp,"%cCOST%c%lf",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_sys_dl_deal_struct_hc->h_pr);
	strcat(l_temp,"\0");
	strcat(l_DealString,l_temp);
	strcpy(l_temp,APL_NULL_STRING);

		/*changes by amish - 31/10/2006 */	
	/*
	sprintf(l_temp,"%cAMOUNT%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,(char *)ltoa(p_sys_dl_deal_struct_hc->h_amt));
	*/
	sprintf(l_temp,"%cAMOUNT%c%lf",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_sys_dl_deal_struct_hc->h_amt);
	strcat(l_temp,"\0");
	strcat(l_DealString,l_temp);

	/*	
	if(!strcmp(p_sys_dl_deal_struct_hc->h_clh_flg,"C"))
	{
		printf("\n*********entering*********8\n");
		strcpy(l_temp,APL_NULL_STRING);
		sprintf(l_temp,"%cDOMESTIC_CPCLT%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_sys_dl_deal_struct_hc->h_domcpclt_cd);
		strcat(l_temp,"\0");
		strcat(l_DealString,l_temp);
	}
	else
	{
				printf("\n*********elseeeeeeeeeeeeee*********\n");
		strcpy(l_temp,APL_NULL_STRING);
		sprintf(l_temp,"%cDOMESTIC_CPCLT%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_sys_dl_deal_struct_hc->h_countclt);
		strcat(l_temp,"\0");
		strcat(l_DealString,l_temp);	
	}
    */
	
	strcpy(l_temp,APL_NULL_STRING);
	sprintf(l_temp,"%cDOMESTIC_CPCLT%c%s",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_sys_dl_deal_struct_hc->h_domcpclt_cd);
	strcat(l_temp,"\0");
	strcat(l_DealString,l_temp);
	
	strcpy(l_temp,APL_NULL_STRING);
	/*changes by amish - 31/10/2006 */	
	/*
	sprintf(l_temp,"%cNET_AMT%c%s%c",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,(char *)ltoa(p_sys_dl_deal_struct_hc->h_net_amt),DATA_FIELD_SEPRTR );
	*/
	sprintf(l_temp,"%cNET_AMT%c%lf%c",DATA_FIELD_SEPRTR,DATA_VALUE_SEPRTR,p_sys_dl_deal_struct_hc->h_net_amt,DATA_FIELD_SEPRTR );
	printf("\n IN DealStringForm FUNCTION:************************net amount is |%s|\n",l_temp);
	strcat(l_temp,"\0");
	strcat(l_DealString,l_temp);
	
	
	strcpy(l_temp,APL_NULL_STRING);

	strcpy(param_DealString,l_DealString);

	
APL_GOBACK_SUCCESS

	  RETURN_SUCCESS:
	
/*		printf("\n Sucess inside  DealStringForm\n ");
*/		return(APL_SUCCESS);
	
 	  RETURN_FAILURE:
	
		printf("Failed inside  DealStringForm");
	   	return(APL_FAILURE);

}

// p_cln_code parameter added by Dipak for CS0064742 - Additional changes  for t0 confirmation
int MatchDataStringForm(char *param_MatchDealDataString,char *param_MatchBCNDataString,
char *param_ToleranceString,
char *p_ex_code,char *p_cln_param_val,DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{	
	char l_MatchDealDataString[1000];
	memset(l_MatchDealDataString, NULL, sizeof(l_MatchDealDataString));
	char l_MatchBCNDataString[1000];
	memset(l_MatchBCNDataString, NULL, sizeof(l_MatchBCNDataString));
	char l_ToleranceString[100];
	memset(l_ToleranceString, NULL, sizeof(l_ToleranceString));
	
	

	char CompareDealData[40] = APL_NULL_STRING;		
    char CompareBCNData[40] = APL_NULL_STRING;	
    char l_match_exch_makt[40] = APL_NULL_STRING;	 // added by Dipak for CS0064742 - Additional changes  for t0 confirmation

	
	MATCHING_MASTER_STRUCT_H *l_matching_master_struct_h=NULL;
	MATCHING_MASTER_STRUCT_I *l_matching_master_struct_i=NULL;

	EXEC SQL BEGIN DECLARE SECTION;

	EXEC SQL VAR CompareDealData IS STRING;	
	EXEC SQL VAR CompareBCNData IS STRING;	

	EXEC SQL VAR l_MatchDealDataString IS STRING;
	EXEC SQL VAR l_MatchBCNDataString IS STRING;
	EXEC SQL VAR l_ToleranceString IS STRING;
	EXEC SQL VAR l_matching_master_struct_h->h_dealfield IS STRING;
	EXEC SQL VAR l_matching_master_struct_h->h_comp_field IS STRING;

	EXEC SQL END DECLARE SECTION;
  

	l_matching_master_struct_h = (MATCHING_MASTER_STRUCT_H *)calloc(1, sizeof(MATCHING_MASTER_STRUCT_H));
	APL_MALLOC_FAIL(l_matching_master_struct_h);

	l_matching_master_struct_i = (MATCHING_MASTER_STRUCT_I *)calloc(1, sizeof(MATCHING_MASTER_STRUCT_I));
	APL_MALLOC_FAIL(l_matching_master_struct_i);

	memset(l_matching_master_struct_h, NULL, sizeof(MATCHING_MASTER_STRUCT_H));
	memset(l_matching_master_struct_i, NULL, sizeof(MATCHING_MASTER_STRUCT_I));



	EXEC SQL DECLARE match_cursor CURSOR FOR
		SELECT * from matching_master
				WHERE usefield='Y'
				AND proc_ind='P';

				/*
				AND exchng=:p_ex_code
				
				OR (EXCHNG IS NULL and proc_ind='P' and usefield='Y');
				*/


	EXEC SQL OPEN match_cursor;

	   for(;;)	
		{
			EXEC SQL FETCH match_cursor INTO :l_matching_master_struct_h:l_matching_master_struct_i;

			if(APL_ZERO_RESULT_SET)
				break;
			IS_ANY_ORA_ERROR
			
			//Condition added by Dipak for CS0064742 - Additional changes  for t0 confirmation
			if (strcmp(p_cln_param_val,"N")==0 || (strcmp(p_cln_param_val,"Y")==0 && (strcmp(l_matching_master_struct_h->h_dealfield,"MKT_TYPE")!=0 && strcmp(l_matching_master_struct_h->h_dealfield,"EXCH_CODE")!=0) ))
			{
				strcat(l_MatchDealDataString,l_matching_master_struct_h->h_dealfield);
				strcat(l_MatchDealDataString,"#");
				strcat(l_MatchBCNDataString,l_matching_master_struct_h->h_comp_field);
				strcat(l_MatchBCNDataString,"#");
				strcat(l_ToleranceString,(char *)ltoa(l_matching_master_struct_h->h_lmt));
				strcat(l_ToleranceString,"#");
			}
			else
			{
				exch_mkt_flg=1;
			}
	   }
	/*
    printf("\n IN MATCH FUNCTION---BCN STRING |%s|",l_MatchBCNDataString);
*/
	strcpy(param_MatchDealDataString,l_MatchDealDataString);
	strcpy(param_MatchBCNDataString,l_MatchBCNDataString);
	strcpy(param_ToleranceString,l_ToleranceString);
	
    printf("\n IN MATCH FUNCTION---TOLERANCE STRING |%s|",l_ToleranceString);
	printf("\n IN MATCH FUNCTION---BCN STRING |%s|",l_MatchBCNDataString);
	 printf("\n IN MATCH FUNCTION---DEAL STRING |%s|",l_MatchDealDataString);
	  EXEC SQL CLOSE match_cursor;
	
	  APL_GOBACK_SUCCESS

	  RETURN_SUCCESS:
/*	printf("\n Sucess in  MatchDataStringForm \n");
*/		
  	  return(APL_SUCCESS);
	   
 	  RETURN_FAILURE:
	  printf("\n Failed in  MatchDataStringForm \n");
	return(APL_FAILURE);
}




