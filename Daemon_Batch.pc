/*
 *    COPYRIGHT NOTICE
 *
 *   Copyright 2005 Polaris Software Lab Limited. All rights reserved.
 *
 *   These materials are confidential and proprietary to
 *    Polaris Software Lab Limited and no part of these materials should
 *    be reproduced, published, transmitted or distributed in any form or
 *    by any means, electronic, mechanical, photocopying, recording or
 *    otherwise, or stored in any information storage or retrieval system
 *    of any nature nor should the materials be disclosed to third parties
 *    or used in any other manner for which this is not authorized, without
 *    the prior express written authorization of Polaris Software Lab Limited.
 */
/*********************************************************************
 *
 * Module Name         :      Corporate Actions
 *
 * File Name           :      Daemon_Batch.pc
 *
 * Description         :      Contains Functions Related to CA Batch Processes
 *
 *
 *
 *            Version Control Block
 *
 * Date        Version     Author           Description        RFS No.
 * ---------   --------  ---------------  ------------------   ---------
 * 20/01/2006	 1.1			Smita Bhat		Added Chgs related    HDFCCA_027
 * 									   			Name Change Event	
 *************************************************************************/

#include "stdio_64.h"
#include "MS_Swift.h" 
#include "DL_Interface.h" 
#include <unistd.h>

#define S_RESTART 10
#define S_START 11
#define S_CANNOT_EXECUTE 12
#define S_CONFLICT 13
#define S_PREDECESSOR 14
/* - Smita - HDFCCA_027 - Changed Macro Definitions
#define EOD_SCH_PROG "CM_EodScheduler"
#define BOD_SHEDULE_CONTROLLER "CM_BodScheduler"
#define CONV_SCH_PROG "CM_ConvScheduler"		
*/
#define EOD_SCH_PROG "INTL_EodScheduler"
#define BOD_SHEDULE_CONTROLLER "INTL_BodScheduler"
#define CONV_SCH_PROG "INTL_ConvScheduler"		

EXEC SQL INCLUDE SQLCA;


char                 chr_db_id[APL_USERID_LEN];
char                 chr_db_pwd[100];
DEBUG_INFO_STRUCT_H **l_debug_info_ptr ;
DEBUG_INFO_STRUCT_H         *l_debug_info_struct_h_tmp=NULL; 

int main(int argc,char **argv) //AIX -Warnings Removal
{

	
   int   CO_Rtv_EnvStruct(INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,char *p_env_str);
   int   CO_Rtv_ErrStruct(char *p_error_desc,DEBUG_INFO_STRUCT_H **l_debug_info_ptr);
	int Batch_Proc_MarkSuccessProcess(char *p_ora_rowid,char *p_return_value);
	int Proc_MarkFailProcess(char *p_ora_rowid, char *p_error_desc);

	
	EXEC SQL BEGIN DECLARE SECTION;
	char	h_ora_rowid[APL_ROWID_LEN];
	char 	chr_h_param_str[4000] = APL_NULL_STRING;
	char 	chr_h_error_str[4000] = APL_NULL_STRING;
	char 	chr_h_env_str[2000] = APL_NULL_STRING;
	char 	chr_h_func_name[100] = APL_NULL_STRING;
	char 	chr_h_func_key[100] = APL_NULL_STRING;
	char 	chr_l_return_value[4000] = APL_NULL_STRING;
	char *chr_h_error_desc;
	/*Smita - HDFCCA_027 - For NAme Change Event*/
	char *chr_l_audit_data = APL_NULL_STRING;
	char chr_l_data_key[100] = APL_NULL_STRING;
	char p_comments[100] = APL_NULL_STRING;
	/*Smita - HDFCCA_027 - For NAme Change Event*/
	/* PJ */
	char  chr_h_entity_name[100] = APL_NULL_STRING;
	char  chr_h_param_str_temp[4000] = APL_NULL_STRING;

char    l_data_fld_sep_str[2] = APL_NULL_STRING;

	short i_func_param_str=0;
	short   i_ora_rowid=0;
	short   i_func_name=0;
	short   i_func_key=0;
	short   i_env_str=0;
	short   i_proc_data=0;
	short   i_error_str=0;
	int 	  int_l_funcreturnstate =0;
        int		l_int_ChkSysOnline = 1;
	
	/* Rohit Addition of process id for batch	*/
        int     int_proc_id = 0;	 
        char  chr_proc_id[5] = APL_NULL_STRING;
        	
	EXEC SQL VAR h_ora_rowid IS STRING;
	EXEC SQL VAR chr_h_error_desc IS STRING;
	EXEC SQL VAR chr_h_param_str IS STRING;
	EXEC SQL VAR chr_h_error_str IS STRING;
	EXEC SQL VAR chr_h_env_str IS STRING;
	EXEC SQL VAR chr_h_func_name IS STRING;
	EXEC SQL VAR chr_h_func_key IS STRING;
	
	EXEC SQL END DECLARE SECTION;
	
	struct sqlca sqlca;

	short int_ret_val	=	0;

	/*	Change from unsigned long to int	UAT Rohit	*/
	/*
	unsigned long l_sleep_microseconds = 0; 
	unsigned long l_sleep_seconds=0;
	*/

	int l_sleep_microseconds = 0; 
	int l_sleep_seconds=0;

	FILE *chr_finifile;
	char chr_inifile[PATH_LENGTH],chr_l_uname[APL_USERID_LEN],chr_l_passwd[APL_PASSWD_LEN],chr_custody_id_b[APL_USERID_LEN],chr_buffer[KEY_LENGTH];
	DEBUG_INFO_STRUCT_H *l_debuginfo = (DEBUG_INFO_STRUCT_H *)NULL;
	INTL_ENV_DATA_STRUCT_H l_intl_env_data_h;
	INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h;
	
	memset(chr_inifile,APL_NULL_CHAR,PATH_LENGTH);
	memset(chr_buffer,APL_NULL_CHAR,KEY_LENGTH);
	memset(chr_l_uname,APL_NULL_CHAR,40);
	memset(chr_l_passwd,APL_NULL_CHAR,40);
	memset(chr_h_func_name,APL_NULL_CHAR, 100); 
	memset(chr_proc_id,APL_NULL_CHAR, 5); 

   p_intlenv_data_struct_h =  (INTL_ENV_DATA_STRUCT_H *)calloc(1,sizeof(INTL_ENV_DATA_STRUCT_H));
   APL_MALLOC_FAIL(p_intlenv_data_struct_h);
   memset(p_intlenv_data_struct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H));


	if ( ( l_debug_info_struct_h_tmp = (DEBUG_INFO_STRUCT_H *)calloc(1,sizeof(DEBUG_INFO_STRUCT_H)) ) == NULL )
			 APL_GOBACK_FAIL ;

	if ( ( (l_debug_info_ptr) = (DEBUG_INFO_STRUCT_H **)calloc(1,sizeof(DEBUG_INFO_STRUCT_H *)) ) == NULL )	
			 APL_GOBACK_FAIL ;
	

	if ( argc != 2)
	{
		printf("\n Invalid sleep time for daemon ... \n ");
		APL_GOBACK_FAIL
	}
	else
	{
		printf("\n ******************  Server Started With Sleep Time :%s:****************\n",argv[1]);
		sscanf(argv[1],"%d.%d",&l_sleep_seconds,&l_sleep_microseconds);
	   l_sleep_microseconds = l_sleep_microseconds * 10000;	
	}

	strcpy(chr_inifile,getenv("INTL_ROOT_PATH"));
	strcat(chr_inifile,"/intl_sun.cfg");
	if ( (chr_finifile = fopen(chr_inifile,"r") ) == NULL)
	        APL_GOBACK_FAIL;

	/*Smita - Removed Hardcoded Values of database connection - HDFCCA_027*/
   APL_FETCH_DB_LOGIN_DETAILS(chr_finifile, chr_custody_id_b, chr_l_uname, chr_l_passwd , APL_OUT_FILE , &l_debuginfo)
   
   
   EXEC SQL CONNECT :chr_l_uname IDENTIFIED BY :chr_l_passwd;
   if(sqlca.sqlcode != 0)                                 
   {
     ltoa_r(sqlca.sqlcode,chr_buffer,KEY_LENGTH-1);
     CO_InsertErr(&l_debuginfo,DB_ERR_NO,chr_buffer,
                 APL_NULL_STRING,APL_NULL_STRING,
                 __LINE__,__FILE__);
     APL_GOBACK_FAIL

   }
	if ( CO_RtvSysParams(l_debug_info_ptr) == APL_FAILURE)
	{
		printf("\nReturned unsuccessfully from CO_RtvSysParams processtion\n");
		APL_GOBACK_FAIL
	}
	  printf("\n Done with Calling get sys params .. ");	

	


	EXEC SQL UPDATE PRO_DAEMON_STATUS SET STATUS = 1 where PROC_NAME = 'Daemon_Batch';
	IS_ANY_ORA_ERROR;
sprintf(l_data_fld_sep_str,"%c",DATA_FIELD_SEPRTR);
strcat(l_data_fld_sep_str,APL_NULL_STRING);
	
	while(1)
	{
		/***************************************************************************
		JC - Commented - If there are unprocessed requests, Daemon should not sleep
		This code for sleep shifted from here and moved after request check query - Retrofit by Manasi for ISKB_7759 Common Issues Fixes
      if(l_sleep_seconds != 0)
      {
         sleep(l_sleep_seconds);
      }
      usleep(l_sleep_microseconds);
		JC - Commented - If there are unprocessed requests, Daemon should not sleep - Retrofit by Manasi for ISKB_7759 Common Issues Fixes
		***************************************************************************/

		strcpy(h_ora_rowid,APL_NULL_STRING);	
		i_ora_rowid = -1;
		strcpy(chr_h_param_str,APL_NULL_STRING);
		strcpy(chr_h_error_str,APL_NULL_STRING);
		strcpy(chr_h_env_str,APL_NULL_STRING);
		strcpy(chr_h_func_name,APL_NULL_STRING);
		strcpy(chr_h_func_key,APL_NULL_STRING);
		strcpy(chr_l_return_value,APL_NULL_STRING);
		strcpy(chr_proc_id,APL_NULL_STRING);

		i_func_name=0;
		i_func_key=0;
		i_env_str=0;
		i_proc_data=0;
		i_error_str=0;

		EXEC SQL SELECT ROWID INTO :h_ora_rowid:i_ora_rowid from PRO_REQUEST_BATCH where 
		REQUEST_SEQ = (SELECT MIN(REQUEST_SEQ) FROM PRO_REQUEST_BATCH WHERE STATUS = '0') and rownum < 2 FOR UPDATE NOWAIT;		
		
		if (sqlca.sqlcode == -54)
		{
			continue;
		}

		IS_ANY_ORA_ERROR

		if (sqlca.sqlcode == 1403)
		{
			EXEC SQL COMMIT;
			IS_ANY_ORA_ERROR;

			/***************************************************************************
			JC - Daemon should sleep only if there are unprocessed requests - Retrofit by Manasi for ISKB_7759 Common Issues Fixes */
			if(l_sleep_seconds != 0)
			{
				sleep(l_sleep_seconds);
			}
			usleep(l_sleep_microseconds);
			/* JC - Daemon should sleep only if there are unprocessed requests - Retrofit by Manasi for ISKB_7759 Common Issues Fixes
			***************************************************************************/

			continue;
		}

		EXEC SQL UPDATE PRO_REQUEST_BATCH SET STATUS = '1' where ROWID=:h_ora_rowid;
		IS_ANY_ORA_ERROR
		EXEC SQL COMMIT;
		IS_ANY_ORA_ERROR

		
		EXEC SQL SELECT PROC_NAME, PROC_AREA, ENVIRON_DATA, PROC_DATA, ERROR_DET 
		INTO :chr_h_func_name:i_func_name,:chr_h_func_key:i_func_key,:chr_h_env_str:i_env_str,:chr_h_param_str:i_proc_data,:chr_h_error_str:i_error_str 
		from PRO_REQUEST_BATCH where ROWID=:h_ora_rowid FOR UPDATE NOWAIT;

		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(ERR_REC_NOTFND,"PRO_REQUEST_BATCH","FATAL ERR","ROWID");
		strcat(chr_h_env_str,l_data_fld_sep_str);
		/* strcat(chr_h_param_str,l_data_fld_sep_str); HDFCIV_004 */
		strcat(chr_h_error_str,l_data_fld_sep_str);

	   p_intlenv_data_struct_h =  (INTL_ENV_DATA_STRUCT_H *)calloc(1,sizeof(INTL_ENV_DATA_STRUCT_H));
	   /* APL_MALLOC_FAIL_LOC_A(p_intlenv_data_struct_h); OPT:AIX */
		APL_MALLOC_FAIL(p_intlenv_data_struct_h);
	   memset(p_intlenv_data_struct_h,NULL,sizeof(INTL_ENV_DATA_STRUCT_H));

		int_ret_val = CO_Rtv_EnvStruct(p_intlenv_data_struct_h,chr_h_env_str);

		if (strlen(chr_h_error_str) != 0)
			int_ret_val = CO_Rtv_ErrStruct(chr_h_error_str,l_debug_info_ptr);

		chr_h_error_desc =  (char *)calloc(4000,sizeof(char));
		/* APL_MALLOC_FAIL_LOC_A(chr_h_error_desc); OPT:AIX */
		APL_MALLOC_FAIL(p_intlenv_data_struct_h);

  		memset(chr_h_error_desc,NULL,sizeof(char));

		/*Smita - HDFCCA_027 - For NAme Change Event*/
                strcpy(chr_l_data_key,chr_h_func_name);
		strcpy(p_comments,"Batch Process");
                /*Smita - HDFCCA_027 - For NAme Change Event*/  
		if(!strcmp(chr_h_func_name, EOD_SCH_PROG) || !strcmp(chr_h_func_name, BOD_SHEDULE_CONTROLLER)  || !strcmp(chr_h_func_name, CONV_SCH_PROG) || (1==1))
		{

			INTL_WARNING
			printf("\n *** 263 sending|%s|%s| \n", chr_h_func_name,chr_h_param_str );
	      int_ret_val = CO_ReStartProg( chr_h_func_name,
	                                    chr_h_func_key,
	                                    chr_h_param_str,
	                                    &int_l_funcreturnstate,
												   &int_proc_id,
	                                    l_debug_info_ptr,
	                                    p_intlenv_data_struct_h);
	
			if(int_ret_val == APL_FAILURE)
			{
					strcpy(chr_h_error_desc,"Returned from CO_ReStartProg with Failure");
					CO_ProcMonitor(APL_OUT_FILE,chr_h_error_desc,NULL,p_intlenv_data_struct_h);
					int_ret_val = Proc_MarkFailProcess(h_ora_rowid, chr_h_error_desc); 
			}
			else
			{
					/* Uncommented by Vikram N. - For Batch log auto open - Start */
					/*	Not Yet Release for Kotak Custody	*/
					printf("Rohit Success Proc ID: |%d|",int_proc_id);
					strcpy(chr_l_return_value,l_data_fld_sep_str);
					strcat(chr_l_return_value,"PROCESS");
					sprintf(chr_proc_id,"%d",int_proc_id);
					strcat(chr_l_return_value,chr_proc_id);
					/* Uncommented by Vikram N. - For Batch log auto open - End */

					CO_ProcMonitor(APL_OUT_FILE,"Returned from CO_ReStartProg with Success\n",NULL,p_intlenv_data_struct_h);
	
	            if(int_l_funcreturnstate != S_START)
	            {
	               if(int_l_funcreturnstate == S_CANNOT_EXECUTE)
	               {
	                  strcpy(chr_h_error_desc,"A copy of program still running");
	               }
	               else if(int_l_funcreturnstate == S_CONFLICT)
	               {
	                  strcpy(chr_h_error_desc,"Conflict program running");
	               }
	               else if(int_l_funcreturnstate == S_PREDECESSOR)
	               {
	                  strcpy(chr_h_error_desc,"PRE_PROCESS not executed as yet");
	               }
	               else if(int_l_funcreturnstate == S_RESTART)
	               {
	                  strcpy(chr_h_error_desc,"Successfully Re-Started execution");
	               }
	               else
	               {
	                 sprintf(chr_h_error_desc,"Some Error during execution int_l_funcreturnstate is :%d:",int_l_funcreturnstate);
							strcat(chr_h_error_desc,"\0"); //AIX -Warnings Removal
	               }
						CO_ProcMonitor(APL_OUT_FILE,chr_h_error_desc,NULL,p_intlenv_data_struct_h);
										
						int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
	            }
	            else if(int_l_funcreturnstate == S_START)
	            {			
						int_ret_val = Batch_Proc_MarkSuccessProcess(h_ora_rowid,chr_l_return_value);
						CO_ProcMonitor(APL_OUT_FILE,"Successfully Started execution",NULL,p_intlenv_data_struct_h);
	            }
			}
			S_NON_DCE_ERASE_DUMMY_WARNING;
		}
		else
		{
			printf("error found");
			strcpy(chr_h_error_desc,"System Is Not Online ");
			CO_ProcMonitor(APL_OUT_FILE,chr_h_error_desc,NULL,p_intlenv_data_struct_h);
			int_ret_val = Proc_MarkFailProcess(h_ora_rowid, chr_h_error_desc); 
		}
		free(p_intlenv_data_struct_h);	
		free(chr_h_error_desc);
		CO_FreeErrLst(l_debug_info_ptr);
	}

   APL_GOBACK_SUCCESS;

RETURN_SUCCESS:

   EXEC SQL COMMIT ;
        CO_ProcMonitor(APL_OUT_FILE,"Exiting successfully  out of Batch Daemon\n",NULL,NULL);
        fclose(chr_finifile);
        exit(0);

RETURN_FAILURE:
   EXEC SQL ROLLBACK;
        CO_ProcMonitor(APL_OUT_FILE,"Exiting unsuccesfully out of Batch Daemon\n",l_debug_info_ptr,NULL);
        fclose(chr_finifile);
        exit(-1);
}

int Batch_Proc_MarkSuccessProcess(char *p_ora_rowid,char *p_return_value)
{
	short int_ret_val  =  0;

	EXEC SQL UPDATE PRO_REQUEST_BATCH set STATUS = '2',ERROR_DET='SUCCESS'||:p_return_value
	where rowid=:p_ora_rowid;
	IS_ANY_ORA_ERROR;

	EXEC SQL COMMIT ;
	IS_ANY_ORA_ERROR;

	int_ret_val = APL_SUCCESS;
	S_NON_DCE_ERASE_DUMMY_WARNING;


RETURN_SUCCESS :
	return(APL_SUCCESS);

RETURN_FAILURE :
	return(APL_FAILURE);
}

int Proc_MarkFailProcess(char *p_ora_rowid, char *p_error_desc)
{
	short int_ret_val  =  0;

	char chr_l_error_desc[4000];
	EXEC SQL ROLLBACK ;
	IS_ANY_ORA_ERROR;

	int_ret_val = APL_FAILURE;

	S_NON_DCE_ERASE_DUMMY_WARNING;

	memset(chr_l_error_desc,NULL,sizeof(char));

	strcpy(chr_l_error_desc,APL_NULL_STRING);

	sprintf(chr_l_error_desc,"%d%c%d%c%s%c%s%c%s%c%s%c%d%c%d%c%d%c%s%c%c",ERROR,ERR_FLD_SEP,12,ERR_FLD_SEP,APL_NULL_STRING,ERR_FLD_SEP,APL_NULL_STRING,ERR_FLD_SEP,APL_NULL_STRING,ERR_FLD_SEP,"Daemon_Batch.c",ERR_FLD_SEP,__LINE__,ERR_FLD_SEP,3,ERR_FLD_SEP,0,ERR_FLD_SEP,p_error_desc,ERR_FLD_SEP,ERR_REC_SEP);	

	EXEC SQL update  PRO_REQUEST_BATCH set STATUS = '3',ERROR_DET=:chr_l_error_desc
	where rowid=:p_ora_rowid;



	IS_ANY_ORA_ERROR;

	EXEC SQL COMMIT;
	IS_ANY_ORA_ERROR;

	strcpy(chr_l_error_desc,APL_NULL_STRING);

	S_NON_DCE_ERASE_DUMMY_WARNING;

RETURN_SUCCESS :
	return(APL_SUCCESS);

RETURN_FAILURE :
	return(APL_FAILURE);
}
