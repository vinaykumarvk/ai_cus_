







#include "CO_HostStructdef.h"
EXEC SQL INCLUDE SQLCA.H;



int CR_Rtv_PosBkCl(	char *chr_p_client, 
							char *p_instr_code, 
							char *p_loccode,
							double *p_quantity,
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	

	struct sqlca sqlca;	
	int 	int_l_error_flag 							= APL_SUCCESS;
	char	l_001_status[STATUS_POS_LEN] 	= APL_NULL_STRING;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
						"Entered Function CR_Rtv_PosBkCl\n",
						NULL,
						NULL);
	}

	
	

	if (!strlen(chr_p_client))
	{
		APL_DATA_MISSING("Account", APL_NULL_STRING, APL_NULL_STRING);
		int_l_error_flag = APL_FAILURE;
	} 
	if (!strlen(p_instr_code))
	{
		APL_DATA_MISSING("Instrurity", APL_NULL_STRING, APL_NULL_STRING);
		int_l_error_flag = APL_FAILURE;
	} 
	if ((l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y') && (!strlen(p_loccode)))
	{
		APL_DATA_MISSING("Location", APL_NULL_STRING, APL_NULL_STRING);
		int_l_error_flag = APL_FAILURE;
	} 

	if (APL_FAILURE == int_l_error_flag) APL_GOBACK_FAIL

	

	

	strcpy(l_001_status, STATUS_POS_001); 
	if (l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y')
	{
		EXEC SQL SELECT NVL(SUM(safekeep_pos-VAL_DEL-NVALDELIVER),0)
		INTO :p_quantity
		FROM DL_SAFEK
		WHERE CLIENT = RTRIM(:chr_p_client)
		AND	INSTR_CODE  = RTRIM(:p_instr_code)
		AND	LOCATION_CD = RTRIM(:p_loccode) 
		AND	STATUS = :l_001_status ;
	}
	else
	{
		EXEC SQL SELECT NVL(SUM(safekeep_pos-VAL_DEL-NVALDELIVER),0)
		INTO :p_quantity
		FROM DL_SAFEK
		WHERE CLIENT = RTRIM(:chr_p_client)
		AND	INSTR_CODE  = RTRIM(:p_instr_code)
		AND	STATUS = :l_001_status ;
	}

	IS_ANY_ORA_ERROR

	
	
	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Leaving Function CR_Rtv_PosBkCl with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);

   RETURN_FAILURE :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Leaving Function CR_Rtv_PosBkCl with errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);

}



int CR_Rtv_PosRegBkCl(	char *chr_p_client, 
							char *p_instr_code, 
							char *p_loccode,
							double *p_quantity,
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{

	

	struct sqlca sqlca;	
	int 		int_l_error_flag 							= APL_SUCCESS;
	char		l_001_status[STATUS_POS_LEN] 	= APL_NULL_STRING;
	char		l_000_status[STATUS_POS_LEN] 	= APL_NULL_STRING;
	double	l_h_safek000							= 0.0;
	double	l_h_confdel000							= 0.0;
	double	l_h_safek001							= 0.0;
	double	l_h_confdel001							= 0.0;
	double	l_h_nconfdel001						= 0.0;
	short		l_i_safek000							= 0;
	short		l_i_confdel000							= 0;
	short		l_i_safek001							= 0;
	short		l_i_confdel001							= 0;
	short		l_i_nconfdel001						= 0;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
						"Entered Function CR_Rtv_PosRegBkCl\n",
						NULL,
						NULL);
	}

	
	

	if (!strlen(chr_p_client))
	{
		APL_DATA_MISSING("Account", APL_NULL_STRING, APL_NULL_STRING);
		int_l_error_flag = APL_FAILURE;
	} 
	if (!strlen(p_instr_code))
	{
		APL_DATA_MISSING("Instrurity", APL_NULL_STRING, APL_NULL_STRING);
		int_l_error_flag = APL_FAILURE;
	} 
	if ((l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y') && (!strlen(p_loccode)))
	{
		APL_DATA_MISSING("Location", APL_NULL_STRING, APL_NULL_STRING);
		int_l_error_flag = APL_FAILURE;
	} 

	if (APL_FAILURE == int_l_error_flag) APL_GOBACK_FAIL

	

	

	strcpy(l_001_status, STATUS_POS_001); 
	strcpy(l_000_status, STATUS_POS_000); 
	if (l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y')
	{
		EXEC SQL SELECT safekeep_pos, VAL_DEL, NVALDELIVER
		INTO	:l_h_safek001:l_i_safek001,
				:l_h_confdel001:l_i_confdel001,
				:l_h_nconfdel001:l_i_nconfdel001
		FROM DL_SAFEK
		WHERE CLIENT 		= RTRIM(:chr_p_client)
		AND	INSTR_CODE  		= RTRIM(:p_instr_code)
		AND	LOCATION_CD 	= RTRIM(:p_loccode) 
		AND	STATUS = :l_001_status;

		IS_ANY_ORA_ERROR

		EXEC SQL SELECT safekeep_pos, VAL_DEL
		INTO	:l_h_safek000:l_i_safek000,
				:l_h_confdel000:l_i_confdel000
		FROM DL_SAFEK
		WHERE CLIENT 		= RTRIM(:chr_p_client)
		AND	INSTR_CODE  		= RTRIM(:p_instr_code)
		AND	LOCATION_CD 	= RTRIM(:p_loccode) 
		AND	STATUS = :l_000_status;
	}
	else
	{
		EXEC SQL SELECT safekeep_pos, VAL_DEL, NVALDELIVER
		INTO	:l_h_safek001:l_i_safek001,
				:l_h_confdel001:l_i_confdel001,
				:l_h_nconfdel001:l_i_nconfdel001
		FROM DL_SAFEK
		WHERE CLIENT 		= RTRIM(:chr_p_client)
		AND	INSTR_CODE  		= RTRIM(:p_instr_code)
		AND	STATUS = :l_001_status;

		IS_ANY_ORA_ERROR

		EXEC SQL SELECT safekeep_pos, VAL_DEL
		INTO	:l_h_safek000:l_i_safek000,
				:l_h_confdel000:l_i_confdel000
		FROM DL_SAFEK
		WHERE CLIENT 		= RTRIM(:chr_p_client)
		AND	INSTR_CODE  		= RTRIM(:p_instr_code)
		AND	STATUS = :l_000_status;
	}

	IS_ANY_ORA_ERROR

	if (l_h_safek000 < l_h_confdel000)
	{
		*p_quantity = l_h_safek000+l_h_safek001-l_h_confdel000-l_h_confdel001-l_h_nconfdel001;
	}
	else
	{
		*p_quantity = l_h_safek001-l_h_confdel001-l_h_nconfdel001;
	}

	
	
	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Leaving Function CR_Rtv_PosRegBkCl with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);

   RETURN_FAILURE :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Leaving Function CR_Rtv_PosRegBkCl with errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);

}



int CR_Rtv_RefNoBkClTrd(	char *chr_p_now, 
							char *chr_p_refno,
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{
	

	int 		int_l_juldate 		= 0;
	int		i					= 0;
	int		j					= 0;

	char		chr_l_pad_juldate[JULDATERR_LEN]	= APL_NULL_STRING;
	char		chr_l_pad_char[APL_FLAG_LENGTH]	= APL_NULL_STRING;
	char		chr_l_itime[TIME_LEN]			= APL_NULL_STRING;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_context_local;
	#endif

	

	if (APL_FAILURE == CO_Rtv_JulDt( 	&int_l_juldate,
													l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	

	sprintf(chr_l_pad_juldate, "%d", int_l_juldate);
	chr_l_pad_char[0] = JULDATERR_PAD_CHAR;
	chr_l_pad_char[1] = '\0';
	if (APL_FAILURE == CO_PadString(	chr_l_pad_juldate,
												'L',
												3,
												chr_l_pad_char,
												l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	

   for ( i=11,j=0; j<9; )
   {
      if (chr_p_now[i++] != ':') chr_l_itime[j++] = chr_p_now[i-1];
   }

	
	
	strncpy(chr_p_refno, chr_p_now+8, 2);
	strcat(chr_p_refno, chr_l_pad_juldate);
	strcat(chr_p_refno, chr_l_itime);

	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Leaving Function CR_Rtv_RefNoBkClTrd with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);

   RETURN_FAILURE :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Leaving Function CR_Rtv_RefNoBkClTrd with errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);

}



int CR_Rtv_TrdBkCl(	BCL_TRF_STRUCT_H *p_bcl_trf_struct_h,
							char p_recdel_flg,
							char *chr_p_now,
							INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{
	

	struct sqlca sqlca;	

	char		chr_l_h_brokcode_cname[CNAME_LEN_A]	= APL_NULL_STRING;
	char		chr_l_h_exarena[EX_ARENA_LEN]			= APL_NULL_STRING;
	char		chr_l_h_ccycode[APL_CCYCODE_LEN]		= APL_NULL_STRING;
	char		chr_l_h_newcode[APL_INSTRUMENTCODE_LEN]		= APL_NULL_STRING;
	char		chr_l_manif_flag[APL_FLAG_LENGTH]			= APL_NULL_STRING;
	char		chr_l_h_next_reg[APL_FLAG_LENGTH]			= APL_NULL_STRING;
	char		chr_l_pendreg_code[APL_FLAG_LENGTH]		= APL_NULL_STRING;
	char		chr_l_refno_a[APL_TXNREFNO_LEN]			= APL_NULL_STRING;
	char		chr_l_bcl_refno[APL_TXNREFNO_LEN]		= APL_NULL_STRING;
	char		chr_l_buf[BUFFER_LEN]						= APL_NULL_STRING;
	char		chr_l_today[APL_DATE_LEN]				= APL_NULL_STRING;

	int 		int_l_error_flag 			= APL_SUCCESS;

	short		l_i_brokcode_cname	= 0;
	short		l_i_exarena				= 0;
	short		l_i_ccycode				= 0;
	short		l_i_newcode				= 0;
	short		l_i_next_reg			= 0;

	SYS_DL_DEAL_STRUCT_H	*l_sys_dl_deal_struct_hg = NULL;
	INTL_ENV_DATA_STRUCT_H	*l_intl_env_data_h = NULL;

	EXEC SQL VAR chr_l_h_brokcode_cname IS STRING;
	EXEC SQL VAR chr_l_h_exarena IS STRING;
	EXEC SQL VAR chr_l_h_ccycode IS STRING;
	EXEC SQL VAR chr_l_h_newcode IS STRING;
	EXEC SQL VAR chr_l_h_next_reg IS STRING;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	

	l_sys_dl_deal_struct_hg = (SYS_DL_DEAL_STRUCT_H *)calloc(1, sizeof(SYS_DL_DEAL_STRUCT_H));
	APL_MALLOC_FAIL(l_sys_dl_deal_struct_hg);
	l_intl_env_data_h = (INTL_ENV_DATA_STRUCT_H *)calloc(1, sizeof(INTL_ENV_DATA_STRUCT_H));
	APL_MALLOC_FAIL(l_intl_env_data_h);

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
						"Entered Function CR_Rtv_TrdBkCl\n",
						NULL,
						NULL);
	}

	

	if (APL_FAILURE == CO_RtvSysDt(chr_l_today, l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	

	EXEC SQL SELECT cln_name 
	INTO :chr_l_h_brokcode_cname:l_i_brokcode_cname
	FROM MT_CLIENT
	WHERE cln_code = RTRIM(:l_mt_core_sys_params_struct_h.custody_clt_cd) ;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_ACCNOT_FND,
														(char *)l_mt_core_sys_params_struct_h.custody_clt_cd,
														APL_NULL_STRING,
														APL_NULL_STRING);//Changes done for AIX Migration

	

	EXEC SQL SELECT ex_arena, currency_cd, NEW_CD 
	INTO 	:chr_l_h_exarena:l_i_exarena,
			:chr_l_h_ccycode:l_i_ccycode,
			:chr_l_h_newcode:l_i_newcode
	FROM MT_INSTRUMENT
	WHERE instr_code = RTRIM(:p_bcl_trf_struct_h->h_instr_code) ;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_INSTR_NOTFND,
														p_bcl_trf_struct_h->h_instr_code,
														APL_NULL_STRING,
														APL_NULL_STRING);

	

	if (l_mt_core_sys_params_struct_h.manifld_print_ind[0] == 'N')
	{
		strcpy(chr_l_manif_flag, "N");
	}
	else
	{
		if (l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'N')
		{
			strcpy(chr_l_manif_flag, "Y");
		}
		else
		{
			EXEC SQL SELECT MANIFLD_IND
			INTO :chr_l_manif_flag
			FROM MT_LOCATION
			WHERE location_cd = RTRIM(:p_bcl_trf_struct_h->h_loccode) ;

			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_LOCN_NOTFND,
																p_bcl_trf_struct_h->h_loccode,
																APL_NULL_STRING,
																APL_NULL_STRING);
		}
	}

	

	chr_l_pendreg_code[0] = PEND_REG_CODE;
	chr_l_pendreg_code[1] = '\0';

	EXEC SQL SELECT NEW_REG_A
	INTO :chr_l_h_next_reg:l_i_next_reg
	FROM DL_REGCYCLE
	WHERE REG_ST_CD = :chr_l_pendreg_code
	AND	NATION = RTRIM(:g_mt_commonsys_params_struct_h.nation_code) ;

	IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_REC_NOTFND,
														"Next Reg.",
														APL_NULL_STRING,
														APL_NULL_STRING);

	

	if (APL_FAILURE == CR_Rtv_RefNoBkClTrd(chr_p_now, chr_l_refno_a, l_debug_info_ptr))
	{
		APL_GOBACK_FAIL
	}

	if (p_bcl_trf_struct_h->h_bclreg_ind[0] == REG_BCL_IND)
	{
		if (p_recdel_flg == 'R')
		{
			strcpy(chr_l_bcl_refno, BLC_REC_IDENT_PRE);
		}
		else
		{
			strcpy(chr_l_bcl_refno, BLC_DEL_IDENT_PRE);
		}
	}
	else
	{
		if (p_recdel_flg == 'R')
		{
			strcpy(chr_l_bcl_refno, BCL_IDENT_REC_PREFIX);
		}
		else
		{
			strcpy(chr_l_bcl_refno, BCL_IDENT_DEL_PREFIX);
		}
	}
	strcat(chr_l_bcl_refno, chr_l_refno_a);

	

	strcpy(l_sys_dl_deal_struct_hg->h_dl_client, p_bcl_trf_struct_h->h_dl_client);
	strcpy(l_sys_dl_deal_struct_hg->h_indentity_no, chr_l_bcl_refno);
	strcpy(l_sys_dl_deal_struct_hg->h_origindentity_no, chr_l_bcl_refno);
	strcpy(l_sys_dl_deal_struct_hg->h_dlt, chr_l_today);
	strcpy(l_sys_dl_deal_struct_hg->h_setldt, chr_l_today);
	strcpy(l_sys_dl_deal_struct_hg->h_ex_arena, chr_l_h_exarena);
	l_sys_dl_deal_struct_hg->h_qty = p_bcl_trf_struct_h->h_qty;
	strcpy(l_sys_dl_deal_struct_hg->h_domcpclt_cd, l_mt_core_sys_params_struct_h.custody_clt_cd);
	if (p_recdel_flg == 'R')
	{
		l_sys_dl_deal_struct_hg->h_dealcd[0] = DEALCD_RF;
	}
	else
	{
		l_sys_dl_deal_struct_hg->h_dealcd[0] = DEALCD_DF;
	}
	l_sys_dl_deal_struct_hg->h_dealcd[1] = '\0';
	strcpy(l_sys_dl_deal_struct_hg->h_instr_code, p_bcl_trf_struct_h->h_instr_code);
	strcpy(l_sys_dl_deal_struct_hg->h_currencycode, chr_l_h_ccycode);
	strcpy(l_sys_dl_deal_struct_hg->h_domcp_custodyclt, l_mt_core_sys_params_struct_h.custody_clt_cd);
	strcpy(l_sys_dl_deal_struct_hg->h_countcltnm, chr_l_h_brokcode_cname);
	sprintf(chr_l_buf, "BOOKS CLOSING FOR %s ON %11s", p_bcl_trf_struct_h->h_instr_code, chr_p_now);
	strcpy(l_sys_dl_deal_struct_hg->h_info1, chr_l_buf);
	strcpy(l_sys_dl_deal_struct_hg->h_classofdl, TRFDEAL);
	strcpy(l_sys_dl_deal_struct_hg->h_fx_reqd, "N");
	if (l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y')
	{
		strcpy(l_sys_dl_deal_struct_hg->h_loccode, p_bcl_trf_struct_h->h_loccode);
	}
	strcpy(l_sys_dl_deal_struct_hg->h_isspotdl, "N");
	strcpy(l_sys_dl_deal_struct_hg->h_confdate, chr_l_today);
	strcpy(l_sys_dl_deal_struct_hg->h_ispart_, "N");
	l_sys_dl_deal_struct_hg->h_origquantity = p_bcl_trf_struct_h->h_qty;
	strcpy(l_sys_dl_deal_struct_hg->h_instrdate, chr_l_today);
	strcpy(l_sys_dl_deal_struct_hg->h_dlfromord, "N");
	strcpy(l_sys_dl_deal_struct_hg->h_entry, SYSTEM_GEN_DEAL_IND);
	strcpy(l_sys_dl_deal_struct_hg->h_reginstr_ind, "Y");
	if (chr_l_manif_flag[0] == 'Y')
	{
		strcpy(l_sys_dl_deal_struct_hg->h_delrecdate, chr_l_today);
	}
	if (p_recdel_flg == 'R')
	{
		strcpy(l_sys_dl_deal_struct_hg->h_pos_stat, STATUS_POS_001);
		strcpy(l_sys_dl_deal_struct_hg->h_status_reg, chr_l_h_next_reg);
		l_sys_dl_deal_struct_hg->h_marktrfquantity = p_bcl_trf_struct_h->h_qty;
		strcpy(l_sys_dl_deal_struct_hg->h_locindentity_no, p_bcl_trf_struct_h->h_locindentity_no_rf);
	}
	else
	{
		strcpy(l_sys_dl_deal_struct_hg->h_candropdate, chr_l_today);
		strcpy(l_sys_dl_deal_struct_hg->h_pos_stat, STATUS_POS_001);
		l_sys_dl_deal_struct_hg->h_delta_001 = p_bcl_trf_struct_h->h_qty ;
		strcpy(l_sys_dl_deal_struct_hg->h_locindentity_no, p_bcl_trf_struct_h->h_locindentity_no_df);
	}
	strcpy(l_sys_dl_deal_struct_hg->h_newdt, chr_p_now);
	strcpy(l_sys_dl_deal_struct_hg->h_maker, p_intl_envdatastruct_h->usr);
	strcpy(l_sys_dl_deal_struct_hg->h_maker_dt, chr_p_now);
	strcpy(l_sys_dl_deal_struct_hg->h_checker, p_intl_envdatastruct_h->usr);
	strcpy(l_sys_dl_deal_struct_hg->h_checker_dt, chr_p_now);
	strcpy(l_sys_dl_deal_struct_hg->h_deal_status, STATUS_SETL);
	strcpy(l_sys_dl_deal_struct_hg->h_access_stamp, chr_p_now);
	strcpy(l_sys_dl_deal_struct_hg->h_ispymtlocal, "N");
	if (l_i_newcode == -1)
	{
		strcpy(l_sys_dl_deal_struct_hg->h_instrconv_ind, "N");
	}
	else
	{
		strcpy(l_sys_dl_deal_struct_hg->h_instrconv_ind, "Y");
	}

	

	strcpy(l_intl_env_data_h->usr, p_intl_envdatastruct_h->usr);
	strcpy(l_intl_env_data_h->h_mode, APL_FUNC_INPUT);
	strcpy(l_intl_env_data_h->processtion, p_intl_envdatastruct_h->processtion);
	strcpy(l_intl_env_data_h->auth_req, p_intl_envdatastruct_h->auth_req);
	strcpy(l_intl_env_data_h->subprocess, p_intl_envdatastruct_h->subprocess);
	strcpy(l_intl_env_data_h->h_process, p_intl_envdatastruct_h->h_process);

	

   
   
   if (!strcmp(p_intl_envdatastruct_h->h_mode,APL_FUNC_INPUT))
      strcpy(l_sys_dl_deal_struct_hg->h_allow_part_s,"N");
   

	if (APL_FAILURE == DL_Proc_Trd(	l_sys_dl_deal_struct_hg,
												NULL,
												l_intl_env_data_h,
												l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}
   

   if (APL_FAILURE==EI_Mod_MQData(l_sys_dl_deal_struct_hg->h_dl_client,
                                  l_sys_dl_deal_struct_hg->h_indentity_no,
											 NULL,
											 NULL,
											 "B",
                                  l_debug_info_ptr))
    {
         APL_GOBACK_FAIL
    }

	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Leaving Function CR_Rtv_TrdBkCl with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);

   RETURN_FAILURE :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Leaving Function CR_Rtv_TrdBkCl with errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);

}



int CR_Mod_BkCl(	BCL_TRF_STRUCT_H *p_bcl_trf_struct_h,
						INTL_ENV_DATA_STRUCT_H *p_intl_envdatastruct_h,
						DEBUG_INFO_STRUCT_H **l_debug_info_ptr )
{
	

	struct sqlca sqlca;	

	int 		int_l_error_flag 			= APL_SUCCESS;
	int		int_l_h_srlno				= 0;	

	short		l_i_refno				= 0;
	short		int_l_i_qty					= 0;
	short		l_i_pendregqty			= 0;
	short		l_i_mcomplqty			= 0;
	short		l_i_complqty			= 0;
	short		l_i_srlno				= 0;
	short		l_i_accst				= 0;
	short		chr_l_dec						= 0;

	char		chr_l_buf[BUFFER_LEN]							= APL_NULL_STRING;		
	char		chr_l_now[APL_DATE_LEN]						= APL_NULL_STRING;		
	char		chr_l_pendreg_regstcode[APL_FLAG_LENGTH]	= APL_NULL_STRING;		
	char		chr_l_h_refno_A[APL_TXNREFNO_LEN]			= APL_NULL_STRING;		
	char		chr_l_h_accst[APL_DATE_LEN]					= APL_NULL_STRING;		

	double	l_h_quantity_a					= 0.0;
	double	l_h_pend_reg_qty			= 0.0;
	double	l_h_dl_completeqty			= 0.0;
	double	l_h_complquantity			= 0.0;

	DL_REGDET_STRUCT_H	*l_reg_trf_struct_h  	= NULL;
	REQDETAILS_STRUCT_H	*l_reqdetails_struct_ha_a	= NULL;

	

	EXEC SQL VAR chr_l_h_refno_A IS STRING;
	EXEC SQL VAR chr_l_h_accst IS STRING;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	sqlca.sqlcode = 0;

	

	l_reg_trf_struct_h = (DL_REGDET_STRUCT_H *)calloc(1, sizeof(DL_REGDET_STRUCT_H));
	APL_MALLOC_FAIL(l_reg_trf_struct_h);
	l_reqdetails_struct_ha_a = (REQDETAILS_STRUCT_H *)calloc(1, sizeof(REQDETAILS_STRUCT_H));
	APL_MALLOC_FAIL(l_reqdetails_struct_ha_a);

	

	APL_IF_DEBUG
	{
		CO_ProcMonitor(	APL_OUT_FILE, 
						"Entered Function CR_Mod_BkCl\n",
						NULL,
						NULL);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "Account is : %s", p_bcl_trf_struct_h->h_dl_client);
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, p_intl_envdatastruct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "Instrode is : %s", p_bcl_trf_struct_h->h_instr_code);
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, p_intl_envdatastruct_h);
		memset(chr_l_buf, NULL, BUFFER_LEN);
		sprintf(chr_l_buf, "Locncode is : %s", p_bcl_trf_struct_h->h_loccode);
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, p_intl_envdatastruct_h);
	}

	

	if (APL_FAILURE == CO_RtvSysDtTime(chr_l_now, l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}


	

	if (p_bcl_trf_struct_h->h_bclreg_ind[0] != REG_BCL_IND)
	{
		chr_l_pendreg_regstcode[0] = PEND_REG_CODE;
		chr_l_pendreg_regstcode[1] = '\0';

		if (l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y')
		{
			chr_l_dec = 1;
			EXEC SQL DECLARE trdreg_cur1 CURSOR FOR
			SELECT 	IDENTIY_NO, QTY, PEND_REG_QTY, DL_COMPLETEQTY, TOT_QTY
			FROM dl_deal
			WHERE client = RTRIM(:p_bcl_trf_struct_h->h_dl_client)
			AND	instr_code  = RTRIM(:p_bcl_trf_struct_h->h_instr_code)
			AND	location_cd= RTRIM(:p_bcl_trf_struct_h->h_loccode)
			AND	INSTRUMENT_DT IS NOT NULL
			AND	PEND_REG_QTY > 0
			FOR UPDATE OF access_stamp ;

			EXEC SQL OPEN trdreg_cur1 ;
		}
		else
		{
			chr_l_dec = 2;
			EXEC SQL DECLARE trdreg_cur2 CURSOR FOR
			SELECT 	IDENTIY_NO, QTY, PEND_REG_QTY, DL_COMPLETEQTY, TOT_QTY
			FROM dl_deal
			WHERE client = RTRIM(:p_bcl_trf_struct_h->h_dl_client)
			AND	instr_code  = RTRIM(:p_bcl_trf_struct_h->h_instr_code)
			AND	INSTRUMENT_DT IS NOT NULL
			AND	PEND_REG_QTY > 0
			FOR UPDATE OF access_stamp ;

			EXEC SQL OPEN trdreg_cur2 ;
		}

		IS_ANY_ORA_ERROR

		for ( ; ; )
		{
			

			memset(chr_l_h_refno_A, NULL, APL_TXNREFNO_LEN);
			l_h_quantity_a = 0.0;
			int_l_h_srlno = 0;
			memset(chr_l_h_accst, NULL, APL_DATE_LEN);
			l_i_refno = 0;
			int_l_i_qty   = 0;
			l_i_srlno = 0;
			l_i_accst = 0;

			if (chr_l_dec == 1)
			{
				EXEC SQL FETCH trdreg_cur1 INTO 	:chr_l_h_refno_A:l_i_refno,
															:l_h_quantity_a:int_l_i_qty,
															:l_h_pend_reg_qty:l_i_pendregqty,
															:l_h_dl_completeqty:l_i_mcomplqty,
															:l_h_complquantity:l_i_complqty ;
			}
			else
			{
				EXEC SQL FETCH trdreg_cur2 INTO 	:chr_l_h_refno_A:l_i_refno,
															:l_h_quantity_a:int_l_i_qty,
															:l_h_pend_reg_qty:l_i_pendregqty,
															:l_h_dl_completeqty:l_i_mcomplqty,
															:l_h_complquantity:l_i_complqty ;
			}
	
			IS_ANY_ORA_ERROR
	
			if (APL_ZERO_RESULT_SET) break;

			

			EXEC SQL SELECT srl_no, access_stamp
			INTO 	:int_l_h_srlno:l_i_srlno,
					:chr_l_h_accst:l_i_accst
			FROM DL_REGDET
			WHERE client = RTRIM(:p_bcl_trf_struct_h->h_dl_client)
			AND   IDENTIY_NO = RTRIM(:chr_l_h_refno_A)
			AND   REG_ST_CD = :chr_l_pendreg_regstcode ;
	
			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_REC_NOTFND,
																"REg. Record",
																APL_NULL_STRING,
																APL_NULL_STRING);

			memset(l_reg_trf_struct_h, NULL, sizeof(DL_REGDET_STRUCT_H));
			strcpy(l_reg_trf_struct_h->h_dl_client, p_bcl_trf_struct_h->h_dl_client);
			strcpy(l_reg_trf_struct_h->h_indentity_no, chr_l_h_refno_A);
			l_reg_trf_struct_h->h_reg_st_cd[0] = DL_MARKCOMPL_REGSTCODE;
			l_reg_trf_struct_h->h_reg_st_cd[1] = '\0';
			strcpy(l_reg_trf_struct_h->h_txndate, chr_l_now);
			l_reg_trf_struct_h->h_qty = l_h_pend_reg_qty;
	
			memset(l_reqdetails_struct_ha_a, NULL, sizeof(REQDETAILS_STRUCT_H));
			l_reqdetails_struct_ha_a->h_element_cnt = 1;
			l_reqdetails_struct_ha_a->h_srl_no = &int_l_h_srlno;
			l_reqdetails_struct_ha_a->h_qty = &l_h_pend_reg_qty;
			l_reqdetails_struct_ha_a->h_access_stamp = (char *)calloc(1, APL_DATE_LEN);
			APL_MALLOC_FAIL(l_reqdetails_struct_ha_a->h_access_stamp);
			strcpy(l_reqdetails_struct_ha_a->h_access_stamp, chr_l_h_accst);
	
			if (APL_FAILURE == DL_Mod_DLRegStat( l_reg_trf_struct_h,
  		 		                              l_reqdetails_struct_ha_a,
  		    		                           p_intl_envdatastruct_h,
  		       		                        l_debug_info_ptr ))
			{
				APL_GOBACK_FAIL
			}

			

			if (l_h_dl_completeqty + l_h_complquantity == l_h_quantity_a)
			{
				EXEC SQL UPDATE DL_DEAL
				SET ALLOW_DROPDT = :chr_l_now
				WHERE client = RTRIM(:p_bcl_trf_struct_h->h_dl_client)
				AND	IDENTIY_NO   = RTRIM(:chr_l_h_refno_A) ;
	
				IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET(	ERR_DEAL_NF,
																	p_bcl_trf_struct_h->h_dl_client,
																	chr_l_h_refno_A,
																	APL_NULL_STRING );
			}
		}

		if (chr_l_dec == 1)
		{
			EXEC SQL CLOSE trdreg_cur1;
		}
		else
		{
			EXEC SQL CLOSE trdreg_cur2;
		}
	
		IS_ANY_ORA_ERROR
	}

	

	if (APL_FAILURE == CR_Rtv_TrdBkCl(	p_bcl_trf_struct_h,
													'R',
													chr_l_now,
													p_intl_envdatastruct_h,
													l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	if (APL_FAILURE == CR_Rtv_TrdBkCl(	p_bcl_trf_struct_h,
													'D',
													chr_l_now,
													p_intl_envdatastruct_h,
													l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}

	
	
	APL_GOBACK_SUCCESS

   RETURN_SUCCESS :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Leaving Function CR_Mod_BkCl with success\n",
							NULL,
							NULL);
		}
      return(APL_SUCCESS);

   RETURN_FAILURE :
		APL_IF_DEBUG
		{
			CO_ProcMonitor(	APL_OUT_FILE, 
							"Leaving Function CR_Mod_BkCl with errors\n",
							NULL,
							NULL);
		}
      return(APL_FAILURE);

}
