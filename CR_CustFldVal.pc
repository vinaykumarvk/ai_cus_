

   
   
   
   
   
   
   
   
   
   
   
   




#include "CR_Common.h"
#include "MS_Swift.h"
#include "IV_Control_A.h"
#include "DL_Interface.h"
#include "CO_HostStructdef.h"

#define   DEAL_REPAIR_SEQNAME  		"INMTRADEREP"
#define	 DEAL_PASSREFNO_SEQNAME 	"INMTRADEREF"
#define	 REFNO_PAD_CHAR				'0'
#define 	 DUMMY_ACCOUNT_NO						"991566"
#define	 APL_REFNO_LENGTH 				17
#define	 SETTLEMENT 					6       			


#define	 REJ_REASN_LEN 				MSG_LENGTH	


#define  I_BROKERNO_LEN		12
#define  I_CLI_CLASS_LEN 	3
#define  I_STREGNO_LEN		21
#define  I_LEN_S           20
#define  I_LEN_QTY         30


#define  S_MOLRDEALTYP_RFBR    "02"
#define  S_MOLRDEALTYP_RFRG		"07"
#define  S_MOLRDEALTYP_RVPBR	"02"
#define  S_MOLRDEALTYP_RVPRG   "04"
#define  S_MOLRDEALTYP_DF 		"06"
#define  S_MOLRDEALTYP_DVPBR	"01"
#define  S_MOLRDEALTYP_DVPRG   "03"

EXEC SQL INCLUDE SQLCA;

extern int int_g_srl_no;
extern char chr_g_msg_no[];
extern char chr_g_msgfile_name[];
extern char chr_g_msg_sts[];
extern char chr_g_settle_dt[];          
extern char chr_g_new_msg_no[];
extern char chr_g_addinfo[];
extern int  int_g_seq_num ;
extern char chr_g_sfe_refno[]; 
extern char chr_g_unique_ref_num[]; 
extern int  int_l_count_rep_flg ;
extern char chr_l_tmplogfilename5[]   ;
extern char chr_l_tmplogfilename2[]   ;
extern char chr_l_tmplogfilename3[]   ;
extern char chr_l_tmplogfilename4[]   ;

#ifdef EMU_PROCESSING
	extern int int_g_emutransperiod;
#endif




int  CR_Proc_DecodeDt(char				*p_dt,
	     				char				*p_ret_date,
						DEBUG_INFO_STRUCT_H	**l_debug_info_ptr)
{



	char	chr_h_date[7]							= APL_NULL_STRING;
	char	chr_h_ret_date[APL_DATE_LEN]		= APL_NULL_STRING;

	EXEC SQL BEGIN DECLARE SECTION;

	EXEC SQL VAR chr_h_ret_date IS STRING;
	EXEC SQL VAR chr_h_date IS STRING;
	EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

	memset(chr_h_ret_date,APL_NULL_CHAR , APL_DATE_LEN);
	memset(chr_h_date,APL_NULL_CHAR , 7);

	printf("the p_dt coming in is actually %s \n",p_dt);
	strcpy(chr_h_date,p_dt);


	EXEC SQL SELECT TO_CHAR(TO_DATE(:chr_h_date,'RRMMDD'),'DD/MM/YYYY')
            INTO  :chr_h_ret_date
            FROM DUAL;

   IS_ANY_ORA_ERROR


	

	

	
   printf("the chr_h_ret_date is %s\n",chr_h_ret_date);

   strcat(chr_h_ret_date," 12:00:00");

   printf("the chr_h_ret_date is %s\n",chr_h_ret_date);

   strcpy(p_ret_date , chr_h_ret_date);

   APL_GOBACK_SUCCESS;

	
	RETURN_FAILURE:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,
					"Exiting out of IBDbDecodeSettlementDateFn unsuccessfully\n",
					NULL,
					NULL);
	}
	return (APL_FAILURE);


	RETURN_SUCCESS:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,
					"Exiting out of IBDbDecodeSettlementDateFn successfully\n",
					NULL,
					NULL);
	}
	return (APL_SUCCESS);
}




int	MS_Chk_SWFTMsg(MS_INC_MSG_STRUCT_H			p_ms_inc_msg_struct_h,
							  int						p_no_of_deal,	
							  char					*chr_p_client,
							  char					*p_correct_msg,
							  DEBUG_INFO_STRUCT_H			**l_debug_info_ptr)
{



char	chr_h_correct_msg[2]		= APL_NULL_STRING;

EXEC SQL BEGIN DECLARE SECTION;
char	chr_h_inst_client[APL_CLIENT_LENGTH];
char	h_dl_client[APL_CLIENT_LENGTH];
char	h_indentity_no[APL_TXNREFNO_LEN];
int	int_h_count        = 0;
int	int_h_count1        = 0;
short	i_inst_account = 0;
short	i_dl_client 		= 0;
short i_indentity_no 			= 0;

EXEC SQL VAR chr_h_inst_client IS STRING;
EXEC SQL VAR h_dl_client 		 IS STRING;
EXEC SQL VAR h_indentity_no			 IS STRING;
struct	sqlca sqlca;
EXEC SQL END DECLARE SECTION;

	#ifdef APL_THREADS
		APL_SET_CONTEXT
		EXEC SQL CONTEXT USE :my_ctx_local;
	#endif

strcpy(h_dl_client, chr_p_client);

if (!strcmp(p_ms_inc_msg_struct_h.indentity_no,APL_NULL_STRING) )
{
	strcpy(chr_h_correct_msg,"F");
}
else
{
	strcpy(chr_h_correct_msg,"T");
}
strcpy(h_indentity_no,p_ms_inc_msg_struct_h.indentity_no);

if (p_no_of_deal > 1)
{
	

	strcpy(chr_h_inst_client,p_ms_inc_msg_struct_h.inst_client);

	EXEC SQL SELECT COUNT(*) 
						INTO		:int_h_count
						FROM DL_DEAL
				WHERE CLIENT 		= :chr_h_inst_client:i_inst_account 
						AND IDENTIY_NO 	= :h_indentity_no:i_indentity_no;

	IS_ANY_ORA_ERROR


	EXEC SQL SELECT COUNT(*)
						INTO :int_h_count1
						FROM DL_DEALREPAIR
				WHERE CLIENT = :chr_h_inst_client:i_inst_account
						AND IDENTIY_NO = :h_indentity_no:i_indentity_no;
	IS_ANY_ORA_ERROR

}
else
{
		
	EXEC SQL SELECT COUNT(*) 
						INTO		:int_h_count
						FROM DL_DEAL
				WHERE CLIENT 		= :h_dl_client:i_dl_client 
						AND IDENTIY_NO 	= :h_indentity_no:i_indentity_no;

	IS_ANY_ORA_ERROR

	EXEC SQL SELECT COUNT(*) 
						INTO		:int_h_count1
						FROM DL_DEALREPAIR
				WHERE CLIENT 		= :h_dl_client:i_dl_client 
						AND IDENTIY_NO 	= :h_indentity_no:i_indentity_no;

	IS_ANY_ORA_ERROR
}

	if (int_h_count == 0 && int_h_count1 == 0)
	{
		strcpy(chr_h_correct_msg,"T");
	}
	else if (int_h_count != 0 || int_h_count1 != 0)
	{
		strcpy(chr_h_correct_msg,"F");
	}

	strcpy(p_correct_msg,chr_h_correct_msg);

	

	if ( int_h_count1 )
	{
		APL_GOBACK_FAIL
	}

	APL_GOBACK_SUCCESS

	RETURN_FAILURE:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,
					"Exiting out of MS_Chk_SWFTMsg unsuccessfully\n",
					NULL,
					NULL);
	}
	return (APL_FAILURE);

	RETURN_SUCCESS:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,
					"Exiting out of MS_Chk_SWFTMsg successfully\n",
					NULL,
					NULL);
	}
	return (APL_SUCCESS);
}



int   MS_Proc_SWFDLAdd(int                   p_no_of_deal,
                    MS_INC_MSG_STRUCT_H          *p_ms_inc_msg_struct_h,
						  MS_REP_STRUCT_H		**p_ms_rep_struct_h,
						  MS_INC_LINKINFO_STRUCT_H    **p_ms_inc_linkinfo_struct_h,	
						  double						p_tot_instqty,		
						  FILE						*fl_userlog,	
						  FILE						*p_fl_userlog,	
						  char						*chr_fl_name,
						  FILE						*fl_repairrpt,
						  char						*p_mesg_body,
						  INTL_ENV_DATA_STRUCT_H		*p_intlenv_data_struct_h,
                    DEBUG_INFO_STRUCT_H          **l_debug_info_ptr
                     )
{

	

	char				chr_h_passrefno[APL_TXNREFNO_LEN]	=  APL_NULL_STRING;
	int				i = 0;
	char				chr_l_inst_trcode[2];
	char				chr_l_pass_trcode[2];
	char				chr_rep_str[3]			= APL_NULL_STRING;
	char				chr_rep_desc[41]		= APL_NULL_STRING;
	char			   task_desc[61]		= APL_NULL_STRING;
	MS_INC_LINKINFO_STRUCT_H         *h_inc_linkage_info = (MS_INC_LINKINFO_STRUCT_H *)NULL;

	strcpy(p_intlenv_data_struct_h->h_mode, APL_FUNC_INPUT);
	strcpy(p_intlenv_data_struct_h->processtion, "Trade Input");
	strcpy(p_intlenv_data_struct_h->auth_req, "Y");
	strcpy(p_intlenv_data_struct_h->usr, "SYSTEM");
	strcpy(p_intlenv_data_struct_h->subprocess,APL_NULL_STRING);
	h_inc_linkage_info	=	*p_ms_inc_linkinfo_struct_h; 
	
	if (p_no_of_deal > 1)
	{
		
		

	   if (APL_FAILURE == DL_Mod_CnslDLInstPrty( *p_ms_inc_msg_struct_h,
															  &h_inc_linkage_info,	
															  p_tot_instqty,
															  fl_userlog,	
															  p_fl_userlog,	
															  fl_repairrpt,
															  chr_fl_name,
															  p_mesg_body,
															  p_intlenv_data_struct_h,
															  l_debug_info_ptr															  																	)	)
   	{
      	fprintf(fl_userlog,"Failed to generate consolidated trade\n");
      	APL_GOBACK_FAIL
		}

		if (VAL_DELIVER_DEAL(p_ms_inc_msg_struct_h->h_deal_code[0]) )
   	{
     	 
     	 chr_l_inst_trcode[0] = DEALCD_RF;

	    
   	 chr_l_pass_trcode[0] = DEALCD_DF;
   	}
   	else
   	{
      	
      	chr_l_inst_trcode[0] = DEALCD_DF;

	      
   	   chr_l_pass_trcode[0] = DEALCD_RF;
   	}
		chr_l_pass_trcode[1] = '\0';
		chr_l_inst_trcode[1] = '\0';

 	   for (i =0; i < p_no_of_deal; i++)
   	{
      	
      	
	      

  		   if (APL_FAILURE == MS_Rtv_RefNo_B(chr_h_passrefno,
														l_debug_info_ptr	))
      	{
         	fprintf(APL_OUT_FILE,"Failed to create identity number\n");
         	APL_GOBACK_FAIL;
      	}

			if (APL_FAILURE == DL_Mod_SubDLInstPrty(	*p_ms_inc_msg_struct_h,
																chr_l_inst_trcode,
																chr_h_passrefno,
																p_ms_rep_struct_h,
																i,
																fl_userlog,
																p_fl_userlog,
																fl_repairrpt,
																chr_fl_name,
																p_mesg_body,
																p_intlenv_data_struct_h,
																l_debug_info_ptr	))
      	{
         	fprintf(fl_userlog,"Failed to create sub trades\n");
         	APL_GOBACK_FAIL;
      	}

   	   if (APL_FAILURE == DL_Mod_PassSubDL(*p_ms_inc_msg_struct_h,
																chr_l_pass_trcode,
																chr_h_passrefno,
																p_ms_rep_struct_h,
																i,
																fl_userlog,
																p_fl_userlog,
																fl_repairrpt,
																chr_fl_name,
																p_intlenv_data_struct_h,
																l_debug_info_ptr 	))
      	{
         	fprintf(fl_userlog,"Failed to create passenger sub trade\n");
         	APL_GOBACK_FAIL;
      	}
   	}
	} 		
	else
	{
   	
		

 	  if (APL_FAILURE == DL_Mod_SingDLInstPrty(  *p_ms_inc_msg_struct_h,
																p_ms_rep_struct_h,
																&h_inc_linkage_info,
      	                                       fl_userlog,
      	                                       p_fl_userlog,
																fl_repairrpt,
																chr_fl_name,
																p_mesg_body,
         	                                    p_intlenv_data_struct_h,
            	                                 l_debug_info_ptr ))
   	{	
      	fprintf(fl_userlog,"Failed to create single trade\n");
      	APL_GOBACK_FAIL;
   	}
	}

	APL_GOBACK_SUCCESS

	

 	RETURN_FAILURE:
	{
	  APL_IF_DEBUG
		{
		  CO_ProcMonitor(p_fl_userlog, "Exiting out of MS_Proc_SWFDLAdd unsuccessfully\n",
					  NULL,NULL);
		}
	  return APL_FAILURE;
	}

   RETURN_SUCCESS:
	{
	  APL_IF_DEBUG
		{
		  CO_ProcMonitor(p_fl_userlog, "Exiting out of MS_Proc_SWFDLAdd sucessfully\n",
					  NULL,NULL);
		}
		return APL_SUCCESS;
	}

}



int   DL_Mod_CnslDLInstPrty( MS_INC_MSG_STRUCT_H        p_ms_inc_msg_struct_h,
									 MS_INC_LINKINFO_STRUCT_H		 **p_ms_inc_linkinfo_struct_h,
									 double 					p_tot_instqty,	
                           FILE                 *fl_userlog,
                           FILE                 *p_fl_userlog,
									FILE						*fl_repairrpt,
									char						*chr_fl_name,
									char						*p_mesg_body,
                           INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
                            DEBUG_INFO_STRUCT_H        **l_debug_info_ptr   )
{


	

	char  chr_h_autorpr[2]     = APL_NULL_STRING;
	char  chr_l_is_rpr[2]       = APL_NULL_STRING;

	int   int_l_rpr_seq_num     = 0;
	int	int_retstat 				= 0;
	SYS_DL_DEAL_STRUCT_H     *l_sys_dl_deal_struct_ha;
	PRO_GSEQNUM_STRUCT_H		*l_progseqnum_struct_h		= NULL;
	DL_DEALREPAIR_STRUCT_H	l_dl_dealrepair_struct_h;
	DL_MSGLINK_STRUCT_H			l_dl_msglink_struct_h;
	MS_INC_LINKINFO_STRUCT_H         *h_inc_linkage_info = (MS_INC_LINKINFO_STRUCT_H *)NULL;
	char h_dl_client[APL_CLIENT_LENGTH];
	char chr_h_inst_client[APL_CLIENT_LENGTH];
	char h_domcpclt_cd[APL_CLIENT_LENGTH];
	char h_instr_code[APL_INSTRUMENTCODE_LEN];
	char h_indentity_no[APL_TXNREFNO_LEN];
	double h_instquantity = 0.0;
	double h_amt = 0.0;
	char h_dealcd[2] = APL_NULL_STRING ;
	char h_dlt[APL_DATE_LEN];
	char h_setldt[APL_DATE_LEN];
	char h_instr_name[121];
	char chr_h_domcpacname[66];
   
	char h_countclt[APL_COUNTACC_LEN];
	char h_ccy[APL_CCYCODE_LEN];		
	char h_countcltnm[66];
	char h_info[266];
	char h_clientof[36];
	char	chr_h_system_date[APL_DATE_LEN];
	int int_l_txn_type=0;    
	char chr_l_unique_ref_num[APL_UNIQUE_REF_NUM_LEN]=APL_NULL_STRING;    
	char chr_l_trd_locn[APL_LOCNCODE_LENGTH];
	

	l_progseqnum_struct_h = (PRO_GSEQNUM_STRUCT_H *)calloc(1,sizeof(PRO_GSEQNUM_STRUCT_H) );
	APL_MALLOC_FAIL(l_progseqnum_struct_h);

	l_sys_dl_deal_struct_ha= (SYS_DL_DEAL_STRUCT_H *)calloc(1,sizeof(SYS_DL_DEAL_STRUCT_H) );
	APL_MALLOC_FAIL(l_sys_dl_deal_struct_ha);

	EXEC SQL VAR chr_l_trd_locn IS STRING;

	memset(l_sys_dl_deal_struct_ha,NULL,sizeof(SYS_DL_DEAL_STRUCT_H));
	memset(&l_dl_msglink_struct_h,NULL,sizeof(DL_MSGLINK_STRUCT_H));
	h_inc_linkage_info = *p_ms_inc_linkinfo_struct_h;
	
	memset(chr_l_trd_locn,APL_NULL_CHAR,APL_LOCNCODE_LENGTH);

	

		strcpy(chr_h_inst_client, p_ms_inc_msg_struct_h.inst_client);
		strcpy(h_dealcd , p_ms_inc_msg_struct_h.h_deal_code);
		strcpy(h_domcpclt_cd, p_ms_inc_msg_struct_h.domestic_cpclt);
		strcpy(h_instr_code , p_ms_inc_msg_struct_h.instr_code);
		strcpy(h_indentity_no, p_ms_inc_msg_struct_h.indentity_no);
		h_instquantity = p_tot_instqty;
		h_amt = p_ms_inc_msg_struct_h.amount;
		strcpy(h_dlt, p_ms_inc_msg_struct_h. dl_dt);
		strcpy(h_setldt, p_ms_inc_msg_struct_h. setl_dt);
		strcpy(h_instr_name, p_ms_inc_msg_struct_h.instr_name);
		strcpy(chr_h_domcpacname, p_ms_inc_msg_struct_h.domcpclt_cd_cname);
		strcpy(h_ccy, p_ms_inc_msg_struct_h. currency_code);
		strcpy(h_countclt, p_ms_inc_msg_struct_h.cp_clt);

		strcpy(h_countcltnm, p_ms_inc_msg_struct_h.countclt_cname);
		strcpy(h_clientof, p_ms_inc_msg_struct_h.clientof);
		strcpy(h_info, p_ms_inc_msg_struct_h.info);
		
		strcpy(l_sys_dl_deal_struct_ha->h_ex_arena,p_ms_inc_msg_struct_h.ex_arena);
		

		
		strcpy(l_sys_dl_deal_struct_ha->h_locchng_flg,p_ms_inc_msg_struct_h.loc_chng_ind);
		

		if (  APL_FAILURE == MS_Mod_TrdDef(chr_h_inst_client,	
													  h_dealcd,
													  h_domcpclt_cd,
													  h_instr_code,
													  h_indentity_no,
													  h_instquantity,
													  h_ccy,
													  h_dlt,
													  h_setldt,
													  h_info,
													  h_countclt,
													  h_countcltnm,
													  h_clientof,
													  h_amt,
													  NULL,
													  NULL,
                     		         	  l_sys_dl_deal_struct_ha,
													  fl_userlog,
													  p_intlenv_data_struct_h,	
                             				  l_debug_info_ptr)  )
		{
    		fprintf(fl_userlog,"Failed To Set The  Values for TRADE STRUCTURE\n");
		}

            if(p_ms_inc_msg_struct_h.h_stld_loc   == 1)
            {
               EXEC SQL SELECT FIELD_VAL INTO :chr_l_trd_locn
                     FROM PRO_GSSPLVAL
                     WHERE MAIN_FUN= 'TRADE_MAINT'
                     AND SUB_PROCESS ='STOCK_LEND_LOCN'
                     AND NATION=:g_mt_commonsys_params_struct_h.nation_code;
               IS_ANY_ORA_ERROR
               strcpy(l_sys_dl_deal_struct_ha->h_loccode ,chr_l_trd_locn);
            }



		int_l_rpr_seq_num = 0;

		

		int_l_txn_type=SETTLEMENT;
      if (MS_Rtv_RefNo_A(int_l_txn_type,chr_l_unique_ref_num,l_debug_info_ptr) == APL_FAILURE)
         {
             CO_ProcMonitor(APL_OUT_FILE,"Failure from GenUniqRefNum", NULL, p_intlenv_data_struct_h);
             APL_GOBACK_FAIL;
         }
         strcpy(l_sys_dl_deal_struct_ha->h_uniq_ident_no,chr_l_unique_ref_num);
			strcpy(chr_g_unique_ref_num,chr_l_unique_ref_num);

		printf("ISO6.8-002 1. : The unique refnum is : %s\n",chr_l_unique_ref_num);

		strcpy(l_sys_dl_deal_struct_ha->h_related_indentity_no,p_ms_inc_msg_struct_h.h_related_indentity_no);

      
		if (APL_FAILURE == DL_Proc_Trd(l_sys_dl_deal_struct_ha,
   		                           &int_l_rpr_seq_num,
      		                        p_intlenv_data_struct_h,
         		                     l_debug_info_ptr) )
		{	
					
			fprintf(fl_repairrpt,"%9sTRADE REJECTION REPORT FOR MESSAGE FILE %s \n"," ",chr_fl_name);
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
			fprintf(fl_repairrpt,"%s\n\n", p_mesg_body);
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
			fprintf(fl_repairrpt,"Errors While Genrating Trade For Message File %s\n",chr_fl_name);

		 	if (APL_FAILURE == CO_ProcMonitor(fl_repairrpt,
												  "ERRORS WHILE GENERATING TRADE:" ,
												  l_debug_info_ptr,
												  NULL) )
			{
				fprintf(fl_userlog,"Failed To Write to repair report\n");
				APL_GOBACK_FAIL
			}	
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");

			
		
			memset(l_progseqnum_struct_h,NULL,sizeof(PRO_GSEQNUM_STRUCT_H));
			memset(&l_dl_dealrepair_struct_h,NULL,sizeof(DL_DEALREPAIR_STRUCT_H));
	
			strcpy(l_progseqnum_struct_h->sequencename ,DEAL_REPAIR_SEQNAME);

			int_l_rpr_seq_num = CO_RtvNxtSeqNum(l_progseqnum_struct_h ,
													  l_debug_info_ptr);
	
			if (APL_FAILURE == int_l_rpr_seq_num )
			{
				fprintf(fl_userlog,"Failed To Get The Next Sequence Number For repair sequence number\n");
				APL_GOBACK_FAIL
			} 

			l_dl_dealrepair_struct_h.h_dlrep_sequencenum = int_l_rpr_seq_num;
	
			if (APL_FAILURE == CO_RtvSysDtTime(chr_h_system_date,
																 l_debug_info_ptr) )
			{	
				fprintf(fl_userlog,"failed To get System Date\n");
				APL_GOBACK_FAIL
			}

			

			strcpy(l_dl_dealrepair_struct_h.h_dl_client, chr_h_inst_client);
			strcpy(l_dl_dealrepair_struct_h.h_indentity_no , h_indentity_no);
			strcpy(l_dl_dealrepair_struct_h.h_dealcd,h_dealcd);
			strcpy(l_dl_dealrepair_struct_h.h_dlt, h_dlt); 	 
			strcpy(l_dl_dealrepair_struct_h.h_setldt, h_setldt);
			l_dl_dealrepair_struct_h.h_qty	= 	h_instquantity;
			strcpy(l_dl_dealrepair_struct_h.h_instr_code, h_instr_code);
			strcpy(l_dl_dealrepair_struct_h.h_currencycode, l_sys_dl_deal_struct_ha->h_currencycode);
			strcpy(l_dl_dealrepair_struct_h.h_domcpclt_cd, h_domcpclt_cd);
	
			

			strcpy(l_dl_dealrepair_struct_h.h_classofdl,l_sys_dl_deal_struct_ha->h_classofdl);
			l_dl_dealrepair_struct_h.h_pr = 0.0; 

			strcpy(l_dl_dealrepair_struct_h.h_ex_arena , l_sys_dl_deal_struct_ha->h_ex_arena);
			strcpy(l_dl_dealrepair_struct_h.h_isspotdl , l_sys_dl_deal_struct_ha->h_isspotdl);
			strcpy(l_dl_dealrepair_struct_h.h_entry , l_sys_dl_deal_struct_ha->h_entry);
			strcpy(l_dl_dealrepair_struct_h.h_newdt , chr_h_system_date);	
			strcpy(l_dl_dealrepair_struct_h.h_maker,"SYSTEM");
			strcpy(l_dl_dealrepair_struct_h.h_maker_dt, chr_h_system_date);
			strcpy(l_dl_dealrepair_struct_h.h_access_stamp, chr_h_system_date);
			

			strcpy(l_dl_dealrepair_struct_h.h_deal_status ,STATUS_UAUTH);
		
			l_dl_dealrepair_struct_h.h_amt = h_amt;
			strcpy(l_dl_dealrepair_struct_h.h_domcp_custodyclt, l_sys_dl_deal_struct_ha->h_domcp_custodyclt);
			strcpy(l_dl_dealrepair_struct_h.h_countclt, l_sys_dl_deal_struct_ha->h_countclt);
			strcpy(l_dl_dealrepair_struct_h.h_countcltnm, l_sys_dl_deal_struct_ha->h_countcltnm);
			strcpy(l_dl_dealrepair_struct_h.h_clientof,p_ms_inc_msg_struct_h.clientof); 	
			strcpy(l_dl_dealrepair_struct_h.h_info1, p_ms_inc_msg_struct_h.info);
			strcpy(l_dl_dealrepair_struct_h.h_fx_reqd, l_sys_dl_deal_struct_ha->h_fx_reqd);
			

			strcpy(l_dl_dealrepair_struct_h.h_instr_name,p_ms_inc_msg_struct_h.instr_name); 	
			strcpy(l_dl_dealrepair_struct_h.h_cltname,p_ms_inc_msg_struct_h.inst_clnt_clr_name); 	
			strcpy(l_dl_dealrepair_struct_h.h_domesticcp_clr_name,p_ms_inc_msg_struct_h.domcpclt_cd_cname); 	
				
	
			strcpy(l_dl_dealrepair_struct_h.h_loccode,l_sys_dl_deal_struct_ha->h_loccode);
			strcpy(l_dl_dealrepair_struct_h.h_pos_stat,l_sys_dl_deal_struct_ha->h_pos_stat); 
         strcpy(l_dl_dealrepair_struct_h.h_cash_client,l_sys_dl_deal_struct_ha->h_cash_client);

      
      strcpy(l_dl_dealrepair_struct_h.h_inter_med_person,l_sys_dl_deal_struct_ha->h_inter_med_person);
      strcpy(l_dl_dealrepair_struct_h.h_inter_med_personnm,l_sys_dl_deal_struct_ha->h_inter_med_personnm);
      
      
      strcpy(l_dl_dealrepair_struct_h.h_ex_arena,l_sys_dl_deal_struct_ha->h_ex_arena);
      
      strcpy(l_dl_dealrepair_struct_h.h_fxccy,l_sys_dl_deal_struct_ha->h_fxccy); 
      strcpy(l_dl_dealrepair_struct_h.h_locindentity_no,l_sys_dl_deal_struct_ha->h_locindentity_no); 
 	  
		printf("\n***************************\n manual_ind_dl_flg = :%s: loc_chng_ind = :%s: \n", p_ms_inc_msg_struct_h.manual_ind_dl_flg, p_ms_inc_msg_struct_h.loc_chng_ind );
   	if (strcmp(p_ms_inc_msg_struct_h.manual_ind_dl_flg,"Y")==0 && strcmp(p_ms_inc_msg_struct_h.loc_chng_ind, "M")==0)
   	{
      	strcpy(l_dl_dealrepair_struct_h.h_entry,"Y");   
   	}
   	else if (strcmp(p_ms_inc_msg_struct_h.manual_ind_dl_flg,"Y")==0 && strcmp(p_ms_inc_msg_struct_h.loc_chng_ind, "N")==0)
   	{
      	strcpy(l_dl_dealrepair_struct_h.h_entry,"M");   
   	}
		else if (strcmp(p_ms_inc_msg_struct_h.loc_chng_ind, "M")==0)
   	{
      	strcpy(l_dl_dealrepair_struct_h.h_entry,"Z");   
   	}
   	else
      	strcpy(l_dl_dealrepair_struct_h.h_entry,"S");   

			printf("\n manual_ind_dl_flg = :%s: loc_chng_ind = :%s: and hence h_entry = :%s: \n", p_ms_inc_msg_struct_h.manual_ind_dl_flg, p_ms_inc_msg_struct_h.loc_chng_ind, l_dl_dealrepair_struct_h.h_entry );

			

			strcpy(l_dl_dealrepair_struct_h.h_uniq_ident_no,chr_l_unique_ref_num);
		printf("ISO6.8-002 1. : The unique refnum is : %s\n",chr_l_unique_ref_num);
		strcpy(chr_g_unique_ref_num,chr_l_unique_ref_num);

			

		strcpy(l_dl_dealrepair_struct_h.h_related_indentity_no,p_ms_inc_msg_struct_h.h_related_indentity_no);

			fprintf(fl_userlog,"Inserting Message Into TRADE REPAIR\n");

			if (APL_FAILURE == DL_Mod_TrdRprNew(l_dl_dealrepair_struct_h,
															&int_retstat,
															fl_userlog,
															l_debug_info_ptr) )
			{		
				CO_InsertErr(l_debug_info_ptr,
									DB_ERR_NO,
									"CTRADEREPAIR",
									APL_NULL_STRING,
									APL_NULL_STRING,
									__LINE__,
									__FILE__);
				fprintf(fl_userlog,"Fatal Error In CTRADEREPAIR\n");
				APL_GOBACK_FAIL
			}
			strcpy(l_dl_msglink_struct_h.h_dl_client,l_dl_dealrepair_struct_h.h_dl_client);
			strcpy(l_dl_msglink_struct_h.h_indentity_no,l_dl_dealrepair_struct_h.h_indentity_no);
			strcpy(l_dl_msglink_struct_h.h_msg_in_out_ind,"I");
			strcpy(l_dl_msglink_struct_h.h_swift_msg_no,chr_g_new_msg_no);
			if (APL_FAILURE == CO_RtvMachDtTime( l_dl_msglink_struct_h.h_new_dt, l_debug_info_ptr ))
			{
				APL_GOBACK_FAIL
			}
			
			strcpy(l_dl_msglink_struct_h.h_information,chr_g_addinfo);
			l_dl_msglink_struct_h.h_sequence_num=int_g_seq_num;
		 l_dl_msglink_struct_h.h_dlrep_sequencenum=int_l_rpr_seq_num;
		strncpy(l_dl_msglink_struct_h.h_message_det_a,p_mesg_body,2000);
            l_dl_msglink_struct_h.h_message_det_a[2000]=APL_NULL_CHAR;
            if (strlen(p_mesg_body) >2000)
            {
               strncpy(l_dl_msglink_struct_h.h_message_det_b,p_mesg_body+2000,2000);
               l_dl_msglink_struct_h.h_message_det_b[2000]=APL_NULL_CHAR;
            }
            if (strlen(p_mesg_body) >4000)
            {
               strncpy(l_dl_msglink_struct_h.h_message_det_c,p_mesg_body+4000,2000);
               l_dl_msglink_struct_h.h_message_det_c[2000]=APL_NULL_CHAR;
            }
            if (strlen(p_mesg_body) >6000)
            {
               strncpy(l_dl_msglink_struct_h.h_message_det_d,p_mesg_body+6000,2000);
               l_dl_msglink_struct_h.h_message_det_d[2000]=APL_NULL_CHAR;
            }
            if (strlen(p_mesg_body) >8000)
            {
               strncpy(l_dl_msglink_struct_h.h_message_det_e,p_mesg_body+8000,2000);
               l_dl_msglink_struct_h.h_message_det_e[2000]=APL_NULL_CHAR;
            }

          strcpy(l_dl_msglink_struct_h.h_place_cd,p_ms_inc_msg_struct_h.place_cd);
          strcpy(l_dl_msglink_struct_h.h_description,p_ms_inc_msg_struct_h.description);
          strcpy(l_dl_msglink_struct_h.h_psetparty,p_ms_inc_msg_struct_h.psetparty);




			if(APL_FAILURE==DL_Mod_DLLinkNew(&l_dl_msglink_struct_h,l_debug_info_ptr))
			{
				fprintf(fl_userlog,"Failed To Insert into CMSGLINK Table\n");
			}
         if(APL_FAILURE == DL_Mod_DLLinkInfoNew(&h_inc_linkage_info,
                                          int_g_seq_num,
                                          p_ms_inc_msg_struct_h.count,
                                          l_debug_info_ptr))
         {
            fprintf(fl_userlog,"Failed To Insert into CMSGLINKDET Table\n");
         }
			

		}
		else
		{  
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
			fprintf(fl_repairrpt,"\nSuccessfully Generated A Trade With Account %s And Reference Number %s\n",l_sys_dl_deal_struct_ha->h_dl_client, l_sys_dl_deal_struct_ha->h_indentity_no); 
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
		
			strcpy(l_dl_msglink_struct_h.h_dl_client,chr_h_inst_client);
			strcpy(l_dl_msglink_struct_h.h_indentity_no,l_dl_dealrepair_struct_h.h_indentity_no);
			strcpy(l_dl_msglink_struct_h.h_msg_in_out_ind,"I");
			strcpy(l_dl_msglink_struct_h.h_swift_msg_no,chr_g_new_msg_no);
			if (APL_FAILURE == CO_RtvMachDtTime( l_dl_msglink_struct_h.h_new_dt, l_debug_info_ptr ))
			{
				APL_GOBACK_FAIL
			}
			
			strcpy(l_dl_msglink_struct_h.h_information,chr_g_addinfo);
			l_dl_msglink_struct_h.h_sequence_num=int_g_seq_num;
			l_dl_msglink_struct_h.h_dlrep_sequencenum=0;
			strncpy(l_dl_msglink_struct_h.h_message_det_a,p_mesg_body,2000);
            l_dl_msglink_struct_h.h_message_det_a[2000]=APL_NULL_CHAR;
            if (strlen(p_mesg_body) >2000)
            {
               strncpy(l_dl_msglink_struct_h.h_message_det_b,p_mesg_body+2000,2000);
               l_dl_msglink_struct_h.h_message_det_b[2000]=APL_NULL_CHAR;
            }
            if (strlen(p_mesg_body) >4000)
            {
               strncpy(l_dl_msglink_struct_h.h_message_det_c,p_mesg_body+4000,2000);
               l_dl_msglink_struct_h.h_message_det_c[2000]=APL_NULL_CHAR;
            }
            if (strlen(p_mesg_body) >6000)
            {
               strncpy(l_dl_msglink_struct_h.h_message_det_d,p_mesg_body+6000,2000);
               l_dl_msglink_struct_h.h_message_det_d[2000]=APL_NULL_CHAR;
            }
            if (strlen(p_mesg_body) >8000)
            {
               strncpy(l_dl_msglink_struct_h.h_message_det_e,p_mesg_body+8000,2000);
               l_dl_msglink_struct_h.h_message_det_e[2000]=APL_NULL_CHAR;
            }

	
          strcpy(l_dl_msglink_struct_h.h_place_cd,p_ms_inc_msg_struct_h.place_cd);
          strcpy(l_dl_msglink_struct_h.h_description,p_ms_inc_msg_struct_h.description);
          strcpy(l_dl_msglink_struct_h.h_psetparty,p_ms_inc_msg_struct_h.psetparty);

	
			if(APL_FAILURE==DL_Mod_DLLinkNew(&l_dl_msglink_struct_h,l_debug_info_ptr))
		   {
				 fprintf(fl_userlog,"Failed To Insert into CMSGLINK Table\n");
			}

         if(APL_FAILURE == DL_Mod_DLLinkInfoNew(&h_inc_linkage_info,
                                          int_g_seq_num,
                                          p_ms_inc_msg_struct_h.count,
                                          l_debug_info_ptr))
         {
            fprintf(fl_userlog,"Failed To Insert into CMSGLINKDET Table\n");
         }
			

         

         if (APL_FAILURE==EI_Mod_MQData(l_sys_dl_deal_struct_ha->h_dl_client,
                                        l_sys_dl_deal_struct_ha->h_indentity_no,
													 NULL,
													 NULL,
													 "B",
                                        l_debug_info_ptr))
               APL_GOBACK_FAIL

		}
		APL_GOBACK_SUCCESS

	

   RETURN_FAILURE:
   APL_IF_DEBUG
   {
      CO_ProcMonitor(p_fl_userlog,
               "Exiting out of MS_Proc_SWFDLAdd unsuccessfully\n",
               NULL,NULL);
   }
   return APL_FAILURE;

   RETURN_SUCCESS:
   APL_IF_DEBUG
   {
      CO_ProcMonitor(p_fl_userlog,
               "Exiting out of MS_Proc_SWFDLAdd sucessfully\n",
               NULL,NULL);
   }
   return APL_SUCCESS;
}


int	DL_Mod_SubDLInstPrty( MS_INC_MSG_STRUCT_H        p_ms_inc_msg_struct_h,
								char						*p_inst_trcode,
								char						*p_passrefno,
								MS_REP_STRUCT_H		**p_ms_rep_struct_h,
								int						i,
                        FILE                 *fl_userlog,
                        FILE                 *p_fl_userlog,
								FILE						*fl_repairrpt,
								char						*chr_fl_name,
								char						*p_mesg_body,
                        INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
                        DEBUG_INFO_STRUCT_H        **l_debug_info_ptr )
{
char  chr_h_autorpr[2]     = APL_NULL_STRING;
char  chr_l_is_rpr[2]       = APL_NULL_STRING;

int   int_l_rpr_seq_num     = 0;
SYS_DL_DEAL_STRUCT_H     *l_sys_dl_deal_struct_ha = NULL ;
PRO_GSEQNUM_STRUCT_H		*l_progseqnum_struct_h  = NULL;
DL_DEALREPAIR_STRUCT_H	l_dl_dealrepair_struct_h ;
int	int_retstat				= 0;

char	chr_h_system_date[APL_DATE_LEN];
char h_dl_client[APL_CLIENT_LENGTH];
char chr_h_inst_client[APL_CLIENT_LENGTH];
char h_domcpclt_cd[APL_CLIENT_LENGTH];
char h_instr_code[APL_INSTRUMENTCODE_LEN];
char h_indentity_no[APL_TXNREFNO_LEN];
double h_qty = 0.0;
double h_amt = 0.0;
char h_dealcd[2] = APL_NULL_STRING ;
char h_dlt[APL_DATE_LEN];
char h_setldt[APL_DATE_LEN];
char h_instr_name[121];
char chr_h_domcpacname[66];
char h_countclt[APL_CLIENT_LENGTH];
char h_ccy[APL_CCYCODE_LEN];		
char h_countcltnm[66];
char h_clientof[36];
char h_info[266];
int int_l_txn_type=0;    
char chr_l_unique_ref_num[APL_UNIQUE_REF_NUM_LEN]=APL_NULL_STRING;    
char chr_l_trd_locn[APL_LOCNCODE_LENGTH];

EXEC SQL VAR chr_l_trd_locn IS STRING;

	l_progseqnum_struct_h = (PRO_GSEQNUM_STRUCT_H *)calloc(1,sizeof(PRO_GSEQNUM_STRUCT_H) );
   APL_MALLOC_FAIL(l_progseqnum_struct_h);

   l_sys_dl_deal_struct_ha = (SYS_DL_DEAL_STRUCT_H *)calloc(1,sizeof(SYS_DL_DEAL_STRUCT_H) );
   APL_MALLOC_FAIL(l_sys_dl_deal_struct_ha);


memset(l_sys_dl_deal_struct_ha,NULL,sizeof(SYS_DL_DEAL_STRUCT_H));
memset(chr_l_trd_locn,APL_NULL_CHAR,APL_LOCNCODE_LENGTH);





		strcpy(chr_h_inst_client, p_ms_inc_msg_struct_h.inst_client);
		strcpy(h_dealcd , p_ms_inc_msg_struct_h.h_deal_code);
		strcpy(h_domcpclt_cd, p_ms_inc_msg_struct_h.domestic_cpclt);
		strcpy(h_instr_code , p_ms_inc_msg_struct_h.instr_code);
		strcpy(h_dlt, p_ms_inc_msg_struct_h. dl_dt);
		strcpy(h_setldt, p_ms_inc_msg_struct_h. setl_dt);
		strcpy(h_instr_name, p_ms_inc_msg_struct_h.instr_name);
		strcpy(chr_h_domcpacname, p_ms_inc_msg_struct_h.domcpclt_cd_cname);
		strcpy(h_ccy, p_ms_inc_msg_struct_h. currency_code);
		strcpy(h_countclt, p_ms_inc_msg_struct_h.cp_clt);

		strcpy(h_countcltnm, p_ms_inc_msg_struct_h.countclt_cname);
		strcpy(h_clientof, p_ms_inc_msg_struct_h.clientof);
		strcpy(h_info, p_ms_inc_msg_struct_h.info);
		
		strcpy(l_sys_dl_deal_struct_ha->h_ex_arena,p_ms_inc_msg_struct_h.ex_arena);
		

      
      strcpy(l_sys_dl_deal_struct_ha->h_locchng_flg,p_ms_inc_msg_struct_h.loc_chng_ind);
      

		h_qty = ( *p_ms_rep_struct_h + (i))->quantity; 
		h_amt = 0.0;

if (  APL_FAILURE == MS_Mod_TrdDef(chr_h_inst_client,	
											  p_inst_trcode,
											  h_domcpclt_cd,
											  h_instr_code,
											  p_passrefno,
											  h_qty,
											  h_ccy,
											  h_dlt,
											  h_setldt,
											  h_info,
											  h_countclt,
											  h_countcltnm,
											  h_clientof,
											  h_amt,
											  NULL,
											  NULL,
                              	  l_sys_dl_deal_struct_ha,
											  fl_userlog,
											  p_intlenv_data_struct_h,	
                             		  l_debug_info_ptr)  )
{
   fprintf(fl_userlog,"Failed To set The Default Values for TRADE STRUCTURE\n");
}


                 if(p_ms_inc_msg_struct_h.h_stld_loc   == 1)
                 {
                    EXEC SQL SELECT FIELD_VAL INTO :chr_l_trd_locn
                          FROM PRO_GSSPLVAL
                          WHERE MAIN_FUN= 'TRADE_MAINT'
                          AND SUB_PROCESS ='STOCK_LEND_LOCN'
                          AND NATION=:g_mt_commonsys_params_struct_h.nation_code;
                    IS_ANY_ORA_ERROR
                    strcpy(l_sys_dl_deal_struct_ha->h_loccode ,chr_l_trd_locn);
                 }
	
	int_l_rpr_seq_num = 0;
      

      int_l_txn_type=SETTLEMENT;
      if (MS_Rtv_RefNo_A(int_l_txn_type,chr_l_unique_ref_num,l_debug_info_ptr) == APL_FAILURE)
         {
             CO_ProcMonitor(APL_OUT_FILE,"Failure from GenUniqRefNum", NULL, p_intlenv_data_struct_h);
             APL_GOBACK_FAIL;
         }
         strcpy(l_sys_dl_deal_struct_ha->h_uniq_ident_no,chr_l_unique_ref_num);
			strcpy(chr_g_unique_ref_num,chr_l_unique_ref_num);

      
		printf("ISO6.8-002 1. : The unique refnum is : %s\n",chr_l_unique_ref_num);

		strcpy(l_sys_dl_deal_struct_ha->h_related_indentity_no,p_ms_inc_msg_struct_h.h_related_indentity_no);

	if (APL_FAILURE == DL_Proc_Trd(l_sys_dl_deal_struct_ha,
   	                           &int_l_rpr_seq_num,
      	                        p_intlenv_data_struct_h,
         	                     l_debug_info_ptr) )
	{
		
		
		
		fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
		fprintf(fl_repairrpt,"Errors While Generating Trade For Message File %s\n",chr_fl_name);
		
		 if (APL_FAILURE == CO_ProcMonitor(fl_repairrpt,
											  APL_NULL_STRING,
											  l_debug_info_ptr,
											  NULL) )
		{
			fprintf(fl_userlog,"Failed To Write to repair report\n");
			APL_GOBACK_FAIL
		}	
		fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");


	 	
   	memset(l_progseqnum_struct_h,NULL,sizeof(PRO_GSEQNUM_STRUCT_H));
   	memset(&l_dl_dealrepair_struct_h,NULL,sizeof(DL_DEALREPAIR_STRUCT_H));

	   strcpy(l_progseqnum_struct_h->sequencename ,DEAL_REPAIR_SEQNAME);

 	  int_l_rpr_seq_num = CO_RtvNxtSeqNum(l_progseqnum_struct_h ,
   	                                l_debug_info_ptr);

	  if (APL_FAILURE == int_l_rpr_seq_num )
   	{
      	fprintf(fl_userlog,"Failed To Get The Next Sequence Number For repair sequence number\n");
      	APL_GOBACK_FAIL
   	}


 	  l_dl_dealrepair_struct_h.h_dlrep_sequencenum = int_l_rpr_seq_num;
	
   	if (APL_FAILURE == CO_RtvSysDtTime(chr_h_system_date,
      	                                     l_debug_info_ptr) )
   	{	
      	fprintf(fl_userlog,"failed To get System Date\n");
      	APL_GOBACK_FAIL
   	}

		

 	  	strcpy(l_dl_dealrepair_struct_h.h_dl_client, chr_h_inst_client);
   	strcpy(l_dl_dealrepair_struct_h.h_indentity_no , p_passrefno);
   	strcpy(l_dl_dealrepair_struct_h.h_dealcd,p_inst_trcode);
   	strcpy(l_dl_dealrepair_struct_h.h_dlt, h_dlt);
  	 	strcpy(l_dl_dealrepair_struct_h.h_setldt, h_setldt);
   	l_dl_dealrepair_struct_h.h_qty   =  h_qty;
   	strcpy(l_dl_dealrepair_struct_h.h_instr_code, h_instr_code);
   	strcpy(l_dl_dealrepair_struct_h.h_currencycode, l_sys_dl_deal_struct_ha->h_currencycode);
   	strcpy(l_dl_dealrepair_struct_h.h_domcpclt_cd, h_domcpclt_cd);

		

 	  	strcpy(l_dl_dealrepair_struct_h.h_classofdl,l_sys_dl_deal_struct_ha->h_classofdl);
   	l_dl_dealrepair_struct_h.h_pr = 0.0;

	   strcpy(l_dl_dealrepair_struct_h.h_ex_arena , l_sys_dl_deal_struct_ha->h_ex_arena);
   	strcpy(l_dl_dealrepair_struct_h.h_isspotdl , l_sys_dl_deal_struct_ha->h_isspotdl);
   	strcpy(l_dl_dealrepair_struct_h.h_entry , l_sys_dl_deal_struct_ha->h_entry);
   	strcpy(l_dl_dealrepair_struct_h.h_newdt , chr_h_system_date);
   	strcpy(l_dl_dealrepair_struct_h.h_maker, "SYSTEM");
   	strcpy(l_dl_dealrepair_struct_h.h_maker_dt, chr_h_system_date);
   	strcpy(l_dl_dealrepair_struct_h.h_access_stamp, chr_h_system_date);
   	

		strcpy(l_dl_dealrepair_struct_h.h_deal_status ,STATUS_UAUTH);

		

 	   l_dl_dealrepair_struct_h.h_amt = h_amt;
   	strcpy(l_dl_dealrepair_struct_h.h_domcp_custodyclt, l_sys_dl_deal_struct_ha->h_domcp_custodyclt);
   	strcpy(l_dl_dealrepair_struct_h.h_countclt, l_sys_dl_deal_struct_ha->h_countclt);
   	strcpy(l_dl_dealrepair_struct_h.h_countcltnm, l_sys_dl_deal_struct_ha->h_countcltnm);
   	strcpy(l_dl_dealrepair_struct_h.h_clientof,p_ms_inc_msg_struct_h.clientof);
   	strcpy(l_dl_dealrepair_struct_h.h_info1, p_ms_inc_msg_struct_h.info);
   	strcpy(l_dl_dealrepair_struct_h.h_fx_reqd, l_sys_dl_deal_struct_ha->h_fx_reqd);
		

		strcpy(l_dl_dealrepair_struct_h.h_instr_name,p_ms_inc_msg_struct_h.instr_name); 	
		strcpy(l_dl_dealrepair_struct_h.h_cltname,p_ms_inc_msg_struct_h.inst_clnt_clr_name); 	
		strcpy(l_dl_dealrepair_struct_h.h_domesticcp_clr_name,p_ms_inc_msg_struct_h.domcpclt_cd_cname); 	
   	

	   strcpy(l_dl_dealrepair_struct_h.h_loccode,l_sys_dl_deal_struct_ha->h_loccode);
   	strcpy(l_dl_dealrepair_struct_h.h_pos_stat , l_sys_dl_deal_struct_ha->h_pos_stat);
      strcpy(l_dl_dealrepair_struct_h.h_cash_client , l_sys_dl_deal_struct_ha->h_cash_client);
      
      strcpy(l_dl_dealrepair_struct_h.h_inter_med_person,l_sys_dl_deal_struct_ha->h_inter_med_person);
      strcpy(l_dl_dealrepair_struct_h.h_inter_med_personnm,l_sys_dl_deal_struct_ha->h_inter_med_personnm);
      
      
      strcpy(l_dl_dealrepair_struct_h.h_ex_arena,l_sys_dl_deal_struct_ha->h_ex_arena);
      
      strcpy(l_dl_dealrepair_struct_h.h_fxccy,l_sys_dl_deal_struct_ha->h_fxccy);
      strcpy(l_dl_dealrepair_struct_h.h_locindentity_no,l_sys_dl_deal_struct_ha->h_locindentity_no);
		
 	  
		printf("\n***************************\n manual_ind_dl_flg = :%s: loc_chng_ind = :%s: \n", p_ms_inc_msg_struct_h.manual_ind_dl_flg, p_ms_inc_msg_struct_h.loc_chng_ind );
   	if (strcmp(p_ms_inc_msg_struct_h.manual_ind_dl_flg,"Y")==0 && strcmp(p_ms_inc_msg_struct_h.loc_chng_ind, "M")==0)
   	{
      	strcpy(l_dl_dealrepair_struct_h.h_entry,"Y");   
   	}
   	else if (strcmp(p_ms_inc_msg_struct_h.manual_ind_dl_flg,"Y")==0 && strcmp(p_ms_inc_msg_struct_h.loc_chng_ind, "N")==0)
   	{
      	strcpy(l_dl_dealrepair_struct_h.h_entry,"M");   
   	}
		else if (strcmp(p_ms_inc_msg_struct_h.loc_chng_ind, "M")==0)
   	{
      	strcpy(l_dl_dealrepair_struct_h.h_entry,"Z");   
   	}
   	else
      	strcpy(l_dl_dealrepair_struct_h.h_entry,"S");   
		printf("\n manual_ind_dl_flg = :%s: loc_chng_ind = :%s: and hence h_entry = :%s: \n", p_ms_inc_msg_struct_h.manual_ind_dl_flg, p_ms_inc_msg_struct_h.loc_chng_ind, l_dl_dealrepair_struct_h.h_entry );
		fprintf(fl_userlog,"Inserting Into TRADE REPAIR table\n");
		
		

		strcpy(l_dl_dealrepair_struct_h.h_uniq_ident_no,chr_l_unique_ref_num);
		printf("ISO6.8-002 1. : The unique refnum is : %s\n",chr_l_unique_ref_num);
		strcpy(chr_g_unique_ref_num,chr_l_unique_ref_num);

		

		strcpy(l_dl_dealrepair_struct_h.h_related_indentity_no,p_ms_inc_msg_struct_h.h_related_indentity_no);

		if (APL_FAILURE == DL_Mod_TrdRprNew(l_dl_dealrepair_struct_h,
   	                                    &int_retstat,
														fl_userlog,
      	                                 l_debug_info_ptr) )
   	{
     	    CO_InsertErr(l_debug_info_ptr,
     	                   DB_ERR_NO,
     	                   "CTRADEREPAIR",
     	                   APL_NULL_STRING,
     	                   APL_NULL_STRING,
     	                   __LINE__,
     	                   __FILE__);
     	    fprintf(fl_userlog,"Fatal Error In CTRADEREPAIR\n");
         APL_GOBACK_FAIL
   	}
	}
	else
	{
		fprintf(fl_repairrpt,"Succesfully Generated A Trade With Account %s And Reference Number %s\n",l_sys_dl_deal_struct_ha->h_dl_client, l_sys_dl_deal_struct_ha->h_indentity_no); 
   

         if (APL_FAILURE==EI_Mod_MQData(l_sys_dl_deal_struct_ha->h_dl_client,
                                        l_sys_dl_deal_struct_ha->h_indentity_no,
													 NULL,
													 NULL,
													 "B",
                                        l_debug_info_ptr))
               APL_GOBACK_FAIL
	}

	APL_GOBACK_SUCCESS




   RETURN_FAILURE:
   APL_IF_DEBUG
   {
      CO_ProcMonitor(p_fl_userlog,
               "Exiting out of I_InstPtySubtrdFn unsuccessfully\n",
               NULL,NULL);
   }
   return APL_FAILURE;

   RETURN_SUCCESS:
   APL_IF_DEBUG
   {
      CO_ProcMonitor(p_fl_userlog,
               "Exiting out of DL_Mod_SubDLInstPrty sucessfully\n",
               NULL,NULL);
   }
   return APL_SUCCESS;
}



int	DL_Mod_PassSubDL( MS_INC_MSG_STRUCT_H        p_ms_inc_msg_struct_h,
								 char						*p_pass_trcode,
								 char						*p_passrefno,
								 MS_REP_STRUCT_H		**p_ms_rep_struct_h,
								 int						i,
                         FILE                 *fl_userlog,
                         FILE                 *p_fl_userlog,
								 FILE						 *fl_repairrpt,
								 char						 *chr_fl_name,
                         INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
                         DEBUG_INFO_STRUCT_H        **l_debug_info_ptr )
{
char  chr_h_autorpr[2]     = APL_NULL_STRING;
char  chr_l_is_rpr[2]       = APL_NULL_STRING;

int	int_retstat				= 0;
int   int_l_rpr_seq_num     = 0;
SYS_DL_DEAL_STRUCT_H     *l_sys_dl_deal_struct_ha	= NULL;
PRO_GSEQNUM_STRUCT_H		*l_progseqnum_struct_h  = NULL;
DL_DEALREPAIR_STRUCT_H	 l_dl_dealrepair_struct_h	;

char h_dl_client[APL_CLIENT_LENGTH];
char h_domcpclt_cd[APL_CLIENT_LENGTH];
char h_instr_code[APL_INSTRUMENTCODE_LEN];
char h_indentity_no[APL_TXNREFNO_LEN];
double h_qty = 0.0;
double h_amt = 0.0;
char h_dlt[APL_DATE_LEN];
char h_setldt[APL_DATE_LEN];
char h_instr_name[121];
char chr_h_domcpacname[66];
char h_countclt[APL_CLIENT_LENGTH];
char h_ccy[APL_CCYCODE_LEN];		
char chr_h_system_date[APL_DATE_LEN];
char h_countcltnm[66];
char h_clientof[36];
char h_info[226];
char h_dealcd[2];
int int_l_txn_type=0;    
char chr_l_unique_ref_num[APL_UNIQUE_REF_NUM_LEN]=APL_NULL_STRING;    
char chr_l_trd_locn[APL_LOCNCODE_LENGTH];

	l_progseqnum_struct_h = (PRO_GSEQNUM_STRUCT_H *)calloc(1,sizeof(PRO_GSEQNUM_STRUCT_H) );
   APL_MALLOC_FAIL(l_progseqnum_struct_h);

   l_sys_dl_deal_struct_ha = (SYS_DL_DEAL_STRUCT_H *)calloc(1,sizeof(SYS_DL_DEAL_STRUCT_H) );
   APL_MALLOC_FAIL(l_sys_dl_deal_struct_ha);


EXEC SQL VAR chr_l_trd_locn IS STRING;
memset(l_sys_dl_deal_struct_ha,NULL,sizeof(SYS_DL_DEAL_STRUCT_H));
memset(chr_l_trd_locn, APL_NULL_CHAR,APL_LOCNCODE_LENGTH);





		strcpy(h_dl_client, (*p_ms_rep_struct_h + (i))->client);
		strcpy(h_dealcd, p_ms_inc_msg_struct_h.h_deal_code);
		strcpy(h_domcpclt_cd, p_ms_inc_msg_struct_h.domestic_cpclt);
		strcpy(h_instr_code , p_ms_inc_msg_struct_h.instr_code);
		strcpy(h_dlt, p_ms_inc_msg_struct_h.dl_dt);
		strcpy(h_setldt, p_ms_inc_msg_struct_h. setl_dt);
		strcpy(h_instr_name, p_ms_inc_msg_struct_h.instr_name);
		strcpy(chr_h_domcpacname, p_ms_inc_msg_struct_h.domcpclt_cd_cname);
		strcpy(h_ccy, p_ms_inc_msg_struct_h.currency_code);
		strcpy(h_countclt, p_ms_inc_msg_struct_h.cp_clt);
		strcpy(h_countcltnm, p_ms_inc_msg_struct_h.countclt_cname);
		strcpy(h_clientof, p_ms_inc_msg_struct_h.clientof);
		strcpy(h_info, p_ms_inc_msg_struct_h.info);
		
		strcpy(l_sys_dl_deal_struct_ha->h_ex_arena,p_ms_inc_msg_struct_h.ex_arena);
		

      
      strcpy(l_sys_dl_deal_struct_ha->h_locchng_flg,p_ms_inc_msg_struct_h.loc_chng_ind);
      

		h_qty = ( *p_ms_rep_struct_h + (i))->quantity; 
		h_amt = 0.0;

if (  APL_FAILURE == MS_Mod_TrdDef(h_dl_client,	
											  p_pass_trcode,
											  h_domcpclt_cd,
											  h_instr_code,
											  p_passrefno,
											  h_qty,
											  h_ccy,
											  h_dlt,
											  h_setldt,
											  h_info,
											  h_countclt,
											  h_countcltnm,
											  h_clientof,
											  h_amt,
											  NULL,
											  NULL,
                              	  l_sys_dl_deal_struct_ha,
											  fl_userlog,
											  p_intlenv_data_struct_h,	
                             		  l_debug_info_ptr)  )
{
   fprintf(fl_userlog,"Failed To set The Default Values for TRADE STRUCTURE\n");
}

                if(p_ms_inc_msg_struct_h.h_stld_loc   == 1)
                 {
                    EXEC SQL SELECT FIELD_VAL INTO :chr_l_trd_locn
                          FROM PRO_GSSPLVAL
                          WHERE MAIN_FUN= 'TRADE_MAINT'
                          AND SUB_PROCESS ='STOCK_LEND_LOCN'
                          AND NATION=:g_mt_commonsys_params_struct_h.nation_code;
                    IS_ANY_ORA_ERROR
                    strcpy(l_sys_dl_deal_struct_ha->h_loccode ,chr_l_trd_locn);
                 }
	int_l_rpr_seq_num = 0;

      

      int_l_txn_type=SETTLEMENT;
      if (MS_Rtv_RefNo_A(int_l_txn_type,chr_l_unique_ref_num,l_debug_info_ptr) == APL_FAILURE)
         {
             CO_ProcMonitor(APL_OUT_FILE,"Failure from GenUniqRefNum", NULL, p_intlenv_data_struct_h);
             APL_GOBACK_FAIL;
         }
         strcpy(l_sys_dl_deal_struct_ha->h_uniq_ident_no,chr_l_unique_ref_num);
			strcpy(chr_g_unique_ref_num,chr_l_unique_ref_num);
		printf("ISO6.8-002 1. : The unique refnum is : %s\n",chr_l_unique_ref_num);

      

		strcpy(l_sys_dl_deal_struct_ha->h_related_indentity_no,p_ms_inc_msg_struct_h.h_related_indentity_no);


	if (APL_FAILURE == DL_Proc_Trd(l_sys_dl_deal_struct_ha,
   	                           &int_l_rpr_seq_num,
      	                        p_intlenv_data_struct_h,
         	                     l_debug_info_ptr) )
	{
	 	
		
		fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
		
		 fprintf(fl_repairrpt,"Errors While Generating Trade For Message File %s\n",chr_fl_name);
		 
		 if (APL_FAILURE == CO_ProcMonitor(fl_repairrpt,
											  APL_NULL_STRING,
											  l_debug_info_ptr,
											  NULL) )
		{
			fprintf(fl_userlog,"Failed To Write to repair report\n");
			APL_GOBACK_FAIL
		}	
			fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");

   	memset(l_progseqnum_struct_h,NULL,sizeof(PRO_GSEQNUM_STRUCT_H));
   	memset(&l_dl_dealrepair_struct_h,NULL,sizeof(DL_DEALREPAIR_STRUCT_H));

	   strcpy(l_progseqnum_struct_h->sequencename ,DEAL_REPAIR_SEQNAME);

 	  int_l_rpr_seq_num = CO_RtvNxtSeqNum(l_progseqnum_struct_h ,
   	                                l_debug_info_ptr);

 	 if (APL_FAILURE == int_l_rpr_seq_num )
  	 {
      fprintf(fl_userlog,"Failed To Get The Next Sequence Number For repair sequence number\n");
      APL_GOBACK_FAIL
    }

 	 l_dl_dealrepair_struct_h.h_dlrep_sequencenum = int_l_rpr_seq_num;

    if (APL_FAILURE == CO_RtvSysDtTime(chr_h_system_date,
      	                                     l_debug_info_ptr) )
    {
      fprintf(fl_userlog,"failed To get System Date\n");
      APL_GOBACK_FAIL
    }

		

 	  	strcpy(l_dl_dealrepair_struct_h.h_dl_client, h_dl_client);
   	strcpy(l_dl_dealrepair_struct_h.h_indentity_no , p_passrefno);
   	strcpy(l_dl_dealrepair_struct_h.h_dealcd,p_pass_trcode);
   	strcpy(l_dl_dealrepair_struct_h.h_dlt, h_dlt);
   	strcpy(l_dl_dealrepair_struct_h.h_setldt, h_setldt);
   	l_dl_dealrepair_struct_h.h_qty   =  h_qty;
   	strcpy(l_dl_dealrepair_struct_h.h_instr_code, h_instr_code);
   	strcpy(l_dl_dealrepair_struct_h.h_currencycode, l_sys_dl_deal_struct_ha->h_currencycode);
   	strcpy(l_dl_dealrepair_struct_h.h_domcpclt_cd, h_domcpclt_cd);

		

 	  strcpy(l_dl_dealrepair_struct_h.h_classofdl,l_sys_dl_deal_struct_ha->h_classofdl);
   	l_dl_dealrepair_struct_h.h_pr = 0.0;

	   strcpy(l_dl_dealrepair_struct_h.h_ex_arena , l_sys_dl_deal_struct_ha->h_ex_arena);
   	strcpy(l_dl_dealrepair_struct_h.h_isspotdl , l_sys_dl_deal_struct_ha->h_isspotdl);
   	strcpy(l_dl_dealrepair_struct_h.h_entry , l_sys_dl_deal_struct_ha->h_entry);
   	strcpy(l_dl_dealrepair_struct_h.h_newdt , chr_h_system_date);
   	strcpy(l_dl_dealrepair_struct_h.h_maker, "SYSTEM");
   	strcpy(l_dl_dealrepair_struct_h.h_maker_dt, chr_h_system_date);
   	strcpy(l_dl_dealrepair_struct_h.h_access_stamp, chr_h_system_date);
   	

		strcpy(l_dl_dealrepair_struct_h.h_deal_status ,STATUS_UAUTH);

		

	   l_dl_dealrepair_struct_h.h_amt = h_amt;
   	strcpy(l_dl_dealrepair_struct_h.h_domcp_custodyclt, l_sys_dl_deal_struct_ha->h_domcp_custodyclt);
   	strcpy(l_dl_dealrepair_struct_h.h_countclt, l_sys_dl_deal_struct_ha->h_countclt);
   	strcpy(l_dl_dealrepair_struct_h.h_countcltnm, l_sys_dl_deal_struct_ha->h_countcltnm);
   	strcpy(l_dl_dealrepair_struct_h.h_clientof,p_ms_inc_msg_struct_h.clientof);
   	strcpy(l_dl_dealrepair_struct_h.h_info1, p_ms_inc_msg_struct_h.info);
   	strcpy(l_dl_dealrepair_struct_h.h_fx_reqd, l_sys_dl_deal_struct_ha->h_fx_reqd);

		

		strcpy(l_dl_dealrepair_struct_h.h_instr_name,p_ms_inc_msg_struct_h.instr_name); 	
		strcpy(l_dl_dealrepair_struct_h.h_cltname,p_ms_inc_msg_struct_h.inst_clnt_clr_name); 	
		strcpy(l_dl_dealrepair_struct_h.h_domesticcp_clr_name,p_ms_inc_msg_struct_h.domcpclt_cd_cname); 	
   	

	   strcpy(l_dl_dealrepair_struct_h.h_loccode,l_sys_dl_deal_struct_ha->h_loccode);
   	strcpy(l_dl_dealrepair_struct_h.h_pos_stat , l_sys_dl_deal_struct_ha->h_pos_stat);
		strcpy(l_dl_dealrepair_struct_h.h_cash_client , l_sys_dl_deal_struct_ha->h_cash_client);
      
      strcpy(l_dl_dealrepair_struct_h.h_inter_med_person,l_sys_dl_deal_struct_ha->h_inter_med_person);
      strcpy(l_dl_dealrepair_struct_h.h_inter_med_personnm,l_sys_dl_deal_struct_ha->h_inter_med_personnm);
      
      
      strcpy(l_dl_dealrepair_struct_h.h_ex_arena,l_sys_dl_deal_struct_ha->h_ex_arena);
      
      strcpy(l_dl_dealrepair_struct_h.h_fxccy,l_sys_dl_deal_struct_ha->h_fxccy); 
      strcpy(l_dl_dealrepair_struct_h.h_locindentity_no,l_sys_dl_deal_struct_ha->h_locindentity_no); 

 	  
		printf("\n***************************\n manual_ind_dl_flg = :%s: loc_chng_ind = :%s: \n", p_ms_inc_msg_struct_h.manual_ind_dl_flg, p_ms_inc_msg_struct_h.loc_chng_ind );
   	if (strcmp(p_ms_inc_msg_struct_h.manual_ind_dl_flg,"Y")==0 && strcmp(p_ms_inc_msg_struct_h.loc_chng_ind, "M")==0)
   	{
      	strcpy(l_dl_dealrepair_struct_h.h_entry,"Y");   
   	}
   	else if (strcmp(p_ms_inc_msg_struct_h.manual_ind_dl_flg,"Y")==0 && strcmp(p_ms_inc_msg_struct_h.loc_chng_ind, "N")==0)
   	{
      	strcpy(l_dl_dealrepair_struct_h.h_entry,"M");   
   	}
		else if (strcmp(p_ms_inc_msg_struct_h.loc_chng_ind, "M")==0)
   	{
      	strcpy(l_dl_dealrepair_struct_h.h_entry,"Z");   
   	}
   	else
      	strcpy(l_dl_dealrepair_struct_h.h_entry,"S");   
		printf("\n manual_ind_dl_flg = :%s: loc_chng_ind = :%s: and hence h_entry = :%s: \n", p_ms_inc_msg_struct_h.manual_ind_dl_flg, p_ms_inc_msg_struct_h.loc_chng_ind, l_dl_dealrepair_struct_h.h_entry );
		fprintf(fl_userlog,"Inserting Into TRADE REPAIR table\n");

		
		strcpy(l_dl_dealrepair_struct_h.h_uniq_ident_no,chr_l_unique_ref_num);
		strcpy(chr_g_unique_ref_num,chr_l_unique_ref_num);
		printf("ISO6.8-002 1. : The unique refnum is : %s\n",chr_l_unique_ref_num);
		

		strcpy(l_dl_dealrepair_struct_h.h_related_indentity_no,p_ms_inc_msg_struct_h.h_related_indentity_no);
	 
		if (APL_FAILURE == DL_Mod_TrdRprNew(l_dl_dealrepair_struct_h,
														&int_retstat,
														fl_userlog,
														l_debug_info_ptr) )
		{
         CO_InsertErr(l_debug_info_ptr,
                        DB_ERR_NO,
                        "CTRADEREPAIR",
                        APL_NULL_STRING,
                        APL_NULL_STRING,
                        __LINE__,
                        __FILE__);
         fprintf(fl_userlog,"Fatal Error In CTRADEREPAIR\n");
         APL_GOBACK_FAIL
		}		
	}
	else
	{
		fprintf(fl_repairrpt,"Succesfully Generated A Trade With Account %s And Reference Number %s\n",l_sys_dl_deal_struct_ha->h_dl_client, l_sys_dl_deal_struct_ha->h_indentity_no); 
      

      if (APL_FAILURE==EI_Mod_MQData(l_sys_dl_deal_struct_ha->h_dl_client,
                                        l_sys_dl_deal_struct_ha->h_indentity_no,
													 NULL,
													 NULL,
													 "B",
                                        l_debug_info_ptr))
               APL_GOBACK_FAIL
	}
	APL_GOBACK_SUCCESS




   RETURN_FAILURE:
   APL_IF_DEBUG
   {
      CO_ProcMonitor(p_fl_userlog,
               "Exiting out of I_InstPtySubtrdFn unsuccessfully\n",
               NULL,NULL);
   }
   return APL_FAILURE;

   RETURN_SUCCESS:
   APL_IF_DEBUG
   {
      CO_ProcMonitor(p_fl_userlog,
               "Exiting out of DL_Mod_SubDLInstPrty sucessfully\n",
               NULL,NULL);
   }
   return APL_SUCCESS;
}


int	DL_Mod_SingDLInstPrty( MS_INC_MSG_STRUCT_H        p_ms_inc_msg_struct_h,
								 	MS_REP_STRUCT_H		**p_ms_rep_struct_h,
									MS_INC_LINKINFO_STRUCT_H    **p_ms_inc_linkinfo_struct_h, 	
                         	FILE                 *fl_userlog,
                         	FILE                 *p_fl_userlog,
									FILE						*fl_repairrpt,
									char						*chr_fl_name,
									char						*p_mesg_body,
                         	INTL_ENV_DATA_STRUCT_H   *p_intlenv_data_struct_h,
                         	DEBUG_INFO_STRUCT_H        **l_debug_info_ptr )
{
char  chr_h_autorpr[2]     = APL_NULL_STRING;
char  chr_l_is_rpr[2]       = APL_NULL_STRING;
int int_h_count          = 0;     
int int_h_count1         = 0;
short i_dl_client      = 0;
short i_indentity_no        = 0;
int   int_l_rpr_seq_num     = 0;
char  chr_l_failcode[FAILREAS_CD_LEN] = APL_NULL_STRING;
short l_ind_FailCode = 0;
int	l_subfailreason_cd =0;
short l_ind_subfailcode = 0;
short l_micexcond = 0; 

short          l_proc_on_exch                      =  0;
char  chr_l_trade_status[APL_STATUS_LEN]       = APL_NULL_STRING;

SYS_DL_DEAL_STRUCT_H     *l_sys_dl_deal_struct_ha = NULL;
DL_DEAL_PMTDET_STRUCT_H  *l_dl_deal_pmtdet_struct_h   = NULL; 
DL_DEAL_SSTDET_STRUCT_H  *l_deal_sstdet_struct_h        = NULL; 
PRO_GSEQNUM_STRUCT_H		*l_progseqnum_struct_h = NULL;
DL_DEALREPAIR_STRUCT_H	l_dl_dealrepair_struct_h;
DL_MSGLINK_STRUCT_H       l_dl_msglink_struct_h;
MS_INC_LINKINFO_STRUCT_H         *h_inc_linkage_info = (MS_INC_LINKINFO_STRUCT_H *)NULL;		
DL_DEAL_FAIL_STRUCT_H l_dl_deal_fail_struct_h;
INTL_ENV_DATA_STRUCT_H l_intlenv_data_struct_h;
char chr_l_client_a[APL_CLIENT_LENGTH];
char h_dl_client[APL_CLIENT_LENGTH];
char h_domcpclt_cd[APL_CLIENT_LENGTH];
char h_instr_code[APL_INSTRUMENTCODE_LEN];
char h_indentity_no[APL_TXNREFNO_LEN];
char chr_l_buf[BUFFER_LEN]=APL_NULL_STRING;
double h_qty = 0.0;
double h_amt = 0.0;
char h_dealcd[2] = APL_NULL_STRING ;
char h_dlt[APL_DATE_LEN];
char h_setldt[APL_DATE_LEN];
char h_instr_name[121];
char chr_h_domcpacname[66];
char h_countclt[APL_CLIENT_LENGTH];
char h_countcltnm[66];
char h_clientof[36];
char h_ccy[APL_CCYCODE_LEN];		
int	int_retstat = 0;
char  h_info[266]		= APL_NULL_STRING;
char	chr_h_system_date[APL_DATE_LEN];
char  chr_h_buss_date[APL_DATE_LEN];
char  chr_l_access_stamp[APL_DATE_LEN] = APL_NULL_STRING;
char	h_sys_dt[APL_DATE_LEN];
char  chr_h_bog[13];
int int_l_dummy;
int int_h_acc_found = 0; 
short int_l_exists = 0;
int int_l_repair_flg = 0; 
char  h_fx_sell_flag[2]            = APL_NULL_STRING;
char  h_fx_buy_flag[2]            = APL_NULL_STRING;
int int_l_txn_type=0;    
char chr_l_unique_ref_num[APL_UNIQUE_REF_NUM_LEN]=APL_NULL_STRING;    
char chr_l_trd_locn[APL_LOCNCODE_LENGTH];
char chr_l_statregno[21]=APL_NULL_STRING;
char chr_l_srn_str[21]=APL_NULL_STRING;
char chr_l_str_temp[21]=APL_NULL_STRING;

short l_sfe_flg                  = 0;
short l_ext_trd_check = 0; 
short l_pl_spa_chg    =       0;	

EXEC SQL BEGIN DECLARE SECTION;
	char chr_h_emu_begindt[APL_DATE_LEN]; 
	short int int_i_emu_begindt = 0;
	struct sqlca sqlca;
	EXEC SQL VAR chr_l_client_a      IS STRING;
	EXEC SQL VAR chr_h_emu_begindt  IS STRING;
	EXEC SQL VAR h_fx_sell_flag   IS STRING;
	EXEC SQL VAR h_fx_buy_flag   IS STRING;
	EXEC SQL VAR chr_l_trd_locn   IS STRING;
	EXEC SQL VAR chr_l_trade_status   IS STRING;
   EXEC SQL VAR chr_l_access_stamp   IS STRING;
   EXEC SQL VAR chr_l_statregno   IS STRING;
	
EXEC SQL END DECLARE SECTION;

	sqlca.sqlcode = 0L;

	l_progseqnum_struct_h = (PRO_GSEQNUM_STRUCT_H *)calloc(1,sizeof(PRO_GSEQNUM_STRUCT_H) );
	APL_MALLOC_FAIL(l_progseqnum_struct_h);

	l_sys_dl_deal_struct_ha = (SYS_DL_DEAL_STRUCT_H *)calloc(1,sizeof(SYS_DL_DEAL_STRUCT_H) );
	APL_MALLOC_FAIL(l_sys_dl_deal_struct_ha);

   l_deal_sstdet_struct_h = (DL_DEAL_SSTDET_STRUCT_H *)calloc(1, sizeof(DL_DEAL_SSTDET_STRUCT_H));
   APL_MALLOC_FAIL(l_deal_sstdet_struct_h);
   l_dl_deal_pmtdet_struct_h = (DL_DEAL_PMTDET_STRUCT_H *)calloc(1, sizeof(DL_DEAL_PMTDET_STRUCT_H));
   APL_MALLOC_FAIL(l_dl_deal_pmtdet_struct_h);

	memset(l_sys_dl_deal_struct_ha,NULL,sizeof(SYS_DL_DEAL_STRUCT_H));
	memset(&l_dl_msglink_struct_h,NULL,sizeof(DL_MSGLINK_STRUCT_H));
 	memset(&l_dl_deal_fail_struct_h, NULL, sizeof(DL_DEAL_FAIL_STRUCT_H));
	memset(&l_intlenv_data_struct_h, NULL, sizeof(INTL_ENV_DATA_STRUCT_H));
	h_inc_linkage_info=*p_ms_inc_linkinfo_struct_h;
	memset(chr_l_trd_locn,APL_NULL_CHAR,APL_LOCNCODE_LENGTH);
   memset(chr_l_access_stamp,APL_NULL_CHAR,APL_DATE_LEN);
   memset(chr_l_statregno,APL_NULL_CHAR,21);





		strcpy(h_dl_client, (*p_ms_rep_struct_h + 0)->client);
		strcpy(h_dealcd,  p_ms_inc_msg_struct_h.h_deal_code);
		strcpy(h_domcpclt_cd, p_ms_inc_msg_struct_h.domestic_cpclt);
		strcpy(h_instr_code , p_ms_inc_msg_struct_h.instr_code);
		strcpy(h_indentity_no , p_ms_inc_msg_struct_h.indentity_no);
		strcpy(h_dlt, p_ms_inc_msg_struct_h.dl_dt);
		strcpy(h_setldt, p_ms_inc_msg_struct_h.setl_dt);
		strcpy(h_instr_name, p_ms_inc_msg_struct_h.instr_name);
		strcpy(chr_h_domcpacname, p_ms_inc_msg_struct_h.domcpclt_cd_cname);
		strcpy(h_ccy, p_ms_inc_msg_struct_h.currency_code);
		strcpy(h_countclt, p_ms_inc_msg_struct_h.cp_clt);
		strcpy(h_countcltnm, p_ms_inc_msg_struct_h.countclt_cname);
		strcpy(h_clientof, p_ms_inc_msg_struct_h.clientof);
		strcpy(h_info, p_ms_inc_msg_struct_h.info);
		
		strcpy(l_sys_dl_deal_struct_ha->h_ex_arena,p_ms_inc_msg_struct_h.ex_arena);
		
	
      
      strcpy(l_sys_dl_deal_struct_ha->h_locchng_flg,p_ms_inc_msg_struct_h.loc_chng_ind);
      

      strcpy(l_sys_dl_deal_struct_ha->h_related_indentity_no,p_ms_inc_msg_struct_h.h_related_indentity_no);
		h_qty = ( *p_ms_rep_struct_h + 0 )->quantity; 
		h_amt = p_ms_inc_msg_struct_h.amount;

if (  APL_FAILURE == MS_Mod_TrdDef(h_dl_client,	
											  h_dealcd,
											  h_domcpclt_cd,
											  h_instr_code,
											  h_indentity_no,
											  h_qty,
											  h_ccy,
											  h_dlt,
											  h_setldt,
											  h_info,
											  h_countclt,
											  h_countcltnm,
											  h_clientof,
											  h_amt,
											  p_ms_inc_msg_struct_h.gl_client,
											  p_ms_inc_msg_struct_h.dl_class,
                              	  l_sys_dl_deal_struct_ha,
											  fl_userlog,
											  p_intlenv_data_struct_h,	
                             		  l_debug_info_ptr)  )
	{
   	fprintf(fl_userlog, "Failed to set the default values for TRADE STRUCTURE.\n");
	}

	IS_ANY_ERROR_FATAL 

      if(p_ms_inc_msg_struct_h.h_stld_loc   == 1)
      {
         EXEC SQL SELECT FIELD_VAL INTO :chr_l_trd_locn
               FROM PRO_GSSPLVAL
               WHERE MAIN_FUN= 'TRADE_MAINT'
               AND SUB_PROCESS ='STOCK_LEND_LOCN'
               AND NATION=:g_mt_commonsys_params_struct_h.nation_code;
        IS_ANY_ORA_ERROR
        strcpy(l_sys_dl_deal_struct_ha->h_loccode ,chr_l_trd_locn);
      }

   

	int_l_exists=0;

	if (APL_FAILURE == CO_Chk_CntryEnabled("TRADE_MAINT", "NATNLTY_BOGTXNCD",
													 &int_l_exists, l_debug_info_ptr))
	{
		APL_GOBACK_FAIL
	}
	memset(chr_h_bog,APL_NULL_CHAR,13);
	if (int_l_exists)
	{
		int_h_acc_found = 0;
		

		if ( APL_FAILURE == DL_Rtv_BOGTxn(h_dl_client, h_domcpclt_cd,h_instr_code, chr_h_bog,
												&int_h_acc_found, l_debug_info_ptr))
		{
			fprintf(fl_userlog,"Failed To Get The BOG Transaction h_code for the Trade \n");
			APL_GOBACK_FAIL
		}

			strcpy(l_sys_dl_deal_struct_ha->h_brkrno,chr_h_bog);
	}

	

	

 	if (APL_FAILURE == CO_RtvMachDtTime(chr_h_system_date, l_debug_info_ptr) )
   {
    	fprintf(fl_userlog,"failed To get System Date\n");
      APL_GOBACK_FAIL
  	}

   if ( APL_FAILURE == CO_RtvSysDt( h_sys_dt, l_debug_info_ptr) )
   {
      APL_GOBACK_FAIL;
   }

	 

 	int_l_dummy=0;
	if (APL_FAILURE == CO_Chk_SplVal("EUROCLEAR", "ACT_ACC", h_dl_client,
											  &int_l_dummy, l_debug_info_ptr))
	{
		APL_GOBACK_FAIL
	}

	if (int_l_dummy)
	{
		
		
		strcpy(chr_l_client_a, DUMMY_ACCOUNT_NO);
		EXEC SQL SELECT FAILREASON_CD,SUB_FAIL_CD
					INTO :chr_l_failcode:l_ind_FailCode,
							:l_subfailreason_cd:l_ind_subfailcode
					FROM DL_DEAL
					WHERE (CLIENT = :chr_l_client_a)
							AND (IDENTIY_NO = :h_indentity_no);    

		IS_ANY_ORA_ERROR

		

		if (l_ind_FailCode!=-1)
				strcpy(l_sys_dl_deal_struct_ha->h_fail_cd,chr_l_failcode);
		if (l_ind_subfailcode!=-1)
				l_sys_dl_deal_struct_ha->h_subfailreas_cd = l_subfailreason_cd;
		else
				l_sys_dl_deal_struct_ha->h_subfailreas_cd = 0;	

	}

	
	
	if(!strcmp(chr_g_msg_no,"54N"))
	{
  		l_sys_dl_deal_struct_ha->h_brokercomm =	p_ms_inc_msg_struct_h.brokercomm;
		 memset(h_dl_client,APL_NULL_CHAR,APL_CLIENT_LENGTH);
   memset(h_fx_sell_flag,APL_NULL_CHAR,2);
   memset(h_fx_buy_flag,APL_NULL_CHAR,2);
   strcpy(h_dl_client,l_sys_dl_deal_struct_ha->h_dl_client);
      EXEC SQL SELECT CLN_FX_SELL_IND,
                CLN_FX_BUY_IND
                INTO :h_fx_sell_flag,
                     :h_fx_buy_flag
                FROM MT_CLIENT
                WHERE CLN_CODE = :h_dl_client;

		IS_ANY_ORA_ERROR
      if(p_ms_inc_msg_struct_h.fx_adv_ind[0]=='\0')
      {
         if (!strcmp(l_mt_message_sys_params_struct_h.gen_fx_adv_ind,"Y"))
         {
            if (  l_sys_dl_deal_struct_ha->h_dealcd[0] == DEALCD_DVP  )
               strcpy(l_sys_dl_deal_struct_ha->h_fx_reqd,h_fx_sell_flag);
            else if (   l_sys_dl_deal_struct_ha->h_dealcd[0] ==  DEALCD_RVP )
               strcpy(l_sys_dl_deal_struct_ha->h_fx_reqd,h_fx_buy_flag);
             else
               strcpy(l_sys_dl_deal_struct_ha->h_fx_reqd, "N");

         }
         else
         {
            strcpy(l_sys_dl_deal_struct_ha->h_fx_reqd,"N");
         }
     }
     else
     {
      strcpy(l_sys_dl_deal_struct_ha->h_fx_reqd,p_ms_inc_msg_struct_h.fx_adv_ind);
     }	
		strcpy(l_sys_dl_deal_struct_ha->h_allow_part_s,p_ms_inc_msg_struct_h.partial_ind_a);

		strcpy(l_sys_dl_deal_struct_ha->h_instruct_personnm,p_ms_inc_msg_struct_h.inst_clnt_clr_name);
		strcpy(l_sys_dl_deal_struct_ha->h_instruct_person,p_ms_inc_msg_struct_h.inst_client);
		strcpy(l_sys_dl_deal_struct_ha->h_clientof,p_ms_inc_msg_struct_h.clientof_cname);
		strcpy(l_sys_dl_deal_struct_ha->h_clientofcode,p_ms_inc_msg_struct_h.clientof);

		strcpy(l_sys_dl_deal_struct_ha->h_inter_med_person,p_ms_inc_msg_struct_h.interprty);
		strcpy(l_sys_dl_deal_struct_ha->h_inter_med_personnm,p_ms_inc_msg_struct_h.interprtynm);
		
		strcpy(l_sys_dl_deal_struct_ha->h_fxccy,p_ms_inc_msg_struct_h.fxccy); 
		strcpy(l_sys_dl_deal_struct_ha->h_locindentity_no,p_ms_inc_msg_struct_h.lcl_identno); 

		
		strcpy(l_sys_dl_deal_struct_ha->h_locchng_flg,p_ms_inc_msg_struct_h.loc_chng_ind);
		

	}
	

   if (strcmp(p_ms_inc_msg_struct_h.manual_ind_dl_flg,"Y")==0)
   {
      
      if (APL_FAILURE == CO_Chk_CntryEnabled(  "INCOMING_MSG",
                                             "SFE_MQ_INC",
                                             &l_sfe_flg,
                                             l_debug_info_ptr))
      {
         APL_GOBACK_FAIL
      }
      if (l_sfe_flg != 0)
         strcpy(l_sys_dl_deal_struct_ha->h_entry,"B");
      else
         strcpy(l_sys_dl_deal_struct_ha->h_entry,"M");
   }
	


	if(strcmp(p_ms_inc_msg_struct_h.h_rpr_ind,"Y")==0)
	{
		strcpy(l_sys_dl_deal_struct_ha->h_reapired_ind,"Y");
	}

   

   int_l_txn_type=SETTLEMENT;
   if (MS_Rtv_RefNo_A(int_l_txn_type,chr_l_unique_ref_num,l_debug_info_ptr) == APL_FAILURE)
      {
          CO_ProcMonitor(APL_OUT_FILE,"Failure from GenUniqRefNum", NULL, p_intlenv_data_struct_h);
          APL_GOBACK_FAIL;
      }
		printf("ISO6.8-002 1. : The unique refnum is : %s\n",chr_l_unique_ref_num);
		strcpy(chr_g_unique_ref_num,chr_l_unique_ref_num);

   


printf("\n q1w2e3 ******* p_ms_inc_msg_struct_h.description is |%s| ********$$$$$$$$$$$$$$$$$$$ \n",p_ms_inc_msg_struct_h.description);


	
	l_proc_on_exch = 0;
	if ( APL_FAILURE == CO_Chk_CntryEnabled("TRADE_PROCESSING" ,"PROC_ON_EXCHANGE",
														&l_proc_on_exch, l_debug_info_ptr) )
	{
		fprintf( fl_userlog, "Failed in CO_Chk_CntryEnabled for MICEX_TRADES\n");
		APL_GOBACK_FAIL
	}

	if( l_proc_on_exch  )
	{
		memset(chr_l_trade_status,APL_NULL_CHAR,3);
		EXEC SQL SELECT FIELD_VAL
		INTO  :chr_l_trade_status
		FROM PRO_GSSPLVAL
		WHERE MAIN_FUN='ON_EXCH_STAT'
		AND   SUB_PROCESS=:p_ms_inc_msg_struct_h.description
		AND NATION=:g_mt_commonsys_params_struct_h.nation_code;

		IS_ANY_ORA_ERROR

		if (sqlca.sqlcode != 1403)
		{
			strcpy(l_sys_dl_deal_struct_ha->h_deal_status,chr_l_trade_status);
			if(strcmp(chr_l_trade_status,"CC") == 0)
			{
				strcpy(l_sys_dl_deal_struct_ha->h_confdate , h_sys_dt);
				strcpy(l_sys_dl_deal_struct_ha->h_transmitdate , h_sys_dt);
			}
		}
	}


	strcpy(l_sys_dl_deal_struct_ha->h_related_indentity_no,p_ms_inc_msg_struct_h.h_related_indentity_no);

	if ( APL_SUCCESS == CO_ChkErr(*l_debug_info_ptr) )
	{
		int_l_repair_flg = 1;
	}
	else
	{
		strcpy(l_sys_dl_deal_struct_ha->h_uniq_ident_no,chr_l_unique_ref_num);
		int_retstat = DL_Proc_Trd(l_sys_dl_deal_struct_ha, &int_l_rpr_seq_num, p_intlenv_data_struct_h, 
									 l_debug_info_ptr);
	}

	int_l_rpr_seq_num = 0;

	
   if(int_retstat==APL_SUCCESS)
   {
      if (APL_FAILURE == CO_Chk_CntryEnabled("TRD_INQ", "PL_SPA",
                                           &l_pl_spa_chg, l_debug_info_ptr))
      {
         APL_GOBACK_FAIL
      }
      if(l_pl_spa_chg==1)
      {
         EXEC SQL UPDATE DL_DEAL SET INFORMATON =CHR(4) ||'SPA'|| CHR(5) ||  :l_sys_dl_deal_struct_ha->h_indentity_no || CHR(4)
                  WHERE CLIENT  =  :l_sys_dl_deal_struct_ha->h_dl_client
                  AND   IDENTIY_NO    =  :l_sys_dl_deal_struct_ha->h_indentity_no;
         IS_ANY_ORA_ERROR
      }
   }
	
	
	if((int_retstat==APL_SUCCESS) && (strcmp(p_ms_inc_msg_struct_h.lcl_identno,APL_NULL_STRING)!=0))
	{
	   strcpy(l_dl_deal_fail_struct_h.h_dl_client, l_sys_dl_deal_struct_ha->h_dl_client);
      strcpy(l_dl_deal_fail_struct_h.h_indentity_no, l_sys_dl_deal_struct_ha->h_indentity_no);
      strcpy(l_dl_deal_fail_struct_h.h_fail_cd,"90");
      l_dl_deal_fail_struct_h.h_subfailreas_cd=0;     
      strcpy(l_dl_deal_fail_struct_h.h_custinfo, APL_NULL_STRING);
      strcpy(l_dl_deal_fail_struct_h.h_failinfo, APL_NULL_STRING);
      strcpy(l_dl_deal_fail_struct_h.h_access_stamp, l_sys_dl_deal_struct_ha->h_access_stamp);	

      l_intlenv_data_struct_h = *p_intlenv_data_struct_h;
      strcpy(l_intlenv_data_struct_h.h_mode, UFL_MODE);

		if(APL_FAILURE==DL_Mod_DLFailReas(&l_dl_deal_fail_struct_h,&l_intlenv_data_struct_h,l_debug_info_ptr))
		{
			strcpy(chr_g_msg_sts,"RJT");
			fprintf(fl_userlog,"FAILED TO UPDATE FAILCODE 90 FOR EUROMTS TRADE\n");	
			APL_GOBACK_FAIL
		}

	}
	

	

	if (APL_FAILURE == CO_Chk_CntryEnabled("TRD_MAINT", "EXT_TRD_CNTAC_ALWD",
													 &l_ext_trd_check, l_debug_info_ptr))
	{
		APL_GOBACK_FAIL
	}

	if(l_ext_trd_check==1)
	{
		if((int_retstat==APL_SUCCESS) && (strcmp(p_ms_inc_msg_struct_h.addindentity_no,"IEXE")==0))
		{
	   	strcpy(l_dl_deal_fail_struct_h.h_dl_client, l_sys_dl_deal_struct_ha->h_dl_client);
      	strcpy(l_dl_deal_fail_struct_h.h_indentity_no, l_sys_dl_deal_struct_ha->h_indentity_no);
      	strcpy(l_dl_deal_fail_struct_h.h_fail_cd,"89");
      	l_dl_deal_fail_struct_h.h_subfailreas_cd=8;     
      	strcpy(l_dl_deal_fail_struct_h.h_custinfo, APL_NULL_STRING);
      	strcpy(l_dl_deal_fail_struct_h.h_failinfo, APL_NULL_STRING);
      	strcpy(l_dl_deal_fail_struct_h.h_access_stamp, l_sys_dl_deal_struct_ha->h_access_stamp);	

      	l_intlenv_data_struct_h = *p_intlenv_data_struct_h;
      	strcpy(l_intlenv_data_struct_h.h_mode, UFL_MODE);

			if(APL_FAILURE==DL_Mod_DLFailReas(&l_dl_deal_fail_struct_h,&l_intlenv_data_struct_h,l_debug_info_ptr))
			{
				strcpy(chr_g_msg_sts,"RJT");
				fprintf(fl_userlog,"FAILED TO UPDATE FAILCODE 89 FOR TRADE\n");	
				APL_GOBACK_FAIL
			}
		}
	}
	

	if ( (int_retstat == APL_FAILURE) || int_l_repair_flg )
	{

   EXEC SQL SELECT COUNT(*)
   INTO     :int_h_count
   FROM DL_DEAL
   WHERE CLIENT = :h_dl_client:i_dl_client
   AND IDENTIY_NO   = :h_indentity_no:i_indentity_no;

   IS_ANY_ORA_ERROR

   EXEC SQL SELECT COUNT(*)
                  INTO     :int_h_count1
                  FROM DL_DEALREPAIR
            WHERE CLIENT     = :h_dl_client:i_dl_client
                  AND IDENTIY_NO   = :h_indentity_no:i_indentity_no;

   IS_ANY_ORA_ERROR

   if ((int_h_count != 0) || (int_h_count1 != 0))
   {
            fprintf(fl_userlog,"Trade for the actual client already exists.\n");
            strcpy(chr_g_msg_sts, "RJT");
				  printf("\n chr_g_msgfile_name 12 is |%s|\n",chr_g_msgfile_name);
            if ( APL_FAILURE == MS_Mod_IncMsgSts("RJT", "TRADE ALREADY EXISTS",h_dl_client, NULL) )
            {
               CO_ProcMonitor(APL_OUT_FILE, "Could not insert into IINMSGRP\n",
                         NULL, NULL);
            }

            APL_GOBACK_FAIL
   }

		
	 	
		
		fprintf(fl_repairrpt,"%9sTRADE REJECTION REPORT FOR MESSAGE FILE %s \n"," ",chr_fl_name);
		fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
		fprintf(fl_repairrpt,"%s\n\n", p_mesg_body);
		fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
		fprintf(fl_repairrpt,"Errors While Generating Trade For Message File %s\n",chr_fl_name);
		
		 if (APL_FAILURE == CO_ProcMonitor(fl_repairrpt,
											  "Errors While Generating Trade:",
											  l_debug_info_ptr,
											  NULL) )
		{
			fprintf(fl_userlog,"Failed To Write to repair report\n");
			APL_GOBACK_FAIL
		}	
		fprintf(fl_repairrpt,"%9s---------------------------------------------------------------------------\n"," ");
   	memset(l_progseqnum_struct_h,NULL,sizeof(PRO_GSEQNUM_STRUCT_H));
   	memset(&l_dl_dealrepair_struct_h,NULL,sizeof(DL_DEALREPAIR_STRUCT_H));

	   strcpy(l_progseqnum_struct_h->sequencename ,DEAL_REPAIR_SEQNAME);

 	  int_l_rpr_seq_num = CO_RtvNxtSeqNum(l_progseqnum_struct_h ,
   	                                l_debug_info_ptr);

	  if (APL_FAILURE == int_l_rpr_seq_num )
     {
      	fprintf(fl_userlog,"Failed To Get The Next Sequence Number For repair sequence number\n");
      	APL_GOBACK_FAIL
  	  }

   	l_dl_dealrepair_struct_h.h_dlrep_sequencenum = int_l_rpr_seq_num;

		
		strcpy(l_dl_dealrepair_struct_h.h_brkrno,chr_h_bog); 
 	   strcpy(l_dl_dealrepair_struct_h.h_dl_client, h_dl_client);
   	strcpy(l_dl_dealrepair_struct_h.h_indentity_no , h_indentity_no);
   	strcpy(l_dl_dealrepair_struct_h.h_dealcd,h_dealcd);
   	strcpy(l_dl_dealrepair_struct_h.h_dlt, h_dlt);
   	strcpy(l_dl_dealrepair_struct_h.h_setldt, h_setldt);
   	l_dl_dealrepair_struct_h.h_qty   =  h_qty;
   	strcpy(l_dl_dealrepair_struct_h.h_instr_code, h_instr_code);
   	strcpy(l_dl_dealrepair_struct_h.h_currencycode, l_sys_dl_deal_struct_ha->h_currencycode);
	  	strcpy(l_dl_dealrepair_struct_h.h_domcpclt_cd, h_domcpclt_cd);

		

 	  strcpy(l_dl_dealrepair_struct_h.h_classofdl,l_sys_dl_deal_struct_ha->h_classofdl);
   	l_dl_dealrepair_struct_h.h_pr = 0.0;

	   strcpy(l_dl_dealrepair_struct_h.h_ex_arena ,l_sys_dl_deal_struct_ha->h_ex_arena);
   	strcpy(l_dl_dealrepair_struct_h.h_isspotdl ,l_sys_dl_deal_struct_ha->h_isspotdl);
   	strcpy(l_dl_dealrepair_struct_h.h_entry ,l_sys_dl_deal_struct_ha->h_entry); 
   	strcpy(l_dl_dealrepair_struct_h.h_newdt , chr_h_system_date);
   	strcpy(l_dl_dealrepair_struct_h.h_maker, "SYSTEM");
   	strcpy(l_dl_dealrepair_struct_h.h_maker_dt, chr_h_system_date);
   	strcpy(l_dl_dealrepair_struct_h.h_access_stamp, chr_h_system_date);
   	

		strcpy(l_dl_dealrepair_struct_h.h_deal_status ,STATUS_UAUTH);

		

 	  	l_dl_dealrepair_struct_h.h_amt = h_amt;
   	strcpy(l_dl_dealrepair_struct_h.h_domcp_custodyclt, l_sys_dl_deal_struct_ha->h_domcp_custodyclt);
   	strcpy(l_dl_dealrepair_struct_h.h_countclt, l_sys_dl_deal_struct_ha->h_countclt);
   	strcpy(l_dl_dealrepair_struct_h.h_countcltnm, l_sys_dl_deal_struct_ha->h_countcltnm);
   	strcpy(l_dl_dealrepair_struct_h.h_clientof,p_ms_inc_msg_struct_h.clientof);
   	strcpy(l_dl_dealrepair_struct_h.h_info1, p_ms_inc_msg_struct_h.info);
   	strcpy(l_dl_dealrepair_struct_h.h_fx_reqd, l_sys_dl_deal_struct_ha->h_fx_reqd);
		
		if(!strcmp(chr_g_msg_no,"54N"))
		{
			l_dl_dealrepair_struct_h.h_brokercomm = p_ms_inc_msg_struct_h.brokercomm;
			 memset(h_dl_client,APL_NULL_CHAR,APL_CLIENT_LENGTH);
   		memset(h_fx_sell_flag,APL_NULL_CHAR,2);
   		memset(h_fx_buy_flag,APL_NULL_CHAR,2);
   		strcpy(h_dl_client,l_dl_dealrepair_struct_h.h_dl_client);
      	EXEC SQL SELECT CLN_FX_SELL_IND,
                CLN_FX_BUY_IND
                INTO :h_fx_sell_flag,
                     :h_fx_buy_flag
                FROM MT_CLIENT
                WHERE CLN_CODE = :h_dl_client;

			IS_ANY_ORA_ERROR
      	if(p_ms_inc_msg_struct_h.fx_adv_ind[0]=='\0')
      	{
         	if (!strcmp(l_mt_message_sys_params_struct_h.gen_fx_adv_ind,"Y"))
         	{
            	if (  l_dl_dealrepair_struct_h.h_dealcd[0] == DEALCD_DVP  )
               	strcpy(l_dl_dealrepair_struct_h.h_fx_reqd,h_fx_sell_flag);
           		else if (   l_dl_dealrepair_struct_h.h_dealcd[0] ==  DEALCD_RVP )
               	strcpy(l_dl_dealrepair_struct_h.h_fx_reqd,h_fx_buy_flag);
             	else
               	strcpy(l_dl_dealrepair_struct_h.h_fx_reqd, "N");

         	}
         	else
         	{
            	strcpy(l_dl_dealrepair_struct_h.h_fx_reqd,"N");
         	}
     	}
     	else
     	{
      	strcpy(l_dl_dealrepair_struct_h.h_fx_reqd,p_ms_inc_msg_struct_h.fx_adv_ind);
     	}
			strcpy(l_dl_dealrepair_struct_h.h_allow_part_s,l_sys_dl_deal_struct_ha->h_allow_part_s);
		
			strcpy(l_dl_dealrepair_struct_h.h_cltname,p_ms_inc_msg_struct_h.inst_clnt_clr_name);
			strcpy(l_dl_dealrepair_struct_h.h_instruct_person,p_ms_inc_msg_struct_h.inst_client);
			strcpy(l_dl_dealrepair_struct_h.h_clientof,p_ms_inc_msg_struct_h.clientof_cname);
			strcpy(l_dl_dealrepair_struct_h.h_clientofcode,p_ms_inc_msg_struct_h.clientof);
		
		strcpy(l_dl_dealrepair_struct_h.h_inter_med_person,p_ms_inc_msg_struct_h.interprty);
		strcpy(l_dl_dealrepair_struct_h.h_inter_med_personnm,p_ms_inc_msg_struct_h.interprtynm);
		
		strcpy(l_dl_dealrepair_struct_h.h_fxccy,p_ms_inc_msg_struct_h.fxccy); 
		strcpy(l_dl_dealrepair_struct_h.h_locindentity_no,p_ms_inc_msg_struct_h.lcl_identno); 
		}

		
		fprintf(fl_userlog,"Inserting Into TRADE REPAIR table\n");


		

		strcpy(l_dl_dealrepair_struct_h.h_instr_name,p_ms_inc_msg_struct_h.instr_name); 	
		strcpy(l_dl_dealrepair_struct_h.h_cltname,p_ms_inc_msg_struct_h.inst_clnt_clr_name); 	
		strcpy(l_dl_dealrepair_struct_h.h_domesticcp_clr_name,p_ms_inc_msg_struct_h.domcpclt_cd_cname); 	
   	

	   strcpy(l_dl_dealrepair_struct_h.h_loccode,l_sys_dl_deal_struct_ha->h_loccode);
   	strcpy(l_dl_dealrepair_struct_h.h_pos_stat , l_sys_dl_deal_struct_ha->h_pos_stat);

		
		strcpy(l_dl_dealrepair_struct_h.h_cash_client,l_sys_dl_deal_struct_ha->h_cash_client);
      
      strcpy(l_dl_dealrepair_struct_h.h_inter_med_person,l_sys_dl_deal_struct_ha->h_inter_med_person);
      strcpy(l_dl_dealrepair_struct_h.h_inter_med_personnm,l_sys_dl_deal_struct_ha->h_inter_med_personnm);
      
      
      strcpy(l_dl_dealrepair_struct_h.h_ex_arena,l_sys_dl_deal_struct_ha->h_ex_arena);
      
      strcpy(l_dl_dealrepair_struct_h.h_fxccy,l_sys_dl_deal_struct_ha->h_fxccy); 

	
	printf("\n***************************\n manual_ind_dl_flg = :%s: loc_chng_ind = :%s: \n", p_ms_inc_msg_struct_h.manual_ind_dl_flg, p_ms_inc_msg_struct_h.loc_chng_ind );
	if (strcmp(p_ms_inc_msg_struct_h.manual_ind_dl_flg,"Y")==0 && strcmp(p_ms_inc_msg_struct_h.loc_chng_ind, "M")==0)
	{
		strcpy(l_dl_dealrepair_struct_h.h_entry,"Y");   
	}	
	else if (strcmp(p_ms_inc_msg_struct_h.manual_ind_dl_flg,"Y")==0 && strcmp(p_ms_inc_msg_struct_h.loc_chng_ind, "N")==0)
	{
		strcpy(l_dl_dealrepair_struct_h.h_entry,"M");   
	}	
	else if (strcmp(p_ms_inc_msg_struct_h.loc_chng_ind, "M")==0)
	{
		strcpy(l_dl_dealrepair_struct_h.h_entry,"Z");   
	}	
	else
		strcpy(l_dl_dealrepair_struct_h.h_entry,"S");   

printf("\n manual_ind_dl_flg = :%s: loc_chng_ind = :%s: and hence h_entry = :%s: \n", p_ms_inc_msg_struct_h.manual_ind_dl_flg, p_ms_inc_msg_struct_h.loc_chng_ind, l_dl_dealrepair_struct_h.h_entry );
		fprintf(fl_userlog,"The Trade Repair Seq Num is %d\n",l_dl_dealrepair_struct_h.h_dlrep_sequencenum);
		fprintf(fl_userlog,"The Trade Code is %s\n",l_dl_dealrepair_struct_h.h_dealcd);

		
		strcpy(l_dl_dealrepair_struct_h.h_uniq_ident_no,chr_l_unique_ref_num);
		strcpy(chr_g_unique_ref_num,chr_l_unique_ref_num);
		printf("ISO6.8-002 1. : The unique refnum is : %s\n",chr_l_unique_ref_num);
		

		strcpy(l_dl_dealrepair_struct_h.h_related_indentity_no,p_ms_inc_msg_struct_h.h_related_indentity_no);

		if (APL_FAILURE == DL_Mod_TrdRprNew(l_dl_dealrepair_struct_h,
														&int_retstat,
														fl_userlog,
														l_debug_info_ptr) )
		{
   	      CO_InsertErr(l_debug_info_ptr,
      	                  DB_ERR_NO,
         	               "CTRADEREPAIR",
            	            APL_NULL_STRING,
               	         APL_NULL_STRING,
                  	      __LINE__,
                     	   __FILE__);
         	fprintf(fl_userlog,"Fatal Error In CTRADEREPAIR\n");
         	APL_GOBACK_FAIL
		}		
		else
		{
			strcpy(chr_g_msg_sts, "RPR");
			
 			strcpy(l_dl_msglink_struct_h.h_dl_client,l_dl_dealrepair_struct_h.h_dl_client);
			 strcpy(l_dl_msglink_struct_h.h_indentity_no,l_dl_dealrepair_struct_h.h_indentity_no);
			 strcpy(l_dl_msglink_struct_h.h_msg_in_out_ind,"I");
			 strcpy(l_dl_msglink_struct_h.h_swift_msg_no,chr_g_new_msg_no);
		 if (APL_FAILURE == CO_RtvMachDtTime( l_dl_msglink_struct_h.h_new_dt, l_debug_info_ptr ))
		 {
				 APL_GOBACK_FAIL
		 }
			
		   strcpy(l_dl_msglink_struct_h.h_information,chr_g_addinfo);
			l_dl_msglink_struct_h.h_sequence_num=int_g_seq_num;
			l_dl_msglink_struct_h.h_dlrep_sequencenum=int_l_rpr_seq_num;
			strncpy(l_dl_msglink_struct_h.h_message_det_a,p_mesg_body,2000);
            l_dl_msglink_struct_h.h_message_det_a[2000]=APL_NULL_CHAR;
            if (strlen(p_mesg_body) >2000)
            {
               strncpy(l_dl_msglink_struct_h.h_message_det_b,p_mesg_body+2000,2000);
               l_dl_msglink_struct_h.h_message_det_b[2000]=APL_NULL_CHAR;
            }
            if (strlen(p_mesg_body) >4000)
            {
               strncpy(l_dl_msglink_struct_h.h_message_det_c,p_mesg_body+4000,2000);
               l_dl_msglink_struct_h.h_message_det_c[2000]=APL_NULL_CHAR;
            }
            if (strlen(p_mesg_body) >6000)
            {
               strncpy(l_dl_msglink_struct_h.h_message_det_d,p_mesg_body+6000,2000);
               l_dl_msglink_struct_h.h_message_det_d[2000]=APL_NULL_CHAR;
            }
            if (strlen(p_mesg_body) >8000)
            {
               strncpy(l_dl_msglink_struct_h.h_message_det_e,p_mesg_body+8000,2000);
               l_dl_msglink_struct_h.h_message_det_e[2000]=APL_NULL_CHAR;
            }

          strcpy(l_dl_msglink_struct_h.h_place_cd,p_ms_inc_msg_struct_h.place_cd);
          strcpy(l_dl_msglink_struct_h.h_description,p_ms_inc_msg_struct_h.description);
          strcpy(l_dl_msglink_struct_h.h_psetparty,p_ms_inc_msg_struct_h.psetparty);



			if(APL_FAILURE==DL_Mod_DLLinkNew(&l_dl_msglink_struct_h,l_debug_info_ptr))
			{
																																													fprintf(fl_userlog,"Failed To Insert into CMSGLINK Table\n");
			}
         if(APL_FAILURE == DL_Mod_DLLinkInfoNew(&h_inc_linkage_info,
                                          int_g_seq_num,
                                          p_ms_inc_msg_struct_h.count,
                                          l_debug_info_ptr))
         {
            fprintf(fl_userlog,"Failed To Insert into CMSGLINKDET Table\n");
         }
																																													
		}
	}
	else
	{
		strcpy(chr_g_msg_sts, "STP");
		 strcpy(l_dl_msglink_struct_h.h_dl_client,h_dl_client);
		 strcpy(l_dl_msglink_struct_h.h_indentity_no,h_indentity_no);
		 strcpy(l_dl_msglink_struct_h.h_msg_in_out_ind,"I");
		 strcpy(l_dl_msglink_struct_h.h_swift_msg_no,chr_g_new_msg_no);
		 if (APL_FAILURE == CO_RtvMachDtTime( l_dl_msglink_struct_h.h_new_dt, l_debug_info_ptr ))
		 {
		 APL_GOBACK_FAIL
		 }
		 
		 strcpy(l_dl_msglink_struct_h.h_information,chr_g_addinfo);
		 l_dl_msglink_struct_h.h_sequence_num=int_g_seq_num;

		l_dl_msglink_struct_h.h_dlrep_sequencenum=0;
		strncpy(l_dl_msglink_struct_h.h_message_det_a,p_mesg_body,2000);
            l_dl_msglink_struct_h.h_message_det_a[2000]=APL_NULL_CHAR;
            if (strlen(p_mesg_body) >2000)
            {
               strncpy(l_dl_msglink_struct_h.h_message_det_b,p_mesg_body+2000,2000);
               l_dl_msglink_struct_h.h_message_det_b[2000]=APL_NULL_CHAR;
            }
            if (strlen(p_mesg_body) >4000)
            {
               strncpy(l_dl_msglink_struct_h.h_message_det_c,p_mesg_body+4000,2000);
               l_dl_msglink_struct_h.h_message_det_c[2000]=APL_NULL_CHAR;
            }
            if (strlen(p_mesg_body) >6000)
            {
               strncpy(l_dl_msglink_struct_h.h_message_det_d,p_mesg_body+6000,2000);
               l_dl_msglink_struct_h.h_message_det_d[2000]=APL_NULL_CHAR;
            }
            if (strlen(p_mesg_body) >8000)
            {
               strncpy(l_dl_msglink_struct_h.h_message_det_e,p_mesg_body+8000,2000);
               l_dl_msglink_struct_h.h_message_det_e[2000]=APL_NULL_CHAR;
            }

          strcpy(l_dl_msglink_struct_h.h_place_cd,p_ms_inc_msg_struct_h.place_cd);
          strcpy(l_dl_msglink_struct_h.h_description,p_ms_inc_msg_struct_h.description);
          strcpy(l_dl_msglink_struct_h.h_psetparty,p_ms_inc_msg_struct_h.psetparty);



		if(APL_FAILURE==DL_Mod_DLLinkNew(&l_dl_msglink_struct_h,l_debug_info_ptr))
		{
			fprintf(fl_userlog,"Failed To Insert into CMSGLINK Table\n");
		}
         if(APL_FAILURE == DL_Mod_DLLinkInfoNew(&h_inc_linkage_info,
                                          int_g_seq_num,
                                          p_ms_inc_msg_struct_h.count,
                                          l_debug_info_ptr))
         {
            fprintf(fl_userlog,"Failed To Insert into CMSGLINKDET Table\n");
         }
		

		
		

		fprintf(fl_repairrpt,"Succesfully Generated A Trade With Account %s And Reference Number %s\n", l_sys_dl_deal_struct_ha->h_dl_client, l_sys_dl_deal_struct_ha->h_indentity_no);
   

     if (APL_FAILURE==EI_Mod_MQData(l_sys_dl_deal_struct_ha->h_dl_client,
                                        l_sys_dl_deal_struct_ha->h_indentity_no,
													 NULL,
													 NULL,
													 "B",
                                        l_debug_info_ptr))
               APL_GOBACK_FAIL

     
     if ( CO_Chk_CntryEnabled( "TRADE_PROCESSING", "MICEX_TRADES", &l_micexcond, l_debug_info_ptr ) == APL_FAILURE )
       APL_GOBACK_FAIL

     if ( (l_micexcond) && (strcmp(l_sys_dl_deal_struct_ha->h_classofdl,"51")==0) && (strcmp(l_sys_dl_deal_struct_ha->h_loccode,"MICX")==0) )
     {
         strcpy(p_intlenv_data_struct_h->processtion,"Trade Pre-Match");
         strcpy(l_dl_deal_pmtdet_struct_h->h_dl_client,l_sys_dl_deal_struct_ha->h_dl_client);
         strcpy(l_dl_deal_pmtdet_struct_h->h_indentity_no,l_sys_dl_deal_struct_ha->h_indentity_no);

         if (APL_FAILURE == CO_RtvSysDt(chr_h_buss_date, l_debug_info_ptr) )
         {
            fprintf(fl_userlog,"failed To get Business Date\n");
            APL_GOBACK_FAIL
         }

         strcpy(l_dl_deal_pmtdet_struct_h->h_confdate,chr_h_buss_date);
         strcpy(l_dl_deal_pmtdet_struct_h->h_verfied_with,l_sys_dl_deal_struct_ha->h_verfied_with);
         l_dl_deal_pmtdet_struct_h->h_diffamount=0;
         strcpy(l_dl_deal_pmtdet_struct_h->h_info1,l_sys_dl_deal_struct_ha->h_info1);
         strcpy(l_dl_deal_pmtdet_struct_h->h_ispart_,l_sys_dl_deal_struct_ha->h_ispart_);
         strcpy(l_dl_deal_pmtdet_struct_h->h_brkrno,l_sys_dl_deal_struct_ha->h_brkrno);
         l_dl_deal_pmtdet_struct_h->h_newquantity=0.0;
         l_dl_deal_pmtdet_struct_h->h_newamount=0.0;
         strcpy(l_dl_deal_pmtdet_struct_h->h_newindentity_no,APL_NULL_STRING);
         strcpy(l_dl_deal_pmtdet_struct_h->h_access_stamp,l_sys_dl_deal_struct_ha->h_access_stamp);
         l_dl_deal_pmtdet_struct_h->h_grossamount=0.0;
         l_dl_deal_pmtdet_struct_h->h_cpamt=0.0;
         strcpy(l_dl_deal_pmtdet_struct_h->h_comm_indentity_no,APL_NULL_STRING);
         strcpy(l_dl_deal_pmtdet_struct_h->h_exp_setl_date,APL_NULL_STRING);

         EXEC SQL SELECT STAT_REG_NO INTO :chr_l_statregno FROM DL_RUINSTRUMENT
         WHERE INSTR_CODE=:l_sys_dl_deal_struct_ha->h_instr_code;
         IS_ANY_ORA_ERROR

         strcpy(chr_l_srn_str,chr_l_statregno);
         strcat(chr_l_srn_str,":");
         sprintf(chr_l_str_temp,"%lf",l_sys_dl_deal_struct_ha->h_qty);
         strcat(chr_l_srn_str,chr_l_str_temp);
         strcat(chr_l_srn_str,";");

         if(APL_FAILURE == CRUDBUpdPmtDetFn( l_dl_deal_pmtdet_struct_h ,chr_l_srn_str ,p_intlenv_data_struct_h,l_debug_info_ptr ))
         {
            IS_ANY_ERROR_FATAL
            memset(chr_l_buf, NULL, BUFFER_LEN);
            sprintf(chr_l_buf, "\nFAILED TO PREMATCH TRADE %s, %s", l_sys_dl_deal_struct_ha->h_dl_client, l_sys_dl_deal_struct_ha->h_indentity_no);
            CO_ProcMonitor(p_fl_userlog, chr_l_buf, l_debug_info_ptr, p_intlenv_data_struct_h);

				  printf("\n chr_g_msgfile_name 13 is |%s|\n",chr_g_msgfile_name);
            if ( APL_FAILURE == MS_Mod_IncMsgSts("STP", "COULD NOT PRE-MATCH THE TRADE",
                                               l_sys_dl_deal_struct_ha->h_dl_client, NULL) )
            {
                  CO_ProcMonitor(APL_OUT_FILE, "Could not insert into IINMSGRP\n", NULL, NULL);
                  APL_GOBACK_FAIL
            }
				  printf("\n chr_g_msgfile_name 14 is |%s|\n",chr_g_msgfile_name);
            if ( APL_FAILURE == MS_Mod_IncMsgSts("STP", APL_NULL_STRING ,
                                               l_sys_dl_deal_struct_ha->h_dl_client, l_debug_info_ptr) )
            {
                  CO_ProcMonitor(APL_OUT_FILE, "Could not insert into IINMSGRP\n", NULL, NULL);
                  APL_GOBACK_FAIL
            }

         }
         else
         {
         strcpy(p_intlenv_data_struct_h->processtion,"Single Settlement");
         EXEC SQL SELECT ACCESS_STAMP INTO :chr_l_access_stamp FROM DL_DEAL
         WHERE CLIENT=:l_sys_dl_deal_struct_ha->h_dl_client AND IDENTIY_NO=:l_sys_dl_deal_struct_ha->h_indentity_no;
         IS_ANY_ORA_ERROR

         memset(l_deal_sstdet_struct_h, NULL, sizeof(DL_DEAL_SSTDET_STRUCT_H));
         strcpy(l_deal_sstdet_struct_h->h_access_stamp,chr_l_access_stamp);
         strcpy(l_deal_sstdet_struct_h->h_dl_client, l_sys_dl_deal_struct_ha->h_dl_client);
         strcpy(l_deal_sstdet_struct_h->h_indentity_no, l_sys_dl_deal_struct_ha->h_indentity_no);
         strcpy(l_deal_sstdet_struct_h->h_ispart_, l_sys_dl_deal_struct_ha->h_ispart_);
         l_deal_sstdet_struct_h->h_newquantity = 0.0;
         l_deal_sstdet_struct_h->h_newamount = 0.0;
         strcpy(l_deal_sstdet_struct_h->h_newindentity_no, APL_NULL_STRING);
         strcpy(l_deal_sstdet_struct_h->h_instrdate,chr_h_buss_date);
         if (VAL_VP_DEAL(l_sys_dl_deal_struct_ha->h_dealcd[0]))
         {
            strcpy(l_deal_sstdet_struct_h->h_moneydate, chr_h_buss_date);
         }
         l_deal_sstdet_struct_h->h_pr = l_sys_dl_deal_struct_ha->h_pr;
         l_deal_sstdet_struct_h->h_brokercomm = l_sys_dl_deal_struct_ha->h_brokercomm;
         strcpy(l_deal_sstdet_struct_h->h_sel_forreg, APL_NULL_STRING);
         l_deal_sstdet_struct_h->h_delta_000 = l_sys_dl_deal_struct_ha->h_delta_000;
         l_deal_sstdet_struct_h->h_delta_001 = l_sys_dl_deal_struct_ha->h_delta_001;
         l_deal_sstdet_struct_h->h_delta_002 = l_sys_dl_deal_struct_ha->h_delta_002;
         l_deal_sstdet_struct_h->h_pendregquantity = l_sys_dl_deal_struct_ha->h_pendregquantity;
         l_deal_sstdet_struct_h->h_marktrfquantity = l_sys_dl_deal_struct_ha->h_marktrfquantity;
         l_deal_sstdet_struct_h->h_mcomplquantity = l_sys_dl_deal_struct_ha->h_mcomplquantity;
         l_deal_sstdet_struct_h->h_rec_int_000 = l_sys_dl_deal_struct_ha->h_rec_int_000;

         if (APL_FAILURE == DL_Proc_DLSetlRRMMSing(   l_deal_sstdet_struct_h,
                                                APL_NULL_STRING,
                                                chr_l_srn_str,
                                                p_intlenv_data_struct_h,
                                                l_debug_info_ptr ))
         {
            IS_ANY_ERROR_FATAL
            memset(chr_l_buf, NULL, BUFFER_LEN);
            sprintf(chr_l_buf, "\nFAILED TO SETTLE TRADE %s, %s", l_sys_dl_deal_struct_ha->h_dl_client, l_sys_dl_deal_struct_ha->h_indentity_no);
            CO_ProcMonitor(p_fl_userlog, chr_l_buf, l_debug_info_ptr, p_intlenv_data_struct_h);

				  printf("\n chr_g_msgfile_name 15 is |%s|\n",chr_g_msgfile_name);
            if ( APL_FAILURE == MS_Mod_IncMsgSts("STP", "COULD NOT SETTLE THE TRADE",
                                               l_sys_dl_deal_struct_ha->h_dl_client, NULL) )
            {
                  CO_ProcMonitor(APL_OUT_FILE, "Could not insert into IINMSGRP\n", NULL, NULL);
                  APL_GOBACK_FAIL
            }
            

         }
         }

     }
     
	}

	APL_GOBACK_SUCCESS

   RETURN_FAILURE:
   APL_IF_DEBUG
   {
      CO_ProcMonitor(p_fl_userlog,
               "Exiting out of DL_Mod_SingDLInstPrty unsuccessfully\n",
               NULL,NULL);
   }
	APL_FREE(l_progseqnum_struct_h);
	APL_FREE(l_sys_dl_deal_struct_ha);
   return APL_FAILURE;

   RETURN_SUCCESS:
   APL_IF_DEBUG
   {
      CO_ProcMonitor(p_fl_userlog,
               "Exiting out of DL_Mod_SingDLInstPrty sucessfully\n",
               NULL,NULL);
   }
	APL_FREE(l_progseqnum_struct_h);
	APL_FREE(l_sys_dl_deal_struct_ha);
   return APL_SUCCESS;
}






int   MS_Mod_TrdDef( char						*chr_p_client,
							char						*p_dealcd,
							char						*p_domcpac,
							char						*p_instr_code,
							char						*chr_p_refno,
							double					p_quantity,
							char						*p_ccy,
							char						*p_dealdate,
							char						*p_setldt,
							char						*p_details,
							char						*p_countclt,
							char						*p_countcltnm,
							char						*p_clientof,
							double					chr_p_amount,
							char						*p_cash_client,
							char						*p_typeofdeal,
							SYS_DL_DEAL_STRUCT_H	*p_sys_dl_deal_struct_h_e,
							FILE						*fl_userlog,
							INTL_ENV_DATA_STRUCT_H	*p_intlenv_data_struct_h,
							DEBUG_INFO_STRUCT_H			**l_debug_info_ptr)

{







char  h_status[3]            = APL_NULL_STRING;
char  h_loccode[5]              = APL_NULL_STRING;
char  h_ex_arena[3]               = APL_NULL_STRING;
char  h_currencycode[APL_CCYCODE_LEN] = APL_NULL_STRING;
char  h_regbrflag[3]              = APL_NULL_STRING;
char	h_allow_rf[2]						= APL_NULL_STRING;
char  h_allow_rvp[2]						= APL_NULL_STRING;
char  h_allow_df[2]						= APL_NULL_STRING;
char	h_allow_dvp[2]						= APL_NULL_STRING;

char  h_clnt_clr_name[66]						= APL_NULL_STRING;
char  h_domestic[2]              = APL_NULL_STRING;
char  chr_h_cp_domicile[2]           = APL_NULL_STRING;
char  h_fx_sell_flag[2]				= APL_NULL_STRING;	
char  h_fx_buy_flag[2]				= APL_NULL_STRING;	
char	h_spotdlflg[2]				= APL_NULL_STRING;
char	chr_h_loc_posn_status[4]			= APL_NULL_STRING;

char chr_l_isacclocal[2]					= APL_NULL_STRING;
char chr_l_iscplocal[2]					= APL_NULL_STRING;

int   int_retstat 							= 0;
int	int_h_count 							= 0;

short l_reginstr_set					= 0;
short int_l_exists 						= 0;
short l_grcondexists					= 0;
short l_micexcond                = 0;
char	chr_h_system_date[APL_DATE_LEN]	= APL_NULL_STRING;
char chr_cust_partial_flg[2]				=APL_NULL_STRING;
int	int_l_count_gfcid 					= 0;
short l_gfcid_exists 				= 0;



#ifdef EMU_PROCESSING
	int int_l_ccy_flg = 0;

	EXEC SQL BEGIN DECLARE SECTION;
		char chr_h_emu_ccy_b[APL_CCYCODE_LEN];
		short int int_i_emu_ccy = 0;
		struct sqlca sqlca;
		EXEC SQL VAR chr_h_emu_ccy_b IS STRING;
	EXEC SQL END   DECLARE SECTION;

	sqlca.sqlcode = 0L;
	memset(chr_h_emu_ccy_b, APL_NULL_CHAR, APL_CCYCODE_LEN);
#endif




strcpy(p_sys_dl_deal_struct_h_e->h_deal_status, STATUS_UAUTH);
p_sys_dl_deal_struct_h_e->h_pr = 0.0;

strcpy(p_sys_dl_deal_struct_h_e->h_dl_client,chr_p_client);
strcpy(p_sys_dl_deal_struct_h_e->h_indentity_no,chr_p_refno);

strcpy(p_sys_dl_deal_struct_h_e->h_dlt, p_dealdate);
strcpy(p_sys_dl_deal_struct_h_e->h_setldt, p_setldt);
strcpy(p_sys_dl_deal_struct_h_e->h_info1, p_details);

strcpy(p_sys_dl_deal_struct_h_e->h_domcpclt_cd,p_domcpac);
strcpy(p_sys_dl_deal_struct_h_e->h_instr_code,p_instr_code);
strcpy(p_sys_dl_deal_struct_h_e->h_dealcd,p_dealcd);
strcpy(p_sys_dl_deal_struct_h_e->h_entry,"S");
p_sys_dl_deal_struct_h_e->h_qty = p_quantity;

strcpy(p_sys_dl_deal_struct_h_e->h_currencycode, p_ccy);
p_sys_dl_deal_struct_h_e->h_amt = chr_p_amount;
p_sys_dl_deal_struct_h_e->h_origamount = p_sys_dl_deal_struct_h_e->h_amt;



#ifdef EMU_PROCESSING
	if ( strlen(p_ccy) )
	{
		int_l_ccy_flg = 0;

		switch ( int_g_emutransperiod )
		{
			case 0: break;

			case 1:

				if ( APL_FAILURE == CO_Chk_SplVal("EMUCONV", "NCD_CCY", p_ccy,
														&int_l_ccy_flg, l_debug_info_ptr) )
				{
					APL_GOBACK_FAIL
				}

				if ( !int_l_ccy_flg )
				{
					CO_InsertErr(l_debug_info_ptr, ERR_DEAL_CURRENCY_NOT_ALLOWED, p_ccy,
									APL_NULL_STRING, 
									APL_NULL_STRING, __LINE__, __FILE__);
				}
				break;
			case 2:
			case 3:
				if ( APL_FAILURE == CO_Chk_SplVal("EMUCONV", "EMU_CCY", p_ccy,
														&int_l_ccy_flg, l_debug_info_ptr) )
				{
					APL_GOBACK_FAIL
				}

				if ( !int_l_ccy_flg )
				{
					CO_InsertErr(l_debug_info_ptr, ERR_DEAL_CURRENCY_NOT_ALLOWED, p_ccy,
										APL_NULL_STRING, 
										APL_NULL_STRING, __LINE__, __FILE__);
				}
				break;

			default:break;
		}
	}

#endif


strcpy(p_sys_dl_deal_struct_h_e->h_classofdl, p_typeofdeal);

if ( !strlen(p_sys_dl_deal_struct_h_e->h_classofdl) )
{
	if (!strcmp(p_domcpac,l_mt_core_sys_params_struct_h.custody_clt_cd)) 
	{
		strcpy(p_sys_dl_deal_struct_h_e->h_classofdl,DL_BOOKTRF_IND);
	}
	else
	{
		strcpy(p_sys_dl_deal_struct_h_e->h_classofdl,NORMALDEAL);
	}
}

if(!strcmp(p_domcpac,l_mt_core_sys_params_struct_h.custody_clt_cd))
{
   if ( CO_Chk_CntryEnabled( "TRADE_MAINT", "INTRAFIRM_TRADE", &l_gfcid_exists, l_debug_info_ptr ) == APL_FAILURE )
      APL_GOBACK_FAIL
   printf("\n-|||||||----------> entered the processtion for INTRAFIRM_TRADE \n");
   if ( l_gfcid_exists && ( strcmp(p_countclt, APL_NULL_STRING)) )
	{	
		EXEC SQL SELECT COUNT(*)
		INTO :int_l_count_gfcid
	 	FROM MT_CLIENT A,MT_CLIENT B 
		WHERE A.CLN_UNIQ_GCUSTODY_ID=B.CLN_UNIQ_GCUSTODY_ID  
		AND a.CLN_CODE = :chr_p_client 
		AND b.CLN_CODE =:p_countclt;
		IS_ANY_ORA_ERROR
		printf("\n----->>>>>1111111value of int_l_count_gfcid is %d\n",int_l_count_gfcid);
		if(int_l_count_gfcid>0)
		{
			strcpy(p_sys_dl_deal_struct_h_e->h_classofdl,INTRAFIRM);
		}
	}
   else if ( l_gfcid_exists && ( !strcmp(p_countclt, APL_NULL_STRING))  )
	{	
		EXEC SQL SELECT COUNT(*)
		INTO :int_l_count_gfcid
	 	FROM MT_CLIENT A,MT_CLIENT B 
		WHERE A.CLN_UNIQ_GCUSTODY_ID=B.CLN_UNIQ_GCUSTODY_ID  
		AND a.CLN_CODE = :chr_p_client 
		AND b.CLN_CODE =:p_clientof;
		IS_ANY_ORA_ERROR
		printf("-----------::::::::>>2222value of int_l_count_gfcid is %d\n",int_l_count_gfcid);
		if(int_l_count_gfcid>0)
		{
			strcpy(p_sys_dl_deal_struct_h_e->h_classofdl,INTRAFIRM);
		}
	}
}


	
strcpy(p_sys_dl_deal_struct_h_e->h_ispart_,"N");
strcpy(p_sys_dl_deal_struct_h_e->h_origindentity_no,p_sys_dl_deal_struct_h_e->h_indentity_no);

strcpy(p_sys_dl_deal_struct_h_e->h_countclt, p_countclt);
strcpy(p_sys_dl_deal_struct_h_e->h_countcltnm, p_countcltnm);
strcpy(p_sys_dl_deal_struct_h_e->h_clientof, p_clientof);

p_sys_dl_deal_struct_h_e->h_origquantity = p_sys_dl_deal_struct_h_e->h_qty;
strcpy(p_sys_dl_deal_struct_h_e->h_cash_client,p_cash_client); 



if (APL_FAILURE == CO_RtvMachDtTime(chr_h_system_date,l_debug_info_ptr))
{
   printf("failed to get system chr_date\n");
   APL_GOBACK_FAIL

}

strcpy(p_sys_dl_deal_struct_h_e->h_newdt, chr_h_system_date);
strcpy(p_sys_dl_deal_struct_h_e->h_maker_dt, chr_h_system_date);
strcpy(p_sys_dl_deal_struct_h_e->h_maker, "SYSTEM");
strcpy(p_sys_dl_deal_struct_h_e->h_access_stamp, chr_h_system_date);
strcpy(p_sys_dl_deal_struct_h_e->h_domcp_custodyclt,p_sys_dl_deal_struct_h_e->h_domcpclt_cd);



if (APL_FAILURE == MT_Rtv_InstrDet(p_instr_code,
													h_status,
                                       h_loccode,
													h_ex_arena,
                                       h_currencycode,
													h_regbrflag,
													h_allow_rf,
													h_allow_rvp,
													h_allow_df,
													h_allow_dvp,
                                       &int_retstat, 
													l_debug_info_ptr) )
{
   if (int_retstat == IV_CRITCAL_ERROR_IND)
   {
      fprintf(fl_userlog,"Fatal Error in MT_INSTRUMENT\n");
		CO_InsertErr(l_debug_info_ptr,
							DB_ERR_NO,
							"INSTRUMENT",
							APL_NULL_STRING,
							APL_NULL_STRING,
							__LINE__,
							__FILE__);
      APL_GOBACK_FAIL
   }

   if (int_retstat == IV_NO_DATA_FOUND_ERR )
   {
      fprintf(fl_userlog,"No Data int_found for the Instrode %s\n",p_instr_code);
		CO_InsertErr(l_debug_info_ptr,
							ERR_INSTR_NOTFND,
							p_instr_code,
							APL_NULL_STRING,
							APL_NULL_STRING,
							__LINE__,
							__FILE__);
   }
}

	
	int_l_exists=0;
	if (APL_FAILURE == CO_Chk_CntryEnabled("TRD_LRTRDTYP", "LRTRDTYP_NOT_NULL",
												 &int_l_exists, l_debug_info_ptr))
	{
		APL_GOBACK_FAIL
	}
	if (int_l_exists)
	{
		int_l_exists=0;
      if(CO_Chk_CntryEnabled("TRD_LRTRDTYP",
                        "LRTRDTYP_MOROCCO",
                        &int_l_exists,
                        l_debug_info_ptr)==APL_FAILURE)
         APL_GOBACK_FAIL
      else
			if (int_l_exists)
			{
				if(!strcmp(p_dealcd, APL_DEAL_DF))			
					strcpy(p_sys_dl_deal_struct_h_e->h_lrdltype,S_MOLRDEALTYP_DF);
				else if(!strcmp(p_dealcd, APL_DEAL_RF))
				{
					if(!strcmp(h_regbrflag, APL_INSTRU_BEAR))
						strcpy(p_sys_dl_deal_struct_h_e->h_lrdltype,S_MOLRDEALTYP_RFBR);
					else if(!strcmp(h_regbrflag, APL_INSTRU_REGD))
						strcpy(p_sys_dl_deal_struct_h_e->h_lrdltype,S_MOLRDEALTYP_RFRG);
				}
				else if(!strcmp(p_dealcd, APL_DEAL_DVP))
				{
					if(!strcmp(h_regbrflag, APL_INSTRU_BEAR))
						strcpy(p_sys_dl_deal_struct_h_e->h_lrdltype,S_MOLRDEALTYP_DVPBR);
					else if(!strcmp(h_regbrflag, APL_INSTRU_REGD))
						strcpy(p_sys_dl_deal_struct_h_e->h_lrdltype,S_MOLRDEALTYP_DVPRG);
				}
				else if(!strcmp(p_dealcd, APL_DEAL_RVP))
				{
					if(!strcmp(h_regbrflag, APL_INSTRU_BEAR))
						strcpy(p_sys_dl_deal_struct_h_e->h_lrdltype,S_MOLRDEALTYP_RVPBR);
					else if(!strcmp(h_regbrflag, APL_INSTRU_REGD))
						strcpy(p_sys_dl_deal_struct_h_e->h_lrdltype,S_MOLRDEALTYP_RVPRG);
				}
			}
			else
			{  
				
				if(CO_Chk_CntryEnabled("TRD_LRTRDTYP", "LRTRDTYP_POLAND",  &int_l_exists, l_debug_info_ptr)==APL_FAILURE)
					APL_GOBACK_FAIL

				if(int_l_exists)
				{
            	if (strcmp(p_sys_dl_deal_struct_h_e->h_domcpclt_cd,l_mt_core_sys_params_struct_h.custody_clt_cd))
              	{
                	if ( strcmp(p_sys_dl_deal_struct_h_e->h_dealcd,"4")==0)
                   	strcpy(p_sys_dl_deal_struct_h_e->h_lrdltype,"01");
                	else if ( strcmp(p_sys_dl_deal_struct_h_e->h_dealcd,"3")==0)
                   	strcpy(p_sys_dl_deal_struct_h_e->h_lrdltype,"02");
                	else
                   	strcpy(p_sys_dl_deal_struct_h_e->h_lrdltype,"03");
              	}
					else
						strcpy(p_sys_dl_deal_struct_h_e->h_lrdltype,"04");
				}
				else	
					strcpy(p_sys_dl_deal_struct_h_e->h_lrdltype,"04");
			}
	}

if (!strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind ,"Y" ))
{
   strcpy(p_sys_dl_deal_struct_h_e->h_loccode,h_loccode);

}

if(strcmp(p_sys_dl_deal_struct_h_e->h_ex_arena,APL_NULL_STRING)==0)
{
	strcpy(p_sys_dl_deal_struct_h_e->h_ex_arena,h_ex_arena);
}




if ( VAL_FREE_DEAL(p_dealcd[0]) ) 
{
	#ifdef EMU_PROCESSING
		switch( int_g_emutransperiod )
		{
			case 1:
		     EXEC SQL SELECT FIELD_VAL
			 		    INTO :chr_h_emu_ccy_b INDICATOR :int_i_emu_ccy
				       FROM PRO_GSSPLVAL
				       WHERE ((MAIN_FUN = 'EMUCONV') AND
				       (SUB_PROCESS = 'NCD_CCY') AND
				       (NATION = :g_mt_commonsys_params_struct_h.nation_code));

            IS_ANY_ORA_ERROR

				if ( APL_ZERO_RESULT_SET )
				{
					fprintf(fl_userlog, "NCD_CCY not int_found in GSSPLVAL. Please check the static table for special values.\n");
					APL_GOBACK_FAIL
				}
				strcpy(p_sys_dl_deal_struct_h_e->h_currencycode,chr_h_emu_ccy_b);
				break;

			case 2:
			case 3:
				EXEC SQL SELECT FIELD_VAL
					INTO :chr_h_emu_ccy_b INDICATOR :int_i_emu_ccy
					FROM PRO_GSSPLVAL
					WHERE ((MAIN_FUN = 'EMUCONV') AND
						(SUB_PROCESS = 'EMU_CCY') AND
						(NATION = :g_mt_commonsys_params_struct_h.nation_code));

				IS_ANY_ORA_ERROR

				if ( APL_ZERO_RESULT_SET )
				{
					fprintf(fl_userlog, "EMU_CCY not int_found in GSSPLVAL. Please check the static table for special values.\n");
					APL_GOBACK_FAIL
				}
				strcpy(p_sys_dl_deal_struct_h_e->h_currencycode,chr_h_emu_ccy_b);
				break;

			case 0 :
			default:
				 strcpy(p_sys_dl_deal_struct_h_e->h_currencycode,h_currencycode);
				 break;
		 }
	#else
		strcpy(p_sys_dl_deal_struct_h_e->h_currencycode,h_currencycode);
	#endif
}



if (APL_FAILURE == MT_Rtv_AccDet_A(chr_p_client,
												  h_clnt_clr_name,
                                      h_domestic,
												  h_fx_sell_flag,
                                      h_fx_buy_flag,
												  h_spotdlflg,
                                      &int_retstat,
												  l_debug_info_ptr))
{
   if (int_retstat == IV_CRITCAL_ERROR_IND)
   {
      fprintf(fl_userlog,"Fatal Error in MT_CLIENT\n");
		CO_InsertErr(l_debug_info_ptr,
							DB_ERR_NO,
							"CACCOUNT",
							APL_NULL_STRING,
							APL_NULL_STRING,
							__LINE__,
							__FILE__);
      APL_GOBACK_FAIL
   }

   if (int_retstat == IV_NO_DATA_FOUND_ERR )
   {
      fprintf(fl_userlog,"No Data int_found for the Account %s\n",chr_p_client);
		CO_InsertErr(l_debug_info_ptr,
							ERR_ACCNOT_FND,
							"SAFEKEEPING ACCOUNT",
							chr_p_client,
							APL_NULL_STRING,
							__LINE__,
							__FILE__);
   }
}
if ( APL_FAILURE == MT_Rtv_AccFldVal(chr_p_client, "partialflg",
                                          chr_cust_partial_flg, l_debug_info_ptr) )
      {
         fprintf(fl_userlog," Account %s  not int_found in Account Table\n",chr_p_client);
			CO_InsertErr(l_debug_info_ptr,
                     ERR_ACCNOT_FND,
                     "SAFEKEEPING ACCOUNT",
                     chr_p_client,
                     APL_NULL_STRING,
                     __LINE__,
                     __FILE__);	
      }
		
	strcpy(p_sys_dl_deal_struct_h_e->h_allow_part_s,chr_cust_partial_flg);

if (!strcmp(h_domestic,"1"))
   strcpy(chr_l_isacclocal,"Y");
else
   strcpy(chr_l_isacclocal,"N");



if (!strcmp(l_mt_message_sys_params_struct_h.gen_fx_adv_ind,"Y"))
{
   if (	p_sys_dl_deal_struct_h_e->h_dealcd[0] == DEALCD_DVP	)
      strcpy(p_sys_dl_deal_struct_h_e->h_fx_reqd,h_fx_sell_flag);
   else if (	p_sys_dl_deal_struct_h_e->h_dealcd[0] ==  DEALCD_RVP	)
      strcpy(p_sys_dl_deal_struct_h_e->h_fx_reqd,h_fx_buy_flag);
	else 
		strcpy(p_sys_dl_deal_struct_h_e->h_fx_reqd, "N");

}
else
{
   strcpy(p_sys_dl_deal_struct_h_e->h_fx_reqd,"N");
}

if (		(!strcmp(l_mt_core_sys_params_struct_h.proc_spot_dl_ind,"Y"))
      && ( VAL_VP_DEAL(p_dealcd[0]) )	)
   strcpy(p_sys_dl_deal_struct_h_e->h_isspotdl,h_spotdlflg);
else
   strcpy(p_sys_dl_deal_struct_h_e->h_isspotdl,"N");





if (APL_FAILURE == MT_Rtv_DomAcc(p_domcpac,
												  chr_h_cp_domicile,
												&int_retstat,
                                    l_debug_info_ptr))
{
   if (int_retstat == IV_CRITCAL_ERROR_IND)
   {
      fprintf(APL_OUT_FILE,"Fatal Error in MT_CLIENT\n");
		CO_InsertErr(l_debug_info_ptr,
							DB_ERR_NO,
							"CACCOUNT",
							APL_NULL_STRING,
							APL_NULL_STRING,
							__LINE__,
							__FILE__);
      APL_GOBACK_FAIL
   }

   if (int_retstat == IV_NO_DATA_FOUND_ERR )
   {
      fprintf(APL_OUT_FILE,"No Data int_found for the Account %s\n",p_domcpac);
		CO_InsertErr(l_debug_info_ptr,
							ERR_ACCNOT_FND,
							"DOMESTIC CP",
							p_domcpac,
							APL_NULL_STRING,
							__LINE__,
							__FILE__);
   }
}

	
	if ((!strcmp(l_mt_core_sys_params_struct_h.ord_proc_ind,"Y"))
  		&& 	(!strcmp(p_domcpac,l_mt_core_sys_params_struct_h.brokerage_cd)))
	{
   	strcpy(p_sys_dl_deal_struct_h_e->h_dlfromord,"Y");
	}
	else
	{
   	strcpy(p_sys_dl_deal_struct_h_e->h_dlfromord,"N");
	}

	if (!strcmp(chr_h_cp_domicile,"1"))
	{
		strcpy(chr_l_iscplocal, "Y");
	}
	else
	{
		strcpy(chr_l_iscplocal, "N");

	}


	

	if (!strcmp(l_mt_core_sys_params_struct_h.proc_reg_ind,"Y"))
	{
   	
	
  	 	if (!strcmp(h_regbrflag,"BR"))
   	{
      	strcpy(p_sys_dl_deal_struct_h_e->h_pos_stat,STATUS_POS_000);
 	      strcpy(p_sys_dl_deal_struct_h_e->h_ispymtlocal,"N");
   	   strcpy(p_sys_dl_deal_struct_h_e->h_reginstr_ind,"N");
   	}
		
		else if (!strcmp(h_regbrflag, REG_INSTR_IND) )
		{
			 if (!strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind, "Y") )
			{
				

			 	if (APL_FAILURE == MT_Rtv_Loc(h_loccode,
																chr_h_loc_posn_status,
																&int_retstat,
																l_debug_info_ptr) )
				{
					if (int_retstat == IV_CRITCAL_ERROR_IND)
					{
						CO_InsertErr(l_debug_info_ptr,
										DB_ERR_NO,
										"CLOCATION",
										APL_NULL_STRING,
										APL_NULL_STRING,
										__LINE__,
										__FILE__);
						fprintf(fl_userlog,"Fatal Error In CLOCATION\n");
						APL_GOBACK_FAIL
					}
					else if (int_retstat == IV_NO_DATA_FOUND_ERR )
					{
						CO_InsertErr(l_debug_info_ptr,
										ERR_LOCN_NOTFND,
										h_loccode,
										APL_NULL_STRING,
										APL_NULL_STRING,
										__LINE__,
										__FILE__);
						fprintf(fl_userlog,"Location %s not int_found in the System\n",h_loccode);
					}
					else if (int_retstat == IV_COLUMN_NULL_ERR)
					{
						strcpy(p_sys_dl_deal_struct_h_e->h_pos_stat, STATUS_POS_001);
					}
				}
				strcpy(p_sys_dl_deal_struct_h_e->h_pos_stat,chr_h_loc_posn_status);
				strcpy(p_sys_dl_deal_struct_h_e->h_ispymtlocal, "N");
				strcpy(p_sys_dl_deal_struct_h_e->h_reginstr_ind,"Y");
			}
			else if (!strcmp(l_mt_core_sys_params_struct_h.loc_proc_ind ,"N") )
			{
				strcpy(p_sys_dl_deal_struct_h_e->h_ispymtlocal, "N");
				strcpy(p_sys_dl_deal_struct_h_e->h_reginstr_ind,"Y");
				strcpy(p_sys_dl_deal_struct_h_e->h_pos_stat, STATUS_POS_001);
			}
		
			
			if (APL_FAILURE == CO_Chk_CntryEnabled( "INCOMING_MSG",
															 "REGSEC_SETUP",
															 &l_reginstr_set,
															 l_debug_info_ptr) )
			{
				APL_GOBACK_FAIL
			}

			
			if (l_reginstr_set)
			{
 	  			if ( 		(!strcmp(p_sys_dl_deal_struct_h_e->h_dlfromord,"N"))
         			&& (!strcmp(h_regbrflag, REG_INSTR_IND)) )
   			{
      			strcpy(p_sys_dl_deal_struct_h_e->h_pos_stat,STATUS_POS_001);
					strcpy(p_sys_dl_deal_struct_h_e->h_ispymtlocal, "N");
					strcpy(p_sys_dl_deal_struct_h_e->h_reginstr_ind, "Y");
   			}

 		  		if ( 	  (!strcmp(chr_l_isacclocal,"N"))
 		      	  && (!strcmp(chr_l_iscplocal,"N")) )
   			{
      			if (	p_dealcd[0] == DEALCD_DF)
					{
         			strcpy(p_sys_dl_deal_struct_h_e->h_reginstr_ind,"N");
						strcpy(p_sys_dl_deal_struct_h_e->h_ispymtlocal, "N");
					}
      			else if (	p_dealcd[0] == DEALCD_RF)
					{
         			strcpy(p_sys_dl_deal_struct_h_e->h_reginstr_ind,"Y");
						strcpy(p_sys_dl_deal_struct_h_e->h_ispymtlocal,"N");
					}
   			}
				else
				{
   				strcpy(p_sys_dl_deal_struct_h_e->h_reginstr_ind,"Y");
   				strcpy(p_sys_dl_deal_struct_h_e->h_ispymtlocal,"N");
				}
			}
		}	 
	} 		 
	else
	{
		
   	strcpy(p_sys_dl_deal_struct_h_e->h_reginstr_ind,"N");
		strcpy(p_sys_dl_deal_struct_h_e->h_ispymtlocal,"N");
	}

	if ( CO_Chk_CntryEnabled( "MIS_INSTXN", "GR_ON_EXCHANGE", &l_grcondexists, l_debug_info_ptr ) == APL_FAILURE )
		APL_GOBACK_FAIL

	if ( l_grcondexists ) 
	{
		if ( strcmp(p_sys_dl_deal_struct_h_e->h_classofdl,"50") == 0  ) 
			strcpy(p_sys_dl_deal_struct_h_e->h_loccode,"REM");
		else if ( strcmp(p_sys_dl_deal_struct_h_e->h_classofdl,"35") == 0  ) 
			strcpy(p_sys_dl_deal_struct_h_e->h_loccode,"CSD");
	}

	

   if ( CO_Chk_CntryEnabled( "TRADE_PROCESSING", "MICEX_TRADES", &l_micexcond, l_debug_info_ptr ) == APL_FAILURE )
      APL_GOBACK_FAIL

   if ( l_micexcond && ( strcmp(p_sys_dl_deal_struct_h_e->h_classofdl,"51") == 0) ) 
   {
      strcpy(p_sys_dl_deal_struct_h_e->h_loccode,"MICX");
   }


	APL_GOBACK_SUCCESS

   RETURN_FAILURE:
   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,
               "Exiting out of SetDefCTRADEFn unsuccessfully\n",
               NULL,NULL);
   }
   return APL_FAILURE;

   RETURN_SUCCESS:
   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE,
               "Exiting out of SetDefCTRADEFn sucessfully\n",
               NULL,NULL);
   }
   return APL_SUCCESS;
}




int	MS_Rtv_RefNo_B(	char				*p_passrefno,
								DEBUG_INFO_STRUCT_H	**l_debug_info_ptr) 
{

	PRO_GSEQNUM_STRUCT_H	*l_progseqnum_struct_h;
	int 						int_l_jul_date 						 = 0;
	int						int_l_seq_num						 = 0;
	int						int_num								 = 0;
	int						i 									 = 0;
	char						chr_h_system_date[APL_DATE_LEN] = APL_NULL_STRING;
	char						chr_h_temp[10]						 = APL_NULL_STRING;
	char						**temp;
	char						chr_h_time[7]						 = APL_NULL_STRING;
	char						h_sequence_num[5]					 = APL_NULL_STRING;
	char						chr_l_pad_char[2]					 = APL_NULL_STRING;
	char						int_h_jul_date[4]					 = APL_NULL_STRING;

	l_progseqnum_struct_h = (PRO_GSEQNUM_STRUCT_H *)calloc(1,sizeof(PRO_GSEQNUM_STRUCT_H));
	APL_MALLOC_FAIL(l_progseqnum_struct_h);

	memset(l_progseqnum_struct_h,NULL,sizeof(PRO_GSEQNUM_STRUCT_H));
	memset(chr_h_system_date, APL_NULL_CHAR	, APL_DATE_LEN);
	memset(chr_h_temp, APL_NULL_CHAR , 9);
	memset(chr_h_time, APL_NULL_CHAR , 7);
	memset(h_sequence_num, APL_NULL_CHAR , 5);

	
	strcpy(l_progseqnum_struct_h->sequencename, DEAL_PASSREFNO_SEQNAME);
	
	int_l_seq_num = CO_RtvNxtSeqNum(l_progseqnum_struct_h ,
                                l_debug_info_ptr);

   if (APL_FAILURE == int_l_seq_num )
   {
      APL_GOBACK_FAIL
   }
	
	sprintf(h_sequence_num, "%d",int_l_seq_num);
	
	

	chr_l_pad_char[0]	= REFNO_PAD_CHAR;
	chr_l_pad_char[1]	= '\0';

	if (APL_FAILURE == CO_PadString( h_sequence_num,
											'L',
											5,
											chr_l_pad_char,
											l_debug_info_ptr ) )
	{
		APL_GOBACK_FAIL
	}



	if (APL_FAILURE == CO_RtvSysDtTime(chr_h_system_date,
														 l_debug_info_ptr) )
	{
		APL_GOBACK_FAIL
	}
	
	for ( i = 0; i< 9 ; i++)
	{
		chr_h_temp[i]	= chr_h_system_date[i + 11];	
	}
	
	strcat(chr_h_temp,":");	

	if (APL_FAILURE == CO_SplitStr	(	chr_h_temp,
													':',
													&int_num,
													&temp		) )
	{
		APL_GOBACK_FAIL
	}

	if (int_num ==0 )
   {
      APL_GOBACK_FAIL
   }

	strcpy(chr_h_time, temp[0]);
	strcat(chr_h_time, temp[1]);
	strcat(chr_h_time, temp[2]);
	
	printf("the chr_h_time is %s\n",chr_h_time);
	
	
	

	if (APL_FAILURE == CO_Rtv_JulDt( &int_l_jul_date,
												  l_debug_info_ptr) )
	{
		APL_GOBACK_FAIL	
	}
	
	sprintf(int_h_jul_date, "%d",int_l_jul_date);
	printf("the int_h_jul_date is %s\n",int_h_jul_date);
	
	strcpy(p_passrefno, int_h_jul_date);
	strcat(p_passrefno, chr_h_time);
	strcat(p_passrefno, h_sequence_num);
		
	printf("the identity number returned from the CreateRefNo processtion is %s\n",p_passrefno);

	APL_GOBACK_SUCCESS

	
	RETURN_SUCCESS:
   APL_IF_DEBUG
   {
      CO_ProcMonitor(APL_OUT_FILE, 
					"Exiting successfully out of MS_Rtv_RefNo_B().\n", 
					NULL, NULL);
   }
   return APL_SUCCESS;

   RETURN_FAILURE:
      APL_IF_DEBUG
      {
         CO_ProcMonitor(APL_OUT_FILE, 
						"Exiting unsuccessfully out of MS_Rtv_RefNo_B().\n",
						NULL,NULL);
      }
      return APL_FAILURE;
}



int MS_Rtv_IncMsgSrlNo(DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	char chr_h_now[APL_DATE_LEN] = APL_NULL_STRING;
	char chr_l_mac_date_time[APL_DATE_LEN] = APL_NULL_STRING;

	EXEC SQL BEGIN DECLARE SECTION;

	struct sqlca sqlca;
	EXEC SQL VAR chr_h_now IS STRING;
		
	EXEC SQL END DECLARE SECTION;		

	sqlca.sqlcode = 0L;

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE, "\nInside MS_Rtv_IncMsgSrlNo\n", NULL, NULL);
	}

	

	

	if (APL_FAILURE == CO_RtvMachDtTime( chr_l_mac_date_time, l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}
	
	sscanf(chr_l_mac_date_time, "%[^ ]", chr_h_now);
	strcat(chr_h_now, APL_NULL_TIME);

	EXEC SQL SELECT NVL(MAX(srl_num),0) + 1 
			INTO :int_g_srl_no
			FROM MS_INMSGRP
			WHERE REPORT_DT = :chr_h_now;

	IS_ANY_ORA_ERROR

	APL_IF_DEBUG
	{
		memset( chr_l_buf, NULL, BUFFER_LEN );
		sprintf( chr_l_buf, "Srl No %d generated for %s\n",int_g_srl_no,chr_h_now  );
		CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL , NULL);
	}

	APL_GOBACK_SUCCESS

	

	RETURN_SUCCESS:
	{
		CO_ProcMonitor(APL_OUT_FILE, "Exiting Out Of MS_Rtv_IncMsgSrlNo succesfully\n",
					NULL, NULL);
		return (APL_SUCCESS);
	}
	RETURN_FAILURE:
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting Out Of MS_Rtv_IncMsgSrlNo unsuccesfully\n",
					NULL, NULL);
		return (APL_FAILURE);
	}
}


int MS_Mod_IncMsgSts(char *p_incmsgsts, char *p_sun_rejreas, char *chr_p_client,
            	    DEBUG_INFO_STRUCT_H **p_debug_info_struct_h_c)
{
	EXEC SQL BEGIN DECLARE SECTION;

	MS_INMSGRP_STRUCT_H l_ms_inmsgrp_struct_hb;
	MS_INMSGRP_STRUCT_I l_ms_inmsgrp_struct_i = {0,0,0,0,0,0,0,0,0,0} ;    

	char chr_l_rejreas[150] = APL_NULL_STRING;
	char chr_l_now[APL_DATE_LEN] = APL_NULL_STRING;
	char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
	char p_rejreas[150] = APL_NULL_STRING; 
	struct sqlca sqlca;

	EXEC SQL VAR l_ms_inmsgrp_struct_hb.h_rep_dt		IS STRING;
	EXEC SQL VAR l_ms_inmsgrp_struct_hb.h_swift_msg_no		IS STRING;
	EXEC SQL VAR l_ms_inmsgrp_struct_hb.h_nameof_file	IS STRING;
	EXEC SQL VAR l_ms_inmsgrp_struct_hb.h_message_stat		IS STRING;
	EXEC SQL VAR l_ms_inmsgrp_struct_hb.h_reject_reason		IS STRING;
	EXEC SQL VAR l_ms_inmsgrp_struct_hb.h_setl_dt IS STRING;        
	EXEC SQL VAR l_ms_inmsgrp_struct_hb.h_dl_client		IS STRING;		
   EXEC SQL VAR l_ms_inmsgrp_struct_hb.h_sfe_indentity_no    IS STRING; 
		
	EXEC SQL END DECLARE SECTION;		
	
	char chr_l_mac_date_time[APL_DATE_LEN];
	DEBUG_INFO_STRUCT_H *l_debuginfo_struct, *l_debug_infostruct_h;
	DEBUG_INFO_STRUCT_H *l_debug_infostruct = NULL, **l_debug_info_ptr = &l_debug_infostruct;

	

	sqlca.sqlcode = 0L;
	memset(&l_ms_inmsgrp_struct_hb , NULL, sizeof(MS_INMSGRP_STRUCT_H));
	strcpy(p_rejreas,p_sun_rejreas);

	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE, "\nInside MS_Mod_IncMsgSts\n", NULL , NULL);
	}
 printf("\n Entered processtion MS_Mod_IncMsgSts .. chr_g_msgfile_name is |%s|\n",chr_g_msgfile_name);
	

	

	memset(chr_l_mac_date_time, APL_NULL_CHAR, APL_DATE_LEN);
	
	memset(chr_l_now, APL_NULL_CHAR, APL_DATE_LEN);
	printf("\nPrior mac chr_date time :%s:\n", chr_l_mac_date_time);

	if (APL_FAILURE == CO_RtvMachDtTime( chr_l_mac_date_time, l_debug_info_ptr ))
	{
		APL_GOBACK_FAIL
	}
	
	printf("Date time of chr_l_now :%s: After mac chr_date time :%s:\n",chr_l_now, chr_l_mac_date_time);
	sscanf(chr_l_mac_date_time, "%[^ ]", chr_l_now);
	strcat(chr_l_now, APL_NULL_TIME);
	printf(" After copying Date time of chr_l_now :%s:\n",chr_l_now);
	if(strlen(chr_l_now)<17)
		{
			printf("******************************\n CHECK THIS \n***************************************** \n The time stamp does not match : strlen :%d: DateTime :%s: \n", strlen(chr_l_now),chr_l_now);
		}
	l_ms_inmsgrp_struct_hb.h_srl_num = int_g_srl_no ;
	
	if (strlen(chr_l_now) >= 19)
		strcpy(l_ms_inmsgrp_struct_hb.h_rep_dt, chr_l_now);
	else
		strcpy(l_ms_inmsgrp_struct_hb.h_rep_dt, APL_NULL_STRING);
	
	
	strcpy(l_ms_inmsgrp_struct_hb.h_nameof_file, chr_g_msgfile_name);
   strcpy(l_ms_inmsgrp_struct_hb.h_sfe_indentity_no, chr_g_sfe_refno); 
	strcpy(l_ms_inmsgrp_struct_hb.h_message_stat, p_incmsgsts); 
	
	printf("\n:%s:\n",chr_g_msgfile_name);
	
	if (strlen(chr_g_settle_dt) >= 19)
		strcpy(l_ms_inmsgrp_struct_hb.h_setl_dt,chr_g_settle_dt);           
	else
		strcpy(l_ms_inmsgrp_struct_hb.h_setl_dt,APL_NULL_STRING);
	
	strcpy(l_ms_inmsgrp_struct_hb.h_dl_client,chr_p_client);           
   if((strcmp(p_incmsgsts,I_RJT)==0)
      || (strcmp(p_incmsgsts,I_RPR)==0)
      || (strcmp(p_incmsgsts,I_NEW_STP)==0)
      || (strcmp(p_incmsgsts,I_CANC_STP)==0)
      || (strcmp(p_incmsgsts,I_MSGNO_54S_RJT)==0)
      || (strcmp(p_incmsgsts,I_MSGNO_54S_STP)==0)
      || (strcmp(p_incmsgsts,I_MSGNO_548N02)==0)
      || (strcmp(p_incmsgsts,I_MSGNO_548N01)==0))
   {
      l_ms_inmsgrp_struct_hb.h_report_ind = 'Y';
      strcpy(l_ms_inmsgrp_struct_hb.h_swift_msg_no,"RES");
   }
   else
   {
      l_ms_inmsgrp_struct_hb.h_report_ind = 'N';
      strcpy(l_ms_inmsgrp_struct_hb.h_swift_msg_no, chr_g_msg_no);
   }

	

	APL_IF_DEBUG
	{
		memset( chr_l_buf, NULL, BUFFER_LEN );
			sprintf( chr_l_buf, "srl_no = |%d| ", l_ms_inmsgrp_struct_hb.h_srl_num);
			CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, NULL);

		memset( chr_l_buf, NULL, BUFFER_LEN );
			sprintf( chr_l_buf, "rep_date = |%s| ", l_ms_inmsgrp_struct_hb.h_rep_dt);
			CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, NULL);

		memset( chr_l_buf, NULL, BUFFER_LEN );
			sprintf( chr_l_buf, "msg_no = |%s| ", l_ms_inmsgrp_struct_hb.h_swift_msg_no);
			CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, NULL);

		memset( chr_l_buf, NULL, BUFFER_LEN );
			sprintf( chr_l_buf, "file_name = |%s| ", l_ms_inmsgrp_struct_hb.h_nameof_file);
			CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, NULL);

		memset( chr_l_buf, NULL, BUFFER_LEN );
			sprintf( chr_l_buf, "msg_sts = |%s| ", l_ms_inmsgrp_struct_hb.h_message_stat);
			CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, NULL);

		memset( chr_l_buf, NULL, BUFFER_LEN );
			sprintf( chr_l_buf, "rej_reas = |%s| ", p_rejreas);
			CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, NULL);
		if (!strcmp(p_rejreas, APL_NULL_STRING))
			CO_ProcMonitor(APL_OUT_FILE,"Rej Reason passed is NULL\n",NULL,NULL);
		else
			CO_ProcMonitor(APL_OUT_FILE,"Rej Reason passed is NOT NULL\n",NULL,NULL);

		memset( chr_l_buf, NULL, BUFFER_LEN );
			sprintf( chr_l_buf, "rep_flg = |%c| ", l_ms_inmsgrp_struct_hb.h_report_ind);
			CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, NULL);

		memset( chr_l_buf, NULL, BUFFER_LEN );                           
      sprintf( chr_l_buf, "settle_dt = |%s| ", l_ms_inmsgrp_struct_hb.h_setl_dt);
      CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, NULL);

		memset( chr_l_buf, NULL, BUFFER_LEN );
			sprintf( chr_l_buf, "account = |%s| ", l_ms_inmsgrp_struct_hb.h_dl_client);	
			CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, NULL);
      memset( chr_l_buf, NULL, BUFFER_LEN );
         sprintf( chr_l_buf, "sfe_refno = |%s| ", l_ms_inmsgrp_struct_hb.h_sfe_indentity_no); 
         CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL, NULL);
	}

	



	if ((!strcmp(l_ms_inmsgrp_struct_hb.h_message_stat,"STP"))
	|| (!strcmp(l_ms_inmsgrp_struct_hb.h_message_stat,"STO"))  ) 
	{
		
		strcpy(l_ms_inmsgrp_struct_hb.h_reject_reason, p_rejreas);
		if (l_ms_inmsgrp_struct_hb.h_sfe_indentity_no == NULL)
		{
			printf("\n its null ...\n");
		}
		else
		{
			printf("\n its not null ...\n");
		}
		if (strlen(l_ms_inmsgrp_struct_hb.h_sfe_indentity_no) == 0)
		{
			printf("\n length is zero .. so copying space character ...\n");
			strcpy(l_ms_inmsgrp_struct_hb.h_sfe_indentity_no," ");
		}
		EXEC SQL INSERT INTO MS_INMSGRP 
					VALUES (:l_ms_inmsgrp_struct_hb:l_ms_inmsgrp_struct_i);
			printf("\n SQLCA.SQLCODE is |%d|\n",sqlca.sqlcode);
		IS_ANY_ORA_ERROR
	   	
		strcpy(l_ms_inmsgrp_struct_hb.h_reject_reason, APL_NULL_STRING);
		l_ms_inmsgrp_struct_i.i_reject_reason = -1;
	   strcpy(p_rejreas,APL_NULL_STRING);
	}
	if (strcmp(p_rejreas,APL_NULL_STRING)) 
	{
		strcpy(l_ms_inmsgrp_struct_hb.h_reject_reason, p_rejreas);

		EXEC SQL INSERT INTO MS_INMSGRP 
					VALUES (:l_ms_inmsgrp_struct_hb:l_ms_inmsgrp_struct_i);
		IS_ANY_ORA_ERROR
	}

	if ( p_debug_info_struct_h_c ) 
	{
		CO_InsertMsg(*p_debug_info_struct_h_c);

		l_debuginfo_struct = *p_debug_info_struct_h_c ;
		for(l_debug_infostruct_h = l_debuginfo_struct; l_debug_infostruct_h ; l_debug_infostruct_h=l_debug_infostruct_h->h_next )
		{
			if (strcmp(l_debug_infostruct_h->msg , APL_NULL_STRING))
			{
				strcpy(chr_l_rejreas, APL_NULL_STRING);
				if (strlen(l_debug_infostruct_h->msg) > 0)
				{
					strcpy(chr_l_rejreas, l_debug_infostruct_h->msg);	
					printf("Message %s\n",l_debug_infostruct_h->msg); 					
					strcat(chr_l_rejreas, " ");
				}
				strcat(chr_l_rejreas, l_debug_infostruct_h->h_key1 );
				strcat(chr_l_rejreas, " ");
				strcat(chr_l_rejreas, l_debug_infostruct_h->h_key2 );
				strcat(chr_l_rejreas, " ");
				strcat(chr_l_rejreas, l_debug_infostruct_h->h_key3 );
				strncpy(l_ms_inmsgrp_struct_hb.h_reject_reason, chr_l_rejreas, REJ_REASN_LEN-1);
				strcat(l_ms_inmsgrp_struct_hb.h_reject_reason,"\0");
				printf("Rej reason 1: %s \n ",l_ms_inmsgrp_struct_hb.h_reject_reason); 
				l_ms_inmsgrp_struct_i.i_reject_reason = 0;

				APL_IF_DEBUG
				{
					memset( chr_l_buf, NULL, BUFFER_LEN );
					sprintf( chr_l_buf, "l_rejreas = %s ", chr_l_rejreas); 
					CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL , NULL);

					memset( chr_l_buf, NULL, BUFFER_LEN );
					sprintf( chr_l_buf, "Err List rej_reas = %s ", l_ms_inmsgrp_struct_hb.h_reject_reason);
					CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL , NULL);
				}
					
				EXEC SQL INSERT INTO MS_INMSGRP 
							VALUES (:l_ms_inmsgrp_struct_hb:l_ms_inmsgrp_struct_i);
				IS_ANY_ORA_ERROR
			}
				
			
			APL_FREE(l_debug_infostruct_h->msg);
			strcpy(l_ms_inmsgrp_struct_hb.h_reject_reason, APL_NULL_STRING);
		}
	}

	if(((!strcmp(l_ms_inmsgrp_struct_hb.h_message_stat,"RJT")) ||
		(!strcmp(l_ms_inmsgrp_struct_hb.h_message_stat,"RJO"))) &&
		((!strcmp(l_ms_inmsgrp_struct_hb.h_swift_msg_no,"54N"))
		|| (!strcmp(l_ms_inmsgrp_struct_hb.h_swift_msg_no, "54C"))))
	{
		EXEC SQL DELETE FROM MS_INMSGRP
		WHERE NAMEOF_FILE=:l_ms_inmsgrp_struct_hb.h_nameof_file
		AND MESSAGE_STAT='RPR'
		AND SWIFT_MSG_NO=:l_ms_inmsgrp_struct_hb.h_swift_msg_no;
		IS_ANY_ORA_ERROR;
	}

	APL_GOBACK_SUCCESS

	

	RETURN_SUCCESS:
	{
		CO_ProcMonitor(APL_OUT_FILE, "Exiting Out Of MS_Mod_IncMsgSts succesfully\n",	
					NULL, NULL);

		CO_PrnErr(l_debug_infostruct); 
		CO_FreeErrLst(l_debug_info_ptr); 
		return (APL_SUCCESS);
	}
	RETURN_FAILURE:
	{
		CO_ProcMonitor(APL_OUT_FILE, "Exiting Out Of MS_Mod_IncMsgSts unsuccesfully\n",
					NULL, NULL);

		CO_PrnErr(l_debug_infostruct); 
		CO_FreeErrLst(l_debug_info_ptr); 
		return (APL_FAILURE);
	}
}


int MS_Chk_DLFromOrd(MS_INC_MSG_STRUCT_H *p_ms_inc_msg_struct_h, char *chr_p_client, 
							 double p_quantity, char *p_ora_rowid, 
							 DEAL_DET_STRUCT_H *p_deal_det_struct_h_c, 
							 DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	double l_tempamount = 0.0;

	EXEC SQL BEGIN DECLARE SECTION;

		char h_ora_rowid[APL_ROWID_LEN];
      char h_classofdl[3]; 
		char h_verfied_with[26];
		char chr_h_verwith_new[26]; 
	
		char chr_h_trd_status[3];
		int int_h_count = 0;
		double dbl_h_amount1 = 0.0, dbl_h_amount2 = 0.0;
		DEAL_DET_STRUCT_H l_deal_det_struct_h;
		DEAL_DET_STRUCT_I l_deal_det_struct_i = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
		short int i_ora_rowid = 0;
		short int int_i_count = 0;
		struct sqlca sqlca;

		EXEC SQL VAR l_deal_det_struct_h.h_dl_client IS STRING;
		EXEC SQL VAR l_deal_det_struct_h.h_indentity_no IS STRING;
		EXEC SQL VAR l_deal_det_struct_h.h_locindentity_no IS STRING;
		EXEC SQL VAR l_deal_det_struct_h.h_verfied_with IS STRING;
		EXEC SQL VAR l_deal_det_struct_h.h_brkrno IS STRING;
		EXEC SQL VAR l_deal_det_struct_h.h_deal_status IS STRING;
		EXEC SQL VAR l_deal_det_struct_h.h_info1 IS STRING;
		EXEC SQL VAR l_deal_det_struct_h.h_custinfo IS STRING;
		EXEC SQL VAR l_deal_det_struct_h.h_failinfo IS STRING;
		EXEC SQL VAR l_deal_det_struct_h.h_access_stamp IS STRING;

		EXEC SQL VAR h_ora_rowid IS STRING;
		EXEC SQL VAR h_verfied_with IS STRING;
		EXEC SQL VAR chr_h_verwith_new IS STRING;

		

		EXEC SQL VAR chr_h_trd_status IS STRING;

	EXEC SQL END   DECLARE SECTION;

	sqlca.sqlcode = 0L;
	memset(&l_deal_det_struct_h, NULL, sizeof(DEAL_DET_STRUCT_H));
	memset(h_ora_rowid, APL_NULL_CHAR, APL_ROWID_LEN);
	memset(h_verfied_with, APL_NULL_CHAR, 26);
	memset(chr_h_verwith_new, APL_NULL_CHAR, 26);

	memset(chr_h_trd_status, APL_NULL_CHAR, 3);
	memset(h_classofdl, APL_NULL_CHAR, 3);

	l_tempamount = p_ms_inc_msg_struct_h->amount - l_mt_core_sys_params_struct_h.allowed_amtdiff;
	dbl_h_amount1 = ((l_tempamount > 0)?(l_tempamount):0);
	dbl_h_amount2 = p_ms_inc_msg_struct_h->amount + l_mt_core_sys_params_struct_h.allowed_amtdiff;
	strcpy(h_verfied_with, DEALFRMORD_VERWITH);
	strcpy(chr_h_verwith_new, DEALFRMORD_VERWITH_NEW);
   strcpy(h_classofdl, DL_BOOKTRF_IND); 

	
   
	strcpy(chr_h_trd_status, STATUS_CONF);

	EXEC SQL SELECT NVL(COUNT(ROWID), 0)
	INTO :int_h_count INDICATOR :int_i_count
	FROM DL_DEAL
	WHERE ((CLIENT  = :chr_p_client) AND
			 (INSTR_CODE = :p_ms_inc_msg_struct_h->instr_code) AND
          (DEAL_CD = :p_ms_inc_msg_struct_h->h_deal_code) AND
          (DL_CLASS <> :h_classofdl) AND
			 (DEAL_STAT = :chr_h_trd_status) AND
			 (SETL_DATE = :p_ms_inc_msg_struct_h->setl_dt) AND
			 (DEAL_DATE = :p_ms_inc_msg_struct_h->dl_dt) AND
			 (QTY = :p_quantity) AND
			 (DEAL_FRM_ORD = 'Y') AND
			 (AMOUNT BETWEEN :dbl_h_amount1 AND :dbl_h_amount2)); 

	IS_ANY_ORA_ERROR



    if ( int_h_count > 0 )  
	{
		EXEC SQL SELECT ROWID, CLIENT, IDENTIY_NO, LCL_IDENTNO, VERFIED_WITH, 
							 AMT_DIFFER, AMOUNT, INFO1, CLIENT_NOTE, FAIL_DET, 
							 BRK_NO, DEAL_STAT, ACCESS_STAMP
		INTO :h_ora_rowid INDICATOR :i_ora_rowid, :l_deal_det_struct_h INDICATOR :l_deal_det_struct_i
		FROM DL_DEAL
		WHERE ((CLIENT  = :chr_p_client) AND
				 (INSTR_CODE = :p_ms_inc_msg_struct_h->instr_code) AND
             (DEAL_CD = :p_ms_inc_msg_struct_h->h_deal_code) AND
             (DL_CLASS <> :h_classofdl) AND
				 (DEAL_STAT = :chr_h_trd_status) AND
				 (SETL_DATE = :p_ms_inc_msg_struct_h->setl_dt) AND
				 (DEAL_DATE = :p_ms_inc_msg_struct_h->dl_dt) AND
				 (QTY = :p_quantity) AND
				 (DEAL_FRM_ORD = 'Y') AND
				 (AMOUNT BETWEEN :dbl_h_amount1 AND :dbl_h_amount2) AND
				 
				 (ROWNUM < 2));

		

		IS_ANY_ORA_ERROR

		if ( APL_ZERO_RESULT_SET )	
		{
			strcpy(chr_g_msg_sts, "RJT");

			CO_InsertErr(l_debug_info_ptr, ERR_ACCESSSTAMP_CHGD, APL_NULL_STRING, 
								APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__);

			APL_GOBACK_FAIL
		}

		*p_deal_det_struct_h_c = l_deal_det_struct_h;
		strcpy(p_ora_rowid, h_ora_rowid);
		APL_GOBACK_SUCCESS
	}

	
   
	strcpy(chr_h_trd_status, STATUS_AUTH);
	int_h_count = 0;
	int_i_count = 0;

	EXEC SQL SELECT NVL(COUNT(ROWID), 0)
	INTO :int_h_count INDICATOR :int_i_count
	FROM DL_DEAL
	WHERE ((CLIENT  = :chr_p_client) AND
			 (INSTR_CODE = :p_ms_inc_msg_struct_h->instr_code) AND
          (DEAL_CD = :p_ms_inc_msg_struct_h->h_deal_code) AND
          (DL_CLASS <> :h_classofdl) AND
			 (DEAL_STAT = :chr_h_trd_status) AND
			 (SETL_DATE = :p_ms_inc_msg_struct_h->setl_dt) AND
			 (DEAL_DATE = :p_ms_inc_msg_struct_h->dl_dt) AND
			 (QTY = :p_quantity) AND
			 (DEAL_FRM_ORD = 'Y') AND
			 (AMOUNT BETWEEN :dbl_h_amount1 AND :dbl_h_amount2)); 

	IS_ANY_ORA_ERROR

	if ( (APL_ZERO_RESULT_SET) || !int_h_count )	
	{
		APL_GOBACK_FAIL
	}


  
	EXEC SQL SELECT ROWID, CLIENT, IDENTIY_NO, LCL_IDENTNO, VERFIED_WITH, 
						 AMT_DIFFER, AMOUNT, INFO1, CLIENT_NOTE, FAIL_DET, 
						 BRK_NO, DEAL_STAT, ACCESS_STAMP
	INTO :h_ora_rowid INDICATOR :i_ora_rowid, :l_deal_det_struct_h INDICATOR :l_deal_det_struct_i
	FROM DL_DEAL
	WHERE ((CLIENT  = :chr_p_client) AND
			 (INSTR_CODE = :p_ms_inc_msg_struct_h->instr_code) AND
          (DEAL_CD = :p_ms_inc_msg_struct_h->h_deal_code) AND
          (DL_CLASS <> :h_classofdl) AND
			 (DEAL_STAT = :chr_h_trd_status) AND
			 (SETL_DATE = :p_ms_inc_msg_struct_h->setl_dt) AND
			 (DEAL_DATE = :p_ms_inc_msg_struct_h->dl_dt) AND
			 (QTY = :p_quantity) AND
			 (DEAL_FRM_ORD = 'Y') AND
			 (AMOUNT BETWEEN :dbl_h_amount1 AND :dbl_h_amount2) AND
			 
			 (ROWNUM < 2));

	IS_ANY_ORA_ERROR

	if ( APL_ZERO_RESULT_SET )	
	{
		strcpy(chr_g_msg_sts, "RJT");

		CO_InsertErr(l_debug_info_ptr, ERR_ACCESSSTAMP_CHGD, APL_NULL_STRING, 
							APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	*p_deal_det_struct_h_c = l_deal_det_struct_h;
	strcpy(p_ora_rowid, h_ora_rowid);
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting out of MS_Chk_DLFromOrd() sucessfully.\n", NULL, NULL);
	}
	return APL_SUCCESS;

	RETURN_FAILURE:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting out of MS_Chk_DLFromOrd() unsucessfully.\n", NULL, NULL);
	}
	return APL_FAILURE;
}


int DL_Mod_BTTDL(char *p_ora_rowid, DEAL_DET_STRUCT_H *p_deal_det_struct_h_b, 
						  char *p_failreas_cd, INTL_ENV_DATA_STRUCT_H *p_intlenv_data_struct_h,
						  DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	DL_DEAL_FAIL_STRUCT_H l_dl_deal_fail_struct_h;
	INTL_ENV_DATA_STRUCT_H l_intlenv_data_struct_h;

	EXEC SQL BEGIN DECLARE SECTION;

		char h_verfied_with[26];
		char h_locindentity_no[APL_TXNREFNO_LEN];
		short int i_verfied_with = 0;
		short int i_locindentity_no = 0;
		struct sqlca sqlca;
		EXEC SQL VAR h_verfied_with IS STRING;
		EXEC SQL VAR h_locindentity_no IS STRING;

	EXEC SQL END   DECLARE SECTION;

	sqlca.sqlcode = 0L;
	memset(h_verfied_with, APL_NULL_CHAR, 26);
	memset(h_locindentity_no, APL_NULL_CHAR, APL_TXNREFNO_LEN);
	memset(&l_dl_deal_fail_struct_h, NULL, sizeof(DL_DEAL_FAIL_STRUCT_H));
	memset(&l_intlenv_data_struct_h, NULL, sizeof(INTL_ENV_DATA_STRUCT_H));

	strcpy(h_verfied_with, p_deal_det_struct_h_b->h_verfied_with);
	strcpy(h_locindentity_no, p_deal_det_struct_h_b->h_locindentity_no);

	EXEC SQL UPDATE DL_DEAL
				SET VERFIED_WITH =  :h_verfied_with INDICATOR :i_verfied_with,
					 LCL_IDENTNO = :h_locindentity_no INDICATOR :i_locindentity_no
				WHERE (ROWID = :p_ora_rowid);

	IS_ANY_ORA_ERROR

	if ( APL_ZERO_RESULT_SET )
	{
		strcpy(chr_g_msg_sts, "RJT");

		CO_InsertErr(l_debug_info_ptr, ERR_ACCESSSTAMP_CHGD, APL_NULL_STRING,
							APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__);

		APL_GOBACK_FAIL
	}

	if ( strlen(p_failreas_cd) )
	{
		strcpy(l_dl_deal_fail_struct_h.h_dl_client, p_deal_det_struct_h_b->h_dl_client);
		strcpy(l_dl_deal_fail_struct_h.h_indentity_no, p_deal_det_struct_h_b->h_indentity_no);
		strcpy(l_dl_deal_fail_struct_h.h_fail_cd, p_failreas_cd);
		l_dl_deal_fail_struct_h.h_subfailreas_cd=0; 		
		strcpy(l_dl_deal_fail_struct_h.h_custinfo, p_deal_det_struct_h_b->h_custinfo);
		strcpy(l_dl_deal_fail_struct_h.h_failinfo, p_deal_det_struct_h_b->h_failinfo);
		strcpy(l_dl_deal_fail_struct_h.h_access_stamp, 
				 p_deal_det_struct_h_b->h_access_stamp);

		l_intlenv_data_struct_h = *p_intlenv_data_struct_h;
		strcpy(l_intlenv_data_struct_h.h_mode, UFL_MODE);	

		if ( APL_FAILURE == DL_Mod_DLFailReas(&l_dl_deal_fail_struct_h, 
														&l_intlenv_data_struct_h, l_debug_info_ptr) )
		{
			strcpy(chr_g_msg_sts, "RJT");

			APL_GOBACK_FAIL
		}
	}

	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting out of I_UpdTrdFromOrder() sucessfully.\n", NULL, NULL);
	}
	return APL_SUCCESS;

	RETURN_FAILURE:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting out of I_UpdTrdFromOrder() unsucessfully.\n", NULL, NULL);
	}
	return APL_FAILURE;
}



int DL_Mod_BTTOrd(char *p_ora_rowid, DEAL_DET_STRUCT_H *p_deal_det_struct_h_b, 
							char *p_dealcd, DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;

		short int i_verfied_with = 0;
		short int i_locindentity_no = 0;
		short int i_dealcd = 0;
		short int i_amt = 0;
		struct sqlca sqlca;

	EXEC SQL END   DECLARE SECTION;

	sqlca.sqlcode = 0L;
	

   if ( ( !strcmp( p_deal_det_struct_h_b->h_deal_status, STATUS_AUTH ) ) ||
        ( !strcmp( p_deal_det_struct_h_b->h_deal_status, STATUS_CONF ) ) )  
	{
		EXEC SQL UPDATE DL_DEAL
					SET VERFIED_WITH = :p_deal_det_struct_h_b->h_verfied_with INDICATOR :i_verfied_with,
						 LCL_IDENTNO = :p_deal_det_struct_h_b->h_locindentity_no INDICATOR :i_locindentity_no,
						 DEAL_CD = :p_dealcd INDICATOR :i_dealcd,
						 AMOUNT = :p_deal_det_struct_h_b->h_amt INDICATOR :i_amt
						WHERE (ROWID = :p_ora_rowid);

			IS_ANY_ORA_ERROR

		if ( APL_ZERO_RESULT_SET )
		{
			CO_InsertErr(l_debug_info_ptr, ERR_ACCESSSTAMP_CHGD, APL_NULL_STRING,
							   APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__);
	
			APL_GOBACK_FAIL
		}
	}
	
   else if ( !strcmp( p_deal_det_struct_h_b->h_deal_status, STATUS_SETL ) )
   {
      EXEC SQL UPDATE DL_DEAL
               SET VERFIED_WITH = :p_deal_det_struct_h_b->h_verfied_with INDICATOR :i_verfied_with,
                   LCL_IDENTNO = :p_deal_det_struct_h_b->h_locindentity_no INDICATOR :i_locindentity_no
               WHERE (ROWID = :p_ora_rowid);

      IS_ANY_ORA_ERROR

      if ( APL_ZERO_RESULT_SET )
      {
         CO_InsertErr(l_debug_info_ptr, ERR_ACCESSSTAMP_CHGD, APL_NULL_STRING,
                        APL_NULL_STRING, APL_NULL_STRING, __LINE__, __FILE__);

         APL_GOBACK_FAIL
      }
   }
   
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting out of DL_Mod_BTTOrd() sucessfully.\n", NULL, NULL);
	}
	return APL_SUCCESS;

	RETURN_FAILURE:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting out of DL_Mod_BTTOrd() unsucessfully.\n", NULL, NULL);
	}
	return APL_FAILURE;
}



int MS_Chk_BTTOrd(MS_INC_MSG_STRUCT_H *p_ms_inc_msg_struct_h, char *chr_p_client, double p_quantity, 
							char *p_ora_rowid, DEAL_DET_STRUCT_H *p_deal_det_struct_h_a, 
							DEBUG_INFO_STRUCT_H **l_debug_info_ptr)
{
	EXEC SQL BEGIN DECLARE SECTION;
		
		
      char chr_h_trcode1[2];
      char chr_h_trcode2[2];
     
		char h_ora_rowid[APL_ROWID_LEN];
		char h_classofdl[3];
		DEAL_DET_STRUCT_H l_deal_det_struct_h;
		DEAL_DET_STRUCT_I l_deal_det_struct_i = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
		short int i_ora_rowid = 0;
		short int i_classofdl = 0;
		struct sqlca sqlca;

		EXEC SQL VAR l_deal_det_struct_h.h_dl_client IS STRING;
		EXEC SQL VAR l_deal_det_struct_h.h_indentity_no IS STRING;
		EXEC SQL VAR l_deal_det_struct_h.h_locindentity_no IS STRING;
		EXEC SQL VAR l_deal_det_struct_h.h_verfied_with IS STRING;
		EXEC SQL VAR l_deal_det_struct_h.h_brkrno IS STRING;
		EXEC SQL VAR l_deal_det_struct_h.h_deal_status IS STRING;
		EXEC SQL VAR l_deal_det_struct_h.h_info1 IS STRING;
		EXEC SQL VAR l_deal_det_struct_h.h_custinfo IS STRING;
		EXEC SQL VAR l_deal_det_struct_h.h_failinfo IS STRING;
		EXEC SQL VAR l_deal_det_struct_h.h_access_stamp IS STRING;
		EXEC SQL VAR chr_h_trcode1 IS STRING;
      EXEC SQL VAR chr_h_trcode2 IS STRING;

	EXEC SQL END   DECLARE SECTION;

	sqlca.sqlcode = 0L;
	memset(&l_deal_det_struct_h, NULL, sizeof(DEAL_DET_STRUCT_H));
	memset(h_ora_rowid, APL_NULL_CHAR, APL_ROWID_LEN);
	memset(h_classofdl, APL_NULL_CHAR, 3);
	
   memset(chr_h_trcode1, APL_NULL_CHAR, 2);
   memset(chr_h_trcode2, APL_NULL_CHAR, 2);

	strcpy(h_classofdl, DL_BOOKTRF_IND);
	if ( VAL_DELIVER_DEAL(p_ms_inc_msg_struct_h->h_deal_code[0]) )
      {
         chr_h_trcode1[0] = DEALCD_DF;
         chr_h_trcode2[0] = DEALCD_DVP;
      }
      else
      {
         chr_h_trcode1[0] = DEALCD_RF;
         chr_h_trcode2[0] = DEALCD_RVP;
      }


	EXEC SQL SELECT ROWID, CLIENT, IDENTIY_NO, LCL_IDENTNO, VERFIED_WITH, AMT_DIFFER, 
						 AMOUNT, INFO1, CLIENT_NOTE, FAIL_DET, BRK_NO, 
						 DEAL_STAT, ACCESS_STAMP
	INTO :h_ora_rowid INDICATOR :i_ora_rowid, :l_deal_det_struct_h INDICATOR :l_deal_det_struct_i
	FROM DL_DEAL
	WHERE ((CLIENT  = :chr_p_client) AND
			 (INSTR_CODE = :p_ms_inc_msg_struct_h->instr_code) AND
          (DEAL_CD IN (:chr_h_trcode1, :chr_h_trcode2)) AND
          (DEAL_FRM_ORD = 'N') AND 
			 (SETL_DATE = :p_ms_inc_msg_struct_h->setl_dt) AND
			 (DEAL_DATE = :p_ms_inc_msg_struct_h->dl_dt) AND
			 (QTY = :p_quantity) AND
			 (DL_CLASS = :h_classofdl) AND
			 (ROWNUM < 2));

	IS_ANY_ORA_ERROR

	if ( APL_ZERO_RESULT_SET )	
	{
		APL_GOBACK_FAIL
	}

	*p_deal_det_struct_h_a = l_deal_det_struct_h;
	strcpy(p_ora_rowid, h_ora_rowid);
	APL_GOBACK_SUCCESS

	RETURN_SUCCESS:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting out of I_ChkBttForOrder() sucessfully.\n", NULL, NULL);
	}
	return APL_SUCCESS;

	RETURN_FAILURE:
	APL_IF_DEBUG
	{
		CO_ProcMonitor(APL_OUT_FILE,"Exiting out of I_ChkBttForOrder() unsucessfully.\n", NULL, NULL);
	}
	return APL_FAILURE;
}





int	MS_Chk_Msg53x( MS_53X_STRUCT_H					*l_ms_53x_struct_h,
								DL_DEAL_SSTDET_STRUCT_H		*p_dl_deal_sstdet_struct_h,
								char								*p_instr_code,
								char							 	*p_typeofdeal,
								char								*p_dealcd,
								char								*p_domcpac,
								char								*p_countclt,
							 	char								*chr_fl_name,
								char								*p_mesg_body,
								FILE								*p_fl_53x_RejectRpt,
								FILE								*p_fl_53x_Pend_Rpt,
								FILE								*fl_userlog,
								DEBUG_INFO_STRUCT_H					**l_debug_info_ptr )

{
		char     chr_l_h_client_a[APL_CLIENT_LENGTH]        = APL_NULL_STRING;
   	char     chr_l_h_refno_A[APL_TXNREFNO_LEN]         = APL_NULL_STRING;
		char     chr_l_h_refno_internal[APL_TXNREFNO_LEN]= APL_NULL_STRING;
   	char     chr_l_h_exarena[EX_ARENA_LEN]          = APL_NULL_STRING;
   	char     chr_l_h_posn_status[STATUS_POS_LEN]  = APL_NULL_STRING;
   	char     chr_l_h_trcode_a[APL_FLAG_LENGTH]            = APL_NULL_STRING;
   	char     chr_l_trd_status[APL_STATUS_LEN]        = APL_NULL_STRING;
   	char     chr_l_h_access_stamp[APL_DATE_LEN]      = APL_NULL_STRING;
   	char     chr_l_actual_setl_dt[APL_DATE_LEN]      = APL_NULL_STRING;
		char     chr_l_now[APL_DATE_LEN]                 = APL_NULL_STRING;
   	char     chr_l_h_brokerno[I_BROKERNO_LEN]        = APL_NULL_STRING;
		char		chr_l_rej_str[100]								= APL_NULL_STRING;
		char		chr_l_h_trdt_a[APL_DATE_LEN]					= APL_NULL_STRING;
		char 		chr_l_h_confdt[APL_DATE_LEN]            = APL_NULL_STRING;
		char		chr_l_h_typeoftrd[DEALTYPE_LEN_A]			= APL_NULL_STRING;
		char		chr_l_h_instrcode_A[APL_INSTRUMENTCODE_LEN]			 	= APL_NULL_STRING;
		char     chr_l_h_rowid[APL_ROWID_LEN]           	= APL_NULL_STRING;
		char		chr_l_h_domcpac[APL_CLIENT_LENGTH]			= APL_NULL_STRING;
		char		chr_l_h_countacc_a[APL_CLIENT_LENGTH]			= APL_NULL_STRING;
		char		chr_l_h_trd_settledt[APL_DATE_LEN]		= APL_NULL_STRING;
		char 		chr_l_h_trd_instr_dt[APL_DATE_LEN]			= APL_NULL_STRING;
		char     chr_l_h_locncode_a[APL_LOCNCODE_LENGTH]      = APL_NULL_STRING;
		char     chr_l_h_maniflag[APL_FLAG_LENGTH]          = APL_NULL_STRING;
		char		chr_l_h_clscode[CLSCD_LEN]				= APL_NULL_STRING;
		char     chr_l_h_delrecdt[APL_DATE_LEN]                      = APL_NULL_STRING;

		int      int_l_diff_dates                        = 0;
		int      int_l_tradefound                        = 0;
		int		int_l_count										= 0;
		int		int_l_chkflg										= 0;

		double   l_h_cost                           = 0.0;
      double   l_h_quantity_a                             = 0.0;
      double   l_h_brokercomm                         = 0.0;

      short    l_i_account                         = 0;
      short    l_i_refno                           = 0;
      short    l_i_exarena                         = 0;
      short    l_i_posn_status                     = 0;
      short    int_l_i_trcode                          = 0;
      short    l_i_access_stamp                    = 0;
      short    l_i_price                           = 0;
      short    int_l_i_qty                             = 0;
      short    l_i_brkcomm                         = 0;
      short    l_i_brokerno                        = 0;
      short    l_i_trdt                            = 0;
      short    l_i_confdt                          = 0;
      short    l_i_instr_code                          = 0;
      short    l_i_typeoftrd                       = 0;
      short    l_i_rowid                           = 0;
		short		l_i_domcpac									= 0;
		short		l_i_countacc								= 0;
		short		l_i_trd_settledt							= 0;
		short		l_i_trd_instr_dt								= 0;
		short		l_i_locncode								= 0;
		short		l_i_maniflag								= 0;
		short		l_i_clscode									= 0;
		short    l_i_delrecdt    							= 0;
		
		short    l_accchkflg                         = 0;


	
		DL_DEAL_SSTDET_STRUCT_H  *l_deal_sstdet_struct_h        = NULL;

   	l_deal_sstdet_struct_h = (DL_DEAL_SSTDET_STRUCT_H *)calloc(1, sizeof(DL_DEAL_SSTDET_STRUCT_H));
   	APL_MALLOC_FAIL(l_deal_sstdet_struct_h);

   	EXEC SQL VAR chr_l_h_client_a 		IS STRING;
   	EXEC SQL VAR chr_l_h_refno_A 			IS STRING;
   	EXEC SQL VAR chr_l_h_brokerno 		IS STRING;
   	EXEC SQL VAR chr_l_h_exarena 		IS STRING;
   	EXEC SQL VAR chr_l_h_posn_status 	IS STRING;
   	EXEC SQL VAR chr_l_h_trcode_a 		IS STRING;
   	EXEC SQL VAR chr_l_h_access_stamp IS STRING;
		EXEC SQL VAR chr_l_h_typeoftrd 	IS STRING;
   	EXEC SQL VAR chr_l_h_instrcode_A 		IS STRING;
   	EXEC SQL VAR chr_l_h_rowid 			IS STRING;
		EXEC SQL VAR chr_l_h_domcpac 		IS STRING;
		EXEC SQL VAR chr_l_h_countacc_a 		IS STRING;
		EXEC SQL VAR chr_l_h_trd_settledt	IS STRING;
		EXEC SQL VAR chr_l_h_trd_instr_dt		IS STRING;
		EXEC SQL VAR chr_l_h_locncode_a		IS STRING;
		EXEC SQL VAR chr_l_h_maniflag		IS STRING;
		EXEC SQL VAR chr_l_h_clscode		IS STRING;

		EXEC SQL VAR chr_l_h_refno_internal IS STRING;

		
	
		EXEC SQL DECLARE cur_Account CURSOR FOR
		SELECT RTRIM(CLN_CODE) FROM MT_CLIENT 
		WHERE CLN_VTB_CLIENT = :l_ms_53x_struct_h->vtb_client;

		EXEC SQL OPEN cur_Account;

		IS_ANY_ORA_ERROR

		for(;;)
		{
			EXEC SQL FETCH cur_Account 
			INTO	:chr_l_h_client_a:l_i_account;

			IS_ANY_ORA_ERROR
		
			if ( (sqlca.sqlcode == 1403) || (l_i_account == -1) )
			{
				
				 if (l_accchkflg == 1)
					{
						EXEC SQL CLOSE cur_Account;
						break ;
					}
         	strcpy(chr_l_rej_str,"CUSTOMER NOT FOUND");
        	 	strcpy(chr_g_msg_sts, "RJT");
         	if (APL_FAILURE == MS_Proc_IncMsg53xRejRpt(l_ms_53x_struct_h->vtb_client,
                                              l_ms_53x_struct_h->indentity_no,
                                              NULL,
                                              0.0,
                                              chr_l_rej_str,
                                              chr_fl_name,
                                              p_mesg_body,
                                              p_fl_53x_RejectRpt,
                                              l_debug_info_ptr) )
          	{
              	fprintf(fl_userlog,"Failed to Write to 53x Reject Report\n");
              	APL_GOBACK_FAIL
           	}
				APL_GOBACK_FAIL
			}
			 
			l_accchkflg = 1;
         
         EXEC SQL SELECT QTY,
								 ROWID 
			INTO :l_h_quantity_a:int_l_i_qty,
				  :chr_l_h_rowid:l_i_rowid
			FROM DL_DEAL
			WHERE CLIENT = :chr_l_h_client_a AND
			IDENTIY_NO			  = :l_ms_53x_struct_h->indentity_no;

			IS_ANY_ORA_ERROR

         
			if (APL_ZERO_RESULT_SET) 
			{
				int_l_tradefound=0;
			}

			if (sqlca.sqlcode == 0) 
			{
				int_l_tradefound = 1;	
				break;
			}
		}

		EXEC SQL CLOSE cur_Account;

		
		if (int_l_tradefound == 0)
		{
      
      EXEC SQL SELECT CLIENT , IDENTIY_NO , ROWID INTO :chr_l_h_client_a, :chr_l_h_refno_internal, :chr_l_h_rowid FROM DL_DEAL WHERE
      DEAL_STAT='CC' AND
      DEAL_DATE=:l_ms_53x_struct_h->deal_date AND
      SETL_DATE=:l_ms_53x_struct_h->setl_date AND
      QTY=:l_ms_53x_struct_h->quantity AND
      INSTR_CODE=:l_ms_53x_struct_h->instr_code AND
      DL_CLASS IN ('26','27') AND
      LOCATION_CD='VTB' AND
      CLIENT IN (SELECT CLN_CODE FROM MT_CLIENT WHERE CLN_VTB_CLIENT=:l_ms_53x_struct_h->vtb_client) AND
		DOMESTIC_CPCLT=:l_mt_core_sys_params_struct_h.custody_clt_cd AND
      CP_CLT IN (SELECT CLN_CODE FROM MT_CLIENT WHERE CLN_VTB_CLIENT=:l_ms_53x_struct_h->cp_clt) AND
      DEAL_CD IN ( '2','4')
      AND ROWNUM < 2;

      IS_ANY_ORA_ERROR
		
		if(sqlca.sqlcode==1403)
		{
			strcpy(chr_l_rej_str,"TRANSACTION NOT FOUND");
         strcpy(chr_g_msg_sts, "RJT");           
         if (APL_FAILURE == MS_Proc_IncMsg53xRejRpt(l_ms_53x_struct_h->vtb_client,  
                                              l_ms_53x_struct_h->indentity_no,            
                                              NULL,           
                                              0.0,           
                                              chr_l_rej_str,        
															 chr_fl_name,
															 p_mesg_body,    
                                              p_fl_53x_RejectRpt,           
                                              l_debug_info_ptr) )          
          {           
              fprintf(fl_userlog,"Failed to Write to 53x Reject Report\n");           
              APL_GOBACK_FAIL            
           }          
			APL_GOBACK_FAIL 
		}
		if(sqlca.sqlcode == 0)
      {
        strcpy(l_ms_53x_struct_h->indentity_no,chr_l_h_refno_internal);
         l_h_quantity_a=l_ms_53x_struct_h->quantity;
		}
      }
	
		if ( APL_FAILURE == CO_Chk_AccValid(chr_l_h_client_a, 'Y', NULL, NULL, NULL, NULL, NULL,NULL, NULL, l_debug_info_ptr) )
   	{
      	fprintf(fl_userlog, "Message rejected as client was not valid in customer database.\n");

			strcpy(chr_l_rej_str,"CUSTOMER ACCOUNT NOT VALID"); 
      	strcpy(chr_g_msg_sts, "RJT");

			if (APL_FAILURE == MS_Proc_IncMsg53xRejRpt(chr_l_h_client_a,
                                               l_ms_53x_struct_h->indentity_no,
                                               NULL,
                                               l_ms_53x_struct_h->quantity,
                                               chr_l_rej_str,
                                               chr_fl_name,
                                               p_mesg_body,
                                               p_fl_53x_RejectRpt,
                                               l_debug_info_ptr) )
         {
            fprintf(fl_userlog,"Failed to Write to 53x Reject Report\n");
            APL_GOBACK_FAIL
         }
      
			APL_GOBACK_FAIL
   	}	
		
		
		if(l_h_quantity_a != l_ms_53x_struct_h->quantity)  
		{
				strcpy(chr_l_rej_str,"QUANTITY DOES NOT MATCH");
            strcpy(chr_g_msg_sts, "RJT");
            if (APL_FAILURE == MS_Proc_IncMsg53xRejRpt(l_ms_53x_struct_h->vtb_client,
                                               l_ms_53x_struct_h->indentity_no, 
                                               NULL,
                                               l_ms_53x_struct_h->quantity,
                                               chr_l_rej_str,
															  chr_fl_name,
															  p_mesg_body,
                                               p_fl_53x_RejectRpt,
                                               l_debug_info_ptr) )
            {
               fprintf(fl_userlog,"Failed to Write to 53x Reject Report\n");
               APL_GOBACK_FAIL
            }			
				APL_GOBACK_FAIL		
		}

      EXEC SQL SELECT   RTRIM(IDENTIY_NO),
               			ex_arena,
               			COST,
               			STATUS_POS,
               			QTY,
               			deal_cd,
               			access_stamp,
               			brokercomm ,
               			BRK_NO,
								deal_date,
								VAL_FDT,
								instr_code,
								dl_class,
								domestic_cpclt,
								cp_clt,
								setl_date,
								INSTRUMENT_DT,
								location_cd,
								DEL_REC_DATE
 					INTO		:chr_l_h_refno_A:l_i_refno,
                        :chr_l_h_exarena:l_i_exarena,
                        :l_h_cost:l_i_price,
                        :chr_l_h_posn_status:l_i_posn_status,
                        :l_h_quantity_a:int_l_i_qty,
                        :chr_l_h_trcode_a:int_l_i_trcode,
                        :chr_l_h_access_stamp:l_i_access_stamp,
                        :l_h_brokercomm:l_i_brkcomm,
                        :chr_l_h_brokerno:l_i_brokerno,
								:chr_l_h_trdt_a:l_i_trdt,
								:chr_l_h_confdt:l_i_confdt,
								:chr_l_h_instrcode_A:l_i_instr_code,
								:chr_l_h_typeoftrd:l_i_typeoftrd,
								:chr_l_h_domcpac:l_i_domcpac,
								:chr_l_h_countacc_a:l_i_countacc,
								:chr_l_h_trd_settledt:l_i_trd_settledt,
								:chr_l_h_trd_instr_dt:l_i_trd_instr_dt,
								:chr_l_h_locncode_a:l_i_locncode,
								:chr_l_h_delrecdt:l_i_delrecdt
					FROM DL_DEAL
      			WHERE CLIENT=:chr_l_h_client_a
      			AND IDENTIY_NO=:l_ms_53x_struct_h->indentity_no 
					AND ROWID=:chr_l_h_rowid;

      IS_ANY_ORA_ERROR		
		strcpy(chr_g_settle_dt,chr_l_h_trd_settledt);

		if(VAL_VP_DEAL(chr_l_h_trcode_a[0]))
		{
			strcpy(chr_l_rej_str,"PAYMENT TRADE - NOT SETTLED");
         strcpy(chr_g_msg_sts, "RJT");
         if (APL_FAILURE == MS_Proc_IncMsg53xRejRpt(l_ms_53x_struct_h->vtb_client,
                                              l_ms_53x_struct_h->indentity_no,
                                              chr_l_h_instrcode_A,
                                              l_h_quantity_a,
                                              chr_l_rej_str,
															 chr_fl_name,
															 p_mesg_body,
                                              p_fl_53x_RejectRpt,
                                              l_debug_info_ptr) )
         {
         	fprintf(fl_userlog,"Failed to Write to 53x Reject Report\n");
            APL_GOBACK_FAIL
          }
			APL_GOBACK_FAIL
		}

      

      if (l_i_confdt == -1)
      {
         strcpy(chr_l_rej_str,"TRADE -NOT CONFIRMED");
         strcpy(chr_g_msg_sts, "RJT");
         if (APL_FAILURE == MS_Proc_IncMsg53xRejRpt(l_ms_53x_struct_h->vtb_client,
                                              l_ms_53x_struct_h->indentity_no, 
                                              chr_l_h_instrcode_A,
                                              l_h_quantity_a,
                                              chr_l_rej_str,
                                              chr_fl_name,
                                              p_mesg_body,
                                              p_fl_53x_RejectRpt,
                                              l_debug_info_ptr) )
         {
            fprintf(fl_userlog,"Failed to Write to 53x Reject Report\n");
            APL_GOBACK_FAIL
          }
            APL_GOBACK_FAIL
       }
      


		
      
	 if ((strcmp(l_ms_53x_struct_h->swift_msg_no,"530")==0) || (strcmp(l_ms_53x_struct_h->swift_msg_no,"532")==0))	
      { 
   	int_l_diff_dates = 0;
   	if (APL_FAILURE == CO_Pro_DateComp( chr_l_h_trdt_a,
     		                               l_ms_53x_struct_h->setl_date,
        		                            &int_l_diff_dates,
           		                         l_debug_info_ptr) )
   	{
      	APL_GOBACK_FAIL
   	}

   	if (int_l_diff_dates  < 0 )
   	{  
      	strcpy(chr_l_rej_str,"SETTLEDT IN MESSAGE BEFORE TRADE DATE");
      	strcpy(chr_g_msg_sts, "RJT");  
      	if (APL_FAILURE == MS_Proc_IncMsg53xRejRpt(l_ms_53x_struct_h->vtb_client,  
                                           	l_ms_53x_struct_h->indentity_no,   
                                           	chr_l_h_instrcode_A,  
                                           	l_ms_53x_struct_h->quantity, 
                                           	chr_l_rej_str,   
															chr_fl_name,
															p_mesg_body,
                                           	p_fl_53x_RejectRpt,  
                                           	l_debug_info_ptr) ) 
      	{  
         	fprintf(fl_userlog,"Failed to Write to 53x Reject Report\n");
         	APL_GOBACK_FAIL   
      	} 
			APL_GOBACK_FAIL 

    	} 	


		
      int_l_diff_dates = 0;
      if (APL_FAILURE == CO_Pro_DateComp( chr_l_h_confdt,
                                        l_ms_53x_struct_h->setl_date,
                                        &int_l_diff_dates,
                                        l_debug_info_ptr) )
      {
         APL_GOBACK_FAIL
      }

      if (int_l_diff_dates  < 0 )
      { 
         strcpy(chr_l_rej_str,"SETTLEDT IN MESSAGE BEFORE CONFIRMATION DATE");
         strcpy(chr_g_msg_sts, "RJT"); 
         if (APL_FAILURE == MS_Proc_IncMsg53xRejRpt(l_ms_53x_struct_h->vtb_client,
                                             l_ms_53x_struct_h->indentity_no,
                                             chr_l_h_instrcode_A,
                                             l_ms_53x_struct_h->quantity,
                                             chr_l_rej_str,
															chr_fl_name,
															p_mesg_body,
                                             p_fl_53x_RejectRpt,
                                             l_debug_info_ptr) )
         { 
            fprintf(fl_userlog,"Failed to Write to 53x Reject Report\n");
            APL_GOBACK_FAIL
         } 
			APL_GOBACK_FAIL

      }

		
		int_l_diff_dates = 0;
	
		if (APL_FAILURE == CO_RtvSysDtTime(chr_l_now, l_debug_info_ptr))
   	{
      	APL_GOBACK_FAIL
   	}

		if (APL_FAILURE == CO_Pro_DateComp( l_ms_53x_struct_h->setl_date,
													chr_l_now,
                                    	&int_l_diff_dates,
                                    	l_debug_info_ptr ))
   	{
      	APL_GOBACK_FAIL
   	}
		
		if (int_l_diff_dates < 0 )
		{
			strcpy(chr_l_rej_str,"SETTLEDT IN MESSAGE GREATER THAN TODAY"); 
			strcpy(chr_g_msg_sts,"PND");
			if (APL_FAILURE == MS_Proc_IncMsg53xPendRpt(chr_l_h_client_a,
        		                                 l_ms_53x_struct_h->indentity_no,
                                             chr_l_h_instrcode_A,
                                             l_ms_53x_struct_h->quantity,
                                             chr_l_rej_str,
                                             chr_fl_name,
                                             p_mesg_body,
                                             p_fl_53x_Pend_Rpt,
                                             l_debug_info_ptr) )
          {
             fprintf(fl_userlog,"Failed to Write to 53x Pending Report\n");
             APL_GOBACK_FAIL
          } 
			 APL_GOBACK_FAIL
		}

		
		int_l_diff_dates = 0;

   	if (APL_FAILURE == CO_Pro_DateComp( chr_l_h_trd_settledt,
     		                               chr_l_now,
        		                            &int_l_diff_dates,
           		                         l_debug_info_ptr ))
   	{
      	APL_GOBACK_FAIL
   	}

		if (int_l_diff_dates < 0 )
      {
         strcpy(chr_l_rej_str,"CSD  LATER THAN TODAY");
         strcpy(chr_g_msg_sts,"PND");
         if (APL_FAILURE == MS_Proc_IncMsg53xPendRpt(chr_l_h_client_a,
                                             l_ms_53x_struct_h->indentity_no,
                                             chr_l_h_instrcode_A,
                                             l_ms_53x_struct_h->quantity,
                                             chr_l_rej_str,
                                             chr_fl_name,
                                             p_mesg_body,
                                             p_fl_53x_Pend_Rpt,
                                             l_debug_info_ptr) )
          {
             fprintf(fl_userlog,"Failed to Write to 53x Pending Report\n");
             APL_GOBACK_FAIL
          }
          APL_GOBACK_FAIL
      }	
    }  

		
		
		

		if  (l_mt_core_sys_params_struct_h.manifld_print_ind[0] == 'Y')
		{
			strcpy(chr_l_h_maniflag, APL_NULL_STRING);

			EXEC SQL SELECT CLASSCD
   		INTO  :chr_l_h_clscode:l_i_clscode
   		FROM MT_INSTRUMENT
   		WHERE instr_code = RTRIM(:chr_l_h_instrcode_A);
	
			IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET( ERR_INSTR_NOTFND,
                                          		chr_l_h_instrcode_A,
                                          		APL_NULL_STRING,
                                          		APL_NULL_STRING );	
		
			if(strcmp(chr_l_h_clscode,"MIN")) 
			{
				if (l_mt_core_sys_params_struct_h.loc_proc_ind[0] == 'Y')
      		{
         		EXEC SQL SELECT MANIFLD_IND 
					INTO :chr_l_h_maniflag:l_i_maniflag
         		FROM MT_LOCATION
         		WHERE location_cd = :chr_l_h_locncode_a;
  
         		IS_ANY_ORA_ERROR_AND_ZERO_RESULTSET( ERR_LOCN_NOTFND,
                                                		chr_l_h_locncode_a,
                                                		APL_NULL_STRING,
                                                		APL_NULL_STRING);


					if (chr_l_h_maniflag[0] == 'Y')
					{
						if (VAL_DELIVER_DEAL(chr_l_h_trcode_a[0]))
            		{
               		chr_l_h_maniflag[0] = 'D';
            		}
            		else
            		{
               		chr_l_h_maniflag[0] = 'R';
            		}
					}

				}
				else
				{
					if (VAL_DELIVER_DEAL(chr_l_h_trcode_a[0]))
                  {
                     chr_l_h_maniflag[0] = 'D';
                  }
                  else
                  {
                     chr_l_h_maniflag[0] = 'R';
                  }
				}
			}
		
			if ((l_i_delrecdt == -1) && (strcmp(chr_l_h_maniflag,APL_NULL_STRING) ) )
			{
				strcpy(chr_l_rej_str,"MANIFOLD NOT PRINTED");
            strcpy(chr_g_msg_sts,"PND");
            if (APL_FAILURE == MS_Proc_IncMsg53xPendRpt(chr_l_h_client_a,
                                              l_ms_53x_struct_h->indentity_no,
                                              chr_l_h_instrcode_A,
                                              l_ms_53x_struct_h->quantity,
                                              chr_l_rej_str,
                                              chr_fl_name,
                                              p_mesg_body,
                                              p_fl_53x_Pend_Rpt,
                                              l_debug_info_ptr) )
            {
               fprintf(fl_userlog,"Failed to Write to 53x Pending Report\n");
               APL_GOBACK_FAIL
            }
            APL_GOBACK_FAIL
		
			}

		}
		


		
		
		EXEC SQL SELECT COUNT(*)
		INTO 	:int_l_count
		FROM 	DL_RUINSTRUMENT
		WHERE INSTR_CODE 		= :chr_l_h_instrcode_A
		AND   RU_INSTR_STAT = 'AA';	

		IS_ANY_ORA_ERROR
	
		if (int_l_count = 0)	
		{
			strcpy(chr_l_rej_str,"INSTRUMENT NOT FOUND IN RRMM");
         strcpy(chr_g_msg_sts, "RJT");
         if (APL_FAILURE == MS_Proc_IncMsg53xRejRpt(l_ms_53x_struct_h->vtb_client,
                                             l_ms_53x_struct_h->indentity_no,
                                             chr_l_h_instrcode_A,
                                             l_ms_53x_struct_h->quantity,
                                             chr_l_rej_str,
                                             chr_fl_name,
                                             p_mesg_body,
                                             p_fl_53x_RejectRpt,
                                             l_debug_info_ptr) )
         {
            fprintf(fl_userlog,"Failed to Write to 53x Reject Report\n");
            APL_GOBACK_FAIL
         }
         APL_GOBACK_FAIL
      }

			
		memset(l_deal_sstdet_struct_h, NULL, sizeof(DL_DEAL_SSTDET_STRUCT_H ));
		strcpy(l_deal_sstdet_struct_h->h_dl_client, chr_l_h_client_a);
      strcpy(l_deal_sstdet_struct_h->h_indentity_no, chr_l_h_refno_A);
      strcpy(l_deal_sstdet_struct_h->h_ispart_, "N");
      l_deal_sstdet_struct_h->h_newquantity = 0.0;
      l_deal_sstdet_struct_h->h_newamount = 0.0;
      strcpy(l_deal_sstdet_struct_h->h_newindentity_no, APL_NULL_STRING);
	   if ((strcmp(l_ms_53x_struct_h->swift_msg_no,"530")==0) || (strcmp(l_ms_53x_struct_h->swift_msg_no,"532")==0))	
         strcpy(l_deal_sstdet_struct_h->h_instrdate,l_ms_53x_struct_h->setl_date) ; 
      else
        {
		   if (APL_FAILURE == CO_RtvSysDt(chr_l_now, l_debug_info_ptr))
   	    {
      	   APL_GOBACK_FAIL
   	    }
         strcpy(l_deal_sstdet_struct_h->h_instrdate,chr_l_now) ;
        }
		strcpy(l_deal_sstdet_struct_h->h_moneydate,APL_NULL_STRING);
		l_deal_sstdet_struct_h->h_pr = l_h_cost;
		strcpy(l_deal_sstdet_struct_h->h_access_stamp,chr_l_h_access_stamp);
      l_deal_sstdet_struct_h->h_brokercomm = l_h_brokercomm;
		strcpy(l_deal_sstdet_struct_h->h_sel_forreg, APL_NULL_STRING);
      l_deal_sstdet_struct_h->h_pendregquantity = 0.0;
      l_deal_sstdet_struct_h->h_marktrfquantity = 0.0;
      l_deal_sstdet_struct_h->h_mcomplquantity  = 0.0;
      l_deal_sstdet_struct_h->h_rec_int_000  = 0.0;
      l_deal_sstdet_struct_h->h_delta_000  = 0.0;
      l_deal_sstdet_struct_h->h_delta_001  = 0.0;
      l_deal_sstdet_struct_h->h_delta_002  = 0.0;


		 
      if (chr_l_h_trcode_a[0] == DEALCD_DF)
      {
		
       	if (APL_FAILURE == DL_Proc_PosChkMod( l_deal_sstdet_struct_h,
                                          chr_l_h_instrcode_A,
                                          chr_l_h_locncode_a,
                                          APL_NULL_STRING,
                                          chr_l_h_trcode_a,
                                          l_i_trd_instr_dt,
                                          APL_NULL_STRING,
                                          l_ms_53x_struct_h->quantity,
                                          'C',
														"FREE",
                                          &int_l_chkflg,
                                          l_debug_info_ptr ))
      	{
         	APL_GOBACK_FAIL
      	}

      	if (int_l_chkflg == APL_FAILURE)
      	{
 				strcpy(chr_l_rej_str,"NOT ENOUGH POSITIONS");
         	strcpy(chr_g_msg_sts,"PND");
         	if (APL_FAILURE == MS_Proc_IncMsg53xPendRpt(chr_l_h_client_a,
           	                                  l_ms_53x_struct_h->indentity_no,
           	                                  chr_l_h_instrcode_A,
           	                                  l_ms_53x_struct_h->quantity,
           	                                  chr_l_rej_str,
           	                                  chr_fl_name,
           	                                  p_mesg_body,
            	                               p_fl_53x_Pend_Rpt,
                                              l_debug_info_ptr) )
          	{
             	fprintf(fl_userlog,"Failed to Write to 53x Pending Report\n");
             	APL_GOBACK_FAIL
          	}
          	APL_GOBACK_FAIL
      	} 
      }

		strcpy(p_instr_code,chr_l_h_instrcode_A);
		strcpy(p_typeofdeal,chr_l_h_typeoftrd);
		strcpy(p_dealcd,chr_l_h_trcode_a);
		strcpy(p_domcpac,chr_l_h_domcpac);
		strcpy(p_countclt,chr_l_h_countacc_a);
		memcpy(p_dl_deal_sstdet_struct_h,l_deal_sstdet_struct_h,sizeof(DL_DEAL_SSTDET_STRUCT_H) );


		RETURN_SUCCESS:
   	APL_IF_DEBUG
   	{
			APL_FREE(l_deal_sstdet_struct_h);
      	CO_ProcMonitor(APL_OUT_FILE,"Exiting out of I_53x_ValidMsgFn() sucessfully.\n", NULL, NULL);
   	}
   	return APL_SUCCESS;

   	RETURN_FAILURE:
   	APL_IF_DEBUG
   	{
			APL_FREE(l_deal_sstdet_struct_h);
      	CO_ProcMonitor(APL_OUT_FILE,"Exiting out of I_53x_ValidMsgFn() unsucessfully.\n", NULL, NULL);
   	}
   	return APL_FAILURE;

}




int   MS_Rtv_53xCpRef	( DL_DEAL_SSTDET_STRUCT_H     *p_dl_deal_sstdet_struct_h,
							double								p_quantity,
							char								*p_dealcd,
							char								*p_domcpac,
							char								*p_countclt,
							char								*p_cp_clt,
							char								*p_cp_ident,
							char								*p_flg_settled,
                     DEBUG_INFO_STRUCT_H               **l_debug_info_ptr )


{

    
	char  chr_l_h_cp_account[APL_COUNTACC_LEN] = APL_NULL_STRING;
	char	chr_l_h_cp_ref_no[APL_TXNREFNO_LEN] = APL_NULL_STRING;
	char	chr_l_h_instr_dt[APL_DATE_LEN] 		  = APL_NULL_STRING;
	
	short	l_i_cp_ref_no							= 0;
	short	l_i_instr_dt								= 0;

	EXEC SQL VAR	chr_l_h_cp_ref_no			IS STRING;
	EXEC SQL VAR	chr_l_h_instr_dt				IS STRING;

	if (!strcmp(p_domcpac,l_mt_core_sys_params_struct_h.custody_clt_cd) )
		strcpy(chr_l_h_cp_account,p_countclt);
	else
		strcpy(chr_l_h_cp_account,p_domcpac);

   
   G_SYS_ACCOUNT_LEN = 10;

	if (p_dealcd[0] == '2')
	{
		EXEC SQL SELECT 		IDENTIY_NO,
							 		INSTRUMENT_DT 
		INTO						:chr_l_h_cp_ref_no:l_i_cp_ref_no,
									:chr_l_h_instr_dt:l_i_instr_dt
		FROM DL_DEAL
		WHERE CLIENT 		 = rtrim(SUBSTR(:chr_l_h_cp_account,1,:G_SYS_ACCOUNT_LEN)) 
		AND	IDENTIY_NO			 = :p_dl_deal_sstdet_struct_h->h_indentity_no
		AND   DL_CLASS 	 IN ('26','27')
		AND  	QTY		 	 =	:p_quantity
		AND	(DOMESTIC_CPCLT  	 =	:p_dl_deal_sstdet_struct_h->h_dl_client
				 OR CP_CLT = :p_dl_deal_sstdet_struct_h->h_dl_client)
		AND 	DEAL_CD = '1';
	}

	else if (p_dealcd[0] == '1')
	{
		EXEC SQL SELECT      IDENTIY_NO,
                           INSTRUMENT_DT
      INTO                 :chr_l_h_cp_ref_no:l_i_cp_ref_no,
                           :chr_l_h_instr_dt:l_i_instr_dt
      FROM DL_DEAL
      WHERE CLIENT      = rtrim(SUBSTR(:chr_l_h_cp_account,1,:G_SYS_ACCOUNT_LEN)) 
		AND	IDENTIY_NO        = :p_dl_deal_sstdet_struct_h->h_indentity_no
      AND   DL_CLASS    IN ('26','27')
      AND   QTY          = :p_quantity
      AND   (DOMESTIC_CPCLT     = :p_dl_deal_sstdet_struct_h->h_dl_client
             OR CP_CLT = :p_dl_deal_sstdet_struct_h->h_dl_client)
      AND   DEAL_CD = '2';

	}
printf("\n reached the processtion MS_Rtv_53xCpRef after change -------->\n");
	IS_ANY_ORA_ERROR

	if (sqlca.sqlcode==0)
	{
		strcpy(p_cp_clt,chr_l_h_cp_account);
		strcpy(p_cp_ident,chr_l_h_cp_ref_no);
		if (!strcmp(chr_l_h_instr_dt,APL_NULL_STRING))
			strcpy(p_flg_settled,"N");
		else
			strcpy(p_flg_settled,"Y");
	}

	 RETURN_SUCCESS:
      APL_IF_DEBUG
      {
         CO_ProcMonitor(APL_OUT_FILE,"Exiting out of MS_Rtv_53xCpRef() successfully.\n", NULL, NULL);
      }
      return APL_SUCCESS;

      RETURN_FAILURE:
      APL_IF_DEBUG
      {
         CO_ProcMonitor(APL_OUT_FILE,"Exiting out of MS_Rtv_53xCpRef() unsuccessfully.\n", NULL, NULL);
      }
      return APL_FAILURE;
}







int MS_Rtv_AccClass(char 				*chr_p_client,
                  char				*p_clt_class,
						DEBUG_INFO_STRUCT_H   **l_debug_info_ptr )


{
	char  chr_l_h_acc_class[I_CLI_CLASS_LEN] = APL_NULL_STRING;

   short l_i_acc_class                  = 0;

   EXEC SQL VAR   chr_l_h_acc_class        IS STRING;

	EXEC SQL SELECT CLN_CLAS 
	INTO :chr_l_h_acc_class:l_i_acc_class
	FROM MT_CLIENT
	WHERE CLN_CODE = :chr_p_client;

	IS_ANY_ORA_ERROR

	if (APL_ZERO_RESULT_SET)
	{
		APL_GOBACK_FAIL
	}

	strcpy(p_clt_class,chr_l_h_acc_class);
	APL_GOBACK_SUCCESS
	
	RETURN_SUCCESS:
      APL_IF_DEBUG
      {
         CO_ProcMonitor(APL_OUT_FILE,"Exiting out of MS_Rtv_AccClass() successfully.\n", NULL, NULL);
      }
      return APL_SUCCESS;

      RETURN_FAILURE:
      APL_IF_DEBUG
      {
         CO_ProcMonitor(APL_OUT_FILE,"Exiting out of MS_Rtv_AccClass() unsuccessfully.\n", NULL, NULL);
      }
      return APL_FAILURE;
}




int MS_Rtv_RgNoInstrCode(char				*p_instr_code,
                   char				**p_srnstr,
						 DEBUG_INFO_STRUCT_H   **l_debug_info_ptr)
{

	char  chr_l_h_defstregno[I_STREGNO_LEN] = APL_NULL_STRING;

   short l_i_defstregno = 0;

   EXEC SQL VAR   chr_l_h_defstregno        IS STRING;

   EXEC SQL SELECT STAT_REG_NO
   INTO :chr_l_h_defstregno:l_i_defstregno
   FROM DL_RUINSTRUMENT
   WHERE INSTR_CODE = :p_instr_code;

   IS_ANY_ORA_ERROR

   if (APL_ZERO_RESULT_SET)
   {
      APL_GOBACK_FAIL
   }

	
	*p_srnstr = (char *)calloc(I_LEN_S + I_LEN_QTY + 2 + 1,sizeof(char));
	APL_MALLOC_FAIL(p_srnstr);
   strcpy(*p_srnstr,chr_l_h_defstregno);
   APL_GOBACK_SUCCESS	

	RETURN_SUCCESS:
      APL_IF_DEBUG
      {
         CO_ProcMonitor(APL_OUT_FILE,"Exiting out of MS_Rtv_RgNoInstrCode() successfully.\n", NULL, NULL);
      }
      return APL_SUCCESS;

      RETURN_FAILURE:
      APL_IF_DEBUG
      {
         CO_ProcMonitor(APL_OUT_FILE,"Exiting out of MS_Rtv_RgNoInstrCode() unsuccessfully.\n", NULL, NULL);
      }
      return APL_FAILURE;
}



int DL_Rtv_RegNoQty(char				*chr_p_client,
						 char				*chr_p_refno,
                   char          **p_srnstr,
                   DEBUG_INFO_STRUCT_H  **l_debug_info_ptr)						 
{
		int 					int_l_h_count=0;
		int					int_l_len_srn = 0;
		double				l_h_quantity_a	=0.0;
		char  				chr_l_h_stregno[I_STREGNO_LEN] = APL_NULL_STRING;
		char					chr_l_strqty[27] = APL_NULL_STRING;
		
		short					l_i_stregno = 0;
		short					int_l_i_qty		= 0;
		int					int_l_cntr		= 0;

		EXEC SQL VAR chr_l_h_stregno	IS STRING;

		EXEC SQL SELECT NVL(COUNT(*),0)
		INTO :int_l_h_count
		FROM DL_RUDEAL
		WHERE client = :chr_p_client
		AND	IDENTIY_NO	  = :chr_p_refno;
	
		IS_ANY_ORA_ERROR
		
		if ((int_l_h_count == 0) && (sqlca.sqlcode == 0) )
		{
			APL_GOBACK_SUCCESS
		}
		

		if (int_l_h_count >0) 
		{
			
			EXEC SQL DECLARE cur_SRN CURSOR FOR
      	SELECT ST_REG_NO,QTY FROM DL_RUDEAL
      	WHERE CLIENT = :chr_p_client AND
					IDENTIY_NO   = :chr_p_refno;

			EXEC SQL OPEN cur_SRN;

      	IS_ANY_ORA_ERROR

			*p_srnstr = (char *)calloc((int_l_h_count*(I_LEN_S + I_LEN_QTY + 2)) + 1,sizeof(char));
         APL_MALLOC_FAIL(*p_srnstr);
			

			for (int_l_cntr=0;int_l_cntr < int_l_h_count;int_l_cntr++)
			{
				l_h_quantity_a=0.0;

				EXEC SQL FETCH cur_SRN
        		INTO  :chr_l_h_stregno:l_i_stregno,
						:l_h_quantity_a:int_l_i_qty;

        		IS_ANY_ORA_ERROR				
		
				memset(chr_l_strqty,APL_NULL_CHAR,27);
	
				sprintf(chr_l_strqty,"%.04lf",l_h_quantity_a);

   			if (int_l_cntr == 0) 
					strcpy(*p_srnstr,chr_l_h_stregno);			
				else
					strcat(*p_srnstr,chr_l_h_stregno);
				strcat(*p_srnstr,":");
				strcat(*p_srnstr,chr_l_strqty);
				strcat(*p_srnstr,";");
			}
		}

		

		RETURN_SUCCESS:
     	APL_IF_DEBUG
     	{
       	CO_ProcMonitor(APL_OUT_FILE,"Exiting out of DL_Rtv_RegNoQty() successfully.\n", NULL, NULL);
     	}
      	return APL_SUCCESS;

      	RETURN_FAILURE:
      	APL_IF_DEBUG
      	{
         	CO_ProcMonitor(APL_OUT_FILE,"Exiting out of DL_Rtv_RegNoQty() unsuccessfully.\n", NULL, NULL);
      	}
      	return APL_FAILURE;	
	}



int   MS_Prnt_Msg563SetlRpt        (MS_536_STRUCT_H      *p_ms_536_struct_h,
										char					*chr_p_client,
										char					*chr_p_refno,
                              char              *p_msg_sts,
                              char              *p_rej_reas,
										int					p_tran_count,
                              int               *int_p_retstat,
                              DEBUG_INFO_STRUCT_H      **p_debug_info_struct_h_c)
{
   char chr_l_rejreas[150] = APL_NULL_STRING;
   char chr_l_now[APL_DATE_LEN] = APL_NULL_STRING;
   char chr_l_buf[BUFFER_LEN] = APL_NULL_STRING;
   struct sqlca sqlca;

   MS_536_STRUCT_H l_ms_536_struct_h;
   H_DL_SETLRPT_STRUCT l_h_dl_setlrpt_structa;
   I_DL_SETLRPT_STRUCT l_i_dl_setlrpt_struct = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   DEBUG_INFO_STRUCT_H *l_debuginfo_struct, *l_debug_infostruct_h;
	DEBUG_INFO_STRUCT_H *l_debug_infostruct = NULL, **l_debug_info_ptr = &l_debug_infostruct;
	char  chr_h_system_date[APL_DATE_LEN];
	
	
	EXEC SQL BEGIN DECLARE SECTION;
   EXEC SQL VAR l_h_dl_setlrpt_structa.h_swift_msg_no IS STRING;
   EXEC SQL VAR l_h_dl_setlrpt_structa.h_nameof_file IS STRING;
   EXEC SQL VAR l_h_dl_setlrpt_structa.h_dl_client IS STRING;
   EXEC SQL VAR l_h_dl_setlrpt_structa.h_indentity_no IS STRING;
   EXEC SQL VAR l_h_dl_setlrpt_structa.h_trrf_indentity_no IS STRING;
   EXEC SQL VAR l_h_dl_setlrpt_structa.h_instr_code IS STRING;
   EXEC SQL VAR l_h_dl_setlrpt_structa.h_dealcd IS STRING;
   EXEC SQL VAR l_h_dl_setlrpt_structa.h_instrdate IS STRING;
   EXEC SQL VAR l_h_dl_setlrpt_structa.h_message_stat IS STRING;
   EXEC SQL VAR l_h_dl_setlrpt_structa.h_reject_reason IS STRING;
   EXEC SQL VAR l_h_dl_setlrpt_structa.h_rep_dt IS STRING;
   EXEC SQL VAR l_h_dl_setlrpt_structa.h_report_ind IS STRING;

   EXEC SQL VAR l_ms_536_struct_h.deal_rf_ident_no IS STRING;
   EXEC SQL VAR l_ms_536_struct_h.instr_code IS STRING;
   EXEC SQL VAR l_ms_536_struct_h.deal_cd IS STRING;
   EXEC SQL VAR chr_h_system_date IS STRING;
	EXEC SQL END DECLARE SECTION;
   l_ms_536_struct_h.amount=0.0;
   l_h_dl_setlrpt_structa.h_amt=0.0;
   l_h_dl_setlrpt_structa.h_qty=0.0;
   l_h_dl_setlrpt_structa.h_deal_no=0;
   memset(&l_h_dl_setlrpt_structa , NULL, sizeof(H_DL_SETLRPT_STRUCT));
   memset(&l_ms_536_struct_h , NULL, sizeof(MS_536_STRUCT_H));
	l_ms_536_struct_h = *p_ms_536_struct_h;

   if(strcmp(l_h_dl_setlrpt_structa.h_swift_msg_no,APL_NULL_STRING)==0)
   strcpy(l_h_dl_setlrpt_structa.h_swift_msg_no,"536");

   if(strcmp(l_h_dl_setlrpt_structa.h_nameof_file,APL_NULL_STRING)==0)
   strcpy(l_h_dl_setlrpt_structa.h_nameof_file,chr_g_msgfile_name);
	
	if(strcmp(chr_p_client,APL_NULL_STRING)==0)
	{
		strcpy(l_h_dl_setlrpt_structa.h_dl_client,APL_NULL_STRING);
		l_i_dl_setlrpt_struct.i_dl_client = -1;
	}
	else
	{
		strcpy(l_h_dl_setlrpt_structa.h_dl_client,chr_p_client);
		l_i_dl_setlrpt_struct.i_dl_client = 0;
	}

	if(strcmp(chr_p_refno,APL_NULL_STRING)==0)
	{
		strcpy(l_h_dl_setlrpt_structa.h_indentity_no,APL_NULL_STRING);
		l_i_dl_setlrpt_struct.i_indentity_no = -1;
	}
	else
	{
		strcpy(l_h_dl_setlrpt_structa.h_indentity_no,chr_p_refno);
		l_i_dl_setlrpt_struct.i_indentity_no=0;
	}

	if(strcmp(l_ms_536_struct_h.deal_rf_ident_no,APL_NULL_STRING)==0)
	{
		strcpy(l_h_dl_setlrpt_structa.h_trrf_indentity_no,APL_NULL_STRING);
		l_i_dl_setlrpt_struct.i_trrf_indentity_no = -1;
	}
	else
	{
		strcpy(l_h_dl_setlrpt_structa.h_trrf_indentity_no,l_ms_536_struct_h.deal_rf_ident_no);
		l_i_dl_setlrpt_struct.i_trrf_indentity_no = 0;
	}
	if(strcmp(l_ms_536_struct_h.instr_code,APL_NULL_STRING)==0)
	{
		strcpy(l_h_dl_setlrpt_structa.h_instr_code,APL_NULL_STRING);
      l_i_dl_setlrpt_struct.i_instr_code = -1;
	}
	else
	{
		strcpy(l_h_dl_setlrpt_structa.h_instr_code,l_ms_536_struct_h.instr_code);
      l_i_dl_setlrpt_struct.i_instr_code = 0;
	}

	if(strcmp(l_ms_536_struct_h.deal_cd,APL_NULL_STRING)==0)
	{
		strcpy(l_h_dl_setlrpt_structa.h_dealcd,APL_NULL_STRING);
	   l_i_dl_setlrpt_struct.i_dealcd = -1;
	}
	else
	{
		strcpy(l_h_dl_setlrpt_structa.h_dealcd,l_ms_536_struct_h.deal_cd);
	   l_i_dl_setlrpt_struct.i_dealcd = 0;
	}
	strcpy(l_h_dl_setlrpt_structa.h_instrdate,APL_NULL_STRING);
   l_i_dl_setlrpt_struct.i_instrdate = -1;
	
	if(strcmp(p_msg_sts,APL_NULL_STRING)==0)
		strcpy(l_h_dl_setlrpt_structa.h_message_stat,"DPE");
	else
		strcpy(l_h_dl_setlrpt_structa.h_message_stat,p_msg_sts);

	if(strcmp(p_rej_reas,APL_NULL_STRING)==0)
	{
		strcpy(l_h_dl_setlrpt_structa.h_reject_reason,APL_NULL_STRING);
	}
	else
	{
		strcpy(l_h_dl_setlrpt_structa.h_reject_reason,p_rej_reas);
		l_i_dl_setlrpt_struct.i_reject_reason=0;
	}

	memset(chr_h_system_date,APL_NULL_CHAR,APL_DATE_LEN);
	if (APL_FAILURE == CO_RtvSysDt(chr_h_system_date,l_debug_info_ptr))
	{
   	printf("failed to get system chr_date\n");
   	APL_GOBACK_FAIL
	}

	strcpy(l_h_dl_setlrpt_structa.h_rep_dt,chr_h_system_date);
   l_i_dl_setlrpt_struct.i_rep_dt = 0;
	strcpy(l_h_dl_setlrpt_structa.h_report_ind,"N");
	l_h_dl_setlrpt_structa.h_amt=l_ms_536_struct_h.amount;
	l_h_dl_setlrpt_structa.h_qty=l_ms_536_struct_h.quantity;
	l_h_dl_setlrpt_structa.h_deal_no =	p_tran_count; 
	if(strcmp(l_ms_536_struct_h.currency_cd,APL_NULL_STRING)==0)
	{
		strcpy(l_h_dl_setlrpt_structa.h_currencycode,APL_NULL_STRING);
	   l_i_dl_setlrpt_struct.i_currencycode = -1;
	}
	else
	{
		strcpy(l_h_dl_setlrpt_structa.h_currencycode,l_ms_536_struct_h.currency_cd);
	   l_i_dl_setlrpt_struct.i_currencycode = 0;
	}
	
	printf("STARTING TO PRINT l_h_dl_setlrpt_structa.h_rej_reason is %s\n",l_h_dl_setlrpt_structa.h_reject_reason);
	printf("p_rej_reason is %s\n",p_rej_reas);
	printf("i_rej_reason is %d\n",l_i_dl_setlrpt_struct.i_reject_reason);
	if(strcmp(p_rej_reas,APL_NULL_STRING)!=0)
	{
		EXEC SQL INSERT INTO DL_SETLRPT
			VALUES(:l_h_dl_setlrpt_structa:l_i_dl_setlrpt_struct);
		IS_ANY_ORA_ERROR
	}
   if ( p_debug_info_struct_h_c )
   {
      CO_InsertMsg(*p_debug_info_struct_h_c);

      l_debuginfo_struct = *p_debug_info_struct_h_c ;
      for(l_debug_infostruct_h = l_debuginfo_struct; l_debug_infostruct_h ; l_debug_infostruct_h=l_debug_infostruct_h->h_next )
      {
         if (strcmp(l_debug_infostruct_h->msg , APL_NULL_STRING))
         {
            strcpy(chr_l_rejreas, APL_NULL_STRING);
            if (strlen(l_debug_infostruct_h->msg) > 0)
            {
               strcpy(chr_l_rejreas, l_debug_infostruct_h->msg);
               printf("Message %s\n",l_debug_infostruct_h->msg); 
               strcat(chr_l_rejreas, " ");
            }
            strcat(chr_l_rejreas, l_debug_infostruct_h->h_key1 );
            strcat(chr_l_rejreas, " ");
            strcat(chr_l_rejreas, l_debug_infostruct_h->h_key2 );
            strcat(chr_l_rejreas, " ");
            strcat(chr_l_rejreas, l_debug_infostruct_h->h_key3 );
         	strcpy(l_h_dl_setlrpt_structa.h_reject_reason, APL_NULL_STRING);
            strncpy(l_h_dl_setlrpt_structa.h_reject_reason, chr_l_rejreas, REJ_REASN_LEN-1);
            strcat(l_h_dl_setlrpt_structa.h_reject_reason,"\0");
            printf("Rej reason 1: %s \n ",l_h_dl_setlrpt_structa.h_reject_reason); 
            APL_IF_DEBUG
            {
               memset( chr_l_buf, NULL, BUFFER_LEN );
               sprintf( chr_l_buf, "l_rejreas = %s ", chr_l_rejreas);
               CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL , NULL);

               memset( chr_l_buf, NULL, BUFFER_LEN );
               sprintf( chr_l_buf, "Err List rej_reas = %s ", l_h_dl_setlrpt_structa.h_reject_reason);
               CO_ProcMonitor(APL_OUT_FILE, chr_l_buf, NULL , NULL);
            }

	printf("STARTING TO PRINT Error list l_h_dl_setlrpt_structa.h_rej_reason is %s\n",l_h_dl_setlrpt_structa.h_reject_reason);
	printf("p_rej_reason is %s\n",p_rej_reas);
	printf("i_rej_reason is %d\n",l_i_dl_setlrpt_struct.i_reject_reason);
            EXEC SQL INSERT INTO DL_SETLRPT
                     VALUES (:l_h_dl_setlrpt_structa:l_i_dl_setlrpt_struct);
            IS_ANY_ORA_ERROR
         }

         
         APL_FREE(l_debug_infostruct_h->msg);
      }
	}


   

   RETURN_SUCCESS:
   {
      CO_ProcMonitor(APL_OUT_FILE, "Exiting Out Of MS_Prnt_Msg563SetlRpt succesfully\n",
               NULL, NULL);

      return (APL_SUCCESS);
   }
   RETURN_FAILURE:
   {
      CO_ProcMonitor(APL_OUT_FILE, "Exiting Out Of MS_Prnt_Msg563SetlRpt unsuccesfully\n",
               NULL, NULL);

      return (APL_FAILURE);
   }
}




int   DL_Proc_DFRFSetl (			FILE 						*p_fl_536log, 
										int               	*int_p_retstat,
										INTL_ENV_DATA_STRUCT_H  	*p_intlenv_data_struct_h,
                              DEBUG_INFO_STRUCT_H      	**l_debug_info_ptr)
{

	H_DL_SETLRPT_STRUCT   l_h_dl_setlrpt_struct;
	I_DL_SETLRPT_STRUCT   l_i_dl_setlrpt_structa;
	MS_536_STRUCT_H		  l_ms_536_struct_h;
   
	DL_DEAL_SSTDET_STRUCT_H	l_dl_deal_sstdetstruct_h;
	DL_DEAL_SSTDET_STRUCT_H	l_dl_deal_sstdet;

	char						chr_h_trd_client[11]		 	=		APL_NULL_STRING;
	char						chr_h_trd_refno[17]			=		APL_NULL_STRING;
	char						chr_h_trd_ispartial[2]		=		APL_NULL_STRING;
	double					h_trd_cost					=		0;
	double					h_trd_brokercomm				=		0;
	double					h_trd_mrk_dl_failqty			=		0;
	double					h_trd_recint000			=		0;
	double					h_trd_dl_completeqty			=		0;
	double					h_trd_delfrm000			=		0;
	double					h_trd_delfrm001			=		0;
	double					h_trd_delfrm003			=		0;
	char						chr_h_trd_trcode[2]			=		APL_NULL_STRING;
	double					dbl_h_trd_amount				=		0;
	char						chr_h_trd_ccycode[4]			=		APL_NULL_STRING;
	double					h_trd_quantity					=		0;
	char						chr_h_trd_instrcode[9]			=		APL_NULL_STRING;
	char						chr_h_trd_status[3]			=		APL_NULL_STRING;
	char						chr_h_trd_access_stamp[20]	=		APL_NULL_STRING;
	char						chr_h_trd_matchrefno[17]		=		APL_NULL_STRING;
	char						chr_h_trd_countacc[APL_COUNTACC_LEN]		=		APL_NULL_STRING; 
	char						chr_h_trd_domcpac[11]		=		APL_NULL_STRING;
	char						chr_l_trd_ext_clhclient[16]	=		APL_NULL_STRING;   
	char						chr_l_trd_ext_clhcountacc[16]	=		APL_NULL_STRING;   


	char						chr_h_lnk_client[11]		 	=		APL_NULL_STRING;
	char						chr_h_lnk_refno[17]			=		APL_NULL_STRING;
	char						chr_h_lnk_ispartial[2]		=		APL_NULL_STRING;
	double					h_lnk_cost					=		0;
	double					h_lnk_brokercomm				=		0;
	double					h_lnk_mrk_dl_failqty			=		0;
	double					h_lnk_recint000			=		0;
	double					h_lnk_dl_completeqty			=		0;
	double					h_lnk_delfrm000			=		0;
	double					h_lnk_delfrm001			=		0;
	double					h_lnk_delfrm003			=		0;
	char						chr_h_lnk_trcode[2]			=		APL_NULL_STRING;
	double					dbl_h_lnk_amount				=		0;
	char						chr_h_lnk_ccycode[4]			=		APL_NULL_STRING;
	double					h_lnk_quantity					=		0;
	char						chr_h_lnk_instrcode[9]			=		APL_NULL_STRING;
	char						chr_h_lnk_status[3]			=		APL_NULL_STRING;
	char						chr_h_lnk_access_stamp[20]	=		APL_NULL_STRING;
	char						chr_h_lnk_matchrefno[17]		=		APL_NULL_STRING;
	int 						int_l_error_flg					= 		0;
	double					l_ae_rate						=		0;
	char						chr_l_sys_date[20]				=		APL_NULL_STRING;
	double					dbl_l_adjustment_value		=		0;
	double					l_tolerance					=		0;
	char						chr_l_sett_tolerance[21]		= 		APL_NULL_STRING;
	char						chr_l_link_trd_client[11] 	=		APL_NULL_STRING;
	char						chr_l_link_trd_refno[17]		=		APL_NULL_STRING;
	char 						h_ora_rowid[APL_ROWID_LEN] 	= 		APL_NULL_STRING;
	int						int_retstat;
	char						chr_l_rej_str[151]				=APL_NULL_STRING;
	int 						int_l_trd_count					= 		0;

	short					i_trd_account =0;
	short					i_trd_refno =0;
	short					i_trd_ispartial =0;
	short					i_trd_price	=0;	
	short					i_trd_brkcomm=0;
	short					i_trd_marktrfqty =0;	
	short					i_trd_recint000=0;
	short					i_trd_mcomplqty=0;
	short					i_trd_delfrm000=0;
	short					i_trd_delfrm001=0;
	short					i_trd_delfrm003=0;
	short					i_trd_trcode=0;
	short					i_trd_amount	=0;
	short					i_trd_ccycode=0;
	short					i_trd_qty		=0;
	short					i_trd_instr_code=0;
	short					i_trd_status=0;
	short					i_trd_access_stamp=0;
	short					i_trd_domcpac=0;
	short					i_trd_countacc=0;
	short					i_trd_matchrefno=0;
	short					i_lnk_account =0;
	short					i_lnk_refno =0;
	short					i_lnk_ispartial =0;
	short					i_lnk_price	=0;	
	short					i_lnk_brkcomm=0;
	short					i_lnk_marktrfqty =0;	
	short					i_lnk_recint000=0;
	short					i_lnk_mcomplqty=0;
	short					i_lnk_delfrm000=0;
	short					i_lnk_delfrm001=0;
	short					i_lnk_delfrm003=0;
	short					i_lnk_trcode=0;
	short					i_lnk_amount	=0;
	short					i_lnk_ccycode=0;
	short					i_lnk_qty		=0;
	short					i_lnk_instr_code=0;
	short					i_lnk_status=0;
	short					i_lnk_access_stamp=0;
	short					i_lnk_matchrefno=0;
	EXEC SQL VAR chr_h_trd_client IS STRING;
	EXEC SQL VAR chr_h_trd_refno IS STRING;
	EXEC SQL VAR  chr_h_trd_ispartial IS STRING;
	EXEC SQL VAR  chr_h_trd_trcode IS STRING;
	EXEC SQL VAR  chr_h_trd_ccycode IS STRING;
	EXEC SQL VAR  chr_h_trd_instrcode IS STRING;
	EXEC SQL VAR  chr_h_trd_status IS STRING;
	EXEC SQL VAR  chr_h_trd_access_stamp IS STRING;
	EXEC SQL VAR  chr_h_trd_domcpac IS STRING;
	EXEC SQL VAR  chr_h_trd_countacc IS STRING;
	EXEC SQL VAR  chr_l_trd_ext_clhclient IS STRING;
	EXEC SQL VAR  chr_l_trd_ext_clhcountacc IS STRING;

	EXEC SQL VAR  chr_h_lnk_client IS STRING;
	EXEC SQL VAR  chr_h_lnk_refno IS STRING;
	EXEC SQL VAR  chr_h_lnk_ispartial IS STRING;
	EXEC SQL VAR  chr_h_lnk_trcode IS STRING;
	EXEC SQL VAR  chr_h_lnk_ccycode IS STRING;
	EXEC SQL VAR  chr_h_lnk_instrcode IS STRING;
	EXEC SQL VAR  chr_h_lnk_status IS STRING;
	EXEC SQL VAR  chr_h_lnk_access_stamp IS STRING;

	EXEC SQL VAR  chr_l_sys_date IS STRING;
	EXEC SQL VAR  chr_l_link_trd_client IS STRING;
	EXEC SQL VAR  chr_l_link_trd_refno IS STRING;
	EXEC SQL VAR  h_ora_rowid IS STRING;
	EXEC SQL VAR  chr_l_rej_str IS STRING;

	EXEC SQL VAR l_h_dl_setlrpt_struct.h_swift_msg_no IS STRING;
	EXEC SQL VAR l_h_dl_setlrpt_struct.h_nameof_file IS STRING;
	EXEC SQL VAR l_h_dl_setlrpt_struct.h_dl_client IS STRING;
	EXEC SQL VAR l_h_dl_setlrpt_struct.h_indentity_no IS STRING;
	EXEC SQL VAR l_h_dl_setlrpt_struct.h_trrf_indentity_no IS STRING;
	EXEC SQL VAR l_h_dl_setlrpt_struct.h_instr_code IS STRING;
	EXEC SQL VAR l_h_dl_setlrpt_struct.h_currencycode IS STRING;
	EXEC SQL VAR l_h_dl_setlrpt_struct.h_dealcd IS STRING;
	EXEC SQL VAR l_h_dl_setlrpt_struct.h_instrdate IS STRING;
	EXEC SQL VAR l_h_dl_setlrpt_struct.h_message_stat IS STRING;
	EXEC SQL VAR l_h_dl_setlrpt_struct.h_reject_reason IS STRING;
	EXEC SQL VAR l_h_dl_setlrpt_struct.h_rep_dt IS STRING;
	EXEC SQL VAR l_h_dl_setlrpt_struct.h_report_ind IS STRING;
	EXEC SQL VAR l_ms_536_struct_h.deal_rf_ident_no IS STRING;
	EXEC SQL VAR l_ms_536_struct_h.instr_code IS STRING;
	EXEC SQL VAR l_ms_536_struct_h.deal_cd IS STRING;
	EXEC SQL VAR l_ms_536_struct_h.currency_cd IS STRING;
	EXEC SQL VAR l_dl_deal_sstdetstruct_h.h_dl_client IS STRING;
	EXEC SQL VAR l_dl_deal_sstdetstruct_h.h_indentity_no IS STRING;
	EXEC SQL VAR l_dl_deal_sstdetstruct_h.h_ispart_ IS STRING;
	EXEC SQL VAR l_dl_deal_sstdetstruct_h.h_newindentity_no IS STRING;
	EXEC SQL VAR l_dl_deal_sstdetstruct_h.h_instrdate IS STRING;
	EXEC SQL VAR l_dl_deal_sstdetstruct_h.h_moneydate IS STRING;
	EXEC SQL VAR l_dl_deal_sstdetstruct_h.h_sel_forreg IS STRING;
	EXEC SQL VAR l_dl_deal_sstdetstruct_h.h_access_stamp IS STRING;

	EXEC SQL VAR l_dl_deal_sstdet.h_dl_client IS STRING;
	EXEC SQL VAR l_dl_deal_sstdet.h_indentity_no IS STRING;
	EXEC SQL VAR l_dl_deal_sstdet.h_ispart_ IS STRING;
	EXEC SQL VAR l_dl_deal_sstdet.h_newindentity_no IS STRING;
	EXEC SQL VAR l_dl_deal_sstdet.h_instrdate IS STRING;
	EXEC SQL VAR l_dl_deal_sstdet.h_moneydate IS STRING;
	EXEC SQL VAR l_dl_deal_sstdet.h_sel_forreg IS STRING;
	EXEC SQL VAR l_dl_deal_sstdet.h_access_stamp IS STRING;
	EXEC SQL VAR chr_l_sett_tolerance IS STRING;

	memset(&l_h_dl_setlrpt_struct,NULL,sizeof(H_DL_SETLRPT_STRUCT) );
	memset(&l_i_dl_setlrpt_structa,NULL,sizeof(I_DL_SETLRPT_STRUCT) );
	memset(&l_ms_536_struct_h,NULL,sizeof(MS_536_STRUCT_H) );
	memset(&l_dl_deal_sstdetstruct_h,NULL,sizeof(DL_DEAL_SSTDET_STRUCT_H) );
	memset(&l_dl_deal_sstdet,NULL,sizeof(DL_DEAL_SSTDET_STRUCT_H) );

	memset(chr_h_trd_client,APL_NULL_CHAR,11);
	memset(chr_h_trd_refno,APL_NULL_CHAR,17);
	memset(chr_h_trd_ispartial,APL_NULL_CHAR,2);
	memset(chr_h_trd_trcode,APL_NULL_CHAR,2);
	memset(chr_h_trd_ccycode,APL_NULL_CHAR,4);
	memset(chr_h_trd_instrcode,APL_NULL_CHAR,9);
	memset(chr_h_trd_status,APL_NULL_CHAR,3);
	memset(chr_h_trd_access_stamp,APL_NULL_CHAR,20);
	memset(chr_h_trd_domcpac,APL_NULL_CHAR,11);
	memset(chr_h_trd_countacc,APL_NULL_CHAR,11);
	memset(chr_l_trd_ext_clhclient,APL_NULL_CHAR,16);
	memset(chr_l_trd_ext_clhcountacc,APL_NULL_CHAR,16);

	memset(chr_h_lnk_client,APL_NULL_CHAR,11);
	memset(chr_h_lnk_refno,APL_NULL_CHAR,17);
	memset(chr_h_lnk_ispartial,APL_NULL_CHAR,2);
	memset(chr_h_lnk_trcode,APL_NULL_CHAR,2);
	memset(chr_h_lnk_ccycode,APL_NULL_CHAR,4);
	memset(chr_h_lnk_instrcode,APL_NULL_CHAR,9);
	memset(chr_h_lnk_status,APL_NULL_CHAR,3);
	memset(chr_h_lnk_access_stamp,APL_NULL_CHAR,20);

	memset(chr_l_sys_date,APL_NULL_CHAR,20);
	memset(chr_l_link_trd_client,APL_NULL_CHAR,11);
	memset(chr_l_link_trd_refno,APL_NULL_CHAR,17);
	memset(h_ora_rowid,APL_NULL_CHAR,APL_ROWID_LEN);
	memset(chr_l_rej_str,APL_NULL_CHAR,151);

	if (APL_FAILURE == CO_RtvSysDt(chr_l_sys_date , l_debug_info_ptr) )
	{
		printf("Failed to get the system chr_date\n");
		APL_GOBACK_FAIL

	}	
	
			memset(chr_l_sett_tolerance,APL_NULL_CHAR,21);
         EXEC SQL SELECT FIELD_VAL
         INTO  :chr_l_sett_tolerance
         FROM PRO_GSSPLVAL
         WHERE MAIN_FUN='INCOMING_MSG'
         AND   SUB_PROCESS='SETT_TOLERANCE'
         AND NATION=:g_mt_commonsys_params_struct_h.nation_code;
			
			IS_ANY_ORA_ERROR		
			l_tolerance= atof(chr_l_sett_tolerance);
			fprintf(p_fl_536log,"tolerance chr_value is **%lf**\n",l_tolerance);
			
	
			EXEC SQL DECLARE settlerfdf_cur CURSOR  FOR 
						SELECT DL_SETLRPT.*,rowid
						FROM DL_SETLRPT	
						WHERE MESSAGE_STAT='STL'
						ORDER BY DEAL_NO;
						
			IS_ANY_ORA_ERROR

			EXEC SQL OPEN settlerfdf_cur;
			IS_ANY_ORA_ERROR

			for(;;)
			{
				int_l_error_flg=0;
				memset(&l_h_dl_setlrpt_struct,NULL,sizeof(H_DL_SETLRPT_STRUCT) );
				memset(&l_i_dl_setlrpt_structa,NULL,sizeof(I_DL_SETLRPT_STRUCT) );
				memset(&l_ms_536_struct_h,NULL,sizeof(MS_536_STRUCT_H) );
				memset(&l_dl_deal_sstdetstruct_h,NULL,sizeof(DL_DEAL_SSTDET_STRUCT_H) );
				memset(&l_dl_deal_sstdet,NULL,sizeof(DL_DEAL_SSTDET_STRUCT_H) );
				memset(chr_h_trd_client,APL_NULL_CHAR,11);
				memset(chr_h_trd_refno,APL_NULL_CHAR,17);
				memset(chr_h_trd_ispartial,APL_NULL_CHAR,2);
				memset(chr_h_trd_trcode,APL_NULL_CHAR,2);
				memset(chr_h_trd_ccycode,APL_NULL_CHAR,4);
				memset(chr_h_trd_instrcode,APL_NULL_CHAR,9);
				memset(chr_h_trd_status,APL_NULL_CHAR,3);
				memset(chr_h_lnk_client,APL_NULL_CHAR,11);
				memset(chr_h_lnk_refno,APL_NULL_CHAR,17);
				memset(chr_h_lnk_ispartial,APL_NULL_CHAR,2);
				memset(chr_h_lnk_trcode,APL_NULL_CHAR,2);
				memset(chr_h_lnk_ccycode,APL_NULL_CHAR,4);
				memset(chr_h_lnk_instrcode,APL_NULL_CHAR,9);
				memset(chr_h_lnk_status,APL_NULL_CHAR,3);
				memset(chr_l_link_trd_client,APL_NULL_CHAR,11);
				memset(chr_l_link_trd_refno,APL_NULL_CHAR,17);
				memset(h_ora_rowid,APL_NULL_CHAR,APL_ROWID_LEN);
				memset(chr_l_rej_str,APL_NULL_CHAR,151);

				EXEC SQL COMMIT;
				IS_ANY_ORA_ERROR

				EXEC SQL FETCH settlerfdf_cur INTO :l_h_dl_setlrpt_struct:l_i_dl_setlrpt_structa,:h_ora_rowid;
				IS_ANY_ORA_ERROR

				fprintf(p_fl_536log,"------------------------------------------------------\n\n");
				fprintf(p_fl_536log,"sqlca after fetch is %d\n",sqlca.sqlcode);
				fprintf(p_fl_536log,"trrf_refno  and deal_cd selected is  %s - %s\n",l_h_dl_setlrpt_struct.h_trrf_indentity_no,l_h_dl_setlrpt_struct.h_dealcd);
				if(sqlca.sqlcode==1403)
				{
					break;
				}

				EXEC SQL SELECT CLIENT,
									 IDENTIY_NO,
									 PARTIAL_IND_B,
									 nvl(COST,0),
									 nvl(BROKERCOMM,0),
									 nvl(MRK_DL_FAILQTY,0),
									 nvl(REC_INT_000,0),
									 nvl(DL_COMPLETEQTY,0),
									 nvl(DELTA_000,0),
									 nvl(DELTA_001,0),
									 nvl(DELTA_003,0),		
									 DEAL_CD,
									 nvl(AMOUNT,0),
									 CURRENCY_CD,
									 nvl(QTY,0),
									 INSTR_CODE,
									 DEAL_STAT ,
									 COMPREFNO,
									 DOMESTIC_CPCLT,
									 CP_CLT,
									 ACCESS_STAMP
							INTO 	 :chr_h_trd_client:i_trd_account,
									 :chr_h_trd_refno:i_trd_refno,
									 :chr_h_trd_ispartial:i_trd_ispartial,
									 :h_trd_cost:i_trd_price,
									 :h_trd_brokercomm:i_trd_brkcomm,
									 :h_trd_mrk_dl_failqty:i_trd_marktrfqty,
									 :h_trd_recint000:i_trd_recint000,
									 :h_trd_dl_completeqty:i_trd_mcomplqty,
									 :h_trd_delfrm000:i_trd_delfrm000,
									 :h_trd_delfrm001:i_trd_delfrm001,
									 :h_trd_delfrm003:i_trd_delfrm003,
									 :chr_h_trd_trcode:i_trd_trcode,
									 :dbl_h_trd_amount:i_trd_amount,
									 :chr_h_trd_ccycode:i_trd_ccycode,
									 :h_trd_quantity:i_trd_qty,
									 :chr_h_trd_instrcode:i_trd_instr_code,
									 :chr_h_trd_status:i_trd_status,
									 :chr_h_trd_matchrefno:i_trd_matchrefno,
									 :chr_h_trd_domcpac:i_trd_domcpac,
									 :chr_h_trd_countacc:i_trd_countacc,
									 :chr_h_trd_access_stamp:i_trd_access_stamp
							FROM DL_DEAL 
							WHERE  LCL_IDENTNO =ltrim(rtrim(:l_h_dl_setlrpt_struct.h_trrf_indentity_no))
									 AND VAL_FDT IS NOT NULL
									 AND ((DEAL_CD in ('1','2') AND INSTRUMENT_DT IS NULL) 
											OR (DEAL_CD in ('3','4') AND (INSTRUMENT_DT IS NULL OR MONEY_SETL_DT IS NULL)))
									 AND DEAL_STAT NOT IN ('DU','DD','DL') 
									 AND LOCATION_CD IN (SELECT FIELD_VAL FROM PRO_GSSPLVAL 
																WHERE MAIN_FUN = 'BOGTXN'  
																	AND SUB_PROCESS = 'LOCATION' AND NATION = 'GR');

						fprintf(p_fl_536log,"sqlca after selection with trrf ref %d\n",sqlca.sqlcode);
				
						  if(sqlca.sqlcode==-2112)				 
						  {
							fprintf(p_fl_536log,"Too Many Rows Found For Bog Refno\n");
								EXEC SQL UPDATE DL_SETLRPT SET 
													 MESSAGE_STAT='DPE',
													 REJECT_REASON='Too Many Rows Found For Bog Refno'
										 WHERE ROWID=:h_ora_rowid;
								IS_ANY_ORA_ERROR		
								continue;
					
						  }
						  else if(sqlca.sqlcode==1403)
						  {
							fprintf(p_fl_536log,"No Matching Trade Found For The Bog Ref No\n");
								EXEC SQL UPDATE DL_SETLRPT SET 
													 MESSAGE_STAT='DPE',
													 REJECT_REASON='No Matching Trade Found For The Bog Ref No'
										 WHERE ROWID=:h_ora_rowid;
								IS_ANY_ORA_ERROR		
								continue;
						  }
						  else
							IS_ANY_ORA_ERROR
				int_l_trd_count++;

			
			
				strcpy(l_ms_536_struct_h.deal_rf_ident_no,l_h_dl_setlrpt_struct.h_trrf_indentity_no);
				strcpy(l_ms_536_struct_h.instr_code,l_h_dl_setlrpt_struct.h_instr_code);
				strcpy(l_ms_536_struct_h.deal_cd,l_h_dl_setlrpt_struct.h_dealcd);
				strcpy(l_ms_536_struct_h.currency_cd,l_h_dl_setlrpt_struct.h_currencycode);
				l_ms_536_struct_h.amount=l_h_dl_setlrpt_struct.h_amt;
				l_ms_536_struct_h.quantity=l_h_dl_setlrpt_struct.h_qty;
				
				if(strcmp(l_h_dl_setlrpt_struct.h_instr_code,chr_h_trd_instrcode)!=0) 
				{
							if(strcmp(chr_l_rej_str,APL_NULL_STRING)==0)
							{
								strcpy(chr_l_rej_str,"ISIN ");
							}
							else
							{
								strcat(chr_l_rej_str,", ISIN ");
							}
							int_l_error_flg=1;
				}

				if(strcmp(l_h_dl_setlrpt_struct.h_dealcd,chr_h_trd_trcode)!=0) 
				{
						if(strcmp(chr_h_trd_domcpac,l_mt_core_sys_params_struct_h.custody_clt_cd)!=0)  	
						{
							if(strcmp(chr_l_rej_str,APL_NULL_STRING)==0)
							{
								strcpy(chr_l_rej_str,"TRCODE ");
							}
							else
							{
								strcat(chr_l_rej_str,", TRCODE ");
							}
							int_l_error_flg=1;
						}
				}
				
				if((strcmp(chr_h_trd_trcode,"3")==0) || (strcmp(chr_h_trd_trcode,"4")==0))
				{
					if(strcmp(l_h_dl_setlrpt_struct.h_currencycode,chr_h_trd_ccycode)!=0) 
					{
					
						if( !(strcmp(chr_h_trd_domcpac,l_mt_core_sys_params_struct_h.custody_clt_cd)==0 && strcmp(l_h_dl_setlrpt_struct.h_dealcd,chr_h_trd_trcode)!=0) )  
						{ 
								if(strcmp(chr_l_rej_str,APL_NULL_STRING)==0)
								{
									strcpy(chr_l_rej_str,"CURRENCY ");
								}
								else
								{
									strcat(chr_l_rej_str,", CURRENCY ");
								}
								int_l_error_flg=1;
						}
					}
				}
				if(l_h_dl_setlrpt_struct.h_qty != h_trd_quantity) 
				{
					
							if(strcmp(chr_l_rej_str,APL_NULL_STRING)==0)
							{
								strcpy(chr_l_rej_str,"QTY ");
							}
							else
							{
								strcat(chr_l_rej_str,", QTY ");
							}
							int_l_error_flg=1;
				}

				if((strcmp(chr_h_trd_trcode,"3")==0) || (strcmp(chr_h_trd_trcode,"4")==0))
				{
            	if(strcmp(l_h_dl_setlrpt_struct.h_currencycode,chr_h_trd_ccycode)==0)
            	{
							if(strcmp(chr_h_trd_ccycode,"EUR")!=0)
							{
            				if(APL_FAILURE == IV_Proc_ConvToFxFn(chr_h_trd_ccycode,"EUR",g_mt_commonsys_params_struct_h.dom_ccy,chr_l_sys_date,&l_ae_rate,&int_retstat,l_debug_info_ptr))
								{
							  		*int_p_retstat=int_retstat;
               				APL_GOBACK_FAIL
								}

								dbl_l_adjustment_value= l_tolerance * l_ae_rate;
							}
							else
								dbl_l_adjustment_value= l_tolerance ;

								fprintf(p_fl_536log,"adjustment chr_value is  **%lf**\n",dbl_l_adjustment_value);
								

								if (abs(dbl_h_trd_amount - l_h_dl_setlrpt_struct.h_amt) > dbl_l_adjustment_value) 
								{
								  if( !(strcmp(chr_h_trd_domcpac,l_mt_core_sys_params_struct_h.custody_clt_cd)==0 && strcmp(l_h_dl_setlrpt_struct.h_dealcd,chr_h_trd_trcode)!=0) )  
								  {			

									if(strcmp(chr_l_rej_str,APL_NULL_STRING)==0)
									{
										strcpy(chr_l_rej_str,"AMOUNT ");
									}
									else
									{
										strcat(chr_l_rej_str,", AMOUNT ");
									}
									int_l_error_flg=1;
								 }
	
								}
								else
								{
									
								fprintf(p_fl_536log,"Tolerance applied  adjustment chr_value is %lf\n",dbl_l_adjustment_value); 
								}
            	}
				}
				if(int_l_error_flg==1)
				{
					if(strcmp(chr_l_rej_str,APL_NULL_STRING)==0)
						strcpy(chr_l_rej_str,"Mismatch In Trade Values ");
					else
						strcat(chr_l_rej_str," Mismatch ");
					
								fprintf(p_fl_536log,"Error chr_flag is 1 and the errors are %s\n",chr_l_rej_str); 
					EXEC SQL UPDATE DL_SETLRPT SET 
													 MESSAGE_STAT='DPE',
													 REJECT_REASON=:chr_l_rej_str
										 WHERE ROWID=:h_ora_rowid;
					IS_ANY_ORA_ERROR		

					continue;

				}
				
				if(int_l_error_flg==0)
				{
				
					if(strcmp(chr_h_trd_domcpac,l_mt_core_sys_params_struct_h.custody_clt_cd)==0)
					{
				
						EXEC SQL SELECT CLN_EXT_CLH
											INTO :chr_l_trd_ext_clhclient 
											FROM MT_CLIENT
									WHERE CLN_CODE =:chr_h_trd_client;
						IS_ANY_ORA_ERROR

                  
                  G_SYS_ACCOUNT_LEN = 10;

						EXEC SQL SELECT CLN_EXT_CLH
											INTO :chr_l_trd_ext_clhcountacc 
											FROM MT_CLIENT
									WHERE CLN_CODE = rtrim(SUBSTR(:chr_h_trd_countacc,1,:G_SYS_ACCOUNT_LEN));
						IS_ANY_ORA_ERROR
					}
				
				if ((strcmp(chr_h_trd_domcpac,l_mt_core_sys_params_struct_h.custody_clt_cd)==0) && (strcmp(chr_l_trd_ext_clhclient,chr_l_trd_ext_clhcountacc)!=0))
				{
					fprintf(p_fl_536log,"matchrefno int_found is  %s\n",chr_h_trd_matchrefno);

            	EXEC SQL SELECT CLIENT,
              		            IDENTIY_NO,
                  	         PARTIAL_IND_B,
                     	      nvl(COST,0),
                        	   nvl(BROKERCOMM,0),
                            	nvl(MRK_DL_FAILQTY,0),
                             	nvl(REC_INT_000,0),
                            	nvl(DL_COMPLETEQTY,0),
                            	nvl(DELTA_000,0),
                            	nvl(DELTA_001,0),
                            	nvl(DELTA_003,0),
                            	DEAL_CD,
                            	nvl(AMOUNT,0),
                            	CURRENCY_CD,
                            	nvl(QTY,0),
                            	INSTR_CODE,
                            	DEAL_STAT,
                            	COMPREFNO,
									   ACCESS_STAMP
                     	INTO  :chr_h_lnk_client:i_lnk_account,
                        	   :chr_h_lnk_refno:i_lnk_refno,
										:chr_h_lnk_ispartial:i_lnk_ispartial,
                           	:h_lnk_cost:i_lnk_price,
                            	:h_lnk_brokercomm:i_lnk_brkcomm,
										:h_lnk_mrk_dl_failqty:i_lnk_marktrfqty,
                            	:h_lnk_recint000:i_lnk_recint000,
                            	:h_lnk_dl_completeqty:i_lnk_mcomplqty,
                            	:h_lnk_delfrm000:i_lnk_delfrm000,
                            	:h_lnk_delfrm001:i_lnk_delfrm001,
                            	:h_lnk_delfrm003:i_lnk_delfrm003,
                            	:chr_h_lnk_trcode:i_lnk_trcode,
                            	:dbl_h_lnk_amount:i_lnk_amount,
                            	:chr_h_lnk_ccycode:i_lnk_ccycode,
                            	:h_lnk_quantity:i_lnk_qty,
                            	:chr_h_lnk_instrcode:i_lnk_instr_code,
                            	:chr_h_lnk_status:i_lnk_status,
                            	:chr_h_lnk_matchrefno:i_lnk_matchrefno,
                            	:chr_h_lnk_access_stamp:i_lnk_access_stamp
                     	FROM DL_DEAL
                     	WHERE   COMPREFNO =ltrim(rtrim(:chr_h_trd_matchrefno))
							   		 AND 	 VAL_FDT IS NOT NULL
                            	AND ((DEAL_CD ='2' AND INSTRUMENT_DT IS NULL) 
											OR (DEAL_CD ='4' AND (INSTRUMENT_DT IS NULL OR MONEY_SETL_DT IS NULL)))
                            	AND DEAL_STAT NOT IN ('DU','DD','DL')
                            	AND LOCATION_CD IN (SELECT FIELD_VAL FROM PRO_GSSPLVAL 
																		WHERE MAIN_FUN ='BOGTXN'  
																		AND SUB_PROCESS = 'LOCATION' 
																		AND NATION = 'GR');
								
					fprintf(p_fl_536log,"sqlca.sqlcode after selecting the link trade %s\n",sqlca.sqlcode);
								IS_ANY_ORA_ERROR;
								
								if(sqlca.sqlcode==1403)
								{
                               EXEC SQL UPDATE DL_SETLRPT SET
                                        MESSAGE_STAT='DPE',
                                        REJECT_REASON='Link Trade Not Found'
                               WHERE ROWID=:h_ora_rowid;

                               IS_ANY_ORA_ERROR
                     	 	
									CO_FreeErrLst(l_debug_info_ptr);
									continue;
								}

								if((strcmp(l_h_dl_setlrpt_struct.h_dealcd,"3")==0) 
									|| (strcmp(l_h_dl_setlrpt_struct.h_dealcd,"1")==0))
								{
         						memset(&l_dl_deal_sstdetstruct_h,NULL,sizeof(DL_DEAL_SSTDET_STRUCT_H));
									strcpy(l_dl_deal_sstdetstruct_h.h_dl_client,chr_h_lnk_client);
									strcpy(l_dl_deal_sstdetstruct_h.h_indentity_no,chr_h_lnk_refno);
									strcpy(l_dl_deal_sstdetstruct_h.h_ispart_,"N");
									l_dl_deal_sstdetstruct_h.h_newquantity =0;
									l_dl_deal_sstdetstruct_h.h_newamount= 0;
									strcpy(l_dl_deal_sstdetstruct_h.h_newindentity_no,APL_NULL_STRING);
									strcpy(l_dl_deal_sstdetstruct_h.h_instrdate,chr_l_sys_date);
									if(strcmp(chr_h_lnk_trcode,"4")==0)
										strcpy(l_dl_deal_sstdetstruct_h.h_moneydate,chr_l_sys_date);
									else
										strcpy(l_dl_deal_sstdetstruct_h.h_moneydate,APL_NULL_STRING);
									l_dl_deal_sstdetstruct_h.h_pr=h_lnk_cost;
									l_dl_deal_sstdetstruct_h.h_brokercomm=h_lnk_brokercomm;
									strcpy(l_dl_deal_sstdetstruct_h.h_sel_forreg,APL_NULL_STRING);
									l_dl_deal_sstdetstruct_h.h_pendregquantity=0;
									l_dl_deal_sstdetstruct_h.h_marktrfquantity=h_lnk_mrk_dl_failqty;
									l_dl_deal_sstdetstruct_h.h_rec_int_000=h_lnk_recint000;
									l_dl_deal_sstdetstruct_h.h_mcomplquantity = h_lnk_dl_completeqty;
									l_dl_deal_sstdetstruct_h.h_delta_000 = h_lnk_delfrm000;
									l_dl_deal_sstdetstruct_h.h_delta_001 = h_lnk_delfrm001;
									l_dl_deal_sstdetstruct_h.h_delta_002 = h_lnk_delfrm003;
									strcpy(l_dl_deal_sstdetstruct_h.h_access_stamp,chr_h_lnk_access_stamp);

         						memset(&l_dl_deal_sstdet,NULL,sizeof(DL_DEAL_SSTDET_STRUCT_H));
									strcpy(l_dl_deal_sstdet.h_dl_client,chr_h_trd_client);
									strcpy(l_dl_deal_sstdet.h_indentity_no,chr_h_trd_refno);
									strcpy(l_dl_deal_sstdet.h_ispart_,"N");
									l_dl_deal_sstdet.h_newquantity =0;
									l_dl_deal_sstdet.h_newamount= 0;
									strcpy(l_dl_deal_sstdet.h_newindentity_no,APL_NULL_STRING);
									strcpy(l_dl_deal_sstdet.h_instrdate,chr_l_sys_date);
									if(strcmp(chr_h_trd_trcode,"3")==0)
										strcpy(l_dl_deal_sstdet.h_moneydate,chr_l_sys_date);
									else
										strcpy(l_dl_deal_sstdet.h_moneydate,APL_NULL_STRING);
									l_dl_deal_sstdet.h_pr=h_trd_cost;
									l_dl_deal_sstdet.h_brokercomm=h_trd_brokercomm;
									strcpy(l_dl_deal_sstdet.h_sel_forreg,APL_NULL_STRING);
									l_dl_deal_sstdet.h_pendregquantity=0;
									l_dl_deal_sstdet.h_marktrfquantity=h_trd_mrk_dl_failqty;
									l_dl_deal_sstdet.h_rec_int_000=h_trd_recint000;
									l_dl_deal_sstdet.h_mcomplquantity = h_trd_dl_completeqty;
									l_dl_deal_sstdet.h_delta_000 = h_trd_delfrm000;
									l_dl_deal_sstdet.h_delta_001 = h_trd_delfrm001;
									l_dl_deal_sstdet.h_delta_002 = h_trd_delfrm003;
									strcpy(l_dl_deal_sstdet.h_access_stamp,chr_h_trd_access_stamp);
								}
								

					         strcpy(p_intlenv_data_struct_h->h_mode, SST_MODE);
            				strcpy(p_intlenv_data_struct_h->usr,"SYSTEM");
            				strcpy(p_intlenv_data_struct_h->subprocess, APL_NULL_STRING);
            				strcpy(p_intlenv_data_struct_h->processtion, "SETTLEMENT THROUGH MT 536");
            				strcpy(p_intlenv_data_struct_h->auth_req,"Y");

								fprintf(p_fl_536log,"before calling single setl chr_func(RCV) for %s,%s\n",l_dl_deal_sstdetstruct_h.h_dl_client,l_dl_deal_sstdetstruct_h.h_indentity_no); 
								
							if((strcmp(l_dl_deal_sstdetstruct_h.h_dl_client,APL_NULL_STRING)!=0) && (strcmp(l_dl_deal_sstdetstruct_h.h_indentity_no,APL_NULL_STRING)!=0))	
							{
								if(APL_FAILURE == DL_Proc_DLSetlSing(&l_dl_deal_sstdetstruct_h,
																			APL_NULL_STRING,
																			p_intlenv_data_struct_h,
																			l_debug_info_ptr))
								{
							       CO_ProcMonitor(APL_OUT_FILE,
                             		   "Failed to Settle The RECIEVE TRADE\n",
                                   NULL, NULL);	

										 EXEC SQL UPDATE DL_SETLRPT SET
                                        MESSAGE_STAT='DPE',
                                        REJECT_REASON='Failed to SETL the Recieve Trade'
                               WHERE ROWID=:h_ora_rowid;

               					 IS_ANY_ORA_ERROR	
                     		 	if ( APL_FAILURE == MS_Prnt_Msg563SetlRpt(&l_ms_536_struct_h,
                           						             l_dl_deal_sstdetstruct_h.h_dl_client,
                                   								 l_dl_deal_sstdetstruct_h.h_indentity_no,
                                   								 APL_NULL_STRING,
                             							 			 APL_NULL_STRING,
																			 l_h_dl_setlrpt_struct.h_deal_no,
                                   								 &int_retstat,
                                   								 l_debug_info_ptr))
                     			{
                           			CO_ProcMonitor(APL_OUT_FILE,
                                					"Failed to insert into ISETLRPT.\n",
                                   				NULL, NULL);
                           			*int_p_retstat = IV_CRITCAL_ERROR_IND;
                           			APL_GOBACK_FAIL
                     			}
										CO_FreeErrLst(l_debug_info_ptr);
										continue;
								}
								else
								{
								fprintf(p_fl_536log,"SETTLED RCV for %s,%s\n",l_dl_deal_sstdet.h_dl_client,l_dl_deal_sstdet.h_indentity_no); 
                             if ( APL_FAILURE == MS_Prnt_Msg563SetlRpt(&l_ms_536_struct_h,
                                                          l_dl_deal_sstdetstruct_h.h_dl_client,
                                                          l_dl_deal_sstdetstruct_h.h_indentity_no,
                                                          "STP",
                                                        "Successfully SETTLED Recieve Trade",
																			 l_h_dl_setlrpt_struct.h_deal_no,
                                                          &int_retstat,
                                                          l_debug_info_ptr))
                              {
                                    CO_ProcMonitor(APL_OUT_FILE,
                                             "Failed to insert into ISETLRPT.\n",
                                             NULL, NULL);
                                    *int_p_retstat = IV_CRITCAL_ERROR_IND;
                                    APL_GOBACK_FAIL
                              }
								}
								CO_FreeErrLst(l_debug_info_ptr);
							}
							else
							{
                               EXEC SQL UPDATE DL_SETLRPT SET
                                        MESSAGE_STAT='DPE',
                                        REJECT_REASON='Link Trade Not Found'
                               WHERE ROWID=:h_ora_rowid;

                               IS_ANY_ORA_ERROR
                           CO_FreeErrLst(l_debug_info_ptr);
                           continue;
							}

								fprintf(p_fl_536log,"before calling single setl chr_func(DLV) for %s,%s\n",l_dl_deal_sstdet.h_dl_client,l_dl_deal_sstdet.h_indentity_no); 
							if((strcmp(l_dl_deal_sstdet.h_dl_client,APL_NULL_STRING)!=0) && (strcmp(l_dl_deal_sstdet.h_indentity_no,APL_NULL_STRING)!=0))	
							{
								if(APL_FAILURE == DL_Proc_DLSetlSing(&l_dl_deal_sstdet,
																			APL_NULL_STRING,
																			p_intlenv_data_struct_h,
																			l_debug_info_ptr))
								{
										EXEC SQL ROLLBACK;
										IS_ANY_ORA_ERROR
							       CO_ProcMonitor(APL_OUT_FILE,
                             		   "Failed to Settle The DELIVER TRADE\n",
                                   NULL, NULL);	
									if((strcmp(l_dl_deal_sstdet.h_dl_client,chr_h_trd_client)==0) && (strcmp(l_dl_deal_sstdet.h_indentity_no,chr_h_trd_refno)==0))
									{
										 EXEC SQL UPDATE DL_SETLRPT SET
                                        MESSAGE_STAT='DPE',
                                        REJECT_REASON='Failed to SETL both Linked Trades'
                               WHERE ROWID=:h_ora_rowid;

               					 IS_ANY_ORA_ERROR	
									}
                    			 if ( APL_FAILURE == MS_Prnt_Msg563SetlRpt(&l_ms_536_struct_h,
                        								             l_dl_deal_sstdet.h_dl_client,
                                      								 l_dl_deal_sstdet.h_indentity_no,
                                      								 APL_NULL_STRING,
                                     								 APL_NULL_STRING, 
																			 	 l_h_dl_setlrpt_struct.h_deal_no,
                                           						 &int_retstat,
                                           						 l_debug_info_ptr))
                     		{
                          			CO_ProcMonitor(APL_OUT_FILE,
                                				"Failed to insert into ISETLRPT.\n",
                                   			NULL, NULL);
                          			*int_p_retstat = IV_CRITCAL_ERROR_IND;
                          			APL_GOBACK_FAIL
                     		}

										CO_FreeErrLst(l_debug_info_ptr);
								}
                        else
                        {
								fprintf(p_fl_536log,"SETTLED DLV for %s,%s\n",l_dl_deal_sstdet.h_dl_client,l_dl_deal_sstdet.h_indentity_no); 
									if((strcmp(l_dl_deal_sstdet.h_dl_client,chr_h_trd_client)==0) && (strcmp(l_dl_deal_sstdet.h_indentity_no,chr_h_trd_refno)==0))
									{
										 EXEC SQL UPDATE DL_SETLRPT SET
                                        MESSAGE_STAT='STP',
                                        REJECT_REASON='Settled The Deliver Trade',
													 INSTRUMENT_DT=:chr_l_sys_date,
													 CLIENT=:l_dl_deal_sstdet.h_dl_client,
													 IDENTIY_NO=:l_dl_deal_sstdet.h_indentity_no
                               WHERE ROWID=:h_ora_rowid;

               					 IS_ANY_ORA_ERROR	
									}		
									else
									{
                            	if ( APL_FAILURE == MS_Prnt_Msg563SetlRpt(&l_ms_536_struct_h,
                                                          l_dl_deal_sstdet.h_dl_client,
                                                          l_dl_deal_sstdet.h_indentity_no,
                                                          "STP",
                                                          "Settled The Deliver Trade",
																			 l_h_dl_setlrpt_struct.h_deal_no,
                                                          &int_retstat,
                                                          l_debug_info_ptr))
                           	{
                                 CO_ProcMonitor(APL_OUT_FILE,
                                          "Failed to insert into ISETLRPT.\n",
                                          NULL, NULL);
                                 *int_p_retstat = IV_CRITCAL_ERROR_IND;
                                 APL_GOBACK_FAIL
                           	}
								  }
                        }
								
								CO_FreeErrLst(l_debug_info_ptr);
							}
						}
						else if(strcmp(chr_h_trd_domcpac,l_mt_core_sys_params_struct_h.custody_clt_cd)!=0)
						{
					         strcpy(p_intlenv_data_struct_h->h_mode, SST_MODE);
            				strcpy(p_intlenv_data_struct_h->usr,"SYSTEM");
            				strcpy(p_intlenv_data_struct_h->subprocess, APL_NULL_STRING);
            				strcpy(p_intlenv_data_struct_h->processtion, "SETTLEMENT THROUGH MT 536");
            				strcpy(p_intlenv_data_struct_h->auth_req,"Y");
							
                      memset(&l_dl_deal_sstdetstruct_h,NULL,sizeof(DL_DEAL_SSTDET_STRUCT_H));
                      strcpy(l_dl_deal_sstdetstruct_h.h_dl_client,chr_h_trd_client);
                      strcpy(l_dl_deal_sstdetstruct_h.h_indentity_no,chr_h_trd_refno);
                      strcpy(l_dl_deal_sstdetstruct_h.h_ispart_,"N");
                      l_dl_deal_sstdetstruct_h.h_newquantity =0;
                      l_dl_deal_sstdetstruct_h.h_newamount= 0;
                      strcpy(l_dl_deal_sstdetstruct_h.h_newindentity_no,APL_NULL_STRING);
                      strcpy(l_dl_deal_sstdetstruct_h.h_instrdate,chr_l_sys_date);
                      if((strcmp(chr_h_trd_trcode,"4")==0) || (strcmp(chr_h_trd_trcode,"3")==0))
                         strcpy(l_dl_deal_sstdetstruct_h.h_moneydate,chr_l_sys_date);
                      else
                         strcpy(l_dl_deal_sstdetstruct_h.h_moneydate,APL_NULL_STRING);
                      l_dl_deal_sstdetstruct_h.h_pr=h_trd_cost;
                      l_dl_deal_sstdetstruct_h.h_brokercomm=h_trd_brokercomm;
                      strcpy(l_dl_deal_sstdetstruct_h.h_sel_forreg,APL_NULL_STRING);
                      l_dl_deal_sstdetstruct_h.h_pendregquantity=0;
                      l_dl_deal_sstdetstruct_h.h_marktrfquantity=h_trd_mrk_dl_failqty;
                      l_dl_deal_sstdetstruct_h.h_rec_int_000=h_trd_recint000;
                      l_dl_deal_sstdetstruct_h.h_mcomplquantity = h_trd_dl_completeqty;
                      l_dl_deal_sstdetstruct_h.h_delta_000 = h_trd_delfrm000;
                      l_dl_deal_sstdetstruct_h.h_delta_001 = h_trd_delfrm001;
                      l_dl_deal_sstdetstruct_h.h_delta_002 = h_trd_delfrm003;
                      strcpy(l_dl_deal_sstdetstruct_h.h_access_stamp,chr_h_trd_access_stamp);

                   if(APL_FAILURE == DL_Proc_DLSetlSing(&l_dl_deal_sstdetstruct_h,
                                                    APL_NULL_STRING,
                                                    p_intlenv_data_struct_h,
                                                    l_debug_info_ptr))
                   {
                       CO_ProcMonitor(APL_OUT_FILE,
                               "Failed to Settle The TRADE\n",
                              NULL, NULL);
                          EXEC SQL UPDATE DL_SETLRPT SET
                                   MESSAGE_STAT='DPE',
                                   REJECT_REASON='Failed to SETL the Trade'
                          WHERE ROWID=:h_ora_rowid;

                          IS_ANY_ORA_ERROR
                         if ( APL_FAILURE == MS_Prnt_Msg563SetlRpt(&l_ms_536_struct_h,
                                                     l_dl_deal_sstdetstruct_h.h_dl_client,
                                                     l_dl_deal_sstdetstruct_h.h_indentity_no,
                                                     APL_NULL_STRING,
                                                     APL_NULL_STRING,
																	  l_h_dl_setlrpt_struct.h_deal_no,
                                                     &int_retstat,
                                                     l_debug_info_ptr))
                         {
                               CO_ProcMonitor(APL_OUT_FILE,
                                        "Failed to insert into ISETLRPT.\n",
                                        NULL, NULL);
                               *int_p_retstat = IV_CRITCAL_ERROR_IND;
                               APL_GOBACK_FAIL
                         }
								
								CO_FreeErrLst(l_debug_info_ptr);
                         continue;
							}	
							else
							{
                         EXEC SQL UPDATE DL_SETLRPT SET
                                   MESSAGE_STAT='STP',
                                   REJECT_REASON='Successfully SETTLED Trade',
                                   INSTRUMENT_DT=:chr_l_sys_date,
                                   CLIENT=:l_dl_deal_sstdetstruct_h.h_dl_client,
                                   IDENTIY_NO =:l_dl_deal_sstdetstruct_h.h_indentity_no
                          WHERE ROWID=:h_ora_rowid;

                          IS_ANY_ORA_ERROR

							}
							CO_FreeErrLst(l_debug_info_ptr);
					 }
				 	 else
						continue;
				
				}
			}


   
   RETURN_SUCCESS:
   {
          APL_IF_DEBUG
          {
            CO_ProcMonitor(p_fl_536log,"Exiting out of DL_Proc_DFRFSetl successfully\n",
                                  NULL,
                                  NULL);
          }
          return (APL_SUCCESS);
   }

   RETURN_FAILURE:
   {
          APL_IF_DEBUG
          {
           CO_ProcMonitor(p_fl_536log,"Exiting out of DL_Proc_DFRFSetl unsuccessfully\n",
                                 NULL,
                                 NULL);
          }
          return (APL_FAILURE);
   }

}


int   DL_Proc_MarkDLFail (			FILE 						*p_fl_536log, 
										MS_537_STRUCT_H        *p_ms_537_struct_h,
										int               	*int_p_retstat,
										INTL_ENV_DATA_STRUCT_H  	*p_intlenv_data_struct_h,
                              DEBUG_INFO_STRUCT_H      	**l_debug_info_ptr)
{

	DL_DEAL_FAIL_STRUCT_H	l_dl_deal_fail_struct_ha;

	char						chr_h_trd_client[11]		 	=		APL_NULL_STRING;
	char						chr_h_trd_refno[17]			=		APL_NULL_STRING;
	char						chr_h_trd_trcode[2]			=		APL_NULL_STRING;
	double					dbl_h_trd_amount				=		0;
	char						chr_h_trd_ccycode[4]			=		APL_NULL_STRING;
	double					h_trd_quantity					=		0;
	char						chr_h_trd_instrcode[9]			=		APL_NULL_STRING;
	char						chr_h_trd_status[3]			=		APL_NULL_STRING;
	char						chr_h_trd_access_stamp[20]	=		APL_NULL_STRING;
	char						chr_h_trd_countacc[11]		=		APL_NULL_STRING;
	char						chr_h_trd_domcpac[11]			=		APL_NULL_STRING;
	char						chr_h_trd_trdt[APL_DATE_LEN]=		APL_NULL_STRING;
	char						chr_h_trd_settledt[APL_DATE_LEN]=		APL_NULL_STRING;

	char						chr_h_omnibus_client[11]	=		APL_NULL_STRING;
	int 						int_l_error_flg					= 		0;
	double					l_ae_rate						=		0;
	char						chr_l_sys_date[20]				=		APL_NULL_STRING;
	double					dbl_l_adjustment_value		=		0;
	double					l_tolerance					=		0;
	char						chr_l_sett_tolerance[21]		= 		APL_NULL_STRING;
	char 						h_ora_rowid[APL_ROWID_LEN] 	= 		APL_NULL_STRING;
	int						int_retstat;
	char						chr_l_rej_str[151]				=		APL_NULL_STRING;
	char  					int_l_h_failcode[3]         = 		APL_NULL_STRING;
	int						int_l_h_subfailcode		=		0;

	char						chr_h_client_type[2]			=	APL_NULL_STRING;
	char						chr_h_depo_client[APL_CLIENT_LENGTH]	=	APL_NULL_STRING;
	short 					int_l_exists = 0;

	short					i_trd_account =0;
	short					i_trd_refno =0;
	short					i_trd_trcode=0;
	short					i_trd_amount	=0;
	short					i_trd_ccycode=0;
	short					i_trd_qty		=0;
	short					i_trd_instr_code=0;
	short					i_trd_status=0;
	short					i_trd_access_stamp=0;
	short					i_trd_domcpac=0;
	short					i_trd_countacc=0;
	short					i_trd_trdt=0;
	short					i_trd_settledt=0;
	short					i_omnibus_account=0;

	EXEC SQL VAR chr_h_trd_client IS STRING;
	EXEC SQL VAR chr_h_trd_refno IS STRING;
	EXEC SQL VAR  chr_h_trd_trcode IS STRING;
	EXEC SQL VAR  chr_h_trd_ccycode IS STRING;
	EXEC SQL VAR  chr_h_trd_instrcode IS STRING;
	EXEC SQL VAR  chr_h_trd_status IS STRING;
	EXEC SQL VAR  chr_h_trd_access_stamp IS STRING;
	EXEC SQL VAR  chr_h_trd_domcpac IS STRING;
	EXEC SQL VAR  chr_h_trd_countacc IS STRING;
	EXEC SQL VAR  chr_h_trd_trdt IS STRING;
	EXEC SQL VAR  chr_h_trd_settledt IS STRING;
	EXEC SQL VAR int_l_h_failcode IS STRING;
	EXEC SQL VAR chr_h_omnibus_client IS STRING;

	EXEC SQL VAR  chr_l_sys_date IS STRING;
	EXEC SQL VAR  h_ora_rowid IS STRING;
	EXEC SQL VAR  chr_l_rej_str IS STRING;

	EXEC SQL VAR l_dl_deal_fail_struct_ha.h_dl_client IS STRING;
	EXEC SQL VAR l_dl_deal_fail_struct_ha.h_indentity_no IS STRING;
	EXEC SQL VAR l_dl_deal_fail_struct_ha.h_access_stamp IS STRING;
	EXEC SQL VAR chr_l_sett_tolerance IS STRING;

	memset(&l_dl_deal_fail_struct_ha,NULL,sizeof(DL_DEAL_FAIL_STRUCT_H) );

	memset(chr_h_omnibus_client,APL_NULL_CHAR,11);
	memset(chr_h_trd_client,APL_NULL_CHAR,11);
	memset(chr_h_trd_refno,APL_NULL_CHAR,17);
	memset(chr_h_trd_trcode,APL_NULL_CHAR,2);
	memset(chr_h_trd_ccycode,APL_NULL_CHAR,4);
	memset(chr_h_trd_instrcode,APL_NULL_CHAR,9);
	memset(chr_h_trd_status,APL_NULL_CHAR,3);
	memset(chr_h_trd_access_stamp,APL_NULL_CHAR,20);
	memset(chr_h_trd_domcpac,APL_NULL_CHAR,11);
	memset(chr_h_trd_countacc,APL_NULL_CHAR,11);
	memset(chr_h_trd_trdt,APL_NULL_CHAR,APL_DATE_LEN);
	memset(chr_h_trd_settledt,APL_NULL_CHAR,APL_DATE_LEN);
	memset(int_l_h_failcode,APL_NULL_CHAR,3);

	memset(chr_l_sys_date,APL_NULL_CHAR,20);
	memset(h_ora_rowid,APL_NULL_CHAR,APL_ROWID_LEN);
	memset(chr_l_rej_str,APL_NULL_CHAR,151);

	printf("Entered processtion DL_Proc_MarkDLFail for refno |%s|\n",p_ms_537_struct_h->deal_rf_ident_no);

	if (APL_FAILURE == CO_RtvSysDt(chr_l_sys_date , l_debug_info_ptr) )
	{
		printf("Failed to get the system chr_date\n");
		APL_GOBACK_FAIL

	}	
	
	if (APL_FAILURE == CO_Chk_CntryEnabled("INCOMING_MSG_DEPO", "CHECK_TRD_DETAILS",
													 &int_l_exists, l_debug_info_ptr))
	{
		APL_GOBACK_FAIL
	}

				fprintf(p_fl_536log,"------------------------------------------------------\n\n");
				fprintf(p_fl_536log,"trrf_refno = |%s|\n",p_ms_537_struct_h->deal_rf_ident_no);
				fprintf(p_fl_536log,"account = |%s|\n",p_ms_537_struct_h->client);
				fprintf(p_fl_536log,"instr_code= |%s|\n",p_ms_537_struct_h->instr_code);
				fprintf(p_fl_536log,"trcode= |%s|\n",p_ms_537_struct_h->deal_cd);
				fprintf(p_fl_536log,"ccycode= |%s|\n",p_ms_537_struct_h->currency_cd);
				fprintf(p_fl_536log,"stat_qual= |%s|\n",p_ms_537_struct_h->h_stat_qual);
				fprintf(p_fl_536log,"stat_code= |%s|\n",p_ms_537_struct_h->stat_cd);
				fprintf(p_fl_536log,"reas_code= |%s|\n",p_ms_537_struct_h->reason_cd);
				fprintf(p_fl_536log,"failnote= |%s|\n",p_ms_537_struct_h->fail_det);
				fprintf(p_fl_536log,"trdt= |%s|\n",p_ms_537_struct_h->deal_date);
				fprintf(p_fl_536log,"settledt= |%s|\n",p_ms_537_struct_h->setl_date);
				fprintf(p_fl_536log,"qty= |%lf|\n",p_ms_537_struct_h->quantity);
				fprintf(p_fl_536log,"amount= |%lf|\n",p_ms_537_struct_h->amount);
				fprintf(p_fl_536log,"domcpac= |%s|\n",p_ms_537_struct_h->domestic_cpclt);
				fprintf(p_fl_536log,"domcpacc_cname= |%s|\n",p_ms_537_struct_h->domcpclt_cd_cname);
				fprintf(p_fl_536log,"depolocation= |%s|\n",p_ms_537_struct_h->depo_loc);
				fprintf(p_fl_536log,"unique_refcheck= |%s|\n",p_ms_537_struct_h->val_unique_identity);
				fprintf(p_fl_536log,"------------------------------------------------------\n\n");

				int_l_error_flg=0;

				fprintf(p_fl_536log,"------------------------------------------------------\n\n");
				fprintf(p_fl_536log,"trrf_refno  and deal_cd selected is  %s - %s\n",p_ms_537_struct_h->deal_rf_ident_no,p_ms_537_struct_h->deal_cd);
				EXEC SQL SELECT CLIENT,
									 IDENTIY_NO,
									 DEAL_CD,
									 nvl(AMOUNT,0),
									 CURRENCY_CD,
									 nvl(QTY,0),
									 INSTR_CODE,
									 DEAL_STAT ,
									 DOMESTIC_CPCLT,
									 CP_CLT,
									 DEAL_DATE,
									 SETL_DATE,
									 ACCESS_STAMP
							INTO 	 :chr_h_trd_client:i_trd_account,
									 :chr_h_trd_refno:i_trd_refno,
									 :chr_h_trd_trcode:i_trd_trcode,
									 :dbl_h_trd_amount:i_trd_amount,
									 :chr_h_trd_ccycode:i_trd_ccycode,
									 :h_trd_quantity:i_trd_qty,
									 :chr_h_trd_instrcode:i_trd_instr_code,
									 :chr_h_trd_status:i_trd_status,
									 :chr_h_trd_domcpac:i_trd_domcpac,
									 :chr_h_trd_countacc:i_trd_countacc,
									 :chr_h_trd_trdt:i_trd_trdt,
									 :chr_h_trd_settledt:i_trd_settledt,
									 :chr_h_trd_access_stamp:i_trd_access_stamp
							FROM DL_DEAL 
							WHERE  IDENTIY_NO =decode(:p_ms_537_struct_h->val_unique_identity,'R',
													ltrim(rtrim(:p_ms_537_struct_h->deal_rf_ident_no)),IDENTIY_NO) AND
									CLIENT =decode(:p_ms_537_struct_h->val_unique_identity,'R',
													ltrim(rtrim(:p_ms_537_struct_h->client)),CLIENT) AND
									UNIQ_IDENT_NO =decode(:p_ms_537_struct_h->val_unique_identity,'U',
													ltrim(rtrim(:p_ms_537_struct_h->deal_rf_ident_no)),UNIQ_IDENT_NO) ;

						fprintf(p_fl_536log,"sqlca after selection with trrf ref %d\n",sqlca.sqlcode);
				
						  if(sqlca.sqlcode==-2112)				 
						  {
								fprintf(p_fl_536log,"Too Many Rows Found For Refno %s\n",p_ms_537_struct_h->deal_rf_ident_no);
								
								if(strcmp(chr_l_rej_str,APL_NULL_STRING)==0)
								{
									strcpy(chr_l_rej_str,"MULTIPLE MATCHING TRADES FOUND ");
								}
								else
								{
									strcat(chr_l_rej_str,", MULTIPLE MATCHING TRADES FOUND ");
								}
								strcat(chr_l_rej_str,p_ms_537_struct_h->deal_rf_ident_no);
								int_l_error_flg=1;
						  }
						  else if(sqlca.sqlcode==1403)
						  {
								fprintf(p_fl_536log,"No Matching Trade Found For The Ref No %s\n",p_ms_537_struct_h->deal_rf_ident_no);
								
								if(strcmp(chr_l_rej_str,APL_NULL_STRING)==0)
								{
									strcpy(chr_l_rej_str,"NO MATCHING TRADES FOUND for ");
								}
								else
								{
									strcat(chr_l_rej_str,", NO MATCHING TRADES FOUND for ");
								}
								strcat(chr_l_rej_str,p_ms_537_struct_h->deal_rf_ident_no);
								int_l_error_flg=1;
						  }
						  else
							IS_ANY_ORA_ERROR


				if(int_l_error_flg==1)
				{
					
					fprintf(p_fl_536log,"Error chr_flag is 1 and the errors are %s\n",chr_l_rej_str); 
               if ( APL_FAILURE == MS_Mod_IncMsgSts("RJT",chr_l_rej_str,chr_h_trd_client,(DEBUG_INFO_STRUCT_H **)NULL))
               {
                  CO_ProcMonitor(APL_OUT_FILE,"Failed to insert into IINMSGRP.\n",NULL, NULL);
               }
					APL_GOBACK_FAIL
				}
				
				if(strcmp(p_ms_537_struct_h->depo_loc,"VTB")!=0) 
				{
					memset(chr_h_depo_client,APL_NULL_CHAR,APL_CLIENT_LENGTH);
					memset(chr_h_client_type,APL_NULL_CHAR,1);

					EXEC SQL SELECT nvl(CLIENT_TYPE,' '),nvl(DEPO_CLT,' ') 
								into :chr_h_client_type,:chr_h_depo_client
								FROM MT_CLTDEPO WHERE CLIENT = :chr_h_trd_client;

						fprintf(p_fl_536log,"sqlca after selection with caccdepo %d\n",sqlca.sqlcode);
						fflush(p_fl_536log);
				
					IS_ANY_ORA_ERROR

					if(strcmp(chr_h_client_type,"O")==0)
					{
						
						
						fprintf(p_fl_536log,"p_537_struct->depo_loc is |%s|\n",p_ms_537_struct_h->depo_loc);
						EXEC SQL SELECT OMNIBUS_CLIENT INTO :chr_h_omnibus_client:i_omnibus_account FROM DL_DEPOPROCESSING
									WHERE depo_loc = trim(:p_ms_537_struct_h->depo_loc) ;

						fprintf(p_fl_536log,"sqlca after selection with omnibus %d\n",sqlca.sqlcode);
						fflush(p_fl_536log);
				
						IS_ANY_ORA_ERROR

						if (sqlca.sqlcode==1403)
						{
								if(strcmp(chr_l_rej_str,APL_NULL_STRING)==0)
								{
									strcpy(chr_l_rej_str,"DEPO LOCATION ");
								}
								else
								{
									strcat(chr_l_rej_str,", DEPO LOCATION ");
								}
								int_l_error_flg=1;
						}
						else if(strcmp(chr_h_omnibus_client,p_ms_537_struct_h->client)!=0)
						{
								if(strcmp(chr_l_rej_str,APL_NULL_STRING)==0)
								{
									strcpy(chr_l_rej_str,"OMNIBUS ACCOUNT");
								}
								else
								{
									strcat(chr_l_rej_str,", OMNIBUS ACCOUNT");
								}
								int_l_error_flg=1;
						} 
					}
					else
					{
						
						if (strcmp(p_ms_537_struct_h->client,chr_h_depo_client)!=0)
						{
								if(strcmp(chr_l_rej_str,APL_NULL_STRING)==0)
								{
									strcpy(chr_l_rej_str,"DEPOSITORY ACCOUNT");
								}
								else
								{
									strcat(chr_l_rej_str,", DEPOSITORY ACCOUNT");
								}
								int_l_error_flg=1;
						}
					}
				}

			
			if (int_l_exists != 0)
			{
				if(p_ms_537_struct_h->quantity != h_trd_quantity) 
				{
					if(strcmp(chr_l_rej_str,APL_NULL_STRING)==0)
					{
						strcpy(chr_l_rej_str,"QTY ");
					}
					else
					{
						strcat(chr_l_rej_str,", QTY ");
					}
					int_l_error_flg=1;
				}

				if(strcmp(p_ms_537_struct_h->deal_date,chr_h_trd_trdt)) 
				{
					fprintf(p_fl_536log,"struct_trdt |%s|  trd_trdt |%s|\n",p_ms_537_struct_h->deal_date,chr_h_trd_trdt);	
					fflush(p_fl_536log);
							if(strcmp(chr_l_rej_str,APL_NULL_STRING)==0)
							{
								strcpy(chr_l_rej_str,"TRDDT ");
							}
							else
							{
								strcat(chr_l_rej_str,", TRDDT ");
							}
							int_l_error_flg=1;
				}

				if(strcmp(p_ms_537_struct_h->setl_date,chr_h_trd_settledt)) 
				{
					fprintf(p_fl_536log,"struct_stdt |%s|  trd_stdt |%s|\n",p_ms_537_struct_h->setl_date,chr_h_trd_settledt);	
					fflush(p_fl_536log);
					
							if(strcmp(chr_l_rej_str,APL_NULL_STRING)==0)
							{
								strcpy(chr_l_rej_str,"SETTDT ");
							}
							else
							{
								strcat(chr_l_rej_str,", SETTDT ");
							}
							int_l_error_flg=1;
				}

            if(strcmp(p_ms_537_struct_h->instr_code,chr_h_trd_instrcode)) 
            {

					fprintf(p_fl_536log,"struct_seocde |%s|  trd_sode |%s|\n",p_ms_537_struct_h->instr_code,chr_h_trd_instrcode);	
					fflush(p_fl_536log);
                     if(strcmp(chr_l_rej_str,APL_NULL_STRING)==0)
                     {
                        strcpy(chr_l_rej_str,"INSTR_CODE ");
                     }
                     else
                     {
                        strcat(chr_l_rej_str,", INSTR_CODE ");
                     }
                     int_l_error_flg=1;
            }

            if(strcmp(p_ms_537_struct_h->domestic_cpclt,chr_h_trd_domcpac)) 
            {

					fprintf(p_fl_536log,"struct_dompac |%s|  trd_domcac |%s|\n",p_ms_537_struct_h->domestic_cpclt,chr_h_trd_domcpac);	
					fflush(p_fl_536log);
                     if(strcmp(chr_l_rej_str,APL_NULL_STRING)==0)
                     {
                        strcpy(chr_l_rej_str,"DOMCPAC ");
                     }
                     else
                     {
                        strcat(chr_l_rej_str,", DOMCPAC ");
                     }
                     int_l_error_flg=1;
            }
			}

				if(int_l_error_flg==1)
				{
					if(strcmp(chr_l_rej_str,APL_NULL_STRING)==0)
						strcpy(chr_l_rej_str,"Mismatch In Trade Values ");
					else
						strcat(chr_l_rej_str," Mismatch ");

					sprintf(chr_l_rej_str,"%s For A/c-Refno :%s/%s",chr_l_rej_str,chr_h_trd_client,chr_h_trd_refno);
					
					fprintf(p_fl_536log,"Error chr_flag is 1 and the errors are %s\n",chr_l_rej_str); 
               if ( APL_FAILURE == MS_Mod_IncMsgSts("RJT",chr_l_rej_str,chr_h_trd_client,(DEBUG_INFO_STRUCT_H **)NULL))
               {
                  CO_ProcMonitor(APL_OUT_FILE,"Failed to insert into IINMSGRP.\n",NULL, NULL);
						APL_GOBACK_FAIL
               }
				}
				
			if(int_l_error_flg==0)
			{
				

				
					
               if (APL_FAILURE == CR_Rtv_FailCd(p_ms_537_struct_h->h_stat_qual,
                                                   p_ms_537_struct_h->stat_cd,
                                                   p_ms_537_struct_h->stat_cd,
                                                   p_ms_537_struct_h->reason_cd,
                                                   p_ms_537_struct_h->fail_det,
                                                   int_l_h_failcode,
																	&int_l_h_subfailcode,
                                                   &l_debug_info_ptr))
               {
                  sprintf(chr_l_rej_str,"External failreason_cd |%s/%s/%s/%s| not in SMAC\n",
													p_ms_537_struct_h->h_stat_qual,p_ms_537_struct_h->stat_cd,
													p_ms_537_struct_h->stat_cd, p_ms_537_struct_h->reason_cd);
						sprintf(chr_l_rej_str,"%s For A/c-Refno :%s/%s",chr_l_rej_str,chr_h_trd_client,chr_h_trd_refno);
               	if ( APL_FAILURE == MS_Mod_IncMsgSts("RJT",chr_l_rej_str, chr_h_trd_client,(DEBUG_INFO_STRUCT_H **)NULL))
               	{
                  	CO_ProcMonitor(APL_OUT_FILE,"Failed to insert into IINMSGRP.\n",NULL, NULL);
						}
               	CO_ProcMonitor(p_fl_536log, "Could not get fail h_code.", NULL, NULL);
                  APL_GOBACK_FAIL
               }
					fprintf(p_fl_536log, "fail h_code is |%s| and sub_fail_cd is |%d|.\n", int_l_h_failcode, int_l_h_subfailcode);
					fflush(p_fl_536log);

            memset(&l_dl_deal_fail_struct_ha,NULL,sizeof(DL_DEAL_FAIL_STRUCT_H));
            strcpy(l_dl_deal_fail_struct_ha.h_dl_client,chr_h_trd_client);
            strcpy(l_dl_deal_fail_struct_ha.h_indentity_no,chr_h_trd_refno);
            strcpy(l_dl_deal_fail_struct_ha.h_fail_cd,int_l_h_failcode);
            strcpy(l_dl_deal_fail_struct_ha.h_failinfo,p_ms_537_struct_h->fail_det);
            strcpy(l_dl_deal_fail_struct_ha.h_custinfo,APL_NULL_STRING);
            strcpy(p_intlenv_data_struct_h->h_mode,UFL_MODE);
				l_dl_deal_fail_struct_ha.h_subfailreas_cd = int_l_h_subfailcode;

					fprintf(p_fl_536log, "going to update trdfail for clt |%s| and refno |%s|\n", chr_h_trd_client, chr_h_trd_refno);
					fprintf(p_fl_536log, "trdfailstruct for clt |%s| and refno |%s|\n", l_dl_deal_fail_struct_ha.h_dl_client, l_dl_deal_fail_struct_ha.h_indentity_no);
					fflush(p_fl_536log);
				
            if (APL_FAILURE == DL_Rtv_TrdChrVal(chr_h_trd_client,
                                              chr_h_trd_refno,
                                              "access_stamp",
                                              l_dl_deal_fail_struct_ha.h_access_stamp,
                                              l_debug_info_ptr))
            {
					strcpy(chr_l_rej_str,"Could not lock the trade record for updating fail reason.");
               CO_ProcMonitor(p_fl_536log, "Could not lock the trade record for updating fail reason.",NULL,NULL);
					int_l_error_flg = 1;
            }

            if (APL_FAILURE == DL_Mod_DLFailReas(&l_dl_deal_fail_struct_ha,
                                               p_intlenv_data_struct_h,
                                               l_debug_info_ptr))
            {
					strcpy(chr_l_rej_str,"Could not update fail reason.");
               CO_ProcMonitor(p_fl_536log, "Could not update fail reason.", NULL, NULL);
					int_l_error_flg = 1;
            }

				if (int_l_error_flg == 1)
				{
					sprintf(chr_l_rej_str,"%s For A/c-Refno :%s/%s",chr_l_rej_str,chr_h_trd_client,chr_h_trd_refno);
            	if ( APL_FAILURE == MS_Mod_IncMsgSts("RJT",chr_l_rej_str,chr_h_trd_client,l_debug_info_ptr))
            	{
               	CO_ProcMonitor(p_fl_536log,"failed to insert into IINMSGRP.\n",NULL , NULL);
					}
					APL_GOBACK_FAIL
				}

				strcpy(chr_l_rej_str,"STP For ");
				strcat(chr_l_rej_str,p_ms_537_struct_h->deal_rf_ident_no);
				  printf("\n chr_g_msgfile_name 16 is |%s|\n",chr_g_msgfile_name);
            if ( APL_FAILURE == MS_Mod_IncMsgSts("STP",chr_l_rej_str,chr_h_trd_client,(DEBUG_INFO_STRUCT_H **)NULL))
            {
               CO_ProcMonitor(APL_OUT_FILE,"failed to insert into IINMSGRP.\n",NULL, NULL);
					APL_GOBACK_FAIL
            }
			}


   
   RETURN_SUCCESS:
   {
          APL_IF_DEBUG
          {
            CO_ProcMonitor(p_fl_536log,"Exiting out of DL_Proc_MarkDLFail successfully\n",
                                  NULL,
                                  NULL);
				printf("Exiting out of DL_Proc_MarkDLFail successfully\n");
          }
          return (APL_SUCCESS);
   }

   RETURN_FAILURE:
   {
          APL_IF_DEBUG
          {
           CO_ProcMonitor(p_fl_536log,"Exiting out of DL_Proc_MarkDLFail unsuccessfully\n",
                                 l_debug_info_ptr,
                                 NULL);
				printf("Exiting out of DL_Proc_MarkDLFail unsuccessfully\n");
          }
          return (APL_FAILURE);
   }

}

int CR_Rtv_FailCd(char *p_status_qual,char *p_status_code,
                char *p_reas_qual,char *p_reas_code,
					char *p_failnote,
               char *p_failcode, int *p_subfailcode,
               DEBUG_INFO_STRUCT_H **l_debug_info_ptr
                      )
{

   char int_l_h_failcode[FAILREAS_CD_LEN]   = APL_NULL_STRING;
   int int_l_h_subfailcode   = 0;
   short l_i_failcode   = 0;
   short l_i_subfailcode   = 0;

	printf(" entered processtion getfailcode \n");
					
   EXEC SQL VAR int_l_h_failcode IS STRING;

	if (!strcmp(p_reas_code,"NARR"))
	{
		printf("sq = |%s|,sc = |%s|,rc = |%s|,\n fn = |%s|\n",p_status_qual,p_status_code,p_reas_code,p_failnote);
   	EXEC SQL SELECT FAILREASON_CD,SUB_FAIL_CD INTO
            :int_l_h_failcode:l_i_failcode, :int_l_h_subfailcode
         FROM PRO_FAILCODES
         WHERE	status_qual_ind = :p_status_qual AND
               (status_cd = :p_status_code OR 
					status_cd = decode(substr(:p_status_code,1,3),'PEN','PEND/F',:p_status_code)) AND
               reason_cd = :p_reas_code AND
         		FAILREASON_DET like :p_failnote || '%' AND
               rownum < 2;

   	IS_ANY_ORA_ERROR
	}
	else
	{
   	EXEC SQL SELECT FAILREASON_CD,SUB_FAIL_CD INTO
            :int_l_h_failcode:l_i_failcode, :int_l_h_subfailcode
         FROM PRO_FAILCODES
         WHERE status_qual_ind = :p_status_qual AND
               (status_cd = :p_status_code OR 
						status_cd = decode(substr(:p_status_code,1,3),'PEN','PEND/F',:p_status_code)) AND
               nvl(reason_cd,' ') = nvl(:p_reas_code,' ') AND
               rownum < 2;

   	IS_ANY_ORA_ERROR
	}
   if (sqlca.sqlcode == 0)
   {
      strcpy(p_failcode,int_l_h_failcode);
      *p_subfailcode = int_l_h_subfailcode;
   }
   else
   {      
		
		APL_GOBACK_FAIL
   }


   APL_GOBACK_SUCCESS

   RETURN_SUCCESS:
      printf("Leaving processtion CR_Rtv_FailCd with success |%d| \n",*p_subfailcode);
      return (APL_SUCCESS);

   RETURN_FAILURE:
      printf("Leaving processtion CR_Rtv_FailCd with failure\n");
      strcpy(p_failcode,APL_NULL_STRING);
      *p_subfailcode = 0;
      return (APL_FAILURE);
}
